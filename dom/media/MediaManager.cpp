#
include
"
MediaManager
.
h
"
#
include
"
AudioCaptureTrack
.
h
"
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
AudioStreamTrack
.
h
"
#
include
"
CubebDeviceEnumerator
.
h
"
#
include
"
MediaTimer
.
h
"
#
include
"
MediaTrackConstraints
.
h
"
#
include
"
MediaTrackGraphImpl
.
h
"
#
include
"
MediaTrackListener
.
h
"
#
include
"
VideoStreamTrack
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
PeerIdentity
.
h
"
#
include
"
mozilla
/
PermissionDelegateHandler
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
GetUserMediaRequestBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaDeviceInfo
.
h
"
#
include
"
mozilla
/
dom
/
MediaDevices
.
h
"
#
include
"
mozilla
/
dom
/
MediaDevicesBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UserActivation
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
media
/
MediaChild
.
h
"
#
include
"
mozilla
/
media
/
MediaTaskUtils
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsArray
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
nsICryptoHMAC
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIKeyModule
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nspr
.
h
"
#
include
"
nss
.
h
"
#
include
"
pk11pub
.
h
"
#
include
"
MediaEngineDefault
.
h
"
#
if
defined
(
MOZ_WEBRTC
)
#
include
"
MediaEngineWebRTC
.
h
"
#
include
"
MediaEngineWebRTCAudio
.
h
"
#
include
"
browser_logging
/
WebRtcLog
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
#
include
<
iphlpapi
.
h
>
#
include
<
objbase
.
h
>
#
include
<
tchar
.
h
>
#
include
<
winsock2
.
h
>
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
endif
template
<
class
WebIDLCallbackT
class
XPCOMCallbackT
>
class
nsMainThreadPtrHolder
<
mozilla
:
:
dom
:
:
CallbackObjectHolder
<
WebIDLCallbackT
XPCOMCallbackT
>
>
final
{
typedef
mozilla
:
:
dom
:
:
CallbackObjectHolder
<
WebIDLCallbackT
XPCOMCallbackT
>
Holder
;
public
:
nsMainThreadPtrHolder
(
const
char
*
aName
Holder
&
&
aHolder
)
:
mHolder
(
std
:
:
move
(
aHolder
)
)
#
ifndef
RELEASE_OR_BETA
mName
(
aName
)
#
endif
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
private
:
~
nsMainThreadPtrHolder
(
)
{
if
(
NS_IsMainThread
(
)
)
{
mHolder
.
Reset
(
)
;
}
else
if
(
mHolder
.
GetISupports
(
)
)
{
nsCOMPtr
<
nsIEventTarget
>
target
=
do_GetMainThread
(
)
;
MOZ_ASSERT
(
target
)
;
NS_ProxyRelease
(
#
ifdef
RELEASE_OR_BETA
nullptr
#
else
mName
#
endif
target
mHolder
.
Forget
(
)
)
;
}
}
public
:
Holder
*
get
(
)
{
if
(
MOZ_UNLIKELY
(
!
NS_IsMainThread
(
)
)
)
{
NS_ERROR
(
"
Can
'
t
dereference
nsMainThreadPtrHolder
off
main
thread
"
)
;
MOZ_CRASH
(
)
;
}
return
&
mHolder
;
}
bool
operator
!
(
)
const
{
return
!
mHolder
;
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
nsMainThreadPtrHolder
<
Holder
>
)
private
:
Holder
mHolder
;
#
ifndef
RELEASE_OR_BETA
const
char
*
mName
=
nullptr
;
#
endif
Holder
&
operator
=
(
const
nsMainThreadPtrHolder
&
aOther
)
=
delete
;
nsMainThreadPtrHolder
(
const
nsMainThreadPtrHolder
&
aOther
)
=
delete
;
}
;
namespace
mozilla
{
LazyLogModule
gMediaManagerLog
(
"
MediaManager
"
)
;
#
define
LOG
(
.
.
.
)
MOZ_LOG
(
gMediaManagerLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
class
GetUserMediaStreamTask
;
class
LocalTrackSource
;
class
SelectAudioOutputTask
;
using
dom
:
:
BFCacheStatus
;
using
dom
:
:
CallerType
;
using
dom
:
:
ConstrainDOMStringParameters
;
using
dom
:
:
ConstrainDoubleRange
;
using
dom
:
:
ConstrainLongRange
;
using
dom
:
:
DisplayMediaStreamConstraints
;
using
dom
:
:
Document
;
using
dom
:
:
Element
;
using
dom
:
:
FeaturePolicyUtils
;
using
dom
:
:
File
;
using
dom
:
:
GetUserMediaRequest
;
using
dom
:
:
MediaDeviceKind
;
using
dom
:
:
MediaDevices
;
using
dom
:
:
MediaSourceEnum
;
using
dom
:
:
MediaStreamConstraints
;
using
dom
:
:
MediaStreamError
;
using
dom
:
:
MediaStreamTrack
;
using
dom
:
:
MediaStreamTrackSource
;
using
dom
:
:
MediaTrackConstraints
;
using
dom
:
:
MediaTrackConstraintSet
;
using
dom
:
:
MediaTrackSettings
;
using
dom
:
:
OwningBooleanOrMediaTrackConstraints
;
using
dom
:
:
OwningStringOrStringSequence
;
using
dom
:
:
OwningStringOrStringSequenceOrConstrainDOMStringParameters
;
using
dom
:
:
Promise
;
using
dom
:
:
Sequence
;
using
dom
:
:
UserActivation
;
using
dom
:
:
WindowGlobalChild
;
using
media
:
:
NewRunnableFrom
;
using
media
:
:
NewTaskFrom
;
using
media
:
:
Refcountable
;
static
Atomic
<
bool
>
sHasShutdown
;
struct
DeviceState
{
DeviceState
(
RefPtr
<
MediaDevice
>
aDevice
RefPtr
<
LocalTrackSource
>
aTrackSource
bool
aOffWhileDisabled
)
:
mOffWhileDisabled
(
aOffWhileDisabled
)
mDevice
(
std
:
:
move
(
aDevice
)
)
mTrackSource
(
std
:
:
move
(
aTrackSource
)
)
{
MOZ_ASSERT
(
mDevice
)
;
MOZ_ASSERT
(
mTrackSource
)
;
}
bool
mStopped
=
false
;
bool
mDeviceEnabled
=
false
;
bool
mDeviceMuted
;
bool
mTrackEnabled
=
false
;
TimeStamp
mTrackEnabledTime
;
bool
mOperationInProgress
=
false
;
bool
mOffWhileDisabled
=
false
;
const
RefPtr
<
MediaTimer
>
mDisableTimer
=
new
MediaTimer
(
)
;
const
RefPtr
<
MediaDevice
>
mDevice
;
const
RefPtr
<
LocalTrackSource
>
mTrackSource
;
}
;
enum
class
CaptureState
:
uint16_t
{
Off
=
nsIMediaManagerService
:
:
STATE_NOCAPTURE
Enabled
=
nsIMediaManagerService
:
:
STATE_CAPTURE_ENABLED
Disabled
=
nsIMediaManagerService
:
:
STATE_CAPTURE_DISABLED
}
;
static
CaptureState
CombineCaptureState
(
CaptureState
aFirst
CaptureState
aSecond
)
{
if
(
aFirst
=
=
CaptureState
:
:
Enabled
|
|
aSecond
=
=
CaptureState
:
:
Enabled
)
{
return
CaptureState
:
:
Enabled
;
}
if
(
aFirst
=
=
CaptureState
:
:
Disabled
|
|
aSecond
=
=
CaptureState
:
:
Disabled
)
{
return
CaptureState
:
:
Disabled
;
}
MOZ_ASSERT
(
aFirst
=
=
CaptureState
:
:
Off
)
;
MOZ_ASSERT
(
aSecond
=
=
CaptureState
:
:
Off
)
;
return
CaptureState
:
:
Off
;
}
static
uint16_t
FromCaptureState
(
CaptureState
aState
)
{
MOZ_ASSERT
(
aState
=
=
CaptureState
:
:
Off
|
|
aState
=
=
CaptureState
:
:
Enabled
|
|
aState
=
=
CaptureState
:
:
Disabled
)
;
return
static_cast
<
uint16_t
>
(
aState
)
;
}
void
MediaManager
:
:
CallOnError
(
GetUserMediaErrorCallback
&
aCallback
MediaStreamError
&
aError
)
{
aCallback
.
Call
(
aError
)
;
}
void
MediaManager
:
:
CallOnSuccess
(
GetUserMediaSuccessCallback
&
aCallback
DOMMediaStream
&
aStream
)
{
aCallback
.
Call
(
aStream
)
;
}
class
DeviceListener
:
public
SupportsWeakPtr
{
public
:
typedef
MozPromise
<
bool
RefPtr
<
MediaMgrError
>
true
>
DeviceListenerPromise
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_MAIN_THREAD
(
DeviceListener
)
DeviceListener
(
)
;
void
Register
(
GetUserMediaWindowListener
*
aListener
)
;
void
Activate
(
RefPtr
<
MediaDevice
>
aDevice
RefPtr
<
LocalTrackSource
>
aTrackSource
bool
aStartMuted
)
;
RefPtr
<
DeviceListenerPromise
>
InitializeAsync
(
)
;
void
Stop
(
)
;
void
GetSettings
(
MediaTrackSettings
&
aOutSettings
)
const
;
void
SetDeviceEnabled
(
bool
aEnabled
)
;
void
SetDeviceMuted
(
bool
aMuted
)
;
void
MuteOrUnmuteCamera
(
bool
aMute
)
;
void
MuteOrUnmuteMicrophone
(
bool
aMute
)
;
MediaDevice
*
GetDevice
(
)
const
{
return
mDeviceState
?
mDeviceState
-
>
mDevice
.
get
(
)
:
nullptr
;
}
bool
Activated
(
)
const
{
return
static_cast
<
bool
>
(
mDeviceState
)
;
}
bool
Stopped
(
)
const
{
return
mStopped
;
}
bool
CapturingVideo
(
)
const
;
bool
CapturingAudio
(
)
const
;
CaptureState
CapturingSource
(
MediaSourceEnum
aSource
)
const
;
RefPtr
<
DeviceListenerPromise
>
ApplyConstraints
(
const
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
)
;
PrincipalHandle
GetPrincipalHandle
(
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
amount
=
aMallocSizeOf
(
this
)
;
return
amount
;
}
private
:
virtual
~
DeviceListener
(
)
{
MOZ_ASSERT
(
mStopped
)
;
MOZ_ASSERT
(
!
mWindowListener
)
;
}
using
DeviceOperationPromise
=
MozPromise
<
nsresult
bool
true
>
;
RefPtr
<
DeviceOperationPromise
>
UpdateDevice
(
bool
aOn
)
;
bool
mStopped
;
PRThread
*
mMainThreadCheck
;
PrincipalHandle
mPrincipalHandle
;
GetUserMediaWindowListener
*
mWindowListener
;
UniquePtr
<
DeviceState
>
mDeviceState
;
}
;
class
GetUserMediaWindowListener
{
friend
MediaManager
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GetUserMediaWindowListener
)
GetUserMediaWindowListener
(
uint64_t
aWindowID
const
PrincipalHandle
&
aPrincipalHandle
)
:
mWindowID
(
aWindowID
)
mPrincipalHandle
(
aPrincipalHandle
)
mChromeNotificationTaskPosted
(
false
)
{
}
void
Register
(
RefPtr
<
DeviceListener
>
aListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aListener
)
;
MOZ_ASSERT
(
!
aListener
-
>
Activated
(
)
)
;
MOZ_ASSERT
(
!
mInactiveListeners
.
Contains
(
aListener
)
"
Already
registered
"
)
;
MOZ_ASSERT
(
!
mActiveListeners
.
Contains
(
aListener
)
"
Already
activated
"
)
;
aListener
-
>
Register
(
this
)
;
mInactiveListeners
.
AppendElement
(
std
:
:
move
(
aListener
)
)
;
}
void
Activate
(
RefPtr
<
DeviceListener
>
aListener
RefPtr
<
MediaDevice
>
aDevice
RefPtr
<
LocalTrackSource
>
aTrackSource
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aListener
)
;
MOZ_ASSERT
(
!
aListener
-
>
Activated
(
)
)
;
MOZ_ASSERT
(
mInactiveListeners
.
Contains
(
aListener
)
"
Must
be
registered
to
activate
"
)
;
MOZ_ASSERT
(
!
mActiveListeners
.
Contains
(
aListener
)
"
Already
activated
"
)
;
bool
muted
=
false
;
if
(
aDevice
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
)
{
muted
=
mCamerasAreMuted
;
}
else
if
(
aDevice
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
)
{
muted
=
mMicrophonesAreMuted
;
}
else
{
MOZ_CRASH
(
"
Unexpected
device
kind
"
)
;
}
mInactiveListeners
.
RemoveElement
(
aListener
)
;
aListener
-
>
Activate
(
std
:
:
move
(
aDevice
)
std
:
:
move
(
aTrackSource
)
muted
)
;
mActiveListeners
.
AppendElement
(
std
:
:
move
(
aListener
)
)
;
}
void
RemoveAll
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
l
:
mInactiveListeners
.
Clone
(
)
)
{
Remove
(
l
)
;
}
for
(
auto
&
l
:
mActiveListeners
.
Clone
(
)
)
{
Remove
(
l
)
;
}
MOZ_ASSERT
(
mInactiveListeners
.
Length
(
)
=
=
0
)
;
MOZ_ASSERT
(
mActiveListeners
.
Length
(
)
=
=
0
)
;
MediaManager
*
mgr
=
MediaManager
:
:
GetIfExists
(
)
;
if
(
!
mgr
)
{
MOZ_ASSERT
(
false
"
MediaManager
should
stay
until
everything
is
removed
"
)
;
return
;
}
GetUserMediaWindowListener
*
windowListener
=
mgr
-
>
GetWindowListener
(
mWindowID
)
;
if
(
!
windowListener
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
auto
*
globalWindow
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mWindowID
)
;
if
(
globalWindow
)
{
auto
req
=
MakeRefPtr
<
GetUserMediaRequest
>
(
globalWindow
VoidString
(
)
VoidString
(
)
UserActivation
:
:
IsHandlingUserInput
(
)
)
;
obs
-
>
NotifyWhenScriptSafe
(
req
"
recording
-
device
-
stopped
"
nullptr
)
;
}
return
;
}
MOZ_ASSERT
(
windowListener
=
=
this
"
There
should
only
be
one
window
listener
per
window
ID
"
)
;
LOG
(
"
GUMWindowListener
%
p
removing
windowID
%
"
PRIu64
this
mWindowID
)
;
mgr
-
>
RemoveWindowID
(
mWindowID
)
;
}
bool
Remove
(
RefPtr
<
DeviceListener
>
aListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mInactiveListeners
.
RemoveElement
(
aListener
)
&
&
!
mActiveListeners
.
RemoveElement
(
aListener
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
mInactiveListeners
.
Contains
(
aListener
)
"
A
DeviceListener
should
only
be
once
in
one
of
"
"
mInactiveListeners
and
mActiveListeners
"
)
;
MOZ_ASSERT
(
!
mActiveListeners
.
Contains
(
aListener
)
"
A
DeviceListener
should
only
be
once
in
one
of
"
"
mInactiveListeners
and
mActiveListeners
"
)
;
LOG
(
"
GUMWindowListener
%
p
stopping
DeviceListener
%
p
.
"
this
aListener
.
get
(
)
)
;
aListener
-
>
Stop
(
)
;
if
(
MediaDevice
*
removedDevice
=
aListener
-
>
GetDevice
(
)
)
{
bool
revokePermission
=
true
;
nsString
removedRawId
;
nsString
removedSourceType
;
removedDevice
-
>
GetRawId
(
removedRawId
)
;
removedDevice
-
>
GetMediaSource
(
removedSourceType
)
;
for
(
const
auto
&
l
:
mActiveListeners
)
{
if
(
MediaDevice
*
device
=
l
-
>
GetDevice
(
)
)
{
nsString
rawId
;
device
-
>
GetRawId
(
rawId
)
;
if
(
removedRawId
.
Equals
(
rawId
)
)
{
revokePermission
=
false
;
break
;
}
}
}
if
(
revokePermission
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
auto
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mWindowID
)
;
auto
req
=
MakeRefPtr
<
GetUserMediaRequest
>
(
window
removedRawId
removedSourceType
UserActivation
:
:
IsHandlingUserInput
(
)
)
;
obs
-
>
NotifyWhenScriptSafe
(
req
"
recording
-
device
-
stopped
"
nullptr
)
;
}
}
if
(
mInactiveListeners
.
Length
(
)
=
=
0
&
&
mActiveListeners
.
Length
(
)
=
=
0
)
{
LOG
(
"
GUMWindowListener
%
p
Removed
last
DeviceListener
.
Cleaning
up
.
"
this
)
;
RemoveAll
(
)
;
}
nsCOMPtr
<
nsIEventTarget
>
mainTarget
=
do_GetMainThread
(
)
;
NS_ProxyRelease
(
__func__
mainTarget
aListener
.
forget
(
)
true
)
;
return
true
;
}
void
StopSharing
(
)
;
void
StopRawID
(
const
nsString
&
removedDeviceID
)
;
void
MuteOrUnmuteCameras
(
bool
aMute
)
;
void
MuteOrUnmuteMicrophones
(
bool
aMute
)
;
void
ChromeAffectingStateChanged
(
)
;
void
NotifyChrome
(
)
;
bool
CapturingVideo
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
l
:
mActiveListeners
)
{
if
(
l
-
>
CapturingVideo
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
CapturingAudio
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
l
:
mActiveListeners
)
{
if
(
l
-
>
CapturingAudio
(
)
)
{
return
true
;
}
}
return
false
;
}
CaptureState
CapturingSource
(
MediaSourceEnum
aSource
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CaptureState
result
=
CaptureState
:
:
Off
;
for
(
auto
&
l
:
mActiveListeners
)
{
result
=
CombineCaptureState
(
result
l
-
>
CapturingSource
(
aSource
)
)
;
}
return
result
;
}
void
GetDevices
(
const
RefPtr
<
MediaManager
:
:
MediaDeviceSetRefCnt
>
&
aOutDevices
)
{
for
(
auto
&
l
:
mActiveListeners
)
{
aOutDevices
-
>
AppendElement
(
l
-
>
GetDevice
(
)
)
;
}
}
uint64_t
WindowID
(
)
const
{
return
mWindowID
;
}
PrincipalHandle
GetPrincipalHandle
(
)
const
{
return
mPrincipalHandle
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
amount
=
aMallocSizeOf
(
this
)
;
amount
+
=
mInactiveListeners
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
const
RefPtr
<
DeviceListener
>
&
listener
:
mInactiveListeners
)
{
amount
+
=
listener
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
amount
+
=
mActiveListeners
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
const
RefPtr
<
DeviceListener
>
&
listener
:
mActiveListeners
)
{
amount
+
=
listener
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
return
amount
;
}
private
:
~
GetUserMediaWindowListener
(
)
{
MOZ_ASSERT
(
mInactiveListeners
.
Length
(
)
=
=
0
"
Inactive
listeners
should
already
be
removed
"
)
;
MOZ_ASSERT
(
mActiveListeners
.
Length
(
)
=
=
0
"
Active
listeners
should
already
be
removed
"
)
;
}
uint64_t
mWindowID
;
const
PrincipalHandle
mPrincipalHandle
;
bool
mChromeNotificationTaskPosted
;
nsTArray
<
RefPtr
<
DeviceListener
>
>
mInactiveListeners
;
nsTArray
<
RefPtr
<
DeviceListener
>
>
mActiveListeners
;
bool
mCamerasAreMuted
=
false
;
bool
mMicrophonesAreMuted
=
false
;
}
;
class
LocalTrackSource
:
public
MediaStreamTrackSource
{
public
:
LocalTrackSource
(
nsIPrincipal
*
aPrincipal
const
nsString
&
aLabel
const
RefPtr
<
DeviceListener
>
&
aListener
MediaSourceEnum
aSource
MediaTrack
*
aTrack
RefPtr
<
PeerIdentity
>
aPeerIdentity
)
:
MediaStreamTrackSource
(
aPrincipal
aLabel
)
mSource
(
aSource
)
mTrack
(
aTrack
)
mPeerIdentity
(
std
:
:
move
(
aPeerIdentity
)
)
mListener
(
aListener
.
get
(
)
)
{
}
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
mSource
;
}
const
PeerIdentity
*
GetPeerIdentity
(
)
const
override
{
return
mPeerIdentity
;
}
RefPtr
<
MediaStreamTrackSource
:
:
ApplyConstraintsPromise
>
ApplyConstraints
(
const
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sHasShutdown
|
|
!
mListener
)
{
return
MediaStreamTrackSource
:
:
ApplyConstraintsPromise
:
:
CreateAndResolve
(
false
__func__
)
;
}
return
mListener
-
>
ApplyConstraints
(
aConstraints
aCallerType
)
;
}
void
GetSettings
(
MediaTrackSettings
&
aOutSettings
)
override
{
if
(
mListener
)
{
mListener
-
>
GetSettings
(
aOutSettings
)
;
}
}
void
Stop
(
)
override
{
if
(
mListener
)
{
mListener
-
>
Stop
(
)
;
mListener
=
nullptr
;
}
if
(
!
mTrack
-
>
IsDestroyed
(
)
)
{
mTrack
-
>
Destroy
(
)
;
}
}
void
Disable
(
)
override
{
if
(
mListener
)
{
mListener
-
>
SetDeviceEnabled
(
false
)
;
}
}
void
Enable
(
)
override
{
if
(
mListener
)
{
mListener
-
>
SetDeviceEnabled
(
true
)
;
}
}
void
Mute
(
)
{
MutedChanged
(
true
)
;
mTrack
-
>
SetDisabledTrackMode
(
DisabledTrackMode
:
:
SILENCE_BLACK
)
;
}
void
Unmute
(
)
{
MutedChanged
(
false
)
;
mTrack
-
>
SetDisabledTrackMode
(
DisabledTrackMode
:
:
ENABLED
)
;
}
const
MediaSourceEnum
mSource
;
const
RefPtr
<
MediaTrack
>
mTrack
;
const
RefPtr
<
const
PeerIdentity
>
mPeerIdentity
;
protected
:
~
LocalTrackSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mTrack
-
>
IsDestroyed
(
)
)
;
}
WeakPtr
<
DeviceListener
>
mListener
;
}
;
class
AudioCaptureTrackSource
:
public
LocalTrackSource
{
public
:
AudioCaptureTrackSource
(
nsIPrincipal
*
aPrincipal
nsPIDOMWindowInner
*
aWindow
const
nsString
&
aLabel
AudioCaptureTrack
*
aAudioCaptureTrack
RefPtr
<
PeerIdentity
>
aPeerIdentity
)
:
LocalTrackSource
(
aPrincipal
aLabel
nullptr
MediaSourceEnum
:
:
AudioCapture
aAudioCaptureTrack
std
:
:
move
(
aPeerIdentity
)
)
mWindow
(
aWindow
)
mAudioCaptureTrack
(
aAudioCaptureTrack
)
{
mAudioCaptureTrack
-
>
Start
(
)
;
mAudioCaptureTrack
-
>
Graph
(
)
-
>
RegisterCaptureTrackForWindow
(
mWindow
-
>
WindowID
(
)
mAudioCaptureTrack
)
;
mWindow
-
>
SetAudioCapture
(
true
)
;
}
void
Stop
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mAudioCaptureTrack
-
>
IsDestroyed
(
)
)
{
MOZ_ASSERT
(
mWindow
)
;
mWindow
-
>
SetAudioCapture
(
false
)
;
mAudioCaptureTrack
-
>
Graph
(
)
-
>
UnregisterCaptureTrackForWindow
(
mWindow
-
>
WindowID
(
)
)
;
mWindow
=
nullptr
;
}
LocalTrackSource
:
:
Stop
(
)
;
MOZ_ASSERT
(
mAudioCaptureTrack
-
>
IsDestroyed
(
)
)
;
}
ProcessedMediaTrack
*
InputTrack
(
)
const
{
return
mAudioCaptureTrack
.
get
(
)
;
}
protected
:
~
AudioCaptureTrackSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mAudioCaptureTrack
-
>
IsDestroyed
(
)
)
;
}
RefPtr
<
nsPIDOMWindowInner
>
mWindow
;
const
RefPtr
<
AudioCaptureTrack
>
mAudioCaptureTrack
;
}
;
NS_IMPL_ISUPPORTS
(
MediaDevice
nsIMediaDevice
)
MediaDevice
:
:
MediaDevice
(
const
RefPtr
<
MediaEngineSource
>
&
aSource
const
nsString
&
aRawName
const
nsString
&
aRawID
const
nsString
&
aRawGroupID
)
:
mSource
(
aSource
)
mSinkInfo
(
nullptr
)
mKind
(
(
mSource
&
&
MediaEngineSource
:
:
IsVideo
(
mSource
-
>
GetMediaSource
(
)
)
)
?
MediaDeviceKind
:
:
Videoinput
:
MediaDeviceKind
:
:
Audioinput
)
mScary
(
mSource
-
>
GetScary
(
)
)
mIsFake
(
mSource
-
>
IsFake
(
)
)
mType
(
NS_ConvertASCIItoUTF16
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
mKind
)
)
)
mRawID
(
aRawID
)
mRawGroupID
(
aRawGroupID
)
mRawName
(
aRawName
)
{
MOZ_ASSERT
(
mSource
)
;
}
MediaDevice
:
:
MediaDevice
(
const
RefPtr
<
AudioDeviceInfo
>
&
aAudioDeviceInfo
const
nsString
&
aRawID
const
nsString
&
aRawGroupID
)
:
mSource
(
nullptr
)
mSinkInfo
(
aAudioDeviceInfo
)
mKind
(
mSinkInfo
-
>
Type
(
)
=
=
AudioDeviceInfo
:
:
TYPE_INPUT
?
MediaDeviceKind
:
:
Audioinput
:
MediaDeviceKind
:
:
Audiooutput
)
mScary
(
false
)
mIsFake
(
false
)
mType
(
NS_ConvertASCIItoUTF16
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
mKind
)
)
)
mRawID
(
aRawID
)
mRawGroupID
(
aRawGroupID
)
mRawName
(
mSinkInfo
-
>
Name
(
)
)
{
MOZ_ASSERT
(
mKind
=
=
MediaDeviceKind
:
:
Audiooutput
)
;
MOZ_ASSERT
(
mSinkInfo
)
;
}
RefPtr
<
MediaDevice
>
MediaDevice
:
:
CopyWithNewRawGroupId
(
const
RefPtr
<
MediaDevice
>
&
aOther
const
nsString
&
aRawGroupID
)
{
return
new
MediaDevice
(
aOther
aOther
-
>
mID
aOther
-
>
mGroupID
aOther
-
>
mRawID
aRawGroupID
aOther
-
>
mName
)
;
}
MediaDevice
:
:
MediaDevice
(
const
RefPtr
<
MediaDevice
>
&
aOther
const
nsString
&
aID
const
nsString
&
aGroupID
const
nsString
&
aRawID
const
nsString
&
aRawGroupID
const
nsString
&
aName
)
:
mSource
(
aOther
-
>
mSource
)
mSinkInfo
(
aOther
-
>
mSinkInfo
)
mKind
(
aOther
-
>
mKind
)
mScary
(
aOther
-
>
mScary
)
mIsFake
(
aOther
-
>
mIsFake
)
mType
(
aOther
-
>
mType
)
mName
(
aName
)
mID
(
aID
)
mGroupID
(
aGroupID
)
mRawID
(
aRawID
)
mRawGroupID
(
aRawGroupID
)
mRawName
(
aOther
-
>
mRawName
)
{
MOZ_ASSERT
(
aOther
)
;
}
bool
MediaDevice
:
:
StringsContain
(
const
OwningStringOrStringSequence
&
aStrings
nsString
aN
)
{
return
aStrings
.
IsString
(
)
?
aStrings
.
GetAsString
(
)
=
=
aN
:
aStrings
.
GetAsStringSequence
(
)
.
Contains
(
aN
)
;
}
uint32_t
MediaDevice
:
:
FitnessDistance
(
nsString
aN
const
ConstrainDOMStringParameters
&
aParams
)
{
if
(
aParams
.
mExact
.
WasPassed
(
)
&
&
!
StringsContain
(
aParams
.
mExact
.
Value
(
)
aN
)
)
{
return
UINT32_MAX
;
}
if
(
aParams
.
mIdeal
.
WasPassed
(
)
&
&
!
StringsContain
(
aParams
.
mIdeal
.
Value
(
)
aN
)
)
{
return
1
;
}
return
0
;
}
uint32_t
MediaDevice
:
:
FitnessDistance
(
nsString
aN
const
OwningStringOrStringSequenceOrConstrainDOMStringParameters
&
aConstraint
)
{
if
(
aConstraint
.
IsString
(
)
)
{
ConstrainDOMStringParameters
params
;
params
.
mIdeal
.
Construct
(
)
;
params
.
mIdeal
.
Value
(
)
.
SetAsString
(
)
=
aConstraint
.
GetAsString
(
)
;
return
FitnessDistance
(
aN
params
)
;
}
else
if
(
aConstraint
.
IsStringSequence
(
)
)
{
ConstrainDOMStringParameters
params
;
params
.
mIdeal
.
Construct
(
)
;
params
.
mIdeal
.
Value
(
)
.
SetAsStringSequence
(
)
=
aConstraint
.
GetAsStringSequence
(
)
;
return
FitnessDistance
(
aN
params
)
;
}
else
{
return
FitnessDistance
(
aN
aConstraint
.
GetAsConstrainDOMStringParameters
(
)
)
;
}
}
uint32_t
MediaDevice
:
:
GetBestFitnessDistance
(
const
nsTArray
<
const
NormalizedConstraintSet
*
>
&
aConstraintSets
CallerType
aCallerType
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
bool
isChrome
=
aCallerType
=
=
CallerType
:
:
System
;
const
nsString
&
id
=
isChrome
?
mRawID
:
mID
;
auto
type
=
GetMediaSource
(
)
;
uint64_t
distance
=
0
;
if
(
!
aConstraintSets
.
IsEmpty
(
)
)
{
if
(
isChrome
|
|
type
=
=
MediaSourceEnum
:
:
Camera
|
|
type
=
=
MediaSourceEnum
:
:
Microphone
)
{
distance
+
=
uint64_t
(
MediaConstraintsHelper
:
:
FitnessDistance
(
Some
(
id
)
aConstraintSets
[
0
]
-
>
mDeviceId
)
)
+
uint64_t
(
MediaConstraintsHelper
:
:
FitnessDistance
(
Some
(
mGroupID
)
aConstraintSets
[
0
]
-
>
mGroupId
)
)
;
}
}
if
(
distance
<
UINT32_MAX
)
{
distance
+
=
mSource
-
>
GetBestFitnessDistance
(
aConstraintSets
)
;
}
return
std
:
:
min
<
uint64_t
>
(
distance
UINT32_MAX
)
;
}
NS_IMETHODIMP
MediaDevice
:
:
GetRawName
(
nsAString
&
aName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
aName
.
Assign
(
mRawName
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MediaDevice
:
:
GetType
(
nsAString
&
aType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
aType
.
Assign
(
mType
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MediaDevice
:
:
GetRawId
(
nsAString
&
aID
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
aID
.
Assign
(
mRawID
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MediaDevice
:
:
GetScary
(
bool
*
aScary
)
{
*
aScary
=
mScary
;
return
NS_OK
;
}
void
MediaDevice
:
:
GetSettings
(
MediaTrackSettings
&
aOutSettings
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
mSource
-
>
GetSettings
(
aOutSettings
)
;
}
NS_IMETHODIMP
MediaDevice
:
:
GetMediaSource
(
nsAString
&
aMediaSource
)
{
if
(
mKind
=
=
MediaDeviceKind
:
:
Audiooutput
)
{
aMediaSource
.
Truncate
(
)
;
}
else
{
aMediaSource
.
AssignASCII
(
dom
:
:
MediaSourceEnumValues
:
:
GetString
(
GetMediaSource
(
)
)
)
;
}
return
NS_OK
;
}
nsresult
MediaDevice
:
:
Allocate
(
const
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
if
(
mIsFake
&
&
aConstraints
.
mDeviceId
.
WasPassed
(
)
&
&
aConstraints
.
mDeviceId
.
Value
(
)
.
IsString
(
)
&
&
aConstraints
.
mDeviceId
.
Value
(
)
.
GetAsString
(
)
.
EqualsASCII
(
"
bad
device
"
)
)
{
return
NS_ERROR_FAILURE
;
}
return
mSource
-
>
Allocate
(
aConstraints
aPrefs
aWindowID
aOutBadConstraint
)
;
}
void
MediaDevice
:
:
SetTrack
(
const
RefPtr
<
MediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipalHandle
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
mSource
-
>
SetTrack
(
aTrack
aPrincipalHandle
)
;
}
nsresult
MediaDevice
:
:
Start
(
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
return
mSource
-
>
Start
(
)
;
}
nsresult
MediaDevice
:
:
Reconfigure
(
const
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
auto
type
=
GetMediaSource
(
)
;
if
(
type
=
=
MediaSourceEnum
:
:
Camera
|
|
type
=
=
MediaSourceEnum
:
:
Microphone
)
{
NormalizedConstraints
c
(
aConstraints
)
;
if
(
MediaConstraintsHelper
:
:
FitnessDistance
(
Some
(
mID
)
c
.
mDeviceId
)
=
=
UINT32_MAX
)
{
*
aOutBadConstraint
=
"
deviceId
"
;
return
NS_ERROR_INVALID_ARG
;
}
if
(
MediaConstraintsHelper
:
:
FitnessDistance
(
Some
(
mGroupID
)
c
.
mGroupId
)
=
=
UINT32_MAX
)
{
*
aOutBadConstraint
=
"
groupId
"
;
return
NS_ERROR_INVALID_ARG
;
}
}
return
mSource
-
>
Reconfigure
(
aConstraints
aPrefs
aOutBadConstraint
)
;
}
nsresult
MediaDevice
:
:
FocusOnSelectedSource
(
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
return
mSource
-
>
FocusOnSelectedSource
(
)
;
}
nsresult
MediaDevice
:
:
Stop
(
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
return
mSource
-
>
Stop
(
)
;
}
nsresult
MediaDevice
:
:
Deallocate
(
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MOZ_ASSERT
(
mSource
)
;
return
mSource
-
>
Deallocate
(
)
;
}
MediaSourceEnum
MediaDevice
:
:
GetMediaSource
(
)
const
{
MOZ_ASSERT
(
mSource
)
;
return
mSource
-
>
GetMediaSource
(
)
;
}
static
const
MediaTrackConstraints
&
GetInvariant
(
const
OwningBooleanOrMediaTrackConstraints
&
aUnion
)
{
static
const
MediaTrackConstraints
empty
;
return
aUnion
.
IsMediaTrackConstraints
(
)
?
aUnion
.
GetAsMediaTrackConstraints
(
)
:
empty
;
}
static
void
GetMediaDevices
(
MediaEngine
*
aEngine
MediaSourceEnum
aSrcType
MediaManager
:
:
MediaDeviceSet
&
aResult
const
char
*
aMediaDeviceName
=
nullptr
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
LOG
(
"
%
s
:
aEngine
=
%
p
aSrcType
=
%
"
PRIu8
"
aMediaDeviceName
=
%
s
"
__func__
aEngine
static_cast
<
uint8_t
>
(
aSrcType
)
aMediaDeviceName
?
aMediaDeviceName
:
"
null
"
)
;
nsTArray
<
RefPtr
<
MediaDevice
>
>
devices
;
aEngine
-
>
EnumerateDevices
(
aSrcType
MediaSinkEnum
:
:
Other
&
devices
)
;
if
(
aMediaDeviceName
&
&
*
aMediaDeviceName
)
{
for
(
auto
&
device
:
devices
)
{
if
(
device
-
>
mRawName
.
EqualsASCII
(
aMediaDeviceName
)
)
{
aResult
.
AppendElement
(
device
)
;
LOG
(
"
%
s
:
found
aMediaDeviceName
=
%
s
"
__func__
aMediaDeviceName
)
;
break
;
}
}
}
else
{
aResult
=
std
:
:
move
(
devices
)
;
if
(
MOZ_LOG_TEST
(
gMediaManagerLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
for
(
auto
&
device
:
aResult
)
{
LOG
(
"
%
s
:
appending
device
=
%
s
"
__func__
NS_ConvertUTF16toUTF8
(
device
-
>
mRawName
)
.
get
(
)
)
;
}
}
}
}
RefPtr
<
MediaManager
:
:
DeviceSetPromise
>
MediaManager
:
:
SelectSettings
(
const
MediaStreamConstraints
&
aConstraints
CallerType
aCallerType
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
MediaManager
:
:
Dispatch
<
DeviceSetPromise
>
(
__func__
[
aConstraints
devices
=
std
:
:
move
(
aDevices
)
aCallerType
]
(
MozPromiseHolder
<
DeviceSetPromise
>
&
holder
)
{
auto
&
devicesRef
=
*
devices
;
nsTArray
<
RefPtr
<
MediaDevice
>
>
videos
;
nsTArray
<
RefPtr
<
MediaDevice
>
>
audios
;
for
(
const
auto
&
device
:
devicesRef
)
{
MOZ_ASSERT
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
|
|
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
)
;
if
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
)
{
videos
.
AppendElement
(
device
)
;
}
else
if
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
)
{
audios
.
AppendElement
(
device
)
;
}
}
devicesRef
.
Clear
(
)
;
const
char
*
badConstraint
=
nullptr
;
bool
needVideo
=
IsOn
(
aConstraints
.
mVideo
)
;
bool
needAudio
=
IsOn
(
aConstraints
.
mAudio
)
;
if
(
needVideo
&
&
videos
.
Length
(
)
)
{
badConstraint
=
MediaConstraintsHelper
:
:
SelectSettings
(
NormalizedConstraints
(
GetInvariant
(
aConstraints
.
mVideo
)
)
videos
aCallerType
)
;
}
if
(
!
badConstraint
&
&
needAudio
&
&
audios
.
Length
(
)
)
{
badConstraint
=
MediaConstraintsHelper
:
:
SelectSettings
(
NormalizedConstraints
(
GetInvariant
(
aConstraints
.
mAudio
)
)
audios
aCallerType
)
;
}
if
(
badConstraint
)
{
LOG
(
"
SelectSettings
:
bad
constraint
found
!
Calling
error
handler
!
"
)
;
nsString
constraint
;
constraint
.
AssignASCII
(
badConstraint
)
;
holder
.
Reject
(
new
MediaMgrError
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
"
"
constraint
)
__func__
)
;
return
;
}
if
(
!
needVideo
=
=
!
videos
.
Length
(
)
&
&
!
needAudio
=
=
!
audios
.
Length
(
)
)
{
for
(
auto
&
video
:
videos
)
{
devicesRef
.
AppendElement
(
video
)
;
}
for
(
auto
&
audio
:
audios
)
{
devicesRef
.
AppendElement
(
audio
)
;
}
}
holder
.
Resolve
(
devices
__func__
)
;
}
)
;
}
class
GetUserMediaTask
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GetUserMediaTask
)
GetUserMediaTask
(
uint64_t
aWindowID
const
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
CallerType
aCallerType
)
:
mPrincipalInfo
(
aPrincipalInfo
)
mWindowID
(
aWindowID
)
mCallerType
(
aCallerType
)
{
}
virtual
void
Denied
(
MediaMgrError
:
:
Name
aName
const
nsCString
&
aMessage
=
"
"
_ns
)
=
0
;
virtual
GetUserMediaStreamTask
*
AsGetUserMediaStreamTask
(
)
{
return
nullptr
;
}
virtual
SelectAudioOutputTask
*
AsSelectAudioOutputTask
(
)
{
return
nullptr
;
}
uint64_t
GetWindowID
(
)
const
{
return
mWindowID
;
}
enum
CallerType
CallerType
(
)
const
{
return
mCallerType
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
amount
=
aMallocSizeOf
(
this
)
;
return
amount
;
}
protected
:
virtual
~
GetUserMediaTask
(
)
=
default
;
void
PersistPrincipalKey
(
)
{
if
(
IsPrincipalInfoPrivate
(
mPrincipalInfo
)
)
{
return
;
}
media
:
:
GetPrincipalKey
(
mPrincipalInfo
true
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
]
(
const
media
:
:
PrincipalKeyPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
LOG
(
"
Failed
get
Principal
key
.
Persisting
of
deviceIds
"
"
will
be
broken
"
)
;
}
}
)
;
}
private
:
const
ipc
:
:
PrincipalInfo
mPrincipalInfo
;
protected
:
const
uint64_t
mWindowID
;
const
enum
CallerType
mCallerType
;
}
;
class
GetUserMediaStreamTask
final
:
public
GetUserMediaTask
{
public
:
GetUserMediaStreamTask
(
const
MediaStreamConstraints
&
aConstraints
MozPromiseHolder
<
MediaManager
:
:
StreamPromise
>
&
&
aHolder
uint64_t
aWindowID
RefPtr
<
GetUserMediaWindowListener
>
aWindowListener
RefPtr
<
DeviceListener
>
aAudioDeviceListener
RefPtr
<
DeviceListener
>
aVideoDeviceListener
const
MediaEnginePrefs
&
aPrefs
const
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
enum
CallerType
aCallerType
bool
aShouldFocusSource
)
:
GetUserMediaTask
(
aWindowID
aPrincipalInfo
aCallerType
)
mConstraints
(
aConstraints
)
mHolder
(
std
:
:
move
(
aHolder
)
)
mWindowListener
(
std
:
:
move
(
aWindowListener
)
)
mAudioDeviceListener
(
std
:
:
move
(
aAudioDeviceListener
)
)
mVideoDeviceListener
(
std
:
:
move
(
aVideoDeviceListener
)
)
mPrefs
(
aPrefs
)
mShouldFocusSource
(
aShouldFocusSource
)
mManager
(
MediaManager
:
:
GetInstance
(
)
)
{
}
void
Allowed
(
RefPtr
<
MediaDevice
>
aAudioDevice
RefPtr
<
MediaDevice
>
aVideoDevice
)
{
MOZ_ASSERT
(
aAudioDevice
|
|
aVideoDevice
)
;
mAudioDevice
=
std
:
:
move
(
aAudioDevice
)
;
mVideoDevice
=
std
:
:
move
(
aVideoDevice
)
;
MediaManager
:
:
Dispatch
(
NewRunnableMethod
(
"
GetUserMediaStreamTask
:
:
AllocateDevices
"
this
&
GetUserMediaStreamTask
:
:
AllocateDevices
)
)
;
}
GetUserMediaStreamTask
*
AsGetUserMediaStreamTask
(
)
override
{
return
this
;
}
private
:
~
GetUserMediaStreamTask
(
)
override
{
if
(
!
mHolder
.
IsEmpty
(
)
)
{
Fail
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
;
}
}
void
Fail
(
MediaMgrError
:
:
Name
aName
const
nsCString
&
aMessage
=
"
"
_ns
const
nsString
&
aConstraint
=
u
"
"
_ns
)
{
mHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
aName
aMessage
aConstraint
)
__func__
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
DeviceListener
:
:
Stop
"
[
audio
=
mAudioDeviceListener
video
=
mVideoDeviceListener
]
{
if
(
audio
)
{
audio
-
>
Stop
(
)
;
}
if
(
video
)
{
video
-
>
Stop
(
)
;
}
}
)
)
;
}
void
AllocateDevices
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
LOG
(
"
GetUserMediaStreamTask
:
:
AllocateDevices
(
)
"
)
;
nsresult
rv
;
const
char
*
errorMsg
=
nullptr
;
const
char
*
badConstraint
=
nullptr
;
if
(
mAudioDevice
)
{
auto
&
constraints
=
GetInvariant
(
mConstraints
.
mAudio
)
;
rv
=
mAudioDevice
-
>
Allocate
(
constraints
mPrefs
mWindowID
&
badConstraint
)
;
if
(
NS_FAILED
(
rv
)
)
{
errorMsg
=
"
Failed
to
allocate
audiosource
"
;
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
&
&
!
badConstraint
)
{
nsTArray
<
RefPtr
<
MediaDevice
>
>
devices
;
devices
.
AppendElement
(
mAudioDevice
)
;
badConstraint
=
MediaConstraintsHelper
:
:
SelectSettings
(
NormalizedConstraints
(
constraints
)
devices
mCallerType
)
;
}
}
}
if
(
!
errorMsg
&
&
mVideoDevice
)
{
auto
&
constraints
=
GetInvariant
(
mConstraints
.
mVideo
)
;
rv
=
mVideoDevice
-
>
Allocate
(
constraints
mPrefs
mWindowID
&
badConstraint
)
;
if
(
NS_FAILED
(
rv
)
)
{
errorMsg
=
"
Failed
to
allocate
videosource
"
;
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
&
&
!
badConstraint
)
{
nsTArray
<
RefPtr
<
MediaDevice
>
>
devices
;
devices
.
AppendElement
(
mVideoDevice
)
;
badConstraint
=
MediaConstraintsHelper
:
:
SelectSettings
(
NormalizedConstraints
(
constraints
)
devices
mCallerType
)
;
}
if
(
mAudioDevice
)
{
mAudioDevice
-
>
Deallocate
(
)
;
}
}
else
{
if
(
mCallerType
=
=
CallerType
:
:
NonSystem
)
{
if
(
mShouldFocusSource
)
{
rv
=
mVideoDevice
-
>
FocusOnSelectedSource
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
"
FocusOnSelectedSource
failed
"
)
;
}
}
}
}
}
if
(
errorMsg
)
{
LOG
(
"
%
s
%
"
PRIu32
errorMsg
static_cast
<
uint32_t
>
(
rv
)
)
;
if
(
badConstraint
)
{
Fail
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
"
"
_ns
NS_ConvertUTF8toUTF16
(
badConstraint
)
)
;
}
else
{
Fail
(
MediaMgrError
:
:
Name
:
:
NotReadableError
nsCString
(
errorMsg
)
)
;
}
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
MediaManager
:
:
SendPendingGUMRequest
"
[
]
(
)
{
if
(
MediaManager
*
manager
=
MediaManager
:
:
GetIfExists
(
)
)
{
manager
-
>
SendPendingGUMRequest
(
)
;
}
}
)
)
;
return
;
}
NS_DispatchToMainThread
(
NewRunnableMethod
(
"
GetUserMediaStreamTask
:
:
PrepareDOMStream
"
this
&
GetUserMediaStreamTask
:
:
PrepareDOMStream
)
)
;
}
public
:
void
Denied
(
MediaMgrError
:
:
Name
aName
const
nsCString
&
aMessage
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Fail
(
aName
aMessage
)
;
}
const
MediaStreamConstraints
&
GetConstraints
(
)
{
return
mConstraints
;
}
private
:
void
PrepareDOMStream
(
)
;
const
MediaStreamConstraints
mConstraints
;
MozPromiseHolder
<
MediaManager
:
:
StreamPromise
>
mHolder
;
const
RefPtr
<
GetUserMediaWindowListener
>
mWindowListener
;
const
RefPtr
<
DeviceListener
>
mAudioDeviceListener
;
const
RefPtr
<
DeviceListener
>
mVideoDeviceListener
;
RefPtr
<
MediaDevice
>
mAudioDevice
;
RefPtr
<
MediaDevice
>
mVideoDevice
;
const
MediaEnginePrefs
mPrefs
;
const
bool
mShouldFocusSource
;
const
RefPtr
<
MediaManager
>
mManager
;
}
;
void
GetUserMediaStreamTask
:
:
PrepareDOMStream
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
GetUserMediaStreamTask
:
:
PrepareDOMStream
(
)
"
)
;
nsGlobalWindowInner
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mWindowID
)
;
if
(
!
mManager
-
>
IsWindowListenerStillActive
(
mWindowListener
)
)
{
return
;
}
MediaTrackGraph
:
:
GraphDriverType
graphDriverType
=
mAudioDevice
?
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
:
MediaTrackGraph
:
:
SYSTEM_THREAD_DRIVER
;
MediaTrackGraph
*
mtg
=
MediaTrackGraph
:
:
GetInstance
(
graphDriverType
window
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
MediaTrackGraph
:
:
DEFAULT_OUTPUT_DEVICE
)
;
auto
domStream
=
MakeRefPtr
<
DOMMediaStream
>
(
window
)
;
RefPtr
<
LocalTrackSource
>
audioTrackSource
;
RefPtr
<
LocalTrackSource
>
videoTrackSource
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
RefPtr
<
PeerIdentity
>
peerIdentity
=
nullptr
;
if
(
!
mConstraints
.
mPeerIdentity
.
IsEmpty
(
)
)
{
peerIdentity
=
new
PeerIdentity
(
mConstraints
.
mPeerIdentity
)
;
principal
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
window
-
>
GetExtantDoc
(
)
-
>
NodePrincipal
(
)
)
;
}
else
{
principal
=
window
-
>
GetExtantDoc
(
)
-
>
NodePrincipal
(
)
;
}
RefPtr
<
GenericNonExclusivePromise
>
firstFramePromise
;
if
(
mAudioDevice
)
{
if
(
mAudioDevice
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
AudioCapture
)
{
NS_WARNING
(
"
MediaCaptureWindowState
doesn
'
t
handle
"
"
MediaSourceEnum
:
:
AudioCapture
.
This
must
be
fixed
with
UX
"
"
before
shipping
.
"
)
;
auto
audioCaptureSource
=
MakeRefPtr
<
AudioCaptureTrackSource
>
(
principal
window
u
"
Window
audio
capture
"
_ns
mtg
-
>
CreateAudioCaptureTrack
(
)
peerIdentity
)
;
audioTrackSource
=
audioCaptureSource
;
RefPtr
<
MediaStreamTrack
>
track
=
new
dom
:
:
AudioStreamTrack
(
window
audioCaptureSource
-
>
InputTrack
(
)
audioCaptureSource
)
;
domStream
-
>
AddTrackInternal
(
track
)
;
}
else
{
const
nsString
&
audioDeviceName
=
mAudioDevice
-
>
mName
;
RefPtr
<
MediaTrack
>
track
;
#
ifdef
MOZ_WEBRTC
if
(
mAudioDevice
-
>
mIsFake
)
{
track
=
mtg
-
>
CreateSourceTrack
(
MediaSegment
:
:
AUDIO
)
;
}
else
{
track
=
AudioInputTrack
:
:
Create
(
mtg
)
;
track
-
>
Suspend
(
)
;
}
#
else
track
=
mtg
-
>
CreateSourceTrack
(
MediaSegment
:
:
AUDIO
)
;
#
endif
audioTrackSource
=
new
LocalTrackSource
(
principal
audioDeviceName
mAudioDeviceListener
mAudioDevice
-
>
GetMediaSource
(
)
track
peerIdentity
)
;
MOZ_ASSERT
(
MediaManager
:
:
IsOn
(
mConstraints
.
mAudio
)
)
;
RefPtr
<
MediaStreamTrack
>
domTrack
=
new
dom
:
:
AudioStreamTrack
(
window
track
audioTrackSource
dom
:
:
MediaStreamTrackState
:
:
Live
false
GetInvariant
(
mConstraints
.
mAudio
)
)
;
domStream
-
>
AddTrackInternal
(
domTrack
)
;
}
}
if
(
mVideoDevice
)
{
const
nsString
&
videoDeviceName
=
mVideoDevice
-
>
mName
;
RefPtr
<
MediaTrack
>
track
=
mtg
-
>
CreateSourceTrack
(
MediaSegment
:
:
VIDEO
)
;
videoTrackSource
=
new
LocalTrackSource
(
principal
videoDeviceName
mVideoDeviceListener
mVideoDevice
-
>
GetMediaSource
(
)
track
peerIdentity
)
;
MOZ_ASSERT
(
MediaManager
:
:
IsOn
(
mConstraints
.
mVideo
)
)
;
RefPtr
<
MediaStreamTrack
>
domTrack
=
new
dom
:
:
VideoStreamTrack
(
window
track
videoTrackSource
dom
:
:
MediaStreamTrackState
:
:
Live
false
GetInvariant
(
mConstraints
.
mVideo
)
)
;
domStream
-
>
AddTrackInternal
(
domTrack
)
;
switch
(
mVideoDevice
-
>
GetMediaSource
(
)
)
{
case
MediaSourceEnum
:
:
Browser
:
case
MediaSourceEnum
:
:
Screen
:
case
MediaSourceEnum
:
:
Window
:
firstFramePromise
=
mVideoDevice
-
>
mSource
-
>
GetFirstFramePromise
(
)
;
break
;
default
:
break
;
}
}
if
(
!
domStream
|
|
(
!
audioTrackSource
&
&
!
videoTrackSource
)
|
|
sHasShutdown
)
{
LOG
(
"
Returning
error
for
getUserMedia
(
)
-
no
stream
"
)
;
mHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
sHasShutdown
?
"
In
shutdown
"
_ns
:
"
No
stream
.
"
_ns
)
__func__
)
;
return
;
}
if
(
mAudioDeviceListener
)
{
mWindowListener
-
>
Activate
(
mAudioDeviceListener
mAudioDevice
std
:
:
move
(
audioTrackSource
)
)
;
}
if
(
mVideoDeviceListener
)
{
mWindowListener
-
>
Activate
(
mVideoDeviceListener
mVideoDevice
std
:
:
move
(
videoTrackSource
)
)
;
}
typedef
DeviceListener
:
:
DeviceListenerPromise
PromiseType
;
AutoTArray
<
RefPtr
<
PromiseType
>
2
>
promises
;
if
(
mAudioDeviceListener
)
{
promises
.
AppendElement
(
mAudioDeviceListener
-
>
InitializeAsync
(
)
)
;
}
if
(
mVideoDeviceListener
)
{
promises
.
AppendElement
(
mVideoDeviceListener
-
>
InitializeAsync
(
)
)
;
}
PromiseType
:
:
All
(
GetMainThreadSerialEventTarget
(
)
promises
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
manager
=
mManager
windowListener
=
mWindowListener
firstFramePromise
]
{
LOG
(
"
GetUserMediaStreamTask
:
:
PrepareDOMStream
:
starting
success
"
"
callback
following
InitializeAsync
(
)
"
)
;
windowListener
-
>
ChromeAffectingStateChanged
(
)
;
manager
-
>
SendPendingGUMRequest
(
)
;
if
(
!
firstFramePromise
)
{
return
DeviceListener
:
:
DeviceListenerPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
RefPtr
<
DeviceListener
:
:
DeviceListenerPromise
>
resolvePromise
=
firstFramePromise
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
]
{
return
DeviceListener
:
:
DeviceListenerPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
[
]
{
return
DeviceListener
:
:
DeviceListenerPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
"
In
shutdown
"
)
__func__
)
;
}
)
;
return
resolvePromise
;
}
[
audio
=
mAudioDeviceListener
video
=
mVideoDeviceListener
]
(
RefPtr
<
MediaMgrError
>
&
&
aError
)
{
LOG
(
"
GetUserMediaStreamTask
:
:
PrepareDOMStream
:
starting
failure
"
"
callback
following
InitializeAsync
(
)
"
)
;
if
(
audio
)
{
audio
-
>
Stop
(
)
;
}
if
(
video
)
{
video
-
>
Stop
(
)
;
}
return
DeviceListener
:
:
DeviceListenerPromise
:
:
CreateAndReject
(
aError
__func__
)
;
}
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
holder
=
std
:
:
move
(
mHolder
)
domStream
]
(
const
DeviceListener
:
:
DeviceListenerPromise
:
:
ResolveOrRejectValue
&
aValue
)
mutable
{
if
(
aValue
.
IsResolve
(
)
)
{
holder
.
Resolve
(
domStream
__func__
)
;
}
else
{
holder
.
Reject
(
aValue
.
RejectValue
(
)
__func__
)
;
}
}
)
;
PersistPrincipalKey
(
)
;
}
class
SelectAudioOutputTask
final
:
public
GetUserMediaTask
{
public
:
SelectAudioOutputTask
(
MozPromiseHolder
<
MediaManager
:
:
DevicePromise
>
&
&
aHolder
uint64_t
aWindowID
enum
CallerType
aCallerType
const
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
:
GetUserMediaTask
(
aWindowID
aPrincipalInfo
aCallerType
)
mHolder
(
std
:
:
move
(
aHolder
)
)
{
}
void
Allowed
(
RefPtr
<
MediaDevice
>
aAudioOutput
)
{
MOZ_ASSERT
(
aAudioOutput
)
;
mHolder
.
Resolve
(
std
:
:
move
(
aAudioOutput
)
__func__
)
;
PersistPrincipalKey
(
)
;
}
void
Denied
(
MediaMgrError
:
:
Name
aName
const
nsCString
&
aMessage
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Fail
(
aName
aMessage
)
;
}
SelectAudioOutputTask
*
AsSelectAudioOutputTask
(
)
override
{
return
this
;
}
private
:
~
SelectAudioOutputTask
(
)
override
{
if
(
!
mHolder
.
IsEmpty
(
)
)
{
Fail
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
;
}
}
void
Fail
(
MediaMgrError
:
:
Name
aName
const
nsCString
&
aMessage
=
"
"
_ns
)
{
mHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
aName
aMessage
)
__func__
)
;
}
private
:
MozPromiseHolder
<
MediaManager
:
:
DevicePromise
>
mHolder
;
}
;
void
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
MediaDeviceSet
&
aDevices
const
MediaDeviceSet
&
aAudios
)
{
auto
updateGroupIdIfNeeded
=
[
&
]
(
RefPtr
<
MediaDevice
>
&
aVideo
const
MediaDeviceKind
aKind
)
-
>
bool
{
MOZ_ASSERT
(
aVideo
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
)
;
MOZ_ASSERT
(
aKind
=
=
MediaDeviceKind
:
:
Audioinput
|
|
aKind
=
=
MediaDeviceKind
:
:
Audiooutput
)
;
nsString
newVideoGroupID
;
bool
updateGroupId
=
false
;
for
(
const
RefPtr
<
MediaDevice
>
&
dev
:
aAudios
)
{
if
(
dev
-
>
mKind
!
=
aKind
)
{
continue
;
}
if
(
!
FindInReadable
(
aVideo
-
>
mRawName
dev
-
>
mRawName
)
)
{
continue
;
}
if
(
newVideoGroupID
.
IsEmpty
(
)
)
{
updateGroupId
=
true
;
newVideoGroupID
=
dev
-
>
mRawGroupID
;
}
else
{
updateGroupId
=
false
;
newVideoGroupID
=
u
"
"
_ns
;
break
;
}
}
if
(
updateGroupId
)
{
aVideo
=
MediaDevice
:
:
CopyWithNewRawGroupId
(
aVideo
newVideoGroupID
)
;
return
true
;
}
return
false
;
}
;
for
(
RefPtr
<
MediaDevice
>
&
video
:
aDevices
)
{
if
(
video
-
>
mKind
!
=
MediaDeviceKind
:
:
Videoinput
)
{
continue
;
}
if
(
updateGroupIdIfNeeded
(
video
MediaDeviceKind
:
:
Audioinput
)
)
{
continue
;
}
updateGroupIdIfNeeded
(
video
MediaDeviceKind
:
:
Audiooutput
)
;
}
}
RefPtr
<
MediaManager
:
:
DeviceSetPromise
>
MediaManager
:
:
EnumerateRawDevices
(
MediaSourceEnum
aVideoInputType
MediaSourceEnum
aAudioInputType
DeviceEnumerationType
aVideoInputEnumType
DeviceEnumerationType
aAudioInputEnumType
EnumerationFlags
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aVideoInputType
!
=
MediaSourceEnum
:
:
Other
|
|
aAudioInputType
!
=
MediaSourceEnum
:
:
Other
|
|
aFlags
.
contains
(
EnumerationFlag
:
:
EnumerateAudioOutputs
)
)
;
MOZ_ASSERT
(
aVideoInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
|
|
aVideoInputType
=
=
MediaSourceEnum
:
:
Camera
"
If
fake
cams
are
requested
video
type
should
be
camera
!
"
)
;
MOZ_ASSERT
(
aVideoInputEnumType
!
=
DeviceEnumerationType
:
:
Loopback
|
|
aVideoInputType
=
=
MediaSourceEnum
:
:
Camera
"
If
loopback
video
is
requested
video
type
should
be
camera
!
"
)
;
MOZ_ASSERT
(
aAudioInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
|
|
aAudioInputType
=
=
MediaSourceEnum
:
:
Microphone
"
If
fake
mics
are
requested
audio
type
should
be
microphone
!
"
)
;
MOZ_ASSERT
(
aAudioInputEnumType
!
=
DeviceEnumerationType
:
:
Loopback
|
|
aAudioInputType
=
=
MediaSourceEnum
:
:
Microphone
"
If
loopback
audio
is
requested
audio
type
should
be
microphone
!
"
)
;
LOG
(
"
%
s
:
aVideoInputType
=
%
"
PRIu8
"
aAudioInputType
=
%
"
PRIu8
"
aVideoInputEnumType
=
%
"
PRIu8
"
aAudioInputEnumType
=
%
"
PRIu8
__func__
static_cast
<
uint8_t
>
(
aVideoInputType
)
static_cast
<
uint8_t
>
(
aAudioInputType
)
static_cast
<
uint8_t
>
(
aVideoInputEnumType
)
static_cast
<
uint8_t
>
(
aAudioInputEnumType
)
)
;
MozPromiseHolder
<
DeviceSetPromise
>
holder
;
RefPtr
<
DeviceSetPromise
>
promise
=
holder
.
Ensure
(
__func__
)
;
const
bool
hasVideo
=
aVideoInputType
!
=
MediaSourceEnum
:
:
Other
;
const
bool
hasAudio
=
aAudioInputType
!
=
MediaSourceEnum
:
:
Other
;
const
bool
hasAudioOutput
=
aFlags
.
contains
(
EnumerationFlag
:
:
EnumerateAudioOutputs
)
;
const
bool
fakeDeviceRequested
=
(
aVideoInputEnumType
=
=
DeviceEnumerationType
:
:
Fake
&
&
hasVideo
)
|
|
(
aAudioInputEnumType
=
=
DeviceEnumerationType
:
:
Fake
&
&
hasAudio
)
;
const
bool
realDeviceRequested
=
(
aVideoInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
&
&
hasVideo
)
|
|
(
aAudioInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
&
&
hasAudio
)
|
|
hasAudioOutput
;
nsAutoCString
videoLoopDev
audioLoopDev
;
if
(
hasVideo
&
&
aVideoInputEnumType
=
=
DeviceEnumerationType
:
:
Loopback
)
{
Preferences
:
:
GetCString
(
"
media
.
video_loopback_dev
"
videoLoopDev
)
;
}
if
(
hasAudio
&
&
aAudioInputEnumType
=
=
DeviceEnumerationType
:
:
Loopback
)
{
Preferences
:
:
GetCString
(
"
media
.
audio_loopback_dev
"
audioLoopDev
)
;
}
RefPtr
<
Runnable
>
task
=
NewTaskFrom
(
[
holder
=
std
:
:
move
(
holder
)
aVideoInputType
aAudioInputType
aVideoInputEnumType
aAudioInputEnumType
videoLoopDev
audioLoopDev
hasVideo
hasAudio
hasAudioOutput
fakeDeviceRequested
realDeviceRequested
]
(
)
mutable
{
RefPtr
<
MediaEngine
>
fakeBackend
realBackend
;
if
(
fakeDeviceRequested
)
{
fakeBackend
=
new
MediaEngineDefault
(
)
;
}
if
(
realDeviceRequested
)
{
MediaManager
*
manager
=
MediaManager
:
:
GetIfExists
(
)
;
MOZ_RELEASE_ASSERT
(
manager
"
Must
exist
while
media
thread
is
alive
"
)
;
realBackend
=
manager
-
>
GetBackend
(
)
;
}
RefPtr
<
MediaEngine
>
videoBackend
;
RefPtr
<
MediaEngine
>
audioBackend
;
Maybe
<
MediaDeviceSet
>
micsOfVideoBackend
;
Maybe
<
MediaDeviceSet
>
speakers
;
RefPtr
devices
=
new
MediaDeviceSetRefCnt
(
)
;
if
(
hasVideo
)
{
videoBackend
=
aVideoInputEnumType
=
=
DeviceEnumerationType
:
:
Fake
?
fakeBackend
:
realBackend
;
MediaDeviceSet
videos
;
LOG
(
"
EnumerateRawDevices
Task
:
Getting
video
sources
with
%
s
backend
"
videoBackend
=
=
fakeBackend
?
"
fake
"
:
"
real
"
)
;
GetMediaDevices
(
videoBackend
aVideoInputType
videos
videoLoopDev
.
get
(
)
)
;
devices
-
>
AppendElements
(
videos
)
;
}
if
(
hasAudio
)
{
audioBackend
=
aAudioInputEnumType
=
=
DeviceEnumerationType
:
:
Fake
?
fakeBackend
:
realBackend
;
MediaDeviceSet
audios
;
LOG
(
"
EnumerateRawDevices
Task
:
Getting
audio
sources
with
%
s
backend
"
audioBackend
=
=
fakeBackend
?
"
fake
"
:
"
real
"
)
;
GetMediaDevices
(
audioBackend
aAudioInputType
audios
audioLoopDev
.
get
(
)
)
;
if
(
aAudioInputType
=
=
MediaSourceEnum
:
:
Microphone
&
&
audioBackend
=
=
videoBackend
)
{
micsOfVideoBackend
=
Some
(
MediaDeviceSet
(
)
)
;
micsOfVideoBackend
-
>
AppendElements
(
audios
)
;
}
devices
-
>
AppendElements
(
audios
)
;
}
if
(
hasAudioOutput
)
{
MediaDeviceSet
outputs
;
MOZ_ASSERT
(
realBackend
)
;
realBackend
-
>
EnumerateDevices
(
MediaSourceEnum
:
:
Other
MediaSinkEnum
:
:
Speaker
&
outputs
)
;
speakers
=
Some
(
MediaDeviceSet
(
)
)
;
speakers
-
>
AppendElements
(
outputs
)
;
devices
-
>
AppendElements
(
outputs
)
;
}
if
(
hasVideo
&
&
aVideoInputType
=
=
MediaSourceEnum
:
:
Camera
)
{
MediaDeviceSet
audios
;
LOG
(
"
EnumerateRawDevices
Task
:
Getting
audio
sources
with
%
s
backend
"
"
for
"
"
groupId
correlation
"
videoBackend
=
=
fakeBackend
?
"
fake
"
:
"
real
"
)
;
if
(
micsOfVideoBackend
.
isSome
(
)
)
{
audios
.
AppendElements
(
*
micsOfVideoBackend
)
;
}
else
{
GetMediaDevices
(
videoBackend
MediaSourceEnum
:
:
Microphone
audios
audioLoopDev
.
get
(
)
)
;
}
if
(
videoBackend
=
=
realBackend
)
{
if
(
speakers
.
isSome
(
)
)
{
audios
.
AppendElements
(
*
speakers
)
;
}
else
{
realBackend
-
>
EnumerateDevices
(
MediaSourceEnum
:
:
Other
MediaSinkEnum
:
:
Speaker
&
audios
)
;
}
}
GuessVideoDeviceGroupIDs
(
*
devices
audios
)
;
}
holder
.
Resolve
(
std
:
:
move
(
devices
)
__func__
)
;
}
)
;
if
(
realDeviceRequested
&
&
aFlags
.
contains
(
EnumerationFlag
:
:
AllowPermissionRequest
)
&
&
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
device
"
false
)
)
{
const
char16_t
*
const
type
=
(
aVideoInputType
!
=
MediaSourceEnum
:
:
Camera
)
?
u
"
audio
"
:
(
aAudioInputType
!
=
MediaSourceEnum
:
:
Microphone
)
?
u
"
video
"
:
u
"
all
"
;
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
static_cast
<
nsIRunnable
*
>
(
task
)
"
getUserMedia
:
ask
-
device
-
permission
"
type
)
;
}
else
{
MediaManager
:
:
Dispatch
(
task
.
forget
(
)
)
;
}
return
promise
;
}
MediaManager
:
:
MediaManager
(
already_AddRefed
<
TaskQueue
>
aMediaThread
)
:
mMediaThread
(
aMediaThread
)
mBackend
(
nullptr
)
{
mPrefs
.
mFreq
=
1000
;
mPrefs
.
mWidth
=
0
;
mPrefs
.
mHeight
=
0
;
mPrefs
.
mFPS
=
MediaEnginePrefs
:
:
DEFAULT_VIDEO_FPS
;
mPrefs
.
mAecOn
=
false
;
mPrefs
.
mUseAecMobile
=
false
;
mPrefs
.
mAgcOn
=
false
;
mPrefs
.
mHPFOn
=
false
;
mPrefs
.
mNoiseOn
=
false
;
mPrefs
.
mTransientOn
=
false
;
mPrefs
.
mResidualEchoOn
=
false
;
mPrefs
.
mFakeDeviceChangeEventOn
=
false
;
mPrefs
.
mAgc2Forced
=
false
;
#
ifdef
MOZ_WEBRTC
mPrefs
.
mAgc
=
webrtc
:
:
AudioProcessing
:
:
Config
:
:
GainController1
:
:
Mode
:
:
kAdaptiveDigital
;
mPrefs
.
mNoise
=
webrtc
:
:
AudioProcessing
:
:
Config
:
:
NoiseSuppression
:
:
Level
:
:
kModerate
;
#
else
mPrefs
.
mAgc
=
0
;
mPrefs
.
mNoise
=
0
;
#
endif
mPrefs
.
mChannels
=
0
;
nsresult
rv
;
nsCOMPtr
<
nsIPrefService
>
prefs
=
do_GetService
(
"
mozilla
.
org
/
preferences
-
service
;
1
"
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsIPrefBranch
>
branch
=
do_QueryInterface
(
prefs
)
;
if
(
branch
)
{
GetPrefs
(
branch
nullptr
)
;
}
}
LOG
(
"
%
s
:
default
prefs
:
%
dx
%
d
%
dfps
%
dHz
test
tones
aec
:
%
s
"
"
agc
:
%
s
hpf
:
%
s
noise
:
%
s
agc
level
:
%
d
agc
version
:
%
s
noise
"
"
level
:
%
d
transient
:
%
s
residual
echo
:
%
s
channels
%
d
"
__FUNCTION__
mPrefs
.
mWidth
mPrefs
.
mHeight
mPrefs
.
mFPS
mPrefs
.
mFreq
mPrefs
.
mAecOn
?
"
on
"
:
"
off
"
mPrefs
.
mAgcOn
?
"
on
"
:
"
off
"
mPrefs
.
mHPFOn
?
"
on
"
:
"
off
"
mPrefs
.
mNoiseOn
?
"
on
"
:
"
off
"
mPrefs
.
mAgc
mPrefs
.
mAgc2Forced
?
"
2
"
:
"
1
"
mPrefs
.
mNoise
mPrefs
.
mTransientOn
?
"
on
"
:
"
off
"
mPrefs
.
mResidualEchoOn
?
"
on
"
:
"
off
"
mPrefs
.
mChannels
)
;
}
NS_IMPL_ISUPPORTS
(
MediaManager
nsIMediaManagerService
nsIMemoryReporter
nsIObserver
)
StaticRefPtr
<
MediaManager
>
MediaManager
:
:
sSingleton
;
StaticMutex
MediaManager
:
:
sSingletonMutex
;
#
ifdef
DEBUG
bool
MediaManager
:
:
IsInMediaThread
(
)
{
StaticMutexAutoLock
lock
(
sSingletonMutex
)
;
return
sSingleton
&
&
sSingleton
-
>
mMediaThread
-
>
IsOnCurrentThread
(
)
;
}
#
endif
MediaManager
*
MediaManager
:
:
Get
(
)
{
StaticMutexAutoLock
lock
(
sSingletonMutex
)
;
if
(
!
sSingleton
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
static
int
timesCreated
=
0
;
timesCreated
+
+
;
MOZ_RELEASE_ASSERT
(
timesCreated
=
=
1
)
;
RefPtr
<
TaskQueue
>
mediaThread
=
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
MediaManager
"
)
;
LOG
(
"
New
Media
thread
for
gum
"
)
;
sSingleton
=
new
MediaManager
(
mediaThread
.
forget
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
AddObserver
(
sSingleton
"
last
-
pb
-
context
-
exited
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
got
-
device
-
permission
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
privileged
:
allow
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
response
:
allow
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
response
:
deny
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
response
:
noOSPermission
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
revoke
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
muteVideo
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
unmuteVideo
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
muteAudio
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
getUserMedia
:
unmuteAudio
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
application
-
background
"
false
)
;
obs
-
>
AddObserver
(
sSingleton
"
application
-
foreground
"
false
)
;
}
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
if
(
prefs
)
{
prefs
-
>
AddObserver
(
"
media
.
navigator
.
video
.
default_width
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
navigator
.
video
.
default_height
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
navigator
.
video
.
default_fps
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
navigator
.
audio
.
fake_frequency
"
sSingleton
false
)
;
#
ifdef
MOZ_WEBRTC
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
aec_enabled
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
aec
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
agc_enabled
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
agc
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
hpf_enabled
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
noise_enabled
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
noise
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
ondevicechange
.
fakeDeviceChangeEvent
.
enabled
"
sSingleton
false
)
;
prefs
-
>
AddObserver
(
"
media
.
getusermedia
.
channels
"
sSingleton
false
)
;
#
endif
}
RegisterStrongMemoryReporter
(
sSingleton
)
;
class
Blocker
:
public
media
:
:
ShutdownBlocker
{
public
:
Blocker
(
)
:
media
:
:
ShutdownBlocker
(
u
"
Media
shutdown
:
blocking
on
media
thread
"
_ns
)
{
}
NS_IMETHOD
BlockShutdown
(
nsIAsyncShutdownClient
*
)
override
{
MOZ_RELEASE_ASSERT
(
MediaManager
:
:
GetIfExists
(
)
)
;
MediaManager
:
:
GetIfExists
(
)
-
>
Shutdown
(
)
;
return
NS_OK
;
}
}
;
sSingleton
-
>
mShutdownBlocker
=
new
Blocker
(
)
;
nsresult
rv
=
media
:
:
MustGetShutdownBarrier
(
)
-
>
AddBlocker
(
sSingleton
-
>
mShutdownBlocker
NS_LITERAL_STRING_FROM_CSTRING
(
__FILE__
)
__LINE__
u
"
"
_ns
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
return
sSingleton
;
}
MediaManager
*
MediaManager
:
:
GetIfExists
(
)
{
StaticMutexAutoLock
lock
(
sSingletonMutex
)
;
return
sSingleton
;
}
already_AddRefed
<
MediaManager
>
MediaManager
:
:
GetInstance
(
)
{
RefPtr
<
MediaManager
>
service
=
MediaManager
:
:
Get
(
)
;
return
service
.
forget
(
)
;
}
media
:
:
Parent
<
media
:
:
NonE10s
>
*
MediaManager
:
:
GetNonE10sParent
(
)
{
if
(
!
mNonE10sParent
)
{
mNonE10sParent
=
new
media
:
:
Parent
<
media
:
:
NonE10s
>
(
)
;
}
return
mNonE10sParent
;
}
void
MediaManager
:
:
StartupInit
(
)
{
#
ifdef
WIN32
if
(
!
IsWin8OrLater
(
)
)
{
unsigned
long
out_buf_len
=
sizeof
(
IP_ADAPTER_INFO
)
;
PIP_ADAPTER_INFO
pAdapterInfo
=
(
IP_ADAPTER_INFO
*
)
moz_xmalloc
(
out_buf_len
)
;
if
(
GetAdaptersInfo
(
pAdapterInfo
&
out_buf_len
)
=
=
ERROR_BUFFER_OVERFLOW
)
{
free
(
pAdapterInfo
)
;
pAdapterInfo
=
(
IP_ADAPTER_INFO
*
)
moz_xmalloc
(
out_buf_len
)
;
GetAdaptersInfo
(
pAdapterInfo
&
out_buf_len
)
;
}
if
(
pAdapterInfo
)
{
free
(
pAdapterInfo
)
;
}
}
#
endif
}
void
MediaManager
:
:
Dispatch
(
already_AddRefed
<
Runnable
>
task
)
{
if
(
sHasShutdown
)
{
MOZ_CRASH
(
)
;
return
;
}
NS_ASSERTION
(
Get
(
)
"
MediaManager
singleton
?
"
)
;
NS_ASSERTION
(
Get
(
)
-
>
mMediaThread
"
No
thread
yet
"
)
;
MOZ_ALWAYS_SUCCEEDS
(
Get
(
)
-
>
mMediaThread
-
>
Dispatch
(
std
:
:
move
(
task
)
)
)
;
}
template
<
typename
MozPromiseType
typename
FunctionType
>
RefPtr
<
MozPromiseType
>
MediaManager
:
:
Dispatch
(
const
char
*
aName
FunctionType
&
&
aFunction
)
{
MozPromiseHolder
<
MozPromiseType
>
holder
;
RefPtr
<
MozPromiseType
>
promise
=
holder
.
Ensure
(
aName
)
;
MediaManager
:
:
Dispatch
(
NS_NewRunnableFunction
(
aName
[
h
=
std
:
:
move
(
holder
)
func
=
std
:
:
forward
<
FunctionType
>
(
aFunction
)
]
(
)
mutable
{
func
(
h
)
;
}
)
)
;
return
promise
;
}
nsresult
MediaManager
:
:
NotifyRecordingStatusChange
(
nsPIDOMWindowInner
*
aWindow
)
{
NS_ENSURE_ARG
(
aWindow
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
!
obs
)
{
NS_WARNING
(
"
Could
not
get
the
Observer
service
for
GetUserMedia
recording
"
"
notification
.
"
)
;
return
NS_ERROR_FAILURE
;
}
auto
props
=
MakeRefPtr
<
nsHashPropertyBag
>
(
)
;
nsCString
pageURL
;
nsCOMPtr
<
nsIURI
>
docURI
=
aWindow
-
>
GetDocumentURI
(
)
;
NS_ENSURE_TRUE
(
docURI
NS_ERROR_FAILURE
)
;
nsresult
rv
=
docURI
-
>
GetSpec
(
pageURL
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ConvertUTF8toUTF16
requestURL
(
pageURL
)
;
props
-
>
SetPropertyAsAString
(
u
"
requestURL
"
_ns
requestURL
)
;
props
-
>
SetPropertyAsInterface
(
u
"
window
"
_ns
aWindow
)
;
obs
-
>
NotifyObservers
(
static_cast
<
nsIPropertyBag2
*
>
(
props
)
"
recording
-
device
-
events
"
nullptr
)
;
LOG
(
"
Sent
recording
-
device
-
events
for
url
'
%
s
'
"
pageURL
.
get
(
)
)
;
return
NS_OK
;
}
void
MediaManager
:
:
DeviceListChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sHasShutdown
)
{
return
;
}
mDeviceListChangeEvent
.
Notify
(
)
;
if
(
mDeviceChangeTimer
)
{
mDeviceChangeTimer
-
>
Cancel
(
)
;
}
else
{
mDeviceChangeTimer
=
MakeRefPtr
<
MediaTimer
>
(
)
;
}
RefPtr
<
MediaManager
>
self
=
this
;
mDeviceChangeTimer
-
>
WaitFor
(
TimeDuration
:
:
FromMilliseconds
(
200
)
__func__
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
this
]
{
if
(
!
MediaManager
:
:
GetIfExists
(
)
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
"
In
shutdown
"
)
__func__
)
;
}
return
EnumerateRawDevices
(
MediaSourceEnum
:
:
Camera
MediaSourceEnum
:
:
Microphone
DeviceEnumerationType
:
:
Normal
DeviceEnumerationType
:
:
Normal
EnumerationFlag
:
:
EnumerateAudioOutputs
)
;
}
[
]
(
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
this
]
(
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
{
if
(
!
MediaManager
:
:
GetIfExists
(
)
)
{
return
;
}
MediaManager
:
:
DeviceIdSet
deviceIDs
;
for
(
auto
&
device
:
*
aDevices
)
{
MOZ_ALWAYS_TRUE
(
deviceIDs
.
put
(
device
-
>
mRawID
)
)
;
}
for
(
auto
iter
=
mDeviceIDs
.
iter
(
)
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
const
auto
&
id
=
iter
.
get
(
)
;
if
(
deviceIDs
.
has
(
id
)
)
{
continue
;
}
const
auto
listeners
=
ToArray
(
mActiveWindows
.
Values
(
)
)
;
for
(
const
auto
&
l
:
listeners
)
{
l
-
>
StopRawID
(
id
)
;
}
}
mDeviceIDs
=
std
:
:
move
(
deviceIDs
)
;
}
[
]
(
RefPtr
<
MediaMgrError
>
&
&
reason
)
{
}
)
;
}
size_t
MediaManager
:
:
AddTaskAndGetCount
(
uint64_t
aWindowID
const
nsAString
&
aCallID
RefPtr
<
GetUserMediaTask
>
aTask
)
{
mActiveCallbacks
.
InsertOrUpdate
(
aCallID
std
:
:
move
(
aTask
)
)
;
nsTArray
<
nsString
>
*
const
array
=
mCallIds
.
GetOrInsertNew
(
aWindowID
)
;
array
-
>
AppendElement
(
aCallID
)
;
return
array
-
>
Length
(
)
;
}
RefPtr
<
GetUserMediaTask
>
MediaManager
:
:
TakeGetUserMediaTask
(
const
nsAString
&
aCallID
)
{
RefPtr
<
GetUserMediaTask
>
task
;
mActiveCallbacks
.
Remove
(
aCallID
getter_AddRefs
(
task
)
)
;
if
(
!
task
)
{
return
nullptr
;
}
nsTArray
<
nsString
>
*
array
;
mCallIds
.
Get
(
task
-
>
GetWindowID
(
)
&
array
)
;
MOZ_ASSERT
(
array
)
;
array
-
>
RemoveElement
(
aCallID
)
;
return
task
;
}
void
MediaManager
:
:
NotifyAllowed
(
const
nsString
&
aCallID
const
MediaDeviceSet
&
aDevices
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
nsCOMPtr
<
nsIMutableArray
>
devicesCopy
=
nsArray
:
:
Create
(
)
;
for
(
const
auto
&
device
:
aDevices
)
{
nsresult
rv
=
devicesCopy
-
>
AppendElement
(
device
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
obs
-
>
NotifyObservers
(
nullptr
"
getUserMedia
:
response
:
deny
"
aCallID
.
get
(
)
)
;
return
;
}
}
obs
-
>
NotifyObservers
(
devicesCopy
"
getUserMedia
:
privileged
:
allow
"
aCallID
.
get
(
)
)
;
}
nsresult
MediaManager
:
:
GenerateUUID
(
nsAString
&
aResult
)
{
nsresult
rv
;
nsCOMPtr
<
nsIUUIDGenerator
>
uuidgen
=
do_GetService
(
"
mozilla
.
org
/
uuid
-
generator
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsID
id
;
rv
=
uuidgen
-
>
GenerateUUIDInPlace
(
&
id
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
char
buffer
[
NSID_LENGTH
]
;
id
.
ToProvidedString
(
buffer
)
;
aResult
.
Assign
(
NS_ConvertUTF8toUTF16
(
buffer
)
)
;
return
NS_OK
;
}
enum
class
GetUserMediaSecurityState
{
Other
=
0
HTTPS
=
1
File
=
2
App
=
3
Localhost
=
4
Loop
=
5
Privileged
=
6
}
;
static
void
ReduceConstraint
(
OwningBooleanOrMediaTrackConstraints
&
aConstraint
)
{
if
(
!
MediaManager
:
:
IsOn
(
aConstraint
)
)
{
return
;
}
if
(
!
aConstraint
.
IsMediaTrackConstraints
(
)
)
{
return
;
}
Maybe
<
nsString
>
mediaSource
;
if
(
aConstraint
.
GetAsMediaTrackConstraints
(
)
.
mMediaSource
.
WasPassed
(
)
)
{
mediaSource
=
Some
(
aConstraint
.
GetAsMediaTrackConstraints
(
)
.
mMediaSource
.
Value
(
)
)
;
}
aConstraint
.
Uninit
(
)
;
if
(
mediaSource
)
{
aConstraint
.
SetAsMediaTrackConstraints
(
)
.
mMediaSource
.
Construct
(
*
mediaSource
)
;
}
else
{
aConstraint
.
SetAsMediaTrackConstraints
(
)
;
}
}
RefPtr
<
MediaManager
:
:
StreamPromise
>
MediaManager
:
:
GetUserMedia
(
nsPIDOMWindowInner
*
aWindow
const
MediaStreamConstraints
&
aConstraintsPassedIn
CallerType
aCallerType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aWindow
)
;
uint64_t
windowID
=
aWindow
-
>
WindowID
(
)
;
MediaStreamConstraints
c
(
aConstraintsPassedIn
)
;
if
(
sHasShutdown
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
"
In
shutdown
"
)
__func__
)
;
}
nsIURI
*
docURI
=
aWindow
-
>
GetDocumentURI
(
)
;
if
(
!
docURI
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
bool
isChrome
=
(
aCallerType
=
=
CallerType
:
:
System
)
;
bool
privileged
=
isChrome
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
disabled
"
false
)
;
bool
isSecure
=
aWindow
-
>
IsSecureContext
(
)
;
bool
isHandlingUserInput
=
UserActivation
:
:
IsHandlingUserInput
(
)
;
nsCString
host
;
nsresult
rv
=
docURI
-
>
GetHost
(
host
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsGlobalWindowInner
:
:
Cast
(
aWindow
)
-
>
GetPrincipal
(
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
SecurityError
)
__func__
)
;
}
Document
*
doc
=
aWindow
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
SecurityError
)
__func__
)
;
}
if
(
principal
-
>
GetIsNullPrincipal
(
)
|
|
!
(
isSecure
|
|
StaticPrefs
:
:
media_getusermedia_insecure_enabled
(
)
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
ipc
:
:
PrincipalInfo
principalInfo
;
rv
=
PrincipalToPrincipalInfo
(
principal
&
principalInfo
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
SecurityError
)
__func__
)
;
}
const
bool
resistFingerprinting
=
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
;
if
(
resistFingerprinting
)
{
ReduceConstraint
(
c
.
mVideo
)
;
ReduceConstraint
(
c
.
mAudio
)
;
}
if
(
!
Preferences
:
:
GetBool
(
"
media
.
navigator
.
video
.
enabled
"
true
)
)
{
c
.
mVideo
.
SetAsBoolean
(
)
=
false
;
}
MediaSourceEnum
videoType
=
MediaSourceEnum
:
:
Other
;
MediaSourceEnum
audioType
=
MediaSourceEnum
:
:
Other
;
if
(
c
.
mVideo
.
IsMediaTrackConstraints
(
)
)
{
auto
&
vc
=
c
.
mVideo
.
GetAsMediaTrackConstraints
(
)
;
if
(
!
vc
.
mMediaSource
.
WasPassed
(
)
)
{
vc
.
mMediaSource
.
Construct
(
)
.
AssignASCII
(
dom
:
:
MediaSourceEnumValues
:
:
GetString
(
MediaSourceEnum
:
:
Camera
)
)
;
}
videoType
=
StringToEnum
(
dom
:
:
MediaSourceEnumValues
:
:
strings
vc
.
mMediaSource
.
Value
(
)
MediaSourceEnum
:
:
Other
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBRTC_GET_USER_MEDIA_TYPE
(
uint32_t
)
videoType
)
;
switch
(
videoType
)
{
case
MediaSourceEnum
:
:
Camera
:
break
;
case
MediaSourceEnum
:
:
Browser
:
if
(
!
vc
.
mBrowserWindow
.
WasPassed
(
)
)
{
nsPIDOMWindowOuter
*
outer
=
aWindow
-
>
GetOuterWindow
(
)
;
vc
.
mBrowserWindow
.
Construct
(
outer
-
>
WindowID
(
)
)
;
}
[
[
fallthrough
]
]
;
case
MediaSourceEnum
:
:
Screen
:
case
MediaSourceEnum
:
:
Window
:
if
(
!
Preferences
:
:
GetBool
(
(
(
videoType
=
=
MediaSourceEnum
:
:
Browser
)
?
"
media
.
getusermedia
.
browser
.
enabled
"
:
"
media
.
getusermedia
.
screensharing
.
enabled
"
)
false
)
|
|
(
!
privileged
&
&
!
aWindow
-
>
IsSecureContext
(
)
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
break
;
case
MediaSourceEnum
:
:
Microphone
:
case
MediaSourceEnum
:
:
Other
:
default
:
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
"
"
u
"
mediaSource
"
_ns
)
__func__
)
;
}
}
if
(
!
privileged
)
{
if
(
videoType
=
=
MediaSourceEnum
:
:
Screen
|
|
videoType
=
=
MediaSourceEnum
:
:
Browser
)
{
videoType
=
MediaSourceEnum
:
:
Window
;
vc
.
mMediaSource
.
Value
(
)
.
AssignASCII
(
dom
:
:
MediaSourceEnumValues
:
:
GetString
(
videoType
)
)
;
}
if
(
vc
.
mBrowserWindow
.
WasPassed
(
)
)
{
vc
.
mBrowserWindow
.
Value
(
)
=
-
1
;
}
if
(
vc
.
mAdvanced
.
WasPassed
(
)
)
{
for
(
MediaTrackConstraintSet
&
cs
:
vc
.
mAdvanced
.
Value
(
)
)
{
if
(
cs
.
mBrowserWindow
.
WasPassed
(
)
)
{
cs
.
mBrowserWindow
.
Value
(
)
=
-
1
;
}
}
}
}
}
else
if
(
IsOn
(
c
.
mVideo
)
)
{
videoType
=
MediaSourceEnum
:
:
Camera
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBRTC_GET_USER_MEDIA_TYPE
(
uint32_t
)
videoType
)
;
}
if
(
c
.
mAudio
.
IsMediaTrackConstraints
(
)
)
{
auto
&
ac
=
c
.
mAudio
.
GetAsMediaTrackConstraints
(
)
;
if
(
!
ac
.
mMediaSource
.
WasPassed
(
)
)
{
ac
.
mMediaSource
.
Construct
(
NS_ConvertASCIItoUTF16
(
dom
:
:
MediaSourceEnumValues
:
:
GetString
(
MediaSourceEnum
:
:
Microphone
)
)
)
;
}
audioType
=
StringToEnum
(
dom
:
:
MediaSourceEnumValues
:
:
strings
ac
.
mMediaSource
.
Value
(
)
MediaSourceEnum
:
:
Other
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBRTC_GET_USER_MEDIA_TYPE
(
uint32_t
)
audioType
)
;
switch
(
audioType
)
{
case
MediaSourceEnum
:
:
Microphone
:
break
;
case
MediaSourceEnum
:
:
AudioCapture
:
if
(
!
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
audiocapture
.
enabled
"
)
)
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
break
;
case
MediaSourceEnum
:
:
Other
:
default
:
{
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
"
"
u
"
mediaSource
"
_ns
)
__func__
)
;
}
}
}
else
if
(
IsOn
(
c
.
mAudio
)
)
{
audioType
=
MediaSourceEnum
:
:
Microphone
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBRTC_GET_USER_MEDIA_TYPE
(
uint32_t
)
audioType
)
;
}
RefPtr
<
GetUserMediaWindowListener
>
windowListener
=
GetOrMakeWindowListener
(
aWindow
)
;
MOZ_ASSERT
(
windowListener
)
;
auto
placeholderListener
=
MakeRefPtr
<
DeviceListener
>
(
)
;
windowListener
-
>
Register
(
placeholderListener
)
;
{
bool
disabled
=
!
IsOn
(
c
.
mAudio
)
&
&
!
IsOn
(
c
.
mVideo
)
;
if
(
IsOn
(
c
.
mAudio
)
)
{
if
(
audioType
=
=
MediaSourceEnum
:
:
Microphone
)
{
if
(
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
microphone
.
deny
"
false
)
|
|
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
microphone
"
_ns
)
)
{
disabled
=
true
;
}
}
else
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
display
-
capture
"
_ns
)
)
{
disabled
=
true
;
}
}
if
(
IsOn
(
c
.
mVideo
)
)
{
if
(
videoType
=
=
MediaSourceEnum
:
:
Camera
)
{
if
(
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
camera
.
deny
"
false
)
|
|
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
camera
"
_ns
)
)
{
disabled
=
true
;
}
}
else
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
display
-
capture
"
_ns
)
)
{
disabled
=
true
;
}
}
if
(
disabled
)
{
placeholderListener
-
>
Stop
(
)
;
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
}
MediaEnginePrefs
prefs
=
mPrefs
;
nsString
callID
;
rv
=
GenerateUUID
(
callID
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
bool
hasVideo
=
videoType
!
=
MediaSourceEnum
:
:
Other
;
bool
hasAudio
=
audioType
!
=
MediaSourceEnum
:
:
Other
;
DeviceEnumerationType
videoEnumerationType
=
DeviceEnumerationType
:
:
Normal
;
DeviceEnumerationType
audioEnumerationType
=
DeviceEnumerationType
:
:
Normal
;
bool
wantFakes
=
c
.
mFake
.
WasPassed
(
)
?
c
.
mFake
.
Value
(
)
:
Preferences
:
:
GetBool
(
"
media
.
navigator
.
streams
.
fake
"
)
;
nsAutoCString
videoLoopDev
audioLoopDev
;
if
(
videoType
=
=
MediaSourceEnum
:
:
Camera
)
{
Preferences
:
:
GetCString
(
"
media
.
video_loopback_dev
"
videoLoopDev
)
;
if
(
!
videoLoopDev
.
IsEmpty
(
)
)
{
videoEnumerationType
=
DeviceEnumerationType
:
:
Loopback
;
}
else
if
(
wantFakes
)
{
videoEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
}
}
if
(
audioType
=
=
MediaSourceEnum
:
:
Microphone
)
{
Preferences
:
:
GetCString
(
"
media
.
audio_loopback_dev
"
audioLoopDev
)
;
if
(
!
audioLoopDev
.
IsEmpty
(
)
)
{
audioEnumerationType
=
DeviceEnumerationType
:
:
Loopback
;
}
else
if
(
wantFakes
)
{
audioEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
}
}
bool
realDevicesRequested
=
(
videoEnumerationType
!
=
DeviceEnumerationType
:
:
Fake
&
&
hasVideo
)
|
|
(
audioEnumerationType
!
=
DeviceEnumerationType
:
:
Fake
&
&
hasAudio
)
;
bool
askPermission
=
(
!
privileged
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
force
"
)
)
&
&
(
realDevicesRequested
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
;
LOG
(
"
%
s
:
Preparing
to
enumerate
devices
.
windowId
=
%
"
PRIu64
"
videoType
=
%
"
PRIu8
"
audioType
=
%
"
PRIu8
"
videoEnumerationType
=
%
"
PRIu8
"
audioEnumerationType
=
%
"
PRIu8
"
askPermission
=
%
s
"
__func__
windowID
static_cast
<
uint8_t
>
(
videoType
)
static_cast
<
uint8_t
>
(
audioType
)
static_cast
<
uint8_t
>
(
videoEnumerationType
)
static_cast
<
uint8_t
>
(
audioEnumerationType
)
askPermission
?
"
true
"
:
"
false
"
)
;
RefPtr
<
MediaManager
>
self
=
this
;
return
EnumerateDevicesImpl
(
aWindow
videoType
audioType
videoEnumerationType
audioEnumerationType
EnumerationFlag
:
:
AllowPermissionRequest
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
windowID
c
windowListener
aCallerType
]
(
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
{
LOG
(
"
GetUserMedia
:
post
enumeration
promise
success
callback
"
"
starting
"
)
;
RefPtr
<
nsPIDOMWindowInner
>
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
windowID
)
;
if
(
!
window
|
|
!
self
-
>
IsWindowListenerStillActive
(
windowListener
)
)
{
LOG
(
"
GetUserMedia
:
bad
window
(
%
"
PRIu64
"
)
in
post
enumeration
success
callback
!
"
windowID
)
;
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
return
self
-
>
SelectSettings
(
c
aCallerType
std
:
:
move
(
aDevices
)
)
;
}
[
]
(
RefPtr
<
MediaMgrError
>
&
&
aError
)
{
LOG
(
"
GetUserMedia
:
post
enumeration
EnumerateDevicesImpl
"
"
failure
callback
called
!
"
)
;
return
DeviceSetPromise
:
:
CreateAndReject
(
std
:
:
move
(
aError
)
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
windowID
c
windowListener
placeholderListener
hasAudio
hasVideo
askPermission
prefs
isSecure
isHandlingUserInput
callID
principalInfo
aCallerType
resistFingerprinting
]
(
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
mutable
{
LOG
(
"
GetUserMedia
:
starting
post
enumeration
promise2
success
"
"
callback
!
"
)
;
RefPtr
<
nsPIDOMWindowInner
>
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
windowID
)
;
if
(
!
window
|
|
!
self
-
>
IsWindowListenerStillActive
(
windowListener
)
)
{
LOG
(
"
GetUserMedia
:
bad
window
(
%
"
PRIu64
"
)
in
post
enumeration
success
callback
2
!
"
windowID
)
;
placeholderListener
-
>
Stop
(
)
;
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
if
(
!
aDevices
-
>
Length
(
)
)
{
LOG
(
"
GetUserMedia
:
no
devices
found
in
post
enumeration
promise2
"
"
success
callback
!
Calling
error
handler
!
"
)
;
placeholderListener
-
>
Stop
(
)
;
auto
error
=
resistFingerprinting
?
MediaMgrError
:
:
Name
:
:
NotAllowedError
:
MediaMgrError
:
:
Name
:
:
NotFoundError
;
return
StreamPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
error
)
__func__
)
;
}
RefPtr
<
DeviceListener
>
audioListener
;
RefPtr
<
DeviceListener
>
videoListener
;
if
(
hasAudio
)
{
audioListener
=
MakeRefPtr
<
DeviceListener
>
(
)
;
windowListener
-
>
Register
(
audioListener
)
;
}
if
(
hasVideo
)
{
videoListener
=
MakeRefPtr
<
DeviceListener
>
(
)
;
windowListener
-
>
Register
(
videoListener
)
;
}
placeholderListener
-
>
Stop
(
)
;
bool
focusSource
=
mozilla
:
:
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
window
.
focus_source
.
enabled
"
true
)
;
MozPromiseHolder
<
StreamPromise
>
holder
;
RefPtr
<
StreamPromise
>
p
=
holder
.
Ensure
(
__func__
)
;
auto
task
=
MakeRefPtr
<
GetUserMediaStreamTask
>
(
c
std
:
:
move
(
holder
)
windowID
std
:
:
move
(
windowListener
)
std
:
:
move
(
audioListener
)
std
:
:
move
(
videoListener
)
prefs
principalInfo
aCallerType
focusSource
)
;
size_t
taskCount
=
self
-
>
AddTaskAndGetCount
(
windowID
callID
std
:
:
move
(
task
)
)
;
if
(
!
askPermission
)
{
self
-
>
NotifyAllowed
(
callID
*
aDevices
)
;
}
else
{
auto
req
=
MakeRefPtr
<
GetUserMediaRequest
>
(
window
callID
std
:
:
move
(
aDevices
)
c
isSecure
isHandlingUserInput
)
;
if
(
!
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
force
"
)
&
&
taskCount
>
1
)
{
self
-
>
mPendingGUMRequest
.
AppendElement
(
req
.
forget
(
)
)
;
}
else
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
req
"
getUserMedia
:
request
"
nullptr
)
;
}
}
#
ifdef
MOZ_WEBRTC
EnableWebRtcLog
(
)
;
#
endif
return
p
;
}
[
placeholderListener
]
(
RefPtr
<
MediaMgrError
>
&
&
aError
)
{
LOG
(
"
GetUserMedia
:
post
enumeration
SelectSettings
failure
"
"
callback
called
!
"
)
;
placeholderListener
-
>
Stop
(
)
;
return
StreamPromise
:
:
CreateAndReject
(
std
:
:
move
(
aError
)
__func__
)
;
}
)
;
}
;
void
MediaManager
:
:
AnonymizeDevices
(
MediaDeviceSet
&
aDevices
const
nsACString
&
aOriginKey
const
uint64_t
aWindowId
)
{
MOZ_ASSERT
(
!
aOriginKey
.
IsEmpty
(
)
)
;
for
(
RefPtr
<
MediaDevice
>
&
device
:
aDevices
)
{
nsString
id
=
device
-
>
mRawID
;
AnonymizeId
(
id
aOriginKey
)
;
nsString
groupId
=
device
-
>
mRawGroupID
;
groupId
.
AppendInt
(
aWindowId
)
;
AnonymizeId
(
groupId
aOriginKey
)
;
nsString
name
=
device
-
>
mRawName
;
if
(
name
.
Find
(
u
"
AirPods
"
_ns
)
!
=
-
1
)
{
name
=
u
"
AirPods
"
_ns
;
}
device
=
new
MediaDevice
(
device
id
groupId
device
-
>
mRawID
device
-
>
mRawGroupID
name
)
;
}
}
nsresult
MediaManager
:
:
AnonymizeId
(
nsAString
&
aId
const
nsACString
&
aOriginKey
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsresult
rv
;
nsCOMPtr
<
nsIKeyObjectFactory
>
factory
=
do_GetService
(
"
mozilla
.
org
/
security
/
keyobjectfactory
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCString
rawKey
;
rv
=
Base64Decode
(
aOriginKey
rawKey
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIKeyObject
>
key
;
rv
=
factory
-
>
KeyFromString
(
nsIKeyObject
:
:
HMAC
rawKey
getter_AddRefs
(
key
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsICryptoHMAC
>
hasher
=
do_CreateInstance
(
NS_CRYPTO_HMAC_CONTRACTID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
hasher
-
>
Init
(
nsICryptoHMAC
:
:
SHA256
key
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
NS_ConvertUTF16toUTF8
id
(
aId
)
;
rv
=
hasher
-
>
Update
(
reinterpret_cast
<
const
uint8_t
*
>
(
id
.
get
(
)
)
id
.
Length
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCString
mac
;
rv
=
hasher
-
>
Finish
(
true
mac
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
CopyUTF8toUTF16
(
mac
aId
)
;
return
NS_OK
;
}
RefPtr
<
MediaManager
:
:
DeviceSetPromise
>
MediaManager
:
:
EnumerateDevicesImpl
(
nsPIDOMWindowInner
*
aWindow
MediaSourceEnum
aVideoInputType
MediaSourceEnum
aAudioInputType
DeviceEnumerationType
aVideoInputEnumType
DeviceEnumerationType
aAudioInputEnumType
EnumerationFlags
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
uint64_t
windowId
=
aWindow
-
>
WindowID
(
)
;
LOG
(
"
%
s
:
windowId
=
%
"
PRIu64
"
aVideoInputType
=
%
"
PRIu8
"
aAudioInputType
=
%
"
PRIu8
"
aVideoInputEnumType
=
%
"
PRIu8
"
aAudioInputEnumType
=
%
"
PRIu8
__func__
windowId
static_cast
<
uint8_t
>
(
aVideoInputType
)
static_cast
<
uint8_t
>
(
aAudioInputType
)
static_cast
<
uint8_t
>
(
aVideoInputEnumType
)
static_cast
<
uint8_t
>
(
aAudioInputEnumType
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsGlobalWindowInner
:
:
Cast
(
aWindow
)
-
>
GetPrincipal
(
)
;
MOZ_ASSERT
(
principal
)
;
ipc
:
:
PrincipalInfo
principalInfo
;
nsresult
rv
=
PrincipalToPrincipalInfo
(
principal
&
principalInfo
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
RefPtr
<
GetUserMediaWindowListener
>
windowListener
=
GetOrMakeWindowListener
(
aWindow
)
;
MOZ_ASSERT
(
windowListener
)
;
auto
placeholderListener
=
MakeRefPtr
<
DeviceListener
>
(
)
;
windowListener
-
>
Register
(
placeholderListener
)
;
bool
persist
=
IsActivelyCapturingOrHasAPermission
(
windowId
)
;
auto
originKey
=
MakeRefPtr
<
Refcountable
<
nsCString
>
>
(
)
;
return
media
:
:
GetPrincipalKey
(
principalInfo
persist
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
windowId
aVideoInputType
aAudioInputType
aVideoInputEnumType
aAudioInputEnumType
aFlags
originKey
]
(
const
nsCString
&
aOriginKey
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
originKey
-
>
Assign
(
aOriginKey
)
;
MediaManager
*
mgr
=
MediaManager
:
:
GetIfExists
(
)
;
MOZ_ASSERT
(
mgr
)
;
if
(
!
mgr
-
>
IsWindowStillActive
(
windowId
)
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
return
mgr
-
>
EnumerateRawDevices
(
aVideoInputType
aAudioInputType
aVideoInputEnumType
aAudioInputEnumType
aFlags
)
;
}
[
]
(
nsresult
rs
)
{
NS_WARNING
(
"
EnumerateDevicesImpl
failed
to
get
Principal
Key
.
Enumeration
"
"
will
not
continue
.
"
)
;
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
windowId
placeholderListener
originKey
aVideoInputEnumType
aAudioInputEnumType
]
(
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
{
MediaManager
*
mgr
=
MediaManager
:
:
GetIfExists
(
)
;
if
(
!
mgr
|
|
placeholderListener
-
>
Stopped
(
)
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
MOZ_ASSERT
(
mgr
-
>
IsWindowStillActive
(
windowId
)
)
;
placeholderListener
-
>
Stop
(
)
;
for
(
auto
&
device
:
*
aDevices
)
{
if
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Audiooutput
|
|
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
&
&
aAudioInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
&
&
device
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Microphone
)
|
|
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
&
&
aVideoInputEnumType
!
=
DeviceEnumerationType
:
:
Fake
&
&
device
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Camera
)
)
{
MOZ_ALWAYS_TRUE
(
mgr
-
>
mDeviceIDs
.
put
(
device
-
>
mRawID
)
)
;
}
}
MediaManager
:
:
AnonymizeDevices
(
*
aDevices
*
originKey
windowId
)
;
return
DeviceSetPromise
:
:
CreateAndResolve
(
std
:
:
move
(
aDevices
)
__func__
)
;
}
[
placeholderListener
]
(
RefPtr
<
MediaMgrError
>
&
&
aError
)
{
MOZ_ASSERT
(
placeholderListener
-
>
Stopped
(
)
)
;
return
DeviceSetPromise
:
:
CreateAndReject
(
std
:
:
move
(
aError
)
__func__
)
;
}
)
;
}
RefPtr
<
MediaManager
:
:
DeviceSetPromise
>
MediaManager
:
:
EnumerateDevices
(
nsPIDOMWindowInner
*
aWindow
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sHasShutdown
)
{
return
DeviceSetPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
"
In
shutdown
"
)
__func__
)
;
}
Document
*
doc
=
aWindow
-
>
GetExtantDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
DeviceEnumerationType
videoEnumerationType
=
DeviceEnumerationType
:
:
Normal
;
DeviceEnumerationType
audioEnumerationType
=
DeviceEnumerationType
:
:
Normal
;
MediaSourceEnum
videoType
=
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
camera
"
_ns
)
?
MediaSourceEnum
:
:
Camera
:
MediaSourceEnum
:
:
Other
;
MediaSourceEnum
audioType
=
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
microphone
"
_ns
)
?
MediaSourceEnum
:
:
Microphone
:
MediaSourceEnum
:
:
Other
;
EnumerationFlags
flags
;
if
(
Preferences
:
:
GetBool
(
"
media
.
setsinkid
.
enabled
"
)
&
&
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
u
"
speaker
-
selection
"
_ns
)
)
{
flags
+
=
EnumerationFlag
:
:
EnumerateAudioOutputs
;
}
if
(
audioType
=
=
MediaSourceEnum
:
:
Other
&
&
videoType
=
=
MediaSourceEnum
:
:
Other
&
&
flags
.
isEmpty
(
)
)
{
return
DeviceSetPromise
:
:
CreateAndResolve
(
new
MediaDeviceSetRefCnt
(
)
__func__
)
;
}
bool
resistFingerprinting
=
nsContentUtils
:
:
ShouldResistFingerprinting
(
doc
)
;
if
(
resistFingerprinting
)
{
videoEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
audioEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
}
else
{
nsAutoCString
videoLoopDev
audioLoopDev
;
bool
wantFakes
=
Preferences
:
:
GetBool
(
"
media
.
navigator
.
streams
.
fake
"
)
;
if
(
videoType
=
=
MediaSourceEnum
:
:
Camera
)
{
Preferences
:
:
GetCString
(
"
media
.
video_loopback_dev
"
videoLoopDev
)
;
if
(
!
videoLoopDev
.
IsEmpty
(
)
)
{
videoEnumerationType
=
DeviceEnumerationType
:
:
Loopback
;
}
else
if
(
wantFakes
)
{
videoEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
}
}
if
(
audioType
=
=
MediaSourceEnum
:
:
Microphone
)
{
Preferences
:
:
GetCString
(
"
media
.
audio_loopback_dev
"
audioLoopDev
)
;
if
(
!
audioLoopDev
.
IsEmpty
(
)
)
{
audioEnumerationType
=
DeviceEnumerationType
:
:
Loopback
;
}
else
if
(
wantFakes
)
{
audioEnumerationType
=
DeviceEnumerationType
:
:
Fake
;
}
}
}
return
EnumerateDevicesImpl
(
aWindow
videoType
audioType
videoEnumerationType
audioEnumerationType
flags
)
;
}
RefPtr
<
MediaManager
:
:
DevicePromise
>
MediaManager
:
:
SelectAudioOutput
(
nsPIDOMWindowInner
*
aWindow
const
dom
:
:
AudioOutputOptions
&
aOptions
CallerType
aCallerType
)
{
bool
isHandlingUserInput
=
UserActivation
:
:
IsHandlingUserInput
(
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsGlobalWindowInner
:
:
Cast
(
aWindow
)
-
>
GetPrincipal
(
)
;
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
aWindow
-
>
GetExtantDoc
(
)
u
"
speaker
-
selection
"
_ns
)
)
{
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
"
Document
'
s
Permissions
Policy
does
not
allow
selectAudioOutput
(
)
"
)
__func__
)
;
}
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
SecurityError
)
__func__
)
;
}
if
(
principal
-
>
GetIsNullPrincipal
(
)
)
{
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
__func__
)
;
}
ipc
:
:
PrincipalInfo
principalInfo
;
nsresult
rv
=
PrincipalToPrincipalInfo
(
principal
&
principalInfo
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
SecurityError
)
__func__
)
;
}
uint64_t
windowID
=
aWindow
-
>
WindowID
(
)
;
return
EnumerateDevicesImpl
(
aWindow
MediaSourceEnum
:
:
Other
MediaSourceEnum
:
:
Other
DeviceEnumerationType
:
:
Normal
DeviceEnumerationType
:
:
Normal
{
EnumerationFlag
:
:
EnumerateAudioOutputs
EnumerationFlag
:
:
AllowPermissionRequest
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
<
MediaManager
>
(
this
)
windowID
aOptions
aCallerType
isHandlingUserInput
principalInfo
]
(
RefPtr
<
MediaDeviceSetRefCnt
>
aDevices
)
mutable
{
RefPtr
<
nsPIDOMWindowInner
>
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
windowID
)
;
if
(
!
window
)
{
LOG
(
"
SelectAudioOutput
:
bad
window
(
%
"
PRIu64
"
)
in
post
enumeration
success
callback
!
"
windowID
)
;
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
)
__func__
)
;
}
if
(
aDevices
-
>
IsEmpty
(
)
)
{
LOG
(
"
SelectAudioOutput
:
no
devices
found
"
)
;
auto
error
=
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
?
MediaMgrError
:
:
Name
:
:
NotAllowedError
:
MediaMgrError
:
:
Name
:
:
NotFoundError
;
return
DevicePromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
error
)
__func__
)
;
}
MozPromiseHolder
<
DevicePromise
>
holder
;
RefPtr
<
DevicePromise
>
p
=
holder
.
Ensure
(
__func__
)
;
auto
task
=
MakeRefPtr
<
SelectAudioOutputTask
>
(
std
:
:
move
(
holder
)
windowID
aCallerType
principalInfo
)
;
nsString
callID
;
nsresult
rv
=
GenerateUUID
(
callID
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
size_t
taskCount
=
self
-
>
AddTaskAndGetCount
(
windowID
callID
std
:
:
move
(
task
)
)
;
bool
askPermission
=
!
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
disabled
"
)
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
force
"
)
;
if
(
!
askPermission
)
{
self
-
>
NotifyAllowed
(
callID
*
aDevices
)
;
}
else
{
MOZ_ASSERT
(
window
-
>
IsSecureContext
(
)
)
;
auto
req
=
MakeRefPtr
<
GetUserMediaRequest
>
(
window
callID
std
:
:
move
(
aDevices
)
aOptions
true
isHandlingUserInput
)
;
if
(
taskCount
>
1
)
{
self
-
>
mPendingGUMRequest
.
AppendElement
(
req
.
forget
(
)
)
;
}
else
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
req
"
getUserMedia
:
request
"
nullptr
)
;
}
}
return
p
;
}
[
]
(
RefPtr
<
MediaMgrError
>
aError
)
{
LOG
(
"
SelectAudioOutput
:
EnumerateDevicesImpl
"
"
failure
callback
called
!
"
)
;
return
DevicePromise
:
:
CreateAndReject
(
std
:
:
move
(
aError
)
__func__
)
;
}
)
;
}
MediaEngine
*
MediaManager
:
:
GetBackend
(
)
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
if
(
!
mBackend
)
{
MOZ_RELEASE_ASSERT
(
!
sHasShutdown
)
;
#
if
defined
(
MOZ_WEBRTC
)
mBackend
=
new
MediaEngineWebRTC
(
)
;
#
else
mBackend
=
new
MediaEngineDefault
(
)
;
#
endif
mDeviceListChangeListener
=
mBackend
-
>
DeviceListChangeEvent
(
)
.
Connect
(
AbstractThread
:
:
MainThread
(
)
this
&
MediaManager
:
:
DeviceListChanged
)
;
}
return
mBackend
;
}
void
MediaManager
:
:
OnNavigation
(
uint64_t
aWindowID
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
OnNavigation
for
%
"
PRIu64
aWindowID
)
;
nsTArray
<
nsString
>
*
callIDs
;
if
(
mCallIds
.
Get
(
aWindowID
&
callIDs
)
)
{
for
(
auto
&
callID
:
*
callIDs
)
{
mActiveCallbacks
.
Remove
(
callID
)
;
for
(
auto
&
request
:
mPendingGUMRequest
.
Clone
(
)
)
{
nsString
id
;
request
-
>
GetCallID
(
id
)
;
if
(
id
=
=
callID
)
{
mPendingGUMRequest
.
RemoveElement
(
request
)
;
}
}
}
mCallIds
.
Remove
(
aWindowID
)
;
}
if
(
RefPtr
<
GetUserMediaWindowListener
>
listener
=
GetWindowListener
(
aWindowID
)
)
{
listener
-
>
RemoveAll
(
)
;
}
MOZ_ASSERT
(
!
GetWindowListener
(
aWindowID
)
)
;
}
void
MediaManager
:
:
OnCameraMute
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
OnCameraMute
for
all
windows
"
)
;
mCamerasMuted
=
aMute
;
for
(
const
auto
&
window
:
mActiveWindows
.
Values
(
)
)
{
window
-
>
MuteOrUnmuteCameras
(
aMute
)
;
}
}
void
MediaManager
:
:
OnMicrophoneMute
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
OnMicrophoneMute
for
all
windows
"
)
;
mMicrophonesMuted
=
aMute
;
for
(
const
auto
&
window
:
mActiveWindows
.
Values
(
)
)
{
window
-
>
MuteOrUnmuteMicrophones
(
aMute
)
;
}
}
RefPtr
<
GetUserMediaWindowListener
>
MediaManager
:
:
GetOrMakeWindowListener
(
nsPIDOMWindowInner
*
aWindow
)
{
Document
*
doc
=
aWindow
-
>
GetExtantDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
nsIPrincipal
*
principal
=
doc
-
>
NodePrincipal
(
)
;
uint64_t
windowId
=
aWindow
-
>
WindowID
(
)
;
RefPtr
<
GetUserMediaWindowListener
>
windowListener
=
GetWindowListener
(
windowId
)
;
if
(
windowListener
)
{
MOZ_ASSERT
(
PrincipalHandleMatches
(
windowListener
-
>
GetPrincipalHandle
(
)
principal
)
)
;
}
else
{
windowListener
=
new
GetUserMediaWindowListener
(
windowId
MakePrincipalHandle
(
principal
)
)
;
AddWindowID
(
windowId
windowListener
)
;
}
return
windowListener
;
}
void
MediaManager
:
:
AddWindowID
(
uint64_t
aWindowId
RefPtr
<
GetUserMediaWindowListener
>
aListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsWindowStillActive
(
aWindowId
)
)
{
MOZ_ASSERT
(
false
"
Window
already
added
"
)
;
return
;
}
aListener
-
>
MuteOrUnmuteCameras
(
mCamerasMuted
)
;
aListener
-
>
MuteOrUnmuteMicrophones
(
mMicrophonesMuted
)
;
GetActiveWindows
(
)
-
>
InsertOrUpdate
(
aWindowId
std
:
:
move
(
aListener
)
)
;
RefPtr
<
WindowGlobalChild
>
wgc
=
WindowGlobalChild
:
:
GetByInnerWindowId
(
aWindowId
)
;
if
(
wgc
)
{
wgc
-
>
BlockBFCacheFor
(
BFCacheStatus
:
:
ACTIVE_GET_USER_MEDIA
)
;
}
}
void
MediaManager
:
:
RemoveWindowID
(
uint64_t
aWindowId
)
{
RefPtr
<
WindowGlobalChild
>
wgc
=
WindowGlobalChild
:
:
GetByInnerWindowId
(
aWindowId
)
;
if
(
wgc
)
{
wgc
-
>
UnblockBFCacheFor
(
BFCacheStatus
:
:
ACTIVE_GET_USER_MEDIA
)
;
}
mActiveWindows
.
Remove
(
aWindowId
)
;
auto
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
aWindowId
)
;
if
(
!
window
)
{
LOG
(
"
No
inner
window
for
%
"
PRIu64
aWindowId
)
;
return
;
}
auto
*
outer
=
window
-
>
GetOuterWindow
(
)
;
if
(
!
outer
)
{
LOG
(
"
No
outer
window
for
inner
%
"
PRIu64
aWindowId
)
;
return
;
}
uint64_t
outerID
=
outer
-
>
WindowID
(
)
;
char
windowBuffer
[
32
]
;
SprintfLiteral
(
windowBuffer
"
%
"
PRIu64
outerID
)
;
nsString
data
=
NS_ConvertUTF8toUTF16
(
windowBuffer
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyWhenScriptSafe
(
nullptr
"
recording
-
window
-
ended
"
data
.
get
(
)
)
;
LOG
(
"
Sent
recording
-
window
-
ended
for
window
%
"
PRIu64
"
(
outer
%
"
PRIu64
"
)
"
aWindowId
outerID
)
;
}
bool
MediaManager
:
:
IsWindowListenerStillActive
(
const
RefPtr
<
GetUserMediaWindowListener
>
&
aListener
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aListener
)
;
return
aListener
&
&
aListener
=
=
GetWindowListener
(
aListener
-
>
WindowID
(
)
)
;
}
void
MediaManager
:
:
GetPref
(
nsIPrefBranch
*
aBranch
const
char
*
aPref
const
char
*
aData
int32_t
*
aVal
)
{
int32_t
temp
;
if
(
aData
=
=
nullptr
|
|
strcmp
(
aPref
aData
)
=
=
0
)
{
if
(
NS_SUCCEEDED
(
aBranch
-
>
GetIntPref
(
aPref
&
temp
)
)
)
{
*
aVal
=
temp
;
}
}
}
void
MediaManager
:
:
GetPrefBool
(
nsIPrefBranch
*
aBranch
const
char
*
aPref
const
char
*
aData
bool
*
aVal
)
{
bool
temp
;
if
(
aData
=
=
nullptr
|
|
strcmp
(
aPref
aData
)
=
=
0
)
{
if
(
NS_SUCCEEDED
(
aBranch
-
>
GetBoolPref
(
aPref
&
temp
)
)
)
{
*
aVal
=
temp
;
}
}
}
void
MediaManager
:
:
GetPrefs
(
nsIPrefBranch
*
aBranch
const
char
*
aData
)
{
GetPref
(
aBranch
"
media
.
navigator
.
video
.
default_width
"
aData
&
mPrefs
.
mWidth
)
;
GetPref
(
aBranch
"
media
.
navigator
.
video
.
default_height
"
aData
&
mPrefs
.
mHeight
)
;
GetPref
(
aBranch
"
media
.
navigator
.
video
.
default_fps
"
aData
&
mPrefs
.
mFPS
)
;
GetPref
(
aBranch
"
media
.
navigator
.
audio
.
fake_frequency
"
aData
&
mPrefs
.
mFreq
)
;
#
ifdef
MOZ_WEBRTC
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
aec_enabled
"
aData
&
mPrefs
.
mAecOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
agc_enabled
"
aData
&
mPrefs
.
mAgcOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
hpf_enabled
"
aData
&
mPrefs
.
mHPFOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
noise_enabled
"
aData
&
mPrefs
.
mNoiseOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
transient_enabled
"
aData
&
mPrefs
.
mTransientOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
residual_echo_enabled
"
aData
&
mPrefs
.
mResidualEchoOn
)
;
GetPrefBool
(
aBranch
"
media
.
getusermedia
.
agc2_forced
"
aData
&
mPrefs
.
mAgc2Forced
)
;
GetPref
(
aBranch
"
media
.
getusermedia
.
agc
"
aData
&
mPrefs
.
mAgc
)
;
GetPref
(
aBranch
"
media
.
getusermedia
.
noise
"
aData
&
mPrefs
.
mNoise
)
;
GetPref
(
aBranch
"
media
.
getusermedia
.
channels
"
aData
&
mPrefs
.
mChannels
)
;
bool
oldFakeDeviceChangeEventOn
=
mPrefs
.
mFakeDeviceChangeEventOn
;
GetPrefBool
(
aBranch
"
media
.
ondevicechange
.
fakeDeviceChangeEvent
.
enabled
"
aData
&
mPrefs
.
mFakeDeviceChangeEventOn
)
;
if
(
mPrefs
.
mFakeDeviceChangeEventOn
!
=
oldFakeDeviceChangeEventOn
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
sHasShutdown
)
;
MOZ_ALWAYS_SUCCEEDS
(
mMediaThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
MediaManager
:
:
SetFakeDeviceChangeEventsEnabled
"
[
enable
=
mPrefs
.
mFakeDeviceChangeEventOn
]
{
if
(
MediaManager
*
mm
=
MediaManager
:
:
GetIfExists
(
)
)
{
mm
-
>
GetBackend
(
)
-
>
SetFakeDeviceChangeEventsEnabled
(
enable
)
;
}
}
)
)
)
;
}
#
endif
}
void
MediaManager
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sHasShutdown
)
{
return
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
RemoveObserver
(
this
"
last
-
pb
-
context
-
exited
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
privileged
:
allow
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
response
:
allow
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
response
:
deny
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
response
:
noOSPermission
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
revoke
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
muteVideo
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
unmuteVideo
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
muteAudio
"
)
;
obs
-
>
RemoveObserver
(
this
"
getUserMedia
:
unmuteAudio
"
)
;
obs
-
>
RemoveObserver
(
this
"
application
-
background
"
)
;
obs
-
>
RemoveObserver
(
this
"
application
-
foreground
"
)
;
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
if
(
prefs
)
{
prefs
-
>
RemoveObserver
(
"
media
.
navigator
.
video
.
default_width
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
navigator
.
video
.
default_height
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
navigator
.
video
.
default_fps
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
navigator
.
audio
.
fake_frequency
"
this
)
;
#
ifdef
MOZ_WEBRTC
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
aec_enabled
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
aec
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
agc_enabled
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
hpf_enabled
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
agc
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
noise_enabled
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
noise
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
ondevicechange
.
fakeDeviceChangeEvent
.
enabled
"
this
)
;
prefs
-
>
RemoveObserver
(
"
media
.
getusermedia
.
channels
"
this
)
;
#
endif
}
if
(
mDeviceChangeTimer
)
{
mDeviceChangeTimer
-
>
Cancel
(
)
;
mDeviceChangeTimer
=
nullptr
;
}
{
const
auto
listeners
=
ToArray
(
GetActiveWindows
(
)
-
>
Values
(
)
)
;
for
(
const
auto
&
listener
:
listeners
)
{
listener
-
>
RemoveAll
(
)
;
}
}
MOZ_ASSERT
(
GetActiveWindows
(
)
-
>
Count
(
)
=
=
0
)
;
GetActiveWindows
(
)
-
>
Clear
(
)
;
mActiveCallbacks
.
Clear
(
)
;
mCallIds
.
Clear
(
)
;
mPendingGUMRequest
.
Clear
(
)
;
mDeviceIDs
.
clear
(
)
;
#
ifdef
MOZ_WEBRTC
StopWebRtcLog
(
)
;
#
endif
sHasShutdown
=
true
;
class
ShutdownTask
:
public
Runnable
{
public
:
ShutdownTask
(
RefPtr
<
MediaManager
>
aManager
RefPtr
<
Runnable
>
aReply
)
:
mozilla
:
:
Runnable
(
"
ShutdownTask
"
)
mManager
(
std
:
:
move
(
aManager
)
)
mReply
(
std
:
:
move
(
aReply
)
)
{
}
private
:
NS_IMETHOD
Run
(
)
override
{
LOG
(
"
MediaManager
Thread
Shutdown
"
)
;
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
{
if
(
mManager
-
>
mBackend
)
{
mManager
-
>
mBackend
-
>
SetFakeDeviceChangeEventsEnabled
(
false
)
;
mManager
-
>
mBackend
-
>
Shutdown
(
)
;
mManager
-
>
mDeviceListChangeListener
.
DisconnectIfExists
(
)
;
}
}
mManager
-
>
mBackend
=
nullptr
;
if
(
NS_FAILED
(
NS_DispatchToMainThread
(
mReply
.
forget
(
)
)
)
)
{
LOG
(
"
Will
leak
thread
:
DispatchToMainthread
of
reply
runnable
failed
"
"
in
MediaManager
shutdown
"
)
;
}
return
NS_OK
;
}
RefPtr
<
MediaManager
>
mManager
;
RefPtr
<
Runnable
>
mReply
;
}
;
#
ifdef
DEBUG
{
StaticMutexAutoLock
lock
(
sSingletonMutex
)
;
MOZ_ASSERT
(
this
=
=
sSingleton
)
;
}
#
endif
auto
shutdown
=
MakeRefPtr
<
ShutdownTask
>
(
this
media
:
:
NewRunnableFrom
(
[
]
(
)
{
LOG
(
"
MediaManager
shutdown
lambda
running
releasing
MediaManager
"
"
singleton
and
thread
"
)
;
StaticMutexAutoLock
lock
(
sSingletonMutex
)
;
media
:
:
MustGetShutdownBarrier
(
)
-
>
RemoveBlocker
(
sSingleton
-
>
mShutdownBlocker
)
;
sSingleton
=
nullptr
;
return
NS_OK
;
}
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
mMediaThread
-
>
Dispatch
(
shutdown
.
forget
(
)
)
)
;
mMediaThread
-
>
BeginShutdown
(
)
;
mMediaThread
-
>
AwaitShutdownAndIdle
(
)
;
}
void
MediaManager
:
:
SendPendingGUMRequest
(
)
{
if
(
mPendingGUMRequest
.
Length
(
)
>
0
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
mPendingGUMRequest
[
0
]
"
getUserMedia
:
request
"
nullptr
)
;
mPendingGUMRequest
.
RemoveElementAt
(
0
)
;
}
}
bool
IsGUMResponseNoAccess
(
const
char
*
aTopic
MediaMgrError
:
:
Name
&
aErrorName
)
{
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
response
:
deny
"
)
)
{
aErrorName
=
MediaMgrError
:
:
Name
:
:
NotAllowedError
;
return
true
;
}
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
response
:
noOSPermission
"
)
)
{
aErrorName
=
MediaMgrError
:
:
Name
:
:
NotFoundError
;
return
true
;
}
return
false
;
}
static
MediaSourceEnum
ParseScreenColonWindowID
(
const
char16_t
*
aData
uint64_t
*
aWindowIDOut
)
{
MOZ_ASSERT
(
aWindowIDOut
)
;
const
nsDependentString
data
(
aData
)
;
if
(
Substring
(
data
0
strlen
(
"
screen
:
"
)
)
.
EqualsLiteral
(
"
screen
:
"
)
)
{
nsresult
rv
;
*
aWindowIDOut
=
Substring
(
data
strlen
(
"
screen
:
"
)
)
.
ToInteger64
(
&
rv
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
MediaSourceEnum
:
:
Screen
;
}
nsresult
rv
;
*
aWindowIDOut
=
data
.
ToInteger64
(
&
rv
)
;
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
MediaSourceEnum
:
:
Camera
;
}
nsresult
MediaManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MediaMgrError
:
:
Name
gumNoAccessError
=
MediaMgrError
:
:
Name
:
:
NotAllowedError
;
if
(
!
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
)
{
nsCOMPtr
<
nsIPrefBranch
>
branch
(
do_QueryInterface
(
aSubject
)
)
;
if
(
branch
)
{
GetPrefs
(
branch
NS_ConvertUTF16toUTF8
(
aData
)
.
get
(
)
)
;
LOG
(
"
%
s
:
%
dx
%
d
%
dfps
"
__FUNCTION__
mPrefs
.
mWidth
mPrefs
.
mHeight
mPrefs
.
mFPS
)
;
}
}
else
if
(
!
strcmp
(
aTopic
"
last
-
pb
-
context
-
exited
"
)
)
{
media
:
:
SanitizeOriginKeys
(
0
true
)
;
return
NS_OK
;
}
else
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
got
-
device
-
permission
"
)
)
{
MOZ_ASSERT
(
aSubject
)
;
nsCOMPtr
<
nsIRunnable
>
task
=
do_QueryInterface
(
aSubject
)
;
MediaManager
:
:
Dispatch
(
NewTaskFrom
(
[
task
]
{
task
-
>
Run
(
)
;
}
)
)
;
return
NS_OK
;
}
else
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
privileged
:
allow
"
)
|
|
!
strcmp
(
aTopic
"
getUserMedia
:
response
:
allow
"
)
)
{
nsString
key
(
aData
)
;
RefPtr
<
GetUserMediaTask
>
task
=
TakeGetUserMediaTask
(
key
)
;
if
(
!
task
)
{
return
NS_OK
;
}
if
(
sHasShutdown
)
{
task
-
>
Denied
(
MediaMgrError
:
:
Name
:
:
AbortError
"
In
shutdown
"
_ns
)
;
return
NS_OK
;
}
if
(
NS_WARN_IF
(
!
aSubject
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIArray
>
array
(
do_QueryInterface
(
aSubject
)
)
;
MOZ_ASSERT
(
array
)
;
uint32_t
len
=
0
;
array
-
>
GetLength
(
&
len
)
;
RefPtr
<
MediaDevice
>
audioInput
;
RefPtr
<
MediaDevice
>
videoInput
;
RefPtr
<
MediaDevice
>
audioOutput
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
nsCOMPtr
<
nsIMediaDevice
>
device
;
array
-
>
QueryElementAt
(
i
NS_GET_IID
(
nsIMediaDevice
)
getter_AddRefs
(
device
)
)
;
MOZ_ASSERT
(
device
)
;
if
(
!
device
)
{
continue
;
}
MediaDevice
*
dev
=
static_cast
<
MediaDevice
*
>
(
device
.
get
(
)
)
;
switch
(
dev
-
>
mKind
)
{
case
MediaDeviceKind
:
:
Videoinput
:
if
(
!
videoInput
)
{
videoInput
=
dev
;
}
break
;
case
MediaDeviceKind
:
:
Audioinput
:
if
(
!
audioInput
)
{
audioInput
=
dev
;
}
break
;
case
MediaDeviceKind
:
:
Audiooutput
:
if
(
!
audioOutput
)
{
audioOutput
=
dev
;
}
break
;
default
:
MOZ_CRASH
(
"
Unexpected
device
kind
"
)
;
}
}
if
(
GetUserMediaStreamTask
*
streamTask
=
task
-
>
AsGetUserMediaStreamTask
(
)
)
{
bool
needVideo
=
IsOn
(
streamTask
-
>
GetConstraints
(
)
.
mVideo
)
;
bool
needAudio
=
IsOn
(
streamTask
-
>
GetConstraints
(
)
.
mAudio
)
;
MOZ_ASSERT
(
needVideo
|
|
needAudio
)
;
if
(
(
needVideo
&
&
!
videoInput
)
|
|
(
needAudio
&
&
!
audioInput
)
)
{
task
-
>
Denied
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
;
return
NS_OK
;
}
streamTask
-
>
Allowed
(
std
:
:
move
(
audioInput
)
std
:
:
move
(
videoInput
)
)
;
return
NS_OK
;
}
if
(
SelectAudioOutputTask
*
outputTask
=
task
-
>
AsSelectAudioOutputTask
(
)
)
{
if
(
!
audioOutput
)
{
task
-
>
Denied
(
MediaMgrError
:
:
Name
:
:
NotAllowedError
)
;
return
NS_OK
;
}
outputTask
-
>
Allowed
(
std
:
:
move
(
audioOutput
)
)
;
return
NS_OK
;
}
NS_WARNING
(
"
Unknown
task
type
in
getUserMedia
"
)
;
return
NS_ERROR_FAILURE
;
}
else
if
(
IsGUMResponseNoAccess
(
aTopic
gumNoAccessError
)
)
{
nsString
key
(
aData
)
;
RefPtr
<
GetUserMediaTask
>
task
=
TakeGetUserMediaTask
(
key
)
;
if
(
task
)
{
task
-
>
Denied
(
gumNoAccessError
)
;
SendPendingGUMRequest
(
)
;
}
return
NS_OK
;
}
else
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
revoke
"
)
)
{
uint64_t
windowID
;
if
(
ParseScreenColonWindowID
(
aData
&
windowID
)
=
=
MediaSourceEnum
:
:
Screen
)
{
LOG
(
"
Revoking
ScreenCapture
access
for
window
%
"
PRIu64
windowID
)
;
StopScreensharing
(
windowID
)
;
}
else
{
LOG
(
"
Revoking
MediaCapture
access
for
window
%
"
PRIu64
windowID
)
;
OnNavigation
(
windowID
)
;
}
return
NS_OK
;
}
else
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
muteVideo
"
)
|
|
!
strcmp
(
aTopic
"
getUserMedia
:
unmuteVideo
"
)
)
{
OnCameraMute
(
!
strcmp
(
aTopic
"
getUserMedia
:
muteVideo
"
)
)
;
return
NS_OK
;
}
else
if
(
!
strcmp
(
aTopic
"
getUserMedia
:
muteAudio
"
)
|
|
!
strcmp
(
aTopic
"
getUserMedia
:
unmuteAudio
"
)
)
{
OnMicrophoneMute
(
!
strcmp
(
aTopic
"
getUserMedia
:
muteAudio
"
)
)
;
return
NS_OK
;
}
else
if
(
(
!
strcmp
(
aTopic
"
application
-
background
"
)
|
|
!
strcmp
(
aTopic
"
application
-
foreground
"
)
)
&
&
StaticPrefs
:
:
media_getusermedia_camera_background_mute_enabled
(
)
)
{
OnCameraMute
(
!
strcmp
(
aTopic
"
application
-
background
"
)
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
MediaManager
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
size_t
amount
=
0
;
amount
+
=
mActiveWindows
.
ShallowSizeOfExcludingThis
(
MallocSizeOf
)
;
for
(
const
GetUserMediaWindowListener
*
listener
:
mActiveWindows
.
Values
(
)
)
{
amount
+
=
listener
-
>
SizeOfIncludingThis
(
MallocSizeOf
)
;
}
amount
+
=
mActiveCallbacks
.
ShallowSizeOfExcludingThis
(
MallocSizeOf
)
;
for
(
const
GetUserMediaTask
*
task
:
mActiveCallbacks
.
Values
(
)
)
{
amount
+
=
task
-
>
SizeOfIncludingThis
(
MallocSizeOf
)
;
}
amount
+
=
mCallIds
.
ShallowSizeOfExcludingThis
(
MallocSizeOf
)
;
for
(
const
auto
&
array
:
mCallIds
.
Values
(
)
)
{
amount
+
=
array
-
>
ShallowSizeOfExcludingThis
(
MallocSizeOf
)
;
for
(
const
nsString
&
callID
:
*
array
)
{
amount
+
=
callID
.
SizeOfExcludingThisEvenIfShared
(
MallocSizeOf
)
;
}
}
amount
+
=
mPendingGUMRequest
.
ShallowSizeOfExcludingThis
(
MallocSizeOf
)
;
amount
+
=
mDeviceIDs
.
shallowSizeOfExcludingThis
(
MallocSizeOf
)
;
for
(
auto
iter
=
mDeviceIDs
.
iter
(
)
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
const
nsString
deviceID
=
iter
.
get
(
)
;
amount
+
=
deviceID
.
SizeOfExcludingThisEvenIfShared
(
MallocSizeOf
)
;
}
MOZ_COLLECT_REPORT
(
"
explicit
/
media
/
media
-
manager
-
aggregates
"
KIND_HEAP
UNITS_BYTES
amount
"
Memory
used
by
MediaManager
variable
length
members
.
"
)
;
return
NS_OK
;
}
nsresult
MediaManager
:
:
GetActiveMediaCaptureWindows
(
nsIArray
*
*
aArray
)
{
MOZ_ASSERT
(
aArray
)
;
nsCOMPtr
<
nsIMutableArray
>
array
=
nsArray
:
:
Create
(
)
;
for
(
const
auto
&
entry
:
mActiveWindows
)
{
const
uint64_t
&
id
=
entry
.
GetKey
(
)
;
RefPtr
<
GetUserMediaWindowListener
>
winListener
=
entry
.
GetData
(
)
;
if
(
!
winListener
)
{
continue
;
}
auto
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
id
)
;
MOZ_ASSERT
(
window
)
;
if
(
!
window
)
{
continue
;
}
if
(
winListener
-
>
CapturingVideo
(
)
|
|
winListener
-
>
CapturingAudio
(
)
)
{
array
-
>
AppendElement
(
ToSupports
(
window
)
)
;
}
}
array
.
forget
(
aArray
)
;
return
NS_OK
;
}
struct
CaptureWindowStateData
{
uint16_t
*
mCamera
;
uint16_t
*
mMicrophone
;
uint16_t
*
mScreenShare
;
uint16_t
*
mWindowShare
;
uint16_t
*
mAppShare
;
uint16_t
*
mBrowserShare
;
}
;
NS_IMETHODIMP
MediaManager
:
:
MediaCaptureWindowState
(
nsIDOMWindow
*
aCapturedWindow
uint16_t
*
aCamera
uint16_t
*
aMicrophone
uint16_t
*
aScreen
uint16_t
*
aWindow
uint16_t
*
aBrowser
nsTArray
<
RefPtr
<
nsIMediaDevice
>
>
&
aDevices
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CaptureState
camera
=
CaptureState
:
:
Off
;
CaptureState
microphone
=
CaptureState
:
:
Off
;
CaptureState
screen
=
CaptureState
:
:
Off
;
CaptureState
window
=
CaptureState
:
:
Off
;
CaptureState
browser
=
CaptureState
:
:
Off
;
auto
devices
=
MakeRefPtr
<
MediaDeviceSetRefCnt
>
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
piWin
=
do_QueryInterface
(
aCapturedWindow
)
;
if
(
piWin
)
{
if
(
RefPtr
<
GetUserMediaWindowListener
>
listener
=
GetWindowListener
(
piWin
-
>
WindowID
(
)
)
)
{
camera
=
listener
-
>
CapturingSource
(
MediaSourceEnum
:
:
Camera
)
;
microphone
=
listener
-
>
CapturingSource
(
MediaSourceEnum
:
:
Microphone
)
;
screen
=
listener
-
>
CapturingSource
(
MediaSourceEnum
:
:
Screen
)
;
window
=
listener
-
>
CapturingSource
(
MediaSourceEnum
:
:
Window
)
;
browser
=
listener
-
>
CapturingSource
(
MediaSourceEnum
:
:
Browser
)
;
listener
-
>
GetDevices
(
devices
)
;
}
}
*
aCamera
=
FromCaptureState
(
camera
)
;
*
aMicrophone
=
FromCaptureState
(
microphone
)
;
*
aScreen
=
FromCaptureState
(
screen
)
;
*
aWindow
=
FromCaptureState
(
window
)
;
*
aBrowser
=
FromCaptureState
(
browser
)
;
for
(
auto
&
device
:
*
devices
)
{
aDevices
.
AppendElement
(
device
)
;
}
LOG
(
"
%
s
:
window
%
"
PRIu64
"
capturing
%
s
%
s
%
s
%
s
%
s
"
__FUNCTION__
piWin
?
piWin
-
>
WindowID
(
)
:
-
1
*
aCamera
=
=
nsIMediaManagerService
:
:
STATE_CAPTURE_ENABLED
?
"
camera
(
enabled
)
"
:
(
*
aCamera
=
=
nsIMediaManagerService
:
:
STATE_CAPTURE_DISABLED
?
"
camera
(
disabled
)
"
:
"
"
)
*
aMicrophone
=
=
nsIMediaManagerService
:
:
STATE_CAPTURE_ENABLED
?
"
microphone
(
enabled
)
"
:
(
*
aMicrophone
=
=
nsIMediaManagerService
:
:
STATE_CAPTURE_DISABLED
?
"
microphone
(
disabled
)
"
:
"
"
)
*
aScreen
?
"
screenshare
"
:
"
"
*
aWindow
?
"
windowshare
"
:
"
"
*
aBrowser
?
"
browsershare
"
:
"
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MediaManager
:
:
SanitizeDeviceIds
(
int64_t
aSinceWhen
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
%
s
:
sinceWhen
=
%
"
PRId64
__FUNCTION__
aSinceWhen
)
;
media
:
:
SanitizeOriginKeys
(
aSinceWhen
false
)
;
return
NS_OK
;
}
void
MediaManager
:
:
StopScreensharing
(
uint64_t
aWindowID
)
{
if
(
RefPtr
<
GetUserMediaWindowListener
>
listener
=
GetWindowListener
(
aWindowID
)
)
{
listener
-
>
StopSharing
(
)
;
}
}
bool
MediaManager
:
:
IsActivelyCapturingOrHasAPermission
(
uint64_t
aWindowId
)
{
nsCOMPtr
<
nsIArray
>
array
;
GetActiveMediaCaptureWindows
(
getter_AddRefs
(
array
)
)
;
uint32_t
len
;
array
-
>
GetLength
(
&
len
)
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
win
;
array
-
>
QueryElementAt
(
i
NS_GET_IID
(
nsPIDOMWindowInner
)
getter_AddRefs
(
win
)
)
;
if
(
win
&
&
win
-
>
WindowID
(
)
=
=
aWindowId
)
{
return
true
;
}
}
auto
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
aWindowId
)
;
if
(
NS_WARN_IF
(
!
window
)
|
|
NS_WARN_IF
(
!
window
-
>
GetPrincipal
(
)
)
)
{
return
false
;
}
Document
*
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
false
;
}
nsIPrincipal
*
principal
=
window
-
>
GetPrincipal
(
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
false
;
}
nsresult
rv
;
RefPtr
<
PermissionDelegateHandler
>
permDelegate
=
doc
-
>
GetPermissionDelegateHandler
(
)
;
if
(
NS_WARN_IF
(
!
permDelegate
)
)
{
return
false
;
}
uint32_t
audio
=
nsIPermissionManager
:
:
UNKNOWN_ACTION
;
uint32_t
video
=
nsIPermissionManager
:
:
UNKNOWN_ACTION
;
{
rv
=
permDelegate
-
>
GetPermission
(
"
microphone
"
_ns
&
audio
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
rv
=
permDelegate
-
>
GetPermission
(
"
camera
"
_ns
&
video
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
}
return
audio
=
=
nsIPermissionManager
:
:
ALLOW_ACTION
|
|
video
=
=
nsIPermissionManager
:
:
ALLOW_ACTION
;
}
DeviceListener
:
:
DeviceListener
(
)
:
mStopped
(
false
)
mMainThreadCheck
(
nullptr
)
mPrincipalHandle
(
PRINCIPAL_HANDLE_NONE
)
mWindowListener
(
nullptr
)
{
}
void
DeviceListener
:
:
Register
(
GetUserMediaWindowListener
*
aListener
)
{
LOG
(
"
DeviceListener
%
p
registering
with
window
listener
%
p
"
this
aListener
)
;
MOZ_ASSERT
(
aListener
"
No
listener
"
)
;
MOZ_ASSERT
(
!
mWindowListener
"
Already
registered
"
)
;
MOZ_ASSERT
(
!
Activated
(
)
"
Already
activated
"
)
;
mPrincipalHandle
=
aListener
-
>
GetPrincipalHandle
(
)
;
mWindowListener
=
aListener
;
}
void
DeviceListener
:
:
Activate
(
RefPtr
<
MediaDevice
>
aDevice
RefPtr
<
LocalTrackSource
>
aTrackSource
bool
aStartMuted
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
LOG
(
"
DeviceListener
%
p
activating
%
s
device
%
p
"
this
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
aDevice
-
>
mKind
)
)
.
get
(
)
aDevice
.
get
(
)
)
;
MOZ_ASSERT
(
!
mStopped
"
Cannot
activate
stopped
device
listener
"
)
;
MOZ_ASSERT
(
!
Activated
(
)
"
Already
activated
"
)
;
mMainThreadCheck
=
PR_GetCurrentThread
(
)
;
bool
offWhileDisabled
=
(
aDevice
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Microphone
&
&
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
microphone
.
off_while_disabled
.
enabled
"
true
)
)
|
|
(
aDevice
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Camera
&
&
Preferences
:
:
GetBool
(
"
media
.
getusermedia
.
camera
.
off_while_disabled
.
enabled
"
true
)
)
;
mDeviceState
=
MakeUnique
<
DeviceState
>
(
std
:
:
move
(
aDevice
)
std
:
:
move
(
aTrackSource
)
offWhileDisabled
)
;
mDeviceState
-
>
mDeviceMuted
=
aStartMuted
;
if
(
aStartMuted
)
{
mDeviceState
-
>
mTrackSource
-
>
Mute
(
)
;
}
}
RefPtr
<
DeviceListener
:
:
DeviceListenerPromise
>
DeviceListener
:
:
InitializeAsync
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mStopped
)
;
return
MediaManager
:
:
Dispatch
<
DeviceListenerPromise
>
(
__func__
[
principal
=
GetPrincipalHandle
(
)
device
=
mDeviceState
-
>
mDevice
track
=
mDeviceState
-
>
mTrackSource
-
>
mTrack
deviceMuted
=
mDeviceState
-
>
mDeviceMuted
]
(
MozPromiseHolder
<
DeviceListenerPromise
>
&
aHolder
)
{
device
-
>
SetTrack
(
track
principal
)
;
nsresult
rv
=
deviceMuted
?
NS_OK
:
device
-
>
Start
(
)
;
if
(
device
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
)
{
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
{
PR_Sleep
(
200
)
;
rv
=
device
-
>
Start
(
)
;
}
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
{
nsCString
log
;
log
.
AssignLiteral
(
"
Concurrent
mic
process
limit
.
"
)
;
aHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
NotReadableError
std
:
:
move
(
log
)
)
__func__
)
;
return
;
}
}
if
(
NS_FAILED
(
rv
)
)
{
nsCString
log
;
log
.
AppendPrintf
(
"
Starting
%
s
failed
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
device
-
>
mKind
)
)
.
get
(
)
)
;
aHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
AbortError
std
:
:
move
(
log
)
)
__func__
)
;
return
;
}
LOG
(
"
started
%
s
device
%
p
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
device
-
>
mKind
)
)
.
get
(
)
device
.
get
(
)
)
;
aHolder
.
Resolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
=
RefPtr
<
DeviceListener
>
(
this
)
this
]
(
)
{
if
(
mStopped
)
{
return
DeviceListenerPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mTrackEnabled
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mDeviceEnabled
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mStopped
)
;
mDeviceState
-
>
mDeviceEnabled
=
true
;
mDeviceState
-
>
mTrackEnabled
=
true
;
mDeviceState
-
>
mTrackEnabledTime
=
TimeStamp
:
:
Now
(
)
;
return
DeviceListenerPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
[
self
=
RefPtr
<
DeviceListener
>
(
this
)
this
]
(
RefPtr
<
MediaMgrError
>
&
&
aResult
)
{
if
(
mStopped
)
{
return
DeviceListenerPromise
:
:
CreateAndReject
(
std
:
:
move
(
aResult
)
__func__
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mTrackEnabled
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mDeviceEnabled
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mDeviceState
-
>
mStopped
)
;
Stop
(
)
;
return
DeviceListenerPromise
:
:
CreateAndReject
(
std
:
:
move
(
aResult
)
__func__
)
;
}
)
;
}
void
DeviceListener
:
:
Stop
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
if
(
mStopped
)
{
return
;
}
mStopped
=
true
;
LOG
(
"
DeviceListener
%
p
stopping
"
this
)
;
if
(
mDeviceState
)
{
mDeviceState
-
>
mDisableTimer
-
>
Cancel
(
)
;
if
(
mDeviceState
-
>
mStopped
)
{
return
;
}
mDeviceState
-
>
mStopped
=
true
;
mDeviceState
-
>
mTrackSource
-
>
Stop
(
)
;
MediaManager
:
:
Dispatch
(
NewTaskFrom
(
[
device
=
mDeviceState
-
>
mDevice
]
(
)
{
device
-
>
Stop
(
)
;
device
-
>
Deallocate
(
)
;
}
)
)
;
mWindowListener
-
>
ChromeAffectingStateChanged
(
)
;
}
RefPtr
<
GetUserMediaWindowListener
>
windowListener
=
mWindowListener
;
mWindowListener
=
nullptr
;
windowListener
-
>
Remove
(
this
)
;
}
void
DeviceListener
:
:
GetSettings
(
MediaTrackSettings
&
aOutSettings
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
MediaDevice
*
device
=
GetDevice
(
)
;
device
-
>
GetSettings
(
aOutSettings
)
;
MediaSourceEnum
mediaSource
=
device
-
>
GetMediaSource
(
)
;
if
(
mediaSource
=
=
MediaSourceEnum
:
:
Camera
|
|
mediaSource
=
=
MediaSourceEnum
:
:
Microphone
)
{
aOutSettings
.
mDeviceId
.
Construct
(
device
-
>
mID
)
;
aOutSettings
.
mGroupId
.
Construct
(
device
-
>
mGroupID
)
;
}
}
auto
DeviceListener
:
:
UpdateDevice
(
bool
aOn
)
-
>
RefPtr
<
DeviceOperationPromise
>
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
DeviceListener
>
self
=
this
;
DeviceState
&
state
=
*
mDeviceState
;
return
MediaManager
:
:
Dispatch
<
DeviceOperationPromise
>
(
__func__
[
self
device
=
state
.
mDevice
aOn
]
(
MozPromiseHolder
<
DeviceOperationPromise
>
&
h
)
{
LOG
(
"
Turning
%
s
device
(
%
s
)
"
aOn
?
"
on
"
:
"
off
"
NS_ConvertUTF16toUTF8
(
device
-
>
mName
)
.
get
(
)
)
;
h
.
Resolve
(
aOn
?
device
-
>
Start
(
)
:
device
-
>
Stop
(
)
__func__
)
;
}
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
this
&
state
aOn
]
(
nsresult
aResult
)
{
if
(
state
.
mStopped
)
{
return
DeviceOperationPromise
:
:
CreateAndResolve
(
aResult
__func__
)
;
}
LOG
(
"
DeviceListener
%
p
turning
%
s
%
s
input
device
%
s
"
this
aOn
?
"
on
"
:
"
off
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
NS_SUCCEEDED
(
aResult
)
?
"
succeeded
"
:
"
failed
"
)
;
if
(
NS_FAILED
(
aResult
)
&
&
aResult
!
=
NS_ERROR_ABORT
)
{
if
(
aOn
)
{
Stop
(
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
The
device
should
be
stoppable
"
)
;
}
}
return
DeviceOperationPromise
:
:
CreateAndResolve
(
aResult
__func__
)
;
}
[
]
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
and
unhandled
reject
"
)
;
return
DeviceOperationPromise
:
:
CreateAndReject
(
false
__func__
)
;
}
)
;
}
void
DeviceListener
:
:
SetDeviceEnabled
(
bool
aEnable
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
MOZ_ASSERT
(
Activated
(
)
"
No
device
to
set
enabled
state
for
"
)
;
DeviceState
&
state
=
*
mDeviceState
;
LOG
(
"
DeviceListener
%
p
%
s
%
s
device
"
this
aEnable
?
"
enabling
"
:
"
disabling
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
)
;
state
.
mTrackEnabled
=
aEnable
;
if
(
state
.
mStopped
)
{
return
;
}
if
(
state
.
mOperationInProgress
)
{
state
.
mDisableTimer
-
>
Cancel
(
)
;
return
;
}
if
(
state
.
mDeviceEnabled
=
=
aEnable
)
{
return
;
}
state
.
mOperationInProgress
=
true
;
RefPtr
<
MediaTimerPromise
>
timerPromise
;
if
(
aEnable
)
{
timerPromise
=
MediaTimerPromise
:
:
CreateAndResolve
(
true
__func__
)
;
state
.
mTrackEnabledTime
=
TimeStamp
:
:
Now
(
)
;
}
else
{
const
TimeDuration
maxDelay
=
TimeDuration
:
:
FromMilliseconds
(
Preferences
:
:
GetUint
(
GetDevice
(
)
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
?
"
media
.
getusermedia
.
microphone
.
off_while_disabled
.
delay_ms
"
:
"
media
.
getusermedia
.
camera
.
off_while_disabled
.
delay_ms
"
3000
)
)
;
const
TimeDuration
durationEnabled
=
TimeStamp
:
:
Now
(
)
-
state
.
mTrackEnabledTime
;
const
TimeDuration
delay
=
TimeDuration
:
:
Max
(
TimeDuration
:
:
FromMilliseconds
(
0
)
maxDelay
-
durationEnabled
)
;
timerPromise
=
state
.
mDisableTimer
-
>
WaitFor
(
delay
__func__
)
;
}
RefPtr
<
DeviceListener
>
self
=
this
;
timerPromise
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
this
&
state
aEnable
]
(
)
mutable
{
MOZ_ASSERT
(
state
.
mDeviceEnabled
!
=
aEnable
"
Device
operation
hasn
'
t
started
"
)
;
MOZ_ASSERT
(
state
.
mOperationInProgress
"
It
'
s
our
responsibility
to
reset
the
inProgress
state
"
)
;
LOG
(
"
DeviceListener
%
p
%
s
%
s
device
-
starting
device
operation
"
this
aEnable
?
"
enabling
"
:
"
disabling
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
)
;
if
(
state
.
mStopped
)
{
return
DeviceOperationPromise
:
:
CreateAndResolve
(
NS_ERROR_ABORT
__func__
)
;
}
state
.
mDeviceEnabled
=
aEnable
;
if
(
mWindowListener
)
{
mWindowListener
-
>
ChromeAffectingStateChanged
(
)
;
}
if
(
!
state
.
mOffWhileDisabled
|
|
state
.
mDeviceMuted
)
{
return
DeviceOperationPromise
:
:
CreateAndResolve
(
NS_OK
__func__
)
;
}
return
UpdateDevice
(
aEnable
)
;
}
[
]
(
)
{
return
DeviceOperationPromise
:
:
CreateAndResolve
(
NS_ERROR_ABORT
__func__
)
;
}
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
this
&
state
aEnable
]
(
nsresult
aResult
)
mutable
{
MOZ_ASSERT_IF
(
aResult
!
=
NS_ERROR_ABORT
state
.
mDeviceEnabled
=
=
aEnable
)
;
MOZ_ASSERT
(
state
.
mOperationInProgress
)
;
state
.
mOperationInProgress
=
false
;
if
(
state
.
mStopped
)
{
return
;
}
if
(
NS_FAILED
(
aResult
)
&
&
aResult
!
=
NS_ERROR_ABORT
&
&
!
aEnable
)
{
state
.
mOffWhileDisabled
=
false
;
return
;
}
if
(
state
.
mTrackEnabled
!
=
state
.
mDeviceEnabled
)
{
SetDeviceEnabled
(
state
.
mTrackEnabled
)
;
}
}
[
]
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
and
unhandled
reject
"
)
;
}
)
;
}
void
DeviceListener
:
:
SetDeviceMuted
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
MOZ_ASSERT
(
Activated
(
)
"
No
device
to
set
muted
state
for
"
)
;
DeviceState
&
state
=
*
mDeviceState
;
LOG
(
"
DeviceListener
%
p
%
s
%
s
device
"
this
aMute
?
"
muting
"
:
"
unmuting
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
)
;
if
(
state
.
mStopped
)
{
return
;
}
if
(
state
.
mDeviceMuted
=
=
aMute
)
{
return
;
}
LOG
(
"
DeviceListener
%
p
%
s
%
s
device
-
starting
device
operation
"
this
aMute
?
"
muting
"
:
"
unmuting
"
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
)
;
state
.
mDeviceMuted
=
aMute
;
if
(
mWindowListener
)
{
mWindowListener
-
>
ChromeAffectingStateChanged
(
)
;
}
if
(
aMute
)
{
state
.
mTrackSource
-
>
Mute
(
)
;
}
else
{
state
.
mTrackSource
-
>
Unmute
(
)
;
}
if
(
!
state
.
mOffWhileDisabled
|
|
!
state
.
mDeviceEnabled
)
{
return
;
}
UpdateDevice
(
!
aMute
)
;
}
void
DeviceListener
:
:
MuteOrUnmuteCamera
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStopped
)
{
return
;
}
MOZ_RELEASE_ASSERT
(
mWindowListener
)
;
LOG
(
"
DeviceListener
%
p
MuteOrUnmuteCamera
:
%
s
"
this
aMute
?
"
mute
"
:
"
unmute
"
)
;
if
(
GetDevice
(
)
&
&
(
GetDevice
(
)
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Camera
)
)
{
SetDeviceMuted
(
aMute
)
;
}
}
void
DeviceListener
:
:
MuteOrUnmuteMicrophone
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStopped
)
{
return
;
}
MOZ_RELEASE_ASSERT
(
mWindowListener
)
;
LOG
(
"
DeviceListener
%
p
MuteOrUnmuteMicrophone
:
%
s
"
this
aMute
?
"
mute
"
:
"
unmute
"
)
;
if
(
GetDevice
(
)
&
&
(
GetDevice
(
)
-
>
GetMediaSource
(
)
=
=
MediaSourceEnum
:
:
Microphone
)
)
{
SetDeviceMuted
(
aMute
)
;
}
}
bool
DeviceListener
:
:
CapturingVideo
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
Activated
(
)
&
&
mDeviceState
&
&
!
mDeviceState
-
>
mStopped
&
&
MediaEngineSource
:
:
IsVideo
(
GetDevice
(
)
-
>
GetMediaSource
(
)
)
&
&
(
!
GetDevice
(
)
-
>
mIsFake
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
;
}
bool
DeviceListener
:
:
CapturingAudio
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
Activated
(
)
&
&
mDeviceState
&
&
!
mDeviceState
-
>
mStopped
&
&
MediaEngineSource
:
:
IsAudio
(
GetDevice
(
)
-
>
GetMediaSource
(
)
)
&
&
(
!
GetDevice
(
)
-
>
mIsFake
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
;
}
CaptureState
DeviceListener
:
:
CapturingSource
(
MediaSourceEnum
aSource
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDevice
(
)
-
>
GetMediaSource
(
)
!
=
aSource
)
{
return
CaptureState
:
:
Off
;
}
if
(
mDeviceState
-
>
mStopped
)
{
return
CaptureState
:
:
Off
;
}
if
(
(
aSource
=
=
MediaSourceEnum
:
:
Camera
|
|
aSource
=
=
MediaSourceEnum
:
:
Microphone
)
&
&
GetDevice
(
)
-
>
mSource
-
>
IsFake
(
)
&
&
!
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
{
return
CaptureState
:
:
Off
;
}
if
(
mDeviceState
-
>
mDeviceEnabled
&
&
!
mDeviceState
-
>
mDeviceMuted
)
{
return
CaptureState
:
:
Enabled
;
}
return
CaptureState
:
:
Disabled
;
}
RefPtr
<
DeviceListener
:
:
DeviceListenerPromise
>
DeviceListener
:
:
ApplyConstraints
(
const
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStopped
|
|
mDeviceState
-
>
mStopped
)
{
LOG
(
"
DeviceListener
%
p
%
s
device
applyConstraints
but
device
is
stopped
"
this
nsCString
(
dom
:
:
MediaDeviceKindValues
:
:
GetString
(
GetDevice
(
)
-
>
mKind
)
)
.
get
(
)
)
;
return
DeviceListenerPromise
:
:
CreateAndResolve
(
false
__func__
)
;
}
MediaManager
*
mgr
=
MediaManager
:
:
GetIfExists
(
)
;
if
(
!
mgr
)
{
return
DeviceListenerPromise
:
:
CreateAndResolve
(
false
__func__
)
;
}
return
MediaManager
:
:
Dispatch
<
DeviceListenerPromise
>
(
__func__
[
device
=
mDeviceState
-
>
mDevice
aConstraints
aCallerType
]
(
MozPromiseHolder
<
DeviceListenerPromise
>
&
aHolder
)
mutable
{
MOZ_ASSERT
(
MediaManager
:
:
IsInMediaThread
(
)
)
;
MediaManager
*
mgr
=
MediaManager
:
:
GetIfExists
(
)
;
MOZ_RELEASE_ASSERT
(
mgr
)
;
const
char
*
badConstraint
=
nullptr
;
nsresult
rv
=
device
-
>
Reconfigure
(
aConstraints
mgr
-
>
mPrefs
&
badConstraint
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
rv
=
=
NS_ERROR_INVALID_ARG
)
{
if
(
!
badConstraint
)
{
nsTArray
<
RefPtr
<
MediaDevice
>
>
devices
;
devices
.
AppendElement
(
device
)
;
badConstraint
=
MediaConstraintsHelper
:
:
SelectSettings
(
NormalizedConstraints
(
aConstraints
)
devices
aCallerType
)
;
}
}
else
{
badConstraint
=
"
"
;
LOG
(
"
ApplyConstraints
-
Task
:
Unexpected
fail
%
"
PRIx32
static_cast
<
uint32_t
>
(
rv
)
)
;
}
aHolder
.
Reject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
"
"
NS_ConvertASCIItoUTF16
(
badConstraint
)
)
__func__
)
;
return
;
}
aHolder
.
Resolve
(
false
__func__
)
;
}
)
;
}
PrincipalHandle
DeviceListener
:
:
GetPrincipalHandle
(
)
const
{
return
mPrincipalHandle
;
}
void
GetUserMediaWindowListener
:
:
StopSharing
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
for
(
auto
&
l
:
mActiveListeners
.
Clone
(
)
)
{
MediaSourceEnum
source
=
l
-
>
GetDevice
(
)
-
>
GetMediaSource
(
)
;
if
(
source
=
=
MediaSourceEnum
:
:
Screen
|
|
source
=
=
MediaSourceEnum
:
:
Window
|
|
source
=
=
MediaSourceEnum
:
:
AudioCapture
)
{
l
-
>
Stop
(
)
;
}
}
}
void
GetUserMediaWindowListener
:
:
StopRawID
(
const
nsString
&
removedDeviceID
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
for
(
auto
&
l
:
mActiveListeners
.
Clone
(
)
)
{
nsString
id
;
l
-
>
GetDevice
(
)
-
>
GetRawId
(
id
)
;
if
(
removedDeviceID
.
Equals
(
id
)
)
{
l
-
>
Stop
(
)
;
}
}
}
void
GetUserMediaWindowListener
:
:
MuteOrUnmuteCameras
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
if
(
mCamerasAreMuted
=
=
aMute
)
{
return
;
}
mCamerasAreMuted
=
aMute
;
for
(
auto
&
l
:
mActiveListeners
)
{
if
(
l
-
>
GetDevice
(
)
-
>
mKind
=
=
MediaDeviceKind
:
:
Videoinput
)
{
l
-
>
MuteOrUnmuteCamera
(
aMute
)
;
}
}
}
void
GetUserMediaWindowListener
:
:
MuteOrUnmuteMicrophones
(
bool
aMute
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
if
(
mMicrophonesAreMuted
=
=
aMute
)
{
return
;
}
mMicrophonesAreMuted
=
aMute
;
for
(
auto
&
l
:
mActiveListeners
)
{
if
(
l
-
>
GetDevice
(
)
-
>
mKind
=
=
MediaDeviceKind
:
:
Audioinput
)
{
l
-
>
MuteOrUnmuteMicrophone
(
aMute
)
;
}
}
}
void
GetUserMediaWindowListener
:
:
ChromeAffectingStateChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mChromeNotificationTaskPosted
)
{
return
;
}
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
(
"
GetUserMediaWindowListener
:
:
NotifyChrome
"
this
&
GetUserMediaWindowListener
:
:
NotifyChrome
)
;
nsContentUtils
:
:
RunInStableState
(
runnable
.
forget
(
)
)
;
mChromeNotificationTaskPosted
=
true
;
}
void
GetUserMediaWindowListener
:
:
NotifyChrome
(
)
{
MOZ_ASSERT
(
mChromeNotificationTaskPosted
)
;
mChromeNotificationTaskPosted
=
false
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
MediaManager
:
:
NotifyChrome
"
[
windowID
=
mWindowID
]
(
)
{
auto
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
windowID
)
;
if
(
!
window
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
have
window
"
)
;
return
;
}
nsresult
rv
=
MediaManager
:
:
NotifyRecordingStatusChange
(
window
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
be
able
to
notify
chrome
"
)
;
return
;
}
}
)
)
;
}
#
undef
LOG
}
