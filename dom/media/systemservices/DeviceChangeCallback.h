#
ifndef
mozilla_DeviceChangeCallback_h
#
define
mozilla_DeviceChangeCallback_h
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
DeviceChangeCallback
{
public
:
virtual
~
DeviceChangeCallback
(
)
=
default
;
virtual
void
OnDeviceChange
(
)
=
0
;
}
;
class
DeviceChangeNotifier
{
public
:
DeviceChangeNotifier
(
)
:
mCallbackMutex
(
"
mozilla
:
:
DeviceChangeCallback
:
:
mCallbackMutex
"
)
{
}
void
NotifyDeviceChange
(
)
{
MutexAutoLock
lock
(
mCallbackMutex
)
;
for
(
DeviceChangeCallback
*
observer
:
mDeviceChangeCallbackList
)
{
observer
-
>
OnDeviceChange
(
)
;
}
}
virtual
int
AddDeviceChangeCallback
(
DeviceChangeCallback
*
aCallback
)
{
MutexAutoLock
lock
(
mCallbackMutex
)
;
if
(
mDeviceChangeCallbackList
.
IndexOf
(
aCallback
)
=
=
mDeviceChangeCallbackList
.
NoIndex
)
mDeviceChangeCallbackList
.
AppendElement
(
aCallback
)
;
return
0
;
}
int
RemoveDeviceChangeCallback
(
DeviceChangeCallback
*
aCallback
)
{
MutexAutoLock
lock
(
mCallbackMutex
)
;
return
RemoveDeviceChangeCallbackLocked
(
aCallback
)
;
}
int
RemoveDeviceChangeCallbackLocked
(
DeviceChangeCallback
*
aCallback
)
{
mCallbackMutex
.
AssertCurrentThreadOwns
(
)
;
if
(
mDeviceChangeCallbackList
.
IndexOf
(
aCallback
)
!
=
mDeviceChangeCallbackList
.
NoIndex
)
mDeviceChangeCallbackList
.
RemoveElement
(
aCallback
)
;
return
0
;
}
virtual
~
DeviceChangeNotifier
(
)
=
default
;
protected
:
nsTArray
<
DeviceChangeCallback
*
>
mDeviceChangeCallbackList
;
Mutex
mCallbackMutex
;
}
;
}
#
endif
