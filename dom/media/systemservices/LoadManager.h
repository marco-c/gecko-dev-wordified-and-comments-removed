#
ifndef
_LOADMANAGER_H_
#
define
_LOADMANAGER_H_
#
include
"
LoadMonitor
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_base
.
h
"
extern
mozilla
:
:
LazyLogModule
gLoadManagerLog
;
namespace
mozilla
{
class
LoadManagerSingleton
:
public
LoadNotificationCallback
public
webrtc
:
:
CPULoadStateCallbackInvoker
public
webrtc
:
:
CpuOveruseObserver
public
nsIObserver
{
public
:
static
LoadManagerSingleton
*
Get
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
void
LoadChanged
(
float
aSystemLoad
float
aProcessLoad
)
override
;
void
OveruseDetected
(
)
override
;
void
NormalUsage
(
)
override
;
void
AddObserver
(
webrtc
:
:
CPULoadStateObserver
*
aObserver
)
override
;
void
RemoveObserver
(
webrtc
:
:
CPULoadStateObserver
*
aObserver
)
override
;
private
:
LoadManagerSingleton
(
int
aLoadMeasurementInterval
int
aAveragingMeasurements
float
aHighLoadThreshold
float
aLowLoadThreshold
)
;
~
LoadManagerSingleton
(
)
;
void
LoadHasChanged
(
webrtc
:
:
CPULoadState
aNewState
)
;
RefPtr
<
LoadMonitor
>
mLoadMonitor
;
Mutex
mLock
;
nsTArray
<
webrtc
:
:
CPULoadStateObserver
*
>
mObservers
;
webrtc
:
:
CPULoadState
mCurrentState
;
TimeStamp
mLastStateChange
;
float
mTimeInState
[
static_cast
<
int
>
(
webrtc
:
:
kLoadLast
)
]
;
bool
mOveruseActive
;
float
mLoadSum
;
int
mLoadSumMeasurements
;
int
mLoadMeasurementInterval
;
int
mAveragingMeasurements
;
float
mHighLoadThreshold
;
float
mLowLoadThreshold
;
static
StaticRefPtr
<
LoadManagerSingleton
>
sSingleton
;
}
;
class
LoadManager
final
:
public
webrtc
:
:
CPULoadStateCallbackInvoker
public
webrtc
:
:
CpuOveruseObserver
{
public
:
explicit
LoadManager
(
LoadManagerSingleton
*
aManager
)
:
mManager
(
aManager
)
{
}
~
LoadManager
(
)
{
}
void
AddObserver
(
webrtc
:
:
CPULoadStateObserver
*
aObserver
)
override
{
mManager
-
>
AddObserver
(
aObserver
)
;
}
void
RemoveObserver
(
webrtc
:
:
CPULoadStateObserver
*
aObserver
)
override
{
mManager
-
>
RemoveObserver
(
aObserver
)
;
}
void
OveruseDetected
(
)
override
{
mManager
-
>
OveruseDetected
(
)
;
}
void
NormalUsage
(
)
override
{
mManager
-
>
NormalUsage
(
)
;
}
private
:
RefPtr
<
LoadManagerSingleton
>
mManager
;
}
;
}
#
endif
