#
ifndef
mozilla_ShmemPool_h
#
define
mozilla_ShmemPool_h
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
class
ShmemPool
;
class
ShmemBuffer
{
public
:
ShmemBuffer
(
)
:
mInitialized
(
false
)
{
}
explicit
ShmemBuffer
(
mozilla
:
:
ipc
:
:
Shmem
aShmem
)
{
mInitialized
=
true
;
mShmem
=
aShmem
;
}
ShmemBuffer
(
ShmemBuffer
&
&
rhs
)
{
mInitialized
=
rhs
.
mInitialized
;
mShmem
=
Move
(
rhs
.
mShmem
)
;
}
ShmemBuffer
&
operator
=
(
ShmemBuffer
&
&
rhs
)
{
MOZ_ASSERT
(
&
rhs
!
=
this
"
self
-
moves
are
prohibited
"
)
;
mInitialized
=
rhs
.
mInitialized
;
mShmem
=
Move
(
rhs
.
mShmem
)
;
return
*
this
;
}
ShmemBuffer
(
const
ShmemBuffer
&
)
=
delete
;
ShmemBuffer
&
operator
=
(
const
ShmemBuffer
&
)
=
delete
;
bool
Valid
(
)
{
return
mInitialized
;
}
char
*
GetBytes
(
)
{
return
mShmem
.
get
<
char
>
(
)
;
}
mozilla
:
:
ipc
:
:
Shmem
&
Get
(
)
{
return
mShmem
;
}
private
:
friend
class
ShmemPool
;
bool
mInitialized
;
mozilla
:
:
ipc
:
:
Shmem
mShmem
;
}
;
class
ShmemPool
{
public
:
explicit
ShmemPool
(
size_t
aPoolSize
)
;
~
ShmemPool
(
)
;
template
<
class
T
>
void
Cleanup
(
T
*
aInstance
)
;
ShmemBuffer
GetIfAvailable
(
size_t
aSize
)
;
template
<
class
T
>
ShmemBuffer
Get
(
T
*
aInstance
size_t
aSize
)
;
void
Put
(
ShmemBuffer
&
&
aShmem
)
;
private
:
Mutex
mMutex
;
size_t
mPoolFree
;
#
ifdef
DEBUG
size_t
mMaxPoolUse
;
#
endif
nsTArray
<
ShmemBuffer
>
mShmemPool
;
}
;
}
#
endif
