#
ifndef
mozilla_VideoEngine_h
#
define
mozilla_VideoEngine_h
#
include
<
functional
>
#
include
<
memory
>
#
include
"
MediaEngine
.
h
"
#
include
"
VideoFrameUtils
.
h
"
#
include
"
modules
/
video_capture
/
video_capture
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
video_engine
/
video_capture_factory
.
h
"
namespace
webrtc
{
class
DesktopCaptureImpl
;
}
namespace
mozilla
:
:
camera
{
enum
class
CaptureDeviceType
{
Camera
Screen
Window
Browser
}
;
struct
CaptureDeviceInfo
{
CaptureDeviceType
type
;
CaptureDeviceInfo
(
)
:
type
(
CaptureDeviceType
:
:
Camera
)
{
}
explicit
CaptureDeviceInfo
(
CaptureDeviceType
t
)
:
type
(
t
)
{
}
const
char
*
TypeName
(
)
const
{
switch
(
type
)
{
case
CaptureDeviceType
:
:
Camera
:
{
return
"
Camera
"
;
}
case
CaptureDeviceType
:
:
Screen
:
{
return
"
Screen
"
;
}
case
CaptureDeviceType
:
:
Window
:
{
return
"
Window
"
;
}
case
CaptureDeviceType
:
:
Browser
:
{
return
"
Browser
"
;
}
}
assert
(
false
)
;
return
"
UNKOWN
-
CaptureDeviceType
!
"
;
}
}
;
class
VideoEngine
{
private
:
virtual
~
VideoEngine
(
)
;
static
const
int64_t
kCacheExpiryPeriodMs
=
2000
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
VideoEngine
)
static
already_AddRefed
<
VideoEngine
>
Create
(
const
CaptureDeviceType
&
aCaptureDeviceType
RefPtr
<
VideoCaptureFactory
>
aVideoCaptureFactory
)
;
#
if
defined
(
ANDROID
)
static
int
SetAndroidObjects
(
)
;
#
endif
int32_t
CreateVideoCapture
(
const
char
*
aDeviceUniqueIdUTF8
)
;
int
ReleaseVideoCapture
(
const
int32_t
aId
)
;
static
void
Delete
(
VideoEngine
*
aEngine
)
{
}
std
:
:
shared_ptr
<
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
>
GetOrCreateVideoCaptureDeviceInfo
(
)
;
void
ClearVideoCaptureDeviceInfo
(
)
;
class
CaptureEntry
{
public
:
CaptureEntry
(
int32_t
aCapnum
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
aCapture
webrtc
:
:
DesktopCaptureImpl
*
aDesktopImpl
)
;
int32_t
Capnum
(
)
const
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
VideoCapture
(
)
;
mozilla
:
:
MediaEventSource
<
void
>
*
CaptureEndedEvent
(
)
;
private
:
int32_t
mCapnum
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
mVideoCaptureModule
;
webrtc
:
:
DesktopCaptureImpl
*
mDesktopImpl
=
nullptr
;
friend
class
VideoEngine
;
}
;
bool
WithEntry
(
const
int32_t
entryCapnum
const
std
:
:
function
<
void
(
CaptureEntry
&
entry
)
>
&
&
fn
)
;
private
:
VideoEngine
(
const
CaptureDeviceType
&
aCaptureDeviceType
RefPtr
<
VideoCaptureFactory
>
aVideoCaptureFactory
)
;
int32_t
mId
;
const
CaptureDeviceInfo
mCaptureDevInfo
;
RefPtr
<
VideoCaptureFactory
>
mVideoCaptureFactory
;
std
:
:
shared_ptr
<
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
>
mDeviceInfo
;
std
:
:
map
<
int32_t
CaptureEntry
>
mCaps
;
std
:
:
map
<
int32_t
int32_t
>
mIdMap
;
webrtc
:
:
Timestamp
mExpiryTime
=
webrtc
:
:
Timestamp
:
:
Micros
(
0
)
;
int32_t
GenerateId
(
)
;
}
;
}
#
endif
