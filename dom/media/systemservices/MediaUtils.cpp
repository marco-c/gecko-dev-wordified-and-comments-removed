#
include
"
MediaUtils
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
Services
.
h
"
namespace
mozilla
:
:
media
{
nsCOMPtr
<
nsIAsyncShutdownClient
>
GetShutdownBarrier
(
)
{
nsCOMPtr
<
nsIAsyncShutdownService
>
svc
=
services
:
:
GetAsyncShutdownService
(
)
;
if
(
!
svc
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIAsyncShutdownClient
>
barrier
;
nsresult
rv
=
svc
-
>
GetProfileBeforeChange
(
getter_AddRefs
(
barrier
)
)
;
if
(
!
barrier
)
{
rv
=
svc
-
>
GetXpcomWillShutdown
(
getter_AddRefs
(
barrier
)
)
;
}
MOZ_RELEASE_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
MOZ_RELEASE_ASSERT
(
barrier
)
;
return
barrier
;
}
nsCOMPtr
<
nsIAsyncShutdownClient
>
MustGetShutdownBarrier
(
)
{
nsCOMPtr
<
nsIAsyncShutdownClient
>
barrier
=
GetShutdownBarrier
(
)
;
MOZ_RELEASE_ASSERT
(
barrier
)
;
return
barrier
;
}
NS_IMPL_ISUPPORTS
(
ShutdownBlocker
nsIAsyncShutdownBlocker
)
namespace
{
class
TicketBlocker
:
public
ShutdownBlocker
{
using
ShutdownMozPromise
=
ShutdownBlockingTicket
:
:
ShutdownMozPromise
;
public
:
explicit
TicketBlocker
(
const
nsAString
&
aName
)
:
ShutdownBlocker
(
[
this
&
aName
]
{
nsString
n
(
aName
)
;
n
.
AppendPrintf
(
"
-
%
p
"
this
)
;
return
n
;
}
(
)
)
mPromise
(
mHolder
.
Ensure
(
__func__
)
)
{
}
NS_IMETHOD
BlockShutdown
(
nsIAsyncShutdownClient
*
aProfileBeforeChange
)
override
{
mHolder
.
Resolve
(
true
__func__
)
;
return
NS_OK
;
}
void
RejectIfExists
(
)
{
mHolder
.
RejectIfExists
(
false
__func__
)
;
}
ShutdownMozPromise
*
ShutdownPromise
(
)
{
return
mPromise
;
}
private
:
~
TicketBlocker
(
)
=
default
;
MozPromiseHolder
<
ShutdownMozPromise
>
mHolder
;
const
RefPtr
<
ShutdownMozPromise
>
mPromise
;
}
;
class
ShutdownBlockingTicketImpl
:
public
ShutdownBlockingTicket
{
private
:
RefPtr
<
TicketBlocker
>
mBlocker
;
public
:
explicit
ShutdownBlockingTicketImpl
(
RefPtr
<
TicketBlocker
>
aBlocker
)
:
mBlocker
(
std
:
:
move
(
aBlocker
)
)
{
}
static
UniquePtr
<
ShutdownBlockingTicket
>
Create
(
const
nsAString
&
aName
const
nsAString
&
aFileName
int32_t
aLineNr
)
{
auto
blocker
=
MakeRefPtr
<
TicketBlocker
>
(
aName
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
ShutdownBlockingTicketImpl
:
:
AddBlocker
"
[
blocker
file
=
nsString
(
aFileName
)
aLineNr
]
{
MustGetShutdownBarrier
(
)
-
>
AddBlocker
(
blocker
file
aLineNr
u
"
"
_ns
)
;
}
)
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
ShutdownBlockingTicketImpl
:
:
RemoveBlocker
"
[
blocker
]
{
MustGetShutdownBarrier
(
)
-
>
RemoveBlocker
(
blocker
)
;
blocker
-
>
RejectIfExists
(
)
;
}
)
)
;
return
nullptr
;
}
return
MakeUnique
<
ShutdownBlockingTicketImpl
>
(
std
:
:
move
(
blocker
)
)
;
}
~
ShutdownBlockingTicketImpl
(
)
{
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
__func__
[
blocker
=
std
:
:
move
(
mBlocker
)
]
{
GetShutdownBarrier
(
)
-
>
RemoveBlocker
(
blocker
)
;
blocker
-
>
RejectIfExists
(
)
;
}
)
)
)
;
}
ShutdownMozPromise
*
ShutdownPromise
(
)
override
{
return
mBlocker
-
>
ShutdownPromise
(
)
;
}
}
;
}
UniquePtr
<
ShutdownBlockingTicket
>
ShutdownBlockingTicket
:
:
Create
(
const
nsAString
&
aName
const
nsAString
&
aFileName
int32_t
aLineNr
)
{
return
ShutdownBlockingTicketImpl
:
:
Create
(
aName
aFileName
aLineNr
)
;
}
}
