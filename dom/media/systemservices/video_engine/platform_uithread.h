#
ifndef
RTC_BASE_PLATFORM_UITHREAD_H_
#
define
RTC_BASE_PLATFORM_UITHREAD_H_
#
if
defined
(
WEBRTC_WIN
)
#
include
"
Assertions
.
h
"
#
include
"
ThreadSafety
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
deprecated
/
recursive_critical_section
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
namespace
webrtc
{
class
PlatformUIThread
{
public
:
PlatformUIThread
(
std
:
:
function
<
void
(
)
>
func
const
char
*
name
ThreadAttributes
attributes
)
:
name_
(
name
)
native_event_callback_
(
std
:
:
move
(
func
)
)
monitor_thread_
(
PlatformThread
:
:
SpawnJoinable
(
[
this
]
(
)
{
Run
(
)
;
}
name
attributes
)
)
{
}
virtual
~
PlatformUIThread
(
)
;
void
Stop
(
)
;
bool
RequestCallbackTimer
(
unsigned
int
milliseconds
)
;
protected
:
void
Run
(
)
;
private
:
static
LRESULT
CALLBACK
EventWindowProc
(
HWND
UINT
WPARAM
LPARAM
)
;
void
NativeEventCallback
(
)
;
bool
InternalInit
(
)
;
std
:
:
string
name_
;
RecursiveCriticalSection
cs_
;
std
:
:
function
<
void
(
)
>
native_event_callback_
;
webrtc
:
:
SequenceChecker
thread_checker_
;
PlatformThread
monitor_thread_
;
HWND
hwnd_
MOZ_GUARDED_BY
(
cs_
)
=
nullptr
;
UINT_PTR
timerid_
MOZ_GUARDED_BY
(
cs_
)
=
0
;
unsigned
int
timeout_
MOZ_GUARDED_BY
(
cs_
)
=
0
;
enum
class
State
{
UNSTARTED
STARTED
STOPPED
}
;
State
state_
MOZ_GUARDED_BY
(
cs_
)
=
State
:
:
UNSTARTED
;
}
;
}
#
endif
#
endif
