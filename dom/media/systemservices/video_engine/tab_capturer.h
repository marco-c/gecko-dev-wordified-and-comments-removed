#
ifndef
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
define
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ImageBitmap
;
}
class
CaptureFrameRequest
;
class
TabCapturedHandler
;
class
TaskQueue
;
class
TabCapturerWebrtc
:
public
webrtc
:
:
DesktopCapturer
{
private
:
~
TabCapturerWebrtc
(
)
;
public
:
friend
class
CaptureFrameRequest
;
friend
class
TabCapturedHandler
;
explicit
TabCapturerWebrtc
(
const
webrtc
:
:
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
webrtc
:
:
DesktopCapturer
>
CreateRawWindowCapturer
(
const
webrtc
:
:
DesktopCaptureOptions
&
options
)
;
TabCapturerWebrtc
(
const
TabCapturerWebrtc
&
)
=
delete
;
TabCapturerWebrtc
&
operator
=
(
const
TabCapturerWebrtc
&
)
=
delete
;
void
Start
(
Callback
*
callback
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
bool
IsOccluded
(
const
webrtc
:
:
DesktopVector
&
pos
)
override
;
private
:
using
CapturePromise
=
MozPromise
<
RefPtr
<
dom
:
:
ImageBitmap
>
nsresult
true
>
;
RefPtr
<
CapturePromise
>
CaptureFrameNow
(
)
;
bool
CompleteRequest
(
CaptureFrameRequest
*
aRequest
)
;
const
RefPtr
<
TaskQueue
>
mMainThreadWorker
;
webrtc
:
:
DesktopCapturer
:
:
Callback
*
mCallback
=
nullptr
;
uint64_t
mBrowserId
=
0
;
nsRefPtrDeque
<
CaptureFrameRequest
>
mRequests
;
}
;
}
#
endif
