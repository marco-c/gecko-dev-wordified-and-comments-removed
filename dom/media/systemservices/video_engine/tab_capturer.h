#
ifndef
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
define
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
nsITabSource
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmap
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
namespace
mozilla
{
class
TabCapturedHandler
;
class
TabCapturer
{
private
:
~
TabCapturer
(
)
;
public
:
friend
class
TabCapturedHandler
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TabCapturer
)
explicit
TabCapturer
(
const
webrtc
:
:
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
webrtc
:
:
DesktopCapturer
>
CreateRawWindowCapturer
(
const
webrtc
:
:
DesktopCaptureOptions
&
options
)
;
void
Start
(
webrtc
:
:
DesktopCapturer
:
:
Callback
*
callback
)
;
void
CaptureFrame
(
)
;
bool
GetSourceList
(
webrtc
:
:
DesktopCapturer
:
:
SourceList
*
sources
)
;
bool
SelectSource
(
webrtc
:
:
DesktopCapturer
:
:
SourceId
id
)
;
bool
FocusOnSelectedSource
(
)
;
bool
IsOccluded
(
const
webrtc
:
:
DesktopVector
&
pos
)
;
void
CaptureFrameNow
(
)
;
void
OnFrame
(
dom
:
:
ImageBitmap
*
aBitmap
)
;
class
StartRunnable
:
public
Runnable
{
public
:
explicit
StartRunnable
(
TabCapturer
*
videoSource
)
:
Runnable
(
"
TabCapturer
:
:
StartRunnable
"
)
mVideoSource
(
videoSource
)
{
}
NS_IMETHOD
Run
(
)
override
;
const
RefPtr
<
TabCapturer
>
mVideoSource
;
}
;
private
:
Monitor
mMonitor
;
webrtc
:
:
DesktopCapturer
:
:
Callback
*
mCallback
=
nullptr
;
uint64_t
mBrowserId
=
0
;
bool
mCapturing
=
false
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
TabCapturer
)
;
}
;
class
TabCapturerWebrtc
:
public
webrtc
:
:
DesktopCapturer
{
public
:
explicit
TabCapturerWebrtc
(
const
webrtc
:
:
DesktopCaptureOptions
&
options
)
{
mInternal
=
new
TabCapturer
(
options
)
;
}
~
TabCapturerWebrtc
(
)
override
{
}
void
Start
(
Callback
*
callback
)
override
{
mInternal
-
>
Start
(
callback
)
;
}
void
CaptureFrame
(
)
override
{
mInternal
-
>
CaptureFrame
(
)
;
}
bool
GetSourceList
(
SourceList
*
sources
)
override
{
return
mInternal
-
>
GetSourceList
(
sources
)
;
}
bool
SelectSource
(
SourceId
id
)
override
{
return
mInternal
-
>
SelectSource
(
id
)
;
}
bool
FocusOnSelectedSource
(
)
override
{
return
mInternal
-
>
FocusOnSelectedSource
(
)
;
}
bool
IsOccluded
(
const
webrtc
:
:
DesktopVector
&
pos
)
override
{
return
mInternal
-
>
IsOccluded
(
pos
)
;
}
private
:
RefPtr
<
TabCapturer
>
mInternal
;
}
;
}
#
endif
