#
ifndef
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
define
MODULES_DESKTOP_CAPTURE_TAB_CAPTURER_H_
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
ImageBitmapCloneData
;
}
class
CaptureFrameRequest
;
class
TabCapturedHandler
;
class
TaskQueue
;
class
TabCapturerWebrtc
:
public
webrtc
:
:
DesktopCapturer
{
protected
:
explicit
TabCapturerWebrtc
(
SourceId
aSourceId
)
;
~
TabCapturerWebrtc
(
)
;
public
:
friend
class
CaptureFrameRequest
;
friend
class
TabCapturedHandler
;
static
std
:
:
unique_ptr
<
webrtc
:
:
DesktopCapturer
>
Create
(
SourceId
aSourceId
)
;
TabCapturerWebrtc
(
const
TabCapturerWebrtc
&
)
=
delete
;
TabCapturerWebrtc
&
operator
=
(
const
TabCapturerWebrtc
&
)
=
delete
;
void
Start
(
Callback
*
aCallback
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
aSources
)
override
;
bool
SelectSource
(
SourceId
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
bool
IsOccluded
(
const
webrtc
:
:
DesktopVector
&
aPos
)
override
;
private
:
using
CapturePromise
=
MozPromise
<
UniquePtr
<
dom
:
:
ImageBitmapCloneData
>
nsresult
true
>
;
RefPtr
<
CapturePromise
>
CaptureFrameNow
(
)
;
bool
CompleteRequest
(
CaptureFrameRequest
*
aRequest
)
;
void
DisconnectRequest
(
CaptureFrameRequest
*
aRequest
)
;
void
OnCaptureFrameSuccess
(
UniquePtr
<
dom
:
:
ImageBitmapCloneData
>
aData
)
;
void
OnCaptureFrameFailure
(
)
;
const
uint64_t
mBrowserId
;
const
RefPtr
<
TaskQueue
>
mMainThreadWorker
;
webrtc
:
:
SequenceChecker
mControlChecker
;
webrtc
:
:
SequenceChecker
mCallbackChecker
;
RefPtr
<
TaskQueue
>
mCallbackWorker
;
webrtc
:
:
DesktopCapturer
:
:
Callback
*
mCallback
RTC_GUARDED_BY
(
mCallbackChecker
)
=
nullptr
;
nsRefPtrDeque
<
CaptureFrameRequest
>
mRequests
;
}
;
}
#
endif
