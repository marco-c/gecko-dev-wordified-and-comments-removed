#
ifndef
MOZILLA_VIDEO_CAPTURE_FACTORY_H_
#
define
MOZILLA_VIDEO_CAPTURE_FACTORY_H_
#
include
"
modules
/
video_capture
/
video_capture
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_factory
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_options
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
camera
{
enum
class
CaptureDeviceType
;
}
namespace
webrtc
{
class
DesktopCaptureImpl
;
}
namespace
mozilla
{
class
VideoCaptureFactory
:
webrtc
:
:
VideoCaptureOptions
:
:
Callback
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoCaptureFactory
)
;
enum
CameraAvailability
{
Unknown
Available
NotAvailable
}
;
VideoCaptureFactory
(
)
;
std
:
:
shared_ptr
<
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
>
CreateDeviceInfo
(
int32_t
aId
mozilla
:
:
camera
:
:
CaptureDeviceType
aType
)
;
struct
CreateVideoCaptureResult
{
webrtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
mCapturer
;
webrtc
:
:
DesktopCaptureImpl
*
mDesktopImpl
=
nullptr
;
}
;
CreateVideoCaptureResult
CreateVideoCapture
(
int32_t
aModuleId
const
char
*
aUniqueId
mozilla
:
:
camera
:
:
CaptureDeviceType
aType
)
;
using
CameraBackendInitPromise
=
MozPromise
<
nsresult
nsresult
false
>
;
RefPtr
<
CameraBackendInitPromise
>
InitCameraBackend
(
)
;
using
UpdateCameraAvailabilityPromise
=
MozPromise
<
CameraAvailability
nsresult
true
>
;
RefPtr
<
UpdateCameraAvailabilityPromise
>
UpdateCameraAvailability
(
)
;
private
:
~
VideoCaptureFactory
(
)
=
default
;
void
OnInitialized
(
webrtc
:
:
VideoCaptureOptions
:
:
Status
status
)
override
;
using
HasCameraDevicePromise
=
MozPromise
<
CameraAvailability
nsresult
true
>
;
RefPtr
<
HasCameraDevicePromise
>
HasCameraDevice
(
)
;
const
bool
mUseFakeCamera
;
std
:
:
atomic
<
bool
>
mCameraBackendInitialized
=
false
;
CameraAvailability
mCameraAvailability
=
Unknown
;
#
if
(
defined
(
WEBRTC_LINUX
)
|
|
defined
(
WEBRTC_BSD
)
)
&
&
!
defined
(
WEBRTC_ANDROID
)
std
:
:
unique_ptr
<
webrtc
:
:
VideoCaptureOptions
>
mVideoCaptureOptions
;
#
endif
MozPromiseHolder
<
CameraBackendInitPromise
>
mPromiseHolder
;
RefPtr
<
CameraBackendInitPromise
>
mPromise
;
}
;
}
#
endif
