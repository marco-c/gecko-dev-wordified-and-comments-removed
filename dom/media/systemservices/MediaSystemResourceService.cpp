#
include
"
MediaSystemResourceManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
MediaSystemResourceService
.
h
"
using
namespace
mozilla
:
:
layers
;
namespace
mozilla
{
StaticRefPtr
<
MediaSystemResourceService
>
MediaSystemResourceService
:
:
sSingleton
;
MediaSystemResourceService
*
MediaSystemResourceService
:
:
Get
(
)
{
if
(
sSingleton
)
{
return
sSingleton
;
}
Init
(
)
;
return
sSingleton
;
}
void
MediaSystemResourceService
:
:
Init
(
)
{
if
(
!
sSingleton
)
{
sSingleton
=
new
MediaSystemResourceService
(
)
;
}
}
void
MediaSystemResourceService
:
:
Shutdown
(
)
{
if
(
sSingleton
)
{
sSingleton
-
>
Destroy
(
)
;
sSingleton
=
nullptr
;
}
}
MediaSystemResourceService
:
:
MediaSystemResourceService
(
)
:
mDestroyed
(
false
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
}
MediaSystemResourceService
:
:
~
MediaSystemResourceService
(
)
{
}
void
MediaSystemResourceService
:
:
Destroy
(
)
{
mDestroyed
=
true
;
}
void
MediaSystemResourceService
:
:
Acquire
(
media
:
:
MediaSystemResourceManagerParent
*
aParent
uint32_t
aId
MediaSystemResourceType
aResourceType
bool
aWillWait
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
aParent
)
;
if
(
mDestroyed
)
{
return
;
}
MediaSystemResource
*
resource
=
mResources
.
Get
(
static_cast
<
uint32_t
>
(
aResourceType
)
)
;
if
(
!
resource
|
|
resource
-
>
mResourceCount
=
=
0
)
{
mozilla
:
:
Unused
<
<
aParent
-
>
SendResponse
(
aId
false
)
;
return
;
}
if
(
resource
-
>
mAcquiredRequests
.
size
(
)
<
resource
-
>
mResourceCount
)
{
resource
-
>
mAcquiredRequests
.
push_back
(
MediaSystemResourceRequest
(
aParent
aId
)
)
;
mozilla
:
:
Unused
<
<
aParent
-
>
SendResponse
(
aId
true
)
;
return
;
}
else
if
(
!
aWillWait
)
{
mozilla
:
:
Unused
<
<
aParent
-
>
SendResponse
(
aId
false
)
;
return
;
}
resource
-
>
mWaitingRequests
.
push_back
(
MediaSystemResourceRequest
(
aParent
aId
)
)
;
}
void
MediaSystemResourceService
:
:
ReleaseResource
(
media
:
:
MediaSystemResourceManagerParent
*
aParent
uint32_t
aId
MediaSystemResourceType
aResourceType
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
aParent
)
;
if
(
mDestroyed
)
{
return
;
}
MediaSystemResource
*
resource
=
mResources
.
Get
(
static_cast
<
uint32_t
>
(
aResourceType
)
)
;
if
(
!
resource
|
|
resource
-
>
mResourceCount
=
=
0
)
{
return
;
}
RemoveRequest
(
aParent
aId
aResourceType
)
;
UpdateRequests
(
aResourceType
)
;
}
void
MediaSystemResourceService
:
:
ReleaseResource
(
media
:
:
MediaSystemResourceManagerParent
*
aParent
)
{
MOZ_ASSERT
(
aParent
)
;
if
(
mDestroyed
)
{
return
;
}
for
(
auto
iter
=
mResources
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
uint32_t
&
key
=
iter
.
Key
(
)
;
RemoveRequests
(
aParent
static_cast
<
MediaSystemResourceType
>
(
key
)
)
;
UpdateRequests
(
static_cast
<
MediaSystemResourceType
>
(
key
)
)
;
}
}
void
MediaSystemResourceService
:
:
RemoveRequest
(
media
:
:
MediaSystemResourceManagerParent
*
aParent
uint32_t
aId
MediaSystemResourceType
aResourceType
)
{
MOZ_ASSERT
(
aParent
)
;
MediaSystemResource
*
resource
=
mResources
.
Get
(
static_cast
<
uint32_t
>
(
aResourceType
)
)
;
if
(
!
resource
)
{
return
;
}
std
:
:
deque
<
MediaSystemResourceRequest
>
:
:
iterator
it
;
std
:
:
deque
<
MediaSystemResourceRequest
>
&
acquiredRequests
=
resource
-
>
mAcquiredRequests
;
for
(
it
=
acquiredRequests
.
begin
(
)
;
it
!
=
acquiredRequests
.
end
(
)
;
it
+
+
)
{
if
(
(
(
*
it
)
.
mParent
=
=
aParent
)
&
&
(
(
*
it
)
.
mId
=
=
aId
)
)
{
acquiredRequests
.
erase
(
it
)
;
return
;
}
}
std
:
:
deque
<
MediaSystemResourceRequest
>
&
waitingRequests
=
resource
-
>
mWaitingRequests
;
for
(
it
=
waitingRequests
.
begin
(
)
;
it
!
=
waitingRequests
.
end
(
)
;
it
+
+
)
{
if
(
(
(
*
it
)
.
mParent
=
=
aParent
)
&
&
(
(
*
it
)
.
mId
=
=
aId
)
)
{
waitingRequests
.
erase
(
it
)
;
return
;
}
}
}
void
MediaSystemResourceService
:
:
RemoveRequests
(
media
:
:
MediaSystemResourceManagerParent
*
aParent
MediaSystemResourceType
aResourceType
)
{
MOZ_ASSERT
(
aParent
)
;
MediaSystemResource
*
resource
=
mResources
.
Get
(
static_cast
<
uint32_t
>
(
aResourceType
)
)
;
if
(
!
resource
|
|
resource
-
>
mResourceCount
=
=
0
)
{
return
;
}
std
:
:
deque
<
MediaSystemResourceRequest
>
:
:
iterator
it
;
std
:
:
deque
<
MediaSystemResourceRequest
>
&
acquiredRequests
=
resource
-
>
mAcquiredRequests
;
for
(
it
=
acquiredRequests
.
begin
(
)
;
it
!
=
acquiredRequests
.
end
(
)
;
)
{
if
(
(
*
it
)
.
mParent
=
=
aParent
)
{
it
=
acquiredRequests
.
erase
(
it
)
;
}
else
{
it
+
+
;
}
}
std
:
:
deque
<
MediaSystemResourceRequest
>
&
waitingRequests
=
resource
-
>
mWaitingRequests
;
for
(
it
=
waitingRequests
.
begin
(
)
;
it
!
=
waitingRequests
.
end
(
)
;
)
{
if
(
(
*
it
)
.
mParent
=
=
aParent
)
{
it
=
waitingRequests
.
erase
(
it
)
;
}
else
{
it
+
+
;
}
}
}
void
MediaSystemResourceService
:
:
UpdateRequests
(
MediaSystemResourceType
aResourceType
)
{
MediaSystemResource
*
resource
=
mResources
.
Get
(
static_cast
<
uint32_t
>
(
aResourceType
)
)
;
if
(
!
resource
|
|
resource
-
>
mResourceCount
=
=
0
)
{
return
;
}
std
:
:
deque
<
MediaSystemResourceRequest
>
&
acquiredRequests
=
resource
-
>
mAcquiredRequests
;
std
:
:
deque
<
MediaSystemResourceRequest
>
&
waitingRequests
=
resource
-
>
mWaitingRequests
;
while
(
(
acquiredRequests
.
size
(
)
<
resource
-
>
mResourceCount
)
&
&
(
!
waitingRequests
.
empty
(
)
)
)
{
MediaSystemResourceRequest
&
request
=
waitingRequests
.
front
(
)
;
MOZ_ASSERT
(
request
.
mParent
)
;
mozilla
:
:
Unused
<
<
request
.
mParent
-
>
SendResponse
(
request
.
mId
true
)
;
acquiredRequests
.
push_back
(
waitingRequests
.
front
(
)
)
;
waitingRequests
.
pop_front
(
)
;
}
}
}
