#
ifndef
mozilla_CamerasParent_h
#
define
mozilla_CamerasParent_h
#
include
"
nsIObserver
.
h
"
#
include
"
VideoEngine
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
camera
/
PCamerasParent
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
ShmemPool
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture
.
h
"
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture_defines
.
h
"
#
include
"
webrtc
/
common_video
/
include
/
incoming_video_stream
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosinkinterface
.
h
"
#
undef
FF
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
base
/
thread
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
camera
{
class
CamerasParent
;
class
CallbackHelper
:
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
CallbackHelper
(
CaptureEngine
aCapEng
uint32_t
aStreamId
CamerasParent
*
aParent
)
:
mCapEngine
(
aCapEng
)
mStreamId
(
aStreamId
)
mParent
(
aParent
)
{
}
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
videoFrame
)
override
;
friend
CamerasParent
;
private
:
CaptureEngine
mCapEngine
;
uint32_t
mStreamId
;
CamerasParent
*
mParent
;
}
;
class
InputObserver
:
public
webrtc
:
:
VideoInputFeedBack
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
InputObserver
)
explicit
InputObserver
(
CamerasParent
*
aParent
)
:
mParent
(
aParent
)
{
}
;
virtual
void
OnDeviceChange
(
)
override
;
friend
CamerasParent
;
private
:
~
InputObserver
(
)
{
}
RefPtr
<
CamerasParent
>
mParent
;
}
;
class
CamerasParent
:
public
PCamerasParent
public
nsIObserver
{
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
public
:
static
already_AddRefed
<
CamerasParent
>
Create
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAllocateCaptureDevice
(
const
CaptureEngine
&
aEngine
const
nsCString
&
aUnique_idUTF8
const
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseCaptureDevice
(
const
CaptureEngine
&
const
int
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNumberOfCaptureDevices
(
const
CaptureEngine
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNumberOfCapabilities
(
const
CaptureEngine
&
const
nsCString
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetCaptureCapability
(
const
CaptureEngine
&
const
nsCString
&
const
int
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetCaptureDevice
(
const
CaptureEngine
&
const
int
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStartCapture
(
const
CaptureEngine
&
const
int
&
const
VideoCaptureCapability
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStopCapture
(
const
CaptureEngine
&
const
int
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseFrame
(
mozilla
:
:
ipc
:
:
Shmem
&
&
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAllDone
(
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnsureInitialized
(
const
CaptureEngine
&
)
override
;
nsIEventTarget
*
GetBackgroundEventTarget
(
)
{
return
mPBackgroundEventTarget
;
}
;
bool
IsShuttingDown
(
)
{
return
!
mChildIsAlive
|
|
mDestroyed
|
|
!
mWebRTCAlive
;
}
;
ShmemBuffer
GetBuffer
(
size_t
aSize
)
;
int
DeliverFrameOverIPC
(
CaptureEngine
capEng
uint32_t
aStreamId
ShmemBuffer
buffer
unsigned
char
*
altbuffer
VideoFrameProperties
&
aProps
)
;
CamerasParent
(
)
;
protected
:
virtual
~
CamerasParent
(
)
;
void
StopCapture
(
const
CaptureEngine
&
aCapEngine
const
int
&
capnum
)
;
int
ReleaseCaptureDevice
(
const
CaptureEngine
&
aCapEngine
const
int
&
capnum
)
;
bool
SetupEngine
(
CaptureEngine
aCapEngine
)
;
VideoEngine
*
EnsureInitialized
(
int
aEngine
)
;
void
CloseEngines
(
)
;
void
StopIPC
(
)
;
void
StopVideoCapture
(
)
;
nsresult
DispatchToVideoCaptureThread
(
Runnable
*
event
)
;
static
RefPtr
<
VideoEngine
>
sEngines
[
CaptureEngine
:
:
MaxEngine
]
;
static
int32_t
sNumOfOpenCamerasParentEngines
;
static
int32_t
sNumOfCamerasParents
;
nsTArray
<
CallbackHelper
*
>
mCallbacks
;
mozilla
:
:
ShmemPool
mShmemPool
;
nsCOMPtr
<
nsISerialEventTarget
>
mPBackgroundEventTarget
;
static
StaticMutex
sMutex
;
static
Monitor
*
sThreadMonitor
;
static
base
:
:
Thread
*
sVideoCaptureThread
;
bool
mChildIsAlive
;
bool
mDestroyed
;
mozilla
:
:
Atomic
<
bool
>
mWebRTCAlive
;
RefPtr
<
InputObserver
>
mCameraObserver
;
std
:
:
map
<
nsCString
std
:
:
map
<
uint32_t
webrtc
:
:
VideoCaptureCapability
>
>
mAllCandidateCapabilities
;
}
;
PCamerasParent
*
CreateCamerasParent
(
)
;
}
}
#
endif
