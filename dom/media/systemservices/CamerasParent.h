#
ifndef
mozilla_CamerasParent_h
#
define
mozilla_CamerasParent_h
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
camera
/
PCamerasParent
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
ShmemPool
.
h
"
#
undef
FF
#
include
"
webrtc
/
common
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_base
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_capture
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_render
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
base
/
thread
.
h
"
namespace
mozilla
{
namespace
camera
{
class
CamerasParent
;
class
CallbackHelper
:
public
webrtc
:
:
ExternalRenderer
{
public
:
CallbackHelper
(
CaptureEngine
aCapEng
int
aCapId
CamerasParent
*
aParent
)
:
mCapEngine
(
aCapEng
)
mCapturerId
(
aCapId
)
mParent
(
aParent
)
{
}
;
virtual
int
FrameSizeChange
(
unsigned
int
w
unsigned
int
h
unsigned
int
streams
)
override
;
virtual
int
DeliverFrame
(
unsigned
char
*
buffer
int
size
uint32_t
time_stamp
int64_t
ntp_time
int64_t
render_time
void
*
handle
)
override
;
virtual
bool
IsTextureSupported
(
)
override
{
return
false
;
}
;
friend
CamerasParent
;
private
:
CaptureEngine
mCapEngine
;
int
mCapturerId
;
CamerasParent
*
mParent
;
}
;
class
EngineHelper
{
public
:
EngineHelper
(
)
:
mEngine
(
nullptr
)
mPtrViEBase
(
nullptr
)
mPtrViECapture
(
nullptr
)
mPtrViERender
(
nullptr
)
mEngineIsRunning
(
false
)
{
}
;
webrtc
:
:
VideoEngine
*
mEngine
;
webrtc
:
:
ViEBase
*
mPtrViEBase
;
webrtc
:
:
ViECapture
*
mPtrViECapture
;
webrtc
:
:
ViERender
*
mPtrViERender
;
webrtc
:
:
Config
mConfig
;
bool
mEngineIsRunning
;
}
;
class
CamerasParent
:
public
PCamerasParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CamerasParent
)
;
public
:
static
already_AddRefed
<
CamerasParent
>
Create
(
)
;
virtual
bool
RecvAllocateCaptureDevice
(
const
int
&
const
nsCString
&
)
override
;
virtual
bool
RecvReleaseCaptureDevice
(
const
int
&
const
int
&
)
override
;
virtual
bool
RecvNumberOfCaptureDevices
(
const
int
&
)
override
;
virtual
bool
RecvNumberOfCapabilities
(
const
int
&
const
nsCString
&
)
override
;
virtual
bool
RecvGetCaptureCapability
(
const
int
&
const
nsCString
&
const
int
&
)
override
;
virtual
bool
RecvGetCaptureDevice
(
const
int
&
const
int
&
)
override
;
virtual
bool
RecvStartCapture
(
const
int
&
const
int
&
const
CaptureCapability
&
)
override
;
virtual
bool
RecvStopCapture
(
const
int
&
const
int
&
)
override
;
virtual
bool
RecvReleaseFrame
(
mozilla
:
:
ipc
:
:
Shmem
&
&
)
override
;
virtual
bool
RecvAllDone
(
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
nsIThread
*
GetBackgroundThread
(
)
{
return
mPBackgroundThread
;
}
;
bool
IsShuttingDown
(
)
{
return
!
mChildIsAlive
|
|
mDestroyed
;
}
;
ShmemBuffer
GetBuffer
(
size_t
aSize
)
;
int
DeliverFrameOverIPC
(
CaptureEngine
capEng
int
cap_id
ShmemBuffer
buffer
unsigned
char
*
altbuffer
int
size
uint32_t
time_stamp
int64_t
ntp_time
int64_t
render_time
)
;
CamerasParent
(
)
;
protected
:
virtual
~
CamerasParent
(
)
;
bool
SetupEngine
(
CaptureEngine
aCapEngine
)
;
void
CloseEngines
(
)
;
bool
EnsureInitialized
(
int
aEngine
)
;
void
DoShutdown
(
)
;
EngineHelper
mEngines
[
CaptureEngine
:
:
MaxEngine
]
;
nsTArray
<
CallbackHelper
*
>
mCallbacks
;
Mutex
mCallbackMutex
;
Mutex
mEngineMutex
;
mozilla
:
:
ShmemPool
mShmemPool
;
nsCOMPtr
<
nsIThread
>
mPBackgroundThread
;
base
:
:
Thread
*
mVideoCaptureThread
;
bool
mChildIsAlive
;
bool
mDestroyed
;
}
;
PCamerasParent
*
CreateCamerasParent
(
)
;
}
}
#
endif
