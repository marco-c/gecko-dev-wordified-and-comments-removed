#
ifndef
mozilla_CamerasParent_h
#
define
mozilla_CamerasParent_h
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
modules
/
video_capture
/
video_capture
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_defines
.
h
"
#
include
"
mozilla
/
ShmemPool
.
h
"
#
include
"
mozilla
/
camera
/
PCamerasParent
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
class
WebrtcLogSinkHandle
;
class
nsIThread
;
namespace
mozilla
{
class
VideoCaptureFactory
;
}
namespace
mozilla
:
:
camera
{
class
CamerasParent
;
class
VideoEngine
;
class
CallbackHelper
:
public
webrtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
CallbackHelper
(
CaptureEngine
aCapEng
uint32_t
aStreamId
CamerasParent
*
aParent
)
:
mCapEngine
(
aCapEng
)
mStreamId
(
aStreamId
)
mTrackingId
(
CaptureEngineToTrackingSourceStr
(
aCapEng
)
aStreamId
)
mParent
(
aParent
)
mConfiguration
(
"
CallbackHelper
:
:
mConfiguration
"
)
{
}
;
void
SetConfiguration
(
const
webrtc
:
:
VideoCaptureCapability
&
aCapability
)
;
void
OnCaptureEnded
(
)
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
aVideoFrame
)
override
;
friend
CamerasParent
;
private
:
const
CaptureEngine
mCapEngine
;
const
uint32_t
mStreamId
;
const
TrackingId
mTrackingId
;
CamerasParent
*
const
mParent
;
MediaEventListener
mCaptureEndedListener
;
bool
mConnectedToCaptureEnded
=
false
;
DataMutex
<
webrtc
:
:
VideoCaptureCapability
>
mConfiguration
;
media
:
:
TimeUnit
mLastFrameTime
=
media
:
:
TimeUnit
:
:
FromNegativeInfinity
(
)
;
}
;
class
DeliverFrameRunnable
;
class
CamerasParent
final
:
public
PCamerasParent
{
public
:
using
ShutdownMozPromise
=
media
:
:
ShutdownBlockingTicket
:
:
ShutdownMozPromise
;
using
CameraAccessRequestPromise
=
MozPromise
<
CamerasAccessStatus
void_t
false
>
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_EVENT_TARGET
(
CamerasParent
mPBackgroundEventTarget
)
class
VideoEngineArray
;
friend
DeliverFrameRunnable
;
static
already_AddRefed
<
CamerasParent
>
Create
(
)
;
static
RefPtr
<
CameraAccessRequestPromise
>
RequestCameraAccess
(
bool
aAllowPermissionRequest
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPCamerasConstructor
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAllocateCapture
(
const
CaptureEngine
&
aCapEngine
const
nsACString
&
aUniqueIdUTF8
const
uint64_t
&
aWindowID
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseCapture
(
const
CaptureEngine
&
aCapEngine
const
int
&
aCaptureId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNumberOfCaptureDevices
(
const
CaptureEngine
&
aCapEngine
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNumberOfCapabilities
(
const
CaptureEngine
&
aCapEngine
const
nsACString
&
aUniqueId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetCaptureCapability
(
const
CaptureEngine
&
aCapEngine
const
nsACString
&
aUniqueId
const
int
&
aIndex
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetCaptureDevice
(
const
CaptureEngine
&
aCapEngine
const
int
&
aDeviceIndex
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStartCapture
(
const
CaptureEngine
&
aCapEngine
const
int
&
aCaptureId
const
VideoCaptureCapability
&
aIpcCaps
const
NormalizedConstraints
&
aConstraints
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFocusOnSelectedSource
(
const
CaptureEngine
&
aCapEngine
const
int
&
aCaptureId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStopCapture
(
const
CaptureEngine
&
aCapEngine
const
int
&
aCaptureId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseFrame
(
mozilla
:
:
ipc
:
:
Shmem
&
&
aShmem
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnsureInitialized
(
const
CaptureEngine
&
aCapEngine
)
override
;
nsIEventTarget
*
GetBackgroundEventTarget
(
)
{
return
mPBackgroundEventTarget
;
}
;
bool
IsShuttingDown
(
)
{
MOZ_ASSERT
(
mPBackgroundEventTarget
-
>
IsOnCurrentThread
(
)
)
;
return
mDestroyed
;
}
;
ShmemBuffer
GetBuffer
(
size_t
aSize
)
;
int
DeliverFrameOverIPC
(
CaptureEngine
aCapEngine
uint32_t
aStreamId
const
TrackingId
&
aTrackingId
ShmemBuffer
aBuffer
unsigned
char
*
aAltBuffer
const
VideoFrameProperties
&
aProps
)
;
CamerasParent
(
)
;
private
:
virtual
~
CamerasParent
(
)
;
void
StopCapture
(
const
CaptureEngine
&
aCapEngine
int
aCaptureId
)
;
int
ReleaseCapture
(
const
CaptureEngine
&
aCapEngine
int
aCaptureId
)
;
void
OnDeviceChange
(
)
;
std
:
:
shared_ptr
<
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
>
GetDeviceInfo
(
int
aEngine
)
;
VideoEngine
*
EnsureInitialized
(
int
aEngine
)
;
void
CloseEngines
(
)
;
void
OnShutdown
(
)
;
nsTArray
<
UniquePtr
<
CallbackHelper
>
>
mCallbacks
;
const
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mShutdownBlocker
;
MozPromiseRequestHolder
<
ShutdownMozPromise
>
mShutdownRequest
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mVideoCaptureThread
;
const
RefPtr
<
VideoEngineArray
>
mEngines
;
const
RefPtr
<
VideoCaptureFactory
>
mVideoCaptureFactory
;
ShmemPool
mShmemPool
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mPBackgroundEventTarget
;
bool
mDestroyed
;
std
:
:
map
<
nsCString
std
:
:
map
<
uint32_t
webrtc
:
:
VideoCaptureCapability
>
>
mAllCandidateCapabilities
;
MediaEventListener
mDeviceChangeEventListener
;
bool
mDeviceChangeEventListenerConnected
=
false
;
nsMainThreadPtrHandle
<
WebrtcLogSinkHandle
>
mLogHandle
;
}
;
}
#
endif
