package
org
.
webrtc
.
videoengine
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
import
android
.
content
.
Context
;
import
android
.
util
.
Log
;
import
android
.
view
.
Surface
;
import
android
.
view
.
WindowManager
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
org
.
mozilla
.
gecko
.
annotation
.
WebRTCJNITarget
;
import
org
.
webrtc
.
CameraEnumerator
;
import
org
.
webrtc
.
Camera1Enumerator
;
import
org
.
webrtc
.
Camera2Enumerator
;
import
org
.
webrtc
.
CameraVideoCapturer
;
import
org
.
webrtc
.
CapturerObserver
;
import
org
.
webrtc
.
EglBase
;
import
org
.
webrtc
.
SurfaceTextureHelper
;
import
org
.
webrtc
.
VideoFrame
;
import
org
.
webrtc
.
VideoFrame
.
I420Buffer
;
public
class
VideoCaptureAndroid
implements
CameraVideoCapturer
.
CameraEventsHandler
CapturerObserver
{
private
final
static
String
TAG
=
"
WEBRTC
-
JC
"
;
private
final
String
deviceName
;
private
volatile
long
native_capturer
;
private
Context
context
;
private
CameraVideoCapturer
cameraVideoCapturer
;
private
EglBase
eglBase
;
private
SurfaceTextureHelper
surfaceTextureHelper
;
private
final
CountDownLatch
capturerStarted
=
new
CountDownLatch
(
1
)
;
private
boolean
capturerStartedSucceeded
=
false
;
private
final
CountDownLatch
capturerStopped
=
new
CountDownLatch
(
1
)
;
WebRTCJNITarget
public
VideoCaptureAndroid
(
String
deviceName
long
native_capturer
)
{
this
.
deviceName
=
deviceName
;
this
.
native_capturer
=
native_capturer
;
this
.
context
=
GetContext
(
)
;
CameraEnumerator
enumerator
;
if
(
Camera2Enumerator
.
isSupported
(
context
)
)
{
enumerator
=
new
Camera2Enumerator
(
context
)
;
}
else
{
enumerator
=
new
Camera1Enumerator
(
)
;
}
cameraVideoCapturer
=
enumerator
.
createCapturer
(
deviceName
this
)
;
eglBase
=
EglBase
.
create
(
)
;
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
VideoCaptureAndroidSurfaceTextureHelper
"
eglBase
.
getEglBaseContext
(
)
)
;
cameraVideoCapturer
.
initialize
(
surfaceTextureHelper
context
this
)
;
}
WebRTCJNITarget
private
static
native
Context
GetContext
(
)
;
WebRTCJNITarget
private
synchronized
boolean
startCapture
(
final
int
width
final
int
height
final
int
min_mfps
final
int
max_mfps
)
{
Log
.
d
(
TAG
"
startCapture
:
"
+
width
+
"
x
"
+
height
+
"
"
+
min_mfps
+
"
:
"
+
max_mfps
)
;
cameraVideoCapturer
.
startCapture
(
width
height
max_mfps
)
;
try
{
capturerStarted
.
await
(
)
;
}
catch
(
InterruptedException
e
)
{
return
false
;
}
return
capturerStartedSucceeded
;
}
WebRTCJNITarget
private
void
unlinkCapturer
(
)
{
native_capturer
=
0
;
}
WebRTCJNITarget
private
synchronized
boolean
stopCapture
(
)
{
Log
.
d
(
TAG
"
stopCapture
"
)
;
try
{
cameraVideoCapturer
.
stopCapture
(
)
;
capturerStopped
.
await
(
)
;
}
catch
(
InterruptedException
e
)
{
return
false
;
}
Log
.
d
(
TAG
"
stopCapture
done
"
)
;
return
true
;
}
WebRTCJNITarget
private
int
getDeviceOrientation
(
)
{
int
orientation
=
0
;
if
(
context
!
=
null
)
{
WindowManager
wm
=
(
WindowManager
)
context
.
getSystemService
(
Context
.
WINDOW_SERVICE
)
;
switch
(
wm
.
getDefaultDisplay
(
)
.
getRotation
(
)
)
{
case
Surface
.
ROTATION_90
:
orientation
=
90
;
break
;
case
Surface
.
ROTATION_180
:
orientation
=
180
;
break
;
case
Surface
.
ROTATION_270
:
orientation
=
270
;
break
;
case
Surface
.
ROTATION_0
:
default
:
orientation
=
0
;
break
;
}
}
return
orientation
;
}
WebRTCJNITarget
private
native
void
ProvideCameraFrame
(
int
width
int
height
java
.
nio
.
ByteBuffer
dataY
int
strideY
java
.
nio
.
ByteBuffer
dataU
int
strideU
java
.
nio
.
ByteBuffer
dataV
int
strideV
int
rotation
long
timeStamp
long
captureObject
)
;
public
void
onCameraError
(
String
errorDescription
)
{
}
public
void
onCameraDisconnected
(
)
{
}
public
void
onCameraFreezed
(
String
errorDescription
)
{
}
public
void
onCameraOpening
(
String
cameraName
)
{
}
public
void
onFirstFrameAvailable
(
)
{
}
public
void
onCameraClosed
(
)
{
}
public
void
onCapturerStarted
(
boolean
success
)
{
capturerStartedSucceeded
=
success
;
capturerStarted
.
countDown
(
)
;
}
public
void
onCapturerStopped
(
)
{
capturerStopped
.
countDown
(
)
;
}
public
void
onFrameCaptured
(
VideoFrame
frame
)
{
if
(
native_capturer
!
=
0
)
{
I420Buffer
i420Buffer
=
frame
.
getBuffer
(
)
.
toI420
(
)
;
ProvideCameraFrame
(
i420Buffer
.
getWidth
(
)
i420Buffer
.
getHeight
(
)
i420Buffer
.
getDataY
(
)
i420Buffer
.
getStrideY
(
)
i420Buffer
.
getDataU
(
)
i420Buffer
.
getStrideU
(
)
i420Buffer
.
getDataV
(
)
i420Buffer
.
getStrideV
(
)
frame
.
getRotation
(
)
frame
.
getTimestampNs
(
)
/
1000000
native_capturer
)
;
i420Buffer
.
release
(
)
;
}
}
}
