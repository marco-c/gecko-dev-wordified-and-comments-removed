package
org
.
webrtc
.
videoengine
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
android
.
Manifest
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
annotation
.
WebRTCJNITarget
;
import
org
.
mozilla
.
gecko
.
permissions
.
Permissions
;
import
org
.
webrtc
.
CameraEnumerator
;
import
org
.
webrtc
.
CameraEnumerationAndroid
.
CaptureFormat
;
import
org
.
webrtc
.
Camera1Enumerator
;
import
org
.
webrtc
.
Camera2Enumerator
;
public
class
VideoCaptureDeviceInfoAndroid
{
private
final
static
String
TAG
=
"
WEBRTC
-
JC
"
;
WebRTCJNITarget
private
static
CaptureCapabilityAndroid
[
]
getDeviceInfo
(
)
{
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
if
(
Camera2Enumerator
.
isSupported
(
context
)
)
{
return
createDeviceList
(
new
Camera2Enumerator
(
context
)
)
;
}
else
{
return
createDeviceList
(
new
Camera1Enumerator
(
)
)
;
}
}
private
static
CaptureCapabilityAndroid
[
]
createDeviceList
(
CameraEnumerator
enumerator
)
{
ArrayList
<
CaptureCapabilityAndroid
>
allDevices
=
new
ArrayList
<
CaptureCapabilityAndroid
>
(
)
;
for
(
String
camera
:
enumerator
.
getDeviceNames
(
)
)
{
List
<
CaptureFormat
>
formats
=
enumerator
.
getSupportedFormats
(
camera
)
;
int
numFormats
=
formats
.
size
(
)
;
if
(
numFormats
<
=
0
)
{
continue
;
}
CaptureCapabilityAndroid
device
=
new
CaptureCapabilityAndroid
(
)
;
device
.
name
=
camera
;
device
.
orientation
=
0
;
device
.
width
=
new
int
[
numFormats
]
;
device
.
height
=
new
int
[
numFormats
]
;
device
.
minMilliFPS
=
formats
.
get
(
0
)
.
framerate
.
min
;
device
.
maxMilliFPS
=
formats
.
get
(
0
)
.
framerate
.
max
;
int
i
=
0
;
for
(
CaptureFormat
format
:
formats
)
{
device
.
width
[
i
]
=
format
.
width
;
device
.
height
[
i
]
=
format
.
height
;
if
(
format
.
framerate
.
min
<
device
.
minMilliFPS
)
{
device
.
minMilliFPS
=
format
.
framerate
.
min
;
}
if
(
format
.
framerate
.
max
>
device
.
maxMilliFPS
)
{
device
.
maxMilliFPS
=
format
.
framerate
.
max
;
}
i
+
+
;
}
device
.
frontFacing
=
enumerator
.
isFrontFacing
(
camera
)
;
allDevices
.
add
(
device
)
;
}
return
allDevices
.
toArray
(
new
CaptureCapabilityAndroid
[
0
]
)
;
}
}
