#
include
"
mozilla
/
ShmemPool
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
<
utility
>
mozilla
:
:
LazyLogModule
sShmemPoolLog
(
"
ShmemPool
"
)
;
#
define
SHMEMPOOL_LOG_VERBOSE
(
args
)
\
MOZ_LOG
(
sShmemPoolLog
mozilla
:
:
LogLevel
:
:
Verbose
args
)
namespace
mozilla
{
ShmemPool
:
:
ShmemPool
(
size_t
aPoolSize
PoolType
aPoolType
)
:
mPoolType
(
aPoolType
)
mMutex
(
"
mozilla
:
:
ShmemPool
"
)
mPoolFree
(
aPoolSize
)
mErrorLogged
(
false
)
#
ifdef
DEBUG
mMaxPoolUse
(
0
)
#
endif
{
mShmemPool
.
SetLength
(
aPoolSize
)
;
}
mozilla
:
:
ShmemBuffer
ShmemPool
:
:
GetIfAvailable
(
size_t
aSize
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mPoolFree
=
=
0
)
{
if
(
!
mErrorLogged
)
{
mErrorLogged
=
true
;
SHMEMPOOL_LOG_ERROR
(
(
"
ShmemPool
is
empty
future
occurrences
"
"
will
be
logged
as
warnings
"
)
)
;
}
else
{
SHMEMPOOL_LOG_WARN
(
(
"
ShmemPool
is
empty
"
)
)
;
}
return
ShmemBuffer
(
)
;
}
ShmemBuffer
&
res
=
mShmemPool
[
mPoolFree
-
1
]
;
if
(
!
res
.
mInitialized
)
{
SHMEMPOOL_LOG
(
(
"
No
free
preallocated
Shmem
"
)
)
;
return
ShmemBuffer
(
)
;
}
MOZ_ASSERT
(
res
.
mShmem
.
IsWritable
(
)
"
Pool
in
Shmem
is
not
writable
?
"
)
;
if
(
res
.
mShmem
.
Size
<
uint8_t
>
(
)
<
aSize
)
{
SHMEMPOOL_LOG
(
(
"
Free
Shmem
but
not
of
the
right
size
"
)
)
;
return
ShmemBuffer
(
)
;
}
mPoolFree
-
-
;
#
ifdef
DEBUG
size_t
poolUse
=
mShmemPool
.
Length
(
)
-
mPoolFree
;
if
(
poolUse
>
mMaxPoolUse
)
{
mMaxPoolUse
=
poolUse
;
SHMEMPOOL_LOG
(
(
"
Maximum
ShmemPool
use
increased
:
%
zu
buffers
"
mMaxPoolUse
)
)
;
}
#
endif
return
std
:
:
move
(
res
)
;
}
void
ShmemPool
:
:
Put
(
ShmemBuffer
&
&
aShmem
)
{
MutexAutoLock
lock
(
mMutex
)
;
MOZ_ASSERT
(
mPoolFree
<
mShmemPool
.
Length
(
)
)
;
mShmemPool
[
mPoolFree
]
=
std
:
:
move
(
aShmem
)
;
mPoolFree
+
+
;
#
ifdef
DEBUG
size_t
poolUse
=
mShmemPool
.
Length
(
)
-
mPoolFree
;
if
(
poolUse
>
0
)
{
SHMEMPOOL_LOG_VERBOSE
(
(
"
ShmemPool
usage
reduced
to
%
zu
buffers
"
poolUse
)
)
;
}
#
endif
}
ShmemPool
:
:
~
ShmemPool
(
)
{
#
ifdef
DEBUG
for
(
size_t
i
=
0
;
i
<
mShmemPool
.
Length
(
)
;
i
+
+
)
{
MOZ_ASSERT
(
!
mShmemPool
[
i
]
.
Valid
(
)
)
;
}
#
endif
}
}
