#
ifndef
DOM_MEDIA_SYSTEMSERVICES_FAKE_VIDEO_CAPTURE_VIDEO_CAPTURE_FAKE_H_
#
define
DOM_MEDIA_SYSTEMSERVICES_FAKE_VIDEO_CAPTURE_VIDEO_CAPTURE_FAKE_H_
#
include
"
modules
/
video_capture
/
video_capture_impl
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ThreadSafety
.
h
"
class
nsISerialEventTarget
;
namespace
mozilla
{
class
FakeVideoSource
;
}
namespace
webrtc
:
:
videocapturemodule
{
class
VideoCaptureFake
:
public
webrtc
:
:
videocapturemodule
:
:
VideoCaptureImpl
{
public
:
explicit
VideoCaptureFake
(
nsISerialEventTarget
*
aTarget
)
;
static
webrtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
Create
(
nsISerialEventTarget
*
aTarget
)
;
int32_t
StartCapture
(
const
VideoCaptureCapability
&
aCapability
)
MOZ_EXCLUDES
(
api_lock_
)
override
;
int32_t
StopCapture
(
)
MOZ_EXCLUDES
(
api_lock_
)
override
;
bool
CaptureStarted
(
)
MOZ_EXCLUDES
(
api_lock_
)
override
;
int32_t
CaptureSettings
(
VideoCaptureCapability
&
aSettings
)
override
;
void
SetTrackingId
(
uint32_t
aTrackingIdProcId
)
MOZ_EXCLUDES
(
api_lock_
)
override
;
private
:
const
RefPtr
<
mozilla
:
:
FakeVideoSource
>
mSource
;
}
;
}
#
endif
