#
if
!
defined
(
AudioSink_h__
)
#
define
AudioSink_h__
#
include
"
MediaInfo
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
dom
/
AudioChannelBinding
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
namespace
mozilla
{
class
AudioData
;
class
AudioStream
;
template
<
class
T
>
class
MediaQueue
;
class
AudioSink
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AudioSink
)
AudioSink
(
MediaQueue
<
MediaData
>
&
aAudioQueue
int64_t
aStartTime
const
AudioInfo
&
aInfo
dom
:
:
AudioChannel
aChannel
)
;
nsRefPtr
<
GenericPromise
>
Init
(
)
;
int64_t
GetPosition
(
)
;
int64_t
GetEndTime
(
)
const
;
bool
HasUnplayedFrames
(
)
;
void
Shutdown
(
)
;
void
SetVolume
(
double
aVolume
)
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
;
void
SetPlaying
(
bool
aPlaying
)
;
void
NotifyData
(
)
;
private
:
enum
State
{
AUDIOSINK_STATE_INIT
AUDIOSINK_STATE_PLAYING
AUDIOSINK_STATE_COMPLETE
AUDIOSINK_STATE_SHUTDOWN
AUDIOSINK_STATE_ERROR
}
;
~
AudioSink
(
)
{
}
void
DispatchTask
(
already_AddRefed
<
nsIRunnable
>
&
&
event
)
;
void
SetState
(
State
aState
)
;
void
ScheduleNextLoop
(
)
;
void
ScheduleNextLoopCrossThread
(
)
;
void
AudioLoop
(
)
;
nsresult
InitializeAudioStream
(
)
;
void
Drain
(
)
;
void
Cleanup
(
)
;
bool
ExpectMoreAudioData
(
)
;
bool
WaitingForAudioToPlay
(
)
;
bool
IsPlaybackContinuing
(
)
;
bool
PlayAudio
(
)
;
void
FinishAudioLoop
(
)
;
uint32_t
PlaySilence
(
uint32_t
aFrames
)
;
uint32_t
PlayFromAudioQueue
(
)
;
void
StartAudioStreamPlaybackIfNeeded
(
)
;
void
WriteSilence
(
uint32_t
aFrames
)
;
MediaQueue
<
MediaData
>
&
AudioQueue
(
)
const
{
return
mAudioQueue
;
}
ReentrantMonitor
&
GetReentrantMonitor
(
)
const
{
return
mMonitor
;
}
void
AssertCurrentThreadInMonitor
(
)
const
{
GetReentrantMonitor
(
)
.
AssertCurrentThreadIn
(
)
;
}
void
AssertOnAudioThread
(
)
;
void
AssertNotOnAudioThread
(
)
;
MediaQueue
<
MediaData
>
&
mAudioQueue
;
mutable
ReentrantMonitor
mMonitor
;
State
mState
;
Maybe
<
State
>
mPendingState
;
bool
mAudioLoopScheduled
;
nsCOMPtr
<
nsIThread
>
mThread
;
nsRefPtr
<
AudioStream
>
mAudioStream
;
const
int64_t
mStartTime
;
Atomic
<
int64_t
>
mWritten
;
int64_t
mLastGoodPosition
;
const
AudioInfo
mInfo
;
dom
:
:
AudioChannel
mChannel
;
bool
mStopAudioThread
;
bool
mPlaying
;
MozPromiseHolder
<
GenericPromise
>
mEndPromise
;
}
;
}
#
endif
