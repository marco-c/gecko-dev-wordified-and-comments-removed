#
ifndef
mozilla_PerformanceRecorder_h
#
define
mozilla_PerformanceRecorder_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
class
PerformanceRecorder
{
public
:
enum
class
Stage
:
uint8_t
{
Invalid
RequestData
RequestDemux
CopyDemuxedData
RequestDecode
CopyDecodedVideo
}
;
explicit
PerformanceRecorder
(
Stage
aStage
int32_t
aHeight
=
0
)
:
mStage
(
aStage
)
mHeight
(
aHeight
)
{
}
~
PerformanceRecorder
(
)
=
default
;
PerformanceRecorder
(
PerformanceRecorder
&
&
aRhs
)
noexcept
{
mStage
=
aRhs
.
mStage
;
mHeight
=
aRhs
.
mHeight
;
mStartTime
=
std
:
:
move
(
aRhs
.
mStartTime
)
;
aRhs
.
mStage
=
Stage
:
:
Invalid
;
}
PerformanceRecorder
&
operator
=
(
PerformanceRecorder
&
&
aRhs
)
noexcept
{
MOZ_ASSERT
(
&
aRhs
!
=
this
"
self
-
moves
are
prohibited
"
)
;
mStage
=
aRhs
.
mStage
;
mHeight
=
aRhs
.
mHeight
;
mStartTime
=
std
:
:
move
(
aRhs
.
mStartTime
)
;
aRhs
.
mStage
=
Stage
:
:
Invalid
;
return
*
this
;
}
PerformanceRecorder
(
const
PerformanceRecorder
&
)
=
delete
;
PerformanceRecorder
&
operator
=
(
const
PerformanceRecorder
&
)
=
delete
;
void
Start
(
)
;
void
End
(
)
;
private
:
void
Reset
(
)
;
Stage
mStage
=
Stage
:
:
Invalid
;
int32_t
mHeight
;
Maybe
<
TimeStamp
>
mStartTime
;
}
;
}
#
endif
