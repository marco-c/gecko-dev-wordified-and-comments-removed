#
ifndef
mozilla_PerformanceRecorder_h
#
define
mozilla_PerformanceRecorder_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
enum
class
MediaInfoFlag
:
uint16_t
{
None
=
(
0
<
<
0
)
NonKeyFrame
=
(
1
<
<
0
)
KeyFrame
=
(
1
<
<
1
)
SoftwareDecoding
=
(
1
<
<
2
)
HardwareDecoding
=
(
1
<
<
3
)
VIDEO_AV1
=
(
1
<
<
4
)
VIDEO_H264
=
(
1
<
<
5
)
VIDEO_VP8
=
(
1
<
<
6
)
VIDEO_VP9
=
(
1
<
<
7
)
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
MediaInfoFlag
)
class
PerformanceRecorder
{
public
:
enum
class
Stage
:
uint8_t
{
Invalid
RequestData
RequestDemux
CopyDemuxedData
RequestDecode
CopyDecodedVideo
}
;
explicit
PerformanceRecorder
(
Stage
aStage
int32_t
aHeight
=
0
MediaInfoFlag
aFlag
=
MediaInfoFlag
:
:
None
)
:
mStage
(
aStage
)
mHeight
(
aHeight
)
mFlag
(
aFlag
)
{
}
~
PerformanceRecorder
(
)
=
default
;
PerformanceRecorder
(
PerformanceRecorder
&
&
aRhs
)
noexcept
{
mStage
=
aRhs
.
mStage
;
mHeight
=
aRhs
.
mHeight
;
mStartTime
=
std
:
:
move
(
aRhs
.
mStartTime
)
;
mFlag
=
aRhs
.
mFlag
;
aRhs
.
mStage
=
Stage
:
:
Invalid
;
}
PerformanceRecorder
&
operator
=
(
PerformanceRecorder
&
&
aRhs
)
noexcept
{
MOZ_ASSERT
(
&
aRhs
!
=
this
"
self
-
moves
are
prohibited
"
)
;
mStage
=
aRhs
.
mStage
;
mHeight
=
aRhs
.
mHeight
;
mStartTime
=
std
:
:
move
(
aRhs
.
mStartTime
)
;
mFlag
=
aRhs
.
mFlag
;
aRhs
.
mStage
=
Stage
:
:
Invalid
;
return
*
this
;
}
PerformanceRecorder
(
const
PerformanceRecorder
&
)
=
delete
;
PerformanceRecorder
&
operator
=
(
const
PerformanceRecorder
&
)
=
delete
;
void
Start
(
)
;
float
End
(
)
;
protected
:
void
Reset
(
)
;
static
bool
IsMeasurementEnabled
(
)
;
static
TimeStamp
GetCurrentTimeForMeasurement
(
)
;
static
const
char
*
FindMediaResolution
(
int32_t
aHeight
)
;
Stage
mStage
=
Stage
:
:
Invalid
;
int32_t
mHeight
;
MediaInfoFlag
mFlag
=
MediaInfoFlag
:
:
None
;
Maybe
<
TimeStamp
>
mStartTime
;
static
inline
bool
sEnableMeasurementForTesting
=
false
;
}
;
}
#
endif
