#
ifndef
DOM_TelemetryProbesReporter_H_
#
define
DOM_TelemetryProbesReporter_H_
#
include
"
MediaInfo
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
AwakeTimeStamp
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
AudioChannelService
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
FrameStatistics
;
class
TelemetryProbesReporterOwner
{
public
:
virtual
Maybe
<
nsAutoString
>
GetKeySystem
(
)
const
=
0
;
virtual
MediaInfo
GetMediaInfo
(
)
const
=
0
;
virtual
FrameStatistics
*
GetFrameStatistics
(
)
const
=
0
;
virtual
bool
IsEncrypted
(
)
const
=
0
;
virtual
void
DispatchAsyncTestingEvent
(
const
nsAString
&
aName
)
=
0
;
#
ifdef
MOZ_WMF_CDM
virtual
bool
IsUsingWMFCDM
(
)
const
=
0
;
#
endif
}
;
enum
class
MediaContent
:
uint8_t
{
MEDIA_HAS_NOTHING
=
(
0
<
<
0
)
MEDIA_HAS_VIDEO
=
(
1
<
<
0
)
MEDIA_HAS_AUDIO
=
(
1
<
<
1
)
MEDIA_HAS_COLOR_DEPTH_ABOVE_8
=
(
1
<
<
2
)
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
MediaContent
)
class
TelemetryProbesReporter
final
{
public
:
explicit
TelemetryProbesReporter
(
TelemetryProbesReporterOwner
*
aOwner
)
;
~
TelemetryProbesReporter
(
)
=
default
;
enum
class
Visibility
{
eInitial
eVisible
eInvisible
}
;
static
MediaContent
MediaInfoToMediaContent
(
const
MediaInfo
&
aInfo
)
;
using
AudibleState
=
dom
:
:
AudioChannelService
:
:
AudibleState
;
void
OnPlay
(
Visibility
aVisibility
MediaContent
aContent
bool
aIsMuted
)
;
void
OnPause
(
Visibility
aVisibility
)
;
void
OnShutdown
(
)
;
void
OnVisibilityChanged
(
Visibility
aVisibility
)
;
void
OnAudibleChanged
(
AudibleState
aAudible
)
;
void
OnMediaContentChanged
(
MediaContent
aContent
)
;
void
OnMutedChanged
(
bool
aMuted
)
;
void
OnDecodeSuspended
(
)
;
void
OnDecodeResumed
(
)
;
enum
class
FirstFrameLoadedFlag
{
IsMSE
IsExternalEngineStateMachine
IsHLS
}
;
using
FirstFrameLoadedFlagSet
=
EnumSet
<
FirstFrameLoadedFlag
uint8_t
>
;
void
OntFirstFrameLoaded
(
const
double
aLoadedFirstFrameTime
const
double
aLoadedMetadataTime
const
double
aTotalWaitingDataTime
const
FirstFrameLoadedFlagSet
aFlags
)
;
double
GetTotalVideoPlayTimeInSeconds
(
)
const
;
double
GetTotalVideoHDRPlayTimeInSeconds
(
)
const
;
double
GetVisibleVideoPlayTimeInSeconds
(
)
const
;
double
GetInvisibleVideoPlayTimeInSeconds
(
)
const
;
double
GetVideoDecodeSuspendedTimeInSeconds
(
)
const
;
double
GetTotalAudioPlayTimeInSeconds
(
)
const
;
double
GetInaudiblePlayTimeInSeconds
(
)
const
;
double
GetAudiblePlayTimeInSeconds
(
)
const
;
double
GetMutedPlayTimeInSeconds
(
)
const
;
private
:
void
StartInvisibleVideoTimeAccumulator
(
)
;
void
PauseInvisibleVideoTimeAccumulator
(
)
;
void
StartInaudibleAudioTimeAccumulator
(
)
;
void
PauseInaudibleAudioTimeAccumulator
(
)
;
void
StartMutedAudioTimeAccumulator
(
)
;
void
PauseMutedAudioTimeAccumulator
(
)
;
bool
HasOwnerHadValidVideo
(
)
const
;
bool
HasOwnerHadValidMedia
(
)
const
;
void
AssertOnMainThreadAndNotShutdown
(
)
const
;
void
ReportTelemetry
(
)
;
void
ReportResultForVideo
(
)
;
void
ReportResultForAudio
(
)
;
void
ReportResultForVideoFrameStatistics
(
double
aTotalPlayTimeS
const
nsCString
&
key
)
;
#
ifdef
MOZ_WMF_CDM
void
ReportResultForMFCDMPlaybackIfNeeded
(
double
aTotalPlayTimeS
const
nsCString
&
aResolution
)
;
#
endif
void
ReportPlaytimeForKeySystem
(
const
nsAString
&
aKeySystem
const
double
aTotalPlayTimeS
const
nsCString
&
aCodec
const
nsCString
&
aResolution
)
;
class
TimeDurationAccumulator
{
public
:
TimeDurationAccumulator
(
)
=
default
;
void
Start
(
)
{
if
(
IsStarted
(
)
)
{
return
;
}
mStartTime
=
Some
(
AwakeTimeStamp
:
:
NowLoRes
(
)
)
;
}
void
Pause
(
)
{
if
(
!
IsStarted
(
)
)
{
return
;
}
mSum
=
(
AwakeTimeStamp
:
:
NowLoRes
(
)
-
mStartTime
.
value
(
)
)
;
mStartTime
=
Nothing
(
)
;
}
bool
IsStarted
(
)
const
{
return
mStartTime
.
isSome
(
)
;
}
double
GetAndClearTotal
(
)
{
MOZ_ASSERT
(
!
IsStarted
(
)
"
only
call
this
when
accumulator
is
paused
"
)
;
double
total
=
mSum
.
ToSeconds
(
)
;
mStartTime
=
Nothing
(
)
;
mSum
=
AwakeTimeDuration
(
)
;
return
total
;
}
double
PeekTotal
(
)
const
{
if
(
!
IsStarted
(
)
)
{
return
mSum
.
ToSeconds
(
)
;
}
return
(
AwakeTimeStamp
:
:
NowLoRes
(
)
-
mStartTime
.
value
(
)
)
.
ToSeconds
(
)
;
}
private
:
Maybe
<
AwakeTimeStamp
>
mStartTime
;
AwakeTimeDuration
mSum
;
}
;
TelemetryProbesReporterOwner
*
mOwner
;
TimeDurationAccumulator
mTotalVideoPlayTime
;
TimeDurationAccumulator
mTotalVideoHDRPlayTime
;
TimeDurationAccumulator
mTotalAudioPlayTime
;
TimeDurationAccumulator
mInvisibleVideoPlayTime
;
TimeDurationAccumulator
mInaudibleAudioPlayTime
;
TimeDurationAccumulator
mMutedAudioPlayTime
;
TimeDurationAccumulator
mVideoDecodeSuspendedTime
;
Visibility
mMediaElementVisibility
=
Visibility
:
:
eInitial
;
MediaContent
mMediaContent
=
MediaContent
:
:
MEDIA_HAS_NOTHING
;
bool
mIsPlaying
=
false
;
bool
mIsMuted
=
false
;
}
;
}
#
endif
