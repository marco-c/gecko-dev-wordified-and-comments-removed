#
ifndef
DOM_TelemetryProbesReporter_H_
#
define
DOM_TelemetryProbesReporter_H_
#
include
"
MediaInfo
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
AwakeTimeStamp
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
FrameStatistics
;
class
TelemetryProbesReporterOwner
{
public
:
virtual
Maybe
<
nsAutoString
>
GetKeySystem
(
)
const
=
0
;
virtual
MediaInfo
GetMediaInfo
(
)
const
=
0
;
virtual
FrameStatistics
*
GetFrameStatistics
(
)
const
=
0
;
virtual
bool
IsEncrypted
(
)
const
=
0
;
virtual
void
DispatchAsyncTestingEvent
(
const
nsAString
&
aName
)
=
0
;
}
;
class
TelemetryProbesReporter
final
{
public
:
explicit
TelemetryProbesReporter
(
TelemetryProbesReporterOwner
*
aOwner
)
;
~
TelemetryProbesReporter
(
)
=
default
;
enum
class
Visibility
{
eVisible
eInvisible
}
;
void
OnPlay
(
Visibility
aVisibility
)
;
void
OnPause
(
Visibility
aVisibility
)
;
void
OnVisibilityChanged
(
Visibility
aVisibility
)
;
void
OnDecodeSuspended
(
)
;
void
OnDecodeResumed
(
)
;
void
OnShutdown
(
)
;
double
GetTotalPlayTimeInSeconds
(
)
const
;
double
GetInvisibleVideoPlayTimeInSeconds
(
)
const
;
double
GetVideoDecodeSuspendedTimeInSeconds
(
)
const
;
private
:
void
StartInvisibleVideoTimeAcculator
(
)
;
void
PauseInvisibleVideoTimeAcculator
(
)
;
bool
HasOwnerHadValidVideo
(
)
const
;
void
AssertOnMainThreadAndNotShutdown
(
)
const
;
void
ReportTelemetry
(
)
;
void
ReportResultForVideo
(
)
;
void
ReportResultForVideoFrameStatistics
(
double
aTotalPlayTimeS
const
nsCString
&
key
)
;
class
TimeDurationAccumulator
{
public
:
TimeDurationAccumulator
(
)
=
default
;
void
Start
(
)
{
if
(
IsStarted
(
)
)
{
return
;
}
mStartTime
=
Some
(
AwakeTimeStamp
:
:
NowLoRes
(
)
)
;
}
void
Pause
(
)
{
if
(
!
IsStarted
(
)
)
{
return
;
}
mSum
=
(
AwakeTimeStamp
:
:
NowLoRes
(
)
-
mStartTime
.
value
(
)
)
;
mStartTime
=
Nothing
(
)
;
}
bool
IsStarted
(
)
const
{
return
mStartTime
.
isSome
(
)
;
}
double
GetAndClearTotal
(
)
{
MOZ_ASSERT
(
!
IsStarted
(
)
"
only
call
this
when
accumulator
is
paused
"
)
;
double
total
=
mSum
.
ToSeconds
(
)
;
mStartTime
=
Nothing
(
)
;
mSum
=
AwakeTimeDuration
(
)
;
return
total
;
}
double
PeekTotal
(
)
const
{
if
(
!
IsStarted
(
)
)
{
return
mSum
.
ToSeconds
(
)
;
}
return
(
AwakeTimeStamp
:
:
NowLoRes
(
)
-
mStartTime
.
value
(
)
)
.
ToSeconds
(
)
;
}
private
:
Maybe
<
AwakeTimeStamp
>
mStartTime
;
AwakeTimeDuration
mSum
;
}
;
TelemetryProbesReporterOwner
*
mOwner
;
TimeDurationAccumulator
mTotalPlayTime
;
TimeDurationAccumulator
mInvisibleVideoPlayTime
;
TimeDurationAccumulator
mVideoDecodeSuspendedTime
;
Visibility
mMediaElementVisibility
=
Visibility
:
:
eInvisible
;
}
;
}
#
endif
