#
include
"
SeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
namespace
mozilla
{
SeekTask
:
:
SeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
SeekJob
&
aSeekJob
)
:
mDecoderID
(
aDecoderID
)
mOwnerThread
(
aThread
)
mReader
(
aReader
)
mTarget
(
aSeekJob
.
mTarget
)
mIsDiscarded
(
false
)
mIsAudioQueueFinished
(
false
)
mIsVideoQueueFinished
(
false
)
mNeedToStopPrerollingAudio
(
false
)
mNeedToStopPrerollingVideo
(
false
)
{
AssertOwnerThread
(
)
;
}
SeekTask
:
:
~
SeekTask
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
SeekTask
:
:
Resolve
(
const
char
*
aCallSite
)
{
AssertOwnerThread
(
)
;
SeekTaskResolveValue
val
;
val
.
mSeekedAudioData
=
mSeekedAudioData
;
val
.
mSeekedVideoData
=
mSeekedVideoData
;
val
.
mIsAudioQueueFinished
=
mIsAudioQueueFinished
;
val
.
mIsVideoQueueFinished
=
mIsVideoQueueFinished
;
val
.
mNeedToStopPrerollingAudio
=
mNeedToStopPrerollingAudio
;
val
.
mNeedToStopPrerollingVideo
=
mNeedToStopPrerollingVideo
;
mSeekTaskPromise
.
Resolve
(
val
aCallSite
)
;
}
void
SeekTask
:
:
RejectIfExist
(
const
char
*
aCallSite
)
{
AssertOwnerThread
(
)
;
SeekTaskRejectValue
val
;
val
.
mIsAudioQueueFinished
=
mIsAudioQueueFinished
;
val
.
mIsVideoQueueFinished
=
mIsVideoQueueFinished
;
val
.
mNeedToStopPrerollingAudio
=
mNeedToStopPrerollingAudio
;
val
.
mNeedToStopPrerollingVideo
=
mNeedToStopPrerollingVideo
;
mSeekTaskPromise
.
RejectIfExists
(
val
aCallSite
)
;
}
void
SeekTask
:
:
AssertOwnerThread
(
)
const
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
}
AbstractThread
*
SeekTask
:
:
OwnerThread
(
)
const
{
AssertOwnerThread
(
)
;
return
mOwnerThread
;
}
SeekTarget
&
SeekTask
:
:
GetSeekTarget
(
)
{
AssertOwnerThread
(
)
;
return
mTarget
;
}
}
