#
include
"
SeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
extern
LazyLogModule
gMediaSampleLog
;
#
undef
LOG
#
undef
DECODER_LOG
#
undef
VERBOSE_LOG
#
define
LOG
(
m
l
x
.
.
.
)
\
MOZ_LOG
(
m
l
(
"
[
SeekTask
]
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
)
)
#
define
DECODER_LOG
(
x
.
.
.
)
\
LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
x
#
#
__VA_ARGS__
)
#
define
VERBOSE_LOG
(
x
.
.
.
)
\
LOG
(
gMediaDecoderLog
LogLevel
:
:
Verbose
x
#
#
__VA_ARGS__
)
#
define
SAMPLE_LOG
(
x
.
.
.
)
\
LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
x
#
#
__VA_ARGS__
)
#
define
DECODER_WARN_HELPER
(
a
b
)
NS_WARNING
b
#
define
DECODER_WARN
(
x
.
.
.
)
\
DECODER_WARN_HELPER
(
0
(
nsPrintfCString
(
"
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
)
.
get
(
)
)
)
namespace
media
{
already_AddRefed
<
SeekTask
>
SeekTask
:
:
CreateSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReader
*
aReader
MediaDecoderReaderWrapper
*
aReaderWrapper
SeekJob
&
&
aSeekJob
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentMediaTime
)
{
RefPtr
<
SeekTask
>
task
(
new
SeekTask
(
aDecoderID
aThread
aReader
aReaderWrapper
Move
(
aSeekJob
)
aInfo
aDuration
aCurrentMediaTime
)
)
;
return
task
.
forget
(
)
;
}
SeekTask
:
:
SeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReader
*
aReader
MediaDecoderReaderWrapper
*
aReaderWrapper
SeekJob
&
&
aSeekJob
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentMediaTime
)
:
mDecoderID
(
aDecoderID
)
mOwnerThread
(
aThread
)
mReader
(
aReader
)
mReaderWrapper
(
aReaderWrapper
)
mSeekJob
(
Move
(
aSeekJob
)
)
mCurrentTimeBeforeSeek
(
aCurrentMediaTime
)
mAudioRate
(
aInfo
.
mAudio
.
mRate
)
mHasAudio
(
aInfo
.
HasAudio
(
)
)
mHasVideo
(
aInfo
.
HasVideo
(
)
)
mDropAudioUntilNextDiscontinuity
(
false
)
mDropVideoUntilNextDiscontinuity
(
false
)
mIsDiscarded
(
false
)
mIsAudioQueueFinished
(
false
)
mIsVideoQueueFinished
(
false
)
mNeedToStopPrerollingAudio
(
false
)
mNeedToStopPrerollingVideo
(
false
)
{
int64_t
end
=
aDuration
.
ToMicroseconds
(
)
;
NS_ASSERTION
(
end
!
=
-
1
"
Should
know
end
time
by
now
"
)
;
int64_t
seekTime
=
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
;
seekTime
=
std
:
:
min
(
seekTime
end
)
;
seekTime
=
std
:
:
max
(
int64_t
(
0
)
seekTime
)
;
NS_ASSERTION
(
seekTime
>
=
0
&
&
seekTime
<
=
end
"
Can
only
seek
in
range
[
0
duration
]
"
)
;
mSeekJob
.
mTarget
.
SetTime
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
seekTime
)
)
;
mDropAudioUntilNextDiscontinuity
=
HasAudio
(
)
;
mDropVideoUntilNextDiscontinuity
=
HasVideo
(
)
;
}
SeekTask
:
:
~
SeekTask
(
)
{
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
SeekTask
:
:
Resolve
(
const
char
*
aCallSite
)
{
SeekTaskResolveValue
val
;
val
.
mSeekedAudioData
=
mSeekedAudioData
;
val
.
mSeekedVideoData
=
mSeekedVideoData
;
val
.
mIsAudioQueueFinished
=
mIsAudioQueueFinished
;
val
.
mIsVideoQueueFinished
=
mIsVideoQueueFinished
;
val
.
mNeedToStopPrerollingAudio
=
mNeedToStopPrerollingAudio
;
val
.
mNeedToStopPrerollingVideo
=
mNeedToStopPrerollingVideo
;
mSeekTaskPromise
.
Resolve
(
val
aCallSite
)
;
}
void
SeekTask
:
:
RejectIfExist
(
const
char
*
aCallSite
)
{
SeekTaskRejectValue
val
;
val
.
mIsAudioQueueFinished
=
mIsAudioQueueFinished
;
val
.
mIsVideoQueueFinished
=
mIsVideoQueueFinished
;
val
.
mNeedToStopPrerollingAudio
=
mNeedToStopPrerollingAudio
;
val
.
mNeedToStopPrerollingVideo
=
mNeedToStopPrerollingVideo
;
mSeekTaskPromise
.
RejectIfExists
(
val
aCallSite
)
;
}
void
SeekTask
:
:
AssertOwnerThread
(
)
const
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
}
bool
SeekTask
:
:
HasAudio
(
)
const
{
return
mHasAudio
;
}
bool
SeekTask
:
:
HasVideo
(
)
const
{
return
mHasVideo
;
}
TaskQueue
*
SeekTask
:
:
DecodeTaskQueue
(
)
const
{
return
mReader
-
>
OwnerThread
(
)
;
}
AbstractThread
*
SeekTask
:
:
OwnerThread
(
)
const
{
return
mOwnerThread
;
}
void
SeekTask
:
:
Discard
(
)
{
mSeekJob
.
RejectIfExists
(
__func__
)
;
RejectIfExist
(
__func__
)
;
mSeekRequest
.
DisconnectIfExists
(
)
;
mAudioDataRequest
.
DisconnectIfExists
(
)
;
mVideoDataRequest
.
DisconnectIfExists
(
)
;
mAudioWaitRequest
.
DisconnectIfExists
(
)
;
mVideoWaitRequest
.
DisconnectIfExists
(
)
;
mIsDiscarded
=
true
;
}
bool
SeekTask
:
:
NeedToResetMDSM
(
)
const
{
return
true
;
}
SeekJob
&
SeekTask
:
:
GetSeekJob
(
)
{
return
mSeekJob
;
}
bool
SeekTask
:
:
Exists
(
)
{
return
mSeekJob
.
Exists
(
)
;
}
RefPtr
<
SeekTask
:
:
SeekTaskPromise
>
SeekTask
:
:
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Begin
(
mReaderWrapper
-
>
Seek
(
mSeekJob
.
mTarget
aDuration
)
-
>
Then
(
OwnerThread
(
)
__func__
this
&
SeekTask
:
:
OnSeekResolved
&
SeekTask
:
:
OnSeekRejected
)
)
;
return
mSeekTaskPromise
.
Ensure
(
__func__
)
;
}
bool
SeekTask
:
:
IsVideoDecoding
(
)
const
{
AssertOwnerThread
(
)
;
return
HasVideo
(
)
&
&
!
mIsVideoQueueFinished
;
}
bool
SeekTask
:
:
IsAudioDecoding
(
)
const
{
AssertOwnerThread
(
)
;
return
HasAudio
(
)
&
&
!
mIsAudioQueueFinished
;
}
nsresult
SeekTask
:
:
EnsureAudioDecodeTaskQueued
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
EnsureAudioDecodeTaskQueued
isDecoding
=
%
d
status
=
%
s
"
IsAudioDecoding
(
)
AudioRequestStatus
(
)
)
;
if
(
!
IsAudioDecoding
(
)
|
|
mAudioDataRequest
.
Exists
(
)
|
|
mAudioWaitRequest
.
Exists
(
)
|
|
mSeekRequest
.
Exists
(
)
)
{
return
NS_OK
;
}
RequestAudioData
(
)
;
return
NS_OK
;
}
nsresult
SeekTask
:
:
EnsureVideoDecodeTaskQueued
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
EnsureVideoDecodeTaskQueued
isDecoding
=
%
d
status
=
%
s
"
IsVideoDecoding
(
)
VideoRequestStatus
(
)
)
;
if
(
!
IsVideoDecoding
(
)
|
|
mVideoDataRequest
.
Exists
(
)
|
|
mVideoWaitRequest
.
Exists
(
)
|
|
mSeekRequest
.
Exists
(
)
)
{
return
NS_OK
;
}
RequestVideoData
(
)
;
return
NS_OK
;
}
const
char
*
SeekTask
:
:
AudioRequestStatus
(
)
{
AssertOwnerThread
(
)
;
if
(
mAudioDataRequest
.
Exists
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mAudioWaitRequest
.
Exists
(
)
)
;
return
"
pending
"
;
}
else
if
(
mAudioWaitRequest
.
Exists
(
)
)
{
return
"
waiting
"
;
}
return
"
idle
"
;
}
const
char
*
SeekTask
:
:
VideoRequestStatus
(
)
{
AssertOwnerThread
(
)
;
if
(
mVideoDataRequest
.
Exists
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mVideoWaitRequest
.
Exists
(
)
)
;
return
"
pending
"
;
}
else
if
(
mVideoWaitRequest
.
Exists
(
)
)
{
return
"
waiting
"
;
}
return
"
idle
"
;
}
void
SeekTask
:
:
RequestAudioData
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
Queueing
audio
task
-
queued
=
%
i
decoder
-
queued
=
%
o
"
!
!
mSeekedAudioData
mReader
-
>
SizeOfAudioQueueInFrames
(
)
)
;
mAudioDataRequest
.
Begin
(
mReaderWrapper
-
>
RequestAudioData
(
)
-
>
Then
(
OwnerThread
(
)
__func__
this
&
SeekTask
:
:
OnAudioDecoded
&
SeekTask
:
:
OnAudioNotDecoded
)
)
;
}
void
SeekTask
:
:
RequestVideoData
(
)
{
AssertOwnerThread
(
)
;
const
bool
skipToNextKeyFrame
=
false
;
const
media
:
:
TimeUnit
currentTime
=
media
:
:
TimeUnit
:
:
FromMicroseconds
(
0
)
;
SAMPLE_LOG
(
"
Queueing
video
task
-
queued
=
%
i
decoder
-
queued
=
%
o
skip
=
%
i
time
=
%
lld
"
!
!
mSeekedVideoData
mReader
-
>
SizeOfVideoQueueInFrames
(
)
skipToNextKeyFrame
currentTime
.
ToMicroseconds
(
)
)
;
mVideoDataRequest
.
Begin
(
mReaderWrapper
-
>
RequestVideoData
(
skipToNextKeyFrame
currentTime
)
-
>
Then
(
OwnerThread
(
)
__func__
this
&
SeekTask
:
:
OnVideoDecoded
&
SeekTask
:
:
OnVideoNotDecoded
)
)
;
}
nsresult
SeekTask
:
:
DropAudioUpToSeekTarget
(
MediaData
*
aSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
AudioData
>
audio
(
aSample
-
>
As
<
AudioData
>
(
)
)
;
MOZ_ASSERT
(
audio
&
&
mSeekJob
.
Exists
(
)
&
&
mSeekJob
.
mTarget
.
IsAccurate
(
)
)
;
CheckedInt64
sampleDuration
=
FramesToUsecs
(
audio
-
>
mFrames
mAudioRate
)
;
if
(
!
sampleDuration
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
audio
-
>
mTime
+
sampleDuration
.
value
(
)
<
=
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
)
{
return
NS_OK
;
}
if
(
audio
-
>
mTime
>
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
)
{
DECODER_WARN
(
"
Audio
not
synced
after
seek
maybe
a
poorly
muxed
file
?
"
)
;
mSeekedAudioData
=
audio
;
return
NS_OK
;
}
NS_ASSERTION
(
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
>
=
audio
-
>
mTime
"
Target
must
at
or
be
after
data
start
.
"
)
;
NS_ASSERTION
(
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
<
audio
-
>
mTime
+
sampleDuration
.
value
(
)
"
Data
must
end
after
target
.
"
)
;
CheckedInt64
framesToPrune
=
UsecsToFrames
(
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
-
audio
-
>
mTime
mAudioRate
)
;
if
(
!
framesToPrune
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
framesToPrune
.
value
(
)
>
audio
-
>
mFrames
)
{
DECODER_WARN
(
"
Can
'
t
prune
more
frames
that
we
have
!
"
)
;
return
NS_ERROR_FAILURE
;
}
uint32_t
frames
=
audio
-
>
mFrames
-
static_cast
<
uint32_t
>
(
framesToPrune
.
value
(
)
)
;
uint32_t
channels
=
audio
-
>
mChannels
;
AlignedAudioBuffer
audioData
(
frames
*
channels
)
;
if
(
!
audioData
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
memcpy
(
audioData
.
get
(
)
audio
-
>
mAudioData
.
get
(
)
+
(
framesToPrune
.
value
(
)
*
channels
)
frames
*
channels
*
sizeof
(
AudioDataValue
)
)
;
CheckedInt64
duration
=
FramesToUsecs
(
frames
mAudioRate
)
;
if
(
!
duration
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
AudioData
>
data
(
new
AudioData
(
audio
-
>
mOffset
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
duration
.
value
(
)
frames
Move
(
audioData
)
channels
audio
-
>
mRate
)
)
;
MOZ_ASSERT
(
!
mSeekedAudioData
"
Should
be
the
1st
sample
after
seeking
"
)
;
mSeekedAudioData
=
data
;
return
NS_OK
;
}
nsresult
SeekTask
:
:
DropVideoUpToSeekTarget
(
MediaData
*
aSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
VideoData
>
video
(
aSample
-
>
As
<
VideoData
>
(
)
)
;
MOZ_ASSERT
(
video
)
;
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
frame
[
%
lld
%
lld
]
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
)
;
MOZ_ASSERT
(
mSeekJob
.
Exists
(
)
)
;
const
int64_t
target
=
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
;
if
(
target
>
=
video
-
>
GetEndTime
(
)
)
{
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
pop
video
frame
[
%
lld
%
lld
]
target
=
%
lld
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
target
)
;
mFirstVideoFrameAfterSeek
=
video
;
}
else
{
if
(
target
>
=
video
-
>
mTime
&
&
video
-
>
GetEndTime
(
)
>
=
target
)
{
RefPtr
<
VideoData
>
temp
=
VideoData
:
:
ShallowCopyUpdateTimestamp
(
video
.
get
(
)
target
)
;
video
=
temp
;
}
mFirstVideoFrameAfterSeek
=
nullptr
;
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
found
video
frame
[
%
lld
%
lld
]
containing
target
=
%
lld
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
target
)
;
MOZ_ASSERT
(
!
mSeekedVideoData
"
Should
be
the
1st
sample
after
seeking
"
)
;
mSeekedVideoData
=
video
;
}
return
NS_OK
;
}
bool
SeekTask
:
:
IsAudioSeekComplete
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
IsAudioSeekComplete
(
)
curTarVal
=
%
d
mAudDis
=
%
d
aqFin
=
%
d
aqSz
=
%
d
"
mSeekJob
.
Exists
(
)
mDropAudioUntilNextDiscontinuity
mIsAudioQueueFinished
!
!
mSeekedAudioData
)
;
return
!
HasAudio
(
)
|
|
(
Exists
(
)
&
&
!
mDropAudioUntilNextDiscontinuity
&
&
(
mIsAudioQueueFinished
|
|
mSeekedAudioData
)
)
;
}
bool
SeekTask
:
:
IsVideoSeekComplete
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
IsVideoSeekComplete
(
)
curTarVal
=
%
d
mVidDis
=
%
d
vqFin
=
%
d
vqSz
=
%
d
"
mSeekJob
.
Exists
(
)
mDropVideoUntilNextDiscontinuity
mIsVideoQueueFinished
!
!
mSeekedVideoData
)
;
return
!
HasVideo
(
)
|
|
(
Exists
(
)
&
&
!
mDropVideoUntilNextDiscontinuity
&
&
(
mIsVideoQueueFinished
|
|
mSeekedVideoData
)
)
;
}
void
SeekTask
:
:
CheckIfSeekComplete
(
)
{
AssertOwnerThread
(
)
;
const
bool
videoSeekComplete
=
IsVideoSeekComplete
(
)
;
if
(
HasVideo
(
)
&
&
!
videoSeekComplete
)
{
if
(
NS_FAILED
(
EnsureVideoDecodeTaskQueued
(
)
)
)
{
DECODER_WARN
(
"
Failed
to
request
video
during
seek
"
)
;
RejectIfExist
(
__func__
)
;
}
}
const
bool
audioSeekComplete
=
IsAudioSeekComplete
(
)
;
if
(
HasAudio
(
)
&
&
!
audioSeekComplete
)
{
if
(
NS_FAILED
(
EnsureAudioDecodeTaskQueued
(
)
)
)
{
DECODER_WARN
(
"
Failed
to
request
audio
during
seek
"
)
;
RejectIfExist
(
__func__
)
;
}
}
SAMPLE_LOG
(
"
CheckIfSeekComplete
(
)
audioSeekComplete
=
%
d
videoSeekComplete
=
%
d
"
audioSeekComplete
videoSeekComplete
)
;
if
(
audioSeekComplete
&
&
videoSeekComplete
)
{
Resolve
(
__func__
)
;
}
}
void
SeekTask
:
:
OnSeekResolved
(
media
:
:
TimeUnit
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Complete
(
)
;
EnsureAudioDecodeTaskQueued
(
)
;
EnsureVideoDecodeTaskQueued
(
)
;
}
void
SeekTask
:
:
OnSeekRejected
(
nsresult
aResult
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Complete
(
)
;
MOZ_ASSERT
(
NS_FAILED
(
aResult
)
"
Cancels
should
also
disconnect
mSeekRequest
"
)
;
RejectIfExist
(
__func__
)
;
}
void
SeekTask
:
:
OnAudioDecoded
(
MediaData
*
aAudioSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
MediaData
>
audio
(
aAudioSample
)
;
MOZ_ASSERT
(
audio
)
;
mAudioDataRequest
.
Complete
(
)
;
SAMPLE_LOG
(
"
OnAudioDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
(
audio
?
audio
-
>
mTime
:
-
1
)
(
audio
?
audio
-
>
GetEndTime
(
)
:
-
1
)
(
audio
?
audio
-
>
mDiscontinuity
:
0
)
)
;
if
(
!
Exists
(
)
)
{
return
;
}
if
(
audio
-
>
mDiscontinuity
)
{
mDropAudioUntilNextDiscontinuity
=
false
;
}
if
(
!
mDropAudioUntilNextDiscontinuity
)
{
if
(
mSeekJob
.
mTarget
.
IsFast
(
)
&
&
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
>
mCurrentTimeBeforeSeek
&
&
audio
-
>
mTime
<
mCurrentTimeBeforeSeek
)
{
mSeekJob
.
mTarget
.
SetType
(
SeekTarget
:
:
Accurate
)
;
}
if
(
mSeekJob
.
mTarget
.
IsFast
(
)
)
{
mSeekedAudioData
=
audio
;
}
else
{
if
(
NS_FAILED
(
DropAudioUpToSeekTarget
(
audio
.
get
(
)
)
)
)
{
RejectIfExist
(
__func__
)
;
return
;
}
}
}
CheckIfSeekComplete
(
)
;
}
void
SeekTask
:
:
OnAudioNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
OnAduioNotDecoded
(
aReason
=
%
u
)
"
aReason
)
;
mAudioDataRequest
.
Complete
(
)
;
if
(
aReason
=
=
MediaDecoderReader
:
:
DECODE_ERROR
)
{
RejectIfExist
(
__func__
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
WAITING_FOR_DATA
)
{
MOZ_ASSERT
(
mReader
-
>
IsWaitForDataSupported
(
)
"
Readers
that
send
WAITING_FOR_DATA
need
to
implement
WaitForData
"
)
;
RefPtr
<
SeekTask
>
self
=
this
;
mAudioWaitRequest
.
Begin
(
InvokeAsync
(
DecodeTaskQueue
(
)
mReader
.
get
(
)
__func__
&
MediaDecoderReader
:
:
WaitForData
MediaData
:
:
AUDIO_DATA
)
-
>
Then
(
OwnerThread
(
)
__func__
[
self
]
(
MediaData
:
:
Type
aType
)
-
>
void
{
self
-
>
mAudioWaitRequest
.
Complete
(
)
;
self
-
>
EnsureAudioDecodeTaskQueued
(
)
;
}
[
self
]
(
WaitForDataRejectValue
aRejection
)
-
>
void
{
self
-
>
mAudioWaitRequest
.
Complete
(
)
;
}
)
)
;
mNeedToStopPrerollingAudio
=
true
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
CANCELED
)
{
EnsureAudioDecodeTaskQueued
(
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
END_OF_STREAM
)
{
mIsAudioQueueFinished
=
true
;
mDropAudioUntilNextDiscontinuity
=
false
;
CheckIfSeekComplete
(
)
;
}
}
void
SeekTask
:
:
OnVideoDecoded
(
MediaData
*
aVideoSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
MediaData
>
video
(
aVideoSample
)
;
MOZ_ASSERT
(
video
)
;
mVideoDataRequest
.
Complete
(
)
;
SAMPLE_LOG
(
"
OnVideoDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
(
video
?
video
-
>
mTime
:
-
1
)
(
video
?
video
-
>
GetEndTime
(
)
:
-
1
)
(
video
?
video
-
>
mDiscontinuity
:
0
)
)
;
if
(
!
Exists
(
)
)
{
return
;
}
if
(
mDropVideoUntilNextDiscontinuity
)
{
if
(
video
-
>
mDiscontinuity
)
{
mDropVideoUntilNextDiscontinuity
=
false
;
}
}
if
(
!
mDropVideoUntilNextDiscontinuity
)
{
if
(
mSeekJob
.
mTarget
.
IsFast
(
)
&
&
mSeekJob
.
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
>
mCurrentTimeBeforeSeek
&
&
video
-
>
mTime
<
mCurrentTimeBeforeSeek
)
{
mSeekJob
.
mTarget
.
SetType
(
SeekTarget
:
:
Accurate
)
;
}
if
(
mSeekJob
.
mTarget
.
IsFast
(
)
)
{
mSeekedVideoData
=
video
;
}
else
{
if
(
NS_FAILED
(
DropVideoUpToSeekTarget
(
video
.
get
(
)
)
)
)
{
RejectIfExist
(
__func__
)
;
return
;
}
}
}
CheckIfSeekComplete
(
)
;
}
void
SeekTask
:
:
OnVideoNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
OnVideoNotDecoded
(
aReason
=
%
u
)
"
aReason
)
;
mVideoDataRequest
.
Complete
(
)
;
if
(
aReason
=
=
MediaDecoderReader
:
:
DECODE_ERROR
)
{
RejectIfExist
(
__func__
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
WAITING_FOR_DATA
)
{
MOZ_ASSERT
(
mReader
-
>
IsWaitForDataSupported
(
)
"
Readers
that
send
WAITING_FOR_DATA
need
to
implement
WaitForData
"
)
;
RefPtr
<
SeekTask
>
self
=
this
;
mVideoWaitRequest
.
Begin
(
InvokeAsync
(
DecodeTaskQueue
(
)
mReader
.
get
(
)
__func__
&
MediaDecoderReader
:
:
WaitForData
MediaData
:
:
VIDEO_DATA
)
-
>
Then
(
OwnerThread
(
)
__func__
[
self
]
(
MediaData
:
:
Type
aType
)
-
>
void
{
self
-
>
mVideoWaitRequest
.
Complete
(
)
;
self
-
>
EnsureVideoDecodeTaskQueued
(
)
;
}
[
self
]
(
WaitForDataRejectValue
aRejection
)
-
>
void
{
self
-
>
mVideoWaitRequest
.
Complete
(
)
;
}
)
)
;
mNeedToStopPrerollingVideo
=
true
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
CANCELED
)
{
EnsureVideoDecodeTaskQueued
(
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
END_OF_STREAM
)
{
if
(
Exists
(
)
&
&
mFirstVideoFrameAfterSeek
)
{
mSeekedVideoData
=
mFirstVideoFrameAfterSeek
;
mFirstVideoFrameAfterSeek
=
nullptr
;
}
mIsVideoQueueFinished
=
true
;
mDropVideoUntilNextDiscontinuity
=
false
;
CheckIfSeekComplete
(
)
;
}
}
}
}
