#
ifndef
FrameStatistics_h_
#
define
FrameStatistics_h_
namespace
mozilla
{
class
FrameStatistics
{
public
:
FrameStatistics
(
)
:
mReentrantMonitor
(
"
FrameStats
"
)
mParsedFrames
(
0
)
mDecodedFrames
(
0
)
mPresentedFrames
(
0
)
mDroppedFrames
(
0
)
mCorruptFrames
(
0
)
{
}
uint32_t
GetParsedFrames
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mParsedFrames
;
}
uint32_t
GetDecodedFrames
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mDecodedFrames
;
}
uint32_t
GetPresentedFrames
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mPresentedFrames
;
}
uint32_t
GetDroppedFrames
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mDroppedFrames
+
mCorruptFrames
;
}
uint32_t
GetCorruptedFrames
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mCorruptFrames
;
}
void
NotifyDecodedFrames
(
uint32_t
aParsed
uint32_t
aDecoded
uint32_t
aDropped
)
{
if
(
aParsed
=
=
0
&
&
aDecoded
=
=
0
&
&
aDropped
=
=
0
)
return
;
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
mParsedFrames
+
=
aParsed
;
mDecodedFrames
+
=
aDecoded
;
mDroppedFrames
+
=
aDropped
;
}
void
NotifyPresentedFrame
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
+
+
mPresentedFrames
;
}
void
NotifyCorruptFrame
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
+
+
mCorruptFrames
;
}
private
:
ReentrantMonitor
mReentrantMonitor
;
uint32_t
mParsedFrames
;
uint32_t
mDecodedFrames
;
uint32_t
mPresentedFrames
;
uint32_t
mDroppedFrames
;
uint32_t
mCorruptFrames
;
}
;
}
#
endif
