#
include
"
ADTSDemuxer
.
h
"
#
include
"
Benchmark
.
h
"
#
include
"
BufferMediaResource
.
h
"
#
include
"
FlacDemuxer
.
h
"
#
include
"
FuzzingInterface
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
MP3Demuxer
.
h
"
#
include
"
MP4Demuxer
.
h
"
#
include
"
OggDemuxer
.
h
"
#
include
"
systemservices
/
MediaUtils
.
h
"
#
include
"
WaveDemuxer
.
h
"
#
include
"
WebMDemuxer
.
h
"
using
namespace
mozilla
;
class
FuzzRunner
{
public
:
explicit
FuzzRunner
(
Benchmark
*
aBenchmark
)
:
mBenchmark
(
aBenchmark
)
{
}
void
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
bool
done
=
false
;
mBenchmark
-
>
Init
(
)
;
mBenchmark
-
>
Run
(
)
-
>
Then
(
AbstractThread
:
:
MainThread
(
)
__func__
[
&
]
(
uint32_t
aDecodeFps
)
{
done
=
true
;
}
[
&
]
(
)
{
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
FuzzRunner
:
:
Run
"
_ns
[
&
]
(
)
{
return
done
;
}
)
;
return
;
}
private
:
RefPtr
<
Benchmark
>
mBenchmark
;
}
;
#
define
MOZ_MEDIA_FUZZER
(
_name
)
\
static
int
FuzzingRunMedia
#
#
_name
(
const
uint8_t
*
data
size_t
size
)
{
\
if
(
!
size
)
{
\
return
0
;
\
}
\
RefPtr
<
BufferMediaResource
>
resource
=
\
new
BufferMediaResource
(
data
size
)
;
\
FuzzRunner
runner
(
new
Benchmark
(
new
_name
#
#
Demuxer
(
resource
)
)
)
;
\
runner
.
Run
(
)
;
\
return
0
;
\
}
\
MOZ_FUZZING_INTERFACE_RAW
(
nullptr
FuzzingRunMedia
#
#
_name
Media
#
#
_name
)
;
MOZ_MEDIA_FUZZER
(
ADTS
)
;
MOZ_MEDIA_FUZZER
(
Flac
)
;
MOZ_MEDIA_FUZZER
(
MP3
)
;
MOZ_MEDIA_FUZZER
(
MP4
)
;
MOZ_MEDIA_FUZZER
(
Ogg
)
;
MOZ_MEDIA_FUZZER
(
WAV
)
;
MOZ_MEDIA_FUZZER
(
WebM
)
;
