#
ifndef
AudioSinkWrapper_h_
#
define
AudioSinkWrapper_h_
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
dom
/
AudioChannelBinding
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MediaSink
.
h
"
namespace
mozilla
{
class
MediaData
;
template
<
class
T
>
class
MediaQueue
;
namespace
media
{
class
AudioSink
;
class
AudioSinkWrapper
:
public
MediaSink
{
class
Creator
{
public
:
virtual
~
Creator
(
)
{
}
virtual
AudioSink
*
Create
(
)
=
0
;
}
;
template
<
typename
Function
>
class
CreatorImpl
:
public
Creator
{
public
:
explicit
CreatorImpl
(
const
Function
&
aFunc
)
:
mFunction
(
aFunc
)
{
}
AudioSink
*
Create
(
)
override
{
return
mFunction
(
)
;
}
private
:
Function
mFunction
;
}
;
public
:
template
<
typename
Function
>
AudioSinkWrapper
(
AbstractThread
*
aOwnerThread
const
Function
&
aFunc
)
:
mOwnerThread
(
aOwnerThread
)
mCreator
(
new
CreatorImpl
<
Function
>
(
aFunc
)
)
mIsStarted
(
false
)
mPlayDuration
(
INT64_MAX
)
{
}
const
PlaybackParams
&
GetPlaybackParams
(
)
const
override
;
void
SetPlaybackParams
(
const
PlaybackParams
&
aParams
)
override
;
nsRefPtr
<
GenericPromise
>
OnEnded
(
TrackType
aType
)
override
;
int64_t
GetEndTime
(
TrackType
aType
)
const
override
;
int64_t
GetPosition
(
TimeStamp
*
aTimeStamp
=
nullptr
)
const
override
;
bool
HasUnplayedFrames
(
TrackType
aType
)
const
override
;
void
SetVolume
(
double
aVolume
)
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
override
;
void
SetPlaying
(
bool
aPlaying
)
override
;
void
Start
(
int64_t
aStartTime
const
MediaInfo
&
aInfo
)
override
;
void
Stop
(
)
override
;
bool
IsStarted
(
)
const
override
;
void
Shutdown
(
)
override
;
private
:
virtual
~
AudioSinkWrapper
(
)
;
void
AssertOwnerThread
(
)
const
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
}
int64_t
GetVideoPosition
(
TimeStamp
aNow
)
const
;
const
nsRefPtr
<
AbstractThread
>
mOwnerThread
;
UniquePtr
<
Creator
>
mCreator
;
nsRefPtr
<
AudioSink
>
mAudioSink
;
nsRefPtr
<
GenericPromise
>
mEndPromise
;
bool
mIsStarted
;
PlaybackParams
mParams
;
TimeStamp
mPlayStartTime
;
int64_t
mPlayDuration
;
}
;
}
}
#
endif
