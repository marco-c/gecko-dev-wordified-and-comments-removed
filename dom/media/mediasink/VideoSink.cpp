#
ifdef
XP_WIN
#
include
"
windows
.
h
"
#
include
"
mmsystem
.
h
"
#
endif
#
include
"
VideoSink
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ProfileJSONWriter
.
h
"
#
include
"
ProfilerMarkerPayload
.
h
"
#
endif
#
include
"
MediaQueue
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
#
undef
FMT
#
define
FMT
(
x
.
.
.
)
"
VideoSink
=
%
p
"
x
this
#
#
__VA_ARGS__
#
define
VSINK_LOG
(
x
.
.
.
)
\
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
(
FMT
(
x
#
#
__VA_ARGS__
)
)
)
#
define
VSINK_LOG_V
(
x
.
.
.
)
\
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Verbose
(
FMT
(
x
#
#
__VA_ARGS__
)
)
)
#
ifdef
MOZ_GECKO_PROFILER
#
define
VSINK_ADD_PROFILER_MARKER
(
tag
markerTime
aTime
vTime
)
\
do
{
\
if
(
profiler_thread_is_being_profiled
(
)
)
{
\
PROFILER_ADD_MARKER_WITH_PAYLOAD
(
tag
MEDIA_PLAYBACK
\
VideoFrameMarkerPayload
\
(
markerTime
aTime
vTime
)
)
;
\
}
\
}
while
(
0
)
class
VideoFrameMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
explicit
VideoFrameMarkerPayload
(
mozilla
:
:
TimeStamp
aMarkerTime
int64_t
aAudioPositionUs
int64_t
aVideoFrameTimeUs
)
:
ProfilerMarkerPayload
(
aMarkerTime
aMarkerTime
)
mAudioPositionUs
(
aAudioPositionUs
)
mVideoFrameTimeUs
(
aVideoFrameTimeUs
)
{
}
ProfileBufferEntryWriter
:
:
Length
TagAndSerializationBytes
(
)
const
override
{
return
CommonPropsTagAndSerializationBytes
(
)
+
ProfileBufferEntryWriter
:
:
SumBytes
(
mAudioPositionUs
mVideoFrameTimeUs
)
;
}
void
SerializeTagAndPayload
(
ProfileBufferEntryWriter
&
aEntryWriter
)
const
override
{
static
const
DeserializerTag
tag
=
TagForDeserializer
(
Deserialize
)
;
SerializeTagAndCommonProps
(
tag
aEntryWriter
)
;
aEntryWriter
.
WriteObject
(
mAudioPositionUs
)
;
aEntryWriter
.
WriteObject
(
mVideoFrameTimeUs
)
;
}
static
UniquePtr
<
ProfilerMarkerPayload
>
Deserialize
(
ProfileBufferEntryReader
&
aEntryReader
)
{
ProfilerMarkerPayload
:
:
CommonProps
props
=
DeserializeCommonProps
(
aEntryReader
)
;
auto
audioPositionUs
=
aEntryReader
.
ReadObject
<
int64_t
>
(
)
;
auto
videoFrameTimeUs
=
aEntryReader
.
ReadObject
<
int64_t
>
(
)
;
return
UniquePtr
<
ProfilerMarkerPayload
>
(
new
VideoFrameMarkerPayload
(
std
:
:
move
(
props
)
audioPositionUs
videoFrameTimeUs
)
)
;
}
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
const
override
{
StreamCommonProps
(
"
UpdateRenderVideoFrames
"
aWriter
aProcessStartTime
aUniqueStacks
)
;
aWriter
.
IntProperty
(
"
audio
"
mAudioPositionUs
)
;
aWriter
.
IntProperty
(
"
video
"
mVideoFrameTimeUs
)
;
}
private
:
VideoFrameMarkerPayload
(
CommonProps
&
&
aCommonProps
int64_t
aAudioPositionUs
int64_t
aVideoFrameTimeUs
)
:
ProfilerMarkerPayload
(
std
:
:
move
(
aCommonProps
)
)
mAudioPositionUs
(
aAudioPositionUs
)
mVideoFrameTimeUs
(
aVideoFrameTimeUs
)
{
}
int64_t
mAudioPositionUs
;
int64_t
mVideoFrameTimeUs
;
}
;
#
else
#
define
VSINK_ADD_PROFILER_MARKER
(
tag
markerTime
aTime
vTime
)
#
endif
using
namespace
mozilla
:
:
layers
;
static
const
int64_t
MIN_UPDATE_INTERVAL_US
=
1000000
/
(
60
*
2
)
;
static
void
SetImageToGreenPixel
(
PlanarYCbCrImage
*
aImage
)
{
static
uint8_t
greenPixel
[
]
=
{
0x00
0x00
0x00
}
;
PlanarYCbCrData
data
;
data
.
mYChannel
=
greenPixel
;
data
.
mCbChannel
=
greenPixel
+
1
;
data
.
mCrChannel
=
greenPixel
+
2
;
data
.
mYStride
=
data
.
mCbCrStride
=
1
;
data
.
mPicSize
=
data
.
mYSize
=
data
.
mCbCrSize
=
gfx
:
:
IntSize
(
1
1
)
;
data
.
mYUVColorSpace
=
gfx
:
:
YUVColorSpace
:
:
BT601
;
aImage
-
>
CopyData
(
data
)
;
}
VideoSink
:
:
VideoSink
(
AbstractThread
*
aThread
MediaSink
*
aAudioSink
MediaQueue
<
VideoData
>
&
aVideoQueue
VideoFrameContainer
*
aContainer
FrameStatistics
&
aFrameStats
uint32_t
aVQueueSentToCompositerSize
)
:
mOwnerThread
(
aThread
)
mAudioSink
(
aAudioSink
)
mVideoQueue
(
aVideoQueue
)
mContainer
(
aContainer
)
mProducerID
(
ImageContainer
:
:
AllocateProducerID
(
)
)
mFrameStats
(
aFrameStats
)
mOldCompositorDroppedCount
(
mContainer
?
mContainer
-
>
GetDroppedImageCount
(
)
:
0
)
mPendingDroppedCount
(
0
)
mHasVideo
(
false
)
mUpdateScheduler
(
aThread
)
mVideoQueueSendToCompositorSize
(
aVQueueSentToCompositerSize
)
mMinVideoQueueSize
(
StaticPrefs
:
:
media_ruin_av_sync_enabled
(
)
?
1
:
0
)
#
ifdef
XP_WIN
mHiResTimersRequested
(
false
)
#
endif
{
MOZ_ASSERT
(
mAudioSink
"
AudioSink
should
exist
.
"
)
;
if
(
StaticPrefs
:
:
browser_measurement_render_anims_and_video_solid
(
)
&
&
mContainer
)
{
InitializeBlankImage
(
)
;
MOZ_ASSERT
(
mBlankImage
"
Blank
image
should
exist
.
"
)
;
}
}
VideoSink
:
:
~
VideoSink
(
)
{
#
ifdef
XP_WIN
MOZ_ASSERT
(
!
mHiResTimersRequested
)
;
#
endif
}
RefPtr
<
VideoSink
:
:
EndedPromise
>
VideoSink
:
:
OnEnded
(
TrackType
aType
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mAudioSink
-
>
IsStarted
(
)
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
)
{
return
mAudioSink
-
>
OnEnded
(
aType
)
;
}
else
if
(
aType
=
=
TrackInfo
:
:
kVideoTrack
)
{
return
mEndPromise
;
}
return
nullptr
;
}
TimeUnit
VideoSink
:
:
GetEndTime
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mAudioSink
-
>
IsStarted
(
)
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kVideoTrack
)
{
return
mVideoFrameEndTime
;
}
else
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
)
{
return
mAudioSink
-
>
GetEndTime
(
aType
)
;
}
return
TimeUnit
:
:
Zero
(
)
;
}
TimeUnit
VideoSink
:
:
GetPosition
(
TimeStamp
*
aTimeStamp
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
-
>
GetPosition
(
aTimeStamp
)
;
}
bool
VideoSink
:
:
HasUnplayedFrames
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aType
=
=
TrackInfo
:
:
kAudioTrack
"
Not
implemented
for
non
audio
tracks
.
"
)
;
return
mAudioSink
-
>
HasUnplayedFrames
(
aType
)
;
}
void
VideoSink
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
AssertOwnerThread
(
)
;
mAudioSink
-
>
SetPlaybackRate
(
aPlaybackRate
)
;
}
void
VideoSink
:
:
SetVolume
(
double
aVolume
)
{
AssertOwnerThread
(
)
;
mAudioSink
-
>
SetVolume
(
aVolume
)
;
}
void
VideoSink
:
:
SetPreservesPitch
(
bool
aPreservesPitch
)
{
AssertOwnerThread
(
)
;
mAudioSink
-
>
SetPreservesPitch
(
aPreservesPitch
)
;
}
double
VideoSink
:
:
PlaybackRate
(
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
-
>
PlaybackRate
(
)
;
}
void
VideoSink
:
:
EnsureHighResTimersOnOnlyIfPlaying
(
)
{
#
ifdef
XP_WIN
const
bool
needed
=
IsPlaying
(
)
;
if
(
needed
=
=
mHiResTimersRequested
)
{
return
;
}
if
(
needed
)
{
timeBeginPeriod
(
1
)
;
}
else
{
timeEndPeriod
(
1
)
;
}
mHiResTimersRequested
=
needed
;
#
endif
}
void
VideoSink
:
:
SetPlaying
(
bool
aPlaying
)
{
AssertOwnerThread
(
)
;
VSINK_LOG_V
(
"
playing
(
%
d
)
-
>
(
%
d
)
"
mAudioSink
-
>
IsPlaying
(
)
aPlaying
)
;
if
(
!
aPlaying
)
{
mUpdateScheduler
.
Reset
(
)
;
TimeStamp
nowTime
;
const
auto
clockTime
=
mAudioSink
-
>
GetPosition
(
&
nowTime
)
;
RenderVideoFrames
(
1
clockTime
.
ToMicroseconds
(
)
nowTime
)
;
if
(
mContainer
)
{
mContainer
-
>
ClearCachedResources
(
)
;
}
if
(
mSecondaryContainer
)
{
mSecondaryContainer
-
>
ClearCachedResources
(
)
;
}
}
mAudioSink
-
>
SetPlaying
(
aPlaying
)
;
if
(
mHasVideo
&
&
aPlaying
)
{
TryUpdateRenderedVideoFrames
(
)
;
}
EnsureHighResTimersOnOnlyIfPlaying
(
)
;
}
nsresult
VideoSink
:
:
Start
(
const
TimeUnit
&
aStartTime
const
MediaInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
VSINK_LOG
(
"
[
%
s
]
"
__func__
)
;
nsresult
rv
=
mAudioSink
-
>
Start
(
aStartTime
aInfo
)
;
mHasVideo
=
aInfo
.
HasVideo
(
)
;
if
(
mHasVideo
)
{
mEndPromise
=
mEndPromiseHolder
.
Ensure
(
__func__
)
;
RefPtr
<
EndedPromise
>
p
=
mAudioSink
-
>
OnEnded
(
TrackInfo
:
:
kVideoTrack
)
;
if
(
p
)
{
RefPtr
<
VideoSink
>
self
=
this
;
p
-
>
Then
(
mOwnerThread
__func__
[
self
]
(
)
{
self
-
>
mVideoSinkEndRequest
.
Complete
(
)
;
self
-
>
TryUpdateRenderedVideoFrames
(
)
;
self
-
>
MaybeResolveEndPromise
(
)
;
}
[
self
]
(
)
{
self
-
>
mVideoSinkEndRequest
.
Complete
(
)
;
self
-
>
TryUpdateRenderedVideoFrames
(
)
;
self
-
>
MaybeResolveEndPromise
(
)
;
}
)
-
>
Track
(
mVideoSinkEndRequest
)
;
}
ConnectListener
(
)
;
UpdateRenderedVideoFrames
(
)
;
}
return
rv
;
}
void
VideoSink
:
:
Stop
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mAudioSink
-
>
IsStarted
(
)
"
playback
not
started
.
"
)
;
VSINK_LOG
(
"
[
%
s
]
"
__func__
)
;
mAudioSink
-
>
Stop
(
)
;
mUpdateScheduler
.
Reset
(
)
;
if
(
mHasVideo
)
{
DisconnectListener
(
)
;
mVideoSinkEndRequest
.
DisconnectIfExists
(
)
;
mEndPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
mEndPromise
=
nullptr
;
}
mVideoFrameEndTime
=
TimeUnit
:
:
Zero
(
)
;
EnsureHighResTimersOnOnlyIfPlaying
(
)
;
}
bool
VideoSink
:
:
IsStarted
(
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
-
>
IsStarted
(
)
;
}
bool
VideoSink
:
:
IsPlaying
(
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
-
>
IsPlaying
(
)
;
}
void
VideoSink
:
:
Shutdown
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mAudioSink
-
>
IsStarted
(
)
"
must
be
called
after
playback
stops
.
"
)
;
VSINK_LOG
(
"
[
%
s
]
"
__func__
)
;
mAudioSink
-
>
Shutdown
(
)
;
}
void
VideoSink
:
:
OnVideoQueuePushed
(
RefPtr
<
VideoData
>
&
&
aSample
)
{
AssertOwnerThread
(
)
;
if
(
!
aSample
-
>
IsSentToCompositor
(
)
)
{
TryUpdateRenderedVideoFrames
(
)
;
}
}
void
VideoSink
:
:
OnVideoQueueFinished
(
)
{
AssertOwnerThread
(
)
;
if
(
!
mUpdateScheduler
.
IsScheduled
(
)
&
&
mAudioSink
-
>
IsPlaying
(
)
&
&
!
mEndPromiseHolder
.
IsEmpty
(
)
)
{
UpdateRenderedVideoFrames
(
)
;
}
}
void
VideoSink
:
:
Redraw
(
const
VideoInfo
&
aInfo
)
{
AUTO_PROFILER_LABEL
(
"
VideoSink
:
:
Redraw
"
MEDIA_PLAYBACK
)
;
AssertOwnerThread
(
)
;
if
(
!
aInfo
.
IsValid
(
)
|
|
!
mContainer
)
{
return
;
}
auto
now
=
TimeStamp
:
:
Now
(
)
;
RefPtr
<
VideoData
>
video
=
VideoQueue
(
)
.
PeekFront
(
)
;
if
(
video
)
{
if
(
mBlankImage
)
{
video
-
>
mImage
=
mBlankImage
;
}
video
-
>
MarkSentToCompositor
(
)
;
mContainer
-
>
SetCurrentFrame
(
video
-
>
mDisplay
video
-
>
mImage
now
)
;
if
(
mSecondaryContainer
)
{
mSecondaryContainer
-
>
SetCurrentFrame
(
video
-
>
mDisplay
video
-
>
mImage
now
)
;
}
return
;
}
RefPtr
<
Image
>
blank
=
mContainer
-
>
GetImageContainer
(
)
-
>
CreatePlanarYCbCrImage
(
)
;
mContainer
-
>
SetCurrentFrame
(
aInfo
.
mDisplay
blank
now
)
;
if
(
mSecondaryContainer
)
{
mSecondaryContainer
-
>
SetCurrentFrame
(
aInfo
.
mDisplay
blank
now
)
;
}
}
void
VideoSink
:
:
TryUpdateRenderedVideoFrames
(
)
{
AUTO_PROFILER_LABEL
(
"
VideoSink
:
:
TryUpdateRenderedVideoFrames
"
MEDIA_PLAYBACK
)
;
AssertOwnerThread
(
)
;
if
(
mUpdateScheduler
.
IsScheduled
(
)
|
|
!
mAudioSink
-
>
IsPlaying
(
)
)
{
return
;
}
RefPtr
<
VideoData
>
v
=
VideoQueue
(
)
.
PeekFront
(
)
;
if
(
!
v
)
{
return
;
}
TimeStamp
nowTime
;
const
TimeUnit
clockTime
=
mAudioSink
-
>
GetPosition
(
&
nowTime
)
;
if
(
clockTime
>
=
v
-
>
mTime
)
{
UpdateRenderedVideoFrames
(
)
;
return
;
}
int64_t
delta
=
(
v
-
>
mTime
-
clockTime
)
.
ToMicroseconds
(
)
/
mAudioSink
-
>
PlaybackRate
(
)
;
TimeStamp
target
=
nowTime
+
TimeDuration
:
:
FromMicroseconds
(
delta
)
;
RefPtr
<
VideoSink
>
self
=
this
;
mUpdateScheduler
.
Ensure
(
target
[
self
]
(
)
{
self
-
>
UpdateRenderedVideoFramesByTimer
(
)
;
}
[
self
]
(
)
{
self
-
>
UpdateRenderedVideoFramesByTimer
(
)
;
}
)
;
}
void
VideoSink
:
:
UpdateRenderedVideoFramesByTimer
(
)
{
AssertOwnerThread
(
)
;
mUpdateScheduler
.
CompleteRequest
(
)
;
UpdateRenderedVideoFrames
(
)
;
}
void
VideoSink
:
:
ConnectListener
(
)
{
AssertOwnerThread
(
)
;
mPushListener
=
VideoQueue
(
)
.
PushEvent
(
)
.
Connect
(
mOwnerThread
this
&
VideoSink
:
:
OnVideoQueuePushed
)
;
mFinishListener
=
VideoQueue
(
)
.
FinishEvent
(
)
.
Connect
(
mOwnerThread
this
&
VideoSink
:
:
OnVideoQueueFinished
)
;
}
void
VideoSink
:
:
DisconnectListener
(
)
{
AssertOwnerThread
(
)
;
mPushListener
.
Disconnect
(
)
;
mFinishListener
.
Disconnect
(
)
;
}
void
VideoSink
:
:
RenderVideoFrames
(
int32_t
aMaxFrames
int64_t
aClockTime
const
TimeStamp
&
aClockTimeStamp
)
{
AUTO_PROFILER_LABEL
(
"
VideoSink
:
:
RenderVideoFrames
"
MEDIA_PLAYBACK
)
;
AssertOwnerThread
(
)
;
AutoTArray
<
RefPtr
<
VideoData
>
16
>
frames
;
VideoQueue
(
)
.
GetFirstElements
(
aMaxFrames
&
frames
)
;
if
(
frames
.
IsEmpty
(
)
|
|
!
mContainer
)
{
return
;
}
AutoTArray
<
ImageContainer
:
:
NonOwningImage
16
>
images
;
TimeStamp
lastFrameTime
;
double
playbackRate
=
mAudioSink
-
>
PlaybackRate
(
)
;
for
(
uint32_t
i
=
0
;
i
<
frames
.
Length
(
)
;
+
+
i
)
{
VideoData
*
frame
=
frames
[
i
]
;
bool
wasSent
=
frame
-
>
IsSentToCompositor
(
)
;
frame
-
>
MarkSentToCompositor
(
)
;
if
(
!
frame
-
>
mImage
|
|
!
frame
-
>
mImage
-
>
IsValid
(
)
|
|
!
frame
-
>
mImage
-
>
GetSize
(
)
.
width
|
|
!
frame
-
>
mImage
-
>
GetSize
(
)
.
height
)
{
continue
;
}
if
(
frame
-
>
mTime
.
IsNegative
(
)
)
{
continue
;
}
MOZ_ASSERT
(
!
aClockTimeStamp
.
IsNull
(
)
)
;
int64_t
delta
=
frame
-
>
mTime
.
ToMicroseconds
(
)
-
aClockTime
;
TimeStamp
t
=
aClockTimeStamp
+
TimeDuration
:
:
FromMicroseconds
(
delta
/
playbackRate
)
;
if
(
!
lastFrameTime
.
IsNull
(
)
&
&
t
<
=
lastFrameTime
)
{
continue
;
}
MOZ_ASSERT
(
!
t
.
IsNull
(
)
)
;
lastFrameTime
=
t
;
ImageContainer
:
:
NonOwningImage
*
img
=
images
.
AppendElement
(
)
;
img
-
>
mTimeStamp
=
t
;
img
-
>
mImage
=
frame
-
>
mImage
;
if
(
mBlankImage
)
{
img
-
>
mImage
=
mBlankImage
;
}
img
-
>
mFrameID
=
frame
-
>
mFrameID
;
img
-
>
mProducerID
=
mProducerID
;
VSINK_LOG_V
(
"
playing
video
frame
%
"
PRId64
"
(
id
=
%
x
)
(
vq
-
queued
=
%
zu
)
"
frame
-
>
mTime
.
ToMicroseconds
(
)
frame
-
>
mFrameID
VideoQueue
(
)
.
GetSize
(
)
)
;
if
(
!
wasSent
)
{
VSINK_ADD_PROFILER_MARKER
(
"
VideoSink
:
play
"
aClockTimeStamp
aClockTime
frame
-
>
mTime
.
ToMicroseconds
(
)
)
;
}
}
if
(
images
.
Length
(
)
>
0
)
{
mContainer
-
>
SetCurrentFrames
(
frames
[
0
]
-
>
mDisplay
images
)
;
if
(
mSecondaryContainer
)
{
mSecondaryContainer
-
>
SetCurrentFrames
(
frames
[
0
]
-
>
mDisplay
images
)
;
}
}
}
void
VideoSink
:
:
UpdateRenderedVideoFrames
(
)
{
AUTO_PROFILER_LABEL
(
"
VideoSink
:
:
UpdateRenderedVideoFrames
"
MEDIA_PLAYBACK
)
;
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mAudioSink
-
>
IsPlaying
(
)
"
should
be
called
while
playing
.
"
)
;
TimeStamp
nowTime
;
const
auto
clockTime
=
mAudioSink
-
>
GetPosition
(
&
nowTime
)
;
MOZ_ASSERT
(
!
clockTime
.
IsNegative
(
)
"
Should
have
positive
clock
time
.
"
)
;
uint32_t
sentToCompositorCount
=
0
;
uint32_t
droppedInSink
=
0
;
TimeUnit
lastFrameEndTime
;
while
(
VideoQueue
(
)
.
GetSize
(
)
>
mMinVideoQueueSize
&
&
clockTime
>
=
VideoQueue
(
)
.
PeekFront
(
)
-
>
GetEndTime
(
)
)
{
RefPtr
<
VideoData
>
frame
=
VideoQueue
(
)
.
PopFront
(
)
;
lastFrameEndTime
=
frame
-
>
GetEndTime
(
)
;
if
(
frame
-
>
IsSentToCompositor
(
)
)
{
sentToCompositorCount
+
+
;
}
else
{
droppedInSink
+
+
;
VSINK_LOG_V
(
"
discarding
video
frame
mTime
=
%
"
PRId64
"
clock_time
=
%
"
PRId64
frame
-
>
mTime
.
ToMicroseconds
(
)
clockTime
.
ToMicroseconds
(
)
)
;
VSINK_ADD_PROFILER_MARKER
(
"
VideoSink
:
discard
"
nowTime
clockTime
.
ToMicroseconds
(
)
frame
-
>
mTime
.
ToMicroseconds
(
)
)
;
}
}
if
(
droppedInSink
|
|
sentToCompositorCount
)
{
uint32_t
totalCompositorDroppedCount
=
mContainer
-
>
GetDroppedImageCount
(
)
;
uint32_t
droppedInCompositor
=
totalCompositorDroppedCount
-
mOldCompositorDroppedCount
;
if
(
droppedInCompositor
>
0
)
{
mOldCompositorDroppedCount
=
totalCompositorDroppedCount
;
VSINK_LOG_V
(
"
%
u
video
frame
previously
discarded
by
compositor
"
droppedInCompositor
)
;
}
mPendingDroppedCount
+
=
droppedInCompositor
;
uint32_t
droppedReported
=
mPendingDroppedCount
>
sentToCompositorCount
?
sentToCompositorCount
:
mPendingDroppedCount
;
mPendingDroppedCount
-
=
droppedReported
;
mFrameStats
.
Accumulate
(
{
0
0
sentToCompositorCount
-
droppedReported
0
droppedInSink
droppedInCompositor
}
)
;
}
RefPtr
<
VideoData
>
currentFrame
=
VideoQueue
(
)
.
PeekFront
(
)
;
mVideoFrameEndTime
=
std
:
:
max
(
mVideoFrameEndTime
currentFrame
?
currentFrame
-
>
GetEndTime
(
)
:
lastFrameEndTime
)
;
RenderVideoFrames
(
mVideoQueueSendToCompositorSize
clockTime
.
ToMicroseconds
(
)
nowTime
)
;
MaybeResolveEndPromise
(
)
;
nsTArray
<
RefPtr
<
VideoData
>
>
frames
;
VideoQueue
(
)
.
GetFirstElements
(
2
&
frames
)
;
if
(
frames
.
Length
(
)
<
2
)
{
return
;
}
int64_t
nextFrameTime
=
frames
[
1
]
-
>
mTime
.
ToMicroseconds
(
)
;
int64_t
delta
=
std
:
:
max
(
nextFrameTime
-
clockTime
.
ToMicroseconds
(
)
MIN_UPDATE_INTERVAL_US
)
;
TimeStamp
target
=
nowTime
+
TimeDuration
:
:
FromMicroseconds
(
delta
/
mAudioSink
-
>
PlaybackRate
(
)
)
;
RefPtr
<
VideoSink
>
self
=
this
;
mUpdateScheduler
.
Ensure
(
target
[
self
]
(
)
{
self
-
>
UpdateRenderedVideoFramesByTimer
(
)
;
}
[
self
]
(
)
{
self
-
>
UpdateRenderedVideoFramesByTimer
(
)
;
}
)
;
}
void
VideoSink
:
:
MaybeResolveEndPromise
(
)
{
AssertOwnerThread
(
)
;
if
(
VideoQueue
(
)
.
IsFinished
(
)
&
&
VideoQueue
(
)
.
GetSize
(
)
<
=
1
&
&
!
mVideoSinkEndRequest
.
Exists
(
)
)
{
if
(
VideoQueue
(
)
.
GetSize
(
)
=
=
1
)
{
RefPtr
<
VideoData
>
frame
=
VideoQueue
(
)
.
PopFront
(
)
;
if
(
mPendingDroppedCount
>
0
)
{
mFrameStats
.
Accumulate
(
{
0
0
0
0
0
1
}
)
;
mPendingDroppedCount
-
-
;
}
else
{
mFrameStats
.
NotifyPresentedFrame
(
)
;
}
}
TimeStamp
nowTime
;
const
auto
clockTime
=
mAudioSink
-
>
GetPosition
(
&
nowTime
)
;
mContainer
-
>
ClearFutureFrames
(
nowTime
)
;
if
(
mSecondaryContainer
)
{
mSecondaryContainer
-
>
ClearFutureFrames
(
nowTime
)
;
}
if
(
clockTime
<
mVideoFrameEndTime
)
{
VSINK_LOG_V
(
"
Not
reach
video
end
time
yet
reschedule
timer
to
resolve
"
"
end
promise
.
clockTime
=
%
"
PRId64
"
endTime
=
%
"
PRId64
clockTime
.
ToMicroseconds
(
)
mVideoFrameEndTime
.
ToMicroseconds
(
)
)
;
int64_t
delta
=
(
mVideoFrameEndTime
-
clockTime
)
.
ToMicroseconds
(
)
/
mAudioSink
-
>
PlaybackRate
(
)
;
TimeStamp
target
=
nowTime
+
TimeDuration
:
:
FromMicroseconds
(
delta
)
;
auto
resolveEndPromise
=
[
self
=
RefPtr
<
VideoSink
>
(
this
)
]
(
)
{
self
-
>
mEndPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
self
-
>
mUpdateScheduler
.
CompleteRequest
(
)
;
}
;
mUpdateScheduler
.
Ensure
(
target
std
:
:
move
(
resolveEndPromise
)
std
:
:
move
(
resolveEndPromise
)
)
;
}
else
{
mEndPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
}
}
}
void
VideoSink
:
:
SetSecondaryVideoContainer
(
VideoFrameContainer
*
aSecondary
)
{
AssertOwnerThread
(
)
;
mSecondaryContainer
=
aSecondary
;
if
(
!
IsPlaying
(
)
&
&
mSecondaryContainer
)
{
ImageContainer
*
mainImageContainer
=
mContainer
-
>
GetImageContainer
(
)
;
ImageContainer
*
secondaryImageContainer
=
mSecondaryContainer
-
>
GetImageContainer
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mainImageContainer
)
;
MOZ_DIAGNOSTIC_ASSERT
(
secondaryImageContainer
)
;
AutoLockImage
lockImage
(
mainImageContainer
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
RefPtr
<
Image
>
image
=
lockImage
.
GetImage
(
now
)
)
{
AutoTArray
<
ImageContainer
:
:
NonOwningImage
1
>
currentFrame
;
currentFrame
.
AppendElement
(
ImageContainer
:
:
NonOwningImage
(
image
now
1
ImageContainer
:
:
AllocateProducerID
(
)
)
)
;
secondaryImageContainer
-
>
SetCurrentImages
(
currentFrame
)
;
}
}
}
void
VideoSink
:
:
GetDebugInfo
(
dom
:
:
MediaSinkDebugInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
aInfo
.
mVideoSink
.
mIsStarted
=
IsStarted
(
)
;
aInfo
.
mVideoSink
.
mIsPlaying
=
IsPlaying
(
)
;
aInfo
.
mVideoSink
.
mFinished
=
VideoQueue
(
)
.
IsFinished
(
)
;
aInfo
.
mVideoSink
.
mSize
=
VideoQueue
(
)
.
GetSize
(
)
;
aInfo
.
mVideoSink
.
mVideoFrameEndTime
=
mVideoFrameEndTime
.
ToMicroseconds
(
)
;
aInfo
.
mVideoSink
.
mHasVideo
=
mHasVideo
;
aInfo
.
mVideoSink
.
mVideoSinkEndRequestExists
=
mVideoSinkEndRequest
.
Exists
(
)
;
aInfo
.
mVideoSink
.
mEndPromiseHolderIsEmpty
=
mEndPromiseHolder
.
IsEmpty
(
)
;
mAudioSink
-
>
GetDebugInfo
(
aInfo
)
;
}
bool
VideoSink
:
:
InitializeBlankImage
(
)
{
mBlankImage
=
mContainer
-
>
GetImageContainer
(
)
-
>
CreatePlanarYCbCrImage
(
)
;
if
(
mBlankImage
=
=
nullptr
)
{
return
false
;
}
SetImageToGreenPixel
(
mBlankImage
-
>
AsPlanarYCbCrImage
(
)
)
;
return
true
;
}
}
