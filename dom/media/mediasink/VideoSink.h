#
ifndef
VideoSink_h_
#
define
VideoSink_h_
#
include
"
FrameStatistics
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaSink
.
h
"
#
include
"
MediaTimer
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
VideoFrameContainer
.
h
"
namespace
mozilla
{
class
VideoFrameContainer
;
template
<
class
T
>
class
MediaQueue
;
namespace
media
{
class
VideoSink
:
public
MediaSink
{
typedef
mozilla
:
:
layers
:
:
ImageContainer
:
:
ProducerID
ProducerID
;
public
:
VideoSink
(
AbstractThread
*
aThread
MediaSink
*
aAudioSink
MediaQueue
<
MediaData
>
&
aVideoQueue
VideoFrameContainer
*
aContainer
bool
aRealTime
FrameStatistics
&
aFrameStats
int
aDelayDuration
uint32_t
aVQueueSentToCompositerSize
)
;
const
PlaybackParams
&
GetPlaybackParams
(
)
const
override
;
void
SetPlaybackParams
(
const
PlaybackParams
&
aParams
)
override
;
RefPtr
<
GenericPromise
>
OnEnded
(
TrackType
aType
)
override
;
int64_t
GetEndTime
(
TrackType
aType
)
const
override
;
int64_t
GetPosition
(
TimeStamp
*
aTimeStamp
=
nullptr
)
const
override
;
bool
HasUnplayedFrames
(
TrackType
aType
)
const
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
SetPlaying
(
bool
aPlaying
)
override
;
void
Redraw
(
)
override
;
void
Start
(
int64_t
aStartTime
const
MediaInfo
&
aInfo
)
override
;
void
Stop
(
)
override
;
bool
IsStarted
(
)
const
override
;
bool
IsPlaying
(
)
const
override
;
void
Shutdown
(
)
override
;
private
:
virtual
~
VideoSink
(
)
;
void
OnVideoQueueEvent
(
)
;
void
ConnectListener
(
)
;
void
DisconnectListener
(
)
;
void
RenderVideoFrames
(
int32_t
aMaxFrames
int64_t
aClockTime
=
0
const
TimeStamp
&
aClickTimeStamp
=
TimeStamp
(
)
)
;
void
TryUpdateRenderedVideoFrames
(
)
;
void
UpdateRenderedVideoFrames
(
)
;
void
UpdateRenderedVideoFramesByTimer
(
)
;
void
AssertOwnerThread
(
)
const
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
}
MediaQueue
<
MediaData
>
&
VideoQueue
(
)
const
{
return
mVideoQueue
;
}
const
RefPtr
<
AbstractThread
>
mOwnerThread
;
RefPtr
<
MediaSink
>
mAudioSink
;
MediaQueue
<
MediaData
>
&
mVideoQueue
;
VideoFrameContainer
*
mContainer
;
const
ProducerID
mProducerID
;
const
bool
mRealTime
;
FrameStatistics
&
mFrameStats
;
RefPtr
<
GenericPromise
>
mEndPromise
;
MozPromiseHolder
<
GenericPromise
>
mEndPromiseHolder
;
MozPromiseRequestHolder
<
GenericPromise
>
mVideoSinkEndRequest
;
int64_t
mVideoFrameEndTime
;
MediaEventListener
mPushListener
;
bool
mHasVideo
;
DelayedScheduler
mUpdateScheduler
;
const
int
mDelayDuration
;
const
uint32_t
mVideoQueueSendToCompositorSize
;
}
;
}
}
#
endif
