#
include
"
AudioSinkWrapper
.
h
"
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
AudioSink
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
nsPrintfCString
.
h
"
mozilla
:
:
LazyLogModule
gAudioSinkWrapperLog
(
"
AudioSinkWrapper
"
)
;
#
define
LOG
(
.
.
.
)
\
MOZ_LOG
(
gAudioSinkWrapperLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
;
#
define
LOGV
(
.
.
.
)
\
MOZ_LOG
(
gAudioSinkWrapperLog
mozilla
:
:
LogLevel
:
:
Verbose
(
__VA_ARGS__
)
)
;
namespace
mozilla
{
using
media
:
:
TimeUnit
;
AudioSinkWrapper
:
:
~
AudioSinkWrapper
(
)
=
default
;
void
AudioSinkWrapper
:
:
Shutdown
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mIsStarted
"
Must
be
called
after
playback
stopped
.
"
)
;
mCreator
=
nullptr
;
mEndedPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
}
RefPtr
<
MediaSink
:
:
EndedPromise
>
AudioSinkWrapper
:
:
OnEnded
(
TrackType
aType
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
)
{
return
mEndedPromise
;
}
return
nullptr
;
}
TimeUnit
AudioSinkWrapper
:
:
GetEndTime
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
&
&
mAudioSink
&
&
mAudioSink
-
>
AudioStreamCallbackStarted
(
)
)
{
return
mAudioSink
-
>
GetEndTime
(
)
;
}
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
&
&
!
mAudioSink
&
&
IsMuted
(
)
)
{
if
(
IsPlaying
(
)
)
{
return
GetSystemClockPosition
(
TimeStamp
:
:
Now
(
)
)
;
}
return
mPlayDuration
;
}
return
TimeUnit
:
:
Zero
(
)
;
}
TimeUnit
AudioSinkWrapper
:
:
GetSystemClockPosition
(
TimeStamp
aNow
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mPlayStartTime
.
IsNull
(
)
)
;
double
delta
=
(
aNow
-
mPlayStartTime
)
.
ToSeconds
(
)
;
return
mPlayDuration
+
TimeUnit
:
:
FromSeconds
(
delta
*
mParams
.
mPlaybackRate
)
;
}
bool
AudioSinkWrapper
:
:
IsMuted
(
)
const
{
AssertOwnerThread
(
)
;
return
mParams
.
mVolume
=
=
0
.
0
;
}
TimeUnit
AudioSinkWrapper
:
:
GetPosition
(
TimeStamp
*
aTimeStamp
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
TimeUnit
pos
;
TimeStamp
t
=
TimeStamp
:
:
Now
(
)
;
if
(
!
mAudioEnded
&
&
!
IsMuted
(
)
&
&
mAudioSink
)
{
if
(
mLastClockSource
=
=
ClockSource
:
:
SystemClock
)
{
TimeUnit
switchTime
=
GetSystemClockPosition
(
t
)
;
mAudioSink
-
>
UpdateStartTime
(
switchTime
)
;
LOGV
(
"
%
p
:
switching
to
audio
clock
at
media
time
%
lf
"
this
switchTime
.
ToSeconds
(
)
)
;
}
pos
=
mAudioSink
-
>
GetPosition
(
)
;
LOGV
(
"
%
p
:
Getting
position
from
the
Audio
Sink
%
lf
"
this
pos
.
ToSeconds
(
)
)
;
mLastClockSource
=
ClockSource
:
:
AudioStream
;
}
else
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
pos
=
GetSystemClockPosition
(
t
)
;
LOGV
(
"
%
p
:
Getting
position
from
the
system
clock
%
lf
"
this
pos
.
ToSeconds
(
)
)
;
if
(
mAudioQueue
.
GetSize
(
)
>
0
&
&
IsMuted
(
)
)
{
DropAudioPacketsIfNeeded
(
pos
)
;
if
(
CheckIfEnded
(
)
)
{
MOZ_ASSERT
(
!
mAudioSink
)
;
mEndedPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
}
}
mLastClockSource
=
ClockSource
:
:
SystemClock
;
}
else
{
pos
=
mPlayDuration
;
LOGV
(
"
%
p
:
Getting
static
position
not
playing
%
lf
"
this
pos
.
ToSeconds
(
)
)
;
mLastClockSource
=
ClockSource
:
:
Paused
;
}
if
(
aTimeStamp
)
{
*
aTimeStamp
=
t
;
}
return
pos
;
}
bool
AudioSinkWrapper
:
:
CheckIfEnded
(
)
const
{
return
mAudioQueue
.
IsFinished
(
)
&
&
mAudioQueue
.
GetSize
(
)
=
=
0u
;
}
bool
AudioSinkWrapper
:
:
HasUnplayedFrames
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
?
mAudioSink
-
>
HasUnplayedFrames
(
)
:
false
;
}
media
:
:
TimeUnit
AudioSinkWrapper
:
:
UnplayedDuration
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
?
mAudioSink
-
>
UnplayedDuration
(
)
:
media
:
:
TimeUnit
:
:
Zero
(
)
;
}
void
AudioSinkWrapper
:
:
DropAudioPacketsIfNeeded
(
const
TimeUnit
&
aMediaPosition
)
{
RefPtr
<
AudioData
>
audio
=
mAudioQueue
.
PeekFront
(
)
;
uint32_t
dropped
=
0
;
while
(
audio
&
&
audio
-
>
mTime
+
audio
-
>
mDuration
<
aMediaPosition
)
{
audio
=
mAudioQueue
.
PopFront
(
)
;
dropped
+
+
;
if
(
audio
)
{
LOGV
(
"
Dropping
audio
packets
:
media
position
:
%
lf
"
"
packet
dropped
:
[
%
lf
%
lf
]
(
%
u
so
far
)
.
\
n
"
aMediaPosition
.
ToSeconds
(
)
audio
-
>
mTime
.
ToSeconds
(
)
(
audio
-
>
GetEndTime
(
)
)
.
ToSeconds
(
)
dropped
)
;
}
audio
=
mAudioQueue
.
PeekFront
(
)
;
}
}
void
AudioSinkWrapper
:
:
OnMuted
(
bool
aMuted
)
{
AssertOwnerThread
(
)
;
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
OnMuted
(
%
s
)
"
this
aMuted
?
"
true
"
:
"
false
"
)
;
if
(
mAudioEnded
)
{
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
OnMuted
but
no
audio
track
"
this
)
;
return
;
}
if
(
aMuted
)
{
if
(
mAudioSink
)
{
LOG
(
"
AudioSinkWrapper
muted
shutting
down
AudioStream
.
"
)
;
mAudioSinkEndedPromise
.
DisconnectIfExists
(
)
;
if
(
IsPlaying
(
)
)
{
mPlayDuration
=
mAudioSink
-
>
GetPosition
(
)
;
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
}
Maybe
<
MozPromiseHolder
<
MediaSink
:
:
EndedPromise
>
>
rv
=
mAudioSink
-
>
Shutdown
(
ShutdownCause
:
:
Muting
)
;
if
(
rv
.
isSome
(
)
)
{
mEndedPromiseHolder
=
std
:
:
move
(
rv
.
ref
(
)
)
;
}
mAudioSink
=
nullptr
;
}
}
else
{
if
(
!
IsPlaying
(
)
)
{
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
OnMuted
:
not
playing
not
re
-
creating
an
"
"
AudioSink
"
this
)
;
return
;
}
LOG
(
"
%
p
:
AudioSinkWrapper
unmuted
re
-
creating
an
AudioStream
.
"
this
)
;
TimeUnit
mediaPosition
=
GetSystemClockPosition
(
TimeStamp
:
:
Now
(
)
)
;
nsresult
rv
=
StartAudioSink
(
mediaPosition
AudioSinkStartPolicy
:
:
ASYNC
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Could
not
start
AudioSink
from
AudioSinkWrapper
when
unmuting
"
)
;
}
}
}
void
AudioSinkWrapper
:
:
SetVolume
(
double
aVolume
)
{
AssertOwnerThread
(
)
;
bool
wasMuted
=
mParams
.
mVolume
=
=
0
;
bool
nowMuted
=
aVolume
=
=
0
.
;
mParams
.
mVolume
=
aVolume
;
if
(
!
wasMuted
&
&
nowMuted
)
{
OnMuted
(
true
)
;
}
else
if
(
wasMuted
&
&
!
nowMuted
)
{
OnMuted
(
false
)
;
}
if
(
mAudioSink
)
{
mAudioSink
-
>
SetVolume
(
aVolume
)
;
}
}
void
AudioSinkWrapper
:
:
SetStreamName
(
const
nsAString
&
aStreamName
)
{
AssertOwnerThread
(
)
;
if
(
mAudioSink
)
{
mAudioSink
-
>
SetStreamName
(
aStreamName
)
;
}
}
void
AudioSinkWrapper
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
AssertOwnerThread
(
)
;
if
(
!
mAudioEnded
&
&
mAudioSink
)
{
mAudioSink
-
>
SetPlaybackRate
(
aPlaybackRate
)
;
}
else
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
mPlayDuration
=
GetSystemClockPosition
(
now
)
;
mPlayStartTime
=
now
;
}
mParams
.
mPlaybackRate
=
aPlaybackRate
;
}
void
AudioSinkWrapper
:
:
SetPreservesPitch
(
bool
aPreservesPitch
)
{
AssertOwnerThread
(
)
;
mParams
.
mPreservesPitch
=
aPreservesPitch
;
if
(
mAudioSink
)
{
mAudioSink
-
>
SetPreservesPitch
(
aPreservesPitch
)
;
}
}
void
AudioSinkWrapper
:
:
SetPlaying
(
bool
aPlaying
)
{
AssertOwnerThread
(
)
;
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
SetPlaying
%
s
"
this
aPlaying
?
"
true
"
:
"
false
"
)
;
if
(
!
mIsStarted
)
{
return
;
}
if
(
mAudioSink
)
{
mAudioSink
-
>
SetPlaying
(
aPlaying
)
;
}
else
{
if
(
aPlaying
)
{
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
SetPlaying
:
starting
an
AudioSink
"
this
)
;
TimeUnit
switchTime
=
GetPosition
(
)
;
DropAudioPacketsIfNeeded
(
switchTime
)
;
StartAudioSink
(
switchTime
AudioSinkStartPolicy
:
:
SYNC
)
;
}
}
if
(
aPlaying
)
{
MOZ_ASSERT
(
mPlayStartTime
.
IsNull
(
)
)
;
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
}
else
{
mPlayDuration
=
GetPosition
(
)
;
mPlayStartTime
=
TimeStamp
(
)
;
}
}
double
AudioSinkWrapper
:
:
PlaybackRate
(
)
const
{
AssertOwnerThread
(
)
;
return
mParams
.
mPlaybackRate
;
}
nsresult
AudioSinkWrapper
:
:
Start
(
const
TimeUnit
&
aStartTime
const
MediaInfo
&
aInfo
)
{
LOG
(
"
%
p
AudioSinkWrapper
:
:
Start
"
this
)
;
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mIsStarted
"
playback
already
started
.
"
)
;
mIsStarted
=
true
;
mPlayDuration
=
aStartTime
;
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
mAudioEnded
=
IsAudioSourceEnded
(
aInfo
)
;
if
(
mAudioEnded
)
{
mEndedPromise
=
aInfo
.
HasAudio
(
)
?
MediaSink
:
:
EndedPromise
:
:
CreateAndResolve
(
true
__func__
)
:
nullptr
;
return
NS_OK
;
}
return
StartAudioSink
(
aStartTime
AudioSinkStartPolicy
:
:
SYNC
)
;
}
nsresult
AudioSinkWrapper
:
:
StartAudioSink
(
const
TimeUnit
&
aStartTime
AudioSinkStartPolicy
aPolicy
)
{
MOZ_RELEASE_ASSERT
(
!
mAudioSink
)
;
nsresult
rv
=
NS_OK
;
mAudioSinkEndedPromise
.
DisconnectIfExists
(
)
;
mEndedPromise
=
mEndedPromiseHolder
.
Ensure
(
__func__
)
;
mEndedPromise
-
>
Then
(
mOwnerThread
.
get
(
)
__func__
this
&
AudioSinkWrapper
:
:
OnAudioEnded
&
AudioSinkWrapper
:
:
OnAudioEnded
)
-
>
Track
(
mAudioSinkEndedPromise
)
;
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
StartAudioSink
(
%
s
)
"
this
aPolicy
=
=
AudioSinkStartPolicy
:
:
ASYNC
?
"
Async
"
:
"
Sync
"
)
;
if
(
IsMuted
(
)
)
{
LOG
(
"
%
p
:
Muted
:
not
starting
an
audio
sink
"
this
)
;
return
NS_OK
;
}
LOG
(
"
%
p
:
Not
muted
:
starting
a
new
audio
sink
"
this
)
;
if
(
aPolicy
=
=
AudioSinkStartPolicy
:
:
ASYNC
)
{
UniquePtr
<
AudioSink
>
audioSink
;
audioSink
.
reset
(
mCreator
-
>
Create
(
)
)
;
NS_DispatchBackgroundTask
(
NS_NewRunnableFunction
(
"
StartAudioSink
(
Async
part
:
initialization
)
"
[
self
=
RefPtr
<
AudioSinkWrapper
>
(
this
)
audioSink
{
std
:
:
move
(
audioSink
)
}
this
]
(
)
mutable
{
LOG
(
"
AudioSink
initialization
on
background
thread
"
)
;
nsresult
rv
=
audioSink
-
>
InitializeAudioStream
(
mParams
mAudioDevice
AudioSink
:
:
InitializationType
:
:
UNMUTING
)
;
mOwnerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
StartAudioSink
(
Async
part
:
start
from
MDSM
thread
)
"
[
self
=
RefPtr
<
AudioSinkWrapper
>
(
this
)
audioSink
{
std
:
:
move
(
audioSink
)
}
this
rv
]
(
)
mutable
{
LOG
(
"
AudioSink
async
init
done
back
on
MDSM
thread
"
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
"
Async
AudioSink
initialization
failed
"
)
;
mEndedPromiseHolder
.
RejectIfExists
(
rv
__func__
)
;
return
;
}
if
(
mAudioSink
|
|
IsMuted
(
)
|
|
!
mIsStarted
|
|
mPlayStartTime
.
IsNull
(
)
)
{
LOG
(
"
AudioSink
initialized
async
isn
'
t
needed
shutting
"
"
it
down
.
"
)
;
DebugOnly
<
Maybe
<
MozPromiseHolder
<
EndedPromise
>
>
>
rv
=
audioSink
-
>
Shutdown
(
)
;
MOZ_ASSERT
(
rv
.
inspect
(
)
.
isNothing
(
)
)
;
return
;
}
MOZ_ASSERT
(
!
mAudioSink
)
;
TimeUnit
switchTime
=
GetPosition
(
)
;
DropAudioPacketsIfNeeded
(
switchTime
)
;
mAudioSink
.
swap
(
audioSink
)
;
LOG
(
"
AudioSink
async
start
"
)
;
nsresult
rv2
=
mAudioSink
-
>
Start
(
switchTime
mEndedPromiseHolder
)
;
if
(
NS_FAILED
(
rv2
)
)
{
LOG
(
"
Async
AudioSinkWrapper
start
failed
"
)
;
mEndedPromiseHolder
.
RejectIfExists
(
rv2
__func__
)
;
}
}
)
)
;
}
)
)
;
}
else
{
mAudioSink
.
reset
(
mCreator
-
>
Create
(
)
)
;
nsresult
rv
=
mAudioSink
-
>
InitializeAudioStream
(
mParams
mAudioDevice
AudioSink
:
:
InitializationType
:
:
INITIAL
)
;
if
(
NS_FAILED
(
rv
)
)
{
mEndedPromiseHolder
.
RejectIfExists
(
rv
__func__
)
;
LOG
(
"
Sync
AudioSinkWrapper
initialization
failed
"
)
;
return
rv
;
}
rv
=
mAudioSink
-
>
Start
(
aStartTime
mEndedPromiseHolder
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
"
Sync
AudioSinkWrapper
start
failed
"
)
;
mEndedPromiseHolder
.
RejectIfExists
(
rv
__func__
)
;
}
}
return
rv
;
}
bool
AudioSinkWrapper
:
:
IsAudioSourceEnded
(
const
MediaInfo
&
aInfo
)
const
{
return
!
aInfo
.
HasAudio
(
)
|
|
(
mAudioQueue
.
IsFinished
(
)
&
&
mAudioQueue
.
GetSize
(
)
=
=
0u
)
;
}
void
AudioSinkWrapper
:
:
Stop
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
playback
not
started
.
"
)
;
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
Stop
"
this
)
;
mIsStarted
=
false
;
mAudioEnded
=
true
;
mAudioSinkEndedPromise
.
DisconnectIfExists
(
)
;
if
(
mAudioSink
)
{
DebugOnly
<
Maybe
<
MozPromiseHolder
<
EndedPromise
>
>
>
rv
=
mAudioSink
-
>
Shutdown
(
)
;
MOZ_ASSERT
(
rv
.
inspect
(
)
.
isNothing
(
)
)
;
mAudioSink
=
nullptr
;
mEndedPromise
=
nullptr
;
}
}
bool
AudioSinkWrapper
:
:
IsStarted
(
)
const
{
AssertOwnerThread
(
)
;
return
mIsStarted
;
}
bool
AudioSinkWrapper
:
:
IsPlaying
(
)
const
{
AssertOwnerThread
(
)
;
return
IsStarted
(
)
&
&
!
mPlayStartTime
.
IsNull
(
)
;
}
void
AudioSinkWrapper
:
:
OnAudioEnded
(
)
{
AssertOwnerThread
(
)
;
LOG
(
"
%
p
:
AudioSinkWrapper
:
:
OnAudioEnded
"
this
)
;
mAudioSinkEndedPromise
.
Complete
(
)
;
mPlayDuration
=
GetPosition
(
)
;
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
}
mAudioEnded
=
true
;
}
void
AudioSinkWrapper
:
:
GetDebugInfo
(
dom
:
:
MediaSinkDebugInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
aInfo
.
mAudioSinkWrapper
.
mIsPlaying
=
IsPlaying
(
)
;
aInfo
.
mAudioSinkWrapper
.
mIsStarted
=
IsStarted
(
)
;
aInfo
.
mAudioSinkWrapper
.
mAudioEnded
=
mAudioEnded
;
if
(
mAudioSink
)
{
mAudioSink
-
>
GetDebugInfo
(
aInfo
)
;
}
}
}
#
undef
LOG
#
undef
LOGV
