#
include
"
AudioSink
.
h
"
#
include
"
AudioSinkWrapper
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
VideoUtils
.
h
"
namespace
mozilla
{
namespace
media
{
AudioSinkWrapper
:
:
~
AudioSinkWrapper
(
)
{
}
void
AudioSinkWrapper
:
:
Shutdown
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mIsStarted
"
Must
be
called
after
playback
stopped
.
"
)
;
mCreator
=
nullptr
;
}
const
MediaSink
:
:
PlaybackParams
&
AudioSinkWrapper
:
:
GetPlaybackParams
(
)
const
{
AssertOwnerThread
(
)
;
return
mParams
;
}
void
AudioSinkWrapper
:
:
SetPlaybackParams
(
const
PlaybackParams
&
aParams
)
{
AssertOwnerThread
(
)
;
if
(
mAudioSink
)
{
mAudioSink
-
>
SetVolume
(
aParams
.
mVolume
)
;
mAudioSink
-
>
SetPlaybackRate
(
aParams
.
mPlaybackRate
)
;
mAudioSink
-
>
SetPreservesPitch
(
aParams
.
mPreservesPitch
)
;
}
mParams
=
aParams
;
}
RefPtr
<
GenericPromise
>
AudioSinkWrapper
:
:
OnEnded
(
TrackType
aType
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
)
{
return
mEndPromise
;
}
return
nullptr
;
}
TimeUnit
AudioSinkWrapper
:
:
GetEndTime
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
&
&
mAudioSink
)
{
return
mAudioSink
-
>
GetEndTime
(
)
;
}
return
TimeUnit
:
:
Zero
(
)
;
}
TimeUnit
AudioSinkWrapper
:
:
GetVideoPosition
(
TimeStamp
aNow
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mPlayStartTime
.
IsNull
(
)
)
;
double
delta
=
(
aNow
-
mPlayStartTime
)
.
ToSeconds
(
)
;
return
mPlayDuration
+
TimeUnit
:
:
FromSeconds
(
delta
*
mParams
.
mPlaybackRate
)
;
}
TimeUnit
AudioSinkWrapper
:
:
GetPosition
(
TimeStamp
*
aTimeStamp
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
Must
be
called
after
playback
starts
.
"
)
;
TimeUnit
pos
;
TimeStamp
t
=
TimeStamp
:
:
Now
(
)
;
if
(
!
mAudioEnded
)
{
pos
=
mAudioSink
-
>
GetPosition
(
)
;
}
else
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
pos
=
GetVideoPosition
(
t
)
;
}
else
{
pos
=
mPlayDuration
;
}
if
(
aTimeStamp
)
{
*
aTimeStamp
=
t
;
}
return
pos
;
}
bool
AudioSinkWrapper
:
:
HasUnplayedFrames
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
return
mAudioSink
?
mAudioSink
-
>
HasUnplayedFrames
(
)
:
false
;
}
void
AudioSinkWrapper
:
:
SetVolume
(
double
aVolume
)
{
AssertOwnerThread
(
)
;
mParams
.
mVolume
=
aVolume
;
if
(
mAudioSink
)
{
mAudioSink
-
>
SetVolume
(
aVolume
)
;
}
}
void
AudioSinkWrapper
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
AssertOwnerThread
(
)
;
if
(
!
mAudioEnded
)
{
mAudioSink
-
>
SetPlaybackRate
(
aPlaybackRate
)
;
}
else
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
mPlayDuration
=
GetVideoPosition
(
now
)
;
mPlayStartTime
=
now
;
}
mParams
.
mPlaybackRate
=
aPlaybackRate
;
}
void
AudioSinkWrapper
:
:
SetPreservesPitch
(
bool
aPreservesPitch
)
{
AssertOwnerThread
(
)
;
mParams
.
mPreservesPitch
=
aPreservesPitch
;
if
(
mAudioSink
)
{
mAudioSink
-
>
SetPreservesPitch
(
aPreservesPitch
)
;
}
}
void
AudioSinkWrapper
:
:
SetPlaying
(
bool
aPlaying
)
{
AssertOwnerThread
(
)
;
if
(
!
mIsStarted
)
{
return
;
}
if
(
mAudioSink
)
{
mAudioSink
-
>
SetPlaying
(
aPlaying
)
;
}
if
(
aPlaying
)
{
MOZ_ASSERT
(
mPlayStartTime
.
IsNull
(
)
)
;
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
}
else
{
mPlayDuration
=
GetPosition
(
)
;
mPlayStartTime
=
TimeStamp
(
)
;
}
}
void
AudioSinkWrapper
:
:
Start
(
const
TimeUnit
&
aStartTime
const
MediaInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mIsStarted
"
playback
already
started
.
"
)
;
mIsStarted
=
true
;
mPlayDuration
=
aStartTime
;
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
mAudioEnded
=
!
aInfo
.
HasAudio
(
)
;
if
(
aInfo
.
HasAudio
(
)
)
{
mAudioSink
.
reset
(
mCreator
-
>
Create
(
)
)
;
mEndPromise
=
mAudioSink
-
>
Init
(
mParams
)
;
mEndPromise
-
>
Then
(
mOwnerThread
.
get
(
)
__func__
this
&
AudioSinkWrapper
:
:
OnAudioEnded
&
AudioSinkWrapper
:
:
OnAudioEnded
)
-
>
Track
(
mAudioSinkPromise
)
;
}
}
void
AudioSinkWrapper
:
:
Stop
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsStarted
"
playback
not
started
.
"
)
;
mIsStarted
=
false
;
mAudioEnded
=
true
;
if
(
mAudioSink
)
{
mAudioSinkPromise
.
DisconnectIfExists
(
)
;
mAudioSink
-
>
Shutdown
(
)
;
mAudioSink
=
nullptr
;
mEndPromise
=
nullptr
;
}
}
bool
AudioSinkWrapper
:
:
IsStarted
(
)
const
{
AssertOwnerThread
(
)
;
return
mIsStarted
;
}
bool
AudioSinkWrapper
:
:
IsPlaying
(
)
const
{
AssertOwnerThread
(
)
;
return
IsStarted
(
)
&
&
!
mPlayStartTime
.
IsNull
(
)
;
}
void
AudioSinkWrapper
:
:
OnAudioEnded
(
)
{
AssertOwnerThread
(
)
;
mAudioSinkPromise
.
Complete
(
)
;
mPlayDuration
=
GetPosition
(
)
;
if
(
!
mPlayStartTime
.
IsNull
(
)
)
{
mPlayStartTime
=
TimeStamp
:
:
Now
(
)
;
}
mAudioEnded
=
true
;
}
nsCString
AudioSinkWrapper
:
:
GetDebugInfo
(
)
{
AssertOwnerThread
(
)
;
auto
str
=
nsPrintfCString
(
"
AudioSinkWrapper
:
IsStarted
=
%
d
IsPlaying
=
%
d
AudioEnded
=
%
d
"
IsStarted
(
)
IsPlaying
(
)
mAudioEnded
)
;
if
(
mAudioSink
)
{
AppendStringIfNotEmpty
(
str
mAudioSink
-
>
GetDebugInfo
(
)
)
;
}
return
Move
(
str
)
;
}
}
}
