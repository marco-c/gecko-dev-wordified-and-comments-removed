#
if
!
defined
(
DecodedAudioDataSink_h__
)
#
define
DecodedAudioDataSink_h__
#
include
"
AudioSink
.
h
"
#
include
"
AudioStream
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
dom
/
AudioChannelBinding
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
namespace
mozilla
{
namespace
media
{
class
DecodedAudioDataSink
:
public
AudioSink
private
AudioStream
:
:
DataSource
{
public
:
DecodedAudioDataSink
(
MediaQueue
<
MediaData
>
&
aAudioQueue
int64_t
aStartTime
const
AudioInfo
&
aInfo
dom
:
:
AudioChannel
aChannel
)
;
RefPtr
<
GenericPromise
>
Init
(
const
PlaybackParams
&
aParams
)
override
;
int64_t
GetPosition
(
)
override
;
int64_t
GetEndTime
(
)
const
override
;
bool
HasUnplayedFrames
(
)
override
;
void
Shutdown
(
)
override
;
void
SetVolume
(
double
aVolume
)
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
override
;
void
SetPlaying
(
bool
aPlaying
)
override
;
private
:
virtual
~
DecodedAudioDataSink
(
)
;
nsresult
InitializeAudioStream
(
const
PlaybackParams
&
aParams
)
;
UniquePtr
<
AudioStream
:
:
Chunk
>
PopFrames
(
uint32_t
aFrames
)
override
;
bool
Ended
(
)
const
override
;
void
Drained
(
)
override
;
RefPtr
<
AudioStream
>
mAudioStream
;
const
int64_t
mStartTime
;
Atomic
<
int64_t
>
mWritten
;
int64_t
mLastGoodPosition
;
const
AudioInfo
mInfo
;
const
dom
:
:
AudioChannel
mChannel
;
bool
mPlaying
;
MozPromiseHolder
<
GenericPromise
>
mEndPromise
;
RefPtr
<
AudioData
>
mCurrentData
;
UniquePtr
<
AudioBufferCursor
>
mCursor
;
bool
mErrored
=
false
;
Atomic
<
bool
>
mPlaybackComplete
;
}
;
}
}
#
endif
