#
include
"
MediaStreamGraph
.
h
"
#
include
"
OutputStreamManager
.
h
"
namespace
mozilla
{
OutputStreamData
:
:
~
OutputStreamData
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mPort
)
{
mPort
-
>
Destroy
(
)
;
}
}
void
OutputStreamData
:
:
Init
(
OutputStreamManager
*
aOwner
ProcessedMediaStream
*
aStream
)
{
mOwner
=
aOwner
;
mStream
=
aStream
;
}
void
OutputStreamData
:
:
Connect
(
MediaStream
*
aStream
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mPort
"
Already
connected
?
"
)
;
MOZ_ASSERT
(
!
mStream
-
>
IsDestroyed
(
)
"
Can
'
t
connect
a
destroyed
stream
.
"
)
;
mPort
=
mStream
-
>
AllocateInputPort
(
aStream
)
;
}
bool
OutputStreamData
:
:
Disconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStream
-
>
IsDestroyed
(
)
)
{
return
false
;
}
if
(
mPort
)
{
mPort
-
>
Destroy
(
)
;
mPort
=
nullptr
;
}
return
true
;
}
bool
OutputStreamData
:
:
Equals
(
MediaStream
*
aStream
)
const
{
return
mStream
=
=
aStream
;
}
MediaStreamGraph
*
OutputStreamData
:
:
Graph
(
)
const
{
return
mStream
-
>
Graph
(
)
;
}
void
OutputStreamManager
:
:
Add
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
Graph
(
)
|
|
Graph
(
)
=
=
aStream
-
>
Graph
(
)
)
;
if
(
aFinishWhenEnded
)
{
aStream
-
>
SetAutofinish
(
true
)
;
}
OutputStreamData
*
p
=
mStreams
.
AppendElement
(
)
;
p
-
>
Init
(
this
aStream
)
;
if
(
mInputStream
)
{
p
-
>
Connect
(
mInputStream
)
;
}
}
void
OutputStreamManager
:
:
Remove
(
MediaStream
*
aStream
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
int32_t
i
=
mStreams
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
mStreams
[
i
]
.
Equals
(
aStream
)
)
{
mStreams
.
RemoveElementAt
(
i
)
;
break
;
}
}
}
void
OutputStreamManager
:
:
Connect
(
MediaStream
*
aStream
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mInputStream
=
aStream
;
for
(
auto
&
&
os
:
mStreams
)
{
os
.
Connect
(
aStream
)
;
}
}
void
OutputStreamManager
:
:
Disconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mInputStream
=
nullptr
;
for
(
int32_t
i
=
mStreams
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
!
mStreams
[
i
]
.
Disconnect
(
)
)
{
mStreams
.
RemoveElementAt
(
i
)
;
}
}
}
}
