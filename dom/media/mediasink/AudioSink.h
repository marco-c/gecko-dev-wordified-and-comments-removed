#
ifndef
AudioSink_h__
#
define
AudioSink_h__
#
include
"
AudioStream
.
h
"
#
include
"
AudibilityMonitor
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaQueue
.
h
"
#
include
"
MediaSink
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
AudioConverter
;
class
AudioSink
:
private
AudioStream
:
:
DataSource
{
public
:
struct
PlaybackParams
{
PlaybackParams
(
double
aVolume
double
aPlaybackRate
bool
aPreservesPitch
)
:
mVolume
(
aVolume
)
mPlaybackRate
(
aPlaybackRate
)
mPreservesPitch
(
aPreservesPitch
)
{
}
double
mVolume
;
double
mPlaybackRate
;
bool
mPreservesPitch
;
}
;
AudioSink
(
AbstractThread
*
aThread
MediaQueue
<
AudioData
>
&
aAudioQueue
const
media
:
:
TimeUnit
&
aStartTime
const
AudioInfo
&
aInfo
AudioDeviceInfo
*
aAudioDevice
)
;
~
AudioSink
(
)
;
Result
<
already_AddRefed
<
MediaSink
:
:
EndedPromise
>
nsresult
>
Start
(
const
PlaybackParams
&
aParams
)
;
media
:
:
TimeUnit
GetPosition
(
)
;
media
:
:
TimeUnit
GetEndTime
(
)
const
;
bool
HasUnplayedFrames
(
)
;
void
Shutdown
(
)
;
void
SetVolume
(
double
aVolume
)
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
;
void
SetPlaying
(
bool
aPlaying
)
;
MediaEventSource
<
bool
>
&
AudibleEvent
(
)
{
return
mAudibleEvent
;
}
void
GetDebugInfo
(
dom
:
:
MediaSinkDebugInfo
&
aInfo
)
;
const
RefPtr
<
AudioDeviceInfo
>
&
AudioDevice
(
)
{
return
mAudioDevice
;
}
private
:
nsresult
InitializeAudioStream
(
const
PlaybackParams
&
aParams
)
;
UniquePtr
<
AudioStream
:
:
Chunk
>
PopFrames
(
uint32_t
aFrames
)
override
;
bool
Ended
(
)
const
override
;
void
CheckIsAudible
(
const
AudioData
*
aData
)
;
RefPtr
<
AudioStream
>
mAudioStream
;
const
media
:
:
TimeUnit
mStartTime
;
media
:
:
TimeUnit
mLastGoodPosition
;
const
AudioInfo
mInfo
;
const
RefPtr
<
AudioDeviceInfo
>
mAudioDevice
;
bool
mPlaying
;
RefPtr
<
AudioData
>
mCurrentData
;
mutable
Monitor
mMonitor
;
UniquePtr
<
AudioBufferCursor
>
mCursor
;
int64_t
mWritten
;
Atomic
<
bool
>
mErrored
;
const
RefPtr
<
AbstractThread
>
mOwnerThread
;
void
OnAudioPopped
(
const
RefPtr
<
AudioData
>
&
aSample
)
;
void
OnAudioPushed
(
const
RefPtr
<
AudioData
>
&
aSample
)
;
void
NotifyAudioNeeded
(
)
;
uint32_t
DrainConverter
(
uint32_t
aMaxFrames
=
UINT32_MAX
)
;
already_AddRefed
<
AudioData
>
CreateAudioFromBuffer
(
AlignedAudioBuffer
&
&
aBuffer
AudioData
*
aReference
)
;
uint32_t
PushProcessedAudio
(
AudioData
*
aData
)
;
UniquePtr
<
AudioConverter
>
mConverter
;
MediaQueue
<
AudioData
>
mProcessedQueue
;
Atomic
<
uint64_t
>
mProcessedQueueLength
;
MediaEventListener
mAudioQueueListener
;
MediaEventListener
mAudioQueueFinishListener
;
MediaEventListener
mProcessedQueueListener
;
int64_t
mFramesParsed
;
Maybe
<
RefPtr
<
AudioData
>
>
mLastProcessedPacket
;
media
:
:
TimeUnit
mLastEndTime
;
uint32_t
mOutputRate
;
uint32_t
mOutputChannels
;
AudibilityMonitor
mAudibilityMonitor
;
bool
mIsAudioDataAudible
;
MediaEventProducer
<
bool
>
mAudibleEvent
;
MediaQueue
<
AudioData
>
&
mAudioQueue
;
}
;
}
#
endif
