#
ifndef
DecodedStream_h_
#
define
DecodedStream_h_
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaSink
.
h
"
#
include
"
OutputStreamManager
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
DecodedStreamData
;
class
MediaData
;
class
MediaStream
;
class
ProcessedMediaStream
;
class
TimeStamp
;
template
<
class
T
>
class
MediaQueue
;
class
DecodedStream
:
public
media
:
:
MediaSink
{
using
media
:
:
MediaSink
:
:
PlaybackParams
;
public
:
DecodedStream
(
AbstractThread
*
aOwnerThread
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
)
;
const
PlaybackParams
&
GetPlaybackParams
(
)
const
override
;
void
SetPlaybackParams
(
const
PlaybackParams
&
aParams
)
override
;
RefPtr
<
GenericPromise
>
OnEnded
(
TrackType
aType
)
override
;
int64_t
GetEndTime
(
TrackType
aType
)
const
override
;
int64_t
GetPosition
(
TimeStamp
*
aTimeStamp
=
nullptr
)
const
override
;
bool
HasUnplayedFrames
(
TrackType
aType
)
const
override
{
return
false
;
}
void
SetVolume
(
double
aVolume
)
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
override
;
void
SetPlaying
(
bool
aPlaying
)
override
;
void
Start
(
int64_t
aStartTime
const
MediaInfo
&
aInfo
)
override
;
void
Stop
(
)
override
;
bool
IsStarted
(
)
const
override
;
bool
IsPlaying
(
)
const
override
;
void
AddOutput
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
;
void
RemoveOutput
(
MediaStream
*
aStream
)
;
void
SetSameOrigin
(
bool
aSameOrigin
)
;
bool
HasConsumers
(
)
const
;
protected
:
virtual
~
DecodedStream
(
)
;
private
:
void
CreateData
(
MozPromiseHolder
<
GenericPromise
>
&
&
aPromise
)
;
void
DestroyData
(
UniquePtr
<
DecodedStreamData
>
aData
)
;
void
OnDataCreated
(
UniquePtr
<
DecodedStreamData
>
aData
)
;
void
InitTracks
(
)
;
void
AdvanceTracks
(
)
;
void
SendAudio
(
double
aVolume
bool
aIsSameOrigin
)
;
void
SendVideo
(
bool
aIsSameOrigin
)
;
void
SendData
(
)
;
void
AssertOwnerThread
(
)
const
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
}
void
ConnectListener
(
)
;
void
DisconnectListener
(
)
;
const
RefPtr
<
AbstractThread
>
mOwnerThread
;
OutputStreamManager
mOutputStreamManager
;
UniquePtr
<
DecodedStreamData
>
mData
;
RefPtr
<
GenericPromise
>
mFinishPromise
;
bool
mPlaying
;
bool
mSameOrigin
;
PlaybackParams
mParams
;
Maybe
<
int64_t
>
mStartTime
;
MediaInfo
mInfo
;
MediaQueue
<
MediaData
>
&
mAudioQueue
;
MediaQueue
<
MediaData
>
&
mVideoQueue
;
MediaEventListener
mAudioPushListener
;
MediaEventListener
mVideoPushListener
;
MediaEventListener
mAudioFinishListener
;
MediaEventListener
mVideoFinishListener
;
}
;
}
#
endif
