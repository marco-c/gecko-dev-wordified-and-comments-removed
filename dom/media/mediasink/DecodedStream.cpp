#
include
"
DecodedStream
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
MediaQueue
.
h
"
#
include
"
MediaTrackGraph
.
h
"
#
include
"
MediaTrackListener
.
h
"
#
include
"
OutputStreamManager
.
h
"
#
include
"
SharedBuffer
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
{
using
media
:
:
NullableTimeUnit
;
using
media
:
:
TimeUnit
;
struct
PlaybackInfoInit
{
TimeUnit
mStartTime
;
MediaInfo
mInfo
;
}
;
class
DecodedStreamGraphListener
;
class
DecodedStreamTrackListener
:
public
MediaTrackListener
{
public
:
DecodedStreamTrackListener
(
DecodedStreamGraphListener
*
aGraphListener
SourceMediaTrack
*
aTrack
)
;
void
NotifyOutput
(
MediaTrackGraph
*
aGraph
TrackTime
aCurrentTrackTime
)
override
;
void
NotifyEnded
(
MediaTrackGraph
*
aGraph
)
override
;
private
:
const
RefPtr
<
DecodedStreamGraphListener
>
mGraphListener
;
const
RefPtr
<
SourceMediaTrack
>
mTrack
;
}
;
class
DecodedStreamGraphListener
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DecodedStreamGraphListener
)
public
:
DecodedStreamGraphListener
(
SourceMediaTrack
*
aAudioTrack
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aAudioEndedHolder
SourceMediaTrack
*
aVideoTrack
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aVideoEndedHolder
AbstractThread
*
aMainThread
)
:
mAudioTrackListener
(
aAudioTrack
?
MakeRefPtr
<
DecodedStreamTrackListener
>
(
this
aAudioTrack
)
:
nullptr
)
mAudioEndedHolder
(
std
:
:
move
(
aAudioEndedHolder
)
)
mVideoTrackListener
(
aVideoTrack
?
MakeRefPtr
<
DecodedStreamTrackListener
>
(
this
aVideoTrack
)
:
nullptr
)
mVideoEndedHolder
(
std
:
:
move
(
aVideoEndedHolder
)
)
mAudioTrack
(
aAudioTrack
)
mVideoTrack
(
aVideoTrack
)
mAbstractMainThread
(
aMainThread
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAudioTrackListener
)
{
mAudioTrack
-
>
AddListener
(
mAudioTrackListener
)
;
}
else
{
mAudioEnded
=
true
;
mAudioEndedHolder
.
ResolveIfExists
(
true
__func__
)
;
}
if
(
mVideoTrackListener
)
{
mVideoTrack
-
>
AddListener
(
mVideoTrackListener
)
;
}
else
{
mVideoEnded
=
true
;
mVideoEndedHolder
.
ResolveIfExists
(
true
__func__
)
;
}
}
void
NotifyOutput
(
SourceMediaTrack
*
aTrack
TrackTime
aCurrentTrackTime
)
{
if
(
aTrack
=
=
mAudioTrack
)
{
if
(
aCurrentTrackTime
>
=
mAudioEnd
)
{
mAudioTrack
-
>
End
(
)
;
}
}
else
if
(
aTrack
=
=
mVideoTrack
)
{
if
(
aCurrentTrackTime
>
=
mVideoEnd
)
{
mVideoTrack
-
>
End
(
)
;
}
}
else
{
MOZ_CRASH
(
"
Unexpected
source
track
"
)
;
}
if
(
aTrack
!
=
mAudioTrack
&
&
mAudioTrack
&
&
!
mAudioEnded
)
{
return
;
}
MOZ_ASSERT_IF
(
aTrack
=
=
mAudioTrack
!
mAudioEnded
)
;
MOZ_ASSERT_IF
(
aTrack
=
=
mVideoTrack
!
mVideoEnded
)
;
mOnOutput
.
Notify
(
aTrack
-
>
TrackTimeToMicroseconds
(
aCurrentTrackTime
)
)
;
}
void
NotifyEnded
(
SourceMediaTrack
*
aTrack
)
{
if
(
aTrack
=
=
mAudioTrack
)
{
mAudioEnded
=
true
;
}
else
if
(
aTrack
=
=
mVideoTrack
)
{
mVideoEnded
=
true
;
}
else
{
MOZ_CRASH
(
"
Unexpected
source
track
"
)
;
}
aTrack
-
>
Graph
(
)
-
>
DispatchToMainThreadStableState
(
NewRunnableMethod
<
RefPtr
<
SourceMediaTrack
>
>
(
"
DecodedStreamGraphListener
:
:
DoNotifyTrackEnded
"
this
&
DecodedStreamGraphListener
:
:
DoNotifyTrackEnded
aTrack
)
)
;
}
void
EndTrackAt
(
SourceMediaTrack
*
aTrack
TrackTime
aEnd
)
{
if
(
aTrack
=
=
mAudioTrack
)
{
mAudioEnd
=
aEnd
;
}
else
if
(
aTrack
=
=
mVideoTrack
)
{
mVideoEnd
=
aEnd
;
}
else
{
MOZ_CRASH
(
"
Unexpected
source
track
"
)
;
}
}
void
DoNotifyTrackEnded
(
SourceMediaTrack
*
aTrack
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aTrack
=
=
mAudioTrack
)
{
mAudioEndedHolder
.
ResolveIfExists
(
true
__func__
)
;
}
else
if
(
aTrack
=
=
mVideoTrack
)
{
mVideoEndedHolder
.
ResolveIfExists
(
true
__func__
)
;
}
else
{
MOZ_CRASH
(
"
Unexpected
source
track
"
)
;
}
}
void
Forget
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAudioTrackListener
&
&
!
mAudioTrack
-
>
IsDestroyed
(
)
)
{
mAudioTrack
-
>
End
(
)
;
mAudioTrack
-
>
RemoveListener
(
mAudioTrackListener
)
;
}
mAudioTrackListener
=
nullptr
;
mAudioEndedHolder
.
ResolveIfExists
(
false
__func__
)
;
if
(
mVideoTrackListener
&
&
!
mVideoTrack
-
>
IsDestroyed
(
)
)
{
mVideoTrack
-
>
End
(
)
;
mVideoTrack
-
>
RemoveListener
(
mVideoTrackListener
)
;
}
mVideoTrackListener
=
nullptr
;
mVideoEndedHolder
.
ResolveIfExists
(
false
__func__
)
;
}
MediaEventSource
<
int64_t
>
&
OnOutput
(
)
{
return
mOnOutput
;
}
private
:
~
DecodedStreamGraphListener
(
)
{
MOZ_ASSERT
(
mAudioEndedHolder
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mVideoEndedHolder
.
IsEmpty
(
)
)
;
}
MediaEventProducer
<
int64_t
>
mOnOutput
;
RefPtr
<
DecodedStreamTrackListener
>
mAudioTrackListener
;
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
mAudioEndedHolder
;
RefPtr
<
DecodedStreamTrackListener
>
mVideoTrackListener
;
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
mVideoEndedHolder
;
bool
mAudioEnded
=
false
;
bool
mVideoEnded
=
false
;
const
RefPtr
<
SourceMediaTrack
>
mAudioTrack
;
const
RefPtr
<
SourceMediaTrack
>
mVideoTrack
;
Atomic
<
TrackTime
>
mAudioEnd
{
TRACK_TIME_MAX
}
;
Atomic
<
TrackTime
>
mVideoEnd
{
TRACK_TIME_MAX
}
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
}
;
DecodedStreamTrackListener
:
:
DecodedStreamTrackListener
(
DecodedStreamGraphListener
*
aGraphListener
SourceMediaTrack
*
aTrack
)
:
mGraphListener
(
aGraphListener
)
mTrack
(
aTrack
)
{
}
void
DecodedStreamTrackListener
:
:
NotifyOutput
(
MediaTrackGraph
*
aGraph
TrackTime
aCurrentTrackTime
)
{
mGraphListener
-
>
NotifyOutput
(
mTrack
aCurrentTrackTime
)
;
}
void
DecodedStreamTrackListener
:
:
NotifyEnded
(
MediaTrackGraph
*
aGraph
)
{
mGraphListener
-
>
NotifyEnded
(
mTrack
)
;
}
class
DecodedStreamData
final
{
public
:
DecodedStreamData
(
OutputStreamManager
*
aOutputStreamManager
PlaybackInfoInit
&
&
aInit
RefPtr
<
SourceMediaTrack
>
aAudioTrack
RefPtr
<
SourceMediaTrack
>
aVideoTrack
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aAudioEndedPromise
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aVideoEndedPromise
AbstractThread
*
aMainThread
)
;
~
DecodedStreamData
(
)
;
MediaEventSource
<
int64_t
>
&
OnOutput
(
)
;
void
Forget
(
)
;
void
GetDebugInfo
(
dom
:
:
DecodedStreamDataDebugInfo
&
aInfo
)
;
void
WriteVideoToSegment
(
layers
:
:
Image
*
aImage
const
TimeUnit
&
aStart
const
TimeUnit
&
aEnd
const
gfx
:
:
IntSize
&
aIntrinsicSize
const
TimeStamp
&
aTimeStamp
VideoSegment
*
aOutput
const
PrincipalHandle
&
aPrincipalHandle
)
;
int64_t
mAudioFramesWritten
;
TrackTime
mVideoTrackWritten
;
TrackTime
mAudioTrackWritten
;
TimeUnit
mNextAudioTime
;
NullableTimeUnit
mLastVideoStartTime
;
NullableTimeUnit
mLastVideoEndTime
;
TimeStamp
mLastVideoTimeStamp
;
RefPtr
<
layers
:
:
Image
>
mLastVideoImage
;
gfx
:
:
IntSize
mLastVideoImageDisplaySize
;
bool
mHaveSentFinishAudio
;
bool
mHaveSentFinishVideo
;
const
RefPtr
<
SourceMediaTrack
>
mAudioTrack
;
const
RefPtr
<
SourceMediaTrack
>
mVideoTrack
;
const
RefPtr
<
DecodedStreamGraphListener
>
mListener
;
const
RefPtr
<
OutputStreamManager
>
mOutputStreamManager
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
}
;
DecodedStreamData
:
:
DecodedStreamData
(
OutputStreamManager
*
aOutputStreamManager
PlaybackInfoInit
&
&
aInit
RefPtr
<
SourceMediaTrack
>
aAudioTrack
RefPtr
<
SourceMediaTrack
>
aVideoTrack
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aAudioEndedPromise
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
&
&
aVideoEndedPromise
AbstractThread
*
aMainThread
)
:
mAudioFramesWritten
(
0
)
mVideoTrackWritten
(
0
)
mAudioTrackWritten
(
0
)
mNextAudioTime
(
aInit
.
mStartTime
)
mHaveSentFinishAudio
(
false
)
mHaveSentFinishVideo
(
false
)
mAudioTrack
(
std
:
:
move
(
aAudioTrack
)
)
mVideoTrack
(
std
:
:
move
(
aVideoTrack
)
)
mListener
(
MakeRefPtr
<
DecodedStreamGraphListener
>
(
mAudioTrack
std
:
:
move
(
aAudioEndedPromise
)
mVideoTrack
std
:
:
move
(
aVideoEndedPromise
)
aMainThread
)
)
mOutputStreamManager
(
aOutputStreamManager
)
mAbstractMainThread
(
aMainThread
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOutputStreamManager
-
>
HasTracks
(
mAudioTrack
mVideoTrack
)
"
Tracks
must
be
pre
-
created
on
main
thread
"
)
;
}
DecodedStreamData
:
:
~
DecodedStreamData
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
MediaEventSource
<
int64_t
>
&
DecodedStreamData
:
:
OnOutput
(
)
{
return
mListener
-
>
OnOutput
(
)
;
}
void
DecodedStreamData
:
:
Forget
(
)
{
mListener
-
>
Forget
(
)
;
}
void
DecodedStreamData
:
:
GetDebugInfo
(
dom
:
:
DecodedStreamDataDebugInfo
&
aInfo
)
{
aInfo
.
mInstance
=
NS_ConvertUTF8toUTF16
(
nsPrintfCString
(
"
%
p
"
this
)
)
;
aInfo
.
mAudioFramesWritten
=
mAudioFramesWritten
;
aInfo
.
mStreamAudioWritten
=
mAudioTrackWritten
;
aInfo
.
mNextAudioTime
=
mNextAudioTime
.
ToMicroseconds
(
)
;
aInfo
.
mLastVideoStartTime
=
mLastVideoStartTime
.
valueOr
(
TimeUnit
:
:
FromMicroseconds
(
-
1
)
)
.
ToMicroseconds
(
)
;
aInfo
.
mLastVideoEndTime
=
mLastVideoEndTime
.
valueOr
(
TimeUnit
:
:
FromMicroseconds
(
-
1
)
)
.
ToMicroseconds
(
)
;
aInfo
.
mHaveSentFinishAudio
=
mHaveSentFinishAudio
;
aInfo
.
mHaveSentFinishVideo
=
mHaveSentFinishVideo
;
}
DecodedStream
:
:
DecodedStream
(
AbstractThread
*
aOwnerThread
AbstractThread
*
aMainThread
MediaQueue
<
AudioData
>
&
aAudioQueue
MediaQueue
<
VideoData
>
&
aVideoQueue
OutputStreamManager
*
aOutputStreamManager
)
:
mOwnerThread
(
aOwnerThread
)
mAbstractMainThread
(
aMainThread
)
mOutputStreamManager
(
aOutputStreamManager
)
mWatchManager
(
this
mOwnerThread
)
mPlaying
(
false
"
DecodedStream
:
:
mPlaying
"
)
mPrincipalHandle
(
aOwnerThread
PRINCIPAL_HANDLE_NONE
"
DecodedStream
:
:
mPrincipalHandle
(
Mirror
)
"
)
mAudioQueue
(
aAudioQueue
)
mVideoQueue
(
aVideoQueue
)
{
mPrincipalHandle
.
Connect
(
mOutputStreamManager
-
>
CanonicalPrincipalHandle
(
)
)
;
mWatchManager
.
Watch
(
mPlaying
&
DecodedStream
:
:
PlayingChanged
)
;
PlayingChanged
(
)
;
}
DecodedStream
:
:
~
DecodedStream
(
)
{
MOZ_ASSERT
(
mStartTime
.
isNothing
(
)
"
playback
should
'
ve
ended
.
"
)
;
NS_ProxyRelease
(
"
DecodedStream
:
:
mOutputStreamManager
"
mAbstractMainThread
do_AddRef
(
mOutputStreamManager
)
)
;
}
const
MediaSink
:
:
PlaybackParams
&
DecodedStream
:
:
GetPlaybackParams
(
)
const
{
AssertOwnerThread
(
)
;
return
mParams
;
}
void
DecodedStream
:
:
SetPlaybackParams
(
const
PlaybackParams
&
aParams
)
{
AssertOwnerThread
(
)
;
mParams
=
aParams
;
}
RefPtr
<
DecodedStream
:
:
EndedPromise
>
DecodedStream
:
:
OnEnded
(
TrackType
aType
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mStartTime
.
isSome
(
)
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
&
&
mInfo
.
HasAudio
(
)
)
{
return
mAudioEndedPromise
;
}
else
if
(
aType
=
=
TrackInfo
:
:
kVideoTrack
&
&
mInfo
.
HasVideo
(
)
)
{
return
mVideoEndedPromise
;
}
return
nullptr
;
}
nsresult
DecodedStream
:
:
Start
(
const
TimeUnit
&
aStartTime
const
MediaInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mStartTime
.
isNothing
(
)
"
playback
already
started
.
"
)
;
mStartTime
.
emplace
(
aStartTime
)
;
mLastOutputTime
=
TimeUnit
:
:
Zero
(
)
;
mInfo
=
aInfo
;
mPlaying
=
true
;
ConnectListener
(
)
;
class
R
:
public
Runnable
{
typedef
MozPromiseHolder
<
MediaSink
:
:
EndedPromise
>
Promise
;
public
:
R
(
PlaybackInfoInit
&
&
aInit
Promise
&
&
aAudioEndedPromise
Promise
&
&
aVideoEndedPromise
OutputStreamManager
*
aManager
AbstractThread
*
aMainThread
)
:
Runnable
(
"
CreateDecodedStreamData
"
)
mInit
(
std
:
:
move
(
aInit
)
)
mAudioEndedPromise
(
std
:
:
move
(
aAudioEndedPromise
)
)
mVideoEndedPromise
(
std
:
:
move
(
aVideoEndedPromise
)
)
mOutputStreamManager
(
aManager
)
mAbstractMainThread
(
aMainThread
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mOutputStreamManager
-
>
IsEmpty
(
)
)
{
mAudioEndedPromise
.
Resolve
(
true
__func__
)
;
mVideoEndedPromise
.
Resolve
(
true
__func__
)
;
return
NS_OK
;
}
RefPtr
<
SourceMediaTrack
>
audioTrack
=
mOutputStreamManager
-
>
GetPrecreatedTrackOfType
(
MediaSegment
:
:
AUDIO
)
;
if
(
mInit
.
mInfo
.
HasAudio
(
)
&
&
!
audioTrack
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOutputStreamManager
-
>
HasTrackType
(
MediaSegment
:
:
AUDIO
)
)
;
audioTrack
=
mOutputStreamManager
-
>
AddTrack
(
MediaSegment
:
:
AUDIO
)
;
}
if
(
audioTrack
)
{
audioTrack
-
>
SetAppendDataSourceRate
(
mInit
.
mInfo
.
mAudio
.
mRate
)
;
}
RefPtr
<
SourceMediaTrack
>
videoTrack
=
mOutputStreamManager
-
>
GetPrecreatedTrackOfType
(
MediaSegment
:
:
VIDEO
)
;
if
(
mInit
.
mInfo
.
HasVideo
(
)
&
&
!
videoTrack
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOutputStreamManager
-
>
HasTrackType
(
MediaSegment
:
:
VIDEO
)
)
;
videoTrack
=
mOutputStreamManager
-
>
AddTrack
(
MediaSegment
:
:
VIDEO
)
;
}
mData
=
MakeUnique
<
DecodedStreamData
>
(
mOutputStreamManager
std
:
:
move
(
mInit
)
std
:
:
move
(
audioTrack
)
std
:
:
move
(
videoTrack
)
std
:
:
move
(
mAudioEndedPromise
)
std
:
:
move
(
mVideoEndedPromise
)
mAbstractMainThread
)
;
return
NS_OK
;
}
UniquePtr
<
DecodedStreamData
>
ReleaseData
(
)
{
return
std
:
:
move
(
mData
)
;
}
private
:
PlaybackInfoInit
mInit
;
Promise
mAudioEndedPromise
;
Promise
mVideoEndedPromise
;
RefPtr
<
OutputStreamManager
>
mOutputStreamManager
;
UniquePtr
<
DecodedStreamData
>
mData
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
}
;
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
audioEndedHolder
;
mAudioEndedPromise
=
audioEndedHolder
.
Ensure
(
__func__
)
;
MozPromiseHolder
<
DecodedStream
:
:
EndedPromise
>
videoEndedHolder
;
mVideoEndedPromise
=
videoEndedHolder
.
Ensure
(
__func__
)
;
PlaybackInfoInit
init
{
aStartTime
aInfo
}
;
nsCOMPtr
<
nsIRunnable
>
r
=
new
R
(
std
:
:
move
(
init
)
std
:
:
move
(
audioEndedHolder
)
std
:
:
move
(
videoEndedHolder
)
mOutputStreamManager
mAbstractMainThread
)
;
SyncRunnable
:
:
DispatchToThread
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
r
)
;
mData
=
static_cast
<
R
*
>
(
r
.
get
(
)
)
-
>
ReleaseData
(
)
;
if
(
mData
)
{
mOutputListener
=
mData
-
>
OnOutput
(
)
.
Connect
(
mOwnerThread
this
&
DecodedStream
:
:
NotifyOutput
)
;
SendData
(
)
;
}
return
NS_OK
;
}
void
DecodedStream
:
:
Stop
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mStartTime
.
isSome
(
)
"
playback
not
started
.
"
)
;
DisconnectListener
(
)
;
ResetVideo
(
mPrincipalHandle
)
;
mStartTime
.
reset
(
)
;
mAudioEndedPromise
=
nullptr
;
mVideoEndedPromise
=
nullptr
;
DestroyData
(
std
:
:
move
(
mData
)
)
;
}
bool
DecodedStream
:
:
IsStarted
(
)
const
{
AssertOwnerThread
(
)
;
return
mStartTime
.
isSome
(
)
;
}
bool
DecodedStream
:
:
IsPlaying
(
)
const
{
AssertOwnerThread
(
)
;
return
IsStarted
(
)
&
&
mPlaying
;
}
void
DecodedStream
:
:
Shutdown
(
)
{
AssertOwnerThread
(
)
;
mPrincipalHandle
.
DisconnectIfConnected
(
)
;
mWatchManager
.
Shutdown
(
)
;
}
void
DecodedStream
:
:
DestroyData
(
UniquePtr
<
DecodedStreamData
>
&
&
aData
)
{
AssertOwnerThread
(
)
;
if
(
!
aData
)
{
return
;
}
mOutputListener
.
Disconnect
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
DecodedStream
:
:
DestroyData
"
[
data
=
std
:
:
move
(
aData
)
manager
=
mOutputStreamManager
]
(
)
{
data
-
>
Forget
(
)
;
manager
-
>
RemoveTracks
(
)
;
}
)
)
;
}
void
DecodedStream
:
:
SetPlaying
(
bool
aPlaying
)
{
AssertOwnerThread
(
)
;
if
(
mStartTime
.
isNothing
(
)
)
{
return
;
}
mPlaying
=
aPlaying
;
}
void
DecodedStream
:
:
SetVolume
(
double
aVolume
)
{
AssertOwnerThread
(
)
;
mParams
.
mVolume
=
aVolume
;
}
void
DecodedStream
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
AssertOwnerThread
(
)
;
mParams
.
mPlaybackRate
=
aPlaybackRate
;
}
void
DecodedStream
:
:
SetPreservesPitch
(
bool
aPreservesPitch
)
{
AssertOwnerThread
(
)
;
mParams
.
mPreservesPitch
=
aPreservesPitch
;
}
static
void
SendStreamAudio
(
DecodedStreamData
*
aStream
const
TimeUnit
&
aStartTime
AudioData
*
aData
AudioSegment
*
aOutput
uint32_t
aRate
const
PrincipalHandle
&
aPrincipalHandle
)
{
static
const
int64_t
AUDIO_FUZZ_FRAMES
=
1
;
MOZ_ASSERT
(
aData
)
;
AudioData
*
audio
=
aData
;
CheckedInt64
audioWrittenOffset
=
aStream
-
>
mAudioFramesWritten
+
TimeUnitToFrames
(
aStartTime
aRate
)
;
CheckedInt64
frameOffset
=
TimeUnitToFrames
(
audio
-
>
mTime
aRate
)
;
if
(
!
audioWrittenOffset
.
isValid
(
)
|
|
!
frameOffset
.
isValid
(
)
|
|
audio
-
>
GetEndTime
(
)
<
=
aStream
-
>
mNextAudioTime
)
{
return
;
}
if
(
audioWrittenOffset
.
value
(
)
+
AUDIO_FUZZ_FRAMES
<
frameOffset
.
value
(
)
)
{
int64_t
silentFrames
=
frameOffset
.
value
(
)
-
audioWrittenOffset
.
value
(
)
;
AudioSegment
silence
;
silence
.
InsertNullDataAtStart
(
silentFrames
)
;
aStream
-
>
mAudioFramesWritten
+
=
silentFrames
;
audioWrittenOffset
+
=
silentFrames
;
aOutput
-
>
AppendFrom
(
&
silence
)
;
}
audio
-
>
EnsureAudioBuffer
(
)
;
RefPtr
<
SharedBuffer
>
buffer
=
audio
-
>
mAudioBuffer
;
AudioDataValue
*
bufferData
=
static_cast
<
AudioDataValue
*
>
(
buffer
-
>
Data
(
)
)
;
AutoTArray
<
const
AudioDataValue
*
2
>
channels
;
for
(
uint32_t
i
=
0
;
i
<
audio
-
>
mChannels
;
+
+
i
)
{
channels
.
AppendElement
(
bufferData
+
i
*
audio
-
>
Frames
(
)
)
;
}
aOutput
-
>
AppendFrames
(
buffer
.
forget
(
)
channels
audio
-
>
Frames
(
)
aPrincipalHandle
)
;
aStream
-
>
mAudioFramesWritten
+
=
audio
-
>
Frames
(
)
;
aStream
-
>
mNextAudioTime
=
audio
-
>
GetEndTime
(
)
;
}
void
DecodedStream
:
:
SendAudio
(
double
aVolume
const
PrincipalHandle
&
aPrincipalHandle
)
{
AssertOwnerThread
(
)
;
if
(
!
mInfo
.
HasAudio
(
)
)
{
return
;
}
if
(
mData
-
>
mHaveSentFinishAudio
)
{
return
;
}
AudioSegment
output
;
uint32_t
rate
=
mInfo
.
mAudio
.
mRate
;
AutoTArray
<
RefPtr
<
AudioData
>
10
>
audio
;
mAudioQueue
.
GetElementsAfter
(
mData
-
>
mNextAudioTime
&
audio
)
;
for
(
uint32_t
i
=
0
;
i
<
audio
.
Length
(
)
;
+
+
i
)
{
SendStreamAudio
(
mData
.
get
(
)
mStartTime
.
ref
(
)
audio
[
i
]
&
output
rate
aPrincipalHandle
)
;
}
output
.
ApplyVolume
(
aVolume
)
;
if
(
output
.
GetDuration
(
)
>
0
)
{
mData
-
>
mAudioTrackWritten
+
=
mData
-
>
mAudioTrack
-
>
AppendData
(
&
output
)
;
}
if
(
mAudioQueue
.
IsFinished
(
)
&
&
!
mData
-
>
mHaveSentFinishAudio
)
{
mData
-
>
mListener
-
>
EndTrackAt
(
mData
-
>
mAudioTrack
mData
-
>
mAudioTrackWritten
)
;
mData
-
>
mHaveSentFinishAudio
=
true
;
}
}
void
DecodedStreamData
:
:
WriteVideoToSegment
(
layers
:
:
Image
*
aImage
const
TimeUnit
&
aStart
const
TimeUnit
&
aEnd
const
gfx
:
:
IntSize
&
aIntrinsicSize
const
TimeStamp
&
aTimeStamp
VideoSegment
*
aOutput
const
PrincipalHandle
&
aPrincipalHandle
)
{
RefPtr
<
layers
:
:
Image
>
image
=
aImage
;
auto
end
=
mVideoTrack
-
>
MicrosecondsToTrackTimeRoundDown
(
aEnd
.
ToMicroseconds
(
)
)
;
auto
start
=
mVideoTrack
-
>
MicrosecondsToTrackTimeRoundDown
(
aStart
.
ToMicroseconds
(
)
)
;
aOutput
-
>
AppendFrame
(
image
.
forget
(
)
aIntrinsicSize
aPrincipalHandle
false
aTimeStamp
)
;
aOutput
-
>
ExtendLastFrameBy
(
end
-
start
)
;
mLastVideoStartTime
=
Some
(
aStart
)
;
mLastVideoEndTime
=
Some
(
aEnd
)
;
mLastVideoTimeStamp
=
aTimeStamp
;
}
static
bool
ZeroDurationAtLastChunk
(
VideoSegment
&
aInput
)
{
TrackTime
lastVideoStratTime
;
aInput
.
GetLastFrame
(
&
lastVideoStratTime
)
;
return
lastVideoStratTime
=
=
aInput
.
GetDuration
(
)
;
}
void
DecodedStream
:
:
ResetVideo
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
AssertOwnerThread
(
)
;
if
(
!
mData
)
{
return
;
}
if
(
!
mInfo
.
HasVideo
(
)
)
{
return
;
}
VideoSegment
resetter
;
TimeStamp
currentTime
;
TimeUnit
currentPosition
=
GetPosition
(
&
currentTime
)
;
resetter
.
AppendFrame
(
nullptr
mData
-
>
mLastVideoImageDisplaySize
aPrincipalHandle
false
currentTime
)
;
mData
-
>
mVideoTrack
-
>
AppendData
(
&
resetter
)
;
if
(
RefPtr
<
VideoData
>
v
=
mVideoQueue
.
PeekFront
(
)
)
{
mData
-
>
mLastVideoStartTime
=
Some
(
v
-
>
mTime
-
TimeUnit
:
:
FromMicroseconds
(
1
)
)
;
mData
-
>
mLastVideoEndTime
=
Some
(
v
-
>
mTime
)
;
}
else
{
mData
-
>
mLastVideoStartTime
=
Some
(
currentPosition
-
TimeUnit
:
:
FromMicroseconds
(
1
)
)
;
mData
-
>
mLastVideoEndTime
=
Some
(
currentPosition
)
;
}
mData
-
>
mLastVideoTimeStamp
=
currentTime
;
}
void
DecodedStream
:
:
SendVideo
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
AssertOwnerThread
(
)
;
if
(
!
mInfo
.
HasVideo
(
)
)
{
return
;
}
if
(
mData
-
>
mHaveSentFinishVideo
)
{
return
;
}
VideoSegment
output
;
AutoTArray
<
RefPtr
<
VideoData
>
10
>
video
;
mVideoQueue
.
GetElementsAfter
(
mData
-
>
mLastVideoStartTime
.
valueOr
(
mStartTime
.
ref
(
)
)
&
video
)
;
TimeStamp
currentTime
;
TimeUnit
currentPosition
=
GetPosition
(
&
currentTime
)
;
if
(
mData
-
>
mLastVideoTimeStamp
.
IsNull
(
)
)
{
mData
-
>
mLastVideoTimeStamp
=
currentTime
;
}
for
(
uint32_t
i
=
0
;
i
<
video
.
Length
(
)
;
+
+
i
)
{
VideoData
*
v
=
video
[
i
]
;
TimeUnit
lastStart
=
mData
-
>
mLastVideoStartTime
.
valueOr
(
mStartTime
.
ref
(
)
-
TimeUnit
:
:
FromMicroseconds
(
1
)
)
;
TimeUnit
lastEnd
=
mData
-
>
mLastVideoEndTime
.
valueOr
(
mStartTime
.
ref
(
)
)
;
if
(
lastEnd
<
v
-
>
mTime
)
{
TimeStamp
t
=
std
:
:
max
(
mData
-
>
mLastVideoTimeStamp
currentTime
+
(
lastEnd
-
currentPosition
)
.
ToTimeDuration
(
)
)
;
mData
-
>
WriteVideoToSegment
(
mData
-
>
mLastVideoImage
lastEnd
v
-
>
mTime
mData
-
>
mLastVideoImageDisplaySize
t
&
output
aPrincipalHandle
)
;
lastEnd
=
v
-
>
mTime
;
}
if
(
lastStart
<
v
-
>
mTime
)
{
TimeStamp
t
=
std
:
:
max
(
mData
-
>
mLastVideoTimeStamp
currentTime
+
(
lastEnd
-
currentPosition
)
.
ToTimeDuration
(
)
)
;
TimeUnit
end
=
std
:
:
max
(
v
-
>
GetEndTime
(
)
lastEnd
+
TimeUnit
:
:
FromMicroseconds
(
mData
-
>
mVideoTrack
-
>
TrackTimeToMicroseconds
(
1
)
+
1
)
)
;
mData
-
>
mLastVideoImage
=
v
-
>
mImage
;
mData
-
>
mLastVideoImageDisplaySize
=
v
-
>
mDisplay
;
mData
-
>
WriteVideoToSegment
(
v
-
>
mImage
lastEnd
end
v
-
>
mDisplay
t
&
output
aPrincipalHandle
)
;
}
}
bool
compensateEOS
=
false
;
bool
forceBlack
=
false
;
if
(
output
.
GetLastFrame
(
)
)
{
compensateEOS
=
ZeroDurationAtLastChunk
(
output
)
;
}
if
(
output
.
GetDuration
(
)
>
0
)
{
mData
-
>
mVideoTrackWritten
+
=
mData
-
>
mVideoTrack
-
>
AppendData
(
&
output
)
;
}
if
(
mVideoQueue
.
IsFinished
(
)
&
&
!
mData
-
>
mHaveSentFinishVideo
)
{
if
(
!
mData
-
>
mLastVideoImage
)
{
compensateEOS
=
true
;
forceBlack
=
true
;
mData
-
>
mLastVideoImageDisplaySize
=
mInfo
.
mVideo
.
mDisplay
;
}
if
(
compensateEOS
)
{
VideoSegment
endSegment
;
auto
deviation
=
TimeUnit
:
:
FromMicroseconds
(
mData
-
>
mVideoTrack
-
>
TrackTimeToMicroseconds
(
1
)
+
1
)
;
auto
start
=
mData
-
>
mLastVideoEndTime
.
valueOr
(
mStartTime
.
ref
(
)
)
;
mData
-
>
WriteVideoToSegment
(
mData
-
>
mLastVideoImage
start
start
+
deviation
mData
-
>
mLastVideoImageDisplaySize
currentTime
+
(
start
+
deviation
-
currentPosition
)
.
ToTimeDuration
(
)
&
endSegment
aPrincipalHandle
)
;
MOZ_ASSERT
(
endSegment
.
GetDuration
(
)
>
0
)
;
if
(
forceBlack
)
{
endSegment
.
ReplaceWithDisabled
(
)
;
}
mData
-
>
mVideoTrackWritten
+
=
mData
-
>
mVideoTrack
-
>
AppendData
(
&
endSegment
)
;
}
mData
-
>
mListener
-
>
EndTrackAt
(
mData
-
>
mVideoTrack
mData
-
>
mVideoTrackWritten
)
;
mData
-
>
mHaveSentFinishVideo
=
true
;
}
}
void
DecodedStream
:
:
SendData
(
)
{
AssertOwnerThread
(
)
;
if
(
!
mData
)
{
return
;
}
if
(
!
mPlaying
)
{
return
;
}
SendAudio
(
mParams
.
mVolume
mPrincipalHandle
)
;
SendVideo
(
mPrincipalHandle
)
;
}
TimeUnit
DecodedStream
:
:
GetEndTime
(
TrackType
aType
)
const
{
AssertOwnerThread
(
)
;
if
(
aType
=
=
TrackInfo
:
:
kAudioTrack
&
&
mInfo
.
HasAudio
(
)
&
&
mData
)
{
auto
t
=
mStartTime
.
ref
(
)
+
FramesToTimeUnit
(
mData
-
>
mAudioFramesWritten
mInfo
.
mAudio
.
mRate
)
;
if
(
t
.
IsValid
(
)
)
{
return
t
;
}
}
else
if
(
aType
=
=
TrackInfo
:
:
kVideoTrack
&
&
mData
)
{
return
mData
-
>
mLastVideoEndTime
.
valueOr
(
mStartTime
.
ref
(
)
)
;
}
return
TimeUnit
:
:
Zero
(
)
;
}
TimeUnit
DecodedStream
:
:
GetPosition
(
TimeStamp
*
aTimeStamp
)
const
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mStartTime
.
isSome
(
)
)
;
if
(
aTimeStamp
)
{
*
aTimeStamp
=
TimeStamp
:
:
Now
(
)
;
}
return
mStartTime
.
ref
(
)
+
mLastOutputTime
;
}
void
DecodedStream
:
:
NotifyOutput
(
int64_t
aTime
)
{
AssertOwnerThread
(
)
;
TimeUnit
time
=
TimeUnit
:
:
FromMicroseconds
(
aTime
)
;
if
(
time
=
=
mLastOutputTime
)
{
return
;
}
MOZ_ASSERT
(
mLastOutputTime
<
time
)
;
mLastOutputTime
=
time
;
auto
currentTime
=
GetPosition
(
)
;
RefPtr
<
AudioData
>
a
=
mAudioQueue
.
PeekFront
(
)
;
for
(
;
a
&
&
a
-
>
mTime
<
currentTime
;
)
{
RefPtr
<
AudioData
>
releaseMe
=
mAudioQueue
.
PopFront
(
)
;
a
=
mAudioQueue
.
PeekFront
(
)
;
}
}
void
DecodedStream
:
:
PlayingChanged
(
)
{
AssertOwnerThread
(
)
;
if
(
!
mPlaying
)
{
ResetVideo
(
mPrincipalHandle
)
;
}
mAbstractMainThread
-
>
Dispatch
(
NewRunnableMethod
<
bool
>
(
"
OutputStreamManager
:
:
SetPlaying
"
mOutputStreamManager
&
OutputStreamManager
:
:
SetPlaying
mPlaying
)
)
;
}
void
DecodedStream
:
:
ConnectListener
(
)
{
AssertOwnerThread
(
)
;
mAudioPushListener
=
mAudioQueue
.
PushEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedStream
:
:
SendData
)
;
mAudioFinishListener
=
mAudioQueue
.
FinishEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedStream
:
:
SendData
)
;
mVideoPushListener
=
mVideoQueue
.
PushEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedStream
:
:
SendData
)
;
mVideoFinishListener
=
mVideoQueue
.
FinishEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedStream
:
:
SendData
)
;
mWatchManager
.
Watch
(
mPlaying
&
DecodedStream
:
:
SendData
)
;
}
void
DecodedStream
:
:
DisconnectListener
(
)
{
AssertOwnerThread
(
)
;
mAudioPushListener
.
Disconnect
(
)
;
mVideoPushListener
.
Disconnect
(
)
;
mAudioFinishListener
.
Disconnect
(
)
;
mVideoFinishListener
.
Disconnect
(
)
;
mWatchManager
.
Unwatch
(
mPlaying
&
DecodedStream
:
:
SendData
)
;
}
void
DecodedStream
:
:
GetDebugInfo
(
dom
:
:
MediaSinkDebugInfo
&
aInfo
)
{
AssertOwnerThread
(
)
;
int64_t
startTime
=
mStartTime
.
isSome
(
)
?
mStartTime
-
>
ToMicroseconds
(
)
:
-
1
;
aInfo
.
mDecodedStream
.
mInstance
=
NS_ConvertUTF8toUTF16
(
nsPrintfCString
(
"
%
p
"
this
)
)
;
aInfo
.
mDecodedStream
.
mStartTime
=
startTime
;
aInfo
.
mDecodedStream
.
mLastOutputTime
=
mLastOutputTime
.
ToMicroseconds
(
)
;
aInfo
.
mDecodedStream
.
mPlaying
=
mPlaying
.
Ref
(
)
;
auto
lastAudio
=
mAudioQueue
.
PeekBack
(
)
;
aInfo
.
mDecodedStream
.
mLastAudio
=
lastAudio
?
lastAudio
-
>
GetEndTime
(
)
.
ToMicroseconds
(
)
:
-
1
;
aInfo
.
mDecodedStream
.
mAudioQueueFinished
=
mAudioQueue
.
IsFinished
(
)
;
aInfo
.
mDecodedStream
.
mAudioQueueSize
=
mAudioQueue
.
GetSize
(
)
;
if
(
mData
)
{
mData
-
>
GetDebugInfo
(
aInfo
.
mDecodedStream
.
mData
)
;
}
}
}
