#
include
"
nsPrintfCString
.
h
"
#
include
"
MediaQueue
.
h
"
#
include
"
DecodedAudioDataSink
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
AudioConverter
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
MediaPrefs
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
#
define
SINK_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
\
(
"
DecodedAudioDataSink
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
#
define
SINK_LOG_V
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Verbose
\
(
"
DecodedAudioDataSink
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
namespace
media
{
static
const
int64_t
AUDIO_FUZZ_FRAMES
=
1
;
static
const
int32_t
LOW_AUDIO_USECS
=
300000
;
DecodedAudioDataSink
:
:
DecodedAudioDataSink
(
AbstractThread
*
aThread
MediaQueue
<
MediaData
>
&
aAudioQueue
int64_t
aStartTime
const
AudioInfo
&
aInfo
dom
:
:
AudioChannel
aChannel
)
:
AudioSink
(
aAudioQueue
)
mStartTime
(
aStartTime
)
mLastGoodPosition
(
0
)
mInfo
(
aInfo
)
mChannel
(
aChannel
)
mPlaying
(
true
)
mMonitor
(
"
DecodedAudioDataSink
"
)
mWritten
(
0
)
mErrored
(
false
)
mPlaybackComplete
(
false
)
mOwnerThread
(
aThread
)
mProcessedQueueLength
(
0
)
mFramesParsed
(
0
)
mLastEndTime
(
0
)
mIsAudioDataAudible
(
false
)
{
bool
resampling
=
MediaPrefs
:
:
AudioSinkResampling
(
)
;
if
(
resampling
)
{
mOutputRate
=
MediaPrefs
:
:
AudioSinkResampleRate
(
)
;
}
else
if
(
mInfo
.
mRate
=
=
44100
|
|
mInfo
.
mRate
=
=
48000
)
{
mOutputRate
=
mInfo
.
mRate
;
}
else
{
mOutputRate
=
AudioStream
:
:
GetPreferredRate
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mOutputRate
"
output
rate
can
'
t
be
0
.
"
)
;
bool
monoAudioEnabled
=
MediaPrefs
:
:
MonoAudio
(
)
;
mOutputChannels
=
monoAudioEnabled
?
1
:
(
MediaPrefs
:
:
AudioSinkForceStereo
(
)
?
2
:
mInfo
.
mChannels
)
;
}
DecodedAudioDataSink
:
:
~
DecodedAudioDataSink
(
)
{
}
RefPtr
<
GenericPromise
>
DecodedAudioDataSink
:
:
Init
(
const
PlaybackParams
&
aParams
)
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
mAudioQueueListener
=
mAudioQueue
.
PushEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedAudioDataSink
:
:
OnAudioPushed
)
;
mAudioQueueFinishListener
=
mAudioQueue
.
FinishEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedAudioDataSink
:
:
NotifyAudioNeeded
)
;
mProcessedQueueListener
=
mProcessedQueue
.
PopEvent
(
)
.
Connect
(
mOwnerThread
this
&
DecodedAudioDataSink
:
:
OnAudioPopped
)
;
NotifyAudioNeeded
(
)
;
RefPtr
<
GenericPromise
>
p
=
mEndPromise
.
Ensure
(
__func__
)
;
nsresult
rv
=
InitializeAudioStream
(
aParams
)
;
if
(
NS_FAILED
(
rv
)
)
{
mEndPromise
.
Reject
(
rv
__func__
)
;
}
return
p
;
}
int64_t
DecodedAudioDataSink
:
:
GetPosition
(
)
{
int64_t
pos
;
if
(
mAudioStream
&
&
(
pos
=
mAudioStream
-
>
GetPosition
(
)
)
>
=
0
)
{
NS_ASSERTION
(
pos
>
=
mLastGoodPosition
"
AudioStream
position
shouldn
'
t
go
backward
"
)
;
if
(
pos
>
=
mLastGoodPosition
)
{
mLastGoodPosition
=
pos
;
}
}
return
mStartTime
+
mLastGoodPosition
;
}
bool
DecodedAudioDataSink
:
:
HasUnplayedFrames
(
)
{
int64_t
total
;
{
MonitorAutoLock
mon
(
mMonitor
)
;
total
=
mWritten
+
(
mCursor
.
get
(
)
?
mCursor
-
>
Available
(
)
:
0
)
;
}
return
mProcessedQueue
.
GetSize
(
)
|
|
(
mAudioStream
&
&
mAudioStream
-
>
GetPositionInFrames
(
)
+
1
<
total
)
;
}
void
DecodedAudioDataSink
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
mAudioQueueListener
.
Disconnect
(
)
;
mAudioQueueFinishListener
.
Disconnect
(
)
;
mProcessedQueueListener
.
Disconnect
(
)
;
if
(
mAudioStream
)
{
mAudioStream
-
>
Shutdown
(
)
;
mAudioStream
=
nullptr
;
}
mProcessedQueue
.
Reset
(
)
;
mProcessedQueue
.
Finish
(
)
;
mEndPromise
.
ResolveIfExists
(
true
__func__
)
;
}
void
DecodedAudioDataSink
:
:
SetVolume
(
double
aVolume
)
{
if
(
mAudioStream
)
{
mAudioStream
-
>
SetVolume
(
aVolume
)
;
}
}
void
DecodedAudioDataSink
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
MOZ_ASSERT
(
aPlaybackRate
!
=
0
"
Don
'
t
set
the
playbackRate
to
0
on
AudioStream
"
)
;
if
(
mAudioStream
)
{
mAudioStream
-
>
SetPlaybackRate
(
aPlaybackRate
)
;
}
}
void
DecodedAudioDataSink
:
:
SetPreservesPitch
(
bool
aPreservesPitch
)
{
if
(
mAudioStream
)
{
mAudioStream
-
>
SetPreservesPitch
(
aPreservesPitch
)
;
}
}
void
DecodedAudioDataSink
:
:
SetPlaying
(
bool
aPlaying
)
{
if
(
!
mAudioStream
|
|
mPlaying
=
=
aPlaying
|
|
mPlaybackComplete
)
{
return
;
}
if
(
!
aPlaying
)
{
mAudioStream
-
>
Pause
(
)
;
}
else
if
(
aPlaying
)
{
mAudioStream
-
>
Resume
(
)
;
}
mPlaying
=
aPlaying
;
}
nsresult
DecodedAudioDataSink
:
:
InitializeAudioStream
(
const
PlaybackParams
&
aParams
)
{
mAudioStream
=
new
AudioStream
(
*
this
)
;
nsresult
rv
=
mAudioStream
-
>
Init
(
mOutputChannels
mConverter
-
>
OutputConfig
(
)
.
Layout
(
)
.
Map
(
)
mOutputRate
mChannel
)
;
if
(
NS_FAILED
(
rv
)
)
{
mAudioStream
-
>
Shutdown
(
)
;
mAudioStream
=
nullptr
;
return
rv
;
}
mAudioStream
-
>
SetVolume
(
aParams
.
mVolume
)
;
mAudioStream
-
>
SetPlaybackRate
(
aParams
.
mPlaybackRate
)
;
mAudioStream
-
>
SetPreservesPitch
(
aParams
.
mPreservesPitch
)
;
mAudioStream
-
>
Start
(
)
;
return
NS_OK
;
}
int64_t
DecodedAudioDataSink
:
:
GetEndTime
(
)
const
{
int64_t
written
;
{
MonitorAutoLock
mon
(
mMonitor
)
;
written
=
mWritten
;
}
CheckedInt64
playedUsecs
=
FramesToUsecs
(
written
mOutputRate
)
+
mStartTime
;
if
(
!
playedUsecs
.
isValid
(
)
)
{
NS_WARNING
(
"
Int
overflow
calculating
audio
end
time
"
)
;
return
-
1
;
}
return
std
:
:
min
<
int64_t
>
(
mLastEndTime
playedUsecs
.
value
(
)
)
;
}
UniquePtr
<
AudioStream
:
:
Chunk
>
DecodedAudioDataSink
:
:
PopFrames
(
uint32_t
aFrames
)
{
class
Chunk
:
public
AudioStream
:
:
Chunk
{
public
:
Chunk
(
AudioData
*
aBuffer
uint32_t
aFrames
AudioDataValue
*
aData
)
:
mBuffer
(
aBuffer
)
mFrames
(
aFrames
)
mData
(
aData
)
{
}
Chunk
(
)
:
mFrames
(
0
)
mData
(
nullptr
)
{
}
const
AudioDataValue
*
Data
(
)
const
{
return
mData
;
}
uint32_t
Frames
(
)
const
{
return
mFrames
;
}
uint32_t
Channels
(
)
const
{
return
mBuffer
?
mBuffer
-
>
mChannels
:
0
;
}
uint32_t
Rate
(
)
const
{
return
mBuffer
?
mBuffer
-
>
mRate
:
0
;
}
AudioDataValue
*
GetWritable
(
)
const
{
return
mData
;
}
private
:
const
RefPtr
<
AudioData
>
mBuffer
;
const
uint32_t
mFrames
;
AudioDataValue
*
const
mData
;
}
;
class
SilentChunk
:
public
AudioStream
:
:
Chunk
{
public
:
SilentChunk
(
uint32_t
aFrames
uint32_t
aChannels
uint32_t
aRate
)
:
mFrames
(
aFrames
)
mChannels
(
aChannels
)
mRate
(
aRate
)
mData
(
MakeUnique
<
AudioDataValue
[
]
>
(
aChannels
*
aFrames
)
)
{
memset
(
mData
.
get
(
)
0
aChannels
*
aFrames
*
sizeof
(
AudioDataValue
)
)
;
}
const
AudioDataValue
*
Data
(
)
const
{
return
mData
.
get
(
)
;
}
uint32_t
Frames
(
)
const
{
return
mFrames
;
}
uint32_t
Channels
(
)
const
{
return
mChannels
;
}
uint32_t
Rate
(
)
const
{
return
mRate
;
}
AudioDataValue
*
GetWritable
(
)
const
{
return
mData
.
get
(
)
;
}
private
:
const
uint32_t
mFrames
;
const
uint32_t
mChannels
;
const
uint32_t
mRate
;
UniquePtr
<
AudioDataValue
[
]
>
mData
;
}
;
bool
needPopping
=
false
;
if
(
!
mCurrentData
)
{
if
(
!
mProcessedQueue
.
GetSize
(
)
)
{
return
MakeUnique
<
Chunk
>
(
)
;
}
needPopping
=
true
;
mCurrentData
=
mProcessedQueue
.
PeekFront
(
)
;
{
MonitorAutoLock
mon
(
mMonitor
)
;
mCursor
=
MakeUnique
<
AudioBufferCursor
>
(
mCurrentData
-
>
mAudioData
.
get
(
)
mCurrentData
-
>
mChannels
mCurrentData
-
>
mFrames
)
;
}
MOZ_ASSERT
(
mCurrentData
-
>
mFrames
>
0
)
;
mProcessedQueueLength
-
=
FramesToUsecs
(
mCurrentData
-
>
mFrames
mOutputRate
)
.
value
(
)
;
}
auto
framesToPop
=
std
:
:
min
(
aFrames
mCursor
-
>
Available
(
)
)
;
SINK_LOG_V
(
"
playing
audio
at
time
=
%
lld
offset
=
%
u
length
=
%
u
"
mCurrentData
-
>
mTime
mCurrentData
-
>
mFrames
-
mCursor
-
>
Available
(
)
framesToPop
)
;
UniquePtr
<
AudioStream
:
:
Chunk
>
chunk
=
MakeUnique
<
Chunk
>
(
mCurrentData
framesToPop
mCursor
-
>
Ptr
(
)
)
;
{
MonitorAutoLock
mon
(
mMonitor
)
;
mWritten
+
=
framesToPop
;
mCursor
-
>
Advance
(
framesToPop
)
;
}
if
(
!
mCursor
-
>
Available
(
)
)
{
mCurrentData
=
nullptr
;
}
if
(
needPopping
)
{
RefPtr
<
AudioData
>
releaseMe
=
mProcessedQueue
.
PopFront
(
)
;
CheckIsAudible
(
releaseMe
)
;
}
return
chunk
;
}
bool
DecodedAudioDataSink
:
:
Ended
(
)
const
{
return
mProcessedQueue
.
IsFinished
(
)
|
|
mErrored
;
}
void
DecodedAudioDataSink
:
:
Drained
(
)
{
SINK_LOG
(
"
Drained
"
)
;
mPlaybackComplete
=
true
;
mEndPromise
.
ResolveIfExists
(
true
__func__
)
;
}
void
DecodedAudioDataSink
:
:
CheckIsAudible
(
const
AudioData
*
aData
)
{
MOZ_ASSERT
(
aData
)
;
bool
isAudible
=
aData
-
>
IsAudible
(
)
;
if
(
isAudible
!
=
mIsAudioDataAudible
)
{
mIsAudioDataAudible
=
isAudible
;
mAudibleEvent
.
Notify
(
mIsAudioDataAudible
)
;
}
}
void
DecodedAudioDataSink
:
:
OnAudioPopped
(
const
RefPtr
<
MediaData
>
&
aSample
)
{
SINK_LOG_V
(
"
AudioStream
has
used
an
audio
packet
.
"
)
;
NotifyAudioNeeded
(
)
;
}
void
DecodedAudioDataSink
:
:
OnAudioPushed
(
const
RefPtr
<
MediaData
>
&
aSample
)
{
SINK_LOG_V
(
"
One
new
audio
packet
available
.
"
)
;
NotifyAudioNeeded
(
)
;
}
void
DecodedAudioDataSink
:
:
NotifyAudioNeeded
(
)
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
"
Not
called
from
the
owner
'
s
thread
"
)
;
while
(
AudioQueue
(
)
.
GetSize
(
)
&
&
(
AudioQueue
(
)
.
IsFinished
(
)
|
|
mProcessedQueueLength
<
LOW_AUDIO_USECS
|
|
mProcessedQueue
.
GetSize
(
)
<
2
)
)
{
RefPtr
<
AudioData
>
data
=
dont_AddRef
(
AudioQueue
(
)
.
PopFront
(
)
.
take
(
)
-
>
As
<
AudioData
>
(
)
)
;
if
(
!
data
-
>
mFrames
)
{
continue
;
}
if
(
!
mConverter
|
|
(
data
-
>
mRate
!
=
mConverter
-
>
InputConfig
(
)
.
Rate
(
)
|
|
data
-
>
mChannels
!
=
mConverter
-
>
InputConfig
(
)
.
Channels
(
)
)
)
{
SINK_LOG_V
(
"
Audio
format
changed
from
%
u
%
uHz
to
%
u
%
uHz
"
mConverter
?
mConverter
-
>
InputConfig
(
)
.
Channels
(
)
:
0
mConverter
?
mConverter
-
>
InputConfig
(
)
.
Rate
(
)
:
0
data
-
>
mChannels
data
-
>
mRate
)
;
DrainConverter
(
)
;
if
(
mFramesParsed
)
{
uint32_t
oldRate
=
mConverter
-
>
InputConfig
(
)
.
Rate
(
)
;
uint32_t
newRate
=
data
-
>
mRate
;
CheckedInt64
result
=
SaferMultDiv
(
mFramesParsed
newRate
oldRate
)
;
if
(
!
result
.
isValid
(
)
)
{
NS_WARNING
(
"
Int
overflow
in
DecodedAudioDataSink
"
)
;
mErrored
=
true
;
return
;
}
mFramesParsed
=
result
.
value
(
)
;
}
mConverter
=
MakeUnique
<
AudioConverter
>
(
AudioConfig
(
data
-
>
mChannels
data
-
>
mRate
)
AudioConfig
(
mOutputChannels
mOutputRate
)
)
;
}
CheckedInt64
sampleTime
=
UsecsToFrames
(
data
-
>
mTime
-
mStartTime
data
-
>
mRate
)
;
CheckedInt64
missingFrames
=
sampleTime
-
mFramesParsed
;
if
(
!
missingFrames
.
isValid
(
)
)
{
NS_WARNING
(
"
Int
overflow
in
DecodedAudioDataSink
"
)
;
mErrored
=
true
;
return
;
}
if
(
missingFrames
.
value
(
)
>
AUDIO_FUZZ_FRAMES
)
{
missingFrames
=
std
:
:
min
<
int64_t
>
(
INT32_MAX
missingFrames
.
value
(
)
)
;
mFramesParsed
+
=
missingFrames
.
value
(
)
;
missingFrames
=
SaferMultDiv
(
missingFrames
.
value
(
)
mOutputRate
data
-
>
mRate
)
;
if
(
!
missingFrames
.
isValid
(
)
)
{
NS_WARNING
(
"
Int
overflow
in
DecodedAudioDataSink
"
)
;
mErrored
=
true
;
return
;
}
missingFrames
-
=
DrainConverter
(
missingFrames
.
value
(
)
)
;
if
(
missingFrames
.
value
(
)
)
{
AlignedAudioBuffer
silenceData
(
missingFrames
.
value
(
)
*
mOutputChannels
)
;
if
(
!
silenceData
)
{
NS_WARNING
(
"
OOM
in
DecodedAudioDataSink
"
)
;
mErrored
=
true
;
return
;
}
RefPtr
<
AudioData
>
silence
=
CreateAudioFromBuffer
(
Move
(
silenceData
)
data
)
;
PushProcessedAudio
(
silence
)
;
}
}
mLastEndTime
=
data
-
>
GetEndTime
(
)
;
mFramesParsed
+
=
data
-
>
mFrames
;
if
(
mConverter
-
>
InputConfig
(
)
!
=
mConverter
-
>
OutputConfig
(
)
)
{
AlignedAudioBuffer
buffer
(
Move
(
data
-
>
mAudioData
)
)
;
buffer
.
SetLength
(
size_t
(
data
-
>
mFrames
)
*
data
-
>
mChannels
)
;
AlignedAudioBuffer
convertedData
=
mConverter
-
>
Process
(
AudioSampleBuffer
(
Move
(
buffer
)
)
)
.
Forget
(
)
;
data
=
CreateAudioFromBuffer
(
Move
(
convertedData
)
data
)
;
}
if
(
PushProcessedAudio
(
data
)
)
{
mLastProcessedPacket
=
Some
(
data
)
;
}
}
if
(
AudioQueue
(
)
.
IsFinished
(
)
)
{
DrainConverter
(
)
;
mProcessedQueue
.
Finish
(
)
;
}
}
uint32_t
DecodedAudioDataSink
:
:
PushProcessedAudio
(
AudioData
*
aData
)
{
if
(
!
aData
|
|
!
aData
-
>
mFrames
)
{
return
0
;
}
mProcessedQueue
.
Push
(
aData
)
;
mProcessedQueueLength
+
=
FramesToUsecs
(
aData
-
>
mFrames
mOutputRate
)
.
value
(
)
;
return
aData
-
>
mFrames
;
}
already_AddRefed
<
AudioData
>
DecodedAudioDataSink
:
:
CreateAudioFromBuffer
(
AlignedAudioBuffer
&
&
aBuffer
AudioData
*
aReference
)
{
uint32_t
frames
=
aBuffer
.
Length
(
)
/
mOutputChannels
;
if
(
!
frames
)
{
return
nullptr
;
}
CheckedInt64
duration
=
FramesToUsecs
(
frames
mOutputRate
)
;
if
(
!
duration
.
isValid
(
)
)
{
NS_WARNING
(
"
Int
overflow
in
DecodedAudioDataSink
"
)
;
mErrored
=
true
;
return
nullptr
;
}
RefPtr
<
AudioData
>
data
=
new
AudioData
(
aReference
-
>
mOffset
aReference
-
>
mTime
duration
.
value
(
)
frames
Move
(
aBuffer
)
mOutputChannels
mOutputRate
)
;
return
data
.
forget
(
)
;
}
uint32_t
DecodedAudioDataSink
:
:
DrainConverter
(
uint32_t
aMaxFrames
)
{
MOZ_ASSERT
(
mOwnerThread
-
>
IsCurrentThreadIn
(
)
)
;
if
(
!
mConverter
|
|
!
mLastProcessedPacket
|
|
!
aMaxFrames
)
{
return
0
;
}
RefPtr
<
AudioData
>
lastPacket
=
mLastProcessedPacket
.
ref
(
)
;
mLastProcessedPacket
.
reset
(
)
;
AlignedAudioBuffer
convertedData
=
mConverter
-
>
Process
(
AudioSampleBuffer
(
AlignedAudioBuffer
(
)
)
)
.
Forget
(
)
;
uint32_t
frames
=
convertedData
.
Length
(
)
/
mOutputChannels
;
if
(
!
convertedData
.
SetLength
(
std
:
:
min
(
frames
aMaxFrames
)
*
mOutputChannels
)
)
{
mErrored
=
true
;
return
0
;
}
RefPtr
<
AudioData
>
data
=
CreateAudioFromBuffer
(
Move
(
convertedData
)
lastPacket
)
;
if
(
!
data
)
{
return
0
;
}
mProcessedQueue
.
Push
(
data
)
;
return
data
-
>
mFrames
;
}
}
}
