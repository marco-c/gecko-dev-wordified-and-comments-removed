#
ifndef
mozilla_dom_MediaCapabilities_h_
#
define
mozilla_dom_MediaCapabilities_h_
#
include
"
DDLoggedTypeTraits
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySystemAccessManager
.
h
"
#
include
"
mozilla
/
dom
/
NonRefcountedDOMObject
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
class
MediaContainerType
;
namespace
layers
{
class
KnowsCompositor
;
}
namespace
dom
{
class
MediaCapabilities
;
}
DDLoggedTypeName
(
dom
:
:
MediaCapabilities
)
;
namespace
dom
{
struct
MediaDecodingConfiguration
;
struct
MediaEncodingConfiguration
;
struct
AudioConfiguration
;
struct
VideoConfiguration
;
class
Promise
;
class
MediaCapabilities
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
MediaCapabilities
)
already_AddRefed
<
Promise
>
DecodingInfo
(
const
MediaDecodingConfiguration
&
aConfiguration
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
EncodingInfo
(
const
MediaEncodingConfiguration
&
aConfiguration
ErrorResult
&
aRv
)
;
explicit
MediaCapabilities
(
nsIGlobalObject
*
aParent
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
virtual
~
MediaCapabilities
(
)
=
default
;
Maybe
<
MediaContainerType
>
CheckVideoConfiguration
(
const
VideoConfiguration
&
aConfig
)
const
;
Maybe
<
MediaContainerType
>
CheckAudioConfiguration
(
const
AudioConfiguration
&
aConfig
)
const
;
bool
CheckTypeForMediaSource
(
const
nsAString
&
aType
)
;
bool
CheckTypeForFile
(
const
nsAString
&
aType
)
;
bool
CheckTypeForEncoder
(
const
nsAString
&
aType
)
;
already_AddRefed
<
layers
:
:
KnowsCompositor
>
GetCompositor
(
)
;
void
CreateMediaCapabilitiesDecodingInfo
(
const
MediaDecodingConfiguration
&
aConfiguration
ErrorResult
&
aRv
Promise
*
aPromise
)
;
RefPtr
<
MediaKeySystemAccessManager
:
:
MediaKeySystemAccessPromise
>
CheckEncryptedDecodingSupport
(
const
MediaDecodingConfiguration
&
aConfiguration
)
;
nsCOMPtr
<
nsIGlobalObject
>
mParent
;
}
;
}
}
#
endif
