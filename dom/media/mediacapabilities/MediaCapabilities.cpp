#
include
"
MediaCapabilities
.
h
"
#
include
"
Benchmark
.
h
"
#
include
"
DecoderTraits
.
h
"
#
include
"
Layers
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaRecorder
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
VPXDecoder
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
dom
/
DOMMozPromiseRequestHolder
.
h
"
#
include
"
mozilla
/
dom
/
MediaCapabilitiesBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaSource
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
layers
/
KnowsCompositor
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
MediaCapabilities
:
:
MediaCapabilities
(
nsIGlobalObject
*
aParent
)
:
mParent
(
aParent
)
{
}
already_AddRefed
<
Promise
>
MediaCapabilities
:
:
DecodingInfo
(
const
MediaDecodingConfiguration
&
aConfiguration
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mParent
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
aConfiguration
.
IsAnyMemberPresent
(
)
|
|
(
!
aConfiguration
.
mVideo
.
IsAnyMemberPresent
(
)
&
&
!
aConfiguration
.
mAudio
.
IsAnyMemberPresent
(
)
)
)
{
aRv
.
ThrowTypeError
<
MSG_MISSING_REQUIRED_DICTIONARY_MEMBER
>
(
NS_LITERAL_STRING
(
"
'
audio
'
or
'
video
'
"
)
)
;
return
nullptr
;
}
bool
supported
=
true
;
Maybe
<
MediaContainerType
>
videoContainer
;
Maybe
<
MediaContainerType
>
audioContainer
;
if
(
aConfiguration
.
mVideo
.
IsAnyMemberPresent
(
)
)
{
videoContainer
=
CheckVideoConfiguration
(
aConfiguration
.
mVideo
)
;
if
(
!
videoContainer
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_MEDIA_VIDEO_CONFIGURATION
>
(
)
;
return
nullptr
;
}
supported
&
=
aConfiguration
.
mType
=
=
MediaDecodingType
:
:
File
?
CheckTypeForFile
(
aConfiguration
.
mVideo
.
mContentType
)
:
CheckTypeForMediaSource
(
aConfiguration
.
mVideo
.
mContentType
)
;
}
if
(
aConfiguration
.
mAudio
.
IsAnyMemberPresent
(
)
)
{
audioContainer
=
CheckAudioConfiguration
(
aConfiguration
.
mAudio
)
;
if
(
!
audioContainer
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_MEDIA_AUDIO_CONFIGURATION
>
(
)
;
return
nullptr
;
}
supported
&
=
aConfiguration
.
mType
=
=
MediaDecodingType
:
:
File
?
CheckTypeForFile
(
aConfiguration
.
mAudio
.
mContentType
)
:
CheckTypeForMediaSource
(
aConfiguration
.
mAudio
.
mContentType
)
;
}
if
(
!
supported
)
{
auto
info
=
MakeUnique
<
MediaCapabilitiesInfo
>
(
false
false
false
)
;
promise
-
>
MaybeResolve
(
std
:
:
move
(
info
)
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
UniquePtr
<
TrackInfo
>
>
tracks
;
if
(
aConfiguration
.
mVideo
.
IsAnyMemberPresent
(
)
)
{
MOZ_ASSERT
(
videoContainer
.
isSome
(
)
"
configuration
is
valid
and
supported
"
)
;
auto
videoTracks
=
DecoderTraits
:
:
GetTracksInfo
(
*
videoContainer
)
;
if
(
videoTracks
.
Length
(
)
!
=
1
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
)
;
return
promise
.
forget
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
videoTracks
.
ElementAt
(
0
)
"
must
contain
a
valid
trackinfo
"
)
;
tracks
.
AppendElements
(
std
:
:
move
(
videoTracks
)
)
;
}
if
(
aConfiguration
.
mAudio
.
IsAnyMemberPresent
(
)
)
{
MOZ_ASSERT
(
audioContainer
.
isSome
(
)
"
configuration
is
valid
and
supported
"
)
;
auto
audioTracks
=
DecoderTraits
:
:
GetTracksInfo
(
*
audioContainer
)
;
if
(
audioTracks
.
Length
(
)
!
=
1
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
)
;
return
promise
.
forget
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
audioTracks
.
ElementAt
(
0
)
"
must
contain
a
valid
trackinfo
"
)
;
tracks
.
AppendElements
(
std
:
:
move
(
audioTracks
)
)
;
}
typedef
MozPromise
<
MediaCapabilitiesInfo
MediaResult
true
>
CapabilitiesPromise
;
nsTArray
<
RefPtr
<
CapabilitiesPromise
>
>
promises
;
RefPtr
<
TaskQueue
>
taskQueue
=
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
PLATFORM_DECODER
)
"
MediaCapabilities
:
:
TaskQueue
"
)
;
for
(
auto
&
&
config
:
tracks
)
{
TrackInfo
:
:
TrackType
type
=
config
-
>
IsVideo
(
)
?
TrackInfo
:
:
kVideoTrack
:
TrackInfo
:
:
kAudioTrack
;
MOZ_ASSERT
(
type
=
=
TrackInfo
:
:
kAudioTrack
|
|
videoContainer
-
>
ExtendedType
(
)
.
GetFramerate
(
)
.
isSome
(
)
"
framerate
is
a
required
member
of
VideoConfiguration
"
)
;
if
(
type
=
=
TrackInfo
:
:
kAudioTrack
)
{
RefPtr
<
PDMFactory
>
pdm
=
new
PDMFactory
(
)
;
if
(
!
pdm
-
>
Supports
(
*
config
nullptr
)
)
{
auto
info
=
MakeUnique
<
MediaCapabilitiesInfo
>
(
false
false
false
)
;
promise
-
>
MaybeResolve
(
std
:
:
move
(
info
)
)
;
return
promise
.
forget
(
)
;
}
promises
.
AppendElement
(
CapabilitiesPromise
:
:
CreateAndResolve
(
MediaCapabilitiesInfo
(
true
true
true
)
__func__
)
)
;
continue
;
}
RefPtr
<
layers
:
:
KnowsCompositor
>
compositor
=
GetCompositor
(
)
;
double
frameRate
=
videoContainer
-
>
ExtendedType
(
)
.
GetFramerate
(
)
.
ref
(
)
;
promises
.
AppendElement
(
InvokeAsync
(
taskQueue
__func__
[
taskQueue
frameRate
compositor
config
=
std
:
:
move
(
config
)
]
(
)
mutable
-
>
RefPtr
<
CapabilitiesPromise
>
{
CreateDecoderParams
params
{
*
config
taskQueue
compositor
CreateDecoderParams
:
:
VideoFrameRate
(
frameRate
)
TrackInfo
:
:
kVideoTrack
}
;
RefPtr
<
PDMFactory
>
pdm
=
new
PDMFactory
(
)
;
RefPtr
<
MediaDataDecoder
>
decoder
=
pdm
-
>
CreateDecoder
(
params
)
;
if
(
!
decoder
)
{
return
CapabilitiesPromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
"
Can
'
t
create
decoder
"
)
__func__
)
;
}
return
decoder
-
>
Init
(
)
-
>
Then
(
taskQueue
__func__
[
taskQueue
decoder
frameRate
config
=
std
:
:
move
(
config
)
]
(
const
MediaDataDecoder
:
:
InitPromise
:
:
ResolveOrRejectValue
&
aValue
)
mutable
{
RefPtr
<
CapabilitiesPromise
>
p
;
if
(
aValue
.
IsReject
(
)
)
{
p
=
CapabilitiesPromise
:
:
CreateAndReject
(
aValue
.
RejectValue
(
)
__func__
)
;
}
else
{
MOZ_ASSERT
(
config
-
>
IsVideo
(
)
)
;
nsAutoCString
reason
;
bool
powerEfficient
=
true
;
bool
smooth
=
true
;
if
(
config
-
>
GetAsVideoInfo
(
)
-
>
mImage
.
height
>
480
)
{
powerEfficient
=
decoder
-
>
IsHardwareAccelerated
(
reason
)
;
if
(
!
powerEfficient
&
&
VPXDecoder
:
:
IsVP9
(
config
-
>
mMimeType
)
)
{
smooth
=
VP9Benchmark
:
:
IsVP9DecodeFast
(
true
)
;
uint32_t
fps
=
StaticPrefs
:
:
MediaBenchmarkVp9Fps
(
)
;
if
(
!
smooth
&
&
fps
>
0
)
{
const
auto
&
videoConfig
=
*
config
-
>
GetAsVideoInfo
(
)
;
double
needed
=
(
(
1280
.
0
*
720
.
0
)
/
(
videoConfig
.
mImage
.
width
*
videoConfig
.
mImage
.
height
)
*
fps
)
/
frameRate
;
smooth
=
needed
>
2
;
}
}
}
p
=
CapabilitiesPromise
:
:
CreateAndResolve
(
MediaCapabilitiesInfo
(
true
smooth
powerEfficient
)
__func__
)
;
}
MOZ_ASSERT
(
p
.
get
(
)
"
the
promise
has
been
created
"
)
;
decoder
-
>
Shutdown
(
)
-
>
Then
(
taskQueue
__func__
[
taskQueue
decoder
config
=
std
:
:
move
(
config
)
]
(
const
ShutdownPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
}
)
;
return
p
;
}
)
;
}
)
)
;
}
auto
holder
=
MakeRefPtr
<
DOMMozPromiseRequestHolder
<
CapabilitiesPromise
:
:
AllPromiseType
>
>
(
mParent
)
;
RefPtr
<
nsISerialEventTarget
>
targetThread
;
RefPtr
<
StrongWorkerRef
>
workerRef
;
if
(
NS_IsMainThread
(
)
)
{
targetThread
=
mParent
-
>
AbstractMainThreadFor
(
TaskCategory
:
:
Other
)
;
}
else
{
WorkerPrivate
*
wp
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_ASSERT
(
wp
"
Must
be
called
from
a
worker
thread
"
)
;
targetThread
=
wp
-
>
HybridEventTarget
(
)
;
RefPtr
<
StrongWorkerRef
>
strongWorkerRef
=
StrongWorkerRef
:
:
Create
(
wp
"
MediaCapabilities
"
[
holder
targetThread
]
(
)
{
MOZ_ASSERT
(
targetThread
-
>
IsOnCurrentThread
(
)
)
;
holder
-
>
DisconnectIfExists
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
}
MOZ_ASSERT
(
targetThread
)
;
CapabilitiesPromise
:
:
All
(
targetThread
promises
)
-
>
Then
(
targetThread
__func__
[
promise
tracks
=
std
:
:
move
(
tracks
)
workerRef
holder
]
(
const
CapabilitiesPromise
:
:
AllPromiseType
:
:
ResolveOrRejectValue
&
aValue
)
{
holder
-
>
Complete
(
)
;
if
(
aValue
.
IsReject
(
)
)
{
auto
info
=
MakeUnique
<
MediaCapabilitiesInfo
>
(
false
false
false
)
;
promise
-
>
MaybeResolve
(
std
:
:
move
(
info
)
)
;
return
;
}
bool
powerEfficient
=
true
;
bool
smooth
=
true
;
for
(
auto
&
&
capability
:
aValue
.
ResolveValue
(
)
)
{
smooth
&
=
capability
.
Smooth
(
)
;
powerEfficient
&
=
capability
.
PowerEfficient
(
)
;
}
auto
info
=
MakeUnique
<
MediaCapabilitiesInfo
>
(
true
smooth
powerEfficient
)
;
promise
-
>
MaybeResolve
(
std
:
:
move
(
info
)
)
;
}
)
-
>
Track
(
*
holder
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
MediaCapabilities
:
:
EncodingInfo
(
const
MediaEncodingConfiguration
&
aConfiguration
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mParent
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
aConfiguration
.
IsAnyMemberPresent
(
)
|
|
(
!
aConfiguration
.
mVideo
.
IsAnyMemberPresent
(
)
&
&
!
aConfiguration
.
mAudio
.
IsAnyMemberPresent
(
)
)
)
{
aRv
.
ThrowTypeError
<
MSG_MISSING_REQUIRED_DICTIONARY_MEMBER
>
(
NS_LITERAL_STRING
(
"
'
audio
'
or
'
video
'
"
)
)
;
return
nullptr
;
}
bool
supported
=
true
;
if
(
aConfiguration
.
mVideo
.
IsAnyMemberPresent
(
)
)
{
if
(
!
CheckVideoConfiguration
(
aConfiguration
.
mVideo
)
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_MEDIA_VIDEO_CONFIGURATION
>
(
)
;
return
nullptr
;
}
supported
&
=
CheckTypeForEncoder
(
aConfiguration
.
mVideo
.
mContentType
)
;
}
if
(
aConfiguration
.
mAudio
.
IsAnyMemberPresent
(
)
)
{
if
(
!
CheckAudioConfiguration
(
aConfiguration
.
mAudio
)
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_MEDIA_AUDIO_CONFIGURATION
>
(
)
;
return
nullptr
;
}
supported
&
=
CheckTypeForEncoder
(
aConfiguration
.
mAudio
.
mContentType
)
;
}
auto
info
=
MakeUnique
<
MediaCapabilitiesInfo
>
(
supported
supported
false
)
;
promise
-
>
MaybeResolve
(
std
:
:
move
(
info
)
)
;
return
promise
.
forget
(
)
;
}
Maybe
<
MediaContainerType
>
MediaCapabilities
:
:
CheckVideoConfiguration
(
const
VideoConfiguration
&
aConfig
)
const
{
Maybe
<
MediaExtendedMIMEType
>
container
=
MakeMediaExtendedMIMEType
(
aConfig
)
;
if
(
!
container
)
{
return
Nothing
(
)
;
}
if
(
!
container
-
>
Type
(
)
.
HasVideoMajorType
(
)
&
&
!
container
-
>
Type
(
)
.
HasApplicationMajorType
(
)
)
{
return
Nothing
(
)
;
}
return
Some
(
MediaContainerType
(
std
:
:
move
(
*
container
)
)
)
;
}
Maybe
<
MediaContainerType
>
MediaCapabilities
:
:
CheckAudioConfiguration
(
const
AudioConfiguration
&
aConfig
)
const
{
Maybe
<
MediaExtendedMIMEType
>
container
=
MakeMediaExtendedMIMEType
(
aConfig
)
;
if
(
!
container
)
{
return
Nothing
(
)
;
}
if
(
!
container
-
>
Type
(
)
.
HasAudioMajorType
(
)
&
&
!
container
-
>
Type
(
)
.
HasApplicationMajorType
(
)
)
{
return
Nothing
(
)
;
}
return
Some
(
MediaContainerType
(
std
:
:
move
(
*
container
)
)
)
;
}
bool
MediaCapabilities
:
:
CheckTypeForMediaSource
(
const
nsAString
&
aType
)
{
return
NS_SUCCEEDED
(
MediaSource
:
:
IsTypeSupported
(
aType
nullptr
)
)
;
}
bool
MediaCapabilities
:
:
CheckTypeForFile
(
const
nsAString
&
aType
)
{
Maybe
<
MediaContainerType
>
containerType
=
MakeMediaContainerType
(
aType
)
;
if
(
!
containerType
)
{
return
false
;
}
return
DecoderTraits
:
:
CanHandleContainerType
(
*
containerType
nullptr
)
!
=
CANPLAY_NO
;
}
bool
MediaCapabilities
:
:
CheckTypeForEncoder
(
const
nsAString
&
aType
)
{
return
MediaRecorder
:
:
IsTypeSupported
(
aType
)
;
}
already_AddRefed
<
layers
:
:
KnowsCompositor
>
MediaCapabilities
:
:
GetCompositor
(
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
GetParentObject
(
)
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
nullptr
;
}
RefPtr
<
layers
:
:
LayerManager
>
layerManager
=
nsContentUtils
:
:
LayerManagerForDocument
(
doc
)
;
if
(
NS_WARN_IF
(
!
layerManager
)
)
{
return
nullptr
;
}
RefPtr
<
layers
:
:
KnowsCompositor
>
knows
=
layerManager
-
>
AsKnowsCompositor
(
)
;
if
(
NS_WARN_IF
(
!
knows
)
)
{
return
nullptr
;
}
return
knows
-
>
GetForMedia
(
)
.
forget
(
)
;
}
bool
MediaCapabilities
:
:
Enabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
return
StaticPrefs
:
:
MediaCapabilitiesEnabled
(
)
;
}
JSObject
*
MediaCapabilities
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaCapabilities_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MediaCapabilities
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
MediaCapabilities
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
MediaCapabilities
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
MediaCapabilities
mParent
)
bool
MediaCapabilitiesInfo
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
{
return
MediaCapabilitiesInfo_Binding
:
:
Wrap
(
aCx
this
aGivenProto
aReflector
)
;
}
}
}
