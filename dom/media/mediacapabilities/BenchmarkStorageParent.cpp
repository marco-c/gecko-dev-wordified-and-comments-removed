#
include
"
BenchmarkStorageParent
.
h
"
#
include
"
KeyValueStorage
.
h
"
namespace
mozilla
{
const
int32_t
AVG_WINDOW
=
20
;
void
MovingAverage
(
int32_t
&
aAverage
int32_t
&
aWindow
const
int32_t
aValue
)
{
if
(
aWindow
<
AVG_WINDOW
)
{
aAverage
=
(
aAverage
*
aWindow
+
aValue
)
/
(
aWindow
+
1
)
;
aWindow
+
+
;
return
;
}
MOZ_ASSERT
(
aWindow
=
=
AVG_WINDOW
)
;
aAverage
=
(
aAverage
-
aAverage
/
aWindow
)
+
(
aValue
/
aWindow
)
;
}
int32_t
ParseStoredValue
(
int32_t
aValue
int32_t
&
aWindow
)
{
MOZ_ASSERT
(
aValue
>
999
)
;
MOZ_ASSERT
(
aValue
<
100000
)
;
int32_t
score
=
aValue
%
1000
;
aWindow
=
(
aValue
/
1000
)
%
100
;
return
score
;
}
int32_t
PrepareStoredValue
(
int32_t
aScore
int32_t
aWindow
)
{
MOZ_ASSERT
(
aScore
>
=
0
)
;
MOZ_ASSERT
(
aScore
<
=
100
)
;
MOZ_ASSERT
(
aWindow
>
0
)
;
MOZ_ASSERT
(
aWindow
<
21
)
;
return
aWindow
*
1000
+
aScore
;
}
BenchmarkStorageParent
:
:
BenchmarkStorageParent
(
)
:
mStorage
(
new
KeyValueStorage
)
{
}
IPCResult
BenchmarkStorageParent
:
:
RecvPut
(
const
nsCString
&
aDbName
const
nsCString
&
aKey
const
int32_t
&
aValue
)
{
mStorage
-
>
Get
(
aDbName
aKey
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
storage
=
mStorage
aDbName
aKey
aValue
]
(
int32_t
aResult
)
{
int32_t
window
=
0
;
int32_t
average
=
0
;
if
(
aResult
>
=
0
)
{
average
=
ParseStoredValue
(
aResult
window
)
;
}
MovingAverage
(
average
window
aValue
)
;
int32_t
newValue
=
PrepareStoredValue
(
average
window
)
;
storage
-
>
Put
(
aDbName
aKey
newValue
)
;
}
[
]
(
nsresult
rv
)
{
}
)
;
return
IPC_OK
(
)
;
}
IPCResult
BenchmarkStorageParent
:
:
RecvGet
(
const
nsCString
&
aDbName
const
nsCString
&
aKey
GetResolver
&
&
aResolve
)
{
mStorage
-
>
Get
(
aDbName
aKey
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
aResolve
]
(
int32_t
aResult
)
{
int32_t
window
=
0
;
aResolve
(
aResult
<
0
?
-
1
:
ParseStoredValue
(
aResult
window
)
)
;
}
[
aResolve
]
(
nsresult
rv
)
{
aResolve
(
-
1
)
;
}
)
;
return
IPC_OK
(
)
;
}
IPCResult
BenchmarkStorageParent
:
:
RecvCheckVersion
(
const
nsCString
&
aDbName
int32_t
aVersion
)
{
mStorage
-
>
Get
(
aDbName
NS_LITERAL_CSTRING
(
"
Version
"
)
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
storage
=
mStorage
aDbName
aVersion
]
(
int32_t
aResult
)
{
if
(
aVersion
!
=
aResult
)
{
storage
-
>
Clear
(
aDbName
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
storage
aDbName
aVersion
]
(
bool
)
{
storage
-
>
Put
(
aDbName
NS_LITERAL_CSTRING
(
"
Version
"
)
aVersion
)
;
}
[
]
(
nsresult
rv
)
{
}
)
;
}
}
[
]
(
nsresult
rv
)
{
}
)
;
return
IPC_OK
(
)
;
}
}
;
