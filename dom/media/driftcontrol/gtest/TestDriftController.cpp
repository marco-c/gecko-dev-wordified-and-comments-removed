#
include
"
gtest
/
gtest
.
h
"
#
include
"
DriftController
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
using
namespace
mozilla
;
using
TimeUnit
=
media
:
:
TimeUnit
;
void
AdvanceByOutputDuration
(
TimeUnit
*
aCurrentBuffered
DriftController
*
aController
TimeUnit
aOutputDuration
uint32_t
aNextBufferedInputFrames
)
{
uint32_t
nominalSourceRate
=
aController
-
>
mSourceRate
;
uint32_t
nominalTargetRate
=
aController
-
>
mTargetRate
;
uint32_t
correctedRate
=
aController
-
>
GetCorrectedSourceRate
(
)
;
*
aCurrentBuffered
=
aCurrentBuffered
-
>
ToBase
(
static_cast
<
int64_t
>
(
nominalSourceRate
)
*
nominalTargetRate
)
;
*
aCurrentBuffered
-
=
aOutputDuration
.
ToBase
(
*
aCurrentBuffered
)
*
correctedRate
/
nominalSourceRate
;
int64_t
currentBufferedInputFrames
=
aCurrentBuffered
-
>
ToBase
<
TimeUnit
:
:
FloorPolicy
>
(
nominalSourceRate
)
.
ToTicksAtRate
(
nominalSourceRate
)
;
TimeUnit
inputDuration
(
CheckedInt64
(
aNextBufferedInputFrames
)
-
currentBufferedInputFrames
nominalSourceRate
)
;
EXPECT_GE
(
inputDuration
.
ToTicksAtRate
(
nominalSourceRate
)
0
)
;
*
aCurrentBuffered
+
=
inputDuration
;
uint32_t
bufferSize
=
0
;
aController
-
>
UpdateClock
(
inputDuration
aOutputDuration
aNextBufferedInputFrames
bufferSize
)
;
}
TEST
(
TestDriftController
Basic
)
{
constexpr
uint32_t
buffered
=
5
*
480
;
constexpr
uint32_t
bufferedLow
=
3
*
480
;
constexpr
uint32_t
bufferedHigh
=
7
*
480
;
TimeUnit
currentBuffered
(
buffered
48000
)
;
DriftController
c
(
48000
48000
currentBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000U
)
;
const
auto
oneSec
=
media
:
:
TimeUnit
(
48000
48000
)
;
uint32_t
stepsPerSec
=
50
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedLow
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47957u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47957u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48005u
)
;
}
TEST
(
TestDriftController
BasicResampler
)
{
constexpr
uint32_t
buffered
=
5
*
480
;
constexpr
uint32_t
bufferedLow
=
3
*
480
;
constexpr
uint32_t
bufferedHigh
=
7
*
480
;
TimeUnit
currentBuffered
(
buffered
48000
)
;
DriftController
c
(
48000
24000
currentBuffered
)
;
const
auto
oneSec
=
media
:
:
TimeUnit
(
48000
48000
)
;
uint32_t
stepsPerSec
=
50
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedLow
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47957u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47957u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48005u
)
;
}
TEST
(
TestDriftController
BufferedInput
)
{
constexpr
uint32_t
buffered
=
5
*
480
;
constexpr
uint32_t
bufferedLow
=
3
*
480
;
constexpr
uint32_t
bufferedHigh
=
7
*
480
;
TimeUnit
currentBuffered
(
buffered
48000
)
;
DriftController
c
(
48000
48000
currentBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
const
auto
oneSec
=
media
:
:
TimeUnit
(
48000
48000
)
;
uint32_t
stepsPerSec
=
20
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
0
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47990u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedLow
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47971u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47960u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47960u
)
;
}
TEST
(
TestDriftController
BufferedInputWithResampling
)
{
constexpr
uint32_t
buffered
=
5
*
480
;
constexpr
uint32_t
bufferedLow
=
3
*
480
;
constexpr
uint32_t
bufferedHigh
=
7
*
480
;
TimeUnit
currentBuffered
(
buffered
48000
)
;
DriftController
c
(
48000
24000
currentBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
const
auto
oneSec
=
media
:
:
TimeUnit
(
24000
24000
)
;
uint32_t
stepsPerSec
=
20
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
0
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47990u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedLow
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47971u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47960u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47960u
)
;
}
TEST
(
TestDriftController
SmallError
)
{
constexpr
uint32_t
buffered
=
5
*
480
;
constexpr
uint32_t
bufferedLow
=
buffered
-
48
;
constexpr
uint32_t
bufferedHigh
=
buffered
+
48
;
TimeUnit
currentBuffered
(
buffered
48000
)
;
DriftController
c
(
48000
48000
currentBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
const
auto
oneSec
=
media
:
:
TimeUnit
(
48000
48000
)
;
uint32_t
stepsPerSec
=
25
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
buffered
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedLow
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
stepDuration
bufferedHigh
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000u
)
;
}
TEST
(
TestDriftController
SmallBufferedFrames
)
{
constexpr
uint32_t
bufferedLow
=
3
*
480
;
DriftController
c
(
48000
48000
media
:
:
TimeUnit
:
:
FromSeconds
(
0
.
05
)
)
;
media
:
:
TimeUnit
oneSec
=
media
:
:
TimeUnit
:
:
FromSeconds
(
1
)
;
uint32_t
stepsPerSec
=
40
;
media
:
:
TimeUnit
stepDuration
=
oneSec
/
stepsPerSec
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000U
)
;
for
(
uint32_t
i
=
0
;
i
<
stepsPerSec
-
1
;
+
+
i
)
{
c
.
UpdateClock
(
stepDuration
stepDuration
bufferedLow
0
)
;
}
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
48000U
)
;
c
.
UpdateClock
(
stepDuration
stepDuration
bufferedLow
0
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
47996U
)
;
}
TEST
(
TestDriftController
VerySmallBufferedFrames
)
{
uint32_t
bufferedLow
=
1
;
uint32_t
nominalRate
=
48000
;
DriftController
c
(
nominalRate
nominalRate
media
:
:
TimeUnit
:
:
FromSeconds
(
1
)
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
nominalRate
)
;
TimeUnit
currentBuffered
(
bufferedLow
48000
)
;
media
:
:
TimeUnit
hundredMillis
=
media
:
:
TimeUnit
(
100
1000
)
;
uint32_t
previousCorrected
=
nominalRate
;
for
(
uint32_t
i
=
0
;
i
<
15000
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
hundredMillis
bufferedLow
)
;
uint32_t
correctedRate
=
c
.
GetCorrectedSourceRate
(
)
;
EXPECT_LE
(
correctedRate
previousCorrected
)
<
<
"
for
i
=
"
<
<
i
;
EXPECT_GT
(
correctedRate
0u
)
<
<
"
for
i
=
"
<
<
i
;
previousCorrected
=
correctedRate
;
}
EXPECT_EQ
(
previousCorrected
1u
)
;
for
(
uint32_t
i
=
15000
;
i
<
15010
;
+
+
i
)
{
AdvanceByOutputDuration
(
&
currentBuffered
&
c
hundredMillis
bufferedLow
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
1u
)
<
<
"
for
i
=
"
<
<
i
;
}
}
TEST
(
TestDriftController
SmallStepResponse
)
{
uint32_t
nominalTargetRate
=
48000
;
uint32_t
nominalSourceRate
=
48000
;
uint32_t
actualSourceRate
=
48000
*
1001
/
1000
;
TimeUnit
desiredBuffered
=
TimeUnit
:
:
FromSeconds
(
0
.
05
)
;
DriftController
c
(
nominalSourceRate
nominalTargetRate
desiredBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
nominalSourceRate
)
;
uint32_t
stepsPerSec
=
25
;
TimeUnit
buffered
=
desiredBuffered
.
ToBase
(
nominalSourceRate
*
stepsPerSec
)
;
media
:
:
TimeUnit
inputStepDuration
(
actualSourceRate
stepsPerSec
*
nominalSourceRate
)
;
media
:
:
TimeUnit
outputStepDuration
(
nominalTargetRate
stepsPerSec
*
nominalTargetRate
)
;
uint32_t
iterationCount
=
200
*
stepsPerSec
;
for
(
uint32_t
i
=
0
;
i
<
iterationCount
;
+
+
i
)
{
uint32_t
correctedRate
=
c
.
GetCorrectedSourceRate
(
)
;
buffered
+
=
TimeUnit
(
CheckedInt64
(
actualSourceRate
)
-
correctedRate
stepsPerSec
*
nominalSourceRate
)
;
c
.
UpdateClock
(
inputStepDuration
outputStepDuration
buffered
.
ToTicksAtRate
(
nominalSourceRate
)
0
)
;
if
(
outputStepDuration
*
i
>
TimeUnit
:
:
FromSeconds
(
50
)
&
&
i
%
stepsPerSec
=
=
0
)
{
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
actualSourceRate
)
<
<
"
for
i
=
"
<
<
i
;
EXPECT_NEAR
(
buffered
.
ToTicksAtRate
(
nominalSourceRate
)
desiredBuffered
.
ToTicksAtRate
(
nominalSourceRate
)
10
)
<
<
"
for
i
=
"
<
<
i
;
}
}
}
TEST
(
TestDriftController
LargeStepResponse
)
{
uint32_t
nominalTargetRate
=
48000
;
uint32_t
nominalSourceRate
=
48000
*
7
/
8
;
uint32_t
actualSourceRate
=
48000
;
TimeUnit
desiredBuffered
(
actualSourceRate
*
10
nominalSourceRate
)
;
DriftController
c
(
nominalSourceRate
nominalTargetRate
desiredBuffered
)
;
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
nominalSourceRate
)
;
uint32_t
stepsPerSec
=
20
;
TimeUnit
buffered
=
desiredBuffered
.
ToBase
(
nominalSourceRate
*
stepsPerSec
)
;
media
:
:
TimeUnit
inputStepDuration
(
actualSourceRate
stepsPerSec
*
nominalSourceRate
)
;
media
:
:
TimeUnit
outputStepDuration
(
nominalTargetRate
stepsPerSec
*
nominalTargetRate
)
;
uint32_t
iterationCount
=
8
*
stepsPerSec
*
1000
*
(
actualSourceRate
-
nominalSourceRate
)
/
nominalSourceRate
;
EXPECT_GT
(
outputStepDuration
*
(
iterationCount
-
1
)
TimeUnit
:
:
FromSeconds
(
1020
)
)
;
for
(
uint32_t
i
=
0
;
i
<
iterationCount
;
+
+
i
)
{
uint32_t
correctedRate
=
c
.
GetCorrectedSourceRate
(
)
;
buffered
+
=
TimeUnit
(
CheckedInt64
(
actualSourceRate
)
-
correctedRate
stepsPerSec
*
nominalSourceRate
)
;
c
.
UpdateClock
(
inputStepDuration
outputStepDuration
buffered
.
ToTicksAtRate
(
nominalSourceRate
)
0
)
;
if
(
outputStepDuration
*
i
>
TimeUnit
:
:
FromSeconds
(
1020
)
&
&
i
%
stepsPerSec
=
=
0
)
{
EXPECT_EQ
(
c
.
GetCorrectedSourceRate
(
)
actualSourceRate
)
<
<
"
for
i
=
"
<
<
i
;
EXPECT_NEAR
(
buffered
.
ToTicksAtRate
(
nominalSourceRate
)
desiredBuffered
.
ToTicksAtRate
(
nominalSourceRate
)
10
)
<
<
"
for
i
=
"
<
<
i
;
}
}
}
