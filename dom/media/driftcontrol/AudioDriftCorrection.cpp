#
include
"
AudioDriftCorrection
.
h
"
#
include
"
AudioResampler
.
h
"
#
include
"
DriftController
.
h
"
namespace
mozilla
{
static
constexpr
uint32_t
kMinBufferMs
=
5
;
AudioDriftCorrection
:
:
AudioDriftCorrection
(
uint32_t
aSourceRate
uint32_t
aTargetRate
uint32_t
aBufferMs
const
PrincipalHandle
&
aPrincipalHandle
)
:
mDesiredBuffering
(
std
:
:
max
(
kMinBufferMs
aBufferMs
)
*
aSourceRate
/
1000
)
mTargetRate
(
aTargetRate
)
mDriftController
(
MakeUnique
<
DriftController
>
(
aSourceRate
aTargetRate
mDesiredBuffering
)
)
mResampler
(
MakeUnique
<
AudioResampler
>
(
aSourceRate
aTargetRate
mDesiredBuffering
aPrincipalHandle
)
)
{
}
AudioDriftCorrection
:
:
~
AudioDriftCorrection
(
)
=
default
;
AudioSegment
AudioDriftCorrection
:
:
RequestFrames
(
const
AudioSegment
&
aInput
uint32_t
aOutputFrames
)
{
uint32_t
inputFrames
=
aInput
.
GetDuration
(
)
;
if
(
aInput
.
GetDuration
(
)
)
{
mResampler
-
>
AppendInput
(
aInput
)
;
}
bool
hasUnderrun
=
false
;
AudioSegment
output
=
mResampler
-
>
Resample
(
aOutputFrames
&
hasUnderrun
)
;
mDriftController
-
>
UpdateClock
(
inputFrames
aOutputFrames
mResampler
-
>
InputReadableFrames
(
)
mResampler
-
>
InputWritableFrames
(
)
)
;
mResampler
-
>
UpdateOutRate
(
mDriftController
-
>
GetCorrectedTargetRate
(
)
)
;
if
(
hasUnderrun
)
{
NS_WARNING
(
"
Drift
-
correction
:
Underrun
"
)
;
}
return
output
;
}
uint32_t
AudioDriftCorrection
:
:
CurrentBuffering
(
)
const
{
return
mResampler
-
>
InputReadableFrames
(
)
;
}
uint32_t
AudioDriftCorrection
:
:
NumCorrectionChanges
(
)
const
{
return
mDriftController
-
>
NumCorrectionChanges
(
)
;
}
}
