#
ifndef
DOM_MEDIA_DRIFTCONTROL_AUDIOCHUNKLIST_H_
#
define
DOM_MEDIA_DRIFTCONTROL_AUDIOCHUNKLIST_H_
#
include
"
AudioSegment
.
h
"
#
include
"
TimeUnits
.
h
"
namespace
mozilla
{
class
AudioChunkList
{
public
:
AudioChunkList
(
uint32_t
aTotalDuration
uint32_t
aChannels
const
PrincipalHandle
&
aPrincipalHandle
)
;
AudioChunkList
(
const
AudioChunkList
&
)
=
delete
;
AudioChunkList
(
AudioChunkList
&
&
)
=
delete
;
~
AudioChunkList
(
)
=
default
;
void
SetSampleFormat
(
AudioSampleFormat
aFormat
)
;
AudioChunk
&
GetNext
(
)
;
uint32_t
ChunkCapacity
(
)
const
{
MOZ_ASSERT
(
mSampleFormat
=
=
AUDIO_FORMAT_S16
|
|
mSampleFormat
=
=
AUDIO_FORMAT_FLOAT32
)
;
return
mChunkCapacity
;
}
uint32_t
TotalCapacity
(
)
const
{
MOZ_ASSERT
(
mSampleFormat
=
=
AUDIO_FORMAT_S16
|
|
mSampleFormat
=
=
AUDIO_FORMAT_FLOAT32
)
;
return
CheckedInt
<
uint32_t
>
(
mChunkCapacity
*
mChunks
.
Length
(
)
)
.
value
(
)
;
}
void
Update
(
uint32_t
aChannels
)
;
private
:
void
IncrementIndex
(
)
{
+
+
mIndex
;
mIndex
=
CheckedInt
<
uint32_t
>
(
mIndex
%
mChunks
.
Length
(
)
)
.
value
(
)
;
}
void
CreateChunks
(
uint32_t
aNumOfChunks
uint32_t
aChannels
)
;
void
UpdateToMonoOrStereo
(
uint32_t
aChannels
)
;
private
:
const
PrincipalHandle
mPrincipalHandle
;
nsTArray
<
AudioChunk
>
mChunks
;
uint32_t
mIndex
=
0
;
uint32_t
mChunkCapacity
=
WEBAUDIO_BLOCK_SIZE
;
AudioSampleFormat
mSampleFormat
=
AUDIO_FORMAT_SILENCE
;
}
;
}
#
endif
