#
include
"
ClockDrift
.
h
"
#
include
<
atomic
>
#
include
<
mutex
>
#
include
"
mozilla
/
Logging
.
h
"
namespace
mozilla
{
LazyLogModule
gClockDriftGraphsLog
(
"
ClockDriftGraphs
"
)
;
extern
LazyLogModule
gMediaTrackGraphLog
;
#
define
LOG_CLOCKDRIFT
(
level
obj
format
.
.
.
)
\
MOZ_LOG
(
gMediaTrackGraphLog
level
\
(
"
ClockDrift
%
p
:
(
plot
-
id
%
u
)
"
format
obj
(
obj
)
-
>
mPlotId
\
#
#
__VA_ARGS__
)
)
#
define
LOG_PLOT_NAMES
(
)
\
MOZ_LOG
(
gClockDriftGraphsLog
LogLevel
:
:
Verbose
\
(
"
id
t
buffering
desired
inrate
outrate
"
\
"
corrected
"
)
)
#
define
LOG_PLOT_VALUES
(
id
t
buffering
desired
inrate
outrate
corrected
)
\
MOZ_LOG
(
gClockDriftGraphsLog
LogLevel
:
:
Verbose
\
(
"
ClockDrift
%
u
%
.
3f
%
u
%
u
%
u
%
u
%
.
5f
"
id
t
buffering
desired
\
inrate
outrate
corrected
)
)
static
uint8_t
GenerateId
(
)
{
static
std
:
:
atomic
<
uint8_t
>
id
{
0
}
;
return
+
+
id
;
}
ClockDrift
:
:
ClockDrift
(
uint32_t
aSourceRate
uint32_t
aTargetRate
uint32_t
aDesiredBuffering
)
:
mPlotId
(
GenerateId
(
)
)
mSourceRate
(
aSourceRate
)
mTargetRate
(
aTargetRate
)
mDesiredBuffering
(
aDesiredBuffering
)
{
LOG_CLOCKDRIFT
(
LogLevel
:
:
Info
this
"
Created
.
Resampling
%
uHz
-
>
%
uHz
.
Initial
desired
buffering
:
%
u
frames
.
"
mSourceRate
mTargetRate
mDesiredBuffering
)
;
static
std
:
:
once_flag
sOnceFlag
;
std
:
:
call_once
(
sOnceFlag
[
]
{
LOG_PLOT_NAMES
(
)
;
}
)
;
}
void
ClockDrift
:
:
UpdateClock
(
uint32_t
aSourceFrames
uint32_t
aTargetFrames
uint32_t
aBufferedFrames
uint32_t
aRemainingFrames
)
{
mTargetClock
+
=
aTargetFrames
;
mSourceClock
+
=
aSourceFrames
;
mTotalTargetClock
+
=
aTargetFrames
;
if
(
aSourceFrames
=
=
0
)
{
return
;
}
if
(
mSourceClock
>
=
mSourceRate
/
10
|
|
mTargetClock
>
=
mTargetRate
/
10
)
{
if
(
aBufferedFrames
<
mDesiredBuffering
*
4
/
10
|
|
aRemainingFrames
<
mDesiredBuffering
*
4
/
10
)
{
CalculateCorrection
(
0
.
9
aBufferedFrames
aRemainingFrames
)
;
}
else
if
(
(
mTargetClock
*
1000
/
mTargetRate
)
>
=
mAdjustmentIntervalMs
|
|
(
mSourceClock
*
1000
/
mSourceRate
)
>
=
mAdjustmentIntervalMs
)
{
CalculateCorrection
(
0
.
6
aBufferedFrames
aRemainingFrames
)
;
}
}
}
void
ClockDrift
:
:
CalculateCorrection
(
float
aCalculationWeight
uint32_t
aBufferedFrames
uint32_t
aRemainingFrames
)
{
uint32_t
bufferedFramesDiff
=
aBufferedFrames
-
mDesiredBuffering
;
uint32_t
resampledSourceClock
=
std
:
:
max
(
1u
mSourceClock
+
bufferedFramesDiff
)
;
if
(
mTargetRate
!
=
mSourceRate
)
{
resampledSourceClock
*
=
static_cast
<
float
>
(
mTargetRate
)
/
mSourceRate
;
}
LOG_CLOCKDRIFT
(
LogLevel
:
:
Verbose
this
"
Calculated
correction
%
.
3f
(
with
weight
:
%
.
1f
-
>
"
"
%
.
3f
)
(
buffer
:
%
u
desired
:
%
u
remaining
:
%
u
)
"
static_cast
<
float
>
(
mTargetClock
)
/
resampledSourceClock
aCalculationWeight
(
1
-
aCalculationWeight
)
*
mCorrection
+
aCalculationWeight
*
mTargetClock
/
resampledSourceClock
aBufferedFrames
mDesiredBuffering
aRemainingFrames
)
;
auto
oldCorrection
=
mCorrection
;
mCorrection
=
(
1
-
aCalculationWeight
)
*
mCorrection
+
aCalculationWeight
*
mTargetClock
/
resampledSourceClock
;
LOG_PLOT_VALUES
(
mPlotId
static_cast
<
double
>
(
mTotalTargetClock
)
/
mTargetRate
aBufferedFrames
mDesiredBuffering
mSourceRate
mTargetRate
mCorrection
*
mTargetRate
)
;
if
(
oldCorrection
!
=
mCorrection
)
{
+
+
mNumCorrectionChanges
;
}
mCorrection
=
std
:
:
min
(
std
:
:
max
(
mCorrection
0
.
9f
)
1
.
1f
)
;
mTargetClock
=
0
;
mSourceClock
=
0
;
}
}
#
undef
LOG_PLOT_VALUES
#
undef
LOG_PLOT_NAMES
#
undef
LOG_CLOCKDRIFT
