#
include
"
OggDecoder
.
h
"
#
include
"
MediaContainerType
.
h
"
#
include
"
MediaDecoder
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
nsMimeTypes
.
h
"
namespace
mozilla
{
bool
OggDecoder
:
:
IsSupportedType
(
const
MediaContainerType
&
aContainerType
)
{
if
(
!
StaticPrefs
:
:
media_ogg_enabled
(
)
)
{
return
false
;
}
if
(
aContainerType
.
Type
(
)
!
=
MEDIAMIMETYPE
(
AUDIO_OGG
)
&
&
aContainerType
.
Type
(
)
!
=
MEDIAMIMETYPE
(
"
application
/
ogg
"
)
)
{
return
false
;
}
const
MediaCodecs
&
codecs
=
aContainerType
.
ExtendedType
(
)
.
Codecs
(
)
;
if
(
codecs
.
IsEmpty
(
)
)
{
return
true
;
}
for
(
const
auto
&
codec
:
codecs
.
Range
(
)
)
{
if
(
(
MediaDecoder
:
:
IsOpusEnabled
(
)
&
&
codec
.
EqualsLiteral
(
"
opus
"
)
)
|
|
codec
.
EqualsLiteral
(
"
vorbis
"
)
|
|
codec
.
EqualsLiteral
(
"
flac
"
)
)
{
continue
;
}
return
false
;
}
return
true
;
}
nsTArray
<
UniquePtr
<
TrackInfo
>
>
OggDecoder
:
:
GetTracksInfo
(
const
MediaContainerType
&
aType
)
{
nsTArray
<
UniquePtr
<
TrackInfo
>
>
tracks
;
if
(
!
IsSupportedType
(
aType
)
)
{
return
tracks
;
}
const
MediaCodecs
&
codecs
=
aType
.
ExtendedType
(
)
.
Codecs
(
)
;
if
(
codecs
.
IsEmpty
(
)
)
{
return
tracks
;
}
for
(
const
auto
&
codec
:
codecs
.
Range
(
)
)
{
if
(
codec
.
EqualsLiteral
(
"
opus
"
)
|
|
codec
.
EqualsLiteral
(
"
vorbis
"
)
|
|
codec
.
EqualsLiteral
(
"
flac
"
)
)
{
tracks
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
"
audio
/
"
_ns
+
NS_ConvertUTF16toUTF8
(
codec
)
aType
)
)
;
}
}
return
tracks
;
}
}
