#
include
"
MediaPrefs
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
OggDemuxer
.
h
"
#
include
"
OggDecoder
.
h
"
#
include
"
nsContentTypeParser
.
h
"
namespace
mozilla
{
MediaDecoderStateMachine
*
OggDecoder
:
:
CreateStateMachine
(
)
{
RefPtr
<
OggDemuxer
>
demuxer
=
new
OggDemuxer
(
GetResource
(
)
)
;
RefPtr
<
MediaFormatReader
>
reader
=
new
MediaFormatReader
(
this
demuxer
GetVideoFrameContainer
(
)
)
;
demuxer
-
>
SetChainingEvents
(
&
reader
-
>
TimedMetadataProducer
(
)
&
reader
-
>
MediaNotSeekableProducer
(
)
)
;
return
new
MediaDecoderStateMachine
(
this
reader
)
;
}
bool
OggDecoder
:
:
IsEnabled
(
)
{
return
MediaPrefs
:
:
OggEnabled
(
)
;
}
bool
OggDecoder
:
:
CanHandleMediaType
(
const
nsACString
&
aMIMETypeExcludingCodecs
const
nsAString
&
aCodecs
)
{
if
(
!
IsEnabled
(
)
)
{
return
false
;
}
const
bool
isOggAudio
=
aMIMETypeExcludingCodecs
.
EqualsASCII
(
"
audio
/
ogg
"
)
;
const
bool
isOggVideo
=
aMIMETypeExcludingCodecs
.
EqualsASCII
(
"
video
/
ogg
"
)
|
|
aMIMETypeExcludingCodecs
.
EqualsASCII
(
"
application
/
ogg
"
)
;
if
(
!
isOggAudio
&
&
!
isOggVideo
)
{
return
false
;
}
nsTArray
<
nsCString
>
codecMimes
;
if
(
aCodecs
.
IsEmpty
(
)
)
{
return
true
;
}
nsTArray
<
nsString
>
codecs
;
if
(
!
ParseCodecsString
(
aCodecs
codecs
)
)
{
return
false
;
}
for
(
const
nsString
&
codec
:
codecs
)
{
if
(
(
IsOpusEnabled
(
)
&
&
codec
.
EqualsLiteral
(
"
opus
"
)
)
|
|
codec
.
EqualsLiteral
(
"
vorbis
"
)
|
|
(
MediaPrefs
:
:
FlacInOgg
(
)
&
&
codec
.
EqualsLiteral
(
"
flac
"
)
)
)
{
continue
;
}
if
(
isOggVideo
&
&
codec
.
EqualsLiteral
(
"
theora
"
)
)
{
continue
;
}
return
false
;
}
return
true
;
}
}
