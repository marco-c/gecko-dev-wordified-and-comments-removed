#
ifndef
MOZILLA_TRACKBUFFER_H_
#
define
MOZILLA_TRACKBUFFER_H_
#
include
"
SourceBuffer
.
h
"
#
include
"
SourceBufferDecoder
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nscore
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
<
map
>
namespace
mozilla
{
class
ContainerParser
;
class
MediaSourceDecoder
;
class
MediaByteBuffer
;
class
TrackBuffer
final
:
public
SourceBufferContentManager
{
public
:
TrackBuffer
(
MediaSourceDecoder
*
aParentDecoder
const
nsACString
&
aType
)
;
nsRefPtr
<
ShutdownPromise
>
Shutdown
(
)
;
bool
AppendData
(
MediaByteBuffer
*
aData
media
:
:
TimeUnit
aTimestampOffset
)
override
;
nsRefPtr
<
AppendPromise
>
BufferAppend
(
)
override
;
EvictDataResult
EvictData
(
media
:
:
TimeUnit
aPlaybackTime
uint32_t
aThreshold
media
:
:
TimeUnit
*
aBufferStartTime
)
override
;
void
EvictBefore
(
media
:
:
TimeUnit
aTime
)
override
;
nsRefPtr
<
RangeRemovalPromise
>
RangeRemoval
(
media
:
:
TimeUnit
aStart
media
:
:
TimeUnit
aEnd
)
override
;
void
AbortAppendData
(
)
override
;
int64_t
GetSize
(
)
override
;
void
ResetParserState
(
)
override
;
media
:
:
TimeIntervals
Buffered
(
)
override
;
void
Ended
(
)
override
{
EndCurrentDecoder
(
)
;
}
void
Detach
(
)
override
;
media
:
:
TimeUnit
GroupEndTimestamp
(
)
override
{
return
Buffered
(
)
.
GetEnd
(
)
;
}
void
DiscardCurrentDecoder
(
)
;
void
EndCurrentDecoder
(
)
;
bool
HasInitSegment
(
)
;
bool
IsReady
(
)
;
bool
IsWaitingOnCDMResource
(
)
;
bool
ContainsTime
(
int64_t
aTime
int64_t
aTolerance
)
;
void
BreakCycles
(
)
;
const
nsTArray
<
nsRefPtr
<
SourceBufferDecoder
>
>
&
Decoders
(
)
;
bool
HasOnlyIncompleteMedia
(
)
;
media
:
:
TimeIntervals
GetBuffered
(
SourceBufferDecoder
*
aDecoder
)
;
#
ifdef
MOZ_EME
nsresult
SetCDMProxy
(
CDMProxy
*
aProxy
)
;
#
endif
#
if
defined
(
DEBUG
)
void
Dump
(
const
char
*
aPath
)
override
;
#
endif
typedef
std
:
:
map
<
SourceBufferDecoder
*
media
:
:
TimeIntervals
>
DecoderBufferedMap
;
private
:
friend
class
DecodersToInitialize
;
friend
class
MetadataRecipient
;
virtual
~
TrackBuffer
(
)
;
already_AddRefed
<
SourceBufferDecoder
>
NewDecoder
(
media
:
:
TimeUnit
aTimestampOffset
)
;
int64_t
AppendDataToCurrentResource
(
MediaByteBuffer
*
aData
uint32_t
aDuration
)
;
void
NotifyTimeRangesChanged
(
)
;
void
NotifyReaderDataRemoved
(
MediaDecoderReader
*
aReader
)
;
typedef
MozPromise
<
bool
nsresult
true
>
BufferedRangesUpdatedPromise
;
nsRefPtr
<
BufferedRangesUpdatedPromise
>
UpdateBufferedRanges
(
media
:
:
Interval
<
int64_t
>
aByteRange
bool
aNotifyParent
)
;
bool
QueueInitializeDecoder
(
SourceBufferDecoder
*
aDecoder
)
;
void
InitializeDecoder
(
SourceBufferDecoder
*
aDecoder
)
;
void
CompleteInitializeDecoder
(
SourceBufferDecoder
*
aDecoder
)
;
bool
RegisterDecoder
(
SourceBufferDecoder
*
aDecoder
)
;
bool
ValidateTrackFormats
(
const
MediaInfo
&
aInfo
)
;
void
RemoveDecoder
(
SourceBufferDecoder
*
aDecoder
)
;
void
RemoveEmptyDecoders
(
const
nsTArray
<
SourceBufferDecoder
*
>
&
aDecoders
)
;
void
OnMetadataRead
(
MetadataHolder
*
aMetadata
SourceBufferDecoder
*
aDecoder
bool
aWasEnded
)
;
void
OnMetadataNotRead
(
ReadMetadataFailureReason
aReason
SourceBufferDecoder
*
aDecoder
)
;
nsAutoPtr
<
ContainerParser
>
mParser
;
nsRefPtr
<
MediaByteBuffer
>
mInputBuffer
;
RefPtr
<
TaskQueue
>
mTaskQueue
;
nsTArray
<
nsRefPtr
<
SourceBufferDecoder
>
>
mDecoders
;
nsTArray
<
nsRefPtr
<
SourceBufferDecoder
>
>
mShutdownDecoders
;
nsTArray
<
nsRefPtr
<
SourceBufferDecoder
>
>
mInitializedDecoders
;
nsRefPtr
<
SourceBufferDecoder
>
mCurrentDecoder
;
nsRefPtr
<
MediaSourceDecoder
>
mParentDecoder
;
const
nsCString
mType
;
int64_t
mLastStartTimestamp
;
Maybe
<
int64_t
>
mLastEndTimestamp
;
void
AdjustDecodersTimestampOffset
(
media
:
:
TimeUnit
aOffset
)
;
media
:
:
TimeUnit
mLastTimestampOffset
;
media
:
:
TimeUnit
mTimestampOffset
;
media
:
:
TimeUnit
mAdjustedTimestamp
;
bool
mIsWaitingOnCDM
;
MediaInfo
mInfo
;
void
ContinueShutdown
(
)
;
MozPromiseHolder
<
ShutdownPromise
>
mShutdownPromise
;
bool
mDecoderPerSegment
;
bool
mShutdown
;
MozPromiseHolder
<
AppendPromise
>
mInitializationPromise
;
MozPromiseRequestHolder
<
MediaDecoderReader
:
:
MetadataPromise
>
mMetadataRequest
;
MozPromiseHolder
<
RangeRemovalPromise
>
mRangeRemovalPromise
;
media
:
:
Interval
<
int64_t
>
mLastAppendRange
;
media
:
:
TimeIntervals
mBufferedRanges
;
DecoderBufferedMap
mReadersBuffered
;
}
;
}
#
endif
