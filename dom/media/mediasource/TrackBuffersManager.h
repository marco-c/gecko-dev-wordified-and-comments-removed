#
ifndef
MOZILLA_TRACKBUFFERSMANAGER_H_
#
define
MOZILLA_TRACKBUFFERSMANAGER_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
dom
/
MediaDebugInfoBinding
.
h
"
#
include
"
MediaContainerType
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
MediaDataDemuxer
.
h
"
#
include
"
MediaResult
.
h
"
#
include
"
MediaSourceDecoder
.
h
"
#
include
"
MediaSpan
.
h
"
#
include
"
SourceBufferTask
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
ContainerParser
;
class
MediaByteBuffer
;
class
MediaRawData
;
class
MediaSourceDemuxer
;
class
SourceBufferResource
;
class
SourceBufferTaskQueue
{
public
:
SourceBufferTaskQueue
(
)
=
default
;
~
SourceBufferTaskQueue
(
)
{
MOZ_ASSERT
(
mQueue
.
IsEmpty
(
)
"
All
tasks
must
have
been
processed
"
)
;
}
void
Push
(
SourceBufferTask
*
aTask
)
{
mQueue
.
AppendElement
(
aTask
)
;
}
already_AddRefed
<
SourceBufferTask
>
Pop
(
)
{
if
(
!
mQueue
.
Length
(
)
)
{
return
nullptr
;
}
RefPtr
<
SourceBufferTask
>
task
=
std
:
:
move
(
mQueue
[
0
]
)
;
mQueue
.
RemoveElementAt
(
0
)
;
return
task
.
forget
(
)
;
}
nsTArray
<
RefPtr
<
SourceBufferTask
>
>
:
:
size_type
Length
(
)
const
{
return
mQueue
.
Length
(
)
;
}
private
:
nsTArray
<
RefPtr
<
SourceBufferTask
>
>
mQueue
;
}
;
DDLoggedTypeDeclName
(
TrackBuffersManager
)
;
class
TrackBuffersManager
final
:
public
DecoderDoctorLifeLogger
<
TrackBuffersManager
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TrackBuffersManager
)
;
enum
class
EvictDataResult
:
int8_t
{
NO_DATA_EVICTED
CANT_EVICT
BUFFER_FULL
}
;
typedef
TrackInfo
:
:
TrackType
TrackType
;
typedef
MediaData
:
:
Type
MediaType
;
typedef
nsTArray
<
RefPtr
<
MediaRawData
>
>
TrackBuffer
;
typedef
SourceBufferTask
:
:
AppendPromise
AppendPromise
;
typedef
SourceBufferTask
:
:
RangeRemovalPromise
RangeRemovalPromise
;
TrackBuffersManager
(
MediaSourceDecoder
*
aParentDecoder
const
MediaContainerType
&
aType
)
;
RefPtr
<
AppendPromise
>
AppendData
(
already_AddRefed
<
MediaByteBuffer
>
aData
const
SourceBufferAttributes
&
aAttributes
)
;
void
AbortAppendData
(
)
;
void
ResetParserState
(
SourceBufferAttributes
&
aAttributes
)
;
RefPtr
<
RangeRemovalPromise
>
RangeRemoval
(
media
:
:
TimeUnit
aStart
media
:
:
TimeUnit
aEnd
)
;
EvictDataResult
EvictData
(
const
media
:
:
TimeUnit
&
aPlaybackTime
int64_t
aSize
)
;
void
ChangeType
(
const
MediaContainerType
&
aType
)
;
media
:
:
TimeIntervals
Buffered
(
)
const
;
media
:
:
TimeUnit
HighestStartTime
(
)
const
;
media
:
:
TimeUnit
HighestEndTime
(
)
const
;
int64_t
GetSize
(
)
const
;
void
Ended
(
)
;
void
Detach
(
)
;
int64_t
EvictionThreshold
(
)
const
;
MediaInfo
GetMetadata
(
)
const
;
const
TrackBuffer
&
GetTrackBuffer
(
TrackInfo
:
:
TrackType
aTrack
)
const
;
const
media
:
:
TimeIntervals
&
Buffered
(
TrackInfo
:
:
TrackType
)
const
;
const
media
:
:
TimeUnit
&
HighestStartTime
(
TrackInfo
:
:
TrackType
)
const
;
media
:
:
TimeIntervals
SafeBuffered
(
TrackInfo
:
:
TrackType
)
const
;
bool
IsEnded
(
)
const
{
return
mEnded
;
}
uint32_t
Evictable
(
TrackInfo
:
:
TrackType
aTrack
)
const
;
media
:
:
TimeUnit
Seek
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aTime
const
media
:
:
TimeUnit
&
aFuzz
)
;
uint32_t
SkipToNextRandomAccessPoint
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aTimeThreadshold
const
media
:
:
TimeUnit
&
aFuzz
bool
&
aFound
)
;
already_AddRefed
<
MediaRawData
>
GetSample
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aFuzz
MediaResult
&
aResult
)
;
int32_t
FindCurrentPosition
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aFuzz
)
const
;
nsresult
SetNextGetSampleIndexIfNeeded
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aFuzz
)
;
media
:
:
TimeUnit
GetNextRandomAccessPoint
(
TrackInfo
:
:
TrackType
aTrack
const
media
:
:
TimeUnit
&
aFuzz
)
;
void
AddSizeOfResources
(
MediaSourceDecoder
:
:
ResourceSizes
*
aSizes
)
const
;
void
GetDebugInfo
(
dom
:
:
TrackBuffersManagerDebugInfo
&
aInfo
)
;
private
:
typedef
MozPromise
<
bool
MediaResult
true
>
CodedFrameProcessingPromise
;
~
TrackBuffersManager
(
)
;
RefPtr
<
AppendPromise
>
DoAppendData
(
already_AddRefed
<
MediaByteBuffer
>
aData
const
SourceBufferAttributes
&
aAttributes
)
;
void
ScheduleSegmentParserLoop
(
)
;
void
SegmentParserLoop
(
)
;
void
InitializationSegmentReceived
(
)
;
void
ShutdownDemuxers
(
)
;
void
CreateDemuxerforMIMEType
(
)
;
void
ResetDemuxingState
(
)
;
void
NeedMoreData
(
)
;
void
RejectAppend
(
const
MediaResult
&
aRejectValue
const
char
*
aName
)
;
RefPtr
<
CodedFrameProcessingPromise
>
CodedFrameProcessing
(
)
;
void
CompleteCodedFrameProcessing
(
)
;
void
CompleteResetParserState
(
)
;
RefPtr
<
RangeRemovalPromise
>
CodedFrameRemovalWithPromise
(
media
:
:
TimeInterval
aInterval
)
;
bool
CodedFrameRemoval
(
media
:
:
TimeInterval
aInterval
)
;
void
RemoveAllCodedFrames
(
)
;
void
SetAppendState
(
SourceBufferAttributes
:
:
AppendState
aAppendState
)
;
bool
HasVideo
(
)
const
{
return
mVideoTracks
.
mNumTracks
>
0
;
}
bool
HasAudio
(
)
const
{
return
mAudioTracks
.
mNumTracks
>
0
;
}
Maybe
<
MediaSpan
>
mInputBuffer
;
Atomic
<
bool
>
mBufferFull
;
bool
mFirstInitializationSegmentReceived
;
bool
mChangeTypeReceived
;
bool
mNewMediaSegmentStarted
;
bool
mActiveTrack
;
MediaContainerType
mType
;
void
RecreateParser
(
bool
aReuseInitData
)
;
UniquePtr
<
ContainerParser
>
mParser
;
void
AppendDataToCurrentInputBuffer
(
const
MediaSpan
&
aData
)
;
RefPtr
<
MediaByteBuffer
>
mInitData
;
Maybe
<
MediaSpan
>
mPendingInputBuffer
;
RefPtr
<
SourceBufferResource
>
mCurrentInputBuffer
;
RefPtr
<
MediaDataDemuxer
>
mInputDemuxer
;
uint64_t
mProcessedInput
;
Maybe
<
media
:
:
TimeUnit
>
mLastParsedEndTime
;
void
OnDemuxerInitDone
(
const
MediaResult
&
aResult
)
;
void
OnDemuxerInitFailed
(
const
MediaResult
&
aFailure
)
;
void
OnDemuxerResetDone
(
const
MediaResult
&
aResult
)
;
MozPromiseRequestHolder
<
MediaDataDemuxer
:
:
InitPromise
>
mDemuxerInitRequest
;
void
OnDemuxFailed
(
TrackType
aTrack
const
MediaResult
&
aError
)
;
void
DoDemuxVideo
(
)
;
void
OnVideoDemuxCompleted
(
RefPtr
<
MediaTrackDemuxer
:
:
SamplesHolder
>
aSamples
)
;
void
OnVideoDemuxFailed
(
const
MediaResult
&
aError
)
{
mVideoTracks
.
mDemuxRequest
.
Complete
(
)
;
OnDemuxFailed
(
TrackType
:
:
kVideoTrack
aError
)
;
}
void
DoDemuxAudio
(
)
;
void
OnAudioDemuxCompleted
(
RefPtr
<
MediaTrackDemuxer
:
:
SamplesHolder
>
aSamples
)
;
void
OnAudioDemuxFailed
(
const
MediaResult
&
aError
)
{
mAudioTracks
.
mDemuxRequest
.
Complete
(
)
;
OnDemuxFailed
(
TrackType
:
:
kAudioTrack
aError
)
;
}
void
MaybeDispatchEncryptedEvent
(
const
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
aSamples
)
;
void
DoEvictData
(
const
media
:
:
TimeUnit
&
aPlaybackTime
int64_t
aSizeToEvict
)
;
struct
TrackData
{
TrackData
(
)
:
mNumTracks
(
0
)
mNeedRandomAccessPoint
(
true
)
mSizeBuffer
(
0
)
{
}
Atomic
<
uint32_t
>
mNumTracks
;
Maybe
<
media
:
:
TimeUnit
>
mLastDecodeTimestamp
;
Maybe
<
media
:
:
TimeUnit
>
mLastFrameDuration
;
Maybe
<
media
:
:
TimeUnit
>
mHighestEndTimestamp
;
media
:
:
TimeUnit
mHighestStartTimestamp
;
media
:
:
TimeUnit
mLongestFrameDuration
;
bool
mNeedRandomAccessPoint
;
RefPtr
<
MediaTrackDemuxer
>
mDemuxer
;
MozPromiseRequestHolder
<
MediaTrackDemuxer
:
:
SamplesPromise
>
mDemuxRequest
;
media
:
:
TimeUnit
mLastParsedEndTime
;
Maybe
<
uint32_t
>
mNextInsertionIndex
;
TrackBuffer
mQueuedSamples
;
const
TrackBuffer
&
GetTrackBuffer
(
)
const
{
MOZ_RELEASE_ASSERT
(
mBuffers
.
Length
(
)
"
TrackBuffer
must
have
been
created
"
)
;
return
mBuffers
.
LastElement
(
)
;
}
TrackBuffer
&
GetTrackBuffer
(
)
{
MOZ_RELEASE_ASSERT
(
mBuffers
.
Length
(
)
"
TrackBuffer
must
have
been
created
"
)
;
return
mBuffers
.
LastElement
(
)
;
}
nsTArray
<
TrackBuffer
>
mBuffers
;
media
:
:
TimeIntervals
mBufferedRanges
;
media
:
:
TimeIntervals
mSanitizedBufferedRanges
;
uint32_t
mSizeBuffer
;
RefPtr
<
TrackInfoSharedPtr
>
mInfo
;
RefPtr
<
TrackInfoSharedPtr
>
mLastInfo
;
Maybe
<
uint32_t
>
mNextGetSampleIndex
;
media
:
:
TimeUnit
mNextSampleTimecode
;
media
:
:
TimeUnit
mNextSampleTime
;
struct
EvictionIndex
{
EvictionIndex
(
)
{
Reset
(
)
;
}
void
Reset
(
)
{
mEvictable
=
0
;
mLastIndex
=
0
;
}
uint32_t
mEvictable
;
uint32_t
mLastIndex
;
}
;
EvictionIndex
mEvictionIndex
;
void
ResetAppendState
(
)
{
mLastDecodeTimestamp
.
reset
(
)
;
mLastFrameDuration
.
reset
(
)
;
mHighestEndTimestamp
.
reset
(
)
;
mNeedRandomAccessPoint
=
true
;
mNextInsertionIndex
.
reset
(
)
;
}
void
Reset
(
)
{
ResetAppendState
(
)
;
mEvictionIndex
.
Reset
(
)
;
for
(
auto
&
buffer
:
mBuffers
)
{
buffer
.
Clear
(
)
;
}
mSizeBuffer
=
0
;
mNextGetSampleIndex
.
reset
(
)
;
mBufferedRanges
.
Clear
(
)
;
mSanitizedBufferedRanges
.
Clear
(
)
;
}
void
AddSizeOfResources
(
MediaSourceDecoder
:
:
ResourceSizes
*
aSizes
)
const
;
}
;
void
CheckSequenceDiscontinuity
(
const
media
:
:
TimeUnit
&
aPresentationTime
)
;
void
ProcessFrames
(
TrackBuffer
&
aSamples
TrackData
&
aTrackData
)
;
media
:
:
TimeInterval
PresentationInterval
(
const
TrackBuffer
&
aSamples
)
const
;
bool
CheckNextInsertionIndex
(
TrackData
&
aTrackData
const
media
:
:
TimeUnit
&
aSampleTime
)
;
void
InsertFrames
(
TrackBuffer
&
aSamples
const
media
:
:
TimeIntervals
&
aIntervals
TrackData
&
aTrackData
)
;
void
UpdateHighestTimestamp
(
TrackData
&
aTrackData
const
media
:
:
TimeUnit
&
aHighestTime
)
;
enum
class
RemovalMode
{
kRemoveFrame
kTruncateFrame
}
;
uint32_t
RemoveFrames
(
const
media
:
:
TimeIntervals
&
aIntervals
TrackData
&
aTrackData
uint32_t
aStartIndex
RemovalMode
aMode
)
;
void
ResetEvictionIndex
(
TrackData
&
aTrackData
)
;
void
UpdateEvictionIndex
(
TrackData
&
aTrackData
uint32_t
aCurrentIndex
)
;
uint32_t
FindSampleIndex
(
const
TrackBuffer
&
aTrackBuffer
const
media
:
:
TimeInterval
&
aInterval
)
;
const
MediaRawData
*
GetSample
(
TrackInfo
:
:
TrackType
aTrack
uint32_t
aIndex
const
media
:
:
TimeUnit
&
aExpectedDts
const
media
:
:
TimeUnit
&
aExpectedPts
const
media
:
:
TimeUnit
&
aFuzz
)
;
void
UpdateBufferedRanges
(
)
;
void
RejectProcessing
(
const
MediaResult
&
aRejectValue
const
char
*
aName
)
;
void
ResolveProcessing
(
bool
aResolveValue
const
char
*
aName
)
;
MozPromiseRequestHolder
<
CodedFrameProcessingPromise
>
mProcessingRequest
;
MozPromiseHolder
<
CodedFrameProcessingPromise
>
mProcessingPromise
;
nsTArray
<
const
TrackData
*
>
GetTracksList
(
)
const
;
nsTArray
<
TrackData
*
>
GetTracksList
(
)
;
TrackData
&
GetTracksData
(
TrackType
aTrack
)
{
switch
(
aTrack
)
{
case
TrackType
:
:
kVideoTrack
:
return
mVideoTracks
;
case
TrackType
:
:
kAudioTrack
:
default
:
return
mAudioTracks
;
}
}
const
TrackData
&
GetTracksData
(
TrackType
aTrack
)
const
{
switch
(
aTrack
)
{
case
TrackType
:
:
kVideoTrack
:
return
mVideoTracks
;
case
TrackType
:
:
kAudioTrack
:
default
:
return
mAudioTracks
;
}
}
TrackData
mVideoTracks
;
TrackData
mAudioTracks
;
RefPtr
<
TaskQueue
>
GetTaskQueueSafe
(
)
const
{
MutexAutoLock
mut
(
mMutex
)
;
return
mTaskQueue
;
}
NotNull
<
AbstractThread
*
>
TaskQueueFromTaskQueue
(
)
const
{
#
ifdef
DEBUG
RefPtr
<
TaskQueue
>
taskQueue
=
GetTaskQueueSafe
(
)
;
MOZ_ASSERT
(
taskQueue
&
&
taskQueue
-
>
IsCurrentThreadIn
(
)
)
;
#
endif
return
WrapNotNull
(
mTaskQueue
.
get
(
)
)
;
}
bool
OnTaskQueue
(
)
const
{
auto
taskQueue
=
TaskQueueFromTaskQueue
(
)
;
return
taskQueue
-
>
IsCurrentThreadIn
(
)
;
}
void
ResetTaskQueue
(
)
{
MutexAutoLock
mut
(
mMutex
)
;
mTaskQueue
=
nullptr
;
}
SourceBufferTaskQueue
mQueue
;
void
QueueTask
(
SourceBufferTask
*
aTask
)
;
void
ProcessTasks
(
)
;
RefPtr
<
SourceBufferTask
>
mCurrentTask
;
UniquePtr
<
SourceBufferAttributes
>
mSourceBufferAttributes
;
media
:
:
TimeInterval
mAppendWindow
;
nsMainThreadPtrHandle
<
MediaSourceDecoder
>
mParentDecoder
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
media
:
:
TimeUnit
HighestEndTime
(
nsTArray
<
const
media
:
:
TimeIntervals
*
>
&
aTracks
)
const
;
Atomic
<
bool
>
mEnded
;
Atomic
<
int64_t
>
mSizeSourceBuffer
;
const
int64_t
mVideoEvictionThreshold
;
const
int64_t
mAudioEvictionThreshold
;
enum
class
EvictionState
{
NO_EVICTION_NEEDED
EVICTION_NEEDED
EVICTION_COMPLETED
}
;
Atomic
<
EvictionState
>
mEvictionState
;
mutable
Mutex
mMutex
;
RefPtr
<
TaskQueue
>
mTaskQueue
;
media
:
:
TimeIntervals
mVideoBufferedRanges
;
media
:
:
TimeIntervals
mAudioBufferedRanges
;
MediaInfo
mInfo
;
}
;
}
#
endif
