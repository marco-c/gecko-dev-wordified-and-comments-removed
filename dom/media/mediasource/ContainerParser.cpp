#
include
"
ContainerParser
.
h
"
#
include
"
WebMBufferedParser
.
h
"
#
include
"
mozilla
/
EndianUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mp4_demuxer
/
MoofParser
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
MediaData
.
h
"
#
ifdef
MOZ_FMP4
#
include
"
MP4Stream
.
h
"
#
include
"
mp4_demuxer
/
AtomType
.
h
"
#
include
"
mp4_demuxer
/
ByteReader
.
h
"
#
endif
#
include
"
nsAutoPtr
.
h
"
#
include
"
SourceBufferResource
.
h
"
extern
mozilla
:
:
LogModule
*
GetMediaSourceSamplesLog
(
)
;
#
define
STRINGIFY
(
x
)
#
x
#
define
TOSTRING
(
x
)
STRINGIFY
(
x
)
#
define
MSE_DEBUG
(
name
arg
.
.
.
)
MOZ_LOG
(
GetMediaSourceSamplesLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
TOSTRING
(
name
)
"
(
%
p
:
%
s
)
:
:
%
s
:
"
arg
this
mType
.
get
(
)
__func__
#
#
__VA_ARGS__
)
)
#
define
MSE_DEBUGV
(
name
arg
.
.
.
)
MOZ_LOG
(
GetMediaSourceSamplesLog
(
)
mozilla
:
:
LogLevel
:
:
Verbose
(
TOSTRING
(
name
)
"
(
%
p
:
%
s
)
:
:
%
s
:
"
arg
this
mType
.
get
(
)
__func__
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
ContainerParser
:
:
ContainerParser
(
const
nsACString
&
aType
)
:
mHasInitData
(
false
)
mType
(
aType
)
{
}
ContainerParser
:
:
~
ContainerParser
(
)
=
default
;
MediaResult
ContainerParser
:
:
IsInitSegmentPresent
(
MediaByteBuffer
*
aData
)
{
MSE_DEBUG
(
ContainerParser
"
aLength
=
%
u
[
%
x
%
x
%
x
%
x
]
"
aData
-
>
Length
(
)
aData
-
>
Length
(
)
>
0
?
(
*
aData
)
[
0
]
:
0
aData
-
>
Length
(
)
>
1
?
(
*
aData
)
[
1
]
:
0
aData
-
>
Length
(
)
>
2
?
(
*
aData
)
[
2
]
:
0
aData
-
>
Length
(
)
>
3
?
(
*
aData
)
[
3
]
:
0
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
MediaResult
ContainerParser
:
:
IsMediaSegmentPresent
(
MediaByteBuffer
*
aData
)
{
MSE_DEBUG
(
ContainerParser
"
aLength
=
%
u
[
%
x
%
x
%
x
%
x
]
"
aData
-
>
Length
(
)
aData
-
>
Length
(
)
>
0
?
(
*
aData
)
[
0
]
:
0
aData
-
>
Length
(
)
>
1
?
(
*
aData
)
[
1
]
:
0
aData
-
>
Length
(
)
>
2
?
(
*
aData
)
[
2
]
:
0
aData
-
>
Length
(
)
>
3
?
(
*
aData
)
[
3
]
:
0
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
MediaResult
ContainerParser
:
:
ParseStartAndEndTimestamps
(
MediaByteBuffer
*
aData
int64_t
&
aStart
int64_t
&
aEnd
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
bool
ContainerParser
:
:
TimestampsFuzzyEqual
(
int64_t
aLhs
int64_t
aRhs
)
{
return
llabs
(
aLhs
-
aRhs
)
<
=
GetRoundingError
(
)
;
}
int64_t
ContainerParser
:
:
GetRoundingError
(
)
{
NS_WARNING
(
"
Using
default
ContainerParser
:
:
GetRoundingError
implementation
"
)
;
return
0
;
}
bool
ContainerParser
:
:
HasCompleteInitData
(
)
{
return
mHasInitData
&
&
!
!
mInitData
-
>
Length
(
)
;
}
MediaByteBuffer
*
ContainerParser
:
:
InitData
(
)
{
return
mInitData
;
}
MediaByteRange
ContainerParser
:
:
InitSegmentRange
(
)
{
return
mCompleteInitSegmentRange
;
}
MediaByteRange
ContainerParser
:
:
MediaHeaderRange
(
)
{
return
mCompleteMediaHeaderRange
;
}
MediaByteRange
ContainerParser
:
:
MediaSegmentRange
(
)
{
return
mCompleteMediaSegmentRange
;
}
class
WebMContainerParser
:
public
ContainerParser
{
public
:
explicit
WebMContainerParser
(
const
nsACString
&
aType
)
:
ContainerParser
(
aType
)
mParser
(
0
)
mOffset
(
0
)
{
}
static
const
unsigned
NS_PER_USEC
=
1000
;
static
const
unsigned
USEC_PER_SEC
=
1000000
;
MediaResult
IsInitSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
ContainerParser
:
:
IsInitSegmentPresent
(
aData
)
;
if
(
aData
-
>
Length
(
)
<
4
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
(
*
aData
)
[
0
]
=
=
0x1a
&
&
(
*
aData
)
[
1
]
=
=
0x45
&
&
(
*
aData
)
[
2
]
=
=
0xdf
&
&
(
*
aData
)
[
3
]
=
=
0xa3
)
{
return
NS_OK
;
}
return
MediaResult
(
NS_ERROR_FAILURE
RESULT_DETAIL
(
"
Invalid
webm
content
"
)
)
;
}
MediaResult
IsMediaSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
ContainerParser
:
:
IsMediaSegmentPresent
(
aData
)
;
if
(
aData
-
>
Length
(
)
<
4
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
(
*
aData
)
[
0
]
=
=
0x1f
&
&
(
*
aData
)
[
1
]
=
=
0x43
&
&
(
*
aData
)
[
2
]
=
=
0xb6
&
&
(
*
aData
)
[
3
]
=
=
0x75
)
{
return
NS_OK
;
}
if
(
(
*
aData
)
[
0
]
=
=
0x1c
&
&
(
*
aData
)
[
1
]
=
=
0x53
&
&
(
*
aData
)
[
2
]
=
=
0xbb
&
&
(
*
aData
)
[
3
]
=
=
0x6b
)
{
return
NS_OK
;
}
return
MediaResult
(
NS_ERROR_FAILURE
RESULT_DETAIL
(
"
Invalid
webm
content
"
)
)
;
}
MediaResult
ParseStartAndEndTimestamps
(
MediaByteBuffer
*
aData
int64_t
&
aStart
int64_t
&
aEnd
)
override
{
bool
initSegment
=
NS_SUCCEEDED
(
IsInitSegmentPresent
(
aData
)
)
;
if
(
mLastMapping
&
&
(
initSegment
|
|
NS_SUCCEEDED
(
IsMediaSegmentPresent
(
aData
)
)
)
)
{
mCompleteMediaSegmentRange
=
MediaByteRange
(
mLastMapping
.
ref
(
)
.
mSyncOffset
mOffset
)
;
mLastMapping
.
reset
(
)
;
MSE_DEBUG
(
WebMContainerParser
"
New
cluster
found
at
start
ending
previous
one
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
initSegment
)
{
mOffset
=
0
;
mParser
=
WebMBufferedParser
(
0
)
;
mOverlappedMapping
.
Clear
(
)
;
mInitData
=
new
MediaByteBuffer
(
)
;
mResource
=
new
SourceBufferResource
(
NS_LITERAL_CSTRING
(
"
video
/
webm
"
)
)
;
mCompleteMediaHeaderRange
=
MediaByteRange
(
)
;
mCompleteMediaSegmentRange
=
MediaByteRange
(
)
;
}
nsTArray
<
WebMTimeDataOffset
>
mapping
;
mapping
.
AppendElements
(
mOverlappedMapping
)
;
mOverlappedMapping
.
Clear
(
)
;
ReentrantMonitor
dummy
(
"
dummy
"
)
;
mParser
.
Append
(
aData
-
>
Elements
(
)
aData
-
>
Length
(
)
mapping
dummy
)
;
if
(
mResource
)
{
mResource
-
>
AppendData
(
aData
)
;
}
if
(
initSegment
|
|
!
HasCompleteInitData
(
)
)
{
if
(
mParser
.
mInitEndOffset
>
0
)
{
MOZ_ASSERT
(
mParser
.
mInitEndOffset
<
=
mResource
-
>
GetLength
(
)
)
;
if
(
!
mInitData
-
>
SetLength
(
mParser
.
mInitEndOffset
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
mCompleteInitSegmentRange
=
MediaByteRange
(
0
mParser
.
mInitEndOffset
)
;
char
*
buffer
=
reinterpret_cast
<
char
*
>
(
mInitData
-
>
Elements
(
)
)
;
mResource
-
>
ReadFromCache
(
buffer
0
mParser
.
mInitEndOffset
)
;
MSE_DEBUG
(
WebMContainerParser
"
Stashed
init
of
%
u
bytes
.
"
mParser
.
mInitEndOffset
)
;
mResource
=
nullptr
;
}
else
{
MSE_DEBUG
(
WebMContainerParser
"
Incomplete
init
found
.
"
)
;
}
mHasInitData
=
true
;
}
mOffset
+
=
aData
-
>
Length
(
)
;
if
(
mapping
.
IsEmpty
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint32_t
endIdx
=
mapping
.
Length
(
)
-
1
;
bool
foundNewCluster
=
false
;
while
(
mapping
[
0
]
.
mSyncOffset
!
=
mapping
[
endIdx
]
.
mSyncOffset
)
{
endIdx
-
=
1
;
foundNewCluster
=
true
;
}
int32_t
completeIdx
=
endIdx
;
while
(
completeIdx
>
=
0
&
&
mOffset
<
mapping
[
completeIdx
]
.
mEndOffset
)
{
MSE_DEBUG
(
WebMContainerParser
"
block
is
incomplete
missing
:
%
lld
"
mapping
[
completeIdx
]
.
mEndOffset
-
mOffset
)
;
completeIdx
-
=
1
;
}
mOverlappedMapping
.
AppendElements
(
mapping
.
Elements
(
)
+
completeIdx
+
1
mapping
.
Length
(
)
-
completeIdx
-
1
)
;
if
(
completeIdx
<
0
)
{
mLastMapping
.
reset
(
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
mCompleteMediaHeaderRange
.
IsEmpty
(
)
)
{
mCompleteMediaHeaderRange
=
MediaByteRange
(
mapping
[
0
]
.
mSyncOffset
mapping
[
0
]
.
mEndOffset
)
;
}
if
(
foundNewCluster
&
&
mOffset
>
=
mapping
[
endIdx
]
.
mEndOffset
)
{
int64_t
endOffset
=
mapping
[
endIdx
+
1
]
.
mSyncOffset
;
if
(
mapping
[
endIdx
+
1
]
.
mInitOffset
>
mapping
[
endIdx
]
.
mInitOffset
)
{
endOffset
=
mapping
[
endIdx
+
1
]
.
mInitOffset
;
}
mCompleteMediaSegmentRange
=
MediaByteRange
(
mapping
[
endIdx
]
.
mSyncOffset
endOffset
)
;
}
else
if
(
mapping
[
endIdx
]
.
mClusterEndOffset
>
=
0
&
&
mOffset
>
=
mapping
[
endIdx
]
.
mClusterEndOffset
)
{
mCompleteMediaSegmentRange
=
MediaByteRange
(
mapping
[
endIdx
]
.
mSyncOffset
mParser
.
EndSegmentOffset
(
mapping
[
endIdx
]
.
mClusterEndOffset
)
)
;
}
Maybe
<
WebMTimeDataOffset
>
previousMapping
;
if
(
completeIdx
)
{
previousMapping
=
Some
(
mapping
[
completeIdx
-
1
]
)
;
}
else
{
previousMapping
=
mLastMapping
;
}
mLastMapping
=
Some
(
mapping
[
completeIdx
]
)
;
if
(
!
previousMapping
&
&
completeIdx
+
1u
>
=
mapping
.
Length
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint64_t
frameDuration
=
(
completeIdx
+
1u
<
mapping
.
Length
(
)
)
?
mapping
[
completeIdx
+
1
]
.
mTimecode
-
mapping
[
completeIdx
]
.
mTimecode
:
mapping
[
completeIdx
]
.
mTimecode
-
previousMapping
.
ref
(
)
.
mTimecode
;
aStart
=
mapping
[
0
]
.
mTimecode
/
NS_PER_USEC
;
aEnd
=
(
mapping
[
completeIdx
]
.
mTimecode
+
frameDuration
)
/
NS_PER_USEC
;
MSE_DEBUG
(
WebMContainerParser
"
[
%
lld
%
lld
]
[
fso
=
%
lld
leo
=
%
lld
l
=
%
u
processedIdx
=
%
u
fs
=
%
lld
]
"
aStart
aEnd
mapping
[
0
]
.
mSyncOffset
mapping
[
completeIdx
]
.
mEndOffset
mapping
.
Length
(
)
completeIdx
mCompleteMediaSegmentRange
.
mEnd
)
;
return
NS_OK
;
}
int64_t
GetRoundingError
(
)
override
{
int64_t
error
=
mParser
.
GetTimecodeScale
(
)
/
NS_PER_USEC
;
return
error
*
2
;
}
private
:
WebMBufferedParser
mParser
;
nsTArray
<
WebMTimeDataOffset
>
mOverlappedMapping
;
int64_t
mOffset
;
Maybe
<
WebMTimeDataOffset
>
mLastMapping
;
}
;
#
ifdef
MOZ_FMP4
class
MP4ContainerParser
:
public
ContainerParser
{
public
:
explicit
MP4ContainerParser
(
const
nsACString
&
aType
)
:
ContainerParser
(
aType
)
{
}
MediaResult
IsInitSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
ContainerParser
:
:
IsInitSegmentPresent
(
aData
)
;
AtomParser
parser
(
mType
aData
)
;
if
(
!
parser
.
IsValid
(
)
)
{
return
MediaResult
(
NS_ERROR_FAILURE
RESULT_DETAIL
(
"
Invalid
Box
:
%
s
"
parser
.
LastInvalidBox
(
)
)
)
;
}
return
parser
.
StartWithInitSegment
(
)
?
NS_OK
:
NS_ERROR_NOT_AVAILABLE
;
}
MediaResult
IsMediaSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
AtomParser
parser
(
mType
aData
)
;
if
(
!
parser
.
IsValid
(
)
)
{
return
MediaResult
(
NS_ERROR_FAILURE
RESULT_DETAIL
(
"
Invalid
Box
:
%
s
"
parser
.
LastInvalidBox
(
)
)
)
;
}
return
parser
.
StartWithMediaSegment
(
)
?
NS_OK
:
NS_ERROR_NOT_AVAILABLE
;
}
private
:
class
AtomParser
{
public
:
AtomParser
(
const
nsACString
&
aType
const
MediaByteBuffer
*
aData
)
{
const
nsCString
mType
(
aType
)
;
mp4_demuxer
:
:
ByteReader
reader
(
aData
)
;
mp4_demuxer
:
:
AtomType
initAtom
(
"
ftyp
"
)
;
mp4_demuxer
:
:
AtomType
mediaAtom
(
"
moof
"
)
;
static
const
mp4_demuxer
:
:
AtomType
validBoxes
[
]
=
{
"
ftyp
"
"
moov
"
"
pdin
"
"
free
"
"
sidx
"
"
styp
"
"
moof
"
"
mdat
"
"
mfra
"
"
skip
"
"
meta
"
"
meco
"
"
ssix
"
"
prft
"
"
pssh
"
}
;
while
(
reader
.
Remaining
(
)
>
=
8
)
{
uint64_t
size
=
reader
.
ReadU32
(
)
;
const
uint8_t
*
typec
=
reader
.
Peek
(
4
)
;
mp4_demuxer
:
:
AtomType
type
(
reader
.
ReadU32
(
)
)
;
MSE_DEBUGV
(
AtomParser
"
Checking
atom
:
'
%
c
%
c
%
c
%
c
'
%
u
"
typec
[
0
]
typec
[
1
]
typec
[
2
]
typec
[
3
]
(
uint32_t
)
reader
.
Offset
(
)
-
8
)
;
for
(
const
auto
&
boxType
:
validBoxes
)
{
if
(
type
=
=
boxType
)
{
mValid
=
true
;
break
;
}
}
if
(
!
mValid
)
{
mLastInvalidBox
[
0
]
=
typec
[
3
]
;
mLastInvalidBox
[
1
]
=
typec
[
2
]
;
mLastInvalidBox
[
2
]
=
typec
[
1
]
;
mLastInvalidBox
[
3
]
=
typec
[
0
]
;
mLastInvalidBox
[
4
]
=
'
\
0
'
;
break
;
}
if
(
mInitOffset
.
isNothing
(
)
&
&
mp4_demuxer
:
:
AtomType
(
type
)
=
=
initAtom
)
{
mInitOffset
=
Some
(
reader
.
Offset
(
)
)
;
}
if
(
mMediaOffset
.
isNothing
(
)
&
&
mp4_demuxer
:
:
AtomType
(
type
)
=
=
mediaAtom
)
{
mMediaOffset
=
Some
(
reader
.
Offset
(
)
)
;
}
if
(
mInitOffset
.
isSome
(
)
&
&
mMediaOffset
.
isSome
(
)
)
{
break
;
}
if
(
size
=
=
1
)
{
if
(
!
reader
.
CanReadType
<
uint64_t
>
(
)
)
{
break
;
}
size
=
reader
.
ReadU64
(
)
;
}
else
if
(
size
=
=
0
)
{
break
;
}
if
(
reader
.
Remaining
(
)
<
size
-
8
)
{
break
;
}
reader
.
Read
(
size
-
8
)
;
}
}
bool
StartWithInitSegment
(
)
const
{
return
mInitOffset
.
isSome
(
)
&
&
(
mMediaOffset
.
isNothing
(
)
|
|
mInitOffset
.
ref
(
)
<
mMediaOffset
.
ref
(
)
)
;
}
bool
StartWithMediaSegment
(
)
const
{
return
mMediaOffset
.
isSome
(
)
&
&
(
mInitOffset
.
isNothing
(
)
|
|
mMediaOffset
.
ref
(
)
<
mInitOffset
.
ref
(
)
)
;
}
bool
IsValid
(
)
const
{
return
mValid
;
}
const
char
*
LastInvalidBox
(
)
const
{
return
mLastInvalidBox
;
}
private
:
Maybe
<
size_t
>
mInitOffset
;
Maybe
<
size_t
>
mMediaOffset
;
bool
mValid
=
false
;
char
mLastInvalidBox
[
5
]
;
}
;
public
:
MediaResult
ParseStartAndEndTimestamps
(
MediaByteBuffer
*
aData
int64_t
&
aStart
int64_t
&
aEnd
)
override
{
bool
initSegment
=
NS_SUCCEEDED
(
IsInitSegmentPresent
(
aData
)
)
;
if
(
initSegment
)
{
mResource
=
new
SourceBufferResource
(
NS_LITERAL_CSTRING
(
"
video
/
mp4
"
)
)
;
mStream
=
new
MP4Stream
(
mResource
)
;
mParser
=
new
mp4_demuxer
:
:
MoofParser
(
mStream
0
false
)
;
mInitData
=
new
MediaByteBuffer
(
)
;
}
else
if
(
!
mStream
|
|
!
mParser
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
mResource
-
>
AppendData
(
aData
)
;
MediaByteRangeSet
byteRanges
;
byteRanges
+
=
MediaByteRange
(
int64_t
(
mParser
-
>
mOffset
)
mResource
-
>
GetLength
(
)
)
;
mParser
-
>
RebuildFragmentedIndex
(
byteRanges
)
;
if
(
initSegment
|
|
!
HasCompleteInitData
(
)
)
{
MediaByteRange
&
range
=
mParser
-
>
mInitRange
;
if
(
range
.
Length
(
)
)
{
mCompleteInitSegmentRange
=
range
;
if
(
!
mInitData
-
>
SetLength
(
range
.
Length
(
)
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
char
*
buffer
=
reinterpret_cast
<
char
*
>
(
mInitData
-
>
Elements
(
)
)
;
mResource
-
>
ReadFromCache
(
buffer
range
.
mStart
range
.
Length
(
)
)
;
MSE_DEBUG
(
MP4ContainerParser
"
Stashed
init
of
%
u
bytes
.
"
range
.
Length
(
)
)
;
}
else
{
MSE_DEBUG
(
MP4ContainerParser
"
Incomplete
init
found
.
"
)
;
}
mHasInitData
=
true
;
}
mp4_demuxer
:
:
Interval
<
mp4_demuxer
:
:
Microseconds
>
compositionRange
=
mParser
-
>
GetCompositionRange
(
byteRanges
)
;
mCompleteMediaHeaderRange
=
mParser
-
>
FirstCompleteMediaHeader
(
)
;
mCompleteMediaSegmentRange
=
mParser
-
>
FirstCompleteMediaSegment
(
)
;
ErrorResult
rv
;
if
(
HasCompleteInitData
(
)
)
{
mResource
-
>
EvictData
(
mParser
-
>
mOffset
mParser
-
>
mOffset
rv
)
;
}
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
compositionRange
.
IsNull
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
aStart
=
compositionRange
.
start
;
aEnd
=
compositionRange
.
end
;
MSE_DEBUG
(
MP4ContainerParser
"
[
%
lld
%
lld
]
"
aStart
aEnd
)
;
return
NS_OK
;
}
int64_t
GetRoundingError
(
)
override
{
return
35000
;
}
private
:
RefPtr
<
MP4Stream
>
mStream
;
nsAutoPtr
<
mp4_demuxer
:
:
MoofParser
>
mParser
;
}
;
#
endif
#
ifdef
MOZ_FMP4
class
ADTSContainerParser
:
public
ContainerParser
{
public
:
explicit
ADTSContainerParser
(
const
nsACString
&
aType
)
:
ContainerParser
(
aType
)
{
}
typedef
struct
{
size_t
header_length
;
size_t
frame_length
;
uint8_t
aac_frames
;
bool
have_crc
;
}
Header
;
bool
Parse
(
MediaByteBuffer
*
aData
Header
&
header
)
{
MOZ_ASSERT
(
aData
)
;
if
(
aData
-
>
Length
(
)
<
7
)
{
MSE_DEBUG
(
ADTSContainerParser
"
buffer
too
short
for
header
.
"
)
;
return
false
;
}
if
(
(
(
*
aData
)
[
0
]
!
=
0xff
)
|
|
(
(
(
*
aData
)
[
1
]
&
0xf6
)
!
=
0xf0
)
)
{
MSE_DEBUG
(
ADTSContainerParser
"
no
syncword
.
"
)
;
return
false
;
}
bool
have_crc
=
!
(
(
*
aData
)
[
1
]
&
0x01
)
;
if
(
have_crc
&
&
aData
-
>
Length
(
)
<
9
)
{
MSE_DEBUG
(
ADTSContainerParser
"
buffer
too
short
for
header
with
crc
.
"
)
;
return
false
;
}
uint8_t
frequency_index
=
(
(
*
aData
)
[
2
]
&
0x3c
)
>
>
2
;
MOZ_ASSERT
(
frequency_index
<
16
)
;
if
(
frequency_index
=
=
15
)
{
MSE_DEBUG
(
ADTSContainerParser
"
explicit
frequency
disallowed
.
"
)
;
return
false
;
}
size_t
header_length
=
have_crc
?
9
:
7
;
size_t
data_length
=
(
(
(
*
aData
)
[
3
]
&
0x03
)
<
<
11
)
|
(
(
(
*
aData
)
[
4
]
&
0xff
)
<
<
3
)
|
(
(
(
*
aData
)
[
5
]
&
0xe0
)
>
>
5
)
;
uint8_t
frames
=
(
(
*
aData
)
[
6
]
&
0x03
)
+
1
;
MOZ_ASSERT
(
frames
>
0
)
;
MOZ_ASSERT
(
frames
<
4
)
;
header
.
header_length
=
header_length
;
header
.
frame_length
=
header_length
+
data_length
;
header
.
aac_frames
=
frames
;
header
.
have_crc
=
have_crc
;
return
true
;
}
MediaResult
IsInitSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
ContainerParser
:
:
IsInitSegmentPresent
(
aData
)
;
Header
header
;
if
(
!
Parse
(
aData
header
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MSE_DEBUGV
(
ADTSContainerParser
"
%
llu
byte
frame
%
d
aac
frames
%
s
"
(
unsigned
long
long
)
header
.
frame_length
(
int
)
header
.
aac_frames
header
.
have_crc
?
"
crc
"
:
"
"
)
;
return
NS_OK
;
}
MediaResult
IsMediaSegmentPresent
(
MediaByteBuffer
*
aData
)
override
{
ContainerParser
:
:
IsMediaSegmentPresent
(
aData
)
;
Header
header
;
if
(
!
Parse
(
aData
header
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
aData
-
>
Length
(
)
<
=
header
.
header_length
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_OK
;
}
MediaResult
ParseStartAndEndTimestamps
(
MediaByteBuffer
*
aData
int64_t
&
aStart
int64_t
&
aEnd
)
override
{
Header
header
;
if
(
!
Parse
(
aData
header
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
mHasInitData
=
true
;
mCompleteInitSegmentRange
=
MediaByteRange
(
0
int64_t
(
header
.
header_length
)
)
;
mInitData
=
new
MediaByteBuffer
(
header
.
header_length
)
;
mInitData
-
>
AppendElements
(
aData
-
>
Elements
(
)
header
.
header_length
)
;
if
(
aData
-
>
Length
(
)
<
header
.
frame_length
)
{
MSE_DEBUGV
(
ADTSContainerParser
"
Not
enough
data
for
%
llu
byte
frame
"
"
in
%
llu
byte
buffer
.
"
(
unsigned
long
long
)
header
.
frame_length
(
unsigned
long
long
)
(
aData
-
>
Length
(
)
)
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
mCompleteMediaSegmentRange
=
MediaByteRange
(
header
.
header_length
header
.
frame_length
)
;
mCompleteMediaHeaderRange
=
mCompleteMediaSegmentRange
;
MSE_DEBUG
(
ADTSContainerParser
"
[
%
lld
%
lld
]
"
aStart
aEnd
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
int64_t
GetRoundingError
(
)
override
{
return
0
;
}
}
;
#
endif
ContainerParser
*
ContainerParser
:
:
CreateForMIMEType
(
const
nsACString
&
aType
)
{
if
(
aType
.
LowerCaseEqualsLiteral
(
"
video
/
webm
"
)
|
|
aType
.
LowerCaseEqualsLiteral
(
"
audio
/
webm
"
)
)
{
return
new
WebMContainerParser
(
aType
)
;
}
#
ifdef
MOZ_FMP4
if
(
aType
.
LowerCaseEqualsLiteral
(
"
video
/
mp4
"
)
|
|
aType
.
LowerCaseEqualsLiteral
(
"
audio
/
mp4
"
)
)
{
return
new
MP4ContainerParser
(
aType
)
;
}
if
(
aType
.
LowerCaseEqualsLiteral
(
"
audio
/
aac
"
)
)
{
return
new
ADTSContainerParser
(
aType
)
;
}
#
endif
return
new
ContainerParser
(
aType
)
;
}
#
undef
MSE_DEBUG
#
undef
MSE_DEBUGV
}
