#
ifndef
MOZILLA_CONTAINERPARSER_H_
#
define
MOZILLA_CONTAINERPARSER_H_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
MediaContainerType
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
MediaResult
.
h
"
namespace
mozilla
{
class
MediaByteBuffer
;
class
SourceBufferResource
;
DDLoggedTypeDeclName
(
ContainerParser
)
;
class
ContainerParser
:
public
DecoderDoctorLifeLogger
<
ContainerParser
>
{
public
:
explicit
ContainerParser
(
const
MediaContainerType
&
aType
)
;
virtual
~
ContainerParser
(
)
;
virtual
MediaResult
IsInitSegmentPresent
(
MediaByteBuffer
*
aData
)
;
virtual
MediaResult
IsMediaSegmentPresent
(
MediaByteBuffer
*
aData
)
;
virtual
MediaResult
ParseStartAndEndTimestamps
(
MediaByteBuffer
*
aData
int64_t
&
aStart
int64_t
&
aEnd
)
;
bool
TimestampsFuzzyEqual
(
int64_t
aLhs
int64_t
aRhs
)
;
virtual
int64_t
GetRoundingError
(
)
;
MediaByteBuffer
*
InitData
(
)
;
bool
HasInitData
(
)
{
return
mHasInitData
;
}
bool
HasCompleteInitData
(
)
;
MediaByteRange
InitSegmentRange
(
)
;
MediaByteRange
MediaHeaderRange
(
)
;
MediaByteRange
MediaSegmentRange
(
)
;
static
ContainerParser
*
CreateForMIMEType
(
const
MediaContainerType
&
aType
)
;
const
MediaContainerType
&
ContainerType
(
)
const
{
return
mType
;
}
protected
:
RefPtr
<
MediaByteBuffer
>
mInitData
;
RefPtr
<
SourceBufferResource
>
mResource
;
bool
mHasInitData
;
uint64_t
mTotalParsed
;
uint64_t
mGlobalOffset
;
MediaByteRange
mCompleteInitSegmentRange
;
MediaByteRange
mCompleteMediaHeaderRange
;
MediaByteRange
mCompleteMediaSegmentRange
;
const
MediaContainerType
mType
;
}
;
}
#
endif
