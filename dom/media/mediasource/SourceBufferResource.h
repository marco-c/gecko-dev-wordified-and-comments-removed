#
ifndef
MOZILLA_SOURCEBUFFERRESOURCE_H_
#
define
MOZILLA_SOURCEBUFFERRESOURCE_H_
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
ResourceQueue
.
h
"
#
define
UNIMPLEMENTED
(
)
\
{
/
*
Logging
this
is
too
spammy
to
do
by
default
*
/
\
}
namespace
mozilla
{
class
MediaByteBuffer
;
class
AbstractThread
;
namespace
dom
{
class
SourceBuffer
;
}
DDLoggedTypeDeclNameAndBase
(
SourceBufferResource
MediaResource
)
;
class
SourceBufferResource
final
:
public
MediaResource
public
DecoderDoctorLifeLogger
<
SourceBufferResource
>
{
public
:
SourceBufferResource
(
)
;
RefPtr
<
GenericPromise
>
Close
(
)
override
;
nsresult
ReadAt
(
int64_t
aOffset
char
*
aBuffer
uint32_t
aCount
uint32_t
*
aBytes
)
override
;
bool
ShouldCacheReads
(
)
override
{
return
false
;
}
void
Pin
(
)
override
{
UNIMPLEMENTED
(
)
;
}
void
Unpin
(
)
override
{
UNIMPLEMENTED
(
)
;
}
int64_t
GetLength
(
)
override
{
return
mInputBuffer
.
GetLength
(
)
;
}
int64_t
GetNextCachedData
(
int64_t
aOffset
)
override
{
MOZ_ASSERT
(
OnThread
(
)
)
;
MOZ_ASSERT
(
aOffset
>
=
0
)
;
if
(
uint64_t
(
aOffset
)
<
mInputBuffer
.
GetOffset
(
)
)
{
return
mInputBuffer
.
GetOffset
(
)
;
}
else
if
(
aOffset
=
=
GetLength
(
)
)
{
return
-
1
;
}
return
aOffset
;
}
int64_t
GetCachedDataEnd
(
int64_t
aOffset
)
override
{
MOZ_ASSERT
(
OnThread
(
)
)
;
MOZ_ASSERT
(
aOffset
>
=
0
)
;
if
(
uint64_t
(
aOffset
)
<
mInputBuffer
.
GetOffset
(
)
|
|
aOffset
>
=
GetLength
(
)
)
{
return
aOffset
;
}
return
GetLength
(
)
;
}
bool
IsDataCachedToEndOfResource
(
int64_t
aOffset
)
override
{
return
false
;
}
nsresult
ReadFromCache
(
char
*
aBuffer
int64_t
aOffset
uint32_t
aCount
)
override
;
nsresult
GetCachedRanges
(
MediaByteRangeSet
&
aRanges
)
override
{
MOZ_ASSERT
(
OnThread
(
)
)
;
if
(
mInputBuffer
.
GetLength
(
)
)
{
aRanges
+
=
MediaByteRange
(
mInputBuffer
.
GetOffset
(
)
mInputBuffer
.
GetLength
(
)
)
;
}
return
NS_OK
;
}
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
MOZ_ASSERT
(
OnThread
(
)
)
;
return
mInputBuffer
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
void
AppendData
(
MediaByteBuffer
*
aData
)
;
void
AppendData
(
const
MediaSpan
&
aData
)
;
void
Ended
(
)
;
bool
IsEnded
(
)
{
MOZ_ASSERT
(
OnThread
(
)
)
;
return
mEnded
;
}
uint32_t
EvictData
(
uint64_t
aPlaybackOffset
int64_t
aThresholdReduct
)
;
void
EvictBefore
(
uint64_t
aOffset
)
;
uint32_t
EvictAll
(
)
;
int64_t
GetSize
(
)
{
MOZ_ASSERT
(
OnThread
(
)
)
;
return
mInputBuffer
.
GetLength
(
)
-
mInputBuffer
.
GetOffset
(
)
;
}
const
uint8_t
*
GetContiguousAccess
(
int64_t
aOffset
size_t
aSize
)
{
return
mInputBuffer
.
GetContiguousAccess
(
aOffset
aSize
)
;
}
#
if
defined
(
DEBUG
)
void
Dump
(
const
char
*
aPath
)
{
mInputBuffer
.
Dump
(
aPath
)
;
}
#
endif
private
:
virtual
~
SourceBufferResource
(
)
;
nsresult
ReadAtInternal
(
int64_t
aOffset
char
*
aBuffer
uint32_t
aCount
uint32_t
*
aBytes
)
;
#
if
defined
(
DEBUG
)
const
RefPtr
<
AbstractThread
>
mThread
;
const
AbstractThread
*
GetThread
(
)
const
;
bool
OnThread
(
)
const
;
#
endif
ResourceQueue
mInputBuffer
;
bool
mClosed
=
false
;
bool
mEnded
=
false
;
}
;
}
#
undef
UNIMPLEMENTED
#
endif
