#
if
!
defined
(
MediaSourceDemuxer_h_
)
#
define
MediaSourceDemuxer_h_
#
include
"
MediaDataDemuxer
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
MediaSource
.
h
"
#
include
"
TrackBuffersManager
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
MediaResult
;
class
MediaSourceTrackDemuxer
;
DDLoggedTypeDeclNameAndBase
(
MediaSourceDemuxer
MediaDataDemuxer
)
;
DDLoggedTypeNameAndBase
(
MediaSourceTrackDemuxer
MediaTrackDemuxer
)
;
class
MediaSourceDemuxer
:
public
MediaDataDemuxer
public
DecoderDoctorLifeLogger
<
MediaSourceDemuxer
>
{
public
:
explicit
MediaSourceDemuxer
(
AbstractThread
*
aAbstractMainThread
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
uint32_t
GetNumberTracks
(
TrackInfo
:
:
TrackType
aType
)
const
override
;
already_AddRefed
<
MediaTrackDemuxer
>
GetTrackDemuxer
(
TrackInfo
:
:
TrackType
aType
uint32_t
aTrackNumber
)
override
;
bool
IsSeekable
(
)
const
override
;
UniquePtr
<
EncryptionInfo
>
GetCrypto
(
)
override
;
bool
ShouldComputeStartTime
(
)
const
override
{
return
false
;
}
void
AttachSourceBuffer
(
RefPtr
<
TrackBuffersManager
>
&
aSourceBuffer
)
;
void
DetachSourceBuffer
(
RefPtr
<
TrackBuffersManager
>
&
aSourceBuffer
)
;
TaskQueue
*
GetTaskQueue
(
)
{
return
mTaskQueue
;
}
void
NotifyInitDataArrived
(
)
;
void
GetMozDebugReaderData
(
nsACString
&
aString
)
;
void
AddSizeOfResources
(
MediaSourceDecoder
:
:
ResourceSizes
*
aSizes
)
;
static
constexpr
media
:
:
TimeUnit
EOS_FUZZ
=
media
:
:
TimeUnit
:
:
FromMicroseconds
(
500000
)
;
private
:
~
MediaSourceDemuxer
(
)
;
friend
class
MediaSourceTrackDemuxer
;
bool
ScanSourceBuffersForContent
(
)
;
RefPtr
<
TrackBuffersManager
>
GetManager
(
TrackInfo
:
:
TrackType
aType
)
;
TrackInfo
*
GetTrackInfo
(
TrackInfo
:
:
TrackType
)
;
void
DoAttachSourceBuffer
(
RefPtr
<
TrackBuffersManager
>
&
&
aSourceBuffer
)
;
void
DoDetachSourceBuffer
(
RefPtr
<
TrackBuffersManager
>
&
&
aSourceBuffer
)
;
bool
OnTaskQueue
(
)
{
return
!
GetTaskQueue
(
)
|
|
GetTaskQueue
(
)
-
>
IsCurrentThreadIn
(
)
;
}
RefPtr
<
TaskQueue
>
mTaskQueue
;
nsTArray
<
RefPtr
<
MediaSourceTrackDemuxer
>
>
mDemuxers
;
nsTArray
<
RefPtr
<
TrackBuffersManager
>
>
mSourceBuffers
;
MozPromiseHolder
<
InitPromise
>
mInitPromise
;
mutable
Monitor
mMonitor
;
RefPtr
<
TrackBuffersManager
>
mAudioTrack
;
RefPtr
<
TrackBuffersManager
>
mVideoTrack
;
MediaInfo
mInfo
;
}
;
class
MediaSourceTrackDemuxer
:
public
MediaTrackDemuxer
public
DecoderDoctorLifeLogger
<
MediaSourceTrackDemuxer
>
{
public
:
MediaSourceTrackDemuxer
(
MediaSourceDemuxer
*
aParent
TrackInfo
:
:
TrackType
aType
TrackBuffersManager
*
aManager
)
;
UniquePtr
<
TrackInfo
>
GetInfo
(
)
const
override
;
RefPtr
<
SeekPromise
>
Seek
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
RefPtr
<
SamplesPromise
>
GetSamples
(
int32_t
aNumSamples
=
1
)
override
;
void
Reset
(
)
override
;
nsresult
GetNextRandomAccessPoint
(
media
:
:
TimeUnit
*
aTime
)
override
;
RefPtr
<
SkipAccessPointPromise
>
SkipToNextRandomAccessPoint
(
const
media
:
:
TimeUnit
&
aTimeThreshold
)
override
;
media
:
:
TimeIntervals
GetBuffered
(
)
override
;
void
BreakCycles
(
)
override
;
bool
GetSamplesMayBlock
(
)
const
override
{
return
false
;
}
bool
HasManager
(
TrackBuffersManager
*
aManager
)
const
;
void
DetachManager
(
)
;
private
:
bool
OnTaskQueue
(
)
const
{
MOZ_ASSERT
(
mParent
)
;
auto
taskQueue
=
mParent
-
>
GetTaskQueue
(
)
;
MOZ_ASSERT
(
taskQueue
)
;
return
taskQueue
-
>
IsCurrentThreadIn
(
)
;
}
RefPtr
<
SeekPromise
>
DoSeek
(
const
media
:
:
TimeUnit
&
aTime
)
;
RefPtr
<
SamplesPromise
>
DoGetSamples
(
int32_t
aNumSamples
)
;
RefPtr
<
SkipAccessPointPromise
>
DoSkipToNextRandomAccessPoint
(
const
media
:
:
TimeUnit
&
aTimeThreadshold
)
;
already_AddRefed
<
MediaRawData
>
GetSample
(
MediaResult
&
aError
)
;
media
:
:
TimeUnit
GetNextRandomAccessPoint
(
)
;
RefPtr
<
MediaSourceDemuxer
>
mParent
;
TrackInfo
:
:
TrackType
mType
;
Monitor
mMonitor
;
media
:
:
TimeUnit
mNextRandomAccessPoint
;
RefPtr
<
TrackBuffersManager
>
mManager
;
Maybe
<
RefPtr
<
MediaRawData
>
>
mNextSample
;
bool
mReset
;
const
media
:
:
TimeUnit
mPreRoll
;
}
;
}
#
endif
