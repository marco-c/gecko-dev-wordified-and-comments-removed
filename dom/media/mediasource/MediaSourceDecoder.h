#
ifndef
MOZILLA_MEDIASOURCEDECODER_H_
#
define
MOZILLA_MEDIASOURCEDECODER_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
MediaDecoder
.
h
"
class
nsIStreamListener
;
namespace
mozilla
{
class
MediaResource
;
class
MediaDecoderStateMachine
;
class
SourceBufferDecoder
;
class
TrackBuffer
;
enum
MSRangeRemovalAction
:
uint8_t
;
class
MediaSourceDemuxer
;
namespace
dom
{
class
HTMLMediaElement
;
class
MediaSource
;
}
class
MediaSourceDecoder
:
public
MediaDecoder
{
public
:
explicit
MediaSourceDecoder
(
dom
:
:
HTMLMediaElement
*
aElement
)
;
virtual
MediaDecoder
*
Clone
(
)
override
;
virtual
MediaDecoderStateMachine
*
CreateStateMachine
(
)
override
;
virtual
nsresult
Load
(
nsIStreamListener
*
*
MediaDecoder
*
)
override
;
virtual
media
:
:
TimeIntervals
GetSeekable
(
)
override
;
media
:
:
TimeIntervals
GetBuffered
(
)
override
;
void
NotifyDormantSupported
(
bool
aSupported
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDormantSupported
=
aSupported
;
}
virtual
void
Shutdown
(
)
override
;
static
already_AddRefed
<
MediaResource
>
CreateResource
(
nsIPrincipal
*
aPrincipal
=
nullptr
)
;
void
AttachMediaSource
(
dom
:
:
MediaSource
*
aMediaSource
)
;
void
DetachMediaSource
(
)
;
void
Ended
(
bool
aEnded
)
;
virtual
double
GetDuration
(
)
override
;
void
SetInitialDuration
(
int64_t
aDuration
)
;
void
SetMediaSourceDuration
(
double
aDuration
MSRangeRemovalAction
aAction
)
;
double
GetMediaSourceDuration
(
)
;
MediaSourceDemuxer
*
GetDemuxer
(
)
{
return
mDemuxer
;
}
void
GetMozDebugReaderData
(
nsAString
&
aString
)
;
private
:
void
DoSetMediaSourceDuration
(
double
aDuration
)
;
dom
:
:
MediaSource
*
mMediaSource
;
RefPtr
<
MediaSourceDemuxer
>
mDemuxer
;
Atomic
<
bool
>
mEnded
;
}
;
}
#
endif
