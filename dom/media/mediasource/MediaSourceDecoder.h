#
ifndef
MOZILLA_MEDIASOURCEDECODER_H_
#
define
MOZILLA_MEDIASOURCEDECODER_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
MediaDecoder
.
h
"
#
include
"
MediaFormatReader
.
h
"
class
nsIStreamListener
;
namespace
mozilla
{
class
MediaDecoderStateMachine
;
class
SourceBufferDecoder
;
class
TrackBuffer
;
enum
MSRangeRemovalAction
:
uint8_t
;
class
MediaSourceDemuxer
;
class
MediaSourceResource
;
namespace
dom
{
class
HTMLMediaElement
;
class
MediaSource
;
}
class
MediaSourceDecoder
:
public
MediaDecoder
{
public
:
explicit
MediaSourceDecoder
(
MediaDecoderInit
&
aInit
)
;
MediaResource
*
GetResource
(
)
const
override
final
;
MediaDecoderStateMachine
*
CreateStateMachine
(
)
override
;
nsresult
Load
(
nsIPrincipal
*
aPrincipal
)
;
media
:
:
TimeIntervals
GetSeekable
(
)
override
;
media
:
:
TimeIntervals
GetBuffered
(
)
override
;
void
Shutdown
(
)
override
;
void
AttachMediaSource
(
dom
:
:
MediaSource
*
aMediaSource
)
;
void
DetachMediaSource
(
)
;
void
Ended
(
bool
aEnded
)
;
double
GetDuration
(
)
override
;
void
SetInitialDuration
(
int64_t
aDuration
)
;
void
SetMediaSourceDuration
(
double
aDuration
)
;
MediaSourceDemuxer
*
GetDemuxer
(
)
{
return
mDemuxer
;
}
void
GetMozDebugReaderData
(
nsACString
&
aString
)
override
;
void
AddSizeOfResources
(
ResourceSizes
*
aSizes
)
override
;
MediaDecoderOwner
:
:
NextFrameStatus
NextFrameBufferedStatus
(
)
override
;
bool
IsMSE
(
)
const
override
{
return
true
;
}
void
NotifyInitDataArrived
(
)
;
private
:
void
DoSetMediaSourceDuration
(
double
aDuration
)
;
media
:
:
TimeInterval
ClampIntervalToEnd
(
const
media
:
:
TimeInterval
&
aInterval
)
;
bool
CanPlayThroughImpl
(
)
override
;
RefPtr
<
MediaSourceResource
>
mResource
;
dom
:
:
MediaSource
*
mMediaSource
;
RefPtr
<
MediaSourceDemuxer
>
mDemuxer
;
bool
mEnded
;
}
;
}
#
endif
