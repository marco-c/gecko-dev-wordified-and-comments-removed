#
include
<
gtest
/
gtest
.
h
>
#
include
<
stdint
.
h
>
#
include
"
VideoUtils
.
h
"
using
namespace
mozilla
;
struct
TestData
{
const
char16_t
*
const
mCodecParameterString
;
const
bool
mExpectedValue
;
}
;
TEST
(
ExtractVPXCodecDetails
TestDataLength
)
{
TestData
tests
[
]
=
{
{
u
"
vp09
.
00
.
11
.
08
"
true
}
{
u
"
vp09
.
00
.
11
.
08
.
00
"
true
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
09
.
01
"
true
}
{
u
"
vp09
"
false
}
{
u
"
vp09
.
00
"
false
}
{
u
"
vp09
.
00
.
11
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
09
.
01
.
00
"
false
}
}
;
for
(
const
auto
&
data
:
tests
)
{
uint8_t
profile
=
0
;
uint8_t
level
=
0
;
uint8_t
bitDepth
=
0
;
bool
result
=
ExtractVPXCodecDetails
(
nsString
(
data
.
mCodecParameterString
)
profile
level
bitDepth
)
;
EXPECT_EQ
(
result
data
.
mExpectedValue
)
<
<
NS_ConvertUTF16toUTF8
(
data
.
mCodecParameterString
)
.
get
(
)
;
}
}
TEST
(
ExtractVPXCodecDetails
TestInputData
)
{
TestData
tests
[
]
=
{
{
u
"
vp09
.
02
.
.
08
"
false
}
{
u
"
vp9
.
02
.
10
.
08
"
false
}
{
u
"
vp09
.
03
.
11
.
08
"
false
}
{
u
"
vp09
.
00
.
63
.
08
.
00
"
false
}
{
u
"
vp09
.
02
.
10
.
13
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
04
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
00
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
03
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
23
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
00
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
03
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
19
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
12
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
03
"
false
}
{
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
09
.
02
"
false
}
{
u
"
vp09
.
02
.
10
.
08
.
03
.
09
.
16
.
00
.
00
"
true
}
}
;
for
(
const
auto
&
data
:
tests
)
{
uint8_t
profile
=
0
;
uint8_t
level
=
0
;
uint8_t
bitDepth
=
0
;
bool
result
=
ExtractVPXCodecDetails
(
nsString
(
data
.
mCodecParameterString
)
profile
level
bitDepth
)
;
EXPECT_EQ
(
result
data
.
mExpectedValue
)
<
<
NS_ConvertUTF16toUTF8
(
data
.
mCodecParameterString
)
.
get
(
)
;
}
}
TEST
(
ExtractVPXCodecDetails
TestParsingOutput
)
{
uint8_t
profile
=
0
;
uint8_t
level
=
0
;
uint8_t
bitDepth
=
0
;
uint8_t
chromaSubsampling
=
0
;
VideoColorSpace
colorSpace
;
auto
data
=
u
"
vp09
.
01
.
11
.
08
"
;
bool
result
=
ExtractVPXCodecDetails
(
nsString
(
data
)
profile
level
bitDepth
chromaSubsampling
colorSpace
)
;
EXPECT_EQ
(
result
true
)
;
EXPECT_EQ
(
profile
1
)
;
EXPECT_EQ
(
level
11
)
;
EXPECT_EQ
(
bitDepth
8
)
;
EXPECT_EQ
(
chromaSubsampling
1
)
;
EXPECT_EQ
(
colorSpace
.
mPrimaryId
1
)
;
EXPECT_EQ
(
colorSpace
.
mTransferId
1
)
;
EXPECT_EQ
(
colorSpace
.
mMatrixId
1
)
;
EXPECT_EQ
(
colorSpace
.
mRangeId
0
)
;
data
=
u
"
vp09
.
02
.
10
.
10
.
01
.
09
.
16
.
09
.
01
"
;
result
=
ExtractVPXCodecDetails
(
nsString
(
data
)
profile
level
bitDepth
chromaSubsampling
colorSpace
)
;
EXPECT_EQ
(
result
true
)
;
EXPECT_EQ
(
profile
2
)
;
EXPECT_EQ
(
level
10
)
;
EXPECT_EQ
(
bitDepth
10
)
;
EXPECT_EQ
(
chromaSubsampling
1
)
;
EXPECT_EQ
(
colorSpace
.
mPrimaryId
9
)
;
EXPECT_EQ
(
colorSpace
.
mTransferId
16
)
;
EXPECT_EQ
(
colorSpace
.
mMatrixId
9
)
;
EXPECT_EQ
(
colorSpace
.
mRangeId
1
)
;
}
