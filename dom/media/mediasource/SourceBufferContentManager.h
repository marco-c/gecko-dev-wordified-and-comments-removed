#
ifndef
MOZILLA_SOURCEBUFFERCONTENTMANAGER_H_
#
define
MOZILLA_SOURCEBUFFERCONTENTMANAGER_H_
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
MediaSourceDecoder
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SourceBuffer
;
class
SourceBufferAttributes
;
}
class
SourceBufferContentManager
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SourceBufferContentManager
)
;
typedef
MozPromise
<
bool
nsresult
true
>
AppendPromise
;
typedef
AppendPromise
RangeRemovalPromise
;
static
already_AddRefed
<
SourceBufferContentManager
>
CreateManager
(
dom
:
:
SourceBufferAttributes
*
aAttributes
MediaSourceDecoder
*
aParentDecoder
const
nsACString
&
aType
)
;
virtual
bool
AppendData
(
MediaByteBuffer
*
aData
media
:
:
TimeUnit
aTimestampOffset
)
=
0
;
virtual
RefPtr
<
AppendPromise
>
BufferAppend
(
)
=
0
;
virtual
void
AbortAppendData
(
)
=
0
;
virtual
void
ResetParserState
(
)
=
0
;
virtual
RefPtr
<
RangeRemovalPromise
>
RangeRemoval
(
media
:
:
TimeUnit
aStart
media
:
:
TimeUnit
aEnd
)
=
0
;
enum
class
EvictDataResult
:
int8_t
{
NO_DATA_EVICTED
DATA_EVICTED
CANT_EVICT
BUFFER_FULL
}
;
virtual
EvictDataResult
EvictData
(
media
:
:
TimeUnit
aPlaybackTime
uint32_t
aThreshold
media
:
:
TimeUnit
*
aBufferStartTime
)
=
0
;
virtual
void
EvictBefore
(
media
:
:
TimeUnit
aTime
)
=
0
;
virtual
media
:
:
TimeIntervals
Buffered
(
)
=
0
;
virtual
int64_t
GetSize
(
)
=
0
;
virtual
void
Ended
(
)
=
0
;
virtual
void
Detach
(
)
=
0
;
enum
class
AppendState
:
int32_t
{
WAITING_FOR_SEGMENT
PARSING_INIT_SEGMENT
PARSING_MEDIA_SEGMENT
}
;
virtual
AppendState
GetAppendState
(
)
{
return
AppendState
:
:
WAITING_FOR_SEGMENT
;
}
virtual
void
SetGroupStartTimestamp
(
const
media
:
:
TimeUnit
&
aGroupStartTimestamp
)
{
}
virtual
void
RestartGroupStartTimestamp
(
)
{
}
virtual
media
:
:
TimeUnit
GroupEndTimestamp
(
)
=
0
;
protected
:
virtual
~
SourceBufferContentManager
(
)
{
}
}
;
}
#
endif
