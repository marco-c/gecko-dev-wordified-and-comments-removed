#
ifndef
MOZILLA_MEDIASTREAMLISTENER_h_
#
define
MOZILLA_MEDIASTREAMLISTENER_h_
#
include
"
StreamTracks
.
h
"
#
include
"
MediaStreamGraph
.
h
"
namespace
mozilla
{
class
AudioSegment
;
class
MediaStream
;
class
MediaStreamGraph
;
class
MediaStreamVideoSink
;
class
VideoSegment
;
enum
MediaStreamGraphEvent
:
uint32_t
{
EVENT_FINISHED
EVENT_REMOVED
EVENT_HAS_DIRECT_LISTENERS
EVENT_HAS_NO_DIRECT_LISTENERS
}
;
enum
TrackEventCommand
:
uint32_t
{
TRACK_EVENT_NONE
=
0x00
TRACK_EVENT_CREATED
=
0x01
TRACK_EVENT_ENDED
=
0x02
TRACK_EVENT_UNUSED
=
~
(
TRACK_EVENT_ENDED
|
TRACK_EVENT_CREATED
)
}
;
class
MediaStreamListener
{
protected
:
virtual
~
MediaStreamListener
(
)
{
}
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaStreamListener
)
virtual
void
NotifyPull
(
MediaStreamGraph
*
aGraph
StreamTime
aDesiredTime
)
{
}
enum
Blocking
{
BLOCKED
UNBLOCKED
}
;
virtual
void
NotifyBlockingChanged
(
MediaStreamGraph
*
aGraph
Blocking
aBlocked
)
{
}
virtual
void
NotifyHasCurrentData
(
MediaStreamGraph
*
aGraph
)
{
}
virtual
void
NotifyOutput
(
MediaStreamGraph
*
aGraph
GraphTime
aCurrentTime
)
{
}
virtual
void
NotifyEvent
(
MediaStreamGraph
*
aGraph
MediaStreamGraphEvent
aEvent
)
{
}
virtual
void
NotifyQueuedTrackChanges
(
MediaStreamGraph
*
aGraph
TrackID
aID
StreamTime
aTrackOffset
TrackEventCommand
aTrackEvents
const
MediaSegment
&
aQueuedMedia
MediaStream
*
aInputStream
=
nullptr
TrackID
aInputTrackID
=
TRACK_INVALID
)
{
}
virtual
void
NotifyQueuedAudioData
(
MediaStreamGraph
*
aGraph
TrackID
aID
StreamTime
aTrackOffset
const
AudioSegment
&
aQueuedMedia
MediaStream
*
aInputStream
=
nullptr
TrackID
aInputTrackID
=
TRACK_INVALID
)
{
}
virtual
void
NotifyFinishedTrackCreation
(
MediaStreamGraph
*
aGraph
)
{
}
}
;
class
MediaStreamTrackListener
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaStreamTrackListener
)
public
:
virtual
void
NotifyQueuedChanges
(
MediaStreamGraph
*
aGraph
StreamTime
aTrackOffset
const
MediaSegment
&
aQueuedMedia
)
{
}
virtual
void
NotifyPrincipalHandleChanged
(
MediaStreamGraph
*
aGraph
const
PrincipalHandle
&
aNewPrincipalHandle
)
{
}
virtual
void
NotifyEnded
(
)
{
}
virtual
void
NotifyRemoved
(
)
{
}
protected
:
virtual
~
MediaStreamTrackListener
(
)
{
}
}
;
class
DirectMediaStreamListener
:
public
MediaStreamListener
{
public
:
virtual
~
DirectMediaStreamListener
(
)
{
}
virtual
void
NotifyRealtimeData
(
MediaStreamGraph
*
aGraph
TrackID
aID
StreamTime
aTrackOffset
uint32_t
aTrackEvents
const
MediaSegment
&
aMedia
)
{
}
}
;
class
DirectMediaStreamTrackListener
:
public
MediaStreamTrackListener
{
friend
class
SourceMediaStream
;
friend
class
TrackUnionStream
;
public
:
virtual
void
NotifyRealtimeTrackData
(
MediaStreamGraph
*
aGraph
StreamTime
aTrackOffset
const
MediaSegment
&
aMedia
)
{
}
enum
class
InstallationResult
{
TRACK_NOT_FOUND_AT_SOURCE
TRACK_TYPE_NOT_SUPPORTED
STREAM_NOT_SUPPORTED
ALREADY_EXISTS
SUCCESS
}
;
virtual
void
NotifyDirectListenerInstalled
(
InstallationResult
aResult
)
{
}
virtual
void
NotifyDirectListenerUninstalled
(
)
{
}
virtual
MediaStreamVideoSink
*
AsMediaStreamVideoSink
(
)
{
return
nullptr
;
}
protected
:
virtual
~
DirectMediaStreamTrackListener
(
)
{
}
void
MirrorAndDisableSegment
(
AudioSegment
&
aFrom
AudioSegment
&
aTo
)
;
void
MirrorAndDisableSegment
(
VideoSegment
&
aFrom
VideoSegment
&
aTo
DisabledTrackMode
aMode
)
;
void
NotifyRealtimeTrackDataAndApplyTrackDisabling
(
MediaStreamGraph
*
aGraph
StreamTime
aTrackOffset
MediaSegment
&
aMedia
)
;
void
IncreaseDisabled
(
DisabledTrackMode
aMode
)
;
void
DecreaseDisabled
(
DisabledTrackMode
aMode
)
;
Atomic
<
int32_t
>
mDisabledFreezeCount
;
Atomic
<
int32_t
>
mDisabledBlackCount
;
nsAutoPtr
<
MediaSegment
>
mMedia
;
}
;
}
#
endif
