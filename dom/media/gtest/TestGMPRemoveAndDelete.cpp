#
include
"
GMPService
.
h
"
#
include
"
GMPServiceParent
.
h
"
#
include
"
GMPTestMonitor
.
h
"
#
include
"
GMPUtils
.
h
"
#
include
"
GMPVideoDecoderProxy
.
h
"
#
include
"
gmp
-
api
/
gmp
-
video
-
host
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIObserverService
.
h
"
#
define
GMP_DIR_NAME
u
"
gmp
-
fakeopenh264
"
_ns
#
define
GMP_OLD_VERSION
u
"
1
.
0
"
_ns
#
define
GMP_NEW_VERSION
u
"
1
.
1
"
_ns
#
define
GMP_DELETED_TOPIC
"
gmp
-
directory
-
deleted
"
#
define
EXPECT_OK
(
X
)
EXPECT_TRUE
(
NS_SUCCEEDED
(
X
)
)
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gmp
;
class
GMPRemoveTest
:
public
nsIObserver
public
GMPVideoDecoderCallbackProxy
{
public
:
GMPRemoveTest
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
;
void
Setup
(
)
;
bool
CreateVideoDecoder
(
nsCString
aNodeId
=
"
"
_ns
)
;
void
CloseVideoDecoder
(
)
;
void
DeletePluginDirectory
(
bool
aCanDefer
)
;
GMPErr
Decode
(
)
;
void
Wait
(
)
;
bool
IsTerminated
(
)
;
virtual
void
Decoded
(
GMPVideoi420Frame
*
aDecodedFrame
)
override
;
virtual
void
Error
(
GMPErr
aError
)
override
;
virtual
void
Terminated
(
)
override
;
virtual
void
ReceivedDecodedReferenceFrame
(
const
uint64_t
aPictureId
)
override
{
}
virtual
void
ReceivedDecodedFrame
(
const
uint64_t
aPictureId
)
override
{
}
virtual
void
InputDataExhausted
(
)
override
{
}
virtual
void
DrainComplete
(
)
override
{
}
virtual
void
ResetComplete
(
)
override
{
}
private
:
virtual
~
GMPRemoveTest
(
)
;
void
gmp_Decode
(
)
;
void
gmp_GetVideoDecoder
(
nsCString
aNodeId
GMPVideoDecoderProxy
*
*
aOutDecoder
GMPVideoHost
*
*
aOutHost
)
;
void
GeneratePlugin
(
)
;
GMPTestMonitor
mTestMonitor
;
nsCOMPtr
<
nsIThread
>
mGMPThread
;
bool
mIsTerminated
;
nsString
mTmpPath
;
nsCOMPtr
<
nsIFile
>
mTmpDir
;
nsString
mOriginalPath
;
GMPVideoDecoderProxy
*
mDecoder
;
GMPVideoHost
*
mHost
;
GMPErr
mDecodeResult
;
}
;
TEST
(
GeckoMediaPlugins
RemoveAndDeleteForcedSimple
)
{
RefPtr
<
GMPRemoveTest
>
test
(
new
GMPRemoveTest
(
)
)
;
test
-
>
Setup
(
)
;
test
-
>
DeletePluginDirectory
(
false
)
;
test
-
>
Wait
(
)
;
}
TEST
(
GeckoMediaPlugins
RemoveAndDeleteDeferredSimple
)
{
RefPtr
<
GMPRemoveTest
>
test
(
new
GMPRemoveTest
(
)
)
;
test
-
>
Setup
(
)
;
test
-
>
DeletePluginDirectory
(
true
)
;
test
-
>
Wait
(
)
;
}
#
if
!
defined
(
_WIN64
)
TEST
(
GeckoMediaPlugins
RemoveAndDeleteForcedInUse
)
{
RefPtr
<
GMPRemoveTest
>
test
(
new
GMPRemoveTest
(
)
)
;
test
-
>
Setup
(
)
;
EXPECT_TRUE
(
test
-
>
CreateVideoDecoder
(
"
thisOrigin
"
_ns
)
)
;
GMPErr
err
=
test
-
>
Decode
(
)
;
EXPECT_EQ
(
err
GMPNoErr
)
;
test
-
>
DeletePluginDirectory
(
false
)
;
test
-
>
Wait
(
)
;
EXPECT_FALSE
(
test
-
>
CreateVideoDecoder
(
"
thisOrigin
"
_ns
)
)
;
EXPECT_TRUE
(
test
-
>
IsTerminated
(
)
)
;
}
#
endif
TEST
(
GeckoMediaPlugins
RemoveAndDeleteDeferredInUse
)
{
RefPtr
<
GMPRemoveTest
>
test
(
new
GMPRemoveTest
(
)
)
;
test
-
>
Setup
(
)
;
EXPECT_TRUE
(
test
-
>
CreateVideoDecoder
(
"
thisOrigin
"
_ns
)
)
;
GMPErr
err
=
test
-
>
Decode
(
)
;
EXPECT_EQ
(
err
GMPNoErr
)
;
test
-
>
DeletePluginDirectory
(
true
)
;
err
=
test
-
>
Decode
(
)
;
EXPECT_EQ
(
err
GMPNoErr
)
;
EXPECT_TRUE
(
test
-
>
CreateVideoDecoder
(
"
thisOrigin
"
_ns
)
)
;
test
-
>
CloseVideoDecoder
(
)
;
test
-
>
Wait
(
)
;
}
static
StaticRefPtr
<
GeckoMediaPluginService
>
gService
;
static
StaticRefPtr
<
GeckoMediaPluginServiceParent
>
gServiceParent
;
static
GeckoMediaPluginService
*
GetService
(
)
{
if
(
!
gService
)
{
RefPtr
<
GeckoMediaPluginService
>
service
=
GeckoMediaPluginService
:
:
GetGeckoMediaPluginService
(
)
;
gService
=
service
;
}
return
gService
.
get
(
)
;
}
static
GeckoMediaPluginServiceParent
*
GetServiceParent
(
)
{
if
(
!
gServiceParent
)
{
RefPtr
<
GeckoMediaPluginServiceParent
>
parent
=
GeckoMediaPluginServiceParent
:
:
GetSingleton
(
)
;
gServiceParent
=
parent
;
}
return
gServiceParent
.
get
(
)
;
}
NS_IMPL_ISUPPORTS
(
GMPRemoveTest
nsIObserver
)
GMPRemoveTest
:
:
GMPRemoveTest
(
)
:
mIsTerminated
(
false
)
mDecoder
(
nullptr
)
mHost
(
nullptr
)
{
}
GMPRemoveTest
:
:
~
GMPRemoveTest
(
)
{
bool
exists
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
mTmpDir
-
>
Exists
(
&
exists
)
)
&
&
!
exists
)
;
EXPECT_OK
(
GetServiceParent
(
)
-
>
AddPluginDirectory
(
mOriginalPath
)
)
;
}
void
GMPRemoveTest
:
:
Setup
(
)
{
GeneratePlugin
(
)
;
GetService
(
)
-
>
GetThread
(
getter_AddRefs
(
mGMPThread
)
)
;
nsCOMPtr
<
nsISerialEventTarget
>
thread
(
GetServiceParent
(
)
-
>
GetGMPThread
(
)
)
;
EXPECT_TRUE
(
thread
)
;
GMPTestMonitor
*
mon
=
&
mTestMonitor
;
GetServiceParent
(
)
-
>
EnsureInitialized
(
)
-
>
Then
(
thread
__func__
[
mon
]
(
)
{
mon
-
>
SetFinished
(
)
;
}
[
mon
]
(
)
{
mon
-
>
SetFinished
(
)
;
}
)
;
mTestMonitor
.
AwaitFinished
(
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
AddObserver
(
this
GMP_DELETED_TOPIC
false
)
;
EXPECT_OK
(
GetServiceParent
(
)
-
>
RemovePluginDirectory
(
mOriginalPath
)
)
;
GetServiceParent
(
)
-
>
AsyncAddPluginDirectory
(
mTmpPath
)
-
>
Then
(
thread
__func__
[
mon
]
(
)
{
mon
-
>
SetFinished
(
)
;
}
[
mon
]
(
)
{
mon
-
>
SetFinished
(
)
;
}
)
;
mTestMonitor
.
AwaitFinished
(
)
;
}
bool
GMPRemoveTest
:
:
CreateVideoDecoder
(
nsCString
aNodeId
)
{
GMPVideoHost
*
host
;
GMPVideoDecoderProxy
*
decoder
=
nullptr
;
mGMPThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
<
nsCString
GMPVideoDecoderProxy
*
*
GMPVideoHost
*
*
>
(
"
GMPRemoveTest
:
:
gmp_GetVideoDecoder
"
this
&
GMPRemoveTest
:
:
gmp_GetVideoDecoder
aNodeId
&
decoder
&
host
)
NS_DISPATCH_NORMAL
)
;
mTestMonitor
.
AwaitFinished
(
)
;
if
(
!
decoder
)
{
return
false
;
}
GMPVideoCodec
codec
;
memset
(
&
codec
0
sizeof
(
codec
)
)
;
codec
.
mGMPApiVersion
=
33
;
nsTArray
<
uint8_t
>
empty
;
mGMPThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
<
const
GMPVideoCodec
&
const
nsTArray
<
uint8_t
>
&
GMPVideoDecoderCallbackProxy
*
int32_t
>
(
"
GMPVideoDecoderProxy
:
:
InitDecode
"
decoder
&
GMPVideoDecoderProxy
:
:
InitDecode
codec
empty
this
1
)
NS_DISPATCH_SYNC
)
;
if
(
mDecoder
)
{
CloseVideoDecoder
(
)
;
}
mDecoder
=
decoder
;
mHost
=
host
;
return
true
;
}
void
GMPRemoveTest
:
:
gmp_GetVideoDecoder
(
nsCString
aNodeId
GMPVideoDecoderProxy
*
*
aOutDecoder
GMPVideoHost
*
*
aOutHost
)
{
nsTArray
<
nsCString
>
tags
;
tags
.
AppendElement
(
"
h264
"
_ns
)
;
tags
.
AppendElement
(
"
fake
"
_ns
)
;
class
Callback
:
public
GetGMPVideoDecoderCallback
{
public
:
Callback
(
GMPTestMonitor
*
aMonitor
GMPVideoDecoderProxy
*
*
aDecoder
GMPVideoHost
*
*
aHost
)
:
mMonitor
(
aMonitor
)
mDecoder
(
aDecoder
)
mHost
(
aHost
)
{
}
virtual
void
Done
(
GMPVideoDecoderProxy
*
aDecoder
GMPVideoHost
*
aHost
)
override
{
*
mDecoder
=
aDecoder
;
*
mHost
=
aHost
;
mMonitor
-
>
SetFinished
(
)
;
}
private
:
GMPTestMonitor
*
mMonitor
;
GMPVideoDecoderProxy
*
*
mDecoder
;
GMPVideoHost
*
*
mHost
;
}
;
UniquePtr
<
GetGMPVideoDecoderCallback
>
cb
(
new
Callback
(
&
mTestMonitor
aOutDecoder
aOutHost
)
)
;
if
(
NS_FAILED
(
GetService
(
)
-
>
GetGMPVideoDecoder
(
nullptr
&
tags
aNodeId
std
:
:
move
(
cb
)
)
)
)
{
mTestMonitor
.
SetFinished
(
)
;
}
}
void
GMPRemoveTest
:
:
CloseVideoDecoder
(
)
{
mGMPThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
(
"
GMPVideoDecoderProxy
:
:
Close
"
mDecoder
&
GMPVideoDecoderProxy
:
:
Close
)
NS_DISPATCH_SYNC
)
;
mDecoder
=
nullptr
;
mHost
=
nullptr
;
}
void
GMPRemoveTest
:
:
DeletePluginDirectory
(
bool
aCanDefer
)
{
GetServiceParent
(
)
-
>
RemoveAndDeletePluginDirectory
(
mTmpPath
aCanDefer
)
;
}
GMPErr
GMPRemoveTest
:
:
Decode
(
)
{
mGMPThread
-
>
Dispatch
(
NewNonOwningRunnableMethod
(
"
GMPRemoveTest
:
:
gmp_Decode
"
this
&
GMPRemoveTest
:
:
gmp_Decode
)
NS_DISPATCH_NORMAL
)
;
mTestMonitor
.
AwaitFinished
(
)
;
return
mDecodeResult
;
}
void
GMPRemoveTest
:
:
gmp_Decode
(
)
{
#
pragma
pack
(
push
1
)
struct
EncodedFrame
{
struct
SPSNalu
{
uint32_t
size_
;
uint8_t
payload
[
14
]
;
}
sps_nalu
;
struct
PPSNalu
{
uint32_t
size_
;
uint8_t
payload
[
4
]
;
}
pps_nalu
;
struct
IDRNalu
{
uint32_t
size_
;
uint8_t
h264_compat_
;
uint32_t
magic_
;
uint32_t
width_
;
uint32_t
height_
;
uint8_t
y_
;
uint8_t
u_
;
uint8_t
v_
;
uint32_t
timestamp_
;
}
idr_nalu
;
}
;
#
pragma
pack
(
pop
)
GMPVideoFrame
*
absFrame
;
GMPErr
err
=
mHost
-
>
CreateFrame
(
kGMPEncodedVideoFrame
&
absFrame
)
;
EXPECT_EQ
(
err
GMPNoErr
)
;
GMPUniquePtr
<
GMPVideoEncodedFrame
>
frame
(
static_cast
<
GMPVideoEncodedFrame
*
>
(
absFrame
)
)
;
err
=
frame
-
>
CreateEmptyFrame
(
sizeof
(
EncodedFrame
)
)
;
EXPECT_EQ
(
err
GMPNoErr
)
;
EncodedFrame
*
frameData
=
reinterpret_cast
<
EncodedFrame
*
>
(
frame
-
>
Buffer
(
)
)
;
frameData
-
>
sps_nalu
.
size_
=
sizeof
(
EncodedFrame
:
:
SPSNalu
)
-
sizeof
(
uint32_t
)
;
frameData
-
>
pps_nalu
.
size_
=
sizeof
(
EncodedFrame
:
:
PPSNalu
)
-
sizeof
(
uint32_t
)
;
frameData
-
>
idr_nalu
.
size_
=
sizeof
(
EncodedFrame
:
:
IDRNalu
)
-
sizeof
(
uint32_t
)
;
frameData
-
>
idr_nalu
.
h264_compat_
=
5
;
frameData
-
>
idr_nalu
.
magic_
=
0x004000b8
;
frameData
-
>
idr_nalu
.
width_
=
frameData
-
>
idr_nalu
.
height_
=
16
;
nsTArray
<
uint8_t
>
empty
;
nsresult
rv
=
mDecoder
-
>
Decode
(
std
:
:
move
(
frame
)
false
empty
)
;
EXPECT_OK
(
rv
)
;
}
void
GMPRemoveTest
:
:
Wait
(
)
{
mTestMonitor
.
AwaitFinished
(
)
;
}
bool
GMPRemoveTest
:
:
IsTerminated
(
)
{
return
mIsTerminated
;
}
NS_IMETHODIMP
GMPRemoveTest
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
EXPECT_TRUE
(
!
strcmp
(
GMP_DELETED_TOPIC
aTopic
)
)
;
nsString
data
(
aData
)
;
if
(
mTmpPath
.
Equals
(
data
)
)
{
mTestMonitor
.
SetFinished
(
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
RemoveObserver
(
this
GMP_DELETED_TOPIC
)
;
}
return
NS_OK
;
}
void
GMPRemoveTest
:
:
Decoded
(
GMPVideoi420Frame
*
aDecodedFrame
)
{
aDecodedFrame
-
>
Destroy
(
)
;
mDecodeResult
=
GMPNoErr
;
mTestMonitor
.
SetFinished
(
)
;
}
void
GMPRemoveTest
:
:
Error
(
GMPErr
aError
)
{
mDecodeResult
=
aError
;
mTestMonitor
.
SetFinished
(
)
;
}
void
GMPRemoveTest
:
:
Terminated
(
)
{
mIsTerminated
=
true
;
if
(
mDecoder
)
{
mDecoder
-
>
Close
(
)
;
mDecoder
=
nullptr
;
}
}
void
GMPRemoveTest
:
:
GeneratePlugin
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
gmpDir
;
nsCOMPtr
<
nsIFile
>
origDir
;
nsCOMPtr
<
nsIFile
>
tmpDir
;
rv
=
NS_GetSpecialDirectory
(
NS_GRE_DIR
getter_AddRefs
(
gmpDir
)
)
;
EXPECT_OK
(
rv
)
;
rv
=
gmpDir
-
>
Append
(
GMP_DIR_NAME
)
;
EXPECT_OK
(
rv
)
;
rv
=
gmpDir
-
>
Clone
(
getter_AddRefs
(
origDir
)
)
;
EXPECT_OK
(
rv
)
;
rv
=
origDir
-
>
Append
(
GMP_OLD_VERSION
)
;
EXPECT_OK
(
rv
)
;
rv
=
gmpDir
-
>
Clone
(
getter_AddRefs
(
tmpDir
)
)
;
EXPECT_OK
(
rv
)
;
rv
=
tmpDir
-
>
Append
(
GMP_NEW_VERSION
)
;
EXPECT_OK
(
rv
)
;
bool
exists
=
false
;
rv
=
tmpDir
-
>
Exists
(
&
exists
)
;
EXPECT_OK
(
rv
)
;
if
(
exists
)
{
rv
=
tmpDir
-
>
Remove
(
true
)
;
EXPECT_OK
(
rv
)
;
}
rv
=
origDir
-
>
CopyTo
(
gmpDir
GMP_NEW_VERSION
)
;
EXPECT_OK
(
rv
)
;
rv
=
gmpDir
-
>
Clone
(
getter_AddRefs
(
tmpDir
)
)
;
EXPECT_OK
(
rv
)
;
rv
=
tmpDir
-
>
Append
(
GMP_NEW_VERSION
)
;
EXPECT_OK
(
rv
)
;
EXPECT_OK
(
origDir
-
>
GetPath
(
mOriginalPath
)
)
;
EXPECT_OK
(
tmpDir
-
>
GetPath
(
mTmpPath
)
)
;
mTmpDir
=
tmpDir
;
}
