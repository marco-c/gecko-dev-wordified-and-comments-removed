#
ifndef
MOCK_MEDIA_DECODER_OWNER_H_
#
define
MOCK_MEDIA_DECODER_OWNER_H_
#
include
"
MediaDecoderOwner
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
MockMediaDecoderOwner
:
public
MediaDecoderOwner
{
public
:
nsresult
DispatchAsyncEvent
(
const
nsAString
&
aName
)
override
{
return
NS_OK
;
}
void
FireTimeUpdate
(
bool
aPeriodic
)
override
{
}
bool
GetPaused
(
)
override
{
return
false
;
}
void
MetadataLoaded
(
const
MediaInfo
*
aInfo
nsAutoPtr
<
const
MetadataTags
>
aTags
)
override
{
}
void
NetworkError
(
)
override
{
}
void
DecodeError
(
const
MediaResult
&
aError
)
override
{
}
bool
HasError
(
)
const
override
{
return
false
;
}
void
LoadAborted
(
)
override
{
}
void
PlaybackEnded
(
)
override
{
}
void
SeekStarted
(
)
override
{
}
void
SeekCompleted
(
)
override
{
}
void
DownloadProgressed
(
)
override
{
}
void
UpdateReadyState
(
)
override
{
}
void
FirstFrameLoaded
(
)
override
{
}
void
DispatchEncrypted
(
const
nsTArray
<
uint8_t
>
&
aInitData
const
nsAString
&
aInitDataType
)
override
{
}
bool
IsActive
(
)
const
override
{
return
true
;
}
bool
IsHidden
(
)
const
override
{
return
false
;
}
void
DownloadSuspended
(
)
override
{
}
void
DownloadResumed
(
bool
aForceNetworkLoading
)
override
{
}
void
NotifySuspendedByCache
(
bool
aIsSuspended
)
override
{
}
void
NotifyDecoderPrincipalChanged
(
)
override
{
}
VideoFrameContainer
*
GetVideoFrameContainer
(
)
override
{
return
nullptr
;
}
void
SetAudibleState
(
bool
aAudible
)
override
{
}
void
NotifyXPCOMShutdown
(
)
override
{
}
}
;
}
#
endif
