#
include
"
MediaData
.
h
"
#
include
"
gtest
/
gtest
.
h
"
using
mozilla
:
:
AlignedFloatBuffer
;
using
mozilla
:
:
AudioDataValue
;
using
mozilla
:
:
FloatToAudioSample
;
using
mozilla
:
:
InflatableShortBuffer
;
void
FillSine
(
InflatableShortBuffer
&
aBuf
AlignedFloatBuffer
&
aFloatBuf
)
{
float
phase
=
0
;
float
phaseIncrement
=
2
*
M_PI
*
440
.
/
44100
.
f
;
for
(
uint32_t
i
=
0
;
i
<
aBuf
.
Length
(
)
;
i
+
+
)
{
aBuf
.
get
(
)
[
i
]
=
FloatToAudioSample
<
int16_t
>
(
sin
(
phase
)
)
;
aFloatBuf
.
get
(
)
[
i
]
=
sin
(
phase
)
;
phase
+
=
phaseIncrement
;
if
(
phase
>
=
2
*
M_PI
)
{
phase
-
=
2
*
M_PI
;
}
}
}
TEST
(
InflatableAudioBuffer
Test
)
{
for
(
uint32_t
i
=
1
;
i
<
10000
;
i
+
+
)
{
InflatableShortBuffer
buf
(
i
)
;
AlignedFloatBuffer
bufFloat
(
i
)
;
FillSine
(
buf
bufFloat
)
;
AlignedFloatBuffer
inflated
=
buf
.
Inflate
(
)
;
for
(
uint32_t
j
=
0
;
j
<
buf
.
Length
(
)
;
j
+
+
)
{
if
(
std
:
:
abs
(
bufFloat
.
get
(
)
[
j
]
-
inflated
.
get
(
)
[
j
]
)
*
32767
.
>
1
.
0
)
{
fprintf
(
stderr
"
%
f
!
=
%
f
(
size
:
%
u
index
:
%
u
)
\
n
"
bufFloat
.
get
(
)
[
j
]
inflated
.
get
(
)
[
j
]
i
j
)
;
ASSERT_TRUE
(
false
)
;
}
}
}
}
