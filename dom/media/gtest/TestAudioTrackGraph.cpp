#
include
"
MediaTrackGraphImpl
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
-
printers
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GMPTestMonitor
.
h
"
#
include
"
MockCubeb
.
h
"
TEST
(
TestAudioTrackGraph
DifferentDeviceIDs
)
{
MockCubeb
*
cubeb
=
new
MockCubeb
(
)
;
CubebUtils
:
:
ForceSetCubebContext
(
cubeb
-
>
AsCubebContext
(
)
)
;
MediaTrackGraph
*
g1
=
MediaTrackGraph
:
:
GetInstance
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
nullptr
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
nullptr
)
;
MediaTrackGraph
*
g2
=
MediaTrackGraph
:
:
GetInstance
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
nullptr
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
reinterpret_cast
<
cubeb_devid
>
(
1
)
)
;
MediaTrackGraph
*
g1_2
=
MediaTrackGraph
:
:
GetInstance
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
nullptr
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
nullptr
)
;
MediaTrackGraph
*
g2_2
=
MediaTrackGraph
:
:
GetInstance
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
nullptr
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
reinterpret_cast
<
cubeb_devid
>
(
1
)
)
;
EXPECT_NE
(
g1
g2
)
<
<
"
Different
graphs
have
due
to
different
device
ids
"
;
EXPECT_EQ
(
g1
g1_2
)
<
<
"
Same
graphs
for
same
device
ids
"
;
EXPECT_EQ
(
g2
g2_2
)
<
<
"
Same
graphs
for
same
device
ids
"
;
RefPtr
<
SourceMediaTrack
>
dummySource1
=
g1
-
>
CreateSourceTrack
(
MediaSegment
:
:
AUDIO
)
;
RefPtr
<
SourceMediaTrack
>
dummySource2
=
g2
-
>
CreateSourceTrack
(
MediaSegment
:
:
AUDIO
)
;
dummySource1
-
>
Destroy
(
)
;
dummySource2
-
>
Destroy
(
)
;
}
TEST
(
TestAudioTrackGraph
SetOutputDeviceID
)
{
MockCubeb
*
cubeb
=
new
MockCubeb
(
)
;
CubebUtils
:
:
ForceSetCubebContext
(
cubeb
-
>
AsCubebContext
(
)
)
;
MediaTrackGraph
*
graph
=
MediaTrackGraph
:
:
GetInstance
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
nullptr
MediaTrackGraph
:
:
REQUEST_DEFAULT_SAMPLE_RATE
reinterpret_cast
<
cubeb_devid
>
(
1
)
)
;
EXPECT_EQ
(
cubeb
-
>
GetCurrentOutputDeviceID
(
)
reinterpret_cast
<
cubeb_devid
>
(
-
1
)
)
<
<
"
Initial
state
invalid
output
device
id
"
;
RefPtr
<
SourceMediaTrack
>
dummySource
=
graph
-
>
CreateSourceTrack
(
MediaSegment
:
:
AUDIO
)
;
class
Message
:
public
ControlMessage
{
public
:
explicit
Message
(
MediaTrack
*
aTrack
)
:
ControlMessage
(
aTrack
)
{
}
void
Run
(
)
override
{
MOZ_ASSERT
(
mTrack
-
>
GraphImpl
(
)
-
>
CurrentDriver
(
)
-
>
AsAudioCallbackDriver
(
)
)
;
mGraphStartedPromise
.
Resolve
(
true
__func__
)
;
}
void
RunDuringShutdown
(
)
override
{
Run
(
)
;
}
MozPromiseHolder
<
GenericPromise
>
mGraphStartedPromise
;
}
;
GMPTestMonitor
mon
;
UniquePtr
<
Message
>
message
=
MakeUnique
<
Message
>
(
dummySource
)
;
RefPtr
<
GenericPromise
>
p
=
message
-
>
mGraphStartedPromise
.
Ensure
(
__func__
)
;
p
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
&
mon
cubeb
dummySource
]
(
)
{
EXPECT_EQ
(
cubeb
-
>
GetCurrentOutputDeviceID
(
)
reinterpret_cast
<
cubeb_devid
>
(
1
)
)
<
<
"
After
init
confirm
the
expected
output
device
id
"
;
dummySource
-
>
Destroy
(
)
;
mon
.
SetFinished
(
)
;
}
)
;
dummySource
-
>
GraphImpl
(
)
-
>
AppendMessage
(
std
:
:
move
(
message
)
)
;
mon
.
AwaitFinished
(
)
;
}
