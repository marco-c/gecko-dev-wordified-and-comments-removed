#
include
"
gtest
/
gtest
.
h
"
#
include
"
OpusTrackEncoder
.
h
"
#
include
"
AudioGenerator
.
h
"
#
include
"
AudioSampleFormat
.
h
"
using
namespace
mozilla
;
class
TestOpusTrackEncoder
:
public
OpusTrackEncoder
{
public
:
TestOpusTrackEncoder
(
TrackRate
aTrackRate
MediaQueue
<
EncodedFrame
>
&
aEncodedDataQueue
)
:
OpusTrackEncoder
(
aTrackRate
aEncodedDataQueue
)
{
}
bool
TestOpusRawCreation
(
int
aChannels
)
{
if
(
Init
(
aChannels
)
=
=
NS_OK
)
{
if
(
IsInitialized
(
)
)
{
return
true
;
}
}
return
false
;
}
}
;
static
bool
TestOpusInit
(
int
aChannels
TrackRate
aSamplingRate
)
{
MediaQueue
<
EncodedFrame
>
frames
;
TestOpusTrackEncoder
encoder
(
aSamplingRate
frames
)
;
return
encoder
.
TestOpusRawCreation
(
aChannels
)
;
}
TEST
(
OpusAudioTrackEncoder
InitRaw
)
{
EXPECT_FALSE
(
TestOpusInit
(
0
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
-
1
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
8
+
1
16000
)
)
;
for
(
int
i
=
1
;
i
<
=
8
;
i
+
+
)
{
EXPECT_TRUE
(
TestOpusInit
(
i
16000
)
)
;
}
EXPECT_FALSE
(
TestOpusInit
(
1
0
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
1
-
1
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
2000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
4000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
7999
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
8000
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
192000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
192001
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
200000
)
)
;
}
TEST
(
OpusAudioTrackEncoder
Init
)
{
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
48000
frames
)
;
AudioSegment
segment
;
segment
.
AppendNullData
(
48000
*
100
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
48000
frames
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
48000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
7999
frames
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
7999
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
8000
frames
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
8000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
192001
frames
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
192001
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
192000
frames
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
192000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
48000
frames
)
;
AudioSegment
longSegment
;
longSegment
.
AppendNullData
(
48000
*
10
-
1
)
;
AudioSegment
shortSegment
;
shortSegment
.
AppendNullData
(
1
)
;
encoder
.
TryInit
(
longSegment
longSegment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
shortSegment
shortSegment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
shortSegment
shortSegment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
}
static
int
TestOpusResampler
(
TrackRate
aSamplingRate
)
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
aSamplingRate
frames
)
;
return
encoder
.
mOutputSampleRate
;
}
TEST
(
OpusAudioTrackEncoder
Resample
)
{
EXPECT_TRUE
(
TestOpusResampler
(
8000
)
=
=
8000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
12000
)
=
=
12000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
16000
)
=
=
16000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
24000
)
=
=
24000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
48000
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
9600
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
44100
)
=
=
48000
)
;
}
TEST
(
OpusAudioTrackEncoder
FetchMetadata
)
{
const
int32_t
channels
=
1
;
const
TrackRate
sampleRate
=
44100
;
MediaQueue
<
EncodedFrame
>
frames
;
TestOpusTrackEncoder
encoder
(
sampleRate
frames
)
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
)
)
;
RefPtr
<
TrackMetadataBase
>
metadata
=
encoder
.
GetMetadata
(
)
;
ASSERT_EQ
(
TrackMetadataBase
:
:
METADATA_OPUS
metadata
-
>
GetKind
(
)
)
;
RefPtr
<
OpusMetadata
>
opusMeta
=
static_cast
<
OpusMetadata
*
>
(
metadata
.
get
(
)
)
;
EXPECT_EQ
(
channels
opusMeta
-
>
mChannels
)
;
EXPECT_EQ
(
sampleRate
opusMeta
-
>
mSamplingFrequency
)
;
}
TEST
(
OpusAudioTrackEncoder
FrameEncode
)
{
const
int32_t
channels
=
1
;
const
TrackRate
sampleRate
=
44100
;
MediaQueue
<
EncodedFrame
>
frames
;
TestOpusTrackEncoder
encoder
(
sampleRate
frames
)
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
)
)
;
AudioGenerator
<
AudioDataValue
>
generator
(
channels
sampleRate
)
;
AudioSegment
segment
;
const
int32_t
samples
=
sampleRate
*
5
;
generator
.
Generate
(
segment
samples
)
;
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
encoder
.
NotifyEndOfStream
(
)
;
EXPECT_TRUE
(
encoder
.
IsEncodingComplete
(
)
)
;
EXPECT_TRUE
(
frames
.
IsFinished
(
)
)
;
uint64_t
totalDuration
=
0
;
while
(
RefPtr
<
EncodedFrame
>
frame
=
frames
.
PopFront
(
)
)
{
totalDuration
+
=
frame
-
>
mDuration
;
}
const
uint64_t
five
=
48000
*
5
;
EXPECT_EQ
(
five
+
encoder
.
GetLookahead
(
)
totalDuration
)
;
}
TEST
(
OpusAudioTrackEncoder
DefaultInitDuration
)
{
const
TrackRate
rate
=
44100
;
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
rate
frames
)
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
rate
)
;
AudioSegment
segment
;
for
(
int
i
=
0
;
i
<
150
;
+
+
i
)
{
generator
.
Generate
(
segment
rate
/
10
)
;
}
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
encoder
.
NotifyEndOfStream
(
)
;
EXPECT_TRUE
(
encoder
.
IsEncodingComplete
(
)
)
;
EXPECT_TRUE
(
frames
.
IsFinished
(
)
)
;
uint64_t
totalDuration
=
0
;
while
(
RefPtr
<
EncodedFrame
>
frame
=
frames
.
PopFront
(
)
)
{
totalDuration
+
=
frame
-
>
mDuration
;
}
const
uint64_t
fifteen
=
48000
*
15
;
EXPECT_EQ
(
totalDuration
fifteen
+
encoder
.
GetLookahead
(
)
)
;
}
uint64_t
TestSampleRate
(
TrackRate
aSampleRate
uint64_t
aInputFrames
)
{
MediaQueue
<
EncodedFrame
>
frames
;
OpusTrackEncoder
encoder
(
aSampleRate
frames
)
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
aSampleRate
)
;
AudioSegment
segment
;
const
uint64_t
chunkSize
=
aSampleRate
/
10
;
const
uint64_t
chunks
=
aInputFrames
/
chunkSize
;
for
(
size_t
i
=
0
;
i
<
chunks
;
+
+
i
)
{
generator
.
Generate
(
segment
chunkSize
)
;
}
generator
.
Generate
(
segment
aInputFrames
%
chunks
)
;
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
encoder
.
NotifyEndOfStream
(
)
;
EXPECT_TRUE
(
encoder
.
IsEncodingComplete
(
)
)
;
EXPECT_TRUE
(
frames
.
IsFinished
(
)
)
;
uint64_t
totalDuration
=
0
;
while
(
RefPtr
<
EncodedFrame
>
frame
=
frames
.
PopFront
(
)
)
{
totalDuration
+
=
frame
-
>
mDuration
;
}
return
totalDuration
-
encoder
.
GetLookahead
(
)
;
}
TEST
(
OpusAudioTrackEncoder
DurationSampleRates
)
{
EXPECT_EQ
(
TestSampleRate
(
48000
48000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
24000
24000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
16000
16000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
12000
12000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
8000
8000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
44100
44100
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
32000
32000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
96000
96000
*
3
/
2
)
48000U
*
3
/
2
)
;
EXPECT_EQ
(
TestSampleRate
(
33330
33330
*
3
/
2
)
48000U
*
3
/
2
)
;
}
