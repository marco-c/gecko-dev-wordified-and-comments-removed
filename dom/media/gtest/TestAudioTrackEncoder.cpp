#
include
"
gtest
/
gtest
.
h
"
#
include
"
OpusTrackEncoder
.
h
"
#
include
"
SineWaveGenerator
.
h
"
using
namespace
mozilla
;
class
AudioGenerator
{
public
:
AudioGenerator
(
int32_t
aChannels
int32_t
aSampleRate
)
:
mGenerator
(
aSampleRate
1000
)
mChannels
(
aChannels
)
{
}
void
Generate
(
AudioSegment
&
aSegment
const
int32_t
&
aSamples
)
{
RefPtr
<
SharedBuffer
>
buffer
=
SharedBuffer
:
:
Create
(
aSamples
*
sizeof
(
int16_t
)
)
;
int16_t
*
dest
=
static_cast
<
int16_t
*
>
(
buffer
-
>
Data
(
)
)
;
mGenerator
.
generate
(
dest
aSamples
)
;
AutoTArray
<
const
int16_t
*
1
>
channels
;
for
(
int32_t
i
=
0
;
i
<
mChannels
;
i
+
+
)
{
channels
.
AppendElement
(
dest
)
;
}
aSegment
.
AppendFrames
(
buffer
.
forget
(
)
channels
aSamples
PRINCIPAL_HANDLE_NONE
)
;
}
private
:
SineWaveGenerator
mGenerator
;
const
int32_t
mChannels
;
}
;
class
TestOpusTrackEncoder
:
public
OpusTrackEncoder
{
public
:
TestOpusTrackEncoder
(
)
:
OpusTrackEncoder
(
90000
)
{
}
bool
TestOpusRawCreation
(
int
aChannels
int
aSamplingRate
)
{
if
(
Init
(
aChannels
aSamplingRate
)
=
=
NS_OK
)
{
if
(
IsInitialized
(
)
)
{
return
true
;
}
}
return
false
;
}
int
TestGetOutputSampleRate
(
)
{
return
mInitialized
?
GetOutputSampleRate
(
)
:
0
;
}
}
;
static
bool
TestOpusInit
(
int
aChannels
int
aSamplingRate
)
{
TestOpusTrackEncoder
encoder
;
return
encoder
.
TestOpusRawCreation
(
aChannels
aSamplingRate
)
;
}
TEST
(
OpusAudioTrackEncoder
InitRaw
)
{
EXPECT_FALSE
(
TestOpusInit
(
0
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
-
1
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
8
+
1
16000
)
)
;
for
(
int
i
=
1
;
i
<
=
8
;
i
+
+
)
{
EXPECT_TRUE
(
TestOpusInit
(
i
16000
)
)
;
}
EXPECT_FALSE
(
TestOpusInit
(
1
0
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
1
-
1
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
2000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
4000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
7999
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
8000
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
192000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
192001
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
200000
)
)
;
}
TEST
(
OpusAudioTrackEncoder
Init
)
{
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
segment
;
segment
.
AppendNullData
(
48000
*
100
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
segment
;
segment
.
AppendNullData
(
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
segment
;
AudioGenerator
generator
(
2
48000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
7999
)
;
AudioSegment
segment
;
AudioGenerator
generator
(
2
7999
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
8000
)
;
AudioSegment
segment
;
AudioGenerator
generator
(
2
8000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
192001
)
;
AudioSegment
segment
;
AudioGenerator
generator
(
2
192001
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
192000
)
;
AudioSegment
segment
;
AudioGenerator
generator
(
2
192000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
}
static
int
TestOpusResampler
(
int
aChannels
int
aSamplingRate
)
{
TestOpusTrackEncoder
encoder
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
aChannels
aSamplingRate
)
)
;
return
encoder
.
TestGetOutputSampleRate
(
)
;
}
TEST
(
OpusAudioTrackEncoder
Resample
)
{
EXPECT_TRUE
(
TestOpusResampler
(
1
8000
)
=
=
8000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
12000
)
=
=
12000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
16000
)
=
=
16000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
24000
)
=
=
24000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
48000
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
9600
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
44100
)
=
=
48000
)
;
}
TEST
(
OpusAudioTrackEncoder
FetchMetadata
)
{
const
int32_t
channels
=
1
;
const
int32_t
sampleRate
=
44100
;
TestOpusTrackEncoder
encoder
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
sampleRate
)
)
;
RefPtr
<
TrackMetadataBase
>
metadata
=
encoder
.
GetMetadata
(
)
;
ASSERT_EQ
(
TrackMetadataBase
:
:
METADATA_OPUS
metadata
-
>
GetKind
(
)
)
;
RefPtr
<
OpusMetadata
>
opusMeta
=
static_cast
<
OpusMetadata
*
>
(
metadata
.
get
(
)
)
;
EXPECT_EQ
(
channels
opusMeta
-
>
mChannels
)
;
EXPECT_EQ
(
sampleRate
opusMeta
-
>
mSamplingFrequency
)
;
}
TEST
(
OpusAudioTrackEncoder
FrameEncode
)
{
const
int32_t
channels
=
1
;
const
int32_t
sampleRate
=
44100
;
TestOpusTrackEncoder
encoder
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
sampleRate
)
)
;
AudioGenerator
generator
(
channels
sampleRate
)
;
AudioSegment
segment
;
const
int32_t
samples
=
sampleRate
*
5
;
generator
.
Generate
(
segment
samples
)
;
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
EncodedFrameContainer
container
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
encoder
.
GetEncodedTrack
(
container
)
)
)
;
uint64_t
totalDuration
=
0
;
for
(
auto
&
frame
:
container
.
GetEncodedFrames
(
)
)
{
totalDuration
+
=
frame
-
>
GetDuration
(
)
;
}
const
uint64_t
five
=
48000
*
5
;
EXPECT_EQ
(
five
totalDuration
)
;
}
