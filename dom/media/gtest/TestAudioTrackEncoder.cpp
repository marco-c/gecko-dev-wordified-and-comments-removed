#
include
"
gtest
/
gtest
.
h
"
#
include
"
OpusTrackEncoder
.
h
"
#
include
"
AudioGenerator
.
h
"
#
include
"
AudioSampleFormat
.
h
"
using
namespace
mozilla
;
class
TestOpusTrackEncoder
:
public
OpusTrackEncoder
{
public
:
explicit
TestOpusTrackEncoder
(
TrackRate
aTrackRate
)
:
OpusTrackEncoder
(
aTrackRate
)
{
}
bool
TestOpusRawCreation
(
int
aChannels
)
{
if
(
Init
(
aChannels
)
=
=
NS_OK
)
{
if
(
IsInitialized
(
)
)
{
return
true
;
}
}
return
false
;
}
int
TestGetOutputSampleRate
(
)
{
return
mInitialized
?
GetOutputSampleRate
(
)
:
0
;
}
}
;
static
bool
TestOpusInit
(
int
aChannels
TrackRate
aSamplingRate
)
{
TestOpusTrackEncoder
encoder
(
aSamplingRate
)
;
return
encoder
.
TestOpusRawCreation
(
aChannels
)
;
}
TEST
(
OpusAudioTrackEncoder
InitRaw
)
{
EXPECT_FALSE
(
TestOpusInit
(
0
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
-
1
16000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
8
+
1
16000
)
)
;
for
(
int
i
=
1
;
i
<
=
8
;
i
+
+
)
{
EXPECT_TRUE
(
TestOpusInit
(
i
16000
)
)
;
}
EXPECT_FALSE
(
TestOpusInit
(
1
0
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
1
-
1
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
2000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
4000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
7999
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
8000
)
)
;
EXPECT_TRUE
(
TestOpusInit
(
2
192000
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
192001
)
)
;
EXPECT_FALSE
(
TestOpusInit
(
2
200000
)
)
;
}
TEST
(
OpusAudioTrackEncoder
Init
)
{
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
segment
;
segment
.
AppendNullData
(
48000
*
100
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
48000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
7999
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
7999
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
8000
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
8000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
192001
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
192001
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
192000
)
;
AudioSegment
segment
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
192000
)
;
generator
.
Generate
(
segment
1
)
;
encoder
.
TryInit
(
segment
segment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
{
OpusTrackEncoder
encoder
(
48000
)
;
AudioSegment
longSegment
;
longSegment
.
AppendNullData
(
48000
*
10
-
1
)
;
AudioSegment
shortSegment
;
shortSegment
.
AppendNullData
(
1
)
;
encoder
.
TryInit
(
longSegment
longSegment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
shortSegment
shortSegment
.
GetDuration
(
)
)
;
EXPECT_FALSE
(
encoder
.
IsInitialized
(
)
)
;
encoder
.
TryInit
(
shortSegment
shortSegment
.
GetDuration
(
)
)
;
EXPECT_TRUE
(
encoder
.
IsInitialized
(
)
)
;
}
}
static
int
TestOpusResampler
(
int
aChannels
TrackRate
aTrackRate
)
{
TestOpusTrackEncoder
encoder
(
aTrackRate
)
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
aChannels
)
)
;
return
encoder
.
TestGetOutputSampleRate
(
)
;
}
TEST
(
OpusAudioTrackEncoder
Resample
)
{
EXPECT_TRUE
(
TestOpusResampler
(
1
8000
)
=
=
8000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
12000
)
=
=
12000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
16000
)
=
=
16000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
24000
)
=
=
24000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
48000
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
9600
)
=
=
48000
)
;
EXPECT_TRUE
(
TestOpusResampler
(
1
44100
)
=
=
48000
)
;
}
TEST
(
OpusAudioTrackEncoder
FetchMetadata
)
{
const
int32_t
channels
=
1
;
const
TrackRate
sampleRate
=
44100
;
TestOpusTrackEncoder
encoder
(
sampleRate
)
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
)
)
;
RefPtr
<
TrackMetadataBase
>
metadata
=
encoder
.
GetMetadata
(
)
;
ASSERT_EQ
(
TrackMetadataBase
:
:
METADATA_OPUS
metadata
-
>
GetKind
(
)
)
;
RefPtr
<
OpusMetadata
>
opusMeta
=
static_cast
<
OpusMetadata
*
>
(
metadata
.
get
(
)
)
;
EXPECT_EQ
(
channels
opusMeta
-
>
mChannels
)
;
EXPECT_EQ
(
sampleRate
opusMeta
-
>
mSamplingFrequency
)
;
}
TEST
(
OpusAudioTrackEncoder
FrameEncode
)
{
const
int32_t
channels
=
1
;
const
TrackRate
sampleRate
=
44100
;
TestOpusTrackEncoder
encoder
(
sampleRate
)
;
EXPECT_TRUE
(
encoder
.
TestOpusRawCreation
(
channels
)
)
;
AudioGenerator
<
AudioDataValue
>
generator
(
channels
sampleRate
)
;
AudioSegment
segment
;
const
int32_t
samples
=
sampleRate
*
5
;
generator
.
Generate
(
segment
samples
)
;
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
nsTArray
<
RefPtr
<
EncodedFrame
>
>
frames
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
encoder
.
GetEncodedTrack
(
frames
)
)
)
;
uint64_t
totalDuration
=
0
;
for
(
auto
&
frame
:
frames
)
{
totalDuration
+
=
frame
-
>
mDuration
;
}
const
uint64_t
five
=
48000
*
5
;
EXPECT_EQ
(
five
totalDuration
)
;
}
TEST
(
OpusAudioTrackEncoder
DefaultInitDuration
)
{
const
TrackRate
rate
=
44100
;
OpusTrackEncoder
encoder
(
rate
)
;
AudioGenerator
<
AudioDataValue
>
generator
(
2
rate
)
;
AudioSegment
segment
;
for
(
int
i
=
0
;
i
<
150
;
+
+
i
)
{
generator
.
Generate
(
segment
rate
/
10
)
;
}
encoder
.
AppendAudioSegment
(
std
:
:
move
(
segment
)
)
;
encoder
.
NotifyEndOfStream
(
)
;
nsTArray
<
RefPtr
<
EncodedFrame
>
>
frames
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
encoder
.
GetEncodedTrack
(
frames
)
)
)
;
uint64_t
totalDuration
=
0
;
for
(
auto
&
frame
:
frames
)
{
totalDuration
+
=
frame
-
>
mDuration
;
}
const
uint64_t
fifteen
=
48000
*
15
;
EXPECT_EQ
(
totalDuration
fifteen
+
encoder
.
GetLookahead
(
)
)
;
}
