#
ifndef
WAITFOR_H_
#
define
WAITFOR_H_
#
include
"
MediaEventSource
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
namespace
mozilla
{
template
<
typename
T
>
T
WaitFor
(
MediaEventSource
<
T
>
&
aEvent
)
{
Maybe
<
T
>
value
;
MediaEventListener
listener
=
aEvent
.
Connect
(
AbstractThread
:
:
GetCurrent
(
)
[
&
]
(
T
aValue
)
{
value
=
Some
(
aValue
)
;
}
)
;
SpinEventLoopUntil
<
ProcessFailureBehavior
:
:
IgnoreAndContinue
>
(
"
WaitFor
(
MediaEventSource
<
T
>
&
aEvent
)
"
_ns
[
&
]
{
return
value
.
isSome
(
)
;
}
)
;
listener
.
Disconnect
(
)
;
return
value
.
value
(
)
;
}
void
WaitFor
(
MediaEventSource
<
void
>
&
aEvent
)
;
template
<
typename
R
typename
E
bool
Exc
>
Result
<
R
E
>
WaitFor
(
const
RefPtr
<
MozPromise
<
R
E
Exc
>
>
&
aPromise
)
{
Maybe
<
R
>
success
;
Maybe
<
E
>
error
;
aPromise
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
]
(
R
aResult
)
{
success
=
Some
(
aResult
)
;
}
[
&
]
(
E
aError
)
{
error
=
Some
(
aError
)
;
}
)
;
SpinEventLoopUntil
<
ProcessFailureBehavior
:
:
IgnoreAndContinue
>
(
"
WaitFor
(
const
RefPtr
<
MozPromise
<
R
E
Exc
>
>
&
aPromise
)
"
_ns
[
&
]
{
return
success
.
isSome
(
)
|
|
error
.
isSome
(
)
;
}
)
;
if
(
success
.
isSome
(
)
)
{
return
success
.
extract
(
)
;
}
return
Err
(
error
.
extract
(
)
)
;
}
template
<
typename
T
typename
CallbackFunction
>
void
WaitUntil
(
MediaEventSource
<
T
>
&
aEvent
const
CallbackFunction
&
aF
)
{
bool
done
=
false
;
MediaEventListener
listener
=
aEvent
.
Connect
(
AbstractThread
:
:
GetCurrent
(
)
[
&
]
(
T
aValue
)
{
if
(
!
done
)
{
done
=
aF
(
aValue
)
;
}
}
)
;
SpinEventLoopUntil
<
ProcessFailureBehavior
:
:
IgnoreAndContinue
>
(
"
WaitUntil
(
MediaEventSource
<
T
>
&
aEvent
const
CallbackFunction
&
aF
)
"
_ns
[
&
]
{
return
done
;
}
)
;
listener
.
Disconnect
(
)
;
}
inline
void
WaitForMirrors
(
const
RefPtr
<
nsISerialEventTarget
>
&
aTarget
)
{
Unused
<
<
WaitFor
(
InvokeAsync
(
aTarget
__func__
[
]
{
return
GenericPromise
:
:
CreateAndResolve
(
true
"
WaitForMirrors
resolver
"
)
;
}
)
)
;
}
inline
void
WaitForMirrors
(
)
{
WaitForMirrors
(
GetCurrentSerialEventTarget
(
)
)
;
}
}
#
endif
