#
include
"
gtest
/
gtest
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
<
algorithm
>
#
include
<
vector
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
media
;
TEST
(
TimeUnit
Rounding
)
{
int64_t
usecs
=
66261715
;
double
seconds
=
media
:
:
TimeUnit
:
:
FromMicroseconds
(
usecs
)
.
ToSeconds
(
)
;
EXPECT_EQ
(
media
:
:
TimeUnit
:
:
FromSeconds
(
seconds
)
.
ToMicroseconds
(
)
usecs
)
;
seconds
=
4
.
169470
;
usecs
=
4169470
;
EXPECT_EQ
(
media
:
:
TimeUnit
:
:
FromSeconds
(
seconds
)
.
ToMicroseconds
(
)
usecs
)
;
}
TEST
(
TimeUnit
InfinityMath
)
{
const
TimeUnit
posInf
=
TimeUnit
:
:
FromInfinity
(
)
;
EXPECT_EQ
(
TimeUnit
:
:
FromSeconds
(
mozilla
:
:
PositiveInfinity
<
double
>
(
)
)
posInf
)
;
const
TimeUnit
negInf
=
TimeUnit
:
:
FromNegativeInfinity
(
)
;
EXPECT_EQ
(
TimeUnit
:
:
FromSeconds
(
mozilla
:
:
NegativeInfinity
<
double
>
(
)
)
negInf
)
;
EXPECT_EQ
(
posInf
+
posInf
posInf
)
;
EXPECT_FALSE
(
(
posInf
+
negInf
)
.
IsValid
(
)
)
;
EXPECT_FALSE
(
(
posInf
-
posInf
)
.
IsValid
(
)
)
;
EXPECT_EQ
(
posInf
-
negInf
posInf
)
;
EXPECT_EQ
(
negInf
+
negInf
negInf
)
;
EXPECT_FALSE
(
(
negInf
+
posInf
)
.
IsValid
(
)
)
;
EXPECT_FALSE
(
(
negInf
-
negInf
)
.
IsValid
(
)
)
;
EXPECT_EQ
(
negInf
-
posInf
negInf
)
;
const
TimeUnit
finite
=
TimeUnit
:
:
FromSeconds
(
42
.
0
)
;
EXPECT_EQ
(
posInf
-
finite
posInf
)
;
EXPECT_EQ
(
posInf
+
finite
posInf
)
;
EXPECT_EQ
(
negInf
-
finite
negInf
)
;
EXPECT_EQ
(
negInf
+
finite
negInf
)
;
EXPECT_EQ
(
finite
+
posInf
posInf
)
;
EXPECT_EQ
(
finite
-
posInf
negInf
)
;
EXPECT_EQ
(
finite
+
negInf
negInf
)
;
EXPECT_EQ
(
finite
-
negInf
posInf
)
;
}
