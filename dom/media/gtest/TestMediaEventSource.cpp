#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
VideoUtils
.
h
"
using
namespace
mozilla
;
TEST
(
MediaEventSource
SingleListener
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
SingleListener
"
)
;
MediaEventProducer
<
int
>
source
;
int
i
=
0
;
auto
func
=
[
&
]
(
int
j
)
{
i
+
=
j
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
3
)
;
source
.
Notify
(
5
)
;
source
.
Notify
(
7
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
15
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MultiListener
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MultiListener
"
)
;
MediaEventProducer
<
int
>
source
;
int
i
=
0
;
int
j
=
0
;
auto
func1
=
[
&
]
(
int
k
)
{
i
=
k
*
2
;
}
;
auto
func2
=
[
&
]
(
int
k
)
{
j
=
k
*
3
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
22
)
;
EXPECT_EQ
(
j
33
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
DisconnectAfterNotification
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectAfterNotification
"
)
;
MediaEventProducer
<
int
>
source
;
int
i
=
0
;
MediaEventListener
listener
;
auto
func
=
[
&
]
(
int
j
)
{
i
+
=
j
;
listener
.
Disconnect
(
)
;
}
;
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
11
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
11
)
;
}
TEST
(
MediaEventSource
DisconnectBeforeNotification
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectBeforeNotification
"
)
;
MediaEventProducer
<
int
>
source
;
int
i
=
0
;
int
j
=
0
;
auto
func1
=
[
&
]
(
int
k
)
{
i
=
k
*
2
;
}
;
auto
func2
=
[
&
]
(
int
k
)
{
j
=
k
*
3
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
listener2
.
Disconnect
(
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
22
)
;
EXPECT_EQ
(
j
0
)
;
listener1
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
DisconnectAndConnect
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectAndConnect
"
)
;
MediaEventProducerExc
<
int
>
source
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
]
(
)
{
}
)
;
listener
.
Disconnect
(
)
;
listener
=
source
.
Connect
(
queue
[
]
(
)
{
}
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
VoidEventType
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
VoidEventType
"
)
;
MediaEventProducer
<
void
>
source
;
int
i
=
0
;
auto
func
=
[
&
]
(
)
{
+
+
i
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
struct
Foo
{
Foo
(
)
:
j
(
1
)
{
}
void
OnNotify
(
)
{
j
*
=
2
;
}
int
j
;
}
foo
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
)
;
source
.
Notify
(
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
2
)
;
EXPECT_EQ
(
foo
.
j
4
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ListenerType1
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ListenerType1
"
)
;
MediaEventProducer
<
int
>
source
;
int
i
=
0
;
auto
func1
=
[
&
]
(
int
&
&
j
)
{
i
+
=
j
;
}
;
auto
func2
=
[
&
]
(
const
int
&
j
)
{
i
+
=
j
;
}
;
auto
func3
=
[
&
]
(
)
{
i
+
=
1
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue
func3
)
;
source
.
Notify
(
1
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
3
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ListenerType2
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ListenerType2
"
)
;
MediaEventProducer
<
int
>
source
;
struct
Foo
{
Foo
(
)
:
mInt
(
0
)
{
}
void
OnNotify1
(
int
&
&
i
)
{
mInt
+
=
i
;
}
void
OnNotify2
(
const
int
&
i
)
{
mInt
+
=
i
;
}
void
OnNotify3
(
)
{
mInt
+
=
1
;
}
void
OnNotify4
(
int
i
)
const
{
mInt
+
=
i
;
}
void
OnNotify5
(
int
i
)
volatile
{
mInt
=
mInt
+
i
;
}
mutable
int
mInt
;
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify2
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify3
)
;
MediaEventListener
listener4
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify4
)
;
MediaEventListener
listener5
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify5
)
;
source
.
Notify
(
1
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
foo
.
mInt
5
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
listener4
.
Disconnect
(
)
;
listener5
.
Disconnect
(
)
;
}
struct
SomeEvent
{
explicit
SomeEvent
(
int
&
aCount
)
:
mCount
(
aCount
)
{
}
SomeEvent
(
const
SomeEvent
&
aOther
)
:
mCount
(
aOther
.
mCount
)
{
+
+
mCount
;
}
SomeEvent
(
SomeEvent
&
&
aOther
)
:
mCount
(
aOther
.
mCount
)
{
}
int
&
mCount
;
}
;
TEST
(
MediaEventSource
CopyEvent1
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
CopyEvent1
"
)
;
MediaEventProducer
<
SomeEvent
>
source
;
int
i
=
0
;
auto
func
=
[
]
(
SomeEvent
&
&
aEvent
)
{
}
;
struct
Foo
{
void
OnNotify
(
SomeEvent
&
&
aEvent
)
{
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
i
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
2
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
CopyEvent2
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
CopyEvent2
"
)
;
MediaEventProducer
<
SomeEvent
>
source
;
int
i
=
0
;
auto
func
=
[
]
(
)
{
}
;
struct
Foo
{
void
OnNotify
(
)
{
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
i
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
i
0
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MoveOnly
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MoveOnly
"
)
;
MediaEventProducerExc
<
UniquePtr
<
int
>
>
source
;
auto
func
=
[
]
(
UniquePtr
<
int
>
&
&
aEvent
)
{
EXPECT_EQ
(
*
aEvent
20
)
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
UniquePtr
<
int
>
(
new
int
(
20
)
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
listener
.
Disconnect
(
)
;
}
struct
RefCounter
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefCounter
)
explicit
RefCounter
(
int
aVal
)
:
mVal
(
aVal
)
{
}
int
mVal
;
private
:
~
RefCounter
(
)
=
default
;
}
;
TEST
(
MediaEventSource
NoMove
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
NoMove
"
)
;
MediaEventProducer
<
RefPtr
<
RefCounter
>
>
source
;
auto
func1
=
[
]
(
RefPtr
<
RefCounter
>
&
&
aEvent
)
{
EXPECT_EQ
(
aEvent
-
>
mVal
20
)
;
}
;
auto
func2
=
[
]
(
RefPtr
<
RefCounter
>
&
&
aEvent
)
{
EXPECT_EQ
(
aEvent
-
>
mVal
20
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
RefPtr
<
RefCounter
>
val
=
new
RefCounter
(
20
)
;
source
.
Notify
(
std
:
:
move
(
val
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MoveLambda
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MoveLambda
"
)
;
MediaEventProducer
<
void
>
source
;
int
counter
=
0
;
SomeEvent
someEvent
(
counter
)
;
auto
func
=
[
someEvent
]
(
)
{
}
;
EXPECT_EQ
(
someEvent
.
mCount
1
)
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
EXPECT_EQ
(
someEvent
.
mCount
2
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
std
:
:
move
(
func
)
)
;
EXPECT_EQ
(
someEvent
.
mCount
2
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
template
<
typename
Bool
>
struct
DestroyChecker
{
explicit
DestroyChecker
(
Bool
*
aIsDestroyed
)
:
mIsDestroyed
(
aIsDestroyed
)
{
EXPECT_FALSE
(
*
mIsDestroyed
)
;
}
~
DestroyChecker
(
)
{
EXPECT_FALSE
(
*
mIsDestroyed
)
;
*
mIsDestroyed
=
true
;
}
private
:
Bool
*
const
mIsDestroyed
;
}
;
class
ClassForDestroyCheck
final
:
private
DestroyChecker
<
bool
>
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ClassForDestroyCheck
)
;
explicit
ClassForDestroyCheck
(
bool
*
aIsDestroyed
)
:
DestroyChecker
(
aIsDestroyed
)
{
}
int32_t
RefCountNums
(
)
const
{
return
mRefCnt
;
}
protected
:
~
ClassForDestroyCheck
(
)
=
default
;
}
;
TEST
(
MediaEventSource
ResetFuncReferenceAfterDisconnect
)
{
const
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ResetFuncReferenceAfterDisconnect
"
)
;
MediaEventProducer
<
void
>
source
;
bool
isDestroyed
=
false
;
auto
object
=
MakeRefPtr
<
ClassForDestroyCheck
>
(
&
isDestroyed
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
1
)
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
ptr
=
object
]
{
}
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
2
)
;
listener
.
Disconnect
(
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
1
)
;
object
=
nullptr
;
EXPECT_TRUE
(
isDestroyed
)
;
}
TEST
(
MediaEventSource
ResetTargetAfterDisconnect
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ResetTargetAfterDisconnect
"
)
;
MediaEventProducer
<
void
>
source
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
]
{
}
)
;
listener
.
Disconnect
(
)
;
queue
-
>
AwaitIdle
(
)
;
EXPECT_EQ
(
queue
.
forget
(
)
.
take
(
)
-
>
Release
(
)
0u
)
;
}
