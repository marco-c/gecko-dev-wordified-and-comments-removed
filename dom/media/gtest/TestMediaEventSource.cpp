#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
gmock
/
gmock
-
matchers
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
<
memory
>
#
include
<
type_traits
>
using
namespace
mozilla
;
using
testing
:
:
InSequence
;
using
testing
:
:
MockFunction
;
using
testing
:
:
StrEq
;
TEST
(
MediaEventSource
SingleListener
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
SingleListener
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
&
]
(
int
j
)
{
callbackLog
.
push_back
(
j
)
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
3
)
;
source
.
Notify
(
5
)
;
source
.
Notify
(
7
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
3
5
7
)
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MultiListener
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MultiListener
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func1
=
[
&
]
(
int
k
)
{
callbackLog
.
push_back
(
k
*
2
)
;
}
;
auto
func2
=
[
&
]
(
int
k
)
{
callbackLog
.
push_back
(
k
*
3
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
22
33
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
DisconnectAfterNotification
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectAfterNotification
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
MediaEventListener
listener
;
auto
func
=
[
&
]
(
int
j
)
{
callbackLog
.
push_back
(
j
)
;
listener
.
Disconnect
(
)
;
}
;
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
11
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
11
)
)
;
}
TEST
(
MediaEventSource
DisconnectBeforeNotification
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectBeforeNotification
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func1
=
[
&
]
(
int
k
)
{
callbackLog
.
push_back
(
k
*
2
)
;
}
;
auto
func2
=
[
&
]
(
int
k
)
{
callbackLog
.
push_back
(
k
*
3
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
listener2
.
Disconnect
(
)
;
source
.
Notify
(
11
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
22
)
)
;
listener1
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
DisconnectAndConnect
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
DisconnectAndConnect
"
)
;
MediaEventProducerExc
<
int
>
source
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
]
(
)
{
}
)
;
listener
.
Disconnect
(
)
;
listener
=
source
.
Connect
(
queue
[
]
(
)
{
}
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
VoidEventType
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
VoidEventType
"
)
;
MediaEventProducer
<
void
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
&
]
(
)
{
callbackLog
.
push_back
(
1
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
struct
Foo
{
Foo
(
)
{
}
void
OnNotify
(
)
{
callbackLog
.
push_back
(
2
)
;
}
}
foo
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
)
;
source
.
Notify
(
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
1
2
1
2
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ListenerType1
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ListenerType1
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func1
=
[
&
]
(
int
j
)
{
callbackLog
.
push_back
(
1
)
;
}
;
auto
func2
=
[
&
]
(
const
int
&
j
)
{
callbackLog
.
push_back
(
2
)
;
}
;
auto
func3
=
[
&
]
(
)
{
callbackLog
.
push_back
(
3
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue
func3
)
;
source
.
Notify
(
1
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
1
2
3
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ListenerType2
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ListenerType2
"
)
;
MediaEventProducer
<
int
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
struct
Foo
{
void
OnNotify1
(
const
int
&
i
)
{
callbackLog
.
push_back
(
1
)
;
}
void
OnNotify2
(
)
{
callbackLog
.
push_back
(
2
)
;
}
void
OnNotify3
(
int
i
)
const
{
callbackLog
.
push_back
(
3
)
;
}
void
OnNotify4
(
int
i
)
volatile
{
callbackLog
.
push_back
(
4
)
;
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify2
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify3
)
;
MediaEventListener
listener4
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify4
)
;
source
.
Notify
(
1
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
1
2
3
4
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
listener4
.
Disconnect
(
)
;
}
struct
SomeEvent
{
explicit
SomeEvent
(
int
&
aCount
)
:
mCount
(
aCount
)
{
}
SomeEvent
(
const
SomeEvent
&
aOther
)
:
mCount
(
aOther
.
mCount
)
{
+
+
mCount
;
}
SomeEvent
(
SomeEvent
&
&
aOther
)
:
mCount
(
aOther
.
mCount
)
{
}
int
&
mCount
;
}
;
TEST
(
MediaEventSource
ZeroCopyNonExclusiveOneTarget
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyNonExclusiveOneTarget
"
)
;
MediaEventProducer
<
SomeEvent
>
source
;
int
copies
=
0
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
]
(
)
{
callbackLog
.
push_back
(
1
)
;
}
;
struct
Foo
{
void
OnNotify
(
)
{
callbackLog
.
push_back
(
2
)
;
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
copies
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
0
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
1
2
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ZeroCopyNonExclusiveTwoTarget
)
{
RefPtr
<
TaskQueue
>
queue1
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyNonExclusiveTwoTarget
(
first
)
"
)
;
RefPtr
<
TaskQueue
>
queue2
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyNonExclusiveTwoTarget
(
second
)
"
)
;
MediaEventProducer
<
SomeEvent
>
source
;
int
copies
=
0
;
static
std
:
:
vector
<
int
>
callbackLog1
;
callbackLog1
.
clear
(
)
;
static
std
:
:
vector
<
int
>
callbackLog2
;
callbackLog2
.
clear
(
)
;
auto
func1
=
[
]
(
)
{
callbackLog1
.
push_back
(
1
)
;
}
;
struct
Foo1
{
void
OnNotify
(
)
{
callbackLog1
.
push_back
(
2
)
;
}
}
foo1
;
auto
func2
=
[
]
(
)
{
callbackLog2
.
push_back
(
1
)
;
}
;
struct
Foo2
{
void
OnNotify
(
)
{
callbackLog2
.
push_back
(
2
)
;
}
}
foo2
;
MediaEventListener
listener1
=
source
.
Connect
(
queue1
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue1
&
foo1
&
Foo1
:
:
OnNotify
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue2
func2
)
;
MediaEventListener
listener4
=
source
.
Connect
(
queue2
&
foo2
&
Foo2
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
copies
)
)
;
queue1
-
>
BeginShutdown
(
)
;
queue1
-
>
AwaitShutdownAndIdle
(
)
;
queue2
-
>
BeginShutdown
(
)
;
queue2
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
0
)
;
EXPECT_THAT
(
callbackLog1
testing
:
:
ElementsAre
(
1
2
)
)
;
EXPECT_THAT
(
callbackLog2
testing
:
:
ElementsAre
(
1
2
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
listener4
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ZeroCopyOneCopyPerThreadOneTarget
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyOneCopyPerThreadOneTarget
"
)
;
MediaEventProducerOneCopyPerThread
<
SomeEvent
>
source
;
int
copies
=
0
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
]
(
)
{
callbackLog
.
push_back
(
1
)
;
}
;
struct
Foo
{
void
OnNotify
(
)
{
callbackLog
.
push_back
(
2
)
;
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
copies
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
0
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
1
2
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ZeroCopyOneCopyPerThreadNoArglessCopy
)
{
RefPtr
<
TaskQueue
>
queue1
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyOneCopyPerThreadNoArglessCopy
(
first
)
"
)
;
RefPtr
<
TaskQueue
>
queue2
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ZeroCopyOneCopyPerThreadNoArglessCopy
(
second
)
"
)
;
MediaEventProducerOneCopyPerThread
<
SomeEvent
>
source
;
int
copies
=
0
;
auto
arglessFunc
=
[
]
(
)
{
}
;
auto
func
=
[
]
(
SomeEvent
&
aEvent
)
{
}
;
auto
func2
=
[
]
(
const
SomeEvent
&
aEvent
)
{
}
;
struct
Foo
{
void
OnNotify
(
SomeEvent
&
aEvent
)
{
}
void
OnNotify2
(
const
SomeEvent
&
aEvent
)
{
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue1
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue1
&
foo
&
Foo
:
:
OnNotify
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue1
func2
)
;
MediaEventListener
listener4
=
source
.
Connect
(
queue1
&
foo
&
Foo
:
:
OnNotify2
)
;
MediaEventListener
listener5
=
source
.
Connect
(
queue2
arglessFunc
)
;
source
.
Notify
(
SomeEvent
(
copies
)
)
;
queue1
-
>
BeginShutdown
(
)
;
queue1
-
>
AwaitShutdownAndIdle
(
)
;
queue2
-
>
BeginShutdown
(
)
;
queue2
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
0
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
listener4
.
Disconnect
(
)
;
listener5
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
CopyForAdditionalTargets
)
{
RefPtr
<
TaskQueue
>
queue1
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
CopyForAdditionalTargets
(
first
)
"
)
;
RefPtr
<
TaskQueue
>
queue2
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
CopyForAdditionalTargets
(
second
)
"
)
;
MediaEventProducerOneCopyPerThread
<
SomeEvent
>
source
;
int
copies
=
0
;
static
std
:
:
vector
<
int
>
callbackLog1
;
callbackLog1
.
clear
(
)
;
auto
func1
=
[
]
(
SomeEvent
&
aEvent
)
{
callbackLog1
.
push_back
(
0
)
;
}
;
struct
Foo1
{
void
OnNotify
(
SomeEvent
&
aEvent
)
{
callbackLog1
.
push_back
(
1
)
;
}
}
foo1
;
static
std
:
:
vector
<
int
>
callbackLog2
;
callbackLog2
.
clear
(
)
;
auto
func2
=
[
]
(
const
SomeEvent
&
aEvent
)
{
callbackLog2
.
push_back
(
0
)
;
}
;
struct
Foo2
{
void
OnNotify
(
const
SomeEvent
&
aEvent
)
{
callbackLog2
.
push_back
(
1
)
;
}
}
foo2
;
MediaEventListener
listener1
=
source
.
Connect
(
queue1
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue1
&
foo1
&
Foo1
:
:
OnNotify
)
;
MediaEventListener
listener3
=
source
.
Connect
(
queue2
func2
)
;
MediaEventListener
listener4
=
source
.
Connect
(
queue2
&
foo2
&
Foo2
:
:
OnNotify
)
;
source
.
Notify
(
SomeEvent
(
copies
)
)
;
queue1
-
>
BeginShutdown
(
)
;
queue1
-
>
AwaitShutdownAndIdle
(
)
;
queue2
-
>
BeginShutdown
(
)
;
queue2
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
1
)
;
EXPECT_THAT
(
callbackLog1
testing
:
:
ElementsAre
(
0
1
)
)
;
EXPECT_THAT
(
callbackLog2
testing
:
:
ElementsAre
(
0
1
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
listener3
.
Disconnect
(
)
;
listener4
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
CopyEventUnneeded
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
CopyEventUnneeded
"
)
;
MediaEventProducer
<
SomeEvent
>
source
;
int
copies
=
0
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
]
(
)
{
callbackLog
.
push_back
(
0
)
;
}
;
struct
Foo
{
void
OnNotify
(
)
{
callbackLog
.
push_back
(
1
)
;
}
}
foo
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
&
foo
&
Foo
:
:
OnNotify
)
;
std
:
:
unique_ptr
<
SomeEvent
>
event
(
new
SomeEvent
(
copies
)
)
;
source
.
Notify
(
*
event
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_EQ
(
copies
0
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
0
1
)
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MoveOnly
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MoveOnly
"
)
;
MediaEventProducerExc
<
UniquePtr
<
int
>
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
]
(
UniquePtr
<
int
>
&
&
aEvent
)
{
callbackLog
.
push_back
(
*
aEvent
)
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
UniquePtr
<
int
>
(
new
int
(
20
)
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
20
)
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ExclusiveConstLvalueRef
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ExclusiveConstLvalueRef
"
)
;
MediaEventProducerExc
<
UniquePtr
<
int
>
>
source
;
static
std
:
:
vector
<
int
>
callbackLog
;
callbackLog
.
clear
(
)
;
auto
func
=
[
]
(
const
UniquePtr
<
int
>
&
aEvent
)
{
callbackLog
.
push_back
(
*
aEvent
)
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
UniquePtr
<
int
>
(
new
int
(
20
)
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_THAT
(
callbackLog
testing
:
:
ElementsAre
(
20
)
)
;
listener
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
ExclusiveNoArgs
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ExclusiveNoArgs
"
)
;
MediaEventProducerExc
<
UniquePtr
<
int
>
>
source
;
static
int
callbackCount
=
0
;
auto
func
=
[
]
(
)
{
+
+
callbackCount
;
}
;
MediaEventListener
listener
=
source
.
Connect
(
queue
func
)
;
source
.
Notify
(
UniquePtr
<
int
>
(
new
int
(
20
)
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
ASSERT_EQ
(
callbackCount
1
)
;
listener
.
Disconnect
(
)
;
}
struct
RefCounter
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefCounter
)
explicit
RefCounter
(
int
aVal
)
:
mVal
(
aVal
)
{
}
int
mVal
;
private
:
~
RefCounter
(
)
=
default
;
}
;
TEST
(
MediaEventSource
NoMove
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
NoMove
"
)
;
MediaEventProducer
<
RefPtr
<
RefCounter
>
>
source
;
auto
func1
=
[
]
(
const
RefPtr
<
RefCounter
>
&
aEvent
)
{
EXPECT_EQ
(
aEvent
-
>
mVal
20
)
;
}
;
auto
func2
=
[
]
(
const
RefPtr
<
RefCounter
>
&
aEvent
)
{
EXPECT_EQ
(
aEvent
-
>
mVal
20
)
;
}
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func1
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
func2
)
;
RefPtr
<
RefCounter
>
val
=
new
RefCounter
(
20
)
;
source
.
Notify
(
std
:
:
move
(
val
)
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
TEST
(
MediaEventSource
MoveLambda
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
MoveLambda
"
)
;
MediaEventProducer
<
void
>
source
;
int
counter
=
0
;
SomeEvent
someEvent
(
counter
)
;
auto
func
=
[
someEvent
]
(
)
{
}
;
EXPECT_EQ
(
someEvent
.
mCount
1
)
;
MediaEventListener
listener1
=
source
.
Connect
(
queue
func
)
;
EXPECT_EQ
(
someEvent
.
mCount
2
)
;
MediaEventListener
listener2
=
source
.
Connect
(
queue
std
:
:
move
(
func
)
)
;
EXPECT_EQ
(
someEvent
.
mCount
2
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
template
<
typename
Bool
>
struct
DestroyChecker
{
explicit
DestroyChecker
(
Bool
*
aIsDestroyed
)
:
mIsDestroyed
(
aIsDestroyed
)
{
EXPECT_FALSE
(
*
mIsDestroyed
)
;
}
~
DestroyChecker
(
)
{
EXPECT_FALSE
(
*
mIsDestroyed
)
;
*
mIsDestroyed
=
true
;
}
private
:
Bool
*
const
mIsDestroyed
;
}
;
class
ClassForDestroyCheck
final
:
private
DestroyChecker
<
bool
>
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ClassForDestroyCheck
)
;
explicit
ClassForDestroyCheck
(
bool
*
aIsDestroyed
)
:
DestroyChecker
(
aIsDestroyed
)
{
}
int32_t
RefCountNums
(
)
const
{
return
mRefCnt
;
}
protected
:
~
ClassForDestroyCheck
(
)
=
default
;
}
;
TEST
(
MediaEventSource
ResetFuncReferenceAfterDisconnect
)
{
const
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ResetFuncReferenceAfterDisconnect
"
)
;
MediaEventProducer
<
void
>
source
;
bool
isDestroyed
=
false
;
auto
object
=
MakeRefPtr
<
ClassForDestroyCheck
>
(
&
isDestroyed
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
1
)
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
ptr
=
object
]
{
}
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
2
)
;
listener
.
Disconnect
(
)
;
queue
-
>
BeginShutdown
(
)
;
queue
-
>
AwaitShutdownAndIdle
(
)
;
EXPECT_FALSE
(
isDestroyed
)
;
EXPECT_EQ
(
object
-
>
RefCountNums
(
)
1
)
;
object
=
nullptr
;
EXPECT_TRUE
(
isDestroyed
)
;
}
TEST
(
MediaEventSource
ResetTargetAfterDisconnect
)
{
RefPtr
<
TaskQueue
>
queue
=
TaskQueue
:
:
Create
(
GetMediaThreadPool
(
MediaThreadType
:
:
SUPERVISOR
)
"
TestMediaEventSource
ResetTargetAfterDisconnect
"
)
;
MediaEventProducer
<
void
>
source
;
MediaEventListener
listener
=
source
.
Connect
(
queue
[
]
{
}
)
;
listener
.
Disconnect
(
)
;
queue
-
>
AwaitIdle
(
)
;
EXPECT_EQ
(
queue
.
forget
(
)
.
take
(
)
-
>
Release
(
)
0u
)
;
}
TEST
(
MediaEventSource
TailDispatch
)
{
MockFunction
<
void
(
const
char
*
)
>
checkpoint
;
{
InSequence
seq
;
EXPECT_CALL
(
checkpoint
Call
(
StrEq
(
"
normal
runnable
"
)
)
)
;
EXPECT_CALL
(
checkpoint
Call
(
StrEq
(
"
source1
"
)
)
)
;
EXPECT_CALL
(
checkpoint
Call
(
StrEq
(
"
tail
-
dispatched
runnable
"
)
)
)
;
EXPECT_CALL
(
checkpoint
Call
(
StrEq
(
"
source2
"
)
)
)
;
}
MediaEventProducer
<
void
>
source1
;
MediaEventListener
listener1
=
source1
.
Connect
(
AbstractThread
:
:
MainThread
(
)
[
&
]
{
checkpoint
.
Call
(
"
source1
"
)
;
}
)
;
MediaEventProducer
<
void
>
source2
;
MediaEventListener
listener2
=
source2
.
Connect
(
AbstractThread
:
:
MainThread
(
)
[
&
]
{
checkpoint
.
Call
(
"
source2
"
)
;
}
)
;
AbstractThread
:
:
MainThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
&
]
{
source1
.
Notify
(
)
;
AbstractThread
:
:
MainThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
&
]
{
checkpoint
.
Call
(
"
tail
-
dispatched
runnable
"
)
;
}
)
)
;
source2
.
Notify
(
)
;
GetMainThreadSerialEventTarget
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
&
]
{
checkpoint
.
Call
(
"
normal
runnable
"
)
;
}
)
)
;
}
)
)
;
NS_ProcessPendingEvents
(
nullptr
)
;
listener1
.
Disconnect
(
)
;
listener2
.
Disconnect
(
)
;
}
