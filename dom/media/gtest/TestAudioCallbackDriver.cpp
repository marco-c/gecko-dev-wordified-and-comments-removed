#
include
"
CubebUtils
.
h
"
#
include
"
GraphDriver
.
h
"
#
include
"
MediaTrackGraphImpl
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
-
printers
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MockCubeb
.
h
"
using
:
:
testing
:
:
Return
;
using
namespace
mozilla
;
RefPtr
<
MediaTrackGraphImpl
>
MakeMTGImpl
(
)
{
return
MakeRefPtr
<
MediaTrackGraphImpl
>
(
MediaTrackGraph
:
:
AUDIO_THREAD_DRIVER
MediaTrackGraph
:
:
DIRECT_DRIVER
44100
2
nullptr
)
;
}
TEST
(
TestAudioCallbackDriver
StartStop
)
MOZ_CAN_RUN_SCRIPT_FOR_DEFINITION
{
MockCubeb
*
mock
=
new
MockCubeb
(
)
;
CubebUtils
:
:
ForceSetCubebContext
(
mock
-
>
AsCubebContext
(
)
)
;
RefPtr
<
MediaTrackGraphImpl
>
graph
=
MakeMTGImpl
(
)
;
EXPECT_TRUE
(
!
!
graph
-
>
mDriver
)
<
<
"
AudioCallbackDriver
created
.
"
;
AudioCallbackDriver
*
driver
=
graph
-
>
mDriver
-
>
AsAudioCallbackDriver
(
)
;
EXPECT_FALSE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
not
running
"
;
EXPECT_FALSE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
not
started
"
;
driver
-
>
Start
(
)
;
std
:
:
this_thread
:
:
sleep_for
(
std
:
:
chrono
:
:
milliseconds
(
200
)
)
;
EXPECT_TRUE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
running
"
;
EXPECT_TRUE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
started
"
;
MOZ_KnownLive
(
driver
-
>
AsAudioCallbackDriver
(
)
)
-
>
Shutdown
(
)
;
EXPECT_FALSE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
not
running
"
;
EXPECT_FALSE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
not
started
"
;
graph
-
>
mDriver
=
nullptr
;
graph
-
>
RemoveShutdownBlocker
(
)
;
}
