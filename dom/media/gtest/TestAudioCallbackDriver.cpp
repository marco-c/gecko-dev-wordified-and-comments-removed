#
include
"
CubebUtils
.
h
"
#
include
"
GraphDriver
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
-
printers
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MockCubeb
.
h
"
using
namespace
mozilla
;
using
IterationResult
=
GraphInterface
:
:
IterationResult
;
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
Return
;
class
MockGraphInterface
:
public
GraphInterface
{
NS_DECL_THREADSAFE_ISUPPORTS
explicit
MockGraphInterface
(
TrackRate
aSampleRate
)
:
mSampleRate
(
aSampleRate
)
{
}
MOCK_METHOD4
(
NotifyOutputData
void
(
AudioDataValue
*
size_t
TrackRate
uint32_t
)
)
;
MOCK_METHOD0
(
NotifyInputStopped
void
(
)
)
;
MOCK_METHOD5
(
NotifyInputData
void
(
const
AudioDataValue
*
size_t
TrackRate
uint32_t
uint32_t
)
)
;
MOCK_METHOD0
(
DeviceChanged
void
(
)
)
;
IterationResult
OneIteration
(
GraphTime
aStateComputedTime
GraphTime
AudioMixer
*
aMixer
)
{
GraphDriver
*
driver
=
mCurrentDriver
;
if
(
aMixer
)
{
aMixer
-
>
StartMixing
(
)
;
aMixer
-
>
Mix
(
nullptr
driver
-
>
AsAudioCallbackDriver
(
)
-
>
OutputChannelCount
(
)
aStateComputedTime
-
mStateComputedTime
mSampleRate
)
;
aMixer
-
>
FinishMixing
(
)
;
}
mStateComputedTime
=
aStateComputedTime
;
if
(
!
mKeepProcessing
)
{
return
IterationResult
:
:
CreateStop
(
NS_NewRunnableFunction
(
__func__
[
]
{
}
)
)
;
}
GraphDriver
*
next
=
mNextDriver
.
exchange
(
nullptr
)
;
if
(
next
)
{
return
IterationResult
:
:
CreateSwitchDriver
(
next
NS_NewRunnableFunction
(
__func__
[
]
{
}
)
)
;
}
return
IterationResult
:
:
CreateStillProcessing
(
)
;
}
#
ifdef
DEBUG
bool
InDriverIteration
(
GraphDriver
*
aDriver
)
override
{
return
aDriver
-
>
OnThread
(
)
;
}
#
endif
GraphTime
StateComputedTime
(
)
const
{
return
mStateComputedTime
;
}
void
SetCurrentDriver
(
GraphDriver
*
aDriver
)
{
mCurrentDriver
=
aDriver
;
}
void
StopIterating
(
)
{
mKeepProcessing
=
false
;
}
void
SwitchTo
(
GraphDriver
*
aDriver
)
{
mNextDriver
=
aDriver
;
}
const
TrackRate
mSampleRate
;
protected
:
Atomic
<
GraphTime
>
mStateComputedTime
{
0
}
;
Atomic
<
GraphDriver
*
>
mCurrentDriver
{
nullptr
}
;
Atomic
<
bool
>
mKeepProcessing
{
true
}
;
Atomic
<
GraphDriver
*
>
mNextDriver
{
nullptr
}
;
virtual
~
MockGraphInterface
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS0
(
MockGraphInterface
)
TEST
(
TestAudioCallbackDriver
StartStop
)
MOZ_CAN_RUN_SCRIPT_FOR_DEFINITION
{
const
TrackRate
rate
=
44100
;
MockCubeb
*
cubeb
=
new
MockCubeb
(
)
;
CubebUtils
:
:
ForceSetCubebContext
(
cubeb
-
>
AsCubebContext
(
)
)
;
RefPtr
<
AudioCallbackDriver
>
driver
;
auto
graph
=
MakeRefPtr
<
NiceMock
<
MockGraphInterface
>
>
(
rate
)
;
EXPECT_CALL
(
*
graph
NotifyInputStopped
)
.
Times
(
0
)
;
ON_CALL
(
*
graph
NotifyOutputData
)
.
WillByDefault
(
[
&
]
(
AudioDataValue
*
size_t
TrackRate
uint32_t
)
{
}
)
;
driver
=
MakeRefPtr
<
AudioCallbackDriver
>
(
graph
nullptr
rate
2
0
nullptr
nullptr
AudioInputType
:
:
Unknown
)
;
EXPECT_FALSE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
not
running
"
;
EXPECT_FALSE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
not
started
"
;
graph
-
>
SetCurrentDriver
(
driver
)
;
driver
-
>
Start
(
)
;
std
:
:
this_thread
:
:
sleep_for
(
std
:
:
chrono
:
:
milliseconds
(
200
)
)
;
EXPECT_TRUE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
running
"
;
EXPECT_TRUE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
started
"
;
graph
-
>
StopIterating
(
)
;
MOZ_KnownLive
(
driver
)
-
>
Shutdown
(
)
;
EXPECT_FALSE
(
driver
-
>
ThreadRunning
(
)
)
<
<
"
Verify
thread
is
not
running
"
;
EXPECT_FALSE
(
driver
-
>
IsStarted
(
)
)
<
<
"
Verify
thread
is
not
started
"
;
}
