#
include
"
AudioDeviceInfo
.
h
"
#
include
"
MediaManager
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
-
printers
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
webrtc
/
MediaEngineDefault
.
h
"
using
:
:
testing
:
:
Return
;
using
namespace
mozilla
;
void
PrintTo
(
const
nsString
&
aValue
:
:
std
:
:
ostream
*
aStream
)
{
NS_ConvertUTF16toUTF8
str
(
aValue
)
;
(
*
aStream
)
<
<
str
.
get
(
)
;
}
void
PrintTo
(
const
nsCString
&
aValue
:
:
std
:
:
ostream
*
aStream
)
{
(
*
aStream
)
<
<
aValue
.
get
(
)
;
}
RefPtr
<
AudioDeviceInfo
>
MakeAudioDeviceInfo
(
const
nsAString
&
aName
const
nsAString
&
aGroupId
uint16_t
aType
)
{
return
MakeRefPtr
<
AudioDeviceInfo
>
(
nullptr
aName
aGroupId
u
"
Vendor
"
_ns
aType
AudioDeviceInfo
:
:
STATE_ENABLED
AudioDeviceInfo
:
:
PREF_NONE
AudioDeviceInfo
:
:
FMT_F32LE
AudioDeviceInfo
:
:
FMT_F32LE
2u
44100u
44100u
44100u
0
0
)
;
}
RefPtr
<
MediaDevice
>
MakeCameraDevice
(
const
nsString
&
aName
const
nsString
&
aGroupId
)
{
return
new
MediaDevice
(
new
MediaEngineDefault
(
)
dom
:
:
MediaSourceEnum
:
:
Camera
aName
u
"
"
_ns
aGroupId
MediaDevice
:
:
IsScary
:
:
No
)
;
}
RefPtr
<
MediaDevice
>
MakeMicDevice
(
const
nsString
&
aName
const
nsString
&
aGroupId
)
{
return
new
MediaDevice
(
new
MediaEngineDefault
(
)
MakeAudioDeviceInfo
(
aName
aGroupId
AudioDeviceInfo
:
:
TYPE_INPUT
)
u
"
"
_ns
)
;
}
RefPtr
<
MediaDevice
>
MakeSpeakerDevice
(
const
nsString
&
aName
const
nsString
&
aGroupId
)
{
return
new
MediaDevice
(
new
MediaEngineDefault
(
)
MakeAudioDeviceInfo
(
aName
aGroupId
AudioDeviceInfo
:
:
TYPE_OUTPUT
)
u
"
ID
"
_ns
)
;
}
TEST
(
TestGroupId
MatchInput_PartOfName
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
auto
mic
=
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
;
devices
.
AppendElement
(
mic
)
;
audios
.
AppendElement
(
mic
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
devices
[
1
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
the
same
as
audio
input
group
id
.
"
;
}
TEST
(
TestGroupId
MatchInput_FullName
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
auto
mic
=
MakeMicDevice
(
u
"
Vendor
Model
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
;
devices
.
AppendElement
(
mic
)
;
audios
.
AppendElement
(
mic
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
devices
[
1
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
the
same
as
audio
input
group
id
.
"
;
}
TEST
(
TestGroupId
NoMatchInput
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
nsString
Cam_Model_GroupId
=
u
"
Cam
-
Model
-
GroupId
"
_ns
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
Cam_Model_GroupId
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
Cam_Model_GroupId
)
<
<
"
Video
group
id
has
not
been
updated
.
"
;
EXPECT_NE
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
different
than
audio
input
group
id
.
"
;
}
TEST
(
TestGroupId
NoMatch_TwoIdenticalDevices
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
nsString
Cam_Model_GroupId
=
u
"
Cam
-
Model
-
GroupId
"
_ns
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
Cam_Model_GroupId
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
Cam_Model_GroupId
)
<
<
"
Video
group
id
has
not
been
updated
.
"
;
EXPECT_NE
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
different
from
audio
input
group
id
.
"
;
EXPECT_NE
(
devices
[
0
]
-
>
mRawGroupID
audios
[
2
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
different
from
audio
output
group
id
.
"
;
}
TEST
(
TestGroupId
Match_TwoIdenticalInputsMatchOutput
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
nsString
Cam_Model_GroupId
=
u
"
Cam
-
Model
-
GroupId
"
_ns
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
Cam_Model_GroupId
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
audios
[
2
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
the
same
as
audio
output
group
id
.
"
;
}
TEST
(
TestGroupId
NoMatch_ThreeIdenticalDevices
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
nsString
Cam_Model_GroupId
=
u
"
Cam
-
Model
-
GroupId
"
_ns
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
Cam_Model_GroupId
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
Cam_Model_GroupId
)
<
<
"
Video
group
id
has
not
been
updated
.
"
;
EXPECT_NE
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
different
from
audio
input
group
id
.
"
;
EXPECT_NE
(
devices
[
0
]
-
>
mRawGroupID
audios
[
3
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
different
from
audio
output
group
id
.
"
;
}
TEST
(
TestGroupId
MatchOutput
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Mic
Analog
Stereo
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
Analog
Stereo
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
audios
[
1
]
-
>
mRawGroupID
)
<
<
"
Video
group
id
is
the
same
as
audio
output
group
id
.
"
;
}
TEST
(
TestGroupId
InputOutputSameName
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
"
_ns
u
"
Mic
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
"
_ns
u
"
Speaker
-
Model
-
GroupId
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
input
group
id
is
the
same
as
audio
input
group
id
.
"
;
}
TEST
(
TestGroupId
InputEmptyGroupId
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeMicDevice
(
u
"
Vendor
Model
"
_ns
u
"
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
input
group
id
is
the
same
as
audio
input
group
id
.
"
;
}
TEST
(
TestGroupId
OutputEmptyGroupId
)
{
MediaManager
:
:
MediaDeviceSet
devices
;
MediaManager
:
:
MediaDeviceSet
audios
;
devices
.
AppendElement
(
MakeCameraDevice
(
u
"
Vendor
Model
"
_ns
u
"
Cam
-
Model
-
GroupId
"
_ns
)
)
;
audios
.
AppendElement
(
MakeSpeakerDevice
(
u
"
Vendor
Model
"
_ns
u
"
"
_ns
)
)
;
MediaManager
:
:
GuessVideoDeviceGroupIDs
(
devices
audios
)
;
EXPECT_EQ
(
devices
[
0
]
-
>
mRawGroupID
audios
[
0
]
-
>
mRawGroupID
)
<
<
"
Video
input
group
id
is
the
same
as
audio
output
group
id
.
"
;
}
