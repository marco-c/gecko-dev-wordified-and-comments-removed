#
include
"
AudioDeviceInfo
.
h
"
#
include
"
AudioSink
.
h
"
#
include
"
AudioSinkWrapper
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MockCubeb
.
h
"
#
include
"
MockMediaDecoderOwner
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
VideoFrameContainer
.
h
"
#
include
"
VideoSink
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
WaitFor
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
layers
;
using
media
:
:
TimeUnit
;
TEST
(
TestVideoSink
FrameThrottling
)
{
MockCubeb
*
cubeb
=
new
MockCubeb
(
MockCubeb
:
:
RunningMode
:
:
Manual
)
;
CubebUtils
:
:
ForceSetCubebContext
(
cubeb
-
>
AsCubebContext
(
)
)
;
MediaInfo
info
;
info
.
EnableAudio
(
)
;
info
.
EnableVideo
(
)
;
MediaQueue
<
AudioData
>
audioQueue
;
auto
audioSinkCreator
=
[
&
]
(
)
{
return
UniquePtr
<
AudioSink
>
{
new
AudioSink
(
AbstractThread
:
:
GetCurrent
(
)
audioQueue
info
.
mAudio
false
)
}
;
}
;
RefPtr
wrapper
=
new
AudioSinkWrapper
(
AbstractThread
:
:
GetCurrent
(
)
audioQueue
std
:
:
move
(
audioSinkCreator
)
1
.
0
1
.
0
true
nullptr
)
;
auto
owner
=
std
:
:
make_unique
<
MockMediaDecoderOwner
>
(
)
;
RefPtr
container
=
new
VideoFrameContainer
(
owner
.
get
(
)
MakeAndAddRef
<
ImageContainer
>
(
ImageUsageType
:
:
VideoFrameContainer
#
ifdef
MOZ_WIDGET_ANDROID
ImageContainer
:
:
SYNCHRONOUS
#
else
ImageContainer
:
:
ASYNCHRONOUS
#
endif
)
)
;
MediaQueue
<
VideoData
>
videoQueue
;
RefPtr
frameStatistics
=
new
FrameStatistics
(
)
;
RefPtr
videoSink
=
new
VideoSink
(
AbstractThread
:
:
GetCurrent
(
)
wrapper
videoQueue
container
*
frameStatistics
9999
)
;
auto
initPromise
=
TakeN
(
cubeb
-
>
StreamInitEvent
(
)
1
)
;
videoSink
-
>
Start
(
TimeUnit
:
:
Zero
(
)
info
)
;
auto
[
stream
]
=
WaitFor
(
initPromise
)
.
unwrap
(
)
[
0
]
;
uint32_t
audioRate
=
stream
-
>
SampleRate
(
)
;
size_t
audioFrameCount
=
1000
*
info
.
mAudio
.
mRate
/
audioRate
;
AlignedAudioBuffer
samples
(
audioFrameCount
*
info
.
mAudio
.
mChannels
)
;
RefPtr
audioData
=
new
AudioData
(
0
TimeUnit
(
0
info
.
mAudio
.
mRate
)
std
:
:
move
(
samples
)
info
.
mAudio
.
mChannels
info
.
mAudio
.
mRate
)
;
audioQueue
.
Push
(
audioData
)
;
auto
image
=
container
-
>
GetImageContainer
(
)
-
>
CreatePlanarYCbCrImage
(
)
;
static
uint8_t
pixel
[
]
=
{
0x00
}
;
PlanarYCbCrData
imageData
;
imageData
.
mYChannel
=
imageData
.
mCbChannel
=
imageData
.
mCrChannel
=
pixel
;
imageData
.
mYStride
=
imageData
.
mCbCrStride
=
1
;
imageData
.
mPictureRect
=
gfx
:
:
IntRect
(
0
0
1
1
)
;
image
-
>
CopyData
(
imageData
)
;
TimeUnit
nextFrameTime
=
TimeUnit
(
0
audioRate
)
;
auto
PushVideoFrame
=
[
&
]
(
const
gfx
:
:
IntSize
&
aSize
const
TimeUnit
&
aDuration
)
{
static
bool
isKeyFrame
=
true
;
RefPtr
frame
=
VideoData
:
:
CreateFromImage
(
aSize
0
nextFrameTime
aDuration
image
isKeyFrame
nextFrameTime
)
;
frame
-
>
mFrameID
=
container
-
>
NewFrameID
(
)
;
videoQueue
.
Push
(
frame
)
;
nextFrameTime
=
frame
-
>
GetEndTime
(
)
;
isKeyFrame
=
false
;
}
;
gfx
:
:
IntSize
size1
{
1
1
}
;
PushVideoFrame
(
size1
TimeUnit
(
1
audioRate
)
)
;
gfx
:
:
IntSize
size2
{
1
2
}
;
PushVideoFrame
(
size2
TimeUnit
(
1
audioRate
)
)
;
SpinEventLoopUntil
(
"
the
intrinsic
size
receives
an
initial
value
"
_ns
[
&
]
{
return
container
-
>
CurrentIntrinsicSize
(
)
.
isSome
(
)
;
}
)
;
EXPECT_EQ
(
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
size1
)
;
stream
-
>
ManualDataCallback
(
nextFrameTime
.
ToTicksAtRate
(
audioRate
)
+
1
)
;
SpinEventLoopUntil
(
"
the
intrinsic
size
is
updated
to
that
of
frame
2
"
_ns
[
&
]
{
return
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
=
=
size2
;
}
)
;
gfx
:
:
IntSize
size3
{
1
3
}
;
PushVideoFrame
(
size3
TimeUnit
(
2
audioRate
)
)
;
gfx
:
:
IntSize
size4
{
1
4
}
;
PushVideoFrame
(
size4
TimeUnit
(
1
audioRate
)
)
;
NS_ProcessPendingEvents
(
nullptr
)
;
EXPECT_EQ
(
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
size3
)
;
EXPECT_EQ
(
frameStatistics
-
>
GetDroppedSinkFrames
(
)
0u
)
;
stream
-
>
ManualDataCallback
(
static_cast
<
long
>
(
nextFrameTime
.
ToTicksAtRate
(
audioRate
)
+
11
-
stream
-
>
Position
(
)
)
)
;
gfx
:
:
IntSize
size5
{
1
5
}
;
PushVideoFrame
(
size5
TimeUnit
(
8
audioRate
)
)
;
SpinEventLoopUntil
(
"
the
intrinsic
size
is
updated
to
that
of
frame
4
"
_ns
[
&
]
{
return
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
=
=
size4
;
}
)
;
gfx
:
:
IntSize
size6
{
1
6
}
;
PushVideoFrame
(
size6
TimeUnit
(
1
audioRate
)
)
;
NS_ProcessPendingEvents
(
nullptr
)
;
EXPECT_EQ
(
frameStatistics
-
>
GetDroppedSinkFrames
(
)
1u
)
;
EXPECT_EQ
(
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
size6
)
;
gfx
:
:
IntSize
size7
{
1
7
}
;
PushVideoFrame
(
size7
TimeUnit
(
1
audioRate
)
)
;
NS_ProcessPendingEvents
(
nullptr
)
;
EXPECT_EQ
(
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
size6
)
;
videoSink
-
>
SetPlaying
(
false
)
;
EXPECT_EQ
(
container
-
>
CurrentIntrinsicSize
(
)
.
value
(
)
size7
)
;
EXPECT_EQ
(
frameStatistics
-
>
GetDroppedSinkFrames
(
)
1u
)
;
videoSink
-
>
Stop
(
)
;
videoSink
-
>
Shutdown
(
)
;
}
