#
include
"
gtest
/
gtest
.
h
"
#
include
"
Benchmark
.
h
"
#
include
"
MockMediaResource
.
h
"
#
include
"
DecoderTraits
.
h
"
#
include
"
MP4Demuxer
.
h
"
#
include
"
WebMDemuxer
.
h
"
using
namespace
mozilla
;
class
BenchmarkRunner
{
public
:
explicit
BenchmarkRunner
(
Benchmark
*
aBenchmark
)
:
mBenchmark
(
aBenchmark
)
{
}
uint32_t
Run
(
)
{
bool
done
=
false
;
uint32_t
result
=
0
;
mBenchmark
-
>
Init
(
)
;
mBenchmark
-
>
Run
(
)
-
>
Then
(
AbstractThread
:
:
MainThread
(
)
__func__
[
&
]
(
uint32_t
aDecodeFps
)
{
result
=
aDecodeFps
;
done
=
true
;
}
[
&
]
(
)
{
done
=
true
;
}
)
;
while
(
!
done
)
{
NS_ProcessNextEvent
(
)
;
}
return
result
;
}
private
:
RefPtr
<
Benchmark
>
mBenchmark
;
}
;
TEST
(
MediaDataDecoder
H264
)
{
if
(
!
DecoderTraits
:
:
IsMP4TypeAndEnabled
(
NS_LITERAL_CSTRING
(
"
video
/
mp4
"
)
)
)
{
EXPECT_TRUE
(
true
)
;
}
else
{
RefPtr
<
MediaResource
>
resource
=
new
MockMediaResource
(
"
gizmo
.
mp4
"
NS_LITERAL_CSTRING
(
"
video
/
mp4
"
)
)
;
nsresult
rv
=
resource
-
>
Open
(
nullptr
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
BenchmarkRunner
runner
(
new
Benchmark
(
new
MP4Demuxer
(
resource
)
)
)
;
EXPECT_GT
(
runner
.
Run
(
)
0u
)
;
}
}
TEST
(
MediaDataDecoder
VP9
)
{
if
(
!
DecoderTraits
:
:
IsWebMTypeAndEnabled
(
NS_LITERAL_CSTRING
(
"
video
/
webm
"
)
)
)
{
EXPECT_TRUE
(
true
)
;
}
else
{
RefPtr
<
MediaResource
>
resource
=
new
MockMediaResource
(
"
vp9cake
.
webm
"
NS_LITERAL_CSTRING
(
"
video
/
webm
"
)
)
;
nsresult
rv
=
resource
-
>
Open
(
nullptr
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
BenchmarkRunner
runner
(
new
Benchmark
(
new
WebMDemuxer
(
resource
)
)
)
;
EXPECT_GT
(
runner
.
Run
(
)
0u
)
;
}
}
