#
ifndef
MOCK_DECODER_MODULE_H_
#
define
MOCK_DECODER_MODULE_H_
#
include
"
BlankDecoderModule
.
h
"
#
include
"
DummyMediaDataDecoder
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
gmock
/
gmock
.
h
"
namespace
mozilla
{
class
MockVideoDataDecoder
:
public
DummyMediaDataDecoder
{
public
:
explicit
MockVideoDataDecoder
(
const
CreateDecoderParams
&
aParams
)
:
DummyMediaDataDecoder
(
MakeUnique
<
BlankVideoDataCreator
>
(
aParams
.
VideoConfig
(
)
.
mDisplay
.
width
aParams
.
VideoConfig
(
)
.
mDisplay
.
height
aParams
.
mImageContainer
)
"
MockVideoDataDecoder
"
_ns
aParams
)
{
ON_CALL
(
*
this
Drain
)
.
WillByDefault
(
[
self
=
MOZ_KnownLive
(
this
)
]
(
)
{
return
self
-
>
DummyMediaDataDecoder
:
:
Drain
(
)
;
}
)
;
}
MOCK_METHOD
(
RefPtr
<
DecodePromise
>
Drain
(
)
(
override
)
)
;
void
SetLatencyFrameCount
(
uint32_t
aLatency
)
{
mMaxRefFrames
=
aLatency
;
}
protected
:
~
MockVideoDataDecoder
(
)
override
=
default
;
}
;
class
MockDecoderModule
:
public
PlatformDecoderModule
{
public
:
MockDecoderModule
(
)
{
ON_CALL
(
*
this
SupportsMimeType
)
.
WillByDefault
(
testing
:
:
Return
(
media
:
:
DecodeSupport
:
:
SoftwareDecode
)
)
;
}
MOCK_METHOD
(
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
(
override
)
)
;
MOCK_METHOD
(
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
(
override
)
)
;
MOCK_METHOD
(
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
(
const
override
)
)
;
const
char
*
Name
(
)
const
override
{
return
"
Mock
"
;
}
protected
:
~
MockDecoderModule
(
)
override
=
default
;
}
;
}
#
endif
