#
include
<
stdint
.
h
>
#
include
"
AudioBufferUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
const
uint32_t
FRAMES
=
256
;
const
uint32_t
CHANNELS
=
2
;
const
uint32_t
SAMPLES
=
CHANNELS
*
FRAMES
;
TEST
(
AudioBuffers
Test
)
{
mozilla
:
:
AudioCallbackBufferWrapper
<
float
CHANNELS
>
mBuffer
;
mozilla
:
:
SpillBuffer
<
float
128
CHANNELS
>
b
;
float
fromCallback
[
SAMPLES
]
;
float
other
[
SAMPLES
]
;
for
(
uint32_t
i
=
0
;
i
<
SAMPLES
;
i
+
+
)
{
other
[
i
]
=
1
.
0
;
fromCallback
[
i
]
=
0
.
0
;
}
mBuffer
.
SetBuffer
(
fromCallback
FRAMES
)
;
ASSERT_TRUE
(
b
.
Fill
(
other
15
)
=
=
15
)
;
ASSERT_TRUE
(
b
.
Fill
(
other
17
)
=
=
17
)
;
for
(
uint32_t
i
=
0
;
i
<
32
*
CHANNELS
;
i
+
+
)
{
other
[
i
]
=
0
.
0
;
}
ASSERT_TRUE
(
b
.
Empty
(
mBuffer
)
=
=
32
)
;
ASSERT_TRUE
(
mBuffer
.
Available
(
)
=
=
FRAMES
-
32
)
;
mBuffer
.
WriteFrames
(
other
+
32
*
CHANNELS
FRAMES
-
32
)
;
ASSERT_TRUE
(
mBuffer
.
Available
(
)
=
=
0
)
;
for
(
uint32_t
i
=
0
;
i
<
SAMPLES
;
i
+
+
)
{
ASSERT_TRUE
(
fromCallback
[
i
]
=
=
1
.
0
)
<
<
"
Difference
at
"
<
<
i
<
<
"
(
"
<
<
fromCallback
[
i
]
<
<
"
!
=
"
<
<
1
.
0
<
<
"
)
\
n
"
;
}
ASSERT_TRUE
(
b
.
Fill
(
other
FRAMES
)
=
=
128
)
;
ASSERT_TRUE
(
b
.
Fill
(
other
FRAMES
)
=
=
0
)
;
ASSERT_TRUE
(
b
.
Empty
(
mBuffer
)
=
=
0
)
;
}
