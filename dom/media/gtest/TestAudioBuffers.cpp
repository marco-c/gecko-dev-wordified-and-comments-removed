#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
AudioBufferUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
const
uint32_t
FRAMES
=
256
;
void
test_for_number_of_channels
(
const
uint32_t
channels
)
{
const
uint32_t
samples
=
channels
*
FRAMES
;
mozilla
:
:
AudioCallbackBufferWrapper
<
float
>
mBuffer
(
channels
)
;
mozilla
:
:
SpillBuffer
<
float
128
>
b
(
channels
)
;
std
:
:
vector
<
float
>
fromCallback
(
samples
0
.
0
)
;
std
:
:
vector
<
float
>
other
(
samples
1
.
0
)
;
mozilla
:
:
AudioChunk
chunk
;
chunk
.
mBufferFormat
=
mozilla
:
:
AUDIO_FORMAT_FLOAT32
;
chunk
.
mChannelData
.
SetLength
(
channels
)
;
for
(
uint32_t
i
=
0
;
i
<
channels
;
+
+
i
)
{
chunk
.
mChannelData
[
i
]
=
other
.
data
(
)
+
i
*
channels
;
}
mBuffer
.
SetBuffer
(
fromCallback
.
data
(
)
FRAMES
)
;
chunk
.
mDuration
=
15
;
ASSERT_TRUE
(
b
.
Fill
(
chunk
)
=
=
15
)
;
chunk
.
mDuration
=
17
;
ASSERT_TRUE
(
b
.
Fill
(
chunk
)
=
=
17
)
;
for
(
uint32_t
i
=
0
;
i
<
32
*
channels
;
i
+
+
)
{
other
[
i
]
=
0
.
0
;
}
ASSERT_TRUE
(
b
.
Empty
(
mBuffer
)
=
=
32
)
;
ASSERT_TRUE
(
mBuffer
.
Available
(
)
=
=
FRAMES
-
32
)
;
mBuffer
.
WriteFrames
(
other
.
data
(
)
+
32
*
channels
FRAMES
-
32
)
;
ASSERT_TRUE
(
mBuffer
.
Available
(
)
=
=
0
)
;
for
(
uint32_t
i
=
0
;
i
<
samples
;
i
+
+
)
{
ASSERT_TRUE
(
fromCallback
[
i
]
=
=
1
.
0
)
<
<
"
Difference
at
"
<
<
i
<
<
"
(
"
<
<
fromCallback
[
i
]
<
<
"
!
=
"
<
<
1
.
0
<
<
"
)
\
n
"
;
}
chunk
.
mDuration
=
FRAMES
;
ASSERT_TRUE
(
b
.
Fill
(
chunk
)
=
=
128
)
;
ASSERT_TRUE
(
b
.
Fill
(
chunk
)
=
=
0
)
;
ASSERT_TRUE
(
b
.
Empty
(
mBuffer
)
=
=
0
)
;
}
TEST
(
AudioBuffers
Test
)
{
for
(
uint32_t
ch
=
1
;
ch
<
=
8
;
+
+
ch
)
{
test_for_number_of_channels
(
ch
)
;
}
}
