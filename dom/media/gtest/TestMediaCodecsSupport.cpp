#
include
"
gtest
/
gtest
.
h
"
#
include
"
MediaCodecsSupport
.
h
"
using
namespace
mozilla
;
using
namespace
media
;
TEST
(
MediaCodecsSupport
GetDecodeSupportSet
)
{
MediaCodecsSupported
supported
{
MediaCodecsSupport
:
:
VP8SoftwareDecode
MediaCodecsSupport
:
:
VP9HardwareDecode
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
}
;
MediaCodec
codec
;
DecodeSupportSet
RV
;
codec
=
MediaCodec
:
:
VP8
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
VP9
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
H264
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
2
)
;
codec
=
MediaCodec
:
:
AV1
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
GetDecodeMediaCodecsSupported
)
{
MediaCodec
codec
;
MediaCodecsSupported
RV
;
DecodeSupportSet
dss
;
codec
=
MediaCodec
:
:
VP8
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
SoftwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP8SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
AV1
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
HardwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
AV1HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
VP9
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
SoftwareDecode
DecodeSupport
:
:
HardwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP9SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP9HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
2
)
;
codec
=
MediaCodec
:
:
AV1
;
dss
=
DecodeSupportSet
{
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
AddSupport
)
{
MCSInfo
:
:
ResetSupport
(
)
;
EXPECT_TRUE
(
MCSInfo
:
:
GetSupport
(
)
.
size
(
)
=
=
0
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
AACSoftwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
VP9SoftwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
AV1HardwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupported
{
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
}
)
;
MediaCodecsSupported
supported
=
MCSInfo
:
:
GetSupport
(
)
;
DecodeSupportSet
dss
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
AAC
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
1
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
AV1
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
1
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
H264
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
2
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
Vorbis
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
GetMediaCodecsSupportedString
)
{
MCSInfo
:
:
ResetSupport
(
)
;
EXPECT_TRUE
(
MCSInfo
:
:
GetSupport
(
)
.
size
(
)
=
=
0
)
;
MCSInfo
:
:
AddSupport
(
{
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
MediaCodecsSupport
:
:
VP8SoftwareDecode
}
)
;
nsCString
supportString
;
MCSInfo
:
:
GetMediaCodecsSupportedString
(
supportString
MCSInfo
:
:
GetSupport
(
)
)
;
EXPECT_TRUE
(
supportString
.
Equals
(
"
H264
SW
\
nH264
HW
\
nVP8
SW
"
_ns
)
)
;
}
