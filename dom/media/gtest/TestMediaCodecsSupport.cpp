#
include
"
MediaCodecsSupport
.
h
"
#
include
"
gtest
/
gtest
.
h
"
using
namespace
mozilla
;
using
namespace
media
;
TEST
(
MediaCodecsSupport
BasicDecodeSupportSet
)
{
DecodeSupportSet
support
{
}
;
EXPECT_TRUE
(
support
!
=
DecodeSupport
:
:
SoftwareDecode
)
;
EXPECT_TRUE
(
support
!
=
DecodeSupport
:
:
HardwareDecode
)
;
EXPECT_TRUE
(
!
support
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
!
support
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
support
.
isEmpty
(
)
)
;
support
+
=
DecodeSupport
:
:
SoftwareDecode
;
EXPECT_TRUE
(
support
=
=
DecodeSupport
:
:
SoftwareDecode
)
;
EXPECT_TRUE
(
support
!
=
DecodeSupport
:
:
HardwareDecode
)
;
EXPECT_TRUE
(
support
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
!
support
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
!
support
.
isEmpty
(
)
)
;
support
+
=
DecodeSupport
:
:
HardwareDecode
;
EXPECT_TRUE
(
support
!
=
DecodeSupport
:
:
SoftwareDecode
)
;
EXPECT_TRUE
(
support
!
=
DecodeSupport
:
:
HardwareDecode
)
;
EXPECT_TRUE
(
support
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
support
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
!
support
.
isEmpty
(
)
)
;
}
TEST
(
MediaCodecsSupport
GetDecodeSupportSet
)
{
MediaCodecsSupported
supported
{
MediaCodecsSupport
:
:
VP8SoftwareDecode
MediaCodecsSupport
:
:
VP9HardwareDecode
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
}
;
MediaCodec
codec
;
DecodeSupportSet
RV
;
codec
=
MediaCodec
:
:
VP8
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
VP9
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
H264
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
2
)
;
codec
=
MediaCodec
:
:
AV1
;
RV
=
MCSInfo
:
:
GetDecodeSupportSet
(
codec
supported
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
GetDecodeMediaCodecsSupported
)
{
MediaCodec
codec
;
MediaCodecsSupported
RV
;
DecodeSupportSet
dss
;
codec
=
MediaCodec
:
:
VP8
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
SoftwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP8SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
AV1
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
HardwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
AV1HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
1
)
;
codec
=
MediaCodec
:
:
VP9
;
dss
=
DecodeSupportSet
{
DecodeSupport
:
:
SoftwareDecode
DecodeSupport
:
:
HardwareDecode
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP9SoftwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
contains
(
MediaCodecsSupport
:
:
VP9HardwareDecode
)
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
2
)
;
codec
=
MediaCodec
:
:
AV1
;
dss
=
DecodeSupportSet
{
}
;
RV
=
MCSInfo
:
:
GetDecodeMediaCodecsSupported
(
codec
dss
)
;
EXPECT_TRUE
(
RV
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
AddSupport
)
{
MCSInfo
:
:
ResetSupport
(
)
;
EXPECT_TRUE
(
MCSInfo
:
:
GetSupport
(
)
.
size
(
)
=
=
0
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
AACSoftwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
VP9SoftwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupport
:
:
AV1HardwareDecode
)
;
MCSInfo
:
:
AddSupport
(
MediaCodecsSupported
{
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
}
)
;
MediaCodecsSupported
supported
=
MCSInfo
:
:
GetSupport
(
)
;
DecodeSupportSet
dss
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
AAC
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
1
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
AV1
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
1
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
H264
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
2
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
SoftwareDecode
)
)
;
EXPECT_TRUE
(
dss
.
contains
(
DecodeSupport
:
:
HardwareDecode
)
)
;
dss
=
MCSInfo
:
:
GetDecodeSupportSet
(
MediaCodec
:
:
Vorbis
supported
)
;
EXPECT_TRUE
(
dss
.
size
(
)
=
=
0
)
;
}
TEST
(
MediaCodecsSupport
GetMediaCodecsSupportedString
)
{
MCSInfo
:
:
ResetSupport
(
)
;
EXPECT_TRUE
(
MCSInfo
:
:
GetSupport
(
)
.
size
(
)
=
=
0
)
;
MCSInfo
:
:
AddSupport
(
{
MediaCodecsSupport
:
:
H264SoftwareDecode
MediaCodecsSupport
:
:
H264HardwareDecode
MediaCodecsSupport
:
:
VP8SoftwareDecode
MediaCodecsSupport
:
:
VP9HardwareDecode
}
)
;
nsCString
supportString
;
nsCString
targetString
;
MCSInfo
:
:
GetMediaCodecsSupportedString
(
supportString
MCSInfo
:
:
GetSupport
(
)
)
;
for
(
const
auto
&
it
:
MCSInfo
:
:
GetAllCodecDefinitions
(
)
)
{
if
(
it
.
codec
=
=
MediaCodec
:
:
SENTINEL
)
{
break
;
}
nsCString
cn
(
it
.
commonName
)
;
if
(
cn
=
=
"
H264
"
_ns
)
{
targetString
+
=
"
H264
SWDEC
HWDEC
"
_ns
;
}
else
if
(
cn
.
Equals
(
"
VP8
"
_ns
)
)
{
targetString
+
=
"
VP8
SWDEC
"
_ns
;
}
else
if
(
cn
.
Equals
(
"
VP9
"
_ns
)
)
{
targetString
+
=
"
VP9
HWDEC
"
_ns
;
}
else
{
targetString
+
=
nsCString
(
it
.
commonName
)
+
"
NONE
"
_ns
;
}
targetString
+
=
"
\
n
"
_ns
;
}
if
(
!
targetString
.
IsEmpty
(
)
)
{
targetString
.
Truncate
(
targetString
.
Length
(
)
-
1
)
;
}
EXPECT_TRUE
(
supportString
.
Equals
(
targetString
)
)
;
}
TEST
(
MediaCodecsSupport
GetMediaCodecFromMimeType
)
{
std
:
:
vector
<
std
:
:
pair
<
nsCString
MediaCodec
>
>
testPairs
=
{
#
ifdef
MOZ_AV1
{
"
video
/
av1
"
_ns
MediaCodec
:
:
AV1
}
#
endif
{
"
video
/
avc
"
_ns
MediaCodec
:
:
H264
}
{
"
video
/
mp4
"
_ns
MediaCodec
:
:
H264
}
{
"
video
/
vp8
"
_ns
MediaCodec
:
:
VP8
}
{
"
video
/
vp9
"
_ns
MediaCodec
:
:
VP9
}
{
"
audio
/
mp4a
-
latm
"
_ns
MediaCodec
:
:
AAC
}
{
"
audio
/
flac
"
_ns
MediaCodec
:
:
FLAC
}
{
"
audio
/
mpeg
"
_ns
MediaCodec
:
:
MP3
}
{
"
audio
/
opus
"
_ns
MediaCodec
:
:
Opus
}
{
"
audio
/
vorbis
"
_ns
MediaCodec
:
:
Vorbis
}
{
"
audio
/
x
-
wav
"
_ns
MediaCodec
:
:
Wave
}
{
"
audio
/
jukebox
"
_ns
MediaCodec
:
:
SENTINEL
}
{
"
video
/
stopmotion
"
_ns
MediaCodec
:
:
SENTINEL
}
{
"
"
_ns
MediaCodec
:
:
SENTINEL
}
{
"
/
"
_ns
MediaCodec
:
:
SENTINEL
}
{
"
"
_ns
MediaCodec
:
:
SENTINEL
}
}
;
for
(
auto
&
p
:
testPairs
)
{
EXPECT_TRUE
(
MCSInfo
:
:
GetMediaCodecFromMimeType
(
p
.
first
)
=
=
p
.
second
)
;
}
}
