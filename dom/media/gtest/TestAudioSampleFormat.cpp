#
include
"
AudioSampleFormat
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
<
type_traits
>
using
namespace
mozilla
;
template
<
typename
T
>
constexpr
T
LowestSample
(
)
{
if
constexpr
(
std
:
:
is_integral_v
<
T
>
)
{
return
std
:
:
numeric_limits
<
T
>
:
:
lowest
(
)
;
}
else
{
return
-
1
.
0f
;
}
}
template
<
typename
Dest
>
constexpr
Dest
HighestSample
(
)
{
if
constexpr
(
std
:
:
is_integral_v
<
Dest
>
)
{
return
std
:
:
numeric_limits
<
Dest
>
:
:
max
(
)
;
}
else
{
return
+
1
.
0f
;
}
}
template
<
typename
Dest
typename
Source
>
constexpr
Dest
HighestSampleExpected
(
)
{
if
constexpr
(
std
:
:
is_same_v
<
Source
uint8_t
>
&
&
std
:
:
is_same_v
<
Dest
int16_t
>
)
{
return
32512
;
}
else
if
constexpr
(
std
:
:
is_same_v
<
Source
uint8_t
>
&
&
std
:
:
is_same_v
<
Dest
int32_t
>
)
{
return
2130706432
;
}
else
if
constexpr
(
std
:
:
is_same_v
<
Source
int16_t
>
&
&
std
:
:
is_same_v
<
Dest
int32_t
>
)
{
return
2147418112
;
}
if
constexpr
(
std
:
:
is_integral_v
<
Dest
>
)
{
return
std
:
:
numeric_limits
<
Dest
>
:
:
max
(
)
;
}
else
{
return
+
1
.
0f
;
}
}
template
<
typename
Source
typename
Dest
>
void
TestSampleTypePair
(
)
{
std
:
:
cout
<
<
__PRETTY_FUNCTION__
<
<
std
:
:
endl
;
ASSERT_EQ
(
LowestSample
<
Dest
>
(
)
ConvertAudioSample
<
Dest
>
(
LowestSample
<
Source
>
(
)
)
)
;
Dest
expected
=
HighestSampleExpected
<
Dest
Source
>
(
)
;
ASSERT_EQ
(
expected
ConvertAudioSample
<
Dest
>
(
HighestSample
<
Source
>
(
)
)
)
;
ASSERT_EQ
(
Bias
<
Dest
>
(
)
ConvertAudioSample
<
Dest
>
(
Bias
<
Source
>
(
)
)
)
;
}
template
<
typename
T
>
void
TestSampleType24bits
(
)
{
std
:
:
cout
<
<
__PRETTY_FUNCTION__
<
<
std
:
:
endl
;
int32_t
max_sample_24bits
=
(
2
<
<
22
)
-
1
;
int32_t
min_sample_24bits
=
-
(
2
<
<
22
)
;
int32_t
silence_24bits
=
0
;
ASSERT_EQ
(
LowestSample
<
T
>
(
)
Int24ToAudioSample
<
T
>
(
min_sample_24bits
)
)
;
ASSERT_EQ
(
Int24ToAudioSample
<
T
>
(
min_sample_24bits
)
LowestSample
<
T
>
(
)
)
;
if
constexpr
(
std
:
:
is_same_v
<
T
int32_t
>
)
{
const
int32_t
HIGHEST_FROM_24BITS
=
2147483392
;
ASSERT_EQ
(
HIGHEST_FROM_24BITS
Int24ToAudioSample
<
T
>
(
max_sample_24bits
)
)
;
ASSERT_EQ
(
Int24ToAudioSample
<
T
>
(
max_sample_24bits
)
HIGHEST_FROM_24BITS
)
;
}
else
{
ASSERT_EQ
(
HighestSample
<
T
>
(
)
Int24ToAudioSample
<
T
>
(
max_sample_24bits
)
)
;
ASSERT_EQ
(
Int24ToAudioSample
<
T
>
(
max_sample_24bits
)
HighestSample
<
T
>
(
)
)
;
}
ASSERT_EQ
(
Bias
<
T
>
(
)
Int24ToAudioSample
<
T
>
(
silence_24bits
)
)
;
ASSERT_EQ
(
Int24ToAudioSample
<
T
>
(
silence_24bits
)
Bias
<
T
>
(
)
)
;
}
TEST
(
AudioSampleFormat
Boundaries
)
{
TestSampleTypePair
<
uint8_t
uint8_t
>
(
)
;
TestSampleTypePair
<
uint8_t
int16_t
>
(
)
;
TestSampleTypePair
<
uint8_t
int32_t
>
(
)
;
TestSampleTypePair
<
uint8_t
float
>
(
)
;
TestSampleTypePair
<
int16_t
uint8_t
>
(
)
;
TestSampleTypePair
<
int16_t
int16_t
>
(
)
;
TestSampleTypePair
<
int16_t
int32_t
>
(
)
;
TestSampleTypePair
<
int16_t
float
>
(
)
;
TestSampleTypePair
<
int32_t
uint8_t
>
(
)
;
TestSampleTypePair
<
int32_t
int16_t
>
(
)
;
TestSampleTypePair
<
int32_t
int32_t
>
(
)
;
TestSampleTypePair
<
int32_t
float
>
(
)
;
TestSampleTypePair
<
float
uint8_t
>
(
)
;
TestSampleTypePair
<
float
int16_t
>
(
)
;
TestSampleTypePair
<
float
int32_t
>
(
)
;
TestSampleTypePair
<
float
float
>
(
)
;
TestSampleType24bits
<
uint8_t
>
(
)
;
TestSampleType24bits
<
int16_t
>
(
)
;
TestSampleType24bits
<
int32_t
>
(
)
;
TestSampleType24bits
<
float
>
(
)
;
}
