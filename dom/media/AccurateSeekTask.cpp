#
include
"
AccurateSeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
extern
LazyLogModule
gMediaSampleLog
;
#
undef
FMT
#
undef
DECODER_LOG
#
undef
SAMPLE_LOG
#
undef
DECODER_WARN
#
define
FMT
(
x
.
.
.
)
"
[
AccurateSeekTask
]
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
#
define
DECODER_LOG
(
.
.
.
)
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
(
FMT
(
__VA_ARGS__
)
)
)
#
define
SAMPLE_LOG
(
.
.
.
)
MOZ_LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
(
FMT
(
__VA_ARGS__
)
)
)
#
define
DECODER_WARN
(
.
.
.
)
NS_WARNING
(
nsPrintfCString
(
FMT
(
__VA_ARGS__
)
)
.
get
(
)
)
AccurateSeekTask
:
:
AccurateSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
const
SeekTarget
&
aTarget
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aEnd
int64_t
aCurrentMediaTime
)
:
SeekTask
(
aDecoderID
aThread
aReader
aTarget
)
{
AssertOwnerThread
(
)
;
}
AccurateSeekTask
:
:
~
AccurateSeekTask
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
AccurateSeekTask
:
:
Discard
(
)
{
AssertOwnerThread
(
)
;
RejectIfExist
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mIsDiscarded
=
true
;
}
int64_t
AccurateSeekTask
:
:
CalculateNewCurrentTime
(
)
const
{
AssertOwnerThread
(
)
;
return
0
;
}
void
AccurateSeekTask
:
:
HandleAudioDecoded
(
MediaData
*
aAudio
)
{
}
void
AccurateSeekTask
:
:
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
{
}
void
AccurateSeekTask
:
:
HandleNotDecoded
(
MediaData
:
:
Type
aType
const
MediaResult
&
aError
)
{
}
void
AccurateSeekTask
:
:
HandleAudioWaited
(
MediaData
:
:
Type
aType
)
{
}
void
AccurateSeekTask
:
:
HandleVideoWaited
(
MediaData
:
:
Type
aType
)
{
}
void
AccurateSeekTask
:
:
HandleNotWaited
(
const
WaitForDataRejectValue
&
aRejection
)
{
}
RefPtr
<
AccurateSeekTask
:
:
SeekTaskPromise
>
AccurateSeekTask
:
:
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
{
AssertOwnerThread
(
)
;
return
mSeekTaskPromise
.
Ensure
(
__func__
)
;
}
}
