#
include
"
AccurateSeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
extern
LazyLogModule
gMediaSampleLog
;
#
undef
FMT
#
undef
DECODER_LOG
#
undef
SAMPLE_LOG
#
undef
DECODER_WARN
#
define
FMT
(
x
.
.
.
)
"
[
AccurateSeekTask
]
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
#
define
DECODER_LOG
(
.
.
.
)
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
(
FMT
(
__VA_ARGS__
)
)
)
#
define
SAMPLE_LOG
(
.
.
.
)
MOZ_LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
(
FMT
(
__VA_ARGS__
)
)
)
#
define
DECODER_WARN
(
.
.
.
)
NS_WARNING
(
nsPrintfCString
(
FMT
(
__VA_ARGS__
)
)
.
get
(
)
)
AccurateSeekTask
:
:
AccurateSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
const
SeekTarget
&
aTarget
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aEnd
int64_t
aCurrentMediaTime
)
:
SeekTask
(
aDecoderID
aThread
aReader
aTarget
)
mCurrentTimeBeforeSeek
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
aCurrentMediaTime
)
)
mAudioRate
(
aInfo
.
mAudio
.
mRate
)
mDoneAudioSeeking
(
!
aInfo
.
HasAudio
(
)
|
|
aTarget
.
IsVideoOnly
(
)
)
mDoneVideoSeeking
(
!
aInfo
.
HasVideo
(
)
)
{
AssertOwnerThread
(
)
;
NS_ASSERTION
(
aEnd
.
ToMicroseconds
(
)
!
=
-
1
"
Should
know
end
time
by
now
"
)
;
mTarget
.
SetTime
(
std
:
:
max
(
media
:
:
TimeUnit
(
)
std
:
:
min
(
mTarget
.
GetTime
(
)
aEnd
)
)
)
;
SetCallbacks
(
)
;
}
AccurateSeekTask
:
:
~
AccurateSeekTask
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
AccurateSeekTask
:
:
Discard
(
)
{
AssertOwnerThread
(
)
;
RejectIfExist
(
__func__
)
;
mSeekRequest
.
DisconnectIfExists
(
)
;
CancelCallbacks
(
)
;
mIsDiscarded
=
true
;
}
bool
AccurateSeekTask
:
:
NeedToResetMDSM
(
)
const
{
AssertOwnerThread
(
)
;
return
true
;
}
RefPtr
<
AccurateSeekTask
:
:
SeekTaskPromise
>
AccurateSeekTask
:
:
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Begin
(
mReader
-
>
Seek
(
mTarget
aDuration
)
-
>
Then
(
OwnerThread
(
)
__func__
this
&
AccurateSeekTask
:
:
OnSeekResolved
&
AccurateSeekTask
:
:
OnSeekRejected
)
)
;
return
mSeekTaskPromise
.
Ensure
(
__func__
)
;
}
void
AccurateSeekTask
:
:
RequestAudioData
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mDoneAudioSeeking
)
;
MOZ_ASSERT
(
!
mReader
-
>
IsRequestingAudioData
(
)
)
;
MOZ_ASSERT
(
!
mReader
-
>
IsWaitingAudioData
(
)
)
;
mReader
-
>
RequestAudioData
(
)
;
}
void
AccurateSeekTask
:
:
RequestVideoData
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mDoneVideoSeeking
)
;
MOZ_ASSERT
(
!
mReader
-
>
IsRequestingVideoData
(
)
)
;
MOZ_ASSERT
(
!
mReader
-
>
IsWaitingVideoData
(
)
)
;
mReader
-
>
RequestVideoData
(
false
media
:
:
TimeUnit
(
)
)
;
}
nsresult
AccurateSeekTask
:
:
DropAudioUpToSeekTarget
(
MediaData
*
aSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
AudioData
>
audio
(
aSample
-
>
As
<
AudioData
>
(
)
)
;
MOZ_ASSERT
(
audio
&
&
mTarget
.
IsAccurate
(
)
)
;
CheckedInt64
sampleDuration
=
FramesToUsecs
(
audio
-
>
mFrames
mAudioRate
)
;
if
(
!
sampleDuration
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
audio
-
>
mTime
+
sampleDuration
.
value
(
)
<
=
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
)
{
return
NS_OK
;
}
if
(
audio
-
>
mTime
>
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
)
{
DECODER_WARN
(
"
Audio
not
synced
after
seek
maybe
a
poorly
muxed
file
?
"
)
;
mSeekedAudioData
=
audio
;
mDoneAudioSeeking
=
true
;
return
NS_OK
;
}
NS_ASSERTION
(
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
>
=
audio
-
>
mTime
"
Target
must
at
or
be
after
data
start
.
"
)
;
NS_ASSERTION
(
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
<
audio
-
>
mTime
+
sampleDuration
.
value
(
)
"
Data
must
end
after
target
.
"
)
;
CheckedInt64
framesToPrune
=
UsecsToFrames
(
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
-
audio
-
>
mTime
mAudioRate
)
;
if
(
!
framesToPrune
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
framesToPrune
.
value
(
)
>
audio
-
>
mFrames
)
{
DECODER_WARN
(
"
Can
'
t
prune
more
frames
that
we
have
!
"
)
;
return
NS_ERROR_FAILURE
;
}
uint32_t
frames
=
audio
-
>
mFrames
-
static_cast
<
uint32_t
>
(
framesToPrune
.
value
(
)
)
;
uint32_t
channels
=
audio
-
>
mChannels
;
AlignedAudioBuffer
audioData
(
frames
*
channels
)
;
if
(
!
audioData
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
memcpy
(
audioData
.
get
(
)
audio
-
>
mAudioData
.
get
(
)
+
(
framesToPrune
.
value
(
)
*
channels
)
frames
*
channels
*
sizeof
(
AudioDataValue
)
)
;
CheckedInt64
duration
=
FramesToUsecs
(
frames
mAudioRate
)
;
if
(
!
duration
.
isValid
(
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
AudioData
>
data
(
new
AudioData
(
audio
-
>
mOffset
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
duration
.
value
(
)
frames
Move
(
audioData
)
channels
audio
-
>
mRate
)
)
;
MOZ_ASSERT
(
!
mSeekedAudioData
"
Should
be
the
1st
sample
after
seeking
"
)
;
mSeekedAudioData
=
data
;
mDoneAudioSeeking
=
true
;
return
NS_OK
;
}
nsresult
AccurateSeekTask
:
:
DropVideoUpToSeekTarget
(
MediaData
*
aSample
)
{
AssertOwnerThread
(
)
;
RefPtr
<
VideoData
>
video
(
aSample
-
>
As
<
VideoData
>
(
)
)
;
MOZ_ASSERT
(
video
)
;
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
frame
[
%
lld
%
lld
]
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
)
;
const
int64_t
target
=
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
;
if
(
target
>
=
video
-
>
GetEndTime
(
)
)
{
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
pop
video
frame
[
%
lld
%
lld
]
target
=
%
lld
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
target
)
;
mFirstVideoFrameAfterSeek
=
video
;
}
else
{
if
(
target
>
=
video
-
>
mTime
&
&
video
-
>
GetEndTime
(
)
>
=
target
)
{
RefPtr
<
VideoData
>
temp
=
VideoData
:
:
ShallowCopyUpdateTimestamp
(
video
.
get
(
)
target
)
;
video
=
temp
;
}
mFirstVideoFrameAfterSeek
=
nullptr
;
DECODER_LOG
(
"
DropVideoUpToSeekTarget
(
)
found
video
frame
[
%
lld
%
lld
]
containing
target
=
%
lld
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
target
)
;
MOZ_ASSERT
(
!
mSeekedVideoData
"
Should
be
the
1st
sample
after
seeking
"
)
;
mSeekedVideoData
=
video
;
mDoneVideoSeeking
=
true
;
}
return
NS_OK
;
}
void
AccurateSeekTask
:
:
MaybeFinishSeek
(
)
{
AssertOwnerThread
(
)
;
if
(
mDoneAudioSeeking
&
&
mDoneVideoSeeking
)
{
Resolve
(
__func__
)
;
}
}
void
AccurateSeekTask
:
:
OnSeekResolved
(
media
:
:
TimeUnit
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Complete
(
)
;
if
(
!
mDoneVideoSeeking
)
{
RequestVideoData
(
)
;
}
if
(
!
mDoneAudioSeeking
)
{
RequestAudioData
(
)
;
}
}
void
AccurateSeekTask
:
:
OnSeekRejected
(
nsresult
aResult
)
{
AssertOwnerThread
(
)
;
mSeekRequest
.
Complete
(
)
;
MOZ_ASSERT
(
NS_FAILED
(
aResult
)
"
Cancels
should
also
disconnect
mSeekRequest
"
)
;
RejectIfExist
(
__func__
)
;
}
void
AccurateSeekTask
:
:
AdjustFastSeekIfNeeded
(
MediaData
*
aSample
)
{
AssertOwnerThread
(
)
;
if
(
mTarget
.
IsFast
(
)
&
&
mTarget
.
GetTime
(
)
>
mCurrentTimeBeforeSeek
&
&
aSample
-
>
mTime
<
mCurrentTimeBeforeSeek
.
ToMicroseconds
(
)
)
{
mTarget
.
SetType
(
SeekTarget
:
:
Accurate
)
;
}
}
void
AccurateSeekTask
:
:
OnAudioDecoded
(
MediaData
*
aAudioSample
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
RefPtr
<
MediaData
>
audio
(
aAudioSample
)
;
MOZ_ASSERT
(
audio
)
;
SAMPLE_LOG
(
"
OnAudioDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
audio
-
>
mTime
audio
-
>
GetEndTime
(
)
audio
-
>
mDiscontinuity
)
;
if
(
mTarget
.
IsVideoOnly
(
)
)
{
mSeekedAudioData
=
audio
.
forget
(
)
;
return
;
}
if
(
mFirstAudioSample
)
{
mFirstAudioSample
=
false
;
MOZ_ASSERT
(
audio
-
>
mDiscontinuity
)
;
}
AdjustFastSeekIfNeeded
(
audio
)
;
if
(
mTarget
.
IsFast
(
)
)
{
mSeekedAudioData
=
audio
;
mDoneAudioSeeking
=
true
;
}
else
if
(
NS_FAILED
(
DropAudioUpToSeekTarget
(
audio
)
)
)
{
CancelCallbacks
(
)
;
RejectIfExist
(
__func__
)
;
return
;
}
if
(
!
mDoneAudioSeeking
)
{
RequestAudioData
(
)
;
return
;
}
MaybeFinishSeek
(
)
;
}
void
AccurateSeekTask
:
:
OnNotDecoded
(
MediaData
:
:
Type
aType
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnNotDecoded
type
=
%
d
reason
=
%
u
"
aType
aReason
)
;
if
(
aType
=
=
MediaData
:
:
AUDIO_DATA
&
&
mTarget
.
IsVideoOnly
(
)
)
{
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
DECODE_ERROR
)
{
CancelCallbacks
(
)
;
RejectIfExist
(
__func__
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
WAITING_FOR_DATA
)
{
mReader
-
>
WaitForData
(
aType
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
CANCELED
)
{
if
(
aType
=
=
MediaData
:
:
AUDIO_DATA
)
{
RequestAudioData
(
)
;
}
else
{
RequestVideoData
(
)
;
}
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
END_OF_STREAM
)
{
if
(
aType
=
=
MediaData
:
:
AUDIO_DATA
)
{
mIsAudioQueueFinished
=
true
;
mDoneAudioSeeking
=
true
;
}
else
{
mIsVideoQueueFinished
=
true
;
mDoneVideoSeeking
=
true
;
if
(
mFirstVideoFrameAfterSeek
)
{
mSeekedVideoData
=
mFirstVideoFrameAfterSeek
.
forget
(
)
;
}
}
MaybeFinishSeek
(
)
;
}
}
void
AccurateSeekTask
:
:
OnVideoDecoded
(
MediaData
*
aVideoSample
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
RefPtr
<
MediaData
>
video
(
aVideoSample
)
;
MOZ_ASSERT
(
video
)
;
SAMPLE_LOG
(
"
OnVideoDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
video
-
>
mTime
video
-
>
GetEndTime
(
)
video
-
>
mDiscontinuity
)
;
if
(
mFirstVideoSample
)
{
mFirstVideoSample
=
false
;
MOZ_ASSERT
(
video
-
>
mDiscontinuity
)
;
}
AdjustFastSeekIfNeeded
(
video
)
;
if
(
mTarget
.
IsFast
(
)
)
{
mSeekedVideoData
=
video
;
mDoneVideoSeeking
=
true
;
}
else
if
(
NS_FAILED
(
DropVideoUpToSeekTarget
(
video
.
get
(
)
)
)
)
{
CancelCallbacks
(
)
;
RejectIfExist
(
__func__
)
;
return
;
}
if
(
!
mDoneVideoSeeking
)
{
RequestVideoData
(
)
;
return
;
}
MaybeFinishSeek
(
)
;
}
void
AccurateSeekTask
:
:
SetCallbacks
(
)
{
AssertOwnerThread
(
)
;
mAudioCallback
=
mReader
-
>
AudioCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
AudioCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
*
>
(
)
)
{
OnAudioDecoded
(
aData
.
as
<
MediaData
*
>
(
)
)
;
}
else
{
OnNotDecoded
(
MediaData
:
:
AUDIO_DATA
aData
.
as
<
MediaDecoderReader
:
:
NotDecodedReason
>
(
)
)
;
}
}
)
;
mVideoCallback
=
mReader
-
>
VideoCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
VideoCallbackData
aData
)
{
typedef
Tuple
<
MediaData
*
TimeStamp
>
Type
;
if
(
aData
.
is
<
Type
>
(
)
)
{
OnVideoDecoded
(
Get
<
0
>
(
aData
.
as
<
Type
>
(
)
)
)
;
}
else
{
OnNotDecoded
(
MediaData
:
:
VIDEO_DATA
aData
.
as
<
MediaDecoderReader
:
:
NotDecodedReason
>
(
)
)
;
}
}
)
;
mAudioWaitCallback
=
mReader
-
>
AudioWaitCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
WaitCallbackData
aData
)
{
if
(
mTarget
.
IsVideoOnly
(
)
)
{
return
;
}
if
(
aData
.
is
<
MediaData
:
:
Type
>
(
)
)
{
RequestAudioData
(
)
;
}
}
)
;
mVideoWaitCallback
=
mReader
-
>
VideoWaitCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
WaitCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
:
:
Type
>
(
)
)
{
RequestVideoData
(
)
;
}
}
)
;
}
void
AccurateSeekTask
:
:
CancelCallbacks
(
)
{
AssertOwnerThread
(
)
;
mAudioCallback
.
DisconnectIfExists
(
)
;
mVideoCallback
.
DisconnectIfExists
(
)
;
mAudioWaitCallback
.
DisconnectIfExists
(
)
;
mVideoWaitCallback
.
DisconnectIfExists
(
)
;
}
}
