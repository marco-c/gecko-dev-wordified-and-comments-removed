#
ifndef
DecoderDoctorDiagnostics_h_
#
define
DecoderDoctorDiagnostics_h_
#
include
"
nsString
.
h
"
class
nsIDocument
;
namespace
mozilla
{
class
DecoderDoctorDiagnostics
{
public
:
void
StoreFormatDiagnostics
(
nsIDocument
*
aDocument
const
nsAString
&
aFormat
bool
aCanPlay
const
char
*
aCallSite
)
;
void
StoreMediaKeySystemAccess
(
nsIDocument
*
aDocument
const
nsAString
&
aKeySystem
bool
aIsSupported
const
char
*
aCallSite
)
;
enum
DiagnosticsType
{
eUnsaved
eFormatSupportCheck
eMediaKeySystemAccessRequest
}
;
DiagnosticsType
Type
(
)
const
{
return
mDiagnosticsType
;
}
nsCString
GetDescription
(
)
const
;
const
nsAString
&
Format
(
)
const
{
return
mFormat
;
}
bool
CanPlay
(
)
const
{
return
mCanPlay
;
}
void
SetWMFFailedToLoad
(
)
{
mWMFFailedToLoad
=
true
;
}
bool
DidWMFFailToLoad
(
)
const
{
return
mWMFFailedToLoad
;
}
void
SetFFmpegFailedToLoad
(
)
{
mFFmpegFailedToLoad
=
true
;
}
bool
DidFFmpegFailToLoad
(
)
const
{
return
mFFmpegFailedToLoad
;
}
const
nsAString
&
KeySystem
(
)
const
{
return
mKeySystem
;
}
bool
IsKeySystemSupported
(
)
const
{
return
mIsKeySystemSupported
;
}
enum
KeySystemIssue
{
eUnset
eWidevineWithNoWMF
}
;
void
SetKeySystemIssue
(
KeySystemIssue
aKeySystemIssue
)
{
mKeySystemIssue
=
aKeySystemIssue
;
}
KeySystemIssue
GetKeySystemIssue
(
)
const
{
return
mKeySystemIssue
;
}
private
:
DiagnosticsType
mDiagnosticsType
=
eUnsaved
;
nsString
mFormat
;
bool
mCanPlay
=
false
;
bool
mWMFFailedToLoad
=
false
;
bool
mFFmpegFailedToLoad
=
false
;
nsString
mKeySystem
;
bool
mIsKeySystemSupported
=
false
;
KeySystemIssue
mKeySystemIssue
=
eUnset
;
}
;
}
#
endif
