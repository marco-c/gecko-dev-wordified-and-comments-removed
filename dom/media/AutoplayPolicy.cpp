#
include
"
AutoplayPolicy
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
AudioContext
.
h
"
#
include
"
mozilla
/
AutoplayPermissionManager
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElementBinding
.
h
"
#
include
"
nsIAutoplay
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
MediaManager
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
static
nsIDocument
*
ApproverDocOf
(
const
nsIDocument
&
aDocument
)
{
nsCOMPtr
<
nsIDocShell
>
ds
=
aDocument
.
GetDocShell
(
)
;
if
(
!
ds
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
rootTreeItem
;
ds
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
rootTreeItem
)
)
;
if
(
!
rootTreeItem
)
{
return
nullptr
;
}
return
rootTreeItem
-
>
GetDocument
(
)
;
}
static
bool
IsWindowAllowedToPlay
(
nsPIDOMWindowInner
*
aWindow
)
{
if
(
!
aWindow
)
{
return
false
;
}
MediaManager
*
manager
=
MediaManager
:
:
GetIfExists
(
)
;
if
(
manager
&
&
manager
-
>
IsActivelyCapturingOrHasAPermission
(
aWindow
-
>
WindowID
(
)
)
)
{
return
true
;
}
if
(
!
aWindow
-
>
GetExtantDoc
(
)
)
{
return
false
;
}
nsIDocument
*
approver
=
ApproverDocOf
(
*
aWindow
-
>
GetExtantDoc
(
)
)
;
if
(
nsContentUtils
:
:
IsExactSitePermAllow
(
approver
-
>
NodePrincipal
(
)
"
autoplay
-
media
"
)
)
{
return
true
;
}
if
(
approver
-
>
HasBeenUserGestureActivated
(
)
)
{
return
true
;
}
return
false
;
}
already_AddRefed
<
AutoplayPermissionManager
>
AutoplayPolicy
:
:
RequestFor
(
const
nsIDocument
&
aDocument
)
{
nsIDocument
*
document
=
ApproverDocOf
(
aDocument
)
;
if
(
!
document
)
{
return
nullptr
;
}
nsPIDOMWindowInner
*
window
=
document
-
>
GetInnerWindow
(
)
;
if
(
!
window
)
{
return
nullptr
;
}
return
window
-
>
GetAutoplayPermissionManager
(
)
;
}
static
uint32_t
DefaultAutoplayBehaviour
(
)
{
int
prefValue
=
Preferences
:
:
GetInt
(
"
media
.
autoplay
.
default
"
nsIAutoplay
:
:
ALLOWED
)
;
if
(
prefValue
<
nsIAutoplay
:
:
ALLOWED
|
|
prefValue
>
nsIAutoplay
:
:
PROMPT
)
{
return
nsIAutoplay
:
:
ALLOWED
;
}
return
prefValue
;
}
static
bool
IsMediaElementAllowedToPlay
(
const
HTMLMediaElement
&
aElement
)
{
return
(
(
aElement
.
Volume
(
)
=
=
0
.
0
|
|
aElement
.
Muted
(
)
)
&
&
Preferences
:
:
GetBool
(
"
media
.
autoplay
.
allow
-
muted
"
true
)
)
|
|
IsWindowAllowedToPlay
(
aElement
.
OwnerDoc
(
)
-
>
GetInnerWindow
(
)
)
;
}
bool
AutoplayPolicy
:
:
WouldBeAllowedToPlayIfAutoplayDisabled
(
const
HTMLMediaElement
&
aElement
)
{
return
IsMediaElementAllowedToPlay
(
aElement
)
;
}
uint32_t
AutoplayPolicy
:
:
IsAllowedToPlay
(
const
HTMLMediaElement
&
aElement
)
{
const
uint32_t
autoplayDefault
=
DefaultAutoplayBehaviour
(
)
;
if
(
!
Preferences
:
:
GetBool
(
"
media
.
autoplay
.
enabled
.
user
-
gestures
-
needed
"
false
)
)
{
return
(
autoplayDefault
=
=
nsIAutoplay
:
:
ALLOWED
|
|
aElement
.
IsBlessed
(
)
|
|
EventStateManager
:
:
IsHandlingUserInput
(
)
)
?
nsIAutoplay
:
:
ALLOWED
:
nsIAutoplay
:
:
BLOCKED
;
}
if
(
IsMediaElementAllowedToPlay
(
aElement
)
)
{
return
nsIAutoplay
:
:
ALLOWED
;
}
return
autoplayDefault
;
}
bool
AutoplayPolicy
:
:
IsAudioContextAllowedToPlay
(
NotNull
<
AudioContext
*
>
aContext
)
{
if
(
!
Preferences
:
:
GetBool
(
"
media
.
autoplay
.
block
-
webaudio
"
false
)
)
{
return
true
;
}
if
(
DefaultAutoplayBehaviour
(
)
=
=
nsIAutoplay
:
:
ALLOWED
)
{
return
true
;
}
if
(
!
Preferences
:
:
GetBool
(
"
media
.
autoplay
.
enabled
.
user
-
gestures
-
needed
"
false
)
)
{
return
true
;
}
if
(
aContext
-
>
IsOffline
(
)
)
{
return
true
;
}
if
(
IsWindowAllowedToPlay
(
aContext
-
>
GetOwner
(
)
)
)
{
return
true
;
}
return
false
;
}
}
}
