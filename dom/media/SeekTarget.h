#
ifndef
SEEK_TARGET_H
#
define
SEEK_TARGET_H
#
include
"
TimeUnits
.
h
"
namespace
mozilla
{
enum
class
MediaDecoderEventVisibility
:
int8_t
{
Observable
Suppressed
}
;
struct
SeekTarget
{
enum
Type
{
Invalid
PrevSyncPoint
Accurate
}
;
SeekTarget
(
)
:
mType
(
SeekTarget
:
:
Invalid
)
mEventVisibility
(
MediaDecoderEventVisibility
:
:
Observable
)
mTime
(
media
:
:
TimeUnit
:
:
Invalid
(
)
)
{
}
SeekTarget
(
int64_t
aTimeUsecs
Type
aType
MediaDecoderEventVisibility
aEventVisibility
=
MediaDecoderEventVisibility
:
:
Observable
)
:
mType
(
aType
)
mEventVisibility
(
aEventVisibility
)
mTime
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
aTimeUsecs
)
)
{
}
SeekTarget
(
const
media
:
:
TimeUnit
&
aTime
Type
aType
MediaDecoderEventVisibility
aEventVisibility
=
MediaDecoderEventVisibility
:
:
Observable
)
:
mType
(
aType
)
mEventVisibility
(
aEventVisibility
)
mTime
(
aTime
)
{
}
SeekTarget
(
const
SeekTarget
&
aOther
)
:
mType
(
aOther
.
mType
)
mEventVisibility
(
aOther
.
mEventVisibility
)
mTime
(
aOther
.
mTime
)
{
}
bool
IsValid
(
)
const
{
return
mType
!
=
SeekTarget
:
:
Invalid
;
}
void
Reset
(
)
{
mTime
=
media
:
:
TimeUnit
:
:
Invalid
(
)
;
mType
=
SeekTarget
:
:
Invalid
;
}
media
:
:
TimeUnit
GetTime
(
)
const
{
NS_ASSERTION
(
mTime
.
IsValid
(
)
"
Invalid
SeekTarget
"
)
;
return
mTime
;
}
void
SetTime
(
const
media
:
:
TimeUnit
&
aTime
)
{
NS_ASSERTION
(
aTime
.
IsValid
(
)
"
Invalid
SeekTarget
destination
"
)
;
mTime
=
aTime
;
}
Type
mType
;
MediaDecoderEventVisibility
mEventVisibility
;
private
:
media
:
:
TimeUnit
mTime
;
}
;
}
#
endif
