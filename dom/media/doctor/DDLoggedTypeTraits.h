#
ifndef
DDLoggedTypeTraits_h_
#
define
DDLoggedTypeTraits_h_
#
include
"
mozilla
/
TypeTraits
.
h
"
namespace
mozilla
{
template
<
typename
T
>
struct
DDLoggedTypeTraits
;
#
define
DDLoggedTypeName
(
TYPE
)
\
template
<
>
\
struct
DDLoggedTypeTraits
<
TYPE
>
\
{
\
using
Type
=
TYPE
;
\
static
constexpr
const
char
*
Name
(
)
{
return
#
TYPE
;
}
\
using
HasBase
=
FalseType
;
\
using
BaseType
=
TYPE
;
\
static
constexpr
const
char
*
BaseTypeName
(
)
{
return
"
"
;
}
\
}
#
define
DDLoggedTypeNameAndBase
(
TYPE
BASE
)
\
template
<
>
\
struct
DDLoggedTypeTraits
<
TYPE
>
\
{
\
using
Type
=
TYPE
;
\
static
constexpr
const
char
*
Name
(
)
{
return
#
TYPE
;
}
\
using
HasBase
=
TrueType
;
\
using
BaseType
=
BASE
;
\
static
constexpr
const
char
*
BaseTypeName
(
)
\
{
\
return
DDLoggedTypeTraits
<
BASE
>
:
:
Name
(
)
;
\
}
\
}
#
define
DDLoggedTypeCustomName
(
TYPE
NAME
)
\
template
<
>
\
struct
DDLoggedTypeTraits
<
TYPE
>
\
{
\
using
Type
=
TYPE
;
\
static
constexpr
const
char
*
Name
(
)
{
return
#
NAME
;
}
\
using
HasBase
=
FalseType
;
\
using
BaseType
=
TYPE
;
\
static
constexpr
const
char
*
BaseTypeName
(
)
{
return
"
"
;
}
\
}
#
define
DDLoggedTypeCustomNameAndBase
(
TYPE
NAME
BASE
)
\
template
<
>
\
struct
DDLoggedTypeTraits
<
TYPE
>
\
{
\
using
Type
=
TYPE
;
\
static
constexpr
const
char
*
Name
(
)
{
return
#
NAME
;
}
\
using
HasBase
=
TrueType
;
\
using
BaseType
=
BASE
;
\
static
constexpr
const
char
*
BaseTypeName
(
)
\
{
\
return
DDLoggedTypeTraits
<
BASE
>
:
:
Name
(
)
;
\
}
\
}
#
define
DDLoggedTypeDeclName
(
TYPE
)
\
class
TYPE
;
\
DDLoggedTypeName
(
TYPE
)
;
#
define
DDLoggedTypeDeclNameAndBase
(
TYPE
BASE
)
\
class
TYPE
;
\
DDLoggedTypeNameAndBase
(
TYPE
BASE
)
;
#
define
DDLoggedTypeDeclCustomName
(
TYPE
NAME
)
\
class
TYPE
;
\
DDLoggedTypeCustomName
(
TYPE
NAME
)
;
#
define
DDLoggedTypeDeclCustomNameAndBase
(
TYPE
NAME
BASE
)
\
class
TYPE
;
\
DDLoggedTypeCustomNameAndBase
(
TYPE
NAME
BASE
)
;
}
class
nsIDocument
;
class
nsPIDOMWindowInner
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
dom
{
class
HTMLAudioElement
;
class
HTMLMediaElement
;
class
HTMLVideoElement
;
}
DDLoggedTypeName
(
nsIDocument
)
;
DDLoggedTypeName
(
nsPIDOMWindowInner
)
;
DDLoggedTypeName
(
nsPIDOMWindowOuter
)
;
DDLoggedTypeName
(
dom
:
:
HTMLMediaElement
)
;
DDLoggedTypeNameAndBase
(
dom
:
:
HTMLAudioElement
dom
:
:
HTMLMediaElement
)
;
DDLoggedTypeNameAndBase
(
dom
:
:
HTMLVideoElement
dom
:
:
HTMLMediaElement
)
;
}
#
endif
