#
ifndef
mozilla_RollingNumber_h_
#
define
mozilla_RollingNumber_h_
#
include
<
limits
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
namespace
mozilla
{
template
<
typename
T
>
class
RollingNumber
{
static_assert
(
!
std
:
:
numeric_limits
<
T
>
:
:
is_signed
"
RollingNumber
only
accepts
unsigned
number
types
"
)
;
public
:
using
ValueType
=
T
;
RollingNumber
(
)
:
mIndex
(
0
)
{
}
explicit
RollingNumber
(
ValueType
aIndex
)
:
mIndex
(
aIndex
)
{
}
RollingNumber
(
const
RollingNumber
&
)
=
default
;
RollingNumber
&
operator
=
(
const
RollingNumber
&
)
=
default
;
ValueType
Value
(
)
const
{
return
mIndex
;
}
RollingNumber
&
operator
+
+
(
)
{
+
+
mIndex
;
return
*
this
;
}
RollingNumber
operator
+
+
(
int
)
{
return
RollingNumber
{
mIndex
+
+
}
;
}
RollingNumber
&
operator
-
-
(
)
{
-
-
mIndex
;
return
*
this
;
}
RollingNumber
operator
-
-
(
int
)
{
return
RollingNumber
{
mIndex
-
-
}
;
}
RollingNumber
&
operator
+
=
(
const
ValueType
&
aIncrement
)
{
MOZ_ASSERT
(
aIncrement
<
=
MaxDiff
)
;
mIndex
+
=
aIncrement
;
return
*
this
;
}
RollingNumber
operator
+
(
const
ValueType
&
aIncrement
)
const
{
RollingNumber
n
=
*
this
;
return
n
+
=
aIncrement
;
}
RollingNumber
&
operator
-
=
(
const
ValueType
&
aDecrement
)
{
MOZ_ASSERT
(
aDecrement
<
=
MaxDiff
)
;
mIndex
-
=
aDecrement
;
return
*
this
;
}
RollingNumber
operator
-
(
const
ValueType
&
aDecrement
)
const
{
RollingNumber
n
=
*
this
;
return
n
-
=
aDecrement
;
}
ValueType
operator
-
(
const
RollingNumber
&
aOther
)
const
{
ValueType
diff
=
mIndex
-
aOther
.
mIndex
;
MOZ_ASSERT
(
diff
<
=
MaxDiff
)
;
return
diff
;
}
bool
operator
=
=
(
const
RollingNumber
&
aOther
)
const
{
return
mIndex
=
=
aOther
.
mIndex
;
}
bool
operator
!
=
(
const
RollingNumber
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
operator
<
(
const
RollingNumber
&
aOther
)
const
{
const
T
&
a
=
mIndex
;
const
T
&
b
=
aOther
.
mIndex
;
const
bool
lessThanOther
=
static_cast
<
ValueType
>
(
a
-
b
)
>
MidWay
;
MOZ_ASSERT
(
(
lessThanOther
?
(
b
-
a
)
:
(
a
-
b
)
)
<
=
MaxDiff
)
;
return
lessThanOther
;
}
bool
operator
<
=
(
const
RollingNumber
&
aOther
)
const
{
const
T
&
a
=
mIndex
;
const
T
&
b
=
aOther
.
mIndex
;
const
bool
lessishThanOther
=
static_cast
<
ValueType
>
(
b
-
a
)
<
=
MidWay
;
MOZ_ASSERT
(
(
lessishThanOther
?
(
b
-
a
)
:
(
a
-
b
)
)
<
=
MaxDiff
)
;
return
lessishThanOther
;
}
bool
operator
>
=
(
const
RollingNumber
&
aOther
)
const
{
const
T
&
a
=
mIndex
;
const
T
&
b
=
aOther
.
mIndex
;
const
bool
greaterishThanOther
=
static_cast
<
ValueType
>
(
a
-
b
)
<
=
MidWay
;
MOZ_ASSERT
(
(
greaterishThanOther
?
(
a
-
b
)
:
(
b
-
a
)
)
<
=
MaxDiff
)
;
return
greaterishThanOther
;
}
bool
operator
>
(
const
RollingNumber
&
aOther
)
const
{
const
T
&
a
=
mIndex
;
const
T
&
b
=
aOther
.
mIndex
;
const
bool
greaterThanOther
=
static_cast
<
ValueType
>
(
b
-
a
)
>
MidWay
;
MOZ_ASSERT
(
(
greaterThanOther
?
(
a
-
b
)
:
(
b
-
a
)
)
<
=
MaxDiff
)
;
return
greaterThanOther
;
}
private
:
static
const
T
MidWay
=
std
:
:
numeric_limits
<
T
>
:
:
max
(
)
/
2
;
#
ifdef
DEBUG
static
const
T
MaxDiff
=
std
:
:
numeric_limits
<
T
>
:
:
max
(
)
/
4
;
#
endif
ValueType
mIndex
;
}
;
}
#
endif
