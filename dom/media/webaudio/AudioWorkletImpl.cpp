#
include
"
AudioWorkletImpl
.
h
"
#
include
"
AudioContext
.
h
"
#
include
"
AudioNodeStream
.
h
"
#
include
"
mozilla
/
dom
/
AudioWorkletBinding
.
h
"
#
include
"
mozilla
/
dom
/
AudioWorkletGlobalScope
.
h
"
#
include
"
mozilla
/
dom
/
Worklet
.
h
"
#
include
"
mozilla
/
dom
/
WorkletThread
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
namespace
mozilla
{
already_AddRefed
<
dom
:
:
Worklet
>
AudioWorkletImpl
:
:
CreateWorklet
(
dom
:
:
AudioContext
*
aContext
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
aContext
-
>
GetOwner
(
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsGlobalWindowInner
:
:
Cast
(
window
)
-
>
GetPrincipal
(
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
AudioWorkletImpl
>
impl
=
new
AudioWorkletImpl
(
window
principal
aContext
-
>
DestinationStream
(
)
)
;
return
MakeAndAddRef
<
dom
:
:
Worklet
>
(
window
std
:
:
move
(
impl
)
)
;
}
AudioWorkletImpl
:
:
AudioWorkletImpl
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
AudioNodeStream
*
aDestinationStream
)
:
WorkletImpl
(
aWindow
aPrincipal
)
mDestinationStream
(
aDestinationStream
)
{
}
AudioWorkletImpl
:
:
~
AudioWorkletImpl
(
)
=
default
;
JSObject
*
AudioWorkletImpl
:
:
WrapWorklet
(
JSContext
*
aCx
dom
:
:
Worklet
*
aWorklet
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
dom
:
:
AudioWorklet_Binding
:
:
Wrap
(
aCx
aWorklet
aGivenProto
)
;
}
already_AddRefed
<
dom
:
:
WorkletGlobalScope
>
AudioWorkletImpl
:
:
ConstructGlobalScope
(
)
{
dom
:
:
WorkletThread
:
:
AssertIsOnWorkletThread
(
)
;
return
MakeAndAddRef
<
dom
:
:
AudioWorkletGlobalScope
>
(
this
)
;
}
}
