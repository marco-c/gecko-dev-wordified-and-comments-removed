#
ifndef
AudioParamTimeline_h_
#
define
AudioParamTimeline_h_
#
include
"
AudioEventTimeline
.
h
"
#
include
"
AudioNodeStream
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
AudioSegment
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AudioParamTimeline
:
public
AudioEventTimeline
{
typedef
AudioEventTimeline
BaseClass
;
public
:
explicit
AudioParamTimeline
(
float
aDefaultValue
)
:
BaseClass
(
aDefaultValue
)
{
}
AudioNodeStream
*
Stream
(
)
const
{
return
mStream
;
}
bool
HasSimpleValue
(
)
const
{
return
BaseClass
:
:
HasSimpleValue
(
)
&
&
(
!
mStream
|
|
mStream
-
>
LastChunks
(
)
[
0
]
.
IsNull
(
)
)
;
}
template
<
class
TimeType
>
float
GetValueAtTime
(
TimeType
aTime
)
{
return
GetValueAtTime
(
aTime
0
)
;
}
template
<
typename
TimeType
>
void
InsertEvent
(
const
AudioTimelineEvent
&
aEvent
)
{
if
(
aEvent
.
mType
=
=
AudioTimelineEvent
:
:
Cancel
)
{
CancelScheduledValues
(
aEvent
.
Time
<
TimeType
>
(
)
)
;
return
;
}
if
(
aEvent
.
mType
=
=
AudioTimelineEvent
:
:
Stream
)
{
mStream
=
aEvent
.
mStream
;
return
;
}
if
(
aEvent
.
mType
=
=
AudioTimelineEvent
:
:
SetValue
)
{
AudioEventTimeline
:
:
SetValue
(
aEvent
.
mValue
)
;
return
;
}
AudioEventTimeline
:
:
InsertEvent
<
TimeType
>
(
aEvent
)
;
}
template
<
class
TimeType
>
float
GetValueAtTime
(
TimeType
aTime
size_t
aCounter
)
;
template
<
class
TimeType
>
void
GetValuesAtTime
(
TimeType
aTime
float
*
aBuffer
const
size_t
aSize
)
;
virtual
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
mStream
?
mStream
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
:
0
;
}
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
private
:
float
AudioNodeInputValue
(
size_t
aCounter
)
const
;
protected
:
RefPtr
<
AudioNodeStream
>
mStream
;
}
;
template
<
>
inline
float
AudioParamTimeline
:
:
GetValueAtTime
(
double
aTime
size_t
aCounter
)
{
MOZ_ASSERT
(
!
aCounter
)
;
return
BaseClass
:
:
GetValueAtTime
(
aTime
)
;
}
template
<
>
inline
float
AudioParamTimeline
:
:
GetValueAtTime
(
int64_t
aTime
size_t
aCounter
)
{
MOZ_ASSERT
(
aCounter
<
WEBAUDIO_BLOCK_SIZE
)
;
MOZ_ASSERT
(
!
aCounter
|
|
!
HasSimpleValue
(
)
)
;
return
BaseClass
:
:
GetValueAtTime
(
static_cast
<
int64_t
>
(
aTime
+
aCounter
)
)
+
(
mStream
?
AudioNodeInputValue
(
aCounter
)
:
0
.
0f
)
;
}
template
<
>
inline
void
AudioParamTimeline
:
:
GetValuesAtTime
(
double
aTime
float
*
aBuffer
const
size_t
aSize
)
{
MOZ_ASSERT
(
aBuffer
)
;
MOZ_ASSERT
(
aSize
=
=
1
)
;
*
aBuffer
=
BaseClass
:
:
GetValueAtTime
(
aTime
)
;
}
template
<
>
inline
void
AudioParamTimeline
:
:
GetValuesAtTime
(
int64_t
aTime
float
*
aBuffer
const
size_t
aSize
)
{
MOZ_ASSERT
(
aBuffer
)
;
MOZ_ASSERT
(
aSize
<
=
WEBAUDIO_BLOCK_SIZE
)
;
MOZ_ASSERT
(
aSize
=
=
1
|
|
!
HasSimpleValue
(
)
)
;
BaseClass
:
:
GetValuesAtTime
(
aTime
aBuffer
aSize
)
;
if
(
mStream
)
{
uint32_t
blockOffset
=
aTime
%
WEBAUDIO_BLOCK_SIZE
;
MOZ_ASSERT
(
blockOffset
+
aSize
<
=
WEBAUDIO_BLOCK_SIZE
)
;
for
(
size_t
i
=
0
;
i
<
aSize
;
+
+
i
)
{
aBuffer
[
i
]
+
=
AudioNodeInputValue
(
blockOffset
+
i
)
;
}
}
}
}
}
#
endif
