#
include
"
AudioBlock
.
h
"
namespace
mozilla
{
class
AudioBlockBuffer
final
:
public
ThreadSharedObject
{
public
:
float
*
ChannelData
(
uint32_t
aChannel
)
{
return
reinterpret_cast
<
float
*
>
(
this
+
1
)
+
aChannel
*
WEBAUDIO_BLOCK_SIZE
;
}
static
already_AddRefed
<
AudioBlockBuffer
>
Create
(
uint32_t
aChannelCount
)
{
CheckedInt
<
size_t
>
size
=
WEBAUDIO_BLOCK_SIZE
;
size
*
=
aChannelCount
;
size
*
=
sizeof
(
float
)
;
size
+
=
sizeof
(
AudioBlockBuffer
)
;
if
(
!
size
.
isValid
(
)
)
{
MOZ_CRASH
(
)
;
}
void
*
m
=
moz_xmalloc
(
size
.
value
(
)
)
;
nsRefPtr
<
AudioBlockBuffer
>
p
=
new
(
m
)
AudioBlockBuffer
(
)
;
NS_ASSERTION
(
(
reinterpret_cast
<
char
*
>
(
p
.
get
(
)
+
1
)
-
reinterpret_cast
<
char
*
>
(
p
.
get
(
)
)
)
%
4
=
=
0
"
AudioBlockBuffers
should
be
at
least
4
-
byte
aligned
"
)
;
return
p
.
forget
(
)
;
}
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
private
:
AudioBlockBuffer
(
)
{
}
}
;
void
AllocateAudioBlock
(
uint32_t
aChannelCount
AudioChunk
*
aChunk
)
{
if
(
aChunk
-
>
mBuffer
&
&
!
aChunk
-
>
mBuffer
-
>
IsShared
(
)
&
&
aChunk
-
>
ChannelCount
(
)
=
=
aChannelCount
)
{
MOZ_ASSERT
(
aChunk
-
>
mBufferFormat
=
=
AUDIO_FORMAT_FLOAT32
)
;
MOZ_ASSERT
(
aChunk
-
>
mDuration
=
=
WEBAUDIO_BLOCK_SIZE
)
;
aChunk
-
>
mVolume
=
1
.
0f
;
return
;
}
nsRefPtr
<
AudioBlockBuffer
>
buffer
=
AudioBlockBuffer
:
:
Create
(
aChannelCount
)
;
aChunk
-
>
mDuration
=
WEBAUDIO_BLOCK_SIZE
;
aChunk
-
>
mChannelData
.
SetLength
(
aChannelCount
)
;
for
(
uint32_t
i
=
0
;
i
<
aChannelCount
;
+
+
i
)
{
aChunk
-
>
mChannelData
[
i
]
=
buffer
-
>
ChannelData
(
i
)
;
}
aChunk
-
>
mBuffer
=
buffer
.
forget
(
)
;
aChunk
-
>
mVolume
=
1
.
0f
;
aChunk
-
>
mBufferFormat
=
AUDIO_FORMAT_FLOAT32
;
}
}
