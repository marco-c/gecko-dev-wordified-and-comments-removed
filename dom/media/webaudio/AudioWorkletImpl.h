#
ifndef
AudioWorkletImpl_h
#
define
AudioWorkletImpl_h
#
include
"
mozilla
/
dom
/
AudioWorkletGlobalScope
.
h
"
#
include
"
mozilla
/
dom
/
MessagePort
.
h
"
#
include
"
mozilla
/
dom
/
WorkletImpl
.
h
"
namespace
mozilla
{
class
AudioNodeTrack
;
namespace
dom
{
class
AudioContext
;
class
AudioWorklet
;
}
class
AudioWorkletImpl
final
:
public
WorkletImpl
{
public
:
static
already_AddRefed
<
dom
:
:
AudioWorklet
>
CreateWorklet
(
dom
:
:
AudioContext
*
aContext
ErrorResult
&
aRv
)
;
JSObject
*
WrapWorklet
(
JSContext
*
aCx
dom
:
:
Worklet
*
aWorklet
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsresult
SendControlMessage
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
override
;
nsContentPolicyType
ContentPolicyType
(
)
const
override
{
return
nsIContentPolicy
:
:
TYPE_INTERNAL_AUDIOWORKLET
;
}
dom
:
:
AudioWorkletGlobalScope
*
GetGlobalScope
(
)
{
return
static_cast
<
dom
:
:
AudioWorkletGlobalScope
*
>
(
WorkletImpl
:
:
GetGlobalScope
(
)
)
;
}
AudioNodeTrack
*
DestinationTrack
(
)
const
{
return
mDestinationTrack
;
}
void
OnAddModuleStarted
(
)
const
override
;
void
OnAddModulePromiseSettled
(
)
const
override
;
protected
:
already_AddRefed
<
dom
:
:
WorkletGlobalScope
>
ConstructGlobalScope
(
JSContext
*
aCx
)
override
;
private
:
AudioWorkletImpl
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
AudioNodeTrack
*
aDestinationTrack
dom
:
:
UniqueMessagePortId
&
&
aPortIdentifier
)
;
~
AudioWorkletImpl
(
)
;
const
RefPtr
<
AudioNodeTrack
>
mDestinationTrack
;
dom
:
:
UniqueMessagePortId
mGlobalScopePortIdentifier
;
}
;
}
#
endif
