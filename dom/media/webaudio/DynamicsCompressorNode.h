#
ifndef
DynamicsCompressorNode_h_
#
define
DynamicsCompressorNode_h_
#
include
"
AudioNode
.
h
"
#
include
"
AudioParam
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AudioContext
;
struct
DynamicsCompressorOptions
;
class
DynamicsCompressorNode
final
:
public
AudioNode
{
public
:
static
already_AddRefed
<
DynamicsCompressorNode
>
Create
(
AudioContext
&
aAudioContext
const
DynamicsCompressorOptions
&
aOptions
ErrorResult
&
aRv
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DynamicsCompressorNode
AudioNode
)
static
already_AddRefed
<
DynamicsCompressorNode
>
Constructor
(
const
GlobalObject
&
aGlobal
AudioContext
&
aAudioContext
const
DynamicsCompressorOptions
&
aOptions
ErrorResult
&
aRv
)
{
return
Create
(
aAudioContext
aOptions
aRv
)
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
AudioParam
*
Threshold
(
)
const
{
return
mThreshold
;
}
AudioParam
*
Knee
(
)
const
{
return
mKnee
;
}
AudioParam
*
Ratio
(
)
const
{
return
mRatio
;
}
AudioParam
*
Attack
(
)
const
{
return
mAttack
;
}
AudioParam
*
GetRelease
(
)
const
{
return
mRelease
;
}
float
Reduction
(
)
const
{
return
mReduction
;
}
const
char
*
NodeType
(
)
const
override
{
return
"
DynamicsCompressorNode
"
;
}
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
void
SetReduction
(
float
aReduction
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mReduction
=
aReduction
;
}
private
:
explicit
DynamicsCompressorNode
(
AudioContext
*
aContext
)
;
~
DynamicsCompressorNode
(
)
=
default
;
RefPtr
<
AudioParam
>
mThreshold
;
RefPtr
<
AudioParam
>
mKnee
;
RefPtr
<
AudioParam
>
mRatio
;
float
mReduction
;
RefPtr
<
AudioParam
>
mAttack
;
RefPtr
<
AudioParam
>
mRelease
;
}
;
}
}
#
endif
