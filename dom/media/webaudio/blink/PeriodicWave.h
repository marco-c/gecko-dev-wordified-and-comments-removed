#
ifndef
PeriodicWave_h
#
define
PeriodicWave_h
#
include
"
mozilla
/
dom
/
OscillatorNodeBinding
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
nsTArray
.
h
>
#
include
"
AlignedTArray
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
namespace
WebCore
{
typedef
AlignedTArray
<
float
>
AlignedAudioFloatArray
;
typedef
nsTArray
<
float
>
AudioFloatArray
;
using
mozilla
:
:
UniquePtr
;
class
PeriodicWave
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WebCore
:
:
PeriodicWave
)
;
static
already_AddRefed
<
PeriodicWave
>
createSine
(
float
sampleRate
)
;
static
already_AddRefed
<
PeriodicWave
>
createSquare
(
float
sampleRate
)
;
static
already_AddRefed
<
PeriodicWave
>
createSawtooth
(
float
sampleRate
)
;
static
already_AddRefed
<
PeriodicWave
>
createTriangle
(
float
sampleRate
)
;
static
already_AddRefed
<
PeriodicWave
>
create
(
float
sampleRate
const
float
*
real
const
float
*
imag
size_t
numberOfComponents
bool
disableNormalization
)
;
void
waveDataForFundamentalFrequency
(
float
float
*
&
lowerWaveData
float
*
&
higherWaveData
float
&
tableInterpolationFactor
)
;
float
rateScale
(
)
const
{
return
m_rateScale
;
}
unsigned
periodicWaveSize
(
)
const
{
return
m_periodicWaveSize
;
}
float
sampleRate
(
)
const
{
return
m_sampleRate
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
explicit
PeriodicWave
(
float
sampleRate
size_t
numberOfComponents
bool
disableNormalization
)
;
~
PeriodicWave
(
)
=
default
;
void
generateBasicWaveform
(
mozilla
:
:
dom
:
:
OscillatorType
)
;
float
m_sampleRate
;
unsigned
m_periodicWaveSize
;
unsigned
m_numberOfRanges
;
float
m_centsPerRange
;
unsigned
m_numberOfComponents
;
UniquePtr
<
AudioFloatArray
>
m_realComponents
;
UniquePtr
<
AudioFloatArray
>
m_imagComponents
;
float
m_lowestFundamentalFrequency
;
float
m_rateScale
;
unsigned
numberOfRanges
(
)
const
{
return
m_numberOfRanges
;
}
unsigned
maxNumberOfPartials
(
)
const
;
unsigned
numberOfPartialsForRange
(
unsigned
rangeIndex
)
const
;
void
createBandLimitedTables
(
float
fundamentalFrequency
unsigned
rangeIndex
)
;
unsigned
m_maxPartialsInBandLimitedTable
;
float
m_normalizationScale
;
bool
m_disableNormalization
;
nsTArray
<
UniquePtr
<
AlignedAudioFloatArray
>
>
m_bandLimitedTables
;
}
;
}
#
endif
