#
ifndef
ReverbConvolver_h
#
define
ReverbConvolver_h
#
include
"
ReverbAccumulationBuffer
.
h
"
#
include
"
ReverbInputBuffer
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
ifdef
LOG
#
undef
LOG
#
endif
#
include
"
base
/
thread
.
h
"
#
include
<
atomic
>
namespace
WebCore
{
using
mozilla
:
:
UniquePtr
;
class
ReverbConvolverStage
;
class
ReverbConvolver
{
public
:
ReverbConvolver
(
const
float
*
impulseResponseData
size_t
impulseResponseLength
size_t
maxFFTSize
size_t
convolverRenderPhase
bool
useBackgroundThreads
bool
*
aAllocationFailure
)
;
~
ReverbConvolver
(
)
;
void
process
(
const
float
*
sourceChannelData
float
*
destinationChannelData
)
;
size_t
impulseResponseLength
(
)
const
{
return
m_impulseResponseLength
;
}
ReverbInputBuffer
*
inputBuffer
(
)
{
return
&
m_inputBuffer
;
}
bool
useBackgroundThreads
(
)
const
{
return
m_useBackgroundThreads
;
}
void
backgroundThreadEntry
(
)
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
nsTArray
<
UniquePtr
<
ReverbConvolverStage
>
>
m_stages
;
nsTArray
<
UniquePtr
<
ReverbConvolverStage
>
>
m_backgroundStages
;
size_t
m_impulseResponseLength
;
ReverbAccumulationBuffer
m_accumulationBuffer
;
ReverbInputBuffer
m_inputBuffer
;
base
:
:
Thread
m_backgroundThread
;
mozilla
:
:
Monitor
m_backgroundThreadMonitor
MOZ_UNANNOTATED
;
bool
m_useBackgroundThreads
;
std
:
:
atomic
<
bool
>
m_wantsToExit
;
std
:
:
atomic
<
bool
>
m_moreInputBuffered
;
}
;
}
#
endif
