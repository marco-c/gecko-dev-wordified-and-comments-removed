#
ifndef
DenormalDisabler_h
#
define
DenormalDisabler_h
#
include
<
cmath
>
#
include
<
cinttypes
>
#
include
<
cstring
>
#
include
<
float
.
h
>
namespace
WebCore
{
#
if
defined
(
XP_WIN
)
&
&
defined
(
_MSC_VER
)
#
define
HAVE_DENORMAL
1
#
endif
#
if
defined
(
__GNUC__
)
&
&
defined
(
__SSE__
)
#
define
HAVE_DENORMAL
1
#
endif
#
if
defined
(
__arm__
)
|
|
defined
(
__aarch64__
)
#
define
HAVE_DENORMAL
1
#
endif
#
ifdef
HAVE_DENORMAL
class
DenormalDisabler
{
public
:
DenormalDisabler
(
)
:
m_savedCSR
(
0
)
{
disableDenormals
(
)
;
}
~
DenormalDisabler
(
)
{
restoreState
(
)
;
}
static
inline
float
flushDenormalFloatToZero
(
float
f
)
{
return
f
;
}
private
:
unsigned
m_savedCSR
;
#
if
defined
(
__GNUC__
)
&
&
defined
(
__SSE__
)
static
inline
bool
isDAZSupported
(
)
{
#
if
defined
(
__x86_64__
)
return
true
;
#
else
static
bool
s_isInited
=
false
;
static
bool
s_isSupported
=
false
;
if
(
s_isInited
)
{
return
s_isSupported
;
}
struct
fxsaveResult
{
uint8_t
before
[
28
]
;
uint32_t
CSRMask
;
uint8_t
after
[
480
]
;
}
__attribute__
(
(
aligned
(
16
)
)
)
;
fxsaveResult
registerData
;
memset
(
&
registerData
0
sizeof
(
fxsaveResult
)
)
;
asm
volatile
(
"
fxsave
%
0
"
:
"
=
m
"
(
registerData
)
)
;
s_isSupported
=
registerData
.
CSRMask
&
0x0040
;
s_isInited
=
true
;
return
s_isSupported
;
#
endif
}
inline
void
disableDenormals
(
)
{
m_savedCSR
=
getCSR
(
)
;
setCSR
(
m_savedCSR
|
(
isDAZSupported
(
)
?
0x8040
:
0x8000
)
)
;
}
inline
void
restoreState
(
)
{
setCSR
(
m_savedCSR
)
;
}
inline
int
getCSR
(
)
{
int
result
;
asm
volatile
(
"
stmxcsr
%
0
"
:
"
=
m
"
(
result
)
)
;
return
result
;
}
inline
void
setCSR
(
int
a
)
{
int
temp
=
a
;
asm
volatile
(
"
ldmxcsr
%
0
"
:
:
"
m
"
(
temp
)
)
;
}
#
elif
defined
(
XP_WIN
)
&
&
defined
(
_MSC_VER
)
inline
void
disableDenormals
(
)
{
_controlfp_s
(
&
m_savedCSR
0
0
)
;
unsigned
unused
;
_controlfp_s
(
&
unused
_DN_FLUSH
_MCW_DN
)
;
}
inline
void
restoreState
(
)
{
unsigned
unused
;
_controlfp_s
(
&
unused
m_savedCSR
_MCW_DN
)
;
}
#
elif
defined
(
__arm__
)
|
|
defined
(
__aarch64__
)
inline
void
disableDenormals
(
)
{
m_savedCSR
=
getStatusWord
(
)
;
setStatusWord
(
m_savedCSR
|
(
1
<
<
24
)
)
;
}
inline
void
restoreState
(
)
{
setStatusWord
(
m_savedCSR
)
;
}
inline
int
getStatusWord
(
)
{
int
result
;
#
if
defined
(
__aarch64__
)
asm
volatile
(
"
mrs
%
x
[
result
]
FPCR
"
:
[
result
]
"
=
r
"
(
result
)
)
;
#
else
asm
volatile
(
"
vmrs
%
[
result
]
FPSCR
"
:
[
result
]
"
=
r
"
(
result
)
)
;
#
endif
return
result
;
}
inline
void
setStatusWord
(
int
a
)
{
#
if
defined
(
__aarch64__
)
asm
volatile
(
"
msr
FPCR
%
x
[
src
]
"
:
:
[
src
]
"
r
"
(
a
)
)
;
#
else
asm
volatile
(
"
vmsr
FPSCR
%
[
src
]
"
:
:
[
src
]
"
r
"
(
a
)
)
;
#
endif
}
#
endif
}
;
#
else
class
DenormalDisabler
{
public
:
DenormalDisabler
(
)
{
}
static
inline
float
flushDenormalFloatToZero
(
float
f
)
{
return
(
fabs
(
f
)
<
FLT_MIN
)
?
0
.
0f
:
f
;
}
}
;
#
endif
}
#
endif
