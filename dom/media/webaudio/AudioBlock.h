#
ifndef
MOZILLA_AUDIOBLOCK_H_
#
define
MOZILLA_AUDIOBLOCK_H_
#
include
"
AudioSegment
.
h
"
namespace
mozilla
{
class
AudioBlock
:
private
AudioChunk
{
public
:
AudioBlock
(
)
{
mDuration
=
WEBAUDIO_BLOCK_SIZE
;
}
AudioBlock
(
const
AudioChunk
&
aChunk
)
{
mDuration
=
WEBAUDIO_BLOCK_SIZE
;
operator
=
(
aChunk
)
;
}
~
AudioBlock
(
)
;
using
AudioChunk
:
:
GetDuration
;
using
AudioChunk
:
:
IsNull
;
using
AudioChunk
:
:
ChannelCount
;
using
AudioChunk
:
:
ChannelData
;
using
AudioChunk
:
:
SizeOfExcludingThisIfUnshared
;
using
AudioChunk
:
:
SizeOfExcludingThis
;
using
AudioChunk
:
:
mChannelData
;
using
AudioChunk
:
:
mVolume
;
using
AudioChunk
:
:
mBufferFormat
;
const
AudioChunk
&
AsAudioChunk
(
)
const
{
return
*
this
;
}
AudioChunk
*
AsMutableChunk
(
)
{
void
ClearDownstreamMark
(
)
;
return
this
;
}
void
SetBuffer
(
ThreadSharedObject
*
aNewBuffer
)
;
void
SetNull
(
StreamTime
aDuration
)
{
MOZ_ASSERT
(
aDuration
=
=
WEBAUDIO_BLOCK_SIZE
)
;
SetBuffer
(
nullptr
)
;
mChannelData
.
Clear
(
)
;
mVolume
=
1
.
0f
;
mBufferFormat
=
AUDIO_FORMAT_SILENCE
;
}
AudioBlock
&
operator
=
(
const
AudioChunk
&
aChunk
)
{
MOZ_ASSERT
(
aChunk
.
mDuration
=
=
WEBAUDIO_BLOCK_SIZE
)
;
SetBuffer
(
aChunk
.
mBuffer
)
;
mChannelData
=
aChunk
.
mChannelData
;
mVolume
=
aChunk
.
mVolume
;
mBufferFormat
=
aChunk
.
mBufferFormat
;
return
*
this
;
}
bool
IsMuted
(
)
const
{
return
mVolume
=
=
0
.
0f
;
}
bool
IsSilentOrSubnormal
(
)
const
{
if
(
!
mBuffer
)
{
return
true
;
}
for
(
uint32_t
i
=
0
length
=
mChannelData
.
Length
(
)
;
i
<
length
;
+
+
i
)
{
const
float
*
channel
=
static_cast
<
const
float
*
>
(
mChannelData
[
i
]
)
;
for
(
StreamTime
frame
=
0
;
frame
<
mDuration
;
+
+
frame
)
{
if
(
fabs
(
channel
[
frame
]
)
>
=
FLT_MIN
)
{
return
false
;
}
}
}
return
true
;
}
private
:
void
ClearDownstreamMark
(
)
;
bool
mBufferIsDownstreamRef
=
false
;
}
;
void
AllocateAudioBlock
(
uint32_t
aChannelCount
AudioChunk
*
aChunk
)
;
}
#
endif
