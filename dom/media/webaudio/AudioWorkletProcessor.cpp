#
include
"
AudioWorkletProcessor
.
h
"
#
include
"
mozilla
/
dom
/
AudioWorkletNodeBinding
.
h
"
#
include
"
mozilla
/
dom
/
AudioWorkletProcessorBinding
.
h
"
#
include
"
mozilla
/
dom
/
MessagePort
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
AudioWorkletProcessor
mParent
mPort
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
AudioWorkletProcessor
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
AudioWorkletProcessor
Release
)
AudioWorkletProcessor
:
:
AudioWorkletProcessor
(
nsIGlobalObject
*
aParent
MessagePort
*
aPort
)
:
mParent
(
aParent
)
mPort
(
aPort
)
{
}
AudioWorkletProcessor
:
:
~
AudioWorkletProcessor
(
)
=
default
;
already_AddRefed
<
AudioWorkletProcessor
>
AudioWorkletProcessor
:
:
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
WorkletGlobalScope
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
MOZ_ASSERT
(
global
)
;
RefPtr
<
MessagePort
>
port
=
static_cast
<
AudioWorkletGlobalScope
*
>
(
global
.
get
(
)
)
-
>
TakePortForProcessorCtor
(
)
;
if
(
!
port
)
{
aRv
.
ThrowTypeError
<
MSG_ILLEGAL_CONSTRUCTOR
>
(
)
;
return
nullptr
;
}
RefPtr
<
AudioWorkletProcessor
>
audioWorkletProcessor
=
new
AudioWorkletProcessor
(
global
port
)
;
return
audioWorkletProcessor
.
forget
(
)
;
}
JSObject
*
AudioWorkletProcessor
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
AudioWorkletProcessor_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
