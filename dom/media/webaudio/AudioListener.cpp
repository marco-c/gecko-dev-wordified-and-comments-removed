#
include
"
AudioListener
.
h
"
#
include
"
AudioContext
.
h
"
#
include
"
MediaTrackGraph
.
h
"
#
include
"
Tracing
.
h
"
#
include
"
mozilla
/
dom
/
AudioListenerBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
AudioListener
mContext
)
AudioListenerEngine
:
:
AudioListenerEngine
(
)
:
mFrontVector
(
0
.
0
.
-
1
.
)
mRightVector
(
1
.
0
.
0
.
)
{
}
void
AudioListenerEngine
:
:
RecvListenerEngineEvent
(
AudioListenerEngine
:
:
AudioListenerParameter
aParameter
const
ThreeDPoint
&
aValue
)
{
switch
(
aParameter
)
{
case
AudioListenerParameter
:
:
POSITION
:
mPosition
=
aValue
;
break
;
case
AudioListenerParameter
:
:
FRONT
:
mFrontVector
=
aValue
;
break
;
case
AudioListenerParameter
:
:
RIGHT
:
mRightVector
=
aValue
;
break
;
default
:
MOZ_CRASH
(
"
Not
handled
"
)
;
}
}
const
ThreeDPoint
&
AudioListenerEngine
:
:
Position
(
)
const
{
return
mPosition
;
}
const
ThreeDPoint
&
AudioListenerEngine
:
:
FrontVector
(
)
const
{
return
mFrontVector
;
}
const
ThreeDPoint
&
AudioListenerEngine
:
:
RightVector
(
)
const
{
return
mRightVector
;
}
AudioListener
:
:
AudioListener
(
AudioContext
*
aContext
)
:
mContext
(
aContext
)
mEngine
(
new
AudioListenerEngine
(
)
)
mFrontVector
(
0
.
0
.
-
1
.
)
mRightVector
(
1
.
0
.
0
.
)
{
MOZ_ASSERT
(
aContext
)
;
}
JSObject
*
AudioListener
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
AudioListener_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
AudioListener
:
:
SetOrientation
(
double
aX
double
aY
double
aZ
double
aXUp
double
aYUp
double
aZUp
)
{
ThreeDPoint
front
(
aX
aY
aZ
)
;
if
(
front
.
IsZero
(
)
)
{
return
;
}
front
.
Normalize
(
)
;
ThreeDPoint
up
(
aXUp
aYUp
aZUp
)
;
if
(
up
.
IsZero
(
)
)
{
return
;
}
up
.
Normalize
(
)
;
ThreeDPoint
right
=
front
.
CrossProduct
(
up
)
;
if
(
right
.
IsZero
(
)
)
{
return
;
}
right
.
Normalize
(
)
;
if
(
!
mFrontVector
.
FuzzyEqual
(
front
)
)
{
mFrontVector
=
front
;
SendListenerEngineEvent
(
AudioListenerEngine
:
:
AudioListenerParameter
:
:
FRONT
mFrontVector
)
;
}
if
(
!
mRightVector
.
FuzzyEqual
(
right
)
)
{
mRightVector
=
right
;
SendListenerEngineEvent
(
AudioListenerEngine
:
:
AudioListenerParameter
:
:
RIGHT
mRightVector
)
;
}
}
void
AudioListener
:
:
SetPosition
(
double
aX
double
aY
double
aZ
)
{
if
(
WebAudioUtils
:
:
FuzzyEqual
(
mPosition
.
x
aX
)
&
&
WebAudioUtils
:
:
FuzzyEqual
(
mPosition
.
y
aY
)
&
&
WebAudioUtils
:
:
FuzzyEqual
(
mPosition
.
z
aZ
)
)
{
return
;
}
mPosition
.
x
=
aX
;
mPosition
.
y
=
aY
;
mPosition
.
z
=
aZ
;
SendListenerEngineEvent
(
AudioListenerEngine
:
:
AudioListenerParameter
:
:
POSITION
mPosition
)
;
}
void
AudioListener
:
:
SendListenerEngineEvent
(
AudioListenerEngine
:
:
AudioListenerParameter
aParameter
const
ThreeDPoint
&
aValue
)
{
mContext
-
>
DestinationTrack
(
)
-
>
QueueControlMessageWithNoShutdown
(
[
engine
=
RefPtr
(
Engine
(
)
)
aParameter
aValue
]
{
TRACE
(
"
AudioListener
:
:
RecvListenerEngineEvent
"
)
;
engine
-
>
RecvListenerEngineEvent
(
aParameter
aValue
)
;
}
)
;
}
size_t
AudioListener
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
}
