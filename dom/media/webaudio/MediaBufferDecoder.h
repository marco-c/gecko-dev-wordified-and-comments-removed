#
ifndef
MediaBufferDecoder_h_
#
define
MediaBufferDecoder_h_
#
include
"
AudioSegment
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
namespace
mozilla
{
class
ThreadSharedFloatArrayBufferList
;
namespace
dom
{
class
AudioBuffer
;
class
AudioContext
;
class
DecodeErrorCallback
;
class
DecodeSuccessCallback
;
class
Promise
;
}
struct
WebAudioDecodeJob
final
{
WebAudioDecodeJob
(
const
nsACString
&
aContentType
dom
:
:
AudioContext
*
aContext
dom
:
:
Promise
*
aPromise
dom
:
:
DecodeSuccessCallback
*
aSuccessCallback
=
nullptr
dom
:
:
DecodeErrorCallback
*
aFailureCallback
=
nullptr
)
;
~
WebAudioDecodeJob
(
)
;
enum
ErrorCode
{
NoError
UnknownContent
UnknownError
InvalidContent
NoAudio
}
;
typedef
void
(
WebAudioDecodeJob
:
:
*
ResultFn
)
(
ErrorCode
)
;
void
OnSuccess
(
ErrorCode
)
;
void
OnFailure
(
ErrorCode
aErrorCode
)
;
bool
AllocateBuffer
(
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
AudioChunk
mBuffer
;
nsCString
mContentType
;
RefPtr
<
dom
:
:
AudioContext
>
mContext
;
RefPtr
<
dom
:
:
Promise
>
mPromise
;
RefPtr
<
dom
:
:
DecodeSuccessCallback
>
mSuccessCallback
;
RefPtr
<
dom
:
:
DecodeErrorCallback
>
mFailureCallback
;
RefPtr
<
dom
:
:
AudioBuffer
>
mOutput
;
}
;
void
AsyncDecodeWebAudio
(
const
char
*
aContentType
uint8_t
*
aBuffer
uint32_t
aLength
WebAudioDecodeJob
&
aDecodeJob
)
;
}
#
endif
