#
ifndef
PANNING_UTILS_H
#
define
PANNING_UTILS_H
#
include
"
AudioSegment
.
h
"
#
include
"
AudioNodeEngine
.
h
"
namespace
mozilla
{
namespace
dom
{
template
<
typename
T
>
void
GainMonoToStereo
(
const
AudioBlock
&
aInput
AudioBlock
*
aOutput
T
aGainL
T
aGainR
)
{
float
*
outputL
=
aOutput
-
>
ChannelFloatsForWrite
(
0
)
;
float
*
outputR
=
aOutput
-
>
ChannelFloatsForWrite
(
1
)
;
const
float
*
input
=
static_cast
<
const
float
*
>
(
aInput
.
mChannelData
[
0
]
)
;
MOZ_ASSERT
(
aInput
.
ChannelCount
(
)
=
=
1
)
;
MOZ_ASSERT
(
aOutput
-
>
ChannelCount
(
)
=
=
2
)
;
AudioBlockPanMonoToStereo
(
input
aGainL
aGainR
outputL
outputR
)
;
}
template
<
typename
T
typename
U
>
void
GainStereoToStereo
(
const
AudioBlock
&
aInput
AudioBlock
*
aOutput
T
aGainL
T
aGainR
U
aOnLeft
)
{
float
*
outputL
=
aOutput
-
>
ChannelFloatsForWrite
(
0
)
;
float
*
outputR
=
aOutput
-
>
ChannelFloatsForWrite
(
1
)
;
const
float
*
inputL
=
static_cast
<
const
float
*
>
(
aInput
.
mChannelData
[
0
]
)
;
const
float
*
inputR
=
static_cast
<
const
float
*
>
(
aInput
.
mChannelData
[
1
]
)
;
MOZ_ASSERT
(
aInput
.
ChannelCount
(
)
=
=
2
)
;
MOZ_ASSERT
(
aOutput
-
>
ChannelCount
(
)
=
=
2
)
;
AudioBlockPanStereoToStereo
(
inputL
inputR
aGainL
aGainR
aOnLeft
outputL
outputR
)
;
}
template
<
typename
T
typename
U
>
void
ApplyStereoPanning
(
const
AudioBlock
&
aInput
AudioBlock
*
aOutput
T
aGainL
T
aGainR
U
aOnLeft
)
{
if
(
aInput
.
ChannelCount
(
)
=
=
1
)
{
GainMonoToStereo
(
aInput
aOutput
aGainL
aGainR
)
;
}
else
{
GainStereoToStereo
(
aInput
aOutput
aGainL
aGainR
aOnLeft
)
;
}
}
}
}
#
endif
