#
include
"
HLSResource
.
h
"
#
include
"
HLSUtils
.
h
"
using
namespace
mozilla
:
:
java
;
namespace
mozilla
{
HLSResourceCallbacksSupport
:
:
HLSResourceCallbacksSupport
(
HLSResource
*
aResource
)
{
MOZ_ASSERT
(
aResource
)
;
mResource
=
aResource
;
}
void
HLSResourceCallbacksSupport
:
:
OnDataArrived
(
)
{
MOZ_ASSERT
(
mResource
)
;
mResource
-
>
onDataAvailable
(
)
;
}
void
HLSResourceCallbacksSupport
:
:
OnError
(
int
aErrorCode
)
{
MOZ_ASSERT
(
mResource
)
;
}
HLSResource
:
:
HLSResource
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
nsIURI
*
aURI
const
MediaContainerType
&
aContainerType
)
:
BaseMediaResource
(
aCallback
aChannel
aURI
aContainerType
)
{
nsCString
spec
;
nsresult
rv
=
aURI
-
>
GetSpec
(
spec
)
;
(
void
)
rv
;
HLSResourceCallbacksSupport
:
:
Init
(
)
;
mJavaCallbacks
=
GeckoHLSResourceWrapper
:
:
Callbacks
:
:
New
(
)
;
HLSResourceCallbacksSupport
:
:
AttachNative
(
mJavaCallbacks
mozilla
:
:
MakeUnique
<
HLSResourceCallbacksSupport
>
(
this
)
)
;
mHLSResourceWrapper
=
java
:
:
GeckoHLSResourceWrapper
:
:
Create
(
NS_ConvertUTF8toUTF16
(
spec
)
mJavaCallbacks
)
;
MOZ_ASSERT
(
mHLSResourceWrapper
)
;
}
void
HLSResource
:
:
onDataAvailable
(
)
{
MOZ_ASSERT
(
mCallback
)
;
HLS_DEBUG
(
"
HLSResource
"
"
onDataAvailable
"
)
;
mCallback
-
>
NotifyDataArrived
(
)
;
}
HLSResource
:
:
~
HLSResource
(
)
{
if
(
mJavaCallbacks
)
{
HLSResourceCallbacksSupport
:
:
DisposeNative
(
mJavaCallbacks
)
;
mJavaCallbacks
=
nullptr
;
}
if
(
mHLSResourceWrapper
)
{
mHLSResourceWrapper
-
>
Destroy
(
)
;
mHLSResourceWrapper
=
nullptr
;
}
HLS_DEBUG
(
"
HLSResource
"
"
Destroy
"
)
;
}
}
