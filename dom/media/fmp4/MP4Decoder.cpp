#
include
"
MP4Decoder
.
h
"
#
include
"
MediaContainerType
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
MP4Demuxer
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
PDMFactory
.
h
"
namespace
mozilla
{
static
bool
IsWhitelistedH264Codec
(
const
nsAString
&
aCodec
)
{
int16_t
profile
=
0
level
=
0
;
if
(
!
ExtractH264CodecDetails
(
aCodec
profile
level
)
)
{
return
false
;
}
return
level
>
=
H264_LEVEL_1
&
&
level
<
=
H264_LEVEL_5_1
&
&
(
profile
=
=
H264_PROFILE_BASE
|
|
profile
=
=
H264_PROFILE_MAIN
|
|
profile
=
=
H264_PROFILE_EXTENDED
|
|
profile
=
=
H264_PROFILE_HIGH
)
;
}
bool
MP4Decoder
:
:
IsSupportedTypeWithoutDiagnostics
(
const
MediaContainerType
&
aContainerType
)
{
return
IsSupportedType
(
aContainerType
nullptr
)
;
}
bool
MP4Decoder
:
:
IsSupportedType
(
const
MediaContainerType
&
aType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
if
(
!
IsEnabled
(
)
)
{
return
false
;
}
const
bool
isAudio
=
aType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
audio
/
mp4
"
)
|
|
aType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
audio
/
x
-
m4a
"
)
;
const
bool
isVideo
=
aType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
video
/
mp4
"
)
|
|
aType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
video
/
quicktime
"
)
|
|
aType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
video
/
x
-
m4v
"
)
;
if
(
!
isAudio
&
&
!
isVideo
)
{
return
false
;
}
nsTArray
<
UniquePtr
<
TrackInfo
>
>
trackInfos
;
if
(
aType
.
ExtendedType
(
)
.
Codecs
(
)
.
IsEmpty
(
)
)
{
if
(
isAudio
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
audio
/
mp4a
-
latm
"
)
aType
)
)
;
}
else
{
MOZ_ASSERT
(
isVideo
)
;
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
video
/
avc
"
)
aType
)
)
;
}
}
else
{
for
(
const
auto
&
codec
:
aType
.
ExtendedType
(
)
.
Codecs
(
)
.
Range
(
)
)
{
if
(
IsAACCodecString
(
codec
)
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
audio
/
mp4a
-
latm
"
)
aType
)
)
;
continue
;
}
if
(
codec
.
EqualsLiteral
(
"
mp3
"
)
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
audio
/
mpeg
"
)
aType
)
)
;
continue
;
}
if
(
codec
.
EqualsLiteral
(
"
opus
"
)
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
audio
/
opus
"
)
aType
)
)
;
continue
;
}
if
(
codec
.
EqualsLiteral
(
"
flac
"
)
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
audio
/
flac
"
)
aType
)
)
;
continue
;
}
if
(
IsVP9CodecString
(
codec
)
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
video
/
vp9
"
)
aType
)
)
;
continue
;
}
if
(
IsWhitelistedH264Codec
(
codec
)
&
&
isVideo
)
{
trackInfos
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
NS_LITERAL_CSTRING
(
"
video
/
avc
"
)
aType
)
)
;
continue
;
}
return
false
;
}
}
RefPtr
<
PDMFactory
>
platform
=
new
PDMFactory
(
)
;
for
(
const
auto
&
trackInfo
:
trackInfos
)
{
if
(
!
trackInfo
|
|
!
platform
-
>
Supports
(
*
trackInfo
aDiagnostics
)
)
{
return
false
;
}
}
return
true
;
}
bool
MP4Decoder
:
:
IsH264
(
const
nsACString
&
aMimeType
)
{
return
aMimeType
.
EqualsLiteral
(
"
video
/
mp4
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
;
}
bool
MP4Decoder
:
:
IsAAC
(
const
nsACString
&
aMimeType
)
{
return
aMimeType
.
EqualsLiteral
(
"
audio
/
mp4a
-
latm
"
)
;
}
bool
MP4Decoder
:
:
IsEnabled
(
)
{
return
MediaPrefs
:
:
MP4Enabled
(
)
;
}
}
