#
ifndef
VIDEOFRAMECONTAINER_H_
#
define
VIDEOFRAMECONTAINER_H_
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MediaSegment
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLMediaElement
;
}
class
VideoFrameContainer
{
B2G_ACL_EXPORT
~
VideoFrameContainer
(
)
;
public
:
typedef
layers
:
:
ImageContainer
ImageContainer
;
typedef
layers
:
:
Image
Image
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoFrameContainer
)
VideoFrameContainer
(
dom
:
:
HTMLMediaElement
*
aElement
already_AddRefed
<
ImageContainer
>
aContainer
)
;
PrincipalHandle
GetLastPrincipalHandle
(
)
;
void
UpdatePrincipalHandleForFrameID
(
const
PrincipalHandle
&
aPrincipalHandle
const
ImageContainer
:
:
FrameID
&
aFrameID
)
;
B2G_ACL_EXPORT
void
SetCurrentFrame
(
const
gfx
:
:
IntSize
&
aIntrinsicSize
Image
*
aImage
const
TimeStamp
&
aTargetTime
)
;
void
SetCurrentFrames
(
const
gfx
:
:
IntSize
&
aIntrinsicSize
const
nsTArray
<
ImageContainer
:
:
NonOwningImage
>
&
aImages
)
;
void
ClearCurrentFrame
(
const
gfx
:
:
IntSize
&
aIntrinsicSize
)
{
SetCurrentFrames
(
aIntrinsicSize
nsTArray
<
ImageContainer
:
:
NonOwningImage
>
(
)
)
;
}
void
ClearCurrentFrame
(
)
;
void
ClearFutureFrames
(
)
;
double
GetFrameDelay
(
)
;
ImageContainer
:
:
FrameID
NewFrameID
(
)
{
return
+
+
mFrameID
;
}
enum
{
INVALIDATE_DEFAULT
INVALIDATE_FORCE
}
;
void
Invalidate
(
)
{
InvalidateWithFlags
(
INVALIDATE_DEFAULT
)
;
}
B2G_ACL_EXPORT
void
InvalidateWithFlags
(
uint32_t
aFlags
)
;
B2G_ACL_EXPORT
ImageContainer
*
GetImageContainer
(
)
;
void
ForgetElement
(
)
{
mElement
=
nullptr
;
}
uint32_t
GetDroppedImageCount
(
)
{
return
mImageContainer
-
>
GetDroppedImageCount
(
)
;
}
protected
:
void
SetCurrentFramesLocked
(
const
gfx
:
:
IntSize
&
aIntrinsicSize
const
nsTArray
<
ImageContainer
:
:
NonOwningImage
>
&
aImages
)
;
dom
:
:
HTMLMediaElement
*
mElement
;
RefPtr
<
ImageContainer
>
mImageContainer
;
Mutex
mMutex
;
gfx
:
:
IntSize
mIntrinsicSize
;
ImageContainer
:
:
FrameID
mFrameID
;
bool
mIntrinsicSizeChanged
;
bool
mImageSizeChanged
;
PrincipalHandle
mLastPrincipalHandle
;
PrincipalHandle
mPendingPrincipalHandle
;
ImageContainer
:
:
FrameID
mFrameIDForPendingPrincipalHandle
;
}
;
}
#
endif
