#
include
"
ChannelMediaDecoder
.
h
"
#
include
"
MediaResource
.
h
"
namespace
mozilla
{
ChannelMediaDecoder
:
:
ResourceCallback
:
:
ResourceCallback
(
AbstractThread
*
aMainThread
)
:
mAbstractMainThread
(
aMainThread
)
{
MOZ_ASSERT
(
aMainThread
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
Connect
(
ChannelMediaDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDecoder
=
aDecoder
;
mTimer
=
do_CreateInstance
(
"
mozilla
.
org
/
timer
;
1
"
)
;
mTimer
-
>
SetTarget
(
mAbstractMainThread
-
>
AsEventTarget
(
)
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
Disconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
=
nullptr
;
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
}
MediaDecoderOwner
*
ChannelMediaDecoder
:
:
ResourceCallback
:
:
GetMediaOwner
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mDecoder
?
mDecoder
-
>
GetOwner
(
)
:
nullptr
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
SetInfinite
(
bool
aInfinite
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
SetInfinite
(
aInfinite
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyNetworkError
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NetworkError
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
TimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ResourceCallback
*
thiz
=
static_cast
<
ResourceCallback
*
>
(
aClosure
)
;
MOZ_ASSERT
(
thiz
-
>
mDecoder
)
;
thiz
-
>
mDecoder
-
>
NotifyDataArrivedInternal
(
)
;
thiz
-
>
mTimerArmed
=
false
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyDataArrived
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mDecoder
)
{
return
;
}
mDecoder
-
>
DownloadProgressed
(
)
;
if
(
mTimerArmed
)
{
return
;
}
mTimerArmed
=
true
;
mTimer
-
>
InitWithFuncCallback
(
TimerCallback
this
sDelay
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyDataEnded
(
nsresult
aStatus
)
{
RefPtr
<
ResourceCallback
>
self
=
this
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
[
=
]
(
)
{
if
(
!
self
-
>
mDecoder
)
{
return
;
}
self
-
>
mDecoder
-
>
NotifyDownloadEnded
(
aStatus
)
;
if
(
NS_SUCCEEDED
(
aStatus
)
)
{
MediaDecoderOwner
*
owner
=
self
-
>
GetMediaOwner
(
)
;
MOZ_ASSERT
(
owner
)
;
owner
-
>
DownloadSuspended
(
)
;
self
-
>
mDecoder
-
>
NotifySuspendedStatusChanged
(
)
;
}
}
)
;
mAbstractMainThread
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyPrincipalChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NotifyPrincipalChanged
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifySuspendedStatusChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NotifySuspendedStatusChanged
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyBytesConsumed
(
int64_t
aBytes
int64_t
aOffset
)
{
RefPtr
<
ResourceCallback
>
self
=
this
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
[
=
]
(
)
{
if
(
self
-
>
mDecoder
)
{
self
-
>
mDecoder
-
>
NotifyBytesConsumed
(
aBytes
aOffset
)
;
}
}
)
;
mAbstractMainThread
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
ChannelMediaDecoder
:
:
ChannelMediaDecoder
(
MediaDecoderInit
&
aInit
)
:
MediaDecoder
(
aInit
)
mResourceCallback
(
new
ResourceCallback
(
aInit
.
mOwner
-
>
AbstractMainThread
(
)
)
)
{
mResourceCallback
-
>
Connect
(
this
)
;
}
void
ChannelMediaDecoder
:
:
Shutdown
(
)
{
mResourceCallback
-
>
Disconnect
(
)
;
MediaDecoder
:
:
Shutdown
(
)
;
}
}
