#
include
"
ChannelMediaDecoder
.
h
"
#
include
"
DecoderTraits
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
MediaShutdownManager
.
h
"
namespace
mozilla
{
ChannelMediaDecoder
:
:
ResourceCallback
:
:
ResourceCallback
(
AbstractThread
*
aMainThread
)
:
mAbstractMainThread
(
aMainThread
)
{
MOZ_ASSERT
(
aMainThread
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
Connect
(
ChannelMediaDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDecoder
=
aDecoder
;
mTimer
=
do_CreateInstance
(
"
mozilla
.
org
/
timer
;
1
"
)
;
mTimer
-
>
SetTarget
(
mAbstractMainThread
-
>
AsEventTarget
(
)
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
Disconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
=
nullptr
;
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
}
MediaDecoderOwner
*
ChannelMediaDecoder
:
:
ResourceCallback
:
:
GetMediaOwner
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mDecoder
?
mDecoder
-
>
GetOwner
(
)
:
nullptr
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyNetworkError
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NetworkError
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
TimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ResourceCallback
*
thiz
=
static_cast
<
ResourceCallback
*
>
(
aClosure
)
;
MOZ_ASSERT
(
thiz
-
>
mDecoder
)
;
thiz
-
>
mDecoder
-
>
NotifyDataArrivedInternal
(
)
;
thiz
-
>
mTimerArmed
=
false
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyDataArrived
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mDecoder
)
{
return
;
}
mDecoder
-
>
DownloadProgressed
(
)
;
if
(
mTimerArmed
)
{
return
;
}
mTimerArmed
=
true
;
mTimer
-
>
InitWithNamedFuncCallback
(
TimerCallback
this
sDelay
nsITimer
:
:
TYPE_ONE_SHOT
"
ChannelMediaDecoder
:
:
ResourceCallback
:
:
TimerCallback
"
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyDataEnded
(
nsresult
aStatus
)
{
RefPtr
<
ResourceCallback
>
self
=
this
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyDataEnded
"
[
=
]
(
)
{
if
(
!
self
-
>
mDecoder
)
{
return
;
}
self
-
>
mDecoder
-
>
NotifyDownloadEnded
(
aStatus
)
;
if
(
NS_SUCCEEDED
(
aStatus
)
)
{
MediaDecoderOwner
*
owner
=
self
-
>
GetMediaOwner
(
)
;
MOZ_ASSERT
(
owner
)
;
owner
-
>
DownloadSuspended
(
)
;
self
-
>
mDecoder
-
>
NotifySuspendedStatusChanged
(
)
;
}
}
)
;
mAbstractMainThread
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyPrincipalChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NotifyPrincipalChanged
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifySuspendedStatusChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDecoder
)
{
mDecoder
-
>
NotifySuspendedStatusChanged
(
)
;
}
}
void
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyBytesConsumed
(
int64_t
aBytes
int64_t
aOffset
)
{
RefPtr
<
ResourceCallback
>
self
=
this
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ChannelMediaDecoder
:
:
ResourceCallback
:
:
NotifyBytesConsumed
"
[
=
]
(
)
{
if
(
self
-
>
mDecoder
)
{
self
-
>
mDecoder
-
>
NotifyBytesConsumed
(
aBytes
aOffset
)
;
}
}
)
;
mAbstractMainThread
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
ChannelMediaDecoder
:
:
ChannelMediaDecoder
(
MediaDecoderInit
&
aInit
)
:
MediaDecoder
(
aInit
)
mResourceCallback
(
new
ResourceCallback
(
aInit
.
mOwner
-
>
AbstractMainThread
(
)
)
)
{
mResourceCallback
-
>
Connect
(
this
)
;
}
already_AddRefed
<
ChannelMediaDecoder
>
ChannelMediaDecoder
:
:
Clone
(
MediaDecoderInit
&
aInit
)
{
if
(
!
mResource
)
{
return
nullptr
;
}
RefPtr
<
ChannelMediaDecoder
>
decoder
=
CloneImpl
(
aInit
)
;
if
(
!
decoder
)
{
return
nullptr
;
}
nsresult
rv
=
decoder
-
>
Load
(
mResource
)
;
if
(
NS_FAILED
(
rv
)
)
{
decoder
-
>
Shutdown
(
)
;
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
MediaResource
*
ChannelMediaDecoder
:
:
GetResource
(
)
const
{
return
mResource
;
}
MediaDecoderStateMachine
*
ChannelMediaDecoder
:
:
CreateStateMachine
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MediaFormatReaderInit
init
;
init
.
mVideoFrameContainer
=
GetVideoFrameContainer
(
)
;
init
.
mKnowsCompositor
=
GetCompositor
(
)
;
init
.
mCrashHelper
=
GetOwner
(
)
-
>
CreateGMPCrashHelper
(
)
;
init
.
mFrameStats
=
mFrameStats
;
init
.
mResource
=
mResource
;
mReader
=
DecoderTraits
:
:
CreateReader
(
ContainerType
(
)
init
)
;
return
new
MediaDecoderStateMachine
(
this
mReader
)
;
}
void
ChannelMediaDecoder
:
:
Shutdown
(
)
{
mResourceCallback
-
>
Disconnect
(
)
;
MediaDecoder
:
:
Shutdown
(
)
;
}
nsresult
ChannelMediaDecoder
:
:
OpenResource
(
nsIStreamListener
*
*
aStreamListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aStreamListener
)
{
*
aStreamListener
=
nullptr
;
}
return
mResource
-
>
Open
(
aStreamListener
)
;
}
nsresult
ChannelMediaDecoder
:
:
Load
(
nsIChannel
*
aChannel
bool
aIsPrivateBrowsing
nsIStreamListener
*
*
aStreamListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mResource
)
;
mResource
=
BaseMediaResource
:
:
Create
(
mResourceCallback
aChannel
aIsPrivateBrowsing
)
;
if
(
!
mResource
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
MediaShutdownManager
:
:
Instance
(
)
.
Register
(
this
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
OpenResource
(
aStreamListener
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
SetStateMachine
(
CreateStateMachine
(
)
)
;
NS_ENSURE_TRUE
(
GetStateMachine
(
)
NS_ERROR_FAILURE
)
;
return
InitializeStateMachine
(
)
;
}
nsresult
ChannelMediaDecoder
:
:
Load
(
BaseMediaResource
*
aOriginal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mResource
)
;
mResource
=
aOriginal
-
>
CloneData
(
mResourceCallback
)
;
if
(
!
mResource
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
MediaShutdownManager
:
:
Instance
(
)
.
Register
(
this
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
OpenResource
(
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
SetStateMachine
(
CreateStateMachine
(
)
)
;
NS_ENSURE_TRUE
(
GetStateMachine
(
)
NS_ERROR_FAILURE
)
;
return
InitializeStateMachine
(
)
;
}
}
