#
include
"
AudioNotificationReceiver
.
h
"
#
include
"
AudioStream
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsAppRunner
.
h
"
#
include
"
nsTArray
.
h
"
static
mozilla
:
:
LazyLogModule
sLogger
(
"
AudioNotificationReceiver
"
)
;
#
undef
ANR_LOG
#
define
ANR_LOG
(
.
.
.
)
MOZ_LOG
(
sLogger
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
undef
ANR_LOGW
#
define
ANR_LOGW
(
.
.
.
)
MOZ_LOG
(
sLogger
mozilla
:
:
LogLevel
:
:
Warning
(
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
audio
{
static
StaticAutoPtr
<
nsTArray
<
AudioStream
*
>
>
sSubscribers
;
static
StaticMutex
sMutex
;
void
AudioNotificationReceiver
:
:
Register
(
AudioStream
*
aAudioStream
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
if
(
!
sSubscribers
)
{
sSubscribers
=
new
nsTArray
<
AudioStream
*
>
(
)
;
}
sSubscribers
-
>
AppendElement
(
aAudioStream
)
;
ANR_LOG
(
"
The
AudioStream
:
%
p
is
registered
successfully
.
"
aAudioStream
)
;
}
void
AudioNotificationReceiver
:
:
Unregister
(
AudioStream
*
aAudioStream
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
MOZ_ASSERT
(
!
sSubscribers
-
>
IsEmpty
(
)
"
No
subscriber
.
"
)
;
sSubscribers
-
>
RemoveElement
(
aAudioStream
)
;
ANR_LOG
(
"
The
AudioStream
:
%
p
is
unregistered
successfully
.
"
aAudioStream
)
;
}
void
AudioNotificationReceiver
:
:
NotifyDefaultDeviceChanged
(
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
StaticMutexAutoLock
lock
(
sMutex
)
;
for
(
AudioStream
*
stream
:
*
sSubscribers
)
{
ANR_LOG
(
"
Notify
the
AudioStream
:
%
p
that
the
default
device
has
been
changed
.
"
stream
)
;
stream
-
>
ResetDefaultDevice
(
)
;
}
}
}
}
