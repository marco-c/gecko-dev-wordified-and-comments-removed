"
use
strict
"
;
async
function
clearTelemetry
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
2000
)
)
;
Services
.
telemetry
.
clearEvents
(
)
;
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_ALL_CHANNELS
true
)
.
content
;
return
!
events
|
|
!
events
.
length
;
}
)
;
}
async
function
playMediaThrough
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
"
media
"
)
;
await
Promise
.
all
(
[
new
Promise
(
r
=
>
(
video
.
onended
=
r
)
)
video
.
play
(
)
]
)
;
}
)
;
}
async
function
playMediaToTimeUpdate
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
"
media
"
)
;
await
Promise
.
all
(
[
new
Promise
(
r
=
>
(
video
.
ontimeupdate
=
r
)
)
video
.
play
(
)
]
)
;
}
)
;
}
async
function
replaceMediaWithUnencrypted
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
"
media
"
)
;
video
.
src
=
"
gizmo
.
mp4
"
;
video
.
load
(
)
;
}
)
;
}
async
function
clearMediaKeys
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
getElementById
(
"
media
"
)
;
await
video
.
setMediaKeys
(
null
)
;
}
)
;
}
async
function
getTelemetrySums
(
)
{
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
.
content
;
if
(
histograms
.
VIDEO_PLAY_TIME_MS
)
{
return
{
VIDEO_PLAY_TIME_MS
:
histograms
.
VIDEO_PLAY_TIME_MS
.
sum
VIDEO_ENCRYPTED_PLAY_TIME_MS
:
histograms
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
?
histograms
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
.
sum
:
0
VIDEO_CLEARKEY_PLAY_TIME_MS
:
histograms
.
VIDEO_CLEARKEY_PLAY_TIME_MS
?
histograms
.
VIDEO_CLEARKEY_PLAY_TIME_MS
.
sum
:
0
}
;
}
return
null
;
}
"
recorded
telemetry
from
playing
media
"
)
;
}
add_task
(
clearTelemetry
)
;
add_task
(
async
function
testEncryptedMediaPlayback
(
)
{
let
testTab
=
await
openTab
(
)
;
await
loadEmeVideo
(
testTab
)
;
await
playMediaThrough
(
testTab
)
;
BrowserTestUtils
.
removeTab
(
testTab
)
;
let
telemetrySums
=
await
getTelemetrySums
(
)
;
ok
(
telemetrySums
"
Should
get
play
time
telemetry
"
)
;
is
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
telemetrySums
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
"
Play
time
should
be
the
same
as
encrypted
play
time
"
)
;
is
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
telemetrySums
.
VIDEO_CLEARKEY_PLAY_TIME_MS
"
Play
time
should
be
the
same
as
clearkey
play
time
"
)
;
Assert
.
greater
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
0
"
Should
have
a
play
time
greater
than
zero
"
)
;
}
)
;
add_task
(
async
function
testChangingFromEncryptedToUnencrypted
(
)
{
let
testTab
=
await
openTab
(
)
;
await
loadEmeVideo
(
testTab
)
;
await
replaceMediaWithUnencrypted
(
testTab
)
;
await
playMediaToTimeUpdate
(
testTab
)
;
BrowserTestUtils
.
removeTab
(
testTab
)
;
let
telemetrySums
=
await
getTelemetrySums
(
)
;
ok
(
telemetrySums
"
Should
get
play
time
telemetry
"
)
;
is
(
telemetrySums
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
0
"
Encrypted
play
time
should
be
0
"
)
;
is
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
telemetrySums
.
VIDEO_CLEARKEY_PLAY_TIME_MS
"
Play
time
should
be
the
same
as
clearkey
play
time
because
the
media
element
still
has
a
media
keys
attached
"
)
;
Assert
.
greater
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
0
"
Should
have
a
play
time
greater
than
zero
"
)
;
}
)
;
add_task
(
async
function
testChangingFromEncryptedToUnencryptedAndClearingMediaKeys
(
)
{
let
testTab
=
await
openTab
(
)
;
await
loadEmeVideo
(
testTab
)
;
await
replaceMediaWithUnencrypted
(
testTab
)
;
await
clearMediaKeys
(
testTab
)
;
await
playMediaToTimeUpdate
(
testTab
)
;
BrowserTestUtils
.
removeTab
(
testTab
)
;
let
telemetrySums
=
await
getTelemetrySums
(
)
;
ok
(
telemetrySums
"
Should
get
play
time
telemetry
"
)
;
is
(
telemetrySums
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
0
"
Encrypted
play
time
should
be
0
"
)
;
is
(
telemetrySums
.
VIDEO_CLEARKEY_PLAY_TIME_MS
0
"
Clearkey
play
time
should
be
0
"
)
;
Assert
.
greater
(
telemetrySums
.
VIDEO_PLAY_TIME_MS
0
"
Should
have
a
play
time
greater
than
zero
"
)
;
}
)
;
