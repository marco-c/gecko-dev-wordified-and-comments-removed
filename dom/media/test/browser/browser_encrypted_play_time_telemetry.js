"
use
strict
"
;
async
function
clearTelemetry
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
2000
)
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_ALL_CHANNELS
true
)
.
content
;
return
!
events
|
|
!
events
.
length
;
}
)
;
}
async
function
playEmeMedia
(
)
{
const
emptyPageUri
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
test
/
browser
/
file_empty_page
.
html
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
window
.
gBrowser
emptyPageUri
)
;
const
emeHelperUri
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
+
"
/
eme_standalone
.
js
"
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
emeHelperUri
]
async
_emeHelperUri
=
>
{
async
function
once
(
target
name
)
{
return
new
Promise
(
r
=
>
target
.
addEventListener
(
name
r
{
once
:
true
}
)
)
;
}
function
cloneIntoContent
(
data
)
{
return
Cu
.
cloneInto
(
data
content
.
wrappedJSObject
)
;
}
Services
.
scriptloader
.
loadSubScript
(
_emeHelperUri
content
)
;
let
video
=
content
.
document
.
createElement
(
"
video
"
)
;
content
.
document
.
body
.
appendChild
(
video
)
;
let
emeHelper
=
new
content
.
wrappedJSObject
.
EmeHelper
(
)
;
emeHelper
.
SetKeySystem
(
content
.
wrappedJSObject
.
EmeHelper
.
GetClearkeyKeySystemString
(
)
)
;
emeHelper
.
SetInitDataTypes
(
cloneIntoContent
(
[
"
webm
"
]
)
)
;
emeHelper
.
SetVideoCapabilities
(
cloneIntoContent
(
[
{
contentType
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
}
]
)
)
;
emeHelper
.
AddKeyIdAndKey
(
"
2cdb0ed6119853e7850671c3e9906c3c
"
"
808b9adac384de1e4f56140f4ad76194
"
)
;
emeHelper
.
onerror
=
error
=
>
{
is
(
false
Got
unexpected
error
from
EME
helper
:
{
error
}
)
;
}
;
await
emeHelper
.
ConfigureEme
(
video
)
;
const
ms
=
new
content
.
wrappedJSObject
.
MediaSource
(
)
;
video
.
src
=
content
.
wrappedJSObject
.
URL
.
createObjectURL
(
ms
)
;
await
once
(
ms
"
sourceopen
"
)
;
const
sb
=
ms
.
addSourceBuffer
(
"
video
/
webm
"
)
;
const
videoFile
=
"
sintel
-
short
-
clearkey
-
subsample
-
encrypted
-
video
.
webm
"
;
let
fetchResponse
=
await
content
.
fetch
(
videoFile
)
;
sb
.
appendBuffer
(
await
fetchResponse
.
arrayBuffer
(
)
)
;
await
once
(
sb
"
updateend
"
)
;
ms
.
endOfStream
(
)
;
await
once
(
ms
"
sourceended
"
)
;
let
endedPromise
=
once
(
video
"
ended
"
)
;
await
video
.
play
(
)
;
await
endedPromise
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
verifyTelemetry
(
)
{
let
playTimeSums
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
histograms
=
Services
.
telemetry
.
getSnapshotForHistograms
(
"
main
"
true
)
.
content
;
if
(
histograms
.
VIDEO_PLAY_TIME_MS
)
{
return
{
VIDEO_PLAY_TIME_MS
:
histograms
.
VIDEO_PLAY_TIME_MS
.
sum
VIDEO_ENCRYPTED_PLAY_TIME_MS
:
histograms
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
.
sum
VIDEO_CLEARKEY_PLAY_TIME_MS
:
histograms
.
VIDEO_CLEARKEY_PLAY_TIME_MS
.
sum
}
;
}
return
null
;
}
"
recorded
telemetry
from
playing
media
"
)
;
ok
(
playTimeSums
"
Should
get
play
time
telemetry
"
)
;
is
(
playTimeSums
.
VIDEO_PLAY_TIME_MS
playTimeSums
.
VIDEO_ENCRYPTED_PLAY_TIME_MS
"
Play
time
should
be
the
same
as
encrypted
play
time
"
)
;
is
(
playTimeSums
.
VIDEO_PLAY_TIME_MS
playTimeSums
.
VIDEO_CLEARKEY_PLAY_TIME_MS
"
Play
time
should
be
the
same
as
clearkey
play
time
"
)
;
ok
(
playTimeSums
.
VIDEO_PLAY_TIME_MS
>
0
"
Should
have
a
play
time
greater
than
zero
"
)
;
}
add_task
(
async
function
testEncryptedMediaTelemetryProbes
(
)
{
await
clearTelemetry
(
)
;
await
playEmeMedia
(
)
;
await
verifyTelemetry
(
)
;
}
)
;
