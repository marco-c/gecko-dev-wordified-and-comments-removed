const
{
AppConstants
}
=
SpecialPowers
.
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
var
gManifestNavigatorSource
=
document
.
documentElement
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
gManifestNavigatorSource
.
style
.
display
=
"
none
"
;
function
manifestNavigator
(
)
{
return
gManifestNavigatorSource
.
contentWindow
.
navigator
;
}
function
manifestVideo
(
)
{
return
gManifestNavigatorSource
.
contentDocument
.
createElement
(
"
video
"
)
;
}
let
serverUrl
=
SpecialPowers
.
Services
.
prefs
.
getCharPref
(
"
media
.
hls
.
server
.
url
"
)
;
var
gHLSTests
=
[
{
name
:
serverUrl
+
"
/
bipbop_4x3_variant
.
m3u8
"
type
:
"
audio
/
x
-
mpegurl
"
duration
:
20
.
0
}
]
;
var
gSmallTests
=
[
{
name
:
"
small
-
shot
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
276
}
{
name
:
"
small
-
shot
.
m4a
"
type
:
"
audio
/
mp4
"
duration
:
0
.
29
}
{
name
:
"
small
-
shot
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
27
}
{
name
:
"
small
-
shot
-
mp3
.
mp4
"
type
:
"
audio
/
mp4
;
codecs
=
mp3
"
duration
:
0
.
34
}
{
name
:
"
small
-
shot
.
flac
"
type
:
"
audio
/
flac
"
duration
:
0
.
197
}
{
name
:
"
r11025_s16_c1
-
short
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
0
.
37
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
width
:
320
height
:
240
duration
:
0
.
23
}
{
name
:
"
vp9
-
short
.
webm
"
type
:
"
video
/
webm
"
width
:
320
height
:
240
duration
:
0
.
2
}
{
name
:
"
detodos
-
short
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
0
.
22
}
{
name
:
"
gizmo
-
short
.
mp4
"
type
:
"
video
/
mp4
"
width
:
560
height
:
320
duration
:
0
.
27
}
{
name
:
"
flac
-
s24
.
flac
"
type
:
"
audio
/
flac
"
duration
:
4
.
04
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
{
name
:
"
avc
-
2bytes
-
nalu
.
mp4
"
type
:
"
video
/
mp4
"
width
:
560
height
:
320
duration
:
0
.
27
}
{
name
:
"
1967133
.
mp4
"
type
:
"
video
/
mp4
"
width
:
1080
height
:
1080
duration
:
0
.
512
}
]
;
var
gFrameCountTests
=
[
{
name
:
"
bipbop
.
mp4
"
type
:
"
video
/
mp4
"
totalFrameCount
:
297
}
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
totalFrameCount
:
166
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
totalFrameCount
:
8
}
{
name
:
"
seek
.
webm
"
type
:
"
video
/
webm
"
totalFrameCount
:
120
}
{
name
:
"
av1
.
mp4
"
type
:
"
video
/
mp4
"
totalFrameCount
:
24
}
]
;
gSmallTests
=
gSmallTests
.
concat
(
[
{
name
:
"
sample
.
3gp
"
type
:
"
video
/
3gpp
"
duration
:
4
.
933
}
{
name
:
"
sample
.
3g2
"
type
:
"
video
/
3gpp2
"
duration
:
4
.
933
}
]
)
;
var
gVideoTests
=
[
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
width
:
320
height
:
240
duration
:
0
.
23
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gLongerTests
=
[
{
name
:
"
seek
.
webm
"
type
:
"
video
/
webm
"
width
:
320
height
:
240
duration
:
3
.
966
}
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
width
:
560
height
:
320
duration
:
5
.
56
}
]
;
var
gProgressTests
=
[
{
name
:
"
r11025_u8_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
size
:
11069
}
{
name
:
"
big
-
short
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
11
size
:
12366
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
size
:
19267
}
{
name
:
"
gizmo
-
short
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
0
.
27
size
:
29905
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gPlayedTests
=
[
{
name
:
"
big
-
short
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
11
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
}
{
name
:
"
gizmo
-
short
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
0
.
27
}
{
name
:
"
owl
-
short
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
52
}
{
name
:
"
very
-
short
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
07
}
{
name
:
"
bug495794
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
3
}
]
;
if
(
manifestNavigator
(
)
.
userAgent
.
includes
(
"
Windows
"
)
&
&
manifestVideo
(
)
.
canPlayType
(
'
video
/
mp4
;
codecs
=
"
avc1
.
64000c
"
'
)
)
{
gPlayedTests
=
gPlayedTests
.
concat
(
{
name
:
"
red
-
46x48
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
1
.
0
}
{
name
:
"
red
-
48x46
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
1
.
0
}
)
;
}
var
cloneKey
=
Math
.
floor
(
Math
.
random
(
)
*
100000000
)
;
var
gCloneTests
=
[
{
name
:
"
dynamic_resource
.
sjs
?
key
=
"
+
cloneKey
+
"
&
res1
=
seek
-
short
.
webm
&
res2
=
vp9
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
}
]
;
var
gReplayTests
=
gSmallTests
.
concat
(
[
{
name
:
"
bug533822
.
ogg
"
type
:
"
audio
/
ogg
"
}
]
)
;
var
gPausedAfterEndedTests
=
gSmallTests
.
concat
(
[
{
name
:
"
r11025_u8_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
small
-
shot
.
ogg
"
type
:
"
video
/
ogg
"
duration
:
0
.
276
}
]
)
;
var
gTrackTests
=
[
{
name
:
"
big
-
short
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
11
size
:
12366
hasAudio
:
true
hasVideo
:
false
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
size
:
19267
hasAudio
:
false
hasVideo
:
true
}
{
name
:
"
flac
-
s24
.
flac
"
type
:
"
audio
/
flac
"
duration
:
4
.
04
hasAudio
:
true
hasVideo
:
false
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gMediaRecorderTests
=
[
{
name
:
"
detodos
-
recorder
-
test
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
0
.
62
}
]
;
var
gMediaRecorderVideoTests
=
[
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
width
:
320
height
:
240
duration
:
0
.
23
}
]
;
var
gPlayTests
=
[
{
name
:
"
vp9cake
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
0
}
{
name
:
"
r11025_u8_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
r11025_u8_c1_trunc
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
8
}
{
name
:
"
r11025_s16_c1_trailing
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
r16000_u8_c1_list
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
4
.
2
}
{
name
:
"
16bit_wave_extrametadata
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
108
}
{
name
:
"
wavedata_float
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
wavedata_s24
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
wavedata_alaw
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
wavedata_ulaw
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
bug1301226
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
0
.
003673
}
{
name
:
"
bug1301226
-
odd
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
0
.
003673
}
{
name
:
"
beta
-
phrasebook
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
4
.
01
}
{
name
:
"
bug520493
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
458
}
{
name
:
"
bug520500
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
123
}
{
name
:
"
bug495794
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
3
}
{
name
:
"
audio
-
overhang
.
ogg
"
type
:
"
video
/
ogg
"
duration
:
2
.
3
}
{
name
:
"
video
-
overhang
.
ogg
"
type
:
"
video
/
ogg
"
duration
:
3
.
966
}
{
name
:
"
audio
-
gaps
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
2
.
208
}
{
name
:
"
redirect
.
sjs
?
domain
=
mochi
.
test
:
8888
&
file
=
vp9
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
}
{
name
:
"
split
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
967
}
{
name
:
"
resolution
-
change
.
webm
"
type
:
"
video
/
webm
"
duration
:
6
.
533
}
{
name
:
"
bipbop_short_vp8
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
011
}
{
name
:
"
bipbop_short_pixel_metadata_bigger_than_in_stream_vp8
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
011
}
{
name
:
"
bipbop_short_pixel_metadata_narrower_than_in_stream_vp8
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
011
}
{
name
:
"
bipbop_short_pixel_metadata_smaller_than_in_stream_vp8
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
011
}
{
name
:
"
spacestorm
-
1000Hz
-
100ms
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
099
}
{
name
:
"
detodos
-
short
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
0
.
22
contentDuration
:
0
.
2135
}
{
name
:
"
detodos
-
short
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
duration
:
0
.
26
contentDuration
:
0
.
2535
}
{
name
:
"
opus
-
mapping2
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
duration
:
10
.
01
contentDuration
:
9
.
99
}
{
name
:
"
bug1066943
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
duration
:
1
.
383
}
{
name
:
"
test
-
1
-
mono
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
1
.
044
}
{
name
:
"
test
-
2
-
stereo
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
2
.
925
}
{
name
:
"
test
-
3
-
LCR
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
4
.
214
}
{
name
:
"
test
-
4
-
quad
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
6
.
234
}
{
name
:
"
test
-
5
-
5
.
0
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
7
.
558
}
{
name
:
"
test
-
6
-
5
.
1
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
10
.
333
}
{
name
:
"
test
-
7
-
6
.
1
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
11
.
69
}
{
name
:
"
test
-
8
-
7
.
1
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
13
.
478
}
{
name
:
"
gizmo
-
short
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
0
.
27
contentDuration
:
0
.
267
}
{
name
:
"
bipbop
-
lateaudio
.
mp4
"
type
:
"
video
/
mp4
"
}
{
name
:
"
opus
-
sample
.
mp4
"
type
:
"
audio
/
mp4
;
codecs
=
opus
"
duration
:
10
.
92
contentDuration
:
10
.
09
}
{
name
:
"
opus
-
mapping2
.
mp4
"
type
:
"
audio
/
mp4
;
codecs
=
opus
"
duration
:
10
.
0
}
{
name
:
"
small
-
shot
.
m4a
"
type
:
"
audio
/
mp4
"
duration
:
0
.
29
}
{
name
:
"
small
-
shot
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
27
}
{
name
:
"
owl
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
3
.
343
}
{
name
:
"
owl
-
funny
-
id3
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
3
.
343
}
{
name
:
"
owl
-
funnier
-
id3
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
3
.
343
}
{
name
:
"
huge
-
id3
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
1
.
0
}
{
name
:
"
id3v1afterlongid3v2
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
5
}
{
name
:
"
padding
-
spanning
-
multiple
-
packets
.
mp3
"
type
:
"
audio
/
mpeg
"
}
{
name
:
"
vbr
-
head
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
10
.
0
contentDuration
:
1
.
019
}
{
name
:
"
flac
-
noheader
-
s16
.
flac
"
type
:
"
audio
/
flac
"
duration
:
4
.
0
}
{
name
:
"
flac
-
s24
.
flac
"
type
:
"
audio
/
flac
"
duration
:
4
.
04
}
{
name
:
"
flac
-
sample
.
mp4
"
type
:
"
audio
/
mp4
;
codecs
=
flac
"
duration
:
4
.
95
contentDuration
:
5
.
03
}
{
name
:
"
no
-
container
-
codec
-
delay
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
invalid
-
preskip
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
duration
:
Number
.
NaN
}
]
;
const
win32
=
SpecialPowers
.
Services
.
appinfo
.
OS
=
=
"
WINNT
"
&
&
!
SpecialPowers
.
Services
.
appinfo
.
is64Bit
;
if
(
!
win32
)
{
gPlayTests
.
push
(
{
name
:
"
av1
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
1
.
0
}
)
;
}
var
gMKVtests
=
[
{
name
:
"
output_aac
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
mp4a
.
40
.
2
"
'
duration
:
1
.
0
}
{
name
:
"
output_avc
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
avc1
.
42C01F
"
'
duration
:
1
.
0
}
{
name
:
"
output_avc_hl41_1080p_aaclc_44100
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
avc1
.
640029
mp4a
.
40
.
2
"
'
duration
:
1
.
0
}
{
name
:
"
output_vorbis
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
vorbis
"
'
duration
:
1
.
0
}
{
name
:
"
output_opus
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
opus
"
'
duration
:
1
.
0
}
{
name
:
"
output_vp8
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
vp8
"
'
duration
:
1
.
0
}
{
name
:
"
output_vp9
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
vp9
"
'
duration
:
1
.
0
}
{
name
:
"
output_av1
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
av1
"
'
duration
:
1
.
0
}
]
;
if
(
SpecialPowers
.
Services
.
prefs
.
getBoolPref
(
"
media
.
hardware
-
video
-
decoding
.
force
-
enabled
"
0
)
)
{
gMKVtests
.
push
(
{
name
:
"
output_hevc
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
hvc1
.
1
.
6
.
L63
.
B0
"
'
duration
:
1
.
0
}
{
name
:
"
partial_support_hevc_ac3
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
hvc1
.
1
.
6
.
L63
.
B0
"
'
duration
:
0
.
1
}
)
;
}
gMKVtests
.
push
(
{
name
:
"
partial_support_av1_ac3
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
av1
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_avc_ac3
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
avc1
.
640029
mp4a
.
40
.
2
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_vp8_ac3
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
vp8
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_vp9_ac3
.
mkv
"
type
:
'
video
/
matroska
;
codecs
=
"
vp9
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_theora_aac
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
mp4a
.
40
.
2
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_theora_opus
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
opus
"
'
duration
:
0
.
1
}
{
name
:
"
partial_support_theora_vorbis
.
mkv
"
type
:
'
audio
/
matroska
;
codecs
=
"
vorbis
"
'
duration
:
0
.
1
}
)
;
var
gUnsupportedMKVtests
=
[
{
name
:
"
output_flac
.
mkv
"
type
:
"
audio
/
matroska
"
duration
:
1
.
0
}
{
name
:
"
output_mp3
.
mkv
"
type
:
"
audio
/
matroska
"
duration
:
1
.
0
}
{
name
:
"
output_pcm
.
mkv
"
type
:
"
audio
/
matroska
"
duration
:
1
.
0
}
]
;
gPlayTests
.
push
(
{
name
:
"
bipbop_audio_aac_8k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
{
name
:
"
bipbop_audio_aac_22
.
05k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
{
name
:
"
bipbop_audio_aac_44
.
1k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
{
name
:
"
bipbop_audio_aac_48k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
11
"
)
|
|
AppConstants
.
isPlatformAndVersionAtLeast
(
"
macosx
"
"
10
.
15
"
)
|
|
AppConstants
.
isPlatformAndVersionAtLeast
(
"
android
"
"
28
"
)
)
{
gPlayTests
.
push
(
{
name
:
"
sine
-
3s
-
xhe
-
aac
-
44khz
-
mono
.
mp4
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
42
"
'
duration
:
3
.
0
}
)
;
}
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
gPlayTests
.
push
(
{
name
:
"
bipbop_audio_aac_88
.
2k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
{
name
:
"
bipbop_audio_aac_96k
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
1
.
06
}
)
;
}
const
skipAmbisonics
=
(
AppConstants
.
platform
=
=
"
macosx
"
&
&
AppConstants
.
DEBUG
)
|
|
(
AppConstants
.
platform
=
=
"
linux
"
&
&
!
AppConstants
.
DEBUG
&
&
SpecialPowers
.
Services
.
appinfo
.
is64Bit
)
;
if
(
!
skipAmbisonics
)
{
gPlayTests
.
push
(
{
name
:
"
ambisonics
.
mp4
"
type
:
"
audio
/
mp4
"
duration
:
16
.
48
}
)
;
}
var
gSeekToNextFrameTests
=
[
{
name
:
"
vp9
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
2
}
{
name
:
"
vp9cake
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
0
}
{
name
:
"
redirect
.
sjs
?
domain
=
mochi
.
test
:
8888
&
file
=
vp9
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
seek
-
short
.
webm
"
type
:
"
video
/
webm
"
duration
:
0
.
23
}
{
name
:
"
split
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
967
}
{
name
:
"
gizmo
-
short
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
0
.
27
}
{
name
:
"
bipbop
-
lateaudio
.
mp4
"
type
:
"
video
/
mp4
"
}
]
;
var
gSnifferTests
=
[
{
name
:
"
big
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
9
.
278982
size
:
102444
}
{
name
:
"
seek
.
webm
"
type
:
"
video
/
webm
"
duration
:
3
.
966
size
:
215529
}
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
5
.
56
size
:
383631
}
{
name
:
"
id3tags
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
0
.
28
size
:
3530
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gResolutionChangeTests
=
[
{
name
:
"
resolution
-
change
.
webm
"
type
:
"
video
/
webm
"
duration
:
6
.
533
}
]
;
var
gInvalidTests
=
[
{
name
:
"
invalid
-
m0c0
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
m0c3
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
m1c0
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
m1c9
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
m2c0
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
m2c1
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
cmap
-
short
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
cmap
-
s0c0
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
cmap
-
s0c2
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
cmap
-
s1c2
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
}
]
;
var
gInvalidPlayTests
=
[
{
name
:
"
invalid
-
excess_discard
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
excess_neg_discard
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
neg_discard
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
}
{
name
:
"
invalid
-
discard_on_multi_blocks
.
webm
"
type
:
"
audio
/
webm
;
codecs
=
opus
"
}
]
;
var
gMultitrackInfoOggPlayList
=
[
{
name
:
"
multiple
-
bos
-
more
-
header
-
fileds
.
ogg
"
type
:
"
video
/
ogg
"
duration
:
0
.
431
}
{
name
:
"
audio
-
gaps
-
short
.
ogg
"
type
:
"
audio
/
ogg
"
duration
:
0
.
5
}
]
;
var
gOggTrackInfoResults
=
{
"
multiple
-
bos
-
more
-
header
-
fileds
.
ogg
"
:
{
audio_id
:
"
1
"
audio_kind
:
"
main
"
audio_language
:
"
"
audio_label
:
"
"
video_id
:
"
2
"
video_kind
:
"
main
"
video_language
:
"
"
video_label
:
"
"
}
"
audio
-
gaps
-
short
.
ogg
"
:
{
audio_id
:
"
1
"
audio_kind
:
"
main
"
audio_language
:
"
"
audio_label
:
"
"
}
}
;
function
makeAbsolutePathConverter
(
)
{
const
url
=
SimpleTest
.
getTestFileURL
(
"
chromeHelper
.
js
"
)
;
const
script
=
SpecialPowers
.
loadChromeScript
(
url
)
;
return
new
Promise
(
resolve
=
>
{
script
.
addMessageListener
(
"
media
-
test
:
cwd
"
cwd
=
>
{
if
(
!
cwd
)
{
ok
(
false
"
Failed
to
find
path
to
test
files
"
)
;
}
resolve
(
(
path
mustExist
)
=
>
{
if
(
manifestNavigator
(
)
.
appVersion
.
includes
(
"
Android
"
)
)
{
return
path
;
}
const
{
Ci
Cc
}
=
SpecialPowers
;
var
f
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
f
.
initWithPath
(
cwd
)
;
var
split
=
path
.
split
(
"
/
"
)
;
for
(
var
i
=
0
;
i
<
split
.
length
;
+
+
i
)
{
f
.
append
(
split
[
i
]
)
;
}
if
(
mustExist
&
&
!
f
.
exists
(
)
)
{
ok
(
false
"
We
expected
'
"
+
path
+
"
'
to
exist
but
it
doesn
'
t
!
"
)
;
}
return
f
.
path
;
}
)
;
}
)
;
script
.
sendAsyncMessage
(
"
media
-
test
:
getcwd
"
)
;
}
)
;
}
function
range_equals
(
r1
r2
)
{
if
(
r1
.
length
!
=
r2
.
length
)
{
return
false
;
}
for
(
var
i
=
0
;
i
<
r1
.
length
;
i
+
+
)
{
if
(
r1
.
start
(
i
)
!
=
r2
.
start
(
i
)
|
|
r1
.
end
(
i
)
!
=
r2
.
end
(
i
)
)
{
return
false
;
}
}
return
true
;
}
function
makeInfoLeakTests
(
)
{
return
makeAbsolutePathConverter
(
)
.
then
(
fileUriToSrc
=
>
[
{
type
:
"
audio
/
x
-
wav
"
src
:
fileUriToSrc
(
"
tests
/
dom
/
media
/
test
/
r11025_s16_c1
.
wav
"
true
)
}
{
type
:
"
audio
/
x
-
wav
"
src
:
fileUriToSrc
(
"
tests
/
dom
/
media
/
test
/
404
.
wav
"
false
)
}
{
type
:
"
audio
/
ogg
"
src
:
fileUriToSrc
(
"
tests
/
dom
/
media
/
test
/
404
.
ogg
"
false
)
}
{
type
:
"
video
/
webm
"
src
:
fileUriToSrc
(
"
tests
/
dom
/
media
/
test
/
seek
.
webm
"
true
)
}
{
type
:
"
video
/
webm
"
src
:
fileUriToSrc
(
"
tests
/
dom
/
media
/
test
/
404
.
webm
"
false
)
}
{
type
:
"
audio
/
x
-
wav
"
src
:
"
http
:
/
/
localhost
/
404
.
wav
"
}
{
type
:
"
video
/
webm
"
src
:
"
http
:
/
/
localhost
/
404
.
webm
"
}
{
type
:
"
video
/
ogg
"
src
:
"
http
:
/
/
example
.
com
/
tests
/
dom
/
media
/
test
/
test_info_leak
.
html
"
}
{
type
:
"
audio
/
ogg
"
src
:
"
http
:
/
/
example
.
com
/
tests
/
dom
/
media
/
test
/
test_info_leak
.
html
"
}
]
)
;
}
var
gErrorTests
=
[
{
name
:
"
bogus
.
wav
"
type
:
"
audio
/
x
-
wav
"
}
{
name
:
"
bug501279
.
ogg
"
type
:
"
audio
/
ogg
"
}
{
name
:
"
bug604067
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
bug1535980
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
bug1799787
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gDurationTests
=
[
{
name
:
"
bug604067
.
webm
"
duration
:
6
.
076
}
]
;
var
gSeekTests
=
[
{
name
:
"
r11025_s16_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
audio
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
0
.
031247
}
{
name
:
"
seek
.
webm
"
type
:
"
video
/
webm
"
duration
:
3
.
966
}
{
name
:
"
sine
.
webm
"
type
:
"
audio
/
webm
"
duration
:
4
.
001
}
{
name
:
"
split
.
webm
"
type
:
"
video
/
webm
"
duration
:
1
.
967
}
{
name
:
"
detodos
.
opus
"
type
:
"
audio
/
ogg
;
codecs
=
opus
"
duration
:
2
.
9135
}
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
5
.
56
}
{
name
:
"
/
tests
/
dom
/
media
/
webaudio
/
test
/
half
-
a
-
second
-
1ch
-
44100
-
aac
-
afconvert
.
mp4
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
duration
:
0
.
5
}
{
name
:
"
owl
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
3
.
343
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
duration
:
123
}
]
;
var
gFastSeekTests
=
[
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
keyframes
:
[
0
1
.
0
2
.
0
3
.
0
4
.
0
5
.
0
]
}
{
name
:
"
seek
.
webm
"
type
:
"
video
/
webm
"
keyframes
:
[
0
0
.
8
1
.
6
2
.
4
3
.
2
]
}
]
;
var
gCuelessWebMTests
=
[
{
name
:
"
no
-
cues
.
webm
"
type
:
"
video
/
webm
"
duration
:
3
.
967
}
]
;
var
gUnseekableTests
=
[
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
androidVersion
=
-
1
;
if
(
manifestNavigator
(
)
.
userAgent
.
includes
(
"
Mobile
"
)
|
|
manifestNavigator
(
)
.
userAgent
.
includes
(
"
Tablet
"
)
)
{
androidVersion
=
SpecialPowers
.
Services
.
sysinfo
.
getProperty
(
"
version
"
)
;
}
function
getAndroidVersion
(
)
{
return
androidVersion
;
}
var
gAudioTests
=
[
{
name
:
"
adts
.
aac
"
type
:
"
audio
/
mp4
"
duration
:
1
.
37
}
{
name
:
"
r11025_s16_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
1
.
0
}
{
name
:
"
sound
.
ogg
"
type
:
"
audio
/
ogg
"
}
{
name
:
"
owl
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
3
.
343
}
{
name
:
"
small
-
shot
.
m4a
"
type
:
"
audio
/
mp4
"
duration
:
0
.
29
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
duration
:
123
}
{
name
:
"
empty_size
.
mp3
"
type
:
"
audio
/
mpeg
"
duration
:
2
.
235
}
]
;
var
g404Tests
=
[
{
name
:
"
404
.
wav
"
type
:
"
audio
/
x
-
wav
"
}
{
name
:
"
404
.
oga
"
type
:
"
audio
/
ogg
"
}
{
name
:
"
404
.
webm
"
type
:
"
video
/
webm
"
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gDecodeErrorTests
=
[
{
name
:
"
r11025_msadpcm_c1
.
wav
"
type
:
"
audio
/
x
-
wav
"
}
{
name
:
"
dirac
.
ogg
"
type
:
"
video
/
ogg
"
}
{
name
:
"
bogus
.
wav
"
type
:
"
audio
/
x
-
wav
"
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gFragmentTests
=
[
{
name
:
"
big
.
wav
"
type
:
"
audio
/
x
-
wav
"
duration
:
9
.
278982
size
:
102444
}
]
;
var
gChainingTests
=
[
{
name
:
"
chain
.
ogg
"
type
:
"
audio
/
ogg
"
links
:
4
}
{
name
:
"
chain
.
opus
"
type
:
"
audio
/
ogg
;
codec
=
opus
"
links
:
4
}
{
name
:
"
variable
-
channel
.
ogg
"
type
:
"
audio
/
ogg
"
links
:
1
}
{
name
:
"
variable
-
channel
.
opus
"
type
:
"
audio
/
ogg
;
codec
=
opus
"
links
:
1
}
{
name
:
"
variable
-
samplerate
.
ogg
"
type
:
"
audio
/
ogg
"
links
:
1
}
{
name
:
"
variable
-
samplerate
.
opus
"
type
:
"
audio
/
ogg
;
codec
=
opus
"
links
:
2
}
{
name
:
"
variable
-
preskip
.
opus
"
type
:
"
audio
/
ogg
;
codec
=
opus
"
links
:
2
}
{
name
:
"
bogus
.
duh
"
type
:
"
bogus
/
duh
"
}
]
;
var
gAspectRatioTests
=
[
{
name
:
"
VID_0001
.
ogg
"
type
:
"
video
/
ogg
"
duration
:
19
.
966
}
]
;
var
gMetadataTests
=
[
{
name
:
"
detodos
.
opus
"
tags
:
{
title
:
"
De
todos
.
Para
todos
.
"
artist
:
"
Mozilla
.
org
"
}
}
{
name
:
"
sound
.
ogg
"
tags
:
{
}
}
{
name
:
"
small
-
shot
.
ogg
"
tags
:
{
title
:
"
Pew
SFX
"
}
}
{
name
:
"
badtags
.
ogg
"
tags
:
{
title
:
"
Invalid
comments
test
file
"
empty
:
"
"
"
"
:
"
empty
"
"
{
-
[
(
!
\
"
#
%
^
&
'
)
]
-
}
"
:
"
valid
tag
name
surprisingly
"
}
}
{
name
:
"
wave_metadata
.
wav
"
tags
:
{
name
:
"
Track
Title
"
artist
:
"
Artist
Name
"
comments
:
"
Comments
"
}
}
{
name
:
"
wave_metadata_utf8
.
wav
"
tags
:
{
name
:
"
"
artist
:
"
"
comments
:
"
"
}
}
{
name
:
"
wave_metadata_unknown_tag
.
wav
"
tags
:
{
name
:
"
Track
Title
"
comments
:
"
Comments
"
}
}
{
name
:
"
wave_metadata_bad_len
.
wav
"
tags
:
{
name
:
"
Track
Title
"
artist
:
"
Artist
Name
"
comments
:
"
Comments
"
}
}
{
name
:
"
wave_metadata_bad_no_null
.
wav
"
tags
:
{
name
:
"
Track
Title
"
artist
:
"
Artist
Name
"
comments
:
"
Comments
!
!
"
}
}
{
name
:
"
wave_metadata_bad_utf8
.
wav
"
tags
:
{
name
:
"
"
comments
:
"
"
}
}
{
name
:
"
wavedata_u8
.
wav
"
tags
:
{
}
}
]
;
if
(
getAndroidVersion
(
)
<
0
)
{
gMetadataTests
=
gMetadataTests
.
concat
(
[
{
name
:
"
flac
-
s24
.
flac
"
tags
:
{
ALBUM
:
"
Seascapes
"
TITLE
:
"
(
La
Mer
)
-
II
.
Jeux
de
vagues
.
Allegro
"
COMPOSER
:
"
Debussy
Claude
"
TRACKNUMBER
:
"
2
/
9
"
DISCNUMBER
:
"
1
/
1
"
encoder
:
"
Lavf57
.
41
.
100
"
}
}
]
)
;
}
var
gEMETests
=
[
{
name
:
"
vp9
in
mp4
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
vp9
.
0
"
'
fragments
:
[
"
short
-
vp9
-
encrypted
-
video
.
mp4
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
short
-
aac
-
encrypted
-
audio
.
mp4
"
]
}
]
keys
:
{
"
2cdb0ed6119853e7850671c3e9906c3c
"
:
"
808B9ADAC384DE1E4F56140F4AD76194
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
0
.
47
}
{
name
:
"
video
-
only
with
2
keys
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop
-
cenc
-
videoinit
.
mp4
"
"
bipbop
-
cenc
-
video1
.
m4s
"
"
bipbop
-
cenc
-
video2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d03
"
:
"
7e5733337e5733337e5733337e573333
"
"
7e571d047e571d047e571d047e571d04
"
:
"
7e5744447e5744447e5744447e574444
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
1
.
6
}
{
name
:
"
video
-
only
with
2
keys
CORS
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop
-
cenc
-
videoinit
.
mp4
"
"
bipbop
-
cenc
-
video1
.
m4s
"
"
bipbop
-
cenc
-
video2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d03
"
:
"
7e5733337e5733337e5733337e573333
"
"
7e571d047e571d047e571d047e571d04
"
:
"
7e5744447e5744447e5744447e574444
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
crossOrigin
:
true
duration
:
1
.
6
}
{
name
:
"
audio
&
video
tracks
both
with
all
keys
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop
-
cenc
-
audioinit
.
mp4
"
"
bipbop
-
cenc
-
audio1
.
m4s
"
"
bipbop
-
cenc
-
audio2
.
m4s
"
"
bipbop
-
cenc
-
audio3
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop
-
cenc
-
videoinit
.
mp4
"
"
bipbop
-
cenc
-
video1
.
m4s
"
"
bipbop
-
cenc
-
video2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d03
"
:
"
7e5733337e5733337e5733337e573333
"
"
7e571d047e571d047e571d047e571d04
"
:
"
7e5744447e5744447e5744447e574444
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
audio
&
video
tracks
both
with
all
keys
CORS
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop
-
cenc
-
audioinit
.
mp4
"
"
bipbop
-
cenc
-
audio1
.
m4s
"
"
bipbop
-
cenc
-
audio2
.
m4s
"
"
bipbop
-
cenc
-
audio3
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop
-
cenc
-
videoinit
.
mp4
"
"
bipbop
-
cenc
-
video1
.
m4s
"
"
bipbop
-
cenc
-
video2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d03
"
:
"
7e5733337e5733337e5733337e573333
"
"
7e571d047e571d047e571d047e571d04
"
:
"
7e5744447e5744447e5744447e574444
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
crossOrigin
:
true
duration
:
1
.
6
}
{
name
:
"
400x300
audio
&
video
tracks
each
with
its
key
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
640x480
624kbps
audio
&
video
tracks
each
with
its
key
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
640x480
959kbps
audio
&
video
tracks
each
with
its
key
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_480_959kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_959kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
640x480
then
400x300
same
key
(
1st
)
per
track
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
640x480
then
400x300
same
key
(
2nd
)
per
track
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
audio
-
key2
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key2
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key2
-
2
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key2
-
3
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key2
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
"
7e571d047e571d047e571d047e571d22
"
:
"
7e5744447e5744447e5744447e574422
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
640x480
with
1st
keys
then
400x300
with
2nd
keys
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
400x300
with
1st
keys
then
640x480
with
2nd
keys
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
640x480
959kbps
with
1st
keys
then
640x480
624kbps
with
2nd
keys
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_480_959kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_959kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
640x480
624kbps
with
1st
keys
then
640x480
959kbps
with
2nd
keys
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_959kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_480_959kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
400x300
with
presentation
size
533x300
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_300wp_227kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_300wp_227kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_300wp_227kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_300wp_227kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_300wp_227kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_300wp_227kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300wp_227kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_300wp_227kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
400x300
as
-
is
then
400x300
presented
as
533x300
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_300_215kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300_215kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_300wp_227kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_300wp_227kbps
-
cenc
-
video
-
key1
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
400x225
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
64000d
"
'
fragments
:
[
"
bipbop_225w_175kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_225w_175kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
640x360
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
64001e
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_360w_253kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
400x225
then
640x360
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_225w_175kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
64000d
avc1
.
64001e
"
'
fragments
:
[
"
bipbop_225w_175kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_225w_175kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_360w_253kbps
-
cenc
-
video
-
key2
-
1
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
640x360
then
640x480
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
init
.
mp4
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
1
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
2
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
3
.
m4s
"
"
bipbop_360w_253kbps
-
cenc
-
audio
-
key1
-
4
.
m4s
"
]
}
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
64001e
avc1
.
4d401e
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
cenc
-
video
-
key1
-
init
.
mp4
"
"
bipbop_360w_253kbps
-
cenc
-
video
-
key1
-
1
.
m4s
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
init
.
mp4
"
"
bipbop_480_624kbps
-
cenc
-
video
-
key2
-
2
.
m4s
"
]
}
]
keys
:
{
"
7e571d037e571d037e571d037e571d11
"
:
"
7e5733337e5733337e5733337e573311
"
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
"
7e571d037e571d037e571d037e571d12
"
:
"
7e5733337e5733337e5733337e573312
"
}
sessionType
:
"
temporary
"
sessionCount
:
3
duration
:
1
.
6
}
{
name
:
"
flac
in
mp4
clearkey
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
flac
"
'
fragments
:
[
"
flac
-
sample
-
cenc
.
mp4
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
2
.
05
}
{
name
:
"
opus
in
mp4
clearkey
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
opus
"
'
fragments
:
[
"
opus
-
sample
-
cenc
.
mp4
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
1
.
98
}
{
name
:
"
MP4
av1
video
clearkey
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
av1
"
'
fragments
:
[
"
bipbop
-
clearkey
-
video
-
av1
.
mp4
"
]
}
]
keys
:
{
"
8b5df745ad84145b5617c33116e35a67
"
:
"
bddfd35dd9be033ee73bc18bc1885056
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
2
.
0
skipTests
:
[
"
waitingforkey
"
]
}
{
name
:
"
WebM
av1
video
clearkey
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
webm
;
codecs
=
"
av1
"
'
fragments
:
[
"
bipbop
-
clearkey
-
video
-
av1
.
webm
"
]
}
]
keys
:
{
"
8b5df745ad84145b5617c33116e35a67
"
:
"
bddfd35dd9be033ee73bc18bc1885056
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
2
.
0
skipTests
:
[
"
waitingforkey
"
]
}
{
name
:
"
WebM
vorbis
audio
&
vp8
video
clearkey
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
webm
;
codecs
=
"
vorbis
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
clearkey
-
audio
.
webm
"
]
}
{
name
:
"
video
"
type
:
'
video
/
webm
;
codecs
=
"
vp8
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
clearkey
-
video
-
vp8
.
webm
"
]
}
]
keys
:
{
f1f3ee1790527e9de47217d43835f76a
:
"
97b9ddc459c8d5ff23c1f2754c95abe8
"
"
8b5df745ad84145b5617c33116e35a67
"
:
"
bddfd35dd9be033ee73bc18bc1885056
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
WebM
vorbis
audio
&
vp9
video
clearkey
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
webm
;
codecs
=
"
vorbis
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
clearkey
-
audio
.
webm
"
]
}
{
name
:
"
video
"
type
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
fragments
:
[
"
bipbop_360w_253kbps
-
clearkey
-
video
-
vp9
.
webm
"
]
}
]
keys
:
{
f1f3ee1790527e9de47217d43835f76a
:
"
97b9ddc459c8d5ff23c1f2754c95abe8
"
eedf63a94fa7c398ee094f123a4ee709
:
"
973b679a746c82f3acdb856b30e9378e
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
1
.
6
}
{
name
:
"
WebM
vorbis
audio
&
vp9
video
clearkey
with
subsample
encryption
"
tracks
:
[
{
name
:
"
audio
"
type
:
'
audio
/
webm
;
codecs
=
"
vorbis
"
'
fragments
:
[
"
sintel
-
short
-
clearkey
-
subsample
-
encrypted
-
audio
.
webm
"
]
}
{
name
:
"
video
"
type
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
fragments
:
[
"
sintel
-
short
-
clearkey
-
subsample
-
encrypted
-
video
.
webm
"
]
}
]
keys
:
{
"
2cdb0ed6119853e7850671c3e9906c3c
"
:
"
808B9ADAC384DE1E4F56140F4AD76194
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
0
}
{
name
:
"
avc3
h264
video
in
mp4
using
clearkey
cenc
encryption
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc3
.
640015
"
'
fragments
:
[
"
big
-
buck
-
bunny
-
cenc
-
avc3
-
init
.
mp4
"
"
big
-
buck
-
bunny
-
cenc
-
avc3
-
1
.
m4s
"
]
}
]
keys
:
{
"
10000000100010001000100000000001
"
:
"
3A2A1B68DD2BD9B2EEB25E84C4776668
"
}
sessionType
:
"
temporary
"
sessionCount
:
1
duration
:
2
.
08
}
{
name
:
"
mp4
h264
+
aac
clearkey
cbcs
1
:
9
pattern
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_cbcs_1_9_video_init
.
mp4
"
"
bipbop_cbcs_1_9_video_1
.
m4s
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_cbcs_1_9_audio_init
.
mp4
"
"
bipbop_cbcs_1_9_audio_1
.
m4s
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
04
}
{
name
:
"
mp4
h264
+
aac
clearkey
cbcs
5
:
5
pattern
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_cbcs_5_5_video_init
.
mp4
"
"
bipbop_cbcs_5_5_video_1
.
m4s
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_cbcs_5_5_audio_init
.
mp4
"
"
bipbop_cbcs_5_5_audio_1
.
m4s
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
04
}
{
name
:
"
mp4
h264
+
aac
clearkey
cbcs
10
:
0
pattern
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_cbcs_10_0_video_init
.
mp4
"
"
bipbop_cbcs_10_0_video_1
.
m4s
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_cbcs_10_0_audio_init
.
mp4
"
"
bipbop_cbcs_10_0_audio_1
.
m4s
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
04
}
{
name
:
"
mp4
h264
+
aac
clearkey
cbcs
7
:
7
pattern
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_cbcs_7_7_video_init
.
mp4
"
"
bipbop_cbcs_7_7_video_1
.
m4s
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_cbcs_7_7_audio_init
.
mp4
"
"
bipbop_cbcs_7_7_audio_1
.
m4s
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
04
}
{
name
:
"
mp4
h264
+
aac
clearkey
cbcs
9
:
8
pattern
"
tracks
:
[
{
name
:
"
video
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4d4015
"
'
fragments
:
[
"
bipbop_cbcs_9_8_video_init
.
mp4
"
"
bipbop_cbcs_9_8_video_1
.
m4s
"
]
}
{
name
:
"
audio
"
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
fragments
:
[
"
bipbop_cbcs_9_8_audio_init
.
mp4
"
"
bipbop_cbcs_9_8_audio_1
.
m4s
"
]
}
]
keys
:
{
"
7e571d047e571d047e571d047e571d21
"
:
"
7e5744447e5744447e5744447e574421
"
}
sessionType
:
"
temporary
"
sessionCount
:
2
duration
:
2
.
04
}
]
;
var
gEMENonMSEFailTests
=
[
{
name
:
"
short
-
cenc
.
mp4
"
audioType
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
videoType
:
'
video
/
mp4
;
codecs
=
"
avc1
.
64000d
"
'
duration
:
0
.
47
}
]
;
var
gSeamlessLoopingTests
=
[
{
name
:
"
sin
-
441
-
1s
-
44100
-
lame
.
mp3
"
type
:
"
audio
/
mpeg
"
}
{
name
:
"
sin
-
441
-
1s
-
44100
.
flac
"
type
:
"
audio
/
flac
"
}
]
;
var
gDecodeSuspendTests
=
[
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
5
.
56
}
{
name
:
"
gizmo
-
noaudio
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
5
.
56
}
{
name
:
"
gizmo
.
webm
"
type
:
'
video
/
webm
;
codecs
=
"
vp9
opus
"
'
duration
:
5
.
56
}
{
name
:
"
gizmo
-
noaudio
.
webm
"
type
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
duration
:
5
.
56
}
]
;
var
gVideoLowPowerTests
=
[
{
name
:
"
gizmo
.
mp4
"
type
:
"
video
/
mp4
"
duration
:
5
.
56
}
]
;
function
checkMetadata
(
msg
e
test
)
{
if
(
test
.
width
)
{
is
(
e
.
videoWidth
test
.
width
msg
+
"
video
width
"
)
;
}
if
(
test
.
height
)
{
is
(
e
.
videoHeight
test
.
height
msg
+
"
video
height
"
)
;
}
if
(
test
.
duration
)
{
ok
(
Math
.
abs
(
e
.
duration
-
test
.
duration
)
<
0
.
1
msg
+
"
duration
(
"
+
e
.
duration
+
"
)
should
be
around
"
+
test
.
duration
)
;
}
is
(
!
!
test
.
keys
SpecialPowers
.
do_lookupGetter
(
e
"
isEncrypted
"
)
.
apply
(
e
)
msg
+
"
isEncrypted
should
be
true
if
we
have
decryption
keys
"
)
;
}
function
getPlayableVideo
(
candidates
)
{
var
resources
=
getPlayableVideos
(
candidates
)
;
if
(
resources
.
length
)
{
return
resources
[
0
]
;
}
return
null
;
}
function
getPlayableVideos
(
candidates
)
{
var
v
=
manifestVideo
(
)
;
return
candidates
.
filter
(
function
(
x
)
{
return
/
^
video
/
.
test
(
x
.
type
)
&
&
v
.
canPlayType
(
x
.
type
)
;
}
)
;
}
function
getPlayableAudio
(
candidates
)
{
var
v
=
manifestVideo
(
)
;
var
resources
=
candidates
.
filter
(
function
(
x
)
{
return
/
^
audio
/
.
test
(
x
.
type
)
&
&
v
.
canPlayType
(
x
.
type
)
;
}
)
;
if
(
resources
.
length
)
{
return
resources
[
0
]
;
}
return
null
;
}
function
getMajorMimeType
(
mimetype
)
{
if
(
/
^
video
/
.
test
(
mimetype
)
)
{
return
"
video
"
;
}
return
"
audio
"
;
}
function
removeNodeAndSource
(
n
)
{
n
.
remove
(
)
;
n
.
srcObject
=
null
;
n
.
removeAttribute
(
"
src
"
)
;
n
.
load
(
)
;
while
(
n
.
firstChild
)
{
n
.
firstChild
.
remove
(
)
;
}
}
function
once
(
target
name
cb
)
{
var
p
=
new
Promise
(
function
(
resolve
)
{
target
.
addEventListener
(
name
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
if
(
cb
)
{
p
.
then
(
cb
)
;
}
return
p
;
}
function
nextEvent
(
video
eventName
)
{
return
new
Promise
(
function
(
resolve
)
{
let
f
=
function
(
event
)
{
video
.
removeEventListener
(
eventName
f
)
;
resolve
(
event
)
;
}
;
video
.
addEventListener
(
eventName
f
)
;
}
)
;
}
function
TimeStamp
(
token
)
{
function
pad
(
x
)
{
return
x
<
10
?
"
0
"
+
x
:
x
;
}
var
now
=
new
Date
(
)
;
var
ms
=
now
.
getMilliseconds
(
)
;
var
time
=
"
[
"
+
pad
(
now
.
getHours
(
)
)
+
"
:
"
+
pad
(
now
.
getMinutes
(
)
)
+
"
:
"
+
pad
(
now
.
getSeconds
(
)
)
+
"
.
"
+
ms
+
"
]
"
+
(
ms
<
10
?
"
"
:
ms
<
100
?
"
"
:
"
"
)
;
return
token
?
time
+
"
"
+
token
:
time
;
}
function
Log
(
token
msg
)
{
info
(
TimeStamp
(
token
)
+
"
"
+
msg
)
;
}
var
PARALLEL_TESTS
=
2
;
if
(
SpecialPowers
.
Services
.
prefs
.
getIntPref
(
"
media
.
wmf
.
media
-
engine
.
enabled
"
0
)
)
{
PARALLEL_TESTS
=
1
;
}
var
gTestPrefs
=
[
[
"
media
.
recorder
.
max_memory
"
1024
]
[
"
media
.
audio
-
max
-
decode
-
error
"
0
]
[
"
media
.
video
-
max
-
decode
-
error
"
0
]
]
;
const
DEBUG_TEST_LOOP_FOREVER
=
false
;
function
MediaTestManager
(
)
{
SimpleTest
.
requestLongerTimeout
(
1000
)
;
function
elapsedTime
(
begin
)
{
var
end
=
new
Date
(
)
;
return
(
end
.
getTime
(
)
-
begin
.
getTime
(
)
)
/
1000
;
}
this
.
runTests
=
function
(
tests
startTest
)
{
this
.
startTime
=
new
Date
(
)
;
SimpleTest
.
info
(
"
Started
"
+
this
.
startTime
+
"
(
"
+
this
.
startTime
.
getTime
(
)
/
1000
+
"
s
)
"
)
;
this
.
testNum
=
0
;
this
.
tests
=
tests
;
this
.
startTest
=
startTest
;
this
.
tokens
=
[
]
;
this
.
isShutdown
=
false
;
this
.
numTestsRunning
=
0
;
this
.
handlers
=
{
}
;
this
.
timers
=
{
}
;
SimpleTest
.
waitForExplicitFinish
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
gTestPrefs
}
(
)
=
>
{
this
.
nextTest
(
)
;
}
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
if
(
this
.
tokens
.
length
)
{
info
(
"
Test
timed
out
.
Remaining
tests
=
"
+
this
.
tokens
)
;
}
for
(
var
token
of
this
.
tokens
)
{
var
handler
=
this
.
handlers
[
token
]
;
if
(
handler
&
&
handler
.
ontimeout
)
{
handler
.
ontimeout
(
)
;
}
}
}
)
;
}
;
this
.
started
=
function
(
token
handler
)
{
this
.
tokens
.
push
(
token
)
;
this
.
numTestsRunning
+
+
;
this
.
handlers
[
token
]
=
handler
;
var
onTimeout
=
async
(
)
=
>
{
ok
(
false
"
Test
timed
out
!
"
)
;
info
(
{
token
}
timed
out
!
)
;
await
dumpDebugInfoForToken
(
token
)
;
this
.
finished
(
token
)
;
}
;
this
.
timers
[
token
]
=
SimpleTest
.
_originalSetTimeout
.
call
(
window
onTimeout
180000
)
;
is
(
this
.
numTestsRunning
this
.
tokens
.
length
"
[
started
"
+
token
+
"
t
=
"
+
elapsedTime
(
this
.
startTime
)
+
"
]
Length
of
array
should
match
number
of
running
tests
"
)
;
}
;
this
.
finished
=
function
(
token
)
{
var
i
=
this
.
tokens
.
indexOf
(
token
)
;
if
(
i
!
=
-
1
)
{
this
.
tokens
.
splice
(
i
1
)
;
}
if
(
this
.
timers
[
token
]
)
{
clearTimeout
(
this
.
timers
[
token
]
)
;
this
.
timers
[
token
]
=
null
;
}
info
(
"
[
finished
"
+
token
+
"
]
remaining
=
"
+
this
.
tokens
)
;
this
.
numTestsRunning
-
-
;
is
(
this
.
numTestsRunning
this
.
tokens
.
length
"
[
finished
"
+
token
+
"
t
=
"
+
elapsedTime
(
this
.
startTime
)
+
"
]
Length
of
array
should
match
number
of
running
tests
"
)
;
if
(
this
.
tokens
.
length
<
PARALLEL_TESTS
)
{
this
.
nextTest
(
)
;
}
}
;
this
.
nextTest
=
function
(
)
{
while
(
this
.
testNum
<
this
.
tests
.
length
&
&
this
.
tokens
.
length
<
PARALLEL_TESTS
)
{
var
test
=
this
.
tests
[
this
.
testNum
]
;
var
token
=
(
test
.
name
?
test
.
name
+
"
-
"
:
"
"
)
+
this
.
testNum
;
this
.
testNum
+
+
;
if
(
DEBUG_TEST_LOOP_FOREVER
&
&
this
.
testNum
=
=
this
.
tests
.
length
)
{
this
.
testNum
=
0
;
}
if
(
test
.
type
&
&
!
document
.
createElement
(
"
video
"
)
.
canPlayType
(
test
.
type
)
)
{
SimpleTest
.
info
(
Skipping
{
token
}
type
=
{
test
.
type
}
)
;
continue
;
}
this
.
startTest
(
test
token
)
;
}
if
(
this
.
testNum
=
=
this
.
tests
.
length
&
&
!
DEBUG_TEST_LOOP_FOREVER
&
&
!
this
.
tokens
.
length
&
&
!
this
.
isShutdown
)
{
this
.
isShutdown
=
true
;
if
(
this
.
onFinished
)
{
this
.
onFinished
(
)
;
}
var
onCleanup
=
(
)
=
>
{
var
end
=
new
Date
(
)
;
SimpleTest
.
info
(
"
Finished
at
"
+
end
+
"
(
"
+
end
.
getTime
(
)
/
1000
+
"
s
)
"
)
;
SimpleTest
.
info
(
"
Running
time
:
"
+
elapsedTime
(
this
.
startTime
)
+
"
s
"
)
;
SimpleTest
.
finish
(
)
;
}
;
mediaTestCleanup
(
onCleanup
)
;
}
}
;
}
function
mediaTestCleanup
(
callback
)
{
var
V
=
document
.
getElementsByTagName
(
"
video
"
)
;
for
(
let
i
=
0
;
i
<
V
.
length
;
i
+
+
)
{
removeNodeAndSource
(
V
[
i
]
)
;
V
[
i
]
=
null
;
}
var
A
=
document
.
getElementsByTagName
(
"
audio
"
)
;
for
(
let
i
=
0
;
i
<
A
.
length
;
i
+
+
)
{
removeNodeAndSource
(
A
[
i
]
)
;
A
[
i
]
=
null
;
}
SpecialPowers
.
exactGC
(
callback
)
;
}
async
function
dumpDebugInfoForToken
(
token
)
{
for
(
let
v
of
document
.
getElementsByTagName
(
"
video
"
)
)
{
if
(
token
=
=
=
v
.
token
)
{
info
(
JSON
.
stringify
(
await
SpecialPowers
.
wrap
(
v
)
.
mozRequestDebugInfo
(
)
)
)
;
return
;
}
}
for
(
let
a
of
document
.
getElementsByTagName
(
"
audio
"
)
)
{
if
(
token
=
=
=
a
.
token
)
{
info
(
JSON
.
stringify
(
await
SpecialPowers
.
wrap
(
a
)
.
mozRequestDebugInfo
(
)
)
)
;
return
;
}
}
}
if
(
"
SimpleTest
"
in
window
)
{
SimpleTest
.
requestFlakyTimeout
(
"
untriaged
"
)
;
SimpleTest
.
registerTimeoutFunction
(
async
function
(
)
{
for
(
const
v
of
document
.
getElementsByTagName
(
"
video
"
)
)
{
SimpleTest
.
info
(
JSON
.
stringify
(
await
SpecialPowers
.
wrap
(
v
)
.
mozRequestDebugInfo
(
)
)
)
;
}
for
(
const
a
of
document
.
getElementsByTagName
(
"
audio
"
)
)
{
SimpleTest
.
info
(
JSON
.
stringify
(
await
SpecialPowers
.
wrap
(
a
)
.
mozRequestDebugInfo
(
)
)
)
;
}
}
)
;
}
