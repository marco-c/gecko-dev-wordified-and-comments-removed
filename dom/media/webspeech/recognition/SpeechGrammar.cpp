#
include
"
SpeechGrammar
.
h
"
#
include
"
mozilla
/
dom
/
SpeechGrammarBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
SpeechGrammar
mParent
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
SpeechGrammar
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
SpeechGrammar
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
SpeechGrammar
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
SpeechGrammar
:
:
SpeechGrammar
(
nsISupports
*
aParent
)
:
mParent
(
aParent
)
{
}
SpeechGrammar
:
:
~
SpeechGrammar
(
)
=
default
;
already_AddRefed
<
SpeechGrammar
>
SpeechGrammar
:
:
Constructor
(
const
GlobalObject
&
aGlobal
)
{
RefPtr
<
SpeechGrammar
>
speechGrammar
=
new
SpeechGrammar
(
aGlobal
.
GetAsSupports
(
)
)
;
return
speechGrammar
.
forget
(
)
;
}
nsISupports
*
SpeechGrammar
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
SpeechGrammar
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SpeechGrammar_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
SpeechGrammar
:
:
GetSrc
(
nsString
&
aRetVal
ErrorResult
&
aRv
)
const
{
aRetVal
=
mSrc
;
}
void
SpeechGrammar
:
:
SetSrc
(
const
nsAString
&
aArg
ErrorResult
&
aRv
)
{
mSrc
=
aArg
;
}
float
SpeechGrammar
:
:
GetWeight
(
ErrorResult
&
aRv
)
const
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
0
;
}
void
SpeechGrammar
:
:
SetWeight
(
float
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
