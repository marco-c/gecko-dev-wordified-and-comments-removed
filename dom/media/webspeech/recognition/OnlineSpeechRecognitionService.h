#
ifndef
mozilla_dom_OnlineRecognitionService_h
#
define
mozilla_dom_OnlineRecognitionService_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsISpeechRecognitionService
.
h
"
#
include
"
speex
/
speex_resampler
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
OpusTrackEncoder
.
h
"
#
include
"
ContainerWriter
.
h
"
#
define
NS_ONLINE_SPEECH_RECOGNITION_SERVICE_CID
\
{
0x0ff5ce56
\
0x5b09
\
0x4db8
\
{
0xad
0xc6
0x82
0x66
0xaf
0x95
0xf8
0x64
}
}
;
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
class
OnlineSpeechRecognitionService
:
public
nsISpeechRecognitionService
public
nsIStreamListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSISPEECHRECOGNITIONSERVICE
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
class
SpeechEncoderListener
:
public
TrackEncoderListener
{
public
:
explicit
SpeechEncoderListener
(
OnlineSpeechRecognitionService
*
aService
)
:
mService
(
aService
)
mOwningThread
(
AbstractThread
:
:
GetCurrent
(
)
)
{
}
void
Started
(
TrackEncoder
*
aEncoder
)
override
{
}
void
Initialized
(
TrackEncoder
*
aEncoder
)
override
{
MOZ_ASSERT
(
mOwningThread
-
>
IsCurrentThreadIn
(
)
)
;
mService
-
>
EncoderInitialized
(
)
;
}
void
Error
(
TrackEncoder
*
aEncoder
)
override
{
MOZ_ASSERT
(
mOwningThread
-
>
IsCurrentThreadIn
(
)
)
;
mService
-
>
EncoderError
(
)
;
}
private
:
const
RefPtr
<
OnlineSpeechRecognitionService
>
mService
;
const
RefPtr
<
AbstractThread
>
mOwningThread
;
}
;
OnlineSpeechRecognitionService
(
)
;
void
EncoderInitialized
(
)
;
void
EncoderFinished
(
)
;
void
EncoderError
(
)
;
private
:
virtual
~
OnlineSpeechRecognitionService
(
)
;
nsMainThreadPtrHandle
<
dom
:
:
SpeechRecognition
>
mRecognition
;
dom
:
:
SpeechRecognitionResultList
*
BuildMockResultList
(
)
;
void
DoSTT
(
)
;
nsTArray
<
nsTArray
<
uint8_t
>
>
mEncodedData
;
RefPtr
<
SpeechEncoderListener
>
mSpeechEncoderListener
;
MediaQueue
<
EncodedFrame
>
mEncodedAudioQueue
;
UniquePtr
<
AudioTrackEncoder
>
mAudioEncoder
;
UniquePtr
<
ContainerWriter
>
mWriter
;
nsCString
mBuf
;
TimeStamp
mFirstIteration
;
bool
mAborted
=
false
;
RefPtr
<
TaskQueue
>
mEncodeTaskQueue
;
}
;
}
#
endif
