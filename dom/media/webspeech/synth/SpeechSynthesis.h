#
ifndef
mozilla_dom_SpeechSynthesis_h
#
define
mozilla_dom_SpeechSynthesis_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
SpeechSynthesisUtterance
.
h
"
#
include
"
SpeechSynthesisVoice
.
h
"
class
nsIDOMWindow
;
namespace
mozilla
{
namespace
dom
{
class
nsSpeechTask
;
class
SpeechSynthesis
final
:
public
DOMEventTargetHelper
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
explicit
SpeechSynthesis
(
nsPIDOMWindowInner
*
aParent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SpeechSynthesis
DOMEventTargetHelper
)
NS_DECL_NSIOBSERVER
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
bool
Pending
(
)
const
;
bool
Speaking
(
)
const
;
bool
Paused
(
)
const
;
bool
HasEmptyQueue
(
)
const
;
void
Speak
(
SpeechSynthesisUtterance
&
aUtterance
)
;
void
Cancel
(
)
;
void
Pause
(
)
;
void
Resume
(
)
;
void
OnEnd
(
const
nsSpeechTask
*
aTask
)
;
void
GetVoices
(
nsTArray
<
RefPtr
<
SpeechSynthesisVoice
>
>
&
aResult
)
;
void
ForceEnd
(
)
;
SpeechSynthesisUtterance
*
CurrentUtterance
(
)
const
;
IMPL_EVENT_HANDLER
(
voiceschanged
)
private
:
virtual
~
SpeechSynthesis
(
)
;
void
AdvanceQueue
(
)
;
void
DispatchToCanceledQueue
(
)
;
bool
HasVoices
(
)
const
;
nsTArray
<
RefPtr
<
SpeechSynthesisUtterance
>
>
mSpeechQueue
;
nsTArray
<
RefPtr
<
SpeechSynthesisUtterance
>
>
mCanceledQueue
;
RefPtr
<
nsSpeechTask
>
mCurrentTask
;
nsRefPtrHashtable
<
nsStringHashKey
SpeechSynthesisVoice
>
mVoiceCache
;
bool
mHoldQueue
;
uint64_t
mInnerID
;
}
;
}
}
#
endif
