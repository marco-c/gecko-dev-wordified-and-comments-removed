#
ifndef
MEDIASTREAMTRACK_H_
#
define
MEDIASTREAMTRACK_H_
#
include
"
MediaTrackConstraints
.
h
"
#
include
"
PrincipalChangeObserver
.
h
"
#
include
"
PrincipalHandle
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaTrackSettingsBinding
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIPrincipal
.
h
"
namespace
mozilla
{
class
DOMMediaStream
;
class
MediaEnginePhotoCallback
;
class
MediaInputPort
;
class
MediaTrack
;
class
MediaTrackGraph
;
class
MediaTrackGraphImpl
;
class
MediaTrackListener
;
class
DirectMediaTrackListener
;
class
PeerConnectionImpl
;
class
PeerConnectionMedia
;
class
PeerIdentity
;
class
ProcessedMediaTrack
;
class
RemoteSourceStreamInfo
;
class
SourceStreamInfo
;
class
MediaMgrError
;
namespace
dom
{
class
AudioStreamTrack
;
class
VideoStreamTrack
;
enum
class
CallerType
:
uint32_t
;
class
MediaStreamTrackSource
:
public
nsISupports
{
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
MediaStreamTrackSource
)
public
:
class
Sink
:
public
SupportsWeakPtr
<
Sink
>
{
public
:
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
MediaStreamTrackSource
:
:
Sink
)
virtual
bool
KeepsSourceAlive
(
)
const
=
0
;
virtual
bool
Enabled
(
)
const
=
0
;
virtual
void
PrincipalChanged
(
)
=
0
;
virtual
void
MutedChanged
(
bool
aNewState
)
=
0
;
virtual
void
OverrideEnded
(
)
=
0
;
protected
:
virtual
~
Sink
(
)
=
default
;
}
;
MediaStreamTrackSource
(
nsIPrincipal
*
aPrincipal
const
nsString
&
aLabel
)
:
mPrincipal
(
aPrincipal
)
mLabel
(
aLabel
)
mStopped
(
false
)
{
}
virtual
void
Destroy
(
)
{
}
virtual
MediaSourceEnum
GetMediaSource
(
)
const
=
0
;
nsIPrincipal
*
GetPrincipal
(
)
const
{
return
mPrincipal
;
}
virtual
const
PeerIdentity
*
GetPeerIdentity
(
)
const
{
return
nullptr
;
}
void
GetLabel
(
nsAString
&
aLabel
)
{
aLabel
.
Assign
(
mLabel
)
;
}
virtual
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
)
const
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
typedef
MozPromise
<
bool
RefPtr
<
MediaMgrError
>
true
>
ApplyConstraintsPromise
;
virtual
RefPtr
<
ApplyConstraintsPromise
>
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
)
;
virtual
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aResult
)
{
}
;
virtual
void
Stop
(
)
=
0
;
virtual
void
Disable
(
)
=
0
;
virtual
void
Enable
(
)
=
0
;
void
SinkEnabledStateChanged
(
)
{
if
(
IsEnabled
(
)
)
{
Enable
(
)
;
}
else
{
Disable
(
)
;
}
}
void
RegisterSink
(
Sink
*
aSink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStopped
)
{
return
;
}
mSinks
.
AppendElement
(
aSink
)
;
while
(
mSinks
.
RemoveElement
(
nullptr
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Sink
was
not
explicitly
removed
"
)
;
}
}
void
UnregisterSink
(
Sink
*
aSink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
while
(
mSinks
.
RemoveElement
(
nullptr
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Sink
was
not
explicitly
removed
"
)
;
}
if
(
mSinks
.
RemoveElement
(
aSink
)
&
&
!
IsActive
(
)
)
{
MOZ_ASSERT
(
!
aSink
-
>
KeepsSourceAlive
(
)
|
|
!
mStopped
"
When
the
last
sink
keeping
the
source
alive
is
removed
"
"
we
should
still
be
live
"
)
;
Stop
(
)
;
mStopped
=
true
;
}
if
(
!
mStopped
)
{
SinkEnabledStateChanged
(
)
;
}
}
protected
:
virtual
~
MediaStreamTrackSource
(
)
=
default
;
bool
IsActive
(
)
{
for
(
const
WeakPtr
<
Sink
>
&
sink
:
mSinks
)
{
if
(
sink
&
&
sink
-
>
KeepsSourceAlive
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
IsEnabled
(
)
{
for
(
const
WeakPtr
<
Sink
>
&
sink
:
mSinks
)
{
if
(
sink
&
&
sink
-
>
KeepsSourceAlive
(
)
&
&
sink
-
>
Enabled
(
)
)
{
return
true
;
}
}
return
false
;
}
void
PrincipalChanged
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
sink
:
mSinks
.
Clone
(
)
)
{
if
(
!
sink
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Sink
was
not
explicitly
removed
"
)
;
mSinks
.
RemoveElement
(
sink
)
;
continue
;
}
sink
-
>
PrincipalChanged
(
)
;
}
}
void
MutedChanged
(
bool
aNewState
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
sink
:
mSinks
.
Clone
(
)
)
{
if
(
!
sink
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Sink
was
not
explicitly
removed
"
)
;
mSinks
.
RemoveElement
(
sink
)
;
continue
;
}
sink
-
>
MutedChanged
(
aNewState
)
;
}
}
void
OverrideEnded
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
auto
&
sink
:
mSinks
.
Clone
(
)
)
{
if
(
!
sink
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Sink
was
not
explicitly
removed
"
)
;
mSinks
.
RemoveElement
(
sink
)
;
continue
;
}
sink
-
>
OverrideEnded
(
)
;
}
}
RefPtr
<
nsIPrincipal
>
mPrincipal
;
nsTArray
<
WeakPtr
<
Sink
>
>
mSinks
;
const
nsString
mLabel
;
bool
mStopped
;
}
;
class
BasicTrackSource
:
public
MediaStreamTrackSource
{
public
:
explicit
BasicTrackSource
(
nsIPrincipal
*
aPrincipal
const
MediaSourceEnum
aMediaSource
=
MediaSourceEnum
:
:
Other
)
:
MediaStreamTrackSource
(
aPrincipal
nsString
(
)
)
mMediaSource
(
aMediaSource
)
{
}
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
mMediaSource
;
}
void
Stop
(
)
override
{
}
void
Disable
(
)
override
{
}
void
Enable
(
)
override
{
}
protected
:
~
BasicTrackSource
(
)
=
default
;
const
MediaSourceEnum
mMediaSource
;
}
;
class
MediaStreamTrackConsumer
:
public
SupportsWeakPtr
<
MediaStreamTrackConsumer
>
{
public
:
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
MediaStreamTrackConsumer
)
virtual
void
NotifyEnded
(
MediaStreamTrack
*
aTrack
)
{
}
;
virtual
void
NotifyEnabledChanged
(
MediaStreamTrack
*
aTrack
bool
aEnabled
)
{
}
;
}
;
class
MediaStreamTrack
:
public
DOMEventTargetHelper
public
SupportsWeakPtr
<
MediaStreamTrack
>
{
friend
class
mozilla
:
:
PeerConnectionImpl
;
friend
class
mozilla
:
:
PeerConnectionMedia
;
friend
class
mozilla
:
:
SourceStreamInfo
;
friend
class
mozilla
:
:
RemoteSourceStreamInfo
;
class
MTGListener
;
class
TrackSink
;
public
:
MediaStreamTrack
(
nsPIDOMWindowInner
*
aWindow
mozilla
:
:
MediaTrack
*
aInputTrack
MediaStreamTrackSource
*
aSource
MediaStreamTrackState
aReadyState
=
MediaStreamTrackState
:
:
Live
bool
aMuted
=
false
const
MediaTrackConstraints
&
aConstraints
=
MediaTrackConstraints
(
)
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
MediaStreamTrack
)
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
AudioStreamTrack
*
AsAudioStreamTrack
(
)
{
return
nullptr
;
}
virtual
VideoStreamTrack
*
AsVideoStreamTrack
(
)
{
return
nullptr
;
}
virtual
const
AudioStreamTrack
*
AsAudioStreamTrack
(
)
const
{
return
nullptr
;
}
virtual
const
VideoStreamTrack
*
AsVideoStreamTrack
(
)
const
{
return
nullptr
;
}
virtual
void
GetKind
(
nsAString
&
aKind
)
=
0
;
void
GetId
(
nsAString
&
aID
)
const
;
virtual
void
GetLabel
(
nsAString
&
aLabel
CallerType
)
{
GetSource
(
)
.
GetLabel
(
aLabel
)
;
}
bool
Enabled
(
)
const
{
return
mEnabled
;
}
void
SetEnabled
(
bool
aEnabled
)
;
bool
Muted
(
)
{
return
mMuted
;
}
void
Stop
(
)
;
void
GetConstraints
(
dom
:
:
MediaTrackConstraints
&
aResult
)
;
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aResult
CallerType
aCallerType
)
;
already_AddRefed
<
Promise
>
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
MediaStreamTrack
>
Clone
(
)
;
MediaStreamTrackState
ReadyState
(
)
{
return
mReadyState
;
}
IMPL_EVENT_HANDLER
(
mute
)
IMPL_EVENT_HANDLER
(
unmute
)
IMPL_EVENT_HANDLER
(
ended
)
bool
Ended
(
)
const
{
return
mReadyState
=
=
MediaStreamTrackState
:
:
Ended
;
}
nsIPrincipal
*
GetPrincipal
(
)
const
{
return
mPrincipal
;
}
const
PeerIdentity
*
GetPeerIdentity
(
)
const
{
return
GetSource
(
)
.
GetPeerIdentity
(
)
;
}
ProcessedMediaTrack
*
GetTrack
(
)
const
;
MediaTrackGraph
*
Graph
(
)
const
;
MediaTrackGraphImpl
*
GraphImpl
(
)
const
;
MediaStreamTrackSource
&
GetSource
(
)
const
{
MOZ_RELEASE_ASSERT
(
mSource
"
The
track
source
is
only
removed
on
destruction
"
)
;
return
*
mSource
;
}
void
AssignId
(
const
nsAString
&
aID
)
{
mID
=
aID
;
}
bool
AddPrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
;
bool
RemovePrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
;
void
AddConsumer
(
MediaStreamTrackConsumer
*
aConsumer
)
;
void
RemoveConsumer
(
MediaStreamTrackConsumer
*
aConsumer
)
;
virtual
void
AddListener
(
MediaTrackListener
*
aListener
)
;
void
RemoveListener
(
MediaTrackListener
*
aListener
)
;
virtual
void
AddDirectListener
(
DirectMediaTrackListener
*
aListener
)
;
void
RemoveDirectListener
(
DirectMediaTrackListener
*
aListener
)
;
already_AddRefed
<
MediaInputPort
>
ForwardTrackContentsTo
(
ProcessedMediaTrack
*
aTrack
)
;
protected
:
virtual
~
MediaStreamTrack
(
)
;
void
SetReadyState
(
MediaStreamTrackState
aState
)
;
void
OverrideEnded
(
)
;
void
NotifyPrincipalHandleChanged
(
const
PrincipalHandle
&
aNewPrincipalHandle
)
;
void
NotifyEnded
(
)
;
void
NotifyEnabledChanged
(
)
;
void
PrincipalChanged
(
)
;
void
MutedChanged
(
bool
aNewState
)
;
void
SetMuted
(
bool
aMuted
)
{
mMuted
=
aMuted
;
}
virtual
void
Destroy
(
)
;
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
virtual
already_AddRefed
<
MediaStreamTrack
>
CloneInternal
(
)
=
0
;
nsTArray
<
PrincipalChangeObserver
<
MediaStreamTrack
>
*
>
mPrincipalChangeObservers
;
nsTArray
<
WeakPtr
<
MediaStreamTrackConsumer
>
>
mConsumers
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
const
RefPtr
<
mozilla
:
:
MediaTrack
>
mInputTrack
;
RefPtr
<
ProcessedMediaTrack
>
mTrack
;
RefPtr
<
MediaInputPort
>
mPort
;
RefPtr
<
MediaStreamTrackSource
>
mSource
;
const
UniquePtr
<
TrackSink
>
mSink
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mPendingPrincipal
;
RefPtr
<
MTGListener
>
mMTGListener
;
nsTArray
<
RefPtr
<
MediaTrackListener
>
>
mTrackListeners
;
nsTArray
<
RefPtr
<
DirectMediaTrackListener
>
>
mDirectTrackListeners
;
nsString
mID
;
MediaStreamTrackState
mReadyState
;
bool
mEnabled
;
bool
mMuted
;
dom
:
:
MediaTrackConstraints
mConstraints
;
}
;
}
}
#
endif
