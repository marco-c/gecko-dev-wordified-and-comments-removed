#
ifndef
MEDIASTREAMTRACK_H_
#
define
MEDIASTREAMTRACK_H_
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsID
.
h
"
#
include
"
StreamBuffer
.
h
"
#
include
"
MediaTrackConstraints
.
h
"
namespace
mozilla
{
class
DOMMediaStream
;
namespace
dom
{
class
AudioStreamTrack
;
class
VideoStreamTrack
;
class
MediaStreamTrack
:
public
DOMEventTargetHelper
{
public
:
MediaStreamTrack
(
DOMMediaStream
*
aStream
TrackID
aTrackID
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
DOMMediaStream
*
GetParentObject
(
)
const
{
return
mOwningStream
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
=
0
;
DOMMediaStream
*
GetStream
(
)
const
{
return
mOwningStream
;
}
TrackID
GetTrackID
(
)
const
{
return
mTrackID
;
}
virtual
AudioStreamTrack
*
AsAudioStreamTrack
(
)
{
return
nullptr
;
}
virtual
VideoStreamTrack
*
AsVideoStreamTrack
(
)
{
return
nullptr
;
}
virtual
void
GetKind
(
nsAString
&
aKind
)
=
0
;
void
GetId
(
nsAString
&
aID
)
const
;
void
GetLabel
(
nsAString
&
aLabel
)
{
aLabel
.
Truncate
(
)
;
}
bool
Enabled
(
)
{
return
mEnabled
;
}
void
SetEnabled
(
bool
aEnabled
)
;
void
Stop
(
)
;
already_AddRefed
<
Promise
>
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
ErrorResult
&
aRv
)
;
bool
Ended
(
)
const
{
return
mEnded
;
}
void
NotifyEnded
(
)
{
mEnded
=
true
;
}
void
AssignId
(
const
nsAString
&
aID
)
{
mID
=
aID
;
}
protected
:
virtual
~
MediaStreamTrack
(
)
;
nsRefPtr
<
DOMMediaStream
>
mOwningStream
;
TrackID
mTrackID
;
nsString
mID
;
bool
mEnded
;
bool
mEnabled
;
}
;
}
}
#
endif
