#
ifndef
MEDIASTREAMTRACK_H_
#
define
MEDIASTREAMTRACK_H_
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsID
.
h
"
#
include
"
StreamBuffer
.
h
"
#
include
"
MediaTrackConstraints
.
h
"
#
include
"
PrincipalChangeObserver
.
h
"
namespace
mozilla
{
class
DOMMediaStream
;
class
MediaEnginePhotoCallback
;
class
MediaStream
;
class
MediaStreamGraph
;
class
MediaStreamTrackListener
;
class
PeerConnectionImpl
;
class
ProcessedMediaStream
;
class
RemoteSourceStreamInfo
;
namespace
dom
{
class
AudioStreamTrack
;
class
VideoStreamTrack
;
class
MediaStreamTrackSource
:
public
nsISupports
{
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
MediaStreamTrackSource
)
public
:
class
Sink
{
public
:
virtual
void
PrincipalChanged
(
)
=
0
;
}
;
MediaStreamTrackSource
(
nsIPrincipal
*
aPrincipal
const
bool
aIsRemote
)
:
mPrincipal
(
aPrincipal
)
mIsRemote
(
aIsRemote
)
mStopped
(
false
)
{
MOZ_COUNT_CTOR
(
MediaStreamTrackSource
)
;
}
virtual
MediaSourceEnum
GetMediaSource
(
)
const
=
0
;
nsIPrincipal
*
GetPrincipal
(
)
const
{
return
mPrincipal
;
}
virtual
bool
IsRemote
(
)
const
{
return
mIsRemote
;
}
virtual
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
)
const
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
virtual
already_AddRefed
<
Promise
>
ApplyConstraints
(
nsPIDOMWindowInner
*
aWindow
const
dom
:
:
MediaTrackConstraints
&
aConstraints
ErrorResult
&
aRv
)
;
virtual
void
Stop
(
)
=
0
;
void
RegisterSink
(
Sink
*
aSink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStopped
)
{
return
;
}
mSinks
.
AppendElement
(
aSink
)
;
}
void
UnregisterSink
(
Sink
*
aSink
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mSinks
.
RemoveElement
(
aSink
)
&
&
mSinks
.
IsEmpty
(
)
&
&
!
IsRemote
(
)
)
{
Stop
(
)
;
mStopped
=
true
;
}
}
protected
:
virtual
~
MediaStreamTrackSource
(
)
{
MOZ_COUNT_DTOR
(
MediaStreamTrackSource
)
;
}
void
PrincipalChanged
(
)
{
for
(
Sink
*
sink
:
mSinks
)
{
sink
-
>
PrincipalChanged
(
)
;
}
}
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsTArray
<
Sink
*
>
mSinks
;
const
bool
mIsRemote
;
bool
mStopped
;
}
;
class
BasicUnstoppableTrackSource
:
public
MediaStreamTrackSource
{
public
:
explicit
BasicUnstoppableTrackSource
(
nsIPrincipal
*
aPrincipal
const
MediaSourceEnum
aMediaSource
=
MediaSourceEnum
:
:
Other
)
:
MediaStreamTrackSource
(
aPrincipal
true
)
mMediaSource
(
aMediaSource
)
{
}
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
mMediaSource
;
}
void
Stop
(
)
override
{
}
protected
:
~
BasicUnstoppableTrackSource
(
)
{
}
const
MediaSourceEnum
mMediaSource
;
}
;
class
MediaStreamTrack
:
public
DOMEventTargetHelper
public
MediaStreamTrackSource
:
:
Sink
{
friend
class
mozilla
:
:
DOMMediaStream
;
friend
class
mozilla
:
:
PeerConnectionImpl
;
friend
class
mozilla
:
:
RemoteSourceStreamInfo
;
public
:
MediaStreamTrack
(
DOMMediaStream
*
aStream
TrackID
aTrackID
TrackID
aInputTrackID
const
nsString
&
aLabel
MediaStreamTrackSource
*
aSource
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
=
0
;
virtual
AudioStreamTrack
*
AsAudioStreamTrack
(
)
{
return
nullptr
;
}
virtual
VideoStreamTrack
*
AsVideoStreamTrack
(
)
{
return
nullptr
;
}
virtual
const
AudioStreamTrack
*
AsAudioStreamTrack
(
)
const
{
return
nullptr
;
}
virtual
const
VideoStreamTrack
*
AsVideoStreamTrack
(
)
const
{
return
nullptr
;
}
virtual
void
GetKind
(
nsAString
&
aKind
)
=
0
;
void
GetId
(
nsAString
&
aID
)
const
;
void
GetLabel
(
nsAString
&
aLabel
)
{
aLabel
.
Assign
(
mLabel
)
;
}
bool
Enabled
(
)
{
return
mEnabled
;
}
void
SetEnabled
(
bool
aEnabled
)
;
void
Stop
(
)
;
already_AddRefed
<
Promise
>
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
ErrorResult
&
aRv
)
;
bool
Ended
(
)
const
{
return
mEnded
;
}
void
NotifyEnded
(
)
{
mEnded
=
true
;
}
nsIPrincipal
*
GetPrincipal
(
)
const
{
return
GetSource
(
)
.
GetPrincipal
(
)
;
}
MediaStreamGraph
*
Graph
(
)
;
MediaStreamTrackSource
&
GetSource
(
)
const
{
MOZ_RELEASE_ASSERT
(
mSource
"
The
track
source
is
only
removed
on
destruction
"
)
;
return
*
mSource
;
}
void
AssignId
(
const
nsAString
&
aID
)
{
mID
=
aID
;
}
void
PrincipalChanged
(
)
override
;
bool
AddPrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
;
bool
RemovePrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
;
void
AddListener
(
MediaStreamTrackListener
*
aListener
)
;
void
RemoveListener
(
MediaStreamTrackListener
*
aListener
)
;
protected
:
virtual
~
MediaStreamTrack
(
)
;
MediaStream
*
GetInputStream
(
)
;
ProcessedMediaStream
*
GetOwnedStream
(
)
;
DOMMediaStream
*
GetInputDOMStream
(
)
;
nsTArray
<
PrincipalChangeObserver
<
MediaStreamTrack
>
*
>
mPrincipalChangeObservers
;
RefPtr
<
DOMMediaStream
>
mOwningStream
;
TrackID
mTrackID
;
TrackID
mInputTrackID
;
RefPtr
<
MediaStreamTrackSource
>
mSource
;
RefPtr
<
MediaStreamTrack
>
mOriginalTrack
;
nsString
mID
;
nsString
mLabel
;
bool
mEnded
;
bool
mEnabled
;
const
bool
mRemote
;
bool
mStopped
;
}
;
}
}
#
endif
