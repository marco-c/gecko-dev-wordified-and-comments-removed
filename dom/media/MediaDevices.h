#
ifndef
mozilla_dom_MediaDevices_h
#
define
mozilla_dom_MediaDevices_h
#
include
"
MediaEventSource
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsITimer
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
struct
MediaStreamConstraints
;
struct
DisplayMediaStreamConstraints
;
struct
MediaTrackSupportedConstraints
;
#
define
MOZILLA_DOM_MEDIADEVICES_IMPLEMENTATION_IID
\
{
\
0x2f784d8a
0x7485
0x4280
{
\
0x9a
0x36
0x74
0xa4
0xd6
0x71
0xa6
0xc8
\
}
\
}
class
MediaDevices
final
:
public
DOMEventTargetHelper
{
public
:
explicit
MediaDevices
(
nsPIDOMWindowInner
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_DOM_MEDIADEVICES_IMPLEMENTATION_IID
)
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetSupportedConstraints
(
MediaTrackSupportedConstraints
&
aResult
)
{
}
;
already_AddRefed
<
Promise
>
GetUserMedia
(
const
MediaStreamConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
EnumerateDevices
(
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetDisplayMedia
(
const
DisplayMediaStreamConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
;
void
OnDeviceChange
(
)
;
void
SetupDeviceChangeListener
(
)
;
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
GetOndevicechange
(
)
;
void
SetOndevicechange
(
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
aCallback
)
;
void
EventListenerAdded
(
nsAtom
*
aType
)
override
;
using
DOMEventTargetHelper
:
:
EventListenerAdded
;
private
:
class
GumResolver
;
class
EnumDevResolver
;
class
GumRejecter
;
virtual
~
MediaDevices
(
)
;
nsCOMPtr
<
nsITimer
>
mFuzzTimer
;
MediaEventListener
mDeviceChangeListener
;
bool
mIsDeviceChangeListenerSetUp
=
false
;
void
RecordAccessTelemetry
(
const
UseCounter
counter
)
const
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
MediaDevices
MOZILLA_DOM_MEDIADEVICES_IMPLEMENTATION_IID
)
}
}
#
endif
