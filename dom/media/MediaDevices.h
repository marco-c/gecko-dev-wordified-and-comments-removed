#
ifndef
mozilla_dom_MediaDevices_h
#
define
mozilla_dom_MediaDevices_h
#
include
"
MediaEventSource
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTHashSet
.
h
"
class
AudioDeviceInfo
;
namespace
mozilla
{
template
<
typename
ResolveValueT
typename
RejectValueT
bool
IsExclusive
>
class
MozPromise
;
namespace
dom
{
class
Promise
;
struct
MediaStreamConstraints
;
struct
DisplayMediaStreamConstraints
;
struct
MediaTrackSupportedConstraints
;
struct
AudioOutputOptions
;
class
MediaDevices
final
:
public
DOMEventTargetHelper
{
public
:
using
SinkInfoPromise
=
MozPromise
<
RefPtr
<
AudioDeviceInfo
>
nsresult
true
>
;
explicit
MediaDevices
(
nsPIDOMWindowInner
*
aWindow
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaDevices
DOMEventTargetHelper
)
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetSupportedConstraints
(
MediaTrackSupportedConstraints
&
aResult
)
{
}
;
already_AddRefed
<
Promise
>
GetUserMedia
(
const
MediaStreamConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
EnumerateDevices
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetDisplayMedia
(
const
DisplayMediaStreamConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
SelectAudioOutput
(
const
AudioOutputOptions
&
aOptions
CallerType
aCallerType
ErrorResult
&
aRv
)
;
RefPtr
<
SinkInfoPromise
>
GetSinkDevice
(
const
nsString
&
aDeviceId
)
;
void
OnDeviceChange
(
)
;
void
SetupDeviceChangeListener
(
)
;
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
GetOndevicechange
(
)
;
void
SetOndevicechange
(
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
aCallback
)
;
void
EventListenerAdded
(
nsAtom
*
aType
)
override
;
using
DOMEventTargetHelper
:
:
EventListenerAdded
;
void
BackgroundStateChanged
(
)
{
MaybeResumeDeviceExposure
(
)
;
}
void
WindowResumed
(
)
{
MaybeResumeDeviceExposure
(
)
;
}
void
BrowserWindowBecameActive
(
)
{
MaybeResumeDeviceExposure
(
)
;
}
private
:
class
GumResolver
;
class
EnumDevResolver
;
class
GumRejecter
;
virtual
~
MediaDevices
(
)
;
void
MaybeResumeDeviceExposure
(
)
;
void
ResumeEnumerateDevices
(
RefPtr
<
Promise
>
aPromise
)
;
nsTHashSet
<
nsString
>
mExplicitlyGrantedAudioOutputIds
;
nsTArray
<
RefPtr
<
Promise
>
>
mPendingEnumerateDevicesPromises
;
MediaEventListener
mDeviceChangeListener
;
bool
mIsDeviceChangeListenerSetUp
=
false
;
bool
mCanExposeMicrophoneInfo
=
false
;
void
RecordAccessTelemetry
(
const
UseCounter
counter
)
const
;
}
;
}
}
#
endif
