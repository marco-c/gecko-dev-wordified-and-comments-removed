#
ifndef
DOM_MEDIA_AUDIBILITYMONITOR_H_
#
define
DOM_MEDIA_AUDIBILITYMONITOR_H_
#
include
<
cstdint
>
#
include
"
AudioSampleFormat
.
h
"
#
include
"
WebAudioUtils
.
h
"
namespace
mozilla
{
class
AudibilityMonitor
{
public
:
const
float
AUDIBILITY_THREHSOLD
=
-
72
.
;
AudibilityMonitor
(
uint32_t
aSamplerate
float
aSilenceDurationSeconds
)
:
mSamplerate
(
aSamplerate
)
mSilenceDurationSeconds
(
aSilenceDurationSeconds
)
mSilentFramesInARow
(
0
)
{
}
void
ProcessAudioData
(
const
AudioData
*
aData
)
{
ProcessInterleaved
(
aData
-
>
Data
(
)
aData
-
>
mChannels
)
;
}
void
ProcessInterleaved
(
const
Span
<
AudioDataValue
>
&
aInterleaved
size_t
aChannels
)
{
MOZ_ASSERT
(
aInterleaved
.
Length
(
)
%
aChannels
=
=
0
)
;
uint32_t
frameCount
=
aInterleaved
.
Length
(
)
/
aChannels
;
AudioDataValue
*
samples
=
aInterleaved
.
Elements
(
)
;
uint32_t
readIndex
=
0
;
for
(
uint32_t
i
=
0
;
i
<
frameCount
;
i
+
+
)
{
bool
atLeastOneNonSilent
=
false
;
for
(
uint32_t
j
=
0
;
j
<
aChannels
;
j
+
+
)
{
float
dbfs
=
dom
:
:
WebAudioUtils
:
:
ConvertLinearToDecibels
(
abs
(
AudioSampleToFloat
(
samples
[
readIndex
+
+
]
)
)
-
100
.
f
)
;
if
(
dbfs
>
AUDIBILITY_THREHSOLD
)
{
atLeastOneNonSilent
=
true
;
}
}
if
(
atLeastOneNonSilent
)
{
mSilentFramesInARow
=
0
;
}
else
{
mSilentFramesInARow
+
+
;
}
}
}
bool
RecentlyAudible
(
)
{
return
(
static_cast
<
float
>
(
mSilentFramesInARow
)
/
mSamplerate
)
<
mSilenceDurationSeconds
;
}
private
:
const
uint32_t
mSamplerate
;
const
float
mSilenceDurationSeconds
;
uint64_t
mSilentFramesInARow
;
}
;
}
;
#
endif
