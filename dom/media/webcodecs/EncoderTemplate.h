#
ifndef
mozilla_dom_EncoderTemplate_h
#
define
mozilla_dom_EncoderTemplate_h
#
include
<
queue
>
#
include
"
EncoderAgent
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
WebCodecsUtils
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
VideoEncoderBinding
.
h
"
#
include
"
mozilla
/
dom
/
AudioEncoderBinding
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
:
:
dom
{
class
WebCodecsErrorCallback
;
class
Promise
;
enum
class
CodecState
:
uint8_t
;
using
Id
=
size_t
;
template
<
typename
EncoderType
>
class
EncoderTemplate
:
public
DOMEventTargetHelper
{
using
Self
=
EncoderTemplate
<
EncoderType
>
;
using
ConfigType
=
typename
EncoderType
:
:
ConfigType
;
using
ConfigTypeInternal
=
typename
EncoderType
:
:
ConfigTypeInternal
;
using
OutputConfigType
=
typename
EncoderType
:
:
OutputConfigType
;
using
InputType
=
typename
EncoderType
:
:
InputType
;
using
InputTypeInternal
=
typename
EncoderType
:
:
InputTypeInternal
;
using
OutputType
=
typename
EncoderType
:
:
OutputType
;
using
OutputCallbackType
=
typename
EncoderType
:
:
OutputCallbackType
;
protected
:
class
ConfigureMessage
;
class
EncodeMessage
;
class
FlushMessage
;
class
ControlMessage
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ControlMessage
)
explicit
ControlMessage
(
Id
aConfigureId
)
;
virtual
void
Cancel
(
)
=
0
;
virtual
bool
IsProcessing
(
)
=
0
;
virtual
nsCString
ToString
(
)
const
=
0
;
virtual
RefPtr
<
ConfigureMessage
>
AsConfigureMessage
(
)
{
return
nullptr
;
}
virtual
RefPtr
<
EncodeMessage
>
AsEncodeMessage
(
)
{
return
nullptr
;
}
virtual
RefPtr
<
FlushMessage
>
AsFlushMessage
(
)
{
return
nullptr
;
}
const
WebCodecsId
mConfigureId
;
const
WebCodecsId
mMessageId
;
protected
:
virtual
~
ControlMessage
(
)
=
default
;
}
;
class
ConfigureMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
EncoderAgent
:
:
ConfigurePromise
>
{
public
:
ConfigureMessage
(
Id
aConfigureId
const
RefPtr
<
ConfigTypeInternal
>
&
aConfig
)
;
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
RefPtr
<
ConfigureMessage
>
AsConfigureMessage
(
)
override
{
return
this
;
}
RefPtr
<
ConfigTypeInternal
>
Config
(
)
{
return
mConfig
;
}
nsCString
ToString
(
)
const
override
{
nsCString
rv
;
rv
.
AppendPrintf
(
"
ConfigureMessage
(
#
%
zu
)
:
%
s
"
this
-
>
mMessageId
mConfig
?
NS_ConvertUTF16toUTF8
(
mConfig
-
>
ToString
(
)
.
get
(
)
)
.
get
(
)
:
"
null
cfg
"
)
;
return
rv
;
}
private
:
const
RefPtr
<
ConfigTypeInternal
>
mConfig
;
}
;
class
EncodeMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
EncoderAgent
:
:
EncodePromise
>
{
public
:
EncodeMessage
(
WebCodecsId
aConfigureId
RefPtr
<
InputTypeInternal
>
&
&
aData
Maybe
<
VideoEncoderEncodeOptions
>
&
&
aOptions
=
Nothing
(
)
)
;
nsCString
ToString
(
)
const
override
{
nsCString
rv
;
bool
isKeyFrame
=
mOptions
.
isSome
(
)
&
&
mOptions
.
ref
(
)
.
mKeyFrame
;
rv
.
AppendPrintf
(
"
EncodeMessage
(
#
%
zu
#
%
zu
)
:
%
s
(
%
s
)
"
this
-
>
mConfigureId
this
-
>
mMessageId
mData
-
>
ToString
(
)
.
get
(
)
isKeyFrame
?
"
kf
"
:
"
"
)
;
return
rv
;
}
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
RefPtr
<
EncodeMessage
>
AsEncodeMessage
(
)
override
{
return
this
;
}
RefPtr
<
InputTypeInternal
>
mData
;
Maybe
<
VideoEncoderEncodeOptions
>
mOptions
;
}
;
class
FlushMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
EncoderAgent
:
:
EncodePromise
>
{
public
:
FlushMessage
(
WebCodecsId
aConfigureId
Promise
*
aPromise
)
;
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
RefPtr
<
FlushMessage
>
AsFlushMessage
(
)
override
{
return
this
;
}
already_AddRefed
<
Promise
>
TakePromise
(
)
{
return
mPromise
.
forget
(
)
;
}
void
RejectPromiseIfAny
(
const
nsresult
&
aReason
)
;
nsCString
ToString
(
)
const
override
{
nsCString
rv
;
rv
.
AppendPrintf
(
"
FlushMessage
(
#
%
zu
#
%
zu
)
"
this
-
>
mConfigureId
this
-
>
mMessageId
)
;
return
rv
;
}
private
:
RefPtr
<
Promise
>
mPromise
;
}
;
protected
:
EncoderTemplate
(
nsIGlobalObject
*
aGlobalObject
RefPtr
<
WebCodecsErrorCallback
>
&
&
aErrorCallback
RefPtr
<
OutputCallbackType
>
&
&
aOutputCallback
)
;
virtual
~
EncoderTemplate
(
)
=
default
;
public
:
IMPL_EVENT_HANDLER
(
dequeue
)
void
StartBlockingMessageQueue
(
)
;
void
StopBlockingMessageQueue
(
)
;
CodecState
State
(
)
const
{
return
mState
;
}
;
uint32_t
EncodeQueueSize
(
)
const
{
return
mEncodeQueueSize
;
}
;
void
Configure
(
const
ConfigType
&
aConfig
ErrorResult
&
aRv
)
;
void
EncodeAudioData
(
InputType
&
aInput
ErrorResult
&
aRv
)
;
void
EncodeVideoFrame
(
InputType
&
aInput
const
VideoEncoderEncodeOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Flush
(
ErrorResult
&
aRv
)
;
void
Reset
(
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Close
(
ErrorResult
&
aRv
)
;
protected
:
virtual
RefPtr
<
OutputType
>
EncodedDataToOutputType
(
nsIGlobalObject
*
aGlobalObject
RefPtr
<
MediaRawData
>
&
aData
)
=
0
;
virtual
OutputConfigType
EncoderConfigToDecoderConfig
(
nsIGlobalObject
*
aGlobalObject
const
RefPtr
<
MediaRawData
>
&
aData
const
ConfigTypeInternal
&
aOutputConfig
)
const
=
0
;
protected
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
EncoderTemplate
)
;
}
Result
<
Ok
nsresult
>
ResetInternal
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
Result
<
Ok
nsresult
>
CloseInternal
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
ReportError
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
OutputEncodedVideoData
(
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
OutputEncodedAudioData
(
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
&
aData
)
;
class
ErrorRunnable
;
void
ScheduleReportError
(
const
nsresult
&
aResult
)
;
class
OutputRunnable
;
void
ScheduleOutputEncodedData
(
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
&
aData
const
nsACString
&
aLabel
)
;
void
ScheduleClose
(
const
nsresult
&
aResult
)
;
void
ScheduleDequeueEvent
(
)
;
nsresult
FireEvent
(
nsAtom
*
aTypeWithOn
const
nsAString
&
aEventType
)
;
void
SchedulePromiseResolveOrReject
(
already_AddRefed
<
Promise
>
aPromise
const
nsresult
&
aResult
)
;
void
ProcessControlMessageQueue
(
)
;
void
CancelPendingControlMessages
(
const
nsresult
&
aResult
)
;
MessageProcessedResult
ProcessConfigureMessage
(
RefPtr
<
ConfigureMessage
>
aMessage
)
;
MessageProcessedResult
ProcessEncodeMessage
(
RefPtr
<
EncodeMessage
>
aMessage
)
;
MessageProcessedResult
ProcessFlushMessage
(
RefPtr
<
FlushMessage
>
aMessage
)
;
void
Configure
(
RefPtr
<
ConfigureMessage
>
aMessage
)
;
void
Reconfigure
(
RefPtr
<
ConfigureMessage
>
aMessage
)
;
bool
CreateEncoderAgent
(
WebCodecsId
aId
RefPtr
<
ConfigTypeInternal
>
aConfig
)
;
void
DestroyEncoderAgentIfAny
(
)
;
RefPtr
<
WebCodecsErrorCallback
>
mErrorCallback
;
RefPtr
<
OutputCallbackType
>
mOutputCallback
;
CodecState
mState
;
bool
mMessageQueueBlocked
;
std
:
:
queue
<
RefPtr
<
ControlMessage
>
>
mControlMessageQueue
;
RefPtr
<
ControlMessage
>
mProcessingMessage
;
uint32_t
mEncodeQueueSize
;
bool
mDequeueEventScheduled
;
uint32_t
mLatestConfigureId
;
size_t
mEncodeCounter
;
size_t
mFlushCounter
;
RefPtr
<
EncoderAgent
>
mAgent
;
RefPtr
<
ConfigTypeInternal
>
mActiveConfig
;
bool
mOutputNewDecoderConfig
=
false
;
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mShutdownBlocker
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
}
;
}
#
endif
