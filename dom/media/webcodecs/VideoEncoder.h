#
ifndef
mozilla_dom_VideoEncoder_h
#
define
mozilla_dom_VideoEncoder_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
EncoderTemplate
.
h
"
#
include
"
mozilla
/
dom
/
EncoderTypes
.
h
"
#
include
"
mozilla
/
dom
/
VideoFrame
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
EncodedVideoChunk
;
class
EncodedVideoChunkData
;
class
EventHandlerNonNull
;
class
GlobalObject
;
class
Promise
;
class
VideoFrameOutputCallback
;
class
WebCodecsErrorCallback
;
struct
VideoEncoderConfig
;
struct
VideoEncoderInit
;
}
}
namespace
mozilla
:
:
dom
{
class
VideoEncoder
final
:
public
EncoderTemplate
<
VideoEncoderTraits
>
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
VideoEncoder
DOMEventTargetHelper
)
public
:
VideoEncoder
(
nsIGlobalObject
*
aParent
RefPtr
<
WebCodecsErrorCallback
>
&
&
aErrorCallback
RefPtr
<
EncodedVideoChunkOutputCallback
>
&
&
aOutputCallback
)
;
protected
:
~
VideoEncoder
(
)
;
public
:
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
VideoEncoder
>
Constructor
(
const
GlobalObject
&
aGlobal
const
VideoEncoderInit
&
aInit
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
IsConfigSupported
(
const
GlobalObject
&
aGlobal
const
VideoEncoderConfig
&
aConfig
ErrorResult
&
aRv
)
;
protected
:
virtual
RefPtr
<
EncodedVideoChunk
>
EncodedDataToOutputType
(
nsIGlobalObject
*
aGlobal
const
RefPtr
<
MediaRawData
>
&
aData
)
override
;
virtual
VideoDecoderConfigInternal
EncoderConfigToDecoderConfig
(
nsIGlobalObject
*
aGlobal
const
RefPtr
<
MediaRawData
>
&
aRawData
const
VideoEncoderConfigInternal
&
mOutputConfig
)
const
override
;
}
;
}
#
endif
