#
ifndef
mozilla_dom_VideoDecoder_h
#
define
mozilla_dom_VideoDecoder_h
#
include
<
queue
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
DecoderAgent
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
VideoColorSpaceBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
VideoDecoderBinding
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
MediaData
;
class
TrackInfo
;
class
VideoInfo
;
namespace
dom
{
class
EncodedVideoChunk
;
class
EventHandlerNonNull
;
class
GlobalObject
;
class
Promise
;
class
ThreadSafeWorkerRef
;
class
VideoFrameOutputCallback
;
class
WebCodecsErrorCallback
;
enum
class
CodecState
:
uint8_t
;
struct
VideoDecoderConfig
;
struct
VideoDecoderInit
;
}
namespace
media
{
class
ShutdownBlockingTicket
;
}
}
namespace
mozilla
:
:
dom
{
struct
VideoColorSpaceInternal
{
explicit
VideoColorSpaceInternal
(
const
VideoColorSpaceInit
&
aColorSpaceInit
)
;
VideoColorSpaceInternal
(
)
=
default
;
VideoColorSpaceInit
ToColorSpaceInit
(
)
const
;
Maybe
<
bool
>
mFullRange
;
Maybe
<
VideoMatrixCoefficients
>
mMatrix
;
Maybe
<
VideoColorPrimaries
>
mPrimaries
;
Maybe
<
VideoTransferCharacteristics
>
mTransfer
;
}
;
struct
VideoDecoderConfigInternal
{
explicit
VideoDecoderConfigInternal
(
const
VideoDecoderConfig
&
aConfig
)
;
nsString
mCodec
;
Maybe
<
uint32_t
>
mCodedHeight
;
Maybe
<
uint32_t
>
mCodedWidth
;
Maybe
<
VideoColorSpaceInternal
>
mColorSpace
;
Maybe
<
RefPtr
<
MediaByteBuffer
>
>
mDescription
;
Maybe
<
uint32_t
>
mDisplayAspectHeight
;
Maybe
<
uint32_t
>
mDisplayAspectWidth
;
HardwareAcceleration
mHardwareAcceleration
;
Maybe
<
bool
>
mOptimizeForLatency
;
}
;
class
ConfigureMessage
;
class
DecodeMessage
;
class
FlushMessage
;
class
ControlMessage
{
public
:
explicit
ControlMessage
(
const
nsACString
&
aTitle
)
;
virtual
~
ControlMessage
(
)
=
default
;
virtual
void
Cancel
(
)
=
0
;
virtual
bool
IsProcessing
(
)
=
0
;
virtual
const
nsCString
&
ToString
(
)
const
{
return
mTitle
;
}
virtual
ConfigureMessage
*
AsConfigureMessage
(
)
{
return
nullptr
;
}
virtual
DecodeMessage
*
AsDecodeMessage
(
)
{
return
nullptr
;
}
virtual
FlushMessage
*
AsFlushMessage
(
)
{
return
nullptr
;
}
const
nsCString
mTitle
;
}
;
class
VideoDecoder
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
VideoDecoder
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
dequeue
)
public
:
VideoDecoder
(
nsIGlobalObject
*
aParent
RefPtr
<
WebCodecsErrorCallback
>
&
&
aErrorCallback
RefPtr
<
VideoFrameOutputCallback
>
&
&
aOutputCallback
)
;
protected
:
~
VideoDecoder
(
)
;
public
:
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
VideoDecoder
>
Constructor
(
const
GlobalObject
&
aGlobal
const
VideoDecoderInit
&
aInit
ErrorResult
&
aRv
)
;
CodecState
State
(
)
const
;
uint32_t
DecodeQueueSize
(
)
const
;
void
Configure
(
const
VideoDecoderConfig
&
aConfig
ErrorResult
&
aRv
)
;
void
Decode
(
EncodedVideoChunk
&
aChunk
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Flush
(
ErrorResult
&
aRv
)
;
void
Reset
(
ErrorResult
&
aRv
)
;
void
Close
(
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
IsConfigSupported
(
const
GlobalObject
&
aGlobal
const
VideoDecoderConfig
&
aConfig
ErrorResult
&
aRv
)
;
private
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
VideoDecoder
)
;
}
Result
<
Ok
nsresult
>
Reset
(
const
nsresult
&
aResult
)
;
Result
<
Ok
nsresult
>
Close
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
ReportError
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
OutputVideoFrames
(
nsTArray
<
RefPtr
<
MediaData
>
>
&
&
aData
)
;
class
ErrorRunnable
;
void
ScheduleReportError
(
const
nsresult
&
aResult
)
;
class
OutputRunnable
;
void
ScheduleOutputVideoFrames
(
nsTArray
<
RefPtr
<
MediaData
>
>
&
&
aData
const
nsACString
&
aLabel
)
;
void
ScheduleClose
(
const
nsresult
&
aResult
)
;
void
ScheduleDequeueEvent
(
)
;
void
SchedulePromiseResolveOrReject
(
already_AddRefed
<
Promise
>
aPromise
const
nsresult
&
aResult
)
;
void
ProcessControlMessageQueue
(
)
;
void
CancelPendingControlMessages
(
const
nsresult
&
aResult
)
;
enum
class
MessageProcessedResult
{
NotProcessed
Processed
}
;
MessageProcessedResult
ProcessConfigureMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
MessageProcessedResult
ProcessDecodeMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
MessageProcessedResult
ProcessFlushMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
bool
CreateDecoderAgent
(
DecoderAgent
:
:
Id
aId
UniquePtr
<
VideoDecoderConfigInternal
>
&
&
aConfig
UniquePtr
<
TrackInfo
>
&
&
aInfo
)
;
void
DestroyDecoderAgentIfAny
(
)
;
RefPtr
<
WebCodecsErrorCallback
>
mErrorCallback
;
RefPtr
<
VideoFrameOutputCallback
>
mOutputCallback
;
CodecState
mState
;
bool
mKeyChunkRequired
;
bool
mMessageQueueBlocked
;
std
:
:
queue
<
UniquePtr
<
ControlMessage
>
>
mControlMessageQueue
;
UniquePtr
<
ControlMessage
>
mProcessingMessage
;
RefPtr
<
DecoderAgent
>
mAgent
;
UniquePtr
<
VideoDecoderConfigInternal
>
mActiveConfig
;
uint32_t
mDecodeQueueSize
;
bool
mDequeueEventScheduled
;
uint32_t
mLatestConfigureId
;
size_t
mDecodeCounter
;
size_t
mFlushCounter
;
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mShutdownBlocker
;
RefPtr
<
dom
:
:
ThreadSafeWorkerRef
>
mWorkerRef
;
}
;
}
#
endif
