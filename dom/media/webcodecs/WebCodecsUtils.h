#
ifndef
mozilla_webcodecs_Utils
#
define
mozilla_webcodecs_Utils
#
include
<
tuple
>
#
include
"
ErrorList
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
namespace
mozilla
{
namespace
gfx
{
enum
class
ColorRange
:
uint8_t
;
enum
class
ColorSpace2
:
uint8_t
;
enum
class
SurfaceFormat
:
int8_t
;
enum
class
TransferFunction
:
uint8_t
;
enum
class
YUVColorSpace
:
uint8_t
;
}
namespace
dom
{
nsTArray
<
nsCString
>
GuessContainers
(
const
nsAString
&
aCodec
)
;
template
<
class
T
>
Result
<
Span
<
uint8_t
>
nsresult
>
GetArrayBufferData
(
const
T
&
aBuffer
)
;
Result
<
Span
<
uint8_t
>
nsresult
>
GetSharedArrayBufferData
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
)
;
Result
<
Span
<
uint8_t
>
nsresult
>
GetSharedArrayBufferData
(
const
OwningMaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
)
;
Result
<
Ok
nsresult
>
CloneBuffer
(
JSContext
*
aCx
OwningMaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aDest
const
OwningMaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aSrc
)
;
enum
class
VideoColorPrimaries
:
uint8_t
;
enum
class
VideoMatrixCoefficients
:
uint8_t
;
enum
class
VideoTransferCharacteristics
:
uint8_t
;
gfx
:
:
ColorRange
ToColorRange
(
bool
aIsFullRange
)
;
gfx
:
:
YUVColorSpace
ToColorSpace
(
VideoMatrixCoefficients
aMatrix
)
;
gfx
:
:
TransferFunction
ToTransferFunction
(
VideoTransferCharacteristics
aTransfer
)
;
gfx
:
:
ColorSpace2
ToPrimaries
(
VideoColorPrimaries
aPrimaries
)
;
bool
ToFullRange
(
const
gfx
:
:
ColorRange
&
aColorRange
)
;
Maybe
<
VideoMatrixCoefficients
>
ToMatrixCoefficients
(
const
gfx
:
:
YUVColorSpace
&
aColorSpace
)
;
Maybe
<
VideoTransferCharacteristics
>
ToTransferCharacteristics
(
const
gfx
:
:
TransferFunction
&
aTransferFunction
)
;
Maybe
<
VideoColorPrimaries
>
ToPrimaries
(
const
gfx
:
:
ColorSpace2
&
aColorSpace
)
;
enum
class
ImageBitmapFormat
:
uint8_t
;
enum
class
VideoPixelFormat
:
uint8_t
;
Maybe
<
VideoPixelFormat
>
SurfaceFormatToVideoPixelFormat
(
gfx
:
:
SurfaceFormat
aFormat
)
;
Maybe
<
VideoPixelFormat
>
ImageBitmapFormatToVideoPixelFormat
(
ImageBitmapFormat
aFormat
)
;
}
}
#
endif
