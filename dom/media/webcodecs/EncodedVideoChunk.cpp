#
include
"
mozilla
/
dom
/
EncodedVideoChunk
.
h
"
#
include
"
mozilla
/
dom
/
EncodedVideoChunkBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0
(
EncodedVideoChunk
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
EncodedVideoChunk
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
EncodedVideoChunk
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EncodedVideoChunk
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
nsIGlobalObject
*
EncodedVideoChunk
:
:
GetParentObject
(
)
const
{
return
nullptr
;
}
JSObject
*
EncodedVideoChunk
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
EncodedVideoChunk_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
EncodedVideoChunk
>
EncodedVideoChunk
:
:
Constructor
(
const
GlobalObject
&
global
const
EncodedVideoChunkInit
&
init
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
nullptr
;
}
EncodedVideoChunkType
EncodedVideoChunk
:
:
Type
(
)
const
{
return
EncodedVideoChunkType
:
:
EndGuard_
;
}
int64_t
EncodedVideoChunk
:
:
Timestamp
(
)
const
{
return
0
;
}
Nullable
<
uint64_t
>
EncodedVideoChunk
:
:
GetDuration
(
)
const
{
return
nullptr
;
}
uint32_t
EncodedVideoChunk
:
:
ByteLength
(
)
const
{
return
0
;
}
void
EncodedVideoChunk
:
:
CopyTo
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
destination
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
}
}
