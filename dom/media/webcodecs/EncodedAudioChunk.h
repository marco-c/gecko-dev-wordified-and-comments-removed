#
ifndef
mozilla_dom_EncodedAudioChunk_h
#
define
mozilla_dom_EncodedAudioChunk_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
BufferSourceBindingFwd
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
MediaAlignedByteBuffer
;
class
MediaRawData
;
namespace
dom
{
class
StructuredCloneHolder
;
enum
class
EncodedAudioChunkType
:
uint8_t
;
struct
EncodedAudioChunkInit
;
}
}
namespace
mozilla
:
:
dom
{
class
EncodedAudioChunkData
{
public
:
EncodedAudioChunkData
(
already_AddRefed
<
MediaAlignedByteBuffer
>
aBuffer
const
EncodedAudioChunkType
&
aType
int64_t
aTimestamp
Maybe
<
uint64_t
>
&
&
aDuration
)
;
EncodedAudioChunkData
(
const
EncodedAudioChunkData
&
aData
)
=
default
;
~
EncodedAudioChunkData
(
)
=
default
;
UniquePtr
<
EncodedAudioChunkData
>
Clone
(
)
const
;
already_AddRefed
<
MediaRawData
>
TakeData
(
)
;
nsCString
ToString
(
)
const
;
protected
:
RefPtr
<
MediaAlignedByteBuffer
>
mBuffer
;
EncodedAudioChunkType
mType
;
int64_t
mTimestamp
;
Maybe
<
uint64_t
>
mDuration
;
}
;
class
EncodedAudioChunk
final
:
public
EncodedAudioChunkData
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
EncodedAudioChunk
)
public
:
EncodedAudioChunk
(
nsIGlobalObject
*
aParent
already_AddRefed
<
MediaAlignedByteBuffer
>
aBuffer
const
EncodedAudioChunkType
&
aType
int64_t
aTimestamp
Maybe
<
uint64_t
>
&
&
aDuration
)
;
EncodedAudioChunk
(
nsIGlobalObject
*
aParent
const
EncodedAudioChunkData
&
aData
)
;
protected
:
~
EncodedAudioChunk
(
)
=
default
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
EncodedAudioChunk
>
Constructor
(
const
GlobalObject
&
aGlobal
const
EncodedAudioChunkInit
&
aInit
ErrorResult
&
aRv
)
;
EncodedAudioChunkType
Type
(
)
const
;
int64_t
Timestamp
(
)
const
;
Nullable
<
uint64_t
>
GetDuration
(
)
const
;
uint32_t
ByteLength
(
)
const
;
void
CopyTo
(
const
AllowSharedBufferSource
&
aDestination
ErrorResult
&
aRv
)
;
static
JSObject
*
ReadStructuredClone
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
JSStructuredCloneReader
*
aReader
const
EncodedAudioChunkData
&
aData
)
;
bool
WriteStructuredClone
(
JSStructuredCloneWriter
*
aWriter
StructuredCloneHolder
*
aHolder
)
const
;
private
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
EncodedAudioChunk
)
;
}
nsCOMPtr
<
nsIGlobalObject
>
mParent
;
}
;
}
#
endif
