#
include
"
mozilla
/
dom
/
ImageTrackList
.
h
"
#
include
"
MediaResult
.
h
"
#
include
"
mozilla
/
dom
/
ImageDecoder
.
h
"
#
include
"
mozilla
/
dom
/
ImageTrack
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
image
/
ImageUtils
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ImageTrackList
mParent
mDecoder
mReadyPromise
mTracks
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ImageTrackList
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ImageTrackList
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ImageTrackList
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
ImageTrackList
:
:
ImageTrackList
(
nsIGlobalObject
*
aParent
ImageDecoder
*
aDecoder
)
:
mParent
(
aParent
)
mDecoder
(
aDecoder
)
{
}
ImageTrackList
:
:
~
ImageTrackList
(
)
=
default
;
JSObject
*
ImageTrackList
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
AssertIsOnOwningThread
(
)
;
return
ImageTrackList_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ImageTrackList
:
:
Initialize
(
ErrorResult
&
aRv
)
{
mReadyPromise
=
Promise
:
:
Create
(
mParent
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
}
void
ImageTrackList
:
:
Destroy
(
)
{
if
(
!
mIsReady
&
&
mReadyPromise
&
&
mReadyPromise
-
>
PromiseObj
(
)
)
{
mReadyPromise
-
>
MaybeRejectWithAbortError
(
"
ImageTrackList
destroyed
"
)
;
mIsReady
=
true
;
}
for
(
auto
&
track
:
mTracks
)
{
track
-
>
Destroy
(
)
;
}
mTracks
.
Clear
(
)
;
mDecoder
=
nullptr
;
mSelectedIndex
=
-
1
;
}
void
ImageTrackList
:
:
MaybeRejectReady
(
const
MediaResult
&
aResult
)
{
if
(
mIsReady
|
|
!
mReadyPromise
|
|
!
mReadyPromise
-
>
PromiseObj
(
)
)
{
return
;
}
aResult
.
RejectTo
(
mReadyPromise
)
;
mIsReady
=
true
;
}
void
ImageTrackList
:
:
OnMetadataSuccess
(
const
image
:
:
DecodeMetadataResult
&
aMetadata
)
{
MOZ_ASSERT
(
mTracks
.
IsEmpty
(
)
)
;
const
float
repetitions
=
aMetadata
.
mRepetitions
<
0
?
std
:
:
numeric_limits
<
float
>
:
:
infinity
(
)
:
static_cast
<
float
>
(
aMetadata
.
mRepetitions
)
;
auto
track
=
MakeRefPtr
<
ImageTrack
>
(
this
0
true
aMetadata
.
mAnimated
aMetadata
.
mFrameCount
aMetadata
.
mFrameCountComplete
repetitions
)
;
mTracks
.
AppendElement
(
std
:
:
move
(
track
)
)
;
mSelectedIndex
=
0
;
MOZ_ASSERT
(
!
mIsReady
)
;
mReadyPromise
-
>
MaybeResolveWithUndefined
(
)
;
mIsReady
=
true
;
}
void
ImageTrackList
:
:
OnFrameCountSuccess
(
const
image
:
:
DecodeFrameCountResult
&
aResult
)
{
if
(
mTracks
.
IsEmpty
(
)
)
{
return
;
}
mTracks
.
LastElement
(
)
-
>
OnFrameCountSuccess
(
aResult
)
;
}
void
ImageTrackList
:
:
SetSelectedIndex
(
int32_t
aIndex
bool
aSelected
)
{
MOZ_ASSERT
(
aIndex
>
=
0
)
;
MOZ_ASSERT
(
uint32_t
(
aIndex
)
<
mTracks
.
Length
(
)
)
;
if
(
!
mDecoder
)
{
return
;
}
if
(
aSelected
)
{
if
(
mSelectedIndex
=
=
-
1
)
{
MOZ_ASSERT
(
!
mTracks
[
aIndex
]
-
>
Selected
(
)
)
;
mTracks
[
aIndex
]
-
>
MarkSelected
(
)
;
mSelectedIndex
=
aIndex
;
}
else
if
(
mSelectedIndex
!
=
aIndex
)
{
MOZ_ASSERT
(
mTracks
[
mSelectedIndex
]
-
>
Selected
(
)
)
;
MOZ_ASSERT
(
!
mTracks
[
aIndex
]
-
>
Selected
(
)
)
;
mTracks
[
mSelectedIndex
]
-
>
ClearSelected
(
)
;
mTracks
[
aIndex
]
-
>
MarkSelected
(
)
;
mSelectedIndex
=
aIndex
;
}
else
{
MOZ_ASSERT
(
mTracks
[
mSelectedIndex
]
-
>
Selected
(
)
)
;
return
;
}
}
else
if
(
mSelectedIndex
=
=
aIndex
)
{
mTracks
[
mSelectedIndex
]
-
>
ClearSelected
(
)
;
mSelectedIndex
=
-
1
;
}
else
{
MOZ_ASSERT
(
!
mTracks
[
aIndex
]
-
>
Selected
(
)
)
;
return
;
}
mDecoder
-
>
Reset
(
)
;
mDecoder
-
>
QueueSelectTrackMessage
(
mSelectedIndex
)
;
mDecoder
-
>
ProcessControlMessageQueue
(
)
;
}
}
