#
ifndef
DOM_MEDIA_WEBCODECS_EncoderAgent_H
#
define
DOM_MEDIA_WEBCODECS_EncoderAgent_H
#
include
"
MediaResult
.
h
"
#
include
"
PEMFactory
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
WebCodecsUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
class
nsISerialEventTarget
;
namespace
mozilla
{
class
PDMFactory
;
class
TrackInfo
;
namespace
layers
{
class
ImageContainer
;
}
class
EncoderAgent
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
EncoderAgent
)
;
explicit
EncoderAgent
(
WebCodecsId
aId
)
;
using
ConfigurePromise
=
MozPromise
<
bool
MediaResult
true
>
;
using
ReconfigurationPromise
=
MediaDataEncoder
:
:
ReconfigurationPromise
;
RefPtr
<
ConfigurePromise
>
Configure
(
const
EncoderConfig
&
aConfig
)
;
RefPtr
<
ReconfigurationPromise
>
Reconfigure
(
const
RefPtr
<
const
EncoderConfigurationChangeList
>
&
aConfigChange
)
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
;
using
EncodePromise
=
MediaDataEncoder
:
:
EncodePromise
;
RefPtr
<
EncodePromise
>
Encode
(
MediaData
*
aInput
)
;
RefPtr
<
EncodePromise
>
Drain
(
)
;
const
WebCodecsId
mId
;
private
:
~
EncoderAgent
(
)
;
RefPtr
<
EncodePromise
>
Dry
(
)
;
void
DryUntilDrain
(
)
;
enum
class
State
{
Unconfigured
Configuring
Configured
Encoding
Flushing
ShuttingDown
Error
}
;
void
SetState
(
State
aState
)
;
const
RefPtr
<
nsISerialEventTarget
>
mOwnerThread
;
const
RefPtr
<
PEMFactory
>
mPEMFactory
;
RefPtr
<
MediaDataEncoder
>
mEncoder
;
State
mState
;
MozPromiseHolder
<
ConfigurePromise
>
mConfigurePromise
;
using
CreateEncoderPromise
=
PlatformEncoderModule
:
:
CreateEncoderPromise
;
MozPromiseRequestHolder
<
CreateEncoderPromise
>
mCreateRequest
;
using
InitPromise
=
MediaDataEncoder
:
:
InitPromise
;
MozPromiseRequestHolder
<
InitPromise
>
mInitRequest
;
MozPromiseHolder
<
ReconfigurationPromise
>
mReconfigurationPromise
;
using
ReconfigureEncoderRequest
=
ReconfigurationPromise
;
MozPromiseRequestHolder
<
ReconfigureEncoderRequest
>
mReconfigurationRequest
;
MozPromiseHolder
<
ShutdownPromise
>
mShutdownWhileCreationPromise
;
MozPromiseHolder
<
EncodePromise
>
mEncodePromise
;
MozPromiseRequestHolder
<
EncodePromise
>
mEncodeRequest
;
MozPromiseRequestHolder
<
EncodePromise
>
mDrainRequest
;
MozPromiseHolder
<
EncodePromise
>
mDrainPromise
;
MediaDataEncoder
:
:
EncodedData
mDrainData
;
}
;
}
#
endif
