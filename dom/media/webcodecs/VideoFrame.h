#
ifndef
mozilla_dom_VideoFrame_h
#
define
mozilla_dom_VideoFrame_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
DOMRectReadOnly
;
class
HTMLCanvasElement
;
class
HTMLImageElement
;
class
HTMLVideoElement
;
class
ImageBitmap
;
class
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
;
class
OffscreenCanvas
;
class
OwningMaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
;
class
Promise
;
class
SVGImageElement
;
class
VideoColorSpace
;
class
VideoFrame
;
enum
class
VideoPixelFormat
:
uint8_t
;
struct
VideoFrameBufferInit
;
struct
VideoFrameInit
;
struct
VideoFrameCopyToOptions
;
}
}
namespace
mozilla
:
:
dom
{
class
VideoFrame
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
VideoFrame
)
public
:
VideoFrame
(
)
;
protected
:
~
VideoFrame
(
)
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
HTMLImageElement
&
imageElement
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
SVGImageElement
&
svgImageElement
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
HTMLCanvasElement
&
canvasElement
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
HTMLVideoElement
&
videoElement
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
OffscreenCanvas
&
offscreenCanvas
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
ImageBitmap
&
imageBitmap
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
VideoFrame
&
videoFrame
const
VideoFrameInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
const
ArrayBufferView
&
bufferView
const
VideoFrameBufferInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
VideoFrame
>
Constructor
(
const
GlobalObject
&
global
const
ArrayBuffer
&
buffer
const
VideoFrameBufferInit
&
init
ErrorResult
&
aRv
)
;
Nullable
<
VideoPixelFormat
>
GetFormat
(
)
const
;
uint32_t
CodedWidth
(
)
const
;
uint32_t
CodedHeight
(
)
const
;
already_AddRefed
<
DOMRectReadOnly
>
GetCodedRect
(
)
const
;
already_AddRefed
<
DOMRectReadOnly
>
GetVisibleRect
(
)
const
;
uint32_t
DisplayWidth
(
)
const
;
uint32_t
DisplayHeight
(
)
const
;
Nullable
<
uint64_t
>
GetDuration
(
)
const
;
Nullable
<
int64_t
>
GetTimestamp
(
)
const
;
already_AddRefed
<
VideoColorSpace
>
ColorSpace
(
)
const
;
uint32_t
AllocationSize
(
const
VideoFrameCopyToOptions
&
options
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
CopyTo
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
destination
const
VideoFrameCopyToOptions
&
options
ErrorResult
&
aRv
)
;
already_AddRefed
<
VideoFrame
>
Clone
(
ErrorResult
&
aRv
)
;
void
Close
(
)
;
}
;
}
#
endif
