#
ifndef
mozilla_dom_DecoderTemplate_h
#
define
mozilla_dom_DecoderTemplate_h
#
include
<
queue
>
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
DecoderAgent
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
class
TrackInfo
;
namespace
dom
{
class
WebCodecsErrorCallback
;
class
Promise
;
enum
class
CodecState
:
uint8_t
;
template
<
typename
T
>
class
MessageRequestHolder
{
public
:
MessageRequestHolder
(
)
=
default
;
~
MessageRequestHolder
(
)
=
default
;
MozPromiseRequestHolder
<
T
>
&
Request
(
)
{
return
mRequest
;
}
void
Disconnect
(
)
{
mRequest
.
Disconnect
(
)
;
}
void
Complete
(
)
{
mRequest
.
Complete
(
)
;
}
bool
Exists
(
)
const
{
return
mRequest
.
Exists
(
)
;
}
protected
:
MozPromiseRequestHolder
<
T
>
mRequest
;
}
;
enum
class
MessageProcessedResult
{
NotProcessed
Processed
}
;
template
<
typename
DecoderType
>
class
DecoderTemplate
:
public
DOMEventTargetHelper
{
using
Self
=
DecoderTemplate
<
DecoderType
>
;
using
ConfigType
=
typename
DecoderType
:
:
ConfigType
;
using
ConfigTypeInternal
=
typename
DecoderType
:
:
ConfigTypeInternal
;
using
InputType
=
typename
DecoderType
:
:
InputType
;
using
InputTypeInternal
=
typename
DecoderType
:
:
InputTypeInternal
;
using
OutputType
=
typename
DecoderType
:
:
OutputType
;
using
OutputCallbackType
=
typename
DecoderType
:
:
OutputCallbackType
;
protected
:
class
ConfigureMessage
;
class
DecodeMessage
;
class
FlushMessage
;
class
ControlMessage
{
public
:
explicit
ControlMessage
(
const
nsACString
&
aTitle
)
;
virtual
~
ControlMessage
(
)
=
default
;
virtual
void
Cancel
(
)
=
0
;
virtual
bool
IsProcessing
(
)
=
0
;
virtual
const
nsCString
&
ToString
(
)
const
{
return
mTitle
;
}
virtual
ConfigureMessage
*
AsConfigureMessage
(
)
{
return
nullptr
;
}
virtual
DecodeMessage
*
AsDecodeMessage
(
)
{
return
nullptr
;
}
virtual
FlushMessage
*
AsFlushMessage
(
)
{
return
nullptr
;
}
const
nsCString
mTitle
;
}
;
class
ConfigureMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
DecoderAgent
:
:
ConfigurePromise
>
{
public
:
using
Id
=
DecoderAgent
:
:
Id
;
static
constexpr
Id
NoId
=
0
;
static
ConfigureMessage
*
Create
(
UniquePtr
<
ConfigTypeInternal
>
&
&
aConfig
)
;
~
ConfigureMessage
(
)
=
default
;
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
ConfigureMessage
*
AsConfigureMessage
(
)
override
{
return
this
;
}
const
ConfigTypeInternal
&
Config
(
)
{
return
*
mConfig
;
}
UniquePtr
<
ConfigTypeInternal
>
TakeConfig
(
)
{
return
std
:
:
move
(
mConfig
)
;
}
const
Id
mId
;
private
:
ConfigureMessage
(
Id
aId
UniquePtr
<
ConfigTypeInternal
>
&
&
aConfig
)
;
UniquePtr
<
ConfigTypeInternal
>
mConfig
;
}
;
class
DecodeMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
DecoderAgent
:
:
DecodePromise
>
{
public
:
using
Id
=
size_t
;
using
ConfigId
=
typename
Self
:
:
ConfigureMessage
:
:
Id
;
DecodeMessage
(
Id
aId
ConfigId
aConfigId
UniquePtr
<
InputTypeInternal
>
&
&
aData
)
;
~
DecodeMessage
(
)
=
default
;
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
DecodeMessage
*
AsDecodeMessage
(
)
override
{
return
this
;
}
const
Id
mId
;
UniquePtr
<
InputTypeInternal
>
mData
;
}
;
class
FlushMessage
final
:
public
ControlMessage
public
MessageRequestHolder
<
DecoderAgent
:
:
DecodePromise
>
{
public
:
using
Id
=
size_t
;
using
ConfigId
=
typename
Self
:
:
ConfigureMessage
:
:
Id
;
FlushMessage
(
Id
aId
ConfigId
aConfigId
Promise
*
aPromise
)
;
~
FlushMessage
(
)
=
default
;
virtual
void
Cancel
(
)
override
{
Disconnect
(
)
;
}
virtual
bool
IsProcessing
(
)
override
{
return
Exists
(
)
;
}
;
virtual
FlushMessage
*
AsFlushMessage
(
)
override
{
return
this
;
}
already_AddRefed
<
Promise
>
TakePromise
(
)
{
return
mPromise
.
forget
(
)
;
}
void
RejectPromiseIfAny
(
const
nsresult
&
aReason
)
;
const
Id
mId
;
private
:
RefPtr
<
Promise
>
mPromise
;
}
;
protected
:
DecoderTemplate
(
nsIGlobalObject
*
aGlobalObject
RefPtr
<
WebCodecsErrorCallback
>
&
&
aErrorCallback
RefPtr
<
OutputCallbackType
>
&
&
aOutputCallback
)
;
virtual
~
DecoderTemplate
(
)
=
default
;
public
:
IMPL_EVENT_HANDLER
(
dequeue
)
CodecState
State
(
)
const
{
return
mState
;
}
;
uint32_t
DecodeQueueSize
(
)
const
{
return
mDecodeQueueSize
;
}
;
void
Configure
(
const
ConfigType
&
aConfig
ErrorResult
&
aRv
)
;
void
Decode
(
InputType
&
aInput
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Flush
(
ErrorResult
&
aRv
)
;
void
Reset
(
ErrorResult
&
aRv
)
;
void
Close
(
ErrorResult
&
aRv
)
;
protected
:
virtual
already_AddRefed
<
MediaRawData
>
InputDataToMediaRawData
(
UniquePtr
<
InputTypeInternal
>
&
&
aData
TrackInfo
&
aInfo
const
ConfigTypeInternal
&
aConfig
)
=
0
;
virtual
nsTArray
<
RefPtr
<
OutputType
>
>
DecodedDataToOutputType
(
nsIGlobalObject
*
aGlobalObject
nsTArray
<
RefPtr
<
MediaData
>
>
&
&
aData
ConfigTypeInternal
&
aConfig
)
=
0
;
protected
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
DecoderTemplate
)
;
}
Result
<
Ok
nsresult
>
ResetInternal
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
CloseInternal
(
const
nsresult
&
aResult
)
;
Result
<
Ok
nsresult
>
CloseInternalWithAbort
(
)
;
MOZ_CAN_RUN_SCRIPT
void
ReportError
(
const
nsresult
&
aResult
)
;
MOZ_CAN_RUN_SCRIPT
void
OutputDecodedData
(
nsTArray
<
RefPtr
<
MediaData
>
>
&
&
aData
)
;
class
ErrorRunnable
;
void
ScheduleReportError
(
const
nsresult
&
aResult
)
;
class
OutputRunnable
;
void
ScheduleOutputDecodedData
(
nsTArray
<
RefPtr
<
MediaData
>
>
&
&
aData
const
nsACString
&
aLabel
)
;
void
ScheduleDequeueEvent
(
)
;
nsresult
FireEvent
(
nsAtom
*
aTypeWithOn
const
nsAString
&
aEventType
)
;
void
ProcessControlMessageQueue
(
)
;
void
CancelPendingControlMessages
(
const
nsresult
&
aResult
)
;
MessageProcessedResult
ProcessConfigureMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
MessageProcessedResult
ProcessDecodeMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
MessageProcessedResult
ProcessFlushMessage
(
UniquePtr
<
ControlMessage
>
&
aMessage
)
;
bool
CreateDecoderAgent
(
DecoderAgent
:
:
Id
aId
UniquePtr
<
ConfigTypeInternal
>
&
&
aConfig
UniquePtr
<
TrackInfo
>
&
&
aInfo
)
;
void
DestroyDecoderAgentIfAny
(
)
;
RefPtr
<
WebCodecsErrorCallback
>
mErrorCallback
;
RefPtr
<
OutputCallbackType
>
mOutputCallback
;
CodecState
mState
;
bool
mKeyChunkRequired
;
bool
mMessageQueueBlocked
;
std
:
:
queue
<
UniquePtr
<
ControlMessage
>
>
mControlMessageQueue
;
UniquePtr
<
ControlMessage
>
mProcessingMessage
;
uint32_t
mDecodeQueueSize
;
bool
mDequeueEventScheduled
;
uint32_t
mLatestConfigureId
;
size_t
mDecodeCounter
;
size_t
mFlushCounter
;
RefPtr
<
DecoderAgent
>
mAgent
;
UniquePtr
<
ConfigTypeInternal
>
mActiveConfig
;
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mShutdownBlocker
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
}
;
}
}
#
endif
