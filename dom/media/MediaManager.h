#
ifndef
MOZILLA_MEDIAMANAGER_H
#
define
MOZILLA_MEDIAMANAGER_H
#
include
"
MediaEngine
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
nsIMediaManager
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPrefService
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIDOMNavigatorUserMedia
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamError
.
h
"
#
include
"
mozilla
/
media
/
MediaChild
.
h
"
#
include
"
mozilla
/
media
/
MediaParent
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
ifdef
MOZ_WEBRTC
#
include
"
mtransport
/
runnable_utils
.
h
"
#
endif
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
task
.
h
"
#
ifdef
MOZ_WIDGET_GONK
#
include
"
DOMCameraManager
.
h
"
#
endif
namespace
mozilla
{
namespace
dom
{
struct
MediaStreamConstraints
;
struct
MediaTrackConstraints
;
struct
MediaTrackConstraintSet
;
}
extern
LogModule
*
GetMediaManagerLog
(
)
;
#
define
MM_LOG
(
msg
)
MOZ_LOG
(
GetMediaManagerLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
msg
)
class
MediaDevice
:
public
nsIMediaDevice
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIMEDIADEVICE
void
SetId
(
const
nsAString
&
aID
)
;
virtual
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
dom
:
:
MediaTrackConstraintSet
*
>
&
aConstraintSets
)
;
protected
:
virtual
~
MediaDevice
(
)
{
}
explicit
MediaDevice
(
MediaEngineSource
*
aSource
bool
aIsVideo
)
;
static
uint32_t
FitnessDistance
(
nsString
aN
const
dom
:
:
OwningStringOrStringSequenceOrConstrainDOMStringParameters
&
aConstraint
)
;
private
:
static
bool
StringsContain
(
const
dom
:
:
OwningStringOrStringSequence
&
aStrings
nsString
aN
)
;
static
uint32_t
FitnessDistance
(
nsString
aN
const
dom
:
:
ConstrainDOMStringParameters
&
aParams
)
;
protected
:
nsString
mName
;
nsString
mID
;
dom
:
:
MediaSourceEnum
mMediaSource
;
RefPtr
<
MediaEngineSource
>
mSource
;
public
:
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
{
return
mMediaSource
;
}
bool
mIsVideo
;
}
;
class
VideoDevice
:
public
MediaDevice
{
public
:
typedef
MediaEngineVideoSource
Source
;
explicit
VideoDevice
(
Source
*
aSource
)
;
NS_IMETHOD
GetType
(
nsAString
&
aType
)
;
Source
*
GetSource
(
)
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
)
;
nsresult
Restart
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
)
;
}
;
class
AudioDevice
:
public
MediaDevice
{
public
:
typedef
MediaEngineAudioSource
Source
;
explicit
AudioDevice
(
Source
*
aSource
)
;
NS_IMETHOD
GetType
(
nsAString
&
aType
)
;
Source
*
GetSource
(
)
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
)
;
nsresult
Restart
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
)
;
}
;
class
GetUserMediaCallbackMediaStreamListener
:
public
MediaStreamListener
{
public
:
GetUserMediaCallbackMediaStreamListener
(
base
:
:
Thread
*
aThread
uint64_t
aWindowID
)
:
mMediaThread
(
aThread
)
mWindowID
(
aWindowID
)
mStopped
(
false
)
mFinished
(
false
)
mRemoved
(
false
)
mAudioStopped
(
false
)
mVideoStopped
(
false
)
{
}
~
GetUserMediaCallbackMediaStreamListener
(
)
{
Unused
<
<
mMediaThread
;
}
void
Activate
(
already_AddRefed
<
SourceMediaStream
>
aStream
AudioDevice
*
aAudioDevice
VideoDevice
*
aVideoDevice
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mStream
=
aStream
;
mAudioDevice
=
aAudioDevice
;
mVideoDevice
=
aVideoDevice
;
mStream
-
>
AddListener
(
this
)
;
}
MediaStream
*
Stream
(
)
{
return
mStream
;
}
SourceMediaStream
*
GetSourceStream
(
)
{
NS_ASSERTION
(
mStream
"
Getting
stream
from
never
-
activated
GUMCMSListener
"
)
;
if
(
!
mStream
)
{
return
nullptr
;
}
return
mStream
-
>
AsSourceStream
(
)
;
}
void
StopSharing
(
)
;
void
StopTrack
(
TrackID
aID
bool
aIsAudio
)
;
typedef
media
:
:
Pledge
<
bool
dom
:
:
MediaStreamError
*
>
PledgeVoid
;
already_AddRefed
<
PledgeVoid
>
ApplyConstraintsToTrack
(
nsPIDOMWindow
*
aWindow
TrackID
aID
bool
aIsAudio
const
dom
:
:
MediaTrackConstraints
&
aConstraints
)
;
bool
CapturingVideo
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVideoDevice
&
&
!
mStopped
&
&
!
mVideoDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
mVideoDevice
-
>
GetMediaSource
(
)
=
=
dom
:
:
MediaSourceEnum
:
:
Camera
&
&
(
!
mVideoDevice
-
>
GetSource
(
)
-
>
IsFake
(
)
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
;
}
bool
CapturingAudio
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mAudioDevice
&
&
!
mStopped
&
&
!
mAudioDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
(
!
mAudioDevice
-
>
GetSource
(
)
-
>
IsFake
(
)
|
|
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
fake
"
)
)
;
}
bool
CapturingScreen
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVideoDevice
&
&
!
mStopped
&
&
!
mVideoDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
mVideoDevice
-
>
GetMediaSource
(
)
=
=
dom
:
:
MediaSourceEnum
:
:
Screen
;
}
bool
CapturingWindow
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVideoDevice
&
&
!
mStopped
&
&
!
mVideoDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
mVideoDevice
-
>
GetMediaSource
(
)
=
=
dom
:
:
MediaSourceEnum
:
:
Window
;
}
bool
CapturingApplication
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVideoDevice
&
&
!
mStopped
&
&
!
mVideoDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
mVideoDevice
-
>
GetMediaSource
(
)
=
=
dom
:
:
MediaSourceEnum
:
:
Application
;
}
bool
CapturingBrowser
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mVideoDevice
&
&
!
mStopped
&
&
mVideoDevice
-
>
GetSource
(
)
-
>
IsAvailable
(
)
&
&
mVideoDevice
-
>
GetMediaSource
(
)
=
=
dom
:
:
MediaSourceEnum
:
:
Browser
;
}
void
Invalidate
(
)
;
void
AudioConfig
(
bool
aEchoOn
uint32_t
aEcho
bool
aAgcOn
uint32_t
aAGC
bool
aNoiseOn
uint32_t
aNoise
int32_t
aPlayoutDelay
)
;
void
Remove
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mStream
&
&
!
mRemoved
)
{
MM_LOG
(
(
"
Listener
removed
on
purpose
mFinished
=
%
d
"
(
int
)
mFinished
)
)
;
mRemoved
=
true
;
if
(
!
mStream
-
>
IsDestroyed
(
)
)
{
mStream
-
>
RemoveListener
(
this
)
;
}
}
}
void
NotifyPull
(
MediaStreamGraph
*
aGraph
StreamTime
aDesiredTime
)
override
{
if
(
mAudioDevice
)
{
mAudioDevice
-
>
GetSource
(
)
-
>
NotifyPull
(
aGraph
mStream
kAudioTrack
aDesiredTime
)
;
}
if
(
mVideoDevice
)
{
mVideoDevice
-
>
GetSource
(
)
-
>
NotifyPull
(
aGraph
mStream
kVideoTrack
aDesiredTime
)
;
}
}
void
NotifyEvent
(
MediaStreamGraph
*
aGraph
MediaStreamListener
:
:
MediaStreamGraphEvent
aEvent
)
override
{
switch
(
aEvent
)
{
case
EVENT_FINISHED
:
NS_DispatchToMainThread
(
NS_NewRunnableMethod
(
this
&
GetUserMediaCallbackMediaStreamListener
:
:
NotifyFinished
)
)
;
break
;
case
EVENT_REMOVED
:
NS_DispatchToMainThread
(
NS_NewRunnableMethod
(
this
&
GetUserMediaCallbackMediaStreamListener
:
:
NotifyRemoved
)
)
;
break
;
case
EVENT_HAS_DIRECT_LISTENERS
:
NotifyDirectListeners
(
aGraph
true
)
;
break
;
case
EVENT_HAS_NO_DIRECT_LISTENERS
:
NotifyDirectListeners
(
aGraph
false
)
;
break
;
default
:
break
;
}
}
void
NotifyFinished
(
)
;
void
NotifyRemoved
(
)
;
void
NotifyDirectListeners
(
MediaStreamGraph
*
aGraph
bool
aHasListeners
)
;
private
:
base
:
:
Thread
*
mMediaThread
;
uint64_t
mWindowID
;
bool
mStopped
;
bool
mFinished
;
bool
mRemoved
;
bool
mAudioStopped
;
bool
mVideoStopped
;
RefPtr
<
AudioDevice
>
mAudioDevice
;
RefPtr
<
VideoDevice
>
mVideoDevice
;
RefPtr
<
SourceMediaStream
>
mStream
;
}
;
class
GetUserMediaNotificationEvent
:
public
nsRunnable
{
public
:
enum
GetUserMediaStatus
{
STARTING
STOPPING
STOPPED_TRACK
}
;
GetUserMediaNotificationEvent
(
GetUserMediaCallbackMediaStreamListener
*
aListener
GetUserMediaStatus
aStatus
bool
aIsAudio
bool
aIsVideo
uint64_t
aWindowID
)
:
mListener
(
aListener
)
mStatus
(
aStatus
)
mIsAudio
(
aIsAudio
)
mIsVideo
(
aIsVideo
)
mWindowID
(
aWindowID
)
{
}
GetUserMediaNotificationEvent
(
GetUserMediaStatus
aStatus
already_AddRefed
<
DOMMediaStream
>
aStream
DOMMediaStream
:
:
OnTracksAvailableCallback
*
aOnTracksAvailableCallback
bool
aIsAudio
bool
aIsVideo
uint64_t
aWindowID
already_AddRefed
<
nsIDOMGetUserMediaErrorCallback
>
aError
)
:
mStream
(
aStream
)
mOnTracksAvailableCallback
(
aOnTracksAvailableCallback
)
mStatus
(
aStatus
)
mIsAudio
(
aIsAudio
)
mIsVideo
(
aIsVideo
)
mWindowID
(
aWindowID
)
mOnFailure
(
aError
)
{
}
virtual
~
GetUserMediaNotificationEvent
(
)
{
}
NS_IMETHOD
Run
(
)
override
;
protected
:
RefPtr
<
GetUserMediaCallbackMediaStreamListener
>
mListener
;
RefPtr
<
DOMMediaStream
>
mStream
;
nsAutoPtr
<
DOMMediaStream
:
:
OnTracksAvailableCallback
>
mOnTracksAvailableCallback
;
GetUserMediaStatus
mStatus
;
bool
mIsAudio
;
bool
mIsVideo
;
uint64_t
mWindowID
;
RefPtr
<
nsIDOMGetUserMediaErrorCallback
>
mOnFailure
;
}
;
typedef
enum
{
MEDIA_START
MEDIA_STOP
MEDIA_STOP_TRACK
MEDIA_DIRECT_LISTENERS
}
MediaOperation
;
class
MediaManager
;
class
GetUserMediaTask
;
class
ReleaseMediaOperationResource
:
public
nsRunnable
{
public
:
ReleaseMediaOperationResource
(
already_AddRefed
<
DOMMediaStream
>
aStream
DOMMediaStream
:
:
OnTracksAvailableCallback
*
aOnTracksAvailableCallback
)
:
mStream
(
aStream
)
mOnTracksAvailableCallback
(
aOnTracksAvailableCallback
)
{
}
NS_IMETHOD
Run
(
)
override
{
return
NS_OK
;
}
private
:
RefPtr
<
DOMMediaStream
>
mStream
;
nsAutoPtr
<
DOMMediaStream
:
:
OnTracksAvailableCallback
>
mOnTracksAvailableCallback
;
}
;
typedef
nsTArray
<
RefPtr
<
GetUserMediaCallbackMediaStreamListener
>
>
StreamListeners
;
typedef
nsClassHashtable
<
nsUint64HashKey
StreamListeners
>
WindowTable
;
typedef
void
(
*
WindowListenerCallback
)
(
MediaManager
*
aThis
uint64_t
aWindowID
StreamListeners
*
aListeners
void
*
aData
)
;
class
MediaManager
final
:
public
nsIMediaManagerService
public
nsIObserver
{
friend
GetUserMediaCallbackMediaStreamListener
;
public
:
static
already_AddRefed
<
MediaManager
>
GetInstance
(
)
;
static
MediaManager
*
Get
(
)
;
static
MediaManager
*
GetIfExists
(
)
;
static
void
StartupInit
(
)
;
static
void
PostTask
(
const
tracked_objects
:
:
Location
&
from_here
Task
*
task
)
;
#
ifdef
DEBUG
static
bool
IsInMediaThread
(
)
;
#
endif
static
bool
Exists
(
)
{
return
!
!
sSingleton
;
}
static
nsresult
NotifyRecordingStatusChange
(
nsPIDOMWindow
*
aWindow
const
nsString
&
aMsg
const
bool
&
aIsAudio
const
bool
&
aIsVideo
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIMEDIAMANAGERSERVICE
media
:
:
Parent
<
media
:
:
NonE10s
>
*
GetNonE10sParent
(
)
;
MediaEngine
*
GetBackend
(
uint64_t
aWindowId
=
0
)
;
StreamListeners
*
GetWindowListeners
(
uint64_t
aWindowId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mActiveWindows
.
Get
(
aWindowId
)
;
}
void
RemoveWindowID
(
uint64_t
aWindowId
)
;
bool
IsWindowStillActive
(
uint64_t
aWindowId
)
{
return
!
!
GetWindowListeners
(
aWindowId
)
;
}
void
RemoveFromWindowList
(
uint64_t
aWindowID
GetUserMediaCallbackMediaStreamListener
*
aListener
)
;
nsresult
GetUserMedia
(
nsPIDOMWindow
*
aWindow
const
dom
:
:
MediaStreamConstraints
&
aConstraints
nsIDOMGetUserMediaSuccessCallback
*
onSuccess
nsIDOMGetUserMediaErrorCallback
*
onError
)
;
nsresult
GetUserMediaDevices
(
nsPIDOMWindow
*
aWindow
const
dom
:
:
MediaStreamConstraints
&
aConstraints
nsIGetUserMediaDevicesSuccessCallback
*
onSuccess
nsIDOMGetUserMediaErrorCallback
*
onError
uint64_t
aInnerWindowID
=
0
const
nsAString
&
aCallID
=
nsString
(
)
)
;
nsresult
EnumerateDevices
(
nsPIDOMWindow
*
aWindow
nsIGetUserMediaDevicesSuccessCallback
*
aOnSuccess
nsIDOMGetUserMediaErrorCallback
*
aOnFailure
)
;
nsresult
EnumerateDevices
(
nsPIDOMWindow
*
aWindow
dom
:
:
Promise
&
aPromise
)
;
void
OnNavigation
(
uint64_t
aWindowID
)
;
bool
IsActivelyCapturingOrHasAPermission
(
uint64_t
aWindowId
)
;
MediaEnginePrefs
mPrefs
;
typedef
nsTArray
<
RefPtr
<
MediaDevice
>
>
SourceSet
;
static
bool
IsPrivateBrowsing
(
nsPIDOMWindow
*
window
)
;
private
:
typedef
media
:
:
Pledge
<
SourceSet
*
dom
:
:
MediaStreamError
*
>
PledgeSourceSet
;
typedef
media
:
:
Pledge
<
const
char
*
dom
:
:
MediaStreamError
*
>
PledgeChar
;
static
bool
IsPrivileged
(
)
;
static
bool
IsLoop
(
nsIURI
*
aDocURI
)
;
static
nsresult
GenerateUUID
(
nsAString
&
aResult
)
;
static
nsresult
AnonymizeId
(
nsAString
&
aId
const
nsACString
&
aOriginKey
)
;
public
:
static
void
AnonymizeDevices
(
SourceSet
&
aDevices
const
nsACString
&
aOriginKey
)
;
static
already_AddRefed
<
nsIWritableVariant
>
ToJSArray
(
SourceSet
&
aDevices
)
;
private
:
already_AddRefed
<
PledgeSourceSet
>
EnumerateRawDevices
(
uint64_t
aWindowId
dom
:
:
MediaSourceEnum
aVideoType
dom
:
:
MediaSourceEnum
aAudioType
bool
aFake
bool
aFakeTracks
)
;
already_AddRefed
<
PledgeSourceSet
>
EnumerateDevicesImpl
(
uint64_t
aWindowId
dom
:
:
MediaSourceEnum
aVideoSrcType
dom
:
:
MediaSourceEnum
aAudioSrcType
bool
aFake
=
false
bool
aFakeTracks
=
false
)
;
already_AddRefed
<
PledgeChar
>
SelectSettings
(
dom
:
:
MediaStreamConstraints
&
aConstraints
RefPtr
<
media
:
:
Refcountable
<
ScopedDeletePtr
<
SourceSet
>
>
>
&
aSources
)
;
StreamListeners
*
AddWindowID
(
uint64_t
aWindowId
)
;
WindowTable
*
GetActiveWindows
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
&
mActiveWindows
;
}
void
GetPref
(
nsIPrefBranch
*
aBranch
const
char
*
aPref
const
char
*
aData
int32_t
*
aVal
)
;
void
GetPrefBool
(
nsIPrefBranch
*
aBranch
const
char
*
aPref
const
char
*
aData
bool
*
aVal
)
;
void
GetPrefs
(
nsIPrefBranch
*
aBranch
const
char
*
aData
)
;
MediaManager
(
)
;
~
MediaManager
(
)
{
}
void
Shutdown
(
)
;
void
StopScreensharing
(
uint64_t
aWindowID
)
;
void
IterateWindowListeners
(
nsPIDOMWindow
*
aWindow
WindowListenerCallback
aCallback
void
*
aData
)
;
void
StopMediaStreams
(
)
;
WindowTable
mActiveWindows
;
nsClassHashtable
<
nsStringHashKey
GetUserMediaTask
>
mActiveCallbacks
;
nsClassHashtable
<
nsUint64HashKey
nsTArray
<
nsString
>
>
mCallIds
;
nsAutoPtr
<
base
:
:
Thread
>
mMediaThread
;
nsCOMPtr
<
nsIAsyncShutdownBlocker
>
mShutdownBlocker
;
RefPtr
<
MediaEngine
>
mBackend
;
static
StaticRefPtr
<
MediaManager
>
sSingleton
;
media
:
:
CoatCheck
<
PledgeSourceSet
>
mOutstandingPledges
;
media
:
:
CoatCheck
<
PledgeChar
>
mOutstandingCharPledges
;
media
:
:
CoatCheck
<
GetUserMediaCallbackMediaStreamListener
:
:
PledgeVoid
>
mOutstandingVoidPledges
;
#
if
defined
(
MOZ_B2G_CAMERA
)
&
&
defined
(
MOZ_WIDGET_GONK
)
RefPtr
<
nsDOMCameraManager
>
mCameraManager
;
#
endif
public
:
media
:
:
CoatCheck
<
media
:
:
Pledge
<
nsCString
>
>
mGetOriginKeyPledges
;
ScopedDeletePtr
<
media
:
:
Parent
<
media
:
:
NonE10s
>
>
mNonE10sParent
;
}
;
}
#
endif
