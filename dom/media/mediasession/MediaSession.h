#
ifndef
mozilla_dom_MediaSession_h
#
define
mozilla_dom_MediaSession_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
MediaMetadata
.
h
"
#
include
"
mozilla
/
dom
/
MediaSessionBinding
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
MediaSession
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
MediaSession
)
explicit
MediaSession
(
nsPIDOMWindowInner
*
aParent
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MediaMetadata
*
GetMetadata
(
)
const
;
void
SetMetadata
(
MediaMetadata
*
aMetadata
)
;
void
SetPlaybackState
(
const
MediaSessionPlaybackState
&
aPlaybackState
)
;
MediaSessionPlaybackState
PlaybackState
(
)
const
;
void
SetActionHandler
(
MediaSessionAction
aAction
MediaSessionActionHandler
*
aHandler
)
;
bool
IsSupportedAction
(
MediaSessionAction
aAction
)
const
;
void
NotifyHandler
(
const
MediaSessionActionDetails
&
aDetails
)
;
void
NotifyHandler
(
MediaSessionAction
aAction
)
;
void
Shutdown
(
)
;
private
:
enum
class
SessionStatus
:
bool
{
eDestroyed
=
false
eCreated
=
true
}
;
void
NotifyMediaSessionStatus
(
SessionStatus
aState
)
;
void
NotifyMetadataUpdated
(
)
;
void
DispatchNotifyHandler
(
const
MediaSessionActionDetails
&
aDetails
)
;
MediaSessionActionHandler
*
GetActionHandler
(
MediaSessionAction
aAction
)
const
;
~
MediaSession
(
)
=
default
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
RefPtr
<
MediaMetadata
>
mMediaMetadata
;
static
const
size_t
ACTIONS
=
MediaSessionActionValues
:
:
Count
;
RefPtr
<
MediaSessionActionHandler
>
mActionHandlers
[
ACTIONS
]
=
{
nullptr
}
;
MediaSessionPlaybackState
mDeclaredPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
}
;
}
}
#
endif
