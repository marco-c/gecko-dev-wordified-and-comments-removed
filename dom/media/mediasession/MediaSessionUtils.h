#
ifndef
DOM_MEDIA_MEDIASESSION_MEDIASESSIONUTILS_H_
#
define
DOM_MEDIA_MEDIASESSION_MEDIASESSIONUTILS_H_
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
MediaController
.
h
"
namespace
mozilla
{
namespace
dom
{
inline
void
NotfiyMediaSessionCreationOrDeconstruction
(
BrowsingContext
*
aContext
bool
aIsCreated
)
{
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyMediaSessionUpdated
(
aContext
aIsCreated
)
;
return
;
}
RefPtr
<
MediaController
>
controller
=
aContext
-
>
Canonical
(
)
-
>
GetMediaController
(
)
;
if
(
!
controller
)
{
return
;
}
if
(
aIsCreated
)
{
controller
-
>
NotifySessionCreated
(
aContext
-
>
Id
(
)
)
;
}
else
{
controller
-
>
NotifySessionDestroyed
(
aContext
-
>
Id
(
)
)
;
}
}
inline
const
char
*
ToMediaSessionPlaybackStateStr
(
const
MediaSessionPlaybackState
&
aState
)
{
switch
(
aState
)
{
case
MediaSessionPlaybackState
:
:
None
:
return
"
none
"
;
case
MediaSessionPlaybackState
:
:
Paused
:
return
"
paused
"
;
case
MediaSessionPlaybackState
:
:
Playing
:
return
"
playing
"
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
MediaSessionPlaybackState
.
"
)
;
return
"
Unknown
"
;
}
}
}
}
#
endif
