#
include
"
mozilla
/
dom
/
MediaSession
.
h
"
#
include
"
mozilla
/
EnumeratedArrayCycleCollection
.
h
"
#
include
"
MediaSessionUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
MediaSession
mParent
mMediaMetadata
mActionHandlers
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
MediaSession
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
MediaSession
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MediaSession
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
MediaSession
:
:
MediaSession
(
nsPIDOMWindowInner
*
aParent
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
mParent
)
;
NotifyMediaSessionStatus
(
SessionStatus
:
:
eCreated
)
;
}
nsPIDOMWindowInner
*
MediaSession
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
MediaSession
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaSession_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
MediaMetadata
*
MediaSession
:
:
GetMetadata
(
)
const
{
return
mMediaMetadata
;
}
void
MediaSession
:
:
SetMetadata
(
MediaMetadata
*
aMetadata
)
{
mMediaMetadata
=
aMetadata
;
NotifyMetadataUpdated
(
)
;
}
void
MediaSession
:
:
SetPlaybackState
(
const
MediaSessionPlaybackState
&
aPlaybackState
)
{
if
(
mDeclaredPlaybackState
=
=
aPlaybackState
)
{
return
;
}
mDeclaredPlaybackState
=
aPlaybackState
;
RefPtr
<
BrowsingContext
>
currentBC
=
GetParentObject
(
)
-
>
GetBrowsingContext
(
)
;
MOZ_ASSERT
(
currentBC
"
Update
session
playback
state
after
context
destroyed
!
"
)
;
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyMediaSessionPlaybackStateChanged
(
currentBC
mDeclaredPlaybackState
)
;
return
;
}
if
(
RefPtr
<
MediaController
>
controller
=
currentBC
-
>
Canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
SetDeclaredPlaybackState
(
currentBC
-
>
Id
(
)
mDeclaredPlaybackState
)
;
}
}
MediaSessionPlaybackState
MediaSession
:
:
PlaybackState
(
)
const
{
return
mDeclaredPlaybackState
;
}
void
MediaSession
:
:
SetActionHandler
(
MediaSessionAction
aAction
MediaSessionActionHandler
*
aHandler
)
{
MOZ_ASSERT
(
size_t
(
aAction
)
<
ArrayLength
(
mActionHandlers
)
)
;
mActionHandlers
[
aAction
]
=
aHandler
;
}
MediaSessionActionHandler
*
MediaSession
:
:
GetActionHandler
(
MediaSessionAction
aAction
)
const
{
MOZ_ASSERT
(
size_t
(
aAction
)
<
ArrayLength
(
mActionHandlers
)
)
;
return
mActionHandlers
[
aAction
]
;
}
void
MediaSession
:
:
SetPositionState
(
const
MediaPositionState
&
aState
ErrorResult
&
aRv
)
{
if
(
!
aState
.
IsAnyMemberPresent
(
)
)
{
mPositionState
.
reset
(
)
;
return
;
}
if
(
!
aState
.
mDuration
.
WasPassed
(
)
)
{
return
aRv
.
ThrowTypeError
(
"
Duration
is
not
present
"
)
;
}
if
(
aState
.
mDuration
.
WasPassed
(
)
&
&
aState
.
mDuration
.
Value
(
)
<
0
.
0
)
{
return
aRv
.
ThrowTypeError
(
nsPrintfCString
(
"
Invalid
duration
%
f
it
can
'
t
be
negative
"
aState
.
mDuration
.
Value
(
)
)
)
;
}
if
(
aState
.
mPosition
.
WasPassed
(
)
&
&
(
aState
.
mPosition
.
Value
(
)
<
0
.
0
|
|
aState
.
mPosition
.
Value
(
)
>
aState
.
mDuration
.
Value
(
)
)
)
{
return
aRv
.
ThrowTypeError
(
nsPrintfCString
(
"
Invalid
position
%
f
it
can
'
t
be
negative
or
greater
than
duration
"
aState
.
mPosition
.
Value
(
)
)
)
;
}
if
(
aState
.
mPlaybackRate
.
WasPassed
(
)
&
&
aState
.
mPlaybackRate
.
Value
(
)
=
=
0
.
0
)
{
return
aRv
.
ThrowTypeError
(
"
The
playbackRate
is
zero
"
)
;
}
double
position
=
aState
.
mPosition
.
WasPassed
(
)
?
aState
.
mPosition
.
Value
(
)
:
0
;
double
playbackRate
=
aState
.
mPlaybackRate
.
WasPassed
(
)
?
aState
.
mPlaybackRate
.
Value
(
)
:
1
.
0
;
MOZ_ASSERT
(
aState
.
mDuration
.
WasPassed
(
)
)
;
mPositionState
=
Some
(
PositionState
(
aState
.
mDuration
.
Value
(
)
playbackRate
position
)
)
;
}
void
MediaSession
:
:
NotifyHandler
(
const
MediaSessionActionDetails
&
aDetails
)
{
DispatchNotifyHandler
(
aDetails
)
;
}
void
MediaSession
:
:
NotifyHandler
(
MediaSessionAction
aAction
)
{
MediaSessionActionDetails
details
;
details
.
mAction
=
aAction
;
DispatchNotifyHandler
(
details
)
;
}
void
MediaSession
:
:
DispatchNotifyHandler
(
const
MediaSessionActionDetails
&
aDetails
)
{
class
Runnable
final
:
public
mozilla
:
:
Runnable
{
public
:
Runnable
(
const
MediaSession
*
aSession
const
MediaSessionActionDetails
&
aDetails
)
:
mozilla
:
:
Runnable
(
"
MediaSession
:
:
DispatchNotifyHandler
"
)
mSession
(
aSession
)
mDetails
(
aDetails
)
{
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
Run
(
)
override
{
if
(
RefPtr
<
MediaSessionActionHandler
>
handler
=
mSession
-
>
GetActionHandler
(
mDetails
.
mAction
)
)
{
handler
-
>
Call
(
mDetails
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
const
MediaSession
>
mSession
;
MediaSessionActionDetails
mDetails
;
}
;
RefPtr
<
nsIRunnable
>
runnable
=
new
Runnable
(
this
aDetails
)
;
NS_DispatchToMainThread
(
runnable
)
;
}
bool
MediaSession
:
:
IsSupportedAction
(
MediaSessionAction
aAction
)
const
{
MOZ_ASSERT
(
size_t
(
aAction
)
<
ArrayLength
(
mActionHandlers
)
)
;
return
mActionHandlers
[
aAction
]
!
=
nullptr
;
}
void
MediaSession
:
:
Shutdown
(
)
{
NotifyMediaSessionStatus
(
SessionStatus
:
:
eDestroyed
)
;
}
void
MediaSession
:
:
NotifyMediaSessionStatus
(
SessionStatus
aState
)
{
RefPtr
<
BrowsingContext
>
currentBC
=
GetParentObject
(
)
-
>
GetBrowsingContext
(
)
;
MOZ_ASSERT
(
currentBC
"
Update
session
status
after
context
destroyed
!
"
)
;
NotfiyMediaSessionCreationOrDeconstruction
(
currentBC
aState
=
=
SessionStatus
:
:
eCreated
)
;
}
void
MediaSession
:
:
NotifyMetadataUpdated
(
)
{
RefPtr
<
BrowsingContext
>
currentBC
=
GetParentObject
(
)
-
>
GetBrowsingContext
(
)
;
MOZ_ASSERT
(
currentBC
"
Update
session
metadata
after
context
destroyed
!
"
)
;
Maybe
<
MediaMetadataBase
>
metadata
;
if
(
GetMetadata
(
)
)
{
metadata
.
emplace
(
*
(
GetMetadata
(
)
-
>
AsMetadataBase
(
)
)
)
;
}
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyUpdateMediaMetadata
(
currentBC
metadata
)
;
return
;
}
if
(
RefPtr
<
MediaController
>
controller
=
currentBC
-
>
Canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
UpdateMetadata
(
currentBC
-
>
Id
(
)
metadata
)
;
}
}
}
}
