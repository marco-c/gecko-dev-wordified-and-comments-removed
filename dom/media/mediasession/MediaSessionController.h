#
ifndef
DOM_MEDIA_MEDIASESSION_MEDIASESSIONCONTROLLER_H_
#
define
DOM_MEDIA_MEDIASESSION_MEDIASESSIONCONTROLLER_H_
#
include
"
mozilla
/
dom
/
MediaMetadata
.
h
"
#
include
"
mozilla
/
dom
/
MediaSessionBinding
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MediaSessionInfo
{
public
:
MediaSessionInfo
(
)
=
default
;
explicit
MediaSessionInfo
(
MediaMetadataBase
&
aMetadata
)
{
mMetadata
.
emplace
(
aMetadata
)
;
}
MediaSessionInfo
(
MediaMetadataBase
&
aMetadata
MediaSessionPlaybackState
&
aState
)
{
mMetadata
.
emplace
(
aMetadata
)
;
mDeclaredPlaybackState
=
aState
;
}
static
MediaSessionInfo
EmptyInfo
(
)
{
return
MediaSessionInfo
(
)
;
}
Maybe
<
MediaMetadataBase
>
mMetadata
;
MediaSessionPlaybackState
mDeclaredPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
}
;
class
IMediaInfoUpdater
{
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
=
0
;
virtual
void
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
=
0
;
virtual
void
SetDeclaredPlaybackState
(
uint64_t
aSessionContextId
MediaSessionPlaybackState
aState
)
=
0
;
}
;
class
MediaSessionController
:
public
IMediaInfoUpdater
{
public
:
explicit
MediaSessionController
(
uint64_t
aBrowsingContextId
)
;
void
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
override
;
void
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
override
;
void
SetDeclaredPlaybackState
(
uint64_t
aSessionContextId
MediaSessionPlaybackState
aState
)
override
;
void
NotifySessionCreated
(
uint64_t
aSessionContextId
)
;
void
NotifySessionDestroyed
(
uint64_t
aSessionContextId
)
;
void
UpdateMetadata
(
uint64_t
aSessionContextId
const
Maybe
<
MediaMetadataBase
>
&
aMetadata
)
;
MediaMetadataBase
GetCurrentMediaMetadata
(
)
const
;
uint64_t
Id
(
)
const
{
return
mTopLevelBCId
;
}
bool
IsMediaAudible
(
)
const
;
bool
IsMediaPlaying
(
)
const
;
bool
IsAnyMediaBeingControlled
(
)
const
;
MediaEventSource
<
MediaMetadataBase
>
&
MetadataChangedEvent
(
)
{
return
mMetadataChangedEvent
;
}
MediaSessionPlaybackState
GetState
(
)
const
;
protected
:
~
MediaSessionController
(
)
=
default
;
virtual
void
HandleActualPlaybackStateChanged
(
)
=
0
;
uint64_t
mTopLevelBCId
;
Maybe
<
uint64_t
>
mActiveMediaSessionContextId
;
private
:
nsString
GetDefaultFaviconURL
(
)
const
;
nsString
GetDefaultTitle
(
)
const
;
MediaMetadataBase
CreateDefaultMetadata
(
)
const
;
bool
IsInPrivateBrowsing
(
)
const
;
void
FillMissingTitleAndArtworkIfNeeded
(
MediaMetadataBase
&
aMetadata
)
const
;
void
UpdateActiveMediaSessionContextId
(
)
;
void
SetGuessedPlayState
(
MediaSessionPlaybackState
aState
)
;
void
UpdateActualPlaybackState
(
)
;
MediaSessionPlaybackState
GetCurrentDeclaredPlaybackState
(
)
const
;
MediaSessionPlaybackState
mGuessedPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
MediaSessionPlaybackState
mActualPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
nsDataHashtable
<
nsUint64HashKey
MediaSessionInfo
>
mMediaSessionInfoMap
;
MediaEventProducer
<
MediaMetadataBase
>
mMetadataChangedEvent
;
MediaPlaybackStatus
mMediaStatusDelegate
;
}
;
}
}
#
endif
