#
include
"
MP3Decoder
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
MP3Demuxer
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
namespace
mozilla
{
MediaDecoder
*
MP3Decoder
:
:
Clone
(
)
{
if
(
!
IsEnabled
(
)
)
{
return
nullptr
;
}
return
new
MP3Decoder
(
)
;
}
MediaDecoderStateMachine
*
MP3Decoder
:
:
CreateStateMachine
(
)
{
RefPtr
<
MediaDecoderReader
>
reader
=
new
MediaFormatReader
(
this
new
mp3
:
:
MP3Demuxer
(
GetResource
(
)
)
)
;
return
new
MediaDecoderStateMachine
(
this
reader
)
;
}
static
already_AddRefed
<
MediaDataDecoder
>
CreateTestMP3Decoder
(
AudioInfo
&
aConfig
)
{
PlatformDecoderModule
:
:
Init
(
)
;
RefPtr
<
PlatformDecoderModule
>
platform
=
PlatformDecoderModule
:
:
Create
(
)
;
if
(
!
platform
|
|
!
platform
-
>
SupportsMimeType
(
aConfig
.
mMimeType
)
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoder
>
decoder
(
platform
-
>
CreateDecoder
(
aConfig
nullptr
nullptr
)
)
;
if
(
!
decoder
)
{
return
nullptr
;
}
return
decoder
.
forget
(
)
;
}
static
bool
CanCreateMP3Decoder
(
)
{
static
bool
haveCachedResult
=
false
;
static
bool
result
=
false
;
if
(
haveCachedResult
)
{
return
result
;
}
AudioInfo
config
;
config
.
mMimeType
=
"
audio
/
mpeg
"
;
config
.
mRate
=
48000
;
config
.
mChannels
=
2
;
config
.
mBitDepth
=
16
;
RefPtr
<
MediaDataDecoder
>
decoder
(
CreateTestMP3Decoder
(
config
)
)
;
if
(
decoder
)
{
result
=
true
;
}
haveCachedResult
=
true
;
return
result
;
}
bool
MP3Decoder
:
:
IsEnabled
(
)
{
return
CanCreateMP3Decoder
(
)
;
}
bool
MP3Decoder
:
:
CanHandleMediaType
(
const
nsACString
&
aType
const
nsAString
&
aCodecs
)
{
if
(
aType
.
EqualsASCII
(
"
audio
/
mp3
"
)
|
|
aType
.
EqualsASCII
(
"
audio
/
mpeg
"
)
)
{
return
CanCreateMP3Decoder
(
)
&
&
(
aCodecs
.
IsEmpty
(
)
|
|
aCodecs
.
EqualsASCII
(
"
mp3
"
)
)
;
}
return
false
;
}
}
