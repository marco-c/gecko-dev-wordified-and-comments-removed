#
ifdef
XP_WIN
#
include
"
windows
.
h
"
#
include
"
mmsystem
.
h
"
#
endif
#
include
<
algorithm
>
#
include
<
stdint
.
h
>
#
include
"
gfx2DGlue
.
h
"
#
include
"
mediasink
/
AudioSinkWrapper
.
h
"
#
include
"
mediasink
/
DecodedAudioDataSink
.
h
"
#
include
"
mediasink
/
DecodedStream
.
h
"
#
include
"
mediasink
/
OutputStreamManager
.
h
"
#
include
"
mediasink
/
VideoSink
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
prenv
.
h
"
#
include
"
AccurateSeekTask
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MediaDecoder
.
h
"
#
include
"
MediaDecoderReader
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaShutdownManager
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
MediaTimer
.
h
"
#
include
"
NextFrameSeekTask
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
gfxPrefs
.
h
"
namespace
mozilla
{
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
media
;
#
define
NS_DispatchToMainThread
(
.
.
.
)
CompileError_UseAbstractThreadDispatchInstead
#
undef
FMT
#
undef
DECODER_LOG
#
undef
VERBOSE_LOG
#
undef
SAMPLE_LOG
#
undef
DECODER_WARN
#
undef
DUMP_LOG
#
undef
SFMT
#
undef
SLOG
#
undef
SWARN
#
undef
SDUMP
#
define
FMT
(
x
.
.
.
)
"
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
#
define
DECODER_LOG
(
x
.
.
.
)
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
(
FMT
(
x
#
#
__VA_ARGS__
)
)
)
#
define
VERBOSE_LOG
(
x
.
.
.
)
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Verbose
(
FMT
(
x
#
#
__VA_ARGS__
)
)
)
#
define
SAMPLE_LOG
(
x
.
.
.
)
MOZ_LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
(
FMT
(
x
#
#
__VA_ARGS__
)
)
)
#
define
DECODER_WARN
(
x
.
.
.
)
NS_WARNING
(
nsPrintfCString
(
FMT
(
x
#
#
__VA_ARGS__
)
)
.
get
(
)
)
#
define
DUMP_LOG
(
x
.
.
.
)
NS_DebugBreak
(
NS_DEBUG_WARNING
nsPrintfCString
(
FMT
(
x
#
#
__VA_ARGS__
)
)
.
get
(
)
nullptr
nullptr
-
1
)
#
define
SFMT
(
x
.
.
.
)
"
Decoder
=
%
p
state
=
%
s
"
x
mMaster
-
>
mDecoderID
ToStateStr
(
GetState
(
)
)
#
#
__VA_ARGS__
#
define
SLOG
(
x
.
.
.
)
MOZ_LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
(
SFMT
(
x
#
#
__VA_ARGS__
)
)
)
#
define
SWARN
(
x
.
.
.
)
NS_WARNING
(
nsPrintfCString
(
SFMT
(
x
#
#
__VA_ARGS__
)
)
.
get
(
)
)
#
define
SDUMP
(
x
.
.
.
)
NS_DebugBreak
(
NS_DEBUG_WARNING
nsPrintfCString
(
SFMT
(
x
#
#
__VA_ARGS__
)
)
.
get
(
)
nullptr
nullptr
-
1
)
namespace
detail
{
static
const
uint32_t
LOW_AUDIO_USECS
=
300000
;
static
const
int64_t
AMPLE_AUDIO_USECS
=
2000000
;
}
static
const
uint32_t
LOW_VIDEO_FRAMES
=
2
;
static
const
int32_t
LOW_VIDEO_THRESHOLD_USECS
=
60000
;
static
const
int
AUDIO_DURATION_USECS
=
40000
;
static
const
int
THRESHOLD_FACTOR
=
2
;
namespace
detail
{
static
const
int64_t
LOW_DATA_THRESHOLD_USECS
=
5000000
;
static_assert
(
LOW_DATA_THRESHOLD_USECS
>
AMPLE_AUDIO_USECS
"
LOW_DATA_THRESHOLD_USECS
is
too
small
"
)
;
}
static
const
uint32_t
EXHAUSTED_DATA_MARGIN_USECS
=
100000
;
static
int64_t
DurationToUsecs
(
TimeDuration
aDuration
)
{
return
static_cast
<
int64_t
>
(
aDuration
.
ToSeconds
(
)
*
USECS_PER_S
)
;
}
static
const
uint32_t
MIN_VIDEO_QUEUE_SIZE
=
3
;
static
const
uint32_t
MAX_VIDEO_QUEUE_SIZE
=
10
;
#
ifdef
MOZ_APPLEMEDIA
static
const
uint32_t
HW_VIDEO_QUEUE_SIZE
=
10
;
#
else
static
const
uint32_t
HW_VIDEO_QUEUE_SIZE
=
3
;
#
endif
static
const
uint32_t
VIDEO_QUEUE_SEND_TO_COMPOSITOR_SIZE
=
9999
;
static
uint32_t
sVideoQueueDefaultSize
=
MAX_VIDEO_QUEUE_SIZE
;
static
uint32_t
sVideoQueueHWAccelSize
=
HW_VIDEO_QUEUE_SIZE
;
static
uint32_t
sVideoQueueSendToCompositorSize
=
VIDEO_QUEUE_SEND_TO_COMPOSITOR_SIZE
;
static
void
InitVideoQueuePrefs
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
static
bool
sPrefInit
=
false
;
if
(
!
sPrefInit
)
{
sPrefInit
=
true
;
sVideoQueueDefaultSize
=
Preferences
:
:
GetUint
(
"
media
.
video
-
queue
.
default
-
size
"
MAX_VIDEO_QUEUE_SIZE
)
;
sVideoQueueHWAccelSize
=
Preferences
:
:
GetUint
(
"
media
.
video
-
queue
.
hw
-
accel
-
size
"
HW_VIDEO_QUEUE_SIZE
)
;
sVideoQueueSendToCompositorSize
=
Preferences
:
:
GetUint
(
"
media
.
video
-
queue
.
send
-
to
-
compositor
-
size
"
VIDEO_QUEUE_SEND_TO_COMPOSITOR_SIZE
)
;
}
}
static
TimeDuration
SuspendBackgroundVideoDelay
(
)
{
return
TimeDuration
:
:
FromMilliseconds
(
MediaPrefs
:
:
MDSMSuspendBackgroundVideoDelay
(
)
)
;
}
class
MediaDecoderStateMachine
:
:
StateObject
{
public
:
virtual
~
StateObject
(
)
{
}
virtual
void
Exit
(
)
{
}
;
virtual
void
Step
(
)
{
}
virtual
State
GetState
(
)
const
=
0
;
virtual
void
HandleCDMProxyReady
(
)
{
}
virtual
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
{
}
virtual
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
{
}
virtual
void
HandleEndOfStream
(
)
{
}
virtual
void
HandleWaitingForData
(
)
{
}
virtual
void
HandleAudioCaptured
(
)
{
}
virtual
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
HandleSeek
(
SeekTarget
aTarget
)
;
virtual
RefPtr
<
ShutdownPromise
>
HandleShutdown
(
)
;
virtual
void
HandleVideoSuspendTimeout
(
)
=
0
;
virtual
void
HandleResumeVideoDecoding
(
)
;
virtual
void
HandlePlayStateChanged
(
MediaDecoder
:
:
PlayState
aPlayState
)
{
}
virtual
void
DumpDebugInfo
(
)
{
}
private
:
template
<
class
S
typename
R
typename
.
.
.
As
>
auto
ReturnTypeHelper
(
R
(
S
:
:
*
)
(
As
.
.
.
)
)
-
>
R
;
protected
:
enum
class
EventVisibility
:
int8_t
{
Observable
Suppressed
}
;
using
Master
=
MediaDecoderStateMachine
;
explicit
StateObject
(
Master
*
aPtr
)
:
mMaster
(
aPtr
)
{
}
TaskQueue
*
OwnerThread
(
)
const
{
return
mMaster
-
>
mTaskQueue
;
}
MediaResource
*
Resource
(
)
const
{
return
mMaster
-
>
mResource
;
}
MediaDecoderReaderWrapper
*
Reader
(
)
const
{
return
mMaster
-
>
mReader
;
}
const
MediaInfo
&
Info
(
)
const
{
return
mMaster
-
>
Info
(
)
;
}
bool
IsExpectingMoreData
(
)
const
{
return
Resource
(
)
-
>
IsExpectingMoreData
(
)
|
|
(
Reader
(
)
-
>
IsWaitForDataSupported
(
)
&
&
(
Reader
(
)
-
>
IsWaitingAudioData
(
)
|
|
Reader
(
)
-
>
IsWaitingVideoData
(
)
)
)
;
}
MediaQueue
<
MediaData
>
&
AudioQueue
(
)
{
return
mMaster
-
>
mAudioQueue
;
}
MediaQueue
<
MediaData
>
&
VideoQueue
(
)
{
return
mMaster
-
>
mVideoQueue
;
}
template
<
class
S
typename
.
.
.
Ts
>
auto
SetState
(
Ts
.
.
.
aArgs
)
-
>
decltype
(
ReturnTypeHelper
(
&
S
:
:
Enter
)
)
{
auto
master
=
mMaster
;
auto
s
=
new
S
(
master
)
;
MOZ_ASSERT
(
master
-
>
mState
!
=
s
-
>
GetState
(
)
|
|
master
-
>
mState
=
=
DECODER_STATE_SEEKING
)
;
SLOG
(
"
change
state
to
:
%
s
"
ToStateStr
(
s
-
>
GetState
(
)
)
)
;
Exit
(
)
;
master
-
>
mState
=
s
-
>
GetState
(
)
;
master
-
>
mStateObj
.
reset
(
s
)
;
return
s
-
>
Enter
(
Move
(
aArgs
)
.
.
.
)
;
}
Master
*
mMaster
;
}
;
class
MediaDecoderStateMachine
:
:
DecodeMetadataState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
DecodeMetadataState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
{
MOZ_ASSERT
(
!
mMaster
-
>
mVideoDecodeSuspended
)
;
MOZ_ASSERT
(
!
mMetadataRequest
.
Exists
(
)
)
;
SLOG
(
"
Dispatching
AsyncReadMetadata
"
)
;
Resource
(
)
-
>
SetReadMode
(
MediaCacheStream
:
:
MODE_METADATA
)
;
mMetadataRequest
.
Begin
(
Reader
(
)
-
>
ReadMetadata
(
)
-
>
Then
(
OwnerThread
(
)
__func__
[
this
]
(
MetadataHolder
*
aMetadata
)
{
OnMetadataRead
(
aMetadata
)
;
}
[
this
]
(
const
MediaResult
&
aError
)
{
OnMetadataNotRead
(
aError
)
;
}
)
)
;
}
void
Exit
(
)
override
{
mMetadataRequest
.
DisconnectIfExists
(
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_DECODING_METADATA
;
}
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
HandleSeek
(
SeekTarget
aTarget
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Can
'
t
seek
while
decoding
metadata
.
"
)
;
return
MediaDecoder
:
:
SeekPromise
:
:
CreateAndReject
(
true
__func__
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandleResumeVideoDecoding
(
)
override
{
MOZ_ASSERT
(
false
"
Shouldn
'
t
have
suspended
video
decoding
.
"
)
;
}
private
:
void
OnMetadataRead
(
MetadataHolder
*
aMetadata
)
;
void
OnMetadataNotRead
(
const
MediaResult
&
aError
)
{
mMetadataRequest
.
Complete
(
)
;
SWARN
(
"
Decode
metadata
failed
shutting
down
decoder
"
)
;
mMaster
-
>
DecodeError
(
aError
)
;
}
MozPromiseRequestHolder
<
MediaDecoderReader
:
:
MetadataPromise
>
mMetadataRequest
;
}
;
class
MediaDecoderStateMachine
:
:
WaitForCDMState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
WaitForCDMState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
{
MOZ_ASSERT
(
!
mMaster
-
>
mVideoDecodeSuspended
)
;
}
void
Exit
(
)
override
{
mPendingSeek
.
RejectIfExists
(
__func__
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_WAIT_FOR_CDM
;
}
void
HandleCDMProxyReady
(
)
override
;
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
HandleSeek
(
SeekTarget
aTarget
)
override
{
SLOG
(
"
Not
Enough
Data
to
seek
at
this
stage
queuing
seek
"
)
;
mPendingSeek
.
RejectIfExists
(
__func__
)
;
mPendingSeek
.
mTarget
=
aTarget
;
return
mPendingSeek
.
mPromise
.
Ensure
(
__func__
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandleResumeVideoDecoding
(
)
override
{
MOZ_ASSERT
(
false
"
Shouldn
'
t
have
suspended
video
decoding
.
"
)
;
}
private
:
SeekJob
mPendingSeek
;
}
;
class
MediaDecoderStateMachine
:
:
DormantState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
DormantState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
{
if
(
mMaster
-
>
IsPlaying
(
)
)
{
mMaster
-
>
StopPlayback
(
)
;
}
auto
t
=
mMaster
-
>
mMediaSink
-
>
IsStarted
(
)
?
mMaster
-
>
GetClock
(
)
:
mMaster
-
>
GetMediaTime
(
)
;
mPendingSeek
.
mTarget
=
SeekTarget
(
t
SeekTarget
:
:
Accurate
)
;
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
x
=
mPendingSeek
.
mPromise
.
Ensure
(
__func__
)
;
mMaster
-
>
Reset
(
)
;
mMaster
-
>
mReader
-
>
ReleaseResources
(
)
;
}
void
Exit
(
)
override
{
mPendingSeek
.
RejectIfExists
(
__func__
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_DORMANT
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandleResumeVideoDecoding
(
)
override
{
}
void
HandlePlayStateChanged
(
MediaDecoder
:
:
PlayState
aPlayState
)
override
;
private
:
SeekJob
mPendingSeek
;
}
;
class
MediaDecoderStateMachine
:
:
DecodingFirstFrameState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
DecodingFirstFrameState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
;
State
GetState
(
)
const
override
{
return
DECODER_STATE_DECODING_FIRSTFRAME
;
}
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
override
{
mMaster
-
>
Push
(
aAudio
)
;
MaybeFinishDecodeFirstFrame
(
)
;
}
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
override
{
mMaster
-
>
Push
(
aVideo
)
;
MaybeFinishDecodeFirstFrame
(
)
;
}
void
HandleEndOfStream
(
)
override
{
MaybeFinishDecodeFirstFrame
(
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandleResumeVideoDecoding
(
)
override
{
MOZ_ASSERT
(
false
"
Shouldn
'
t
have
suspended
video
decoding
.
"
)
;
}
private
:
void
MaybeFinishDecodeFirstFrame
(
)
;
}
;
class
MediaDecoderStateMachine
:
:
DecodingState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
DecodingState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
mDormantTimer
(
OwnerThread
(
)
)
{
}
void
Enter
(
)
;
void
Exit
(
)
override
{
if
(
!
mDecodeStartTime
.
IsNull
(
)
)
{
TimeDuration
decodeDuration
=
TimeStamp
:
:
Now
(
)
-
mDecodeStartTime
;
SLOG
(
"
Exiting
DECODING
decoded
for
%
.
3lfs
"
decodeDuration
.
ToSeconds
(
)
)
;
}
mDormantTimer
.
Reset
(
)
;
}
void
Step
(
)
override
{
if
(
mMaster
-
>
mPlayState
!
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
&
&
mMaster
-
>
IsPlaying
(
)
)
{
mMaster
-
>
StopPlayback
(
)
;
}
if
(
!
mIsPrerolling
)
{
mMaster
-
>
MaybeStartPlayback
(
)
;
}
mMaster
-
>
UpdatePlaybackPositionPeriodically
(
)
;
MOZ_ASSERT
(
!
mMaster
-
>
IsPlaying
(
)
|
|
mMaster
-
>
IsStateMachineScheduled
(
)
"
Must
have
timer
scheduled
"
)
;
MaybeStartBuffering
(
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_DECODING
;
}
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
override
{
mMaster
-
>
Push
(
aAudio
)
;
MaybeStopPrerolling
(
)
;
}
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
override
{
mMaster
-
>
Push
(
aVideo
)
;
MaybeStopPrerolling
(
)
;
CheckSlowDecoding
(
aDecodeStart
)
;
}
void
HandleEndOfStream
(
)
override
;
void
HandleWaitingForData
(
)
override
{
MaybeStopPrerolling
(
)
;
}
void
HandleAudioCaptured
(
)
override
{
MaybeStopPrerolling
(
)
;
mMaster
-
>
ScheduleStateMachine
(
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
if
(
mMaster
-
>
HasVideo
(
)
)
{
mMaster
-
>
mVideoDecodeSuspended
=
true
;
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
EnterVideoSuspend
)
;
Reader
(
)
-
>
SetVideoBlankDecode
(
true
)
;
}
}
void
HandlePlayStateChanged
(
MediaDecoder
:
:
PlayState
aPlayState
)
override
{
if
(
aPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
)
{
mMaster
-
>
ScheduleStateMachine
(
)
;
}
if
(
aPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PAUSED
)
{
StartDormantTimer
(
)
;
}
else
{
mDormantTimer
.
Reset
(
)
;
}
}
void
DumpDebugInfo
(
)
override
{
SDUMP
(
"
mIsPrerolling
=
%
d
"
mIsPrerolling
)
;
}
private
:
void
MaybeStartBuffering
(
)
;
void
CheckSlowDecoding
(
TimeStamp
aDecodeStart
)
{
if
(
Reader
(
)
-
>
IsAsync
(
)
)
{
return
;
}
TimeDuration
decodeTime
=
TimeStamp
:
:
Now
(
)
-
aDecodeStart
;
int64_t
adjustedTime
=
THRESHOLD_FACTOR
*
DurationToUsecs
(
decodeTime
)
;
if
(
adjustedTime
>
mMaster
-
>
mLowAudioThresholdUsecs
&
&
!
mMaster
-
>
HasLowBufferedData
(
)
)
{
mMaster
-
>
mLowAudioThresholdUsecs
=
std
:
:
min
(
adjustedTime
mMaster
-
>
mAmpleAudioThresholdUsecs
)
;
mMaster
-
>
mAmpleAudioThresholdUsecs
=
std
:
:
max
(
THRESHOLD_FACTOR
*
mMaster
-
>
mLowAudioThresholdUsecs
mMaster
-
>
mAmpleAudioThresholdUsecs
)
;
SLOG
(
"
Slow
video
decode
set
"
"
mLowAudioThresholdUsecs
=
%
lld
"
"
mAmpleAudioThresholdUsecs
=
%
lld
"
mMaster
-
>
mLowAudioThresholdUsecs
mMaster
-
>
mAmpleAudioThresholdUsecs
)
;
}
}
bool
DonePrerollingAudio
(
)
{
return
!
mMaster
-
>
IsAudioDecoding
(
)
|
|
mMaster
-
>
GetDecodedAudioDuration
(
)
>
=
mMaster
-
>
AudioPrerollUsecs
(
)
*
mMaster
-
>
mPlaybackRate
;
}
bool
DonePrerollingVideo
(
)
{
return
!
mMaster
-
>
IsVideoDecoding
(
)
|
|
static_cast
<
uint32_t
>
(
mMaster
-
>
VideoQueue
(
)
.
GetSize
(
)
)
>
=
mMaster
-
>
VideoPrerollFrames
(
)
*
mMaster
-
>
mPlaybackRate
+
1
;
}
void
MaybeStopPrerolling
(
)
{
if
(
mIsPrerolling
&
&
(
DonePrerollingAudio
(
)
|
|
Reader
(
)
-
>
IsWaitingAudioData
(
)
)
&
&
(
DonePrerollingVideo
(
)
|
|
Reader
(
)
-
>
IsWaitingVideoData
(
)
)
)
{
mIsPrerolling
=
false
;
mMaster
-
>
ScheduleStateMachine
(
)
;
}
}
void
EnterDormant
(
)
{
SetState
<
DormantState
>
(
)
;
}
void
StartDormantTimer
(
)
{
if
(
!
mMaster
-
>
mMediaSeekable
)
{
return
;
}
auto
timeout
=
MediaPrefs
:
:
DormantOnPauseTimeout
(
)
;
if
(
timeout
<
0
)
{
return
;
}
else
if
(
timeout
=
=
0
)
{
EnterDormant
(
)
;
return
;
}
TimeStamp
target
=
TimeStamp
:
:
Now
(
)
+
TimeDuration
:
:
FromMilliseconds
(
timeout
)
;
mDormantTimer
.
Ensure
(
target
[
this
]
(
)
{
mDormantTimer
.
CompleteRequest
(
)
;
EnterDormant
(
)
;
}
[
this
]
(
)
{
mDormantTimer
.
CompleteRequest
(
)
;
}
)
;
}
TimeStamp
mDecodeStartTime
;
bool
mIsPrerolling
=
true
;
DelayedScheduler
mDormantTimer
;
}
;
class
MediaDecoderStateMachine
:
:
SeekingState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
SeekingState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
Enter
(
SeekJob
aSeekJob
EventVisibility
aVisibility
)
{
mSeekJob
=
Move
(
aSeekJob
)
;
mVisibility
=
aVisibility
;
if
(
mMaster
-
>
mVideoDecodeSuspended
)
{
mMaster
-
>
mVideoDecodeSuspended
=
false
;
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
ExitVideoSuspend
)
;
Reader
(
)
-
>
SetVideoBlankDecode
(
false
)
;
}
mMaster
-
>
CancelMediaDecoderReaderWrapperCallback
(
)
;
if
(
mSeekJob
.
mTarget
.
IsAccurate
(
)
|
|
mSeekJob
.
mTarget
.
IsFast
(
)
)
{
mSeekTask
=
new
AccurateSeekTask
(
mMaster
-
>
mDecoderID
OwnerThread
(
)
Reader
(
)
mSeekJob
.
mTarget
Info
(
)
mMaster
-
>
Duration
(
)
mMaster
-
>
GetMediaTime
(
)
)
;
}
else
if
(
mSeekJob
.
mTarget
.
IsNextFrame
(
)
)
{
mSeekTask
=
new
NextFrameSeekTask
(
mMaster
-
>
mDecoderID
OwnerThread
(
)
Reader
(
)
mSeekJob
.
mTarget
Info
(
)
mMaster
-
>
Duration
(
)
mMaster
-
>
GetMediaTime
(
)
AudioQueue
(
)
VideoQueue
(
)
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Cannot
handle
this
seek
task
.
"
)
;
}
if
(
!
mSeekJob
.
mTarget
.
IsVideoOnly
(
)
)
{
mMaster
-
>
StopPlayback
(
)
;
}
mMaster
-
>
UpdatePlaybackPositionInternal
(
mSeekTask
-
>
GetSeekTarget
(
)
.
GetTime
(
)
.
ToMicroseconds
(
)
)
;
if
(
mVisibility
=
=
EventVisibility
:
:
Observable
)
{
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
SeekStarted
)
;
mMaster
-
>
UpdateNextFrameStatus
(
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE_SEEKING
)
;
}
if
(
mSeekTask
-
>
NeedToResetMDSM
(
)
)
{
if
(
mSeekJob
.
mTarget
.
IsVideoOnly
(
)
)
{
mMaster
-
>
Reset
(
TrackInfo
:
:
kVideoTrack
)
;
}
else
{
mMaster
-
>
Reset
(
)
;
}
}
mSeekTaskRequest
.
Begin
(
mSeekTask
-
>
Seek
(
mMaster
-
>
Duration
(
)
)
-
>
Then
(
OwnerThread
(
)
__func__
[
this
]
(
const
SeekTaskResolveValue
&
aValue
)
{
OnSeekTaskResolved
(
aValue
)
;
}
[
this
]
(
const
SeekTaskRejectValue
&
aValue
)
{
OnSeekTaskRejected
(
aValue
)
;
}
)
)
;
return
mSeekJob
.
mPromise
.
Ensure
(
__func__
)
;
}
void
Exit
(
)
override
{
mSeekTaskRequest
.
DisconnectIfExists
(
)
;
mSeekJob
.
RejectIfExists
(
__func__
)
;
mSeekTask
-
>
Discard
(
)
;
mMaster
-
>
SetMediaDecoderReaderWrapperCallback
(
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_SEEKING
;
}
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
override
{
MOZ_ASSERT
(
false
)
;
}
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
override
{
MOZ_ASSERT
(
false
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandleResumeVideoDecoding
(
)
override
{
MOZ_ASSERT
(
false
"
Shouldn
'
t
have
suspended
video
decoding
.
"
)
;
}
private
:
void
OnSeekTaskResolved
(
const
SeekTaskResolveValue
&
aValue
)
{
mSeekTaskRequest
.
Complete
(
)
;
if
(
aValue
.
mSeekedAudioData
)
{
mMaster
-
>
Push
(
aValue
.
mSeekedAudioData
)
;
mMaster
-
>
mDecodedAudioEndTime
=
std
:
:
max
(
aValue
.
mSeekedAudioData
-
>
GetEndTime
(
)
mMaster
-
>
mDecodedAudioEndTime
)
;
}
if
(
aValue
.
mSeekedVideoData
)
{
mMaster
-
>
Push
(
aValue
.
mSeekedVideoData
)
;
mMaster
-
>
mDecodedVideoEndTime
=
std
:
:
max
(
aValue
.
mSeekedVideoData
-
>
GetEndTime
(
)
mMaster
-
>
mDecodedVideoEndTime
)
;
}
if
(
aValue
.
mIsAudioQueueFinished
)
{
AudioQueue
(
)
.
Finish
(
)
;
}
if
(
aValue
.
mIsVideoQueueFinished
)
{
VideoQueue
(
)
.
Finish
(
)
;
}
SeekCompleted
(
)
;
}
void
OnSeekTaskRejected
(
const
SeekTaskRejectValue
&
aValue
)
{
mSeekTaskRequest
.
Complete
(
)
;
if
(
aValue
.
mIsAudioQueueFinished
)
{
AudioQueue
(
)
.
Finish
(
)
;
}
if
(
aValue
.
mIsVideoQueueFinished
)
{
VideoQueue
(
)
.
Finish
(
)
;
}
mMaster
-
>
DecodeError
(
aValue
.
mError
)
;
}
void
SeekCompleted
(
)
;
SeekJob
mSeekJob
;
EventVisibility
mVisibility
=
EventVisibility
:
:
Observable
;
MozPromiseRequestHolder
<
SeekTask
:
:
SeekTaskPromise
>
mSeekTaskRequest
;
RefPtr
<
SeekTask
>
mSeekTask
;
}
;
class
MediaDecoderStateMachine
:
:
BufferingState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
BufferingState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
{
if
(
mMaster
-
>
IsPlaying
(
)
)
{
mMaster
-
>
StopPlayback
(
)
;
}
mBufferingStart
=
TimeStamp
:
:
Now
(
)
;
MediaStatistics
stats
=
mMaster
-
>
GetStatistics
(
)
;
SLOG
(
"
Playback
rate
:
%
.
1lfKB
/
s
%
s
download
rate
:
%
.
1lfKB
/
s
%
s
"
stats
.
mPlaybackRate
/
1024
stats
.
mPlaybackRateReliable
?
"
"
:
"
(
unreliable
)
"
stats
.
mDownloadRate
/
1024
stats
.
mDownloadRateReliable
?
"
"
:
"
(
unreliable
)
"
)
;
mMaster
-
>
ScheduleStateMachineIn
(
USECS_PER_S
)
;
mMaster
-
>
UpdateNextFrameStatus
(
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE_BUFFERING
)
;
}
void
Step
(
)
override
;
State
GetState
(
)
const
override
{
return
DECODER_STATE_BUFFERING
;
}
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
override
{
mMaster
-
>
Push
(
aAudio
)
;
mMaster
-
>
ScheduleStateMachine
(
)
;
}
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
override
{
mMaster
-
>
Push
(
aVideo
)
;
mMaster
-
>
ScheduleStateMachine
(
)
;
}
void
HandleEndOfStream
(
)
override
;
void
HandleVideoSuspendTimeout
(
)
override
{
if
(
mMaster
-
>
HasVideo
(
)
)
{
mMaster
-
>
mVideoDecodeSuspended
=
true
;
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
EnterVideoSuspend
)
;
Reader
(
)
-
>
SetVideoBlankDecode
(
true
)
;
}
}
private
:
TimeStamp
mBufferingStart
;
const
uint32_t
mBufferingWait
=
15
;
}
;
class
MediaDecoderStateMachine
:
:
CompletedState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
CompletedState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
void
Enter
(
)
{
Reader
(
)
-
>
ReleaseResources
(
)
;
bool
hasNextFrame
=
(
!
mMaster
-
>
HasAudio
(
)
|
|
!
mMaster
-
>
mAudioCompleted
)
&
&
(
!
mMaster
-
>
HasVideo
(
)
|
|
!
mMaster
-
>
mVideoCompleted
)
;
mMaster
-
>
UpdateNextFrameStatus
(
hasNextFrame
?
MediaDecoderOwner
:
:
NEXT_FRAME_AVAILABLE
:
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE
)
;
Step
(
)
;
}
void
Exit
(
)
override
{
mSentPlaybackEndedEvent
=
false
;
}
void
Step
(
)
override
{
if
(
mMaster
-
>
mPlayState
!
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
&
&
mMaster
-
>
IsPlaying
(
)
)
{
mMaster
-
>
StopPlayback
(
)
;
}
if
(
(
mMaster
-
>
HasVideo
(
)
&
&
!
mMaster
-
>
mVideoCompleted
)
|
|
(
mMaster
-
>
HasAudio
(
)
&
&
!
mMaster
-
>
mAudioCompleted
)
)
{
mMaster
-
>
MaybeStartPlayback
(
)
;
mMaster
-
>
UpdatePlaybackPositionPeriodically
(
)
;
MOZ_ASSERT
(
!
mMaster
-
>
IsPlaying
(
)
|
|
mMaster
-
>
IsStateMachineScheduled
(
)
"
Must
have
timer
scheduled
"
)
;
return
;
}
mMaster
-
>
StopPlayback
(
)
;
if
(
!
mSentPlaybackEndedEvent
)
{
int64_t
clockTime
=
std
:
:
max
(
mMaster
-
>
AudioEndTime
(
)
mMaster
-
>
VideoEndTime
(
)
)
;
clockTime
=
std
:
:
max
(
int64_t
(
0
)
std
:
:
max
(
clockTime
mMaster
-
>
Duration
(
)
.
ToMicroseconds
(
)
)
)
;
mMaster
-
>
UpdatePlaybackPosition
(
clockTime
)
;
mMaster
-
>
UpdateNextFrameStatus
(
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE
)
;
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
PlaybackEnded
)
;
mSentPlaybackEndedEvent
=
true
;
mMaster
-
>
StopMediaSink
(
)
;
}
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_COMPLETED
;
}
void
HandleAudioCaptured
(
)
override
{
mMaster
-
>
ScheduleStateMachine
(
)
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
}
void
HandlePlayStateChanged
(
MediaDecoder
:
:
PlayState
aPlayState
)
override
{
if
(
aPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
)
{
mMaster
-
>
ScheduleStateMachine
(
)
;
}
}
private
:
bool
mSentPlaybackEndedEvent
=
false
;
}
;
class
MediaDecoderStateMachine
:
:
ShutdownState
:
public
MediaDecoderStateMachine
:
:
StateObject
{
public
:
explicit
ShutdownState
(
Master
*
aPtr
)
:
StateObject
(
aPtr
)
{
}
RefPtr
<
ShutdownPromise
>
Enter
(
)
;
void
Exit
(
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Shouldn
'
t
escape
the
SHUTDOWN
state
.
"
)
;
}
State
GetState
(
)
const
override
{
return
DECODER_STATE_SHUTDOWN
;
}
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
HandleSeek
(
SeekTarget
aTarget
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Can
'
t
seek
in
shutdown
state
.
"
)
;
return
MediaDecoder
:
:
SeekPromise
:
:
CreateAndReject
(
true
__func__
)
;
}
RefPtr
<
ShutdownPromise
>
HandleShutdown
(
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Already
shutting
down
.
"
)
;
return
nullptr
;
}
void
HandleVideoSuspendTimeout
(
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Already
shutting
down
.
"
)
;
}
void
HandleResumeVideoDecoding
(
)
override
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Already
shutting
down
.
"
)
;
}
}
;
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
MediaDecoderStateMachine
:
:
StateObject
:
:
HandleSeek
(
SeekTarget
aTarget
)
{
SLOG
(
"
Changed
state
to
SEEKING
(
to
%
lld
)
"
aTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
)
;
SeekJob
seekJob
;
seekJob
.
mTarget
=
aTarget
;
return
SetState
<
SeekingState
>
(
Move
(
seekJob
)
EventVisibility
:
:
Observable
)
;
}
RefPtr
<
ShutdownPromise
>
MediaDecoderStateMachine
:
:
StateObject
:
:
HandleShutdown
(
)
{
return
SetState
<
ShutdownState
>
(
)
;
}
static
void
ReportRecoveryTelemetry
(
const
TimeStamp
&
aRecoveryStart
const
MediaInfo
&
aMediaInfo
bool
aIsHardwareAccelerated
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
aMediaInfo
.
HasVideo
(
)
)
{
return
;
}
nsCString
key
(
aMediaInfo
.
HasAudio
(
)
?
"
AV
"
:
"
V
"
)
;
key
.
AppendASCII
(
aIsHardwareAccelerated
?
"
(
hw
)
"
:
"
"
)
;
static
const
struct
{
int32_t
mH
;
const
char
*
mRes
;
}
sResolutions
[
]
=
{
{
240
"
0
-
240
"
}
{
480
"
241
-
480
"
}
{
720
"
481
-
720
"
}
{
1080
"
721
-
1080
"
}
{
2160
"
1081
-
2160
"
}
}
;
const
char
*
resolution
=
"
2161
+
"
;
int32_t
height
=
aMediaInfo
.
mVideo
.
mImage
.
height
;
for
(
const
auto
&
res
:
sResolutions
)
{
if
(
height
<
=
res
.
mH
)
{
resolution
=
res
.
mRes
;
break
;
}
}
key
.
AppendASCII
(
resolution
)
;
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
aRecoveryStart
;
double
duration_ms
=
duration
.
ToMilliseconds
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
VIDEO_SUSPEND_RECOVERY_TIME_MS
key
uint32_t
(
duration_ms
+
0
.
5
)
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
VIDEO_SUSPEND_RECOVERY_TIME_MS
NS_LITERAL_CSTRING
(
"
All
"
)
uint32_t
(
duration_ms
+
0
.
5
)
)
;
}
void
MediaDecoderStateMachine
:
:
StateObject
:
:
HandleResumeVideoDecoding
(
)
{
MOZ_ASSERT
(
mMaster
-
>
mVideoDecodeSuspended
)
;
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
auto
&
info
=
Info
(
)
;
bool
hw
=
Reader
(
)
-
>
VideoIsHardwareAccelerated
(
)
;
SeekJob
seekJob
;
const
SeekTarget
:
:
Type
type
=
mMaster
-
>
HasAudio
(
)
?
SeekTarget
:
:
Type
:
:
Accurate
:
SeekTarget
:
:
Type
:
:
PrevSyncPoint
;
seekJob
.
mTarget
=
SeekTarget
(
mMaster
-
>
GetMediaTime
(
)
type
true
)
;
SetState
<
SeekingState
>
(
Move
(
seekJob
)
EventVisibility
:
:
Suppressed
)
-
>
Then
(
AbstractThread
:
:
MainThread
(
)
__func__
[
start
info
hw
]
(
)
{
ReportRecoveryTelemetry
(
start
info
hw
)
;
}
[
]
(
)
{
}
)
;
}
void
MediaDecoderStateMachine
:
:
DecodeMetadataState
:
:
OnMetadataRead
(
MetadataHolder
*
aMetadata
)
{
mMetadataRequest
.
Complete
(
)
;
Resource
(
)
-
>
SetReadMode
(
MediaCacheStream
:
:
MODE_PLAYBACK
)
;
mMaster
-
>
mInfo
=
Some
(
aMetadata
-
>
mInfo
)
;
mMaster
-
>
mMetadataTags
=
aMetadata
-
>
mTags
.
forget
(
)
;
mMaster
-
>
mMediaSeekable
=
Info
(
)
.
mMediaSeekable
;
mMaster
-
>
mMediaSeekableOnlyInBufferedRanges
=
Info
(
)
.
mMediaSeekableOnlyInBufferedRanges
;
if
(
Info
(
)
.
mMetadataDuration
.
isSome
(
)
)
{
mMaster
-
>
RecomputeDuration
(
)
;
}
else
if
(
Info
(
)
.
mUnadjustedMetadataEndTime
.
isSome
(
)
)
{
const
TimeUnit
unadjusted
=
Info
(
)
.
mUnadjustedMetadataEndTime
.
ref
(
)
;
const
TimeUnit
adjustment
=
Info
(
)
.
mStartTime
;
mMaster
-
>
mInfo
-
>
mMetadataDuration
.
emplace
(
unadjusted
-
adjustment
)
;
mMaster
-
>
RecomputeDuration
(
)
;
}
if
(
mMaster
-
>
mDuration
.
Ref
(
)
.
isNothing
(
)
)
{
mMaster
-
>
mDuration
=
Some
(
TimeUnit
:
:
FromInfinity
(
)
)
;
}
if
(
mMaster
-
>
HasVideo
(
)
)
{
SLOG
(
"
Video
decode
isAsync
=
%
d
HWAccel
=
%
d
videoQueueSize
=
%
d
"
Reader
(
)
-
>
IsAsync
(
)
Reader
(
)
-
>
VideoIsHardwareAccelerated
(
)
mMaster
-
>
GetAmpleVideoFrames
(
)
)
;
}
MOZ_ASSERT
(
mMaster
-
>
mDuration
.
Ref
(
)
.
isSome
(
)
)
;
mMaster
-
>
EnqueueLoadedMetadataEvent
(
)
;
if
(
Info
(
)
.
IsEncrypted
(
)
&
&
!
mMaster
-
>
mCDMProxy
)
{
SetState
<
WaitForCDMState
>
(
)
;
}
else
{
SetState
<
DecodingFirstFrameState
>
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DormantState
:
:
HandlePlayStateChanged
(
MediaDecoder
:
:
PlayState
aPlayState
)
{
if
(
aPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
)
{
MOZ_ASSERT
(
!
Info
(
)
.
IsEncrypted
(
)
|
|
mMaster
-
>
mCDMProxy
)
;
MOZ_ASSERT
(
mMaster
-
>
mSentFirstFrameLoadedEvent
)
;
SetState
<
SeekingState
>
(
Move
(
mPendingSeek
)
EventVisibility
:
:
Suppressed
)
;
}
}
void
MediaDecoderStateMachine
:
:
WaitForCDMState
:
:
HandleCDMProxyReady
(
)
{
if
(
mPendingSeek
.
Exists
(
)
)
{
SetState
<
SeekingState
>
(
Move
(
mPendingSeek
)
EventVisibility
:
:
Observable
)
;
}
else
{
SetState
<
DecodingFirstFrameState
>
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DecodingFirstFrameState
:
:
Enter
(
)
{
if
(
mMaster
-
>
mSentFirstFrameLoadedEvent
)
{
SetState
<
DecodingState
>
(
)
;
return
;
}
MOZ_ASSERT
(
!
mMaster
-
>
mVideoDecodeSuspended
)
;
mMaster
-
>
DispatchDecodeTasksIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
DecodingFirstFrameState
:
:
MaybeFinishDecodeFirstFrame
(
)
{
MOZ_ASSERT
(
!
mMaster
-
>
mSentFirstFrameLoadedEvent
)
;
if
(
(
mMaster
-
>
IsAudioDecoding
(
)
&
&
AudioQueue
(
)
.
GetSize
(
)
=
=
0
)
|
|
(
mMaster
-
>
IsVideoDecoding
(
)
&
&
VideoQueue
(
)
.
GetSize
(
)
=
=
0
)
)
{
return
;
}
mMaster
-
>
FinishDecodeFirstFrame
(
)
;
SetState
<
DecodingState
>
(
)
;
}
void
MediaDecoderStateMachine
:
:
DecodingState
:
:
Enter
(
)
{
MOZ_ASSERT
(
mMaster
-
>
mSentFirstFrameLoadedEvent
)
;
if
(
!
mMaster
-
>
mIsVisible
&
&
!
mMaster
-
>
mVideoDecodeSuspendTimer
.
IsScheduled
(
)
&
&
!
mMaster
-
>
mVideoDecodeSuspended
)
{
HandleVideoSuspendTimeout
(
)
;
}
if
(
mMaster
-
>
CheckIfDecodeComplete
(
)
)
{
SetState
<
CompletedState
>
(
)
;
return
;
}
mMaster
-
>
UpdateNextFrameStatus
(
MediaDecoderOwner
:
:
NEXT_FRAME_AVAILABLE
)
;
mDecodeStartTime
=
TimeStamp
:
:
Now
(
)
;
MaybeStopPrerolling
(
)
;
mMaster
-
>
DispatchDecodeTasksIfNeeded
(
)
;
mMaster
-
>
ScheduleStateMachine
(
)
;
if
(
mMaster
-
>
mPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PAUSED
)
{
StartDormantTimer
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DecodingState
:
:
HandleEndOfStream
(
)
{
if
(
mMaster
-
>
CheckIfDecodeComplete
(
)
)
{
SetState
<
CompletedState
>
(
)
;
}
else
{
MaybeStopPrerolling
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DecodingState
:
:
MaybeStartBuffering
(
)
{
MOZ_ASSERT
(
mMaster
-
>
mSentFirstFrameLoadedEvent
)
;
if
(
mMaster
-
>
mPlayState
!
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
)
{
return
;
}
if
(
!
mMaster
-
>
IsPlaying
(
)
)
{
return
;
}
bool
shouldBuffer
;
if
(
Reader
(
)
-
>
UseBufferingHeuristics
(
)
)
{
shouldBuffer
=
IsExpectingMoreData
(
)
&
&
mMaster
-
>
HasLowDecodedData
(
)
&
&
mMaster
-
>
HasLowBufferedData
(
)
;
}
else
{
MOZ_ASSERT
(
Reader
(
)
-
>
IsWaitForDataSupported
(
)
)
;
shouldBuffer
=
(
mMaster
-
>
OutOfDecodedAudio
(
)
&
&
Reader
(
)
-
>
IsWaitingAudioData
(
)
)
|
|
(
mMaster
-
>
OutOfDecodedVideo
(
)
&
&
Reader
(
)
-
>
IsWaitingVideoData
(
)
)
;
}
if
(
shouldBuffer
)
{
SetState
<
BufferingState
>
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
SeekingState
:
:
SeekCompleted
(
)
{
const
int64_t
newCurrentTime
=
mSeekTask
-
>
CalculateNewCurrentTime
(
)
;
bool
isLiveStream
=
Resource
(
)
-
>
IsLiveStream
(
)
;
if
(
newCurrentTime
=
=
mMaster
-
>
Duration
(
)
.
ToMicroseconds
(
)
&
&
!
isLiveStream
)
{
AudioQueue
(
)
.
Finish
(
)
;
VideoQueue
(
)
.
Finish
(
)
;
mMaster
-
>
mAudioCompleted
=
true
;
mMaster
-
>
mVideoCompleted
=
true
;
}
mSeekJob
.
Resolve
(
__func__
)
;
if
(
!
mMaster
-
>
mSentFirstFrameLoadedEvent
)
{
MOZ_ASSERT
(
Reader
(
)
-
>
ForceZeroStartTime
(
)
)
;
mMaster
-
>
FinishDecodeFirstFrame
(
)
;
}
if
(
!
mSeekJob
.
mTarget
.
IsVideoOnly
(
)
)
{
mMaster
-
>
UpdatePlaybackPositionInternal
(
newCurrentTime
)
;
}
SLOG
(
"
Seek
completed
mCurrentPosition
=
%
lld
"
mMaster
-
>
mCurrentPosition
.
Ref
(
)
)
;
if
(
mMaster
-
>
VideoQueue
(
)
.
PeekFront
(
)
)
{
mMaster
-
>
mMediaSink
-
>
Redraw
(
Info
(
)
.
mVideo
)
;
mMaster
-
>
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
Invalidate
)
;
}
SetState
<
DecodingState
>
(
)
;
}
void
MediaDecoderStateMachine
:
:
BufferingState
:
:
Step
(
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
MOZ_ASSERT
(
!
mBufferingStart
.
IsNull
(
)
"
Must
know
buffering
start
time
.
"
)
;
if
(
Reader
(
)
-
>
UseBufferingHeuristics
(
)
)
{
TimeDuration
elapsed
=
now
-
mBufferingStart
;
bool
isLiveStream
=
Resource
(
)
-
>
IsLiveStream
(
)
;
if
(
(
isLiveStream
|
|
!
mMaster
-
>
CanPlayThrough
(
)
)
&
&
elapsed
<
TimeDuration
:
:
FromSeconds
(
mBufferingWait
*
mMaster
-
>
mPlaybackRate
)
&
&
mMaster
-
>
HasLowBufferedData
(
mBufferingWait
*
USECS_PER_S
)
&
&
IsExpectingMoreData
(
)
)
{
SLOG
(
"
Buffering
:
wait
%
ds
timeout
in
%
.
3lfs
"
mBufferingWait
mBufferingWait
-
elapsed
.
ToSeconds
(
)
)
;
mMaster
-
>
ScheduleStateMachineIn
(
USECS_PER_S
)
;
return
;
}
}
else
if
(
mMaster
-
>
OutOfDecodedAudio
(
)
|
|
mMaster
-
>
OutOfDecodedVideo
(
)
)
{
MOZ_ASSERT
(
Reader
(
)
-
>
IsWaitForDataSupported
(
)
"
Don
'
t
yet
have
a
strategy
for
non
-
heuristic
+
non
-
WaitForData
"
)
;
mMaster
-
>
DispatchDecodeTasksIfNeeded
(
)
;
MOZ_ASSERT
(
mMaster
-
>
mMinimizePreroll
|
|
!
mMaster
-
>
OutOfDecodedAudio
(
)
|
|
Reader
(
)
-
>
IsRequestingAudioData
(
)
|
|
Reader
(
)
-
>
IsWaitingAudioData
(
)
)
;
MOZ_ASSERT
(
mMaster
-
>
mMinimizePreroll
|
|
!
mMaster
-
>
OutOfDecodedVideo
(
)
|
|
Reader
(
)
-
>
IsRequestingVideoData
(
)
|
|
Reader
(
)
-
>
IsWaitingVideoData
(
)
)
;
SLOG
(
"
In
buffering
mode
waiting
to
be
notified
:
outOfAudio
:
%
d
"
"
mAudioStatus
:
%
s
outOfVideo
:
%
d
mVideoStatus
:
%
s
"
mMaster
-
>
OutOfDecodedAudio
(
)
mMaster
-
>
AudioRequestStatus
(
)
mMaster
-
>
OutOfDecodedVideo
(
)
mMaster
-
>
VideoRequestStatus
(
)
)
;
return
;
}
SLOG
(
"
Buffered
for
%
.
3lfs
"
(
now
-
mBufferingStart
)
.
ToSeconds
(
)
)
;
SetState
<
DecodingState
>
(
)
;
}
void
MediaDecoderStateMachine
:
:
BufferingState
:
:
HandleEndOfStream
(
)
{
if
(
mMaster
-
>
CheckIfDecodeComplete
(
)
)
{
SetState
<
CompletedState
>
(
)
;
}
else
{
mMaster
-
>
ScheduleStateMachine
(
)
;
}
}
RefPtr
<
ShutdownPromise
>
MediaDecoderStateMachine
:
:
ShutdownState
:
:
Enter
(
)
{
auto
master
=
mMaster
;
master
-
>
mIsShutdown
=
true
;
master
-
>
mDelayedScheduler
.
Reset
(
)
;
master
-
>
mVideoDecodeSuspendTimer
.
Reset
(
)
;
master
-
>
mCDMProxyPromise
.
DisconnectIfExists
(
)
;
if
(
master
-
>
IsPlaying
(
)
)
{
master
-
>
StopPlayback
(
)
;
}
master
-
>
CancelMediaDecoderReaderWrapperCallback
(
)
;
master
-
>
Reset
(
)
;
master
-
>
mMediaSink
-
>
Shutdown
(
)
;
master
-
>
mAudioQueueListener
.
Disconnect
(
)
;
master
-
>
mVideoQueueListener
.
Disconnect
(
)
;
master
-
>
mMetadataManager
.
Disconnect
(
)
;
master
-
>
mOnMediaNotSeekable
.
Disconnect
(
)
;
master
-
>
mBuffered
.
DisconnectIfConnected
(
)
;
master
-
>
mEstimatedDuration
.
DisconnectIfConnected
(
)
;
master
-
>
mExplicitDuration
.
DisconnectIfConnected
(
)
;
master
-
>
mPlayState
.
DisconnectIfConnected
(
)
;
master
-
>
mNextPlayState
.
DisconnectIfConnected
(
)
;
master
-
>
mVolume
.
DisconnectIfConnected
(
)
;
master
-
>
mPreservesPitch
.
DisconnectIfConnected
(
)
;
master
-
>
mSameOriginMedia
.
DisconnectIfConnected
(
)
;
master
-
>
mMediaPrincipalHandle
.
DisconnectIfConnected
(
)
;
master
-
>
mPlaybackBytesPerSecond
.
DisconnectIfConnected
(
)
;
master
-
>
mPlaybackRateReliable
.
DisconnectIfConnected
(
)
;
master
-
>
mDecoderPosition
.
DisconnectIfConnected
(
)
;
master
-
>
mIsVisible
.
DisconnectIfConnected
(
)
;
master
-
>
mDuration
.
DisconnectAll
(
)
;
master
-
>
mIsShutdown
.
DisconnectAll
(
)
;
master
-
>
mNextFrameStatus
.
DisconnectAll
(
)
;
master
-
>
mCurrentPosition
.
DisconnectAll
(
)
;
master
-
>
mPlaybackOffset
.
DisconnectAll
(
)
;
master
-
>
mIsAudioDataAudible
.
DisconnectAll
(
)
;
master
-
>
mWatchManager
.
Shutdown
(
)
;
return
Reader
(
)
-
>
Shutdown
(
)
-
>
Then
(
OwnerThread
(
)
__func__
master
&
MediaDecoderStateMachine
:
:
FinishShutdown
&
MediaDecoderStateMachine
:
:
FinishShutdown
)
-
>
CompletionPromise
(
)
;
}
#
define
INIT_WATCHABLE
(
name
val
)
\
name
(
val
"
MediaDecoderStateMachine
:
:
"
#
name
)
#
define
INIT_MIRROR
(
name
val
)
\
name
(
mTaskQueue
val
"
MediaDecoderStateMachine
:
:
"
#
name
"
(
Mirror
)
"
)
#
define
INIT_CANONICAL
(
name
val
)
\
name
(
mTaskQueue
val
"
MediaDecoderStateMachine
:
:
"
#
name
"
(
Canonical
)
"
)
MediaDecoderStateMachine
:
:
MediaDecoderStateMachine
(
MediaDecoder
*
aDecoder
MediaDecoderReader
*
aReader
)
:
mDecoderID
(
aDecoder
)
mFrameStats
(
&
aDecoder
-
>
GetFrameStatistics
(
)
)
mVideoFrameContainer
(
aDecoder
-
>
GetVideoFrameContainer
(
)
)
mAudioChannel
(
aDecoder
-
>
GetAudioChannel
(
)
)
mTaskQueue
(
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
PLAYBACK
)
true
)
)
mWatchManager
(
this
mTaskQueue
)
mDispatchedStateMachine
(
false
)
mDelayedScheduler
(
mTaskQueue
)
mCurrentFrameID
(
0
)
INIT_WATCHABLE
(
mObservedDuration
TimeUnit
(
)
)
mFragmentEndTime
(
-
1
)
mReader
(
new
MediaDecoderReaderWrapper
(
mTaskQueue
aReader
)
)
mDecodedAudioEndTime
(
0
)
mDecodedVideoEndTime
(
0
)
mPlaybackRate
(
1
.
0
)
mLowAudioThresholdUsecs
(
detail
:
:
LOW_AUDIO_USECS
)
mAmpleAudioThresholdUsecs
(
detail
:
:
AMPLE_AUDIO_USECS
)
mAudioCaptured
(
false
)
mMinimizePreroll
(
false
)
mSentLoadedMetadataEvent
(
false
)
mSentFirstFrameLoadedEvent
(
false
)
mVideoDecodeSuspended
(
false
)
mVideoDecodeSuspendTimer
(
mTaskQueue
)
mOutputStreamManager
(
new
OutputStreamManager
(
)
)
mResource
(
aDecoder
-
>
GetResource
(
)
)
mAudioOffloading
(
false
)
INIT_MIRROR
(
mBuffered
TimeIntervals
(
)
)
INIT_MIRROR
(
mEstimatedDuration
NullableTimeUnit
(
)
)
INIT_MIRROR
(
mExplicitDuration
Maybe
<
double
>
(
)
)
INIT_MIRROR
(
mPlayState
MediaDecoder
:
:
PLAY_STATE_LOADING
)
INIT_MIRROR
(
mNextPlayState
MediaDecoder
:
:
PLAY_STATE_PAUSED
)
INIT_MIRROR
(
mVolume
1
.
0
)
INIT_MIRROR
(
mPreservesPitch
true
)
INIT_MIRROR
(
mSameOriginMedia
false
)
INIT_MIRROR
(
mMediaPrincipalHandle
PRINCIPAL_HANDLE_NONE
)
INIT_MIRROR
(
mPlaybackBytesPerSecond
0
.
0
)
INIT_MIRROR
(
mPlaybackRateReliable
true
)
INIT_MIRROR
(
mDecoderPosition
0
)
INIT_MIRROR
(
mIsVisible
true
)
INIT_CANONICAL
(
mDuration
NullableTimeUnit
(
)
)
INIT_CANONICAL
(
mIsShutdown
false
)
INIT_CANONICAL
(
mNextFrameStatus
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE
)
INIT_CANONICAL
(
mCurrentPosition
0
)
INIT_CANONICAL
(
mPlaybackOffset
0
)
INIT_CANONICAL
(
mIsAudioDataAudible
false
)
{
MOZ_COUNT_CTOR
(
MediaDecoderStateMachine
)
;
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Should
be
on
main
thread
.
"
)
;
InitVideoQueuePrefs
(
)
;
#
ifdef
XP_WIN
timeBeginPeriod
(
1
)
;
#
endif
}
#
undef
INIT_WATCHABLE
#
undef
INIT_MIRROR
#
undef
INIT_CANONICAL
MediaDecoderStateMachine
:
:
~
MediaDecoderStateMachine
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Should
be
on
main
thread
.
"
)
;
MOZ_COUNT_DTOR
(
MediaDecoderStateMachine
)
;
#
ifdef
XP_WIN
timeEndPeriod
(
1
)
;
#
endif
}
void
MediaDecoderStateMachine
:
:
InitializationTask
(
MediaDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mBuffered
.
Connect
(
mReader
-
>
CanonicalBuffered
(
)
)
;
mEstimatedDuration
.
Connect
(
aDecoder
-
>
CanonicalEstimatedDuration
(
)
)
;
mExplicitDuration
.
Connect
(
aDecoder
-
>
CanonicalExplicitDuration
(
)
)
;
mPlayState
.
Connect
(
aDecoder
-
>
CanonicalPlayState
(
)
)
;
mNextPlayState
.
Connect
(
aDecoder
-
>
CanonicalNextPlayState
(
)
)
;
mVolume
.
Connect
(
aDecoder
-
>
CanonicalVolume
(
)
)
;
mPreservesPitch
.
Connect
(
aDecoder
-
>
CanonicalPreservesPitch
(
)
)
;
mSameOriginMedia
.
Connect
(
aDecoder
-
>
CanonicalSameOriginMedia
(
)
)
;
mMediaPrincipalHandle
.
Connect
(
aDecoder
-
>
CanonicalMediaPrincipalHandle
(
)
)
;
mPlaybackBytesPerSecond
.
Connect
(
aDecoder
-
>
CanonicalPlaybackBytesPerSecond
(
)
)
;
mPlaybackRateReliable
.
Connect
(
aDecoder
-
>
CanonicalPlaybackRateReliable
(
)
)
;
mDecoderPosition
.
Connect
(
aDecoder
-
>
CanonicalDecoderPosition
(
)
)
;
mWatchManager
.
Watch
(
mBuffered
&
MediaDecoderStateMachine
:
:
BufferedRangeUpdated
)
;
mWatchManager
.
Watch
(
mVolume
&
MediaDecoderStateMachine
:
:
VolumeChanged
)
;
mWatchManager
.
Watch
(
mPreservesPitch
&
MediaDecoderStateMachine
:
:
PreservesPitchChanged
)
;
mWatchManager
.
Watch
(
mEstimatedDuration
&
MediaDecoderStateMachine
:
:
RecomputeDuration
)
;
mWatchManager
.
Watch
(
mExplicitDuration
&
MediaDecoderStateMachine
:
:
RecomputeDuration
)
;
mWatchManager
.
Watch
(
mObservedDuration
&
MediaDecoderStateMachine
:
:
RecomputeDuration
)
;
mWatchManager
.
Watch
(
mPlayState
&
MediaDecoderStateMachine
:
:
PlayStateChanged
)
;
if
(
MediaPrefs
:
:
MDSMSuspendBackgroundVideoEnabled
(
)
)
{
mIsVisible
.
Connect
(
aDecoder
-
>
CanonicalIsVisible
(
)
)
;
mWatchManager
.
Watch
(
mIsVisible
&
MediaDecoderStateMachine
:
:
VisibilityChanged
)
;
}
SetMediaDecoderReaderWrapperCallback
(
)
;
}
void
MediaDecoderStateMachine
:
:
AudioAudibleChanged
(
bool
aAudible
)
{
mIsAudioDataAudible
=
aAudible
;
}
media
:
:
MediaSink
*
MediaDecoderStateMachine
:
:
CreateAudioSink
(
)
{
RefPtr
<
MediaDecoderStateMachine
>
self
=
this
;
auto
audioSinkCreator
=
[
self
]
(
)
{
MOZ_ASSERT
(
self
-
>
OnTaskQueue
(
)
)
;
DecodedAudioDataSink
*
audioSink
=
new
DecodedAudioDataSink
(
self
-
>
mTaskQueue
self
-
>
mAudioQueue
self
-
>
GetMediaTime
(
)
self
-
>
Info
(
)
.
mAudio
self
-
>
mAudioChannel
)
;
self
-
>
mAudibleListener
=
audioSink
-
>
AudibleEvent
(
)
.
Connect
(
self
-
>
mTaskQueue
self
.
get
(
)
&
MediaDecoderStateMachine
:
:
AudioAudibleChanged
)
;
return
audioSink
;
}
;
return
new
AudioSinkWrapper
(
mTaskQueue
audioSinkCreator
)
;
}
already_AddRefed
<
media
:
:
MediaSink
>
MediaDecoderStateMachine
:
:
CreateMediaSink
(
bool
aAudioCaptured
)
{
RefPtr
<
media
:
:
MediaSink
>
audioSink
=
aAudioCaptured
?
new
DecodedStream
(
mTaskQueue
mAudioQueue
mVideoQueue
mOutputStreamManager
mSameOriginMedia
.
Ref
(
)
mMediaPrincipalHandle
.
Ref
(
)
)
:
CreateAudioSink
(
)
;
RefPtr
<
media
:
:
MediaSink
>
mediaSink
=
new
VideoSink
(
mTaskQueue
audioSink
mVideoQueue
mVideoFrameContainer
*
mFrameStats
sVideoQueueSendToCompositorSize
)
;
return
mediaSink
.
forget
(
)
;
}
int64_t
MediaDecoderStateMachine
:
:
GetDecodedAudioDuration
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mMediaSink
-
>
IsStarted
(
)
)
{
return
std
:
:
max
<
int64_t
>
(
mDecodedAudioEndTime
-
GetClock
(
)
0
)
;
}
return
AudioQueue
(
)
.
Duration
(
)
;
}
bool
MediaDecoderStateMachine
:
:
HaveEnoughDecodedAudio
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
int64_t
ampleAudioUSecs
=
mAmpleAudioThresholdUsecs
*
mPlaybackRate
;
if
(
AudioQueue
(
)
.
GetSize
(
)
=
=
0
|
|
GetDecodedAudioDuration
(
)
<
ampleAudioUSecs
)
{
return
false
;
}
return
true
;
}
bool
MediaDecoderStateMachine
:
:
HaveEnoughDecodedVideo
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
VideoQueue
(
)
.
GetSize
(
)
=
=
0
)
{
return
false
;
}
if
(
VideoQueue
(
)
.
GetSize
(
)
-
1
<
GetAmpleVideoFrames
(
)
*
mPlaybackRate
)
{
return
false
;
}
return
true
;
}
bool
MediaDecoderStateMachine
:
:
NeedToDecodeVideo
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
SAMPLE_LOG
(
"
NeedToDecodeVideo
(
)
isDec
=
%
d
minPrl
=
%
d
enufVid
=
%
d
"
IsVideoDecoding
(
)
mMinimizePreroll
HaveEnoughDecodedVideo
(
)
)
;
return
IsVideoDecoding
(
)
&
&
mState
!
=
DECODER_STATE_SEEKING
&
&
(
(
!
mSentFirstFrameLoadedEvent
&
&
VideoQueue
(
)
.
GetSize
(
)
=
=
0
)
|
|
(
!
mMinimizePreroll
&
&
!
HaveEnoughDecodedVideo
(
)
)
)
;
}
bool
MediaDecoderStateMachine
:
:
NeedToSkipToNextKeyframe
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
mSentFirstFrameLoadedEvent
)
{
return
false
;
}
MOZ_ASSERT
(
mState
=
=
DECODER_STATE_DECODING
|
|
mState
=
=
DECODER_STATE_BUFFERING
|
|
mState
=
=
DECODER_STATE_SEEKING
)
;
if
(
!
mMediaSink
-
>
IsStarted
(
)
)
{
return
false
;
}
if
(
!
IsVideoDecoding
(
)
|
|
mState
=
=
DECODER_STATE_BUFFERING
|
|
mState
=
=
DECODER_STATE_SEEKING
)
{
return
false
;
}
if
(
mAudioCaptured
&
&
!
HasAudio
(
)
)
{
return
false
;
}
bool
isLowOnDecodedAudio
=
!
mReader
-
>
IsAsync
(
)
&
&
IsAudioDecoding
(
)
&
&
(
GetDecodedAudioDuration
(
)
<
mLowAudioThresholdUsecs
*
mPlaybackRate
)
;
bool
isLowOnDecodedVideo
=
(
GetClock
(
)
-
mDecodedVideoEndTime
)
*
mPlaybackRate
>
LOW_VIDEO_THRESHOLD_USECS
;
bool
lowBuffered
=
HasLowBufferedData
(
)
;
if
(
(
isLowOnDecodedAudio
|
|
isLowOnDecodedVideo
)
&
&
!
lowBuffered
)
{
DECODER_LOG
(
"
Skipping
video
decode
to
the
next
keyframe
lowAudio
=
%
d
lowVideo
=
%
d
lowUndecoded
=
%
d
async
=
%
d
"
isLowOnDecodedAudio
isLowOnDecodedVideo
lowBuffered
mReader
-
>
IsAsync
(
)
)
;
return
true
;
}
return
false
;
}
bool
MediaDecoderStateMachine
:
:
NeedToDecodeAudio
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
SAMPLE_LOG
(
"
NeedToDecodeAudio
(
)
isDec
=
%
d
minPrl
=
%
d
enufAud
=
%
d
"
IsAudioDecoding
(
)
mMinimizePreroll
HaveEnoughDecodedAudio
(
)
)
;
return
IsAudioDecoding
(
)
&
&
mState
!
=
DECODER_STATE_SEEKING
&
&
(
(
!
mSentFirstFrameLoadedEvent
&
&
AudioQueue
(
)
.
GetSize
(
)
=
=
0
)
|
|
(
!
mMinimizePreroll
&
&
!
HaveEnoughDecodedAudio
(
)
)
)
;
}
void
MediaDecoderStateMachine
:
:
OnAudioDecoded
(
MediaData
*
aAudio
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
aAudio
)
;
mDecodedAudioEndTime
=
std
:
:
max
(
aAudio
-
>
GetEndTime
(
)
mDecodedAudioEndTime
)
;
SAMPLE_LOG
(
"
OnAudioDecoded
[
%
lld
%
lld
]
"
aAudio
-
>
mTime
aAudio
-
>
GetEndTime
(
)
)
;
mStateObj
-
>
HandleAudioDecoded
(
aAudio
)
;
}
void
MediaDecoderStateMachine
:
:
Push
(
MediaData
*
aSample
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
aSample
)
;
if
(
aSample
-
>
mType
=
=
MediaData
:
:
AUDIO_DATA
)
{
AudioQueue
(
)
.
Push
(
aSample
)
;
}
else
if
(
aSample
-
>
mType
=
=
MediaData
:
:
VIDEO_DATA
)
{
aSample
-
>
As
<
VideoData
>
(
)
-
>
mFrameID
=
+
+
mCurrentFrameID
;
VideoQueue
(
)
.
Push
(
aSample
)
;
}
DispatchDecodeTasksIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnAudioPopped
(
const
RefPtr
<
MediaData
>
&
aSample
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mPlaybackOffset
=
std
:
:
max
(
mPlaybackOffset
.
Ref
(
)
aSample
-
>
mOffset
)
;
DispatchAudioDecodeTaskIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnVideoPopped
(
const
RefPtr
<
MediaData
>
&
aSample
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mPlaybackOffset
=
std
:
:
max
(
mPlaybackOffset
.
Ref
(
)
aSample
-
>
mOffset
)
;
DispatchVideoDecodeTaskIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnNotDecoded
(
MediaData
:
:
Type
aType
const
MediaResult
&
aError
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_SEEKING
)
;
SAMPLE_LOG
(
"
OnNotDecoded
(
aType
=
%
u
aError
=
%
u
)
"
aType
aError
.
Code
(
)
)
;
bool
isAudio
=
aType
=
=
MediaData
:
:
AUDIO_DATA
;
MOZ_ASSERT_IF
(
!
isAudio
aType
=
=
MediaData
:
:
VIDEO_DATA
)
;
if
(
IsShutdown
(
)
)
{
return
;
}
if
(
aError
=
=
NS_ERROR_DOM_MEDIA_WAITING_FOR_DATA
)
{
MOZ_ASSERT
(
mReader
-
>
IsWaitForDataSupported
(
)
"
Readers
that
send
WAITING_FOR_DATA
need
to
implement
WaitForData
"
)
;
mReader
-
>
WaitForData
(
aType
)
;
mStateObj
-
>
HandleWaitingForData
(
)
;
return
;
}
if
(
aError
=
=
NS_ERROR_DOM_MEDIA_CANCELED
)
{
if
(
isAudio
)
{
EnsureAudioDecodeTaskQueued
(
)
;
}
else
{
EnsureVideoDecodeTaskQueued
(
)
;
}
return
;
}
if
(
aError
!
=
NS_ERROR_DOM_MEDIA_END_OF_STREAM
)
{
DecodeError
(
aError
)
;
return
;
}
if
(
isAudio
)
{
AudioQueue
(
)
.
Finish
(
)
;
}
else
{
VideoQueue
(
)
.
Finish
(
)
;
}
mStateObj
-
>
HandleEndOfStream
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStartTime
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
aVideo
)
;
mDecodedVideoEndTime
=
std
:
:
max
(
mDecodedVideoEndTime
aVideo
-
>
GetEndTime
(
)
)
;
SAMPLE_LOG
(
"
OnVideoDecoded
[
%
lld
%
lld
]
"
aVideo
-
>
mTime
aVideo
-
>
GetEndTime
(
)
)
;
mStateObj
-
>
HandleVideoDecoded
(
aVideo
aDecodeStartTime
)
;
}
bool
MediaDecoderStateMachine
:
:
IsAudioDecoding
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
HasAudio
(
)
&
&
!
AudioQueue
(
)
.
IsFinished
(
)
;
}
bool
MediaDecoderStateMachine
:
:
IsVideoDecoding
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
HasVideo
(
)
&
&
!
VideoQueue
(
)
.
IsFinished
(
)
;
}
bool
MediaDecoderStateMachine
:
:
CheckIfDecodeComplete
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mSentFirstFrameLoadedEvent
)
;
MOZ_ASSERT
(
mState
=
=
DECODER_STATE_DECODING
|
|
mState
=
=
DECODER_STATE_BUFFERING
)
;
return
!
IsVideoDecoding
(
)
&
&
!
IsAudioDecoding
(
)
;
}
bool
MediaDecoderStateMachine
:
:
IsPlaying
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
mMediaSink
-
>
IsPlaying
(
)
;
}
nsresult
MediaDecoderStateMachine
:
:
Init
(
MediaDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
<
RefPtr
<
MediaDecoder
>
>
(
this
&
MediaDecoderStateMachine
:
:
InitializationTask
aDecoder
)
;
mTaskQueue
-
>
Dispatch
(
r
.
forget
(
)
)
;
mAudioQueueListener
=
AudioQueue
(
)
.
PopEvent
(
)
.
Connect
(
mTaskQueue
this
&
MediaDecoderStateMachine
:
:
OnAudioPopped
)
;
mVideoQueueListener
=
VideoQueue
(
)
.
PopEvent
(
)
.
Connect
(
mTaskQueue
this
&
MediaDecoderStateMachine
:
:
OnVideoPopped
)
;
mMetadataManager
.
Connect
(
mReader
-
>
TimedMetadataEvent
(
)
OwnerThread
(
)
)
;
mOnMediaNotSeekable
=
mReader
-
>
OnMediaNotSeekable
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
)
{
mMediaSeekable
=
false
;
}
)
;
mMediaSink
=
CreateMediaSink
(
mAudioCaptured
)
;
mCDMProxyPromise
.
Begin
(
aDecoder
-
>
RequestCDMProxy
(
)
-
>
Then
(
OwnerThread
(
)
__func__
this
&
MediaDecoderStateMachine
:
:
OnCDMProxyReady
&
MediaDecoderStateMachine
:
:
OnCDMProxyNotReady
)
)
;
nsresult
rv
=
mReader
-
>
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
MediaDecoderStateMachine
>
self
=
this
;
OwnerThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
[
self
]
(
)
{
MOZ_ASSERT
(
self
-
>
mState
=
=
DECODER_STATE_DECODING_METADATA
)
;
MOZ_ASSERT
(
!
self
-
>
mStateObj
)
;
auto
s
=
new
DecodeMetadataState
(
self
)
;
self
-
>
mStateObj
.
reset
(
s
)
;
s
-
>
Enter
(
)
;
}
)
)
;
return
NS_OK
;
}
void
MediaDecoderStateMachine
:
:
SetMediaDecoderReaderWrapperCallback
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mAudioCallback
=
mReader
-
>
AudioCallback
(
)
.
Connect
(
mTaskQueue
[
this
]
(
AudioCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
*
>
(
)
)
{
OnAudioDecoded
(
aData
.
as
<
MediaData
*
>
(
)
)
;
}
else
{
OnNotDecoded
(
MediaData
:
:
AUDIO_DATA
aData
.
as
<
MediaResult
>
(
)
)
;
}
}
)
;
mVideoCallback
=
mReader
-
>
VideoCallback
(
)
.
Connect
(
mTaskQueue
[
this
]
(
VideoCallbackData
aData
)
{
typedef
Tuple
<
MediaData
*
TimeStamp
>
Type
;
if
(
aData
.
is
<
Type
>
(
)
)
{
auto
&
&
v
=
aData
.
as
<
Type
>
(
)
;
OnVideoDecoded
(
Get
<
0
>
(
v
)
Get
<
1
>
(
v
)
)
;
}
else
{
OnNotDecoded
(
MediaData
:
:
VIDEO_DATA
aData
.
as
<
MediaResult
>
(
)
)
;
}
}
)
;
mAudioWaitCallback
=
mReader
-
>
AudioWaitCallback
(
)
.
Connect
(
mTaskQueue
[
this
]
(
WaitCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
:
:
Type
>
(
)
)
{
EnsureAudioDecodeTaskQueued
(
)
;
}
}
)
;
mVideoWaitCallback
=
mReader
-
>
VideoWaitCallback
(
)
.
Connect
(
mTaskQueue
[
this
]
(
WaitCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
:
:
Type
>
(
)
)
{
EnsureVideoDecodeTaskQueued
(
)
;
}
}
)
;
}
void
MediaDecoderStateMachine
:
:
CancelMediaDecoderReaderWrapperCallback
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mAudioCallback
.
Disconnect
(
)
;
mVideoCallback
.
Disconnect
(
)
;
mAudioWaitCallback
.
Disconnect
(
)
;
mVideoWaitCallback
.
Disconnect
(
)
;
}
void
MediaDecoderStateMachine
:
:
StopPlayback
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
DECODER_LOG
(
"
StopPlayback
(
)
"
)
;
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
PlaybackStopped
)
;
if
(
IsPlaying
(
)
)
{
mMediaSink
-
>
SetPlaying
(
false
)
;
MOZ_ASSERT
(
!
IsPlaying
(
)
)
;
}
DispatchDecodeTasksIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
MaybeStartPlayback
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mSentFirstFrameLoadedEvent
)
;
MOZ_ASSERT
(
mState
=
=
DECODER_STATE_DECODING
|
|
mState
=
=
DECODER_STATE_COMPLETED
)
;
if
(
IsPlaying
(
)
)
{
return
;
}
bool
playStatePermits
=
mPlayState
=
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
;
if
(
!
playStatePermits
|
|
mAudioOffloading
)
{
DECODER_LOG
(
"
Not
starting
playback
[
playStatePermits
:
%
d
"
"
mAudioOffloading
:
%
d
]
"
playStatePermits
mAudioOffloading
)
;
return
;
}
DECODER_LOG
(
"
MaybeStartPlayback
(
)
starting
playback
"
)
;
mOnPlaybackEvent
.
Notify
(
MediaEventType
:
:
PlaybackStarted
)
;
StartMediaSink
(
)
;
if
(
!
IsPlaying
(
)
)
{
mMediaSink
-
>
SetPlaying
(
true
)
;
MOZ_ASSERT
(
IsPlaying
(
)
)
;
}
DispatchDecodeTasksIfNeeded
(
)
;
}
void
MediaDecoderStateMachine
:
:
UpdatePlaybackPositionInternal
(
int64_t
aTime
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
SAMPLE_LOG
(
"
UpdatePlaybackPositionInternal
(
%
lld
)
"
aTime
)
;
mCurrentPosition
=
aTime
;
NS_ASSERTION
(
mCurrentPosition
>
=
0
"
CurrentTime
should
be
positive
!
"
)
;
mObservedDuration
=
std
:
:
max
(
mObservedDuration
.
Ref
(
)
TimeUnit
:
:
FromMicroseconds
(
mCurrentPosition
.
Ref
(
)
)
)
;
}
void
MediaDecoderStateMachine
:
:
UpdatePlaybackPosition
(
int64_t
aTime
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
UpdatePlaybackPositionInternal
(
aTime
)
;
bool
fragmentEnded
=
mFragmentEndTime
>
=
0
&
&
GetMediaTime
(
)
>
=
mFragmentEndTime
;
mMetadataManager
.
DispatchMetadataIfNeeded
(
TimeUnit
:
:
FromMicroseconds
(
aTime
)
)
;
if
(
fragmentEnded
)
{
StopPlayback
(
)
;
}
}
const
char
*
MediaDecoderStateMachine
:
:
ToStateStr
(
State
aState
)
{
switch
(
aState
)
{
case
DECODER_STATE_DECODING_METADATA
:
return
"
DECODING_METADATA
"
;
case
DECODER_STATE_WAIT_FOR_CDM
:
return
"
WAIT_FOR_CDM
"
;
case
DECODER_STATE_DORMANT
:
return
"
DORMANT
"
;
case
DECODER_STATE_DECODING_FIRSTFRAME
:
return
"
DECODING_FIRSTFRAME
"
;
case
DECODER_STATE_DECODING
:
return
"
DECODING
"
;
case
DECODER_STATE_SEEKING
:
return
"
SEEKING
"
;
case
DECODER_STATE_BUFFERING
:
return
"
BUFFERING
"
;
case
DECODER_STATE_COMPLETED
:
return
"
COMPLETED
"
;
case
DECODER_STATE_SHUTDOWN
:
return
"
SHUTDOWN
"
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
state
.
"
)
;
}
return
"
UNKNOWN
"
;
}
const
char
*
MediaDecoderStateMachine
:
:
ToStateStr
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
ToStateStr
(
mState
)
;
}
void
MediaDecoderStateMachine
:
:
VolumeChanged
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mMediaSink
-
>
SetVolume
(
mVolume
)
;
}
void
MediaDecoderStateMachine
:
:
RecomputeDuration
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
TimeUnit
duration
;
if
(
mExplicitDuration
.
Ref
(
)
.
isSome
(
)
)
{
double
d
=
mExplicitDuration
.
Ref
(
)
.
ref
(
)
;
if
(
IsNaN
(
d
)
)
{
return
;
}
duration
=
TimeUnit
:
:
FromSeconds
(
d
)
;
}
else
if
(
mEstimatedDuration
.
Ref
(
)
.
isSome
(
)
)
{
duration
=
mEstimatedDuration
.
Ref
(
)
.
ref
(
)
;
}
else
if
(
mInfo
.
isSome
(
)
&
&
Info
(
)
.
mMetadataDuration
.
isSome
(
)
)
{
duration
=
Info
(
)
.
mMetadataDuration
.
ref
(
)
;
}
else
{
return
;
}
if
(
mExplicitDuration
.
Ref
(
)
.
isNothing
(
)
&
&
duration
<
mObservedDuration
.
Ref
(
)
)
{
duration
=
mObservedDuration
;
}
MOZ_ASSERT
(
duration
.
ToMicroseconds
(
)
>
=
0
)
;
mDuration
=
Some
(
duration
)
;
}
RefPtr
<
ShutdownPromise
>
MediaDecoderStateMachine
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
mStateObj
-
>
HandleShutdown
(
)
;
}
void
MediaDecoderStateMachine
:
:
PlayStateChanged
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mPlayState
!
=
MediaDecoder
:
:
PLAY_STATE_PLAYING
)
{
mVideoDecodeSuspendTimer
.
Reset
(
)
;
}
else
if
(
mMinimizePreroll
)
{
mMinimizePreroll
=
false
;
DispatchDecodeTasksIfNeeded
(
)
;
}
mStateObj
-
>
HandlePlayStateChanged
(
mPlayState
)
;
}
void
MediaDecoderStateMachine
:
:
VisibilityChanged
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
DECODER_LOG
(
"
VisibilityChanged
:
mIsVisible
=
%
d
mVideoDecodeSuspended
=
%
c
"
mIsVisible
.
Ref
(
)
mVideoDecodeSuspended
?
'
T
'
:
'
F
'
)
;
if
(
!
mIsVisible
)
{
TimeStamp
target
=
TimeStamp
:
:
Now
(
)
+
SuspendBackgroundVideoDelay
(
)
;
RefPtr
<
MediaDecoderStateMachine
>
self
=
this
;
mVideoDecodeSuspendTimer
.
Ensure
(
target
[
=
]
(
)
{
self
-
>
OnSuspendTimerResolved
(
)
;
}
[
=
]
(
)
{
self
-
>
OnSuspendTimerRejected
(
)
;
}
)
;
return
;
}
mVideoDecodeSuspendTimer
.
Reset
(
)
;
if
(
mVideoDecodeSuspended
)
{
mStateObj
-
>
HandleResumeVideoDecoding
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
BufferedRangeUpdated
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
mBuffered
.
Ref
(
)
.
IsInvalid
(
)
)
{
bool
exists
;
media
:
:
TimeUnit
end
{
mBuffered
.
Ref
(
)
.
GetEnd
(
&
exists
)
}
;
if
(
exists
)
{
mObservedDuration
=
std
:
:
max
(
mObservedDuration
.
Ref
(
)
end
)
;
}
}
}
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
MediaDecoderStateMachine
:
:
Seek
(
const
SeekTarget
&
aTarget
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
IsShutdown
(
)
)
{
return
MediaDecoder
:
:
SeekPromise
:
:
CreateAndReject
(
true
__func__
)
;
}
if
(
!
mMediaSeekable
&
&
!
mMediaSeekableOnlyInBufferedRanges
)
{
DECODER_WARN
(
"
Seek
(
)
function
should
not
be
called
on
a
non
-
seekable
state
machine
"
)
;
return
MediaDecoder
:
:
SeekPromise
:
:
CreateAndReject
(
true
__func__
)
;
}
if
(
aTarget
.
IsNextFrame
(
)
&
&
!
HasVideo
(
)
)
{
DECODER_WARN
(
"
Ignore
a
NextFrameSeekTask
on
a
media
file
without
video
track
.
"
)
;
return
MediaDecoder
:
:
SeekPromise
:
:
CreateAndReject
(
true
__func__
)
;
}
MOZ_ASSERT
(
mDuration
.
Ref
(
)
.
isSome
(
)
"
We
should
have
got
duration
already
"
)
;
return
mStateObj
-
>
HandleSeek
(
aTarget
)
;
}
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
MediaDecoderStateMachine
:
:
InvokeSeek
(
const
SeekTarget
&
aTarget
)
{
return
InvokeAsync
<
SeekTarget
&
&
>
(
OwnerThread
(
)
this
__func__
&
MediaDecoderStateMachine
:
:
Seek
aTarget
)
;
}
void
MediaDecoderStateMachine
:
:
StopMediaSink
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mMediaSink
-
>
IsStarted
(
)
)
{
DECODER_LOG
(
"
Stop
MediaSink
"
)
;
mAudibleListener
.
DisconnectIfExists
(
)
;
mMediaSink
-
>
Stop
(
)
;
mMediaSinkAudioPromise
.
DisconnectIfExists
(
)
;
mMediaSinkVideoPromise
.
DisconnectIfExists
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DispatchDecodeTasksIfNeeded
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mState
!
=
DECODER_STATE_DECODING
&
&
mState
!
=
DECODER_STATE_DECODING_FIRSTFRAME
&
&
mState
!
=
DECODER_STATE_BUFFERING
&
&
mState
!
=
DECODER_STATE_SEEKING
)
{
return
;
}
const
bool
needToDecodeAudio
=
NeedToDecodeAudio
(
)
;
const
bool
needToDecodeVideo
=
NeedToDecodeVideo
(
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_COMPLETED
|
|
(
!
needToDecodeAudio
&
&
!
needToDecodeVideo
)
)
;
SAMPLE_LOG
(
"
DispatchDecodeTasksIfNeeded
needAudio
=
%
d
audioStatus
=
%
s
needVideo
=
%
d
videoStatus
=
%
s
"
needToDecodeAudio
AudioRequestStatus
(
)
needToDecodeVideo
VideoRequestStatus
(
)
)
;
if
(
needToDecodeAudio
)
{
EnsureAudioDecodeTaskQueued
(
)
;
}
if
(
needToDecodeVideo
)
{
EnsureVideoDecodeTaskQueued
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
DispatchAudioDecodeTaskIfNeeded
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
IsShutdown
(
)
&
&
NeedToDecodeAudio
(
)
)
{
EnsureAudioDecodeTaskQueued
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
EnsureAudioDecodeTaskQueued
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_SEEKING
)
;
SAMPLE_LOG
(
"
EnsureAudioDecodeTaskQueued
isDecoding
=
%
d
status
=
%
s
"
IsAudioDecoding
(
)
AudioRequestStatus
(
)
)
;
if
(
mState
!
=
DECODER_STATE_DECODING
&
&
mState
!
=
DECODER_STATE_DECODING_FIRSTFRAME
&
&
mState
!
=
DECODER_STATE_BUFFERING
)
{
return
;
}
if
(
!
IsAudioDecoding
(
)
|
|
mReader
-
>
IsRequestingAudioData
(
)
|
|
mReader
-
>
IsWaitingAudioData
(
)
)
{
return
;
}
RequestAudioData
(
)
;
}
void
MediaDecoderStateMachine
:
:
RequestAudioData
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_SEEKING
)
;
SAMPLE_LOG
(
"
Queueing
audio
task
-
queued
=
%
i
decoder
-
queued
=
%
o
"
AudioQueue
(
)
.
GetSize
(
)
mReader
-
>
SizeOfAudioQueueInFrames
(
)
)
;
mReader
-
>
RequestAudioData
(
)
;
}
void
MediaDecoderStateMachine
:
:
DispatchVideoDecodeTaskIfNeeded
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
IsShutdown
(
)
&
&
NeedToDecodeVideo
(
)
)
{
EnsureVideoDecodeTaskQueued
(
)
;
}
}
void
MediaDecoderStateMachine
:
:
EnsureVideoDecodeTaskQueued
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_SEEKING
)
;
SAMPLE_LOG
(
"
EnsureVideoDecodeTaskQueued
isDecoding
=
%
d
status
=
%
s
"
IsVideoDecoding
(
)
VideoRequestStatus
(
)
)
;
if
(
mState
!
=
DECODER_STATE_DECODING
&
&
mState
!
=
DECODER_STATE_DECODING_FIRSTFRAME
&
&
mState
!
=
DECODER_STATE_BUFFERING
)
{
return
;
}
if
(
!
IsVideoDecoding
(
)
|
|
mReader
-
>
IsRequestingVideoData
(
)
|
|
mReader
-
>
IsWaitingVideoData
(
)
)
{
return
;
}
RequestVideoData
(
)
;
}
void
MediaDecoderStateMachine
:
:
RequestVideoData
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
!
=
DECODER_STATE_SEEKING
)
;
bool
skipToNextKeyFrame
=
NeedToSkipToNextKeyframe
(
)
;
media
:
:
TimeUnit
currentTime
=
media
:
:
TimeUnit
:
:
FromMicroseconds
(
GetMediaTime
(
)
)
;
SAMPLE_LOG
(
"
Queueing
video
task
-
queued
=
%
i
decoder
-
queued
=
%
o
skip
=
%
i
time
=
%
lld
"
VideoQueue
(
)
.
GetSize
(
)
mReader
-
>
SizeOfVideoQueueInFrames
(
)
skipToNextKeyFrame
currentTime
.
ToMicroseconds
(
)
)
;
mReader
-
>
RequestVideoData
(
skipToNextKeyFrame
currentTime
)
;
}
void
MediaDecoderStateMachine
:
:
StartMediaSink
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
mMediaSink
-
>
IsStarted
(
)
)
{
mAudioCompleted
=
false
;
mMediaSink
-
>
Start
(
GetMediaTime
(
)
Info
(
)
)
;
auto
videoPromise
=
mMediaSink
-
>
OnEnded
(
TrackInfo
:
:
kVideoTrack
)
;
auto
audioPromise
=
mMediaSink
-
>
OnEnded
(
TrackInfo
:
:
kAudioTrack
)
;
if
(
audioPromise
)
{
mMediaSinkAudioPromise
.
Begin
(
audioPromise
-
>
Then
(
OwnerThread
(
)
__func__
this
&
MediaDecoderStateMachine
:
:
OnMediaSinkAudioComplete
&
MediaDecoderStateMachine
:
:
OnMediaSinkAudioError
)
)
;
}
if
(
videoPromise
)
{
mMediaSinkVideoPromise
.
Begin
(
videoPromise
-
>
Then
(
OwnerThread
(
)
__func__
this
&
MediaDecoderStateMachine
:
:
OnMediaSinkVideoComplete
&
MediaDecoderStateMachine
:
:
OnMediaSinkVideoError
)
)
;
}
}
}
bool
MediaDecoderStateMachine
:
:
HasLowDecodedAudio
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
IsAudioDecoding
(
)
&
&
GetDecodedAudioDuration
(
)
<
EXHAUSTED_DATA_MARGIN_USECS
*
mPlaybackRate
;
}
bool
MediaDecoderStateMachine
:
:
HasLowDecodedVideo
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
IsVideoDecoding
(
)
&
&
VideoQueue
(
)
.
GetSize
(
)
<
LOW_VIDEO_FRAMES
*
mPlaybackRate
;
}
bool
MediaDecoderStateMachine
:
:
HasLowDecodedData
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mReader
-
>
UseBufferingHeuristics
(
)
)
;
return
HasLowDecodedAudio
(
)
|
|
HasLowDecodedVideo
(
)
;
}
bool
MediaDecoderStateMachine
:
:
OutOfDecodedAudio
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
IsAudioDecoding
(
)
&
&
!
AudioQueue
(
)
.
IsFinished
(
)
&
&
AudioQueue
(
)
.
GetSize
(
)
=
=
0
&
&
!
mMediaSink
-
>
HasUnplayedFrames
(
TrackInfo
:
:
kAudioTrack
)
;
}
bool
MediaDecoderStateMachine
:
:
HasLowBufferedData
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
HasLowBufferedData
(
detail
:
:
LOW_DATA_THRESHOLD_USECS
)
;
}
bool
MediaDecoderStateMachine
:
:
HasLowBufferedData
(
int64_t
aUsecs
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
>
=
DECODER_STATE_DECODING
"
Must
have
loaded
first
frame
for
mBuffered
to
be
valid
"
)
;
if
(
Duration
(
)
.
IsInfinite
(
)
)
{
return
false
;
}
if
(
mBuffered
.
Ref
(
)
.
IsInvalid
(
)
)
{
return
false
;
}
int64_t
endOfDecodedVideoData
=
(
HasVideo
(
)
&
&
!
VideoQueue
(
)
.
IsFinished
(
)
)
?
mDecodedVideoEndTime
:
INT64_MAX
;
int64_t
endOfDecodedAudioData
=
(
HasAudio
(
)
&
&
!
AudioQueue
(
)
.
IsFinished
(
)
)
?
mDecodedAudioEndTime
:
INT64_MAX
;
int64_t
endOfDecodedData
=
std
:
:
min
(
endOfDecodedVideoData
endOfDecodedAudioData
)
;
if
(
Duration
(
)
.
ToMicroseconds
(
)
<
endOfDecodedData
)
{
return
false
;
}
if
(
endOfDecodedData
=
=
INT64_MAX
)
{
return
false
;
}
int64_t
start
=
endOfDecodedData
;
int64_t
end
=
std
:
:
min
(
GetMediaTime
(
)
+
aUsecs
Duration
(
)
.
ToMicroseconds
(
)
)
;
if
(
start
>
=
end
)
{
return
false
;
}
media
:
:
TimeInterval
interval
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
start
)
media
:
:
TimeUnit
:
:
FromMicroseconds
(
end
)
)
;
return
!
mBuffered
.
Ref
(
)
.
Contains
(
interval
)
;
}
void
MediaDecoderStateMachine
:
:
DecodeError
(
const
MediaResult
&
aError
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
!
IsShutdown
(
)
)
;
DECODER_WARN
(
"
Decode
error
"
)
;
mOnPlaybackErrorEvent
.
Notify
(
aError
)
;
}
void
MediaDecoderStateMachine
:
:
EnqueueLoadedMetadataEvent
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MediaDecoderEventVisibility
visibility
=
mSentLoadedMetadataEvent
?
MediaDecoderEventVisibility
:
:
Suppressed
:
MediaDecoderEventVisibility
:
:
Observable
;
mMetadataLoadedEvent
.
Notify
(
nsAutoPtr
<
MediaInfo
>
(
new
MediaInfo
(
Info
(
)
)
)
Move
(
mMetadataTags
)
visibility
)
;
mSentLoadedMetadataEvent
=
true
;
}
void
MediaDecoderStateMachine
:
:
EnqueueFirstFrameLoadedEvent
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
bool
firstFrameBeenLoaded
=
mSentFirstFrameLoadedEvent
;
mSentFirstFrameLoadedEvent
=
true
;
MediaDecoderEventVisibility
visibility
=
firstFrameBeenLoaded
?
MediaDecoderEventVisibility
:
:
Suppressed
:
MediaDecoderEventVisibility
:
:
Observable
;
mFirstFrameLoadedEvent
.
Notify
(
nsAutoPtr
<
MediaInfo
>
(
new
MediaInfo
(
Info
(
)
)
)
visibility
)
;
}
void
MediaDecoderStateMachine
:
:
FinishDecodeFirstFrame
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
!
mSentFirstFrameLoadedEvent
)
;
DECODER_LOG
(
"
FinishDecodeFirstFrame
"
)
;
mMediaSink
-
>
Redraw
(
Info
(
)
.
mVideo
)
;
DECODER_LOG
(
"
Media
duration
%
lld
"
"
transportSeekable
=
%
d
mediaSeekable
=
%
d
"
Duration
(
)
.
ToMicroseconds
(
)
mResource
-
>
IsTransportSeekable
(
)
mMediaSeekable
)
;
mReader
-
>
ReadUpdatedMetadata
(
mInfo
.
ptr
(
)
)
;
EnqueueFirstFrameLoadedEvent
(
)
;
}
RefPtr
<
ShutdownPromise
>
MediaDecoderStateMachine
:
:
BeginShutdown
(
)
{
return
InvokeAsync
(
OwnerThread
(
)
this
__func__
&
MediaDecoderStateMachine
:
:
Shutdown
)
;
}
RefPtr
<
ShutdownPromise
>
MediaDecoderStateMachine
:
:
FinishShutdown
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
mState
=
=
DECODER_STATE_SHUTDOWN
"
How
did
we
escape
from
the
shutdown
state
?
"
)
;
DECODER_LOG
(
"
Shutting
down
state
machine
task
queue
"
)
;
return
OwnerThread
(
)
-
>
BeginShutdown
(
)
;
}
void
MediaDecoderStateMachine
:
:
RunStateMachine
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mDelayedScheduler
.
Reset
(
)
;
mDispatchedStateMachine
=
false
;
mStateObj
-
>
Step
(
)
;
}
void
MediaDecoderStateMachine
:
:
Reset
(
TrackSet
aTracks
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
DECODER_LOG
(
"
MediaDecoderStateMachine
:
:
Reset
"
)
;
MOZ_ASSERT
(
IsShutdown
(
)
|
|
mState
=
=
DECODER_STATE_SEEKING
|
|
mState
=
=
DECODER_STATE_DORMANT
)
;
MOZ_ASSERT
(
aTracks
.
contains
(
TrackInfo
:
:
kVideoTrack
)
)
;
if
(
aTracks
.
contains
(
TrackInfo
:
:
kAudioTrack
)
&
&
aTracks
.
contains
(
TrackInfo
:
:
kVideoTrack
)
)
{
StopMediaSink
(
)
;
}
if
(
aTracks
.
contains
(
TrackInfo
:
:
kVideoTrack
)
)
{
mDecodedVideoEndTime
=
0
;
mVideoCompleted
=
false
;
VideoQueue
(
)
.
Reset
(
)
;
}
if
(
aTracks
.
contains
(
TrackInfo
:
:
kAudioTrack
)
)
{
mDecodedAudioEndTime
=
0
;
mAudioCompleted
=
false
;
AudioQueue
(
)
.
Reset
(
)
;
}
mPlaybackOffset
=
0
;
mReader
-
>
ResetDecode
(
aTracks
)
;
}
int64_t
MediaDecoderStateMachine
:
:
GetClock
(
TimeStamp
*
aTimeStamp
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
int64_t
clockTime
=
mMediaSink
-
>
GetPosition
(
aTimeStamp
)
;
NS_ASSERTION
(
GetMediaTime
(
)
<
=
clockTime
"
Clock
should
go
forwards
.
"
)
;
return
clockTime
;
}
void
MediaDecoderStateMachine
:
:
UpdatePlaybackPositionPeriodically
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
!
IsPlaying
(
)
)
{
return
;
}
if
(
VideoEndTime
(
)
!
=
-
1
|
|
AudioEndTime
(
)
!
=
-
1
)
{
const
int64_t
clockTime
=
GetClock
(
)
;
NS_ASSERTION
(
clockTime
>
=
0
"
Should
have
positive
clock
time
.
"
)
;
int64_t
t
=
std
:
:
min
(
clockTime
std
:
:
max
(
VideoEndTime
(
)
AudioEndTime
(
)
)
)
;
if
(
t
>
GetMediaTime
(
)
)
{
UpdatePlaybackPosition
(
t
)
;
}
}
int64_t
delay
=
std
:
:
max
<
int64_t
>
(
1
AUDIO_DURATION_USECS
/
mPlaybackRate
)
;
ScheduleStateMachineIn
(
delay
)
;
}
const
char
*
MediaDecoderStateMachine
:
:
ToStr
(
NextFrameStatus
aStatus
)
{
switch
(
aStatus
)
{
case
MediaDecoderOwner
:
:
NEXT_FRAME_AVAILABLE
:
return
"
NEXT_FRAME_AVAILABLE
"
;
case
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE
:
return
"
NEXT_FRAME_UNAVAILABLE
"
;
case
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE_BUFFERING
:
return
"
NEXT_FRAME_UNAVAILABLE_BUFFERING
"
;
case
MediaDecoderOwner
:
:
NEXT_FRAME_UNAVAILABLE_SEEKING
:
return
"
NEXT_FRAME_UNAVAILABLE_SEEKING
"
;
case
MediaDecoderOwner
:
:
NEXT_FRAME_UNINITIALIZED
:
return
"
NEXT_FRAME_UNINITIALIZED
"
;
}
return
"
UNKNOWN
"
;
}
void
MediaDecoderStateMachine
:
:
UpdateNextFrameStatus
(
NextFrameStatus
aStatus
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
aStatus
!
=
mNextFrameStatus
)
{
DECODER_LOG
(
"
Changed
mNextFrameStatus
to
%
s
"
ToStr
(
aStatus
)
)
;
mNextFrameStatus
=
aStatus
;
}
}
bool
MediaDecoderStateMachine
:
:
CanPlayThrough
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
GetStatistics
(
)
.
CanPlayThrough
(
)
;
}
MediaStatistics
MediaDecoderStateMachine
:
:
GetStatistics
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MediaStatistics
result
;
result
.
mDownloadRate
=
mResource
-
>
GetDownloadRate
(
&
result
.
mDownloadRateReliable
)
;
result
.
mDownloadPosition
=
mResource
-
>
GetCachedDataEnd
(
mDecoderPosition
)
;
result
.
mTotalBytes
=
mResource
-
>
GetLength
(
)
;
result
.
mPlaybackRate
=
mPlaybackBytesPerSecond
;
result
.
mPlaybackRateReliable
=
mPlaybackRateReliable
;
result
.
mDecoderPosition
=
mDecoderPosition
;
result
.
mPlaybackPosition
=
mPlaybackOffset
;
return
result
;
}
void
MediaDecoderStateMachine
:
:
ScheduleStateMachine
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mDispatchedStateMachine
)
{
return
;
}
mDispatchedStateMachine
=
true
;
OwnerThread
(
)
-
>
Dispatch
(
NewRunnableMethod
(
this
&
MediaDecoderStateMachine
:
:
RunStateMachine
)
)
;
}
void
MediaDecoderStateMachine
:
:
ScheduleStateMachineIn
(
int64_t
aMicroseconds
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
aMicroseconds
>
0
)
;
if
(
mDispatchedStateMachine
)
{
return
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
target
=
now
+
TimeDuration
:
:
FromMicroseconds
(
aMicroseconds
)
;
mDelayedScheduler
.
Ensure
(
target
[
this
]
(
)
{
mDelayedScheduler
.
CompleteRequest
(
)
;
RunStateMachine
(
)
;
}
[
]
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
)
;
}
)
;
}
bool
MediaDecoderStateMachine
:
:
OnTaskQueue
(
)
const
{
return
OwnerThread
(
)
-
>
IsCurrentThreadIn
(
)
;
}
bool
MediaDecoderStateMachine
:
:
IsStateMachineScheduled
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
mDispatchedStateMachine
|
|
mDelayedScheduler
.
IsScheduled
(
)
;
}
void
MediaDecoderStateMachine
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
aPlaybackRate
!
=
0
"
Should
be
handled
by
MediaDecoder
:
:
Pause
(
)
"
)
;
mPlaybackRate
=
aPlaybackRate
;
mMediaSink
-
>
SetPlaybackRate
(
mPlaybackRate
)
;
ScheduleStateMachine
(
)
;
}
void
MediaDecoderStateMachine
:
:
PreservesPitchChanged
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mMediaSink
-
>
SetPreservesPitch
(
mPreservesPitch
)
;
}
bool
MediaDecoderStateMachine
:
:
IsShutdown
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
mIsShutdown
;
}
int64_t
MediaDecoderStateMachine
:
:
AudioEndTime
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mMediaSink
-
>
IsStarted
(
)
)
{
return
mMediaSink
-
>
GetEndTime
(
TrackInfo
:
:
kAudioTrack
)
;
}
return
-
1
;
}
int64_t
MediaDecoderStateMachine
:
:
VideoEndTime
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mMediaSink
-
>
IsStarted
(
)
)
{
return
mMediaSink
-
>
GetEndTime
(
TrackInfo
:
:
kVideoTrack
)
;
}
return
-
1
;
}
void
MediaDecoderStateMachine
:
:
OnMediaSinkVideoComplete
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
HasVideo
(
)
)
;
VERBOSE_LOG
(
"
[
%
s
]
"
__func__
)
;
mMediaSinkVideoPromise
.
Complete
(
)
;
mVideoCompleted
=
true
;
ScheduleStateMachine
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnMediaSinkVideoError
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
HasVideo
(
)
)
;
VERBOSE_LOG
(
"
[
%
s
]
"
__func__
)
;
mMediaSinkVideoPromise
.
Complete
(
)
;
mVideoCompleted
=
true
;
if
(
HasAudio
(
)
)
{
return
;
}
DecodeError
(
MediaResult
(
NS_ERROR_DOM_MEDIA_MEDIASINK_ERR
__func__
)
)
;
}
void
MediaDecoderStateMachine
:
:
OnMediaSinkAudioComplete
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
HasAudio
(
)
)
;
VERBOSE_LOG
(
"
[
%
s
]
"
__func__
)
;
mMediaSinkAudioPromise
.
Complete
(
)
;
mAudioCompleted
=
true
;
ScheduleStateMachine
(
)
;
mOnDecoderDoctorEvent
.
Notify
(
DecoderDoctorEvent
{
DecoderDoctorEvent
:
:
eAudioSinkStartup
NS_OK
}
)
;
}
void
MediaDecoderStateMachine
:
:
OnMediaSinkAudioError
(
nsresult
aResult
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
HasAudio
(
)
)
;
VERBOSE_LOG
(
"
[
%
s
]
"
__func__
)
;
mMediaSinkAudioPromise
.
Complete
(
)
;
mAudioCompleted
=
true
;
MOZ_ASSERT
(
NS_FAILED
(
aResult
)
)
;
mOnDecoderDoctorEvent
.
Notify
(
DecoderDoctorEvent
{
DecoderDoctorEvent
:
:
eAudioSinkStartup
aResult
}
)
;
if
(
HasVideo
(
)
)
{
return
;
}
DecodeError
(
MediaResult
(
NS_ERROR_DOM_MEDIA_MEDIASINK_ERR
__func__
)
)
;
}
void
MediaDecoderStateMachine
:
:
OnCDMProxyReady
(
RefPtr
<
CDMProxy
>
aProxy
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mCDMProxyPromise
.
Complete
(
)
;
mCDMProxy
=
aProxy
;
mReader
-
>
SetCDMProxy
(
aProxy
)
;
mStateObj
-
>
HandleCDMProxyReady
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnCDMProxyNotReady
(
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
mCDMProxyPromise
.
Complete
(
)
;
}
void
MediaDecoderStateMachine
:
:
SetAudioCaptured
(
bool
aCaptured
)
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
aCaptured
=
=
mAudioCaptured
)
{
return
;
}
mAudioCompleted
=
false
;
mVideoCompleted
=
false
;
MediaSink
:
:
PlaybackParams
params
=
mMediaSink
-
>
GetPlaybackParams
(
)
;
StopMediaSink
(
)
;
mMediaSink
-
>
Shutdown
(
)
;
mMediaSink
=
CreateMediaSink
(
aCaptured
)
;
mMediaSink
-
>
SetPlaybackParams
(
params
)
;
mAudioCaptured
=
aCaptured
;
mAmpleAudioThresholdUsecs
=
mAudioCaptured
?
detail
:
:
AMPLE_AUDIO_USECS
/
2
:
detail
:
:
AMPLE_AUDIO_USECS
;
mStateObj
-
>
HandleAudioCaptured
(
)
;
}
uint32_t
MediaDecoderStateMachine
:
:
GetAmpleVideoFrames
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
return
(
mReader
-
>
IsAsync
(
)
&
&
mReader
-
>
VideoIsHardwareAccelerated
(
)
)
?
std
:
:
max
<
uint32_t
>
(
sVideoQueueHWAccelSize
MIN_VIDEO_QUEUE_SIZE
)
:
std
:
:
max
<
uint32_t
>
(
sVideoQueueDefaultSize
MIN_VIDEO_QUEUE_SIZE
)
;
}
void
MediaDecoderStateMachine
:
:
DumpDebugInfo
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
[
this
]
(
)
{
mMediaSink
-
>
DumpDebugInfo
(
)
;
mStateObj
-
>
DumpDebugInfo
(
)
;
DUMP_LOG
(
"
GetMediaTime
=
%
lld
GetClock
=
%
lld
mMediaSink
=
%
p
"
"
mState
=
%
s
mPlayState
=
%
d
mSentFirstFrameLoadedEvent
=
%
d
IsPlaying
=
%
d
"
"
mAudioStatus
=
%
s
mVideoStatus
=
%
s
mDecodedAudioEndTime
=
%
lld
mDecodedVideoEndTime
=
%
lld
"
"
mAudioCompleted
=
%
d
mVideoCompleted
=
%
d
"
GetMediaTime
(
)
mMediaSink
-
>
IsStarted
(
)
?
GetClock
(
)
:
-
1
mMediaSink
.
get
(
)
ToStateStr
(
)
mPlayState
.
Ref
(
)
mSentFirstFrameLoadedEvent
IsPlaying
(
)
AudioRequestStatus
(
)
VideoRequestStatus
(
)
mDecodedAudioEndTime
mDecodedVideoEndTime
mAudioCompleted
mVideoCompleted
)
;
}
)
;
OwnerThread
(
)
-
>
Dispatch
(
r
.
forget
(
)
AbstractThread
:
:
AssertDispatchSuccess
AbstractThread
:
:
TailDispatch
)
;
}
void
MediaDecoderStateMachine
:
:
AddOutputStream
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DECODER_LOG
(
"
AddOutputStream
aStream
=
%
p
!
"
aStream
)
;
mOutputStreamManager
-
>
Add
(
aStream
aFinishWhenEnded
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
<
bool
>
(
this
&
MediaDecoderStateMachine
:
:
SetAudioCaptured
true
)
;
OwnerThread
(
)
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
void
MediaDecoderStateMachine
:
:
RemoveOutputStream
(
MediaStream
*
aStream
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DECODER_LOG
(
"
RemoveOutputStream
=
%
p
!
"
aStream
)
;
mOutputStreamManager
-
>
Remove
(
aStream
)
;
if
(
mOutputStreamManager
-
>
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
<
bool
>
(
this
&
MediaDecoderStateMachine
:
:
SetAudioCaptured
false
)
;
OwnerThread
(
)
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
}
size_t
MediaDecoderStateMachine
:
:
SizeOfVideoQueue
(
)
const
{
return
mReader
-
>
SizeOfVideoQueueInBytes
(
)
;
}
size_t
MediaDecoderStateMachine
:
:
SizeOfAudioQueue
(
)
const
{
return
mReader
-
>
SizeOfAudioQueueInBytes
(
)
;
}
AbstractCanonical
<
media
:
:
TimeIntervals
>
*
MediaDecoderStateMachine
:
:
CanonicalBuffered
(
)
const
{
return
mReader
-
>
CanonicalBuffered
(
)
;
}
MediaEventSource
<
void
>
&
MediaDecoderStateMachine
:
:
OnMediaNotSeekable
(
)
const
{
return
mReader
-
>
OnMediaNotSeekable
(
)
;
}
const
char
*
MediaDecoderStateMachine
:
:
AudioRequestStatus
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mReader
-
>
IsRequestingAudioData
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mReader
-
>
IsWaitingAudioData
(
)
)
;
return
"
pending
"
;
}
else
if
(
mReader
-
>
IsWaitingAudioData
(
)
)
{
return
"
waiting
"
;
}
return
"
idle
"
;
}
const
char
*
MediaDecoderStateMachine
:
:
VideoRequestStatus
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
if
(
mReader
-
>
IsRequestingVideoData
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mReader
-
>
IsWaitingVideoData
(
)
)
;
return
"
pending
"
;
}
else
if
(
mReader
-
>
IsWaitingVideoData
(
)
)
{
return
"
waiting
"
;
}
return
"
idle
"
;
}
void
MediaDecoderStateMachine
:
:
OnSuspendTimerResolved
(
)
{
DECODER_LOG
(
"
OnSuspendTimerResolved
"
)
;
mVideoDecodeSuspendTimer
.
CompleteRequest
(
)
;
mStateObj
-
>
HandleVideoSuspendTimeout
(
)
;
}
void
MediaDecoderStateMachine
:
:
OnSuspendTimerRejected
(
)
{
DECODER_LOG
(
"
OnSuspendTimerRejected
"
)
;
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
MOZ_ASSERT
(
!
mVideoDecodeSuspended
)
;
mVideoDecodeSuspendTimer
.
CompleteRequest
(
)
;
}
}
#
undef
NS_DispatchToMainThread
