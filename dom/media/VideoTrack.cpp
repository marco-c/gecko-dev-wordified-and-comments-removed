#
include
"
mozilla
/
dom
/
VideoTrack
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
#
include
"
mozilla
/
dom
/
VideoStreamTrack
.
h
"
#
include
"
mozilla
/
dom
/
VideoTrackBinding
.
h
"
#
include
"
mozilla
/
dom
/
VideoTrackList
.
h
"
namespace
mozilla
:
:
dom
{
VideoTrack
:
:
VideoTrack
(
nsIGlobalObject
*
aOwnerGlobal
const
nsAString
&
aId
const
nsAString
&
aKind
const
nsAString
&
aLabel
const
nsAString
&
aLanguage
VideoStreamTrack
*
aStreamTrack
)
:
MediaTrack
(
aOwnerGlobal
aId
aKind
aLabel
aLanguage
)
mSelected
(
false
)
mVideoStreamTrack
(
aStreamTrack
)
{
}
VideoTrack
:
:
~
VideoTrack
(
)
=
default
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
VideoTrack
MediaTrack
mVideoStreamTrack
)
NS_IMPL_ADDREF_INHERITED
(
VideoTrack
MediaTrack
)
NS_IMPL_RELEASE_INHERITED
(
VideoTrack
MediaTrack
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
VideoTrack
)
NS_INTERFACE_MAP_END_INHERITING
(
MediaTrack
)
JSObject
*
VideoTrack
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
VideoTrack_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
VideoTrack
:
:
SetSelected
(
bool
aSelected
)
{
SetEnabledInternal
(
aSelected
MediaTrack
:
:
DEFAULT
)
;
}
void
VideoTrack
:
:
SetEnabledInternal
(
bool
aEnabled
int
aFlags
)
{
if
(
aEnabled
=
=
mSelected
)
{
return
;
}
mSelected
=
aEnabled
;
if
(
!
mList
)
{
return
;
}
VideoTrackList
&
list
=
static_cast
<
VideoTrackList
&
>
(
*
mList
)
;
if
(
mSelected
)
{
uint32_t
curIndex
=
0
;
for
(
uint32_t
i
=
0
;
i
<
list
.
Length
(
)
;
+
+
i
)
{
if
(
list
[
i
]
=
=
this
)
{
curIndex
=
i
;
continue
;
}
VideoTrack
*
track
=
list
[
i
]
;
track
-
>
SetSelected
(
false
)
;
}
list
.
mSelectedIndex
=
curIndex
;
HTMLMediaElement
*
element
=
mList
-
>
GetMediaElement
(
)
;
if
(
element
)
{
element
-
>
NotifyMediaTrackEnabled
(
this
)
;
}
}
else
{
list
.
mSelectedIndex
=
-
1
;
HTMLMediaElement
*
element
=
mList
-
>
GetMediaElement
(
)
;
if
(
element
)
{
element
-
>
NotifyMediaTrackDisabled
(
this
)
;
}
}
if
(
!
(
aFlags
&
MediaTrack
:
:
FIRE_NO_EVENTS
)
)
{
list
.
CreateAndDispatchChangeEvent
(
)
;
}
}
}
