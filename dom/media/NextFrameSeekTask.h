#
ifndef
NEXTFRAME_SEEK_TASK_H
#
define
NEXTFRAME_SEEK_TASK_H
#
include
"
SeekTask
.
h
"
#
include
"
MediaDecoderReader
.
h
"
namespace
mozilla
{
namespace
media
{
class
NextFrameSeekTask
final
:
public
SeekTask
{
public
:
NextFrameSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
SeekJob
&
&
aSeekJob
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentTime
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
)
;
void
Discard
(
)
override
;
RefPtr
<
SeekTaskPromise
>
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
override
;
bool
NeedToResetMDSM
(
)
const
override
;
private
:
~
NextFrameSeekTask
(
)
;
bool
IsVideoDecoding
(
)
const
;
void
EnsureVideoDecodeTaskQueued
(
)
;
const
char
*
VideoRequestStatus
(
)
;
void
RequestVideoData
(
)
;
bool
NeedMoreVideo
(
)
const
;
bool
IsVideoRequestPending
(
)
const
;
bool
IsAudioSeekComplete
(
)
const
;
bool
IsVideoSeekComplete
(
)
const
;
void
MaybeFinishSeek
(
)
;
void
OnAudioDecoded
(
MediaData
*
aAudioSample
)
;
void
OnAudioNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
;
void
OnVideoDecoded
(
MediaData
*
aVideoSample
)
;
void
OnVideoNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
;
void
SetCallbacks
(
)
;
void
CancelCallbacks
(
)
;
void
UpdateSeekTargetTime
(
)
;
MediaQueue
<
MediaData
>
&
mAudioQueue
;
MediaQueue
<
MediaData
>
&
mVideoQueue
;
const
int64_t
mCurrentTime
;
media
:
:
TimeUnit
mDuration
;
MediaEventListener
mAudioCallback
;
MediaEventListener
mVideoCallback
;
MediaEventListener
mAudioWaitCallback
;
MediaEventListener
mVideoWaitCallback
;
}
;
}
}
#
endif
