#
if
!
defined
(
CubebUtils_h_
)
#
define
CubebUtils_h_
#
include
"
cubeb
/
cubeb
.
h
"
#
include
"
AudioSampleFormat
.
h
"
#
include
"
nsString
.
h
"
class
AudioDeviceInfo
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
cubeb_stream_prefs
)
namespace
mozilla
{
class
CallbackThreadRegistry
;
namespace
CubebUtils
{
typedef
cubeb_devid
AudioDeviceID
;
template
<
AudioSampleFormat
N
>
struct
ToCubebFormat
{
static
const
cubeb_sample_format
value
=
CUBEB_SAMPLE_FLOAT32NE
;
}
;
template
<
>
struct
ToCubebFormat
<
AUDIO_FORMAT_S16
>
{
static
const
cubeb_sample_format
value
=
CUBEB_SAMPLE_S16NE
;
}
;
void
InitLibrary
(
)
;
void
ShutdownLibrary
(
)
;
bool
SandboxEnabled
(
)
;
uint32_t
MaxNumberOfChannels
(
)
;
uint32_t
PreferredSampleRate
(
)
;
int
CubebStreamInit
(
cubeb
*
context
cubeb_stream
*
*
stream
char
const
*
stream_name
cubeb_devid
input_device
cubeb_stream_params
*
input_stream_params
cubeb_devid
output_device
cubeb_stream_params
*
output_stream_params
uint32_t
latency_frames
cubeb_data_callback
data_callback
cubeb_state_callback
state_callback
void
*
user_ptr
)
;
enum
Side
{
Input
Output
}
;
double
GetVolumeScale
(
)
;
bool
GetFirstStream
(
)
;
cubeb
*
GetCubebContext
(
)
;
void
ReportCubebStreamInitFailure
(
bool
aIsFirstStream
)
;
void
ReportCubebBackendUsed
(
)
;
uint32_t
GetCubebPlaybackLatencyInMilliseconds
(
)
;
uint32_t
GetCubebMTGLatencyInFrames
(
cubeb_stream_params
*
params
)
;
bool
CubebLatencyPrefSet
(
)
;
void
GetCurrentBackend
(
nsAString
&
aBackend
)
;
cubeb_stream_prefs
GetDefaultStreamPrefs
(
cubeb_device_type
aType
)
;
char
*
GetForcedOutputDevice
(
)
;
void
SetInCommunication
(
bool
aInCommunication
)
;
bool
RouteOutputAsVoice
(
)
;
bool
EstimatedRoundTripLatencyDefaultDevices
(
double
*
aMean
double
*
aStdDev
)
;
#
ifdef
MOZ_WIDGET_ANDROID
int32_t
AndroidGetAudioOutputSampleRate
(
)
;
int32_t
AndroidGetAudioOutputFramesPerBuffer
(
)
;
#
endif
#
ifdef
ENABLE_SET_CUBEB_BACKEND
void
ForceSetCubebContext
(
cubeb
*
aCubebContext
)
;
#
endif
}
}
#
endif
