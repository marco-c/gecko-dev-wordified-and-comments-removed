#
if
!
defined
(
IntelWebMVideoDecoder_h_
)
#
define
IntelWebMVideoDecoder_h_
#
include
<
stdint
.
h
>
#
include
"
WebMReader
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaData
.
h
"
class
TaskQueue
;
namespace
mozilla
{
class
VP8Sample
;
typedef
std
:
:
deque
<
RefPtr
<
VP8Sample
>
>
VP8SampleQueue
;
class
IntelWebMVideoDecoder
:
public
WebMVideoDecoder
public
MediaDataDecoderCallback
{
public
:
static
WebMVideoDecoder
*
Create
(
WebMReader
*
aReader
)
;
virtual
RefPtr
<
InitPromise
>
Init
(
unsigned
int
aWidth
=
0
unsigned
int
aHeight
=
0
)
override
;
virtual
nsresult
Flush
(
)
override
;
virtual
void
Shutdown
(
)
override
;
virtual
bool
DecodeVideoFrame
(
bool
&
aKeyframeSkip
int64_t
aTimeThreshold
)
override
;
virtual
void
Output
(
MediaData
*
aSample
)
override
;
virtual
void
DrainComplete
(
)
override
;
virtual
void
InputExhausted
(
)
override
;
virtual
void
Error
(
)
override
;
virtual
bool
OnReaderTaskQueue
(
)
override
{
return
mReader
-
>
OnTaskQueue
(
)
;
}
IntelWebMVideoDecoder
(
WebMReader
*
aReader
)
;
~
IntelWebMVideoDecoder
(
)
;
private
:
void
InitLayersBackendType
(
)
;
bool
Decode
(
)
;
bool
Demux
(
RefPtr
<
VP8Sample
>
&
aSample
bool
*
aEOS
)
;
bool
SkipVideoDemuxToNextKeyFrame
(
int64_t
aTimeThreshold
uint32_t
&
parsed
)
;
bool
IsSupportedVideoMimeType
(
const
nsACString
&
aMimeType
)
;
already_AddRefed
<
VP8Sample
>
PopSample
(
)
;
RefPtr
<
WebMReader
>
mReader
;
RefPtr
<
PlatformDecoderModule
>
mPlatform
;
RefPtr
<
MediaDataDecoder
>
mMediaDataDecoder
;
RefPtr
<
FlushableTaskQueue
>
mTaskQueue
;
Monitor
mMonitor
;
nsAutoPtr
<
VideoInfo
>
mDecoderConfig
;
VP8SampleQueue
mSampleQueue
;
RefPtr
<
VP8Sample
>
mQueuedVideoSample
;
uint64_t
mNumSamplesInput
;
uint64_t
mNumSamplesOutput
;
uint64_t
mLastReportedNumDecodedFrames
;
uint32_t
mDecodeAhead
;
bool
mInputExhausted
;
bool
mDrainComplete
;
bool
mError
;
bool
mEOS
;
bool
mIsFlushing
;
}
;
}
#
endif
