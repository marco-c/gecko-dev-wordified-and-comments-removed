#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
WebMDemuxer
.
h
"
#
include
"
WebMDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
namespace
mozilla
{
MediaDecoderStateMachine
*
WebMDecoder
:
:
CreateStateMachine
(
)
{
RefPtr
<
MediaDecoderReader
>
reader
=
new
MediaFormatReader
(
this
new
WebMDemuxer
(
GetResource
(
)
)
GetVideoFrameContainer
(
)
)
;
return
new
MediaDecoderStateMachine
(
this
reader
)
;
}
bool
WebMDecoder
:
:
IsEnabled
(
)
{
return
Preferences
:
:
GetBool
(
"
media
.
webm
.
enabled
"
)
;
}
bool
WebMDecoder
:
:
CanHandleMediaType
(
const
nsACString
&
aMIMETypeExcludingCodecs
const
nsAString
&
aCodecs
)
{
if
(
!
IsEnabled
(
)
)
{
return
false
;
}
const
bool
isWebMAudio
=
aMIMETypeExcludingCodecs
.
EqualsASCII
(
"
audio
/
webm
"
)
;
const
bool
isWebMVideo
=
aMIMETypeExcludingCodecs
.
EqualsASCII
(
"
video
/
webm
"
)
;
if
(
!
isWebMAudio
&
&
!
isWebMVideo
)
{
return
false
;
}
nsTArray
<
nsCString
>
codecMimes
;
if
(
aCodecs
.
IsEmpty
(
)
)
{
return
true
;
}
nsTArray
<
nsString
>
codecs
;
if
(
!
ParseCodecsString
(
aCodecs
codecs
)
)
{
return
false
;
}
for
(
const
nsString
&
codec
:
codecs
)
{
if
(
codec
.
EqualsLiteral
(
"
opus
"
)
|
|
codec
.
EqualsLiteral
(
"
vorbis
"
)
)
{
continue
;
}
if
(
isWebMVideo
&
&
(
codec
.
EqualsLiteral
(
"
vp8
"
)
|
|
codec
.
EqualsLiteral
(
"
vp8
.
0
"
)
|
|
codec
.
EqualsLiteral
(
"
vp9
"
)
|
|
codec
.
EqualsLiteral
(
"
vp9
.
0
"
)
)
)
{
continue
;
}
return
false
;
}
return
true
;
}
}
