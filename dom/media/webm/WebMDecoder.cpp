#
include
"
mozilla
/
Preferences
.
h
"
#
ifdef
MOZ_AV1
#
include
"
AOMDecoder
.
h
"
#
endif
#
include
"
MediaContainerType
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
WebMDemuxer
.
h
"
#
include
"
WebMDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
namespace
mozilla
{
bool
WebMDecoder
:
:
IsSupportedType
(
const
MediaContainerType
&
aContainerType
)
{
if
(
!
Preferences
:
:
GetBool
(
"
media
.
webm
.
enabled
"
)
)
{
return
false
;
}
bool
isVideo
=
aContainerType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
video
/
webm
"
)
;
if
(
aContainerType
.
Type
(
)
!
=
MEDIAMIMETYPE
(
"
audio
/
webm
"
)
&
&
!
isVideo
)
{
return
false
;
}
const
MediaCodecs
&
codecs
=
aContainerType
.
ExtendedType
(
)
.
Codecs
(
)
;
if
(
codecs
.
IsEmpty
(
)
)
{
return
true
;
}
for
(
const
auto
&
codec
:
codecs
.
Range
(
)
)
{
if
(
codec
.
EqualsLiteral
(
"
opus
"
)
|
|
codec
.
EqualsLiteral
(
"
vorbis
"
)
)
{
continue
;
}
if
(
isVideo
&
&
(
codec
.
EqualsLiteral
(
"
vp8
"
)
|
|
codec
.
EqualsLiteral
(
"
vp8
.
0
"
)
|
|
codec
.
EqualsLiteral
(
"
vp9
"
)
|
|
codec
.
EqualsLiteral
(
"
vp9
.
0
"
)
)
)
{
continue
;
}
#
ifdef
MOZ_AV1
if
(
isVideo
&
&
AOMDecoder
:
:
IsSupportedCodec
(
codec
)
)
{
continue
;
}
#
endif
return
false
;
}
return
true
;
}
void
WebMDecoder
:
:
GetMozDebugReaderData
(
nsACString
&
aString
)
{
if
(
mReader
)
{
mReader
-
>
GetMozDebugReaderData
(
aString
)
;
}
}
}
