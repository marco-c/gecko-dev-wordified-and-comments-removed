#
include
"
MatroskaDecoder
.
h
"
#
include
"
MediaContainerType
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
nsMimeTypes
.
h
"
namespace
mozilla
{
bool
MatroskaDecoder
:
:
IsMatroskaType
(
const
MediaContainerType
&
aType
)
{
const
auto
&
mimeType
=
aType
.
Type
(
)
;
return
mimeType
=
=
MEDIAMIMETYPE
(
VIDEO_MATROSKA
)
|
|
mimeType
=
=
MEDIAMIMETYPE
(
AUDIO_MATROSKA
)
;
}
nsTArray
<
UniquePtr
<
TrackInfo
>
>
MatroskaDecoder
:
:
GetTracksInfo
(
const
MediaContainerType
&
aType
MediaResult
&
aError
)
{
nsTArray
<
UniquePtr
<
TrackInfo
>
>
tracks
;
aError
=
NS_OK
;
const
MediaCodecs
&
codecs
=
aType
.
ExtendedType
(
)
.
Codecs
(
)
;
if
(
codecs
.
IsEmpty
(
)
)
{
return
tracks
;
}
for
(
const
auto
&
codec
:
codecs
.
Range
(
)
)
{
if
(
IsAACCodecString
(
codec
)
)
{
tracks
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
"
audio
/
mp4a
-
latm
"
_ns
aType
)
)
;
continue
;
}
if
(
IsAllowedH264Codec
(
codec
)
)
{
auto
trackInfo
=
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
"
video
/
avc
"
_ns
aType
)
;
uint8_t
profile
=
0
constraint
=
0
;
H264_LEVEL
level
;
MOZ_ALWAYS_TRUE
(
ExtractH264CodecDetails
(
codec
profile
constraint
level
H264CodecStringStrictness
:
:
Lenient
)
)
;
uint32_t
width
=
aType
.
ExtendedType
(
)
.
GetWidth
(
)
.
refOr
(
1280
)
;
uint32_t
height
=
aType
.
ExtendedType
(
)
.
GetHeight
(
)
.
refOr
(
720
)
;
trackInfo
-
>
GetAsVideoInfo
(
)
-
>
mExtraData
=
H264
:
:
CreateExtraData
(
profile
constraint
level
{
width
height
}
)
;
tracks
.
AppendElement
(
std
:
:
move
(
trackInfo
)
)
;
continue
;
}
aError
=
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Unknown
codec
:
%
s
"
NS_ConvertUTF16toUTF8
(
codec
)
.
get
(
)
)
)
;
}
return
tracks
;
}
bool
MatroskaDecoder
:
:
IsSupportedType
(
const
MediaContainerType
&
aContainerType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
if
(
!
StaticPrefs
:
:
media_mkv_enabled
(
)
|
|
!
IsMatroskaType
(
aContainerType
)
)
{
return
false
;
}
MediaResult
rv
=
NS_OK
;
auto
tracks
=
GetTracksInfo
(
aContainerType
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
if
(
!
tracks
.
IsEmpty
(
)
)
{
RefPtr
<
PDMFactory
>
platform
=
new
PDMFactory
(
)
;
for
(
const
auto
&
track
:
tracks
)
{
if
(
!
track
|
|
platform
-
>
Supports
(
SupportDecoderParams
(
*
track
)
aDiagnostics
)
.
isEmpty
(
)
)
{
return
false
;
}
}
return
true
;
}
if
(
aContainerType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
AUDIO_MATROSKA
)
)
{
tracks
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
"
audio
/
mp4a
-
latm
"
_ns
aContainerType
)
)
;
}
else
{
tracks
.
AppendElement
(
CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters
(
"
video
/
avc
"
_ns
aContainerType
)
)
;
}
RefPtr
<
PDMFactory
>
platform
=
new
PDMFactory
(
)
;
for
(
const
auto
&
track
:
tracks
)
{
if
(
track
&
&
!
platform
-
>
Supports
(
SupportDecoderParams
(
*
track
)
aDiagnostics
)
.
isEmpty
(
)
)
{
return
true
;
}
}
return
false
;
}
nsTArray
<
UniquePtr
<
TrackInfo
>
>
MatroskaDecoder
:
:
GetTracksInfo
(
const
MediaContainerType
&
aType
)
{
MediaResult
rv
=
NS_OK
;
return
GetTracksInfo
(
aType
rv
)
;
}
}
