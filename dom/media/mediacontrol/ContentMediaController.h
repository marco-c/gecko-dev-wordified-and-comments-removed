#
ifndef
DOM_MEDIA_MEDIACONTROL_CONTENTMEDIACONTROLLER_H_
#
define
DOM_MEDIA_MEDIACONTROL_CONTENTMEDIACONTROLLER_H_
#
include
"
MediaControlKeysEvent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
enum
class
ControlledMediaState
:
uint32_t
{
eStarted
ePlayed
ePaused
eStopped
}
;
class
ContentMediaAgent
:
public
MediaControlKeysEventSource
{
public
:
static
ContentMediaAgent
*
Get
(
BrowsingContext
*
aBC
)
;
virtual
void
NotifyMediaStateChanged
(
const
MediaControlKeysEventListener
*
aMedia
ControlledMediaState
aState
)
=
0
;
virtual
void
NotifyAudibleStateChanged
(
const
MediaControlKeysEventListener
*
aMedia
bool
aAudible
)
=
0
;
private
:
bool
Open
(
)
override
{
return
true
;
}
bool
IsOpened
(
)
const
override
{
return
true
;
}
}
;
class
ContentControlKeyEventReceiver
:
public
MediaControlKeysEventListener
{
public
:
static
ContentControlKeyEventReceiver
*
Get
(
BrowsingContext
*
aBC
)
;
void
OnKeyPressed
(
MediaControlKeysEvent
aKeyEvent
)
override
=
0
;
}
;
class
ContentMediaController
final
:
public
ContentMediaAgent
public
ContentControlKeyEventReceiver
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ContentMediaController
override
)
explicit
ContentMediaController
(
uint64_t
aId
)
;
void
AddListener
(
MediaControlKeysEventListener
*
aListener
)
override
;
void
RemoveListener
(
MediaControlKeysEventListener
*
aListener
)
override
;
void
NotifyMediaStateChanged
(
const
MediaControlKeysEventListener
*
aMedia
ControlledMediaState
aState
)
override
;
void
NotifyAudibleStateChanged
(
const
MediaControlKeysEventListener
*
aMedia
bool
aAudible
)
override
;
void
OnKeyPressed
(
MediaControlKeysEvent
aEvent
)
override
;
private
:
~
ContentMediaController
(
)
=
default
;
void
Close
(
)
override
;
uint64_t
mTopLevelBrowsingContextId
;
}
;
}
}
#
endif
