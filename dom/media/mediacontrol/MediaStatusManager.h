#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIASTATUSMANAGER_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIASTATUSMANAGER_H_
#
include
"
MediaControlKeySource
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaPlaybackStatus
.
h
"
#
include
"
mozilla
/
dom
/
MediaMetadata
.
h
"
#
include
"
mozilla
/
dom
/
MediaSessionBinding
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
MediaSessionInfo
{
public
:
MediaSessionInfo
(
)
=
default
;
explicit
MediaSessionInfo
(
MediaMetadataBase
&
aMetadata
)
{
mMetadata
.
emplace
(
aMetadata
)
;
}
MediaSessionInfo
(
MediaMetadataBase
&
aMetadata
MediaSessionPlaybackState
&
aState
)
{
mMetadata
.
emplace
(
aMetadata
)
;
mDeclaredPlaybackState
=
aState
;
}
static
MediaSessionInfo
EmptyInfo
(
)
{
return
MediaSessionInfo
(
)
;
}
static
uint32_t
GetActionBitMask
(
MediaSessionAction
aAction
)
{
return
1
<
<
static_cast
<
uint8_t
>
(
aAction
)
;
}
void
EnableAction
(
MediaSessionAction
aAction
)
{
mSupportedActions
|
=
GetActionBitMask
(
aAction
)
;
}
void
DisableAction
(
MediaSessionAction
aAction
)
{
mSupportedActions
&
=
~
GetActionBitMask
(
aAction
)
;
}
bool
IsActionSupported
(
MediaSessionAction
aAction
)
const
{
return
mSupportedActions
&
GetActionBitMask
(
aAction
)
;
}
Maybe
<
MediaMetadataBase
>
mMetadata
;
MediaSessionPlaybackState
mDeclaredPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
uint32_t
mSupportedActions
=
0
;
}
;
class
IMediaInfoUpdater
{
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
=
0
;
virtual
void
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
=
0
;
virtual
void
SetDeclaredPlaybackState
(
uint64_t
aBrowsingContextId
MediaSessionPlaybackState
aState
)
=
0
;
virtual
void
NotifySessionCreated
(
uint64_t
aBrowsingContextId
)
=
0
;
virtual
void
NotifySessionDestroyed
(
uint64_t
aBrowsingContextId
)
=
0
;
virtual
void
UpdateMetadata
(
uint64_t
aBrowsingContextId
const
Maybe
<
MediaMetadataBase
>
&
aMetadata
)
=
0
;
virtual
void
SetIsInPictureInPictureMode
(
uint64_t
aBrowsingContextId
bool
aIsInPictureInPictureMode
)
=
0
;
virtual
void
EnableAction
(
uint64_t
aBrowsingContextId
MediaSessionAction
aAction
)
=
0
;
virtual
void
DisableAction
(
uint64_t
aBrowsingContextId
MediaSessionAction
aAction
)
=
0
;
virtual
void
NotifyMediaFullScreenState
(
uint64_t
aBrowsingContextId
bool
aIsInFullScreen
)
=
0
;
virtual
void
UpdatePositionState
(
uint64_t
aBrowsingContextId
const
PositionState
&
aState
)
=
0
;
}
;
class
MediaStatusManager
:
public
IMediaInfoUpdater
{
public
:
explicit
MediaStatusManager
(
uint64_t
aBrowsingContextId
)
;
void
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
override
;
void
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
override
;
void
SetDeclaredPlaybackState
(
uint64_t
aSessionContextId
MediaSessionPlaybackState
aState
)
override
;
void
NotifySessionCreated
(
uint64_t
aSessionContextId
)
override
;
void
NotifySessionDestroyed
(
uint64_t
aSessionContextId
)
override
;
void
UpdateMetadata
(
uint64_t
aSessionContextId
const
Maybe
<
MediaMetadataBase
>
&
aMetadata
)
override
;
void
EnableAction
(
uint64_t
aBrowsingContextId
MediaSessionAction
aAction
)
override
;
void
DisableAction
(
uint64_t
aBrowsingContextId
MediaSessionAction
aAction
)
override
;
void
UpdatePositionState
(
uint64_t
aBrowsingContextId
const
PositionState
&
aState
)
override
;
MediaMetadataBase
GetCurrentMediaMetadata
(
)
const
;
bool
IsMediaAudible
(
)
const
;
bool
IsMediaPlaying
(
)
const
;
bool
IsAnyMediaBeingControlled
(
)
const
;
MediaEventSource
<
MediaMetadataBase
>
&
MetadataChangedEvent
(
)
{
return
mMetadataChangedEvent
;
}
MediaEventSource
<
PositionState
>
&
PositionChangedEvent
(
)
{
return
mPositionStateChangedEvent
;
}
MediaEventSource
<
MediaSessionPlaybackState
>
&
PlaybackChangedEvent
(
)
{
return
mPlaybackStateChangedEvent
;
}
MediaSessionPlaybackState
PlaybackState
(
)
const
;
void
NotifyPageTitleChanged
(
)
;
protected
:
~
MediaStatusManager
(
)
=
default
;
MediaEventSource
<
nsTArray
<
MediaSessionAction
>
>
&
SupportedActionsChangedEvent
(
)
{
return
mSupportedActionsChangedEvent
;
}
uint64_t
mTopLevelBrowsingContextId
;
Maybe
<
uint64_t
>
mActiveMediaSessionContextId
;
void
ClearActiveMediaSessionContextIdIfNeeded
(
)
;
private
:
nsString
GetDefaultFaviconURL
(
)
const
;
nsString
GetDefaultTitle
(
)
const
;
MediaMetadataBase
CreateDefaultMetadata
(
)
const
;
bool
IsInPrivateBrowsing
(
)
const
;
void
FillMissingTitleAndArtworkIfNeeded
(
MediaMetadataBase
&
aMetadata
)
const
;
bool
IsSessionOwningAudioFocus
(
uint64_t
aBrowsingContextId
)
const
;
void
SetActiveMediaSessionContextId
(
uint64_t
aBrowsingContextId
)
;
void
HandleAudioFocusOwnerChanged
(
Maybe
<
uint64_t
>
&
aBrowsingContextId
)
;
void
NotifySupportedKeysChangedIfNeeded
(
uint64_t
aBrowsingContextId
)
;
CopyableTArray
<
MediaSessionAction
>
GetSupportedActions
(
)
const
;
void
StoreMediaSessionContextIdOnWindowContext
(
)
;
void
SetGuessedPlayState
(
MediaSessionPlaybackState
aState
)
;
void
UpdateActualPlaybackState
(
)
;
MediaSessionPlaybackState
GetCurrentDeclaredPlaybackState
(
)
const
;
MediaSessionPlaybackState
mGuessedPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
MediaSessionPlaybackState
mActualPlaybackState
=
MediaSessionPlaybackState
:
:
None
;
nsTHashMap
<
nsUint64HashKey
MediaSessionInfo
>
mMediaSessionInfoMap
;
MediaEventProducer
<
MediaMetadataBase
>
mMetadataChangedEvent
;
MediaEventProducer
<
nsTArray
<
MediaSessionAction
>
>
mSupportedActionsChangedEvent
;
MediaEventProducer
<
PositionState
>
mPositionStateChangedEvent
;
MediaEventProducer
<
MediaSessionPlaybackState
>
mPlaybackStateChangedEvent
;
MediaPlaybackStatus
mPlaybackStatusDelegate
;
}
;
}
#
endif
