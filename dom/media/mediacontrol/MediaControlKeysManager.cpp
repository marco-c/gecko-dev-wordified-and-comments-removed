#
include
"
MediaControlKeysManager
.
h
"
#
include
"
MediaControlUtils
.
h
"
#
include
"
MediaControlService
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
widget
/
MediaKeysEventSourceFactory
.
h
"
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
MediaControlKeysManager
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
#
undef
LOG_INFO
#
define
LOG_INFO
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Info
\
(
"
MediaControlKeysManager
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
bool
MediaControlKeysManager
:
:
IsOpened
(
)
const
{
return
true
;
}
bool
MediaControlKeysManager
:
:
Open
(
)
{
mControllerAmountChangedListener
=
MediaControlService
:
:
GetService
(
)
-
>
MediaControllerAmountChangedEvent
(
)
.
Connect
(
AbstractThread
:
:
MainThread
(
)
this
&
MediaControlKeysManager
:
:
ControllerAmountChanged
)
;
return
true
;
}
MediaControlKeysManager
:
:
~
MediaControlKeysManager
(
)
{
StopMonitoringControlKeys
(
)
;
mEventSource
=
nullptr
;
mControllerAmountChangedListener
.
DisconnectIfExists
(
)
;
}
void
MediaControlKeysManager
:
:
StartMonitoringControlKeys
(
)
{
if
(
!
StaticPrefs
:
:
media_hardwaremediakeys_enabled
(
)
)
{
return
;
}
if
(
!
mEventSource
)
{
mEventSource
=
widget
:
:
CreateMediaControlKeysEventSource
(
)
;
}
if
(
!
mEventSource
)
{
return
;
}
LOG_INFO
(
"
StartMonitoringControlKeys
"
)
;
if
(
!
mEventSource
-
>
IsOpened
(
)
&
&
mEventSource
-
>
Open
(
)
)
{
mEventSource
-
>
SetPlaybackState
(
mPlaybackState
)
;
mEventSource
-
>
SetMediaMetadata
(
mMetadata
)
;
mEventSource
-
>
AddListener
(
this
)
;
}
}
void
MediaControlKeysManager
:
:
StopMonitoringControlKeys
(
)
{
if
(
mEventSource
&
&
mEventSource
-
>
IsOpened
(
)
)
{
LOG_INFO
(
"
StopMonitoringControlKeys
"
)
;
mEventSource
-
>
Close
(
)
;
}
}
void
MediaControlKeysManager
:
:
ControllerAmountChanged
(
uint64_t
aControllerAmount
)
{
LOG
(
"
Controller
amount
changed
=
%
"
PRId64
aControllerAmount
)
;
if
(
aControllerAmount
>
0
)
{
StartMonitoringControlKeys
(
)
;
}
else
if
(
aControllerAmount
=
=
0
)
{
StopMonitoringControlKeys
(
)
;
}
}
void
MediaControlKeysManager
:
:
OnKeyPressed
(
MediaControlKeysEvent
aKeyEvent
)
{
for
(
auto
listener
:
mListeners
)
{
listener
-
>
OnKeyPressed
(
aKeyEvent
)
;
}
}
void
MediaControlKeysManager
:
:
SetPlaybackState
(
MediaSessionPlaybackState
aState
)
{
if
(
mEventSource
&
&
mEventSource
-
>
IsOpened
(
)
)
{
mEventSource
-
>
SetPlaybackState
(
aState
)
;
}
mPlaybackState
=
aState
;
LOG_INFO
(
"
playbackState
=
%
s
"
ToMediaSessionPlaybackStateStr
(
mPlaybackState
)
)
;
if
(
StaticPrefs
:
:
media_mediacontrol_testingevents_enabled
(
)
)
{
if
(
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
)
{
obs
-
>
NotifyObservers
(
nullptr
"
media
-
displayed
-
playback
-
changed
"
nullptr
)
;
}
}
}
MediaSessionPlaybackState
MediaControlKeysManager
:
:
GetPlaybackState
(
)
const
{
return
(
mEventSource
&
&
mEventSource
-
>
IsOpened
(
)
)
?
mEventSource
-
>
GetPlaybackState
(
)
:
mPlaybackState
;
}
void
MediaControlKeysManager
:
:
SetMediaMetadata
(
const
MediaMetadataBase
&
aMetadata
)
{
if
(
mEventSource
&
&
mEventSource
-
>
IsOpened
(
)
)
{
mEventSource
-
>
SetMediaMetadata
(
aMetadata
)
;
}
mMetadata
=
aMetadata
;
LOG_INFO
(
"
title
=
%
s
artist
=
%
s
album
=
%
s
"
NS_ConvertUTF16toUTF8
(
mMetadata
.
mTitle
)
.
get
(
)
NS_ConvertUTF16toUTF8
(
mMetadata
.
mArtist
)
.
get
(
)
NS_ConvertUTF16toUTF8
(
mMetadata
.
mAlbum
)
.
get
(
)
)
;
if
(
StaticPrefs
:
:
media_mediacontrol_testingevents_enabled
(
)
)
{
if
(
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
)
{
obs
-
>
NotifyObservers
(
nullptr
"
media
-
displayed
-
metadata
-
changed
"
nullptr
)
;
}
}
}
}
}
