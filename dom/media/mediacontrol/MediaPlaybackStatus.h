#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIAPLAYBACKSTATUS_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIAPLAYBACKSTATUS_H_
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
MediaSession
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashMap
.
h
"
namespace
mozilla
:
:
dom
{
MOZ_DEFINE_ENUM_CLASS_WITH_BASE_AND_TOSTRING
(
MediaPlaybackState
uint32_t
(
eStarted
ePlayed
ePaused
eStopped
)
)
;
MOZ_DEFINE_ENUM_CLASS_WITH_BASE_AND_TOSTRING
(
MediaAudibleState
bool
(
eInaudible
eAudible
)
)
;
class
MediaPlaybackStatus
final
{
public
:
void
UpdateMediaPlaybackState
(
uint64_t
aContextId
MediaPlaybackState
aState
)
;
void
UpdateMediaAudibleState
(
uint64_t
aContextId
MediaAudibleState
aState
)
;
void
UpdateGuessedPositionState
(
uint64_t
aContextId
const
nsID
&
aElementId
const
Maybe
<
PositionState
>
&
aState
)
;
bool
IsPlaying
(
)
const
;
bool
IsAudible
(
)
const
;
bool
IsAnyMediaBeingControlled
(
)
const
;
Maybe
<
PositionState
>
GuessedMediaPositionState
(
Maybe
<
uint64_t
>
aPreferredContextId
)
const
;
Maybe
<
uint64_t
>
GetAudioFocusOwnerContextId
(
)
const
;
private
:
class
ContextMediaInfo
final
{
public
:
explicit
ContextMediaInfo
(
uint64_t
aContextId
)
:
mContextId
(
aContextId
)
{
}
~
ContextMediaInfo
(
)
=
default
;
void
IncreaseControlledMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mControlledMediaNum
<
UINT_MAX
)
;
#
endif
mControlledMediaNum
+
+
;
}
void
DecreaseControlledMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mControlledMediaNum
>
0
)
;
#
endif
mControlledMediaNum
-
-
;
}
void
IncreasePlayingMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mPlayingMediaNum
<
mControlledMediaNum
)
;
#
endif
mPlayingMediaNum
+
+
;
}
void
DecreasePlayingMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mPlayingMediaNum
>
0
)
;
#
endif
mPlayingMediaNum
-
-
;
}
void
IncreaseAudibleMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mAudibleMediaNum
<
mPlayingMediaNum
)
;
#
endif
mAudibleMediaNum
+
+
;
}
void
DecreaseAudibleMediaNum
(
)
{
#
ifndef
FUZZING_SNAPSHOT
MOZ_DIAGNOSTIC_ASSERT
(
mAudibleMediaNum
>
0
)
;
#
endif
mAudibleMediaNum
-
-
;
}
bool
IsPlaying
(
)
const
{
return
mPlayingMediaNum
>
0
;
}
bool
IsAudible
(
)
const
{
return
mAudibleMediaNum
>
0
;
}
bool
IsAnyMediaBeingControlled
(
)
const
{
return
mControlledMediaNum
>
0
;
}
uint64_t
Id
(
)
const
{
return
mContextId
;
}
Maybe
<
PositionState
>
GuessedPositionState
(
)
const
;
void
UpdateGuessedPositionState
(
const
nsID
&
aElementId
const
Maybe
<
PositionState
>
&
aState
)
;
private
:
uint32_t
mControlledMediaNum
=
0
;
uint32_t
mAudibleMediaNum
=
0
;
uint32_t
mPlayingMediaNum
=
0
;
uint64_t
mContextId
=
0
;
nsTHashMap
<
nsID
PositionState
>
mGuessedPositionStateMap
;
}
;
ContextMediaInfo
&
GetNotNullContextInfo
(
uint64_t
aContextId
)
;
void
DestroyContextInfo
(
uint64_t
aContextId
)
;
void
ChooseNewContextToOwnAudioFocus
(
)
;
void
SetOwningAudioFocusContextId
(
Maybe
<
uint64_t
>
&
&
aContextId
)
;
bool
IsContextOwningAudioFocus
(
uint64_t
aContextId
)
const
;
bool
ShouldRequestAudioFocusForInfo
(
const
ContextMediaInfo
&
aInfo
)
const
;
bool
ShouldAbandonAudioFocusForInfo
(
const
ContextMediaInfo
&
aInfo
)
const
;
nsTHashMap
<
uint64_t
UniquePtr
<
ContextMediaInfo
>
>
mContextInfoMap
;
Maybe
<
uint64_t
>
mOwningAudioFocusContextId
;
}
;
}
#
endif
