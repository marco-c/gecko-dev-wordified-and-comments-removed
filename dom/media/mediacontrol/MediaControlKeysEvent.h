#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLKEYSEVENT_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLKEYSEVENT_H_
#
include
"
mozilla
/
dom
/
MediaMetadata
.
h
"
#
include
"
mozilla
/
dom
/
MediaSessionBinding
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
enum
class
MediaControlKeysEvent
:
uint32_t
{
ePlay
ePause
ePlayPause
ePrevTrack
eNextTrack
eSeekBackward
eSeekForward
eStop
}
;
class
MediaControlKeysEventListener
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
MediaControlKeysEventListener
(
)
=
default
;
virtual
void
OnKeyPressed
(
MediaControlKeysEvent
aKeyEvent
)
=
0
;
protected
:
virtual
~
MediaControlKeysEventListener
(
)
=
default
;
}
;
class
MediaControlKeysHandler
final
:
public
MediaControlKeysEventListener
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
MediaControlKeysHandler
override
)
void
OnKeyPressed
(
MediaControlKeysEvent
aKeyEvent
)
override
;
private
:
virtual
~
MediaControlKeysHandler
(
)
=
default
;
}
;
class
MediaControlKeysEventSource
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
MediaControlKeysEventSource
(
)
;
virtual
void
AddListener
(
MediaControlKeysEventListener
*
aListener
)
;
virtual
void
RemoveListener
(
MediaControlKeysEventListener
*
aListener
)
;
size_t
GetListenersNum
(
)
const
;
virtual
bool
Open
(
)
=
0
;
virtual
void
Close
(
)
;
virtual
bool
IsOpened
(
)
const
=
0
;
virtual
void
SetPlaybackState
(
MediaSessionPlaybackState
aState
)
;
virtual
MediaSessionPlaybackState
GetPlaybackState
(
)
const
;
virtual
void
SetMediaMetadata
(
const
MediaMetadataBase
&
aMetadata
)
{
}
protected
:
virtual
~
MediaControlKeysEventSource
(
)
=
default
;
nsTArray
<
RefPtr
<
MediaControlKeysEventListener
>
>
mListeners
;
MediaSessionPlaybackState
mPlaybackState
;
}
;
}
}
#
endif
