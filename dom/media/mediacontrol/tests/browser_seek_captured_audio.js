const
PAGE_NON_AUTOPLAY_MEDIA
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
mediacontrol
/
tests
/
file_non_autoplay
.
html
"
;
const
testVideoId
=
"
video
"
;
add_task
(
async
function
setupTestingPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
mediacontrol
.
testingevents
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testSeekAudibleCapturedMedia
(
)
{
info
(
open
new
non
autoplay
media
page
)
;
const
tab
=
await
createTabAndLoad
(
PAGE_NON_AUTOPLAY_MEDIA
)
;
info
(
perform
seek
on
the
captured
media
before
it
starts
)
;
await
captureAudio
(
tab
testVideoId
)
;
await
seekAudio
(
tab
testVideoId
)
;
info
(
start
captured
media
)
;
await
playMedia
(
tab
testVideoId
)
;
info
(
pressing
'
pause
'
key
captured
media
should
be
paused
)
;
await
generateMediaControlKeyEvent
(
"
pause
"
)
;
await
checkOrWaitUntilMediaStoppedPlaying
(
tab
testVideoId
)
;
info
(
remove
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
function
captureAudio
(
tab
elementId
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
elementId
]
Id
=
>
{
const
video
=
content
.
document
.
getElementById
(
Id
)
;
if
(
!
video
)
{
ok
(
false
can
'
t
get
the
media
element
!
)
;
}
const
context
=
new
content
.
AudioContext
(
)
;
context
.
createMediaElementSource
(
video
)
;
}
)
;
}
function
seekAudio
(
tab
elementId
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
elementId
]
async
Id
=
>
{
const
video
=
content
.
document
.
getElementById
(
Id
)
;
if
(
!
video
)
{
ok
(
false
can
'
t
get
the
media
element
!
)
;
}
video
.
currentTime
=
0
.
0
;
await
new
Promise
(
r
=
>
(
video
.
onseeked
=
r
)
)
;
}
)
;
}
