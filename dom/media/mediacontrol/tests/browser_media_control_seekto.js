const
PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
mediacontrol
/
tests
/
file_non_autoplay
.
html
"
;
const
testVideoId
=
"
video
"
;
add_task
(
async
function
setupTestingPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
mediacontrol
.
testingevents
.
enabled
"
true
]
[
"
dom
.
media
.
mediasession
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testSetPositionState
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createTabAndLoad
(
PAGE_URL
)
;
info
(
start
media
)
;
await
playMedia
(
tab
testVideoId
)
;
const
seektime
=
0
;
info
(
seek
to
{
seektime
}
seconds
.
)
;
await
PerformSeekTo
(
tab
{
seekTime
:
seektime
}
)
;
info
(
seek
to
{
seektime
}
seconds
and
set
fastseek
to
boolean
)
;
await
PerformSeekTo
(
tab
{
seekTime
:
seektime
fastSeek
:
true
}
)
;
info
(
seek
to
{
seektime
}
seconds
and
set
fastseek
to
false
)
;
await
PerformSeekTo
(
tab
{
seekTime
:
seektime
fastSeek
:
false
}
)
;
info
(
remove
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
async
function
PerformSeekTo
(
tab
seekDetails
)
{
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
seekDetails
testVideoId
]
(
seekDetails
Id
)
=
>
{
const
{
seekTime
fastSeek
}
=
seekDetails
;
content
.
navigator
.
mediaSession
.
setActionHandler
(
"
seekto
"
details
=
>
{
ok
(
details
.
seekTime
!
=
undefined
"
Seektime
must
be
presented
"
)
;
is
(
seekTime
details
.
seekTime
"
Get
correct
seektime
"
)
;
if
(
fastSeek
)
{
is
(
fastSeek
details
.
fastSeek
"
Get
correct
fastSeek
"
)
;
}
else
{
ok
(
details
.
fastSeek
=
=
=
undefined
"
Details
should
not
contain
fastSeek
"
)
;
}
content
.
document
.
getElementById
(
Id
)
.
currentTime
=
seekTime
;
}
)
;
}
)
;
const
seekPromise
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
testVideoId
]
Id
=
>
{
const
video
=
content
.
document
.
getElementById
(
Id
)
;
return
new
Promise
(
r
=
>
(
video
.
onseeking
=
r
(
)
)
)
;
}
)
;
const
{
seekTime
fastSeek
}
=
seekDetails
;
tab
.
linkedBrowser
.
browsingContext
.
mediaController
.
seekTo
(
seekTime
fastSeek
)
;
await
seekPromise
;
}
