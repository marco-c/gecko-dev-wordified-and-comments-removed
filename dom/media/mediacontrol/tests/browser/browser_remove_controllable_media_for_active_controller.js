const
PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
mediacontrol
/
tests
/
browser
/
file_non_autoplay
.
html
"
;
const
testVideoId
=
"
video
"
;
add_task
(
async
function
setupTestingPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
mediacontrol
.
testingevents
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testControllerWithActiveMediaSessionShouldStillBeActiveWhenNoControllableMediaPresents
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createLoadedTabWrapper
(
PAGE_URL
)
;
info
(
play
media
would
activate
controller
and
media
session
)
;
await
setupMediaSession
(
tab
)
;
await
playMedia
(
tab
testVideoId
)
;
await
checkOrWaitControllerBecomesActive
(
tab
)
;
info
(
remove
playing
media
so
we
don
'
t
have
any
controllable
media
now
)
;
await
removePlayingMedia
(
tab
)
;
info
(
despite
that
controller
should
still
be
active
)
;
await
checkOrWaitControllerBecomesActive
(
tab
)
;
info
(
active
media
session
can
still
receive
media
key
)
;
await
ensureActiveMediaSessionReceivedMediaKey
(
tab
)
;
info
(
remove
tab
)
;
await
tab
.
close
(
)
;
}
)
;
add_task
(
async
function
testControllerWithoutActiveMediaSessionShouldBecomeInactiveWhenNoControllableMediaPresents
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createLoadedTabWrapper
(
PAGE_URL
)
;
info
(
play
media
would
activate
controller
)
;
await
playMedia
(
tab
testVideoId
)
;
await
checkOrWaitControllerBecomesActive
(
tab
)
;
info
(
remove
playing
media
so
we
don
'
t
have
any
controllable
media
now
)
;
await
removePlayingMedia
(
tab
)
;
info
(
without
having
media
session
controller
should
be
deactivated
)
;
await
checkOrWaitControllerBecomesInactive
(
tab
)
;
info
(
remove
tab
)
;
await
tab
.
close
(
)
;
}
)
;
function
setupMediaSession
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
_
=
>
{
content
.
navigator
.
mediaSession
.
setActionHandler
(
"
seekforward
"
_
=
>
{
content
.
navigator
.
mediaSession
.
setPositionState
(
{
duration
:
60
}
)
;
}
)
;
}
)
;
}
async
function
ensureActiveMediaSessionReceivedMediaKey
(
tab
)
{
const
controller
=
tab
.
linkedBrowser
.
browsingContext
.
mediaController
;
const
positionChangePromise
=
new
Promise
(
r
=
>
(
controller
.
onpositionstatechange
=
r
)
)
;
MediaControlService
.
generateMediaControlKey
(
"
seekforward
"
)
;
await
positionChangePromise
;
ok
(
true
"
active
media
session
received
media
key
"
)
;
}
function
removePlayingMedia
(
tab
)
{
const
controller
=
tab
.
linkedBrowser
.
browsingContext
.
mediaController
;
return
Promise
.
all
(
[
new
Promise
(
r
=
>
(
controller
.
onplaybackstatechange
=
r
)
)
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
testVideoId
]
Id
=
>
{
content
.
document
.
getElementById
(
Id
)
.
remove
(
)
;
}
)
]
)
;
}
async
function
checkOrWaitControllerBecomesActive
(
tab
)
{
const
controller
=
tab
.
linkedBrowser
.
browsingContext
.
mediaController
;
if
(
!
controller
.
isActive
)
{
await
new
Promise
(
r
=
>
(
controller
.
onactivated
=
r
)
)
;
}
ok
(
controller
.
isActive
controller
is
active
)
;
}
async
function
checkOrWaitControllerBecomesInactive
(
tab
)
{
const
controller
=
tab
.
linkedBrowser
.
browsingContext
.
mediaController
;
if
(
controller
.
isActive
)
{
await
new
Promise
(
r
=
>
(
controller
.
ondeactivated
=
r
)
)
;
}
ok
(
!
controller
.
isActive
controller
is
inacitve
)
;
}
