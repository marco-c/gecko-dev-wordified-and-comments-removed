Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
components
/
pictureinpicture
/
tests
/
head
.
js
"
this
)
;
const
PAGE_NON_AUTOPLAY
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
mediacontrol
/
tests
/
browser
/
file_non_autoplay
.
html
"
;
const
testVideoId
=
"
video
"
;
add_task
(
async
function
setupTestingPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
mediacontrol
.
testingevents
.
enabled
"
true
]
[
"
media
.
mediacontrol
.
stopcontrol
.
timer
"
true
]
[
"
media
.
mediacontrol
.
stopcontrol
.
timer
.
ms
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
testStopMediaControlAfterPausingMedia
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createLoadedTabWrapper
(
PAGE_NON_AUTOPLAY
)
;
info
(
start
media
)
;
await
playMedia
(
tab
testVideoId
)
;
info
(
pause
media
and
the
stop
timer
would
stop
media
control
)
;
await
pauseMediaAndMediaControlShouldBeStopped
(
tab
testVideoId
)
;
info
(
remove
tab
)
;
await
tab
.
close
(
)
;
}
)
;
add_task
(
async
function
testNotToStopMediaControlForPIPVideo
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createLoadedTabWrapper
(
PAGE_NON_AUTOPLAY
)
;
info
(
start
media
)
;
await
playMedia
(
tab
testVideoId
)
;
info
(
trigger
PIP
mode
)
;
const
winPIP
=
await
triggerPictureInPicture
(
tab
.
linkedBrowser
testVideoId
)
;
info
(
pause
media
and
the
stop
timer
would
not
stop
media
control
)
;
await
pauseMedia
(
tab
testVideoId
)
;
info
(
pressing
'
play
'
key
should
start
PIP
video
again
)
;
await
generateMediaControlKeyEvent
(
"
play
"
)
;
await
checkOrWaitUntilMediaStartedPlaying
(
tab
testVideoId
)
;
info
(
remove
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
winPIP
)
;
await
tab
.
close
(
)
;
}
)
;
function
pauseMediaAndMediaControlShouldBeStopped
(
tab
testVideoId
)
{
const
controllerChangedPromise
=
waitUntilMainMediaControllerChanged
(
)
;
return
Promise
.
all
(
[
pauseMedia
(
tab
testVideoId
)
controllerChangedPromise
]
)
;
}
