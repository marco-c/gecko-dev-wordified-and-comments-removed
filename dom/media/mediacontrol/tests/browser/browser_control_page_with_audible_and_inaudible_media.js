const
PAGE_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
media
/
mediacontrol
/
tests
/
browser
/
file_audio_and_inaudible_media
.
html
"
;
add_task
(
async
function
setupTestingPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
mediacontrol
.
testingevents
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testSetPositionState
(
)
{
info
(
open
media
page
)
;
const
tab
=
await
createTabAndLoad
(
PAGE_URL
)
;
info
(
play
video1
(
audible
)
and
video2
(
inaudible
)
)
;
await
playBothAudibleAndInaudibleMedia
(
tab
)
;
info
(
pressing
'
pause
'
should
only
affect
video1
(
audible
)
)
;
await
generateMediaControlKeyEvent
(
"
pause
"
)
;
await
checkMediaPausedState
(
tab
{
shouldVideo1BePaused
:
true
shouldVideo2BePaused
:
false
}
)
;
info
(
make
video2
become
audible
then
it
would
be
able
to
be
controlled
)
;
await
unmuteInaudibleMedia
(
tab
)
;
info
(
pressing
'
pause
'
should
affect
video2
(
audible
)
;
await
generateMediaControlKeyEvent
(
"
pause
"
)
;
await
checkMediaPausedState
(
tab
{
shouldVideo1BePaused
:
true
shouldVideo2BePaused
:
true
}
)
;
info
(
remove
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
async
function
playBothAudibleAndInaudibleMedia
(
tab
)
{
const
playbackStateChangedPromise
=
waitUntilDisplayedPlaybackChanged
(
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
const
videos
=
content
.
document
.
getElementsByTagName
(
"
video
"
)
;
let
promises
=
[
]
;
for
(
let
video
of
videos
)
{
info
(
play
{
video
.
id
}
video
)
;
promises
.
push
(
video
.
play
(
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
)
;
await
playbackStateChangedPromise
;
}
function
checkMediaPausedState
(
tab
{
shouldVideo1BePaused
shouldVideo2BePaused
}
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
shouldVideo1BePaused
shouldVideo2BePaused
]
(
shouldVideo1BePaused
shouldVideo2BePaused
)
=
>
{
const
video1
=
content
.
document
.
getElementById
(
"
video1
"
)
;
const
video2
=
content
.
document
.
getElementById
(
"
video2
"
)
;
is
(
video1
.
paused
shouldVideo1BePaused
"
Correct
paused
state
for
video1
"
)
;
is
(
video2
.
paused
shouldVideo2BePaused
"
Correct
paused
state
for
video2
"
)
;
}
)
;
}
function
unmuteInaudibleMedia
(
tab
)
{
const
unmutePromise
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
const
video2
=
content
.
document
.
getElementById
(
"
video2
"
)
;
video2
.
muted
=
false
;
}
)
;
return
Promise
.
all
(
[
unmutePromise
waitUntilDisplayedPlaybackChanged
(
)
]
)
;
}
