#
include
"
ContentMediaController
.
h
"
#
include
"
MediaControlUtils
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
namespace
mozilla
{
namespace
dom
{
using
ControllerMap
=
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
ContentMediaController
>
>
;
static
StaticAutoPtr
<
ControllerMap
>
sControllers
;
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
ContentMediaController
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
static
already_AddRefed
<
ContentMediaController
>
GetContentMediaControllerFromBrowsingContext
(
BrowsingContext
*
aBrowsingContext
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sControllers
)
{
sControllers
=
new
ControllerMap
(
)
;
ClearOnShutdown
(
&
sControllers
)
;
}
RefPtr
<
BrowsingContext
>
topLevelBC
=
GetAliveTopBrowsingContext
(
aBrowsingContext
)
;
if
(
!
topLevelBC
)
{
return
nullptr
;
}
const
uint64_t
topLevelBCId
=
topLevelBC
-
>
Id
(
)
;
RefPtr
<
ContentMediaController
>
controller
;
if
(
!
sControllers
-
>
Contains
(
topLevelBCId
)
)
{
controller
=
new
ContentMediaController
(
topLevelBCId
)
;
sControllers
-
>
Put
(
topLevelBCId
controller
)
;
}
else
{
controller
=
sControllers
-
>
Get
(
topLevelBCId
)
;
}
return
controller
.
forget
(
)
;
}
ContentControlKeyEventReceiver
*
ContentControlKeyEventReceiver
:
:
Get
(
BrowsingContext
*
aBC
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ContentMediaController
>
controller
=
GetContentMediaControllerFromBrowsingContext
(
aBC
)
;
return
controller
?
static_cast
<
ContentControlKeyEventReceiver
*
>
(
controller
.
get
(
)
)
:
nullptr
;
}
ContentMediaAgent
*
ContentMediaAgent
:
:
Get
(
BrowsingContext
*
aBC
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ContentMediaController
>
controller
=
GetContentMediaControllerFromBrowsingContext
(
aBC
)
;
return
controller
?
static_cast
<
ContentMediaAgent
*
>
(
controller
.
get
(
)
)
:
nullptr
;
}
ContentMediaController
:
:
ContentMediaController
(
uint64_t
aId
)
:
mTopLevelBrowsingContextId
(
aId
)
{
}
void
ContentMediaController
:
:
AddReceiver
(
ContentControlKeyEventReceiver
*
aListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mReceivers
.
AppendElement
(
aListener
)
;
}
void
ContentMediaController
:
:
RemoveReceiver
(
ContentControlKeyEventReceiver
*
aListener
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mReceivers
.
RemoveElement
(
aListener
)
;
if
(
mReceivers
.
IsEmpty
(
)
&
&
sControllers
)
{
sControllers
-
>
Remove
(
mTopLevelBrowsingContextId
)
;
}
}
void
ContentMediaController
:
:
NotifyMediaStateChanged
(
const
ContentControlKeyEventReceiver
*
aMedia
ControlledMediaState
aState
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mReceivers
.
Contains
(
aMedia
)
)
{
return
;
}
RefPtr
<
BrowsingContext
>
bc
=
aMedia
-
>
GetBrowsingContext
(
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
LOG
(
"
Notify
media
%
s
in
BC
%
"
PRId64
ToControlledMediaStateStr
(
aState
)
bc
-
>
Id
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyMediaStateChanged
(
bc
aState
)
;
}
else
{
if
(
RefPtr
<
MediaController
>
controller
=
bc
-
>
Canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
NotifyMediaStateChanged
(
aState
)
;
}
}
}
void
ContentMediaController
:
:
NotifyAudibleStateChanged
(
const
ContentControlKeyEventReceiver
*
aMedia
bool
aAudible
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mReceivers
.
Contains
(
aMedia
)
)
{
return
;
}
RefPtr
<
BrowsingContext
>
bc
=
aMedia
-
>
GetBrowsingContext
(
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
LOG
(
"
Notify
media
became
%
s
in
BC
%
"
PRId64
aAudible
?
"
audible
"
:
"
inaudible
"
bc
-
>
Id
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyMediaAudibleChanged
(
bc
aAudible
)
;
}
else
{
if
(
RefPtr
<
MediaController
>
controller
=
bc
-
>
Canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
NotifyMediaAudibleChanged
(
aAudible
)
;
}
}
}
void
ContentMediaController
:
:
NotifyPictureInPictureModeChanged
(
const
ContentControlKeyEventReceiver
*
aMedia
bool
aEnabled
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mReceivers
.
Contains
(
aMedia
)
)
{
return
;
}
RefPtr
<
BrowsingContext
>
bc
=
aMedia
-
>
GetBrowsingContext
(
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
LOG
(
"
Notify
media
Picture
-
in
-
Picture
mode
'
%
s
'
in
BC
%
"
PRId64
aEnabled
?
"
enabled
"
:
"
disabled
"
bc
-
>
Id
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
ContentChild
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
Unused
<
<
contentChild
-
>
SendNotifyPictureInPictureModeChanged
(
bc
aEnabled
)
;
}
else
{
if
(
RefPtr
<
MediaController
>
controller
=
bc
-
>
Canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
SetIsInPictureInPictureMode
(
aEnabled
)
;
}
}
}
void
ContentMediaController
:
:
HandleEvent
(
MediaControlKeysEvent
aEvent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
LOG
(
"
Handle
'
%
s
'
event
receiver
num
=
%
zu
"
ToMediaControlKeysEventStr
(
aEvent
)
mReceivers
.
Length
(
)
)
;
for
(
auto
&
receiver
:
mReceivers
)
{
receiver
-
>
HandleEvent
(
aEvent
)
;
}
}
}
}
