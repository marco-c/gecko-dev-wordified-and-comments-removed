#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
AudioFocusManager
.
h
"
#
include
"
MediaController
.
h
"
#
include
"
MediaControlKeysManager
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MediaControlService
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
RefPtr
<
MediaControlService
>
GetService
(
)
;
AudioFocusManager
&
GetAudioFocusManager
(
)
{
return
mAudioFocusManager
;
}
MediaControlKeysEventSource
*
GetMediaControlKeysEventSource
(
)
{
return
mMediaControlKeysManager
;
}
bool
RegisterActiveMediaController
(
MediaController
*
aController
)
;
bool
UnregisterActiveMediaController
(
MediaController
*
aController
)
;
uint64_t
GetActiveControllersNum
(
)
const
;
MediaController
*
GetMainController
(
)
const
;
MediaEventSource
<
uint64_t
>
&
MediaControllerAmountChangedEvent
(
)
{
return
mMediaControllerAmountChangedEvent
;
}
void
GenerateMediaControlKeysTestEvent
(
MediaControlKeysEvent
aEvent
)
;
MediaMetadataBase
GetMainControllerMediaMetadata
(
)
const
;
private
:
MediaControlService
(
)
;
~
MediaControlService
(
)
;
class
ControllerManager
final
{
public
:
explicit
ControllerManager
(
MediaControlService
*
aService
)
;
~
ControllerManager
(
)
=
default
;
bool
AddController
(
MediaController
*
aController
)
;
bool
RemoveController
(
MediaController
*
aController
)
;
void
Shutdown
(
)
;
MediaController
*
GetMainController
(
)
const
;
MediaController
*
GetControllerById
(
uint64_t
aId
)
const
;
uint64_t
GetControllersNum
(
)
const
;
void
ControllerPlaybackStateChanged
(
PlaybackState
aState
)
;
void
ControllerMetadataChanged
(
const
MediaMetadataBase
&
aMetadata
)
;
private
:
void
UpdateMainController
(
MediaController
*
aController
)
;
void
ConnectToMainControllerEvents
(
)
;
void
DisconnectMainControllerEvents
(
)
;
nsTArray
<
RefPtr
<
MediaController
>
>
mControllers
;
RefPtr
<
MediaController
>
mMainController
;
RefPtr
<
MediaControlKeysEventSource
>
mSource
;
MediaEventListener
mPlayStateChangedListener
;
MediaEventListener
mMetadataChangedListener
;
}
;
void
Init
(
)
;
void
Shutdown
(
)
;
AudioFocusManager
mAudioFocusManager
;
RefPtr
<
MediaControlKeysManager
>
mMediaControlKeysManager
;
RefPtr
<
MediaControlKeysEventListener
>
mMediaKeysHandler
;
MediaEventProducer
<
uint64_t
>
mMediaControllerAmountChangedEvent
;
UniquePtr
<
ControllerManager
>
mControllerManager
;
}
;
}
}
#
endif
