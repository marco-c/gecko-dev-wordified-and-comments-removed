#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
AudioFocusManager
.
h
"
#
include
"
MediaController
.
h
"
#
include
"
MediaControlKeyManager
.
h
"
#
include
"
mozilla
/
dom
/
MediaControllerBinding
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
dom
{
class
MediaControlService
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
RefPtr
<
MediaControlService
>
GetService
(
)
;
static
void
GenerateMediaControlKey
(
const
GlobalObject
&
global
MediaControlKey
aKey
)
;
static
void
GetCurrentActiveMediaMetadata
(
const
GlobalObject
&
aGlobal
MediaMetadataInit
&
aMetadata
)
;
static
MediaSessionPlaybackState
GetCurrentMediaSessionPlaybackState
(
GlobalObject
&
aGlobal
)
;
AudioFocusManager
&
GetAudioFocusManager
(
)
{
return
mAudioFocusManager
;
}
MediaControlKeySource
*
GetMediaControlKeySource
(
)
{
return
mMediaControlKeyManager
;
}
bool
RegisterActiveMediaController
(
MediaController
*
aController
)
;
bool
UnregisterActiveMediaController
(
MediaController
*
aController
)
;
uint64_t
GetActiveControllersNum
(
)
const
;
void
NotifyControllerPlaybackStateChanged
(
MediaController
*
aController
)
;
void
RequestUpdateMainController
(
MediaController
*
aController
)
;
MediaController
*
GetMainController
(
)
const
;
void
GenerateTestMediaControlKey
(
MediaControlKey
aKey
)
;
MediaMetadataBase
GetMainControllerMediaMetadata
(
)
const
;
MediaSessionPlaybackState
GetMainControllerPlaybackState
(
)
const
;
nsString
GetFallbackTitle
(
)
const
;
void
NotifyMediaControlHasEverBeenUsed
(
)
;
void
NotifyMediaControlHasEverBeenEnabled
(
)
;
private
:
MediaControlService
(
)
;
~
MediaControlService
(
)
;
class
ControllerManager
final
{
public
:
explicit
ControllerManager
(
MediaControlService
*
aService
)
;
~
ControllerManager
(
)
=
default
;
using
MediaKeysArray
=
nsTArray
<
MediaControlKey
>
;
using
LinkedListControllerPtr
=
LinkedListElement
<
RefPtr
<
MediaController
>
>
*
;
using
ConstLinkedListControllerPtr
=
const
LinkedListElement
<
RefPtr
<
MediaController
>
>
*
;
bool
AddController
(
MediaController
*
aController
)
;
bool
RemoveController
(
MediaController
*
aController
)
;
void
UpdateMainControllerIfNeeded
(
MediaController
*
aController
)
;
void
Shutdown
(
)
;
MediaController
*
GetMainController
(
)
const
;
bool
Contains
(
MediaController
*
aController
)
const
;
uint64_t
GetControllersNum
(
)
const
;
void
MainControllerPlaybackStateChanged
(
MediaSessionPlaybackState
aState
)
;
void
MainControllerMetadataChanged
(
const
MediaMetadataBase
&
aMetadata
)
;
private
:
enum
class
InsertOptions
{
eInsertAsMainController
eInsertAsNormalController
}
;
void
ReorderGivenController
(
MediaController
*
aController
InsertOptions
aOption
)
;
void
UpdateMainControllerInternal
(
MediaController
*
aController
)
;
void
ConnectMainControllerEvents
(
)
;
void
DisconnectMainControllerEvents
(
)
;
LinkedList
<
RefPtr
<
MediaController
>
>
mControllers
;
RefPtr
<
MediaController
>
mMainController
;
RefPtr
<
MediaControlKeySource
>
mSource
;
MediaEventListener
mMetadataChangedListener
;
MediaEventListener
mSupportedKeysChangedListener
;
MediaEventListener
mFullScreenChangedListener
;
MediaEventListener
mPictureInPictureModeChangedListener
;
MediaEventListener
mPositionChangedListener
;
}
;
void
Init
(
)
;
void
Shutdown
(
)
;
AudioFocusManager
mAudioFocusManager
;
RefPtr
<
MediaControlKeyManager
>
mMediaControlKeyManager
;
RefPtr
<
MediaControlKeyListener
>
mMediaKeysHandler
;
MediaEventProducer
<
uint64_t
>
mMediaControllerAmountChangedEvent
;
UniquePtr
<
ControllerManager
>
mControllerManager
;
nsString
mFallbackTitle
;
void
UpdateTelemetryUsageProbe
(
)
;
bool
mHasEverUsedMediaControl
=
false
;
bool
mHasEverEnabledMediaControl
=
false
;
}
;
}
#
endif
