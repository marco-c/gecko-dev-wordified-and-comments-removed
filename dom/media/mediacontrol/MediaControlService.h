#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLSERVICE_H_
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
AudioFocusManager
.
h
"
#
include
"
MediaController
.
h
"
#
include
"
MediaControlKeysManager
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MediaControlService
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
RefPtr
<
MediaControlService
>
GetService
(
)
;
RefPtr
<
MediaController
>
GetOrCreateControllerById
(
const
uint64_t
aId
)
const
;
RefPtr
<
MediaController
>
GetControllerById
(
const
uint64_t
aId
)
const
;
AudioFocusManager
&
GetAudioFocusManager
(
)
{
return
mAudioFocusManager
;
}
MediaControlKeysEventSource
*
GetMediaControlKeysEventSource
(
)
{
return
mMediaControlKeysManager
;
}
void
AddMediaController
(
const
RefPtr
<
MediaController
>
&
aController
)
;
void
RemoveMediaController
(
const
RefPtr
<
MediaController
>
&
aController
)
;
uint64_t
GetControllersNum
(
)
const
;
already_AddRefed
<
MediaController
>
GetLastAddedController
(
)
;
MediaEventSource
<
uint64_t
>
&
MediaControllerAmountChangedEvent
(
)
{
return
mMediaControllerAmountChangedEvent
;
}
private
:
MediaControlService
(
)
;
~
MediaControlService
(
)
;
void
Init
(
)
;
void
Shutdown
(
)
;
void
PlayAllControllers
(
)
const
;
void
PauseAllControllers
(
)
const
;
void
StopAllControllers
(
)
const
;
void
ShutdownAllControllers
(
)
const
;
nsDataHashtable
<
nsUint64HashKey
RefPtr
<
MediaController
>
>
mControllers
;
nsTArray
<
uint64_t
>
mControllerHistory
;
AudioFocusManager
mAudioFocusManager
;
RefPtr
<
MediaControlKeysManager
>
mMediaControlKeysManager
;
RefPtr
<
MediaControlKeysEventListener
>
mMediaKeysHandler
;
MediaEventProducer
<
uint64_t
>
mMediaControllerAmountChangedEvent
;
}
;
}
}
#
endif
