#
include
"
PlaybackController
.
h
"
#
include
"
nsIAudioChannelAgent
.
h
"
#
include
"
MediaControlUtils
.
h
"
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
PlaybackController
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
PlaybackController
:
:
PlaybackController
(
BrowsingContext
*
aContext
)
{
MOZ_ASSERT
(
aContext
)
;
mBC
=
aContext
;
}
void
PlaybackController
:
:
Play
(
)
{
LOG
(
"
Handle
'
play
'
in
default
behavior
"
)
;
RefPtr
<
ContentControlKeyEventReceiver
>
receiver
=
ContentControlKeyEventReceiver
:
:
Get
(
mBC
)
;
if
(
receiver
)
{
receiver
-
>
OnKeyPressed
(
MediaControlKeysEvent
:
:
ePlay
)
;
}
}
;
void
PlaybackController
:
:
Pause
(
)
{
LOG
(
"
Handle
'
pause
'
in
default
behavior
"
)
;
RefPtr
<
ContentControlKeyEventReceiver
>
receiver
=
ContentControlKeyEventReceiver
:
:
Get
(
mBC
)
;
if
(
receiver
)
{
receiver
-
>
OnKeyPressed
(
MediaControlKeysEvent
:
:
ePause
)
;
}
}
void
PlaybackController
:
:
SeekBackward
(
)
{
return
;
}
void
PlaybackController
:
:
SeekForward
(
)
{
return
;
}
void
PlaybackController
:
:
PreviousTrack
(
)
{
return
;
}
void
PlaybackController
:
:
NextTrack
(
)
{
return
;
}
void
PlaybackController
:
:
SkipAd
(
)
{
return
;
}
void
PlaybackController
:
:
Stop
(
)
{
LOG
(
"
Handle
'
stop
'
in
default
behavior
"
)
;
RefPtr
<
ContentControlKeyEventReceiver
>
receiver
=
ContentControlKeyEventReceiver
:
:
Get
(
mBC
)
;
if
(
receiver
)
{
receiver
-
>
OnKeyPressed
(
MediaControlKeysEvent
:
:
eStop
)
;
}
}
void
PlaybackController
:
:
SeekTo
(
)
{
return
;
}
void
MediaActionHandler
:
:
HandleMediaControlKeysEvent
(
BrowsingContext
*
aContext
MediaControlKeysEvent
aEvent
)
{
PlaybackController
controller
(
aContext
)
;
switch
(
aEvent
)
{
case
MediaControlKeysEvent
:
:
ePlay
:
controller
.
Play
(
)
;
break
;
case
MediaControlKeysEvent
:
:
ePause
:
controller
.
Pause
(
)
;
break
;
case
MediaControlKeysEvent
:
:
eStop
:
controller
.
Stop
(
)
;
break
;
case
MediaControlKeysEvent
:
:
ePlayPause
:
case
MediaControlKeysEvent
:
:
ePrevTrack
:
case
MediaControlKeysEvent
:
:
eNextTrack
:
case
MediaControlKeysEvent
:
:
eSeekBackward
:
case
MediaControlKeysEvent
:
:
eSeekForward
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
event
.
"
)
;
}
;
}
}
}
