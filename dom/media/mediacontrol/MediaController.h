#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLLER_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLLER_H_
#
include
"
ContentMediaController
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
enum
class
MediaControlKeysEvent
:
uint32_t
;
enum
class
PlaybackState
:
uint8_t
{
ePlaying
ePaused
eStopped
}
;
class
MediaController
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaController
)
;
explicit
MediaController
(
uint64_t
aContextId
)
;
void
Play
(
)
;
void
Pause
(
)
;
void
Stop
(
)
;
void
Shutdown
(
)
;
uint64_t
Id
(
)
const
;
bool
IsAudible
(
)
const
;
uint64_t
ControlledMediaNum
(
)
const
;
PlaybackState
GetState
(
)
const
;
MediaEventSource
<
PlaybackState
>
&
PlaybackStateChangedEvent
(
)
{
return
mPlaybackStateChangedEvent
;
}
void
NotifyMediaStateChanged
(
ControlledMediaState
aState
)
;
void
NotifyMediaAudibleChanged
(
bool
aAudible
)
;
private
:
~
MediaController
(
)
;
void
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
aEvent
)
;
void
IncreaseControlledMediaNum
(
)
;
void
DecreaseControlledMediaNum
(
)
;
void
IncreasePlayingControlledMediaNum
(
)
;
void
DecreasePlayingControlledMediaNum
(
)
;
void
Activate
(
)
;
void
Deactivate
(
)
;
void
SetPlayState
(
PlaybackState
aState
)
;
uint64_t
mBrowsingContextId
;
bool
mAudible
=
false
;
int64_t
mControlledMediaNum
=
0
;
int64_t
mPlayingControlledMediaNum
=
0
;
PlaybackState
mState
=
PlaybackState
:
:
eStopped
;
MediaEventProducer
<
PlaybackState
>
mPlaybackStateChangedEvent
;
}
;
}
}
#
endif
