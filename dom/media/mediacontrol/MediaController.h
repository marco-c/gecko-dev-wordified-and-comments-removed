#
ifndef
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLLER_H_
#
define
DOM_MEDIA_MEDIACONTROL_MEDIACONTROLLER_H_
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaPlaybackStatus
.
h
"
#
include
"
MediaStatusManager
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaControllerBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaSession
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
namespace
mozilla
:
:
dom
{
class
BrowsingContext
;
class
IMediaController
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
Focus
(
)
=
0
;
virtual
void
Play
(
)
=
0
;
virtual
void
Pause
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
void
PrevTrack
(
)
=
0
;
virtual
void
NextTrack
(
)
=
0
;
virtual
void
SeekBackward
(
double
aSeekOffset
)
=
0
;
virtual
void
SeekForward
(
double
aSeekOffset
)
=
0
;
virtual
void
SkipAd
(
)
=
0
;
virtual
void
SeekTo
(
double
aSeekTime
bool
aFastSeek
)
=
0
;
virtual
uint64_t
Id
(
)
const
=
0
;
virtual
bool
IsAudible
(
)
const
=
0
;
virtual
bool
IsPlaying
(
)
const
=
0
;
virtual
bool
IsActive
(
)
const
=
0
;
}
;
class
MediaController
final
:
public
DOMEventTargetHelper
public
IMediaController
public
LinkedListElement
<
RefPtr
<
MediaController
>
>
public
MediaStatusManager
public
nsITimerCallback
public
nsINamed
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
MediaController
DOMEventTargetHelper
)
explicit
MediaController
(
uint64_t
aBrowsingContextId
)
;
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetSupportedKeys
(
nsTArray
<
MediaControlKey
>
&
aRetVal
)
const
;
void
GetMetadata
(
MediaMetadataInit
&
aMetadata
ErrorResult
&
aRv
)
;
IMPL_EVENT_HANDLER
(
activated
)
;
IMPL_EVENT_HANDLER
(
deactivated
)
;
IMPL_EVENT_HANDLER
(
metadatachange
)
;
IMPL_EVENT_HANDLER
(
supportedkeyschange
)
;
IMPL_EVENT_HANDLER
(
playbackstatechange
)
;
IMPL_EVENT_HANDLER
(
positionstatechange
)
;
void
Focus
(
)
override
;
void
Play
(
)
override
;
void
Pause
(
)
override
;
void
Stop
(
)
override
;
void
PrevTrack
(
)
override
;
void
NextTrack
(
)
override
;
void
SeekBackward
(
double
aSeekOffset
)
override
;
void
SeekForward
(
double
aSeekOffset
)
override
;
void
SkipAd
(
)
override
;
void
SeekTo
(
double
aSeekTime
bool
aFastSeek
)
override
;
uint64_t
Id
(
)
const
override
;
bool
IsAudible
(
)
const
override
;
bool
IsPlaying
(
)
const
override
;
bool
IsActive
(
)
const
override
;
void
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
override
;
void
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
override
;
void
SetIsInPictureInPictureMode
(
uint64_t
aBrowsingContextId
bool
aIsInPictureInPictureMode
)
override
;
void
NotifyMediaFullScreenState
(
uint64_t
aBrowsingContextId
bool
aIsInFullScreen
)
override
;
void
Shutdown
(
)
;
MediaEventSource
<
nsTArray
<
MediaControlKey
>
>
&
SupportedKeysChangedEvent
(
)
{
return
mSupportedKeysChangedEvent
;
}
MediaEventSource
<
bool
>
&
FullScreenChangedEvent
(
)
{
return
mFullScreenChangedEvent
;
}
MediaEventSource
<
bool
>
&
PictureInPictureModeChangedEvent
(
)
{
return
mPictureInPictureModeChangedEvent
;
}
CopyableTArray
<
MediaControlKey
>
GetSupportedMediaKeys
(
)
const
;
bool
IsBeingUsedInPIPModeOrFullscreen
(
)
const
;
void
Select
(
)
const
;
void
Unselect
(
)
const
;
private
:
~
MediaController
(
)
;
void
HandleActualPlaybackStateChanged
(
)
;
void
UpdateMediaControlActionToContentMediaIfNeeded
(
const
MediaControlAction
&
aAction
)
;
void
HandleSupportedMediaSessionActionsChanged
(
const
nsTArray
<
MediaSessionAction
>
&
aSupportedAction
)
;
void
HandlePositionStateChanged
(
const
Maybe
<
PositionState
>
&
aState
)
;
void
HandleMetadataChanged
(
const
MediaMetadataBase
&
aMetadata
)
;
void
Activate
(
)
;
void
Deactivate
(
)
;
void
UpdateActivatedStateIfNeeded
(
)
;
bool
ShouldActivateController
(
)
const
;
bool
ShouldDeactivateController
(
)
const
;
void
UpdateDeactivationTimerIfNeeded
(
)
;
void
DispatchAsyncEvent
(
const
nsAString
&
aName
)
;
void
DispatchAsyncEvent
(
already_AddRefed
<
Event
>
aEvent
)
;
bool
IsMainController
(
)
const
;
void
ForceToBecomeMainControllerIfNeeded
(
)
;
bool
ShouldRequestForMainController
(
)
const
;
bool
ShouldPropagateActionToAllContexts
(
const
MediaControlAction
&
aAction
)
const
;
bool
mIsActive
=
false
;
bool
mShutdown
=
false
;
bool
mIsInPictureInPictureMode
=
false
;
bool
mIsInFullScreenMode
=
false
;
MediaEventListener
mSupportedActionsChangedListener
;
MediaEventProducer
<
nsTArray
<
MediaControlKey
>
>
mSupportedKeysChangedEvent
;
MediaEventListener
mPlaybackChangedListener
;
MediaEventListener
mPositionStateChangedListener
;
MediaEventListener
mMetadataChangedListener
;
MediaEventProducer
<
bool
>
mFullScreenChangedEvent
;
MediaEventProducer
<
bool
>
mPictureInPictureModeChangedEvent
;
CopyableTArray
<
MediaControlKey
>
mSupportedKeys
;
nsCOMPtr
<
nsITimer
>
mDeactivationTimer
;
}
;
}
#
endif
