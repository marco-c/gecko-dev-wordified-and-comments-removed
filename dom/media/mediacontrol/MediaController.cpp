#
include
"
MediaController
.
h
"
#
include
"
MediaControlService
.
h
"
#
include
"
MediaControlUtils
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MediaSessionUtils
.
h
"
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
MediaController
=
%
p
Id
=
%
"
PRId64
"
"
msg
this
this
-
>
Id
(
)
\
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
MediaController
:
:
MediaController
(
uint64_t
aContextId
)
:
MediaSessionController
(
aContextId
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
MediaController
only
runs
on
Chrome
process
!
"
)
;
LOG
(
"
Create
controller
%
"
PRId64
Id
(
)
)
;
}
MediaController
:
:
~
MediaController
(
)
{
LOG
(
"
Destroy
controller
%
"
PRId64
Id
(
)
)
;
if
(
!
mShutdown
)
{
Shutdown
(
)
;
}
}
;
void
MediaController
:
:
Focus
(
)
{
LOG
(
"
Focus
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
eFocus
)
;
}
void
MediaController
:
:
Play
(
)
{
LOG
(
"
Play
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
ePlay
)
;
}
void
MediaController
:
:
Pause
(
)
{
LOG
(
"
Pause
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
ePause
)
;
}
void
MediaController
:
:
PrevTrack
(
)
{
LOG
(
"
Prev
Track
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
ePrevTrack
)
;
}
void
MediaController
:
:
NextTrack
(
)
{
LOG
(
"
Next
Track
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
eNextTrack
)
;
}
void
MediaController
:
:
SeekBackward
(
)
{
LOG
(
"
Seek
Backward
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
eSeekBackward
)
;
}
void
MediaController
:
:
SeekForward
(
)
{
LOG
(
"
Seek
Forward
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
eSeekForward
)
;
}
void
MediaController
:
:
Stop
(
)
{
LOG
(
"
Stop
"
)
;
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
:
:
eStop
)
;
}
void
MediaController
:
:
UpdateMediaControlKeysEventToContentMediaIfNeeded
(
MediaControlKeysEvent
aEvent
)
{
if
(
!
IsAnyMediaBeingControlled
(
)
|
|
mShutdown
)
{
return
;
}
RefPtr
<
BrowsingContext
>
context
=
mActiveMediaSessionContextId
?
BrowsingContext
:
:
Get
(
*
mActiveMediaSessionContextId
)
:
BrowsingContext
:
:
Get
(
mTopLevelBCId
)
;
if
(
context
&
&
!
context
-
>
IsDiscarded
(
)
)
{
context
-
>
Canonical
(
)
-
>
UpdateMediaControlKeysEvent
(
aEvent
)
;
}
}
void
MediaController
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
!
mShutdown
"
Do
not
call
shutdown
twice
!
"
)
;
Deactivate
(
)
;
mShutdown
=
true
;
}
void
MediaController
:
:
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
{
if
(
mShutdown
)
{
return
;
}
mMediaStatus
.
UpdateMediaPlaybackState
(
aBrowsingContextId
aState
)
;
if
(
ShouldActivateController
(
)
)
{
Activate
(
)
;
}
else
if
(
ShouldDeactivateController
(
)
)
{
Deactivate
(
)
;
}
else
if
(
mMediaStatus
.
IsPlaying
(
)
)
{
SetGuessedPlayState
(
MediaSessionPlaybackState
:
:
Playing
)
;
}
else
if
(
!
mMediaStatus
.
IsPlaying
(
)
)
{
SetGuessedPlayState
(
MediaSessionPlaybackState
:
:
Paused
)
;
}
}
void
MediaController
:
:
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
{
if
(
mShutdown
)
{
return
;
}
bool
oldAudible
=
IsAudible
(
)
;
mMediaStatus
.
UpdateMediaAudibleState
(
aBrowsingContextId
aState
)
;
if
(
IsAudible
(
)
=
=
oldAudible
)
{
return
;
}
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
MOZ_ASSERT
(
service
)
;
if
(
IsAudible
(
)
)
{
service
-
>
GetAudioFocusManager
(
)
.
RequestAudioFocus
(
this
)
;
}
else
{
service
-
>
GetAudioFocusManager
(
)
.
RevokeAudioFocus
(
this
)
;
}
}
bool
MediaController
:
:
ShouldActivateController
(
)
const
{
MOZ_ASSERT
(
!
mShutdown
)
;
return
IsAnyMediaBeingControlled
(
)
&
&
!
mIsRegisteredToService
;
}
bool
MediaController
:
:
ShouldDeactivateController
(
)
const
{
MOZ_ASSERT
(
!
mShutdown
)
;
return
!
IsAnyMediaBeingControlled
(
)
&
&
mIsRegisteredToService
;
}
void
MediaController
:
:
Activate
(
)
{
LOG
(
"
Activate
"
)
;
MOZ_ASSERT
(
!
mShutdown
)
;
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
if
(
service
&
&
!
mIsRegisteredToService
)
{
mIsRegisteredToService
=
service
-
>
RegisterActiveMediaController
(
this
)
;
MOZ_ASSERT
(
mIsRegisteredToService
"
Fail
to
register
controller
!
"
)
;
}
}
void
MediaController
:
:
Deactivate
(
)
{
LOG
(
"
Deactivate
"
)
;
MOZ_ASSERT
(
!
mShutdown
)
;
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
if
(
service
)
{
service
-
>
GetAudioFocusManager
(
)
.
RevokeAudioFocus
(
this
)
;
if
(
mIsRegisteredToService
)
{
mIsRegisteredToService
=
!
service
-
>
UnregisterActiveMediaController
(
this
)
;
MOZ_ASSERT
(
!
mIsRegisteredToService
"
Fail
to
unregister
controller
!
"
)
;
}
}
}
void
MediaController
:
:
SetDeclaredPlaybackState
(
uint64_t
aSessionContextId
MediaSessionPlaybackState
aState
)
{
MediaSessionController
:
:
SetDeclaredPlaybackState
(
aSessionContextId
aState
)
;
UpdateActualPlaybackState
(
)
;
}
void
MediaController
:
:
SetGuessedPlayState
(
MediaSessionPlaybackState
aState
)
{
if
(
mShutdown
|
|
mGuessedPlaybackState
=
=
aState
)
{
return
;
}
LOG
(
"
SetGuessedPlayState
:
'
%
s
'
"
ToMediaSessionPlaybackStateStr
(
aState
)
)
;
mGuessedPlaybackState
=
aState
;
UpdateActualPlaybackState
(
)
;
}
void
MediaController
:
:
UpdateActualPlaybackState
(
)
{
MediaSessionPlaybackState
newState
=
GetCurrentDeclaredPlaybackState
(
)
=
=
MediaSessionPlaybackState
:
:
Playing
?
MediaSessionPlaybackState
:
:
Playing
:
mGuessedPlaybackState
;
if
(
mActualPlaybackState
=
=
newState
)
{
return
;
}
mActualPlaybackState
=
newState
;
LOG
(
"
UpdateActualPlaybackState
:
'
%
s
'
"
ToMediaSessionPlaybackStateStr
(
mActualPlaybackState
)
)
;
if
(
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
)
{
service
-
>
NotifyControllerPlaybackStateChanged
(
this
)
;
}
}
void
MediaController
:
:
SetIsInPictureInPictureMode
(
bool
aIsInPictureInPictureMode
)
{
if
(
mIsInPictureInPictureMode
=
=
aIsInPictureInPictureMode
)
{
return
;
}
LOG
(
"
Set
IsInPictureInPictureMode
to
%
s
"
aIsInPictureInPictureMode
?
"
true
"
:
"
false
"
)
;
mIsInPictureInPictureMode
=
aIsInPictureInPictureMode
;
if
(
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
service
&
&
mIsInPictureInPictureMode
)
{
service
-
>
NotifyControllerBeingUsedInPictureInPictureMode
(
this
)
;
}
}
bool
MediaController
:
:
IsInPictureInPictureMode
(
)
const
{
return
mIsInPictureInPictureMode
;
}
MediaSessionPlaybackState
MediaController
:
:
GetState
(
)
const
{
return
mActualPlaybackState
;
}
bool
MediaController
:
:
IsAudible
(
)
const
{
return
mGuessedPlaybackState
=
=
MediaSessionPlaybackState
:
:
Playing
&
&
mMediaStatus
.
IsAudible
(
)
;
}
bool
MediaController
:
:
IsAnyMediaBeingControlled
(
)
const
{
return
mMediaStatus
.
IsAnyMediaBeingControlled
(
)
;
}
}
}
