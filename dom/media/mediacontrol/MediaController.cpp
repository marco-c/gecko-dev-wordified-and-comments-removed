#
include
"
MediaController
.
h
"
#
include
"
MediaControlService
.
h
"
#
include
"
MediaControlUtils
.
h
"
#
include
"
MediaControlKeySource
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
MediaSession
.
h
"
#
include
"
mozilla
/
dom
/
PositionStateEvent
.
h
"
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
MediaController
=
%
p
Id
=
%
"
PRId64
"
"
msg
this
this
-
>
Id
(
)
\
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
MediaController
DOMEventTargetHelper
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
MediaController
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
MediaController
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
nsISupports
*
MediaController
:
:
GetParentObject
(
)
const
{
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
Get
(
Id
(
)
)
;
return
bc
;
}
JSObject
*
MediaController
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaController_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
MediaController
:
:
GetSupportedKeys
(
nsTArray
<
MediaControlKey
>
&
aRetVal
)
const
{
aRetVal
.
Clear
(
)
;
for
(
const
auto
&
key
:
mSupportedKeys
)
{
aRetVal
.
AppendElement
(
key
)
;
}
}
void
MediaController
:
:
GetMetadata
(
MediaMetadataInit
&
aMetadata
ErrorResult
&
aRv
)
{
if
(
!
IsActive
(
)
|
|
mShutdown
)
{
aRv
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
;
}
const
MediaMetadataBase
metadata
=
GetCurrentMediaMetadata
(
)
;
aMetadata
.
mTitle
=
metadata
.
mTitle
;
aMetadata
.
mArtist
=
metadata
.
mArtist
;
aMetadata
.
mAlbum
=
metadata
.
mAlbum
;
for
(
const
auto
&
artwork
:
metadata
.
mArtwork
)
{
if
(
MediaImage
*
image
=
aMetadata
.
mArtwork
.
AppendElement
(
fallible
)
)
{
image
-
>
mSrc
=
artwork
.
mSrc
;
image
-
>
mSizes
=
artwork
.
mSizes
;
image
-
>
mType
=
artwork
.
mType
;
}
else
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
}
}
static
const
MediaControlKey
sDefaultSupportedKeys
[
]
=
{
MediaControlKey
:
:
Focus
MediaControlKey
:
:
Play
MediaControlKey
:
:
Pause
MediaControlKey
:
:
Playpause
MediaControlKey
:
:
Stop
}
;
static
void
GetDefaultSupportedKeys
(
nsTArray
<
MediaControlKey
>
&
aKeys
)
{
for
(
const
auto
&
key
:
sDefaultSupportedKeys
)
{
aKeys
.
AppendElement
(
key
)
;
}
}
MediaController
:
:
MediaController
(
uint64_t
aBrowsingContextId
)
:
MediaStatusManager
(
aBrowsingContextId
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
MediaController
only
runs
on
Chrome
process
!
"
)
;
LOG
(
"
Create
controller
%
"
PRId64
Id
(
)
)
;
GetDefaultSupportedKeys
(
mSupportedKeys
)
;
mSupportedActionsChangedListener
=
SupportedActionsChangedEvent
(
)
.
Connect
(
AbstractThread
:
:
MainThread
(
)
this
&
MediaController
:
:
HandleSupportedMediaSessionActionsChanged
)
;
mPositionStateChangedListener
=
PositionChangedEvent
(
)
.
Connect
(
AbstractThread
:
:
MainThread
(
)
this
&
MediaController
:
:
HandlePositionStateChanged
)
;
mMetadataChangedListener
=
MetadataChangedEvent
(
)
.
Connect
(
AbstractThread
:
:
MainThread
(
)
this
&
MediaController
:
:
HandleMetadataChanged
)
;
}
MediaController
:
:
~
MediaController
(
)
{
LOG
(
"
Destroy
controller
%
"
PRId64
Id
(
)
)
;
if
(
!
mShutdown
)
{
Shutdown
(
)
;
}
}
;
void
MediaController
:
:
Focus
(
)
{
LOG
(
"
Focus
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Focus
)
)
;
}
void
MediaController
:
:
Play
(
)
{
LOG
(
"
Play
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Play
)
)
;
}
void
MediaController
:
:
Pause
(
)
{
LOG
(
"
Pause
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Pause
)
)
;
}
void
MediaController
:
:
PrevTrack
(
)
{
LOG
(
"
Prev
Track
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Previoustrack
)
)
;
}
void
MediaController
:
:
NextTrack
(
)
{
LOG
(
"
Next
Track
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Nexttrack
)
)
;
}
void
MediaController
:
:
SeekBackward
(
)
{
LOG
(
"
Seek
Backward
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Seekbackward
)
)
;
}
void
MediaController
:
:
SeekForward
(
)
{
LOG
(
"
Seek
Forward
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Seekforward
)
)
;
}
void
MediaController
:
:
SkipAd
(
)
{
LOG
(
"
Skip
Ad
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Skipad
)
)
;
}
void
MediaController
:
:
SeekTo
(
double
aSeekTime
bool
aFastSeek
)
{
LOG
(
"
Seek
To
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Seekto
SeekDetails
(
aSeekTime
aFastSeek
)
)
)
;
}
void
MediaController
:
:
Stop
(
)
{
LOG
(
"
Stop
"
)
;
UpdateMediaControlActionToContentMediaIfNeeded
(
MediaControlAction
(
MediaControlKey
:
:
Stop
)
)
;
}
uint64_t
MediaController
:
:
Id
(
)
const
{
return
mTopLevelBrowsingContextId
;
}
bool
MediaController
:
:
IsAudible
(
)
const
{
return
IsMediaAudible
(
)
;
}
bool
MediaController
:
:
IsPlaying
(
)
const
{
return
IsMediaPlaying
(
)
;
}
bool
MediaController
:
:
IsActive
(
)
const
{
return
mIsActive
;
}
;
bool
MediaController
:
:
ShouldPropagateActionToAllContexts
(
const
MediaControlAction
&
aAction
)
const
{
return
aAction
.
mKey
=
=
MediaControlKey
:
:
Play
|
|
aAction
.
mKey
=
=
MediaControlKey
:
:
Pause
|
|
aAction
.
mKey
=
=
MediaControlKey
:
:
Stop
;
}
void
MediaController
:
:
UpdateMediaControlActionToContentMediaIfNeeded
(
const
MediaControlAction
&
aAction
)
{
if
(
!
mIsActive
|
|
mShutdown
)
{
return
;
}
const
bool
propateToAll
=
ShouldPropagateActionToAllContexts
(
aAction
)
;
const
uint64_t
targetContextId
=
propateToAll
|
|
!
mActiveMediaSessionContextId
?
Id
(
)
:
*
mActiveMediaSessionContextId
;
RefPtr
<
BrowsingContext
>
context
=
BrowsingContext
:
:
Get
(
targetContextId
)
;
if
(
!
context
|
|
context
-
>
IsDiscarded
(
)
)
{
return
;
}
if
(
propateToAll
)
{
context
-
>
PreOrderWalk
(
[
&
]
(
BrowsingContext
*
bc
)
{
bc
-
>
Canonical
(
)
-
>
UpdateMediaControlAction
(
aAction
)
;
}
)
;
}
else
{
context
-
>
Canonical
(
)
-
>
UpdateMediaControlAction
(
aAction
)
;
}
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
MOZ_ASSERT
(
service
)
;
service
-
>
NotifyMediaControlHasEverBeenUsed
(
)
;
}
void
MediaController
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
!
mShutdown
"
Do
not
call
shutdown
twice
!
"
)
;
Deactivate
(
)
;
mShutdown
=
true
;
mSupportedActionsChangedListener
.
DisconnectIfExists
(
)
;
mPositionStateChangedListener
.
DisconnectIfExists
(
)
;
mMetadataChangedListener
.
DisconnectIfExists
(
)
;
}
void
MediaController
:
:
NotifyMediaPlaybackChanged
(
uint64_t
aBrowsingContextId
MediaPlaybackState
aState
)
{
if
(
mShutdown
)
{
return
;
}
MediaStatusManager
:
:
NotifyMediaPlaybackChanged
(
aBrowsingContextId
aState
)
;
UpdateDeactivationTimerIfNeeded
(
)
;
UpdateActivatedStateIfNeeded
(
)
;
}
void
MediaController
:
:
UpdateDeactivationTimerIfNeeded
(
)
{
if
(
!
StaticPrefs
:
:
media_mediacontrol_stopcontrol_timer
(
)
)
{
return
;
}
bool
shouldBeAlwaysActive
=
IsPlaying
(
)
|
|
IsBeingUsedInPIPModeOrFullscreen
(
)
;
if
(
shouldBeAlwaysActive
&
&
mDeactivationTimer
)
{
LOG
(
"
Cancel
deactivation
timer
"
)
;
mDeactivationTimer
-
>
Cancel
(
)
;
mDeactivationTimer
=
nullptr
;
}
else
if
(
!
shouldBeAlwaysActive
&
&
!
mDeactivationTimer
)
{
nsresult
rv
=
NS_NewTimerWithCallback
(
getter_AddRefs
(
mDeactivationTimer
)
this
StaticPrefs
:
:
media_mediacontrol_stopcontrol_timer_ms
(
)
nsITimer
:
:
TYPE_ONE_SHOT
AbstractThread
:
:
MainThread
(
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
LOG
(
"
Create
a
deactivation
timer
"
)
;
}
else
{
LOG
(
"
Failed
to
create
a
deactivation
timer
"
)
;
}
}
}
bool
MediaController
:
:
IsBeingUsedInPIPModeOrFullscreen
(
)
const
{
return
mIsInPictureInPictureMode
|
|
mIsInFullScreenMode
;
}
NS_IMETHODIMP
MediaController
:
:
Notify
(
nsITimer
*
aTimer
)
{
mDeactivationTimer
=
nullptr
;
if
(
!
StaticPrefs
:
:
media_mediacontrol_stopcontrol_timer
(
)
)
{
return
NS_OK
;
}
if
(
mShutdown
)
{
LOG
(
"
Cancel
deactivation
timer
because
controller
has
been
shutdown
"
)
;
return
NS_OK
;
}
if
(
IsBeingUsedInPIPModeOrFullscreen
(
)
)
{
LOG
(
"
Cancel
deactivation
timer
because
controller
is
in
PIP
mode
"
)
;
return
NS_OK
;
}
if
(
IsPlaying
(
)
)
{
LOG
(
"
Cancel
deactivation
timer
because
controller
is
still
playing
"
)
;
return
NS_OK
;
}
if
(
!
mIsActive
)
{
LOG
(
"
Cancel
deactivation
timer
because
controller
has
been
deactivated
"
)
;
return
NS_OK
;
}
Deactivate
(
)
;
return
NS_OK
;
}
void
MediaController
:
:
NotifyMediaAudibleChanged
(
uint64_t
aBrowsingContextId
MediaAudibleState
aState
)
{
if
(
mShutdown
)
{
return
;
}
bool
oldAudible
=
IsAudible
(
)
;
MediaStatusManager
:
:
NotifyMediaAudibleChanged
(
aBrowsingContextId
aState
)
;
if
(
IsAudible
(
)
=
=
oldAudible
)
{
return
;
}
UpdateActivatedStateIfNeeded
(
)
;
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
MOZ_ASSERT
(
service
)
;
if
(
IsAudible
(
)
)
{
service
-
>
GetAudioFocusManager
(
)
.
RequestAudioFocus
(
this
)
;
}
else
{
service
-
>
GetAudioFocusManager
(
)
.
RevokeAudioFocus
(
this
)
;
}
}
bool
MediaController
:
:
ShouldActivateController
(
)
const
{
MOZ_ASSERT
(
!
mShutdown
)
;
return
IsAnyMediaBeingControlled
(
)
&
&
(
IsAudible
(
)
|
|
IsBeingUsedInPIPModeOrFullscreen
(
)
)
&
&
!
mIsActive
;
}
bool
MediaController
:
:
ShouldDeactivateController
(
)
const
{
MOZ_ASSERT
(
!
mShutdown
)
;
return
!
IsAnyMediaBeingControlled
(
)
&
&
mIsActive
&
&
!
mActiveMediaSessionContextId
;
}
void
MediaController
:
:
Activate
(
)
{
MOZ_ASSERT
(
!
mShutdown
)
;
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
if
(
service
&
&
!
mIsActive
)
{
LOG
(
"
Activate
"
)
;
mIsActive
=
service
-
>
RegisterActiveMediaController
(
this
)
;
MOZ_ASSERT
(
mIsActive
"
Fail
to
register
controller
!
"
)
;
DispatchAsyncEvent
(
u
"
activated
"
_ns
)
;
}
}
void
MediaController
:
:
Deactivate
(
)
{
MOZ_ASSERT
(
!
mShutdown
)
;
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
if
(
service
)
{
service
-
>
GetAudioFocusManager
(
)
.
RevokeAudioFocus
(
this
)
;
if
(
mIsActive
)
{
LOG
(
"
Deactivate
"
)
;
mIsActive
=
!
service
-
>
UnregisterActiveMediaController
(
this
)
;
MOZ_ASSERT
(
!
mIsActive
"
Fail
to
unregister
controller
!
"
)
;
DispatchAsyncEvent
(
u
"
deactivated
"
_ns
)
;
}
}
}
void
MediaController
:
:
SetIsInPictureInPictureMode
(
uint64_t
aBrowsingContextId
bool
aIsInPictureInPictureMode
)
{
if
(
mIsInPictureInPictureMode
=
=
aIsInPictureInPictureMode
)
{
return
;
}
LOG
(
"
Set
IsInPictureInPictureMode
to
%
s
"
aIsInPictureInPictureMode
?
"
true
"
:
"
false
"
)
;
mIsInPictureInPictureMode
=
aIsInPictureInPictureMode
;
ForceToBecomeMainControllerIfNeeded
(
)
;
UpdateDeactivationTimerIfNeeded
(
)
;
mPictureInPictureModeChangedEvent
.
Notify
(
mIsInPictureInPictureMode
)
;
}
void
MediaController
:
:
NotifyMediaFullScreenState
(
uint64_t
aBrowsingContextId
bool
aIsInFullScreen
)
{
if
(
mIsInFullScreenMode
=
=
aIsInFullScreen
)
{
return
;
}
LOG
(
"
%
s
fullscreen
"
aIsInFullScreen
?
"
Entered
"
:
"
Left
"
)
;
mIsInFullScreenMode
=
aIsInFullScreen
;
ForceToBecomeMainControllerIfNeeded
(
)
;
mFullScreenChangedEvent
.
Notify
(
mIsInFullScreenMode
)
;
}
bool
MediaController
:
:
IsMainController
(
)
const
{
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
return
service
?
service
-
>
GetMainController
(
)
=
=
this
:
false
;
}
bool
MediaController
:
:
ShouldRequestForMainController
(
)
const
{
if
(
IsMainController
(
)
)
{
return
false
;
}
return
IsBeingUsedInPIPModeOrFullscreen
(
)
&
&
!
mShutdown
;
}
void
MediaController
:
:
ForceToBecomeMainControllerIfNeeded
(
)
{
if
(
!
ShouldRequestForMainController
(
)
)
{
return
;
}
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
;
MOZ_ASSERT
(
service
"
service
was
shutdown
before
shutting
down
controller
?
"
)
;
if
(
!
IsActive
(
)
&
&
ShouldActivateController
(
)
)
{
Activate
(
)
;
}
else
if
(
IsActive
(
)
)
{
service
-
>
RequestUpdateMainController
(
this
)
;
}
}
void
MediaController
:
:
HandleActualPlaybackStateChanged
(
)
{
if
(
RefPtr
<
MediaControlService
>
service
=
MediaControlService
:
:
GetService
(
)
)
{
service
-
>
NotifyControllerPlaybackStateChanged
(
this
)
;
}
DispatchAsyncEvent
(
u
"
playbackstatechange
"
_ns
)
;
}
void
MediaController
:
:
UpdateActivatedStateIfNeeded
(
)
{
if
(
ShouldActivateController
(
)
)
{
Activate
(
)
;
}
else
if
(
ShouldDeactivateController
(
)
)
{
Deactivate
(
)
;
}
}
void
MediaController
:
:
HandleSupportedMediaSessionActionsChanged
(
const
nsTArray
<
MediaSessionAction
>
&
aSupportedAction
)
{
nsTArray
<
MediaControlKey
>
newSupportedKeys
;
GetDefaultSupportedKeys
(
newSupportedKeys
)
;
for
(
const
auto
&
action
:
aSupportedAction
)
{
MediaControlKey
key
=
ConvertMediaSessionActionToControlKey
(
action
)
;
if
(
!
newSupportedKeys
.
Contains
(
key
)
)
{
newSupportedKeys
.
AppendElement
(
key
)
;
}
}
if
(
newSupportedKeys
=
=
mSupportedKeys
)
{
return
;
}
LOG
(
"
Supported
keys
changes
"
)
;
mSupportedKeys
=
newSupportedKeys
;
mSupportedKeysChangedEvent
.
Notify
(
mSupportedKeys
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
u
"
supportedkeyschange
"
_ns
CanBubble
:
:
eYes
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
MediaController_Binding
:
:
ClearCachedSupportedKeysValue
(
this
)
;
}
void
MediaController
:
:
HandlePositionStateChanged
(
const
PositionState
&
aState
)
{
PositionStateEventInit
init
;
init
.
mDuration
=
aState
.
mDuration
;
init
.
mPlaybackRate
=
aState
.
mPlaybackRate
;
init
.
mPosition
=
aState
.
mLastReportedPlaybackPosition
;
RefPtr
<
PositionStateEvent
>
event
=
PositionStateEvent
:
:
Constructor
(
this
u
"
positionstatechange
"
_ns
init
)
;
DispatchAsyncEvent
(
event
)
;
}
void
MediaController
:
:
HandleMetadataChanged
(
const
MediaMetadataBase
&
aMetadata
)
{
DispatchAsyncEvent
(
u
"
metadatachange
"
_ns
)
;
if
(
ShouldDeactivateController
(
)
)
{
Deactivate
(
)
;
}
}
void
MediaController
:
:
DispatchAsyncEvent
(
const
nsAString
&
aName
)
{
LOG
(
"
Dispatch
event
%
s
"
NS_ConvertUTF16toUTF8
(
aName
)
.
get
(
)
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
aName
CanBubble
:
:
eYes
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
void
MediaController
:
:
DispatchAsyncEvent
(
Event
*
aEvent
)
{
MOZ_ASSERT
(
aEvent
)
;
nsAutoString
eventType
;
aEvent
-
>
GetType
(
eventType
)
;
LOG
(
"
Dispatch
event
%
s
"
NS_ConvertUTF16toUTF8
(
eventType
)
.
get
(
)
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
aEvent
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
CopyableTArray
<
MediaControlKey
>
MediaController
:
:
GetSupportedMediaKeys
(
)
const
{
return
mSupportedKeys
;
}
void
MediaController
:
:
Select
(
)
const
{
if
(
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
Get
(
Id
(
)
)
)
{
Unused
<
<
bc
-
>
SetHasMainMediaController
(
true
)
;
}
}
void
MediaController
:
:
Unselect
(
)
const
{
if
(
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
Get
(
Id
(
)
)
)
{
Unused
<
<
bc
-
>
SetHasMainMediaController
(
false
)
;
}
}
}
}
