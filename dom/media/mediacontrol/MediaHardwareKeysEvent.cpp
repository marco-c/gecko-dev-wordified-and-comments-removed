#
include
"
MediaHardwareKeysEvent
.
h
"
#
include
"
MediaControlService
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
extern
mozilla
:
:
LazyLogModule
gMediaControlLog
;
#
undef
LOG
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
MediaHardwareKeysEventListener
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
dom
{
static
const
char
*
ToMediaControlKeysEventStr
(
MediaControlKeysEvent
aKeyEvent
)
{
switch
(
aKeyEvent
)
{
case
MediaControlKeysEvent
:
:
ePlayPause
:
return
"
PlayPause
"
;
case
MediaControlKeysEvent
:
:
eNext
:
return
"
Next
"
;
case
MediaControlKeysEvent
:
:
ePrev
:
return
"
Prev
"
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
action
.
"
)
;
}
return
"
Unknown
"
;
}
#
undef
LOG_KEY
#
define
LOG_KEY
(
msg
key
.
.
.
)
\
if
(
MOZ_LOG_TEST
(
gMediaControlLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
\
MOZ_LOG
(
gMediaControlLog
LogLevel
:
:
Debug
\
(
"
MediaHardwareKeysEventListener
=
%
p
"
msg
this
\
ToMediaControlKeysEventStr
(
key
)
#
#
__VA_ARGS__
)
)
;
\
}
void
MediaHardwareKeysEventListener
:
:
OnKeyPressed
(
MediaControlKeysEvent
aKeyEvent
)
{
LOG_KEY
(
"
OnKeyPressed
'
%
s
'
"
aKeyEvent
)
;
switch
(
aKeyEvent
)
{
case
MediaControlKeysEvent
:
:
ePlayPause
:
return
;
case
MediaControlKeysEvent
:
:
eNext
:
case
MediaControlKeysEvent
:
:
ePrev
:
return
;
default
:
LOG
(
"
Error
:
undefined
event
!
"
)
;
return
;
}
}
void
MediaHardwareKeysEventSource
:
:
AddListener
(
MediaHardwareKeysEventListener
*
aListener
)
{
MOZ_ASSERT
(
aListener
)
;
LOG
(
"
Add
listener
%
p
"
aListener
)
;
mListeners
.
AppendElement
(
aListener
)
;
}
void
MediaHardwareKeysEventSource
:
:
RemoveListener
(
MediaHardwareKeysEventListener
*
aListener
)
{
MOZ_ASSERT
(
aListener
)
;
LOG
(
"
Remove
listener
%
p
"
aListener
)
;
mListeners
.
RemoveElement
(
aListener
)
;
}
size_t
MediaHardwareKeysEventSource
:
:
GetListenersNum
(
)
const
{
return
mListeners
.
Length
(
)
;
}
void
MediaHardwareKeysEventSource
:
:
Close
(
)
{
mListeners
.
Clear
(
)
;
}
}
}
