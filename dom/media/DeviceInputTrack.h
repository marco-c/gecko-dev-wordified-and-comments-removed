#
ifndef
DOM_MEDIA_DEVICEINPUTTRACK_H_
#
define
DOM_MEDIA_DEVICEINPUTTRACK_H_
#
include
"
AudioSegment
.
h
"
#
include
"
MediaTrackGraph
.
h
"
namespace
mozilla
{
class
NativeInputTrack
;
class
DeviceInputTrack
:
public
ProcessedMediaTrack
{
public
:
static
Result
<
RefPtr
<
DeviceInputTrack
>
nsresult
>
OpenAudio
(
MediaTrackGraphImpl
*
aGraph
CubebUtils
:
:
AudioDeviceID
aDeviceId
const
PrincipalHandle
&
aPrincipalHandle
AudioDataListener
*
aListener
)
;
static
void
CloseAudio
(
RefPtr
<
DeviceInputTrack
>
&
&
aTrack
AudioDataListener
*
aListener
)
;
uint32_t
MaxRequestedInputChannels
(
)
const
;
bool
HasVoiceInput
(
)
const
;
void
DeviceChanged
(
MediaTrackGraphImpl
*
aGraph
)
const
;
DeviceInputTrack
*
AsDeviceInputTrack
(
)
override
{
return
this
;
}
virtual
NativeInputTrack
*
AsNativeInputTrack
(
)
{
return
nullptr
;
}
const
CubebUtils
:
:
AudioDeviceID
mDeviceId
;
const
PrincipalHandle
mPrincipalHandle
;
protected
:
DeviceInputTrack
(
TrackRate
aSampleRate
CubebUtils
:
:
AudioDeviceID
aDeviceId
const
PrincipalHandle
&
aPrincipalHandle
)
;
~
DeviceInputTrack
(
)
=
default
;
private
:
void
ReevaluateInputDevice
(
)
;
void
AddDataListener
(
AudioDataListener
*
aListener
)
;
void
RemoveDataListener
(
AudioDataListener
*
aListener
)
;
int32_t
mUserCount
=
0
;
nsTArray
<
RefPtr
<
AudioDataListener
>
>
mListeners
;
}
;
class
NativeInputTrack
final
:
public
DeviceInputTrack
{
public
:
NativeInputTrack
(
TrackRate
aSampleRate
CubebUtils
:
:
AudioDeviceID
aDeviceId
const
PrincipalHandle
&
aPrincipalHandle
)
;
void
DestroyImpl
(
)
override
;
void
ProcessInput
(
GraphTime
aFrom
GraphTime
aTo
uint32_t
aFlags
)
override
;
uint32_t
NumberOfChannels
(
)
const
override
;
void
NotifyInputStopped
(
MediaTrackGraphImpl
*
aGraph
)
;
void
NotifyInputData
(
MediaTrackGraphImpl
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
uint32_t
aAlreadyBuffered
)
;
NativeInputTrack
*
AsNativeInputTrack
(
)
override
{
return
this
;
}
private
:
~
NativeInputTrack
(
)
=
default
;
bool
mIsBufferingAppended
=
false
;
AudioSegment
mPendingData
;
uint32_t
mInputChannels
=
0
;
}
;
}
#
endif
