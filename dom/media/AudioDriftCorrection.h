#
ifndef
MOZILLA_AUDIO_DRIFT_CORRECTION_H_
#
define
MOZILLA_AUDIO_DRIFT_CORRECTION_H_
#
include
"
DynamicResampler
.
h
"
namespace
mozilla
{
class
ClockDrift
final
{
public
:
ClockDrift
(
int32_t
aSourceRate
int32_t
aTargetRate
)
:
mSourceRate
(
aSourceRate
)
mTargetRate
(
aTargetRate
)
mDesiredBuffering
(
5
*
mSourceRate
/
100
)
{
if
(
Preferences
:
:
HasUserValue
(
"
media
.
clockdrift
.
buffering
"
)
)
{
int
msecs
=
Preferences
:
:
GetInt
(
"
media
.
clockdrift
.
buffering
"
)
;
mDesiredBuffering
=
msecs
*
mSourceRate
/
100
;
}
}
float
GetCorrection
(
)
{
return
mCorrection
;
}
void
UpdateClock
(
int
aSourceClock
int
aTargetClock
int
aBufferedFrames
)
{
if
(
mIterations
=
=
mAdjustementWindow
)
{
CalculateCorrection
(
aBufferedFrames
)
;
}
else
if
(
aBufferedFrames
<
2
*
mSourceRate
/
100
)
{
BufferedFramesCorrection
(
aBufferedFrames
)
;
}
mTargetClock
+
=
aTargetClock
;
mSourceClock
+
=
aSourceClock
;
+
+
mIterations
;
}
private
:
void
CalculateCorrection
(
int
aBufferedFrames
)
{
int32_t
bufferedFramesDiff
=
aBufferedFrames
-
mDesiredBuffering
;
int32_t
resampledSourceClock
=
mSourceClock
+
bufferedFramesDiff
;
if
(
mTargetRate
!
=
mSourceRate
)
{
resampledSourceClock
=
resampledSourceClock
*
(
static_cast
<
float
>
(
mTargetRate
)
/
static_cast
<
float
>
(
mSourceRate
)
)
;
}
mCorrection
=
(
float
)
mTargetClock
/
resampledSourceClock
;
mCorrection
=
std
:
:
min
(
std
:
:
max
(
mCorrection
0
.
9f
)
1
.
1f
)
;
if
(
mPreviousCorrection
-
mCorrection
<
=
0
.
01
&
&
mPreviousCorrection
-
mCorrection
>
0
)
{
mCorrection
=
mPreviousCorrection
;
}
mPreviousCorrection
=
mCorrection
;
mIterations
=
0
;
mTargetClock
=
0
;
mSourceClock
=
0
;
}
void
BufferedFramesCorrection
(
int
aBufferedFrames
)
{
int32_t
bufferedFramesDiff
=
aBufferedFrames
-
mDesiredBuffering
;
int32_t
resampledSourceClock
=
mSourceRate
+
bufferedFramesDiff
;
if
(
mTargetRate
!
=
mSourceRate
)
{
resampledSourceClock
=
resampledSourceClock
*
(
static_cast
<
float
>
(
mTargetRate
)
/
mSourceRate
)
;
}
MOZ_ASSERT
(
mTargetRate
>
resampledSourceClock
)
;
mPreviousCorrection
=
mCorrection
;
mCorrection
+
=
static_cast
<
float
>
(
mTargetRate
)
/
resampledSourceClock
-
1
.
0f
;
mCorrection
=
std
:
:
min
(
std
:
:
max
(
mCorrection
0
.
9f
)
1
.
1f
)
;
}
private
:
const
int32_t
mSourceRate
;
const
int32_t
mTargetRate
;
float
mCorrection
=
1
.
0
;
float
mPreviousCorrection
=
1
.
0
;
const
int32_t
mAdjustementWindow
=
100
;
int32_t
mDesiredBuffering
;
int32_t
mSourceClock
=
0
;
int32_t
mTargetClock
=
0
;
int32_t
mIterations
=
0
;
}
;
class
AudioDriftCorrection
final
{
public
:
AudioDriftCorrection
(
int32_t
aSourceRate
int32_t
aTargetRate
)
:
mClockDrift
(
aSourceRate
aTargetRate
)
mResampler
(
aSourceRate
aTargetRate
aTargetRate
/
20
)
mTargetRate
(
aTargetRate
)
{
}
AudioSegment
RequestFrames
(
const
AudioSegment
&
aInput
int32_t
aOutputFrames
)
{
if
(
aInput
.
GetDuration
(
)
)
{
mResampler
.
AppendInput
(
aInput
)
;
}
mClockDrift
.
UpdateClock
(
aInput
.
GetDuration
(
)
aOutputFrames
mResampler
.
InputDuration
(
)
)
;
TrackRate
receivingRate
=
mTargetRate
*
mClockDrift
.
GetCorrection
(
)
;
mResampler
.
UpdateOutRate
(
receivingRate
)
;
AudioSegment
output
=
mResampler
.
Resample
(
aOutputFrames
)
;
if
(
output
.
IsEmpty
(
)
)
{
output
.
AppendNullData
(
aOutputFrames
)
;
}
return
output
;
}
private
:
ClockDrift
mClockDrift
;
AudioResampler
mResampler
;
const
int32_t
mTargetRate
;
}
;
}
;
#
endif
