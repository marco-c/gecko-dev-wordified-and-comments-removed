#
ifndef
MOZILLA_AUDIO_DRIFT_CORRECTION_H_
#
define
MOZILLA_AUDIO_DRIFT_CORRECTION_H_
#
include
"
DynamicResampler
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaTrackGraphLog
;
class
ClockDrift
final
{
public
:
ClockDrift
(
uint32_t
aSourceRate
uint32_t
aTargetRate
uint32_t
aDesiredBuffering
)
:
mSourceRate
(
aSourceRate
)
mTargetRate
(
aTargetRate
)
mDesiredBuffering
(
aDesiredBuffering
)
{
}
float
GetCorrection
(
)
{
return
mCorrection
;
}
void
UpdateClock
(
uint32_t
aSourceFrames
uint32_t
aTargetFrames
uint32_t
aBufferedFrames
uint32_t
aRemainingFrames
)
{
if
(
mSourceClock
>
=
mSourceRate
/
10
|
|
mTargetClock
>
=
mTargetRate
/
10
)
{
if
(
aBufferedFrames
<
mDesiredBuffering
*
4
/
10
|
|
aRemainingFrames
<
mDesiredBuffering
*
4
/
10
)
{
CalculateCorrection
(
0
.
9
aBufferedFrames
aRemainingFrames
)
;
}
else
if
(
(
mTargetClock
*
1000
/
mTargetRate
)
>
=
mAdjustmentIntervalMs
|
|
(
mSourceClock
*
1000
/
mSourceRate
)
>
=
mAdjustmentIntervalMs
)
{
CalculateCorrection
(
0
.
6
aBufferedFrames
aRemainingFrames
)
;
}
}
mTargetClock
+
=
aTargetFrames
;
mSourceClock
+
=
aSourceFrames
;
}
private
:
void
CalculateCorrection
(
float
aCalculationWeight
uint32_t
aBufferedFrames
uint32_t
aRemainingFrames
)
{
uint32_t
bufferedFramesDiff
=
aBufferedFrames
-
mDesiredBuffering
;
uint32_t
resampledSourceClock
=
std
:
:
max
(
1u
mSourceClock
+
bufferedFramesDiff
)
;
if
(
mTargetRate
!
=
mSourceRate
)
{
resampledSourceClock
*
=
static_cast
<
float
>
(
mTargetRate
)
/
mSourceRate
;
}
MOZ_LOG
(
gMediaTrackGraphLog
LogLevel
:
:
Verbose
(
"
ClockDrift
%
p
Calculated
correction
%
.
3f
(
with
weight
:
%
.
1f
-
>
"
"
%
.
3f
)
(
buffer
:
%
u
desired
:
%
u
remaining
:
%
u
)
"
this
static_cast
<
float
>
(
mTargetClock
)
/
resampledSourceClock
aCalculationWeight
(
1
-
aCalculationWeight
)
*
mCorrection
+
aCalculationWeight
*
mTargetClock
/
resampledSourceClock
aBufferedFrames
mDesiredBuffering
aRemainingFrames
)
)
;
mCorrection
=
(
1
-
aCalculationWeight
)
*
mCorrection
+
aCalculationWeight
*
mTargetClock
/
resampledSourceClock
;
mCorrection
=
std
:
:
min
(
std
:
:
max
(
mCorrection
0
.
9f
)
1
.
1f
)
;
mTargetClock
=
0
;
mSourceClock
=
0
;
}
public
:
const
uint32_t
mSourceRate
;
const
uint32_t
mTargetRate
;
const
uint32_t
mAdjustmentIntervalMs
=
1000
;
const
uint32_t
mDesiredBuffering
;
private
:
float
mCorrection
=
1
.
0
;
uint32_t
mSourceClock
=
0
;
uint32_t
mTargetClock
=
0
;
}
;
class
AudioDriftCorrection
final
{
public
:
AudioDriftCorrection
(
uint32_t
aSourceRate
uint32_t
aTargetRate
)
:
mDesiredBuffering
(
std
:
:
max
(
5
Preferences
:
:
GetInt
(
"
media
.
clockdrift
.
buffering
"
50
)
)
*
aSourceRate
/
1000
)
mTargetRate
(
aTargetRate
)
mClockDrift
(
aSourceRate
aTargetRate
mDesiredBuffering
)
mResampler
(
aSourceRate
aTargetRate
mDesiredBuffering
)
{
}
AudioSegment
RequestFrames
(
const
AudioSegment
&
aInput
uint32_t
aOutputFrames
)
{
if
(
aInput
.
GetDuration
(
)
)
{
mResampler
.
AppendInput
(
aInput
)
;
}
mClockDrift
.
UpdateClock
(
aInput
.
GetDuration
(
)
aOutputFrames
mResampler
.
InputDuration
(
)
mResampler
.
InputRemainingDuration
(
)
)
;
TrackRate
receivingRate
=
mTargetRate
*
mClockDrift
.
GetCorrection
(
)
;
mResampler
.
UpdateOutRate
(
receivingRate
)
;
AudioSegment
output
=
mResampler
.
Resample
(
aOutputFrames
)
;
if
(
output
.
IsEmpty
(
)
)
{
NS_WARNING
(
"
Got
nothing
from
the
resampler
"
)
;
output
.
AppendNullData
(
aOutputFrames
)
;
}
return
output
;
}
uint32_t
CurrentBuffering
(
)
const
{
return
mResampler
.
InputDuration
(
)
;
}
const
uint32_t
mDesiredBuffering
;
const
uint32_t
mTargetRate
;
private
:
ClockDrift
mClockDrift
;
AudioResampler
mResampler
;
}
;
}
;
#
endif
