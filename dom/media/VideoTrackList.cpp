#
include
"
mozilla
/
dom
/
VideoTrack
.
h
"
#
include
"
mozilla
/
dom
/
VideoTrackList
.
h
"
#
include
"
mozilla
/
dom
/
VideoTrackListBinding
.
h
"
namespace
mozilla
:
:
dom
{
JSObject
*
VideoTrackList
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
VideoTrackList_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
VideoTrack
*
VideoTrackList
:
:
operator
[
]
(
uint32_t
aIndex
)
{
MediaTrack
*
track
=
MediaTrackList
:
:
operator
[
]
(
aIndex
)
;
return
track
-
>
AsVideoTrack
(
)
;
}
void
VideoTrackList
:
:
RemoveTrack
(
const
RefPtr
<
MediaTrack
>
&
aTrack
)
{
bool
found
;
VideoTrack
*
selectedVideoTrack
=
IndexedGetter
(
mSelectedIndex
found
)
;
MediaTrackList
:
:
RemoveTrack
(
aTrack
)
;
if
(
mSelectedIndex
=
=
-
1
)
{
return
;
}
MOZ_ASSERT
(
found
"
When
mSelectedIndex
is
set
it
should
point
to
a
track
"
)
;
MOZ_ASSERT
(
selectedVideoTrack
"
The
mSelectedIndex
should
be
set
to
video
track
only
"
)
;
if
(
aTrack
=
=
selectedVideoTrack
)
{
mSelectedIndex
=
-
1
;
return
;
}
for
(
size_t
ix
=
0
;
ix
<
mTracks
.
Length
(
)
;
ix
+
+
)
{
if
(
mTracks
[
ix
]
=
=
selectedVideoTrack
)
{
mSelectedIndex
=
ix
;
return
;
}
}
}
void
VideoTrackList
:
:
EmptyTracks
(
)
{
mSelectedIndex
=
-
1
;
MediaTrackList
:
:
EmptyTracks
(
)
;
}
VideoTrack
*
VideoTrackList
:
:
GetSelectedTrack
(
)
{
if
(
mSelectedIndex
<
0
|
|
static_cast
<
size_t
>
(
mSelectedIndex
)
>
=
mTracks
.
Length
(
)
)
{
return
nullptr
;
}
return
operator
[
]
(
mSelectedIndex
)
;
}
VideoTrack
*
VideoTrackList
:
:
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
{
MediaTrack
*
track
=
MediaTrackList
:
:
IndexedGetter
(
aIndex
aFound
)
;
return
track
?
track
-
>
AsVideoTrack
(
)
:
nullptr
;
}
VideoTrack
*
VideoTrackList
:
:
GetTrackById
(
const
nsAString
&
aId
)
{
MediaTrack
*
track
=
MediaTrackList
:
:
GetTrackById
(
aId
)
;
return
track
?
track
-
>
AsVideoTrack
(
)
:
nullptr
;
}
}
