#
ifndef
AbstractMediaDecoder_h_
#
define
AbstractMediaDecoder_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
FrameStatistics
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageContainer
;
class
KnowsCompositor
;
}
class
AbstractThread
;
class
MediaResource
;
class
ReentrantMonitor
;
class
VideoFrameContainer
;
class
MediaDecoderOwner
;
class
CDMProxy
;
class
GMPCrashHelper
;
class
AbstractMediaDecoder
:
public
nsIObserver
{
public
:
virtual
void
NotifyDecodedFrames
(
const
FrameStatisticsData
&
aStats
)
=
0
;
virtual
AbstractThread
*
AbstractMainThread
(
)
const
=
0
;
virtual
VideoFrameContainer
*
GetVideoFrameContainer
(
)
=
0
;
virtual
mozilla
:
:
layers
:
:
ImageContainer
*
GetImageContainer
(
)
=
0
;
virtual
MediaDecoderOwner
*
GetOwner
(
)
const
=
0
;
virtual
void
SetPlatformCanOffloadAudio
(
bool
aCanOffloadAudio
)
{
}
class
AutoNotifyDecoded
{
public
:
explicit
AutoNotifyDecoded
(
FrameStatistics
*
aFrameStats
)
:
mFrameStats
(
aFrameStats
)
{
}
~
AutoNotifyDecoded
(
)
{
if
(
mFrameStats
)
{
mFrameStats
-
>
NotifyDecodedFrames
(
mStats
)
;
}
}
FrameStatisticsData
mStats
;
private
:
FrameStatistics
*
mFrameStats
;
}
;
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
MOZ_CRASH
(
"
Forbidden
method
"
)
;
return
NS_OK
;
}
}
;
}
#
endif
