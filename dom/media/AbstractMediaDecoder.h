#
ifndef
AbstractMediaDecoder_h_
#
define
AbstractMediaDecoder_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
ImageContainer
;
}
class
MediaResource
;
class
ReentrantMonitor
;
class
VideoFrameContainer
;
class
MediaDecoderOwner
;
#
ifdef
MOZ_EME
class
CDMProxy
;
#
endif
typedef
nsDataHashtable
<
nsCStringHashKey
nsCString
>
MetadataTags
;
static
inline
bool
IsCurrentThread
(
nsIThread
*
aThread
)
{
return
NS_GetCurrentThread
(
)
=
=
aThread
;
}
enum
class
MediaDecoderEventVisibility
:
int8_t
{
Observable
Suppressed
}
;
class
AbstractMediaDecoder
:
public
nsIObserver
{
public
:
virtual
bool
IsOggDecoderShutdown
(
)
{
return
false
;
}
virtual
MediaResource
*
GetResource
(
)
const
=
0
;
virtual
void
NotifyDecodedFrames
(
uint32_t
aParsed
uint32_t
aDecoded
uint32_t
aDropped
)
=
0
;
virtual
AbstractCanonical
<
media
:
:
NullableTimeUnit
>
*
CanonicalDurationOrNull
(
)
{
return
nullptr
;
}
;
virtual
MediaEventSource
<
void
>
*
DataArrivedEvent
(
)
{
return
nullptr
;
}
protected
:
virtual
void
UpdateEstimatedMediaDuration
(
int64_t
aDuration
)
{
}
;
public
:
void
DispatchUpdateEstimatedMediaDuration
(
int64_t
aDuration
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableMethodWithArg
<
int64_t
>
(
this
&
AbstractMediaDecoder
:
:
UpdateEstimatedMediaDuration
aDuration
)
;
NS_DispatchToMainThread
(
r
)
;
}
virtual
VideoFrameContainer
*
GetVideoFrameContainer
(
)
=
0
;
virtual
mozilla
:
:
layers
:
:
ImageContainer
*
GetImageContainer
(
)
=
0
;
virtual
MediaDecoderOwner
*
GetOwner
(
)
=
0
;
virtual
void
SetPlatformCanOffloadAudio
(
bool
aCanOffloadAudio
)
{
}
class
AutoNotifyDecoded
{
public
:
explicit
AutoNotifyDecoded
(
AbstractMediaDecoder
*
aDecoder
)
:
mParsed
(
0
)
mDecoded
(
0
)
mDropped
(
0
)
mDecoder
(
aDecoder
)
{
}
~
AutoNotifyDecoded
(
)
{
if
(
mDecoder
)
{
mDecoder
-
>
NotifyDecodedFrames
(
mParsed
mDecoded
mDropped
)
;
}
}
uint32_t
mParsed
;
uint32_t
mDecoded
;
uint32_t
mDropped
;
private
:
AbstractMediaDecoder
*
mDecoder
;
}
;
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
MOZ_CRASH
(
"
Forbidden
method
"
)
;
return
NS_OK
;
}
}
;
}
#
endif
