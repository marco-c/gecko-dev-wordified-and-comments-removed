#
if
!
defined
(
WaveReader_h_
)
#
define
WaveReader_h_
#
include
"
MediaDecoderReader
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
namespace
mozilla
{
class
WaveReader
:
public
MediaDecoderReader
{
public
:
explicit
WaveReader
(
AbstractMediaDecoder
*
aDecoder
)
;
protected
:
~
WaveReader
(
)
;
public
:
virtual
bool
DecodeAudioData
(
)
override
;
virtual
bool
DecodeVideoFrame
(
bool
&
aKeyframeSkip
int64_t
aTimeThreshold
)
override
;
virtual
bool
HasAudio
(
)
override
{
return
true
;
}
virtual
bool
HasVideo
(
)
override
{
return
false
;
}
virtual
RefPtr
<
SeekPromise
>
Seek
(
int64_t
aTime
int64_t
aEndTime
)
override
;
virtual
media
:
:
TimeIntervals
GetBuffered
(
)
override
;
virtual
bool
IsMediaSeekable
(
)
override
;
private
:
virtual
nsresult
ReadMetadata
(
MediaInfo
*
aInfo
MetadataTags
*
*
aTags
)
override
;
bool
ReadAll
(
char
*
aBuf
int64_t
aSize
int64_t
*
aBytesRead
=
nullptr
)
;
bool
LoadRIFFChunk
(
)
;
bool
LoadFormatChunk
(
uint32_t
aChunkSize
)
;
bool
FindDataOffset
(
uint32_t
aChunkSize
)
;
bool
LoadListChunk
(
uint32_t
aChunkSize
nsAutoPtr
<
dom
:
:
HTMLMediaElement
:
:
MetadataTags
>
&
aTags
)
;
bool
LoadAllChunks
(
nsAutoPtr
<
dom
:
:
HTMLMediaElement
:
:
MetadataTags
>
&
aTags
)
;
double
BytesToTime
(
int64_t
aBytes
)
const
;
int64_t
TimeToBytes
(
double
aTime
)
const
;
int64_t
RoundDownToFrame
(
int64_t
aBytes
)
const
;
int64_t
GetDataLength
(
)
;
int64_t
GetPosition
(
)
;
uint32_t
mSampleRate
;
uint32_t
mChannels
;
uint32_t
mFrameSize
;
enum
{
FORMAT_U8
FORMAT_S16
}
mSampleFormat
;
int64_t
mWaveLength
;
int64_t
mWavePCMOffset
;
MediaResourceIndex
mResource
;
}
;
}
#
endif
