#
ifndef
MEDIA_OMX_COMMON_DECODER_H
#
define
MEDIA_OMX_COMMON_DECODER_H
#
include
"
MediaDecoder
.
h
"
namespace
android
{
struct
MOZ_EXPORT
MediaSource
;
}
namespace
mozilla
{
class
AudioOffloadPlayerBase
;
class
MediaOmxCommonReader
;
class
MediaOmxCommonDecoder
:
public
MediaDecoder
{
public
:
explicit
MediaOmxCommonDecoder
(
MediaDecoderOwner
*
aOwner
)
;
void
FirstFrameLoaded
(
nsAutoPtr
<
MediaInfo
>
aInfo
MediaDecoderEventVisibility
aEventVisibility
)
override
;
void
ChangeState
(
PlayState
aState
)
override
;
void
CallSeek
(
const
SeekTarget
&
aTarget
)
override
;
void
SetVolume
(
double
aVolume
)
override
;
int64_t
CurrentPosition
(
)
override
;
MediaDecoderOwner
:
:
NextFrameStatus
NextFrameStatus
(
)
override
;
void
SetElementVisibility
(
bool
aIsVisible
)
override
;
void
SetPlatformCanOffloadAudio
(
bool
aCanOffloadAudio
)
override
;
void
AddOutputStream
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
AudioOffloadTearDown
(
)
;
MediaDecoderStateMachine
*
CreateStateMachine
(
)
override
;
virtual
MediaOmxCommonReader
*
CreateReader
(
)
=
0
;
virtual
MediaDecoderStateMachine
*
CreateStateMachineFromReader
(
MediaOmxCommonReader
*
aReader
)
=
0
;
void
NotifyOffloadPlayerPositionChanged
(
)
{
UpdateLogicalPosition
(
)
;
}
protected
:
virtual
~
MediaOmxCommonDecoder
(
)
;
void
PauseStateMachine
(
)
;
void
ResumeStateMachine
(
)
;
bool
CheckDecoderCanOffloadAudio
(
)
;
void
DisableStateMachineAudioOffloading
(
)
;
MediaOmxCommonReader
*
mReader
;
android
:
:
sp
<
android
:
:
MediaSource
>
mAudioTrack
;
nsAutoPtr
<
AudioOffloadPlayerBase
>
mAudioOffloadPlayer
;
bool
mCanOffloadAudio
;
bool
mFallbackToStateMachine
;
bool
mIsCaptured
;
}
;
}
#
endif
