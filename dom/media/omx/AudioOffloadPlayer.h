#
ifndef
AUDIO_OFFLOAD_PLAYER_H_
#
define
AUDIO_OFFLOAD_PLAYER_H_
#
include
<
stagefright
/
MediaBuffer
.
h
>
#
include
<
stagefright
/
MediaSource
.
h
>
#
include
<
stagefright
/
TimeSource
.
h
>
#
include
<
utils
/
threads
.
h
>
#
include
<
utils
/
RefBase
.
h
>
#
include
"
AudioOutput
.
h
"
#
include
"
AudioOffloadPlayerBase
.
h
"
#
include
"
MediaDecoderOwner
.
h
"
#
include
"
MediaEventSource
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WakeLock
;
}
class
MediaOmxCommonDecoder
;
class
AudioOffloadPlayer
:
public
AudioOffloadPlayerBase
{
typedef
android
:
:
Mutex
Mutex
;
typedef
android
:
:
MetaData
MetaData
;
typedef
android
:
:
status_t
status_t
;
typedef
android
:
:
AudioTrack
AudioTrack
;
typedef
android
:
:
MediaBuffer
MediaBuffer
;
typedef
android
:
:
MediaSource
MediaSource
;
public
:
enum
{
REACHED_EOS
SEEK_COMPLETE
}
;
AudioOffloadPlayer
(
MediaOmxCommonDecoder
*
aDecoder
)
;
~
AudioOffloadPlayer
(
)
;
void
SetSource
(
const
android
:
:
sp
<
MediaSource
>
&
aSource
)
override
;
status_t
Start
(
bool
aSourceAlreadyStarted
=
false
)
override
;
status_t
ChangeState
(
MediaDecoder
:
:
PlayState
aState
)
override
;
void
SetVolume
(
double
aVolume
)
override
;
int64_t
GetMediaTimeUs
(
)
override
;
void
SetElementVisibility
(
bool
aIsVisible
)
override
;
MediaDecoderOwner
:
:
NextFrameStatus
GetNextFrameStatus
(
)
override
;
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
Seek
(
SeekTarget
aTarget
)
override
;
void
TimeUpdate
(
)
;
void
Reset
(
)
;
private
:
bool
mStarted
;
bool
mPlaying
;
bool
mReachedEOS
;
bool
mIsElementVisible
;
int
mSessionId
;
int
mSampleRate
;
int64_t
mStartPosUs
;
SeekTarget
mSeekTarget
;
MozPromiseHolder
<
MediaDecoder
:
:
SeekPromise
>
mSeekPromise
;
int64_t
mPositionTimeMediaUs
;
MediaDecoder
:
:
PlayState
mPlayState
;
Mutex
mLock
;
android
:
:
sp
<
MediaSource
>
mSource
;
android
:
:
sp
<
GonkAudioSink
>
mAudioSink
;
MediaBuffer
*
mInputBuffer
;
TimeStamp
mLastFireUpdateTime
;
nsCOMPtr
<
nsITimer
>
mTimeUpdateTimer
;
nsCOMPtr
<
nsITimer
>
mResetTimer
;
RefPtr
<
mozilla
:
:
dom
:
:
WakeLock
>
mWakeLock
;
MediaEventProducer
<
void
>
mOnPositionChanged
;
MediaEventProducer
<
void
>
mOnPlaybackEnded
;
MediaEventProducer
<
void
>
mOnPlayerTearDown
;
MediaEventProducer
<
MediaDecoderEventVisibility
>
mOnSeekingStarted
;
MediaEventListener
mPositionChanged
;
MediaEventListener
mPlaybackEnded
;
MediaEventListener
mPlayerTearDown
;
MediaEventListener
mSeekingStarted
;
int64_t
GetOutputPlayPositionUs_l
(
)
const
;
size_t
FillBuffer
(
void
*
aData
size_t
aSize
)
;
static
size_t
AudioSinkCallback
(
GonkAudioSink
*
aAudioSink
void
*
aData
size_t
aSize
void
*
aMe
GonkAudioSink
:
:
cb_event_t
aEvent
)
;
bool
IsSeeking
(
)
;
status_t
DoSeek
(
)
;
status_t
Play
(
)
;
void
Pause
(
bool
aPlayPendingSamples
=
false
)
;
nsresult
StartTimeUpdate
(
)
;
nsresult
StopTimeUpdate
(
)
;
void
WakeLockCreate
(
)
;
void
WakeLockRelease
(
)
;
void
NotifyAudioEOS
(
)
;
void
NotifyPositionChanged
(
)
;
void
NotifyAudioTearDown
(
)
;
void
SendMetaDataToHal
(
android
:
:
sp
<
GonkAudioSink
>
&
aSink
const
android
:
:
sp
<
MetaData
>
&
aMeta
)
;
AudioOffloadPlayer
(
const
AudioOffloadPlayer
&
)
;
AudioOffloadPlayer
&
operator
=
(
const
AudioOffloadPlayer
&
)
;
}
;
}
#
endif
