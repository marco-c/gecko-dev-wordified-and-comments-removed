#
if
!
defined
(
MediaOmxReader_h_
)
#
define
MediaOmxReader_h_
#
include
"
MediaOmxCommonReader
.
h
"
#
include
"
MediaResource
.
h
"
#
include
"
MediaDecoderReader
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
MP3FrameParser
.
h
"
#
include
"
nsRect
.
h
"
#
include
<
ui
/
GraphicBuffer
.
h
>
#
include
<
stagefright
/
MediaSource
.
h
>
namespace
android
{
class
OmxDecoder
;
class
MOZ_EXPORT
MediaExtractor
;
}
namespace
mozilla
{
class
AbstractMediaDecoder
;
class
MediaOmxReader
:
public
MediaOmxCommonReader
{
typedef
MediaOmxCommonReader
:
:
MediaResourcePromise
MediaResourcePromise
;
Mutex
mShutdownMutex
;
nsCString
mType
;
bool
mHasVideo
;
bool
mHasAudio
;
nsIntRect
mPicture
;
nsIntSize
mInitialFrame
;
int64_t
mVideoSeekTimeUs
;
int64_t
mAudioSeekTimeUs
;
int64_t
mLastParserDuration
;
int32_t
mSkipCount
;
bool
mIsShutdown
;
MozPromiseHolder
<
MediaDecoderReader
:
:
MetadataPromise
>
mMetadataPromise
;
MozPromiseRequestHolder
<
MediaResourcePromise
>
mMediaResourceRequest
;
MozPromiseHolder
<
MediaDecoderReader
:
:
SeekPromise
>
mSeekPromise
;
MozPromiseRequestHolder
<
MediaDecoderReader
:
:
MediaDataPromise
>
mSeekRequest
;
protected
:
android
:
:
sp
<
android
:
:
OmxDecoder
>
mOmxDecoder
;
android
:
:
sp
<
android
:
:
MediaExtractor
>
mExtractor
;
MP3FrameParser
mMP3FrameParser
;
virtual
nsresult
InitOmxDecoder
(
)
;
virtual
void
EnsureActive
(
)
;
virtual
void
HandleResourceAllocated
(
)
;
public
:
MediaOmxReader
(
AbstractMediaDecoder
*
aDecoder
)
;
~
MediaOmxReader
(
)
;
protected
:
void
NotifyDataArrivedInternal
(
)
override
;
public
:
nsresult
ResetDecode
(
TrackSet
aTracks
=
TrackSet
(
TrackInfo
:
:
kAudioTrack
TrackInfo
:
:
kVideoTrack
)
)
override
{
mSeekRequest
.
DisconnectIfExists
(
)
;
mSeekPromise
.
RejectIfExists
(
NS_OK
__func__
)
;
return
MediaDecoderReader
:
:
ResetDecode
(
aTracks
)
;
}
bool
DecodeAudioData
(
)
override
;
bool
DecodeVideoFrame
(
bool
&
aKeyframeSkip
int64_t
aTimeThreshold
)
override
;
void
ReleaseMediaResources
(
)
override
;
RefPtr
<
MediaDecoderReader
:
:
MetadataPromise
>
AsyncReadMetadata
(
)
override
;
RefPtr
<
SeekPromise
>
Seek
(
SeekTarget
aTarget
int64_t
aEndTime
)
override
;
void
SetIdle
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
android
:
:
sp
<
android
:
:
MediaSource
>
GetAudioOffloadTrack
(
)
;
void
ReleaseDecoder
(
)
;
private
:
class
ProcessCachedDataTask
;
class
NotifyDataArrivedRunnable
;
bool
HasAudio
(
)
override
{
return
mHasAudio
;
}
bool
HasVideo
(
)
override
{
return
mHasVideo
;
}
bool
IsShutdown
(
)
{
MutexAutoLock
lock
(
mShutdownMutex
)
;
return
mIsShutdown
;
}
int64_t
ProcessCachedData
(
int64_t
aOffset
)
;
already_AddRefed
<
AbstractMediaDecoder
>
SafeGetDecoder
(
)
;
MediaByteRangeSet
mLastCachedRanges
;
}
;
}
#
endif
