#
if
!
defined
(
RtspOmxReader_h_
)
#
define
RtspOmxReader_h_
#
include
"
MediaResource
.
h
"
#
include
"
MediaDecoderReader
.
h
"
#
include
"
MediaOmxReader
.
h
"
namespace
mozilla
{
namespace
dom
{
class
TimeRanges
;
}
class
AbstractMediaDecoder
;
class
RtspMediaResource
;
class
RtspOmxReader
:
public
MediaOmxReader
{
protected
:
nsresult
InitOmxDecoder
(
)
final
override
;
void
EnsureActive
(
)
override
;
public
:
RtspOmxReader
(
AbstractMediaDecoder
*
aDecoder
)
:
MediaOmxReader
(
aDecoder
)
mEnsureActiveFromSeek
(
false
)
{
MOZ_COUNT_CTOR
(
RtspOmxReader
)
;
NS_ASSERTION
(
mDecoder
"
RtspOmxReader
mDecoder
is
null
.
"
)
;
NS_ASSERTION
(
mDecoder
-
>
GetResource
(
)
"
RtspOmxReader
mDecoder
-
>
GetResource
(
)
is
null
.
"
)
;
mRtspResource
=
mDecoder
-
>
GetResource
(
)
-
>
GetRtspPointer
(
)
;
MOZ_ASSERT
(
mRtspResource
)
;
}
virtual
~
RtspOmxReader
(
)
{
MOZ_COUNT_DTOR
(
RtspOmxReader
)
;
}
RefPtr
<
SeekPromise
>
Seek
(
SeekTarget
aTarget
int64_t
aEndTime
)
final
override
;
media
:
:
TimeIntervals
GetBuffered
(
)
final
override
{
return
media
:
:
TimeIntervals
:
:
Invalid
(
)
;
}
void
SetIdle
(
)
override
;
RefPtr
<
MediaDecoderReader
:
:
MetadataPromise
>
AsyncReadMetadata
(
)
override
;
void
HandleResourceAllocated
(
)
override
;
private
:
RtspMediaResource
*
mRtspResource
;
bool
mEnsureActiveFromSeek
;
}
;
}
#
endif
