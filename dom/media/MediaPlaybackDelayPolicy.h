#
ifndef
mozilla_dom_mediaplaybackdelaypolicy_h__
#
define
mozilla_dom_mediaplaybackdelaypolicy_h__
#
include
"
AudioChannelAgent
.
h
"
#
include
"
AudioChannelService
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
typedef
uint32_t
SuspendTypes
;
namespace
mozilla
{
namespace
dom
{
class
HTMLMediaElement
;
class
ResumeDelayedPlaybackAgent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ResumeDelayedPlaybackAgent
)
;
ResumeDelayedPlaybackAgent
(
)
=
default
;
using
ResumePromise
=
MozPromise
<
bool
bool
true
>
;
RefPtr
<
ResumePromise
>
GetResumePromise
(
)
;
void
UpdateAudibleState
(
AudioChannelService
:
:
AudibleState
aAudibleState
)
;
private
:
friend
class
MediaPlaybackDelayPolicy
;
~
ResumeDelayedPlaybackAgent
(
)
;
bool
InitDelegate
(
const
HTMLMediaElement
*
aElement
AudioChannelService
:
:
AudibleState
aAudibleState
)
;
class
ResumePlayDelegate
final
:
public
nsIAudioChannelAgentCallback
{
public
:
NS_DECL_ISUPPORTS
ResumePlayDelegate
(
)
=
default
;
bool
Init
(
const
HTMLMediaElement
*
aElement
AudioChannelService
:
:
AudibleState
aAudibleState
)
;
void
UpdateAudibleState
(
AudioChannelService
:
:
AudibleState
aAudibleState
)
;
RefPtr
<
ResumePromise
>
GetResumePromise
(
)
;
void
Clear
(
)
;
NS_IMETHODIMP
WindowVolumeChanged
(
float
aVolume
bool
aMuted
)
override
;
NS_IMETHODIMP
WindowAudioCaptureChanged
(
bool
aCapture
)
override
;
NS_IMETHODIMP
WindowSuspendChanged
(
SuspendTypes
aSuspend
)
override
;
private
:
virtual
~
ResumePlayDelegate
(
)
;
MozPromiseHolder
<
ResumePromise
>
mPromise
;
RefPtr
<
AudioChannelAgent
>
mAudioChannelAgent
;
}
;
RefPtr
<
ResumePlayDelegate
>
mDelegate
;
}
;
class
MediaPlaybackDelayPolicy
{
public
:
static
bool
ShouldDelayPlayback
(
const
HTMLMediaElement
*
aElement
)
;
static
RefPtr
<
ResumeDelayedPlaybackAgent
>
CreateResumeDelayedPlaybackAgent
(
const
HTMLMediaElement
*
aElement
AudioChannelService
:
:
AudibleState
aAudibleState
)
;
}
;
}
}
#
endif
