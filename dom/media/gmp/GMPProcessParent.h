#
ifndef
GMPProcessParent_h
#
define
GMPProcessParent_h
1
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
file_path
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
chrome
/
common
/
child_process_host
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
nsIFile
.
h
"
class
nsIRunnable
;
namespace
mozilla
:
:
gmp
{
class
GMPProcessParent
final
:
public
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
{
public
:
explicit
GMPProcessParent
(
const
std
:
:
string
&
aGMPPath
)
;
bool
Launch
(
int32_t
aTimeoutMs
)
;
void
Delete
(
nsCOMPtr
<
nsIRunnable
>
aCallback
=
nullptr
)
;
bool
CanShutdown
(
)
override
{
return
true
;
}
const
std
:
:
string
&
GetPluginFilePath
(
)
{
return
mGMPPath
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
void
InitStaticMainThread
(
)
;
bool
IsMacSandboxLaunchEnabled
(
)
override
;
void
SetRequiresWindowServer
(
bool
aRequiresWindowServer
)
;
static
MacSandboxType
GetMacSandboxType
(
)
{
return
MacSandboxType_GMP
;
}
;
#
endif
using
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
:
:
GetChannel
;
using
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
:
:
GetChildProcessHandle
;
private
:
~
GMPProcessParent
(
)
;
void
DoDelete
(
)
;
std
:
:
string
mGMPPath
;
nsCOMPtr
<
nsIRunnable
>
mDeletedCallback
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
bool
sLaunchWithMacSandbox
;
static
bool
sMacSandboxGMPLogging
;
bool
FillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
override
;
bool
mRequiresWindowServer
;
#
if
defined
(
DEBUG
)
static
bool
sIsMainThreadInitDone
;
#
endif
#
endif
static
nsresult
NormalizePath
(
const
char
*
aPath
PathString
&
aNormalizedPath
)
;
DISALLOW_COPY_AND_ASSIGN
(
GMPProcessParent
)
;
}
;
}
#
endif
