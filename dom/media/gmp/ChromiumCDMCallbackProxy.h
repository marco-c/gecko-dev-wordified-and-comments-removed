#
ifndef
ChromiumCDMCallbackProxy_h_
#
define
ChromiumCDMCallbackProxy_h_
#
include
"
ChromiumCDMCallback
.
h
"
#
include
"
ChromiumCDMProxy
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
class
ChromiumCDMCallbackProxy
:
public
ChromiumCDMCallback
{
public
:
ChromiumCDMCallbackProxy
(
ChromiumCDMProxy
*
aProxy
nsIEventTarget
*
aMainThread
)
:
mProxy
(
aProxy
)
mMainThread
(
aMainThread
)
{
}
void
SetSessionId
(
uint32_t
aPromiseId
const
nsCString
&
aSessionId
)
override
;
void
ResolveLoadSessionPromise
(
uint32_t
aPromiseId
bool
aSuccessful
)
override
;
void
ResolvePromiseWithKeyStatus
(
uint32_t
aPromiseId
uint32_t
aKeyStatus
)
override
;
void
ResolvePromise
(
uint32_t
aPromiseId
)
override
;
void
RejectPromise
(
uint32_t
aPromiseId
ErrorResult
&
&
aException
const
nsCString
&
aErrorMessage
)
override
;
void
SessionMessage
(
const
nsACString
&
aSessionId
uint32_t
aMessageType
nsTArray
<
uint8_t
>
&
&
aMessage
)
override
;
void
SessionKeysChange
(
const
nsCString
&
aSessionId
nsTArray
<
mozilla
:
:
gmp
:
:
CDMKeyInformation
>
&
&
aKeysInfo
)
override
;
void
ExpirationChange
(
const
nsCString
&
aSessionId
double
aSecondsSinceEpoch
)
override
;
void
SessionClosed
(
const
nsCString
&
aSessionId
)
override
;
void
Terminated
(
)
override
;
void
Shutdown
(
)
override
;
private
:
template
<
class
Func
class
.
.
.
Args
>
void
DispatchToMainThread
(
const
char
*
const
aLabel
Func
aFunc
Args
&
&
.
.
.
aArgs
)
;
ChromiumCDMProxy
*
mProxy
;
const
nsCOMPtr
<
nsIEventTarget
>
mMainThread
;
}
;
}
#
endif
