#
ifndef
GMPVideoPlaneImpl_h_
#
define
GMPVideoPlaneImpl_h_
#
include
"
gmp
-
video
-
plane
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
namespace
mozilla
:
:
gmp
{
class
GMPVideoHostImpl
;
class
GMPPlaneData
;
class
GMPPlaneImpl
:
public
GMPPlane
{
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
gmp
:
:
GMPPlaneImpl
>
;
public
:
explicit
GMPPlaneImpl
(
GMPVideoHostImpl
*
aHost
)
;
GMPPlaneImpl
(
const
GMPPlaneData
&
aPlaneData
GMPVideoHostImpl
*
aHost
)
;
virtual
~
GMPPlaneImpl
(
)
;
void
DoneWithAPI
(
)
;
void
ActorDestroyed
(
)
;
bool
InitPlaneData
(
GMPPlaneData
&
aPlaneData
)
;
GMPErr
CreateEmptyPlane
(
int32_t
aAllocatedSize
int32_t
aStride
int32_t
aPlaneSize
)
override
;
GMPErr
Copy
(
const
GMPPlane
&
aPlane
)
override
;
GMPErr
Copy
(
int32_t
aSize
int32_t
aStride
const
uint8_t
*
aBuffer
)
override
;
void
Swap
(
GMPPlane
&
aPlane
)
override
;
int32_t
AllocatedSize
(
)
const
override
;
void
ResetSize
(
)
override
;
bool
IsZeroSize
(
)
const
override
;
int32_t
Stride
(
)
const
override
;
const
uint8_t
*
Buffer
(
)
const
override
;
uint8_t
*
Buffer
(
)
override
;
void
Destroy
(
)
override
;
private
:
GMPErr
MaybeResize
(
int32_t
aNewSize
)
;
void
DestroyBuffer
(
)
;
ipc
:
:
Shmem
mBuffer
;
int32_t
mSize
;
int32_t
mStride
;
GMPVideoHostImpl
*
mHost
;
}
;
}
#
endif
