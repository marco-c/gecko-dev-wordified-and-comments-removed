#
ifndef
GMPServiceParent_h_
#
define
GMPServiceParent_h_
#
include
"
GMPService
.
h
"
#
include
"
mozilla
/
gmp
/
PGMPServiceParent
.
h
"
#
include
"
mozIGeckoMediaPluginChromeService
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
GMPStorage
.
h
"
template
<
class
>
struct
already_AddRefed
;
namespace
mozilla
{
class
OriginAttributesPattern
;
namespace
gmp
{
class
GMPParent
;
class
GMPServiceParent
;
class
GeckoMediaPluginServiceParent
final
:
public
GeckoMediaPluginService
public
mozIGeckoMediaPluginChromeService
public
nsIAsyncShutdownBlocker
{
public
:
static
already_AddRefed
<
GeckoMediaPluginServiceParent
>
GetSingleton
(
)
;
GeckoMediaPluginServiceParent
(
)
;
nsresult
Init
(
)
override
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
NS_IMETHOD
HasPluginForAPI
(
const
nsACString
&
aAPI
nsTArray
<
nsCString
>
*
aTags
bool
*
aRetVal
)
override
;
NS_IMETHOD
GetNodeId
(
const
nsAString
&
aOrigin
const
nsAString
&
aTopLevelOrigin
const
nsAString
&
aGMPName
UniquePtr
<
GetNodeIdCallback
>
&
&
aCallback
)
override
;
NS_DECL_MOZIGECKOMEDIAPLUGINCHROMESERVICE
NS_DECL_NSIOBSERVER
RefPtr
<
GenericPromise
>
EnsureInitialized
(
)
;
RefPtr
<
GenericPromise
>
AsyncAddPluginDirectory
(
const
nsAString
&
aDirectory
)
;
bool
IsShuttingDown
(
)
;
already_AddRefed
<
GMPStorage
>
GetMemoryStorageFor
(
const
nsACString
&
aNodeId
)
;
nsresult
ForgetThisSiteNative
(
const
nsAString
&
aSite
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
;
void
ServiceUserCreated
(
GMPServiceParent
*
aServiceParent
)
;
void
ServiceUserDestroyed
(
GMPServiceParent
*
aServiceParent
)
;
void
UpdateContentProcessGMPCapabilities
(
)
;
private
:
friend
class
GMPServiceParent
;
virtual
~
GeckoMediaPluginServiceParent
(
)
;
void
ClearStorage
(
)
;
already_AddRefed
<
GMPParent
>
SelectPluginForAPI
(
const
nsACString
&
aNodeId
const
nsCString
&
aAPI
const
nsTArray
<
nsCString
>
&
aTags
)
;
already_AddRefed
<
GMPParent
>
FindPluginForAPIFrom
(
size_t
aSearchStartIndex
const
nsCString
&
aAPI
const
nsTArray
<
nsCString
>
&
aTags
size_t
*
aOutPluginIndex
)
;
nsresult
GetNodeId
(
const
nsAString
&
aOrigin
const
nsAString
&
aTopLevelOrigin
const
nsAString
&
aGMPName
nsACString
&
aOutId
)
;
void
UnloadPlugins
(
)
;
void
CrashPlugins
(
)
;
void
NotifySyncShutdownComplete
(
)
;
void
RemoveOnGMPThread
(
const
nsAString
&
aDirectory
const
bool
aDeleteFromDisk
const
bool
aCanDefer
)
;
struct
DirectoryFilter
{
virtual
bool
operator
(
)
(
nsIFile
*
aPath
)
=
0
;
~
DirectoryFilter
(
)
=
default
;
}
;
void
ClearNodeIdAndPlugin
(
DirectoryFilter
&
aFilter
)
;
void
ClearNodeIdAndPlugin
(
nsIFile
*
aPluginStorageDir
DirectoryFilter
&
aFilter
)
;
void
ForgetThisSiteOnGMPThread
(
const
nsACString
&
aOrigin
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
;
void
ClearRecentHistoryOnGMPThread
(
PRTime
aSince
)
;
already_AddRefed
<
GMPParent
>
GetById
(
uint32_t
aPluginId
)
;
protected
:
friend
class
GMPParent
;
void
ReAddOnGMPThread
(
const
RefPtr
<
GMPParent
>
&
aOld
)
;
void
PluginTerminated
(
const
RefPtr
<
GMPParent
>
&
aOld
)
;
void
InitializePlugins
(
nsISerialEventTarget
*
GMPThread
)
override
;
RefPtr
<
GenericPromise
>
LoadFromEnvironment
(
)
;
RefPtr
<
GenericPromise
>
AddOnGMPThread
(
nsString
aDirectory
)
;
RefPtr
<
GetGMPContentParentPromise
>
GetContentParent
(
GMPCrashHelper
*
aHelper
const
NodeIdVariant
&
aNodeIdVariant
const
nsCString
&
aAPI
const
nsTArray
<
nsCString
>
&
aTags
)
override
;
private
:
already_AddRefed
<
GMPParent
>
ClonePlugin
(
const
GMPParent
*
aOriginal
)
;
nsresult
EnsurePluginsOnDiskScanned
(
)
;
nsresult
InitStorage
(
)
;
nsresult
GetNodeId
(
const
NodeIdVariant
&
aNodeIdVariant
nsACString
&
aOutId
)
;
class
PathRunnable
:
public
Runnable
{
public
:
enum
EOperation
{
REMOVE
REMOVE_AND_DELETE_FROM_DISK
}
;
PathRunnable
(
GeckoMediaPluginServiceParent
*
aService
const
nsAString
&
aPath
EOperation
aOperation
bool
aDefer
=
false
)
:
Runnable
(
"
gmp
:
:
GeckoMediaPluginServiceParent
:
:
PathRunnable
"
)
mService
(
aService
)
mPath
(
aPath
)
mOperation
(
aOperation
)
mDefer
(
aDefer
)
{
}
NS_DECL_NSIRUNNABLE
private
:
RefPtr
<
GeckoMediaPluginServiceParent
>
mService
;
nsString
mPath
;
EOperation
mOperation
;
bool
mDefer
;
}
;
nsTArray
<
RefPtr
<
GMPParent
>
>
mPlugins
;
bool
mShuttingDown
;
Atomic
<
bool
>
mScannedPluginOnDisk
;
template
<
typename
T
>
class
MainThreadOnly
{
public
:
MOZ_IMPLICIT
MainThreadOnly
(
T
aValue
)
:
mValue
(
aValue
)
{
}
operator
T
&
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mValue
;
}
private
:
T
mValue
;
}
;
MainThreadOnly
<
bool
>
mWaitingForPluginsSyncShutdown
;
nsTArray
<
nsString
>
mPluginsWaitingForDeletion
;
nsCOMPtr
<
nsIFile
>
mStorageBaseDir
;
nsClassHashtable
<
nsUint32HashKey
nsCString
>
mTempNodeIds
;
nsDataHashtable
<
nsCStringHashKey
bool
>
mPersistentStorageAllowed
;
Monitor
mInitPromiseMonitor
;
MozMonitoredPromiseHolder
<
GenericPromise
>
mInitPromise
;
bool
mLoadPluginsFromDiskComplete
;
nsRefPtrHashtable
<
nsCStringHashKey
GMPStorage
>
mTempGMPStorage
;
nsTArray
<
GMPServiceParent
*
>
mServiceParents
;
}
;
nsresult
ReadSalt
(
nsIFile
*
aPath
nsACString
&
aOutData
)
;
bool
MatchOrigin
(
nsIFile
*
aPath
const
nsACString
&
aSite
const
mozilla
:
:
OriginAttributesPattern
&
aPattern
)
;
class
GMPServiceParent
final
:
public
PGMPServiceParent
{
public
:
explicit
GMPServiceParent
(
GeckoMediaPluginServiceParent
*
aService
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_MAIN_THREAD
(
GMPServiceParent
final
)
;
ipc
:
:
IPCResult
RecvGetGMPNodeId
(
const
nsString
&
aOrigin
const
nsString
&
aTopLevelOrigin
const
nsString
&
aGMPName
nsCString
*
aID
)
override
;
static
bool
Create
(
Endpoint
<
PGMPServiceParent
>
&
&
aGMPService
)
;
ipc
:
:
IPCResult
RecvLaunchGMP
(
const
NodeIdVariant
&
aNodeIdVariant
const
nsCString
&
aAPI
nsTArray
<
nsCString
>
&
&
aTags
nsTArray
<
ProcessId
>
&
&
aAlreadyBridgedTo
uint32_t
*
aOutPluginId
ProcessId
*
aOutProcessId
nsCString
*
aOutDisplayName
Endpoint
<
PGMPContentParent
>
*
aOutEndpoint
nsresult
*
aOutRv
nsCString
*
aOutErrorDescription
)
override
;
private
:
~
GMPServiceParent
(
)
;
RefPtr
<
GeckoMediaPluginServiceParent
>
mService
;
}
;
}
}
#
endif
