include
PrefsTypes
;
include
protocol
PGMPContent
;
include
protocol
PGMPTimer
;
include
protocol
PGMPStorage
;
include
protocol
PProfiler
;
#
if
defined
(
XP_WIN
)
[
MoveOnly
]
using
mozilla
:
:
UntrustedModulesData
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
[
MoveOnly
]
using
mozilla
:
:
ModulePaths
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
[
MoveOnly
]
using
mozilla
:
:
ModulesMapResult
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
#
endif
include
"
mozilla
/
ipc
/
ByteBufUtils
.
h
"
;
include
"
GMPParent
.
h
"
;
include
"
GMPChild
.
h
"
;
using
mozilla
:
:
dom
:
:
NativeThreadId
from
"
mozilla
/
dom
/
NativeThreadId
.
h
"
;
namespace
mozilla
{
namespace
gmp
{
[
NeedsOtherPid
NestedUpTo
=
inside_sync
ChildImpl
=
"
GMPChild
"
ParentImpl
=
"
GMPParent
"
ChildProc
=
GMPlugin
]
sync
protocol
PGMP
{
manages
PGMPTimer
;
manages
PGMPStorage
;
parent
:
async
InitCrashReporter
(
NativeThreadId
threadId
)
;
async
PGMPTimer
(
)
;
async
PGMPStorage
(
)
;
async
PGMPContentChildDestroyed
(
)
;
async
FOGData
(
ByteBuf
buf
)
;
#
if
defined
(
XP_WIN
)
async
GetModulesTrust
(
ModulePaths
aModPaths
bool
aRunAtNormalPriority
)
returns
(
ModulesMapResult
?
modMapResult
)
;
#
endif
child
:
async
CrashPluginNow
(
)
;
[
Nested
=
inside_sync
]
sync
StartPlugin
(
nsString
adapter
)
;
async
ProvideStorageId
(
nsCString
storageId
)
;
async
PreloadLibs
(
nsCString
libs
)
;
async
CloseActive
(
)
;
async
InitGMPContentChild
(
Endpoint
<
PGMPContentChild
>
endpoint
)
;
async
InitProfiler
(
Endpoint
<
PProfilerChild
>
endpoint
)
;
async
PreferenceUpdate
(
Pref
pref
)
;
async
FlushFOGData
(
)
returns
(
ByteBuf
buf
)
;
#
if
defined
(
XP_WIN
)
async
InitDllServices
(
bool
canRecordReleaseTelemetry
bool
aIsReadyForBackgroundProcessing
)
;
async
GetUntrustedModulesData
(
)
returns
(
UntrustedModulesData
?
data
)
;
async
UnblockUntrustedModulesThread
(
)
;
#
endif
async
TestTriggerMetrics
(
)
returns
(
bool
unused
)
;
async
Shutdown
(
)
returns
(
nsCString
profile
)
;
}
;
}
}
