#
ifndef
GMPSharedMemManager_h_
#
define
GMPSharedMemManager_h_
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
gmp
{
enum
class
GMPSharedMemClass
{
Decoded
Encoded
}
;
class
GMPSharedMemManager
{
public
:
GMPSharedMemManager
(
)
=
default
;
virtual
~
GMPSharedMemManager
(
)
;
bool
MgrTakeShmem
(
GMPSharedMemClass
aClass
ipc
:
:
Shmem
*
aMem
)
;
bool
MgrTakeShmem
(
GMPSharedMemClass
aClass
size_t
aSize
ipc
:
:
Shmem
*
aMem
)
;
void
MgrGiveShmem
(
GMPSharedMemClass
aClass
ipc
:
:
Shmem
&
&
aMem
)
;
void
MgrPurgeShmems
(
)
;
virtual
bool
MgrAllocShmem
(
size_t
aSize
ipc
:
:
Shmem
*
aMem
)
{
return
false
;
}
virtual
void
MgrDeallocShmem
(
ipc
:
:
Shmem
&
aMem
)
=
0
;
protected
:
virtual
bool
MgrIsOnOwningThread
(
)
const
=
0
;
static
constexpr
size_t
kMaxPools
=
2
;
private
:
void
PurgeSmallerShmem
(
nsTArray
<
ipc
:
:
Shmem
>
&
aPool
size_t
aSize
)
;
static
constexpr
size_t
kMaxPoolLength
=
16
;
AutoTArray
<
ipc
:
:
Shmem
kMaxPoolLength
>
mPool
[
kMaxPools
]
;
}
;
}
#
endif
