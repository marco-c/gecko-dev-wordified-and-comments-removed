#
ifndef
GMPVideoEncoderChild_h_
#
define
GMPVideoEncoderChild_h_
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
gmp
/
PGMPVideoEncoderChild
.
h
"
#
include
"
gmp
-
video
-
encode
.
h
"
#
include
"
GMPSharedMemManager
.
h
"
#
include
"
GMPVideoHost
.
h
"
namespace
mozilla
{
namespace
gmp
{
class
GMPContentChild
;
class
GMPVideoEncoderChild
:
public
PGMPVideoEncoderChild
public
GMPVideoEncoderCallback
public
GMPSharedMemManager
{
friend
class
PGMPVideoEncoderChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GMPVideoEncoderChild
)
;
explicit
GMPVideoEncoderChild
(
GMPContentChild
*
aPlugin
)
;
void
Init
(
GMPVideoEncoder
*
aEncoder
)
;
GMPVideoHostImpl
&
Host
(
)
;
void
Encoded
(
GMPVideoEncodedFrame
*
aEncodedFrame
const
uint8_t
*
aCodecSpecificInfo
uint32_t
aCodecSpecificInfoLength
)
override
;
void
Error
(
GMPErr
aError
)
override
;
bool
Alloc
(
size_t
aSize
Shmem
:
:
SharedMemory
:
:
SharedMemoryType
aType
Shmem
*
aMem
)
override
;
void
Dealloc
(
Shmem
&
&
aMem
)
override
;
private
:
virtual
~
GMPVideoEncoderChild
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitEncode
(
const
GMPVideoCodec
&
aCodecSettings
InfallibleTArray
<
uint8_t
>
&
&
aCodecSpecific
const
int32_t
&
aNumberOfCores
const
uint32_t
&
aMaxPayloadSize
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEncode
(
const
GMPVideoi420FrameData
&
aInputFrame
InfallibleTArray
<
uint8_t
>
&
&
aCodecSpecificInfo
InfallibleTArray
<
GMPVideoFrameType
>
&
&
aFrameTypes
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvChildShmemForPool
(
Shmem
&
&
aEncodedBuffer
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetChannelParameters
(
const
uint32_t
&
aPacketLoss
const
uint32_t
&
aRTT
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetRates
(
const
uint32_t
&
aNewBitRate
const
uint32_t
&
aFrameRate
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPeriodicKeyFrames
(
const
bool
&
aEnable
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEncodingComplete
(
)
;
GMPContentChild
*
mPlugin
;
GMPVideoEncoder
*
mVideoEncoder
;
GMPVideoHostImpl
mVideoHost
;
int
mNeedShmemIntrCount
;
bool
mPendingEncodeComplete
;
}
;
}
}
#
endif
