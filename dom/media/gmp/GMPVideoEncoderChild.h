#
ifndef
GMPVideoEncoderChild_h_
#
define
GMPVideoEncoderChild_h_
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
gmp
/
PGMPVideoEncoderChild
.
h
"
#
include
"
gmp
-
video
-
encode
.
h
"
#
include
"
GMPSharedMemManager
.
h
"
#
include
"
GMPVideoHost
.
h
"
namespace
mozilla
:
:
gmp
{
class
GMPContentChild
;
class
GMPVideoEncoderChild
final
:
public
PGMPVideoEncoderChild
public
GMPVideoEncoderCallback
public
GMPSharedMemManager
{
friend
class
PGMPVideoEncoderChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GMPVideoEncoderChild
final
)
;
explicit
GMPVideoEncoderChild
(
GMPContentChild
*
aPlugin
)
;
void
Init
(
GMPVideoEncoder
*
aEncoder
)
;
GMPVideoHostImpl
&
Host
(
)
;
void
Encoded
(
GMPVideoEncodedFrame
*
aEncodedFrame
const
uint8_t
*
aCodecSpecificInfo
uint32_t
aCodecSpecificInfoLength
)
override
;
void
Error
(
GMPErr
aError
)
override
;
void
MgrDeallocShmem
(
Shmem
&
aMem
)
override
{
DeallocShmem
(
aMem
)
;
}
protected
:
bool
MgrIsOnOwningThread
(
)
const
override
;
private
:
virtual
~
GMPVideoEncoderChild
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitEncode
(
const
GMPVideoCodec
&
aCodecSettings
nsTArray
<
uint8_t
>
&
&
aCodecSpecific
const
int32_t
&
aNumberOfCores
const
uint32_t
&
aMaxPayloadSize
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGiveShmem
(
ipc
:
:
Shmem
&
&
aOutputShmem
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEncode
(
const
GMPVideoi420FrameData
&
aInputFrame
ipc
:
:
Shmem
&
&
aInputShmem
nsTArray
<
uint8_t
>
&
&
aCodecSpecificInfo
nsTArray
<
GMPVideoFrameType
>
&
&
aFrameTypes
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetChannelParameters
(
const
uint32_t
&
aPacketLoss
const
uint32_t
&
aRTT
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetRates
(
const
uint32_t
&
aNewBitRate
const
uint32_t
&
aFrameRate
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPeriodicKeyFrames
(
const
bool
&
aEnable
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
GMPContentChild
*
mPlugin
;
GMPVideoEncoder
*
mVideoEncoder
;
GMPVideoHostImpl
mVideoHost
;
}
;
}
#
endif
