#
ifndef
GMPChild_h_
#
define
GMPChild_h_
#
include
"
mozilla
/
gmp
/
PGMPChild
.
h
"
#
include
"
GMPTimerChild
.
h
"
#
include
"
GMPStorageChild
.
h
"
#
include
"
GMPLoader
.
h
"
#
include
"
gmp
-
entrypoints
.
h
"
#
include
"
prlink
.
h
"
namespace
mozilla
{
class
ChildProfilerController
;
namespace
gmp
{
class
GMPContentChild
;
class
GMPChild
:
public
PGMPChild
{
friend
class
PGMPChild
;
public
:
GMPChild
(
)
;
virtual
~
GMPChild
(
)
;
bool
Init
(
const
nsAString
&
aPluginPath
mozilla
:
:
ipc
:
:
UntypedEndpoint
&
&
aEndpoint
)
;
MessageLoop
*
GMPMessageLoop
(
)
;
GMPTimerChild
*
GetGMPTimers
(
)
;
GMPStorageChild
*
GetGMPStorage
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
bool
SetMacSandboxInfo
(
bool
aAllowWindowServer
)
;
#
endif
private
:
friend
class
GMPContentChild
;
bool
GetUTF8LibPath
(
nsACString
&
aOutLibPath
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvProvideStorageId
(
const
nsCString
&
aStorageId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStartPlugin
(
const
nsString
&
aAdapter
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadLibs
(
const
nsCString
&
aLibs
)
;
PGMPTimerChild
*
AllocPGMPTimerChild
(
)
;
bool
DeallocPGMPTimerChild
(
PGMPTimerChild
*
aActor
)
;
PGMPStorageChild
*
AllocPGMPStorageChild
(
)
;
bool
DeallocPGMPStorageChild
(
PGMPStorageChild
*
aActor
)
;
void
GMPContentChildActorDestroy
(
GMPContentChild
*
aGMPContentChild
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCrashPluginNow
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCloseActive
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitGMPContentChild
(
Endpoint
<
PGMPContentChild
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushFOGData
(
FlushFOGDataResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvTestTriggerMetrics
(
TestTriggerMetricsResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitProfiler
(
Endpoint
<
mozilla
:
:
PProfilerChild
>
&
&
aEndpoint
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
GMPErr
GetAPI
(
const
char
*
aAPIName
void
*
aHostAPI
void
*
*
aPluginAPI
const
nsACString
&
aKeySystem
=
"
"
_ns
)
;
nsTArray
<
std
:
:
pair
<
nsCString
nsCString
>
>
MakeCDMHostVerificationPaths
(
)
;
nsTArray
<
RefPtr
<
GMPContentChild
>
>
mGMPContentChildren
;
RefPtr
<
GMPTimerChild
>
mTimerChild
;
RefPtr
<
GMPStorageChild
>
mStorage
;
RefPtr
<
ChildProfilerController
>
mProfilerController
;
MessageLoop
*
mGMPMessageLoop
;
nsString
mPluginPath
;
nsCString
mStorageId
;
UniquePtr
<
GMPLoader
>
mGMPLoader
;
#
ifdef
XP_LINUX
nsTArray
<
void
*
>
mLibHandles
;
#
endif
}
;
}
}
#
endif
