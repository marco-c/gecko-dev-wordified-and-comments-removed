#
ifndef
GMP_LOADER_H__
#
define
GMP_LOADER_H__
#
include
<
stdint
.
h
>
#
include
"
prlink
.
h
"
#
include
"
gmp
-
entrypoints
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_GMP_SANDBOX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
endif
namespace
mozilla
{
namespace
gmp
{
class
SandboxStarter
{
public
:
virtual
~
SandboxStarter
(
)
{
}
virtual
bool
Start
(
const
char
*
aLibPath
)
=
0
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_GMP_SANDBOX
)
virtual
void
SetSandboxInfo
(
MacSandboxInfo
*
aSandboxInfo
)
=
0
;
#
endif
}
;
class
GMPAdapter
{
public
:
virtual
~
GMPAdapter
(
)
{
}
virtual
void
SetAdaptee
(
PRLibrary
*
aLib
)
=
0
;
virtual
GMPErr
GMPInit
(
const
GMPPlatformAPI
*
aPlatformAPI
)
=
0
;
virtual
GMPErr
GMPGetAPI
(
const
char
*
aAPIName
void
*
aHostAPI
void
*
*
aPluginAPI
uint32_t
aDecryptorId
)
=
0
;
virtual
void
GMPShutdown
(
)
=
0
;
}
;
class
GMPLoader
{
public
:
virtual
~
GMPLoader
(
)
{
}
virtual
bool
Load
(
const
char
*
aUTF8LibPath
uint32_t
aLibPathLen
char
*
aOriginSalt
uint32_t
aOriginSaltLen
const
GMPPlatformAPI
*
aPlatformAPI
GMPAdapter
*
aAdapter
=
nullptr
)
=
0
;
virtual
GMPErr
GetAPI
(
const
char
*
aAPIName
void
*
aHostAPI
void
*
*
aPluginAPI
uint32_t
aDecryptorId
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_GMP_SANDBOX
)
virtual
void
SetSandboxInfo
(
MacSandboxInfo
*
aSandboxInfo
)
=
0
;
#
endif
}
;
UniquePtr
<
GMPLoader
>
CreateGMPLoader
(
UniquePtr
<
SandboxStarter
>
aStarter
)
;
}
}
#
endif
