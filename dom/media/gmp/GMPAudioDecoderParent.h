#
ifndef
GMPAudioDecoderParent_h_
#
define
GMPAudioDecoderParent_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
gmp
-
audio
-
decode
.
h
"
#
include
"
gmp
-
audio
-
codec
.
h
"
#
include
"
mozilla
/
gmp
/
PGMPAudioDecoderParent
.
h
"
#
include
"
GMPMessageUtils
.
h
"
#
include
"
GMPAudioDecoderProxy
.
h
"
namespace
mozilla
{
namespace
gmp
{
class
GMPContentParent
;
class
GMPAudioDecoderParent
final
:
public
GMPAudioDecoderProxy
public
PGMPAudioDecoderParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
GMPAudioDecoderParent
)
explicit
GMPAudioDecoderParent
(
GMPContentParent
*
aPlugin
)
;
nsresult
Shutdown
(
)
;
nsresult
InitDecode
(
GMPAudioCodecType
aCodecType
uint32_t
aChannelCount
uint32_t
aBitsPerChannel
uint32_t
aSamplesPerSecond
nsTArray
<
uint8_t
>
&
aExtraData
GMPAudioDecoderCallbackProxy
*
aCallback
)
override
;
nsresult
Decode
(
GMPAudioSamplesImpl
&
aInput
)
override
;
nsresult
Reset
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Close
(
)
override
;
private
:
~
GMPAudioDecoderParent
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
bool
RecvDecoded
(
const
GMPAudioDecodedSampleData
&
aDecoded
)
override
;
bool
RecvInputDataExhausted
(
)
override
;
bool
RecvDrainComplete
(
)
override
;
bool
RecvResetComplete
(
)
override
;
bool
RecvError
(
const
GMPErr
&
aError
)
override
;
bool
RecvShutdown
(
)
override
;
bool
Recv__delete__
(
)
override
;
void
UnblockResetAndDrain
(
)
;
bool
mIsOpen
;
bool
mShuttingDown
;
bool
mActorDestroyed
;
bool
mIsAwaitingResetComplete
;
bool
mIsAwaitingDrainComplete
;
RefPtr
<
GMPContentParent
>
mPlugin
;
GMPAudioDecoderCallbackProxy
*
mCallback
;
}
;
}
}
#
endif
