#
include
"
GMPProcessChild
.
h
"
#
include
"
base
/
command_line
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
chrome
/
common
/
chrome_switches
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
namespace
mozilla
{
namespace
gmp
{
GMPProcessChild
:
:
GMPProcessChild
(
ProcessId
aParentPid
)
:
ProcessChild
(
aParentPid
)
{
}
GMPProcessChild
:
:
~
GMPProcessChild
(
)
{
}
bool
GMPProcessChild
:
:
Init
(
)
{
nsAutoString
pluginFilename
;
nsAutoString
voucherFilename
;
#
if
defined
(
OS_POSIX
)
std
:
:
vector
<
std
:
:
string
>
values
=
CommandLine
:
:
ForCurrentProcess
(
)
-
>
argv
(
)
;
MOZ_ASSERT
(
values
.
size
(
)
>
=
3
"
not
enough
args
"
)
;
pluginFilename
=
NS_ConvertUTF8toUTF16
(
nsDependentCString
(
values
[
1
]
.
c_str
(
)
)
)
;
voucherFilename
=
NS_ConvertUTF8toUTF16
(
nsDependentCString
(
values
[
2
]
.
c_str
(
)
)
)
;
#
elif
defined
(
OS_WIN
)
std
:
:
vector
<
std
:
:
wstring
>
values
=
CommandLine
:
:
ForCurrentProcess
(
)
-
>
GetLooseValues
(
)
;
MOZ_ASSERT
(
values
.
size
(
)
>
=
2
"
not
enough
loose
args
"
)
;
pluginFilename
=
nsDependentString
(
values
[
0
]
.
c_str
(
)
)
;
voucherFilename
=
nsDependentString
(
values
[
1
]
.
c_str
(
)
)
;
#
else
#
error
Not
implemented
#
endif
BackgroundHangMonitor
:
:
Startup
(
)
;
return
mPlugin
.
Init
(
pluginFilename
voucherFilename
ParentPid
(
)
IOThreadChild
:
:
message_loop
(
)
IOThreadChild
:
:
channel
(
)
)
;
}
void
GMPProcessChild
:
:
CleanUp
(
)
{
BackgroundHangMonitor
:
:
Shutdown
(
)
;
}
GMPLoader
*
GMPProcessChild
:
:
mLoader
=
nullptr
;
void
GMPProcessChild
:
:
SetGMPLoader
(
GMPLoader
*
aLoader
)
{
mLoader
=
aLoader
;
}
GMPLoader
*
GMPProcessChild
:
:
GetGMPLoader
(
)
{
return
mLoader
;
}
}
}
