include
"
GMPMessageUtils
.
h
"
;
using
cdm
:
:
EncryptionScheme
from
"
GMPSanitizedExports
.
h
"
;
using
GMPBufferType
from
"
gmp
-
video
-
codec
.
h
"
;
namespace
mozilla
{
namespace
gmp
{
struct
NodeIdParts
{
nsString
mOrigin
;
nsString
mTopLevelOrigin
;
nsString
mGMPName
;
}
;
union
NodeIdVariant
{
nsCString
;
NodeIdParts
;
}
;
struct
GMPVideoEncodedFrameData
{
uint32_t
mEncodedWidth
;
uint32_t
mEncodedHeight
;
uint64_t
mTimestamp
;
uint64_t
mDuration
;
uint32_t
mFrameType
;
uint32_t
mSize
;
int32_t
mTemporalLayerId
;
GMPBufferType
mBufferType
;
bool
mCompleteFrame
;
}
;
struct
GMPPlaneData
{
int32_t
mOffset
;
int32_t
mSize
;
int32_t
mStride
;
}
;
struct
GMPVideoi420FrameData
{
GMPPlaneData
mYPlane
;
GMPPlaneData
mUPlane
;
GMPPlaneData
mVPlane
;
int32_t
mWidth
;
int32_t
mHeight
;
uint64_t
mTimestamp
;
uint64_t
?
mUpdatedTimestamp
;
uint64_t
mDuration
;
}
;
struct
CDMInputBuffer
{
Shmem
mData
;
uint8_t
[
]
mKeyId
;
uint8_t
[
]
mIV
;
int64_t
mTimestamp
;
int64_t
mDuration
;
uint32_t
[
]
mClearBytes
;
uint32_t
[
]
mCipherBytes
;
uint8_t
mCryptByteBlock
;
uint8_t
mSkipByteBlock
;
EncryptionScheme
mEncryptionScheme
;
}
;
struct
CDMVideoDecoderConfig
{
uint32_t
mCodec
;
uint32_t
mProfile
;
uint32_t
mFormat
;
int32_t
mImageWidth
;
int32_t
mImageHeight
;
uint8_t
[
]
mExtraData
;
EncryptionScheme
mEncryptionScheme
;
}
;
struct
CDMKeyInformation
{
uint8_t
[
]
mKeyId
;
uint32_t
mStatus
;
uint32_t
mSystemCode
;
}
;
struct
CDMVideoPlane
{
uint32_t
mPlaneOffset
;
uint32_t
mStride
;
}
;
struct
CDMVideoFrame
{
uint32_t
mFormat
;
int32_t
mImageWidth
;
int32_t
mImageHeight
;
CDMVideoPlane
mYPlane
;
CDMVideoPlane
mUPlane
;
CDMVideoPlane
mVPlane
;
int64_t
mTimestamp
;
int64_t
mDuration
;
}
;
}
}
