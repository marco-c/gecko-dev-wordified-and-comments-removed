#
ifndef
GMPParent_h_
#
define
GMPParent_h_
#
include
"
GMPNativeTypes
.
h
"
#
include
"
GMPProcessParent
.
h
"
#
include
"
GMPServiceParent
.
h
"
#
include
"
GMPVideoDecoderParent
.
h
"
#
include
"
GMPVideoEncoderParent
.
h
"
#
include
"
GMPTimerParent
.
h
"
#
include
"
GMPStorageParent
.
h
"
#
include
"
mozilla
/
gmp
/
PGMPParent
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterHelper
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
gmp
{
class
GMPCapability
{
public
:
explicit
GMPCapability
(
)
=
default
;
GMPCapability
(
GMPCapability
&
&
aOther
)
:
mAPIName
(
std
:
:
move
(
aOther
.
mAPIName
)
)
mAPITags
(
std
:
:
move
(
aOther
.
mAPITags
)
)
{
}
explicit
GMPCapability
(
const
nsACString
&
aAPIName
)
:
mAPIName
(
aAPIName
)
{
}
explicit
GMPCapability
(
const
GMPCapability
&
aOther
)
=
default
;
nsCString
mAPIName
;
CopyableTArray
<
nsCString
>
mAPITags
;
static
bool
Supports
(
const
nsTArray
<
GMPCapability
>
&
aCapabilities
const
nsACString
&
aAPI
const
nsTArray
<
nsCString
>
&
aTags
)
;
static
bool
Supports
(
const
nsTArray
<
GMPCapability
>
&
aCapabilities
const
nsACString
&
aAPI
const
nsCString
&
aTag
)
;
}
;
enum
class
GMPState
:
uint32_t
{
NotLoaded
Loaded
Unloading
Closing
}
;
class
GMPContentParent
;
class
GMPParent
final
:
public
PGMPParent
public
ipc
:
:
CrashReporterHelper
<
GeckoProcessType_GMPlugin
>
{
friend
class
PGMPParent
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GMPParent
final
)
GMPParent
(
)
;
RefPtr
<
GenericPromise
>
Init
(
GeckoMediaPluginServiceParent
*
aService
nsIFile
*
aPluginDir
)
;
void
CloneFrom
(
const
GMPParent
*
aOther
)
;
void
Crash
(
)
;
nsresult
LoadProcess
(
)
;
void
CloseIfUnused
(
)
;
void
CloseActive
(
bool
aDieWhenUnloaded
)
;
void
MarkForDeletion
(
)
;
bool
IsMarkedForDeletion
(
)
;
void
Shutdown
(
)
;
void
DeleteProcess
(
)
;
GMPState
State
(
)
const
;
nsCOMPtr
<
nsISerialEventTarget
>
GMPEventTarget
(
)
;
void
SetNodeId
(
const
nsACString
&
aNodeId
)
;
const
nsACString
&
GetNodeId
(
)
const
{
return
mNodeId
;
}
const
nsCString
&
GetDisplayName
(
)
const
;
const
nsCString
&
GetVersion
(
)
const
;
uint32_t
GetPluginId
(
)
const
;
GMPPluginType
GetPluginType
(
)
const
{
return
mPluginType
;
}
nsString
GetPluginBaseName
(
)
const
;
bool
CanBeSharedCrossNodeIds
(
)
const
;
bool
CanBeUsedFrom
(
const
nsACString
&
aNodeId
)
const
;
already_AddRefed
<
nsIFile
>
GetDirectory
(
)
{
return
nsCOMPtr
<
nsIFile
>
(
mDirectory
)
.
forget
(
)
;
}
void
AbortAsyncShutdown
(
)
;
void
ChildTerminated
(
)
;
bool
OpenPGMPContent
(
)
;
void
GetGMPContentParent
(
UniquePtr
<
MozPromiseHolder
<
GetGMPContentParentPromise
>
>
&
&
aPromiseHolder
)
;
already_AddRefed
<
GMPContentParent
>
ForgetGMPContentParent
(
)
;
bool
EnsureProcessLoaded
(
base
:
:
ProcessId
*
aID
)
;
void
IncrementGMPContentChildCount
(
)
;
const
nsTArray
<
GMPCapability
>
&
GetCapabilities
(
)
const
{
return
mCapabilities
;
}
private
:
~
GMPParent
(
)
;
void
UpdatePluginType
(
)
;
RefPtr
<
GeckoMediaPluginServiceParent
>
mService
;
bool
EnsureProcessLoaded
(
)
;
RefPtr
<
GenericPromise
>
ReadGMPMetaData
(
)
;
RefPtr
<
GenericPromise
>
ReadGMPInfoFile
(
nsIFile
*
aFile
)
;
RefPtr
<
GenericPromise
>
ParseChromiumManifest
(
const
nsAString
&
aJSON
)
;
RefPtr
<
GenericPromise
>
ReadChromiumManifestFile
(
nsIFile
*
aFile
)
;
void
AddCrashAnnotations
(
)
;
void
GetCrashID
(
nsString
&
aResult
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPStorageConstructor
(
PGMPStorageParent
*
actor
)
override
;
PGMPStorageParent
*
AllocPGMPStorageParent
(
)
;
bool
DeallocPGMPStorageParent
(
PGMPStorageParent
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPTimerConstructor
(
PGMPTimerParent
*
actor
)
override
;
PGMPTimerParent
*
AllocPGMPTimerParent
(
)
;
bool
DeallocPGMPTimerParent
(
PGMPTimerParent
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPContentChildDestroyed
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFOGData
(
ByteBuf
&
&
aBuf
)
;
bool
IsUsed
(
)
{
return
mGMPContentChildCount
>
0
|
|
!
mGetContentParentPromises
.
IsEmpty
(
)
;
}
void
ResolveGetContentParentPromises
(
)
;
void
RejectGetContentParentPromises
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
__aarch64__
)
void
PreTranslateBins
(
)
;
void
PreTranslateBinsWorker
(
)
;
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
nsresult
GetPluginFileArch
(
nsIFile
*
aPluginDir
const
nsString
&
aBaseName
uint32_t
&
aArchSet
)
;
#
endif
Atomic
<
GMPState
>
mState
;
nsCOMPtr
<
nsIFile
>
mDirectory
;
nsString
mName
;
nsCString
mDisplayName
;
nsCString
mDescription
;
nsCString
mVersion
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_LINUX
)
nsCString
mLibs
;
#
endif
nsString
mAdapter
;
const
uint32_t
mPluginId
;
GMPPluginType
mPluginType
=
GMPPluginType
:
:
Unknown
;
nsTArray
<
GMPCapability
>
mCapabilities
;
GMPProcessParent
*
mProcess
;
bool
mDeleteProcessOnlyOnUnload
;
bool
mAbnormalShutdownInProgress
;
bool
mIsBlockingDeletion
;
bool
mCanDecrypt
;
nsTArray
<
RefPtr
<
GMPTimerParent
>
>
mTimers
;
nsTArray
<
RefPtr
<
GMPStorageParent
>
>
mStorage
;
nsCString
mNodeId
;
RefPtr
<
GMPContentParent
>
mGMPContentParent
;
nsTArray
<
UniquePtr
<
MozPromiseHolder
<
GetGMPContentParentPromise
>
>
>
mGetContentParentPromises
;
uint32_t
mGMPContentChildCount
;
int
mChildPid
;
#
ifdef
ALLOW_GECKO_CHILD_PROCESS_ARCH
uint32_t
mChildLaunchArch
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
__aarch64__
)
nsCString
mPluginFilePath
;
#
endif
const
nsCOMPtr
<
nsISerialEventTarget
>
mMainThread
;
}
;
}
#
endif
