#
include
"
GMPVideoEncoderParent
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
GMPVideoi420FrameImpl
.
h
"
#
include
"
GMPVideoEncodedFrameImpl
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
GMPMessageUtils
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
GMPContentParent
.
h
"
#
include
"
mozilla
/
gmp
/
GMPTypes
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
runnable_utils
.
h
"
#
include
"
GMPUtils
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
GMPCrashHelper
.
h
"
namespace
mozilla
{
#
ifdef
LOG
#
undef
LOG
#
endif
extern
LogModule
*
GetGMPLog
(
)
;
#
define
LOGD
(
msg
)
MOZ_LOG
(
GetGMPLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
msg
)
#
define
LOG
(
level
msg
)
MOZ_LOG
(
GetGMPLog
(
)
(
level
)
msg
)
#
ifdef
__CLASS__
#
undef
__CLASS__
#
endif
#
define
__CLASS__
"
GMPVideoEncoderParent
"
namespace
gmp
{
GMPVideoEncoderParent
:
:
GMPVideoEncoderParent
(
GMPContentParent
*
aPlugin
)
:
GMPSharedMemManager
(
aPlugin
)
mIsOpen
(
false
)
mShuttingDown
(
false
)
mActorDestroyed
(
false
)
mPlugin
(
aPlugin
)
mCallback
(
nullptr
)
mVideoHost
(
this
)
mPluginId
(
aPlugin
-
>
GetPluginId
(
)
)
{
MOZ_ASSERT
(
mPlugin
)
;
nsresult
rv
=
NS_NewNamedThread
(
"
GMPEncoded
"
getter_AddRefs
(
mEncodedThread
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
)
;
}
}
GMPVideoEncoderParent
:
:
~
GMPVideoEncoderParent
(
)
{
if
(
mEncodedThread
)
{
mEncodedThread
-
>
Shutdown
(
)
;
}
}
GMPVideoHostImpl
&
GMPVideoEncoderParent
:
:
Host
(
)
{
return
mVideoHost
;
}
void
GMPVideoEncoderParent
:
:
Close
(
)
{
LOGD
(
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
)
;
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
mCallback
=
nullptr
;
RefPtr
<
GMPVideoEncoderParent
>
kungfudeathgrip
(
this
)
;
Release
(
)
;
Shutdown
(
)
;
}
GMPErr
GMPVideoEncoderParent
:
:
InitEncode
(
const
GMPVideoCodec
&
aCodecSettings
const
nsTArray
<
uint8_t
>
&
aCodecSpecific
GMPVideoEncoderCallbackProxy
*
aCallback
int32_t
aNumberOfCores
uint32_t
aMaxPayloadSize
)
{
LOGD
(
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
)
;
if
(
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
re
-
init
an
in
-
use
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
if
(
!
aCallback
)
{
return
GMPGenericErr
;
}
mCallback
=
aCallback
;
if
(
!
SendInitEncode
(
aCodecSettings
aCodecSpecific
aNumberOfCores
aMaxPayloadSize
)
)
{
return
GMPGenericErr
;
}
mIsOpen
=
true
;
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
Encode
(
GMPUniquePtr
<
GMPVideoi420Frame
>
aInputFrame
const
nsTArray
<
uint8_t
>
&
aCodecSpecificInfo
const
nsTArray
<
GMPVideoFrameType
>
&
aFrameTypes
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
dead
GMP
video
encoder
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
GMPUniquePtr
<
GMPVideoi420FrameImpl
>
inputFrameImpl
(
static_cast
<
GMPVideoi420FrameImpl
*
>
(
aInputFrame
.
release
(
)
)
)
;
if
(
(
NumInUse
(
GMPSharedMem
:
:
kGMPFrameData
)
>
3
*
GMPSharedMem
:
:
kGMPBufLimit
)
|
|
(
NumInUse
(
GMPSharedMem
:
:
kGMPEncodedData
)
>
GMPSharedMem
:
:
kGMPBufLimit
)
)
{
return
GMPGenericErr
;
}
GMPVideoi420FrameData
frameData
;
inputFrameImpl
-
>
InitFrameData
(
frameData
)
;
if
(
!
SendEncode
(
frameData
aCodecSpecificInfo
aFrameTypes
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetChannelParameters
(
uint32_t
aPacketLoss
uint32_t
aRTT
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
invalid
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
if
(
!
SendSetChannelParameters
(
aPacketLoss
aRTT
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetRates
(
uint32_t
aNewBitRate
uint32_t
aFrameRate
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
dead
GMP
video
decoder
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
if
(
!
SendSetRates
(
aNewBitRate
aFrameRate
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetPeriodicKeyFrames
(
bool
aEnable
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
invalid
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
if
(
!
SendSetPeriodicKeyFrames
(
aEnable
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
void
GMPVideoEncoderParent
:
:
Shutdown
(
)
{
LOGD
(
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
)
;
MOZ_ASSERT
(
mPlugin
-
>
GMPThread
(
)
=
=
NS_GetCurrentThread
(
)
)
;
if
(
mShuttingDown
)
{
return
;
}
mShuttingDown
=
true
;
if
(
mCallback
)
{
mCallback
-
>
Terminated
(
)
;
mCallback
=
nullptr
;
}
mIsOpen
=
false
;
if
(
!
mActorDestroyed
)
{
Unused
<
<
SendEncodingComplete
(
)
;
}
}
static
void
ShutdownEncodedThread
(
nsCOMPtr
<
nsIThread
>
&
aThread
)
{
aThread
-
>
Shutdown
(
)
;
}
void
GMPVideoEncoderParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOGD
(
(
"
%
s
:
:
%
s
:
%
p
(
%
d
)
"
__CLASS__
__FUNCTION__
this
(
int
)
aWhy
)
)
;
mIsOpen
=
false
;
mActorDestroyed
=
true
;
if
(
mCallback
)
{
mCallback
-
>
Terminated
(
)
;
mCallback
=
nullptr
;
}
if
(
mEncodedThread
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
WrapRunnableNM
(
&
ShutdownEncodedThread
nsCOMPtr
<
nsIThread
>
(
mEncodedThread
)
)
;
SystemGroup
:
:
Dispatch
(
"
ShutdownEncodedThread
"
TaskCategory
:
:
Other
r
.
forget
(
)
)
;
mEncodedThread
=
nullptr
;
}
if
(
mPlugin
)
{
mPlugin
-
>
VideoEncoderDestroyed
(
this
)
;
mPlugin
=
nullptr
;
}
mVideoHost
.
ActorDestroyed
(
)
;
MaybeDisconnect
(
aWhy
=
=
AbnormalShutdown
)
;
}
static
void
EncodedCallback
(
GMPVideoEncoderCallbackProxy
*
aCallback
GMPVideoEncodedFrame
*
aEncodedFrame
nsTArray
<
uint8_t
>
*
aCodecSpecificInfo
nsCOMPtr
<
nsIThread
>
aThread
)
{
aCallback
-
>
Encoded
(
aEncodedFrame
*
aCodecSpecificInfo
)
;
delete
aCodecSpecificInfo
;
aThread
-
>
Dispatch
(
WrapRunnable
(
aEncodedFrame
&
GMPVideoEncodedFrame
:
:
Destroy
)
NS_DISPATCH_NORMAL
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvEncoded
(
const
GMPVideoEncodedFrameData
&
aEncodedFrame
InfallibleTArray
<
uint8_t
>
&
&
aCodecSpecificInfo
)
{
if
(
!
mCallback
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
auto
f
=
new
GMPVideoEncodedFrameImpl
(
aEncodedFrame
&
mVideoHost
)
;
nsTArray
<
uint8_t
>
*
codecSpecificInfo
=
new
nsTArray
<
uint8_t
>
;
codecSpecificInfo
-
>
AppendElements
(
(
uint8_t
*
)
aCodecSpecificInfo
.
Elements
(
)
aCodecSpecificInfo
.
Length
(
)
)
;
nsCOMPtr
<
nsIThread
>
thread
=
NS_GetCurrentThread
(
)
;
mEncodedThread
-
>
Dispatch
(
WrapRunnableNM
(
&
EncodedCallback
mCallback
f
codecSpecificInfo
thread
)
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvError
(
const
GMPErr
&
aError
)
{
if
(
!
mCallback
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mCallback
-
>
Error
(
aError
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvShutdown
(
)
{
Shutdown
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvParentShmemForPool
(
Shmem
&
&
aFrameBuffer
)
{
if
(
aFrameBuffer
.
IsWritable
(
)
)
{
if
(
mVideoHost
.
SharedMemMgr
(
)
)
{
mVideoHost
.
SharedMemMgr
(
)
-
>
MgrDeallocShmem
(
GMPSharedMem
:
:
kGMPFrameData
aFrameBuffer
)
;
}
else
{
LOGD
(
(
"
%
s
:
:
%
s
:
%
p
Called
in
shutdown
ignoring
and
freeing
directly
"
__CLASS__
__FUNCTION__
this
)
)
;
DeallocShmem
(
aFrameBuffer
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
AnswerNeedShmem
(
const
uint32_t
&
aEncodedBufferSize
Shmem
*
aMem
)
{
ipc
:
:
Shmem
mem
;
if
(
!
mVideoHost
.
SharedMemMgr
(
)
|
|
!
mVideoHost
.
SharedMemMgr
(
)
-
>
MgrAllocShmem
(
GMPSharedMem
:
:
kGMPEncodedData
aEncodedBufferSize
ipc
:
:
SharedMemory
:
:
TYPE_BASIC
&
mem
)
)
{
LOG
(
LogLevel
:
:
Error
(
"
%
s
:
:
%
s
:
Failed
to
get
a
shared
mem
buffer
for
Child
!
size
%
u
"
__CLASS__
__FUNCTION__
aEncodedBufferSize
)
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
*
aMem
=
mem
;
mem
=
ipc
:
:
Shmem
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
Recv__delete__
(
)
{
if
(
mPlugin
)
{
mPlugin
-
>
VideoEncoderDestroyed
(
this
)
;
mPlugin
=
nullptr
;
}
return
IPC_OK
(
)
;
}
}
}
