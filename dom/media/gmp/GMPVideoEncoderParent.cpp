#
include
"
GMPVideoEncoderParent
.
h
"
#
include
"
GMPContentParent
.
h
"
#
include
"
GMPCrashHelper
.
h
"
#
include
"
GMPLog
.
h
"
#
include
"
GMPMessageUtils
.
h
"
#
include
"
GMPVideoEncodedFrameImpl
.
h
"
#
include
"
GMPVideoi420FrameImpl
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
gmp
/
GMPTypes
.
h
"
#
include
"
nsAutoRef
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
runnable_utils
.
h
"
namespace
mozilla
:
:
gmp
{
#
ifdef
__CLASS__
#
undef
__CLASS__
#
endif
#
define
__CLASS__
"
GMPVideoEncoderParent
"
GMPVideoEncoderParent
:
:
GMPVideoEncoderParent
(
GMPContentParent
*
aPlugin
)
:
mIsOpen
(
false
)
mShuttingDown
(
false
)
mActorDestroyed
(
false
)
mPlugin
(
aPlugin
)
mCallback
(
nullptr
)
mVideoHost
(
this
)
mPluginId
(
aPlugin
-
>
GetPluginId
(
)
)
{
MOZ_ASSERT
(
mPlugin
)
;
}
bool
GMPVideoEncoderParent
:
:
MgrIsOnOwningThread
(
)
const
{
return
!
mPlugin
|
|
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
;
}
GMPVideoHostImpl
&
GMPVideoEncoderParent
:
:
Host
(
)
{
return
mVideoHost
;
}
void
GMPVideoEncoderParent
:
:
Close
(
)
{
GMP_LOG_DEBUG
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
;
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
mCallback
=
nullptr
;
RefPtr
<
GMPVideoEncoderParent
>
kungfudeathgrip
(
this
)
;
Release
(
)
;
Shutdown
(
)
;
}
GMPErr
GMPVideoEncoderParent
:
:
InitEncode
(
const
GMPVideoCodec
&
aCodecSettings
const
nsTArray
<
uint8_t
>
&
aCodecSpecific
GMPVideoEncoderCallbackProxy
*
aCallback
int32_t
aNumberOfCores
uint32_t
aMaxPayloadSize
)
{
GMP_LOG_DEBUG
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
;
if
(
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
re
-
init
an
in
-
use
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
MOZ_ASSERT
(
!
mCallback
)
;
if
(
!
aCallback
)
{
return
GMPGenericErr
;
}
mCallback
=
aCallback
;
if
(
!
SendInitEncode
(
aCodecSettings
aCodecSpecific
aNumberOfCores
aMaxPayloadSize
)
)
{
return
GMPGenericErr
;
}
mIsOpen
=
true
;
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
Encode
(
GMPUniquePtr
<
GMPVideoi420Frame
>
aInputFrame
const
nsTArray
<
uint8_t
>
&
aCodecSpecificInfo
const
nsTArray
<
GMPVideoFrameType
>
&
aFrameTypes
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
dead
GMP
video
encoder
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
GMPUniquePtr
<
GMPVideoi420FrameImpl
>
inputFrameImpl
(
static_cast
<
GMPVideoi420FrameImpl
*
>
(
aInputFrame
.
release
(
)
)
)
;
GMPVideoi420FrameData
frameData
;
ipc
:
:
Shmem
frameShmem
;
if
(
!
inputFrameImpl
-
>
InitFrameData
(
frameData
frameShmem
)
)
{
GMP_LOG_ERROR
(
"
%
s
:
:
%
s
:
failed
to
init
frame
data
"
__CLASS__
__FUNCTION__
)
;
return
GMPGenericErr
;
}
if
(
mEncodedShmemSize
>
0
)
{
if
(
GMPSharedMemManager
*
memMgr
=
mVideoHost
.
SharedMemMgr
(
)
)
{
ipc
:
:
Shmem
outputShmem
;
if
(
memMgr
-
>
MgrTakeShmem
(
GMPSharedMemClass
:
:
Encoded
mEncodedShmemSize
&
outputShmem
)
)
{
Unused
<
<
SendGiveShmem
(
std
:
:
move
(
outputShmem
)
)
;
}
}
}
if
(
!
SendEncode
(
frameData
std
:
:
move
(
frameShmem
)
aCodecSpecificInfo
aFrameTypes
)
)
{
GMP_LOG_ERROR
(
"
%
s
:
:
%
s
:
failed
to
send
encode
"
__CLASS__
__FUNCTION__
)
;
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetChannelParameters
(
uint32_t
aPacketLoss
uint32_t
aRTT
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
invalid
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
!
SendSetChannelParameters
(
aPacketLoss
aRTT
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetRates
(
uint32_t
aNewBitRate
uint32_t
aFrameRate
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
dead
GMP
video
decoder
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
!
SendSetRates
(
aNewBitRate
aFrameRate
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
GMPErr
GMPVideoEncoderParent
:
:
SetPeriodicKeyFrames
(
bool
aEnable
)
{
if
(
!
mIsOpen
)
{
NS_WARNING
(
"
Trying
to
use
an
invalid
GMP
video
encoder
!
"
)
;
return
GMPGenericErr
;
}
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
!
SendSetPeriodicKeyFrames
(
aEnable
)
)
{
return
GMPGenericErr
;
}
return
GMPNoErr
;
}
void
GMPVideoEncoderParent
:
:
Shutdown
(
)
{
GMP_LOG_DEBUG
(
"
%
s
:
:
%
s
:
%
p
"
__CLASS__
__FUNCTION__
this
)
;
MOZ_ASSERT
(
mPlugin
-
>
GMPEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
mShuttingDown
)
{
return
;
}
mShuttingDown
=
true
;
if
(
mCallback
)
{
mCallback
-
>
Terminated
(
)
;
mCallback
=
nullptr
;
}
mIsOpen
=
false
;
if
(
!
mActorDestroyed
)
{
Unused
<
<
Send__delete__
(
this
)
;
}
}
void
GMPVideoEncoderParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
GMP_LOG_DEBUG
(
"
%
s
:
:
%
s
:
%
p
(
%
d
)
"
__CLASS__
__FUNCTION__
this
(
int
)
aWhy
)
;
mIsOpen
=
false
;
mActorDestroyed
=
true
;
if
(
mCallback
)
{
mCallback
-
>
Terminated
(
)
;
mCallback
=
nullptr
;
}
if
(
mPlugin
)
{
mPlugin
-
>
VideoEncoderDestroyed
(
this
)
;
mPlugin
=
nullptr
;
}
mVideoHost
.
ActorDestroyed
(
)
;
MaybeDisconnect
(
aWhy
=
=
AbnormalShutdown
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvReturnShmem
(
ipc
:
:
Shmem
&
&
aInputShmem
)
{
if
(
GMPSharedMemManager
*
memMgr
=
mVideoHost
.
SharedMemMgr
(
)
)
{
memMgr
-
>
MgrGiveShmem
(
GMPSharedMemClass
:
:
Decoded
std
:
:
move
(
aInputShmem
)
)
;
}
else
{
DeallocShmem
(
aInputShmem
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvEncodedShmem
(
const
GMPVideoEncodedFrameData
&
aEncodedFrame
ipc
:
:
Shmem
&
&
aEncodedShmem
nsTArray
<
uint8_t
>
&
&
aCodecSpecificInfo
)
{
if
(
mCallback
&
&
GMPVideoEncodedFrameImpl
:
:
CheckFrameData
(
aEncodedFrame
aEncodedShmem
.
Size
<
uint8_t
>
(
)
)
)
{
auto
*
f
=
new
GMPVideoEncodedFrameImpl
(
aEncodedFrame
std
:
:
move
(
aEncodedShmem
)
&
mVideoHost
)
;
mCallback
-
>
Encoded
(
f
aCodecSpecificInfo
)
;
f
-
>
Destroy
(
)
;
}
else
{
DeallocShmem
(
aEncodedShmem
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvEncodedData
(
const
GMPVideoEncodedFrameData
&
aEncodedFrame
nsTArray
<
uint8_t
>
&
&
aEncodedData
nsTArray
<
uint8_t
>
&
&
aCodecSpecificInfo
)
{
if
(
mCallback
&
&
GMPVideoEncodedFrameImpl
:
:
CheckFrameData
(
aEncodedFrame
aEncodedData
.
Length
(
)
)
)
{
mEncodedShmemSize
=
std
:
:
max
(
mEncodedShmemSize
aEncodedData
.
Length
(
)
)
;
auto
*
f
=
new
GMPVideoEncodedFrameImpl
(
aEncodedFrame
std
:
:
move
(
aEncodedData
)
&
mVideoHost
)
;
mCallback
-
>
Encoded
(
f
aCodecSpecificInfo
)
;
f
-
>
Destroy
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvError
(
const
GMPErr
&
aError
)
{
if
(
mCallback
)
{
mCallback
-
>
Error
(
aError
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPVideoEncoderParent
:
:
RecvShutdown
(
)
{
Shutdown
(
)
;
return
IPC_OK
(
)
;
}
}
#
undef
__CLASS__
