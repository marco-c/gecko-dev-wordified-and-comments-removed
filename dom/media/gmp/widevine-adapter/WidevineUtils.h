#
ifndef
WidevineUtils_h_
#
define
WidevineUtils_h_
#
include
"
content_decryption_module
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
stddef
.
h
"
namespace
mozilla
{
#
define
ENSURE_TRUE
(
condition
rv
)
\
{
\
if
(
!
(
condition
)
)
{
\
GMP_LOG_DEBUG
(
"
ENSURE_TRUE
FAILED
%
s
:
%
d
"
__FILE__
__LINE__
)
;
\
return
rv
;
\
}
\
}
#
define
ENSURE_GMP_SUCCESS
(
err
rv
)
\
{
\
if
(
GMP_FAILED
(
err
)
)
{
\
GMP_LOG_DEBUG
(
"
ENSURE_GMP_SUCCESS
FAILED
%
s
:
%
d
"
__FILE__
__LINE__
)
;
\
return
rv
;
\
}
\
}
namespace
gmp
{
class
CDMShmemBuffer
;
}
class
WidevineBuffer
;
class
CDMBuffer
:
public
cdm
:
:
Buffer
{
public
:
virtual
WidevineBuffer
*
AsArrayBuffer
(
)
{
return
nullptr
;
}
virtual
gmp
:
:
CDMShmemBuffer
*
AsShmemBuffer
(
)
{
return
nullptr
;
}
}
;
class
WidevineBuffer
:
public
CDMBuffer
{
public
:
explicit
WidevineBuffer
(
size_t
aSize
)
;
~
WidevineBuffer
(
)
override
;
void
Destroy
(
)
override
;
uint32_t
Capacity
(
)
const
override
;
uint8_t
*
Data
(
)
override
;
void
SetSize
(
uint32_t
aSize
)
override
;
uint32_t
Size
(
)
const
override
;
nsTArray
<
uint8_t
>
ExtractBuffer
(
)
;
WidevineBuffer
*
AsArrayBuffer
(
)
override
{
return
this
;
}
private
:
nsTArray
<
uint8_t
>
mBuffer
;
WidevineBuffer
(
const
WidevineBuffer
&
)
;
void
operator
=
(
const
WidevineBuffer
&
)
;
}
;
class
WidevineDecryptedBlock
:
public
cdm
:
:
DecryptedBlock
{
public
:
WidevineDecryptedBlock
(
)
;
~
WidevineDecryptedBlock
(
)
override
;
void
SetDecryptedBuffer
(
cdm
:
:
Buffer
*
aBuffer
)
override
;
cdm
:
:
Buffer
*
DecryptedBuffer
(
)
override
;
void
SetTimestamp
(
int64_t
aTimestamp
)
override
;
int64_t
Timestamp
(
)
const
override
;
private
:
cdm
:
:
Buffer
*
mBuffer
;
int64_t
mTimestamp
;
}
;
}
#
endif
