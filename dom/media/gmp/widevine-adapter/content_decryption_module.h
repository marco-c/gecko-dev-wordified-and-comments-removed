#
ifndef
CDM_CONTENT_DECRYPTION_MODULE_H_
#
define
CDM_CONTENT_DECRYPTION_MODULE_H_
#
if
defined
(
_MSC_VER
)
typedef
unsigned
char
uint8_t
;
typedef
unsigned
int
uint32_t
;
typedef
int
int32_t
;
typedef
__int64
int64_t
;
#
else
#
include
<
stdint
.
h
>
#
endif
#
if
defined
(
WIN32
)
#
if
defined
(
CDM_IMPLEMENTATION
)
#
define
CDM_EXPORT
__declspec
(
dllexport
)
#
else
#
define
CDM_EXPORT
__declspec
(
dllimport
)
#
endif
#
else
#
if
defined
(
CDM_IMPLEMENTATION
)
#
define
CDM_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
else
#
define
CDM_EXPORT
#
endif
#
endif
#
define
CDM_MODULE_VERSION
4
#
define
INITIALIZE_CDM_MODULE
\
BUILD_ENTRYPOINT
(
InitializeCdmModule
CDM_MODULE_VERSION
)
#
define
BUILD_ENTRYPOINT
(
name
version
)
\
BUILD_ENTRYPOINT_NO_EXPANSION
(
name
version
)
#
define
BUILD_ENTRYPOINT_NO_EXPANSION
(
name
version
)
name
#
#
_
#
#
version
extern
"
C
"
{
CDM_EXPORT
void
INITIALIZE_CDM_MODULE
(
)
;
CDM_EXPORT
void
DeinitializeCdmModule
(
)
;
typedef
void
*
(
*
GetCdmHostFunc
)
(
int
host_interface_version
void
*
user_data
)
;
CDM_EXPORT
void
*
CreateCdmInstance
(
int
cdm_interface_version
const
char
*
key_system
uint32_t
key_system_size
GetCdmHostFunc
get_cdm_host_func
void
*
user_data
)
;
CDM_EXPORT
const
char
*
GetCdmVersion
(
)
;
}
namespace
cdm
{
class
AudioFrames
;
class
DecryptedBlock
;
class
VideoFrame
;
class
Host_7
;
class
Host_8
;
enum
Status
{
kSuccess
=
0
kNeedMoreData
kNoKey
kSessionError
kDecryptError
kDecodeError
kDeferredInitialization
}
;
enum
Error
{
kNotSupportedError
=
9
kInvalidStateError
=
11
kInvalidAccessError
=
15
kQuotaExceededError
=
22
kUnknownError
=
30
kClientError
=
100
kOutputError
=
101
}
;
typedef
double
Time
;
struct
SubsampleEntry
{
SubsampleEntry
(
uint32_t
clear_bytes
uint32_t
cipher_bytes
)
:
clear_bytes
(
clear_bytes
)
cipher_bytes
(
cipher_bytes
)
{
}
uint32_t
clear_bytes
;
uint32_t
cipher_bytes
;
}
;
struct
InputBuffer
{
InputBuffer
(
)
:
data
(
NULL
)
data_size
(
0
)
key_id
(
NULL
)
key_id_size
(
0
)
iv
(
NULL
)
iv_size
(
0
)
subsamples
(
NULL
)
num_subsamples
(
0
)
timestamp
(
0
)
{
}
const
uint8_t
*
data
;
uint32_t
data_size
;
const
uint8_t
*
key_id
;
uint32_t
key_id_size
;
const
uint8_t
*
iv
;
uint32_t
iv_size
;
const
struct
SubsampleEntry
*
subsamples
;
uint32_t
num_subsamples
;
int64_t
timestamp
;
}
;
struct
AudioDecoderConfig
{
enum
AudioCodec
{
kUnknownAudioCodec
=
0
kCodecVorbis
kCodecAac
}
;
AudioDecoderConfig
(
)
:
codec
(
kUnknownAudioCodec
)
channel_count
(
0
)
bits_per_channel
(
0
)
samples_per_second
(
0
)
extra_data
(
NULL
)
extra_data_size
(
0
)
{
}
AudioCodec
codec
;
int32_t
channel_count
;
int32_t
bits_per_channel
;
int32_t
samples_per_second
;
uint8_t
*
extra_data
;
uint32_t
extra_data_size
;
}
;
enum
AudioFormat
{
kUnknownAudioFormat
=
0
kAudioFormatU8
kAudioFormatS16
kAudioFormatS32
kAudioFormatF32
kAudioFormatPlanarS16
kAudioFormatPlanarF32
}
;
enum
VideoFormat
{
kUnknownVideoFormat
=
0
kYv12
kI420
}
;
struct
Size
{
Size
(
)
:
width
(
0
)
height
(
0
)
{
}
Size
(
int32_t
width
int32_t
height
)
:
width
(
width
)
height
(
height
)
{
}
int32_t
width
;
int32_t
height
;
}
;
struct
VideoDecoderConfig
{
enum
VideoCodec
{
kUnknownVideoCodec
=
0
kCodecVp8
kCodecH264
kCodecVp9
}
;
enum
VideoCodecProfile
{
kUnknownVideoCodecProfile
=
0
kProfileNotNeeded
kH264ProfileBaseline
kH264ProfileMain
kH264ProfileExtended
kH264ProfileHigh
kH264ProfileHigh10
kH264ProfileHigh422
kH264ProfileHigh444Predictive
}
;
VideoDecoderConfig
(
)
:
codec
(
kUnknownVideoCodec
)
profile
(
kUnknownVideoCodecProfile
)
format
(
kUnknownVideoFormat
)
extra_data
(
NULL
)
extra_data_size
(
0
)
{
}
VideoCodec
codec
;
VideoCodecProfile
profile
;
VideoFormat
format
;
Size
coded_size
;
uint8_t
*
extra_data
;
uint32_t
extra_data_size
;
}
;
enum
StreamType
{
kStreamTypeAudio
=
0
kStreamTypeVideo
=
1
}
;
struct
PlatformChallengeResponse
{
const
uint8_t
*
signed_data
;
uint32_t
signed_data_length
;
const
uint8_t
*
signed_data_signature
;
uint32_t
signed_data_signature_length
;
const
uint8_t
*
platform_key_certificate
;
uint32_t
platform_key_certificate_length
;
}
;
struct
BinaryData
{
BinaryData
(
)
:
data
(
NULL
)
length
(
0
)
{
}
const
uint8_t
*
data
;
uint32_t
length
;
}
;
enum
KeyStatus
{
kUsable
=
0
kInternalError
=
1
kExpired
=
2
kOutputRestricted
=
3
kOutputDownscaled
=
4
kStatusPending
=
5
kReleased
=
6
}
;
struct
KeyInformation
{
KeyInformation
(
)
:
key_id
(
NULL
)
key_id_size
(
0
)
status
(
kInternalError
)
system_code
(
0
)
{
}
const
uint8_t
*
key_id
;
uint32_t
key_id_size
;
KeyStatus
status
;
uint32_t
system_code
;
}
;
enum
OutputProtectionMethods
{
kProtectionNone
=
0
kProtectionHDCP
=
1
<
<
0
}
;
enum
OutputLinkTypes
{
kLinkTypeNone
=
0
kLinkTypeUnknown
=
1
<
<
0
kLinkTypeInternal
=
1
<
<
1
kLinkTypeVGA
=
1
<
<
2
kLinkTypeHDMI
=
1
<
<
3
kLinkTypeDVI
=
1
<
<
4
kLinkTypeDisplayPort
=
1
<
<
5
kLinkTypeNetwork
=
1
<
<
6
}
;
enum
QueryResult
{
kQuerySucceeded
=
0
kQueryFailed
}
;
enum
InitDataType
{
kCenc
=
0
kKeyIds
=
1
kWebM
=
2
}
;
enum
SessionType
{
kTemporary
=
0
kPersistentLicense
=
1
kPersistentKeyRelease
=
2
}
;
enum
MessageType
{
kLicenseRequest
=
0
kLicenseRenewal
=
1
kLicenseRelease
=
2
}
;
class
FileIO
{
public
:
virtual
void
Open
(
const
char
*
file_name
uint32_t
file_name_size
)
=
0
;
virtual
void
Read
(
)
=
0
;
virtual
void
Write
(
const
uint8_t
*
data
uint32_t
data_size
)
=
0
;
virtual
void
Close
(
)
=
0
;
protected
:
FileIO
(
)
{
}
virtual
~
FileIO
(
)
{
}
}
;
class
FileIOClient
{
public
:
enum
Status
{
kSuccess
=
0
kInUse
kError
}
;
virtual
void
OnOpenComplete
(
Status
status
)
=
0
;
virtual
void
OnReadComplete
(
Status
status
const
uint8_t
*
data
uint32_t
data_size
)
=
0
;
virtual
void
OnWriteComplete
(
Status
status
)
=
0
;
protected
:
FileIOClient
(
)
{
}
virtual
~
FileIOClient
(
)
{
}
}
;
class
ContentDecryptionModule_7
{
public
:
static
const
int
kVersion
=
7
;
typedef
Host_7
Host
;
virtual
void
SetServerCertificate
(
uint32_t
promise_id
const
uint8_t
*
server_certificate_data
uint32_t
server_certificate_data_size
)
=
0
;
virtual
void
CreateSessionAndGenerateRequest
(
uint32_t
promise_id
SessionType
session_type
const
char
*
init_data_type
uint32_t
init_data_type_size
const
uint8_t
*
init_data
uint32_t
init_data_size
)
=
0
;
virtual
void
LoadSession
(
uint32_t
promise_id
SessionType
session_type
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
UpdateSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
const
uint8_t
*
response
uint32_t
response_size
)
=
0
;
virtual
void
CloseSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
RemoveSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
TimerExpired
(
void
*
context
)
=
0
;
virtual
Status
Decrypt
(
const
InputBuffer
&
encrypted_buffer
DecryptedBlock
*
decrypted_buffer
)
=
0
;
virtual
Status
InitializeAudioDecoder
(
const
AudioDecoderConfig
&
audio_decoder_config
)
=
0
;
virtual
Status
InitializeVideoDecoder
(
const
VideoDecoderConfig
&
video_decoder_config
)
=
0
;
virtual
void
DeinitializeDecoder
(
StreamType
decoder_type
)
=
0
;
virtual
void
ResetDecoder
(
StreamType
decoder_type
)
=
0
;
virtual
Status
DecryptAndDecodeFrame
(
const
InputBuffer
&
encrypted_buffer
VideoFrame
*
video_frame
)
=
0
;
virtual
Status
DecryptAndDecodeSamples
(
const
InputBuffer
&
encrypted_buffer
AudioFrames
*
audio_frames
)
=
0
;
virtual
void
OnPlatformChallengeResponse
(
const
PlatformChallengeResponse
&
response
)
=
0
;
virtual
void
OnQueryOutputProtectionStatus
(
QueryResult
result
uint32_t
link_mask
uint32_t
output_protection_mask
)
=
0
;
virtual
void
Destroy
(
)
=
0
;
protected
:
ContentDecryptionModule_7
(
)
{
}
virtual
~
ContentDecryptionModule_7
(
)
{
}
}
;
class
ContentDecryptionModule_8
{
public
:
static
const
int
kVersion
=
8
;
typedef
Host_8
Host
;
virtual
void
Initialize
(
bool
allow_distinctive_identifier
bool
allow_persistent_state
)
=
0
;
virtual
void
SetServerCertificate
(
uint32_t
promise_id
const
uint8_t
*
server_certificate_data
uint32_t
server_certificate_data_size
)
=
0
;
virtual
void
CreateSessionAndGenerateRequest
(
uint32_t
promise_id
SessionType
session_type
InitDataType
init_data_type
const
uint8_t
*
init_data
uint32_t
init_data_size
)
=
0
;
virtual
void
LoadSession
(
uint32_t
promise_id
SessionType
session_type
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
UpdateSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
const
uint8_t
*
response
uint32_t
response_size
)
=
0
;
virtual
void
CloseSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
RemoveSession
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
TimerExpired
(
void
*
context
)
=
0
;
virtual
Status
Decrypt
(
const
InputBuffer
&
encrypted_buffer
DecryptedBlock
*
decrypted_buffer
)
=
0
;
virtual
Status
InitializeAudioDecoder
(
const
AudioDecoderConfig
&
audio_decoder_config
)
=
0
;
virtual
Status
InitializeVideoDecoder
(
const
VideoDecoderConfig
&
video_decoder_config
)
=
0
;
virtual
void
DeinitializeDecoder
(
StreamType
decoder_type
)
=
0
;
virtual
void
ResetDecoder
(
StreamType
decoder_type
)
=
0
;
virtual
Status
DecryptAndDecodeFrame
(
const
InputBuffer
&
encrypted_buffer
VideoFrame
*
video_frame
)
=
0
;
virtual
Status
DecryptAndDecodeSamples
(
const
InputBuffer
&
encrypted_buffer
AudioFrames
*
audio_frames
)
=
0
;
virtual
void
OnPlatformChallengeResponse
(
const
PlatformChallengeResponse
&
response
)
=
0
;
virtual
void
OnQueryOutputProtectionStatus
(
QueryResult
result
uint32_t
link_mask
uint32_t
output_protection_mask
)
=
0
;
virtual
void
Destroy
(
)
=
0
;
protected
:
ContentDecryptionModule_8
(
)
{
}
virtual
~
ContentDecryptionModule_8
(
)
{
}
}
;
typedef
ContentDecryptionModule_8
ContentDecryptionModule
;
class
Buffer
{
public
:
virtual
void
Destroy
(
)
=
0
;
virtual
uint32_t
Capacity
(
)
const
=
0
;
virtual
uint8_t
*
Data
(
)
=
0
;
virtual
void
SetSize
(
uint32_t
size
)
=
0
;
virtual
uint32_t
Size
(
)
const
=
0
;
protected
:
Buffer
(
)
{
}
virtual
~
Buffer
(
)
{
}
private
:
Buffer
(
const
Buffer
&
)
;
void
operator
=
(
const
Buffer
&
)
;
}
;
class
Host_7
{
public
:
static
const
int
kVersion
=
7
;
virtual
Buffer
*
Allocate
(
uint32_t
capacity
)
=
0
;
virtual
void
SetTimer
(
int64_t
delay_ms
void
*
context
)
=
0
;
virtual
Time
GetCurrentWallTime
(
)
=
0
;
virtual
void
OnResolveNewSessionPromise
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
OnResolvePromise
(
uint32_t
promise_id
)
=
0
;
virtual
void
OnRejectPromise
(
uint32_t
promise_id
Error
error
uint32_t
system_code
const
char
*
error_message
uint32_t
error_message_size
)
=
0
;
virtual
void
OnSessionMessage
(
const
char
*
session_id
uint32_t
session_id_size
MessageType
message_type
const
char
*
message
uint32_t
message_size
const
char
*
legacy_destination_url
uint32_t
legacy_destination_url_length
)
=
0
;
virtual
void
OnSessionKeysChange
(
const
char
*
session_id
uint32_t
session_id_size
bool
has_additional_usable_key
const
KeyInformation
*
keys_info
uint32_t
keys_info_count
)
=
0
;
virtual
void
OnExpirationChange
(
const
char
*
session_id
uint32_t
session_id_size
Time
new_expiry_time
)
=
0
;
virtual
void
OnSessionClosed
(
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
OnLegacySessionError
(
const
char
*
session_id
uint32_t
session_id_length
Error
error
uint32_t
system_code
const
char
*
error_message
uint32_t
error_message_length
)
=
0
;
virtual
void
SendPlatformChallenge
(
const
char
*
service_id
uint32_t
service_id_size
const
char
*
challenge
uint32_t
challenge_size
)
=
0
;
virtual
void
EnableOutputProtection
(
uint32_t
desired_protection_mask
)
=
0
;
virtual
void
QueryOutputProtectionStatus
(
)
=
0
;
virtual
void
OnDeferredInitializationDone
(
StreamType
stream_type
Status
decoder_status
)
=
0
;
virtual
FileIO
*
CreateFileIO
(
FileIOClient
*
client
)
=
0
;
protected
:
Host_7
(
)
{
}
virtual
~
Host_7
(
)
{
}
}
;
class
Host_8
{
public
:
static
const
int
kVersion
=
8
;
virtual
Buffer
*
Allocate
(
uint32_t
capacity
)
=
0
;
virtual
void
SetTimer
(
int64_t
delay_ms
void
*
context
)
=
0
;
virtual
Time
GetCurrentWallTime
(
)
=
0
;
virtual
void
OnResolveNewSessionPromise
(
uint32_t
promise_id
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
OnResolvePromise
(
uint32_t
promise_id
)
=
0
;
virtual
void
OnRejectPromise
(
uint32_t
promise_id
Error
error
uint32_t
system_code
const
char
*
error_message
uint32_t
error_message_size
)
=
0
;
virtual
void
OnSessionMessage
(
const
char
*
session_id
uint32_t
session_id_size
MessageType
message_type
const
char
*
message
uint32_t
message_size
const
char
*
legacy_destination_url
uint32_t
legacy_destination_url_length
)
=
0
;
virtual
void
OnSessionKeysChange
(
const
char
*
session_id
uint32_t
session_id_size
bool
has_additional_usable_key
const
KeyInformation
*
keys_info
uint32_t
keys_info_count
)
=
0
;
virtual
void
OnExpirationChange
(
const
char
*
session_id
uint32_t
session_id_size
Time
new_expiry_time
)
=
0
;
virtual
void
OnSessionClosed
(
const
char
*
session_id
uint32_t
session_id_size
)
=
0
;
virtual
void
OnLegacySessionError
(
const
char
*
session_id
uint32_t
session_id_length
Error
error
uint32_t
system_code
const
char
*
error_message
uint32_t
error_message_length
)
=
0
;
virtual
void
SendPlatformChallenge
(
const
char
*
service_id
uint32_t
service_id_size
const
char
*
challenge
uint32_t
challenge_size
)
=
0
;
virtual
void
EnableOutputProtection
(
uint32_t
desired_protection_mask
)
=
0
;
virtual
void
QueryOutputProtectionStatus
(
)
=
0
;
virtual
void
OnDeferredInitializationDone
(
StreamType
stream_type
Status
decoder_status
)
=
0
;
virtual
FileIO
*
CreateFileIO
(
FileIOClient
*
client
)
=
0
;
protected
:
Host_8
(
)
{
}
virtual
~
Host_8
(
)
{
}
}
;
class
DecryptedBlock
{
public
:
virtual
void
SetDecryptedBuffer
(
Buffer
*
buffer
)
=
0
;
virtual
Buffer
*
DecryptedBuffer
(
)
=
0
;
virtual
void
SetTimestamp
(
int64_t
timestamp
)
=
0
;
virtual
int64_t
Timestamp
(
)
const
=
0
;
protected
:
DecryptedBlock
(
)
{
}
virtual
~
DecryptedBlock
(
)
{
}
}
;
class
VideoFrame
{
public
:
enum
VideoPlane
{
kYPlane
=
0
kUPlane
=
1
kVPlane
=
2
kMaxPlanes
=
3
}
;
virtual
void
SetFormat
(
VideoFormat
format
)
=
0
;
virtual
VideoFormat
Format
(
)
const
=
0
;
virtual
void
SetSize
(
cdm
:
:
Size
size
)
=
0
;
virtual
cdm
:
:
Size
Size
(
)
const
=
0
;
virtual
void
SetFrameBuffer
(
Buffer
*
frame_buffer
)
=
0
;
virtual
Buffer
*
FrameBuffer
(
)
=
0
;
virtual
void
SetPlaneOffset
(
VideoPlane
plane
uint32_t
offset
)
=
0
;
virtual
uint32_t
PlaneOffset
(
VideoPlane
plane
)
=
0
;
virtual
void
SetStride
(
VideoPlane
plane
uint32_t
stride
)
=
0
;
virtual
uint32_t
Stride
(
VideoPlane
plane
)
=
0
;
virtual
void
SetTimestamp
(
int64_t
timestamp
)
=
0
;
virtual
int64_t
Timestamp
(
)
const
=
0
;
protected
:
VideoFrame
(
)
{
}
virtual
~
VideoFrame
(
)
{
}
}
;
class
AudioFrames
{
public
:
virtual
void
SetFrameBuffer
(
Buffer
*
buffer
)
=
0
;
virtual
Buffer
*
FrameBuffer
(
)
=
0
;
virtual
void
SetFormat
(
AudioFormat
format
)
=
0
;
virtual
AudioFormat
Format
(
)
const
=
0
;
protected
:
AudioFrames
(
)
{
}
virtual
~
AudioFrames
(
)
{
}
}
;
}
#
endif
