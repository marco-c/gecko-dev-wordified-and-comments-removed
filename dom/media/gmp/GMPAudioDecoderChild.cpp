#
include
"
GMPAudioDecoderChild
.
h
"
#
include
"
GMPContentChild
.
h
"
#
include
"
GMPAudioHost
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
<
stdio
.
h
>
namespace
mozilla
{
namespace
gmp
{
GMPAudioDecoderChild
:
:
GMPAudioDecoderChild
(
GMPContentChild
*
aPlugin
)
:
mPlugin
(
aPlugin
)
mAudioDecoder
(
nullptr
)
{
MOZ_ASSERT
(
mPlugin
)
;
}
GMPAudioDecoderChild
:
:
~
GMPAudioDecoderChild
(
)
{
}
void
GMPAudioDecoderChild
:
:
Init
(
GMPAudioDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
aDecoder
"
Cannot
initialize
Audio
decoder
child
without
a
Audio
decoder
!
"
)
;
mAudioDecoder
=
aDecoder
;
}
GMPAudioHostImpl
&
GMPAudioDecoderChild
:
:
Host
(
)
{
return
mAudioHost
;
}
void
GMPAudioDecoderChild
:
:
Decoded
(
GMPAudioSamples
*
aDecodedSamples
)
{
MOZ_ASSERT
(
mPlugin
-
>
GMPMessageLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
if
(
!
aDecodedSamples
)
{
MOZ_CRASH
(
"
Not
given
decoded
audio
samples
!
"
)
;
}
GMPAudioDecodedSampleData
samples
;
samples
.
mData
(
)
.
AppendElements
(
(
int16_t
*
)
aDecodedSamples
-
>
Buffer
(
)
aDecodedSamples
-
>
Size
(
)
/
sizeof
(
int16_t
)
)
;
samples
.
mTimeStamp
(
)
=
aDecodedSamples
-
>
TimeStamp
(
)
;
samples
.
mChannelCount
(
)
=
aDecodedSamples
-
>
Channels
(
)
;
samples
.
mSamplesPerSecond
(
)
=
aDecodedSamples
-
>
Rate
(
)
;
Unused
<
<
SendDecoded
(
samples
)
;
aDecodedSamples
-
>
Destroy
(
)
;
}
void
GMPAudioDecoderChild
:
:
InputDataExhausted
(
)
{
MOZ_ASSERT
(
mPlugin
-
>
GMPMessageLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
SendInputDataExhausted
(
)
;
}
void
GMPAudioDecoderChild
:
:
DrainComplete
(
)
{
MOZ_ASSERT
(
mPlugin
-
>
GMPMessageLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
SendDrainComplete
(
)
;
}
void
GMPAudioDecoderChild
:
:
ResetComplete
(
)
{
MOZ_ASSERT
(
mPlugin
-
>
GMPMessageLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
SendResetComplete
(
)
;
}
void
GMPAudioDecoderChild
:
:
Error
(
GMPErr
aError
)
{
MOZ_ASSERT
(
mPlugin
-
>
GMPMessageLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
SendError
(
aError
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPAudioDecoderChild
:
:
RecvInitDecode
(
const
GMPAudioCodecData
&
a
)
{
MOZ_ASSERT
(
mAudioDecoder
)
;
if
(
!
mAudioDecoder
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
GMPAudioCodec
codec
;
codec
.
mCodecType
=
a
.
mCodecType
(
)
;
codec
.
mChannelCount
=
a
.
mChannelCount
(
)
;
codec
.
mBitsPerChannel
=
a
.
mBitsPerChannel
(
)
;
codec
.
mSamplesPerSecond
=
a
.
mSamplesPerSecond
(
)
;
codec
.
mExtraData
=
a
.
mExtraData
(
)
.
Elements
(
)
;
codec
.
mExtraDataLen
=
a
.
mExtraData
(
)
.
Length
(
)
;
mAudioDecoder
-
>
InitDecode
(
codec
this
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPAudioDecoderChild
:
:
RecvDecode
(
const
GMPAudioEncodedSampleData
&
aEncodedSamples
)
{
if
(
!
mAudioDecoder
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
GMPAudioSamples
*
samples
=
new
GMPAudioSamplesImpl
(
aEncodedSamples
)
;
mAudioDecoder
-
>
Decode
(
samples
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPAudioDecoderChild
:
:
RecvReset
(
)
{
if
(
!
mAudioDecoder
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mAudioDecoder
-
>
Reset
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPAudioDecoderChild
:
:
RecvDrain
(
)
{
if
(
!
mAudioDecoder
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mAudioDecoder
-
>
Drain
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GMPAudioDecoderChild
:
:
RecvDecodingComplete
(
)
{
if
(
mAudioDecoder
)
{
mAudioDecoder
-
>
DecodingComplete
(
)
;
mAudioDecoder
=
nullptr
;
}
mPlugin
=
nullptr
;
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
}
}
