#
ifndef
GMPContentChild_h_
#
define
GMPContentChild_h_
#
include
"
mozilla
/
gmp
/
PGMPContentChild
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
#
include
"
mozilla
/
SandboxTestingChild
.
h
"
#
endif
namespace
mozilla
:
:
gmp
{
class
GMPChild
;
class
GMPContentChild
final
:
public
PGMPContentChild
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GMPContentChild
final
)
explicit
GMPContentChild
(
GMPChild
*
aChild
)
:
mGMPChild
(
aChild
)
{
}
MessageLoop
*
GMPMessageLoop
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPVideoDecoderConstructor
(
PGMPVideoDecoderChild
*
aActor
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPVideoEncoderConstructor
(
PGMPVideoEncoderChild
*
aActor
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPChromiumCDMConstructor
(
PChromiumCDMChild
*
aActor
const
nsACString
&
aKeySystem
)
override
;
already_AddRefed
<
PGMPVideoDecoderChild
>
AllocPGMPVideoDecoderChild
(
)
;
already_AddRefed
<
PGMPVideoEncoderChild
>
AllocPGMPVideoEncoderChild
(
)
;
already_AddRefed
<
PChromiumCDMChild
>
AllocPChromiumCDMChild
(
const
nsACString
&
aKeySystem
)
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
mozilla
:
:
ipc
:
:
IPCResult
RecvInitSandboxTesting
(
Endpoint
<
PSandboxTestingChild
>
&
&
aEndpoint
)
;
#
endif
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
void
CloseActive
(
)
;
bool
IsUsed
(
)
;
GMPChild
*
mGMPChild
;
private
:
~
GMPContentChild
(
)
=
default
;
}
;
}
#
endif
