#
ifndef
GMPContentChild_h_
#
define
GMPContentChild_h_
#
include
"
mozilla
/
gmp
/
PGMPContentChild
.
h
"
#
include
"
GMPSharedMemManager
.
h
"
namespace
mozilla
{
namespace
gmp
{
class
GMPChild
;
class
GMPContentChild
:
public
PGMPContentChild
public
GMPSharedMem
{
public
:
explicit
GMPContentChild
(
GMPChild
*
aChild
)
;
virtual
~
GMPContentChild
(
)
;
MessageLoop
*
GMPMessageLoop
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPDecryptorConstructor
(
PGMPDecryptorChild
*
aActor
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPVideoDecoderConstructor
(
PGMPVideoDecoderChild
*
aActor
const
uint32_t
&
aDecryptorId
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPGMPVideoEncoderConstructor
(
PGMPVideoEncoderChild
*
aActor
)
override
;
PGMPDecryptorChild
*
AllocPGMPDecryptorChild
(
)
override
;
bool
DeallocPGMPDecryptorChild
(
PGMPDecryptorChild
*
aActor
)
override
;
PGMPVideoDecoderChild
*
AllocPGMPVideoDecoderChild
(
const
uint32_t
&
aDecryptorId
)
override
;
bool
DeallocPGMPVideoDecoderChild
(
PGMPVideoDecoderChild
*
aActor
)
override
;
PGMPVideoEncoderChild
*
AllocPGMPVideoEncoderChild
(
)
override
;
bool
DeallocPGMPVideoEncoderChild
(
PGMPVideoEncoderChild
*
aActor
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
void
CheckThread
(
)
override
;
void
CloseActive
(
)
;
bool
IsUsed
(
)
;
GMPChild
*
mGMPChild
;
}
;
}
}
#
endif
