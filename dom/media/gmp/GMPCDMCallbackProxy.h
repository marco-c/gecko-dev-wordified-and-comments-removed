#
ifndef
GMPCDMCallbackProxy_h_
#
define
GMPCDMCallbackProxy_h_
#
include
"
mozilla
/
CDMProxy
.
h
"
#
include
"
gmp
-
decryption
.
h
"
#
include
"
GMPDecryptorProxy
.
h
"
namespace
mozilla
{
class
GMPCDMCallbackProxy
:
public
GMPDecryptorProxyCallback
{
public
:
void
SetSessionId
(
uint32_t
aCreateSessionToken
const
nsCString
&
aSessionId
)
override
;
void
ResolveLoadSessionPromise
(
uint32_t
aPromiseId
bool
aSuccess
)
override
;
void
ResolvePromise
(
uint32_t
aPromiseId
)
override
;
void
RejectPromise
(
uint32_t
aPromiseId
nsresult
aException
const
nsCString
&
aSessionId
)
override
;
void
SessionMessage
(
const
nsCString
&
aSessionId
dom
:
:
MediaKeyMessageType
aMessageType
const
nsTArray
<
uint8_t
>
&
aMessage
)
override
;
void
ExpirationChange
(
const
nsCString
&
aSessionId
UnixTime
aExpiryTime
)
override
;
void
SessionClosed
(
const
nsCString
&
aSessionId
)
override
;
void
SessionError
(
const
nsCString
&
aSessionId
nsresult
aException
uint32_t
aSystemCode
const
nsCString
&
aMessage
)
override
;
void
KeyStatusChanged
(
const
nsCString
&
aSessionId
const
nsTArray
<
uint8_t
>
&
aKeyId
dom
:
:
MediaKeyStatus
aStatus
)
override
;
void
ForgetKeyStatus
(
const
nsCString
&
aSessionId
const
nsTArray
<
uint8_t
>
&
aKeyId
)
override
;
void
Decrypted
(
uint32_t
aId
DecryptStatus
aResult
const
nsTArray
<
uint8_t
>
&
aDecryptedData
)
override
;
void
BatchedKeyStatusChanged
(
const
nsCString
&
aSessionId
const
nsTArray
<
CDMKeyInfo
>
&
aKeyInfos
)
override
;
void
Terminated
(
)
override
;
~
GMPCDMCallbackProxy
(
)
{
}
private
:
friend
class
GMPCDMProxy
;
explicit
GMPCDMCallbackProxy
(
CDMProxy
*
aProxy
)
;
void
KeyStatusChangedInternal
(
const
nsCString
&
aSessionId
const
nsTArray
<
uint8_t
>
&
aKeyId
const
dom
:
:
Optional
<
dom
:
:
MediaKeyStatus
>
&
aStatus
)
;
void
BatchedKeyStatusChangedInternal
(
const
nsCString
&
aSessionId
const
nsTArray
<
CDMKeyInfo
>
&
aKeyInfos
)
;
CDMProxy
*
mProxy
;
}
;
}
#
endif
