#
include
"
GMPProcessParent
.
h
"
#
include
"
GMPUtils
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIRunnable
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
WinUtils
.
h
"
#
endif
#
include
"
GMPLog
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
base
/
process_util
.
h
"
#
include
<
string
>
using
std
:
:
string
;
using
std
:
:
vector
;
using
mozilla
:
:
gmp
:
:
GMPProcessParent
;
using
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
;
static
const
int
kInvalidFd
=
-
1
;
namespace
mozilla
{
namespace
gmp
{
GMPProcessParent
:
:
GMPProcessParent
(
const
std
:
:
string
&
aGMPPath
)
:
GeckoChildProcessHost
(
GeckoProcessType_GMPlugin
)
mGMPPath
(
aGMPPath
)
{
MOZ_COUNT_CTOR
(
GMPProcessParent
)
;
}
GMPProcessParent
:
:
~
GMPProcessParent
(
)
{
MOZ_COUNT_DTOR
(
GMPProcessParent
)
;
}
bool
GMPProcessParent
:
:
Launch
(
int32_t
aTimeoutMs
)
{
vector
<
string
>
args
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
std
:
:
wstring
wGMPPath
=
UTF8ToWide
(
mGMPPath
.
c_str
(
)
)
;
if
(
!
widget
:
:
WinUtils
:
:
ResolveJunctionPointsAndSymLinks
(
wGMPPath
)
)
{
GMP_LOG
(
"
ResolveJunctionPointsAndSymLinks
failed
for
GMP
path
=
%
S
"
wGMPPath
.
c_str
(
)
)
;
NS_WARNING
(
"
ResolveJunctionPointsAndSymLinks
failed
for
GMP
path
.
"
)
;
return
false
;
}
GMP_LOG
(
"
GMPProcessParent
:
:
Launch
(
)
resolved
path
to
%
S
"
wGMPPath
.
c_str
(
)
)
;
wchar_t
volPath
[
MAX_PATH
]
;
if
(
:
:
GetVolumePathNameW
(
wGMPPath
.
c_str
(
)
volPath
MAX_PATH
)
&
&
:
:
GetDriveTypeW
(
volPath
)
=
=
DRIVE_REMOTE
&
&
wGMPPath
.
compare
(
0
2
L
"
\
\
\
\
"
)
=
=
0
)
{
std
:
:
wstring
sandboxGMPPath
(
wGMPPath
)
;
sandboxGMPPath
.
insert
(
1
L
"
?
?
\
\
UNC
"
)
;
mAllowedFilesRead
.
push_back
(
sandboxGMPPath
+
L
"
\
\
*
"
)
;
}
else
{
mAllowedFilesRead
.
push_back
(
wGMPPath
+
L
"
\
\
*
"
)
;
}
args
.
push_back
(
WideToUTF8
(
wGMPPath
)
)
;
#
else
args
.
push_back
(
mGMPPath
)
;
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
AddFdToRemap
(
kInvalidFd
kInvalidFd
)
;
AddFdToRemap
(
kInvalidFd
kInvalidFd
)
;
#
endif
return
SyncLaunch
(
args
aTimeoutMs
)
;
}
void
GMPProcessParent
:
:
Delete
(
nsCOMPtr
<
nsIRunnable
>
aCallback
)
{
mDeletedCallback
=
aCallback
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
NewNonOwningRunnableMethod
(
"
gmp
:
:
GMPProcessParent
:
:
DoDelete
"
this
&
GMPProcessParent
:
:
DoDelete
)
)
;
}
void
GMPProcessParent
:
:
DoDelete
(
)
{
MOZ_ASSERT
(
MessageLoop
:
:
current
(
)
=
=
XRE_GetIOMessageLoop
(
)
)
;
Join
(
)
;
if
(
mDeletedCallback
)
{
mDeletedCallback
-
>
Run
(
)
;
}
delete
this
;
}
}
}
