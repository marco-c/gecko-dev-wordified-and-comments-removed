#
ifndef
MP3_FRAME_PARSER_H_
#
define
MP3_FRAME_PARSER_H_
#
include
<
vector
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
BufferReader
.
h
"
namespace
mozilla
{
class
ID3Parser
{
public
:
class
ID3Header
{
public
:
static
const
int
SIZE
=
10
;
ID3Header
(
)
;
void
Reset
(
)
;
uint8_t
MajorVersion
(
)
const
;
uint8_t
MinorVersion
(
)
const
;
uint8_t
Flags
(
)
const
;
uint32_t
Size
(
)
const
;
bool
HasSizeBeenSet
(
)
const
;
uint8_t
FooterSize
(
)
const
;
uint32_t
TotalTagSize
(
)
const
;
bool
IsValid
(
int
aPos
)
const
;
bool
IsValid
(
)
const
;
bool
ParseNext
(
uint8_t
c
)
;
private
:
bool
Update
(
uint8_t
c
)
;
uint8_t
mRaw
[
SIZE
]
;
Maybe
<
uint32_t
>
mSize
;
int
mPos
;
}
;
const
ID3Header
&
Header
(
)
const
;
Result
<
uint32_t
nsresult
>
Parse
(
BufferReader
*
aReader
)
;
void
Reset
(
)
;
private
:
ID3Header
mHeader
;
}
;
class
FrameParser
{
public
:
class
FrameHeader
{
public
:
static
const
int
SIZE
=
4
;
FrameHeader
(
)
;
uint8_t
Sync1
(
)
const
;
uint8_t
Sync2
(
)
const
;
uint8_t
RawVersion
(
)
const
;
uint8_t
RawLayer
(
)
const
;
uint8_t
RawProtection
(
)
const
;
uint8_t
RawBitrate
(
)
const
;
uint8_t
RawSampleRate
(
)
const
;
uint8_t
Padding
(
)
const
;
uint8_t
Private
(
)
const
;
uint8_t
RawChannelMode
(
)
const
;
int32_t
SampleRate
(
)
const
;
int32_t
Channels
(
)
const
;
int32_t
SamplesPerFrame
(
)
const
;
int32_t
SlotSize
(
)
const
;
int32_t
Bitrate
(
)
const
;
int32_t
Layer
(
)
const
;
bool
IsValid
(
const
int
aPos
)
const
;
bool
IsValid
(
)
const
;
void
Reset
(
)
;
bool
ParseNext
(
const
uint8_t
c
)
;
private
:
bool
Update
(
const
uint8_t
c
)
;
uint8_t
mRaw
[
SIZE
]
;
int
mPos
;
}
;
class
VBRHeader
{
public
:
enum
VBRHeaderType
{
NONE
=
0
XING
VBRI
}
;
VBRHeader
(
)
;
VBRHeaderType
Type
(
)
const
;
const
Maybe
<
uint32_t
>
&
NumAudioFrames
(
)
const
;
const
Maybe
<
uint32_t
>
&
NumBytes
(
)
const
;
const
Maybe
<
uint32_t
>
&
Scale
(
)
const
;
bool
IsTOCPresent
(
)
const
;
bool
IsValid
(
)
const
;
bool
IsComplete
(
)
const
;
int64_t
Offset
(
float
aDurationFac
)
const
;
bool
Parse
(
BufferReader
*
aReader
)
;
private
:
Result
<
bool
nsresult
>
ParseXing
(
BufferReader
*
aReader
)
;
Result
<
bool
nsresult
>
ParseVBRI
(
BufferReader
*
aReader
)
;
Maybe
<
uint32_t
>
mNumAudioFrames
;
Maybe
<
uint32_t
>
mNumBytes
;
Maybe
<
uint32_t
>
mScale
;
std
:
:
vector
<
int64_t
>
mTOC
;
VBRHeaderType
mType
;
}
;
class
Frame
{
public
:
int32_t
Length
(
)
const
;
const
FrameHeader
&
Header
(
)
const
;
void
Reset
(
)
;
bool
ParseNext
(
uint8_t
c
)
;
private
:
FrameHeader
mHeader
;
}
;
FrameParser
(
)
;
const
Frame
&
CurrentFrame
(
)
const
;
const
Frame
&
PrevFrame
(
)
const
;
const
Frame
&
FirstFrame
(
)
const
;
const
ID3Parser
:
:
ID3Header
&
ID3Header
(
)
const
;
const
VBRHeader
&
VBRInfo
(
)
const
;
void
Reset
(
)
;
void
ResetFrameData
(
)
;
void
EndFrameSession
(
)
;
Result
<
bool
nsresult
>
Parse
(
BufferReader
*
aReader
uint32_t
*
aBytesToSkip
)
;
bool
ParseVBRHeader
(
BufferReader
*
aReader
)
;
private
:
ID3Parser
mID3Parser
;
VBRHeader
mVBRHeader
;
Frame
mFirstFrame
;
Frame
mFrame
;
Frame
mPrevFrame
;
}
;
}
#
endif
