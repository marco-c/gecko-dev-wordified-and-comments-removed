#
include
"
MediaStreamTrack
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
MediaSegment
.
h
"
#
include
"
MediaStreamError
.
h
"
#
include
"
MediaStreamGraphImpl
.
h
"
#
include
"
MediaStreamListener
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
systemservices
/
MediaUtils
.
h
"
#
ifdef
LOG
#
undef
LOG
#
endif
static
mozilla
:
:
LazyLogModule
gMediaStreamTrackLog
(
"
MediaStreamTrack
"
)
;
#
define
LOG
(
type
msg
)
MOZ_LOG
(
gMediaStreamTrackLog
type
msg
)
using
namespace
mozilla
:
:
media
;
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
MediaStreamTrackSource
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
MediaStreamTrackSource
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MediaStreamTrackSource
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
MediaStreamTrackSource
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
MediaStreamTrackSource
)
tmp
-
>
Destroy
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPrincipal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
MediaStreamTrackSource
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPrincipal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
auto
MediaStreamTrackSource
:
:
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
)
-
>
RefPtr
<
ApplyConstraintsPromise
>
{
return
ApplyConstraintsPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
MediaMgrError
:
:
Name
:
:
OverconstrainedError
NS_LITERAL_STRING
(
"
"
)
)
__func__
)
;
}
class
MediaStreamTrack
:
:
MSGListener
:
public
MediaStreamTrackListener
{
public
:
explicit
MSGListener
(
MediaStreamTrack
*
aTrack
)
:
mTrack
(
aTrack
)
{
}
void
DoNotifyPrincipalHandleChanged
(
const
PrincipalHandle
&
aNewPrincipalHandle
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mTrack
)
{
return
;
}
mTrack
-
>
NotifyPrincipalHandleChanged
(
aNewPrincipalHandle
)
;
}
void
NotifyPrincipalHandleChanged
(
MediaStreamGraph
*
aGraph
const
PrincipalHandle
&
aNewPrincipalHandle
)
override
{
aGraph
-
>
DispatchToMainThreadStableState
(
NewRunnableMethod
<
StoreCopyPassByConstLRef
<
PrincipalHandle
>
>
(
"
dom
:
:
MediaStreamTrack
:
:
MSGListener
:
:
"
"
DoNotifyPrincipalHandleChanged
"
this
&
MSGListener
:
:
DoNotifyPrincipalHandleChanged
aNewPrincipalHandle
)
)
;
}
void
NotifyRemoved
(
MediaStreamGraph
*
aGraph
)
override
{
aGraph
-
>
DispatchToMainThreadStableState
(
NS_NewRunnableFunction
(
"
MediaStreamTrack
:
:
MSGListener
:
:
mTrackReleaser
"
[
self
=
RefPtr
<
MSGListener
>
(
this
)
]
(
)
{
}
)
)
;
}
void
DoNotifyEnded
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mTrack
)
{
return
;
}
if
(
!
mTrack
-
>
GetParentObject
(
)
)
{
return
;
}
AbstractThread
*
mainThread
=
nsGlobalWindowInner
:
:
Cast
(
mTrack
-
>
GetParentObject
(
)
)
-
>
AbstractMainThreadFor
(
TaskCategory
:
:
Other
)
;
mainThread
-
>
Dispatch
(
NewRunnableMethod
(
"
MediaStreamTrack
:
:
OverrideEnded
"
mTrack
.
get
(
)
&
MediaStreamTrack
:
:
OverrideEnded
)
)
;
}
void
NotifyEnded
(
MediaStreamGraph
*
aGraph
)
override
{
aGraph
-
>
DispatchToMainThreadStableState
(
NewRunnableMethod
(
"
MediaStreamTrack
:
:
MSGListener
:
:
DoNotifyEnded
"
this
&
MSGListener
:
:
DoNotifyEnded
)
)
;
}
protected
:
WeakPtr
<
MediaStreamTrack
>
mTrack
;
}
;
class
MediaStreamTrack
:
:
TrackSink
:
public
MediaStreamTrackSource
:
:
Sink
{
public
:
explicit
TrackSink
(
MediaStreamTrack
*
aTrack
)
:
mTrack
(
aTrack
)
{
}
bool
KeepsSourceAlive
(
)
const
override
{
return
true
;
}
bool
Enabled
(
)
const
override
{
if
(
!
mTrack
)
{
return
false
;
}
return
mTrack
-
>
Enabled
(
)
;
}
void
PrincipalChanged
(
)
override
{
if
(
mTrack
)
{
mTrack
-
>
PrincipalChanged
(
)
;
}
}
void
MutedChanged
(
bool
aNewState
)
override
{
if
(
mTrack
)
{
mTrack
-
>
MutedChanged
(
aNewState
)
;
}
}
void
OverrideEnded
(
)
override
{
if
(
mTrack
)
{
mTrack
-
>
OverrideEnded
(
)
;
}
}
private
:
WeakPtr
<
MediaStreamTrack
>
mTrack
;
}
;
MediaStreamTrack
:
:
MediaStreamTrack
(
nsPIDOMWindowInner
*
aWindow
MediaStream
*
aInputStream
MediaStreamTrackSource
*
aSource
MediaStreamTrackState
aReadyState
const
MediaTrackConstraints
&
aConstraints
)
:
mWindow
(
aWindow
)
mInputStream
(
aInputStream
)
mSource
(
aSource
)
mSink
(
MakeUnique
<
TrackSink
>
(
this
)
)
mPrincipal
(
aSource
-
>
GetPrincipal
(
)
)
mReadyState
(
aReadyState
)
mEnabled
(
true
)
mMuted
(
false
)
mConstraints
(
aConstraints
)
{
if
(
!
Ended
(
)
)
{
GetSource
(
)
.
RegisterSink
(
mSink
.
get
(
)
)
;
auto
graph
=
mInputStream
-
>
IsDestroyed
(
)
?
MediaStreamGraph
:
:
GetInstanceIfExists
(
mWindow
mInputStream
-
>
mSampleRate
)
:
mInputStream
-
>
Graph
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
graph
"
A
destroyed
input
stream
is
only
expected
when
"
"
cloning
but
since
we
'
re
live
there
must
be
another
"
"
live
track
that
is
keeping
the
graph
alive
"
)
;
mStream
=
graph
-
>
CreateTrackUnionStream
(
mInputStream
-
>
mType
)
;
mPort
=
mStream
-
>
AllocateInputPort
(
mInputStream
)
;
mMSGListener
=
new
MSGListener
(
this
)
;
AddListener
(
mMSGListener
)
;
}
nsresult
rv
;
nsCOMPtr
<
nsIUUIDGenerator
>
uuidgen
=
do_GetService
(
"
mozilla
.
org
/
uuid
-
generator
;
1
"
&
rv
)
;
nsID
uuid
;
memset
(
&
uuid
0
sizeof
(
uuid
)
)
;
if
(
uuidgen
)
{
uuidgen
-
>
GenerateUUIDInPlace
(
&
uuid
)
;
}
char
chars
[
NSID_LENGTH
]
;
uuid
.
ToProvidedString
(
chars
)
;
mID
=
NS_ConvertASCIItoUTF16
(
chars
)
;
}
MediaStreamTrack
:
:
~
MediaStreamTrack
(
)
{
Destroy
(
)
;
}
void
MediaStreamTrack
:
:
Destroy
(
)
{
SetReadyState
(
MediaStreamTrackState
:
:
Ended
)
;
const
nsTArray
<
RefPtr
<
MediaStreamTrackListener
>
>
trackListeners
(
mTrackListeners
)
;
for
(
auto
listener
:
trackListeners
)
{
RemoveListener
(
listener
)
;
}
const
nsTArray
<
RefPtr
<
DirectMediaStreamTrackListener
>
>
directTrackListeners
(
mDirectTrackListeners
)
;
for
(
auto
listener
:
directTrackListeners
)
{
RemoveDirectListener
(
listener
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
MediaStreamTrack
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
tmp
-
>
Destroy
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSource
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPrincipal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPendingPrincipal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSource
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPrincipal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPendingPrincipal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_ADDREF_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
MediaStreamTrack
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MediaStreamTrack
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
JSObject
*
MediaStreamTrack
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaStreamTrack_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
MediaStreamTrack
:
:
GetId
(
nsAString
&
aID
)
const
{
aID
=
mID
;
}
void
MediaStreamTrack
:
:
SetEnabled
(
bool
aEnabled
)
{
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
%
s
"
this
aEnabled
?
"
Enabled
"
:
"
Disabled
"
)
)
;
if
(
mEnabled
=
=
aEnabled
)
{
return
;
}
mEnabled
=
aEnabled
;
if
(
Ended
(
)
)
{
return
;
}
mStream
-
>
SetEnabled
(
mEnabled
?
DisabledTrackMode
:
:
ENABLED
:
DisabledTrackMode
:
:
SILENCE_BLACK
)
;
GetSource
(
)
.
SinkEnabledStateChanged
(
)
;
}
void
MediaStreamTrack
:
:
Stop
(
)
{
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
Stop
(
)
"
this
)
)
;
if
(
Ended
(
)
)
{
LOG
(
LogLevel
:
:
Warning
(
"
MediaStreamTrack
%
p
Already
ended
"
this
)
)
;
return
;
}
SetReadyState
(
MediaStreamTrackState
:
:
Ended
)
;
NotifyEnded
(
)
;
}
void
MediaStreamTrack
:
:
GetConstraints
(
dom
:
:
MediaTrackConstraints
&
aResult
)
{
aResult
=
mConstraints
;
}
void
MediaStreamTrack
:
:
GetSettings
(
dom
:
:
MediaTrackSettings
&
aResult
CallerType
aCallerType
)
{
GetSource
(
)
.
GetSettings
(
aResult
)
;
if
(
!
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
return
;
}
if
(
aResult
.
mFacingMode
.
WasPassed
(
)
)
{
aResult
.
mFacingMode
.
Value
(
)
.
Assign
(
NS_ConvertASCIItoUTF16
(
VideoFacingModeEnumValues
:
:
strings
[
uint8_t
(
VideoFacingModeEnum
:
:
User
)
]
.
value
)
)
;
}
}
already_AddRefed
<
Promise
>
MediaStreamTrack
:
:
ApplyConstraints
(
const
MediaTrackConstraints
&
aConstraints
CallerType
aCallerType
ErrorResult
&
aRv
)
{
if
(
MOZ_LOG_TEST
(
gMediaStreamTrackLog
LogLevel
:
:
Info
)
)
{
nsString
str
;
aConstraints
.
ToJSON
(
str
)
;
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
ApplyConstraints
(
)
with
"
"
constraints
%
s
"
this
NS_ConvertUTF16toUTF8
(
str
)
.
get
(
)
)
)
;
}
nsIGlobalObject
*
go
=
mWindow
?
mWindow
-
>
AsGlobal
(
)
:
nullptr
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
go
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
MediaStreamTrack
>
self
(
this
)
;
GetSource
(
)
.
ApplyConstraints
(
aConstraints
aCallerType
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
this
self
promise
aConstraints
]
(
bool
aDummy
)
{
if
(
!
mWindow
|
|
!
mWindow
-
>
IsCurrentInnerWindow
(
)
)
{
return
;
}
mConstraints
=
aConstraints
;
promise
-
>
MaybeResolve
(
false
)
;
}
[
this
self
promise
]
(
const
RefPtr
<
MediaMgrError
>
&
aError
)
{
if
(
!
mWindow
|
|
!
mWindow
-
>
IsCurrentInnerWindow
(
)
)
{
return
;
}
promise
-
>
MaybeReject
(
MakeRefPtr
<
MediaStreamError
>
(
mWindow
*
aError
)
)
;
}
)
;
return
promise
.
forget
(
)
;
}
ProcessedMediaStream
*
MediaStreamTrack
:
:
GetStream
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
!
Ended
(
)
)
;
return
mStream
;
}
MediaStreamGraph
*
MediaStreamTrack
:
:
Graph
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
!
Ended
(
)
)
;
return
mStream
-
>
Graph
(
)
;
}
MediaStreamGraphImpl
*
MediaStreamTrack
:
:
GraphImpl
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
!
Ended
(
)
)
;
return
mStream
-
>
GraphImpl
(
)
;
}
void
MediaStreamTrack
:
:
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
if
(
aPrincipal
=
=
mPrincipal
)
{
return
;
}
mPrincipal
=
aPrincipal
;
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
principal
changed
to
%
p
.
Now
:
"
"
null
=
%
d
codebase
=
%
d
expanded
=
%
d
system
=
%
d
"
this
mPrincipal
.
get
(
)
mPrincipal
-
>
GetIsNullPrincipal
(
)
mPrincipal
-
>
GetIsContentPrincipal
(
)
mPrincipal
-
>
GetIsExpandedPrincipal
(
)
mPrincipal
-
>
IsSystemPrincipal
(
)
)
)
;
for
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
observer
:
mPrincipalChangeObservers
)
{
observer
-
>
PrincipalChanged
(
this
)
;
}
}
void
MediaStreamTrack
:
:
PrincipalChanged
(
)
{
mPendingPrincipal
=
GetSource
(
)
.
GetPrincipal
(
)
;
nsCOMPtr
<
nsIPrincipal
>
newPrincipal
=
mPrincipal
;
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
Principal
changed
on
main
thread
"
"
to
%
p
(
pending
)
.
Combining
with
existing
principal
%
p
.
"
this
mPendingPrincipal
.
get
(
)
mPrincipal
.
get
(
)
)
)
;
if
(
nsContentUtils
:
:
CombineResourcePrincipals
(
&
newPrincipal
mPendingPrincipal
)
)
{
SetPrincipal
(
newPrincipal
)
;
}
}
void
MediaStreamTrack
:
:
NotifyPrincipalHandleChanged
(
const
PrincipalHandle
&
aNewPrincipalHandle
)
{
PrincipalHandle
handle
(
aNewPrincipalHandle
)
;
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
principalHandle
changed
on
"
"
MediaStreamGraph
thread
to
%
p
.
Current
principal
:
%
p
"
"
pending
:
%
p
"
this
GetPrincipalFromHandle
(
handle
)
mPrincipal
.
get
(
)
mPendingPrincipal
.
get
(
)
)
)
;
if
(
PrincipalHandleMatches
(
handle
mPendingPrincipal
)
)
{
SetPrincipal
(
mPendingPrincipal
)
;
mPendingPrincipal
=
nullptr
;
}
}
void
MediaStreamTrack
:
:
MutedChanged
(
bool
aNewState
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mMuted
=
=
aNewState
)
{
return
;
}
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
became
%
s
"
this
aNewState
?
"
muted
"
:
"
unmuted
"
)
)
;
mMuted
=
aNewState
;
nsString
eventName
=
aNewState
?
NS_LITERAL_STRING
(
"
mute
"
)
:
NS_LITERAL_STRING
(
"
unmute
"
)
;
DispatchTrustedEvent
(
eventName
)
;
}
void
MediaStreamTrack
:
:
NotifyEnded
(
)
{
MOZ_ASSERT
(
mReadyState
=
=
MediaStreamTrackState
:
:
Ended
)
;
auto
consumers
(
mConsumers
)
;
for
(
const
auto
&
consumer
:
consumers
)
{
if
(
consumer
)
{
consumer
-
>
NotifyEnded
(
this
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
A
consumer
was
not
explicitly
removed
"
)
;
mConsumers
.
RemoveElement
(
consumer
)
;
}
}
}
bool
MediaStreamTrack
:
:
AddPrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
{
return
mPrincipalChangeObservers
.
AppendElement
(
aObserver
)
!
=
nullptr
;
}
bool
MediaStreamTrack
:
:
RemovePrincipalChangeObserver
(
PrincipalChangeObserver
<
MediaStreamTrack
>
*
aObserver
)
{
return
mPrincipalChangeObservers
.
RemoveElement
(
aObserver
)
;
}
void
MediaStreamTrack
:
:
AddConsumer
(
MediaStreamTrackConsumer
*
aConsumer
)
{
MOZ_ASSERT
(
!
mConsumers
.
Contains
(
aConsumer
)
)
;
mConsumers
.
AppendElement
(
aConsumer
)
;
while
(
mConsumers
.
RemoveElement
(
nullptr
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
A
consumer
was
not
explicitly
removed
"
)
;
}
}
void
MediaStreamTrack
:
:
RemoveConsumer
(
MediaStreamTrackConsumer
*
aConsumer
)
{
mConsumers
.
RemoveElement
(
aConsumer
)
;
while
(
mConsumers
.
RemoveElement
(
nullptr
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
A
consumer
was
not
explicitly
removed
"
)
;
}
}
already_AddRefed
<
MediaStreamTrack
>
MediaStreamTrack
:
:
Clone
(
)
{
RefPtr
<
MediaStreamTrack
>
newTrack
=
CloneInternal
(
)
;
newTrack
-
>
SetEnabled
(
Enabled
(
)
)
;
newTrack
-
>
SetMuted
(
Muted
(
)
)
;
return
newTrack
.
forget
(
)
;
}
void
MediaStreamTrack
:
:
SetReadyState
(
MediaStreamTrackState
aState
)
{
MOZ_ASSERT
(
!
(
mReadyState
=
=
MediaStreamTrackState
:
:
Ended
&
&
aState
=
=
MediaStreamTrackState
:
:
Live
)
"
We
don
'
t
support
overriding
the
ready
state
from
ended
to
live
"
)
;
if
(
Ended
(
)
)
{
return
;
}
if
(
mReadyState
=
=
MediaStreamTrackState
:
:
Live
&
&
aState
=
=
MediaStreamTrackState
:
:
Ended
)
{
if
(
mSource
)
{
mSource
-
>
UnregisterSink
(
mSink
.
get
(
)
)
;
}
if
(
mMSGListener
)
{
RemoveListener
(
mMSGListener
)
;
}
if
(
mPort
)
{
mPort
-
>
Destroy
(
)
;
}
if
(
mStream
)
{
mStream
-
>
Destroy
(
)
;
}
mPort
=
nullptr
;
mStream
=
nullptr
;
mMSGListener
=
nullptr
;
}
mReadyState
=
aState
;
}
void
MediaStreamTrack
:
:
OverrideEnded
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
Ended
(
)
)
{
return
;
}
LOG
(
LogLevel
:
:
Info
(
"
MediaStreamTrack
%
p
ended
"
this
)
)
;
SetReadyState
(
MediaStreamTrackState
:
:
Ended
)
;
NotifyEnded
(
)
;
DispatchTrustedEvent
(
NS_LITERAL_STRING
(
"
ended
"
)
)
;
}
void
MediaStreamTrack
:
:
AddListener
(
MediaStreamTrackListener
*
aListener
)
{
LOG
(
LogLevel
:
:
Debug
(
"
MediaStreamTrack
%
p
adding
listener
%
p
"
this
aListener
)
)
;
mTrackListeners
.
AppendElement
(
aListener
)
;
if
(
Ended
(
)
)
{
return
;
}
mStream
-
>
AddListener
(
aListener
)
;
}
void
MediaStreamTrack
:
:
RemoveListener
(
MediaStreamTrackListener
*
aListener
)
{
LOG
(
LogLevel
:
:
Debug
(
"
MediaStreamTrack
%
p
removing
listener
%
p
"
this
aListener
)
)
;
mTrackListeners
.
RemoveElement
(
aListener
)
;
if
(
Ended
(
)
)
{
return
;
}
mStream
-
>
RemoveListener
(
aListener
)
;
}
void
MediaStreamTrack
:
:
AddDirectListener
(
DirectMediaStreamTrackListener
*
aListener
)
{
LOG
(
LogLevel
:
:
Debug
(
"
MediaStreamTrack
%
p
(
%
s
)
adding
direct
listener
%
p
to
"
"
stream
%
p
"
this
AsAudioStreamTrack
(
)
?
"
audio
"
:
"
video
"
aListener
mStream
.
get
(
)
)
)
;
mDirectTrackListeners
.
AppendElement
(
aListener
)
;
if
(
Ended
(
)
)
{
return
;
}
mStream
-
>
AddDirectListener
(
aListener
)
;
}
void
MediaStreamTrack
:
:
RemoveDirectListener
(
DirectMediaStreamTrackListener
*
aListener
)
{
LOG
(
LogLevel
:
:
Debug
(
"
MediaStreamTrack
%
p
removing
direct
listener
%
p
from
stream
%
p
"
this
aListener
mStream
.
get
(
)
)
)
;
mDirectTrackListeners
.
RemoveElement
(
aListener
)
;
if
(
Ended
(
)
)
{
return
;
}
mStream
-
>
RemoveDirectListener
(
aListener
)
;
}
already_AddRefed
<
MediaInputPort
>
MediaStreamTrack
:
:
ForwardTrackContentsTo
(
ProcessedMediaStream
*
aStream
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_RELEASE_ASSERT
(
aStream
)
;
return
aStream
-
>
AllocateInputPort
(
mStream
)
;
}
}
}
