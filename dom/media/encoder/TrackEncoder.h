#
ifndef
TrackEncoder_h_
#
define
TrackEncoder_h_
#
include
"
AudioSegment
.
h
"
#
include
"
EncodedFrameContainer
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
TrackMetadataBase
.
h
"
#
include
"
VideoSegment
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
TrackEncoder
;
class
TrackEncoderListener
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TrackEncoderListener
)
virtual
void
Initialized
(
TrackEncoder
*
aEncoder
)
=
0
;
virtual
void
DataAvailable
(
TrackEncoder
*
aEncoder
)
=
0
;
virtual
void
Error
(
TrackEncoder
*
aEncoder
)
=
0
;
protected
:
virtual
~
TrackEncoderListener
(
)
{
}
}
;
class
TrackEncoder
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TrackEncoder
)
;
public
:
explicit
TrackEncoder
(
TrackRate
aTrackRate
)
;
virtual
void
Suspend
(
TimeStamp
aTime
)
=
0
;
virtual
void
Resume
(
TimeStamp
aTime
)
=
0
;
virtual
void
Cancel
(
)
=
0
;
virtual
void
NotifyEndOfStream
(
)
=
0
;
virtual
void
SetStartOffset
(
StreamTime
aStartOffset
)
=
0
;
virtual
void
AdvanceBlockedInput
(
StreamTime
aDuration
)
=
0
;
virtual
void
AdvanceCurrentTime
(
StreamTime
aDuration
)
=
0
;
virtual
already_AddRefed
<
TrackMetadataBase
>
GetMetadata
(
)
=
0
;
virtual
nsresult
GetEncodedTrack
(
EncodedFrameContainer
&
aData
)
=
0
;
bool
IsInitialized
(
)
;
bool
IsEncodingComplete
(
)
;
void
SetInitialized
(
)
;
void
OnDataAvailable
(
)
;
void
OnError
(
)
;
void
RegisterListener
(
TrackEncoderListener
*
aListener
)
;
bool
UnregisterListener
(
TrackEncoderListener
*
aListener
)
;
virtual
void
SetBitrate
(
const
uint32_t
aBitrate
)
=
0
;
void
SetWorkerThread
(
AbstractThread
*
aWorkerThread
)
;
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
=
0
;
protected
:
virtual
~
TrackEncoder
(
)
{
MOZ_ASSERT
(
mListeners
.
IsEmpty
(
)
)
;
}
bool
mEncodingComplete
;
bool
mEosSetInEncoder
;
bool
mInitialized
;
bool
mEndOfStream
;
bool
mCanceled
;
StreamTime
mCurrentTime
;
uint32_t
mInitCounter
;
StreamTime
mNotInitDuration
;
bool
mSuspended
;
TrackRate
mTrackRate
;
RefPtr
<
AbstractThread
>
mWorkerThread
;
nsTArray
<
RefPtr
<
TrackEncoderListener
>
>
mListeners
;
}
;
class
AudioTrackEncoder
:
public
TrackEncoder
{
public
:
explicit
AudioTrackEncoder
(
TrackRate
aTrackRate
)
:
TrackEncoder
(
aTrackRate
)
mChannels
(
0
)
mSamplingRate
(
0
)
mAudioBitrate
(
0
)
mDirectConnected
{
false
}
{
}
void
Suspend
(
TimeStamp
aTime
)
override
;
void
Resume
(
TimeStamp
aTime
)
override
;
void
AppendAudioSegment
(
AudioSegment
&
&
aSegment
)
;
void
TakeTrackData
(
AudioSegment
&
aSegment
)
;
template
<
typename
T
>
static
void
InterleaveTrackData
(
nsTArray
<
const
T
*
>
&
aInput
int32_t
aDuration
uint32_t
aOutputChannels
AudioDataValue
*
aOutput
float
aVolume
)
{
if
(
aInput
.
Length
(
)
<
aOutputChannels
)
{
AudioChannelsUpMix
(
&
aInput
aOutputChannels
SilentChannel
:
:
ZeroChannel
<
T
>
(
)
)
;
}
if
(
aInput
.
Length
(
)
>
aOutputChannels
)
{
DownmixAndInterleave
(
aInput
aDuration
aVolume
aOutputChannels
aOutput
)
;
}
else
{
InterleaveAndConvertBuffer
(
aInput
.
Elements
(
)
aDuration
aVolume
aOutputChannels
aOutput
)
;
}
}
static
void
InterleaveTrackData
(
AudioChunk
&
aChunk
int32_t
aDuration
uint32_t
aOutputChannels
AudioDataValue
*
aOutput
)
;
static
void
DeInterleaveTrackData
(
AudioDataValue
*
aInput
int32_t
aDuration
int32_t
aChannels
AudioDataValue
*
aOutput
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
override
;
void
SetBitrate
(
const
uint32_t
aBitrate
)
override
{
mAudioBitrate
=
aBitrate
;
}
void
TryInit
(
const
AudioSegment
&
aSegment
StreamTime
aDuration
)
;
void
Cancel
(
)
override
;
void
NotifyEndOfStream
(
)
override
;
void
SetStartOffset
(
StreamTime
aStartOffset
)
override
;
void
AdvanceBlockedInput
(
StreamTime
aDuration
)
override
;
void
AdvanceCurrentTime
(
StreamTime
aDuration
)
override
;
protected
:
virtual
int
GetPacketDuration
(
)
{
return
0
;
}
virtual
nsresult
Init
(
int
aChannels
int
aSamplingRate
)
=
0
;
int
mChannels
;
int
mSamplingRate
;
AudioSegment
mIncomingBuffer
;
AudioSegment
mOutgoingBuffer
;
uint32_t
mAudioBitrate
;
bool
mDirectConnected
;
}
;
enum
class
FrameDroppingMode
{
ALLOW
DISALLOW
}
;
class
VideoTrackEncoder
:
public
TrackEncoder
{
public
:
explicit
VideoTrackEncoder
(
TrackRate
aTrackRate
FrameDroppingMode
aFrameDroppingMode
)
;
void
Suspend
(
TimeStamp
aTime
)
override
;
void
Resume
(
TimeStamp
aTime
)
override
;
void
AppendVideoSegment
(
VideoSegment
&
&
aSegment
)
;
void
TakeTrackData
(
VideoSegment
&
aSegment
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
override
;
void
SetBitrate
(
const
uint32_t
aBitrate
)
override
{
mVideoBitrate
=
aBitrate
;
}
void
Init
(
const
VideoSegment
&
aSegment
StreamTime
aDuration
)
;
StreamTime
SecondsToMediaTime
(
double
aS
)
const
{
NS_ASSERTION
(
0
<
=
aS
&
&
aS
<
=
TRACK_TICKS_MAX
/
TRACK_RATE_MAX
"
Bad
seconds
"
)
;
return
mTrackRate
*
aS
;
}
void
Cancel
(
)
override
;
void
NotifyEndOfStream
(
)
override
;
void
SetStartOffset
(
StreamTime
aStartOffset
)
override
;
void
AdvanceBlockedInput
(
StreamTime
aDuration
)
override
;
void
AdvanceCurrentTime
(
StreamTime
aDuration
)
override
;
void
SetKeyFrameInterval
(
int32_t
aKeyFrameInterval
)
;
protected
:
virtual
nsresult
Init
(
int
aWidth
int
aHeight
int
aDisplayWidth
int
aDisplayHeight
)
=
0
;
int
mFrameWidth
;
int
mFrameHeight
;
int
mDisplayWidth
;
int
mDisplayHeight
;
VideoChunk
mLastChunk
;
VideoSegment
mIncomingBuffer
;
VideoSegment
mOutgoingBuffer
;
StreamTime
mEncodedTicks
;
TimeStamp
mStartTime
;
TimeStamp
mSuspendTime
;
uint32_t
mVideoBitrate
;
FrameDroppingMode
mFrameDroppingMode
;
int32_t
mKeyFrameInterval
;
}
;
}
#
endif
