#
ifndef
VP8TrackEncoder_h_
#
define
VP8TrackEncoder_h_
#
include
"
TrackEncoder
.
h
"
#
include
"
mozilla
/
RollingMean
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
vpx
/
vpx_codec
.
h
"
namespace
mozilla
{
typedef
struct
vpx_codec_ctx
vpx_codec_ctx_t
;
typedef
struct
vpx_codec_enc_cfg
vpx_codec_enc_cfg_t
;
typedef
struct
vpx_image
vpx_image_t
;
class
VP8Metadata
;
class
VP8TrackEncoder
:
public
VideoTrackEncoder
{
enum
EncodeOperation
{
ENCODE_NORMAL_FRAME
ENCODE_I_FRAME
SKIP_FRAME
}
;
public
:
VP8TrackEncoder
(
RefPtr
<
DriftCompensator
>
aDriftCompensator
TrackRate
aTrackRate
FrameDroppingMode
aFrameDroppingMode
)
;
virtual
~
VP8TrackEncoder
(
)
;
already_AddRefed
<
TrackMetadataBase
>
GetMetadata
(
)
final
;
nsresult
GetEncodedTrack
(
nsTArray
<
RefPtr
<
EncodedFrame
>
>
&
aData
)
final
;
void
SetKeyFrameInterval
(
Maybe
<
TimeDuration
>
aKeyFrameInterval
)
final
;
protected
:
nsresult
Init
(
int32_t
aWidth
int32_t
aHeight
int32_t
aDisplayWidth
int32_t
aDisplayHeight
)
final
;
private
:
EncodeOperation
GetNextEncodeOperation
(
TimeDuration
aTimeElapsed
TimeDuration
aProcessedDuration
)
;
nsresult
GetEncodedPartitions
(
nsTArray
<
RefPtr
<
EncodedFrame
>
>
&
aData
)
;
nsresult
PrepareRawFrame
(
VideoChunk
&
aChunk
)
;
nsresult
Reconfigure
(
int32_t
aWidth
int32_t
aHeight
int32_t
aDisplayWidth
int32_t
aDisplayHeight
)
;
void
Destroy
(
)
;
RefPtr
<
VP8Metadata
>
mMetadata
;
int
mFrameWidth
=
0
;
int
mFrameHeight
=
0
;
TrackTime
mEncodedTimestamp
=
0
;
CheckedInt64
mExtractedDuration
;
media
:
:
TimeUnit
mExtractedDurationUs
;
RefPtr
<
layers
:
:
Image
>
mMuteFrame
;
UniquePtr
<
uint8_t
[
]
>
mI420Frame
;
size_t
mI420FrameSize
=
0
;
TrackTime
mDurationSinceLastKeyframe
=
0
;
TimeDuration
mKeyFrameInterval
;
VideoSegment
mSourceSegment
;
RollingMean
<
TimeDuration
TimeDuration
>
mMeanFrameDuration
{
30
}
;
RollingMean
<
TimeDuration
TimeDuration
>
mMeanFrameEncodeDuration
{
30
}
;
vpx_codec_ctx_t
mVPXContext
;
vpx_image_t
mVPXImageWrapper
;
}
;
}
#
endif
