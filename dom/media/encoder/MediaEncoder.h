#
ifndef
MediaEncoder_h_
#
define
MediaEncoder_h_
#
include
"
ContainerWriter
.
h
"
#
include
"
CubebUtils
.
h
"
#
include
"
MediaQueue
.
h
"
#
include
"
MediaTrackGraph
.
h
"
#
include
"
MediaTrackListener
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
TrackEncoder
.
h
"
namespace
mozilla
{
class
DriftCompensator
;
class
Muxer
;
class
Runnable
;
class
TaskQueue
;
namespace
dom
{
class
AudioNode
;
class
AudioStreamTrack
;
class
MediaStreamTrack
;
class
VideoStreamTrack
;
}
class
DriftCompensator
;
class
MediaEncoder
;
class
MediaEncoderListener
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEncoderListener
)
virtual
void
Started
(
)
=
0
;
virtual
void
DataAvailable
(
)
=
0
;
virtual
void
Error
(
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
protected
:
virtual
~
MediaEncoderListener
(
)
=
default
;
}
;
class
MediaEncoder
{
private
:
class
AudioTrackListener
;
class
VideoTrackListener
;
class
EncoderListener
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEncoder
)
MediaEncoder
(
TaskQueue
*
aEncoderThread
RefPtr
<
DriftCompensator
>
aDriftCompensator
UniquePtr
<
ContainerWriter
>
aWriter
AudioTrackEncoder
*
aAudioEncoder
VideoTrackEncoder
*
aVideoEncoder
TrackRate
aTrackRate
const
nsAString
&
aMIMEType
)
;
void
Suspend
(
)
;
void
Resume
(
)
;
void
Stop
(
)
;
void
ConnectAudioNode
(
dom
:
:
AudioNode
*
aNode
uint32_t
aOutput
)
;
void
ConnectMediaStreamTrack
(
dom
:
:
MediaStreamTrack
*
aTrack
)
;
void
RemoveMediaStreamTrack
(
dom
:
:
MediaStreamTrack
*
aTrack
)
;
static
already_AddRefed
<
MediaEncoder
>
CreateEncoder
(
TaskQueue
*
aEncoderThread
const
nsAString
&
aMIMEType
uint32_t
aAudioBitrate
uint32_t
aVideoBitrate
uint8_t
aTrackTypes
TrackRate
aTrackRate
)
;
nsresult
GetEncodedData
(
nsTArray
<
nsTArray
<
uint8_t
>
>
*
aOutputBufs
)
;
void
AssertShutdownCalled
(
)
{
MOZ_ASSERT
(
mShutdownPromise
)
;
}
RefPtr
<
GenericNonExclusivePromise
:
:
AllPromiseType
>
Cancel
(
)
;
bool
HasError
(
)
;
static
bool
IsWebMEncoderEnabled
(
)
;
const
nsString
&
MimeType
(
)
const
;
void
NotifyInitialized
(
)
;
void
NotifyStarted
(
)
;
void
NotifyDataAvailable
(
)
;
void
RegisterListener
(
MediaEncoderListener
*
aListener
)
;
bool
UnregisterListener
(
MediaEncoderListener
*
aListener
)
;
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
void
SetVideoKeyFrameInterval
(
Maybe
<
TimeDuration
>
aVideoKeyFrameInterval
)
;
protected
:
~
MediaEncoder
(
)
;
private
:
void
EnsureGraphTrackFrom
(
MediaTrack
*
aTrack
)
;
void
RunOnGraph
(
already_AddRefed
<
Runnable
>
aRunnable
)
;
RefPtr
<
GenericNonExclusivePromise
:
:
AllPromiseType
>
Shutdown
(
)
;
void
SetError
(
)
;
const
RefPtr
<
TaskQueue
>
mEncoderThread
;
const
RefPtr
<
DriftCompensator
>
mDriftCompensator
;
UniquePtr
<
Muxer
>
mMuxer
;
RefPtr
<
AudioTrackEncoder
>
mAudioEncoder
;
RefPtr
<
AudioTrackListener
>
mAudioListener
;
RefPtr
<
VideoTrackEncoder
>
mVideoEncoder
;
RefPtr
<
VideoTrackListener
>
mVideoListener
;
RefPtr
<
EncoderListener
>
mEncoderListener
;
nsTArray
<
RefPtr
<
MediaEncoderListener
>
>
mListeners
;
RefPtr
<
dom
:
:
AudioNode
>
mAudioNode
;
RefPtr
<
AudioNodeTrack
>
mPipeTrack
;
RefPtr
<
MediaInputPort
>
mInputPort
;
RefPtr
<
dom
:
:
AudioStreamTrack
>
mAudioTrack
;
RefPtr
<
dom
:
:
VideoStreamTrack
>
mVideoTrack
;
RefPtr
<
SharedDummyTrack
>
mGraphTrack
;
TimeStamp
mStartTime
;
const
nsString
mMIMEType
;
bool
mInitialized
;
bool
mStarted
;
bool
mCompleted
;
bool
mError
;
RefPtr
<
GenericNonExclusivePromise
:
:
AllPromiseType
>
mShutdownPromise
;
double
GetEncodeTimeStamp
(
)
{
TimeDuration
decodeTime
;
decodeTime
=
TimeStamp
:
:
Now
(
)
-
mStartTime
;
return
decodeTime
.
ToMilliseconds
(
)
;
}
}
;
}
#
endif
