#
ifndef
EncodedFrame_h_
#
define
EncodedFrame_h_
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
EncodedFrame
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
EncodedFrame
)
public
:
EncodedFrame
(
)
:
mTimeStamp
(
0
)
mDuration
(
0
)
mFrameType
(
UNKNOWN
)
{
}
enum
FrameType
{
VP8_I_FRAME
VP8_P_FRAME
OPUS_AUDIO_FRAME
UNKNOWN
}
;
void
SwapInFrameData
(
nsTArray
<
uint8_t
>
&
aData
)
{
mFrameData
.
SwapElements
(
aData
)
;
}
nsresult
SwapOutFrameData
(
nsTArray
<
uint8_t
>
&
aData
)
{
if
(
mFrameType
!
=
UNKNOWN
)
{
mFrameData
.
SwapElements
(
aData
)
;
mFrameType
=
UNKNOWN
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
const
nsTArray
<
uint8_t
>
&
GetFrameData
(
)
const
{
return
mFrameData
;
}
uint64_t
GetTimeStamp
(
)
const
{
return
mTimeStamp
;
}
void
SetTimeStamp
(
uint64_t
aTimeStamp
)
{
mTimeStamp
=
aTimeStamp
;
}
uint64_t
GetDuration
(
)
const
{
return
mDuration
;
}
void
SetDuration
(
uint64_t
aDuration
)
{
mDuration
=
aDuration
;
}
FrameType
GetFrameType
(
)
const
{
return
mFrameType
;
}
void
SetFrameType
(
FrameType
aFrameType
)
{
mFrameType
=
aFrameType
;
}
private
:
~
EncodedFrame
(
)
{
}
nsTArray
<
uint8_t
>
mFrameData
;
uint64_t
mTimeStamp
;
uint64_t
mDuration
;
FrameType
mFrameType
;
}
;
}
#
endif
