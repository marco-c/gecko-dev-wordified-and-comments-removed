#
ifndef
EncodedFrame_h_
#
define
EncodedFrame_h_
#
include
"
nsISupportsImpl
.
h
"
#
include
"
VideoUtils
.
h
"
namespace
mozilla
{
class
EncodedFrame
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
EncodedFrame
)
public
:
EncodedFrame
(
)
:
mTime
(
0
)
mDuration
(
0
)
mFrameType
(
UNKNOWN
)
{
}
enum
FrameType
{
VP8_I_FRAME
VP8_P_FRAME
OPUS_AUDIO_FRAME
UNKNOWN
}
;
void
SwapInFrameData
(
nsTArray
<
uint8_t
>
&
aData
)
{
mFrameData
.
SwapElements
(
aData
)
;
}
nsresult
SwapOutFrameData
(
nsTArray
<
uint8_t
>
&
aData
)
{
if
(
mFrameType
!
=
UNKNOWN
)
{
mFrameData
.
SwapElements
(
aData
)
;
mFrameType
=
UNKNOWN
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
const
nsTArray
<
uint8_t
>
&
GetFrameData
(
)
const
{
return
mFrameData
;
}
uint64_t
mTime
;
uint64_t
mDuration
;
FrameType
mFrameType
;
uint64_t
GetEndTime
(
)
const
{
MOZ_ASSERT
(
mFrameType
=
=
OPUS_AUDIO_FRAME
|
|
mFrameType
=
=
VP8_I_FRAME
|
|
mFrameType
=
=
VP8_P_FRAME
)
;
if
(
mFrameType
=
=
OPUS_AUDIO_FRAME
)
{
return
mTime
+
FramesToUsecs
(
mDuration
48000
)
.
value
(
)
;
}
else
{
return
mTime
+
mDuration
;
}
}
private
:
~
EncodedFrame
(
)
=
default
;
nsTArray
<
uint8_t
>
mFrameData
;
}
;
}
#
endif
