#
ifndef
VideoFrameConverter_h
#
define
VideoFrameConverter_h
#
include
"
ImageContainer
.
h
"
#
include
"
ImageToI420
.
h
"
#
include
"
MediaTimer
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmapBinding
.
h
"
#
include
"
mozilla
/
dom
/
ImageUtils
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
common_video
/
include
/
video_frame_buffer
.
h
"
#
include
"
rtc_base
/
keep_ref_until_done
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
define
CONVERTER_BUFFER_POOL_SIZE
5
namespace
mozilla
{
static
mozilla
:
:
LazyLogModule
gVideoFrameConverterLog
(
"
VideoFrameConverter
"
)
;
class
VideoConverterListener
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoConverterListener
)
virtual
void
OnVideoFrameConverted
(
const
webrtc
:
:
VideoFrame
&
aVideoFrame
)
=
0
;
protected
:
virtual
~
VideoConverterListener
(
)
=
default
;
}
;
class
VideoFrameConverter
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoFrameConverter
)
VideoFrameConverter
(
)
:
mTaskQueue
(
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
WEBRTC_WORKER
)
"
VideoFrameConverter
"
)
)
mPacingTimer
(
new
MediaTimer
(
)
)
mBufferPool
(
false
CONVERTER_BUFFER_POOL_SIZE
)
mActive
(
false
)
mTrackEnabled
(
true
)
{
MOZ_COUNT_CTOR
(
VideoFrameConverter
)
;
}
void
QueueVideoChunk
(
const
VideoChunk
&
aChunk
bool
aForceBlack
)
{
gfx
:
:
IntSize
size
=
aChunk
.
mFrame
.
GetIntrinsicSize
(
)
;
if
(
size
.
width
=
=
0
|
|
size
.
height
=
=
0
)
{
return
;
}
TimeStamp
t
=
aChunk
.
mTimeStamp
;
MOZ_ASSERT
(
!
t
.
IsNull
(
)
)
;
if
(
!
mLastFrameQueuedForPacing
.
IsNull
(
)
&
&
t
<
mLastFrameQueuedForPacing
)
{
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
Clearing
pacer
because
of
source
reset
(
%
.
3f
)
"
(
mLastFrameQueuedForPacing
-
t
)
.
ToSeconds
(
)
)
)
;
mPacingTimer
-
>
Cancel
(
)
;
}
mLastFrameQueuedForPacing
=
t
;
mPacingTimer
-
>
WaitUntil
(
t
__func__
)
-
>
Then
(
mTaskQueue
__func__
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
image
=
RefPtr
<
layers
:
:
Image
>
(
aChunk
.
mFrame
.
GetImage
(
)
)
t
size
aForceBlack
]
(
)
mutable
{
QueueForProcessing
(
std
:
:
move
(
image
)
t
size
aForceBlack
)
;
}
[
]
{
}
)
;
}
void
SetActive
(
bool
aActive
)
{
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
aActive
]
{
if
(
mActive
=
=
aActive
)
{
return
;
}
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
VideoFrameConverter
is
now
%
s
"
aActive
?
"
active
"
:
"
inactive
"
)
)
;
mActive
=
aActive
;
if
(
aActive
&
&
mLastFrameQueuedForProcessing
.
Serial
(
)
!
=
-
2
)
{
FrameToProcess
f
=
mLastFrameQueuedForProcessing
;
f
.
mTime
=
TimeStamp
:
:
Now
(
)
;
ProcessVideoFrame
(
std
:
:
move
(
f
)
)
;
}
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
SetTrackEnabled
(
bool
aTrackEnabled
)
{
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
aTrackEnabled
]
{
if
(
mTrackEnabled
=
=
aTrackEnabled
)
{
return
;
}
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
VideoFrameConverter
Track
is
now
%
s
"
aTrackEnabled
?
"
enabled
"
:
"
disabled
"
)
)
;
mTrackEnabled
=
aTrackEnabled
;
if
(
!
aTrackEnabled
)
{
if
(
mLastFrameQueuedForProcessing
.
Serial
(
)
!
=
-
2
)
{
QueueForProcessing
(
nullptr
TimeStamp
:
:
Now
(
)
mLastFrameQueuedForProcessing
.
mSize
true
)
;
}
else
{
QueueForProcessing
(
nullptr
TimeStamp
:
:
Now
(
)
gfx
:
:
IntSize
(
640
480
)
true
)
;
}
}
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
AddListener
(
const
RefPtr
<
VideoConverterListener
>
&
aListener
)
{
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
VideoFrameConverter
:
:
AddListener
"
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
aListener
]
{
MOZ_ASSERT
(
!
mListeners
.
Contains
(
aListener
)
)
;
mListeners
.
AppendElement
(
aListener
)
;
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
RemoveListener
(
const
RefPtr
<
VideoConverterListener
>
&
aListener
)
{
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
VideoFrameConverter
:
:
RemoveListener
"
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
aListener
]
{
mListeners
.
RemoveElement
(
aListener
)
;
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
Shutdown
(
)
{
mPacingTimer
-
>
Cancel
(
)
;
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
VideoFrameConverter
:
:
Shutdown
"
[
self
=
RefPtr
<
VideoFrameConverter
>
(
this
)
this
]
{
if
(
mSameFrameTimer
)
{
mSameFrameTimer
-
>
Cancel
(
)
;
}
mListeners
.
Clear
(
)
;
mBufferPool
.
Release
(
)
;
mLastFrameQueuedForProcessing
=
FrameToProcess
(
)
;
mLastFrameConverted
=
nullptr
;
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
protected
:
struct
FrameToProcess
{
RefPtr
<
layers
:
:
Image
>
mImage
;
TimeStamp
mTime
=
TimeStamp
:
:
Now
(
)
;
gfx
:
:
IntSize
mSize
;
bool
mForceBlack
=
false
;
int32_t
Serial
(
)
{
if
(
mForceBlack
)
{
return
-
1
;
}
if
(
!
mImage
)
{
return
-
2
;
}
return
mImage
-
>
GetSerial
(
)
;
}
}
;
MOZ_COUNTED_DTOR_VIRTUAL
(
VideoFrameConverter
)
static
void
SameFrameTick
(
nsITimer
*
aTimer
void
*
aClosure
)
{
MOZ_ASSERT
(
aClosure
)
;
VideoFrameConverter
*
self
=
static_cast
<
VideoFrameConverter
*
>
(
aClosure
)
;
MOZ_ASSERT
(
self
-
>
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
!
self
-
>
mLastFrameConverted
)
{
return
;
}
self
-
>
mLastFrameConverted
-
>
set_timestamp_us
(
webrtc
:
:
Clock
:
:
GetRealTimeClock
(
)
-
>
TimeInMicroseconds
(
)
)
;
for
(
RefPtr
<
VideoConverterListener
>
&
listener
:
self
-
>
mListeners
)
{
listener
-
>
OnVideoFrameConverted
(
*
self
-
>
mLastFrameConverted
)
;
}
}
void
VideoFrameConverted
(
const
webrtc
:
:
VideoFrame
&
aVideoFrame
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
mSameFrameTimer
)
{
mSameFrameTimer
-
>
Cancel
(
)
;
}
const
int
sameFrameIntervalInMs
=
1000
;
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mSameFrameTimer
)
&
SameFrameTick
this
sameFrameIntervalInMs
nsITimer
:
:
TYPE_REPEATING_SLACK
"
VideoFrameConverter
:
:
mSameFrameTimer
"
mTaskQueue
)
;
mLastFrameConverted
=
MakeUnique
<
webrtc
:
:
VideoFrame
>
(
aVideoFrame
)
;
for
(
RefPtr
<
VideoConverterListener
>
&
listener
:
mListeners
)
{
listener
-
>
OnVideoFrameConverted
(
aVideoFrame
)
;
}
}
void
QueueForProcessing
(
RefPtr
<
layers
:
:
Image
>
aImage
TimeStamp
aTime
gfx
:
:
IntSize
aSize
bool
aForceBlack
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
FrameToProcess
frame
{
std
:
:
move
(
aImage
)
aTime
aSize
aForceBlack
|
|
!
mTrackEnabled
}
;
if
(
frame
.
Serial
(
)
=
=
mLastFrameQueuedForProcessing
.
Serial
(
)
)
{
return
;
}
if
(
frame
.
mTime
<
=
mLastFrameQueuedForProcessing
.
mTime
)
{
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
Dropping
a
frame
because
time
did
not
progress
(
%
.
3f
)
"
(
mLastFrameQueuedForProcessing
.
mTime
-
frame
.
mTime
)
.
ToSeconds
(
)
)
)
;
return
;
}
mLastFrameQueuedForProcessing
=
std
:
:
move
(
frame
)
;
if
(
!
mActive
)
{
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
Ignoring
a
frame
because
we
'
re
inactive
"
)
)
;
return
;
}
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NewRunnableMethod
<
StoreCopyPassByLRef
<
FrameToProcess
>
>
(
"
VideoFrameConverter
:
:
ProcessVideoFrame
"
this
&
VideoFrameConverter
:
:
ProcessVideoFrame
mLastFrameQueuedForProcessing
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
ProcessVideoFrame
(
const
FrameToProcess
&
aFrame
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
aFrame
.
mTime
<
mLastFrameQueuedForProcessing
.
mTime
)
{
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Debug
(
"
Dropping
a
frame
that
is
%
.
3f
seconds
behind
latest
"
(
mLastFrameQueuedForProcessing
.
mTime
-
aFrame
.
mTime
)
.
ToSeconds
(
)
)
)
;
return
;
}
int64_t
now
=
webrtc
:
:
Clock
:
:
GetRealTimeClock
(
)
-
>
TimeInMilliseconds
(
)
;
if
(
aFrame
.
mForceBlack
)
{
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420Buffer
>
buffer
=
mBufferPool
.
CreateBuffer
(
aFrame
.
mSize
.
width
aFrame
.
mSize
.
height
)
;
if
(
!
buffer
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Buffers
not
leaving
scope
except
for
"
"
reconfig
should
never
leak
"
)
;
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Warning
(
"
Creating
a
buffer
for
a
black
video
frame
failed
"
)
)
;
return
;
}
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Verbose
(
"
Sending
a
black
video
frame
"
)
)
;
webrtc
:
:
I420Buffer
:
:
SetBlack
(
buffer
)
;
webrtc
:
:
VideoFrame
frame
(
buffer
0
now
webrtc
:
:
kVideoRotation_0
)
;
VideoFrameConverted
(
frame
)
;
return
;
}
if
(
!
aFrame
.
mImage
)
{
return
;
}
MOZ_ASSERT
(
aFrame
.
mImage
-
>
GetSize
(
)
=
=
aFrame
.
mSize
)
;
if
(
layers
:
:
PlanarYCbCrImage
*
image
=
aFrame
.
mImage
-
>
AsPlanarYCbCrImage
(
)
)
{
dom
:
:
ImageUtils
utils
(
image
)
;
if
(
utils
.
GetFormat
(
)
=
=
dom
:
:
ImageBitmapFormat
:
:
YUV420P
&
&
image
-
>
GetData
(
)
)
{
const
layers
:
:
PlanarYCbCrData
*
data
=
image
-
>
GetData
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420BufferInterface
>
video_frame_buffer
=
webrtc
:
:
WrapI420Buffer
(
aFrame
.
mImage
-
>
GetSize
(
)
.
width
aFrame
.
mImage
-
>
GetSize
(
)
.
height
data
-
>
mYChannel
data
-
>
mYStride
data
-
>
mCbChannel
data
-
>
mCbCrStride
data
-
>
mCrChannel
data
-
>
mCbCrStride
rtc
:
:
KeepRefUntilDone
(
image
)
)
;
webrtc
:
:
VideoFrame
i420_frame
(
video_frame_buffer
0
now
webrtc
:
:
kVideoRotation_0
)
;
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Verbose
(
"
Sending
an
I420
video
frame
"
)
)
;
VideoFrameConverted
(
i420_frame
)
;
return
;
}
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420Buffer
>
buffer
=
mBufferPool
.
CreateBuffer
(
aFrame
.
mSize
.
width
aFrame
.
mSize
.
height
)
;
if
(
!
buffer
)
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
+
+
mFramesDropped
;
#
endif
MOZ_DIAGNOSTIC_ASSERT
(
mFramesDropped
<
=
100
"
Buffers
must
be
leaking
"
)
;
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Warning
(
"
Creating
a
buffer
failed
"
)
)
;
return
;
}
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
mFramesDropped
=
0
;
#
endif
nsresult
rv
=
ConvertToI420
(
aFrame
.
mImage
buffer
-
>
MutableDataY
(
)
buffer
-
>
StrideY
(
)
buffer
-
>
MutableDataU
(
)
buffer
-
>
StrideU
(
)
buffer
-
>
MutableDataV
(
)
buffer
-
>
StrideV
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_LOG
(
gVideoFrameConverterLog
LogLevel
:
:
Warning
(
"
Image
conversion
failed
"
)
)
;
return
;
}
webrtc
:
:
VideoFrame
frame
(
buffer
0
now
webrtc
:
:
kVideoRotation_0
)
;
VideoFrameConverted
(
frame
)
;
}
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
const
RefPtr
<
MediaTimer
>
mPacingTimer
;
TimeStamp
mLastFrameQueuedForPacing
;
webrtc
:
:
I420BufferPool
mBufferPool
;
nsCOMPtr
<
nsITimer
>
mSameFrameTimer
;
FrameToProcess
mLastFrameQueuedForProcessing
;
UniquePtr
<
webrtc
:
:
VideoFrame
>
mLastFrameConverted
;
bool
mActive
;
bool
mTrackEnabled
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
size_t
mFramesDropped
=
0
;
#
endif
nsTArray
<
RefPtr
<
VideoConverterListener
>
>
mListeners
;
}
;
}
#
endif
