#
ifndef
DriftCompensation_h_
#
define
DriftCompensation_h_
#
include
"
MediaSegment
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
static
LazyLogModule
gDriftCompensatorLog
(
"
DriftCompensator
"
)
;
#
define
LOG
(
type
.
.
.
)
MOZ_LOG
(
gDriftCompensatorLog
type
(
__VA_ARGS__
)
)
class
DriftCompensator
{
const
RefPtr
<
nsIEventTarget
>
mVideoThread
;
const
TrackRate
mAudioRate
;
Atomic
<
StreamTime
>
mAudioSamples
{
0
}
;
TimeStamp
mAudioStartTime
;
void
SetAudioStartTime
(
TimeStamp
aTime
)
{
MOZ_ASSERT
(
mVideoThread
-
>
IsOnCurrentThread
(
)
)
;
MOZ_ASSERT
(
mAudioStartTime
.
IsNull
(
)
)
;
mAudioStartTime
=
aTime
;
}
protected
:
virtual
~
DriftCompensator
(
)
=
default
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DriftCompensator
)
DriftCompensator
(
RefPtr
<
nsIEventTarget
>
aVideoThread
TrackRate
aAudioRate
)
:
mVideoThread
(
std
:
:
move
(
aVideoThread
)
)
mAudioRate
(
aAudioRate
)
{
MOZ_ASSERT
(
mAudioRate
>
0
)
;
}
void
NotifyAudioStart
(
TimeStamp
aStart
)
{
MOZ_ASSERT
(
mAudioSamples
=
=
0
)
;
LOG
(
LogLevel
:
:
Info
"
DriftCompensator
%
p
at
rate
%
d
started
"
this
mAudioRate
)
;
nsresult
rv
=
mVideoThread
-
>
Dispatch
(
NewRunnableMethod
<
TimeStamp
>
(
"
DriftCompensator
:
:
SetAudioStartTime
"
this
&
DriftCompensator
:
:
SetAudioStartTime
aStart
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
void
NotifyAudio
(
StreamTime
aSamples
)
{
MOZ_ASSERT
(
aSamples
>
0
)
;
mAudioSamples
+
=
aSamples
;
LOG
(
LogLevel
:
:
Verbose
"
DriftCompensator
%
p
Processed
another
%
"
PRId64
"
samples
;
now
%
.
3fs
audio
"
this
aSamples
static_cast
<
double
>
(
mAudioSamples
)
/
mAudioRate
)
;
}
virtual
TimeStamp
GetVideoTime
(
TimeStamp
aNow
TimeStamp
aTime
)
{
MOZ_ASSERT
(
mVideoThread
-
>
IsOnCurrentThread
(
)
)
;
StreamTime
samples
=
mAudioSamples
;
if
(
samples
/
mAudioRate
<
10
)
{
LOG
(
LogLevel
:
:
Debug
"
DriftCompensator
%
p
%
"
PRId64
"
ms
so
far
;
ignoring
"
this
samples
*
1000
/
mAudioRate
)
;
return
aTime
;
}
int64_t
videoScaleUs
=
(
aNow
-
mAudioStartTime
)
.
ToMicroseconds
(
)
;
int64_t
audioScaleUs
=
FramesToUsecs
(
samples
mAudioRate
)
.
value
(
)
;
int64_t
videoDurationUs
=
(
aTime
-
mAudioStartTime
)
.
ToMicroseconds
(
)
;
if
(
videoScaleUs
=
=
0
)
{
videoScaleUs
=
audioScaleUs
;
}
TimeStamp
reclocked
=
mAudioStartTime
+
TimeDuration
:
:
FromMicroseconds
(
SaferMultDiv
(
videoDurationUs
audioScaleUs
videoScaleUs
)
.
value
(
)
)
;
LOG
(
LogLevel
:
:
Debug
"
DriftCompensator
%
p
GetVideoTime
v
-
now
:
%
.
3fs
a
-
now
:
%
.
3fs
;
%
.
3fs
"
"
-
>
%
.
3fs
(
d
%
.
3fms
)
"
this
(
aNow
-
mAudioStartTime
)
.
ToSeconds
(
)
static_cast
<
double
>
(
audioScaleUs
)
/
1000000
.
0
(
aTime
-
mAudioStartTime
)
.
ToSeconds
(
)
(
reclocked
-
mAudioStartTime
)
.
ToSeconds
(
)
(
reclocked
-
aTime
)
.
ToMilliseconds
(
)
)
;
return
reclocked
;
}
}
;
#
undef
LOG
}
#
endif
