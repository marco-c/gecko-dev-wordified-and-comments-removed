#
ifndef
DOM_MEDIA_EXTERNALENGINESTATEMACHINE_H_
#
define
DOM_MEDIA_EXTERNALENGINESTATEMACHINE_H_
#
include
"
MediaDecoderStateMachineBase
.
h
"
#
include
"
SeekJob
.
h
"
namespace
mozilla
{
class
ExternalPlaybackEngine
;
enum
class
ExternalEngineEvent
{
LoadedMetaData
LoadedFirstFrame
LoadedData
Waiting
Playing
Seeked
BufferingStarted
BufferingEnded
Timeupdate
Ended
RequestForAudio
RequestForVideo
AudioEnough
VideoEnough
}
;
const
char
*
ExternalEngineEventToStr
(
ExternalEngineEvent
aEvent
)
;
DDLoggedTypeDeclName
(
ExternalEngineStateMachine
)
;
class
ExternalEngineStateMachine
final
:
public
MediaDecoderStateMachineBase
public
DecoderDoctorLifeLogger
<
ExternalEngineStateMachine
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ExternalEngineStateMachine
override
)
ExternalEngineStateMachine
(
MediaDecoder
*
aDecoder
MediaFormatReader
*
aReader
)
;
RefPtr
<
GenericPromise
>
InvokeSetSink
(
const
RefPtr
<
AudioDeviceInfo
>
&
aSink
)
override
;
size_t
SizeOfVideoQueue
(
)
const
override
{
return
0
;
}
size_t
SizeOfAudioQueue
(
)
const
override
{
return
0
;
}
void
SetVideoDecodeMode
(
VideoDecodeMode
aMode
)
override
{
}
void
InvokeSuspendMediaSink
(
)
override
{
}
void
InvokeResumeMediaSink
(
)
override
{
}
RefPtr
<
GenericPromise
>
RequestDebugInfo
(
dom
:
:
MediaDecoderStateMachineDebugInfo
&
aInfo
)
override
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
void
NotifyEvent
(
ExternalEngineEvent
aEvent
)
{
Unused
<
<
OwnerThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
ExternalEngineStateMachine
:
:
NotifyEvent
"
[
self
=
RefPtr
{
this
}
aEvent
]
{
self
-
>
NotifyEventInternal
(
aEvent
)
;
}
)
)
;
}
const
char
*
GetStateStr
(
)
const
;
private
:
~
ExternalEngineStateMachine
(
)
=
default
;
void
AssertOnTaskQueue
(
)
const
{
MOZ_ASSERT
(
OnTaskQueue
(
)
)
;
}
enum
class
State
{
InitEngine
WaitingMetadata
RunningEngine
SeekingData
ShutdownEngine
}
mState
;
void
NotifyEventInternal
(
ExternalEngineEvent
aEvent
)
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
RefPtr
<
ShutdownPromise
>
ShutdownInternal
(
)
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
BufferedRangeUpdated
(
)
override
;
void
VolumeChanged
(
)
override
;
void
PreservesPitchChanged
(
)
override
;
void
PlayStateChanged
(
)
override
;
void
LoopingChanged
(
)
override
;
void
SetIsLiveStream
(
bool
aIsLiveStream
)
override
{
}
void
SetCanPlayThrough
(
bool
aCanPlayThrough
)
override
{
}
void
SetFragmentEndTime
(
const
media
:
:
TimeUnit
&
aFragmentEndTime
)
override
{
}
void
OnEngineInitSuccess
(
)
;
void
OnEngineInitFailure
(
)
;
void
OnMetadataRead
(
MetadataHolder
&
&
aMetadata
)
;
void
OnMetadataNotRead
(
const
MediaResult
&
aError
)
;
void
OnLoadedFirstFrame
(
)
;
void
OnLoadedData
(
)
;
void
OnWaiting
(
)
;
void
OnPlaying
(
)
;
void
OnSeeked
(
)
;
void
CheckIfSeekCompleted
(
)
;
void
OnBufferingStarted
(
)
;
void
OnBufferingEnded
(
)
;
void
OnTimeupdate
(
)
;
void
OnEnded
(
)
;
void
OnRequestAudio
(
)
;
void
OnRequestVideo
(
)
;
void
ChangeStateTo
(
State
aState
)
;
void
ResetDecode
(
)
;
void
EndOfStream
(
MediaData
:
:
Type
aType
)
;
void
WaitForData
(
MediaData
:
:
Type
aType
)
;
void
StartRunningEngine
(
)
;
void
RunningEngineUpdate
(
MediaData
:
:
Type
aType
)
;
static
const
char
*
StateToStr
(
State
aState
)
;
RefPtr
<
MediaDecoder
:
:
SeekPromise
>
Seek
(
const
SeekTarget
&
aTarget
)
override
;
void
SeekReader
(
)
;
void
OnSeekResolved
(
const
media
:
:
TimeUnit
&
aUnit
)
;
void
OnSeekRejected
(
const
SeekRejectValue
&
aReject
)
;
void
MaybeFinishWaitForData
(
)
;
UniquePtr
<
ExternalPlaybackEngine
>
mEngine
;
MozPromiseRequestHolder
<
GenericNonExclusivePromise
>
mEngineInitRequest
;
MozPromiseRequestHolder
<
MediaFormatReader
:
:
MetadataPromise
>
mMetadataRequest
;
MozPromiseRequestHolder
<
MediaFormatReader
:
:
SeekPromise
>
mSeekRequest
;
Maybe
<
SeekJob
>
mSeekJob
;
bool
mWaitingEngineSeekedEvent
=
false
;
bool
mIsReaderSeekingCompleted
=
false
;
bool
mHasEnoughAudio
=
false
;
bool
mHasEnoughVideo
=
false
;
bool
mSentPlaybackEndedEvent
=
false
;
}
;
class
ExternalPlaybackEngine
{
public
:
explicit
ExternalPlaybackEngine
(
ExternalEngineStateMachine
*
aOwner
)
:
mOwner
(
aOwner
)
{
}
virtual
~
ExternalPlaybackEngine
(
)
=
default
;
virtual
RefPtr
<
GenericNonExclusivePromise
>
Init
(
bool
aShouldPreload
)
;
virtual
void
Play
(
)
=
0
;
virtual
void
Pause
(
)
=
0
;
virtual
void
Seek
(
const
media
:
:
TimeUnit
&
aTargetTime
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
virtual
void
SetPlaybackRate
(
double
aPlaybackRate
)
=
0
;
virtual
void
SetVolume
(
double
aVolume
)
=
0
;
virtual
void
SetLooping
(
bool
aLooping
)
;
virtual
void
SetPreservesPitch
(
bool
aPreservesPitch
)
=
0
;
virtual
media
:
:
TimeUnit
GetCurrentPosition
(
)
=
0
;
virtual
void
NotifyEndOfStream
(
TrackInfo
:
:
TrackType
aType
)
=
0
;
virtual
uint64_t
Id
(
)
const
=
0
;
virtual
void
SetMediaInfo
(
const
MediaInfo
&
aInfo
)
=
0
;
ExternalEngineStateMachine
*
const
MOZ_NON_OWNING_REF
mOwner
;
}
;
}
#
endif
