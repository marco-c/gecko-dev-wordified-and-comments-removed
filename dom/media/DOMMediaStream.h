#
ifndef
NSDOMMEDIASTREAM_H_
#
define
NSDOMMEDIASTREAM_H_
#
include
"
ImageContainer
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
PrincipalChangeObserver
.
h
"
#
ifdef
CurrentTime
#
undef
CurrentTime
#
endif
namespace
mozilla
{
class
DOMHwMediaStream
;
class
DOMLocalMediaStream
;
class
DOMMediaStream
;
class
MediaStream
;
class
MediaInputPort
;
class
MediaStreamDirectListener
;
class
MediaStreamGraph
;
class
ProcessedMediaStream
;
enum
class
BlockingMode
;
namespace
dom
{
class
AudioNode
;
class
HTMLCanvasElement
;
class
MediaStreamTrack
;
class
MediaStreamTrackSource
;
class
AudioStreamTrack
;
class
VideoStreamTrack
;
class
AudioTrack
;
class
VideoTrack
;
class
AudioTrackList
;
class
VideoTrackList
;
class
MediaTrackListListener
;
struct
MediaTrackConstraints
;
}
namespace
layers
{
class
ImageContainer
;
class
OverlayImage
;
}
namespace
media
{
template
<
typename
V
typename
E
>
class
Pledge
;
}
#
define
NS_DOMMEDIASTREAM_IID
\
{
0x8cb65468
0x66c0
0x444e
\
{
0x89
0x9f
0x89
0x1d
0x9e
0xd2
0xbe
0x7c
}
}
class
OnTracksAvailableCallback
{
public
:
virtual
~
OnTracksAvailableCallback
(
)
{
}
virtual
void
NotifyTracksAvailable
(
DOMMediaStream
*
aStream
)
=
0
;
}
;
class
MediaStreamTrackSourceGetter
:
public
nsISupports
{
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
MediaStreamTrackSourceGetter
)
public
:
MediaStreamTrackSourceGetter
(
)
{
MOZ_COUNT_CTOR
(
MediaStreamTrackSourceGetter
)
;
}
virtual
already_AddRefed
<
dom
:
:
MediaStreamTrackSource
>
GetMediaStreamTrackSource
(
TrackID
aInputTrackID
)
=
0
;
protected
:
virtual
~
MediaStreamTrackSourceGetter
(
)
{
MOZ_COUNT_DTOR
(
MediaStreamTrackSourceGetter
)
;
}
}
;
class
DOMMediaStream
:
public
DOMEventTargetHelper
public
dom
:
:
PrincipalChangeObserver
<
dom
:
:
MediaStreamTrack
>
{
friend
class
DOMLocalMediaStream
;
friend
class
dom
:
:
MediaStreamTrack
;
typedef
dom
:
:
MediaStreamTrack
MediaStreamTrack
;
typedef
dom
:
:
AudioStreamTrack
AudioStreamTrack
;
typedef
dom
:
:
VideoStreamTrack
VideoStreamTrack
;
typedef
dom
:
:
MediaStreamTrackSource
MediaStreamTrackSource
;
typedef
dom
:
:
AudioTrack
AudioTrack
;
typedef
dom
:
:
VideoTrack
VideoTrack
;
typedef
dom
:
:
AudioTrackList
AudioTrackList
;
typedef
dom
:
:
VideoTrackList
VideoTrackList
;
public
:
typedef
dom
:
:
MediaTrackConstraints
MediaTrackConstraints
;
class
TrackListener
{
public
:
virtual
~
TrackListener
(
)
{
}
virtual
void
NotifyTrackAdded
(
const
RefPtr
<
MediaStreamTrack
>
&
aTrack
)
{
}
;
virtual
void
NotifyTrackRemoved
(
const
RefPtr
<
MediaStreamTrack
>
&
aTrack
)
{
}
;
}
;
class
TrackPort
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
TrackPort
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
TrackPort
)
enum
class
InputPortOwnership
{
OWNED
=
1
EXTERNAL
}
;
TrackPort
(
MediaInputPort
*
aInputPort
MediaStreamTrack
*
aTrack
const
InputPortOwnership
aOwnership
)
;
protected
:
virtual
~
TrackPort
(
)
;
public
:
void
DestroyInputPort
(
)
;
MediaStream
*
GetSource
(
)
const
;
TrackID
GetSourceTrackId
(
)
const
;
MediaInputPort
*
GetInputPort
(
)
const
{
return
mInputPort
;
}
MediaStreamTrack
*
GetTrack
(
)
const
{
return
mTrack
;
}
already_AddRefed
<
media
:
:
Pledge
<
bool
nsresult
>
>
BlockSourceTrackId
(
TrackID
aTrackId
BlockingMode
aBlockingMode
)
;
private
:
RefPtr
<
MediaInputPort
>
mInputPort
;
RefPtr
<
MediaStreamTrack
>
mTrack
;
const
InputPortOwnership
mOwnership
;
}
;
DOMMediaStream
(
nsPIDOMWindowInner
*
aWindow
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_REALLY_FORWARD_NSIDOMEVENTTARGET
(
DOMEventTargetHelper
)
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DOMMediaStream
DOMEventTargetHelper
)
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_DOMMEDIASTREAM_IID
)
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
DOMMediaStream
>
Constructor
(
const
dom
:
:
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
DOMMediaStream
>
Constructor
(
const
dom
:
:
GlobalObject
&
aGlobal
const
DOMMediaStream
&
aStream
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
DOMMediaStream
>
Constructor
(
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
OwningNonNull
<
MediaStreamTrack
>
>
&
aTracks
ErrorResult
&
aRv
)
;
double
CurrentTime
(
)
;
void
GetId
(
nsAString
&
aID
)
const
;
void
GetAudioTracks
(
nsTArray
<
RefPtr
<
AudioStreamTrack
>
>
&
aTracks
)
const
;
void
GetVideoTracks
(
nsTArray
<
RefPtr
<
VideoStreamTrack
>
>
&
aTracks
)
const
;
void
GetTracks
(
nsTArray
<
RefPtr
<
MediaStreamTrack
>
>
&
aTracks
)
const
;
MediaStreamTrack
*
GetTrackById
(
const
nsAString
&
aId
)
const
;
void
AddTrack
(
MediaStreamTrack
&
aTrack
)
;
void
RemoveTrack
(
MediaStreamTrack
&
aTrack
)
;
already_AddRefed
<
DOMMediaStream
>
Clone
(
)
;
IMPL_EVENT_HANDLER
(
addtrack
)
enum
class
TrackForwardingOption
{
CURRENT
ALL
}
;
already_AddRefed
<
DOMMediaStream
>
CloneInternal
(
TrackForwardingOption
aForwarding
)
;
MediaStreamTrack
*
GetOwnedTrackById
(
const
nsAString
&
aId
)
;
bool
HasTrack
(
const
MediaStreamTrack
&
aTrack
)
const
;
bool
OwnsTrack
(
const
MediaStreamTrack
&
aTrack
)
const
;
MediaStreamTrack
*
FindOwnedDOMTrack
(
MediaStream
*
aInputStream
TrackID
aInputTrackID
TrackID
aTrackID
=
TRACK_ANY
)
const
;
TrackPort
*
FindOwnedTrackPort
(
const
MediaStreamTrack
&
aTrack
)
const
;
MediaStreamTrack
*
FindPlaybackDOMTrack
(
MediaStream
*
aInputStream
TrackID
aInputTrackID
)
const
;
TrackPort
*
FindPlaybackTrackPort
(
const
MediaStreamTrack
&
aTrack
)
const
;
MediaStream
*
GetInputStream
(
)
const
{
return
mInputStream
;
}
ProcessedMediaStream
*
GetOwnedStream
(
)
const
{
return
mOwnedStream
;
}
ProcessedMediaStream
*
GetPlaybackStream
(
)
const
{
return
mPlaybackStream
;
}
virtual
MediaStream
*
GetCameraStream
(
)
const
{
return
nullptr
;
}
bool
AddDirectListener
(
MediaStreamDirectListener
*
aListener
)
;
void
RemoveDirectListener
(
MediaStreamDirectListener
*
aListener
)
;
virtual
DOMLocalMediaStream
*
AsDOMLocalMediaStream
(
)
{
return
nullptr
;
}
virtual
DOMHwMediaStream
*
AsDOMHwMediaStream
(
)
{
return
nullptr
;
}
bool
IsFinished
(
)
;
nsIPrincipal
*
GetPrincipal
(
)
{
return
mPrincipal
;
}
nsIPrincipal
*
GetVideoPrincipal
(
)
{
return
mVideoPrincipal
;
}
void
PrincipalChanged
(
MediaStreamTrack
*
aTrack
)
override
;
bool
AddPrincipalChangeObserver
(
dom
:
:
PrincipalChangeObserver
<
DOMMediaStream
>
*
aObserver
)
;
bool
RemovePrincipalChangeObserver
(
dom
:
:
PrincipalChangeObserver
<
DOMMediaStream
>
*
aObserver
)
;
void
NotifyMediaStreamGraphShutdown
(
)
;
void
NotifyStreamFinished
(
)
;
void
AssignId
(
const
nsAString
&
aID
)
{
mID
=
aID
;
}
static
already_AddRefed
<
DOMMediaStream
>
CreateSourceStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
MediaStreamGraph
*
aGraph
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
=
nullptr
)
;
static
already_AddRefed
<
DOMMediaStream
>
CreateTrackUnionStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
MediaStreamGraph
*
aGraph
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
=
nullptr
)
;
static
already_AddRefed
<
DOMMediaStream
>
CreateAudioCaptureStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
MediaStreamGraph
*
aGraph
)
;
void
SetLogicalStreamStartTime
(
StreamTime
aTime
)
{
mLogicalStreamStartTime
=
aTime
;
}
MediaStreamTrack
*
CreateDOMTrack
(
TrackID
aTrackID
MediaSegment
:
:
Type
aType
MediaStreamTrackSource
*
aSource
)
;
already_AddRefed
<
MediaStreamTrack
>
CloneDOMTrack
(
MediaStreamTrack
&
aTrack
TrackID
aCloneTrackID
)
;
void
OnTracksAvailable
(
OnTracksAvailableCallback
*
aCallback
)
;
void
AddConsumerToKeepAlive
(
nsISupports
*
aConsumer
)
{
if
(
!
IsFinished
(
)
&
&
!
mNotifiedOfMediaStreamGraphShutdown
)
{
mConsumersToKeepAlive
.
AppendElement
(
aConsumer
)
;
}
}
void
RegisterTrackListener
(
TrackListener
*
aListener
)
;
void
UnregisterTrackListener
(
TrackListener
*
aListener
)
;
protected
:
virtual
~
DOMMediaStream
(
)
;
void
Destroy
(
)
;
void
InitSourceStream
(
MediaStreamGraph
*
aGraph
)
;
void
InitTrackUnionStream
(
MediaStreamGraph
*
aGraph
)
;
void
InitAudioCaptureStream
(
nsIPrincipal
*
aPrincipal
MediaStreamGraph
*
aGraph
)
;
void
InitInputStreamCommon
(
MediaStream
*
aStream
MediaStreamGraph
*
aGraph
)
;
void
InitOwnedStreamCommon
(
MediaStreamGraph
*
aGraph
)
;
void
InitPlaybackStreamCommon
(
MediaStreamGraph
*
aGraph
)
;
void
CheckTracksAvailable
(
)
;
void
NotifyTracksCreated
(
)
;
void
NotifyTrackAdded
(
const
RefPtr
<
MediaStreamTrack
>
&
aTrack
)
;
void
NotifyTrackRemoved
(
const
RefPtr
<
MediaStreamTrack
>
&
aTrack
)
;
nsresult
DispatchTrackEvent
(
const
nsAString
&
aName
const
RefPtr
<
MediaStreamTrack
>
&
aTrack
)
;
class
OwnedStreamListener
;
friend
class
OwnedStreamListener
;
class
PlaybackStreamListener
;
friend
class
PlaybackStreamListener
;
void
CreateAndAddPlaybackStreamListener
(
MediaStream
*
)
;
void
BlockPlaybackTrack
(
TrackPort
*
aTrack
)
;
void
NotifyPlaybackTrackBlocked
(
)
;
void
RecomputePrincipal
(
)
;
StreamTime
mLogicalStreamStartTime
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
MediaStream
*
mInputStream
;
ProcessedMediaStream
*
mOwnedStream
;
ProcessedMediaStream
*
mPlaybackStream
;
RefPtr
<
MediaInputPort
>
mOwnedPort
;
RefPtr
<
MediaInputPort
>
mPlaybackPort
;
AutoTArray
<
RefPtr
<
TrackPort
>
2
>
mOwnedTracks
;
AutoTArray
<
RefPtr
<
TrackPort
>
2
>
mTracks
;
size_t
mTracksPendingRemoval
;
RefPtr
<
MediaStreamTrackSourceGetter
>
mTrackSourceGetter
;
RefPtr
<
OwnedStreamListener
>
mOwnedListener
;
RefPtr
<
PlaybackStreamListener
>
mPlaybackListener
;
nsTArray
<
nsAutoPtr
<
OnTracksAvailableCallback
>
>
mRunOnTracksAvailable
;
bool
mTracksCreated
;
nsString
mID
;
nsTArray
<
nsCOMPtr
<
nsISupports
>
>
mConsumersToKeepAlive
;
bool
mNotifiedOfMediaStreamGraphShutdown
;
nsTArray
<
TrackListener
*
>
mTrackListeners
;
private
:
void
NotifyPrincipalChanged
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mVideoPrincipal
;
nsTArray
<
dom
:
:
PrincipalChangeObserver
<
DOMMediaStream
>
*
>
mPrincipalChangeObservers
;
CORSMode
mCORSMode
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DOMMediaStream
NS_DOMMEDIASTREAM_IID
)
#
define
NS_DOMLOCALMEDIASTREAM_IID
\
{
0xb1437260
0xec61
0x4dfa
\
{
0x92
0x54
0x04
0x44
0xe2
0xb5
0x94
0x9c
}
}
class
DOMLocalMediaStream
:
public
DOMMediaStream
{
public
:
explicit
DOMLocalMediaStream
(
nsPIDOMWindowInner
*
aWindow
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
)
:
DOMMediaStream
(
aWindow
aTrackSourceGetter
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_DOMLOCALMEDIASTREAM_IID
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Stop
(
)
;
static
already_AddRefed
<
DOMLocalMediaStream
>
CreateSourceStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
MediaStreamGraph
*
aGraph
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
=
nullptr
)
;
static
already_AddRefed
<
DOMLocalMediaStream
>
CreateTrackUnionStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
MediaStreamGraph
*
aGraph
MediaStreamTrackSourceGetter
*
aTrackSourceGetter
=
nullptr
)
;
protected
:
virtual
~
DOMLocalMediaStream
(
)
;
void
StopImpl
(
)
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DOMLocalMediaStream
NS_DOMLOCALMEDIASTREAM_IID
)
class
DOMAudioNodeMediaStream
:
public
DOMMediaStream
{
typedef
dom
:
:
AudioNode
AudioNode
;
public
:
DOMAudioNodeMediaStream
(
nsPIDOMWindowInner
*
aWindow
AudioNode
*
aNode
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DOMAudioNodeMediaStream
DOMMediaStream
)
static
already_AddRefed
<
DOMAudioNodeMediaStream
>
CreateTrackUnionStreamAsInput
(
nsPIDOMWindowInner
*
aWindow
AudioNode
*
aNode
MediaStreamGraph
*
aGraph
)
;
protected
:
~
DOMAudioNodeMediaStream
(
)
;
private
:
RefPtr
<
AudioNode
>
mStreamNode
;
}
;
class
DOMHwMediaStream
:
public
DOMLocalMediaStream
{
typedef
mozilla
:
:
gfx
:
:
IntSize
IntSize
;
typedef
layers
:
:
OverlayImage
OverlayImage
;
#
ifdef
MOZ_WIDGET_GONK
typedef
layers
:
:
OverlayImage
:
:
Data
Data
;
#
endif
public
:
explicit
DOMHwMediaStream
(
nsPIDOMWindowInner
*
aWindow
)
;
static
already_AddRefed
<
DOMHwMediaStream
>
CreateHwStream
(
nsPIDOMWindowInner
*
aWindow
OverlayImage
*
aImage
=
nullptr
)
;
virtual
DOMHwMediaStream
*
AsDOMHwMediaStream
(
)
override
{
return
this
;
}
int32_t
RequestOverlayId
(
)
;
void
SetOverlayId
(
int32_t
aOverlayId
)
;
void
SetImageSize
(
uint32_t
width
uint32_t
height
)
;
void
SetOverlayImage
(
OverlayImage
*
aImage
)
;
protected
:
~
DOMHwMediaStream
(
)
;
private
:
void
Init
(
MediaStream
*
aStream
OverlayImage
*
aImage
)
;
#
ifdef
MOZ_WIDGET_GONK
const
int
DEFAULT_IMAGE_ID
=
0x01
;
const
int
DEFAULT_IMAGE_WIDTH
=
400
;
const
int
DEFAULT_IMAGE_HEIGHT
=
300
;
RefPtr
<
OverlayImage
>
mOverlayImage
;
PrincipalHandle
mPrincipalHandle
;
#
endif
}
;
}
#
endif
