#
include
"
AnimValuesStyleRule
.
h
"
#
include
"
nsRuleData
.
h
"
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
AnimValuesStyleRule
nsIStyleRule
)
void
AnimValuesStyleRule
:
:
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
{
nsStyleContext
*
contextParent
=
aRuleData
-
>
mStyleContext
-
>
GetParent
(
)
;
if
(
contextParent
&
&
contextParent
-
>
HasPseudoElementData
(
)
)
{
aRuleData
-
>
mConditions
.
SetUncacheable
(
)
;
return
;
}
for
(
uint32_t
i
=
0
i_end
=
mPropertyValuePairs
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
PropertyStyleAnimationValuePair
&
pair
=
mPropertyValuePairs
[
i
]
;
if
(
aRuleData
-
>
mSIDs
&
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
pair
.
mProperty
]
)
)
{
nsCSSValue
*
prop
=
aRuleData
-
>
ValueFor
(
pair
.
mProperty
)
;
if
(
prop
-
>
GetUnit
(
)
=
=
eCSSUnit_Null
)
{
DebugOnly
<
bool
>
ok
=
StyleAnimationValue
:
:
UncomputeValue
(
pair
.
mProperty
pair
.
mValue
*
prop
)
;
MOZ_ASSERT
(
ok
"
could
not
store
computed
value
"
)
;
}
}
}
}
bool
AnimValuesStyleRule
:
:
MightMapInheritedStyleData
(
)
{
return
mStyleBits
&
NS_STYLE_INHERITED_STRUCT_MASK
;
}
bool
AnimValuesStyleRule
:
:
GetDiscretelyAnimatedCSSValue
(
nsCSSPropertyID
aProperty
nsCSSValue
*
aValue
)
{
MOZ_ASSERT
(
false
"
GetDiscretelyAnimatedCSSValue
is
not
implemented
yet
"
)
;
return
false
;
}
#
ifdef
DEBUG
void
AnimValuesStyleRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
index
=
aIndent
;
-
-
index
>
=
0
;
)
{
str
.
AppendLiteral
(
"
"
)
;
}
str
.
AppendLiteral
(
"
[
anim
values
]
{
"
)
;
for
(
uint32_t
i
=
0
i_end
=
mPropertyValuePairs
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
const
PropertyStyleAnimationValuePair
&
pair
=
mPropertyValuePairs
[
i
]
;
str
.
Append
(
nsCSSProps
:
:
GetStringValue
(
pair
.
mProperty
)
)
;
str
.
AppendLiteral
(
"
:
"
)
;
nsAutoString
value
;
Unused
<
<
StyleAnimationValue
:
:
UncomputeValue
(
pair
.
mProperty
pair
.
mValue
value
)
;
AppendUTF16toUTF8
(
value
str
)
;
str
.
AppendLiteral
(
"
;
"
)
;
}
str
.
AppendLiteral
(
"
}
\
n
"
)
;
fprintf_stderr
(
out
"
%
s
"
str
.
get
(
)
)
;
}
#
endif
}
