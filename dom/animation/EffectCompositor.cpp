#
include
"
EffectCompositor
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
EffectSet
.
h
"
#
include
"
mozilla
/
LayerAnimationInfo
.
h
"
#
include
"
AnimationCommon
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsCSSPropertySet
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsRuleNode
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTransitionManager
.
h
"
using
mozilla
:
:
dom
:
:
Animation
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
dom
:
:
KeyframeEffectReadOnly
;
namespace
mozilla
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
EffectCompositor
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
EffectCompositor
)
for
(
auto
&
elementSet
:
tmp
-
>
mElementsToRestyle
)
{
elementSet
.
Clear
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
EffectCompositor
)
for
(
auto
&
elementSet
:
tmp
-
>
mElementsToRestyle
)
{
for
(
auto
iter
=
elementSet
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CycleCollectionNoteChild
(
cb
iter
.
Key
(
)
.
mElement
"
EffectCompositor
:
:
mElementsToRestyle
[
]
"
cb
.
Flags
(
)
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
EffectCompositor
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
EffectCompositor
Release
)
bool
FindAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
*
aMatches
)
{
MOZ_ASSERT
(
!
aMatches
|
|
aMatches
-
>
IsEmpty
(
)
"
Matches
array
if
provided
should
be
empty
"
)
;
EffectSet
*
effects
=
EffectSet
:
:
GetEffectSet
(
aFrame
)
;
if
(
!
effects
|
|
effects
-
>
IsEmpty
(
)
)
{
return
false
;
}
if
(
aFrame
-
>
RefusedAsyncAnimation
(
)
)
{
return
false
;
}
Maybe
<
Pair
<
dom
:
:
Element
*
nsCSSPseudoElements
:
:
Type
>
>
pseudoElement
=
EffectCompositor
:
:
GetAnimationElementAndPseudoForFrame
(
aFrame
)
;
if
(
pseudoElement
)
{
EffectCompositor
:
:
MaybeUpdateCascadeResults
(
pseudoElement
-
>
first
(
)
pseudoElement
-
>
second
(
)
aFrame
-
>
StyleContext
(
)
)
;
}
if
(
!
nsLayoutUtils
:
:
AreAsyncAnimationsEnabled
(
)
)
{
if
(
nsLayoutUtils
:
:
IsAnimationLoggingEnabled
(
)
)
{
nsCString
message
;
message
.
AppendLiteral
(
"
Performance
warning
:
Async
animations
are
"
"
disabled
"
)
;
AnimationUtils
:
:
LogAsyncAnimationFailure
(
message
)
;
}
return
false
;
}
bool
foundSome
=
false
;
for
(
KeyframeEffectReadOnly
*
effect
:
*
effects
)
{
MOZ_ASSERT
(
effect
&
&
effect
-
>
GetAnimation
(
)
)
;
Animation
*
animation
=
effect
-
>
GetAnimation
(
)
;
if
(
!
animation
-
>
IsPlaying
(
)
)
{
continue
;
}
if
(
effect
-
>
ShouldBlockCompositorAnimations
(
aFrame
)
)
{
if
(
aMatches
)
{
aMatches
-
>
Clear
(
)
;
}
return
false
;
}
if
(
!
effect
-
>
HasAnimationOfProperty
(
aProperty
)
)
{
continue
;
}
if
(
aMatches
)
{
aMatches
-
>
AppendElement
(
animation
)
;
}
foundSome
=
true
;
}
MOZ_ASSERT
(
!
foundSome
|
|
!
aMatches
|
|
!
aMatches
-
>
IsEmpty
(
)
"
If
return
value
is
true
matches
array
should
be
non
-
empty
"
)
;
return
foundSome
;
}
bool
EffectCompositor
:
:
HasAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
{
return
FindAnimationsForCompositor
(
aFrame
aProperty
nullptr
)
;
}
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
EffectCompositor
:
:
GetAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
{
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
result
;
#
ifdef
DEBUG
bool
foundSome
=
#
endif
FindAnimationsForCompositor
(
aFrame
aProperty
&
result
)
;
MOZ_ASSERT
(
!
foundSome
|
|
!
result
.
IsEmpty
(
)
"
If
return
value
is
true
matches
array
should
be
non
-
empty
"
)
;
return
result
;
}
void
EffectCompositor
:
:
MaybeUpdateCascadeResults
(
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
{
EffectSet
*
effects
=
EffectSet
:
:
GetEffectSet
(
aElement
aPseudoType
)
;
if
(
!
effects
|
|
!
effects
-
>
CascadeNeedsUpdate
(
)
)
{
return
;
}
UpdateCascadeResults
(
*
effects
aElement
aPseudoType
aStyleContext
)
;
MOZ_ASSERT
(
!
effects
-
>
CascadeNeedsUpdate
(
)
"
Failed
to
update
cascade
state
"
)
;
}
namespace
{
class
EffectCompositeOrderComparator
{
public
:
bool
Equals
(
const
KeyframeEffectReadOnly
*
a
const
KeyframeEffectReadOnly
*
b
)
const
{
return
a
=
=
b
;
}
bool
LessThan
(
const
KeyframeEffectReadOnly
*
a
const
KeyframeEffectReadOnly
*
b
)
const
{
MOZ_ASSERT
(
a
-
>
GetAnimation
(
)
&
&
b
-
>
GetAnimation
(
)
)
;
MOZ_ASSERT
(
Equals
(
a
b
)
|
|
a
-
>
GetAnimation
(
)
-
>
HasLowerCompositeOrderThan
(
*
b
-
>
GetAnimation
(
)
)
!
=
b
-
>
GetAnimation
(
)
-
>
HasLowerCompositeOrderThan
(
*
a
-
>
GetAnimation
(
)
)
)
;
return
a
-
>
GetAnimation
(
)
-
>
HasLowerCompositeOrderThan
(
*
b
-
>
GetAnimation
(
)
)
;
}
}
;
}
void
EffectCompositor
:
:
UpdateCascadeResults
(
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
{
EffectSet
*
effects
=
EffectSet
:
:
GetEffectSet
(
aElement
aPseudoType
)
;
if
(
!
effects
)
{
return
;
}
UpdateCascadeResults
(
*
effects
aElement
aPseudoType
aStyleContext
)
;
}
Maybe
<
Pair
<
Element
*
nsCSSPseudoElements
:
:
Type
>
>
EffectCompositor
:
:
GetAnimationElementAndPseudoForFrame
(
const
nsIFrame
*
aFrame
)
{
Maybe
<
Pair
<
Element
*
nsCSSPseudoElements
:
:
Type
>
>
result
;
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
if
(
!
content
)
{
return
result
;
}
nsCSSPseudoElements
:
:
Type
pseudoType
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
;
if
(
aFrame
-
>
IsGeneratedContentFrame
(
)
)
{
nsIFrame
*
parent
=
aFrame
-
>
GetParent
(
)
;
if
(
parent
-
>
IsGeneratedContentFrame
(
)
)
{
return
result
;
}
nsIAtom
*
name
=
content
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
if
(
name
=
=
nsGkAtoms
:
:
mozgeneratedcontentbefore
)
{
pseudoType
=
nsCSSPseudoElements
:
:
ePseudo_before
;
}
else
if
(
name
=
=
nsGkAtoms
:
:
mozgeneratedcontentafter
)
{
pseudoType
=
nsCSSPseudoElements
:
:
ePseudo_after
;
}
else
{
return
result
;
}
content
=
content
-
>
GetParent
(
)
;
if
(
!
content
)
{
return
result
;
}
}
if
(
!
content
-
>
IsElement
(
)
)
{
return
result
;
}
result
=
Some
(
MakePair
(
content
-
>
AsElement
(
)
pseudoType
)
)
;
return
result
;
}
void
EffectCompositor
:
:
ComposeAnimationRule
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
CascadeLevel
aCascadeLevel
bool
&
aStyleChanging
)
{
EffectSet
*
effects
=
EffectSet
:
:
GetEffectSet
(
aElement
aPseudoType
)
;
if
(
!
effects
)
{
return
;
}
MOZ_ASSERT
(
!
effects
-
>
CascadeNeedsUpdate
(
)
"
Animation
cascade
out
of
date
when
composing
animation
rule
"
)
;
nsTArray
<
KeyframeEffectReadOnly
*
>
sortedEffectList
;
for
(
KeyframeEffectReadOnly
*
effect
:
*
effects
)
{
MOZ_ASSERT
(
effect
-
>
GetAnimation
(
)
)
;
if
(
effect
-
>
GetAnimation
(
)
-
>
CascadeLevel
(
)
=
=
aCascadeLevel
)
{
sortedEffectList
.
AppendElement
(
effect
)
;
}
}
sortedEffectList
.
Sort
(
EffectCompositeOrderComparator
(
)
)
;
RefPtr
<
AnimValuesStyleRule
>
&
animationRule
=
effects
-
>
AnimationRule
(
aCascadeLevel
)
;
animationRule
=
nullptr
;
aStyleChanging
=
false
;
nsCSSPropertySet
properties
;
for
(
KeyframeEffectReadOnly
*
effect
:
Reversed
(
sortedEffectList
)
)
{
effect
-
>
GetAnimation
(
)
-
>
ComposeStyle
(
animationRule
properties
aStyleChanging
)
;
}
}
void
EffectCompositor
:
:
GetOverriddenProperties
(
nsStyleContext
*
aStyleContext
EffectSet
&
aEffectSet
nsCSSPropertySet
&
aPropertiesOverridden
)
{
nsAutoTArray
<
nsCSSProperty
LayerAnimationInfo
:
:
kRecords
>
propertiesToTrack
;
{
nsCSSPropertySet
propertiesToTrackAsSet
;
for
(
KeyframeEffectReadOnly
*
effect
:
aEffectSet
)
{
for
(
const
AnimationProperty
&
property
:
effect
-
>
Properties
(
)
)
{
if
(
nsCSSProps
:
:
PropHasFlags
(
property
.
mProperty
CSS_PROPERTY_CAN_ANIMATE_ON_COMPOSITOR
)
&
&
!
propertiesToTrackAsSet
.
HasProperty
(
property
.
mProperty
)
)
{
propertiesToTrackAsSet
.
AddProperty
(
property
.
mProperty
)
;
propertiesToTrack
.
AppendElement
(
property
.
mProperty
)
;
}
}
if
(
propertiesToTrack
.
Length
(
)
=
=
LayerAnimationInfo
:
:
kRecords
)
{
break
;
}
}
}
if
(
propertiesToTrack
.
IsEmpty
(
)
)
{
return
;
}
nsRuleNode
:
:
ComputePropertiesOverridingAnimation
(
propertiesToTrack
aStyleContext
aPropertiesOverridden
)
;
}
void
EffectCompositor
:
:
UpdateCascadeResults
(
EffectSet
&
aEffectSet
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
{
MOZ_ASSERT
(
EffectSet
:
:
GetEffectSet
(
aElement
aPseudoType
)
=
=
&
aEffectSet
"
Effect
set
should
correspond
to
the
specified
(
pseudo
-
)
element
"
)
;
if
(
aEffectSet
.
IsEmpty
(
)
)
{
aEffectSet
.
MarkCascadeUpdated
(
)
;
return
;
}
nsTArray
<
KeyframeEffectReadOnly
*
>
sortedEffectList
;
for
(
KeyframeEffectReadOnly
*
effect
:
aEffectSet
)
{
sortedEffectList
.
AppendElement
(
effect
)
;
}
sortedEffectList
.
Sort
(
EffectCompositeOrderComparator
(
)
)
;
nsCSSPropertySet
overriddenProperties
;
if
(
aStyleContext
)
{
GetOverriddenProperties
(
aStyleContext
aEffectSet
overriddenProperties
)
;
}
bool
changed
=
false
;
nsCSSPropertySet
animatedProperties
;
for
(
KeyframeEffectReadOnly
*
effect
:
Reversed
(
sortedEffectList
)
)
{
MOZ_ASSERT
(
effect
-
>
GetAnimation
(
)
"
Effects
on
a
target
element
should
have
an
Animation
"
)
;
bool
inEffect
=
effect
-
>
IsInEffect
(
)
;
for
(
AnimationProperty
&
prop
:
effect
-
>
Properties
(
)
)
{
bool
winsInCascade
=
!
animatedProperties
.
HasProperty
(
prop
.
mProperty
)
&
&
inEffect
;
if
(
winsInCascade
)
{
animatedProperties
.
AddProperty
(
prop
.
mProperty
)
;
}
if
(
winsInCascade
&
&
effect
-
>
GetAnimation
(
)
-
>
CascadeLevel
(
)
=
=
CascadeLevel
:
:
Animations
&
&
overriddenProperties
.
HasProperty
(
prop
.
mProperty
)
)
{
winsInCascade
=
false
;
}
if
(
winsInCascade
!
=
prop
.
mWinsInCascade
)
{
changed
=
true
;
}
prop
.
mWinsInCascade
=
winsInCascade
;
}
}
aEffectSet
.
MarkCascadeUpdated
(
)
;
nsPresContext
*
presContext
=
GetPresContext
(
aElement
)
;
if
(
changed
&
&
presContext
)
{
AnimationCollection
*
animations
=
presContext
-
>
AnimationManager
(
)
-
>
GetAnimationCollection
(
aElement
aPseudoType
false
)
;
if
(
animations
)
{
animations
-
>
RequestRestyle
(
AnimationCollection
:
:
RestyleType
:
:
Layer
)
;
}
AnimationCollection
*
transitions
=
presContext
-
>
TransitionManager
(
)
-
>
GetAnimationCollection
(
aElement
aPseudoType
false
)
;
if
(
transitions
)
{
transitions
-
>
RequestRestyle
(
AnimationCollection
:
:
RestyleType
:
:
Layer
)
;
}
}
}
nsPresContext
*
EffectCompositor
:
:
GetPresContext
(
Element
*
aElement
)
{
MOZ_ASSERT
(
aElement
)
;
nsIPresShell
*
shell
=
nsComputedDOMStyle
:
:
GetPresShellForContent
(
aElement
)
;
if
(
!
shell
)
{
return
nullptr
;
}
return
shell
-
>
GetPresContext
(
)
;
}
}
