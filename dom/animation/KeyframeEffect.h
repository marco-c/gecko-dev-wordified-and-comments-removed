#
ifndef
mozilla_dom_KeyframeEffect_h
#
define
mozilla_dom_KeyframeEffect_h
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffectReadOnly
.
h
"
#
include
"
mozilla
/
AnimationTarget
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
struct
JSContext
;
class
JSObject
;
class
nsIDocument
;
namespace
mozilla
{
class
ErrorResult
;
struct
KeyframeEffectParams
;
struct
TimingParams
;
namespace
dom
{
class
ElementOrCSSPseudoElement
;
class
GlobalObject
;
class
UnrestrictedDoubleOrKeyframeAnimationOptions
;
class
UnrestrictedDoubleOrKeyframeEffectOptions
;
class
KeyframeEffect
:
public
KeyframeEffectReadOnly
{
public
:
KeyframeEffect
(
nsIDocument
*
aDocument
const
Maybe
<
OwningAnimationTarget
>
&
aTarget
const
TimingParams
&
aTiming
const
KeyframeEffectParams
&
aOptions
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
KeyframeEffect
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
JS
:
:
Handle
<
JSObject
*
>
aKeyframes
const
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
KeyframeEffect
>
Constructor
(
const
GlobalObject
&
aGlobal
KeyframeEffectReadOnly
&
aSource
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
KeyframeEffect
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
JS
:
:
Handle
<
JSObject
*
>
aKeyframes
const
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
NotifySpecifiedTimingUpdated
(
)
;
void
SetTarget
(
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
)
;
void
GetSpacing
(
nsString
&
aRetVal
CallerType
aCallerType
)
{
KeyframeEffectReadOnly
:
:
GetSpacing
(
aRetVal
)
;
}
void
SetSpacing
(
JSContext
*
aCx
const
nsAString
&
aSpacing
CallerType
aCallerType
ErrorResult
&
aRv
)
;
IterationCompositeOperation
IterationComposite
(
CallerType
aCallerType
)
{
return
KeyframeEffectReadOnly
:
:
IterationComposite
(
)
;
}
void
SetIterationComposite
(
const
IterationCompositeOperation
&
aIterationComposite
CallerType
aCallerType
)
;
}
;
}
}
#
endif
