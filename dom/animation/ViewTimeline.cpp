#
include
"
ViewTimeline
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ViewTimeline
ScrollTimeline
mSubject
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
ViewTimeline
ScrollTimeline
)
already_AddRefed
<
ViewTimeline
>
ViewTimeline
:
:
MakeNamed
(
Document
*
aDocument
Element
*
aSubject
PseudoStyleType
aPseudoType
const
StyleViewTimeline
&
aStyleTimeline
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
[
element
pseudo
]
=
FindNearestScroller
(
aSubject
aPseudoType
)
;
auto
scroller
=
Scroller
:
:
Nearest
(
const_cast
<
Element
*
>
(
element
)
pseudo
)
;
return
RefPtr
<
ViewTimeline
>
(
new
ViewTimeline
(
aDocument
scroller
aStyleTimeline
.
GetAxis
(
)
aSubject
aPseudoType
aStyleTimeline
.
GetInset
(
)
)
)
.
forget
(
)
;
}
void
ViewTimeline
:
:
ReplacePropertiesWith
(
Element
*
aSubjectElement
PseudoStyleType
aPseudoType
const
StyleViewTimeline
&
aNew
)
{
mSubject
=
aSubjectElement
;
mSubjectPseudoType
=
aPseudoType
;
mAxis
=
aNew
.
GetAxis
(
)
;
mInset
=
aNew
.
GetInset
(
)
;
for
(
auto
*
anim
=
mAnimationOrder
.
getFirst
(
)
;
anim
;
anim
=
static_cast
<
LinkedListElement
<
Animation
>
*
>
(
anim
)
-
>
getNext
(
)
)
{
MOZ_ASSERT
(
anim
-
>
GetTimeline
(
)
=
=
this
)
;
anim
-
>
SetTimeline
(
this
)
;
}
}
Maybe
<
ScrollTimeline
:
:
ScrollOffsets
>
ViewTimeline
:
:
ComputeOffsets
(
const
nsIScrollableFrame
*
aScrollFrame
layers
:
:
ScrollDirection
aOrientation
)
const
{
MOZ_ASSERT
(
mSubject
)
;
MOZ_ASSERT
(
aScrollFrame
)
;
const
Element
*
subjectElement
=
AnimationUtils
:
:
GetElementForRestyle
(
mSubject
mSubjectPseudoType
)
;
const
nsIFrame
*
subject
=
subjectElement
-
>
GetPrimaryFrame
(
)
;
if
(
!
subject
)
{
return
Nothing
(
)
;
}
const
nsIFrame
*
scrolledFrame
=
aScrollFrame
-
>
GetScrolledFrame
(
)
;
MOZ_ASSERT
(
scrolledFrame
)
;
const
nsRect
subjectRect
(
subject
-
>
GetOffsetTo
(
scrolledFrame
)
subject
-
>
GetSize
(
)
)
;
const
nsRect
scrollPort
=
aScrollFrame
-
>
GetScrollPortRect
(
)
;
nscoord
subjectPosition
=
subjectRect
.
y
;
nscoord
subjectSize
=
subjectRect
.
height
;
nscoord
scrollPortSize
=
scrollPort
.
height
;
if
(
aOrientation
=
=
layers
:
:
ScrollDirection
:
:
eHorizontal
)
{
subjectPosition
=
scrolledFrame
-
>
GetWritingMode
(
)
.
IsPhysicalRTL
(
)
?
scrolledFrame
-
>
GetSize
(
)
.
width
-
subjectRect
.
XMost
(
)
:
subjectRect
.
x
;
subjectSize
=
subjectRect
.
width
;
scrollPortSize
=
scrollPort
.
width
;
}
const
auto
sideInsets
=
ComputeInsets
(
aScrollFrame
aOrientation
)
;
nscoord
startOffset
=
subjectPosition
-
scrollPortSize
+
sideInsets
.
mEnd
;
nscoord
endOffset
=
subjectPosition
+
subjectSize
-
sideInsets
.
mStart
;
return
Some
(
ScrollOffsets
{
startOffset
endOffset
}
)
;
}
ScrollTimeline
:
:
ScrollOffsets
ViewTimeline
:
:
ComputeInsets
(
const
nsIScrollableFrame
*
aScrollFrame
layers
:
:
ScrollDirection
aOrientation
)
const
{
const
WritingMode
wm
=
aScrollFrame
-
>
GetScrolledFrame
(
)
-
>
GetWritingMode
(
)
;
const
auto
&
scrollPadding
=
LogicalMargin
(
wm
aScrollFrame
-
>
GetScrollPadding
(
)
)
;
const
bool
isBlockAxis
=
mAxis
=
=
StyleScrollAxis
:
:
Block
|
|
(
mAxis
=
=
StyleScrollAxis
:
:
Horizontal
&
&
wm
.
IsVertical
(
)
)
|
|
(
mAxis
=
=
StyleScrollAxis
:
:
Vertical
&
&
!
wm
.
IsVertical
(
)
)
;
const
nsRect
scrollPort
=
aScrollFrame
-
>
GetScrollPortRect
(
)
;
const
nscoord
percentageBasis
=
aOrientation
=
=
layers
:
:
ScrollDirection
:
:
eHorizontal
?
scrollPort
.
width
:
scrollPort
.
height
;
nscoord
startInset
=
mInset
.
start
.
IsAuto
(
)
?
(
isBlockAxis
?
scrollPadding
.
BStart
(
wm
)
:
scrollPadding
.
IStart
(
wm
)
)
:
mInset
.
start
.
AsLengthPercentage
(
)
.
Resolve
(
percentageBasis
)
;
nscoord
endInset
=
mInset
.
end
.
IsAuto
(
)
?
(
isBlockAxis
?
scrollPadding
.
BEnd
(
wm
)
:
scrollPadding
.
IEnd
(
wm
)
)
:
mInset
.
end
.
AsLengthPercentage
(
)
.
Resolve
(
percentageBasis
)
;
return
{
startInset
endInset
}
;
}
}
