#
ifndef
mozilla_ComputedTimingFunction_h
#
define
mozilla_ComputedTimingFunction_h
#
include
"
nsDebug
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTimingFunction
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
SMILKeySpline
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
namespace
mozilla
{
class
ComputedTimingFunction
{
public
:
explicit
ComputedTimingFunction
(
const
nsTimingFunction
&
aFunction
)
;
explicit
ComputedTimingFunction
(
const
StyleComputedTimingFunction
&
aFunction
)
;
static
StyleComputedTimingFunction
ToStyleComputedTimingFunction
(
const
ComputedTimingFunction
&
aComputedTimingFunction
)
;
double
GetValue
(
double
aPortion
StyleEasingBeforeFlag
aBeforeFlag
)
const
;
bool
operator
=
=
(
const
ComputedTimingFunction
&
aOther
)
const
{
return
mFunction
=
=
aOther
.
mFunction
;
}
bool
operator
!
=
(
const
ComputedTimingFunction
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
operator
=
=
(
const
nsTimingFunction
&
aOther
)
const
{
return
ToStyleComputedTimingFunction
(
*
this
)
=
=
aOther
.
mTiming
;
}
bool
operator
!
=
(
const
nsTimingFunction
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
void
AppendToString
(
nsACString
&
aResult
)
const
;
static
double
GetPortion
(
const
Maybe
<
ComputedTimingFunction
>
&
aFunction
double
aPortion
StyleEasingBeforeFlag
aBeforeFlag
)
{
return
aFunction
?
aFunction
-
>
GetValue
(
aPortion
aBeforeFlag
)
:
aPortion
;
}
private
:
StyleComputedTimingFunction
mFunction
;
}
;
inline
bool
operator
=
=
(
const
Maybe
<
ComputedTimingFunction
>
&
aLHS
const
nsTimingFunction
&
aRHS
)
{
if
(
aLHS
.
isNothing
(
)
)
{
return
aRHS
.
IsLinear
(
)
;
}
return
aLHS
.
value
(
)
=
=
aRHS
;
}
inline
bool
operator
!
=
(
const
Maybe
<
ComputedTimingFunction
>
&
aLHS
const
nsTimingFunction
&
aRHS
)
{
return
!
(
aLHS
=
=
aRHS
)
;
}
}
#
endif
