#
ifndef
mozilla_ComputedTimingFunction_h
#
define
mozilla_ComputedTimingFunction_h
#
include
"
nsSMILKeySpline
.
h
"
#
include
"
nsStyleStruct
.
h
"
namespace
mozilla
{
class
ComputedTimingFunction
{
public
:
enum
class
BeforeFlag
{
Unset
Set
}
;
void
Init
(
const
nsTimingFunction
&
aFunction
)
;
double
GetValue
(
double
aPortion
BeforeFlag
aBeforeFlag
)
const
;
const
nsSMILKeySpline
*
GetFunction
(
)
const
{
NS_ASSERTION
(
HasSpline
(
)
"
Type
mismatch
"
)
;
return
&
mTimingFunction
;
}
nsTimingFunction
:
:
Type
GetType
(
)
const
{
return
mType
;
}
bool
HasSpline
(
)
const
{
return
nsTimingFunction
:
:
IsSplineType
(
mType
)
;
}
uint32_t
GetSteps
(
)
const
{
MOZ_ASSERT
(
mType
=
=
nsTimingFunction
:
:
Type
:
:
StepStart
|
|
mType
=
=
nsTimingFunction
:
:
Type
:
:
StepEnd
)
;
return
mStepsOrFrames
;
}
bool
operator
=
=
(
const
ComputedTimingFunction
&
aOther
)
const
{
return
mType
=
=
aOther
.
mType
&
&
(
HasSpline
(
)
?
mTimingFunction
=
=
aOther
.
mTimingFunction
:
mStepsOrFrames
=
=
aOther
.
mStepsOrFrames
)
;
}
bool
operator
!
=
(
const
ComputedTimingFunction
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
int32_t
Compare
(
const
ComputedTimingFunction
&
aRhs
)
const
;
void
AppendToString
(
nsAString
&
aResult
)
const
;
static
double
GetPortion
(
const
Maybe
<
ComputedTimingFunction
>
&
aFunction
double
aPortion
BeforeFlag
aBeforeFlag
)
{
return
aFunction
?
aFunction
-
>
GetValue
(
aPortion
aBeforeFlag
)
:
aPortion
;
}
static
int32_t
Compare
(
const
Maybe
<
ComputedTimingFunction
>
&
aLhs
const
Maybe
<
ComputedTimingFunction
>
&
aRhs
)
;
private
:
nsTimingFunction
:
:
Type
mType
;
nsSMILKeySpline
mTimingFunction
;
uint32_t
mStepsOrFrames
;
}
;
}
#
endif
