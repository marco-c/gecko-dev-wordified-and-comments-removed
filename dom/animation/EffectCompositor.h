#
ifndef
mozilla_EffectCompositor_h
#
define
mozilla_EffectCompositor_h
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
PseudoElementHashEntry
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIStyleRuleProcessor
.
h
"
#
include
"
nsTArray
.
h
"
class
nsCSSPropertyIDSet
;
class
nsIFrame
;
class
nsIStyleRule
;
class
nsPresContext
;
class
nsStyleContext
;
namespace
mozilla
{
class
EffectSet
;
class
RestyleTracker
;
class
StyleAnimationValue
;
struct
AnimationPerformanceWarning
;
struct
AnimationProperty
;
struct
NonOwningAnimationTarget
;
namespace
dom
{
class
Animation
;
class
Element
;
}
class
EffectCompositor
{
public
:
explicit
EffectCompositor
(
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
{
for
(
size_t
i
=
0
;
i
<
kCascadeLevelCount
;
i
+
+
)
{
CascadeLevel
cascadeLevel
=
CascadeLevel
(
i
)
;
mRuleProcessors
[
cascadeLevel
]
=
new
AnimationStyleRuleProcessor
(
this
cascadeLevel
)
;
}
}
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
EffectCompositor
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
EffectCompositor
)
void
Disconnect
(
)
{
mPresContext
=
nullptr
;
}
enum
class
CascadeLevel
{
Animations
Transitions
}
;
static
const
size_t
kCascadeLevelCount
=
static_cast
<
size_t
>
(
CascadeLevel
:
:
Transitions
)
+
1
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
enum
class
RestyleType
{
Throttled
Standard
Layer
}
;
void
RequestRestyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
RestyleType
aRestyleType
CascadeLevel
aCascadeLevel
)
;
void
PostRestyleForAnimation
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
)
;
void
PostRestyleForThrottledAnimations
(
)
;
void
UpdateEffectProperties
(
nsStyleContext
*
aStyleContext
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
void
MaybeUpdateAnimationRule
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
nsStyleContext
*
aStyleContext
)
;
nsIStyleRule
*
GetAnimationRule
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
nsStyleContext
*
aStyleContext
)
;
bool
HasPendingStyleUpdates
(
)
const
;
bool
HasThrottledStyleUpdates
(
)
const
;
void
AddStyleUpdatesTo
(
RestyleTracker
&
aTracker
)
;
nsIStyleRuleProcessor
*
RuleProcessor
(
CascadeLevel
aCascadeLevel
)
const
{
return
mRuleProcessors
[
aCascadeLevel
]
;
}
static
bool
HasAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
GetAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
void
ClearIsRunningOnCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
void
MaybeUpdateCascadeResults
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
void
UpdateCascadeResults
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
Maybe
<
NonOwningAnimationTarget
>
GetAnimationElementAndPseudoForFrame
(
const
nsIFrame
*
aFrame
)
;
static
void
SetPerformanceWarning
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
const
AnimationPerformanceWarning
&
aWarning
)
;
static
StyleAnimationValue
GetBaseStyle
(
nsCSSPropertyID
aProperty
nsStyleContext
*
aStyleContext
dom
:
:
Element
&
aElement
CSSPseudoElementType
aPseudoType
)
;
static
void
ClearBaseStyles
(
dom
:
:
Element
&
aElement
CSSPseudoElementType
aPseudoType
)
;
private
:
~
EffectCompositor
(
)
=
default
;
static
void
ComposeAnimationRule
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
TimeStamp
aRefreshTime
)
;
static
dom
:
:
Element
*
GetElementToRestyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
static
void
GetOverriddenProperties
(
nsStyleContext
*
aStyleContext
EffectSet
&
aEffectSet
nsCSSPropertyIDSet
&
aPropertiesOverridden
)
;
static
void
UpdateCascadeResults
(
EffectSet
&
aEffectSet
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
nsPresContext
*
GetPresContext
(
dom
:
:
Element
*
aElement
)
;
nsPresContext
*
mPresContext
;
EnumeratedArray
<
CascadeLevel
CascadeLevel
(
kCascadeLevelCount
)
nsDataHashtable
<
PseudoElementHashEntry
bool
>
>
mElementsToRestyle
;
class
AnimationStyleRuleProcessor
final
:
public
nsIStyleRuleProcessor
{
public
:
AnimationStyleRuleProcessor
(
EffectCompositor
*
aCompositor
CascadeLevel
aCascadeLevel
)
:
mCompositor
(
aCompositor
)
mCascadeLevel
(
aCascadeLevel
)
{
MOZ_ASSERT
(
aCompositor
)
;
}
NS_DECL_ISUPPORTS
nsRestyleHint
HasStateDependentStyle
(
StateRuleProcessorData
*
aData
)
override
;
nsRestyleHint
HasStateDependentStyle
(
PseudoElementStateRuleProcessorData
*
aData
)
override
;
bool
HasDocumentStateDependentStyle
(
StateRuleProcessorData
*
aData
)
override
;
nsRestyleHint
HasAttributeDependentStyle
(
AttributeRuleProcessorData
*
aData
RestyleHintData
&
aRestyleHintDataResult
)
override
;
bool
MediumFeaturesChanged
(
nsPresContext
*
aPresContext
)
override
;
void
RulesMatching
(
ElementRuleProcessorData
*
aData
)
override
;
void
RulesMatching
(
PseudoElementRuleProcessorData
*
aData
)
override
;
void
RulesMatching
(
AnonBoxRuleProcessorData
*
aData
)
override
;
#
ifdef
MOZ_XUL
void
RulesMatching
(
XULTreeRuleProcessorData
*
aData
)
override
;
#
endif
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
MOZ_MUST_OVERRIDE
override
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
MOZ_MUST_OVERRIDE
override
;
private
:
~
AnimationStyleRuleProcessor
(
)
=
default
;
EffectCompositor
*
mCompositor
;
CascadeLevel
mCascadeLevel
;
}
;
EnumeratedArray
<
CascadeLevel
CascadeLevel
(
kCascadeLevelCount
)
OwningNonNull
<
AnimationStyleRuleProcessor
>
>
mRuleProcessors
;
}
;
}
#
endif
