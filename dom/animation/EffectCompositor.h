#
ifndef
mozilla_EffectCompositor_h
#
define
mozilla_EffectCompositor_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Pair
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsTArray
.
h
"
class
nsCSSPropertySet
;
class
nsPresContext
;
class
nsStyleContext
;
namespace
mozilla
{
class
EffectSet
;
namespace
dom
{
class
Animation
;
class
Element
;
}
class
EffectCompositor
{
public
:
static
bool
HasAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
;
static
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
GetAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
;
static
void
MaybeUpdateCascadeResults
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
void
UpdateCascadeResults
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
Maybe
<
Pair
<
dom
:
:
Element
*
nsCSSPseudoElements
:
:
Type
>
>
GetAnimationElementAndPseudoForFrame
(
const
nsIFrame
*
aFrame
)
;
static
void
GetOverriddenProperties
(
nsStyleContext
*
aStyleContext
nsCSSPropertySet
&
aPropertiesOverridden
)
;
private
:
static
void
UpdateCascadeResults
(
EffectSet
&
aEffectSet
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aStyleContext
)
;
static
nsPresContext
*
GetPresContext
(
dom
:
:
Element
*
aElement
)
;
}
;
}
#
endif
