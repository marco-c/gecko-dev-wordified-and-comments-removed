#
ifndef
mozilla_EffectCompositor_h
#
define
mozilla_EffectCompositor_h
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
OwningNonNull
.
h
"
#
include
"
mozilla
/
PseudoElementHashEntry
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoTypes
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArray
.
h
"
class
nsCSSPropertyIDSet
;
class
nsAtom
;
class
nsIFrame
;
class
nsPresContext
;
struct
RawServoAnimationValueMap
;
typedef
RawServoAnimationValueMap
*
RawServoAnimationValueMapBorrowedMut
;
namespace
mozilla
{
class
ComputedStyle
;
class
EffectSet
;
class
RestyleTracker
;
class
StyleAnimationValue
;
struct
AnimationPerformanceWarning
;
struct
AnimationProperty
;
struct
NonOwningAnimationTarget
;
namespace
dom
{
class
Animation
;
class
Element
;
}
class
EffectCompositor
{
public
:
explicit
EffectCompositor
(
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
{
}
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
EffectCompositor
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
EffectCompositor
)
void
Disconnect
(
)
{
mPresContext
=
nullptr
;
}
enum
class
CascadeLevel
:
uint32_t
{
Animations
=
0
Transitions
=
1
}
;
static
const
size_t
kCascadeLevelCount
=
static_cast
<
size_t
>
(
CascadeLevel
:
:
Transitions
)
+
1
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
enum
class
RestyleType
{
Throttled
Standard
Layer
}
;
void
RequestRestyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
RestyleType
aRestyleType
CascadeLevel
aCascadeLevel
)
;
void
PostRestyleForAnimation
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
)
;
void
PostRestyleForThrottledAnimations
(
)
;
void
ClearRestyleRequestsFor
(
dom
:
:
Element
*
aElement
)
;
template
<
typename
StyleType
>
void
UpdateEffectProperties
(
StyleType
*
aStyleType
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
bool
GetServoAnimationRule
(
const
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
CascadeLevel
aCascadeLevel
RawServoAnimationValueMapBorrowedMut
aAnimationValues
)
;
bool
HasPendingStyleUpdates
(
)
const
;
static
bool
HasAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
nsTArray
<
RefPtr
<
dom
:
:
Animation
>
>
GetAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
void
ClearIsRunningOnCompositor
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
void
MaybeUpdateCascadeResults
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
static
void
UpdateCascadeResults
(
EffectSet
&
aEffectSet
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
static
Maybe
<
NonOwningAnimationTarget
>
GetAnimationElementAndPseudoForFrame
(
const
nsIFrame
*
aFrame
)
;
static
void
SetPerformanceWarning
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
const
AnimationPerformanceWarning
&
aWarning
)
;
bool
PreTraverse
(
ServoTraversalFlags
aFlags
)
;
bool
PreTraverse
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
bool
PreTraverseInSubtree
(
ServoTraversalFlags
aFlags
dom
:
:
Element
*
aElement
)
;
static
dom
:
:
Element
*
GetElementToRestyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
private
:
~
EffectCompositor
(
)
=
default
;
static
nsCSSPropertyIDSet
GetOverriddenProperties
(
EffectSet
&
aEffectSet
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
)
;
static
nsPresContext
*
GetPresContext
(
dom
:
:
Element
*
aElement
)
;
nsPresContext
*
mPresContext
;
EnumeratedArray
<
CascadeLevel
CascadeLevel
(
kCascadeLevelCount
)
nsDataHashtable
<
PseudoElementHashEntry
bool
>
>
mElementsToRestyle
;
bool
mIsInPreTraverse
=
false
;
}
;
}
#
endif
