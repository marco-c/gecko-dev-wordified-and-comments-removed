#
ifndef
mozilla_AnimValuesStyleRule_h
#
define
mozilla_AnimValuesStyleRule_h
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
nsCSSProperty
.
h
"
#
include
"
nsCSSPropertySet
.
h
"
#
include
"
nsIStyleRule
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRuleNode
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
AnimValuesStyleRule
final
:
public
nsIStyleRule
{
public
:
AnimValuesStyleRule
(
)
:
mStyleBits
(
0
)
{
}
NS_DECL_ISUPPORTS
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
bool
MightMapInheritedStyleData
(
)
override
;
bool
GetDiscretelyAnimatedCSSValue
(
nsCSSProperty
aProperty
nsCSSValue
*
aValue
)
override
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
void
AddValue
(
nsCSSProperty
aProperty
const
StyleAnimationValue
&
aStartValue
)
{
PropertyStyleAnimationValuePair
pair
=
{
aProperty
aStartValue
}
;
mPropertyValuePairs
.
AppendElement
(
pair
)
;
mStyleBits
|
=
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
aProperty
]
)
;
}
void
AddValue
(
nsCSSProperty
aProperty
StyleAnimationValue
&
&
aStartValue
)
{
PropertyStyleAnimationValuePair
*
pair
=
mPropertyValuePairs
.
AppendElement
(
)
;
pair
-
>
mProperty
=
aProperty
;
pair
-
>
mValue
=
Move
(
aStartValue
)
;
mStyleBits
|
=
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
aProperty
]
)
;
}
private
:
~
AnimValuesStyleRule
(
)
{
}
InfallibleTArray
<
PropertyStyleAnimationValuePair
>
mPropertyValuePairs
;
uint32_t
mStyleBits
;
}
;
}
#
endif
