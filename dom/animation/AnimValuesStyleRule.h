#
ifndef
mozilla_AnimValuesStyleRule_h
#
define
mozilla_AnimValuesStyleRule_h
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
nsCSSProperty
.
h
"
#
include
"
nsCSSPropertySet
.
h
"
#
include
"
nsIStyleRule
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRuleNode
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
AnimValuesStyleRule
final
:
public
nsIStyleRule
{
public
:
AnimValuesStyleRule
(
)
:
mStyleBits
(
0
)
{
}
NS_DECL_ISUPPORTS
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
bool
MightMapInheritedStyleData
(
)
override
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
void
AddValue
(
nsCSSProperty
aProperty
StyleAnimationValue
&
aStartValue
)
{
PropertyValuePair
v
=
{
aProperty
aStartValue
}
;
mPropertyValuePairs
.
AppendElement
(
v
)
;
mStyleBits
|
=
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
aProperty
]
)
;
}
StyleAnimationValue
*
AddEmptyValue
(
nsCSSProperty
aProperty
)
{
PropertyValuePair
*
p
=
mPropertyValuePairs
.
AppendElement
(
)
;
p
-
>
mProperty
=
aProperty
;
mStyleBits
|
=
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
aProperty
]
)
;
return
&
p
-
>
mValue
;
}
struct
PropertyValuePair
{
nsCSSProperty
mProperty
;
StyleAnimationValue
mValue
;
}
;
void
AddPropertiesToSet
(
nsCSSPropertySet
&
aSet
)
const
{
for
(
size_t
i
=
0
i_end
=
mPropertyValuePairs
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
const
PropertyValuePair
&
cv
=
mPropertyValuePairs
[
i
]
;
aSet
.
AddProperty
(
cv
.
mProperty
)
;
}
}
private
:
~
AnimValuesStyleRule
(
)
{
}
InfallibleTArray
<
PropertyValuePair
>
mPropertyValuePairs
;
uint32_t
mStyleBits
;
}
;
}
#
endif
