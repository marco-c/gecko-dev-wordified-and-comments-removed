#
ifndef
mozilla_dom_ScrollTimeline_h
#
define
mozilla_dom_ScrollTimeline_h
#
include
"
mozilla
/
dom
/
AnimationTimeline
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
PairHash
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
class
nsIScrollableFrame
;
namespace
mozilla
{
struct
NonOwningAnimationTarget
;
namespace
dom
{
class
Element
;
class
ScrollTimeline
final
:
public
AnimationTimeline
{
public
:
struct
Scroller
{
enum
class
Type
:
uint8_t
{
Root
Nearest
Name
}
;
Type
mType
=
Type
:
:
Root
;
RefPtr
<
Element
>
mElement
;
static
Scroller
Root
(
const
Document
*
aOwnerDoc
)
{
return
{
Type
:
:
Root
aOwnerDoc
-
>
GetDocumentElement
(
)
}
;
}
static
Scroller
Nearest
(
Element
*
aElement
)
{
return
{
Type
:
:
Nearest
aElement
}
;
}
static
Scroller
Named
(
Element
*
aElement
)
{
return
{
Type
:
:
Name
aElement
}
;
}
explicit
operator
bool
(
)
const
{
return
mElement
;
}
bool
operator
=
=
(
const
Scroller
&
aOther
)
const
{
return
mType
=
=
aOther
.
mType
&
&
mElement
=
=
aOther
.
mElement
;
}
}
;
static
already_AddRefed
<
ScrollTimeline
>
FromRule
(
const
RawServoScrollTimelineRule
&
aRule
Document
*
aDocument
const
NonOwningAnimationTarget
&
aTarget
)
;
static
already_AddRefed
<
ScrollTimeline
>
FromAnonymousScroll
(
Document
*
aDocument
const
NonOwningAnimationTarget
&
aTarget
StyleScrollAxis
aAxis
StyleScroller
aScroller
)
;
static
already_AddRefed
<
ScrollTimeline
>
FromNamedScroll
(
Document
*
aDocument
const
NonOwningAnimationTarget
&
aTarget
const
nsAtom
*
aName
)
;
bool
operator
=
=
(
const
ScrollTimeline
&
aOther
)
const
{
return
mDocument
=
=
aOther
.
mDocument
&
&
mSource
=
=
aOther
.
mSource
&
&
mAxis
=
=
aOther
.
mAxis
;
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
ScrollTimeline
AnimationTimeline
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
nullptr
;
}
Nullable
<
TimeDuration
>
GetCurrentTimeAsDuration
(
)
const
override
;
bool
TracksWallclockTime
(
)
const
override
{
return
false
;
}
Nullable
<
TimeDuration
>
ToTimelineTime
(
const
TimeStamp
&
aTimeStamp
)
const
override
{
return
nullptr
;
}
TimeStamp
ToTimeStamp
(
const
TimeDuration
&
aTimelineTime
)
const
override
{
return
{
}
;
}
Document
*
GetDocument
(
)
const
override
{
return
mDocument
;
}
bool
IsMonotonicallyIncreasing
(
)
const
override
{
return
false
;
}
bool
IsScrollTimeline
(
)
const
override
{
return
true
;
}
const
ScrollTimeline
*
AsScrollTimeline
(
)
const
override
{
return
this
;
}
void
ScheduleAnimations
(
)
{
Tick
(
)
;
}
bool
IsActive
(
)
const
{
return
GetScrollFrame
(
)
;
}
Element
*
SourceElement
(
)
const
{
MOZ_ASSERT
(
mSource
)
;
return
mSource
.
mElement
;
}
layers
:
:
ScrollDirection
Axis
(
)
const
;
StyleOverflow
SourceScrollStyle
(
)
const
;
bool
APZIsActiveForSource
(
)
const
;
bool
ScrollingDirectionIsAvailable
(
)
const
;
protected
:
virtual
~
ScrollTimeline
(
)
{
Teardown
(
)
;
}
private
:
ScrollTimeline
(
)
=
delete
;
ScrollTimeline
(
Document
*
aDocument
const
Scroller
&
aScroller
StyleScrollAxis
aAxis
)
;
static
already_AddRefed
<
ScrollTimeline
>
GetOrCreateScrollTimeline
(
Document
*
aDocument
const
Scroller
&
aScroller
const
StyleScrollAxis
&
aAxis
)
;
void
Teardown
(
)
{
UnregisterFromScrollSource
(
)
;
}
void
UnregisterFromScrollSource
(
)
;
const
nsIScrollableFrame
*
GetScrollFrame
(
)
const
;
RefPtr
<
Document
>
mDocument
;
Scroller
mSource
;
StyleScrollAxis
mAxis
;
}
;
class
ScrollTimelineSet
{
public
:
using
Key
=
std
:
:
pair
<
ScrollTimeline
:
:
Scroller
:
:
Type
StyleScrollAxis
>
;
using
NonOwningScrollTimelineMap
=
HashMap
<
Key
ScrollTimeline
*
PairHasher
<
ScrollTimeline
:
:
Scroller
:
:
Type
StyleScrollAxis
>
>
;
~
ScrollTimelineSet
(
)
=
default
;
static
ScrollTimelineSet
*
GetScrollTimelineSet
(
Element
*
aElement
)
;
static
ScrollTimelineSet
*
GetOrCreateScrollTimelineSet
(
Element
*
aElement
)
;
static
void
DestroyScrollTimelineSet
(
Element
*
aElement
)
;
NonOwningScrollTimelineMap
:
:
AddPtr
LookupForAdd
(
Key
aKey
)
{
return
mScrollTimelines
.
lookupForAdd
(
aKey
)
;
}
void
Add
(
NonOwningScrollTimelineMap
:
:
AddPtr
&
aPtr
Key
aKey
ScrollTimeline
*
aScrollTimeline
)
{
Unused
<
<
mScrollTimelines
.
add
(
aPtr
aKey
aScrollTimeline
)
;
}
void
Remove
(
const
Key
aKey
)
{
mScrollTimelines
.
remove
(
aKey
)
;
}
bool
IsEmpty
(
)
const
{
return
mScrollTimelines
.
empty
(
)
;
}
void
ScheduleAnimations
(
)
const
{
for
(
auto
iter
=
mScrollTimelines
.
iter
(
)
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
iter
.
get
(
)
.
value
(
)
-
>
ScheduleAnimations
(
)
;
}
}
private
:
ScrollTimelineSet
(
)
=
default
;
NonOwningScrollTimelineMap
mScrollTimelines
;
}
;
}
}
#
endif
