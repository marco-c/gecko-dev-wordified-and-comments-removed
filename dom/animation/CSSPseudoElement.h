#
ifndef
mozilla_dom_CSSPseudoElement_h
#
define
mozilla_dom_CSSPseudoElement_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Animation
;
class
Element
;
class
UnrestrictedDoubleOrKeyframeAnimationOptions
;
class
CSSPseudoElement
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
CSSPseudoElement
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
CSSPseudoElement
)
protected
:
virtual
~
CSSPseudoElement
(
)
;
public
:
ParentObject
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsCSSPseudoElements
:
:
Type
GetType
(
)
const
{
return
mPseudoType
;
}
void
GetType
(
nsString
&
aRetVal
)
const
{
MOZ_ASSERT
(
nsCSSPseudoElements
:
:
GetPseudoAtom
(
mPseudoType
)
"
All
pseudo
-
types
allowed
by
this
class
should
have
a
"
"
corresponding
atom
"
)
;
nsCSSPseudoElements
:
:
GetPseudoAtom
(
mPseudoType
)
-
>
ToString
(
aRetVal
)
;
}
already_AddRefed
<
Element
>
ParentElement
(
)
const
{
RefPtr
<
Element
>
retVal
(
mParentElement
)
;
return
retVal
.
forget
(
)
;
}
void
GetAnimations
(
nsTArray
<
RefPtr
<
Animation
>
>
&
aRetVal
)
;
already_AddRefed
<
Animation
>
Animate
(
JSContext
*
aContext
JS
:
:
Handle
<
JSObject
*
>
aFrames
const
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
ErrorResult
&
aError
)
;
static
already_AddRefed
<
CSSPseudoElement
>
GetCSSPseudoElement
(
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aType
)
;
private
:
CSSPseudoElement
(
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aType
)
;
static
nsIAtom
*
GetCSSPseudoElementPropertyAtom
(
nsCSSPseudoElements
:
:
Type
aType
)
;
RefPtr
<
Element
>
mParentElement
;
nsCSSPseudoElements
:
:
Type
mPseudoType
;
}
;
}
}
#
endif
