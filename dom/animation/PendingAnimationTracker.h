#
ifndef
mozilla_dom_PendingAnimationTracker_h
#
define
mozilla_dom_PendingAnimationTracker_h
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsIFrame
;
namespace
mozilla
{
class
PendingAnimationTracker
final
{
public
:
explicit
PendingAnimationTracker
(
nsIDocument
*
aDocument
)
:
mDocument
(
aDocument
)
{
}
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
PendingAnimationTracker
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
PendingAnimationTracker
)
void
AddPlayPending
(
dom
:
:
Animation
&
aAnimation
)
{
AddPending
(
aAnimation
mPlayPendingSet
)
;
mHasPlayPendingGeometricAnimations
=
CheckState
:
:
Indeterminate
;
}
void
RemovePlayPending
(
dom
:
:
Animation
&
aAnimation
)
{
RemovePending
(
aAnimation
mPlayPendingSet
)
;
mHasPlayPendingGeometricAnimations
=
CheckState
:
:
Indeterminate
;
}
bool
IsWaitingToPlay
(
const
dom
:
:
Animation
&
aAnimation
)
const
{
return
IsWaiting
(
aAnimation
mPlayPendingSet
)
;
}
void
AddPausePending
(
dom
:
:
Animation
&
aAnimation
)
{
AddPending
(
aAnimation
mPausePendingSet
)
;
}
void
RemovePausePending
(
dom
:
:
Animation
&
aAnimation
)
{
RemovePending
(
aAnimation
mPausePendingSet
)
;
}
bool
IsWaitingToPause
(
const
dom
:
:
Animation
&
aAnimation
)
const
{
return
IsWaiting
(
aAnimation
mPausePendingSet
)
;
}
void
TriggerPendingAnimationsOnNextTick
(
const
TimeStamp
&
aReadyTime
)
;
void
TriggerPendingAnimationsNow
(
)
;
bool
HasPendingAnimations
(
)
const
{
return
mPlayPendingSet
.
Count
(
)
>
0
|
|
mPausePendingSet
.
Count
(
)
>
0
;
}
void
MarkAnimationsThatMightNeedSynchronization
(
)
;
private
:
~
PendingAnimationTracker
(
)
{
}
bool
HasPlayPendingGeometricAnimations
(
)
;
void
EnsurePaintIsScheduled
(
)
;
typedef
nsTHashtable
<
nsRefPtrHashKey
<
dom
:
:
Animation
>
>
AnimationSet
;
void
AddPending
(
dom
:
:
Animation
&
aAnimation
AnimationSet
&
aSet
)
;
void
RemovePending
(
dom
:
:
Animation
&
aAnimation
AnimationSet
&
aSet
)
;
bool
IsWaiting
(
const
dom
:
:
Animation
&
aAnimation
const
AnimationSet
&
aSet
)
const
;
AnimationSet
mPlayPendingSet
;
AnimationSet
mPausePendingSet
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
enum
class
CheckState
{
Indeterminate
Absent
Present
}
;
CheckState
mHasPlayPendingGeometricAnimations
=
CheckState
:
:
Indeterminate
;
}
;
}
#
endif
