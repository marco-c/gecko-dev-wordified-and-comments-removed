#
ifndef
mozilla_AnimationTarget_h
#
define
mozilla_AnimationTarget_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
struct
OwningAnimationTarget
{
OwningAnimationTarget
(
)
=
default
;
OwningAnimationTarget
(
dom
:
:
Element
*
aElement
PseudoStyleType
aType
)
:
mElement
(
aElement
)
mPseudoType
(
aType
)
{
}
explicit
OwningAnimationTarget
(
dom
:
:
Element
*
aElement
)
:
mElement
(
aElement
)
{
}
bool
operator
=
=
(
const
OwningAnimationTarget
&
aOther
)
const
{
return
mElement
=
=
aOther
.
mElement
&
&
mPseudoType
=
=
aOther
.
mPseudoType
;
}
explicit
operator
bool
(
)
const
{
return
!
!
mElement
;
}
RefPtr
<
dom
:
:
Element
>
mElement
;
PseudoStyleType
mPseudoType
=
PseudoStyleType
:
:
NotPseudo
;
}
;
struct
NonOwningAnimationTarget
{
NonOwningAnimationTarget
(
)
=
default
;
NonOwningAnimationTarget
(
dom
:
:
Element
*
aElement
PseudoStyleType
aType
)
:
mElement
(
aElement
)
mPseudoType
(
aType
)
{
}
explicit
NonOwningAnimationTarget
(
const
OwningAnimationTarget
&
aOther
)
:
mElement
(
aOther
.
mElement
)
mPseudoType
(
aOther
.
mPseudoType
)
{
}
bool
operator
=
=
(
const
NonOwningAnimationTarget
&
aOther
)
const
{
return
mElement
=
=
aOther
.
mElement
&
&
mPseudoType
=
=
aOther
.
mPseudoType
;
}
explicit
operator
bool
(
)
const
{
return
!
!
mElement
;
}
dom
:
:
Element
*
MOZ_NON_OWNING_REF
mElement
=
nullptr
;
PseudoStyleType
mPseudoType
=
PseudoStyleType
:
:
NotPseudo
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
Maybe
<
OwningAnimationTarget
>
&
aTarget
const
char
*
aName
uint32_t
aFlags
=
0
)
{
if
(
aTarget
)
{
ImplCycleCollectionTraverse
(
aCallback
aTarget
-
>
mElement
aName
aFlags
)
;
}
}
inline
void
ImplCycleCollectionUnlink
(
Maybe
<
OwningAnimationTarget
>
&
aTarget
)
{
if
(
aTarget
)
{
ImplCycleCollectionUnlink
(
aTarget
-
>
mElement
)
;
}
}
template
<
>
struct
DefaultHasher
<
OwningAnimationTarget
>
{
using
Key
=
OwningAnimationTarget
;
using
Lookup
=
OwningAnimationTarget
;
using
PtrHasher
=
PointerHasher
<
dom
:
:
Element
*
>
;
static
HashNumber
hash
(
const
Lookup
&
aLookup
)
{
return
AddToHash
(
PtrHasher
:
:
hash
(
aLookup
.
mElement
.
get
(
)
)
static_cast
<
uint8_t
>
(
aLookup
.
mPseudoType
)
)
;
}
static
bool
match
(
const
Key
&
aKey
const
Lookup
&
aLookup
)
{
return
PtrHasher
:
:
match
(
aKey
.
mElement
.
get
(
)
aLookup
.
mElement
.
get
(
)
)
&
&
aKey
.
mPseudoType
=
=
aLookup
.
mPseudoType
;
}
static
void
rekey
(
Key
&
aKey
Key
&
&
aNewKey
)
{
aKey
=
std
:
:
move
(
aNewKey
)
;
}
}
;
}
#
endif
