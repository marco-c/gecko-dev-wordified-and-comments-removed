#
include
"
mozilla
/
dom
/
AnimationEffectReadOnly
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectReadOnlyBinding
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
AnimationEffectReadOnly
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
AnimationEffectReadOnly
)
if
(
tmp
-
>
mTiming
)
{
tmp
-
>
mTiming
-
>
Unlink
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocument
mTiming
mAnimation
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
AnimationEffectReadOnly
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
mTiming
mAnimation
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE
(
AnimationEffectReadOnly
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
AnimationEffectReadOnly
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
AnimationEffectReadOnly
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
AnimationEffectReadOnly
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
AnimationEffectReadOnly
:
:
AnimationEffectReadOnly
(
nsIDocument
*
aDocument
AnimationEffectTimingReadOnly
*
aTiming
)
:
mDocument
(
aDocument
)
mTiming
(
aTiming
)
{
MOZ_ASSERT
(
aTiming
)
;
}
bool
AnimationEffectReadOnly
:
:
IsCurrent
(
)
const
{
if
(
!
mAnimation
|
|
mAnimation
-
>
PlayState
(
)
=
=
AnimationPlayState
:
:
Finished
)
{
return
false
;
}
ComputedTiming
computedTiming
=
GetComputedTiming
(
)
;
return
computedTiming
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
Before
|
|
computedTiming
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
Active
;
}
bool
AnimationEffectReadOnly
:
:
IsInEffect
(
)
const
{
ComputedTiming
computedTiming
=
GetComputedTiming
(
)
;
return
!
computedTiming
.
mProgress
.
IsNull
(
)
;
}
already_AddRefed
<
AnimationEffectTimingReadOnly
>
AnimationEffectReadOnly
:
:
Timing
(
)
{
RefPtr
<
AnimationEffectTimingReadOnly
>
temp
(
mTiming
)
;
return
temp
.
forget
(
)
;
}
void
AnimationEffectReadOnly
:
:
SetSpecifiedTiming
(
const
TimingParams
&
aTiming
)
{
if
(
mTiming
-
>
AsTimingParams
(
)
=
=
aTiming
)
{
return
;
}
mTiming
-
>
SetTimingParams
(
aTiming
)
;
if
(
mAnimation
)
{
mAnimation
-
>
NotifyEffectTimingUpdated
(
)
;
if
(
AsKeyframeEffect
(
)
)
{
AsKeyframeEffect
(
)
-
>
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
}
}
}
ComputedTiming
AnimationEffectReadOnly
:
:
GetComputedTimingAt
(
const
Nullable
<
TimeDuration
>
&
aLocalTime
const
TimingParams
&
aTiming
double
aPlaybackRate
)
{
static
const
StickyTimeDuration
zeroDuration
;
ComputedTiming
result
;
if
(
aTiming
.
Duration
(
)
)
{
MOZ_ASSERT
(
aTiming
.
Duration
(
)
.
ref
(
)
>
=
zeroDuration
"
Iteration
duration
should
be
positive
"
)
;
result
.
mDuration
=
aTiming
.
Duration
(
)
.
ref
(
)
;
}
MOZ_ASSERT
(
aTiming
.
Iterations
(
)
>
=
0
.
0
&
&
!
IsNaN
(
aTiming
.
Iterations
(
)
)
"
mIterations
should
be
nonnegative
&
finite
as
ensured
by
"
"
ValidateIterations
or
CSSParser
"
)
;
result
.
mIterations
=
aTiming
.
Iterations
(
)
;
MOZ_ASSERT
(
aTiming
.
IterationStart
(
)
>
=
0
.
0
"
mIterationStart
should
be
nonnegative
as
ensured
by
"
"
ValidateIterationStart
"
)
;
result
.
mIterationStart
=
aTiming
.
IterationStart
(
)
;
result
.
mActiveDuration
=
aTiming
.
ActiveDuration
(
)
;
result
.
mEndTime
=
aTiming
.
EndTime
(
)
;
result
.
mFill
=
aTiming
.
Fill
(
)
=
=
dom
:
:
FillMode
:
:
Auto
?
dom
:
:
FillMode
:
:
None
:
aTiming
.
Fill
(
)
;
if
(
aLocalTime
.
IsNull
(
)
)
{
return
result
;
}
const
TimeDuration
&
localTime
=
aLocalTime
.
Value
(
)
;
StickyTimeDuration
beforeActiveBoundary
=
std
:
:
max
(
std
:
:
min
(
StickyTimeDuration
(
aTiming
.
Delay
(
)
)
result
.
mEndTime
)
zeroDuration
)
;
StickyTimeDuration
activeAfterBoundary
=
std
:
:
max
(
std
:
:
min
(
StickyTimeDuration
(
aTiming
.
Delay
(
)
+
result
.
mActiveDuration
)
result
.
mEndTime
)
zeroDuration
)
;
if
(
localTime
>
activeAfterBoundary
|
|
(
aPlaybackRate
>
=
0
&
&
localTime
=
=
activeAfterBoundary
)
)
{
result
.
mPhase
=
ComputedTiming
:
:
AnimationPhase
:
:
After
;
if
(
!
result
.
FillsForwards
(
)
)
{
return
result
;
}
result
.
mActiveTime
=
std
:
:
max
(
std
:
:
min
(
StickyTimeDuration
(
localTime
-
aTiming
.
Delay
(
)
)
result
.
mActiveDuration
)
zeroDuration
)
;
}
else
if
(
localTime
<
beforeActiveBoundary
|
|
(
aPlaybackRate
<
0
&
&
localTime
=
=
beforeActiveBoundary
)
)
{
result
.
mPhase
=
ComputedTiming
:
:
AnimationPhase
:
:
Before
;
if
(
!
result
.
FillsBackwards
(
)
)
{
return
result
;
}
result
.
mActiveTime
=
std
:
:
max
(
StickyTimeDuration
(
localTime
-
aTiming
.
Delay
(
)
)
zeroDuration
)
;
}
else
{
MOZ_ASSERT
(
result
.
mActiveDuration
"
How
can
we
be
in
the
middle
of
a
zero
-
duration
interval
?
"
)
;
result
.
mPhase
=
ComputedTiming
:
:
AnimationPhase
:
:
Active
;
result
.
mActiveTime
=
localTime
-
aTiming
.
Delay
(
)
;
}
double
overallProgress
;
if
(
!
result
.
mDuration
)
{
overallProgress
=
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
Before
?
0
.
0
:
result
.
mIterations
;
}
else
{
overallProgress
=
result
.
mActiveTime
/
result
.
mDuration
;
}
if
(
IsFinite
(
overallProgress
)
)
{
overallProgress
+
=
result
.
mIterationStart
;
}
result
.
mCurrentIteration
=
(
result
.
mIterations
>
=
UINT64_MAX
&
&
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
After
)
|
|
overallProgress
>
=
UINT64_MAX
?
UINT64_MAX
:
static_cast
<
uint64_t
>
(
overallProgress
)
;
double
progress
=
IsFinite
(
overallProgress
)
?
fmod
(
overallProgress
1
.
0
)
:
fmod
(
result
.
mIterationStart
1
.
0
)
;
if
(
progress
=
=
0
.
0
&
&
(
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
After
|
|
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
Active
)
&
&
result
.
mActiveTime
=
=
result
.
mActiveDuration
&
&
result
.
mIterations
!
=
0
.
0
)
{
MOZ_ASSERT
(
result
.
mCurrentIteration
!
=
0
"
Should
not
have
zero
current
iteration
"
)
;
progress
=
1
.
0
;
if
(
result
.
mCurrentIteration
!
=
UINT64_MAX
)
{
result
.
mCurrentIteration
-
-
;
}
}
bool
thisIterationReverse
=
false
;
switch
(
aTiming
.
Direction
(
)
)
{
case
PlaybackDirection
:
:
Normal
:
thisIterationReverse
=
false
;
break
;
case
PlaybackDirection
:
:
Reverse
:
thisIterationReverse
=
true
;
break
;
case
PlaybackDirection
:
:
Alternate
:
thisIterationReverse
=
(
result
.
mCurrentIteration
&
1
)
=
=
1
;
break
;
case
PlaybackDirection
:
:
Alternate_reverse
:
thisIterationReverse
=
(
result
.
mCurrentIteration
&
1
)
=
=
0
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
PlaybackDirection
type
"
)
;
}
if
(
thisIterationReverse
)
{
progress
=
1
.
0
-
progress
;
}
if
(
(
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
After
&
&
thisIterationReverse
)
|
|
(
result
.
mPhase
=
=
ComputedTiming
:
:
AnimationPhase
:
:
Before
&
&
!
thisIterationReverse
)
)
{
result
.
mBeforeFlag
=
ComputedTimingFunction
:
:
BeforeFlag
:
:
Set
;
}
if
(
aTiming
.
TimingFunction
(
)
)
{
progress
=
aTiming
.
TimingFunction
(
)
-
>
GetValue
(
progress
result
.
mBeforeFlag
)
;
}
MOZ_ASSERT
(
IsFinite
(
progress
)
"
Progress
value
should
be
finite
"
)
;
result
.
mProgress
.
SetValue
(
progress
)
;
return
result
;
}
ComputedTiming
AnimationEffectReadOnly
:
:
GetComputedTiming
(
const
TimingParams
*
aTiming
)
const
{
double
playbackRate
=
mAnimation
?
mAnimation
-
>
PlaybackRate
(
)
:
1
;
return
GetComputedTimingAt
(
GetLocalTime
(
)
aTiming
?
*
aTiming
:
SpecifiedTiming
(
)
playbackRate
)
;
}
static
void
GetComputedTimingDictionary
(
const
ComputedTiming
&
aComputedTiming
const
Nullable
<
TimeDuration
>
&
aLocalTime
const
TimingParams
&
aTiming
ComputedTimingProperties
&
aRetVal
)
{
aRetVal
.
mDelay
=
aTiming
.
Delay
(
)
.
ToMilliseconds
(
)
;
aRetVal
.
mEndDelay
=
aTiming
.
EndDelay
(
)
.
ToMilliseconds
(
)
;
aRetVal
.
mFill
=
aComputedTiming
.
mFill
;
aRetVal
.
mIterations
=
aComputedTiming
.
mIterations
;
aRetVal
.
mIterationStart
=
aComputedTiming
.
mIterationStart
;
aRetVal
.
mDuration
.
SetAsUnrestrictedDouble
(
)
=
aComputedTiming
.
mDuration
.
ToMilliseconds
(
)
;
aRetVal
.
mDirection
=
aTiming
.
Direction
(
)
;
aRetVal
.
mActiveDuration
=
aComputedTiming
.
mActiveDuration
.
ToMilliseconds
(
)
;
aRetVal
.
mEndTime
=
aComputedTiming
.
mEndTime
.
ToMilliseconds
(
)
;
aRetVal
.
mLocalTime
=
AnimationUtils
:
:
TimeDurationToDouble
(
aLocalTime
)
;
aRetVal
.
mProgress
=
aComputedTiming
.
mProgress
;
if
(
!
aRetVal
.
mProgress
.
IsNull
(
)
)
{
double
iteration
=
aComputedTiming
.
mCurrentIteration
=
=
UINT64_MAX
?
PositiveInfinity
<
double
>
(
)
:
static_cast
<
double
>
(
aComputedTiming
.
mCurrentIteration
)
;
aRetVal
.
mCurrentIteration
.
SetValue
(
iteration
)
;
}
}
void
AnimationEffectReadOnly
:
:
GetComputedTimingAsDict
(
ComputedTimingProperties
&
aRetVal
)
const
{
double
playbackRate
=
mAnimation
?
mAnimation
-
>
PlaybackRate
(
)
:
1
;
const
Nullable
<
TimeDuration
>
currentTime
=
GetLocalTime
(
)
;
GetComputedTimingDictionary
(
GetComputedTimingAt
(
currentTime
SpecifiedTiming
(
)
playbackRate
)
currentTime
SpecifiedTiming
(
)
aRetVal
)
;
}
AnimationEffectReadOnly
:
:
~
AnimationEffectReadOnly
(
)
{
if
(
mTiming
)
{
mTiming
-
>
Unlink
(
)
;
}
}
Nullable
<
TimeDuration
>
AnimationEffectReadOnly
:
:
GetLocalTime
(
)
const
{
Nullable
<
TimeDuration
>
result
;
if
(
mAnimation
)
{
result
=
mAnimation
-
>
GetCurrentTime
(
)
;
}
return
result
;
}
}
}
