#
include
"
mozilla
/
dom
/
AnimationEffectTimingReadOnly
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
dom
/
AnimatableBinding
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectTimingReadOnlyBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSPseudoElement
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffectBinding
.
h
"
namespace
mozilla
{
TimingParams
:
:
TimingParams
(
const
dom
:
:
AnimationEffectTimingProperties
&
aRhs
const
dom
:
:
Element
*
aTarget
)
:
mDuration
(
aRhs
.
mDuration
)
mDelay
(
TimeDuration
:
:
FromMilliseconds
(
aRhs
.
mDelay
)
)
mIterations
(
aRhs
.
mIterations
)
mDirection
(
aRhs
.
mDirection
)
mFill
(
aRhs
.
mFill
)
{
mFunction
=
AnimationUtils
:
:
ParseEasing
(
aTarget
aRhs
.
mEasing
)
;
}
TimingParams
:
:
TimingParams
(
double
aDuration
)
{
mDuration
.
SetAsUnrestrictedDouble
(
)
=
aDuration
;
}
template
<
class
OptionsType
>
static
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
OptionsType
&
aOptions
)
;
template
<
>
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
)
{
MOZ_ASSERT
(
aOptions
.
IsKeyframeEffectOptions
(
)
)
;
return
aOptions
.
GetAsKeyframeEffectOptions
(
)
;
}
template
<
>
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
)
{
MOZ_ASSERT
(
aOptions
.
IsKeyframeAnimationOptions
(
)
)
;
return
aOptions
.
GetAsKeyframeAnimationOptions
(
)
;
}
template
<
class
OptionsType
>
static
TimingParams
TimingParamsFromOptionsUnion
(
const
OptionsType
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
if
(
aOptions
.
IsUnrestrictedDouble
(
)
)
{
return
TimingParams
(
aOptions
.
GetAsUnrestrictedDouble
(
)
)
;
}
else
{
RefPtr
<
dom
:
:
Element
>
targetElement
;
if
(
!
aTarget
.
IsNull
(
)
)
{
const
dom
:
:
ElementOrCSSPseudoElement
&
target
=
aTarget
.
Value
(
)
;
MOZ_ASSERT
(
target
.
IsElement
(
)
|
|
target
.
IsCSSPseudoElement
(
)
"
Uninitialized
target
"
)
;
if
(
target
.
IsElement
(
)
)
{
targetElement
=
&
target
.
GetAsElement
(
)
;
}
else
{
targetElement
=
target
.
GetAsCSSPseudoElement
(
)
.
ParentElement
(
)
;
}
}
return
TimingParams
(
GetTimingProperties
(
aOptions
)
targetElement
)
;
}
}
TimingParams
TimingParams
:
:
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
return
TimingParamsFromOptionsUnion
(
aOptions
aTarget
)
;
}
TimingParams
TimingParams
:
:
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
return
TimingParamsFromOptionsUnion
(
aOptions
aTarget
)
;
}
bool
TimingParams
:
:
operator
=
=
(
const
TimingParams
&
aOther
)
const
{
bool
durationEqual
;
if
(
mDuration
.
IsUnrestrictedDouble
(
)
)
{
durationEqual
=
aOther
.
mDuration
.
IsUnrestrictedDouble
(
)
&
&
(
mDuration
.
GetAsUnrestrictedDouble
(
)
=
=
aOther
.
mDuration
.
GetAsUnrestrictedDouble
(
)
)
;
}
else
{
durationEqual
=
!
aOther
.
mDuration
.
IsUnrestrictedDouble
(
)
;
}
return
durationEqual
&
&
mDelay
=
=
aOther
.
mDelay
&
&
mIterations
=
=
aOther
.
mIterations
&
&
mDirection
=
=
aOther
.
mDirection
&
&
mFill
=
=
aOther
.
mFill
&
&
mFunction
=
=
aOther
.
mFunction
;
}
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
AnimationEffectTimingReadOnly
mParent
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
AnimationEffectTimingReadOnly
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
AnimationEffectTimingReadOnly
Release
)
JSObject
*
AnimationEffectTimingReadOnly
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
AnimationEffectTimingReadOnlyBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
AnimationEffectTimingReadOnly
:
:
GetEasing
(
nsString
&
aRetVal
)
const
{
if
(
mTiming
.
mFunction
.
isSome
(
)
)
{
mTiming
.
mFunction
-
>
AppendToString
(
aRetVal
)
;
}
else
{
aRetVal
.
AssignLiteral
(
"
linear
"
)
;
}
}
}
}
