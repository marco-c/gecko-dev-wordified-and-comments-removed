#
include
"
mozilla
/
dom
/
AnimationEffectTimingReadOnly
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectTimingReadOnlyBinding
.
h
"
namespace
mozilla
{
bool
AnimationTiming
:
:
operator
=
=
(
const
AnimationTiming
&
aOther
)
const
{
bool
durationEqual
;
if
(
mDuration
.
IsUnrestrictedDouble
(
)
)
{
durationEqual
=
aOther
.
mDuration
.
IsUnrestrictedDouble
(
)
&
&
(
mDuration
.
GetAsUnrestrictedDouble
(
)
=
=
aOther
.
mDuration
.
GetAsUnrestrictedDouble
(
)
)
;
}
else
{
durationEqual
=
!
aOther
.
mDuration
.
IsUnrestrictedDouble
(
)
;
}
return
durationEqual
&
&
mDelay
=
=
aOther
.
mDelay
&
&
mIterations
=
=
aOther
.
mIterations
&
&
mDirection
=
=
aOther
.
mDirection
&
&
mFill
=
=
aOther
.
mFill
;
}
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
AnimationEffectTimingReadOnly
mParent
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
AnimationEffectTimingReadOnly
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
AnimationEffectTimingReadOnly
Release
)
JSObject
*
AnimationEffectTimingReadOnly
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
AnimationEffectTimingReadOnlyBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
