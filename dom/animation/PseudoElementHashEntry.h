#
ifndef
mozilla_PseudoElementHashEntry_h
#
define
mozilla_PseudoElementHashEntry_h
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
AnimationTarget
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
namespace
mozilla
{
class
PseudoElementHashEntry
:
public
PLDHashEntryHdr
{
public
:
typedef
NonOwningAnimationTarget
KeyType
;
typedef
const
NonOwningAnimationTarget
*
KeyTypePointer
;
explicit
PseudoElementHashEntry
(
KeyTypePointer
aKey
)
:
mElement
(
aKey
-
>
mElement
)
mPseudoRequest
(
aKey
-
>
mPseudoRequest
)
{
}
PseudoElementHashEntry
(
PseudoElementHashEntry
&
&
aOther
)
=
default
;
~
PseudoElementHashEntry
(
)
=
default
;
KeyType
GetKey
(
)
const
{
return
{
mElement
mPseudoRequest
}
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
mElement
=
=
aKey
-
>
mElement
&
&
mPseudoRequest
=
=
aKey
-
>
mPseudoRequest
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
&
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
if
(
!
aKey
)
return
0
;
static_assert
(
sizeof
(
PseudoStyleType
)
=
=
sizeof
(
uint8_t
)
"
"
)
;
return
mozilla
:
:
HashGeneric
(
aKey
-
>
mElement
static_cast
<
uint8_t
>
(
aKey
-
>
mPseudoRequest
.
mType
)
aKey
-
>
mPseudoRequest
.
mIdentifier
.
get
(
)
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
RefPtr
<
dom
:
:
Element
>
mElement
;
PseudoStyleRequest
mPseudoRequest
;
}
;
}
#
endif
