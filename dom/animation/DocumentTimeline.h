#
ifndef
mozilla_dom_DocumentTimeline_h
#
define
mozilla_dom_DocumentTimeline_h
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimelineBinding
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
AnimationTimeline
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsRefreshDriver
.
h
"
struct
JSContext
;
namespace
mozilla
:
:
dom
{
class
DocumentTimeline
final
:
public
AnimationTimeline
public
LinkedListElement
<
DocumentTimeline
>
{
public
:
DocumentTimeline
(
Document
*
aDocument
const
TimeDuration
&
aOriginTime
)
;
protected
:
virtual
~
DocumentTimeline
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
DocumentTimeline
AnimationTimeline
)
JSObject
*
WrapObject
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
DocumentTimeline
>
Constructor
(
const
GlobalObject
&
aGlobal
const
DocumentTimelineOptions
&
aOptions
ErrorResult
&
aRv
)
;
Nullable
<
TimeDuration
>
GetCurrentTimeAsDuration
(
)
const
override
;
bool
TracksWallclockTime
(
)
const
override
;
Nullable
<
TimeDuration
>
ToTimelineTime
(
const
TimeStamp
&
aTimeStamp
)
const
override
;
TimeStamp
ToTimeStamp
(
const
TimeDuration
&
aTimelineTime
)
const
override
;
void
NotifyAnimationUpdated
(
Animation
&
aAnimation
)
override
;
void
RemoveAnimation
(
Animation
*
aAnimation
)
override
;
void
NotifyAnimationContentVisibilityChanged
(
Animation
*
aAnimation
bool
aIsVisible
)
override
;
void
TriggerAllPendingAnimationsNow
(
)
;
void
WillRefresh
(
)
;
Document
*
GetDocument
(
)
const
override
{
return
mDocument
;
}
void
UpdateLastRefreshDriverTime
(
)
;
bool
IsMonotonicallyIncreasing
(
)
const
override
{
return
true
;
}
protected
:
TimeStamp
GetCurrentTimeStamp
(
)
const
;
nsRefreshDriver
*
GetRefreshDriver
(
)
const
;
RefPtr
<
Document
>
mDocument
;
TimeStamp
mLastRefreshDriverTime
;
TimeDuration
mOriginTime
;
}
;
}
#
endif
