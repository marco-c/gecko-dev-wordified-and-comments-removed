#
ifndef
mozilla_dom_DocumentTimeline_h
#
define
mozilla_dom_DocumentTimeline_h
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimelineBinding
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
AnimationTimeline
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsRefreshObservers
.
h
"
struct
JSContext
;
namespace
mozilla
{
namespace
dom
{
class
DocumentTimeline
final
:
public
AnimationTimeline
public
nsARefreshObserver
public
nsATimerAdjustmentObserver
public
LinkedListElement
<
DocumentTimeline
>
{
public
:
DocumentTimeline
(
Document
*
aDocument
const
TimeDuration
&
aOriginTime
)
:
AnimationTimeline
(
aDocument
-
>
GetParentObject
(
)
)
mDocument
(
aDocument
)
mIsObservingRefreshDriver
(
false
)
mOriginTime
(
aOriginTime
)
{
if
(
mDocument
)
{
mDocument
-
>
Timelines
(
)
.
insertBack
(
this
)
;
}
}
protected
:
virtual
~
DocumentTimeline
(
)
{
MOZ_ASSERT
(
!
mIsObservingRefreshDriver
"
Timeline
should
have
disassociated
"
"
from
the
refresh
driver
before
being
destroyed
"
)
;
if
(
isInList
(
)
)
{
remove
(
)
;
}
}
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
DocumentTimeline
AnimationTimeline
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
DocumentTimeline
>
Constructor
(
const
GlobalObject
&
aGlobal
const
DocumentTimelineOptions
&
aOptions
ErrorResult
&
aRv
)
;
virtual
Nullable
<
TimeDuration
>
GetCurrentTimeAsDuration
(
)
const
override
;
bool
TracksWallclockTime
(
)
const
override
;
Nullable
<
TimeDuration
>
ToTimelineTime
(
const
TimeStamp
&
aTimeStamp
)
const
override
;
TimeStamp
ToTimeStamp
(
const
TimeDuration
&
aTimelineTime
)
const
override
;
void
NotifyAnimationUpdated
(
Animation
&
aAnimation
)
override
;
void
RemoveAnimation
(
Animation
*
aAnimation
)
override
;
void
WillRefresh
(
TimeStamp
aTime
)
override
;
void
NotifyTimerAdjusted
(
TimeStamp
aTime
)
override
;
void
NotifyRefreshDriverCreated
(
nsRefreshDriver
*
aDriver
)
;
void
NotifyRefreshDriverDestroying
(
nsRefreshDriver
*
aDriver
)
;
Document
*
GetDocument
(
)
const
override
{
return
mDocument
;
}
protected
:
TimeStamp
GetCurrentTimeStamp
(
)
const
;
nsRefreshDriver
*
GetRefreshDriver
(
)
const
;
void
UnregisterFromRefreshDriver
(
)
;
void
MostRecentRefreshTimeUpdated
(
)
;
void
ObserveRefreshDriver
(
nsRefreshDriver
*
aDriver
)
;
void
DisconnectRefreshDriver
(
nsRefreshDriver
*
aDriver
)
;
RefPtr
<
Document
>
mDocument
;
mutable
TimeStamp
mLastRefreshDriverTime
;
bool
mIsObservingRefreshDriver
;
TimeDuration
mOriginTime
;
}
;
}
}
#
endif
