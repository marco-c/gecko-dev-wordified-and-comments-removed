#
ifndef
mozilla_TimingParams_h
#
define
mozilla_TimingParams_h
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
mozilla
/
ComputedTimingFunction
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StickyTimeDuration
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
ifdef
None
#
undef
None
#
endif
#
include
"
mozilla
/
dom
/
AnimationEffectReadOnlyBinding
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
UnrestrictedDoubleOrKeyframeEffectOptions
;
class
UnrestrictedDoubleOrKeyframeAnimationOptions
;
}
struct
TimingParams
{
TimingParams
(
)
=
default
;
TimingParams
(
float
aDuration
float
aDelay
float
aIterationCount
dom
:
:
PlaybackDirection
aDirection
dom
:
:
FillMode
aFillMode
)
:
mIterations
(
aIterationCount
)
mDirection
(
aDirection
)
mFill
(
aFillMode
)
{
mDuration
.
emplace
(
StickyTimeDuration
:
:
FromMilliseconds
(
aDuration
)
)
;
mDelay
=
TimeDuration
:
:
FromMilliseconds
(
aDelay
)
;
}
TimingParams
(
const
TimeDuration
&
aDuration
const
TimeDuration
&
aDelay
const
TimeDuration
&
aEndDelay
float
aIterations
float
aIterationStart
dom
:
:
PlaybackDirection
aDirection
dom
:
:
FillMode
aFillMode
Maybe
<
ComputedTimingFunction
>
&
&
aFunction
)
:
mDelay
(
aDelay
)
mEndDelay
(
aEndDelay
)
mIterations
(
aIterations
)
mIterationStart
(
aIterationStart
)
mDirection
(
aDirection
)
mFill
(
aFillMode
)
mFunction
(
aFunction
)
{
mDuration
.
emplace
(
aDuration
)
;
}
template
<
class
OptionsType
>
static
TimingParams
FromOptionsType
(
const
OptionsType
&
aOptions
nsIDocument
*
aDocument
ErrorResult
&
aRv
)
;
static
TimingParams
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
nsIDocument
*
aDocument
ErrorResult
&
aRv
)
;
static
TimingParams
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
nsIDocument
*
aDocument
ErrorResult
&
aRv
)
;
template
<
class
DoubleOrString
>
static
Maybe
<
StickyTimeDuration
>
ParseDuration
(
DoubleOrString
&
aDuration
ErrorResult
&
aRv
)
{
Maybe
<
StickyTimeDuration
>
result
;
if
(
aDuration
.
IsUnrestrictedDouble
(
)
)
{
double
durationInMs
=
aDuration
.
GetAsUnrestrictedDouble
(
)
;
if
(
durationInMs
>
=
0
)
{
result
.
emplace
(
StickyTimeDuration
:
:
FromMilliseconds
(
durationInMs
)
)
;
}
else
{
aRv
.
ThrowTypeError
<
dom
:
:
MSG_ENFORCE_RANGE_OUT_OF_RANGE
>
(
NS_LITERAL_STRING
(
"
duration
"
)
)
;
}
}
else
if
(
!
aDuration
.
GetAsString
(
)
.
EqualsLiteral
(
"
auto
"
)
)
{
aRv
.
ThrowTypeError
<
dom
:
:
MSG_INVALID_DURATION_ERROR
>
(
aDuration
.
GetAsString
(
)
)
;
}
return
result
;
}
static
void
ValidateIterationStart
(
double
aIterationStart
ErrorResult
&
aRv
)
{
if
(
aIterationStart
<
0
)
{
aRv
.
ThrowTypeError
<
dom
:
:
MSG_ENFORCE_RANGE_OUT_OF_RANGE
>
(
NS_LITERAL_STRING
(
"
iterationStart
"
)
)
;
}
}
static
void
ValidateIterations
(
double
aIterations
ErrorResult
&
aRv
)
{
if
(
IsNaN
(
aIterations
)
|
|
aIterations
<
0
)
{
aRv
.
ThrowTypeError
<
dom
:
:
MSG_ENFORCE_RANGE_OUT_OF_RANGE
>
(
NS_LITERAL_STRING
(
"
iterations
"
)
)
;
}
}
static
Maybe
<
ComputedTimingFunction
>
ParseEasing
(
const
nsAString
&
aEasing
nsIDocument
*
aDocument
ErrorResult
&
aRv
)
;
StickyTimeDuration
ActiveDuration
(
)
const
{
static
const
StickyTimeDuration
zeroDuration
;
if
(
!
mDuration
|
|
*
mDuration
=
=
zeroDuration
|
|
mIterations
=
=
0
.
0
)
{
return
zeroDuration
;
}
return
mDuration
-
>
MultDouble
(
mIterations
)
;
}
StickyTimeDuration
EndTime
(
)
const
{
return
std
:
:
max
(
mDelay
+
ActiveDuration
(
)
+
mEndDelay
StickyTimeDuration
(
)
)
;
}
bool
operator
=
=
(
const
TimingParams
&
aOther
)
const
;
bool
operator
!
=
(
const
TimingParams
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
void
SetDuration
(
Maybe
<
StickyTimeDuration
>
&
&
aDuration
)
{
mDuration
=
Move
(
aDuration
)
;
}
const
Maybe
<
StickyTimeDuration
>
&
Duration
(
)
const
{
return
mDuration
;
}
void
SetDelay
(
const
TimeDuration
&
aDelay
)
{
mDelay
=
aDelay
;
}
const
TimeDuration
&
Delay
(
)
const
{
return
mDelay
;
}
void
SetEndDelay
(
const
TimeDuration
&
aEndDelay
)
{
mEndDelay
=
aEndDelay
;
}
const
TimeDuration
&
EndDelay
(
)
const
{
return
mEndDelay
;
}
void
SetIterations
(
double
aIterations
)
{
mIterations
=
aIterations
;
}
double
Iterations
(
)
const
{
return
mIterations
;
}
void
SetIterationStart
(
double
aIterationStart
)
{
mIterationStart
=
aIterationStart
;
}
double
IterationStart
(
)
const
{
return
mIterationStart
;
}
void
SetDirection
(
dom
:
:
PlaybackDirection
aDirection
)
{
mDirection
=
aDirection
;
}
dom
:
:
PlaybackDirection
Direction
(
)
const
{
return
mDirection
;
}
void
SetFill
(
dom
:
:
FillMode
aFill
)
{
mFill
=
aFill
;
}
dom
:
:
FillMode
Fill
(
)
const
{
return
mFill
;
}
void
SetFunction
(
Maybe
<
ComputedTimingFunction
>
&
&
aFunction
)
{
mFunction
=
Move
(
aFunction
)
;
}
const
Maybe
<
ComputedTimingFunction
>
&
Function
(
)
const
{
return
mFunction
;
}
private
:
Maybe
<
StickyTimeDuration
>
mDuration
;
TimeDuration
mDelay
;
TimeDuration
mEndDelay
;
double
mIterations
=
1
.
0
;
double
mIterationStart
=
0
.
0
;
dom
:
:
PlaybackDirection
mDirection
=
dom
:
:
PlaybackDirection
:
:
Normal
;
dom
:
:
FillMode
mFill
=
dom
:
:
FillMode
:
:
Auto
;
Maybe
<
ComputedTimingFunction
>
mFunction
;
}
;
}
#
endif
