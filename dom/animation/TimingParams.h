#
ifndef
mozilla_TimingParams_h
#
define
mozilla_TimingParams_h
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
mozilla
/
ComputedTimingFunction
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
ifdef
None
#
undef
None
#
endif
#
include
"
mozilla
/
dom
/
AnimationEffectReadOnlyBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
AnimationEffectTimingProperties
;
class
Element
;
class
UnrestrictedDoubleOrKeyframeEffectOptions
;
class
UnrestrictedDoubleOrKeyframeAnimationOptions
;
class
ElementOrCSSPseudoElement
;
}
struct
TimingParams
{
TimingParams
(
)
=
default
;
TimingParams
(
const
dom
:
:
AnimationEffectTimingProperties
&
aTimingProperties
const
dom
:
:
Element
*
aTarget
)
;
explicit
TimingParams
(
double
aDuration
)
;
static
TimingParams
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
;
static
TimingParams
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
;
dom
:
:
OwningUnrestrictedDoubleOrString
mDuration
;
TimeDuration
mDelay
;
TimeDuration
mEndDelay
;
double
mIterations
=
1
.
0
;
double
mIterationStart
=
0
.
0
;
dom
:
:
PlaybackDirection
mDirection
=
dom
:
:
PlaybackDirection
:
:
Normal
;
dom
:
:
FillMode
mFill
=
dom
:
:
FillMode
:
:
Auto
;
Maybe
<
ComputedTimingFunction
>
mFunction
;
bool
operator
=
=
(
const
TimingParams
&
aOther
)
const
;
bool
operator
!
=
(
const
TimingParams
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
}
;
}
#
endif
