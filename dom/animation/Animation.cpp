#
include
"
Animation
.
h
"
#
include
"
AnimationUtils
.
h
"
#
include
"
mozilla
/
dom
/
AnimationBinding
.
h
"
#
include
"
mozilla
/
dom
/
AnimationPlaybackEvent
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimeline
.
h
"
#
include
"
mozilla
/
AnimationTarget
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
include
"
PendingAnimationTracker
.
h
"
namespace
mozilla
{
namespace
dom
{
uint64_t
Animation
:
:
sNextAnimationIndex
=
0
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
Animation
DOMEventTargetHelper
mTimeline
mEffect
mReady
mFinished
)
NS_IMPL_ADDREF_INHERITED
(
Animation
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
Animation
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Animation
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
JSObject
*
Animation
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
AnimationBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
namespace
{
class
MOZ_RAII
AutoMutationBatchForAnimation
{
public
:
explicit
AutoMutationBatchForAnimation
(
const
Animation
&
aAnimation
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
Maybe
<
NonOwningAnimationTarget
>
target
=
nsNodeUtils
:
:
GetTargetForAnimation
(
&
aAnimation
)
;
if
(
!
target
)
{
return
;
}
nsIDocument
*
doc
=
target
-
>
mElement
-
>
OwnerDoc
(
)
;
if
(
!
doc
)
{
return
;
}
mAutoBatch
.
emplace
(
doc
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
Maybe
<
nsAutoAnimationMutationBatch
>
mAutoBatch
;
}
;
}
already_AddRefed
<
Animation
>
Animation
:
:
Constructor
(
const
GlobalObject
&
aGlobal
AnimationEffectReadOnly
*
aEffect
const
Optional
<
AnimationTimeline
*
>
&
aTimeline
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
Animation
>
animation
=
new
Animation
(
global
)
;
AnimationTimeline
*
timeline
;
if
(
aTimeline
.
WasPassed
(
)
)
{
timeline
=
aTimeline
.
Value
(
)
;
}
else
{
nsIDocument
*
document
=
AnimationUtils
:
:
GetCurrentRealmDocument
(
aGlobal
.
Context
(
)
)
;
if
(
!
document
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
timeline
=
document
-
>
Timeline
(
)
;
}
animation
-
>
SetTimelineNoUpdate
(
timeline
)
;
animation
-
>
SetEffectNoUpdate
(
aEffect
)
;
return
animation
.
forget
(
)
;
}
void
Animation
:
:
SetId
(
const
nsAString
&
aId
)
{
if
(
mId
=
=
aId
)
{
return
;
}
mId
=
aId
;
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
void
Animation
:
:
SetEffect
(
AnimationEffectReadOnly
*
aEffect
)
{
SetEffectNoUpdate
(
aEffect
)
;
PostUpdate
(
)
;
}
void
Animation
:
:
SetEffectNoUpdate
(
AnimationEffectReadOnly
*
aEffect
)
{
RefPtr
<
Animation
>
kungFuDeathGrip
(
this
)
;
if
(
mEffect
=
=
aEffect
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
bool
wasRelevant
=
mIsRelevant
;
if
(
mEffect
)
{
if
(
!
aEffect
)
{
ResetPendingTasks
(
)
;
}
if
(
mIsRelevant
)
{
nsNodeUtils
:
:
AnimationRemoved
(
this
)
;
}
RefPtr
<
AnimationEffectReadOnly
>
oldEffect
=
mEffect
;
mEffect
=
nullptr
;
oldEffect
-
>
SetAnimation
(
nullptr
)
;
UpdateRelevance
(
)
;
}
if
(
aEffect
)
{
RefPtr
<
AnimationEffectReadOnly
>
newEffect
=
aEffect
;
Animation
*
prevAnim
=
aEffect
-
>
GetAnimation
(
)
;
if
(
prevAnim
)
{
prevAnim
-
>
SetEffect
(
nullptr
)
;
}
mEffect
=
newEffect
;
mEffect
-
>
SetAnimation
(
this
)
;
if
(
wasRelevant
&
&
mIsRelevant
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
if
(
!
mPendingReadyTime
.
IsNull
(
)
)
{
mPendingReadyTime
.
SetNull
(
)
;
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
doc
)
{
PendingAnimationTracker
*
tracker
=
doc
-
>
GetOrCreatePendingAnimationTracker
(
)
;
if
(
mPendingState
=
=
PendingState
:
:
PlayPending
)
{
tracker
-
>
AddPlayPending
(
*
this
)
;
}
else
{
tracker
-
>
AddPausePending
(
*
this
)
;
}
}
}
}
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
}
void
Animation
:
:
SetTimeline
(
AnimationTimeline
*
aTimeline
)
{
SetTimelineNoUpdate
(
aTimeline
)
;
PostUpdate
(
)
;
}
void
Animation
:
:
SetTimelineNoUpdate
(
AnimationTimeline
*
aTimeline
)
{
if
(
mTimeline
=
=
aTimeline
)
{
return
;
}
StickyTimeDuration
activeTime
=
mEffect
?
mEffect
-
>
GetComputedTiming
(
)
.
mActiveTime
:
StickyTimeDuration
(
)
;
RefPtr
<
AnimationTimeline
>
oldTimeline
=
mTimeline
;
if
(
oldTimeline
)
{
oldTimeline
-
>
RemoveAnimation
(
this
)
;
}
mTimeline
=
aTimeline
;
if
(
!
mStartTime
.
IsNull
(
)
)
{
mHoldTime
.
SetNull
(
)
;
}
if
(
!
aTimeline
)
{
MaybeQueueCancelEvent
(
activeTime
)
;
}
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
}
void
Animation
:
:
SetStartTime
(
const
Nullable
<
TimeDuration
>
&
aNewStartTime
)
{
if
(
aNewStartTime
=
=
mStartTime
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
Nullable
<
TimeDuration
>
timelineTime
;
if
(
mTimeline
)
{
timelineTime
=
mTimeline
-
>
GetCurrentTime
(
)
;
}
if
(
timelineTime
.
IsNull
(
)
&
&
!
aNewStartTime
.
IsNull
(
)
)
{
mHoldTime
.
SetNull
(
)
;
}
Nullable
<
TimeDuration
>
previousCurrentTime
=
GetCurrentTime
(
)
;
ApplyPendingPlaybackRate
(
)
;
mStartTime
=
aNewStartTime
;
if
(
!
aNewStartTime
.
IsNull
(
)
)
{
if
(
mPlaybackRate
!
=
0
.
0
)
{
mHoldTime
.
SetNull
(
)
;
}
}
else
{
mHoldTime
=
previousCurrentTime
;
}
CancelPendingTasks
(
)
;
if
(
mReady
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
UpdateTiming
(
SeekFlag
:
:
DidSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
PostUpdate
(
)
;
}
Nullable
<
TimeDuration
>
Animation
:
:
GetCurrentTimeForHoldTime
(
const
Nullable
<
TimeDuration
>
&
aHoldTime
)
const
{
Nullable
<
TimeDuration
>
result
;
if
(
!
aHoldTime
.
IsNull
(
)
)
{
result
=
aHoldTime
;
return
result
;
}
if
(
mTimeline
&
&
!
mStartTime
.
IsNull
(
)
)
{
Nullable
<
TimeDuration
>
timelineTime
=
mTimeline
-
>
GetCurrentTime
(
)
;
if
(
!
timelineTime
.
IsNull
(
)
)
{
result
=
CurrentTimeFromTimelineTime
(
timelineTime
.
Value
(
)
mStartTime
.
Value
(
)
mPlaybackRate
)
;
}
}
return
result
;
}
void
Animation
:
:
SetCurrentTime
(
const
TimeDuration
&
aSeekTime
)
{
if
(
mPendingState
!
=
PendingState
:
:
PausePending
&
&
Nullable
<
TimeDuration
>
(
aSeekTime
)
=
=
GetCurrentTime
(
)
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
SilentlySetCurrentTime
(
aSeekTime
)
;
if
(
mPendingState
=
=
PendingState
:
:
PausePending
)
{
mHoldTime
.
SetValue
(
aSeekTime
)
;
ApplyPendingPlaybackRate
(
)
;
mStartTime
.
SetNull
(
)
;
if
(
mReady
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
CancelPendingTasks
(
)
;
}
UpdateTiming
(
SeekFlag
:
:
DidSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
PostUpdate
(
)
;
}
void
Animation
:
:
SetPlaybackRate
(
double
aPlaybackRate
)
{
mPendingPlaybackRate
.
reset
(
)
;
if
(
aPlaybackRate
=
=
mPlaybackRate
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
Nullable
<
TimeDuration
>
previousTime
=
GetCurrentTime
(
)
;
mPlaybackRate
=
aPlaybackRate
;
if
(
!
previousTime
.
IsNull
(
)
)
{
SetCurrentTime
(
previousTime
.
Value
(
)
)
;
}
UpdateTiming
(
SeekFlag
:
:
DidSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
PostUpdate
(
)
;
}
void
Animation
:
:
UpdatePlaybackRate
(
double
aPlaybackRate
)
{
if
(
mPendingPlaybackRate
&
&
mPendingPlaybackRate
.
value
(
)
=
=
aPlaybackRate
)
{
return
;
}
mPendingPlaybackRate
=
Some
(
aPlaybackRate
)
;
if
(
Pending
(
)
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
AnimationPlayState
playState
=
PlayState
(
)
;
if
(
playState
=
=
AnimationPlayState
:
:
Idle
|
|
playState
=
=
AnimationPlayState
:
:
Paused
)
{
ApplyPendingPlaybackRate
(
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
}
else
if
(
playState
=
=
AnimationPlayState
:
:
Finished
)
{
MOZ_ASSERT
(
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
"
If
we
have
no
active
timeline
we
should
be
idle
or
paused
"
)
;
if
(
aPlaybackRate
!
=
0
)
{
MOZ_ASSERT
(
!
GetUnconstrainedCurrentTime
(
)
.
IsNull
(
)
"
Unconstrained
current
time
should
be
resolved
"
)
;
TimeDuration
unconstrainedCurrentTime
=
GetUnconstrainedCurrentTime
(
)
.
Value
(
)
;
TimeDuration
timelineTime
=
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
;
mStartTime
=
StartTimeFromTimelineTime
(
timelineTime
unconstrainedCurrentTime
aPlaybackRate
)
;
}
else
{
mStartTime
=
mTimeline
-
>
GetCurrentTime
(
)
;
}
ApplyPendingPlaybackRate
(
)
;
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
PostUpdate
(
)
;
}
else
{
ErrorResult
rv
;
Play
(
rv
LimitBehavior
:
:
Continue
)
;
MOZ_ASSERT
(
!
rv
.
Failed
(
)
"
We
should
only
fail
to
play
when
using
auto
-
rewind
behavior
"
)
;
}
}
AnimationPlayState
Animation
:
:
PlayState
(
)
const
{
if
(
!
nsContentUtils
:
:
AnimationsAPIPendingMemberEnabled
(
)
&
&
Pending
(
)
)
{
return
AnimationPlayState
:
:
Pending
;
}
Nullable
<
TimeDuration
>
currentTime
=
GetCurrentTime
(
)
;
if
(
currentTime
.
IsNull
(
)
&
&
!
Pending
(
)
)
{
return
AnimationPlayState
:
:
Idle
;
}
if
(
mPendingState
=
=
PendingState
:
:
PausePending
|
|
(
mStartTime
.
IsNull
(
)
&
&
!
Pending
(
)
)
)
{
return
AnimationPlayState
:
:
Paused
;
}
if
(
!
currentTime
.
IsNull
(
)
&
&
(
(
mPlaybackRate
>
0
.
0
&
&
currentTime
.
Value
(
)
>
=
EffectEnd
(
)
)
|
|
(
mPlaybackRate
<
0
.
0
&
&
currentTime
.
Value
(
)
<
=
TimeDuration
(
)
)
)
)
{
return
AnimationPlayState
:
:
Finished
;
}
return
AnimationPlayState
:
:
Running
;
}
Promise
*
Animation
:
:
GetReady
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
GetOwnerGlobal
(
)
;
if
(
!
mReady
&
&
global
)
{
mReady
=
Promise
:
:
Create
(
global
aRv
)
;
}
if
(
!
mReady
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
!
Pending
(
)
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
return
mReady
;
}
Promise
*
Animation
:
:
GetFinished
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
GetOwnerGlobal
(
)
;
if
(
!
mFinished
&
&
global
)
{
mFinished
=
Promise
:
:
Create
(
global
aRv
)
;
}
if
(
!
mFinished
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
mFinishedIsResolved
)
{
MaybeResolveFinishedPromise
(
)
;
}
return
mFinished
;
}
void
Animation
:
:
Cancel
(
)
{
CancelNoUpdate
(
)
;
PostUpdate
(
)
;
}
void
Animation
:
:
Finish
(
ErrorResult
&
aRv
)
{
double
effectivePlaybackRate
=
CurrentOrPendingPlaybackRate
(
)
;
if
(
effectivePlaybackRate
=
=
0
|
|
(
effectivePlaybackRate
>
0
&
&
EffectEnd
(
)
=
=
TimeDuration
:
:
Forever
(
)
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
ApplyPendingPlaybackRate
(
)
;
TimeDuration
limit
=
mPlaybackRate
>
0
?
TimeDuration
(
EffectEnd
(
)
)
:
TimeDuration
(
0
)
;
bool
didChange
=
GetCurrentTime
(
)
!
=
Nullable
<
TimeDuration
>
(
limit
)
;
SilentlySetCurrentTime
(
limit
)
;
if
(
mStartTime
.
IsNull
(
)
&
&
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
mStartTime
=
StartTimeFromTimelineTime
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
limit
mPlaybackRate
)
;
didChange
=
true
;
}
if
(
!
mStartTime
.
IsNull
(
)
&
&
(
mPendingState
=
=
PendingState
:
:
PlayPending
|
|
mPendingState
=
=
PendingState
:
:
PausePending
)
)
{
if
(
mPendingState
=
=
PendingState
:
:
PausePending
)
{
mHoldTime
.
SetNull
(
)
;
}
CancelPendingTasks
(
)
;
didChange
=
true
;
if
(
mReady
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
}
UpdateTiming
(
SeekFlag
:
:
DidSeek
SyncNotifyFlag
:
:
Sync
)
;
if
(
didChange
&
&
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
PostUpdate
(
)
;
}
void
Animation
:
:
Play
(
ErrorResult
&
aRv
LimitBehavior
aLimitBehavior
)
{
PlayNoUpdate
(
aRv
aLimitBehavior
)
;
PostUpdate
(
)
;
}
void
Animation
:
:
Pause
(
ErrorResult
&
aRv
)
{
PauseNoUpdate
(
aRv
)
;
PostUpdate
(
)
;
}
void
Animation
:
:
Reverse
(
ErrorResult
&
aRv
)
{
if
(
!
mTimeline
|
|
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
double
effectivePlaybackRate
=
CurrentOrPendingPlaybackRate
(
)
;
if
(
effectivePlaybackRate
=
=
0
.
0
)
{
return
;
}
Maybe
<
double
>
originalPendingPlaybackRate
=
mPendingPlaybackRate
;
mPendingPlaybackRate
=
Some
(
-
effectivePlaybackRate
)
;
Play
(
aRv
LimitBehavior
:
:
AutoRewind
)
;
if
(
aRv
.
Failed
(
)
)
{
mPendingPlaybackRate
=
originalPendingPlaybackRate
;
}
}
Nullable
<
double
>
Animation
:
:
GetStartTimeAsDouble
(
)
const
{
return
AnimationUtils
:
:
TimeDurationToDouble
(
mStartTime
)
;
}
void
Animation
:
:
SetStartTimeAsDouble
(
const
Nullable
<
double
>
&
aStartTime
)
{
return
SetStartTime
(
AnimationUtils
:
:
DoubleToTimeDuration
(
aStartTime
)
)
;
}
Nullable
<
double
>
Animation
:
:
GetCurrentTimeAsDouble
(
)
const
{
return
AnimationUtils
:
:
TimeDurationToDouble
(
GetCurrentTime
(
)
)
;
}
void
Animation
:
:
SetCurrentTimeAsDouble
(
const
Nullable
<
double
>
&
aCurrentTime
ErrorResult
&
aRv
)
{
if
(
aCurrentTime
.
IsNull
(
)
)
{
if
(
!
GetCurrentTime
(
)
.
IsNull
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_TYPE_ERR
)
;
}
return
;
}
return
SetCurrentTime
(
TimeDuration
:
:
FromMilliseconds
(
aCurrentTime
.
Value
(
)
)
)
;
}
void
Animation
:
:
Tick
(
)
{
if
(
mPendingState
!
=
PendingState
:
:
NotPending
&
&
!
mPendingReadyTime
.
IsNull
(
)
&
&
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
mPendingReadyTime
.
SetValue
(
std
:
:
min
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
mPendingReadyTime
.
Value
(
)
)
)
;
FinishPendingAt
(
mPendingReadyTime
.
Value
(
)
)
;
mPendingReadyTime
.
SetNull
(
)
;
}
if
(
IsPossiblyOrphanedPendingAnimation
(
)
)
{
MOZ_ASSERT
(
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
"
Orphaned
pending
animations
should
have
an
active
timeline
"
)
;
FinishPendingAt
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
)
;
}
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
!
mEffect
)
{
return
;
}
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
-
>
AsKeyframeEffect
(
)
;
if
(
keyframeEffect
&
&
!
keyframeEffect
-
>
Properties
(
)
.
IsEmpty
(
)
&
&
!
mFinishedAtLastComposeStyle
&
&
PlayState
(
)
=
=
AnimationPlayState
:
:
Finished
)
{
PostUpdate
(
)
;
}
}
void
Animation
:
:
TriggerOnNextTick
(
const
Nullable
<
TimeDuration
>
&
aReadyTime
)
{
if
(
!
Pending
(
)
)
{
return
;
}
mPendingReadyTime
=
aReadyTime
;
}
void
Animation
:
:
TriggerNow
(
)
{
if
(
!
Pending
(
)
)
{
return
;
}
if
(
!
mTimeline
|
|
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
NS_WARNING
(
"
Failed
to
trigger
an
animation
with
an
active
timeline
"
)
;
return
;
}
FinishPendingAt
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
)
;
}
Nullable
<
TimeDuration
>
Animation
:
:
GetCurrentOrPendingStartTime
(
)
const
{
Nullable
<
TimeDuration
>
result
;
if
(
mPendingPlaybackRate
&
&
!
mPendingReadyTime
.
IsNull
(
)
&
&
!
mStartTime
.
IsNull
(
)
)
{
TimeDuration
currentTimeToMatch
=
!
mHoldTime
.
IsNull
(
)
?
mHoldTime
.
Value
(
)
:
CurrentTimeFromTimelineTime
(
mPendingReadyTime
.
Value
(
)
mStartTime
.
Value
(
)
mPlaybackRate
)
;
result
=
StartTimeFromTimelineTime
(
mPendingReadyTime
.
Value
(
)
currentTimeToMatch
*
mPendingPlaybackRate
)
;
return
result
;
}
if
(
!
mStartTime
.
IsNull
(
)
)
{
result
=
mStartTime
;
return
result
;
}
if
(
mPendingReadyTime
.
IsNull
(
)
|
|
mHoldTime
.
IsNull
(
)
)
{
return
result
;
}
result
=
StartTimeFromTimelineTime
(
mPendingReadyTime
.
Value
(
)
mHoldTime
.
Value
(
)
mPlaybackRate
)
;
return
result
;
}
TimeStamp
Animation
:
:
AnimationTimeToTimeStamp
(
const
StickyTimeDuration
&
aTime
)
const
{
TimeStamp
result
;
if
(
!
mTimeline
)
{
return
result
;
}
if
(
aTime
=
=
TimeDuration
:
:
Forever
(
)
|
|
mPlaybackRate
=
=
0
.
0
|
|
mStartTime
.
IsNull
(
)
)
{
return
result
;
}
TimeDuration
timelineTime
=
TimeDuration
(
aTime
)
.
MultDouble
(
1
.
0
/
mPlaybackRate
)
+
mStartTime
.
Value
(
)
;
result
=
mTimeline
-
>
ToTimeStamp
(
timelineTime
)
;
return
result
;
}
TimeStamp
Animation
:
:
ElapsedTimeToTimeStamp
(
const
StickyTimeDuration
&
aElapsedTime
)
const
{
TimeDuration
delay
=
mEffect
?
mEffect
-
>
SpecifiedTiming
(
)
.
Delay
(
)
:
TimeDuration
(
)
;
return
AnimationTimeToTimeStamp
(
aElapsedTime
+
delay
)
;
}
void
Animation
:
:
SilentlySetCurrentTime
(
const
TimeDuration
&
aSeekTime
)
{
if
(
!
mHoldTime
.
IsNull
(
)
|
|
mStartTime
.
IsNull
(
)
|
|
!
mTimeline
|
|
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
|
|
mPlaybackRate
=
=
0
.
0
)
{
mHoldTime
.
SetValue
(
aSeekTime
)
;
if
(
!
mTimeline
|
|
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
mStartTime
.
SetNull
(
)
;
}
}
else
{
mStartTime
=
StartTimeFromTimelineTime
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
aSeekTime
mPlaybackRate
)
;
}
mPreviousCurrentTime
.
SetNull
(
)
;
}
void
Animation
:
:
CancelNoUpdate
(
)
{
if
(
PlayState
(
)
!
=
AnimationPlayState
:
:
Idle
)
{
ResetPendingTasks
(
)
;
if
(
mFinished
)
{
mFinished
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
ResetFinishedPromise
(
)
;
DispatchPlaybackEvent
(
NS_LITERAL_STRING
(
"
cancel
"
)
)
;
}
StickyTimeDuration
activeTime
=
mEffect
?
mEffect
-
>
GetComputedTiming
(
)
.
mActiveTime
:
StickyTimeDuration
(
)
;
mHoldTime
.
SetNull
(
)
;
mStartTime
.
SetNull
(
)
;
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
mTimeline
)
{
mTimeline
-
>
RemoveAnimation
(
this
)
;
}
MaybeQueueCancelEvent
(
activeTime
)
;
}
bool
Animation
:
:
ShouldBeSynchronizedWithMainThread
(
nsCSSPropertyID
aProperty
const
nsIFrame
*
aFrame
AnimationPerformanceWarning
:
:
Type
&
aPerformanceWarning
)
const
{
if
(
!
IsPlaying
(
)
)
{
return
false
;
}
if
(
aProperty
!
=
eCSSProperty_transform
)
{
return
false
;
}
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
?
mEffect
-
>
AsKeyframeEffect
(
)
:
nullptr
;
if
(
!
keyframeEffect
)
{
return
false
;
}
if
(
mSyncWithGeometricAnimations
&
&
keyframeEffect
-
>
HasAnimationOfProperty
(
eCSSProperty_transform
)
)
{
aPerformanceWarning
=
AnimationPerformanceWarning
:
:
Type
:
:
TransformWithSyncGeometricAnimations
;
return
true
;
}
return
keyframeEffect
-
>
ShouldBlockAsyncTransformAnimations
(
aFrame
aPerformanceWarning
)
;
}
void
Animation
:
:
UpdateRelevance
(
)
{
bool
wasRelevant
=
mIsRelevant
;
mIsRelevant
=
HasCurrentEffect
(
)
|
|
IsInEffect
(
)
;
if
(
wasRelevant
&
&
!
mIsRelevant
)
{
nsNodeUtils
:
:
AnimationRemoved
(
this
)
;
}
else
if
(
!
wasRelevant
&
&
mIsRelevant
)
{
nsNodeUtils
:
:
AnimationAdded
(
this
)
;
}
}
bool
Animation
:
:
HasLowerCompositeOrderThan
(
const
Animation
&
aOther
)
const
{
if
(
&
aOther
=
=
this
)
{
return
false
;
}
{
auto
asCSSTransitionForSorting
=
[
]
(
const
Animation
&
anim
)
-
>
const
CSSTransition
*
{
const
CSSTransition
*
transition
=
anim
.
AsCSSTransition
(
)
;
return
transition
&
&
transition
-
>
IsTiedToMarkup
(
)
?
transition
:
nullptr
;
}
;
auto
thisTransition
=
asCSSTransitionForSorting
(
*
this
)
;
auto
otherTransition
=
asCSSTransitionForSorting
(
aOther
)
;
if
(
thisTransition
&
&
otherTransition
)
{
return
thisTransition
-
>
HasLowerCompositeOrderThan
(
*
otherTransition
)
;
}
if
(
thisTransition
|
|
otherTransition
)
{
return
thisTransition
;
}
}
{
auto
asCSSAnimationForSorting
=
[
]
(
const
Animation
&
anim
)
-
>
const
CSSAnimation
*
{
const
CSSAnimation
*
animation
=
anim
.
AsCSSAnimation
(
)
;
return
animation
&
&
animation
-
>
IsTiedToMarkup
(
)
?
animation
:
nullptr
;
}
;
auto
thisAnimation
=
asCSSAnimationForSorting
(
*
this
)
;
auto
otherAnimation
=
asCSSAnimationForSorting
(
aOther
)
;
if
(
thisAnimation
&
&
otherAnimation
)
{
return
thisAnimation
-
>
HasLowerCompositeOrderThan
(
*
otherAnimation
)
;
}
if
(
thisAnimation
|
|
otherAnimation
)
{
return
thisAnimation
;
}
}
MOZ_ASSERT
(
mAnimationIndex
!
=
aOther
.
mAnimationIndex
"
Animation
indices
should
be
unique
"
)
;
return
mAnimationIndex
<
aOther
.
mAnimationIndex
;
}
void
Animation
:
:
WillComposeStyle
(
)
{
mFinishedAtLastComposeStyle
=
(
PlayState
(
)
=
=
AnimationPlayState
:
:
Finished
)
;
MOZ_ASSERT
(
mEffect
)
;
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
-
>
AsKeyframeEffect
(
)
;
if
(
keyframeEffect
)
{
keyframeEffect
-
>
WillComposeStyle
(
)
;
}
}
template
<
typename
ComposeAnimationResult
>
void
Animation
:
:
ComposeStyle
(
ComposeAnimationResult
&
&
aComposeResult
const
nsCSSPropertyIDSet
&
aPropertiesToSkip
)
{
if
(
!
mEffect
)
{
return
;
}
bool
pending
=
Pending
(
)
;
{
AutoRestore
<
Nullable
<
TimeDuration
>
>
restoreHoldTime
(
mHoldTime
)
;
if
(
pending
&
&
mHoldTime
.
IsNull
(
)
&
&
!
mStartTime
.
IsNull
(
)
)
{
Nullable
<
TimeDuration
>
timeToUse
=
mPendingReadyTime
;
if
(
timeToUse
.
IsNull
(
)
&
&
mTimeline
&
&
mTimeline
-
>
TracksWallclockTime
(
)
)
{
timeToUse
=
mTimeline
-
>
ToTimelineTime
(
TimeStamp
:
:
Now
(
)
)
;
}
if
(
!
timeToUse
.
IsNull
(
)
)
{
mHoldTime
=
CurrentTimeFromTimelineTime
(
timeToUse
.
Value
(
)
mStartTime
.
Value
(
)
mPlaybackRate
)
;
}
}
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
-
>
AsKeyframeEffect
(
)
;
if
(
keyframeEffect
)
{
keyframeEffect
-
>
ComposeStyle
(
Forward
<
ComposeAnimationResult
>
(
aComposeResult
)
aPropertiesToSkip
)
;
}
}
MOZ_ASSERT
(
pending
=
=
Pending
(
)
"
Pending
state
should
not
change
during
the
course
of
compositing
"
)
;
}
void
Animation
:
:
NotifyEffectTimingUpdated
(
)
{
MOZ_ASSERT
(
mEffect
"
We
should
only
update
timing
effect
when
we
have
a
target
"
"
effect
"
)
;
UpdateTiming
(
Animation
:
:
SeekFlag
:
:
NoSeek
Animation
:
:
SyncNotifyFlag
:
:
Async
)
;
}
void
Animation
:
:
NotifyGeometricAnimationsStartingThisFrame
(
)
{
if
(
!
IsNewlyStarted
(
)
|
|
!
mEffect
)
{
return
;
}
mSyncWithGeometricAnimations
=
true
;
}
void
Animation
:
:
PlayNoUpdate
(
ErrorResult
&
aRv
LimitBehavior
aLimitBehavior
)
{
AutoMutationBatchForAnimation
mb
(
*
this
)
;
bool
abortedPause
=
mPendingState
=
=
PendingState
:
:
PausePending
;
double
effectivePlaybackRate
=
CurrentOrPendingPlaybackRate
(
)
;
Nullable
<
TimeDuration
>
currentTime
=
GetCurrentTime
(
)
;
if
(
effectivePlaybackRate
>
0
.
0
&
&
(
currentTime
.
IsNull
(
)
|
|
(
aLimitBehavior
=
=
LimitBehavior
:
:
AutoRewind
&
&
(
currentTime
.
Value
(
)
<
TimeDuration
(
)
|
|
currentTime
.
Value
(
)
>
=
EffectEnd
(
)
)
)
)
)
{
mHoldTime
.
SetValue
(
TimeDuration
(
0
)
)
;
}
else
if
(
effectivePlaybackRate
<
0
.
0
&
&
(
currentTime
.
IsNull
(
)
|
|
(
aLimitBehavior
=
=
LimitBehavior
:
:
AutoRewind
&
&
(
currentTime
.
Value
(
)
<
=
TimeDuration
(
)
|
|
currentTime
.
Value
(
)
>
EffectEnd
(
)
)
)
)
)
{
if
(
EffectEnd
(
)
=
=
TimeDuration
:
:
Forever
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
mHoldTime
.
SetValue
(
TimeDuration
(
EffectEnd
(
)
)
)
;
}
else
if
(
effectivePlaybackRate
=
=
0
.
0
&
&
currentTime
.
IsNull
(
)
)
{
mHoldTime
.
SetValue
(
TimeDuration
(
0
)
)
;
}
bool
reuseReadyPromise
=
false
;
if
(
mPendingState
!
=
PendingState
:
:
NotPending
)
{
CancelPendingTasks
(
)
;
reuseReadyPromise
=
true
;
}
if
(
mHoldTime
.
IsNull
(
)
&
&
!
abortedPause
&
&
!
mPendingPlaybackRate
)
{
return
;
}
if
(
!
mHoldTime
.
IsNull
(
)
)
{
mStartTime
.
SetNull
(
)
;
}
if
(
!
reuseReadyPromise
)
{
mReady
=
nullptr
;
}
mPendingState
=
PendingState
:
:
PlayPending
;
mSyncWithGeometricAnimations
=
false
;
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
doc
)
{
PendingAnimationTracker
*
tracker
=
doc
-
>
GetOrCreatePendingAnimationTracker
(
)
;
tracker
-
>
AddPlayPending
(
*
this
)
;
}
else
{
TriggerOnNextTick
(
Nullable
<
TimeDuration
>
(
)
)
;
}
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
}
void
Animation
:
:
PauseNoUpdate
(
ErrorResult
&
aRv
)
{
if
(
IsPausedOrPausing
(
)
)
{
return
;
}
AutoMutationBatchForAnimation
mb
(
*
this
)
;
if
(
GetCurrentTime
(
)
.
IsNull
(
)
)
{
if
(
mPlaybackRate
>
=
0
.
0
)
{
mHoldTime
.
SetValue
(
TimeDuration
(
0
)
)
;
}
else
{
if
(
EffectEnd
(
)
=
=
TimeDuration
:
:
Forever
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
mHoldTime
.
SetValue
(
TimeDuration
(
EffectEnd
(
)
)
)
;
}
}
bool
reuseReadyPromise
=
false
;
if
(
mPendingState
=
=
PendingState
:
:
PlayPending
)
{
CancelPendingTasks
(
)
;
reuseReadyPromise
=
true
;
}
if
(
!
reuseReadyPromise
)
{
mReady
=
nullptr
;
}
mPendingState
=
PendingState
:
:
PausePending
;
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
doc
)
{
PendingAnimationTracker
*
tracker
=
doc
-
>
GetOrCreatePendingAnimationTracker
(
)
;
tracker
-
>
AddPausePending
(
*
this
)
;
}
else
{
TriggerOnNextTick
(
Nullable
<
TimeDuration
>
(
)
)
;
}
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
}
void
Animation
:
:
ResumeAt
(
const
TimeDuration
&
aReadyTime
)
{
MOZ_ASSERT
(
mPendingState
=
=
PendingState
:
:
PlayPending
"
Expected
to
resume
a
play
-
pending
animation
"
)
;
MOZ_ASSERT
(
!
mHoldTime
.
IsNull
(
)
|
|
!
mStartTime
.
IsNull
(
)
"
An
animation
in
the
play
-
pending
state
should
have
either
a
"
"
resolved
hold
time
or
resolved
start
time
"
)
;
AutoMutationBatchForAnimation
mb
(
*
this
)
;
bool
hadPendingPlaybackRate
=
mPendingPlaybackRate
.
isSome
(
)
;
if
(
!
mHoldTime
.
IsNull
(
)
)
{
ApplyPendingPlaybackRate
(
)
;
mStartTime
=
StartTimeFromTimelineTime
(
aReadyTime
mHoldTime
.
Value
(
)
mPlaybackRate
)
;
if
(
mPlaybackRate
!
=
0
)
{
mHoldTime
.
SetNull
(
)
;
}
}
else
if
(
!
mStartTime
.
IsNull
(
)
&
&
mPendingPlaybackRate
)
{
TimeDuration
currentTimeToMatch
=
CurrentTimeFromTimelineTime
(
aReadyTime
mStartTime
.
Value
(
)
mPlaybackRate
)
;
ApplyPendingPlaybackRate
(
)
;
mStartTime
=
StartTimeFromTimelineTime
(
aReadyTime
currentTimeToMatch
mPlaybackRate
)
;
if
(
mPlaybackRate
=
=
0
)
{
mHoldTime
.
SetValue
(
currentTimeToMatch
)
;
}
}
mPendingState
=
PendingState
:
:
NotPending
;
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
hadPendingPlaybackRate
&
&
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
this
)
;
}
if
(
mReady
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
}
void
Animation
:
:
PauseAt
(
const
TimeDuration
&
aReadyTime
)
{
MOZ_ASSERT
(
mPendingState
=
=
PendingState
:
:
PausePending
"
Expected
to
pause
a
pause
-
pending
animation
"
)
;
if
(
!
mStartTime
.
IsNull
(
)
&
&
mHoldTime
.
IsNull
(
)
)
{
mHoldTime
=
CurrentTimeFromTimelineTime
(
aReadyTime
mStartTime
.
Value
(
)
mPlaybackRate
)
;
}
ApplyPendingPlaybackRate
(
)
;
mStartTime
.
SetNull
(
)
;
mPendingState
=
PendingState
:
:
NotPending
;
UpdateTiming
(
SeekFlag
:
:
NoSeek
SyncNotifyFlag
:
:
Async
)
;
if
(
mReady
)
{
mReady
-
>
MaybeResolve
(
this
)
;
}
}
void
Animation
:
:
UpdateTiming
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
{
UpdateFinishedState
(
aSeekFlag
aSyncNotifyFlag
)
;
UpdateEffect
(
)
;
if
(
mTimeline
)
{
mTimeline
-
>
NotifyAnimationUpdated
(
*
this
)
;
}
}
void
Animation
:
:
UpdateFinishedState
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
{
Nullable
<
TimeDuration
>
currentTime
=
GetCurrentTime
(
)
;
TimeDuration
effectEnd
=
TimeDuration
(
EffectEnd
(
)
)
;
if
(
!
mStartTime
.
IsNull
(
)
&
&
mPendingState
=
=
PendingState
:
:
NotPending
)
{
if
(
mPlaybackRate
>
0
.
0
&
&
!
currentTime
.
IsNull
(
)
&
&
currentTime
.
Value
(
)
>
=
effectEnd
)
{
if
(
aSeekFlag
=
=
SeekFlag
:
:
DidSeek
)
{
mHoldTime
=
currentTime
;
}
else
if
(
!
mPreviousCurrentTime
.
IsNull
(
)
)
{
mHoldTime
.
SetValue
(
std
:
:
max
(
mPreviousCurrentTime
.
Value
(
)
effectEnd
)
)
;
}
else
{
mHoldTime
.
SetValue
(
effectEnd
)
;
}
}
else
if
(
mPlaybackRate
<
0
.
0
&
&
!
currentTime
.
IsNull
(
)
&
&
currentTime
.
Value
(
)
<
=
TimeDuration
(
)
)
{
if
(
aSeekFlag
=
=
SeekFlag
:
:
DidSeek
)
{
mHoldTime
=
currentTime
;
}
else
if
(
!
mPreviousCurrentTime
.
IsNull
(
)
)
{
mHoldTime
.
SetValue
(
std
:
:
min
(
mPreviousCurrentTime
.
Value
(
)
TimeDuration
(
0
)
)
)
;
}
else
{
mHoldTime
.
SetValue
(
0
)
;
}
}
else
if
(
mPlaybackRate
!
=
0
.
0
&
&
!
currentTime
.
IsNull
(
)
&
&
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
if
(
aSeekFlag
=
=
SeekFlag
:
:
DidSeek
&
&
!
mHoldTime
.
IsNull
(
)
)
{
mStartTime
=
StartTimeFromTimelineTime
(
mTimeline
-
>
GetCurrentTime
(
)
.
Value
(
)
mHoldTime
.
Value
(
)
mPlaybackRate
)
;
}
mHoldTime
.
SetNull
(
)
;
}
}
bool
currentFinishedState
=
PlayState
(
)
=
=
AnimationPlayState
:
:
Finished
;
if
(
currentFinishedState
&
&
!
mFinishedIsResolved
)
{
DoFinishNotification
(
aSyncNotifyFlag
)
;
}
else
if
(
!
currentFinishedState
&
&
mFinishedIsResolved
)
{
ResetFinishedPromise
(
)
;
}
mPreviousCurrentTime
=
GetCurrentTime
(
)
;
}
void
Animation
:
:
UpdateEffect
(
)
{
if
(
mEffect
)
{
UpdateRelevance
(
)
;
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
-
>
AsKeyframeEffect
(
)
;
if
(
keyframeEffect
)
{
keyframeEffect
-
>
NotifyAnimationTimingUpdated
(
)
;
}
}
}
void
Animation
:
:
FlushStyle
(
)
const
{
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
doc
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Style
)
;
}
}
void
Animation
:
:
PostUpdate
(
)
{
if
(
!
mEffect
)
{
return
;
}
KeyframeEffectReadOnly
*
keyframeEffect
=
mEffect
-
>
AsKeyframeEffect
(
)
;
if
(
!
keyframeEffect
)
{
return
;
}
keyframeEffect
-
>
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
}
void
Animation
:
:
CancelPendingTasks
(
)
{
if
(
mPendingState
=
=
PendingState
:
:
NotPending
)
{
return
;
}
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
doc
)
{
PendingAnimationTracker
*
tracker
=
doc
-
>
GetPendingAnimationTracker
(
)
;
if
(
tracker
)
{
if
(
mPendingState
=
=
PendingState
:
:
PlayPending
)
{
tracker
-
>
RemovePlayPending
(
*
this
)
;
}
else
{
tracker
-
>
RemovePausePending
(
*
this
)
;
}
}
}
mPendingState
=
PendingState
:
:
NotPending
;
mPendingReadyTime
.
SetNull
(
)
;
}
void
Animation
:
:
ResetPendingTasks
(
)
{
if
(
mPendingState
=
=
PendingState
:
:
NotPending
)
{
return
;
}
CancelPendingTasks
(
)
;
ApplyPendingPlaybackRate
(
)
;
if
(
mReady
)
{
mReady
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
mReady
=
nullptr
;
}
}
bool
Animation
:
:
IsPossiblyOrphanedPendingAnimation
(
)
const
{
if
(
mPendingState
=
=
PendingState
:
:
NotPending
)
{
return
false
;
}
if
(
!
mPendingReadyTime
.
IsNull
(
)
)
{
return
false
;
}
if
(
!
mTimeline
|
|
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
)
{
return
false
;
}
nsIDocument
*
doc
=
GetRenderedDocument
(
)
;
if
(
!
doc
)
{
return
true
;
}
PendingAnimationTracker
*
tracker
=
doc
-
>
GetPendingAnimationTracker
(
)
;
return
!
tracker
|
|
(
!
tracker
-
>
IsWaitingToPlay
(
*
this
)
&
&
!
tracker
-
>
IsWaitingToPause
(
*
this
)
)
;
}
StickyTimeDuration
Animation
:
:
EffectEnd
(
)
const
{
if
(
!
mEffect
)
{
return
StickyTimeDuration
(
0
)
;
}
return
mEffect
-
>
SpecifiedTiming
(
)
.
EndTime
(
)
;
}
nsIDocument
*
Animation
:
:
GetRenderedDocument
(
)
const
{
if
(
!
mEffect
|
|
!
mEffect
-
>
AsKeyframeEffect
(
)
)
{
return
nullptr
;
}
return
mEffect
-
>
AsKeyframeEffect
(
)
-
>
GetRenderedDocument
(
)
;
}
void
Animation
:
:
DoFinishNotification
(
SyncNotifyFlag
aSyncNotifyFlag
)
{
CycleCollectedJSContext
*
context
=
CycleCollectedJSContext
:
:
Get
(
)
;
if
(
aSyncNotifyFlag
=
=
SyncNotifyFlag
:
:
Sync
)
{
DoFinishNotificationImmediately
(
)
;
}
else
if
(
!
mFinishNotificationTask
.
IsPending
(
)
)
{
RefPtr
<
nsRunnableMethod
<
Animation
>
>
runnable
=
NewRunnableMethod
(
"
dom
:
:
Animation
:
:
DoFinishNotificationImmediately
"
this
&
Animation
:
:
DoFinishNotificationImmediately
)
;
context
-
>
DispatchToMicroTask
(
do_AddRef
(
runnable
)
)
;
mFinishNotificationTask
=
runnable
.
forget
(
)
;
}
}
void
Animation
:
:
ResetFinishedPromise
(
)
{
mFinishedIsResolved
=
false
;
mFinished
=
nullptr
;
}
void
Animation
:
:
MaybeResolveFinishedPromise
(
)
{
if
(
mFinished
)
{
mFinished
-
>
MaybeResolve
(
this
)
;
}
mFinishedIsResolved
=
true
;
}
void
Animation
:
:
DoFinishNotificationImmediately
(
)
{
mFinishNotificationTask
.
Revoke
(
)
;
if
(
PlayState
(
)
!
=
AnimationPlayState
:
:
Finished
)
{
return
;
}
MaybeResolveFinishedPromise
(
)
;
DispatchPlaybackEvent
(
NS_LITERAL_STRING
(
"
finish
"
)
)
;
}
void
Animation
:
:
DispatchPlaybackEvent
(
const
nsAString
&
aName
)
{
AnimationPlaybackEventInit
init
;
if
(
aName
.
EqualsLiteral
(
"
finish
"
)
)
{
init
.
mCurrentTime
=
GetCurrentTimeAsDouble
(
)
;
}
if
(
mTimeline
)
{
init
.
mTimelineTime
=
mTimeline
-
>
GetCurrentTimeAsDouble
(
)
;
}
RefPtr
<
AnimationPlaybackEvent
>
event
=
AnimationPlaybackEvent
:
:
Constructor
(
this
aName
init
)
;
event
-
>
SetTrusted
(
true
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
event
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
bool
Animation
:
:
IsRunningOnCompositor
(
)
const
{
return
mEffect
&
&
mEffect
-
>
AsKeyframeEffect
(
)
&
&
mEffect
-
>
AsKeyframeEffect
(
)
-
>
IsRunningOnCompositor
(
)
;
}
#
ifdef
MOZ_OLD_STYLE
template
void
Animation
:
:
ComposeStyle
<
RefPtr
<
AnimValuesStyleRule
>
&
>
(
RefPtr
<
AnimValuesStyleRule
>
&
aAnimationRule
const
nsCSSPropertyIDSet
&
aPropertiesToSkip
)
;
#
endif
template
void
Animation
:
:
ComposeStyle
<
RawServoAnimationValueMap
&
>
(
RawServoAnimationValueMap
&
aAnimationValues
const
nsCSSPropertyIDSet
&
aPropertiesToSkip
)
;
}
}
