#
ifndef
mozilla_dom_Animation_h
#
define
mozilla_dom_Animation_h
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
mozilla
/
AnimationPerformanceWarning
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
AnimationBinding
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectReadOnly
.
h
"
#
include
"
mozilla
/
dom
/
AnimationTimeline
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
ifdef
CurrentTime
#
undef
CurrentTime
#
endif
#
ifdef
GetCurrentTime
#
undef
GetCurrentTime
#
endif
struct
JSContext
;
class
nsCSSPropertyIDSet
;
class
nsIDocument
;
class
nsIFrame
;
namespace
mozilla
{
struct
AnimationRule
;
namespace
dom
{
class
AsyncFinishNotification
;
class
CSSAnimation
;
class
CSSTransition
;
class
Animation
:
public
DOMEventTargetHelper
public
LinkedListElement
<
Animation
>
{
protected
:
virtual
~
Animation
(
)
{
}
public
:
explicit
Animation
(
nsIGlobalObject
*
aGlobal
)
:
DOMEventTargetHelper
(
aGlobal
)
mPlaybackRate
(
1
.
0
)
mPendingState
(
PendingState
:
:
NotPending
)
mAnimationIndex
(
sNextAnimationIndex
+
+
)
mFinishedAtLastComposeStyle
(
false
)
mIsRelevant
(
false
)
mFinishedIsResolved
(
false
)
mSyncWithGeometricAnimations
(
false
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
Animation
DOMEventTargetHelper
)
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
GetOwnerGlobal
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
CSSAnimation
*
AsCSSAnimation
(
)
{
return
nullptr
;
}
virtual
const
CSSAnimation
*
AsCSSAnimation
(
)
const
{
return
nullptr
;
}
virtual
CSSTransition
*
AsCSSTransition
(
)
{
return
nullptr
;
}
virtual
const
CSSTransition
*
AsCSSTransition
(
)
const
{
return
nullptr
;
}
enum
class
LimitBehavior
{
AutoRewind
Continue
}
;
static
already_AddRefed
<
Animation
>
Constructor
(
const
GlobalObject
&
aGlobal
AnimationEffectReadOnly
*
aEffect
const
Optional
<
AnimationTimeline
*
>
&
aTimeline
ErrorResult
&
aRv
)
;
void
GetId
(
nsAString
&
aResult
)
const
{
aResult
=
mId
;
}
void
SetId
(
const
nsAString
&
aId
)
;
AnimationEffectReadOnly
*
GetEffect
(
)
const
{
return
mEffect
;
}
void
SetEffect
(
AnimationEffectReadOnly
*
aEffect
)
;
AnimationTimeline
*
GetTimeline
(
)
const
{
return
mTimeline
;
}
void
SetTimeline
(
AnimationTimeline
*
aTimeline
)
;
Nullable
<
TimeDuration
>
GetStartTime
(
)
const
{
return
mStartTime
;
}
void
SetStartTime
(
const
Nullable
<
TimeDuration
>
&
aNewStartTime
)
;
Nullable
<
TimeDuration
>
GetCurrentTime
(
)
const
{
return
GetCurrentTimeForHoldTime
(
mHoldTime
)
;
}
void
SetCurrentTime
(
const
TimeDuration
&
aNewCurrentTime
)
;
double
PlaybackRate
(
)
const
{
return
mPlaybackRate
;
}
void
SetPlaybackRate
(
double
aPlaybackRate
)
;
AnimationPlayState
PlayState
(
)
const
;
bool
Pending
(
)
const
{
return
mPendingState
!
=
PendingState
:
:
NotPending
;
}
virtual
Promise
*
GetReady
(
ErrorResult
&
aRv
)
;
Promise
*
GetFinished
(
ErrorResult
&
aRv
)
;
void
Cancel
(
)
;
void
Finish
(
ErrorResult
&
aRv
)
;
virtual
void
Play
(
ErrorResult
&
aRv
LimitBehavior
aLimitBehavior
)
;
virtual
void
Pause
(
ErrorResult
&
aRv
)
;
void
Reverse
(
ErrorResult
&
aRv
)
;
void
UpdatePlaybackRate
(
double
aPlaybackRate
)
;
bool
IsRunningOnCompositor
(
)
const
;
IMPL_EVENT_HANDLER
(
finish
)
;
IMPL_EVENT_HANDLER
(
cancel
)
;
Nullable
<
double
>
GetStartTimeAsDouble
(
)
const
;
void
SetStartTimeAsDouble
(
const
Nullable
<
double
>
&
aStartTime
)
;
Nullable
<
double
>
GetCurrentTimeAsDouble
(
)
const
;
void
SetCurrentTimeAsDouble
(
const
Nullable
<
double
>
&
aCurrentTime
ErrorResult
&
aRv
)
;
virtual
AnimationPlayState
PlayStateFromJS
(
)
const
{
return
PlayState
(
)
;
}
virtual
bool
PendingFromJS
(
)
const
{
return
Pending
(
)
;
}
virtual
void
PlayFromJS
(
ErrorResult
&
aRv
)
{
Play
(
aRv
LimitBehavior
:
:
AutoRewind
)
;
}
void
PauseFromJS
(
ErrorResult
&
aRv
)
{
Pause
(
aRv
)
;
}
virtual
void
CancelFromStyle
(
)
{
CancelNoUpdate
(
)
;
}
void
SetTimelineNoUpdate
(
AnimationTimeline
*
aTimeline
)
;
void
SetEffectNoUpdate
(
AnimationEffectReadOnly
*
aEffect
)
;
virtual
void
Tick
(
)
;
bool
NeedsTicks
(
)
const
{
return
Pending
(
)
|
|
PlayState
(
)
=
=
AnimationPlayState
:
:
Running
;
}
void
TriggerOnNextTick
(
const
Nullable
<
TimeDuration
>
&
aReadyTime
)
;
void
TriggerNow
(
)
;
Nullable
<
TimeDuration
>
GetCurrentOrPendingStartTime
(
)
const
;
double
CurrentOrPendingPlaybackRate
(
)
const
{
return
mPendingPlaybackRate
.
valueOr
(
mPlaybackRate
)
;
}
bool
HasPendingPlaybackRate
(
)
const
{
return
mPendingPlaybackRate
.
isSome
(
)
;
}
static
TimeDuration
CurrentTimeFromTimelineTime
(
const
TimeDuration
&
aTimelineTime
const
TimeDuration
&
aStartTime
float
aPlaybackRate
)
{
return
(
aTimelineTime
-
aStartTime
)
.
MultDouble
(
aPlaybackRate
)
;
}
static
TimeDuration
StartTimeFromTimelineTime
(
const
TimeDuration
&
aTimelineTime
const
TimeDuration
&
aCurrentTime
float
aPlaybackRate
)
{
TimeDuration
result
=
aTimelineTime
;
if
(
aPlaybackRate
=
=
0
)
{
return
result
;
}
result
-
=
aCurrentTime
.
MultDouble
(
1
.
0
/
aPlaybackRate
)
;
return
result
;
}
TimeStamp
AnimationTimeToTimeStamp
(
const
StickyTimeDuration
&
aTime
)
const
;
TimeStamp
ElapsedTimeToTimeStamp
(
const
StickyTimeDuration
&
aElapsedTime
)
const
;
bool
IsPausedOrPausing
(
)
const
{
return
PlayState
(
)
=
=
AnimationPlayState
:
:
Paused
;
}
bool
HasCurrentEffect
(
)
const
{
return
GetEffect
(
)
&
&
GetEffect
(
)
-
>
IsCurrent
(
)
;
}
bool
IsInEffect
(
)
const
{
return
GetEffect
(
)
&
&
GetEffect
(
)
-
>
IsInEffect
(
)
;
}
bool
IsPlaying
(
)
const
{
return
mPlaybackRate
!
=
0
.
0
&
&
mTimeline
&
&
!
mTimeline
-
>
GetCurrentTime
(
)
.
IsNull
(
)
&
&
PlayState
(
)
=
=
AnimationPlayState
:
:
Running
;
}
bool
ShouldBeSynchronizedWithMainThread
(
nsCSSPropertyID
aProperty
const
nsIFrame
*
aFrame
AnimationPerformanceWarning
:
:
Type
&
aPerformanceWarning
)
const
;
bool
IsRelevant
(
)
const
{
return
mIsRelevant
;
}
void
UpdateRelevance
(
)
;
bool
HasLowerCompositeOrderThan
(
const
Animation
&
aOther
)
const
;
virtual
EffectCompositor
:
:
CascadeLevel
CascadeLevel
(
)
const
{
return
EffectCompositor
:
:
CascadeLevel
:
:
Animations
;
}
bool
CanThrottle
(
)
const
;
void
WillComposeStyle
(
)
;
void
ComposeStyle
(
RawServoAnimationValueMap
&
aComposeResult
const
nsCSSPropertyIDSet
&
aPropertiesToSkip
)
;
void
NotifyEffectTimingUpdated
(
)
;
void
NotifyGeometricAnimationsStartingThisFrame
(
)
;
virtual
void
MaybeQueueCancelEvent
(
const
StickyTimeDuration
&
aActiveTime
)
{
}
;
protected
:
void
SilentlySetCurrentTime
(
const
TimeDuration
&
aNewCurrentTime
)
;
void
CancelNoUpdate
(
)
;
void
PlayNoUpdate
(
ErrorResult
&
aRv
LimitBehavior
aLimitBehavior
)
;
void
ResumeAt
(
const
TimeDuration
&
aReadyTime
)
;
void
PauseAt
(
const
TimeDuration
&
aReadyTime
)
;
void
FinishPendingAt
(
const
TimeDuration
&
aReadyTime
)
{
if
(
mPendingState
=
=
PendingState
:
:
PlayPending
)
{
ResumeAt
(
aReadyTime
)
;
}
else
if
(
mPendingState
=
=
PendingState
:
:
PausePending
)
{
PauseAt
(
aReadyTime
)
;
}
else
{
NS_NOTREACHED
(
"
Can
'
t
finish
pending
if
we
'
re
not
in
a
pending
state
"
)
;
}
}
void
ApplyPendingPlaybackRate
(
)
{
if
(
mPendingPlaybackRate
)
{
mPlaybackRate
=
*
mPendingPlaybackRate
;
mPendingPlaybackRate
.
reset
(
)
;
}
}
enum
class
SeekFlag
{
NoSeek
DidSeek
}
;
enum
class
SyncNotifyFlag
{
Sync
Async
}
;
virtual
void
UpdateTiming
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
;
void
UpdateFinishedState
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
;
void
UpdateEffect
(
)
;
void
FlushUnanimatedStyle
(
)
const
;
void
PostUpdate
(
)
;
void
ResetFinishedPromise
(
)
;
void
MaybeResolveFinishedPromise
(
)
;
void
DoFinishNotification
(
SyncNotifyFlag
aSyncNotifyFlag
)
;
friend
class
AsyncFinishNotification
;
void
DoFinishNotificationImmediately
(
MicroTaskRunnable
*
aAsync
=
nullptr
)
;
void
DispatchPlaybackEvent
(
const
nsAString
&
aName
)
;
void
CancelPendingTasks
(
)
;
void
ResetPendingTasks
(
)
;
bool
IsNewlyStarted
(
)
const
{
return
mPendingState
=
=
PendingState
:
:
PlayPending
&
&
mPendingReadyTime
.
IsNull
(
)
&
&
mStartTime
.
IsNull
(
)
;
}
bool
IsPossiblyOrphanedPendingAnimation
(
)
const
;
StickyTimeDuration
EffectEnd
(
)
const
;
Nullable
<
TimeDuration
>
GetCurrentTimeForHoldTime
(
const
Nullable
<
TimeDuration
>
&
aHoldTime
)
const
;
Nullable
<
TimeDuration
>
GetUnconstrainedCurrentTime
(
)
const
{
return
GetCurrentTimeForHoldTime
(
Nullable
<
TimeDuration
>
(
)
)
;
}
nsIDocument
*
GetRenderedDocument
(
)
const
;
RefPtr
<
AnimationTimeline
>
mTimeline
;
RefPtr
<
AnimationEffectReadOnly
>
mEffect
;
Nullable
<
TimeDuration
>
mStartTime
;
Nullable
<
TimeDuration
>
mHoldTime
;
Nullable
<
TimeDuration
>
mPendingReadyTime
;
Nullable
<
TimeDuration
>
mPreviousCurrentTime
;
double
mPlaybackRate
;
Maybe
<
double
>
mPendingPlaybackRate
;
RefPtr
<
Promise
>
mReady
;
RefPtr
<
Promise
>
mFinished
;
enum
class
PendingState
{
NotPending
PlayPending
PausePending
}
;
PendingState
mPendingState
;
static
uint64_t
sNextAnimationIndex
;
uint64_t
mAnimationIndex
;
bool
mFinishedAtLastComposeStyle
;
bool
mIsRelevant
;
RefPtr
<
MicroTaskRunnable
>
mFinishNotificationTask
;
bool
mFinishedIsResolved
;
bool
mSyncWithGeometricAnimations
;
nsString
mId
;
}
;
}
}
#
endif
