#
ifndef
mozilla_ElementAnimationData_h
#
define
mozilla_ElementAnimationData_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
PseudoStyleType
.
h
"
class
nsCycleCollectionTraversalCallback
;
namespace
mozilla
{
enum
class
PseudoStyleType
:
uint8_t
;
class
EffectSet
;
template
<
typename
Animation
>
class
AnimationCollection
;
namespace
dom
{
class
Element
;
class
CSSAnimation
;
class
CSSTransition
;
}
using
CSSAnimationCollection
=
AnimationCollection
<
dom
:
:
CSSAnimation
>
;
using
CSSTransitionCollection
=
AnimationCollection
<
dom
:
:
CSSTransition
>
;
class
ElementAnimationData
{
struct
PerElementOrPseudoData
{
UniquePtr
<
EffectSet
>
mEffectSet
;
UniquePtr
<
CSSAnimationCollection
>
mAnimations
;
UniquePtr
<
CSSTransitionCollection
>
mTransitions
;
PerElementOrPseudoData
(
)
;
~
PerElementOrPseudoData
(
)
;
EffectSet
&
DoEnsureEffectSet
(
)
;
CSSTransitionCollection
&
DoEnsureTransitions
(
dom
:
:
Element
&
PseudoStyleType
)
;
CSSAnimationCollection
&
DoEnsureAnimations
(
dom
:
:
Element
&
PseudoStyleType
)
;
void
DoClearEffectSet
(
)
;
void
DoClearTransitions
(
)
;
void
DoClearAnimations
(
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
)
;
}
;
PerElementOrPseudoData
mElementData
;
PerElementOrPseudoData
mBeforeData
;
PerElementOrPseudoData
mAfterData
;
PerElementOrPseudoData
mMarkerData
;
const
PerElementOrPseudoData
&
DataFor
(
PseudoStyleType
aType
)
const
{
switch
(
aType
)
{
case
PseudoStyleType
:
:
NotPseudo
:
break
;
case
PseudoStyleType
:
:
before
:
return
mBeforeData
;
case
PseudoStyleType
:
:
after
:
return
mAfterData
;
case
PseudoStyleType
:
:
marker
:
return
mMarkerData
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Should
not
try
to
get
animation
effects
for
"
"
a
pseudo
other
that
:
before
:
after
or
:
:
marker
"
)
;
break
;
}
return
mElementData
;
}
PerElementOrPseudoData
&
DataFor
(
PseudoStyleType
aType
)
{
const
auto
&
data
=
const_cast
<
const
ElementAnimationData
*
>
(
this
)
-
>
DataFor
(
aType
)
;
return
const_cast
<
PerElementOrPseudoData
&
>
(
data
)
;
}
public
:
void
Traverse
(
nsCycleCollectionTraversalCallback
&
)
;
void
ClearAllAnimationCollections
(
)
;
EffectSet
*
GetEffectSetFor
(
PseudoStyleType
aType
)
const
{
return
DataFor
(
aType
)
.
mEffectSet
.
get
(
)
;
}
void
ClearEffectSetFor
(
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
data
.
mEffectSet
)
{
data
.
DoClearEffectSet
(
)
;
}
}
EffectSet
&
EnsureEffectSetFor
(
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
auto
*
set
=
data
.
mEffectSet
.
get
(
)
)
{
return
*
set
;
}
return
data
.
DoEnsureEffectSet
(
)
;
}
CSSTransitionCollection
*
GetTransitionCollection
(
PseudoStyleType
aType
)
{
return
DataFor
(
aType
)
.
mTransitions
.
get
(
)
;
}
void
ClearTransitionCollectionFor
(
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
data
.
mTransitions
)
{
data
.
DoClearTransitions
(
)
;
}
}
CSSTransitionCollection
&
EnsureTransitionCollection
(
dom
:
:
Element
&
aOwner
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
auto
*
collection
=
data
.
mTransitions
.
get
(
)
)
{
return
*
collection
;
}
return
data
.
DoEnsureTransitions
(
aOwner
aType
)
;
}
CSSAnimationCollection
*
GetAnimationCollection
(
PseudoStyleType
aType
)
{
return
DataFor
(
aType
)
.
mAnimations
.
get
(
)
;
}
void
ClearAnimationCollectionFor
(
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
data
.
mAnimations
)
{
data
.
DoClearAnimations
(
)
;
}
}
CSSAnimationCollection
&
EnsureAnimationCollection
(
dom
:
:
Element
&
aOwner
PseudoStyleType
aType
)
{
auto
&
data
=
DataFor
(
aType
)
;
if
(
auto
*
collection
=
data
.
mAnimations
.
get
(
)
)
{
return
*
collection
;
}
return
data
.
DoEnsureAnimations
(
aOwner
aType
)
;
}
ElementAnimationData
(
)
=
default
;
}
;
}
#
endif
