#
include
"
mozilla
/
KeyframeUtils
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
TimingParams
.
h
"
#
include
"
mozilla
/
dom
/
BaseKeyframeTypesBinding
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffectBinding
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCSSParser
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
enum
class
ListAllowance
{
eDisallow
eAllow
}
;
class
PropertyPriorityComparator
{
public
:
PropertyPriorityComparator
(
)
:
mSubpropertyCountInitialized
(
false
)
{
}
bool
Equals
(
nsCSSProperty
aLhs
nsCSSProperty
aRhs
)
const
{
return
aLhs
=
=
aRhs
;
}
bool
LessThan
(
nsCSSProperty
aLhs
nsCSSProperty
aRhs
)
const
{
bool
isShorthandLhs
=
nsCSSProps
:
:
IsShorthand
(
aLhs
)
;
bool
isShorthandRhs
=
nsCSSProps
:
:
IsShorthand
(
aRhs
)
;
if
(
isShorthandLhs
)
{
if
(
isShorthandRhs
)
{
uint32_t
subpropCountLhs
=
SubpropertyCount
(
aLhs
)
;
uint32_t
subpropCountRhs
=
SubpropertyCount
(
aRhs
)
;
if
(
subpropCountLhs
!
=
subpropCountRhs
)
{
return
subpropCountLhs
<
subpropCountRhs
;
}
}
else
{
return
false
;
}
}
else
{
if
(
isShorthandRhs
)
{
return
true
;
}
}
return
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aLhs
)
<
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aRhs
)
;
}
uint32_t
SubpropertyCount
(
nsCSSProperty
aProperty
)
const
{
if
(
!
mSubpropertyCountInitialized
)
{
PodZero
(
&
mSubpropertyCount
)
;
mSubpropertyCountInitialized
=
true
;
}
if
(
mSubpropertyCount
[
aProperty
]
=
=
0
)
{
uint32_t
count
=
0
;
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
p
aProperty
CSSEnabledState
:
:
eForAllContent
)
{
+
+
count
;
}
mSubpropertyCount
[
aProperty
]
=
count
;
}
return
mSubpropertyCount
[
aProperty
]
;
}
private
:
mutable
RangedArray
<
uint32_t
eCSSProperty_COUNT_no_shorthands
eCSSProperty_COUNT
-
eCSSProperty_COUNT_no_shorthands
>
mSubpropertyCount
;
mutable
bool
mSubpropertyCountInitialized
;
}
;
template
<
typename
T
>
class
TPropertyPriorityComparator
:
PropertyPriorityComparator
{
public
:
bool
Equals
(
const
T
&
aLhs
const
T
&
aRhs
)
const
{
return
PropertyPriorityComparator
:
:
Equals
(
aLhs
.
mProperty
aRhs
.
mProperty
)
;
}
bool
LessThan
(
const
T
&
aLhs
const
T
&
aRhs
)
const
{
return
PropertyPriorityComparator
:
:
LessThan
(
aLhs
.
mProperty
aRhs
.
mProperty
)
;
}
}
;
class
PropertyPriorityIterator
{
public
:
explicit
PropertyPriorityIterator
(
const
nsTArray
<
PropertyValuePair
>
&
aProperties
)
:
mProperties
(
aProperties
)
{
mSortedPropertyIndices
.
SetCapacity
(
mProperties
.
Length
(
)
)
;
for
(
size_t
i
=
0
len
=
mProperties
.
Length
(
)
;
i
<
len
;
+
+
i
)
{
PropertyAndIndex
propertyIndex
=
{
mProperties
[
i
]
.
mProperty
i
}
;
mSortedPropertyIndices
.
AppendElement
(
propertyIndex
)
;
}
mSortedPropertyIndices
.
Sort
(
PropertyAndIndex
:
:
Comparator
(
)
)
;
}
class
Iter
{
public
:
explicit
Iter
(
const
PropertyPriorityIterator
&
aParent
)
:
mParent
(
aParent
)
mIndex
(
0
)
{
}
static
Iter
EndIter
(
const
PropertyPriorityIterator
&
aParent
)
{
Iter
iter
(
aParent
)
;
iter
.
mIndex
=
aParent
.
mSortedPropertyIndices
.
Length
(
)
;
return
iter
;
}
bool
operator
!
=
(
const
Iter
&
aOther
)
const
{
return
mIndex
!
=
aOther
.
mIndex
;
}
Iter
&
operator
+
+
(
)
{
MOZ_ASSERT
(
mIndex
+
1
<
=
mParent
.
mSortedPropertyIndices
.
Length
(
)
"
Should
not
seek
past
end
iterator
"
)
;
mIndex
+
+
;
return
*
this
;
}
const
PropertyValuePair
&
operator
*
(
)
{
MOZ_ASSERT
(
mIndex
<
mParent
.
mSortedPropertyIndices
.
Length
(
)
"
Should
not
try
to
dereference
an
end
iterator
"
)
;
return
mParent
.
mProperties
[
mParent
.
mSortedPropertyIndices
[
mIndex
]
.
mIndex
]
;
}
private
:
const
PropertyPriorityIterator
&
mParent
;
size_t
mIndex
;
}
;
Iter
begin
(
)
{
return
Iter
(
*
this
)
;
}
Iter
end
(
)
{
return
Iter
:
:
EndIter
(
*
this
)
;
}
private
:
struct
PropertyAndIndex
{
nsCSSProperty
mProperty
;
size_t
mIndex
;
typedef
TPropertyPriorityComparator
<
PropertyAndIndex
>
Comparator
;
}
;
const
nsTArray
<
PropertyValuePair
>
&
mProperties
;
nsTArray
<
PropertyAndIndex
>
mSortedPropertyIndices
;
}
;
struct
PropertyValuesPair
{
nsCSSProperty
mProperty
;
nsTArray
<
nsString
>
mValues
;
typedef
TPropertyPriorityComparator
<
PropertyValuesPair
>
Comparator
;
}
;
struct
AdditionalProperty
{
nsCSSProperty
mProperty
;
size_t
mJsidIndex
;
struct
PropertyComparator
{
bool
Equals
(
const
AdditionalProperty
&
aLhs
const
AdditionalProperty
&
aRhs
)
const
{
return
aLhs
.
mProperty
=
=
aRhs
.
mProperty
;
}
bool
LessThan
(
const
AdditionalProperty
&
aLhs
const
AdditionalProperty
&
aRhs
)
const
{
return
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aLhs
.
mProperty
)
<
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aRhs
.
mProperty
)
;
}
}
;
}
;
struct
KeyframeValueEntry
{
nsCSSProperty
mProperty
;
StyleAnimationValue
mValue
;
float
mOffset
;
Maybe
<
ComputedTimingFunction
>
mTimingFunction
;
struct
PropertyOffsetComparator
{
static
bool
Equals
(
const
KeyframeValueEntry
&
aLhs
const
KeyframeValueEntry
&
aRhs
)
{
return
aLhs
.
mProperty
=
=
aRhs
.
mProperty
&
&
aLhs
.
mOffset
=
=
aRhs
.
mOffset
;
}
static
bool
LessThan
(
const
KeyframeValueEntry
&
aLhs
const
KeyframeValueEntry
&
aRhs
)
{
int32_t
order
=
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aLhs
.
mProperty
)
-
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aRhs
.
mProperty
)
;
if
(
order
!
=
0
)
{
return
order
<
0
;
}
return
aLhs
.
mOffset
<
aRhs
.
mOffset
;
}
}
;
}
;
class
ComputedOffsetComparator
{
public
:
static
bool
Equals
(
const
Keyframe
&
aLhs
const
Keyframe
&
aRhs
)
{
return
aLhs
.
mComputedOffset
=
=
aRhs
.
mComputedOffset
;
}
static
bool
LessThan
(
const
Keyframe
&
aLhs
const
Keyframe
&
aRhs
)
{
return
aLhs
.
mComputedOffset
<
aRhs
.
mComputedOffset
;
}
}
;
inline
bool
IsInvalidValuePair
(
const
PropertyValuePair
&
aPair
)
{
return
!
nsCSSProps
:
:
IsShorthand
(
aPair
.
mProperty
)
&
&
aPair
.
mValue
.
GetUnit
(
)
=
=
eCSSUnit_TokenStream
&
&
aPair
.
mValue
.
GetTokenStreamValue
(
)
-
>
mPropertyID
=
=
eCSSProperty_UNKNOWN
;
}
static
void
GetKeyframeListFromKeyframeSequence
(
JSContext
*
aCx
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
ConvertKeyframeSequence
(
JSContext
*
aCx
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
)
;
static
bool
GetPropertyValuesPairs
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
ListAllowance
aAllowLists
nsTArray
<
PropertyValuesPair
>
&
aResult
)
;
static
bool
AppendStringOrStringSequenceToArray
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ListAllowance
aAllowLists
nsTArray
<
nsString
>
&
aValues
)
;
static
bool
AppendValueAsString
(
JSContext
*
aCx
nsTArray
<
nsString
>
&
aValues
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
static
PropertyValuePair
MakePropertyValuePair
(
nsCSSProperty
aProperty
const
nsAString
&
aStringValue
nsCSSParser
&
aParser
nsIDocument
*
aDocument
)
;
static
bool
HasValidOffsets
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
)
;
static
void
MarkAsComputeValuesFailureKey
(
PropertyValuePair
&
aPair
)
;
static
bool
IsComputeValuesFailureKey
(
const
PropertyValuePair
&
aPair
)
;
static
void
BuildSegmentsFromValueEntries
(
nsStyleContext
*
aStyleContext
nsTArray
<
KeyframeValueEntry
>
&
aEntries
nsTArray
<
AnimationProperty
>
&
aResult
)
;
static
void
GetKeyframeListFromPropertyIndexedKeyframe
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
RequiresAdditiveAnimation
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
nsIDocument
*
aDocument
)
;
nsTArray
<
Keyframe
>
KeyframeUtils
:
:
GetKeyframesFromObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aFrames
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
nsTArray
<
Keyframe
>
keyframes
;
if
(
!
aFrames
)
{
return
keyframes
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
objectValue
(
aCx
JS
:
:
ObjectValue
(
*
aFrames
)
)
;
JS
:
:
ForOfIterator
iter
(
aCx
)
;
if
(
!
iter
.
init
(
objectValue
JS
:
:
ForOfIterator
:
:
AllowNonIterable
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
keyframes
;
}
if
(
iter
.
valueIsIterable
(
)
)
{
GetKeyframeListFromKeyframeSequence
(
aCx
iter
keyframes
aRv
)
;
}
else
{
GetKeyframeListFromPropertyIndexedKeyframe
(
aCx
objectValue
keyframes
aRv
)
;
}
if
(
aRv
.
Failed
(
)
)
{
MOZ_ASSERT
(
keyframes
.
IsEmpty
(
)
"
Should
not
set
any
keyframes
when
there
is
an
error
"
)
;
return
keyframes
;
}
nsIDocument
*
doc
=
AnimationUtils
:
:
GetCurrentRealmDocument
(
aCx
)
;
if
(
!
doc
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
keyframes
.
Clear
(
)
;
return
keyframes
;
}
if
(
RequiresAdditiveAnimation
(
keyframes
doc
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_ANIM_MISSING_PROPS_ERR
)
;
keyframes
.
Clear
(
)
;
}
return
keyframes
;
}
void
KeyframeUtils
:
:
ApplyDistributeSpacing
(
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
if
(
aKeyframes
.
IsEmpty
(
)
)
{
return
;
}
Keyframe
&
lastElement
=
aKeyframes
.
LastElement
(
)
;
lastElement
.
mComputedOffset
=
lastElement
.
mOffset
.
valueOr
(
1
.
0
)
;
if
(
aKeyframes
.
Length
(
)
>
1
)
{
Keyframe
&
firstElement
=
aKeyframes
[
0
]
;
firstElement
.
mComputedOffset
=
firstElement
.
mOffset
.
valueOr
(
0
.
0
)
;
}
size_t
i
=
0
;
while
(
i
<
aKeyframes
.
Length
(
)
-
1
)
{
double
start
=
aKeyframes
[
i
]
.
mComputedOffset
;
size_t
j
=
i
+
1
;
while
(
aKeyframes
[
j
]
.
mOffset
.
isNothing
(
)
&
&
j
<
aKeyframes
.
Length
(
)
-
1
)
{
+
+
j
;
}
double
end
=
aKeyframes
[
j
]
.
mOffset
.
valueOr
(
1
.
0
)
;
size_t
n
=
j
-
i
;
for
(
size_t
k
=
1
;
k
<
n
;
+
+
k
)
{
double
offset
=
start
+
double
(
k
)
/
n
*
(
end
-
start
)
;
aKeyframes
[
i
+
k
]
.
mComputedOffset
=
offset
;
}
i
=
j
;
aKeyframes
[
j
]
.
mComputedOffset
=
end
;
}
}
nsTArray
<
AnimationProperty
>
KeyframeUtils
:
:
GetAnimationPropertiesFromKeyframes
(
nsStyleContext
*
aStyleContext
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
const
nsTArray
<
Keyframe
>
&
aFrames
)
{
MOZ_ASSERT
(
aStyleContext
)
;
MOZ_ASSERT
(
aElement
)
;
nsTArray
<
KeyframeValueEntry
>
entries
;
for
(
const
Keyframe
&
frame
:
aFrames
)
{
nsCSSPropertySet
propertiesOnThisKeyframe
;
for
(
const
PropertyValuePair
&
pair
:
PropertyPriorityIterator
(
frame
.
mPropertyValues
)
)
{
if
(
IsInvalidValuePair
(
pair
)
)
{
continue
;
}
nsTArray
<
PropertyStyleAnimationValuePair
>
values
;
if
(
nsCSSProps
:
:
IsShorthand
(
pair
.
mProperty
)
)
{
nsCSSValueTokenStream
*
tokenStream
=
pair
.
mValue
.
GetTokenStreamValue
(
)
;
if
(
!
StyleAnimationValue
:
:
ComputeValues
(
pair
.
mProperty
CSSEnabledState
:
:
eForAllContent
aElement
aStyleContext
tokenStream
-
>
mTokenStream
false
values
)
|
|
IsComputeValuesFailureKey
(
pair
)
)
{
continue
;
}
}
else
{
if
(
!
StyleAnimationValue
:
:
ComputeValues
(
pair
.
mProperty
CSSEnabledState
:
:
eForAllContent
aElement
aStyleContext
pair
.
mValue
false
values
)
)
{
continue
;
}
MOZ_ASSERT
(
values
.
Length
(
)
=
=
1
"
Longhand
properties
should
produce
a
single
"
"
StyleAnimationValue
"
)
;
}
for
(
auto
&
value
:
values
)
{
if
(
propertiesOnThisKeyframe
.
HasProperty
(
value
.
mProperty
)
)
{
continue
;
}
KeyframeValueEntry
*
entry
=
entries
.
AppendElement
(
)
;
entry
-
>
mOffset
=
frame
.
mComputedOffset
;
entry
-
>
mProperty
=
value
.
mProperty
;
entry
-
>
mValue
=
value
.
mValue
;
entry
-
>
mTimingFunction
=
frame
.
mTimingFunction
;
propertiesOnThisKeyframe
.
AddProperty
(
value
.
mProperty
)
;
}
}
}
nsTArray
<
AnimationProperty
>
result
;
BuildSegmentsFromValueEntries
(
aStyleContext
entries
result
)
;
return
result
;
}
bool
KeyframeUtils
:
:
IsAnimatableProperty
(
nsCSSProperty
aProperty
)
{
if
(
aProperty
=
=
eCSSProperty_UNKNOWN
)
{
return
false
;
}
if
(
!
nsCSSProps
:
:
IsShorthand
(
aProperty
)
)
{
return
nsCSSProps
:
:
kAnimTypeTable
[
aProperty
]
!
=
eStyleAnimType_None
;
}
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
subprop
aProperty
CSSEnabledState
:
:
eForAllContent
)
{
if
(
nsCSSProps
:
:
kAnimTypeTable
[
*
subprop
]
!
=
eStyleAnimType_None
)
{
return
true
;
}
}
return
false
;
}
static
void
GetKeyframeListFromKeyframeSequence
(
JSContext
*
aCx
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
)
;
if
(
!
ConvertKeyframeSequence
(
aCx
aIterator
aResult
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
aResult
.
Clear
(
)
;
return
;
}
if
(
aResult
.
IsEmpty
(
)
)
{
return
;
}
if
(
!
HasValidOffsets
(
aResult
)
)
{
aRv
.
ThrowTypeError
<
dom
:
:
MSG_INVALID_KEYFRAME_OFFSETS
>
(
)
;
aResult
.
Clear
(
)
;
return
;
}
}
static
bool
ConvertKeyframeSequence
(
JSContext
*
aCx
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
)
{
nsIDocument
*
doc
=
AnimationUtils
:
:
GetCurrentRealmDocument
(
aCx
)
;
if
(
!
doc
)
{
return
false
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
)
;
nsCSSParser
parser
(
doc
-
>
CSSLoader
(
)
)
;
for
(
;
;
)
{
bool
done
;
if
(
!
aIterator
.
next
(
&
value
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
!
value
.
isObject
(
)
&
&
!
value
.
isNullOrUndefined
(
)
)
{
dom
:
:
ThrowErrorMessage
(
aCx
dom
:
:
MSG_NOT_OBJECT
"
Element
of
sequence
<
Keyframe
>
argument
"
)
;
return
false
;
}
dom
:
:
binding_detail
:
:
FastBaseKeyframe
keyframeDict
;
if
(
!
keyframeDict
.
Init
(
aCx
value
"
Element
of
sequence
<
Keyframe
>
argument
"
)
)
{
return
false
;
}
Keyframe
*
keyframe
=
aResult
.
AppendElement
(
fallible
)
;
if
(
!
keyframe
)
{
return
false
;
}
if
(
!
keyframeDict
.
mOffset
.
IsNull
(
)
)
{
keyframe
-
>
mOffset
.
emplace
(
keyframeDict
.
mOffset
.
Value
(
)
)
;
}
ErrorResult
rv
;
keyframe
-
>
mTimingFunction
=
TimingParams
:
:
ParseEasing
(
keyframeDict
.
mEasing
doc
rv
)
;
if
(
rv
.
MaybeSetPendingException
(
aCx
)
)
{
return
false
;
}
nsTArray
<
PropertyValuesPair
>
propertyValuePairs
;
if
(
value
.
isObject
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
object
(
aCx
&
value
.
toObject
(
)
)
;
if
(
!
GetPropertyValuesPairs
(
aCx
object
ListAllowance
:
:
eDisallow
propertyValuePairs
)
)
{
return
false
;
}
}
for
(
PropertyValuesPair
&
pair
:
propertyValuePairs
)
{
MOZ_ASSERT
(
pair
.
mValues
.
Length
(
)
=
=
1
)
;
keyframe
-
>
mPropertyValues
.
AppendElement
(
MakePropertyValuePair
(
pair
.
mProperty
pair
.
mValues
[
0
]
parser
doc
)
)
;
if
(
nsCSSProps
:
:
IsShorthand
(
pair
.
mProperty
)
&
&
keyframeDict
.
mSimulateComputeValuesFailure
)
{
MarkAsComputeValuesFailureKey
(
keyframe
-
>
mPropertyValues
.
LastElement
(
)
)
;
}
}
}
return
true
;
}
static
bool
GetPropertyValuesPairs
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
ListAllowance
aAllowLists
nsTArray
<
PropertyValuesPair
>
&
aResult
)
{
nsTArray
<
AdditionalProperty
>
properties
;
JS
:
:
Rooted
<
JS
:
:
IdVector
>
ids
(
aCx
JS
:
:
IdVector
(
aCx
)
)
;
if
(
!
JS_Enumerate
(
aCx
aObject
&
ids
)
)
{
return
false
;
}
for
(
size_t
i
=
0
n
=
ids
.
length
(
)
;
i
<
n
;
i
+
+
)
{
nsAutoJSString
propName
;
if
(
!
propName
.
init
(
aCx
ids
[
i
]
)
)
{
return
false
;
}
nsCSSProperty
property
=
nsCSSProps
:
:
LookupPropertyByIDLName
(
propName
CSSEnabledState
:
:
eForAllContent
)
;
if
(
KeyframeUtils
:
:
IsAnimatableProperty
(
property
)
)
{
AdditionalProperty
*
p
=
properties
.
AppendElement
(
)
;
p
-
>
mProperty
=
property
;
p
-
>
mJsidIndex
=
i
;
}
}
properties
.
Sort
(
AdditionalProperty
:
:
PropertyComparator
(
)
)
;
for
(
AdditionalProperty
&
p
:
properties
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
)
;
if
(
!
JS_GetPropertyById
(
aCx
aObject
ids
[
p
.
mJsidIndex
]
&
value
)
)
{
return
false
;
}
PropertyValuesPair
*
pair
=
aResult
.
AppendElement
(
)
;
pair
-
>
mProperty
=
p
.
mProperty
;
if
(
!
AppendStringOrStringSequenceToArray
(
aCx
value
aAllowLists
pair
-
>
mValues
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
AppendStringOrStringSequenceToArray
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ListAllowance
aAllowLists
nsTArray
<
nsString
>
&
aValues
)
{
if
(
aAllowLists
=
=
ListAllowance
:
:
eAllow
&
&
aValue
.
isObject
(
)
)
{
JS
:
:
ForOfIterator
iter
(
aCx
)
;
if
(
!
iter
.
init
(
aValue
JS
:
:
ForOfIterator
:
:
AllowNonIterable
)
)
{
return
false
;
}
if
(
iter
.
valueIsIterable
(
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
element
(
aCx
)
;
for
(
;
;
)
{
bool
done
;
if
(
!
iter
.
next
(
&
element
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
!
AppendValueAsString
(
aCx
aValues
element
)
)
{
return
false
;
}
}
return
true
;
}
}
if
(
!
AppendValueAsString
(
aCx
aValues
aValue
)
)
{
return
false
;
}
return
true
;
}
static
bool
AppendValueAsString
(
JSContext
*
aCx
nsTArray
<
nsString
>
&
aValues
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
return
ConvertJSValueToString
(
aCx
aValue
dom
:
:
eStringify
dom
:
:
eStringify
*
aValues
.
AppendElement
(
)
)
;
}
static
PropertyValuePair
MakePropertyValuePair
(
nsCSSProperty
aProperty
const
nsAString
&
aStringValue
nsCSSParser
&
aParser
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
nsCSSValue
value
;
if
(
!
nsCSSProps
:
:
IsShorthand
(
aProperty
)
)
{
aParser
.
ParseLonghandProperty
(
aProperty
aStringValue
aDocument
-
>
GetDocumentURI
(
)
aDocument
-
>
GetDocumentURI
(
)
aDocument
-
>
NodePrincipal
(
)
value
)
;
}
if
(
value
.
GetUnit
(
)
=
=
eCSSUnit_Null
)
{
nsCSSValueTokenStream
*
tokenStream
=
new
nsCSSValueTokenStream
;
tokenStream
-
>
mTokenStream
=
aStringValue
;
MOZ_ASSERT
(
tokenStream
-
>
mPropertyID
=
=
eCSSProperty_UNKNOWN
"
The
property
of
a
token
stream
should
be
initialized
"
"
to
unknown
"
)
;
MOZ_ASSERT
(
tokenStream
-
>
mShorthandPropertyID
=
=
eCSSProperty_UNKNOWN
"
The
shorthand
property
of
a
token
stream
should
be
initialized
"
"
to
unknown
"
)
;
value
.
SetTokenStreamValue
(
tokenStream
)
;
}
return
{
aProperty
value
}
;
}
static
bool
HasValidOffsets
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
double
offset
=
0
.
0
;
for
(
const
Keyframe
&
keyframe
:
aKeyframes
)
{
if
(
keyframe
.
mOffset
)
{
double
thisOffset
=
keyframe
.
mOffset
.
value
(
)
;
if
(
thisOffset
<
offset
|
|
thisOffset
>
1
.
0f
)
{
return
false
;
}
offset
=
thisOffset
;
}
}
return
true
;
}
static
void
MarkAsComputeValuesFailureKey
(
PropertyValuePair
&
aPair
)
{
MOZ_ASSERT
(
nsCSSProps
:
:
IsShorthand
(
aPair
.
mProperty
)
"
Only
shorthand
property
values
can
be
marked
as
failure
values
"
)
;
nsCSSValueTokenStream
*
tokenStream
=
aPair
.
mValue
.
GetTokenStreamValue
(
)
;
MOZ_ASSERT
(
tokenStream
-
>
mPropertyID
=
=
eCSSProperty_UNKNOWN
"
Shorthand
value
should
initially
have
an
unknown
property
ID
"
)
;
tokenStream
-
>
mPropertyID
=
eCSSPropertyExtra_no_properties
;
}
static
bool
IsComputeValuesFailureKey
(
const
PropertyValuePair
&
aPair
)
{
return
nsCSSProps
:
:
IsShorthand
(
aPair
.
mProperty
)
&
&
aPair
.
mValue
.
GetTokenStreamValue
(
)
-
>
mPropertyID
=
=
eCSSPropertyExtra_no_properties
;
}
static
already_AddRefed
<
nsStyleContext
>
CreateStyleContextForAnimationValue
(
nsCSSProperty
aProperty
StyleAnimationValue
aValue
nsStyleContext
*
aBaseStyleContext
)
{
MOZ_ASSERT
(
aBaseStyleContext
"
CreateStyleContextForAnimationValue
needs
to
be
called
"
"
with
a
valid
nsStyleContext
"
)
;
RefPtr
<
AnimValuesStyleRule
>
styleRule
=
new
AnimValuesStyleRule
(
)
;
styleRule
-
>
AddValue
(
aProperty
aValue
)
;
nsCOMArray
<
nsIStyleRule
>
rules
;
rules
.
AppendObject
(
styleRule
)
;
MOZ_ASSERT
(
aBaseStyleContext
-
>
PresContext
(
)
-
>
StyleSet
(
)
-
>
IsGecko
(
)
"
ServoStyleSet
should
not
use
StyleAnimationValue
for
animations
"
)
;
nsStyleSet
*
styleSet
=
aBaseStyleContext
-
>
PresContext
(
)
-
>
StyleSet
(
)
-
>
AsGecko
(
)
;
RefPtr
<
nsStyleContext
>
styleContext
=
styleSet
-
>
ResolveStyleByAddingRules
(
aBaseStyleContext
rules
)
;
styleContext
-
>
StyleData
(
nsCSSProps
:
:
kSIDTable
[
aProperty
]
)
;
return
styleContext
.
forget
(
)
;
}
static
void
BuildSegmentsFromValueEntries
(
nsStyleContext
*
aStyleContext
nsTArray
<
KeyframeValueEntry
>
&
aEntries
nsTArray
<
AnimationProperty
>
&
aResult
)
{
if
(
aEntries
.
IsEmpty
(
)
)
{
return
;
}
std
:
:
stable_sort
(
aEntries
.
begin
(
)
aEntries
.
end
(
)
&
KeyframeValueEntry
:
:
PropertyOffsetComparator
:
:
LessThan
)
;
nsCSSProperty
lastProperty
=
eCSSProperty_UNKNOWN
;
AnimationProperty
*
animationProperty
=
nullptr
;
size_t
i
=
0
n
=
aEntries
.
Length
(
)
;
while
(
i
<
n
)
{
if
(
i
+
1
=
=
n
)
{
if
(
aEntries
[
i
]
.
mOffset
!
=
1
.
0f
&
&
animationProperty
)
{
aResult
.
RemoveElementAt
(
aResult
.
Length
(
)
-
1
)
;
animationProperty
=
nullptr
;
}
break
;
}
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
!
=
eCSSProperty_UNKNOWN
&
&
aEntries
[
i
+
1
]
.
mProperty
!
=
eCSSProperty_UNKNOWN
"
Each
entry
should
specify
a
valid
property
"
)
;
if
(
aEntries
[
i
]
.
mProperty
!
=
lastProperty
&
&
aEntries
[
i
]
.
mOffset
!
=
0
.
0f
)
{
+
+
i
;
continue
;
}
if
(
aEntries
[
i
]
.
mProperty
!
=
aEntries
[
i
+
1
]
.
mProperty
&
&
aEntries
[
i
]
.
mOffset
!
=
1
.
0f
)
{
if
(
animationProperty
)
{
aResult
.
RemoveElementAt
(
aResult
.
Length
(
)
-
1
)
;
animationProperty
=
nullptr
;
}
+
+
i
;
continue
;
}
size_t
j
;
if
(
aEntries
[
i
]
.
mOffset
=
=
0
.
0f
&
&
aEntries
[
i
+
1
]
.
mOffset
=
=
0
.
0f
)
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
=
=
aEntries
[
i
+
1
]
.
mProperty
)
;
j
=
i
+
1
;
while
(
aEntries
[
j
+
1
]
.
mOffset
=
=
0
.
0f
&
&
aEntries
[
j
+
1
]
.
mProperty
=
=
aEntries
[
j
]
.
mProperty
)
{
+
+
j
;
}
}
else
if
(
aEntries
[
i
]
.
mOffset
=
=
1
.
0f
)
{
if
(
aEntries
[
i
+
1
]
.
mOffset
=
=
1
.
0f
&
&
aEntries
[
i
+
1
]
.
mProperty
=
=
aEntries
[
i
]
.
mProperty
)
{
j
=
i
+
1
;
while
(
j
+
1
<
n
&
&
aEntries
[
j
+
1
]
.
mOffset
=
=
1
.
0f
&
&
aEntries
[
j
+
1
]
.
mProperty
=
=
aEntries
[
j
]
.
mProperty
)
{
+
+
j
;
}
}
else
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
!
=
aEntries
[
i
+
1
]
.
mProperty
)
;
animationProperty
=
nullptr
;
+
+
i
;
continue
;
}
}
else
{
while
(
aEntries
[
i
]
.
mOffset
=
=
aEntries
[
i
+
1
]
.
mOffset
&
&
aEntries
[
i
]
.
mProperty
=
=
aEntries
[
i
+
1
]
.
mProperty
)
{
+
+
i
;
}
j
=
i
+
1
;
}
if
(
aEntries
[
i
]
.
mProperty
!
=
lastProperty
)
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mOffset
=
=
0
.
0f
)
;
MOZ_ASSERT
(
!
animationProperty
)
;
animationProperty
=
aResult
.
AppendElement
(
)
;
animationProperty
-
>
mProperty
=
aEntries
[
i
]
.
mProperty
;
lastProperty
=
aEntries
[
i
]
.
mProperty
;
}
MOZ_ASSERT
(
animationProperty
"
animationProperty
should
be
valid
pointer
.
"
)
;
AnimationPropertySegment
*
segment
=
animationProperty
-
>
mSegments
.
AppendElement
(
)
;
segment
-
>
mFromKey
=
aEntries
[
i
]
.
mOffset
;
segment
-
>
mToKey
=
aEntries
[
j
]
.
mOffset
;
segment
-
>
mFromValue
=
aEntries
[
i
]
.
mValue
;
segment
-
>
mToValue
=
aEntries
[
j
]
.
mValue
;
segment
-
>
mTimingFunction
=
aEntries
[
i
]
.
mTimingFunction
;
RefPtr
<
nsStyleContext
>
fromContext
=
CreateStyleContextForAnimationValue
(
animationProperty
-
>
mProperty
segment
-
>
mFromValue
aStyleContext
)
;
RefPtr
<
nsStyleContext
>
toContext
=
CreateStyleContextForAnimationValue
(
animationProperty
-
>
mProperty
segment
-
>
mToValue
aStyleContext
)
;
uint32_t
equalStructs
=
0
;
uint32_t
samePointerStructs
=
0
;
segment
-
>
mChangeHint
=
fromContext
-
>
CalcStyleDifference
(
toContext
nsChangeHint
(
0
)
&
equalStructs
&
samePointerStructs
)
;
i
=
j
;
}
}
static
void
GetKeyframeListFromPropertyIndexedKeyframe
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aValue
.
isObject
(
)
)
;
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
dom
:
:
binding_detail
:
:
FastBasePropertyIndexedKeyframe
keyframeDict
;
if
(
!
keyframeDict
.
Init
(
aCx
aValue
"
BasePropertyIndexedKeyframe
argument
"
false
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIDocument
*
doc
=
AnimationUtils
:
:
GetCurrentRealmDocument
(
aCx
)
;
if
(
!
doc
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
Maybe
<
ComputedTimingFunction
>
easing
=
TimingParams
:
:
ParseEasing
(
keyframeDict
.
mEasing
doc
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
object
(
aCx
&
aValue
.
toObject
(
)
)
;
nsTArray
<
PropertyValuesPair
>
propertyValuesPairs
;
if
(
!
GetPropertyValuesPairs
(
aCx
object
ListAllowance
:
:
eAllow
propertyValuesPairs
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCSSParser
parser
(
doc
-
>
CSSLoader
(
)
)
;
nsClassHashtable
<
nsFloatHashKey
Keyframe
>
processedKeyframes
;
for
(
const
PropertyValuesPair
&
pair
:
propertyValuesPairs
)
{
size_t
count
=
pair
.
mValues
.
Length
(
)
;
if
(
count
=
=
0
)
{
continue
;
}
if
(
count
=
=
1
)
{
aRv
.
Throw
(
NS_ERROR_DOM_ANIM_MISSING_PROPS_ERR
)
;
return
;
}
size_t
n
=
pair
.
mValues
.
Length
(
)
-
1
;
size_t
i
=
0
;
for
(
const
nsString
&
stringValue
:
pair
.
mValues
)
{
double
offset
=
i
+
+
/
double
(
n
)
;
Keyframe
*
keyframe
=
processedKeyframes
.
LookupOrAdd
(
offset
)
;
if
(
keyframe
-
>
mPropertyValues
.
IsEmpty
(
)
)
{
keyframe
-
>
mTimingFunction
=
easing
;
keyframe
-
>
mComputedOffset
=
offset
;
}
keyframe
-
>
mPropertyValues
.
AppendElement
(
MakePropertyValuePair
(
pair
.
mProperty
stringValue
parser
doc
)
)
;
}
}
aResult
.
SetCapacity
(
processedKeyframes
.
Count
(
)
)
;
for
(
auto
iter
=
processedKeyframes
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aResult
.
AppendElement
(
Move
(
*
iter
.
UserData
(
)
)
)
;
}
aResult
.
Sort
(
ComputedOffsetComparator
(
)
)
;
}
static
bool
RequiresAdditiveAnimation
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
nsIDocument
*
aDocument
)
{
nsCSSPropertySet
properties
;
nsCSSPropertySet
propertiesWithFromValue
;
nsCSSPropertySet
propertiesWithToValue
;
auto
addToPropertySets
=
[
&
]
(
nsCSSProperty
aProperty
double
aOffset
)
{
properties
.
AddProperty
(
aProperty
)
;
if
(
aOffset
=
=
0
.
0
)
{
propertiesWithFromValue
.
AddProperty
(
aProperty
)
;
}
else
if
(
aOffset
=
=
1
.
0
)
{
propertiesWithToValue
.
AddProperty
(
aProperty
)
;
}
}
;
for
(
size_t
i
=
0
len
=
aKeyframes
.
Length
(
)
;
i
<
len
;
i
+
+
)
{
const
Keyframe
&
frame
=
aKeyframes
[
i
]
;
double
computedOffset
=
i
=
=
len
-
1
?
1
.
0
:
i
=
=
0
?
0
.
0
:
0
.
5
;
double
offsetToUse
=
frame
.
mOffset
?
frame
.
mOffset
.
value
(
)
:
computedOffset
;
for
(
const
PropertyValuePair
&
pair
:
frame
.
mPropertyValues
)
{
if
(
IsInvalidValuePair
(
pair
)
)
{
continue
;
}
if
(
nsCSSProps
:
:
IsShorthand
(
pair
.
mProperty
)
)
{
nsCSSValueTokenStream
*
tokenStream
=
pair
.
mValue
.
GetTokenStreamValue
(
)
;
nsCSSParser
parser
(
aDocument
-
>
CSSLoader
(
)
)
;
if
(
!
parser
.
IsValueValidForProperty
(
pair
.
mProperty
tokenStream
-
>
mTokenStream
)
)
{
continue
;
}
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
prop
pair
.
mProperty
CSSEnabledState
:
:
eForAllContent
)
{
addToPropertySets
(
*
prop
offsetToUse
)
;
}
}
else
{
addToPropertySets
(
pair
.
mProperty
offsetToUse
)
;
}
}
}
return
!
propertiesWithFromValue
.
Equals
(
properties
)
|
|
!
propertiesWithToValue
.
Equals
(
properties
)
;
}
}
