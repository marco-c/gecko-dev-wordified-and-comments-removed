#
include
"
mozilla
/
KeyframeUtils
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
RangedArray
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoCSSParser
.
h
"
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
TimingParams
.
h
"
#
include
"
mozilla
/
dom
/
BaseKeyframeTypesBinding
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffectBinding
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsPresContextInlines
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
algorithm
>
using
mozilla
:
:
dom
:
:
Nullable
;
namespace
mozilla
{
enum
class
ListAllowance
{
eDisallow
eAllow
}
;
struct
PropertyValuesPair
{
nsCSSPropertyID
mProperty
;
nsTArray
<
nsString
>
mValues
;
}
;
struct
AdditionalProperty
{
nsCSSPropertyID
mProperty
;
size_t
mJsidIndex
;
struct
PropertyComparator
{
bool
Equals
(
const
AdditionalProperty
&
aLhs
const
AdditionalProperty
&
aRhs
)
const
{
return
aLhs
.
mProperty
=
=
aRhs
.
mProperty
;
}
bool
LessThan
(
const
AdditionalProperty
&
aLhs
const
AdditionalProperty
&
aRhs
)
const
{
return
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aLhs
.
mProperty
)
<
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aRhs
.
mProperty
)
;
}
}
;
}
;
struct
KeyframeValueEntry
{
nsCSSPropertyID
mProperty
;
AnimationValue
mValue
;
float
mOffset
;
Maybe
<
ComputedTimingFunction
>
mTimingFunction
;
dom
:
:
CompositeOperation
mComposite
;
struct
PropertyOffsetComparator
{
static
bool
Equals
(
const
KeyframeValueEntry
&
aLhs
const
KeyframeValueEntry
&
aRhs
)
{
return
aLhs
.
mProperty
=
=
aRhs
.
mProperty
&
&
aLhs
.
mOffset
=
=
aRhs
.
mOffset
;
}
static
bool
LessThan
(
const
KeyframeValueEntry
&
aLhs
const
KeyframeValueEntry
&
aRhs
)
{
int32_t
order
=
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aLhs
.
mProperty
)
-
nsCSSProps
:
:
PropertyIDLNameSortPosition
(
aRhs
.
mProperty
)
;
if
(
order
!
=
0
)
{
return
order
<
0
;
}
return
aLhs
.
mOffset
<
aRhs
.
mOffset
;
}
}
;
}
;
class
ComputedOffsetComparator
{
public
:
static
bool
Equals
(
const
Keyframe
&
aLhs
const
Keyframe
&
aRhs
)
{
return
aLhs
.
mComputedOffset
=
=
aRhs
.
mComputedOffset
;
}
static
bool
LessThan
(
const
Keyframe
&
aLhs
const
Keyframe
&
aRhs
)
{
return
aLhs
.
mComputedOffset
<
aRhs
.
mComputedOffset
;
}
}
;
static
void
GetKeyframeListFromKeyframeSequence
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
ConvertKeyframeSequence
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
)
;
static
bool
GetPropertyValuesPairs
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
ListAllowance
aAllowLists
nsTArray
<
PropertyValuesPair
>
&
aResult
)
;
static
bool
AppendStringOrStringSequenceToArray
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ListAllowance
aAllowLists
nsTArray
<
nsString
>
&
aValues
)
;
static
bool
AppendValueAsString
(
JSContext
*
aCx
nsTArray
<
nsString
>
&
aValues
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
static
Maybe
<
PropertyValuePair
>
MakePropertyValuePair
(
nsCSSPropertyID
aProperty
const
nsAString
&
aStringValue
dom
:
:
Document
*
aDocument
)
;
static
bool
HasValidOffsets
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
)
;
#
ifdef
DEBUG
static
void
MarkAsComputeValuesFailureKey
(
PropertyValuePair
&
aPair
)
;
#
endif
static
nsTArray
<
ComputedKeyframeValues
>
GetComputedKeyframeValues
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aComputedValues
)
;
static
void
BuildSegmentsFromValueEntries
(
nsTArray
<
KeyframeValueEntry
>
&
aEntries
nsTArray
<
AnimationProperty
>
&
aResult
)
;
static
void
GetKeyframeListFromPropertyIndexedKeyframe
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
HasImplicitKeyframeValues
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Document
*
aDocument
)
;
static
void
DistributeRange
(
const
Range
<
Keyframe
>
&
aRange
)
;
nsTArray
<
Keyframe
>
KeyframeUtils
:
:
GetKeyframesFromObject
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
Handle
<
JSObject
*
>
aFrames
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
nsTArray
<
Keyframe
>
keyframes
;
if
(
!
aFrames
)
{
return
keyframes
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
objectValue
(
aCx
JS
:
:
ObjectValue
(
*
aFrames
)
)
;
JS
:
:
ForOfIterator
iter
(
aCx
)
;
if
(
!
iter
.
init
(
objectValue
JS
:
:
ForOfIterator
:
:
AllowNonIterable
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
keyframes
;
}
if
(
iter
.
valueIsIterable
(
)
)
{
GetKeyframeListFromKeyframeSequence
(
aCx
aDocument
iter
keyframes
aRv
)
;
}
else
{
GetKeyframeListFromPropertyIndexedKeyframe
(
aCx
aDocument
objectValue
keyframes
aRv
)
;
}
if
(
aRv
.
Failed
(
)
)
{
MOZ_ASSERT
(
keyframes
.
IsEmpty
(
)
"
Should
not
set
any
keyframes
when
there
is
an
error
"
)
;
return
keyframes
;
}
if
(
!
dom
:
:
Document
:
:
AreWebAnimationsImplicitKeyframesEnabled
(
aCx
nullptr
)
&
&
HasImplicitKeyframeValues
(
keyframes
aDocument
)
)
{
keyframes
.
Clear
(
)
;
aRv
.
Throw
(
NS_ERROR_DOM_ANIM_MISSING_PROPS_ERR
)
;
}
return
keyframes
;
}
void
KeyframeUtils
:
:
DistributeKeyframes
(
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
if
(
aKeyframes
.
IsEmpty
(
)
)
{
return
;
}
if
(
aKeyframes
.
Length
(
)
>
1
)
{
Keyframe
&
firstElement
=
aKeyframes
[
0
]
;
firstElement
.
mComputedOffset
=
firstElement
.
mOffset
.
valueOr
(
0
.
0
)
;
}
else
{
Keyframe
&
lastElement
=
aKeyframes
.
LastElement
(
)
;
lastElement
.
mComputedOffset
=
lastElement
.
mOffset
.
valueOr
(
1
.
0
)
;
}
const
Keyframe
*
const
last
=
&
aKeyframes
.
LastElement
(
)
;
const
RangedPtr
<
Keyframe
>
begin
(
aKeyframes
.
Elements
(
)
aKeyframes
.
Length
(
)
)
;
RangedPtr
<
Keyframe
>
keyframeA
=
begin
;
while
(
keyframeA
!
=
last
)
{
RangedPtr
<
Keyframe
>
keyframeB
=
keyframeA
+
1
;
while
(
keyframeB
-
>
mOffset
.
isNothing
(
)
&
&
keyframeB
!
=
last
)
{
+
+
keyframeB
;
}
keyframeB
-
>
mComputedOffset
=
keyframeB
-
>
mOffset
.
valueOr
(
1
.
0
)
;
DistributeRange
(
Range
<
Keyframe
>
(
keyframeA
keyframeB
+
1
)
)
;
keyframeA
=
keyframeB
;
}
}
nsTArray
<
AnimationProperty
>
KeyframeUtils
:
:
GetAnimationPropertiesFromKeyframes
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
dom
:
:
CompositeOperation
aEffectComposite
)
{
nsTArray
<
AnimationProperty
>
result
;
const
nsTArray
<
ComputedKeyframeValues
>
computedValues
=
GetComputedKeyframeValues
(
aKeyframes
aElement
aStyle
)
;
if
(
computedValues
.
IsEmpty
(
)
)
{
return
result
;
}
MOZ_ASSERT
(
aKeyframes
.
Length
(
)
=
=
computedValues
.
Length
(
)
"
Array
length
mismatch
"
)
;
nsTArray
<
KeyframeValueEntry
>
entries
(
aKeyframes
.
Length
(
)
)
;
const
size_t
len
=
aKeyframes
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
len
;
+
+
i
)
{
const
Keyframe
&
frame
=
aKeyframes
[
i
]
;
for
(
auto
&
value
:
computedValues
[
i
]
)
{
MOZ_ASSERT
(
frame
.
mComputedOffset
!
=
Keyframe
:
:
kComputedOffsetNotSet
"
Invalid
computed
offset
"
)
;
KeyframeValueEntry
*
entry
=
entries
.
AppendElement
(
)
;
entry
-
>
mOffset
=
frame
.
mComputedOffset
;
entry
-
>
mProperty
=
value
.
mProperty
;
entry
-
>
mValue
=
value
.
mValue
;
entry
-
>
mTimingFunction
=
frame
.
mTimingFunction
;
entry
-
>
mComposite
=
frame
.
mComposite
=
=
dom
:
:
CompositeOperationOrAuto
:
:
Auto
?
aEffectComposite
:
static_cast
<
dom
:
:
CompositeOperation
>
(
frame
.
mComposite
)
;
}
}
BuildSegmentsFromValueEntries
(
entries
result
)
;
return
result
;
}
bool
KeyframeUtils
:
:
IsAnimatableProperty
(
nsCSSPropertyID
aProperty
)
{
if
(
aProperty
=
=
eCSSProperty_display
)
{
return
false
;
}
return
Servo_Property_IsAnimatable
(
aProperty
)
;
}
static
void
GetKeyframeListFromKeyframeSequence
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
)
;
if
(
!
ConvertKeyframeSequence
(
aCx
aDocument
aIterator
aResult
)
)
{
aResult
.
Clear
(
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
aResult
.
IsEmpty
(
)
)
{
return
;
}
if
(
!
HasValidOffsets
(
aResult
)
)
{
aResult
.
Clear
(
)
;
aRv
.
ThrowTypeError
<
dom
:
:
MSG_INVALID_KEYFRAME_OFFSETS
>
(
)
;
return
;
}
}
static
bool
ConvertKeyframeSequence
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
ForOfIterator
&
aIterator
nsTArray
<
Keyframe
>
&
aResult
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
)
;
ErrorResult
parseEasingResult
;
for
(
;
;
)
{
bool
done
;
if
(
!
aIterator
.
next
(
&
value
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
!
value
.
isObject
(
)
&
&
!
value
.
isNullOrUndefined
(
)
)
{
dom
:
:
ThrowErrorMessage
(
aCx
dom
:
:
MSG_NOT_OBJECT
"
Element
of
sequence
<
Keyframe
>
argument
"
)
;
return
false
;
}
dom
:
:
binding_detail
:
:
FastBaseKeyframe
keyframeDict
;
if
(
!
keyframeDict
.
Init
(
aCx
value
"
Element
of
sequence
<
Keyframe
>
argument
"
)
)
{
return
false
;
}
Keyframe
*
keyframe
=
aResult
.
AppendElement
(
fallible
)
;
if
(
!
keyframe
)
{
return
false
;
}
if
(
!
keyframeDict
.
mOffset
.
IsNull
(
)
)
{
keyframe
-
>
mOffset
.
emplace
(
keyframeDict
.
mOffset
.
Value
(
)
)
;
}
if
(
StaticPrefs
:
:
dom_animations_api_compositing_enabled
(
)
)
{
keyframe
-
>
mComposite
=
keyframeDict
.
mComposite
;
}
nsTArray
<
PropertyValuesPair
>
propertyValuePairs
;
if
(
value
.
isObject
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
object
(
aCx
&
value
.
toObject
(
)
)
;
if
(
!
GetPropertyValuesPairs
(
aCx
object
ListAllowance
:
:
eDisallow
propertyValuePairs
)
)
{
return
false
;
}
}
if
(
!
parseEasingResult
.
Failed
(
)
)
{
keyframe
-
>
mTimingFunction
=
TimingParams
:
:
ParseEasing
(
keyframeDict
.
mEasing
aDocument
parseEasingResult
)
;
}
for
(
PropertyValuesPair
&
pair
:
propertyValuePairs
)
{
MOZ_ASSERT
(
pair
.
mValues
.
Length
(
)
=
=
1
)
;
Maybe
<
PropertyValuePair
>
valuePair
=
MakePropertyValuePair
(
pair
.
mProperty
pair
.
mValues
[
0
]
aDocument
)
;
if
(
!
valuePair
)
{
continue
;
}
keyframe
-
>
mPropertyValues
.
AppendElement
(
std
:
:
move
(
valuePair
.
ref
(
)
)
)
;
#
ifdef
DEBUG
if
(
nsCSSProps
:
:
IsShorthand
(
pair
.
mProperty
)
&
&
keyframeDict
.
mSimulateComputeValuesFailure
)
{
MarkAsComputeValuesFailureKey
(
keyframe
-
>
mPropertyValues
.
LastElement
(
)
)
;
}
#
endif
}
}
if
(
parseEasingResult
.
MaybeSetPendingException
(
aCx
)
)
{
return
false
;
}
return
true
;
}
static
bool
GetPropertyValuesPairs
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
ListAllowance
aAllowLists
nsTArray
<
PropertyValuesPair
>
&
aResult
)
{
nsTArray
<
AdditionalProperty
>
properties
;
JS
:
:
Rooted
<
JS
:
:
IdVector
>
ids
(
aCx
JS
:
:
IdVector
(
aCx
)
)
;
if
(
!
JS_Enumerate
(
aCx
aObject
&
ids
)
)
{
return
false
;
}
for
(
size_t
i
=
0
n
=
ids
.
length
(
)
;
i
<
n
;
i
+
+
)
{
nsAutoJSCString
propName
;
if
(
!
propName
.
init
(
aCx
ids
[
i
]
)
)
{
return
false
;
}
nsCSSPropertyID
property
=
nsCSSPropertyID
:
:
eCSSProperty_UNKNOWN
;
if
(
propName
.
EqualsLiteral
(
"
cssOffset
"
)
)
{
property
=
nsCSSPropertyID
:
:
eCSSProperty_offset
;
}
else
if
(
propName
.
EqualsLiteral
(
"
cssFloat
"
)
)
{
property
=
nsCSSPropertyID
:
:
eCSSProperty_float
;
}
else
if
(
!
propName
.
EqualsLiteral
(
"
offset
"
)
&
&
!
propName
.
EqualsLiteral
(
"
float
"
)
)
{
property
=
nsCSSProps
:
:
LookupPropertyByIDLName
(
propName
CSSEnabledState
:
:
ForAllContent
)
;
}
if
(
KeyframeUtils
:
:
IsAnimatableProperty
(
property
)
)
{
AdditionalProperty
*
p
=
properties
.
AppendElement
(
)
;
p
-
>
mProperty
=
property
;
p
-
>
mJsidIndex
=
i
;
}
}
properties
.
Sort
(
AdditionalProperty
:
:
PropertyComparator
(
)
)
;
for
(
AdditionalProperty
&
p
:
properties
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
)
;
if
(
!
JS_GetPropertyById
(
aCx
aObject
ids
[
p
.
mJsidIndex
]
&
value
)
)
{
return
false
;
}
PropertyValuesPair
*
pair
=
aResult
.
AppendElement
(
)
;
pair
-
>
mProperty
=
p
.
mProperty
;
if
(
!
AppendStringOrStringSequenceToArray
(
aCx
value
aAllowLists
pair
-
>
mValues
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
AppendStringOrStringSequenceToArray
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ListAllowance
aAllowLists
nsTArray
<
nsString
>
&
aValues
)
{
if
(
aAllowLists
=
=
ListAllowance
:
:
eAllow
&
&
aValue
.
isObject
(
)
)
{
JS
:
:
ForOfIterator
iter
(
aCx
)
;
if
(
!
iter
.
init
(
aValue
JS
:
:
ForOfIterator
:
:
AllowNonIterable
)
)
{
return
false
;
}
if
(
iter
.
valueIsIterable
(
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
element
(
aCx
)
;
for
(
;
;
)
{
bool
done
;
if
(
!
iter
.
next
(
&
element
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
!
AppendValueAsString
(
aCx
aValues
element
)
)
{
return
false
;
}
}
return
true
;
}
}
if
(
!
AppendValueAsString
(
aCx
aValues
aValue
)
)
{
return
false
;
}
return
true
;
}
static
bool
AppendValueAsString
(
JSContext
*
aCx
nsTArray
<
nsString
>
&
aValues
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
return
ConvertJSValueToString
(
aCx
aValue
dom
:
:
eStringify
dom
:
:
eStringify
*
aValues
.
AppendElement
(
)
)
;
}
static
void
ReportInvalidPropertyValueToConsole
(
nsCSSPropertyID
aProperty
const
nsAString
&
aInvalidPropertyValue
dom
:
:
Document
*
aDoc
)
{
AutoTArray
<
nsString
2
>
params
;
params
.
AppendElement
(
aInvalidPropertyValue
)
;
CopyASCIItoUTF16
(
nsCSSProps
:
:
GetStringValue
(
aProperty
)
*
params
.
AppendElement
(
)
)
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
Animation
"
)
aDoc
nsContentUtils
:
:
eDOM_PROPERTIES
"
InvalidKeyframePropertyValue
"
params
)
;
}
static
Maybe
<
PropertyValuePair
>
MakePropertyValuePair
(
nsCSSPropertyID
aProperty
const
nsAString
&
aStringValue
dom
:
:
Document
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
Maybe
<
PropertyValuePair
>
result
;
ServoCSSParser
:
:
ParsingEnvironment
env
=
ServoCSSParser
:
:
GetParsingEnvironment
(
aDocument
)
;
RefPtr
<
RawServoDeclarationBlock
>
servoDeclarationBlock
=
ServoCSSParser
:
:
ParseProperty
(
aProperty
aStringValue
env
)
;
if
(
servoDeclarationBlock
)
{
result
.
emplace
(
aProperty
std
:
:
move
(
servoDeclarationBlock
)
)
;
}
else
{
ReportInvalidPropertyValueToConsole
(
aProperty
aStringValue
aDocument
)
;
}
return
result
;
}
static
bool
HasValidOffsets
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
double
offset
=
0
.
0
;
for
(
const
Keyframe
&
keyframe
:
aKeyframes
)
{
if
(
keyframe
.
mOffset
)
{
double
thisOffset
=
keyframe
.
mOffset
.
value
(
)
;
if
(
thisOffset
<
offset
|
|
thisOffset
>
1
.
0f
)
{
return
false
;
}
offset
=
thisOffset
;
}
}
return
true
;
}
#
ifdef
DEBUG
static
void
MarkAsComputeValuesFailureKey
(
PropertyValuePair
&
aPair
)
{
MOZ_ASSERT
(
nsCSSProps
:
:
IsShorthand
(
aPair
.
mProperty
)
"
Only
shorthand
property
values
can
be
marked
as
failure
values
"
)
;
aPair
.
mSimulateComputeValuesFailure
=
true
;
}
#
endif
static
nsTArray
<
ComputedKeyframeValues
>
GetComputedKeyframeValues
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aComputedStyle
)
{
MOZ_ASSERT
(
aElement
)
;
nsTArray
<
ComputedKeyframeValues
>
result
;
nsPresContext
*
presContext
=
nsContentUtils
:
:
GetContextForContent
(
aElement
)
;
if
(
!
presContext
)
{
return
result
;
}
result
=
presContext
-
>
StyleSet
(
)
-
>
GetComputedKeyframeValuesFor
(
aKeyframes
aElement
aComputedStyle
)
;
return
result
;
}
static
void
AppendInitialSegment
(
AnimationProperty
*
aAnimationProperty
const
KeyframeValueEntry
&
aFirstEntry
)
{
AnimationPropertySegment
*
segment
=
aAnimationProperty
-
>
mSegments
.
AppendElement
(
)
;
segment
-
>
mFromKey
=
0
.
0f
;
segment
-
>
mToKey
=
aFirstEntry
.
mOffset
;
segment
-
>
mToValue
=
aFirstEntry
.
mValue
;
segment
-
>
mToComposite
=
aFirstEntry
.
mComposite
;
}
static
void
AppendFinalSegment
(
AnimationProperty
*
aAnimationProperty
const
KeyframeValueEntry
&
aLastEntry
)
{
AnimationPropertySegment
*
segment
=
aAnimationProperty
-
>
mSegments
.
AppendElement
(
)
;
segment
-
>
mFromKey
=
aLastEntry
.
mOffset
;
segment
-
>
mFromValue
=
aLastEntry
.
mValue
;
segment
-
>
mFromComposite
=
aLastEntry
.
mComposite
;
segment
-
>
mToKey
=
1
.
0f
;
segment
-
>
mTimingFunction
=
aLastEntry
.
mTimingFunction
;
}
static
AnimationProperty
*
HandleMissingInitialKeyframe
(
nsTArray
<
AnimationProperty
>
&
aResult
const
KeyframeValueEntry
&
aEntry
)
{
MOZ_ASSERT
(
aEntry
.
mOffset
!
=
0
.
0f
"
The
offset
of
the
entry
should
not
be
0
.
0
"
)
;
if
(
!
StaticPrefs
:
:
dom_animations_api_implicit_keyframes_enabled
(
)
)
{
return
nullptr
;
}
AnimationProperty
*
result
=
aResult
.
AppendElement
(
)
;
result
-
>
mProperty
=
aEntry
.
mProperty
;
AppendInitialSegment
(
result
aEntry
)
;
return
result
;
}
static
void
HandleMissingFinalKeyframe
(
nsTArray
<
AnimationProperty
>
&
aResult
const
KeyframeValueEntry
&
aEntry
AnimationProperty
*
aCurrentAnimationProperty
)
{
MOZ_ASSERT
(
aEntry
.
mOffset
!
=
1
.
0f
"
The
offset
of
the
entry
should
not
be
1
.
0
"
)
;
if
(
!
StaticPrefs
:
:
dom_animations_api_implicit_keyframes_enabled
(
)
)
{
if
(
aCurrentAnimationProperty
)
{
aResult
.
RemoveLastElement
(
)
;
}
return
;
}
if
(
!
aCurrentAnimationProperty
)
{
aCurrentAnimationProperty
=
aResult
.
AppendElement
(
)
;
aCurrentAnimationProperty
-
>
mProperty
=
aEntry
.
mProperty
;
if
(
aEntry
.
mOffset
!
=
0
.
0f
)
{
AppendInitialSegment
(
aCurrentAnimationProperty
aEntry
)
;
}
}
AppendFinalSegment
(
aCurrentAnimationProperty
aEntry
)
;
}
static
void
BuildSegmentsFromValueEntries
(
nsTArray
<
KeyframeValueEntry
>
&
aEntries
nsTArray
<
AnimationProperty
>
&
aResult
)
{
if
(
aEntries
.
IsEmpty
(
)
)
{
return
;
}
std
:
:
stable_sort
(
aEntries
.
begin
(
)
aEntries
.
end
(
)
&
KeyframeValueEntry
:
:
PropertyOffsetComparator
:
:
LessThan
)
;
nsCSSPropertyID
lastProperty
=
eCSSProperty_UNKNOWN
;
AnimationProperty
*
animationProperty
=
nullptr
;
size_t
i
=
0
n
=
aEntries
.
Length
(
)
;
while
(
i
<
n
)
{
if
(
i
+
1
=
=
n
)
{
if
(
aEntries
[
i
]
.
mOffset
!
=
1
.
0f
)
{
HandleMissingFinalKeyframe
(
aResult
aEntries
[
i
]
animationProperty
)
;
}
else
if
(
aEntries
[
i
]
.
mOffset
=
=
1
.
0f
&
&
!
animationProperty
)
{
Unused
<
<
HandleMissingInitialKeyframe
(
aResult
aEntries
[
i
]
)
;
}
animationProperty
=
nullptr
;
break
;
}
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
!
=
eCSSProperty_UNKNOWN
&
&
aEntries
[
i
+
1
]
.
mProperty
!
=
eCSSProperty_UNKNOWN
"
Each
entry
should
specify
a
valid
property
"
)
;
if
(
aEntries
[
i
]
.
mProperty
!
=
lastProperty
&
&
aEntries
[
i
]
.
mOffset
!
=
0
.
0f
)
{
animationProperty
=
HandleMissingInitialKeyframe
(
aResult
aEntries
[
i
]
)
;
if
(
animationProperty
)
{
lastProperty
=
aEntries
[
i
]
.
mProperty
;
}
else
{
+
+
i
;
continue
;
}
}
if
(
aEntries
[
i
]
.
mProperty
=
=
aEntries
[
i
+
1
]
.
mProperty
&
&
aEntries
[
i
]
.
mOffset
=
=
aEntries
[
i
+
1
]
.
mOffset
&
&
aEntries
[
i
]
.
mOffset
!
=
1
.
0f
&
&
aEntries
[
i
]
.
mOffset
!
=
0
.
0f
)
{
+
+
i
;
continue
;
}
if
(
aEntries
[
i
]
.
mProperty
!
=
aEntries
[
i
+
1
]
.
mProperty
&
&
aEntries
[
i
]
.
mOffset
!
=
1
.
0f
)
{
HandleMissingFinalKeyframe
(
aResult
aEntries
[
i
]
animationProperty
)
;
animationProperty
=
nullptr
;
+
+
i
;
continue
;
}
size_t
j
=
i
+
1
;
if
(
aEntries
[
i
]
.
mOffset
=
=
0
.
0f
&
&
aEntries
[
i
+
1
]
.
mOffset
=
=
0
.
0f
)
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
=
=
aEntries
[
i
+
1
]
.
mProperty
)
;
while
(
j
+
1
<
n
&
&
aEntries
[
j
+
1
]
.
mOffset
=
=
0
.
0f
&
&
aEntries
[
j
+
1
]
.
mProperty
=
=
aEntries
[
j
]
.
mProperty
)
{
+
+
j
;
}
}
else
if
(
aEntries
[
i
]
.
mOffset
=
=
1
.
0f
)
{
if
(
aEntries
[
i
+
1
]
.
mOffset
=
=
1
.
0f
&
&
aEntries
[
i
+
1
]
.
mProperty
=
=
aEntries
[
i
]
.
mProperty
)
{
while
(
j
+
1
<
n
&
&
aEntries
[
j
+
1
]
.
mOffset
=
=
1
.
0f
&
&
aEntries
[
j
+
1
]
.
mProperty
=
=
aEntries
[
j
]
.
mProperty
)
{
+
+
j
;
}
}
else
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mProperty
!
=
aEntries
[
i
+
1
]
.
mProperty
)
;
animationProperty
=
nullptr
;
+
+
i
;
continue
;
}
}
if
(
aEntries
[
i
]
.
mProperty
!
=
lastProperty
)
{
MOZ_ASSERT
(
aEntries
[
i
]
.
mOffset
=
=
0
.
0f
)
;
MOZ_ASSERT
(
!
animationProperty
)
;
animationProperty
=
aResult
.
AppendElement
(
)
;
animationProperty
-
>
mProperty
=
aEntries
[
i
]
.
mProperty
;
lastProperty
=
aEntries
[
i
]
.
mProperty
;
}
MOZ_ASSERT
(
animationProperty
"
animationProperty
should
be
valid
pointer
.
"
)
;
AnimationPropertySegment
*
segment
=
animationProperty
-
>
mSegments
.
AppendElement
(
)
;
segment
-
>
mFromKey
=
aEntries
[
i
]
.
mOffset
;
segment
-
>
mToKey
=
aEntries
[
j
]
.
mOffset
;
segment
-
>
mFromValue
=
aEntries
[
i
]
.
mValue
;
segment
-
>
mToValue
=
aEntries
[
j
]
.
mValue
;
segment
-
>
mTimingFunction
=
aEntries
[
i
]
.
mTimingFunction
;
segment
-
>
mFromComposite
=
aEntries
[
i
]
.
mComposite
;
segment
-
>
mToComposite
=
aEntries
[
j
]
.
mComposite
;
i
=
j
;
}
}
static
void
GetKeyframeListFromPropertyIndexedKeyframe
(
JSContext
*
aCx
dom
:
:
Document
*
aDocument
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsTArray
<
Keyframe
>
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aValue
.
isObject
(
)
)
;
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
)
;
dom
:
:
binding_detail
:
:
FastBasePropertyIndexedKeyframe
keyframeDict
;
if
(
!
keyframeDict
.
Init
(
aCx
aValue
"
BasePropertyIndexedKeyframe
argument
"
false
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
object
(
aCx
&
aValue
.
toObject
(
)
)
;
nsTArray
<
PropertyValuesPair
>
propertyValuesPairs
;
if
(
!
GetPropertyValuesPairs
(
aCx
object
ListAllowance
:
:
eAllow
propertyValuesPairs
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsClassHashtable
<
nsFloatHashKey
Keyframe
>
processedKeyframes
;
for
(
const
PropertyValuesPair
&
pair
:
propertyValuesPairs
)
{
size_t
count
=
pair
.
mValues
.
Length
(
)
;
if
(
count
=
=
0
)
{
continue
;
}
if
(
!
StaticPrefs
:
:
dom_animations_api_implicit_keyframes_enabled
(
)
&
&
count
=
=
1
)
{
aRv
.
Throw
(
NS_ERROR_DOM_ANIM_MISSING_PROPS_ERR
)
;
return
;
}
size_t
n
=
pair
.
mValues
.
Length
(
)
-
1
;
size_t
i
=
0
;
for
(
const
nsString
&
stringValue
:
pair
.
mValues
)
{
double
offset
=
n
?
i
+
+
/
double
(
n
)
:
1
;
Keyframe
*
keyframe
=
processedKeyframes
.
LookupOrAdd
(
offset
)
;
if
(
keyframe
-
>
mPropertyValues
.
IsEmpty
(
)
)
{
keyframe
-
>
mComputedOffset
=
offset
;
}
Maybe
<
PropertyValuePair
>
valuePair
=
MakePropertyValuePair
(
pair
.
mProperty
stringValue
aDocument
)
;
if
(
!
valuePair
)
{
continue
;
}
keyframe
-
>
mPropertyValues
.
AppendElement
(
std
:
:
move
(
valuePair
.
ref
(
)
)
)
;
}
}
aResult
.
SetCapacity
(
processedKeyframes
.
Count
(
)
)
;
for
(
auto
iter
=
processedKeyframes
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aResult
.
AppendElement
(
std
:
:
move
(
*
iter
.
UserData
(
)
)
)
;
}
aResult
.
Sort
(
ComputedOffsetComparator
(
)
)
;
const
FallibleTArray
<
Nullable
<
double
>
>
*
offsets
=
nullptr
;
AutoTArray
<
Nullable
<
double
>
1
>
singleOffset
;
auto
&
offset
=
keyframeDict
.
mOffset
;
if
(
offset
.
IsDouble
(
)
)
{
singleOffset
.
AppendElement
(
offset
.
GetAsDouble
(
)
)
;
const
FallibleTArray
<
Nullable
<
double
>
>
&
asFallibleArray
=
singleOffset
;
offsets
=
&
asFallibleArray
;
}
else
if
(
offset
.
IsDoubleOrNullSequence
(
)
)
{
offsets
=
&
offset
.
GetAsDoubleOrNullSequence
(
)
;
}
size_t
offsetsToFill
=
offsets
?
std
:
:
min
(
offsets
-
>
Length
(
)
aResult
.
Length
(
)
)
:
0
;
for
(
size_t
i
=
0
;
i
<
offsetsToFill
;
i
+
+
)
{
if
(
!
offsets
-
>
ElementAt
(
i
)
.
IsNull
(
)
)
{
aResult
[
i
]
.
mOffset
.
emplace
(
offsets
-
>
ElementAt
(
i
)
.
Value
(
)
)
;
}
}
if
(
!
HasValidOffsets
(
aResult
)
)
{
aResult
.
Clear
(
)
;
aRv
.
ThrowTypeError
<
dom
:
:
MSG_INVALID_KEYFRAME_OFFSETS
>
(
)
;
return
;
}
FallibleTArray
<
Maybe
<
ComputedTimingFunction
>
>
easings
;
auto
parseAndAppendEasing
=
[
&
]
(
const
nsString
&
easingString
ErrorResult
&
aRv
)
{
auto
easing
=
TimingParams
:
:
ParseEasing
(
easingString
aDocument
aRv
)
;
if
(
!
aRv
.
Failed
(
)
&
&
!
easings
.
AppendElement
(
std
:
:
move
(
easing
)
fallible
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
}
;
auto
&
easing
=
keyframeDict
.
mEasing
;
if
(
easing
.
IsString
(
)
)
{
parseAndAppendEasing
(
easing
.
GetAsString
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
aResult
.
Clear
(
)
;
return
;
}
}
else
{
for
(
const
nsString
&
easingString
:
easing
.
GetAsStringSequence
(
)
)
{
parseAndAppendEasing
(
easingString
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
aResult
.
Clear
(
)
;
return
;
}
}
}
if
(
!
easings
.
IsEmpty
(
)
)
{
for
(
size_t
i
=
0
;
i
<
aResult
.
Length
(
)
;
i
+
+
)
{
aResult
[
i
]
.
mTimingFunction
=
easings
[
i
%
easings
.
Length
(
)
]
;
}
}
if
(
StaticPrefs
:
:
dom_animations_api_compositing_enabled
(
)
)
{
const
FallibleTArray
<
dom
:
:
CompositeOperationOrAuto
>
*
compositeOps
=
nullptr
;
AutoTArray
<
dom
:
:
CompositeOperationOrAuto
1
>
singleCompositeOp
;
auto
&
composite
=
keyframeDict
.
mComposite
;
if
(
composite
.
IsCompositeOperationOrAuto
(
)
)
{
singleCompositeOp
.
AppendElement
(
composite
.
GetAsCompositeOperationOrAuto
(
)
)
;
const
FallibleTArray
<
dom
:
:
CompositeOperationOrAuto
>
&
asFallibleArray
=
singleCompositeOp
;
compositeOps
=
&
asFallibleArray
;
}
else
if
(
composite
.
IsCompositeOperationOrAutoSequence
(
)
)
{
compositeOps
=
&
composite
.
GetAsCompositeOperationOrAutoSequence
(
)
;
}
if
(
compositeOps
&
&
!
compositeOps
-
>
IsEmpty
(
)
)
{
size_t
length
=
compositeOps
-
>
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
aResult
.
Length
(
)
;
i
+
+
)
{
aResult
[
i
]
.
mComposite
=
compositeOps
-
>
ElementAt
(
i
%
length
)
;
}
}
}
}
static
bool
HasImplicitKeyframeValues
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Document
*
aDocument
)
{
nsCSSPropertyIDSet
properties
;
nsCSSPropertyIDSet
propertiesWithFromValue
;
nsCSSPropertyIDSet
propertiesWithToValue
;
auto
addToPropertySets
=
[
&
]
(
nsCSSPropertyID
aProperty
double
aOffset
)
{
properties
.
AddProperty
(
aProperty
)
;
if
(
aOffset
=
=
0
.
0
)
{
propertiesWithFromValue
.
AddProperty
(
aProperty
)
;
}
else
if
(
aOffset
=
=
1
.
0
)
{
propertiesWithToValue
.
AddProperty
(
aProperty
)
;
}
}
;
for
(
size_t
i
=
0
len
=
aKeyframes
.
Length
(
)
;
i
<
len
;
i
+
+
)
{
const
Keyframe
&
frame
=
aKeyframes
[
i
]
;
double
computedOffset
=
i
=
=
len
-
1
?
1
.
0
:
i
=
=
0
?
0
.
0
:
0
.
5
;
double
offsetToUse
=
frame
.
mOffset
?
frame
.
mOffset
.
value
(
)
:
computedOffset
;
for
(
const
PropertyValuePair
&
pair
:
frame
.
mPropertyValues
)
{
if
(
nsCSSProps
:
:
IsShorthand
(
pair
.
mProperty
)
)
{
MOZ_ASSERT
(
pair
.
mServoDeclarationBlock
)
;
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
prop
pair
.
mProperty
CSSEnabledState
:
:
ForAllContent
)
{
addToPropertySets
(
*
prop
offsetToUse
)
;
}
}
else
{
addToPropertySets
(
pair
.
mProperty
offsetToUse
)
;
}
}
}
return
!
propertiesWithFromValue
.
Equals
(
properties
)
|
|
!
propertiesWithToValue
.
Equals
(
properties
)
;
}
static
void
DistributeRange
(
const
Range
<
Keyframe
>
&
aRange
)
{
const
Range
<
Keyframe
>
rangeToAdjust
=
Range
<
Keyframe
>
(
aRange
.
begin
(
)
+
1
aRange
.
end
(
)
-
1
)
;
const
size_t
n
=
aRange
.
length
(
)
-
1
;
const
double
startOffset
=
aRange
[
0
]
.
mComputedOffset
;
const
double
diffOffset
=
aRange
[
n
]
.
mComputedOffset
-
startOffset
;
for
(
auto
iter
=
rangeToAdjust
.
begin
(
)
;
iter
!
=
rangeToAdjust
.
end
(
)
;
+
+
iter
)
{
size_t
index
=
iter
-
aRange
.
begin
(
)
;
iter
-
>
mComputedOffset
=
startOffset
+
double
(
index
)
/
n
*
diffOffset
;
}
}
}
