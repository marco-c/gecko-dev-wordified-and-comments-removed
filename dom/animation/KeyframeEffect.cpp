#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeAnimationOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectTiming
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffectBinding
.
h
"
#
include
"
nsDocument
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
namespace
dom
{
KeyframeEffect
:
:
KeyframeEffect
(
nsIDocument
*
aDocument
const
Maybe
<
OwningAnimationTarget
>
&
aTarget
const
TimingParams
&
aTiming
const
KeyframeEffectParams
&
aOptions
)
:
KeyframeEffectReadOnly
(
aDocument
aTarget
new
AnimationEffectTiming
(
aDocument
aTiming
this
)
aOptions
)
{
}
JSObject
*
KeyframeEffect
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
KeyframeEffectBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
KeyframeEffect
>
KeyframeEffect
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
JS
:
:
Handle
<
JSObject
*
>
aKeyframes
const
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
ErrorResult
&
aRv
)
{
return
ConstructKeyframeEffect
<
KeyframeEffect
>
(
aGlobal
aTarget
aKeyframes
aOptions
aRv
)
;
}
already_AddRefed
<
KeyframeEffect
>
KeyframeEffect
:
:
Constructor
(
const
GlobalObject
&
aGlobal
KeyframeEffectReadOnly
&
aSource
ErrorResult
&
aRv
)
{
return
ConstructKeyframeEffect
<
KeyframeEffect
>
(
aGlobal
aSource
aRv
)
;
}
already_AddRefed
<
KeyframeEffect
>
KeyframeEffect
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
JS
:
:
Handle
<
JSObject
*
>
aKeyframes
const
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
ErrorResult
&
aRv
)
{
return
ConstructKeyframeEffect
<
KeyframeEffect
>
(
aGlobal
aTarget
aKeyframes
aOptions
aRv
)
;
}
void
KeyframeEffect
:
:
NotifySpecifiedTimingUpdated
(
)
{
nsAutoAnimationMutationBatch
mb
(
mTarget
?
mTarget
-
>
mElement
-
>
OwnerDoc
(
)
:
nullptr
)
;
if
(
mAnimation
)
{
mAnimation
-
>
NotifyEffectTimingUpdated
(
)
;
if
(
mAnimation
-
>
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
mAnimation
)
;
}
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
}
}
void
KeyframeEffect
:
:
SetTarget
(
const
Nullable
<
ElementOrCSSPseudoElement
>
&
aTarget
)
{
Maybe
<
OwningAnimationTarget
>
newTarget
=
ConvertTarget
(
aTarget
)
;
if
(
mTarget
=
=
newTarget
)
{
return
;
}
if
(
mTarget
)
{
UnregisterTarget
(
)
;
ResetIsRunningOnCompositor
(
)
;
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
nsAutoAnimationMutationBatch
mb
(
mTarget
-
>
mElement
-
>
OwnerDoc
(
)
)
;
if
(
mAnimation
)
{
nsNodeUtils
:
:
AnimationRemoved
(
mAnimation
)
;
}
}
mTarget
=
newTarget
;
if
(
mTarget
)
{
UpdateTargetRegistration
(
)
;
RefPtr
<
nsStyleContext
>
styleContext
=
GetTargetStyleContext
(
)
;
if
(
styleContext
)
{
UpdateProperties
(
styleContext
)
;
}
MaybeUpdateFrameForCompositor
(
)
;
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
nsAutoAnimationMutationBatch
mb
(
mTarget
-
>
mElement
-
>
OwnerDoc
(
)
)
;
if
(
mAnimation
)
{
nsNodeUtils
:
:
AnimationAdded
(
mAnimation
)
;
}
}
mRecordedContentTooLarge
=
false
;
mRecordedFrameSize
=
false
;
}
void
KeyframeEffect
:
:
SetIterationComposite
(
const
IterationCompositeOperation
&
aIterationComposite
CallerType
aCallerType
)
{
if
(
!
nsDocument
:
:
IsWebAnimationsEnabled
(
aCallerType
)
)
{
return
;
}
if
(
mEffectOptions
.
mIterationComposite
=
=
aIterationComposite
)
{
return
;
}
if
(
mAnimation
&
&
mAnimation
-
>
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
mAnimation
)
;
}
mEffectOptions
.
mIterationComposite
=
aIterationComposite
;
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Layer
)
;
}
void
KeyframeEffect
:
:
SetComposite
(
const
CompositeOperation
&
aComposite
)
{
if
(
mEffectOptions
.
mComposite
=
=
aComposite
)
{
return
;
}
mEffectOptions
.
mComposite
=
aComposite
;
if
(
mAnimation
&
&
mAnimation
-
>
IsRelevant
(
)
)
{
nsNodeUtils
:
:
AnimationChanged
(
mAnimation
)
;
}
if
(
mTarget
)
{
RefPtr
<
nsStyleContext
>
styleContext
=
GetTargetStyleContext
(
)
;
if
(
styleContext
)
{
UpdateProperties
(
styleContext
)
;
}
}
}
}
}
