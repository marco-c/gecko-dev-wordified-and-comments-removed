#
ifndef
mozilla_EffectSet_h
#
define
mozilla_EffectSet_h
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Element
;
class
KeyframeEffectReadOnly
;
}
class
EffectSet
{
public
:
EffectSet
(
)
#
ifdef
DEBUG
:
mCalledPropertyDtor
(
false
)
#
endif
{
MOZ_COUNT_CTOR
(
EffectSet
)
;
}
~
EffectSet
(
)
{
MOZ_ASSERT
(
mCalledPropertyDtor
"
must
call
destructor
through
element
property
dtor
"
)
;
MOZ_COUNT_DTOR
(
EffectSet
)
;
}
static
void
PropertyDtor
(
void
*
aObject
nsIAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
;
static
EffectSet
*
GetEffectSet
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
static
EffectSet
*
GetOrCreateEffectSet
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
void
AddEffect
(
dom
:
:
KeyframeEffectReadOnly
&
aEffect
)
;
void
RemoveEffect
(
dom
:
:
KeyframeEffectReadOnly
&
aEffect
)
;
private
:
typedef
nsTHashtable
<
nsPtrHashKey
<
dom
:
:
KeyframeEffectReadOnly
>
>
EffectPtrSet
;
public
:
class
Iterator
{
public
:
explicit
Iterator
(
EffectPtrSet
:
:
Iterator
&
&
aHashIterator
)
:
mHashIterator
(
mozilla
:
:
Move
(
aHashIterator
)
)
mIsEndIterator
(
false
)
{
}
Iterator
(
Iterator
&
&
aOther
)
:
mHashIterator
(
mozilla
:
:
Move
(
aOther
.
mHashIterator
)
)
mIsEndIterator
(
aOther
.
mIsEndIterator
)
{
}
static
Iterator
EndIterator
(
EffectPtrSet
:
:
Iterator
&
&
aHashIterator
)
{
Iterator
result
(
mozilla
:
:
Move
(
aHashIterator
)
)
;
result
.
mIsEndIterator
=
true
;
return
result
;
}
bool
operator
!
=
(
const
Iterator
&
aOther
)
const
{
if
(
Done
(
)
|
|
aOther
.
Done
(
)
)
{
return
Done
(
)
!
=
aOther
.
Done
(
)
;
}
return
mHashIterator
.
Get
(
)
!
=
aOther
.
mHashIterator
.
Get
(
)
;
}
Iterator
&
operator
+
+
(
)
{
MOZ_ASSERT
(
!
Done
(
)
)
;
mHashIterator
.
Next
(
)
;
return
*
this
;
}
dom
:
:
KeyframeEffectReadOnly
*
operator
*
(
)
{
MOZ_ASSERT
(
!
Done
(
)
)
;
return
mHashIterator
.
Get
(
)
-
>
GetKey
(
)
;
}
private
:
Iterator
(
)
=
delete
;
Iterator
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
&
)
=
delete
;
bool
Done
(
)
const
{
return
mIsEndIterator
|
|
mHashIterator
.
Done
(
)
;
}
EffectPtrSet
:
:
Iterator
mHashIterator
;
bool
mIsEndIterator
;
}
;
Iterator
begin
(
)
{
return
Iterator
(
mEffects
.
Iter
(
)
)
;
}
Iterator
end
(
)
{
return
Iterator
:
:
EndIterator
(
mEffects
.
Iter
(
)
)
;
}
private
:
static
nsIAtom
*
GetEffectSetPropertyAtom
(
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
EffectPtrSet
mEffects
;
#
ifdef
DEBUG
bool
mCalledPropertyDtor
;
#
endif
}
;
}
#
endif
