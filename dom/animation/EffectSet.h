#
ifndef
mozilla_EffectSet_h
#
define
mozilla_EffectSet_h
#
include
"
mozilla
/
AnimValuesStyleRule
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsPresContext
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
class
KeyframeEffectReadOnly
;
}
class
EffectSet
{
public
:
EffectSet
(
)
:
mCascadeNeedsUpdate
(
false
)
mAnimationGeneration
(
0
)
mActiveIterators
(
0
)
#
ifdef
DEBUG
mCalledPropertyDtor
(
false
)
#
endif
{
MOZ_COUNT_CTOR
(
EffectSet
)
;
}
~
EffectSet
(
)
{
MOZ_ASSERT
(
mCalledPropertyDtor
"
must
call
destructor
through
element
property
dtor
"
)
;
MOZ_ASSERT
(
mActiveIterators
=
=
0
"
Effect
set
should
not
be
destroyed
while
it
is
being
"
"
enumerated
"
)
;
MOZ_COUNT_DTOR
(
EffectSet
)
;
}
static
void
PropertyDtor
(
void
*
aObject
nsIAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCallback
)
;
static
EffectSet
*
GetEffectSet
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
static
EffectSet
*
GetEffectSet
(
const
nsIFrame
*
aFrame
)
;
static
EffectSet
*
GetOrCreateEffectSet
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
static
void
DestroyEffectSet
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
void
AddEffect
(
dom
:
:
KeyframeEffectReadOnly
&
aEffect
)
;
void
RemoveEffect
(
dom
:
:
KeyframeEffectReadOnly
&
aEffect
)
;
private
:
typedef
nsTHashtable
<
nsRefPtrHashKey
<
dom
:
:
KeyframeEffectReadOnly
>
>
OwningEffectSet
;
public
:
class
Iterator
{
public
:
explicit
Iterator
(
EffectSet
&
aEffectSet
)
:
mEffectSet
(
aEffectSet
)
mHashIterator
(
mozilla
:
:
Move
(
aEffectSet
.
mEffects
.
Iter
(
)
)
)
mIsEndIterator
(
false
)
{
mEffectSet
.
mActiveIterators
+
+
;
}
Iterator
(
Iterator
&
&
aOther
)
:
mEffectSet
(
aOther
.
mEffectSet
)
mHashIterator
(
mozilla
:
:
Move
(
aOther
.
mHashIterator
)
)
mIsEndIterator
(
aOther
.
mIsEndIterator
)
{
mEffectSet
.
mActiveIterators
+
+
;
}
static
Iterator
EndIterator
(
EffectSet
&
aEffectSet
)
{
Iterator
result
(
aEffectSet
)
;
result
.
mIsEndIterator
=
true
;
return
result
;
}
~
Iterator
(
)
{
MOZ_ASSERT
(
mEffectSet
.
mActiveIterators
>
0
)
;
mEffectSet
.
mActiveIterators
-
-
;
}
bool
operator
!
=
(
const
Iterator
&
aOther
)
const
{
if
(
Done
(
)
|
|
aOther
.
Done
(
)
)
{
return
Done
(
)
!
=
aOther
.
Done
(
)
;
}
return
mHashIterator
.
Get
(
)
!
=
aOther
.
mHashIterator
.
Get
(
)
;
}
Iterator
&
operator
+
+
(
)
{
MOZ_ASSERT
(
!
Done
(
)
)
;
mHashIterator
.
Next
(
)
;
return
*
this
;
}
dom
:
:
KeyframeEffectReadOnly
*
operator
*
(
)
{
MOZ_ASSERT
(
!
Done
(
)
)
;
return
mHashIterator
.
Get
(
)
-
>
GetKey
(
)
;
}
private
:
Iterator
(
)
=
delete
;
Iterator
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
&
)
=
delete
;
bool
Done
(
)
const
{
return
mIsEndIterator
|
|
mHashIterator
.
Done
(
)
;
}
EffectSet
&
mEffectSet
;
OwningEffectSet
:
:
Iterator
mHashIterator
;
bool
mIsEndIterator
;
}
;
friend
class
Iterator
;
Iterator
begin
(
)
{
return
Iterator
(
*
this
)
;
}
Iterator
end
(
)
{
return
Iterator
:
:
EndIterator
(
*
this
)
;
}
#
ifdef
DEBUG
bool
IsBeingEnumerated
(
)
const
{
return
mActiveIterators
!
=
0
;
}
#
endif
bool
IsEmpty
(
)
const
{
return
mEffects
.
IsEmpty
(
)
;
}
RefPtr
<
AnimValuesStyleRule
>
&
AnimationRule
(
EffectCompositor
:
:
CascadeLevel
aCascadeLevel
)
{
return
mAnimationRule
[
aCascadeLevel
]
;
}
const
TimeStamp
&
AnimationRuleRefreshTime
(
EffectCompositor
:
:
CascadeLevel
aCascadeLevel
)
const
{
return
mAnimationRuleRefreshTime
[
aCascadeLevel
]
;
}
void
UpdateAnimationRuleRefreshTime
(
EffectCompositor
:
:
CascadeLevel
aCascadeLevel
const
TimeStamp
&
aRefreshTime
)
{
mAnimationRuleRefreshTime
[
aCascadeLevel
]
=
aRefreshTime
;
}
bool
CascadeNeedsUpdate
(
)
const
{
return
mCascadeNeedsUpdate
;
}
void
MarkCascadeNeedsUpdate
(
)
{
mCascadeNeedsUpdate
=
true
;
}
void
MarkCascadeUpdated
(
)
{
mCascadeNeedsUpdate
=
false
;
}
void
UpdateAnimationGeneration
(
nsPresContext
*
aPresContext
)
;
uint64_t
GetAnimationGeneration
(
)
const
{
return
mAnimationGeneration
;
}
static
nsIAtom
*
*
GetEffectSetPropertyAtoms
(
)
;
private
:
static
nsIAtom
*
GetEffectSetPropertyAtom
(
nsCSSPseudoElements
:
:
Type
aPseudoType
)
;
OwningEffectSet
mEffects
;
EnumeratedArray
<
EffectCompositor
:
:
CascadeLevel
EffectCompositor
:
:
CascadeLevel
(
EffectCompositor
:
:
kCascadeLevelCount
)
RefPtr
<
AnimValuesStyleRule
>
>
mAnimationRule
;
EnumeratedArray
<
EffectCompositor
:
:
CascadeLevel
EffectCompositor
:
:
CascadeLevel
(
EffectCompositor
:
:
kCascadeLevelCount
)
TimeStamp
>
mAnimationRuleRefreshTime
;
bool
mCascadeNeedsUpdate
;
uint64_t
mAnimationGeneration
;
DebugOnly
<
uint64_t
>
mActiveIterators
;
#
ifdef
DEBUG
bool
mCalledPropertyDtor
;
#
endif
}
;
}
#
endif
