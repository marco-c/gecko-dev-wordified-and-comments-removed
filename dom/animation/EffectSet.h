#
ifndef
mozilla_EffectSet_h
#
define
mozilla_EffectSet_h
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashSet
.
h
"
class
nsPresContext
;
enum
class
DisplayItemType
:
uint8_t
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
enum
class
PseudoStyleType
:
uint8_t
;
class
EffectSet
{
public
:
EffectSet
(
)
:
mCascadeNeedsUpdate
(
false
)
mAnimationGeneration
(
0
)
#
ifdef
DEBUG
mActiveIterators
(
0
)
mCalledPropertyDtor
(
false
)
#
endif
mMayHaveOpacityAnim
(
false
)
mMayHaveTransformAnim
(
false
)
{
MOZ_COUNT_CTOR
(
EffectSet
)
;
}
~
EffectSet
(
)
{
MOZ_ASSERT
(
mCalledPropertyDtor
"
must
call
destructor
through
element
property
dtor
"
)
;
MOZ_ASSERT
(
mActiveIterators
=
=
0
"
Effect
set
should
not
be
destroyed
while
it
is
being
"
"
enumerated
"
)
;
MOZ_COUNT_DTOR
(
EffectSet
)
;
}
static
void
PropertyDtor
(
void
*
aObject
nsAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCallback
)
;
static
EffectSet
*
GetEffectSet
(
const
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
)
;
static
EffectSet
*
GetOrCreateEffectSet
(
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
)
;
static
EffectSet
*
GetEffectSetForFrame
(
const
nsIFrame
*
aFrame
const
nsCSSPropertyIDSet
&
aProperties
)
;
static
EffectSet
*
GetEffectSetForFrame
(
const
nsIFrame
*
aFrame
DisplayItemType
aDisplayItemType
)
;
static
EffectSet
*
GetEffectSetForStyleFrame
(
const
nsIFrame
*
aStyleFrame
)
;
static
EffectSet
*
GetEffectSetForEffect
(
const
dom
:
:
KeyframeEffect
*
aEffect
)
;
static
void
DestroyEffectSet
(
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
)
;
void
AddEffect
(
dom
:
:
KeyframeEffect
&
aEffect
)
;
void
RemoveEffect
(
dom
:
:
KeyframeEffect
&
aEffect
)
;
void
SetMayHaveOpacityAnimation
(
)
{
mMayHaveOpacityAnim
=
true
;
}
bool
MayHaveOpacityAnimation
(
)
const
{
return
mMayHaveOpacityAnim
;
}
void
SetMayHaveTransformAnimation
(
)
{
mMayHaveTransformAnim
=
true
;
}
bool
MayHaveTransformAnimation
(
)
const
{
return
mMayHaveTransformAnim
;
}
private
:
typedef
nsTHashSet
<
nsRefPtrHashKey
<
dom
:
:
KeyframeEffect
>
>
OwningEffectSet
;
public
:
class
Iterator
{
public
:
explicit
Iterator
(
EffectSet
&
aEffectSet
)
:
Iterator
(
aEffectSet
aEffectSet
.
mEffects
.
begin
(
)
)
{
}
Iterator
(
)
=
delete
;
Iterator
(
const
Iterator
&
)
=
delete
;
Iterator
(
Iterator
&
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
Iterator
&
&
)
=
delete
;
static
Iterator
EndIterator
(
EffectSet
&
aEffectSet
)
{
return
{
aEffectSet
aEffectSet
.
mEffects
.
end
(
)
}
;
}
#
ifdef
DEBUG
~
Iterator
(
)
{
MOZ_ASSERT
(
mEffectSet
.
mActiveIterators
>
0
)
;
mEffectSet
.
mActiveIterators
-
-
;
}
#
endif
bool
operator
!
=
(
const
Iterator
&
aOther
)
const
{
return
mHashIterator
!
=
aOther
.
mHashIterator
;
}
Iterator
&
operator
+
+
(
)
{
+
+
mHashIterator
;
return
*
this
;
}
dom
:
:
KeyframeEffect
*
operator
*
(
)
{
return
*
mHashIterator
;
}
private
:
Iterator
(
EffectSet
&
aEffectSet
OwningEffectSet
:
:
const_iterator
aHashIterator
)
:
#
ifdef
DEBUG
mEffectSet
(
aEffectSet
)
#
endif
mHashIterator
(
std
:
:
move
(
aHashIterator
)
)
{
#
ifdef
DEBUG
mEffectSet
.
mActiveIterators
+
+
;
#
endif
}
#
ifdef
DEBUG
EffectSet
&
mEffectSet
;
#
endif
OwningEffectSet
:
:
const_iterator
mHashIterator
;
}
;
friend
class
Iterator
;
Iterator
begin
(
)
{
return
Iterator
(
*
this
)
;
}
Iterator
end
(
)
{
return
Iterator
:
:
EndIterator
(
*
this
)
;
}
#
ifdef
DEBUG
bool
IsBeingEnumerated
(
)
const
{
return
mActiveIterators
!
=
0
;
}
#
endif
bool
IsEmpty
(
)
const
{
return
mEffects
.
IsEmpty
(
)
;
}
size_t
Count
(
)
const
{
return
mEffects
.
Count
(
)
;
}
const
TimeStamp
&
LastOverflowAnimationSyncTime
(
)
const
{
return
mLastOverflowAnimationSyncTime
;
}
void
UpdateLastOverflowAnimationSyncTime
(
const
TimeStamp
&
aRefreshTime
)
{
mLastOverflowAnimationSyncTime
=
aRefreshTime
;
}
bool
CascadeNeedsUpdate
(
)
const
{
return
mCascadeNeedsUpdate
;
}
void
MarkCascadeNeedsUpdate
(
)
{
mCascadeNeedsUpdate
=
true
;
}
void
MarkCascadeUpdated
(
)
{
mCascadeNeedsUpdate
=
false
;
}
void
UpdateAnimationGeneration
(
nsPresContext
*
aPresContext
)
;
uint64_t
GetAnimationGeneration
(
)
const
{
return
mAnimationGeneration
;
}
static
nsAtom
*
*
GetEffectSetPropertyAtoms
(
)
;
const
nsCSSPropertyIDSet
&
PropertiesWithImportantRules
(
)
const
{
return
mPropertiesWithImportantRules
;
}
nsCSSPropertyIDSet
&
PropertiesWithImportantRules
(
)
{
return
mPropertiesWithImportantRules
;
}
nsCSSPropertyIDSet
&
PropertiesForAnimationsLevel
(
)
{
return
mPropertiesForAnimationsLevel
;
}
nsCSSPropertyIDSet
PropertiesForAnimationsLevel
(
)
const
{
return
mPropertiesForAnimationsLevel
;
}
private
:
static
nsAtom
*
GetEffectSetPropertyAtom
(
PseudoStyleType
aPseudoType
)
;
OwningEffectSet
mEffects
;
TimeStamp
mLastOverflowAnimationSyncTime
;
bool
mCascadeNeedsUpdate
;
uint64_t
mAnimationGeneration
;
nsCSSPropertyIDSet
mPropertiesWithImportantRules
;
nsCSSPropertyIDSet
mPropertiesForAnimationsLevel
;
#
ifdef
DEBUG
uint64_t
mActiveIterators
;
bool
mCalledPropertyDtor
;
#
endif
bool
mMayHaveOpacityAnim
;
bool
mMayHaveTransformAnim
;
}
;
}
#
endif
