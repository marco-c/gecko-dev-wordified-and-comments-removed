#
include
"
AnimationUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
xpcpublic
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
mozilla
{
void
AnimationUtils
:
:
LogAsyncAnimationFailure
(
nsCString
&
aMessage
const
nsIContent
*
aContent
)
{
if
(
aContent
)
{
aMessage
.
AppendLiteral
(
"
[
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
)
;
nsIAtom
*
id
=
aContent
-
>
GetID
(
)
;
if
(
id
)
{
aMessage
.
AppendLiteral
(
"
with
id
'
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
GetID
(
)
)
)
;
aMessage
.
Append
(
'
\
'
'
)
;
}
aMessage
.
Append
(
'
]
'
)
;
}
aMessage
.
Append
(
'
\
n
'
)
;
printf_stderr
(
"
%
s
"
aMessage
.
get
(
)
)
;
}
nsIDocument
*
AnimationUtils
:
:
GetCurrentRealmDocument
(
JSContext
*
aCx
)
{
nsGlobalWindow
*
win
=
xpc
:
:
CurrentWindowOrNull
(
aCx
)
;
if
(
!
win
)
{
return
nullptr
;
}
return
win
-
>
GetDoc
(
)
;
}
bool
AnimationUtils
:
:
IsOffscreenThrottlingEnabled
(
)
{
static
bool
sOffscreenThrottlingEnabled
;
static
bool
sPrefCached
=
false
;
if
(
!
sPrefCached
)
{
sPrefCached
=
true
;
Preferences
:
:
AddBoolVarCache
(
&
sOffscreenThrottlingEnabled
"
dom
.
animations
.
offscreen
-
throttling
"
)
;
}
return
sOffscreenThrottlingEnabled
;
}
bool
AnimationUtils
:
:
IsCoreAPIEnabled
(
)
{
static
bool
sCoreAPIEnabled
;
static
bool
sPrefCached
=
false
;
if
(
!
sPrefCached
)
{
sPrefCached
=
true
;
Preferences
:
:
AddBoolVarCache
(
&
sCoreAPIEnabled
"
dom
.
animations
-
api
.
core
.
enabled
"
)
;
}
return
sCoreAPIEnabled
;
}
}
