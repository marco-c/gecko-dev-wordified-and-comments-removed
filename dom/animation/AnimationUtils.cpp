#
include
"
AnimationUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
EffectSet
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
xpcpublic
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
void
AnimationUtils
:
:
LogAsyncAnimationFailure
(
nsCString
&
aMessage
const
nsIContent
*
aContent
)
{
if
(
aContent
)
{
aMessage
.
AppendLiteral
(
"
[
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
)
;
nsAtom
*
id
=
aContent
-
>
GetID
(
)
;
if
(
id
)
{
aMessage
.
AppendLiteral
(
"
with
id
'
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
GetID
(
)
)
)
;
aMessage
.
Append
(
'
\
'
'
)
;
}
aMessage
.
Append
(
'
]
'
)
;
}
aMessage
.
Append
(
'
\
n
'
)
;
printf_stderr
(
"
%
s
"
aMessage
.
get
(
)
)
;
}
Document
*
AnimationUtils
:
:
GetCurrentRealmDocument
(
JSContext
*
aCx
)
{
nsGlobalWindowInner
*
win
=
xpc
:
:
CurrentWindowOrNull
(
aCx
)
;
if
(
!
win
)
{
return
nullptr
;
}
return
win
-
>
GetDoc
(
)
;
}
Document
*
AnimationUtils
:
:
GetDocumentFromGlobal
(
JSObject
*
aGlobalObject
)
{
nsGlobalWindowInner
*
win
=
xpc
:
:
WindowOrNull
(
aGlobalObject
)
;
if
(
!
win
)
{
return
nullptr
;
}
return
win
-
>
GetDoc
(
)
;
}
bool
AnimationUtils
:
:
FrameHasAnimatedScale
(
const
nsIFrame
*
aFrame
)
{
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSetForFrame
(
aFrame
nsCSSPropertyIDSet
:
:
TransformLikeProperties
(
)
)
;
if
(
!
effectSet
)
{
return
false
;
}
for
(
const
dom
:
:
KeyframeEffect
*
effect
:
*
effectSet
)
{
if
(
effect
-
>
ContainsAnimatedScale
(
aFrame
)
)
{
return
true
;
}
}
return
false
;
}
bool
AnimationUtils
:
:
HasCurrentTransitions
(
const
Element
*
aElement
PseudoStyleType
aPseudoType
)
{
MOZ_ASSERT
(
aElement
)
;
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aPseudoType
)
;
if
(
!
effectSet
)
{
return
false
;
}
for
(
const
dom
:
:
KeyframeEffect
*
effect
:
*
effectSet
)
{
if
(
effect
-
>
IsCurrent
(
)
&
&
effect
-
>
GetAnimation
(
)
-
>
AsCSSTransition
(
)
)
{
return
true
;
}
}
return
false
;
}
}
