#
ifndef
mozilla_dom_AnimationTimeline_h
#
define
mozilla_dom_AnimationTimeline_h
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AnimationUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
:
:
dom
{
class
Animation
;
class
Document
;
class
ScrollTimeline
;
class
AnimationTimeline
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
AnimationTimeline
(
nsIGlobalObject
*
aWindow
RTPCallerType
aRTPCallerType
)
:
mWindow
(
aWindow
)
mRTPCallerType
(
aRTPCallerType
)
{
MOZ_ASSERT
(
mWindow
)
;
}
protected
:
virtual
~
AnimationTimeline
(
)
;
bool
Tick
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
AnimationTimeline
)
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mWindow
;
}
virtual
Nullable
<
TimeDuration
>
GetCurrentTimeAsDuration
(
)
const
=
0
;
Nullable
<
double
>
GetCurrentTimeAsDouble
(
)
const
{
return
AnimationUtils
:
:
TimeDurationToDouble
(
GetCurrentTimeAsDuration
(
)
mRTPCallerType
)
;
}
TimeStamp
GetCurrentTimeAsTimeStamp
(
)
const
{
Nullable
<
TimeDuration
>
currentTime
=
GetCurrentTimeAsDuration
(
)
;
return
!
currentTime
.
IsNull
(
)
?
ToTimeStamp
(
currentTime
.
Value
(
)
)
:
TimeStamp
(
)
;
}
virtual
bool
TracksWallclockTime
(
)
const
=
0
;
virtual
Nullable
<
TimeDuration
>
ToTimelineTime
(
const
TimeStamp
&
aTimeStamp
)
const
=
0
;
virtual
TimeStamp
ToTimeStamp
(
const
TimeDuration
&
aTimelineTime
)
const
=
0
;
virtual
void
NotifyAnimationUpdated
(
Animation
&
aAnimation
)
;
bool
HasAnimations
(
)
const
{
return
!
mAnimations
.
IsEmpty
(
)
;
}
virtual
void
RemoveAnimation
(
Animation
*
aAnimation
)
;
virtual
void
NotifyAnimationContentVisibilityChanged
(
Animation
*
aAnimation
bool
visible
)
;
virtual
Document
*
GetDocument
(
)
const
=
0
;
virtual
bool
IsMonotonicallyIncreasing
(
)
const
=
0
;
RTPCallerType
RTPCallerType
(
)
const
{
return
mRTPCallerType
;
}
virtual
bool
IsScrollTimeline
(
)
const
{
return
false
;
}
virtual
const
ScrollTimeline
*
AsScrollTimeline
(
)
const
{
return
nullptr
;
}
virtual
Nullable
<
TimeDuration
>
TimelineDuration
(
)
const
{
return
nullptr
;
}
protected
:
nsCOMPtr
<
nsIGlobalObject
>
mWindow
;
typedef
nsTHashSet
<
nsRefPtrHashKey
<
dom
:
:
Animation
>
>
AnimationSet
;
AnimationSet
mAnimations
;
LinkedList
<
dom
:
:
Animation
>
mAnimationOrder
;
enum
RTPCallerType
mRTPCallerType
;
}
;
}
#
endif
