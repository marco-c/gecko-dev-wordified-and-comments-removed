#
ifndef
mozilla_dom_AnimationEffect_h
#
define
mozilla_dom_AnimationEffect_h
#
include
"
mozilla
/
ComputedTiming
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StickyTimeDuration
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TimingParams
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Animation
;
class
KeyframeEffect
;
struct
ComputedEffectTiming
;
class
Document
;
class
AnimationEffect
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
AnimationEffect
)
AnimationEffect
(
Document
*
aDocument
TimingParams
&
&
aTiming
)
;
virtual
KeyframeEffect
*
AsKeyframeEffect
(
)
{
return
nullptr
;
}
nsISupports
*
GetParentObject
(
)
const
{
return
ToSupports
(
mDocument
)
;
}
bool
IsCurrent
(
)
const
;
bool
IsInEffect
(
)
const
;
bool
HasFiniteActiveDuration
(
)
const
{
return
SpecifiedTiming
(
)
.
ActiveDuration
(
)
!
=
TimeDuration
:
:
Forever
(
)
;
}
void
GetTiming
(
EffectTiming
&
aRetVal
)
const
;
void
GetComputedTimingAsDict
(
ComputedEffectTiming
&
aRetVal
)
const
;
virtual
void
UpdateTiming
(
const
OptionalEffectTiming
&
aTiming
ErrorResult
&
aRv
)
;
const
TimingParams
&
SpecifiedTiming
(
)
const
{
return
mTiming
;
}
void
SetSpecifiedTiming
(
TimingParams
&
&
aTiming
)
;
static
ComputedTiming
GetComputedTimingAt
(
const
Nullable
<
TimeDuration
>
&
aLocalTime
const
TimingParams
&
aTiming
double
aPlaybackRate
)
;
ComputedTiming
GetComputedTiming
(
const
TimingParams
*
aTiming
=
nullptr
)
const
;
virtual
void
SetAnimation
(
Animation
*
aAnimation
)
=
0
;
Animation
*
GetAnimation
(
)
const
{
return
mAnimation
;
}
;
virtual
bool
AffectsGeometry
(
)
const
=
0
;
protected
:
virtual
~
AnimationEffect
(
)
;
Nullable
<
TimeDuration
>
GetLocalTime
(
)
const
;
protected
:
RefPtr
<
Document
>
mDocument
;
RefPtr
<
Animation
>
mAnimation
;
TimingParams
mTiming
;
}
;
}
}
#
endif
