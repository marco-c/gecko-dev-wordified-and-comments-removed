#
include
"
mozilla
/
TimingParams
.
h
"
namespace
mozilla
{
TimingParams
:
:
TimingParams
(
const
dom
:
:
AnimationEffectTimingProperties
&
aRhs
const
dom
:
:
Element
*
aTarget
)
:
mDelay
(
TimeDuration
:
:
FromMilliseconds
(
aRhs
.
mDelay
)
)
mEndDelay
(
TimeDuration
:
:
FromMilliseconds
(
aRhs
.
mEndDelay
)
)
mIterations
(
aRhs
.
mIterations
)
mIterationStart
(
aRhs
.
mIterationStart
)
mDirection
(
aRhs
.
mDirection
)
mFill
(
aRhs
.
mFill
)
{
if
(
aRhs
.
mDuration
.
IsUnrestrictedDouble
(
)
)
{
mDuration
.
emplace
(
StickyTimeDuration
:
:
FromMilliseconds
(
aRhs
.
mDuration
.
GetAsUnrestrictedDouble
(
)
)
)
;
}
mFunction
=
AnimationUtils
:
:
ParseEasing
(
aTarget
aRhs
.
mEasing
)
;
}
TimingParams
:
:
TimingParams
(
double
aDuration
)
{
mDuration
.
emplace
(
StickyTimeDuration
:
:
FromMilliseconds
(
aDuration
)
)
;
}
template
<
class
OptionsType
>
static
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
OptionsType
&
aOptions
)
;
template
<
>
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
)
{
MOZ_ASSERT
(
aOptions
.
IsKeyframeEffectOptions
(
)
)
;
return
aOptions
.
GetAsKeyframeEffectOptions
(
)
;
}
template
<
>
const
dom
:
:
AnimationEffectTimingProperties
&
GetTimingProperties
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
)
{
MOZ_ASSERT
(
aOptions
.
IsKeyframeAnimationOptions
(
)
)
;
return
aOptions
.
GetAsKeyframeAnimationOptions
(
)
;
}
template
<
class
OptionsType
>
static
TimingParams
TimingParamsFromOptionsUnion
(
const
OptionsType
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
if
(
aOptions
.
IsUnrestrictedDouble
(
)
)
{
return
TimingParams
(
aOptions
.
GetAsUnrestrictedDouble
(
)
)
;
}
else
{
RefPtr
<
dom
:
:
Element
>
targetElement
;
if
(
!
aTarget
.
IsNull
(
)
)
{
const
dom
:
:
ElementOrCSSPseudoElement
&
target
=
aTarget
.
Value
(
)
;
MOZ_ASSERT
(
target
.
IsElement
(
)
|
|
target
.
IsCSSPseudoElement
(
)
"
Uninitialized
target
"
)
;
if
(
target
.
IsElement
(
)
)
{
targetElement
=
&
target
.
GetAsElement
(
)
;
}
else
{
targetElement
=
target
.
GetAsCSSPseudoElement
(
)
.
ParentElement
(
)
;
}
}
return
TimingParams
(
GetTimingProperties
(
aOptions
)
targetElement
)
;
}
}
TimingParams
TimingParams
:
:
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeEffectOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
return
TimingParamsFromOptionsUnion
(
aOptions
aTarget
)
;
}
TimingParams
TimingParams
:
:
FromOptionsUnion
(
const
dom
:
:
UnrestrictedDoubleOrKeyframeAnimationOptions
&
aOptions
const
Nullable
<
dom
:
:
ElementOrCSSPseudoElement
>
&
aTarget
)
{
return
TimingParamsFromOptionsUnion
(
aOptions
aTarget
)
;
}
bool
TimingParams
:
:
operator
=
=
(
const
TimingParams
&
aOther
)
const
{
return
mDuration
=
=
aOther
.
mDuration
&
&
mDelay
=
=
aOther
.
mDelay
&
&
mIterations
=
=
aOther
.
mIterations
&
&
mIterationStart
=
=
aOther
.
mIterationStart
&
&
mDirection
=
=
aOther
.
mDirection
&
&
mFill
=
=
aOther
.
mFill
&
&
mFunction
=
=
aOther
.
mFunction
;
}
}
