#
include
"
mozilla
/
dom
/
WebTransport
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportChild
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportLog
.
h
"
namespace
mozilla
:
:
dom
{
void
WebTransportChild
:
:
Shutdown
(
)
{
if
(
!
CanSend
(
)
)
{
return
;
}
Close
(
)
;
mTransport
=
nullptr
;
}
void
WebTransportChild
:
:
CloseAll
(
)
{
}
:
:
mozilla
:
:
ipc
:
:
IPCResult
WebTransportChild
:
:
RecvCloseAll
(
CloseAllResolver
&
&
aResolver
)
{
CloseAll
(
)
;
aResolver
(
NS_OK
)
;
return
IPC_OK
(
)
;
}
:
:
mozilla
:
:
ipc
:
:
IPCResult
WebTransportChild
:
:
RecvRemoteClosed
(
const
bool
&
aCleanly
const
uint32_t
&
aCode
const
nsACString
&
aReason
)
{
if
(
mTransport
)
{
mTransport
-
>
RemoteClosed
(
aCleanly
aCode
aReason
)
;
}
return
IPC_OK
(
)
;
}
:
:
mozilla
:
:
ipc
:
:
IPCResult
WebTransportChild
:
:
RecvIncomingBidirectionalStream
(
const
RefPtr
<
DataPipeReceiver
>
&
aIncoming
const
RefPtr
<
DataPipeSender
>
&
aOutgoing
)
{
if
(
mTransport
)
{
mTransport
-
>
NewBidirectionalStream
(
aIncoming
aOutgoing
)
;
}
return
IPC_OK
(
)
;
}
:
:
mozilla
:
:
ipc
:
:
IPCResult
WebTransportChild
:
:
RecvIncomingUnidirectionalStream
(
const
RefPtr
<
DataPipeReceiver
>
&
aStream
)
{
if
(
mTransport
)
{
mTransport
-
>
NewUnidirectionalStream
(
aStream
)
;
}
return
IPC_OK
(
)
;
}
}
