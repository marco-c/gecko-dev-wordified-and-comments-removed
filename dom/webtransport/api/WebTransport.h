#
ifndef
DOM_WEBTRANSPORT_API_WEBTRANSPORT__H_
#
define
DOM_WEBTRANSPORT_API_WEBTRANSPORT__H_
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportChild
.
h
"
namespace
mozilla
:
:
dom
{
class
WebTransportError
;
class
WebTransportDatagramDuplexStream
;
class
WebTransportIncomingStreamsAlgorithms
;
class
ReadableStream
;
class
WritableStream
;
class
WebTransport
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
WebTransportIncomingStreamsAlgorithms
;
public
:
explicit
WebTransport
(
nsIGlobalObject
*
aGlobal
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
WebTransport
)
enum
class
WebTransportState
{
CONNECTING
CONNECTED
CLOSED
FAILED
}
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
Init
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
const
WebTransportOptions
&
aOptions
ErrorResult
&
aError
)
;
void
ResolveWaitingConnection
(
WebTransportReliabilityMode
aReliability
WebTransportChild
*
aChild
)
;
void
RejectWaitingConnection
(
nsresult
aRv
)
;
bool
ParseURL
(
const
nsAString
&
aURL
)
const
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
Cleanup
(
WebTransportError
*
aError
const
WebTransportCloseInfo
*
aCloseInfo
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
WebTransport
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
const
WebTransportOptions
&
aOptions
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
GetStats
(
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Ready
(
)
{
return
do_AddRef
(
mReady
)
;
}
WebTransportReliabilityMode
Reliability
(
)
;
WebTransportCongestionControl
CongestionControl
(
)
;
already_AddRefed
<
Promise
>
Closed
(
)
;
void
Close
(
const
WebTransportCloseInfo
&
aOptions
)
;
already_AddRefed
<
WebTransportDatagramDuplexStream
>
Datagrams
(
)
;
already_AddRefed
<
Promise
>
CreateBidirectionalStream
(
ErrorResult
&
aError
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
already_AddRefed
<
ReadableStream
>
IncomingBidirectionalStreams
(
)
;
already_AddRefed
<
Promise
>
CreateUnidirectionalStream
(
ErrorResult
&
aError
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
already_AddRefed
<
ReadableStream
>
IncomingUnidirectionalStreams
(
)
;
void
Shutdown
(
)
{
}
private
:
~
WebTransport
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
WebTransportChild
>
mChild
;
nsTArray
<
RefPtr
<
WritableStream
>
>
mSendStreams
;
nsTArray
<
RefPtr
<
ReadableStream
>
>
mReceiveStreams
;
WebTransportState
mState
;
RefPtr
<
Promise
>
mReady
;
RefPtr
<
Promise
>
mIncomingUnidirectionalPromise
;
RefPtr
<
Promise
>
mIncomingBidirectionalPromise
;
WebTransportReliabilityMode
mReliability
;
RefPtr
<
ReadableStream
>
mIncomingUnidirectionalStreams
;
RefPtr
<
ReadableStream
>
mIncomingBidirectionalStreams
;
RefPtr
<
WebTransportDatagramDuplexStream
>
mDatagrams
;
RefPtr
<
Promise
>
mClosed
;
}
;
}
#
endif
