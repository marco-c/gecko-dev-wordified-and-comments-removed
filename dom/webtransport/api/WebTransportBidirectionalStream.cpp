#
include
"
WebTransportBidirectionalStream
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
mozilla
:
:
ipc
;
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
WebTransportBidirectionalStream
mGlobal
mReadable
mWritable
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
WebTransportBidirectionalStream
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
WebTransportBidirectionalStream
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WebTransportBidirectionalStream
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
nsIGlobalObject
*
WebTransportBidirectionalStream
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WebTransportBidirectionalStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
WebTransportBidirectionalStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
WebTransportBidirectionalStream
>
WebTransportBidirectionalStream
:
:
Create
(
WebTransport
*
aWebTransport
nsIGlobalObject
*
aGlobal
uint64_t
aStreamId
DataPipeReceiver
*
receiver
DataPipeSender
*
aSender
Maybe
<
int64_t
>
aSendOrder
ErrorResult
&
aRv
)
{
RefPtr
<
WebTransportReceiveStream
>
readableStream
=
WebTransportReceiveStream
:
:
Create
(
aWebTransport
aGlobal
aStreamId
receiver
aRv
)
;
if
(
!
readableStream
)
{
return
nullptr
;
}
RefPtr
<
WebTransportSendStream
>
writableStream
=
WebTransportSendStream
:
:
Create
(
aWebTransport
aGlobal
aStreamId
aSender
aSendOrder
aRv
)
;
if
(
!
writableStream
)
{
return
nullptr
;
;
}
auto
stream
=
MakeRefPtr
<
WebTransportBidirectionalStream
>
(
aGlobal
readableStream
writableStream
)
;
return
stream
.
forget
(
)
;
}
}
