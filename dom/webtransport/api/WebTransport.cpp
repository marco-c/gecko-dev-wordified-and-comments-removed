#
include
"
WebTransport
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
WebTransport
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
WebTransport
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
WebTransport
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WebTransport
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
nsIGlobalObject
*
WebTransport
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WebTransport
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
WebTransport_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
WebTransport
>
WebTransport
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
const
WebTransportOptions
&
aOptions
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
WebTransport
:
:
GetStats
(
ErrorResult
&
aError
)
{
aError
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
already_AddRefed
<
Promise
>
WebTransport
:
:
Ready
(
)
{
ErrorResult
error
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeRejectWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
WebTransportReliabilityMode
WebTransport
:
:
Reliability
(
)
{
return
WebTransportReliabilityMode
:
:
Pending
;
}
WebTransportCongestionControl
WebTransport
:
:
CongestionControl
(
)
{
return
WebTransportCongestionControl
:
:
Default
;
}
already_AddRefed
<
Promise
>
WebTransport
:
:
Closed
(
)
{
ErrorResult
error
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
error
)
;
if
(
error
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeRejectWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
void
WebTransport
:
:
Close
(
const
WebTransportCloseInfo
&
aOptions
)
{
}
already_AddRefed
<
WebTransportDatagramDuplexStream
>
WebTransport
:
:
Datagrams
(
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
WebTransport
:
:
CreateBidirectionalStream
(
ErrorResult
&
aError
)
{
aError
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
already_AddRefed
<
ReadableStream
>
WebTransport
:
:
IncomingBidirectionalStreams
(
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
WebTransport
:
:
CreateUnidirectionalStream
(
ErrorResult
&
aError
)
{
aError
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
already_AddRefed
<
ReadableStream
>
WebTransport
:
:
IncomingUnidirectionalStreams
(
)
{
return
nullptr
;
}
}
