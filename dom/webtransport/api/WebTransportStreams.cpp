#
include
"
mozilla
/
dom
/
WebTransportStreams
.
h
"
#
include
"
mozilla
/
dom
/
Promise
-
inl
.
h
"
#
include
"
mozilla
/
dom
/
WebTransport
.
h
"
#
include
"
mozilla
/
Result
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
WebTransportIncomingStreamsAlgorithms
UnderlyingSourceAlgorithmsWrapper
mStream
)
NS_IMPL_ADDREF_INHERITED
(
WebTransportIncomingStreamsAlgorithms
UnderlyingSourceAlgorithmsWrapper
)
NS_IMPL_RELEASE_INHERITED
(
WebTransportIncomingStreamsAlgorithms
UnderlyingSourceAlgorithmsWrapper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WebTransportIncomingStreamsAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
UnderlyingSourceAlgorithmsWrapper
)
WebTransportIncomingStreamsAlgorithms
:
:
~
WebTransportIncomingStreamsAlgorithms
(
)
=
default
;
already_AddRefed
<
Promise
>
WebTransportIncomingStreamsAlgorithms
:
:
PullCallbackImpl
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mStream
-
>
GetParentObject
(
)
aRv
)
;
RefPtr
<
WebTransportIncomingStreamsAlgorithms
>
self
(
this
)
;
Result
<
RefPtr
<
Promise
>
nsresult
>
returnResult
=
mIncomingStreamPromise
-
>
ThenWithCycleCollectedArgs
(
[
]
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
ErrorResult
&
aRv
const
RefPtr
<
WebTransportIncomingStreamsAlgorithms
>
&
self
RefPtr
<
Promise
>
newPromise
)
{
Unused
<
<
self
-
>
mUnidirectional
;
newPromise
-
>
MaybeResolveWithUndefined
(
)
;
return
newPromise
.
forget
(
)
;
}
self
promise
)
;
if
(
returnResult
.
isErr
(
)
)
{
aRv
.
Throw
(
returnResult
.
unwrapErr
(
)
)
;
return
nullptr
;
}
return
returnResult
.
unwrap
(
)
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebTransportIncomingStreamsAlgorithms
:
:
CancelCallbackImpl
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
{
return
nullptr
;
}
}
