#
include
"
mozilla
/
dom
/
WebTransportReceiveStream
.
h
"
#
include
"
mozilla
/
dom
/
ReadableByteStreamController
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
dom
{
WebTransportReceiveStream
:
:
WebTransportReceiveStream
(
nsIGlobalObject
*
aGlobal
)
:
ReadableStream
(
aGlobal
)
{
}
JSObject
*
WebTransportReceiveStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
WebTransportReceiveStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
WebTransportReceiveStream
>
WebTransportReceiveStream
:
:
Create
(
WebTransport
*
aWebTransport
nsIGlobalObject
*
aGlobal
DataPipeReceiver
*
receiver
ErrorResult
&
aRv
)
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aGlobal
)
)
{
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
auto
stream
=
MakeRefPtr
<
WebTransportReceiveStream
>
(
aGlobal
)
;
nsCOMPtr
<
nsIAsyncInputStream
>
inputStream
=
receiver
;
auto
algorithms
=
MakeRefPtr
<
InputToReadableStreamAlgorithms
>
(
inputStream
(
ReadableStream
*
)
stream
)
;
stream
-
>
SetUpByteNative
(
cx
*
algorithms
Some
(
0
.
0
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
aWebTransport
-
>
mReceiveStreams
.
AppendElement
(
stream
)
;
return
stream
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebTransportReceiveStream
:
:
GetStats
(
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
CreateInfallible
(
ReadableStream
:
:
mGlobal
)
;
promise
-
>
MaybeRejectWithNotSupportedError
(
"
GetStats
isn
'
t
supported
yet
"
)
;
return
promise
.
forget
(
)
;
}
}
