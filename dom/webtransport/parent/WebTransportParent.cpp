#
include
"
WebTransportParent
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportLog
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
namespace
mozilla
:
:
dom
{
using
IPCResult
=
mozilla
:
:
ipc
:
:
IPCResult
;
using
CreateWebTransportPromise
=
MozPromise
<
WebTransportReliabilityMode
nsresult
true
>
;
using
ResolveType
=
Tuple
<
const
nsresult
&
const
uint8_t
&
>
;
WebTransportParent
:
:
~
WebTransportParent
(
)
{
LOG
(
(
"
Destroying
WebTransportParent
%
p
"
this
)
)
;
}
void
WebTransportParent
:
:
Create
(
const
nsAString
&
aURL
const
bool
&
aDedicated
const
bool
&
aRequireUnreliable
const
uint32_t
&
aCongestionControl
Endpoint
<
PWebTransportParent
>
&
&
aParentEndpoint
std
:
:
function
<
void
(
Tuple
<
const
nsresult
&
const
uint8_t
&
>
)
>
&
&
aResolver
)
{
LOG
(
(
"
Created
WebTransportParent
%
s
%
s
%
s
congestion
=
%
s
"
NS_ConvertUTF16toUTF8
(
aURL
)
.
get
(
)
aDedicated
?
"
Dedicated
"
:
"
AllowPooling
"
aRequireUnreliable
?
"
RequireUnreliable
"
:
"
"
aCongestionControl
=
=
(
uint32_t
)
dom
:
:
WebTransportCongestionControl
:
:
Throughput
?
"
ThroughPut
"
:
(
aCongestionControl
=
=
(
uint32_t
)
dom
:
:
WebTransportCongestionControl
:
:
Low_latency
?
"
Low
-
Latency
"
:
"
Default
"
)
)
)
;
if
(
!
StaticPrefs
:
:
network_webtransport_enabled
(
)
)
{
aResolver
(
ResolveType
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
static_cast
<
uint8_t
>
(
WebTransportReliabilityMode
:
:
Pending
)
)
)
;
return
;
}
if
(
!
aParentEndpoint
.
IsValid
(
)
)
{
aResolver
(
ResolveType
(
NS_ERROR_INVALID_ARG
static_cast
<
uint8_t
>
(
WebTransportReliabilityMode
:
:
Pending
)
)
)
;
return
;
}
nsresult
rv
;
nsCOMPtr
<
nsISerialEventTarget
>
sts
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
InvokeAsync
(
sts
__func__
[
parentEndpoint
=
std
:
:
move
(
aParentEndpoint
)
]
(
)
mutable
{
RefPtr
<
WebTransportParent
>
parent
=
new
WebTransportParent
(
)
;
LOG
(
(
"
Binding
parent
endpoint
"
)
)
;
if
(
!
parentEndpoint
.
Bind
(
parent
)
)
{
return
CreateWebTransportPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
CreateWebTransportPromise
:
:
CreateAndResolve
(
WebTransportReliabilityMode
:
:
Supports_unreliable
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
]
(
const
CreateWebTransportPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
aResolver
(
ResolveType
(
aValue
.
RejectValue
(
)
static_cast
<
uint8_t
>
(
WebTransportReliabilityMode
:
:
Pending
)
)
)
;
}
else
{
aResolver
(
ResolveType
(
NS_OK
static_cast
<
uint8_t
>
(
aValue
.
ResolveValue
(
)
)
)
)
;
}
}
)
;
}
void
WebTransportParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOG
(
(
"
ActorDestroy
WebTransportParent
%
d
"
aWhy
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebTransportParent
:
:
RecvClose
(
const
uint32_t
&
aCode
const
nsACString
&
aReason
)
{
LOG
(
(
"
Close
received
code
=
%
u
reason
=
%
s
"
aCode
PromiseFlatCString
(
aReason
)
.
get
(
)
)
)
;
Close
(
)
;
return
IPC_OK
(
)
;
}
}
