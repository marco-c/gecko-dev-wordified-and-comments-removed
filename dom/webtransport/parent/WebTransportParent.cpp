#
include
"
WebTransportParent
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
dom
/
WebTransportLog
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
using
IPCResult
=
mozilla
:
:
ipc
:
:
IPCResult
;
namespace
mozilla
:
:
dom
{
WebTransportParent
:
:
~
WebTransportParent
(
)
{
LOG
(
(
"
Destroying
WebTransportParent
%
p
"
this
)
)
;
}
bool
WebTransportParent
:
:
Init
(
const
nsAString
&
aURL
Endpoint
<
PWebTransportParent
>
&
&
aParentEndpoint
std
:
:
function
<
void
(
const
nsresult
&
)
>
&
&
aResolver
)
{
LOG
(
(
"
Created
WebTransportParent
%
p
%
s
"
this
NS_ConvertUTF16toUTF8
(
aURL
)
.
get
(
)
)
)
;
if
(
!
StaticPrefs
:
:
network_webtransport_enabled
(
)
)
{
aResolver
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
return
false
;
}
if
(
!
aParentEndpoint
.
IsValid
(
)
)
{
aResolver
(
NS_ERROR_INVALID_ARG
)
;
return
false
;
}
if
(
!
aParentEndpoint
.
Bind
(
this
)
)
{
aResolver
(
NS_ERROR_FAILURE
)
;
return
false
;
}
aResolver
(
NS_OK
)
;
return
true
;
}
void
WebTransportParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOG
(
(
"
ActorDestroy
WebTransportParent
%
d
"
aWhy
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebTransportParent
:
:
RecvClose
(
const
uint32_t
&
aCode
const
nsACString
&
aReason
)
{
LOG
(
(
"
Close
received
code
=
%
u
reason
=
%
s
"
aCode
PromiseFlatCString
(
aReason
)
.
get
(
)
)
)
;
Close
(
)
;
return
IPC_OK
(
)
;
}
}
