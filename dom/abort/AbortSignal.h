#
ifndef
mozilla_dom_AbortSignal_h
#
define
mozilla_dom_AbortSignal_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AbortSignal
;
class
AbortSignalImpl
;
class
AbortFollower
{
public
:
virtual
void
Abort
(
)
=
0
;
void
Follow
(
AbortSignalImpl
*
aSignal
)
;
void
Unfollow
(
)
;
bool
IsFollowing
(
)
const
;
protected
:
virtual
~
AbortFollower
(
)
;
RefPtr
<
AbortSignalImpl
>
mFollowingSignal
;
}
;
class
AbortSignalImpl
:
public
AbortFollower
public
nsISupports
{
public
:
explicit
AbortSignalImpl
(
bool
aAborted
)
;
bool
Aborted
(
)
const
;
void
Abort
(
)
override
;
void
AddFollower
(
AbortFollower
*
aFollower
)
;
void
RemoveFollower
(
AbortFollower
*
aFollower
)
;
protected
:
virtual
~
AbortSignalImpl
(
)
=
default
;
private
:
nsTArray
<
AbortFollower
*
>
mFollowers
;
bool
mAborted
;
}
;
class
AbortSignal
final
:
public
DOMEventTargetHelper
public
AbortSignalImpl
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
AbortSignal
DOMEventTargetHelper
)
AbortSignal
(
nsIGlobalObject
*
aGlobalObject
bool
aAborted
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
IMPL_EVENT_HANDLER
(
abort
)
;
void
Abort
(
)
override
;
private
:
~
AbortSignal
(
)
=
default
;
}
;
}
}
#
endif
