#
ifndef
mozilla_dom_AbortSignal_h
#
define
mozilla_dom_AbortSignal_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
AbortFollower
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
namespace
mozilla
:
:
dom
{
class
AbortSignal
:
public
DOMEventTargetHelper
public
AbortSignalImpl
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
AbortSignal
DOMEventTargetHelper
)
static
already_AddRefed
<
AbortSignal
>
Create
(
nsIGlobalObject
*
aGlobalObject
SignalAborted
aAborted
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
IMPL_EVENT_HANDLER
(
abort
)
;
static
already_AddRefed
<
AbortSignal
>
Abort
(
GlobalObject
&
aGlobal
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
)
;
static
already_AddRefed
<
AbortSignal
>
Timeout
(
GlobalObject
&
aGlobal
uint64_t
aMilliseconds
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
AbortSignal
>
Any
(
GlobalObject
&
aGlobal
const
Sequence
<
OwningNonNull
<
AbortSignal
>
>
&
aSignals
)
;
static
already_AddRefed
<
AbortSignal
>
Any
(
nsIGlobalObject
*
aGlobal
const
Span
<
const
OwningNonNull
<
AbortSignal
>
>
&
aSignals
FunctionRef
<
already_AddRefed
<
AbortSignal
>
(
nsIGlobalObject
*
aGlobal
)
>
aCreateResultSignal
)
;
void
ThrowIfAborted
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
virtual
bool
IsTaskSignal
(
)
const
{
return
false
;
}
bool
Dependent
(
)
const
;
protected
:
AbortSignal
(
nsIGlobalObject
*
aGlobalObject
SignalAborted
aAborted
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
)
;
void
Init
(
)
;
virtual
~
AbortSignal
(
)
;
void
MakeDependentOn
(
AbortSignal
*
aSignal
)
;
void
SignalAbortWithDependents
(
)
override
;
void
RunAbortSteps
(
)
override
;
nsTArray
<
WeakPtr
<
AbortSignal
>
>
mSourceSignals
;
nsTArray
<
RefPtr
<
AbortSignal
>
>
mDependentSignals
;
bool
mDependent
;
}
;
}
#
endif
