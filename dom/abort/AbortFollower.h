#
ifndef
mozilla_dom_AbortFollower_h
#
define
mozilla_dom_AbortFollower_h
#
include
"
jsapi
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AbortSignal
;
class
AbortSignalImpl
;
class
AbortFollower
:
public
nsISupports
{
public
:
virtual
void
RunAbortAlgorithm
(
)
=
0
;
void
Follow
(
AbortSignalImpl
*
aSignal
)
;
void
Unfollow
(
)
;
bool
IsFollowing
(
)
const
;
AbortSignalImpl
*
Signal
(
)
const
{
return
mFollowingSignal
;
}
protected
:
static
void
Unlink
(
AbortFollower
*
aFollower
)
{
aFollower
-
>
Unfollow
(
)
;
}
virtual
~
AbortFollower
(
)
;
friend
class
AbortSignalImpl
;
WeakPtr
<
AbortSignalImpl
>
mFollowingSignal
;
}
;
class
AbortSignalImpl
:
public
nsISupports
public
SupportsWeakPtr
{
public
:
explicit
AbortSignalImpl
(
bool
aAborted
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
)
;
bool
Aborted
(
)
const
;
void
GetReason
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aReason
)
;
JS
:
:
Value
RawReason
(
)
const
;
virtual
void
SignalAbort
(
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
)
;
protected
:
static
void
Traverse
(
AbortSignalImpl
*
aSignal
nsCycleCollectionTraversalCallback
&
cb
)
;
static
void
Unlink
(
AbortSignalImpl
*
aSignal
)
;
virtual
~
AbortSignalImpl
(
)
=
default
;
JS
:
:
Heap
<
JS
:
:
Value
>
mReason
;
private
:
friend
class
AbortFollower
;
void
MaybeAssignAbortError
(
JSContext
*
aCx
)
;
nsTObserverArray
<
AbortFollower
*
>
mFollowers
;
bool
mAborted
;
}
;
}
}
#
endif
