interface
nsISupports
;
interface
nsIContentChild
;
interface
nsIContentParent
;
interface
mixin
JSWindowActor
{
[
Throws
]
void
sendAsyncMessage
(
DOMString
messageName
optional
any
obj
)
;
[
Throws
]
Promise
<
any
>
sendQuery
(
DOMString
messageName
optional
any
obj
)
;
}
;
[
ChromeOnly
Exposed
=
Window
]
interface
JSWindowActorParent
{
[
ChromeOnly
]
constructor
(
)
;
readonly
attribute
WindowGlobalParent
?
manager
;
[
Throws
]
readonly
attribute
CanonicalBrowsingContext
?
browsingContext
;
}
;
JSWindowActorParent
includes
JSWindowActor
;
[
ChromeOnly
Exposed
=
Window
]
interface
JSWindowActorChild
{
[
ChromeOnly
]
constructor
(
)
;
readonly
attribute
WindowGlobalChild
?
manager
;
[
Throws
]
readonly
attribute
Document
?
document
;
[
Throws
]
readonly
attribute
BrowsingContext
?
browsingContext
;
[
Throws
]
readonly
attribute
nsIDocShell
?
docShell
;
[
Throws
]
readonly
attribute
WindowProxy
?
contentWindow
;
}
;
JSWindowActorChild
includes
JSWindowActor
;
[
Exposed
=
Window
]
callback
interface
MozObserverCallback
{
void
observe
(
nsISupports
subject
ByteString
topic
DOMString
?
data
)
;
}
;
[
MOZ_CAN_RUN_SCRIPT_BOUNDARY
]
callback
MozJSWindowActorCallback
=
void
(
)
;
[
GenerateInit
]
dictionary
MozJSWindowActorCallbacks
{
[
ChromeOnly
]
MozJSWindowActorCallback
willDestroy
;
[
ChromeOnly
]
MozJSWindowActorCallback
didDestroy
;
[
ChromeOnly
]
MozJSWindowActorCallback
actorCreated
;
}
;
dictionary
WindowActorOptions
{
boolean
allFrames
=
false
;
boolean
includeChrome
=
false
;
sequence
<
DOMString
>
matches
;
sequence
<
DOMString
>
remoteTypes
;
sequence
<
DOMString
>
messageManagerGroups
;
WindowActorSidedOptions
parent
;
WindowActorChildOptions
child
;
}
;
dictionary
WindowActorSidedOptions
{
required
ByteString
moduleURI
;
}
;
dictionary
WindowActorChildOptions
:
WindowActorSidedOptions
{
record
<
DOMString
AddEventListenerOptions
>
events
;
sequence
<
ByteString
>
observers
;
}
;
