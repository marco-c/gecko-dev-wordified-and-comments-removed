interface
nsISupports
;
[
ChromeOnly
Exposed
=
Window
]
interface
JSWindowActorParent
{
[
ChromeOnly
]
constructor
(
)
;
readonly
attribute
WindowGlobalParent
?
manager
;
readonly
attribute
WindowContext
?
windowContext
;
[
Throws
]
readonly
attribute
CanonicalBrowsingContext
?
browsingContext
;
}
;
JSWindowActorParent
includes
JSActor
;
[
ChromeOnly
Exposed
=
Window
]
interface
JSWindowActorChild
{
[
ChromeOnly
]
constructor
(
)
;
readonly
attribute
WindowGlobalChild
?
manager
;
readonly
attribute
WindowContext
?
windowContext
;
[
Throws
]
readonly
attribute
Document
?
document
;
[
Throws
]
readonly
attribute
BrowsingContext
?
browsingContext
;
[
Throws
]
readonly
attribute
nsIDocShell
?
docShell
;
[
Throws
]
readonly
attribute
WindowProxy
?
contentWindow
;
}
;
JSWindowActorChild
includes
JSActor
;
dictionary
WindowActorOptions
{
boolean
allFrames
=
false
;
boolean
includeChrome
=
false
;
sequence
<
DOMString
>
matches
;
sequence
<
UTF8String
>
remoteTypes
;
sequence
<
DOMString
>
messageManagerGroups
;
WindowActorSidedOptions
parent
;
WindowActorChildOptions
child
;
}
;
dictionary
WindowActorSidedOptions
{
required
ByteString
moduleURI
;
}
;
dictionary
WindowActorEventListenerOptions
:
AddEventListenerOptions
{
boolean
createActor
=
true
;
}
;
dictionary
WindowActorChildOptions
:
WindowActorSidedOptions
{
record
<
DOMString
WindowActorEventListenerOptions
>
events
;
sequence
<
ByteString
>
observers
;
}
;
