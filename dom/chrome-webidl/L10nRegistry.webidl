dictionary
L10nFileSourceMockFile
{
required
UTF8String
path
;
required
UTF8String
source
;
}
;
enum
L10nFileSourceHasFileStatus
{
"
present
"
"
missing
"
"
unknown
"
}
;
dictionary
FileSourceOptions
{
FluentBundleAddResourceOptions
addResourceOptions
=
{
}
;
}
;
dictionary
ResourceId
{
required
UTF8String
path
;
boolean
_optional
=
false
;
}
;
typedef
(
UTF8String
or
ResourceId
)
L10nResourceId
;
[
ChromeOnly
Exposed
=
Window
]
interface
L10nFileSource
{
[
Throws
]
constructor
(
UTF8String
name
UTF8String
metaSource
sequence
<
UTF8String
>
locales
UTF8String
prePath
optional
FileSourceOptions
options
=
{
}
optional
sequence
<
UTF8String
>
index
)
;
[
Throws
]
static
L10nFileSource
createMock
(
UTF8String
name
UTF8String
metasource
sequence
<
UTF8String
>
locales
UTF8String
prePath
sequence
<
L10nFileSourceMockFile
>
fs
)
;
readonly
attribute
UTF8String
name
;
readonly
attribute
UTF8String
metaSource
;
[
Pure
Cached
Frozen
]
readonly
attribute
sequence
<
UTF8String
>
locales
;
readonly
attribute
UTF8String
prePath
;
[
Pure
Cached
Frozen
]
readonly
attribute
sequence
<
UTF8String
>
?
index
;
[
Throws
]
L10nFileSourceHasFileStatus
hasFile
(
UTF8String
locale
UTF8String
path
)
;
[
Throws
]
Promise
<
FluentResource
?
>
fetchFile
(
UTF8String
locale
UTF8String
path
)
;
[
Throws
]
FluentResource
?
fetchFileSync
(
UTF8String
locale
UTF8String
path
)
;
}
;
dictionary
FluentBundleIteratorResult
{
required
FluentBundle
?
value
;
required
boolean
done
;
}
;
[
LegacyNoInterfaceObject
Exposed
=
Window
]
interface
FluentBundleIterator
{
FluentBundleIteratorResult
next
(
)
;
[
Alias
=
"
iterator
"
]
FluentBundleIterator
values
(
)
;
}
;
[
LegacyNoInterfaceObject
Exposed
=
Window
]
interface
FluentBundleAsyncIterator
{
[
NewObject
]
Promise
<
FluentBundleIteratorResult
>
next
(
)
;
[
Alias
=
"
asyncIterator
"
]
FluentBundleAsyncIterator
values
(
)
;
}
;
dictionary
L10nRegistryOptions
{
FluentBundleOptions
bundleOptions
=
{
}
;
}
;
[
ChromeOnly
Exposed
=
Window
]
interface
L10nRegistry
{
constructor
(
optional
L10nRegistryOptions
aOptions
=
{
}
)
;
static
L10nRegistry
getInstance
(
)
;
sequence
<
UTF8String
>
getAvailableLocales
(
)
;
void
registerSources
(
sequence
<
L10nFileSource
>
aSources
)
;
void
updateSources
(
sequence
<
L10nFileSource
>
aSources
)
;
void
removeSources
(
sequence
<
UTF8String
>
aSources
)
;
[
Throws
]
boolean
hasSource
(
UTF8String
aName
)
;
[
Throws
]
L10nFileSource
?
getSource
(
UTF8String
aName
)
;
sequence
<
UTF8String
>
getSourceNames
(
)
;
void
clearSources
(
)
;
[
Throws
NewObject
]
FluentBundleIterator
generateBundlesSync
(
sequence
<
UTF8String
>
aLocales
sequence
<
L10nResourceId
>
aResourceIds
)
;
[
Throws
NewObject
]
FluentBundleAsyncIterator
generateBundles
(
sequence
<
UTF8String
>
aLocales
sequence
<
L10nResourceId
>
aResourceIds
)
;
}
;
