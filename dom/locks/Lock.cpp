#
include
"
mozilla
/
dom
/
Lock
.
h
"
#
include
"
mozilla
/
dom
/
LockBinding
.
h
"
#
include
"
mozilla
/
dom
/
LockManager
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
locks
/
LockRequestChild
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Lock
mOwner
mWaitingPromise
mReleasedPromise
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Lock
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Lock
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Lock
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
Lock
:
:
Lock
(
nsIGlobalObject
*
aGlobal
const
WeakPtr
<
locks
:
:
LockRequestChild
>
&
aLockRequestChild
const
nsString
&
aName
LockMode
aMode
const
RefPtr
<
Promise
>
&
aReleasedPromise
ErrorResult
&
aRv
)
:
mOwner
(
aGlobal
)
mLockRequestChild
(
aLockRequestChild
)
mName
(
aName
)
mMode
(
aMode
)
mWaitingPromise
(
Promise
:
:
Create
(
aGlobal
aRv
)
)
mReleasedPromise
(
aReleasedPromise
)
{
MOZ_ASSERT
(
mLockRequestChild
)
;
MOZ_ASSERT
(
aReleasedPromise
)
;
}
JSObject
*
Lock
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Lock_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
Lock
:
:
GetName
(
nsString
&
aRetVal
)
const
{
aRetVal
=
mName
;
}
LockMode
Lock
:
:
Mode
(
)
const
{
return
mMode
;
}
Promise
&
Lock
:
:
GetWaitingPromise
(
)
{
MOZ_ASSERT
(
mWaitingPromise
)
;
return
*
mWaitingPromise
;
}
void
Lock
:
:
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
if
(
mLockRequestChild
)
{
locks
:
:
PLockRequestChild
:
:
Send__delete__
(
mLockRequestChild
)
;
mLockRequestChild
=
nullptr
;
}
mReleasedPromise
-
>
MaybeResolve
(
aValue
)
;
}
void
Lock
:
:
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
if
(
mLockRequestChild
)
{
locks
:
:
PLockRequestChild
:
:
Send__delete__
(
mLockRequestChild
)
;
mLockRequestChild
=
nullptr
;
}
mReleasedPromise
-
>
MaybeReject
(
aValue
)
;
}
}
