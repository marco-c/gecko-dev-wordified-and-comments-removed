#
ifndef
mozilla_dom_LockManager_h
#
define
mozilla_dom_LockManager_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Lock
.
h
"
#
include
"
mozilla
/
dom
/
LockManagerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
LockGrantedCallback
;
struct
LockOptions
;
class
Promise
;
struct
LockRequest
{
nsString
mName
;
LockMode
mMode
;
RefPtr
<
Promise
>
mPromise
;
RefPtr
<
LockGrantedCallback
>
mCallback
;
bool
operator
=
=
(
const
LockRequest
&
aOther
)
const
{
MOZ_ASSERT
(
mPromise
&
&
aOther
.
mPromise
"
Promises
are
null
when
requests
are
still
active
?
?
"
)
;
return
mPromise
=
=
aOther
.
mPromise
;
}
}
;
class
LockManager
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
LockManager
)
explicit
LockManager
(
nsIGlobalObject
*
aGlobal
)
:
mOwner
(
aGlobal
)
{
}
protected
:
~
LockManager
(
)
=
default
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Shutdown
(
)
;
already_AddRefed
<
Promise
>
Request
(
const
nsAString
&
name
LockGrantedCallback
&
callback
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Request
(
const
nsAString
&
name
const
LockOptions
&
options
LockGrantedCallback
&
callback
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Query
(
ErrorResult
&
aRv
)
;
void
ReleaseHeldLock
(
Lock
*
aLock
)
;
private
:
void
ProcessRequestQueue
(
nsTArray
<
mozilla
:
:
dom
:
:
LockRequest
>
&
aQueue
)
;
bool
IsGrantableRequest
(
const
LockRequest
&
aRequest
nsTArray
<
mozilla
:
:
dom
:
:
LockRequest
>
&
aQueue
)
;
bool
HasBlockingHeldLock
(
const
nsString
&
aName
LockMode
aMode
)
;
nsCOMPtr
<
nsIGlobalObject
>
mOwner
;
nsTHashSet
<
RefPtr
<
Lock
>
>
mHeldLockSet
;
nsTHashMap
<
nsStringHashKey
nsTArray
<
LockRequest
>
>
mQueueMap
;
}
;
}
#
endif
