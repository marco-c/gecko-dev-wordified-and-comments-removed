#
ifndef
mozilla_dom_LockManager_h
#
define
mozilla_dom_LockManager_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Lock
.
h
"
#
include
"
mozilla
/
dom
/
LockManagerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
LockGrantedCallback
;
struct
LockOptions
;
namespace
locks
{
class
LockManagerChild
;
}
class
LockManager
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
LockManager
)
explicit
LockManager
(
nsIGlobalObject
*
aGlobal
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Request
(
const
nsAString
&
aName
LockGrantedCallback
&
aCallback
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Request
(
const
nsAString
&
aName
const
LockOptions
&
aOptions
LockGrantedCallback
&
aCallback
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Query
(
ErrorResult
&
aRv
)
;
void
Shutdown
(
)
;
private
:
~
LockManager
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mOwner
;
RefPtr
<
locks
:
:
LockManagerChild
>
mActor
;
}
;
}
#
endif
