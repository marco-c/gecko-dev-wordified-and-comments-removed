#
ifndef
mozilla_dom_PartitionedLocalStorage_h
#
define
mozilla_dom_PartitionedLocalStorage_h
#
include
"
Storage
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
SessionStorageCache
;
class
PartitionedLocalStorage
final
:
public
Storage
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
PartitionedLocalStorage
Storage
)
PartitionedLocalStorage
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aStoragePrincipal
SessionStorageCache
*
aCache
)
;
StorageType
Type
(
)
const
override
{
return
ePartitionedLocalStorage
;
}
int64_t
GetOriginQuotaUsage
(
)
const
override
;
bool
IsForkOf
(
const
Storage
*
aStorage
)
const
override
;
uint32_t
GetLength
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
Key
(
uint32_t
aIndex
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aKeys
)
override
;
void
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
RemoveItem
(
const
nsAString
&
aKey
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
Clear
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
private
:
~
PartitionedLocalStorage
(
)
;
RefPtr
<
SessionStorageCache
>
mCache
;
}
;
}
}
#
endif
