#
ifndef
mozilla_dom_StorageManager_h
#
define
mozilla_dom_StorageManager_h
#
include
"
nsIDOMStorageManager
.
h
"
#
include
"
nsILocalStorageManager
.
h
"
#
include
"
StorageObserver
.
h
"
#
include
"
LocalStorage
.
h
"
#
include
"
LocalStorageCache
.
h
"
#
include
"
mozilla
/
dom
/
Storage
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
namespace
mozilla
{
class
OriginAttributesPattern
;
namespace
dom
{
class
LocalStorageManager
final
:
public
nsIDOMStorageManager
public
nsILocalStorageManager
public
StorageObserverSink
{
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMSTORAGEMANAGER
NS_DECL_NSILOCALSTORAGEMANAGER
public
:
LocalStorageManager
(
)
;
static
uint32_t
GetQuota
(
)
;
LocalStorageCache
*
GetCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
;
already_AddRefed
<
StorageUsage
>
GetOriginUsage
(
const
nsACString
&
aOriginNoSuffix
)
;
static
nsAutoCString
CreateOrigin
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
;
private
:
~
LocalStorageManager
(
)
;
nsresult
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
const
nsACString
&
aOriginScope
)
override
;
class
LocalStorageCacheHashKey
:
public
nsCStringHashKey
{
public
:
explicit
LocalStorageCacheHashKey
(
const
nsACString
*
aKey
)
:
nsCStringHashKey
(
aKey
)
mCache
(
new
LocalStorageCache
(
aKey
)
)
{
}
LocalStorageCacheHashKey
(
LocalStorageCacheHashKey
&
&
aOther
)
:
nsCStringHashKey
(
std
:
:
move
(
aOther
)
)
mCache
(
std
:
:
move
(
aOther
.
mCache
)
)
mCacheRef
(
std
:
:
move
(
aOther
.
mCacheRef
)
)
{
NS_ERROR
(
"
Shouldn
'
t
be
called
"
)
;
}
LocalStorageCache
*
cache
(
)
{
return
mCache
;
}
void
HardRef
(
)
{
mCacheRef
=
mCache
;
}
private
:
LocalStorageCache
*
mCache
;
RefPtr
<
LocalStorageCache
>
mCacheRef
;
}
;
already_AddRefed
<
LocalStorageCache
>
PutCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
nsIPrincipal
*
aPrincipal
)
;
enum
class
CreateMode
{
UseIfExistsNeverCreate
CreateAlways
CreateIfShouldPreload
}
;
nsresult
GetStorageInternal
(
CreateMode
aCreate
mozIDOMWindow
*
aWindow
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aStoragePrincipal
const
nsAString
&
aDocumentURI
bool
aPrivate
Storage
*
*
aRetval
)
;
typedef
nsTHashtable
<
LocalStorageCacheHashKey
>
CacheOriginHashtable
;
nsClassHashtable
<
nsCStringHashKey
CacheOriginHashtable
>
mCaches
;
void
ClearCaches
(
uint32_t
aUnloadFlags
const
OriginAttributesPattern
&
aPattern
const
nsACString
&
aKeyPrefix
)
;
static
LocalStorageManager
*
Self
(
)
;
static
LocalStorageManager
*
Ensure
(
)
;
private
:
nsDataHashtable
<
nsCStringHashKey
RefPtr
<
StorageUsage
>
>
mUsages
;
friend
class
LocalStorageCache
;
friend
class
StorageDBChild
;
virtual
void
DropCache
(
LocalStorageCache
*
aCache
)
;
static
LocalStorageManager
*
sSelf
;
}
;
}
}
#
endif
