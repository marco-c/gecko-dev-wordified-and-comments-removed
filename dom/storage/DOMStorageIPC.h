#
ifndef
nsDOMStorageIPC_h___
#
define
nsDOMStorageIPC_h___
#
include
"
mozilla
/
dom
/
PStorageChild
.
h
"
#
include
"
mozilla
/
dom
/
PStorageParent
.
h
"
#
include
"
DOMStorageDBThread
.
h
"
#
include
"
DOMStorageCache
.
h
"
#
include
"
DOMStorageObserver
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
OriginAttributesPattern
;
namespace
dom
{
class
DOMLocalStorageManager
;
class
DOMStorageDBChild
final
:
public
DOMStorageDBBridge
public
PStorageChild
{
virtual
~
DOMStorageDBChild
(
)
;
public
:
explicit
DOMStorageDBChild
(
DOMLocalStorageManager
*
aManager
)
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
;
void
AddIPDLReference
(
)
;
void
ReleaseIPDLReference
(
)
;
virtual
nsresult
Init
(
)
;
virtual
nsresult
Shutdown
(
)
;
virtual
void
AsyncPreload
(
DOMStorageCacheBridge
*
aCache
bool
aPriority
=
false
)
;
virtual
void
AsyncGetUsage
(
DOMStorageUsageBridge
*
aUsage
)
;
virtual
void
SyncPreload
(
DOMStorageCacheBridge
*
aCache
bool
aForceSync
=
false
)
;
virtual
nsresult
AsyncAddItem
(
DOMStorageCacheBridge
*
aCache
const
nsAString
&
aKey
const
nsAString
&
aValue
)
;
virtual
nsresult
AsyncUpdateItem
(
DOMStorageCacheBridge
*
aCache
const
nsAString
&
aKey
const
nsAString
&
aValue
)
;
virtual
nsresult
AsyncRemoveItem
(
DOMStorageCacheBridge
*
aCache
const
nsAString
&
aKey
)
;
virtual
nsresult
AsyncClear
(
DOMStorageCacheBridge
*
aCache
)
;
virtual
void
AsyncClearAll
(
)
{
if
(
mOriginsHavingData
)
{
mOriginsHavingData
-
>
Clear
(
)
;
}
}
virtual
void
AsyncClearMatchingOrigin
(
const
nsACString
&
aOriginNoSuffix
)
{
}
virtual
void
AsyncClearMatchingOriginAttributes
(
const
OriginAttributesPattern
&
aPattern
)
{
}
virtual
void
AsyncFlush
(
)
{
SendAsyncFlush
(
)
;
}
virtual
bool
ShouldPreloadOrigin
(
const
nsACString
&
aOriginNoSuffix
)
;
virtual
void
GetOriginsHavingData
(
InfallibleTArray
<
nsCString
>
*
aOrigins
)
{
NS_NOTREACHED
(
"
Not
implemented
for
child
process
"
)
;
}
private
:
bool
RecvObserve
(
const
nsCString
&
aTopic
const
nsString
&
aOriginAttributesPattern
const
nsCString
&
aOriginScope
)
;
bool
RecvLoadItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
;
bool
RecvLoadDone
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsresult
&
aRv
)
;
bool
RecvOriginsHavingData
(
nsTArray
<
nsCString
>
&
&
aOrigins
)
;
bool
RecvLoadUsage
(
const
nsCString
&
aOriginNoSuffix
const
int64_t
&
aUsage
)
;
bool
RecvError
(
const
nsresult
&
aRv
)
;
nsTHashtable
<
nsCStringHashKey
>
&
OriginsHavingData
(
)
;
ThreadSafeAutoRefCnt
mRefCnt
;
NS_DECL_OWNINGTHREAD
RefPtr
<
DOMLocalStorageManager
>
mManager
;
nsAutoPtr
<
nsTHashtable
<
nsCStringHashKey
>
>
mOriginsHavingData
;
nsTHashtable
<
nsRefPtrHashKey
<
DOMStorageCacheBridge
>
>
mLoadingCaches
;
nsresult
mStatus
;
bool
mIPCOpen
;
}
;
class
DOMStorageDBParent
final
:
public
PStorageParent
public
DOMStorageObserverSink
{
virtual
~
DOMStorageDBParent
(
)
;
public
:
DOMStorageDBParent
(
)
;
virtual
mozilla
:
:
ipc
:
:
IProtocol
*
CloneProtocol
(
Channel
*
aChannel
mozilla
:
:
ipc
:
:
ProtocolCloneContext
*
aCtx
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
;
void
AddIPDLReference
(
)
;
void
ReleaseIPDLReference
(
)
;
bool
IPCOpen
(
)
{
return
mIPCOpen
;
}
public
:
class
CacheParentBridge
:
public
DOMStorageCacheBridge
{
public
:
CacheParentBridge
(
DOMStorageDBParent
*
aParentDB
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
:
mParent
(
aParentDB
)
mOriginSuffix
(
aOriginSuffix
)
mOriginNoSuffix
(
aOriginNoSuffix
)
mLoaded
(
false
)
mLoadedCount
(
0
)
{
}
virtual
~
CacheParentBridge
(
)
{
}
virtual
const
nsCString
Origin
(
)
const
;
virtual
const
nsCString
&
OriginNoSuffix
(
)
const
{
return
mOriginNoSuffix
;
}
virtual
const
nsCString
&
OriginSuffix
(
)
const
{
return
mOriginSuffix
;
}
virtual
bool
Loaded
(
)
{
return
mLoaded
;
}
virtual
uint32_t
LoadedCount
(
)
{
return
mLoadedCount
;
}
virtual
bool
LoadItem
(
const
nsAString
&
aKey
const
nsString
&
aValue
)
;
virtual
void
LoadDone
(
nsresult
aRv
)
;
virtual
void
LoadWait
(
)
;
private
:
RefPtr
<
DOMStorageDBParent
>
mParent
;
nsCString
mOriginSuffix
mOriginNoSuffix
;
bool
mLoaded
;
uint32_t
mLoadedCount
;
}
;
class
UsageParentBridge
:
public
DOMStorageUsageBridge
{
public
:
UsageParentBridge
(
DOMStorageDBParent
*
aParentDB
const
nsACString
&
aOriginScope
)
:
mParent
(
aParentDB
)
mOriginScope
(
aOriginScope
)
{
}
virtual
~
UsageParentBridge
(
)
{
}
virtual
const
nsCString
&
OriginScope
(
)
{
return
mOriginScope
;
}
virtual
void
LoadUsage
(
const
int64_t
usage
)
;
private
:
RefPtr
<
DOMStorageDBParent
>
mParent
;
nsCString
mOriginScope
;
}
;
private
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
bool
RecvAsyncPreload
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
bool
&
aPriority
)
override
;
bool
RecvPreload
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
uint32_t
&
aAlreadyLoadedCount
InfallibleTArray
<
nsString
>
*
aKeys
InfallibleTArray
<
nsString
>
*
aValues
nsresult
*
aRv
)
override
;
bool
RecvAsyncGetUsage
(
const
nsCString
&
aOriginNoSuffix
)
override
;
bool
RecvAsyncAddItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
override
;
bool
RecvAsyncUpdateItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
override
;
bool
RecvAsyncRemoveItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
)
override
;
bool
RecvAsyncClear
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
)
override
;
bool
RecvAsyncFlush
(
)
override
;
virtual
nsresult
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttrPattern
const
nsACString
&
aOriginScope
)
override
;
private
:
CacheParentBridge
*
NewCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
;
ThreadSafeAutoRefCnt
mRefCnt
;
NS_DECL_OWNINGTHREAD
bool
mIPCOpen
;
}
;
}
}
#
endif
