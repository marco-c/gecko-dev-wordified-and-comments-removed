#
ifndef
mozilla_dom_Storage_h
#
define
mozilla_dom_Storage_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsString
.
h
"
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
Storage
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
Storage
)
Storage
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aStoragePrincipal
)
;
static
bool
StoragePrefIsEnabled
(
)
;
enum
StorageType
{
eSessionStorage
eLocalStorage
ePartitionedLocalStorage
}
;
virtual
StorageType
Type
(
)
const
=
0
;
virtual
bool
IsForkOf
(
const
Storage
*
aStorage
)
const
=
0
;
virtual
int64_t
GetOriginQuotaUsage
(
)
const
=
0
;
nsIPrincipal
*
Principal
(
)
const
{
return
mPrincipal
;
}
nsIPrincipal
*
StoragePrincipal
(
)
const
{
return
mStoragePrincipal
;
}
bool
IsPrivateBrowsing
(
)
const
{
return
mPrivateBrowsing
;
}
bool
IsSessionScopedOrLess
(
)
const
{
return
mSessionScopedOrLess
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
virtual
uint32_t
GetLength
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
virtual
void
Key
(
uint32_t
aIndex
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aKeys
)
=
0
;
void
NamedGetter
(
const
nsAString
&
aKey
bool
&
aFound
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
GetItem
(
aKey
aResult
aSubjectPrincipal
aRv
)
;
aFound
=
!
aResult
.
IsVoid
(
)
;
}
virtual
void
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
void
NamedSetter
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
SetItem
(
aKey
aValue
aSubjectPrincipal
aRv
)
;
}
virtual
void
RemoveItem
(
const
nsAString
&
aKey
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
void
NamedDeleter
(
const
nsAString
&
aKey
bool
&
aFound
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
RemoveItem
(
aKey
aSubjectPrincipal
aRv
)
;
aFound
=
!
aRv
.
ErrorCodeIs
(
NS_SUCCESS_DOM_NO_OPERATION
)
;
}
virtual
void
Clear
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
=
0
;
bool
IsSessionOnly
(
)
const
{
return
IsSessionScopedOrLess
(
)
;
}
virtual
void
Open
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
}
virtual
void
Close
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
}
virtual
void
BeginExplicitSnapshot
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
}
virtual
void
EndExplicitSnapshot
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
}
virtual
bool
GetHasActiveSnapshot
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
return
false
;
}
static
void
NotifyChange
(
Storage
*
aStorage
nsIPrincipal
*
aPrincipal
const
nsAString
&
aKey
const
nsAString
&
aOldValue
const
nsAString
&
aNewValue
const
char16_t
*
aStorageType
const
nsAString
&
aDocumentURI
bool
aIsPrivate
bool
aImmediateDispatch
)
;
protected
:
virtual
~
Storage
(
)
;
bool
CanUseStorage
(
nsIPrincipal
&
aSubjectPrincipal
)
;
virtual
void
LastRelease
(
)
{
}
private
:
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mStoragePrincipal
;
bool
mPrivateBrowsing
:
1
;
bool
mSessionScopedOrLess
:
1
;
}
;
}
}
#
endif
