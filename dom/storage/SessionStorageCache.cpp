#
include
"
SessionStorageCache
.
h
"
namespace
mozilla
{
namespace
dom
{
SessionStorageCache
:
:
SessionStorageCache
(
)
:
mOriginQuotaUsage
(
0
)
{
}
void
SessionStorageCache
:
:
Key
(
uint32_t
aIndex
nsAString
&
aResult
)
{
aResult
.
SetIsVoid
(
true
)
;
for
(
auto
iter
=
mKeys
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
aIndex
=
=
0
)
{
aResult
=
iter
.
Key
(
)
;
return
;
}
aIndex
-
-
;
}
}
void
SessionStorageCache
:
:
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
)
{
nsString
value
;
if
(
!
mKeys
.
Get
(
aKey
&
value
)
)
{
SetDOMStringToNull
(
value
)
;
}
aResult
=
value
;
}
void
SessionStorageCache
:
:
GetKeys
(
nsTArray
<
nsString
>
&
aKeys
)
{
for
(
auto
iter
=
mKeys
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aKeys
.
AppendElement
(
iter
.
Key
(
)
)
;
}
}
nsresult
SessionStorageCache
:
:
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsString
&
aOldValue
)
{
int64_t
delta
=
0
;
if
(
!
mKeys
.
Get
(
aKey
&
aOldValue
)
)
{
SetDOMStringToNull
(
aOldValue
)
;
delta
=
static_cast
<
int64_t
>
(
aKey
.
Length
(
)
)
;
}
delta
+
=
static_cast
<
int64_t
>
(
aValue
.
Length
(
)
)
-
static_cast
<
int64_t
>
(
aOldValue
.
Length
(
)
)
;
if
(
aValue
=
=
aOldValue
&
&
DOMStringIsNull
(
aValue
)
=
=
DOMStringIsNull
(
aOldValue
)
)
{
return
NS_SUCCESS_DOM_NO_OPERATION
;
}
if
(
!
ProcessUsageDelta
(
delta
)
)
{
return
NS_ERROR_DOM_QUOTA_REACHED
;
}
mKeys
.
Put
(
aKey
nsString
(
aValue
)
)
;
return
NS_OK
;
}
nsresult
SessionStorageCache
:
:
RemoveItem
(
const
nsAString
&
aKey
nsString
&
aOldValue
)
{
if
(
!
mKeys
.
Get
(
aKey
&
aOldValue
)
)
{
return
NS_SUCCESS_DOM_NO_OPERATION
;
}
ProcessUsageDelta
(
-
(
static_cast
<
int64_t
>
(
aOldValue
.
Length
(
)
)
+
static_cast
<
int64_t
>
(
aKey
.
Length
(
)
)
)
)
;
mKeys
.
Remove
(
aKey
)
;
return
NS_OK
;
}
void
SessionStorageCache
:
:
Clear
(
)
{
ProcessUsageDelta
(
-
mOriginQuotaUsage
)
;
mKeys
.
Clear
(
)
;
}
bool
SessionStorageCache
:
:
ProcessUsageDelta
(
int64_t
aDelta
)
{
uint64_t
newOriginUsage
=
mOriginQuotaUsage
+
aDelta
;
if
(
aDelta
>
0
&
&
newOriginUsage
>
LocalStorageManager
:
:
GetQuota
(
)
)
{
return
false
;
}
mOriginQuotaUsage
=
newOriginUsage
;
return
true
;
}
already_AddRefed
<
SessionStorageCache
>
SessionStorageCache
:
:
Clone
(
)
const
{
RefPtr
<
SessionStorageCache
>
cache
=
new
SessionStorageCache
(
)
;
cache
-
>
mOriginQuotaUsage
=
mOriginQuotaUsage
;
for
(
auto
iter
=
mKeys
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
cache
-
>
mKeys
.
Put
(
iter
.
Key
(
)
iter
.
Data
(
)
)
;
}
return
cache
.
forget
(
)
;
}
}
}
