#
ifndef
mozilla_dom_StorageObserver_h
#
define
mozilla_dom_StorageObserver_h
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
dom
{
class
StorageObserver
;
class
StorageObserverSink
{
public
:
virtual
~
StorageObserverSink
(
)
{
}
private
:
friend
class
StorageObserver
;
virtual
nsresult
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
const
nsACString
&
aOriginScope
)
=
0
;
}
;
class
StorageObserver
:
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
nsresult
Init
(
)
;
static
nsresult
Shutdown
(
)
;
static
StorageObserver
*
Self
(
)
{
return
sSelf
;
}
void
AddSink
(
StorageObserverSink
*
aObs
)
;
void
RemoveSink
(
StorageObserverSink
*
aObs
)
;
void
Notify
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
=
EmptyString
(
)
const
nsACString
&
aOriginScope
=
EmptyCString
(
)
)
;
void
NoteBackgroundThread
(
nsIEventTarget
*
aBackgroundThread
)
;
private
:
virtual
~
StorageObserver
(
)
{
}
static
void
TestingPrefChanged
(
const
char
*
aPrefName
void
*
aClosure
)
;
static
StorageObserver
*
sSelf
;
nsCOMPtr
<
nsIEventTarget
>
mBackgroundThread
;
nsTArray
<
StorageObserverSink
*
>
mSinks
;
nsCOMPtr
<
nsITimer
>
mDBThreadStartDelayTimer
;
}
;
}
}
#
endif
