#
ifndef
mozilla_dom_LocalStorage_h
#
define
mozilla_dom_LocalStorage_h
#
include
"
Storage
.
h
"
#
include
"
nsWeakReference
.
h
"
namespace
mozilla
{
namespace
dom
{
class
LocalStorageManager
;
class
StorageCache
;
class
StorageEvent
;
class
LocalStorage
final
:
public
Storage
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
LocalStorage
Storage
)
StorageType
Type
(
)
const
override
{
return
eLocalStorage
;
}
LocalStorageManager
*
GetManager
(
)
const
{
return
mManager
;
}
StorageCache
const
*
GetCache
(
)
const
{
return
mCache
;
}
bool
PrincipalEquals
(
nsIPrincipal
*
aPrincipal
)
;
LocalStorage
(
nsPIDOMWindowInner
*
aWindow
LocalStorageManager
*
aManager
StorageCache
*
aCache
const
nsAString
&
aDocumentURI
nsIPrincipal
*
aPrincipal
bool
aIsPrivate
)
;
bool
IsForkOf
(
const
Storage
*
aOther
)
const
override
;
int64_t
GetOriginQuotaUsage
(
)
const
override
;
uint32_t
GetLength
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
Key
(
uint32_t
aIndex
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aKeys
)
override
;
void
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
RemoveItem
(
const
nsAString
&
aKey
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
void
Clear
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
override
;
bool
IsPrivate
(
)
const
{
return
mIsPrivate
;
}
bool
IsSessionOnly
(
)
const
override
{
return
mIsSessionOnly
;
}
static
void
DispatchStorageEvent
(
const
nsAString
&
aDocumentURI
const
nsAString
&
aKey
const
nsAString
&
aOldValue
const
nsAString
&
aNewValue
nsIPrincipal
*
aPrincipal
bool
aIsPrivate
Storage
*
aStorage
bool
aImmediateDispatch
)
;
void
ApplyEvent
(
StorageEvent
*
aStorageEvent
)
;
protected
:
bool
CanUseStorage
(
nsIPrincipal
&
aSubjectPrincipal
)
;
private
:
~
LocalStorage
(
)
;
friend
class
LocalStorageManager
;
friend
class
StorageCache
;
RefPtr
<
LocalStorageManager
>
mManager
;
RefPtr
<
StorageCache
>
mCache
;
nsString
mDocumentURI
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
bool
mIsPrivate
:
1
;
bool
mIsSessionOnly
:
1
;
void
BroadcastChangeNotification
(
const
nsSubstring
&
aKey
const
nsSubstring
&
aOldValue
const
nsSubstring
&
aNewValue
)
;
}
;
}
}
#
endif
