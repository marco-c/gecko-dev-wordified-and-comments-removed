#
include
"
nsIURL
.
h
"
#
include
"
StorageUtils
.
h
"
#
include
"
mozilla
/
OriginAttributes
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
StorageUtils
{
nsresult
GenerateOriginKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aOriginAttrSuffix
nsACString
&
aOriginKey
)
{
if
(
NS_WARN_IF
(
!
aPrincipal
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
aPrincipal
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
aOriginAttrSuffix
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aPrincipal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
uri
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsAutoCString
domainOrigin
;
rv
=
uri
-
>
GetAsciiHost
(
domainOrigin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domainOrigin
.
IsEmpty
(
)
)
{
if
(
uri
-
>
SchemeIs
(
"
file
"
)
)
{
nsCOMPtr
<
nsIURL
>
url
=
do_QueryInterface
(
uri
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
url
-
>
GetDirectory
(
domainOrigin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
nsAutoCString
reverseDomain
;
rv
=
CreateReversedDomain
(
domainOrigin
reverseDomain
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
aOriginKey
.
Append
(
reverseDomain
)
;
nsAutoCString
scheme
;
rv
=
uri
-
>
GetScheme
(
scheme
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aOriginKey
.
Append
(
'
:
'
)
;
aOriginKey
.
Append
(
scheme
)
;
int32_t
port
=
NS_GetRealPort
(
uri
)
;
if
(
port
!
=
-
1
)
{
aOriginKey
.
Append
(
nsPrintfCString
(
"
:
%
d
"
port
)
)
;
}
return
NS_OK
;
}
bool
PrincipalsEqual
(
nsIPrincipal
*
aObjectPrincipal
nsIPrincipal
*
aSubjectPrincipal
)
{
if
(
!
aSubjectPrincipal
)
{
return
true
;
}
if
(
!
aObjectPrincipal
)
{
return
false
;
}
return
aSubjectPrincipal
-
>
Equals
(
aObjectPrincipal
)
;
}
void
ReverseString
(
const
nsACString
&
aSource
nsACString
&
aResult
)
{
nsACString
:
:
const_iterator
sourceBegin
sourceEnd
;
aSource
.
BeginReading
(
sourceBegin
)
;
aSource
.
EndReading
(
sourceEnd
)
;
aResult
.
SetLength
(
aSource
.
Length
(
)
)
;
auto
destEnd
=
aResult
.
EndWriting
(
)
;
while
(
sourceBegin
!
=
sourceEnd
)
{
*
(
-
-
destEnd
)
=
*
sourceBegin
;
+
+
sourceBegin
;
}
}
nsresult
CreateReversedDomain
(
const
nsACString
&
aAsciiDomain
nsACString
&
aKey
)
{
if
(
aAsciiDomain
.
IsEmpty
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
ReverseString
(
aAsciiDomain
aKey
)
;
aKey
.
Append
(
'
.
'
)
;
return
NS_OK
;
}
nsCString
Scheme0Scope
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
{
nsCString
result
;
OriginAttributes
oa
;
if
(
!
aOriginSuffix
.
IsEmpty
(
)
)
{
DebugOnly
<
bool
>
success
=
oa
.
PopulateFromSuffix
(
aOriginSuffix
)
;
MOZ_ASSERT
(
success
)
;
}
if
(
oa
.
mInIsolatedMozBrowser
)
{
result
.
AppendInt
(
0
)
;
result
.
Append
(
'
:
'
)
;
result
.
Append
(
oa
.
mInIsolatedMozBrowser
?
'
t
'
:
'
f
'
)
;
result
.
Append
(
'
:
'
)
;
}
nsAutoCString
remaining
;
oa
.
mInIsolatedMozBrowser
=
false
;
oa
.
CreateSuffix
(
remaining
)
;
if
(
!
remaining
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
!
aOriginSuffix
.
IsEmpty
(
)
)
;
if
(
result
.
IsEmpty
(
)
)
{
result
.
AppendLiteral
(
"
0
:
f
:
"
)
;
}
result
.
Append
(
aOriginSuffix
)
;
result
.
Append
(
'
:
'
)
;
}
result
.
Append
(
aOriginNoSuffix
)
;
return
result
;
}
}
}
}
