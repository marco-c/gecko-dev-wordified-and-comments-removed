#
include
"
StorageUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
StorageUtils
{
nsresult
GenerateOriginKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aOriginAttrSuffix
nsACString
&
aOriginKey
)
{
MOZ_ASSERT
(
aPrincipal
)
;
aPrincipal
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
aOriginAttrSuffix
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aPrincipal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
uri
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsAutoCString
domainOrigin
;
rv
=
uri
-
>
GetAsciiHost
(
domainOrigin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
domainOrigin
.
IsEmpty
(
)
)
{
bool
isScheme
=
false
;
if
(
NS_SUCCEEDED
(
uri
-
>
SchemeIs
(
"
file
"
&
isScheme
)
)
&
&
isScheme
)
{
nsCOMPtr
<
nsIURL
>
url
=
do_QueryInterface
(
uri
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
url
-
>
GetDirectory
(
domainOrigin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
nsAutoCString
reverseDomain
;
rv
=
CreateReversedDomain
(
domainOrigin
reverseDomain
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
aOriginKey
.
Append
(
reverseDomain
)
;
nsAutoCString
scheme
;
rv
=
uri
-
>
GetScheme
(
scheme
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aOriginKey
.
Append
(
'
:
'
)
;
aOriginKey
.
Append
(
scheme
)
;
int32_t
port
=
NS_GetRealPort
(
uri
)
;
if
(
port
!
=
-
1
)
{
aOriginKey
.
Append
(
nsPrintfCString
(
"
:
%
d
"
port
)
)
;
}
return
NS_OK
;
}
}
}
}
