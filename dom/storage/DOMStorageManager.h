#
ifndef
nsDOMStorageManager_h__
#
define
nsDOMStorageManager_h__
#
include
"
nsIDOMStorageManager
.
h
"
#
include
"
DOMStorageObserver
.
h
"
#
include
"
DOMStorageCache
.
h
"
#
include
"
mozilla
/
dom
/
DOMStorage
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
namespace
mozilla
{
class
OriginAttributesPattern
;
namespace
dom
{
const
DOMStorage
:
:
StorageType
SessionStorage
=
DOMStorage
:
:
SessionStorage
;
const
DOMStorage
:
:
StorageType
LocalStorage
=
DOMStorage
:
:
LocalStorage
;
class
DOMStorageManager
:
public
nsIDOMStorageManager
public
DOMStorageObserverSink
{
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMSTORAGEMANAGER
public
:
virtual
DOMStorage
:
:
StorageType
Type
(
)
{
return
mType
;
}
static
uint32_t
GetQuota
(
)
;
DOMStorageCache
*
GetCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
;
already_AddRefed
<
DOMStorageUsage
>
GetOriginUsage
(
const
nsACString
&
aOriginNoSuffix
)
;
static
nsCString
CreateOrigin
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
;
protected
:
explicit
DOMStorageManager
(
DOMStorage
:
:
StorageType
aType
)
;
virtual
~
DOMStorageManager
(
)
;
private
:
virtual
nsresult
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
const
nsACString
&
aOriginScope
)
override
;
class
DOMStorageCacheHashKey
:
public
nsCStringHashKey
{
public
:
explicit
DOMStorageCacheHashKey
(
const
nsACString
*
aKey
)
:
nsCStringHashKey
(
aKey
)
mCache
(
new
DOMStorageCache
(
aKey
)
)
{
}
DOMStorageCacheHashKey
(
const
DOMStorageCacheHashKey
&
aOther
)
:
nsCStringHashKey
(
aOther
)
{
NS_ERROR
(
"
Shouldn
'
t
be
called
"
)
;
}
DOMStorageCache
*
cache
(
)
{
return
mCache
;
}
void
HardRef
(
)
{
mCacheRef
=
mCache
;
}
private
:
DOMStorageCache
*
mCache
;
RefPtr
<
DOMStorageCache
>
mCacheRef
;
}
;
already_AddRefed
<
DOMStorageCache
>
PutCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
nsIPrincipal
*
aPrincipal
)
;
nsresult
GetStorageInternal
(
bool
aCreate
mozIDOMWindow
*
aWindow
nsIPrincipal
*
aPrincipal
const
nsAString
&
aDocumentURI
bool
aPrivate
nsIDOMStorage
*
*
aRetval
)
;
typedef
nsTHashtable
<
DOMStorageCacheHashKey
>
CacheOriginHashtable
;
nsClassHashtable
<
nsCStringHashKey
CacheOriginHashtable
>
mCaches
;
const
DOMStorage
:
:
StorageType
mType
;
bool
mLowDiskSpace
;
bool
IsLowDiskSpace
(
)
const
{
return
mLowDiskSpace
;
}
;
void
ClearCaches
(
uint32_t
aUnloadFlags
const
OriginAttributesPattern
&
aPattern
const
nsACString
&
aKeyPrefix
)
;
protected
:
nsDataHashtable
<
nsCStringHashKey
RefPtr
<
DOMStorageUsage
>
>
mUsages
;
friend
class
DOMStorageCache
;
virtual
void
DropCache
(
DOMStorageCache
*
aCache
)
;
}
;
class
DOMLocalStorageManager
final
:
public
DOMStorageManager
{
public
:
DOMLocalStorageManager
(
)
;
virtual
~
DOMLocalStorageManager
(
)
;
static
DOMLocalStorageManager
*
Self
(
)
{
return
sSelf
;
}
static
DOMLocalStorageManager
*
Ensure
(
)
;
private
:
static
DOMLocalStorageManager
*
sSelf
;
}
;
class
DOMSessionStorageManager
final
:
public
DOMStorageManager
{
public
:
DOMSessionStorageManager
(
)
;
}
;
}
}
#
endif
