#
include
"
StorageIPC
.
h
"
#
include
"
LocalStorageManager
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIDiskSpaceWatcher
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
StorageDBChild
*
sStorageChild
=
nullptr
;
bool
sStorageChildDown
=
false
;
}
class
StorageDBChild
:
:
ShutdownObserver
final
:
public
nsIObserver
{
public
:
ShutdownObserver
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
private
:
~
ShutdownObserver
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
}
;
NS_IMPL_ADDREF
(
StorageDBChild
)
NS_IMETHODIMP_
(
MozExternalRefCountType
)
StorageDBChild
:
:
Release
(
void
)
{
NS_PRECONDITION
(
0
!
=
mRefCnt
"
dup
release
"
)
;
nsrefcnt
count
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
count
"
StorageDBChild
"
)
;
if
(
count
=
=
1
&
&
mIPCOpen
)
{
Send__delete__
(
this
)
;
return
0
;
}
if
(
count
=
=
0
)
{
mRefCnt
=
1
;
delete
this
;
return
0
;
}
return
count
;
}
void
StorageDBChild
:
:
AddIPDLReference
(
)
{
MOZ_ASSERT
(
!
mIPCOpen
"
Attempting
to
retain
multiple
IPDL
references
"
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
StorageDBChild
:
:
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
"
Attempting
to
release
non
-
existent
IPDL
reference
"
)
;
mIPCOpen
=
false
;
Release
(
)
;
}
StorageDBChild
:
:
StorageDBChild
(
LocalStorageManager
*
aManager
)
:
mManager
(
aManager
)
mStatus
(
NS_OK
)
mIPCOpen
(
false
)
{
}
StorageDBChild
:
:
~
StorageDBChild
(
)
{
}
StorageDBChild
*
StorageDBChild
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
sStorageChild
;
}
StorageDBChild
*
StorageDBChild
:
:
GetOrCreate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sStorageChild
|
|
sStorageChildDown
)
{
return
sStorageChild
;
}
RefPtr
<
StorageDBChild
>
storageChild
=
new
StorageDBChild
(
LocalStorageManager
:
:
Ensure
(
)
)
;
nsresult
rv
=
storageChild
-
>
Init
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
storageChild
.
forget
(
&
sStorageChild
)
;
return
sStorageChild
;
}
nsTHashtable
<
nsCStringHashKey
>
&
StorageDBChild
:
:
OriginsHavingData
(
)
{
if
(
!
mOriginsHavingData
)
{
mOriginsHavingData
=
new
nsTHashtable
<
nsCStringHashKey
>
;
}
return
*
mOriginsHavingData
;
}
nsresult
StorageDBChild
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
PBackgroundChild
*
actor
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actor
)
)
{
return
NS_ERROR_FAILURE
;
}
AddIPDLReference
(
)
;
actor
-
>
SendPBackgroundStorageConstructor
(
this
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
observerService
)
;
nsCOMPtr
<
nsIObserver
>
observer
=
new
ShutdownObserver
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
observerService
-
>
AddObserver
(
observer
"
xpcom
-
shutdown
"
false
)
)
;
return
NS_OK
;
}
nsresult
StorageDBChild
:
:
Shutdown
(
)
{
return
NS_OK
;
}
void
StorageDBChild
:
:
AsyncPreload
(
LocalStorageCacheBridge
*
aCache
bool
aPriority
)
{
if
(
mIPCOpen
)
{
mLoadingCaches
.
PutEntry
(
aCache
)
;
SendAsyncPreload
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
aPriority
)
;
}
else
{
aCache
-
>
LoadDone
(
NS_ERROR_UNEXPECTED
)
;
}
}
void
StorageDBChild
:
:
AsyncGetUsage
(
StorageUsageBridge
*
aUsage
)
{
if
(
mIPCOpen
)
{
SendAsyncGetUsage
(
aUsage
-
>
OriginScope
(
)
)
;
}
}
void
StorageDBChild
:
:
SyncPreload
(
LocalStorageCacheBridge
*
aCache
bool
aForceSync
)
{
if
(
NS_FAILED
(
mStatus
)
)
{
aCache
-
>
LoadDone
(
mStatus
)
;
return
;
}
if
(
!
mIPCOpen
)
{
aCache
-
>
LoadDone
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
InfallibleTArray
<
nsString
>
keys
values
;
nsresult
rv
;
SendPreload
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
aCache
-
>
LoadedCount
(
)
&
keys
&
values
&
rv
)
;
for
(
uint32_t
i
=
0
;
i
<
keys
.
Length
(
)
;
+
+
i
)
{
aCache
-
>
LoadItem
(
keys
[
i
]
values
[
i
]
)
;
}
aCache
-
>
LoadDone
(
rv
)
;
}
nsresult
StorageDBChild
:
:
AsyncAddItem
(
LocalStorageCacheBridge
*
aCache
const
nsAString
&
aKey
const
nsAString
&
aValue
)
{
if
(
NS_FAILED
(
mStatus
)
|
|
!
mIPCOpen
)
{
return
mStatus
;
}
SendAsyncAddItem
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
nsString
(
aKey
)
nsString
(
aValue
)
)
;
OriginsHavingData
(
)
.
PutEntry
(
aCache
-
>
Origin
(
)
)
;
return
NS_OK
;
}
nsresult
StorageDBChild
:
:
AsyncUpdateItem
(
LocalStorageCacheBridge
*
aCache
const
nsAString
&
aKey
const
nsAString
&
aValue
)
{
if
(
NS_FAILED
(
mStatus
)
|
|
!
mIPCOpen
)
{
return
mStatus
;
}
SendAsyncUpdateItem
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
nsString
(
aKey
)
nsString
(
aValue
)
)
;
OriginsHavingData
(
)
.
PutEntry
(
aCache
-
>
Origin
(
)
)
;
return
NS_OK
;
}
nsresult
StorageDBChild
:
:
AsyncRemoveItem
(
LocalStorageCacheBridge
*
aCache
const
nsAString
&
aKey
)
{
if
(
NS_FAILED
(
mStatus
)
|
|
!
mIPCOpen
)
{
return
mStatus
;
}
SendAsyncRemoveItem
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
nsString
(
aKey
)
)
;
return
NS_OK
;
}
nsresult
StorageDBChild
:
:
AsyncClear
(
LocalStorageCacheBridge
*
aCache
)
{
if
(
NS_FAILED
(
mStatus
)
|
|
!
mIPCOpen
)
{
return
mStatus
;
}
SendAsyncClear
(
aCache
-
>
OriginSuffix
(
)
aCache
-
>
OriginNoSuffix
(
)
)
;
OriginsHavingData
(
)
.
RemoveEntry
(
aCache
-
>
Origin
(
)
)
;
return
NS_OK
;
}
bool
StorageDBChild
:
:
ShouldPreloadOrigin
(
const
nsACString
&
aOrigin
)
{
return
!
mOriginsHavingData
|
|
mOriginsHavingData
-
>
Contains
(
aOrigin
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvObserve
(
const
nsCString
&
aTopic
const
nsString
&
aOriginAttributesPattern
const
nsCString
&
aOriginScope
)
{
StorageObserver
:
:
Self
(
)
-
>
Notify
(
aTopic
.
get
(
)
aOriginAttributesPattern
aOriginScope
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvOriginsHavingData
(
nsTArray
<
nsCString
>
&
&
aOrigins
)
{
if
(
!
aOrigins
.
Length
(
)
)
{
Unused
<
<
OriginsHavingData
(
)
;
}
for
(
uint32_t
i
=
0
;
i
<
aOrigins
.
Length
(
)
;
+
+
i
)
{
OriginsHavingData
(
)
.
PutEntry
(
aOrigins
[
i
]
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvLoadItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
{
LocalStorageCache
*
aCache
=
mManager
-
>
GetCache
(
aOriginSuffix
aOriginNoSuffix
)
;
if
(
aCache
)
{
aCache
-
>
LoadItem
(
aKey
aValue
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvLoadDone
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsresult
&
aRv
)
{
LocalStorageCache
*
aCache
=
mManager
-
>
GetCache
(
aOriginSuffix
aOriginNoSuffix
)
;
if
(
aCache
)
{
aCache
-
>
LoadDone
(
aRv
)
;
mLoadingCaches
.
RemoveEntry
(
static_cast
<
LocalStorageCacheBridge
*
>
(
aCache
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvLoadUsage
(
const
nsCString
&
aOriginNoSuffix
const
int64_t
&
aUsage
)
{
RefPtr
<
StorageUsageBridge
>
scopeUsage
=
mManager
-
>
GetOriginUsage
(
aOriginNoSuffix
)
;
scopeUsage
-
>
LoadUsage
(
aUsage
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBChild
:
:
RecvError
(
const
nsresult
&
aRv
)
{
mStatus
=
aRv
;
return
IPC_OK
(
)
;
}
NS_IMPL_ISUPPORTS
(
StorageDBChild
:
:
ShutdownObserver
nsIObserver
)
NS_IMETHODIMP
StorageDBChild
:
:
ShutdownObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
strcmp
(
aTopic
"
xpcom
-
shutdown
"
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
observerService
)
)
{
return
NS_ERROR_FAILURE
;
}
Unused
<
<
observerService
-
>
RemoveObserver
(
this
"
xpcom
-
shutdown
"
)
;
if
(
sStorageChild
)
{
sStorageChildDown
=
true
;
NS_RELEASE
(
sStorageChild
)
;
sStorageChild
=
nullptr
;
}
return
NS_OK
;
}
NS_IMPL_ADDREF
(
StorageDBParent
)
NS_IMPL_RELEASE
(
StorageDBParent
)
void
StorageDBParent
:
:
AddIPDLReference
(
)
{
MOZ_ASSERT
(
!
mIPCOpen
"
Attempting
to
retain
multiple
IPDL
references
"
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
StorageDBParent
:
:
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
"
Attempting
to
release
non
-
existent
IPDL
reference
"
)
;
mIPCOpen
=
false
;
Release
(
)
;
}
namespace
{
class
SendInitialChildDataRunnable
:
public
Runnable
{
public
:
explicit
SendInitialChildDataRunnable
(
StorageDBParent
*
aParent
)
:
Runnable
(
"
dom
:
:
SendInitialChildDataRunnable
"
)
mParent
(
aParent
)
{
}
private
:
NS_IMETHOD
Run
(
)
override
{
if
(
!
mParent
-
>
IPCOpen
(
)
)
{
return
NS_OK
;
}
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
Get
(
)
;
if
(
storageThread
)
{
InfallibleTArray
<
nsCString
>
scopes
;
storageThread
-
>
GetOriginsHavingData
(
&
scopes
)
;
mozilla
:
:
Unused
<
<
mParent
-
>
SendOriginsHavingData
(
scopes
)
;
}
#
if
0
nsCOMPtr
<
nsIDiskSpaceWatcher
>
diskSpaceWatcher
=
do_GetService
(
"
mozilla
.
org
/
toolkit
/
disk
-
space
-
watcher
;
1
"
)
;
if
(
!
diskSpaceWatcher
)
{
return
NS_OK
;
}
bool
lowDiskSpace
=
false
;
diskSpaceWatcher
-
>
GetIsDiskFull
(
&
lowDiskSpace
)
;
if
(
lowDiskSpace
)
{
mozilla
:
:
Unused
<
<
mParent
-
>
SendObserve
(
nsDependentCString
(
"
low
-
disk
-
space
"
)
EmptyString
(
)
EmptyCString
(
)
)
;
}
#
endif
return
NS_OK
;
}
RefPtr
<
StorageDBParent
>
mParent
;
}
;
}
StorageDBParent
:
:
StorageDBParent
(
)
:
mIPCOpen
(
false
)
{
StorageObserver
*
observer
=
StorageObserver
:
:
Self
(
)
;
if
(
observer
)
{
observer
-
>
AddSink
(
this
)
;
}
AddIPDLReference
(
)
;
RefPtr
<
SendInitialChildDataRunnable
>
r
=
new
SendInitialChildDataRunnable
(
this
)
;
NS_DispatchToCurrentThread
(
r
)
;
}
StorageDBParent
:
:
~
StorageDBParent
(
)
{
StorageObserver
*
observer
=
StorageObserver
:
:
Self
(
)
;
if
(
observer
)
{
observer
-
>
RemoveSink
(
this
)
;
}
}
StorageDBParent
:
:
CacheParentBridge
*
StorageDBParent
:
:
NewCache
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
)
{
return
new
CacheParentBridge
(
this
aOriginSuffix
aOriginNoSuffix
)
;
}
void
StorageDBParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncPreload
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
bool
&
aPriority
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
storageThread
-
>
AsyncPreload
(
NewCache
(
aOriginSuffix
aOriginNoSuffix
)
aPriority
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncGetUsage
(
const
nsCString
&
aOriginNoSuffix
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
RefPtr
<
UsageParentBridge
>
usage
=
new
UsageParentBridge
(
this
aOriginNoSuffix
)
;
storageThread
-
>
AsyncGetUsage
(
usage
)
;
return
IPC_OK
(
)
;
}
namespace
{
class
SyncLoadCacheHelper
:
public
LocalStorageCacheBridge
{
public
:
SyncLoadCacheHelper
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
uint32_t
aAlreadyLoadedCount
InfallibleTArray
<
nsString
>
*
aKeys
InfallibleTArray
<
nsString
>
*
aValues
nsresult
*
rv
)
:
mMonitor
(
"
DOM
Storage
SyncLoad
IPC
"
)
mSuffix
(
aOriginSuffix
)
mOrigin
(
aOriginNoSuffix
)
mKeys
(
aKeys
)
mValues
(
aValues
)
mRv
(
rv
)
mLoaded
(
false
)
mLoadedCount
(
aAlreadyLoadedCount
)
{
*
mRv
=
NS_ERROR_UNEXPECTED
;
}
virtual
const
nsCString
Origin
(
)
const
{
return
LocalStorageManager
:
:
CreateOrigin
(
mSuffix
mOrigin
)
;
}
virtual
const
nsCString
&
OriginNoSuffix
(
)
const
{
return
mOrigin
;
}
virtual
const
nsCString
&
OriginSuffix
(
)
const
{
return
mSuffix
;
}
virtual
bool
Loaded
(
)
{
return
mLoaded
;
}
virtual
uint32_t
LoadedCount
(
)
{
return
mLoadedCount
;
}
virtual
bool
LoadItem
(
const
nsAString
&
aKey
const
nsString
&
aValue
)
{
if
(
mLoaded
)
{
return
false
;
}
+
+
mLoadedCount
;
mKeys
-
>
AppendElement
(
aKey
)
;
mValues
-
>
AppendElement
(
aValue
)
;
return
true
;
}
virtual
void
LoadDone
(
nsresult
aRv
)
{
MonitorAutoLock
monitor
(
mMonitor
)
;
mLoaded
=
true
;
*
mRv
=
aRv
;
monitor
.
Notify
(
)
;
}
virtual
void
LoadWait
(
)
{
MonitorAutoLock
monitor
(
mMonitor
)
;
while
(
!
mLoaded
)
{
monitor
.
Wait
(
)
;
}
}
private
:
Monitor
mMonitor
;
nsCString
mSuffix
mOrigin
;
InfallibleTArray
<
nsString
>
*
mKeys
;
InfallibleTArray
<
nsString
>
*
mValues
;
nsresult
*
mRv
;
bool
mLoaded
;
uint32_t
mLoadedCount
;
}
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvPreload
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
uint32_t
&
aAlreadyLoadedCount
InfallibleTArray
<
nsString
>
*
aKeys
InfallibleTArray
<
nsString
>
*
aValues
nsresult
*
aRv
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
RefPtr
<
SyncLoadCacheHelper
>
cache
(
new
SyncLoadCacheHelper
(
aOriginSuffix
aOriginNoSuffix
aAlreadyLoadedCount
aKeys
aValues
aRv
)
)
;
storageThread
-
>
SyncPreload
(
cache
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncAddItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsresult
rv
=
storageThread
-
>
AsyncAddItem
(
NewCache
(
aOriginSuffix
aOriginNoSuffix
)
aKey
aValue
)
;
if
(
NS_FAILED
(
rv
)
&
&
mIPCOpen
)
{
mozilla
:
:
Unused
<
<
SendError
(
rv
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncUpdateItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
const
nsString
&
aValue
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsresult
rv
=
storageThread
-
>
AsyncUpdateItem
(
NewCache
(
aOriginSuffix
aOriginNoSuffix
)
aKey
aValue
)
;
if
(
NS_FAILED
(
rv
)
&
&
mIPCOpen
)
{
mozilla
:
:
Unused
<
<
SendError
(
rv
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncRemoveItem
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
const
nsString
&
aKey
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsresult
rv
=
storageThread
-
>
AsyncRemoveItem
(
NewCache
(
aOriginSuffix
aOriginNoSuffix
)
aKey
)
;
if
(
NS_FAILED
(
rv
)
&
&
mIPCOpen
)
{
mozilla
:
:
Unused
<
<
SendError
(
rv
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncClear
(
const
nsCString
&
aOriginSuffix
const
nsCString
&
aOriginNoSuffix
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
GetOrCreate
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsresult
rv
=
storageThread
-
>
AsyncClear
(
NewCache
(
aOriginSuffix
aOriginNoSuffix
)
)
;
if
(
NS_FAILED
(
rv
)
&
&
mIPCOpen
)
{
mozilla
:
:
Unused
<
<
SendError
(
rv
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StorageDBParent
:
:
RecvAsyncFlush
(
)
{
StorageDBThread
*
storageThread
=
StorageDBThread
:
:
Get
(
)
;
if
(
!
storageThread
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
storageThread
-
>
AsyncFlush
(
)
;
return
IPC_OK
(
)
;
}
nsresult
StorageDBParent
:
:
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
const
nsACString
&
aOriginScope
)
{
if
(
mIPCOpen
)
{
mozilla
:
:
Unused
<
<
SendObserve
(
nsDependentCString
(
aTopic
)
nsString
(
aOriginAttributesPattern
)
nsCString
(
aOriginScope
)
)
;
}
return
NS_OK
;
}
namespace
{
class
LoadRunnable
:
public
Runnable
{
public
:
enum
TaskType
{
loadItem
loadDone
}
;
LoadRunnable
(
StorageDBParent
*
aParent
TaskType
aType
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
const
nsAString
&
aKey
=
EmptyString
(
)
const
nsAString
&
aValue
=
EmptyString
(
)
)
:
Runnable
(
"
dom
:
:
LoadRunnable
"
)
mParent
(
aParent
)
mType
(
aType
)
mSuffix
(
aOriginSuffix
)
mOrigin
(
aOriginNoSuffix
)
mKey
(
aKey
)
mValue
(
aValue
)
{
}
LoadRunnable
(
StorageDBParent
*
aParent
TaskType
aType
const
nsACString
&
aOriginSuffix
const
nsACString
&
aOriginNoSuffix
nsresult
aRv
)
:
Runnable
(
"
dom
:
:
LoadRunnable
"
)
mParent
(
aParent
)
mType
(
aType
)
mSuffix
(
aOriginSuffix
)
mOrigin
(
aOriginNoSuffix
)
mRv
(
aRv
)
{
}
private
:
RefPtr
<
StorageDBParent
>
mParent
;
TaskType
mType
;
nsCString
mSuffix
mOrigin
;
nsString
mKey
;
nsString
mValue
;
nsresult
mRv
;
NS_IMETHOD
Run
(
)
override
{
if
(
!
mParent
-
>
IPCOpen
(
)
)
{
return
NS_OK
;
}
switch
(
mType
)
{
case
loadItem
:
mozilla
:
:
Unused
<
<
mParent
-
>
SendLoadItem
(
mSuffix
mOrigin
mKey
mValue
)
;
break
;
case
loadDone
:
mozilla
:
:
Unused
<
<
mParent
-
>
SendLoadDone
(
mSuffix
mOrigin
mRv
)
;
break
;
}
mParent
=
nullptr
;
return
NS_OK
;
}
}
;
}
const
nsCString
StorageDBParent
:
:
CacheParentBridge
:
:
Origin
(
)
const
{
return
LocalStorageManager
:
:
CreateOrigin
(
mOriginSuffix
mOriginNoSuffix
)
;
}
bool
StorageDBParent
:
:
CacheParentBridge
:
:
LoadItem
(
const
nsAString
&
aKey
const
nsString
&
aValue
)
{
if
(
mLoaded
)
{
return
false
;
}
+
+
mLoadedCount
;
RefPtr
<
LoadRunnable
>
r
=
new
LoadRunnable
(
mParent
LoadRunnable
:
:
loadItem
mOriginSuffix
mOriginNoSuffix
aKey
aValue
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningEventTarget
-
>
Dispatch
(
r
NS_DISPATCH_NORMAL
)
)
;
return
true
;
}
void
StorageDBParent
:
:
CacheParentBridge
:
:
LoadDone
(
nsresult
aRv
)
{
if
(
mLoaded
)
{
return
;
}
mLoaded
=
true
;
RefPtr
<
LoadRunnable
>
r
=
new
LoadRunnable
(
mParent
LoadRunnable
:
:
loadDone
mOriginSuffix
mOriginNoSuffix
aRv
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningEventTarget
-
>
Dispatch
(
r
NS_DISPATCH_NORMAL
)
)
;
}
void
StorageDBParent
:
:
CacheParentBridge
:
:
LoadWait
(
)
{
MOZ_ASSERT
(
false
)
;
}
NS_IMETHODIMP_
(
void
)
StorageDBParent
:
:
CacheParentBridge
:
:
Release
(
void
)
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
"
dup
release
"
)
;
nsrefcnt
count
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
count
"
LocalStorageCacheBridge
"
)
;
if
(
0
=
=
count
)
{
mRefCnt
=
1
;
Destroy
(
)
;
}
}
void
StorageDBParent
:
:
CacheParentBridge
:
:
Destroy
(
)
{
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
delete
this
;
return
;
}
RefPtr
<
Runnable
>
destroyRunnable
=
NewNonOwningRunnableMethod
(
"
CacheParentBridge
:
:
Destroy
"
this
&
CacheParentBridge
:
:
Destroy
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningEventTarget
-
>
Dispatch
(
destroyRunnable
NS_DISPATCH_NORMAL
)
)
;
}
namespace
{
class
UsageRunnable
:
public
Runnable
{
public
:
UsageRunnable
(
StorageDBParent
*
aParent
const
nsACString
&
aOriginScope
const
int64_t
&
aUsage
)
:
Runnable
(
"
dom
:
:
UsageRunnable
"
)
mParent
(
aParent
)
mOriginScope
(
aOriginScope
)
mUsage
(
aUsage
)
{
}
private
:
NS_IMETHOD
Run
(
)
override
{
if
(
!
mParent
-
>
IPCOpen
(
)
)
{
return
NS_OK
;
}
mozilla
:
:
Unused
<
<
mParent
-
>
SendLoadUsage
(
mOriginScope
mUsage
)
;
mParent
=
nullptr
;
return
NS_OK
;
}
RefPtr
<
StorageDBParent
>
mParent
;
nsCString
mOriginScope
;
int64_t
mUsage
;
}
;
}
void
StorageDBParent
:
:
UsageParentBridge
:
:
LoadUsage
(
const
int64_t
aUsage
)
{
RefPtr
<
UsageRunnable
>
r
=
new
UsageRunnable
(
mParent
mOriginScope
aUsage
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningEventTarget
-
>
Dispatch
(
r
NS_DISPATCH_NORMAL
)
)
;
}
NS_IMETHODIMP_
(
MozExternalRefCountType
)
StorageDBParent
:
:
UsageParentBridge
:
:
Release
(
void
)
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
"
dup
release
"
)
;
nsrefcnt
count
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
count
"
StorageUsageBridge
"
)
;
if
(
count
=
=
0
)
{
Destroy
(
)
;
return
0
;
}
return
count
;
}
void
StorageDBParent
:
:
UsageParentBridge
:
:
Destroy
(
)
{
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
delete
this
;
return
;
}
RefPtr
<
Runnable
>
destroyRunnable
=
NewNonOwningRunnableMethod
(
"
UsageParentBridge
:
:
Destroy
"
this
&
UsageParentBridge
:
:
Destroy
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningEventTarget
-
>
Dispatch
(
destroyRunnable
NS_DISPATCH_NORMAL
)
)
;
}
PBackgroundStorageParent
*
AllocPBackgroundStorageParent
(
)
{
AssertIsOnBackgroundThread
(
)
;
return
new
StorageDBParent
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvPBackgroundStorageConstructor
(
PBackgroundStorageParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
return
IPC_OK
(
)
;
}
bool
DeallocPBackgroundStorageParent
(
PBackgroundStorageParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
StorageDBParent
*
actor
=
static_cast
<
StorageDBParent
*
>
(
aActor
)
;
actor
-
>
ReleaseIPDLReference
(
)
;
return
true
;
}
}
}
