#
ifndef
nsDOMStorage_h___
#
define
nsDOMStorage_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIDOMStorage
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsISupports
.
h
"
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
DOMStorageManager
;
class
DOMStorageCache
;
class
DOMStorage
final
:
public
nsIDOMStorage
public
nsSupportsWeakReference
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
DOMStorage
nsIDOMStorage
)
enum
StorageType
{
LocalStorage
=
1
SessionStorage
=
2
}
;
StorageType
GetType
(
)
const
;
DOMStorageManager
*
GetManager
(
)
const
{
return
mManager
;
}
DOMStorageCache
const
*
GetCache
(
)
const
{
return
mCache
;
}
nsIPrincipal
*
GetPrincipal
(
)
;
bool
PrincipalEquals
(
nsIPrincipal
*
aPrincipal
)
;
bool
CanAccess
(
nsIPrincipal
*
aPrincipal
)
;
DOMStorage
(
nsPIDOMWindowInner
*
aWindow
DOMStorageManager
*
aManager
DOMStorageCache
*
aCache
const
nsAString
&
aDocumentURI
nsIPrincipal
*
aPrincipal
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
uint32_t
GetLength
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
Key
(
uint32_t
aIndex
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aKeys
)
;
void
NamedGetter
(
const
nsAString
&
aKey
bool
&
aFound
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
GetItem
(
aKey
aResult
aSubjectPrincipal
aRv
)
;
aFound
=
!
aResult
.
IsVoid
(
)
;
}
void
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
NamedSetter
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
SetItem
(
aKey
aValue
aSubjectPrincipal
aRv
)
;
}
void
RemoveItem
(
const
nsAString
&
aKey
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
NamedDeleter
(
const
nsAString
&
aKey
bool
&
aFound
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
RemoveItem
(
aKey
aSubjectPrincipal
aRv
)
;
aFound
=
!
aRv
.
ErrorCodeIs
(
NS_SUCCESS_DOM_NO_OPERATION
)
;
}
void
Clear
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
bool
IsPrivate
(
)
const
;
bool
IsSessionOnly
(
)
const
{
return
mIsSessionOnly
;
}
bool
IsForkOf
(
const
DOMStorage
*
aOther
)
const
{
MOZ_ASSERT
(
aOther
)
;
return
mCache
=
=
aOther
-
>
mCache
;
}
protected
:
bool
CanUseStorage
(
nsIPrincipal
&
aSubjectPrincipal
)
;
private
:
~
DOMStorage
(
)
;
friend
class
DOMStorageManager
;
friend
class
DOMStorageCache
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
RefPtr
<
DOMStorageManager
>
mManager
;
RefPtr
<
DOMStorageCache
>
mCache
;
nsString
mDocumentURI
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
bool
mIsSessionOnly
:
1
;
void
BroadcastChangeNotification
(
const
nsSubstring
&
aKey
const
nsSubstring
&
aOldValue
const
nsSubstring
&
aNewValue
)
;
}
;
}
}
#
endif
