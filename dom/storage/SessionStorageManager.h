#
ifndef
mozilla_dom_SessionStorageManager_h
#
define
mozilla_dom_SessionStorageManager_h
#
include
"
nsIDOMStorageManager
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
StorageObserver
.
h
"
namespace
mozilla
{
class
OriginAttributesPattern
;
namespace
dom
{
class
BrowsingContext
;
class
ContentParent
;
class
KeyValuePair
;
class
SessionStorageCache
;
class
SessionStorageObserver
;
class
SessionStorageManager
final
:
public
nsIDOMSessionStorageManager
public
StorageObserverSink
{
public
:
explicit
SessionStorageManager
(
RefPtr
<
BrowsingContext
>
aBrowsingContext
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIDOMSTORAGEMANAGER
NS_DECL_NSIDOMSESSIONSTORAGEMANAGER
NS_DECL_CYCLE_COLLECTION_CLASS
(
SessionStorageManager
)
RefPtr
<
BrowsingContext
>
GetBrowsingContext
(
)
const
;
void
SendSessionStorageDataToParentProcess
(
)
;
void
SendSessionStorageDataToContentProcess
(
ContentParent
*
aActor
nsIPrincipal
*
aPrincipal
)
;
void
LoadSessionStorageData
(
ContentParent
*
aSource
const
nsACString
&
aOriginAttrs
const
nsACString
&
aOriginKey
const
nsTArray
<
KeyValuePair
>
&
aDefaultData
const
nsTArray
<
KeyValuePair
>
&
aSessionData
)
;
private
:
~
SessionStorageManager
(
)
;
nsresult
Observe
(
const
char
*
aTopic
const
nsAString
&
aOriginAttributesPattern
const
nsACString
&
aOriginScope
)
override
;
enum
ClearStorageType
{
eAll
eSessionOnly
}
;
void
ClearStorages
(
ClearStorageType
aType
const
OriginAttributesPattern
&
aPattern
const
nsACString
&
aOriginScope
)
;
nsresult
GetSessionStorageCacheHelper
(
nsIPrincipal
*
aPrincipal
bool
aMakeIfNeeded
SessionStorageCache
*
aCloneFrom
RefPtr
<
SessionStorageCache
>
*
aRetVal
)
;
nsresult
GetSessionStorageCacheHelper
(
const
nsACString
&
aOriginAttrs
const
nsACString
&
aOriginKey
bool
aMakeIfNeeded
SessionStorageCache
*
aCloneFrom
RefPtr
<
SessionStorageCache
>
*
aRetVal
)
;
struct
OriginRecord
{
OriginRecord
(
)
=
default
;
OriginRecord
(
OriginRecord
&
&
)
=
default
;
OriginRecord
&
operator
=
(
OriginRecord
&
&
)
=
default
;
~
OriginRecord
(
)
;
RefPtr
<
SessionStorageCache
>
mCache
;
nsTHashtable
<
nsUint64HashKey
>
mKnownTo
;
}
;
OriginRecord
*
GetOriginRecord
(
const
nsACString
&
aOriginAttrs
const
nsACString
&
aOriginKey
bool
aMakeIfNeeded
SessionStorageCache
*
aCloneFrom
)
;
template
<
typename
Actor
>
void
SendSessionStorageCache
(
Actor
*
aActor
const
nsACString
&
aOriginAttrs
const
nsACString
&
aOriginKey
SessionStorageCache
*
aCache
)
;
using
OriginKeyHashTable
=
nsClassHashtable
<
nsCStringHashKey
OriginRecord
>
;
nsClassHashtable
<
nsCStringHashKey
OriginKeyHashTable
>
mOATable
;
RefPtr
<
SessionStorageObserver
>
mObserver
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
}
;
}
}
#
endif
