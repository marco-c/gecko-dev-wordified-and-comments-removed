#
include
"
SessionStorage
.
h
"
#
include
"
StorageManager
.
h
"
#
include
"
mozilla
/
dom
/
StorageBinding
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
SessionStorage
:
:
SessionStorage
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
SessionStorageCache
*
aCache
)
:
Storage
(
aWindow
aPrincipal
)
mCache
(
aCache
)
{
MOZ_ASSERT
(
aCache
)
;
}
SessionStorage
:
:
~
SessionStorage
(
)
{
}
int64_t
SessionStorage
:
:
GetOriginQuotaUsage
(
)
const
{
return
mCache
-
>
GetOriginQuotaUsage
(
)
;
}
uint32_t
SessionStorage
:
:
GetLength
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
CanUseStorage
(
aSubjectPrincipal
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
0
;
}
return
mCache
-
>
Length
(
)
;
}
void
SessionStorage
:
:
Key
(
uint32_t
aIndex
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
CanUseStorage
(
aSubjectPrincipal
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
mCache
-
>
Key
(
aIndex
aResult
)
;
}
void
SessionStorage
:
:
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
CanUseStorage
(
aSubjectPrincipal
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
mCache
-
>
GetItem
(
aKey
aResult
)
;
}
void
SessionStorage
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aKeys
)
{
if
(
!
CanUseStorage
(
*
nsContentUtils
:
:
SubjectPrincipal
(
)
)
)
{
aKeys
.
Clear
(
)
;
return
;
}
mCache
-
>
GetKeys
(
aKeys
)
;
}
void
SessionStorage
:
:
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
CanUseStorage
(
aSubjectPrincipal
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsString
oldValue
;
nsresult
rv
=
mCache
-
>
SetItem
(
aKey
aValue
oldValue
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
if
(
rv
=
=
NS_SUCCESS_DOM_NO_OPERATION
)
{
return
;
}
BroadcastChangeNotification
(
aKey
oldValue
aValue
)
;
}
void
SessionStorage
:
:
RemoveItem
(
const
nsAString
&
aKey
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
CanUseStorage
(
aSubjectPrincipal
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsString
oldValue
;
nsresult
rv
=
mCache
-
>
RemoveItem
(
aKey
oldValue
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
if
(
rv
=
=
NS_SUCCESS_DOM_NO_OPERATION
)
{
return
;
}
BroadcastChangeNotification
(
aKey
oldValue
NullString
(
)
)
;
}
void
SessionStorage
:
:
Clear
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
uint32_t
length
=
GetLength
(
aSubjectPrincipal
aRv
)
;
if
(
!
length
)
{
return
;
}
mCache
-
>
Clear
(
)
;
BroadcastChangeNotification
(
NullString
(
)
NullString
(
)
NullString
(
)
)
;
}
bool
SessionStorage
:
:
CanUseStorage
(
nsIPrincipal
&
aSubjectPrincipal
)
{
if
(
!
mozilla
:
:
Preferences
:
:
GetBool
(
"
dom
.
storage
.
enabled
"
)
)
{
return
false
;
}
nsContentUtils
:
:
StorageAccess
access
=
nsContentUtils
:
:
StorageAllowedForPrincipal
(
Principal
(
)
)
;
if
(
access
=
=
nsContentUtils
:
:
StorageAccess
:
:
eDeny
)
{
return
false
;
}
return
CanAccess
(
&
aSubjectPrincipal
)
;
}
void
SessionStorage
:
:
BroadcastChangeNotification
(
const
nsAString
&
aKey
const
nsAString
&
aOldValue
const
nsAString
&
aNewValue
)
{
}
SessionStorageCache
:
:
SessionStorageCache
(
)
:
mOriginQuotaUsage
(
0
)
{
}
void
SessionStorageCache
:
:
Key
(
uint32_t
aIndex
nsAString
&
aResult
)
{
aResult
.
SetIsVoid
(
true
)
;
for
(
auto
iter
=
mKeys
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
aIndex
=
=
0
)
{
aResult
=
iter
.
Key
(
)
;
return
;
}
aIndex
-
-
;
}
}
void
SessionStorageCache
:
:
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
)
{
nsString
value
;
if
(
!
mKeys
.
Get
(
aKey
&
value
)
)
{
SetDOMStringToNull
(
value
)
;
}
aResult
=
value
;
}
void
SessionStorageCache
:
:
GetKeys
(
nsTArray
<
nsString
>
&
aKeys
)
{
for
(
auto
iter
=
mKeys
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aKeys
.
AppendElement
(
iter
.
Key
(
)
)
;
}
}
nsresult
SessionStorageCache
:
:
SetItem
(
const
nsAString
&
aKey
const
nsAString
&
aValue
nsString
&
aOldValue
)
{
int64_t
delta
=
0
;
if
(
!
mKeys
.
Get
(
aKey
&
aOldValue
)
)
{
SetDOMStringToNull
(
aOldValue
)
;
delta
=
static_cast
<
int64_t
>
(
aKey
.
Length
(
)
)
;
}
delta
+
=
static_cast
<
int64_t
>
(
aValue
.
Length
(
)
)
-
static_cast
<
int64_t
>
(
aOldValue
.
Length
(
)
)
;
if
(
aValue
=
=
aOldValue
&
&
DOMStringIsNull
(
aValue
)
=
=
DOMStringIsNull
(
aOldValue
)
)
{
return
NS_SUCCESS_DOM_NO_OPERATION
;
}
if
(
!
ProcessUsageDelta
(
delta
)
)
{
return
NS_ERROR_DOM_QUOTA_REACHED
;
}
mKeys
.
Put
(
aKey
nsString
(
aValue
)
)
;
return
NS_OK
;
}
nsresult
SessionStorageCache
:
:
RemoveItem
(
const
nsAString
&
aKey
nsString
&
aOldValue
)
{
if
(
!
mKeys
.
Get
(
aKey
&
aOldValue
)
)
{
return
NS_SUCCESS_DOM_NO_OPERATION
;
}
ProcessUsageDelta
(
-
(
static_cast
<
int64_t
>
(
aOldValue
.
Length
(
)
)
+
static_cast
<
int64_t
>
(
aKey
.
Length
(
)
)
)
)
;
mKeys
.
Remove
(
aKey
)
;
return
NS_OK
;
}
void
SessionStorageCache
:
:
Clear
(
)
{
ProcessUsageDelta
(
-
mOriginQuotaUsage
)
;
mKeys
.
Clear
(
)
;
}
bool
SessionStorageCache
:
:
ProcessUsageDelta
(
int64_t
aDelta
)
{
uint64_t
newOriginUsage
=
mOriginQuotaUsage
+
aDelta
;
if
(
aDelta
>
0
&
&
newOriginUsage
>
StorageManagerBase
:
:
GetQuota
(
)
)
{
return
false
;
}
mOriginQuotaUsage
=
newOriginUsage
;
return
true
;
}
}
}
