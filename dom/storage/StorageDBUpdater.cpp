#
include
"
StorageManager
.
h
"
#
include
"
mozIStorageBindingParamsArray
.
h
"
#
include
"
mozIStorageBindingParams
.
h
"
#
include
"
mozIStorageValueArray
.
h
"
#
include
"
mozIStorageFunction
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Tokenizer
.
h
"
#
define
CURRENT_SCHEMA_VERSION
1
namespace
mozilla
{
namespace
dom
{
extern
void
ReverseString
(
const
nsCSubstring
&
aSource
nsCSubstring
&
aResult
)
;
namespace
{
class
nsReverseStringSQLFunction
final
:
public
mozIStorageFunction
{
~
nsReverseStringSQLFunction
(
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_MOZISTORAGEFUNCTION
}
;
NS_IMPL_ISUPPORTS
(
nsReverseStringSQLFunction
mozIStorageFunction
)
NS_IMETHODIMP
nsReverseStringSQLFunction
:
:
OnFunctionCall
(
mozIStorageValueArray
*
aFunctionArguments
nsIVariant
*
*
aResult
)
{
nsresult
rv
;
nsAutoCString
stringToReverse
;
rv
=
aFunctionArguments
-
>
GetUTF8String
(
0
stringToReverse
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
result
;
ReverseString
(
stringToReverse
result
)
;
RefPtr
<
nsVariant
>
outVar
(
new
nsVariant
(
)
)
;
rv
=
outVar
-
>
SetAsAUTF8String
(
result
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
outVar
.
forget
(
aResult
)
;
return
NS_OK
;
}
class
ExtractOriginData
:
protected
mozilla
:
:
Tokenizer
{
public
:
ExtractOriginData
(
const
nsACString
&
scope
nsACString
&
suffix
nsACString
&
origin
)
:
mozilla
:
:
Tokenizer
(
scope
)
{
using
mozilla
:
:
OriginAttributes
;
suffix
.
Truncate
(
)
;
origin
.
Assign
(
scope
)
;
uint32_t
appId
;
if
(
!
ReadInteger
(
&
appId
)
)
{
return
;
}
if
(
!
CheckChar
(
'
:
'
)
)
{
return
;
}
nsDependentCSubstring
isolatedBrowserFlag
;
if
(
!
ReadWord
(
isolatedBrowserFlag
)
)
{
return
;
}
bool
inIsolatedMozBrowser
=
isolatedBrowserFlag
=
=
"
t
"
;
bool
notInIsolatedBrowser
=
isolatedBrowserFlag
=
=
"
f
"
;
if
(
!
inIsolatedMozBrowser
&
&
!
notInIsolatedBrowser
)
{
return
;
}
if
(
!
CheckChar
(
'
:
'
)
)
{
return
;
}
Record
(
)
;
if
(
CheckChar
(
'
^
'
)
)
{
Token
t
;
while
(
Next
(
t
)
)
{
if
(
t
.
Equals
(
Token
:
:
Char
(
'
:
'
)
)
)
{
Claim
(
suffix
)
;
break
;
}
}
}
else
{
OriginAttributes
attrs
(
appId
inIsolatedMozBrowser
)
;
attrs
.
CreateSuffix
(
suffix
)
;
}
origin
.
Assign
(
Substring
(
mCursor
mEnd
)
)
;
}
}
;
class
GetOriginParticular
final
:
public
mozIStorageFunction
{
public
:
enum
EParticular
{
ORIGIN_ATTRIBUTES_SUFFIX
ORIGIN_KEY
}
;
explicit
GetOriginParticular
(
EParticular
aParticular
)
:
mParticular
(
aParticular
)
{
}
private
:
GetOriginParticular
(
)
=
delete
;
~
GetOriginParticular
(
)
{
}
EParticular
mParticular
;
NS_DECL_ISUPPORTS
NS_DECL_MOZISTORAGEFUNCTION
}
;
NS_IMPL_ISUPPORTS
(
GetOriginParticular
mozIStorageFunction
)
NS_IMETHODIMP
GetOriginParticular
:
:
OnFunctionCall
(
mozIStorageValueArray
*
aFunctionArguments
nsIVariant
*
*
aResult
)
{
nsresult
rv
;
nsAutoCString
scope
;
rv
=
aFunctionArguments
-
>
GetUTF8String
(
0
scope
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
suffix
origin
;
ExtractOriginData
(
scope
suffix
origin
)
;
nsCOMPtr
<
nsIWritableVariant
>
outVar
(
new
nsVariant
(
)
)
;
switch
(
mParticular
)
{
case
EParticular
:
:
ORIGIN_ATTRIBUTES_SUFFIX
:
rv
=
outVar
-
>
SetAsAUTF8String
(
suffix
)
;
break
;
case
EParticular
:
:
ORIGIN_KEY
:
rv
=
outVar
-
>
SetAsAUTF8String
(
origin
)
;
break
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
outVar
.
forget
(
aResult
)
;
return
NS_OK
;
}
}
namespace
StorageDBUpdater
{
nsresult
CreateSchema1Tables
(
mozIStorageConnection
*
aWorkerConnection
)
{
nsresult
rv
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
IF
NOT
EXISTS
webappsstore2
(
"
"
originAttributes
TEXT
"
"
originKey
TEXT
"
"
scope
TEXT
"
"
key
TEXT
"
"
value
TEXT
)
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
UNIQUE
INDEX
IF
NOT
EXISTS
origin_key_index
"
"
ON
webappsstore2
(
originAttributes
originKey
key
)
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
Update
(
mozIStorageConnection
*
aWorkerConnection
)
{
nsresult
rv
;
mozStorageTransaction
transaction
(
aWorkerConnection
false
)
;
bool
doVacuum
=
false
;
int32_t
schemaVer
;
rv
=
aWorkerConnection
-
>
GetSchemaVersion
(
&
schemaVer
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
schemaVer
>
=
1
)
{
bool
schema0IndexExists
;
rv
=
aWorkerConnection
-
>
IndexExists
(
NS_LITERAL_CSTRING
(
"
scope_key_index
"
)
&
schema0IndexExists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
schema0IndexExists
)
{
schemaVer
=
0
;
}
}
switch
(
schemaVer
)
{
case
0
:
{
bool
webappsstore2Exists
webappsstoreExists
moz_webappsstoreExists
;
rv
=
aWorkerConnection
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
webappsstore2
"
)
&
webappsstore2Exists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
webappsstore
"
)
&
webappsstoreExists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
moz_webappsstore
"
)
&
moz_webappsstoreExists
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
webappsstore2Exists
&
&
!
webappsstoreExists
&
&
!
moz_webappsstoreExists
)
{
rv
=
CreateSchema1Tables
(
aWorkerConnection
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
SetSchemaVersion
(
CURRENT_SCHEMA_VERSION
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
break
;
}
doVacuum
=
true
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
IF
NOT
EXISTS
webappsstore2
(
"
"
scope
TEXT
"
"
key
TEXT
"
"
value
TEXT
"
"
secure
INTEGER
"
"
owner
TEXT
)
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
UNIQUE
INDEX
IF
NOT
EXISTS
scope_key_index
"
"
ON
webappsstore2
(
scope
key
)
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
mozIStorageFunction
>
function1
(
new
nsReverseStringSQLFunction
(
)
)
;
NS_ENSURE_TRUE
(
function1
NS_ERROR_OUT_OF_MEMORY
)
;
rv
=
aWorkerConnection
-
>
CreateFunction
(
NS_LITERAL_CSTRING
(
"
REVERSESTRING
"
)
1
function1
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
webappsstoreExists
)
{
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
INSERT
OR
IGNORE
INTO
"
"
webappsstore2
(
scope
key
value
secure
owner
)
"
"
SELECT
REVERSESTRING
(
domain
)
|
|
'
.
:
'
key
value
secure
owner
"
"
FROM
webappsstore
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
DROP
TABLE
webappsstore
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
moz_webappsstoreExists
)
{
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
INSERT
OR
IGNORE
INTO
"
"
webappsstore2
(
scope
key
value
secure
owner
)
"
"
SELECT
REVERSESTRING
(
domain
)
|
|
'
.
:
'
key
value
secure
domain
"
"
FROM
moz_webappsstore
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
DROP
TABLE
moz_webappsstore
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
aWorkerConnection
-
>
RemoveFunction
(
NS_LITERAL_CSTRING
(
"
REVERSESTRING
"
)
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
DROP
INDEX
IF
EXISTS
webappsstore2
.
origin_key_index
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
DROP
INDEX
IF
EXISTS
webappsstore2
.
scope_key_index
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
ALTER
TABLE
webappsstore2
RENAME
TO
webappsstore2_old
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
mozIStorageFunction
>
oaSuffixFunc
(
new
GetOriginParticular
(
GetOriginParticular
:
:
ORIGIN_ATTRIBUTES_SUFFIX
)
)
;
rv
=
aWorkerConnection
-
>
CreateFunction
(
NS_LITERAL_CSTRING
(
"
GET_ORIGIN_SUFFIX
"
)
1
oaSuffixFunc
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
mozIStorageFunction
>
originKeyFunc
(
new
GetOriginParticular
(
GetOriginParticular
:
:
ORIGIN_KEY
)
)
;
rv
=
aWorkerConnection
-
>
CreateFunction
(
NS_LITERAL_CSTRING
(
"
GET_ORIGIN_KEY
"
)
1
originKeyFunc
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
CreateSchema1Tables
(
aWorkerConnection
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
INSERT
OR
IGNORE
INTO
"
"
webappsstore2
(
originAttributes
originKey
scope
key
value
)
"
"
SELECT
GET_ORIGIN_SUFFIX
(
scope
)
GET_ORIGIN_KEY
(
scope
)
scope
key
value
"
"
FROM
webappsstore2_old
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
DROP
TABLE
webappsstore2_old
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aWorkerConnection
-
>
RemoveFunction
(
NS_LITERAL_CSTRING
(
"
GET_ORIGIN_SUFFIX
"
)
)
;
aWorkerConnection
-
>
RemoveFunction
(
NS_LITERAL_CSTRING
(
"
GET_ORIGIN_KEY
"
)
)
;
rv
=
aWorkerConnection
-
>
SetSchemaVersion
(
1
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_FALLTHROUGH
;
}
case
CURRENT_SCHEMA_VERSION
:
rv
=
CreateSchema1Tables
(
aWorkerConnection
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
break
;
default
:
MOZ_ASSERT
(
false
)
;
break
;
}
rv
=
transaction
.
Commit
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
doVacuum
)
{
rv
=
aWorkerConnection
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
VACUUM
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
}
}
}
