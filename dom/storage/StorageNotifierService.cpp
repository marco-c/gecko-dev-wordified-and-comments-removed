#
include
"
StorageNotifierService
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
bool
gStorageShuttingDown
=
false
;
StaticRefPtr
<
StorageNotifierService
>
gStorageNotifierService
;
}
StorageNotifierService
*
StorageNotifierService
:
:
GetOrCreate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gStorageNotifierService
&
&
!
gStorageShuttingDown
)
{
gStorageNotifierService
=
new
StorageNotifierService
(
)
;
ClearOnShutdown
(
&
gStorageNotifierService
)
;
}
return
gStorageNotifierService
;
}
StorageNotifierService
:
:
StorageNotifierService
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
gStorageNotifierService
)
;
}
StorageNotifierService
:
:
~
StorageNotifierService
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
gStorageNotifierService
)
;
gStorageShuttingDown
=
true
;
}
void
StorageNotifierService
:
:
Broadcast
(
StorageEvent
*
aEvent
const
char16_t
*
aStorageType
bool
aPrivateBrowsing
bool
aImmediateDispatch
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
StorageNotifierService
>
service
=
gStorageNotifierService
;
if
(
!
service
)
{
return
;
}
RefPtr
<
StorageEvent
>
event
=
aEvent
;
nsTObserverArray
<
RefPtr
<
StorageNotificationObserver
>
>
:
:
ForwardIterator
iter
(
service
-
>
mObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
RefPtr
<
StorageNotificationObserver
>
observer
=
iter
.
GetNext
(
)
;
if
(
aPrivateBrowsing
!
=
observer
-
>
IsPrivateBrowsing
(
)
)
{
continue
;
}
if
(
!
StorageUtils
:
:
PrincipalsEqual
(
aEvent
-
>
GetPrincipal
(
)
observer
-
>
GetEffectiveStoragePrincipal
(
)
)
)
{
continue
;
}
RefPtr
<
Runnable
>
r
=
NS_NewRunnableFunction
(
"
StorageNotifierService
:
:
Broadcast
"
[
observer
event
aStorageType
aPrivateBrowsing
]
(
)
{
observer
-
>
ObserveStorageNotification
(
event
aStorageType
aPrivateBrowsing
)
;
}
)
;
if
(
aImmediateDispatch
)
{
r
-
>
Run
(
)
;
}
else
{
nsCOMPtr
<
nsIEventTarget
>
et
=
observer
-
>
GetEventTarget
(
)
;
if
(
et
)
{
et
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
}
}
}
void
StorageNotifierService
:
:
Register
(
StorageNotificationObserver
*
aObserver
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aObserver
)
;
MOZ_ASSERT
(
!
mObservers
.
Contains
(
aObserver
)
)
;
mObservers
.
AppendElement
(
aObserver
)
;
}
void
StorageNotifierService
:
:
Unregister
(
StorageNotificationObserver
*
aObserver
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aObserver
)
;
mObservers
.
RemoveElement
(
aObserver
)
;
}
}
}
