#
include
"
mozilla
/
dom
/
ShadowRealmGlobalScope
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
loader
/
ModuleLoaderBase
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
ModuleLoader
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRealmGlobalScopeBinding
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
xpcpublic
.
h
"
using
namespace
JS
:
:
loader
;
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ShadowRealmGlobalScope
mModuleLoader
mCreatingGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ShadowRealmGlobalScope
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ShadowRealmGlobalScope
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ShadowRealmGlobalScope
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_ENTRY
(
nsIGlobalObject
)
NS_INTERFACE_MAP_ENTRY
(
ShadowRealmGlobalScope
)
NS_INTERFACE_MAP_END
JSObject
*
NewShadowRealmGlobal
(
JSContext
*
aCx
JS
:
:
RealmOptions
&
aOptions
JSPrincipals
*
aPrincipals
JS
:
:
Handle
<
JSObject
*
>
aGlobalObj
)
{
JS
:
:
Rooted
<
JSObject
*
>
reflector
(
aCx
)
;
{
RefPtr
<
ShadowRealmGlobalScope
>
scope
;
GlobalObject
global
(
aCx
aGlobalObj
)
;
nsCOMPtr
<
nsIGlobalObject
>
nsGlobal
=
do_QueryInterface
(
global
.
GetAsSupports
(
)
)
;
MOZ_ASSERT
(
nsGlobal
)
;
scope
=
new
ShadowRealmGlobalScope
(
nsGlobal
)
;
ShadowRealmGlobalScope_Binding
:
:
Wrap
(
aCx
scope
scope
aOptions
aPrincipals
&
reflector
)
;
}
return
reflector
;
}
static
nsIGlobalObject
*
FindEnclosingNonShadowRealmGlobal
(
ShadowRealmGlobalScope
*
scope
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
scope
-
>
GetCreatingGlobal
(
)
;
do
{
nsCOMPtr
<
ShadowRealmGlobalScope
>
shadowRealmGlobalScope
=
do_QueryInterface
(
global
)
;
if
(
!
shadowRealmGlobalScope
)
{
break
;
}
global
=
shadowRealmGlobalScope
-
>
GetCreatingGlobal
(
)
;
}
while
(
true
)
;
return
global
;
}
ModuleLoaderBase
*
ShadowRealmGlobalScope
:
:
GetModuleLoader
(
JSContext
*
aCx
)
{
if
(
mModuleLoader
)
{
return
mModuleLoader
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
=
FindEnclosingNonShadowRealmGlobal
(
this
)
;
MOZ_RELEASE_ASSERT
(
global
)
;
JSObject
*
object
=
global
-
>
GetGlobalJSObject
(
)
;
MOZ_ASSERT
(
object
)
;
nsGlobalWindowInner
*
window
=
xpc
:
:
WindowGlobalOrNull
(
object
)
;
if
(
!
window
)
{
return
nullptr
;
}
RefPtr
<
Document
>
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
ScriptLoader
*
scriptLoader
=
doc
-
>
GetScriptLoader
(
)
;
if
(
!
scriptLoader
)
{
return
nullptr
;
}
mModuleLoader
=
new
ModuleLoader
(
scriptLoader
this
ModuleLoader
:
:
Normal
)
;
scriptLoader
-
>
RegisterShadowRealmModuleLoader
(
static_cast
<
ModuleLoader
*
>
(
mModuleLoader
.
get
(
)
)
)
;
return
mModuleLoader
;
}
bool
IsShadowRealmGlobal
(
JSObject
*
aObject
)
{
return
IS_INSTANCE_OF
(
ShadowRealmGlobalScope
aObject
)
;
}
}
