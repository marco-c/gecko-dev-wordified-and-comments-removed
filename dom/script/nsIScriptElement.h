#
ifndef
nsIScriptElement_h___
#
define
nsIScriptElement_h___
#
include
"
nsISupports
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIScriptLoaderObserver
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
define
NS_ISCRIPTELEMENT_IID
\
{
\
0xe60fca9b
0x1b96
0x4e4e
{
\
0xa9
0xb4
0xdc
0x98
0x4f
0x88
0x3f
0x9c
\
}
\
}
class
nsIScriptElement
:
public
nsIScriptLoaderObserver
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ISCRIPTELEMENT_IID
)
explicit
nsIScriptElement
(
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
:
mLineNumber
(
1
)
mColumnNumber
(
1
)
mAlreadyStarted
(
false
)
mMalformed
(
false
)
mDoneAddingChildren
(
aFromParser
=
=
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
|
|
aFromParser
=
=
mozilla
:
:
dom
:
:
FROM_PARSER_FRAGMENT
)
mForceAsync
(
aFromParser
=
=
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
|
|
aFromParser
=
=
mozilla
:
:
dom
:
:
FROM_PARSER_FRAGMENT
)
mFrozen
(
false
)
mIsModule
(
false
)
mDefer
(
false
)
mAsync
(
false
)
mExternal
(
false
)
mParserCreated
(
aFromParser
=
=
mozilla
:
:
dom
:
:
FROM_PARSER_FRAGMENT
?
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
:
aFromParser
)
mCreatorParser
(
nullptr
)
{
}
virtual
bool
GetScriptType
(
nsAString
&
type
)
=
0
;
nsIURI
*
GetScriptURI
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mUri
;
}
nsIPrincipal
*
GetScriptURITriggeringPrincipal
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mSrcTriggeringPrincipal
;
}
virtual
void
GetScriptText
(
nsAString
&
text
)
=
0
;
virtual
void
GetScriptCharset
(
nsAString
&
charset
)
=
0
;
virtual
void
FreezeExecutionAttrs
(
mozilla
:
:
dom
:
:
Document
*
)
=
0
;
bool
GetScriptIsModule
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mIsModule
;
}
bool
GetScriptDeferred
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mDefer
;
}
bool
GetScriptAsync
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mAsync
;
}
bool
GetScriptExternal
(
)
{
MOZ_ASSERT
(
mFrozen
"
Not
ready
for
this
call
yet
!
"
)
;
return
mExternal
;
}
mozilla
:
:
dom
:
:
FromParser
GetParserCreated
(
)
{
return
mParserCreated
;
}
void
SetScriptLineNumber
(
uint32_t
aLineNumber
)
{
mLineNumber
=
aLineNumber
;
}
uint32_t
GetScriptLineNumber
(
)
{
return
mLineNumber
;
}
void
SetScriptColumnNumber
(
uint32_t
aColumnNumber
)
{
mColumnNumber
=
aColumnNumber
;
}
uint32_t
GetScriptColumnNumber
(
)
{
return
mColumnNumber
;
}
void
SetIsMalformed
(
)
{
mMalformed
=
true
;
}
bool
IsMalformed
(
)
{
return
mMalformed
;
}
void
PreventExecution
(
)
{
mAlreadyStarted
=
true
;
}
void
LoseParserInsertedness
(
)
{
mUri
=
nullptr
;
mCreatorParser
=
nullptr
;
mParserCreated
=
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
;
mForceAsync
=
!
GetAsyncState
(
)
;
mFrozen
=
false
;
mIsModule
=
false
;
mExternal
=
false
;
mAsync
=
false
;
mDefer
=
false
;
}
void
SetCreatorParser
(
nsIParser
*
aParser
)
{
mCreatorParser
=
do_GetWeakReference
(
aParser
)
;
}
void
UnblockParser
(
)
{
nsCOMPtr
<
nsIParser
>
parser
=
do_QueryReferent
(
mCreatorParser
)
;
if
(
parser
)
{
parser
-
>
UnblockParser
(
)
;
}
}
void
ContinueParserAsync
(
)
{
nsCOMPtr
<
nsIParser
>
parser
=
do_QueryReferent
(
mCreatorParser
)
;
if
(
parser
)
{
parser
-
>
ContinueInterruptedParsingAsync
(
)
;
}
}
void
BeginEvaluating
(
)
{
nsCOMPtr
<
nsIParser
>
parser
=
do_QueryReferent
(
mCreatorParser
)
;
if
(
parser
)
{
parser
-
>
IncrementScriptNestingLevel
(
)
;
}
}
void
EndEvaluating
(
)
{
nsCOMPtr
<
nsIParser
>
parser
=
do_QueryReferent
(
mCreatorParser
)
;
if
(
parser
)
{
parser
-
>
DecrementScriptNestingLevel
(
)
;
}
}
already_AddRefed
<
nsIParser
>
GetCreatorParser
(
)
{
nsCOMPtr
<
nsIParser
>
parser
=
do_QueryReferent
(
mCreatorParser
)
;
return
parser
.
forget
(
)
;
}
bool
AttemptToExecute
(
)
{
mDoneAddingChildren
=
true
;
bool
block
=
MaybeProcessScript
(
)
;
if
(
!
mAlreadyStarted
)
{
LoseParserInsertedness
(
)
;
}
return
block
;
}
virtual
mozilla
:
:
CORSMode
GetCORSMode
(
)
const
{
return
mozilla
:
:
CORS_NONE
;
}
virtual
mozilla
:
:
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
{
return
mozilla
:
:
net
:
:
RP_Unset
;
}
virtual
nsresult
FireErrorEvent
(
)
=
0
;
protected
:
virtual
bool
MaybeProcessScript
(
)
=
0
;
virtual
bool
GetAsyncState
(
)
=
0
;
uint32_t
mLineNumber
;
uint32_t
mColumnNumber
;
bool
mAlreadyStarted
;
bool
mMalformed
;
bool
mDoneAddingChildren
;
bool
mForceAsync
;
bool
mFrozen
;
bool
mIsModule
;
bool
mDefer
;
bool
mAsync
;
bool
mExternal
;
mozilla
:
:
dom
:
:
FromParser
mParserCreated
;
nsCOMPtr
<
nsIURI
>
mUri
;
nsCOMPtr
<
nsIPrincipal
>
mSrcTriggeringPrincipal
;
nsWeakPtr
mCreatorParser
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIScriptElement
NS_ISCRIPTELEMENT_IID
)
#
endif
