#
ifndef
mozilla_dom_ScriptLoadRequest_h
#
define
mozilla_dom_ScriptLoadRequest_h
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIScriptElement
.
h
"
class
nsICacheInfoChannel
;
namespace
mozilla
{
namespace
dom
{
class
ModuleLoadRequest
;
class
ScriptLoadRequestList
;
enum
class
ScriptKind
{
Classic
Module
}
;
enum
class
ValidJSVersion
:
bool
{
Invalid
Valid
}
;
class
ScriptLoadRequest
:
public
nsISupports
private
mozilla
:
:
LinkedListElement
<
ScriptLoadRequest
>
{
typedef
LinkedListElement
<
ScriptLoadRequest
>
super
;
friend
class
mozilla
:
:
LinkedListElement
<
ScriptLoadRequest
>
;
friend
class
ScriptLoadRequestList
;
protected
:
virtual
~
ScriptLoadRequest
(
)
;
public
:
ScriptLoadRequest
(
ScriptKind
aKind
nsIScriptElement
*
aElement
ValidJSVersion
aValidJSVersion
mozilla
:
:
CORSMode
aCORSMode
const
mozilla
:
:
dom
:
:
SRIMetadata
&
aIntegrity
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ScriptLoadRequest
)
bool
IsModuleRequest
(
)
const
{
return
mKind
=
=
ScriptKind
:
:
Module
;
}
ModuleLoadRequest
*
AsModuleRequest
(
)
;
void
FireScriptAvailable
(
nsresult
aResult
)
{
mElement
-
>
ScriptAvailable
(
aResult
mElement
mIsInline
mURI
mLineNo
)
;
}
void
FireScriptEvaluated
(
nsresult
aResult
)
{
mElement
-
>
ScriptEvaluated
(
aResult
mElement
mIsInline
)
;
}
bool
IsPreload
(
)
{
return
mElement
=
=
nullptr
;
}
virtual
void
Cancel
(
)
;
bool
IsCanceled
(
)
const
{
return
mIsCanceled
;
}
virtual
void
SetReady
(
)
;
void
*
*
OffThreadTokenPtr
(
)
{
return
mOffThreadToken
?
&
mOffThreadToken
:
nullptr
;
}
bool
IsTracking
(
)
const
{
return
mIsTracking
;
}
void
SetIsTracking
(
)
{
MOZ_ASSERT
(
!
mIsTracking
)
;
mIsTracking
=
true
;
}
enum
class
Progress
:
uint8_t
{
Loading
Loading_Source
Compiling
FetchingImports
Ready
}
;
bool
IsReadyToRun
(
)
const
{
return
mProgress
=
=
Progress
:
:
Ready
;
}
bool
IsLoading
(
)
const
{
return
mProgress
=
=
Progress
:
:
Loading
|
|
mProgress
=
=
Progress
:
:
Loading_Source
;
}
bool
IsLoadingSource
(
)
const
{
return
mProgress
=
=
Progress
:
:
Loading_Source
;
}
bool
InCompilingStage
(
)
const
{
return
mProgress
=
=
Progress
:
:
Compiling
|
|
(
IsReadyToRun
(
)
&
&
mWasCompiledOMT
)
;
}
enum
class
DataType
:
uint8_t
{
Unknown
Source
Bytecode
}
;
bool
IsUnknownDataType
(
)
const
{
return
mDataType
=
=
DataType
:
:
Unknown
;
}
bool
IsSource
(
)
const
{
return
mDataType
=
=
DataType
:
:
Source
;
}
bool
IsBytecode
(
)
const
{
return
mDataType
=
=
DataType
:
:
Bytecode
;
}
void
MaybeCancelOffThreadScript
(
)
;
void
DropBytecodeCacheReferences
(
)
;
using
super
:
:
getNext
;
using
super
:
:
isInList
;
const
ScriptKind
mKind
;
nsCOMPtr
<
nsIScriptElement
>
mElement
;
bool
mScriptFromHead
;
Progress
mProgress
;
DataType
mDataType
;
bool
mIsInline
;
bool
mHasSourceMapURL
;
bool
mIsDefer
;
bool
mIsAsync
;
bool
mPreloadAsAsync
;
bool
mPreloadAsDefer
;
bool
mIsNonAsyncScriptInserted
;
bool
mIsXSLT
;
bool
mIsCanceled
;
bool
mWasCompiledOMT
;
bool
mIsTracking
;
void
*
mOffThreadToken
;
nsString
mSourceMapURL
;
JS
:
:
Heap
<
JSScript
*
>
mScript
;
mozilla
:
:
Vector
<
char16_t
>
mScriptText
;
mozilla
:
:
Vector
<
uint8_t
>
mScriptBytecode
;
uint32_t
mBytecodeOffset
;
ValidJSVersion
mValidJSVersion
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mOriginPrincipal
;
nsAutoCString
mURL
;
int32_t
mLineNo
;
const
mozilla
:
:
CORSMode
mCORSMode
;
const
mozilla
:
:
dom
:
:
SRIMetadata
mIntegrity
;
mozilla
:
:
net
:
:
ReferrerPolicy
mReferrerPolicy
;
nsCOMPtr
<
nsICacheInfoChannel
>
mCacheInfo
;
}
;
class
ScriptLoadRequestList
:
private
mozilla
:
:
LinkedList
<
ScriptLoadRequest
>
{
typedef
mozilla
:
:
LinkedList
<
ScriptLoadRequest
>
super
;
public
:
~
ScriptLoadRequestList
(
)
;
void
Clear
(
)
;
#
ifdef
DEBUG
bool
Contains
(
ScriptLoadRequest
*
aElem
)
const
;
#
endif
using
super
:
:
getFirst
;
using
super
:
:
isEmpty
;
void
AppendElement
(
ScriptLoadRequest
*
aElem
)
{
MOZ_ASSERT
(
!
aElem
-
>
isInList
(
)
)
;
NS_ADDREF
(
aElem
)
;
insertBack
(
aElem
)
;
}
MOZ_MUST_USE
already_AddRefed
<
ScriptLoadRequest
>
Steal
(
ScriptLoadRequest
*
aElem
)
{
aElem
-
>
removeFrom
(
*
this
)
;
return
dont_AddRef
(
aElem
)
;
}
MOZ_MUST_USE
already_AddRefed
<
ScriptLoadRequest
>
StealFirst
(
)
{
MOZ_ASSERT
(
!
isEmpty
(
)
)
;
return
Steal
(
getFirst
(
)
)
;
}
void
Remove
(
ScriptLoadRequest
*
aElem
)
{
aElem
-
>
removeFrom
(
*
this
)
;
NS_RELEASE
(
aElem
)
;
}
}
;
void
ImplCycleCollectionUnlink
(
ScriptLoadRequestList
&
aField
)
;
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
ScriptLoadRequestList
&
aField
const
char
*
aName
uint32_t
aFlags
)
;
}
}
#
endif
