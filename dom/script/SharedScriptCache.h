#
ifndef
mozilla_dom_SharedScriptCache_h
#
define
mozilla_dom_SharedScriptCache_h
#
include
"
PLDHashTable
.
h
"
#
include
"
js
/
loader
/
LoadedScript
.
h
"
#
include
"
js
/
loader
/
ScriptKind
.
h
"
#
include
"
js
/
loader
/
ScriptLoadRequest
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
SharedSubResourceCache
.
h
"
#
include
"
mozilla
/
dom
/
CacheExpirationTime
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ScriptLoader
;
class
ScriptLoadData
;
class
ScriptHashKey
:
public
PLDHashEntryHdr
{
public
:
using
KeyType
=
const
ScriptHashKey
&
;
using
KeyTypePointer
=
const
ScriptHashKey
*
;
explicit
ScriptHashKey
(
const
ScriptHashKey
&
aKey
)
:
PLDHashEntryHdr
(
)
mURI
(
aKey
.
mURI
)
mPrincipal
(
aKey
.
mPrincipal
)
mLoaderPrincipal
(
aKey
.
mLoaderPrincipal
)
mPartitionPrincipal
(
aKey
.
mPartitionPrincipal
)
mCORSMode
(
aKey
.
mCORSMode
)
mSRIMetadata
(
aKey
.
mSRIMetadata
)
mKind
(
aKey
.
mKind
)
mNonce
(
aKey
.
mNonce
)
mHintCharset
(
aKey
.
mHintCharset
)
mIsLinkRelPreload
(
aKey
.
mIsLinkRelPreload
)
{
MOZ_COUNT_CTOR
(
ScriptHashKey
)
;
}
explicit
ScriptHashKey
(
const
ScriptHashKey
*
aKey
)
:
ScriptHashKey
(
*
aKey
)
{
}
ScriptHashKey
(
ScriptHashKey
&
&
aKey
)
:
PLDHashEntryHdr
(
)
mURI
(
std
:
:
move
(
aKey
.
mURI
)
)
mPrincipal
(
std
:
:
move
(
aKey
.
mPrincipal
)
)
mLoaderPrincipal
(
std
:
:
move
(
aKey
.
mLoaderPrincipal
)
)
mPartitionPrincipal
(
std
:
:
move
(
aKey
.
mPartitionPrincipal
)
)
mCORSMode
(
std
:
:
move
(
aKey
.
mCORSMode
)
)
mSRIMetadata
(
std
:
:
move
(
aKey
.
mSRIMetadata
)
)
mKind
(
std
:
:
move
(
aKey
.
mKind
)
)
mNonce
(
std
:
:
move
(
aKey
.
mNonce
)
)
mHintCharset
(
std
:
:
move
(
aKey
.
mHintCharset
)
)
mIsLinkRelPreload
(
std
:
:
move
(
aKey
.
mIsLinkRelPreload
)
)
{
MOZ_COUNT_CTOR
(
ScriptHashKey
)
;
}
ScriptHashKey
(
ScriptLoader
*
aLoader
const
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
)
;
explicit
ScriptHashKey
(
const
ScriptLoadData
&
aLoadData
)
;
MOZ_COUNTED_DTOR
(
ScriptHashKey
)
const
ScriptHashKey
&
GetKey
(
)
const
{
return
*
this
;
}
const
ScriptHashKey
*
GetKeyPointer
(
)
const
{
return
this
;
}
bool
KeyEquals
(
const
ScriptHashKey
*
aKey
)
const
{
return
KeyEquals
(
*
aKey
)
;
}
bool
KeyEquals
(
const
ScriptHashKey
&
)
const
;
static
const
ScriptHashKey
*
KeyToPointer
(
const
ScriptHashKey
&
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
const
ScriptHashKey
*
aKey
)
{
return
nsURIHashKey
:
:
HashKey
(
aKey
-
>
mURI
)
;
}
nsIPrincipal
*
Principal
(
)
const
{
return
mPrincipal
;
}
nsIPrincipal
*
LoaderPrincipal
(
)
const
{
return
mLoaderPrincipal
;
}
nsIPrincipal
*
PartitionPrincipal
(
)
const
{
return
mPartitionPrincipal
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
protected
:
const
nsCOMPtr
<
nsIURI
>
mURI
;
const
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
const
nsCOMPtr
<
nsIPrincipal
>
mLoaderPrincipal
;
const
nsCOMPtr
<
nsIPrincipal
>
mPartitionPrincipal
;
const
CORSMode
mCORSMode
;
const
SRIMetadata
mSRIMetadata
;
const
JS
:
:
loader
:
:
ScriptKind
mKind
;
const
nsString
mNonce
;
nsString
mHintCharset
;
const
bool
mIsLinkRelPreload
;
}
;
class
ScriptLoadData
final
:
public
SupportsWeakPtr
public
nsISupports
public
SharedSubResourceCacheLoadingValueBase
<
ScriptLoadData
>
{
protected
:
virtual
~
ScriptLoadData
(
)
{
}
public
:
ScriptLoadData
(
ScriptLoader
*
aLoader
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
)
;
NS_DECL_ISUPPORTS
bool
IsLoading
(
)
const
override
{
return
false
;
}
bool
IsCancelled
(
)
const
override
{
return
false
;
}
bool
IsSyncLoad
(
)
const
override
{
return
true
;
}
void
StartLoading
(
)
override
{
}
void
SetLoadCompleted
(
)
override
{
}
void
OnCoalescedTo
(
const
ScriptLoadData
&
aExistingLoad
)
override
{
}
void
Cancel
(
)
override
{
}
void
DidCancelLoad
(
)
{
}
bool
ShouldDefer
(
)
const
{
return
false
;
}
JS
:
:
loader
:
:
LoadedScript
*
ValueForCache
(
)
const
{
return
mLoadedScript
.
get
(
)
;
}
const
CacheExpirationTime
&
ExpirationTime
(
)
const
{
return
mExpirationTime
;
}
ScriptLoader
&
Loader
(
)
{
return
*
mLoader
;
}
const
ScriptHashKey
&
CacheKey
(
)
const
{
return
mKey
;
}
private
:
CacheExpirationTime
mExpirationTime
=
CacheExpirationTime
:
:
Never
(
)
;
ScriptLoader
*
mLoader
;
ScriptHashKey
mKey
;
RefPtr
<
JS
:
:
loader
:
:
LoadedScript
>
mLoadedScript
;
}
;
struct
SharedScriptCacheTraits
{
using
Loader
=
ScriptLoader
;
using
Key
=
ScriptHashKey
;
using
Value
=
JS
:
:
loader
:
:
LoadedScript
;
using
LoadingValue
=
ScriptLoadData
;
static
ScriptHashKey
KeyFromLoadingValue
(
const
LoadingValue
&
aValue
)
{
return
ScriptHashKey
(
aValue
)
;
}
}
;
class
SharedScriptCache
final
:
public
SharedSubResourceCache
<
SharedScriptCacheTraits
SharedScriptCache
>
public
nsIMemoryReporter
public
nsIObserver
{
public
:
using
Base
=
SharedSubResourceCache
<
SharedScriptCacheTraits
SharedScriptCache
>
;
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
NS_DECL_NSIOBSERVER
SharedScriptCache
(
)
;
void
Init
(
)
;
static
void
LoadCompleted
(
SharedScriptCache
*
ScriptLoadData
&
)
;
using
Base
:
:
LoadCompleted
;
static
void
Clear
(
nsIPrincipal
*
aForPrincipal
=
nullptr
const
nsACString
*
aBaseDomain
=
nullptr
)
;
protected
:
~
SharedScriptCache
(
)
;
}
;
}
}
#
endif
