#
ifndef
mozilla_dom_ScriptTrace_h
#
define
mozilla_dom_ScriptTrace_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
script
{
#
define
TRACE_FOR_TEST
(
elem
str
)
\
PR_BEGIN_MACRO
\
nsresult
rv
=
NS_OK
;
\
rv
=
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
elem
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
NS_ENSURE_SUCCESS
(
rv
rv
)
;
\
PR_END_MACRO
#
define
TRACE_FOR_TEST_BOOL
(
elem
str
)
\
PR_BEGIN_MACRO
\
nsresult
rv
=
NS_OK
;
\
rv
=
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
elem
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
NS_ENSURE_SUCCESS
(
rv
false
)
;
\
PR_END_MACRO
#
define
TRACE_FOR_TEST_NONE
(
elem
str
)
\
PR_BEGIN_MACRO
\
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
elem
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
PR_END_MACRO
static
nsresult
TestingDispatchEvent
(
nsIScriptElement
*
aScriptElement
const
nsAString
&
aEventType
)
{
if
(
!
StaticPrefs
:
:
dom_expose_test_interfaces
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsINode
>
target
(
do_QueryInterface
(
aScriptElement
)
)
;
if
(
!
target
)
{
return
NS_OK
;
}
RefPtr
<
AsyncEventDispatcher
>
dispatcher
=
new
AsyncEventDispatcher
(
target
aEventType
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eNo
)
;
return
dispatcher
-
>
PostDOMEvent
(
)
;
}
}
}
}
#
endif
