#
ifndef
mozilla_dom_ScriptTrace_h
#
define
mozilla_dom_ScriptTrace_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
js
/
loader
/
ScriptLoadRequest
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoadContext
.
h
"
#
define
TRACE_FOR_TEST
(
request
str
)
\
PR_BEGIN_MACRO
\
nsresult
rv
=
NS_OK
;
\
rv
=
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
request
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
NS_ENSURE_SUCCESS
(
rv
rv
)
;
\
PR_END_MACRO
#
define
TRACE_FOR_TEST_BOOL
(
request
str
)
\
PR_BEGIN_MACRO
\
nsresult
rv
=
NS_OK
;
\
rv
=
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
request
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
NS_ENSURE_SUCCESS
(
rv
false
)
;
\
PR_END_MACRO
#
define
TRACE_FOR_TEST_NONE
(
request
str
)
\
PR_BEGIN_MACRO
\
mozilla
:
:
dom
:
:
script
:
:
TestingDispatchEvent
(
\
request
NS_LITERAL_STRING_FROM_CSTRING
(
str
)
)
;
\
PR_END_MACRO
namespace
mozilla
:
:
dom
:
:
script
{
static
nsresult
TestingDispatchEvent
(
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
const
nsAString
&
aEventType
)
{
if
(
!
StaticPrefs
:
:
dom_expose_test_interfaces
(
)
)
{
return
NS_OK
;
}
nsIScriptElement
*
scriptElement
=
aRequest
-
>
GetScriptLoadContext
(
)
-
>
GetScriptElement
(
)
;
nsCOMPtr
<
nsINode
>
target
(
do_QueryInterface
(
scriptElement
)
)
;
if
(
!
target
)
{
return
NS_OK
;
}
RefPtr
<
AsyncEventDispatcher
>
dispatcher
=
new
AsyncEventDispatcher
(
target
aEventType
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eNo
)
;
return
dispatcher
-
>
PostDOMEvent
(
)
;
}
}
#
endif
