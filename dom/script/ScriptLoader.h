#
ifndef
mozilla_dom_ScriptLoader_h
#
define
mozilla_dom_ScriptLoader_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
nsIScriptElement
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsICacheInfoChannel
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIIncrementalStreamLoader
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoadRequest
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
dom
/
SRICheck
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
class
nsIURI
;
namespace
JS
{
class
SourceBufferHolder
;
}
namespace
mozilla
{
namespace
dom
{
class
AutoJSAPI
;
class
ModuleLoadRequest
;
class
ModuleScript
;
class
ScriptLoadHandler
;
class
ScriptRequestProcessor
;
class
ScriptLoader
final
:
public
nsISupports
{
class
MOZ_STACK_CLASS
AutoCurrentScriptUpdater
{
public
:
AutoCurrentScriptUpdater
(
ScriptLoader
*
aScriptLoader
nsIScriptElement
*
aCurrentScript
)
:
mOldScript
(
aScriptLoader
-
>
mCurrentScript
)
mScriptLoader
(
aScriptLoader
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aCurrentScript
)
;
mScriptLoader
-
>
mCurrentScript
=
node
&
&
!
node
-
>
IsInShadowTree
(
)
?
aCurrentScript
:
nullptr
;
}
~
AutoCurrentScriptUpdater
(
)
{
mScriptLoader
-
>
mCurrentScript
.
swap
(
mOldScript
)
;
}
private
:
nsCOMPtr
<
nsIScriptElement
>
mOldScript
;
ScriptLoader
*
mScriptLoader
;
}
;
friend
class
ModuleLoadRequest
;
friend
class
ScriptRequestProcessor
;
friend
class
ScriptLoadHandler
;
friend
class
AutoCurrentScriptUpdater
;
public
:
explicit
ScriptLoader
(
nsIDocument
*
aDocument
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ScriptLoader
)
void
DropDocumentReference
(
)
{
mDocument
=
nullptr
;
}
nsresult
AddObserver
(
nsIScriptLoaderObserver
*
aObserver
)
{
return
mObservers
.
AppendObject
(
aObserver
)
?
NS_OK
:
NS_ERROR_OUT_OF_MEMORY
;
}
void
RemoveObserver
(
nsIScriptLoaderObserver
*
aObserver
)
{
mObservers
.
RemoveObject
(
aObserver
)
;
}
bool
ProcessScriptElement
(
nsIScriptElement
*
aElement
)
;
nsIScriptElement
*
GetCurrentScript
(
)
{
return
mCurrentScript
;
}
nsIScriptElement
*
GetCurrentParserInsertedScript
(
)
{
return
mCurrentParserInsertedScript
;
}
bool
GetEnabled
(
)
{
return
mEnabled
;
}
void
SetEnabled
(
bool
aEnabled
)
{
if
(
!
mEnabled
&
&
aEnabled
)
{
ProcessPendingRequestsAsync
(
)
;
}
mEnabled
=
aEnabled
;
}
void
AddParserBlockingScriptExecutionBlocker
(
)
{
+
+
mParserBlockingBlockerCount
;
}
void
RemoveParserBlockingScriptExecutionBlocker
(
)
{
if
(
!
-
-
mParserBlockingBlockerCount
&
&
ReadyToExecuteScripts
(
)
)
{
ProcessPendingRequestsAsync
(
)
;
}
}
void
AddExecuteBlocker
(
)
{
+
+
mBlockerCount
;
}
void
RemoveExecuteBlocker
(
)
{
MOZ_ASSERT
(
mBlockerCount
)
;
if
(
!
-
-
mBlockerCount
)
{
ProcessPendingRequestsAsync
(
)
;
}
}
static
nsresult
ConvertToUTF16
(
nsIChannel
*
aChannel
const
uint8_t
*
aData
uint32_t
aLength
const
nsAString
&
aHintCharset
nsIDocument
*
aDocument
char16_t
*
&
aBufOut
size_t
&
aLengthOut
)
;
static
inline
nsresult
ConvertToUTF16
(
nsIChannel
*
aChannel
const
uint8_t
*
aData
uint32_t
aLength
const
nsAString
&
aHintCharset
nsIDocument
*
aDocument
JS
:
:
UniqueTwoByteChars
&
aBufOut
size_t
&
aLengthOut
)
{
char16_t
*
bufOut
;
nsresult
rv
=
ConvertToUTF16
(
aChannel
aData
aLength
aHintCharset
aDocument
bufOut
aLengthOut
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aBufOut
.
reset
(
bufOut
)
;
}
return
rv
;
}
;
nsresult
OnStreamComplete
(
nsIIncrementalStreamLoader
*
aLoader
ScriptLoadRequest
*
aRequest
nsresult
aChannelStatus
nsresult
aSRIStatus
SRICheckDataVerifier
*
aSRIDataVerifier
)
;
bool
HasPendingRequests
(
)
;
void
ProcessPendingRequests
(
)
;
void
BeginDeferringScripts
(
)
{
mDeferEnabled
=
true
;
if
(
mDocument
)
{
mDocument
-
>
BlockOnload
(
)
;
}
}
void
ParsingComplete
(
bool
aTerminated
)
;
uint32_t
HasPendingOrCurrentScripts
(
)
{
return
mCurrentScript
|
|
mParserBlockingRequest
;
}
virtual
void
PreloadURI
(
nsIURI
*
aURI
const
nsAString
&
aCharset
const
nsAString
&
aType
const
nsAString
&
aCrossOrigin
const
nsAString
&
aIntegrity
bool
aScriptFromHead
bool
aAsync
bool
aDefer
bool
aNoModule
const
mozilla
:
:
net
:
:
ReferrerPolicy
aReferrerPolicy
)
;
nsresult
ProcessOffThreadRequest
(
ScriptLoadRequest
*
aRequest
)
;
bool
AddPendingChildLoader
(
ScriptLoader
*
aChild
)
{
return
mPendingChildLoaders
.
AppendElement
(
aChild
)
!
=
nullptr
;
}
mozilla
:
:
dom
:
:
DocGroup
*
GetDocGroup
(
)
const
{
return
mDocument
-
>
GetDocGroup
(
)
;
}
void
LoadEventFired
(
)
;
void
Destroy
(
)
{
GiveUpBytecodeEncoding
(
)
;
}
private
:
virtual
~
ScriptLoader
(
)
;
ScriptLoadRequest
*
CreateLoadRequest
(
ScriptKind
aKind
nsIURI
*
aURI
nsIScriptElement
*
aElement
nsIPrincipal
*
aTriggeringPrincipal
mozilla
:
:
CORSMode
aCORSMode
const
SRIMetadata
&
aIntegrity
mozilla
:
:
net
:
:
ReferrerPolicy
aReferrerPolicy
)
;
void
UnblockParser
(
ScriptLoadRequest
*
aParserBlockingRequest
)
;
void
ContinueParserAsync
(
ScriptLoadRequest
*
aParserBlockingRequest
)
;
bool
ProcessExternalScript
(
nsIScriptElement
*
aElement
ScriptKind
aScriptKind
nsAutoString
aTypeAttr
nsIContent
*
aScriptContent
)
;
bool
ProcessInlineScript
(
nsIScriptElement
*
aElement
ScriptKind
aScriptKind
)
;
ScriptLoadRequest
*
LookupPreloadRequest
(
nsIScriptElement
*
aElement
ScriptKind
aScriptKind
)
;
void
GetSRIMetadata
(
const
nsAString
&
aIntegrityAttr
SRIMetadata
*
aMetadataOut
)
;
static
nsresult
CheckContentPolicy
(
nsIDocument
*
aDocument
nsISupports
*
aContext
nsIURI
*
aURI
const
nsAString
&
aType
bool
aIsPreLoad
)
;
nsresult
StartLoad
(
ScriptLoadRequest
*
aRequest
)
;
nsresult
RestartLoad
(
ScriptLoadRequest
*
aRequest
)
;
void
HandleLoadError
(
ScriptLoadRequest
*
aRequest
nsresult
aResult
)
;
static
bool
BinASTEncodingEnabled
(
)
{
#
ifdef
JS_BUILD_BINAST
return
StaticPrefs
:
:
dom_script_loader_binast_encoding_enabled
(
)
;
#
else
return
false
;
#
endif
}
virtual
void
ProcessPendingRequestsAsync
(
)
;
bool
ReadyToExecuteParserBlockingScripts
(
)
;
bool
SelfReadyToExecuteParserBlockingScripts
(
)
{
return
ReadyToExecuteScripts
(
)
&
&
!
mParserBlockingBlockerCount
;
}
bool
ReadyToExecuteScripts
(
)
{
return
mEnabled
&
&
!
mBlockerCount
;
}
nsresult
VerifySRI
(
ScriptLoadRequest
*
aRequest
nsIIncrementalStreamLoader
*
aLoader
nsresult
aSRIStatus
SRICheckDataVerifier
*
aSRIDataVerifier
)
const
;
nsresult
SaveSRIHash
(
ScriptLoadRequest
*
aRequest
SRICheckDataVerifier
*
aSRIDataVerifier
)
const
;
void
ReportErrorToConsole
(
ScriptLoadRequest
*
aRequest
nsresult
aResult
)
const
;
nsresult
AttemptAsyncScriptCompile
(
ScriptLoadRequest
*
aRequest
bool
*
aCouldCompileOut
)
;
nsresult
ProcessRequest
(
ScriptLoadRequest
*
aRequest
)
;
nsresult
CompileOffThreadOrProcessRequest
(
ScriptLoadRequest
*
aRequest
)
;
void
FireScriptAvailable
(
nsresult
aResult
ScriptLoadRequest
*
aRequest
)
;
void
FireScriptEvaluated
(
nsresult
aResult
ScriptLoadRequest
*
aRequest
)
;
nsresult
EvaluateScript
(
ScriptLoadRequest
*
aRequest
)
;
void
RegisterForBytecodeEncoding
(
ScriptLoadRequest
*
aRequest
)
;
void
MaybeTriggerBytecodeEncoding
(
)
;
void
EncodeBytecode
(
)
;
void
EncodeRequestBytecode
(
JSContext
*
aCx
ScriptLoadRequest
*
aRequest
)
;
void
GiveUpBytecodeEncoding
(
)
;
already_AddRefed
<
nsIScriptGlobalObject
>
GetScriptGlobalObject
(
)
;
nsresult
FillCompileOptionsForRequest
(
const
mozilla
:
:
dom
:
:
AutoJSAPI
&
jsapi
ScriptLoadRequest
*
aRequest
JS
:
:
Handle
<
JSObject
*
>
aScopeChain
JS
:
:
CompileOptions
*
aOptions
)
;
uint32_t
NumberOfProcessors
(
)
;
nsresult
PrepareLoadedRequest
(
ScriptLoadRequest
*
aRequest
nsIIncrementalStreamLoader
*
aLoader
nsresult
aStatus
)
;
void
AddDeferRequest
(
ScriptLoadRequest
*
aRequest
)
;
void
AddAsyncRequest
(
ScriptLoadRequest
*
aRequest
)
;
bool
MaybeRemovedDeferRequests
(
)
;
void
MaybeMoveToLoadedList
(
ScriptLoadRequest
*
aRequest
)
;
mozilla
:
:
Maybe
<
JS
:
:
SourceBufferHolder
>
GetScriptSource
(
JSContext
*
aCx
ScriptLoadRequest
*
aRequest
)
;
void
SetModuleFetchStarted
(
ModuleLoadRequest
*
aRequest
)
;
void
SetModuleFetchFinishedAndResumeWaitingRequests
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
bool
IsFetchingModule
(
ModuleLoadRequest
*
aRequest
)
const
;
bool
ModuleMapContainsURL
(
nsIURI
*
aURL
)
const
;
RefPtr
<
mozilla
:
:
GenericPromise
>
WaitForModuleFetch
(
nsIURI
*
aURL
)
;
ModuleScript
*
GetFetchedModule
(
nsIURI
*
aURL
)
const
;
friend
JSScript
*
HostResolveImportedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JSScript
*
>
aScript
JS
:
:
Handle
<
JSString
*
>
aSpecifier
)
;
static
bool
ShouldCacheBytecode
(
ScriptLoadRequest
*
aRequest
)
;
nsresult
CreateModuleScript
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
ProcessFetchedModuleSource
(
ModuleLoadRequest
*
aRequest
)
;
void
CheckModuleDependenciesLoaded
(
ModuleLoadRequest
*
aRequest
)
;
void
ProcessLoadedModuleTree
(
ModuleLoadRequest
*
aRequest
)
;
bool
InstantiateModuleTree
(
ModuleLoadRequest
*
aRequest
)
;
JS
:
:
Value
FindFirstParseError
(
ModuleLoadRequest
*
aRequest
)
;
void
StartFetchingModuleDependencies
(
ModuleLoadRequest
*
aRequest
)
;
RefPtr
<
mozilla
:
:
GenericPromise
>
StartFetchingModuleAndDependencies
(
ModuleLoadRequest
*
aParent
nsIURI
*
aURI
)
;
nsresult
AssociateSourceElementsForModuleTree
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
)
;
nsIDocument
*
mDocument
;
nsCOMArray
<
nsIScriptLoaderObserver
>
mObservers
;
ScriptLoadRequestList
mNonAsyncExternalScriptInsertedRequests
;
ScriptLoadRequestList
mLoadingAsyncRequests
;
ScriptLoadRequestList
mLoadedAsyncRequests
;
ScriptLoadRequestList
mDeferRequests
;
ScriptLoadRequestList
mXSLTRequests
;
RefPtr
<
ScriptLoadRequest
>
mParserBlockingRequest
;
ScriptLoadRequestList
mBytecodeEncodingQueue
;
struct
PreloadInfo
{
RefPtr
<
ScriptLoadRequest
>
mRequest
;
nsString
mCharset
;
}
;
friend
void
ImplCycleCollectionUnlink
(
ScriptLoader
:
:
PreloadInfo
&
aField
)
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
ScriptLoader
:
:
PreloadInfo
&
aField
const
char
*
aName
uint32_t
aFlags
)
;
struct
PreloadRequestComparator
{
bool
Equals
(
const
PreloadInfo
&
aPi
ScriptLoadRequest
*
const
&
aRequest
)
const
{
return
aRequest
=
=
aPi
.
mRequest
;
}
}
;
struct
PreloadURIComparator
{
bool
Equals
(
const
PreloadInfo
&
aPi
nsIURI
*
const
&
aURI
)
const
;
}
;
nsTArray
<
PreloadInfo
>
mPreloads
;
nsCOMPtr
<
nsIScriptElement
>
mCurrentScript
;
nsCOMPtr
<
nsIScriptElement
>
mCurrentParserInsertedScript
;
nsTArray
<
RefPtr
<
ScriptLoader
>
>
mPendingChildLoaders
;
uint32_t
mParserBlockingBlockerCount
;
uint32_t
mBlockerCount
;
uint32_t
mNumberOfProcessors
;
bool
mEnabled
;
bool
mDeferEnabled
;
bool
mDocumentParsingDone
;
bool
mBlockingDOMContentLoaded
;
bool
mLoadEventFired
;
bool
mGiveUpEncoding
;
nsRefPtrHashtable
<
nsURIHashKey
mozilla
:
:
GenericPromise
:
:
Private
>
mFetchingModules
;
nsRefPtrHashtable
<
nsURIHashKey
ModuleScript
>
mFetchedModules
;
nsCOMPtr
<
nsIConsoleReportCollector
>
mReporter
;
static
LazyLogModule
gCspPRLog
;
static
LazyLogModule
gScriptLoaderLog
;
}
;
class
nsAutoScriptLoaderDisabler
{
public
:
explicit
nsAutoScriptLoaderDisabler
(
nsIDocument
*
aDoc
)
{
mLoader
=
aDoc
-
>
ScriptLoader
(
)
;
mWasEnabled
=
mLoader
-
>
GetEnabled
(
)
;
if
(
mWasEnabled
)
{
mLoader
-
>
SetEnabled
(
false
)
;
}
}
~
nsAutoScriptLoaderDisabler
(
)
{
if
(
mWasEnabled
)
{
mLoader
-
>
SetEnabled
(
true
)
;
}
}
bool
mWasEnabled
;
RefPtr
<
ScriptLoader
>
mLoader
;
}
;
}
}
#
endif
