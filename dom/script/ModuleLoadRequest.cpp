#
include
"
ModuleLoadRequest
.
h
"
#
include
"
ModuleScript
.
h
"
#
include
"
ScriptLoader
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
ModuleLoadRequest
)
NS_INTERFACE_MAP_END_INHERITING
(
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
mBaseURL
mLoader
mParent
mModuleScript
mImports
)
NS_IMPL_ADDREF_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_RELEASE_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
ModuleLoadRequest
:
:
ModuleLoadRequest
(
nsIScriptElement
*
aElement
uint32_t
aVersion
CORSMode
aCORSMode
const
SRIMetadata
&
aIntegrity
ScriptLoader
*
aLoader
)
:
ScriptLoadRequest
(
ScriptKind
:
:
Module
aElement
aVersion
aCORSMode
aIntegrity
)
mIsTopLevel
(
true
)
mLoader
(
aLoader
)
{
}
void
ModuleLoadRequest
:
:
Cancel
(
)
{
ScriptLoadRequest
:
:
Cancel
(
)
;
mModuleScript
=
nullptr
;
mProgress
=
ScriptLoadRequest
:
:
Progress
:
:
Ready
;
for
(
size_t
i
=
0
;
i
<
mImports
.
Length
(
)
;
i
+
+
)
{
mImports
[
i
]
-
>
Cancel
(
)
;
}
mReady
.
RejectIfExists
(
NS_ERROR_FAILURE
__func__
)
;
}
void
ModuleLoadRequest
:
:
SetReady
(
)
{
#
ifdef
DEBUG
for
(
size_t
i
=
0
;
i
<
mImports
.
Length
(
)
;
i
+
+
)
{
MOZ_ASSERT
(
mImports
[
i
]
-
>
IsReadyToRun
(
)
)
;
}
#
endif
ScriptLoadRequest
:
:
SetReady
(
)
;
mReady
.
ResolveIfExists
(
true
__func__
)
;
}
void
ModuleLoadRequest
:
:
ModuleLoaded
(
)
{
mModuleScript
=
mLoader
-
>
GetFetchedModule
(
mURI
)
;
mLoader
-
>
StartFetchingModuleDependencies
(
this
)
;
}
void
ModuleLoadRequest
:
:
DependenciesLoaded
(
)
{
if
(
!
mLoader
-
>
InstantiateModuleTree
(
this
)
)
{
LoadFailed
(
)
;
return
;
}
SetReady
(
)
;
mLoader
-
>
ProcessLoadedModuleTree
(
this
)
;
mLoader
=
nullptr
;
mParent
=
nullptr
;
}
void
ModuleLoadRequest
:
:
LoadFailed
(
)
{
Cancel
(
)
;
mLoader
-
>
ProcessLoadedModuleTree
(
this
)
;
mLoader
=
nullptr
;
mParent
=
nullptr
;
}
}
}
