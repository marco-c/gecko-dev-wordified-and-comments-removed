#
include
"
ModuleLoadRequest
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
LoadedScript
.
h
"
#
include
"
ScriptLoader
.
h
"
namespace
mozilla
{
namespace
dom
{
#
undef
LOG
#
define
LOG
(
args
)
\
MOZ_LOG
(
ScriptLoader
:
:
gScriptLoaderLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ModuleLoadRequest
)
NS_INTERFACE_MAP_END_INHERITING
(
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_MULTI_ZONE_JSHOLDER_CLASS
(
ModuleLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLoader
mModuleScript
mImports
)
tmp
-
>
ClearDynamicImport
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLoader
mModuleScript
mImports
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mDynamicReferencingPrivate
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mDynamicSpecifier
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mDynamicPromise
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_ADDREF_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_RELEASE_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
static
VisitedURLSet
*
NewVisitedSetForTopLevelImport
(
nsIURI
*
aURI
)
{
auto
set
=
new
VisitedURLSet
(
)
;
set
-
>
PutEntry
(
aURI
)
;
return
set
;
}
ModuleLoadRequest
*
ModuleLoadRequest
:
:
CreateTopLevel
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
const
SRIMetadata
&
aIntegrity
nsIURI
*
aReferrer
ScriptLoader
*
aLoader
)
{
return
new
ModuleLoadRequest
(
aURI
aFetchOptions
aIntegrity
aReferrer
true
false
aLoader
NewVisitedSetForTopLevelImport
(
aURI
)
)
;
}
ModuleLoadRequest
*
ModuleLoadRequest
:
:
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
{
auto
request
=
new
ModuleLoadRequest
(
aURI
aParent
-
>
mFetchOptions
SRIMetadata
(
)
aParent
-
>
mURI
false
false
aParent
-
>
mLoader
aParent
-
>
mVisitedSet
)
;
request
-
>
mIsInline
=
false
;
request
-
>
mScriptMode
=
aParent
-
>
mScriptMode
;
return
request
;
}
ModuleLoadRequest
*
ModuleLoadRequest
:
:
CreateDynamicImport
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
ScriptLoader
*
aLoader
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
{
MOZ_ASSERT
(
aSpecifier
)
;
MOZ_ASSERT
(
aPromise
)
;
auto
request
=
new
ModuleLoadRequest
(
aURI
aFetchOptions
SRIMetadata
(
)
aBaseURL
true
true
aLoader
NewVisitedSetForTopLevelImport
(
aURI
)
)
;
request
-
>
mIsInline
=
false
;
request
-
>
mScriptMode
=
ScriptMode
:
:
eAsync
;
request
-
>
mDynamicReferencingPrivate
=
aReferencingPrivate
;
request
-
>
mDynamicSpecifier
=
aSpecifier
;
request
-
>
mDynamicPromise
=
aPromise
;
HoldJSObjects
(
request
)
;
return
request
;
}
ModuleLoadRequest
:
:
ModuleLoadRequest
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
const
SRIMetadata
&
aIntegrity
nsIURI
*
aReferrer
bool
aIsTopLevel
bool
aIsDynamicImport
ScriptLoader
*
aLoader
VisitedURLSet
*
aVisitedSet
)
:
ScriptLoadRequest
(
ScriptKind
:
:
eModule
aURI
aFetchOptions
aIntegrity
aReferrer
)
mIsTopLevel
(
aIsTopLevel
)
mIsDynamicImport
(
aIsDynamicImport
)
mLoader
(
aLoader
)
mVisitedSet
(
aVisitedSet
)
{
}
void
ModuleLoadRequest
:
:
Cancel
(
)
{
ScriptLoadRequest
:
:
Cancel
(
)
;
mModuleScript
=
nullptr
;
mProgress
=
ScriptLoadRequest
:
:
Progress
:
:
eReady
;
CancelImports
(
)
;
mReady
.
RejectIfExists
(
NS_ERROR_DOM_ABORT_ERR
__func__
)
;
}
void
ModuleLoadRequest
:
:
CancelImports
(
)
{
for
(
size_t
i
=
0
;
i
<
mImports
.
Length
(
)
;
i
+
+
)
{
mImports
[
i
]
-
>
Cancel
(
)
;
}
}
void
ModuleLoadRequest
:
:
SetReady
(
)
{
#
ifdef
DEBUG
for
(
size_t
i
=
0
;
i
<
mImports
.
Length
(
)
;
i
+
+
)
{
MOZ_ASSERT
(
mImports
[
i
]
-
>
IsReadyToRun
(
)
)
;
}
#
endif
ScriptLoadRequest
:
:
SetReady
(
)
;
mReady
.
ResolveIfExists
(
true
__func__
)
;
}
void
ModuleLoadRequest
:
:
ModuleLoaded
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
loaded
"
this
)
)
;
mModuleScript
=
mLoader
-
>
GetModuleLoader
(
)
-
>
GetFetchedModule
(
mURI
GetWebExtGlobal
(
)
)
;
if
(
!
mModuleScript
|
|
mModuleScript
-
>
HasParseError
(
)
)
{
ModuleErrored
(
)
;
return
;
}
mLoader
-
>
StartFetchingModuleDependencies
(
this
)
;
}
void
ModuleLoadRequest
:
:
ModuleErrored
(
)
{
if
(
IsCanceled
(
)
)
{
return
;
}
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
errored
"
this
)
)
;
CheckModuleDependenciesLoaded
(
)
;
MOZ_ASSERT
(
!
mModuleScript
|
|
mModuleScript
-
>
HasParseError
(
)
)
;
CancelImports
(
)
;
SetReady
(
)
;
LoadFinished
(
)
;
}
void
ModuleLoadRequest
:
:
DependenciesLoaded
(
)
{
if
(
IsCanceled
(
)
)
{
return
;
}
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
dependencies
loaded
"
this
)
)
;
MOZ_ASSERT
(
mModuleScript
)
;
CheckModuleDependenciesLoaded
(
)
;
SetReady
(
)
;
LoadFinished
(
)
;
}
void
ModuleLoadRequest
:
:
CheckModuleDependenciesLoaded
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Check
dependencies
loaded
"
this
)
)
;
if
(
!
mModuleScript
|
|
mModuleScript
-
>
HasParseError
(
)
)
{
return
;
}
for
(
const
auto
&
childRequest
:
mImports
)
{
ModuleScript
*
childScript
=
childRequest
-
>
mModuleScript
;
if
(
!
childScript
)
{
mModuleScript
=
nullptr
;
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
%
p
failed
(
load
error
)
"
this
childRequest
.
get
(
)
)
)
;
return
;
}
}
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
all
ok
"
this
)
)
;
}
void
ModuleLoadRequest
:
:
LoadFailed
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
load
failed
"
this
)
)
;
MOZ_ASSERT
(
!
mModuleScript
)
;
Cancel
(
)
;
LoadFinished
(
)
;
}
void
ModuleLoadRequest
:
:
LoadFinished
(
)
{
mLoader
-
>
ProcessLoadedModuleTree
(
this
)
;
mLoader
=
nullptr
;
}
void
ModuleLoadRequest
:
:
ClearDynamicImport
(
)
{
mDynamicReferencingPrivate
=
JS
:
:
UndefinedValue
(
)
;
mDynamicSpecifier
=
nullptr
;
mDynamicPromise
=
nullptr
;
}
}
}
