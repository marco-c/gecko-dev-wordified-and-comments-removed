#
include
"
ModuleScript
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
ScriptLoader
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ModuleScript
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLoader
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mFetchOptions
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mBaseURL
)
tmp
-
>
UnlinkModuleRecord
(
)
;
tmp
-
>
mParseError
.
setUndefined
(
)
;
tmp
-
>
mErrorToRethrow
.
setUndefined
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLoader
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFetchOptions
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mModuleRecord
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mParseError
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mErrorToRethrow
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ModuleScript
)
ModuleScript
:
:
ModuleScript
(
ScriptLoader
*
aLoader
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
)
:
mLoader
(
aLoader
)
mFetchOptions
(
aFetchOptions
)
mBaseURL
(
aBaseURL
)
mSourceElementAssociated
(
false
)
{
MOZ_ASSERT
(
mLoader
)
;
MOZ_ASSERT
(
mFetchOptions
)
;
MOZ_ASSERT
(
mBaseURL
)
;
MOZ_ASSERT
(
!
mModuleRecord
)
;
MOZ_ASSERT
(
!
HasParseError
(
)
)
;
MOZ_ASSERT
(
!
HasErrorToRethrow
(
)
)
;
}
void
ModuleScript
:
:
UnlinkModuleRecord
(
)
{
if
(
mModuleRecord
)
{
MOZ_ASSERT
(
JS
:
:
GetModulePrivate
(
mModuleRecord
)
.
toPrivate
(
)
=
=
this
)
;
JS
:
:
SetModulePrivate
(
mModuleRecord
JS
:
:
UndefinedValue
(
)
)
;
mModuleRecord
=
nullptr
;
Release
(
)
;
}
}
ModuleScript
:
:
~
ModuleScript
(
)
{
UnlinkModuleRecord
(
)
;
DropJSObjects
(
this
)
;
}
void
ModuleScript
:
:
SetModuleRecord
(
JS
:
:
Handle
<
JSObject
*
>
aModuleRecord
)
{
MOZ_ASSERT
(
!
mModuleRecord
)
;
MOZ_ASSERT
(
!
HasParseError
(
)
)
;
MOZ_ASSERT
(
!
HasErrorToRethrow
(
)
)
;
mModuleRecord
=
aModuleRecord
;
JS
:
:
SetModulePrivate
(
mModuleRecord
JS
:
:
PrivateValue
(
this
)
)
;
HoldJSObjects
(
this
)
;
AddRef
(
)
;
}
void
HostFinalizeTopLevelScript
(
JSFreeOp
*
aFop
const
JS
:
:
Value
&
aPrivate
)
{
auto
script
=
static_cast
<
ModuleScript
*
>
(
aPrivate
.
toPrivate
(
)
)
;
if
(
script
)
{
MOZ_ASSERT
(
JS
:
:
GetModulePrivate
(
script
-
>
mModuleRecord
.
unbarrieredGet
(
)
)
=
=
aPrivate
)
;
script
-
>
UnlinkModuleRecord
(
)
;
}
}
void
ModuleScript
:
:
SetParseError
(
const
JS
:
:
Value
&
aError
)
{
MOZ_ASSERT
(
!
aError
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
HasParseError
(
)
)
;
MOZ_ASSERT
(
!
HasErrorToRethrow
(
)
)
;
UnlinkModuleRecord
(
)
;
mParseError
=
aError
;
HoldJSObjects
(
this
)
;
}
void
ModuleScript
:
:
SetErrorToRethrow
(
const
JS
:
:
Value
&
aError
)
{
MOZ_ASSERT
(
!
aError
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
mModuleRecord
|
|
HasParseError
(
)
)
;
mErrorToRethrow
=
aError
;
}
void
ModuleScript
:
:
SetSourceElementAssociated
(
)
{
MOZ_ASSERT
(
mModuleRecord
)
;
MOZ_ASSERT
(
!
mSourceElementAssociated
)
;
mSourceElementAssociated
=
true
;
}
}
}
