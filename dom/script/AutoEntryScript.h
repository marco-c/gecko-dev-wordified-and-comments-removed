#
ifndef
DOM_SCRIPT_AUTOENTRYSCRIPT_H_
#
define
DOM_SCRIPT_AUTOENTRYSCRIPT_H_
#
include
"
MainThreadUtils
.
h
"
#
include
"
js
/
Debug
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
JSExecutionManager
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
mozilla
/
ProfilerLabels
.
h
"
#
endif
class
nsIGlobalObject
;
class
nsIPrincipal
;
namespace
xpc
{
class
AutoScriptActivity
;
}
namespace
mozilla
:
:
dom
{
void
UseEntryScriptProfiling
(
)
;
void
UnuseEntryScriptProfiling
(
)
;
class
MOZ_STACK_CLASS
AutoEntryScript
:
public
AutoJSAPI
{
public
:
AutoEntryScript
(
nsIGlobalObject
*
aGlobalObject
const
char
*
aReason
bool
aIsMainThread
=
NS_IsMainThread
(
)
)
;
AutoEntryScript
(
JSObject
*
aObject
const
char
*
aReason
bool
aIsMainThread
=
NS_IsMainThread
(
)
)
;
~
AutoEntryScript
(
)
;
void
SetWebIDLCallerPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
mWebIDLCallerPrincipal
=
aPrincipal
;
}
private
:
class
DocshellEntryMonitor
final
:
public
JS
:
:
dbg
:
:
AutoEntryMonitor
{
public
:
DocshellEntryMonitor
(
JSContext
*
aCx
const
char
*
aReason
)
;
void
Entry
(
JSContext
*
aCx
JSFunction
*
aFunction
JS
:
:
Handle
<
JS
:
:
Value
>
aAsyncStack
const
char
*
aAsyncCause
)
override
{
Entry
(
aCx
aFunction
nullptr
aAsyncStack
aAsyncCause
)
;
}
void
Entry
(
JSContext
*
aCx
JSScript
*
aScript
JS
:
:
Handle
<
JS
:
:
Value
>
aAsyncStack
const
char
*
aAsyncCause
)
override
{
Entry
(
aCx
nullptr
aScript
aAsyncStack
aAsyncCause
)
;
}
void
Exit
(
JSContext
*
aCx
)
override
;
private
:
void
Entry
(
JSContext
*
aCx
JSFunction
*
aFunction
JSScript
*
aScript
JS
:
:
Handle
<
JS
:
:
Value
>
aAsyncStack
const
char
*
aAsyncCause
)
;
const
char
*
mReason
;
}
;
nsIPrincipal
*
MOZ_NON_OWNING_REF
mWebIDLCallerPrincipal
;
friend
nsIPrincipal
*
GetWebIDLCallerPrincipal
(
)
;
Maybe
<
DocshellEntryMonitor
>
mDocShellEntryMonitor
;
Maybe
<
xpc
:
:
AutoScriptActivity
>
mScriptActivity
;
JS
:
:
AutoHideScriptedCaller
mCallerOverride
;
#
ifdef
MOZ_GECKO_PROFILER
AutoProfilerLabel
mAutoProfilerLabel
;
#
endif
AutoRequestJSThreadExecution
mJSThreadExecution
;
}
;
}
#
endif
