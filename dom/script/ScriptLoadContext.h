#
ifndef
mozilla_dom_ScriptLoadContext_h
#
define
mozilla_dom_ScriptLoadContext_h
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MaybeOneOf
.
h
"
#
include
"
mozilla
/
PreloaderBase
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIScriptElement
.
h
"
#
include
"
ScriptKind
.
h
"
class
nsICacheInfoChannel
;
namespace
JS
{
class
OffThreadToken
;
}
namespace
mozilla
{
namespace
dom
{
class
Element
;
class
ScriptLoadRequest
;
class
ScriptLoadContext
:
public
PreloaderBase
{
protected
:
virtual
~
ScriptLoadContext
(
)
;
public
:
explicit
ScriptLoadContext
(
Element
*
aElement
nsIGlobalObject
*
aWebExtGlobal
=
nullptr
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ScriptLoadContext
)
void
SetRequest
(
ScriptLoadRequest
*
aRequest
)
;
static
void
PrioritizeAsPreload
(
nsIChannel
*
aChannel
)
;
virtual
void
PrioritizeAsPreload
(
)
override
;
bool
IsPreload
(
)
const
;
nsIGlobalObject
*
GetWebExtGlobal
(
)
const
;
bool
CompileStarted
(
)
const
;
JS
:
:
OffThreadToken
*
*
OffThreadTokenPtr
(
)
{
return
mOffThreadToken
?
&
mOffThreadToken
:
nullptr
;
}
bool
IsTracking
(
)
const
{
return
mIsTracking
;
}
void
SetIsTracking
(
)
{
MOZ_ASSERT
(
!
mIsTracking
)
;
mIsTracking
=
true
;
}
void
BlockOnload
(
Document
*
aDocument
)
;
void
MaybeUnblockOnload
(
)
;
enum
class
ScriptMode
:
uint8_t
{
eBlocking
eDeferred
eAsync
eLinkPreload
}
;
void
SetScriptMode
(
bool
aDeferAttr
bool
aAsyncAttr
bool
aLinkPreload
)
;
bool
IsLinkPreloadScript
(
)
const
{
return
mScriptMode
=
=
ScriptMode
:
:
eLinkPreload
;
}
bool
IsBlockingScript
(
)
const
{
return
mScriptMode
=
=
ScriptMode
:
:
eBlocking
;
}
bool
IsDeferredScript
(
)
const
{
return
mScriptMode
=
=
ScriptMode
:
:
eDeferred
;
}
bool
IsAsyncScript
(
)
const
{
return
mScriptMode
=
=
ScriptMode
:
:
eAsync
;
}
nsIScriptElement
*
GetScriptElement
(
)
const
;
void
SetIsPreloadRequest
(
)
{
MOZ_ASSERT
(
!
GetScriptElement
(
)
)
;
MOZ_ASSERT
(
!
IsPreload
(
)
)
;
mIsPreload
=
true
;
}
void
SetIsLoadRequest
(
nsIScriptElement
*
aElement
)
;
FromParser
GetParserCreated
(
)
const
{
nsIScriptElement
*
element
=
GetScriptElement
(
)
;
if
(
!
element
)
{
return
NOT_FROM_PARSER
;
}
return
element
-
>
GetParserCreated
(
)
;
}
void
GetProfilerLabel
(
nsACString
&
aOutString
)
;
void
MaybeCancelOffThreadScript
(
)
;
TimeStamp
mOffThreadParseStartTime
;
TimeStamp
mOffThreadParseStopTime
;
ScriptMode
mScriptMode
;
bool
mScriptFromHead
;
bool
mIsInline
;
bool
mInDeferList
;
bool
mInAsyncList
;
bool
mIsNonAsyncScriptInserted
;
bool
mIsXSLT
;
bool
mInCompilingList
;
bool
mIsTracking
;
bool
mWasCompiledOMT
;
JS
:
:
OffThreadToken
*
mOffThreadToken
;
Atomic
<
Runnable
*
>
mRunnable
;
int32_t
mLineNo
;
bool
mIsPreload
;
nsCOMPtr
<
Element
>
mElement
;
nsCOMPtr
<
nsIGlobalObject
>
mWebExtGlobal
;
RefPtr
<
ScriptLoadRequest
>
mRequest
;
RefPtr
<
Document
>
mLoadBlockedDocument
;
nsresult
mUnreportedPreloadError
;
}
;
}
}
#
endif
