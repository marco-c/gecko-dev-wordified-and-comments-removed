#
ifndef
mozilla_dom_ScriptLoadHandler_h
#
define
mozilla_dom_ScriptLoadHandler_h
#
include
"
nsIIncrementalStreamLoader
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
JS
:
:
loader
{
class
ScriptLoadRequest
;
}
namespace
mozilla
{
class
Decoder
;
namespace
dom
{
class
ScriptLoader
;
class
SRICheckDataVerifier
;
class
ScriptLoadHandler
final
:
public
nsIIncrementalStreamLoaderObserver
{
public
:
explicit
ScriptLoadHandler
(
ScriptLoader
*
aScriptLoader
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
UniquePtr
<
SRICheckDataVerifier
>
&
&
aSRIDataVerifier
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIINCREMENTALSTREAMLOADEROBSERVER
private
:
virtual
~
ScriptLoadHandler
(
)
;
template
<
typename
Unit
>
nsresult
DecodeRawDataHelper
(
const
uint8_t
*
aData
uint32_t
aDataLength
bool
aEndOfStream
)
;
nsresult
DecodeRawData
(
const
uint8_t
*
aData
uint32_t
aDataLength
bool
aEndOfStream
)
;
bool
EnsureDecoder
(
nsIIncrementalStreamLoader
*
aLoader
const
uint8_t
*
aData
uint32_t
aDataLength
bool
aEndOfStream
)
{
if
(
mDecoder
)
{
return
true
;
}
return
TrySetDecoder
(
aLoader
aData
aDataLength
aEndOfStream
)
;
}
bool
TrySetDecoder
(
nsIIncrementalStreamLoader
*
aLoader
const
uint8_t
*
aData
uint32_t
aDataLength
bool
aEndOfStream
)
;
nsresult
MaybeDecodeSRI
(
uint32_t
*
sriLength
)
;
nsresult
EnsureKnownDataType
(
nsIIncrementalStreamLoader
*
aLoader
)
;
RefPtr
<
ScriptLoader
>
mScriptLoader
;
RefPtr
<
JS
:
:
loader
:
:
ScriptLoadRequest
>
mRequest
;
UniquePtr
<
SRICheckDataVerifier
>
mSRIDataVerifier
;
nsresult
mSRIStatus
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
Decoder
>
mDecoder
;
bool
mPreloadStartNotified
=
false
;
}
;
}
}
#
endif
