#
ifndef
mozilla_dom_ModuleLoadRequest_h
#
define
mozilla_dom_ModuleLoadRequest_h
#
include
"
ScriptLoadRequest
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ModuleScript
;
class
ModuleLoader
;
class
ScriptLoader
;
class
VisitedURLSet
:
public
nsTHashtable
<
nsURIHashKey
>
{
NS_INLINE_DECL_REFCOUNTING
(
VisitedURLSet
)
private
:
~
VisitedURLSet
(
)
=
default
;
}
;
class
ModuleLoadRequest
final
:
public
ScriptLoadRequest
{
~
ModuleLoadRequest
(
)
=
default
;
ModuleLoadRequest
(
const
ModuleLoadRequest
&
aOther
)
=
delete
;
ModuleLoadRequest
(
ModuleLoadRequest
&
&
aOther
)
=
delete
;
ModuleLoadRequest
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
const
SRIMetadata
&
aIntegrity
nsIURI
*
aReferrer
DOMScriptLoadContext
*
aContext
bool
aIsTopLevel
bool
aIsDynamicImport
ModuleLoader
*
aLoader
VisitedURLSet
*
aVisitedSet
ModuleLoadRequest
*
aRootModule
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
static
already_AddRefed
<
ModuleLoadRequest
>
CreateTopLevel
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
const
SRIMetadata
&
aIntegrity
nsIURI
*
aReferrer
ScriptLoader
*
aLoader
DOMScriptLoadContext
*
aContext
)
;
static
already_AddRefed
<
ModuleLoadRequest
>
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
;
static
already_AddRefed
<
ModuleLoadRequest
>
CreateDynamicImport
(
nsIURI
*
aURI
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
DOMScriptLoadContext
*
aContext
ScriptLoader
*
aLoader
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
;
bool
IsTopLevel
(
)
const
override
{
return
mIsTopLevel
;
}
bool
IsDynamicImport
(
)
const
{
return
mIsDynamicImport
;
}
void
SetReady
(
)
override
;
void
Cancel
(
)
override
;
void
ClearDynamicImport
(
)
;
void
ModuleLoaded
(
)
;
void
ModuleErrored
(
)
;
void
DependenciesLoaded
(
)
;
void
LoadFailed
(
)
;
ModuleLoadRequest
*
GetRootModule
(
)
{
if
(
!
mRootModule
)
{
return
this
;
}
return
mRootModule
;
}
private
:
void
LoadFinished
(
)
;
void
CancelImports
(
)
;
void
CheckModuleDependenciesLoaded
(
)
;
public
:
const
bool
mIsTopLevel
;
const
bool
mIsDynamicImport
;
RefPtr
<
ModuleLoader
>
mLoader
;
RefPtr
<
ModuleLoadRequest
>
mRootModule
;
RefPtr
<
ModuleScript
>
mModuleScript
;
MozPromiseHolder
<
GenericPromise
>
mReady
;
nsTArray
<
RefPtr
<
ModuleLoadRequest
>
>
mImports
;
RefPtr
<
VisitedURLSet
>
mVisitedSet
;
JS
:
:
Heap
<
JS
:
:
Value
>
mDynamicReferencingPrivate
;
JS
:
:
Heap
<
JSString
*
>
mDynamicSpecifier
;
JS
:
:
Heap
<
JSObject
*
>
mDynamicPromise
;
}
;
}
}
#
endif
