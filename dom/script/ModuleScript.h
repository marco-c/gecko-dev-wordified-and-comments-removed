#
ifndef
mozilla_dom_ModuleScript_h
#
define
mozilla_dom_ModuleScript_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
jsapi
.
h
"
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
ScriptLoader
;
class
ModuleScript
final
:
public
nsISupports
{
RefPtr
<
ScriptLoader
>
mLoader
;
nsCOMPtr
<
nsIURI
>
mBaseURL
;
JS
:
:
Heap
<
JSScript
*
>
mScript
;
JS
:
:
Heap
<
JS
:
:
Value
>
mParseError
;
JS
:
:
Heap
<
JS
:
:
Value
>
mErrorToRethrow
;
bool
mSourceElementAssociated
;
~
ModuleScript
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ModuleScript
)
ModuleScript
(
ScriptLoader
*
aLoader
nsIURI
*
aBaseURL
)
;
void
SetScript
(
JS
:
:
Handle
<
JSScript
*
>
aScript
)
;
void
SetParseError
(
const
JS
:
:
Value
&
aError
)
;
void
SetErrorToRethrow
(
const
JS
:
:
Value
&
aError
)
;
void
SetSourceElementAssociated
(
)
;
ScriptLoader
*
Loader
(
)
const
{
return
mLoader
;
}
JSScript
*
Script
(
)
const
{
return
mScript
;
}
nsIURI
*
BaseURL
(
)
const
{
return
mBaseURL
;
}
JS
:
:
Value
ParseError
(
)
const
{
return
mParseError
;
}
JS
:
:
Value
ErrorToRethrow
(
)
const
{
return
mErrorToRethrow
;
}
bool
HasParseError
(
)
const
{
return
!
mParseError
.
isUndefined
(
)
;
}
bool
HasErrorToRethrow
(
)
const
{
return
!
mErrorToRethrow
.
isUndefined
(
)
;
}
bool
SourceElementAssociated
(
)
const
{
return
mSourceElementAssociated
;
}
void
UnlinkScript
(
)
;
}
;
}
}
#
endif
