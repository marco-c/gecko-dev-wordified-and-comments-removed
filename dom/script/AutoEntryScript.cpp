#
include
"
mozilla
/
dom
/
AutoEntryScript
.
h
"
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPIDOMWindowInlines
.
h
"
#
include
"
nsString
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
#
ifdef
DEBUG
void
AssertIfNotSafeToRunScript
(
)
{
if
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
{
return
;
}
if
(
AutoAllowLegacyScriptExecution
:
:
IsAllowed
(
)
)
{
return
;
}
MOZ_ASSERT
(
false
"
is
it
safe
to
run
script
?
"
)
;
}
#
endif
}
AutoEntryScript
:
:
AutoEntryScript
(
nsIGlobalObject
*
aGlobalObject
const
char
*
aReason
bool
aIsMainThread
)
:
AutoJSAPI
(
aGlobalObject
aIsMainThread
eEntryScript
)
mWebIDLCallerPrincipal
(
nullptr
)
mCallerOverride
(
cx
(
)
)
mAutoProfilerLabel
(
"
"
aReason
JS
:
:
ProfilingCategoryPair
:
:
JS
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
RELEVANT_FOR_JS
)
)
mJSThreadExecution
(
aGlobalObject
aIsMainThread
)
{
MOZ_ASSERT
(
aGlobalObject
)
;
if
(
aIsMainThread
)
{
#
ifdef
DEBUG
AssertIfNotSafeToRunScript
(
)
;
#
endif
mScriptActivity
.
emplace
(
true
)
;
}
}
AutoEntryScript
:
:
AutoEntryScript
(
JSObject
*
aObject
const
char
*
aReason
bool
aIsMainThread
)
:
AutoEntryScript
(
xpc
:
:
NativeGlobal
(
aObject
)
aReason
aIsMainThread
)
{
}
AutoEntryScript
:
:
~
AutoEntryScript
(
)
=
default
;
}
