#
include
"
mozilla
/
dom
/
AutoEntryScript
.
h
"
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPIDOMWindowInlines
.
h
"
#
include
"
nsString
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
#
ifdef
DEBUG
void
AssertIfNotSafeToRunScript
(
)
{
if
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
{
return
;
}
if
(
AutoAllowLegacyScriptExecution
:
:
IsAllowed
(
)
)
{
return
;
}
MOZ_ASSERT
(
false
"
is
it
safe
to
run
script
?
"
)
;
}
#
endif
static
unsigned
long
gRunToCompletionListeners
=
0
;
}
void
UseEntryScriptProfiling
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
+
+
gRunToCompletionListeners
;
}
void
UnuseEntryScriptProfiling
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
gRunToCompletionListeners
>
0
)
;
-
-
gRunToCompletionListeners
;
}
AutoEntryScript
:
:
AutoEntryScript
(
nsIGlobalObject
*
aGlobalObject
const
char
*
aReason
bool
aIsMainThread
)
:
AutoJSAPI
(
aGlobalObject
aIsMainThread
eEntryScript
)
mWebIDLCallerPrincipal
(
nullptr
)
mCallerOverride
(
cx
(
)
)
#
ifdef
MOZ_GECKO_PROFILER
mAutoProfilerLabel
(
"
"
aReason
JS
:
:
ProfilingCategoryPair
:
:
JS
uint32_t
(
js
:
:
ProfilingStackFrame
:
:
Flags
:
:
RELEVANT_FOR_JS
)
)
#
endif
mJSThreadExecution
(
aGlobalObject
aIsMainThread
)
{
MOZ_ASSERT
(
aGlobalObject
)
;
if
(
aIsMainThread
)
{
#
ifdef
DEBUG
AssertIfNotSafeToRunScript
(
)
;
#
endif
if
(
gRunToCompletionListeners
>
0
)
{
mDocShellEntryMonitor
.
emplace
(
cx
(
)
aReason
)
;
}
mScriptActivity
.
emplace
(
true
)
;
}
}
AutoEntryScript
:
:
AutoEntryScript
(
JSObject
*
aObject
const
char
*
aReason
bool
aIsMainThread
)
:
AutoEntryScript
(
xpc
:
:
NativeGlobal
(
aObject
)
aReason
aIsMainThread
)
{
}
AutoEntryScript
:
:
~
AutoEntryScript
(
)
=
default
;
AutoEntryScript
:
:
DocshellEntryMonitor
:
:
DocshellEntryMonitor
(
JSContext
*
aCx
const
char
*
aReason
)
:
JS
:
:
dbg
:
:
AutoEntryMonitor
(
aCx
)
mReason
(
aReason
)
{
}
void
AutoEntryScript
:
:
DocshellEntryMonitor
:
:
Entry
(
JSContext
*
aCx
JSFunction
*
aFunction
JSScript
*
aScript
JS
:
:
Handle
<
JS
:
:
Value
>
aAsyncStack
const
char
*
aAsyncCause
)
{
JS
:
:
Rooted
<
JSFunction
*
>
rootedFunction
(
aCx
)
;
if
(
aFunction
)
{
rootedFunction
=
aFunction
;
}
JS
:
:
Rooted
<
JSScript
*
>
rootedScript
(
aCx
)
;
if
(
aScript
)
{
rootedScript
=
aScript
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
xpc
:
:
CurrentWindowOrNull
(
aCx
)
;
if
(
!
window
|
|
!
window
-
>
GetDocShell
(
)
|
|
!
window
-
>
GetDocShell
(
)
-
>
GetRecordProfileTimelineMarkers
(
)
)
{
return
;
}
nsCOMPtr
<
nsIDocShell
>
docShellForJSRunToCompletion
=
window
-
>
GetDocShell
(
)
;
nsAutoJSString
functionName
;
if
(
rootedFunction
)
{
JS
:
:
Rooted
<
JSString
*
>
displayId
(
aCx
JS_GetFunctionDisplayId
(
rootedFunction
)
)
;
if
(
displayId
)
{
if
(
!
functionName
.
init
(
aCx
displayId
)
)
{
JS_ClearPendingException
(
aCx
)
;
return
;
}
}
}
nsString
filename
;
uint32_t
lineNumber
=
0
;
if
(
!
rootedScript
)
{
rootedScript
=
JS_GetFunctionScript
(
aCx
rootedFunction
)
;
}
if
(
rootedScript
)
{
CopyUTF8toUTF16
(
MakeStringSpan
(
JS_GetScriptFilename
(
rootedScript
)
)
filename
)
;
lineNumber
=
JS_GetScriptBaseLineNumber
(
aCx
rootedScript
)
;
}
if
(
!
filename
.
IsEmpty
(
)
|
|
!
functionName
.
IsEmpty
(
)
)
{
docShellForJSRunToCompletion
-
>
NotifyJSRunToCompletionStart
(
mReason
functionName
filename
lineNumber
aAsyncStack
aAsyncCause
)
;
}
}
void
AutoEntryScript
:
:
DocshellEntryMonitor
:
:
Exit
(
JSContext
*
aCx
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
xpc
:
:
CurrentWindowOrNull
(
aCx
)
;
if
(
window
&
&
window
-
>
GetDocShell
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShellForJSRunToCompletion
=
window
-
>
GetDocShell
(
)
;
docShellForJSRunToCompletion
-
>
NotifyJSRunToCompletionStop
(
)
;
}
}
}
