#
ifndef
mozilla_dom_WebIDLGlobalNameHash_h__
#
define
mozilla_dom_WebIDLGlobalNameHash_h__
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
class
JSLinearString
;
namespace
mozilla
:
:
dom
{
enum
class
BindingNamesOffset
:
uint16_t
;
namespace
constructors
:
:
id
{
enum
ID
:
uint16_t
;
}
struct
WebIDLNameTableEntry
{
using
ConstructorEnabled
=
bool
(
*
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
BindingNamesOffset
mNameOffset
;
uint16_t
mNameLength
;
constructors
:
:
id
:
:
ID
mConstructorId
;
CreateInterfaceObjectsMethod
mCreate
;
ConstructorEnabled
mEnabled
;
}
;
class
WebIDLGlobalNameHash
{
public
:
using
ConstructorEnabled
=
WebIDLNameTableEntry
:
:
ConstructorEnabled
;
static
bool
DefineIfEnabled
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
aDesc
bool
*
aFound
)
;
static
bool
MayResolve
(
jsid
aId
)
;
enum
NameType
{
AllNames
UnresolvedNamesOnly
}
;
static
bool
GetNames
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
NameType
aNameType
JS
:
:
MutableHandleVector
<
jsid
>
aNames
)
;
static
bool
ResolveForSystemGlobal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
Handle
<
jsid
>
aId
bool
*
aResolvedp
)
;
static
bool
NewEnumerateSystemGlobal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
MutableHandleVector
<
jsid
>
aProperties
bool
aEnumerableOnly
)
;
private
:
friend
struct
WebIDLNameTableEntry
;
static
const
WebIDLNameTableEntry
*
GetEntry
(
JSLinearString
*
aKey
)
;
static
const
uint32_t
sCount
;
static
const
WebIDLNameTableEntry
sEntries
[
]
;
}
;
}
#
endif
