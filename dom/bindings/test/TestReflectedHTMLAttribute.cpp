#
include
"
mozilla
/
dom
/
TestReflectedHTMLAttribute
.
h
"
#
include
"
mozilla
/
dom
/
TestFunctionsBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TestReflectedHTMLAttribute
mCachedElements
mNewElements
)
already_AddRefed
<
TestReflectedHTMLAttribute
>
TestReflectedHTMLAttribute
:
:
Constructor
(
GlobalObject
&
aGlobal
)
{
return
MakeAndAddRef
<
TestReflectedHTMLAttribute
>
(
)
;
}
template
<
typename
ArrayLike
>
static
void
AssignElements
(
const
ArrayLike
&
aFrom
Nullable
<
nsTArray
<
RefPtr
<
Element
>
>
>
&
aTo
)
{
if
(
aTo
.
IsNull
(
)
)
{
aTo
.
SetValue
(
)
;
}
else
{
aTo
.
Value
(
)
.
Clear
(
)
;
}
aTo
.
Value
(
)
.
AppendElements
(
aFrom
)
;
}
void
TestReflectedHTMLAttribute
:
:
GetReflectedHTMLAttribute
(
bool
*
aUseCachedValue
Nullable
<
nsTArray
<
RefPtr
<
Element
>
>
>
&
aResult
)
{
if
(
aUseCachedValue
)
{
if
(
mCachedElements
=
=
mNewElements
)
{
*
aUseCachedValue
=
true
;
return
;
}
*
aUseCachedValue
=
false
;
}
if
(
mNewElements
.
IsNull
(
)
)
{
mCachedElements
.
SetNull
(
)
;
aResult
.
SetNull
(
)
;
}
else
{
AssignElements
(
mNewElements
.
Value
(
)
mCachedElements
)
;
aResult
.
SetValue
(
mCachedElements
.
Value
(
)
.
Clone
(
)
)
;
}
}
void
TestReflectedHTMLAttribute
:
:
SetReflectedHTMLAttribute
(
const
Nullable
<
Sequence
<
OwningNonNull
<
Element
>
>
>
&
aValue
)
{
}
void
TestReflectedHTMLAttribute
:
:
SetReflectedHTMLAttributeValue
(
const
Sequence
<
OwningNonNull
<
Element
>
>
&
aElements
)
{
AssignElements
(
aElements
mNewElements
)
;
}
JSObject
*
TestReflectedHTMLAttribute
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TestReflectedHTMLAttribute_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
