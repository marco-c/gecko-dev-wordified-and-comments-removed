#
ifndef
mozilla_dom_TestInterfaceAsyncIterableSingle_h
#
define
mozilla_dom_TestInterfaceAsyncIterableSingle_h
#
include
"
IterableIterator
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTArray
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
struct
TestInterfaceAsyncIterableSingleOptions
;
class
TestInterfaceAsyncIterableSingle
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
TestInterfaceAsyncIterableSingle
)
explicit
TestInterfaceAsyncIterableSingle
(
nsPIDOMWindowInner
*
aParent
bool
aFailToInit
=
false
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
TestInterfaceAsyncIterableSingle
>
Constructor
(
const
GlobalObject
&
aGlobal
const
TestInterfaceAsyncIterableSingleOptions
&
aOptions
ErrorResult
&
rv
)
;
using
Iterator
=
AsyncIterableIterator
<
TestInterfaceAsyncIterableSingle
>
;
already_AddRefed
<
Promise
>
GetNextIterationResult
(
Iterator
*
aIterator
ErrorResult
&
aRv
)
;
struct
IteratorData
{
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
;
void
Unlink
(
)
;
uint32_t
mIndex
=
0
;
uint32_t
mMultiplier
=
1
;
Sequence
<
OwningNonNull
<
Promise
>
>
mBlockingPromises
;
size_t
mBlockingPromisesIndex
=
0
;
uint32_t
mFailNextAfter
=
4294967295
;
}
;
void
InitAsyncIteratorData
(
IteratorData
&
aData
Iterator
:
:
IteratorType
aType
ErrorResult
&
aError
)
;
protected
:
already_AddRefed
<
Promise
>
GetNextIterationResult
(
IterableIteratorBase
*
aIterator
IteratorData
&
aData
ErrorResult
&
aRv
)
;
virtual
~
TestInterfaceAsyncIterableSingle
(
)
=
default
;
private
:
void
ResolvePromise
(
IterableIteratorBase
*
aIterator
IteratorData
&
aData
Promise
*
aPromise
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
bool
mFailToInit
;
}
;
}
}
#
endif
