#
ifndef
mozilla_dom_TestInterfaceAsyncIterableSingle_h
#
define
mozilla_dom_TestInterfaceAsyncIterableSingle_h
#
include
"
IterableIterator
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTArray
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
class
TestInterfaceAsyncIterableSingle
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
TestInterfaceAsyncIterableSingle
)
explicit
TestInterfaceAsyncIterableSingle
(
nsPIDOMWindowInner
*
aParent
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
TestInterfaceAsyncIterableSingle
>
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
rv
)
;
using
Iterator
=
AsyncIterableIterator
<
TestInterfaceAsyncIterableSingle
>
;
void
InitAsyncIterator
(
Iterator
*
aIterator
)
;
void
DestroyAsyncIterator
(
Iterator
*
aIterator
)
;
already_AddRefed
<
Promise
>
GetNextPromise
(
JSContext
*
aCx
Iterator
*
aIterator
ErrorResult
&
aRv
)
;
private
:
struct
IteratorData
{
explicit
IteratorData
(
int32_t
aIndex
)
:
mIndex
(
aIndex
)
{
}
~
IteratorData
(
)
{
if
(
mPromise
)
{
mPromise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
mPromise
=
nullptr
;
}
}
RefPtr
<
Promise
>
mPromise
;
uint32_t
mIndex
;
}
;
virtual
~
TestInterfaceAsyncIterableSingle
(
)
=
default
;
void
ResolvePromise
(
IteratorData
*
aData
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
}
;
}
}
#
endif
