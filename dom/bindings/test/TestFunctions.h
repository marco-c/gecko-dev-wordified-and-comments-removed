#
ifndef
mozilla_dom_TestFunctions_h
#
define
mozilla_dom_TestFunctions_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
NonRefcountedDOMObject
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PromiseReturner
;
class
WrapperCachedNonISupportsTestInterface
;
class
TestFunctions
:
public
NonRefcountedDOMObject
{
public
:
static
TestFunctions
*
Constructor
(
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
static
void
ThrowUncatchableException
(
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
static
Promise
*
PassThroughPromise
(
GlobalObject
&
aGlobal
Promise
&
aPromise
)
;
static
already_AddRefed
<
Promise
>
PassThroughCallbackPromise
(
GlobalObject
&
aGlobal
PromiseReturner
&
aCallback
ErrorResult
&
aRv
)
;
void
SetStringData
(
const
nsAString
&
aString
)
;
void
GetStringDataAsAString
(
nsAString
&
aString
)
;
void
GetStringDataAsAString
(
uint32_t
aLength
nsAString
&
aString
)
;
void
GetStringDataAsDOMString
(
const
Optional
<
uint32_t
>
&
aLength
DOMString
&
aString
)
;
void
TestThrowNsresult
(
ErrorResult
&
aError
)
;
void
TestThrowNsresultFromNative
(
ErrorResult
&
aError
)
;
static
already_AddRefed
<
Promise
>
ThrowToRejectPromise
(
GlobalObject
&
aGlobal
ErrorResult
&
aError
)
;
int32_t
One
(
)
const
;
int32_t
Two
(
)
const
;
static
bool
ObjectFromAboutBlank
(
JSContext
*
aCx
JSObject
*
aObj
)
;
WrapperCachedNonISupportsTestInterface
*
WrapperCachedNonISupportsObject
(
)
;
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aWrapper
)
;
private
:
nsString
mStringData
;
RefPtr
<
WrapperCachedNonISupportsTestInterface
>
mWrapperCachedNonISupportsTestInterface
;
}
;
}
}
#
endif
