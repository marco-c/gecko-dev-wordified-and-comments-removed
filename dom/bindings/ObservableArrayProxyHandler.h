#
ifndef
mozilla_dom_ObservableArrayProxyHandler_h
#
define
mozilla_dom_ObservableArrayProxyHandler_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Wrapper
.
h
"
namespace
mozilla
:
:
dom
{
class
ObservableArrayProxyHandler
:
public
js
:
:
ForwardingProxyHandler
{
public
:
explicit
constexpr
ObservableArrayProxyHandler
(
)
:
js
:
:
ForwardingProxyHandler
(
&
family
)
{
}
bool
defineProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
aDesc
JS
:
:
ObjectOpResult
&
aResult
)
const
override
;
bool
delete_
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
JS
:
:
ObjectOpResult
&
aResult
)
const
override
;
bool
get
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVp
)
const
override
;
bool
getOwnPropertyDescriptor
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
JS
:
:
MutableHandle
<
Maybe
<
JS
:
:
PropertyDescriptor
>
>
aDesc
)
const
override
;
bool
has
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
bool
*
aBp
)
const
override
;
bool
ownPropertyKeys
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandleVector
<
jsid
>
aProps
)
const
override
;
bool
preventExtensions
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
ObjectOpResult
&
aResult
)
const
override
;
bool
set
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
PropertyKey
>
aId
JS
:
:
Handle
<
JS
:
:
Value
>
aV
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
ObjectOpResult
&
aResult
)
const
override
;
bool
SetLength
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
uint32_t
aLength
)
const
;
static
const
char
family
;
protected
:
bool
GetBackingListObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandle
<
JSObject
*
>
aBackingListObject
)
const
;
bool
GetBackingListLength
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
uint32_t
*
aLength
)
const
;
bool
SetLength
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JSObject
*
>
aBackingList
uint32_t
aLength
JS
:
:
ObjectOpResult
&
aResult
)
const
;
bool
SetLength
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JSObject
*
>
aBackingList
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
ObjectOpResult
&
aResult
)
const
;
virtual
bool
SetIndexedValue
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JSObject
*
>
aBackingList
uint32_t
aIndex
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
ObjectOpResult
&
aResult
)
const
=
0
;
virtual
bool
OnDeleteItem
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
uint32_t
aIndex
)
const
=
0
;
}
;
inline
bool
IsObservableArrayProxy
(
JSObject
*
obj
)
{
return
js
:
:
IsProxy
(
obj
)
&
&
js
:
:
GetProxyHandler
(
obj
)
-
>
family
(
)
=
=
&
ObservableArrayProxyHandler
:
:
family
;
}
inline
const
ObservableArrayProxyHandler
*
GetObservableArrayProxyHandler
(
JSObject
*
obj
)
{
MOZ_ASSERT
(
IsObservableArrayProxy
(
obj
)
)
;
return
static_cast
<
const
ObservableArrayProxyHandler
*
>
(
js
:
:
GetProxyHandler
(
obj
)
)
;
}
}
#
endif
