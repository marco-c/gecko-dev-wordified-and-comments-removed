#
include
"
RemoteObjectProxy
.
h
"
#
include
"
AccessCheck
.
h
"
#
include
"
jsfriendapi
.
h
"
namespace
mozilla
{
namespace
dom
{
bool
RemoteObjectProxyBase
:
:
getOwnPropertyDescriptor
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
const
{
bool
ok
=
CrossOriginGetOwnPropertyHelper
(
aCx
aProxy
aId
aDesc
)
;
if
(
!
ok
|
|
aDesc
.
object
(
)
)
{
return
ok
;
}
return
CrossOriginPropertyFallback
(
aCx
aProxy
aId
aDesc
)
;
}
bool
RemoteObjectProxyBase
:
:
defineProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
aDesc
JS
:
:
ObjectOpResult
&
aResult
)
const
{
return
ReportCrossOriginDenial
(
aCx
aId
NS_LITERAL_CSTRING
(
"
define
"
)
)
;
}
bool
RemoteObjectProxyBase
:
:
ownPropertyKeys
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
AutoIdVector
&
aProps
)
const
{
JS
:
:
Rooted
<
JSObject
*
>
holder
(
aCx
)
;
if
(
!
EnsureHolder
(
aCx
aProxy
&
holder
)
|
|
!
js
:
:
GetPropertyKeys
(
aCx
holder
JSITER_OWNONLY
|
JSITER_HIDDEN
|
JSITER_SYMBOLS
&
aProps
)
)
{
return
false
;
}
return
xpc
:
:
AppendCrossOriginWhitelistedPropNames
(
aCx
aProps
)
;
}
bool
RemoteObjectProxyBase
:
:
delete_
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
ObjectOpResult
&
aResult
)
const
{
return
ReportCrossOriginDenial
(
aCx
aId
NS_LITERAL_CSTRING
(
"
delete
"
)
)
;
}
bool
RemoteObjectProxyBase
:
:
getPrototype
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandle
<
JSObject
*
>
aProtop
)
const
{
aProtop
.
set
(
nullptr
)
;
return
true
;
}
bool
RemoteObjectProxyBase
:
:
setPrototype
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JSObject
*
>
aProto
JS
:
:
ObjectOpResult
&
aResult
)
const
{
if
(
!
aProto
)
{
return
aResult
.
succeed
(
)
;
}
return
aResult
.
failCantSetProto
(
)
;
}
bool
RemoteObjectProxyBase
:
:
getPrototypeIfOrdinary
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
bool
*
aIsOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
aProtop
)
const
{
*
aIsOrdinary
=
true
;
return
true
;
}
bool
RemoteObjectProxyBase
:
:
preventExtensions
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
ObjectOpResult
&
aResult
)
const
{
return
aResult
.
failCantPreventExtensions
(
)
;
}
bool
RemoteObjectProxyBase
:
:
isExtensible
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
bool
*
aExtensible
)
const
{
*
aExtensible
=
true
;
return
true
;
}
bool
RemoteObjectProxyBase
:
:
get
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVp
)
const
{
return
CrossOriginGet
(
aCx
aProxy
aReceiver
aId
aVp
)
;
}
bool
RemoteObjectProxyBase
:
:
set
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
ObjectOpResult
&
aResult
)
const
{
return
CrossOriginSet
(
aCx
aProxy
aId
aValue
aReceiver
aResult
)
;
}
bool
RemoteObjectProxyBase
:
:
hasOwn
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
bool
*
aBp
)
const
{
JS
:
:
Rooted
<
JSObject
*
>
holder
(
aCx
)
;
if
(
!
EnsureHolder
(
aCx
aProxy
&
holder
)
|
|
!
JS_AlreadyHasOwnPropertyById
(
aCx
holder
aId
aBp
)
)
{
return
false
;
}
if
(
!
*
aBp
)
{
*
aBp
=
xpc
:
:
IsCrossOriginWhitelistedProp
(
aCx
aId
)
;
}
return
true
;
}
bool
RemoteObjectProxyBase
:
:
getOwnEnumerablePropertyKeys
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
AutoIdVector
&
aProps
)
const
{
return
true
;
}
const
char
*
RemoteObjectProxyBase
:
:
className
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
)
const
{
MOZ_ASSERT
(
js
:
:
IsProxy
(
aProxy
)
)
;
return
"
Object
"
;
}
void
RemoteObjectProxyBase
:
:
GetOrCreateProxyObject
(
JSContext
*
aCx
void
*
aNative
const
js
:
:
Class
*
aClasp
JS
:
:
MutableHandle
<
JSObject
*
>
aProxy
bool
&
aNewObjectCreated
)
const
{
xpc
:
:
CompartmentPrivate
*
priv
=
xpc
:
:
CompartmentPrivate
:
:
Get
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
xpc
:
:
CompartmentPrivate
:
:
RemoteProxyMap
&
map
=
priv
-
>
GetRemoteProxyMap
(
)
;
auto
result
=
map
.
lookupForAdd
(
aNative
)
;
if
(
result
)
{
aProxy
.
set
(
result
-
>
value
(
)
)
;
return
;
}
js
:
:
ProxyOptions
options
;
options
.
setClass
(
aClasp
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
native
(
aCx
JS
:
:
PrivateValue
(
aNative
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
js
:
:
NewProxyObject
(
aCx
this
native
nullptr
options
)
)
;
if
(
!
obj
)
{
return
;
}
aNewObjectCreated
=
true
;
if
(
!
map
.
add
(
result
aNative
obj
)
)
{
return
;
}
aProxy
.
set
(
obj
)
;
}
const
char
RemoteObjectProxyBase
:
:
sCrossOriginProxyFamily
=
0
;
}
}
