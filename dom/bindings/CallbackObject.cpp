#
include
"
mozilla
/
dom
/
CallbackObject
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
WorkerPrivate
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
WorkerScope
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsJSPrincipals
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CallbackObject
)
NS_INTERFACE_MAP_ENTRY
(
mozilla
:
:
dom
:
:
CallbackObject
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CallbackObject
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CallbackObject
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CallbackObject
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CallbackObject
)
tmp
-
>
DropJSObjects
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIncumbentGlobal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
CallbackObject
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIncumbentGlobal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
CallbackObject
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mCallback
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mCreationStack
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mIncumbentJSGlobal
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
CallbackObject
:
:
CallSetup
:
:
CallSetup
(
CallbackObject
*
aCallback
ErrorResult
&
aRv
const
char
*
aExecutionReason
ExceptionHandling
aExceptionHandling
JSCompartment
*
aCompartment
bool
aIsJSImplementedWebIDL
)
:
mCx
(
nullptr
)
mCompartment
(
aCompartment
)
mErrorResult
(
aRv
)
mExceptionHandling
(
aExceptionHandling
)
mIsMainThread
(
NS_IsMainThread
(
)
)
{
if
(
mIsMainThread
)
{
nsContentUtils
:
:
EnterMicroTask
(
)
;
}
nsIPrincipal
*
webIDLCallerPrincipal
=
nullptr
;
if
(
aIsJSImplementedWebIDL
)
{
webIDLCallerPrincipal
=
nsContentUtils
:
:
SubjectPrincipalOrSystemIfNativeCaller
(
)
;
}
JSObject
*
realCallback
=
js
:
:
UncheckedUnwrap
(
aCallback
-
>
CallbackPreserveColor
(
)
)
;
nsIGlobalObject
*
globalObject
=
nullptr
;
JSContext
*
cx
;
{
JS
:
:
AutoSuppressGCAnalysis
nogc
;
if
(
mIsMainThread
)
{
nsGlobalWindow
*
win
=
aIsJSImplementedWebIDL
?
nullptr
:
xpc
:
:
WindowGlobalOrNull
(
realCallback
)
;
if
(
win
)
{
MOZ_ASSERT
(
win
-
>
IsInnerWindow
(
)
)
;
if
(
!
win
-
>
AsInner
(
)
-
>
HasActiveDocument
(
)
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
NS_LITERAL_CSTRING
(
"
Refusing
to
execute
function
from
window
"
"
whose
document
is
no
longer
active
.
"
)
)
;
return
;
}
globalObject
=
win
;
}
else
{
JSObject
*
glob
=
js
:
:
GetGlobalForObjectCrossCompartment
(
realCallback
)
;
globalObject
=
xpc
:
:
NativeGlobal
(
glob
)
;
MOZ_ASSERT
(
globalObject
)
;
}
}
else
{
JSObject
*
global
=
js
:
:
GetGlobalForObjectCrossCompartment
(
realCallback
)
;
globalObject
=
xpc
:
:
NativeGlobal
(
global
)
;
MOZ_ASSERT
(
globalObject
)
;
}
if
(
!
globalObject
-
>
GetGlobalJSObject
(
)
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
NS_LITERAL_CSTRING
(
"
Refusing
to
execute
function
from
global
which
is
"
"
being
torn
down
.
"
)
)
;
return
;
}
mAutoEntryScript
.
emplace
(
globalObject
aExecutionReason
mIsMainThread
mIsMainThread
?
nullptr
:
workers
:
:
GetCurrentThreadJSContext
(
)
)
;
mAutoEntryScript
-
>
SetWebIDLCallerPrincipal
(
webIDLCallerPrincipal
)
;
nsIGlobalObject
*
incumbent
=
aCallback
-
>
IncumbentGlobalOrNull
(
)
;
if
(
incumbent
)
{
if
(
!
incumbent
-
>
GetGlobalJSObject
(
)
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
NS_LITERAL_CSTRING
(
"
Refusing
to
execute
function
because
our
"
"
incumbent
global
is
being
torn
down
.
"
)
)
;
return
;
}
mAutoIncumbentScript
.
emplace
(
incumbent
)
;
}
cx
=
mAutoEntryScript
-
>
cx
(
)
;
mRootedCallable
.
emplace
(
cx
aCallback
-
>
Callback
(
)
)
;
}
if
(
mIsMainThread
&
&
!
aIsJSImplementedWebIDL
)
{
bool
allowed
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
ScriptAllowed
(
js
:
:
GetGlobalForObjectCrossCompartment
(
realCallback
)
)
;
if
(
!
allowed
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
NS_LITERAL_CSTRING
(
"
Refusing
to
execute
function
from
global
in
which
"
"
script
is
disabled
.
"
)
)
;
return
;
}
}
mAsyncStack
.
emplace
(
cx
aCallback
-
>
GetCreationStack
(
)
)
;
if
(
*
mAsyncStack
)
{
mAsyncStackSetter
.
emplace
(
cx
*
mAsyncStack
aExecutionReason
)
;
}
mAc
.
emplace
(
cx
*
mRootedCallable
)
;
mCx
=
cx
;
}
bool
CallbackObject
:
:
CallSetup
:
:
ShouldRethrowException
(
JS
:
:
Handle
<
JS
:
:
Value
>
aException
)
{
if
(
mExceptionHandling
=
=
eRethrowExceptions
)
{
if
(
!
mCompartment
)
{
return
true
;
}
if
(
mCompartment
=
=
js
:
:
GetContextCompartment
(
mCx
)
)
{
return
true
;
}
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsIPrincipal
*
callerPrincipal
=
nsJSPrincipals
:
:
get
(
JS_GetCompartmentPrincipals
(
mCompartment
)
)
;
nsIPrincipal
*
calleePrincipal
=
nsContentUtils
:
:
SubjectPrincipal
(
)
;
if
(
callerPrincipal
-
>
SubsumesConsideringDomain
(
calleePrincipal
)
)
{
return
true
;
}
}
MOZ_ASSERT
(
mCompartment
)
;
if
(
!
aException
.
isObject
(
)
)
{
return
false
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
mCx
&
aException
.
toObject
(
)
)
;
obj
=
js
:
:
UncheckedUnwrap
(
obj
false
)
;
return
js
:
:
GetObjectCompartment
(
obj
)
=
=
mCompartment
;
}
CallbackObject
:
:
CallSetup
:
:
~
CallSetup
(
)
{
mAc
.
reset
(
)
;
if
(
mCx
)
{
bool
needToDealWithException
=
mAutoEntryScript
-
>
HasException
(
)
;
if
(
(
mCompartment
&
&
mExceptionHandling
=
=
eRethrowContentExceptions
)
|
|
mExceptionHandling
=
=
eRethrowExceptions
)
{
mErrorResult
.
MightThrowJSException
(
)
;
if
(
needToDealWithException
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exn
(
mCx
)
;
if
(
mAutoEntryScript
-
>
PeekException
(
&
exn
)
&
&
ShouldRethrowException
(
exn
)
)
{
mAutoEntryScript
-
>
ClearException
(
)
;
MOZ_ASSERT
(
!
mAutoEntryScript
-
>
HasException
(
)
)
;
mErrorResult
.
ThrowJSException
(
mCx
exn
)
;
needToDealWithException
=
false
;
}
}
}
if
(
needToDealWithException
)
{
if
(
mErrorResult
.
IsJSContextException
(
)
)
{
mErrorResult
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
}
}
}
mAutoIncumbentScript
.
reset
(
)
;
mAutoEntryScript
.
reset
(
)
;
if
(
mIsMainThread
)
{
nsContentUtils
:
:
LeaveMicroTask
(
)
;
}
}
already_AddRefed
<
nsISupports
>
CallbackObjectHolderBase
:
:
ToXPCOMCallback
(
CallbackObject
*
aCallback
const
nsIID
&
aIID
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
aCallback
)
{
return
nullptr
;
}
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
callback
(
cx
aCallback
-
>
Callback
(
)
)
;
JSAutoCompartment
ac
(
cx
callback
)
;
RefPtr
<
nsXPCWrappedJS
>
wrappedJS
;
nsresult
rv
=
nsXPCWrappedJS
:
:
GetNewOrUsed
(
callback
aIID
getter_AddRefs
(
wrappedJS
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
wrappedJS
)
{
return
nullptr
;
}
nsCOMPtr
<
nsISupports
>
retval
;
rv
=
wrappedJS
-
>
QueryInterface
(
aIID
getter_AddRefs
(
retval
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
retval
.
forget
(
)
;
}
}
}
