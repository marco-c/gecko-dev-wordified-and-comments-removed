#
ifndef
mozilla_ErrorResult_h
#
define
mozilla_ErrorResult_h
#
include
<
stdarg
.
h
>
#
include
"
js
/
GCAnnotations
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsStringGlue
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
IPC
{
class
Message
;
template
<
typename
>
struct
ParamTraits
;
}
class
PickleIterator
;
namespace
mozilla
{
namespace
dom
{
enum
ErrNum
{
#
define
MSG_DEF
(
_name
_argc
_exn
_str
)
\
_name
#
include
"
mozilla
/
dom
/
Errors
.
msg
"
#
undef
MSG_DEF
Err_Limit
}
;
#
if
defined
(
DEBUG
)
&
&
(
defined
(
__clang__
)
|
|
defined
(
__GNUC__
)
)
uint16_t
constexpr
ErrorFormatNumArgs
[
]
=
{
#
define
MSG_DEF
(
_name
_argc
_exn
_str
)
\
_argc
#
include
"
mozilla
/
dom
/
Errors
.
msg
"
#
undef
MSG_DEF
}
;
#
endif
uint16_t
GetErrorArgCount
(
const
ErrNum
aErrorNumber
)
;
bool
ThrowErrorMessage
(
JSContext
*
aCx
const
ErrNum
aErrorNumber
.
.
.
)
;
struct
StringArrayAppender
{
static
void
Append
(
nsTArray
<
nsString
>
&
aArgs
uint16_t
aCount
)
{
MOZ_RELEASE_ASSERT
(
aCount
=
=
0
"
Must
give
at
least
as
many
string
arguments
as
are
required
by
the
ErrNum
.
"
)
;
}
template
<
typename
.
.
.
Ts
>
static
void
Append
(
nsTArray
<
nsString
>
&
aArgs
uint16_t
aCount
const
nsAString
&
aFirst
Ts
&
&
.
.
.
aOtherArgs
)
{
if
(
aCount
=
=
0
)
{
MOZ_ASSERT
(
false
"
There
should
not
be
more
string
arguments
provided
than
are
required
by
the
ErrNum
.
"
)
;
return
;
}
aArgs
.
AppendElement
(
aFirst
)
;
Append
(
aArgs
aCount
-
1
Forward
<
Ts
>
(
aOtherArgs
)
.
.
.
)
;
}
}
;
}
class
ErrorResult
{
public
:
ErrorResult
(
)
:
mResult
(
NS_OK
)
#
ifdef
DEBUG
mMightHaveUnreportedJSException
(
false
)
mUnionState
(
HasNothing
)
#
endif
{
}
#
ifdef
DEBUG
~
ErrorResult
(
)
{
MOZ_ASSERT
(
!
Failed
(
)
)
;
MOZ_ASSERT
(
!
mMightHaveUnreportedJSException
)
;
MOZ_ASSERT
(
mUnionState
=
=
HasNothing
)
;
NS_ASSERT_OWNINGTHREAD
(
ErrorResult
)
;
}
#
endif
ErrorResult
(
ErrorResult
&
&
aRHS
)
:
ErrorResult
(
)
{
*
this
=
Move
(
aRHS
)
;
}
ErrorResult
&
operator
=
(
ErrorResult
&
&
aRHS
)
;
explicit
ErrorResult
(
nsresult
aRv
)
:
ErrorResult
(
)
{
AssignErrorCode
(
aRv
)
;
}
void
Throw
(
nsresult
rv
)
{
MOZ_ASSERT
(
NS_FAILED
(
rv
)
"
Please
don
'
t
try
throwing
success
"
)
;
AssignErrorCode
(
rv
)
;
}
void
CloneTo
(
ErrorResult
&
aRv
)
const
;
void
SuppressException
(
)
;
nsresult
StealNSResult
(
)
{
nsresult
rv
=
ErrorCode
(
)
;
SuppressException
(
)
;
return
rv
;
}
bool
MaybeSetPendingException
(
JSContext
*
cx
)
{
WouldReportJSException
(
)
;
if
(
!
Failed
(
)
)
{
return
false
;
}
SetPendingException
(
cx
)
;
return
true
;
}
void
StealExceptionFromJSContext
(
JSContext
*
cx
)
;
template
<
dom
:
:
ErrNum
errorNumber
typename
.
.
.
Ts
>
void
ThrowTypeError
(
Ts
&
&
.
.
.
messageArgs
)
{
ThrowErrorWithMessage
<
errorNumber
>
(
NS_ERROR_TYPE_ERR
Forward
<
Ts
>
(
messageArgs
)
.
.
.
)
;
}
template
<
dom
:
:
ErrNum
errorNumber
typename
.
.
.
Ts
>
void
ThrowRangeError
(
Ts
&
&
.
.
.
messageArgs
)
{
ThrowErrorWithMessage
<
errorNumber
>
(
NS_ERROR_RANGE_ERR
Forward
<
Ts
>
(
messageArgs
)
.
.
.
)
;
}
bool
IsErrorWithMessage
(
)
const
{
return
ErrorCode
(
)
=
=
NS_ERROR_TYPE_ERR
|
|
ErrorCode
(
)
=
=
NS_ERROR_RANGE_ERR
;
}
void
ThrowJSException
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
exn
)
;
bool
IsJSException
(
)
const
{
return
ErrorCode
(
)
=
=
NS_ERROR_DOM_JS_EXCEPTION
;
}
void
ThrowDOMException
(
nsresult
rv
const
nsACString
&
message
=
EmptyCString
(
)
)
;
bool
IsDOMException
(
)
const
{
return
ErrorCode
(
)
=
=
NS_ERROR_DOM_DOMEXCEPTION
;
}
void
NoteJSContextException
(
JSContext
*
aCx
)
;
bool
IsJSContextException
(
)
{
return
ErrorCode
(
)
=
=
NS_ERROR_DOM_EXCEPTION_ON_JSCONTEXT
;
}
void
ThrowUncatchableException
(
)
{
Throw
(
NS_ERROR_UNCATCHABLE_EXCEPTION
)
;
}
bool
IsUncatchableException
(
)
const
{
return
ErrorCode
(
)
=
=
NS_ERROR_UNCATCHABLE_EXCEPTION
;
}
void
MOZ_ALWAYS_INLINE
MightThrowJSException
(
)
{
#
ifdef
DEBUG
mMightHaveUnreportedJSException
=
true
;
#
endif
}
void
MOZ_ALWAYS_INLINE
WouldReportJSException
(
)
{
#
ifdef
DEBUG
mMightHaveUnreportedJSException
=
false
;
#
endif
}
void
operator
=
(
nsresult
rv
)
{
AssignErrorCode
(
rv
)
;
}
bool
Failed
(
)
const
{
return
NS_FAILED
(
mResult
)
;
}
bool
ErrorCodeIs
(
nsresult
rv
)
const
{
return
mResult
=
=
rv
;
}
uint32_t
ErrorCodeAsInt
(
)
const
{
return
static_cast
<
uint32_t
>
(
ErrorCode
(
)
)
;
}
protected
:
nsresult
ErrorCode
(
)
const
{
return
mResult
;
}
private
:
#
ifdef
DEBUG
enum
UnionState
{
HasMessage
HasDOMExceptionInfo
HasJSException
HasNothing
}
;
#
endif
friend
struct
IPC
:
:
ParamTraits
<
ErrorResult
>
;
void
SerializeMessage
(
IPC
:
:
Message
*
aMsg
)
const
;
bool
DeserializeMessage
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
)
;
void
SerializeDOMExceptionInfo
(
IPC
:
:
Message
*
aMsg
)
const
;
bool
DeserializeDOMExceptionInfo
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
)
;
nsTArray
<
nsString
>
&
CreateErrorMessageHelper
(
const
dom
:
:
ErrNum
errorNumber
nsresult
errorType
)
;
template
<
dom
:
:
ErrNum
errorNumber
typename
.
.
.
Ts
>
void
ThrowErrorWithMessage
(
nsresult
errorType
Ts
&
&
.
.
.
messageArgs
)
{
#
if
defined
(
DEBUG
)
&
&
(
defined
(
__clang__
)
|
|
defined
(
__GNUC__
)
)
static_assert
(
dom
:
:
ErrorFormatNumArgs
[
errorNumber
]
=
=
sizeof
.
.
.
(
messageArgs
)
"
Pass
in
the
right
number
of
arguments
"
)
;
#
endif
ClearUnionData
(
)
;
nsTArray
<
nsString
>
&
messageArgsArray
=
CreateErrorMessageHelper
(
errorNumber
errorType
)
;
uint16_t
argCount
=
dom
:
:
GetErrorArgCount
(
errorNumber
)
;
dom
:
:
StringArrayAppender
:
:
Append
(
messageArgsArray
argCount
Forward
<
Ts
>
(
messageArgs
)
.
.
.
)
;
#
ifdef
DEBUG
mUnionState
=
HasMessage
;
#
endif
}
void
AssertInOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
ErrorResult
)
;
}
void
AssignErrorCode
(
nsresult
aRv
)
{
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_TYPE_ERR
"
Use
ThrowTypeError
(
)
"
)
;
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_RANGE_ERR
"
Use
ThrowRangeError
(
)
"
)
;
MOZ_ASSERT
(
!
IsErrorWithMessage
(
)
"
Don
'
t
overwrite
errors
with
message
"
)
;
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_DOM_JS_EXCEPTION
"
Use
ThrowJSException
(
)
"
)
;
MOZ_ASSERT
(
!
IsJSException
(
)
"
Don
'
t
overwrite
JS
exceptions
"
)
;
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_DOM_DOMEXCEPTION
"
Use
ThrowDOMException
(
)
"
)
;
MOZ_ASSERT
(
!
IsDOMException
(
)
"
Don
'
t
overwrite
DOM
exceptions
"
)
;
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_XPC_NOT_ENOUGH_ARGS
"
May
need
to
bring
back
ThrowNotEnoughArgsError
"
)
;
MOZ_ASSERT
(
aRv
!
=
NS_ERROR_DOM_EXCEPTION_ON_JSCONTEXT
"
Use
NoteJSContextException
"
)
;
mResult
=
aRv
;
}
void
ClearMessage
(
)
;
void
ClearDOMExceptionInfo
(
)
;
void
ClearUnionData
(
)
;
void
SetPendingException
(
JSContext
*
cx
)
;
void
SetPendingExceptionWithMessage
(
JSContext
*
cx
)
;
void
SetPendingJSException
(
JSContext
*
cx
)
;
void
SetPendingDOMException
(
JSContext
*
cx
)
;
void
SetPendingGenericErrorException
(
JSContext
*
cx
)
;
nsresult
mResult
;
struct
Message
;
struct
DOMExceptionInfo
;
union
{
Message
*
mMessage
;
JS
:
:
Value
mJSException
;
DOMExceptionInfo
*
mDOMExceptionInfo
;
}
;
#
ifdef
DEBUG
bool
mMightHaveUnreportedJSException
;
UnionState
mUnionState
;
NS_DECL_OWNINGTHREAD
;
#
endif
ErrorResult
(
const
ErrorResult
&
)
=
delete
;
void
operator
=
(
const
ErrorResult
&
)
=
delete
;
}
;
class
IgnoredErrorResult
:
public
ErrorResult
{
public
:
~
IgnoredErrorResult
(
)
{
SuppressException
(
)
;
}
}
;
#
define
ENSURE_SUCCESS
(
res
ret
)
\
do
{
\
if
(
res
.
Failed
(
)
)
{
\
nsCString
msg
;
\
msg
.
AppendPrintf
(
"
ENSURE_SUCCESS
(
%
s
%
s
)
failed
with
"
\
"
result
0x
%
X
"
#
res
#
ret
res
.
ErrorCodeAsInt
(
)
)
;
\
NS_WARNING
(
msg
.
get
(
)
)
;
\
return
ret
;
\
}
\
}
while
(
0
)
#
define
ENSURE_SUCCESS_VOID
(
res
)
\
do
{
\
if
(
res
.
Failed
(
)
)
{
\
nsCString
msg
;
\
msg
.
AppendPrintf
(
"
ENSURE_SUCCESS_VOID
(
%
s
)
failed
with
"
\
"
result
0x
%
X
"
#
res
res
.
ErrorCodeAsInt
(
)
)
;
\
NS_WARNING
(
msg
.
get
(
)
)
;
\
return
;
\
}
\
}
while
(
0
)
}
#
endif
