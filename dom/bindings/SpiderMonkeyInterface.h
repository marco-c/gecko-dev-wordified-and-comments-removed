#
ifndef
mozilla_dom_SpiderMonkeyInterface_h
#
define
mozilla_dom_SpiderMonkeyInterface_h
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
SpiderMonkeyInterfaceObjectStorage
{
protected
:
JSObject
*
mImplObj
;
JSObject
*
mWrappedObj
;
SpiderMonkeyInterfaceObjectStorage
(
)
:
mImplObj
(
nullptr
)
mWrappedObj
(
nullptr
)
{
}
SpiderMonkeyInterfaceObjectStorage
(
SpiderMonkeyInterfaceObjectStorage
&
&
aOther
)
:
mImplObj
(
aOther
.
mImplObj
)
mWrappedObj
(
aOther
.
mWrappedObj
)
{
aOther
.
mImplObj
=
nullptr
;
aOther
.
mWrappedObj
=
nullptr
;
}
public
:
inline
void
TraceSelf
(
JSTracer
*
trc
)
{
JS
:
:
UnsafeTraceRoot
(
trc
&
mImplObj
"
SpiderMonkeyInterfaceObjectStorage
.
mImplObj
"
)
;
JS
:
:
UnsafeTraceRoot
(
trc
&
mWrappedObj
"
SpiderMonkeyInterfaceObjectStorage
.
mWrappedObj
"
)
;
}
inline
bool
inited
(
)
const
{
return
!
!
mImplObj
;
}
inline
bool
WrapIntoNewCompartment
(
JSContext
*
cx
)
{
return
JS_WrapObject
(
cx
JS
:
:
MutableHandle
<
JSObject
*
>
:
:
fromMarkedLocation
(
&
mWrappedObj
)
)
;
}
inline
JSObject
*
Obj
(
)
const
{
MOZ_ASSERT
(
inited
(
)
)
;
return
mWrappedObj
;
}
private
:
SpiderMonkeyInterfaceObjectStorage
(
const
SpiderMonkeyInterfaceObjectStorage
&
)
=
delete
;
}
;
template
<
typename
InterfaceType
>
class
MOZ_RAII
SpiderMonkeyInterfaceRooter
:
private
JS
:
:
CustomAutoRooter
{
public
:
template
<
typename
CX
>
SpiderMonkeyInterfaceRooter
(
const
CX
&
cx
InterfaceType
*
aInterface
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
JS
:
:
CustomAutoRooter
(
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
mInterface
(
aInterface
)
{
}
virtual
void
trace
(
JSTracer
*
trc
)
override
{
mInterface
-
>
TraceSelf
(
trc
)
;
}
private
:
SpiderMonkeyInterfaceObjectStorage
*
const
mInterface
;
}
;
template
<
typename
Inner
>
struct
Nullable
;
template
<
typename
InterfaceType
>
class
MOZ_RAII
SpiderMonkeyInterfaceRooter
<
Nullable
<
InterfaceType
>
>
:
private
JS
:
:
CustomAutoRooter
{
public
:
template
<
typename
CX
>
SpiderMonkeyInterfaceRooter
(
const
CX
&
cx
Nullable
<
InterfaceType
>
*
aInterface
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
JS
:
:
CustomAutoRooter
(
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
mInterface
(
aInterface
)
{
}
virtual
void
trace
(
JSTracer
*
trc
)
override
{
if
(
!
mInterface
-
>
IsNull
(
)
)
{
mInterface
-
>
Value
(
)
.
TraceSelf
(
trc
)
;
}
}
private
:
Nullable
<
InterfaceType
>
*
const
mInterface
;
}
;
template
<
typename
InterfaceType
>
class
MOZ_RAII
RootedSpiderMonkeyInterface
final
:
public
InterfaceType
private
SpiderMonkeyInterfaceRooter
<
InterfaceType
>
{
public
:
template
<
typename
CX
>
explicit
RootedSpiderMonkeyInterface
(
const
CX
&
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
InterfaceType
(
)
SpiderMonkeyInterfaceRooter
<
InterfaceType
>
(
cx
this
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
{
}
template
<
typename
CX
>
RootedSpiderMonkeyInterface
(
const
CX
&
cx
JSObject
*
obj
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
InterfaceType
(
obj
)
SpiderMonkeyInterfaceRooter
<
InterfaceType
>
(
cx
this
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_TO_PARENT
)
{
}
}
;
}
}
#
endif
