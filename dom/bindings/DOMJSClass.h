#
ifndef
mozilla_dom_DOMJSClass_h
#
define
mozilla_dom_DOMJSClass_h
#
include
"
jsfriendapi
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
dom
/
PrototypeList
.
h
"
#
include
"
mozilla
/
dom
/
JSSlots
.
h
"
class
nsCycleCollectionParticipant
;
#
define
DOM_PROTOTYPE_SLOT
JSCLASS_GLOBAL_SLOT_COUNT
#
define
DOM_GLOBAL_SLOTS
1
#
define
JSCLASS_DOM_GLOBAL
JSCLASS_USERBIT1
#
define
JSCLASS_IS_DOMIFACEANDPROTOJSCLASS
JSCLASS_USERBIT2
namespace
mozilla
{
namespace
dom
{
inline
bool
IsSecureContextOrObjectIsFromSecureContext
(
JSContext
*
aCx
JSObject
*
aObj
)
{
return
JS
:
:
CompartmentCreationOptionsRef
(
js
:
:
GetContextCompartment
(
aCx
)
)
.
secureContext
(
)
|
|
JS
:
:
CompartmentCreationOptionsRef
(
js
:
:
GetObjectCompartment
(
aObj
)
)
.
secureContext
(
)
;
}
typedef
bool
(
*
ResolveOwnProperty
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
typedef
bool
(
*
EnumerateOwnProperties
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
AutoIdVector
&
props
)
;
bool
IsNonExposedGlobal
(
JSContext
*
aCx
JSObject
*
aGlobal
uint32_t
aNonExposedGlobals
)
;
struct
ConstantSpec
{
const
char
*
name
;
JS
:
:
Value
value
;
}
;
typedef
bool
(
*
PropertyEnabled
)
(
JSContext
*
cx
JSObject
*
global
)
;
namespace
GlobalNames
{
static
const
uint32_t
Window
=
1u
<
<
0
;
static
const
uint32_t
BackstagePass
=
1u
<
<
1
;
static
const
uint32_t
DedicatedWorkerGlobalScope
=
1u
<
<
2
;
static
const
uint32_t
SharedWorkerGlobalScope
=
1u
<
<
3
;
static
const
uint32_t
ServiceWorkerGlobalScope
=
1u
<
<
4
;
static
const
uint32_t
WorkerDebuggerGlobalScope
=
1u
<
<
5
;
}
struct
PrefableDisablers
{
inline
bool
isEnabled
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
const
{
if
(
nonExposedGlobals
&
&
IsNonExposedGlobal
(
cx
js
:
:
GetGlobalForObjectCrossCompartment
(
obj
)
nonExposedGlobals
)
)
{
return
false
;
}
if
(
!
enabled
)
{
return
false
;
}
if
(
secureContext
&
&
!
IsSecureContextOrObjectIsFromSecureContext
(
cx
obj
)
)
{
return
false
;
}
if
(
enabledFunc
&
&
!
enabledFunc
(
cx
js
:
:
GetGlobalForObjectCrossCompartment
(
obj
)
)
)
{
return
false
;
}
return
true
;
}
bool
enabled
;
const
bool
secureContext
;
const
uint16_t
nonExposedGlobals
;
const
PropertyEnabled
enabledFunc
;
}
;
template
<
typename
T
>
struct
Prefable
{
inline
bool
isEnabled
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
const
{
if
(
MOZ_LIKELY
(
!
disablers
)
)
{
return
true
;
}
return
disablers
-
>
isEnabled
(
cx
obj
)
;
}
PrefableDisablers
*
const
disablers
;
const
T
*
const
specs
;
}
;
template
<
int
N
>
struct
NativePropertiesN
{
struct
Trio
{
const
void
*
const
mPrefables
;
const
jsid
*
const
mIds
;
const
void
*
const
mSpecs
;
}
;
const
int32_t
iteratorAliasMethodIndex
;
constexpr
const
NativePropertiesN
<
7
>
*
Upcast
(
)
const
{
return
reinterpret_cast
<
const
NativePropertiesN
<
7
>
*
>
(
this
)
;
}
#
define
DO
(
SpecT
FieldName
)
\
public
:
\
/
*
The
bitfields
indicating
the
trio
'
s
presence
and
(
if
present
)
offset
.
*
/
\
const
uint32_t
mHas
#
#
FieldName
#
#
s
:
1
;
\
const
uint32_t
m
#
#
FieldName
#
#
sOffset
:
3
;
\
private
:
\
const
Trio
*
FieldName
#
#
sTrio
(
)
const
{
\
MOZ_ASSERT
(
Has
#
#
FieldName
#
#
s
(
)
)
;
\
return
&
trios
[
m
#
#
FieldName
#
#
sOffset
]
;
\
}
\
public
:
\
bool
Has
#
#
FieldName
#
#
s
(
)
const
{
\
return
mHas
#
#
FieldName
#
#
s
;
\
}
\
const
Prefable
<
const
SpecT
>
*
FieldName
#
#
s
(
)
const
{
\
return
static_cast
<
const
Prefable
<
const
SpecT
>
*
>
\
(
FieldName
#
#
sTrio
(
)
-
>
mPrefables
)
;
\
}
\
const
jsid
*
FieldName
#
#
Ids
(
)
const
{
\
return
FieldName
#
#
sTrio
(
)
-
>
mIds
;
\
}
\
const
SpecT
*
FieldName
#
#
Specs
(
)
const
{
\
return
static_cast
<
const
SpecT
*
>
(
FieldName
#
#
sTrio
(
)
-
>
mSpecs
)
;
\
}
DO
(
JSFunctionSpec
StaticMethod
)
DO
(
JSPropertySpec
StaticAttribute
)
DO
(
JSFunctionSpec
Method
)
DO
(
JSPropertySpec
Attribute
)
DO
(
JSFunctionSpec
UnforgeableMethod
)
DO
(
JSPropertySpec
UnforgeableAttribute
)
DO
(
ConstantSpec
Constant
)
#
undef
DO
const
Trio
trios
[
N
]
;
}
;
static_assert
(
sizeof
(
NativePropertiesN
<
1
>
)
=
=
8
+
3
*
sizeof
(
void
*
)
"
1
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
2
>
)
=
=
8
+
6
*
sizeof
(
void
*
)
"
2
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
3
>
)
=
=
8
+
9
*
sizeof
(
void
*
)
"
3
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
4
>
)
=
=
8
+
12
*
sizeof
(
void
*
)
"
4
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
5
>
)
=
=
8
+
15
*
sizeof
(
void
*
)
"
5
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
6
>
)
=
=
8
+
18
*
sizeof
(
void
*
)
"
6
size
"
)
;
static_assert
(
sizeof
(
NativePropertiesN
<
7
>
)
=
=
8
+
21
*
sizeof
(
void
*
)
"
7
size
"
)
;
typedef
NativePropertiesN
<
7
>
NativeProperties
;
struct
NativePropertiesHolder
{
const
NativeProperties
*
regular
;
const
NativeProperties
*
chromeOnly
;
}
;
struct
NativePropertyHooks
{
ResolveOwnProperty
mResolveOwnProperty
;
EnumerateOwnProperties
mEnumerateOwnProperties
;
NativePropertiesHolder
mNativeProperties
;
prototypes
:
:
ID
mPrototypeID
;
constructors
:
:
ID
mConstructorID
;
const
NativePropertyHooks
*
mProtoHooks
;
}
;
enum
DOMObjectType
:
uint8_t
{
eInstance
eGlobalInstance
eInterface
eInterfacePrototype
eGlobalInterfacePrototype
eNamedPropertiesObject
}
;
inline
bool
IsInstance
(
DOMObjectType
type
)
{
return
type
=
=
eInstance
|
|
type
=
=
eGlobalInstance
;
}
inline
bool
IsInterfacePrototype
(
DOMObjectType
type
)
{
return
type
=
=
eInterfacePrototype
|
|
type
=
=
eGlobalInterfacePrototype
;
}
typedef
JSObject
*
(
*
AssociatedGlobalGetter
)
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
typedef
JSObject
*
(
*
ProtoGetter
)
(
JSContext
*
aCx
)
;
typedef
JS
:
:
Handle
<
JSObject
*
>
(
*
ProtoHandleGetter
)
(
JSContext
*
aCx
)
;
struct
DOMJSClass
{
const
js
:
:
Class
mBase
;
const
prototypes
:
:
ID
mInterfaceChain
[
MAX_PROTOTYPE_CHAIN_LENGTH
]
;
const
bool
mDOMObjectIsISupports
;
const
NativePropertyHooks
*
mNativeHooks
;
AssociatedGlobalGetter
mGetAssociatedGlobal
;
ProtoHandleGetter
mGetProto
;
nsCycleCollectionParticipant
*
mParticipant
;
static
const
DOMJSClass
*
FromJSClass
(
const
JSClass
*
base
)
{
MOZ_ASSERT
(
base
-
>
flags
&
JSCLASS_IS_DOMJSCLASS
)
;
return
reinterpret_cast
<
const
DOMJSClass
*
>
(
base
)
;
}
static
const
DOMJSClass
*
FromJSClass
(
const
js
:
:
Class
*
base
)
{
return
FromJSClass
(
Jsvalify
(
base
)
)
;
}
const
JSClass
*
ToJSClass
(
)
const
{
return
Jsvalify
(
&
mBase
)
;
}
}
;
struct
DOMIfaceAndProtoJSClass
{
const
js
:
:
Class
mBase
;
DOMObjectType
mType
;
bool
wantsInterfaceHasInstance
;
const
prototypes
:
:
ID
mPrototypeID
;
const
uint32_t
mDepth
;
const
NativePropertyHooks
*
mNativeHooks
;
const
char
*
mToString
;
ProtoGetter
mGetParentProto
;
static
const
DOMIfaceAndProtoJSClass
*
FromJSClass
(
const
JSClass
*
base
)
{
MOZ_ASSERT
(
base
-
>
flags
&
JSCLASS_IS_DOMIFACEANDPROTOJSCLASS
)
;
return
reinterpret_cast
<
const
DOMIfaceAndProtoJSClass
*
>
(
base
)
;
}
static
const
DOMIfaceAndProtoJSClass
*
FromJSClass
(
const
js
:
:
Class
*
base
)
{
return
FromJSClass
(
Jsvalify
(
base
)
)
;
}
const
JSClass
*
ToJSClass
(
)
const
{
return
Jsvalify
(
&
mBase
)
;
}
}
;
class
ProtoAndIfaceCache
;
inline
bool
DOMGlobalHasProtoAndIFaceCache
(
JSObject
*
global
)
{
MOZ_ASSERT
(
js
:
:
GetObjectClass
(
global
)
-
>
flags
&
JSCLASS_DOM_GLOBAL
)
;
return
!
js
:
:
GetReservedSlot
(
global
DOM_PROTOTYPE_SLOT
)
.
isUndefined
(
)
;
}
inline
bool
HasProtoAndIfaceCache
(
JSObject
*
global
)
{
if
(
!
(
js
:
:
GetObjectClass
(
global
)
-
>
flags
&
JSCLASS_DOM_GLOBAL
)
)
{
return
false
;
}
return
DOMGlobalHasProtoAndIFaceCache
(
global
)
;
}
inline
ProtoAndIfaceCache
*
GetProtoAndIfaceCache
(
JSObject
*
global
)
{
MOZ_ASSERT
(
js
:
:
GetObjectClass
(
global
)
-
>
flags
&
JSCLASS_DOM_GLOBAL
)
;
return
static_cast
<
ProtoAndIfaceCache
*
>
(
js
:
:
GetReservedSlot
(
global
DOM_PROTOTYPE_SLOT
)
.
toPrivate
(
)
)
;
}
}
}
#
endif
