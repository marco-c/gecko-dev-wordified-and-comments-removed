#
include
"
nsISupports
.
idl
"
#
include
"
nsIArray
.
idl
"
#
include
"
nsIConsoleMessage
.
idl
"
interface
nsIURI
;
%
{
C
+
+
#
include
"
nsString
.
h
"
%
}
[
scriptable
uuid
(
e8933fc9
-
c302
-
4e12
-
a55b
-
4f88611d9c6c
)
]
interface
nsIScriptErrorNote
:
nsISupports
{
readonly
attribute
AString
errorMessage
;
readonly
attribute
ACString
sourceName
;
readonly
attribute
uint32_t
sourceId
;
readonly
attribute
uint32_t
lineNumber
;
readonly
attribute
uint32_t
columnNumber
;
AUTF8String
toString
(
)
;
}
;
[
scriptable
uuid
(
63eb4d3e
-
7d99
-
4150
-
b4f3
-
11314f9d82a9
)
]
interface
nsIScriptError
:
nsIConsoleMessage
{
const
unsigned
long
errorFlag
=
0x0
;
const
unsigned
long
warningFlag
=
0x1
;
const
unsigned
long
infoFlag
=
0x8
;
readonly
attribute
AString
errorMessage
;
readonly
attribute
ACString
sourceName
;
readonly
attribute
uint32_t
sourceId
;
readonly
attribute
uint32_t
lineNumber
;
readonly
attribute
uint32_t
columnNumber
;
readonly
attribute
uint32_t
flags
;
readonly
attribute
string
category
;
readonly
attribute
unsigned
long
long
outerWindowID
;
readonly
attribute
unsigned
long
long
innerWindowID
;
readonly
attribute
boolean
isFromPrivateWindow
;
readonly
attribute
boolean
isFromChromeContext
;
readonly
attribute
boolean
isPromiseRejection
;
[
noscript
]
void
initIsPromiseRejection
(
in
boolean
isPromiseRejection
)
;
attribute
jsval
exception
;
readonly
attribute
boolean
hasException
;
attribute
jsval
stack
;
[
noscript
]
readonly
attribute
jsval
stackGlobal
;
attribute
AString
errorMessageName
;
readonly
attribute
nsIArray
notes
;
attribute
AString
cssSelectors
;
void
init
(
in
AString
message
in
ACString
sourceName
in
uint32_t
lineNumber
in
uint32_t
columnNumber
in
uint32_t
flags
in
ACString
category
[
optional
]
in
boolean
fromPrivateWindow
[
optional
]
in
boolean
fromChromeContext
)
;
void
initWithWindowID
(
in
AString
message
in
ACString
sourceName
in
uint32_t
lineNumber
in
uint32_t
columnNumber
in
uint32_t
flags
in
ACString
category
in
unsigned
long
long
innerWindowID
[
optional
]
in
boolean
fromChromeContext
)
;
void
initWithSanitizedSource
(
in
AString
message
in
ACString
sourceName
in
uint32_t
lineNumber
in
uint32_t
columnNumber
in
uint32_t
flags
in
ACString
category
in
unsigned
long
long
innerWindowID
[
optional
]
in
boolean
fromChromeContext
)
;
void
initWithSourceURI
(
in
AString
message
in
nsIURI
sourceURI
in
uint32_t
lineNumber
in
uint32_t
columnNumber
in
uint32_t
flags
in
ACString
category
in
unsigned
long
long
innerWindowID
[
optional
]
in
boolean
fromChromeContext
)
;
void
initSourceId
(
in
uint32_t
sourceId
)
;
%
{
C
+
+
nsresult
InitWithWindowID
(
const
nsAString
&
message
const
nsACString
&
sourceName
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
nsACString
&
category
uint64_t
aInnerWindowID
)
{
return
InitWithWindowID
(
message
sourceName
lineNumber
columnNumber
flags
category
aInnerWindowID
false
)
;
}
template
<
uint32_t
N
>
nsresult
InitWithWindowID
(
const
nsAString
&
message
const
nsACString
&
sourceName
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
char
(
&
c
)
[
N
]
uint64_t
aInnerWindowID
bool
aFromChromeContext
=
false
)
{
nsDependentCString
category
(
c
N
-
1
)
;
return
InitWithWindowID
(
message
sourceName
lineNumber
columnNumber
flags
category
aInnerWindowID
aFromChromeContext
)
;
}
nsresult
InitWithSanitizedSource
(
const
nsAString
&
message
const
nsACString
&
sourceName
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
nsACString
&
category
uint64_t
aInnerWindowID
)
{
return
InitWithSanitizedSource
(
message
sourceName
lineNumber
columnNumber
flags
category
aInnerWindowID
false
)
;
}
template
<
uint32_t
N
>
nsresult
InitWithSanitizedSource
(
const
nsAString
&
message
const
nsACString
&
sourceName
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
char
(
&
c
)
[
N
]
uint64_t
aInnerWindowID
bool
aFromChromeContext
=
false
)
{
nsDependentCString
category
(
c
N
-
1
)
;
return
InitWithSanitizedSource
(
message
sourceName
lineNumber
columnNumber
flags
category
aInnerWindowID
aFromChromeContext
)
;
}
nsresult
InitWithSourceURI
(
const
nsAString
&
message
nsIURI
*
sourceURI
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
nsACString
&
category
uint64_t
aInnerWindowID
)
{
return
InitWithSourceURI
(
message
sourceURI
lineNumber
columnNumber
flags
category
aInnerWindowID
false
)
;
}
template
<
uint32_t
N
>
nsresult
InitWithSourceURI
(
const
nsAString
&
message
nsIURI
*
sourceURI
uint32_t
lineNumber
uint32_t
columnNumber
uint32_t
flags
const
char
(
&
c
)
[
N
]
uint64_t
aInnerWindowID
bool
aFromChromeContext
=
false
)
{
nsDependentCString
category
(
c
N
-
1
)
;
return
InitWithSourceURI
(
message
sourceURI
lineNumber
columnNumber
flags
category
aInnerWindowID
aFromChromeContext
)
;
}
%
}
}
;
%
{
C
+
+
#
define
NS_SCRIPTERROR_CID
\
{
0x1950539a
0x90f0
0x4d22
{
0xb5
0xaf
0x71
0x32
0x9c
0x68
0xfa
0x35
}
}
#
define
NS_SCRIPTERROR_CONTRACTID
"
mozilla
.
org
/
scripterror
;
1
"
%
}
