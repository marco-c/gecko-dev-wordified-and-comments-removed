#
ifndef
mozilla_dom_ToJSValue_h
#
define
mozilla_dom_ToJSValue_h
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
NonRefcountedDOMObject
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Array
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
<
type_traits
>
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
WindowProxyHolder
;
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
nsAString
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
template
<
typename
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_same
<
T
bool
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
T
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setBoolean
(
aArgument
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
int32_t
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setInt32
(
aArgument
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
uint32_t
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setNumber
(
aArgument
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
int64_t
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setNumber
(
double
(
aArgument
)
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
uint64_t
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setNumber
(
double
(
aArgument
)
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
float
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setNumber
(
aArgument
)
;
return
true
;
}
inline
bool
ToJSValue
(
JSContext
*
aCx
double
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setNumber
(
aArgument
)
;
return
true
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
CallbackObject
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
aValue
.
setObjectOrNull
(
aArgument
.
Callback
(
aCx
)
)
;
return
MaybeWrapValue
(
aCx
aValue
)
;
}
template
<
class
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_base_of
<
nsWrapperCache
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
T
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
return
GetOrCreateDOMReflector
(
aCx
aArgument
aValue
)
;
}
namespace
binding_detail
{
template
<
class
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_base_of
<
NonRefcountedDOMObject
T
>
:
:
value
bool
>
ToJSValueFromPointerHelper
(
JSContext
*
aCx
T
*
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
if
(
!
aArgument
)
{
aValue
.
setNull
(
)
;
return
true
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
)
;
if
(
!
aArgument
-
>
WrapObject
(
aCx
nullptr
&
obj
)
)
{
return
false
;
}
aValue
.
setObject
(
*
obj
)
;
return
true
;
}
}
template
<
class
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_base_of
<
NonRefcountedDOMObject
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
UniquePtr
<
T
>
&
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
if
(
!
binding_detail
:
:
ToJSValueFromPointerHelper
(
aCx
aArgument
.
get
(
)
aValue
)
)
{
return
false
;
}
Unused
<
<
aArgument
.
release
(
)
;
return
true
;
}
template
<
typename
T
>
MOZ_MUST_USE
typename
std
:
:
enable_if
<
std
:
:
is_base_of
<
AllTypedArraysBase
T
>
:
:
value
bool
>
:
:
type
ToJSValue
(
JSContext
*
aCx
const
TypedArrayCreator
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
JSObject
*
obj
=
aArgument
.
Create
(
aCx
)
;
if
(
!
obj
)
{
return
false
;
}
aValue
.
setObject
(
*
obj
)
;
return
true
;
}
template
<
class
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
!
std
:
:
is_base_of
<
nsWrapperCache
T
>
:
:
value
&
&
!
std
:
:
is_base_of
<
CallbackObject
T
>
:
:
value
&
&
std
:
:
is_base_of
<
nsISupports
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
T
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
xpcObjectHelper
helper
(
ToSupports
(
&
aArgument
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
scope
(
aCx
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
return
XPCOMObjectToJsval
(
aCx
scope
helper
nullptr
true
aValue
)
;
}
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
WindowProxyHolder
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
nsCOMPtr
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
*
aArgument
.
get
(
)
aValue
)
;
}
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
RefPtr
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
*
aArgument
.
get
(
)
aValue
)
;
}
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
NonNull
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
*
aArgument
.
get
(
)
aValue
)
;
}
template
<
class
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_base_of
<
DictionaryBase
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
const
T
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
aArgument
.
ToObjectInternal
(
aCx
aValue
)
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
const
JS
:
:
Value
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
aValue
.
set
(
aArgument
)
;
return
MaybeWrapValue
(
aCx
aValue
)
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
aValue
.
set
(
aArgument
)
;
return
MaybeWrapValue
(
aCx
aValue
)
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
const
JS
:
:
Heap
<
JS
:
:
Value
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
aValue
.
set
(
aArgument
)
;
return
MaybeWrapValue
(
aCx
aValue
)
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
const
JS
:
:
Rooted
<
JS
:
:
Value
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
aValue
.
set
(
aArgument
)
;
return
MaybeWrapValue
(
aCx
aValue
)
;
}
MOZ_MUST_USE
inline
bool
ToJSValue
(
JSContext
*
aCx
const
JS
:
:
Rooted
<
JSObject
*
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
aValue
.
setObjectOrNull
(
aArgument
)
;
return
MaybeWrapObjectOrNullValue
(
aCx
aValue
)
;
}
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
nsresult
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
ErrorResult
&
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
template
<
typename
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_base_of
<
AllOwningUnionBase
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
const
T
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
JS
:
:
Rooted
<
JSObject
*
>
global
(
aCx
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
return
aArgument
.
ToJSVal
(
aCx
global
aValue
)
;
}
template
<
typename
T
>
MOZ_MUST_USE
std
:
:
enable_if_t
<
std
:
:
is_pointer
<
T
>
:
:
value
bool
>
ToJSValue
(
JSContext
*
aCx
T
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
*
aArgument
aValue
)
;
}
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
Promise
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
T
*
aArguments
size_t
aLength
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
nsTArray
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
aArgument
.
Elements
(
)
aArgument
.
Length
(
)
aValue
)
;
}
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
FallibleTArray
<
T
>
&
aArgument
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
aArgument
.
Elements
(
)
aArgument
.
Length
(
)
aValue
)
;
}
template
<
typename
T
int
N
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
T
(
&
aArgument
)
[
N
]
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
return
ToJSValue
(
aCx
aArgument
N
aValue
)
;
}
template
<
typename
T
>
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
T
*
aArguments
size_t
aLength
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
{
MOZ_ASSERT
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
JS
:
:
RootedVector
<
JS
:
:
Value
>
v
(
aCx
)
;
if
(
!
v
.
resize
(
aLength
)
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
if
(
!
ToJSValue
(
aCx
aArguments
[
i
]
v
[
i
]
)
)
{
return
false
;
}
}
JSObject
*
arrayObj
=
JS
:
:
NewArrayObject
(
aCx
v
)
;
if
(
!
arrayObj
)
{
return
false
;
}
aValue
.
setObject
(
*
arrayObj
)
;
return
true
;
}
}
}
#
endif
