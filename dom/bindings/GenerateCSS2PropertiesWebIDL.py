import
argparse
import
runpy
import
string
import
sys
def
generateLine
(
propName
extendedAttrs
)
:
    
return
"
[
%
s
]
attribute
[
LegacyNullToEmptyString
]
UTF8String
%
s
;
\
n
"
%
(
        
"
"
.
join
(
extendedAttrs
)
        
propName
    
)
def
generate
(
output
idlFilename
dataFile
)
:
    
propsData
=
runpy
.
run_path
(
dataFile
)
[
"
data
"
]
    
props
=
"
"
    
for
p
in
propsData
.
values
(
)
:
        
if
"
Internal
"
in
p
.
flags
:
            
continue
        
if
"
Style
"
not
in
p
.
rules
:
            
continue
        
if
p
.
type
(
)
=
=
"
alias
"
:
            
if
p
.
pref
=
=
propsData
[
p
.
prop_id
]
.
pref
:
                
continue
            
propId
=
p
.
prop_id
        
else
:
            
propId
=
p
.
id
        
extendedAttrs
=
[
            
"
BindingTemplate
=
(
CSS2Property
eCSSProperty_
%
s
)
"
%
propId
            
"
CEReactions
"
            
"
SetterThrows
"
            
"
SetterNeedsSubjectPrincipal
=
NonSystem
"
        
]
        
if
p
.
pref
!
=
"
"
:
            
if
p
.
method
=
=
"
BackdropFilter
"
:
                
extendedAttrs
.
append
(
'
Func
=
"
nsCSSProps
:
:
IsBackdropFilterAvailable
"
'
)
            
else
:
                
extendedAttrs
.
append
(
'
Pref
=
"
%
s
"
'
%
p
.
pref
)
        
def
add_extra_accessors
(
p
)
:
            
prop
=
p
.
method
            
if
prop
.
startswith
(
"
Webkit
"
)
:
                
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
prop
)
            
if
not
prop
.
startswith
(
"
Moz
"
)
:
                
prop
=
prop
[
0
]
.
lower
(
)
+
prop
[
1
:
]
            
if
prop
!
=
p
.
name
:
                
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
p
.
name
)
            
return
prop
        
prop
=
add_extra_accessors
(
p
)
        
if
p
.
type
(
)
!
=
"
alias
"
:
            
for
a
in
p
.
aliases
:
                
if
p
.
pref
=
=
propsData
[
a
]
.
pref
:
                    
newProp
=
add_extra_accessors
(
propsData
[
a
]
)
                    
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
newProp
)
        
props
+
=
generateLine
(
prop
extendedAttrs
)
    
idlFile
=
open
(
idlFilename
"
r
"
)
    
idlTemplate
=
idlFile
.
read
(
)
    
idlFile
.
close
(
)
    
output
.
write
(
        
"
/
*
THIS
IS
AN
AUTOGENERATED
FILE
.
DO
NOT
EDIT
*
/
\
n
\
n
"
        
+
string
.
Template
(
idlTemplate
)
.
substitute
(
{
"
props
"
:
props
}
)
        
+
"
\
n
"
    
)
def
main
(
)
:
    
parser
=
argparse
.
ArgumentParser
(
)
    
parser
.
add_argument
(
"
idlFilename
"
help
=
"
IDL
property
file
template
"
)
    
parser
.
add_argument
(
        
"
preprocessorHeader
"
help
=
"
Header
file
to
pass
through
the
preprocessor
"
    
)
    
args
=
parser
.
parse_args
(
)
    
generate
(
sys
.
stdout
args
.
idlFilename
args
.
preprocessorHeader
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
