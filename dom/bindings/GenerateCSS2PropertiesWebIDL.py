import
argparse
import
runpy
import
sys
def
generateLine
(
propName
extendedAttrs
)
:
    
return
"
[
%
s
]
attribute
[
LegacyNullToEmptyString
]
UTF8String
%
s
;
\
n
"
%
(
        
"
"
.
join
(
extendedAttrs
)
        
propName
    
)
def
generate
(
output
dataFile
)
:
    
propsData
=
runpy
.
run_path
(
dataFile
)
[
"
data
"
]
    
output
.
write
(
        
"
"
"
/
*
THIS
IS
AN
AUTOGENERATED
FILE
.
DO
NOT
EDIT
*
/
/
*
-
*
-
Mode
:
C
+
+
;
tab
-
width
:
8
;
indent
-
tabs
-
mode
:
nil
;
c
-
basic
-
offset
:
2
-
*
-
*
/
/
*
vim
:
set
ts
=
8
sts
=
2
et
sw
=
2
tw
=
80
:
*
/
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
 
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
 
*
file
You
can
obtain
one
at
https
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
[
Exposed
=
Window
]
interface
CSS2Properties
:
CSSStyleDeclaration
{
"
"
"
    
)
    
for
p
in
propsData
.
values
(
)
:
        
if
"
Style
"
not
in
p
.
rules
:
            
continue
        
if
p
.
type
(
)
=
=
"
alias
"
:
            
if
p
.
pref
=
=
propsData
[
p
.
prop_id
]
.
pref
:
                
continue
            
propId
=
p
.
prop_id
        
else
:
            
propId
=
p
.
id
        
extendedAttrs
=
[
            
"
BindingTemplate
=
(
CSS2Property
eCSSProperty_
%
s
)
"
%
propId
            
"
CEReactions
"
            
"
SetterThrows
"
            
"
SetterNeedsSubjectPrincipal
=
NonSystem
"
        
]
        
if
p
.
pref
!
=
"
"
:
            
assert
"
Internal
"
not
in
p
.
flags
            
if
p
.
method
=
=
"
BackdropFilter
"
:
                
extendedAttrs
.
append
(
'
Func
=
"
nsCSSProps
:
:
IsBackdropFilterAvailable
"
'
)
            
elif
p
.
method
not
in
[
"
MozTransform
"
"
MozTransformOrigin
"
]
:
                
extendedAttrs
.
append
(
'
Pref
=
"
%
s
"
'
%
p
.
pref
)
        
elif
"
EnabledInUASheetsAndChrome
"
in
p
.
flags
:
            
extendedAttrs
.
append
(
"
ChromeOnly
"
)
        
elif
"
Internal
"
in
p
.
flags
:
            
continue
        
def
add_extra_accessors
(
p
)
:
            
prop
=
p
.
method
            
if
prop
.
startswith
(
"
Webkit
"
)
:
                
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
prop
)
            
if
not
prop
.
startswith
(
"
Moz
"
)
:
                
prop
=
prop
[
0
]
.
lower
(
)
+
prop
[
1
:
]
            
if
prop
!
=
p
.
name
:
                
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
p
.
name
)
            
return
prop
        
prop
=
add_extra_accessors
(
p
)
        
if
p
.
type
(
)
!
=
"
alias
"
:
            
for
a
in
p
.
aliases
:
                
if
p
.
pref
=
=
propsData
[
a
]
.
pref
:
                    
newProp
=
add_extra_accessors
(
propsData
[
a
]
)
                    
extendedAttrs
.
append
(
'
BindingAlias
=
"
%
s
"
'
%
newProp
)
        
output
.
write
(
generateLine
(
prop
extendedAttrs
)
)
    
output
.
write
(
"
}
;
"
)
def
main
(
)
:
    
parser
=
argparse
.
ArgumentParser
(
)
    
parser
.
add_argument
(
        
"
preprocessorHeader
"
help
=
"
Header
file
to
pass
through
the
preprocessor
"
    
)
    
args
=
parser
.
parse_args
(
)
    
generate
(
sys
.
stdout
args
.
preprocessorHeader
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
