#
ifndef
mozilla_dom_IterableIterator_h
#
define
mozilla_dom_IterableIterator_h
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
IterableIteratorBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
:
:
dom
{
namespace
binding_details
{
static
const
JSWhyMagic
END_OF_ITERATION
=
JS_GENERIC_MAGIC
;
}
namespace
iterator_utils
{
void
DictReturn
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aResult
bool
aDone
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
KeyAndValueReturn
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aKey
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
MutableHandle
<
JSObject
*
>
aResult
ErrorResult
&
aRv
)
;
inline
void
ResolvePromiseForFinished
(
Promise
*
aPromise
)
{
aPromise
-
>
MaybeResolve
(
JS
:
:
MagicValue
(
binding_details
:
:
END_OF_ITERATION
)
)
;
}
template
<
typename
Key
typename
Value
>
void
ResolvePromiseWithKeyAndValue
(
Promise
*
aPromise
const
Key
&
aKey
const
Value
&
aValue
)
{
aPromise
-
>
MaybeResolve
(
MakeTuple
(
aKey
aValue
)
)
;
}
}
class
IterableIteratorBase
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
IterableIteratorBase
)
typedef
enum
{
Keys
=
0
Values
Entries
}
IteratorType
;
IterableIteratorBase
(
)
=
default
;
protected
:
virtual
~
IterableIteratorBase
(
)
=
default
;
virtual
void
UnlinkHelper
(
)
=
0
;
virtual
void
TraverseHelper
(
nsCycleCollectionTraversalCallback
&
cb
)
=
0
;
}
;
template
<
typename
T
typename
U
>
bool
CallIterableGetter
(
JSContext
*
aCx
U
(
T
:
:
*
aMethod
)
(
uint32_t
)
T
*
aInst
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
ToJSValue
(
aCx
(
aInst
-
>
*
aMethod
)
(
aIndex
)
aResult
)
;
}
template
<
typename
T
typename
U
>
bool
CallIterableGetter
(
JSContext
*
aCx
U
(
T
:
:
*
aMethod
)
(
uint32_t
)
const
const
T
*
aInst
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
ToJSValue
(
aCx
(
aInst
-
>
*
aMethod
)
(
aIndex
)
aResult
)
;
}
template
<
typename
T
>
bool
CallIterableGetter
(
JSContext
*
aCx
bool
(
T
:
:
*
aMethod
)
(
JSContext
*
uint32_t
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
T
*
aInst
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
(
aInst
-
>
*
aMethod
)
(
aCx
aIndex
aResult
)
;
}
template
<
typename
T
>
bool
CallIterableGetter
(
JSContext
*
aCx
bool
(
T
:
:
*
aMethod
)
(
JSContext
*
uint32_t
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
const
const
T
*
aInst
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
(
aInst
-
>
*
aMethod
)
(
aCx
aIndex
aResult
)
;
}
template
<
typename
T
>
class
IterableIterator
final
:
public
IterableIteratorBase
{
public
:
typedef
bool
(
*
WrapFunc
)
(
JSContext
*
aCx
IterableIterator
<
T
>
*
aObject
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
;
explicit
IterableIterator
(
T
*
aIterableObj
IteratorType
aIteratorType
WrapFunc
aWrapFunc
)
:
mIterableObj
(
aIterableObj
)
mIteratorType
(
aIteratorType
)
mWrapFunc
(
aWrapFunc
)
mIndex
(
0
)
{
MOZ_ASSERT
(
mIterableObj
)
;
MOZ_ASSERT
(
mWrapFunc
)
;
}
bool
GetKeyAtIndex
(
JSContext
*
aCx
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
CallIterableGetter
(
aCx
&
T
:
:
GetKeyAtIndex
mIterableObj
.
get
(
)
aIndex
aResult
)
;
}
bool
GetValueAtIndex
(
JSContext
*
aCx
uint32_t
aIndex
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
)
{
return
CallIterableGetter
(
aCx
&
T
:
:
GetValueAtIndex
mIterableObj
.
get
(
)
aIndex
aResult
)
;
}
void
Next
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aResult
ErrorResult
&
aRv
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
JS
:
:
UndefinedValue
(
)
)
;
if
(
mIndex
>
=
this
-
>
mIterableObj
-
>
GetIterableLength
(
)
)
{
iterator_utils
:
:
DictReturn
(
aCx
aResult
true
value
aRv
)
;
return
;
}
switch
(
mIteratorType
)
{
case
IteratorType
:
:
Keys
:
{
if
(
!
GetKeyAtIndex
(
aCx
mIndex
&
value
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
iterator_utils
:
:
DictReturn
(
aCx
aResult
false
value
aRv
)
;
break
;
}
case
IteratorType
:
:
Values
:
{
if
(
!
GetValueAtIndex
(
aCx
mIndex
&
value
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
iterator_utils
:
:
DictReturn
(
aCx
aResult
false
value
aRv
)
;
break
;
}
case
IteratorType
:
:
Entries
:
{
JS
:
:
Rooted
<
JS
:
:
Value
>
key
(
aCx
)
;
if
(
!
GetKeyAtIndex
(
aCx
mIndex
&
key
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
!
GetValueAtIndex
(
aCx
mIndex
&
value
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
iterator_utils
:
:
KeyAndValueReturn
(
aCx
key
value
aResult
aRv
)
;
break
;
}
default
:
MOZ_CRASH
(
"
Invalid
iterator
type
!
"
)
;
}
+
+
mIndex
;
}
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
{
return
(
*
mWrapFunc
)
(
aCx
this
aGivenProto
aObj
)
;
}
protected
:
virtual
~
IterableIterator
(
)
=
default
;
void
UnlinkHelper
(
)
final
{
mIterableObj
=
nullptr
;
}
virtual
void
TraverseHelper
(
nsCycleCollectionTraversalCallback
&
cb
)
override
{
IterableIterator
<
T
>
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIterableObj
)
;
}
RefPtr
<
T
>
mIterableObj
;
IteratorType
mIteratorType
;
WrapFunc
mWrapFunc
;
uint32_t
mIndex
;
}
;
namespace
binding_detail
{
class
AsyncIterableNextImpl
;
}
class
AsyncIterableIteratorBase
:
public
IterableIteratorBase
{
public
:
IteratorType
GetIteratorType
(
)
{
return
mIteratorType
;
}
protected
:
explicit
AsyncIterableIteratorBase
(
IteratorType
aIteratorType
)
:
mIteratorType
(
aIteratorType
)
{
}
private
:
friend
class
binding_detail
:
:
AsyncIterableNextImpl
;
IteratorType
mIteratorType
;
RefPtr
<
Promise
>
mOngoingPromise
;
bool
mIsFinished
=
false
;
}
;
template
<
typename
T
>
class
AsyncIterableIterator
:
public
AsyncIterableIteratorBase
public
SupportsWeakPtr
{
public
:
AsyncIterableIterator
(
T
*
aIterableObj
IteratorType
aIteratorType
)
:
AsyncIterableIteratorBase
(
aIteratorType
)
mIterableObj
(
aIterableObj
)
{
MOZ_ASSERT
(
mIterableObj
)
;
}
void
SetData
(
void
*
aData
)
{
mData
=
aData
;
}
void
*
GetData
(
)
{
return
mData
;
}
protected
:
virtual
~
AsyncIterableIterator
(
)
{
if
(
mIterableObj
)
{
mIterableObj
-
>
DestroyAsyncIterator
(
this
)
;
}
}
void
UnlinkHelper
(
)
final
{
mIterableObj
-
>
DestroyAsyncIterator
(
this
)
;
mIterableObj
=
nullptr
;
}
virtual
void
TraverseHelper
(
nsCycleCollectionTraversalCallback
&
cb
)
override
{
AsyncIterableIterator
<
T
>
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIterableObj
)
;
}
RefPtr
<
T
>
mIterableObj
;
void
*
mData
{
nullptr
}
;
}
;
namespace
binding_detail
{
template
<
typename
T
>
using
WrappableIterableIterator
=
IterableIterator
<
T
>
;
class
AsyncIterableNextImpl
{
protected
:
already_AddRefed
<
Promise
>
Next
(
JSContext
*
aCx
AsyncIterableIteratorBase
*
aObject
nsISupports
*
aGlobalObject
ErrorResult
&
aRv
)
;
virtual
already_AddRefed
<
Promise
>
GetNextPromise
(
ErrorResult
&
aRv
)
=
0
;
private
:
already_AddRefed
<
Promise
>
NextSteps
(
JSContext
*
aCx
AsyncIterableIteratorBase
*
aObject
nsIGlobalObject
*
aGlobalObject
ErrorResult
&
aRv
)
;
}
;
template
<
typename
T
>
class
AsyncIterableIteratorNoReturn
:
public
AsyncIterableIterator
<
T
>
public
AsyncIterableNextImpl
{
public
:
using
WrapFunc
=
bool
(
*
)
(
JSContext
*
aCx
AsyncIterableIteratorNoReturn
<
T
>
*
aObject
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
;
using
AsyncIterableIteratorBase
:
:
IteratorType
;
AsyncIterableIteratorNoReturn
(
T
*
aIterableObj
IteratorType
aIteratorType
WrapFunc
aWrapFunc
)
:
AsyncIterableIterator
<
T
>
(
aIterableObj
aIteratorType
)
mWrapFunc
(
aWrapFunc
)
{
MOZ_ASSERT
(
mWrapFunc
)
;
}
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
{
return
(
*
mWrapFunc
)
(
aCx
this
aGivenProto
aObj
)
;
}
already_AddRefed
<
Promise
>
Next
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
AsyncIterableNextImpl
:
:
Next
(
aCx
this
this
-
>
mIterableObj
-
>
GetParentObject
(
)
aRv
)
;
}
protected
:
already_AddRefed
<
Promise
>
GetNextPromise
(
ErrorResult
&
aRv
)
override
{
return
this
-
>
mIterableObj
-
>
GetNextPromise
(
static_cast
<
AsyncIterableIterator
<
T
>
*
>
(
this
)
aRv
)
;
}
private
:
WrapFunc
mWrapFunc
;
}
;
template
<
typename
T
>
using
WrappableAsyncIterableIterator
=
AsyncIterableIteratorNoReturn
<
T
>
;
}
}
#
endif
