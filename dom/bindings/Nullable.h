#
ifndef
mozilla_dom_Nullable_h
#
define
mozilla_dom_Nullable_h
#
include
<
ostream
>
#
include
<
utility
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsCycleCollectionTraversalCallback
;
namespace
mozilla
:
:
dom
{
template
<
typename
T
>
struct
Nullable
{
private
:
Maybe
<
T
>
mValue
;
public
:
Nullable
(
)
:
mValue
(
)
{
}
MOZ_IMPLICIT
Nullable
(
const
decltype
(
nullptr
)
&
)
:
mValue
(
)
{
}
explicit
Nullable
(
const
T
&
aValue
)
:
mValue
(
)
{
mValue
.
emplace
(
aValue
)
;
}
MOZ_IMPLICIT
Nullable
(
T
&
&
aValue
)
:
mValue
(
)
{
mValue
.
emplace
(
std
:
:
move
(
aValue
)
)
;
}
Nullable
(
Nullable
<
T
>
&
&
aOther
)
:
mValue
(
std
:
:
move
(
aOther
.
mValue
)
)
{
}
Nullable
(
const
Nullable
<
T
>
&
aOther
)
:
mValue
(
aOther
.
mValue
)
{
}
void
operator
=
(
const
Nullable
<
T
>
&
aOther
)
{
mValue
=
aOther
.
mValue
;
}
void
SetValue
(
const
T
&
aArgs
)
{
mValue
.
reset
(
)
;
mValue
.
emplace
(
aArgs
)
;
}
void
SetValue
(
T
&
&
aArgs
)
{
mValue
.
reset
(
)
;
mValue
.
emplace
(
std
:
:
move
(
aArgs
)
)
;
}
T
&
SetValue
(
)
{
if
(
mValue
.
isNothing
(
)
)
{
mValue
.
emplace
(
)
;
}
return
mValue
.
ref
(
)
;
}
void
SetNull
(
)
{
mValue
.
reset
(
)
;
}
const
T
&
Value
(
)
const
{
return
mValue
.
ref
(
)
;
}
T
&
Value
(
)
{
return
mValue
.
ref
(
)
;
}
bool
IsNull
(
)
const
{
return
mValue
.
isNothing
(
)
;
}
bool
Equals
(
const
Nullable
<
T
>
&
aOtherNullable
)
const
{
return
mValue
=
=
aOtherNullable
.
mValue
;
}
bool
operator
=
=
(
const
Nullable
<
T
>
&
aOtherNullable
)
const
{
return
Equals
(
aOtherNullable
)
;
}
bool
operator
!
=
(
const
Nullable
<
T
>
&
aOtherNullable
)
const
{
return
!
Equals
(
aOtherNullable
)
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
Nullable
&
aNullable
)
{
return
aStream
<
<
aNullable
.
mValue
;
}
}
;
template
<
typename
T
>
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
Nullable
<
T
>
&
aNullable
const
char
*
aName
uint32_t
aFlags
=
0
)
{
if
(
!
aNullable
.
IsNull
(
)
)
{
ImplCycleCollectionTraverse
(
aCallback
aNullable
.
Value
(
)
aName
aFlags
)
;
}
}
template
<
typename
T
>
void
ImplCycleCollectionUnlink
(
Nullable
<
T
>
&
aNullable
)
{
if
(
!
aNullable
.
IsNull
(
)
)
{
ImplCycleCollectionUnlink
(
aNullable
.
Value
(
)
)
;
}
}
}
#
endif
