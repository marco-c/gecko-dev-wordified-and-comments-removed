#
ifndef
mozilla_dom_Exceptions_h__
#
define
mozilla_dom_Exceptions_h__
#
include
<
stdint
.
h
>
#
include
"
jspubtd
.
h
"
#
include
"
nsIException
.
h
"
#
include
"
nsStringGlue
.
h
"
class
nsIStackFrame
;
class
nsPIDOMWindowInner
;
template
<
class
T
>
struct
already_AddRefed
;
namespace
mozilla
{
namespace
dom
{
class
Exception
;
bool
Throw
(
JSContext
*
cx
nsresult
rv
const
nsACString
&
message
=
EmptyCString
(
)
)
;
void
ThrowAndReport
(
nsPIDOMWindowInner
*
aWindow
nsresult
aRv
)
;
bool
ThrowExceptionObject
(
JSContext
*
aCx
Exception
*
aException
)
;
bool
ThrowExceptionObject
(
JSContext
*
aCx
nsIException
*
aException
)
;
already_AddRefed
<
Exception
>
CreateException
(
JSContext
*
aCx
nsresult
aRv
const
nsACString
&
aMessage
=
EmptyCString
(
)
)
;
already_AddRefed
<
nsIStackFrame
>
GetCurrentJSStack
(
)
;
class
MOZ_STACK_CLASS
AutoForceSetExceptionOnContext
{
private
:
JSContext
*
mCx
;
bool
mOldValue
;
public
:
explicit
AutoForceSetExceptionOnContext
(
JSContext
*
aCx
)
;
~
AutoForceSetExceptionOnContext
(
)
;
}
;
namespace
exceptions
{
already_AddRefed
<
nsIStackFrame
>
CreateStack
(
JSContext
*
aCx
int32_t
aMaxDepth
=
-
1
)
;
}
}
}
#
endif
