#
ifndef
mozilla_dom_Exceptions_h__
#
define
mozilla_dom_Exceptions_h__
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
nsString
.
h
"
class
nsIStackFrame
;
class
nsPIDOMWindowInner
;
template
<
class
T
>
struct
already_AddRefed
;
namespace
mozilla
:
:
dom
{
class
Exception
;
bool
Throw
(
JSContext
*
cx
nsresult
rv
const
nsACString
&
message
=
"
"
_ns
)
;
void
ThrowAndReport
(
nsPIDOMWindowInner
*
aWindow
nsresult
aRv
)
;
void
ThrowExceptionObject
(
JSContext
*
aCx
Exception
*
aException
)
;
already_AddRefed
<
Exception
>
CreateException
(
nsresult
aRv
const
nsACString
&
aMessage
=
"
"
_ns
)
;
already_AddRefed
<
nsIStackFrame
>
GetCurrentJSStack
(
int32_t
aMaxDepth
=
-
1
)
;
namespace
exceptions
{
already_AddRefed
<
nsIStackFrame
>
CreateStack
(
JSContext
*
aCx
JS
:
:
StackCapture
&
&
aCaptureMode
)
;
already_AddRefed
<
nsIStackFrame
>
CreateStack
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aStack
)
;
}
}
#
endif
