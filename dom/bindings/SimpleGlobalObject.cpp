#
include
"
mozilla
/
dom
/
SimpleGlobalObject
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
SimpleGlobalObject
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
SimpleGlobalObject
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
tmp
-
>
UnlinkHostObjectURIs
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
SimpleGlobalObject
)
tmp
-
>
TraverseHostObjectURIs
(
cb
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE
(
SimpleGlobalObject
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
SimpleGlobalObject
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
SimpleGlobalObject
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
SimpleGlobalObject
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsIGlobalObject
)
NS_INTERFACE_MAP_END
static
void
SimpleGlobal_finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
SimpleGlobalObject
*
globalObject
=
static_cast
<
SimpleGlobalObject
*
>
(
JS_GetPrivate
(
obj
)
)
;
if
(
globalObject
)
{
globalObject
-
>
ClearWrapper
(
obj
)
;
NS_RELEASE
(
globalObject
)
;
}
}
static
size_t
SimpleGlobal_moved
(
JSObject
*
obj
JSObject
*
old
)
{
SimpleGlobalObject
*
globalObject
=
static_cast
<
SimpleGlobalObject
*
>
(
JS_GetPrivate
(
obj
)
)
;
if
(
globalObject
)
{
globalObject
-
>
UpdateWrapper
(
obj
old
)
;
}
return
0
;
}
static
const
JSClassOps
SimpleGlobalClassOps
=
{
nullptr
nullptr
nullptr
JS_NewEnumerateStandardClasses
JS_ResolveStandardClass
JS_MayResolveStandardClass
SimpleGlobal_finalize
nullptr
nullptr
nullptr
JS_GlobalObjectTraceHook
}
;
static
const
js
:
:
ClassExtension
SimpleGlobalClassExtension
=
{
SimpleGlobal_moved
}
;
const
JSClass
SimpleGlobalClass
=
{
"
"
JSCLASS_GLOBAL_FLAGS
|
JSCLASS_HAS_PRIVATE
|
JSCLASS_PRIVATE_IS_NSISUPPORTS
|
JSCLASS_FOREGROUND_FINALIZE
&
SimpleGlobalClassOps
JS_NULL_CLASS_SPEC
&
SimpleGlobalClassExtension
JS_NULL_OBJECT_OPS
}
;
JSObject
*
SimpleGlobalObject
:
:
Create
(
GlobalType
globalType
JS
:
:
Handle
<
JS
:
:
Value
>
proto
)
{
JS
:
:
Rooted
<
JSObject
*
>
global
(
RootingCx
(
)
)
;
{
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
RealmOptions
options
;
options
.
creationOptions
(
)
.
setInvisibleToDebugger
(
true
)
.
setNewCompartmentInSystemZone
(
)
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
NullPrincipal
:
:
CreateWithoutOriginAttributes
(
)
;
options
.
creationOptions
(
)
.
setTrace
(
xpc
:
:
TraceXPCGlobal
)
;
global
=
xpc
:
:
CreateGlobalObject
(
cx
&
SimpleGlobalClass
nsJSPrincipals
:
:
get
(
principal
)
options
)
;
}
else
{
global
=
JS_NewGlobalObject
(
cx
&
SimpleGlobalClass
nullptr
JS
:
:
DontFireOnNewGlobalHook
options
)
;
}
if
(
!
global
)
{
jsapi
.
ClearException
(
)
;
return
nullptr
;
}
JSAutoRealm
ar
(
cx
global
)
;
RefPtr
<
SimpleGlobalObject
>
globalObject
=
new
SimpleGlobalObject
(
global
globalType
)
;
JS_SetPrivate
(
global
globalObject
.
forget
(
)
.
take
(
)
)
;
if
(
proto
.
isObjectOrNull
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
protoObj
(
cx
proto
.
toObjectOrNull
(
)
)
;
if
(
!
JS_WrapObject
(
cx
&
protoObj
)
)
{
jsapi
.
ClearException
(
)
;
return
nullptr
;
}
if
(
!
JS_SplicePrototype
(
cx
global
protoObj
)
)
{
jsapi
.
ClearException
(
)
;
return
nullptr
;
}
}
else
if
(
!
proto
.
isUndefined
(
)
)
{
return
nullptr
;
}
JS_FireOnNewGlobalObject
(
cx
global
)
;
}
return
global
;
}
SimpleGlobalObject
:
:
GlobalType
SimpleGlobalObject
:
:
SimpleGlobalType
(
JSObject
*
obj
)
{
if
(
js
:
:
GetObjectClass
(
obj
)
!
=
&
SimpleGlobalClass
)
{
return
SimpleGlobalObject
:
:
GlobalType
:
:
NotSimpleGlobal
;
}
SimpleGlobalObject
*
globalObject
=
static_cast
<
SimpleGlobalObject
*
>
(
JS_GetPrivate
(
obj
)
)
;
return
globalObject
-
>
Type
(
)
;
}
}
}
