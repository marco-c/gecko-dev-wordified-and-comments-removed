#
ifndef
mozilla_dom_RemoteObjectProxy_h
#
define
mozilla_dom_RemoteObjectProxy_h
#
include
"
js
/
Proxy
.
h
"
#
include
"
mozilla
/
dom
/
MaybeCrossOriginObject
.
h
"
#
include
"
mozilla
/
dom
/
PrototypeList
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RemoteObjectProxyBase
:
public
js
:
:
BaseProxyHandler
public
MaybeCrossOriginObjectMixins
{
protected
:
explicit
constexpr
RemoteObjectProxyBase
(
prototypes
:
:
ID
aPrototypeID
)
:
BaseProxyHandler
(
&
sCrossOriginProxyFamily
false
)
mPrototypeID
(
aPrototypeID
)
{
}
public
:
bool
finalizeInBackground
(
const
JS
:
:
Value
&
priv
)
const
final
{
return
false
;
}
bool
getOwnPropertyDescriptor
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
const
override
;
bool
ownPropertyKeys
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandleVector
<
jsid
>
aProps
)
const
override
;
bool
defineProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
aDesc
JS
:
:
ObjectOpResult
&
result
)
const
final
;
bool
delete_
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
ObjectOpResult
&
aResult
)
const
final
;
bool
getPrototype
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandle
<
JSObject
*
>
aProtop
)
const
final
;
bool
setPrototype
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JSObject
*
>
aProto
JS
:
:
ObjectOpResult
&
aResult
)
const
final
;
bool
getPrototypeIfOrdinary
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
bool
*
aIsOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
aProtop
)
const
final
;
bool
preventExtensions
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
ObjectOpResult
&
aResult
)
const
final
;
bool
isExtensible
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
bool
*
aExtensible
)
const
final
;
bool
get
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aVp
)
const
final
;
bool
set
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aReceiver
JS
:
:
ObjectOpResult
&
aResult
)
const
final
;
bool
hasOwn
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
bool
*
aBp
)
const
override
;
bool
getOwnEnumerablePropertyKeys
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandleVector
<
jsid
>
aProps
)
const
override
;
const
char
*
className
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
)
const
final
;
bool
isCallable
(
JSObject
*
aObj
)
const
final
{
return
false
;
}
bool
isConstructor
(
JSObject
*
aObj
)
const
final
{
return
false
;
}
virtual
void
NoteChildren
(
JSObject
*
aProxy
nsCycleCollectionTraversalCallback
&
aCb
)
const
=
0
;
static
void
*
GetNative
(
JSObject
*
aProxy
)
{
return
js
:
:
GetProxyPrivate
(
aProxy
)
.
toPrivate
(
)
;
}
static
inline
bool
IsRemoteObjectProxy
(
JSObject
*
aProxy
prototypes
:
:
ID
aProtoID
)
{
const
js
:
:
BaseProxyHandler
*
handler
=
js
:
:
GetProxyHandler
(
aProxy
)
;
return
handler
-
>
family
(
)
=
=
&
sCrossOriginProxyFamily
&
&
static_cast
<
const
RemoteObjectProxyBase
*
>
(
handler
)
-
>
mPrototypeID
=
=
aProtoID
;
}
static
inline
bool
IsRemoteObjectProxy
(
JSObject
*
aProxy
)
{
const
js
:
:
BaseProxyHandler
*
handler
=
js
:
:
GetProxyHandler
(
aProxy
)
;
return
handler
-
>
family
(
)
=
=
&
sCrossOriginProxyFamily
;
}
protected
:
void
GetOrCreateProxyObject
(
JSContext
*
aCx
void
*
aNative
const
js
:
:
Class
*
aClasp
JS
:
:
MutableHandle
<
JSObject
*
>
aProxy
bool
&
aNewObjectCreated
)
const
;
const
prototypes
:
:
ID
mPrototypeID
;
static
const
char
sCrossOriginProxyFamily
;
}
;
template
<
class
Native
JSPropertySpec
*
P
JSFunctionSpec
*
F
>
class
RemoteObjectProxy
:
public
RemoteObjectProxyBase
{
public
:
void
finalize
(
JSFreeOp
*
aFop
JSObject
*
aProxy
)
const
final
{
auto
native
=
static_cast
<
Native
*
>
(
GetNative
(
aProxy
)
)
;
RefPtr
<
Native
>
self
(
dont_AddRef
(
native
)
)
;
}
void
GetProxyObject
(
JSContext
*
aCx
Native
*
aNative
JS
:
:
MutableHandle
<
JSObject
*
>
aProxy
)
const
{
bool
objectCreated
=
false
;
GetOrCreateProxyObject
(
aCx
aNative
&
sClass
aProxy
objectCreated
)
;
if
(
objectCreated
)
{
NS_ADDREF
(
aNative
)
;
}
}
protected
:
using
RemoteObjectProxyBase
:
:
RemoteObjectProxyBase
;
private
:
bool
EnsureHolder
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
MutableHandle
<
JSObject
*
>
aHolder
)
const
final
{
return
MaybeCrossOriginObjectMixins
:
:
EnsureHolder
(
aCx
aProxy
0
P
F
aHolder
)
;
}
static
const
js
:
:
Class
sClass
;
}
;
inline
bool
IsRemoteObjectProxy
(
JSObject
*
aObj
prototypes
:
:
ID
aProtoID
)
{
if
(
!
js
:
:
IsProxy
(
aObj
)
)
{
return
false
;
}
return
RemoteObjectProxyBase
:
:
IsRemoteObjectProxy
(
aObj
aProtoID
)
;
}
inline
bool
IsRemoteObjectProxy
(
JSObject
*
aObj
)
{
if
(
!
js
:
:
IsProxy
(
aObj
)
)
{
return
false
;
}
return
RemoteObjectProxyBase
:
:
IsRemoteObjectProxy
(
aObj
)
;
}
}
}
#
endif
