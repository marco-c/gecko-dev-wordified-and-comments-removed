#
include
"
WebIDLGlobalNameHash
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
DOMJSProxyHandler
.
h
"
#
include
"
mozilla
/
dom
/
RegisterBindings
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsTHashtable
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
MOZ_STACK_CLASS
WebIDLNameTableKey
{
explicit
WebIDLNameTableKey
(
JSFlatString
*
aJSString
)
:
mLength
(
js
:
:
GetFlatStringLength
(
aJSString
)
)
{
mNogc
.
emplace
(
)
;
JSLinearString
*
jsString
=
js
:
:
FlatStringToLinearString
(
aJSString
)
;
if
(
js
:
:
LinearStringHasLatin1Chars
(
jsString
)
)
{
mLatin1String
=
reinterpret_cast
<
const
char
*
>
(
js
:
:
GetLatin1LinearStringChars
(
*
mNogc
jsString
)
)
;
mTwoBytesString
=
nullptr
;
mHash
=
mLatin1String
?
HashString
(
mLatin1String
mLength
)
:
0
;
}
else
{
mLatin1String
=
nullptr
;
mTwoBytesString
=
js
:
:
GetTwoByteLinearStringChars
(
*
mNogc
jsString
)
;
mHash
=
mTwoBytesString
?
HashString
(
mTwoBytesString
mLength
)
:
0
;
}
}
explicit
WebIDLNameTableKey
(
const
char
*
aString
size_t
aLength
)
:
mLatin1String
(
aString
)
mTwoBytesString
(
nullptr
)
mLength
(
aLength
)
mHash
(
HashString
(
aString
aLength
)
)
{
MOZ_ASSERT
(
aString
[
aLength
]
=
=
'
\
0
'
)
;
}
Maybe
<
JS
:
:
AutoCheckCannotGC
>
mNogc
;
const
char
*
mLatin1String
;
const
char16_t
*
mTwoBytesString
;
size_t
mLength
;
uint32_t
mHash
;
}
;
struct
WebIDLNameTableEntry
:
public
PLDHashEntryHdr
{
typedef
const
WebIDLNameTableKey
&
KeyType
;
typedef
const
WebIDLNameTableKey
*
KeyTypePointer
;
explicit
WebIDLNameTableEntry
(
KeyTypePointer
aKey
)
:
mNameOffset
(
0
)
mNameLength
(
0
)
mDefine
(
nullptr
)
mEnabled
(
nullptr
)
{
}
WebIDLNameTableEntry
(
WebIDLNameTableEntry
&
&
aEntry
)
:
mNameOffset
(
aEntry
.
mNameOffset
)
mNameLength
(
aEntry
.
mNameLength
)
mDefine
(
aEntry
.
mDefine
)
mEnabled
(
aEntry
.
mEnabled
)
{
}
~
WebIDLNameTableEntry
(
)
{
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
if
(
mNameLength
!
=
aKey
-
>
mLength
)
{
return
false
;
}
const
char
*
name
=
WebIDLGlobalNameHash
:
:
sNames
+
mNameOffset
;
if
(
aKey
-
>
mLatin1String
)
{
return
PodEqual
(
aKey
-
>
mLatin1String
name
aKey
-
>
mLength
)
;
}
return
nsCharTraits
<
char16_t
>
:
:
compareASCII
(
aKey
-
>
mTwoBytesString
name
aKey
-
>
mLength
)
=
=
0
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
aKey
-
>
mHash
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
uint16_t
mNameOffset
;
uint16_t
mNameLength
;
WebIDLGlobalNameHash
:
:
DefineGlobalName
mDefine
;
WebIDLGlobalNameHash
:
:
ConstructorEnabled
*
mEnabled
;
}
;
static
nsTHashtable
<
WebIDLNameTableEntry
>
*
sWebIDLGlobalNames
;
class
WebIDLGlobalNamesHashReporter
final
:
public
nsIMemoryReporter
{
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
~
WebIDLGlobalNamesHashReporter
(
)
{
}
public
:
NS_DECL_ISUPPORTS
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
override
{
int64_t
amount
=
sWebIDLGlobalNames
?
sWebIDLGlobalNames
-
>
ShallowSizeOfIncludingThis
(
MallocSizeOf
)
:
0
;
MOZ_COLLECT_REPORT
(
"
explicit
/
dom
/
webidl
-
globalnames
"
KIND_HEAP
UNITS_BYTES
amount
"
Memory
used
by
the
hash
table
for
WebIDL
'
s
global
names
.
"
)
;
return
NS_OK
;
}
}
;
NS_IMPL_ISUPPORTS
(
WebIDLGlobalNamesHashReporter
nsIMemoryReporter
)
void
WebIDLGlobalNameHash
:
:
Init
(
)
{
sWebIDLGlobalNames
=
new
nsTHashtable
<
WebIDLNameTableEntry
>
(
sCount
)
;
RegisterWebIDLGlobalNames
(
)
;
RegisterStrongMemoryReporter
(
new
WebIDLGlobalNamesHashReporter
(
)
)
;
}
void
WebIDLGlobalNameHash
:
:
Shutdown
(
)
{
delete
sWebIDLGlobalNames
;
}
void
WebIDLGlobalNameHash
:
:
Register
(
uint16_t
aNameOffset
uint16_t
aNameLength
DefineGlobalName
aDefine
ConstructorEnabled
*
aEnabled
)
{
const
char
*
name
=
sNames
+
aNameOffset
;
WebIDLNameTableKey
key
(
name
aNameLength
)
;
WebIDLNameTableEntry
*
entry
=
sWebIDLGlobalNames
-
>
PutEntry
(
key
)
;
entry
-
>
mNameOffset
=
aNameOffset
;
entry
-
>
mNameLength
=
aNameLength
;
entry
-
>
mDefine
=
aDefine
;
entry
-
>
mEnabled
=
aEnabled
;
}
void
WebIDLGlobalNameHash
:
:
Remove
(
const
char
*
aName
uint32_t
aLength
)
{
WebIDLNameTableKey
key
(
aName
aLength
)
;
sWebIDLGlobalNames
-
>
RemoveEntry
(
key
)
;
}
bool
WebIDLGlobalNameHash
:
:
DefineIfEnabled
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
bool
*
aFound
)
{
MOZ_ASSERT
(
JSID_IS_STRING
(
aId
)
"
Check
for
string
id
before
calling
this
!
"
)
;
const
WebIDLNameTableEntry
*
entry
;
{
WebIDLNameTableKey
key
(
JSID_TO_FLAT_STRING
(
aId
)
)
;
JS
:
:
AutoSuppressGCAnalysis
suppress
;
entry
=
sWebIDLGlobalNames
-
>
GetEntry
(
key
)
;
}
if
(
!
entry
)
{
*
aFound
=
false
;
return
true
;
}
*
aFound
=
true
;
ConstructorEnabled
*
checkEnabledForScope
=
entry
-
>
mEnabled
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
aCx
js
:
:
CheckedUnwrap
(
aObj
false
)
)
;
if
(
!
global
)
{
return
Throw
(
aCx
NS_ERROR_DOM_SECURITY_ERR
)
;
}
{
DebugOnly
<
nsGlobalWindow
*
>
win
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
UNWRAP_OBJECT
(
Window
global
win
)
)
)
;
}
if
(
checkEnabledForScope
&
&
!
checkEnabledForScope
(
aCx
global
)
)
{
return
true
;
}
if
(
xpc
:
:
WrapperFactory
:
:
IsXrayWrapper
(
aObj
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
interfaceObject
(
aCx
)
;
{
JSAutoCompartment
ac
(
aCx
global
)
;
interfaceObject
=
entry
-
>
mDefine
(
aCx
global
aId
false
)
;
}
if
(
NS_WARN_IF
(
!
interfaceObject
)
)
{
return
Throw
(
aCx
NS_ERROR_FAILURE
)
;
}
if
(
!
JS_WrapObject
(
aCx
&
interfaceObject
)
)
{
return
Throw
(
aCx
NS_ERROR_FAILURE
)
;
}
FillPropertyDescriptor
(
aDesc
aObj
0
JS
:
:
ObjectValue
(
*
interfaceObject
)
)
;
return
true
;
}
JS
:
:
Rooted
<
JSObject
*
>
interfaceObject
(
aCx
entry
-
>
mDefine
(
aCx
aObj
aId
true
)
)
;
if
(
NS_WARN_IF
(
!
interfaceObject
)
)
{
return
Throw
(
aCx
NS_ERROR_FAILURE
)
;
}
FillPropertyDescriptor
(
aDesc
aObj
JS
:
:
UndefinedValue
(
)
false
)
;
return
true
;
}
bool
WebIDLGlobalNameHash
:
:
MayResolve
(
jsid
aId
)
{
WebIDLNameTableKey
key
(
JSID_TO_FLAT_STRING
(
aId
)
)
;
JS
:
:
AutoSuppressGCAnalysis
suppress
;
return
sWebIDLGlobalNames
-
>
Contains
(
key
)
;
}
void
WebIDLGlobalNameHash
:
:
GetNames
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
nsTArray
<
nsString
>
&
aNames
)
{
for
(
auto
iter
=
sWebIDLGlobalNames
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
WebIDLNameTableEntry
*
entry
=
iter
.
Get
(
)
;
if
(
!
entry
-
>
mEnabled
|
|
entry
-
>
mEnabled
(
aCx
aObj
)
)
{
AppendASCIItoUTF16
(
nsDependentCString
(
sNames
+
entry
-
>
mNameOffset
entry
-
>
mNameLength
)
*
aNames
.
AppendElement
(
)
)
;
}
}
}
}
}
