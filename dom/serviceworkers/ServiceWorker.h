#
ifndef
mozilla_dom_workers_serviceworker_h__
#
define
mozilla_dom_workers_serviceworker_h__
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerBinding
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
class
ServiceWorkerInfo
;
class
ServiceWorkerManager
;
class
SharedWorker
;
bool
ServiceWorkerVisible
(
JSContext
*
aCx
JSObject
*
aObj
)
;
class
ServiceWorker
final
:
public
DOMEventTargetHelper
{
friend
class
ServiceWorkerInfo
;
public
:
NS_DECL_ISUPPORTS_INHERITED
IMPL_EVENT_HANDLER
(
statechange
)
IMPL_EVENT_HANDLER
(
error
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
ServiceWorkerState
State
(
)
const
{
return
mState
;
}
void
SetState
(
ServiceWorkerState
aState
)
{
mState
=
aState
;
}
void
GetScriptURL
(
nsString
&
aURL
)
const
;
void
DispatchStateChange
(
ServiceWorkerState
aState
)
{
DOMEventTargetHelper
:
:
DispatchTrustedEvent
(
NS_LITERAL_STRING
(
"
statechange
"
)
)
;
}
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
private
:
ServiceWorker
(
nsPIDOMWindowInner
*
aWindow
ServiceWorkerInfo
*
aInfo
)
;
~
ServiceWorker
(
)
;
ServiceWorkerState
mState
;
const
RefPtr
<
ServiceWorkerInfo
>
mInfo
;
}
;
}
}
}
#
endif
