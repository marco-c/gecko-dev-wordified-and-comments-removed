#
ifndef
mozilla_dom_serviceworker_h__
#
define
mozilla_dom_serviceworker_h__
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerUtils
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
ServiceWorkerCloneData
;
struct
StructuredSerializeOptions
;
#
define
NS_DOM_SERVICEWORKER_IID
\
{
\
0xd42e0611
0x3647
0x4319
{
\
0xae
0x05
0x19
0x89
0x59
0xba
0x99
0x5e
\
}
\
}
bool
ServiceWorkerVisible
(
JSContext
*
aCx
JSObject
*
aObj
)
;
class
ServiceWorker
final
:
public
DOMEventTargetHelper
{
public
:
class
Inner
{
public
:
virtual
void
AddServiceWorker
(
ServiceWorker
*
aWorker
)
=
0
;
virtual
void
RemoveServiceWorker
(
ServiceWorker
*
aWorker
)
=
0
;
virtual
void
GetRegistration
(
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
=
0
;
virtual
void
PostMessage
(
RefPtr
<
ServiceWorkerCloneData
>
&
&
aData
const
ClientInfo
&
aClientInfo
const
ClientState
&
aClientState
)
=
0
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
}
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_DOM_SERVICEWORKER_IID
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServiceWorker
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
statechange
)
IMPL_EVENT_HANDLER
(
error
)
static
already_AddRefed
<
ServiceWorker
>
Create
(
nsIGlobalObject
*
aOwner
const
ServiceWorkerDescriptor
&
aDescriptor
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
ServiceWorkerState
State
(
)
const
;
void
SetState
(
ServiceWorkerState
aState
)
;
void
MaybeDispatchStateChangeEvent
(
)
;
void
GetScriptURL
(
nsString
&
aURL
)
const
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
StructuredSerializeOptions
&
aOptions
ErrorResult
&
aRv
)
;
const
ServiceWorkerDescriptor
&
Descriptor
(
)
const
;
void
DisconnectFromOwner
(
)
override
;
private
:
ServiceWorker
(
nsIGlobalObject
*
aWindow
const
ServiceWorkerDescriptor
&
aDescriptor
Inner
*
aInner
)
;
~
ServiceWorker
(
)
;
void
MaybeAttachToRegistration
(
ServiceWorkerRegistration
*
aRegistration
)
;
ServiceWorkerDescriptor
mDescriptor
;
RefPtr
<
Inner
>
mInner
;
RefPtr
<
ServiceWorkerRegistration
>
mRegistration
;
ServiceWorkerState
mLastNotifiedState
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
ServiceWorker
NS_DOM_SERVICEWORKER_IID
)
}
#
endif
