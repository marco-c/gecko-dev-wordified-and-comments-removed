#
ifndef
_mozilla_dom_ServiceWorkerDescriptor_h
#
define
_mozilla_dom_ServiceWorkerDescriptor_h
class
nsIPrincipal
;
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
IPCServiceWorkerDescriptor
;
enum
class
ServiceWorkerState
:
uint8_t
;
class
ServiceWorkerDescriptor
final
{
UniquePtr
<
IPCServiceWorkerDescriptor
>
mData
;
public
:
ServiceWorkerDescriptor
(
uint64_t
aId
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
const
nsACString
&
aScriptURL
ServiceWorkerState
aState
)
;
ServiceWorkerDescriptor
(
uint64_t
aId
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
const
nsACString
&
aScriptURL
ServiceWorkerState
aState
)
;
explicit
ServiceWorkerDescriptor
(
const
IPCServiceWorkerDescriptor
&
aDescriptor
)
;
ServiceWorkerDescriptor
(
const
ServiceWorkerDescriptor
&
aRight
)
;
ServiceWorkerDescriptor
&
operator
=
(
const
ServiceWorkerDescriptor
&
aRight
)
;
ServiceWorkerDescriptor
(
ServiceWorkerDescriptor
&
&
aRight
)
;
ServiceWorkerDescriptor
&
operator
=
(
ServiceWorkerDescriptor
&
&
aRight
)
;
~
ServiceWorkerDescriptor
(
)
;
bool
operator
=
=
(
const
ServiceWorkerDescriptor
&
aRight
)
const
;
uint64_t
Id
(
)
const
;
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
PrincipalInfo
(
)
const
;
const
nsCString
&
Scope
(
)
const
;
const
nsCString
&
ScriptURL
(
)
const
;
ServiceWorkerState
State
(
)
const
;
void
SetState
(
ServiceWorkerState
aState
)
;
const
IPCServiceWorkerDescriptor
&
ToIPC
(
)
const
;
}
;
}
}
#
endif
