#
ifndef
mozilla_dom_fetcheventopproxychild_h__
#
define
mozilla_dom_fetcheventopproxychild_h__
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ServiceWorkerOp
.
h
"
#
include
"
ServiceWorkerOpPromise
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
InternalRequest
.
h
"
#
include
"
mozilla
/
dom
/
PFetchEventOpProxyChild
.
h
"
namespace
mozilla
:
:
dom
{
class
InternalRequest
;
class
InternalResponse
;
class
ParentToChildServiceWorkerFetchEventOpArgs
;
class
FetchEventOpProxyChild
final
:
public
PFetchEventOpProxyChild
{
friend
class
PFetchEventOpProxyChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FetchEventOpProxyChild
override
)
;
FetchEventOpProxyChild
(
)
=
default
;
void
Initialize
(
const
ParentToChildServiceWorkerFetchEventOpArgs
&
aArgs
)
;
SafeRefPtr
<
InternalRequest
>
ExtractInternalRequest
(
)
;
RefPtr
<
FetchEventPreloadResponseAvailablePromise
>
GetPreloadResponseAvailablePromise
(
)
;
RefPtr
<
FetchEventPreloadResponseTimingPromise
>
GetPreloadResponseTimingPromise
(
)
;
RefPtr
<
FetchEventPreloadResponseEndPromise
>
GetPreloadResponseEndPromise
(
)
;
private
:
~
FetchEventOpProxyChild
(
)
=
default
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadResponse
(
ParentToChildInternalResponse
&
&
aResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadResponseTiming
(
ResponseTiming
&
&
aTiming
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadResponseEnd
(
ResponseEndArgs
&
&
aArgs
)
;
void
ActorDestroy
(
ActorDestroyReason
)
override
;
MozPromiseRequestHolder
<
FetchEventRespondWithPromise
>
mRespondWithPromiseRequestHolder
;
RefPtr
<
FetchEventOp
>
mOp
;
SafeRefPtr
<
InternalRequest
>
mInternalRequest
;
RefPtr
<
FetchEventPreloadResponseAvailablePromise
:
:
Private
>
mPreloadResponseAvailablePromise
;
RefPtr
<
FetchEventPreloadResponseTimingPromise
:
:
Private
>
mPreloadResponseTimingPromise
;
RefPtr
<
FetchEventPreloadResponseEndPromise
:
:
Private
>
mPreloadResponseEndPromise
;
Maybe
<
ServiceWorkerOpResult
>
mCachedOpResult
;
}
;
}
#
endif
