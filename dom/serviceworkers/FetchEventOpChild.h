#
ifndef
mozilla_dom_fetcheventopchild_h__
#
define
mozilla_dom_fetcheventopchild_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
FetchService
.
h
"
#
include
"
mozilla
/
dom
/
PFetchEventOpChild
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerOpArgs
.
h
"
class
nsIInterceptedChannel
;
namespace
mozilla
{
namespace
dom
{
class
KeepAliveToken
;
class
PRemoteWorkerControllerChild
;
class
ServiceWorkerRegistrationInfo
;
class
FetchEventOpChild
final
:
public
PFetchEventOpChild
{
friend
class
PFetchEventOpChild
;
public
:
static
RefPtr
<
GenericPromise
>
SendFetchEvent
(
PRemoteWorkerControllerChild
*
aManager
ServiceWorkerFetchEventOpArgs
&
&
aArgs
nsCOMPtr
<
nsIInterceptedChannel
>
aInterceptedChannel
RefPtr
<
ServiceWorkerRegistrationInfo
>
aRegistrationInfo
RefPtr
<
FetchServiceResponsePromise
>
&
&
aPreloadResponseReadyPromise
RefPtr
<
KeepAliveToken
>
&
&
aKeepAliveToken
)
;
~
FetchEventOpChild
(
)
;
private
:
FetchEventOpChild
(
ServiceWorkerFetchEventOpArgs
&
&
aArgs
nsCOMPtr
<
nsIInterceptedChannel
>
&
&
aInterceptedChannel
RefPtr
<
ServiceWorkerRegistrationInfo
>
&
&
aRegistrationInfo
RefPtr
<
FetchServiceResponsePromise
>
&
&
aPreloadResponseReadyPromise
RefPtr
<
KeepAliveToken
>
&
&
aKeepAliveToken
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncLog
(
const
nsCString
&
aScriptSpec
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColumnNumber
const
nsCString
&
aMessageName
nsTArray
<
nsString
>
&
&
aParams
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRespondWith
(
IPCFetchEventRespondWithResult
&
&
aResult
)
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
ServiceWorkerFetchEventOpResult
&
aResult
)
;
void
ActorDestroy
(
ActorDestroyReason
)
override
;
nsresult
StartSynthesizedResponse
(
IPCSynthesizeResponseArgs
&
&
aArgs
)
;
void
SynthesizeResponse
(
IPCSynthesizeResponseArgs
&
&
aArgs
)
;
void
ResetInterception
(
bool
aBypass
)
;
void
CancelInterception
(
nsresult
aStatus
)
;
void
MaybeScheduleRegistrationUpdate
(
)
const
;
ServiceWorkerFetchEventOpArgs
mArgs
;
nsCOMPtr
<
nsIInterceptedChannel
>
mInterceptedChannel
;
RefPtr
<
ServiceWorkerRegistrationInfo
>
mRegistration
;
RefPtr
<
KeepAliveToken
>
mKeepAliveToken
;
bool
mInterceptedChannelHandled
=
false
;
MozPromiseHolder
<
GenericPromise
>
mPromiseHolder
;
bool
mWasSent
=
false
;
MozPromiseRequestHolder
<
FetchServiceResponsePromise
>
mPreloadResponseReadyPromiseRequestHolder
;
}
;
}
}
#
endif
