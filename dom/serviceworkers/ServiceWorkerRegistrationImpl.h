#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
ServiceWorkerManager
.
h
"
#
include
"
ServiceWorkerRegistration
.
h
"
#
include
"
ServiceWorkerRegistrationListener
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PushManager
;
class
ServiceWorker
;
class
ServiceWorkerRegistrationMainThread
final
:
public
ServiceWorkerRegistration
:
:
Inner
public
ServiceWorkerRegistrationListener
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerRegistrationMainThread
override
)
explicit
ServiceWorkerRegistrationMainThread
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
void
SetServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
override
;
void
ClearServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
override
;
already_AddRefed
<
Promise
>
Update
(
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
Unregister
(
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
ShowNotification
(
JSContext
*
aCx
const
nsAString
&
aTitle
const
NotificationOptions
&
aOptions
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
GetNotifications
(
const
GetNotificationOptions
&
aOptions
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
PushManager
>
GetPushManager
(
JSContext
*
aCx
ErrorResult
&
aRv
)
override
;
void
UpdateFound
(
)
override
;
void
UpdateState
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
;
void
RegistrationRemoved
(
)
override
;
void
GetScope
(
nsAString
&
aScope
)
const
override
{
aScope
=
mScope
;
}
bool
MatchesDescriptor
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
;
private
:
~
ServiceWorkerRegistrationMainThread
(
)
;
void
StartListeningForEvents
(
)
;
void
StopListeningForEvents
(
)
;
ServiceWorkerRegistration
*
mOuter
;
const
nsString
mScope
;
bool
mListeningForEvents
;
}
;
class
WorkerListener
;
class
ServiceWorkerRegistrationWorkerThread
final
:
public
ServiceWorkerRegistration
:
:
Inner
public
WorkerHolder
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerRegistrationWorkerThread
override
)
ServiceWorkerRegistrationWorkerThread
(
WorkerPrivate
*
aWorkerPrivate
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
void
SetServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
override
;
void
ClearServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
override
;
already_AddRefed
<
Promise
>
Update
(
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
Unregister
(
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
ShowNotification
(
JSContext
*
aCx
const
nsAString
&
aTitle
const
NotificationOptions
&
aOptions
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
GetNotifications
(
const
GetNotificationOptions
&
aOptions
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
PushManager
>
GetPushManager
(
JSContext
*
aCx
ErrorResult
&
aRv
)
override
;
bool
Notify
(
WorkerStatus
aStatus
)
override
;
void
UpdateFound
(
)
;
private
:
~
ServiceWorkerRegistrationWorkerThread
(
)
;
void
InitListener
(
)
;
void
ReleaseListener
(
)
;
ServiceWorkerRegistration
*
mOuter
;
WorkerPrivate
*
mWorkerPrivate
;
const
nsString
mScope
;
RefPtr
<
WorkerListener
>
mListener
;
}
;
}
}
