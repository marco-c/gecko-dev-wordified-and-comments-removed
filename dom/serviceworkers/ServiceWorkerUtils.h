#
ifndef
_mozilla_dom_ServiceWorkerUtils_h
#
define
_mozilla_dom_ServiceWorkerUtils_h
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
IPCNavigationPreloadState
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationDescriptor
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIURI
;
namespace
mozilla
{
class
CopyableErrorResult
;
class
ErrorResult
;
namespace
dom
{
class
ClientInfo
;
class
ServiceWorkerRegistrationData
;
class
ServiceWorkerRegistrationDescriptor
;
struct
NavigationPreloadState
;
using
ServiceWorkerRegistrationPromise
=
MozPromise
<
ServiceWorkerRegistrationDescriptor
CopyableErrorResult
false
>
;
using
ServiceWorkerRegistrationListPromise
=
MozPromise
<
CopyableTArray
<
ServiceWorkerRegistrationDescriptor
>
CopyableErrorResult
false
>
;
using
NavigationPreloadStatePromise
=
MozPromise
<
IPCNavigationPreloadState
CopyableErrorResult
false
>
;
using
ServiceWorkerRegistrationCallback
=
std
:
:
function
<
void
(
const
ServiceWorkerRegistrationDescriptor
&
)
>
;
using
ServiceWorkerRegistrationListCallback
=
std
:
:
function
<
void
(
const
nsTArray
<
ServiceWorkerRegistrationDescriptor
>
&
)
>
;
using
ServiceWorkerBoolCallback
=
std
:
:
function
<
void
(
bool
)
>
;
using
ServiceWorkerFailureCallback
=
std
:
:
function
<
void
(
ErrorResult
&
&
)
>
;
using
NavigationPreloadGetStateCallback
=
std
:
:
function
<
void
(
NavigationPreloadState
&
&
)
>
;
bool
ServiceWorkerRegistrationDataIsValid
(
const
ServiceWorkerRegistrationData
&
aData
)
;
void
ServiceWorkerScopeAndScriptAreValid
(
const
ClientInfo
&
aClientInfo
nsIURI
*
aScopeURI
nsIURI
*
aScriptURI
ErrorResult
&
aRv
)
;
}
}
#
endif
