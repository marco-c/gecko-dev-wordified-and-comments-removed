#
include
"
ServiceWorkerRegistrationImpl
.
h
"
#
include
"
ipc
/
ErrorIPCUtils
.
h
"
#
include
"
mozilla
/
dom
/
DOMPrefs
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseWorkerProxy
.
h
"
#
include
"
mozilla
/
dom
/
PushManagerBinding
.
h
"
#
include
"
mozilla
/
dom
/
PushManager
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationBinding
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
ServiceWorker
.
h
"
#
include
"
ServiceWorkerManager
.
h
"
#
include
"
ServiceWorkerPrivate
.
h
"
#
include
"
ServiceWorkerRegistration
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIServiceWorkerManager
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
ServiceWorkerRegistrationMainThread
:
:
ServiceWorkerRegistrationMainThread
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
:
mOuter
(
nullptr
)
mDescriptor
(
aDescriptor
)
mScope
(
NS_ConvertUTF8toUTF16
(
aDescriptor
.
Scope
(
)
)
)
mListeningForEvents
(
false
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
ServiceWorkerRegistrationMainThread
:
:
~
ServiceWorkerRegistrationMainThread
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mListeningForEvents
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
StartListeningForEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mListeningForEvents
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
)
{
swm
-
>
AddRegistrationEventListener
(
mScope
this
)
;
mListeningForEvents
=
true
;
}
}
void
ServiceWorkerRegistrationMainThread
:
:
StopListeningForEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mListeningForEvents
)
{
return
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
)
{
swm
-
>
RemoveRegistrationEventListener
(
mScope
this
)
;
}
mListeningForEvents
=
false
;
}
void
ServiceWorkerRegistrationMainThread
:
:
RegistrationRemovedInternal
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mOuter
)
{
mOuter
-
>
RegistrationRemoved
(
)
;
}
StopListeningForEvents
(
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
UpdateFound
(
)
{
mOuter
-
>
DispatchTrustedEvent
(
NS_LITERAL_STRING
(
"
updatefound
"
)
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
UpdateState
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
{
mDescriptor
=
aDescriptor
;
mOuter
-
>
UpdateState
(
aDescriptor
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
RegistrationRemoved
(
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
"
ServiceWorkerRegistrationMainThread
:
:
RegistrationRemoved
"
this
&
ServiceWorkerRegistrationMainThread
:
:
RegistrationRemovedInternal
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
bool
ServiceWorkerRegistrationMainThread
:
:
MatchesDescriptor
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
{
return
mOuter
-
>
MatchesDescriptor
(
aDescriptor
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
SetServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aReg
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
mOuter
=
aReg
;
StartListeningForEvents
(
)
;
}
void
ServiceWorkerRegistrationMainThread
:
:
ClearServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
MOZ_ASSERT_IF
(
mOuter
mOuter
=
=
aReg
)
;
StopListeningForEvents
(
)
;
mOuter
=
nullptr
;
}
namespace
{
void
UpdateInternal
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
ServiceWorkerUpdateFinishCallback
*
aCallback
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aPrincipal
)
;
MOZ_ASSERT
(
aCallback
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
!
swm
)
{
return
;
}
swm
-
>
Update
(
aPrincipal
aScope
aCallback
)
;
}
class
MainThreadUpdateCallback
final
:
public
ServiceWorkerUpdateFinishCallback
{
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
mPromise
;
~
MainThreadUpdateCallback
(
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_ABORT_ERR
__func__
)
;
}
public
:
MainThreadUpdateCallback
(
)
:
mPromise
(
new
ServiceWorkerRegistrationPromise
:
:
Private
(
__func__
)
)
{
}
void
UpdateSucceeded
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
override
{
mPromise
-
>
Resolve
(
aRegistration
-
>
Descriptor
(
)
__func__
)
;
}
void
UpdateFailed
(
ErrorResult
&
aStatus
)
override
{
mPromise
-
>
Reject
(
std
:
:
move
(
aStatus
)
__func__
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
Promise
(
)
const
{
return
mPromise
;
}
}
;
class
WorkerThreadUpdateCallback
final
:
public
ServiceWorkerUpdateFinishCallback
{
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
mPromise
;
~
WorkerThreadUpdateCallback
(
)
=
default
;
public
:
WorkerThreadUpdateCallback
(
RefPtr
<
ThreadSafeWorkerRef
>
&
&
aWorkerRef
ServiceWorkerRegistrationPromise
:
:
Private
*
aPromise
)
:
mWorkerRef
(
std
:
:
move
(
aWorkerRef
)
)
mPromise
(
aPromise
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
UpdateSucceeded
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
override
{
mPromise
-
>
Resolve
(
aRegistration
-
>
Descriptor
(
)
__func__
)
;
mWorkerRef
=
nullptr
;
}
void
UpdateFailed
(
ErrorResult
&
aStatus
)
override
{
mPromise
-
>
Reject
(
std
:
:
move
(
aStatus
)
__func__
)
;
mWorkerRef
=
nullptr
;
}
}
;
class
SWRUpdateRunnable
final
:
public
Runnable
{
class
TimerCallback
final
:
public
nsITimerCallback
{
RefPtr
<
ServiceWorkerPrivate
>
mPrivate
;
RefPtr
<
Runnable
>
mRunnable
;
public
:
TimerCallback
(
ServiceWorkerPrivate
*
aPrivate
Runnable
*
aRunnable
)
:
mPrivate
(
aPrivate
)
mRunnable
(
aRunnable
)
{
MOZ_ASSERT
(
mPrivate
)
;
MOZ_ASSERT
(
aRunnable
)
;
}
NS_IMETHOD
Notify
(
nsITimer
*
aTimer
)
override
{
mRunnable
-
>
Run
(
)
;
mPrivate
-
>
RemoveISupports
(
aTimer
)
;
return
NS_OK
;
}
NS_DECL_THREADSAFE_ISUPPORTS
private
:
~
TimerCallback
(
)
{
}
}
;
public
:
SWRUpdateRunnable
(
StrongWorkerRef
*
aWorkerRef
ServiceWorkerRegistrationPromise
:
:
Private
*
aPromise
const
ServiceWorkerDescriptor
&
aDescriptor
)
:
Runnable
(
"
dom
:
:
SWRUpdateRunnable
"
)
mMutex
(
"
SWRUpdateRunnable
"
)
mWorkerRef
(
new
ThreadSafeWorkerRef
(
aWorkerRef
)
)
mPromise
(
aPromise
)
mDescriptor
(
aDescriptor
)
mDelayed
(
false
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mWorkerRef
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mPromise
)
;
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ErrorResult
result
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDescriptor
.
GetPrincipal
(
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
NS_OK
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
NS_OK
;
}
RefPtr
<
ServiceWorkerRegistrationInfo
>
registration
=
swm
-
>
GetRegistration
(
principal
mDescriptor
.
Scope
(
)
)
;
if
(
NS_WARN_IF
(
!
registration
)
)
{
return
NS_OK
;
}
RefPtr
<
ServiceWorkerInfo
>
worker
=
registration
-
>
GetByDescriptor
(
mDescriptor
)
;
uint32_t
delay
=
registration
-
>
GetUpdateDelay
(
)
;
if
(
delay
&
&
!
mDelayed
)
{
nsCOMPtr
<
nsITimerCallback
>
cb
=
new
TimerCallback
(
worker
-
>
WorkerPrivate
(
)
this
)
;
Result
<
nsCOMPtr
<
nsITimer
>
nsresult
>
result
=
NS_NewTimerWithCallback
(
cb
delay
nsITimer
:
:
TYPE_ONE_SHOT
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
nsCOMPtr
<
nsITimer
>
timer
=
result
.
unwrapOr
(
nullptr
)
;
if
(
NS_WARN_IF
(
!
timer
)
)
{
return
NS_OK
;
}
mDelayed
=
true
;
if
(
!
worker
-
>
WorkerPrivate
(
)
-
>
MaybeStoreISupports
(
timer
)
)
{
timer
-
>
Cancel
(
)
;
return
NS_OK
;
}
return
NS_OK
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
promise
;
{
MutexAutoLock
lock
(
mMutex
)
;
promise
.
swap
(
mPromise
)
;
}
RefPtr
<
WorkerThreadUpdateCallback
>
cb
=
new
WorkerThreadUpdateCallback
(
std
:
:
move
(
mWorkerRef
)
promise
)
;
UpdateInternal
(
principal
mDescriptor
.
Scope
(
)
cb
)
;
return
NS_OK
;
}
private
:
~
SWRUpdateRunnable
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mPromise
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
}
Mutex
mMutex
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
mPromise
;
const
ServiceWorkerDescriptor
mDescriptor
;
bool
mDelayed
;
}
;
NS_IMPL_ISUPPORTS
(
SWRUpdateRunnable
:
:
TimerCallback
nsITimerCallback
)
class
UnregisterCallback
final
:
public
nsIServiceWorkerUnregisterCallback
{
RefPtr
<
GenericPromise
:
:
Private
>
mPromise
;
public
:
NS_DECL_ISUPPORTS
UnregisterCallback
(
)
:
mPromise
(
new
GenericPromise
:
:
Private
(
__func__
)
)
{
}
NS_IMETHOD
UnregisterSucceeded
(
bool
aState
)
override
{
mPromise
-
>
Resolve
(
aState
__func__
)
;
return
NS_OK
;
}
NS_IMETHOD
UnregisterFailed
(
)
override
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_SECURITY_ERR
__func__
)
;
return
NS_OK
;
}
RefPtr
<
GenericPromise
>
Promise
(
)
const
{
return
mPromise
;
}
private
:
~
UnregisterCallback
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
UnregisterCallback
nsIServiceWorkerUnregisterCallback
)
class
WorkerUnregisterCallback
final
:
public
nsIServiceWorkerUnregisterCallback
{
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
RefPtr
<
GenericPromise
:
:
Private
>
mPromise
;
public
:
NS_DECL_ISUPPORTS
WorkerUnregisterCallback
(
RefPtr
<
ThreadSafeWorkerRef
>
&
&
aWorkerRef
RefPtr
<
GenericPromise
:
:
Private
>
&
&
aPromise
)
:
mWorkerRef
(
std
:
:
move
(
aWorkerRef
)
)
mPromise
(
std
:
:
move
(
aPromise
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mWorkerRef
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mPromise
)
;
}
NS_IMETHOD
UnregisterSucceeded
(
bool
aState
)
override
{
mPromise
-
>
Resolve
(
aState
__func__
)
;
mWorkerRef
=
nullptr
;
return
NS_OK
;
}
NS_IMETHOD
UnregisterFailed
(
)
override
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_SECURITY_ERR
__func__
)
;
mWorkerRef
=
nullptr
;
return
NS_OK
;
}
private
:
~
WorkerUnregisterCallback
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
WorkerUnregisterCallback
nsIServiceWorkerUnregisterCallback
)
;
class
StartUnregisterRunnable
final
:
public
Runnable
{
Mutex
mMutex
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
RefPtr
<
GenericPromise
:
:
Private
>
mPromise
;
const
ServiceWorkerRegistrationDescriptor
mDescriptor
;
~
StartUnregisterRunnable
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mPromise
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
}
public
:
StartUnregisterRunnable
(
StrongWorkerRef
*
aWorkerRef
GenericPromise
:
:
Private
*
aPromise
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
:
Runnable
(
"
dom
:
:
StartUnregisterRunnable
"
)
mMutex
(
"
StartUnregisterRunnable
"
)
mWorkerRef
(
new
ThreadSafeWorkerRef
(
aWorkerRef
)
)
mPromise
(
aPromise
)
mDescriptor
(
aDescriptor
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mWorkerRef
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mPromise
)
;
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDescriptor
.
GetPrincipal
(
)
;
if
(
!
principal
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIServiceWorkerManager
>
swm
=
mozilla
:
:
services
:
:
GetServiceWorkerManager
(
)
;
if
(
!
swm
)
{
mPromise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
NS_OK
;
}
RefPtr
<
GenericPromise
:
:
Private
>
promise
;
{
MutexAutoLock
lock
(
mMutex
)
;
promise
=
mPromise
.
forget
(
)
;
}
RefPtr
<
WorkerUnregisterCallback
>
cb
=
new
WorkerUnregisterCallback
(
std
:
:
move
(
mWorkerRef
)
std
:
:
move
(
promise
)
)
;
nsresult
rv
=
swm
-
>
Unregister
(
principal
cb
NS_ConvertUTF8toUTF16
(
mDescriptor
.
Scope
(
)
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mPromise
-
>
Reject
(
rv
__func__
)
;
return
NS_OK
;
}
return
NS_OK
;
}
}
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerRegistrationMainThread
:
:
Update
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDescriptor
.
GetPrincipal
(
)
;
if
(
!
principal
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
RefPtr
<
MainThreadUpdateCallback
>
cb
=
new
MainThreadUpdateCallback
(
)
;
UpdateInternal
(
principal
NS_ConvertUTF16toUTF8
(
mScope
)
cb
)
;
return
cb
-
>
Promise
(
)
;
}
RefPtr
<
GenericPromise
>
ServiceWorkerRegistrationMainThread
:
:
Unregister
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
)
;
nsCOMPtr
<
nsIServiceWorkerManager
>
swm
=
mozilla
:
:
services
:
:
GetServiceWorkerManager
(
)
;
if
(
!
swm
)
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDescriptor
.
GetPrincipal
(
)
;
if
(
!
principal
)
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
RefPtr
<
UnregisterCallback
>
cb
=
new
UnregisterCallback
(
)
;
nsresult
rv
=
swm
-
>
Unregister
(
principal
cb
NS_ConvertUTF8toUTF16
(
mDescriptor
.
Scope
(
)
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
GenericPromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
return
cb
-
>
Promise
(
)
;
}
class
WorkerListener
final
:
public
ServiceWorkerRegistrationListener
{
const
nsString
mScope
;
bool
mListeningForEvents
;
ServiceWorkerRegistrationWorkerThread
*
mRegistration
;
Mutex
mMutex
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WorkerListener
override
)
WorkerListener
(
ServiceWorkerRegistrationWorkerThread
*
aReg
const
nsAString
&
aScope
)
:
mScope
(
aScope
)
mListeningForEvents
(
false
)
mRegistration
(
aReg
)
mMutex
(
"
WorkerListener
:
:
mMutex
"
)
{
MOZ_ASSERT
(
IsCurrentThreadRunningWorker
(
)
)
;
MOZ_ASSERT
(
mRegistration
)
;
}
void
StartListeningForEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mListeningForEvents
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
)
{
swm
-
>
AddRegistrationEventListener
(
mScope
this
)
;
mListeningForEvents
=
true
;
}
}
void
StopListeningForEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mListeningForEvents
)
{
return
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
swm
)
{
swm
-
>
RemoveRegistrationEventListener
(
mScope
this
)
;
mListeningForEvents
=
false
;
}
}
void
UpdateFound
(
)
override
;
void
UpdateState
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
RegistrationRemoved
(
)
override
;
void
GetScope
(
nsAString
&
aScope
)
const
override
{
aScope
=
mScope
;
}
bool
MatchesDescriptor
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
{
return
false
;
}
void
ClearRegistration
(
)
{
MOZ_ASSERT
(
IsCurrentThreadRunningWorker
(
)
)
;
MutexAutoLock
lock
(
mMutex
)
;
mRegistration
=
nullptr
;
}
private
:
~
WorkerListener
(
)
{
MOZ_ASSERT
(
!
mListeningForEvents
)
;
}
}
;
ServiceWorkerRegistrationWorkerThread
:
:
ServiceWorkerRegistrationWorkerThread
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
:
mOuter
(
nullptr
)
mDescriptor
(
aDescriptor
)
mScope
(
NS_ConvertUTF8toUTF16
(
aDescriptor
.
Scope
(
)
)
)
{
}
ServiceWorkerRegistrationWorkerThread
:
:
~
ServiceWorkerRegistrationWorkerThread
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
}
void
ServiceWorkerRegistrationWorkerThread
:
:
RegistrationRemoved
(
)
{
if
(
mOuter
)
{
mOuter
-
>
RegistrationRemoved
(
)
;
}
}
void
ServiceWorkerRegistrationWorkerThread
:
:
SetServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aReg
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
mOuter
=
aReg
;
InitListener
(
)
;
}
void
ServiceWorkerRegistrationWorkerThread
:
:
ClearServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
MOZ_ASSERT_IF
(
mOuter
mOuter
=
=
aReg
)
;
ReleaseListener
(
)
;
mOuter
=
nullptr
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerRegistrationWorkerThread
:
:
Update
(
)
{
if
(
NS_WARN_IF
(
!
mWorkerRef
-
>
GetPrivate
(
)
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
RefPtr
<
StrongWorkerRef
>
workerRef
=
StrongWorkerRef
:
:
Create
(
mWorkerRef
-
>
GetPrivate
(
)
"
ServiceWorkerRegistration
:
:
Update
"
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
if
(
workerRef
-
>
Private
(
)
-
>
IsLoadingWorkerScript
(
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndResolve
(
mDescriptor
__func__
)
;
}
if
(
NS_WARN_IF
(
!
workerRef
-
>
Private
(
)
-
>
IsServiceWorker
(
)
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
outer
=
new
ServiceWorkerRegistrationPromise
:
:
Private
(
__func__
)
;
RefPtr
<
SWRUpdateRunnable
>
r
=
new
SWRUpdateRunnable
(
workerRef
outer
workerRef
-
>
Private
(
)
-
>
GetServiceWorkerDescriptor
(
)
)
;
nsresult
rv
=
workerRef
-
>
Private
(
)
-
>
DispatchToMainThread
(
r
.
forget
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
outer
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
outer
.
forget
(
)
;
}
return
outer
.
forget
(
)
;
}
RefPtr
<
GenericPromise
>
ServiceWorkerRegistrationWorkerThread
:
:
Unregister
(
)
{
if
(
NS_WARN_IF
(
!
mWorkerRef
-
>
GetPrivate
(
)
)
)
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
RefPtr
<
StrongWorkerRef
>
workerRef
=
StrongWorkerRef
:
:
Create
(
mWorkerRef
-
>
GetPrivate
(
)
__func__
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
if
(
NS_WARN_IF
(
!
workerRef
-
>
Private
(
)
-
>
IsServiceWorker
(
)
)
)
{
return
GenericPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_SECURITY_ERR
__func__
)
;
}
RefPtr
<
GenericPromise
:
:
Private
>
outer
=
new
GenericPromise
:
:
Private
(
__func__
)
;
RefPtr
<
StartUnregisterRunnable
>
r
=
new
StartUnregisterRunnable
(
workerRef
outer
mDescriptor
)
;
nsresult
rv
=
workerRef
-
>
Private
(
)
-
>
DispatchToMainThread
(
r
)
;
if
(
NS_FAILED
(
rv
)
)
{
outer
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
return
outer
.
forget
(
)
;
}
return
outer
.
forget
(
)
;
}
void
ServiceWorkerRegistrationWorkerThread
:
:
InitListener
(
)
{
MOZ_ASSERT
(
!
mListener
)
;
WorkerPrivate
*
worker
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_ASSERT
(
worker
)
;
worker
-
>
AssertIsOnWorkerThread
(
)
;
RefPtr
<
ServiceWorkerRegistrationWorkerThread
>
self
=
this
;
mWorkerRef
=
WeakWorkerRef
:
:
Create
(
worker
[
self
]
(
)
{
self
-
>
ReleaseListener
(
)
;
self
-
>
mOuter
=
nullptr
;
}
)
;
if
(
NS_WARN_IF
(
!
mWorkerRef
)
)
{
return
;
}
mListener
=
new
WorkerListener
(
this
mScope
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
"
dom
:
:
WorkerListener
:
:
StartListeningForEvents
"
mListener
&
WorkerListener
:
:
StartListeningForEvents
)
;
MOZ_ALWAYS_SUCCEEDS
(
worker
-
>
DispatchToMainThread
(
r
.
forget
(
)
)
)
;
}
void
ServiceWorkerRegistrationWorkerThread
:
:
ReleaseListener
(
)
{
if
(
!
mListener
)
{
return
;
}
MOZ_ASSERT
(
IsCurrentThreadRunningWorker
(
)
)
;
mListener
-
>
ClearRegistration
(
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
"
dom
:
:
WorkerListener
:
:
StopListeningForEvents
"
mListener
&
WorkerListener
:
:
StopListeningForEvents
)
;
MOZ_ALWAYS_SUCCEEDS
(
mWorkerRef
-
>
GetPrivate
(
)
-
>
DispatchToMainThread
(
r
.
forget
(
)
)
)
;
mListener
=
nullptr
;
mWorkerRef
=
nullptr
;
}
class
FireUpdateFoundRunnable
final
:
public
WorkerRunnable
{
RefPtr
<
WorkerListener
>
mListener
;
public
:
FireUpdateFoundRunnable
(
WorkerPrivate
*
aWorkerPrivate
WorkerListener
*
aListener
)
:
WorkerRunnable
(
aWorkerPrivate
)
mListener
(
aListener
)
{
MOZ_ASSERT
(
aWorkerPrivate
-
>
IsServiceWorker
(
)
)
;
}
bool
WorkerRun
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
)
override
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
mListener
-
>
UpdateFound
(
)
;
return
true
;
}
}
;
void
WorkerListener
:
:
UpdateFound
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mRegistration
)
{
return
;
}
if
(
NS_IsMainThread
(
)
)
{
RefPtr
<
FireUpdateFoundRunnable
>
r
=
new
FireUpdateFoundRunnable
(
mRegistration
-
>
GetWorkerPrivate
(
lock
)
this
)
;
Unused
<
<
NS_WARN_IF
(
!
r
-
>
Dispatch
(
)
)
;
return
;
}
mRegistration
-
>
UpdateFound
(
)
;
}
class
RegistrationRemovedWorkerRunnable
final
:
public
WorkerRunnable
{
RefPtr
<
WorkerListener
>
mListener
;
public
:
RegistrationRemovedWorkerRunnable
(
WorkerPrivate
*
aWorkerPrivate
WorkerListener
*
aListener
)
:
WorkerRunnable
(
aWorkerPrivate
)
mListener
(
aListener
)
{
MOZ_ASSERT
(
aWorkerPrivate
-
>
IsServiceWorker
(
)
)
;
}
bool
WorkerRun
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
)
override
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
mListener
-
>
RegistrationRemoved
(
)
;
return
true
;
}
}
;
void
WorkerListener
:
:
RegistrationRemoved
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mRegistration
)
{
return
;
}
if
(
NS_IsMainThread
(
)
)
{
RefPtr
<
WorkerRunnable
>
r
=
new
RegistrationRemovedWorkerRunnable
(
mRegistration
-
>
GetWorkerPrivate
(
lock
)
this
)
;
Unused
<
<
r
-
>
Dispatch
(
)
;
StopListeningForEvents
(
)
;
return
;
}
mRegistration
-
>
RegistrationRemoved
(
)
;
}
void
ServiceWorkerRegistrationWorkerThread
:
:
UpdateFound
(
)
{
mOuter
-
>
DispatchTrustedEvent
(
NS_LITERAL_STRING
(
"
updatefound
"
)
)
;
}
WorkerPrivate
*
ServiceWorkerRegistrationWorkerThread
:
:
GetWorkerPrivate
(
const
MutexAutoLock
&
aProofOfLock
)
{
MOZ_ASSERT
(
mWorkerRef
&
&
mWorkerRef
-
>
GetUnsafePrivate
(
)
)
;
return
mWorkerRef
-
>
GetUnsafePrivate
(
)
;
}
}
}
