#
ifndef
mozilla_dom_workers_serviceworkermanager_h
#
define
mozilla_dom_workers_serviceworkermanager_h
#
include
"
nsIServiceWorkerManager
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
ConsoleReportCollector
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
ClientHandle
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrar
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrarTypes
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationInfo
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerUtils
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsIConsoleReportCollector
;
namespace
mozilla
{
class
OriginAttributes
;
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
ServiceWorkerInfo
;
class
ServiceWorkerJobQueue
;
class
ServiceWorkerManagerChild
;
class
ServiceWorkerPrivate
;
class
ServiceWorkerRegistrar
;
class
ServiceWorkerRegistrationListener
;
class
ServiceWorkerUpdateFinishCallback
{
protected
:
virtual
~
ServiceWorkerUpdateFinishCallback
(
)
{
}
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerUpdateFinishCallback
)
virtual
void
UpdateSucceeded
(
ServiceWorkerRegistrationInfo
*
aInfo
)
=
0
;
virtual
void
UpdateFailed
(
ErrorResult
&
aStatus
)
=
0
;
}
;
#
define
NS_SERVICEWORKERMANAGER_IMPL_IID
\
{
/
*
f4f8755a
-
69ca
-
46e8
-
a65d
-
775745535990
*
/
\
0xf4f8755a
\
0x69ca
\
0x46e8
\
{
0xa6
0x5d
0x77
0x57
0x45
0x53
0x59
0x90
}
\
}
class
ServiceWorkerManager
final
:
public
nsIServiceWorkerManager
public
nsIObserver
{
friend
class
GetRegistrationsRunnable
;
friend
class
GetRegistrationRunnable
;
friend
class
ServiceWorkerJob
;
friend
class
ServiceWorkerRegistrationInfo
;
friend
class
ServiceWorkerUnregisterJob
;
friend
class
ServiceWorkerUpdateJob
;
friend
class
UpdateTimerCallback
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISERVICEWORKERMANAGER
NS_DECL_NSIOBSERVER
struct
RegistrationDataPerPrincipal
;
nsClassHashtable
<
nsCStringHashKey
RegistrationDataPerPrincipal
>
mRegistrationInfos
;
nsTObserverArray
<
ServiceWorkerRegistrationListener
*
>
mServiceWorkerRegistrationListeners
;
struct
ControlledClientData
{
RefPtr
<
ClientHandle
>
mClientHandle
;
RefPtr
<
ServiceWorkerRegistrationInfo
>
mRegistrationInfo
;
ControlledClientData
(
ClientHandle
*
aClientHandle
ServiceWorkerRegistrationInfo
*
aRegistrationInfo
)
:
mClientHandle
(
aClientHandle
)
mRegistrationInfo
(
aRegistrationInfo
)
{
}
}
;
nsClassHashtable
<
nsIDHashKey
ControlledClientData
>
mControlledClients
;
struct
PendingReadyData
{
RefPtr
<
ClientHandle
>
mClientHandle
;
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
mPromise
;
explicit
PendingReadyData
(
ClientHandle
*
aClientHandle
)
:
mClientHandle
(
aClientHandle
)
mPromise
(
new
ServiceWorkerRegistrationPromise
:
:
Private
(
__func__
)
)
{
}
}
;
nsTArray
<
UniquePtr
<
PendingReadyData
>
>
mPendingReadyList
;
bool
IsAvailable
(
nsIPrincipal
*
aPrincipal
nsIURI
*
aURI
)
;
bool
MayHaveActiveServiceWorkerInstance
(
ContentParent
*
aContent
nsIPrincipal
*
aPrincipal
)
;
void
DispatchFetchEvent
(
nsIInterceptedChannel
*
aChannel
ErrorResult
&
aRv
)
;
void
Update
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
ServiceWorkerUpdateFinishCallback
*
aCallback
)
;
void
UpdateInternal
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
ServiceWorkerUpdateFinishCallback
*
aCallback
)
;
void
SoftUpdate
(
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aScope
)
;
void
SoftUpdateInternal
(
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aScope
ServiceWorkerUpdateFinishCallback
*
aCallback
)
;
void
PropagateSoftUpdate
(
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aScope
)
;
void
PropagateRemove
(
const
nsACString
&
aHost
)
;
void
Remove
(
const
nsACString
&
aHost
)
;
void
PropagateRemoveAll
(
)
;
void
RemoveAll
(
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
>
Register
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aScopeURL
const
nsACString
&
aScriptURL
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
>
GetRegistration
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aURL
)
const
;
RefPtr
<
ServiceWorkerRegistrationListPromise
>
GetRegistrations
(
const
ClientInfo
&
aClientInfo
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetRegistration
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetRegistration
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipal
const
nsACString
&
aScope
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
CreateNewRegistration
(
const
nsCString
&
aScope
nsIPrincipal
*
aPrincipal
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
void
RemoveRegistration
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
StoreRegistration
(
nsIPrincipal
*
aPrincipal
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
FinishFetch
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
ReportToAllClients
(
const
nsCString
&
aScope
const
nsString
&
aMessage
const
nsString
&
aFilename
const
nsString
&
aLine
uint32_t
aLineNumber
uint32_t
aColumnNumber
uint32_t
aFlags
)
;
static
void
LocalizeAndReportToAllClients
(
const
nsCString
&
aScope
const
char
*
aStringKey
const
nsTArray
<
nsString
>
&
aParamArray
uint32_t
aFlags
=
0x0
const
nsString
&
aFilename
=
EmptyString
(
)
const
nsString
&
aLine
=
EmptyString
(
)
uint32_t
aLineNumber
=
0
uint32_t
aColumnNumber
=
0
)
;
void
HandleError
(
JSContext
*
aCx
nsIPrincipal
*
aPrincipal
const
nsCString
&
aScope
const
nsString
&
aWorkerURL
const
nsString
&
aMessage
const
nsString
&
aFilename
const
nsString
&
aLine
uint32_t
aLineNumber
uint32_t
aColumnNumber
uint32_t
aFlags
JSExnType
aExnType
)
;
already_AddRefed
<
GenericPromise
>
MaybeClaimClient
(
nsIDocument
*
aDocument
ServiceWorkerRegistrationInfo
*
aWorkerRegistration
)
;
already_AddRefed
<
GenericPromise
>
MaybeClaimClient
(
nsIDocument
*
aDoc
const
ServiceWorkerDescriptor
&
aServiceWorker
)
;
void
SetSkipWaitingFlag
(
nsIPrincipal
*
aPrincipal
const
nsCString
&
aScope
uint64_t
aServiceWorkerID
)
;
static
already_AddRefed
<
ServiceWorkerManager
>
GetInstance
(
)
;
void
LoadRegistration
(
const
ServiceWorkerRegistrationData
&
aRegistration
)
;
void
LoadRegistrations
(
const
nsTArray
<
ServiceWorkerRegistrationData
>
&
aRegistrations
)
;
void
ForceUnregister
(
RegistrationDataPerPrincipal
*
aRegistrationData
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
NS_IMETHOD
AddRegistrationEventListener
(
const
nsAString
&
aScope
ServiceWorkerRegistrationListener
*
aListener
)
;
NS_IMETHOD
RemoveRegistrationEventListener
(
const
nsAString
&
aScope
ServiceWorkerRegistrationListener
*
aListener
)
;
void
MaybeCheckNavigationUpdate
(
const
ClientInfo
&
aClientInfo
)
;
nsresult
SendPushEvent
(
const
nsACString
&
aOriginAttributes
const
nsACString
&
aScope
const
nsAString
&
aMessageId
const
Maybe
<
nsTArray
<
uint8_t
>
>
&
aData
)
;
nsresult
NotifyUnregister
(
nsIPrincipal
*
aPrincipal
const
nsAString
&
aScope
)
;
void
WorkerIsIdle
(
ServiceWorkerInfo
*
aWorker
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
>
WhenReady
(
const
ClientInfo
&
aClientInfo
)
;
void
CheckPendingReadyPromises
(
)
;
void
RemovePendingReadyPromise
(
const
ClientInfo
&
aClientInfo
)
;
private
:
ServiceWorkerManager
(
)
;
~
ServiceWorkerManager
(
)
;
void
Init
(
ServiceWorkerRegistrar
*
aRegistrar
)
;
RefPtr
<
GenericPromise
>
StartControllingClient
(
const
ClientInfo
&
aClientInfo
ServiceWorkerRegistrationInfo
*
aRegistrationInfo
)
;
void
StopControllingClient
(
const
ClientInfo
&
aClientInfo
)
;
void
MaybeStartShutdown
(
)
;
already_AddRefed
<
ServiceWorkerJobQueue
>
GetOrCreateJobQueue
(
const
nsACString
&
aOriginSuffix
const
nsACString
&
aScope
)
;
void
MaybeRemoveRegistrationInfo
(
const
nsACString
&
aScopeKey
)
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetRegistration
(
const
nsACString
&
aScopeKey
const
nsACString
&
aScope
)
const
;
void
AbortCurrentUpdate
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
nsresult
Update
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
nsresult
GetClientRegistration
(
const
ClientInfo
&
aClientInfo
ServiceWorkerRegistrationInfo
*
*
aRegistrationInfo
)
;
ServiceWorkerInfo
*
GetActiveWorkerInfoForScope
(
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aScope
)
;
ServiceWorkerInfo
*
GetActiveWorkerInfoForDocument
(
nsIDocument
*
aDocument
)
;
void
UpdateRegistrationListeners
(
ServiceWorkerRegistrationInfo
*
aReg
)
;
void
NotifyServiceWorkerRegistrationRemoved
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
StopControllingRegistration
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetServiceWorkerRegistrationInfo
(
nsPIDOMWindowInner
*
aWindow
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetServiceWorkerRegistrationInfo
(
nsIDocument
*
aDoc
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetServiceWorkerRegistrationInfo
(
const
ClientInfo
&
aClientInfo
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetServiceWorkerRegistrationInfo
(
nsIPrincipal
*
aPrincipal
nsIURI
*
aURI
)
const
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetServiceWorkerRegistrationInfo
(
const
nsACString
&
aScopeKey
nsIURI
*
aURI
)
const
;
static
nsresult
PrincipalToScopeKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aKey
)
;
static
nsresult
PrincipalInfoToScopeKey
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
nsACString
&
aKey
)
;
static
void
AddScopeAndRegistration
(
const
nsACString
&
aScope
ServiceWorkerRegistrationInfo
*
aRegistation
)
;
static
bool
FindScopeForPath
(
const
nsACString
&
aScopeKey
const
nsACString
&
aPath
RegistrationDataPerPrincipal
*
*
aData
nsACString
&
aMatch
)
;
static
bool
HasScope
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
)
;
static
void
RemoveScopeAndRegistration
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
QueueFireEventOnServiceWorkerRegistrations
(
ServiceWorkerRegistrationInfo
*
aRegistration
const
nsAString
&
aName
)
;
void
FireUpdateFoundOnServiceWorkerRegistrations
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
UpdateClientControllers
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
MaybeRemoveRegistration
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
RemoveAllRegistrations
(
OriginAttributesPattern
*
aPattern
)
;
RefPtr
<
ServiceWorkerManagerChild
>
mActor
;
bool
mShuttingDown
;
nsTArray
<
nsCOMPtr
<
nsIServiceWorkerManagerListener
>
>
mListeners
;
void
NotifyListenersOnRegister
(
nsIServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
NotifyListenersOnUnregister
(
nsIServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
ScheduleUpdateTimer
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
)
;
void
UpdateTimerFired
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
)
;
void
MaybeSendUnregister
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
)
;
nsresult
SendNotificationEvent
(
const
nsAString
&
aEventName
const
nsACString
&
aOriginSuffix
const
nsACString
&
aScope
const
nsAString
&
aID
const
nsAString
&
aTitle
const
nsAString
&
aDir
const
nsAString
&
aLang
const
nsAString
&
aBody
const
nsAString
&
aTag
const
nsAString
&
aIcon
const
nsAString
&
aData
const
nsAString
&
aBehavior
)
;
}
;
}
}
#
endif
