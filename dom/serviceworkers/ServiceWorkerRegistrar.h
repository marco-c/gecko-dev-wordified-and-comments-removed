#
ifndef
mozilla_dom_ServiceWorkerRegistrar_h
#
define
mozilla_dom_ServiceWorkerRegistrar_h
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
define
SERVICEWORKERREGISTRAR_FILE
u
"
serviceworker
.
txt
"
#
define
SERVICEWORKERREGISTRAR_VERSION
"
9
"
#
define
SERVICEWORKERREGISTRAR_TERMINATOR
"
#
"
#
define
SERVICEWORKERREGISTRAR_TRUE
"
true
"
#
define
SERVICEWORKERREGISTRAR_FALSE
"
false
"
class
nsIFile
;
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
ServiceWorkerRegistrationData
;
}
}
namespace
mozilla
:
:
dom
{
class
ServiceWorkerRegistrar
:
public
nsIObserver
public
nsIAsyncShutdownBlocker
{
friend
class
ServiceWorkerRegistrarSaveDataRunnable
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
static
void
Initialize
(
)
;
void
Shutdown
(
)
;
void
DataSaved
(
uint32_t
aFileGeneration
)
;
static
already_AddRefed
<
ServiceWorkerRegistrar
>
Get
(
)
;
void
GetRegistrations
(
nsTArray
<
ServiceWorkerRegistrationData
>
&
aValues
)
;
void
RegisterServiceWorker
(
const
ServiceWorkerRegistrationData
&
aData
)
;
void
UnregisterServiceWorker
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
)
;
void
RemoveAll
(
)
;
bool
ReloadDataForTest
(
)
;
protected
:
void
LoadData
(
)
;
nsresult
SaveData
(
const
nsTArray
<
ServiceWorkerRegistrationData
>
&
aData
)
;
nsresult
ReadData
(
)
;
nsresult
WriteData
(
const
nsTArray
<
ServiceWorkerRegistrationData
>
&
aData
)
;
void
DeleteData
(
)
;
void
RegisterServiceWorkerInternal
(
const
ServiceWorkerRegistrationData
&
aData
)
;
ServiceWorkerRegistrar
(
)
;
virtual
~
ServiceWorkerRegistrar
(
)
;
private
:
void
ProfileStarted
(
)
;
void
ProfileStopped
(
)
;
void
MaybeScheduleSaveData
(
)
;
void
ShutdownCompleted
(
)
;
void
MaybeScheduleShutdownCompleted
(
)
;
uint32_t
GetNextGeneration
(
)
;
void
MaybeResetGeneration
(
)
;
nsCOMPtr
<
nsIAsyncShutdownClient
>
GetShutdownPhase
(
)
const
;
bool
IsSupportedVersion
(
const
nsACString
&
aVersion
)
const
;
mozilla
:
:
Monitor
mMonitor
;
protected
:
nsCOMPtr
<
nsIFile
>
mProfileDir
;
nsTArray
<
ServiceWorkerRegistrationData
>
mData
;
bool
mDataLoaded
;
uint32_t
mDataGeneration
;
uint32_t
mFileGeneration
;
uint32_t
mRetryCount
;
bool
mShuttingDown
;
bool
mSaveDataRunnableDispatched
;
}
;
}
#
endif
