#
include
"
ServiceWorkerUtils
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StaticPrefs_extensions
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
Navigator
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerGlobalScopeBinding
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrarTypes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
:
:
dom
{
static
bool
IsServiceWorkersTestingEnabledInWindow
(
JSObject
*
const
aGlobal
)
{
if
(
const
nsCOMPtr
<
nsPIDOMWindowInner
>
innerWindow
=
Navigator
:
:
GetWindowFromGlobal
(
aGlobal
)
)
{
if
(
auto
*
bc
=
innerWindow
-
>
GetBrowsingContext
(
)
)
{
return
bc
-
>
Top
(
)
-
>
ServiceWorkersTestingEnabled
(
)
;
}
}
return
false
;
}
static
bool
IsInPrivateBrowsing
(
JSContext
*
const
aCx
)
{
if
(
const
nsCOMPtr
<
nsIGlobalObject
>
global
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
)
{
if
(
const
nsCOMPtr
<
nsIPrincipal
>
principal
=
global
-
>
PrincipalOrNull
(
)
)
{
return
principal
-
>
GetIsInPrivateBrowsing
(
)
;
}
}
return
false
;
}
bool
ServiceWorkersEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
StaticPrefs
:
:
dom_serviceWorkers_enabled
(
)
)
{
return
false
;
}
JS
:
:
Rooted
<
JSObject
*
>
global
(
aCx
aGlobal
)
;
if
(
IsInPrivateBrowsing
(
aCx
)
)
{
return
false
;
}
if
(
!
StaticPrefs
:
:
extensions_serviceWorkerRegister_allowed
(
)
)
{
nsIPrincipal
*
principal
=
nsContentUtils
:
:
SubjectPrincipal
(
aCx
)
;
if
(
principal
&
&
BasePrincipal
:
:
Cast
(
principal
)
-
>
AddonPolicy
(
)
)
{
return
false
;
}
}
if
(
IsSecureContextOrObjectIsFromSecureContext
(
aCx
global
)
)
{
return
true
;
}
return
StaticPrefs
:
:
dom_serviceWorkers_testing_enabled
(
)
|
|
IsServiceWorkersTestingEnabledInWindow
(
global
)
;
}
bool
ServiceWorkerVisible
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
if
(
NS_IsMainThread
(
)
)
{
return
ServiceWorkersEnabled
(
aCx
aGlobal
)
;
}
return
IS_INSTANCE_OF
(
ServiceWorkerGlobalScope
aGlobal
)
;
}
bool
ServiceWorkerRegistrationDataIsValid
(
const
ServiceWorkerRegistrationData
&
aData
)
{
return
!
aData
.
scope
(
)
.
IsEmpty
(
)
&
&
!
aData
.
currentWorkerURL
(
)
.
IsEmpty
(
)
&
&
!
aData
.
cacheName
(
)
.
IsEmpty
(
)
;
}
namespace
{
void
CheckForSlashEscapedCharsInPath
(
nsIURI
*
aURI
const
char
*
aURLDescription
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aURI
)
;
nsCOMPtr
<
nsIURL
>
url
(
do_QueryInterface
(
aURI
)
)
;
if
(
NS_WARN_IF
(
!
url
)
)
{
aRv
.
ThrowInvalidStateError
(
"
http
:
or
https
:
URL
without
a
concept
of
path
"
)
;
return
;
}
nsAutoCString
path
;
nsresult
rv
=
url
-
>
GetFilePath
(
path
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
ThrowInvalidStateError
(
"
http
:
or
https
:
URL
without
a
concept
of
path
"
)
;
return
;
}
ToLowerCase
(
path
)
;
if
(
path
.
Find
(
"
%
2f
"
)
!
=
kNotFound
|
|
path
.
Find
(
"
%
5c
"
)
!
=
kNotFound
)
{
nsPrintfCString
err
(
"
%
s
contains
%
%
2f
or
%
%
5c
"
aURLDescription
)
;
aRv
.
ThrowTypeError
(
err
)
;
}
}
}
void
ServiceWorkerScopeAndScriptAreValid
(
const
ClientInfo
&
aClientInfo
nsIURI
*
aScopeURI
nsIURI
*
aScriptURI
ErrorResult
&
aRv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aScopeURI
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aScriptURI
)
;
auto
principalOrErr
=
aClientInfo
.
GetPrincipal
(
)
;
if
(
NS_WARN_IF
(
principalOrErr
.
isErr
(
)
)
)
{
aRv
.
ThrowInvalidStateError
(
"
Can
'
t
make
security
decisions
about
Client
"
)
;
return
;
}
auto
hasHTTPScheme
=
[
]
(
nsIURI
*
aURI
)
-
>
bool
{
return
aURI
-
>
SchemeIs
(
"
http
"
)
|
|
aURI
-
>
SchemeIs
(
"
https
"
)
;
}
;
auto
hasMozExtScheme
=
[
]
(
nsIURI
*
aURI
)
-
>
bool
{
return
aURI
-
>
SchemeIs
(
"
moz
-
extension
"
)
;
}
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
principalOrErr
.
unwrap
(
)
;
auto
isExtension
=
!
!
BasePrincipal
:
:
Cast
(
principal
)
-
>
AddonPolicy
(
)
;
auto
hasValidURISchemes
=
!
isExtension
?
hasHTTPScheme
:
hasMozExtScheme
;
if
(
!
hasValidURISchemes
(
aScriptURI
)
)
{
auto
message
=
!
isExtension
?
"
Script
URL
'
s
scheme
is
not
'
http
'
or
'
https
'
"
_ns
:
"
Script
URL
'
s
scheme
is
not
'
moz
-
extension
'
"
_ns
;
aRv
.
ThrowTypeError
(
message
)
;
return
;
}
CheckForSlashEscapedCharsInPath
(
aScriptURI
"
script
URL
"
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
!
hasValidURISchemes
(
aScopeURI
)
)
{
auto
message
=
!
isExtension
?
"
Scope
URL
'
s
scheme
is
not
'
http
'
or
'
https
'
"
_ns
:
"
Scope
URL
'
s
scheme
is
not
'
moz
-
extension
'
"
_ns
;
aRv
.
ThrowTypeError
(
message
)
;
return
;
}
CheckForSlashEscapedCharsInPath
(
aScopeURI
"
scope
URL
"
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
nsAutoCString
ref
;
Unused
<
<
aScopeURI
-
>
GetRef
(
ref
)
;
if
(
NS_WARN_IF
(
!
ref
.
IsEmpty
(
)
)
)
{
aRv
.
ThrowSecurityError
(
"
Non
-
empty
fragment
on
scope
URL
"
)
;
return
;
}
Unused
<
<
aScriptURI
-
>
GetRef
(
ref
)
;
if
(
NS_WARN_IF
(
!
ref
.
IsEmpty
(
)
)
)
{
aRv
.
ThrowSecurityError
(
"
Non
-
empty
fragment
on
script
URL
"
)
;
return
;
}
nsresult
rv
=
principal
-
>
CheckMayLoadWithReporting
(
aScopeURI
false
0
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
ThrowSecurityError
(
"
Scope
URL
is
not
same
-
origin
with
Client
"
)
;
return
;
}
rv
=
principal
-
>
CheckMayLoadWithReporting
(
aScriptURI
false
0
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
ThrowSecurityError
(
"
Script
URL
is
not
same
-
origin
with
Client
"
)
;
return
;
}
}
}
