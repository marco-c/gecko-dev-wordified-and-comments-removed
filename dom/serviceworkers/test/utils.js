function
waitForState
(
worker
state
context
)
{
return
new
Promise
(
resolve
=
>
{
function
onStateChange
(
)
{
if
(
worker
.
state
=
=
=
state
)
{
worker
.
removeEventListener
(
"
statechange
"
onStateChange
)
;
resolve
(
context
)
;
}
}
worker
.
addEventListener
(
"
statechange
"
onStateChange
)
;
onStateChange
(
)
;
}
)
;
}
async
function
registerAndWaitForActive
(
.
.
.
args
)
{
console
.
log
(
"
.
.
.
calling
register
"
)
;
const
reg
=
await
navigator
.
serviceWorker
.
register
(
.
.
.
args
)
;
console
.
log
(
"
.
.
.
waiting
for
activation
"
)
;
await
waitForState
(
reg
.
installing
"
activated
"
reg
)
;
console
.
log
(
"
.
.
.
activated
!
"
)
;
return
reg
;
}
function
createIframeAndWaitForMessage
(
url
)
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
document
.
body
.
appendChild
(
iframe
)
;
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
event
=
>
{
resolve
(
event
.
data
)
;
}
{
once
:
true
}
)
;
iframe
.
src
=
url
;
}
)
;
}
function
createNestedIframeAndWaitForMessage
(
url
)
{
const
iframe
=
document
.
getElementsByTagName
(
"
iframe
"
)
[
0
]
;
iframe
.
contentWindow
.
postMessage
(
"
create
nested
iframe
"
"
*
"
)
;
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
event
=
>
{
resolve
(
event
.
data
)
;
}
{
once
:
true
}
)
;
}
)
;
}
async
function
unregisterAll
(
)
{
const
registrations
=
await
navigator
.
serviceWorker
.
getRegistrations
(
)
;
for
(
const
reg
of
registrations
)
{
await
reg
.
unregister
(
)
;
}
}
