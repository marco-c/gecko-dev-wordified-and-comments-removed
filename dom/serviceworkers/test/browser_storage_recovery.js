"
use
strict
"
;
const
BASE_URI
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
serviceworkers
/
test
/
"
;
const
PAGE_URI
=
BASE_URI
+
"
empty
.
html
"
;
const
SCOPE
=
PAGE_URI
+
"
?
storage_recovery
"
;
const
SW_SCRIPT
=
BASE_URI
+
"
storage_recovery_worker
.
sjs
"
;
async
function
checkForUpdate
(
browser
)
{
return
ContentTask
.
spawn
(
browser
SCOPE
async
function
(
uri
)
{
let
reg
=
await
content
.
navigator
.
serviceWorker
.
getRegistration
(
uri
)
;
await
reg
.
update
(
)
;
return
!
!
reg
.
installing
;
}
)
;
}
async
function
wipeStorage
(
u
)
{
let
uri
=
Services
.
io
.
newURI
(
u
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
let
caches
=
new
CacheStorage
(
"
chrome
"
principal
)
;
let
list
=
await
caches
.
keys
(
)
;
return
Promise
.
all
(
list
.
map
(
c
=
>
caches
.
delete
(
c
)
)
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
idle_timeout
"
0
]
]
}
)
;
await
fetch
(
SW_SCRIPT
+
"
?
clear
-
redirect
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
ContentTask
.
spawn
(
browser
{
script
:
SW_SCRIPT
scope
:
SCOPE
}
async
function
(
opts
)
{
let
reg
=
await
content
.
navigator
.
serviceWorker
.
register
(
opts
.
script
{
scope
:
opts
.
scope
}
)
;
let
worker
=
reg
.
installing
|
|
reg
.
waiting
|
|
reg
.
active
;
await
new
Promise
(
resolve
=
>
{
if
(
worker
.
state
=
=
=
"
activated
"
)
{
resolve
(
)
;
return
;
}
worker
.
addEventListener
(
"
statechange
"
function
onStateChange
(
)
{
if
(
worker
.
state
=
=
=
"
activated
"
)
{
worker
.
removeEventListener
(
"
statechange
"
onStateChange
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
normal_update_check
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
updated
=
await
checkForUpdate
(
browser
)
;
ok
(
!
updated
"
normal
update
check
should
not
trigger
an
update
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
wiped_update_check
(
)
{
await
wipeStorage
(
PAGE_URI
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
updated
=
await
checkForUpdate
(
browser
)
;
ok
(
updated
"
wiping
the
service
worker
scripts
should
trigger
an
update
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
wiped_and_failed_update_check
(
)
{
await
wipeStorage
(
PAGE_URI
)
;
await
fetch
(
SW_SCRIPT
+
"
?
set
-
redirect
"
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
PAGE_URI
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
updateFailed
=
false
;
try
{
await
checkForUpdate
(
browser
)
;
}
catch
(
e
)
{
updateFailed
=
true
;
}
ok
(
updateFailed
"
redirecting
service
worker
script
should
fail
to
update
"
)
;
let
exists
=
await
ContentTask
.
spawn
(
browser
SCOPE
async
function
(
uri
)
{
let
reg
=
await
content
.
navigator
.
serviceWorker
.
getRegistration
(
uri
)
;
return
!
!
reg
;
}
)
;
ok
(
!
exists
"
registration
should
be
removed
after
scripts
are
wiped
and
update
fails
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
