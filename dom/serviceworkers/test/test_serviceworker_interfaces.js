let
wasmGlobalEntry
=
{
name
:
"
WebAssembly
"
insecureContext
:
true
disabled
:
!
getJSTestingFunctions
(
)
.
wasmIsSupportedByHardware
(
)
}
;
let
wasmGlobalInterfaces
=
[
{
name
:
"
Module
"
insecureContext
:
true
}
{
name
:
"
Instance
"
insecureContext
:
true
}
{
name
:
"
Memory
"
insecureContext
:
true
}
{
name
:
"
Table
"
insecureContext
:
true
}
{
name
:
"
Global
"
insecureContext
:
true
}
{
name
:
"
CompileError
"
insecureContext
:
true
}
{
name
:
"
LinkError
"
insecureContext
:
true
}
{
name
:
"
RuntimeError
"
insecureContext
:
true
}
{
name
:
"
Function
"
insecureContext
:
true
nightly
:
true
}
{
name
:
"
Exception
"
insecureContext
:
true
}
{
name
:
"
Tag
"
insecureContext
:
true
}
{
name
:
"
JSTag
"
insecureContext
:
true
}
{
name
:
"
compile
"
insecureContext
:
true
}
{
name
:
"
compileStreaming
"
insecureContext
:
true
}
{
name
:
"
instantiate
"
insecureContext
:
true
}
{
name
:
"
instantiateStreaming
"
insecureContext
:
true
}
{
name
:
"
validate
"
insecureContext
:
true
}
]
;
let
ecmaGlobals
=
[
"
AggregateError
"
"
Array
"
"
ArrayBuffer
"
"
Atomics
"
"
AsyncDisposableStack
"
"
Boolean
"
"
BigInt
"
"
BigInt64Array
"
"
BigUint64Array
"
"
DataView
"
"
Date
"
"
DisposableStack
"
"
Error
"
"
EvalError
"
"
FinalizationRegistry
"
"
Float16Array
"
"
Float32Array
"
"
Float64Array
"
"
Function
"
"
Infinity
"
"
Int16Array
"
"
Int32Array
"
"
Int8Array
"
"
InternalError
"
"
Intl
"
"
Iterator
"
"
JSON
"
"
Map
"
"
Math
"
"
NaN
"
"
Number
"
"
Object
"
"
Promise
"
"
Proxy
"
"
RangeError
"
"
ReferenceError
"
"
Reflect
"
"
RegExp
"
"
Set
"
{
name
:
"
SharedArrayBuffer
"
crossOriginIsolated
:
true
}
"
String
"
"
SuppressedError
"
"
Symbol
"
"
SyntaxError
"
"
Temporal
"
"
TypeError
"
"
Uint16Array
"
"
Uint32Array
"
"
Uint8Array
"
"
Uint8ClampedArray
"
"
URIError
"
"
WeakMap
"
"
WeakRef
"
"
WeakSet
"
wasmGlobalEntry
"
decodeURI
"
"
decodeURIComponent
"
"
encodeURI
"
"
encodeURIComponent
"
"
escape
"
"
eval
"
"
globalThis
"
"
isFinite
"
"
isNaN
"
"
parseFloat
"
"
parseInt
"
"
undefined
"
"
unescape
"
]
;
let
interfaceNamesInGlobalScope
=
[
"
AbortController
"
"
AbortSignal
"
"
Blob
"
"
BroadcastChannel
"
"
ByteLengthQueuingStrategy
"
"
Cache
"
"
CacheStorage
"
"
CanvasGradient
"
"
CanvasPattern
"
"
Client
"
"
Clients
"
"
CloseEvent
"
"
CompressionStream
"
"
CountQueuingStrategy
"
"
CookieStore
"
"
CookieStoreManager
"
"
Crypto
"
"
CryptoKey
"
"
CustomEvent
"
"
DecompressionStream
"
"
Directory
"
"
DOMException
"
"
DOMMatrix
"
"
DOMMatrixReadOnly
"
"
DOMPoint
"
"
DOMPointReadOnly
"
"
DOMQuad
"
"
DOMRect
"
"
DOMRectReadOnly
"
"
DOMStringList
"
"
ErrorEvent
"
"
Event
"
"
EventSource
"
"
EventTarget
"
"
ExtendableCookieChangeEvent
"
"
ExtendableEvent
"
"
ExtendableMessageEvent
"
"
FetchEvent
"
"
File
"
"
FileList
"
"
FileReader
"
{
name
:
"
FileSystemDirectoryHandle
"
}
{
name
:
"
FileSystemFileHandle
"
}
{
name
:
"
FileSystemHandle
"
}
{
name
:
"
FileSystemWritableFileStream
"
}
"
FontFace
"
"
FontFaceSet
"
"
FontFaceSetLoadEvent
"
"
FormData
"
{
name
:
"
GPU
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUAdapter
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUAdapterInfo
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUBindGroup
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUBindGroupLayout
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUBuffer
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUBufferUsage
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUCanvasContext
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUColorWrite
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUCommandBuffer
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUCommandEncoder
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUCompilationInfo
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUCompilationMessage
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUComputePassEncoder
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUComputePipeline
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUDevice
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUDeviceLostInfo
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUError
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUExternalTexture
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUInternalError
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUMapMode
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUOutOfMemoryError
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUPipelineError
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUPipelineLayout
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUQuerySet
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUQueue
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPURenderBundle
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPURenderBundleEncoder
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPURenderPassEncoder
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPURenderPipeline
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUSampler
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUShaderModule
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUShaderStage
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUSupportedFeatures
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUSupportedLimits
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUTexture
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUTextureUsage
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUTextureView
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUUncapturedErrorEvent
"
earlyBetaOrEarlier
:
true
}
{
name
:
"
GPUValidationError
"
earlyBetaOrEarlier
:
true
}
"
Headers
"
"
IDBCursor
"
"
IDBCursorWithValue
"
"
IDBDatabase
"
"
IDBFactory
"
"
IDBIndex
"
"
IDBKeyRange
"
"
IDBObjectStore
"
"
IDBOpenDBRequest
"
"
IDBRequest
"
"
IDBTransaction
"
"
IDBVersionChangeEvent
"
"
ImageBitmap
"
"
ImageBitmapRenderingContext
"
"
ImageData
"
"
Lock
"
"
LockManager
"
"
MediaCapabilities
"
"
MessageChannel
"
"
MessageEvent
"
"
MessagePort
"
{
name
:
"
NetworkInformation
"
disabled
:
true
}
"
NavigationPreloadManager
"
"
Notification
"
"
NotificationEvent
"
"
OffscreenCanvas
"
"
OffscreenCanvasRenderingContext2D
"
"
Path2D
"
"
Performance
"
"
PerformanceEntry
"
"
PerformanceMark
"
"
PerformanceMeasure
"
"
PerformanceObserver
"
"
PerformanceObserverEntryList
"
"
PerformanceResourceTiming
"
"
PerformanceServerTiming
"
"
Permissions
"
"
PermissionStatus
"
"
ProgressEvent
"
"
PromiseRejectionEvent
"
"
PushEvent
"
"
PushManager
"
"
PushMessageData
"
"
PushSubscription
"
"
PushSubscriptionChangeEvent
"
"
PushSubscriptionOptions
"
"
ReadableByteStreamController
"
"
ReadableStream
"
"
ReadableStreamBYOBReader
"
"
ReadableStreamBYOBRequest
"
"
ReadableStreamDefaultController
"
"
ReadableStreamDefaultReader
"
"
Request
"
"
Response
"
{
name
:
"
Scheduler
"
nightly
:
true
}
"
ServiceWorker
"
"
ServiceWorkerContainer
"
"
ServiceWorkerGlobalScope
"
"
ServiceWorkerRegistration
"
{
name
:
"
StorageManager
"
fennec
:
false
}
"
SubtleCrypto
"
{
name
:
"
TaskController
"
nightly
:
true
}
{
name
:
"
TaskPriorityChangeEvent
"
nightly
:
true
}
{
name
:
"
TaskSignal
"
nightly
:
true
}
"
TextDecoder
"
"
TextDecoderStream
"
"
TextEncoder
"
"
TextEncoderStream
"
"
TextMetrics
"
"
TransformStream
"
"
TransformStreamDefaultController
"
"
URL
"
"
URLSearchParams
"
"
WebSocket
"
"
WebTransport
"
"
WebTransportBidirectionalStream
"
"
WebTransportDatagramDuplexStream
"
"
WebTransportError
"
"
WebTransportReceiveStream
"
"
WebTransportSendStream
"
"
WebGL2RenderingContext
"
"
WebGLActiveInfo
"
"
WebGLBuffer
"
"
WebGLContextEvent
"
"
WebGLFramebuffer
"
"
WebGLProgram
"
"
WebGLQuery
"
"
WebGLRenderbuffer
"
"
WebGLRenderingContext
"
"
WebGLSampler
"
"
WebGLShader
"
"
WebGLShaderPrecisionFormat
"
"
WebGLSync
"
"
WebGLTexture
"
"
WebGLTransformFeedback
"
"
WebGLUniformLocation
"
"
WebGLVertexArrayObject
"
"
WindowClient
"
{
name
:
"
WGSLLanguageFeatures
"
earlyBetaOrEarlier
:
true
}
"
WorkerGlobalScope
"
"
WorkerLocation
"
"
WorkerNavigator
"
"
WritableStream
"
"
WritableStreamDefaultController
"
"
WritableStreamDefaultWriter
"
"
clients
"
"
console
"
"
cookieStore
"
"
onactivate
"
"
oncookiechange
"
"
onfetch
"
"
oninstall
"
"
onmessage
"
"
onmessageerror
"
"
onnotificationclick
"
"
onnotificationclose
"
"
onpush
"
"
onpushsubscriptionchange
"
"
registration
"
"
skipWaiting
"
]
;
let
testFunctions
=
[
"
ok
"
"
is
"
"
workerTestArrayEquals
"
"
workerTestDone
"
"
workerTestGetHelperData
"
"
workerTestGetStorageManager
"
"
entryDisabled
"
"
createInterfaceMap
"
"
runTest
"
]
;
function
entryDisabled
(
entry
{
isNightly
isEarlyBetaOrEarlier
isRelease
isDesktop
isAndroid
isInsecureContext
isFennec
isCrossOriginIsolated
}
)
{
return
(
entry
.
nightly
=
=
=
!
isNightly
|
|
(
entry
.
nightlyAndroid
=
=
=
!
(
isAndroid
&
&
isNightly
)
&
&
isAndroid
)
|
|
(
entry
.
nonReleaseAndroid
=
=
=
!
(
isAndroid
&
&
!
isRelease
)
&
&
isAndroid
)
|
|
entry
.
desktop
=
=
=
!
isDesktop
|
|
(
entry
.
android
=
=
=
!
isAndroid
&
&
!
entry
.
nonReleaseAndroid
&
&
!
entry
.
nightlyAndroid
)
|
|
entry
.
fennecOrDesktop
=
=
=
(
isAndroid
&
&
!
isFennec
)
|
|
entry
.
fennec
=
=
=
!
isFennec
|
|
entry
.
release
=
=
=
!
isRelease
|
|
entry
.
earlyBetaOrEarlier
=
=
=
!
isEarlyBetaOrEarlier
|
|
entry
.
crossOriginIsolated
=
=
=
!
isCrossOriginIsolated
|
|
entry
.
disabled
)
;
}
function
createInterfaceMap
(
data
.
.
.
interfaceGroups
)
{
var
interfaceMap
=
{
}
;
function
addInterfaces
(
interfaces
)
{
for
(
var
entry
of
interfaces
)
{
if
(
typeof
entry
=
=
=
"
string
"
)
{
ok
(
!
(
entry
in
interfaceMap
)
"
duplicate
entry
for
"
+
entry
)
;
interfaceMap
[
entry
]
=
true
;
}
else
{
ok
(
!
(
entry
.
name
in
interfaceMap
)
"
duplicate
entry
for
"
+
entry
.
name
)
;
ok
(
!
(
"
pref
"
in
entry
)
"
Bogus
pref
annotation
for
"
+
entry
.
name
)
;
if
(
entryDisabled
(
entry
data
)
)
{
interfaceMap
[
entry
.
name
]
=
false
;
}
else
if
(
entry
.
optional
)
{
interfaceMap
[
entry
.
name
]
=
"
optional
"
;
}
else
{
interfaceMap
[
entry
.
name
]
=
true
;
}
}
}
}
for
(
let
interfaceGroup
of
interfaceGroups
)
{
addInterfaces
(
interfaceGroup
)
;
}
return
interfaceMap
;
}
function
runTest
(
parentName
parent
data
.
.
.
interfaceGroups
)
{
var
interfaceMap
=
createInterfaceMap
(
data
.
.
.
interfaceGroups
)
;
for
(
var
name
of
Object
.
getOwnPropertyNames
(
parent
)
)
{
if
(
parent
=
=
=
self
&
&
testFunctions
.
includes
(
name
)
)
{
continue
;
}
ok
(
interfaceMap
[
name
]
=
=
=
"
optional
"
|
|
interfaceMap
[
name
]
"
If
this
is
failing
:
DANGER
are
you
sure
you
want
to
expose
the
new
interface
"
+
name
+
"
to
all
webpages
as
a
property
on
"
+
parentName
+
"
?
Do
not
make
a
change
to
this
file
without
a
"
+
"
review
from
a
DOM
peer
for
that
specific
change
!
!
!
(
or
a
JS
peer
for
changes
to
ecmaGlobals
)
"
)
;
delete
interfaceMap
[
name
]
;
}
for
(
var
name
of
Object
.
keys
(
interfaceMap
)
)
{
if
(
interfaceMap
[
name
]
=
=
=
"
optional
"
)
{
delete
interfaceMap
[
name
]
;
}
else
{
ok
(
name
in
parent
=
=
=
interfaceMap
[
name
]
name
+
"
should
"
+
(
interfaceMap
[
name
]
?
"
"
:
"
NOT
"
)
+
"
be
defined
on
"
+
parentName
)
;
if
(
!
interfaceMap
[
name
]
)
{
delete
interfaceMap
[
name
]
;
}
}
}
is
(
Object
.
keys
(
interfaceMap
)
.
length
0
"
The
following
interface
(
s
)
are
not
enumerated
:
"
+
Object
.
keys
(
interfaceMap
)
.
join
(
"
"
)
)
;
}
workerTestGetHelperData
(
function
(
data
)
{
runTest
(
"
self
"
self
data
ecmaGlobals
interfaceNamesInGlobalScope
)
;
if
(
WebAssembly
&
&
!
entryDisabled
(
wasmGlobalEntry
data
)
)
{
runTest
(
"
WebAssembly
"
WebAssembly
data
wasmGlobalInterfaces
)
;
}
workerTestDone
(
)
;
}
)
;
