const
DIR_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
"
)
.
slice
(
0
-
1
)
;
const
SWM
=
Cc
[
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
]
.
getService
(
Ci
.
nsIServiceWorkerManager
)
;
function
getPrincipal
(
url
attrs
)
{
const
uri
=
Services
.
io
.
newURI
(
url
)
;
if
(
!
attrs
)
{
attrs
=
{
}
;
}
return
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
attrs
)
;
}
async
function
_qm_requestFinished
(
request
)
{
await
new
Promise
(
function
(
resolve
)
{
request
.
callback
=
function
(
)
{
resolve
(
)
;
}
;
}
)
;
if
(
request
.
resultCode
!
=
=
Cr
.
NS_OK
)
{
throw
new
RequestError
(
request
.
resultCode
request
.
resultName
)
;
}
return
request
.
result
;
}
async
function
get_qm_origin_usage
(
origin
)
{
return
new
Promise
(
resolve
=
>
{
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
origin
)
;
Services
.
qms
.
getUsageForPrincipal
(
principal
request
=
>
resolve
(
request
.
result
.
usage
)
)
;
}
)
;
}
async
function
clear_qm_origin_group_via_clearData
(
origin
)
{
const
uri
=
Services
.
io
.
newURI
(
origin
)
;
const
baseDomain
=
Services
.
eTLD
.
getBaseDomain
(
uri
)
;
info
(
Clearing
storage
on
domain
{
baseDomain
}
(
from
origin
{
origin
}
)
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
baseDomain
false
Services
.
clearData
.
CLEAR_DOM_QUOTA
failedFlags
=
>
{
if
(
failedFlags
)
{
reject
(
failedFlags
)
;
}
else
{
resolve
(
)
;
}
}
)
;
}
)
;
}
function
swm_lookup_reg
(
swDesc
)
{
const
fullScope
=
{
swDesc
.
origin
}
/
{
DIR_PATH
}
/
{
swDesc
.
scope
}
;
const
principal
=
getPrincipal
(
fullScope
)
;
const
reg
=
SWM
.
getRegistrationByPrincipal
(
principal
fullScope
)
;
return
reg
;
}
async
function
install_sw
(
swDesc
)
{
info
(
Installing
ServiceWorker
{
swDesc
.
script
}
at
{
swDesc
.
scope
}
on
origin
{
swDesc
.
origin
}
)
;
const
pageUrlStr
=
{
swDesc
.
origin
}
/
{
DIR_PATH
}
/
empty_with_utils
.
html
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
pageUrlStr
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
{
swScript
:
swDesc
.
script
swScope
:
swDesc
.
scope
}
]
async
function
(
{
swScript
swScope
}
)
{
await
content
.
wrappedJSObject
.
registerAndWaitForActive
(
swScript
swScope
)
;
}
)
;
}
)
;
info
(
ServiceWorker
installed
)
;
return
swm_lookup_reg
(
swDesc
)
;
}
async
function
consume_storage
(
origin
storageDesc
)
{
info
(
Consuming
storage
on
origin
{
origin
}
)
;
const
pageUrlStr
=
{
origin
}
/
{
DIR_PATH
}
/
empty_with_utils
.
html
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
pageUrlStr
}
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
storageDesc
]
async
function
(
{
cacheBytes
idbBytes
}
)
{
await
content
.
wrappedJSObject
.
fillStorage
(
cacheBytes
idbBytes
)
;
}
)
;
}
)
;
}
async
function
navigate_and_get_body
(
swDesc
debugTag
)
{
let
pageUrlStr
=
{
swDesc
.
origin
}
/
{
DIR_PATH
}
/
{
swDesc
.
scope
}
;
if
(
debugTag
)
{
pageUrlStr
+
=
"
?
"
+
debugTag
;
}
info
(
Navigating
to
{
pageUrlStr
}
)
;
const
tabResult
=
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
pageUrlStr
waitForLoad
:
false
waitForStateStop
:
true
}
async
browser
=
>
{
info
(
Tab
opened
querying
body
content
.
)
;
const
spawnResult
=
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
const
controlled
=
!
!
content
.
navigator
.
serviceWorker
.
controller
;
let
loc
=
content
.
document
.
documentURI
;
if
(
loc
.
startsWith
(
"
about
:
"
)
)
{
const
idxQuestion
=
loc
.
indexOf
(
"
?
"
)
;
if
(
idxQuestion
!
=
=
-
1
)
{
loc
=
loc
.
substring
(
0
idxQuestion
)
;
}
return
{
controlled
body
:
loc
}
;
}
return
{
controlled
body
:
content
.
document
?
.
body
?
.
textContent
?
.
trim
(
)
}
;
}
)
;
return
spawnResult
;
}
)
;
return
tabResult
;
}
