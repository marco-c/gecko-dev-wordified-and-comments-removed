const
TOP_DOMAIN
=
"
http
:
/
/
mochi
.
test
:
8888
/
"
;
const
SW_DOMAIN
=
"
https
:
/
/
example
.
org
/
"
;
const
TOP_TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
TOP_DOMAIN
)
;
const
SW_TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
SW_DOMAIN
)
;
const
TOP_EMPTY_PAGE
=
{
TOP_TEST_ROOT
}
empty_with_utils
.
html
;
const
SW_REGISTER_PAGE
=
{
SW_TEST_ROOT
}
empty_with_utils
.
html
;
const
SW_IFRAME_PAGE
=
{
SW_TEST_ROOT
}
navigationPreload_page
.
html
;
const
SW_REL_SW_SCRIPT
=
"
sw_with_navigationPreload
.
js
"
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
]
}
)
;
info
(
"
Opening
a
new
tab
:
"
+
SW_REGISTER_PAGE
)
;
let
topTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
SW_REGISTER_PAGE
}
)
;
await
SpecialPowers
.
spawn
(
topTab
.
linkedBrowser
[
{
sw
:
SW_REL_SW_SCRIPT
}
]
async
function
(
{
sw
}
)
{
dump
(
register
serviceworker
.
.
.
\
n
)
;
await
content
.
wrappedJSObject
.
registerAndWaitForActive
(
sw
)
;
}
)
;
info
(
"
Loading
a
controlled
page
:
"
+
SW_REGISTER_PAGE
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
topTab
.
linkedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
topTab
.
linkedBrowser
SW_REGISTER_PAGE
)
;
await
browserLoadedPromise
;
info
(
"
Create
a
target
iframe
:
"
+
SW_IFRAME_PAGE
)
;
let
result
=
await
SpecialPowers
.
spawn
(
topTab
.
linkedBrowser
[
{
url
:
SW_IFRAME_PAGE
}
]
async
function
(
{
url
}
)
{
async
function
waitForNavigationPreload
(
)
{
return
new
Promise
(
resolve
=
>
{
content
.
wrappedJSObject
.
navigator
.
serviceWorker
.
addEventListener
(
message
event
=
>
{
resolve
(
event
.
data
)
;
}
)
;
}
)
;
}
let
promise
=
waitForNavigationPreload
(
)
;
const
iframe
=
content
.
wrappedJSObject
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
url
;
content
.
wrappedJSObject
.
document
.
body
.
appendChild
(
iframe
)
;
await
new
Promise
(
r
=
>
{
iframe
.
onload
=
r
;
}
)
;
let
result
=
await
promise
;
return
result
;
}
)
;
is
(
result
"
NavigationPreload
\
n
"
"
Should
get
NavigationPreload
result
"
)
;
info
(
"
Loading
the
SW
unregister
page
:
"
+
SW_REGISTER_PAGE
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
topTab
.
linkedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
topTab
.
linkedBrowser
SW_REGISTER_PAGE
)
;
await
browserLoadedPromise
;
await
SpecialPowers
.
spawn
(
topTab
.
linkedBrowser
[
]
async
function
(
)
{
await
content
.
wrappedJSObject
.
unregisterAll
(
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
topTab
)
;
}
)
;
