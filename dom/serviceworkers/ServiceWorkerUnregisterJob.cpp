#
include
"
ServiceWorkerUnregisterJob
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIPushService
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
ServiceWorkerManager
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ServiceWorkerUnregisterJob
:
:
PushUnsubscribeCallback
final
:
public
nsIUnsubscribeResultCallback
{
public
:
NS_DECL_ISUPPORTS
explicit
PushUnsubscribeCallback
(
ServiceWorkerUnregisterJob
*
aJob
)
:
mJob
(
aJob
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
NS_IMETHOD
OnUnsubscribe
(
nsresult
aStatus
bool
)
override
{
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
aStatus
)
)
;
mJob
-
>
Unregister
(
)
;
return
NS_OK
;
}
private
:
~
PushUnsubscribeCallback
(
)
{
}
RefPtr
<
ServiceWorkerUnregisterJob
>
mJob
;
}
;
NS_IMPL_ISUPPORTS
(
ServiceWorkerUnregisterJob
:
:
PushUnsubscribeCallback
nsIUnsubscribeResultCallback
)
ServiceWorkerUnregisterJob
:
:
ServiceWorkerUnregisterJob
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
bool
aSendToParent
)
:
ServiceWorkerJob
(
Type
:
:
Unregister
aPrincipal
aScope
EmptyCString
(
)
)
mResult
(
false
)
mSendToParent
(
aSendToParent
)
{
}
bool
ServiceWorkerUnregisterJob
:
:
GetResult
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mResult
;
}
ServiceWorkerUnregisterJob
:
:
~
ServiceWorkerUnregisterJob
(
)
{
}
void
ServiceWorkerUnregisterJob
:
:
AsyncExecute
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
Canceled
(
)
)
{
Finish
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
;
}
nsCOMPtr
<
nsIPushService
>
pushService
=
do_GetService
(
"
mozilla
.
org
/
push
/
Service
;
1
"
)
;
if
(
NS_WARN_IF
(
!
pushService
)
)
{
Unregister
(
)
;
return
;
}
nsCOMPtr
<
nsIUnsubscribeResultCallback
>
unsubscribeCallback
=
new
PushUnsubscribeCallback
(
this
)
;
nsresult
rv
=
pushService
-
>
Unsubscribe
(
NS_ConvertUTF8toUTF16
(
mScope
)
mPrincipal
unsubscribeCallback
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Unregister
(
)
;
}
}
void
ServiceWorkerUnregisterJob
:
:
Unregister
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
Canceled
(
)
|
|
!
swm
)
{
Finish
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
;
}
RefPtr
<
ServiceWorkerRegistrationInfo
>
registration
=
swm
-
>
GetRegistration
(
mPrincipal
mScope
)
;
if
(
!
registration
)
{
Finish
(
NS_OK
)
;
return
;
}
if
(
mSendToParent
&
&
!
registration
-
>
IsPendingUninstall
(
)
)
{
swm
-
>
MaybeSendUnregister
(
mPrincipal
mScope
)
;
}
registration
-
>
SetPendingUninstall
(
)
;
mResult
=
true
;
InvokeResultCallbacks
(
NS_OK
)
;
if
(
!
registration
-
>
IsControllingClients
(
)
&
&
registration
-
>
IsIdle
(
)
)
{
swm
-
>
RemoveRegistration
(
registration
)
;
}
Finish
(
NS_OK
)
;
}
}
}
