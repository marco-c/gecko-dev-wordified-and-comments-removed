#
include
"
ServiceWorkerChild
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
namespace
mozilla
{
namespace
dom
{
void
ServiceWorkerChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mIPCWorkerRef
=
nullptr
;
if
(
mOwner
)
{
mOwner
-
>
RevokeActor
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOwner
)
;
}
}
ServiceWorkerChild
*
ServiceWorkerChild
:
:
Create
(
)
{
ServiceWorkerChild
*
actor
=
new
ServiceWorkerChild
(
)
;
if
(
!
NS_IsMainThread
(
)
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
RefPtr
<
IPCWorkerRefHelper
<
ServiceWorkerChild
>
>
helper
=
new
IPCWorkerRefHelper
<
ServiceWorkerChild
>
(
actor
)
;
actor
-
>
mIPCWorkerRef
=
IPCWorkerRef
:
:
Create
(
workerPrivate
"
ServiceWorkerChild
"
[
helper
]
{
helper
-
>
Actor
(
)
-
>
MaybeStartTeardown
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
actor
-
>
mIPCWorkerRef
)
)
{
delete
actor
;
return
nullptr
;
}
}
return
actor
;
}
ServiceWorkerChild
:
:
ServiceWorkerChild
(
)
:
mOwner
(
nullptr
)
mTeardownStarted
(
false
)
{
}
void
ServiceWorkerChild
:
:
SetOwner
(
RemoteServiceWorkerImpl
*
aOwner
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOwner
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aOwner
)
;
mOwner
=
aOwner
;
}
void
ServiceWorkerChild
:
:
RevokeOwner
(
RemoteServiceWorkerImpl
*
aOwner
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mOwner
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aOwner
=
=
mOwner
)
;
mOwner
=
nullptr
;
}
void
ServiceWorkerChild
:
:
MaybeStartTeardown
(
)
{
if
(
mTeardownStarted
)
{
return
;
}
mTeardownStarted
=
true
;
Unused
<
<
SendTeardown
(
)
;
}
}
}
