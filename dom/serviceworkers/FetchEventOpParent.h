#
ifndef
mozilla_dom_fetcheventopparent_h__
#
define
mozilla_dom_fetcheventopparent_h__
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
dom
/
FetchEventOpProxyParent
.
h
"
#
include
"
mozilla
/
dom
/
PFetchEventOpParent
.
h
"
namespace
mozilla
:
:
dom
{
class
FetchEventOpParent
final
:
public
PFetchEventOpParent
{
friend
class
PFetchEventOpParent
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
FetchEventOpParent
)
FetchEventOpParent
(
)
=
default
;
Tuple
<
Maybe
<
ParentToParentInternalResponse
>
Maybe
<
ResponseEndArgs
>
>
OnStart
(
MovingNotNull
<
RefPtr
<
FetchEventOpProxyParent
>
>
aFetchEventOpProxyParent
)
;
void
OnFinish
(
)
;
private
:
~
FetchEventOpParent
(
)
=
default
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadResponse
(
ParentToParentInternalResponse
&
&
aResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreloadResponseEnd
(
ResponseEndArgs
&
&
aArgs
)
;
void
ActorDestroy
(
ActorDestroyReason
)
override
;
struct
Pending
{
Maybe
<
ParentToParentInternalResponse
>
mPreloadResponse
;
Maybe
<
ResponseEndArgs
>
mEndArgs
;
}
;
struct
Started
{
NotNull
<
RefPtr
<
FetchEventOpProxyParent
>
>
mFetchEventOpProxyParent
;
}
;
struct
Finished
{
}
;
using
State
=
Variant
<
Pending
Started
Finished
>
;
State
mState
=
AsVariant
(
Pending
(
)
)
;
}
;
}
#
endif
