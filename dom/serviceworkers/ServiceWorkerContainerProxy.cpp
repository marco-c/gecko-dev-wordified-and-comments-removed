#
include
"
ServiceWorkerContainerProxy
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
;
ServiceWorkerContainerProxy
:
:
~
ServiceWorkerContainerProxy
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
)
;
}
ServiceWorkerContainerProxy
:
:
ServiceWorkerContainerProxy
(
ServiceWorkerContainerParent
*
aActor
)
:
mActor
(
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
}
void
ServiceWorkerContainerProxy
:
:
RevokeActor
(
ServiceWorkerContainerParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
=
=
aActor
)
;
mActor
=
nullptr
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerProxy
:
:
Register
(
const
ClientInfo
&
aClientInfo
const
nsCString
&
aScopeURL
const
nsCString
&
aScriptURL
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
{
AssertIsOnBackgroundThread
(
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
promise
=
new
ServiceWorkerRegistrationPromise
:
:
Private
(
__func__
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
aClientInfo
aScopeURL
aScriptURL
aUpdateViaCache
promise
]
(
)
mutable
{
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
promise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE_VOID
(
swm
)
;
swm
-
>
Register
(
aClientInfo
aScopeURL
aScriptURL
aUpdateViaCache
)
-
>
ChainTo
(
promise
.
forget
(
)
__func__
)
;
scopeExit
.
release
(
)
;
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
return
promise
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerProxy
:
:
GetRegistration
(
const
ClientInfo
&
aClientInfo
const
nsCString
&
aURL
)
{
AssertIsOnBackgroundThread
(
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
:
:
Private
>
promise
=
new
ServiceWorkerRegistrationPromise
:
:
Private
(
__func__
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
aClientInfo
aURL
promise
]
(
)
mutable
{
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
promise
-
>
Reject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE_VOID
(
swm
)
;
swm
-
>
GetRegistration
(
aClientInfo
aURL
)
-
>
ChainTo
(
promise
.
forget
(
)
__func__
)
;
scopeExit
.
release
(
)
;
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
return
promise
;
}
}
}
