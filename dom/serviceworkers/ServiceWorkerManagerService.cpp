#
include
"
ServiceWorkerManagerService
.
h
"
#
include
"
ServiceWorkerManagerParent
.
h
"
#
include
"
ServiceWorkerRegistrar
.
h
"
#
include
"
ServiceWorkerUpdaterParent
.
h
"
#
include
"
ServiceWorkerUtils
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
ServiceWorkerManagerService
*
sInstance
=
nullptr
;
}
ServiceWorkerManagerService
:
:
ServiceWorkerManagerService
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
sInstance
)
;
sInstance
=
this
;
}
ServiceWorkerManagerService
:
:
~
ServiceWorkerManagerService
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
sInstance
=
=
this
)
;
MOZ_ASSERT
(
mAgents
.
Count
(
)
=
=
0
)
;
sInstance
=
nullptr
;
}
already_AddRefed
<
ServiceWorkerManagerService
>
ServiceWorkerManagerService
:
:
Get
(
)
{
AssertIsOnBackgroundThread
(
)
;
RefPtr
<
ServiceWorkerManagerService
>
instance
=
sInstance
;
return
instance
.
forget
(
)
;
}
already_AddRefed
<
ServiceWorkerManagerService
>
ServiceWorkerManagerService
:
:
GetOrCreate
(
)
{
AssertIsOnBackgroundThread
(
)
;
RefPtr
<
ServiceWorkerManagerService
>
instance
=
sInstance
;
if
(
!
instance
)
{
instance
=
new
ServiceWorkerManagerService
(
)
;
}
return
instance
.
forget
(
)
;
}
void
ServiceWorkerManagerService
:
:
RegisterActor
(
ServiceWorkerManagerParent
*
aParent
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
!
mAgents
.
Contains
(
aParent
)
)
;
mAgents
.
Insert
(
aParent
)
;
}
void
ServiceWorkerManagerService
:
:
UnregisterActor
(
ServiceWorkerManagerParent
*
aParent
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
mAgents
.
Contains
(
aParent
)
)
;
mAgents
.
Remove
(
aParent
)
;
}
void
ServiceWorkerManagerService
:
:
PropagateRegistration
(
uint64_t
aParentID
ServiceWorkerRegistrationData
&
aData
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
return
;
}
for
(
RefPtr
<
ServiceWorkerManagerParent
>
parent
:
mAgents
)
{
MOZ_ASSERT
(
parent
)
;
if
(
parent
-
>
ID
(
)
!
=
aParentID
)
{
Unused
<
<
parent
-
>
SendNotifyRegister
(
aData
)
;
}
}
PrincipalInfo
pi
=
aData
.
principal
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
dom
:
:
ServiceWorkerManagerService
:
:
PropagateRegistration
"
[
pi
]
(
)
{
nsTArray
<
ContentParent
*
>
cps
;
ContentParent
:
:
GetAll
(
cps
)
;
for
(
auto
*
cp
:
cps
)
{
auto
principalOrErr
=
PrincipalInfoToPrincipal
(
pi
)
;
if
(
principalOrErr
.
isOk
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
principalOrErr
.
unwrap
(
)
;
cp
-
>
TransmitPermissionsForPrincipal
(
principal
)
;
}
}
}
)
)
;
}
void
ServiceWorkerManagerService
:
:
PropagateSoftUpdate
(
uint64_t
aParentID
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aScope
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
return
;
}
for
(
RefPtr
<
ServiceWorkerManagerParent
>
parent
:
mAgents
)
{
MOZ_ASSERT
(
parent
)
;
nsString
scope
(
aScope
)
;
Unused
<
<
parent
-
>
SendNotifySoftUpdate
(
aOriginAttributes
scope
)
;
}
}
void
ServiceWorkerManagerService
:
:
PropagateUnregister
(
uint64_t
aParentID
const
PrincipalInfo
&
aPrincipalInfo
const
nsAString
&
aScope
)
{
AssertIsOnBackgroundThread
(
)
;
RefPtr
<
dom
:
:
ServiceWorkerRegistrar
>
service
=
dom
:
:
ServiceWorkerRegistrar
:
:
Get
(
)
;
MOZ_ASSERT
(
service
)
;
service
-
>
UnregisterServiceWorker
(
aPrincipalInfo
NS_ConvertUTF16toUTF8
(
aScope
)
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
return
;
}
for
(
RefPtr
<
ServiceWorkerManagerParent
>
parent
:
mAgents
)
{
MOZ_ASSERT
(
parent
)
;
if
(
parent
-
>
ID
(
)
!
=
aParentID
)
{
nsString
scope
(
aScope
)
;
Unused
<
<
parent
-
>
SendNotifyUnregister
(
aPrincipalInfo
scope
)
;
}
}
}
void
ServiceWorkerManagerService
:
:
PropagateRemove
(
uint64_t
aParentID
const
nsACString
&
aHost
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
return
;
}
for
(
RefPtr
<
ServiceWorkerManagerParent
>
parent
:
mAgents
)
{
MOZ_ASSERT
(
parent
)
;
if
(
parent
-
>
ID
(
)
!
=
aParentID
)
{
nsCString
host
(
aHost
)
;
Unused
<
<
parent
-
>
SendNotifyRemove
(
host
)
;
}
}
}
void
ServiceWorkerManagerService
:
:
PropagateRemoveAll
(
uint64_t
aParentID
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
return
;
}
RefPtr
<
dom
:
:
ServiceWorkerRegistrar
>
service
=
dom
:
:
ServiceWorkerRegistrar
:
:
Get
(
)
;
MOZ_ASSERT
(
service
)
;
service
-
>
RemoveAll
(
)
;
for
(
RefPtr
<
ServiceWorkerManagerParent
>
parent
:
mAgents
)
{
MOZ_ASSERT
(
parent
)
;
if
(
parent
-
>
ID
(
)
!
=
aParentID
)
{
Unused
<
<
parent
-
>
SendNotifyRemoveAll
(
)
;
}
}
}
void
ServiceWorkerManagerService
:
:
ProcessUpdaterActor
(
ServiceWorkerUpdaterParent
*
aActor
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aScope
uint64_t
aParentId
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
ServiceWorkerParentInterceptEnabled
(
)
)
;
nsAutoCString
suffix
;
aOriginAttributes
.
CreateSuffix
(
suffix
)
;
nsCString
scope
(
aScope
)
;
scope
.
Append
(
suffix
)
;
for
(
uint32_t
i
=
0
;
i
<
mPendingUpdaterActors
.
Length
(
)
;
+
+
i
)
{
if
(
mPendingUpdaterActors
[
i
]
.
mScope
.
Equals
(
scope
)
&
&
mPendingUpdaterActors
[
i
]
.
mParentId
!
=
aParentId
)
{
Unused
<
<
aActor
-
>
SendProceed
(
false
)
;
return
;
}
}
if
(
aActor
-
>
Proceed
(
this
)
)
{
PendingUpdaterActor
*
pua
=
mPendingUpdaterActors
.
AppendElement
(
)
;
pua
-
>
mActor
=
aActor
;
pua
-
>
mScope
=
scope
;
pua
-
>
mParentId
=
aParentId
;
}
}
void
ServiceWorkerManagerService
:
:
UpdaterActorDestroyed
(
ServiceWorkerUpdaterParent
*
aActor
)
{
for
(
uint32_t
i
=
0
;
i
<
mPendingUpdaterActors
.
Length
(
)
;
+
+
i
)
{
if
(
mPendingUpdaterActors
[
i
]
.
mActor
=
=
aActor
)
{
mPendingUpdaterActors
.
RemoveElementAt
(
i
)
;
return
;
}
}
MOZ_CRASH
(
"
The
actor
should
be
found
"
)
;
}
}
}
