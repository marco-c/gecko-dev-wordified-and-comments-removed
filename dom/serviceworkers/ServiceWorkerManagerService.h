#
ifndef
mozilla_dom_ServiceWorkerManagerService_h
#
define
mozilla_dom_ServiceWorkerManagerService_h
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
class
OriginAttributes
;
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
ServiceWorkerManagerParent
;
class
ServiceWorkerRegistrationData
;
class
ServiceWorkerUpdaterParent
;
class
ServiceWorkerManagerService
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerManagerService
)
static
already_AddRefed
<
ServiceWorkerManagerService
>
Get
(
)
;
static
already_AddRefed
<
ServiceWorkerManagerService
>
GetOrCreate
(
)
;
void
RegisterActor
(
ServiceWorkerManagerParent
*
aParent
)
;
void
UnregisterActor
(
ServiceWorkerManagerParent
*
aParent
)
;
void
PropagateRegistration
(
uint64_t
aParentID
ServiceWorkerRegistrationData
&
aData
)
;
void
PropagateSoftUpdate
(
uint64_t
aParentID
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aScope
)
;
void
PropagateUnregister
(
uint64_t
aParentID
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsAString
&
aScope
)
;
void
PropagateRemove
(
uint64_t
aParentID
const
nsACString
&
aHost
)
;
void
PropagateRemoveAll
(
uint64_t
aParentID
)
;
void
ProcessUpdaterActor
(
ServiceWorkerUpdaterParent
*
aActor
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aScope
uint64_t
aParentID
)
;
void
UpdaterActorDestroyed
(
ServiceWorkerUpdaterParent
*
aActor
)
;
private
:
ServiceWorkerManagerService
(
)
;
~
ServiceWorkerManagerService
(
)
;
nsTHashSet
<
ServiceWorkerManagerParent
*
>
mAgents
;
struct
PendingUpdaterActor
{
nsCString
mScope
;
ServiceWorkerUpdaterParent
*
mActor
;
uint64_t
mParentId
;
}
;
nsTArray
<
PendingUpdaterActor
>
mPendingUpdaterActors
;
}
;
}
}
#
endif
