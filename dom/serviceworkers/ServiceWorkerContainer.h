#
ifndef
mozilla_dom_serviceworkercontainer_h__
#
define
mozilla_dom_serviceworkercontainer_h__
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerUtils
.
h
"
class
nsIGlobalWindow
;
namespace
mozilla
:
:
dom
{
class
ClientPostMessageArgs
;
struct
MessageEventInit
;
class
Promise
;
struct
RegistrationOptions
;
class
ServiceWorker
;
class
ServiceWorkerContainer
final
:
public
DOMEventTargetHelper
{
public
:
class
Inner
{
public
:
virtual
void
AddContainer
(
ServiceWorkerContainer
*
aOuter
)
=
0
;
virtual
void
RemoveContainer
(
ServiceWorkerContainer
*
aOuter
)
=
0
;
virtual
void
Register
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aScopeURL
const
nsACString
&
aScriptURL
ServiceWorkerUpdateViaCache
aUpdateViaCache
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
const
=
0
;
virtual
void
GetRegistration
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aURL
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
const
=
0
;
virtual
void
GetRegistrations
(
const
ClientInfo
&
aClientInfo
ServiceWorkerRegistrationListCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
const
=
0
;
virtual
void
GetReady
(
const
ClientInfo
&
aClientInfo
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
const
=
0
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
}
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServiceWorkerContainer
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
controllerchange
)
IMPL_EVENT_HANDLER
(
messageerror
)
inline
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
GetOnmessage
(
)
{
return
GetEventHandler
(
nsGkAtoms
:
:
onmessage
)
;
}
inline
void
SetOnmessage
(
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
aCallback
)
{
SetEventHandler
(
nsGkAtoms
:
:
onmessage
aCallback
)
;
StartMessages
(
)
;
}
static
bool
IsEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
static
already_AddRefed
<
ServiceWorkerContainer
>
Create
(
nsIGlobalObject
*
aGlobal
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Register
(
const
nsAString
&
aScriptURL
const
RegistrationOptions
&
aOptions
const
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
ServiceWorker
>
GetController
(
)
;
already_AddRefed
<
Promise
>
GetRegistration
(
const
nsAString
&
aDocumentURL
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetRegistrations
(
ErrorResult
&
aRv
)
;
void
StartMessages
(
)
;
Promise
*
GetReady
(
ErrorResult
&
aRv
)
;
void
GetScopeForUrl
(
const
nsAString
&
aUrl
nsString
&
aScope
ErrorResult
&
aRv
)
;
void
DisconnectFromOwner
(
)
override
;
void
ControllerChanged
(
ErrorResult
&
aRv
)
;
void
ReceiveMessage
(
const
ClientPostMessageArgs
&
aArgs
)
;
private
:
ServiceWorkerContainer
(
nsIGlobalObject
*
aGlobal
already_AddRefed
<
ServiceWorkerContainer
:
:
Inner
>
aInner
)
;
~
ServiceWorkerContainer
(
)
;
nsIGlobalObject
*
GetGlobalIfValid
(
ErrorResult
&
aRv
const
std
:
:
function
<
void
(
Document
*
)
>
&
&
aStorageFailureCB
=
nullptr
)
const
;
struct
ReceivedMessage
;
void
EnqueueReceivedMessageDispatch
(
RefPtr
<
ReceivedMessage
>
aMessage
)
;
template
<
typename
F
>
void
RunWithJSContext
(
F
&
&
aCallable
)
;
void
DispatchMessage
(
RefPtr
<
ReceivedMessage
>
aMessage
)
;
static
Result
<
Ok
bool
>
FillInMessageEventInit
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
ReceivedMessage
&
aMessage
MessageEventInit
&
aInit
ErrorResult
&
aRv
)
;
RefPtr
<
Inner
>
mInner
;
RefPtr
<
ServiceWorker
>
mControllerWorker
;
RefPtr
<
Promise
>
mReadyPromise
;
MozPromiseRequestHolder
<
ServiceWorkerRegistrationPromise
>
mReadyPromiseHolder
;
bool
mMessagesStarted
=
false
;
nsTArray
<
RefPtr
<
ReceivedMessage
>
>
mPendingMessages
;
}
;
}
#
endif
