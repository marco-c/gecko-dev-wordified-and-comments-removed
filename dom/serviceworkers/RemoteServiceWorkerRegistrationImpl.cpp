#
include
"
RemoteServiceWorkerRegistrationImpl
.
h
"
#
include
"
ServiceWorkerRegistrationChild
.
h
"
namespace
mozilla
{
namespace
dom
{
RemoteServiceWorkerRegistrationImpl
:
:
~
RemoteServiceWorkerRegistrationImpl
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
Shutdown
(
)
;
}
void
RemoteServiceWorkerRegistrationImpl
:
:
Shutdown
(
)
{
if
(
mShutdown
)
{
return
;
}
mShutdown
=
true
;
if
(
mActor
)
{
mActor
-
>
RevokeOwner
(
this
)
;
mActor
-
>
MaybeStartTeardown
(
)
;
mActor
=
nullptr
;
}
}
void
RemoteServiceWorkerRegistrationImpl
:
:
SetServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
NS_ASSERT_OWNINGTHREAD
(
RemoteServiceWorkerRegistrationImpl
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aReg
)
;
mOuter
=
aReg
;
}
void
RemoteServiceWorkerRegistrationImpl
:
:
ClearServiceWorkerRegistration
(
ServiceWorkerRegistration
*
aReg
)
{
NS_ASSERT_OWNINGTHREAD
(
RemoteServiceWorkerRegistrationImpl
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aReg
=
=
mOuter
)
;
mOuter
=
nullptr
;
}
void
RemoteServiceWorkerRegistrationImpl
:
:
Update
(
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
{
}
void
RemoteServiceWorkerRegistrationImpl
:
:
Unregister
(
ServiceWorkerBoolCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
{
}
RemoteServiceWorkerRegistrationImpl
:
:
RemoteServiceWorkerRegistrationImpl
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
:
mActor
(
nullptr
)
mOuter
(
nullptr
)
mShutdown
(
false
)
{
PBackgroundChild
*
parentActor
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
parentActor
)
)
{
Shutdown
(
)
;
return
;
}
RefPtr
<
WorkerHolderToken
>
workerHolderToken
;
if
(
!
NS_IsMainThread
(
)
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
workerHolderToken
=
WorkerHolderToken
:
:
Create
(
workerPrivate
Terminating
WorkerHolderToken
:
:
AllowIdleShutdownStart
)
;
if
(
NS_WARN_IF
(
!
workerHolderToken
)
)
{
Shutdown
(
)
;
return
;
}
}
ServiceWorkerRegistrationChild
*
actor
=
new
ServiceWorkerRegistrationChild
(
workerHolderToken
)
;
PServiceWorkerRegistrationChild
*
sentActor
=
parentActor
-
>
SendPServiceWorkerRegistrationConstructor
(
actor
aDescriptor
.
ToIPC
(
)
)
;
if
(
NS_WARN_IF
(
!
sentActor
)
)
{
Shutdown
(
)
;
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
sentActor
=
=
actor
)
;
mActor
=
actor
;
mActor
-
>
SetOwner
(
this
)
;
}
void
RemoteServiceWorkerRegistrationImpl
:
:
RevokeActor
(
ServiceWorkerRegistrationChild
*
aActor
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
=
=
aActor
)
;
mActor
-
>
RevokeOwner
(
this
)
;
mActor
=
nullptr
;
mShutdown
=
true
;
if
(
mOuter
)
{
mOuter
-
>
RegistrationRemoved
(
)
;
}
}
}
}
