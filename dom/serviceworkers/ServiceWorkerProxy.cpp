#
include
"
ServiceWorkerProxy
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
ServiceWorkerInfo
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
;
ServiceWorkerProxy
:
:
~
ServiceWorkerProxy
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mInfo
)
;
}
void
ServiceWorkerProxy
:
:
MaybeShutdownOnBGThread
(
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
!
mActor
)
{
return
;
}
mActor
-
>
MaybeSendDelete
(
)
;
}
void
ServiceWorkerProxy
:
:
InitOnMainThread
(
)
{
AssertIsOnMainThread
(
)
;
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
MaybeShutdownOnMainThread
(
)
;
}
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE_VOID
(
swm
)
;
RefPtr
<
ServiceWorkerRegistrationInfo
>
reg
=
swm
-
>
GetRegistration
(
mDescriptor
.
PrincipalInfo
(
)
mDescriptor
.
Scope
(
)
)
;
NS_ENSURE_TRUE_VOID
(
reg
)
;
RefPtr
<
ServiceWorkerInfo
>
info
=
reg
-
>
GetByDescriptor
(
mDescriptor
)
;
NS_ENSURE_TRUE_VOID
(
info
)
;
scopeExit
.
release
(
)
;
mInfo
=
new
nsMainThreadPtrHolder
<
ServiceWorkerInfo
>
(
"
ServiceWorkerProxy
:
:
mInfo
"
info
)
;
}
void
ServiceWorkerProxy
:
:
MaybeShutdownOnMainThread
(
)
{
AssertIsOnMainThread
(
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
__func__
this
&
ServiceWorkerProxy
:
:
MaybeShutdownOnBGThread
)
;
MOZ_ALWAYS_SUCCEEDS
(
mEventTarget
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
)
;
}
void
ServiceWorkerProxy
:
:
StopListeningOnMainThread
(
)
{
AssertIsOnMainThread
(
)
;
mInfo
=
nullptr
;
}
ServiceWorkerProxy
:
:
ServiceWorkerProxy
(
const
ServiceWorkerDescriptor
&
aDescriptor
)
:
mActor
(
nullptr
)
mEventTarget
(
GetCurrentThreadSerialEventTarget
(
)
)
mDescriptor
(
aDescriptor
)
{
}
void
ServiceWorkerProxy
:
:
Init
(
ServiceWorkerParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mEventTarget
)
;
mActor
=
aActor
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
"
ServiceWorkerProxy
:
:
Init
"
this
&
ServiceWorkerProxy
:
:
InitOnMainThread
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
void
ServiceWorkerProxy
:
:
RevokeActor
(
ServiceWorkerParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
=
=
aActor
)
;
mActor
=
nullptr
;
nsCOMPtr
<
nsIRunnable
>
r
=
NewRunnableMethod
(
__func__
this
&
ServiceWorkerProxy
:
:
StopListeningOnMainThread
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
}
}
