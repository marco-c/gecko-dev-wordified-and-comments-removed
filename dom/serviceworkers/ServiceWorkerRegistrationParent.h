#
ifndef
mozilla_dom_serviceworkerregistrationparent_h__
#
define
mozilla_dom_serviceworkerregistrationparent_h__
#
include
"
mozilla
/
dom
/
PServiceWorkerRegistrationParent
.
h
"
namespace
mozilla
:
:
dom
{
class
IPCServiceWorkerRegistrationDescriptor
;
class
ServiceWorkerRegistrationProxy
;
class
ServiceWorkerRegistrationParent
final
:
public
PServiceWorkerRegistrationParent
{
RefPtr
<
ServiceWorkerRegistrationProxy
>
mProxy
;
~
ServiceWorkerRegistrationParent
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUnregister
(
UnregisterResolver
&
&
aResolver
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdate
(
const
nsACString
&
aNewestWorkerScriptUrl
UpdateResolver
&
&
aResolver
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetNavigationPreloadEnabled
(
const
bool
&
aEnabled
SetNavigationPreloadEnabledResolver
&
&
aResolver
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetNavigationPreloadHeader
(
const
nsACString
&
aHeader
SetNavigationPreloadHeaderResolver
&
&
aResolver
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetNavigationPreloadState
(
GetNavigationPreloadStateResolver
&
&
aResolver
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetNotifications
(
const
nsAString
&
aTag
GetNotificationsResolver
&
&
aResolver
)
override
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerRegistrationParent
override
)
;
ServiceWorkerRegistrationParent
(
)
;
void
Init
(
const
IPCServiceWorkerRegistrationDescriptor
&
aDescriptor
const
IPCClientInfo
&
aForClient
)
;
void
MaybeSendDelete
(
)
;
}
;
}
#
endif
