#
include
"
ServiceWorkerImpl
.
h
"
#
include
"
ServiceWorkerInfo
.
h
"
#
include
"
ServiceWorkerRegistrationInfo
.
h
"
namespace
mozilla
{
namespace
dom
{
ServiceWorkerImpl
:
:
~
ServiceWorkerImpl
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
}
void
ServiceWorkerImpl
:
:
AddServiceWorker
(
ServiceWorker
*
aWorker
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aWorker
)
;
mOuter
=
aWorker
;
}
void
ServiceWorkerImpl
:
:
RemoveServiceWorker
(
ServiceWorker
*
aWorker
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mOuter
=
=
aWorker
)
;
mOuter
=
nullptr
;
}
void
ServiceWorkerImpl
:
:
GetRegistration
(
ServiceWorkerRegistrationCallback
&
&
aSuccessCB
ServiceWorkerFailureCallback
&
&
aFailureCB
)
{
if
(
!
mOuter
)
{
aFailureCB
(
CopyableErrorResult
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
)
;
return
;
}
nsIGlobalObject
*
global
=
mOuter
-
>
GetParentObject
(
)
;
if
(
!
global
)
{
aFailureCB
(
CopyableErrorResult
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
)
;
return
;
}
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ServiceWorkerImpl
:
:
GetRegistration
"
[
reg
=
mReg
successCB
=
std
:
:
move
(
aSuccessCB
)
]
(
)
mutable
{
successCB
(
reg
-
>
Descriptor
(
)
)
;
}
)
;
nsresult
rv
=
global
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
if
(
NS_FAILED
(
rv
)
)
{
aFailureCB
(
CopyableErrorResult
(
rv
)
)
;
return
;
}
}
void
ServiceWorkerImpl
:
:
PostMessage
(
RefPtr
<
ServiceWorkerCloneData
>
&
&
aData
const
ClientInfo
&
aClientInfo
const
ClientState
&
aClientState
)
{
mInfo
-
>
PostMessage
(
std
:
:
move
(
aData
)
aClientInfo
aClientState
)
;
}
ServiceWorkerImpl
:
:
ServiceWorkerImpl
(
ServiceWorkerInfo
*
aInfo
ServiceWorkerRegistrationInfo
*
aReg
)
:
mInfo
(
aInfo
)
mReg
(
aReg
)
mOuter
(
nullptr
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mInfo
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mReg
)
;
}
}
}
