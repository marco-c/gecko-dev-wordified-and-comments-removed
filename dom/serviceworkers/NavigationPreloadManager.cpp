#
include
"
NavigationPreloadManager
.
h
"
#
include
"
ServiceWorkerUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
NavigationPreloadManagerBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
NavigationPreloadManager
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
NavigationPreloadManager
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
NavigationPreloadManager
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
NavigationPreloadManager
mGlobal
)
bool
NavigationPreloadManager
:
:
IsValidHeader
(
const
nsACString
&
aHeader
)
{
return
NS_IsReasonableHTTPHeaderValue
(
aHeader
)
;
}
NavigationPreloadManager
:
:
NavigationPreloadManager
(
nsCOMPtr
<
nsIGlobalObject
>
&
&
aGlobal
)
:
mGlobal
(
aGlobal
)
{
}
JSObject
*
NavigationPreloadManager
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
NavigationPreloadManager_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
NavigationPreloadManager
:
:
SetEnabled
(
bool
aEnabled
)
{
ErrorResult
result
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
result
.
SuppressException
(
)
;
return
promise
.
forget
(
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
NavigationPreloadManager
:
:
Enable
(
)
{
return
SetEnabled
(
true
)
;
}
already_AddRefed
<
Promise
>
NavigationPreloadManager
:
:
Disable
(
)
{
return
SetEnabled
(
false
)
;
}
already_AddRefed
<
Promise
>
NavigationPreloadManager
:
:
SetHeaderValue
(
const
nsACString
&
aHeader
)
{
ErrorResult
result
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
result
.
SuppressException
(
)
;
return
promise
.
forget
(
)
;
}
if
(
!
IsValidHeader
(
aHeader
)
)
{
result
.
ThrowTypeError
<
MSG_INVALID_HEADER_VALUE
>
(
aHeader
)
;
promise
-
>
MaybeReject
(
std
:
:
move
(
result
)
)
;
return
promise
.
forget
(
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
NavigationPreloadManager
:
:
GetState
(
)
{
ErrorResult
result
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
result
.
SuppressException
(
)
;
return
promise
.
forget
(
)
;
}
return
promise
.
forget
(
)
;
}
}
