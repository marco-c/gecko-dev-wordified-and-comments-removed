#
ifndef
moz_dom_ServiceWorkerRegistrationProxy_h
#
define
moz_dom_ServiceWorkerRegistrationProxy_h
#
include
"
mozilla
/
dom
/
PServiceWorkerRegistrationParent
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
ServiceWorkerRegistrationDescriptor
.
h
"
#
include
"
ServiceWorkerRegistrationListener
.
h
"
#
include
"
ServiceWorkerUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ServiceWorkerRegistrationInfo
;
class
ServiceWorkerRegistrationParent
;
class
ServiceWorkerRegistrationProxy
final
:
public
ServiceWorkerRegistrationListener
{
ServiceWorkerRegistrationParent
*
mActor
;
nsCOMPtr
<
nsISerialEventTarget
>
mEventTarget
;
ServiceWorkerRegistrationDescriptor
mDescriptor
;
nsMainThreadPtrHandle
<
ServiceWorkerRegistrationInfo
>
mReg
;
~
ServiceWorkerRegistrationProxy
(
)
;
void
MaybeShutdownOnBGThread
(
)
;
void
UpdateStateOnBGThread
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
void
FireUpdateFoundOnBGThread
(
)
;
void
InitOnMainThread
(
)
;
void
MaybeShutdownOnMainThread
(
)
;
void
StopListeningOnMainThread
(
)
;
void
UpdateState
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
;
void
FireUpdateFound
(
)
override
;
void
RegistrationRemoved
(
)
override
;
void
GetScope
(
nsAString
&
aScope
)
const
override
;
bool
MatchesDescriptor
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
override
;
public
:
explicit
ServiceWorkerRegistrationProxy
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
void
Init
(
ServiceWorkerRegistrationParent
*
aActor
)
;
void
RevokeActor
(
ServiceWorkerRegistrationParent
*
aActor
)
;
RefPtr
<
GenericPromise
>
Unregister
(
)
;
RefPtr
<
ServiceWorkerRegistrationPromise
>
Update
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ServiceWorkerRegistrationProxy
override
)
;
}
;
}
}
#
endif
