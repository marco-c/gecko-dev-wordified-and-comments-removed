#
ifndef
_mozilla_dom_ServiceWorkerRegistrationDescriptor_h
#
define
_mozilla_dom_ServiceWorkerRegistrationDescriptor_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
IPCServiceWorkerRegistrationDescriptor
;
class
ServiceWorkerInfo
;
enum
class
ServiceWorkerUpdateViaCache
:
uint8_t
;
class
ServiceWorkerRegistrationDescriptor
final
{
UniquePtr
<
IPCServiceWorkerRegistrationDescriptor
>
mData
;
Maybe
<
IPCServiceWorkerDescriptor
>
NewestInternal
(
)
const
;
public
:
ServiceWorkerRegistrationDescriptor
(
uint64_t
aId
uint64_t
aVersion
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
ServiceWorkerRegistrationDescriptor
(
uint64_t
aId
uint64_t
aVersion
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
explicit
ServiceWorkerRegistrationDescriptor
(
const
IPCServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
ServiceWorkerRegistrationDescriptor
(
const
ServiceWorkerRegistrationDescriptor
&
aRight
)
;
ServiceWorkerRegistrationDescriptor
&
operator
=
(
const
ServiceWorkerRegistrationDescriptor
&
aRight
)
;
ServiceWorkerRegistrationDescriptor
(
ServiceWorkerRegistrationDescriptor
&
&
aRight
)
;
ServiceWorkerRegistrationDescriptor
&
operator
=
(
ServiceWorkerRegistrationDescriptor
&
&
aRight
)
;
~
ServiceWorkerRegistrationDescriptor
(
)
;
bool
operator
=
=
(
const
ServiceWorkerRegistrationDescriptor
&
aRight
)
const
;
uint64_t
Id
(
)
const
;
uint64_t
Version
(
)
const
;
ServiceWorkerUpdateViaCache
UpdateViaCache
(
)
const
;
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
PrincipalInfo
(
)
const
;
Result
<
nsCOMPtr
<
nsIPrincipal
>
nsresult
>
GetPrincipal
(
)
const
;
const
nsCString
&
Scope
(
)
const
;
Maybe
<
ServiceWorkerDescriptor
>
GetInstalling
(
)
const
;
Maybe
<
ServiceWorkerDescriptor
>
GetWaiting
(
)
const
;
Maybe
<
ServiceWorkerDescriptor
>
GetActive
(
)
const
;
Maybe
<
ServiceWorkerDescriptor
>
Newest
(
)
const
;
bool
HasWorker
(
const
ServiceWorkerDescriptor
&
aDescriptor
)
const
;
bool
IsValid
(
)
const
;
void
SetUpdateViaCache
(
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
void
SetWorkers
(
ServiceWorkerInfo
*
aInstalling
ServiceWorkerInfo
*
aWaiting
ServiceWorkerInfo
*
aActive
)
;
void
SetVersion
(
uint64_t
aVersion
)
;
const
IPCServiceWorkerRegistrationDescriptor
&
ToIPC
(
)
const
;
}
;
}
}
#
endif
