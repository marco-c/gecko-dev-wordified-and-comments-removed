#
ifndef
mozilla_dom_workers_serviceworkerupdatejob_h
#
define
mozilla_dom_workers_serviceworkerupdatejob_h
#
include
"
ServiceWorkerJob
.
h
"
#
include
"
ServiceWorkerRegistration
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
class
ServiceWorkerManager
;
class
ServiceWorkerUpdateJob
:
public
ServiceWorkerJob
{
public
:
ServiceWorkerUpdateJob
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
const
nsACString
&
aScriptSpec
nsILoadGroup
*
aLoadGroup
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
already_AddRefed
<
ServiceWorkerRegistrationInfo
>
GetRegistration
(
)
const
;
protected
:
ServiceWorkerUpdateJob
(
Type
aType
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
const
nsACString
&
aScriptSpec
nsILoadGroup
*
aLoadGroup
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
;
virtual
~
ServiceWorkerUpdateJob
(
)
;
void
FailUpdateJob
(
ErrorResult
&
aRv
)
;
void
FailUpdateJob
(
nsresult
aRv
)
;
virtual
void
AsyncExecute
(
)
override
;
void
SetRegistration
(
ServiceWorkerRegistrationInfo
*
aRegistration
)
;
void
Update
(
)
;
ServiceWorkerUpdateViaCache
GetUpdateViaCache
(
)
const
;
private
:
class
CompareCallback
;
class
ContinueUpdateRunnable
;
class
ContinueInstallRunnable
;
void
ComparisonResult
(
nsresult
aStatus
bool
aInCacheAndEqual
const
nsAString
&
aNewCacheName
const
nsACString
&
aMaxScope
nsLoadFlags
aLoadFlags
)
;
void
ContinueUpdateAfterScriptEval
(
bool
aScriptEvaluationResult
)
;
void
Install
(
ServiceWorkerManager
*
aSWM
)
;
void
ContinueAfterInstallEvent
(
bool
aInstallEventSuccess
)
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
ServiceWorkerUpdateViaCache
mUpdateViaCache
;
RefPtr
<
ServiceWorkerRegistrationInfo
>
mRegistration
;
}
;
}
}
}
#
endif
