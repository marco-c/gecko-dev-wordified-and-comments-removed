#
include
"
ServiceWorkerContainerImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerImpl
:
:
Register
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aScopeURL
const
nsACString
&
aScriptURL
ServiceWorkerUpdateViaCache
aUpdateViaCache
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
Register
(
aClientInfo
aScopeURL
aScriptURL
aUpdateViaCache
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerImpl
:
:
GetRegistration
(
const
ClientInfo
&
aClientInfo
const
nsACString
&
aURL
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
GetRegistration
(
aClientInfo
aURL
)
;
}
RefPtr
<
ServiceWorkerRegistrationListPromise
>
ServiceWorkerContainerImpl
:
:
GetRegistrations
(
const
ClientInfo
&
aClientInfo
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationListPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
GetRegistrations
(
aClientInfo
)
;
}
RefPtr
<
ServiceWorkerRegistrationPromise
>
ServiceWorkerContainerImpl
:
:
GetReady
(
const
ClientInfo
&
aClientInfo
)
const
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
swm
)
)
{
return
ServiceWorkerRegistrationPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
__func__
)
;
}
return
swm
-
>
WhenReady
(
aClientInfo
)
;
}
}
}
