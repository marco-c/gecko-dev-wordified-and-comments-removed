#
ifndef
DOM_FS_CHILD_FILESYSTEMREQUESTHANDLER_H_
#
define
DOM_FS_CHILD_FILESYSTEMREQUESTHANDLER_H_
#
include
"
fs
/
FileSystemChildFactory
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemHandle
.
h
"
#
include
"
nsStringFwd
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
:
:
dom
{
class
FileSystemHandle
;
class
Promise
;
class
OriginPrivateFileSystemChild
;
}
namespace
mozilla
:
:
dom
:
:
fs
{
class
FileSystemChildMetadata
;
class
FileSystemEntryMetadata
;
class
ArrayAppendable
{
}
;
class
FileSystemRequestHandler
{
public
:
explicit
FileSystemRequestHandler
(
FileSystemChildFactory
*
aChildFactory
)
:
mChildFactory
(
aChildFactory
)
{
}
FileSystemRequestHandler
(
)
:
FileSystemRequestHandler
(
new
FileSystemChildFactory
(
)
)
{
}
virtual
void
GetRoot
(
RefPtr
<
Promise
>
aPromise
)
;
virtual
void
GetDirectoryHandle
(
RefPtr
<
FileSystemActorHolder
>
&
aActor
const
FileSystemChildMetadata
&
aDirectory
bool
aCreate
RefPtr
<
Promise
>
aPromise
)
;
virtual
void
GetFileHandle
(
RefPtr
<
FileSystemActorHolder
>
&
aActor
const
FileSystemChildMetadata
&
aFile
bool
aCreate
RefPtr
<
Promise
>
aPromise
)
;
virtual
void
GetFile
(
RefPtr
<
FileSystemActorHolder
>
&
aActor
const
FileSystemEntryMetadata
&
aFile
RefPtr
<
Promise
>
aPromise
)
;
virtual
void
GetEntries
(
RefPtr
<
FileSystemActorHolder
>
&
aActor
const
EntryId
&
aDirectory
PageNumber
aPage
RefPtr
<
Promise
>
aPromise
ArrayAppendable
&
aSink
)
;
virtual
void
RemoveEntry
(
RefPtr
<
FileSystemActorHolder
>
&
aActor
const
FileSystemChildMetadata
&
aEntry
bool
aRecursive
RefPtr
<
Promise
>
aPromise
)
;
virtual
~
FileSystemRequestHandler
(
)
=
default
;
protected
:
const
UniquePtr
<
FileSystemChildFactory
>
mChildFactory
;
}
;
}
#
endif
