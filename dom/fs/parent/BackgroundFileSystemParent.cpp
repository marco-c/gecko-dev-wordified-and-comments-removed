#
include
"
BackgroundFileSystemParent
.
h
"
#
include
"
OriginPrivateFileSystemParent
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptorUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
namespace
mozilla
{
LazyLogModule
gOPFSLog
(
"
OPFS
"
)
;
}
#
define
LOG
(
args
)
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Verbose
args
)
#
define
LOG_DEBUG
(
args
)
\
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
namespace
mozilla
:
:
dom
{
namespace
fs
:
:
data
{
EntryId
GetRootHandle
(
const
Origin
&
aOrigin
)
{
return
"
not
implemented
"
_ns
;
}
class
FileSystemDataManager
:
public
FileSystemDataManagerBase
{
public
:
using
result_t
=
Result
<
FileSystemDataManager
*
nsresult
>
;
static
FileSystemDataManager
:
:
result_t
CreateFileSystemDataManager
(
const
fs
:
:
Origin
&
aOrigin
)
;
}
;
FileSystemDataManager
:
:
result_t
FileSystemDataManager
:
:
CreateFileSystemDataManager
(
const
fs
:
:
Origin
&
)
{
return
nullptr
;
}
}
using
RootPromise
=
MozPromise
<
fs
:
:
FileSystemGetRootResponse
nsresult
false
>
;
mozilla
:
:
ipc
:
:
IPCResult
BackgroundFileSystemParent
:
:
RecvGetRoot
(
Endpoint
<
POriginPrivateFileSystemParent
>
&
&
aParentEp
GetRootResolver
&
&
aResolver
)
{
if
(
!
StaticPrefs
:
:
dom_fs_enabled
(
)
)
{
return
IPC_FAIL
(
this
"
OPFS
is
disabled
"
)
;
}
if
(
!
aParentEp
.
IsValid
(
)
)
{
return
IPC_FAIL
(
this
"
Invalid
endpoint
"
)
;
}
nsAutoCString
origin
=
quota
:
:
QuotaManager
:
:
GetOriginFromValidatedPrincipalInfo
(
mPrincipalInfo
)
;
auto
res
=
fs
:
:
data
:
:
FileSystemDataManager
:
:
CreateFileSystemDataManager
(
origin
)
;
if
(
NS_WARN_IF
(
res
.
isErr
(
)
)
)
{
MOZ_ASSERT
(
false
"
Can
'
t
create
FileSystemDataManager
"
)
;
aResolver
(
fs
:
:
FileSystemGetRootResponse
(
NS_ERROR_FAILURE
)
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIThread
>
pbackground
=
NS_GetCurrentThread
(
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
)
;
MOZ_ASSERT
(
target
)
;
nsCString
name
(
"
OPFS
"
)
;
name
+
=
origin
;
RefPtr
<
TaskQueue
>
taskqueue
=
TaskQueue
:
:
Create
(
target
.
forget
(
)
PromiseFlatCString
(
name
)
.
get
(
)
)
;
InvokeAsync
(
taskqueue
__func__
[
origin
parentEp
=
std
:
:
move
(
aParentEp
)
aResolver
data
=
res
.
unwrap
(
)
taskqueue
pbackground
]
(
)
mutable
{
RefPtr
<
OriginPrivateFileSystemParent
>
parent
=
new
OriginPrivateFileSystemParent
(
taskqueue
)
;
if
(
!
parentEp
.
Bind
(
parent
)
)
{
auto
response
=
fs
:
:
FileSystemGetRootResponse
(
NS_ERROR_FAILURE
)
;
return
RootPromise
:
:
CreateAndReject
(
response
__func__
)
;
}
auto
response
=
fs
:
:
FileSystemGetRootResponse
(
fs
:
:
data
:
:
GetRootHandle
(
origin
)
)
;
return
RootPromise
:
:
CreateAndResolve
(
response
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
]
(
const
RootPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
aResolver
(
aValue
.
RejectValue
(
)
)
;
}
else
{
aResolver
(
aValue
.
ResolveValue
(
)
)
;
}
}
)
;
return
IPC_OK
(
)
;
}
}
