#
include
"
FileSystemFileManager
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsXPCOM
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
{
Result
<
nsCOMPtr
<
nsIFile
>
QMResult
>
getOrCreateFile
(
const
nsAString
&
aDatabaseFilePath
bool
&
aExists
)
{
MOZ_ASSERT
(
!
aDatabaseFilePath
.
IsEmpty
(
)
)
;
nsCOMPtr
<
nsIFile
>
result
;
QM_TRY
(
QM_TO_RESULT
(
NS_NewLocalFile
(
aDatabaseFilePath
false
getter_AddRefs
(
result
)
)
)
)
;
QM_TRY
(
QM_TO_RESULT
(
result
-
>
Exists
(
&
aExists
)
)
)
;
if
(
aExists
)
{
return
result
;
}
QM_TRY
(
QM_TO_RESULT
(
aFile
-
>
Create
(
nsIFile
:
:
NORMAL_FILE_TYPE
0644
)
)
)
;
return
result
;
}
Result
<
nsString
QMResult
>
getFileSystemDirectory
(
const
Origin
&
aOrigin
)
{
static
nsString
databaseFilePath
;
if
(
databaseFilePath
.
IsEmpty
(
)
)
{
QM_TRY_UNWRAP
(
RefPtr
<
quota
:
:
QuotaManager
>
quotaManager
quota
:
:
QuotaManager
:
:
GetOrCreate
(
)
)
;
QM_TRY_UNWRAP
(
nsCOMPtr
<
nsIFile
>
directoryEntry
quotaManager
-
>
GetDirectoryForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
aOrigin
)
)
;
QM_TRY
(
QM_TO_RESULT
(
directoryEntry
-
>
Append
(
u
"
filesystem
"
_ns
)
)
)
;
QM_TRY
(
QM_TO_RESULT
(
directoryEntry
-
>
Append
(
u
"
metadata
.
sqlite
"
_ns
)
)
)
;
QM_TRY
(
QM_TO_RESULT
(
directoryEntry
-
>
GetPath
(
databaseFilePath
)
)
)
;
}
return
databaseFilePath
;
}
}
