#
ifndef
DOM_FS_PARENT_FILESYSTEMACCESSHANDLE_H_
#
define
DOM_FS_PARENT_FILESYSTEMACCESSHANDLE_H_
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
enum
class
nsresult
:
uint32_t
;
namespace
mozilla
{
namespace
dom
{
class
FileSystemAccessHandleParent
;
namespace
fs
{
template
<
class
T
>
class
Registered
;
namespace
data
{
class
FileSystemDataManager
;
}
}
class
FileSystemAccessHandle
{
public
:
using
CreatePromise
=
MozPromise
<
fs
:
:
Registered
<
FileSystemAccessHandle
>
nsresult
true
>
;
static
RefPtr
<
CreatePromise
>
Create
(
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
aDataManager
const
fs
:
:
EntryId
&
aEntryId
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FileSystemAccessHandle
)
void
Register
(
)
;
void
Unregister
(
)
;
void
RegisterActor
(
NotNull
<
FileSystemAccessHandleParent
*
>
aActor
)
;
void
UnregisterActor
(
NotNull
<
FileSystemAccessHandleParent
*
>
aActor
)
;
bool
IsOpen
(
)
const
;
void
Close
(
)
;
private
:
FileSystemAccessHandle
(
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
aDataManager
const
fs
:
:
EntryId
&
aEntryId
)
;
~
FileSystemAccessHandle
(
)
;
bool
IsInactive
(
)
const
;
RefPtr
<
BoolPromise
>
BeginInit
(
)
;
const
fs
:
:
EntryId
mEntryId
;
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
mDataManager
;
FileSystemAccessHandleParent
*
mActor
;
nsAutoRefCnt
mRegCount
;
bool
mLocked
;
bool
mRegistered
;
bool
mClosed
;
}
;
}
}
#
endif
