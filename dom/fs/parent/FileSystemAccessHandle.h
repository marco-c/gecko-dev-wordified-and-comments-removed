#
ifndef
DOM_FS_PARENT_FILESYSTEMACCESSHANDLE_H_
#
define
DOM_FS_PARENT_FILESYSTEMACCESSHANDLE_H_
#
include
"
FileSystemStreamCallbacks
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
enum
class
nsresult
:
uint32_t
;
namespace
mozilla
{
namespace
ipc
{
class
RandomAccessStreamParams
;
}
namespace
dom
{
class
FileSystemAccessHandleControlParent
;
class
FileSystemAccessHandleParent
;
namespace
fs
{
template
<
class
T
>
class
Registered
;
namespace
data
{
class
FileSystemDataManager
;
}
}
class
FileSystemAccessHandle
:
public
FileSystemStreamCallbacks
{
public
:
using
CreateResult
=
std
:
:
pair
<
fs
:
:
Registered
<
FileSystemAccessHandle
>
mozilla
:
:
ipc
:
:
RandomAccessStreamParams
>
;
using
CreatePromise
=
MozPromise
<
CreateResult
nsresult
true
>
;
static
RefPtr
<
CreatePromise
>
Create
(
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
aDataManager
const
fs
:
:
EntryId
&
aEntryId
)
;
NS_DECL_ISUPPORTS_INHERITED
void
Register
(
)
;
void
Unregister
(
)
;
void
RegisterActor
(
NotNull
<
FileSystemAccessHandleParent
*
>
aActor
)
;
void
UnregisterActor
(
NotNull
<
FileSystemAccessHandleParent
*
>
aActor
)
;
void
RegisterControlActor
(
NotNull
<
FileSystemAccessHandleControlParent
*
>
aControlActor
)
;
void
UnregisterControlActor
(
NotNull
<
FileSystemAccessHandleControlParent
*
>
aControlActor
)
;
bool
IsOpen
(
)
const
;
void
Close
(
)
;
private
:
FileSystemAccessHandle
(
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
aDataManager
const
fs
:
:
EntryId
&
aEntryId
)
;
~
FileSystemAccessHandle
(
)
;
bool
IsInactive
(
)
const
;
using
InitPromise
=
MozPromise
<
mozilla
:
:
ipc
:
:
RandomAccessStreamParams
nsresult
true
>
;
RefPtr
<
InitPromise
>
BeginInit
(
)
;
const
fs
:
:
EntryId
mEntryId
;
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
mDataManager
;
FileSystemAccessHandleParent
*
mActor
;
FileSystemAccessHandleControlParent
*
mControlActor
;
nsAutoRefCnt
mRegCount
;
bool
mLocked
;
bool
mRegistered
;
bool
mClosed
;
}
;
}
}
#
endif
