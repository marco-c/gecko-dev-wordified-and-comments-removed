#
include
"
FileSystemWritableFileStreamParent
.
h
"
#
include
"
FileSystemDataManager
.
h
"
#
include
"
FileSystemStreamCallbacks
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemLog
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
RemoteQuotaObjectParent
.
h
"
namespace
mozilla
:
:
dom
{
class
FileSystemWritableFileStreamParent
:
:
FileSystemWritableFileStreamCallbacks
:
public
FileSystemStreamCallbacks
{
public
:
void
CloseRemoteQuotaObjectParent
(
)
{
if
(
mRemoteQuotaObjectParent
)
{
mRemoteQuotaObjectParent
-
>
Close
(
)
;
}
}
}
;
FileSystemWritableFileStreamParent
:
:
FileSystemWritableFileStreamParent
(
RefPtr
<
FileSystemManagerParent
>
aManager
const
fs
:
:
EntryId
&
aEntryId
const
fs
:
:
FileId
&
aTemporaryFileId
)
:
mManager
(
std
:
:
move
(
aManager
)
)
mEntryId
(
aEntryId
)
mTemporaryFileId
(
aTemporaryFileId
)
{
}
FileSystemWritableFileStreamParent
:
:
~
FileSystemWritableFileStreamParent
(
)
{
MOZ_ASSERT
(
mClosed
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
FileSystemWritableFileStreamParent
:
:
RecvClose
(
bool
aAbort
CloseResolver
&
&
aResolver
)
{
Close
(
aAbort
)
;
aResolver
(
void_t
(
)
)
;
return
IPC_OK
(
)
;
}
void
FileSystemWritableFileStreamParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mStreamCallbacks
)
{
mStreamCallbacks
-
>
CloseRemoteQuotaObjectParent
(
)
;
mStreamCallbacks
=
nullptr
;
}
if
(
!
IsClosed
(
)
)
{
Close
(
true
)
;
}
}
nsIInterfaceRequestor
*
FileSystemWritableFileStreamParent
:
:
GetOrCreateStreamCallbacks
(
)
{
if
(
!
mStreamCallbacks
)
{
if
(
mClosed
)
{
return
nullptr
;
}
mStreamCallbacks
=
MakeRefPtr
<
FileSystemWritableFileStreamCallbacks
>
(
)
;
}
return
mStreamCallbacks
.
get
(
)
;
}
void
FileSystemWritableFileStreamParent
:
:
Close
(
bool
)
{
LOG
(
(
"
Closing
WritableFileStream
"
)
)
;
mClosed
.
Flip
(
)
;
mManager
-
>
DataManagerStrongRef
(
)
-
>
UnlockExclusive
(
mEntryId
)
;
}
}
