#
include
"
FileSystemDataManager
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
nsBaseHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
data
{
namespace
{
class
nsCStringHashKeyDM
:
public
nsCStringHashKey
{
public
:
explicit
nsCStringHashKeyDM
(
const
nsCStringHashKey
:
:
KeyTypePointer
aKey
)
:
nsCStringHashKey
(
aKey
)
{
}
enum
{
ALLOW_MEMMOVE
=
false
}
;
}
;
using
FileSystemDataManagerHashKey
=
std
:
:
conditional
<
DiagnosticAssertEnabled
:
:
value
nsCStringHashKeyDM
nsCStringHashKey
>
:
:
type
;
using
FileSystemDataManagerHashtable
=
nsBaseHashtable
<
FileSystemDataManagerHashKey
NotNull
<
CheckedUnsafePtr
<
FileSystemDataManager
>
>
MovingNotNull
<
CheckedUnsafePtr
<
FileSystemDataManager
>
>
>
;
StaticAutoPtr
<
FileSystemDataManagerHashtable
>
gDataManagers
;
RefPtr
<
FileSystemDataManager
>
GetFileSystemDataManager
(
const
Origin
&
aOrigin
)
{
if
(
gDataManagers
)
{
auto
maybeDataManager
=
gDataManagers
-
>
MaybeGet
(
aOrigin
)
;
if
(
maybeDataManager
)
{
RefPtr
<
FileSystemDataManager
>
result
(
std
:
:
move
(
*
maybeDataManager
)
.
unwrapBasePtr
(
)
)
;
return
result
;
}
}
return
nullptr
;
}
void
AddFileSystemDataManager
(
const
Origin
&
aOrigin
const
RefPtr
<
FileSystemDataManager
>
&
aDataManager
)
{
if
(
!
gDataManagers
)
{
gDataManagers
=
new
FileSystemDataManagerHashtable
(
)
;
}
MOZ_ASSERT
(
!
gDataManagers
-
>
Contains
(
aOrigin
)
)
;
gDataManagers
-
>
InsertOrUpdate
(
aOrigin
WrapMovingNotNullUnchecked
(
aDataManager
)
)
;
}
void
RemoveFileSystemDataManager
(
const
Origin
&
aOrigin
)
{
MOZ_ASSERT
(
gDataManagers
)
;
const
DebugOnly
<
bool
>
removed
=
gDataManagers
-
>
Remove
(
aOrigin
)
;
MOZ_ASSERT
(
removed
)
;
if
(
!
gDataManagers
-
>
Count
(
)
)
{
gDataManagers
=
nullptr
;
}
}
}
FileSystemDataManager
:
:
FileSystemDataManager
(
const
Origin
&
aOrigin
MovingNotNull
<
RefPtr
<
TaskQueue
>
>
aIOTaskQueue
)
:
mOrigin
(
aOrigin
)
mBackgroundTarget
(
WrapNotNull
(
GetCurrentSerialEventTarget
(
)
)
)
mIOTaskQueue
(
std
:
:
move
(
aIOTaskQueue
)
)
{
}
FileSystemDataManager
:
:
~
FileSystemDataManager
(
)
{
mIOTaskQueue
-
>
BeginShutdown
(
)
;
RemoveFileSystemDataManager
(
mOrigin
)
;
}
FileSystemDataManager
:
:
result_t
FileSystemDataManager
:
:
GetOrCreateFileSystemDataManager
(
const
Origin
&
aOrigin
)
{
if
(
RefPtr
<
FileSystemDataManager
>
dataManager
=
GetFileSystemDataManager
(
aOrigin
)
)
{
return
dataManager
;
}
QM_TRY_UNWRAP
(
auto
streamTransportService
MOZ_TO_RESULT_GET_TYPED
(
nsCOMPtr
<
nsIEventTarget
>
MOZ_SELECT_OVERLOAD
(
do_GetService
)
NS_STREAMTRANSPORTSERVICE_CONTRACTID
)
)
;
nsCString
taskQueueName
(
"
OPFS
"
_ns
+
aOrigin
)
;
RefPtr
<
TaskQueue
>
ioTaskQueue
=
TaskQueue
:
:
Create
(
streamTransportService
.
forget
(
)
taskQueueName
.
get
(
)
)
;
auto
dataManager
=
MakeRefPtr
<
FileSystemDataManager
>
(
aOrigin
WrapMovingNotNull
(
ioTaskQueue
)
)
;
AddFileSystemDataManager
(
aOrigin
dataManager
)
;
return
dataManager
;
}
}
