#
ifndef
DOM_FS_PARENT_FILESYSTEMDATAMANAGER_H_
#
define
DOM_FS_PARENT_FILESYSTEMDATAMANAGER_H_
#
include
"
ResultConnection
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
POriginPrivateFileSystem
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
template
<
class
T
>
class
nsTArray
;
namespace
mozilla
:
:
dom
{
namespace
fs
{
class
FileSystemChildMetadata
;
class
FileSystemEntryMetadata
;
class
FileSystemEntryPair
;
}
using
FileSystemEntries
=
nsTArray
<
fs
:
:
FileSystemEntryMetadata
>
;
namespace
fs
:
:
data
{
class
FileSystemFileManager
;
using
FileSystemConnection
=
fs
:
:
ResultConnection
;
Result
<
EntryId
QMResult
>
GetRootHandle
(
const
Origin
&
origin
)
;
Result
<
EntryId
QMResult
>
GetEntryHandle
(
const
FileSystemChildMetadata
&
aHandle
)
;
class
FileSystemDataManager
{
public
:
static
Result
<
FileSystemDataManager
*
QMResult
>
CreateFileSystemDataManager
(
const
Origin
&
aOrigin
)
;
virtual
Result
<
int64_t
QMResult
>
GetUsage
(
)
const
=
0
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
=
0
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateFile
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
=
0
;
virtual
nsresult
GetFile
(
const
FileSystemEntryPair
&
aEndpoints
nsString
&
aType
TimeStamp
&
lastModifiedMilliSeconds
Path
&
aPath
nsCOMPtr
<
nsIFile
>
&
aFile
)
const
=
0
;
virtual
Result
<
FileSystemDirectoryListing
QMResult
>
GetDirectoryEntries
(
const
EntryId
&
aParent
PageNumber
aPage
)
const
=
0
;
virtual
Result
<
bool
QMResult
>
RemoveDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aRecursive
)
=
0
;
virtual
Result
<
bool
QMResult
>
RemoveFile
(
const
FileSystemChildMetadata
&
aHandle
)
=
0
;
virtual
Result
<
Path
QMResult
>
Resolve
(
const
FileSystemEntryPair
&
aEndpoints
)
const
=
0
;
virtual
inline
~
FileSystemDataManager
(
)
=
default
;
}
;
}
}
#
endif
