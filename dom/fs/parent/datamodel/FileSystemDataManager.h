#
ifndef
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATAMANAGER_H_
#
define
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATAMANAGER_H_
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemHelpers
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
CheckedUnsafePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
template
<
typename
V
typename
E
>
class
Result
;
namespace
dom
{
class
FileSystemManagerParent
;
namespace
fs
:
:
data
{
class
FileSystemDataManager
:
public
SupportsCheckedUnsafePtr
<
CheckIf
<
DiagnosticAssertEnabled
>
>
{
public
:
enum
struct
State
:
uint8_t
{
Initial
=
0
Closed
}
;
FileSystemDataManager
(
const
Origin
&
aOrigin
MovingNotNull
<
RefPtr
<
TaskQueue
>
>
aIOTaskQueue
)
;
using
result_t
=
Result
<
Registered
<
FileSystemDataManager
>
nsresult
>
;
static
FileSystemDataManager
:
:
result_t
GetOrCreateFileSystemDataManager
(
const
Origin
&
aOrigin
)
;
NS_INLINE_DECL_REFCOUNTING
(
FileSystemDataManager
)
nsISerialEventTarget
*
MutableBackgroundTargetPtr
(
)
const
{
return
mBackgroundTarget
.
get
(
)
;
}
nsISerialEventTarget
*
MutableIOTargetPtr
(
)
const
{
return
mIOTaskQueue
.
get
(
)
;
}
void
Register
(
)
;
void
Unregister
(
)
;
void
RegisterActor
(
NotNull
<
FileSystemManagerParent
*
>
aActor
)
;
void
UnregisterActor
(
NotNull
<
FileSystemManagerParent
*
>
aActor
)
;
protected
:
~
FileSystemDataManager
(
)
;
bool
IsInactive
(
)
const
;
void
Close
(
)
;
nsTHashSet
<
FileSystemManagerParent
*
>
mActors
;
const
Origin
mOrigin
;
const
NotNull
<
nsCOMPtr
<
nsISerialEventTarget
>
>
mBackgroundTarget
;
const
NotNull
<
RefPtr
<
TaskQueue
>
>
mIOTaskQueue
;
uint32_t
mRegCount
;
State
mState
;
}
;
}
}
}
#
endif
