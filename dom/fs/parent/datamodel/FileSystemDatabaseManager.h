#
ifndef
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATABASEMANAGER_H_
#
define
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATABASEMANAGER_H_
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
ResultConnection
.
h
"
template
<
class
T
>
class
nsCOMPtr
;
class
nsIFile
;
namespace
mozilla
{
template
<
typename
V
typename
E
>
class
Result
;
namespace
dom
:
:
fs
{
class
FileSystemChildMetadata
;
class
FileSystemDirectoryListing
;
class
FileSystemEntryPair
;
namespace
data
{
using
FileSystemConnection
=
fs
:
:
ResultConnection
;
class
FileSystemDatabaseManager
{
public
:
virtual
Result
<
int64_t
QMResult
>
GetUsage
(
)
const
=
0
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
=
0
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateFile
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
=
0
;
virtual
nsresult
GetFile
(
const
FileSystemEntryPair
&
aEndpoints
nsString
&
aType
TimeStamp
&
lastModifiedMilliSeconds
Path
&
aPath
nsCOMPtr
<
nsIFile
>
&
aFile
)
const
=
0
;
virtual
Result
<
FileSystemDirectoryListing
QMResult
>
GetDirectoryEntries
(
const
EntryId
&
aParent
PageNumber
aPage
)
const
=
0
;
virtual
Result
<
bool
QMResult
>
RemoveDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aRecursive
)
=
0
;
virtual
Result
<
bool
QMResult
>
RemoveFile
(
const
FileSystemChildMetadata
&
aHandle
)
=
0
;
virtual
Result
<
Path
QMResult
>
Resolve
(
const
FileSystemEntryPair
&
aEndpoints
)
const
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
~
FileSystemDatabaseManager
(
)
=
default
;
}
;
}
}
}
#
endif
