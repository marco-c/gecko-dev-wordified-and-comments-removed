#
ifndef
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATABASEMANAGERVERSION001_H_
#
define
DOM_FS_PARENT_DATAMODEL_FILESYSTEMDATABASEMANAGERVERSION001_H_
#
include
"
FileSystemDatabaseManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
CommonMetadata
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
data
{
class
FileSystemDataManager
;
class
FileSystemFileManager
;
using
FileSystemConnection
=
fs
:
:
ResultConnection
;
class
FileSystemDatabaseManagerVersion001
:
public
FileSystemDatabaseManager
{
public
:
FileSystemDatabaseManagerVersion001
(
FileSystemDataManager
*
aDataManager
FileSystemConnection
&
&
aConnection
UniquePtr
<
FileSystemFileManager
>
&
&
aFileManager
const
EntryId
&
aRootEntry
)
;
static
nsresult
RescanTrackedUsages
(
const
FileSystemConnection
&
aConnection
const
Origin
&
aOrigin
)
;
static
Result
<
Usage
QMResult
>
GetFileUsage
(
const
FileSystemConnection
&
aConnection
)
;
virtual
nsresult
UpdateUsage
(
const
EntryId
&
aEntry
)
override
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
override
;
virtual
Result
<
EntryId
QMResult
>
GetOrCreateFile
(
const
FileSystemChildMetadata
&
aHandle
bool
aCreate
)
override
;
virtual
nsresult
GetFile
(
const
EntryId
&
aEntryId
nsString
&
aType
TimeStamp
&
lastModifiedMilliSeconds
Path
&
aPath
nsCOMPtr
<
nsIFile
>
&
aFile
)
const
override
;
virtual
Result
<
FileSystemDirectoryListing
QMResult
>
GetDirectoryEntries
(
const
EntryId
&
aParent
PageNumber
aPage
)
const
override
;
virtual
Result
<
bool
QMResult
>
RenameEntry
(
const
FileSystemEntryMetadata
&
aHandle
const
Name
&
aNewName
)
override
;
virtual
Result
<
bool
QMResult
>
MoveEntry
(
const
FileSystemEntryMetadata
&
aHandle
const
FileSystemChildMetadata
&
aNewDesignation
)
override
;
virtual
Result
<
bool
QMResult
>
RemoveDirectory
(
const
FileSystemChildMetadata
&
aHandle
bool
aRecursive
)
override
;
virtual
Result
<
bool
QMResult
>
RemoveFile
(
const
FileSystemChildMetadata
&
aHandle
)
override
;
virtual
Result
<
Path
QMResult
>
Resolve
(
const
FileSystemEntryPair
&
aEndpoints
)
const
override
;
virtual
void
Close
(
)
override
;
virtual
nsresult
BeginUsageTracking
(
const
EntryId
&
aEntryId
)
override
;
virtual
nsresult
EndUsageTracking
(
const
EntryId
&
aEntryId
)
override
;
virtual
~
FileSystemDatabaseManagerVersion001
(
)
=
default
;
private
:
nsresult
UpdateUsageInDatabase
(
const
EntryId
&
aEntry
Usage
aNewDiskUsage
)
;
Result
<
Ok
QMResult
>
EnsureUsageIsKnown
(
const
EntryId
&
aEntryId
)
;
void
DecreaseCachedQuotaUsage
(
int64_t
aDelta
)
;
nsresult
UpdateCachedQuotaUsage
(
const
EntryId
&
aEntryId
Usage
aOldUsage
Usage
aNewUsage
)
;
nsresult
ClearDestinationIfNotLocked
(
const
FileSystemConnection
&
aConnection
const
FileSystemDataManager
*
const
aDataManager
const
FileSystemEntryMetadata
&
aHandle
const
FileSystemChildMetadata
&
aNewDesignation
)
;
nsresult
PrepareMoveEntry
(
const
FileSystemConnection
&
aConnection
const
FileSystemDataManager
*
const
aDataManager
const
FileSystemEntryMetadata
&
aHandle
const
FileSystemChildMetadata
&
aNewDesignation
bool
aIsFile
)
;
nsresult
PrepareRenameEntry
(
const
FileSystemConnection
&
aConnection
const
FileSystemDataManager
*
const
aDataManager
const
FileSystemEntryMetadata
&
aHandle
const
Name
&
aNewName
bool
aIsFile
)
;
FileSystemDataManager
*
MOZ_NON_OWNING_REF
mDataManager
;
FileSystemConnection
mConnection
;
UniquePtr
<
FileSystemFileManager
>
mFileManager
;
const
EntryId
mRootEntry
;
const
quota
:
:
ClientMetadata
mClientMetadata
;
int32_t
mFilesOfUnknownUsage
;
}
;
}
#
endif
