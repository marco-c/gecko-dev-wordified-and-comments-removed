#
ifndef
DOM_FS_PARENT_DATAMODEL_FILESYSTEMFILEMANAGER_H_
#
define
DOM_FS_PARENT_DATAMODEL_FILESYSTEMFILEMANAGER_H_
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
QMResult
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsString
.
h
"
template
<
class
T
>
class
nsCOMPtr
;
class
nsIFileURL
;
namespace
mozilla
:
:
dom
:
:
fs
:
:
data
{
Result
<
nsCOMPtr
<
nsIFile
>
QMResult
>
GetDatabasePath
(
const
Origin
&
aOrigin
bool
&
aExists
)
;
Result
<
nsCOMPtr
<
nsIFileURL
>
QMResult
>
GetDatabaseFileURL
(
const
nsCOMPtr
<
nsIFile
>
&
aDatabaseFile
const
int64_t
aDirectoryLockId
)
;
class
FileSystemFileManager
{
public
:
static
Result
<
FileSystemFileManager
QMResult
>
CreateFileSystemFileManager
(
const
Origin
&
aOrigin
)
;
static
Result
<
FileSystemFileManager
QMResult
>
CreateFileSystemFileManager
(
nsCOMPtr
<
nsIFile
>
&
&
topDirectory
)
;
Result
<
nsCOMPtr
<
nsIFile
>
QMResult
>
GetOrCreateFile
(
const
EntryId
&
aEntryId
)
;
nsresult
RemoveFile
(
const
EntryId
&
aEntryId
)
;
private
:
explicit
FileSystemFileManager
(
nsCOMPtr
<
nsIFile
>
&
&
aTopDirectory
)
;
nsCOMPtr
<
nsIFile
>
mTopDirectory
;
}
;
}
#
endif
