#
include
"
FileSystemManagerParentFactory
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemDataManager
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
LazyLogModule
gOPFSLog
(
"
OPFS
"
)
;
}
#
define
LOG
(
args
)
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Verbose
args
)
#
define
LOG_DEBUG
(
args
)
\
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
namespace
mozilla
:
:
dom
{
namespace
fs
:
:
data
{
EntryId
GetRootHandle
(
const
Origin
&
aOrigin
)
{
return
"
not
implemented
"
_ns
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
CreateFileSystemManagerParent
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
mozilla
:
:
ipc
:
:
Endpoint
<
PFileSystemManagerParent
>
&
&
aParentEndpoint
std
:
:
function
<
void
(
const
nsresult
&
)
>
&
&
aResolver
)
{
QM_TRY
(
OkIf
(
StaticPrefs
:
:
dom_fs_enabled
(
)
)
IPC_OK
(
)
[
aResolver
]
(
const
auto
&
)
{
aResolver
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
}
)
;
QM_TRY
(
OkIf
(
aParentEndpoint
.
IsValid
(
)
)
IPC_OK
(
)
[
aResolver
]
(
const
auto
&
)
{
aResolver
(
NS_ERROR_INVALID_ARG
)
;
}
)
;
nsAutoCString
origin
=
quota
:
:
QuotaManager
:
:
GetOriginFromValidatedPrincipalInfo
(
aPrincipalInfo
)
;
QM_TRY_UNWRAP
(
RefPtr
<
fs
:
:
data
:
:
FileSystemDataManager
>
dataManager
fs
:
:
data
:
:
FileSystemDataManager
:
:
GetOrCreateFileSystemDataManager
(
origin
)
IPC_OK
(
)
[
aResolver
]
(
const
auto
&
aRv
)
{
aResolver
(
aRv
)
;
}
)
;
fs
:
:
EntryId
rootId
=
fs
:
:
data
:
:
GetRootHandle
(
origin
)
;
InvokeAsync
(
dataManager
-
>
MutableIOTargetPtr
(
)
__func__
[
dataManager
=
dataManager
rootId
parentEndpoint
=
std
:
:
move
(
aParentEndpoint
)
]
(
)
mutable
{
RefPtr
<
FileSystemManagerParent
>
parent
=
new
FileSystemManagerParent
(
std
:
:
move
(
dataManager
)
rootId
)
;
if
(
!
parentEndpoint
.
Bind
(
parent
)
)
{
return
BoolPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
aResolver
(
aValue
.
RejectValue
(
)
)
;
}
else
{
aResolver
(
NS_OK
)
;
}
}
)
;
return
IPC_OK
(
)
;
}
}
