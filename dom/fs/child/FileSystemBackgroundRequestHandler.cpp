#
include
"
FileSystemBackgroundRequestHandler
.
h
"
#
include
"
fs
/
FileSystemChildFactory
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemManagerChild
.
h
"
#
include
"
mozilla
/
dom
/
PFileSystemManager
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
namespace
mozilla
:
:
dom
{
FileSystemBackgroundRequestHandler
:
:
FileSystemBackgroundRequestHandler
(
fs
:
:
FileSystemChildFactory
*
aChildFactory
)
:
mChildFactory
(
aChildFactory
)
{
}
FileSystemBackgroundRequestHandler
:
:
FileSystemBackgroundRequestHandler
(
)
:
FileSystemBackgroundRequestHandler
(
new
fs
:
:
FileSystemChildFactory
(
)
)
{
}
FileSystemBackgroundRequestHandler
:
:
~
FileSystemBackgroundRequestHandler
(
)
=
default
;
RefPtr
<
FileSystemBackgroundRequestHandler
:
:
CreateFileSystemManagerChildPromise
>
FileSystemBackgroundRequestHandler
:
:
CreateFileSystemManagerChild
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
{
using
mozilla
:
:
ipc
:
:
BackgroundChild
;
using
mozilla
:
:
ipc
:
:
Endpoint
;
using
mozilla
:
:
ipc
:
:
PBackgroundChild
;
PBackgroundChild
*
backgroundChild
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
backgroundChild
)
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
Endpoint
<
PFileSystemManagerParent
>
parentEndpoint
;
Endpoint
<
PFileSystemManagerChild
>
childEndpoint
;
MOZ_ALWAYS_SUCCEEDS
(
PFileSystemManager
:
:
CreateEndpoints
(
&
parentEndpoint
&
childEndpoint
)
)
;
RefPtr
<
FileSystemManagerChild
>
child
=
mChildFactory
-
>
Create
(
)
;
if
(
!
childEndpoint
.
Bind
(
child
)
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
backgroundChild
-
>
SendCreateFileSystemManagerParent
(
aPrincipalInfo
std
:
:
move
(
parentEndpoint
)
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
child
]
(
nsresult
rv
)
{
if
(
NS_FAILED
(
rv
)
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
return
CreateFileSystemManagerChildPromise
:
:
CreateAndResolve
(
child
__func__
)
;
}
[
]
(
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
&
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
)
;
}
}
