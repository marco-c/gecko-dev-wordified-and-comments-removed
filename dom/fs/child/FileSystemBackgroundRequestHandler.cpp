#
include
"
FileSystemBackgroundRequestHandler
.
h
"
#
include
"
fs
/
FileSystemChildFactory
.
h
"
#
include
"
mozilla
/
dom
/
BackgroundFileSystemChild
.
h
"
#
include
"
mozilla
/
dom
/
OriginPrivateFileSystemChild
.
h
"
#
include
"
mozilla
/
dom
/
POriginPrivateFileSystem
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
RefPtr
<
BackgroundFileSystemChild
>
CreateBackgroundFileSystemChild
(
nsIGlobalObject
*
aGlobal
)
{
using
mozilla
:
:
dom
:
:
BackgroundFileSystemChild
;
using
mozilla
:
:
ipc
:
:
BackgroundChild
;
using
mozilla
:
:
ipc
:
:
PBackgroundChild
;
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
PBackgroundChild
*
backgroundChild
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
backgroundChild
)
)
{
MOZ_ASSERT
(
false
)
;
return
nullptr
;
}
RefPtr
<
BackgroundFileSystemChild
>
result
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIScriptObjectPrincipal
>
sop
=
do_QueryInterface
(
aGlobal
)
;
if
(
!
sop
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
sop
-
>
GetEffectiveStoragePrincipal
(
)
;
if
(
!
principal
)
{
return
nullptr
;
}
auto
principalInfo
=
MakeUnique
<
PrincipalInfo
>
(
)
;
nsresult
rv
=
PrincipalToPrincipalInfo
(
principal
principalInfo
.
get
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
auto
*
child
=
new
BackgroundFileSystemChild
(
)
;
result
=
static_cast
<
BackgroundFileSystemChild
*
>
(
backgroundChild
-
>
SendPBackgroundFileSystemConstructor
(
child
*
principalInfo
)
)
;
}
else
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
if
(
!
workerPrivate
)
{
return
nullptr
;
}
const
PrincipalInfo
&
principalInfo
=
workerPrivate
-
>
GetEffectiveStoragePrincipalInfo
(
)
;
BackgroundFileSystemChild
*
child
=
new
BackgroundFileSystemChild
(
)
;
result
=
static_cast
<
BackgroundFileSystemChild
*
>
(
backgroundChild
-
>
SendPBackgroundFileSystemConstructor
(
child
principalInfo
)
)
;
}
MOZ_ASSERT
(
result
)
;
return
result
;
}
}
FileSystemBackgroundRequestHandler
:
:
FileSystemBackgroundRequestHandler
(
fs
:
:
FileSystemChildFactory
*
aChildFactory
)
:
mChildFactory
(
aChildFactory
)
{
}
FileSystemBackgroundRequestHandler
:
:
FileSystemBackgroundRequestHandler
(
)
:
FileSystemBackgroundRequestHandler
(
new
fs
:
:
FileSystemChildFactory
(
)
)
{
}
FileSystemBackgroundRequestHandler
:
:
~
FileSystemBackgroundRequestHandler
(
)
=
default
;
RefPtr
<
FileSystemBackgroundRequestHandler
:
:
CreateFileSystemManagerChildPromise
>
FileSystemBackgroundRequestHandler
:
:
CreateFileSystemManagerChild
(
nsIGlobalObject
*
aGlobal
)
{
using
mozilla
:
:
ipc
:
:
Endpoint
;
Endpoint
<
POriginPrivateFileSystemParent
>
parentEndpoint
;
Endpoint
<
POriginPrivateFileSystemChild
>
childEndpoint
;
MOZ_ALWAYS_SUCCEEDS
(
POriginPrivateFileSystem
:
:
CreateEndpoints
(
&
parentEndpoint
&
childEndpoint
)
)
;
RefPtr
<
OriginPrivateFileSystemChild
>
child
=
mChildFactory
-
>
Create
(
)
;
if
(
!
childEndpoint
.
Bind
(
child
)
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
RefPtr
<
BackgroundFileSystemChild
>
backgroundFileSystemChild
=
CreateBackgroundFileSystemChild
(
aGlobal
)
;
if
(
!
backgroundFileSystemChild
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
backgroundFileSystemChild
-
>
SendCreateFileSystemManagerParent
(
std
:
:
move
(
parentEndpoint
)
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
child
]
(
nsresult
rv
)
{
if
(
NS_FAILED
(
rv
)
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
return
CreateFileSystemManagerChildPromise
:
:
CreateAndResolve
(
child
__func__
)
;
}
[
]
(
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
&
)
{
return
CreateFileSystemManagerChildPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
)
;
}
}
