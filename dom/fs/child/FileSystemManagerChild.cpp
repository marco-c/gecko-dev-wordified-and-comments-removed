#
include
"
FileSystemManagerChild
.
h
"
#
include
"
FileSystemAccessHandleChild
.
h
"
#
include
"
FileSystemBackgroundRequestHandler
.
h
"
#
include
"
FileSystemWritableFileStreamChild
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemSyncAccessHandle
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStream
.
h
"
namespace
mozilla
:
:
dom
{
void
FileSystemManagerChild
:
:
SetBackgroundRequestHandler
(
FileSystemBackgroundRequestHandler
*
aBackgroundRequestHandler
)
{
MOZ_ASSERT
(
aBackgroundRequestHandler
)
;
MOZ_ASSERT
(
!
mBackgroundRequestHandler
)
;
mBackgroundRequestHandler
=
aBackgroundRequestHandler
;
}
#
ifdef
DEBUG
bool
FileSystemManagerChild
:
:
AllSyncAccessHandlesClosed
(
)
const
{
for
(
const
auto
&
item
:
ManagedPFileSystemAccessHandleChild
(
)
)
{
auto
*
child
=
static_cast
<
FileSystemAccessHandleChild
*
>
(
item
)
;
auto
*
handle
=
child
-
>
MutableAccessHandlePtr
(
)
;
if
(
!
handle
-
>
IsClosed
(
)
)
{
return
false
;
}
}
return
true
;
}
#
endif
void
FileSystemManagerChild
:
:
CloseAllWritableFileStreams
(
)
{
for
(
const
auto
&
item
:
ManagedPFileSystemWritableFileStreamChild
(
)
)
{
auto
*
child
=
static_cast
<
FileSystemWritableFileStreamChild
*
>
(
item
)
;
child
-
>
MutableWritableFileStreamPtr
(
)
-
>
Close
(
)
;
}
}
void
FileSystemManagerChild
:
:
Shutdown
(
)
{
if
(
!
CanSend
(
)
)
{
return
;
}
Close
(
)
;
}
already_AddRefed
<
PFileSystemAccessHandleChild
>
FileSystemManagerChild
:
:
AllocPFileSystemAccessHandleChild
(
)
{
return
MakeAndAddRef
<
FileSystemAccessHandleChild
>
(
)
;
}
already_AddRefed
<
PFileSystemWritableFileStreamChild
>
FileSystemManagerChild
:
:
AllocPFileSystemWritableFileStreamChild
(
)
{
return
MakeAndAddRef
<
FileSystemWritableFileStreamChild
>
(
)
;
}
:
:
mozilla
:
:
ipc
:
:
IPCResult
FileSystemManagerChild
:
:
RecvCloseAll
(
CloseAllResolver
&
&
aResolver
)
{
nsTArray
<
RefPtr
<
BoolPromise
>
>
promises
;
for
(
const
auto
&
item
:
ManagedPFileSystemAccessHandleChild
(
)
)
{
auto
*
child
=
static_cast
<
FileSystemAccessHandleChild
*
>
(
item
)
;
auto
*
handle
=
child
-
>
MutableAccessHandlePtr
(
)
;
if
(
handle
-
>
IsOpen
(
)
)
{
promises
.
AppendElement
(
handle
-
>
BeginClose
(
)
)
;
}
else
if
(
handle
-
>
IsClosing
(
)
)
{
promises
.
AppendElement
(
handle
-
>
OnClose
(
)
)
;
}
}
CloseAllWritableFileStreams
(
)
;
BoolPromise
:
:
AllSettled
(
GetCurrentSerialEventTarget
(
)
promises
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
resolver
=
std
:
:
move
(
aResolver
)
]
(
const
BoolPromise
:
:
AllSettledPromiseType
:
:
ResolveOrRejectValue
&
aValues
)
{
resolver
(
NS_OK
)
;
}
)
;
return
IPC_OK
(
)
;
}
void
FileSystemManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mBackgroundRequestHandler
)
{
mBackgroundRequestHandler
-
>
ClearActor
(
)
;
mBackgroundRequestHandler
=
nullptr
;
}
}
}
