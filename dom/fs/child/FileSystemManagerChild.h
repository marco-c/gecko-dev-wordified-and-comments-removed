#
ifndef
DOM_FS_CHILD_FILESYSTEMMANAGERCHILD_H_
#
define
DOM_FS_CHILD_FILESYSTEMMANAGERCHILD_H_
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStreamChild
.
h
"
#
include
"
mozilla
/
dom
/
PFileSystemManagerChild
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
namespace
mozilla
:
:
dom
{
class
FileSystemBackgroundRequestHandler
;
class
FileSystemManagerChild
:
public
PFileSystemManagerChild
{
public
:
using
ActorPromise
=
MozPromise
<
RefPtr
<
FileSystemManagerChild
>
nsresult
false
>
;
NS_INLINE_DECL_REFCOUNTING_WITH_DESTROY
(
FileSystemManagerChild
Destroy
(
)
override
)
void
SetBackgroundRequestHandler
(
FileSystemBackgroundRequestHandler
*
aBackgroundRequestHandler
)
;
void
CloseAllWritables
(
std
:
:
function
<
void
(
)
>
&
&
aCallback
)
;
#
ifdef
DEBUG
virtual
bool
AllSyncAccessHandlesClosed
(
)
const
;
virtual
bool
AllWritableFileStreamsClosed
(
)
const
;
#
endif
virtual
void
Shutdown
(
)
;
already_AddRefed
<
PFileSystemWritableFileStreamChild
>
AllocPFileSystemWritableFileStreamChild
(
)
;
:
:
mozilla
:
:
ipc
:
:
IPCResult
RecvCloseAll
(
CloseAllResolver
&
&
aResolver
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
protected
:
virtual
~
FileSystemManagerChild
(
)
=
default
;
virtual
void
Destroy
(
)
{
Shutdown
(
)
;
delete
this
;
}
FileSystemBackgroundRequestHandler
*
MOZ_NON_OWNING_REF
mBackgroundRequestHandler
;
private
:
template
<
class
T
>
void
CloseAllWritablesImpl
(
T
&
aPromises
)
;
}
;
}
#
endif
