#
ifndef
DOM_FS_CHILD_FILESYSTEMMANAGERCHILD_H_
#
define
DOM_FS_CHILD_FILESYSTEMMANAGERCHILD_H_
#
include
"
mozilla
/
dom
/
PFileSystemManagerChild
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
FileSystemManagerChild
:
public
PFileSystemManagerChild
{
public
:
NS_INLINE_DECL_REFCOUNTING_WITH_DESTROY
(
FileSystemManagerChild
Destroy
(
)
)
virtual
void
SendGetRootHandle
(
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendGetRootHandleMsg
(
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendGetDirectoryHandle
(
const
FileSystemGetHandleRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendGetDirectoryHandleMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendGetFileHandle
(
const
FileSystemGetHandleRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendGetFileHandleMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetHandleResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendGetFile
(
const
FileSystemGetFileRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetFileResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendGetFileMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetFileResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendResolve
(
const
FileSystemResolveRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemResolveResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendResolveMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemResolveResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendGetEntries
(
const
FileSystemGetEntriesRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetEntriesResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendGetEntriesMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemGetEntriesResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
SendRemoveEntry
(
const
FileSystemRemoveEntryRequest
&
aRequest
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemRemoveEntryResponse
>
&
&
aResolve
mozilla
:
:
ipc
:
:
RejectCallback
&
&
aReject
)
{
PFileSystemManagerChild
:
:
SendRemoveEntryMsg
(
aRequest
std
:
:
forward
<
mozilla
:
:
ipc
:
:
ResolveCallback
<
FileSystemRemoveEntryResponse
>
>
(
aResolve
)
std
:
:
forward
<
mozilla
:
:
ipc
:
:
RejectCallback
>
(
aReject
)
)
;
}
virtual
void
Shutdown
(
)
{
if
(
CanSend
(
)
)
{
Close
(
)
;
}
}
protected
:
virtual
~
FileSystemManagerChild
(
)
=
default
;
virtual
void
Destroy
(
)
{
Shutdown
(
)
;
delete
this
;
}
private
:
using
PFileSystemManagerChild
:
:
SendGetRootHandleMsg
;
using
PFileSystemManagerChild
:
:
SendGetDirectoryHandleMsg
;
using
PFileSystemManagerChild
:
:
SendGetFileHandleMsg
;
using
PFileSystemManagerChild
:
:
SendGetFileMsg
;
using
PFileSystemManagerChild
:
:
SendResolveMsg
;
using
PFileSystemManagerChild
:
:
SendGetEntriesMsg
;
using
PFileSystemManagerChild
:
:
SendRemoveEntryMsg
;
}
;
}
#
endif
