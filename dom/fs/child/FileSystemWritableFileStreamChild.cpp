#
include
"
FileSystemWritableFileStreamChild
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStream
.
h
"
#
include
"
private
/
pprio
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gOPFSLog
;
}
#
define
LOG
(
args
)
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Verbose
args
)
#
define
LOG_DEBUG
(
args
)
\
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
namespace
mozilla
:
:
dom
{
FileSystemWritableFileStreamChild
:
:
FileSystemWritableFileStreamChild
(
const
:
:
mozilla
:
:
ipc
:
:
FileDescriptor
&
aFileDescriptor
)
:
mStream
(
nullptr
)
{
auto
rawFD
=
aFileDescriptor
.
ClonePlatformHandle
(
)
;
mFileDesc
=
PR_ImportFile
(
PROsfd
(
rawFD
.
release
(
)
)
)
;
LOG
(
(
"
Created
new
WritableFileStreamChild
%
p
"
this
)
)
;
}
FileSystemWritableFileStreamChild
:
:
~
FileSystemWritableFileStreamChild
(
)
=
default
;
void
FileSystemWritableFileStreamChild
:
:
SetStream
(
FileSystemWritableFileStream
*
aStream
)
{
mStream
=
aStream
;
}
PRFileDesc
*
FileSystemWritableFileStreamChild
:
:
MutableFileDescPtr
(
)
const
{
MOZ_ASSERT
(
mFileDesc
)
;
return
mFileDesc
;
}
void
FileSystemWritableFileStreamChild
:
:
Close
(
)
{
MOZ_ASSERT
(
mFileDesc
)
;
LOG
(
(
"
Closing
WritableFileStreamChild
%
p
"
this
)
)
;
PR_Close
(
mFileDesc
)
;
mFileDesc
=
nullptr
;
PFileSystemWritableFileStreamChild
:
:
Send__delete__
(
this
)
;
}
void
FileSystemWritableFileStreamChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
LOG
(
(
"
Destroy
WritableFileStreamChild
%
p
"
this
)
)
;
if
(
mFileDesc
)
{
PR_Close
(
mFileDesc
)
;
mFileDesc
=
nullptr
;
}
if
(
mStream
)
{
mStream
-
>
ClearActor
(
)
;
mStream
=
nullptr
;
}
}
}
