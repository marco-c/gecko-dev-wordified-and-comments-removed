#
include
"
FileSystemSyncAccessHandle
.
h
"
#
include
"
fs
/
FileSystemRequestHandler
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemAccessHandleChild
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemHandleBinding
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemManager
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemSyncAccessHandleBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
private
/
pprio
.
h
"
namespace
mozilla
{
LazyLogModule
gOPFSLog
(
"
OPFS
"
)
;
}
#
define
LOG
(
args
)
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Verbose
args
)
#
define
LOG_DEBUG
(
args
)
\
MOZ_LOG
(
mozilla
:
:
gOPFSLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
static
nsresult
TruncFile
(
PRFileDesc
*
aFD
int64_t
aEOF
)
{
#
if
defined
(
XP_UNIX
)
if
(
ftruncate
(
PR_FileDesc2NativeHandle
(
aFD
)
aEOF
)
!
=
0
)
{
NS_ERROR
(
"
ftruncate
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
#
elif
defined
(
XP_WIN
)
int64_t
cnt
=
PR_Seek64
(
aFD
aEOF
PR_SEEK_SET
)
;
if
(
cnt
=
=
-
1
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
SetEndOfFile
(
(
HANDLE
)
PR_FileDesc2NativeHandle
(
aFD
)
)
)
{
NS_ERROR
(
"
SetEndOfFile
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
#
else
MOZ_ASSERT
(
false
"
Not
implemented
!
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
#
endif
return
NS_OK
;
}
namespace
mozilla
:
:
dom
{
FileSystemSyncAccessHandle
:
:
FileSystemSyncAccessHandle
(
nsIGlobalObject
*
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
RefPtr
<
FileSystemAccessHandleChild
>
aActor
const
:
:
mozilla
:
:
ipc
:
:
FileDescriptor
&
aFileDescriptor
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
)
:
mGlobal
(
aGlobal
)
mManager
(
aManager
)
mActor
(
std
:
:
move
(
aActor
)
)
mFileDesc
(
nullptr
)
mMetadata
(
aMetadata
)
mClosed
(
false
)
{
auto
rawFD
=
aFileDescriptor
.
ClonePlatformHandle
(
)
;
mFileDesc
=
PR_ImportFile
(
PROsfd
(
rawFD
.
release
(
)
)
)
;
LOG
(
(
"
Created
SyncAccessHandle
%
p
for
fd
%
p
"
this
mFileDesc
)
)
;
}
FileSystemSyncAccessHandle
:
:
~
FileSystemSyncAccessHandle
(
)
{
MOZ_ASSERT
(
!
mActor
)
;
MOZ_ASSERT
(
mClosed
)
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FileSystemSyncAccessHandle
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FileSystemSyncAccessHandle
)
NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_LAST_RELEASE
(
FileSystemSyncAccessHandle
LastRelease
(
)
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
FileSystemSyncAccessHandle
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
FileSystemSyncAccessHandle
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
tmp
-
>
Close
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
FileSystemSyncAccessHandle
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mGlobal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mManager
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
void
FileSystemSyncAccessHandle
:
:
LastRelease
(
)
{
Close
(
)
;
if
(
mActor
)
{
PFileSystemAccessHandleChild
:
:
Send__delete__
(
mActor
)
;
MOZ_ASSERT
(
!
mActor
)
;
}
}
void
FileSystemSyncAccessHandle
:
:
ClearActor
(
)
{
MOZ_ASSERT
(
mActor
)
;
mActor
=
nullptr
;
}
void
FileSystemSyncAccessHandle
:
:
Close
(
)
{
if
(
mClosed
)
{
return
;
}
LOG
(
(
"
%
p
:
Closing
"
mFileDesc
)
)
;
mClosed
=
true
;
PR_Close
(
mFileDesc
)
;
mFileDesc
=
nullptr
;
mActor
-
>
SendClose
(
)
;
}
nsIGlobalObject
*
FileSystemSyncAccessHandle
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
FileSystemSyncAccessHandle
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FileSystemSyncAccessHandle_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
uint64_t
FileSystemSyncAccessHandle
:
:
Read
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
const
FileSystemReadWriteOptions
&
aOptions
ErrorResult
&
aRv
)
{
if
(
mClosed
)
{
aRv
.
ThrowInvalidStateError
(
"
SyncAccessHandle
is
closed
"
)
;
return
0
;
}
uint64_t
at
=
0
;
if
(
aOptions
.
mAt
.
WasPassed
(
)
)
{
at
=
aOptions
.
mAt
.
Value
(
)
;
}
LOG
(
(
"
%
p
:
Seeking
to
%
"
PRIu64
mFileDesc
at
)
)
;
int64_t
where
=
PR_Seek64
(
mFileDesc
(
PROffset64
)
at
PR_SEEK_SET
)
;
if
(
where
=
=
-
1
)
{
LOG
(
(
"
Read
at
%
"
PRIu64
"
failed
to
seek
(
errno
%
d
)
"
at
errno
)
)
;
return
0
;
}
if
(
where
!
=
(
int64_t
)
at
)
{
LOG
(
(
"
Read
at
%
"
PRIu64
"
failed
to
seek
(
%
"
PRId64
"
instead
)
"
at
where
)
)
;
return
0
;
}
uint8_t
*
data
;
size_t
length
;
if
(
aBuffer
.
IsArrayBuffer
(
)
)
{
const
ArrayBuffer
&
buffer
=
aBuffer
.
GetAsArrayBuffer
(
)
;
buffer
.
ComputeState
(
)
;
data
=
buffer
.
Data
(
)
;
length
=
buffer
.
Length
(
)
;
}
else
if
(
aBuffer
.
IsArrayBufferView
(
)
)
{
const
ArrayBufferView
&
buffer
=
aBuffer
.
GetAsArrayBufferView
(
)
;
buffer
.
ComputeState
(
)
;
data
=
buffer
.
Data
(
)
;
length
=
buffer
.
Length
(
)
;
}
else
{
LOG
(
(
"
Impossible
read
source
"
)
)
;
return
0
;
}
LOG
(
(
"
%
p
:
Reading
%
zu
bytes
"
mFileDesc
length
)
)
;
uint64_t
result
=
0
;
while
(
length
>
0
)
{
PRInt32
iter_len
=
(
length
>
PR_INT32_MAX
)
?
PR_INT32_MAX
:
length
;
PRInt32
temp
=
PR_Read
(
mFileDesc
data
iter_len
)
;
if
(
temp
=
=
-
1
|
|
temp
=
=
0
)
{
return
result
;
}
result
+
=
temp
;
length
-
=
temp
;
}
return
result
;
}
uint64_t
FileSystemSyncAccessHandle
:
:
Write
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
const
FileSystemReadWriteOptions
&
aOptions
ErrorResult
&
aRv
)
{
if
(
mClosed
)
{
aRv
.
ThrowInvalidStateError
(
"
SyncAccessHandle
is
closed
"
)
;
return
0
;
}
uint64_t
at
=
0
;
if
(
aOptions
.
mAt
.
WasPassed
(
)
)
{
at
=
aOptions
.
mAt
.
Value
(
)
;
}
LOG
(
(
"
%
p
:
Seeking
to
%
"
PRIu64
mFileDesc
at
)
)
;
int64_t
where
=
PR_Seek64
(
mFileDesc
(
PROffset64
)
at
PR_SEEK_SET
)
;
if
(
where
=
=
-
1
)
{
LOG
(
(
"
Write
at
%
"
PRIu64
"
failed
to
seek
(
errno
%
d
)
"
at
errno
)
)
;
return
0
;
}
if
(
where
!
=
(
int64_t
)
at
)
{
LOG
(
(
"
Write
at
%
"
PRIu64
"
failed
to
seek
(
%
"
PRId64
"
instead
)
"
at
where
)
)
;
return
0
;
}
const
uint8_t
*
data
;
size_t
length
;
if
(
aBuffer
.
IsArrayBuffer
(
)
)
{
const
ArrayBuffer
&
buffer
=
aBuffer
.
GetAsArrayBuffer
(
)
;
buffer
.
ComputeState
(
)
;
data
=
buffer
.
Data
(
)
;
length
=
buffer
.
Length
(
)
;
}
else
if
(
aBuffer
.
IsArrayBufferView
(
)
)
{
const
ArrayBufferView
&
buffer
=
aBuffer
.
GetAsArrayBufferView
(
)
;
buffer
.
ComputeState
(
)
;
data
=
buffer
.
Data
(
)
;
length
=
buffer
.
Length
(
)
;
}
else
{
LOG
(
(
"
Impossible
write
source
"
)
)
;
return
0
;
}
LOG
(
(
"
%
p
:
Writing
%
zu
bytes
"
mFileDesc
length
)
)
;
uint64_t
result
=
0
;
while
(
length
>
0
)
{
PRInt32
iter_len
=
(
length
>
PR_INT32_MAX
)
?
PR_INT32_MAX
:
length
;
PRInt32
temp
=
PR_Write
(
mFileDesc
data
iter_len
)
;
if
(
temp
=
=
-
1
)
{
return
result
;
}
result
+
=
temp
;
length
-
=
temp
;
}
return
result
;
}
already_AddRefed
<
Promise
>
FileSystemSyncAccessHandle
:
:
Truncate
(
uint64_t
aSize
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mClosed
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
promise
.
forget
(
)
;
}
LOG_DEBUG
(
(
"
%
p
:
Truncate
to
%
"
PRIu64
mFileDesc
aSize
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
TruncFile
(
mFileDesc
aSize
)
)
)
)
{
promise
-
>
MaybeReject
(
NS_ErrorAccordingToNSPR
(
)
)
;
}
else
{
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemSyncAccessHandle
:
:
GetSize
(
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mClosed
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
promise
.
forget
(
)
;
}
PRFileInfo64
info
;
if
(
PR_GetOpenFileInfo64
(
mFileDesc
&
info
)
=
=
PR_FAILURE
)
{
promise
-
>
MaybeReject
(
NS_ERROR_FAILURE
)
;
}
else
{
LOG_DEBUG
(
(
"
%
p
:
GetSize
%
"
PRIu64
mFileDesc
info
.
size
)
)
;
promise
-
>
MaybeResolve
(
int64_t
(
info
.
size
)
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemSyncAccessHandle
:
:
Flush
(
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mClosed
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
promise
.
forget
(
)
;
}
LOG_DEBUG
(
(
"
%
p
:
Flush
"
mFileDesc
)
)
;
int32_t
cnt
=
PR_Sync
(
mFileDesc
)
;
if
(
cnt
=
=
-
1
)
{
promise
-
>
MaybeReject
(
NS_ErrorAccordingToNSPR
(
)
)
;
}
else
{
promise
-
>
MaybeResolve
(
NS_OK
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemSyncAccessHandle
:
:
Close
(
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
Close
(
)
;
promise
-
>
MaybeResolveWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
}
