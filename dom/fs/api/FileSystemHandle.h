#
ifndef
DOM_FS_FILESYSTEMHANDLE_H_
#
define
DOM_FS_FILESYSTEMHANDLE_H_
#
include
"
mozilla
/
dom
/
PBackgroundFileSystem
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DOMString
;
enum
class
FileSystemHandleKind
:
uint8_t
;
class
Promise
;
namespace
fs
{
class
FileSystemRequestHandler
;
}
class
FileSystemHandle
:
public
nsISupports
public
nsWrapperCache
{
public
:
FileSystemHandle
(
nsIGlobalObject
*
aGlobal
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
fs
:
:
FileSystemRequestHandler
*
aRequestHandler
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
FileSystemHandle
)
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
FileSystemHandleKind
Kind
(
)
const
=
0
;
void
GetName
(
nsAString
&
aResult
)
;
already_AddRefed
<
Promise
>
IsSameEntry
(
FileSystemHandle
&
aOther
ErrorResult
&
aError
)
const
;
protected
:
virtual
~
FileSystemHandle
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
const
fs
:
:
FileSystemEntryMetadata
mMetadata
;
const
UniquePtr
<
fs
:
:
FileSystemRequestHandler
>
mRequestHandler
;
}
;
}
}
#
endif
