#
ifndef
DOM_FS_CHILD_FILESYSTEMMANAGER_H_
#
define
DOM_FS_CHILD_FILESYSTEMMANAGER_H_
#
include
<
functional
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
FileSystemManagerChild
;
class
FileSystemBackgroundRequestHandler
;
class
StorageManager
;
namespace
fs
{
class
FileSystemRequestHandler
;
}
class
FileSystemManager
:
public
nsISupports
{
public
:
FileSystemManager
(
nsIGlobalObject
*
aGlobal
RefPtr
<
StorageManager
>
aStorageManager
RefPtr
<
FileSystemBackgroundRequestHandler
>
aBackgroundRequestHandler
)
;
FileSystemManager
(
nsIGlobalObject
*
aGlobal
RefPtr
<
StorageManager
>
aStorageManager
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
FileSystemManager
)
void
Shutdown
(
)
;
void
BeginRequest
(
std
:
:
function
<
void
(
const
RefPtr
<
FileSystemManagerChild
>
&
)
>
&
&
aSuccess
std
:
:
function
<
void
(
nsresult
)
>
&
&
aFailure
)
;
already_AddRefed
<
Promise
>
GetDirectory
(
ErrorResult
&
aRv
)
;
private
:
virtual
~
FileSystemManager
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
StorageManager
>
mStorageManager
;
const
RefPtr
<
FileSystemBackgroundRequestHandler
>
mBackgroundRequestHandler
;
const
UniquePtr
<
fs
:
:
FileSystemRequestHandler
>
mRequestHandler
;
}
;
}
}
#
endif
