#
include
"
FileSystemWritableFileStream
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UnionConversions
.
h
"
#
include
"
mozilla
/
dom
/
WritableStreamDefaultController
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
FileSystemWritableFileStream
WritableStream
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
FileSystemWritableFileStream
WritableStream
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
FileSystemWritableFileStream
:
:
StreamAlgorithms
UnderlyingSinkAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
FileSystemWritableFileStream
:
:
StreamAlgorithms
UnderlyingSinkAlgorithmsBase
mStream
)
static
void
TryGetAsUnion
(
JSContext
*
aCx
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParams
&
aOutput
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
chunk
(
aCx
aChunk
)
;
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParamsArgument
holder
(
aOutput
)
;
bool
done
=
false
failed
=
false
tryNext
;
if
(
chunk
.
isObject
(
)
)
{
done
=
(
failed
=
!
holder
.
TrySetToArrayBufferView
(
aCx
&
chunk
tryNext
false
)
)
|
|
!
tryNext
|
|
(
failed
=
!
holder
.
TrySetToArrayBuffer
(
aCx
&
chunk
tryNext
false
)
)
|
|
!
tryNext
|
|
(
failed
=
!
holder
.
TrySetToBlob
(
aCx
&
chunk
tryNext
false
)
)
|
|
!
tryNext
;
}
if
(
!
done
)
{
done
=
(
failed
=
!
holder
.
TrySetToWriteParams
(
aCx
&
chunk
tryNext
false
)
)
|
|
!
tryNext
;
}
if
(
!
done
)
{
do
{
done
=
(
failed
=
!
holder
.
TrySetToUSVString
(
aCx
&
chunk
tryNext
)
)
|
|
!
tryNext
;
break
;
}
while
(
false
)
;
}
if
(
failed
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
if
(
!
done
)
{
aRv
.
ThrowTypeError
(
"
The
chunk
must
be
one
of
ArrayBufferView
ArrayBuffer
Blob
"
"
WriteParams
.
"
)
;
return
;
}
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
StreamAlgorithms
:
:
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParams
chunkUnion
;
TryGetAsUnion
(
aCx
chunkUnion
aChunk
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
mStream
-
>
Write
(
chunkUnion
aRv
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
already_AddRefed
<
FileSystemWritableFileStream
>
FileSystemWritableFileStream
:
:
MaybeCreate
(
nsIGlobalObject
*
aGlobal
)
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aGlobal
)
)
{
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
RefPtr
<
FileSystemWritableFileStream
>
stream
=
new
FileSystemWritableFileStream
(
aGlobal
)
;
auto
algorithms
=
MakeRefPtr
<
StreamAlgorithms
>
(
*
stream
)
;
auto
controller
=
MakeRefPtr
<
WritableStreamDefaultController
>
(
aGlobal
*
stream
)
;
IgnoredErrorResult
rv
;
SetUpWritableStreamDefaultController
(
cx
stream
controller
algorithms
1
nullptr
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
return
stream
.
forget
(
)
;
}
JSObject
*
FileSystemWritableFileStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FileSystemWritableFileStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Write
(
const
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParams
&
aData
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Seek
(
uint64_t
aPosition
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Truncate
(
uint64_t
aSize
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Close
(
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
promise
.
forget
(
)
;
}
}
