#
include
"
FileSystemWritableFileStream
.
h
"
#
include
"
fs
/
FileSystemAsyncCopy
.
h
"
#
include
"
fs
/
FileSystemShutdownBlocker
.
h
"
#
include
"
fs
/
FileSystemThreadSafeStreamOwner
.
h
"
#
include
"
mozilla
/
Buffer
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
InputStreamLengthHelper
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemHandle
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemLog
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemManager
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemWritableFileStreamChild
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WritableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
ipc
/
RandomAccessStreamUtils
.
h
"
#
include
"
nsAsyncStreamCopier
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIRequestObserver
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsStringStream
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
constexpr
bool
IsFileNotFoundError
(
const
nsresult
aRv
)
{
return
NS_ERROR_DOM_FILE_NOT_FOUND_ERR
=
=
aRv
|
|
NS_ERROR_FILE_NOT_FOUND
=
=
aRv
;
}
class
WritableFileStreamUnderlyingSinkAlgorithms
final
:
public
UnderlyingSinkAlgorithmsWrapper
{
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
WritableFileStreamUnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
)
explicit
WritableFileStreamUnderlyingSinkAlgorithms
(
FileSystemWritableFileStream
&
aStream
)
:
mStream
(
&
aStream
)
{
}
already_AddRefed
<
Promise
>
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
CloseCallbackImpl
(
JSContext
*
aCx
ErrorResult
&
aRv
)
override
;
already_AddRefed
<
Promise
>
AbortCallbackImpl
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
void
ReleaseObjects
(
)
override
;
private
:
~
WritableFileStreamUnderlyingSinkAlgorithms
(
)
=
default
;
RefPtr
<
FileSystemWritableFileStream
>
mStream
;
}
;
void
WriteImpl
(
const
RefPtr
<
nsISerialEventTarget
>
&
aTaskQueue
nsCOMPtr
<
nsIInputStream
>
aInputStream
RefPtr
<
fs
:
:
FileSystemThreadSafeStreamOwner
>
&
aOutStreamOwner
const
Maybe
<
uint64_t
>
aPosition
const
RefPtr
<
Promise
>
&
aPromise
)
{
InvokeAsync
(
aTaskQueue
__func__
[
aTaskQueue
inputStream
=
std
:
:
move
(
aInputStream
)
aOutStreamOwner
aPosition
]
(
)
{
if
(
aPosition
.
isSome
(
)
)
{
LOG
(
(
"
%
p
:
Seeking
to
%
"
PRIu64
aOutStreamOwner
.
get
(
)
aPosition
.
value
(
)
)
)
;
QM_TRY
(
MOZ_TO_RESULT
(
aOutStreamOwner
-
>
Seek
(
aPosition
.
value
(
)
)
)
CreateAndRejectInt64Promise
)
;
}
nsCOMPtr
<
nsIOutputStream
>
streamSink
=
aOutStreamOwner
-
>
OutputStream
(
)
;
auto
written
=
std
:
:
make_shared
<
int64_t
>
(
0
)
;
auto
writingProgress
=
[
written
]
(
uint32_t
aDelta
)
{
*
written
+
=
static_cast
<
int64_t
>
(
aDelta
)
;
}
;
auto
promiseHolder
=
MakeUnique
<
MozPromiseHolder
<
Int64Promise
>
>
(
)
;
RefPtr
<
Int64Promise
>
promise
=
promiseHolder
-
>
Ensure
(
__func__
)
;
auto
writingCompletion
=
[
written
promiseHolder
=
std
:
:
move
(
promiseHolder
)
]
(
nsresult
aStatus
)
{
if
(
NS_SUCCEEDED
(
aStatus
)
)
{
promiseHolder
-
>
ResolveIfExists
(
*
written
__func__
)
;
return
;
}
promiseHolder
-
>
RejectIfExists
(
aStatus
__func__
)
;
}
;
QM_TRY
(
MOZ_TO_RESULT
(
fs
:
:
AsyncCopy
(
inputStream
streamSink
aTaskQueue
nsAsyncCopyMode
:
:
NS_ASYNCCOPY_VIA_READSEGMENTS
true
false
std
:
:
move
(
writingProgress
)
std
:
:
move
(
writingCompletion
)
)
)
CreateAndRejectInt64Promise
)
;
return
promise
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aPromise
]
(
const
Int64Promise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
aPromise
-
>
MaybeResolve
(
aValue
.
ResolveValue
(
)
)
;
return
;
}
if
(
IsFileNotFoundError
(
aValue
.
RejectValue
(
)
)
)
{
aPromise
-
>
MaybeRejectWithNotFoundError
(
"
File
not
found
"
)
;
}
else
if
(
aValue
.
RejectValue
(
)
=
=
NS_ERROR_FILE_NO_DEVICE_SPACE
)
{
aPromise
-
>
MaybeRejectWithQuotaExceededError
(
"
Quota
exceeded
"
)
;
}
else
{
aPromise
-
>
MaybeReject
(
aValue
.
RejectValue
(
)
)
;
}
aPromise
-
>
MaybeReject
(
aValue
.
RejectValue
(
)
)
;
}
)
;
}
}
class
FileSystemWritableFileStream
:
:
CloseHandler
{
enum
struct
State
:
uint8_t
{
Initial
=
0
Open
Closing
Closed
}
;
public
:
CloseHandler
(
)
:
mShutdownBlocker
(
fs
:
:
FileSystemShutdownBlocker
:
:
CreateForWritable
(
)
)
mClosePromiseHolder
(
)
mState
(
State
:
:
Initial
)
{
}
NS_INLINE_DECL_REFCOUNTING
(
FileSystemWritableFileStream
:
:
CloseHandler
)
bool
IsOpen
(
)
const
{
return
State
:
:
Open
=
=
mState
;
}
bool
IsClosed
(
)
const
{
return
State
:
:
Closed
=
=
mState
;
}
bool
TestAndSetClosing
(
)
{
const
bool
isOpen
=
State
:
:
Open
=
=
mState
;
if
(
isOpen
)
{
mState
=
State
:
:
Closing
;
}
return
isOpen
;
}
RefPtr
<
BoolPromise
>
GetClosePromise
(
)
const
{
MOZ_ASSERT
(
State
:
:
Open
!
=
mState
"
Please
call
TestAndSetClosing
before
GetClosePromise
"
)
;
if
(
State
:
:
Closing
=
=
mState
)
{
return
mClosePromiseHolder
.
Ensure
(
__func__
)
;
}
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
void
Open
(
)
{
MOZ_ASSERT
(
State
:
:
Initial
=
=
mState
)
;
mShutdownBlocker
-
>
Block
(
)
;
mState
=
State
:
:
Open
;
}
void
Close
(
)
{
mShutdownBlocker
-
>
Unblock
(
)
;
mState
=
State
:
:
Closed
;
mClosePromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
}
protected
:
virtual
~
CloseHandler
(
)
=
default
;
private
:
RefPtr
<
fs
:
:
FileSystemShutdownBlocker
>
mShutdownBlocker
;
mutable
MozPromiseHolder
<
BoolPromise
>
mClosePromiseHolder
;
State
mState
;
}
;
FileSystemWritableFileStream
:
:
FileSystemWritableFileStream
(
const
nsCOMPtr
<
nsIGlobalObject
>
&
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
RefPtr
<
FileSystemWritableFileStreamChild
>
aActor
already_AddRefed
<
TaskQueue
>
aTaskQueue
nsCOMPtr
<
nsIRandomAccessStream
>
aStream
fs
:
:
FileSystemEntryMetadata
&
&
aMetadata
)
:
WritableStream
(
aGlobal
HoldDropJSObjectsCaller
:
:
Explicit
)
mManager
(
aManager
)
mActor
(
std
:
:
move
(
aActor
)
)
mTaskQueue
(
aTaskQueue
)
mStreamOwner
(
MakeAndAddRef
<
fs
:
:
FileSystemThreadSafeStreamOwner
>
(
std
:
:
move
(
aStream
)
)
)
mWorkerRef
(
)
mMetadata
(
std
:
:
move
(
aMetadata
)
)
mCloseHandler
(
MakeAndAddRef
<
CloseHandler
>
(
)
)
{
LOG
(
(
"
Created
WritableFileStream
%
p
for
fd
%
p
"
this
mStreamOwner
.
get
(
)
)
)
;
mActor
-
>
SetStream
(
this
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
FileSystemWritableFileStream
:
:
~
FileSystemWritableFileStream
(
)
{
MOZ_ASSERT
(
IsClosed
(
)
)
;
mozilla
:
:
DropJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
RefPtr
<
FileSystemWritableFileStream
:
:
CreatePromise
>
FileSystemWritableFileStream
:
:
Create
(
const
nsCOMPtr
<
nsIGlobalObject
>
&
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
RefPtr
<
FileSystemWritableFileStreamChild
>
aActor
mozilla
:
:
ipc
:
:
RandomAccessStreamParams
&
&
aStreamParams
fs
:
:
FileSystemEntryMetadata
&
&
aMetadata
)
{
using
StreamPromise
=
MozPromise
<
NotNull
<
nsCOMPtr
<
nsIRandomAccessStream
>
>
nsresult
true
>
;
MOZ_ASSERT
(
aGlobal
)
;
QM_TRY_UNWRAP
(
auto
streamTransportService
MOZ_TO_RESULT_GET_TYPED
(
nsCOMPtr
<
nsIEventTarget
>
MOZ_SELECT_OVERLOAD
(
do_GetService
)
NS_STREAMTRANSPORTSERVICE_CONTRACTID
)
[
]
(
const
nsresult
aRv
)
{
return
CreatePromise
:
:
CreateAndReject
(
aRv
__func__
)
;
}
)
;
RefPtr
<
TaskQueue
>
taskQueue
=
TaskQueue
:
:
Create
(
streamTransportService
.
forget
(
)
"
WritableStreamQueue
"
)
;
MOZ_ASSERT
(
taskQueue
)
;
auto
streamSetup
=
[
aGlobal
aManager
actor
=
std
:
:
move
(
aActor
)
taskQueue
metadata
=
std
:
:
move
(
aMetadata
)
]
(
StreamPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
MOZ_CAN_RUN_SCRIPT
mutable
{
auto
rejectAndReturn
=
[
]
(
const
nsresult
aRv
)
{
return
CreatePromise
:
:
CreateAndReject
(
aRv
__func__
)
;
}
;
if
(
!
aValue
.
IsResolve
(
)
)
{
if
(
aValue
.
IsReject
(
)
)
{
return
rejectAndReturn
(
aValue
.
RejectValue
(
)
)
;
}
return
rejectAndReturn
(
NS_ERROR_DOM_UNKNOWN_ERR
)
;
}
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aGlobal
)
)
{
return
rejectAndReturn
(
NS_ERROR_FAILURE
)
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
nsCOMPtr
<
nsIRandomAccessStream
>
inputOutputStream
=
aValue
.
ResolveValue
(
)
;
RefPtr
<
FileSystemWritableFileStream
>
stream
=
new
FileSystemWritableFileStream
(
aGlobal
aManager
std
:
:
move
(
actor
)
taskQueue
.
forget
(
)
inputOutputStream
std
:
:
move
(
metadata
)
)
;
auto
autoClose
=
MakeScopeExit
(
[
stream
]
{
stream
-
>
mCloseHandler
-
>
Close
(
)
;
stream
-
>
mActor
-
>
SendClose
(
)
;
}
)
;
auto
algorithms
=
MakeRefPtr
<
WritableFileStreamUnderlyingSinkAlgorithms
>
(
*
stream
)
;
IgnoredErrorResult
rv
;
stream
-
>
SetUpNative
(
cx
*
algorithms
Some
(
1
)
nullptr
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
CreatePromise
:
:
CreateAndReject
(
rv
.
StealNSResult
(
)
__func__
)
;
}
autoClose
.
release
(
)
;
stream
-
>
mCloseHandler
-
>
Open
(
)
;
return
CreatePromise
:
:
CreateAndResolve
(
stream
.
forget
(
)
__func__
)
;
}
;
return
InvokeAsync
(
taskQueue
__func__
[
streamParams
=
std
:
:
move
(
aStreamParams
)
]
(
)
mutable
{
mozilla
:
:
ipc
:
:
RandomAccessStreamParams
params
(
std
:
:
move
(
streamParams
)
)
;
QM_TRY_UNWRAP
(
MovingNotNull
<
nsCOMPtr
<
nsIRandomAccessStream
>
>
inputOutputStream
mozilla
:
:
ipc
:
:
DeserializeRandomAccessStream
(
params
)
[
]
(
const
bool
)
{
return
StreamPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_UNKNOWN_ERR
__func__
)
;
}
)
;
NotNull
<
nsCOMPtr
<
nsIRandomAccessStream
>
>
unwrapped
(
std
:
:
move
(
inputOutputStream
)
.
unwrap
(
)
)
;
return
StreamPromise
:
:
CreateAndResolve
(
unwrapped
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
std
:
:
move
(
streamSetup
)
)
;
}
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
FileSystemWritableFileStream
WritableStream
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
FileSystemWritableFileStream
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
FileSystemWritableFileStream
WritableStream
)
if
(
tmp
-
>
IsOpen
(
)
)
{
Unused
<
<
tmp
-
>
BeginClose
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
FileSystemWritableFileStream
WritableStream
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mManager
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
void
FileSystemWritableFileStream
:
:
LastRelease
(
)
{
if
(
mActor
)
{
PFileSystemWritableFileStreamChild
:
:
Send__delete__
(
mActor
)
;
MOZ_ASSERT
(
!
mActor
)
;
}
}
void
FileSystemWritableFileStream
:
:
ClearActor
(
)
{
MOZ_ASSERT
(
mActor
)
;
mActor
=
nullptr
;
}
bool
FileSystemWritableFileStream
:
:
IsOpen
(
)
const
{
return
mCloseHandler
-
>
IsOpen
(
)
;
}
bool
FileSystemWritableFileStream
:
:
IsClosed
(
)
const
{
return
mCloseHandler
-
>
IsClosed
(
)
;
}
RefPtr
<
BoolPromise
>
FileSystemWritableFileStream
:
:
BeginClose
(
)
{
using
ClosePromise
=
PFileSystemWritableFileStreamChild
:
:
ClosePromise
;
if
(
mCloseHandler
-
>
TestAndSetClosing
(
)
)
{
InvokeAsync
(
mTaskQueue
__func__
[
streamOwner
=
mStreamOwner
]
(
)
mutable
{
streamOwner
-
>
Close
(
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
(
this
)
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
)
{
return
self
-
>
mTaskQueue
-
>
BeginShutdown
(
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
(
this
)
]
(
const
ShutdownPromise
:
:
ResolveOrRejectValue
&
)
{
if
(
!
self
-
>
mActor
)
{
return
ClosePromise
:
:
CreateAndResolve
(
void_t
(
)
__func__
)
;
}
return
self
-
>
mActor
-
>
SendClose
(
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
(
this
)
]
(
const
ClosePromise
:
:
ResolveOrRejectValue
&
aValue
)
{
self
-
>
mWorkerRef
=
nullptr
;
self
-
>
mCloseHandler
-
>
Close
(
)
;
QM_TRY
(
OkIf
(
aValue
.
IsResolve
(
)
)
QM_VOID
)
;
}
)
;
}
return
mCloseHandler
-
>
GetClosePromise
(
)
;
}
void
FileSystemWritableFileStream
:
:
SetWorkerRef
(
RefPtr
<
StrongWorkerRef
>
&
&
aWorkerRef
)
{
mWorkerRef
=
std
:
:
move
(
aWorkerRef
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsOpen
(
)
)
;
aError
.
MightThrowJSException
(
)
;
ArrayBufferViewOrArrayBufferOrBlobOrUTF8StringOrWriteParams
data
;
if
(
!
data
.
Init
(
aCx
aChunk
)
)
{
aError
.
StealExceptionFromJSContext
(
aCx
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
data
.
IsWriteParams
(
)
)
{
const
WriteParams
&
params
=
data
.
GetAsWriteParams
(
)
;
switch
(
params
.
mType
)
{
case
WriteCommandType
:
:
Write
:
{
if
(
!
params
.
mData
.
WasPassed
(
)
)
{
promise
-
>
MaybeRejectWithSyntaxError
(
"
write
(
)
requires
data
"
)
;
return
promise
.
forget
(
)
;
}
if
(
params
.
mData
.
Value
(
)
.
IsNull
(
)
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
write
(
)
of
null
data
"
)
;
return
promise
.
forget
(
)
;
}
Maybe
<
uint64_t
>
position
;
if
(
params
.
mPosition
.
WasPassed
(
)
)
{
if
(
params
.
mPosition
.
Value
(
)
.
IsNull
(
)
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
write
(
)
with
null
position
"
)
;
return
promise
.
forget
(
)
;
}
position
=
Some
(
params
.
mPosition
.
Value
(
)
.
Value
(
)
)
;
}
Write
(
params
.
mData
.
Value
(
)
.
Value
(
)
position
promise
)
;
return
promise
.
forget
(
)
;
}
case
WriteCommandType
:
:
Seek
:
if
(
!
params
.
mPosition
.
WasPassed
(
)
)
{
promise
-
>
MaybeRejectWithSyntaxError
(
"
seek
(
)
requires
a
position
"
)
;
return
promise
.
forget
(
)
;
}
if
(
params
.
mPosition
.
Value
(
)
.
IsNull
(
)
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
seek
(
)
with
null
position
"
)
;
return
promise
.
forget
(
)
;
}
Seek
(
params
.
mPosition
.
Value
(
)
.
Value
(
)
promise
)
;
return
promise
.
forget
(
)
;
case
WriteCommandType
:
:
Truncate
:
if
(
!
params
.
mSize
.
WasPassed
(
)
)
{
promise
-
>
MaybeRejectWithSyntaxError
(
"
truncate
(
)
requires
a
size
"
)
;
return
promise
.
forget
(
)
;
}
if
(
params
.
mSize
.
Value
(
)
.
IsNull
(
)
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
truncate
(
)
with
null
size
"
)
;
return
promise
.
forget
(
)
;
}
Truncate
(
params
.
mSize
.
Value
(
)
.
Value
(
)
promise
)
;
return
promise
.
forget
(
)
;
default
:
MOZ_CRASH
(
"
Bad
WriteParams
value
!
"
)
;
}
}
Write
(
data
Nothing
(
)
promise
)
;
return
promise
.
forget
(
)
;
}
JSObject
*
FileSystemWritableFileStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FileSystemWritableFileStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Write
(
const
ArrayBufferViewOrArrayBufferOrBlobOrUTF8StringOrWriteParams
&
aData
ErrorResult
&
aError
)
{
RefPtr
<
WritableStreamDefaultWriter
>
writer
=
GetWriter
(
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
GetParentObject
(
)
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
cx
JS
:
:
CurrentGlobalOrNull
(
cx
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
cx
)
;
if
(
!
aData
.
ToJSVal
(
cx
global
&
val
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
writer
-
>
Write
(
cx
val
aError
)
;
writer
-
>
ReleaseLock
(
cx
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Seek
(
uint64_t
aPosition
ErrorResult
&
aError
)
{
RefPtr
<
WritableStreamDefaultWriter
>
writer
=
GetWriter
(
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
GetParentObject
(
)
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
RootedDictionary
<
WriteParams
>
writeParams
(
cx
)
;
writeParams
.
mType
=
WriteCommandType
:
:
Seek
;
writeParams
.
mPosition
.
Construct
(
aPosition
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
cx
)
;
if
(
!
ToJSValue
(
cx
writeParams
&
val
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
writer
-
>
Write
(
cx
val
aError
)
;
writer
-
>
ReleaseLock
(
cx
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
FileSystemWritableFileStream
:
:
Truncate
(
uint64_t
aSize
ErrorResult
&
aError
)
{
RefPtr
<
WritableStreamDefaultWriter
>
writer
=
GetWriter
(
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
GetParentObject
(
)
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
RootedDictionary
<
WriteParams
>
writeParams
(
cx
)
;
writeParams
.
mType
=
WriteCommandType
:
:
Truncate
;
writeParams
.
mSize
.
Construct
(
aSize
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
cx
)
;
if
(
!
ToJSValue
(
cx
writeParams
&
val
)
)
{
aError
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
writer
-
>
Write
(
cx
val
aError
)
;
writer
-
>
ReleaseLock
(
cx
)
;
return
promise
.
forget
(
)
;
}
template
<
typename
T
>
void
FileSystemWritableFileStream
:
:
Write
(
const
T
&
aData
const
Maybe
<
uint64_t
>
aPosition
const
RefPtr
<
Promise
>
&
aPromise
)
{
auto
rejectAndReturn
=
[
&
aPromise
]
(
const
nsresult
rv
)
{
if
(
IsFileNotFoundError
(
rv
)
)
{
aPromise
-
>
MaybeRejectWithNotFoundError
(
"
File
not
found
"
)
;
return
;
}
aPromise
-
>
MaybeReject
(
rv
)
;
}
;
nsCOMPtr
<
nsIInputStream
>
inputStream
;
if
(
aData
.
IsArrayBuffer
(
)
|
|
aData
.
IsArrayBufferView
(
)
)
{
const
auto
dataSpan
=
[
&
aData
]
(
)
-
>
mozilla
:
:
Span
<
uint8_t
>
{
if
(
aData
.
IsArrayBuffer
(
)
)
{
const
ArrayBuffer
&
buffer
=
aData
.
GetAsArrayBuffer
(
)
;
buffer
.
ComputeState
(
)
;
return
Span
{
buffer
.
Data
(
)
buffer
.
Length
(
)
}
;
}
const
ArrayBufferView
&
buffer
=
aData
.
GetAsArrayBufferView
(
)
;
buffer
.
ComputeState
(
)
;
return
Span
{
buffer
.
Data
(
)
buffer
.
Length
(
)
}
;
}
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
NS_NewByteInputStream
(
getter_AddRefs
(
inputStream
)
AsChars
(
dataSpan
)
NS_ASSIGNMENT_COPY
)
)
rejectAndReturn
)
;
WriteImpl
(
mTaskQueue
std
:
:
move
(
inputStream
)
mStreamOwner
aPosition
aPromise
)
;
return
;
}
if
(
aData
.
IsBlob
(
)
)
{
Blob
&
blob
=
aData
.
GetAsBlob
(
)
;
ErrorResult
error
;
blob
.
CreateInputStream
(
getter_AddRefs
(
inputStream
)
error
)
;
QM_TRY
(
(
MOZ_TO_RESULT
(
!
error
.
Failed
(
)
)
.
mapErr
(
[
&
error
]
(
const
nsresult
rv
)
{
return
error
.
StealNSResult
(
)
;
}
)
)
rejectAndReturn
)
;
WriteImpl
(
mTaskQueue
std
:
:
move
(
inputStream
)
mStreamOwner
aPosition
aPromise
)
;
return
;
}
MOZ_ASSERT
(
aData
.
IsUTF8String
(
)
)
;
nsCString
dataString
;
if
(
!
dataString
.
Assign
(
aData
.
GetAsUTF8String
(
)
mozilla
:
:
fallible
)
)
{
rejectAndReturn
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
QM_TRY
(
MOZ_TO_RESULT
(
NS_NewCStringInputStream
(
getter_AddRefs
(
inputStream
)
std
:
:
move
(
dataString
)
)
)
rejectAndReturn
)
;
WriteImpl
(
mTaskQueue
std
:
:
move
(
inputStream
)
mStreamOwner
aPosition
aPromise
)
;
}
void
FileSystemWritableFileStream
:
:
Seek
(
uint64_t
aPosition
const
RefPtr
<
Promise
>
&
aPromise
)
{
LOG_VERBOSE
(
(
"
%
p
:
Seeking
to
%
"
PRIu64
mStreamOwner
.
get
(
)
aPosition
)
)
;
InvokeAsync
(
mTaskQueue
__func__
[
aPosition
streamOwner
=
mStreamOwner
]
(
)
mutable
{
QM_TRY
(
MOZ_TO_RESULT
(
streamOwner
-
>
Seek
(
aPosition
)
)
CreateAndRejectBoolPromise
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aPromise
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
auto
rv
=
aValue
.
RejectValue
(
)
;
if
(
IsFileNotFoundError
(
rv
)
)
{
aPromise
-
>
MaybeRejectWithNotFoundError
(
"
File
not
found
"
)
;
return
;
}
aPromise
-
>
MaybeReject
(
rv
)
;
return
;
}
MOZ_ASSERT
(
aValue
.
IsResolve
(
)
)
;
aPromise
-
>
MaybeResolveWithUndefined
(
)
;
}
)
;
}
void
FileSystemWritableFileStream
:
:
Truncate
(
uint64_t
aSize
const
RefPtr
<
Promise
>
&
aPromise
)
{
InvokeAsync
(
mTaskQueue
__func__
[
aSize
streamOwner
=
mStreamOwner
]
(
)
mutable
{
QM_TRY
(
MOZ_TO_RESULT
(
streamOwner
-
>
Truncate
(
aSize
)
)
CreateAndRejectBoolPromise
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aPromise
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
aPromise
-
>
MaybeReject
(
aValue
.
RejectValue
(
)
)
;
return
;
}
aPromise
-
>
MaybeResolveWithUndefined
(
)
;
}
)
;
}
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
WritableFileStreamUnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
WritableFileStreamUnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
mStream
)
already_AddRefed
<
Promise
>
WritableFileStreamUnderlyingSinkAlgorithms
:
:
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
return
mStream
-
>
Write
(
aCx
aChunk
aRv
)
;
}
already_AddRefed
<
Promise
>
WritableFileStreamUnderlyingSinkAlgorithms
:
:
CloseCallbackImpl
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mStream
-
>
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
mStream
-
>
IsOpen
(
)
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
WritableFileStream
closed
"
)
;
return
promise
.
forget
(
)
;
}
mStream
-
>
BeginClose
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
promise
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
promise
-
>
MaybeResolveWithUndefined
(
)
;
return
;
}
promise
-
>
MaybeRejectWithAbortError
(
"
Internal
error
closing
file
stream
"
)
;
}
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WritableFileStreamUnderlyingSinkAlgorithms
:
:
AbortCallbackImpl
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
ErrorResult
&
aRv
)
{
return
CloseCallbackImpl
(
aCx
aRv
)
;
}
void
WritableFileStreamUnderlyingSinkAlgorithms
:
:
ReleaseObjects
(
)
{
if
(
mStream
-
>
IsOpen
(
)
)
{
Unused
<
<
mStream
-
>
BeginClose
(
)
;
}
}
}
