#
ifndef
DOM_FS_FILESYSTEMDIRECTORYHANDLE_H_
#
define
DOM_FS_FILESYSTEMDIRECTORYHANDLE_H_
#
include
"
mozilla
/
dom
/
FileSystemHandle
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
FileSystemDirectoryIterator
;
struct
FileSystemGetFileOptions
;
struct
FileSystemGetDirectoryOptions
;
struct
FileSystemRemoveOptions
;
class
FileSystemDirectoryHandle
final
:
public
FileSystemHandle
{
public
:
FileSystemDirectoryHandle
(
nsIGlobalObject
*
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
fs
:
:
FileSystemRequestHandler
*
aRequestHandler
)
;
FileSystemDirectoryHandle
(
nsIGlobalObject
*
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
FileSystemDirectoryHandle
FileSystemHandle
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
FileSystemHandleKind
Kind
(
)
const
override
;
[
[
nodiscard
]
]
already_AddRefed
<
FileSystemDirectoryIterator
>
Entries
(
)
;
[
[
nodiscard
]
]
already_AddRefed
<
FileSystemDirectoryIterator
>
Keys
(
)
;
[
[
nodiscard
]
]
already_AddRefed
<
FileSystemDirectoryIterator
>
Values
(
)
;
already_AddRefed
<
Promise
>
GetFileHandle
(
const
nsAString
&
aName
const
FileSystemGetFileOptions
&
aOptions
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
GetDirectoryHandle
(
const
nsAString
&
aName
const
FileSystemGetDirectoryOptions
&
aOptions
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
RemoveEntry
(
const
nsAString
&
aName
const
FileSystemRemoveOptions
&
aOptions
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Resolve
(
FileSystemHandle
&
aPossibleDescendant
ErrorResult
&
aError
)
;
private
:
~
FileSystemDirectoryHandle
(
)
=
default
;
}
;
}
}
#
endif
