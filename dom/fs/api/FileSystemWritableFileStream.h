#
ifndef
DOM_FS_FILESYSTEMWRITABLEFILESTREAM_H_
#
define
DOM_FS_FILESYSTEMWRITABLEFILESTREAM_H_
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
PFileSystemManager
.
h
"
#
include
"
mozilla
/
dom
/
WritableStream
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
extern
LazyLogModule
gOPFSLog
;
class
ErrorResult
;
namespace
dom
{
class
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParams
;
class
Blob
;
class
FileSystemManager
;
class
FileSystemWritableFileStreamChild
;
class
Promise
;
class
FileSystemWritableFileStream
final
:
public
WritableStream
{
public
:
static
already_AddRefed
<
FileSystemWritableFileStream
>
Create
(
nsIGlobalObject
*
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
RefPtr
<
FileSystemWritableFileStreamChild
>
aActor
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
FileSystemWritableFileStream
WritableStream
)
void
ClearActor
(
)
;
bool
IsClosed
(
)
const
;
already_AddRefed
<
Promise
>
Close
(
ErrorResult
&
aRv
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Write
(
const
ArrayBufferViewOrArrayBufferOrBlobOrUSVStringOrWriteParams
&
aData
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Seek
(
uint64_t
aPosition
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Truncate
(
uint64_t
aSize
ErrorResult
&
aError
)
;
private
:
FileSystemWritableFileStream
(
nsIGlobalObject
*
aGlobal
RefPtr
<
FileSystemManager
>
&
aManager
RefPtr
<
FileSystemWritableFileStreamChild
>
aActor
const
fs
:
:
FileSystemEntryMetadata
&
aMetadata
)
;
virtual
~
FileSystemWritableFileStream
(
)
;
nsresult
WriteBlob
(
Blob
*
aBlob
uint64_t
&
aWritten
)
;
bool
DoSeek
(
RefPtr
<
Promise
>
&
aPromise
uint64_t
aPosition
)
;
RefPtr
<
FileSystemManager
>
mManager
;
RefPtr
<
FileSystemWritableFileStreamChild
>
mActor
;
fs
:
:
FileSystemEntryMetadata
mMetadata
;
}
;
}
}
#
endif
