#
ifndef
DOM_FS_FILESYSTEMSYNCACCESSHANDLE_H_
#
define
DOM_FS_FILESYSTEMSYNCACCESSHANDLE_H_
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
struct
FileSystemReadWriteOptions
;
class
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
;
class
Promise
;
class
FileSystemSyncAccessHandle
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
FileSystemSyncAccessHandle
)
nsIGlobalObject
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint64_t
Read
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
const
FileSystemReadWriteOptions
&
aOptions
ErrorResult
&
aRv
)
;
uint64_t
Write
(
const
MaybeSharedArrayBufferViewOrMaybeSharedArrayBuffer
&
aBuffer
const
FileSystemReadWriteOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Truncate
(
uint64_t
aSize
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
GetSize
(
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Flush
(
ErrorResult
&
aError
)
;
already_AddRefed
<
Promise
>
Close
(
ErrorResult
&
aError
)
;
private
:
virtual
~
FileSystemSyncAccessHandle
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
}
;
}
}
#
endif
