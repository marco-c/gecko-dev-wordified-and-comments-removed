#
include
"
mozilla
/
dom
/
FileSystemManager
.
h
"
#
include
"
FileSystemBackgroundRequestHandler
.
h
"
#
include
"
fs
/
FileSystemRequestHandler
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundSharedTypes
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
Result
<
mozilla
:
:
ipc
:
:
PrincipalInfo
nsresult
>
GetPrincipalInfo
(
nsIGlobalObject
*
aGlobal
)
{
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIScriptObjectPrincipal
>
sop
=
do_QueryInterface
(
aGlobal
)
;
QM_TRY
(
MOZ_TO_RESULT
(
sop
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
sop
-
>
GetEffectiveStoragePrincipal
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
principal
)
)
;
PrincipalInfo
principalInfo
;
QM_TRY
(
MOZ_TO_RESULT
(
PrincipalToPrincipalInfo
(
principal
&
principalInfo
)
)
)
;
return
std
:
:
move
(
principalInfo
)
;
}
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
workerPrivate
)
)
;
const
PrincipalInfo
&
principalInfo
=
workerPrivate
-
>
GetEffectiveStoragePrincipalInfo
(
)
;
return
principalInfo
;
}
}
FileSystemManager
:
:
FileSystemManager
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
mBackgroundRequestHandler
(
new
FileSystemBackgroundRequestHandler
(
)
)
mRequestHandler
(
new
fs
:
:
FileSystemRequestHandler
(
)
)
{
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FileSystemManager
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FileSystemManager
)
;
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FileSystemManager
)
;
NS_IMPL_CYCLE_COLLECTION
(
FileSystemManager
mGlobal
)
;
already_AddRefed
<
Promise
>
FileSystemManager
:
:
GetDirectory
(
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
mGlobal
)
;
QM_TRY_INSPECT
(
const
auto
&
principalInfo
GetPrincipalInfo
(
mGlobal
)
nullptr
[
&
aRv
]
(
const
nsresult
rv
)
{
aRv
.
Throw
(
rv
)
;
}
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mGlobal
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
promise
)
;
mBackgroundRequestHandler
-
>
CreateFileSystemManagerChild
(
principalInfo
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
<
FileSystemManager
>
(
this
)
promise
]
(
const
RefPtr
<
OriginPrivateFileSystemChild
>
&
child
)
{
RefPtr
<
FileSystemActorHolder
>
actorHolder
=
MakeAndAddRef
<
FileSystemActorHolder
>
(
child
)
;
self
-
>
mRequestHandler
-
>
GetRootHandle
(
actorHolder
promise
)
;
}
[
promise
]
(
nsresult
)
{
promise
-
>
MaybeRejectWithUnknownError
(
"
Could
not
create
the
file
system
manager
"
)
;
}
)
;
return
promise
.
forget
(
)
;
}
}
