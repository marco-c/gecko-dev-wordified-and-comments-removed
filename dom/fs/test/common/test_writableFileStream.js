const
allowCreate
=
{
create
:
true
}
;
exported_symbols
.
test0
=
async
function
(
)
{
let
root
=
await
navigator
.
storage
.
getDirectory
(
)
;
Assert
.
ok
(
!
!
root
"
Can
we
access
the
root
directory
?
"
)
;
const
testFile
=
await
root
.
getFileHandle
(
"
test
.
txt
"
allowCreate
)
;
Assert
.
ok
(
!
!
testFile
"
Can
'
t
access
existing
file
"
)
;
let
writable
=
await
testFile
.
createWritable
(
)
;
Assert
.
ok
(
!
!
writable
"
Can
'
t
create
WritableFileStream
to
existing
file
"
)
;
const
encoder
=
new
TextEncoder
(
)
;
const
writeBuffer
=
encoder
.
encode
(
"
Thank
you
for
reading
this
.
"
)
;
try
{
dump
(
"
Trying
to
write
.
.
.
\
n
"
)
;
await
writable
.
write
(
writeBuffer
)
;
dump
(
"
closing
.
.
.
\
n
"
)
;
await
writable
.
close
(
)
;
}
catch
(
e
)
{
Assert
.
ok
(
false
"
Couldn
'
t
write
to
WritableFileStream
:
"
+
e
)
;
}
let
file
=
await
testFile
.
getFile
(
)
;
Assert
.
ok
(
!
!
file
"
Can
'
t
create
File
to
file
written
with
WritableFileStream
"
)
;
let
fileSize
=
file
.
size
;
Assert
.
ok
(
fileSize
=
=
writeBuffer
.
byteLength
)
;
}
;
exported_symbols
.
quotaTest
=
async
function
(
)
{
const
shrinkedStorageSizeKB
=
5
*
1024
;
const
defaultDatabaseSize
=
294912
;
await
Utils
.
shrinkStorageSize
(
shrinkedStorageSizeKB
)
;
let
root
=
await
navigator
.
storage
.
getDirectory
(
)
;
Assert
.
ok
(
root
"
Can
we
access
the
root
directory
?
"
)
;
const
fileHandle
=
await
root
.
getFileHandle
(
"
test
.
txt
"
allowCreate
)
;
Assert
.
ok
(
!
!
fileHandle
"
Can
we
get
file
handle
?
"
)
;
const
writable
=
await
fileHandle
.
createWritable
(
)
;
Assert
.
ok
(
!
!
writable
"
Can
we
create
writable
file
stream
?
"
)
;
const
buffer
=
new
ArrayBuffer
(
shrinkedStorageSizeKB
*
1024
-
defaultDatabaseSize
)
;
Assert
.
ok
(
!
!
buffer
"
Can
we
create
array
buffer
?
"
)
;
await
writable
.
write
(
buffer
)
;
const
fileHandle2
=
await
root
.
getFileHandle
(
"
test2
.
txt
"
allowCreate
)
;
Assert
.
ok
(
!
!
fileHandle2
"
Can
we
get
file
handle
?
"
)
;
const
writable2
=
await
fileHandle2
.
createWritable
(
)
;
Assert
.
ok
(
!
!
writable2
"
Can
we
create
writable
file
stream
?
"
)
;
const
buffer2
=
new
ArrayBuffer
(
1
)
;
Assert
.
ok
(
!
!
buffer2
"
Can
we
create
array
buffer
?
"
)
;
try
{
await
writable2
.
write
(
buffer2
)
;
Assert
.
ok
(
false
"
Should
have
thrown
"
)
;
}
catch
(
ex
)
{
Assert
.
ok
(
true
"
Did
throw
"
)
;
Assert
.
ok
(
DOMException
.
isInstance
(
ex
)
"
Threw
DOMException
"
)
;
Assert
.
equal
(
ex
.
name
"
QuotaExceededError
"
"
Threw
right
DOMException
"
)
;
}
await
writable
.
close
(
)
;
await
Utils
.
restoreStorageSize
(
)
;
}
;
for
(
const
[
key
value
]
of
Object
.
entries
(
exported_symbols
)
)
{
Object
.
defineProperty
(
value
"
name
"
{
value
:
key
writable
:
false
}
)
;
}
