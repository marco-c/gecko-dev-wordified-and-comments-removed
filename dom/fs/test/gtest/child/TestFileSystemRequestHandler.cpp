#
include
"
gtest
/
gtest
.
h
"
#
include
"
FileSystemMocks
.
h
"
#
include
"
fs
/
FileSystemRequestHandler
.
h
"
#
include
"
mozilla
/
dom
/
OriginPrivateFileSystemChild
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
test
{
class
TestFileSystemRequestHandler
:
public
:
:
testing
:
:
Test
{
protected
:
void
SetUp
(
)
override
{
mListener
=
MakeAndAddRef
<
ExpectNotImplemented
>
(
)
;
mRequestHandler
=
MakeUnique
<
FileSystemRequestHandler
>
(
)
;
mChild
=
FileSystemChildMetadata
(
"
parent
"
_ns
u
"
ChildName
"
_ns
)
;
mEntry
=
FileSystemEntryMetadata
(
"
myid
"
_ns
u
"
EntryName
"
_ns
)
;
mName
=
u
"
testDir
"
_ns
;
mActor
=
MakeAndAddRef
<
FileSystemActorHolder
>
(
nullptr
)
;
}
already_AddRefed
<
Promise
>
GetDefaultPromise
(
)
{
IgnoredErrorResult
rv
;
RefPtr
<
Promise
>
result
=
Promise
:
:
Create
(
mGlobal
rv
)
;
mListener
-
>
ClearDone
(
)
;
result
-
>
AppendNativeHandler
(
mListener
-
>
AsHandler
(
)
)
;
return
result
.
forget
(
)
;
}
nsIGlobalObject
*
mGlobal
=
GetGlobal
(
)
;
RefPtr
<
ExpectNotImplemented
>
mListener
;
UniquePtr
<
FileSystemRequestHandler
>
mRequestHandler
;
FileSystemChildMetadata
mChild
;
FileSystemEntryMetadata
mEntry
;
nsString
mName
;
RefPtr
<
FileSystemActorHolder
>
mActor
;
}
;
TEST_F
(
TestFileSystemRequestHandler
isGetRootSuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
mRequestHandler
-
>
GetRoot
(
promise
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
TEST_F
(
TestFileSystemRequestHandler
isGetDirectoryHandleSuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
mRequestHandler
-
>
GetDirectoryHandle
(
mActor
mChild
true
promise
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
TEST_F
(
TestFileSystemRequestHandler
isGetFileHandleSuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
mRequestHandler
-
>
GetFileHandle
(
mActor
mChild
true
promise
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
TEST_F
(
TestFileSystemRequestHandler
isGetFileSuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
mRequestHandler
-
>
GetFile
(
mActor
mEntry
promise
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
TEST_F
(
TestFileSystemRequestHandler
isGetEntriesSuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
ArrayAppendable
sink
;
mRequestHandler
-
>
GetEntries
(
mActor
mEntry
.
entryId
(
)
0
promise
sink
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
TEST_F
(
TestFileSystemRequestHandler
isRemoveEntrySuccessful
)
{
RefPtr
<
Promise
>
promise
=
GetDefaultPromise
(
)
;
mRequestHandler
-
>
RemoveEntry
(
mActor
mChild
true
promise
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
or
timeout
"
_ns
[
this
]
(
)
{
return
mListener
-
>
IsDone
(
)
;
}
)
;
}
}
