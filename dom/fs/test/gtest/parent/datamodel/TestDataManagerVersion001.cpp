#
include
"
gtest
/
gtest
.
h
"
#
include
"
TestHelpers
.
h
"
#
include
"
FileSystemDataManagerVersion001
.
h
"
#
include
"
SchemaVersion001
.
h
"
#
include
"
FileSystemFileManager
.
h
"
#
include
"
FileSystemHashSource
.
h
"
#
include
"
ResultStatement
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
dom
/
BackgroundFileSystemParent
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemTypes
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
ErrorNames
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozIStorageService
.
h
"
#
include
"
mozStorageCID
.
h
"
#
include
"
mozStorageHelper
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
test
{
using
data
:
:
FileSystemDataManagerVersion001
;
using
data
:
:
FileSystemFileManager
;
const
Origin
&
getTestOrigin
(
)
{
static
const
Origin
orig
=
"
testOrigin
"
_ns
;
return
orig
;
}
void
MakeDataManagerVersion001
(
FileSystemDataManagerVersion001
*
&
aResult
)
{
nsCOMPtr
<
nsIFile
>
testPath
;
auto
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
testPath
)
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
const
Origin
&
testOrigin
=
getTestOrigin
(
)
;
rv
=
testPath
-
>
AppendRelativeNativePath
(
testOrigin
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
rv
=
testPath
-
>
AppendRelativePath
(
u
"
filesystem
"
_ns
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
bool
exists
=
false
;
testPath
-
>
Exists
(
&
exists
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
if
(
exists
)
{
rv
=
testPath
-
>
Remove
(
true
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
}
rv
=
testPath
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
(
uint32_t
)
0644
false
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
nsCOMPtr
<
nsIFile
>
databaseFile
;
rv
=
testPath
-
>
Clone
(
getter_AddRefs
(
databaseFile
)
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
rv
=
databaseFile
-
>
AppendRelativePath
(
u
"
metadata
.
sqlite
"
_ns
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
rv
=
databaseFile
-
>
Create
(
nsIFile
:
:
NORMAL_FILE_TYPE
(
uint32_t
)
0644
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
TEST_TRY_UNWRAP
(
auto
storageService
MOZ_TO_RESULT_GET_TYPED
(
nsCOMPtr
<
mozIStorageService
>
MOZ_SELECT_OVERLOAD
(
do_GetService
)
MOZ_STORAGE_SERVICE_CONTRACTID
)
)
;
const
auto
flags
=
mozIStorageService
:
:
CONNECTION_DEFAULT
;
ResultConnection
connection
;
rv
=
storageService
-
>
OpenDatabase
(
databaseFile
flags
getter_AddRefs
(
connection
)
)
;
ASSERT_NSEQ
(
NS_OK
rv
)
;
TEST_TRY_UNWRAP
(
DatabaseVersion
version
SchemaVersion001
:
:
InitializeConnection
(
connection
testOrigin
)
)
;
ASSERT_EQ
(
1
version
)
;
aResult
=
new
FileSystemDataManagerVersion001
(
std
:
:
move
(
connection
)
)
;
}
TEST
(
TestDataManagerVersion001
smokeTestCreateRemoveDirectories
)
{
nsresult
rv
=
NS_OK
;
FileSystemDataManagerVersion001
*
rdm
=
nullptr
;
ASSERT_NO_FATAL_FAILURE
(
MakeDataManagerVersion001
(
rdm
)
)
;
UniquePtr
<
FileSystemDataManagerVersion001
>
dm
(
rdm
)
;
TEST_TRY_UNWRAP
(
EntryId
rootId
data
:
:
GetRootHandle
(
getTestOrigin
(
)
)
)
;
FileSystemChildMetadata
firstChildMeta
(
rootId
u
"
First
"
_ns
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_NOT_FOUND_ERR
rv
)
;
TEST_TRY_UNWRAP
(
EntryId
firstChild
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
true
)
)
;
int32_t
dbVersion
=
0
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
entries
dm
-
>
GetDirectoryEntries
(
rootId
dbVersion
)
)
;
ASSERT_EQ
(
1u
entries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
0u
entries
.
files
(
)
.
Length
(
)
)
;
const
auto
&
firstItemRef
=
entries
.
directories
(
)
[
0
]
;
ASSERT_TRUE
(
u
"
First
"
_ns
=
=
firstItemRef
.
entryName
(
)
)
<
<
firstItemRef
.
entryName
(
)
;
ASSERT_EQ
(
firstChild
firstItemRef
.
entryId
(
)
)
;
TEST_TRY_UNWRAP
(
EntryId
firstChildClone
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
true
)
)
;
ASSERT_EQ
(
firstChild
firstChildClone
)
;
FileSystemChildMetadata
secondChildMeta
(
firstChild
u
"
Second
"
_ns
)
;
TEST_TRY_UNWRAP
(
EntryId
secondChild
dm
-
>
GetOrCreateDirectory
(
secondChildMeta
true
)
)
;
FileSystemEntryPair
shortPair
(
firstChild
secondChild
)
;
TEST_TRY_UNWRAP
(
Path
shortPath
dm
-
>
Resolve
(
shortPair
)
)
;
ASSERT_EQ
(
1u
shortPath
.
Length
(
)
)
;
ASSERT_EQ
(
u
"
Second
"
_ns
shortPath
[
0
]
)
;
FileSystemEntryPair
longPair
(
rootId
secondChild
)
;
TEST_TRY_UNWRAP
(
Path
longPath
dm
-
>
Resolve
(
longPair
)
)
;
ASSERT_EQ
(
2u
longPath
.
Length
(
)
)
;
ASSERT_EQ
(
u
"
First
"
_ns
longPath
[
0
]
)
;
ASSERT_EQ
(
u
"
Second
"
_ns
longPath
[
1
]
)
;
FileSystemEntryPair
wrongPair
(
secondChild
rootId
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
Resolve
(
wrongPair
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_NOT_FOUND_ERR
rv
)
;
PageNumber
page
=
0
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
fEntries
dm
-
>
GetDirectoryEntries
(
firstChild
page
)
)
;
ASSERT_EQ
(
1u
fEntries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
0u
fEntries
.
files
(
)
.
Length
(
)
)
;
const
auto
&
secItemRef
=
fEntries
.
directories
(
)
[
0
]
;
ASSERT_TRUE
(
u
"
Second
"
_ns
=
=
secItemRef
.
entryName
(
)
)
<
<
secItemRef
.
entryName
(
)
;
ASSERT_EQ
(
secondChild
secItemRef
.
entryId
(
)
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
RemoveDirectory
(
firstChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_FILEHANDLE_NOT_ALLOWED_ERR
rv
)
;
TEST_TRY_UNWRAP
(
bool
isDeleted
dm
-
>
RemoveDirectory
(
firstChildMeta
true
)
)
;
ASSERT_TRUE
(
isDeleted
)
;
FileSystemChildMetadata
thirdChildMeta
(
secondChild
u
"
Second
"
_ns
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
thirdChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
}
TEST
(
TestDataManagerVersion001
smokeTestCreateRemoveFiles
)
{
nsresult
rv
=
NS_OK
;
FileSystemDataManagerVersion001
*
rdm
=
nullptr
;
ASSERT_NO_FATAL_FAILURE
(
MakeDataManagerVersion001
(
rdm
)
)
;
UniquePtr
<
FileSystemDataManagerVersion001
>
dm
(
rdm
)
;
TEST_TRY_UNWRAP
(
EntryId
rootId
data
:
:
GetRootHandle
(
getTestOrigin
(
)
)
)
;
FileSystemChildMetadata
firstChildMeta
(
rootId
u
"
First
"
_ns
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
firstChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_NOT_FOUND_ERR
rv
)
;
TEST_TRY_UNWRAP
(
EntryId
firstChild
dm
-
>
GetOrCreateFile
(
firstChildMeta
true
)
)
;
TEST_TRY_UNWRAP
(
EntryId
firstChildClone
dm
-
>
GetOrCreateFile
(
firstChildMeta
true
)
)
;
ASSERT_STREQ
(
firstChild
.
get
(
)
firstChildClone
.
get
(
)
)
;
PageNumber
page
=
0
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
entries
dm
-
>
GetDirectoryEntries
(
rootId
page
)
)
;
ASSERT_EQ
(
0u
entries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
1u
entries
.
files
(
)
.
Length
(
)
)
;
const
auto
&
firstItemRef
=
entries
.
files
(
)
[
0
]
;
ASSERT_TRUE
(
u
"
First
"
_ns
=
=
firstItemRef
.
entryName
(
)
)
<
<
firstItemRef
.
entryName
(
)
;
ASSERT_STREQ
(
firstChild
.
get
(
)
firstItemRef
.
entryId
(
)
.
get
(
)
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
EntryId
notAChildHash
=
"
0123456789abcdef0123456789abcdef
"
_ns
;
FileSystemChildMetadata
notAChildMeta
(
notAChildHash
u
"
Dummy
"
_ns
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
notAChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
FileSystemChildMetadata
secondChildMeta
(
rootId
u
"
Second
"
_ns
)
;
TEST_TRY_UNWRAP
(
EntryId
secondChild
dm
-
>
GetOrCreateDirectory
(
secondChildMeta
true
)
)
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
fEntries
dm
-
>
GetDirectoryEntries
(
rootId
page
)
)
;
ASSERT_EQ
(
1u
fEntries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
1u
fEntries
.
files
(
)
.
Length
(
)
)
;
const
auto
&
secItemRef
=
fEntries
.
directories
(
)
[
0
]
;
ASSERT_TRUE
(
u
"
Second
"
_ns
=
=
secItemRef
.
entryName
(
)
)
<
<
secItemRef
.
entryName
(
)
;
ASSERT_EQ
(
secondChild
secItemRef
.
entryId
(
)
)
;
FileSystemChildMetadata
thirdChildMeta
(
secondChild
u
"
Third
"
_ns
)
;
TEST_TRY_UNWRAP
(
EntryId
thirdChild
dm
-
>
GetOrCreateFile
(
thirdChildMeta
true
)
)
;
FileSystemEntryPair
entryPair
(
rootId
thirdChild
)
;
TEST_TRY_UNWRAP
(
Path
entryPath
dm
-
>
Resolve
(
entryPair
)
)
;
ASSERT_EQ
(
2u
entryPath
.
Length
(
)
)
;
ASSERT_EQ
(
u
"
Second
"
_ns
entryPath
[
0
]
)
;
ASSERT_EQ
(
u
"
Third
"
_ns
entryPath
[
1
]
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
RemoveDirectory
(
secondChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_FILEHANDLE_NOT_ALLOWED_ERR
rv
)
;
TEST_TRY_UNWRAP
(
bool
isDeleted
dm
-
>
RemoveDirectory
(
secondChildMeta
true
)
)
;
ASSERT_TRUE
(
isDeleted
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
thirdChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
nEntries
dm
-
>
GetDirectoryEntries
(
rootId
0
)
)
;
ASSERT_EQ
(
0u
nEntries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
1u
nEntries
.
files
(
)
.
Length
(
)
)
;
const
auto
&
fileItemRef
=
nEntries
.
files
(
)
[
0
]
;
ASSERT_TRUE
(
u
"
First
"
_ns
=
=
fileItemRef
.
entryName
(
)
)
<
<
fileItemRef
.
entryName
(
)
;
ASSERT_EQ
(
firstChild
fileItemRef
.
entryId
(
)
)
;
FileSystemChildMetadata
rootChildMeta
(
getTestOrigin
(
)
u
"
root
"
_ns
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
RemoveDirectory
(
rootChildMeta
false
)
)
;
ASSERT_NSEQ
(
NS_ERROR_DOM_FILEHANDLE_NOT_ALLOWED_ERR
rv
)
;
TEST_TRY_UNWRAP
(
isDeleted
dm
-
>
RemoveDirectory
(
rootChildMeta
true
)
)
;
ASSERT_TRUE
(
isDeleted
)
;
TEST_TRY_UNWRAP
(
FileSystemDirectoryListing
rEntries
dm
-
>
GetDirectoryEntries
(
rootId
0
)
)
;
ASSERT_EQ
(
0u
rEntries
.
directories
(
)
.
Length
(
)
)
;
ASSERT_EQ
(
0u
rEntries
.
files
(
)
.
Length
(
)
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
firstChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
notAChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
firstChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
notAChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateFile
(
rootChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
TEST_TRY_UNWRAP_ERR
(
rv
dm
-
>
GetOrCreateDirectory
(
rootChildMeta
true
)
)
;
ASSERT_NSEQ
(
NS_ERROR_STORAGE_CONSTRAINT
rv
)
;
}
}
