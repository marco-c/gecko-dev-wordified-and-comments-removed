#
include
"
FileSystemParentTest
.
h
"
#
include
"
FileSystemParentTestHelpers
.
h
"
#
include
"
FileSystemParentTypes
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemQuotaClient
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemQuotaClientFactory
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
UsageInfo
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsIPrefService
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
test
{
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
Expectation
;
using
:
:
testing
:
:
Sequence
;
namespace
{
class
MockFileSystemQuotaClient
:
public
FileSystemQuotaClient
{
public
:
MOCK_METHOD
(
(
Result
<
quota
:
:
UsageInfo
nsresult
>
)
InitOrigin
(
quota
:
:
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
const
AtomicBool
&
aCanceled
)
(
override
)
)
;
MOCK_METHOD
(
(
Result
<
quota
:
:
UsageInfo
nsresult
>
)
GetUsageForOrigin
(
quota
:
:
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
const
AtomicBool
&
aCanceled
)
(
override
)
)
;
void
DelegateToBase
(
)
{
bool
dummy
;
ON_CALL
(
*
this
InitOrigin
)
.
WillByDefault
(
[
&
dummy
this
]
(
quota
:
:
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
const
Atomic
<
bool
>
&
aCanceled
)
{
(
void
)
dummy
;
return
FileSystemQuotaClient
:
:
InitOrigin
(
aPersistenceType
aOriginMetadata
aCanceled
)
;
}
)
;
ON_CALL
(
*
this
GetUsageForOrigin
)
.
WillByDefault
(
[
&
dummy
this
]
(
quota
:
:
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
const
Atomic
<
bool
>
&
aCanceled
)
{
(
void
)
dummy
;
return
FileSystemQuotaClient
:
:
GetUsageForOrigin
(
aPersistenceType
aOriginMetadata
aCanceled
)
;
}
)
;
}
}
;
class
TestFileSystemQuotaClientFactory
final
:
public
FileSystemQuotaClientFactory
{
public
:
already_AddRefed
<
MockFileSystemQuotaClient
>
GetQuotaClient
(
)
{
return
do_AddRef
(
mQuotaClient
)
;
}
protected
:
already_AddRefed
<
quota
:
:
Client
>
AllocQuotaClient
(
)
override
{
mQuotaClient
=
MakeRefPtr
<
MockFileSystemQuotaClient
>
(
)
;
mQuotaClient
-
>
DelegateToBase
(
)
;
return
do_AddRef
(
mQuotaClient
)
;
}
RefPtr
<
MockFileSystemQuotaClient
>
mQuotaClient
;
}
;
}
class
TestFileSystemOriginInitialization
:
public
FileSystemParentTest
{
protected
:
static
void
SetUpTestCase
(
)
{
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
prefs
-
>
SetBoolPref
(
"
dom
.
quotaManager
.
loadQuotaFromCache
"
false
)
;
auto
factory
=
MakeRefPtr
<
TestFileSystemQuotaClientFactory
>
(
)
;
FileSystemQuotaClientFactory
:
:
SetCustomFactory
(
factory
)
;
ASSERT_NO_FATAL_FAILURE
(
FileSystemParentTest
:
:
SetUpTestCase
(
)
)
;
sQuotaClient
=
factory
-
>
GetQuotaClient
(
)
;
}
static
void
TearDownTestCase
(
)
{
sQuotaClient
=
nullptr
;
ASSERT_NO_FATAL_FAILURE
(
FileSystemParentTest
:
:
TearDownTestCase
(
)
)
;
FileSystemQuotaClientFactory
:
:
SetCustomFactory
(
nullptr
)
;
}
MOZ_RUNINIT
static
inline
RefPtr
<
MockFileSystemQuotaClient
>
sQuotaClient
;
}
;
TEST_F
(
TestFileSystemOriginInitialization
EmptyOriginDirectory
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
Times
(
0
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
Times
(
0
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
InitializeStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryOrigin
(
true
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
AssertTemporaryStorageNotInitialized
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
EmptyFileSystemDirectory
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
Times
(
0
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
Times
(
0
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
InitializeStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryOrigin
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryClient
(
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
EmptyFileSystemDatabase
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
beforeShutdownUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ReleaseDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
EmptyFileSystemFile
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
beforeShutdownUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ReleaseDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
NonEmptyFileSystemFile
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
ASSERT_NO_FATAL_FAILURE
(
LockExclusive
(
testFileId
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
testFileId
testData
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
beforeShutdownUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
UnlockExclusive
(
testFileId
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ReleaseDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
NonEmptyFileSystemFile_UncleanShutdown
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
beforeWriteUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeWriteUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeWriteUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
LockExclusive
(
testFileId
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
testFileId
testData
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
beforeWriteUsage
)
)
;
uint64_t
beforeShutdownUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ReleaseDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetStaticDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeWriteUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetStaticDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
}
TEST_F
(
TestFileSystemOriginInitialization
RemovedFileSystemFile
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
{
Sequence
s
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
InitOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
EXPECT_CALL
(
*
sQuotaClient
GetUsageForOrigin
(
_
_
_
)
)
.
InSequence
(
s
)
;
}
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
ASSERT_NO_FATAL_FAILURE
(
LockExclusive
(
testFileId
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
testFileId
testData
)
)
;
ASSERT_NO_FATAL_FAILURE
(
UnlockExclusive
(
testFileId
)
)
;
bool
wasRemoved
;
ASSERT_NO_FATAL_FAILURE
(
RemoveFile
(
wasRemoved
)
)
;
ASSERT_TRUE
(
wasRemoved
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
beforeShutdownUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ReleaseDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
0u
)
)
;
ASSERT_NO_FATAL_FAILURE
(
InitializeTemporaryStorage
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetCachedOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
beforeShutdownUsage
)
)
;
}
}
