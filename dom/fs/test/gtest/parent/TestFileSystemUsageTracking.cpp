#
include
"
FileSystemParentTestHelpers
.
h
"
#
include
"
FileSystemParentTypes
.
h
"
#
include
"
TestHelpers
.
h
"
#
include
"
datamodel
/
FileSystemDataManager
.
h
"
#
include
"
datamodel
/
FileSystemDatabaseManager
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemQuotaClientFactory
.
h
"
#
include
"
mozilla
/
dom
/
PFileSystemManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Client
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
UsageInfo
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
test
/
QuotaManagerDependencyFixture
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
test
{
class
TestFileSystemUsageTracking
:
public
quota
:
:
test
:
:
QuotaManagerDependencyFixture
{
protected
:
static
void
SetUpTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
InitializeFixture
(
)
)
;
}
static
void
TearDownTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownFixture
(
)
)
;
}
void
TearDown
(
)
override
{
ASSERT_NO_FATAL_FAILURE
(
ClearStoragesForOrigin
(
GetTestOriginMetadata
(
)
)
)
;
}
}
;
TEST_F
(
TestFileSystemUsageTracking
CheckUsageBeforeAnyFilesOnDisk
)
{
auto
backgroundTask
=
[
]
(
)
{
mozilla
:
:
Atomic
<
bool
>
isCanceled
{
false
}
;
auto
ioTask
=
[
&
isCanceled
]
(
const
RefPtr
<
quota
:
:
Client
>
&
quotaClient
data
:
:
FileSystemDatabaseManager
*
dbm
)
{
ASSERT_FALSE
(
isCanceled
)
;
const
quota
:
:
OriginMetadata
&
testOriginMeta
=
GetTestOriginMetadata
(
)
;
const
Origin
&
testOrigin
=
testOriginMeta
.
mOrigin
;
TEST_TRY_UNWRAP
(
quota
:
:
UsageInfo
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
const
auto
initialDbUsage
=
usageNow
.
DatabaseUsage
(
)
.
value
(
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
TEST_TRY_UNWRAP
(
const
EntryId
rootId
data
:
:
GetRootHandle
(
testOrigin
)
)
;
FileSystemChildMetadata
fileData
(
rootId
GetTestFileName
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
dbm
fileData
testFileId
)
)
;
const
auto
expectedUse
=
initialDbUsage
+
2
*
GetPageSize
(
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
expectedUse
)
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
expectedUse
)
)
;
}
;
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
quotaClient
=
fs
:
:
CreateQuotaClient
(
)
;
ASSERT_TRUE
(
quotaClient
)
;
auto
checkTask
=
[
&
isCanceled
]
(
const
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
&
quotaClient
)
{
TEST_TRY_UNWRAP
(
quota
:
:
UsageInfo
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
GetTestOriginMetadata
(
)
isCanceled
)
)
;
ASSERT_TRUE
(
usageNow
.
DatabaseUsage
(
)
.
isNothing
(
)
)
;
EXPECT_TRUE
(
usageNow
.
FileUsage
(
)
.
isNothing
(
)
)
;
}
;
PerformOnIOThread
(
std
:
:
move
(
checkTask
)
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
{
quotaClient
}
)
;
Registered
<
data
:
:
FileSystemDataManager
>
rdm
;
ASSERT_NO_FATAL_FAILURE
(
CreateRegisteredDataManager
(
GetTestOriginMetadata
(
)
rdm
)
)
;
PerformOnIOThread
(
std
:
:
move
(
ioTask
)
std
:
:
move
(
quotaClient
)
rdm
-
>
MutableDatabaseManagerPtr
(
)
)
;
}
;
PerformOnBackgroundThread
(
std
:
:
move
(
backgroundTask
)
)
;
}
TEST_F
(
TestFileSystemUsageTracking
WritesToFilesShouldIncreaseUsage
)
{
auto
backgroundTask
=
[
]
(
)
{
mozilla
:
:
Atomic
<
bool
>
isCanceled
{
false
}
;
auto
ioTask
=
[
&
isCanceled
]
(
const
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
&
quotaClient
data
:
:
FileSystemDatabaseManager
*
dbm
)
{
const
quota
:
:
OriginMetadata
&
testOriginMeta
=
GetTestOriginMetadata
(
)
;
const
Origin
&
testOrigin
=
testOriginMeta
.
mOrigin
;
TEST_TRY_UNWRAP
(
const
EntryId
rootId
data
:
:
GetRootHandle
(
testOrigin
)
)
;
FileSystemChildMetadata
fileData
(
rootId
GetTestFileName
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
dbm
fileData
testFileId
)
)
;
TEST_TRY_UNWRAP
(
quota
:
:
UsageInfo
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_TRUE
(
usageNow
.
DatabaseUsage
(
)
.
isSome
(
)
)
;
const
auto
testFileDbUsage
=
usageNow
.
DatabaseUsage
(
)
.
value
(
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
testFileDbUsage
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
GetTestOriginMetadata
(
)
dbm
testFileId
testData
)
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
testFileDbUsage
)
)
;
ASSERT_NSEQ
(
NS_OK
dbm
-
>
UpdateUsage
(
FileId
(
testFileId
)
)
)
;
const
auto
expectedTotalUsage
=
testFileDbUsage
+
testData
.
Length
(
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
expectedTotalUsage
)
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
expectedTotalUsage
)
)
;
}
;
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
quotaClient
=
fs
:
:
CreateQuotaClient
(
)
;
ASSERT_TRUE
(
quotaClient
)
;
Registered
<
data
:
:
FileSystemDataManager
>
rdm
;
ASSERT_NO_FATAL_FAILURE
(
CreateRegisteredDataManager
(
GetTestOriginMetadata
(
)
rdm
)
)
;
PerformOnIOThread
(
std
:
:
move
(
ioTask
)
std
:
:
move
(
quotaClient
)
rdm
-
>
MutableDatabaseManagerPtr
(
)
)
;
}
;
PerformOnBackgroundThread
(
std
:
:
move
(
backgroundTask
)
)
;
}
TEST_F
(
TestFileSystemUsageTracking
RemovingFileShouldDecreaseUsage
)
{
auto
backgroundTask
=
[
]
(
)
{
mozilla
:
:
Atomic
<
bool
>
isCanceled
{
false
}
;
auto
ioTask
=
[
&
isCanceled
]
(
const
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
&
quotaClient
data
:
:
FileSystemDatabaseManager
*
dbm
)
{
const
quota
:
:
OriginMetadata
&
testOriginMeta
=
GetTestOriginMetadata
(
)
;
const
Origin
&
testOrigin
=
testOriginMeta
.
mOrigin
;
TEST_TRY_UNWRAP
(
const
EntryId
rootId
data
:
:
GetRootHandle
(
testOrigin
)
)
;
FileSystemChildMetadata
fileData
(
rootId
GetTestFileName
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
dbm
fileData
testFileId
)
)
;
TEST_TRY_UNWRAP
(
quota
:
:
UsageInfo
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_TRUE
(
usageNow
.
DatabaseUsage
(
)
.
isSome
(
)
)
;
const
auto
testFileDbUsage
=
usageNow
.
DatabaseUsage
(
)
.
value
(
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
const
auto
expectedTotalUsage
=
testFileDbUsage
+
testData
.
Length
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
GetTestOriginMetadata
(
)
dbm
testFileId
testData
)
)
;
ASSERT_NSEQ
(
NS_OK
dbm
-
>
UpdateUsage
(
FileId
(
testFileId
)
)
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
expectedTotalUsage
)
)
;
TEST_TRY_UNWRAP
(
bool
wasRemoved
dbm
-
>
RemoveFile
(
{
rootId
GetTestFileName
(
)
}
)
)
;
ASSERT_TRUE
(
wasRemoved
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
InitOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
testFileDbUsage
)
)
;
TEST_TRY_UNWRAP
(
usageNow
quotaClient
-
>
GetUsageForOrigin
(
quota
:
:
PERSISTENCE_TYPE_DEFAULT
testOriginMeta
isCanceled
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
testFileDbUsage
)
)
;
}
;
RefPtr
<
mozilla
:
:
dom
:
:
quota
:
:
Client
>
quotaClient
=
fs
:
:
CreateQuotaClient
(
)
;
ASSERT_TRUE
(
quotaClient
)
;
Registered
<
data
:
:
FileSystemDataManager
>
rdm
;
ASSERT_NO_FATAL_FAILURE
(
CreateRegisteredDataManager
(
GetTestOriginMetadata
(
)
rdm
)
)
;
PerformOnIOThread
(
std
:
:
move
(
ioTask
)
std
:
:
move
(
quotaClient
)
rdm
-
>
MutableDatabaseManagerPtr
(
)
)
;
}
;
PerformOnBackgroundThread
(
std
:
:
move
(
backgroundTask
)
)
;
}
}
