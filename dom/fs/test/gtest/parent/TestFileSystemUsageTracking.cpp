#
include
"
FileSystemParentTest
.
h
"
#
include
"
FileSystemParentTestHelpers
.
h
"
#
include
"
FileSystemParentTypes
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
UsageInfo
.
h
"
namespace
mozilla
:
:
dom
:
:
fs
:
:
test
{
class
TestFileSystemUsageTracking
:
public
FileSystemParentTest
{
}
;
TEST_F
(
TestFileSystemUsageTracking
CheckUsageBeforeAnyFilesOnDisk
)
{
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageIsNothing
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
initialDbUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
const
auto
increasedDbUsage
=
initialDbUsage
+
2
*
GetPageSize
(
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
}
TEST_F
(
TestFileSystemUsageTracking
WritesToFilesShouldIncreaseUsage
)
{
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
initialDbUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
LockExclusive
(
testFileId
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
testFileId
testData
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
const
auto
increasedDbUsage
=
initialDbUsage
+
testData
.
Length
(
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
UnlockExclusive
(
testFileId
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
}
TEST_F
(
TestFileSystemUsageTracking
RemovingFileShouldDecreaseUsage
)
{
ASSERT_NO_FATAL_FAILURE
(
EnsureDataManager
(
)
)
;
EntryId
testFileId
;
ASSERT_NO_FATAL_FAILURE
(
CreateNewEmptyFile
(
testFileId
)
)
;
quota
:
:
UsageInfo
usageNow
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageGreaterThan
(
usageNow
0u
)
)
;
uint64_t
initialDbUsage
;
ASSERT_NO_FATAL_FAILURE
(
GetUsageValue
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
LockExclusive
(
testFileId
)
)
;
const
nsCString
&
testData
=
GetTestData
(
)
;
ASSERT_NO_FATAL_FAILURE
(
WriteDataToFile
(
testFileId
testData
)
)
;
ASSERT_NO_FATAL_FAILURE
(
UnlockExclusive
(
testFileId
)
)
;
const
auto
increasedDbUsage
=
initialDbUsage
+
testData
.
Length
(
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
increasedDbUsage
)
)
;
bool
wasRemoved
;
ASSERT_NO_FATAL_FAILURE
(
RemoveFile
(
wasRemoved
)
)
;
ASSERT_TRUE
(
wasRemoved
)
;
ASSERT_NO_FATAL_FAILURE
(
GetDatabaseUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetOriginUsage
(
usageNow
)
)
;
ASSERT_NO_FATAL_FAILURE
(
CheckUsageEqualTo
(
usageNow
initialDbUsage
)
)
;
}
}
