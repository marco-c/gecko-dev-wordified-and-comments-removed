#
include
"
WebGLExtensions
.
h
"
#
include
"
mozilla
/
dom
/
WebGLRenderingContextBinding
.
h
"
#
include
"
WebGLContext
.
h
"
#
include
"
WebGLContextUtils
.
h
"
namespace
mozilla
{
WebGLExtensionDebugGet
:
:
WebGLExtensionDebugGet
(
WebGLContext
*
webgl
)
:
WebGLExtensionBase
(
webgl
)
{
}
WebGLExtensionDebugGet
:
:
~
WebGLExtensionDebugGet
(
)
{
}
void
WebGLExtensionDebugGet
:
:
GetParameter
(
JSContext
*
cx
GLenum
pname
JS
:
:
MutableHandle
<
JS
:
:
Value
>
retval
ErrorResult
&
er
)
const
{
const
auto
&
gl
=
mContext
-
>
gl
;
gl
-
>
MakeCurrent
(
)
;
switch
(
pname
)
{
case
LOCAL_GL_EXTENSIONS
:
{
nsString
ret
;
if
(
!
gl
-
>
IsCoreProfile
(
)
)
{
const
auto
rawExts
=
(
const
char
*
)
gl
-
>
fGetString
(
LOCAL_GL_EXTENSIONS
)
;
ret
=
NS_ConvertUTF8toUTF16
(
rawExts
)
;
}
else
{
const
auto
&
numExts
=
gl
-
>
GetIntAs
<
GLuint
>
(
LOCAL_GL_NUM_EXTENSIONS
)
;
for
(
GLuint
i
=
0
;
i
<
numExts
;
i
+
+
)
{
const
auto
rawExt
=
(
const
char
*
)
gl
-
>
fGetStringi
(
LOCAL_GL_EXTENSIONS
i
)
;
if
(
i
>
0
)
{
ret
.
AppendLiteral
(
"
"
)
;
}
ret
.
Append
(
NS_ConvertUTF8toUTF16
(
rawExt
)
)
;
}
}
retval
.
set
(
StringValue
(
cx
ret
er
)
)
;
return
;
}
case
LOCAL_GL_RENDERER
:
case
LOCAL_GL_VENDOR
:
case
LOCAL_GL_VERSION
:
{
const
auto
raw
=
(
const
char
*
)
gl
-
>
fGetString
(
pname
)
;
retval
.
set
(
StringValue
(
cx
NS_ConvertUTF8toUTF16
(
raw
)
er
)
)
;
return
;
}
case
0x10000
:
{
nsCString
info
;
gl
-
>
GetWSIInfo
(
&
info
)
;
retval
.
set
(
StringValue
(
cx
NS_ConvertUTF8toUTF16
(
info
)
er
)
)
;
return
;
}
default
:
mContext
-
>
ErrorInvalidEnumArg
(
"
MOZ_debug_get
.
getParameter
"
"
pname
"
pname
)
;
retval
.
set
(
JS
:
:
NullValue
(
)
)
;
return
;
}
}
IMPL_WEBGL_EXTENSION_GOOP
(
WebGLExtensionDebugGet
MOZ_debug_get
)
}
