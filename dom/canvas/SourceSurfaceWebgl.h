#
ifndef
MOZILLA_GFX_SOURCESURFACEWEBGL_H_
#
define
MOZILLA_GFX_SOURCESURFACEWEBGL_H_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
:
:
gfx
{
class
DrawTargetWebgl
;
class
TextureHandle
;
class
SourceSurfaceWebgl
:
public
DataSourceSurface
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
SourceSurfaceWebgl
override
)
explicit
SourceSurfaceWebgl
(
DrawTargetWebgl
*
aDT
)
;
virtual
~
SourceSurfaceWebgl
(
)
;
SurfaceType
GetType
(
)
const
override
{
return
SurfaceType
:
:
WEBGL
;
}
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
uint8_t
*
GetData
(
)
override
;
int32_t
Stride
(
)
override
;
bool
Map
(
MapType
aType
MappedSurface
*
aMappedSurface
)
override
;
void
Unmap
(
)
override
;
bool
HasReadData
(
)
const
{
return
!
!
mData
;
}
private
:
friend
class
DrawTargetWebgl
;
bool
EnsureData
(
)
;
void
DrawTargetWillChange
(
bool
aNeedHandle
)
;
void
GiveTexture
(
RefPtr
<
TextureHandle
>
aHandle
)
;
void
OnUnlinkTexture
(
typename
DrawTargetWebgl
:
:
SharedContext
*
aContext
)
;
DrawTargetWebgl
*
GetTarget
(
)
const
{
return
mDT
.
get
(
)
;
}
SurfaceFormat
mFormat
=
SurfaceFormat
:
:
UNKNOWN
;
IntSize
mSize
;
RefPtr
<
DataSourceSurface
>
mData
;
WeakPtr
<
DrawTargetWebgl
>
mDT
;
WeakPtr
<
typename
DrawTargetWebgl
:
:
SharedContext
>
mSharedContext
;
RefPtr
<
TextureHandle
>
mHandle
;
}
;
}
#
endif
