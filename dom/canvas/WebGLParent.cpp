#
include
"
WebGLParent
.
h
"
#
include
"
WebGLChild
.
h
"
#
include
"
mozilla
/
dom
/
WebGLCrossProcessCommandQueue
.
h
"
#
include
"
mozilla
/
layers
/
LayerTransactionParent
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientSharedSurface
.
h
"
#
include
"
HostWebGLContext
.
h
"
namespace
mozilla
{
namespace
dom
{
mozilla
:
:
ipc
:
:
IPCResult
WebGLParent
:
:
RecvInitialize
(
const
webgl
:
:
InitContextDesc
&
desc
UniquePtr
<
HostWebGLCommandSinkP
>
&
&
aSinkP
UniquePtr
<
HostWebGLCommandSinkI
>
&
&
aSinkI
webgl
:
:
InitContextResult
*
const
out
)
{
auto
remotingData
=
Some
(
HostWebGLContext
:
:
RemotingData
{
*
this
{
}
}
)
;
mHost
=
HostWebGLContext
:
:
Create
(
{
{
}
std
:
:
move
(
remotingData
)
}
desc
out
)
;
if
(
!
mHost
)
{
return
IPC_FAIL
(
this
"
Failed
to
create
HostWebGLContext
"
)
;
}
if
(
!
BeginCommandQueueDrain
(
)
)
{
return
IPC_FAIL
(
this
"
Failed
to
start
WebGL
command
queue
drain
"
)
;
}
return
IPC_OK
(
)
;
}
WebGLParent
:
:
WebGLParent
(
)
=
default
;
WebGLParent
:
:
~
WebGLParent
(
)
=
default
;
bool
WebGLParent
:
:
BeginCommandQueueDrain
(
)
{
if
(
mRunCommandsRunnable
)
{
return
true
;
}
WeakPtr
<
WebGLParent
>
weakThis
=
this
;
mRunCommandsRunnable
=
NS_NewRunnableFunction
(
"
RunWebGLCommands
"
[
weakThis
]
(
)
{
MaybeRunCommandQueue
(
weakThis
)
;
}
)
;
if
(
!
mRunCommandsRunnable
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Failed
to
create
RunWebGLCommands
Runnable
"
)
;
return
false
;
}
return
RunCommandQueue
(
)
;
}
bool
WebGLParent
:
:
MaybeRunCommandQueue
(
const
WeakPtr
<
WebGLParent
>
&
weakWebGLParent
)
{
if
(
weakWebGLParent
)
{
return
weakWebGLParent
-
>
RunCommandQueue
(
)
;
}
return
true
;
}
bool
WebGLParent
:
:
RunCommandQueue
(
)
{
if
(
!
mRunCommandsRunnable
)
{
return
true
;
}
MOZ_CRASH
(
"
todo
"
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebGLParent
:
:
Recv__delete__
(
)
{
mHost
=
nullptr
;
return
IPC_OK
(
)
;
}
void
WebGLParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mHost
=
nullptr
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebGLParent
:
:
RecvUpdateCompositableHandle
(
layers
:
:
PLayerTransactionParent
*
aLayerTransaction
const
CompositableHandle
&
aHandle
)
{
auto
layerTrans
=
static_cast
<
layers
:
:
LayerTransactionParent
*
>
(
aLayerTransaction
)
;
RefPtr
<
layers
:
:
CompositableHost
>
compositableHost
(
layerTrans
-
>
FindCompositable
(
aHandle
)
)
;
if
(
!
compositableHost
)
{
return
IPC_FAIL
(
this
"
Failed
to
find
CompositableHost
for
WebGL
instance
"
)
;
}
mHost
-
>
SetCompositableHost
(
compositableHost
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
layers
:
:
SharedSurfaceTextureClient
>
WebGLParent
:
:
GetVRFrame
(
webgl
:
:
ObjectId
id
)
{
if
(
!
mHost
)
{
return
nullptr
;
}
return
mHost
-
>
GetVRFrame
(
id
)
;
}
}
}
