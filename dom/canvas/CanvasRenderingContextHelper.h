#
ifndef
MOZILLA_DOM_CANVASRENDERINGCONTEXTHELPER_H_
#
define
MOZILLA_DOM_CANVASRENDERINGCONTEXTHELPER_H_
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsSize
.
h
"
class
nsICanvasRenderingContextInternal
;
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
FileCallback
;
enum
class
CanvasContextType
:
uint8_t
{
NoContext
Canvas2D
WebGL1
WebGL2
}
;
class
CanvasRenderingContextHelper
{
public
:
virtual
already_AddRefed
<
nsISupports
>
GetContext
(
JSContext
*
aCx
const
nsAString
&
aContextId
JS
:
:
Handle
<
JS
:
:
Value
>
aContextOptions
ErrorResult
&
aRv
)
;
virtual
bool
GetOpaqueAttr
(
)
=
0
;
protected
:
virtual
nsresult
UpdateContext
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aNewContextOptions
ErrorResult
&
aRvForDictionaryInit
)
;
virtual
nsresult
ParseParams
(
JSContext
*
aCx
const
nsAString
&
aType
const
JS
:
:
Value
&
aEncoderOptions
nsAString
&
outParams
bool
*
const
outCustomParseOptions
)
;
void
ToBlob
(
JSContext
*
aCx
nsIGlobalObject
*
global
FileCallback
&
aCallback
const
nsAString
&
aType
JS
:
:
Handle
<
JS
:
:
Value
>
aParams
ErrorResult
&
aRv
)
;
virtual
already_AddRefed
<
nsICanvasRenderingContextInternal
>
CreateContext
(
CanvasContextType
aContextType
)
;
virtual
nsIntSize
GetWidthHeight
(
)
=
0
;
CanvasContextType
mCurrentContextType
;
nsCOMPtr
<
nsICanvasRenderingContextInternal
>
mCurrentContext
;
}
;
}
}
#
endif
