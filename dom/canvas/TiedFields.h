#
ifndef
DOM_CANVAS_TIED_FIELDS_H
#
define
DOM_CANVAS_TIED_FIELDS_H
#
include
"
TupleUtils
.
h
"
namespace
mozilla
{
template
<
class
T
>
constexpr
auto
TiedFields
(
T
&
t
)
{
const
auto
fields
=
t
.
MutTiedFields
(
)
;
return
fields
;
}
template
<
class
T
class
.
.
.
Args
class
Tup
=
std
:
:
tuple
<
Args
&
.
.
.
>
>
constexpr
auto
TiedFields
(
const
T
&
t
)
{
const
auto
mutFields
=
TiedFields
(
const_cast
<
T
&
>
(
t
)
)
;
return
ToTupleOfConstRefs
(
mutFields
)
;
}
template
<
class
T
>
constexpr
bool
AreAllBytesTiedFields
(
)
{
using
fieldsT
=
decltype
(
TiedFields
(
std
:
:
declval
<
T
>
(
)
)
)
;
const
auto
fields_size_sum
=
SizeofTupleArgs
<
fieldsT
>
:
:
value
;
const
auto
t_size
=
sizeof
(
T
)
;
return
fields_size_sum
=
=
t_size
;
}
template
<
class
T
>
struct
Padding
{
T
ignored
;
friend
constexpr
bool
operator
=
=
(
const
Padding
&
const
Padding
&
)
{
return
true
;
}
friend
constexpr
bool
operator
<
(
const
Padding
&
const
Padding
&
)
{
return
false
;
}
}
;
static_assert
(
sizeof
(
Padding
<
bool
>
)
=
=
1
)
;
static_assert
(
sizeof
(
Padding
<
bool
[
2
]
>
)
=
=
2
)
;
static_assert
(
sizeof
(
Padding
<
int
>
)
=
=
4
)
;
namespace
TiedFieldsExamples
{
struct
Cat
{
int
i
;
bool
b
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
i
b
)
;
}
}
;
static_assert
(
sizeof
(
Cat
)
=
=
8
)
;
static_assert
(
!
AreAllBytesTiedFields
<
Cat
>
(
)
)
;
struct
Dog
{
bool
b
;
int
i
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
i
b
)
;
}
}
;
static_assert
(
sizeof
(
Dog
)
=
=
8
)
;
static_assert
(
!
AreAllBytesTiedFields
<
Dog
>
(
)
)
;
struct
Fish
{
bool
b
;
bool
padding
[
3
]
;
int
i
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
i
b
padding
)
;
}
}
;
static_assert
(
sizeof
(
Fish
)
=
=
8
)
;
static_assert
(
AreAllBytesTiedFields
<
Fish
>
(
)
)
;
struct
Eel
{
bool
b
;
Padding
<
bool
>
padding
[
3
]
;
int
i
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
i
b
padding
)
;
}
}
;
static_assert
(
sizeof
(
Eel
)
=
=
8
)
;
static_assert
(
AreAllBytesTiedFields
<
Eel
>
(
)
)
;
#
ifdef
LETS_USE_BIT_FIELDS
#
undef
LETS_USE_BIT_FIELDS
struct
Platypus
{
short
s
:
1
;
short
s2
:
1
;
int
i
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
s
s2
i
)
;
}
}
;
#
endif
struct
FishTank
{
Fish
f
;
int
i2
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
f
i2
)
;
}
}
;
static_assert
(
sizeof
(
FishTank
)
=
=
12
)
;
static_assert
(
AreAllBytesTiedFields
<
FishTank
>
(
)
)
;
struct
CatCarrier
{
Cat
c
;
int
i2
;
constexpr
auto
MutTiedFields
(
)
{
return
std
:
:
tie
(
c
i2
)
;
}
}
;
static_assert
(
sizeof
(
CatCarrier
)
=
=
12
)
;
static_assert
(
AreAllBytesTiedFields
<
CatCarrier
>
(
)
)
;
static_assert
(
!
AreAllBytesTiedFields
<
decltype
(
CatCarrier
:
:
c
)
>
(
)
)
;
}
}
#
endif
