#
ifndef
WEBGLCOMMANDQUEUE_H_
#
define
WEBGLCOMMANDQUEUE_H_
#
include
"
mozilla
/
FunctionTypeTraits
.
h
"
#
include
"
mozilla
/
dom
/
ProducerConsumerQueue
.
h
"
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
#
include
<
type_traits
>
#
if
defined
(
_M_IX86
)
#
define
SINK_FCN_CC
__thiscall
#
else
#
define
SINK_FCN_CC
#
endif
namespace
mozilla
{
using
mozilla
:
:
ipc
:
:
IPDLParamTraits
;
using
mozilla
:
:
webgl
:
:
QueueStatus
;
enum
CommandResult
{
kSuccess
kTimeExpired
kQueueEmpty
kError
}
;
enum
CommandSyncType
{
ASYNC
SYNC
}
;
template
<
typename
Command
typename
_Source
>
class
CommandSource
{
using
Source
=
_Source
;
public
:
explicit
CommandSource
(
UniquePtr
<
Source
>
&
&
aSource
)
:
mSource
(
std
:
:
move
(
aSource
)
)
{
MOZ_ASSERT
(
mSource
)
;
}
template
<
typename
.
.
.
Args
>
QueueStatus
InsertCommand
(
Command
aCommand
Args
&
&
.
.
.
aArgs
)
{
return
this
-
>
mSource
-
>
TryWaitInsert
(
Nothing
(
)
aCommand
aArgs
.
.
.
)
;
}
QueueStatus
InsertCommand
(
Command
aCommand
)
{
return
this
-
>
mSource
-
>
TryWaitInsert
(
Nothing
(
)
aCommand
)
;
}
template
<
typename
.
.
.
Args
>
QueueStatus
RunCommand
(
Command
aCommand
Args
&
&
.
.
.
aArgs
)
{
return
InsertCommand
(
aCommand
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
CommandSource
(
)
=
default
;
protected
:
friend
struct
IPDLParamTraits
<
mozilla
:
:
CommandSource
<
Command
Source
>
>
;
UniquePtr
<
Source
>
mSource
;
}
;
template
<
typename
Command
typename
_Sink
>
class
CommandSink
{
using
Sink
=
_Sink
;
public
:
explicit
CommandSink
(
UniquePtr
<
Sink
>
&
&
aSink
)
:
mSink
(
std
:
:
move
(
aSink
)
)
{
MOZ_ASSERT
(
mSink
)
;
}
CommandResult
ProcessOne
(
const
Maybe
<
TimeDuration
>
&
aTimeout
)
{
Command
command
;
QueueStatus
status
=
(
aTimeout
.
isNothing
(
)
|
|
aTimeout
.
value
(
)
)
?
this
-
>
mSink
-
>
TryWaitRemove
(
aTimeout
command
)
:
this
-
>
mSink
-
>
TryRemove
(
command
)
;
if
(
status
=
=
QueueStatus
:
:
kSuccess
)
{
if
(
DispatchCommand
(
command
)
)
{
return
CommandResult
:
:
kSuccess
;
}
return
CommandResult
:
:
kError
;
}
if
(
status
=
=
QueueStatus
:
:
kNotReady
)
{
return
CommandResult
:
:
kQueueEmpty
;
}
if
(
status
=
=
QueueStatus
:
:
kOOMError
)
{
ReportOOM
(
)
;
}
return
CommandResult
:
:
kError
;
}
CommandResult
ProcessOneNow
(
)
{
return
ProcessOne
(
Some
(
TimeDuration
(
0
)
)
)
;
}
CommandResult
ProcessAll
(
)
{
CommandResult
result
;
do
{
result
=
ProcessOneNow
(
)
;
}
while
(
result
=
=
CommandResult
:
:
kSuccess
)
;
return
result
;
}
CommandResult
ProcessUpToDuration
(
TimeDuration
aDuration
)
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
now
=
start
;
CommandResult
result
;
do
{
result
=
ProcessOne
(
Some
(
aDuration
-
(
now
-
start
)
)
)
;
now
=
TimeStamp
:
:
Now
(
)
;
}
while
(
(
result
=
=
CommandResult
:
:
kSuccess
)
&
&
(
(
now
-
start
)
<
aDuration
)
)
;
return
result
;
}
CommandSink
(
)
=
default
;
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchAsyncMethod
(
T
&
aObj
ReturnType
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
ReadArgs
(
args
)
)
{
return
false
;
}
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
true
;
}
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchAsyncMethod
(
const
T
&
aObj
ReturnType
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
ReadArgs
(
args
)
)
{
return
false
;
}
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
true
;
}
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchAsyncMethod
(
T
*
aObj
void
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
ReadArgs
(
args
)
)
{
return
false
;
}
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
true
;
}
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchAsyncMethod
(
const
T
*
aObj
void
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
ReadArgs
(
args
)
)
{
return
false
;
}
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
true
;
}
protected
:
friend
struct
IPDLParamTraits
<
mozilla
:
:
CommandSink
<
Command
Sink
>
>
;
virtual
bool
DispatchCommand
(
Command
command
)
=
0
;
virtual
void
ReportOOM
(
)
{
}
template
<
typename
.
.
.
Args
size_t
.
.
.
Indices
>
QueueStatus
CallTryRemove
(
std
:
:
tuple
<
Args
.
.
.
>
&
aArgs
std
:
:
index_sequence
<
Indices
.
.
.
>
)
{
QueueStatus
status
=
mSink
-
>
TryRemove
(
std
:
:
get
<
Indices
>
(
aArgs
)
.
.
.
)
;
MOZ_ASSERT
(
status
!
=
QueueStatus
:
:
kNotReady
)
;
return
status
;
}
QueueStatus
CallTryRemove
(
std
:
:
tuple
<
>
&
aArgs
std
:
:
make_integer_sequence
<
size_t
0
>
)
{
return
QueueStatus
:
:
kSuccess
;
}
template
<
typename
T
typename
MethodType
typename
.
.
.
Args
size_t
.
.
.
Indices
typename
ReturnType
=
typename
mozilla
:
:
FunctionTypeTraits
<
MethodType
>
:
:
ReturnType
>
ReturnType
CallMethod
(
T
&
aObj
MethodType
aMethod
std
:
:
tuple
<
Args
.
.
.
>
&
aArgs
std
:
:
index_sequence
<
Indices
.
.
.
>
)
{
return
(
aObj
.
*
aMethod
)
(
std
:
:
forward
<
Args
>
(
std
:
:
get
<
Indices
>
(
aArgs
)
)
.
.
.
)
;
}
template
<
typename
T
typename
MethodType
typename
.
.
.
Args
size_t
.
.
.
Indices
>
void
CallVoidMethod
(
T
&
aObj
MethodType
aMethod
std
:
:
tuple
<
Args
.
.
.
>
&
aArgs
std
:
:
index_sequence
<
Indices
.
.
.
>
)
{
(
aObj
.
*
aMethod
)
(
std
:
:
forward
<
Args
>
(
std
:
:
get
<
Indices
>
(
aArgs
)
)
.
.
.
)
;
}
template
<
typename
.
.
.
Args
>
bool
ReadArgs
(
std
:
:
tuple
<
Args
.
.
.
>
&
aArgs
)
{
QueueStatus
status
=
CallTryRemove
(
aArgs
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
IsSuccess
(
status
)
;
}
UniquePtr
<
Sink
>
mSink
;
}
;
enum
SyncResponse
:
uint8_t
{
RESPONSE_NAK
RESPONSE_ACK
}
;
template
<
typename
Command
typename
_Source
typename
_ResponseQueue
>
class
SyncCommandSource
:
public
CommandSource
<
Command
_Source
>
{
public
:
using
BaseType
=
CommandSource
<
Command
_Source
>
;
using
Source
=
_Source
;
using
ResponseQueue
=
_ResponseQueue
;
using
ResponseSink
=
typename
ResponseQueue
:
:
Consumer
;
SyncCommandSource
(
UniquePtr
<
Source
>
&
&
aSource
UniquePtr
<
ResponseSink
>
&
&
aResponseSink
)
:
CommandSource
<
Command
Source
>
(
std
:
:
move
(
aSource
)
)
mResponseSink
(
std
:
:
move
(
aResponseSink
)
)
{
}
template
<
typename
.
.
.
Args
>
QueueStatus
RunAsyncCommand
(
Command
aCommand
Args
&
&
.
.
.
aArgs
)
{
return
this
-
>
RunCommand
(
aCommand
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
template
<
typename
.
.
.
Args
>
QueueStatus
RunVoidSyncCommand
(
Command
aCommand
Args
&
&
.
.
.
aArgs
)
{
QueueStatus
status
=
RunAsyncCommand
(
aCommand
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
return
IsSuccess
(
status
)
?
this
-
>
ReadSyncResponse
(
)
:
status
;
}
template
<
typename
ResultType
typename
.
.
.
Args
>
QueueStatus
RunSyncCommand
(
Command
aCommand
ResultType
&
aReturn
Args
&
&
.
.
.
aArgs
)
{
QueueStatus
status
=
RunVoidSyncCommand
(
aCommand
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
return
IsSuccess
(
status
)
?
this
-
>
ReadResult
(
aReturn
)
:
status
;
}
SyncCommandSource
(
)
=
default
;
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
SyncCommandSource
<
Command
Source
ResponseQueue
>
>
;
protected
:
QueueStatus
ReadSyncResponse
(
)
{
SyncResponse
response
;
QueueStatus
status
=
mResponseSink
-
>
TryWaitRemove
(
Nothing
(
)
response
)
;
MOZ_ASSERT
(
status
!
=
QueueStatus
:
:
kNotReady
)
;
if
(
IsSuccess
(
status
)
&
&
response
!
=
RESPONSE_ACK
)
{
return
QueueStatus
:
:
kFatalError
;
}
return
status
;
}
template
<
typename
T
>
QueueStatus
ReadResult
(
T
&
aResult
)
{
QueueStatus
status
=
mResponseSink
-
>
TryRemove
(
aResult
)
;
MOZ_ASSERT
(
status
!
=
QueueStatus
:
:
kNotReady
)
;
return
status
;
}
UniquePtr
<
ResponseSink
>
mResponseSink
;
}
;
template
<
typename
Command
typename
_Sink
typename
_ResponseQueue
>
class
SyncCommandSink
:
public
CommandSink
<
Command
_Sink
>
{
using
BaseType
=
CommandSink
<
Command
_Sink
>
;
using
ResponseQueue
=
_ResponseQueue
;
using
Sink
=
_Sink
;
using
ResponseSource
=
typename
ResponseQueue
:
:
Producer
;
public
:
SyncCommandSink
(
UniquePtr
<
Sink
>
&
&
aSink
UniquePtr
<
ResponseSource
>
&
&
aResponseSource
)
:
CommandSink
<
Command
Sink
>
(
std
:
:
move
(
aSink
)
)
mResponseSource
(
std
:
:
move
(
aResponseSource
)
)
{
MOZ_ASSERT
(
mResponseSource
)
;
}
SyncCommandSink
(
)
=
default
;
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
SyncCommandSink
<
Command
Sink
ResponseQueue
>
>
;
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
T
&
aObj
ReturnType
SINK_FCN_CC
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
ReturnType
response
=
BaseType
:
:
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
response
)
;
}
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
const
T
&
aObj
ReturnType
SINK_FCN_CC
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
ReturnType
response
=
BaseType
:
:
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
response
)
;
}
#
if
defined
(
_M_IX86
)
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
T
&
aObj
ReturnType
__stdcall
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
ReturnType
response
=
BaseType
:
:
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
response
)
;
}
template
<
typename
T
typename
ReturnType
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
const
T
&
aObj
ReturnType
__stdcall
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
ReturnType
response
=
BaseType
:
:
CallMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
response
)
;
}
#
endif
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
T
&
aObj
void
SINK_FCN_CC
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
BaseType
:
:
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
)
;
}
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
const
T
&
aObj
void
SINK_FCN_CC
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
BaseType
:
:
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
)
;
}
#
if
defined
(
_M_IX86
)
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
T
&
aObj
void
__stdcall
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
BaseType
:
:
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
)
;
}
template
<
typename
T
typename
.
.
.
Args
>
bool
DispatchSyncMethod
(
const
T
&
aObj
void
__stdcall
(
T
:
:
*
aMethod
)
(
Args
.
.
.
)
const
)
{
std
:
:
tuple
<
std
:
:
remove_cv_t
<
std
:
:
remove_reference_t
<
Args
>
>
.
.
.
>
args
;
if
(
!
BaseType
:
:
ReadArgs
(
args
)
)
{
WriteNAK
(
)
;
return
false
;
}
BaseType
:
:
CallVoidMethod
(
aObj
aMethod
args
std
:
:
index_sequence_for
<
Args
.
.
.
>
{
}
)
;
return
WriteACK
(
)
;
}
#
endif
protected
:
template
<
typename
.
.
.
Args
>
bool
WriteArgs
(
const
Args
&
.
.
.
aArgs
)
{
return
IsSuccess
(
mResponseSource
-
>
TryInsert
(
aArgs
.
.
.
)
)
;
}
template
<
typename
.
.
.
Args
>
bool
WriteACK
(
const
Args
&
.
.
.
aArgs
)
{
SyncResponse
ack
=
RESPONSE_ACK
;
return
WriteArgs
(
ack
aArgs
.
.
.
)
;
}
bool
WriteNAK
(
)
{
SyncResponse
nak
=
RESPONSE_NAK
;
return
WriteArgs
(
nak
)
;
}
UniquePtr
<
ResponseSource
>
mResponseSource
;
}
;
template
<
typename
Derived
>
struct
MethodDispatcher
{
template
<
CommandSyncType
syncType
int
=
0
>
struct
DispatchMethod
;
template
<
int
dummy
>
struct
DispatchMethod
<
CommandSyncType
:
:
ASYNC
dummy
>
{
template
<
typename
MethodType
typename
ObjectType
typename
SinkType
>
static
MOZ_ALWAYS_INLINE
bool
Run
(
SinkType
&
aSink
MethodType
mMethod
ObjectType
&
aObj
)
{
return
aSink
.
DispatchAsyncMethod
(
aObj
mMethod
)
;
}
}
;
template
<
int
dummy
>
struct
DispatchMethod
<
CommandSyncType
:
:
SYNC
dummy
>
{
template
<
typename
MethodType
typename
ObjectType
typename
SinkType
>
static
MOZ_ALWAYS_INLINE
bool
Run
(
SinkType
&
aSink
MethodType
aMethod
ObjectType
&
aObj
)
{
return
aSink
.
DispatchSyncMethod
(
aObj
aMethod
)
;
}
}
;
}
;
#
define
DECLARE_METHOD_DISPATCHER
(
_DISPATCHER
_OBJECTTYPE
)
\
struct
_DISPATCHER
:
public
MethodDispatcher
<
_DISPATCHER
>
{
\
using
ObjectType
=
_OBJECTTYPE
;
\
template
<
size_t
commandId
>
\
struct
IdDispatcher
{
\
template
<
typename
SinkType
>
\
static
MOZ_ALWAYS_INLINE
bool
DispatchCommand
(
size_t
aId
\
SinkType
&
aSink
\
ObjectType
&
aObj
)
{
\
MOZ_CRASH
(
"
Impossible
-
-
Unhandled
command
ID
"
)
;
\
return
false
;
\
}
\
}
;
\
template
<
typename
SinkType
size_t
commandId
=
0
>
\
static
MOZ_ALWAYS_INLINE
bool
DispatchCommand
(
size_t
aId
SinkType
&
aSink
\
ObjectType
&
aObj
)
{
\
return
IdDispatcher
<
commandId
>
:
:
DispatchCommand
(
aId
aSink
aObj
)
;
\
}
\
template
<
size_t
commandId
>
\
struct
MethodInfo
;
\
template
<
size_t
commandId
>
\
static
constexpr
CommandSyncType
SyncType
(
)
;
\
template
<
typename
MethodType
MethodType
method
>
\
static
constexpr
size_t
Id
(
)
;
\
}
;
#
define
DEFINE_METHOD_DISPATCHER
(
_DISPATCHER
_ID
_METHOD
_SYNC
)
\
template
<
>
\
struct
_DISPATCHER
:
:
MethodInfo
<
_ID
>
{
\
using
MethodType
=
decltype
(
&
_METHOD
)
;
\
}
;
\
template
<
>
\
constexpr
CommandSyncType
_DISPATCHER
:
:
SyncType
<
_ID
>
(
)
{
\
return
_SYNC
;
\
}
\
template
<
>
\
constexpr
size_t
_DISPATCHER
:
:
Id
<
decltype
(
&
_METHOD
)
&
_METHOD
>
(
)
{
\
return
_ID
;
\
}
\
template
<
>
\
struct
_DISPATCHER
:
:
IdDispatcher
<
_ID
>
{
\
template
<
typename
SinkType
>
\
static
bool
MOZ_ALWAYS_INLINE
DispatchCommand
(
size_t
aId
SinkType
&
aSink
\
ObjectType
&
aObj
)
{
\
return
(
_ID
=
=
aId
)
?
DispatchMethod
<
_SYNC
>
:
:
Run
(
aSink
&
_METHOD
aObj
)
\
:
_DISPATCHER
:
:
DispatchCommand
<
SinkType
_ID
+
1
>
(
\
aId
aSink
aObj
)
;
\
}
\
}
;
namespace
ipc
{
template
<
typename
T
>
struct
IPDLParamTraits
;
template
<
typename
Command
typename
Source
>
struct
IPDLParamTraits
<
mozilla
:
:
CommandSource
<
Command
Source
>
>
{
public
:
typedef
mozilla
:
:
CommandSource
<
Command
Source
>
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aMsg
aActor
aParam
.
mSource
)
;
}
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
{
return
ReadIPDLParam
(
aMsg
aIter
aActor
&
aResult
-
>
mSource
)
;
}
}
;
template
<
typename
Command
typename
Sink
>
struct
IPDLParamTraits
<
mozilla
:
:
CommandSink
<
Command
Sink
>
>
{
public
:
typedef
mozilla
:
:
CommandSink
<
Command
Sink
>
paramType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aMsg
aActor
aParam
.
mSink
)
;
}
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aResult
)
{
return
ReadIPDLParam
(
aMsg
aIter
aActor
&
aResult
-
>
mSink
)
;
}
}
;
template
<
typename
Command
typename
Source
typename
ResponseQueue
>
struct
IPDLParamTraits
<
mozilla
:
:
SyncCommandSource
<
Command
Source
ResponseQueue
>
>
:
public
IPDLParamTraits
<
mozilla
:
:
CommandSource
<
Command
Source
>
>
{
public
:
typedef
mozilla
:
:
SyncCommandSource
<
Command
Source
ResponseQueue
>
paramType
;
typedef
typename
paramType
:
:
BaseType
paramBaseType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aMsg
aActor
static_cast
<
const
paramBaseType
&
>
(
aParam
)
)
;
WriteIPDLParam
(
aMsg
aActor
aParam
.
mResponseSink
)
;
}
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aParam
)
{
bool
result
=
ReadIPDLParam
(
aMsg
aIter
aActor
static_cast
<
paramBaseType
*
>
(
aParam
)
)
;
return
result
&
&
ReadIPDLParam
(
aMsg
aIter
aActor
&
aParam
-
>
mResponseSink
)
;
}
}
;
template
<
typename
Command
typename
Sink
typename
ResponseQueue
>
struct
IPDLParamTraits
<
mozilla
:
:
SyncCommandSink
<
Command
Sink
ResponseQueue
>
>
:
public
IPDLParamTraits
<
mozilla
:
:
CommandSink
<
Command
Sink
>
>
{
public
:
typedef
mozilla
:
:
SyncCommandSink
<
Command
Sink
ResponseQueue
>
paramType
;
typedef
typename
paramType
:
:
BaseType
paramBaseType
;
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aMsg
aActor
static_cast
<
const
paramBaseType
&
>
(
aParam
)
)
;
WriteIPDLParam
(
aMsg
aActor
aParam
.
mResponseSource
)
;
}
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
paramType
*
aParam
)
{
bool
result
=
ReadIPDLParam
(
aMsg
aIter
aActor
static_cast
<
paramBaseType
*
>
(
aParam
)
)
;
return
result
&
&
ReadIPDLParam
(
aMsg
aIter
aActor
&
aParam
-
>
mResponseSource
)
;
}
}
;
}
}
#
endif
