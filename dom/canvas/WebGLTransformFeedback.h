#
ifndef
WEBGL_TRANSFORM_FEEDBACK_H_
#
define
WEBGL_TRANSFORM_FEEDBACK_H_
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
WebGLObjectModel
.
h
"
namespace
mozilla
{
namespace
webgl
{
struct
CachedDrawFetchLimits
;
}
class
WebGLTransformFeedback
final
:
public
WebGLRefCountedObject
<
WebGLTransformFeedback
>
public
LinkedListElement
<
WebGLTransformFeedback
>
{
friend
class
ScopedDrawWithTransformFeedback
;
friend
class
WebGLContext
;
friend
class
WebGL2Context
;
friend
class
WebGLProgram
;
friend
const
webgl
:
:
CachedDrawFetchLimits
*
ValidateDraw
(
WebGLContext
*
GLenum
uint32_t
)
;
public
:
const
GLuint
mGLName
;
bool
mHasBeenBound
=
false
;
private
:
std
:
:
vector
<
IndexedBufferBinding
>
mIndexedBindings
;
bool
mIsPaused
;
bool
mIsActive
;
WebGLRefPtr
<
WebGLProgram
>
mActive_Program
;
MOZ_INIT_OUTSIDE_CTOR
GLenum
mActive_PrimMode
;
MOZ_INIT_OUTSIDE_CTOR
size_t
mActive_VertPosition
;
MOZ_INIT_OUTSIDE_CTOR
size_t
mActive_VertCapacity
;
public
:
WebGLTransformFeedback
(
WebGLContext
*
webgl
GLuint
tf
)
;
private
:
~
WebGLTransformFeedback
(
)
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
WebGLTransformFeedback
)
void
Delete
(
)
;
bool
IsActiveAndNotPaused
(
)
const
{
return
mIsActive
&
&
!
mIsPaused
;
}
void
BeginTransformFeedback
(
GLenum
primMode
)
;
void
EndTransformFeedback
(
)
;
void
PauseTransformFeedback
(
)
;
void
ResumeTransformFeedback
(
)
;
}
;
}
#
endif
