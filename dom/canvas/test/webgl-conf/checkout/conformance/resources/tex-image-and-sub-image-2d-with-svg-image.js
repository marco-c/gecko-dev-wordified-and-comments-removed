function
generateTest
(
pixelFormat
pixelType
pathToTestRoot
prologue
)
{
var
wtu
=
WebGLTestUtils
;
var
gl
=
null
;
var
textureLoc
=
null
;
var
successfullyParsed
=
false
;
var
imgCanvas
;
var
red
=
[
255
0
0
]
;
var
green
=
[
0
255
0
]
;
var
init
=
function
(
)
{
description
(
'
Verify
texImage2D
and
texSubImage2D
code
paths
taking
SVG
image
elements
(
'
+
pixelFormat
+
'
/
'
+
pixelType
+
'
)
'
)
;
gl
=
wtu
.
create3DContext
(
"
example
"
)
;
if
(
!
prologue
(
gl
)
)
{
finishTest
(
)
;
return
;
}
var
program
=
wtu
.
setupTexturedQuad
(
gl
)
;
gl
.
clearColor
(
0
0
0
1
)
;
gl
.
clearDepth
(
1
)
;
textureLoc
=
gl
.
getUniformLocation
(
program
"
tex
"
)
;
wtu
.
loadTexture
(
gl
pathToTestRoot
+
"
/
resources
/
red
-
green
.
svg
"
runTest
)
;
}
function
runOneIteration
(
image
useTexSubImage2D
flipY
topColor
bottomColor
)
{
debug
(
'
Testing
'
+
(
useTexSubImage2D
?
'
texSubImage2D
'
:
'
texImage2D
'
)
+
'
with
flipY
=
'
+
flipY
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
)
;
gl
.
colorMask
(
1
1
1
0
)
;
var
texture
=
gl
.
createTexture
(
)
;
gl
.
bindTexture
(
gl
.
TEXTURE_2D
texture
)
;
gl
.
texParameteri
(
gl
.
TEXTURE_2D
gl
.
TEXTURE_MIN_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
gl
.
TEXTURE_2D
gl
.
TEXTURE_MAG_FILTER
gl
.
NEAREST
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_FLIP_Y_WEBGL
flipY
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_PREMULTIPLY_ALPHA_WEBGL
false
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_COLORSPACE_CONVERSION_WEBGL
gl
.
NONE
)
;
if
(
useTexSubImage2D
)
{
gl
.
texImage2D
(
gl
.
TEXTURE_2D
0
gl
[
pixelFormat
]
image
.
width
image
.
height
0
gl
[
pixelFormat
]
gl
[
pixelType
]
null
)
;
gl
.
texSubImage2D
(
gl
.
TEXTURE_2D
0
0
0
gl
[
pixelFormat
]
gl
[
pixelType
]
image
)
;
}
else
{
gl
.
texImage2D
(
gl
.
TEXTURE_2D
0
gl
[
pixelFormat
]
gl
[
pixelFormat
]
gl
[
pixelType
]
image
)
;
}
gl
.
uniform1i
(
textureLoc
0
)
;
wtu
.
clearAndDrawUnitQuad
(
gl
[
0
0
0
255
]
)
;
debug
(
"
Checking
lower
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
4
2
2
bottomColor
"
shouldBe
"
+
bottomColor
)
;
debug
(
"
Checking
upper
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
gl
.
canvas
.
height
-
8
2
2
topColor
"
shouldBe
"
+
topColor
)
;
}
function
runTest
(
image
)
{
runOneIteration
(
image
false
true
red
green
)
;
runOneIteration
(
image
false
false
green
red
)
;
runOneIteration
(
image
true
true
red
green
)
;
runOneIteration
(
image
true
false
green
red
)
;
finishTest
(
)
;
}
return
init
;
}
