"
"
"
Utility
to
use
the
Closure
Compiler
CLI
from
Python
.
"
"
"
import
logging
import
os
import
re
import
subprocess
_VERSION_REGEX
=
re
.
compile
(
r
'
"
(
[
0
-
9
]
+
)
\
.
(
[
0
-
9
]
+
)
'
)
class
JsCompilerError
(
Exception
)
:
  
"
"
"
Raised
if
there
'
s
an
error
in
calling
the
compiler
.
"
"
"
  
pass
def
_GetJavaVersionString
(
)
:
  
"
"
"
Get
the
version
string
from
the
Java
VM
.
"
"
"
  
return
subprocess
.
check_output
(
[
'
java
'
'
-
version
'
]
stderr
=
subprocess
.
STDOUT
)
def
_ParseJavaVersion
(
version_string
)
:
  
"
"
"
Returns
a
2
-
tuple
for
the
current
version
of
Java
installed
.
  
Args
:
    
version_string
:
String
of
the
Java
version
(
e
.
g
.
'
1
.
7
.
2
-
ea
'
)
.
  
Returns
:
    
The
major
and
minor
versions
as
a
2
-
tuple
(
e
.
g
.
(
1
7
)
)
.
  
"
"
"
  
match
=
_VERSION_REGEX
.
search
(
version_string
)
  
if
match
:
    
version
=
tuple
(
int
(
x
10
)
for
x
in
match
.
groups
(
)
)
    
assert
len
(
version
)
=
=
2
    
return
version
def
_JavaSupports32BitMode
(
)
:
  
"
"
"
Determines
whether
the
JVM
supports
32
-
bit
mode
on
the
platform
.
"
"
"
  
supported
=
False
  
try
:
    
devnull
=
open
(
os
.
devnull
'
wb
'
)
    
return
subprocess
.
call
(
        
[
'
java
'
'
-
d32
'
'
-
version
'
]
stdout
=
devnull
stderr
=
devnull
)
=
=
0
  
except
IOError
:
    
pass
  
else
:
    
devnull
.
close
(
)
  
return
supported
def
_GetJsCompilerArgs
(
compiler_jar_path
java_version
source_paths
                       
jvm_flags
compiler_flags
)
:
  
"
"
"
Assembles
arguments
for
call
to
JsCompiler
.
"
"
"
  
if
java_version
<
(
1
7
)
:
    
raise
JsCompilerError
(
'
Closure
Compiler
requires
Java
1
.
7
or
higher
.
'
                          
'
Please
visit
http
:
/
/
www
.
java
.
com
/
getjava
'
)
  
args
=
[
'
java
'
]
  
if
_JavaSupports32BitMode
(
)
:
    
args
+
=
[
'
-
d32
'
]
  
args
+
=
[
'
-
client
'
]
  
if
jvm_flags
:
    
args
+
=
jvm_flags
  
args
+
=
[
'
-
jar
'
compiler_jar_path
]
  
for
path
in
source_paths
:
    
args
+
=
[
'
-
-
js
'
path
]
  
if
compiler_flags
:
    
args
+
=
compiler_flags
  
return
args
def
Compile
(
compiler_jar_path
source_paths
            
jvm_flags
=
None
            
compiler_flags
=
None
)
:
  
"
"
"
Prepares
command
-
line
call
to
Closure
Compiler
.
  
Args
:
    
compiler_jar_path
:
Path
to
the
Closure
compiler
.
jar
file
.
    
source_paths
:
Source
paths
to
build
in
order
.
    
jvm_flags
:
A
list
of
additional
flags
to
pass
on
to
JVM
.
    
compiler_flags
:
A
list
of
additional
flags
to
pass
on
to
Closure
Compiler
.
  
Returns
:
    
The
compiled
source
as
a
string
or
None
if
compilation
failed
.
  
"
"
"
  
java_version
=
_ParseJavaVersion
(
_GetJavaVersionString
(
)
)
  
args
=
_GetJsCompilerArgs
(
      
compiler_jar_path
java_version
source_paths
jvm_flags
compiler_flags
)
  
logging
.
info
(
'
Compiling
with
the
following
command
:
%
s
'
'
'
.
join
(
args
)
)
  
try
:
    
return
subprocess
.
check_output
(
args
)
  
except
subprocess
.
CalledProcessError
:
    
raise
JsCompilerError
(
'
JavaScript
compilation
failed
.
'
)
