'
use
strict
'
;
goog
.
provide
(
'
functional
.
gles3
.
es3fStringQueryTests
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTestCase
'
)
;
goog
.
require
(
'
functional
.
gles3
.
es3fApiCase
'
)
;
goog
.
scope
(
function
(
)
{
var
es3fStringQueryTests
=
functional
.
gles3
.
es3fStringQueryTests
;
var
tcuTestCase
=
framework
.
common
.
tcuTestCase
;
var
es3fApiCase
=
functional
.
gles3
.
es3fApiCase
;
es3fStringQueryTests
.
StringQueryTests
=
function
(
)
{
tcuTestCase
.
DeqpTest
.
call
(
this
'
string
'
'
String
Query
tests
'
)
;
}
;
es3fStringQueryTests
.
StringQueryTests
.
prototype
=
Object
.
create
(
tcuTestCase
.
DeqpTest
.
prototype
)
;
es3fStringQueryTests
.
StringQueryTests
.
prototype
.
constructor
=
es3fStringQueryTests
.
StringQueryTests
;
es3fStringQueryTests
.
StringQueryTests
.
prototype
.
init
=
function
(
)
{
this
.
addChild
(
new
es3fApiCase
.
ApiCaseCallback
(
'
renderer
'
'
RENDERER
'
gl
function
(
)
{
var
string
=
(
gl
.
getParameter
(
gl
.
RENDERER
)
)
;
this
.
check
(
string
!
=
=
null
'
Got
invalid
string
:
'
+
string
)
;
}
)
)
;
this
.
addChild
(
new
es3fApiCase
.
ApiCaseCallback
(
'
vendor
'
'
VENDOR
'
gl
function
(
)
{
var
string
=
(
gl
.
getParameter
(
gl
.
VENDOR
)
)
;
this
.
check
(
string
!
=
=
null
'
Got
invalid
string
:
'
+
string
)
;
}
)
)
;
this
.
addChild
(
new
es3fApiCase
.
ApiCaseCallback
(
'
version
'
'
VERSION
'
gl
function
(
)
{
var
string
=
(
gl
.
getParameter
(
gl
.
VERSION
)
)
;
var
referenceString
=
'
WebGL
2
.
0
'
;
this
.
check
(
string
!
=
=
null
&
&
string
.
indexOf
(
referenceString
)
=
=
=
0
'
Got
invalid
string
prefix
:
'
+
string
+
'
expected
:
'
+
referenceString
)
;
}
)
)
;
this
.
addChild
(
new
es3fApiCase
.
ApiCaseCallback
(
'
shading_language_version
'
'
SHADING_LANGUAGE_VERSION
'
gl
function
(
)
{
var
string
=
(
gl
.
getParameter
(
gl
.
SHADING_LANGUAGE_VERSION
)
)
;
var
referenceString
=
'
WebGL
GLSL
ES
3
.
00
'
;
this
.
check
(
string
!
=
=
null
'
Got
invalid
string
'
)
;
this
.
check
(
string
.
indexOf
(
referenceString
)
=
=
=
0
'
Got
invalid
string
prefix
'
)
;
}
)
)
;
this
.
addChild
(
new
es3fApiCase
.
ApiCaseCallback
(
'
extensions
'
'
EXTENSIONS
'
gl
function
(
)
{
var
extensions
=
gl
.
getSupportedExtensions
(
)
;
this
.
check
(
extensions
!
=
=
null
'
Got
invalid
string
'
)
;
for
(
var
i
in
extensions
)
{
var
extension
=
gl
.
getExtension
(
extensions
[
i
]
)
;
this
.
check
(
extension
!
=
=
null
'
Advertised
extension
'
+
extensions
[
i
]
+
'
not
found
'
)
;
}
this
.
check
(
gl
.
getExtension
(
'
Random_String
'
)
=
=
=
null
'
Extension
query
methods
are
not
consistent
.
'
)
;
}
)
)
;
}
;
es3fStringQueryTests
.
run
=
function
(
context
)
{
gl
=
context
;
var
state
=
tcuTestCase
.
runner
;
state
.
setRoot
(
new
es3fStringQueryTests
.
StringQueryTests
(
)
)
;
setCurrentTestName
(
state
.
testCases
.
fullName
(
)
)
;
description
(
state
.
testCases
.
getDescription
(
)
)
;
try
{
tcuTestCase
.
runTestCases
(
)
;
}
catch
(
err
)
{
testFailedOptions
(
'
Failed
to
es3fStringQueryTests
.
run
tests
'
false
)
;
tcuTestCase
.
runner
.
terminate
(
)
;
}
}
;
}
)
;
