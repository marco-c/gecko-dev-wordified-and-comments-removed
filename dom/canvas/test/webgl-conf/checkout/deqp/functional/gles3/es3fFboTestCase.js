'
use
strict
'
;
goog
.
provide
(
'
functional
.
gles3
.
es3fFboTestCase
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuImageCompare
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuPixelFormat
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuSurface
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTestCase
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTexture
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deRandom
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deString
'
)
;
goog
.
require
(
'
framework
.
opengl
.
simplereference
.
sglrGLContext
'
)
;
goog
.
require
(
'
framework
.
opengl
.
simplereference
.
sglrReferenceContext
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrRenderer
'
)
;
goog
.
require
(
'
functional
.
gles3
.
es3fFboTestUtil
'
)
;
goog
.
scope
(
function
(
)
{
var
es3fFboTestCase
=
functional
.
gles3
.
es3fFboTestCase
;
var
tcuTestCase
=
framework
.
common
.
tcuTestCase
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
tcuSurface
=
framework
.
common
.
tcuSurface
;
var
tcuTexture
=
framework
.
common
.
tcuTexture
;
var
rrRenderer
=
framework
.
referencerenderer
.
rrRenderer
;
var
sglrReferenceContext
=
framework
.
opengl
.
simplereference
.
sglrReferenceContext
;
var
tcuPixelFormat
=
framework
.
common
.
tcuPixelFormat
;
var
tcuImageCompare
=
framework
.
common
.
tcuImageCompare
;
var
deString
=
framework
.
delibs
.
debase
.
deString
;
var
sglrGLContext
=
framework
.
opengl
.
simplereference
.
sglrGLContext
;
var
es3fFboTestUtil
=
functional
.
gles3
.
es3fFboTestUtil
;
var
deRandom
=
framework
.
delibs
.
debase
.
deRandom
;
es3fFboTestCase
.
Context
;
var
DE_ASSERT
=
function
(
x
)
{
if
(
!
x
)
throw
new
Error
(
'
Assert
failed
'
)
;
}
;
es3fFboTestCase
.
FboTestCase
=
function
(
name
description
useScreenSizedViewport
)
{
tcuTestCase
.
DeqpTest
.
call
(
this
name
description
)
;
this
.
m_viewportWidth
=
useScreenSizedViewport
=
=
=
undefined
?
gl
.
drawingBufferWidth
:
128
;
this
.
m_viewportHeight
=
useScreenSizedViewport
=
=
=
undefined
?
gl
.
drawingBufferHeight
:
128
;
this
.
m_curCtx
=
null
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
=
Object
.
create
(
tcuTestCase
.
DeqpTest
.
prototype
)
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
constructor
=
es3fFboTestCase
.
FboTestCase
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
getWidth
=
function
(
)
{
return
Math
.
min
(
gl
.
drawingBufferWidth
this
.
m_viewportWidth
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
getHeight
=
function
(
)
{
return
Math
.
min
(
gl
.
drawingBufferHeight
this
.
m_viewportHeight
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
setContext
=
function
(
context
)
{
this
.
m_curCtx
=
context
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
getCurrentContext
=
function
(
)
{
return
this
.
m_curCtx
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
compare
=
function
(
reference
result
)
{
return
tcuImageCompare
.
fuzzyCompare
(
'
Result
'
'
Image
comparison
result
'
reference
.
getAccess
(
)
result
.
getAccess
(
)
0
.
05
tcuImageCompare
.
CompareLogMode
.
RESULT
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
checkFormatSupport
=
function
(
sizedFormat
)
{
var
isCoreFormat
=
es3fFboTestCase
.
isRequiredFormat
(
sizedFormat
)
;
var
requiredExts
=
(
!
isCoreFormat
)
?
es3fFboTestCase
.
getEnablingExtensions
(
sizedFormat
)
:
[
]
;
DE_ASSERT
(
isCoreFormat
|
|
requiredExts
)
;
if
(
requiredExts
.
length
>
0
&
&
!
es3fFboTestCase
.
isAnyExtensionSupported
(
gl
requiredExts
)
)
{
var
msg
=
'
SKIP
:
Format
'
+
WebGLTestUtils
.
glEnumToString
(
gl
sizedFormat
)
+
'
not
supported
'
;
debug
(
msg
)
;
throw
new
TestFailedException
(
msg
)
;
}
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
checkSampleCount
=
function
(
sizedFormat
numSamples
)
{
var
minSampleCount
=
es3fFboTestCase
.
getMinimumSampleCount
(
sizedFormat
)
;
if
(
numSamples
>
minSampleCount
)
{
var
supportedSampleCounts
=
es3fFboTestCase
.
querySampleCounts
(
sizedFormat
)
;
var
supported
=
Array
.
prototype
.
slice
.
call
(
supportedSampleCounts
)
;
if
(
supported
.
indexOf
(
numSamples
)
=
=
-
1
)
throw
new
Error
(
'
Sample
count
not
supported
'
)
;
}
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
readPixelsUsingFormat
=
function
(
dst
x
y
width
height
format
scale
bias
)
{
dst
.
setSize
(
width
height
)
;
es3fFboTestUtil
.
readPixels
(
this
.
getCurrentContext
(
)
dst
x
y
width
height
format
scale
bias
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
readPixels
=
function
(
dst
x
y
width
height
)
{
dst
.
readViewport
(
this
.
getCurrentContext
(
)
[
x
y
width
height
]
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
checkFramebufferStatus
=
function
(
target
)
{
var
status
=
this
.
getCurrentContext
(
)
.
checkFramebufferStatus
(
target
)
;
if
(
status
!
=
gl
.
FRAMEBUFFER_COMPLETE
)
throw
new
Error
(
'
Framebuffer
Status
:
'
+
WebGLTestUtils
.
glEnumToString
(
gl
status
)
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
checkError
=
function
(
)
{
var
err
=
this
.
getCurrentContext
(
)
.
getError
(
)
;
if
(
err
!
=
gl
.
NO_ERROR
)
throw
new
Error
(
'
glError
:
'
+
WebGLTestUtils
.
glEnumToString
(
gl
err
)
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
clearColorBuffer
=
function
(
format
value
)
{
if
(
value
=
=
=
undefined
)
value
=
[
0
.
0
0
.
0
0
.
0
0
.
0
]
;
es3fFboTestUtil
.
clearColorBuffer
(
this
.
getCurrentContext
(
)
format
value
)
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
iterate
=
function
(
)
{
var
rnd
=
new
deRandom
.
Random
(
deString
.
deStringHash
(
this
.
name
)
)
;
var
width
=
Math
.
min
(
gl
.
drawingBufferWidth
this
.
m_viewportWidth
)
;
var
height
=
Math
.
min
(
gl
.
drawingBufferHeight
this
.
m_viewportHeight
)
;
var
x
=
rnd
.
getInt
(
0
gl
.
drawingBufferWidth
-
width
)
;
var
y
=
rnd
.
getInt
(
0
gl
.
drawingBufferHeight
-
height
)
;
var
reference
=
new
tcuSurface
.
Surface
(
width
height
)
;
var
result
=
new
tcuSurface
.
Surface
(
width
height
)
;
if
(
this
.
preCheck
)
this
.
preCheck
(
)
;
try
{
var
context
=
new
sglrGLContext
.
GLContext
(
gl
[
x
y
width
height
]
)
;
this
.
setContext
(
context
)
;
this
.
render
(
result
)
;
var
err
=
context
.
getError
(
)
;
if
(
err
!
=
gl
.
NO_ERROR
)
throw
new
Error
(
'
glError
:
'
+
context
)
;
this
.
setContext
(
null
)
;
}
catch
(
e
)
{
if
(
e
instanceof
es3fFboTestUtil
.
FboIncompleteException
)
if
(
e
.
getReason
(
)
=
=
gl
.
FRAMEBUFFER_UNSUPPORTED
)
{
assertMsgOptions
(
false
'
Not
supported
'
true
false
)
;
return
tcuTestCase
.
IterateResult
.
STOP
;
}
throw
e
;
}
var
alphaBits
=
(
gl
.
getParameter
(
gl
.
ALPHA_BITS
)
)
;
var
buffers
=
new
sglrReferenceContext
.
ReferenceContextBuffers
(
new
tcuPixelFormat
.
PixelFormat
(
8
8
8
alphaBits
>
0
?
8
:
0
)
(
gl
.
getParameter
(
gl
.
DEPTH_BITS
)
)
(
gl
.
getParameter
(
gl
.
STENCIL_BITS
)
)
width
height
)
;
var
refContext
=
new
sglrReferenceContext
.
ReferenceContext
(
new
sglrReferenceContext
.
ReferenceContextLimits
(
gl
)
buffers
.
getColorbuffer
(
)
buffers
.
getDepthbuffer
(
)
buffers
.
getStencilbuffer
(
)
)
;
refContext
.
getError
(
)
;
this
.
setContext
(
refContext
)
;
this
.
render
(
reference
)
;
this
.
setContext
(
null
)
;
var
isOk
=
this
.
compare
(
reference
result
)
;
assertMsgOptions
(
isOk
'
'
true
false
)
;
return
tcuTestCase
.
IterateResult
.
STOP
;
}
;
es3fFboTestCase
.
FboTestCase
.
prototype
.
deinit
=
function
(
)
{
{
gl
.
disable
(
gl
.
SCISSOR_TEST
)
;
gl
.
disable
(
gl
.
STENCIL_TEST
)
;
gl
.
stencilFunc
(
gl
.
ALWAYS
0
0xffff
)
;
gl
.
stencilOp
(
gl
.
KEEP
gl
.
KEEP
gl
.
KEEP
)
;
gl
.
disable
(
gl
.
DEPTH_TEST
)
;
gl
.
depthFunc
(
gl
.
LESS
)
;
gl
.
disable
(
gl
.
BLEND
)
;
gl
.
blendFunc
(
gl
.
ONE
gl
.
ZERO
)
;
gl
.
blendEquation
(
gl
.
FUNC_ADD
)
;
gl
.
blendColor
(
0
.
0
0
.
0
0
.
0
0
.
0
)
;
gl
.
enable
(
gl
.
DITHER
)
;
}
{
gl
.
colorMask
(
true
true
true
true
)
;
gl
.
depthMask
(
true
)
;
gl
.
stencilMask
(
0xffff
)
;
gl
.
clearColor
(
0
.
0
0
.
0
0
.
0
0
.
0
)
;
gl
.
clearDepth
(
1
.
0
)
;
gl
.
clearStencil
(
0
.
0
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
|
gl
.
STENCIL_BUFFER_BIT
)
;
}
}
;
es3fFboTestCase
.
isRequiredFormat
=
function
(
format
)
{
switch
(
format
)
{
case
gl
.
RGBA32I
:
case
gl
.
RGBA32UI
:
case
gl
.
RGBA16I
:
case
gl
.
RGBA16UI
:
case
gl
.
RGBA8
:
case
gl
.
RGBA8I
:
case
gl
.
RGBA8UI
:
case
gl
.
SRGB8_ALPHA8
:
case
gl
.
RGB10_A2
:
case
gl
.
RGB10_A2UI
:
case
gl
.
RGBA4
:
case
gl
.
RGB5_A1
:
case
gl
.
RGB8
:
case
gl
.
RGB565
:
case
gl
.
RG32I
:
case
gl
.
RG32UI
:
case
gl
.
RG16I
:
case
gl
.
RG16UI
:
case
gl
.
RG8
:
case
gl
.
RG8I
:
case
gl
.
RG8UI
:
case
gl
.
R32I
:
case
gl
.
R32UI
:
case
gl
.
R16I
:
case
gl
.
R16UI
:
case
gl
.
R8
:
case
gl
.
R8I
:
case
gl
.
R8UI
:
return
true
;
case
gl
.
DEPTH_COMPONENT32F
:
case
gl
.
DEPTH_COMPONENT24
:
case
gl
.
DEPTH_COMPONENT16
:
return
true
;
case
gl
.
DEPTH32F_STENCIL8
:
case
gl
.
DEPTH24_STENCIL8
:
return
true
;
case
gl
.
STENCIL_INDEX8
:
return
true
;
default
:
return
false
;
}
}
;
es3fFboTestCase
.
getEnablingExtensions
=
function
(
format
)
{
var
out
=
[
]
;
DE_ASSERT
(
!
es3fFboTestCase
.
isRequiredFormat
(
format
)
)
;
switch
(
format
)
{
case
gl
.
RGBA16F
:
case
gl
.
RG16F
:
case
gl
.
R16F
:
case
gl
.
RGBA32F
:
case
gl
.
RGB32F
:
case
gl
.
R11F_G11F_B10F
:
case
gl
.
RG32F
:
case
gl
.
R32F
:
out
.
push
(
'
EXT_color_buffer_float
'
)
;
break
;
case
gl
.
RGB16F
:
break
;
default
:
break
;
}
return
out
;
}
;
es3fFboTestCase
.
isAnyExtensionSupported
=
function
(
context
requiredExts
)
{
for
(
var
iter
in
requiredExts
)
{
var
extension
=
requiredExts
[
iter
]
;
if
(
sglrGLContext
.
isExtensionSupported
(
gl
extension
)
)
{
gl
.
getExtension
(
extension
)
;
return
true
;
}
}
return
false
;
}
;
es3fFboTestCase
.
getMinimumSampleCount
=
function
(
format
)
{
switch
(
format
)
{
case
gl
.
RGBA32I
:
case
gl
.
RGBA32UI
:
case
gl
.
RGBA16I
:
case
gl
.
RGBA16UI
:
case
gl
.
RGBA8
:
case
gl
.
RGBA8I
:
case
gl
.
RGBA8UI
:
case
gl
.
SRGB8_ALPHA8
:
case
gl
.
RGB10_A2
:
case
gl
.
RGB10_A2UI
:
case
gl
.
RGBA4
:
case
gl
.
RGB5_A1
:
case
gl
.
RGB8
:
case
gl
.
RGB565
:
case
gl
.
RG32I
:
case
gl
.
RG32UI
:
case
gl
.
RG16I
:
case
gl
.
RG16UI
:
case
gl
.
RG8
:
case
gl
.
RG8I
:
case
gl
.
RG8UI
:
case
gl
.
R32I
:
case
gl
.
R32UI
:
case
gl
.
R16I
:
case
gl
.
R16UI
:
case
gl
.
R8
:
case
gl
.
R8I
:
case
gl
.
R8UI
:
case
gl
.
DEPTH_COMPONENT32F
:
case
gl
.
DEPTH_COMPONENT24
:
case
gl
.
DEPTH_COMPONENT16
:
case
gl
.
DEPTH32F_STENCIL8
:
case
gl
.
DEPTH24_STENCIL8
:
case
gl
.
STENCIL_INDEX8
:
return
4
;
case
gl
.
R11F_G11F_B10F
:
case
gl
.
RG16F
:
case
gl
.
R16F
:
return
4
;
case
gl
.
RGBA32F
:
case
gl
.
RGBA16F
:
case
gl
.
RG32F
:
case
gl
.
R32F
:
return
0
;
case
gl
.
RGB16F
:
return
0
;
default
:
throw
new
Error
(
'
Unknown
format
:
'
+
format
)
;
}
}
;
es3fFboTestCase
.
querySampleCounts
=
function
(
format
)
{
return
gl
.
getInternalformatParameter
(
gl
.
RENDERBUFFER
format
gl
.
SAMPLES
)
;
}
;
}
)
;
