'
use
strict
'
;
goog
.
provide
(
'
modules
.
shared
.
glsStateQuery
'
)
;
goog
.
scope
(
function
(
)
{
var
glsStateQuery
=
modules
.
shared
.
glsStateQuery
;
glsStateQuery
.
compare
=
function
(
a
b
)
{
var
eps
=
0
.
01
;
if
(
a
=
=
=
b
)
return
true
;
if
(
typeof
a
=
=
=
'
number
'
&
&
typeof
b
=
=
=
'
number
'
)
return
Math
.
abs
(
a
-
b
)
<
eps
;
if
(
typeof
a
=
=
'
object
'
&
&
typeof
b
=
=
'
object
'
)
{
if
(
a
.
constructor
!
=
=
b
.
constructor
)
return
false
;
if
(
'
length
'
in
a
&
&
'
length
'
in
b
)
{
if
(
a
.
length
!
=
=
b
.
length
)
return
false
;
for
(
var
i
=
0
;
i
<
a
.
length
;
i
+
+
)
{
if
(
typeof
a
[
i
]
=
=
=
'
number
'
&
&
typeof
b
[
i
]
=
=
=
'
number
'
)
{
if
(
Math
.
abs
(
a
[
i
]
-
b
[
i
]
)
>
=
eps
)
return
false
;
}
else
if
(
a
[
i
]
!
=
=
b
[
i
]
)
return
false
;
}
return
true
;
}
}
return
false
;
}
;
glsStateQuery
.
verify
=
function
(
param
reference
)
{
var
value
=
gl
.
getParameter
(
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyCurrentVertexAttrib
=
function
(
index
reference
)
{
var
value
=
gl
.
getVertexAttrib
(
index
gl
.
CURRENT_VERTEX_ATTRIB
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyVertexAttrib
=
function
(
index
param
reference
)
{
var
value
=
(
param
=
=
gl
.
VERTEX_ATTRIB_ARRAY_POINTER
)
?
gl
.
getVertexAttribOffset
(
index
param
)
:
gl
.
getVertexAttrib
(
index
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyUniform
=
function
(
program
location
reference
)
{
var
value
=
gl
.
getUniform
(
program
location
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyShader
=
function
(
shader
param
reference
)
{
var
value
=
gl
.
getShaderParameter
(
shader
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyProgram
=
function
(
program
param
reference
)
{
var
value
=
gl
.
getProgramParameter
(
program
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifySampler
=
function
(
sampler
param
reference
)
{
var
value
=
gl
.
getSamplerParameter
(
sampler
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyTexture
=
function
(
target
param
reference
)
{
var
value
=
gl
.
getTexParameter
(
target
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyAnyOf
=
function
(
param
reference
)
{
var
value
=
gl
.
getParameter
(
param
)
;
for
(
var
i
=
0
;
i
<
reference
.
length
;
i
+
+
)
if
(
glsStateQuery
.
compare
(
value
reference
[
i
]
)
)
return
true
;
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
one
of
:
'
+
reference
)
;
return
false
;
}
;
glsStateQuery
.
verifyGreaterOrEqual
=
function
(
param
reference
)
{
var
value
=
gl
.
getParameter
(
param
)
;
if
(
reference
instanceof
Array
)
{
var
v
=
(
value
)
;
if
(
v
.
length
!
=
reference
.
length
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
>
=
:
'
+
reference
)
;
return
false
;
}
for
(
var
i
=
0
;
i
<
reference
.
length
;
i
+
+
)
if
(
v
[
i
]
<
reference
[
i
]
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
>
=
:
'
+
reference
)
;
return
false
;
}
return
true
;
}
var
n
=
(
value
)
;
if
(
n
<
reference
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
>
=
:
'
+
reference
)
;
return
false
;
}
return
true
;
}
;
glsStateQuery
.
verifyLessOrEqual
=
function
(
param
reference
)
{
var
value
=
gl
.
getParameter
(
param
)
;
if
(
reference
instanceof
Array
)
{
var
v
=
(
value
)
;
if
(
v
.
length
!
=
reference
.
length
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
<
=
:
'
+
reference
)
;
return
false
;
}
for
(
var
i
=
0
;
i
>
reference
.
length
;
i
+
+
)
if
(
v
[
i
]
<
reference
[
i
]
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
<
=
:
'
+
reference
)
;
return
false
;
}
return
true
;
}
var
n
=
(
value
)
;
if
(
n
>
reference
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
<
=
:
'
+
reference
)
;
return
false
;
}
return
true
;
}
;
glsStateQuery
.
verifyMasked
=
function
(
param
reference
mask
)
{
var
value
=
(
gl
.
getParameter
(
param
)
)
;
if
(
(
value
&
mask
)
!
=
=
reference
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
+
'
Mask
:
0x
'
+
mask
.
toString
(
16
)
)
;
return
false
;
}
return
true
;
}
;
glsStateQuery
.
verifyAttachment
=
function
(
fbo
attachment
param
reference
)
{
var
value
=
gl
.
getFramebufferAttachmentParameter
(
fbo
attachment
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyColorAttachment
=
function
(
fbo
param
reference
)
{
return
glsStateQuery
.
verifyAttachment
(
fbo
gl
.
COLOR_ATTACHMENT0
param
reference
)
;
}
;
glsStateQuery
.
verifyRenderbuffer
=
function
(
param
reference
)
{
var
value
=
gl
.
getRenderbufferParameter
(
gl
.
RENDERBUFFER
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyActiveUniformBlock
=
function
(
program
index
param
reference
)
{
var
value
=
gl
.
getActiveUniformBlockParameter
(
program
index
param
)
;
var
result
=
glsStateQuery
.
compare
(
value
reference
)
;
if
(
!
result
)
{
bufferedLogToConsole
(
'
Result
:
'
+
value
+
'
Expected
:
'
+
reference
)
;
}
return
result
;
}
;
glsStateQuery
.
verifyMask
=
function
(
param
reference
enableRef
)
{
var
intVector4
=
(
gl
.
getParameter
(
param
)
)
;
if
(
(
enableRef
[
0
]
&
&
(
intVector4
[
0
]
!
=
reference
[
0
]
)
)
|
|
(
enableRef
[
1
]
&
&
(
intVector4
[
1
]
!
=
reference
[
1
]
)
)
|
|
(
enableRef
[
2
]
&
&
(
intVector4
[
2
]
!
=
reference
[
2
]
)
)
|
|
(
enableRef
[
3
]
&
&
(
intVector4
[
3
]
!
=
reference
[
3
]
)
)
)
{
bufferedLogToConsole
(
"
/
/
ERROR
:
expected
"
+
(
enableRef
[
0
]
?
"
"
:
"
(
"
)
+
reference
[
0
]
+
(
enableRef
[
0
]
?
"
"
:
"
)
"
)
+
"
"
+
(
enableRef
[
1
]
?
"
"
:
"
(
"
)
+
reference
[
1
]
+
(
enableRef
[
1
]
?
"
"
:
"
)
"
)
+
"
"
+
(
enableRef
[
2
]
?
"
"
:
"
(
"
)
+
reference
[
2
]
+
(
enableRef
[
2
]
?
"
"
:
"
)
"
)
+
"
"
+
(
enableRef
[
3
]
?
"
"
:
"
(
"
)
+
reference
[
3
]
+
(
enableRef
[
3
]
?
"
"
:
"
)
"
)
)
;
return
false
;
}
return
true
;
}
;
}
)
;
