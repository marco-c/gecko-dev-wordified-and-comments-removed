'
use
strict
'
;
goog
.
provide
(
'
framework
.
common
.
tcuSkipList
'
)
;
goog
.
scope
(
function
(
)
{
var
tcuSkipList
=
framework
.
common
.
tcuSkipList
;
var
_skipEntries
=
{
}
;
var
_wildcardSkipEntries
=
{
}
;
var
_reason
=
"
"
;
function
_setReason
(
reason
)
{
_reason
=
reason
;
}
function
_skip
(
testName
)
{
if
(
testName
.
indexOf
(
"
*
"
)
>
=
0
)
{
testName
=
testName
.
split
(
"
*
"
)
[
0
]
;
_wildcardSkipEntries
[
testName
]
=
_reason
;
}
else
{
_skipEntries
[
testName
]
=
_reason
;
}
}
var
runSkippedTests
=
false
;
var
queryVars
=
window
.
location
.
search
.
substring
(
1
)
.
split
(
'
&
'
)
;
for
(
var
i
=
0
;
i
<
queryVars
.
length
;
i
+
+
)
{
var
value
=
queryVars
[
i
]
.
split
(
'
=
'
)
;
if
(
decodeURIComponent
(
value
[
0
]
)
=
=
=
'
runSkippedTests
'
)
{
runSkippedTests
=
true
;
break
;
}
}
if
(
!
runSkippedTests
)
{
_setReason
(
"
Native
dEQP
also
fails
on
these
tests
and
suppresses
them
"
)
;
_skip
(
"
texture_functions
.
textureoffset
.
sampler3d_fixed_fragment
"
)
;
_skip
(
"
texture_functions
.
textureoffset
.
isampler3d_fragment
"
)
;
_skip
(
"
texture_functions
.
textureoffset
.
usampler3d_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojoffset
.
sampler3d_fixed_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojoffset
.
isampler3d_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojoffset
.
usampler3d_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojlod
.
isampler3d_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojlod
.
usampler3d_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojlodoffset
.
usampler3d_vertex
"
)
;
_skip
(
"
texture_functions
.
textureoffset
.
sampler3d_float_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojoffset
.
sampler3d_float_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojlodoffset
.
isampler3d_vertex
"
)
;
_skip
(
"
texture_functions
.
texturegrad
.
samplercubeshadow
*
"
)
;
_setReason
(
"
Tricky
blit
rects
can
result
in
imperfect
copies
on
some
HW
.
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag_reverse_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag_reverse_src_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag_reverse_src_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag_reverse_src_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_min
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_min_reverse_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_min_reverse_src_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_min_reverse_src_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_src_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_src_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_src_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_src_dst_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_src_x
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_src_y
"
)
;
_setReason
(
"
Tricky
blit
rects
can
result
in
imperfect
copies
on
Mac
Intel
driver
.
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_mag_reverse_src_dst_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_min_reverse_src_dst_y
"
)
;
_setReason
(
"
Tricky
blit
rects
can
result
in
imperfect
copies
on
some
drivers
.
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_src_x_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_src_y_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_dst_x_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_dst_y_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_src_dst_x_linear
"
)
;
_skip
(
"
blit
.
rect
.
out_of_bounds_reverse_src_dst_y_linear
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_dst_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_mag_reverse_src_dst_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_dst_y
"
)
;
_skip
(
"
blit
.
rect
.
nearest_consistency_out_of_bounds_min_reverse_src_dst_y
"
)
;
_setReason
(
"
Missing
shadow
sampler
functions
in
D3D11
"
)
;
_skip
(
"
texture_functions
.
texture
.
sampler2darrayshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturelod
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturelod
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
texturelodoffset
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturelodoffset
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojlod
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojlod
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojlodoffset
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojlodoffset
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
texturegrad
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturegrad
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
texturegrad
.
sampler2darrayshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturegrad
.
sampler2darrayshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
texturegradoffset
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturegradoffset
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
texturegradoffset
.
sampler2darrayshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
texturegradoffset
.
sampler2darrayshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojgrad
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojgrad
.
sampler2dshadow_fragment
"
)
;
_skip
(
"
texture_functions
.
textureprojgradoffset
.
sampler2dshadow_vertex
"
)
;
_skip
(
"
texture_functions
.
textureprojgradoffset
.
sampler2dshadow_fragment
"
)
;
_setReason
(
"
MacOSX
drivers
share
namespaces
where
they
should
not
"
)
;
_skip
(
"
scoping
.
valid
.
local_int_variable_hides_struct_type_vertex
"
)
;
_skip
(
"
scoping
.
valid
.
local_int_variable_hides_struct_type_fragment
"
)
;
_skip
(
"
scoping
.
valid
.
local_struct_variable_hides_struct_type_vertex
"
)
;
_skip
(
"
scoping
.
valid
.
local_struct_variable_hides_struct_type_fragment
"
)
;
_skip
(
"
scoping
.
valid
.
function_parameter_hides_struct_type_vertex
"
)
;
_skip
(
"
scoping
.
valid
.
function_parameter_hides_struct_type_fragment
"
)
;
_setReason
(
"
NVidia
Linux
drivers
does
not
clamp
gl_FragDepth
to
[
0
.
0
1
.
0
]
"
)
;
_skip
(
"
depth
.
depth_write_clamp
.
depth_component32f
"
)
;
_skip
(
"
depth
.
depth_write_clamp
.
depth32f_stencil8
"
)
;
_skip
(
"
depth
.
depth_test_clamp
.
depth_component32f
"
)
;
_skip
(
"
depth
.
depth_test_clamp
.
depth32f_stencil8
"
)
;
_setReason
(
"
NVidia
Linux
driver
bug
in
nested
uniform
block
location
assignment
"
)
;
_skip
(
"
uniform_api
.
random
.
64
"
)
;
_setReason
(
"
Mac
AMD
/
Linux
AMD
/
older
mesa
handles
clipping
of
wide
points
incorrectly
"
)
;
_skip
(
"
clipping
.
wide_points_full_viewport
"
)
;
_skip
(
"
clipping
.
wide_points_partial_viewport
"
)
;
_setReason
(
"
Some
Windows
AMD
D3D11
drivers
have
issues
with
blit
and
depth
/
stencil
formats
.
"
)
;
_skip
(
"
blit
.
depth_stencil
.
depth24_stencil8_scale
"
)
;
_skip
(
"
blit
.
depth_stencil
.
depth24_stencil8_stencil_only
"
)
;
}
tcuSkipList
.
getSkipStatus
=
function
(
testName
)
{
var
skipEntry
=
_skipEntries
[
testName
]
;
if
(
skipEntry
=
=
=
undefined
)
{
return
this
.
_getWildcardSkipStatus
(
testName
)
;
}
else
{
return
{
'
skip
'
:
true
'
reason
'
:
skipEntry
}
;
}
}
tcuSkipList
.
_getWildcardSkipStatus
=
function
(
testName
)
{
var
skipEntry
;
for
(
var
key
in
_wildcardSkipEntries
)
{
if
(
testName
.
indexOf
(
key
)
>
=
0
)
{
skipEntry
=
_wildcardSkipEntries
[
key
]
;
if
(
skipEntry
!
=
undefined
)
{
return
{
'
skip
'
:
true
'
reason
'
:
skipEntry
}
;
}
}
}
return
{
'
skip
'
:
false
'
reason
'
:
'
'
}
;
}
}
)
;
