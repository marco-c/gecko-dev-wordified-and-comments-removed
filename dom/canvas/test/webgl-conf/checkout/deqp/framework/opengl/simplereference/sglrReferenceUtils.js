'
use
strict
'
;
goog
.
provide
(
'
framework
.
opengl
.
simplereference
.
sglrReferenceUtils
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuFloat
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrDefs
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrGenericVector
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrRenderState
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrRenderer
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrShaders
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrVertexAttrib
'
)
;
goog
.
scope
(
function
(
)
{
var
sglrReferenceUtils
=
framework
.
opengl
.
simplereference
.
sglrReferenceUtils
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
tcuFloat
=
framework
.
common
.
tcuFloat
;
var
rrGenericVector
=
framework
.
referencerenderer
.
rrGenericVector
;
var
rrVertexAttrib
=
framework
.
referencerenderer
.
rrVertexAttrib
;
var
rrRenderer
=
framework
.
referencerenderer
.
rrRenderer
;
var
rrDefs
=
framework
.
referencerenderer
.
rrDefs
;
var
rrShaders
=
framework
.
referencerenderer
.
rrShaders
;
var
rrRenderState
=
framework
.
referencerenderer
.
rrRenderState
;
sglrReferenceUtils
.
mapGLPureIntegerVertexAttributeType
=
function
(
type
)
{
switch
(
type
)
{
case
gl
.
UNSIGNED_BYTE
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT8
;
case
gl
.
UNSIGNED_SHORT
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT16
;
case
gl
.
UNSIGNED_INT
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT32
;
case
gl
.
BYTE
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_INT8
;
case
gl
.
SHORT
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_INT16
;
case
gl
.
INT
:
return
rrVertexAttrib
.
VertexAttribType
.
PURE_INT32
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLFloatVertexAttributeType
=
function
(
type
normalizedInteger
size
)
{
var
useClampingNormalization
=
true
;
switch
(
type
)
{
case
gl
.
FLOAT
:
return
rrVertexAttrib
.
VertexAttribType
.
FLOAT
;
case
gl
.
HALF_FLOAT
:
return
rrVertexAttrib
.
VertexAttribType
.
HALF
;
case
gl
.
UNSIGNED_BYTE
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT8
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM8
;
case
gl
.
UNSIGNED_SHORT
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT16
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM16
;
case
gl
.
UNSIGNED_INT
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT32
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM32
;
case
gl
.
UNSIGNED_INT_2_10_10_10_REV
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT_2_10_10_10_REV
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV
;
case
gl
.
BYTE
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT8
;
else
if
(
useClampingNormalization
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM8_CLAMP
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM8_SCALE
;
case
gl
.
SHORT
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT16
;
else
if
(
useClampingNormalization
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM16_CLAMP
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM16_SCALE
;
case
gl
.
INT
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT32
;
else
if
(
useClampingNormalization
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM32_CLAMP
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM32_SCALE
;
case
gl
.
INT_2_10_10_10_REV
:
if
(
!
normalizedInteger
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT_2_10_10_10_REV
;
else
if
(
useClampingNormalization
)
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP
;
else
return
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLSize
=
function
(
size
)
{
switch
(
size
)
{
case
1
:
return
1
;
case
2
:
return
2
;
case
3
:
return
3
;
case
4
:
return
4
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLPrimitiveType
=
function
(
type
)
{
switch
(
type
)
{
case
gl
.
TRIANGLES
:
return
rrRenderer
.
PrimitiveType
.
TRIANGLES
;
case
gl
.
TRIANGLE_STRIP
:
return
rrRenderer
.
PrimitiveType
.
TRIANGLE_STRIP
;
case
gl
.
TRIANGLE_FAN
:
return
rrRenderer
.
PrimitiveType
.
TRIANGLE_FAN
;
case
gl
.
LINES
:
return
rrRenderer
.
PrimitiveType
.
LINES
;
case
gl
.
LINE_STRIP
:
return
rrRenderer
.
PrimitiveType
.
LINE_STRIP
;
case
gl
.
LINE_LOOP
:
return
rrRenderer
.
PrimitiveType
.
LINE_LOOP
;
case
gl
.
POINTS
:
return
rrRenderer
.
PrimitiveType
.
POINTS
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLIndexType
=
function
(
type
)
{
switch
(
type
)
{
case
gl
.
UNSIGNED_BYTE
:
return
rrDefs
.
IndexType
.
INDEXTYPE_UINT8
;
case
gl
.
UNSIGNED_SHORT
:
return
rrDefs
.
IndexType
.
INDEXTYPE_UINT16
;
case
gl
.
UNSIGNED_INT
:
return
rrDefs
.
IndexType
.
INDEXTYPE_UINT32
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLTestFunc
=
function
(
func
)
{
switch
(
func
)
{
case
gl
.
ALWAYS
:
return
rrRenderState
.
TestFunc
.
ALWAYS
;
case
gl
.
EQUAL
:
return
rrRenderState
.
TestFunc
.
EQUAL
;
case
gl
.
GEQUAL
:
return
rrRenderState
.
TestFunc
.
GEQUAL
;
case
gl
.
GREATER
:
return
rrRenderState
.
TestFunc
.
GREATER
;
case
gl
.
LEQUAL
:
return
rrRenderState
.
TestFunc
.
LEQUAL
;
case
gl
.
LESS
:
return
rrRenderState
.
TestFunc
.
LESS
;
case
gl
.
NEVER
:
return
rrRenderState
.
TestFunc
.
NEVER
;
case
gl
.
NOTEQUAL
:
return
rrRenderState
.
TestFunc
.
NOTEQUAL
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLStencilOp
=
function
(
op
)
{
switch
(
op
)
{
case
gl
.
KEEP
:
return
rrRenderState
.
StencilOp
.
KEEP
;
case
gl
.
ZERO
:
return
rrRenderState
.
StencilOp
.
ZERO
;
case
gl
.
REPLACE
:
return
rrRenderState
.
StencilOp
.
REPLACE
;
case
gl
.
INCR
:
return
rrRenderState
.
StencilOp
.
INCR
;
case
gl
.
DECR
:
return
rrRenderState
.
StencilOp
.
DECR
;
case
gl
.
INCR_WRAP
:
return
rrRenderState
.
StencilOp
.
INCR_WRAP
;
case
gl
.
DECR_WRAP
:
return
rrRenderState
.
StencilOp
.
DECR_WRAP
;
case
gl
.
INVERT
:
return
rrRenderState
.
StencilOp
.
INVERT
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLBlendEquation
=
function
(
equation
)
{
switch
(
equation
)
{
case
gl
.
FUNC_ADD
:
return
rrRenderState
.
BlendEquation
.
ADD
;
case
gl
.
FUNC_SUBTRACT
:
return
rrRenderState
.
BlendEquation
.
SUBTRACT
;
case
gl
.
FUNC_REVERSE_SUBTRACT
:
return
rrRenderState
.
BlendEquation
.
REVERSE_SUBTRACT
;
case
gl
.
MIN
:
return
rrRenderState
.
BlendEquation
.
MIN
;
case
gl
.
MAX
:
return
rrRenderState
.
BlendEquation
.
MAX
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
sglrReferenceUtils
.
mapGLBlendFunc
=
function
(
func
)
{
switch
(
func
)
{
case
gl
.
ZERO
:
return
rrRenderState
.
BlendFunc
.
ZERO
;
case
gl
.
ONE
:
return
rrRenderState
.
BlendFunc
.
ONE
;
case
gl
.
SRC_COLOR
:
return
rrRenderState
.
BlendFunc
.
SRC_COLOR
;
case
gl
.
ONE_MINUS_SRC_COLOR
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_SRC_COLOR
;
case
gl
.
DST_COLOR
:
return
rrRenderState
.
BlendFunc
.
DST_COLOR
;
case
gl
.
ONE_MINUS_DST_COLOR
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_DST_COLOR
;
case
gl
.
SRC_ALPHA
:
return
rrRenderState
.
BlendFunc
.
SRC_ALPHA
;
case
gl
.
ONE_MINUS_SRC_ALPHA
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_SRC_ALPHA
;
case
gl
.
DST_ALPHA
:
return
rrRenderState
.
BlendFunc
.
DST_ALPHA
;
case
gl
.
ONE_MINUS_DST_ALPHA
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_DST_ALPHA
;
case
gl
.
CONSTANT_COLOR
:
return
rrRenderState
.
BlendFunc
.
CONSTANT_COLOR
;
case
gl
.
ONE_MINUS_CONSTANT_COLOR
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_CONSTANT_COLOR
;
case
gl
.
CONSTANT_ALPHA
:
return
rrRenderState
.
BlendFunc
.
CONSTANT_ALPHA
;
case
gl
.
ONE_MINUS_CONSTANT_ALPHA
:
return
rrRenderState
.
BlendFunc
.
ONE_MINUS_CONSTANT_ALPHA
;
case
gl
.
SRC_ALPHA_SATURATE
:
return
rrRenderState
.
BlendFunc
.
SRC_ALPHA_SATURATE
;
default
:
throw
new
Error
(
'
Value
to
do
mapping
not
compatible
'
)
;
}
}
;
}
)
;
