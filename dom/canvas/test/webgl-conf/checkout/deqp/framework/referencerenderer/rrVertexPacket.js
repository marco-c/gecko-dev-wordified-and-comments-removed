'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrVertexPacket
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTexture
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
scope
(
function
(
)
{
var
rrVertexPacket
=
framework
.
referencerenderer
.
rrVertexPacket
;
var
tcuTexture
=
framework
.
common
.
tcuTexture
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
rrVertexPacket
.
VertexPacket
=
function
(
)
{
this
.
instanceNdx
;
this
.
vertexNdx
;
this
.
position
;
this
.
pointSize
;
this
.
outputs
=
[
[
0
0
0
0
]
]
;
}
;
rrVertexPacket
.
VertexPacketAllocator
=
function
(
numberOfVertexOutputs
)
{
this
.
m_numberOfVertexOutputs
=
numberOfVertexOutputs
;
this
.
m_allocations
;
this
.
m_singleAllocPool
=
[
]
;
}
;
rrVertexPacket
.
VertexPacketAllocator
.
prototype
.
getNumVertexOutputs
=
function
(
)
{
return
this
.
m_numberOfVertexOutputs
;
}
;
rrVertexPacket
.
VertexPacketAllocator
.
prototype
.
allocArray
=
function
(
count
)
{
if
(
!
count
)
return
[
]
;
var
extraVaryings
=
(
this
.
m_numberOfVertexOutputs
=
=
0
)
?
(
0
)
:
(
this
.
m_numberOfVertexOutputs
-
1
)
;
var
retVal
=
[
]
;
for
(
var
i
=
0
;
i
<
count
;
+
+
i
)
retVal
.
push
(
new
rrVertexPacket
.
VertexPacket
(
)
)
;
return
retVal
;
}
;
rrVertexPacket
.
VertexPacketAllocator
.
prototype
.
alloc
=
function
(
)
{
var
poolSize
=
8
;
if
(
this
.
m_singleAllocPool
.
length
=
=
0
)
this
.
m_singleAllocPool
=
this
.
allocArray
(
poolSize
)
;
var
packet
=
this
.
m_singleAllocPool
.
pop
(
)
;
return
packet
;
}
;
}
)
;
