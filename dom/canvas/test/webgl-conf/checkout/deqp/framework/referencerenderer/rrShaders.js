'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrShaders
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTexture
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrGenericVector
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrShadingContext
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrVertexAttrib
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrVertexPacket
'
)
;
goog
.
scope
(
function
(
)
{
var
rrShaders
=
framework
.
referencerenderer
.
rrShaders
;
var
tcuTexture
=
framework
.
common
.
tcuTexture
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
rrGenericVector
=
framework
.
referencerenderer
.
rrGenericVector
;
var
rrShadingContext
=
framework
.
referencerenderer
.
rrShadingContext
;
var
rrVertexAttrib
=
framework
.
referencerenderer
.
rrVertexAttrib
;
var
rrVertexPacket
=
framework
.
referencerenderer
.
rrVertexPacket
;
rrShaders
.
VertexInputInfo
=
function
(
)
{
this
.
type
;
}
;
rrShaders
.
VertexVaryingInfo
=
function
(
)
{
this
.
type
;
var
flatshade
=
false
;
}
;
rrShaders
.
FragmentOutputInfo
=
function
(
)
{
this
.
type
;
}
;
rrShaders
.
VertexShader
=
function
(
numInputs
numOutputs
)
{
this
.
m_inputs
=
[
]
;
for
(
var
ndx
=
0
;
ndx
<
numInputs
;
ndx
+
+
)
this
.
m_inputs
[
ndx
]
=
new
rrShaders
.
VertexInputInfo
(
)
;
this
.
m_outputs
=
[
]
;
for
(
var
ndx
=
0
;
ndx
<
numOutputs
;
ndx
+
+
)
this
.
m_outputs
[
ndx
]
=
new
rrShaders
.
VertexVaryingInfo
(
)
;
}
;
rrShaders
.
VertexShader
.
prototype
.
getInputs
=
function
(
)
{
return
this
.
m_inputs
;
}
;
rrShaders
.
VertexShader
.
prototype
.
getOutputs
=
function
(
)
{
return
this
.
m_outputs
;
}
;
rrShaders
.
FragmentShader
=
function
(
numInputs
numOutputs
)
{
this
.
m_inputs
=
[
]
;
for
(
var
ndx
=
0
;
ndx
<
numInputs
;
ndx
+
+
)
this
.
m_inputs
[
ndx
]
=
new
rrShaders
.
VertexVaryingInfo
(
)
;
this
.
m_outputs
=
[
]
;
for
(
var
ndx
=
0
;
ndx
<
numOutputs
;
ndx
+
+
)
this
.
m_outputs
[
ndx
]
=
new
rrShaders
.
FragmentOutputInfo
(
)
;
this
.
m_container
;
}
;
rrShaders
.
FragmentShader
.
prototype
.
getInputs
=
function
(
)
{
return
this
.
m_inputs
;
}
;
rrShaders
.
FragmentShader
.
prototype
.
getOutputs
=
function
(
)
{
return
this
.
m_outputs
;
}
;
}
)
;
