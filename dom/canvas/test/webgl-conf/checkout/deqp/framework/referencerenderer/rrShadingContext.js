'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrShadingContext
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrFragmentOperations
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrDefs
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrFragmentOperations
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrGenericVector
'
)
;
goog
.
scope
(
function
(
)
{
var
rrShadingContext
=
framework
.
referencerenderer
.
rrShadingContext
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
rrDefs
=
framework
.
referencerenderer
.
rrDefs
;
var
rrFragmentOperations
=
framework
.
referencerenderer
.
rrFragmentOperations
;
var
rrGenericVector
=
framework
.
referencerenderer
.
rrGenericVector
;
var
DE_ASSERT
=
function
(
x
)
{
if
(
!
x
)
throw
new
Error
(
'
Assert
failed
'
)
;
}
;
rrShadingContext
.
FragmentShadingContext
=
function
(
varying0
varying1
varying2
)
{
this
.
varyings
=
[
varying0
varying1
varying2
]
;
this
.
m_width
=
0xFFFFFFFF
;
this
.
m_height
=
0xFFFFFFFF
;
}
;
rrShadingContext
.
FragmentShadingContext
.
prototype
.
setSize
=
function
(
width
height
)
{
this
.
m_width
=
width
;
this
.
m_height
=
height
;
}
;
rrShadingContext
.
FragmentShadingContext
.
prototype
.
getWidth
=
function
(
)
{
return
this
.
m_width
;
}
;
rrShadingContext
.
FragmentShadingContext
.
prototype
.
getHeight
=
function
(
)
{
return
this
.
m_height
;
}
;
rrShadingContext
.
readTriangleVarying
=
function
(
packet
context
varyingLoc
)
{
var
result
=
deMath
.
scale
(
context
.
varyings
[
0
]
[
varyingLoc
]
packet
.
barycentric
[
0
]
)
;
if
(
context
.
varyings
[
1
]
)
result
=
deMath
.
add
(
result
deMath
.
scale
(
context
.
varyings
[
1
]
[
varyingLoc
]
packet
.
barycentric
[
1
]
)
)
;
if
(
context
.
varyings
[
2
]
)
result
=
deMath
.
add
(
result
deMath
.
scale
(
context
.
varyings
[
2
]
[
varyingLoc
]
packet
.
barycentric
[
2
]
)
)
;
return
result
;
}
;
rrShadingContext
.
readVarying
=
function
(
packet
context
varyingLoc
)
{
return
rrShadingContext
.
readTriangleVarying
(
packet
context
varyingLoc
)
;
}
;
}
)
;
