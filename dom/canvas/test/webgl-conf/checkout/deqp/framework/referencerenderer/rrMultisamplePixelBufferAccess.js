'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrMultisamplePixelBufferAccess
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTexture
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTextureUtil
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
scope
(
function
(
)
{
var
rrMultisamplePixelBufferAccess
=
framework
.
referencerenderer
.
rrMultisamplePixelBufferAccess
;
var
tcuTexture
=
framework
.
common
.
tcuTexture
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
tcuTextureUtil
=
framework
.
common
.
tcuTextureUtil
;
var
DE_ASSERT
=
function
(
x
)
{
if
(
!
x
)
throw
new
Error
(
'
Assert
failed
'
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
=
function
(
rawAccess
)
{
this
.
m_access
=
rawAccess
|
|
new
tcuTexture
.
PixelBufferAccess
(
{
width
:
0
height
:
0
}
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
raw
=
function
(
)
{
return
this
.
m_access
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
isEmpty
=
function
(
)
{
return
this
.
m_access
.
isEmpty
(
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
getNumSamples
=
function
(
)
{
return
this
.
raw
(
)
.
getWidth
(
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
toSinglesampleAccess
=
function
(
)
{
DE_ASSERT
(
this
.
getNumSamples
(
)
=
=
1
)
;
return
new
tcuTexture
.
PixelBufferAccess
(
{
format
:
this
.
m_access
.
getFormat
(
)
width
:
this
.
m_access
.
getHeight
(
)
height
:
this
.
m_access
.
getDepth
(
)
depth
:
1
rowPitch
:
this
.
m_access
.
getSlicePitch
(
)
slicePitch
:
this
.
m_access
.
getSlicePitch
(
)
*
this
.
m_access
.
getDepth
(
)
data
:
this
.
m_access
.
m_data
offset
:
this
.
m_access
.
m_offset
}
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
fromSinglesampleAccess
=
function
(
original
)
{
return
new
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
(
new
tcuTexture
.
PixelBufferAccess
(
{
format
:
original
.
getFormat
(
)
width
:
1
height
:
original
.
getWidth
(
)
depth
:
original
.
getHeight
(
)
rowPitch
:
original
.
getFormat
(
)
.
getPixelSize
(
)
slicePitch
:
original
.
getRowPitch
(
)
data
:
original
.
m_data
offset
:
original
.
m_offset
}
)
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
fromMultisampleAccess
=
function
(
multisampledAccess
)
{
return
new
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
(
multisampledAccess
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
getSubregion
=
function
(
region
)
{
var
x
=
region
[
0
]
;
var
y
=
region
[
1
]
;
var
width
=
region
[
2
]
;
var
height
=
region
[
3
]
;
return
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
fromMultisampleAccess
(
tcuTextureUtil
.
getSubregion
(
this
.
raw
(
)
0
x
y
this
.
getNumSamples
(
)
width
height
)
)
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
getBufferSize
=
function
(
)
{
return
[
0
0
this
.
raw
(
)
.
getHeight
(
)
this
.
raw
(
)
.
getDepth
(
)
]
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
resolveMultisampleColorBuffer
=
function
(
dst
)
{
var
src
=
this
;
DE_ASSERT
(
dst
.
getWidth
(
)
=
=
src
.
raw
(
)
.
getHeight
(
)
)
;
DE_ASSERT
(
dst
.
getHeight
(
)
=
=
src
.
raw
(
)
.
getDepth
(
)
)
;
var
numSamples
=
src
.
getNumSamples
(
)
;
var
sum
=
[
0
0
0
0
]
;
for
(
var
y
=
0
;
y
<
dst
.
getHeight
(
)
;
y
+
+
)
{
for
(
var
x
=
0
;
x
<
dst
.
getWidth
(
)
;
x
+
+
)
{
sum
[
0
]
=
0
;
sum
[
1
]
=
0
;
sum
[
2
]
=
0
;
sum
[
3
]
=
0
;
for
(
var
s
=
0
;
s
<
src
.
raw
(
)
.
getWidth
(
)
;
s
+
+
)
{
var
pixel
=
src
.
raw
(
)
.
getPixel
(
s
x
y
)
;
sum
[
0
]
+
=
pixel
[
0
]
;
sum
[
1
]
+
=
pixel
[
1
]
;
sum
[
2
]
+
=
pixel
[
2
]
;
sum
[
3
]
+
=
pixel
[
3
]
;
}
sum
[
0
]
/
=
numSamples
;
sum
[
1
]
/
=
numSamples
;
sum
[
2
]
/
=
numSamples
;
sum
[
3
]
/
=
numSamples
;
dst
.
setPixel
(
sum
x
y
)
;
}
}
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
resolveMultisamplePixel
=
function
(
x
y
)
{
var
sum
=
[
0
0
0
0
]
;
for
(
var
s
=
0
;
s
<
this
.
getNumSamples
(
)
;
s
+
+
)
sum
=
deMath
.
add
(
sum
this
.
raw
(
)
.
getPixel
(
s
x
y
)
)
;
for
(
var
i
=
0
;
i
<
sum
.
length
;
i
+
+
)
sum
[
i
]
=
sum
[
i
]
/
this
.
getNumSamples
(
)
;
return
sum
;
}
;
rrMultisamplePixelBufferAccess
.
MultisamplePixelBufferAccess
.
prototype
.
clear
=
function
(
color
)
{
this
.
raw
(
)
.
clear
(
color
)
;
}
;
}
)
;
