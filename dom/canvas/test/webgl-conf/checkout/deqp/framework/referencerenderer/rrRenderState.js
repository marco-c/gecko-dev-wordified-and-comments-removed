'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrRenderState
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuTexture
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrDefs
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrMultisamplePixelBufferAccess
'
)
;
goog
.
scope
(
function
(
)
{
var
rrRenderState
=
framework
.
referencerenderer
.
rrRenderState
;
var
tcuTexture
=
framework
.
common
.
tcuTexture
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
rrMultisamplePixelBufferAccess
=
framework
.
referencerenderer
.
rrMultisamplePixelBufferAccess
;
var
rrDefs
=
framework
.
referencerenderer
.
rrDefs
;
rrRenderState
.
HorizontalFill
=
{
LEFT
:
0
RIGHT
:
1
}
;
rrRenderState
.
VerticalFill
=
{
TOP
:
0
BOTTOM
:
1
}
;
rrRenderState
.
Winding
=
{
CCW
:
0
CC
:
1
}
;
rrRenderState
.
CullMode
=
{
NONE
:
0
BACK
:
1
FRONT
:
2
}
;
rrRenderState
.
RasterizationState
=
function
(
)
{
this
.
winding
=
rrRenderState
.
Winding
.
CCW
;
this
.
horizontalFill
=
rrRenderState
.
HorizontalFill
.
LEFT
;
this
.
verticalFill
=
rrRenderState
.
VerticalFill
.
BOTTOM
;
}
;
rrRenderState
.
TestFunc
=
{
NEVER
:
0
ALWAYS
:
1
LESS
:
2
LEQUAL
:
3
GREATER
:
4
GEQUAL
:
5
EQUAL
:
6
NOTEQUAL
:
7
}
;
rrRenderState
.
StencilOp
=
{
KEEP
:
0
ZERO
:
1
REPLACE
:
2
INCR
:
3
DECR
:
4
INCR_WRAP
:
5
DECR_WRAP
:
6
INVERT
:
7
}
;
rrRenderState
.
BlendMode
=
{
NONE
:
0
STANDARD
:
1
}
;
rrRenderState
.
BlendEquation
=
{
ADD
:
0
SUBTRACT
:
1
REVERSE_SUBTRACT
:
2
MIN
:
3
MAX
:
4
}
;
rrRenderState
.
BlendFunc
=
{
ZERO
:
0
ONE
:
1
SRC_COLOR
:
2
ONE_MINUS_SRC_COLOR
:
3
DST_COLOR
:
4
ONE_MINUS_DST_COLOR
:
5
SRC_ALPHA
:
6
ONE_MINUS_SRC_ALPHA
:
7
DST_ALPHA
:
8
ONE_MINUS_DST_ALPHA
:
9
CONSTANT_COLOR
:
10
ONE_MINUS_CONSTANT_COLOR
:
11
CONSTANT_ALPHA
:
12
ONE_MINUS_CONSTANT_ALPHA
:
13
SRC_ALPHA_SATURATE
:
14
SRC1_COLOR
:
15
ONE_MINUS_SRC1_COLOR
:
16
SRC1_ALPHA
:
17
ONE_MINUS_SRC1_ALPHA
:
18
}
;
rrRenderState
.
StencilState
=
function
(
)
{
this
.
func
=
rrRenderState
.
TestFunc
.
ALWAYS
;
this
.
ref
=
0
;
this
.
compMask
=
~
0
;
this
.
sFail
=
rrRenderState
.
StencilOp
.
KEEP
;
this
.
dpFail
=
rrRenderState
.
StencilOp
.
KEEP
;
this
.
dpPass
=
rrRenderState
.
StencilOp
.
KEEP
;
this
.
writeMask
=
~
0
;
}
;
rrRenderState
.
BlendState
=
function
(
)
{
this
.
equation
=
rrRenderState
.
BlendEquation
.
ADD
;
this
.
srcFunc
=
rrRenderState
.
BlendFunc
.
ONE
;
this
.
dstFunc
=
rrRenderState
.
BlendFunc
.
ZERO
;
}
;
rrRenderState
.
WindowRectangle
=
function
(
left_
bottom_
width_
height_
)
{
if
(
left_
.
length
&
&
left_
.
length
=
=
4
)
{
this
.
left
=
left_
[
0
]
;
this
.
bottom
=
left_
[
1
]
;
this
.
width
=
left_
[
2
]
;
this
.
height
=
left_
[
3
]
;
}
else
{
this
.
left
=
left_
;
this
.
bottom
=
bottom_
;
this
.
width
=
width_
;
this
.
height
=
height_
;
}
}
;
rrRenderState
.
FragmentOperationState
=
function
(
)
{
this
.
scissorTestEnabled
=
false
;
this
.
scissorRectangle
=
new
rrRenderState
.
WindowRectangle
(
0
0
1
1
)
;
this
.
stencilTestEnabled
=
false
;
this
.
stencilStates
=
[
]
;
for
(
var
type
in
rrDefs
.
FaceType
)
this
.
stencilStates
[
rrDefs
.
FaceType
[
type
]
]
=
new
rrRenderState
.
StencilState
(
)
;
this
.
depthTestEnabled
=
false
;
this
.
depthFunc
=
rrRenderState
.
TestFunc
.
LESS
;
this
.
depthMask
=
true
;
this
.
blendMode
=
rrRenderState
.
BlendMode
.
NONE
;
this
.
blendRGBState
=
new
rrRenderState
.
BlendState
(
)
;
this
.
blendAState
=
new
rrRenderState
.
BlendState
(
)
;
this
.
blendColor
=
[
0
.
0
0
.
0
0
.
0
0
.
0
]
;
this
.
sRGBEnabled
=
true
;
this
.
depthClampEnabled
=
false
;
this
.
polygonOffsetEnabled
=
false
;
this
.
polygonOffsetFactor
=
0
.
0
;
this
.
polygonOffsetUnits
=
0
.
0
;
this
.
colorMask
=
[
true
true
true
true
]
;
this
.
numStencilBits
=
8
;
}
;
rrRenderState
.
PointState
=
function
(
)
{
this
.
pointSize
=
1
.
0
;
}
;
rrRenderState
.
LineState
=
function
(
)
{
this
.
lineWidth
=
1
.
0
;
}
;
rrRenderState
.
ViewportState
=
function
(
rect_
)
{
this
.
zn
=
0
.
0
;
this
.
zf
=
1
.
0
;
this
.
rect
;
if
(
rect_
.
raw
)
{
this
.
rect
=
new
rrRenderState
.
WindowRectangle
(
0
0
rect_
.
raw
(
)
.
getHeight
(
)
rect_
.
raw
(
)
.
getDepth
(
)
)
;
}
else
{
this
.
rect
=
(
rect_
)
;
}
}
;
rrRenderState
.
RestartState
=
function
(
)
{
this
.
enabled
=
false
;
this
.
restartIndex
=
0xFFFFFFFF
;
}
;
rrRenderState
.
RenderState
=
function
(
viewport_
)
{
this
.
cullMode
=
rrRenderState
.
CullMode
.
NONE
;
this
.
provokingVertexConvention
;
this
.
viewport
=
viewport_
;
this
.
rasterization
=
new
rrRenderState
.
RasterizationState
(
)
;
this
.
fragOps
=
new
rrRenderState
.
FragmentOperationState
(
)
;
this
.
point
=
new
rrRenderState
.
PointState
(
)
;
this
.
line
=
new
rrRenderState
.
LineState
(
)
;
this
.
restart
=
new
rrRenderState
.
RestartState
(
)
;
}
;
}
)
;
