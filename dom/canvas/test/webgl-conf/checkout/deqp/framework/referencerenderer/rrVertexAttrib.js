'
use
strict
'
;
goog
.
provide
(
'
framework
.
referencerenderer
.
rrVertexAttrib
'
)
;
goog
.
require
(
'
framework
.
common
.
tcuFloat
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
require
(
'
framework
.
referencerenderer
.
rrGenericVector
'
)
;
goog
.
scope
(
function
(
)
{
var
rrVertexAttrib
=
framework
.
referencerenderer
.
rrVertexAttrib
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
tcuFloat
=
framework
.
common
.
tcuFloat
;
var
rrGenericVector
=
framework
.
referencerenderer
.
rrGenericVector
;
var
DE_ASSERT
=
function
(
x
)
{
if
(
!
x
)
throw
new
Error
(
'
Assert
failed
'
)
;
}
;
rrVertexAttrib
.
NormalOrder
=
{
T0
:
0
T1
:
1
T2
:
2
T3
:
3
}
;
rrVertexAttrib
.
BGRAOrder
=
{
T0
:
2
T1
:
1
T2
:
0
T3
:
3
}
;
rrVertexAttrib
.
VertexAttribType
=
{
FLOAT
:
0
HALF
:
1
FIXED
:
2
DOUBLE
:
3
NONPURE_UNORM8
:
4
NONPURE_UNORM16
:
5
NONPURE_UNORM32
:
6
NONPURE_UNORM_2_10_10_10_REV
:
7
NONPURE_SNORM8_CLAMP
:
8
NONPURE_SNORM16_CLAMP
:
9
NONPURE_SNORM32_CLAMP
:
10
NONPURE_SNORM_2_10_10_10_REV_CLAMP
:
11
NONPURE_SNORM8_SCALE
:
12
NONPURE_SNORM16_SCALE
:
13
NONPURE_SNORM32_SCALE
:
14
NONPURE_SNORM_2_10_10_10_REV_SCALE
:
15
NONPURE_UINT8
:
16
NONPURE_UINT16
:
17
NONPURE_UINT32
:
18
NONPURE_INT8
:
19
NONPURE_INT16
:
20
NONPURE_INT32
:
21
NONPURE_UINT_2_10_10_10_REV
:
22
NONPURE_INT_2_10_10_10_REV
:
23
PURE_UINT8
:
24
PURE_UINT16
:
25
PURE_UINT32
:
26
PURE_INT8
:
27
PURE_INT16
:
28
PURE_INT32
:
29
NONPURE_UNORM8_BGRA
:
30
NONPURE_UNORM_2_10_10_10_REV_BGRA
:
31
NONPURE_SNORM_2_10_10_10_REV_CLAMP_BGRA
:
32
NONPURE_SNORM_2_10_10_10_REV_SCALE_BGRA
:
33
DONT_CARE
:
34
}
;
rrVertexAttrib
.
VertexAttrib
=
function
(
)
{
this
.
type
=
rrVertexAttrib
.
VertexAttribType
.
FLOAT
;
this
.
size
=
0
;
this
.
stride
=
0
;
this
.
instanceDivisor
=
0
;
this
.
offset
=
0
;
this
.
pointer
=
null
;
this
.
generic
;
}
;
rrVertexAttrib
.
getComponentSize
=
function
(
type
)
{
switch
(
type
)
{
case
rrVertexAttrib
.
VertexAttribType
.
FLOAT
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
HALF
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
FIXED
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
DOUBLE
:
return
8
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM8
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM16
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM32
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM8_CLAMP
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM16_CLAMP
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM32_CLAMP
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM8_SCALE
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM16_SCALE
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM32_SCALE
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT8
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT16
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT32
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT8
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT16
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT32
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT_2_10_10_10_REV
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT_2_10_10_10_REV
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT8
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT16
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT32
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT8
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT16
:
return
2
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT32
:
return
4
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM8_BGRA
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV_BGRA
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP_BGRA
:
return
1
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE_BGRA
:
return
1
;
default
:
throw
new
Error
(
'
rrVertexAttrib
.
getComponentSize
-
Invalid
type
'
)
;
}
}
;
rrVertexAttrib
.
isValidVertexAttrib
=
function
(
vertexAttrib
)
{
if
(
!
deMath
.
deInBounds32
(
vertexAttrib
.
type
0
Object
.
keys
(
rrVertexAttrib
.
VertexAttribType
)
.
length
)
|
|
!
deMath
.
deInRange32
(
vertexAttrib
.
size
0
4
)
|
|
vertexAttrib
.
instanceDivisor
<
0
)
return
false
;
if
(
!
vertexAttrib
.
pointer
&
&
vertexAttrib
.
type
!
=
rrVertexAttrib
.
VertexAttribType
.
DONT_CARE
)
return
false
;
if
(
(
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT_2_10_10_10_REV
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT_2_10_10_10_REV
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV_BGRA
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP_BGRA
|
|
vertexAttrib
.
type
=
=
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE_BGRA
)
&
&
vertexAttrib
.
size
!
=
4
)
return
false
;
return
true
;
}
;
rrVertexAttrib
.
readVertexAttrib
=
function
(
vertexAttrib
instanceNdx
vertexNdx
genericType
)
{
DE_ASSERT
(
rrVertexAttrib
.
isValidVertexAttrib
(
vertexAttrib
)
)
;
var
dst
;
var
arrayType
=
null
;
switch
(
genericType
)
{
case
rrGenericVector
.
GenericVecType
.
INT32
:
arrayType
=
Int32Array
;
break
;
case
rrGenericVector
.
GenericVecType
.
UINT32
:
arrayType
=
Uint32Array
;
break
;
case
rrGenericVector
.
GenericVecType
.
FLOAT
:
arrayType
=
Float32Array
;
break
;
}
if
(
vertexAttrib
.
pointer
)
{
var
elementNdx
=
(
vertexAttrib
.
instanceDivisor
!
=
0
)
?
(
instanceNdx
/
vertexAttrib
.
instanceDivisor
)
:
vertexNdx
;
var
compSize
=
rrVertexAttrib
.
getComponentSize
(
vertexAttrib
.
type
)
;
var
stride
=
(
vertexAttrib
.
stride
!
=
0
)
?
(
vertexAttrib
.
stride
)
:
(
vertexAttrib
.
size
*
compSize
)
;
var
byteOffset
=
vertexAttrib
.
offset
+
(
elementNdx
*
stride
)
;
dst
=
[
0
0
0
1
]
;
if
(
arrayType
!
=
null
)
{
dst
=
new
arrayType
(
dst
)
;
}
rrVertexAttrib
.
read
(
dst
vertexAttrib
.
type
vertexAttrib
.
size
new
Uint8Array
(
vertexAttrib
.
pointer
byteOffset
)
)
;
}
else
{
dst
=
new
arrayType
(
vertexAttrib
.
generic
.
data
)
;
}
return
dst
;
}
;
rrVertexAttrib
.
readHalf
=
function
(
dst
size
ptr
)
{
var
arraysize16
=
2
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize16
)
)
;
var
aligned
=
new
Uint16Array
(
ptrclone
.
buffer
)
;
dst
[
0
]
=
tcuFloat
.
newFloat32From16
(
aligned
[
0
]
)
.
getValue
(
)
;
if
(
size
>
=
2
)
dst
[
1
]
=
tcuFloat
.
newFloat32From16
(
aligned
[
1
]
)
.
getValue
(
)
;
if
(
size
>
=
3
)
dst
[
2
]
=
tcuFloat
.
newFloat32From16
(
aligned
[
2
]
)
.
getValue
(
)
;
if
(
size
>
=
4
)
dst
[
3
]
=
tcuFloat
.
newFloat32From16
(
aligned
[
3
]
)
.
getValue
(
)
;
}
;
rrVertexAttrib
.
extendSign
=
function
(
integerLen
integer_
)
{
return
new
Int32Array
(
[
deMath
.
binaryOp
(
0
-
deMath
.
shiftLeft
(
deMath
.
binaryOp
(
integer_
deMath
.
shiftLeft
(
1
(
integerLen
-
1
)
)
deMath
.
BinaryOp
.
AND
)
1
)
integer_
deMath
.
BinaryOp
.
OR
)
]
)
[
0
]
;
}
;
rrVertexAttrib
.
readUint2101010Rev
=
function
(
dst
size
ptr
)
{
var
arraysize32
=
4
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize32
)
)
;
var
aligned
=
new
Uint32Array
(
ptrclone
.
buffer
)
[
0
]
;
dst
[
0
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
0
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
;
if
(
size
>
=
2
)
dst
[
1
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
10
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
;
if
(
size
>
=
3
)
dst
[
2
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
20
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
;
if
(
size
>
=
4
)
dst
[
3
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
30
)
deMath
.
shiftLeft
(
1
2
)
-
1
deMath
.
BinaryOp
.
AND
)
;
}
;
rrVertexAttrib
.
readInt2101010Rev
=
function
(
dst
size
ptr
)
{
var
arraysize32
=
4
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize32
)
)
;
var
aligned
=
new
Uint32Array
(
ptrclone
.
buffer
)
[
0
]
;
dst
[
0
]
=
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
0
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
;
if
(
size
>
=
2
)
dst
[
1
]
=
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
10
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
;
if
(
size
>
=
3
)
dst
[
2
]
=
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
20
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
;
if
(
size
>
=
4
)
dst
[
3
]
=
rrVertexAttrib
.
extendSign
(
2
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
30
)
deMath
.
shiftLeft
(
1
2
)
-
1
deMath
.
BinaryOp
.
AND
)
)
;
}
;
rrVertexAttrib
.
readUnorm2101010RevOrder
=
function
(
dst
size
ptr
order
)
{
var
arraysize32
=
4
;
var
range10
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
10
)
-
1
]
)
[
0
]
;
var
range2
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
2
)
-
1
]
)
[
0
]
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize32
)
)
;
var
aligned
=
new
Uint32Array
(
ptrclone
.
buffer
)
[
0
]
;
dst
[
order
.
T0
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
0
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
/
range10
;
if
(
size
>
=
2
)
dst
[
order
.
T1
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
10
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
/
range10
;
if
(
size
>
=
3
)
dst
[
order
.
T2
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
20
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
/
range10
;
if
(
size
>
=
4
)
dst
[
order
.
T3
]
=
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
30
)
deMath
.
shiftLeft
(
1
2
)
-
1
deMath
.
BinaryOp
.
AND
)
/
range2
;
}
;
rrVertexAttrib
.
readSnorm2101010RevClampOrder
=
function
(
dst
size
ptr
order
)
{
var
arraysize32
=
4
;
var
range10
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
10
-
1
)
-
1
]
)
[
0
]
;
var
range2
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
2
-
1
)
-
1
]
)
[
0
]
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize32
)
)
;
var
aligned
=
new
Uint32Array
(
ptrclone
.
buffer
)
[
0
]
;
dst
[
order
.
T0
]
=
Math
.
max
(
-
1
.
0
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
0
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
]
)
[
0
]
/
range10
)
;
if
(
size
>
=
2
)
dst
[
order
.
T1
]
=
Math
.
max
(
-
1
.
0
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
10
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
]
)
[
0
]
/
range10
)
;
if
(
size
>
=
3
)
dst
[
order
.
T2
]
=
Math
.
max
(
-
1
.
0
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
20
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
]
)
[
0
]
/
range10
)
;
if
(
size
>
=
4
)
dst
[
order
.
T3
]
=
Math
.
max
(
-
1
.
0
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
2
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
30
)
deMath
.
shiftLeft
(
1
2
)
-
1
deMath
.
BinaryOp
.
AND
)
)
]
)
[
0
]
/
range2
)
;
}
;
rrVertexAttrib
.
readSnorm2101010RevScaleOrder
=
function
(
dst
size
ptr
order
)
{
var
arraysize32
=
4
;
var
range10
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
10
)
-
1
]
)
[
0
]
;
var
range2
=
new
Uint32Array
(
[
deMath
.
shiftLeft
(
1
2
)
-
1
]
)
[
0
]
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arraysize32
)
)
;
var
aligned
=
new
Uint32Array
(
ptrclone
.
buffer
)
[
0
]
;
dst
[
order
.
T0
]
=
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
0
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
*
2
.
0
+
1
.
0
]
)
[
0
]
/
range10
;
if
(
size
>
=
2
)
dst
[
order
.
T1
]
=
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
10
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
*
2
.
0
+
1
.
0
]
)
[
0
]
/
range10
;
if
(
size
>
=
3
)
dst
[
order
.
T2
]
=
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
10
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
20
)
deMath
.
shiftLeft
(
1
10
)
-
1
deMath
.
BinaryOp
.
AND
)
)
*
2
.
0
+
1
.
0
]
)
[
0
]
/
range10
;
if
(
size
>
=
4
)
dst
[
order
.
T3
]
=
new
Float32Array
(
[
rrVertexAttrib
.
extendSign
(
2
deMath
.
binaryOp
(
deMath
.
shiftRight
(
aligned
30
)
deMath
.
shiftLeft
(
1
2
)
-
1
deMath
.
BinaryOp
.
AND
)
)
*
2
.
0
+
1
.
0
]
)
[
0
]
/
range2
;
}
;
rrVertexAttrib
.
readUnormOrder
=
function
(
dst
size
ptr
order
readAsTypeArray
)
{
var
arrayelementsize
=
readAsTypeArray
.
BYTES_PER_ELEMENT
;
var
range
=
new
Float32Array
(
[
deMath
.
shiftLeft
(
1
arrayelementsize
*
8
)
-
1
]
)
[
0
]
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arrayelementsize
)
)
;
var
aligned
=
new
readAsTypeArray
(
ptrclone
.
buffer
)
;
dst
[
order
.
T0
]
=
aligned
[
0
]
/
range
;
if
(
size
>
=
2
)
dst
[
order
.
T1
]
=
aligned
[
1
]
/
range
;
if
(
size
>
=
3
)
dst
[
order
.
T2
]
=
aligned
[
2
]
/
range
;
if
(
size
>
=
4
)
dst
[
order
.
T3
]
=
aligned
[
3
]
/
range
;
}
;
rrVertexAttrib
.
readSnormClamp
=
function
(
dst
size
ptr
readAsTypeArray
)
{
var
arrayelementsize
=
readAsTypeArray
.
BYTES_PER_ELEMENT
;
var
range
=
new
Float32Array
(
[
deMath
.
shiftLeft
(
1
arrayelementsize
*
8
-
1
)
-
1
]
)
[
0
]
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arrayelementsize
)
)
;
var
aligned
=
new
readAsTypeArray
(
ptrclone
.
buffer
)
;
dst
[
0
]
=
Math
.
max
(
-
1
aligned
[
0
]
/
range
)
;
if
(
size
>
=
2
)
dst
[
1
]
=
Math
.
max
(
-
1
aligned
[
1
]
/
range
)
;
if
(
size
>
=
3
)
dst
[
2
]
=
Math
.
max
(
-
1
aligned
[
2
]
/
range
)
;
if
(
size
>
=
4
)
dst
[
3
]
=
Math
.
max
(
-
1
aligned
[
3
]
/
range
)
;
}
;
rrVertexAttrib
.
readOrder
=
function
(
dst
size
ptr
order
readAsTypeArray
)
{
var
arrayelementsize
=
readAsTypeArray
.
BYTES_PER_ELEMENT
;
var
ptrclone
=
new
Uint8Array
(
ptr
.
subarray
(
0
size
*
arrayelementsize
)
)
;
var
aligned
=
new
readAsTypeArray
(
ptrclone
.
buffer
)
;
dst
[
order
.
T0
]
=
aligned
[
0
]
;
if
(
size
>
=
2
)
dst
[
order
.
T1
]
=
aligned
[
1
]
;
if
(
size
>
=
3
)
dst
[
order
.
T2
]
=
aligned
[
2
]
;
if
(
size
>
=
4
)
dst
[
order
.
T3
]
=
aligned
[
3
]
;
}
;
rrVertexAttrib
.
read
=
function
(
dst
type
size
ptr
)
{
var
order
;
switch
(
type
)
{
case
rrVertexAttrib
.
VertexAttribType
.
FLOAT
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Float32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
HALF
:
rrVertexAttrib
.
readHalf
(
dst
size
ptr
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM8
:
rrVertexAttrib
.
readUnormOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM16
:
rrVertexAttrib
.
readUnormOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM32
:
rrVertexAttrib
.
readUnormOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV
:
rrVertexAttrib
.
readUnorm2101010RevOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM8_CLAMP
:
rrVertexAttrib
.
readSnormClamp
(
dst
size
ptr
Int8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM16_CLAMP
:
rrVertexAttrib
.
readSnormClamp
(
dst
size
ptr
Int16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM32_CLAMP
:
rrVertexAttrib
.
readSnormClamp
(
dst
size
ptr
Int32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP
:
rrVertexAttrib
.
readSnorm2101010RevClampOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE
:
rrVertexAttrib
.
readSnorm2101010RevScaleOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT_2_10_10_10_REV
:
rrVertexAttrib
.
readUint2101010Rev
(
dst
size
ptr
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT_2_10_10_10_REV
:
rrVertexAttrib
.
readInt2101010Rev
(
dst
size
ptr
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM8_BGRA
:
rrVertexAttrib
.
readUnormOrder
(
dst
size
ptr
rrVertexAttrib
.
BGRAOrder
Uint8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UNORM_2_10_10_10_REV_BGRA
:
rrVertexAttrib
.
readUnorm2101010RevOrder
(
dst
size
ptr
rrVertexAttrib
.
BGRAOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_CLAMP_BGRA
:
rrVertexAttrib
.
readSnorm2101010RevClampOrder
(
dst
size
ptr
rrVertexAttrib
.
BGRAOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_SNORM_2_10_10_10_REV_SCALE_BGRA
:
rrVertexAttrib
.
readSnorm2101010RevScaleOrder
(
dst
size
ptr
rrVertexAttrib
.
BGRAOrder
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT8
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT16
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_UINT32
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT8
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT16
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
NONPURE_INT32
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT8
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT16
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_UINT32
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Uint32Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT8
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int8Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT16
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int16Array
)
;
break
;
case
rrVertexAttrib
.
VertexAttribType
.
PURE_INT32
:
rrVertexAttrib
.
readOrder
(
dst
size
ptr
rrVertexAttrib
.
NormalOrder
Int32Array
)
;
break
;
default
:
throw
new
Error
(
'
rrVertexAttrib
.
read
-
Invalid
type
'
)
;
}
}
;
}
)
;
