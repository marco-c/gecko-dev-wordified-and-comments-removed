'
use
strict
'
;
goog
.
provide
(
'
framework
.
delibs
.
debase
.
deUtil
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
scope
(
function
(
)
{
var
deUtil
=
framework
.
delibs
.
debase
.
deUtil
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
deUtil
.
getArrayElement
=
function
(
array
offset
)
{
assertMsgOptions
(
deMath
.
deInBounds32
(
offset
0
array
.
length
)
'
Array
element
out
of
bounds
'
false
true
)
;
return
array
[
offset
]
;
}
;
deUtil
.
clone
=
function
(
obj
)
{
if
(
obj
=
=
null
|
|
typeof
(
obj
)
!
=
'
object
'
)
return
obj
;
var
temp
=
{
}
;
if
(
ArrayBuffer
.
isView
(
obj
)
)
{
temp
=
new
obj
.
constructor
(
obj
)
;
}
else
if
(
obj
instanceof
Array
)
{
temp
=
new
Array
(
obj
.
length
)
;
for
(
var
akey
in
obj
)
temp
[
akey
]
=
deUtil
.
clone
(
obj
[
akey
]
)
;
}
else
if
(
obj
instanceof
ArrayBuffer
)
{
temp
=
new
ArrayBuffer
(
obj
.
byteLength
)
;
var
dst
=
new
Uint8Array
(
temp
)
;
var
src
=
new
Uint8Array
(
obj
)
;
dst
.
set
(
src
)
;
}
else
{
temp
=
Object
.
create
(
obj
.
constructor
.
prototype
)
;
temp
.
constructor
=
obj
.
constructor
;
for
(
var
key
in
obj
)
temp
[
key
]
=
deUtil
.
clone
(
obj
[
key
]
)
;
}
return
temp
;
}
;
deUtil
.
dePushUniqueToArray
=
function
(
array
object
)
{
for
(
var
i
=
0
;
i
<
array
.
length
;
i
+
+
)
{
if
(
object
.
equals
!
=
=
undefined
)
if
(
object
.
equals
(
array
[
i
]
)
)
return
undefined
;
else
if
(
object
=
=
=
array
[
i
]
)
return
undefined
;
}
array
.
push
(
object
)
;
}
;
}
)
;
