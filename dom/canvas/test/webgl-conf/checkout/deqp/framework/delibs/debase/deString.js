'
use
strict
'
;
goog
.
provide
(
'
framework
.
delibs
.
debase
.
deString
'
)
;
goog
.
require
(
'
framework
.
delibs
.
debase
.
deMath
'
)
;
goog
.
scope
(
function
(
)
{
var
deString
=
framework
.
delibs
.
debase
.
deString
;
var
deMath
=
framework
.
delibs
.
debase
.
deMath
;
var
DE_ASSERT
=
function
(
x
)
{
if
(
!
x
)
throw
new
Error
(
'
Assert
failed
'
)
;
}
;
deString
.
deStringHash
=
function
(
str
)
{
var
hash
=
5381
;
var
c
;
DE_ASSERT
(
str
!
=
undefined
)
;
if
(
str
!
=
=
null
)
{
var
i
=
0
;
while
(
i
<
str
.
length
)
{
c
=
str
.
charCodeAt
(
i
)
;
hash
=
(
hash
<
<
5
)
+
hash
+
c
;
i
+
+
;
}
}
return
hash
;
}
;
deString
.
deIsStringEmpty
=
function
(
str
)
{
if
(
str
=
=
=
undefined
|
|
str
.
length
=
=
0
)
return
true
;
return
false
;
}
;
deString
.
getString
=
function
(
enumType
value
)
{
for
(
var
p
in
enumType
)
if
(
enumType
[
p
]
=
=
value
)
return
p
;
if
(
typeof
value
=
=
=
'
undefined
'
)
return
'
undefined
'
;
if
(
!
value
)
return
'
null
'
;
return
value
.
toString
(
10
)
;
}
;
deString
.
enumToString
=
function
(
enumType
value
)
{
if
(
typeof
deString
.
enumToString
[
enumType
]
=
=
=
'
undefined
'
)
deString
.
enumToString
[
enumType
]
=
{
}
;
var
table
=
deString
.
enumToString
[
enumType
]
;
if
(
typeof
table
[
value
]
=
=
=
'
undefined
'
)
{
var
v
=
deString
.
getString
(
enumType
value
)
;
table
[
value
]
=
v
;
}
return
table
[
value
]
;
}
;
}
)
;
