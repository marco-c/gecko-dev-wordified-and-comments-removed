Node
.
prototype
.
contains
=
function
(
n
)
{
}
;
function
HTMLCanvasElement
(
)
{
}
HTMLCanvasElement
.
prototype
.
width
;
HTMLCanvasElement
.
prototype
.
height
;
HTMLCanvasElement
.
prototype
.
toDataURL
=
function
(
opt_type
var_args
)
{
}
;
HTMLCanvasElement
.
prototype
.
getContext
=
function
(
contextId
opt_args
)
{
}
;
function
CanvasRenderingContext2D
(
)
{
}
CanvasRenderingContext2D
.
prototype
.
canvas
;
CanvasRenderingContext2D
.
prototype
.
save
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
restore
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
scale
=
function
(
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
rotate
=
function
(
angle
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
translate
=
function
(
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
transform
=
function
(
m11
m12
m21
m22
dx
dy
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
setTransform
=
function
(
m11
m12
m21
m22
dx
dy
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
createLinearGradient
=
function
(
x0
y0
x1
y1
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
createRadialGradient
=
function
(
x0
y0
r0
x1
y1
r1
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
createPattern
=
function
(
image
repetition
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
clearRect
=
function
(
x
y
w
h
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
fillRect
=
function
(
x
y
w
h
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
strokeRect
=
function
(
x
y
w
h
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
beginPath
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
closePath
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
moveTo
=
function
(
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
lineTo
=
function
(
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
quadraticCurveTo
=
function
(
cpx
cpy
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
bezierCurveTo
=
function
(
cp1x
cp1y
cp2x
cp2y
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
arcTo
=
function
(
x1
y1
x2
y2
radius
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
rect
=
function
(
x
y
w
h
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
arc
=
function
(
x
y
radius
startAngle
endAngle
opt_anticlockwise
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
fill
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
stroke
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
clip
=
function
(
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
isPointInPath
=
function
(
x
y
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
fillText
=
function
(
text
x
y
opt_maxWidth
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
strokeText
=
function
(
text
x
y
opt_maxWidth
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
measureText
=
function
(
text
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
drawImage
=
function
(
image
dx
dy
opt_dw
opt_dh
opt_sx
opt_sy
opt_sw
opt_sh
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
createImageData
=
function
(
sw
sh
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
getImageData
=
function
(
sx
sy
sw
sh
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
putImageData
=
function
(
imagedata
dx
dy
opt_dirtyX
opt_dirtyY
opt_dirtyWidth
opt_dirtyHeight
)
{
}
;
CanvasRenderingContext2D
.
prototype
.
setFillColor
;
CanvasRenderingContext2D
.
prototype
.
setStrokeColor
;
CanvasRenderingContext2D
.
prototype
.
getLineDash
;
CanvasRenderingContext2D
.
prototype
.
setLineDash
;
CanvasRenderingContext2D
.
prototype
.
fillColor
;
CanvasRenderingContext2D
.
prototype
.
fillStyle
;
CanvasRenderingContext2D
.
prototype
.
font
;
CanvasRenderingContext2D
.
prototype
.
globalAlpha
;
CanvasRenderingContext2D
.
prototype
.
globalCompositeOperation
;
CanvasRenderingContext2D
.
prototype
.
lineWidth
;
CanvasRenderingContext2D
.
prototype
.
lineCap
;
CanvasRenderingContext2D
.
prototype
.
lineJoin
;
CanvasRenderingContext2D
.
prototype
.
miterLimit
;
CanvasRenderingContext2D
.
prototype
.
shadowBlur
;
CanvasRenderingContext2D
.
prototype
.
shadowColor
;
CanvasRenderingContext2D
.
prototype
.
shadowOffsetX
;
CanvasRenderingContext2D
.
prototype
.
shadowOffsetY
;
CanvasRenderingContext2D
.
prototype
.
strokeStyle
;
CanvasRenderingContext2D
.
prototype
.
strokeColor
;
CanvasRenderingContext2D
.
prototype
.
textAlign
;
CanvasRenderingContext2D
.
prototype
.
textBaseline
;
function
CanvasGradient
(
)
{
}
CanvasGradient
.
prototype
.
addColorStop
=
function
(
offset
color
)
{
}
;
function
CanvasPattern
(
)
{
}
function
TextMetrics
(
)
{
}
TextMetrics
.
prototype
.
width
;
function
ImageData
(
)
{
}
ImageData
.
prototype
.
data
;
ImageData
.
prototype
.
width
;
ImageData
.
prototype
.
height
;
function
ClientInformation
(
)
{
}
ClientInformation
.
prototype
.
onLine
;
ClientInformation
.
prototype
.
registerProtocolHandler
=
function
(
protocol
uri
title
)
{
}
;
ClientInformation
.
prototype
.
registerContentHandler
=
function
(
mimeType
uri
title
)
{
}
;
function
Database
(
)
{
}
Database
.
prototype
.
version
;
Database
.
prototype
.
transaction
=
function
(
callback
opt_errorCallback
opt_Callback
)
{
}
;
Database
.
prototype
.
readTransaction
=
function
(
callback
opt_errorCallback
opt_Callback
)
{
}
;
Database
.
prototype
.
changeVersion
=
function
(
oldVersion
newVersion
callback
errorCallback
successCallback
)
{
}
;
function
DatabaseCallback
(
)
{
}
DatabaseCallback
.
prototype
.
handleEvent
=
function
(
db
)
{
}
;
function
SQLError
(
)
{
}
SQLError
.
prototype
.
code
;
SQLError
.
prototype
.
message
;
function
SQLTransaction
(
)
{
}
SQLTransaction
.
prototype
.
executeSql
=
function
(
sqlStatement
opt_queryArgs
opt_callback
opt_errorCallback
)
{
}
;
var
SQLStatementCallback
;
function
SQLResultSet
(
)
{
}
SQLResultSet
.
prototype
.
insertId
;
SQLResultSet
.
prototype
.
rowsAffected
;
SQLResultSet
.
prototype
.
rows
;
function
SQLResultSetRowList
(
)
{
}
SQLResultSetRowList
.
prototype
.
length
;
SQLResultSetRowList
.
prototype
.
item
=
function
(
index
)
{
}
;
function
openDatabase
(
name
version
description
size
opt_callback
)
{
}
Window
.
prototype
.
openDatabase
=
function
(
name
version
description
size
opt_callback
)
{
}
;
HTMLImageElement
.
prototype
.
complete
;
HTMLImageElement
.
prototype
.
crossOrigin
;
function
postMessage
(
message
opt_targetOriginOrTransfer
opt_targetOriginOrPortsOrTransfer
)
{
}
Document
.
prototype
.
postMessage
=
function
(
message
)
{
}
;
Document
.
prototype
.
head
;
function
DOMApplicationCache
(
)
{
}
DOMApplicationCache
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
DOMApplicationCache
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
DOMApplicationCache
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
DOMApplicationCache
.
prototype
.
UNCACHED
=
0
;
DOMApplicationCache
.
prototype
.
IDLE
=
1
;
DOMApplicationCache
.
prototype
.
CHECKING
=
2
;
DOMApplicationCache
.
prototype
.
DOWNLOADING
=
3
;
DOMApplicationCache
.
prototype
.
UPDATEREADY
=
4
;
DOMApplicationCache
.
prototype
.
OBSOLETE
=
5
;
DOMApplicationCache
.
prototype
.
status
;
DOMApplicationCache
.
prototype
.
oncached
;
DOMApplicationCache
.
prototype
.
onchecking
;
DOMApplicationCache
.
prototype
.
ondownloading
;
DOMApplicationCache
.
prototype
.
onerror
;
DOMApplicationCache
.
prototype
.
onnoupdate
;
DOMApplicationCache
.
prototype
.
onprogress
;
DOMApplicationCache
.
prototype
.
onupdateready
;
DOMApplicationCache
.
prototype
.
swapCache
=
function
(
)
{
}
;
DOMApplicationCache
.
prototype
.
update
=
function
(
)
{
}
;
var
applicationCache
;
Window
.
prototype
.
applicationCache
;
Window
.
prototype
.
importScripts
=
function
(
var_args
)
{
}
;
var
importScripts
=
function
(
var_args
)
{
}
;
function
WebWorker
(
)
{
}
WebWorker
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
WebWorker
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
WebWorker
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
WebWorker
.
prototype
.
terminate
=
function
(
)
{
}
;
WebWorker
.
prototype
.
postMessage
=
function
(
message
)
{
}
;
WebWorker
.
prototype
.
onmessage
;
WebWorker
.
prototype
.
onerror
;
function
Worker
(
opt_arg0
)
{
}
Worker
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Worker
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Worker
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
Worker
.
prototype
.
terminate
=
function
(
)
{
}
;
Worker
.
prototype
.
postMessage
=
function
(
message
opt_transfer
)
{
}
;
Worker
.
prototype
.
webkitPostMessage
=
function
(
message
opt_transfer
)
{
}
;
Worker
.
prototype
.
onmessage
;
Worker
.
prototype
.
onerror
;
function
SharedWorker
(
scriptURL
opt_name
)
{
}
SharedWorker
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
SharedWorker
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
SharedWorker
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
SharedWorker
.
prototype
.
port
;
SharedWorker
.
prototype
.
onerror
;
function
WorkerLocation
(
)
{
}
WorkerLocation
.
prototype
.
protocol
;
WorkerLocation
.
prototype
.
host
;
WorkerLocation
.
prototype
.
hostname
;
WorkerLocation
.
prototype
.
port
;
WorkerLocation
.
prototype
.
pathname
;
WorkerLocation
.
prototype
.
search
;
WorkerLocation
.
prototype
.
hash
;
function
WorkerGlobalScope
(
)
{
}
WorkerGlobalScope
.
prototype
.
self
;
WorkerGlobalScope
.
prototype
.
location
;
WorkerGlobalScope
.
prototype
.
close
=
function
(
)
{
}
;
WorkerGlobalScope
.
prototype
.
onerror
;
WorkerGlobalScope
.
prototype
.
onoffline
;
WorkerGlobalScope
.
prototype
.
ononline
;
function
DedicatedWorkerGlobalScope
(
)
{
}
DedicatedWorkerGlobalScope
.
prototype
.
postMessage
=
function
(
message
opt_transfer
)
{
}
;
DedicatedWorkerGlobalScope
.
prototype
.
webkitPostMessage
=
function
(
message
opt_transfer
)
{
}
;
DedicatedWorkerGlobalScope
.
prototype
.
onmessage
;
function
SharedWorkerGlobalScope
(
)
{
}
SharedWorkerGlobalScope
.
prototype
.
name
;
SharedWorkerGlobalScope
.
prototype
.
onconnect
;
HTMLElement
.
prototype
.
contextMenu
;
HTMLElement
.
prototype
.
draggable
;
HTMLElement
.
prototype
.
dropzone
;
HTMLElement
.
prototype
.
getElementsByClassName
=
function
(
classNames
)
{
}
;
HTMLElement
.
prototype
.
hidden
;
HTMLElement
.
prototype
.
spellcheck
;
HTMLElement
.
prototype
.
createShadowRoot
;
HTMLElement
.
prototype
.
webkitCreateShadowRoot
;
HTMLElement
.
prototype
.
shadowRoot
;
HTMLElement
.
prototype
.
getDestinationInsertionPoints
=
function
(
)
{
}
;
HTMLElement
.
prototype
.
createdCallback
;
HTMLElement
.
prototype
.
attachedCallback
;
HTMLElement
.
prototype
.
detachedCallback
;
HTMLAnchorElement
.
prototype
.
hash
;
HTMLAnchorElement
.
prototype
.
host
;
HTMLAnchorElement
.
prototype
.
hostname
;
HTMLAnchorElement
.
prototype
.
pathname
;
HTMLAnchorElement
.
prototype
.
ping
;
HTMLAnchorElement
.
prototype
.
port
;
HTMLAnchorElement
.
prototype
.
protocol
;
HTMLAnchorElement
.
prototype
.
search
;
HTMLAreaElement
.
prototype
.
ping
;
HTMLIFrameElement
.
prototype
.
srcdoc
;
HTMLInputElement
.
prototype
.
autocomplete
;
HTMLInputElement
.
prototype
.
dirname
;
HTMLInputElement
.
prototype
.
files
;
HTMLInputElement
.
prototype
.
list
;
HTMLInputElement
.
prototype
.
max
;
HTMLInputElement
.
prototype
.
min
;
HTMLInputElement
.
prototype
.
pattern
;
HTMLInputElement
.
prototype
.
multiple
;
HTMLInputElement
.
prototype
.
placeholder
;
HTMLInputElement
.
prototype
.
required
;
HTMLInputElement
.
prototype
.
step
;
HTMLInputElement
.
prototype
.
valueAsDate
;
HTMLInputElement
.
prototype
.
valueAsNumber
;
HTMLInputElement
.
prototype
.
stepDown
=
function
(
opt_n
)
{
}
;
HTMLInputElement
.
prototype
.
stepUp
=
function
(
opt_n
)
{
}
;
function
HTMLMediaElement
(
)
{
}
HTMLMediaElement
.
HAVE_NOTHING
;
HTMLMediaElement
.
HAVE_METADATA
;
HTMLMediaElement
.
HAVE_CURRENT_DATA
;
HTMLMediaElement
.
HAVE_FUTURE_DATA
;
HTMLMediaElement
.
HAVE_ENOUGH_DATA
;
HTMLMediaElement
.
prototype
.
error
;
HTMLMediaElement
.
prototype
.
src
;
HTMLMediaElement
.
prototype
.
currentSrc
;
HTMLMediaElement
.
prototype
.
networkState
;
HTMLMediaElement
.
prototype
.
autobuffer
;
HTMLMediaElement
.
prototype
.
buffered
;
HTMLMediaElement
.
prototype
.
load
=
function
(
)
{
}
;
HTMLMediaElement
.
prototype
.
canPlayType
=
function
(
type
)
{
}
;
HTMLMediaElement
.
prototype
.
oncanplaythrough
;
HTMLMediaElement
.
prototype
.
readyState
;
HTMLMediaElement
.
prototype
.
seeking
;
HTMLMediaElement
.
prototype
.
currentTime
;
HTMLMediaElement
.
prototype
.
getStartDate
=
function
(
)
{
}
;
HTMLMediaElement
.
prototype
.
duration
;
HTMLMediaElement
.
prototype
.
paused
;
HTMLMediaElement
.
prototype
.
defaultPlaybackRate
;
HTMLMediaElement
.
prototype
.
playbackRate
;
HTMLMediaElement
.
prototype
.
played
;
HTMLMediaElement
.
prototype
.
seekable
;
HTMLMediaElement
.
prototype
.
ended
;
HTMLMediaElement
.
prototype
.
autoplay
;
HTMLMediaElement
.
prototype
.
loop
;
HTMLMediaElement
.
prototype
.
play
=
function
(
)
{
}
;
HTMLMediaElement
.
prototype
.
pause
=
function
(
)
{
}
;
HTMLMediaElement
.
prototype
.
controls
;
HTMLMediaElement
.
prototype
.
volume
;
HTMLMediaElement
.
prototype
.
muted
;
HTMLMediaElement
.
prototype
.
addTextTrack
=
function
(
kind
opt_label
opt_language
)
{
}
;
HTMLMediaElement
.
prototype
.
textTracks
;
Text
.
prototype
.
getDestinationInsertionPoints
=
function
(
)
{
}
;
function
TextTrackList
(
)
{
}
TextTrackList
.
prototype
.
length
;
TextTrackList
.
prototype
.
getTrackById
=
function
(
id
)
{
}
;
function
TextTrack
(
)
{
}
TextTrack
.
prototype
.
addCue
=
function
(
cue
)
{
}
;
TextTrack
.
prototype
.
removeCue
=
function
(
cue
)
{
}
;
TextTrack
.
prototype
.
activeCues
;
TextTrack
.
prototype
.
cues
;
TextTrack
.
prototype
.
addEventListener
=
function
(
type
listener
useCapture
)
{
}
;
TextTrack
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
TextTrack
.
prototype
.
removeEventListener
=
function
(
type
listener
useCapture
)
{
}
;
function
TextTrackCueList
(
)
{
}
TextTrackCueList
.
prototype
.
length
;
TextTrackCueList
.
prototype
.
getCueById
=
function
(
id
)
{
}
;
function
TextTrackCue
(
startTime
endTime
text
)
{
}
TextTrackCue
.
prototype
.
id
;
TextTrackCue
.
prototype
.
startTime
;
TextTrackCue
.
prototype
.
endTime
;
TextTrackCue
.
prototype
.
text
;
function
VTTCue
(
startTime
endTime
text
)
{
}
function
HTMLAudioElement
(
)
{
}
function
HTMLVideoElement
(
)
{
}
HTMLVideoElement
.
prototype
.
webkitEnterFullscreen
=
function
(
)
{
}
;
HTMLVideoElement
.
prototype
.
webkitEnterFullScreen
=
function
(
)
{
}
;
HTMLVideoElement
.
prototype
.
webkitExitFullscreen
=
function
(
)
{
}
;
HTMLVideoElement
.
prototype
.
webkitExitFullScreen
=
function
(
)
{
}
;
HTMLVideoElement
.
prototype
.
width
;
HTMLVideoElement
.
prototype
.
height
;
HTMLVideoElement
.
prototype
.
videoWidth
;
HTMLVideoElement
.
prototype
.
videoHeight
;
HTMLVideoElement
.
prototype
.
poster
;
HTMLVideoElement
.
prototype
.
webkitSupportsFullscreen
;
HTMLVideoElement
.
prototype
.
webkitDisplayingFullscreen
;
HTMLVideoElement
.
prototype
.
webkitDecodedFrameCount
;
HTMLVideoElement
.
prototype
.
webkitDroppedFrameCount
;
function
MediaError
(
)
{
}
MediaError
.
prototype
.
code
;
function
MessageChannel
(
)
{
}
MessageChannel
.
prototype
.
port1
;
MessageChannel
.
prototype
.
port2
;
function
MessagePort
(
)
{
}
MessagePort
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
MessagePort
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
MessagePort
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
MessagePort
.
prototype
.
postMessage
=
function
(
message
opt_transfer
)
{
}
;
MessagePort
.
prototype
.
start
=
function
(
)
{
}
;
MessagePort
.
prototype
.
close
=
function
(
)
{
}
;
MessagePort
.
prototype
.
onmessage
;
function
MessageEvent
(
)
{
}
MessageEvent
.
prototype
.
data
;
MessageEvent
.
prototype
.
origin
;
MessageEvent
.
prototype
.
lastEventId
;
MessageEvent
.
prototype
.
source
;
MessageEvent
.
prototype
.
ports
;
MessageEvent
.
prototype
.
initMessageEvent
=
function
(
typeArg
canBubbleArg
cancelableArg
dataArg
originArg
lastEventIdArg
sourceArg
portsArg
)
{
}
;
MessageEvent
.
prototype
.
initMessageEventNS
=
function
(
namespaceURI
typeArg
canBubbleArg
cancelableArg
dataArg
originArg
lastEventIdArg
sourceArg
portsArg
)
{
}
;
function
DataTransfer
(
)
{
}
DataTransfer
.
prototype
.
dropEffect
;
DataTransfer
.
prototype
.
effectAllowed
;
DataTransfer
.
prototype
.
types
;
DataTransfer
.
prototype
.
files
;
DataTransfer
.
prototype
.
clearData
=
function
(
opt_format
)
{
}
;
DataTransfer
.
prototype
.
setData
=
function
(
format
data
)
{
}
;
DataTransfer
.
prototype
.
getData
=
function
(
format
)
{
return
'
'
;
}
;
DataTransfer
.
prototype
.
setDragImage
=
function
(
img
x
y
)
{
}
;
DataTransfer
.
prototype
.
addElement
=
function
(
elem
)
{
}
;
MouseEvent
.
prototype
.
dataTransfer
;
var
WheelEventInit
;
var
WheelEvent
=
function
(
type
opt_eventInitDict
)
{
}
;
WheelEvent
.
prototype
.
deltaX
;
WheelEvent
.
prototype
.
deltaY
;
WheelEvent
.
prototype
.
deltaZ
;
WheelEvent
.
prototype
.
deltaMode
;
var
DataTransferItem
=
function
(
)
{
}
;
DataTransferItem
.
prototype
.
kind
;
DataTransferItem
.
prototype
.
type
;
DataTransferItem
.
prototype
.
getAsString
=
function
(
callback
)
{
}
;
DataTransferItem
.
prototype
.
getAsFile
=
function
(
)
{
return
null
;
}
;
DataTransferItem
.
prototype
.
webkitGetAsEntry
=
function
(
)
{
return
null
;
}
;
var
DataTransferItemList
=
function
(
)
{
}
;
DataTransferItemList
.
prototype
.
length
;
DataTransferItemList
.
prototype
.
item
=
function
(
i
)
{
return
null
;
}
;
DataTransferItemList
.
prototype
.
add
=
function
(
data
opt_type
)
{
}
;
DataTransferItemList
.
prototype
.
remove
=
function
(
i
)
{
}
;
DataTransferItemList
.
prototype
.
clear
=
function
(
)
{
}
;
DataTransfer
.
prototype
.
items
;
function
DragEvent
(
)
{
}
DragEvent
.
prototype
.
dataTransfer
;
var
ProgressEventInit
;
function
ProgressEvent
(
type
opt_progressEventInitDict
)
{
}
ProgressEvent
.
prototype
.
total
;
ProgressEvent
.
prototype
.
loaded
;
ProgressEvent
.
prototype
.
lengthComputable
;
function
TimeRanges
(
)
{
}
TimeRanges
.
prototype
.
length
;
TimeRanges
.
prototype
.
start
=
function
(
index
)
{
return
0
;
}
;
TimeRanges
.
prototype
.
end
=
function
(
index
)
{
return
0
;
}
;
function
WebSocket
(
url
opt_protocol
)
{
}
WebSocket
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
WebSocket
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
WebSocket
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
WebSocket
.
prototype
.
URL
;
WebSocket
.
prototype
.
CONNECTING
=
0
;
WebSocket
.
prototype
.
OPEN
=
1
;
WebSocket
.
prototype
.
CLOSED
=
2
;
WebSocket
.
prototype
.
readyState
;
WebSocket
.
prototype
.
bufferedAmount
;
WebSocket
.
prototype
.
onopen
;
WebSocket
.
prototype
.
onmessage
;
WebSocket
.
prototype
.
onclose
;
WebSocket
.
prototype
.
send
=
function
(
data
)
{
}
;
WebSocket
.
prototype
.
close
=
function
(
)
{
}
;
WebSocket
.
prototype
.
binaryType
;
History
.
prototype
.
pushState
=
function
(
data
title
opt_url
)
{
}
;
History
.
prototype
.
replaceState
=
function
(
data
title
opt_url
)
{
}
;
History
.
prototype
.
state
;
function
PopStateEvent
(
type
opt_eventInitDict
)
{
}
PopStateEvent
.
prototype
.
state
;
PopStateEvent
.
prototype
.
initPopStateEvent
=
function
(
typeArg
canBubbleArg
cancelableArg
stateArg
)
{
}
;
function
HashChangeEvent
(
type
opt_eventInitDict
)
{
}
HashChangeEvent
.
prototype
.
oldURL
;
HashChangeEvent
.
prototype
.
newURL
;
HashChangeEvent
.
prototype
.
initHashChangeEvent
=
function
(
typeArg
canBubbleArg
cancelableArg
oldURLArg
newURLArg
)
{
}
;
function
PageTransitionEvent
(
type
opt_eventInitDict
)
{
}
PageTransitionEvent
.
prototype
.
persisted
;
PageTransitionEvent
.
prototype
.
initPageTransitionEvent
=
function
(
typeArg
canBubbleArg
cancelableArg
persistedArg
)
{
}
;
function
FileList
(
)
{
}
FileList
.
prototype
.
length
;
FileList
.
prototype
.
item
=
function
(
i
)
{
return
null
;
}
;
XMLHttpRequest
.
prototype
.
withCredentials
;
XMLHttpRequest
.
prototype
.
upload
;
XMLHttpRequest
.
prototype
.
overrideMimeType
=
function
(
mimeType
)
{
}
;
XMLHttpRequest
.
prototype
.
responseType
;
XMLHttpRequest
.
prototype
.
response
;
XMLHttpRequest
.
prototype
.
mozResponseArrayBuffer
;
function
XMLHttpRequestEventTarget
(
)
{
}
XMLHttpRequestEventTarget
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
XMLHttpRequestEventTarget
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
XMLHttpRequestEventTarget
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
function
XMLHttpRequestUpload
(
)
{
}
function
Image
(
opt_width
opt_height
)
{
}
HTMLElement
.
prototype
.
dataset
;
function
DOMTokenList
(
)
{
}
DOMTokenList
.
prototype
.
length
;
DOMTokenList
.
prototype
.
item
=
function
(
index
)
{
}
;
DOMTokenList
.
prototype
.
contains
=
function
(
token
)
{
}
;
DOMTokenList
.
prototype
.
add
=
function
(
var_args
)
{
}
;
DOMTokenList
.
prototype
.
remove
=
function
(
var_args
)
{
}
;
DOMTokenList
.
prototype
.
toggle
=
function
(
token
opt_force
)
{
}
;
DOMTokenList
.
prototype
.
toString
=
function
(
)
{
}
;
HTMLElement
.
prototype
.
classList
;
Window
.
prototype
.
crypto
;
Window
.
prototype
.
crypto
.
getRandomValues
=
function
(
typedArray
)
{
}
;
HTMLFormElement
.
prototype
.
checkValidity
=
function
(
)
{
}
;
HTMLFormElement
.
prototype
.
noValidate
;
function
ValidityState
(
)
{
}
ValidityState
.
prototype
.
customError
;
ValidityState
.
prototype
.
patternMismatch
;
ValidityState
.
prototype
.
rangeOverflow
;
ValidityState
.
prototype
.
rangeUnderflow
;
ValidityState
.
prototype
.
stepMismatch
;
ValidityState
.
prototype
.
typeMismatch
;
ValidityState
.
prototype
.
tooLong
;
ValidityState
.
prototype
.
valid
;
ValidityState
.
prototype
.
valueMissing
;
HTMLButtonElement
.
prototype
.
autofocus
;
HTMLButtonElement
.
prototype
.
labels
;
HTMLButtonElement
.
prototype
.
validationMessage
;
HTMLButtonElement
.
prototype
.
validity
;
HTMLButtonElement
.
prototype
.
willValidate
;
HTMLButtonElement
.
prototype
.
checkValidity
=
function
(
)
{
}
;
HTMLButtonElement
.
prototype
.
setCustomValidity
=
function
(
message
)
{
}
;
HTMLButtonElement
.
prototype
.
formAction
;
HTMLButtonElement
.
prototype
.
formEnctype
;
HTMLButtonElement
.
prototype
.
formMethod
;
HTMLButtonElement
.
prototype
.
formTarget
;
HTMLInputElement
.
prototype
.
autofocus
;
HTMLInputElement
.
prototype
.
formNoValidate
;
HTMLInputElement
.
prototype
.
formAction
;
HTMLInputElement
.
prototype
.
formEnctype
;
HTMLInputElement
.
prototype
.
formMethod
;
HTMLInputElement
.
prototype
.
formTarget
;
HTMLInputElement
.
prototype
.
labels
;
HTMLInputElement
.
prototype
.
validationMessage
;
HTMLInputElement
.
prototype
.
validity
;
HTMLInputElement
.
prototype
.
willValidate
;
HTMLInputElement
.
prototype
.
checkValidity
=
function
(
)
{
}
;
HTMLInputElement
.
prototype
.
setCustomValidity
=
function
(
message
)
{
}
;
HTMLLabelElement
.
prototype
.
control
;
HTMLSelectElement
.
prototype
.
autofocus
;
HTMLSelectElement
.
prototype
.
labels
;
HTMLSelectElement
.
prototype
.
selectedOptions
;
HTMLSelectElement
.
prototype
.
validationMessage
;
HTMLSelectElement
.
prototype
.
validity
;
HTMLSelectElement
.
prototype
.
willValidate
;
HTMLSelectElement
.
prototype
.
checkValidity
=
function
(
)
{
}
;
HTMLSelectElement
.
prototype
.
setCustomValidity
=
function
(
message
)
{
}
;
HTMLTextAreaElement
.
prototype
.
autofocus
;
HTMLTextAreaElement
.
prototype
.
labels
;
HTMLTextAreaElement
.
prototype
.
validationMessage
;
HTMLTextAreaElement
.
prototype
.
validity
;
HTMLTextAreaElement
.
prototype
.
willValidate
;
HTMLTextAreaElement
.
prototype
.
checkValidity
=
function
(
)
{
}
;
HTMLTextAreaElement
.
prototype
.
setCustomValidity
=
function
(
message
)
{
}
;
function
HTMLEmbedElement
(
)
{
}
HTMLEmbedElement
.
prototype
.
width
;
HTMLEmbedElement
.
prototype
.
height
;
HTMLEmbedElement
.
prototype
.
src
;
HTMLEmbedElement
.
prototype
.
type
;
Element
.
prototype
.
requestFullscreen
=
function
(
)
{
}
;
Document
.
prototype
.
fullscreenEnabled
;
Document
.
prototype
.
fullscreenElement
;
Document
.
prototype
.
exitFullscreen
=
function
(
)
{
}
;
Element
.
prototype
.
mozRequestFullScreen
=
function
(
)
{
}
;
Element
.
prototype
.
mozRequestFullScreenWithKeys
=
function
(
)
{
}
;
Document
.
prototype
.
mozFullScreen
;
Document
.
prototype
.
mozCancelFullScreen
=
function
(
)
{
}
;
Document
.
prototype
.
mozFullScreenElement
;
Document
.
prototype
.
mozFullScreenEnabled
;
Element
.
prototype
.
webkitRequestFullScreen
=
function
(
opt_allowKeyboardInput
)
{
}
;
Element
.
prototype
.
webkitRequestFullscreen
=
function
(
opt_allowKeyboardInput
)
{
}
;
Document
.
prototype
.
webkitIsFullScreen
;
Document
.
prototype
.
webkitCancelFullScreen
=
function
(
)
{
}
;
Document
.
prototype
.
webkitCurrentFullScreenElement
;
Document
.
prototype
.
webkitFullscreenElement
;
Document
.
prototype
.
webkitFullScreenKeyboardInputAllowed
;
Element
.
prototype
.
msRequestFullscreen
=
function
(
)
{
}
;
Element
.
prototype
.
msExitFullscreen
=
function
(
)
{
}
;
Document
.
prototype
.
msFullscreenEnabled
;
Document
.
prototype
.
msFullscreenElement
;
Element
.
ALLOW_KEYBOARD_INPUT
=
1
;
Element
.
prototype
.
ALLOW_KEYBOARD_INPUT
=
1
;
function
MutationObserverInit
(
)
{
}
MutationObserverInit
.
prototype
.
childList
;
MutationObserverInit
.
prototype
.
attributes
;
MutationObserverInit
.
prototype
.
characterData
;
MutationObserverInit
.
prototype
.
subtree
;
MutationObserverInit
.
prototype
.
attributeOldValue
;
MutationObserverInit
.
prototype
.
characterDataOldValue
;
MutationObserverInit
.
prototype
.
attributeFilter
;
function
MutationRecord
(
)
{
}
MutationRecord
.
prototype
.
type
;
MutationRecord
.
prototype
.
target
;
MutationRecord
.
prototype
.
addedNodes
;
MutationRecord
.
prototype
.
removedNodes
;
MutationRecord
.
prototype
.
previouSibling
;
MutationRecord
.
prototype
.
nextSibling
;
MutationRecord
.
prototype
.
attributeName
;
MutationRecord
.
prototype
.
attributeNamespace
;
MutationRecord
.
prototype
.
oldValue
;
function
MutationObserver
(
callback
)
{
}
MutationObserver
.
prototype
.
observe
=
function
(
target
options
)
{
}
;
MutationObserver
.
prototype
.
disconnect
=
function
(
)
{
}
;
Window
.
prototype
.
WebKitMutationObserver
;
Window
.
prototype
.
MozMutationObserver
;
Document
.
prototype
.
visibilityState
;
Document
.
prototype
.
mozVisibilityState
;
Document
.
prototype
.
webkitVisibilityState
;
Document
.
prototype
.
msVisibilityState
;
Document
.
prototype
.
hidden
;
Document
.
prototype
.
mozHidden
;
Document
.
prototype
.
webkitHidden
;
Document
.
prototype
.
msHidden
;
Document
.
prototype
.
registerElement
;
Document
.
prototype
.
register
;
Document
.
prototype
.
fonts
;
function
ShadowRoot
(
)
{
}
ShadowRoot
.
prototype
.
host
;
ShadowRoot
.
prototype
.
getElementById
=
function
(
id
)
{
}
;
ShadowRoot
.
prototype
.
getElementsByClassName
=
function
(
className
)
{
}
;
ShadowRoot
.
prototype
.
getElementsByTagName
=
function
(
tagName
)
{
}
;
ShadowRoot
.
prototype
.
getElementsByTagNameNS
=
function
(
namespace
localName
)
{
}
;
ShadowRoot
.
prototype
.
getSelection
=
function
(
)
{
}
;
ShadowRoot
.
prototype
.
elementFromPoint
=
function
(
x
y
)
{
}
;
ShadowRoot
.
prototype
.
applyAuthorStyles
;
ShadowRoot
.
prototype
.
resetStyleInheritance
;
ShadowRoot
.
prototype
.
activeElement
;
ShadowRoot
.
prototype
.
olderShadowRoot
;
ShadowRoot
.
prototype
.
innerHTML
;
ShadowRoot
.
prototype
.
styleSheets
;
function
HTMLContentElement
(
)
{
}
HTMLContentElement
.
prototype
.
select
;
HTMLContentElement
.
prototype
.
getDistributedNodes
=
function
(
)
{
}
;
function
HTMLShadowElement
(
)
{
}
HTMLShadowElement
.
prototype
.
getDistributedNodes
=
function
(
)
{
}
;
function
ErrorEvent
(
type
opt_eventInitDict
)
{
}
ErrorEvent
.
prototype
.
message
;
ErrorEvent
.
prototype
.
filename
;
ErrorEvent
.
prototype
.
lineno
;
ErrorEvent
.
prototype
.
colno
;
ErrorEvent
.
prototype
.
error
;
var
ErrorEventInit
;
DOMImplementation
.
prototype
.
createHTMLDocument
=
function
(
opt_title
)
{
}
;
function
HTMLPictureElement
(
)
{
}
function
HTMLSourceElement
(
)
{
}
HTMLSourceElement
.
prototype
.
media
;
HTMLSourceElement
.
prototype
.
sizes
;
HTMLSourceElement
.
prototype
.
src
;
HTMLSourceElement
.
prototype
.
srcset
;
HTMLSourceElement
.
prototype
.
type
;
HTMLImageElement
.
prototype
.
sizes
;
HTMLImageElement
.
prototype
.
srcset
;
function
HTMLDetailsElement
(
)
{
}
HTMLDetailsElement
.
prototype
.
open
;
HTMLMenuElement
.
prototype
.
type
;
HTMLMenuElement
.
prototype
.
label
;
function
HTMLMenuItemElement
(
)
{
}
HTMLMenuItemElement
.
prototype
.
type
;
HTMLMenuItemElement
.
prototype
.
label
;
HTMLMenuItemElement
.
prototype
.
icon
;
HTMLMenuItemElement
.
prototype
.
disabled
;
HTMLMenuItemElement
.
prototype
.
checked
;
HTMLMenuItemElement
.
prototype
.
radiogroup
;
HTMLMenuItemElement
.
prototype
.
default
;
function
RelatedEvent
(
type
opt_eventInitDict
)
{
}
RelatedEvent
.
prototype
.
relatedTarget
;
function
HTMLDialogElement
(
)
{
}
HTMLDialogElement
.
prototype
.
open
;
HTMLDialogElement
.
prototype
.
returnValue
;
HTMLDialogElement
.
prototype
.
show
=
function
(
opt_anchor
)
{
}
;
HTMLDialogElement
.
prototype
.
showModal
=
function
(
opt_anchor
)
{
}
;
HTMLDialogElement
.
prototype
.
close
=
function
(
opt_returnValue
)
{
}
;
