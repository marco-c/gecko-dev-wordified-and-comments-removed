function
Arguments
(
)
{
}
Arguments
.
prototype
.
callee
;
Arguments
.
prototype
.
caller
;
Arguments
.
prototype
.
length
;
var
arguments
;
var
Infinity
;
var
NaN
;
var
undefined
;
function
decodeURI
(
uri
)
{
}
function
decodeURIComponent
(
uri
)
{
}
function
encodeURI
(
uri
)
{
}
function
encodeURIComponent
(
uri
)
{
}
function
escape
(
str
)
{
}
function
unescape
(
str
)
{
}
function
isFinite
(
num
)
{
}
function
isNaN
(
num
)
{
}
function
parseFloat
(
num
)
{
}
function
parseInt
(
num
base
)
{
}
function
eval
(
code
)
{
}
function
Object
(
opt_value
)
{
}
Object
.
prototype
.
constructor
=
function
(
)
{
}
;
Object
.
prototype
.
__defineGetter__
=
function
(
sprop
fun
)
{
}
;
Object
.
prototype
.
__defineSetter__
=
function
(
sprop
fun
)
{
}
;
Object
.
prototype
.
hasOwnProperty
=
function
(
propertyName
)
{
}
;
Object
.
prototype
.
isPrototypeOf
=
function
(
other
)
{
}
;
Object
.
prototype
.
__lookupGetter__
=
function
(
sprop
)
{
}
;
Object
.
prototype
.
__lookupSetter__
=
function
(
sprop
)
{
}
;
Object
.
prototype
.
__noSuchMethod__
=
function
(
fun
)
{
}
;
Object
.
prototype
.
__parent__
;
Object
.
prototype
.
__proto__
;
Object
.
prototype
.
propertyIsEnumerable
=
function
(
propertyName
)
{
}
;
Object
.
prototype
.
toLocaleString
=
function
(
)
{
}
;
Object
.
prototype
.
toSource
=
function
(
)
{
}
;
Object
.
prototype
.
toString
=
function
(
)
{
}
;
Object
.
prototype
.
unwatch
=
function
(
prop
)
{
}
;
Object
.
prototype
.
valueOf
=
function
(
)
{
}
;
Object
.
prototype
.
watch
=
function
(
prop
handler
)
{
}
;
function
Function
(
var_args
)
{
}
Function
.
prototype
.
call
=
function
(
var_args
)
{
}
;
Function
.
prototype
.
apply
=
function
(
var_args
)
{
}
;
Function
.
prototype
.
arguments
;
Function
.
prototype
.
arity
;
Function
.
prototype
.
caller
;
Function
.
prototype
.
displayName
;
Function
.
prototype
.
length
;
Function
.
prototype
.
name
;
Function
.
prototype
.
toString
=
function
(
)
{
}
;
function
Array
(
var_args
)
{
}
Array
.
prototype
.
concat
=
function
(
var_args
)
{
}
;
Array
.
prototype
.
join
=
function
(
opt_separator
)
{
}
;
Array
.
prototype
.
pop
=
function
(
)
{
}
;
Array
.
prototype
.
push
=
function
(
var_args
)
{
}
;
Array
.
prototype
.
reverse
=
function
(
)
{
}
;
Array
.
prototype
.
shift
=
function
(
)
{
}
;
Array
.
prototype
.
slice
=
function
(
opt_begin
opt_end
)
{
}
;
Array
.
prototype
.
sort
=
function
(
opt_compareFunction
)
{
}
;
Array
.
prototype
.
splice
=
function
(
opt_index
opt_howMany
var_args
)
{
}
;
Array
.
prototype
.
toSource
;
Array
.
prototype
.
toString
=
function
(
)
{
}
;
Array
.
prototype
.
unshift
=
function
(
var_args
)
{
}
;
Array
.
prototype
.
reduce
=
function
(
callback
opt_initialValue
)
{
}
;
Array
.
prototype
.
reduceRight
=
function
(
callback
opt_initialValue
)
{
}
;
Array
.
prototype
.
every
=
function
(
callback
opt_thisobj
)
{
}
;
Array
.
prototype
.
filter
=
function
(
callback
opt_thisobj
)
{
}
;
Array
.
prototype
.
forEach
=
function
(
callback
opt_thisobj
)
{
}
;
Array
.
prototype
.
indexOf
=
function
(
obj
opt_fromIndex
)
{
}
;
Array
.
prototype
.
lastIndexOf
=
function
(
obj
opt_fromIndex
)
{
}
;
Array
.
prototype
.
map
=
function
(
callback
opt_thisobj
)
{
}
;
Array
.
prototype
.
some
=
function
(
callback
opt_thisobj
)
{
}
;
Array
.
prototype
.
index
;
Array
.
prototype
.
input
;
Array
.
prototype
.
length
;
Array
.
every
=
function
(
arr
callback
opt_context
)
{
}
;
Array
.
filter
=
function
(
arr
callback
opt_context
)
{
}
;
Array
.
forEach
=
function
(
arr
callback
opt_context
)
{
}
;
Array
.
indexOf
=
function
(
arr
obj
opt_fromIndex
)
{
}
;
Array
.
lastIndexOf
=
function
(
arr
obj
opt_fromIndex
)
{
}
;
Array
.
map
=
function
(
arr
callback
opt_context
)
{
}
;
Array
.
some
=
function
(
arr
callback
opt_context
)
{
}
;
Array
.
isArray
=
function
(
arr
)
{
}
;
function
Boolean
(
opt_value
)
{
}
Boolean
.
prototype
.
toSource
=
function
(
)
{
}
;
Boolean
.
prototype
.
toString
=
function
(
)
{
}
;
function
Number
(
opt_value
)
{
}
Number
.
prototype
.
toExponential
=
function
(
opt_fractionDigits
)
{
}
;
Number
.
prototype
.
toFixed
=
function
(
opt_digits
)
{
}
;
Number
.
prototype
.
toPrecision
=
function
(
opt_precision
)
{
}
;
Number
.
prototype
.
toString
=
function
(
opt_radix
)
{
}
;
Number
.
MAX_VALUE
;
Number
.
MIN_VALUE
;
Number
.
NaN
;
Number
.
NEGATIVE_INFINITY
;
Number
.
POSITIVE_INFINITY
;
var
Math
=
{
}
;
Math
.
abs
=
function
(
x
)
{
}
;
Math
.
acos
=
function
(
x
)
{
}
;
Math
.
asin
=
function
(
x
)
{
}
;
Math
.
atan
=
function
(
x
)
{
}
;
Math
.
atan2
=
function
(
y
x
)
{
}
;
Math
.
ceil
=
function
(
x
)
{
}
;
Math
.
cos
=
function
(
x
)
{
}
;
Math
.
exp
=
function
(
x
)
{
}
;
Math
.
floor
=
function
(
x
)
{
}
;
Math
.
log
=
function
(
x
)
{
}
;
Math
.
max
=
function
(
var_args
)
{
}
;
Math
.
min
=
function
(
var_args
)
{
}
;
Math
.
pow
=
function
(
x
y
)
{
}
;
Math
.
random
=
function
(
)
{
}
;
Math
.
round
=
function
(
x
)
{
}
;
Math
.
sin
=
function
(
x
)
{
}
;
Math
.
sqrt
=
function
(
x
)
{
}
;
Math
.
tan
=
function
(
x
)
{
}
;
Math
.
toSource
=
function
(
)
{
}
;
Math
.
E
;
Math
.
LN2
;
Math
.
LN10
;
Math
.
LOG2E
;
Math
.
LOG10E
;
Math
.
PI
;
Math
.
SQRT1_2
;
Math
.
SQRT2
;
function
Date
(
opt_yr_num
opt_mo_num
opt_day_num
opt_hr_num
opt_min_num
opt_sec_num
opt_ms_num
)
{
}
Date
.
now
=
function
(
)
{
}
;
Date
.
parse
=
function
(
date
)
{
}
;
Date
.
UTC
=
function
(
year
month
opt_date
opt_hours
opt_minute
opt_second
opt_ms
)
{
}
;
Date
.
prototype
.
getDate
=
function
(
)
{
}
;
Date
.
prototype
.
getDay
=
function
(
)
{
}
;
Date
.
prototype
.
getMonth
=
function
(
)
{
}
;
Date
.
prototype
.
getFullYear
=
function
(
)
{
}
;
Date
.
prototype
.
getYear
=
function
(
)
{
}
;
Date
.
prototype
.
getHours
=
function
(
)
{
}
;
Date
.
prototype
.
getMinutes
=
function
(
)
{
}
;
Date
.
prototype
.
getSeconds
=
function
(
)
{
}
;
Date
.
prototype
.
getMilliseconds
=
function
(
)
{
}
;
Date
.
prototype
.
getTime
=
function
(
)
{
}
;
Date
.
prototype
.
getTimezoneOffset
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCDate
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCDay
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCMonth
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCFullYear
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCHours
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCMinutes
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCSeconds
=
function
(
)
{
}
;
Date
.
prototype
.
getUTCMilliseconds
=
function
(
)
{
}
;
Date
.
prototype
.
setDate
=
function
(
dayValue
)
{
}
;
Date
.
prototype
.
setMonth
=
function
(
monthValue
opt_dayValue
)
{
}
;
Date
.
prototype
.
setFullYear
=
function
(
yearValue
opt_monthValue
opt_dayValue
)
{
}
;
Date
.
prototype
.
setYear
=
function
(
yearValue
)
{
}
;
Date
.
prototype
.
setHours
=
function
(
hoursValue
opt_minutesValue
opt_secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setMinutes
=
function
(
minutesValue
opt_secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setSeconds
=
function
(
secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setMilliseconds
=
function
(
millisecondsValue
)
{
}
;
Date
.
prototype
.
setTime
=
function
(
timeValue
)
{
}
;
Date
.
prototype
.
setUTCDate
=
function
(
dayValue
)
{
}
;
Date
.
prototype
.
setUTCMonth
=
function
(
monthValue
opt_dayValue
)
{
}
;
Date
.
prototype
.
setUTCFullYear
=
function
(
yearValue
opt_monthValue
opt_dayValue
)
{
}
;
Date
.
prototype
.
setUTCHours
=
function
(
hoursValue
opt_minutesValue
opt_secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setUTCMinutes
=
function
(
minutesValue
opt_secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setUTCSeconds
=
function
(
secondsValue
opt_msValue
)
{
}
;
Date
.
prototype
.
setUTCMilliseconds
=
function
(
millisecondsValue
)
{
}
;
Date
.
prototype
.
toSource
=
function
(
)
{
}
;
Date
.
prototype
.
toDateString
=
function
(
)
{
}
;
Date
.
prototype
.
toGMTString
=
function
(
)
{
}
;
Date
.
prototype
.
toTimeString
=
function
(
)
{
}
;
Date
.
prototype
.
toUTCString
=
function
(
)
{
}
;
Date
.
prototype
.
toLocaleDateString
=
function
(
opt_locales
opt_options
)
{
}
;
Date
.
prototype
.
toLocaleFormat
=
function
(
formatString
)
{
}
;
Date
.
prototype
.
toLocaleString
=
function
(
opt_locales
opt_options
)
{
}
;
Date
.
prototype
.
toLocaleTimeString
=
function
(
opt_locales
opt_options
)
{
}
;
Date
.
prototype
.
toString
=
function
(
)
{
}
;
Date
.
prototype
.
valueOf
;
function
String
(
opt_str
)
{
}
String
.
fromCharCode
=
function
(
var_args
)
{
}
;
String
.
prototype
.
anchor
=
function
(
)
{
}
;
String
.
prototype
.
big
=
function
(
)
{
}
;
String
.
prototype
.
blink
=
function
(
)
{
}
;
String
.
prototype
.
bold
=
function
(
)
{
}
;
String
.
prototype
.
charAt
=
function
(
index
)
{
}
;
String
.
prototype
.
charCodeAt
=
function
(
opt_index
)
{
}
;
String
.
prototype
.
concat
=
function
(
var_args
)
{
}
;
String
.
prototype
.
fixed
=
function
(
)
{
}
;
String
.
prototype
.
fontcolor
=
function
(
color
)
{
}
;
String
.
prototype
.
fontsize
=
function
(
size
)
{
}
;
String
.
prototype
.
indexOf
=
function
(
searchValue
opt_fromIndex
)
{
}
;
String
.
prototype
.
italics
=
function
(
)
{
}
;
String
.
prototype
.
lastIndexOf
=
function
(
searchValue
opt_fromIndex
)
{
}
;
String
.
prototype
.
link
=
function
(
hrefAttribute
)
{
}
;
String
.
prototype
.
localeCompare
=
function
(
compareString
locales
options
)
{
}
;
String
.
prototype
.
match
=
function
(
regexp
)
{
}
;
String
.
prototype
.
quote
=
function
(
)
{
}
;
String
.
prototype
.
replace
=
function
(
regex
str
opt_flags
)
{
}
;
String
.
prototype
.
search
=
function
(
regexp
)
{
}
;
String
.
prototype
.
slice
=
function
(
begin
opt_end
)
{
}
;
String
.
prototype
.
small
=
function
(
)
{
}
;
String
.
prototype
.
split
=
function
(
opt_separator
opt_limit
)
{
}
;
String
.
prototype
.
strike
=
function
(
)
{
}
;
String
.
prototype
.
sub
=
function
(
)
{
}
;
String
.
prototype
.
substr
=
function
(
start
opt_length
)
{
}
;
String
.
prototype
.
substring
=
function
(
start
opt_end
)
{
}
;
String
.
prototype
.
sup
=
function
(
)
{
}
;
String
.
prototype
.
toLocaleUpperCase
=
function
(
)
{
}
;
String
.
prototype
.
toLocaleLowerCase
=
function
(
)
{
}
;
String
.
prototype
.
toLowerCase
=
function
(
)
{
}
;
String
.
prototype
.
toUpperCase
=
function
(
)
{
}
;
String
.
prototype
.
toSource
=
function
(
)
{
}
;
String
.
prototype
.
toString
=
function
(
)
{
}
;
String
.
prototype
.
valueOf
;
String
.
prototype
.
length
;
function
RegExp
(
opt_pattern
opt_flags
)
{
}
RegExp
.
prototype
.
compile
=
function
(
pattern
opt_flags
)
{
}
;
RegExp
.
prototype
.
exec
=
function
(
str
)
{
}
;
RegExp
.
prototype
.
test
=
function
(
str
)
{
}
;
RegExp
.
prototype
.
toString
=
function
(
)
{
}
;
RegExp
.
input
;
RegExp
.
lastMatch
;
RegExp
.
lastParen
;
RegExp
.
leftContext
;
RegExp
.
rightContext
;
RegExp
.
1
;
RegExp
.
2
;
RegExp
.
3
;
RegExp
.
4
;
RegExp
.
5
;
RegExp
.
6
;
RegExp
.
7
;
RegExp
.
8
;
RegExp
.
9
;
RegExp
.
prototype
.
global
;
RegExp
.
prototype
.
ignoreCase
;
RegExp
.
prototype
.
lastIndex
;
RegExp
.
prototype
.
multiline
;
RegExp
.
prototype
.
source
;
function
Error
(
opt_message
opt_file
opt_line
)
{
}
Error
.
stackTraceLimit
;
Error
.
captureStackTrace
=
function
(
error
opt_constructor
)
{
}
;
Error
.
prototype
.
description
;
Error
.
prototype
.
lineNumber
;
Error
.
prototype
.
fileName
;
Error
.
prototype
.
name
;
Error
.
prototype
.
message
;
Error
.
prototype
.
sourceURL
;
Error
.
prototype
.
stack
;
function
EvalError
(
opt_message
opt_file
opt_line
)
{
}
function
RangeError
(
opt_message
opt_file
opt_line
)
{
}
function
ReferenceError
(
opt_message
opt_file
opt_line
)
{
}
function
SyntaxError
(
opt_message
opt_file
opt_line
)
{
}
function
TypeError
(
opt_message
opt_file
opt_line
)
{
}
function
URIError
(
opt_message
opt_file
opt_line
)
{
}
function
ActiveXObject
(
progId
opt_location
)
{
}
function
ScriptEngine
(
)
{
}
function
ScriptEngineMajorVersion
(
)
{
}
function
ScriptEngineMinorVersion
(
)
{
}
function
ScriptEngineBuildVersion
(
)
{
}
