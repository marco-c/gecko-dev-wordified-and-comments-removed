function
DOMException
(
)
{
}
DOMException
.
INDEX_SIZE_ERR
=
1
;
DOMException
.
DOMSTRING_SIZE_ERR
=
2
;
DOMException
.
HIERARCHY_REQUEST_ERR
=
3
;
DOMException
.
WRONG_DOCUMENT_ERR
=
4
;
DOMException
.
INVALID_CHARACTER_ERR
=
5
;
DOMException
.
NO_DATA_ALLOWED_ERR
=
6
;
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
=
7
;
DOMException
.
NOT_FOUND_ERR
=
8
;
DOMException
.
NOT_SUPPORTED_ERR
=
9
;
DOMException
.
INUSE_ATTRIBUTE_ERR
=
10
;
function
ExceptionCode
(
)
{
}
function
DOMImplementation
(
)
{
}
DOMImplementation
.
prototype
.
hasFeature
=
function
(
feature
version
)
{
}
;
function
Node
(
)
{
}
Node
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Node
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Node
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
Node
.
prototype
.
attributes
;
Node
.
prototype
.
childNodes
;
Node
.
prototype
.
firstChild
;
Node
.
prototype
.
lastChild
;
Node
.
prototype
.
nextSibling
;
Node
.
prototype
.
nodeName
;
Node
.
prototype
.
nodeValue
;
Node
.
prototype
.
nodeType
;
Node
.
prototype
.
ownerDocument
;
Node
.
prototype
.
parentNode
;
Node
.
prototype
.
previousSibling
;
Node
.
prototype
.
appendChild
=
function
(
newChild
)
{
}
;
Node
.
prototype
.
cloneNode
=
function
(
deep
)
{
}
;
Node
.
prototype
.
hasChildNodes
=
function
(
)
{
}
;
Node
.
prototype
.
insertBefore
=
function
(
newChild
refChild
)
{
}
;
Node
.
prototype
.
removeChild
=
function
(
oldChild
)
{
}
;
Node
.
prototype
.
replaceChild
=
function
(
newChild
oldChild
)
{
}
;
Node
.
ATTRIBUTE_NODE
;
Node
.
CDATA_SECTION_NODE
;
Node
.
COMMENT_NODE
;
Node
.
DOCUMENT_FRAGMENT_NODE
;
Node
.
DOCUMENT_NODE
;
Node
.
DOCUMENT_TYPE_NODE
;
Node
.
ELEMENT_NODE
;
Node
.
ENTITY_NODE
;
Node
.
ENTITY_REFERENCE_NODE
;
Node
.
PROCESSING_INSTRUCTION_NODE
;
Node
.
TEXT_NODE
;
Node
.
XPATH_NAMESPACE_NODE
;
Node
.
NOTATION_NODE
;
function
DocumentFragment
(
)
{
}
function
Document
(
)
{
}
Document
.
prototype
.
doctype
;
Document
.
prototype
.
documentElement
;
Document
.
prototype
.
implementation
;
Document
.
prototype
.
createAttribute
=
function
(
name
)
{
}
;
Document
.
prototype
.
createComment
=
function
(
data
)
{
}
;
Document
.
prototype
.
createCDATASection
=
function
(
data
)
{
}
;
Document
.
prototype
.
createDocumentFragment
=
function
(
)
{
}
;
Document
.
prototype
.
createElement
=
function
(
tagName
opt_typeExtension
)
{
}
;
Document
.
prototype
.
createEntityReference
=
function
(
name
)
{
}
;
Document
.
prototype
.
createProcessingInstruction
=
function
(
target
data
)
{
}
;
Document
.
prototype
.
createTextNode
=
function
(
data
)
{
}
;
Document
.
prototype
.
getElementsByTagName
=
function
(
tagname
)
{
}
;
function
NodeList
(
)
{
}
NodeList
.
prototype
.
length
;
NodeList
.
prototype
.
item
=
function
(
index
)
{
}
;
function
NamedNodeMap
(
)
{
}
NamedNodeMap
.
prototype
.
length
;
NamedNodeMap
.
prototype
.
getNamedItem
=
function
(
name
)
{
}
;
NamedNodeMap
.
prototype
.
item
=
function
(
index
)
{
}
;
NamedNodeMap
.
prototype
.
removeNamedItem
=
function
(
name
)
{
}
;
NamedNodeMap
.
prototype
.
setNamedItem
=
function
(
arg
)
{
}
;
function
CharacterData
(
)
{
}
CharacterData
.
prototype
.
data
;
CharacterData
.
prototype
.
length
;
CharacterData
.
prototype
.
appendData
=
function
(
arg
)
{
}
;
CharacterData
.
prototype
.
deleteData
=
function
(
offset
count
)
{
}
;
CharacterData
.
prototype
.
insertData
=
function
(
offset
arg
)
{
}
;
CharacterData
.
prototype
.
replaceData
=
function
(
offset
count
arg
)
{
}
;
CharacterData
.
prototype
.
substringData
=
function
(
offset
count
)
{
}
;
function
Attr
(
)
{
}
Attr
.
prototype
.
name
;
Attr
.
prototype
.
specified
;
Attr
.
prototype
.
value
;
function
Element
(
)
{
}
Element
.
prototype
.
tagName
;
Element
.
prototype
.
getAttribute
=
function
(
name
opt_flags
)
{
}
;
Element
.
prototype
.
getAttributeNode
=
function
(
name
)
{
}
;
Element
.
prototype
.
getElementsByTagName
=
function
(
tagname
)
{
}
;
Element
.
prototype
.
removeAttribute
=
function
(
name
)
{
}
;
Element
.
prototype
.
removeAttributeNode
=
function
(
oldAttr
)
{
}
;
Element
.
prototype
.
setAttribute
=
function
(
name
value
)
{
}
;
Element
.
prototype
.
setAttributeNode
=
function
(
newAttr
)
{
}
;
Element
.
prototype
.
onabort
;
Element
.
prototype
.
onbeforeinput
;
Element
.
prototype
.
onbeforeunload
;
Element
.
prototype
.
onblur
;
Element
.
prototype
.
onchange
;
Element
.
prototype
.
onclick
;
Element
.
prototype
.
oncompositionstart
;
Element
.
prototype
.
oncompositionupdate
;
Element
.
prototype
.
oncompositionend
;
Element
.
prototype
.
oncontextmenu
;
Element
.
prototype
.
oncopy
;
Element
.
prototype
.
oncut
;
Element
.
prototype
.
ondblclick
;
Element
.
prototype
.
onerror
;
Element
.
prototype
.
onfocus
;
Element
.
prototype
.
onfocusin
;
Element
.
prototype
.
onfocusout
;
Element
.
prototype
.
oninput
;
Element
.
prototype
.
onkeydown
;
Element
.
prototype
.
onkeypress
;
Element
.
prototype
.
onkeyup
;
Element
.
prototype
.
onload
;
Element
.
prototype
.
onunload
;
Element
.
prototype
.
onmousedown
;
Element
.
prototype
.
onmousemove
;
Element
.
prototype
.
onmouseout
;
Element
.
prototype
.
onmouseover
;
Element
.
prototype
.
onmouseup
;
Element
.
prototype
.
onmousewheel
;
Element
.
prototype
.
onpaste
;
Element
.
prototype
.
onreset
;
Element
.
prototype
.
onresize
;
Element
.
prototype
.
onscroll
;
Element
.
prototype
.
onselect
;
Element
.
prototype
.
onsubmit
;
Element
.
prototype
.
ontextinput
;
Element
.
prototype
.
onwheel
;
function
Text
(
)
{
}
Text
.
prototype
.
splitText
=
function
(
offset
)
{
}
;
function
Comment
(
)
{
}
function
CDATASection
(
)
{
}
function
DocumentType
(
)
{
}
DocumentType
.
prototype
.
entities
;
DocumentType
.
prototype
.
name
;
DocumentType
.
prototype
.
notations
;
function
Notation
(
)
{
}
Notation
.
prototype
.
publicId
;
Notation
.
prototype
.
systemId
;
function
Entity
(
)
{
}
Entity
.
prototype
.
publicId
;
Entity
.
prototype
.
systemId
;
Entity
.
prototype
.
notationName
;
function
EntityReference
(
)
{
}
function
ProcessingInstruction
(
)
{
}
ProcessingInstruction
.
prototype
.
data
;
ProcessingInstruction
.
prototype
.
target
;
function
Window
(
)
{
}
Window
.
prototype
.
Window
;
Window
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Window
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
Window
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
Window
.
prototype
.
onabort
;
Window
.
prototype
.
onbeforeunload
;
Window
.
prototype
.
onblur
;
Window
.
prototype
.
onchange
;
Window
.
prototype
.
onclick
;
Window
.
prototype
.
onclose
;
Window
.
prototype
.
oncontextmenu
;
Window
.
prototype
.
ondblclick
;
Window
.
prototype
.
ondragdrop
;
Window
.
prototype
.
onerror
;
Window
.
prototype
.
onfocus
;
Window
.
prototype
.
onhashchange
;
Window
.
prototype
.
onkeydown
;
Window
.
prototype
.
onkeypress
;
Window
.
prototype
.
onkeyup
;
Window
.
prototype
.
onload
;
Window
.
prototype
.
onmousedown
;
Window
.
prototype
.
onmousemove
;
Window
.
prototype
.
onmouseout
;
Window
.
prototype
.
onmouseover
;
Window
.
prototype
.
onmouseup
;
Window
.
prototype
.
onmousewheel
;
Window
.
prototype
.
onpaint
;
Window
.
prototype
.
onpopstate
;
Window
.
prototype
.
onreset
;
Window
.
prototype
.
onresize
;
Window
.
prototype
.
onscroll
;
Window
.
prototype
.
onselect
;
Window
.
prototype
.
onsubmit
;
Window
.
prototype
.
onunload
;
Window
.
prototype
.
onwheel
;
