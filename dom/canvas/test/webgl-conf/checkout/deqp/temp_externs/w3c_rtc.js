var
MediaStreamTrackState
;
function
SourceInfo
(
)
{
}
SourceInfo
.
prototype
.
kind
;
SourceInfo
.
prototype
.
id
;
SourceInfo
.
prototype
.
label
;
SourceInfo
.
prototype
.
facing
;
function
MediaStreamTrack
(
)
{
}
MediaStreamTrack
.
getSources
=
function
(
callback
)
{
}
;
MediaStreamTrack
.
prototype
.
kind
;
MediaStreamTrack
.
prototype
.
id
;
MediaStreamTrack
.
prototype
.
label
;
MediaStreamTrack
.
prototype
.
enabled
;
MediaStreamTrack
.
prototype
.
readyState
;
MediaStreamTrack
.
prototype
.
onmute
;
MediaStreamTrack
.
prototype
.
onunmute
;
MediaStreamTrack
.
prototype
.
onended
;
MediaStreamTrack
.
prototype
.
clone
=
function
(
)
{
}
;
MediaStreamTrack
.
prototype
.
stop
=
function
(
)
{
}
;
function
MediaStreamTrackEvent
(
)
{
}
MediaStreamTrackEvent
.
prototype
.
track
;
function
MediaStream
(
streamOrTracks
)
{
}
MediaStream
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
MediaStream
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
MediaStream
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
MediaStream
.
prototype
.
label
;
MediaStream
.
prototype
.
id
;
MediaStream
.
prototype
.
getAudioTracks
=
function
(
)
{
}
;
MediaStream
.
prototype
.
getVideoTracks
=
function
(
)
{
}
;
MediaStream
.
prototype
.
getTrackById
=
function
(
trackId
)
{
}
;
MediaStream
.
prototype
.
addTrack
=
function
(
track
)
{
}
;
MediaStream
.
prototype
.
removeTrack
=
function
(
track
)
{
}
;
MediaStream
.
prototype
.
ended
;
MediaStream
.
prototype
.
onended
;
MediaStream
.
prototype
.
onaddtrack
;
MediaStream
.
prototype
.
onremovetrack
;
MediaStream
.
prototype
.
stop
=
function
(
)
{
}
;
var
webkitMediaStream
;
function
MediaTrackConstraintSetInterface_
(
)
{
}
MediaTrackConstraintSetInterface_
.
prototype
.
minWidth
;
MediaTrackConstraintSetInterface_
.
prototype
.
maxWidth
;
MediaTrackConstraintSetInterface_
.
prototype
.
minHeight
;
MediaTrackConstraintSetInterface_
.
prototype
.
maxHeight
;
MediaTrackConstraintSetInterface_
.
prototype
.
minAspectRatio
;
MediaTrackConstraintSetInterface_
.
prototype
.
maxAspectRatio
;
MediaTrackConstraintSetInterface_
.
prototype
.
minFrameRate
;
MediaTrackConstraintSetInterface_
.
prototype
.
maxFrameRate
;
var
MediaTrackConstraintSet
;
function
MediaTrackConstraintsInterface_
(
)
{
}
MediaTrackConstraintsInterface_
.
prototype
.
mandatory
;
MediaTrackConstraintsInterface_
.
prototype
.
optional
;
var
MediaTrackConstraints
;
function
MediaStreamConstraintsInterface_
(
)
{
}
MediaStreamConstraintsInterface_
.
prototype
.
audio
;
MediaStreamConstraintsInterface_
.
prototype
.
video
;
var
MediaStreamConstraints
;
function
NavigatorUserMediaError
(
)
{
}
NavigatorUserMediaError
.
prototype
.
PERMISSION_DENIED
;
NavigatorUserMediaError
.
prototype
.
code
;
NavigatorUserMediaError
.
prototype
.
name
;
NavigatorUserMediaError
.
prototype
.
message
;
NavigatorUserMediaError
.
prototype
.
constraintName
;
Navigator
.
prototype
.
webkitGetUserMedia
=
function
(
constraints
successCallback
errorCallback
)
{
}
;
function
MediaStreamEvent
(
type
eventInitDict
)
{
}
MediaStreamEvent
.
prototype
.
stream
;
var
RTCSdpType
;
function
RTCSessionDescription
(
descriptionInitDict
)
{
}
RTCSessionDescription
.
prototype
.
type
;
RTCSessionDescription
.
prototype
.
sdp
;
function
IceCandidate
(
label
sdp
)
{
}
IceCandidate
.
prototype
.
toSdp
=
function
(
)
{
}
;
IceCandidate
.
prototype
.
label
;
function
RTCIceCandidate
(
candidateInitDict
)
{
}
RTCIceCandidate
.
prototype
.
candidate
;
RTCIceCandidate
.
prototype
.
sdpMid
;
RTCIceCandidate
.
prototype
.
sdpMLineIndex
;
var
RTCIceServerRecord_
;
function
RTCIceServerInterface_
(
)
{
}
RTCIceServerInterface_
.
prototype
.
url
;
RTCIceServerInterface_
.
prototype
.
credential
;
var
RTCIceServer
;
var
RTCConfigurationRecord_
;
function
RTCConfigurationInterface_
(
)
{
}
RTCConfigurationInterface_
.
prototype
.
iceServers
;
var
RTCConfiguration
;
var
RTCSessionDescriptionCallback
;
var
RTCPeerConnectionErrorCallback
;
var
RTCVoidCallback
;
var
RTCSignalingState
;
var
RTCIceConnectionState
;
var
RTCIceGatheringState
;
function
RTCPeerConnectionIceEvent
(
type
eventInitDict
)
{
}
RTCPeerConnectionIceEvent
.
prototype
.
candidate
;
function
RTCStatsReport
(
)
{
}
RTCStatsReport
.
prototype
.
timestamp
;
RTCStatsReport
.
prototype
.
names
=
function
(
)
{
}
;
RTCStatsReport
.
prototype
.
stat
=
function
(
name
)
{
}
;
RTCStatsReport
.
prototype
.
local
;
RTCStatsReport
.
prototype
.
remote
;
RTCStatsReport
.
prototype
.
type
;
RTCStatsReport
.
prototype
.
id
;
var
RTCStatsElement
;
function
RTCStatsResponse
(
)
{
}
RTCStatsResponse
.
prototype
.
result
=
function
(
)
{
}
;
var
RTCStatsCallback
;
function
MediaConstraintSetInterface_
(
)
{
}
MediaConstraintSetInterface_
.
prototype
.
OfferToReceiveAudio
;
MediaConstraintSetInterface_
.
prototype
.
OfferToReceiveVideo
;
MediaConstraintSetInterface_
.
prototype
.
DtlsSrtpKeyAgreement
;
MediaConstraintSetInterface_
.
prototype
.
RtpDataChannels
;
var
MediaConstraintSet_
;
function
MediaConstraintsInterface_
(
)
{
}
MediaConstraintsInterface_
.
prototype
.
mandatory
;
MediaConstraintsInterface_
.
prototype
.
optional
;
var
MediaConstraints
;
function
RTCDataChannel
(
)
{
}
RTCDataChannel
.
prototype
.
label
;
RTCDataChannel
.
prototype
.
reliable
;
RTCDataChannel
.
prototype
.
readyState
;
RTCDataChannel
.
prototype
.
bufferedAmount
;
RTCDataChannel
.
prototype
.
onopen
;
RTCDataChannel
.
prototype
.
onerror
;
RTCDataChannel
.
prototype
.
onclose
;
RTCDataChannel
.
prototype
.
close
=
function
(
)
{
}
;
RTCDataChannel
.
prototype
.
onmessage
;
RTCDataChannel
.
prototype
.
binaryType
;
RTCDataChannel
.
prototype
.
send
=
function
(
data
)
{
}
;
function
RTCDataChannelEvent
(
)
{
}
RTCDataChannelEvent
.
prototype
.
channel
;
var
RTCDataChannelInitRecord_
;
function
RTCDataChannelInitInterface_
(
)
{
}
RTCDataChannelInitInterface_
.
prototype
.
reliable
;
var
RTCDataChannelInit
;
function
RTCPeerConnection
(
configuration
constraints
)
{
}
RTCPeerConnection
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
RTCPeerConnection
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
RTCPeerConnection
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
RTCPeerConnection
.
prototype
.
createOffer
=
function
(
successCallback
failureCallback
constraints
)
{
}
;
RTCPeerConnection
.
prototype
.
createAnswer
=
function
(
successCallback
failureCallback
constraints
)
{
}
;
RTCPeerConnection
.
prototype
.
setLocalDescription
=
function
(
description
successCallback
failureCallback
)
{
}
;
RTCPeerConnection
.
prototype
.
setRemoteDescription
=
function
(
description
successCallback
failureCallback
)
{
}
;
RTCPeerConnection
.
prototype
.
localDescription
;
RTCPeerConnection
.
prototype
.
remoteDescription
;
RTCPeerConnection
.
prototype
.
signalingState
;
RTCPeerConnection
.
prototype
.
updateIce
=
function
(
configuration
constraints
)
{
}
;
RTCPeerConnection
.
prototype
.
addIceCandidate
=
function
(
candidate
)
{
}
;
RTCPeerConnection
.
prototype
.
iceGatheringState
;
RTCPeerConnection
.
prototype
.
iceConnectionState
;
RTCPeerConnection
.
prototype
.
getLocalStreams
=
function
(
)
{
}
;
RTCPeerConnection
.
prototype
.
getRemoteStreams
=
function
(
)
{
}
;
RTCPeerConnection
.
prototype
.
getStreamById
=
function
(
streamId
)
{
}
;
RTCPeerConnection
.
prototype
.
createDataChannel
=
function
(
label
dataChannelDict
)
{
}
;
RTCPeerConnection
.
prototype
.
addStream
=
function
(
stream
constraints
)
{
}
;
RTCPeerConnection
.
prototype
.
removeStream
=
function
(
stream
)
{
}
;
RTCPeerConnection
.
prototype
.
getStats
=
function
(
successCallback
selector
)
{
}
;
RTCPeerConnection
.
prototype
.
close
=
function
(
)
{
}
;
RTCPeerConnection
.
prototype
.
onnegotiationneeded
;
RTCPeerConnection
.
prototype
.
onicecandidate
;
RTCPeerConnection
.
prototype
.
onsignalingstatechange
;
RTCPeerConnection
.
prototype
.
onaddstream
;
RTCPeerConnection
.
prototype
.
onremovestream
;
RTCPeerConnection
.
prototype
.
oniceconnectionstatechange
;
RTCPeerConnection
.
prototype
.
ondatachannel
;
var
webkitRTCPeerConnection
;
