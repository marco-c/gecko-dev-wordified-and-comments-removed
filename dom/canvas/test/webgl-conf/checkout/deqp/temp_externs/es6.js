var
symbol
;
function
Symbol
(
description
)
{
}
Symbol
.
iterator
;
function
Iterable
(
)
{
}
Iterable
.
prototype
[
Symbol
.
iterator
]
=
function
(
)
{
}
;
function
Iterator
(
)
{
}
Iterator
.
prototype
.
next
;
var
Generator
=
function
(
)
{
}
;
Generator
.
prototype
.
next
=
function
(
opt_value
)
{
}
;
Generator
.
prototype
.
return
=
function
(
value
)
{
}
;
Generator
.
prototype
.
throw
=
function
(
exception
)
{
}
;
Math
.
log10
=
function
(
value
)
{
}
;
Math
.
log2
=
function
(
value
)
{
}
;
Math
.
log1p
=
function
(
value
)
{
}
;
Math
.
expm1
=
function
(
value
)
{
}
;
Math
.
cosh
=
function
(
value
)
{
}
;
Math
.
sinh
=
function
(
value
)
{
}
;
Math
.
tanh
=
function
(
value
)
{
}
;
Math
.
acosh
=
function
(
value
)
{
}
;
Math
.
asinh
=
function
(
value
)
{
}
;
Math
.
atanh
=
function
(
value
)
{
}
;
Math
.
trunc
=
function
(
value
)
{
}
;
Math
.
sign
=
function
(
value
)
{
}
;
Math
.
cbrt
=
function
(
value
)
{
}
;
Math
.
hypot
=
function
(
value1
var_args
)
{
}
;
Object
.
is
;
Number
.
prototype
.
toLocaleString
=
function
(
opt_locales
opt_options
)
{
}
;
function
Transferable
(
)
{
}
function
ArrayBuffer
(
length
)
{
}
ArrayBuffer
.
prototype
.
byteLength
;
ArrayBuffer
.
prototype
.
slice
=
function
(
begin
opt_end
)
{
}
;
function
ArrayBufferView
(
)
{
}
ArrayBufferView
.
prototype
.
buffer
;
ArrayBufferView
.
prototype
.
byteOffset
;
ArrayBufferView
.
prototype
.
byteLength
;
function
Int8Array
(
length
opt_byteOffset
opt_length
)
{
}
Int8Array
.
BYTES_PER_ELEMENT
;
Int8Array
.
prototype
.
BYTES_PER_ELEMENT
;
Int8Array
.
prototype
.
length
;
Int8Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Int8Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Uint8Array
(
length
opt_byteOffset
opt_length
)
{
}
Uint8Array
.
BYTES_PER_ELEMENT
;
Uint8Array
.
prototype
.
BYTES_PER_ELEMENT
;
Uint8Array
.
prototype
.
length
;
Uint8Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Uint8Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Uint8ClampedArray
(
length
opt_byteOffset
opt_length
)
{
}
Uint8ClampedArray
.
BYTES_PER_ELEMENT
;
Uint8ClampedArray
.
prototype
.
BYTES_PER_ELEMENT
;
Uint8ClampedArray
.
prototype
.
length
;
Uint8ClampedArray
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Uint8ClampedArray
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
var
CanvasPixelArray
;
function
Int16Array
(
length
opt_byteOffset
opt_length
)
{
}
Int16Array
.
BYTES_PER_ELEMENT
;
Int16Array
.
prototype
.
BYTES_PER_ELEMENT
;
Int16Array
.
prototype
.
length
;
Int16Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Int16Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Uint16Array
(
length
opt_byteOffset
opt_length
)
{
}
Uint16Array
.
BYTES_PER_ELEMENT
;
Uint16Array
.
prototype
.
BYTES_PER_ELEMENT
;
Uint16Array
.
prototype
.
length
;
Uint16Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Uint16Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Int32Array
(
length
opt_byteOffset
opt_length
)
{
}
Int32Array
.
BYTES_PER_ELEMENT
;
Int32Array
.
prototype
.
BYTES_PER_ELEMENT
;
Int32Array
.
prototype
.
length
;
Int32Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Int32Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Uint32Array
(
length
opt_byteOffset
opt_length
)
{
}
Uint32Array
.
BYTES_PER_ELEMENT
;
Uint32Array
.
prototype
.
BYTES_PER_ELEMENT
;
Uint32Array
.
prototype
.
length
;
Uint32Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Uint32Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Float32Array
(
length
opt_byteOffset
opt_length
)
{
}
Float32Array
.
BYTES_PER_ELEMENT
;
Float32Array
.
prototype
.
BYTES_PER_ELEMENT
;
Float32Array
.
prototype
.
length
;
Float32Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Float32Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
Float64Array
(
length
opt_byteOffset
opt_length
)
{
}
Float64Array
.
BYTES_PER_ELEMENT
;
Float64Array
.
prototype
.
BYTES_PER_ELEMENT
;
Float64Array
.
prototype
.
length
;
Float64Array
.
prototype
.
set
=
function
(
array
opt_offset
)
{
}
;
Float64Array
.
prototype
.
subarray
=
function
(
begin
opt_end
)
{
}
;
function
DataView
(
buffer
opt_byteOffset
opt_byteLength
)
{
}
DataView
.
prototype
.
getInt8
=
function
(
byteOffset
)
{
}
;
DataView
.
prototype
.
getUint8
=
function
(
byteOffset
)
{
}
;
DataView
.
prototype
.
getInt16
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
getUint16
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
getInt32
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
getUint32
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
getFloat32
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
getFloat64
=
function
(
byteOffset
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setInt8
=
function
(
byteOffset
value
)
{
}
;
DataView
.
prototype
.
setUint8
=
function
(
byteOffset
value
)
{
}
;
DataView
.
prototype
.
setInt16
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setUint16
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setInt32
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setUint32
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setFloat32
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
DataView
.
prototype
.
setFloat64
=
function
(
byteOffset
value
opt_littleEndian
)
{
}
;
var
Thenable
;
var
IThenable
=
function
(
)
{
}
;
IThenable
.
prototype
.
then
=
function
(
opt_onFulfilled
opt_onRejected
)
{
}
;
var
Promise
=
function
(
resolver
)
{
}
;
Promise
.
resolve
=
function
(
opt_value
)
{
}
;
Promise
.
reject
=
function
(
opt_error
)
{
}
;
Promise
.
all
=
function
(
iterable
)
{
}
;
Promise
.
race
=
function
(
iterable
)
{
}
;
Promise
.
prototype
.
then
=
function
(
opt_onFulfilled
opt_onRejected
)
{
}
;
Promise
.
prototype
.
catch
=
function
(
onRejected
)
{
}
;
