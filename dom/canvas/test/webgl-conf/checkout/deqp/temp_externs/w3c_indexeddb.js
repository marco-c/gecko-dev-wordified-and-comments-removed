Window
.
prototype
.
moz_indexedDB
;
Window
.
prototype
.
mozIndexedDB
;
Window
.
prototype
.
webkitIndexedDB
;
Window
.
prototype
.
msIndexedDB
;
Window
.
prototype
.
indexedDB
;
function
IDBFactory
(
)
{
}
IDBFactory
.
prototype
.
open
=
function
(
name
opt_version
)
{
}
;
IDBFactory
.
prototype
.
deleteDatabase
=
function
(
name
)
{
}
;
function
IDBDatabaseException
(
)
{
}
function
webkitIDBDatabaseException
(
)
{
}
IDBDatabaseException
.
UNKNOWN_ERR
;
webkitIDBDatabaseException
.
UNKNOWN_ERR
;
IDBDatabaseException
.
NON_TRANSIENT_ERR
;
webkitIDBDatabaseException
.
NON_TRANSIENT_ERR
;
IDBDatabaseException
.
NOT_FOUND_ERR
;
webkitIDBDatabaseException
.
NOT_FOUND_ERR
;
IDBDatabaseException
.
CONSTRAINT_ERR
;
webkitIDBDatabaseException
.
CONSTRAINT_ERR
;
IDBDatabaseException
.
DATA_ERR
;
webkitIDBDatabaseException
.
DATA_ERR
;
IDBDatabaseException
.
NOT_ALLOWED_ERR
;
webkitIDBDatabaseException
.
NOT_ALLOWED_ERR
;
IDBDatabaseException
.
TRANSACTION_INACTIVE_ERR
;
webkitIDBDatabaseException
.
TRANSACTION_INACTIVE_ERR
;
IDBDatabaseException
.
ABORT_ERR
;
webkitIDBDatabaseException
.
ABORT_ERR
;
IDBDatabaseException
.
READ_ONLY_ERR
;
webkitIDBDatabaseException
.
READ_ONLY_ERR
;
IDBDatabaseException
.
TIMEOUT_ERR
;
webkitIDBDatabaseException
.
TIMEOUT_ERR
;
IDBDatabaseException
.
QUOTA_ERR
;
webkitIDBDatabaseException
.
QUOTA_ERR
;
IDBDatabaseException
.
prototype
.
code
;
webkitIDBDatabaseException
.
prototype
.
code
;
IDBDatabaseException
.
prototype
.
message
;
webkitIDBDatabaseException
.
prototype
.
message
;
function
IDBRequest
(
)
{
}
IDBRequest
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
IDBRequest
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
IDBRequest
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
function
webkitIDBRequest
(
)
{
}
IDBRequest
.
LOADING
;
webkitIDBRequest
.
LOADING
;
IDBRequest
.
DONE
;
webkitIDBRequest
.
DONE
;
IDBRequest
.
prototype
.
readyState
;
IDBRequest
.
prototype
.
onsuccess
=
function
(
e
)
{
}
;
IDBRequest
.
prototype
.
onerror
=
function
(
e
)
{
}
;
IDBRequest
.
prototype
.
result
;
IDBRequest
.
prototype
.
errorCode
;
IDBRequest
.
prototype
.
error
;
IDBRequest
.
prototype
.
source
;
IDBRequest
.
prototype
.
transaction
;
function
IDBOpenDBRequest
(
)
{
}
IDBOpenDBRequest
.
prototype
.
onblocked
=
function
(
e
)
{
}
;
IDBOpenDBRequest
.
prototype
.
onupgradeneeded
=
function
(
e
)
{
}
;
function
IDBDatabase
(
)
{
}
IDBDatabase
.
prototype
.
name
;
IDBDatabase
.
prototype
.
description
;
IDBDatabase
.
prototype
.
version
;
IDBDatabase
.
prototype
.
objectStoreNames
;
IDBDatabase
.
prototype
.
createObjectStore
=
function
(
name
opt_parameters
)
{
}
;
IDBDatabase
.
prototype
.
deleteObjectStore
=
function
(
name
)
{
}
;
IDBDatabase
.
prototype
.
setVersion
=
function
(
version
)
{
}
;
IDBDatabase
.
prototype
.
transaction
=
function
(
storeNames
mode
)
{
}
;
IDBDatabase
.
prototype
.
close
=
function
(
)
{
}
;
IDBDatabase
.
prototype
.
onabort
=
function
(
)
{
}
;
IDBDatabase
.
prototype
.
onerror
=
function
(
)
{
}
;
IDBDatabase
.
prototype
.
onversionchange
=
function
(
)
{
}
;
IDBDatabase
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
IDBDatabase
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
IDBDatabase
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
var
IDBKeyType
;
function
IDBObjectStore
(
)
{
}
IDBObjectStore
.
prototype
.
name
;
IDBObjectStore
.
prototype
.
keyPath
;
IDBObjectStore
.
prototype
.
indexNames
;
IDBObjectStore
.
prototype
.
transaction
;
IDBObjectStore
.
prototype
.
autoIncrement
;
IDBObjectStore
.
prototype
.
put
=
function
(
value
key
)
{
}
;
IDBObjectStore
.
prototype
.
add
=
function
(
value
key
)
{
}
;
IDBObjectStore
.
prototype
.
delete
=
function
(
key
)
{
}
;
IDBObjectStore
.
prototype
.
get
=
function
(
key
)
{
}
;
IDBObjectStore
.
prototype
.
clear
=
function
(
)
{
}
;
IDBObjectStore
.
prototype
.
openCursor
=
function
(
range
direction
)
{
}
;
IDBObjectStore
.
prototype
.
createIndex
=
function
(
name
keyPath
opt_paramters
)
{
}
;
IDBObjectStore
.
prototype
.
index
=
function
(
name
)
{
}
;
IDBObjectStore
.
prototype
.
deleteIndex
=
function
(
indexName
)
{
}
;
IDBObjectStore
.
prototype
.
count
=
function
(
key
)
{
}
;
function
IDBIndex
(
)
{
}
IDBIndex
.
prototype
.
name
;
IDBIndex
.
prototype
.
objectStore
;
IDBIndex
.
prototype
.
keyPath
;
IDBIndex
.
prototype
.
unique
;
IDBIndex
.
prototype
.
openCursor
=
function
(
range
direction
)
{
}
;
IDBIndex
.
prototype
.
openKeyCursor
=
function
(
range
direction
)
{
}
;
IDBIndex
.
prototype
.
get
=
function
(
key
)
{
}
;
IDBIndex
.
prototype
.
getKey
=
function
(
key
)
{
}
;
function
IDBCursor
(
)
{
}
function
webkitIDBCursor
(
)
{
}
IDBCursor
.
NEXT
;
webkitIDBCursor
.
NEXT
;
IDBCursor
.
NEXT_NO_DUPLICATE
;
webkitIDBCursor
.
NEXT_NO_DUPLICATE
;
IDBCursor
.
PREV
;
webkitIDBCursor
.
PREV
;
IDBCursor
.
PREV_NO_DUPLICATE
;
webkitIDBCursor
.
PREV_NO_DUPLICATE
;
IDBCursor
.
prototype
.
source
;
IDBCursor
.
prototype
.
direction
;
IDBCursor
.
prototype
.
key
;
IDBCursor
.
prototype
.
primaryKey
;
IDBCursor
.
prototype
.
update
=
function
(
value
)
{
}
;
IDBCursor
.
prototype
.
continue
=
function
(
key
)
{
}
;
IDBCursor
.
prototype
.
advance
=
function
(
count
)
{
}
;
IDBCursor
.
prototype
.
delete
=
function
(
)
{
}
;
function
IDBCursorWithValue
(
)
{
}
IDBCursorWithValue
.
prototype
.
value
;
function
IDBTransaction
(
)
{
}
function
webkitIDBTransaction
(
)
{
}
IDBTransaction
.
READ_WRITE
;
webkitIDBTransaction
.
READ_WRITE
;
IDBTransaction
.
READ_ONLY
;
webkitIDBTransaction
.
READ_ONLY
;
IDBTransaction
.
VERSION_CHANGE
;
webkitIDBTransaction
.
VERSION_CHANGE
;
IDBTransaction
.
prototype
.
mode
;
IDBTransaction
.
prototype
.
db
;
IDBTransaction
.
prototype
.
objectStore
=
function
(
name
)
{
}
;
IDBTransaction
.
prototype
.
abort
=
function
(
)
{
}
;
IDBTransaction
.
prototype
.
onabort
=
function
(
)
{
}
;
IDBTransaction
.
prototype
.
oncomplete
=
function
(
)
{
}
;
IDBTransaction
.
prototype
.
onerror
=
function
(
)
{
}
;
function
IDBKeyRange
(
)
{
}
function
webkitIDBKeyRange
(
)
{
}
IDBKeyRange
.
prototype
.
lower
;
IDBKeyRange
.
prototype
.
upper
;
IDBKeyRange
.
prototype
.
lowerOpen
;
IDBKeyRange
.
prototype
.
upperOpen
;
IDBKeyRange
.
only
=
function
(
value
)
{
}
;
webkitIDBKeyRange
.
only
=
function
(
value
)
{
}
;
IDBKeyRange
.
lowerBound
=
function
(
bound
open
)
{
}
;
webkitIDBKeyRange
.
lowerBound
=
function
(
bound
open
)
{
}
;
IDBKeyRange
.
upperBound
=
function
(
bound
open
)
{
}
;
webkitIDBKeyRange
.
upperBound
=
function
(
bound
open
)
{
}
;
IDBKeyRange
.
bound
=
function
(
left
right
openLeft
openRight
)
{
}
;
webkitIDBKeyRange
.
bound
=
function
(
left
right
openLeft
openRight
)
{
}
;
function
IDBVersionChangeEvent
(
)
{
}
IDBVersionChangeEvent
.
prototype
.
oldVersion
;
IDBVersionChangeEvent
.
prototype
.
newVersion
;
function
webkitIDBVersionChangeEvent
(
)
{
}
webkitIDBVersionChangeEvent
.
prototype
.
version
;
