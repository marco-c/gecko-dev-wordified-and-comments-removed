function
Blob
(
opt_blobParts
opt_options
)
{
}
Blob
.
prototype
.
size
;
Blob
.
prototype
.
type
;
Blob
.
prototype
.
slice
=
function
(
start
length
)
{
}
;
Blob
.
prototype
.
webkitSlice
=
function
(
start
end
)
{
}
;
Blob
.
prototype
.
mozSlice
=
function
(
start
end
)
{
}
;
function
BlobBuilder
(
)
{
}
BlobBuilder
.
prototype
.
append
=
function
(
data
endings
)
{
}
;
BlobBuilder
.
prototype
.
getBlob
=
function
(
contentType
)
{
}
;
function
WebKitBlobBuilder
(
)
{
}
WebKitBlobBuilder
.
prototype
.
append
=
function
(
data
endings
)
{
}
;
WebKitBlobBuilder
.
prototype
.
getBlob
=
function
(
contentType
)
{
}
;
function
DirectoryEntry
(
)
{
}
;
DirectoryEntry
.
prototype
.
createReader
=
function
(
)
{
}
;
DirectoryEntry
.
prototype
.
getFile
=
function
(
path
options
successCallback
errorCallback
)
{
}
;
DirectoryEntry
.
prototype
.
getDirectory
=
function
(
path
options
successCallback
errorCallback
)
{
}
;
DirectoryEntry
.
prototype
.
removeRecursively
=
function
(
successCallback
errorCallback
)
{
}
;
function
DirectoryReader
(
)
{
}
;
DirectoryReader
.
prototype
.
readEntries
=
function
(
successCallback
errorCallback
)
{
}
;
function
Entry
(
)
{
}
;
Entry
.
prototype
.
isFile
;
Entry
.
prototype
.
isDirectory
;
Entry
.
prototype
.
name
;
Entry
.
prototype
.
fullPath
;
Entry
.
prototype
.
filesystem
;
Entry
.
prototype
.
moveTo
=
function
(
parent
newName
successCallback
errorCallback
)
{
}
;
Entry
.
prototype
.
copyTo
=
function
(
parent
newName
successCallback
errorCallback
)
{
}
;
Entry
.
prototype
.
toURL
=
function
(
mimeType
)
{
}
;
Entry
.
prototype
.
remove
=
function
(
successCallback
errorCallback
)
{
}
;
Entry
.
prototype
.
getMetadata
=
function
(
successCallback
errorCallback
)
{
}
;
Entry
.
prototype
.
getParent
=
function
(
successCallback
errorCallback
)
{
}
;
function
File
(
)
{
}
File
.
prototype
.
fileName
;
File
.
prototype
.
fileSize
;
File
.
prototype
.
name
;
File
.
prototype
.
lastModifiedDate
;
function
FileEntry
(
)
{
}
;
FileEntry
.
prototype
.
createWriter
=
function
(
successCallback
errorCallback
)
{
}
;
FileEntry
.
prototype
.
file
=
function
(
successCallback
errorCallback
)
{
}
;
function
FileError
(
)
{
}
FileError
.
prototype
.
NOT_FOUND_ERR
=
1
;
FileError
.
NOT_FOUND_ERR
=
1
;
FileError
.
prototype
.
SECURITY_ERR
=
2
;
FileError
.
SECURITY_ERR
=
2
;
FileError
.
prototype
.
ABORT_ERR
=
3
;
FileError
.
ABORT_ERR
=
3
;
FileError
.
prototype
.
NOT_READABLE_ERR
=
4
;
FileError
.
NOT_READABLE_ERR
=
4
;
FileError
.
prototype
.
ENCODING_ERR
=
5
;
FileError
.
ENCODING_ERR
=
5
;
FileError
.
prototype
.
NO_MODIFICATION_ALLOWED_ERR
=
6
;
FileError
.
NO_MODIFICATION_ALLOWED_ERR
=
6
;
FileError
.
prototype
.
INVALID_STATE_ERR
=
7
;
FileError
.
INVALID_STATE_ERR
=
7
;
FileError
.
prototype
.
SYNTAX_ERR
=
8
;
FileError
.
SYNTAX_ERR
=
8
;
FileError
.
prototype
.
INVALID_MODIFICATION_ERR
=
9
;
FileError
.
INVALID_MODIFICATION_ERR
=
9
;
FileError
.
prototype
.
QUOTA_EXCEEDED_ERR
=
10
;
FileError
.
QUOTA_EXCEEDED_ERR
=
10
;
FileError
.
prototype
.
TYPE_MISMATCH_ERR
=
11
;
FileError
.
TYPE_MISMATCH_ERR
=
11
;
FileError
.
prototype
.
PATH_EXISTS_ERR
=
12
;
FileError
.
PATH_EXISTS_ERR
=
12
;
FileError
.
prototype
.
code
;
function
FileReader
(
)
{
}
FileReader
.
prototype
.
addEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
FileReader
.
prototype
.
removeEventListener
=
function
(
type
listener
opt_useCapture
)
{
}
;
FileReader
.
prototype
.
dispatchEvent
=
function
(
evt
)
{
}
;
FileReader
.
prototype
.
readAsArrayBuffer
=
function
(
blob
)
{
}
;
FileReader
.
prototype
.
readAsBinaryString
=
function
(
blob
)
{
}
;
FileReader
.
prototype
.
readAsText
=
function
(
blob
encoding
)
{
}
;
FileReader
.
prototype
.
readAsDataURL
=
function
(
blob
)
{
}
;
FileReader
.
prototype
.
abort
=
function
(
)
{
}
;
FileReader
.
prototype
.
EMPTY
=
0
;
FileReader
.
prototype
.
LOADING
=
1
;
FileReader
.
prototype
.
DONE
=
2
;
FileReader
.
prototype
.
readyState
;
FileReader
.
prototype
.
result
;
FileReader
.
prototype
.
error
;
FileReader
.
prototype
.
onloadstart
;
FileReader
.
prototype
.
onprogress
;
FileReader
.
prototype
.
onload
;
FileReader
.
prototype
.
onabort
;
FileReader
.
prototype
.
onerror
;
FileReader
.
prototype
.
onloadend
;
function
FileSaver
(
)
{
}
;
FileSaver
.
prototype
.
abort
=
function
(
)
{
}
;
FileSaver
.
prototype
.
INIT
=
0
;
FileSaver
.
prototype
.
WRITING
=
1
;
FileSaver
.
prototype
.
DONE
=
2
;
FileSaver
.
prototype
.
readyState
;
FileSaver
.
prototype
.
error
;
FileSaver
.
prototype
.
onwritestart
;
FileSaver
.
prototype
.
onprogress
;
FileSaver
.
prototype
.
onwrite
;
FileSaver
.
prototype
.
onabort
;
FileSaver
.
prototype
.
onerror
;
FileSaver
.
prototype
.
onwriteend
;
function
FileSystem
(
)
{
}
FileSystem
.
prototype
.
name
;
FileSystem
.
prototype
.
root
;
function
FileWriter
(
)
{
}
FileWriter
.
prototype
.
position
;
FileWriter
.
prototype
.
length
;
FileWriter
.
prototype
.
write
=
function
(
blob
)
{
}
;
FileWriter
.
prototype
.
seek
=
function
(
offset
)
{
}
;
FileWriter
.
prototype
.
truncate
=
function
(
size
)
{
}
;
function
LocalFileSystem
(
)
{
}
function
Metadata
(
)
{
}
Metadata
.
prototype
.
modificationTime
;
Metadata
.
prototype
.
size
;
Window
.
prototype
.
TEMPORARY
=
0
;
Window
.
prototype
.
PERSISTENT
=
1
;
function
requestFileSystem
(
type
size
successCallback
errorCallback
)
{
}
Window
.
prototype
.
requestFileSystem
=
function
(
type
size
successCallback
errorCallback
)
{
}
;
function
resolveLocalFileSystemURI
(
uri
successCallback
errorCallback
)
{
}
Window
.
prototype
.
resolveLocalFileSystemURI
=
function
(
uri
successCallback
errorCallback
)
{
}
function
webkitRequestFileSystem
(
type
size
successCallback
errorCallback
)
{
}
Window
.
prototype
.
webkitRequestFileSystem
=
function
(
type
size
successCallback
errorCallback
)
{
}
;
function
webkitResolveLocalFileSystemURI
(
uri
successCallback
errorCallback
)
{
}
Window
.
prototype
.
webkitResolveLocalFileSystemURI
=
function
(
uri
successCallback
errorCallback
)
{
}
function
createObjectURL
(
obj
)
{
}
;
Window
.
prototype
.
createObjectURL
=
function
(
obj
)
{
}
;
function
revokeObjectURL
(
url
)
{
}
;
Window
.
prototype
.
revokeObjectURL
=
function
(
url
)
{
}
;
function
DOMURL
(
)
{
}
function
URL
(
urlString
opt_base
)
{
}
URL
.
prototype
.
protocol
;
URL
.
createObjectURL
=
function
(
obj
)
{
}
;
URL
.
revokeObjectURL
=
function
(
url
)
{
}
;
function
webkitURL
(
urlString
opt_base
)
{
}
window
.
webkitURL
=
webkitURL
;
webkitURL
.
createObjectURL
=
function
(
obj
)
{
}
;
webkitURL
.
revokeObjectURL
=
function
(
url
)
{
}
;
function
StorageInfo
(
)
{
}
StorageInfo
.
prototype
.
TEMPORARY
=
0
;
StorageInfo
.
prototype
.
PERSISTENT
=
1
;
StorageInfo
.
prototype
.
requestQuota
=
function
(
type
size
successCallback
errorCallback
)
{
}
;
StorageInfo
.
prototype
.
queryUsageAndQuota
=
function
(
type
successCallback
errorCallback
)
{
}
;
Window
.
prototype
.
webkitStorageInfo
;
function
StorageQuota
(
)
{
}
StorageQuota
.
prototype
.
requestQuota
=
function
(
size
opt_successCallback
opt_errorCallback
)
{
}
;
StorageQuota
.
prototype
.
queryUsageAndQuota
=
function
(
successCallback
opt_errorCallback
)
{
}
;
