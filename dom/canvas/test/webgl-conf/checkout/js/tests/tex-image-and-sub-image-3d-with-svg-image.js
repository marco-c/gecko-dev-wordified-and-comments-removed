function
generateTest
(
internalFormat
pixelFormat
pixelType
prologue
resourcePath
defaultContextVersion
)
{
var
wtu
=
WebGLTestUtils
;
var
tiu
=
TexImageUtils
;
var
gl
=
null
;
var
successfullyParsed
=
false
;
var
imgCanvas
;
var
redColor
=
[
255
0
0
]
;
var
greenColor
=
[
0
255
0
]
;
function
init
(
)
{
description
(
'
Verify
texImage3D
and
texSubImage3D
code
paths
taking
SVG
image
elements
(
'
+
internalFormat
+
'
/
'
+
pixelFormat
+
'
/
'
+
pixelType
+
'
)
'
)
;
wtu
.
setDefault3DContextVersion
(
defaultContextVersion
)
;
gl
=
wtu
.
create3DContext
(
"
example
"
)
;
if
(
!
prologue
(
gl
)
)
{
finishTest
(
)
;
return
;
}
switch
(
gl
[
pixelFormat
]
)
{
case
gl
.
RED
:
case
gl
.
RED_INTEGER
:
greenColor
=
[
0
0
0
]
;
break
;
default
:
break
;
}
gl
.
clearColor
(
0
0
0
1
)
;
gl
.
clearDepth
(
1
)
;
wtu
.
loadTexture
(
gl
resourcePath
+
"
red
-
green
.
svg
"
runTest
)
;
}
function
runOneIteration
(
image
flipY
topColor
bottomColor
bindingTarget
program
)
{
debug
(
'
Testing
'
+
'
with
flipY
=
'
+
flipY
+
'
bindingTarget
=
'
+
(
bindingTarget
=
=
gl
.
TEXTURE_3D
?
'
TEXTURE_3D
'
:
'
TEXTURE_2D_ARRAY
'
)
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
)
;
gl
.
colorMask
(
1
1
1
0
)
;
var
texture
=
gl
.
createTexture
(
)
;
gl
.
bindTexture
(
bindingTarget
texture
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MIN_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MAG_FILTER
gl
.
NEAREST
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_FLIP_Y_WEBGL
flipY
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_PREMULTIPLY_ALPHA_WEBGL
false
)
;
wtu
.
failIfGLError
(
gl
'
gl
.
pixelStorei
(
gl
.
UNPACK_COLORSPACE_CONVERSION_WEBGL
gl
.
NONE
)
;
'
)
;
gl
.
texImage3D
(
bindingTarget
0
gl
[
internalFormat
]
image
.
width
image
.
height
1
0
gl
[
pixelFormat
]
gl
[
pixelType
]
null
)
;
gl
.
texSubImage3D
(
bindingTarget
0
0
0
0
image
.
width
image
.
height
1
gl
[
pixelFormat
]
gl
[
pixelType
]
image
)
;
wtu
.
clearAndDrawUnitQuad
(
gl
[
0
0
0
255
]
)
;
debug
(
"
Checking
lower
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
4
2
2
bottomColor
"
shouldBe
"
+
bottomColor
)
;
debug
(
"
Checking
upper
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
gl
.
canvas
.
height
-
8
2
2
topColor
"
shouldBe
"
+
topColor
)
;
}
function
runTest
(
image
)
{
var
program
=
tiu
.
setupTexturedQuadWith3D
(
gl
internalFormat
)
;
runTestOnBindingTarget
(
image
gl
.
TEXTURE_3D
program
)
;
program
=
tiu
.
setupTexturedQuadWith2DArray
(
gl
internalFormat
)
;
runTestOnBindingTarget
(
image
gl
.
TEXTURE_2D_ARRAY
program
)
;
wtu
.
glErrorShouldBe
(
gl
gl
.
NO_ERROR
"
should
be
no
errors
"
)
;
finishTest
(
)
;
}
function
runTestOnBindingTarget
(
image
bindingTarget
program
)
{
var
cases
=
[
{
flipY
:
true
topColor
:
redColor
bottomColor
:
greenColor
}
{
flipY
:
false
topColor
:
greenColor
bottomColor
:
redColor
}
]
;
for
(
var
i
in
cases
)
{
runOneIteration
(
image
cases
[
i
]
.
flipY
cases
[
i
]
.
topColor
cases
[
i
]
.
bottomColor
bindingTarget
program
)
;
}
}
return
init
;
}
