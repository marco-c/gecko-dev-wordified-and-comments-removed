initTestingHarness
(
)
;
var
old
=
debug
;
var
debug
=
function
(
msg
)
{
bufferedLogToConsole
(
msg
)
;
old
(
msg
)
;
}
;
function
generateTest
(
internalFormat
pixelFormat
pixelType
prologue
resourcePath
defaultContextVersion
)
{
var
wtu
=
WebGLTestUtils
;
var
tiu
=
TexImageUtils
;
var
gl
=
null
;
var
successfullyParsed
=
false
;
var
redColor
=
[
255
0
0
]
;
var
greenColor
=
[
0
255
0
]
;
var
videos
=
[
{
src
:
resourcePath
+
"
red
-
green
.
mp4
"
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
42E01E
mp4a
.
40
.
2
"
'
}
{
src
:
resourcePath
+
"
red
-
green
.
bt601
.
vp9
.
webm
"
type
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
}
{
src
:
resourcePath
+
"
red
-
green
.
webmvp8
.
webm
"
type
:
'
video
/
webm
;
codecs
=
"
vp8
vorbis
"
'
}
]
;
function
init
(
)
{
description
(
'
Verify
texImage3D
and
texSubImage3D
code
paths
taking
video
elements
(
'
+
internalFormat
+
'
/
'
+
pixelFormat
+
'
/
'
+
pixelType
+
'
)
'
)
;
wtu
.
setDefault3DContextVersion
(
defaultContextVersion
)
;
gl
=
wtu
.
create3DContext
(
"
example
"
)
;
if
(
!
prologue
(
gl
)
)
{
finishTest
(
)
;
return
;
}
switch
(
gl
[
pixelFormat
]
)
{
case
gl
.
RED
:
case
gl
.
RED_INTEGER
:
greenColor
=
[
0
0
0
]
;
break
;
default
:
break
;
}
gl
.
clearColor
(
0
0
0
1
)
;
gl
.
clearDepth
(
1
)
;
runTest
(
)
;
}
function
runOneIteration
(
videoElement
flipY
useTexSubImage3D
topColor
bottomColor
program
bindingTarget
depth
sourceSubRectangle
unpackImageHeight
rTextureCoord
)
{
debug
(
'
Testing
'
+
(
useTexSubImage3D
?
"
texSubImage3D
"
:
"
texImage3D
"
)
+
'
with
flipY
=
'
+
flipY
+
'
bindingTarget
=
'
+
(
bindingTarget
=
=
gl
.
TEXTURE_3D
?
'
TEXTURE_3D
'
:
'
TEXTURE_2D_ARRAY
'
)
+
(
sourceSubRectangle
?
'
sourceSubRectangle
=
'
+
sourceSubRectangle
:
'
'
)
+
(
unpackImageHeight
?
'
unpackImageHeight
=
'
+
unpackImageHeight
:
'
'
)
+
'
depth
=
'
+
depth
+
'
rTextureCoord
=
'
+
rTextureCoord
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
)
;
gl
.
colorMask
(
1
1
1
0
)
;
var
texture
=
gl
.
createTexture
(
)
;
gl
.
bindTexture
(
bindingTarget
texture
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MIN_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MAG_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_WRAP_R
gl
.
CLAMP_TO_EDGE
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_WRAP_S
gl
.
CLAMP_TO_EDGE
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_WRAP_T
gl
.
CLAMP_TO_EDGE
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_FLIP_Y_WEBGL
flipY
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_PREMULTIPLY_ALPHA_WEBGL
false
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_COLORSPACE_CONVERSION_WEBGL
gl
.
NONE
)
;
var
uploadWidth
=
videoElement
.
width
;
var
uploadHeight
=
videoElement
.
height
;
if
(
sourceSubRectangle
)
{
gl
.
pixelStorei
(
gl
.
UNPACK_SKIP_PIXELS
sourceSubRectangle
[
0
]
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_SKIP_ROWS
sourceSubRectangle
[
1
]
)
;
uploadWidth
=
sourceSubRectangle
[
2
]
;
uploadHeight
=
sourceSubRectangle
[
3
]
;
}
if
(
unpackImageHeight
)
{
gl
.
pixelStorei
(
gl
.
UNPACK_IMAGE_HEIGHT
unpackImageHeight
)
;
}
if
(
useTexSubImage3D
)
{
gl
.
texImage3D
(
bindingTarget
0
gl
[
internalFormat
]
uploadWidth
uploadHeight
depth
0
gl
[
pixelFormat
]
gl
[
pixelType
]
null
)
;
gl
.
texSubImage3D
(
bindingTarget
0
0
0
0
uploadWidth
uploadHeight
depth
gl
[
pixelFormat
]
gl
[
pixelType
]
videoElement
)
;
}
else
{
gl
.
texImage3D
(
bindingTarget
0
gl
[
internalFormat
]
uploadWidth
uploadHeight
depth
0
gl
[
pixelFormat
]
gl
[
pixelType
]
videoElement
)
;
}
gl
.
pixelStorei
(
gl
.
UNPACK_SKIP_PIXELS
0
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_SKIP_ROWS
0
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_IMAGE_HEIGHT
0
)
;
var
c
=
document
.
createElement
(
"
canvas
"
)
;
c
.
width
=
16
;
c
.
height
=
16
;
c
.
style
.
border
=
"
1px
solid
black
"
;
var
ctx
=
c
.
getContext
(
"
2d
"
)
;
ctx
.
drawImage
(
videoElement
0
0
16
16
)
;
document
.
body
.
appendChild
(
c
)
;
var
rCoordLocation
=
gl
.
getUniformLocation
(
program
'
uRCoord
'
)
;
if
(
!
rCoordLocation
)
{
testFailed
(
'
Shader
incorrectly
set
up
;
couldn
\
'
t
find
uRCoord
uniform
'
)
;
return
;
}
gl
.
uniform1f
(
rCoordLocation
rTextureCoord
)
;
wtu
.
clearAndDrawUnitQuad
(
gl
[
0
0
0
255
]
)
;
const
tolerance
=
6
;
debug
(
"
Checking
lower
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
4
2
2
bottomColor
"
shouldBe
"
+
bottomColor
tolerance
)
;
debug
(
"
Checking
upper
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
gl
.
canvas
.
height
-
8
2
2
topColor
"
shouldBe
"
+
topColor
tolerance
)
;
}
function
runTest
(
videoElement
)
{
var
cases
=
[
{
flipY
:
false
sourceSubRectangle
:
[
32
16
16
16
]
depth
:
5
rTextureCoord
:
0
topColor
:
redColor
bottomColor
:
redColor
}
{
flipY
:
false
sourceSubRectangle
:
[
32
16
16
16
]
depth
:
5
rTextureCoord
:
4
topColor
:
greenColor
bottomColor
:
greenColor
}
{
flipY
:
false
sourceSubRectangle
:
[
24
48
32
32
]
depth
:
1
rTextureCoord
:
0
topColor
:
greenColor
bottomColor
:
redColor
}
{
flipY
:
true
sourceSubRectangle
:
[
24
48
32
32
]
depth
:
1
rTextureCoord
:
0
topColor
:
redColor
bottomColor
:
greenColor
}
{
flipY
:
false
sourceSubRectangle
:
[
32
16
16
16
]
depth
:
2
unpackImageHeight
:
64
rTextureCoord
:
0
topColor
:
redColor
bottomColor
:
redColor
}
{
flipY
:
false
sourceSubRectangle
:
[
32
16
16
16
]
depth
:
2
unpackImageHeight
:
64
rTextureCoord
:
1
topColor
:
greenColor
bottomColor
:
greenColor
}
]
;
function
runTexImageTest
(
bindingTarget
)
{
var
program
;
if
(
bindingTarget
=
=
gl
.
TEXTURE_3D
)
{
program
=
tiu
.
setupTexturedQuadWith3D
(
gl
internalFormat
)
;
}
else
{
program
=
tiu
.
setupTexturedQuadWith2DArray
(
gl
internalFormat
)
;
}
return
new
Promise
(
function
(
resolve
reject
)
{
var
videoNdx
=
0
;
var
video
;
function
runNextVideo
(
)
{
if
(
video
)
{
video
.
pause
(
)
;
}
if
(
videoNdx
=
=
videos
.
length
)
{
resolve
(
"
SUCCESS
"
)
;
return
;
}
var
info
=
videos
[
videoNdx
+
+
]
;
debug
(
"
"
)
;
debug
(
"
testing
:
"
+
info
.
type
)
;
video
=
document
.
createElement
(
"
video
"
)
;
video
.
muted
=
true
;
var
canPlay
=
true
;
if
(
!
video
.
canPlayType
)
{
testFailed
(
"
video
.
canPlayType
required
method
missing
"
)
;
runNextVideo
(
)
;
return
;
}
if
(
!
video
.
canPlayType
(
info
.
type
)
.
replace
(
/
no
/
'
'
)
)
{
debug
(
info
.
type
+
"
unsupported
"
)
;
runNextVideo
(
)
;
return
;
}
;
document
.
body
.
appendChild
(
video
)
;
video
.
type
=
info
.
type
;
video
.
src
=
info
.
src
;
wtu
.
startPlayingAndWaitForVideo
(
video
runTest
)
;
}
function
runTest
(
)
{
for
(
var
i
in
cases
)
{
runOneIteration
(
video
cases
[
i
]
.
flipY
false
cases
[
i
]
.
topColor
cases
[
i
]
.
bottomColor
program
bindingTarget
cases
[
i
]
.
depth
cases
[
i
]
.
sourceSubRectangle
cases
[
i
]
.
unpackImageHeight
cases
[
i
]
.
rTextureCoord
)
;
runOneIteration
(
video
cases
[
i
]
.
flipY
true
cases
[
i
]
.
topColor
cases
[
i
]
.
bottomColor
program
bindingTarget
cases
[
i
]
.
depth
cases
[
i
]
.
sourceSubRectangle
cases
[
i
]
.
unpackImageHeight
cases
[
i
]
.
rTextureCoord
)
;
}
runNextVideo
(
)
;
}
runNextVideo
(
)
;
}
)
;
}
runTexImageTest
(
gl
.
TEXTURE_3D
)
.
then
(
function
(
val
)
{
runTexImageTest
(
gl
.
TEXTURE_2D_ARRAY
)
.
then
(
function
(
val
)
{
wtu
.
glErrorShouldBe
(
gl
gl
.
NO_ERROR
"
should
be
no
errors
"
)
;
finishTest
(
)
;
}
)
;
}
)
;
}
return
init
;
}
