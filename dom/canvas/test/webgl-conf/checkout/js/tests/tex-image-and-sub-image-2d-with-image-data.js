function
generateTest
(
internalFormat
pixelFormat
pixelType
prologue
resourcePath
defaultContextVersion
)
{
var
wtu
=
WebGLTestUtils
;
var
tiu
=
TexImageUtils
;
var
gl
=
null
;
var
successfullyParsed
=
false
;
var
imageData
=
null
;
var
blackColor
=
[
0
0
0
]
;
var
redColor
=
[
255
0
0
]
;
var
greenColor
=
[
0
255
0
]
;
function
init
(
)
{
description
(
'
Verify
texImage2D
and
texSubImage2D
code
paths
taking
ImageData
(
'
+
internalFormat
+
'
/
'
+
pixelFormat
+
'
/
'
+
pixelType
+
'
)
'
)
;
wtu
.
setDefault3DContextVersion
(
defaultContextVersion
)
;
gl
=
wtu
.
create3DContext
(
"
example
"
)
;
if
(
!
prologue
(
gl
)
)
{
finishTest
(
)
;
return
;
}
switch
(
gl
[
pixelFormat
]
)
{
case
gl
.
RED
:
case
gl
.
RED_INTEGER
:
greenColor
=
[
0
0
0
]
;
break
;
default
:
break
;
}
gl
.
clearColor
(
0
0
0
1
)
;
gl
.
clearDepth
(
1
)
;
gl
.
disable
(
gl
.
BLEND
)
;
var
canvas2d
=
document
.
getElementById
(
"
texcanvas
"
)
;
var
context2d
=
canvas2d
.
getContext
(
"
2d
"
)
;
imageData
=
context2d
.
createImageData
(
2
2
)
;
var
data
=
imageData
.
data
;
data
[
0
]
=
255
;
data
[
1
]
=
0
;
data
[
2
]
=
0
;
data
[
3
]
=
255
;
data
[
4
]
=
255
;
data
[
5
]
=
0
;
data
[
6
]
=
0
;
data
[
7
]
=
0
;
data
[
8
]
=
0
;
data
[
9
]
=
255
;
data
[
10
]
=
0
;
data
[
11
]
=
255
;
data
[
12
]
=
0
;
data
[
13
]
=
255
;
data
[
14
]
=
0
;
data
[
15
]
=
0
;
runTest
(
)
;
}
function
runOneIteration
(
useTexSubImage2D
flipY
premultiplyAlpha
bindingTarget
program
)
{
debug
(
'
Testing
'
+
(
useTexSubImage2D
?
'
texSubImage2D
'
:
'
texImage2D
'
)
+
'
with
flipY
=
'
+
flipY
+
'
and
premultiplyAlpha
=
'
+
premultiplyAlpha
+
'
bindingTarget
=
'
+
(
bindingTarget
=
=
gl
.
TEXTURE_2D
?
'
TEXTURE_2D
'
:
'
TEXTURE_CUBE_MAP
'
)
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
)
;
gl
.
colorMask
(
1
1
1
0
)
;
var
texture
=
gl
.
createTexture
(
)
;
gl
.
bindTexture
(
bindingTarget
texture
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MIN_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MAG_FILTER
gl
.
NEAREST
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_FLIP_Y_WEBGL
flipY
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_PREMULTIPLY_ALPHA_WEBGL
premultiplyAlpha
)
;
var
targets
=
[
gl
.
TEXTURE_2D
]
;
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
targets
=
[
gl
.
TEXTURE_CUBE_MAP_POSITIVE_X
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_X
gl
.
TEXTURE_CUBE_MAP_POSITIVE_Y
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_Y
gl
.
TEXTURE_CUBE_MAP_POSITIVE_Z
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_Z
]
;
}
for
(
var
tt
=
0
;
tt
<
targets
.
length
;
+
+
tt
)
{
if
(
useTexSubImage2D
)
{
gl
.
texImage2D
(
targets
[
tt
]
0
gl
[
internalFormat
]
imageData
.
width
imageData
.
height
0
gl
[
pixelFormat
]
gl
[
pixelType
]
null
)
;
gl
.
texSubImage2D
(
targets
[
tt
]
0
0
0
gl
[
pixelFormat
]
gl
[
pixelType
]
imageData
)
;
}
else
{
gl
.
texImage2D
(
targets
[
tt
]
0
gl
[
internalFormat
]
gl
[
pixelFormat
]
gl
[
pixelType
]
imageData
)
;
}
}
var
width
=
gl
.
canvas
.
width
;
var
halfWidth
=
Math
.
floor
(
width
/
2
)
;
var
height
=
gl
.
canvas
.
height
;
var
halfHeight
=
Math
.
floor
(
height
/
2
)
;
var
top
=
flipY
?
0
:
(
height
-
halfHeight
)
;
var
bottom
=
flipY
?
(
height
-
halfHeight
)
:
0
;
var
tl
=
redColor
;
var
tr
=
premultiplyAlpha
?
blackColor
:
redColor
;
var
bl
=
greenColor
;
var
br
=
premultiplyAlpha
?
blackColor
:
greenColor
;
var
loc
;
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
loc
=
gl
.
getUniformLocation
(
program
"
face
"
)
;
}
for
(
var
tt
=
0
;
tt
<
targets
.
length
;
+
+
tt
)
{
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
gl
.
uniform1i
(
loc
targets
[
tt
]
)
;
}
wtu
.
clearAndDrawUnitQuad
(
gl
[
0
0
0
255
]
)
;
debug
(
"
Checking
"
+
(
flipY
?
"
top
"
:
"
bottom
"
)
)
;
wtu
.
checkCanvasRect
(
gl
0
bottom
halfWidth
halfHeight
tl
"
shouldBe
"
+
tl
)
;
wtu
.
checkCanvasRect
(
gl
halfWidth
bottom
halfWidth
halfHeight
tr
"
shouldBe
"
+
tr
)
;
debug
(
"
Checking
"
+
(
flipY
?
"
bottom
"
:
"
top
"
)
)
;
wtu
.
checkCanvasRect
(
gl
0
top
halfWidth
halfHeight
bl
"
shouldBe
"
+
bl
)
;
wtu
.
checkCanvasRect
(
gl
halfWidth
top
halfWidth
halfHeight
br
"
shouldBe
"
+
br
)
;
}
}
function
runTest
(
)
{
var
program
=
tiu
.
setupTexturedQuad
(
gl
internalFormat
)
;
runTestOnBindingTarget
(
gl
.
TEXTURE_2D
program
)
;
program
=
tiu
.
setupTexturedQuadWithCubeMap
(
gl
internalFormat
)
;
runTestOnBindingTarget
(
gl
.
TEXTURE_CUBE_MAP
program
)
;
wtu
.
glErrorShouldBe
(
gl
gl
.
NO_ERROR
"
should
be
no
errors
"
)
;
finishTest
(
)
;
}
function
runTestOnBindingTarget
(
bindingTarget
program
)
{
var
cases
=
[
{
sub
:
false
flipY
:
true
premultiplyAlpha
:
false
}
{
sub
:
false
flipY
:
false
premultiplyAlpha
:
false
}
{
sub
:
false
flipY
:
true
premultiplyAlpha
:
true
}
{
sub
:
false
flipY
:
false
premultiplyAlpha
:
true
}
{
sub
:
true
flipY
:
true
premultiplyAlpha
:
false
}
{
sub
:
true
flipY
:
false
premultiplyAlpha
:
false
}
{
sub
:
true
flipY
:
true
premultiplyAlpha
:
true
}
{
sub
:
true
flipY
:
false
premultiplyAlpha
:
true
}
]
;
for
(
var
i
in
cases
)
{
runOneIteration
(
cases
[
i
]
.
sub
cases
[
i
]
.
flipY
cases
[
i
]
.
premultiplyAlpha
bindingTarget
program
)
;
}
}
return
init
;
}
