function
generateTest
(
internalFormat
pixelFormat
pixelType
prologue
resourcePath
defaultContextVersion
)
{
var
wtu
=
WebGLTestUtils
;
var
tiu
=
TexImageUtils
;
var
gl
=
null
;
var
successfullyParsed
=
false
;
var
imgCanvas
;
var
redColor
=
[
255
0
0
]
;
var
greenColor
=
[
0
255
0
]
;
function
init
(
)
{
description
(
'
Verify
texImage2D
and
texSubImage2D
code
paths
taking
image
elements
(
'
+
internalFormat
+
'
/
'
+
pixelFormat
+
'
/
'
+
pixelType
+
'
)
'
)
;
wtu
.
setDefault3DContextVersion
(
defaultContextVersion
)
;
gl
=
wtu
.
create3DContext
(
"
example
"
)
;
if
(
!
prologue
(
gl
)
)
{
finishTest
(
)
;
return
;
}
switch
(
gl
[
pixelFormat
]
)
{
case
gl
.
RED
:
case
gl
.
RED_INTEGER
:
greenColor
=
[
0
0
0
]
;
break
;
default
:
break
;
}
gl
.
clearColor
(
0
0
0
1
)
;
gl
.
clearDepth
(
1
)
;
wtu
.
loadTexture
(
gl
resourcePath
+
"
red
-
green
.
png
"
runTest
)
;
}
function
runOneIteration
(
image
useTexSubImage2D
flipY
topColor
bottomColor
bindingTarget
program
)
{
debug
(
'
Testing
'
+
(
useTexSubImage2D
?
'
texSubImage2D
'
:
'
texImage2D
'
)
+
'
with
flipY
=
'
+
flipY
+
'
bindingTarget
=
'
+
(
bindingTarget
=
=
gl
.
TEXTURE_2D
?
'
TEXTURE_2D
'
:
'
TEXTURE_CUBE_MAP
'
)
)
;
gl
.
clear
(
gl
.
COLOR_BUFFER_BIT
|
gl
.
DEPTH_BUFFER_BIT
)
;
gl
.
colorMask
(
1
1
1
0
)
;
var
texture
=
gl
.
createTexture
(
)
;
gl
.
bindTexture
(
bindingTarget
texture
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MIN_FILTER
gl
.
NEAREST
)
;
gl
.
texParameteri
(
bindingTarget
gl
.
TEXTURE_MAG_FILTER
gl
.
NEAREST
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_FLIP_Y_WEBGL
flipY
)
;
gl
.
pixelStorei
(
gl
.
UNPACK_PREMULTIPLY_ALPHA_WEBGL
false
)
;
wtu
.
failIfGLError
(
gl
'
gl
.
pixelStorei
(
gl
.
UNPACK_COLORSPACE_CONVERSION_WEBGL
gl
.
NONE
)
;
'
)
;
var
targets
=
[
gl
.
TEXTURE_2D
]
;
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
targets
=
[
gl
.
TEXTURE_CUBE_MAP_POSITIVE_X
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_X
gl
.
TEXTURE_CUBE_MAP_POSITIVE_Y
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_Y
gl
.
TEXTURE_CUBE_MAP_POSITIVE_Z
gl
.
TEXTURE_CUBE_MAP_NEGATIVE_Z
]
;
}
for
(
var
tt
=
0
;
tt
<
targets
.
length
;
+
+
tt
)
{
if
(
useTexSubImage2D
)
{
gl
.
texImage2D
(
targets
[
tt
]
0
gl
[
internalFormat
]
image
.
width
image
.
height
0
gl
[
pixelFormat
]
gl
[
pixelType
]
null
)
;
gl
.
texSubImage2D
(
targets
[
tt
]
0
0
0
gl
[
pixelFormat
]
gl
[
pixelType
]
image
)
;
}
else
{
gl
.
texImage2D
(
targets
[
tt
]
0
gl
[
internalFormat
]
gl
[
pixelFormat
]
gl
[
pixelType
]
image
)
;
}
}
var
loc
;
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
loc
=
gl
.
getUniformLocation
(
program
"
face
"
)
;
}
for
(
var
tt
=
0
;
tt
<
targets
.
length
;
+
+
tt
)
{
if
(
bindingTarget
=
=
gl
.
TEXTURE_CUBE_MAP
)
{
gl
.
uniform1i
(
loc
targets
[
tt
]
)
;
}
wtu
.
clearAndDrawUnitQuad
(
gl
[
0
0
0
255
]
)
;
debug
(
"
Checking
lower
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
4
2
2
bottomColor
"
shouldBe
"
+
bottomColor
)
;
debug
(
"
Checking
upper
left
corner
"
)
;
wtu
.
checkCanvasRect
(
gl
4
gl
.
canvas
.
height
-
8
2
2
topColor
"
shouldBe
"
+
topColor
)
;
}
}
function
runTestOnImage
(
image
)
{
var
cases
=
[
{
sub
:
false
flipY
:
true
topColor
:
redColor
bottomColor
:
greenColor
}
{
sub
:
false
flipY
:
false
topColor
:
greenColor
bottomColor
:
redColor
}
{
sub
:
true
flipY
:
true
topColor
:
redColor
bottomColor
:
greenColor
}
{
sub
:
true
flipY
:
false
topColor
:
greenColor
bottomColor
:
redColor
}
]
;
var
program
=
tiu
.
setupTexturedQuad
(
gl
internalFormat
)
;
for
(
var
i
in
cases
)
{
runOneIteration
(
image
cases
[
i
]
.
sub
cases
[
i
]
.
flipY
cases
[
i
]
.
topColor
cases
[
i
]
.
bottomColor
gl
.
TEXTURE_2D
program
)
;
}
if
(
image
.
width
!
=
image
.
height
)
return
;
program
=
tiu
.
setupTexturedQuadWithCubeMap
(
gl
internalFormat
)
;
for
(
var
i
in
cases
)
{
runOneIteration
(
image
cases
[
i
]
.
sub
cases
[
i
]
.
flipY
cases
[
i
]
.
topColor
cases
[
i
]
.
bottomColor
gl
.
TEXTURE_CUBE_MAP
program
)
;
}
}
function
runTest
(
image
)
{
runTestOnImage
(
image
)
;
imgCanvas
=
document
.
createElement
(
"
canvas
"
)
;
imgCanvas
.
width
=
2
;
imgCanvas
.
height
=
2
;
var
imgCtx
=
imgCanvas
.
getContext
(
"
2d
"
)
;
var
imgData
=
imgCtx
.
createImageData
(
1
2
)
;
for
(
var
i
=
0
;
i
<
2
;
i
+
+
)
{
var
stride
=
i
*
8
;
imgData
.
data
[
stride
+
0
]
=
redColor
[
0
]
;
imgData
.
data
[
stride
+
1
]
=
redColor
[
1
]
;
imgData
.
data
[
stride
+
2
]
=
redColor
[
2
]
;
imgData
.
data
[
stride
+
3
]
=
255
;
imgData
.
data
[
stride
+
4
]
=
greenColor
[
0
]
;
imgData
.
data
[
stride
+
5
]
=
greenColor
[
1
]
;
imgData
.
data
[
stride
+
6
]
=
greenColor
[
2
]
;
imgData
.
data
[
stride
+
7
]
=
255
;
}
imgCtx
.
putImageData
(
imgData
0
0
)
;
var
newImage
=
new
Image
(
)
;
newImage
.
onload
=
function
(
)
{
runTest2
(
newImage
)
;
}
;
newImage
.
onerror
=
function
(
)
{
testFailed
(
"
Creating
image
from
canvas
failed
.
Image
src
:
"
+
this
.
src
)
;
finishTest
(
)
;
}
;
newImage
.
src
=
imgCanvas
.
toDataURL
(
)
;
}
function
runTest2
(
image
)
{
runTestOnImage
(
image
)
;
wtu
.
makeImageFromCanvas
(
imgCanvas
function
(
)
{
runTest3
(
this
)
;
}
)
;
}
function
runTest3
(
image
)
{
runTestOnImage
(
image
)
;
wtu
.
glErrorShouldBe
(
gl
gl
.
NO_ERROR
"
should
be
no
errors
"
)
;
finishTest
(
)
;
}
return
init
;
}
