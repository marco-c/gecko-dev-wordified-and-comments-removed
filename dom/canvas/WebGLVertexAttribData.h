#
ifndef
WEBGL_VERTEX_ATTRIB_DATA_H_
#
define
WEBGL_VERTEX_ATTRIB_DATA_H_
#
include
"
GLDefs
.
h
"
#
include
"
WebGLObjectModel
.
h
"
namespace
mozilla
{
class
WebGLBuffer
;
class
WebGLVertexAttribData
final
{
public
:
uint32_t
mDivisor
;
bool
mEnabled
;
private
:
bool
mIntegerFunc
;
public
:
WebGLRefPtr
<
WebGLBuffer
>
mBuf
;
private
:
GLenum
mType
;
uint8_t
mSize
;
uint8_t
mBytesPerVertex
;
bool
mNormalized
;
uint32_t
mStride
;
uint32_t
mExplicitStride
;
uint64_t
mByteOffset
;
public
:
#
define
GETTER
(
X
)
const
decltype
(
m
#
#
X
)
&
X
(
)
const
{
return
m
#
#
X
;
}
GETTER
(
IntegerFunc
)
GETTER
(
Type
)
GETTER
(
Size
)
GETTER
(
BytesPerVertex
)
GETTER
(
Normalized
)
GETTER
(
Stride
)
GETTER
(
ExplicitStride
)
GETTER
(
ByteOffset
)
#
undef
GETTER
WebGLVertexAttribData
(
)
:
mDivisor
(
0
)
mEnabled
(
false
)
{
VertexAttribPointer
(
false
nullptr
4
LOCAL_GL_FLOAT
false
0
0
)
;
}
void
VertexAttribPointer
(
bool
integerFunc
WebGLBuffer
*
buf
uint8_t
size
GLenum
type
bool
normalized
uint32_t
stride
uint64_t
byteOffset
)
;
void
DoVertexAttribPointer
(
gl
:
:
GLContext
*
gl
GLuint
index
)
const
;
}
;
}
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
callback
mozilla
:
:
WebGLVertexAttribData
&
field
const
char
*
name
uint32_t
flags
=
0
)
{
CycleCollectionNoteChild
(
callback
field
.
mBuf
.
get
(
)
name
flags
)
;
}
#
endif
