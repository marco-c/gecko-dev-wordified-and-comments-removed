#
include
"
WebGLExtensions
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
dom
/
WebGLRenderingContextBinding
.
h
"
#
include
"
WebGLContext
.
h
"
#
include
"
WebGLFormats
.
h
"
namespace
mozilla
{
WebGLExtensionSRGB
:
:
WebGLExtensionSRGB
(
WebGLContext
*
webgl
)
:
WebGLExtensionBase
(
webgl
)
{
MOZ_ASSERT
(
IsSupported
(
webgl
)
"
Don
'
t
construct
extension
if
unsupported
.
"
)
;
gl
:
:
GLContext
*
gl
=
webgl
-
>
GL
(
)
;
if
(
!
gl
-
>
IsGLES
(
)
)
{
gl
-
>
fEnable
(
LOCAL_GL_FRAMEBUFFER_SRGB_EXT
)
;
}
auto
&
fua
=
webgl
-
>
mFormatUsage
;
RefPtr
<
gl
:
:
GLContext
>
gl_
=
gl
;
const
auto
fnAdd
=
[
&
fua
&
gl_
]
(
webgl
:
:
EffectiveFormat
effFormat
GLenum
format
GLenum
desktopUnpackFormat
)
{
auto
usage
=
fua
-
>
EditUsage
(
effFormat
)
;
usage
-
>
isFilterable
=
true
;
webgl
:
:
DriverUnpackInfo
dui
=
{
format
format
LOCAL_GL_UNSIGNED_BYTE
}
;
const
auto
pi
=
dui
.
ToPacking
(
)
;
if
(
!
gl_
-
>
IsGLES
(
)
)
dui
.
unpackFormat
=
desktopUnpackFormat
;
fua
-
>
AddTexUnpack
(
usage
pi
dui
)
;
fua
-
>
AllowUnsizedTexFormat
(
pi
usage
)
;
}
;
fnAdd
(
webgl
:
:
EffectiveFormat
:
:
SRGB8
LOCAL_GL_SRGB
LOCAL_GL_RGB
)
;
fnAdd
(
webgl
:
:
EffectiveFormat
:
:
SRGB8_ALPHA8
LOCAL_GL_SRGB_ALPHA
LOCAL_GL_RGBA
)
;
auto
usage
=
fua
-
>
EditUsage
(
webgl
:
:
EffectiveFormat
:
:
SRGB8_ALPHA8
)
;
usage
-
>
SetRenderable
(
)
;
fua
-
>
AllowRBFormat
(
LOCAL_GL_SRGB8_ALPHA8
usage
)
;
}
WebGLExtensionSRGB
:
:
~
WebGLExtensionSRGB
(
)
{
}
bool
WebGLExtensionSRGB
:
:
IsSupported
(
const
WebGLContext
*
const
webgl
)
{
if
(
webgl
-
>
IsWebGL2
(
)
)
return
false
;
return
webgl
-
>
gl
-
>
IsSupported
(
gl
:
:
GLFeature
:
:
sRGB
)
;
}
}
