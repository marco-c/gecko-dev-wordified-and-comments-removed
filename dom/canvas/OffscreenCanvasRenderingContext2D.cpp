#
include
"
OffscreenCanvasRenderingContext2D
.
h
"
#
include
"
mozilla
/
CycleCollectedJSRuntime
.
h
"
#
include
"
mozilla
/
dom
/
OffscreenCanvasRenderingContext2DBinding
.
h
"
#
include
"
mozilla
/
dom
/
OffscreenCanvas
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
using
namespace
mozilla
;
namespace
mozilla
:
:
dom
{
class
OffscreenCanvasShutdownObserver
final
{
NS_INLINE_DECL_REFCOUNTING
(
OffscreenCanvasShutdownObserver
)
public
:
explicit
OffscreenCanvasShutdownObserver
(
OffscreenCanvasRenderingContext2D
*
aOwner
)
:
mOwner
(
aOwner
)
{
}
void
OnShutdown
(
)
{
if
(
mOwner
)
{
mOwner
-
>
OnShutdown
(
)
;
mOwner
=
nullptr
;
}
}
void
ClearOwner
(
)
{
mOwner
=
nullptr
;
}
private
:
~
OffscreenCanvasShutdownObserver
(
)
=
default
;
OffscreenCanvasRenderingContext2D
*
mOwner
;
}
;
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_INHERITED
(
OffscreenCanvasRenderingContext2D
CanvasRenderingContext2D
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
OffscreenCanvasRenderingContext2D
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_END_INHERITING
(
CanvasRenderingContext2D
)
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
OffscreenCanvasRenderingContext2D
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
OffscreenCanvasRenderingContext2D
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
OffscreenCanvasRenderingContext2D
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
NS_IMPL_ADDREF_INHERITED
(
OffscreenCanvasRenderingContext2D
CanvasRenderingContext2D
)
NS_IMPL_RELEASE_INHERITED
(
OffscreenCanvasRenderingContext2D
CanvasRenderingContext2D
)
OffscreenCanvasRenderingContext2D
:
:
OffscreenCanvasRenderingContext2D
(
layers
:
:
LayersBackend
aCompositorBackend
)
:
CanvasRenderingContext2D
(
aCompositorBackend
)
{
}
OffscreenCanvasRenderingContext2D
:
:
~
OffscreenCanvasRenderingContext2D
(
)
=
default
;
JSObject
*
OffscreenCanvasRenderingContext2D
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
OffscreenCanvasRenderingContext2D_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
OffscreenCanvasRenderingContext2D
:
:
GetParentObject
(
)
const
{
return
mOffscreenCanvas
-
>
GetOwnerGlobal
(
)
;
}
NS_IMETHODIMP
OffscreenCanvasRenderingContext2D
:
:
InitializeWithDrawTarget
(
nsIDocShell
*
aShell
NotNull
<
gfx
:
:
DrawTarget
*
>
aTarget
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
OffscreenCanvasRenderingContext2D
:
:
AddShutdownObserver
(
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
if
(
!
workerPrivate
)
{
CanvasRenderingContext2D
:
:
AddShutdownObserver
(
)
;
return
;
}
mOffscreenShutdownObserver
=
MakeAndAddRef
<
OffscreenCanvasShutdownObserver
>
(
this
)
;
mWorkerRef
=
WeakWorkerRef
:
:
Create
(
workerPrivate
[
observer
=
mOffscreenShutdownObserver
]
{
observer
-
>
OnShutdown
(
)
;
}
)
;
}
void
OffscreenCanvasRenderingContext2D
:
:
RemoveShutdownObserver
(
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
if
(
!
workerPrivate
)
{
CanvasRenderingContext2D
:
:
RemoveShutdownObserver
(
)
;
return
;
}
if
(
mOffscreenShutdownObserver
)
{
mOffscreenShutdownObserver
-
>
ClearOwner
(
)
;
}
mOffscreenShutdownObserver
=
nullptr
;
mWorkerRef
=
nullptr
;
}
void
OffscreenCanvasRenderingContext2D
:
:
OnShutdown
(
)
{
if
(
mOffscreenShutdownObserver
)
{
mOffscreenShutdownObserver
-
>
ClearOwner
(
)
;
mOffscreenShutdownObserver
=
nullptr
;
}
CanvasRenderingContext2D
:
:
OnShutdown
(
)
;
}
void
OffscreenCanvasRenderingContext2D
:
:
Commit
(
ErrorResult
&
aRv
)
{
if
(
!
mOffscreenCanvas
-
>
IsTransferredFromElement
(
)
)
{
return
;
}
mOffscreenCanvas
-
>
CommitFrameToCompositor
(
)
;
}
void
OffscreenCanvasRenderingContext2D
:
:
AddZoneWaitingForGC
(
)
{
JSObject
*
wrapper
=
GetWrapperPreserveColor
(
)
;
if
(
wrapper
)
{
CycleCollectedJSRuntime
:
:
Get
(
)
-
>
AddZoneWaitingForGC
(
JS
:
:
GetObjectZone
(
wrapper
)
)
;
}
}
void
OffscreenCanvasRenderingContext2D
:
:
AddAssociatedMemory
(
)
{
JSObject
*
wrapper
=
GetWrapperMaybeDead
(
)
;
if
(
wrapper
)
{
JS
:
:
AddAssociatedMemory
(
wrapper
BindingJSObjectMallocBytes
(
this
)
JS
:
:
MemoryUse
:
:
DOMBinding
)
;
}
}
void
OffscreenCanvasRenderingContext2D
:
:
RemoveAssociatedMemory
(
)
{
JSObject
*
wrapper
=
GetWrapperMaybeDead
(
)
;
if
(
wrapper
)
{
JS
:
:
RemoveAssociatedMemory
(
wrapper
BindingJSObjectMallocBytes
(
this
)
JS
:
:
MemoryUse
:
:
DOMBinding
)
;
}
}
size_t
BindingJSObjectMallocBytes
(
OffscreenCanvasRenderingContext2D
*
aContext
)
{
gfx
:
:
IntSize
size
=
aContext
-
>
GetSize
(
)
;
CheckedInt
<
uint32_t
>
bytes
=
CheckedInt
<
uint32_t
>
(
size
.
width
)
*
size
.
height
*
4
;
if
(
!
bytes
.
isValid
(
)
)
{
return
0
;
}
return
bytes
.
value
(
)
;
}
}
