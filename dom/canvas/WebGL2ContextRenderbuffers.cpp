#
include
"
WebGL2Context
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
WebGLContextUtils
.
h
"
namespace
mozilla
{
void
WebGL2Context
:
:
GetInternalformatParameter
(
JSContext
*
cx
GLenum
target
GLenum
internalformat
GLenum
pname
JS
:
:
MutableHandleValue
retval
ErrorResult
&
rv
)
{
if
(
IsContextLost
(
)
)
return
;
if
(
target
!
=
LOCAL_GL_RENDERBUFFER
)
{
return
ErrorInvalidEnumInfo
(
"
getInternalfomratParameter
:
target
must
be
"
"
RENDERBUFFER
.
Was
:
"
target
)
;
}
if
(
pname
!
=
LOCAL_GL_SAMPLES
)
{
return
ErrorInvalidEnumInfo
(
"
getInternalformatParameter
:
pname
must
be
SAMPLES
.
"
"
Was
:
"
pname
)
;
}
GLint
*
samples
=
nullptr
;
GLint
sampleCount
=
0
;
gl
-
>
fGetInternalformativ
(
LOCAL_GL_RENDERBUFFER
internalformat
LOCAL_GL_NUM_SAMPLE_COUNTS
1
&
sampleCount
)
;
if
(
sampleCount
>
0
)
{
samples
=
new
GLint
[
sampleCount
]
;
gl
-
>
fGetInternalformativ
(
LOCAL_GL_RENDERBUFFER
internalformat
LOCAL_GL_SAMPLES
sampleCount
samples
)
;
}
JSObject
*
obj
=
dom
:
:
Int32Array
:
:
Create
(
cx
this
sampleCount
samples
)
;
if
(
!
obj
)
{
rv
=
NS_ERROR_OUT_OF_MEMORY
;
}
delete
[
]
samples
;
retval
.
setObjectOrNull
(
obj
)
;
}
void
WebGL2Context
:
:
RenderbufferStorageMultisample
(
GLenum
target
GLsizei
samples
GLenum
internalFormat
GLsizei
width
GLsizei
height
)
{
const
char
funcName
[
]
=
"
renderbufferStorageMultisample
"
;
if
(
IsContextLost
(
)
)
return
;
ErrorInvalidOperation
(
"
%
s
:
Multisampling
is
still
under
development
and
is
currently
"
"
disabled
.
"
funcName
)
;
}
}
