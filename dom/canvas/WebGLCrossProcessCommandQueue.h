#
ifndef
WEBGLCROSSPROCESSCOMMANDQUEUE_H_
#
define
WEBGLCROSSPROCESSCOMMANDQUEUE_H_
#
include
"
mozilla
/
dom
/
WebGLCommandQueue
.
h
"
namespace
mozilla
{
namespace
layers
{
class
PCompositorBridgeParent
;
}
class
HostWebGLContext
;
using
mozilla
:
:
webgl
:
:
ProducerConsumerQueue
;
using
ClientWebGLCommandSourceP
=
SyncCommandSource
<
size_t
mozilla
:
:
webgl
:
:
PcqProducer
mozilla
:
:
webgl
:
:
ProducerConsumerQueue
>
;
template
<
typename
Consumer
typename
Queue
>
class
HostWebGLCommandSink
final
:
public
SyncCommandSink
<
size_t
Consumer
Queue
>
{
public
:
HostWebGLCommandSink
(
UniquePtr
<
Consumer
>
&
&
aConsumer
UniquePtr
<
typename
Queue
:
:
Producer
>
&
&
aResponseProducer
)
:
SyncCommandSink
<
size_t
Consumer
Queue
>
(
std
:
:
move
(
aConsumer
)
std
:
:
move
(
aResponseProducer
)
)
{
}
HostWebGLContext
*
mHostContext
=
nullptr
;
protected
:
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
HostWebGLCommandSink
>
;
friend
class
mozilla
:
:
layers
:
:
PCompositorBridgeParent
;
HostWebGLCommandSink
(
)
=
default
;
bool
DispatchCommand
(
size_t
command
)
override
;
}
;
using
HostWebGLCommandSinkP
=
HostWebGLCommandSink
<
mozilla
:
:
webgl
:
:
PcqConsumer
mozilla
:
:
webgl
:
:
ProducerConsumerQueue
>
;
namespace
ipc
{
template
<
typename
Consumer
typename
Queue
>
struct
IPDLParamTraits
<
mozilla
:
:
HostWebGLCommandSink
<
Consumer
Queue
>
>
:
public
IPDLParamTraits
<
mozilla
:
:
SyncCommandSink
<
size_t
Consumer
Queue
>
>
{
public
:
typedef
mozilla
:
:
HostWebGLCommandSink
<
Consumer
Queue
>
paramType
;
}
;
}
}
#
endif
