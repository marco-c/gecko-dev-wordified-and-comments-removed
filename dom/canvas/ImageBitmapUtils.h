#
ifndef
mozilla_dom_ImageBitmapUtils_h
#
define
mozilla_dom_ImageBitmapUtils_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Image
;
struct
PlanarYCbCrData
;
}
namespace
dom
{
struct
ChannelPixelLayout
;
template
<
typename
>
class
Sequence
;
typedef
nsTArray
<
ChannelPixelLayout
>
ImagePixelLayout
;
UniquePtr
<
ImagePixelLayout
>
CreateDefaultPixelLayout
(
ImageBitmapFormat
aFormat
uint32_t
aWidth
uint32_t
aHeight
uint32_t
aStride
)
;
UniquePtr
<
ImagePixelLayout
>
CreatePixelLayoutFromPlanarYCbCrData
(
const
layers
:
:
PlanarYCbCrData
*
aData
)
;
uint8_t
GetChannelCountOfImageFormat
(
ImageBitmapFormat
aFormat
)
;
uint32_t
CalculateImageBufferSize
(
ImageBitmapFormat
aFormat
uint32_t
aWidth
uint32_t
aHeight
)
;
UniquePtr
<
ImagePixelLayout
>
CopyAndConvertImageData
(
ImageBitmapFormat
aSrcFormat
const
uint8_t
*
aSrcBuffer
const
ImagePixelLayout
*
aSrcLayout
ImageBitmapFormat
aDstFormat
uint8_t
*
aDstBuffer
)
;
ImageBitmapFormat
FindBestMatchingFromat
(
ImageBitmapFormat
aSrcFormat
const
Sequence
<
ImageBitmapFormat
>
&
aCandidates
)
;
}
}
#
endif
