#
ifndef
WEBGL_ACTIVE_INFO_H_
#
define
WEBGL_ACTIVE_INFO_H_
#
include
"
GLDefs
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
WebGLTypes
.
h
"
namespace
mozilla
{
namespace
ipc
{
template
<
typename
T
>
struct
PcqParamTraits
;
}
class
WebGLContext
;
class
WebGLActiveInfo
{
public
:
uint32_t
mElemCount
;
GLenum
mElemType
;
nsCString
mBaseUserName
;
bool
mIsArray
;
uint8_t
mElemSize
;
nsCString
mBaseMappedName
;
webgl
:
:
AttribBaseType
mBaseType
=
webgl
:
:
AttribBaseType
:
:
Float
;
bool
IsSampler
(
)
const
;
WebGLActiveInfo
(
GLint
elemCount
GLenum
elemType
bool
isArray
const
nsACString
&
baseUserName
const
nsACString
&
baseMappedName
)
;
WebGLActiveInfo
(
const
WebGLActiveInfo
&
aOther
)
;
static
WebGLActiveInfo
CreateInvalid
(
)
{
return
WebGLActiveInfo
(
)
;
}
GLint
Size
(
)
const
{
return
mElemCount
;
}
GLenum
Type
(
)
const
{
return
mElemType
;
}
void
GetName
(
nsString
&
retval
)
const
{
CopyASCIItoUTF16
(
mBaseUserName
retval
)
;
if
(
mIsArray
)
retval
.
AppendLiteral
(
"
[
0
]
"
)
;
}
protected
:
friend
mozilla
:
:
ipc
:
:
PcqParamTraits
<
WebGLActiveInfo
>
;
friend
Maybe
<
WebGLActiveInfo
>
;
explicit
WebGLActiveInfo
(
)
:
mElemCount
(
0
)
mElemType
(
0
)
mBaseUserName
(
"
"
)
mIsArray
(
false
)
mElemSize
(
0
)
mBaseMappedName
(
"
"
)
{
}
}
;
class
ClientWebGLActiveInfo
final
:
public
WebGLActiveInfo
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
ClientWebGLActiveInfo
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ClientWebGLActiveInfo
)
virtual
JSObject
*
WrapObject
(
JSContext
*
js
JS
:
:
Handle
<
JSObject
*
>
givenProto
)
override
;
ClientWebGLContext
*
GetParentObject
(
)
const
{
return
mWebGL
;
}
ClientWebGLActiveInfo
(
ClientWebGLContext
*
webgl
GLint
elemCount
GLenum
elemType
bool
isArray
const
nsACString
&
baseUserName
const
nsACString
&
baseMappedName
)
:
WebGLActiveInfo
(
elemCount
elemType
isArray
baseUserName
baseMappedName
)
mWebGL
(
webgl
)
{
}
ClientWebGLActiveInfo
(
ClientWebGLContext
*
webgl
const
WebGLActiveInfo
&
aOther
)
:
WebGLActiveInfo
(
aOther
)
mWebGL
(
webgl
)
{
}
ClientWebGLContext
*
const
mWebGL
;
protected
:
~
ClientWebGLActiveInfo
(
)
{
}
}
;
bool
IsElemTypeSampler
(
GLenum
elemType
)
;
}
#
endif
