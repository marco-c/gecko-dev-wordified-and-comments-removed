#
ifndef
MOZILLA_DOM_OFFSCREENCANVAS_H_
#
define
MOZILLA_DOM_OFFSCREENCANVAS_H_
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
dom
/
CanvasRenderingContextHelper
.
h
"
#
include
"
mozilla
/
dom
/
ImageEncoder
.
h
"
#
include
"
mozilla
/
dom
/
OffscreenCanvasDisplayHelper
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
struct
JSContext
;
namespace
mozilla
{
class
CancelableRunnable
;
class
ErrorResult
;
enum
class
RFPTarget
:
uint64_t
;
namespace
gfx
{
class
SourceSurface
;
}
namespace
dom
{
enum
class
OffscreenRenderingContextId
:
uint8_t
;
class
Blob
;
class
EncodeCompleteCallback
;
class
OffscreenCanvasDisplayHelper
;
class
ImageBitmap
;
struct
ImageEncodeOptions
;
using
OwningOffscreenRenderingContext
=
class
OwningOffscreenCanvasRenderingContext2DOrImageBitmapRenderingContextOrWebGLRenderingContextOrWebGL2RenderingContextOrGPUCanvasContext
;
struct
OffscreenCanvasCloneData
final
{
OffscreenCanvasCloneData
(
OffscreenCanvasDisplayHelper
*
aDisplay
uint32_t
aWidth
uint32_t
aHeight
layers
:
:
LayersBackend
aCompositorBackend
layers
:
:
TextureType
aTextureType
bool
aNeutered
bool
aIsWriteOnly
nsIPrincipal
*
aExpandedReader
)
;
~
OffscreenCanvasCloneData
(
)
;
RefPtr
<
OffscreenCanvasDisplayHelper
>
mDisplay
;
uint32_t
mWidth
;
uint32_t
mHeight
;
layers
:
:
LayersBackend
mCompositorBackendType
;
layers
:
:
TextureType
mTextureType
;
bool
mNeutered
;
bool
mIsWriteOnly
;
RefPtr
<
nsIPrincipal
>
mExpandedReader
;
}
;
class
OffscreenCanvas
final
:
public
DOMEventTargetHelper
public
CanvasRenderingContextHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
OffscreenCanvas
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
contextlost
)
;
IMPL_EVENT_HANDLER
(
contextrestored
)
;
OffscreenCanvas
(
nsIGlobalObject
*
aGlobal
uint32_t
aWidth
uint32_t
aHeight
)
;
OffscreenCanvas
(
nsIGlobalObject
*
aGlobal
uint32_t
aWidth
uint32_t
aHeight
layers
:
:
LayersBackend
aCompositorBackend
layers
:
:
TextureType
aTextureType
already_AddRefed
<
OffscreenCanvasDisplayHelper
>
aDisplay
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
GetOwnerGlobal
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
OffscreenCanvas
>
Constructor
(
const
GlobalObject
&
aGlobal
uint32_t
aWidth
uint32_t
aHeight
ErrorResult
&
aRv
)
;
void
ClearResources
(
)
;
uint32_t
Width
(
)
const
{
return
mWidth
;
}
uint32_t
Height
(
)
const
{
return
mHeight
;
}
void
SetWidth
(
uint32_t
aWidth
ErrorResult
&
aRv
)
;
void
SetHeight
(
uint32_t
aHeight
ErrorResult
&
aRv
)
;
void
GetContext
(
JSContext
*
aCx
const
OffscreenRenderingContextId
&
aContextId
JS
:
:
Handle
<
JS
:
:
Value
>
aContextOptions
Nullable
<
OwningOffscreenRenderingContext
>
&
aResult
ErrorResult
&
aRv
)
;
already_AddRefed
<
ImageBitmap
>
TransferToImageBitmap
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
ConvertToBlob
(
const
ImageEncodeOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
ToBlob
(
JSContext
*
aCx
const
nsAString
&
aType
JS
:
:
Handle
<
JS
:
:
Value
>
aParams
ErrorResult
&
aRv
)
;
nsICanvasRenderingContextInternal
*
GetContext
(
)
const
{
return
mCurrentContext
;
}
CanvasContextType
GetContextType
(
)
const
{
return
mCurrentContextType
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetSurfaceSnapshot
(
gfxAlphaType
*
aOutAlphaType
=
nullptr
)
;
static
already_AddRefed
<
OffscreenCanvas
>
CreateFromCloneData
(
nsIGlobalObject
*
aGlobal
OffscreenCanvasCloneData
*
aData
)
;
static
bool
PrefEnabledOnWorkerThread
(
JSContext
*
aCx
JSObject
*
aObj
)
;
UniquePtr
<
OffscreenCanvasCloneData
>
ToCloneData
(
JSContext
*
aCx
)
;
void
UpdateDisplayData
(
const
OffscreenCanvasDisplayData
&
aData
)
;
void
CommitFrameToCompositor
(
)
;
void
DequeueCommitToCompositor
(
)
;
void
QueueCommitToCompositor
(
)
;
virtual
bool
GetOpaqueAttr
(
)
override
{
return
false
;
}
virtual
nsIntSize
GetWidthHeight
(
)
override
{
return
nsIntSize
(
mWidth
mHeight
)
;
}
virtual
already_AddRefed
<
nsICanvasRenderingContextInternal
>
CreateContext
(
CanvasContextType
aContextType
)
override
;
void
SetNeutered
(
)
{
mWidth
=
0
;
mHeight
=
0
;
mNeutered
=
true
;
}
bool
MayNeuter
(
)
const
{
return
!
mNeutered
&
&
!
mCurrentContext
;
}
nsIPrincipal
*
GetExpandedReader
(
)
const
{
return
mExpandedReader
;
}
void
SetWriteOnly
(
RefPtr
<
nsIPrincipal
>
&
&
aExpandedReader
)
;
void
SetWriteOnly
(
nsIPrincipal
*
aExpandedReader
=
nullptr
)
{
RefPtr
<
nsIPrincipal
>
expandedReader
(
aExpandedReader
)
;
SetWriteOnly
(
std
:
:
move
(
expandedReader
)
)
;
}
bool
IsWriteOnly
(
)
const
{
return
mIsWriteOnly
;
}
bool
CallerCanRead
(
nsIPrincipal
&
aPrincipal
)
const
;
layers
:
:
LayersBackend
GetCompositorBackendType
(
)
const
{
return
mCompositorBackendType
;
}
bool
ShouldResistFingerprinting
(
mozilla
:
:
RFPTarget
aTarget
)
const
;
bool
IsTransferredFromElement
(
)
const
{
return
!
!
mDisplay
;
}
private
:
~
OffscreenCanvas
(
)
;
already_AddRefed
<
EncodeCompleteCallback
>
CreateEncodeCompleteCallback
(
Promise
*
aPromise
)
;
void
CanvasAttrChanged
(
)
{
ErrorResult
dummy
;
UpdateContext
(
nullptr
JS
:
:
NullHandleValue
dummy
)
;
}
bool
mNeutered
=
false
;
bool
mIsWriteOnly
=
false
;
uint32_t
mWidth
=
0
;
uint32_t
mHeight
=
0
;
layers
:
:
LayersBackend
mCompositorBackendType
=
layers
:
:
LayersBackend
:
:
LAYERS_NONE
;
layers
:
:
TextureType
mTextureType
=
layers
:
:
TextureType
:
:
Unknown
;
RefPtr
<
OffscreenCanvasDisplayHelper
>
mDisplay
;
RefPtr
<
CancelableRunnable
>
mPendingCommit
;
RefPtr
<
nsIPrincipal
>
mExpandedReader
;
Maybe
<
OffscreenCanvasDisplayData
>
mPendingUpdate
;
}
;
}
}
#
endif
