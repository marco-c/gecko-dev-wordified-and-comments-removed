#
ifndef
MOZILLA_DOM_OFFSCREENCANVAS_H_
#
define
MOZILLA_DOM_OFFSCREENCANVAS_H_
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
dom
/
ImageEncoder
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
CanvasRenderingContextHelper
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
struct
JSContext
;
namespace
mozilla
{
class
ErrorResult
;
namespace
gfx
{
class
SourceSurface
;
}
namespace
layers
{
class
CanvasClient
;
class
CanvasRenderer
;
class
ImageContainer
;
}
namespace
dom
{
class
Blob
;
class
ImageBitmap
;
struct
OffscreenCanvasCloneData
final
{
OffscreenCanvasCloneData
(
layers
:
:
CanvasRenderer
*
aRenderer
uint32_t
aWidth
uint32_t
aHeight
layers
:
:
LayersBackend
aCompositorBackend
bool
aNeutered
bool
aIsWriteOnly
)
;
~
OffscreenCanvasCloneData
(
)
;
RefPtr
<
layers
:
:
CanvasRenderer
>
mRenderer
;
uint32_t
mWidth
;
uint32_t
mHeight
;
layers
:
:
LayersBackend
mCompositorBackendType
;
bool
mNeutered
;
bool
mIsWriteOnly
;
}
;
class
OffscreenCanvas
final
:
public
DOMEventTargetHelper
public
CanvasRenderingContextHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
OffscreenCanvas
DOMEventTargetHelper
)
OffscreenCanvas
(
nsIGlobalObject
*
aGlobal
uint32_t
aWidth
uint32_t
aHeight
layers
:
:
LayersBackend
aCompositorBackend
layers
:
:
CanvasRenderer
*
aRenderer
)
;
nsCOMPtr
<
nsIGlobalObject
>
GetParentObject
(
)
const
{
return
GetOwnerGlobal
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
OffscreenCanvas
>
Constructor
(
const
GlobalObject
&
aGlobal
uint32_t
aWidth
uint32_t
aHeight
)
;
void
ClearResources
(
)
;
uint32_t
Width
(
)
const
{
return
mWidth
;
}
uint32_t
Height
(
)
const
{
return
mHeight
;
}
void
SetWidth
(
uint32_t
aWidth
ErrorResult
&
aRv
)
{
if
(
mNeutered
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
mWidth
!
=
aWidth
)
{
mWidth
=
aWidth
;
CanvasAttrChanged
(
)
;
}
}
void
SetHeight
(
uint32_t
aHeight
ErrorResult
&
aRv
)
{
if
(
mNeutered
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
mHeight
!
=
aHeight
)
{
mHeight
=
aHeight
;
CanvasAttrChanged
(
)
;
}
}
already_AddRefed
<
ImageBitmap
>
TransferToImageBitmap
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
ToBlob
(
JSContext
*
aCx
const
nsAString
&
aType
JS
:
:
Handle
<
JS
:
:
Value
>
aParams
ErrorResult
&
aRv
)
;
nsICanvasRenderingContextInternal
*
GetContext
(
)
const
{
return
mCurrentContext
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetSurfaceSnapshot
(
gfxAlphaType
*
aOutAlphaType
=
nullptr
)
;
static
already_AddRefed
<
OffscreenCanvas
>
CreateFromCloneData
(
nsIGlobalObject
*
aGlobal
OffscreenCanvasCloneData
*
aData
)
;
static
bool
PrefEnabledOnWorkerThread
(
JSContext
*
aCx
JSObject
*
aObj
)
;
OffscreenCanvasCloneData
*
ToCloneData
(
)
;
void
CommitFrameToCompositor
(
)
;
virtual
bool
GetOpaqueAttr
(
)
override
{
return
false
;
}
virtual
nsIntSize
GetWidthHeight
(
)
override
{
return
nsIntSize
(
mWidth
mHeight
)
;
}
virtual
already_AddRefed
<
nsICanvasRenderingContextInternal
>
CreateContext
(
CanvasContextType
aContextType
)
override
;
virtual
already_AddRefed
<
nsISupports
>
GetContext
(
JSContext
*
aCx
const
nsAString
&
aContextId
JS
:
:
Handle
<
JS
:
:
Value
>
aContextOptions
ErrorResult
&
aRv
)
override
;
void
SetNeutered
(
)
{
mNeutered
=
true
;
}
bool
IsNeutered
(
)
const
{
return
mNeutered
;
}
void
SetWriteOnly
(
)
{
mIsWriteOnly
=
true
;
}
bool
IsWriteOnly
(
)
const
{
return
mIsWriteOnly
;
}
layers
:
:
LayersBackend
GetCompositorBackendType
(
)
const
{
return
mCompositorBackendType
;
}
layers
:
:
ImageContainer
*
GetImageContainer
(
)
;
private
:
~
OffscreenCanvas
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
GetGlobalObject
(
)
;
void
CanvasAttrChanged
(
)
{
mAttrDirty
=
true
;
ErrorResult
dummy
;
UpdateContext
(
nullptr
JS
:
:
NullHandleValue
dummy
)
;
}
bool
mAttrDirty
;
bool
mNeutered
;
bool
mIsWriteOnly
;
uint32_t
mWidth
;
uint32_t
mHeight
;
layers
:
:
LayersBackend
mCompositorBackendType
;
RefPtr
<
layers
:
:
CanvasClient
>
mCanvasClient
;
RefPtr
<
layers
:
:
CanvasRenderer
>
mCanvasRenderer
;
}
;
}
}
#
endif
