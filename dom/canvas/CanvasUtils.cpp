#
include
<
stdlib
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIDOMCanvasRenderingContext2D
.
h
"
#
include
"
nsICanvasRenderingContextInternal
.
h
"
#
include
"
nsIHTMLCollection
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsGfxCIID
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
CanvasUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
WebGL2Context
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
CanvasUtils
{
bool
GetCanvasContextType
(
const
nsAString
&
str
dom
:
:
CanvasContextType
*
const
out_type
)
{
if
(
str
.
EqualsLiteral
(
"
2d
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
Canvas2D
;
return
true
;
}
if
(
str
.
EqualsLiteral
(
"
experimental
-
webgl
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
WebGL1
;
return
true
;
}
#
ifdef
MOZ_WEBGL_CONFORMANT
if
(
str
.
EqualsLiteral
(
"
webgl
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
WebGL1
;
return
true
;
}
#
endif
if
(
WebGL2Context
:
:
IsSupported
(
)
)
{
if
(
str
.
EqualsLiteral
(
"
webgl2
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
WebGL2
;
return
true
;
}
}
if
(
str
.
EqualsLiteral
(
"
bitmaprenderer
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
ImageBitmap
;
return
true
;
}
return
false
;
}
void
DoDrawImageSecurityCheck
(
dom
:
:
HTMLCanvasElement
*
aCanvasElement
nsIPrincipal
*
aPrincipal
bool
forceWriteOnly
bool
CORSUsed
)
{
if
(
!
aCanvasElement
)
{
NS_WARNING
(
"
DoDrawImageSecurityCheck
called
without
canvas
element
!
"
)
;
return
;
}
if
(
aCanvasElement
-
>
IsWriteOnly
(
)
)
return
;
if
(
forceWriteOnly
)
{
aCanvasElement
-
>
SetWriteOnly
(
)
;
return
;
}
if
(
CORSUsed
)
return
;
NS_PRECONDITION
(
aPrincipal
"
Must
have
a
principal
here
"
)
;
if
(
aCanvasElement
-
>
NodePrincipal
(
)
-
>
Subsumes
(
aPrincipal
)
)
{
return
;
}
aCanvasElement
-
>
SetWriteOnly
(
)
;
}
bool
CoerceDouble
(
const
JS
:
:
Value
&
v
double
*
d
)
{
if
(
v
.
isDouble
(
)
)
{
*
d
=
v
.
toDouble
(
)
;
}
else
if
(
v
.
isInt32
(
)
)
{
*
d
=
double
(
v
.
toInt32
(
)
)
;
}
else
if
(
v
.
isUndefined
(
)
)
{
*
d
=
0
.
0
;
}
else
{
return
false
;
}
return
true
;
}
bool
HasDrawWindowPrivilege
(
JSContext
*
aCx
JSObject
*
)
{
return
nsContentUtils
:
:
CallerHasPermission
(
aCx
NS_LITERAL_STRING
(
"
<
all_urls
>
"
)
)
;
}
}
}
