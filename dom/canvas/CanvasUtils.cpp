#
include
<
stdlib
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsICanvasRenderingContextInternal
.
h
"
#
include
"
nsIHTMLCollection
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsGfxCIID
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
CanvasUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
WebGL2Context
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
jsapi
.
h
"
#
define
TOPIC_CANVAS_PERMISSIONS_PROMPT
"
canvas
-
permissions
-
prompt
"
#
define
PERMISSION_CANVAS_EXTRACT_DATA
"
canvas
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
CanvasUtils
{
bool
IsImageExtractionAllowed
(
nsIDocument
*
aDocument
JSContext
*
aCx
)
{
if
(
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
true
;
}
if
(
!
aDocument
|
|
!
aCx
)
{
return
false
;
}
nsPIDOMWindowOuter
*
win
=
aDocument
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsIScriptObjectPrincipal
>
sop
(
do_QueryInterface
(
win
)
)
;
if
(
sop
&
&
nsContentUtils
:
:
IsSystemPrincipal
(
sop
-
>
GetPrincipal
(
)
)
)
{
return
true
;
}
if
(
nsContentUtils
:
:
ThreadsafeIsCallerChrome
(
)
)
{
return
true
;
}
nsIURI
*
docURI
=
aDocument
-
>
GetDocumentURI
(
)
;
nsCString
docURISpec
;
docURI
-
>
GetSpec
(
docURISpec
)
;
bool
isFileURL
;
(
void
)
docURI
-
>
SchemeIs
(
"
file
"
&
isFileURL
)
;
if
(
isFileURL
)
{
return
true
;
}
JS
:
:
AutoFilename
scriptFile
;
unsigned
scriptLine
=
0
;
bool
isScriptKnown
=
false
;
if
(
JS
:
:
DescribeScriptedCaller
(
aCx
&
scriptFile
&
scriptLine
)
)
{
isScriptKnown
=
true
;
if
(
scriptFile
.
get
(
)
&
&
strcmp
(
scriptFile
.
get
(
)
"
resource
:
/
/
pdf
.
js
/
build
/
pdf
.
js
"
)
=
=
0
)
{
return
true
;
}
}
nsIDocument
*
topLevelDocument
=
aDocument
-
>
GetTopLevelContentDocument
(
)
;
nsIURI
*
topLevelDocURI
=
topLevelDocument
?
topLevelDocument
-
>
GetDocumentURI
(
)
:
nullptr
;
nsCString
topLevelDocURISpec
;
if
(
topLevelDocURI
)
{
topLevelDocURI
-
>
GetSpec
(
topLevelDocURISpec
)
;
}
nsresult
rv
;
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
bool
isThirdParty
=
true
;
rv
=
thirdPartyUtil
-
>
IsThirdPartyURI
(
topLevelDocURI
docURI
&
isThirdParty
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
isThirdParty
)
{
nsAutoCString
message
;
message
.
AppendPrintf
(
"
Blocked
third
party
%
s
in
page
%
s
from
extracting
canvas
data
.
"
docURISpec
.
get
(
)
topLevelDocURISpec
.
get
(
)
)
;
if
(
isScriptKnown
)
{
message
.
AppendPrintf
(
"
%
s
:
%
u
.
"
scriptFile
.
get
(
)
scriptLine
)
;
}
nsContentUtils
:
:
LogMessageToConsole
(
message
.
get
(
)
)
;
return
false
;
}
nsCOMPtr
<
nsIPermissionManager
>
permissionManager
=
do_GetService
(
NS_PERMISSIONMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
uint32_t
permission
;
rv
=
permissionManager
-
>
TestPermission
(
topLevelDocURI
PERMISSION_CANVAS_EXTRACT_DATA
&
permission
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
switch
(
permission
)
{
case
nsIPermissionManager
:
:
ALLOW_ACTION
:
return
true
;
case
nsIPermissionManager
:
:
DENY_ACTION
:
return
false
;
default
:
break
;
}
nsAutoCString
message
;
message
.
AppendPrintf
(
"
Blocked
%
s
in
page
%
s
from
extracting
canvas
data
.
"
docURISpec
.
get
(
)
topLevelDocURISpec
.
get
(
)
)
;
if
(
isScriptKnown
)
{
message
.
AppendPrintf
(
"
%
s
:
%
u
.
"
scriptFile
.
get
(
)
scriptLine
)
;
}
nsContentUtils
:
:
LogMessageToConsole
(
message
.
get
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
TabChild
*
tabChild
=
TabChild
:
:
GetFrom
(
win
)
;
if
(
tabChild
)
{
tabChild
-
>
SendShowCanvasPermissionPrompt
(
topLevelDocURISpec
)
;
}
}
else
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
win
TOPIC_CANVAS_PERMISSIONS_PROMPT
NS_ConvertUTF8toUTF16
(
topLevelDocURISpec
)
.
get
(
)
)
;
}
}
return
false
;
}
bool
GetCanvasContextType
(
const
nsAString
&
str
dom
:
:
CanvasContextType
*
const
out_type
)
{
if
(
str
.
EqualsLiteral
(
"
2d
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
Canvas2D
;
return
true
;
}
if
(
str
.
EqualsLiteral
(
"
webgl
"
)
|
|
str
.
EqualsLiteral
(
"
experimental
-
webgl
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
WebGL1
;
return
true
;
}
if
(
WebGL2Context
:
:
IsSupported
(
)
)
{
if
(
str
.
EqualsLiteral
(
"
webgl2
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
WebGL2
;
return
true
;
}
}
if
(
str
.
EqualsLiteral
(
"
bitmaprenderer
"
)
)
{
*
out_type
=
dom
:
:
CanvasContextType
:
:
ImageBitmap
;
return
true
;
}
return
false
;
}
void
DoDrawImageSecurityCheck
(
dom
:
:
HTMLCanvasElement
*
aCanvasElement
nsIPrincipal
*
aPrincipal
bool
forceWriteOnly
bool
CORSUsed
)
{
if
(
!
aCanvasElement
)
{
NS_WARNING
(
"
DoDrawImageSecurityCheck
called
without
canvas
element
!
"
)
;
return
;
}
if
(
aCanvasElement
-
>
IsWriteOnly
(
)
)
return
;
if
(
forceWriteOnly
)
{
aCanvasElement
-
>
SetWriteOnly
(
)
;
return
;
}
if
(
CORSUsed
)
return
;
NS_PRECONDITION
(
aPrincipal
"
Must
have
a
principal
here
"
)
;
if
(
aCanvasElement
-
>
NodePrincipal
(
)
-
>
Subsumes
(
aPrincipal
)
)
{
return
;
}
aCanvasElement
-
>
SetWriteOnly
(
)
;
}
bool
CoerceDouble
(
const
JS
:
:
Value
&
v
double
*
d
)
{
if
(
v
.
isDouble
(
)
)
{
*
d
=
v
.
toDouble
(
)
;
}
else
if
(
v
.
isInt32
(
)
)
{
*
d
=
double
(
v
.
toInt32
(
)
)
;
}
else
if
(
v
.
isUndefined
(
)
)
{
*
d
=
0
.
0
;
}
else
{
return
false
;
}
return
true
;
}
bool
HasDrawWindowPrivilege
(
JSContext
*
aCx
JSObject
*
)
{
return
nsContentUtils
:
:
CallerHasPermission
(
aCx
nsGkAtoms
:
:
all_urlsPermission
)
;
}
}
}
