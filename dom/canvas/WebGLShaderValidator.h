#
ifndef
WEBGL_SHADER_VALIDATOR_H_
#
define
WEBGL_SHADER_VALIDATOR_H_
#
include
<
string
>
#
include
"
GLDefs
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
webgl
{
class
ShaderValidatorResults
final
{
public
:
std
:
:
string
mInfoLog
;
bool
mValid
=
false
;
std
:
:
string
mObjectCode
;
int
mShaderVersion
=
0
;
int
mVertexShaderNumViews
=
0
;
std
:
:
vector
<
sh
:
:
Attribute
>
mAttributes
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
mInterfaceBlocks
;
std
:
:
vector
<
sh
:
:
OutputVariable
>
mOutputVariables
;
std
:
:
vector
<
sh
:
:
Uniform
>
mUniforms
;
std
:
:
vector
<
sh
:
:
Varying
>
mVaryings
;
int
mMaxVaryingVectors
=
0
;
bool
CanLinkTo
(
const
ShaderValidatorResults
&
vert
nsCString
*
const
out_log
)
const
;
bool
FindUniformByMappedName
(
const
std
:
:
string
&
mappedName
std
:
:
string
*
const
out_userName
bool
*
const
out_isArray
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
)
const
;
}
;
class
ShaderValidator
final
{
public
:
const
ShHandle
mHandle
;
private
:
const
ShCompileOptions
mCompileOptions
;
const
int
mMaxVaryingVectors
;
public
:
static
std
:
:
unique_ptr
<
ShaderValidator
>
Create
(
GLenum
shaderType
ShShaderSpec
spec
ShShaderOutput
outputLanguage
const
ShBuiltInResources
&
resources
ShCompileOptions
compileOptions
)
;
private
:
ShaderValidator
(
ShHandle
handle
ShCompileOptions
compileOptions
int
maxVaryingVectors
)
:
mHandle
(
handle
)
mCompileOptions
(
compileOptions
)
mMaxVaryingVectors
(
maxVaryingVectors
)
{
}
public
:
~
ShaderValidator
(
)
;
std
:
:
unique_ptr
<
const
ShaderValidatorResults
>
ValidateAndTranslate
(
const
char
*
)
const
;
}
;
}
}
#
endif
