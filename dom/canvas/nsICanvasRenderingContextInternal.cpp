#
include
"
nsICanvasRenderingContextInternal
.
h
"
#
include
"
mozilla
/
dom
/
CanvasUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsRefreshDriver
.
h
"
nsICanvasRenderingContextInternal
:
:
nsICanvasRenderingContextInternal
(
)
=
default
;
nsICanvasRenderingContextInternal
:
:
~
nsICanvasRenderingContextInternal
(
)
=
default
;
mozilla
:
:
PresShell
*
nsICanvasRenderingContextInternal
:
:
GetPresShell
(
)
{
if
(
mCanvasElement
)
{
return
mCanvasElement
-
>
OwnerDoc
(
)
-
>
GetPresShell
(
)
;
}
return
nullptr
;
}
nsIGlobalObject
*
nsICanvasRenderingContextInternal
:
:
GetParentObject
(
)
const
{
if
(
mCanvasElement
)
{
return
mCanvasElement
-
>
OwnerDoc
(
)
-
>
GetScopeObject
(
)
;
}
if
(
mOffscreenCanvas
)
{
return
mOffscreenCanvas
-
>
GetParentObject
(
)
;
}
return
nullptr
;
}
nsIPrincipal
*
nsICanvasRenderingContextInternal
:
:
PrincipalOrNull
(
)
const
{
if
(
mCanvasElement
)
{
return
mCanvasElement
-
>
NodePrincipal
(
)
;
}
if
(
mOffscreenCanvas
)
{
nsIGlobalObject
*
global
=
mOffscreenCanvas
-
>
GetParentObject
(
)
;
if
(
global
)
{
return
global
-
>
PrincipalOrNull
(
)
;
}
}
return
nullptr
;
}
nsICookieJarSettings
*
nsICanvasRenderingContextInternal
:
:
GetCookieJarSettings
(
)
const
{
if
(
mCanvasElement
)
{
return
mCanvasElement
-
>
OwnerDoc
(
)
-
>
CookieJarSettings
(
)
;
}
if
(
mOffscreenCanvas
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
mOffscreenCanvas
-
>
GetOwnerGlobal
(
)
)
;
if
(
win
)
{
return
win
-
>
GetExtantDoc
(
)
-
>
CookieJarSettings
(
)
;
}
mozilla
:
:
dom
:
:
WorkerPrivate
*
worker
=
mozilla
:
:
dom
:
:
GetCurrentThreadWorkerPrivate
(
)
;
if
(
worker
)
{
return
worker
-
>
CookieJarSettings
(
)
;
}
}
return
nullptr
;
}
void
nsICanvasRenderingContextInternal
:
:
RemovePostRefreshObserver
(
)
{
if
(
mRefreshDriver
)
{
mRefreshDriver
-
>
RemovePostRefreshObserver
(
this
)
;
mRefreshDriver
=
nullptr
;
}
}
void
nsICanvasRenderingContextInternal
:
:
AddPostRefreshObserverIfNecessary
(
)
{
if
(
!
GetPresShell
(
)
|
|
!
GetPresShell
(
)
-
>
GetPresContext
(
)
|
|
!
GetPresShell
(
)
-
>
GetPresContext
(
)
-
>
RefreshDriver
(
)
)
{
return
;
}
mRefreshDriver
=
GetPresShell
(
)
-
>
GetPresContext
(
)
-
>
RefreshDriver
(
)
;
mRefreshDriver
-
>
AddPostRefreshObserver
(
this
)
;
}
void
nsICanvasRenderingContextInternal
:
:
DoSecurityCheck
(
nsIPrincipal
*
aPrincipal
bool
aForceWriteOnly
bool
aCORSUsed
)
{
if
(
mCanvasElement
)
{
mozilla
:
:
CanvasUtils
:
:
DoDrawImageSecurityCheck
(
mCanvasElement
aPrincipal
aForceWriteOnly
aCORSUsed
)
;
}
else
if
(
mOffscreenCanvas
)
{
mozilla
:
:
CanvasUtils
:
:
DoDrawImageSecurityCheck
(
mOffscreenCanvas
aPrincipal
aForceWriteOnly
aCORSUsed
)
;
}
}
bool
nsICanvasRenderingContextInternal
:
:
ShouldResistFingerprinting
(
mozilla
:
:
RFPTarget
aTarget
)
const
{
if
(
mCanvasElement
)
{
return
mCanvasElement
-
>
OwnerDoc
(
)
-
>
ShouldResistFingerprinting
(
aTarget
)
;
}
if
(
mOffscreenCanvas
)
{
return
mOffscreenCanvas
-
>
ShouldResistFingerprinting
(
aTarget
)
;
}
return
nsContentUtils
:
:
ShouldResistFingerprinting
(
"
Fallback
"
aTarget
)
;
}
