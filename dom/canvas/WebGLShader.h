#
ifndef
WEBGL_SHADER_H_
#
define
WEBGL_SHADER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
GLDefs
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
WebGLObjectModel
.
h
"
namespace
mozilla
{
namespace
webgl
{
class
ShaderValidatorResults
;
}
class
WebGLShader
final
:
public
WebGLRefCountedObject
<
WebGLShader
>
public
LinkedListElement
<
WebGLShader
>
{
friend
class
WebGLContext
;
friend
class
WebGLProgram
;
public
:
WebGLShader
(
WebGLContext
*
webgl
GLenum
type
)
;
protected
:
~
WebGLShader
(
)
;
public
:
void
CompileShader
(
)
;
MaybeWebGLVariant
GetShaderParameter
(
GLenum
pname
)
const
;
nsString
GetShaderInfoLog
(
)
const
;
nsString
GetShaderSource
(
)
const
;
nsString
GetShaderTranslatedSource
(
)
const
;
void
ShaderSource
(
const
nsAString
&
source
)
;
size_t
CalcNumSamplerUniforms
(
)
const
;
size_t
NumAttributes
(
)
const
;
bool
FindAttribUserNameByMappedName
(
const
nsACString
&
mappedName
nsCString
*
const
out_userName
)
const
;
bool
FindVaryingByMappedName
(
const
nsACString
&
mappedName
nsCString
*
const
out_userName
bool
*
const
out_isArray
)
const
;
bool
FindUniformByMappedName
(
const
nsACString
&
mappedName
nsCString
*
const
out_userName
bool
*
const
out_isArray
)
const
;
bool
UnmapUniformBlockName
(
const
nsACString
&
baseMappedName
nsCString
*
const
out_baseUserName
)
const
;
bool
IsCompiled
(
)
const
{
return
mCompilationSuccessful
;
}
const
auto
&
CompileResults
(
)
const
{
return
mCompileResults
;
}
private
:
void
BindAttribLocation
(
GLuint
prog
const
std
:
:
string
&
userName
GLuint
index
)
const
;
void
MapTransformFeedbackVaryings
(
const
std
:
:
vector
<
nsString
>
&
varyings
std
:
:
vector
<
std
:
:
string
>
*
out_mappedVaryings
)
const
;
public
:
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
void
Delete
(
)
;
NS_INLINE_DECL_REFCOUNTING
(
WebGLShader
)
public
:
const
GLuint
mGLName
;
const
GLenum
mType
;
protected
:
nsString
mSource
;
nsCString
mCleanSource
;
std
:
:
unique_ptr
<
const
webgl
:
:
ShaderValidatorResults
>
mCompileResults
;
bool
mCompilationSuccessful
=
false
;
nsCString
mCompilationLog
;
}
;
}
#
endif
