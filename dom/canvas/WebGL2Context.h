#
ifndef
WEBGL2CONTEXT_H_
#
define
WEBGL2CONTEXT_H_
#
include
"
WebGLContext
.
h
"
namespace
mozilla
{
class
ErrorResult
;
class
HostWebGLContext
;
class
WebGLSampler
;
class
WebGLSync
;
class
WebGLTransformFeedback
;
class
WebGLVertexArrayObject
;
namespace
dom
{
class
OwningUnsignedLongOrUint32ArrayOrBoolean
;
class
OwningWebGLBufferOrLongLong
;
}
class
WebGL2Context
final
:
public
WebGLContext
{
friend
class
WebGLContext
;
public
:
WebGL2Context
(
HostWebGLContext
&
host
const
webgl
:
:
InitContextDesc
&
desc
)
:
WebGLContext
(
host
desc
)
{
}
virtual
bool
IsWebGL2
(
)
const
override
{
return
true
;
}
void
CopyBufferSubData
(
GLenum
readTarget
GLenum
writeTarget
uint64_t
readOffset
uint64_t
writeOffset
uint64_t
size
)
const
;
bool
GetBufferSubData
(
GLenum
target
uint64_t
srcByteOffset
const
Range
<
uint8_t
>
&
dest
)
const
;
void
BlitFramebuffer
(
GLint
srcX0
GLint
srcY0
GLint
srcX1
GLint
srcY1
GLint
dstX0
GLint
dstY0
GLint
dstX1
GLint
dstY1
GLbitfield
mask
GLenum
filter
)
;
void
InvalidateFramebuffer
(
GLenum
target
const
Range
<
const
GLenum
>
&
attachments
)
;
void
InvalidateSubFramebuffer
(
GLenum
target
const
Range
<
const
GLenum
>
&
attachments
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
void
ReadBuffer
(
GLenum
mode
)
;
Maybe
<
std
:
:
vector
<
int32_t
>
>
GetInternalformatParameter
(
GLenum
target
GLenum
internalformat
GLenum
pname
)
const
;
void
VertexAttribI4i
(
GLuint
index
GLint
x
GLint
y
GLint
z
GLint
w
)
;
void
VertexAttribI4ui
(
GLuint
index
GLuint
x
GLuint
y
GLuint
z
GLuint
w
)
;
private
:
bool
ValidateClearBuffer
(
GLenum
buffer
GLint
drawBuffer
webgl
:
:
AttribBaseType
funcType
)
;
public
:
void
ClearBufferfi
(
GLenum
buffer
GLint
drawBuffer
GLfloat
depth
GLint
stencil
)
;
void
ClearBufferTv
(
GLenum
buffer
GLint
drawBuffer
const
webgl
:
:
TypedQuad
&
data
)
;
RefPtr
<
WebGLSampler
>
CreateSampler
(
)
;
void
BindSampler
(
GLuint
unit
WebGLSampler
*
sampler
)
;
void
SamplerParameteri
(
WebGLSampler
&
sampler
GLenum
pname
GLint
param
)
;
void
SamplerParameterf
(
WebGLSampler
&
sampler
GLenum
pname
GLfloat
param
)
;
Maybe
<
double
>
GetSamplerParameter
(
const
WebGLSampler
&
sampler
GLenum
pname
)
const
;
const
GLuint64
kMaxClientWaitSyncTimeoutNS
=
1000
*
1000
*
1000
;
RefPtr
<
WebGLSync
>
FenceSync
(
GLenum
condition
GLbitfield
flags
)
;
GLenum
ClientWaitSync
(
const
WebGLSync
&
sync
GLbitfield
flags
GLuint64
timeout
)
;
RefPtr
<
WebGLTransformFeedback
>
CreateTransformFeedback
(
)
;
void
BindTransformFeedback
(
WebGLTransformFeedback
*
tf
)
;
void
BeginTransformFeedback
(
GLenum
primitiveMode
)
;
void
EndTransformFeedback
(
)
;
void
PauseTransformFeedback
(
)
;
void
ResumeTransformFeedback
(
)
;
void
TransformFeedbackVaryings
(
WebGLProgram
&
program
const
std
:
:
vector
<
std
:
:
string
>
&
varyings
GLenum
bufferMode
)
const
;
Maybe
<
double
>
GetParameter
(
GLenum
pname
)
override
;
Maybe
<
double
>
GetIndexedParameter
(
GLenum
pname
uint32_t
index
)
const
;
using
WebGLContext
:
:
GetParameter
;
void
UniformBlockBinding
(
WebGLProgram
&
program
GLuint
uniformBlockIndex
GLuint
uniformBlockBinding
)
;
private
:
virtual
UniquePtr
<
webgl
:
:
FormatUsageAuthority
>
CreateFormatUsage
(
gl
:
:
GLContext
*
gl
)
const
override
;
virtual
bool
IsTexParamValid
(
GLenum
pname
)
const
override
;
void
UpdateBoundQuery
(
GLenum
target
WebGLQuery
*
query
)
;
}
;
}
#
endif
