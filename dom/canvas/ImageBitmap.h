#
ifndef
mozilla_dom_ImageBitmap_h
#
define
mozilla_dom_ImageBitmap_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmapSource
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
struct
JSContext
;
struct
JSStructuredCloneReader
;
struct
JSStructuredCloneWriter
;
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
gfx
{
class
DataSourceSurface
;
class
SourceSurface
;
}
namespace
layers
{
class
Image
;
}
namespace
dom
{
class
OffscreenCanvas
;
namespace
workers
{
class
WorkerStructuredCloneClosure
;
}
class
CanvasRenderingContext2D
;
class
File
;
class
HTMLCanvasElement
;
class
HTMLImageElement
;
class
HTMLVideoElement
;
class
ImageData
;
class
Promise
;
class
PostMessageEvent
;
class
CreateImageBitmapFromBlob
;
class
CreateImageBitmapFromBlobTask
;
class
CreateImageBitmapFromBlobWorkerTask
;
struct
ImageBitmapCloneData
final
{
RefPtr
<
gfx
:
:
DataSourceSurface
>
mSurface
;
gfx
:
:
IntRect
mPictureRect
;
}
;
class
ImageBitmap
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ImageBitmap
)
nsCOMPtr
<
nsIGlobalObject
>
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint32_t
Width
(
)
const
{
return
mPictureRect
.
Width
(
)
;
}
uint32_t
Height
(
)
const
{
return
mPictureRect
.
Height
(
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
PrepareForDrawTarget
(
gfx
:
:
DrawTarget
*
aTarget
)
;
ImageBitmapCloneData
*
ToCloneData
(
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateFromCloneData
(
nsIGlobalObject
*
aGlobal
ImageBitmapCloneData
*
aData
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateFromOffscreenCanvas
(
nsIGlobalObject
*
aGlobal
OffscreenCanvas
&
aOffscreenCanvas
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
Create
(
nsIGlobalObject
*
aGlobal
const
ImageBitmapSource
&
aSrc
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
JSObject
*
ReadStructuredClone
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
nsIGlobalObject
*
aParent
const
nsTArray
<
RefPtr
<
gfx
:
:
DataSourceSurface
>
>
&
aClonedSurfaces
uint32_t
aIndex
)
;
static
bool
WriteStructuredClone
(
JSStructuredCloneWriter
*
aWriter
nsTArray
<
RefPtr
<
gfx
:
:
DataSourceSurface
>
>
&
aClonedSurfaces
ImageBitmap
*
aImageBitmap
)
;
friend
CreateImageBitmapFromBlob
;
friend
CreateImageBitmapFromBlobTask
;
friend
CreateImageBitmapFromBlobWorkerTask
;
protected
:
ImageBitmap
(
nsIGlobalObject
*
aGlobal
layers
:
:
Image
*
aData
)
;
virtual
~
ImageBitmap
(
)
;
void
SetPictureRect
(
const
gfx
:
:
IntRect
&
aRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
HTMLImageElement
&
aImageEl
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
HTMLVideoElement
&
aVideoEl
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
HTMLCanvasElement
&
aCanvasEl
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
ImageData
&
aImageData
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
CanvasRenderingContext2D
&
aCanvasCtx
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
ImageBitmap
>
CreateInternal
(
nsIGlobalObject
*
aGlobal
ImageBitmap
&
aImageBitmap
const
Maybe
<
gfx
:
:
IntRect
>
&
aCropRect
ErrorResult
&
aRv
)
;
nsCOMPtr
<
nsIGlobalObject
>
mParent
;
RefPtr
<
layers
:
:
Image
>
mData
;
RefPtr
<
gfx
:
:
SourceSurface
>
mSurface
;
gfx
:
:
IntRect
mPictureRect
;
}
;
}
}
#
endif
