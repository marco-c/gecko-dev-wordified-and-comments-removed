#
ifndef
DOM_CANVAS_TUPLE_UTILS_H
#
define
DOM_CANVAS_TUPLE_UTILS_H
#
include
<
tuple
>
namespace
mozilla
{
template
<
class
T
>
constexpr
const
auto
&
ToConstRef1
(
T
&
ret
)
{
return
ret
;
}
template
<
class
Tup
size_t
.
.
.
Ids
>
constexpr
auto
ToTupleOfConstRefsN
(
const
Tup
&
tup
const
std
:
:
index_sequence
<
Ids
.
.
.
>
&
)
{
return
std
:
:
tie
(
ToConstRef1
(
std
:
:
get
<
Ids
>
(
tup
)
)
.
.
.
)
;
}
template
<
class
.
.
.
Args
size_t
.
.
.
Ids
class
Tup
=
std
:
:
tuple
<
Args
.
.
.
>
>
constexpr
auto
ToTupleOfConstRefs
(
const
Tup
&
tup
)
{
return
ToTupleOfConstRefsN
(
tup
std
:
:
make_index_sequence
<
std
:
:
tuple_size_v
<
Tup
>
>
(
)
)
;
}
template
<
class
Tup
class
Callable
size_t
.
.
.
Ids
>
constexpr
auto
MapTupleN
(
Tup
&
&
tup
Callable
&
&
fn
const
std
:
:
index_sequence
<
Ids
.
.
.
>
&
)
{
return
std
:
:
make_tuple
(
fn
(
std
:
:
get
<
Ids
>
(
tup
)
)
.
.
.
)
;
}
template
<
class
.
.
.
Args
class
Callable
class
Tup
=
std
:
:
tuple
<
Args
.
.
.
>
>
constexpr
auto
MapTuple
(
Tup
&
&
t
Callable
&
&
fn
)
{
using
Tup2
=
typename
std
:
:
remove_reference
<
Tup
>
:
:
type
;
return
MapTupleN
(
t
fn
std
:
:
make_index_sequence
<
std
:
:
tuple_size_v
<
Tup2
>
>
(
)
)
;
}
template
<
class
Tup
>
struct
SizeofTupleArgs
;
template
<
class
.
.
.
Args
>
struct
SizeofTupleArgs
<
std
:
:
tuple
<
Args
.
.
.
>
>
:
std
:
:
integral_constant
<
size_t
(
.
.
.
+
sizeof
(
Args
)
)
>
{
}
;
static_assert
(
SizeofTupleArgs
<
std
:
:
tuple
<
size_t
char
char
char
>
>
:
:
value
=
=
sizeof
(
size_t
)
+
3
)
;
}
#
endif
