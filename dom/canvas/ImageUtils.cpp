#
include
"
mozilla
/
dom
/
ImageUtils
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
Intervals
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmapBinding
.
h
"
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
:
:
dom
{
static
Maybe
<
ImageBitmapFormat
>
GetImageBitmapFormatFromSurfaceFromat
(
SurfaceFormat
aSurfaceFormat
)
{
switch
(
aSurfaceFormat
)
{
case
SurfaceFormat
:
:
B8G8R8A8
:
case
SurfaceFormat
:
:
B8G8R8X8
:
return
Some
(
ImageBitmapFormat
:
:
BGRA32
)
;
case
SurfaceFormat
:
:
R8G8B8A8
:
case
SurfaceFormat
:
:
R8G8B8X8
:
return
Some
(
ImageBitmapFormat
:
:
RGBA32
)
;
case
SurfaceFormat
:
:
R8G8B8
:
return
Some
(
ImageBitmapFormat
:
:
RGB24
)
;
case
SurfaceFormat
:
:
B8G8R8
:
return
Some
(
ImageBitmapFormat
:
:
BGR24
)
;
case
SurfaceFormat
:
:
HSV
:
return
Some
(
ImageBitmapFormat
:
:
HSV
)
;
case
SurfaceFormat
:
:
Lab
:
return
Some
(
ImageBitmapFormat
:
:
Lab
)
;
case
SurfaceFormat
:
:
Depth
:
return
Some
(
ImageBitmapFormat
:
:
DEPTH
)
;
case
SurfaceFormat
:
:
A8
:
return
Some
(
ImageBitmapFormat
:
:
GRAY8
)
;
case
SurfaceFormat
:
:
R5G6B5_UINT16
:
case
SurfaceFormat
:
:
YUV420
:
case
SurfaceFormat
:
:
NV12
:
case
SurfaceFormat
:
:
P010
:
case
SurfaceFormat
:
:
P016
:
case
SurfaceFormat
:
:
UNKNOWN
:
default
:
return
Nothing
(
)
;
}
}
static
Maybe
<
ImageBitmapFormat
>
GetImageBitmapFormatFromPlanarYCbCrData
(
layers
:
:
PlanarYCbCrData
const
*
aData
)
{
MOZ_ASSERT
(
aData
)
;
auto
ySize
=
aData
-
>
YDataSize
(
)
;
auto
cbcrSize
=
aData
-
>
CbCrDataSize
(
)
;
media
:
:
Interval
<
uintptr_t
>
YInterval
(
uintptr_t
(
aData
-
>
mYChannel
)
uintptr_t
(
aData
-
>
mYChannel
)
+
ySize
.
height
*
aData
-
>
mYStride
)
CbInterval
(
uintptr_t
(
aData
-
>
mCbChannel
)
uintptr_t
(
aData
-
>
mCbChannel
)
+
cbcrSize
.
height
*
aData
-
>
mCbCrStride
)
CrInterval
(
uintptr_t
(
aData
-
>
mCrChannel
)
uintptr_t
(
aData
-
>
mCrChannel
)
+
cbcrSize
.
height
*
aData
-
>
mCbCrStride
)
;
if
(
aData
-
>
mYSkip
=
=
0
&
&
aData
-
>
mCbSkip
=
=
0
&
&
aData
-
>
mCrSkip
=
=
0
)
{
if
(
!
YInterval
.
Intersects
(
CbInterval
)
&
&
!
CbInterval
.
Intersects
(
CrInterval
)
)
{
switch
(
aData
-
>
mChromaSubsampling
)
{
case
ChromaSubsampling
:
:
FULL
:
return
Some
(
ImageBitmapFormat
:
:
YUV444P
)
;
case
ChromaSubsampling
:
:
HALF_WIDTH
:
return
Some
(
ImageBitmapFormat
:
:
YUV422P
)
;
case
ChromaSubsampling
:
:
HALF_WIDTH_AND_HEIGHT
:
return
Some
(
ImageBitmapFormat
:
:
YUV420P
)
;
default
:
break
;
}
}
}
else
if
(
aData
-
>
mYSkip
=
=
0
&
&
aData
-
>
mCbSkip
=
=
1
&
&
aData
-
>
mCrSkip
=
=
1
&
&
aData
-
>
mChromaSubsampling
=
=
ChromaSubsampling
:
:
HALF_WIDTH_AND_HEIGHT
)
{
if
(
!
YInterval
.
Intersects
(
CbInterval
)
&
&
aData
-
>
mCbChannel
=
=
aData
-
>
mCrChannel
-
1
)
{
return
Some
(
ImageBitmapFormat
:
:
YUV420SP_NV12
)
;
}
else
if
(
!
YInterval
.
Intersects
(
CrInterval
)
&
&
aData
-
>
mCrChannel
=
=
aData
-
>
mCbChannel
-
1
)
{
return
Some
(
ImageBitmapFormat
:
:
YUV420SP_NV21
)
;
}
}
return
Nothing
(
)
;
}
class
ImageUtils
:
:
Impl
{
public
:
explicit
Impl
(
layers
:
:
Image
*
aImage
)
:
mImage
(
aImage
)
mSurface
(
nullptr
)
{
}
virtual
~
Impl
(
)
=
default
;
virtual
Maybe
<
ImageBitmapFormat
>
GetFormat
(
)
const
{
return
GetImageBitmapFormatFromSurfaceFromat
(
Surface
(
)
-
>
GetFormat
(
)
)
;
}
virtual
uint32_t
GetBufferLength
(
)
const
{
DataSourceSurface
:
:
ScopedMap
map
(
Surface
(
)
DataSourceSurface
:
:
READ
)
;
const
uint32_t
stride
=
map
.
GetStride
(
)
;
const
IntSize
size
=
Surface
(
)
-
>
GetSize
(
)
;
return
(
uint32_t
)
(
size
.
height
*
stride
)
;
}
protected
:
Impl
(
)
=
default
;
DataSourceSurface
*
Surface
(
)
const
{
if
(
!
mSurface
)
{
RefPtr
<
SourceSurface
>
surface
=
mImage
-
>
GetAsSourceSurface
(
)
;
MOZ_ASSERT
(
surface
)
;
mSurface
=
surface
-
>
GetDataSurface
(
)
;
MOZ_ASSERT
(
mSurface
)
;
}
return
mSurface
.
get
(
)
;
}
RefPtr
<
layers
:
:
Image
>
mImage
;
mutable
RefPtr
<
DataSourceSurface
>
mSurface
;
}
;
class
YUVImpl
final
:
public
ImageUtils
:
:
Impl
{
public
:
explicit
YUVImpl
(
layers
:
:
Image
*
aImage
)
:
Impl
(
aImage
)
{
MOZ_ASSERT
(
aImage
-
>
GetFormat
(
)
=
=
ImageFormat
:
:
PLANAR_YCBCR
|
|
aImage
-
>
GetFormat
(
)
=
=
ImageFormat
:
:
NV_IMAGE
)
;
}
Maybe
<
ImageBitmapFormat
>
GetFormat
(
)
const
override
{
return
GetImageBitmapFormatFromPlanarYCbCrData
(
GetPlanarYCbCrData
(
)
)
;
}
uint32_t
GetBufferLength
(
)
const
override
{
if
(
mImage
-
>
GetFormat
(
)
=
=
ImageFormat
:
:
PLANAR_YCBCR
)
{
return
mImage
-
>
AsPlanarYCbCrImage
(
)
-
>
GetDataSize
(
)
;
}
return
mImage
-
>
AsNVImage
(
)
-
>
GetBufferSize
(
)
;
}
private
:
const
PlanarYCbCrData
*
GetPlanarYCbCrData
(
)
const
{
if
(
mImage
-
>
GetFormat
(
)
=
=
ImageFormat
:
:
PLANAR_YCBCR
)
{
return
mImage
-
>
AsPlanarYCbCrImage
(
)
-
>
GetData
(
)
;
}
return
mImage
-
>
AsNVImage
(
)
-
>
GetData
(
)
;
}
}
;
ImageUtils
:
:
ImageUtils
(
layers
:
:
Image
*
aImage
)
:
mImpl
(
nullptr
)
{
MOZ_ASSERT
(
aImage
"
Create
ImageUtils
with
nullptr
.
"
)
;
switch
(
aImage
-
>
GetFormat
(
)
)
{
case
mozilla
:
:
ImageFormat
:
:
PLANAR_YCBCR
:
case
mozilla
:
:
ImageFormat
:
:
NV_IMAGE
:
mImpl
=
new
YUVImpl
(
aImage
)
;
break
;
case
mozilla
:
:
ImageFormat
:
:
MOZ2D_SURFACE
:
default
:
mImpl
=
new
Impl
(
aImage
)
;
}
}
ImageUtils
:
:
~
ImageUtils
(
)
{
if
(
mImpl
)
{
delete
mImpl
;
mImpl
=
nullptr
;
}
}
Maybe
<
ImageBitmapFormat
>
ImageUtils
:
:
GetFormat
(
)
const
{
MOZ_ASSERT
(
mImpl
)
;
return
mImpl
-
>
GetFormat
(
)
;
}
uint32_t
ImageUtils
:
:
GetBufferLength
(
)
const
{
MOZ_ASSERT
(
mImpl
)
;
return
mImpl
-
>
GetBufferLength
(
)
;
}
}
