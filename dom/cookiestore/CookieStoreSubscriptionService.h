#
ifndef
mozilla_dom_CookieStoreSubscriptionService_h
#
define
mozilla_dom_CookieStoreSubscriptionService_h
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrarTypes
.
h
"
namespace
mozilla
:
:
dom
{
class
CookieSubscription
;
class
CookieStoreSubscriptionService
final
:
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
CookieStoreSubscriptionService
*
Instance
(
)
;
static
void
ServiceWorkerLoaded
(
const
ServiceWorkerRegistrationData
&
aData
const
nsACString
&
aValue
)
;
static
void
ServiceWorkerUpdated
(
const
ServiceWorkerRegistrationData
&
aData
)
;
static
void
ServiceWorkerUnregistered
(
const
ServiceWorkerRegistrationData
&
aData
)
;
static
void
ServiceWorkerUnregistered
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScopeURL
)
;
void
GetSubscriptions
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
nsTArray
<
CookieSubscription
>
&
aSubscriptions
)
;
void
Subscribe
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
const
nsTArray
<
CookieSubscription
>
&
aSubscriptions
)
;
void
Unsubscribe
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aScope
const
nsTArray
<
CookieSubscription
>
&
aSubscriptions
)
;
void
Load
(
const
ServiceWorkerRegistrationData
&
aData
const
nsACString
&
aValue
)
;
void
Unregister
(
const
ServiceWorkerRegistrationData
&
aData
)
;
private
:
CookieStoreSubscriptionService
(
)
;
~
CookieStoreSubscriptionService
(
)
=
default
;
void
Initialize
(
)
;
struct
RegistrationData
{
ServiceWorkerRegistrationData
mRegistration
;
nsTArray
<
CookieSubscription
>
mSubscriptions
;
}
;
void
ParseAndAddSubscription
(
RegistrationData
&
aData
const
nsACString
&
aValue
)
;
void
SerializeAndSave
(
const
RegistrationData
&
aData
)
;
nsTArray
<
RegistrationData
>
mData
;
}
;
}
#
endif
