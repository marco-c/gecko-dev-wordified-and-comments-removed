#
ifndef
mozilla_dom_CookieStoreParent_h
#
define
mozilla_dom_CookieStoreParent_h
#
include
"
mozilla
/
dom
/
PCookieStoreParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
dom
{
class
CookieStoreNotificationWatcher
;
class
CookieStoreParent
final
:
public
PCookieStoreParent
{
friend
class
PCookieStoreParent
;
public
:
using
GetRequestPromise
=
MozPromise
<
CopyableTArray
<
CookieData
>
nsresult
true
>
;
using
SetDeleteRequestPromise
=
MozPromise
<
bool
nsresult
true
>
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CookieStoreParent
)
CookieStoreParent
(
)
;
private
:
~
CookieStoreParent
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetRequest
(
const
nsString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
const
bool
&
aMatchName
const
nsString
&
aName
const
nsCString
&
aPath
const
bool
&
aOnlyFirstMatch
GetRequestResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetRequest
(
const
nsString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
const
nsString
&
aName
const
nsString
&
aValue
const
bool
&
aSession
const
int64_t
&
aExpires
const
nsString
&
aPath
const
int32_t
&
aSameSite
const
bool
&
aPartitioned
const
nsID
&
aOperationID
SetRequestResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeleteRequest
(
const
nsString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
const
nsString
&
aName
const
nsString
&
aPath
const
bool
&
aPartitioned
const
nsID
&
aOperationID
DeleteRequestResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
;
void
GetRequestOnMainThread
(
const
nsAString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
bool
aMatchName
const
nsAString
&
aName
const
nsACString
&
aPath
bool
aOnlyFirstMatch
nsTArray
<
CookieData
>
&
aResults
)
;
bool
SetRequestOnMainThread
(
ThreadsafeContentParentHandle
*
aParent
const
nsAString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aName
const
nsAString
&
aValue
bool
aSession
int64_t
aExpires
const
nsAString
&
aPath
int32_t
aSameSite
bool
aPartitioned
const
nsID
&
aOperationID
)
;
bool
DeleteRequestOnMainThread
(
ThreadsafeContentParentHandle
*
aParent
const
nsAString
&
aDomain
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aName
const
nsAString
&
aPath
bool
aPartitioned
const
nsID
&
aOperationID
)
;
CookieStoreNotificationWatcher
*
GetOrCreateNotificationWatcherOnMainThread
(
const
OriginAttributes
&
aOriginAttributes
)
;
RefPtr
<
CookieStoreNotificationWatcher
>
mNotificationWatcherOnMainThread
;
}
;
}
#
endif
