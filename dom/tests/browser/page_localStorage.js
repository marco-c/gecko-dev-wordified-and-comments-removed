var
pageName
=
document
.
location
.
search
.
substring
(
1
)
;
window
.
addEventListener
(
"
load
"
(
)
=
>
{
document
.
getElementById
(
"
pageNameH
"
)
.
textContent
=
pageName
;
}
)
;
const
SENTINEL_KEY
=
"
WRITE_BATCH_SENTINEL
"
;
var
storageEventsPromise
=
null
;
function
listenForStorageEvents
(
sentinelValue
)
{
const
recordedEvents
=
[
]
;
storageEventsPromise
=
new
Promise
(
function
(
resolve
reject
)
{
window
.
addEventListener
(
"
storage
"
function
thisHandler
(
event
)
{
if
(
event
.
key
=
=
=
SENTINEL_KEY
)
{
if
(
event
.
newValue
=
=
=
sentinelValue
)
{
window
.
removeEventListener
(
"
storage
"
thisHandler
)
;
resolve
(
recordedEvents
)
;
}
else
{
reject
(
event
.
newValue
)
;
}
}
else
{
recordedEvents
.
push
(
[
event
.
key
event
.
newValue
event
.
oldValue
]
)
;
}
}
)
;
}
)
;
}
function
mutateStorage
(
{
mutations
sentinelValue
}
)
{
mutations
.
forEach
(
function
(
[
key
value
]
)
{
if
(
key
!
=
=
null
)
{
if
(
value
=
=
=
null
)
{
localStorage
.
removeItem
(
key
)
;
}
else
{
localStorage
.
setItem
(
key
value
)
;
}
}
else
{
localStorage
.
clear
(
)
;
}
}
)
;
localStorage
.
setItem
(
SENTINEL_KEY
sentinelValue
)
;
}
function
waitForSentinelValue
(
sentinelValue
)
{
return
new
Promise
(
function
(
resolve
)
{
function
checkFunc
(
)
{
if
(
localStorage
.
getItem
(
SENTINEL_KEY
)
=
=
=
sentinelValue
)
{
resolve
(
)
;
}
else
{
setTimeout
(
checkFunc
0
)
;
}
}
checkFunc
(
)
;
}
)
;
}
async
function
getStorageState
(
maybeSentinel
)
{
if
(
maybeSentinel
)
{
await
waitForSentinelValue
(
maybeSentinel
)
;
}
let
numKeys
=
localStorage
.
length
;
let
state
=
{
}
;
for
(
var
iKey
=
0
;
iKey
<
numKeys
;
iKey
+
+
)
{
let
key
=
localStorage
.
key
(
iKey
)
;
if
(
key
!
=
=
SENTINEL_KEY
)
{
state
[
key
]
=
localStorage
.
getItem
(
key
)
;
}
}
return
state
;
}
function
returnAndClearStorageEvents
(
)
{
return
storageEventsPromise
;
}
