const
HELPER_PAGE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
page_localstorage
.
html
"
;
const
HELPER_PAGE_ORIGIN
=
"
http
:
/
/
example
.
com
/
"
;
let
testDir
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
;
Services
.
scriptloader
.
loadSubScript
(
testDir
+
"
/
helper_localStorage
.
js
"
this
)
;
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
false
]
[
"
dom
.
storage
.
testing
"
true
]
]
}
)
;
await
clearOriginStorageEnsuringNoPreload
(
HELPER_PAGE_ORIGIN
)
;
await
triggerAndWaitForLocalStorageFlush
(
)
;
const
knownTabs
=
new
KnownTabs
(
)
;
const
writerTab
=
await
openTestTab
(
HELPER_PAGE_URL
"
writer
"
knownTabs
true
)
;
const
listenerTab
=
await
openTestTab
(
HELPER_PAGE_URL
"
listener
"
knownTabs
true
)
;
const
readerTab
=
await
openTestTab
(
HELPER_PAGE_URL
"
reader
"
knownTabs
true
)
;
const
lateWriteThenListenTab
=
await
openTestTab
(
HELPER_PAGE_URL
"
lateWriteThenListen
"
knownTabs
true
)
;
await
verifyTabPreload
(
writerTab
false
HELPER_PAGE_ORIGIN
)
;
await
verifyTabPreload
(
listenerTab
false
HELPER_PAGE_ORIGIN
)
;
await
verifyTabPreload
(
readerTab
false
HELPER_PAGE_ORIGIN
)
;
const
initialSentinel
=
"
initial
"
;
const
noSentinelCheck
=
null
;
await
recordTabStorageEvents
(
listenerTab
initialSentinel
)
;
info
(
"
initial
writes
"
)
;
const
initialWriteMutations
=
[
[
"
getsCleared
"
"
1
"
null
]
[
"
alsoGetsCleared
"
"
2
"
null
]
[
null
null
null
]
[
"
stays
"
"
3
"
null
]
[
"
clobbered
"
"
pre
"
null
]
[
"
getsDeletedLater
"
"
4
"
null
]
[
"
getsDeletedImmediately
"
"
5
"
null
]
[
"
getsDeletedImmediately
"
null
"
5
"
]
[
"
alsoStays
"
"
6
"
null
]
[
"
getsDeletedLater
"
null
"
4
"
]
[
"
clobbered
"
"
post
"
"
pre
"
]
]
;
const
initialWriteState
=
{
stays
:
"
3
"
clobbered
:
"
post
"
alsoStays
:
"
6
"
}
;
await
mutateTabStorage
(
writerTab
initialWriteMutations
initialSentinel
)
;
await
verifyTabStorageState
(
writerTab
initialWriteState
noSentinelCheck
)
;
await
verifyTabStorageEvents
(
listenerTab
initialWriteMutations
initialSentinel
)
;
await
verifyTabStorageState
(
listenerTab
initialWriteState
noSentinelCheck
)
;
await
verifyTabStorageState
(
readerTab
initialWriteState
noSentinelCheck
)
;
info
(
"
late
writes
"
)
;
const
lateWriteSentinel
=
"
lateWrite
"
;
const
lateWriteMutations
=
[
[
"
lateStays
"
"
10
"
null
]
[
"
lateClobbered
"
"
latePre
"
null
]
[
"
lateDeleted
"
"
11
"
null
]
[
"
lateClobbered
"
"
lastPost
"
"
latePre
"
]
[
"
lateDeleted
"
null
"
11
"
]
]
;
const
lateWriteState
=
Object
.
assign
(
{
}
initialWriteState
{
lateStays
:
"
10
"
lateClobbered
:
"
lastPost
"
}
)
;
await
recordTabStorageEvents
(
listenerTab
lateWriteSentinel
)
;
await
mutateTabStorage
(
lateWriteThenListenTab
lateWriteMutations
lateWriteSentinel
)
;
await
verifyTabStorageState
(
writerTab
lateWriteState
lateWriteSentinel
)
;
await
verifyTabStorageEvents
(
listenerTab
lateWriteMutations
lateWriteSentinel
)
;
await
verifyTabStorageState
(
listenerTab
lateWriteState
noSentinelCheck
)
;
await
verifyTabStorageState
(
readerTab
lateWriteState
lateWriteSentinel
)
;
info
(
"
last
set
of
writes
"
)
;
const
lastWriteSentinel
=
"
lastWrite
"
;
const
lastWriteMutations
=
[
[
"
lastStays
"
"
20
"
null
]
[
"
lastDeleted
"
"
21
"
null
]
[
"
lastClobbered
"
"
lastPre
"
null
]
[
"
lastClobbered
"
"
lastPost
"
"
lastPre
"
]
[
"
lastDeleted
"
null
"
21
"
]
]
;
const
lastWriteState
=
Object
.
assign
(
{
}
lateWriteState
{
lastStays
:
"
20
"
lastClobbered
:
"
lastPost
"
}
)
;
await
recordTabStorageEvents
(
listenerTab
lastWriteSentinel
)
;
await
recordTabStorageEvents
(
lateWriteThenListenTab
lastWriteSentinel
)
;
await
mutateTabStorage
(
writerTab
lastWriteMutations
lastWriteSentinel
)
;
await
verifyTabStorageState
(
writerTab
lastWriteState
noSentinelCheck
)
;
await
verifyTabStorageEvents
(
listenerTab
lastWriteMutations
lastWriteSentinel
)
;
await
verifyTabStorageState
(
listenerTab
lastWriteState
noSentinelCheck
)
;
await
verifyTabStorageState
(
readerTab
lastWriteState
lastWriteSentinel
)
;
await
verifyTabStorageEvents
(
lateWriteThenListenTab
lastWriteMutations
lastWriteSentinel
)
;
await
verifyTabStorageState
(
lateWriteThenListenTab
lastWriteState
noSentinelCheck
)
;
info
(
"
flush
to
make
preload
check
work
"
)
;
await
triggerAndWaitForLocalStorageFlush
(
)
;
info
(
"
late
open
preload
check
"
)
;
const
lateOpenSeesPreload
=
await
openTestTab
(
HELPER_PAGE_URL
"
lateOpenSeesPreload
"
knownTabs
true
)
;
await
verifyTabPreload
(
lateOpenSeesPreload
true
HELPER_PAGE_ORIGIN
)
;
await
cleanupTabs
(
knownTabs
)
;
clearOriginStorageEnsuringNoPreload
(
HELPER_PAGE_ORIGIN
)
;
}
)
;
