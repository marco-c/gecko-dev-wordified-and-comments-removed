const
HELPER_PAGE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
page_localstorage_e10s
.
html
"
;
const
HELPER_PAGE_ORIGIN
=
"
http
:
/
/
example
.
com
/
"
;
class
KnownTab
{
constructor
(
name
tab
)
{
this
.
name
=
name
;
this
.
tab
=
tab
;
}
cleanup
(
)
{
this
.
tab
=
null
;
}
}
class
KnownTabs
{
constructor
(
)
{
this
.
byPid
=
new
Map
(
)
;
this
.
byName
=
new
Map
(
)
;
}
cleanup
(
)
{
this
.
byPid
=
null
;
this
.
byName
=
null
;
}
}
function
*
openTestTabInOwnProcess
(
name
knownTabs
)
{
let
url
=
HELPER_PAGE_URL
+
'
?
'
+
encodeURIComponent
(
name
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
let
pid
=
tab
.
linkedBrowser
.
frameLoader
.
tabParent
.
osPid
;
ok
(
!
knownTabs
.
byName
.
has
(
name
)
"
tab
needs
its
own
name
:
"
+
name
)
;
ok
(
!
knownTabs
.
byPid
.
has
(
pid
)
"
tab
needs
to
be
in
its
own
process
:
"
+
pid
)
;
let
knownTab
=
new
KnownTab
(
name
tab
)
;
knownTabs
.
byPid
.
set
(
pid
knownTab
)
;
knownTabs
.
byName
.
set
(
name
knownTab
)
;
return
knownTab
;
}
function
*
cleanupTabs
(
knownTabs
)
{
for
(
let
knownTab
of
knownTabs
.
byName
.
values
(
)
)
{
yield
BrowserTestUtils
.
removeTab
(
knownTab
.
tab
)
;
knownTab
.
cleanup
(
)
;
}
knownTabs
.
cleanup
(
)
;
}
function
clearOriginStorageEnsuringNoPreload
(
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
HELPER_PAGE_ORIGIN
)
;
let
storage
=
Services
.
domStorageManager
.
createStorage
(
null
principal
"
"
)
;
storage
.
clear
(
)
;
}
function
*
verifyTabPreload
(
knownTab
expectStorageExists
)
{
let
storageExists
=
yield
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
HELPER_PAGE_ORIGIN
function
(
origin
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
origin
)
;
return
!
!
Services
.
domStorageManager
.
getStorage
(
null
principal
)
;
}
)
;
is
(
storageExists
expectStorageExists
"
Storage
existence
=
=
=
preload
"
)
;
}
function
*
mutateTabStorage
(
knownTab
mutations
)
{
yield
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
{
mutations
}
function
(
args
)
{
return
content
.
wrappedJSObject
.
mutateStorage
(
args
.
mutations
)
;
}
)
;
}
function
*
recordTabStorageEvents
(
knownTab
)
{
yield
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
{
}
function
(
)
{
return
content
.
wrappedJSObject
.
listenForStorageEvents
(
)
;
}
)
;
}
function
*
verifyTabStorageState
(
knownTab
expectedState
)
{
let
actualState
=
yield
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
{
}
function
(
)
{
return
content
.
wrappedJSObject
.
getStorageState
(
)
;
}
)
;
for
(
let
[
expectedKey
expectedValue
]
of
Object
.
entries
(
expectedState
)
)
{
ok
(
actualState
.
hasOwnProperty
(
expectedKey
)
"
key
present
:
"
+
expectedKey
)
;
is
(
actualState
[
expectedKey
]
expectedValue
"
value
correct
"
)
;
}
for
(
let
actualKey
of
Object
.
keys
(
actualState
)
)
{
if
(
!
expectedState
.
hasOwnProperty
(
actualKey
)
)
{
ok
(
false
"
actual
state
has
key
it
shouldn
'
t
have
:
"
+
actualKey
)
;
}
}
}
function
*
verifyTabStorageEvents
(
knownTab
expectedEvents
)
{
let
actualEvents
=
yield
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
{
}
function
(
)
{
return
content
.
wrappedJSObject
.
returnAndClearStorageEvents
(
)
;
}
)
;
is
(
actualEvents
.
length
expectedEvents
.
length
"
right
number
of
events
"
)
;
for
(
let
i
=
0
;
i
<
actualEvents
.
length
;
i
+
+
)
{
let
[
actualKey
actualNewValue
actualOldValue
]
=
actualEvents
[
i
]
;
let
[
expectedKey
expectedNewValue
expectedOldValue
]
=
expectedEvents
[
i
]
;
is
(
actualKey
expectedKey
"
keys
match
"
)
;
is
(
actualNewValue
expectedNewValue
"
new
values
match
"
)
;
is
(
actualOldValue
expectedOldValue
"
old
values
match
"
)
;
}
}
requestLongerTimeout
(
4
)
;
add_task
(
function
*
(
)
{
let
keepAliveCount
=
0
;
try
{
keepAliveCount
=
SpecialPowers
.
getIntPref
(
"
dom
.
ipc
.
keepProcessesAlive
.
web
"
)
;
}
catch
(
ex
)
{
}
let
safeProcessCount
=
keepAliveCount
+
6
;
info
(
"
dom
.
ipc
.
keepProcessesAlive
.
web
is
"
+
keepAliveCount
+
"
boosting
"
+
"
process
count
temporarily
to
"
+
safeProcessCount
)
;
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
safeProcessCount
]
[
"
dom
.
ipc
.
processCount
.
web
"
safeProcessCount
]
]
}
)
;
clearOriginStorageEnsuringNoPreload
(
)
;
const
knownTabs
=
new
KnownTabs
(
)
;
const
writerTab
=
yield
*
openTestTabInOwnProcess
(
"
writer
"
knownTabs
)
;
const
listenerTab
=
yield
*
openTestTabInOwnProcess
(
"
listener
"
knownTabs
)
;
const
readerTab
=
yield
*
openTestTabInOwnProcess
(
"
reader
"
knownTabs
)
;
const
lateWriteThenListenTab
=
yield
*
openTestTabInOwnProcess
(
"
lateWriteThenListen
"
knownTabs
)
;
yield
*
verifyTabPreload
(
writerTab
false
)
;
yield
*
verifyTabPreload
(
listenerTab
false
)
;
yield
*
verifyTabPreload
(
readerTab
false
)
;
yield
*
recordTabStorageEvents
(
listenerTab
)
;
const
initialWriteMutations
=
[
[
"
getsCleared
"
"
1
"
null
]
[
"
alsoGetsCleared
"
"
2
"
null
]
[
null
null
null
]
[
"
stays
"
"
3
"
null
]
[
"
clobbered
"
"
pre
"
null
]
[
"
getsDeletedLater
"
"
4
"
null
]
[
"
getsDeletedImmediately
"
"
5
"
null
]
[
"
getsDeletedImmediately
"
null
"
5
"
]
[
"
alsoStays
"
"
6
"
null
]
[
"
getsDeletedLater
"
null
"
4
"
]
[
"
clobbered
"
"
post
"
"
pre
"
]
]
;
const
initialWriteState
=
{
stays
:
"
3
"
clobbered
:
"
post
"
alsoStays
:
"
6
"
}
;
yield
*
mutateTabStorage
(
writerTab
initialWriteMutations
)
;
yield
*
verifyTabStorageState
(
writerTab
initialWriteState
)
;
yield
*
verifyTabStorageEvents
(
listenerTab
initialWriteMutations
)
;
yield
*
verifyTabStorageState
(
listenerTab
initialWriteState
)
;
yield
*
verifyTabStorageState
(
readerTab
initialWriteState
)
;
const
lateWriteMutations
=
[
[
"
lateStays
"
"
10
"
null
]
[
"
lateClobbered
"
"
latePre
"
null
]
[
"
lateDeleted
"
"
11
"
null
]
[
"
lateClobbered
"
"
lastPost
"
"
latePre
"
]
[
"
lateDeleted
"
null
"
11
"
]
]
;
const
lateWriteState
=
Object
.
assign
(
{
}
initialWriteState
{
lateStays
:
"
10
"
lateClobbered
:
"
lastPost
"
}
)
;
yield
*
mutateTabStorage
(
lateWriteThenListenTab
lateWriteMutations
)
;
yield
*
recordTabStorageEvents
(
lateWriteThenListenTab
)
;
yield
*
verifyTabStorageState
(
writerTab
lateWriteState
)
;
yield
*
verifyTabStorageEvents
(
listenerTab
lateWriteMutations
)
;
yield
*
verifyTabStorageState
(
listenerTab
lateWriteState
)
;
yield
*
verifyTabStorageState
(
readerTab
lateWriteState
)
;
const
lastWriteMutations
=
[
[
"
lastStays
"
"
20
"
null
]
[
"
lastDeleted
"
"
21
"
null
]
[
"
lastClobbered
"
"
lastPre
"
null
]
[
"
lastClobbered
"
"
lastPost
"
"
lastPre
"
]
[
"
lastDeleted
"
null
"
21
"
]
]
;
const
lastWriteState
=
Object
.
assign
(
{
}
lateWriteState
{
lastStays
:
"
20
"
lastClobbered
:
"
lastPost
"
}
)
;
yield
*
mutateTabStorage
(
writerTab
lastWriteMutations
)
;
yield
*
verifyTabStorageState
(
writerTab
lastWriteState
)
;
yield
*
verifyTabStorageEvents
(
listenerTab
lastWriteMutations
)
;
yield
*
verifyTabStorageState
(
listenerTab
lastWriteState
)
;
yield
*
verifyTabStorageState
(
readerTab
lastWriteState
)
;
yield
*
verifyTabStorageEvents
(
lateWriteThenListenTab
lastWriteMutations
)
;
yield
*
verifyTabStorageState
(
lateWriteThenListenTab
lastWriteState
)
;
const
lateOpenSeesPreload
=
yield
*
openTestTabInOwnProcess
(
"
lateOpenSeesPreload
"
knownTabs
)
;
yield
*
verifyTabPreload
(
lateOpenSeesPreload
true
)
;
yield
*
cleanupTabs
(
knownTabs
)
;
clearOriginStorageEnsuringNoPreload
(
)
;
}
)
;
