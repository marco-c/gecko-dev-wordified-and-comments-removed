const
CONTENT_PAGE
=
"
http
:
/
/
www
.
example
.
com
/
browser
/
dom
/
tests
/
browser
/
test_new_window_from_content_child
.
html
"
;
function
getToolbarsFromBrowserContent
(
aBrowser
)
{
return
ContentTask
.
spawn
(
aBrowser
{
}
function
*
(
)
{
return
{
toolbar
:
content
.
toolbar
.
visible
menubar
:
content
.
menubar
.
visible
personalbar
:
content
.
personalbar
.
visible
statusbar
:
content
.
statusbar
.
visible
locationbar
:
content
.
locationbar
.
visible
}
;
}
)
;
}
function
getToolbarsFromWindowChrome
(
win
)
{
return
{
toolbar
:
win
.
toolbar
.
visible
menubar
:
win
.
menubar
.
visible
personalbar
:
win
.
personalbar
.
visible
statusbar
:
win
.
statusbar
.
visible
locationbar
:
win
.
locationbar
.
visible
}
}
function
testDefaultToolbars
(
toolbars
)
{
ok
(
toolbars
.
locationbar
"
locationbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
menubar
"
menubar
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
personalbar
"
personalbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
statusbar
"
statusbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
toolbar
"
toolbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
}
function
testNonDefaultContentToolbars
(
toolbars
)
{
ok
(
toolbars
.
locationbar
"
locationbar
should
be
visible
even
with
location
=
no
"
)
;
ok
(
!
toolbars
.
menubar
"
menubar
shouldn
'
t
be
visible
when
menubar
=
no
"
)
;
ok
(
!
toolbars
.
personalbar
"
personalbar
shouldn
'
t
be
visible
when
personalbar
=
no
"
)
;
todo
(
!
toolbars
.
statusbar
"
statusbar
shouldn
'
t
be
visible
when
status
=
no
"
)
;
ok
(
!
toolbars
.
toolbar
"
toolbar
shouldn
'
t
be
visible
when
toolbar
=
no
"
)
;
}
function
testNonDefaultChromeToolbars
(
toolbars
)
{
ok
(
!
toolbars
.
locationbar
"
locationbar
should
not
be
visible
with
location
=
no
"
)
;
ok
(
!
toolbars
.
menubar
"
menubar
should
not
be
visible
with
menubar
=
no
"
)
;
ok
(
!
toolbars
.
personalbar
"
personalbar
should
not
be
visible
with
personalbar
=
no
"
)
;
ok
(
!
toolbars
.
statusbar
"
statusbar
should
not
be
visible
with
status
=
no
"
)
;
ok
(
!
toolbars
.
toolbar
"
toolbar
should
not
be
visible
with
toolbar
=
no
"
)
;
}
add_task
(
function
*
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
CONTENT_PAGE
}
function
*
(
browser
)
{
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenDefault
"
{
}
browser
)
;
let
tab
=
yield
newTabPromise
;
let
toolbars
=
yield
getToolbarsFromBrowserContent
(
gBrowser
.
selectedBrowser
)
;
testDefaultToolbars
(
toolbars
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenNonDefault
"
{
}
browser
)
;
let
popupWindow
=
yield
winPromise
;
let
popupBrowser
=
popupWindow
.
gBrowser
.
selectedBrowser
;
yield
BrowserTestUtils
.
browserLoaded
(
popupBrowser
)
;
let
popupToolbars
=
yield
getToolbarsFromBrowserContent
(
popupBrowser
)
;
testNonDefaultContentToolbars
(
popupToolbars
)
;
let
chromeToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultContentToolbars
(
chromeToolbars
)
;
yield
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
}
)
;
add_task
(
function
*
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
CONTENT_PAGE
}
function
*
(
browser
)
{
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenNoURLNonDefault
"
{
}
browser
)
;
let
popupWindow
=
yield
winPromise
;
let
popupBrowser
=
popupWindow
.
gBrowser
.
selectedBrowser
;
let
popupToolbars
=
yield
getToolbarsFromBrowserContent
(
popupBrowser
)
;
testNonDefaultContentToolbars
(
popupToolbars
)
;
let
chromeToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultContentToolbars
(
chromeToolbars
)
;
yield
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
}
)
;
add_task
(
function
*
(
)
{
let
defaultWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
window
.
open
(
"
about
:
robots
"
"
_blank
"
)
;
let
defaultWindow
=
yield
defaultWindowPromise
;
let
toolbars
=
getToolbarsFromWindowChrome
(
defaultWindow
)
;
testDefaultToolbars
(
toolbars
)
;
let
features
=
"
location
=
no
personalbar
=
no
toolbar
=
no
scrollbars
=
no
menubar
=
no
status
=
no
"
;
let
popupWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
window
.
open
(
"
about
:
robots
"
"
_blank
"
features
)
;
let
popupWindow
=
yield
popupWindowPromise
;
let
hiddenToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultChromeToolbars
(
hiddenToolbars
)
;
yield
BrowserTestUtils
.
closeWindow
(
defaultWindow
)
;
yield
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
