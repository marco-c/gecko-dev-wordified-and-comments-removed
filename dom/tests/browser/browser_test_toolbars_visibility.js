const
ROOT
=
"
http
:
/
/
www
.
example
.
com
/
browser
/
dom
/
tests
/
browser
/
"
;
const
CONTENT_PAGE
=
ROOT
+
"
test_new_window_from_content_child
.
html
"
;
const
TARGET_PAGE
=
ROOT
+
"
dummy
.
html
"
;
function
getToolbarsFromBrowserContent
(
aBrowser
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
]
async
function
(
)
{
let
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
textContent
=
let
bars
=
[
"
toolbar
"
"
menubar
"
"
personalbar
"
"
statusbar
"
"
scrollbars
"
"
locationbar
"
]
;
for
(
let
bar
of
bars
)
{
let
node
=
document
.
createElement
(
"
span
"
)
;
node
.
id
=
bar
;
node
.
textContent
=
window
[
bar
]
.
visible
;
document
.
body
.
appendChild
(
node
)
;
}
;
content
.
document
.
body
.
appendChild
(
script
)
;
let
result
=
{
}
;
let
bars
=
[
"
toolbar
"
"
menubar
"
"
personalbar
"
"
statusbar
"
"
scrollbars
"
"
locationbar
"
]
;
for
(
let
bar
of
bars
)
{
let
node
=
content
.
document
.
getElementById
(
bar
)
;
let
value
=
node
.
textContent
;
if
(
value
!
=
=
"
true
"
&
&
value
!
=
=
"
false
"
)
{
throw
new
Error
(
"
bar
visibility
isn
'
t
set
"
)
;
}
result
[
bar
]
=
value
=
=
=
"
true
"
;
node
.
remove
(
)
;
}
return
result
;
}
)
;
}
function
getToolbarsFromWindowChrome
(
win
)
{
return
{
toolbar
:
win
.
toolbar
.
visible
menubar
:
win
.
menubar
.
visible
personalbar
:
win
.
personalbar
.
visible
statusbar
:
win
.
statusbar
.
visible
scrollbars
:
win
.
scrollbars
.
visible
locationbar
:
win
.
locationbar
.
visible
}
;
}
function
testDefaultToolbars
(
toolbars
)
{
ok
(
toolbars
.
locationbar
"
locationbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
menubar
"
menubar
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
personalbar
"
personalbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
statusbar
"
statusbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
scrollbars
"
scrollbars
should
be
visible
on
default
window
.
open
(
)
"
)
;
ok
(
toolbars
.
toolbar
"
toolbar
should
be
visible
on
default
window
.
open
(
)
"
)
;
}
function
testNonDefaultContentToolbarsFromContent
(
toolbars
)
{
ok
(
!
toolbars
.
locationbar
"
locationbar
.
visible
should
be
false
for
popup
"
)
;
ok
(
!
toolbars
.
menubar
"
menubar
.
visible
should
be
false
for
popup
"
)
;
ok
(
!
toolbars
.
personalbar
"
personalbar
.
visible
should
be
false
for
popup
"
)
;
ok
(
!
toolbars
.
statusbar
"
statusbar
.
visible
should
be
false
for
popup
"
)
;
ok
(
!
toolbars
.
scrollbars
"
scrollbars
.
visible
should
be
false
for
popup
"
)
;
ok
(
!
toolbars
.
toolbar
"
toolbar
.
visible
should
be
false
for
popup
"
)
;
}
function
testNonDefaultContentToolbarsFromChrome
(
toolbars
)
{
ok
(
toolbars
.
locationbar
"
locationbar
should
be
visible
even
with
location
=
no
"
)
;
ok
(
!
toolbars
.
menubar
"
menubar
shouldn
'
t
be
visible
when
menubar
=
no
"
)
;
ok
(
!
toolbars
.
personalbar
"
personalbar
shouldn
'
t
be
visible
when
personalbar
=
no
"
)
;
todo
(
!
toolbars
.
statusbar
"
statusbar
shouldn
'
t
be
visible
when
status
=
no
"
)
;
ok
(
toolbars
.
scrollbars
"
scrollbars
should
be
visible
even
with
scrollbars
=
no
"
)
;
ok
(
!
toolbars
.
toolbar
"
toolbar
shouldn
'
t
be
visible
when
toolbar
=
no
"
)
;
}
function
testNonDefaultChromeToolbars
(
toolbars
)
{
ok
(
!
toolbars
.
locationbar
"
locationbar
should
not
be
visible
with
location
=
no
"
)
;
ok
(
!
toolbars
.
menubar
"
menubar
should
not
be
visible
with
menubar
=
no
"
)
;
ok
(
!
toolbars
.
personalbar
"
personalbar
should
not
be
visible
with
personalbar
=
no
"
)
;
ok
(
!
toolbars
.
statusbar
"
statusbar
should
not
be
visible
with
status
=
no
"
)
;
ok
(
toolbars
.
scrollbars
"
scrollbars
should
be
visible
even
with
scrollbars
=
no
"
)
;
ok
(
!
toolbars
.
toolbar
"
toolbar
should
not
be
visible
with
toolbar
=
no
"
)
;
}
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
CONTENT_PAGE
}
async
function
(
browser
)
{
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenDefault
"
{
}
browser
)
;
let
tab
=
await
newTabPromise
;
let
toolbars
=
await
getToolbarsFromBrowserContent
(
gBrowser
.
selectedBrowser
)
;
testDefaultToolbars
(
toolbars
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
TARGET_PAGE
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenNonDefault
"
{
}
browser
)
;
let
popupWindow
=
await
winPromise
;
let
popupBrowser
=
popupWindow
.
gBrowser
.
selectedBrowser
;
let
popupToolbars
=
await
getToolbarsFromBrowserContent
(
popupBrowser
)
;
testNonDefaultContentToolbarsFromContent
(
popupToolbars
)
;
let
chromeToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultContentToolbarsFromChrome
(
chromeToolbars
)
;
await
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
CONTENT_PAGE
}
async
function
(
browser
)
{
let
winPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
winOpenNoURLNonDefault
"
{
}
browser
)
;
let
popupWindow
=
await
winPromise
;
let
popupBrowser
=
popupWindow
.
gBrowser
.
selectedBrowser
;
let
popupToolbars
=
await
getToolbarsFromBrowserContent
(
popupBrowser
)
;
testNonDefaultContentToolbarsFromContent
(
popupToolbars
)
;
let
chromeToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultContentToolbarsFromChrome
(
chromeToolbars
)
;
await
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
let
defaultWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
TARGET_PAGE
}
)
;
window
.
open
(
TARGET_PAGE
"
_blank
"
"
noopener
"
)
;
let
defaultWindow
=
await
defaultWindowPromise
;
let
toolbars
=
getToolbarsFromWindowChrome
(
defaultWindow
)
;
testDefaultToolbars
(
toolbars
)
;
let
features
=
"
location
=
no
personalbar
=
no
toolbar
=
no
scrollbars
=
no
menubar
=
no
status
=
no
noopener
"
;
let
popupWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
TARGET_PAGE
}
)
;
window
.
open
(
TARGET_PAGE
"
_blank
"
features
)
;
let
popupWindow
=
await
popupWindowPromise
;
let
hiddenToolbars
=
getToolbarsFromWindowChrome
(
popupWindow
)
;
testNonDefaultChromeToolbars
(
hiddenToolbars
)
;
await
BrowserTestUtils
.
closeWindow
(
defaultWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
