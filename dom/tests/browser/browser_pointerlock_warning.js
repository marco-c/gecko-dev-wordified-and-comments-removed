"
use
strict
"
;
const
TEST_URL
=
"
data
:
text
/
html
<
body
onpointerdown
=
'
this
.
requestPointerLock
(
)
'
style
=
'
width
:
100px
;
height
:
100px
;
'
>
<
/
body
>
"
;
add_task
(
async
function
show_pointerlock_warning_escape
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
warning
=
document
.
getElementById
(
"
pointerlock
-
warning
"
)
;
let
warningShownPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
onscreen
"
warning
"
true
"
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
4
4
{
}
tab
.
linkedBrowser
)
;
await
warningShownPromise
;
ok
(
true
"
Pointerlock
warning
shown
"
)
;
let
warningHiddenPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
hidden
"
warning
"
true
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
warningHiddenPromise
;
ok
(
true
"
Pointerlock
warning
hidden
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
pointerLockElement
null
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
show_pointerlock_warning_timeout
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
warning
=
document
.
getElementById
(
"
pointerlock
-
warning
"
)
;
let
warningShownPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
onscreen
"
warning
"
true
"
)
;
let
warningHiddenPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
hidden
"
warning
"
true
"
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
4
4
{
}
tab
.
linkedBrowser
)
;
await
warningShownPromise
;
ok
(
true
"
Pointerlock
warning
shown
"
)
;
await
warningHiddenPromise
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
pointerLockElement
content
.
document
.
body
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
ok
(
true
"
Pointerlock
warning
hidden
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
pointerLockElement
null
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
