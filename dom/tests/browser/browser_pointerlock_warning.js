"
use
strict
"
;
const
BODY_URL
=
"
<
body
onpointerdown
=
'
this
.
requestPointerLock
(
)
'
style
=
'
width
:
100px
;
height
:
100px
;
'
>
<
/
body
>
"
;
const
TEST_URL
=
"
data
:
text
/
html
"
+
BODY_URL
;
const
FRAME_TEST_URL
=
'
data
:
text
/
html
<
body
>
<
iframe
src
=
"
http
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
'
+
encodeURI
(
BODY_URL
)
+
'
"
>
<
/
iframe
>
<
/
body
>
'
;
add_task
(
async
function
show_pointerlock_warning_escape
(
)
{
let
urls
=
[
TEST_URL
FRAME_TEST_URL
]
;
for
(
let
url
of
urls
)
{
info
(
"
Pointerlock
warning
test
for
"
+
url
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
let
warning
=
document
.
getElementById
(
"
pointerlock
-
warning
"
)
;
let
warningShownPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
onscreen
"
warning
"
true
"
)
;
let
expectedWarningText
;
let
bc
=
tab
.
linkedBrowser
.
browsingContext
;
if
(
bc
.
children
.
length
)
{
bc
=
bc
.
children
[
0
]
;
expectedWarningText
=
"
example
.
org
"
;
}
else
{
expectedWarningText
=
"
This
document
"
;
}
expectedWarningText
+
=
"
has
control
of
your
pointer
.
Press
Esc
to
take
back
control
.
"
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
4
4
{
}
bc
)
;
await
warningShownPromise
;
ok
(
true
"
Pointerlock
warning
shown
"
)
;
let
warningHiddenPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
hidden
"
warning
"
"
)
;
is
(
warning
.
innerText
expectedWarningText
"
Warning
text
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
warningHiddenPromise
;
ok
(
true
"
Pointerlock
warning
hidden
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
pointerLockElement
null
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
