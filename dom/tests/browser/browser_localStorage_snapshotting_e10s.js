const
HELPER_PAGE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
page_localstorage_snapshotting_e10s
.
html
"
;
const
HELPER_PAGE_ORIGIN
=
"
http
:
/
/
example
.
com
/
"
;
let
testDir
=
gTestPath
.
substr
(
0
gTestPath
.
lastIndexOf
(
"
/
"
)
)
;
Services
.
scriptloader
.
loadSubScript
(
testDir
+
"
/
helper_localStorage_e10s
.
js
"
this
)
;
function
clearOrigin
(
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
HELPER_PAGE_ORIGIN
)
;
let
request
=
Services
.
qms
.
clearStoragesForPrincipal
(
principal
"
default
"
"
ls
"
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
request
.
callback
=
(
)
=
>
{
resolve
(
)
;
}
;
}
)
;
return
promise
;
}
async
function
applyMutations
(
knownTab
mutations
)
{
await
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
mutations
function
(
mutations
)
{
return
content
.
wrappedJSObject
.
applyMutations
(
Cu
.
cloneInto
(
mutations
content
)
)
;
}
)
;
}
async
function
verifyState
(
knownTab
expectedState
)
{
let
actualState
=
await
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
{
}
function
(
)
{
return
content
.
wrappedJSObject
.
getState
(
)
;
}
)
;
for
(
let
[
expectedKey
expectedValue
]
of
Object
.
entries
(
expectedState
)
)
{
ok
(
actualState
.
hasOwnProperty
(
expectedKey
)
"
key
present
:
"
+
expectedKey
)
;
is
(
actualState
[
expectedKey
]
expectedValue
"
value
correct
"
)
;
}
for
(
let
actualKey
of
Object
.
keys
(
actualState
)
)
{
if
(
!
expectedState
.
hasOwnProperty
(
actualKey
)
)
{
ok
(
false
"
actual
state
has
key
it
shouldn
'
t
have
:
"
+
actualKey
)
;
}
}
}
async
function
getKeys
(
knownTab
)
{
let
keys
=
await
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
null
function
(
)
{
return
content
.
wrappedJSObject
.
getKeys
(
)
;
}
)
;
return
keys
;
}
async
function
beginExplicitSnapshot
(
knownTab
)
{
await
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
null
function
(
)
{
return
content
.
wrappedJSObject
.
beginExplicitSnapshot
(
)
;
}
)
;
}
async
function
endExplicitSnapshot
(
knownTab
)
{
await
ContentTask
.
spawn
(
knownTab
.
tab
.
linkedBrowser
null
function
(
)
{
return
content
.
wrappedJSObject
.
endExplicitSnapshot
(
)
;
}
)
;
}
requestLongerTimeout
(
4
)
;
add_task
(
async
function
(
)
{
if
(
!
Services
.
lsm
.
nextGenLocalStorageEnabled
)
{
ok
(
true
"
Test
ignored
when
the
next
gen
local
storage
is
not
enabled
.
"
)
;
return
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
storage
.
testing
"
true
]
]
}
)
;
await
clearOrigin
(
)
;
const
knownTabs
=
new
KnownTabs
(
)
;
const
writerTab1
=
await
openTestTabInOwnProcess
(
HELPER_PAGE_URL
"
writer1
"
knownTabs
)
;
const
writerTab2
=
await
openTestTabInOwnProcess
(
HELPER_PAGE_URL
"
writer2
"
knownTabs
)
;
const
readerTab1
=
await
openTestTabInOwnProcess
(
HELPER_PAGE_URL
"
reader1
"
knownTabs
)
;
const
readerTab2
=
await
openTestTabInOwnProcess
(
HELPER_PAGE_URL
"
reader2
"
knownTabs
)
;
const
initialMutations
=
[
[
null
null
]
[
"
key1
"
"
initial1
"
]
[
"
key2
"
"
initial2
"
]
[
"
key3
"
"
initial3
"
]
[
"
key5
"
"
initial5
"
]
[
"
key6
"
"
initial6
"
]
[
"
key7
"
"
initial7
"
]
[
"
key8
"
"
initial8
"
]
]
;
const
initialState
=
{
key1
:
"
initial1
"
key2
:
"
initial2
"
key3
:
"
initial3
"
key5
:
"
initial5
"
key6
:
"
initial6
"
key7
:
"
initial7
"
key8
:
"
initial8
"
}
;
function
getPartialPrefill
(
)
{
let
size
=
0
;
let
entries
=
Object
.
entries
(
initialState
)
;
for
(
let
i
=
0
;
i
<
entries
.
length
/
2
;
i
+
+
)
{
let
entry
=
entries
[
i
]
;
size
+
=
entry
[
0
]
.
length
+
entry
[
1
]
.
length
;
}
return
size
;
}
const
prefillValues
=
[
0
getPartialPrefill
(
)
-
1
]
;
for
(
let
prefillValue
of
prefillValues
)
{
info
(
"
Setting
prefill
value
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
storage
.
snapshot_prefill
"
prefillValue
]
]
}
)
;
info
(
"
Stage
1
"
)
;
const
setRemoveMutations1
=
[
[
"
key0
"
"
setRemove10
"
]
[
"
key1
"
"
setRemove11
"
]
[
"
key2
"
null
]
[
"
key3
"
"
setRemove13
"
]
[
"
key4
"
"
setRemove14
"
]
[
"
key5
"
"
setRemove15
"
]
[
"
key6
"
"
setRemove16
"
]
[
"
key7
"
"
setRemove17
"
]
[
"
key8
"
null
]
[
"
key9
"
"
setRemove19
"
]
]
;
const
setRemoveState1
=
{
key0
:
"
setRemove10
"
key1
:
"
setRemove11
"
key3
:
"
setRemove13
"
key4
:
"
setRemove14
"
key5
:
"
setRemove15
"
key6
:
"
setRemove16
"
key7
:
"
setRemove17
"
key9
:
"
setRemove19
"
}
;
const
setRemoveMutations2
=
[
[
"
key0
"
"
setRemove20
"
]
[
"
key1
"
null
]
[
"
key2
"
"
setRemove22
"
]
[
"
key3
"
"
setRemove23
"
]
[
"
key4
"
"
setRemove24
"
]
[
"
key5
"
"
setRemove25
"
]
[
"
key6
"
"
setRemove26
"
]
[
"
key7
"
null
]
[
"
key8
"
"
setRemove28
"
]
[
"
key9
"
"
setRemove29
"
]
]
;
const
setRemoveState2
=
{
key0
:
"
setRemove20
"
key2
:
"
setRemove22
"
key3
:
"
setRemove23
"
key4
:
"
setRemove24
"
key5
:
"
setRemove25
"
key6
:
"
setRemove26
"
key8
:
"
setRemove28
"
key9
:
"
setRemove29
"
}
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
applyMutations
(
writerTab1
initialMutations
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
writerTab2
)
;
await
beginExplicitSnapshot
(
readerTab1
)
;
await
applyMutations
(
writerTab1
setRemoveMutations1
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
readerTab2
)
;
await
applyMutations
(
writerTab2
setRemoveMutations2
)
;
await
endExplicitSnapshot
(
writerTab2
)
;
await
verifyState
(
readerTab1
initialState
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
await
verifyState
(
readerTab2
setRemoveState1
)
;
await
endExplicitSnapshot
(
readerTab2
)
;
await
beginExplicitSnapshot
(
readerTab1
)
;
await
verifyState
(
readerTab1
setRemoveState2
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
info
(
"
Stage
2
"
)
;
const
setRemoveClearMutations1
=
[
[
"
key0
"
"
setRemoveClear10
"
]
[
"
key1
"
null
]
[
null
null
]
]
;
const
setRemoveClearState1
=
{
}
;
const
setRemoveClearMutations2
=
[
[
"
key8
"
null
]
[
"
key9
"
"
setRemoveClear29
"
]
[
null
null
]
]
;
const
setRemoveClearState2
=
{
}
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
applyMutations
(
writerTab1
initialMutations
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
writerTab2
)
;
await
beginExplicitSnapshot
(
readerTab1
)
;
await
applyMutations
(
writerTab1
setRemoveClearMutations1
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
readerTab2
)
;
await
applyMutations
(
writerTab2
setRemoveClearMutations2
)
;
await
endExplicitSnapshot
(
writerTab2
)
;
await
verifyState
(
readerTab1
initialState
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
await
verifyState
(
readerTab2
setRemoveClearState1
)
;
await
endExplicitSnapshot
(
readerTab2
)
;
await
beginExplicitSnapshot
(
readerTab1
)
;
await
verifyState
(
readerTab1
setRemoveClearState2
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
info
(
"
Stage
3
"
)
;
const
changeOrderMutations
=
[
[
"
key1
"
null
]
[
"
key2
"
null
]
[
"
key3
"
null
]
[
"
key5
"
null
]
[
"
key6
"
null
]
[
"
key7
"
null
]
[
"
key8
"
null
]
[
"
key8
"
"
initial8
"
]
[
"
key7
"
"
initial7
"
]
[
"
key6
"
"
initial6
"
]
[
"
key5
"
"
initial5
"
]
[
"
key3
"
"
initial3
"
]
[
"
key2
"
"
initial2
"
]
[
"
key1
"
"
initial1
"
]
]
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
applyMutations
(
writerTab1
initialMutations
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
readerTab1
)
;
await
beginExplicitSnapshot
(
writerTab1
)
;
await
beginExplicitSnapshot
(
readerTab2
)
;
let
tab1Keys
=
await
getKeys
(
readerTab1
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
await
applyMutations
(
writerTab1
changeOrderMutations
)
;
await
endExplicitSnapshot
(
writerTab1
)
;
let
tab2Keys
=
await
getKeys
(
readerTab2
)
;
await
endExplicitSnapshot
(
readerTab2
)
;
is
(
tab2Keys
.
length
tab1Keys
.
length
"
Correct
keys
length
"
)
;
for
(
let
i
=
0
;
i
<
tab2Keys
.
length
;
i
+
+
)
{
is
(
tab2Keys
[
i
]
tab1Keys
[
i
]
"
Correct
key
"
)
;
}
await
beginExplicitSnapshot
(
readerTab1
)
;
await
verifyState
(
readerTab1
initialState
)
;
await
endExplicitSnapshot
(
readerTab1
)
;
}
await
cleanupTabs
(
knownTabs
)
;
clearOrigin
(
)
;
}
)
;
