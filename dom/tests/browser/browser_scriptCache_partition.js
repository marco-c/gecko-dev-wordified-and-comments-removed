const
TEST_SCRIPT_URL_0
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
page_scriptCache_partition
.
html
"
;
const
TEST_SCRIPT_URL_1
=
"
https
:
/
/
example
.
org
/
browser
/
dom
/
tests
/
browser
/
page_scriptCache_partition
.
html
"
;
const
TEST_MODULE_URL_0
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
page_scriptCache_partition_module
.
html
"
;
const
TEST_MODULE_URL_1
=
"
https
:
/
/
example
.
org
/
browser
/
dom
/
tests
/
browser
/
page_scriptCache_partition_module
.
html
"
;
const
TEST_SJS_URL
=
"
https
:
/
/
example
.
net
/
browser
/
dom
/
tests
/
browser
/
counter_server
.
sjs
"
;
async
function
testScriptCacheAndPartition
(
{
enableCache
enablePartition
type
}
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
script_loader
.
navigation_cache
"
enableCache
]
[
"
privacy
.
partition
.
network_state
"
enablePartition
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
SpecialPowers
.
popPrefEnv
(
)
)
;
const
response1
=
await
fetch
(
TEST_SJS_URL
+
"
?
reset
"
)
;
is
(
await
response1
.
text
(
)
"
reset
"
"
Server
state
should
be
reset
"
)
;
ChromeUtils
.
clearResourceCache
(
)
;
Services
.
cache2
.
clear
(
)
;
async
function
getCounter
(
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
return
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
return
content
.
document
.
body
.
getAttribute
(
"
counter
"
)
;
}
)
;
}
)
;
}
async
function
load
(
url
)
{
const
loadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
tab
.
linkedBrowser
.
loadURI
(
Services
.
io
.
newURI
(
url
)
{
triggeringPrincipal
:
tab
.
linkedBrowser
.
nodePrincipal
}
)
;
await
loadedPromise
;
}
const
url0
=
type
=
=
=
"
script
"
?
TEST_SCRIPT_URL_0
:
TEST_MODULE_URL_0
;
const
url1
=
type
=
=
=
"
script
"
?
TEST_SCRIPT_URL_1
:
TEST_MODULE_URL_1
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
url0
}
)
;
is
(
await
getCounter
(
)
"
0
"
)
;
await
load
(
url1
)
;
is
(
await
getCounter
(
)
enablePartition
?
"
1
"
:
"
0
"
)
;
await
load
(
url0
)
;
is
(
await
getCounter
(
)
"
0
"
)
;
await
load
(
url1
)
;
is
(
await
getCounter
(
)
enablePartition
?
"
1
"
:
"
0
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
testScriptNoCacheNoPartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
false
enablePartition
:
false
type
:
"
script
"
}
)
;
}
)
;
add_task
(
async
function
testScriptNoCachePartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
false
enablePartition
:
true
type
:
"
script
"
}
)
;
}
)
;
add_task
(
async
function
testScriptCacheNoPartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
true
enablePartition
:
false
type
:
"
script
"
}
)
;
}
)
;
add_task
(
async
function
testScriptCachePartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
true
enablePartition
:
true
type
:
"
script
"
}
)
;
}
)
;
add_task
(
async
function
testModuleNoCacheNoPartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
false
enablePartition
:
false
type
:
"
module
"
}
)
;
}
)
;
add_task
(
async
function
testModuleNoCachePartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
false
enablePartition
:
true
type
:
"
module
"
}
)
;
}
)
;
add_task
(
async
function
testModuleCacheNoPartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
true
enablePartition
:
false
type
:
"
module
"
}
)
;
}
)
;
add_task
(
async
function
testModuleCachePartition
(
)
{
await
testScriptCacheAndPartition
(
{
enableCache
:
true
enablePartition
:
true
type
:
"
module
"
}
)
;
}
)
;
