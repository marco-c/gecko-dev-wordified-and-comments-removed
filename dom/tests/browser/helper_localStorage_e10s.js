class
KnownTab
{
constructor
(
name
tab
)
{
this
.
name
=
name
;
this
.
tab
=
tab
;
}
cleanup
(
)
{
this
.
tab
=
null
;
}
}
class
KnownTabs
{
constructor
(
)
{
this
.
byPid
=
new
Map
(
)
;
this
.
byName
=
new
Map
(
)
;
}
cleanup
(
)
{
this
.
byPid
=
null
;
this
.
byName
=
null
;
}
}
async
function
openTestTabInOwnProcess
(
helperPageUrl
name
knownTabs
)
{
let
realUrl
=
helperPageUrl
+
"
?
"
+
encodeURIComponent
(
name
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
"
about
:
blank
"
forceNewProcess
:
true
}
)
;
let
pid
=
tab
.
linkedBrowser
.
frameLoader
.
remoteTab
.
osPid
;
ok
(
!
knownTabs
.
byName
.
has
(
name
)
"
tab
needs
its
own
name
:
"
+
name
)
;
ok
(
!
knownTabs
.
byPid
.
has
(
pid
)
"
tab
needs
to
be
in
its
own
process
:
"
+
pid
)
;
let
knownTab
=
new
KnownTab
(
name
tab
)
;
knownTabs
.
byPid
.
set
(
pid
knownTab
)
;
knownTabs
.
byName
.
set
(
name
knownTab
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
realUrl
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
is
(
tab
.
linkedBrowser
.
frameLoader
.
remoteTab
.
osPid
pid
"
still
same
pid
"
)
;
return
knownTab
;
}
async
function
cleanupTabs
(
knownTabs
)
{
for
(
let
knownTab
of
knownTabs
.
byName
.
values
(
)
)
{
BrowserTestUtils
.
removeTab
(
knownTab
.
tab
)
;
knownTab
.
cleanup
(
)
;
}
knownTabs
.
cleanup
(
)
;
}
