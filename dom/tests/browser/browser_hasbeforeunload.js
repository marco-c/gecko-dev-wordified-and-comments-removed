"
use
strict
"
;
const
PAGE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
beforeunload_test_page
.
html
"
;
function
addBeforeUnloadListeners
(
browser
howMany
=
1
frameDepth
=
0
)
{
return
controlFrameAt
(
browser
frameDepth
{
name
:
"
AddBeforeUnload
"
howMany
}
)
;
}
function
addOuterBeforeUnloadListeners
(
browser
howMany
=
1
frameDepth
=
1
)
{
if
(
frameDepth
=
=
0
)
{
throw
new
Error
(
"
When
adding
a
beforeunload
listener
on
an
outer
"
+
"
window
the
frame
you
'
re
targeting
needs
to
be
at
"
+
"
depth
>
0
.
"
)
;
}
return
controlFrameAt
(
browser
frameDepth
{
name
:
"
AddOuterBeforeUnload
"
howMany
}
)
;
}
function
removeBeforeUnloadListeners
(
browser
howMany
=
1
frameDepth
=
0
)
{
return
controlFrameAt
(
browser
frameDepth
{
name
:
"
RemoveBeforeUnload
"
howMany
}
)
;
}
function
removeOuterBeforeUnloadListeners
(
browser
howMany
=
1
frameDepth
=
1
)
{
if
(
frameDepth
=
=
0
)
{
throw
new
Error
(
"
When
removing
a
beforeunload
listener
from
an
outer
"
+
"
window
the
frame
you
'
re
targeting
needs
to
be
at
"
+
"
depth
>
0
.
"
)
;
}
return
controlFrameAt
(
browser
frameDepth
{
name
:
"
RemoveOuterBeforeUnload
"
howMany
}
)
;
}
function
navigateSubframe
(
browser
url
frameDepth
=
0
)
{
let
navigatePromise
=
controlFrameAt
(
browser
frameDepth
{
name
:
"
Navigate
"
url
}
)
;
let
subframeLoad
=
BrowserTestUtils
.
browserLoaded
(
browser
true
)
;
return
Promise
.
all
(
[
navigatePromise
subframeLoad
]
)
;
}
function
removeSubframeFrom
(
browser
frameDepth
=
0
)
{
return
controlFrameAt
(
browser
frameDepth
{
name
:
"
RemoveSubframe
"
}
)
;
}
function
controlFrameAt
(
browser
frameDepth
command
)
{
return
SpecialPowers
.
spawn
(
browser
[
{
frameDepth
command
}
]
async
function
(
args
)
{
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
let
{
command
:
contentCommand
frameDepth
:
contentFrameDepth
}
=
args
;
let
targetContent
=
content
;
let
targetSubframe
=
content
.
document
.
getElementById
(
"
subframe
"
)
;
let
currentContent
=
targetContent
;
let
currentSubframe
=
targetSubframe
;
let
depth
=
0
;
do
{
currentContent
=
currentSubframe
.
contentWindow
;
currentSubframe
=
currentContent
.
document
.
getElementById
(
"
subframe
"
)
;
depth
+
+
;
if
(
depth
=
=
contentFrameDepth
)
{
targetContent
=
currentContent
;
targetSubframe
=
currentSubframe
;
}
}
while
(
currentSubframe
)
;
switch
(
contentCommand
.
name
)
{
case
"
AddBeforeUnload
"
:
{
let
BeforeUnloader
=
targetContent
.
wrappedJSObject
.
BeforeUnloader
;
Assert
.
ok
(
BeforeUnloader
"
Found
BeforeUnloader
in
the
test
page
.
"
)
;
BeforeUnloader
.
pushInner
(
contentCommand
.
howMany
)
;
break
;
}
case
"
AddOuterBeforeUnload
"
:
{
let
BeforeUnloader
=
targetContent
.
wrappedJSObject
.
BeforeUnloader
;
Assert
.
ok
(
BeforeUnloader
"
Found
BeforeUnloader
in
the
test
page
.
"
)
;
BeforeUnloader
.
pushOuter
(
contentCommand
.
howMany
)
;
break
;
}
case
"
RemoveBeforeUnload
"
:
{
let
BeforeUnloader
=
targetContent
.
wrappedJSObject
.
BeforeUnloader
;
Assert
.
ok
(
BeforeUnloader
"
Found
BeforeUnloader
in
the
test
page
.
"
)
;
BeforeUnloader
.
popInner
(
contentCommand
.
howMany
)
;
break
;
}
case
"
RemoveOuterBeforeUnload
"
:
{
let
BeforeUnloader
=
targetContent
.
wrappedJSObject
.
BeforeUnloader
;
Assert
.
ok
(
BeforeUnloader
"
Found
BeforeUnloader
in
the
test
page
.
"
)
;
BeforeUnloader
.
popOuter
(
contentCommand
.
howMany
)
;
break
;
}
case
"
Navigate
"
:
{
targetContent
.
location
=
contentCommand
.
url
;
let
destroyedOuterWindows
=
depth
-
contentFrameDepth
;
if
(
destroyedOuterWindows
)
{
await
TestUtils
.
topicObserved
(
"
outer
-
window
-
destroyed
"
(
)
=
>
{
destroyedOuterWindows
-
-
;
return
!
destroyedOuterWindows
;
}
)
;
}
break
;
}
case
"
RemoveSubframe
"
:
{
let
subframe
=
targetContent
.
document
.
getElementById
(
"
subframe
"
)
;
Assert
.
ok
(
subframe
"
Found
subframe
at
frame
depth
of
"
+
contentFrameDepth
)
;
subframe
.
remove
(
)
;
let
destroyedOuterWindows
=
depth
-
contentFrameDepth
;
if
(
destroyedOuterWindows
)
{
await
TestUtils
.
topicObserved
(
"
outer
-
window
-
destroyed
"
(
)
=
>
{
destroyedOuterWindows
-
-
;
return
!
destroyedOuterWindows
;
}
)
;
}
break
;
}
}
}
)
.
catch
(
Cu
.
reportError
)
;
}
async
function
prepareSubframes
(
browser
options
)
{
browser
.
reload
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
{
options
PAGE_URL
}
]
async
function
(
args
)
{
let
{
options
:
allSubframeOptions
PAGE_URL
:
contentPageURL
}
=
args
;
function
loadBeforeUnloadHelper
(
doc
subframeOptions
)
{
let
subframe
=
doc
.
getElementById
(
"
subframe
"
)
;
subframe
.
remove
(
)
;
if
(
subframeOptions
.
sandboxAttributes
=
=
=
null
)
{
subframe
.
removeAttribute
(
"
sandbox
"
)
;
}
else
{
subframe
.
setAttribute
(
"
sandbox
"
subframeOptions
.
sandboxAttributes
)
;
}
doc
.
body
.
appendChild
(
subframe
)
;
subframe
.
contentWindow
.
location
=
contentPageURL
;
return
ContentTaskUtils
.
waitForEvent
(
subframe
"
load
"
)
.
then
(
(
)
=
>
{
return
subframe
.
contentDocument
;
}
)
;
}
let
currentDoc
=
content
.
document
;
for
(
let
subframeOptions
of
allSubframeOptions
)
{
currentDoc
=
await
loadBeforeUnloadHelper
(
currentDoc
subframeOptions
)
;
}
}
)
;
}
function
assertHasBeforeUnload
(
browser
expected
)
{
Assert
.
equal
(
browser
.
hasBeforeUnload
expected
)
;
}
add_task
(
async
function
test_inner_window_scenarios
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
docshell
.
shistory
.
bfcache
.
ship_allow_beforeunload_listeners
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE_URL
}
async
function
(
browser
)
{
Assert
.
ok
(
browser
.
isRemoteBrowser
"
This
test
only
makes
sense
with
out
of
process
browsers
.
"
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addBeforeUnloadListeners
(
browser
3
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addBeforeUnloadListeners
(
browser
5
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
)
;
assertHasBeforeUnload
(
browser
false
)
;
BrowserTestUtils
.
loadURI
(
browser
PAGE_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
const
TOP
=
0
;
const
MIDDLE
=
1
;
const
BOTTOM
=
2
;
assertHasBeforeUnload
(
browser
false
)
;
await
addBeforeUnloadListeners
(
browser
2
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addBeforeUnloadListeners
(
browser
1
TOP
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
1
TOP
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
2
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
TOP
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
TOP
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
"
allow
-
scripts
"
}
{
sandboxAttributes
:
"
allow
-
scripts
"
}
]
)
;
await
addBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
removeBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
removeBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
"
allow
-
scripts
allow
-
modals
"
}
{
sandboxAttributes
:
"
allow
-
scripts
allow
-
modals
"
}
]
)
;
await
addBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
}
)
;
}
)
;
add_task
(
async
function
test_outer_window_scenarios
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
docshell
.
shistory
.
bfcache
.
ship_allow_beforeunload_listeners
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE_URL
}
async
function
(
browser
)
{
Assert
.
ok
(
browser
.
isRemoteBrowser
"
This
test
only
makes
sense
with
out
of
process
browsers
.
"
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
const
TOP
=
0
;
const
MIDDLE
=
1
;
const
BOTTOM
=
2
;
await
addOuterBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addOuterBeforeUnloadListeners
(
browser
5
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
TOP
)
;
assertHasBeforeUnload
(
browser
false
)
;
BrowserTestUtils
.
loadURI
(
browser
PAGE_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addOuterBeforeUnloadListeners
(
browser
7
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
7
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
addOuterBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
navigateSubframe
(
browser
"
http
:
/
/
example
.
com
"
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeSubframeFrom
(
browser
TOP
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
"
allow
-
same
-
origin
allow
-
scripts
"
}
{
sandboxAttributes
:
"
allow
-
same
-
origin
allow
-
scripts
"
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
removeOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
removeOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
"
allow
-
same
-
origin
allow
-
scripts
allow
-
modals
"
}
{
sandboxAttributes
:
"
allow
-
same
-
origin
allow
-
scripts
allow
-
modals
"
}
]
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
await
addOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
1
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
false
)
;
}
)
;
}
)
;
add_task
(
async
function
test_mixed_inner_and_outer_window_scenarios
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
docshell
.
shistory
.
bfcache
.
ship_allow_beforeunload_listeners
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE_URL
}
async
function
(
browser
)
{
Assert
.
ok
(
browser
.
isRemoteBrowser
"
This
test
only
makes
sense
with
out
of
process
browsers
.
"
)
;
assertHasBeforeUnload
(
browser
false
)
;
await
prepareSubframes
(
browser
[
{
sandboxAttributes
:
null
}
{
sandboxAttributes
:
null
}
]
)
;
const
TOP
=
0
;
const
MIDDLE
=
1
;
const
BOTTOM
=
2
;
await
addBeforeUnloadListeners
(
browser
1
TOP
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addBeforeUnloadListeners
(
browser
2
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
addOuterBeforeUnloadListeners
(
browser
7
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
5
BOTTOM
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
2
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
3
MIDDLE
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeBeforeUnloadListeners
(
browser
1
TOP
)
;
assertHasBeforeUnload
(
browser
true
)
;
await
removeOuterBeforeUnloadListeners
(
browser
7
BOTTOM
)
;
assertHasBeforeUnload
(
browser
false
)
;
}
)
;
}
)
;
