function
test
(
)
{
waitForExplicitFinish
(
)
;
let
windowsToClose
=
[
]
;
let
innerID
;
let
beforeEvents
;
let
afterEvents
;
let
storageShouldOccur
;
let
testURI
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
test
-
console
-
api
.
html
"
;
let
ConsoleAPIStorage
=
Cc
[
"
mozilla
.
org
/
consoleAPI
-
storage
;
1
"
]
.
getService
(
Ci
.
nsIConsoleAPIStorage
)
;
function
getInnerWindowId
(
aWindow
)
{
return
aWindow
.
windowGlobalChild
.
innerWindowId
;
}
function
whenNewWindowLoaded
(
aPrivate
aCallback
)
{
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
aPrivate
}
)
.
then
(
aCallback
)
;
}
function
doTest
(
aIsPrivateMode
aWindow
aCallback
)
{
BrowserTestUtils
.
browserLoaded
(
aWindow
.
gBrowser
.
selectedBrowser
)
.
then
(
(
)
=
>
{
function
observe
(
)
{
afterEvents
=
ConsoleAPIStorage
.
getEvents
(
innerID
)
;
is
(
beforeEvents
.
length
=
=
afterEvents
.
length
-
1
storageShouldOccur
"
storage
should
"
+
(
storageShouldOccur
?
"
"
:
"
not
"
)
+
"
occur
"
)
;
executeSoon
(
function
(
)
{
ConsoleAPIStorage
.
removeLogEventListener
(
observe
)
;
aCallback
(
)
;
}
)
;
}
ConsoleAPIStorage
.
addLogEventListener
(
observe
aWindow
.
document
.
nodePrincipal
)
;
aWindow
.
nativeConsole
.
log
(
"
foo
bar
baz
(
private
:
"
+
aIsPrivateMode
+
"
)
"
)
;
}
)
;
storageShouldOccur
=
true
;
innerID
=
getInnerWindowId
(
aWindow
)
;
beforeEvents
=
ConsoleAPIStorage
.
getEvents
(
innerID
)
;
BrowserTestUtils
.
startLoadingURIString
(
aWindow
.
gBrowser
.
selectedBrowser
testURI
)
;
}
function
testOnWindow
(
aPrivate
aCallback
)
{
whenNewWindowLoaded
(
aPrivate
function
(
aWin
)
{
windowsToClose
.
push
(
aWin
)
;
executeSoon
(
(
)
=
>
aCallback
(
aWin
)
)
;
}
)
;
}
registerCleanupFunction
(
function
(
)
{
windowsToClose
.
forEach
(
function
(
aWin
)
{
aWin
.
close
(
)
;
}
)
;
}
)
;
testOnWindow
(
false
function
(
aWin
)
{
doTest
(
false
aWin
function
(
)
{
testOnWindow
(
true
function
(
aWin
)
{
doTest
(
true
aWin
finish
)
;
}
)
;
}
)
;
}
)
;
}
