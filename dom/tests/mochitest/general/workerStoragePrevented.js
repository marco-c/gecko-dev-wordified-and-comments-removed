function
ok
(
condition
text
)
{
if
(
!
condition
)
{
self
.
postMessage
(
"
FAILURE
:
"
+
text
)
;
}
else
{
self
.
postMessage
(
text
)
;
}
}
function
finishTest
(
)
{
self
.
postMessage
(
"
done
"
)
;
self
.
close
(
)
;
}
ok
(
typeof
self
.
localStorage
=
=
"
undefined
"
"
localStorage
should
be
undefined
"
)
;
ok
(
typeof
self
.
sessionStorage
=
=
"
undefined
"
"
sessionStorage
should
be
undefined
"
)
;
try
{
indexedDB
;
ok
(
false
"
WORKER
getting
indexedDB
should
have
thrown
"
)
;
}
catch
(
e
)
{
ok
(
true
"
WORKER
getting
indexedDB
threw
"
)
;
}
try
{
var
promise
=
caches
.
keys
(
)
;
ok
(
true
"
WORKER
getting
caches
didn
'
t
throw
"
)
;
promise
.
then
(
function
(
)
{
ok
(
false
"
WORKER
The
promise
should
have
rejected
"
)
;
workerTest
(
)
;
}
function
(
)
{
ok
(
true
"
WORKER
The
promise
was
rejected
"
)
;
workerTest
(
)
;
}
)
;
}
catch
(
e
)
{
ok
(
location
.
protocol
!
=
=
"
https
:
"
"
WORKER
getting
caches
should
not
have
thrown
"
)
;
workerTest
(
)
;
}
function
workerTest
(
)
{
if
(
location
.
hash
=
=
"
#
inner
"
)
{
finishTest
(
)
;
return
;
}
var
worker
=
new
Worker
(
"
workerStoragePrevented
.
js
#
inner
"
)
;
worker
.
addEventListener
(
"
message
"
function
(
e
)
{
if
(
e
.
data
=
=
"
done
"
)
{
finishTest
(
)
;
return
;
}
ok
(
!
e
.
data
.
match
(
/
^
FAILURE
/
)
e
.
data
+
"
(
WORKER
=
workerStoragePrevented
.
js
#
inner
)
"
)
;
}
)
;
}
