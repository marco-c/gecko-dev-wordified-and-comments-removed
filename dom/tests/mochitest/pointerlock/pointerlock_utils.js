const
{
ChromeUtils
}
=
SpecialPowers
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
var
testName
=
location
.
pathname
.
split
(
"
/
"
)
.
pop
(
)
;
window
.
ok
=
function
(
a
msg
)
{
opener
.
ok
(
a
testName
+
"
:
"
+
msg
)
;
}
;
window
.
is
=
function
(
a
b
msg
)
{
opener
.
is
(
a
b
testName
+
"
:
"
+
msg
)
;
}
;
window
.
isnot
=
function
(
a
b
msg
)
{
opener
.
isnot
(
a
b
testName
+
"
:
"
+
msg
)
;
}
;
window
.
todo
=
function
(
a
msg
)
{
opener
.
todo
(
a
testName
+
"
:
"
+
msg
)
;
}
;
window
.
todo_is
=
function
(
a
b
msg
)
{
opener
.
todo_is
(
a
b
testName
+
"
:
"
+
msg
)
;
}
;
window
.
todo_isnot
=
function
(
a
b
msg
)
{
opener
.
todo_isnot
(
a
b
testName
+
"
:
"
+
msg
)
;
}
;
window
.
info
=
function
(
msg
)
{
opener
.
info
(
testName
+
"
:
"
+
msg
)
;
}
;
var
SimpleTest
=
SimpleTest
|
|
{
}
;
SimpleTest
.
waitForExplicitFinish
=
function
(
)
{
dump
(
"
[
POINTERLOCK
]
Starting
"
+
testName
+
"
\
n
"
)
;
}
;
SimpleTest
.
finish
=
function
(
)
{
dump
(
"
[
POINTERLOCK
]
Finishing
"
+
testName
+
"
\
n
"
)
;
opener
.
nextTest
(
)
;
}
;
var
fullscreenChangeEnters
=
0
;
addLoadEvent
(
function
(
)
{
info
(
Resetting
fullscreen
enter
count
.
)
;
fullscreenChangeEnters
=
0
;
if
(
typeof
start
!
=
=
"
undefined
"
)
{
SimpleTest
.
executeSoon
(
start
)
;
}
}
)
;
function
inFullscreenMode
(
win
)
{
return
win
.
document
.
fullscreenElement
;
}
function
addFullscreenChangeContinuation
(
type
callback
inDoc
)
{
var
doc
=
inDoc
|
|
document
;
var
topWin
=
doc
.
defaultView
.
top
;
function
checkCondition
(
)
{
if
(
type
=
=
"
enter
"
)
{
fullscreenChangeEnters
+
+
;
return
inFullscreenMode
(
topWin
)
;
}
else
if
(
type
=
=
"
exit
"
)
{
fullscreenChangeEnters
-
-
;
return
fullscreenChangeEnters
?
inFullscreenMode
(
topWin
)
:
!
inFullscreenMode
(
topWin
)
;
}
else
{
throw
"
'
type
'
must
be
either
'
enter
'
or
'
exit
'
.
"
;
}
}
function
onFullscreenChange
(
event
)
{
doc
.
removeEventListener
(
"
fullscreenchange
"
onFullscreenChange
)
;
ok
(
checkCondition
(
)
Should
{
type
}
fullscreen
.
)
;
let
bc
=
SpecialPowers
.
wrap
(
topWin
)
.
browsingContext
;
TestUtils
.
waitForCondition
(
(
)
=
>
bc
.
isActive
"
browsingContext
should
become
active
"
)
.
catch
(
e
=
>
ok
(
false
Wait
for
browsingContext
.
isActive
failed
with
{
e
}
)
)
.
finally
(
(
)
=
>
{
requestAnimationFrame
(
(
)
=
>
setTimeout
(
(
)
=
>
callback
(
event
)
0
)
0
)
;
}
)
;
}
doc
.
addEventListener
(
"
fullscreenchange
"
onFullscreenChange
)
;
}
