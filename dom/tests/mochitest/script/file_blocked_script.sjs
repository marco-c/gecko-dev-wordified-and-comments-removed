function
setGlobalState
(
data
key
)
{
x
=
{
data
QueryInterface
(
iid
)
{
return
this
;
}
}
;
x
.
wrappedJSObject
=
x
;
setObjectState
(
key
x
)
;
}
function
getGlobalState
(
key
)
{
var
data
;
getObjectState
(
key
function
(
x
)
{
data
=
x
&
&
x
.
wrappedJSObject
.
data
;
}
)
;
return
data
;
}
function
finishBlockedRequest
(
request
response
query
)
{
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
false
)
;
response
.
write
(
"
scriptLoaded
(
'
"
+
query
[
1
]
+
"
'
)
;
"
)
;
response
.
finish
(
)
;
setGlobalState
(
undefined
query
[
1
]
)
;
}
function
handleRequest
(
request
response
)
{
var
query
=
request
.
queryString
.
split
(
"
&
"
)
;
switch
(
query
[
0
]
)
{
case
"
blocked
"
:
var
alreadyUnblocked
=
getGlobalState
(
query
[
1
]
)
;
response
.
processAsync
(
)
;
if
(
alreadyUnblocked
=
=
=
true
)
{
finishBlockedRequest
(
request
response
query
)
;
}
else
{
setGlobalState
(
response
query
[
1
]
)
;
}
break
;
case
"
unblock
"
:
response
.
setStatusLine
(
request
.
httpVersion
200
"
OK
"
)
;
response
.
setHeader
(
"
Cache
-
Control
"
"
no
-
cache
"
false
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
image
/
png
"
false
)
;
response
.
write
(
"
\
x89PNG
"
)
;
var
blockedResponse
=
getGlobalState
(
query
[
1
]
)
;
if
(
blockedResponse
=
=
=
undefined
)
{
setGlobalState
(
true
query
[
1
]
)
;
}
else
if
(
typeof
blockedResponse
=
=
"
object
"
)
{
finishBlockedRequest
(
request
blockedResponse
query
)
;
}
break
;
default
:
response
.
setStatusLine
(
request
.
httpVersion
400
"
Bad
request
"
)
;
break
;
}
}
