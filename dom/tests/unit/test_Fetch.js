const
{
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
importGlobalProperties
(
[
'
fetch
'
]
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
)
;
const
BinaryInputStream
=
Components
.
Constructor
(
"
mozilla
.
org
/
binaryinputstream
;
1
"
"
nsIBinaryInputStream
"
"
setInputStream
"
)
;
var
server
;
function
getBaseUrl
(
)
{
return
"
http
:
/
/
localhost
:
"
+
server
.
identity
.
primaryPort
;
}
function
createTestData
(
testPath
)
{
return
{
testPath
:
testPath
request
:
{
headers
:
{
}
contentType
:
"
application
/
json
"
}
response
:
{
headers
:
{
}
contentType
:
"
application
/
json
"
body
:
"
{
\
"
Look
\
"
:
\
"
Success
!
\
"
}
"
status
:
200
statusText
:
"
OK
"
}
}
;
}
function
readDataFromRequest
(
aRequest
)
{
let
requestData
=
{
}
;
if
(
aRequest
.
method
=
=
"
POST
"
|
|
aRequest
.
method
=
=
"
PUT
"
)
{
if
(
aRequest
.
bodyInputStream
)
{
let
inputStream
=
new
BinaryInputStream
(
aRequest
.
bodyInputStream
)
;
let
bytes
=
[
]
;
let
available
;
while
(
(
available
=
inputStream
.
available
(
)
)
>
0
)
{
Array
.
prototype
.
push
.
apply
(
bytes
inputStream
.
readByteArray
(
available
)
)
;
}
requestData
.
body
=
String
.
fromCharCode
.
apply
(
null
bytes
)
;
requestData
.
contentType
=
aRequest
.
getHeader
(
"
Content
-
Type
"
)
;
}
}
return
requestData
;
}
function
writeDataToResponse
(
aData
aResponse
)
{
aResponse
.
setStatusLine
(
null
aData
.
status
aData
.
statusText
)
;
aResponse
.
setHeader
(
"
Content
-
Type
"
aData
.
contentType
)
;
for
(
let
header
in
aData
.
headers
)
{
aResponse
.
setHeader
(
header
aData
.
headers
[
header
]
)
;
}
aResponse
.
write
(
aData
.
body
)
;
}
add_test
(
function
test_GetData
(
)
{
do_test_pending
(
)
;
let
testData
=
createTestData
(
"
/
getData
"
)
;
let
headerNames
=
[
"
x
-
test
-
header
"
"
x
-
other
-
test
-
header
"
]
;
for
(
let
headerName
of
headerNames
)
{
testData
.
request
.
headers
[
headerName
]
=
"
test
-
value
-
for
-
"
+
headerName
;
}
server
.
registerPathHandler
(
testData
.
testPath
function
(
aRequest
aResponse
)
{
try
{
for
(
let
headerName
of
headerNames
)
{
Assert
.
equal
(
testData
.
request
.
headers
[
headerName
]
aRequest
.
getHeader
(
headerName
)
)
;
}
writeDataToResponse
(
testData
.
response
aResponse
)
;
}
catch
(
e
)
{
do_report_unexpected_exception
(
e
)
;
}
}
)
;
fetch
(
getBaseUrl
(
)
+
testData
.
testPath
{
headers
:
testData
.
request
.
headers
}
)
.
then
(
function
(
response
)
{
Assert
.
ok
(
response
.
ok
)
;
Assert
.
equal
(
response
.
status
testData
.
response
.
status
)
;
Assert
.
equal
(
response
.
statusText
testData
.
response
.
statusText
)
;
Assert
.
equal
(
response
.
headers
.
get
(
"
Content
-
Type
"
)
testData
.
response
.
contentType
)
;
Assert
.
equal
(
response
.
headers
.
get
(
"
content
-
type
"
)
testData
.
response
.
contentType
)
;
response
.
text
(
)
.
then
(
function
(
text
)
{
Assert
.
equal
(
text
testData
.
response
.
body
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
.
catch
(
function
(
e
)
{
do_report_unexpected_exception
(
e
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_GetDataNoInit
(
)
{
do_test_pending
(
)
;
let
testData
=
createTestData
(
"
/
getData
"
)
;
server
.
registerPathHandler
(
testData
.
testPath
function
(
aRequest
aResponse
)
{
try
{
writeDataToResponse
(
testData
.
response
aResponse
)
;
}
catch
(
e
)
{
do_report_unexpected_exception
(
e
)
;
}
}
)
;
fetch
(
getBaseUrl
(
)
+
testData
.
testPath
{
headers
:
testData
.
request
.
headers
}
)
.
then
(
function
(
response
)
{
Assert
.
ok
(
response
.
ok
)
;
Assert
.
equal
(
response
.
status
testData
.
response
.
status
)
;
response
.
text
(
)
.
then
(
function
(
text
)
{
Assert
.
equal
(
text
testData
.
response
.
body
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
.
catch
(
function
(
e
)
{
do_report_unexpected_exception
(
e
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_get40x
(
)
{
do_test_pending
(
)
;
let
notFoundData
=
createTestData
(
"
/
getNotFound
"
)
;
notFoundData
.
response
.
status
=
404
;
notFoundData
.
response
.
statusText
=
"
Not
found
"
;
notFoundData
.
response
.
body
=
null
;
fetch
(
getBaseUrl
(
)
+
notFoundData
.
testPath
)
.
then
(
function
(
response
)
{
Assert
.
equal
(
response
.
status
404
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_get50x
(
)
{
do_test_pending
(
)
;
let
serverErrorData
=
createTestData
(
"
/
serverError
"
)
;
serverErrorData
.
response
.
status
=
500
;
serverErrorData
.
response
.
statusText
=
"
The
server
broke
"
;
serverErrorData
.
response
.
body
=
null
;
server
.
registerPathHandler
(
serverErrorData
.
testPath
function
(
aRequest
aResponse
)
{
try
{
writeDataToResponse
(
serverErrorData
.
response
aResponse
)
;
}
catch
(
e
)
{
do_report_unexpected_exception
(
e
)
;
}
}
)
;
fetch
(
getBaseUrl
(
)
+
serverErrorData
.
testPath
)
.
then
(
function
(
response
)
{
Assert
.
equal
(
response
.
status
500
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_getTestFailedConnect
(
)
{
do_test_pending
(
)
;
fetch
(
"
http
:
/
/
localhost
:
4
/
should
/
fail
"
)
.
then
(
response
=
>
{
do_throw
(
"
Request
should
not
succeed
"
)
;
}
)
.
catch
(
err
=
>
{
Assert
.
equal
(
true
err
instanceof
TypeError
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_mozError
(
)
{
do_test_pending
(
)
;
fetch
(
"
http
:
/
/
localhost
:
4
/
should
/
fail
"
{
mozErrors
:
true
}
)
.
then
(
response
=
>
{
do_throw
(
"
Request
should
not
succeed
"
)
;
}
)
.
catch
(
err
=
>
{
Assert
.
equal
(
err
.
result
Cr
.
NS_ERROR_CONNECTION_REFUSED
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_request_mozError
(
)
{
do_test_pending
(
)
;
const
r
=
new
Request
(
"
http
:
/
/
localhost
:
4
/
should
/
fail
"
{
mozErrors
:
true
}
)
;
fetch
(
r
)
.
then
(
response
=
>
{
do_throw
(
"
Request
should
not
succeed
"
)
;
}
)
.
catch
(
err
=
>
{
Assert
.
equal
(
err
.
result
Cr
.
NS_ERROR_CONNECTION_REFUSED
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_PostJSONData
(
)
{
do_test_pending
(
)
;
let
testData
=
createTestData
(
"
/
postJSONData
"
)
;
testData
.
request
.
body
=
"
{
\
"
foo
\
"
:
\
"
bar
\
"
}
"
;
server
.
registerPathHandler
(
testData
.
testPath
function
(
aRequest
aResponse
)
{
try
{
let
requestData
=
readDataFromRequest
(
aRequest
)
;
Assert
.
equal
(
requestData
.
body
testData
.
request
.
body
)
;
Assert
.
equal
(
requestData
.
contentType
testData
.
request
.
contentType
)
;
writeDataToResponse
(
testData
.
response
aResponse
)
;
}
catch
(
e
)
{
Assert
.
ok
(
false
)
;
}
}
)
;
fetch
(
getBaseUrl
(
)
+
testData
.
testPath
{
method
:
"
POST
"
body
:
testData
.
request
.
body
headers
:
{
'
Content
-
Type
'
:
'
application
/
json
'
}
}
)
.
then
(
function
(
aResponse
)
{
Assert
.
ok
(
aResponse
.
ok
)
;
Assert
.
equal
(
aResponse
.
status
testData
.
response
.
status
)
;
Assert
.
equal
(
aResponse
.
statusText
testData
.
response
.
statusText
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
.
catch
(
function
(
e
)
{
do_report_unexpected_exception
(
e
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
add_test
(
function
test_PostTextData
(
)
{
do_test_pending
(
)
;
let
testData
=
createTestData
(
"
/
postTextData
"
)
;
testData
.
request
.
body
=
"
A
plain
text
body
"
;
testData
.
request
.
contentType
=
"
text
/
plain
"
;
let
responseHeaderName
=
"
some
-
response
-
header
"
;
testData
.
response
.
headers
[
responseHeaderName
]
=
"
some
header
value
"
;
server
.
registerPathHandler
(
testData
.
testPath
function
(
aRequest
aResponse
)
{
try
{
let
requestData
=
readDataFromRequest
(
aRequest
)
;
Assert
.
equal
(
requestData
.
body
testData
.
request
.
body
)
;
Assert
.
equal
(
requestData
.
contentType
testData
.
request
.
contentType
)
;
writeDataToResponse
(
testData
.
response
aResponse
)
;
}
catch
(
e
)
{
Assert
.
ok
(
false
)
;
}
}
)
;
fetch
(
getBaseUrl
(
)
+
testData
.
testPath
{
method
:
"
POST
"
body
:
testData
.
request
.
body
headers
:
{
'
Content
-
Type
'
:
testData
.
request
.
contentType
}
}
)
.
then
(
function
(
aResponse
)
{
Assert
.
ok
(
aResponse
.
ok
)
;
Assert
.
equal
(
aResponse
.
status
testData
.
response
.
status
)
;
Assert
.
equal
(
aResponse
.
statusText
testData
.
response
.
statusText
)
;
Assert
.
equal
(
aResponse
.
headers
.
get
(
responseHeaderName
)
testData
.
response
.
headers
[
responseHeaderName
]
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
.
catch
(
function
(
e
)
{
do_report_unexpected_exception
(
e
)
;
do_test_finished
(
)
;
run_next_test
(
)
;
}
)
;
}
)
;
function
run_test
(
)
{
server
=
new
HttpServer
(
)
;
server
.
start
(
-
1
)
;
run_next_test
(
)
;
registerCleanupFunction
(
function
(
)
{
server
.
stop
(
function
(
)
{
}
)
;
}
)
;
}
