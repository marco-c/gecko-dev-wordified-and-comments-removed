#
ifndef
mozilla_SMILTimeContainer_h
#
define
mozilla_SMILTimeContainer_h
#
include
"
mozilla
/
dom
/
SVGAnimationElement
.
h
"
#
include
"
mozilla
/
SMILMilestone
.
h
"
#
include
"
mozilla
/
SMILTypes
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsTPriorityQueue
.
h
"
namespace
mozilla
{
class
SMILTimeValue
;
class
SMILTimeContainer
{
public
:
SMILTimeContainer
(
)
;
virtual
~
SMILTimeContainer
(
)
;
enum
{
PAUSE_BEGIN
=
1
PAUSE_SCRIPT
=
2
PAUSE_PAGEHIDE
=
4
PAUSE_USERPREF
=
8
PAUSE_IMAGE
=
16
}
;
void
Begin
(
)
;
virtual
void
Pause
(
uint32_t
aType
)
;
virtual
void
Resume
(
uint32_t
aType
)
;
bool
IsPausedByType
(
uint32_t
aType
)
const
{
return
mPauseState
&
aType
;
}
bool
IsPaused
(
)
const
{
return
mPauseState
!
=
0
;
}
SMILTime
GetCurrentTimeAsSMILTime
(
)
const
;
void
SetCurrentTime
(
SMILTime
aSeekTo
)
;
virtual
SMILTime
GetParentTime
(
)
const
;
SMILTimeValue
ContainerToParentTime
(
SMILTime
aContainerTime
)
const
;
SMILTimeValue
ParentToContainerTime
(
SMILTime
aParentTime
)
const
;
void
SyncPauseTime
(
)
;
void
Sample
(
)
;
bool
NeedsSample
(
)
const
{
return
!
mPauseState
|
|
mNeedsPauseSample
;
}
bool
NeedsRewind
(
)
const
{
return
mNeedsRewind
;
}
void
ClearNeedsRewind
(
)
{
mNeedsRewind
=
false
;
}
bool
IsSeeking
(
)
const
{
return
mIsSeeking
;
}
void
MarkSeekFinished
(
)
{
mIsSeeking
=
false
;
}
nsresult
SetParent
(
SMILTimeContainer
*
aParent
)
;
bool
AddMilestone
(
const
SMILMilestone
&
aMilestone
mozilla
:
:
dom
:
:
SVGAnimationElement
&
aElement
)
;
void
ClearMilestones
(
)
;
bool
GetNextMilestoneInParentTime
(
SMILMilestone
&
aNextMilestone
)
const
;
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
SVGAnimationElement
>
>
AnimElemArray
;
bool
PopMilestoneElementsAtMilestone
(
const
SMILMilestone
&
aMilestone
AnimElemArray
&
aMatchedElements
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
;
void
Unlink
(
)
;
protected
:
virtual
void
DoSample
(
)
{
}
virtual
nsresult
AddChild
(
SMILTimeContainer
&
aChild
)
{
return
NS_ERROR_FAILURE
;
}
virtual
void
RemoveChild
(
SMILTimeContainer
&
aChild
)
{
}
void
UpdateCurrentTime
(
)
;
void
NotifyTimeChange
(
)
;
SMILTimeContainer
*
mParent
;
SMILTime
mCurrentTime
;
SMILTime
mParentOffset
;
SMILTime
mPauseStart
;
bool
mNeedsPauseSample
;
bool
mNeedsRewind
;
bool
mIsSeeking
;
#
ifdef
DEBUG
bool
mHoldingEntries
;
#
endif
uint32_t
mPauseState
;
struct
MilestoneEntry
{
MilestoneEntry
(
const
SMILMilestone
&
aMilestone
mozilla
:
:
dom
:
:
SVGAnimationElement
&
aElement
)
:
mMilestone
(
aMilestone
)
mTimebase
(
&
aElement
)
{
}
bool
operator
<
(
const
MilestoneEntry
&
aOther
)
const
{
return
mMilestone
<
aOther
.
mMilestone
;
}
SMILMilestone
mMilestone
;
RefPtr
<
mozilla
:
:
dom
:
:
SVGAnimationElement
>
mTimebase
;
}
;
nsTPriorityQueue
<
MilestoneEntry
>
mMilestoneEntries
;
}
;
}
#
endif
