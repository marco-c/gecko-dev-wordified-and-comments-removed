#
ifndef
NS_SMILCOMPOSITOR_H_
#
define
NS_SMILCOMPOSITOR_H_
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
SMILAnimationFunction
.
h
"
#
include
"
mozilla
/
SMILCompositorTable
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
SMILTargetIdentifier
.
h
"
#
include
"
PLDHashTable
.
h
"
namespace
mozilla
{
class
SMILCompositor
:
public
PLDHashEntryHdr
{
public
:
typedef
SMILTargetIdentifier
KeyType
;
typedef
const
KeyType
&
KeyTypeRef
;
typedef
const
KeyType
*
KeyTypePointer
;
explicit
SMILCompositor
(
KeyTypePointer
aKey
)
:
mKey
(
*
aKey
)
mForceCompositing
(
false
)
{
}
SMILCompositor
(
SMILCompositor
&
&
toMove
)
:
PLDHashEntryHdr
(
std
:
:
move
(
toMove
)
)
mKey
(
std
:
:
move
(
toMove
.
mKey
)
)
mAnimationFunctions
(
std
:
:
move
(
toMove
.
mAnimationFunctions
)
)
mForceCompositing
(
false
)
{
}
~
SMILCompositor
(
)
{
}
KeyTypeRef
GetKey
(
)
const
{
return
mKey
;
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
;
static
KeyTypePointer
KeyToPointer
(
KeyTypeRef
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
;
enum
{
ALLOW_MEMMOVE
=
false
}
;
void
AddAnimationFunction
(
SMILAnimationFunction
*
aFunc
)
;
void
ComposeAttribute
(
bool
&
aMightHavePendingStyleUpdates
)
;
void
ClearAnimationEffects
(
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
;
void
ToggleForceCompositing
(
)
{
mForceCompositing
=
true
;
}
void
StealCachedBaseValue
(
SMILCompositor
*
aOther
)
{
mCachedBaseValue
=
std
:
:
move
(
aOther
-
>
mCachedBaseValue
)
;
}
private
:
UniquePtr
<
nsISMILAttr
>
CreateSMILAttr
(
ComputedStyle
*
aBaseComputedStyle
)
;
nsCSSPropertyID
GetCSSPropertyToAnimate
(
)
const
;
bool
MightNeedBaseStyle
(
)
const
;
uint32_t
GetFirstFuncToAffectSandwich
(
)
;
void
UpdateCachedBaseValue
(
const
nsSMILValue
&
aBaseValue
)
;
KeyType
mKey
;
nsTArray
<
SMILAnimationFunction
*
>
mAnimationFunctions
;
bool
mForceCompositing
;
nsSMILValue
mCachedBaseValue
;
}
;
}
#
endif
