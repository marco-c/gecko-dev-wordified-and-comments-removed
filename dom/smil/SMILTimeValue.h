#
ifndef
DOM_SMIL_SMILTIMEVALUE_H_
#
define
DOM_SMIL_SMILTIMEVALUE_H_
#
include
"
mozilla
/
SMILTypes
.
h
"
#
include
"
nsDebug
.
h
"
namespace
mozilla
{
class
SMILTimeValue
{
public
:
SMILTimeValue
(
)
:
mMilliseconds
(
kUnresolvedMillis
)
mState
(
STATE_UNRESOLVED
)
{
}
explicit
SMILTimeValue
(
SMILTime
aMillis
)
:
mMilliseconds
(
aMillis
)
mState
(
STATE_DEFINITE
)
{
}
static
SMILTimeValue
Indefinite
(
)
{
SMILTimeValue
value
;
value
.
SetIndefinite
(
)
;
return
value
;
}
static
SMILTimeValue
Zero
(
)
{
return
SMILTimeValue
(
SMILTime
(
0L
)
)
;
}
bool
IsIndefinite
(
)
const
{
return
mState
=
=
STATE_INDEFINITE
;
}
void
SetIndefinite
(
)
{
mState
=
STATE_INDEFINITE
;
mMilliseconds
=
kUnresolvedMillis
;
}
bool
IsResolved
(
)
const
{
return
mState
!
=
STATE_UNRESOLVED
;
}
void
SetUnresolved
(
)
{
mState
=
STATE_UNRESOLVED
;
mMilliseconds
=
kUnresolvedMillis
;
}
bool
IsDefinite
(
)
const
{
return
mState
=
=
STATE_DEFINITE
;
}
SMILTime
GetMillis
(
)
const
{
MOZ_ASSERT
(
mState
=
=
STATE_DEFINITE
"
GetMillis
(
)
called
for
unresolved
or
indefinite
time
"
)
;
return
mState
=
=
STATE_DEFINITE
?
mMilliseconds
:
kUnresolvedMillis
;
}
bool
IsZero
(
)
const
{
return
mState
=
=
STATE_DEFINITE
?
mMilliseconds
=
=
0
:
false
;
}
void
SetMillis
(
SMILTime
aMillis
)
{
mState
=
STATE_DEFINITE
;
mMilliseconds
=
aMillis
;
}
enum
class
Rounding
:
uint8_t
{
EnsureNonZero
Nearest
}
;
void
SetMillis
(
double
aMillis
Rounding
aRounding
)
;
int8_t
CompareTo
(
const
SMILTimeValue
&
aOther
)
const
;
bool
operator
=
=
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
=
=
0
;
}
bool
operator
!
=
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
!
=
0
;
}
bool
operator
<
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
<
0
;
}
bool
operator
>
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
>
0
;
}
bool
operator
<
=
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
<
=
0
;
}
bool
operator
>
=
(
const
SMILTimeValue
&
aOther
)
const
{
return
CompareTo
(
aOther
)
>
=
0
;
}
private
:
static
const
SMILTime
kUnresolvedMillis
;
SMILTime
mMilliseconds
;
enum
{
STATE_DEFINITE
STATE_INDEFINITE
STATE_UNRESOLVED
}
mState
;
}
;
}
#
endif
