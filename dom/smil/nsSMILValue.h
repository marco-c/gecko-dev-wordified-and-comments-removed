#
ifndef
NS_SMILVALUE_H_
#
define
NS_SMILVALUE_H_
#
include
"
SMILType
.
h
"
#
include
"
SMILNullType
.
h
"
class
nsSMILValue
{
public
:
typedef
mozilla
:
:
SMILNullType
SMILNullType
;
typedef
mozilla
:
:
SMILType
SMILType
;
nsSMILValue
(
)
:
mU
(
)
mType
(
SMILNullType
:
:
Singleton
(
)
)
{
}
explicit
nsSMILValue
(
const
SMILType
*
aType
)
;
nsSMILValue
(
const
nsSMILValue
&
aVal
)
;
~
nsSMILValue
(
)
{
mType
-
>
Destroy
(
*
this
)
;
}
const
nsSMILValue
&
operator
=
(
const
nsSMILValue
&
aVal
)
;
nsSMILValue
(
nsSMILValue
&
&
aVal
)
;
nsSMILValue
&
operator
=
(
nsSMILValue
&
&
aVal
)
;
bool
operator
=
=
(
const
nsSMILValue
&
aVal
)
const
;
bool
operator
!
=
(
const
nsSMILValue
&
aVal
)
const
{
return
!
(
*
this
=
=
aVal
)
;
}
bool
IsNull
(
)
const
{
return
(
mType
=
=
SMILNullType
:
:
Singleton
(
)
)
;
}
nsresult
Add
(
const
nsSMILValue
&
aValueToAdd
uint32_t
aCount
=
1
)
;
nsresult
SandwichAdd
(
const
nsSMILValue
&
aValueToAdd
)
;
nsresult
ComputeDistance
(
const
nsSMILValue
&
aTo
double
&
aDistance
)
const
;
nsresult
Interpolate
(
const
nsSMILValue
&
aEndVal
double
aUnitDistance
nsSMILValue
&
aResult
)
const
;
union
{
bool
mBool
;
uint64_t
mUint
;
int64_t
mInt
;
double
mDouble
;
struct
{
float
mAngle
;
uint16_t
mUnit
;
uint16_t
mOrientType
;
}
mOrient
;
int32_t
mIntPair
[
2
]
;
float
mNumberPair
[
2
]
;
void
*
mPtr
;
}
mU
;
const
SMILType
*
mType
;
protected
:
void
InitAndCheckPostcondition
(
const
SMILType
*
aNewType
)
;
void
DestroyAndCheckPostcondition
(
)
;
void
DestroyAndReinit
(
const
SMILType
*
aNewType
)
;
}
;
#
endif
