#
ifndef
DOM_SMIL_SMILCSSVALUETYPE_H_
#
define
DOM_SMIL_SMILCSSVALUETYPE_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILType
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
struct
AnimationValue
;
class
DeclarationBlock
;
namespace
dom
{
class
Element
;
}
class
SMILCSSValueType
:
public
SMILType
{
public
:
static
SMILCSSValueType
sSingleton
;
protected
:
void
InitValue
(
SMILValue
&
aValue
)
const
override
;
void
DestroyValue
(
SMILValue
&
)
const
override
;
nsresult
Assign
(
SMILValue
&
aDest
const
SMILValue
&
aSrc
)
const
override
;
bool
IsEqual
(
const
SMILValue
&
aLeft
const
SMILValue
&
aRight
)
const
override
;
nsresult
Add
(
SMILValue
&
aDest
const
SMILValue
&
aValueToAdd
uint32_t
aCount
)
const
override
;
nsresult
SandwichAdd
(
SMILValue
&
aDest
const
SMILValue
&
aValueToAdd
)
const
override
;
nsresult
ComputeDistance
(
const
SMILValue
&
aFrom
const
SMILValue
&
aTo
double
&
aDistance
)
const
override
;
nsresult
Interpolate
(
const
SMILValue
&
aStartVal
const
SMILValue
&
aEndVal
double
aUnitDistance
SMILValue
&
aResult
)
const
override
;
public
:
static
void
ValueFromString
(
nsCSSPropertyID
aPropID
dom
:
:
Element
*
aTargetElement
const
nsAString
&
aString
SMILValue
&
aValue
bool
*
aIsContextSensitive
)
;
static
SMILValue
ValueFromAnimationValue
(
nsCSSPropertyID
aPropID
dom
:
:
Element
*
aTargetElement
const
AnimationValue
&
aValue
)
;
static
bool
SetPropertyValues
(
nsCSSPropertyID
const
SMILValue
&
mozilla
:
:
DeclarationBlock
&
)
;
static
nsCSSPropertyID
PropertyFromValue
(
const
SMILValue
&
aValue
)
;
static
void
FinalizeValue
(
SMILValue
&
aValue
const
SMILValue
&
aValueToMatch
)
;
private
:
constexpr
SMILCSSValueType
(
)
=
default
;
}
;
}
#
endif
