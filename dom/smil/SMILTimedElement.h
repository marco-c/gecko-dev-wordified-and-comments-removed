#
ifndef
DOM_SMIL_SMILTIMEDELEMENT_H_
#
define
DOM_SMIL_SMILTIMEDELEMENT_H_
#
include
<
utility
>
#
include
<
limits
>
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
SMILInstanceTime
.
h
"
#
include
"
mozilla
/
SMILInterval
.
h
"
#
include
"
mozilla
/
SMILMilestone
.
h
"
#
include
"
mozilla
/
SMILRepeatCount
.
h
"
#
include
"
mozilla
/
SMILTimeValueSpec
.
h
"
#
include
"
mozilla
/
SMILTypes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsAtom
;
namespace
mozilla
{
class
SMILAnimationFunction
;
class
SMILTimeContainer
;
class
SMILTimeValue
;
namespace
dom
{
class
SVGAnimationElement
;
}
class
SMILTimedElement
{
public
:
SMILTimedElement
(
)
;
~
SMILTimedElement
(
)
;
using
Element
=
dom
:
:
Element
;
using
DiscardArray
=
nsTObserverArray
<
RefPtr
<
Element
>
>
;
void
SetAnimationElement
(
mozilla
:
:
dom
:
:
SVGAnimationElement
*
aElement
)
;
SMILTimeContainer
*
GetTimeContainer
(
)
;
Element
*
GetTargetElement
(
)
;
nsresult
BeginElementAt
(
double
aOffsetSeconds
)
;
nsresult
EndElementAt
(
double
aOffsetSeconds
)
;
SMILTimeValue
GetStartTime
(
)
const
;
SMILTimeValue
GetSimpleDuration
(
)
const
{
return
mSimpleDur
;
}
SMILTimeValue
GetHyperlinkTime
(
)
const
;
void
AddInstanceTime
(
SMILInstanceTime
*
aInstanceTime
bool
aIsBegin
)
;
void
UpdateInstanceTime
(
SMILInstanceTime
*
aInstanceTime
SMILTimeValue
&
aUpdatedTime
bool
aIsBegin
)
;
void
RemoveInstanceTime
(
SMILInstanceTime
*
aInstanceTime
bool
aIsBegin
)
;
void
RemoveInstanceTimesForCreator
(
const
SMILTimeValueSpec
*
aCreator
bool
aIsBegin
)
;
void
SetTimeClient
(
SMILAnimationFunction
*
aClient
)
;
void
SampleAt
(
SMILTime
aContainerTime
DiscardArray
&
aDiscards
)
;
void
SampleEndAt
(
SMILTime
aContainerTime
DiscardArray
&
aDiscards
)
;
void
HandleContainerTimeChange
(
)
;
void
Rewind
(
)
;
bool
SetIsDisabled
(
bool
aIsDisabled
)
;
bool
SetAttr
(
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
Element
&
aContextElement
nsresult
*
aParseResult
=
nullptr
)
;
bool
UnsetAttr
(
nsAtom
*
aAttribute
)
;
void
AddDependent
(
SMILTimeValueSpec
&
aDependent
)
;
void
RemoveDependent
(
SMILTimeValueSpec
&
aDependent
)
;
bool
IsTimeDependent
(
const
SMILTimedElement
&
aOther
)
const
;
void
BindToTree
(
Element
&
aContextElement
)
;
void
HandleTargetElementChange
(
Element
*
aNewTarget
)
;
void
DissolveReferences
(
)
{
Unlink
(
)
;
}
void
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
;
void
Unlink
(
)
;
using
RemovalTestFunction
=
bool
(
*
)
(
SMILInstanceTime
*
aInstance
)
;
protected
:
using
TimeValueSpecList
=
nsTArray
<
UniquePtr
<
SMILTimeValueSpec
>
>
;
using
InstanceTimeList
=
nsTArray
<
RefPtr
<
SMILInstanceTime
>
>
;
using
IntervalList
=
nsTArray
<
UniquePtr
<
SMILInterval
>
>
;
using
TimeValueSpecPtrKey
=
nsPtrHashKey
<
SMILTimeValueSpec
>
;
using
TimeValueSpecHashSet
=
nsTHashtable
<
TimeValueSpecPtrKey
>
;
class
InstanceTimeComparator
{
public
:
bool
Equals
(
const
SMILInstanceTime
*
aElem1
const
SMILInstanceTime
*
aElem2
)
const
;
bool
LessThan
(
const
SMILInstanceTime
*
aElem1
const
SMILInstanceTime
*
aElem2
)
const
;
}
;
template
<
class
TestFunctor
>
void
RemoveInstanceTimes
(
InstanceTimeList
&
aArray
TestFunctor
&
aTest
)
;
nsresult
SetBeginSpec
(
const
nsAString
&
aBeginSpec
Element
&
aContextElement
RemovalTestFunction
aRemove
)
;
nsresult
SetEndSpec
(
const
nsAString
&
aEndSpec
Element
&
aContextElement
RemovalTestFunction
aRemove
)
;
nsresult
SetSimpleDuration
(
const
nsAString
&
aDurSpec
)
;
nsresult
SetMin
(
const
nsAString
&
aMinSpec
)
;
nsresult
SetMax
(
const
nsAString
&
aMaxSpec
)
;
nsresult
SetRestart
(
const
nsAString
&
aRestartSpec
)
;
nsresult
SetRepeatCount
(
const
nsAString
&
aRepeatCountSpec
)
;
nsresult
SetRepeatDur
(
const
nsAString
&
aRepeatDurSpec
)
;
nsresult
SetFillMode
(
const
nsAString
&
aFillModeSpec
)
;
void
UnsetBeginSpec
(
RemovalTestFunction
aRemove
)
;
void
UnsetEndSpec
(
RemovalTestFunction
aRemove
)
;
void
UnsetSimpleDuration
(
)
;
void
UnsetMin
(
)
;
void
UnsetMax
(
)
;
void
UnsetRestart
(
)
;
void
UnsetRepeatCount
(
)
;
void
UnsetRepeatDur
(
)
;
void
UnsetFillMode
(
)
;
nsresult
SetBeginOrEndSpec
(
const
nsAString
&
aSpec
Element
&
aContextElement
bool
aIsBegin
RemovalTestFunction
aRemove
)
;
void
ClearSpecs
(
TimeValueSpecList
&
aSpecs
InstanceTimeList
&
aInstances
RemovalTestFunction
aRemove
)
;
void
ClearIntervals
(
)
;
void
DoSampleAt
(
SMILTime
aContainerTime
DiscardArray
&
aDiscards
bool
aEndOnly
)
;
bool
ApplyEarlyEnd
(
const
SMILTimeValue
&
aSampleTime
)
;
void
Reset
(
)
;
void
ClearTimingState
(
RemovalTestFunction
aRemove
)
;
void
RebuildTimingState
(
RemovalTestFunction
aRemove
)
;
void
DoPostSeek
(
)
;
void
UnpreserveInstanceTimes
(
InstanceTimeList
&
aList
)
;
void
FilterHistory
(
)
;
void
FilterIntervals
(
)
;
void
FilterInstanceTimes
(
InstanceTimeList
&
aList
)
;
bool
GetNextInterval
(
const
SMILInterval
*
aPrevInterval
const
SMILInterval
*
aReplacedInterval
const
SMILInstanceTime
*
aFixedBeginTime
SMILInterval
&
aResult
)
const
;
SMILInstanceTime
*
GetNextGreater
(
const
InstanceTimeList
&
aList
const
SMILTimeValue
&
aBase
int32_t
&
aPosition
)
const
;
SMILInstanceTime
*
GetNextGreaterOrEqual
(
const
InstanceTimeList
&
aList
const
SMILTimeValue
&
aBase
int32_t
&
aPosition
)
const
;
SMILTimeValue
CalcActiveEnd
(
const
SMILTimeValue
&
aBegin
const
SMILTimeValue
&
aEnd
)
const
;
SMILTimeValue
GetRepeatDuration
(
)
const
;
SMILTimeValue
ApplyMinAndMax
(
const
SMILTimeValue
&
aDuration
)
const
;
SMILTime
ActiveTimeToSimpleTime
(
SMILTime
aActiveTime
uint32_t
&
aRepeatIteration
)
;
SMILInstanceTime
*
CheckForEarlyEnd
(
const
SMILTimeValue
&
aContainerTime
)
const
;
void
UpdateCurrentInterval
(
bool
aForceChangeNotice
=
false
)
;
void
SampleSimpleTime
(
SMILTime
aActiveTime
)
;
void
SampleFillValue
(
)
;
void
AddInstanceTimeFromCurrentTime
(
SMILTime
aCurrentTime
double
aOffsetSeconds
bool
aIsBegin
)
;
void
RegisterMilestone
(
)
;
bool
GetNextMilestone
(
SMILMilestone
&
aNextMilestone
)
const
;
void
NotifyNewInterval
(
)
;
void
NotifyChangedInterval
(
SMILInterval
*
aInterval
bool
aBeginObjectChanged
bool
aEndObjectChanged
)
;
void
FireTimeEventAsync
(
EventMessage
aMsg
int32_t
aDetail
)
;
const
SMILInstanceTime
*
GetEffectiveBeginInstance
(
)
const
;
const
SMILInterval
*
GetPreviousInterval
(
)
const
;
bool
HasPlayed
(
)
const
{
return
!
mOldIntervals
.
IsEmpty
(
)
;
}
bool
HasClientInFillRange
(
)
const
;
bool
EndHasEventConditions
(
)
const
;
bool
AreEndTimesDependentOn
(
const
SMILInstanceTime
*
aBase
)
const
;
void
ResetCurrentInterval
(
)
{
if
(
mCurrentInterval
)
{
auto
interval
=
std
:
:
move
(
mCurrentInterval
)
;
interval
-
>
Unlink
(
)
;
}
}
mozilla
:
:
dom
:
:
SVGAnimationElement
*
mAnimationElement
;
TimeValueSpecList
mBeginSpecs
;
TimeValueSpecList
mEndSpecs
;
SMILTimeValue
mSimpleDur
;
SMILRepeatCount
mRepeatCount
;
SMILTimeValue
mRepeatDur
;
SMILTimeValue
mMin
;
SMILTimeValue
mMax
;
enum
SMILFillMode
:
uint8_t
{
FILL_REMOVE
FILL_FREEZE
}
;
SMILFillMode
mFillMode
;
static
const
nsAttrValue
:
:
EnumTable
sFillModeTable
[
]
;
enum
SMILRestartMode
:
uint8_t
{
RESTART_ALWAYS
RESTART_WHENNOTACTIVE
RESTART_NEVER
}
;
SMILRestartMode
mRestartMode
;
static
const
nsAttrValue
:
:
EnumTable
sRestartModeTable
[
]
;
InstanceTimeList
mBeginInstances
;
InstanceTimeList
mEndInstances
;
uint32_t
mInstanceSerialIndex
;
SMILAnimationFunction
*
mClient
;
UniquePtr
<
SMILInterval
>
mCurrentInterval
;
IntervalList
mOldIntervals
;
uint32_t
mCurrentRepeatIteration
;
SMILMilestone
mPrevRegisteredMilestone
;
static
constexpr
SMILMilestone
sMaxMilestone
=
{
std
:
:
numeric_limits
<
SMILTime
>
:
:
max
(
)
false
}
;
static
const
uint8_t
sMaxNumIntervals
;
static
const
uint8_t
sMaxNumInstanceTimes
;
TimeValueSpecHashSet
mTimeDependents
;
enum
SMILElementState
{
STATE_STARTUP
STATE_WAITING
STATE_ACTIVE
STATE_POSTACTIVE
}
;
SMILElementState
mElementState
;
enum
SMILSeekState
{
SEEK_NOT_SEEKING
SEEK_FORWARD_FROM_ACTIVE
SEEK_FORWARD_FROM_INACTIVE
SEEK_BACKWARD_FROM_ACTIVE
SEEK_BACKWARD_FROM_INACTIVE
}
;
SMILSeekState
mSeekState
;
class
AutoIntervalUpdateBatcher
;
bool
mDeferIntervalUpdates
;
bool
mDoDeferredUpdate
;
bool
mIsDisabled
;
class
AutoIntervalUpdater
;
uint8_t
mDeleteCount
;
uint8_t
mUpdateIntervalRecursionDepth
;
static
const
uint8_t
sMaxUpdateIntervalRecursionDepth
;
}
;
inline
void
ImplCycleCollectionUnlink
(
SMILTimedElement
&
aField
)
{
aField
.
Unlink
(
)
;
}
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
SMILTimedElement
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
aField
.
Traverse
(
&
aCallback
)
;
}
}
#
endif
