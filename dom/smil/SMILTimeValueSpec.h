#
ifndef
mozilla_SMILTimeValueSpec_h
#
define
mozilla_SMILTimeValueSpec_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILTimeValueSpecParams
.
h
"
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
namespace
mozilla
{
class
EventListenerManager
;
class
SMILInstanceTime
;
class
SMILInterval
;
class
SMILTimeContainer
;
class
SMILTimedElement
;
class
SMILTimeValue
;
namespace
dom
{
class
Event
;
}
class
SMILTimeValueSpec
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
dom
:
:
Event
Event
;
typedef
mozilla
:
:
dom
:
:
IDTracker
IDTracker
;
SMILTimeValueSpec
(
SMILTimedElement
&
aOwner
bool
aIsBegin
)
;
~
SMILTimeValueSpec
(
)
;
nsresult
SetSpec
(
const
nsAString
&
aStringSpec
Element
&
aContextElement
)
;
void
ResolveReferences
(
Element
&
aContextElement
)
;
bool
IsEventBased
(
)
const
;
void
HandleNewInterval
(
SMILInterval
&
aInterval
const
SMILTimeContainer
*
aSrcContainer
)
;
void
HandleTargetElementChange
(
Element
*
aNewTarget
)
;
bool
DependsOnBegin
(
)
const
;
void
HandleChangedInstanceTime
(
const
SMILInstanceTime
&
aBaseTime
const
SMILTimeContainer
*
aSrcContainer
SMILInstanceTime
&
aInstanceTimeToUpdate
bool
aObjectChanged
)
;
void
HandleDeletedInstanceTime
(
SMILInstanceTime
&
aInstanceTime
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
;
void
Unlink
(
)
;
protected
:
void
UpdateReferencedElement
(
Element
*
aFrom
Element
*
aTo
)
;
void
UnregisterFromReferencedElement
(
Element
*
aElement
)
;
SMILTimedElement
*
GetTimedElement
(
Element
*
aElement
)
;
bool
IsWhitelistedEvent
(
)
;
void
RegisterEventListener
(
Element
*
aElement
)
;
void
UnregisterEventListener
(
Element
*
aElement
)
;
void
HandleEvent
(
Event
*
aEvent
)
;
bool
CheckRepeatEventDetail
(
Event
*
aEvent
)
;
SMILTimeValue
ConvertBetweenTimeContainers
(
const
SMILTimeValue
&
aSrcTime
const
SMILTimeContainer
*
aSrcContainer
)
;
bool
ApplyOffset
(
SMILTimeValue
&
aTime
)
const
;
SMILTimedElement
*
mOwner
;
bool
mIsBegin
;
SMILTimeValueSpecParams
mParams
;
class
TimeReferenceTracker
final
:
public
IDTracker
{
public
:
explicit
TimeReferenceTracker
(
SMILTimeValueSpec
*
aOwner
)
:
mSpec
(
aOwner
)
{
}
void
ResetWithElement
(
Element
*
aTo
)
{
RefPtr
<
Element
>
from
=
get
(
)
;
Unlink
(
)
;
ElementChanged
(
from
aTo
)
;
}
protected
:
virtual
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
IDTracker
:
:
ElementChanged
(
aFrom
aTo
)
;
mSpec
-
>
UpdateReferencedElement
(
aFrom
aTo
)
;
}
virtual
bool
IsPersistent
(
)
override
{
return
true
;
}
private
:
SMILTimeValueSpec
*
mSpec
;
}
;
TimeReferenceTracker
mReferencedElement
;
class
EventListener
final
:
public
nsIDOMEventListener
{
~
EventListener
(
)
{
}
public
:
explicit
EventListener
(
SMILTimeValueSpec
*
aOwner
)
:
mSpec
(
aOwner
)
{
}
void
Disconnect
(
)
{
mSpec
=
nullptr
;
}
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
private
:
SMILTimeValueSpec
*
mSpec
;
}
;
RefPtr
<
EventListener
>
mEventListener
;
}
;
}
#
endif
