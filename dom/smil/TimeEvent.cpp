#
include
"
mozilla
/
ContentEvents
.
h
"
#
include
"
mozilla
/
dom
/
TimeEvent
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsGlobalWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
TimeEvent
:
:
TimeEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalSMILTimeEvent
*
aEvent
)
:
Event
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
InternalSMILTimeEvent
(
false
eVoidEvent
)
)
mDetail
(
mEvent
-
>
AsSMILTimeEvent
(
)
-
>
detail
)
{
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
}
if
(
mPresContext
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
mPresContext
-
>
GetDocShell
(
)
;
if
(
docShell
)
{
mView
=
docShell
-
>
GetWindow
(
)
;
}
}
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
TimeEvent
Event
mView
)
NS_IMPL_ADDREF_INHERITED
(
TimeEvent
Event
)
NS_IMPL_RELEASE_INHERITED
(
TimeEvent
Event
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
TimeEvent
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMTimeEvent
)
NS_INTERFACE_MAP_END_INHERITING
(
Event
)
NS_IMETHODIMP
TimeEvent
:
:
GetDetail
(
int32_t
*
aDetail
)
{
*
aDetail
=
mDetail
;
return
NS_OK
;
}
void
TimeEvent
:
:
InitTimeEvent
(
const
nsAString
&
aType
nsGlobalWindow
*
aView
int32_t
aDetail
)
{
Event
:
:
InitEvent
(
aType
false
false
)
;
mDetail
=
aDetail
;
mView
=
aView
?
aView
-
>
GetOuterWindow
(
)
:
nullptr
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
TimeEvent
>
NS_NewDOMTimeEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalSMILTimeEvent
*
aEvent
)
{
RefPtr
<
TimeEvent
>
it
=
new
TimeEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
