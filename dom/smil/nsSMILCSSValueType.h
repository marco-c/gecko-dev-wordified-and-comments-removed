#
ifndef
NS_SMILCSSVALUETYPE_H_
#
define
NS_SMILCSSVALUETYPE_H_
#
include
"
nsISMILType
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsAString
;
namespace
mozilla
{
struct
AnimationValue
;
namespace
dom
{
class
Element
;
}
}
class
nsSMILCSSValueType
:
public
nsISMILType
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
AnimationValue
AnimationValue
;
static
nsSMILCSSValueType
sSingleton
;
protected
:
void
Init
(
nsSMILValue
&
aValue
)
const
override
;
void
Destroy
(
nsSMILValue
&
)
const
override
;
nsresult
Assign
(
nsSMILValue
&
aDest
const
nsSMILValue
&
aSrc
)
const
override
;
bool
IsEqual
(
const
nsSMILValue
&
aLeft
const
nsSMILValue
&
aRight
)
const
override
;
nsresult
Add
(
nsSMILValue
&
aDest
const
nsSMILValue
&
aValueToAdd
uint32_t
aCount
)
const
override
;
nsresult
ComputeDistance
(
const
nsSMILValue
&
aFrom
const
nsSMILValue
&
aTo
double
&
aDistance
)
const
override
;
nsresult
Interpolate
(
const
nsSMILValue
&
aStartVal
const
nsSMILValue
&
aEndVal
double
aUnitDistance
nsSMILValue
&
aResult
)
const
override
;
public
:
static
void
ValueFromString
(
nsCSSPropertyID
aPropID
Element
*
aTargetElement
const
nsAString
&
aString
nsSMILValue
&
aValue
bool
*
aIsContextSensitive
)
;
static
nsSMILValue
ValueFromAnimationValue
(
nsCSSPropertyID
aPropID
Element
*
aTargetElement
const
AnimationValue
&
aValue
)
;
static
void
ValueToString
(
const
nsSMILValue
&
aValue
nsAString
&
aString
)
;
static
nsCSSPropertyID
PropertyFromValue
(
const
nsSMILValue
&
aValue
)
;
private
:
constexpr
nsSMILCSSValueType
(
)
{
}
}
;
#
endif
