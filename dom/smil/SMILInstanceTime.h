#
ifndef
DOM_SMIL_SMILINSTANCETIME_H_
#
define
DOM_SMIL_SMILINSTANCETIME_H_
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
SMILTimeValue
.
h
"
namespace
mozilla
{
class
SMILInterval
;
class
SMILTimeContainer
;
class
SMILTimeValueSpec
;
class
SMILInstanceTime
final
{
public
:
enum
SMILInstanceTimeSource
{
SOURCE_NONE
SOURCE_DOM
SOURCE_SYNCBASE
SOURCE_EVENT
}
;
explicit
SMILInstanceTime
(
const
SMILTimeValue
&
aTime
SMILInstanceTimeSource
aSource
=
SOURCE_NONE
SMILTimeValueSpec
*
aCreator
=
nullptr
SMILInterval
*
aBaseInterval
=
nullptr
)
;
void
Unlink
(
)
;
void
HandleChangedInterval
(
const
SMILTimeContainer
*
aSrcContainer
bool
aBeginObjectChanged
bool
aEndObjectChanged
)
;
void
HandleDeletedInterval
(
)
;
void
HandleFilteredInterval
(
)
;
const
SMILTimeValue
&
Time
(
)
const
{
return
mTime
;
}
const
SMILTimeValueSpec
*
GetCreator
(
)
const
{
return
mCreator
;
}
bool
IsDynamic
(
)
const
{
return
!
!
(
mFlags
&
kDynamic
)
;
}
bool
IsFixedTime
(
)
const
{
return
!
(
mFlags
&
kMayUpdate
)
;
}
bool
FromDOM
(
)
const
{
return
!
!
(
mFlags
&
kFromDOM
)
;
}
bool
ShouldPreserve
(
)
const
;
void
UnmarkShouldPreserve
(
)
;
void
AddRefFixedEndpoint
(
)
;
void
ReleaseFixedEndpoint
(
)
;
void
DependentUpdate
(
const
SMILTimeValue
&
aNewTime
)
{
MOZ_ASSERT
(
!
IsFixedTime
(
)
"
Updating
an
instance
time
that
is
not
expected
to
be
updated
"
)
;
mTime
=
aNewTime
;
}
bool
IsDependent
(
)
const
{
return
!
!
mBaseInterval
;
}
bool
IsDependentOn
(
const
SMILInstanceTime
&
aOther
)
const
;
const
SMILInterval
*
GetBaseInterval
(
)
const
{
return
mBaseInterval
;
}
const
SMILInstanceTime
*
GetBaseTime
(
)
const
;
bool
SameTimeAndBase
(
const
SMILInstanceTime
&
aOther
)
const
{
return
mTime
=
=
aOther
.
mTime
&
&
GetBaseTime
(
)
=
=
aOther
.
GetBaseTime
(
)
;
}
uint32_t
Serial
(
)
const
{
return
mSerial
;
}
void
SetSerial
(
uint32_t
aIndex
)
{
mSerial
=
aIndex
;
}
NS_INLINE_DECL_REFCOUNTING
(
SMILInstanceTime
)
private
:
~
SMILInstanceTime
(
)
;
void
SetBaseInterval
(
SMILInterval
*
aBaseInterval
)
;
SMILTimeValue
mTime
;
enum
{
kDynamic
=
1
kMayUpdate
=
2
kFromDOM
=
4
kWasDynamicEndpoint
=
8
}
;
uint8_t
mFlags
;
mutable
bool
mVisited
;
uint16_t
mFixedEndpointRefCnt
;
uint32_t
mSerial
;
SMILTimeValueSpec
*
mCreator
;
SMILInterval
*
mBaseInterval
;
}
;
}
#
endif
