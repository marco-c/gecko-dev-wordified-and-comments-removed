#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
SVGAnimationElement
.
h
"
#
include
"
mozilla
/
dom
/
TimeEvent
.
h
"
#
include
"
nsSMILTimeValueSpec
.
h
"
#
include
"
nsSMILInterval
.
h
"
#
include
"
nsSMILTimeContainer
.
h
"
#
include
"
nsSMILTimeValue
.
h
"
#
include
"
nsSMILTimedElement
.
h
"
#
include
"
nsSMILInstanceTime
.
h
"
#
include
"
nsSMILParserUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
<
limits
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
nsSMILTimeValueSpec
:
:
EventListener
nsIDOMEventListener
)
NS_IMETHODIMP
nsSMILTimeValueSpec
:
:
EventListener
:
:
HandleEvent
(
Event
*
aEvent
)
{
if
(
mSpec
)
{
mSpec
-
>
HandleEvent
(
aEvent
)
;
}
return
NS_OK
;
}
nsSMILTimeValueSpec
:
:
nsSMILTimeValueSpec
(
nsSMILTimedElement
&
aOwner
bool
aIsBegin
)
:
mOwner
(
&
aOwner
)
mIsBegin
(
aIsBegin
)
mReferencedElement
(
this
)
{
}
nsSMILTimeValueSpec
:
:
~
nsSMILTimeValueSpec
(
)
{
UnregisterFromReferencedElement
(
mReferencedElement
.
get
(
)
)
;
if
(
mEventListener
)
{
mEventListener
-
>
Disconnect
(
)
;
mEventListener
=
nullptr
;
}
}
nsresult
nsSMILTimeValueSpec
:
:
SetSpec
(
const
nsAString
&
aStringSpec
Element
*
aContextNode
)
{
nsSMILTimeValueSpecParams
params
;
if
(
!
nsSMILParserUtils
:
:
ParseTimeValueSpecParams
(
aStringSpec
params
)
)
return
NS_ERROR_FAILURE
;
mParams
=
params
;
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
OFFSET
|
|
(
!
mIsBegin
&
&
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
INDEFINITE
)
)
{
mOwner
-
>
AddInstanceTime
(
new
nsSMILInstanceTime
(
mParams
.
mOffset
)
mIsBegin
)
;
}
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
REPEAT
)
{
mParams
.
mEventSymbol
=
nsGkAtoms
:
:
repeatEvent
;
}
ResolveReferences
(
aContextNode
)
;
return
NS_OK
;
}
void
nsSMILTimeValueSpec
:
:
ResolveReferences
(
nsIContent
*
aContextNode
)
{
if
(
mParams
.
mType
!
=
nsSMILTimeValueSpecParams
:
:
SYNCBASE
&
&
!
IsEventBased
(
)
)
return
;
MOZ_ASSERT
(
aContextNode
"
null
context
node
for
resolving
timing
references
against
"
)
;
if
(
!
aContextNode
-
>
IsInUncomposedDoc
(
)
)
return
;
RefPtr
<
Element
>
oldReferencedElement
=
mReferencedElement
.
get
(
)
;
if
(
mParams
.
mDependentElemID
)
{
mReferencedElement
.
ResetWithID
(
aContextNode
nsDependentAtomString
(
mParams
.
mDependentElemID
)
)
;
}
else
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
EVENT
)
{
Element
*
target
=
mOwner
-
>
GetTargetElement
(
)
;
mReferencedElement
.
ResetWithElement
(
target
)
;
}
else
{
MOZ_ASSERT
(
false
"
Syncbase
or
repeat
spec
without
ID
"
)
;
}
UpdateReferencedElement
(
oldReferencedElement
mReferencedElement
.
get
(
)
)
;
}
bool
nsSMILTimeValueSpec
:
:
IsEventBased
(
)
const
{
return
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
EVENT
|
|
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
REPEAT
;
}
void
nsSMILTimeValueSpec
:
:
HandleNewInterval
(
nsSMILInterval
&
aInterval
const
nsSMILTimeContainer
*
aSrcContainer
)
{
const
nsSMILInstanceTime
&
baseInstance
=
mParams
.
mSyncBegin
?
*
aInterval
.
Begin
(
)
:
*
aInterval
.
End
(
)
;
nsSMILTimeValue
newTime
=
ConvertBetweenTimeContainers
(
baseInstance
.
Time
(
)
aSrcContainer
)
;
if
(
!
ApplyOffset
(
newTime
)
)
{
NS_WARNING
(
"
New
time
overflows
nsSMILTime
ignoring
"
)
;
return
;
}
RefPtr
<
nsSMILInstanceTime
>
newInstance
=
new
nsSMILInstanceTime
(
newTime
nsSMILInstanceTime
:
:
SOURCE_SYNCBASE
this
&
aInterval
)
;
mOwner
-
>
AddInstanceTime
(
newInstance
mIsBegin
)
;
}
void
nsSMILTimeValueSpec
:
:
HandleTargetElementChange
(
Element
*
aNewTarget
)
{
if
(
!
IsEventBased
(
)
|
|
mParams
.
mDependentElemID
)
return
;
mReferencedElement
.
ResetWithElement
(
aNewTarget
)
;
}
void
nsSMILTimeValueSpec
:
:
HandleChangedInstanceTime
(
const
nsSMILInstanceTime
&
aBaseTime
const
nsSMILTimeContainer
*
aSrcContainer
nsSMILInstanceTime
&
aInstanceTimeToUpdate
bool
aObjectChanged
)
{
if
(
aInstanceTimeToUpdate
.
IsFixedTime
(
)
)
return
;
nsSMILTimeValue
updatedTime
=
ConvertBetweenTimeContainers
(
aBaseTime
.
Time
(
)
aSrcContainer
)
;
if
(
!
ApplyOffset
(
updatedTime
)
)
{
NS_WARNING
(
"
Updated
time
overflows
nsSMILTime
ignoring
"
)
;
return
;
}
if
(
aInstanceTimeToUpdate
.
Time
(
)
!
=
updatedTime
|
|
aObjectChanged
)
{
mOwner
-
>
UpdateInstanceTime
(
&
aInstanceTimeToUpdate
updatedTime
mIsBegin
)
;
}
}
void
nsSMILTimeValueSpec
:
:
HandleDeletedInstanceTime
(
nsSMILInstanceTime
&
aInstanceTime
)
{
mOwner
-
>
RemoveInstanceTime
(
&
aInstanceTime
mIsBegin
)
;
}
bool
nsSMILTimeValueSpec
:
:
DependsOnBegin
(
)
const
{
return
mParams
.
mSyncBegin
;
}
void
nsSMILTimeValueSpec
:
:
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
{
mReferencedElement
.
Traverse
(
aCallback
)
;
}
void
nsSMILTimeValueSpec
:
:
Unlink
(
)
{
UnregisterFromReferencedElement
(
mReferencedElement
.
get
(
)
)
;
mReferencedElement
.
Unlink
(
)
;
}
void
nsSMILTimeValueSpec
:
:
UpdateReferencedElement
(
Element
*
aFrom
Element
*
aTo
)
{
if
(
aFrom
=
=
aTo
)
return
;
UnregisterFromReferencedElement
(
aFrom
)
;
switch
(
mParams
.
mType
)
{
case
nsSMILTimeValueSpecParams
:
:
SYNCBASE
:
{
nsSMILTimedElement
*
to
=
GetTimedElement
(
aTo
)
;
if
(
to
)
{
to
-
>
AddDependent
(
*
this
)
;
}
}
break
;
case
nsSMILTimeValueSpecParams
:
:
EVENT
:
case
nsSMILTimeValueSpecParams
:
:
REPEAT
:
RegisterEventListener
(
aTo
)
;
break
;
default
:
break
;
}
}
void
nsSMILTimeValueSpec
:
:
UnregisterFromReferencedElement
(
Element
*
aElement
)
{
if
(
!
aElement
)
return
;
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
SYNCBASE
)
{
nsSMILTimedElement
*
timedElement
=
GetTimedElement
(
aElement
)
;
if
(
timedElement
)
{
timedElement
-
>
RemoveDependent
(
*
this
)
;
}
mOwner
-
>
RemoveInstanceTimesForCreator
(
this
mIsBegin
)
;
}
else
if
(
IsEventBased
(
)
)
{
UnregisterEventListener
(
aElement
)
;
}
}
nsSMILTimedElement
*
nsSMILTimeValueSpec
:
:
GetTimedElement
(
Element
*
aElement
)
{
return
aElement
&
&
aElement
-
>
IsNodeOfType
(
nsINode
:
:
eANIMATION
)
?
&
static_cast
<
SVGAnimationElement
*
>
(
aElement
)
-
>
TimedElement
(
)
:
nullptr
;
}
bool
nsSMILTimeValueSpec
:
:
IsWhitelistedEvent
(
)
{
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
REPEAT
)
{
return
true
;
}
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
EVENT
&
&
(
mParams
.
mEventSymbol
=
=
nsGkAtoms
:
:
repeat
|
|
mParams
.
mEventSymbol
=
=
nsGkAtoms
:
:
repeatEvent
|
|
mParams
.
mEventSymbol
=
=
nsGkAtoms
:
:
beginEvent
|
|
mParams
.
mEventSymbol
=
=
nsGkAtoms
:
:
endEvent
)
)
{
return
true
;
}
return
false
;
}
void
nsSMILTimeValueSpec
:
:
RegisterEventListener
(
Element
*
aTarget
)
{
MOZ_ASSERT
(
IsEventBased
(
)
"
Attempting
to
register
event
-
listener
for
unexpected
"
"
nsSMILTimeValueSpec
type
"
)
;
MOZ_ASSERT
(
mParams
.
mEventSymbol
"
Attempting
to
register
event
-
listener
but
there
is
no
event
"
"
name
"
)
;
if
(
!
aTarget
)
return
;
if
(
!
aTarget
-
>
GetOwnerDocument
(
)
-
>
IsScriptEnabled
(
)
&
&
!
IsWhitelistedEvent
(
)
)
{
return
;
}
if
(
!
mEventListener
)
{
mEventListener
=
new
EventListener
(
this
)
;
}
EventListenerManager
*
elm
=
aTarget
-
>
GetOrCreateListenerManager
(
)
;
if
(
!
elm
)
{
return
;
}
elm
-
>
AddEventListenerByType
(
mEventListener
nsDependentAtomString
(
mParams
.
mEventSymbol
)
AllEventsAtSystemGroupBubble
(
)
)
;
}
void
nsSMILTimeValueSpec
:
:
UnregisterEventListener
(
Element
*
aTarget
)
{
if
(
!
aTarget
|
|
!
mEventListener
)
{
return
;
}
EventListenerManager
*
elm
=
aTarget
-
>
GetOrCreateListenerManager
(
)
;
if
(
!
elm
)
{
return
;
}
elm
-
>
RemoveEventListenerByType
(
mEventListener
nsDependentAtomString
(
mParams
.
mEventSymbol
)
AllEventsAtSystemGroupBubble
(
)
)
;
}
void
nsSMILTimeValueSpec
:
:
HandleEvent
(
Event
*
aEvent
)
{
MOZ_ASSERT
(
mEventListener
"
Got
event
without
an
event
listener
"
)
;
MOZ_ASSERT
(
IsEventBased
(
)
"
Got
event
for
non
-
event
nsSMILTimeValueSpec
"
)
;
MOZ_ASSERT
(
aEvent
"
No
event
supplied
"
)
;
nsSMILTimeContainer
*
container
=
mOwner
-
>
GetTimeContainer
(
)
;
if
(
!
container
)
return
;
if
(
mParams
.
mType
=
=
nsSMILTimeValueSpecParams
:
:
REPEAT
&
&
!
CheckRepeatEventDetail
(
aEvent
)
)
{
return
;
}
nsSMILTime
currentTime
=
container
-
>
GetCurrentTime
(
)
;
nsSMILTimeValue
newTime
(
currentTime
)
;
if
(
!
ApplyOffset
(
newTime
)
)
{
NS_WARNING
(
"
New
time
generated
from
event
overflows
nsSMILTime
ignoring
"
)
;
return
;
}
RefPtr
<
nsSMILInstanceTime
>
newInstance
=
new
nsSMILInstanceTime
(
newTime
nsSMILInstanceTime
:
:
SOURCE_EVENT
)
;
mOwner
-
>
AddInstanceTime
(
newInstance
mIsBegin
)
;
}
bool
nsSMILTimeValueSpec
:
:
CheckRepeatEventDetail
(
Event
*
aEvent
)
{
TimeEvent
*
timeEvent
=
aEvent
-
>
AsTimeEvent
(
)
;
if
(
!
timeEvent
)
{
NS_WARNING
(
"
Received
a
repeat
event
that
was
not
a
DOMTimeEvent
"
)
;
return
false
;
}
int32_t
detail
=
timeEvent
-
>
Detail
(
)
;
return
detail
>
0
&
&
(
uint32_t
)
detail
=
=
mParams
.
mRepeatIteration
;
}
nsSMILTimeValue
nsSMILTimeValueSpec
:
:
ConvertBetweenTimeContainers
(
const
nsSMILTimeValue
&
aSrcTime
const
nsSMILTimeContainer
*
aSrcContainer
)
{
if
(
!
aSrcTime
.
IsDefinite
(
)
)
return
aSrcTime
;
const
nsSMILTimeContainer
*
dstContainer
=
mOwner
-
>
GetTimeContainer
(
)
;
if
(
dstContainer
=
=
aSrcContainer
)
return
aSrcTime
;
if
(
!
aSrcContainer
|
|
!
dstContainer
)
return
nsSMILTimeValue
(
)
;
nsSMILTimeValue
docTime
=
aSrcContainer
-
>
ContainerToParentTime
(
aSrcTime
.
GetMillis
(
)
)
;
if
(
docTime
.
IsIndefinite
(
)
)
return
docTime
;
MOZ_ASSERT
(
docTime
.
IsDefinite
(
)
"
ContainerToParentTime
gave
us
an
unresolved
or
indefinite
time
"
)
;
return
dstContainer
-
>
ParentToContainerTime
(
docTime
.
GetMillis
(
)
)
;
}
bool
nsSMILTimeValueSpec
:
:
ApplyOffset
(
nsSMILTimeValue
&
aTime
)
const
{
if
(
!
aTime
.
IsDefinite
(
)
)
{
return
true
;
}
double
resultAsDouble
=
(
double
)
aTime
.
GetMillis
(
)
+
mParams
.
mOffset
.
GetMillis
(
)
;
if
(
resultAsDouble
>
std
:
:
numeric_limits
<
nsSMILTime
>
:
:
max
(
)
|
|
resultAsDouble
<
std
:
:
numeric_limits
<
nsSMILTime
>
:
:
min
(
)
)
{
return
false
;
}
aTime
.
SetMillis
(
aTime
.
GetMillis
(
)
+
mParams
.
mOffset
.
GetMillis
(
)
)
;
return
true
;
}
