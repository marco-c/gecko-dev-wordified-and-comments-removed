#
include
"
nsSMILCSSProperty
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
nsDOMCSSAttrDeclaration
.
h
"
#
include
"
nsSMILCSSValueType
.
h
"
#
include
"
nsSMILValue
.
h
"
#
include
"
nsCSSProps
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsSMILCSSProperty
:
:
nsSMILCSSProperty
(
nsCSSPropertyID
aPropID
Element
*
aElement
ComputedStyle
*
aBaseComputedStyle
)
:
mPropID
(
aPropID
)
mElement
(
aElement
)
mBaseComputedStyle
(
aBaseComputedStyle
)
{
MOZ_ASSERT
(
IsPropertyAnimatable
(
mPropID
)
"
Creating
a
nsSMILCSSProperty
for
a
property
"
"
that
'
s
not
supported
for
animation
"
)
;
}
nsSMILValue
nsSMILCSSProperty
:
:
GetBaseValue
(
)
const
{
nsSMILValue
baseValue
;
if
(
nsCSSProps
:
:
IsShorthand
(
mPropID
)
|
|
mPropID
=
=
eCSSProperty_display
|
|
!
mBaseComputedStyle
)
{
nsSMILValue
tmpVal
(
&
nsSMILCSSValueType
:
:
sSingleton
)
;
Swap
(
baseValue
tmpVal
)
;
return
baseValue
;
}
AnimationValue
computedValue
;
computedValue
.
mServo
=
Servo_ComputedValues_ExtractAnimationValue
(
mBaseComputedStyle
mPropID
)
.
Consume
(
)
;
if
(
!
computedValue
.
mServo
)
{
return
baseValue
;
}
baseValue
=
nsSMILCSSValueType
:
:
ValueFromAnimationValue
(
mPropID
mElement
computedValue
)
;
return
baseValue
;
}
nsresult
nsSMILCSSProperty
:
:
ValueFromString
(
const
nsAString
&
aStr
const
SVGAnimationElement
*
aSrcElement
nsSMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
{
NS_ENSURE_TRUE
(
IsPropertyAnimatable
(
mPropID
)
NS_ERROR_FAILURE
)
;
nsSMILCSSValueType
:
:
ValueFromString
(
mPropID
mElement
aStr
aValue
&
aPreventCachingOfSandwich
)
;
if
(
aValue
.
IsNull
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
aPreventCachingOfSandwich
&
&
mPropID
=
=
eCSSProperty_display
)
{
aPreventCachingOfSandwich
=
true
;
}
return
NS_OK
;
}
nsresult
nsSMILCSSProperty
:
:
SetAnimValue
(
const
nsSMILValue
&
aValue
)
{
NS_ENSURE_TRUE
(
IsPropertyAnimatable
(
mPropID
)
NS_ERROR_FAILURE
)
;
return
mElement
-
>
SMILOverrideStyle
(
)
-
>
SetSMILValue
(
mPropID
aValue
)
;
}
void
nsSMILCSSProperty
:
:
ClearAnimValue
(
)
{
mElement
-
>
SMILOverrideStyle
(
)
-
>
SetPropertyValue
(
mPropID
EmptyString
(
)
nullptr
)
;
}
bool
nsSMILCSSProperty
:
:
IsPropertyAnimatable
(
nsCSSPropertyID
aPropID
)
{
if
(
!
Servo_Property_IsAnimatable
(
aPropID
)
)
{
return
false
;
}
switch
(
aPropID
)
{
case
eCSSProperty_clip
:
case
eCSSProperty_clip_rule
:
case
eCSSProperty_clip_path
:
case
eCSSProperty_color
:
case
eCSSProperty_color_interpolation
:
case
eCSSProperty_color_interpolation_filters
:
case
eCSSProperty_cursor
:
case
eCSSProperty_display
:
case
eCSSProperty_dominant_baseline
:
case
eCSSProperty_fill
:
case
eCSSProperty_fill_opacity
:
case
eCSSProperty_fill_rule
:
case
eCSSProperty_filter
:
case
eCSSProperty_flood_color
:
case
eCSSProperty_flood_opacity
:
case
eCSSProperty_font
:
case
eCSSProperty_font_family
:
case
eCSSProperty_font_size
:
case
eCSSProperty_font_size_adjust
:
case
eCSSProperty_font_stretch
:
case
eCSSProperty_font_style
:
case
eCSSProperty_font_variant
:
case
eCSSProperty_font_weight
:
case
eCSSProperty_height
:
case
eCSSProperty_image_rendering
:
case
eCSSProperty_letter_spacing
:
case
eCSSProperty_lighting_color
:
case
eCSSProperty_marker
:
case
eCSSProperty_marker_end
:
case
eCSSProperty_marker_mid
:
case
eCSSProperty_marker_start
:
case
eCSSProperty_mask
:
case
eCSSProperty_mask_type
:
case
eCSSProperty_opacity
:
case
eCSSProperty_overflow
:
case
eCSSProperty_pointer_events
:
case
eCSSProperty_shape_rendering
:
case
eCSSProperty_stop_color
:
case
eCSSProperty_stop_opacity
:
case
eCSSProperty_stroke
:
case
eCSSProperty_stroke_dasharray
:
case
eCSSProperty_stroke_dashoffset
:
case
eCSSProperty_stroke_linecap
:
case
eCSSProperty_stroke_linejoin
:
case
eCSSProperty_stroke_miterlimit
:
case
eCSSProperty_stroke_opacity
:
case
eCSSProperty_stroke_width
:
case
eCSSProperty_text_anchor
:
case
eCSSProperty_text_decoration
:
case
eCSSProperty_text_decoration_line
:
case
eCSSProperty_text_rendering
:
case
eCSSProperty_vector_effect
:
case
eCSSProperty_width
:
case
eCSSProperty_visibility
:
case
eCSSProperty_word_spacing
:
return
true
;
case
eCSSProperty_direction
:
case
eCSSProperty_unicode_bidi
:
return
false
;
default
:
return
false
;
}
}
