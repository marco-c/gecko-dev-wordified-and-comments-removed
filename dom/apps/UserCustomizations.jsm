"
use
strict
"
;
const
Cu
=
Components
.
utils
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
this
.
EXPORTED_SYMBOLS
=
[
"
UserCustomizations
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppsUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ValueExtractor
"
"
resource
:
/
/
gre
/
modules
/
ValueExtractor
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
console
"
"
mozilla
.
org
/
consoleservice
;
1
"
"
nsIConsoleService
"
)
;
function
debug
(
aMsg
)
{
if
(
!
UserCustomizations
.
_debug
)
{
return
;
}
dump
(
"
-
*
-
*
-
UserCustomizations
"
+
aMsg
+
"
\
n
"
)
;
}
function
log
(
aStr
)
{
console
.
logStringMessage
(
aStr
)
;
}
this
.
UserCustomizations
=
{
extensions
:
new
Map
(
)
appId
:
new
Set
(
)
register
:
function
(
aApp
)
{
if
(
!
this
.
_enabled
|
|
!
aApp
.
enabled
|
|
aApp
.
role
!
=
"
addon
"
)
{
debug
(
"
Rejecting
registration
(
global
enabled
=
"
+
this
.
_enabled
+
"
)
(
app
role
=
"
+
aApp
.
role
+
"
enabled
=
"
+
aApp
.
enabled
+
"
)
"
)
;
return
;
}
debug
(
"
Starting
customization
registration
for
"
+
aApp
.
manifestURL
+
"
\
n
"
)
;
let
extension
=
new
Extension
(
{
id
:
AppsUtils
.
computeHash
(
aApp
.
manifestURL
)
resourceURI
:
Services
.
io
.
newURI
(
aApp
.
origin
+
"
/
"
null
null
)
}
)
;
this
.
extensions
.
set
(
aApp
.
manifestURL
extension
)
;
let
uri
=
Services
.
io
.
newURI
(
aApp
.
origin
null
null
)
;
debug
(
Adding
{
uri
.
host
}
to
appId
set
)
;
this
.
appId
.
add
(
uri
.
host
)
;
extension
.
startup
(
)
.
then
(
(
)
=
>
{
}
)
.
catch
(
(
err
)
=
>
{
debug
(
extension
.
startup
failed
:
{
err
}
)
;
this
.
appId
.
delete
(
uri
.
host
)
;
}
)
;
}
unregister
:
function
(
aApp
)
{
if
(
!
this
.
_enabled
)
{
return
;
}
debug
(
"
Starting
customization
unregistration
for
"
+
aApp
.
manifestURL
)
;
if
(
this
.
extensions
.
has
(
aApp
.
manifestURL
)
)
{
this
.
extensions
.
get
(
aApp
.
manifestURL
)
.
shutdown
(
)
;
this
.
extensions
.
delete
(
aApp
.
manifestURL
)
;
let
uri
=
Services
.
io
.
newURI
(
aApp
.
origin
null
null
)
;
this
.
appId
.
delete
(
uri
.
host
)
;
}
}
isFromExtension
:
function
(
aURI
)
{
if
(
!
aURI
&
&
Services
.
prefs
.
getBoolPref
(
"
webextensions
.
tests
"
)
)
{
return
true
;
}
return
this
.
appId
.
has
(
aURI
.
host
)
;
}
checkExtensionManifest
:
function
(
aManifest
)
{
if
(
!
aManifest
)
{
return
false
;
}
const
extractor
=
new
ValueExtractor
(
console
)
;
const
manifestVersionSpec
=
{
objectName
:
"
extension
manifest
"
object
:
aManifest
property
:
"
manifest_version
"
expectedType
:
"
number
"
trim
:
true
}
const
nameSpec
=
{
objectName
:
"
extension
manifest
"
object
:
aManifest
property
:
"
name
"
expectedType
:
"
string
"
trim
:
true
}
const
versionSpec
=
{
objectName
:
"
extension
manifest
"
object
:
aManifest
property
:
"
version
"
expectedType
:
"
string
"
trim
:
true
}
let
res
=
extractor
.
extractValue
(
manifestVersionSpec
)
!
=
=
undefined
&
&
extractor
.
extractValue
(
nameSpec
)
!
=
=
undefined
&
&
extractor
.
extractValue
(
versionSpec
)
!
=
=
undefined
;
return
res
;
}
convertManifest
:
function
(
aManifest
)
{
if
(
!
aManifest
)
{
return
null
;
}
let
result
=
{
"
type
"
:
"
privileged
"
"
name
"
:
aManifest
.
name
"
role
"
:
"
addon
"
}
if
(
aManifest
.
description
)
{
result
.
description
=
aManifest
.
description
;
}
if
(
aManifest
.
icons
)
{
result
.
icons
=
aManifest
.
icons
;
}
if
(
aManifest
.
version
)
{
result
.
version
=
aManifest
.
version
;
}
if
(
aManifest
.
author
)
{
result
.
developer
=
{
name
:
aManifest
.
author
}
}
return
result
;
}
init
:
function
(
)
{
this
.
_enabled
=
false
;
try
{
this
.
_enabled
=
Services
.
prefs
.
getBoolPref
(
"
dom
.
apps
.
customization
.
enabled
"
)
;
}
catch
(
e
)
{
}
}
}
UserCustomizations
.
init
(
)
;
