const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
this
.
EXPORTED_SYMBOLS
=
[
"
AndroidUtils
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppsUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Messaging
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
let
appsRegistry
=
null
;
function
debug
(
)
{
}
this
.
AndroidUtils
=
{
init
:
function
(
aRegistry
)
{
appsRegistry
=
aRegistry
;
Services
.
obs
.
addObserver
(
this
"
Android
:
Apps
:
Installed
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
Android
:
Apps
:
Uninstalled
"
false
)
;
}
uninit
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
Android
:
Apps
:
Installed
"
)
;
Services
.
obs
.
removeObserver
(
this
"
Android
:
Apps
:
Uninstalled
"
)
;
}
getOriginAndManifestURL
:
function
(
aPackageName
)
{
let
origin
=
"
android
:
/
/
"
+
aPackageName
.
toLowerCase
(
)
;
let
manifestURL
=
origin
+
"
/
manifest
.
webapp
"
;
return
[
origin
manifestURL
]
;
}
getPackageAndClassFromManifestURL
:
function
(
aManifestURL
)
{
debug
(
"
getPackageAndClassFromManifestURL
"
+
aManifestURL
)
;
let
app
=
appsRegistry
.
getAppByManifestURL
(
aManifestURL
)
;
if
(
!
app
)
{
debug
(
"
No
app
for
"
+
aManifestURL
)
;
return
[
]
;
}
return
[
app
.
android_packagename
app
.
android_classname
]
;
}
buildAndroidAppData
:
function
(
aApp
)
{
let
[
origin
manifestURL
]
=
this
.
getOriginAndManifestURL
(
aApp
.
packagename
)
;
let
manifest
=
{
name
:
aApp
.
name
icons
:
{
"
96
"
:
aApp
.
icon
}
}
debug
(
"
Origin
is
"
+
origin
)
;
let
appData
=
{
app
:
{
installOrigin
:
origin
origin
:
origin
manifest
:
manifest
manifestURL
:
manifestURL
manifestHash
:
AppsUtils
.
computeHash
(
JSON
.
stringify
(
manifest
)
)
appStatus
:
Ci
.
nsIPrincipal
.
APP_STATUS_INSTALLED
removable
:
aApp
.
removable
android_packagename
:
aApp
.
packagename
android_classname
:
aApp
.
classname
}
isBrowser
:
false
isPackage
:
false
}
;
return
appData
;
}
installAndroidApps
:
function
(
)
{
return
Messaging
.
sendRequestForResult
(
{
type
:
"
Apps
:
GetList
"
}
)
.
then
(
aApps
=
>
{
debug
(
"
Got
"
+
aApps
.
apps
.
length
+
"
android
apps
.
"
)
;
let
promises
=
[
]
;
aApps
.
apps
.
forEach
(
app
=
>
{
debug
(
"
App
is
"
+
app
.
name
+
"
removable
?
"
+
app
.
removable
)
;
let
p
=
new
Promise
(
(
aResolveInstall
aRejectInstall
)
=
>
{
let
appData
=
this
.
buildAndroidAppData
(
app
)
;
appsRegistry
.
confirmInstall
(
appData
null
aResolveInstall
)
;
}
)
;
promises
.
push
(
p
)
;
}
)
;
return
Promise
.
all
(
promises
)
;
}
)
.
then
(
appsRegistry
.
_saveApps
.
bind
(
appsRegistry
)
)
;
}
observe
:
function
(
aSubject
aTopic
aData
)
{
let
data
;
try
{
data
=
JSON
.
parse
(
aData
)
;
}
catch
(
e
)
{
debug
(
e
)
;
return
;
}
if
(
aTopic
=
=
"
Android
:
Apps
:
Installed
"
)
{
let
appData
=
this
.
buildAndroidAppData
(
data
)
;
appsRegistry
.
confirmInstall
(
appData
)
;
}
else
if
(
aTopic
=
=
"
Android
:
Apps
:
Uninstalled
"
)
{
let
[
origin
manifestURL
]
=
this
.
getOriginAndManifestURL
(
data
.
packagename
)
;
appsRegistry
.
uninstall
(
manifestURL
)
;
}
}
}
