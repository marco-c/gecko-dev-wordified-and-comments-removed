#
ifndef
mozilla_dom_TCPSocket_h
#
define
mozilla_dom_TCPSocket_h
#
include
"
mozilla
/
dom
/
TCPSocketBinding
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsITransport
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
class
nsISocketTransport
;
class
nsIInputStreamPump
;
class
nsIScriptableInputStream
;
class
nsIBinaryInputStream
;
class
nsIMultiplexInputStream
;
class
nsIAsyncStreamCopier
;
class
nsIInputStream
;
class
nsINetworkInfo
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DOMError
;
struct
ServerSocketOptions
;
class
TCPServerSocket
;
class
TCPSocketChild
;
class
TCPSocketParent
;
class
LegacyMozTCPSocket
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
LegacyMozTCPSocket
)
explicit
LegacyMozTCPSocket
(
nsPIDOMWindow
*
aWindow
)
;
already_AddRefed
<
TCPServerSocket
>
Listen
(
uint16_t
aPort
const
ServerSocketOptions
&
aOptions
uint16_t
aBacklog
ErrorResult
&
aRv
)
;
already_AddRefed
<
TCPSocket
>
Open
(
const
nsAString
&
aHost
uint16_t
aPort
const
SocketOptions
&
aOptions
ErrorResult
&
aRv
)
;
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
;
private
:
virtual
~
LegacyMozTCPSocket
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
}
;
class
TCPSocket
final
:
public
DOMEventTargetHelper
public
nsIStreamListener
public
nsITransportEventSink
public
nsIInputStreamCallback
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
TCPSocket
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aHost
uint16_t
aPort
bool
aSsl
bool
aUseArrayBuffers
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
TCPSocket
DOMEventTargetHelper
)
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSITRANSPORTEVENTSINK
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIOBSERVER
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
GetOwner
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetHost
(
nsAString
&
aHost
)
;
uint32_t
Port
(
)
;
bool
Ssl
(
)
;
uint64_t
BufferedAmount
(
)
;
void
Suspend
(
)
;
void
Resume
(
ErrorResult
&
aRv
)
;
void
Close
(
)
;
bool
Send
(
JSContext
*
aCx
const
nsACString
&
aData
ErrorResult
&
aRv
)
;
bool
Send
(
JSContext
*
aCx
const
ArrayBuffer
&
aData
uint32_t
aByteOffset
const
Optional
<
uint32_t
>
&
aByteLength
ErrorResult
&
aRv
)
;
TCPReadyState
ReadyState
(
)
;
TCPSocketBinaryType
BinaryType
(
)
;
void
UpgradeToSecure
(
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
TCPSocket
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aHost
uint16_t
aPort
const
SocketOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
SendWithTrackingNumber
(
const
nsACString
&
aData
const
uint32_t
&
aTrackingNumber
ErrorResult
&
aRv
)
;
void
SendWithTrackingNumber
(
JSContext
*
aCx
const
ArrayBuffer
&
aData
uint32_t
aByteOffset
const
Optional
<
uint32_t
>
&
aByteLength
const
uint32_t
&
aTrackingNumber
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
TCPSocket
>
CreateAcceptedSocket
(
nsIGlobalObject
*
aGlobal
nsISocketTransport
*
aTransport
bool
aUseArrayBuffers
)
;
static
already_AddRefed
<
TCPSocket
>
CreateAcceptedSocket
(
nsIGlobalObject
*
aGlobal
TCPSocketChild
*
aSocketBridge
bool
aUseArrayBuffers
)
;
void
SetAppIdAndBrowser
(
uint32_t
aAppId
bool
aInBrowser
)
;
void
SetSocketBridgeParent
(
TCPSocketParent
*
aBridgeParent
)
;
static
bool
SocketEnabled
(
)
;
IMPL_EVENT_HANDLER
(
open
)
;
IMPL_EVENT_HANDLER
(
drain
)
;
IMPL_EVENT_HANDLER
(
data
)
;
IMPL_EVENT_HANDLER
(
error
)
;
IMPL_EVENT_HANDLER
(
close
)
;
nsresult
Init
(
)
;
void
NotifyCopyComplete
(
nsresult
aStatus
)
;
void
UpdateBufferedAmount
(
uint32_t
aAmount
uint32_t
aTrackingNumber
)
;
void
UpdateReadyState
(
uint32_t
aReadyState
)
;
void
FireErrorEvent
(
const
nsAString
&
aName
const
nsAString
&
aMessage
)
;
void
FireEvent
(
const
nsAString
&
aType
)
;
void
FireDataEvent
(
const
nsAString
&
aType
const
InfallibleTArray
<
uint8_t
>
&
buffer
)
;
void
FireDataEvent
(
const
nsAString
&
aType
const
nsAString
&
aString
)
;
void
FireDataEvent
(
JSContext
*
aCx
const
nsAString
&
aType
JS
:
:
Handle
<
JS
:
:
Value
>
aData
)
;
nsresult
InitWithUnconnectedTransport
(
nsISocketTransport
*
aTransport
)
;
private
:
~
TCPSocket
(
)
;
void
InitWithSocketChild
(
TCPSocketChild
*
aBridge
)
;
nsresult
InitWithTransport
(
nsISocketTransport
*
aTransport
)
;
nsresult
CreateStream
(
)
;
nsresult
CreateInputStreamPump
(
)
;
bool
Send
(
nsIInputStream
*
aStream
uint32_t
aByteLength
)
;
nsresult
EnsureCopying
(
)
;
void
ActivateTLS
(
)
;
nsresult
MaybeReportErrorAndCloseIfOpen
(
nsresult
status
)
;
#
ifdef
MOZ_WIDGET_GONK
void
SaveNetworkStats
(
bool
aEnforce
)
;
#
endif
TCPReadyState
mReadyState
;
bool
mUseArrayBuffers
;
nsString
mHost
;
uint16_t
mPort
;
bool
mSsl
;
nsRefPtr
<
TCPSocketChild
>
mSocketBridgeChild
;
nsRefPtr
<
TCPSocketParent
>
mSocketBridgeParent
;
nsCOMPtr
<
nsISocketTransport
>
mTransport
;
nsCOMPtr
<
nsIInputStream
>
mSocketInputStream
;
nsCOMPtr
<
nsIOutputStream
>
mSocketOutputStream
;
nsCOMPtr
<
nsIInputStreamPump
>
mInputStreamPump
;
nsCOMPtr
<
nsIScriptableInputStream
>
mInputStreamScriptable
;
nsCOMPtr
<
nsIBinaryInputStream
>
mInputStreamBinary
;
nsCOMPtr
<
nsIMultiplexInputStream
>
mMultiplexStream
;
nsCOMPtr
<
nsIAsyncStreamCopier
>
mMultiplexStreamCopier
;
bool
mAsyncCopierActive
;
bool
mWaitingForDrain
;
uint64_t
mInnerWindowID
;
uint64_t
mBufferedAmount
;
uint32_t
mSuspendCount
;
uint32_t
mTrackingNumber
;
bool
mWaitingForStartTLS
;
nsTArray
<
nsCOMPtr
<
nsIInputStream
>
>
mPendingDataAfterStartTLS
;
#
ifdef
MOZ_WIDGET_GONK
uint32_t
mTxBytes
;
uint32_t
mRxBytes
;
uint32_t
mAppId
;
bool
mInBrowser
;
nsCOMPtr
<
nsINetworkInfo
>
mActiveNetworkInfo
;
#
endif
}
;
}
}
#
endif
