#
ifndef
mozilla_dom_network_Connection_h
#
define
mozilla_dom_network_Connection_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
NetworkInformationBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
{
namespace
hal
{
class
NetworkInformation
;
}
namespace
dom
{
class
WorkerPrivate
;
namespace
network
{
class
Connection
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
static
Connection
*
CreateForWindow
(
nsPIDOMWindowInner
*
aWindow
bool
aShouldResistFingerprinting
)
;
static
already_AddRefed
<
Connection
>
CreateForWorker
(
WorkerPrivate
*
aWorkerPrivate
ErrorResult
&
aRv
)
;
void
Shutdown
(
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
ConnectionType
Type
(
)
const
{
return
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
?
static_cast
<
ConnectionType
>
(
ConnectionType
:
:
Unknown
)
:
mType
;
}
bool
GetIsWifi
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
return
mIsWifi
;
}
uint32_t
GetDhcpGateway
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
return
mDHCPGateway
;
}
IMPL_EVENT_HANDLER
(
typechange
)
protected
:
Connection
(
nsPIDOMWindowInner
*
aWindow
bool
aShouldResistFingerprinting
)
;
virtual
~
Connection
(
)
;
void
Update
(
ConnectionType
aType
bool
aIsWifi
uint32_t
aDHCPGateway
bool
aNotify
)
;
virtual
void
ShutdownInternal
(
)
=
0
;
private
:
bool
mShouldResistFingerprinting
;
ConnectionType
mType
;
bool
mIsWifi
;
uint32_t
mDHCPGateway
;
bool
mBeenShutDown
;
}
;
}
}
}
#
endif
