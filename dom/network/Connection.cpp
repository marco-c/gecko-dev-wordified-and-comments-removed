#
include
"
Connection
.
h
"
#
include
"
ConnectionMainThread
.
h
"
#
include
"
ConnectionWorker
.
h
"
#
include
"
Constants
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
define
CHANGE_EVENT_NAME
NS_LITERAL_STRING
(
"
typechange
"
)
namespace
mozilla
{
namespace
dom
{
namespace
network
{
NS_IMPL_QUERY_INTERFACE_INHERITED
(
Connection
DOMEventTargetHelper
nsINetworkProperties
)
NS_IMPL_ADDREF_INHERITED
(
dom
:
:
network
:
:
Connection
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
dom
:
:
network
:
:
Connection
DOMEventTargetHelper
)
Connection
:
:
Connection
(
nsPIDOMWindowInner
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
mType
(
static_cast
<
ConnectionType
>
(
kDefaultType
)
)
mIsWifi
(
kDefaultIsWifi
)
mDHCPGateway
(
kDefaultDHCPGateway
)
mBeenShutDown
(
false
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
NETWORK_CONNECTION_COUNT
1
)
;
}
Connection
:
:
~
Connection
(
)
{
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
MOZ_ASSERT
(
mBeenShutDown
)
;
}
void
Connection
:
:
Shutdown
(
)
{
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
if
(
mBeenShutDown
)
{
return
;
}
mBeenShutDown
=
true
;
ShutdownInternal
(
)
;
}
NS_IMETHODIMP
Connection
:
:
GetIsWifi
(
bool
*
aIsWifi
)
{
NS_ENSURE_ARG_POINTER
(
aIsWifi
)
;
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
*
aIsWifi
=
mIsWifi
;
return
NS_OK
;
}
NS_IMETHODIMP
Connection
:
:
GetDhcpGateway
(
uint32_t
*
aGW
)
{
NS_ENSURE_ARG_POINTER
(
aGW
)
;
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
*
aGW
=
mDHCPGateway
;
return
NS_OK
;
}
JSObject
*
Connection
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
NetworkInformation_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
Connection
:
:
Update
(
ConnectionType
aType
bool
aIsWifi
uint32_t
aDHCPGateway
bool
aNotify
)
{
NS_ASSERT_OWNINGTHREAD
(
Connection
)
;
ConnectionType
previousType
=
mType
;
mType
=
aType
;
mIsWifi
=
aIsWifi
;
mDHCPGateway
=
aDHCPGateway
;
if
(
aNotify
&
&
previousType
!
=
aType
&
&
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
DispatchTrustedEvent
(
CHANGE_EVENT_NAME
)
;
}
}
Connection
*
Connection
:
:
CreateForWindow
(
nsPIDOMWindowInner
*
aWindow
)
{
MOZ_ASSERT
(
aWindow
)
;
return
new
ConnectionMainThread
(
aWindow
)
;
}
already_AddRefed
<
Connection
>
Connection
:
:
CreateForWorker
(
WorkerPrivate
*
aWorkerPrivate
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
return
ConnectionWorker
:
:
Create
(
aWorkerPrivate
aRv
)
;
}
}
}
}
