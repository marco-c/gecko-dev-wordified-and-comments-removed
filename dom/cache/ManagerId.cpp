#
include
"
mozilla
/
dom
/
cache
/
ManagerId
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
using
mozilla
:
:
dom
:
:
quota
:
:
QuotaManager
;
nsresult
ManagerId
:
:
Create
(
nsIPrincipal
*
aPrincipal
ManagerId
*
*
aManagerIdOut
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCString
quotaOrigin
;
nsresult
rv
=
QuotaManager
:
:
GetInfoFromPrincipal
(
aPrincipal
nullptr
nullptr
&
quotaOrigin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
RefPtr
<
ManagerId
>
ref
=
new
ManagerId
(
aPrincipal
quotaOrigin
)
;
ref
.
forget
(
aManagerIdOut
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIPrincipal
>
ManagerId
:
:
Principal
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
ref
=
mPrincipal
;
return
ref
.
forget
(
)
;
}
ManagerId
:
:
ManagerId
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aQuotaOrigin
)
:
mPrincipal
(
aPrincipal
)
mQuotaOrigin
(
aQuotaOrigin
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mPrincipal
)
;
}
ManagerId
:
:
~
ManagerId
(
)
{
if
(
NS_IsMainThread
(
)
)
{
return
;
}
NS_ReleaseOnMainThreadSystemGroup
(
"
ManagerId
:
:
mPrincipal
"
mPrincipal
.
forget
(
)
)
;
}
}
}
}
