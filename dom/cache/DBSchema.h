#
ifndef
mozilla_dom_cache_DBSchema_h
#
define
mozilla_dom_cache_DBSchema_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
mozIStorageConnection
;
struct
nsID
;
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
class
CacheQueryParams
;
class
CacheRequest
;
class
CacheResponse
;
struct
SavedRequest
;
struct
SavedResponse
;
namespace
db
{
nsresult
CreateOrMigrateSchema
(
mozIStorageConnection
&
aConn
)
;
nsresult
InitializeConnection
(
mozIStorageConnection
&
aConn
)
;
Result
<
CacheId
nsresult
>
CreateCacheId
(
mozIStorageConnection
&
aConn
)
;
Result
<
DeletionInfo
nsresult
>
DeleteCacheId
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
)
;
Result
<
nsTArray
<
CacheId
>
nsresult
>
FindOrphanedCacheIds
(
mozIStorageConnection
&
aConn
)
;
Result
<
int64_t
nsresult
>
FindOverallPaddingSize
(
mozIStorageConnection
&
aConn
)
;
Result
<
nsTArray
<
nsID
>
nsresult
>
GetKnownBodyIds
(
mozIStorageConnection
&
aConn
)
;
Result
<
Maybe
<
SavedResponse
>
nsresult
>
CacheMatch
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
const
CacheRequest
&
aRequest
const
CacheQueryParams
&
aParams
)
;
Result
<
nsTArray
<
SavedResponse
>
nsresult
>
CacheMatchAll
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
const
Maybe
<
CacheRequest
>
&
aMaybeRequest
const
CacheQueryParams
&
aParams
)
;
Result
<
DeletionInfo
nsresult
>
CachePut
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
const
CacheRequest
&
aRequest
const
nsID
*
aRequestBodyId
const
CacheResponse
&
aResponse
const
nsID
*
aResponseBodyId
)
;
Result
<
Maybe
<
DeletionInfo
>
nsresult
>
CacheDelete
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
const
CacheRequest
&
aRequest
const
CacheQueryParams
&
aParams
)
;
Result
<
nsTArray
<
SavedRequest
>
nsresult
>
CacheKeys
(
mozIStorageConnection
&
aConn
CacheId
aCacheId
const
Maybe
<
CacheRequest
>
&
aMaybeRequest
const
CacheQueryParams
&
aParams
)
;
Result
<
Maybe
<
SavedResponse
>
nsresult
>
StorageMatch
(
mozIStorageConnection
&
aConn
Namespace
aNamespace
const
CacheRequest
&
aRequest
const
CacheQueryParams
&
aParams
)
;
Result
<
Maybe
<
CacheId
>
nsresult
>
StorageGetCacheId
(
mozIStorageConnection
&
aConn
Namespace
aNamespace
const
nsAString
&
aKey
)
;
nsresult
StoragePutCache
(
mozIStorageConnection
&
aConn
Namespace
aNamespace
const
nsAString
&
aKey
CacheId
aCacheId
)
;
nsresult
StorageForgetCache
(
mozIStorageConnection
&
aConn
Namespace
aNamespace
const
nsAString
&
aKey
)
;
Result
<
nsTArray
<
nsString
>
nsresult
>
StorageGetKeys
(
mozIStorageConnection
&
aConn
Namespace
aNamespace
)
;
nsresult
IncrementalVacuum
(
mozIStorageConnection
&
aConn
)
;
extern
const
int32_t
kFirstShippedSchemaVersion
;
}
}
}
}
#
endif
