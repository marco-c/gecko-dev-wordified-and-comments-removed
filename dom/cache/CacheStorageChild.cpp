#
include
"
mozilla
/
dom
/
cache
/
CacheStorageChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheOpChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheStorage
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheWorkerRef
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
void
DeallocPCacheStorageChild
(
PCacheStorageChild
*
aActor
)
{
delete
aActor
;
}
CacheStorageChild
:
:
CacheStorageChild
(
CacheStorage
*
aListener
CacheWorkerRef
*
aWorkerRef
)
:
mListener
(
aListener
)
mNumChildActors
(
0
)
mDelayedDestroy
(
false
)
{
MOZ_COUNT_CTOR
(
cache
:
:
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
SetWorkerRef
(
aWorkerRef
)
;
}
CacheStorageChild
:
:
~
CacheStorageChild
(
)
{
MOZ_COUNT_DTOR
(
cache
:
:
CacheStorageChild
)
;
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
void
CacheStorageChild
:
:
ClearListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
mListener
=
nullptr
;
}
void
CacheStorageChild
:
:
ExecuteOp
(
nsIGlobalObject
*
aGlobal
Promise
*
aPromise
nsISupports
*
aParent
const
CacheOpArgs
&
aArgs
)
{
mNumChildActors
+
=
1
;
Unused
<
<
SendPCacheOpConstructor
(
new
CacheOpChild
(
GetWorkerRef
(
)
aGlobal
aParent
aPromise
)
aArgs
)
;
}
void
CacheStorageChild
:
:
StartDestroyFromListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mNumChildActors
)
;
StartDestroy
(
)
;
}
void
CacheStorageChild
:
:
StartDestroy
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
if
(
mNumChildActors
)
{
mDelayedDestroy
=
true
;
return
;
}
RefPtr
<
CacheStorage
>
listener
=
mListener
;
if
(
!
listener
)
{
return
;
}
listener
-
>
DestroyInternal
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
Unused
<
<
SendTeardown
(
)
;
}
void
CacheStorageChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
RefPtr
<
CacheStorage
>
listener
=
mListener
;
if
(
listener
)
{
listener
-
>
DestroyInternal
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
RemoveWorkerRef
(
)
;
}
PCacheOpChild
*
CacheStorageChild
:
:
AllocPCacheOpChild
(
const
CacheOpArgs
&
aOpArgs
)
{
MOZ_CRASH
(
"
CacheOpChild
should
be
manually
constructed
.
"
)
;
return
nullptr
;
}
bool
CacheStorageChild
:
:
DeallocPCacheOpChild
(
PCacheOpChild
*
aActor
)
{
delete
aActor
;
NoteDeletedActor
(
)
;
return
true
;
}
void
CacheStorageChild
:
:
NoteDeletedActor
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mNumChildActors
)
;
mNumChildActors
-
=
1
;
if
(
!
mNumChildActors
&
&
mDelayedDestroy
)
{
StartDestroy
(
)
;
}
}
}
}
}
