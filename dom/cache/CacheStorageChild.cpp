#
include
"
mozilla
/
dom
/
cache
/
CacheStorageChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheOpChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheStorage
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheWorkerRef
.
h
"
namespace
mozilla
:
:
dom
:
:
cache
{
void
DeallocPCacheStorageChild
(
PCacheStorageChild
*
aActor
)
{
delete
aActor
;
}
CacheStorageChild
:
:
CacheStorageChild
(
CacheStorageChildListener
*
aListener
SafeRefPtr
<
CacheWorkerRef
>
aWorkerRef
)
:
mListener
(
aListener
)
mDelayedDestroy
(
false
)
{
MOZ_COUNT_CTOR
(
cache
:
:
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
SetWorkerRef
(
std
:
:
move
(
aWorkerRef
)
)
;
}
CacheStorageChild
:
:
~
CacheStorageChild
(
)
{
MOZ_COUNT_DTOR
(
cache
:
:
CacheStorageChild
)
;
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
void
CacheStorageChild
:
:
ClearListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
mListener
=
nullptr
;
}
void
CacheStorageChild
:
:
ExecuteOp
(
nsIGlobalObject
*
aGlobal
Promise
*
aPromise
nsISupports
*
aParent
const
CacheOpArgs
&
aArgs
)
{
Unused
<
<
SendPCacheOpConstructor
(
new
CacheOpChild
(
GetWorkerRefPtr
(
)
.
clonePtr
(
)
aGlobal
aParent
aPromise
this
)
aArgs
)
;
}
void
CacheStorageChild
:
:
StartDestroyFromListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
StartDestroy
(
)
;
}
void
CacheStorageChild
:
:
DestroyInternal
(
)
{
CacheStorageChildListener
*
listener
=
mListener
;
if
(
!
listener
)
{
return
;
}
listener
-
>
OnActorDestroy
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
QM_WARNONLY_TRY
(
OkIf
(
SendTeardown
(
)
)
)
;
}
void
CacheStorageChild
:
:
StartDestroy
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
if
(
NumChildActors
(
)
!
=
0
)
{
mDelayedDestroy
=
true
;
return
;
}
DestroyInternal
(
)
;
}
void
CacheStorageChild
:
:
NoteDeletedActor
(
)
{
if
(
NumChildActors
(
)
=
=
0
&
&
mDelayedDestroy
)
DestroyInternal
(
)
;
}
void
CacheStorageChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheStorageChild
)
;
CacheStorageChildListener
*
listener
=
mListener
;
if
(
listener
)
{
listener
-
>
OnActorDestroy
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
RemoveWorkerRef
(
)
;
}
PCacheOpChild
*
CacheStorageChild
:
:
AllocPCacheOpChild
(
const
CacheOpArgs
&
aOpArgs
)
{
MOZ_CRASH
(
"
CacheOpChild
should
be
manually
constructed
.
"
)
;
return
nullptr
;
}
}
