#
include
"
mozilla
/
dom
/
cache
/
StreamControl
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
void
StreamControl
:
:
AddReadStream
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
)
{
AssertOwningThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aReadStream
)
;
MOZ_ASSERT
(
!
mReadStreamList
.
Contains
(
aReadStream
)
)
;
mReadStreamList
.
AppendElement
(
std
:
:
move
(
aReadStream
)
)
;
}
void
StreamControl
:
:
ForgetReadStream
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
)
{
AssertOwningThread
(
)
;
MOZ_ALWAYS_TRUE
(
mReadStreamList
.
RemoveElement
(
aReadStream
)
)
;
}
void
StreamControl
:
:
NoteClosed
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
const
nsID
&
aId
)
{
AssertOwningThread
(
)
;
ForgetReadStream
(
std
:
:
move
(
aReadStream
)
)
;
NoteClosedAfterForget
(
aId
)
;
}
StreamControl
:
:
~
StreamControl
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mReadStreamList
.
IsEmpty
(
)
)
;
}
void
StreamControl
:
:
CloseReadStreams
(
const
nsID
&
aId
)
{
AssertOwningThread
(
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
uint32_t
closedCount
=
0
;
#
endif
ReadStreamList
:
:
ForwardIterator
iter
(
mReadStreamList
)
;
while
(
iter
.
HasMore
(
)
)
{
SafeRefPtr
<
ReadStream
:
:
Controllable
>
stream
=
iter
.
GetNext
(
)
.
clonePtr
(
)
;
if
(
stream
-
>
MatchId
(
aId
)
)
{
stream
-
>
CloseStream
(
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
closedCount
+
=
1
;
#
endif
}
}
MOZ_DIAGNOSTIC_ASSERT
(
closedCount
>
0
)
;
}
void
StreamControl
:
:
CloseAllReadStreams
(
)
{
AssertOwningThread
(
)
;
auto
readStreamList
=
mReadStreamList
.
Clone
(
)
;
ReadStreamList
:
:
ForwardIterator
iter
(
readStreamList
)
;
while
(
iter
.
HasMore
(
)
)
{
iter
.
GetNext
(
)
-
>
CloseStream
(
)
;
}
}
void
StreamControl
:
:
CloseAllReadStreamsWithoutReporting
(
)
{
AssertOwningThread
(
)
;
ReadStreamList
:
:
ForwardIterator
iter
(
mReadStreamList
)
;
while
(
iter
.
HasMore
(
)
)
{
SafeRefPtr
<
ReadStream
:
:
Controllable
>
stream
=
iter
.
GetNext
(
)
.
clonePtr
(
)
;
stream
-
>
CloseStreamWithoutReporting
(
)
;
}
}
bool
StreamControl
:
:
HasEverBeenRead
(
)
const
{
ReadStreamList
:
:
ForwardIterator
iter
(
mReadStreamList
)
;
while
(
iter
.
HasMore
(
)
)
{
if
(
iter
.
GetNext
(
)
-
>
HasEverBeenRead
(
)
)
{
return
true
;
}
}
return
false
;
}
}
}
}
