#
ifndef
mozilla_dom_cache_Types_h
#
define
mozilla_dom_cache_Types_h
#
include
<
functional
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
dom
/
quota
/
CommonMetadata
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PBackgroundParent
;
}
namespace
dom
:
:
cache
{
class
PBoundStorageKeyParent
;
enum
Namespace
{
DEFAULT_NAMESPACE
CHROME_ONLY_NAMESPACE
NUMBER_OF_NAMESPACES
}
;
static
const
Namespace
INVALID_NAMESPACE
=
NUMBER_OF_NAMESPACES
;
using
CacheId
=
int64_t
;
static
const
CacheId
INVALID_CACHE_ID
=
-
1
;
struct
CacheDirectoryMetadata
:
quota
:
:
ClientMetadata
{
nsCOMPtr
<
nsIFile
>
mDir
;
int64_t
mDirectoryLockId
=
-
1
;
explicit
CacheDirectoryMetadata
(
const
quota
:
:
PrincipalMetadata
&
aPrincipalMetadata
)
:
quota
:
:
ClientMetadata
(
quota
:
:
OriginMetadata
{
aPrincipalMetadata
aPrincipalMetadata
.
mIsPrivate
?
quota
:
:
PERSISTENCE_TYPE_PRIVATE
:
quota
:
:
PERSISTENCE_TYPE_DEFAULT
}
quota
:
:
Client
:
:
Type
:
:
DOMCACHE
)
{
}
explicit
CacheDirectoryMetadata
(
quota
:
:
OriginMetadata
aOriginMetadata
)
:
quota
:
:
ClientMetadata
(
std
:
:
move
(
aOriginMetadata
)
quota
:
:
Client
:
:
Type
:
:
DOMCACHE
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mPersistenceType
=
=
quota
:
:
PERSISTENCE_TYPE_DEFAULT
|
|
mPersistenceType
=
=
quota
:
:
PERSISTENCE_TYPE_PRIVATE
)
;
}
}
;
struct
DeletionInfo
{
nsTArray
<
nsID
>
mDeletedBodyIdList
;
int64_t
mDeletedPaddingSize
=
0
;
}
;
using
InputStreamResolver
=
std
:
:
function
<
void
(
nsCOMPtr
<
nsIInputStream
>
&
&
)
>
;
enum
class
OpenMode
:
uint8_t
{
Eager
Lazy
NumTypes
}
;
using
pPBackgroundParent
=
mozilla
:
:
ipc
:
:
PBackgroundParent
*
;
using
pPBoundStorageKeyParent
=
PBoundStorageKeyParent
*
;
using
WeakRefParentType
=
Variant
<
pPBackgroundParent
pPBoundStorageKeyParent
>
;
}
}
#
endif
