#
ifndef
mozilla_dom_cache_FileUtilsImpl_h
#
define
mozilla_dom_cache_FileUtilsImpl_h
#
include
"
mozilla
/
dom
/
cache
/
FileUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
template
<
typename
Func
>
nsresult
BodyTraverseFiles
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
*
aBodyDir
const
Func
&
aHandleFileFunc
const
bool
aCanRemoveFiles
const
bool
aTrackQuota
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aBodyDir
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
{
nsCOMPtr
<
nsIFile
>
parentFile
;
nsresult
rv
=
aBodyDir
-
>
GetParent
(
getter_AddRefs
(
parentFile
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
parentFile
)
;
nsAutoCString
nativeLeafName
;
rv
=
parentFile
-
>
GetNativeLeafName
(
nativeLeafName
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
StringEndsWith
(
nativeLeafName
"
morgue
"
_ns
)
)
;
}
#
endif
bool
isEmpty
=
true
;
CACHE_TRY
(
quota
:
:
CollectEachFile
(
*
aBodyDir
[
&
isEmpty
&
aQuotaInfo
aTrackQuota
&
aHandleFileFunc
aCanRemoveFiles
]
(
const
nsCOMPtr
<
nsIFile
>
&
file
)
-
>
Result
<
Ok
nsresult
>
{
CACHE_TRY_INSPECT
(
const
bool
&
isDir
MOZ_TO_RESULT_INVOKE
(
file
IsDirectory
)
)
;
if
(
NS_WARN_IF
(
isDir
)
)
{
DebugOnly
<
nsresult
>
result
=
RemoveNsIFileRecursively
(
aQuotaInfo
file
false
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
result
)
)
;
return
Ok
{
}
;
}
nsAutoCString
leafName
;
CACHE_TRY
(
file
-
>
GetNativeLeafName
(
leafName
)
)
;
if
(
StringEndsWith
(
leafName
"
.
tmp
"
_ns
)
)
{
if
(
aCanRemoveFiles
)
{
DebugOnly
<
nsresult
>
result
=
RemoveNsIFile
(
aQuotaInfo
file
aTrackQuota
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
result
)
)
;
return
Ok
{
}
;
}
}
else
if
(
NS_WARN_IF
(
!
StringEndsWith
(
leafName
"
.
final
"
_ns
)
)
)
{
DebugOnly
<
nsresult
>
result
=
RemoveNsIFile
(
aQuotaInfo
file
false
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
result
)
)
;
return
Ok
{
}
;
}
CACHE_TRY_INSPECT
(
const
bool
&
fileDeleted
aHandleFileFunc
(
file
leafName
)
)
;
if
(
fileDeleted
)
{
return
Ok
{
}
;
}
isEmpty
=
false
;
return
Ok
{
}
;
}
)
)
;
if
(
isEmpty
&
&
aCanRemoveFiles
)
{
DebugOnly
<
nsresult
>
result
=
RemoveNsIFileRecursively
(
aQuotaInfo
aBodyDir
false
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
result
)
)
;
}
return
NS_OK
;
}
}
}
}
#
endif
