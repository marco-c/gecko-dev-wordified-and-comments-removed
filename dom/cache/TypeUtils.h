#
ifndef
mozilla_dom_cache_TypesUtils_h
#
define
mozilla_dom_cache_TypesUtils_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
InternalHeaders
.
h
"
#
include
"
nsError
.
h
"
class
nsIGlobalObject
;
class
nsIAsyncInputStream
;
class
nsIInputStream
;
namespace
mozilla
{
namespace
ipc
{
class
PBackgroundChild
;
class
AutoIPCStream
;
}
namespace
dom
{
struct
CacheQueryOptions
;
class
InternalRequest
;
class
InternalResponse
;
class
OwningRequestOrUSVString
;
class
Request
;
class
RequestOrUSVString
;
class
Response
;
namespace
cache
{
class
CacheQueryParams
;
class
CacheReadStream
;
class
CacheRequest
;
class
CacheResponse
;
class
HeadersEntry
;
class
TypeUtils
{
public
:
enum
BodyAction
{
IgnoreBody
ReadBody
}
;
enum
SchemeAction
{
IgnoreInvalidScheme
TypeErrorOnInvalidScheme
}
;
~
TypeUtils
(
)
=
default
;
virtual
nsIGlobalObject
*
GetGlobalObject
(
)
const
=
0
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
const
=
0
;
#
else
inline
void
AssertOwningThread
(
)
const
{
}
#
endif
virtual
mozilla
:
:
ipc
:
:
PBackgroundChild
*
GetIPCManager
(
)
=
0
;
already_AddRefed
<
InternalRequest
>
ToInternalRequest
(
JSContext
*
aCx
const
RequestOrUSVString
&
aIn
BodyAction
aBodyAction
ErrorResult
&
aRv
)
;
already_AddRefed
<
InternalRequest
>
ToInternalRequest
(
JSContext
*
aCx
const
OwningRequestOrUSVString
&
aIn
BodyAction
aBodyAction
ErrorResult
&
aRv
)
;
void
ToCacheRequest
(
CacheRequest
&
aOut
InternalRequest
*
aIn
BodyAction
aBodyAction
SchemeAction
aSchemeAction
nsTArray
<
UniquePtr
<
mozilla
:
:
ipc
:
:
AutoIPCStream
>
>
&
aStreamCleanupList
ErrorResult
&
aRv
)
;
void
ToCacheResponseWithoutBody
(
CacheResponse
&
aOut
InternalResponse
&
aIn
ErrorResult
&
aRv
)
;
void
ToCacheResponse
(
JSContext
*
aCx
CacheResponse
&
aOut
Response
&
aIn
nsTArray
<
UniquePtr
<
mozilla
:
:
ipc
:
:
AutoIPCStream
>
>
&
aStreamCleanupList
ErrorResult
&
aRv
)
;
void
ToCacheQueryParams
(
CacheQueryParams
&
aOut
const
CacheQueryOptions
&
aIn
)
;
already_AddRefed
<
Response
>
ToResponse
(
const
CacheResponse
&
aIn
)
;
already_AddRefed
<
InternalRequest
>
ToInternalRequest
(
const
CacheRequest
&
aIn
)
;
already_AddRefed
<
Request
>
ToRequest
(
const
CacheRequest
&
aIn
)
;
static
already_AddRefed
<
InternalHeaders
>
ToInternalHeaders
(
const
nsTArray
<
HeadersEntry
>
&
aHeadersEntryList
HeadersGuardEnum
aGuard
=
HeadersGuardEnum
:
:
None
)
;
static
void
ProcessURL
(
nsACString
&
aUrl
bool
*
aSchemeValidOut
nsACString
*
aUrlWithoutQueryOut
nsACString
*
aUrlQueryOut
ErrorResult
&
aRv
)
;
private
:
void
CheckAndSetBodyUsed
(
JSContext
*
aCx
Request
*
aRequest
BodyAction
aBodyAction
ErrorResult
&
aRv
)
;
already_AddRefed
<
InternalRequest
>
ToInternalRequest
(
const
nsAString
&
aIn
ErrorResult
&
aRv
)
;
void
SerializeCacheStream
(
nsIInputStream
*
aStream
Maybe
<
CacheReadStream
>
*
aStreamOut
nsTArray
<
UniquePtr
<
mozilla
:
:
ipc
:
:
AutoIPCStream
>
>
&
aStreamCleanupList
ErrorResult
&
aRv
)
;
void
SerializeSendStream
(
nsIInputStream
*
aStream
CacheReadStream
&
aReadStreamOut
ErrorResult
&
aRv
)
;
}
;
}
}
}
#
endif
