#
ifndef
mozilla_dom_cache_FileUtils_h
#
define
mozilla_dom_cache_FileUtils_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
#
include
"
CacheCommon
.
h
"
#
include
"
mozIStorageConnection
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
struct
nsID
;
class
nsIFile
;
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
#
define
PADDING_FILE_NAME
u
"
.
padding
"
#
define
PADDING_TMP_FILE_NAME
u
"
.
padding
-
tmp
"
enum
DirPaddingFile
{
FILE
TMP_FILE
}
;
nsresult
BodyCreateDir
(
nsIFile
&
aBaseDir
)
;
nsresult
BodyDeleteDir
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
)
;
Result
<
std
:
:
pair
<
nsID
nsCOMPtr
<
nsISupports
>
>
nsresult
>
BodyStartWriteStream
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
nsIInputStream
&
aSource
void
*
aClosure
nsAsyncCopyCallbackFun
aCallback
)
;
void
BodyCancelWrite
(
nsISupports
&
aCopyContext
)
;
nsresult
BodyFinalizeWrite
(
nsIFile
&
aBaseDir
const
nsID
&
aId
)
;
Result
<
NotNull
<
nsCOMPtr
<
nsIInputStream
>
>
nsresult
>
BodyOpen
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
const
nsID
&
aId
)
;
nsresult
BodyMaybeUpdatePaddingSize
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
const
nsID
&
aId
uint32_t
aPaddingInfo
int64_t
*
aPaddingSizeInOut
)
;
nsresult
BodyDeleteFiles
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
const
nsTArray
<
nsID
>
&
aIdList
)
;
nsresult
BodyDeleteOrphanedFiles
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBaseDir
const
nsTArray
<
nsID
>
&
aKnownBodyIdList
)
;
template
<
typename
Func
>
nsresult
BodyTraverseFiles
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aBodyDir
const
Func
&
aHandleFileFunc
bool
aCanRemoveFiles
bool
aTrackQuota
=
true
)
;
nsresult
CreateMarkerFile
(
const
QuotaInfo
&
aQuotaInfo
)
;
nsresult
DeleteMarkerFile
(
const
QuotaInfo
&
aQuotaInfo
)
;
bool
MarkerFileExists
(
const
QuotaInfo
&
aQuotaInfo
)
;
nsresult
RemoveNsIFileRecursively
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aFile
bool
aTrackQuota
=
true
)
;
nsresult
RemoveNsIFile
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
&
aFile
bool
aTrackQuota
=
true
)
;
void
DecreaseUsageForQuotaInfo
(
const
QuotaInfo
&
aQuotaInfo
int64_t
aUpdatingSize
)
;
bool
DirectoryPaddingFileExists
(
nsIFile
&
aBaseDir
DirPaddingFile
aPaddingFileType
)
;
Result
<
int64_t
nsresult
>
DirectoryPaddingGet
(
nsIFile
&
aBaseDir
)
;
nsresult
DirectoryPaddingInit
(
nsIFile
&
aBaseDir
)
;
nsresult
UpdateDirectoryPaddingFile
(
nsIFile
&
aBaseDir
mozIStorageConnection
&
aConn
int64_t
aIncreaseSize
int64_t
aDecreaseSize
bool
aTemporaryFileExist
)
;
nsresult
DirectoryPaddingFinalizeWrite
(
nsIFile
&
aBaseDir
)
;
Result
<
int64_t
nsresult
>
DirectoryPaddingRestore
(
nsIFile
&
aBaseDir
mozIStorageConnection
&
aConn
bool
aMustRestore
)
;
nsresult
DirectoryPaddingDeleteFile
(
nsIFile
&
aBaseDir
DirPaddingFile
aPaddingFileType
)
;
}
}
}
#
endif
