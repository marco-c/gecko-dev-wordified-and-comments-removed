#
include
"
BoundStorageKeyChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheOpChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheStorage
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheWorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PCacheStorageChild
.
h
"
namespace
mozilla
:
:
dom
:
:
cache
{
BoundStorageKeyChild
:
:
BoundStorageKeyChild
(
BoundStorageKeyChildListener
*
aListener
)
:
mListener
(
aListener
)
mDelayedDestroy
(
false
)
{
MOZ_COUNT_CTOR
(
BoundStorageKeyChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
}
BoundStorageKeyChild
:
:
~
BoundStorageKeyChild
(
)
{
MOZ_COUNT_DTOR
(
BoundStorageKeyChild
)
;
NS_ASSERT_OWNINGTHREAD
(
BoundStorageKeyChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
void
BoundStorageKeyChild
:
:
ClearListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
BoundStorageKeyChild
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mListener
)
;
mListener
=
nullptr
;
}
void
BoundStorageKeyChild
:
:
StartDestroyFromListener
(
)
{
NS_ASSERT_OWNINGTHREAD
(
BoundStorageKeyChild
)
;
StartDestroy
(
)
;
}
void
BoundStorageKeyChild
:
:
DestroyInternal
(
)
{
BoundStorageKeyChildListener
*
listener
=
mListener
;
if
(
!
listener
)
{
return
;
}
listener
-
>
OnActorDestroy
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
void
BoundStorageKeyChild
:
:
StartDestroy
(
)
{
NS_ASSERT_OWNINGTHREAD
(
BoundStorageKeyChild
)
;
if
(
NumChildActors
(
)
!
=
0
)
{
mDelayedDestroy
=
true
;
return
;
}
DestroyInternal
(
)
;
}
void
BoundStorageKeyChild
:
:
NoteDeletedActor
(
)
{
if
(
mDelayedDestroy
&
&
NumChildActors
(
)
=
=
0
)
{
DestroyInternal
(
)
;
}
}
void
BoundStorageKeyChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
NS_ASSERT_OWNINGTHREAD
(
BoundStorageKeyChild
)
;
BoundStorageKeyChildListener
*
listener
=
mListener
;
if
(
listener
)
{
listener
-
>
OnActorDestroy
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
}
}
