#
ifndef
mozilla_dom_cache_CacheOpParent_h
#
define
mozilla_dom_cache_CacheOpParent_h
#
include
"
mozilla
/
dom
/
cache
/
Manager
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PCacheOpParent
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PrincipalVerifier
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PBackgroundParent
;
}
namespace
dom
{
namespace
cache
{
class
CacheOpParent
final
:
public
PCacheOpParent
public
PrincipalVerifier
:
:
Listener
public
Manager
:
:
Listener
{
using
Manager
:
:
Listener
:
:
OnOpComplete
;
public
:
CacheOpParent
(
mozilla
:
:
ipc
:
:
PBackgroundParent
*
aIpcManager
CacheId
aCacheId
const
CacheOpArgs
&
aOpArgs
)
;
CacheOpParent
(
mozilla
:
:
ipc
:
:
PBackgroundParent
*
aIpcManager
Namespace
aNamespace
const
CacheOpArgs
&
aOpArgs
)
;
void
Execute
(
const
SafeRefPtr
<
ManagerId
>
&
aManagerId
)
;
void
Execute
(
SafeRefPtr
<
cache
:
:
Manager
>
aManager
)
;
void
WaitForVerification
(
PrincipalVerifier
*
aVerifier
)
;
NS_DECL_OWNINGTHREAD
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CacheOpParent
override
)
private
:
~
CacheOpParent
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
virtual
void
OnPrincipalVerified
(
nsresult
aRv
const
SafeRefPtr
<
ManagerId
>
&
aManagerId
)
override
;
virtual
void
OnOpComplete
(
ErrorResult
&
&
aRv
const
CacheOpResult
&
aResult
CacheId
aOpenedCacheId
const
Maybe
<
StreamInfo
>
&
aStreamInfo
)
override
;
already_AddRefed
<
nsIInputStream
>
DeserializeCacheStream
(
const
Maybe
<
CacheReadStream
>
&
aMaybeStream
)
;
void
ProcessCrossOriginResourcePolicyHeader
(
ErrorResult
&
aRv
const
nsTArray
<
SavedResponse
>
&
aResponses
)
;
mozilla
:
:
ipc
:
:
PBackgroundParent
*
mIpcManager
;
const
CacheId
mCacheId
;
const
Namespace
mNamespace
;
const
CacheOpArgs
mOpArgs
;
SafeRefPtr
<
cache
:
:
Manager
>
mManager
;
RefPtr
<
PrincipalVerifier
>
mVerifier
;
}
;
}
}
}
#
endif
