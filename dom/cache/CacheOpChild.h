#
ifndef
mozilla_dom_cache_CacheOpChild_h
#
define
mozilla_dom_cache_CacheOpChild_h
#
include
"
mozilla
/
InitializedOnce
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
ActorChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
BoundStorageKey
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PCacheOpChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
TypeUtils
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
Promise
;
namespace
cache
{
class
CacheOpChild
final
:
public
PCacheOpChild
public
CacheActorChild
public
TypeUtils
{
friend
class
CacheChild
;
friend
class
CacheStorageChild
;
friend
class
PCacheOpChild
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
CacheOpChild
override
)
private
:
using
PromiseType
=
Variant
<
RefPtr
<
mozilla
:
:
dom
:
:
Promise
>
RefPtr
<
CacheStoragePromise
>
>
;
template
<
typename
T
>
struct
PromiseTrait
;
CacheOpChild
(
SafeRefPtr
<
CacheWorkerRef
>
aWorkerRef
nsIGlobalObject
*
aGlobal
nsISupports
*
aParent
RefPtr
<
Promise
>
&
aPromise
ActorChild
*
aParentActor
)
;
CacheOpChild
(
SafeRefPtr
<
CacheWorkerRef
>
aWorkerRef
nsIGlobalObject
*
aGlobal
nsISupports
*
aParent
RefPtr
<
CacheStoragePromise
>
&
aPromise
ActorChild
*
aParentActor
)
;
~
CacheOpChild
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
ErrorResult
&
&
aRv
const
CacheOpResult
&
aResult
)
;
virtual
void
StartDestroy
(
)
override
;
virtual
nsIGlobalObject
*
GetGlobalObject
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
const
override
;
#
endif
template
<
CacheOpResult
:
:
Type
OP_TYPE
typename
ResponseType
>
void
HandleAndSettle
(
ResponseType
&
&
)
;
template
<
CacheOpResult
:
:
Type
OP_TYPE
typename
ResultType
>
void
Settle
(
ResultType
&
&
aRes
ErrorResult
&
&
aRv
=
ErrorResult
(
NS_OK
)
)
;
template
<
CacheOpResult
:
:
Type
OP_TYPE
typename
ResultType
>
void
SettlePromise
(
ResultType
&
&
aRes
ErrorResult
&
&
aRv
const
RefPtr
<
CacheStoragePromise
>
&
aThePromise
)
;
template
<
typename
CacheOpResult
:
:
Type
OP_TYPE
typename
ResultType
>
void
SettlePromise
(
ResultType
&
&
aRes
ErrorResult
&
&
aRv
const
RefPtr
<
Promise
>
&
aThePromise
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsISupports
>
mParent
;
LazyInitializedOnceEarlyDestructible
<
const
PromiseType
>
mPromise
;
ActorChild
*
mParentActor
;
}
;
}
}
#
endif
