#
ifndef
mozilla_dom_cache_CacheOpChild_h
#
define
mozilla_dom_cache_CacheOpChild_h
#
include
"
mozilla
/
dom
/
cache
/
ActorChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PCacheOpChild
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
TypeUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
Promise
;
namespace
cache
{
class
CacheOpChild
final
:
public
PCacheOpChild
public
CacheActorChild
public
TypeUtils
{
friend
class
CacheChild
;
friend
class
CacheStorageChild
;
friend
class
PCacheOpChild
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
CacheOpChild
override
)
private
:
CacheOpChild
(
SafeRefPtr
<
CacheWorkerRef
>
aWorkerRef
nsIGlobalObject
*
aGlobal
nsISupports
*
aParent
Promise
*
aPromise
ActorChild
*
aParentActor
)
;
~
CacheOpChild
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
ErrorResult
&
&
aRv
const
CacheOpResult
&
aResult
)
;
virtual
void
StartDestroy
(
)
override
;
virtual
nsIGlobalObject
*
GetGlobalObject
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
const
override
;
#
endif
virtual
mozilla
:
:
ipc
:
:
PBackgroundChild
*
GetIPCManager
(
)
override
;
void
HandleResponse
(
const
Maybe
<
CacheResponse
>
&
aMaybeResponse
)
;
void
HandleResponseList
(
const
nsTArray
<
CacheResponse
>
&
aResponseList
)
;
void
HandleRequestList
(
const
nsTArray
<
CacheRequest
>
&
aRequestList
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
Promise
>
mPromise
;
ActorChild
*
mParentActor
;
}
;
}
}
#
endif
