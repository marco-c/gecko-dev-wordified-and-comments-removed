#
ifndef
mozilla_dom_cache_CacheStorage_h
#
define
mozilla_dom_cache_CacheStorage_h
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
TypeUtils
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
enum
class
CacheStorageNamespace
:
uint8_t
;
class
Promise
;
class
WorkerPrivate
;
namespace
cache
{
class
CacheStorageChild
;
class
CacheWorkerRef
;
class
CacheStorage
final
:
public
nsISupports
public
nsWrapperCache
public
TypeUtils
{
typedef
mozilla
:
:
ipc
:
:
PBackgroundChild
PBackgroundChild
;
public
:
static
already_AddRefed
<
CacheStorage
>
CreateOnMainThread
(
Namespace
aNamespace
nsIGlobalObject
*
aGlobal
nsIPrincipal
*
aPrincipal
bool
aForceTrustedOrigin
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
CacheStorage
>
CreateOnWorker
(
Namespace
aNamespace
nsIGlobalObject
*
aGlobal
WorkerPrivate
*
aWorkerPrivate
ErrorResult
&
aRv
)
;
static
bool
DefineCaches
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
already_AddRefed
<
Promise
>
Match
(
JSContext
*
aCx
const
RequestOrUSVString
&
aRequest
const
CacheQueryOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Has
(
const
nsAString
&
aKey
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Open
(
const
nsAString
&
aKey
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Delete
(
const
nsAString
&
aKey
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Keys
(
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
CacheStorage
>
Constructor
(
const
GlobalObject
&
aGlobal
CacheStorageNamespace
aNamespace
nsIPrincipal
*
aPrincipal
ErrorResult
&
aRv
)
;
nsISupports
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aContext
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
DestroyInternal
(
CacheStorageChild
*
aActor
)
;
virtual
nsIGlobalObject
*
GetGlobalObject
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
const
override
;
#
endif
virtual
mozilla
:
:
ipc
:
:
PBackgroundChild
*
GetIPCManager
(
)
override
;
private
:
CacheStorage
(
Namespace
aNamespace
nsIGlobalObject
*
aGlobal
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
CacheWorkerRef
*
aWorkerRef
)
;
explicit
CacheStorage
(
nsresult
aFailureResult
)
;
~
CacheStorage
(
)
;
struct
Entry
;
void
RunRequest
(
nsAutoPtr
<
Entry
>
&
&
aEntry
)
;
OpenMode
GetOpenMode
(
)
const
;
bool
HasStorageAccess
(
)
const
;
const
Namespace
mNamespace
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
UniquePtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
mPrincipalInfo
;
CacheStorageChild
*
mActor
;
nsresult
mStatus
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
CacheStorage
)
}
;
}
}
}
#
endif
