#
ifndef
mozilla_dom_cache_QuotaClientImpl_h
#
define
mozilla_dom_cache_QuotaClientImpl_h
#
include
"
mozilla
/
dom
/
cache
/
QuotaClient
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
FileUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
class
CacheQuotaClient
final
:
public
quota
:
:
Client
{
static
CacheQuotaClient
*
sInstance
;
public
:
using
PersistenceType
=
quota
:
:
PersistenceType
;
using
UsageInfo
=
quota
:
:
UsageInfo
;
CacheQuotaClient
(
)
;
static
CacheQuotaClient
*
Get
(
)
;
virtual
Type
GetType
(
)
override
;
virtual
Result
<
UsageInfo
nsresult
>
InitOrigin
(
PersistenceType
aPersistenceType
const
nsACString
&
aGroup
const
nsACString
&
aOrigin
const
AtomicBool
&
aCanceled
)
override
;
virtual
nsresult
InitOriginWithoutTracking
(
PersistenceType
aPersistenceType
const
nsACString
&
aGroup
const
nsACString
&
aOrigin
const
AtomicBool
&
aCanceled
)
override
;
virtual
Result
<
UsageInfo
nsresult
>
GetUsageForOrigin
(
PersistenceType
aPersistenceType
const
nsACString
&
aGroup
const
nsACString
&
aOrigin
const
AtomicBool
&
aCanceled
)
override
;
virtual
void
OnOriginClearCompleted
(
PersistenceType
aPersistenceType
const
nsACString
&
aOrigin
)
override
;
virtual
void
ReleaseIOThreadObjects
(
)
override
;
virtual
void
AbortOperations
(
const
nsACString
&
aOrigin
)
override
;
virtual
void
AbortOperationsForProcess
(
ContentParentId
aContentParentId
)
override
;
virtual
void
StartIdleMaintenance
(
)
override
;
virtual
void
StopIdleMaintenance
(
)
override
;
virtual
void
ShutdownWorkThreads
(
)
override
;
nsresult
UpgradeStorageFrom2_0To2_1
(
nsIFile
*
aDirectory
)
override
;
template
<
typename
Callable
>
nsresult
MaybeUpdatePaddingFileInternal
(
nsIFile
*
aBaseDir
mozIStorageConnection
*
aConn
const
int64_t
aIncreaseSize
const
int64_t
aDecreaseSize
Callable
aCommitHook
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aBaseDir
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aConn
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aIncreaseSize
>
=
0
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aDecreaseSize
>
=
0
)
;
nsresult
rv
;
bool
temporaryPaddingFileExist
=
mozilla
:
:
dom
:
:
cache
:
:
DirectoryPaddingFileExists
(
aBaseDir
DirPaddingFile
:
:
TMP_FILE
)
;
if
(
aIncreaseSize
=
=
aDecreaseSize
&
&
!
temporaryPaddingFileExist
)
{
rv
=
aCommitHook
(
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
return
rv
;
}
{
MutexAutoLock
lock
(
mDirPaddingFileMutex
)
;
rv
=
mozilla
:
:
dom
:
:
cache
:
:
LockedUpdateDirectoryPaddingFile
(
aBaseDir
aConn
aIncreaseSize
aDecreaseSize
temporaryPaddingFileExist
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aCommitHook
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
mozilla
:
:
dom
:
:
cache
:
:
LockedDirectoryPaddingFinalizeWrite
(
aBaseDir
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Unused
<
<
mozilla
:
:
dom
:
:
cache
:
:
LockedDirectoryPaddingDeleteFile
(
aBaseDir
DirPaddingFile
:
:
FILE
)
;
MOZ_ASSERT
(
mozilla
:
:
dom
:
:
cache
:
:
DirectoryPaddingFileExists
(
aBaseDir
DirPaddingFile
:
:
TMP_FILE
)
)
;
rv
=
NS_OK
;
}
}
return
rv
;
}
nsresult
RestorePaddingFileInternal
(
nsIFile
*
aBaseDir
mozIStorageConnection
*
aConn
)
;
nsresult
WipePaddingFileInternal
(
const
QuotaInfo
&
aQuotaInfo
nsIFile
*
aBaseDir
)
;
private
:
~
CacheQuotaClient
(
)
;
nsresult
GetUsageForOriginInternal
(
PersistenceType
aPersistenceType
const
nsACString
&
aGroup
const
nsACString
&
aOrigin
const
AtomicBool
&
aCanceled
bool
aInitializing
UsageInfo
*
aUsageInfo
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CacheQuotaClient
override
)
mozilla
:
:
Mutex
mDirPaddingFileMutex
;
}
;
}
}
}
#
endif
