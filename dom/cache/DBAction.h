#
ifndef
mozilla_dom_cache_DBAction_h
#
define
mozilla_dom_cache_DBAction_h
#
include
"
mozilla
/
dom
/
cache
/
Action
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
class
mozIStorageConnection
;
class
nsIFile
;
namespace
mozilla
:
:
dom
:
:
cache
{
Result
<
nsCOMPtr
<
mozIStorageConnection
>
nsresult
>
OpenDBConnection
(
const
CacheDirectoryMetadata
&
aDirectoryMetadata
nsIFile
&
aDBFile
)
;
class
DBAction
:
public
Action
{
protected
:
enum
Mode
{
Existing
Create
}
;
explicit
DBAction
(
Mode
aMode
)
;
virtual
~
DBAction
(
)
;
virtual
void
RunWithDBOnTarget
(
SafeRefPtr
<
Resolver
>
aResolver
const
CacheDirectoryMetadata
&
aDirectoryMetadata
nsIFile
*
aDBDir
mozIStorageConnection
*
aConn
)
=
0
;
private
:
void
RunOnTarget
(
SafeRefPtr
<
Resolver
>
aResolver
const
Maybe
<
CacheDirectoryMetadata
>
&
aDirectoryMetadata
Data
*
aOptionalData
)
override
;
Result
<
nsCOMPtr
<
mozIStorageConnection
>
nsresult
>
OpenConnection
(
const
CacheDirectoryMetadata
&
aDirectoryMetadata
nsIFile
&
aDBDir
)
;
const
Mode
mMode
;
}
;
class
SyncDBAction
:
public
DBAction
{
protected
:
explicit
SyncDBAction
(
Mode
aMode
)
;
virtual
~
SyncDBAction
(
)
;
virtual
nsresult
RunSyncWithDBOnTarget
(
const
CacheDirectoryMetadata
&
aDirectoryMetadata
nsIFile
*
aDBDir
mozIStorageConnection
*
aConn
)
=
0
;
private
:
virtual
void
RunWithDBOnTarget
(
SafeRefPtr
<
Resolver
>
aResolver
const
CacheDirectoryMetadata
&
aDirectoryMetadata
nsIFile
*
aDBDir
mozIStorageConnection
*
aConn
)
override
;
}
;
}
#
endif
