#
ifndef
mozilla_dom_cache_StreamControl_h
#
define
mozilla_dom_cache_StreamControl_h
#
include
"
mozilla
/
dom
/
cache
/
ReadStream
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsTObserverArray
.
h
"
struct
nsID
;
namespace
mozilla
{
namespace
ipc
{
class
AutoIPCStream
;
}
namespace
dom
:
:
cache
{
class
CacheReadStream
;
class
StreamControl
{
public
:
virtual
void
SerializeControl
(
CacheReadStream
*
aReadStreamOut
)
=
0
;
virtual
void
SerializeStream
(
CacheReadStream
*
aReadStreamOut
nsIInputStream
*
aStream
nsTArray
<
UniquePtr
<
mozilla
:
:
ipc
:
:
AutoIPCStream
>
>
&
aStreamCleanupList
)
=
0
;
virtual
void
OpenStream
(
const
nsID
&
aId
InputStreamResolver
&
&
aResolver
)
=
0
;
void
AddReadStream
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
)
;
void
ForgetReadStream
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
)
;
void
NoteClosed
(
SafeRefPtr
<
ReadStream
:
:
Controllable
>
aReadStream
const
nsID
&
aId
)
;
protected
:
~
StreamControl
(
)
;
void
CloseAllReadStreams
(
)
;
void
CloseAllReadStreamsWithoutReporting
(
)
;
bool
HasEverBeenRead
(
)
const
;
virtual
void
NoteClosedAfterForget
(
const
nsID
&
aId
)
=
0
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
=
0
;
#
else
void
AssertOwningThread
(
)
{
}
#
endif
private
:
using
ReadStreamList
=
nsTObserverArray
<
SafeRefPtr
<
ReadStream
:
:
Controllable
>
>
;
ReadStreamList
mReadStreamList
;
}
;
}
}
#
endif
