#
include
"
mozilla
/
dom
/
cache
/
CacheWorkerHolder
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
ActorChild
.
h
"
#
include
"
WorkerPrivate
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
using
mozilla
:
:
dom
:
:
workers
:
:
Terminating
;
using
mozilla
:
:
dom
:
:
workers
:
:
Status
;
using
mozilla
:
:
dom
:
:
workers
:
:
WorkerPrivate
;
already_AddRefed
<
CacheWorkerHolder
>
CacheWorkerHolder
:
:
Create
(
WorkerPrivate
*
aWorkerPrivate
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
RefPtr
<
CacheWorkerHolder
>
workerHolder
=
new
CacheWorkerHolder
(
)
;
if
(
NS_WARN_IF
(
!
workerHolder
-
>
HoldWorker
(
aWorkerPrivate
Terminating
)
)
)
{
return
nullptr
;
}
return
workerHolder
.
forget
(
)
;
}
void
CacheWorkerHolder
:
:
AddActor
(
ActorChild
*
aActor
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheWorkerHolder
)
;
MOZ_ASSERT
(
aActor
)
;
MOZ_ASSERT
(
!
mActorList
.
Contains
(
aActor
)
)
;
mActorList
.
AppendElement
(
aActor
)
;
if
(
mNotified
)
{
aActor
-
>
StartDestroy
(
)
;
}
}
void
CacheWorkerHolder
:
:
RemoveActor
(
ActorChild
*
aActor
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheWorkerHolder
)
;
MOZ_ASSERT
(
aActor
)
;
DebugOnly
<
bool
>
removed
=
mActorList
.
RemoveElement
(
aActor
)
;
MOZ_ASSERT
(
removed
)
;
MOZ_ASSERT
(
!
mActorList
.
Contains
(
aActor
)
)
;
}
bool
CacheWorkerHolder
:
:
Notified
(
)
const
{
return
mNotified
;
}
bool
CacheWorkerHolder
:
:
Notify
(
Status
aStatus
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheWorkerHolder
)
;
if
(
aStatus
<
Terminating
|
|
mNotified
)
{
return
true
;
}
mNotified
=
true
;
for
(
uint32_t
i
=
0
;
i
<
mActorList
.
Length
(
)
;
+
+
i
)
{
mActorList
[
i
]
-
>
StartDestroy
(
)
;
}
return
true
;
}
CacheWorkerHolder
:
:
CacheWorkerHolder
(
)
:
mNotified
(
false
)
{
}
CacheWorkerHolder
:
:
~
CacheWorkerHolder
(
)
{
NS_ASSERT_OWNINGTHREAD
(
CacheWorkerHolder
)
;
MOZ_ASSERT
(
mActorList
.
IsEmpty
(
)
)
;
}
}
}
}
