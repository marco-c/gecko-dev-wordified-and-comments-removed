#
ifndef
mozilla_dom_cache_CacheStreamControlParent_h
#
define
mozilla_dom_cache_CacheStreamControlParent_h
#
include
"
mozilla
/
dom
/
cache
/
Manager
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PCacheStreamControlParent
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
StreamControl
.
h
"
#
include
"
nsTObserverArray
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
AutoIPCStream
;
}
namespace
dom
{
namespace
cache
{
class
ReadStream
;
class
StreamList
;
class
CacheStreamControlParent
final
:
public
PCacheStreamControlParent
public
StreamControl
Manager
:
:
Listener
{
public
:
CacheStreamControlParent
(
)
;
~
CacheStreamControlParent
(
)
;
void
SetStreamList
(
StreamList
*
aStreamList
)
;
void
Close
(
const
nsID
&
aId
)
;
void
CloseAll
(
)
;
void
Shutdown
(
)
;
virtual
void
SerializeControl
(
CacheReadStream
*
aReadStreamOut
)
override
;
virtual
void
SerializeStream
(
CacheReadStream
*
aReadStreamOut
nsIInputStream
*
aStream
nsTArray
<
UniquePtr
<
mozilla
:
:
ipc
:
:
AutoIPCStream
>
>
&
aStreamCleanupList
)
override
;
virtual
void
OpenStream
(
const
nsID
&
aId
InputStreamResolver
&
&
aResolver
)
override
;
private
:
virtual
void
NoteClosedAfterForget
(
const
nsID
&
aId
)
override
;
#
ifdef
DEBUG
virtual
void
AssertOwningThread
(
)
override
;
#
endif
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvOpenStream
(
const
nsID
&
aStreamId
OpenStreamResolver
&
&
aResolve
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNoteClosed
(
const
nsID
&
aId
)
override
;
void
NotifyClose
(
const
nsID
&
aId
)
;
void
NotifyCloseAll
(
)
;
RefPtr
<
StreamList
>
mStreamList
;
NS_DECL_OWNINGTHREAD
}
;
}
}
}
#
endif
