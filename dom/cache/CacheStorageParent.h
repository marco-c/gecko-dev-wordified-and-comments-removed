#
ifndef
mozilla_dom_cache_CacheStorageParent_h
#
define
mozilla_dom_cache_CacheStorageParent_h
#
include
"
mozilla
/
dom
/
cache
/
PCacheStorageParent
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
PrincipalVerifier
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
cache
{
class
ManagerId
;
class
CacheStorageParent
final
:
public
PCacheStorageParent
public
PrincipalVerifier
:
:
Listener
{
friend
class
PCacheStorageParent
;
public
:
CacheStorageParent
(
PBackgroundParent
*
aManagingActor
Namespace
aNamespace
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
;
virtual
~
CacheStorageParent
(
)
;
private
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
PCacheOpParent
*
AllocPCacheOpParent
(
const
CacheOpArgs
&
aOpArgs
)
;
bool
DeallocPCacheOpParent
(
PCacheOpParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPCacheOpConstructor
(
PCacheOpParent
*
actor
const
CacheOpArgs
&
aOpArgs
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvTeardown
(
)
override
;
virtual
void
OnPrincipalVerified
(
nsresult
aRv
ManagerId
*
aManagerId
)
override
;
const
Namespace
mNamespace
;
RefPtr
<
PrincipalVerifier
>
mVerifier
;
nsresult
mVerifiedStatus
;
RefPtr
<
ManagerId
>
mManagerId
;
}
;
}
}
}
#
endif
