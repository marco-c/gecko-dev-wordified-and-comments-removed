#
ifndef
mozilla_dom_cache_AutoUtils_h
#
define
mozilla_dom_cache_AutoUtils_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
InitializedOnce
.
h
"
#
include
"
mozilla
/
dom
/
SafeRefPtr
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheTypes
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
TypeUtils
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
Types
.
h
"
#
include
"
nsTArray
.
h
"
struct
nsID
;
namespace
mozilla
{
class
ErrorResult
;
namespace
ipc
{
class
PBackgroundParent
;
}
namespace
dom
{
class
InternalRequest
;
namespace
cache
{
class
CacheStreamControlParent
;
class
Manager
;
struct
SavedRequest
;
struct
SavedResponse
;
class
StreamList
;
class
MOZ_STACK_CLASS
AutoChildOpArgs
final
{
public
:
using
BodyAction
=
TypeUtils
:
:
BodyAction
;
using
SchemeAction
=
TypeUtils
:
:
SchemeAction
;
AutoChildOpArgs
(
TypeUtils
*
aTypeUtils
const
CacheOpArgs
&
aOpArgs
uint32_t
aEntryCount
)
;
~
AutoChildOpArgs
(
)
;
void
Add
(
const
InternalRequest
&
aRequest
BodyAction
aBodyAction
SchemeAction
aSchemeAction
ErrorResult
&
aRv
)
;
void
Add
(
JSContext
*
aCx
const
InternalRequest
&
aRequest
BodyAction
aBodyAction
SchemeAction
aSchemeAction
Response
&
aResponse
ErrorResult
&
aRv
)
;
const
CacheOpArgs
&
SendAsOpArgs
(
)
;
private
:
TypeUtils
*
mTypeUtils
;
CacheOpArgs
mOpArgs
;
bool
mSent
;
}
;
class
MOZ_STACK_CLASS
AutoParentOpResult
final
{
public
:
AutoParentOpResult
(
const
WeakRefParentType
&
aManager
const
CacheOpResult
&
aOpResult
uint32_t
aEntryCount
)
;
~
AutoParentOpResult
(
)
;
void
Add
(
CacheId
aOpenedCacheId
SafeRefPtr
<
Manager
>
aManager
)
;
void
Add
(
const
SavedResponse
&
aSavedResponse
StreamList
&
aStreamList
)
;
void
Add
(
const
SavedRequest
&
aSavedRequest
StreamList
&
aStreamList
)
;
const
CacheOpResult
&
SendAsOpResult
(
)
;
private
:
void
SerializeResponseBody
(
const
SavedResponse
&
aSavedResponse
StreamList
&
aStreamList
CacheResponse
*
aResponseOut
)
;
void
SerializeReadStream
(
const
nsID
&
aId
StreamList
&
aStreamList
CacheReadStream
*
aReadStreamOut
)
;
const
WeakRefParentType
mManager
;
CacheOpResult
mOpResult
;
CacheStreamControlParent
*
mStreamControl
;
bool
mSent
;
}
;
}
}
}
#
endif
