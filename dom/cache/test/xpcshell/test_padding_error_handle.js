function
getTempPaddingFilePath
(
)
{
let
cacheDir
=
getCacheDir
(
)
;
let
temporaryPaddingFile
=
cacheDir
.
clone
(
)
;
temporaryPaddingFile
.
append
(
"
.
padding
-
tmp
"
)
;
return
temporaryPaddingFile
;
}
function
createTempPaddingFile
(
)
{
let
temporaryPaddingFile
=
getTempPaddingFilePath
(
)
;
temporaryPaddingFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
parseInt
(
"
0644
"
8
)
)
;
ok
(
temporaryPaddingFile
.
exists
(
)
"
Temporary
padding
file
does
be
created
by
test
"
)
;
}
async
function
run_test
(
)
{
do_test_pending
(
)
;
create_test_profile
(
'
schema_25_profile
.
zip
'
)
;
let
cache
=
await
caches
.
open
(
"
test
"
)
;
createTempPaddingFile
(
)
;
let
response
=
await
cache
.
match
(
"
https
:
/
/
www
.
mozilla
.
org
"
)
;
ok
(
!
!
response
"
Upgrade
from
25
to
26
do
succeed
"
)
;
let
temporaryPaddingFile
=
getTempPaddingFilePath
(
)
;
ok
(
temporaryPaddingFile
.
exists
(
)
"
Temporary
padding
file
doesn
'
t
be
removed
by
cache
.
match
"
)
;
await
cache
.
put
(
"
https
:
/
/
foo
.
com
"
response
)
;
ok
(
!
temporaryPaddingFile
.
exists
(
)
"
Temporary
padding
file
does
be
removed
by
cache
.
put
"
)
;
createTempPaddingFile
(
)
;
let
cacheEntries
=
await
cache
.
keys
(
"
https
:
/
/
foo
.
com
"
)
;
ok
(
cacheEntries
.
length
=
=
=
1
"
Cache
.
put
does
succeed
"
)
;
ok
(
temporaryPaddingFile
.
exists
(
)
"
Temporary
padding
file
doesn
'
t
be
removed
by
cache
.
keys
"
)
;
await
cache
.
delete
(
"
https
:
/
/
foo
.
com
"
)
;
ok
(
!
temporaryPaddingFile
.
exists
(
)
"
Temporary
padding
file
does
be
removed
by
cache
.
delete
"
)
;
await
caches
.
delete
(
"
test
"
)
;
do_test_finished
(
)
;
}
