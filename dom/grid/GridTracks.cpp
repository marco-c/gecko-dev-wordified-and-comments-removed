#
include
"
GridTracks
.
h
"
#
include
"
GridDimension
.
h
"
#
include
"
GridTrack
.
h
"
#
include
"
mozilla
/
dom
/
GridBinding
.
h
"
#
include
"
nsGridContainerFrame
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
GridTracks
mParent
mTracks
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
GridTracks
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
GridTracks
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
GridTracks
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
GridTracks
:
:
GridTracks
(
GridDimension
*
aParent
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
aParent
"
Should
never
be
instantiated
with
a
null
GridDimension
"
)
;
}
GridTracks
:
:
~
GridTracks
(
)
{
}
JSObject
*
GridTracks
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
GridTracksBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
uint32_t
GridTracks
:
:
Length
(
)
const
{
return
mTracks
.
Length
(
)
;
}
GridTrack
*
GridTracks
:
:
Item
(
uint32_t
aIndex
)
{
return
mTracks
.
SafeElementAt
(
aIndex
)
;
}
GridTrack
*
GridTracks
:
:
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
{
aFound
=
aIndex
<
mTracks
.
Length
(
)
;
if
(
!
aFound
)
{
return
nullptr
;
}
return
mTracks
[
aIndex
]
;
}
void
GridTracks
:
:
SetTrackInfo
(
const
ComputedGridTrackInfo
*
aTrackInfo
)
{
mTracks
.
Clear
(
)
;
if
(
!
aTrackInfo
)
{
return
;
}
for
(
size_t
i
=
aTrackInfo
-
>
mStartFragmentTrack
;
i
<
aTrackInfo
-
>
mEndFragmentTrack
;
i
+
+
)
{
GridTrack
*
track
=
new
GridTrack
(
this
)
;
mTracks
.
AppendElement
(
track
)
;
track
-
>
SetTrackValues
(
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aTrackInfo
-
>
mPositions
[
i
]
)
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aTrackInfo
-
>
mSizes
[
i
]
)
(
(
i
<
aTrackInfo
-
>
mNumLeadingImplicitTracks
)
|
|
(
i
>
=
aTrackInfo
-
>
mNumLeadingImplicitTracks
+
aTrackInfo
-
>
mNumExplicitTracks
)
?
GridDeclaration
:
:
Implicit
:
GridDeclaration
:
:
Explicit
)
GridTrackState
(
aTrackInfo
-
>
mStates
[
i
]
)
)
;
}
}
}
}
