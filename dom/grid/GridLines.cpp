#
include
"
GridLines
.
h
"
#
include
"
GridDimension
.
h
"
#
include
"
GridLine
.
h
"
#
include
"
mozilla
/
dom
/
GridBinding
.
h
"
#
include
"
nsGridContainerFrame
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
GridLines
mParent
mLines
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
GridLines
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
GridLines
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
GridLines
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
GridLines
:
:
GridLines
(
GridDimension
*
aParent
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
aParent
"
Should
never
be
instantiated
with
a
null
GridDimension
"
)
;
}
GridLines
:
:
~
GridLines
(
)
{
}
JSObject
*
GridLines
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
GridLinesBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
uint32_t
GridLines
:
:
Length
(
)
const
{
return
mLines
.
Length
(
)
;
}
GridLine
*
GridLines
:
:
Item
(
uint32_t
aIndex
)
{
return
mLines
.
SafeElementAt
(
aIndex
)
;
}
GridLine
*
GridLines
:
:
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
{
aFound
=
aIndex
<
mLines
.
Length
(
)
;
if
(
!
aFound
)
{
return
nullptr
;
}
return
mLines
[
aIndex
]
;
}
void
GridLines
:
:
SetLineInfo
(
const
ComputedGridTrackInfo
*
aTrackInfo
const
ComputedGridLineInfo
*
aLineInfo
const
nsTArray
<
RefPtr
<
GridArea
>
>
&
aAreas
bool
aIsRow
)
{
MOZ_ASSERT
(
aLineInfo
)
;
mLines
.
Clear
(
)
;
if
(
!
aTrackInfo
)
{
return
;
}
uint32_t
lineCount
=
aTrackInfo
-
>
mEndFragmentTrack
-
aTrackInfo
-
>
mStartFragmentTrack
+
1
;
if
(
lineCount
>
0
)
{
nscoord
lastTrackEdge
=
0
;
nscoord
startOfNextTrack
;
uint32_t
repeatIndex
=
0
;
uint32_t
numRepeatTracks
=
aTrackInfo
-
>
mRemovedRepeatTracks
.
Length
(
)
;
uint32_t
numAddedLines
=
0
;
uint32_t
leadingTrackCount
=
aTrackInfo
-
>
mNumLeadingImplicitTracks
+
aTrackInfo
-
>
mNumExplicitTracks
;
if
(
numRepeatTracks
>
0
)
{
for
(
auto
&
removedTrack
:
aTrackInfo
-
>
mRemovedRepeatTracks
)
{
if
(
removedTrack
)
{
+
+
leadingTrackCount
;
}
}
}
for
(
uint32_t
i
=
aTrackInfo
-
>
mStartFragmentTrack
;
i
<
aTrackInfo
-
>
mEndFragmentTrack
+
1
;
i
+
+
)
{
const
uint32_t
line1Index
=
i
+
1
;
startOfNextTrack
=
(
i
<
aTrackInfo
-
>
mEndFragmentTrack
)
?
aTrackInfo
-
>
mPositions
[
i
]
:
lastTrackEdge
;
nsTArray
<
nsString
>
lineNames
;
lineNames
=
aLineInfo
-
>
mNames
.
SafeElementAt
(
i
nsTArray
<
nsString
>
(
)
)
;
for
(
auto
area
:
aAreas
)
{
bool
haveNameToAdd
=
false
;
nsAutoString
nameToAdd
;
area
-
>
GetName
(
nameToAdd
)
;
if
(
aIsRow
)
{
if
(
area
-
>
RowStart
(
)
=
=
line1Index
)
{
haveNameToAdd
=
true
;
nameToAdd
.
AppendLiteral
(
"
-
start
"
)
;
}
else
if
(
area
-
>
RowEnd
(
)
=
=
line1Index
)
{
haveNameToAdd
=
true
;
nameToAdd
.
AppendLiteral
(
"
-
end
"
)
;
}
}
else
{
if
(
area
-
>
ColumnStart
(
)
=
=
line1Index
)
{
haveNameToAdd
=
true
;
nameToAdd
.
AppendLiteral
(
"
-
start
"
)
;
}
else
if
(
area
-
>
ColumnEnd
(
)
=
=
line1Index
)
{
haveNameToAdd
=
true
;
nameToAdd
.
AppendLiteral
(
"
-
end
"
)
;
}
}
if
(
haveNameToAdd
&
&
!
lineNames
.
Contains
(
nameToAdd
)
)
{
lineNames
.
AppendElement
(
nameToAdd
)
;
}
}
if
(
i
>
=
(
aTrackInfo
-
>
mRepeatFirstTrack
+
aTrackInfo
-
>
mNumLeadingImplicitTracks
)
&
&
repeatIndex
<
numRepeatTracks
)
{
numAddedLines
+
=
AppendRemovedAutoFits
(
aTrackInfo
aLineInfo
lastTrackEdge
repeatIndex
numRepeatTracks
leadingTrackCount
lineNames
)
;
}
RefPtr
<
GridLine
>
line
=
new
GridLine
(
this
)
;
mLines
.
AppendElement
(
line
)
;
MOZ_ASSERT
(
line1Index
>
0
"
line1Index
must
be
positive
.
"
)
;
bool
isBeforeFirstExplicit
=
(
line1Index
<
=
aTrackInfo
-
>
mNumLeadingImplicitTracks
)
;
bool
isAfterLastExplicit
=
line1Index
>
(
leadingTrackCount
+
1
)
;
uint32_t
lineNumber
=
isBeforeFirstExplicit
?
0
:
(
line1Index
+
numAddedLines
-
aTrackInfo
-
>
mNumLeadingImplicitTracks
)
;
int32_t
lineNegativeNumber
=
isAfterLastExplicit
?
0
:
(
line1Index
+
numAddedLines
-
(
leadingTrackCount
+
2
)
)
;
GridDeclaration
lineType
=
(
isBeforeFirstExplicit
|
|
isAfterLastExplicit
)
?
GridDeclaration
:
:
Implicit
:
GridDeclaration
:
:
Explicit
;
line
-
>
SetLineValues
(
lineNames
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
lastTrackEdge
)
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
startOfNextTrack
-
lastTrackEdge
)
lineNumber
lineNegativeNumber
lineType
)
;
if
(
i
<
aTrackInfo
-
>
mEndFragmentTrack
)
{
lastTrackEdge
=
aTrackInfo
-
>
mPositions
[
i
]
+
aTrackInfo
-
>
mSizes
[
i
]
;
}
}
}
}
uint32_t
GridLines
:
:
AppendRemovedAutoFits
(
const
ComputedGridTrackInfo
*
aTrackInfo
const
ComputedGridLineInfo
*
aLineInfo
nscoord
aLastTrackEdge
uint32_t
&
aRepeatIndex
uint32_t
aNumRepeatTracks
uint32_t
aNumLeadingTracks
nsTArray
<
nsString
>
&
aLineNames
)
{
bool
alreadyHasBeforeLineNames
=
true
;
for
(
const
auto
&
beforeName
:
aLineInfo
-
>
mNamesBefore
)
{
if
(
!
aLineNames
.
Contains
(
beforeName
)
)
{
alreadyHasBeforeLineNames
=
false
;
break
;
}
}
bool
extractedExplicitLineNames
=
false
;
nsTArray
<
nsString
>
explicitLineNames
;
uint32_t
linesAdded
=
0
;
while
(
aRepeatIndex
<
aNumRepeatTracks
&
&
aTrackInfo
-
>
mRemovedRepeatTracks
[
aRepeatIndex
]
)
{
if
(
aRepeatIndex
>
0
&
&
linesAdded
=
=
0
)
{
for
(
const
auto
&
name
:
aLineNames
)
{
if
(
!
aLineInfo
-
>
mNamesBefore
.
Contains
(
name
)
&
&
!
aLineInfo
-
>
mNamesAfter
.
Contains
(
name
)
)
{
explicitLineNames
.
AppendElement
(
name
)
;
}
}
for
(
const
auto
&
extractedName
:
explicitLineNames
)
{
aLineNames
.
RemoveElement
(
extractedName
)
;
}
extractedExplicitLineNames
=
true
;
}
if
(
linesAdded
>
0
|
|
!
alreadyHasBeforeLineNames
)
{
aLineNames
.
AppendElements
(
aLineInfo
-
>
mNamesBefore
)
;
}
RefPtr
<
GridLine
>
line
=
new
GridLine
(
this
)
;
mLines
.
AppendElement
(
line
)
;
uint32_t
lineNumber
=
aTrackInfo
-
>
mRepeatFirstTrack
+
aRepeatIndex
+
1
;
int32_t
lineNegativeNumber
=
(
aTrackInfo
-
>
mNumLeadingImplicitTracks
+
aTrackInfo
-
>
mRepeatFirstTrack
+
aRepeatIndex
)
-
(
aNumLeadingTracks
+
1
)
;
line
-
>
SetLineValues
(
aLineNames
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aLastTrackEdge
)
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
0
)
lineNumber
lineNegativeNumber
GridDeclaration
:
:
Explicit
)
;
aLineNames
=
aLineInfo
-
>
mNamesAfter
;
aRepeatIndex
+
+
;
linesAdded
+
+
;
}
aRepeatIndex
+
+
;
if
(
extractedExplicitLineNames
)
{
aLineNames
.
AppendElements
(
explicitLineNames
)
;
}
if
(
alreadyHasBeforeLineNames
&
&
linesAdded
>
0
)
{
aLineNames
.
AppendElements
(
aLineInfo
-
>
mNamesBefore
)
;
}
return
linesAdded
;
}
}
}
