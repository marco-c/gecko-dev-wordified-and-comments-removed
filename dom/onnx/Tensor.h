#
ifndef
DOM_TENSOR_H_
#
define
DOM_TENSOR_H_
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ONNXBinding
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
OnxRunTimeIncludeWrapper
.
h
"
namespace
mozilla
:
:
dom
{
class
Promise
;
class
Tensor
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
Tensor
)
public
:
Tensor
(
const
GlobalObject
&
global
const
nsACString
&
type
const
nsTArray
<
uint8_t
>
&
data
const
Sequence
<
int32_t
>
&
dims
)
;
Tensor
(
const
GlobalObject
&
global
const
nsACString
&
type
const
ArrayBufferView
&
data
const
Sequence
<
int32_t
>
&
dims
)
;
Tensor
(
const
GlobalObject
&
aGlobal
ONNXTensorElementDataType
aType
nsTArray
<
uint8_t
>
aData
nsTArray
<
int64_t
>
aDims
)
;
static
already_AddRefed
<
Tensor
>
Constructor
(
const
GlobalObject
&
global
const
nsACString
&
type
const
ArrayBufferViewOrAnySequence
&
data
const
Sequence
<
int32_t
>
&
dims
ErrorResult
&
aRv
)
;
protected
:
~
Tensor
(
)
=
default
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetDims
(
nsTArray
<
int32_t
>
&
aRetVal
)
;
void
SetDims
(
const
nsTArray
<
int32_t
>
&
aVal
)
;
void
GetType
(
nsCString
&
aRetVal
)
const
;
void
GetData
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
)
const
;
TensorDataLocation
Location
(
)
const
;
already_AddRefed
<
Promise
>
GetData
(
const
Optional
<
bool
>
&
releaseData
)
;
void
Dispose
(
)
;
uint8_t
*
Data
(
)
{
return
mData
.
Elements
(
)
;
}
size_t
Size
(
)
{
return
mData
.
Length
(
)
;
}
int32_t
*
Dims
(
)
{
return
mDims
.
Elements
(
)
;
}
size_t
DimsSize
(
)
{
return
mDims
.
Length
(
)
;
}
ONNXTensorElementDataType
Type
(
)
const
;
nsCString
TypeString
(
)
const
;
nsLiteralCString
ONNXTypeToString
(
ONNXTensorElementDataType
aType
)
const
;
nsCString
ToString
(
)
const
;
static
ONNXTensorElementDataType
StringToONNXDataType
(
const
nsACString
&
aString
)
;
static
size_t
DataTypeSize
(
ONNXTensorElementDataType
aType
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCString
mType
;
nsTArray
<
uint8_t
>
mData
;
nsTArray
<
int32_t
>
mDims
;
}
;
}
#
endif
