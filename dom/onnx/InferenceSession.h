#
ifndef
DOM_INFERENCESESSION_H_
#
define
DOM_INFERENCESESSION_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
IOUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
ONNXBinding
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
Record
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
OnxRunTimeIncludeWrapper
.
h
"
namespace
mozilla
:
:
dom
{
OrtApi
*
GetOrtAPI
(
)
;
struct
InferenceSessionRunOptions
;
class
Promise
;
class
Tensor
;
class
InferenceSession
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
InferenceSession
(
GlobalObject
&
aGlobal
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
mGlobal
=
global
;
mCtx
=
aGlobal
.
Context
(
)
;
}
static
bool
InInferenceProcess
(
JSContext
*
JSObject
*
)
;
protected
:
virtual
~
InferenceSession
(
)
{
Destroy
(
)
;
}
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
;
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
InferenceSession
)
;
static
RefPtr
<
Promise
>
Create
(
GlobalObject
&
aGlobal
const
UTF8StringOrUint8Array
&
aUriOrBuffer
const
InferenceSessionSessionOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
Init
(
const
RefPtr
<
Promise
>
&
aPromise
const
UTF8StringOrUint8Array
&
aUriOrBuffer
const
InferenceSessionSessionOptions
&
aOptions
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Run
(
const
Record
<
nsCString
OwningNonNull
<
Tensor
>
>
&
feeds
const
InferenceSessionRunOptions
&
options
ErrorResult
&
aRv
)
;
void
Destroy
(
)
;
already_AddRefed
<
Promise
>
ReleaseSession
(
)
;
void
StartProfiling
(
)
;
void
EndProfiling
(
)
;
void
GetInputNames
(
nsTArray
<
nsCString
>
&
aRetVal
)
const
;
void
GetOutputNames
(
nsTArray
<
nsCString
>
&
aRetVal
)
const
;
protected
:
enum
class
NameDirection
{
Input
Output
}
;
void
GetNames
(
nsTArray
<
nsCString
>
&
aRetVal
NameDirection
aDirectionInput
)
const
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
JSContext
*
mCtx
;
OrtSessionOptions
*
mOptions
=
nullptr
;
OrtSession
*
mSession
=
nullptr
;
}
;
}
#
endif
