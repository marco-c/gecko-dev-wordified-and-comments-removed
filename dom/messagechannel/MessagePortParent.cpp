#
include
"
MessagePortParent
.
h
"
#
include
"
MessagePortService
.
h
"
#
include
"
mozilla
/
dom
/
RefMessageBodyService
.
h
"
#
include
"
mozilla
/
dom
/
SharedMessageBody
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
:
:
dom
{
MessagePortParent
:
:
MessagePortParent
(
const
nsID
&
aUUID
)
:
mService
(
MessagePortService
:
:
GetOrCreate
(
)
)
mUUID
(
aUUID
)
mEntangled
(
false
)
mCanSendData
(
true
)
{
MOZ_ASSERT
(
mService
)
;
}
MessagePortParent
:
:
~
MessagePortParent
(
)
{
MOZ_ASSERT
(
!
mService
)
;
MOZ_ASSERT
(
!
mEntangled
)
;
}
bool
MessagePortParent
:
:
Entangle
(
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
{
if
(
!
mService
)
{
NS_WARNING
(
"
Entangle
is
called
after
a
shutdown
!
"
)
;
return
false
;
}
MOZ_ASSERT
(
!
mEntangled
)
;
return
mService
-
>
RequestEntangling
(
this
aDestinationUUID
aSequenceID
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
MessagePortParent
:
:
RecvPostMessages
(
nsTArray
<
MessageData
>
&
&
aMessages
)
{
if
(
!
mService
)
{
NS_WARNING
(
"
PostMessages
is
called
after
a
shutdown
!
"
)
;
return
IPC_OK
(
)
;
}
if
(
!
mEntangled
)
{
return
IPC_FAIL
(
this
"
RecvPostMessages
not
entangled
"
)
;
}
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
messages
;
if
(
NS_WARN_IF
(
!
SharedMessageBody
:
:
FromMessagesToSharedParent
(
aMessages
messages
)
)
)
{
return
IPC_FAIL
(
this
"
SharedMessageBody
:
:
FromMessagesToSharedParent
"
)
;
}
if
(
messages
.
IsEmpty
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
!
mService
-
>
PostMessages
(
this
std
:
:
move
(
messages
)
)
)
{
return
IPC_FAIL
(
this
"
RecvPostMessages
-
>
PostMessages
"
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
MessagePortParent
:
:
RecvDisentangle
(
nsTArray
<
MessageData
>
&
&
aMessages
)
{
if
(
!
mService
)
{
NS_WARNING
(
"
Entangle
is
called
after
a
shutdown
!
"
)
;
return
IPC_OK
(
)
;
}
if
(
!
mEntangled
)
{
return
IPC_FAIL
(
this
"
RecvDisentangle
not
entangled
"
)
;
}
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
messages
;
if
(
NS_WARN_IF
(
!
SharedMessageBody
:
:
FromMessagesToSharedParent
(
aMessages
messages
)
)
)
{
return
IPC_FAIL
(
this
"
SharedMessageBody
:
:
FromMessagesToSharedParent
"
)
;
}
if
(
!
mService
-
>
DisentanglePort
(
this
std
:
:
move
(
messages
)
)
)
{
return
IPC_FAIL
(
this
"
RecvDisentangle
-
>
DisentanglePort
"
)
;
}
CloseAndDelete
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
MessagePortParent
:
:
RecvStopSendingData
(
)
{
if
(
!
mEntangled
)
{
return
IPC_OK
(
)
;
}
mCanSendData
=
false
;
Unused
<
<
SendStopSendingDataConfirmed
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
MessagePortParent
:
:
RecvClose
(
)
{
if
(
mService
)
{
MOZ_ASSERT
(
mEntangled
)
;
if
(
!
mService
-
>
ClosePort
(
this
)
)
{
return
IPC_FAIL
(
this
"
RecvClose
-
>
ClosePort
"
)
;
}
Close
(
)
;
}
MOZ_ASSERT
(
!
mEntangled
)
;
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
void
MessagePortParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mService
&
&
mEntangled
)
{
RefPtr
<
MessagePortService
>
kungFuDeathGrip
=
mService
;
kungFuDeathGrip
-
>
ParentDestroy
(
this
)
;
}
}
bool
MessagePortParent
:
:
Entangled
(
nsTArray
<
MessageData
>
&
&
aMessages
)
{
MOZ_ASSERT
(
!
mEntangled
)
;
mEntangled
=
true
;
return
SendEntangled
(
aMessages
)
;
}
void
MessagePortParent
:
:
CloseAndDelete
(
)
{
Close
(
)
;
Unused
<
<
Send__delete__
(
this
)
;
}
void
MessagePortParent
:
:
Close
(
)
{
mService
=
nullptr
;
mEntangled
=
false
;
}
bool
MessagePortParent
:
:
ForceClose
(
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
{
MessagePortService
*
service
=
MessagePortService
:
:
Get
(
)
;
if
(
!
service
)
{
NS_WARNING
(
"
The
service
must
exist
if
we
want
to
close
an
existing
MessagePort
.
"
)
;
return
true
;
}
return
service
-
>
ForceClose
(
aUUID
aDestinationUUID
aSequenceID
)
;
}
}
