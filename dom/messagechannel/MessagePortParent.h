#
ifndef
mozilla_dom_MessagePortParent_h
#
define
mozilla_dom_MessagePortParent_h
#
include
"
mozilla
/
dom
/
PMessagePortParent
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
CheckedUnsafePtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MessagePortService
;
class
MessagePortParent
final
:
public
PMessagePortParent
public
SupportsCheckedUnsafePtr
<
CheckIf
<
DiagnosticAssertEnabled
>
>
{
friend
class
PMessagePortParent
;
public
:
explicit
MessagePortParent
(
const
nsID
&
aUUID
)
;
~
MessagePortParent
(
)
;
bool
Entangle
(
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
;
bool
Entangled
(
const
nsTArray
<
ClonedMessageData
>
&
aMessages
)
;
void
Close
(
)
;
void
CloseAndDelete
(
)
;
bool
CanSendData
(
)
const
{
return
mCanSendData
;
}
const
nsID
&
ID
(
)
const
{
return
mUUID
;
}
static
bool
ForceClose
(
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
;
private
:
mozilla
:
:
ipc
:
:
IPCResult
RecvPostMessages
(
nsTArray
<
ClonedMessageData
>
&
&
aMessages
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDisentangle
(
nsTArray
<
ClonedMessageData
>
&
&
aMessages
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStopSendingData
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
RefPtr
<
MessagePortService
>
mService
;
const
nsID
mUUID
;
bool
mEntangled
;
bool
mCanSendData
;
}
;
}
}
#
endif
