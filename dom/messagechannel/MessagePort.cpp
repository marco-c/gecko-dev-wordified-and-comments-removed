#
include
"
MessagePort
.
h
"
#
include
"
MessageEvent
.
h
"
#
include
"
MessagePortChild
.
h
"
#
include
"
mozilla
/
dom
/
BlobBinding
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
MessageChannel
.
h
"
#
include
"
mozilla
/
dom
/
MessageEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
MessagePortBinding
.
h
"
#
include
"
mozilla
/
dom
/
MessagePortChild
.
h
"
#
include
"
mozilla
/
dom
/
PMessagePort
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneTags
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
MessagePortTimelineMarker
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
TimelineConsumers
.
h
"
#
include
"
mozilla
/
TimelineMarker
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
SharedMessagePortMessage
.
h
"
#
include
"
nsIBFCacheEntry
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
namespace
mozilla
{
namespace
dom
{
class
PostMessageRunnable
final
:
public
CancelableRunnable
{
friend
class
MessagePort
;
public
:
PostMessageRunnable
(
MessagePort
*
aPort
SharedMessagePortMessage
*
aData
)
:
CancelableRunnable
(
"
dom
:
:
PostMessageRunnable
"
)
mPort
(
aPort
)
mData
(
aData
)
{
MOZ_ASSERT
(
aPort
)
;
MOZ_ASSERT
(
aData
)
;
}
NS_IMETHOD
Run
(
)
override
{
NS_ASSERT_OWNINGTHREAD
(
Runnable
)
;
if
(
!
mPort
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
mPort
-
>
mPostMessageRunnable
=
=
this
)
;
nsresult
rv
=
DispatchMessage
(
)
;
mPort
-
>
UpdateMustKeepAlive
(
)
;
mPort
-
>
mPostMessageRunnable
=
nullptr
;
mPort
-
>
Dispatch
(
)
;
return
rv
;
}
nsresult
Cancel
(
)
override
{
NS_ASSERT_OWNINGTHREAD
(
Runnable
)
;
mPort
=
nullptr
;
mData
=
nullptr
;
return
NS_OK
;
}
private
:
nsresult
DispatchMessage
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
Runnable
)
;
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
mPort
-
>
GetParentObject
(
)
;
AutoJSAPI
jsapi
;
if
(
!
globalObject
|
|
!
jsapi
.
Init
(
globalObject
)
)
{
NS_WARNING
(
"
Failed
to
initialize
AutoJSAPI
object
.
"
)
;
return
NS_ERROR_FAILURE
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
ErrorResult
rv
;
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
cx
)
;
UniquePtr
<
AbstractTimelineMarker
>
start
;
UniquePtr
<
AbstractTimelineMarker
>
end
;
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
bool
isTimelineRecording
=
timelines
&
&
!
timelines
-
>
IsEmpty
(
)
;
if
(
isTimelineRecording
)
{
start
=
MakeUnique
<
MessagePortTimelineMarker
>
(
ProfileTimelineMessagePortOperationType
:
:
DeserializeData
MarkerTracingType
:
:
START
)
;
}
mData
-
>
Read
(
cx
&
value
rv
)
;
if
(
isTimelineRecording
)
{
end
=
MakeUnique
<
MessagePortTimelineMarker
>
(
ProfileTimelineMessagePortOperationType
:
:
DeserializeData
MarkerTracingType
:
:
END
)
;
timelines
-
>
AddMarkerForAllObservedDocShells
(
start
)
;
timelines
-
>
AddMarkerForAllObservedDocShells
(
end
)
;
}
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
mPort
-
>
DispatchError
(
)
;
return
rv
.
StealNSResult
(
)
;
}
nsCOMPtr
<
mozilla
:
:
dom
:
:
EventTarget
>
eventTarget
=
do_QueryInterface
(
mPort
-
>
GetOwner
(
)
)
;
RefPtr
<
MessageEvent
>
event
=
new
MessageEvent
(
eventTarget
nullptr
nullptr
)
;
Sequence
<
OwningNonNull
<
MessagePort
>
>
ports
;
if
(
!
mData
-
>
TakeTransferredPortsAsSequence
(
ports
)
)
{
mPort
-
>
DispatchError
(
)
;
return
NS_ERROR_OUT_OF_MEMORY
;
}
event
-
>
InitMessageEvent
(
nullptr
NS_LITERAL_STRING
(
"
message
"
)
CanBubble
:
:
eNo
Cancelable
:
:
eNo
value
EmptyString
(
)
EmptyString
(
)
nullptr
ports
)
;
event
-
>
SetTrusted
(
true
)
;
mPort
-
>
DispatchEvent
(
*
event
)
;
return
NS_OK
;
}
private
:
~
PostMessageRunnable
(
)
{
}
RefPtr
<
MessagePort
>
mPort
;
RefPtr
<
SharedMessagePortMessage
>
mData
;
}
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
MessagePort
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
MessagePort
DOMEventTargetHelper
)
if
(
tmp
-
>
mPostMessageRunnable
)
{
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPostMessageRunnable
-
>
mPort
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mMessagesForTheOtherPort
)
;
tmp
-
>
CloseForced
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
MessagePort
DOMEventTargetHelper
)
if
(
tmp
-
>
mPostMessageRunnable
)
{
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPostMessageRunnable
-
>
mPort
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mUnshippedEntangledPort
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MessagePort
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
MessagePort
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
MessagePort
DOMEventTargetHelper
)
MessagePort
:
:
MessagePort
(
nsIGlobalObject
*
aGlobal
State
aState
)
:
DOMEventTargetHelper
(
aGlobal
)
mState
(
aState
)
mMessageQueueEnabled
(
false
)
mIsKeptAlive
(
false
)
mHasBeenTransferredOrClosed
(
false
)
{
MOZ_ASSERT
(
aGlobal
)
;
mIdentifier
=
new
MessagePortIdentifier
(
)
;
mIdentifier
-
>
neutered
(
)
=
true
;
mIdentifier
-
>
sequenceId
(
)
=
0
;
}
MessagePort
:
:
~
MessagePort
(
)
{
CloseForced
(
)
;
MOZ_ASSERT
(
!
mWorkerRef
)
;
}
already_AddRefed
<
MessagePort
>
MessagePort
:
:
Create
(
nsIGlobalObject
*
aGlobal
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aGlobal
)
;
RefPtr
<
MessagePort
>
mp
=
new
MessagePort
(
aGlobal
eStateUnshippedEntangled
)
;
mp
-
>
Initialize
(
aUUID
aDestinationUUID
1
false
aRv
)
;
return
mp
.
forget
(
)
;
}
already_AddRefed
<
MessagePort
>
MessagePort
:
:
Create
(
nsIGlobalObject
*
aGlobal
const
MessagePortIdentifier
&
aIdentifier
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aGlobal
)
;
RefPtr
<
MessagePort
>
mp
=
new
MessagePort
(
aGlobal
eStateEntangling
)
;
mp
-
>
Initialize
(
aIdentifier
.
uuid
(
)
aIdentifier
.
destinationUuid
(
)
aIdentifier
.
sequenceId
(
)
aIdentifier
.
neutered
(
)
aRv
)
;
return
mp
.
forget
(
)
;
}
void
MessagePort
:
:
UnshippedEntangle
(
MessagePort
*
aEntangledPort
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aEntangledPort
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mUnshippedEntangledPort
)
;
mUnshippedEntangledPort
=
aEntangledPort
;
}
void
MessagePort
:
:
Initialize
(
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
uint32_t
aSequenceID
bool
aNeutered
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
mIdentifier
)
;
mIdentifier
-
>
uuid
(
)
=
aUUID
;
mIdentifier
-
>
destinationUuid
(
)
=
aDestinationUUID
;
mIdentifier
-
>
sequenceId
(
)
=
aSequenceID
;
if
(
aNeutered
)
{
mState
=
eStateDisentangled
;
return
;
}
if
(
mState
=
=
eStateEntangling
)
{
if
(
!
ConnectToPBackground
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
}
else
{
MOZ_ASSERT
(
mState
=
=
eStateUnshippedEntangled
)
;
}
UpdateMustKeepAlive
(
)
;
if
(
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
)
{
RefPtr
<
MessagePort
>
self
=
this
;
RefPtr
<
StrongWorkerRef
>
strongWorkerRef
=
StrongWorkerRef
:
:
Create
(
workerPrivate
"
MessagePort
"
[
self
]
(
)
{
self
-
>
CloseForced
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
strongWorkerRef
)
)
{
mState
=
eStateDisentangled
;
UpdateMustKeepAlive
(
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
MOZ_ASSERT
(
!
mWorkerRef
)
;
mWorkerRef
=
std
:
:
move
(
strongWorkerRef
)
;
}
}
JSObject
*
MessagePort
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MessagePort_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
MessagePort
:
:
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
{
for
(
uint32_t
i
=
0
;
i
<
aTransferable
.
Length
(
)
;
+
+
i
)
{
JS
:
:
Rooted
<
JSObject
*
>
object
(
aCx
aTransferable
[
i
]
)
;
if
(
!
object
)
{
continue
;
}
MessagePort
*
port
=
nullptr
;
nsresult
rv
=
UNWRAP_OBJECT
(
MessagePort
&
object
port
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
port
=
=
this
)
{
aRv
.
Throw
(
NS_ERROR_DOM_DATA_CLONE_ERR
)
;
return
;
}
}
JS
:
:
Rooted
<
JS
:
:
Value
>
transferable
(
aCx
JS
:
:
UndefinedValue
(
)
)
;
aRv
=
nsContentUtils
:
:
CreateJSValueFromSequenceOfObject
(
aCx
aTransferable
&
transferable
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
RefPtr
<
SharedMessagePortMessage
>
data
=
new
SharedMessagePortMessage
(
)
;
UniquePtr
<
AbstractTimelineMarker
>
start
;
UniquePtr
<
AbstractTimelineMarker
>
end
;
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
bool
isTimelineRecording
=
timelines
&
&
!
timelines
-
>
IsEmpty
(
)
;
if
(
isTimelineRecording
)
{
start
=
MakeUnique
<
MessagePortTimelineMarker
>
(
ProfileTimelineMessagePortOperationType
:
:
SerializeData
MarkerTracingType
:
:
START
)
;
}
data
-
>
Write
(
aCx
aMessage
transferable
aRv
)
;
if
(
isTimelineRecording
)
{
end
=
MakeUnique
<
MessagePortTimelineMarker
>
(
ProfileTimelineMessagePortOperationType
:
:
SerializeData
MarkerTracingType
:
:
END
)
;
timelines
-
>
AddMarkerForAllObservedDocShells
(
start
)
;
timelines
-
>
AddMarkerForAllObservedDocShells
(
end
)
;
}
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
mState
>
eStateEntangled
)
{
return
;
}
if
(
mState
=
=
eStateUnshippedEntangled
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mUnshippedEntangledPort
)
;
mUnshippedEntangledPort
-
>
mMessages
.
AppendElement
(
data
)
;
mUnshippedEntangledPort
-
>
Dispatch
(
)
;
return
;
}
if
(
mState
=
=
eStateEntanglingForDisentangle
|
|
mState
=
=
eStateEntanglingForClose
)
{
return
;
}
RemoveDocFromBFCache
(
)
;
if
(
mState
=
=
eStateEntangling
)
{
mMessagesForTheOtherPort
.
AppendElement
(
data
)
;
return
;
}
MOZ_ASSERT
(
mActor
)
;
MOZ_ASSERT
(
mMessagesForTheOtherPort
.
IsEmpty
(
)
)
;
AutoTArray
<
RefPtr
<
SharedMessagePortMessage
>
1
>
array
;
array
.
AppendElement
(
data
)
;
AutoTArray
<
ClonedMessageData
1
>
messages
;
SharedMessagePortMessage
:
:
FromSharedToMessagesChild
(
mActor
array
messages
)
;
mActor
-
>
SendPostMessages
(
messages
)
;
}
void
MessagePort
:
:
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
PostMessageOptions
&
aOptions
ErrorResult
&
aRv
)
{
PostMessage
(
aCx
aMessage
aOptions
.
mTransfer
aRv
)
;
}
void
MessagePort
:
:
Start
(
)
{
if
(
mMessageQueueEnabled
)
{
return
;
}
mMessageQueueEnabled
=
true
;
Dispatch
(
)
;
}
void
MessagePort
:
:
Dispatch
(
)
{
if
(
!
mMessageQueueEnabled
|
|
mMessages
.
IsEmpty
(
)
|
|
mPostMessageRunnable
)
{
return
;
}
switch
(
mState
)
{
case
eStateUnshippedEntangled
:
break
;
case
eStateEntangling
:
break
;
case
eStateEntanglingForDisentangle
:
return
;
case
eStateEntanglingForClose
:
break
;
case
eStateEntangled
:
break
;
case
eStateDisentangling
:
return
;
case
eStateDisentangled
:
MOZ_CRASH
(
"
This
cannot
happen
.
"
)
;
break
;
case
eStateDisentangledForClose
:
break
;
}
RefPtr
<
SharedMessagePortMessage
>
data
=
mMessages
.
ElementAt
(
0
)
;
mMessages
.
RemoveElementAt
(
0
)
;
mPostMessageRunnable
=
new
PostMessageRunnable
(
this
data
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
GetOwnerGlobal
(
)
;
if
(
NS_IsMainThread
(
)
&
&
global
)
{
MOZ_ALWAYS_SUCCEEDS
(
global
-
>
Dispatch
(
TaskCategory
:
:
Other
do_AddRef
(
mPostMessageRunnable
)
)
)
;
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToCurrentThread
(
mPostMessageRunnable
)
)
;
}
void
MessagePort
:
:
Close
(
)
{
mHasBeenTransferredOrClosed
=
true
;
CloseInternal
(
true
)
;
}
void
MessagePort
:
:
CloseForced
(
)
{
CloseInternal
(
false
)
;
}
void
MessagePort
:
:
CloseInternal
(
bool
aSoftly
)
{
if
(
!
aSoftly
)
{
mMessages
.
Clear
(
)
;
}
if
(
mState
=
=
eStateUnshippedEntangled
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mUnshippedEntangledPort
)
;
RefPtr
<
MessagePort
>
port
=
std
:
:
move
(
mUnshippedEntangledPort
)
;
mState
=
eStateDisentangledForClose
;
port
-
>
CloseInternal
(
aSoftly
)
;
UpdateMustKeepAlive
(
)
;
return
;
}
if
(
mState
=
=
eStateEntangling
)
{
mState
=
eStateEntanglingForClose
;
return
;
}
if
(
mState
=
=
eStateEntanglingForDisentangle
|
|
mState
=
=
eStateEntanglingForClose
)
{
return
;
}
if
(
mState
=
=
eStateDisentangledForClose
&
&
!
aSoftly
)
{
UpdateMustKeepAlive
(
)
;
return
;
}
if
(
mState
>
eStateEntangled
)
{
return
;
}
mState
=
eStateDisentangledForClose
;
MOZ_ASSERT
(
mActor
)
;
mActor
-
>
SendClose
(
)
;
mActor
-
>
SetPort
(
nullptr
)
;
mActor
=
nullptr
;
UpdateMustKeepAlive
(
)
;
}
EventHandlerNonNull
*
MessagePort
:
:
GetOnmessage
(
)
{
return
GetEventHandler
(
nsGkAtoms
:
:
onmessage
)
;
}
void
MessagePort
:
:
SetOnmessage
(
EventHandlerNonNull
*
aCallback
)
{
SetEventHandler
(
nsGkAtoms
:
:
onmessage
aCallback
)
;
Start
(
)
;
}
void
MessagePort
:
:
Entangled
(
nsTArray
<
ClonedMessageData
>
&
aMessages
)
{
MOZ_ASSERT
(
mState
=
=
eStateEntangling
|
|
mState
=
=
eStateEntanglingForDisentangle
|
|
mState
=
=
eStateEntanglingForClose
)
;
State
oldState
=
mState
;
mState
=
eStateEntangled
;
if
(
!
mMessagesForTheOtherPort
.
IsEmpty
(
)
)
{
{
nsTArray
<
ClonedMessageData
>
messages
;
SharedMessagePortMessage
:
:
FromSharedToMessagesChild
(
mActor
mMessagesForTheOtherPort
messages
)
;
mActor
-
>
SendPostMessages
(
messages
)
;
}
mMessagesForTheOtherPort
.
Clear
(
)
;
}
FallibleTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
data
;
if
(
NS_WARN_IF
(
!
SharedMessagePortMessage
:
:
FromMessagesToSharedChild
(
aMessages
data
)
)
)
{
DispatchError
(
)
;
return
;
}
if
(
oldState
=
=
eStateEntanglingForClose
)
{
CloseForced
(
)
;
return
;
}
mMessages
.
AppendElements
(
data
)
;
if
(
oldState
=
=
eStateEntanglingForDisentangle
)
{
StartDisentangling
(
)
;
return
;
}
Dispatch
(
)
;
}
void
MessagePort
:
:
StartDisentangling
(
)
{
MOZ_ASSERT
(
mActor
)
;
MOZ_ASSERT
(
mState
=
=
eStateEntangled
)
;
mState
=
eStateDisentangling
;
mActor
-
>
SendStopSendingData
(
)
;
}
void
MessagePort
:
:
MessagesReceived
(
nsTArray
<
ClonedMessageData
>
&
aMessages
)
{
MOZ_ASSERT
(
mState
=
=
eStateEntangled
|
|
mState
=
=
eStateDisentangling
|
|
mState
=
=
eStateDisentangledForClose
)
;
MOZ_ASSERT
(
mMessagesForTheOtherPort
.
IsEmpty
(
)
)
;
RemoveDocFromBFCache
(
)
;
FallibleTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
data
;
if
(
NS_WARN_IF
(
!
SharedMessagePortMessage
:
:
FromMessagesToSharedChild
(
aMessages
data
)
)
)
{
DispatchError
(
)
;
return
;
}
mMessages
.
AppendElements
(
data
)
;
if
(
mState
=
=
eStateEntangled
)
{
Dispatch
(
)
;
}
}
void
MessagePort
:
:
StopSendingDataConfirmed
(
)
{
MOZ_ASSERT
(
mState
=
=
eStateDisentangling
)
;
MOZ_ASSERT
(
mActor
)
;
Disentangle
(
)
;
}
void
MessagePort
:
:
Disentangle
(
)
{
MOZ_ASSERT
(
mState
=
=
eStateDisentangling
)
;
MOZ_ASSERT
(
mActor
)
;
mState
=
eStateDisentangled
;
{
nsTArray
<
ClonedMessageData
>
messages
;
SharedMessagePortMessage
:
:
FromSharedToMessagesChild
(
mActor
mMessages
messages
)
;
mActor
-
>
SendDisentangle
(
messages
)
;
}
mMessages
.
Clear
(
)
;
mActor
-
>
SetPort
(
nullptr
)
;
mActor
=
nullptr
;
UpdateMustKeepAlive
(
)
;
}
void
MessagePort
:
:
CloneAndDisentangle
(
MessagePortIdentifier
&
aIdentifier
)
{
MOZ_ASSERT
(
mIdentifier
)
;
MOZ_ASSERT
(
!
mHasBeenTransferredOrClosed
)
;
mHasBeenTransferredOrClosed
=
true
;
aIdentifier
.
neutered
(
)
=
true
;
if
(
mState
>
eStateEntangled
)
{
return
;
}
if
(
mState
=
=
eStateEntanglingForDisentangle
|
|
mState
=
=
eStateEntanglingForClose
)
{
return
;
}
aIdentifier
.
uuid
(
)
=
mIdentifier
-
>
uuid
(
)
;
aIdentifier
.
destinationUuid
(
)
=
mIdentifier
-
>
destinationUuid
(
)
;
aIdentifier
.
sequenceId
(
)
=
mIdentifier
-
>
sequenceId
(
)
+
1
;
aIdentifier
.
neutered
(
)
=
false
;
if
(
mState
=
=
eStateUnshippedEntangled
)
{
MOZ_ASSERT
(
mUnshippedEntangledPort
)
;
MOZ_ASSERT
(
mMessagesForTheOtherPort
.
IsEmpty
(
)
)
;
RefPtr
<
MessagePort
>
port
=
std
:
:
move
(
mUnshippedEntangledPort
)
;
if
(
!
port
-
>
ConnectToPBackground
(
)
)
{
mState
=
eStateDisentangled
;
UpdateMustKeepAlive
(
)
;
return
;
}
if
(
mMessages
.
IsEmpty
(
)
)
{
aIdentifier
.
sequenceId
(
)
=
mIdentifier
-
>
sequenceId
(
)
;
mState
=
eStateDisentangled
;
UpdateMustKeepAlive
(
)
;
return
;
}
if
(
!
ConnectToPBackground
(
)
)
{
return
;
}
mState
=
eStateEntanglingForDisentangle
;
return
;
}
if
(
mState
=
=
eStateEntangling
)
{
mState
=
eStateEntanglingForDisentangle
;
return
;
}
MOZ_ASSERT
(
mState
=
=
eStateEntangled
)
;
StartDisentangling
(
)
;
}
void
MessagePort
:
:
Closed
(
)
{
if
(
mState
>
=
eStateDisentangled
)
{
return
;
}
mState
=
eStateDisentangledForClose
;
if
(
mActor
)
{
mActor
-
>
SetPort
(
nullptr
)
;
mActor
=
nullptr
;
}
UpdateMustKeepAlive
(
)
;
}
bool
MessagePort
:
:
ConnectToPBackground
(
)
{
RefPtr
<
MessagePort
>
self
=
this
;
auto
raii
=
MakeScopeExit
(
[
self
]
{
self
-
>
mState
=
eStateDisentangled
;
self
-
>
UpdateMustKeepAlive
(
)
;
}
)
;
mozilla
:
:
ipc
:
:
PBackgroundChild
*
actorChild
=
mozilla
:
:
ipc
:
:
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actorChild
)
)
{
return
false
;
}
PMessagePortChild
*
actor
=
actorChild
-
>
SendPMessagePortConstructor
(
mIdentifier
-
>
uuid
(
)
mIdentifier
-
>
destinationUuid
(
)
mIdentifier
-
>
sequenceId
(
)
)
;
if
(
NS_WARN_IF
(
!
actor
)
)
{
return
false
;
}
mActor
=
static_cast
<
MessagePortChild
*
>
(
actor
)
;
MOZ_ASSERT
(
mActor
)
;
mActor
-
>
SetPort
(
this
)
;
mState
=
eStateEntangling
;
raii
.
release
(
)
;
return
true
;
}
void
MessagePort
:
:
UpdateMustKeepAlive
(
)
{
if
(
mState
>
=
eStateDisentangled
&
&
mMessages
.
IsEmpty
(
)
&
&
mIsKeptAlive
)
{
mIsKeptAlive
=
false
;
mWorkerRef
=
nullptr
;
Release
(
)
;
return
;
}
if
(
mState
<
eStateDisentangled
&
&
!
mIsKeptAlive
)
{
mIsKeptAlive
=
true
;
AddRef
(
)
;
}
}
void
MessagePort
:
:
DisconnectFromOwner
(
)
{
CloseForced
(
)
;
DOMEventTargetHelper
:
:
DisconnectFromOwner
(
)
;
}
void
MessagePort
:
:
RemoveDocFromBFCache
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
nsPIDOMWindowInner
*
window
=
GetOwner
(
)
;
if
(
!
window
)
{
return
;
}
Document
*
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
!
doc
)
{
return
;
}
nsCOMPtr
<
nsIBFCacheEntry
>
bfCacheEntry
=
doc
-
>
GetBFCacheEntry
(
)
;
if
(
!
bfCacheEntry
)
{
return
;
}
bfCacheEntry
-
>
RemoveFromBFCacheSync
(
)
;
}
void
MessagePort
:
:
ForceClose
(
const
MessagePortIdentifier
&
aIdentifier
)
{
mozilla
:
:
ipc
:
:
PBackgroundChild
*
actorChild
=
mozilla
:
:
ipc
:
:
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actorChild
)
)
{
MOZ_CRASH
(
"
Failed
to
create
a
PBackgroundChild
actor
!
"
)
;
}
Unused
<
<
actorChild
-
>
SendMessagePortForceClose
(
aIdentifier
.
uuid
(
)
aIdentifier
.
destinationUuid
(
)
aIdentifier
.
sequenceId
(
)
)
;
}
void
MessagePort
:
:
DispatchError
(
)
{
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
GetParentObject
(
)
;
AutoJSAPI
jsapi
;
if
(
!
globalObject
|
|
!
jsapi
.
Init
(
globalObject
)
)
{
NS_WARNING
(
"
Failed
to
initialize
AutoJSAPI
object
.
"
)
;
return
;
}
RootedDictionary
<
MessageEventInit
>
init
(
jsapi
.
cx
(
)
)
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
RefPtr
<
Event
>
event
=
MessageEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
messageerror
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
DispatchEvent
(
*
event
)
;
}
}
}
