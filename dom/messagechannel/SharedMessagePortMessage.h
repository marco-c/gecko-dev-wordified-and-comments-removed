#
ifndef
mozilla_dom_SharedMessagePortMessage_h
#
define
mozilla_dom_SharedMessagePortMessage_h
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MessagePortChild
;
class
MessagePortMessage
;
class
MessagePortParent
;
class
RefMessageBody
;
class
RefMessageBodyService
;
class
SharedMessagePortMessage
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
SharedMessagePortMessage
)
SharedMessagePortMessage
(
)
;
static
void
FromSharedToMessagesChild
(
MessagePortChild
*
aActor
const
nsTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
&
aData
nsTArray
<
MessageData
>
&
aArray
)
;
static
bool
FromMessagesToSharedChild
(
nsTArray
<
MessageData
>
&
aArray
FallibleTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
&
aData
)
;
static
bool
FromSharedToMessagesParent
(
MessagePortParent
*
aActor
const
nsTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
&
aData
FallibleTArray
<
MessageData
>
&
aArray
)
;
static
bool
FromMessagesToSharedParent
(
nsTArray
<
MessageData
>
&
aArray
FallibleTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
&
aData
)
;
void
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
RefMessageBodyService
*
aRefMessageBodyService
ErrorResult
&
aRv
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfers
nsID
&
aPortID
RefMessageBodyService
*
aRefMessageBodyService
ErrorResult
&
aRv
)
;
bool
TakeTransferredPortsAsSequence
(
Sequence
<
OwningNonNull
<
mozilla
:
:
dom
:
:
MessagePort
>
>
&
aPorts
)
;
private
:
~
SharedMessagePortMessage
(
)
=
default
;
UniquePtr
<
ipc
:
:
StructuredCloneData
>
mCloneData
;
RefPtr
<
RefMessageBody
>
mRefData
;
nsID
mRefDataId
;
}
;
}
}
#
endif
