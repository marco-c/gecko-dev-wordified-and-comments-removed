#
ifndef
mozilla_dom_MessagePort_h
#
define
mozilla_dom_MessagePort_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
#
include
"
nsTArray
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
MessagePortChild
;
class
MessagePortIdentifier
;
class
MessagePortMessage
;
class
PostMessageRunnable
;
class
SharedMessagePortMessage
;
namespace
workers
{
class
WorkerFeature
;
}
class
MessagePort
final
:
public
DOMEventTargetHelper
public
nsIIPCBackgroundChildCreateCallback
public
nsIObserver
{
friend
class
PostMessageRunnable
;
public
:
NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
NS_DECL_NSIOBSERVER
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MessagePort
DOMEventTargetHelper
)
static
already_AddRefed
<
MessagePort
>
Create
(
nsPIDOMWindowInner
*
aWindow
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
MessagePort
>
Create
(
nsPIDOMWindowInner
*
aWindow
const
MessagePortIdentifier
&
aIdentifier
ErrorResult
&
aRv
)
;
static
void
ForceClose
(
const
MessagePortIdentifier
&
aIdentifier
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Optional
<
Sequence
<
JS
:
:
Value
>
>
&
aTransferable
ErrorResult
&
aRv
)
;
void
Start
(
)
;
void
Close
(
)
;
EventHandlerNonNull
*
GetOnmessage
(
)
;
void
SetOnmessage
(
EventHandlerNonNull
*
aCallback
)
;
void
UnshippedEntangle
(
MessagePort
*
aEntangledPort
)
;
void
CloneAndDisentangle
(
MessagePortIdentifier
&
aIdentifier
)
;
void
CloseForced
(
)
;
void
Entangled
(
nsTArray
<
MessagePortMessage
>
&
aMessages
)
;
void
MessagesReceived
(
nsTArray
<
MessagePortMessage
>
&
aMessages
)
;
void
StopSendingDataConfirmed
(
)
;
void
Closed
(
)
;
private
:
explicit
MessagePort
(
nsPIDOMWindowInner
*
aWindow
)
;
~
MessagePort
(
)
;
enum
State
{
eStateUnshippedEntangled
eStateEntangling
eStateEntanglingForDisentangle
eStateEntanglingForClose
eStateEntangled
eStateDisentangling
eStateDisentangled
eStateDisentangledForClose
}
;
void
Initialize
(
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
uint32_t
aSequenceID
bool
mNeutered
State
aState
ErrorResult
&
aRv
)
;
void
ConnectToPBackground
(
)
;
void
Dispatch
(
)
;
void
StartDisentangling
(
)
;
void
Disentangle
(
)
;
void
RemoveDocFromBFCache
(
)
;
void
CloseInternal
(
bool
aSoftly
)
;
void
UpdateMustKeepAlive
(
)
;
bool
IsCertainlyAliveForCC
(
)
const
override
{
return
mIsKeptAlive
;
}
nsAutoPtr
<
workers
:
:
WorkerFeature
>
mWorkerFeature
;
RefPtr
<
PostMessageRunnable
>
mPostMessageRunnable
;
RefPtr
<
MessagePortChild
>
mActor
;
RefPtr
<
MessagePort
>
mUnshippedEntangledPort
;
nsTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
mMessages
;
nsTArray
<
RefPtr
<
SharedMessagePortMessage
>
>
mMessagesForTheOtherPort
;
nsAutoPtr
<
MessagePortIdentifier
>
mIdentifier
;
uint64_t
mInnerID
;
State
mState
;
bool
mMessageQueueEnabled
;
bool
mIsKeptAlive
;
}
;
}
}
#
endif
