#
include
"
MessagePortService
.
h
"
#
include
"
MessagePortParent
.
h
"
#
include
"
mozilla
/
dom
/
SharedMessageBody
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
CheckedUnsafePtr
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsTArray
.
h
"
using
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
;
namespace
mozilla
{
namespace
dom
{
namespace
{
StaticRefPtr
<
MessagePortService
>
gInstance
;
void
AssertIsInMainProcess
(
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Default
)
;
}
}
struct
MessagePortService
:
:
NextParent
{
uint32_t
mSequenceID
;
CheckedUnsafePtr
<
MessagePortParent
>
mParent
;
}
;
}
}
DECLARE_USE_COPY_CONSTRUCTORS
(
mozilla
:
:
dom
:
:
MessagePortService
:
:
NextParent
)
;
namespace
mozilla
{
namespace
dom
{
class
MessagePortService
:
:
MessagePortServiceData
final
{
public
:
explicit
MessagePortServiceData
(
const
nsID
&
aDestinationUUID
)
:
mDestinationUUID
(
aDestinationUUID
)
mSequenceID
(
1
)
mParent
(
nullptr
)
mWaitingForNewParent
(
true
)
mNextStepCloseAll
(
false
)
{
MOZ_COUNT_CTOR
(
MessagePortServiceData
)
;
}
MessagePortServiceData
(
const
MessagePortServiceData
&
aOther
)
=
delete
;
MessagePortServiceData
&
operator
=
(
const
MessagePortServiceData
&
)
=
delete
;
MOZ_COUNTED_DTOR
(
MessagePortServiceData
)
nsID
mDestinationUUID
;
uint32_t
mSequenceID
;
CheckedUnsafePtr
<
MessagePortParent
>
mParent
;
FallibleTArray
<
NextParent
>
mNextParents
;
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
mMessages
;
bool
mWaitingForNewParent
;
bool
mNextStepCloseAll
;
}
;
MessagePortService
*
MessagePortService
:
:
Get
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
return
gInstance
;
}
MessagePortService
*
MessagePortService
:
:
GetOrCreate
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
if
(
!
gInstance
)
{
gInstance
=
new
MessagePortService
(
)
;
}
return
gInstance
;
}
bool
MessagePortService
:
:
RequestEntangling
(
MessagePortParent
*
aParent
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
{
MOZ_ASSERT
(
aParent
)
;
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aParent
-
>
ID
(
)
&
data
)
)
{
if
(
mPorts
.
Get
(
aDestinationUUID
nullptr
)
)
{
MOZ_ASSERT
(
false
"
The
creation
of
the
2
ports
should
be
in
sync
.
"
)
;
return
false
;
}
data
=
new
MessagePortServiceData
(
aParent
-
>
ID
(
)
)
;
mPorts
.
Put
(
aDestinationUUID
data
)
;
data
=
new
MessagePortServiceData
(
aDestinationUUID
)
;
mPorts
.
Put
(
aParent
-
>
ID
(
)
data
)
;
}
if
(
!
data
-
>
mDestinationUUID
.
Equals
(
aDestinationUUID
)
)
{
MOZ_ASSERT
(
false
"
DestinationUUIDs
do
not
match
!
"
)
;
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
if
(
aSequenceID
<
data
-
>
mSequenceID
)
{
MOZ_ASSERT
(
false
"
Invalid
sequence
ID
!
"
)
;
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
if
(
aSequenceID
=
=
data
-
>
mSequenceID
)
{
if
(
data
-
>
mParent
)
{
MOZ_ASSERT
(
false
"
Two
ports
cannot
have
the
same
sequenceID
.
"
)
;
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
data
-
>
mParent
=
aParent
;
data
-
>
mWaitingForNewParent
=
false
;
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
messages
(
std
:
:
move
(
data
-
>
mMessages
)
)
;
FallibleTArray
<
MessageData
>
array
;
if
(
!
SharedMessageBody
:
:
FromSharedToMessagesParent
(
aParent
-
>
Manager
(
)
messages
array
)
)
{
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
if
(
!
aParent
-
>
Entangled
(
array
)
)
{
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
if
(
data
-
>
mNextStepCloseAll
)
{
CloseAll
(
aParent
-
>
ID
(
)
)
;
}
return
true
;
}
auto
nextParent
=
data
-
>
mNextParents
.
AppendElement
(
mozilla
:
:
fallible
)
;
if
(
!
nextParent
)
{
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
false
;
}
nextParent
-
>
mSequenceID
=
aSequenceID
;
nextParent
-
>
mParent
=
aParent
;
return
true
;
}
bool
MessagePortService
:
:
DisentanglePort
(
MessagePortParent
*
aParent
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
&
aMessages
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aParent
-
>
ID
(
)
&
data
)
)
{
MOZ_ASSERT
(
false
"
Unknown
MessagePortParent
should
not
happen
.
"
)
;
return
false
;
}
if
(
data
-
>
mParent
!
=
aParent
)
{
MOZ_ASSERT
(
false
"
DisentanglePort
(
)
should
be
called
just
from
the
correct
parent
.
"
)
;
return
false
;
}
if
(
!
aMessages
.
AppendElements
(
data
-
>
mMessages
mozilla
:
:
fallible
)
)
{
return
false
;
}
data
-
>
mMessages
.
Clear
(
)
;
+
+
data
-
>
mSequenceID
;
uint32_t
index
=
0
;
MessagePortParent
*
nextParent
=
nullptr
;
for
(
;
index
<
data
-
>
mNextParents
.
Length
(
)
;
+
+
index
)
{
if
(
data
-
>
mNextParents
[
index
]
.
mSequenceID
=
=
data
-
>
mSequenceID
)
{
nextParent
=
data
-
>
mNextParents
[
index
]
.
mParent
;
break
;
}
}
if
(
!
nextParent
)
{
data
-
>
mMessages
.
SwapElements
(
aMessages
)
;
data
-
>
mWaitingForNewParent
=
true
;
data
-
>
mParent
=
nullptr
;
return
true
;
}
data
-
>
mParent
=
nextParent
;
data
-
>
mNextParents
.
RemoveElementAt
(
index
)
;
FallibleTArray
<
MessageData
>
array
;
if
(
!
SharedMessageBody
:
:
FromSharedToMessagesParent
(
data
-
>
mParent
-
>
Manager
(
)
aMessages
array
)
)
{
return
false
;
}
Unused
<
<
data
-
>
mParent
-
>
Entangled
(
array
)
;
return
true
;
}
bool
MessagePortService
:
:
ClosePort
(
MessagePortParent
*
aParent
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aParent
-
>
ID
(
)
&
data
)
)
{
MOZ_ASSERT
(
false
"
Unknown
MessagePortParent
should
not
happend
.
"
)
;
return
false
;
}
if
(
data
-
>
mParent
!
=
aParent
)
{
MOZ_ASSERT
(
false
"
ClosePort
(
)
should
be
called
just
from
the
correct
parent
.
"
)
;
return
false
;
}
if
(
!
data
-
>
mNextParents
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
false
"
ClosePort
(
)
should
be
called
when
there
are
not
next
parents
.
"
)
;
return
false
;
}
data
-
>
mParent
=
nullptr
;
CloseAll
(
aParent
-
>
ID
(
)
)
;
return
true
;
}
void
MessagePortService
:
:
CloseAll
(
const
nsID
&
aUUID
bool
aForced
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aUUID
&
data
)
)
{
MaybeShutdown
(
)
;
return
;
}
if
(
data
-
>
mParent
)
{
data
-
>
mParent
-
>
Close
(
)
;
data
-
>
mParent
=
nullptr
;
}
for
(
const
auto
&
parent
:
data
-
>
mNextParents
)
{
parent
.
mParent
-
>
CloseAndDelete
(
)
;
}
nsID
destinationUUID
=
data
-
>
mDestinationUUID
;
MessagePortServiceData
*
destinationData
;
if
(
!
aForced
&
&
mPorts
.
Get
(
destinationUUID
&
destinationData
)
&
&
!
destinationData
-
>
mMessages
.
IsEmpty
(
)
&
&
destinationData
-
>
mWaitingForNewParent
)
{
MOZ_ASSERT
(
!
destinationData
-
>
mNextStepCloseAll
)
;
destinationData
-
>
mNextStepCloseAll
=
true
;
return
;
}
mPorts
.
Remove
(
aUUID
)
;
CloseAll
(
destinationUUID
aForced
)
;
if
(
!
gInstance
)
{
return
;
}
#
ifdef
DEBUG
for
(
auto
iter
=
mPorts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
MOZ_ASSERT
(
!
aUUID
.
Equals
(
iter
.
Key
(
)
)
)
;
}
#
endif
MaybeShutdown
(
)
;
}
void
MessagePortService
:
:
MaybeShutdown
(
)
{
if
(
mPorts
.
Count
(
)
=
=
0
)
{
gInstance
=
nullptr
;
}
}
bool
MessagePortService
:
:
PostMessages
(
MessagePortParent
*
aParent
FallibleTArray
<
RefPtr
<
SharedMessageBody
>
>
&
aMessages
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aParent
-
>
ID
(
)
&
data
)
)
{
MOZ_ASSERT
(
false
"
Unknown
MessagePortParent
should
not
happend
.
"
)
;
return
false
;
}
if
(
data
-
>
mParent
!
=
aParent
)
{
MOZ_ASSERT
(
false
"
PostMessages
(
)
should
be
called
just
from
the
correct
parent
.
"
)
;
return
false
;
}
MOZ_ALWAYS_TRUE
(
mPorts
.
Get
(
data
-
>
mDestinationUUID
&
data
)
)
;
if
(
!
data
-
>
mMessages
.
AppendElements
(
aMessages
mozilla
:
:
fallible
)
)
{
return
false
;
}
if
(
data
-
>
mParent
&
&
data
-
>
mParent
-
>
CanSendData
(
)
)
{
{
FallibleTArray
<
MessageData
>
messages
;
if
(
!
SharedMessageBody
:
:
FromSharedToMessagesParent
(
data
-
>
mParent
-
>
Manager
(
)
data
-
>
mMessages
messages
)
)
{
return
false
;
}
Unused
<
<
data
-
>
mParent
-
>
SendReceiveData
(
messages
)
;
}
data
-
>
mMessages
.
Clear
(
)
;
}
return
true
;
}
void
MessagePortService
:
:
ParentDestroy
(
MessagePortParent
*
aParent
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aParent
-
>
ID
(
)
&
data
)
)
{
return
;
}
if
(
data
-
>
mParent
!
=
aParent
)
{
for
(
uint32_t
i
=
0
;
i
<
data
-
>
mNextParents
.
Length
(
)
;
+
+
i
)
{
if
(
aParent
=
=
data
-
>
mNextParents
[
i
]
.
mParent
)
{
data
-
>
mNextParents
.
RemoveElementAt
(
i
)
;
break
;
}
}
}
CloseAll
(
aParent
-
>
ID
(
)
)
;
}
bool
MessagePortService
:
:
ForceClose
(
const
nsID
&
aUUID
const
nsID
&
aDestinationUUID
const
uint32_t
&
aSequenceID
)
{
MessagePortServiceData
*
data
;
if
(
!
mPorts
.
Get
(
aUUID
&
data
)
)
{
NS_WARNING
(
"
Unknown
MessagePort
in
ForceClose
(
)
"
)
;
return
true
;
}
if
(
!
data
-
>
mDestinationUUID
.
Equals
(
aDestinationUUID
)
|
|
data
-
>
mSequenceID
!
=
aSequenceID
)
{
NS_WARNING
(
"
DestinationUUID
and
/
or
sequenceID
do
not
match
.
"
)
;
return
false
;
}
CloseAll
(
aUUID
true
)
;
return
true
;
}
}
}
