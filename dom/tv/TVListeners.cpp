#
include
"
mozilla
/
dom
/
TVSource
.
h
"
#
include
"
mozilla
/
dom
/
TVTuner
.
h
"
#
include
"
mozilla
/
dom
/
TVUtils
.
h
"
#
include
"
TVListeners
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
TVSourceListener
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
TVSourceListener
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSource
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
TVSourceListener
)
tmp
-
>
Shutdown
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSource
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TVSourceListener
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TVSourceListener
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TVSourceListener
)
NS_INTERFACE_MAP_ENTRY
(
nsITVSourceListener
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
already_AddRefed
<
TVSourceListener
>
TVSourceListener
:
:
Create
(
TVSource
*
aSource
)
{
RefPtr
<
TVSourceListener
>
listener
=
new
TVSourceListener
(
aSource
)
;
return
(
listener
-
>
Init
(
)
)
?
listener
.
forget
(
)
:
nullptr
;
}
TVSourceListener
:
:
TVSourceListener
(
TVSource
*
aSource
)
:
mSource
(
aSource
)
{
MOZ_ASSERT
(
mSource
)
;
}
TVSourceListener
:
:
~
TVSourceListener
(
)
{
Shutdown
(
)
;
}
bool
TVSourceListener
:
:
Init
(
)
{
RefPtr
<
TVTuner
>
tuner
=
mSource
-
>
Tuner
(
)
;
tuner
-
>
GetId
(
mTunerId
)
;
nsCOMPtr
<
nsITVService
>
service
=
do_GetService
(
TV_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
false
;
}
nsresult
rv
=
service
-
>
RegisterSourceListener
(
mTunerId
ToTVSourceTypeStr
(
mSource
-
>
Type
(
)
)
this
)
;
return
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
?
false
:
true
;
}
void
TVSourceListener
:
:
Shutdown
(
)
{
nsCOMPtr
<
nsITVService
>
service
=
do_GetService
(
TV_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
;
}
nsresult
rv
=
service
-
>
UnregisterSourceListener
(
mTunerId
ToTVSourceTypeStr
(
mSource
-
>
Type
(
)
)
this
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
NS_IMETHODIMP
TVSourceListener
:
:
NotifyChannelScanned
(
const
nsAString
&
aTunerId
const
nsAString
&
aSourceType
nsITVChannelData
*
aChannelData
)
{
if
(
NS_WARN_IF
(
!
IsMatched
(
aTunerId
aSourceType
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
mSource
-
>
NotifyChannelScanned
(
aChannelData
)
;
}
NS_IMETHODIMP
TVSourceListener
:
:
NotifyChannelScanComplete
(
const
nsAString
&
aTunerId
const
nsAString
&
aSourceType
)
{
if
(
NS_WARN_IF
(
!
IsMatched
(
aTunerId
aSourceType
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
mSource
-
>
NotifyChannelScanComplete
(
)
;
}
NS_IMETHODIMP
TVSourceListener
:
:
NotifyChannelScanStopped
(
const
nsAString
&
aTunerId
const
nsAString
&
aSourceType
)
{
if
(
NS_WARN_IF
(
!
IsMatched
(
aTunerId
aSourceType
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
mSource
-
>
NotifyChannelScanStopped
(
)
;
}
NS_IMETHODIMP
TVSourceListener
:
:
NotifyEITBroadcasted
(
const
nsAString
&
aTunerId
const
nsAString
&
aSourceType
nsITVChannelData
*
aChannelData
nsITVProgramData
*
*
aProgramDataList
const
uint32_t
aCount
)
{
if
(
NS_WARN_IF
(
!
IsMatched
(
aTunerId
aSourceType
)
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
return
mSource
-
>
NotifyEITBroadcasted
(
aChannelData
aProgramDataList
aCount
)
;
}
bool
TVSourceListener
:
:
IsMatched
(
const
nsAString
&
aTunerId
const
nsAString
&
aSourceType
)
{
return
aTunerId
.
Equals
(
mTunerId
)
&
&
ToTVSourceType
(
aSourceType
)
=
=
mSource
-
>
Type
(
)
;
}
}
}
