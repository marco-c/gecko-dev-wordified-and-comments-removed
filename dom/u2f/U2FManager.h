#
ifndef
mozilla_dom_U2FManager_h
#
define
mozilla_dom_U2FManager_h
#
include
"
U2FAuthenticator
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ArrayBufferViewOrArrayBuffer
;
class
OwningArrayBufferViewOrArrayBuffer
;
class
Promise
;
class
U2FTransactionChild
;
class
U2FTransactionInfo
;
class
U2FTransaction
{
public
:
U2FTransaction
(
nsPIDOMWindowInner
*
aParent
const
WebAuthnTransactionInfo
&
&
aInfo
const
nsCString
&
aClientData
)
:
mParent
(
aParent
)
mInfo
(
aInfo
)
mClientData
(
aClientData
)
{
}
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
MozPromiseHolder
<
U2FPromise
>
mPromise
;
WebAuthnTransactionInfo
mInfo
;
nsCString
mClientData
;
}
;
class
U2FManager
final
:
public
nsIIPCBackgroundChildCreateCallback
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
static
U2FManager
*
GetOrCreate
(
)
;
static
U2FManager
*
Get
(
)
;
already_AddRefed
<
U2FPromise
>
Register
(
nsPIDOMWindowInner
*
aParent
const
nsCString
&
aRpId
const
nsCString
&
aClientDataJSON
const
uint32_t
&
aTimeoutMillis
const
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
&
aExcludeList
)
;
already_AddRefed
<
U2FPromise
>
Sign
(
nsPIDOMWindowInner
*
aParent
const
nsCString
&
aRpId
const
nsCString
&
aClientDataJSON
const
uint32_t
&
aTimeoutMillis
const
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
&
aKeyList
)
;
void
FinishRegister
(
nsTArray
<
uint8_t
>
&
aRegBuffer
)
;
void
FinishSign
(
nsTArray
<
uint8_t
>
&
aCredentialId
nsTArray
<
uint8_t
>
&
aSigBuffer
)
;
void
RequestAborted
(
const
nsresult
&
aError
)
;
void
MaybeCancelTransaction
(
const
nsresult
&
aError
)
{
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_ABORT
)
;
}
}
void
ActorDestroyed
(
)
;
private
:
U2FManager
(
)
;
virtual
~
U2FManager
(
)
;
static
nsresult
BuildTransactionHashes
(
const
nsCString
&
aRpId
const
nsCString
&
aClientDataJSON
CryptoBuffer
&
aRpIdHash
CryptoBuffer
&
aClientDataHash
)
;
void
ClearTransaction
(
)
;
void
RejectTransaction
(
const
nsresult
&
aError
)
;
void
CancelTransaction
(
const
nsresult
&
aError
)
;
typedef
MozPromise
<
nsresult
nsresult
false
>
BackgroundActorPromise
;
RefPtr
<
BackgroundActorPromise
>
GetOrCreateBackgroundActor
(
)
;
RefPtr
<
U2FTransactionChild
>
mChild
;
Maybe
<
U2FTransaction
>
mTransaction
;
MozPromiseHolder
<
BackgroundActorPromise
>
mPBackgroundCreationPromise
;
}
;
}
}
#
endif
