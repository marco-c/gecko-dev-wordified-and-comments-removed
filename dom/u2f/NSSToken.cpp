#
include
"
NSSToken
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
pk11pub
.
h
"
namespace
mozilla
{
namespace
dom
{
const
nsString
NSSToken
:
:
mVersion
=
NS_LITERAL_STRING
(
"
U2F_V2
"
)
;
const
uint32_t
kParamLen
=
32
;
const
uint32_t
kPublicKeyLen
=
65
;
const
uint32_t
kSignedDataLen
=
(
2
*
kParamLen
)
+
1
+
4
;
NSSToken
:
:
NSSToken
(
)
:
mInitialized
(
false
)
mMutex
(
"
NSSToken
:
:
mMutex
"
)
{
}
NSSToken
:
:
~
NSSToken
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
destructorSafeDestroyNSSReference
(
)
;
shutdown
(
calledFromObject
)
;
}
void
NSSToken
:
:
virtualDestroyNSSReference
(
)
{
destructorSafeDestroyNSSReference
(
)
;
}
void
NSSToken
:
:
destructorSafeDestroyNSSReference
(
)
{
mSlot
=
nullptr
;
}
nsresult
NSSToken
:
:
Init
(
)
{
MOZ_ASSERT
(
!
mInitialized
)
;
if
(
mInitialized
)
{
return
NS_OK
;
}
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
EnsureNSSInitializedChromeOrContent
(
)
)
{
return
NS_ERROR_FAILURE
;
}
mSlot
=
PK11_GetInternalSlot
(
)
;
if
(
!
mSlot
.
get
(
)
)
{
return
NS_ERROR_FAILURE
;
}
mInitialized
=
true
;
return
NS_OK
;
}
bool
NSSToken
:
:
IsCompatibleVersion
(
const
nsString
&
aVersionParam
)
const
{
MOZ_ASSERT
(
mInitialized
)
;
return
mVersion
=
=
aVersionParam
;
}
bool
NSSToken
:
:
IsRegistered
(
const
CryptoBuffer
&
aKeyHandle
)
const
{
MOZ_ASSERT
(
mInitialized
)
;
return
false
;
}
nsresult
NSSToken
:
:
Register
(
const
CryptoBuffer
&
const
CryptoBuffer
&
CryptoBuffer
&
aRegistrationData
)
{
MOZ_ASSERT
(
mInitialized
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mInitialized
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
return
NS_OK
;
}
nsresult
NSSToken
:
:
Sign
(
const
CryptoBuffer
&
aApplicationParam
const
CryptoBuffer
&
aChallengeParam
const
CryptoBuffer
&
aKeyHandle
CryptoBuffer
&
aSignatureData
)
{
MOZ_ASSERT
(
mInitialized
)
;
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mInitialized
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
return
NS_OK
;
}
}
}
