#
ifndef
mozilla_dom_U2F_h
#
define
mozilla_dom_U2F_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsINSSU2FToken
.
h
"
#
include
"
nsNSSShutDown
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
USBToken
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
RegisterRequest
;
struct
RegisteredKey
;
class
U2FRegisterCallback
;
class
U2FSignCallback
;
}
}
namespace
mozilla
{
namespace
dom
{
class
U2F
final
:
public
nsISupports
public
nsWrapperCache
public
nsNSSShutDownObject
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
U2F
)
U2F
(
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mParent
;
}
void
Init
(
nsPIDOMWindowInner
*
aParent
ErrorResult
&
aRv
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Register
(
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FRegisterCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
void
Sign
(
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FSignCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
virtual
void
virtualDestroyNSSReference
(
)
override
{
}
;
private
:
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
nsString
mOrigin
;
USBToken
mUSBToken
;
nsCOMPtr
<
nsINSSU2FToken
>
mNSSToken
;
static
const
nsString
FinishEnrollment
;
static
const
nsString
GetAssertion
;
~
U2F
(
)
;
nsresult
AssembleClientData
(
const
nsAString
&
aTyp
const
nsAString
&
aChallenge
CryptoBuffer
&
aClientData
)
const
;
bool
ValidAppID
(
nsString
&
aAppId
)
const
;
nsresult
NSSTokenIsCompatible
(
const
nsString
&
versionString
bool
*
isCompatible
)
;
nsresult
NSSTokenIsRegistered
(
CryptoBuffer
&
keyHandle
bool
*
isRegistered
)
;
nsresult
NSSTokenRegister
(
CryptoBuffer
&
application
CryptoBuffer
&
challenge
CryptoBuffer
&
registrationData
)
;
nsresult
NSSTokenSign
(
CryptoBuffer
&
keyHandle
CryptoBuffer
&
application
CryptoBuffer
&
challenge
CryptoBuffer
&
signatureData
)
;
}
;
}
}
#
endif
