#
ifndef
mozilla_dom_U2F_h
#
define
mozilla_dom_U2F_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
U2FBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManagerBase
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
U2FAuthenticator
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WebAuthnMakeCredentialResult
;
class
WebAuthnGetAssertionResult
;
class
U2FRegisterCallback
;
class
U2FSignCallback
;
struct
RegisterRequest
;
struct
RegisteredKey
;
class
U2FTransaction
{
typedef
Variant
<
nsMainThreadPtrHandle
<
U2FRegisterCallback
>
nsMainThreadPtrHandle
<
U2FSignCallback
>
>
U2FCallback
;
public
:
explicit
U2FTransaction
(
const
nsCString
&
aClientData
const
U2FCallback
&
&
aCallback
)
:
mClientData
(
aClientData
)
mCallback
(
Move
(
aCallback
)
)
mId
(
NextId
(
)
)
{
MOZ_ASSERT
(
mId
>
0
)
;
}
bool
HasRegisterCallback
(
)
{
return
mCallback
.
is
<
nsMainThreadPtrHandle
<
U2FRegisterCallback
>
>
(
)
;
}
auto
&
GetRegisterCallback
(
)
{
return
mCallback
.
as
<
nsMainThreadPtrHandle
<
U2FRegisterCallback
>
>
(
)
;
}
bool
HasSignCallback
(
)
{
return
mCallback
.
is
<
nsMainThreadPtrHandle
<
U2FSignCallback
>
>
(
)
;
}
auto
&
GetSignCallback
(
)
{
return
mCallback
.
as
<
nsMainThreadPtrHandle
<
U2FSignCallback
>
>
(
)
;
}
nsCString
mClientData
;
U2FCallback
mCallback
;
uint64_t
mId
;
private
:
static
uint64_t
NextId
(
)
{
static
uint64_t
id
=
0
;
return
+
+
id
;
}
}
;
class
U2F
final
:
public
WebAuthnManagerBase
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
U2F
)
explicit
U2F
(
nsPIDOMWindowInner
*
aParent
)
:
WebAuthnManagerBase
(
aParent
)
{
}
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mParent
;
}
void
Init
(
ErrorResult
&
aRv
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Register
(
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FRegisterCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
void
Sign
(
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FSignCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
void
FinishMakeCredential
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialResult
&
aResult
)
override
;
void
FinishGetAssertion
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionResult
&
aResult
)
override
;
void
RequestAborted
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
override
;
protected
:
void
CancelTransaction
(
const
nsresult
&
aError
)
override
;
private
:
~
U2F
(
)
;
template
<
typename
T
typename
C
>
void
ExecuteCallback
(
T
&
aResp
nsMainThreadPtrHandle
<
C
>
&
aCb
)
;
void
ClearTransaction
(
)
;
void
RejectTransaction
(
const
nsresult
&
aError
)
;
nsString
mOrigin
;
Maybe
<
U2FTransaction
>
mTransaction
;
}
;
}
}
#
endif
