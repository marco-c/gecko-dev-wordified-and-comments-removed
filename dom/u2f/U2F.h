#
ifndef
mozilla_dom_U2F_h
#
define
mozilla_dom_U2F_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
CryptoBuffer
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
U2FBinding
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIU2FToken
.
h
"
#
include
"
nsNSSShutDown
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
U2FAuthenticator
.
h
"
namespace
mozilla
{
class
AbstractThread
;
namespace
dom
{
class
U2FRegisterCallback
;
class
U2FSignCallback
;
struct
RegisterRequest
;
struct
RegisteredKey
;
struct
LocalRegisterRequest
{
nsString
mChallenge
;
nsString
mVersion
;
CryptoBuffer
mClientData
;
}
;
struct
LocalRegisteredKey
{
nsString
mKeyHandle
;
nsString
mVersion
;
Nullable
<
nsString
>
mAppId
;
}
;
typedef
MozPromise
<
nsString
ErrorCode
false
>
U2FPromise
;
typedef
MozPromise
<
Authenticator
ErrorCode
false
>
U2FPrepPromise
;
class
U2FPrepTask
:
public
Runnable
{
public
:
explicit
U2FPrepTask
(
const
Authenticator
&
aAuthenticator
AbstractThread
*
aMainThread
)
;
RefPtr
<
U2FPrepPromise
>
Execute
(
)
;
protected
:
virtual
~
U2FPrepTask
(
)
;
Authenticator
mAuthenticator
;
MozPromiseHolder
<
U2FPrepPromise
>
mPromise
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
}
;
class
U2FIsRegisteredTask
final
:
public
U2FPrepTask
{
public
:
U2FIsRegisteredTask
(
const
Authenticator
&
aAuthenticator
const
LocalRegisteredKey
&
aRegisteredKey
AbstractThread
*
aMainThread
)
;
NS_DECL_NSIRUNNABLE
private
:
~
U2FIsRegisteredTask
(
)
;
LocalRegisteredKey
mRegisteredKey
;
}
;
class
U2FTask
:
public
Runnable
{
public
:
U2FTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
Authenticator
&
aAuthenticator
AbstractThread
*
aMainThread
)
;
RefPtr
<
U2FPromise
>
Execute
(
)
;
nsString
mOrigin
;
nsString
mAppId
;
Authenticator
mAuthenticator
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
protected
:
virtual
~
U2FTask
(
)
;
MozPromiseHolder
<
U2FPromise
>
mPromise
;
}
;
class
U2FRegisterTask
final
:
public
U2FTask
{
public
:
U2FRegisterTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
Authenticator
&
aAuthenticator
const
CryptoBuffer
&
aAppParam
const
CryptoBuffer
&
aChallengeParam
const
LocalRegisterRequest
&
aRegisterEntry
AbstractThread
*
aMainThread
)
;
NS_DECL_NSIRUNNABLE
private
:
~
U2FRegisterTask
(
)
;
CryptoBuffer
mAppParam
;
CryptoBuffer
mChallengeParam
;
LocalRegisterRequest
mRegisterEntry
;
}
;
class
U2FSignTask
final
:
public
U2FTask
{
public
:
U2FSignTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
nsAString
&
aVersion
const
Authenticator
&
aAuthenticator
const
CryptoBuffer
&
aAppParam
const
CryptoBuffer
&
aChallengeParam
const
CryptoBuffer
&
aClientData
const
CryptoBuffer
&
aKeyHandle
AbstractThread
*
aMainThread
)
;
NS_DECL_NSIRUNNABLE
private
:
~
U2FSignTask
(
)
;
nsString
mVersion
;
CryptoBuffer
mAppParam
;
CryptoBuffer
mChallengeParam
;
CryptoBuffer
mClientData
;
CryptoBuffer
mKeyHandle
;
}
;
class
U2FStatus
{
public
:
U2FStatus
(
)
;
U2FStatus
(
const
U2FStatus
&
)
=
delete
;
void
WaitGroupAdd
(
)
;
void
WaitGroupDone
(
)
;
void
WaitGroupWait
(
)
;
void
Stop
(
const
ErrorCode
aErrorCode
)
;
void
Stop
(
const
ErrorCode
aErrorCode
const
nsAString
&
aResponse
)
;
bool
IsStopped
(
)
;
ErrorCode
GetErrorCode
(
)
;
nsString
GetResponse
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
U2FStatus
)
private
:
~
U2FStatus
(
)
;
uint16_t
mCount
;
bool
mIsStopped
;
nsString
mResponse
;
MOZ_INIT_OUTSIDE_CTOR
ErrorCode
mErrorCode
;
ReentrantMonitor
mReentrantMonitor
;
}
;
class
U2FRunnable
:
public
Runnable
public
nsNSSShutDownObject
{
public
:
U2FRunnable
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
AbstractThread
*
aMainThread
)
;
virtual
void
virtualDestroyNSSReference
(
)
override
{
}
;
protected
:
virtual
~
U2FRunnable
(
)
;
ErrorCode
EvaluateAppID
(
)
;
nsString
mOrigin
;
nsString
mAppId
;
const
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
}
;
class
U2FRegisterRunnable
:
public
U2FRunnable
{
public
:
U2FRegisterRunnable
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
const
Sequence
<
Authenticator
>
&
aAuthenticators
U2FRegisterCallback
*
aCallback
AbstractThread
*
aMainThread
)
;
void
SendResponse
(
const
RegisterResponse
&
aResponse
)
;
void
SetTimeout
(
const
int32_t
aTimeoutMillis
)
;
NS_DECL_NSIRUNNABLE
private
:
~
U2FRegisterRunnable
(
)
;
nsTArray
<
LocalRegisterRequest
>
mRegisterRequests
;
nsTArray
<
LocalRegisteredKey
>
mRegisteredKeys
;
nsTArray
<
Authenticator
>
mAuthenticators
;
nsMainThreadPtrHandle
<
U2FRegisterCallback
>
mCallback
;
Nullable
<
int32_t
>
opt_mTimeoutSeconds
;
}
;
class
U2FSignRunnable
:
public
U2FRunnable
{
public
:
U2FSignRunnable
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
const
Sequence
<
Authenticator
>
&
aAuthenticators
U2FSignCallback
*
aCallback
AbstractThread
*
aMainThread
)
;
void
SendResponse
(
const
SignResponse
&
aResponse
)
;
void
SetTimeout
(
const
int32_t
aTimeoutMillis
)
;
NS_DECL_NSIRUNNABLE
private
:
~
U2FSignRunnable
(
)
;
nsString
mChallenge
;
CryptoBuffer
mClientData
;
nsTArray
<
LocalRegisteredKey
>
mRegisteredKeys
;
nsTArray
<
Authenticator
>
mAuthenticators
;
nsMainThreadPtrHandle
<
U2FSignCallback
>
mCallback
;
Nullable
<
int32_t
>
opt_mTimeoutSeconds
;
}
;
class
U2F
final
:
public
nsISupports
public
nsWrapperCache
public
nsNSSShutDownObject
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
U2F
)
U2F
(
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mParent
;
}
void
Init
(
nsPIDOMWindowInner
*
aParent
ErrorResult
&
aRv
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Register
(
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FRegisterCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
void
Sign
(
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FSignCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
;
virtual
void
virtualDestroyNSSReference
(
)
override
{
}
;
private
:
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
nsString
mOrigin
;
Sequence
<
Authenticator
>
mAuthenticators
;
bool
mInitialized
;
RefPtr
<
AbstractThread
>
mAbstractMainThread
;
~
U2F
(
)
;
}
;
}
}
#
endif
