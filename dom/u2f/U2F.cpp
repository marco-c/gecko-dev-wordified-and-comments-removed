#
include
"
hasht
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
CryptoBuffer
.
h
"
#
include
"
mozilla
/
dom
/
NSSU2FTokenRemote
.
h
"
#
include
"
mozilla
/
dom
/
U2F
.
h
"
#
include
"
mozilla
/
dom
/
U2FBinding
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsINSSU2FToken
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
nsURLParsers
.
h
"
#
include
"
pk11pub
.
h
"
using
mozilla
:
:
dom
:
:
ContentChild
;
namespace
mozilla
{
namespace
dom
{
#
define
PREF_U2F_SOFTTOKEN_ENABLED
"
security
.
webauth
.
u2f_enable_softtoken
"
#
define
PREF_U2F_USBTOKEN_ENABLED
"
security
.
webauth
.
u2f_enable_usbtoken
"
NS_NAMED_LITERAL_STRING
(
kFinishEnrollment
"
navigator
.
id
.
finishEnrollment
"
)
;
NS_NAMED_LITERAL_STRING
(
kGetAssertion
"
navigator
.
id
.
getAssertion
"
)
;
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
U2F
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
U2F
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
U2F
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
U2F
mParent
)
static
mozilla
:
:
LazyLogModule
gWebauthLog
(
"
webauth_u2f
"
)
;
template
<
class
CB
class
Rsp
>
void
SendError
(
CB
*
aCallback
ErrorCode
aErrorCode
)
{
Rsp
response
;
response
.
mErrorCode
.
Construct
(
static_cast
<
uint32_t
>
(
aErrorCode
)
)
;
ErrorResult
rv
;
aCallback
-
>
Call
(
response
rv
)
;
NS_WARN_IF
(
rv
.
Failed
(
)
)
;
rv
.
SuppressException
(
)
;
}
static
nsresult
AssembleClientData
(
const
nsAString
&
aOrigin
const
nsAString
&
aTyp
const
nsAString
&
aChallenge
CryptoBuffer
&
aClientData
)
{
ClientData
clientDataObject
;
clientDataObject
.
mTyp
.
Construct
(
aTyp
)
;
clientDataObject
.
mChallenge
.
Construct
(
aChallenge
)
;
clientDataObject
.
mOrigin
.
Construct
(
aOrigin
)
;
nsAutoString
json
;
if
(
NS_WARN_IF
(
!
clientDataObject
.
ToJSON
(
json
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_WARN_IF
(
!
aClientData
.
Assign
(
NS_ConvertUTF16toUTF8
(
json
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
U2FTask
:
:
U2FTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
)
:
mOrigin
(
aOrigin
)
mAppId
(
aAppId
)
{
}
U2FTask
:
:
~
U2FTask
(
)
{
}
U2FRegisterTask
:
:
U2FRegisterTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FRegisterCallback
*
aCallback
const
Sequence
<
Authenticator
>
&
aAuthenticators
)
:
U2FTask
(
aOrigin
aAppId
)
mRegisterRequests
(
aRegisterRequests
)
mRegisteredKeys
(
aRegisteredKeys
)
mCallback
(
aCallback
)
mAuthenticators
(
aAuthenticators
)
{
}
U2FRegisterTask
:
:
~
U2FRegisterTask
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
shutdown
(
calledFromObject
)
;
}
void
U2FRegisterTask
:
:
ReturnError
(
ErrorCode
aCode
)
{
SendError
<
U2FRegisterCallback
RegisterResponse
>
(
mCallback
.
get
(
)
aCode
)
;
}
NS_IMETHODIMP
U2FRegisterTask
:
:
Run
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
for
(
size_t
i
=
0
;
i
<
mRegisteredKeys
.
Length
(
)
;
+
+
i
)
{
RegisteredKey
request
(
mRegisteredKeys
[
i
]
)
;
if
(
!
(
request
.
mKeyHandle
.
WasPassed
(
)
&
&
request
.
mVersion
.
WasPassed
(
)
)
)
{
continue
;
}
if
(
request
.
mAppId
.
WasPassed
(
)
&
&
mAppId
!
=
request
.
mAppId
.
Value
(
)
)
{
continue
;
}
CryptoBuffer
keyHandle
;
nsresult
rv
=
keyHandle
.
FromJwkBase64
(
request
.
mKeyHandle
.
Value
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
NS_ERROR_FAILURE
;
}
bool
isCompatible
=
false
;
bool
isRegistered
=
false
;
for
(
auto
token
:
mAuthenticators
)
{
rv
=
token
-
>
IsCompatibleVersion
(
request
.
mVersion
.
Value
(
)
&
isCompatible
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
isCompatible
)
{
continue
;
}
rv
=
token
-
>
IsRegistered
(
keyHandle
.
Elements
(
)
keyHandle
.
Length
(
)
&
isRegistered
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
if
(
isCompatible
&
&
isRegistered
)
{
ReturnError
(
ErrorCode
:
:
DEVICE_INELIGIBLE
)
;
return
NS_OK
;
}
}
}
for
(
size_t
i
=
0
;
i
<
mRegisterRequests
.
Length
(
)
;
+
+
i
)
{
RegisterRequest
request
(
mRegisterRequests
[
i
]
)
;
if
(
!
(
request
.
mVersion
.
WasPassed
(
)
&
&
request
.
mChallenge
.
WasPassed
(
)
)
)
{
continue
;
}
CryptoBuffer
clientData
;
nsresult
rv
=
AssembleClientData
(
mOrigin
kFinishEnrollment
request
.
mChallenge
.
Value
(
)
clientData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
SECStatus
srv
;
nsCString
cAppId
=
NS_ConvertUTF16toUTF8
(
mAppId
)
;
CryptoBuffer
appParam
;
CryptoBuffer
challengeParam
;
if
(
!
appParam
.
SetLength
(
SHA256_LENGTH
fallible
)
|
|
!
challengeParam
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
srv
=
PK11_HashBuf
(
SEC_OID_SHA256
appParam
.
Elements
(
)
reinterpret_cast
<
const
uint8_t
*
>
(
cAppId
.
BeginReading
(
)
)
cAppId
.
Length
(
)
)
;
if
(
srv
!
=
SECSuccess
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
srv
=
PK11_HashBuf
(
SEC_OID_SHA256
challengeParam
.
Elements
(
)
clientData
.
Elements
(
)
clientData
.
Length
(
)
)
;
if
(
srv
!
=
SECSuccess
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
CryptoBuffer
regData
;
bool
registerSuccess
=
false
;
bool
isCompatible
=
false
;
for
(
auto
token
:
mAuthenticators
)
{
rv
=
token
-
>
IsCompatibleVersion
(
request
.
mVersion
.
Value
(
)
&
isCompatible
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
if
(
isCompatible
)
{
uint8_t
*
buffer
;
uint32_t
bufferlen
;
nsresult
rv
;
rv
=
token
-
>
Register
(
appParam
.
Elements
(
)
appParam
.
Length
(
)
challengeParam
.
Elements
(
)
challengeParam
.
Length
(
)
&
buffer
&
bufferlen
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
buffer
)
;
regData
.
Assign
(
buffer
bufferlen
)
;
free
(
buffer
)
;
registerSuccess
=
true
;
break
;
}
}
if
(
!
registerSuccess
)
{
continue
;
}
nsString
clientDataBase64
registrationDataBase64
;
nsresult
rvClientData
=
clientData
.
ToJwkBase64
(
clientDataBase64
)
;
nsresult
rvRegistrationData
=
regData
.
ToJwkBase64
(
registrationDataBase64
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rvClientData
)
)
|
|
NS_WARN_IF
(
NS_FAILED
(
rvRegistrationData
)
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
RegisterResponse
response
;
response
.
mClientData
.
Construct
(
clientDataBase64
)
;
response
.
mRegistrationData
.
Construct
(
registrationDataBase64
)
;
response
.
mErrorCode
.
Construct
(
static_cast
<
uint32_t
>
(
ErrorCode
:
:
OK
)
)
;
ErrorResult
result
;
mCallback
-
>
Call
(
response
result
)
;
NS_WARN_IF
(
result
.
Failed
(
)
)
;
result
.
SuppressException
(
)
;
return
NS_OK
;
}
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
NS_ERROR_FAILURE
;
}
U2FSignTask
:
:
U2FSignTask
(
const
nsAString
&
aOrigin
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FSignCallback
*
aCallback
const
Sequence
<
Authenticator
>
&
aAuthenticators
)
:
U2FTask
(
aOrigin
aAppId
)
mChallenge
(
aChallenge
)
mRegisteredKeys
(
aRegisteredKeys
)
mCallback
(
aCallback
)
mAuthenticators
(
aAuthenticators
)
{
}
U2FSignTask
:
:
~
U2FSignTask
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
shutdown
(
calledFromObject
)
;
}
void
U2FSignTask
:
:
ReturnError
(
ErrorCode
aCode
)
{
SendError
<
U2FSignCallback
SignResponse
>
(
mCallback
.
get
(
)
aCode
)
;
}
NS_IMETHODIMP
U2FSignTask
:
:
Run
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
for
(
size_t
i
=
0
;
i
<
mRegisteredKeys
.
Length
(
)
;
i
+
=
1
)
{
RegisteredKey
request
(
mRegisteredKeys
[
i
]
)
;
if
(
!
(
request
.
mVersion
.
WasPassed
(
)
&
&
request
.
mKeyHandle
.
WasPassed
(
)
)
)
{
continue
;
}
if
(
request
.
mAppId
.
WasPassed
(
)
&
&
mAppId
!
=
request
.
mAppId
.
Value
(
)
)
{
continue
;
}
CryptoBuffer
clientData
;
nsresult
rv
=
AssembleClientData
(
mOrigin
kGetAssertion
mChallenge
clientData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
SECStatus
srv
;
nsCString
cAppId
=
NS_ConvertUTF16toUTF8
(
mAppId
)
;
CryptoBuffer
appParam
;
CryptoBuffer
challengeParam
;
if
(
!
appParam
.
SetLength
(
SHA256_LENGTH
fallible
)
|
|
!
challengeParam
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
srv
=
PK11_HashBuf
(
SEC_OID_SHA256
appParam
.
Elements
(
)
reinterpret_cast
<
const
uint8_t
*
>
(
cAppId
.
BeginReading
(
)
)
cAppId
.
Length
(
)
)
;
if
(
srv
!
=
SECSuccess
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
srv
=
PK11_HashBuf
(
SEC_OID_SHA256
challengeParam
.
Elements
(
)
clientData
.
Elements
(
)
clientData
.
Length
(
)
)
;
if
(
srv
!
=
SECSuccess
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
CryptoBuffer
keyHandle
;
rv
=
keyHandle
.
FromJwkBase64
(
request
.
mKeyHandle
.
Value
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
CryptoBuffer
signatureData
;
bool
signSuccess
=
false
;
for
(
size_t
a
=
0
;
a
<
mAuthenticators
.
Length
(
)
&
&
!
signSuccess
;
+
+
a
)
{
Authenticator
token
(
mAuthenticators
[
a
]
)
;
bool
isCompatible
=
false
;
bool
isRegistered
=
false
;
rv
=
token
-
>
IsCompatibleVersion
(
request
.
mVersion
.
Value
(
)
&
isCompatible
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
isCompatible
)
{
continue
;
}
rv
=
token
-
>
IsRegistered
(
keyHandle
.
Elements
(
)
keyHandle
.
Length
(
)
&
isRegistered
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
if
(
isCompatible
&
&
isRegistered
)
{
uint8_t
*
buffer
;
uint32_t
bufferlen
;
nsresult
rv
=
token
-
>
Sign
(
appParam
.
Elements
(
)
appParam
.
Length
(
)
challengeParam
.
Elements
(
)
challengeParam
.
Length
(
)
keyHandle
.
Elements
(
)
keyHandle
.
Length
(
)
&
buffer
&
bufferlen
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
buffer
)
;
signatureData
.
Assign
(
buffer
bufferlen
)
;
free
(
buffer
)
;
signSuccess
=
true
;
}
}
if
(
!
signSuccess
)
{
continue
;
}
nsString
clientDataBase64
signatureDataBase64
;
nsresult
rvClientData
=
clientData
.
ToJwkBase64
(
clientDataBase64
)
;
nsresult
rvSignatureData
=
signatureData
.
ToJwkBase64
(
signatureDataBase64
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rvClientData
)
)
|
|
NS_WARN_IF
(
NS_FAILED
(
rvSignatureData
)
)
)
{
ReturnError
(
ErrorCode
:
:
OTHER_ERROR
)
;
return
NS_ERROR_FAILURE
;
}
SignResponse
response
;
response
.
mKeyHandle
.
Construct
(
request
.
mKeyHandle
.
Value
(
)
)
;
response
.
mClientData
.
Construct
(
clientDataBase64
)
;
response
.
mSignatureData
.
Construct
(
signatureDataBase64
)
;
response
.
mErrorCode
.
Construct
(
static_cast
<
uint32_t
>
(
ErrorCode
:
:
OK
)
)
;
ErrorResult
result
;
mCallback
-
>
Call
(
response
result
)
;
NS_WARN_IF
(
result
.
Failed
(
)
)
;
result
.
SuppressException
(
)
;
return
NS_OK
;
}
ReturnError
(
ErrorCode
:
:
DEVICE_INELIGIBLE
)
;
return
NS_ERROR_FAILURE
;
}
static
void
EvaluateAppIDAndRunTask
(
U2FTask
*
aTask
)
{
MOZ_ASSERT
(
aTask
)
;
nsCOMPtr
<
nsIURLParser
>
urlParser
=
do_GetService
(
NS_STDURLPARSER_CONTRACTID
)
;
MOZ_ASSERT
(
urlParser
)
;
uint32_t
facetSchemePos
;
int32_t
facetSchemeLen
;
uint32_t
facetAuthPos
;
int32_t
facetAuthLen
;
nsAutoCString
facetUrl
=
NS_ConvertUTF16toUTF8
(
aTask
-
>
mOrigin
)
;
nsresult
rv
=
urlParser
-
>
ParseURL
(
facetUrl
.
get
(
)
aTask
-
>
mOrigin
.
Length
(
)
&
facetSchemePos
&
facetSchemeLen
&
facetAuthPos
&
facetAuthLen
nullptr
nullptr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aTask
-
>
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
;
}
nsAutoCString
facetScheme
(
Substring
(
facetUrl
facetSchemePos
facetSchemeLen
)
)
;
nsAutoCString
facetAuth
(
Substring
(
facetUrl
facetAuthPos
facetAuthLen
)
)
;
uint32_t
appIdSchemePos
;
int32_t
appIdSchemeLen
;
uint32_t
appIdAuthPos
;
int32_t
appIdAuthLen
;
nsAutoCString
appIdUrl
=
NS_ConvertUTF16toUTF8
(
aTask
-
>
mAppId
)
;
rv
=
urlParser
-
>
ParseURL
(
appIdUrl
.
get
(
)
aTask
-
>
mAppId
.
Length
(
)
&
appIdSchemePos
&
appIdSchemeLen
&
appIdAuthPos
&
appIdAuthLen
nullptr
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
aTask
-
>
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
;
}
nsAutoCString
appIdScheme
(
Substring
(
appIdUrl
appIdSchemePos
appIdSchemeLen
)
)
;
nsAutoCString
appIdAuth
(
Substring
(
appIdUrl
appIdAuthPos
appIdAuthLen
)
)
;
if
(
!
facetScheme
.
LowerCaseEqualsLiteral
(
"
https
"
)
)
{
aTask
-
>
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
;
}
if
(
aTask
-
>
mAppId
.
IsEmpty
(
)
|
|
aTask
-
>
mAppId
.
EqualsLiteral
(
"
null
"
)
)
{
aTask
-
>
mAppId
.
Assign
(
aTask
-
>
mOrigin
)
;
aTask
-
>
Run
(
)
;
return
;
}
if
(
!
appIdScheme
.
LowerCaseEqualsLiteral
(
"
https
"
)
)
{
aTask
-
>
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
;
}
if
(
facetAuth
=
=
appIdAuth
)
{
aTask
-
>
Run
(
)
;
return
;
}
aTask
-
>
ReturnError
(
ErrorCode
:
:
BAD_REQUEST
)
;
return
;
}
U2F
:
:
U2F
(
)
{
}
U2F
:
:
~
U2F
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
shutdown
(
calledFromObject
)
;
}
JSObject
*
U2F
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
U2FBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
U2F
:
:
Init
(
nsPIDOMWindowInner
*
aParent
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
mParent
)
;
mParent
=
do_QueryInterface
(
aParent
)
;
MOZ_ASSERT
(
mParent
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
mParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsIPrincipal
*
principal
=
doc
-
>
NodePrincipal
(
)
;
aRv
=
nsContentUtils
:
:
GetUTFOrigin
(
principal
mOrigin
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
NS_WARN_IF
(
mOrigin
.
IsEmpty
(
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
!
EnsureNSSInitializedChromeOrContent
(
)
)
{
MOZ_LOG
(
gWebauthLog
LogLevel
:
:
Debug
(
"
Failed
to
get
NSS
context
for
U2F
"
)
)
;
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
Preferences
:
:
GetBool
(
PREF_U2F_SOFTTOKEN_ENABLED
)
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
MOZ_LOG
(
gWebauthLog
LogLevel
:
:
Debug
(
"
Is
e10s
Process
getting
remote
U2F
soft
token
"
)
)
;
if
(
!
mAuthenticators
.
AppendElement
(
new
NSSU2FTokenRemote
(
)
mozilla
:
:
fallible
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
}
else
{
MOZ_LOG
(
gWebauthLog
LogLevel
:
:
Debug
(
"
Is
non
-
e10s
Process
getting
direct
U2F
soft
token
"
)
)
;
nsCOMPtr
<
nsINSSU2FToken
>
softToken
=
do_GetService
(
NS_NSSU2FTOKEN_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
softToken
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
!
mAuthenticators
.
AppendElement
(
softToken
mozilla
:
:
fallible
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
}
}
}
void
U2F
:
:
Register
(
const
nsAString
&
aAppId
const
Sequence
<
RegisterRequest
>
&
aRegisterRequests
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FRegisterCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
{
RefPtr
<
U2FRegisterTask
>
registerTask
=
new
U2FRegisterTask
(
mOrigin
aAppId
aRegisterRequests
aRegisteredKeys
&
aCallback
mAuthenticators
)
;
EvaluateAppIDAndRunTask
(
registerTask
)
;
}
void
U2F
:
:
Sign
(
const
nsAString
&
aAppId
const
nsAString
&
aChallenge
const
Sequence
<
RegisteredKey
>
&
aRegisteredKeys
U2FSignCallback
&
aCallback
const
Optional
<
Nullable
<
int32_t
>
>
&
opt_aTimeoutSeconds
ErrorResult
&
aRv
)
{
RefPtr
<
U2FSignTask
>
signTask
=
new
U2FSignTask
(
mOrigin
aAppId
aChallenge
aRegisteredKeys
&
aCallback
mAuthenticators
)
;
EvaluateAppIDAndRunTask
(
signTask
)
;
}
}
}
