"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
localhost
/
"
;
function
promiseU2FRegister
(
tab
app_id
)
{
let
challenge
=
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
;
challenge
=
bytesToBase64UrlSafe
(
challenge
)
;
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
[
app_id
challenge
]
async
function
(
[
app_id
challenge
]
)
{
return
new
Promise
(
resolve
=
>
{
let
version
=
"
U2F_V2
"
;
content
.
u2f
.
register
(
app_id
[
{
version
challenge
}
]
[
]
resolve
)
;
}
)
;
}
)
;
}
add_task
(
async
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
u2f
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
false
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
ready
=
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
(
)
=
>
{
return
content
.
location
.
origin
=
=
"
https
:
/
/
localhost
"
&
&
content
.
u2f
;
}
)
;
ok
(
ready
"
Origin
is
https
:
/
/
localhost
.
U2F
is
available
.
"
)
;
await
promiseU2FRegister
(
tab
null
)
.
then
(
res
=
>
{
is
(
res
.
errorCode
0
"
Null
AppID
should
work
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
"
)
.
then
(
res
=
>
{
is
(
res
.
errorCode
0
"
Empty
AppID
should
work
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
http
:
/
/
localhost
/
appId
"
)
.
then
(
res
=
>
{
isnot
(
res
.
errorCode
0
"
Incorrect
scheme
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
https
:
/
/
localhost
.
ssl
/
appId
"
)
.
then
(
res
=
>
{
isnot
(
res
.
errorCode
0
"
Incorrect
TLD
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
https
:
/
/
sub
.
localhost
/
appId
"
)
.
then
(
res
=
>
{
isnot
(
res
.
errorCode
0
"
Incorrect
TLD
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
https
:
/
/
localhost
/
appId
"
)
.
then
(
res
=
>
{
is
(
res
.
errorCode
0
"
https
:
/
/
localhost
/
appId
should
work
.
"
)
;
}
)
;
await
promiseU2FRegister
(
tab
"
https
:
/
/
localhost
:
443
/
appId
"
)
.
then
(
res
=
>
{
is
(
res
.
errorCode
0
"
https
:
/
/
localhost
:
443
/
appId
should
work
.
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
u2f
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
)
;
}
)
;
