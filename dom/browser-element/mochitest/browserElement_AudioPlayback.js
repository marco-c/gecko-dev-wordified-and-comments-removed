'
use
strict
'
;
const
{
Services
}
=
SpecialPowers
.
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
SimpleTest
.
waitForExplicitFinish
(
)
;
browserElementTestHelpers
.
setEnabledPref
(
true
)
;
browserElementTestHelpers
.
addPermission
(
)
;
function
playAudioScript
(
)
{
var
audio
=
new
content
.
Audio
(
)
;
content
.
document
.
body
.
appendChild
(
audio
)
;
audio
.
oncanplay
=
function
(
)
{
audio
.
play
(
)
;
}
;
audio
.
src
=
'
audio
.
ogg
'
;
}
function
createFrame
(
)
{
let
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
setAttribute
(
'
mozbrowser
'
'
true
'
)
;
document
.
body
.
appendChild
(
iframe
)
;
return
iframe
;
}
function
runTest
(
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
let
iframe
=
createFrame
(
)
;
let
iframe2
=
createFrame
(
)
;
iframe
.
addEventListener
(
'
mozbrowserloadend
'
(
)
=
>
{
let
mm
=
SpecialPowers
.
getBrowserFrameMessageManager
(
iframe
)
;
mm
.
loadFrameScript
(
'
data
:
(
'
+
playAudioScript
.
toString
(
)
+
'
)
(
)
;
'
false
)
;
}
)
;
let
expectedNextData
=
'
active
'
;
iframe
.
addEventListener
(
'
mozbrowseraudioplaybackchange
'
(
e
)
=
>
{
is
(
e
.
detail
expectedNextData
'
Audio
detail
should
be
correct
'
)
is
(
e
.
target
iframe
'
event
target
should
be
the
first
iframe
'
)
if
(
e
.
detail
=
=
=
'
inactive
-
pause
'
)
{
SimpleTest
.
finish
(
)
;
}
expectedNextData
=
'
inactive
-
pause
'
;
}
)
;
iframe2
.
addEventListener
(
'
mozbrowseraudioplaybackchange
'
(
e
)
=
>
{
ok
(
false
'
mozbrowseraudioplaybackchange
should
dispatch
to
the
correct
browser
'
)
;
}
)
;
iframe
.
src
=
browserElementTestHelpers
.
emptyPage1
;
}
addEventListener
(
'
testready
'
function
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
'
set
'
:
[
[
"
b2g
.
system_manifest_url
"
"
http
:
/
/
mochi
.
test
:
8888
/
manifest
.
webapp
"
]
]
}
function
(
)
{
SimpleTest
.
executeSoon
(
runTest
)
;
}
)
;
}
)
;
