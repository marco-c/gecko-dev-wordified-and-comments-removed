'
use
strict
'
;
SimpleTest
.
waitForExplicitFinish
(
)
;
browserElementTestHelpers
.
setEnabledPref
(
true
)
;
var
test1
=
async
(
function
*
(
)
{
var
manifest
=
yield
requestManifest
(
'
file_empty
.
html
'
)
;
is
(
manifest
null
'
it
should
be
null
.
'
)
;
}
)
;
var
test2
=
async
(
function
*
(
)
{
var
manifest
=
yield
requestManifest
(
'
file_web_manifest
.
html
'
)
;
is
(
manifest
&
&
manifest
.
name
'
pass
'
'
it
should
return
a
manifest
with
name
pass
.
'
)
;
}
)
;
var
test3
=
async
(
function
*
(
)
{
var
gotError
=
false
;
try
{
yield
requestManifest
(
'
file_illegal_web_manifest
.
html
'
)
;
}
catch
(
err
)
{
gotError
=
true
;
}
ok
(
gotError
'
onerror
was
called
on
the
DOMRequest
.
'
)
;
}
)
;
addEventListener
(
'
testready
'
(
)
=
>
{
Promise
.
all
(
[
test1
(
)
test2
(
)
test3
(
)
]
)
.
then
(
SimpleTest
.
finish
)
;
}
)
;
function
requestManifest
(
url
)
{
var
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
setAttribute
(
'
mozbrowser
'
'
true
'
)
;
iframe
.
src
=
url
;
document
.
body
.
appendChild
(
iframe
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
iframe
.
addEventListener
(
'
mozbrowserloadend
'
function
loadend
(
)
{
iframe
.
removeEventListener
(
'
mozbrowserloadend
'
loadend
)
;
SimpleTest
.
executeSoon
(
(
)
=
>
{
var
req
=
iframe
.
getWebManifest
(
)
;
req
.
onsuccess
=
(
)
=
>
{
document
.
body
.
removeChild
(
iframe
)
;
resolve
(
req
.
result
)
;
}
;
req
.
onerror
=
(
)
=
>
{
document
.
body
.
removeChild
(
iframe
)
;
reject
(
new
Error
(
req
.
error
)
)
;
}
;
}
)
;
}
)
;
}
)
;
}
