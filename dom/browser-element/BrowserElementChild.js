"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
debug
(
msg
)
{
}
docShell
.
isActive
=
true
;
function
parentDocShell
(
docshell
)
{
if
(
!
docshell
)
{
return
null
;
}
let
treeitem
=
docshell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
;
return
treeitem
.
parent
?
treeitem
.
parent
.
QueryInterface
(
Ci
.
nsIDocShell
)
:
null
;
}
function
isTopBrowserElement
(
docShell
)
{
while
(
docShell
)
{
docShell
=
parentDocShell
(
docShell
)
;
if
(
docShell
&
&
docShell
.
isMozBrowser
)
{
return
false
;
}
}
return
true
;
}
var
BrowserElementIsReady
;
debug
(
Might
load
BE
scripts
:
BEIR
:
{
BrowserElementIsReady
}
)
;
if
(
!
BrowserElementIsReady
)
{
debug
(
"
Loading
BE
scripts
"
)
if
(
!
(
"
BrowserElementIsPreloaded
"
in
this
)
)
{
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
if
(
isTopBrowserElement
(
docShell
)
)
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
BrowserElementCopyPaste
.
js
"
)
;
}
}
else
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
BrowserElementCopyPaste
.
js
"
)
;
}
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
BrowserElementChildPreload
.
js
"
)
;
}
function
onDestroy
(
)
{
removeMessageListener
(
"
browser
-
element
-
api
:
destroy
"
onDestroy
)
;
if
(
api
)
{
api
.
destroy
(
)
;
}
if
(
"
CopyPasteAssistent
"
in
this
)
{
CopyPasteAssistent
.
destroy
(
)
;
}
BrowserElementIsReady
=
false
;
}
addMessageListener
(
"
browser
-
element
-
api
:
destroy
"
onDestroy
)
;
BrowserElementIsReady
=
true
;
}
else
{
debug
(
"
BE
already
loaded
abort
"
)
;
}
sendAsyncMessage
(
'
browser
-
element
-
api
:
call
'
{
'
msg_name
'
:
'
hello
'
}
)
;
