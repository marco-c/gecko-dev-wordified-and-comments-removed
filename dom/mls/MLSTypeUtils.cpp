#
include
"
mozilla
/
dom
/
MLSBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
dom
{
nsTArray
<
uint8_t
>
ExtractMLSBytesOrUint8ArrayWithUnknownType
(
const
MLSBytesOrUint8Array
&
aArgument
ErrorResult
&
aRv
)
{
const
Uint8Array
*
array
=
nullptr
;
if
(
aArgument
.
IsMLSBytes
(
)
)
{
array
=
&
aArgument
.
GetAsMLSBytes
(
)
.
mContent
;
}
else
{
MOZ_ASSERT
(
aArgument
.
IsUint8Array
(
)
)
;
array
=
&
aArgument
.
GetAsUint8Array
(
)
;
}
nsTArray
<
uint8_t
>
bytes
;
if
(
array
&
&
!
array
-
>
AppendDataTo
(
bytes
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
return
bytes
;
}
nsTArray
<
uint8_t
>
ExtractMLSBytesOrUint8Array
(
MLSObjectType
aExpectedType
const
MLSBytesOrUint8Array
&
aArgument
ErrorResult
&
aRv
)
{
const
Uint8Array
*
array
=
nullptr
;
if
(
aArgument
.
IsMLSBytes
(
)
)
{
if
(
aArgument
.
GetAsMLSBytes
(
)
.
mType
!
=
aExpectedType
)
{
aRv
.
ThrowTypeError
(
"
Input
data
has
an
invalid
type
"
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
array
=
&
aArgument
.
GetAsMLSBytes
(
)
.
mContent
;
}
else
{
MOZ_ASSERT
(
aArgument
.
IsUint8Array
(
)
)
;
array
=
&
aArgument
.
GetAsUint8Array
(
)
;
}
nsTArray
<
uint8_t
>
bytes
;
if
(
array
&
&
!
array
-
>
AppendDataTo
(
bytes
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
return
bytes
;
}
nsTArray
<
uint8_t
>
ExtractMLSBytesOrUint8ArrayOrUTF8String
(
MLSObjectType
aExpectedType
const
MLSBytesOrUint8ArrayOrUTF8String
&
aArgument
ErrorResult
&
aRv
)
{
const
Uint8Array
*
array
=
nullptr
;
nsTArray
<
uint8_t
>
bytes
;
if
(
aArgument
.
IsMLSBytes
(
)
)
{
if
(
aArgument
.
GetAsMLSBytes
(
)
.
mType
!
=
aExpectedType
)
{
aRv
.
ThrowTypeError
(
"
Input
data
has
an
invalid
type
"
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
array
=
&
aArgument
.
GetAsMLSBytes
(
)
.
mContent
;
}
else
if
(
aArgument
.
IsUint8Array
(
)
)
{
array
=
&
aArgument
.
GetAsUint8Array
(
)
;
}
else
{
MOZ_ASSERT
(
aArgument
.
IsUTF8String
(
)
)
;
const
nsACString
&
string
=
aArgument
.
GetAsUTF8String
(
)
;
if
(
!
bytes
.
AppendElements
(
string
.
BeginReading
(
)
string
.
Length
(
)
fallible
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
return
bytes
;
}
if
(
array
&
&
!
array
-
>
AppendDataTo
(
bytes
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
nsTArray
<
uint8_t
>
(
)
;
}
return
bytes
;
}
}
