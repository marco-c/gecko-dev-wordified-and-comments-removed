#
ifndef
mozilla_dom_EventCallbackDebuggerNotification_h
#
define
mozilla_dom_EventCallbackDebuggerNotification_h
#
include
"
CallbackDebuggerNotification
.
h
"
#
include
"
DebuggerNotificationManager
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
EventCallbackDebuggerNotification
:
public
CallbackDebuggerNotification
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
EventCallbackDebuggerNotification
CallbackDebuggerNotification
)
EventCallbackDebuggerNotification
(
nsIGlobalObject
*
debuggeeGlobal
DebuggerNotificationType
t
Event
*
event
EventCallbackDebuggerNotificationType
targetType
CallbackDebuggerNotificationPhase
phase
nsIGlobalObject
*
ownerGlobal
=
nullptr
)
:
CallbackDebuggerNotification
(
debuggeeGlobal
t
phase
ownerGlobal
)
mEvent
(
event
)
mTargetType
(
targetType
)
{
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
DebuggerNotification
>
CloneInto
(
nsIGlobalObject
*
newOwner
)
const
override
;
Event
*
Event
(
)
const
{
return
mEvent
;
}
EventCallbackDebuggerNotificationType
TargetType
(
)
const
{
return
mTargetType
;
}
private
:
~
EventCallbackDebuggerNotification
(
)
=
default
;
RefPtr
<
mozilla
:
:
dom
:
:
Event
>
mEvent
;
EventCallbackDebuggerNotificationType
mTargetType
;
}
;
class
MOZ_RAII
EventCallbackDebuggerNotificationGuard
final
{
public
:
MOZ_CAN_RUN_SCRIPT
explicit
EventCallbackDebuggerNotificationGuard
(
mozilla
:
:
dom
:
:
EventTarget
*
aEventTarget
mozilla
:
:
dom
:
:
Event
*
aEvent
)
:
mDebuggeeGlobal
(
aEventTarget
?
aEventTarget
-
>
GetOwnerGlobal
(
)
:
nullptr
)
mEventTarget
(
aEventTarget
)
mEvent
(
aEvent
)
{
Dispatch
(
CallbackDebuggerNotificationPhase
:
:
Pre
)
;
}
EventCallbackDebuggerNotificationGuard
(
const
EventCallbackDebuggerNotificationGuard
&
)
=
delete
;
EventCallbackDebuggerNotificationGuard
(
EventCallbackDebuggerNotificationGuard
&
&
)
=
delete
;
EventCallbackDebuggerNotificationGuard
&
operator
=
(
const
EventCallbackDebuggerNotificationGuard
&
)
=
delete
;
EventCallbackDebuggerNotificationGuard
&
operator
=
(
EventCallbackDebuggerNotificationGuard
&
&
)
=
delete
;
MOZ_CAN_RUN_SCRIPT
~
EventCallbackDebuggerNotificationGuard
(
)
{
Dispatch
(
CallbackDebuggerNotificationPhase
:
:
Post
)
;
}
private
:
MOZ_CAN_RUN_SCRIPT
void
Dispatch
(
CallbackDebuggerNotificationPhase
aPhase
)
{
auto
manager
=
DebuggerNotificationManager
:
:
ForDispatch
(
mDebuggeeGlobal
)
;
if
(
MOZ_UNLIKELY
(
manager
)
)
{
DispatchToManager
(
manager
aPhase
)
;
}
}
MOZ_CAN_RUN_SCRIPT
void
DispatchToManager
(
const
RefPtr
<
DebuggerNotificationManager
>
&
aManager
CallbackDebuggerNotificationPhase
aPhase
)
;
nsIGlobalObject
*
mDebuggeeGlobal
;
mozilla
:
:
dom
:
:
EventTarget
*
mEventTarget
;
mozilla
:
:
dom
:
:
Event
*
mEvent
;
}
;
}
}
#
endif
