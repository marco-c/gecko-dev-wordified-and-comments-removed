#
include
"
DebuggerNotificationManager
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION
(
DebuggerNotificationManager
mDebuggeeGlobal
mNotificationObservers
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DebuggerNotificationManager
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DebuggerNotificationManager
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DebuggerNotificationManager
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
DebuggerNotificationManager
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
bool
DebuggerNotificationManager
:
:
Attach
(
DebuggerNotificationObserver
*
aObserver
)
{
RefPtr
<
DebuggerNotificationObserver
>
ptr
(
aObserver
)
;
if
(
mNotificationObservers
.
Contains
(
ptr
)
)
{
return
false
;
}
mNotificationObservers
.
AppendElement
(
ptr
)
;
return
true
;
}
bool
DebuggerNotificationManager
:
:
Detach
(
DebuggerNotificationObserver
*
aObserver
)
{
RefPtr
<
DebuggerNotificationObserver
>
ptr
(
aObserver
)
;
return
mNotificationObservers
.
RemoveElement
(
ptr
)
;
}
bool
DebuggerNotificationManager
:
:
HasListeners
(
)
{
for
(
const
auto
&
observer
:
mNotificationObservers
.
ForwardRange
(
)
)
{
if
(
observer
-
>
HasListeners
(
)
)
{
return
true
;
}
}
return
false
;
}
void
DebuggerNotificationManager
:
:
NotifyListeners
(
DebuggerNotification
*
aNotification
)
{
for
(
RefPtr
<
DebuggerNotificationObserver
>
observer
:
mNotificationObservers
.
ForwardRange
(
)
)
{
observer
-
>
NotifyListeners
(
aNotification
)
;
}
}
}
}
