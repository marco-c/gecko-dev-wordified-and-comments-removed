#
ifndef
mozilla_dom_DebuggerNotificationObserver_h
#
define
mozilla_dom_DebuggerNotificationObserver_h
#
include
"
DebuggerNotificationManager
.
h
"
#
include
"
mozilla
/
dom
/
DebuggerNotificationObserverBinding
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
:
:
dom
{
class
DebuggerNotification
;
class
DebuggerNotificationObserver
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
DebuggerNotificationObserver
)
static
already_AddRefed
<
DebuggerNotificationObserver
>
Constructor
(
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwnerGlobal
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
bool
Connect
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aDebuggeeGlobal
ErrorResult
&
aRv
)
;
bool
Disconnect
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aDebuggeeGlobal
ErrorResult
&
aRv
)
;
bool
AddListener
(
DebuggerNotificationCallback
&
aHandlerFn
)
;
bool
RemoveListener
(
DebuggerNotificationCallback
&
aHandlerFn
)
;
bool
HasListeners
(
)
;
MOZ_CAN_RUN_SCRIPT
void
NotifyListeners
(
DebuggerNotification
*
aNotification
)
;
private
:
explicit
DebuggerNotificationObserver
(
nsIGlobalObject
*
aOwnerGlobal
)
;
~
DebuggerNotificationObserver
(
)
=
default
;
nsTObserverArray
<
RefPtr
<
DebuggerNotificationCallback
>
>
mEventListenerCallbacks
;
nsCOMPtr
<
nsIGlobalObject
>
mOwnerGlobal
;
}
;
}
#
endif
