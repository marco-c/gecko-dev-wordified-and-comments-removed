#
ifndef
mozilla_dom_CallbackDebuggerNotification_h
#
define
mozilla_dom_CallbackDebuggerNotification_h
#
include
"
DebuggerNotification
.
h
"
#
include
"
DebuggerNotificationManager
.
h
"
namespace
mozilla
{
namespace
dom
{
class
CallbackDebuggerNotification
:
public
DebuggerNotification
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CallbackDebuggerNotification
DebuggerNotification
)
CallbackDebuggerNotification
(
nsIGlobalObject
*
aDebuggeeGlobal
DebuggerNotificationType
aType
CallbackDebuggerNotificationPhase
aPhase
nsIGlobalObject
*
aOwnerGlobal
=
nullptr
)
:
DebuggerNotification
(
aDebuggeeGlobal
aType
aOwnerGlobal
)
mPhase
(
aPhase
)
{
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
DebuggerNotification
>
CloneInto
(
nsIGlobalObject
*
aNewOwner
)
const
override
;
CallbackDebuggerNotificationPhase
Phase
(
)
const
{
return
mPhase
;
}
protected
:
~
CallbackDebuggerNotification
(
)
=
default
;
CallbackDebuggerNotificationPhase
mPhase
;
}
;
class
MOZ_RAII
CallbackDebuggerNotificationGuard
final
{
public
:
MOZ_CAN_RUN_SCRIPT
CallbackDebuggerNotificationGuard
(
nsIGlobalObject
*
aDebuggeeGlobal
DebuggerNotificationType
aType
)
:
mDebuggeeGlobal
(
aDebuggeeGlobal
)
mType
(
aType
)
{
Dispatch
(
CallbackDebuggerNotificationPhase
:
:
Pre
)
;
}
CallbackDebuggerNotificationGuard
(
const
CallbackDebuggerNotificationGuard
&
)
=
delete
;
CallbackDebuggerNotificationGuard
(
CallbackDebuggerNotificationGuard
&
&
)
=
delete
;
CallbackDebuggerNotificationGuard
&
operator
=
(
const
CallbackDebuggerNotificationGuard
&
)
=
delete
;
CallbackDebuggerNotificationGuard
&
operator
=
(
CallbackDebuggerNotificationGuard
&
&
)
=
delete
;
MOZ_CAN_RUN_SCRIPT
~
CallbackDebuggerNotificationGuard
(
)
{
Dispatch
(
CallbackDebuggerNotificationPhase
:
:
Post
)
;
}
private
:
MOZ_CAN_RUN_SCRIPT
void
Dispatch
(
CallbackDebuggerNotificationPhase
aPhase
)
{
auto
manager
=
DebuggerNotificationManager
:
:
ForDispatch
(
mDebuggeeGlobal
)
;
if
(
MOZ_UNLIKELY
(
manager
)
)
{
manager
-
>
Dispatch
<
CallbackDebuggerNotification
>
(
mType
aPhase
)
;
}
}
nsIGlobalObject
*
mDebuggeeGlobal
;
DebuggerNotificationType
mType
;
}
;
}
}
#
endif
