#
include
"
EventCallbackDebuggerNotification
.
h
"
#
include
"
DebuggerNotificationManager
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
Worker
.
h
"
#
include
"
mozilla
/
dom
/
XMLHttpRequestEventTarget
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
EventCallbackDebuggerNotification
CallbackDebuggerNotification
mEvent
)
NS_IMPL_ADDREF_INHERITED
(
EventCallbackDebuggerNotification
CallbackDebuggerNotification
)
NS_IMPL_RELEASE_INHERITED
(
EventCallbackDebuggerNotification
CallbackDebuggerNotification
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EventCallbackDebuggerNotification
)
NS_INTERFACE_MAP_END_INHERITING
(
CallbackDebuggerNotification
)
JSObject
*
EventCallbackDebuggerNotification
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
EventCallbackDebuggerNotification_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
DebuggerNotification
>
EventCallbackDebuggerNotification
:
:
CloneInto
(
nsIGlobalObject
*
aNewOwner
)
const
{
RefPtr
<
EventCallbackDebuggerNotification
>
notification
(
new
EventCallbackDebuggerNotification
(
mDebuggeeGlobal
mType
mEvent
mTargetType
mPhase
aNewOwner
)
)
;
return
notification
.
forget
(
)
;
}
void
EventCallbackDebuggerNotificationGuard
:
:
DispatchToManager
(
const
RefPtr
<
DebuggerNotificationManager
>
&
aManager
CallbackDebuggerNotificationPhase
aPhase
)
{
if
(
!
mEventTarget
)
{
MOZ_ASSERT
(
false
"
target
should
exist
"
)
;
return
;
}
Maybe
<
EventCallbackDebuggerNotificationType
>
notificationType
(
mEventTarget
-
>
GetDebuggerNotificationType
(
)
)
;
if
(
notificationType
)
{
#
ifdef
MOZ_EXECUTION_TRACING
CycleCollectedJSContext
*
ccjcx
=
CycleCollectedJSContext
:
:
Get
(
)
;
if
(
ccjcx
)
{
nsAutoString
eventType
;
mEvent
-
>
GetType
(
eventType
)
;
if
(
aPhase
=
=
CallbackDebuggerNotificationPhase
:
:
Pre
)
{
JS_TracerEnterLabelTwoByte
(
ccjcx
-
>
Context
(
)
eventType
.
get
(
)
)
;
}
else
{
JS_TracerLeaveLabelTwoByte
(
ccjcx
-
>
Context
(
)
eventType
.
get
(
)
)
;
}
}
#
endif
if
(
MOZ_UNLIKELY
(
aManager
)
)
{
aManager
-
>
Dispatch
<
EventCallbackDebuggerNotification
>
(
DebuggerNotificationType
:
:
DomEvent
MOZ_KnownLive
(
mEvent
)
*
notificationType
aPhase
)
;
}
}
}
}
