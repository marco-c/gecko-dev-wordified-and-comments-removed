#
include
"
DebuggerNotificationObserver
.
h
"
#
include
"
DebuggerNotification
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
WrapperFactory
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
DebuggerNotificationObserver
mOwnerGlobal
mEventListenerCallbacks
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DebuggerNotificationObserver
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DebuggerNotificationObserver
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DebuggerNotificationObserver
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_END
already_AddRefed
<
DebuggerNotificationObserver
>
DebuggerNotificationObserver
:
:
Constructor
(
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
globalInterface
(
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
)
;
if
(
NS_WARN_IF
(
!
globalInterface
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
DebuggerNotificationObserver
>
observer
(
new
DebuggerNotificationObserver
(
globalInterface
)
)
;
return
observer
.
forget
(
)
;
}
DebuggerNotificationObserver
:
:
DebuggerNotificationObserver
(
nsIGlobalObject
*
aOwnerGlobal
)
:
mEventListenerCallbacks
(
)
mOwnerGlobal
(
aOwnerGlobal
)
{
}
JSObject
*
DebuggerNotificationObserver
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
DebuggerNotificationObserver_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
already_AddRefed
<
DebuggerNotificationManager
>
GetManager
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aDebuggeeGlobal
)
{
JS
:
:
Rooted
<
JSObject
*
>
debuggeeGlobalRooted
(
aCx
js
:
:
UncheckedUnwrap
(
aDebuggeeGlobal
false
)
)
;
if
(
!
debuggeeGlobalRooted
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIGlobalObject
>
debuggeeGlobalObject
(
xpc
:
:
NativeGlobal
(
debuggeeGlobalRooted
)
)
;
if
(
!
debuggeeGlobalObject
)
{
return
nullptr
;
}
RefPtr
<
DebuggerNotificationManager
>
manager
(
debuggeeGlobalObject
-
>
GetOrCreateDebuggerNotificationManager
(
)
)
;
return
manager
.
forget
(
)
;
}
bool
DebuggerNotificationObserver
:
:
Connect
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aDebuggeeGlobal
ErrorResult
&
aRv
)
{
RefPtr
<
DebuggerNotificationManager
>
manager
(
GetManager
(
aCx
aDebuggeeGlobal
)
)
;
if
(
!
manager
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
return
manager
-
>
Attach
(
this
)
;
}
bool
DebuggerNotificationObserver
:
:
Disconnect
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aDebuggeeGlobal
ErrorResult
&
aRv
)
{
RefPtr
<
DebuggerNotificationManager
>
manager
(
GetManager
(
aCx
aDebuggeeGlobal
)
)
;
if
(
!
manager
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
return
manager
-
>
Detach
(
this
)
;
}
bool
DebuggerNotificationObserver
:
:
AddListener
(
DebuggerNotificationCallback
&
aHandlerFn
)
{
nsTObserverArray
<
RefPtr
<
DebuggerNotificationCallback
>
>
:
:
ForwardIterator
iter
(
mEventListenerCallbacks
)
;
while
(
iter
.
HasMore
(
)
)
{
if
(
*
iter
.
GetNext
(
)
.
get
(
)
=
=
aHandlerFn
)
{
return
false
;
}
}
RefPtr
<
DebuggerNotificationCallback
>
handlerFn
(
&
aHandlerFn
)
;
mEventListenerCallbacks
.
AppendElement
(
handlerFn
)
;
return
true
;
}
bool
DebuggerNotificationObserver
:
:
RemoveListener
(
DebuggerNotificationCallback
&
aHandlerFn
)
{
nsTObserverArray
<
RefPtr
<
DebuggerNotificationCallback
>
>
:
:
ForwardIterator
iter
(
mEventListenerCallbacks
)
;
for
(
uint32_t
i
=
0
;
iter
.
HasMore
(
)
;
i
+
+
)
{
if
(
*
iter
.
GetNext
(
)
.
get
(
)
=
=
aHandlerFn
)
{
mEventListenerCallbacks
.
RemoveElementAt
(
i
)
;
return
true
;
}
}
return
false
;
}
bool
DebuggerNotificationObserver
:
:
HasListeners
(
)
{
return
!
mEventListenerCallbacks
.
IsEmpty
(
)
;
}
void
DebuggerNotificationObserver
:
:
NotifyListeners
(
DebuggerNotification
*
aNotification
)
{
if
(
!
HasListeners
(
)
)
{
return
;
}
RefPtr
<
DebuggerNotification
>
debuggerNotification
(
aNotification
-
>
CloneInto
(
mOwnerGlobal
)
)
;
nsTObserverArray
<
RefPtr
<
DebuggerNotificationCallback
>
>
:
:
ForwardIterator
iter
(
mEventListenerCallbacks
)
;
while
(
iter
.
HasMore
(
)
)
{
RefPtr
<
DebuggerNotificationCallback
>
cb
(
iter
.
GetNext
(
)
)
;
cb
-
>
Call
(
*
debuggerNotification
)
;
}
}
}
}
