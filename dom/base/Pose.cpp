#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
dom
/
Pose
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_WITH_JS_MEMBERS
(
Pose
(
mParent
)
(
mPosition
mLinearVelocity
mLinearAcceleration
mOrientation
mAngularVelocity
mAngularAcceleration
)
)
Pose
:
:
Pose
(
nsISupports
*
aParent
)
:
mParent
(
aParent
)
mPosition
(
nullptr
)
mLinearVelocity
(
nullptr
)
mLinearAcceleration
(
nullptr
)
mOrientation
(
nullptr
)
mAngularVelocity
(
nullptr
)
mAngularAcceleration
(
nullptr
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
Pose
:
:
~
Pose
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
nsISupports
*
Pose
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
void
Pose
:
:
SetFloat32Array
(
JSContext
*
aJSContext
nsWrapperCache
*
creator
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
JS
:
:
Heap
<
JSObject
*
>
&
aObj
float
*
aVal
uint32_t
aValLength
ErrorResult
&
aRv
)
{
if
(
!
aVal
)
{
aRetVal
.
set
(
nullptr
)
;
return
;
}
if
(
!
aObj
)
{
aObj
=
Float32Array
:
:
Create
(
aJSContext
creator
aValLength
aVal
)
;
if
(
!
aObj
)
{
aRv
.
NoteJSContextException
(
aJSContext
)
;
return
;
}
}
else
{
JS
:
:
AutoCheckCannotGC
nogc
;
bool
isShared
=
false
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aJSContext
aObj
.
get
(
)
)
;
float
*
data
=
JS_GetFloat32ArrayData
(
obj
&
isShared
nogc
)
;
if
(
data
)
{
memcpy
(
data
aVal
aValLength
*
sizeof
(
float
)
)
;
}
}
aRetVal
.
set
(
aObj
)
;
}
}
