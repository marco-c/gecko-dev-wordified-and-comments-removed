#
ifndef
mozilla_ContentIterator_h
#
define
mozilla_ContentIterator_h
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
ContentIteratorBase
{
protected
:
nsCycleCollectingAutoRefCnt
mRefCnt
;
NS_DECL_OWNINGTHREAD
public
:
ContentIteratorBase
(
)
=
delete
;
ContentIteratorBase
(
const
ContentIteratorBase
&
)
=
delete
;
ContentIteratorBase
&
operator
=
(
const
ContentIteratorBase
&
)
=
delete
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
=
0
;
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
ContentIteratorBase
)
virtual
nsresult
Init
(
nsINode
*
aRoot
)
;
virtual
nsresult
Init
(
nsRange
*
aRange
)
;
virtual
nsresult
Init
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
;
virtual
nsresult
Init
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
;
virtual
void
First
(
)
;
virtual
void
Last
(
)
;
virtual
void
Next
(
)
;
virtual
void
Prev
(
)
;
virtual
nsINode
*
GetCurrentNode
(
)
;
virtual
bool
IsDone
(
)
;
virtual
nsresult
PositionAt
(
nsINode
*
aCurNode
)
;
protected
:
explicit
ContentIteratorBase
(
bool
aPre
)
;
virtual
~
ContentIteratorBase
(
)
=
default
;
nsresult
InitInternal
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
;
nsINode
*
GetDeepFirstChild
(
nsINode
*
aRoot
)
;
nsIContent
*
GetDeepFirstChild
(
nsIContent
*
aRoot
)
;
nsINode
*
GetDeepLastChild
(
nsINode
*
aRoot
)
;
nsIContent
*
GetDeepLastChild
(
nsIContent
*
aRoot
)
;
nsIContent
*
GetNextSibling
(
nsINode
*
aNode
)
;
nsIContent
*
GetPrevSibling
(
nsINode
*
aNode
)
;
nsINode
*
NextNode
(
nsINode
*
aNode
)
;
nsINode
*
PrevNode
(
nsINode
*
aNode
)
;
void
MakeEmpty
(
)
;
virtual
void
LastRelease
(
)
;
nsCOMPtr
<
nsINode
>
mCurNode
;
nsCOMPtr
<
nsINode
>
mFirst
;
nsCOMPtr
<
nsINode
>
mLast
;
nsCOMPtr
<
nsINode
>
mCommonParent
;
RefPtr
<
nsRange
>
mRange
;
bool
mIsDone
;
bool
mPre
;
}
;
class
PostContentIterator
final
:
public
ContentIteratorBase
{
public
:
PostContentIterator
(
)
:
ContentIteratorBase
(
false
)
{
}
PostContentIterator
(
const
PostContentIterator
&
)
=
delete
;
PostContentIterator
&
operator
=
(
const
PostContentIterator
&
)
=
delete
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
;
protected
:
virtual
~
PostContentIterator
(
)
=
default
;
}
;
class
PreContentIterator
final
:
public
ContentIteratorBase
{
public
:
PreContentIterator
(
)
:
ContentIteratorBase
(
true
)
{
}
PreContentIterator
(
const
PreContentIterator
&
)
=
delete
;
PreContentIterator
&
operator
=
(
const
PreContentIterator
&
)
=
delete
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
;
protected
:
virtual
~
PreContentIterator
(
)
=
default
;
}
;
class
ContentSubtreeIterator
final
:
public
ContentIteratorBase
{
public
:
ContentSubtreeIterator
(
)
:
ContentIteratorBase
(
true
)
{
}
ContentSubtreeIterator
(
const
ContentSubtreeIterator
&
)
=
delete
;
ContentSubtreeIterator
&
operator
=
(
const
ContentSubtreeIterator
&
)
=
delete
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
;
virtual
nsresult
Init
(
nsINode
*
aRoot
)
override
;
virtual
nsresult
Init
(
nsRange
*
aRange
)
override
;
virtual
nsresult
Init
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
override
;
virtual
nsresult
Init
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
override
;
virtual
void
Next
(
)
override
;
virtual
void
Prev
(
)
override
;
virtual
void
First
(
)
override
;
virtual
void
Last
(
)
override
;
virtual
nsresult
PositionAt
(
nsINode
*
aCurNode
)
override
;
protected
:
virtual
~
ContentSubtreeIterator
(
)
=
default
;
nsresult
InitWithRange
(
)
;
nsIContent
*
GetTopAncestorInRange
(
nsINode
*
aNode
)
;
virtual
void
LastRelease
(
)
override
;
AutoTArray
<
nsIContent
*
8
>
mEndNodes
;
}
;
}
#
endif
