#
ifndef
mozilla_ContentIterator_h
#
define
mozilla_ContentIterator_h
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIContent
;
class
nsINode
;
namespace
mozilla
{
class
ContentIteratorBase
{
public
:
ContentIteratorBase
(
)
=
delete
;
ContentIteratorBase
(
const
ContentIteratorBase
&
)
=
delete
;
ContentIteratorBase
&
operator
=
(
const
ContentIteratorBase
&
)
=
delete
;
virtual
~
ContentIteratorBase
(
)
;
virtual
nsresult
Init
(
nsINode
*
aRoot
)
;
virtual
nsresult
Init
(
dom
:
:
AbstractRange
*
aRange
)
;
virtual
nsresult
Init
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
;
virtual
nsresult
Init
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
;
virtual
void
First
(
)
;
virtual
void
Last
(
)
;
virtual
void
Next
(
)
;
virtual
void
Prev
(
)
;
nsINode
*
GetCurrentNode
(
)
const
{
return
mCurNode
;
}
bool
IsDone
(
)
const
{
return
!
mCurNode
;
}
virtual
nsresult
PositionAt
(
nsINode
*
aCurNode
)
;
protected
:
enum
class
Order
{
Pre
Post
}
;
explicit
ContentIteratorBase
(
Order
aOrder
)
;
class
Initializer
;
nsresult
InitInternal
(
const
RawRangeBoundary
&
aStart
const
RawRangeBoundary
&
aEnd
)
;
static
nsINode
*
GetDeepFirstChild
(
nsINode
*
aRoot
)
;
static
nsIContent
*
GetDeepFirstChild
(
nsIContent
*
aRoot
)
;
static
nsINode
*
GetDeepLastChild
(
nsINode
*
aRoot
)
;
static
nsIContent
*
GetDeepLastChild
(
nsIContent
*
aRoot
)
;
static
nsIContent
*
GetNextSibling
(
nsINode
*
aNode
)
;
static
nsIContent
*
GetPrevSibling
(
nsINode
*
aNode
)
;
nsINode
*
NextNode
(
nsINode
*
aNode
)
;
nsINode
*
PrevNode
(
nsINode
*
aNode
)
;
void
SetEmpty
(
)
;
nsCOMPtr
<
nsINode
>
mCurNode
;
nsCOMPtr
<
nsINode
>
mFirst
;
nsCOMPtr
<
nsINode
>
mLast
;
nsCOMPtr
<
nsINode
>
mClosestCommonInclusiveAncestor
;
const
Order
mOrder
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
ContentIteratorBase
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
ContentIteratorBase
&
)
;
}
;
class
PostContentIterator
final
:
public
ContentIteratorBase
{
public
:
PostContentIterator
(
)
:
ContentIteratorBase
(
Order
:
:
Post
)
{
}
PostContentIterator
(
const
PostContentIterator
&
)
=
delete
;
PostContentIterator
&
operator
=
(
const
PostContentIterator
&
)
=
delete
;
virtual
~
PostContentIterator
(
)
=
default
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
PostContentIterator
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
PostContentIterator
&
)
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
PostContentIterator
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
static_cast
<
ContentIteratorBase
&
>
(
aField
)
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
PostContentIterator
&
aField
)
{
ImplCycleCollectionUnlink
(
static_cast
<
ContentIteratorBase
&
>
(
aField
)
)
;
}
class
PreContentIterator
final
:
public
ContentIteratorBase
{
public
:
PreContentIterator
(
)
:
ContentIteratorBase
(
Order
:
:
Pre
)
{
}
PreContentIterator
(
const
PreContentIterator
&
)
=
delete
;
PreContentIterator
&
operator
=
(
const
PreContentIterator
&
)
=
delete
;
virtual
~
PreContentIterator
(
)
=
default
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
PreContentIterator
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
PreContentIterator
&
)
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
PreContentIterator
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
static_cast
<
ContentIteratorBase
&
>
(
aField
)
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
PreContentIterator
&
aField
)
{
ImplCycleCollectionUnlink
(
static_cast
<
ContentIteratorBase
&
>
(
aField
)
)
;
}
class
ContentSubtreeIterator
final
:
public
ContentIteratorBase
{
public
:
ContentSubtreeIterator
(
)
:
ContentIteratorBase
(
Order
:
:
Pre
)
{
}
ContentSubtreeIterator
(
const
ContentSubtreeIterator
&
)
=
delete
;
ContentSubtreeIterator
&
operator
=
(
const
ContentSubtreeIterator
&
)
=
delete
;
virtual
~
ContentSubtreeIterator
(
)
=
default
;
virtual
nsresult
Init
(
nsINode
*
aRoot
)
override
;
virtual
nsresult
Init
(
dom
:
:
AbstractRange
*
aRange
)
override
;
virtual
nsresult
Init
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
override
;
virtual
nsresult
Init
(
const
RawRangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
)
override
;
void
Next
(
)
override
;
void
Prev
(
)
override
;
void
First
(
)
override
;
void
Last
(
)
override
;
nsresult
PositionAt
(
nsINode
*
aCurNode
)
override
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
ContentSubtreeIterator
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
ContentSubtreeIterator
&
)
;
private
:
void
CacheInclusiveAncestorsOfEndContainer
(
)
;
nsIContent
*
DetermineCandidateForFirstContent
(
)
const
;
nsIContent
*
DetermineCandidateForLastContent
(
)
const
;
nsIContent
*
DetermineFirstContent
(
)
const
;
nsIContent
*
DetermineLastContent
(
)
const
;
nsresult
InitWithRange
(
)
;
nsIContent
*
GetTopAncestorInRange
(
nsINode
*
aNode
)
const
;
RefPtr
<
dom
:
:
AbstractRange
>
mRange
;
AutoTArray
<
nsIContent
*
8
>
mInclusiveAncestorsOfEndContainer
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
ContentSubtreeIterator
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
aField
.
mRange
aName
aFlags
)
;
ImplCycleCollectionTraverse
(
aCallback
static_cast
<
ContentIteratorBase
&
>
(
aField
)
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
ContentSubtreeIterator
&
aField
)
{
ImplCycleCollectionUnlink
(
aField
.
mRange
)
;
ImplCycleCollectionUnlink
(
static_cast
<
ContentIteratorBase
&
>
(
aField
)
)
;
}
}
#
endif
