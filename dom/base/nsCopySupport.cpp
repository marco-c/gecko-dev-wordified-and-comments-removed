#
include
"
nsCopySupport
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsISelection
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsIDOMRange
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgIRequest
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIContentViewerEdit
.
h
"
#
include
"
nsIClipboardHelper
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIHTMLDocument
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsIImageLoadingContent
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsContentCID
.
h
"
#
ifdef
XP_WIN
#
include
"
nsCExternalHandlerService
.
h
"
#
include
"
nsEscape
.
h
"
#
include
"
nsIMIMEInfo
.
h
"
#
include
"
nsIMIMEService
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
endif
#
include
"
mozilla
/
ContentEvents
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
static
NS_DEFINE_CID
(
kCClipboardCID
NS_CLIPBOARD_CID
)
;
static
NS_DEFINE_CID
(
kCTransferableCID
NS_TRANSFERABLE_CID
)
;
static
NS_DEFINE_CID
(
kHTMLConverterCID
NS_HTMLFORMATCONVERTER_CID
)
;
static
nsresult
AppendString
(
nsITransferable
*
aTransferable
const
nsAString
&
aString
const
char
*
aFlavor
)
;
static
nsresult
AppendDOMNode
(
nsITransferable
*
aTransferable
nsINode
*
aDOMNode
)
;
#
ifdef
XP_WIN
static
nsresult
AppendImagePromise
(
nsITransferable
*
aTransferable
imgIRequest
*
aImgRequest
nsIImageLoadingContent
*
aImageElement
)
;
#
endif
static
nsresult
SelectionCopyHelper
(
nsISelection
*
aSel
nsIDocument
*
aDoc
bool
doPutOnClipboard
int16_t
aClipboardID
uint32_t
aFlags
nsITransferable
*
*
aTransferable
)
{
if
(
aTransferable
)
{
*
aTransferable
=
nullptr
;
}
nsresult
rv
;
nsCOMPtr
<
nsIDocumentEncoder
>
docEncoder
;
docEncoder
=
do_CreateInstance
(
NS_HTMLCOPY_ENCODER_CONTRACTID
)
;
NS_ENSURE_TRUE
(
docEncoder
NS_ERROR_FAILURE
)
;
nsAutoString
mimeType
;
mimeType
.
AssignLiteral
(
kUnicodeMime
)
;
uint32_t
flags
=
aFlags
|
nsIDocumentEncoder
:
:
OutputPreformatted
|
nsIDocumentEncoder
:
:
OutputRaw
|
nsIDocumentEncoder
:
:
OutputForPlainTextClipboardCopy
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
=
do_QueryInterface
(
aDoc
)
;
NS_ASSERTION
(
domDoc
"
Need
a
document
"
)
;
rv
=
docEncoder
-
>
Init
(
domDoc
mimeType
flags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
SetSelection
(
aSel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
GetMimeType
(
mimeType
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
selForcedTextPlain
=
mimeType
.
EqualsLiteral
(
kTextMime
)
;
nsAutoString
buf
;
rv
=
docEncoder
-
>
EncodeToString
(
buf
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
GetMimeType
(
mimeType
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
selForcedTextPlain
&
&
mimeType
.
EqualsLiteral
(
kTextMime
)
)
{
nsCOMPtr
<
nsIHTMLDocument
>
htmlDoc
=
do_QueryInterface
(
aDoc
)
;
if
(
!
htmlDoc
)
{
selForcedTextPlain
=
true
;
}
}
bool
encodedTextHTML
=
mimeType
.
EqualsLiteral
(
kHTMLMime
)
;
nsAutoString
textPlainBuf
;
if
(
selForcedTextPlain
)
{
textPlainBuf
.
Assign
(
buf
)
;
}
else
{
flags
=
nsIDocumentEncoder
:
:
OutputSelectionOnly
|
nsIDocumentEncoder
:
:
OutputAbsoluteLinks
|
nsIDocumentEncoder
:
:
SkipInvisibleContent
|
nsIDocumentEncoder
:
:
OutputDropInvisibleBreak
|
(
aFlags
&
(
nsIDocumentEncoder
:
:
OutputNoScriptContent
|
nsIDocumentEncoder
:
:
OutputRubyAnnotation
)
)
;
mimeType
.
AssignLiteral
(
kTextMime
)
;
rv
=
docEncoder
-
>
Init
(
domDoc
mimeType
flags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
SetSelection
(
aSel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
EncodeToString
(
textPlainBuf
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsAutoString
textHTMLBuf
;
nsAutoString
htmlParentsBuf
;
nsAutoString
htmlInfoBuf
;
if
(
encodedTextHTML
)
{
mimeType
.
AssignLiteral
(
kHTMLMime
)
;
rv
=
docEncoder
-
>
Init
(
domDoc
mimeType
aFlags
|
nsIDocumentEncoder
:
:
OutputDisallowLineBreaking
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
SetSelection
(
aSel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
EncodeToStringWithContext
(
htmlParentsBuf
htmlInfoBuf
textHTMLBuf
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIClipboard
>
clipboard
;
if
(
doPutOnClipboard
)
{
clipboard
=
do_GetService
(
kCClipboardCID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
}
if
(
(
doPutOnClipboard
&
&
clipboard
)
|
|
aTransferable
!
=
nullptr
)
{
nsCOMPtr
<
nsITransferable
>
trans
=
do_CreateInstance
(
kCTransferableCID
)
;
if
(
trans
)
{
trans
-
>
Init
(
aDoc
-
>
GetLoadContext
(
)
)
;
if
(
encodedTextHTML
)
{
nsCOMPtr
<
nsIFormatConverter
>
htmlConverter
=
do_CreateInstance
(
kHTMLConverterCID
)
;
trans
-
>
SetConverter
(
htmlConverter
)
;
if
(
!
textHTMLBuf
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
trans
textHTMLBuf
kHTMLMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
AppendString
(
trans
htmlParentsBuf
kHTMLContext
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
htmlInfoBuf
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
trans
htmlInfoBuf
kHTMLInfo
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
textPlainBuf
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
trans
textPlainBuf
kUnicodeMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsIURI
*
uri
=
aDoc
-
>
GetDocumentURI
(
)
;
if
(
uri
)
{
nsAutoCString
spec
;
nsresult
rv
=
uri
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
spec
.
IsEmpty
(
)
)
{
nsAutoString
shortcut
;
AppendUTF8toUTF16
(
spec
shortcut
)
;
rv
=
AppendString
(
trans
shortcut
kURLPrivateMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
}
else
{
if
(
!
textPlainBuf
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
trans
textPlainBuf
kUnicodeMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
if
(
doPutOnClipboard
&
&
clipboard
)
{
clipboard
-
>
SetData
(
trans
nullptr
aClipboardID
)
;
}
if
(
aTransferable
!
=
nullptr
)
{
trans
.
swap
(
*
aTransferable
)
;
}
}
}
return
rv
;
}
nsresult
nsCopySupport
:
:
HTMLCopy
(
nsISelection
*
aSel
nsIDocument
*
aDoc
int16_t
aClipboardID
bool
aWithRubyAnnotation
)
{
uint32_t
flags
=
nsIDocumentEncoder
:
:
SkipInvisibleContent
;
if
(
aWithRubyAnnotation
)
{
flags
|
=
nsIDocumentEncoder
:
:
OutputRubyAnnotation
;
}
return
SelectionCopyHelper
(
aSel
aDoc
true
aClipboardID
flags
nullptr
)
;
}
nsresult
nsCopySupport
:
:
ClearSelectionCache
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIClipboard
>
clipboard
=
do_GetService
(
kCClipboardCID
&
rv
)
;
clipboard
-
>
EmptyClipboard
(
nsIClipboard
:
:
kSelectionCache
)
;
return
rv
;
}
nsresult
nsCopySupport
:
:
GetTransferableForSelection
(
nsISelection
*
aSel
nsIDocument
*
aDoc
nsITransferable
*
*
aTransferable
)
{
return
SelectionCopyHelper
(
aSel
aDoc
false
0
nsIDocumentEncoder
:
:
SkipInvisibleContent
aTransferable
)
;
}
nsresult
nsCopySupport
:
:
GetTransferableForNode
(
nsINode
*
aNode
nsIDocument
*
aDoc
nsITransferable
*
*
aTransferable
)
{
nsCOMPtr
<
nsISelection
>
selection
=
new
Selection
(
)
;
RefPtr
<
nsRange
>
range
=
new
nsRange
(
aNode
)
;
ErrorResult
result
;
range
-
>
SelectNode
(
*
aNode
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
selection
-
>
AsSelection
(
)
-
>
AddRangeInternal
(
*
range
aDoc
result
)
;
if
(
NS_WARN_IF
(
result
.
Failed
(
)
)
)
{
return
result
.
StealNSResult
(
)
;
}
uint32_t
flags
=
0
;
return
SelectionCopyHelper
(
selection
aDoc
false
0
flags
aTransferable
)
;
}
nsresult
nsCopySupport
:
:
GetContents
(
const
nsACString
&
aMimeType
uint32_t
aFlags
nsISelection
*
aSel
nsIDocument
*
aDoc
nsAString
&
outdata
)
{
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIDocumentEncoder
>
docEncoder
;
nsAutoCString
encoderContractID
(
NS_DOC_ENCODER_CONTRACTID_BASE
)
;
encoderContractID
.
Append
(
aMimeType
)
;
docEncoder
=
do_CreateInstance
(
encoderContractID
.
get
(
)
)
;
NS_ENSURE_TRUE
(
docEncoder
NS_ERROR_FAILURE
)
;
uint32_t
flags
=
aFlags
|
nsIDocumentEncoder
:
:
SkipInvisibleContent
;
if
(
aMimeType
.
EqualsLiteral
(
"
text
/
plain
"
)
)
flags
|
=
nsIDocumentEncoder
:
:
OutputPreformatted
;
NS_ConvertASCIItoUTF16
unicodeMimeType
(
aMimeType
)
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
=
do_QueryInterface
(
aDoc
)
;
NS_ASSERTION
(
domDoc
"
Need
a
document
"
)
;
rv
=
docEncoder
-
>
Init
(
domDoc
unicodeMimeType
flags
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
aSel
)
{
rv
=
docEncoder
-
>
SetSelection
(
aSel
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
}
return
docEncoder
-
>
EncodeToString
(
outdata
)
;
}
nsresult
nsCopySupport
:
:
ImageCopy
(
nsIImageLoadingContent
*
aImageElement
nsILoadContext
*
aLoadContext
int32_t
aCopyFlags
)
{
nsresult
rv
;
nsCOMPtr
<
nsITransferable
>
trans
(
do_CreateInstance
(
kCTransferableCID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
trans
-
>
Init
(
aLoadContext
)
;
if
(
aCopyFlags
&
nsIContentViewerEdit
:
:
COPY_IMAGE_TEXT
)
{
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
aImageElement
-
>
GetCurrentURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
uri
NS_ERROR_FAILURE
)
;
nsAutoCString
location
;
rv
=
uri
-
>
GetSpec
(
location
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
AppendString
(
trans
NS_ConvertUTF8toUTF16
(
location
)
kUnicodeMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
aCopyFlags
&
nsIContentViewerEdit
:
:
COPY_IMAGE_HTML
)
{
nsCOMPtr
<
nsINode
>
node
(
do_QueryInterface
(
aImageElement
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
AppendDOMNode
(
trans
node
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
aCopyFlags
&
nsIContentViewerEdit
:
:
COPY_IMAGE_DATA
)
{
nsCOMPtr
<
imgIRequest
>
imgRequest
;
nsCOMPtr
<
imgIContainer
>
image
=
nsContentUtils
:
:
GetImageFromContent
(
aImageElement
getter_AddRefs
(
imgRequest
)
)
;
NS_ENSURE_TRUE
(
image
NS_ERROR_FAILURE
)
;
#
ifdef
XP_WIN
rv
=
AppendImagePromise
(
trans
imgRequest
aImageElement
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
#
endif
nsCOMPtr
<
nsISupportsInterfacePointer
>
imgPtr
(
do_CreateInstance
(
NS_SUPPORTS_INTERFACE_POINTER_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
imgPtr
-
>
SetData
(
image
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
trans
-
>
SetTransferData
(
kNativeImageMime
imgPtr
sizeof
(
nsISupports
*
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
selectionSupported
;
rv
=
clipboard
-
>
SupportsSelectionClipboard
(
&
selectionSupported
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
selectionSupported
)
{
rv
=
clipboard
-
>
SetData
(
trans
nullptr
nsIClipboard
:
:
kSelectionClipboard
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
clipboard
-
>
SetData
(
trans
nullptr
nsIClipboard
:
:
kGlobalClipboard
)
;
}
static
nsresult
AppendString
(
nsITransferable
*
aTransferable
const
nsAString
&
aString
const
char
*
aFlavor
)
{
nsresult
rv
;
nsCOMPtr
<
nsISupportsString
>
data
(
do_CreateInstance
(
NS_SUPPORTS_STRING_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
data
-
>
SetData
(
aString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aTransferable
-
>
AddDataFlavor
(
aFlavor
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
aTransferable
-
>
SetTransferData
(
aFlavor
data
aString
.
Length
(
)
*
sizeof
(
char16_t
)
)
;
}
static
nsresult
AppendDOMNode
(
nsITransferable
*
aTransferable
nsINode
*
aDOMNode
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDocumentEncoder
>
docEncoder
(
do_CreateInstance
(
NS_HTMLCOPY_ENCODER_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIDocument
>
document
=
aDOMNode
-
>
OwnerDoc
(
)
;
DebugOnly
<
nsCOMPtr
<
nsIHTMLDocument
>
>
htmlDoc
=
nsCOMPtr
<
nsIHTMLDocument
>
(
do_QueryInterface
(
document
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
NS_OK
)
;
NS_ENSURE_TRUE
(
document
-
>
IsHTMLDocument
(
)
NS_OK
)
;
rv
=
docEncoder
-
>
NativeInit
(
document
NS_LITERAL_STRING
(
kHTMLMime
)
nsIDocumentEncoder
:
:
OutputAbsoluteLinks
|
nsIDocumentEncoder
:
:
OutputEncodeBasicEntities
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
docEncoder
-
>
SetNativeNode
(
aDOMNode
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
html
context
info
;
rv
=
docEncoder
-
>
EncodeToStringWithContext
(
context
info
html
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
html
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
aTransferable
html
kHTMLMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
info
.
IsEmpty
(
)
)
{
rv
=
AppendString
(
aTransferable
info
kHTMLInfo
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
AppendString
(
aTransferable
context
kHTMLContext
)
;
}
#
ifdef
XP_WIN
static
nsresult
AppendImagePromise
(
nsITransferable
*
aTransferable
imgIRequest
*
aImgRequest
nsIImageLoadingContent
*
aImageElement
)
{
nsresult
rv
;
NS_ENSURE_TRUE
(
aImgRequest
NS_OK
)
;
uint32_t
imageStatus
;
rv
=
aImgRequest
-
>
GetImageStatus
(
&
imageStatus
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
(
imageStatus
&
imgIRequest
:
:
STATUS_FRAME_COMPLETE
)
|
|
(
imageStatus
&
imgIRequest
:
:
STATUS_ERROR
)
)
{
return
NS_OK
;
}
bool
isMultipart
;
rv
=
aImgRequest
-
>
GetMultipart
(
&
isMultipart
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
isMultipart
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aImageElement
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIMIMEService
>
mimeService
=
do_GetService
(
NS_MIMESERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
mimeService
NS_OK
)
;
nsCOMPtr
<
nsIURI
>
imgUri
;
rv
=
aImgRequest
-
>
GetFinalURI
(
getter_AddRefs
(
imgUri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIURL
>
imgUrl
=
do_QueryInterface
(
imgUri
)
;
NS_ENSURE_TRUE
(
imgUrl
NS_OK
)
;
nsAutoCString
extension
;
rv
=
imgUrl
-
>
GetFileExtension
(
extension
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCString
mimeType
;
rv
=
aImgRequest
-
>
GetMimeType
(
getter_Copies
(
mimeType
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIMIMEInfo
>
mimeInfo
;
mimeService
-
>
GetFromTypeAndExtension
(
mimeType
EmptyCString
(
)
getter_AddRefs
(
mimeInfo
)
)
;
NS_ENSURE_TRUE
(
mimeInfo
NS_OK
)
;
nsAutoCString
spec
;
rv
=
imgUrl
-
>
GetSpec
(
spec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsString
imageSourceString
;
CopyUTF8toUTF16
(
spec
imageSourceString
)
;
bool
validExtension
;
if
(
extension
.
IsEmpty
(
)
|
|
NS_FAILED
(
mimeInfo
-
>
ExtensionExists
(
extension
&
validExtension
)
)
|
|
!
validExtension
)
{
nsAutoCString
primaryExtension
;
mimeInfo
-
>
GetPrimaryExtension
(
primaryExtension
)
;
rv
=
NS_MutateURI
(
imgUri
)
.
Apply
(
NS_MutatorMethod
(
&
nsIURLMutator
:
:
SetFileExtension
primaryExtension
nullptr
)
)
.
Finalize
(
imgUrl
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsAutoCString
fileName
;
imgUrl
-
>
GetFileName
(
fileName
)
;
NS_UnescapeURL
(
fileName
)
;
fileName
.
ReplaceChar
(
FILE_PATH_SEPARATOR
FILE_ILLEGAL_CHARACTERS
'
-
'
)
;
nsString
imageDestFileName
;
CopyUTF8toUTF16
(
fileName
imageDestFileName
)
;
rv
=
AppendString
(
aTransferable
imageSourceString
kFilePromiseURLMime
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
AppendString
(
aTransferable
imageDestFileName
kFilePromiseDestFilename
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aTransferable
-
>
SetRequestingPrincipal
(
node
-
>
NodePrincipal
(
)
)
;
aTransferable
-
>
SetContentPolicyType
(
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE
)
;
return
aTransferable
-
>
AddDataFlavor
(
kFilePromiseMime
)
;
}
#
endif
nsIContent
*
nsCopySupport
:
:
GetSelectionForCopy
(
nsIDocument
*
aDocument
Selection
*
*
aSelection
)
{
*
aSelection
=
nullptr
;
nsIPresShell
*
presShell
=
aDocument
-
>
GetShell
(
)
;
if
(
!
presShell
)
return
nullptr
;
nsCOMPtr
<
nsIContent
>
focusedContent
;
nsCOMPtr
<
nsISelectionController
>
selectionController
=
presShell
-
>
GetSelectionControllerForFocusedContent
(
getter_AddRefs
(
focusedContent
)
)
;
if
(
!
selectionController
)
{
return
nullptr
;
}
RefPtr
<
Selection
>
sel
=
selectionController
-
>
GetDOMSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
sel
.
forget
(
aSelection
)
;
return
focusedContent
;
}
bool
nsCopySupport
:
:
CanCopy
(
nsIDocument
*
aDocument
)
{
if
(
!
aDocument
)
return
false
;
RefPtr
<
Selection
>
sel
;
GetSelectionForCopy
(
aDocument
getter_AddRefs
(
sel
)
)
;
NS_ENSURE_TRUE
(
sel
false
)
;
return
!
sel
-
>
IsCollapsed
(
)
;
}
static
bool
IsInsideRuby
(
nsINode
*
aNode
)
{
for
(
;
aNode
;
aNode
=
aNode
-
>
GetParent
(
)
)
{
if
(
aNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
ruby
)
)
{
return
true
;
}
}
return
false
;
}
static
bool
IsSelectionInsideRuby
(
Selection
*
aSelection
)
{
uint32_t
rangeCount
=
aSelection
-
>
RangeCount
(
)
;
;
for
(
auto
i
:
IntegerRange
(
rangeCount
)
)
{
nsRange
*
range
=
aSelection
-
>
GetRangeAt
(
i
)
;
if
(
!
IsInsideRuby
(
range
-
>
GetCommonAncestor
(
)
)
)
{
return
false
;
}
}
return
true
;
}
bool
nsCopySupport
:
:
FireClipboardEvent
(
EventMessage
aEventMessage
int32_t
aClipboardType
nsIPresShell
*
aPresShell
Selection
*
aSelection
bool
*
aActionTaken
)
{
if
(
aActionTaken
)
{
*
aActionTaken
=
false
;
}
EventMessage
originalEventMessage
=
aEventMessage
;
if
(
originalEventMessage
=
=
ePasteNoFormatting
)
{
originalEventMessage
=
ePaste
;
}
NS_ASSERTION
(
originalEventMessage
=
=
eCut
|
|
originalEventMessage
=
=
eCopy
|
|
originalEventMessage
=
=
ePaste
"
Invalid
clipboard
event
type
"
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
aPresShell
;
if
(
!
presShell
)
return
false
;
nsCOMPtr
<
nsIDocument
>
doc
=
presShell
-
>
GetDocument
(
)
;
if
(
!
doc
)
return
false
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
piWindow
=
doc
-
>
GetWindow
(
)
;
if
(
!
piWindow
)
return
false
;
nsCOMPtr
<
nsIContent
>
content
;
RefPtr
<
Selection
>
sel
=
aSelection
;
if
(
!
sel
)
{
content
=
GetSelectionForCopy
(
doc
getter_AddRefs
(
sel
)
)
;
}
if
(
sel
)
{
RefPtr
<
nsRange
>
range
=
sel
-
>
GetRangeAt
(
0
)
;
if
(
range
)
{
nsINode
*
startContainer
=
range
-
>
GetStartContainer
(
)
;
if
(
startContainer
)
{
content
=
do_QueryInterface
(
startContainer
)
;
}
}
}
if
(
!
content
)
{
content
=
doc
-
>
GetRootElement
(
)
;
if
(
!
content
)
return
false
;
}
if
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
{
nsContentUtils
:
:
WarnScriptWasIgnored
(
doc
)
;
return
false
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
piWindow
-
>
GetDocShell
(
)
;
const
bool
chromeShell
=
docShell
&
&
docShell
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeChrome
;
bool
doDefault
=
true
;
RefPtr
<
DataTransfer
>
clipboardData
;
if
(
chromeShell
|
|
Preferences
:
:
GetBool
(
"
dom
.
event
.
clipboardevents
.
enabled
"
true
)
)
{
clipboardData
=
new
DataTransfer
(
doc
-
>
GetScopeObject
(
)
aEventMessage
originalEventMessage
=
=
ePaste
aClipboardType
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
InternalClipboardEvent
evt
(
true
originalEventMessage
)
;
evt
.
mClipboardData
=
clipboardData
;
EventDispatcher
:
:
Dispatch
(
content
presShell
-
>
GetPresContext
(
)
&
evt
nullptr
&
status
)
;
doDefault
=
(
status
!
=
nsEventStatus_eConsumeNoDefault
)
;
}
auto
clearAfter
=
MakeScopeExit
(
[
&
]
{
if
(
clipboardData
)
{
clipboardData
-
>
Disconnect
(
)
;
if
(
originalEventMessage
=
=
ePaste
)
{
clipboardData
-
>
ClearAll
(
)
;
}
}
}
)
;
if
(
originalEventMessage
=
=
ePaste
)
{
if
(
aActionTaken
)
{
*
aActionTaken
=
true
;
}
return
doDefault
;
}
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
if
(
presShell
-
>
IsDestroying
(
)
)
return
false
;
uint32_t
count
=
0
;
if
(
doDefault
)
{
nsCOMPtr
<
nsIContent
>
srcNode
=
content
;
if
(
content
-
>
IsInNativeAnonymousSubtree
(
)
)
{
srcNode
=
content
-
>
FindFirstNonChromeOnlyAccessContent
(
)
;
}
nsCOMPtr
<
nsIFormControl
>
formControl
=
do_QueryInterface
(
srcNode
)
;
if
(
formControl
)
{
if
(
formControl
-
>
ControlType
(
)
=
=
NS_FORM_INPUT_PASSWORD
)
{
return
false
;
}
}
if
(
originalEventMessage
!
=
eCut
|
|
content
-
>
IsEditable
(
)
)
{
bool
isCollapsed
;
sel
-
>
GetIsCollapsed
(
&
isCollapsed
)
;
if
(
isCollapsed
)
{
if
(
aActionTaken
)
{
*
aActionTaken
=
true
;
}
return
false
;
}
bool
withRubyAnnotation
=
IsSelectionInsideRuby
(
sel
)
;
nsresult
rv
=
HTMLCopy
(
sel
doc
aClipboardType
withRubyAnnotation
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
}
else
{
return
false
;
}
}
else
if
(
clipboardData
)
{
count
=
clipboardData
-
>
MozItemCount
(
)
;
if
(
count
)
{
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
"
mozilla
.
org
/
widget
/
clipboard
;
1
"
)
)
;
NS_ENSURE_TRUE
(
clipboard
false
)
;
nsCOMPtr
<
nsITransferable
>
transferable
=
clipboardData
-
>
GetTransferable
(
0
doc
-
>
GetLoadContext
(
)
)
;
NS_ENSURE_TRUE
(
transferable
false
)
;
nsresult
rv
=
clipboard
-
>
SetData
(
transferable
nullptr
aClipboardType
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
}
}
if
(
doDefault
|
|
count
)
{
piWindow
-
>
UpdateCommands
(
NS_LITERAL_STRING
(
"
clipboard
"
)
nullptr
0
)
;
}
if
(
aActionTaken
)
{
*
aActionTaken
=
true
;
}
return
doDefault
;
}
