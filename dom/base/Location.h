#
ifndef
mozilla_dom_Location_h
#
define
mozilla_dom_Location_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIDocShell
;
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
Location
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
Location
(
nsPIDOMWindowInner
*
aWindow
nsIDocShell
*
aDocShell
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
Location
)
void
Assign
(
const
nsAString
&
aUrl
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
Replace
(
const
nsAString
&
aUrl
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
Reload
(
bool
aForceget
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
if
(
!
CallerSubsumes
(
&
aSubjectPrincipal
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
aError
=
Reload
(
aForceget
)
;
}
void
GetHref
(
nsAString
&
aHref
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
if
(
!
CallerSubsumes
(
&
aSubjectPrincipal
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
aError
=
GetHref
(
aHref
)
;
}
void
SetHref
(
const
nsAString
&
aHref
ErrorResult
&
aError
)
;
void
GetOrigin
(
nsAString
&
aOrigin
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetProtocol
(
nsAString
&
aProtocol
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetProtocol
(
const
nsAString
&
aProtocol
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetHost
(
nsAString
&
aHost
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetHost
(
const
nsAString
&
aHost
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetHostname
(
nsAString
&
aHostname
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetHostname
(
const
nsAString
&
aHostname
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetPort
(
nsAString
&
aPort
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetPort
(
const
nsAString
&
aPort
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetPathname
(
nsAString
&
aPathname
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetPathname
(
const
nsAString
&
aPathname
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetSearch
(
nsAString
&
aSeach
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetSearch
(
const
nsAString
&
aSeach
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
GetHash
(
nsAString
&
aHash
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
SetHash
(
const
nsAString
&
aHash
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
;
void
Stringify
(
nsAString
&
aRetval
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
GetHref
(
aRetval
aSubjectPrincipal
aError
)
;
}
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mInnerWindow
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsresult
GetHref
(
nsAString
&
aHref
)
;
nsresult
ToString
(
nsAString
&
aString
)
{
return
GetHref
(
aString
)
;
}
nsresult
Reload
(
bool
aForceget
)
;
protected
:
virtual
~
Location
(
)
;
nsresult
GetURI
(
nsIURI
*
*
aURL
bool
aGetInnermostURI
=
false
)
;
nsresult
GetWritableURI
(
nsIURI
*
*
aURL
const
nsACString
*
aNewRef
=
nullptr
)
;
nsresult
SetURI
(
nsIURI
*
aURL
bool
aReplace
=
false
)
;
nsresult
SetHrefWithBase
(
const
nsAString
&
aHref
nsIURI
*
aBase
bool
aReplace
)
;
nsresult
SetHrefWithContext
(
JSContext
*
cx
const
nsAString
&
aHref
bool
aReplace
)
;
nsresult
GetSourceBaseURL
(
JSContext
*
cx
nsIURI
*
*
sourceURL
)
;
nsresult
CheckURL
(
nsIURI
*
url
nsDocShellLoadInfo
*
*
aLoadInfo
)
;
bool
CallerSubsumes
(
nsIPrincipal
*
aSubjectPrincipal
)
;
nsString
mCachedHash
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mInnerWindow
;
nsWeakPtr
mDocShell
;
}
;
}
}
#
endif
