#
ifndef
mozilla_dom_Attr_h
#
define
mozilla_dom_Attr_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
Document
;
class
Attr
final
:
public
nsINode
{
virtual
~
Attr
(
)
=
default
;
public
:
Attr
(
nsDOMAttributeMap
*
aAttrMap
already_AddRefed
<
dom
:
:
NodeInfo
>
&
&
aNodeInfo
const
nsAString
&
aValue
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHOD_
(
void
)
DeleteCycleCollectable
(
void
)
final
;
NS_DECL_DOMARENA_DESTROY
NS_IMPL_FROMNODE_HELPER
(
Attr
IsAttr
(
)
)
void
GetTextContentWithTrustedTypeCheck
(
nsAString
&
aTextContent
mozilla
:
:
OOMReporter
&
aError
)
{
GetTextContentInternal
(
aTextContent
aError
)
;
}
MOZ_CAN_RUN_SCRIPT
void
SetTextContentWithTrustedTypeCheck
(
const
nsAString
&
aTextContent
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
aError
)
;
virtual
void
GetTextContentInternal
(
nsAString
&
aTextContent
OOMReporter
&
aError
)
override
;
virtual
void
SetTextContentInternal
(
const
nsAString
&
aTextContent
nsIPrincipal
*
aSubjectPrincipal
ErrorResult
&
aError
)
override
;
void
GetNodeValueWithTrustedTypeCheck
(
nsAString
&
aNodeValue
)
{
GetNodeValueInternal
(
aNodeValue
)
;
}
MOZ_CAN_RUN_SCRIPT
void
SetNodeValueWithTrustedTypeCheck
(
const
nsAString
&
aNodeValue
mozilla
:
:
ErrorResult
&
aError
)
;
virtual
void
GetNodeValueInternal
(
nsAString
&
aNodeValue
)
override
;
virtual
void
SetNodeValueInternal
(
const
nsAString
&
aNodeValue
ErrorResult
&
aError
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
void
ConstructUbiNode
(
void
*
storage
)
override
;
nsDOMAttributeMap
*
GetMap
(
)
{
return
mAttrMap
;
}
void
SetMap
(
nsDOMAttributeMap
*
aMap
)
;
Element
*
GetElement
(
)
const
;
nsresult
SetOwnerDocument
(
Document
*
aDocument
)
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsIURI
*
GetBaseURI
(
bool
aTryUseXHRDocBaseURI
=
false
)
const
override
;
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_WRAPPERCACHE_CLASS
(
Attr
)
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetName
(
nsAString
&
aName
)
;
void
GetValue
(
nsAString
&
aValue
)
;
MOZ_CAN_RUN_SCRIPT
void
SetValue
(
const
nsAString
&
aValue
nsIPrincipal
*
aTriggeringPrincipal
ErrorResult
&
aRv
)
;
void
SetValueInternal
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
;
bool
Specified
(
)
const
;
Element
*
GetOwnerElement
(
)
;
protected
:
virtual
Element
*
GetNameSpaceElement
(
)
override
{
return
GetElement
(
)
;
}
static
bool
sInitialized
;
private
:
RefPtr
<
nsDOMAttributeMap
>
mAttrMap
;
nsString
mValue
;
}
;
}
}
#
endif
