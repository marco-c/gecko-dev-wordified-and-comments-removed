#
include
"
mozilla
/
dom
/
CustomElementRegistry
.
h
"
#
include
"
mozilla
/
dom
/
CustomElementRegistryBinding
.
h
"
#
include
"
mozilla
/
dom
/
HTMLElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebComponentsBinding
.
h
"
#
include
"
nsIParserService
.
h
"
#
include
"
jsapi
.
h
"
namespace
mozilla
{
namespace
dom
{
void
CustomElementCallback
:
:
Call
(
)
{
ErrorResult
rv
;
switch
(
mType
)
{
case
nsIDocument
:
:
eCreated
:
{
mOwnerData
-
>
mElementIsBeingCreated
=
true
;
mOwnerData
-
>
mCreatedCallbackInvoked
=
true
;
nsIDocument
*
document
=
mThisObject
-
>
GetComposedDoc
(
)
;
if
(
document
&
&
document
-
>
GetDocShell
(
)
)
{
nsContentUtils
:
:
EnqueueLifecycleCallback
(
document
nsIDocument
:
:
eAttached
mThisObject
)
;
}
static_cast
<
LifecycleCreatedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
mOwnerData
-
>
mElementIsBeingCreated
=
false
;
break
;
}
case
nsIDocument
:
:
eAttached
:
static_cast
<
LifecycleAttachedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
break
;
case
nsIDocument
:
:
eDetached
:
static_cast
<
LifecycleDetachedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
break
;
case
nsIDocument
:
:
eAttributeChanged
:
static_cast
<
LifecycleAttributeChangedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
mArgs
.
name
mArgs
.
oldValue
mArgs
.
newValue
rv
)
;
break
;
}
}
void
CustomElementCallback
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mThisObject
"
)
;
aCb
.
NoteXPCOMChild
(
mThisObject
)
;
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mCallback
"
)
;
aCb
.
NoteXPCOMChild
(
mCallback
)
;
}
CustomElementCallback
:
:
CustomElementCallback
(
Element
*
aThisObject
nsIDocument
:
:
ElementCallbackType
aCallbackType
mozilla
:
:
dom
:
:
CallbackFunction
*
aCallback
CustomElementData
*
aOwnerData
)
:
mThisObject
(
aThisObject
)
mCallback
(
aCallback
)
mType
(
aCallbackType
)
mOwnerData
(
aOwnerData
)
{
}
CustomElementData
:
:
CustomElementData
(
nsIAtom
*
aType
)
:
mType
(
aType
)
mCurrentCallback
(
-
1
)
mElementIsBeingCreated
(
false
)
mCreatedCallbackInvoked
(
true
)
mAssociatedMicroTask
(
-
1
)
{
}
void
CustomElementData
:
:
RunCallbackQueue
(
)
{
while
(
static_cast
<
uint32_t
>
(
+
+
mCurrentCallback
)
<
mCallbackQueue
.
Length
(
)
)
{
mCallbackQueue
[
mCurrentCallback
]
-
>
Call
(
)
;
}
mCallbackQueue
.
Clear
(
)
;
mCurrentCallback
=
-
1
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CustomElementRegistry
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CustomElementRegistry
)
tmp
-
>
mCustomDefinitions
.
Clear
(
)
;
tmp
-
>
mConstructors
.
clear
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWhenDefinedPromiseMap
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
CustomElementRegistry
)
for
(
auto
iter
=
tmp
-
>
mCustomDefinitions
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
LifecycleCallbacks
>
&
callbacks
=
iter
.
UserData
(
)
-
>
mCallbacks
;
if
(
callbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mAttributeChangedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAttributeChangedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mCreatedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mCreatedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mCreatedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mAttachedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mAttachedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAttachedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mDetachedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mDetachedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mDetachedCallback
.
Value
(
)
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWhenDefinedPromiseMap
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
CustomElementRegistry
)
for
(
auto
iter
=
tmp
-
>
mCustomDefinitions
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
UserData
(
)
-
>
mConstructor
"
mCustomDefinitions
constructor
"
aClosure
)
;
aCallbacks
.
Trace
(
&
iter
.
UserData
(
)
-
>
mPrototype
"
mCustomDefinitions
prototype
"
aClosure
)
;
}
for
(
ConstructorMap
:
:
Enum
iter
(
tmp
-
>
mConstructors
)
;
!
iter
.
empty
(
)
;
iter
.
popFront
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
front
(
)
.
mutableKey
(
)
"
mConstructors
key
"
aClosure
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CustomElementRegistry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CustomElementRegistry
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CustomElementRegistry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
bool
CustomElementRegistry
:
:
IsCustomElementEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
{
return
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
customelements
.
enabled
"
)
|
|
nsContentUtils
:
:
IsWebComponentsEnabled
(
)
;
}
void
CustomElementRegistry
:
:
ProcessTopElementQueue
(
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
nsTArray
<
RefPtr
<
CustomElementData
>
>
&
stack
=
*
sProcessingStack
;
uint32_t
firstQueue
=
stack
.
LastIndexOf
(
(
CustomElementData
*
)
nullptr
)
;
for
(
uint32_t
i
=
firstQueue
+
1
;
i
<
stack
.
Length
(
)
;
+
+
i
)
{
if
(
stack
[
i
]
-
>
mAssociatedMicroTask
!
=
-
1
)
{
stack
[
i
]
-
>
RunCallbackQueue
(
)
;
stack
[
i
]
-
>
mAssociatedMicroTask
=
-
1
;
}
}
if
(
firstQueue
!
=
0
)
{
stack
.
SetLength
(
firstQueue
)
;
}
else
{
stack
.
SetLength
(
1
)
;
}
}
void
CustomElementRegistry
:
:
XPCOMShutdown
(
)
{
sProcessingStack
.
reset
(
)
;
}
Maybe
<
nsTArray
<
RefPtr
<
CustomElementData
>
>
>
CustomElementRegistry
:
:
sProcessingStack
;
CustomElementRegistry
:
:
CustomElementRegistry
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
mIsCustomDefinitionRunning
(
false
)
mIsBackupQueueProcessing
(
false
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aWindow
-
>
IsInnerWindow
(
)
)
;
MOZ_ALWAYS_TRUE
(
mConstructors
.
init
(
)
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
if
(
!
sProcessingStack
)
{
sProcessingStack
.
emplace
(
)
;
sProcessingStack
-
>
AppendElement
(
(
CustomElementData
*
)
nullptr
)
;
}
}
CustomElementRegistry
:
:
~
CustomElementRegistry
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
CustomElementDefinition
*
CustomElementRegistry
:
:
LookupCustomElementDefinition
(
const
nsAString
&
aLocalName
const
nsAString
*
aIs
)
const
{
nsCOMPtr
<
nsIAtom
>
localNameAtom
=
NS_Atomize
(
aLocalName
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
aIs
?
NS_Atomize
(
*
aIs
)
:
localNameAtom
;
CustomElementDefinition
*
data
=
mCustomDefinitions
.
Get
(
typeAtom
)
;
if
(
data
&
&
data
-
>
mLocalName
=
=
localNameAtom
)
{
return
data
;
}
return
nullptr
;
}
CustomElementDefinition
*
CustomElementRegistry
:
:
LookupCustomElementDefinition
(
JSContext
*
aCx
JSObject
*
aConstructor
)
const
{
JS
:
:
Rooted
<
JSObject
*
>
constructor
(
aCx
js
:
:
CheckedUnwrap
(
aConstructor
)
)
;
const
auto
&
ptr
=
mConstructors
.
lookup
(
constructor
)
;
if
(
!
ptr
)
{
return
nullptr
;
}
CustomElementDefinition
*
definition
=
mCustomDefinitions
.
Get
(
ptr
-
>
value
(
)
)
;
MOZ_ASSERT
(
definition
"
Definition
must
be
found
in
mCustomDefinitions
"
)
;
return
definition
;
}
void
CustomElementRegistry
:
:
RegisterUnresolvedElement
(
Element
*
aElement
nsIAtom
*
aTypeName
)
{
mozilla
:
:
dom
:
:
NodeInfo
*
info
=
aElement
-
>
NodeInfo
(
)
;
nsCOMPtr
<
nsIAtom
>
typeName
=
aTypeName
;
if
(
!
typeName
)
{
typeName
=
info
-
>
NameAtom
(
)
;
}
if
(
mCustomDefinitions
.
Get
(
typeName
)
)
{
return
;
}
nsTArray
<
nsWeakPtr
>
*
unresolved
=
mCandidatesMap
.
LookupOrAdd
(
typeName
)
;
nsWeakPtr
*
elem
=
unresolved
-
>
AppendElement
(
)
;
*
elem
=
do_GetWeakReference
(
aElement
)
;
aElement
-
>
AddStates
(
NS_EVENT_STATE_UNRESOLVED
)
;
return
;
}
void
CustomElementRegistry
:
:
SetupCustomElement
(
Element
*
aElement
const
nsAString
*
aTypeExtension
)
{
nsCOMPtr
<
nsIAtom
>
tagAtom
=
aElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
aTypeExtension
?
NS_Atomize
(
*
aTypeExtension
)
:
tagAtom
;
if
(
aTypeExtension
&
&
!
aElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
is
)
)
{
aElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
is
*
aTypeExtension
true
)
;
}
CustomElementDefinition
*
data
=
LookupCustomElementDefinition
(
aElement
-
>
NodeInfo
(
)
-
>
LocalName
(
)
aTypeExtension
)
;
if
(
!
data
)
{
RegisterUnresolvedElement
(
aElement
typeAtom
)
;
return
;
}
if
(
data
-
>
mLocalName
!
=
tagAtom
)
{
return
;
}
EnqueueLifecycleCallback
(
nsIDocument
:
:
eCreated
aElement
nullptr
data
)
;
}
void
CustomElementRegistry
:
:
EnqueueLifecycleCallback
(
nsIDocument
:
:
ElementCallbackType
aType
Element
*
aCustomElement
LifecycleCallbackArgs
*
aArgs
CustomElementDefinition
*
aDefinition
)
{
CustomElementData
*
elementData
=
aCustomElement
-
>
GetCustomElementData
(
)
;
CustomElementDefinition
*
definition
=
aDefinition
;
if
(
!
definition
)
{
mozilla
:
:
dom
:
:
NodeInfo
*
info
=
aCustomElement
-
>
NodeInfo
(
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
elementData
?
elementData
-
>
mType
.
get
(
)
:
info
-
>
NameAtom
(
)
;
definition
=
mCustomDefinitions
.
Get
(
typeAtom
)
;
if
(
!
definition
|
|
definition
-
>
mLocalName
!
=
info
-
>
NameAtom
(
)
)
{
return
;
}
}
if
(
!
elementData
)
{
elementData
=
new
CustomElementData
(
definition
-
>
mType
)
;
aCustomElement
-
>
SetCustomElementData
(
elementData
)
;
MOZ_ASSERT
(
aType
=
=
nsIDocument
:
:
eCreated
"
First
callback
should
be
the
created
callback
"
)
;
}
CallbackFunction
*
func
=
nullptr
;
switch
(
aType
)
{
case
nsIDocument
:
:
eCreated
:
if
(
definition
-
>
mCallbacks
-
>
mCreatedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mCreatedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAttached
:
if
(
definition
-
>
mCallbacks
-
>
mAttachedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mAttachedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eDetached
:
if
(
definition
-
>
mCallbacks
-
>
mDetachedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mDetachedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAttributeChanged
:
if
(
definition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
Value
(
)
;
}
break
;
}
if
(
!
func
)
{
return
;
}
if
(
aType
=
=
nsIDocument
:
:
eCreated
)
{
elementData
-
>
mCreatedCallbackInvoked
=
false
;
}
else
if
(
!
elementData
-
>
mCreatedCallbackInvoked
)
{
return
;
}
CustomElementCallback
*
callback
=
new
CustomElementCallback
(
aCustomElement
aType
func
elementData
)
;
elementData
-
>
mCallbackQueue
.
AppendElement
(
callback
)
;
if
(
aArgs
)
{
callback
-
>
SetArgs
(
*
aArgs
)
;
}
if
(
!
elementData
-
>
mElementIsBeingCreated
)
{
CustomElementData
*
lastData
=
sProcessingStack
-
>
SafeLastElement
(
nullptr
)
;
bool
shouldPushElementQueue
=
(
!
lastData
|
|
lastData
-
>
mAssociatedMicroTask
<
static_cast
<
int32_t
>
(
nsContentUtils
:
:
MicroTaskLevel
(
)
)
)
;
if
(
shouldPushElementQueue
)
{
sProcessingStack
-
>
AppendElement
(
(
CustomElementData
*
)
nullptr
)
;
}
sProcessingStack
-
>
AppendElement
(
elementData
)
;
elementData
-
>
mAssociatedMicroTask
=
static_cast
<
int32_t
>
(
nsContentUtils
:
:
MicroTaskLevel
(
)
)
;
if
(
shouldPushElementQueue
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableFunction
(
&
CustomElementRegistry
:
:
ProcessTopElementQueue
)
;
nsContentUtils
:
:
AddScriptRunner
(
runnable
)
;
}
}
}
void
CustomElementRegistry
:
:
GetCustomPrototype
(
nsIAtom
*
aAtom
JS
:
:
MutableHandle
<
JSObject
*
>
aPrototype
)
{
mozilla
:
:
dom
:
:
CustomElementDefinition
*
definition
=
mCustomDefinitions
.
Get
(
aAtom
)
;
if
(
definition
)
{
aPrototype
.
set
(
definition
-
>
mPrototype
)
;
}
else
{
aPrototype
.
set
(
nullptr
)
;
}
}
void
CustomElementRegistry
:
:
UpgradeCandidates
(
JSContext
*
aCx
nsIAtom
*
aKey
CustomElementDefinition
*
aDefinition
)
{
nsAutoPtr
<
nsTArray
<
nsWeakPtr
>
>
candidates
;
mCandidatesMap
.
RemoveAndForget
(
aKey
candidates
)
;
if
(
candidates
)
{
for
(
size_t
i
=
0
;
i
<
candidates
-
>
Length
(
)
;
+
+
i
)
{
nsCOMPtr
<
Element
>
elem
=
do_QueryReferent
(
candidates
-
>
ElementAt
(
i
)
)
;
if
(
!
elem
)
{
continue
;
}
EnqueueUpgradeReaction
(
elem
aDefinition
)
;
}
}
}
JSObject
*
CustomElementRegistry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CustomElementRegistryBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
CustomElementRegistry
:
:
GetParentObject
(
)
const
{
return
mWindow
;
}
static
const
char
*
kLifeCycleCallbackNames
[
]
=
{
"
connectedCallback
"
"
disconnectedCallback
"
"
adoptedCallback
"
"
attributeChangedCallback
"
"
createdCallback
"
"
attachedCallback
"
"
detachedCallback
"
}
;
static
void
CheckLifeCycleCallbacks
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aConstructor
ErrorResult
&
aRv
)
{
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
kLifeCycleCallbackNames
)
;
+
+
i
)
{
const
char
*
callbackName
=
kLifeCycleCallbackNames
[
i
]
;
JS
:
:
Rooted
<
JS
:
:
Value
>
callbackValue
(
aCx
)
;
if
(
!
JS_GetProperty
(
aCx
aConstructor
callbackName
&
callbackValue
)
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
if
(
!
callbackValue
.
isUndefined
(
)
)
{
if
(
!
callbackValue
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_OBJECT
>
(
NS_ConvertASCIItoUTF16
(
callbackName
)
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
callback
(
aCx
&
callbackValue
.
toObject
(
)
)
;
if
(
!
JS
:
:
IsCallable
(
callback
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_CALLABLE
>
(
NS_ConvertASCIItoUTF16
(
callbackName
)
)
;
return
;
}
}
}
}
void
CustomElementRegistry
:
:
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
{
AutoCEReaction
ceReaction
(
this
)
;
aRv
.
MightThrowJSException
(
)
;
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mWindow
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
constructor
(
cx
aFunctionConstructor
.
CallableOrNull
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
constructorUnwrapped
(
cx
js
:
:
CheckedUnwrap
(
constructor
)
)
;
if
(
!
constructorUnwrapped
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
JS
:
:
IsConstructor
(
constructorUnwrapped
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_CONSTRUCTOR
>
(
NS_LITERAL_STRING
(
"
Argument
2
of
CustomElementRegistry
.
define
"
)
)
;
return
;
}
nsCOMPtr
<
nsIAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
if
(
!
nsContentUtils
:
:
IsCustomElementName
(
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SYNTAX_ERR
)
;
return
;
}
if
(
mCustomDefinitions
.
Get
(
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
const
auto
&
ptr
=
mConstructors
.
lookup
(
constructorUnwrapped
)
;
if
(
ptr
)
{
MOZ_ASSERT
(
mCustomDefinitions
.
Get
(
ptr
-
>
value
(
)
)
"
Definition
must
be
found
in
mCustomDefinitions
"
)
;
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
nsAutoString
localName
(
aName
)
;
if
(
aOptions
.
mExtends
.
WasPassed
(
)
)
{
nsCOMPtr
<
nsIAtom
>
extendsAtom
(
NS_Atomize
(
aOptions
.
mExtends
.
Value
(
)
)
)
;
if
(
nsContentUtils
:
:
IsCustomElementName
(
extendsAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
nsIParserService
*
ps
=
nsContentUtils
:
:
GetParserService
(
)
;
if
(
!
ps
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
int32_t
tag
=
ps
-
>
HTMLCaseSensitiveAtomTagToId
(
extendsAtom
)
;
if
(
tag
=
=
eHTMLTag_userdefined
|
|
tag
=
=
eHTMLTag_bgsound
|
|
tag
=
=
eHTMLTag_multicol
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
localName
.
Assign
(
aOptions
.
mExtends
.
Value
(
)
)
;
}
if
(
mIsCustomDefinitionRunning
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
constructorPrototype
(
cx
)
;
nsAutoPtr
<
LifecycleCallbacks
>
callbacksHolder
(
new
LifecycleCallbacks
(
)
)
;
{
AutoSetRunningFlag
as
(
this
)
;
{
JSAutoCompartment
ac
(
cx
constructor
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
prototypev
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
constructor
"
prototype
"
&
prototypev
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
!
prototypev
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_OBJECT
>
(
NS_LITERAL_STRING
(
"
constructor
.
prototype
"
)
)
;
return
;
}
constructorPrototype
=
&
prototypev
.
toObject
(
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
constructorProtoUnwrapped
(
cx
js
:
:
CheckedUnwrap
(
constructorPrototype
)
)
;
if
(
!
constructorProtoUnwrapped
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
{
JSAutoCompartment
ac
(
cx
constructorProtoUnwrapped
)
;
CheckLifeCycleCallbacks
(
cx
constructorProtoUnwrapped
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
JS
:
:
RootedValue
rootedv
(
cx
JS
:
:
ObjectValue
(
*
constructorProtoUnwrapped
)
)
;
if
(
!
JS_WrapValue
(
cx
&
rootedv
)
|
|
!
callbacksHolder
-
>
Init
(
cx
rootedv
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
}
}
nsCOMPtr
<
nsIAtom
>
localNameAtom
(
NS_Atomize
(
localName
)
)
;
LifecycleCallbacks
*
callbacks
=
callbacksHolder
.
forget
(
)
;
if
(
!
mConstructors
.
put
(
constructorUnwrapped
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
CustomElementDefinition
*
definition
=
new
CustomElementDefinition
(
nameAtom
localNameAtom
constructor
constructorPrototype
callbacks
0
)
;
mCustomDefinitions
.
Put
(
nameAtom
definition
)
;
MOZ_ASSERT
(
mCustomDefinitions
.
Count
(
)
=
=
mConstructors
.
count
(
)
"
Number
of
entries
should
be
the
same
"
)
;
UpgradeCandidates
(
cx
nameAtom
definition
)
;
RefPtr
<
Promise
>
promise
;
mWhenDefinedPromiseMap
.
Remove
(
nameAtom
getter_AddRefs
(
promise
)
)
;
if
(
promise
)
{
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
}
void
CustomElementRegistry
:
:
Get
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
)
{
nsCOMPtr
<
nsIAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
CustomElementDefinition
*
data
=
mCustomDefinitions
.
Get
(
nameAtom
)
;
if
(
!
data
)
{
aRetVal
.
setUndefined
(
)
;
return
;
}
aRetVal
.
setObject
(
*
data
-
>
mConstructor
)
;
return
;
}
already_AddRefed
<
Promise
>
CustomElementRegistry
:
:
WhenDefined
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mWindow
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
if
(
!
nsContentUtils
:
:
IsCustomElementName
(
nameAtom
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SYNTAX_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
mCustomDefinitions
.
Get
(
nameAtom
)
)
{
promise
-
>
MaybeResolve
(
JS
:
:
UndefinedHandleValue
)
;
return
promise
.
forget
(
)
;
}
if
(
mWhenDefinedPromiseMap
.
Contains
(
nameAtom
)
)
{
mWhenDefinedPromiseMap
.
Get
(
nameAtom
getter_AddRefs
(
promise
)
)
;
}
else
{
mWhenDefinedPromiseMap
.
Put
(
nameAtom
promise
)
;
}
return
promise
.
forget
(
)
;
}
void
CustomElementRegistry
:
:
EnqueueUpgradeReaction
(
Element
*
aElement
CustomElementDefinition
*
aDefinition
)
{
Enqueue
(
aElement
new
CustomElementUpgradeReaction
(
this
aDefinition
)
)
;
}
void
CustomElementRegistry
:
:
Upgrade
(
Element
*
aElement
CustomElementDefinition
*
aDefinition
)
{
aElement
-
>
RemoveStates
(
NS_EVENT_STATE_UNRESOLVED
)
;
if
(
aElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
!
=
aDefinition
-
>
mLocalName
)
{
return
;
}
MOZ_ASSERT
(
aElement
-
>
IsHTMLElement
(
aDefinition
-
>
mLocalName
)
)
;
nsWrapperCache
*
cache
;
CallQueryInterface
(
aElement
&
cache
)
;
MOZ_ASSERT
(
cache
"
Element
doesn
'
t
support
wrapper
cache
?
"
)
;
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mWindow
)
)
)
{
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
RootedObject
wrapper
(
cx
)
;
JS
:
:
Rooted
<
JSObject
*
>
prototype
(
cx
aDefinition
-
>
mPrototype
)
;
{
JSAutoCompartment
ac
(
cx
prototype
)
;
if
(
(
wrapper
=
cache
-
>
GetWrapper
(
)
)
&
&
JS_WrapObject
(
cx
&
wrapper
)
)
{
if
(
!
JS_SetPrototype
(
cx
wrapper
prototype
)
)
{
return
;
}
}
}
EnqueueLifecycleCallback
(
nsIDocument
:
:
eCreated
aElement
nullptr
aDefinition
)
;
}
void
CustomElementRegistry
:
:
CreateAndPushElementQueue
(
)
{
mReactionsStack
.
AppendElement
(
)
;
}
void
CustomElementRegistry
:
:
PopAndInvokeElementQueue
(
)
{
MOZ_ASSERT
(
!
mReactionsStack
.
IsEmpty
(
)
"
Reaction
stack
shouldn
'
t
be
empty
"
)
;
ElementQueue
&
elementQueue
=
mReactionsStack
.
LastElement
(
)
;
CustomElementRegistry
:
:
InvokeReactions
(
elementQueue
)
;
DebugOnly
<
bool
>
isRemovedElement
=
mReactionsStack
.
RemoveElement
(
elementQueue
)
;
MOZ_ASSERT
(
isRemovedElement
"
Reaction
stack
should
have
an
element
queue
to
remove
"
)
;
}
void
CustomElementRegistry
:
:
Enqueue
(
Element
*
aElement
CustomElementReaction
*
aReaction
)
{
if
(
!
mReactionsStack
.
IsEmpty
(
)
)
{
mReactionsStack
.
LastElement
(
)
.
AppendElement
(
do_GetWeakReference
(
aElement
)
)
;
ReactionQueue
*
reactionQueue
=
mElementReactionQueueMap
.
LookupOrAdd
(
aElement
)
;
reactionQueue
-
>
AppendElement
(
aReaction
)
;
return
;
}
mBackupQueue
.
AppendElement
(
do_GetWeakReference
(
aElement
)
)
;
ReactionQueue
*
reactionQueue
=
mElementReactionQueueMap
.
LookupOrAdd
(
aElement
)
;
reactionQueue
-
>
AppendElement
(
aReaction
)
;
if
(
mIsBackupQueueProcessing
)
{
return
;
}
CycleCollectedJSContext
*
context
=
CycleCollectedJSContext
:
:
Get
(
)
;
RefPtr
<
ProcessBackupQueueRunnable
>
processBackupQueueRunnable
=
new
ProcessBackupQueueRunnable
(
this
)
;
context
-
>
DispatchToMicroTask
(
processBackupQueueRunnable
.
forget
(
)
)
;
}
void
CustomElementRegistry
:
:
InvokeBackupQueue
(
)
{
CustomElementRegistry
:
:
InvokeReactions
(
mBackupQueue
)
;
}
void
CustomElementRegistry
:
:
InvokeReactions
(
ElementQueue
&
aElementQueue
)
{
for
(
uint32_t
i
=
0
;
i
<
aElementQueue
.
Length
(
)
;
+
+
i
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryReferent
(
aElementQueue
[
i
]
)
;
if
(
!
element
)
{
continue
;
}
nsAutoPtr
<
ReactionQueue
>
reactions
;
mElementReactionQueueMap
.
RemoveAndForget
(
element
reactions
)
;
MOZ_ASSERT
(
reactions
"
Associated
ReactionQueue
must
be
found
in
mElementReactionQueueMap
"
)
;
for
(
uint32_t
j
=
0
;
j
<
reactions
-
>
Length
(
)
;
+
+
j
)
{
nsAutoPtr
<
CustomElementReaction
>
&
reaction
=
reactions
-
>
ElementAt
(
j
)
;
reaction
-
>
Invoke
(
element
)
;
}
}
aElementQueue
.
Clear
(
)
;
}
CustomElementDefinition
:
:
CustomElementDefinition
(
nsIAtom
*
aType
nsIAtom
*
aLocalName
JSObject
*
aConstructor
JSObject
*
aPrototype
LifecycleCallbacks
*
aCallbacks
uint32_t
aDocOrder
)
:
mType
(
aType
)
mLocalName
(
aLocalName
)
mConstructor
(
aConstructor
)
mPrototype
(
aPrototype
)
mCallbacks
(
aCallbacks
)
mDocOrder
(
aDocOrder
)
{
}
void
CustomElementUpgradeReaction
:
:
Invoke
(
Element
*
aElement
)
{
mRegistry
-
>
Upgrade
(
aElement
mDefinition
)
;
}
}
}
