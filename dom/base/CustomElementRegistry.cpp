#
include
"
mozilla
/
dom
/
CustomElementRegistry
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
dom
/
CustomElementRegistryBinding
.
h
"
#
include
"
mozilla
/
dom
/
HTMLElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WebComponentsBinding
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
nsHTMLTags
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsGlobalWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
class
CustomElementUpgradeReaction
final
:
public
CustomElementReaction
{
public
:
explicit
CustomElementUpgradeReaction
(
CustomElementDefinition
*
aDefinition
)
:
mDefinition
(
aDefinition
)
{
mIsUpgradeReaction
=
true
;
}
private
:
virtual
void
Invoke
(
Element
*
aElement
ErrorResult
&
aRv
)
override
{
CustomElementRegistry
:
:
Upgrade
(
aElement
mDefinition
aRv
)
;
}
CustomElementDefinition
*
mDefinition
;
}
;
class
CustomElementCallbackReaction
final
:
public
CustomElementReaction
{
public
:
explicit
CustomElementCallbackReaction
(
UniquePtr
<
CustomElementCallback
>
aCustomElementCallback
)
:
mCustomElementCallback
(
Move
(
aCustomElementCallback
)
)
{
}
virtual
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
override
{
mCustomElementCallback
-
>
Traverse
(
aCb
)
;
}
private
:
virtual
void
Invoke
(
Element
*
aElement
ErrorResult
&
aRv
)
override
{
mCustomElementCallback
-
>
Call
(
)
;
}
UniquePtr
<
CustomElementCallback
>
mCustomElementCallback
;
}
;
void
CustomElementCallback
:
:
Call
(
)
{
switch
(
mType
)
{
case
nsIDocument
:
:
eConnected
:
static_cast
<
LifecycleConnectedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
)
;
break
;
case
nsIDocument
:
:
eDisconnected
:
static_cast
<
LifecycleDisconnectedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
)
;
break
;
case
nsIDocument
:
:
eAdopted
:
static_cast
<
LifecycleAdoptedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
mAdoptedCallbackArgs
.
mOldDocument
mAdoptedCallbackArgs
.
mNewDocument
)
;
break
;
case
nsIDocument
:
:
eAttributeChanged
:
static_cast
<
LifecycleAttributeChangedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
mArgs
.
name
mArgs
.
oldValue
mArgs
.
newValue
mArgs
.
namespaceURI
)
;
break
;
}
}
void
CustomElementCallback
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mThisObject
"
)
;
aCb
.
NoteXPCOMChild
(
mThisObject
)
;
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mCallback
"
)
;
aCb
.
NoteXPCOMChild
(
mCallback
)
;
}
CustomElementCallback
:
:
CustomElementCallback
(
Element
*
aThisObject
nsIDocument
:
:
ElementCallbackType
aCallbackType
mozilla
:
:
dom
:
:
CallbackFunction
*
aCallback
)
:
mThisObject
(
aThisObject
)
mCallback
(
aCallback
)
mType
(
aCallbackType
)
{
}
already_AddRefed
<
Element
>
CustomElementConstructor
:
:
Construct
(
const
char
*
aExecutionReason
ErrorResult
&
aRv
)
{
CallSetup
s
(
this
aRv
aExecutionReason
CallbackFunction
:
:
eRethrowExceptions
)
;
JSContext
*
cx
=
s
.
GetContext
(
)
;
if
(
!
cx
)
{
MOZ_ASSERT
(
aRv
.
Failed
(
)
)
;
return
nullptr
;
}
JS
:
:
Rooted
<
JSObject
*
>
result
(
cx
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
constructor
(
cx
JS
:
:
ObjectValue
(
*
mCallback
)
)
;
if
(
!
JS
:
:
Construct
(
cx
constructor
JS
:
:
HandleValueArray
:
:
empty
(
)
&
result
)
)
{
aRv
.
NoteJSContextException
(
cx
)
;
return
nullptr
;
}
RefPtr
<
Element
>
element
;
if
(
NS_FAILED
(
UNWRAP_OBJECT
(
Element
&
result
element
)
)
)
{
return
nullptr
;
}
return
element
.
forget
(
)
;
}
CustomElementData
:
:
CustomElementData
(
nsAtom
*
aType
)
:
CustomElementData
(
aType
CustomElementData
:
:
State
:
:
eUndefined
)
{
}
CustomElementData
:
:
CustomElementData
(
nsAtom
*
aType
State
aState
)
:
mState
(
aState
)
mType
(
aType
)
{
}
void
CustomElementData
:
:
SetCustomElementDefinition
(
CustomElementDefinition
*
aDefinition
)
{
MOZ_ASSERT
(
mState
=
=
State
:
:
eCustom
)
;
MOZ_ASSERT
(
!
mCustomElementDefinition
)
;
MOZ_ASSERT
(
aDefinition
-
>
mType
=
=
mType
)
;
mCustomElementDefinition
=
aDefinition
;
}
CustomElementDefinition
*
CustomElementData
:
:
GetCustomElementDefinition
(
)
{
MOZ_ASSERT
(
mCustomElementDefinition
?
mState
=
=
State
:
:
eCustom
:
mState
!
=
State
:
:
eCustom
)
;
return
mCustomElementDefinition
;
}
nsAtom
*
CustomElementData
:
:
GetCustomElementType
(
)
{
return
mType
;
}
void
CustomElementData
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
for
(
uint32_t
i
=
0
;
i
<
mReactionQueue
.
Length
(
)
;
i
+
+
)
{
if
(
mReactionQueue
[
i
]
)
{
mReactionQueue
[
i
]
-
>
Traverse
(
aCb
)
;
}
}
if
(
mCustomElementDefinition
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mCustomElementDefinition
"
)
;
aCb
.
NoteNativeChild
(
mCustomElementDefinition
NS_CYCLE_COLLECTION_PARTICIPANT
(
CustomElementDefinition
)
)
;
}
}
void
CustomElementData
:
:
Unlink
(
)
{
mReactionQueue
.
Clear
(
)
;
mCustomElementDefinition
=
nullptr
;
}
namespace
{
class
MOZ_RAII
AutoConstructionStackEntry
final
{
public
:
AutoConstructionStackEntry
(
nsTArray
<
RefPtr
<
Element
>
>
&
aStack
Element
*
aElement
)
:
mStack
(
aStack
)
{
MOZ_ASSERT
(
aElement
-
>
IsHTMLElement
(
)
|
|
aElement
-
>
IsXULElement
(
)
)
;
mIndex
=
mStack
.
Length
(
)
;
mStack
.
AppendElement
(
aElement
)
;
}
~
AutoConstructionStackEntry
(
)
{
MOZ_ASSERT
(
mIndex
=
=
mStack
.
Length
(
)
-
1
"
Removed
element
should
be
the
last
element
"
)
;
mStack
.
RemoveElementAt
(
mIndex
)
;
}
private
:
nsTArray
<
RefPtr
<
Element
>
>
&
mStack
;
uint32_t
mIndex
;
}
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CustomElementRegistry
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CustomElementRegistry
)
tmp
-
>
mConstructors
.
clear
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCustomDefinitions
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWhenDefinedPromiseMap
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mElementCreationCallbacks
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
CustomElementRegistry
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCustomDefinitions
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWhenDefinedPromiseMap
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mElementCreationCallbacks
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
CustomElementRegistry
)
for
(
ConstructorMap
:
:
Enum
iter
(
tmp
-
>
mConstructors
)
;
!
iter
.
empty
(
)
;
iter
.
popFront
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
front
(
)
.
mutableKey
(
)
"
mConstructors
key
"
aClosure
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CustomElementRegistry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CustomElementRegistry
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CustomElementRegistry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
CustomElementRegistry
:
:
CustomElementRegistry
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
mIsCustomDefinitionRunning
(
false
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ALWAYS_TRUE
(
mConstructors
.
init
(
)
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
CustomElementRegistry
:
:
~
CustomElementRegistry
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
bool
CustomElementRegistry
:
:
IsCustomElementEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
{
if
(
nsContentUtils
:
:
IsCustomElementsEnabled
(
)
)
{
return
true
;
}
return
XRE_IsParentProcess
(
)
&
&
nsContentUtils
:
:
AllowXULXBLForPrincipal
(
nsContentUtils
:
:
ObjectPrincipal
(
aObject
)
)
;
}
bool
CustomElementRegistry
:
:
IsCustomElementEnabled
(
nsIDocument
*
aDoc
)
{
if
(
nsContentUtils
:
:
IsCustomElementsEnabled
(
)
)
{
return
true
;
}
return
XRE_IsParentProcess
(
)
&
&
nsContentUtils
:
:
AllowXULXBLForPrincipal
(
aDoc
-
>
NodePrincipal
(
)
)
;
}
NS_IMETHODIMP
CustomElementRegistry
:
:
RunCustomElementCreationCallback
:
:
Run
(
)
{
ErrorResult
er
;
nsDependentAtomString
value
(
mAtom
)
;
mCallback
-
>
Call
(
value
er
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
er
.
StealNSResult
(
)
)
"
chrome
JavaScript
error
in
the
callback
.
"
)
;
MOZ_ASSERT
(
mRegistry
-
>
mCustomDefinitions
.
GetWeak
(
mAtom
)
"
Callback
should
define
the
definition
of
type
.
"
)
;
MOZ_ASSERT
(
!
mRegistry
-
>
mElementCreationCallbacks
.
GetWeak
(
mAtom
)
"
Callback
should
be
removed
.
"
)
;
return
NS_OK
;
}
CustomElementDefinition
*
CustomElementRegistry
:
:
LookupCustomElementDefinition
(
nsAtom
*
aNameAtom
nsAtom
*
aTypeAtom
)
{
CustomElementDefinition
*
data
=
mCustomDefinitions
.
GetWeak
(
aTypeAtom
)
;
if
(
!
data
)
{
RefPtr
<
CustomElementCreationCallback
>
callback
;
mElementCreationCallbacks
.
Get
(
aTypeAtom
getter_AddRefs
(
callback
)
)
;
if
(
callback
)
{
RefPtr
<
Runnable
>
runnable
=
new
RunCustomElementCreationCallback
(
this
aTypeAtom
callback
)
;
nsContentUtils
:
:
AddScriptRunner
(
runnable
)
;
mElementCreationCallbacks
.
Remove
(
aTypeAtom
)
;
}
}
if
(
data
&
&
data
-
>
mLocalName
=
=
aNameAtom
)
{
return
data
;
}
return
nullptr
;
}
CustomElementDefinition
*
CustomElementRegistry
:
:
LookupCustomElementDefinition
(
JSContext
*
aCx
JSObject
*
aConstructor
)
const
{
JS
:
:
Rooted
<
JSObject
*
>
constructor
(
aCx
js
:
:
CheckedUnwrap
(
aConstructor
)
)
;
const
auto
&
ptr
=
mConstructors
.
lookup
(
constructor
)
;
if
(
!
ptr
)
{
return
nullptr
;
}
CustomElementDefinition
*
definition
=
mCustomDefinitions
.
GetWeak
(
ptr
-
>
value
(
)
)
;
MOZ_ASSERT
(
definition
"
Definition
must
be
found
in
mCustomDefinitions
"
)
;
return
definition
;
}
void
CustomElementRegistry
:
:
RegisterUnresolvedElement
(
Element
*
aElement
nsAtom
*
aTypeName
)
{
if
(
aElement
-
>
IsInNativeAnonymousSubtree
(
)
)
{
return
;
}
mozilla
:
:
dom
:
:
NodeInfo
*
info
=
aElement
-
>
NodeInfo
(
)
;
RefPtr
<
nsAtom
>
typeName
=
aTypeName
;
if
(
!
typeName
)
{
typeName
=
info
-
>
NameAtom
(
)
;
}
if
(
mCustomDefinitions
.
GetWeak
(
typeName
)
)
{
return
;
}
nsTHashtable
<
nsRefPtrHashKey
<
nsIWeakReference
>
>
*
unresolved
=
mCandidatesMap
.
LookupOrAdd
(
typeName
)
;
nsWeakPtr
elem
=
do_GetWeakReference
(
aElement
)
;
unresolved
-
>
PutEntry
(
elem
)
;
}
void
CustomElementRegistry
:
:
UnregisterUnresolvedElement
(
Element
*
aElement
nsAtom
*
aTypeName
)
{
nsIWeakReference
*
weak
=
aElement
-
>
GetExistingWeakReference
(
)
;
if
(
!
weak
)
{
return
;
}
#
ifdef
DEBUG
{
nsWeakPtr
weakPtr
=
do_GetWeakReference
(
aElement
)
;
MOZ_ASSERT
(
weak
=
=
weakPtr
.
get
(
)
"
do_GetWeakReference
should
reuse
the
existing
nsIWeakReference
.
"
)
;
}
#
endif
nsTHashtable
<
nsRefPtrHashKey
<
nsIWeakReference
>
>
*
candidates
=
nullptr
;
if
(
mCandidatesMap
.
Get
(
aTypeName
&
candidates
)
)
{
MOZ_ASSERT
(
candidates
)
;
candidates
-
>
RemoveEntry
(
weak
)
;
}
}
UniquePtr
<
CustomElementCallback
>
CustomElementRegistry
:
:
CreateCustomElementCallback
(
nsIDocument
:
:
ElementCallbackType
aType
Element
*
aCustomElement
LifecycleCallbackArgs
*
aArgs
LifecycleAdoptedCallbackArgs
*
aAdoptedCallbackArgs
CustomElementDefinition
*
aDefinition
)
{
MOZ_ASSERT
(
aDefinition
"
CustomElementDefinition
should
not
be
null
"
)
;
MOZ_ASSERT
(
aCustomElement
-
>
GetCustomElementData
(
)
"
CustomElementData
should
exist
"
)
;
CallbackFunction
*
func
=
nullptr
;
switch
(
aType
)
{
case
nsIDocument
:
:
eConnected
:
if
(
aDefinition
-
>
mCallbacks
-
>
mConnectedCallback
.
WasPassed
(
)
)
{
func
=
aDefinition
-
>
mCallbacks
-
>
mConnectedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eDisconnected
:
if
(
aDefinition
-
>
mCallbacks
-
>
mDisconnectedCallback
.
WasPassed
(
)
)
{
func
=
aDefinition
-
>
mCallbacks
-
>
mDisconnectedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAdopted
:
if
(
aDefinition
-
>
mCallbacks
-
>
mAdoptedCallback
.
WasPassed
(
)
)
{
func
=
aDefinition
-
>
mCallbacks
-
>
mAdoptedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAttributeChanged
:
if
(
aDefinition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
func
=
aDefinition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
Value
(
)
;
}
break
;
}
if
(
!
func
)
{
return
nullptr
;
}
auto
callback
=
MakeUnique
<
CustomElementCallback
>
(
aCustomElement
aType
func
)
;
if
(
aArgs
)
{
callback
-
>
SetArgs
(
*
aArgs
)
;
}
if
(
aAdoptedCallbackArgs
)
{
callback
-
>
SetAdoptedCallbackArgs
(
*
aAdoptedCallbackArgs
)
;
}
return
Move
(
callback
)
;
}
void
CustomElementRegistry
:
:
EnqueueLifecycleCallback
(
nsIDocument
:
:
ElementCallbackType
aType
Element
*
aCustomElement
LifecycleCallbackArgs
*
aArgs
LifecycleAdoptedCallbackArgs
*
aAdoptedCallbackArgs
CustomElementDefinition
*
aDefinition
)
{
CustomElementDefinition
*
definition
=
aDefinition
;
if
(
!
definition
)
{
definition
=
aCustomElement
-
>
GetCustomElementDefinition
(
)
;
if
(
!
definition
|
|
definition
-
>
mLocalName
!
=
aCustomElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
{
return
;
}
if
(
!
definition
-
>
mCallbacks
)
{
return
;
}
}
auto
callback
=
CreateCustomElementCallback
(
aType
aCustomElement
aArgs
aAdoptedCallbackArgs
definition
)
;
if
(
!
callback
)
{
return
;
}
DocGroup
*
docGroup
=
aCustomElement
-
>
OwnerDoc
(
)
-
>
GetDocGroup
(
)
;
if
(
!
docGroup
)
{
return
;
}
if
(
aType
=
=
nsIDocument
:
:
eAttributeChanged
)
{
RefPtr
<
nsAtom
>
attrName
=
NS_Atomize
(
aArgs
-
>
name
)
;
if
(
definition
-
>
mObservedAttributes
.
IsEmpty
(
)
|
|
!
definition
-
>
mObservedAttributes
.
Contains
(
attrName
)
)
{
return
;
}
}
CustomElementReactionsStack
*
reactionsStack
=
docGroup
-
>
CustomElementReactionsStack
(
)
;
reactionsStack
-
>
EnqueueCallbackReaction
(
aCustomElement
Move
(
callback
)
)
;
}
namespace
{
class
CandidateFinder
{
public
:
CandidateFinder
(
nsTHashtable
<
nsRefPtrHashKey
<
nsIWeakReference
>
>
&
aCandidates
nsIDocument
*
aDoc
)
;
nsTArray
<
nsCOMPtr
<
Element
>
>
OrderedCandidates
(
)
;
private
:
bool
Traverse
(
Element
*
aRoot
nsTArray
<
nsCOMPtr
<
Element
>
>
&
aOrderedElements
)
;
nsCOMPtr
<
nsIDocument
>
mDoc
;
nsInterfaceHashtable
<
nsPtrHashKey
<
Element
>
Element
>
mCandidates
;
}
;
CandidateFinder
:
:
CandidateFinder
(
nsTHashtable
<
nsRefPtrHashKey
<
nsIWeakReference
>
>
&
aCandidates
nsIDocument
*
aDoc
)
:
mDoc
(
aDoc
)
mCandidates
(
aCandidates
.
Count
(
)
)
{
MOZ_ASSERT
(
mDoc
)
;
for
(
auto
iter
=
aCandidates
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsCOMPtr
<
Element
>
elem
=
do_QueryReferent
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
if
(
!
elem
)
{
continue
;
}
Element
*
key
=
elem
.
get
(
)
;
mCandidates
.
Put
(
key
elem
.
forget
(
)
)
;
}
}
nsTArray
<
nsCOMPtr
<
Element
>
>
CandidateFinder
:
:
OrderedCandidates
(
)
{
if
(
mCandidates
.
Count
(
)
=
=
1
)
{
for
(
auto
iter
=
mCandidates
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsTArray
<
nsCOMPtr
<
Element
>
>
rval
(
{
Move
(
iter
.
Data
(
)
)
}
)
;
iter
.
Remove
(
)
;
return
rval
;
}
}
nsTArray
<
nsCOMPtr
<
Element
>
>
orderedElements
(
mCandidates
.
Count
(
)
)
;
for
(
Element
*
child
=
mDoc
-
>
GetFirstElementChild
(
)
;
child
;
child
=
child
-
>
GetNextElementSibling
(
)
)
{
if
(
!
Traverse
(
child
-
>
AsElement
(
)
orderedElements
)
)
{
break
;
}
}
return
orderedElements
;
}
bool
CandidateFinder
:
:
Traverse
(
Element
*
aRoot
nsTArray
<
nsCOMPtr
<
Element
>
>
&
aOrderedElements
)
{
nsCOMPtr
<
Element
>
elem
;
if
(
mCandidates
.
Remove
(
aRoot
getter_AddRefs
(
elem
)
)
)
{
aOrderedElements
.
AppendElement
(
Move
(
elem
)
)
;
if
(
mCandidates
.
Count
(
)
=
=
0
)
{
return
false
;
}
}
if
(
ShadowRoot
*
root
=
aRoot
-
>
GetShadowRoot
(
)
)
{
for
(
Element
*
child
=
root
-
>
GetFirstElementChild
(
)
;
child
;
child
=
child
-
>
GetNextElementSibling
(
)
)
{
if
(
!
Traverse
(
child
aOrderedElements
)
)
{
return
false
;
}
}
}
for
(
Element
*
child
=
aRoot
-
>
GetFirstElementChild
(
)
;
child
;
child
=
child
-
>
GetNextElementSibling
(
)
)
{
if
(
!
Traverse
(
child
aOrderedElements
)
)
{
return
false
;
}
}
return
true
;
}
}
void
CustomElementRegistry
:
:
UpgradeCandidates
(
nsAtom
*
aKey
CustomElementDefinition
*
aDefinition
ErrorResult
&
aRv
)
{
DocGroup
*
docGroup
=
mWindow
-
>
GetDocGroup
(
)
;
if
(
!
docGroup
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
nsAutoPtr
<
nsTHashtable
<
nsRefPtrHashKey
<
nsIWeakReference
>
>
>
candidates
;
if
(
mCandidatesMap
.
Remove
(
aKey
&
candidates
)
)
{
MOZ_ASSERT
(
candidates
)
;
CustomElementReactionsStack
*
reactionsStack
=
docGroup
-
>
CustomElementReactionsStack
(
)
;
CandidateFinder
finder
(
*
candidates
mWindow
-
>
GetExtantDoc
(
)
)
;
for
(
auto
&
elem
:
finder
.
OrderedCandidates
(
)
)
{
reactionsStack
-
>
EnqueueUpgradeReaction
(
elem
aDefinition
)
;
}
}
}
JSObject
*
CustomElementRegistry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CustomElementRegistryBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
CustomElementRegistry
:
:
GetParentObject
(
)
const
{
return
mWindow
;
}
DocGroup
*
CustomElementRegistry
:
:
GetDocGroup
(
)
const
{
return
mWindow
?
mWindow
-
>
GetDocGroup
(
)
:
nullptr
;
}
static
const
char
*
kLifeCycleCallbackNames
[
]
=
{
"
connectedCallback
"
"
disconnectedCallback
"
"
adoptedCallback
"
"
attributeChangedCallback
"
}
;
static
void
CheckLifeCycleCallbacks
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aConstructor
ErrorResult
&
aRv
)
{
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
kLifeCycleCallbackNames
)
;
+
+
i
)
{
const
char
*
callbackName
=
kLifeCycleCallbackNames
[
i
]
;
JS
:
:
Rooted
<
JS
:
:
Value
>
callbackValue
(
aCx
)
;
if
(
!
JS_GetProperty
(
aCx
aConstructor
callbackName
&
callbackValue
)
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
if
(
!
callbackValue
.
isUndefined
(
)
)
{
if
(
!
callbackValue
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_OBJECT
>
(
NS_ConvertASCIItoUTF16
(
callbackName
)
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
callback
(
aCx
&
callbackValue
.
toObject
(
)
)
;
if
(
!
JS
:
:
IsCallable
(
callback
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_CALLABLE
>
(
NS_ConvertASCIItoUTF16
(
callbackName
)
)
;
return
;
}
}
}
}
void
CustomElementRegistry
:
:
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
{
aRv
.
MightThrowJSException
(
)
;
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mWindow
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
constructor
(
cx
aFunctionConstructor
.
CallableOrNull
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
constructorUnwrapped
(
cx
js
:
:
CheckedUnwrap
(
constructor
)
)
;
if
(
!
constructorUnwrapped
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
JS
:
:
IsConstructor
(
constructorUnwrapped
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_CONSTRUCTOR
>
(
NS_LITERAL_STRING
(
"
Argument
2
of
CustomElementRegistry
.
define
"
)
)
;
return
;
}
nsIDocument
*
doc
=
mWindow
-
>
GetExtantDoc
(
)
;
uint32_t
nameSpaceID
=
doc
?
doc
-
>
GetDefaultNamespaceID
(
)
:
kNameSpaceID_XHTML
;
RefPtr
<
nsAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
if
(
!
nsContentUtils
:
:
IsCustomElementName
(
nameAtom
nameSpaceID
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SYNTAX_ERR
)
;
return
;
}
if
(
mCustomDefinitions
.
GetWeak
(
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
const
auto
&
ptr
=
mConstructors
.
lookup
(
constructorUnwrapped
)
;
if
(
ptr
)
{
MOZ_ASSERT
(
mCustomDefinitions
.
GetWeak
(
ptr
-
>
value
(
)
)
"
Definition
must
be
found
in
mCustomDefinitions
"
)
;
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
nsAutoString
localName
(
aName
)
;
if
(
aOptions
.
mExtends
.
WasPassed
(
)
)
{
RefPtr
<
nsAtom
>
extendsAtom
(
NS_Atomize
(
aOptions
.
mExtends
.
Value
(
)
)
)
;
if
(
nsContentUtils
:
:
IsCustomElementName
(
extendsAtom
nameSpaceID
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
int32_t
tag
=
nsHTMLTags
:
:
CaseSensitiveAtomTagToId
(
extendsAtom
)
;
if
(
tag
=
=
eHTMLTag_userdefined
|
|
tag
=
=
eHTMLTag_bgsound
|
|
tag
=
=
eHTMLTag_multicol
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
localName
.
Assign
(
aOptions
.
mExtends
.
Value
(
)
)
;
}
if
(
mIsCustomDefinitionRunning
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
constructorPrototype
(
cx
)
;
nsAutoPtr
<
LifecycleCallbacks
>
callbacksHolder
(
new
LifecycleCallbacks
(
)
)
;
nsTArray
<
RefPtr
<
nsAtom
>
>
observedAttributes
;
{
AutoSetRunningFlag
as
(
this
)
;
{
JSAutoRealm
ar
(
cx
constructor
)
;
if
(
!
JS_GetProperty
(
cx
constructor
"
prototype
"
&
constructorPrototype
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
!
constructorPrototype
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_OBJECT
>
(
NS_LITERAL_STRING
(
"
constructor
.
prototype
"
)
)
;
return
;
}
}
JS
:
:
Rooted
<
JSObject
*
>
constructorProtoUnwrapped
(
cx
js
:
:
CheckedUnwrap
(
&
constructorPrototype
.
toObject
(
)
)
)
;
if
(
!
constructorProtoUnwrapped
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
{
JSAutoRealm
ar
(
cx
constructorProtoUnwrapped
)
;
CheckLifeCycleCallbacks
(
cx
constructorProtoUnwrapped
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
JS
:
:
RootedValue
rootedv
(
cx
JS
:
:
ObjectValue
(
*
constructorProtoUnwrapped
)
)
;
if
(
!
JS_WrapValue
(
cx
&
rootedv
)
|
|
!
callbacksHolder
-
>
Init
(
cx
rootedv
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
callbacksHolder
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
JSAutoRealm
ar
(
cx
constructor
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
observedAttributesIterable
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
constructor
"
observedAttributes
"
&
observedAttributesIterable
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
!
observedAttributesIterable
.
isUndefined
(
)
)
{
if
(
!
observedAttributesIterable
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_SEQUENCE
>
(
NS_LITERAL_STRING
(
"
observedAttributes
"
)
)
;
return
;
}
JS
:
:
ForOfIterator
iter
(
cx
)
;
if
(
!
iter
.
init
(
observedAttributesIterable
JS
:
:
ForOfIterator
:
:
AllowNonIterable
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
!
iter
.
valueIsIterable
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_SEQUENCE
>
(
NS_LITERAL_STRING
(
"
observedAttributes
"
)
)
;
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
attribute
(
cx
)
;
while
(
true
)
{
bool
done
;
if
(
!
iter
.
next
(
&
attribute
&
done
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
done
)
{
break
;
}
nsAutoString
attrStr
;
if
(
!
ConvertJSValueToString
(
cx
attribute
eStringify
eStringify
attrStr
)
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
if
(
!
observedAttributes
.
AppendElement
(
NS_Atomize
(
attrStr
)
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
}
}
}
}
}
RefPtr
<
nsAtom
>
localNameAtom
(
NS_Atomize
(
localName
)
)
;
LifecycleCallbacks
*
callbacks
=
callbacksHolder
.
forget
(
)
;
if
(
!
mConstructors
.
put
(
constructorUnwrapped
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
CustomElementDefinition
>
definition
=
new
CustomElementDefinition
(
nameAtom
localNameAtom
&
aFunctionConstructor
Move
(
observedAttributes
)
callbacks
)
;
CustomElementDefinition
*
def
=
definition
.
get
(
)
;
mCustomDefinitions
.
Put
(
nameAtom
definition
.
forget
(
)
)
;
MOZ_ASSERT
(
mCustomDefinitions
.
Count
(
)
=
=
mConstructors
.
count
(
)
"
Number
of
entries
should
be
the
same
"
)
;
UpgradeCandidates
(
nameAtom
def
aRv
)
;
RefPtr
<
Promise
>
promise
;
mWhenDefinedPromiseMap
.
Remove
(
nameAtom
getter_AddRefs
(
promise
)
)
;
if
(
promise
)
{
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
mElementCreationCallbacks
.
Remove
(
nameAtom
)
;
}
void
CustomElementRegistry
:
:
SetElementCreationCallback
(
const
nsAString
&
aName
CustomElementCreationCallback
&
aCallback
ErrorResult
&
aRv
)
{
RefPtr
<
nsAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
if
(
mElementCreationCallbacks
.
GetWeak
(
nameAtom
)
|
|
mCustomDefinitions
.
GetWeak
(
nameAtom
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
;
}
RefPtr
<
CustomElementCreationCallback
>
callback
=
&
aCallback
;
mElementCreationCallbacks
.
Put
(
nameAtom
callback
.
forget
(
)
)
;
return
;
}
void
CustomElementRegistry
:
:
Get
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
)
{
RefPtr
<
nsAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
CustomElementDefinition
*
data
=
mCustomDefinitions
.
GetWeak
(
nameAtom
)
;
if
(
!
data
)
{
aRetVal
.
setUndefined
(
)
;
return
;
}
aRetVal
.
setObject
(
*
data
-
>
mConstructor
-
>
Callback
(
aCx
)
)
;
}
already_AddRefed
<
Promise
>
CustomElementRegistry
:
:
WhenDefined
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mWindow
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
nsAtom
>
nameAtom
(
NS_Atomize
(
aName
)
)
;
nsIDocument
*
doc
=
mWindow
-
>
GetExtantDoc
(
)
;
uint32_t
nameSpaceID
=
doc
?
doc
-
>
GetDefaultNamespaceID
(
)
:
kNameSpaceID_XHTML
;
if
(
!
nsContentUtils
:
:
IsCustomElementName
(
nameAtom
nameSpaceID
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SYNTAX_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
mCustomDefinitions
.
GetWeak
(
nameAtom
)
)
{
promise
-
>
MaybeResolve
(
JS
:
:
UndefinedHandleValue
)
;
return
promise
.
forget
(
)
;
}
auto
entry
=
mWhenDefinedPromiseMap
.
LookupForAdd
(
nameAtom
)
;
if
(
entry
)
{
promise
=
entry
.
Data
(
)
;
}
else
{
entry
.
OrInsert
(
[
&
promise
]
(
)
{
return
promise
;
}
)
;
}
return
promise
.
forget
(
)
;
}
namespace
{
static
void
DoUpgrade
(
Element
*
aElement
CustomElementConstructor
*
aConstructor
ErrorResult
&
aRv
)
{
RefPtr
<
Element
>
constructResult
=
aConstructor
-
>
Construct
(
"
Custom
Element
Upgrade
"
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
if
(
!
constructResult
|
|
constructResult
.
get
(
)
!
=
aElement
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
}
}
void
CustomElementRegistry
:
:
Upgrade
(
Element
*
aElement
CustomElementDefinition
*
aDefinition
ErrorResult
&
aRv
)
{
RefPtr
<
CustomElementData
>
data
=
aElement
-
>
GetCustomElementData
(
)
;
MOZ_ASSERT
(
data
"
CustomElementData
should
exist
"
)
;
if
(
data
-
>
mState
=
=
CustomElementData
:
:
State
:
:
eCustom
|
|
data
-
>
mState
=
=
CustomElementData
:
:
State
:
:
eFailed
)
{
return
;
}
if
(
!
aDefinition
-
>
mObservedAttributes
.
IsEmpty
(
)
)
{
uint32_t
count
=
aElement
-
>
GetAttrCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
count
;
i
+
+
)
{
mozilla
:
:
dom
:
:
BorrowedAttrInfo
info
=
aElement
-
>
GetAttrInfoAt
(
i
)
;
const
nsAttrName
*
name
=
info
.
mName
;
nsAtom
*
attrName
=
name
-
>
LocalName
(
)
;
if
(
aDefinition
-
>
IsInObservedAttributeList
(
attrName
)
)
{
int32_t
namespaceID
=
name
-
>
NamespaceID
(
)
;
nsAutoString
attrValue
namespaceURI
;
info
.
mValue
-
>
ToString
(
attrValue
)
;
nsContentUtils
:
:
NameSpaceManager
(
)
-
>
GetNameSpaceURI
(
namespaceID
namespaceURI
)
;
LifecycleCallbackArgs
args
=
{
nsDependentAtomString
(
attrName
)
VoidString
(
)
attrValue
(
namespaceURI
.
IsEmpty
(
)
?
VoidString
(
)
:
namespaceURI
)
}
;
nsContentUtils
:
:
EnqueueLifecycleCallback
(
nsIDocument
:
:
eAttributeChanged
aElement
&
args
nullptr
aDefinition
)
;
}
}
}
if
(
aElement
-
>
IsInComposedDoc
(
)
)
{
nsContentUtils
:
:
EnqueueLifecycleCallback
(
nsIDocument
:
:
eConnected
aElement
nullptr
nullptr
aDefinition
)
;
}
AutoConstructionStackEntry
acs
(
aDefinition
-
>
mConstructionStack
aElement
)
;
DoUpgrade
(
aElement
aDefinition
-
>
mConstructor
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
data
-
>
mState
=
CustomElementData
:
:
State
:
:
eFailed
;
data
-
>
mReactionQueue
.
Clear
(
)
;
return
;
}
data
-
>
mState
=
CustomElementData
:
:
State
:
:
eCustom
;
aElement
-
>
SetCustomElementDefinition
(
aDefinition
)
;
}
void
CustomElementReactionsStack
:
:
CreateAndPushElementQueue
(
)
{
MOZ_ASSERT
(
mRecursionDepth
)
;
MOZ_ASSERT
(
!
mIsElementQueuePushedForCurrentRecursionDepth
)
;
mReactionsStack
.
AppendElement
(
MakeUnique
<
ElementQueue
>
(
)
)
;
mIsElementQueuePushedForCurrentRecursionDepth
=
true
;
}
void
CustomElementReactionsStack
:
:
PopAndInvokeElementQueue
(
)
{
MOZ_ASSERT
(
mRecursionDepth
)
;
MOZ_ASSERT
(
mIsElementQueuePushedForCurrentRecursionDepth
)
;
MOZ_ASSERT
(
!
mReactionsStack
.
IsEmpty
(
)
"
Reaction
stack
shouldn
'
t
be
empty
"
)
;
const
uint32_t
lastIndex
=
mReactionsStack
.
Length
(
)
-
1
;
ElementQueue
*
elementQueue
=
mReactionsStack
.
ElementAt
(
lastIndex
)
.
get
(
)
;
if
(
!
elementQueue
-
>
IsEmpty
(
)
)
{
nsIGlobalObject
*
global
=
GetEntryGlobal
(
)
;
InvokeReactions
(
elementQueue
global
)
;
}
MOZ_ASSERT
(
lastIndex
=
=
mReactionsStack
.
Length
(
)
-
1
"
reactions
created
by
InvokeReactions
(
)
should
be
consumed
and
removed
"
)
;
mReactionsStack
.
RemoveElementAt
(
lastIndex
)
;
mIsElementQueuePushedForCurrentRecursionDepth
=
false
;
}
void
CustomElementReactionsStack
:
:
EnqueueUpgradeReaction
(
Element
*
aElement
CustomElementDefinition
*
aDefinition
)
{
Enqueue
(
aElement
new
CustomElementUpgradeReaction
(
aDefinition
)
)
;
}
void
CustomElementReactionsStack
:
:
EnqueueCallbackReaction
(
Element
*
aElement
UniquePtr
<
CustomElementCallback
>
aCustomElementCallback
)
{
Enqueue
(
aElement
new
CustomElementCallbackReaction
(
Move
(
aCustomElementCallback
)
)
)
;
}
void
CustomElementReactionsStack
:
:
Enqueue
(
Element
*
aElement
CustomElementReaction
*
aReaction
)
{
RefPtr
<
CustomElementData
>
elementData
=
aElement
-
>
GetCustomElementData
(
)
;
MOZ_ASSERT
(
elementData
"
CustomElementData
should
exist
"
)
;
if
(
mRecursionDepth
)
{
if
(
!
mIsElementQueuePushedForCurrentRecursionDepth
)
{
CreateAndPushElementQueue
(
)
;
}
MOZ_ASSERT
(
!
mReactionsStack
.
IsEmpty
(
)
)
;
mReactionsStack
.
LastElement
(
)
-
>
AppendElement
(
aElement
)
;
elementData
-
>
mReactionQueue
.
AppendElement
(
aReaction
)
;
return
;
}
MOZ_ASSERT
(
mReactionsStack
.
IsEmpty
(
)
"
custom
element
reactions
stack
should
be
empty
"
)
;
MOZ_ASSERT
(
!
aReaction
-
>
IsUpgradeReaction
(
)
|
|
nsContentUtils
:
:
IsChromeDoc
(
aElement
-
>
OwnerDoc
(
)
)
"
Upgrade
reaction
should
not
be
scheduled
to
backup
queue
"
"
except
when
Custom
Element
is
used
inside
XBL
(
in
chrome
)
.
"
)
;
mBackupQueue
.
AppendElement
(
aElement
)
;
elementData
-
>
mReactionQueue
.
AppendElement
(
aReaction
)
;
if
(
mIsBackupQueueProcessing
)
{
return
;
}
CycleCollectedJSContext
*
context
=
CycleCollectedJSContext
:
:
Get
(
)
;
RefPtr
<
BackupQueueMicroTask
>
bqmt
=
new
BackupQueueMicroTask
(
this
)
;
context
-
>
DispatchToMicroTask
(
bqmt
.
forget
(
)
)
;
}
void
CustomElementReactionsStack
:
:
InvokeBackupQueue
(
)
{
if
(
!
mBackupQueue
.
IsEmpty
(
)
)
{
InvokeReactions
(
&
mBackupQueue
nullptr
)
;
}
MOZ_ASSERT
(
mBackupQueue
.
IsEmpty
(
)
"
There
are
still
some
reactions
in
BackupQueue
not
being
consumed
!
?
!
"
)
;
}
void
CustomElementReactionsStack
:
:
InvokeReactions
(
ElementQueue
*
aElementQueue
nsIGlobalObject
*
aGlobal
)
{
Maybe
<
AutoEntryScript
>
aes
;
if
(
aGlobal
)
{
aes
.
emplace
(
aGlobal
"
custom
elements
reaction
invocation
"
)
;
}
for
(
uint32_t
i
=
0
;
i
<
aElementQueue
-
>
Length
(
)
;
+
+
i
)
{
Element
*
element
=
aElementQueue
-
>
ElementAt
(
i
)
;
MOZ_ASSERT
(
element
)
;
RefPtr
<
CustomElementData
>
elementData
=
element
-
>
GetCustomElementData
(
)
;
if
(
!
elementData
|
|
!
element
-
>
GetOwnerGlobal
(
)
)
{
continue
;
}
auto
&
reactions
=
elementData
-
>
mReactionQueue
;
for
(
uint32_t
j
=
0
;
j
<
reactions
.
Length
(
)
;
+
+
j
)
{
auto
reaction
(
Move
(
reactions
.
ElementAt
(
j
)
)
)
;
if
(
reaction
)
{
if
(
!
aGlobal
&
&
reaction
-
>
IsUpgradeReaction
(
)
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsChromeDoc
(
element
-
>
OwnerDoc
(
)
)
)
;
nsIGlobalObject
*
global
=
element
-
>
GetOwnerGlobal
(
)
;
MOZ_ASSERT
(
!
aes
)
;
aes
.
emplace
(
global
"
custom
elements
reaction
invocation
"
)
;
}
ErrorResult
rv
;
reaction
-
>
Invoke
(
element
rv
)
;
if
(
aes
)
{
JSContext
*
cx
=
aes
-
>
cx
(
)
;
if
(
rv
.
MaybeSetPendingException
(
cx
)
)
{
aes
-
>
ReportException
(
)
;
}
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
cx
)
)
;
if
(
!
aGlobal
&
&
reaction
-
>
IsUpgradeReaction
(
)
)
{
aes
.
reset
(
)
;
}
}
MOZ_ASSERT
(
!
rv
.
Failed
(
)
)
;
}
}
reactions
.
Clear
(
)
;
}
aElementQueue
-
>
Clear
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CustomElementDefinition
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CustomElementDefinition
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mConstructor
)
tmp
-
>
mCallbacks
=
nullptr
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
CustomElementDefinition
)
mozilla
:
:
dom
:
:
LifecycleCallbacks
*
callbacks
=
tmp
-
>
mCallbacks
.
get
(
)
;
if
(
callbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCallbacks
-
>
mAttributeChangedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAttributeChangedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mConnectedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCallbacks
-
>
mConnectedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mConnectedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mDisconnectedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCallbacks
-
>
mDisconnectedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mDisconnectedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mAdoptedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCallbacks
-
>
mAdoptedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAdoptedCallback
.
Value
(
)
)
;
}
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mConstructor
"
)
;
cb
.
NoteXPCOMChild
(
tmp
-
>
mConstructor
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
CustomElementDefinition
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
CustomElementDefinition
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
CustomElementDefinition
Release
)
CustomElementDefinition
:
:
CustomElementDefinition
(
nsAtom
*
aType
nsAtom
*
aLocalName
Function
*
aConstructor
nsTArray
<
RefPtr
<
nsAtom
>
>
&
&
aObservedAttributes
LifecycleCallbacks
*
aCallbacks
)
:
mType
(
aType
)
mLocalName
(
aLocalName
)
mConstructor
(
new
CustomElementConstructor
(
aConstructor
)
)
mObservedAttributes
(
Move
(
aObservedAttributes
)
)
mCallbacks
(
aCallbacks
)
{
}
}
}
