#
include
"
mozilla
/
dom
/
UIDirectionManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
SimpleEnumerator
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_ISUPPORTS
(
UIDirectionManager
nsIObserver
)
NS_IMETHODIMP
UIDirectionManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
NS_ENSURE_FALSE
(
strcmp
(
aTopic
"
intl
:
app
-
locales
-
changed
"
)
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
=
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
;
NS_ENSURE_TRUE
(
windowMediator
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
windowMediator
-
>
GetEnumerator
(
nullptr
getter_AddRefs
(
windowEnumerator
)
)
;
NS_ENSURE_TRUE
(
windowEnumerator
NS_ERROR_FAILURE
)
;
for
(
auto
&
elements
:
SimpleEnumerator
<
nsISupports
>
(
windowEnumerator
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
do_QueryInterface
(
elements
)
;
if
(
window
-
>
Closed
(
)
)
{
continue
;
}
RefPtr
<
BrowsingContext
>
context
=
window
-
>
GetBrowsingContext
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
context
)
;
if
(
context
-
>
IsDiscarded
(
)
)
{
continue
;
}
context
-
>
PreOrderWalk
(
[
]
(
BrowsingContext
*
aContext
)
{
if
(
dom
:
:
Document
*
doc
=
aContext
-
>
GetDocument
(
)
)
{
doc
-
>
ResetDocumentDirection
(
)
;
}
}
)
;
}
return
NS_OK
;
}
void
UIDirectionManager
:
:
Initialize
(
)
{
MOZ_ASSERT
(
!
gUIDirectionManager
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
UIDirectionManager
>
observer
=
new
UIDirectionManager
(
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
obs
)
)
{
return
;
}
obs
-
>
AddObserver
(
observer
"
intl
:
app
-
locales
-
changed
"
false
)
;
gUIDirectionManager
=
observer
;
}
void
UIDirectionManager
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gUIDirectionManager
)
{
return
;
}
RefPtr
<
UIDirectionManager
>
observer
=
gUIDirectionManager
;
gUIDirectionManager
=
nullptr
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
obs
)
{
return
;
}
obs
-
>
RemoveObserver
(
observer
"
intl
:
app
-
locales
-
changed
"
)
;
}
mozilla
:
:
StaticRefPtr
<
UIDirectionManager
>
UIDirectionManager
:
:
gUIDirectionManager
;
}
