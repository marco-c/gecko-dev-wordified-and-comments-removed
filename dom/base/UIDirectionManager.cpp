#
include
"
mozilla
/
dom
/
UIDirectionManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
SimpleEnumerator
.
h
"
namespace
mozilla
{
namespace
dom
{
void
OnPrefChange
(
const
char
*
aPrefName
void
*
)
{
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
=
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
;
NS_ENSURE_TRUE_VOID
(
windowMediator
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
windowMediator
-
>
GetEnumerator
(
nullptr
getter_AddRefs
(
windowEnumerator
)
)
;
NS_ENSURE_TRUE_VOID
(
windowEnumerator
)
;
for
(
auto
&
elements
:
SimpleEnumerator
<
nsISupports
>
(
windowEnumerator
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
do_QueryInterface
(
elements
)
;
if
(
window
-
>
Closed
(
)
)
{
continue
;
}
RefPtr
<
BrowsingContext
>
context
=
window
-
>
GetBrowsingContext
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
context
)
;
if
(
context
-
>
IsDiscarded
(
)
)
{
continue
;
}
context
-
>
PreOrderWalk
(
[
]
(
BrowsingContext
*
aContext
)
{
if
(
dom
:
:
Document
*
doc
=
aContext
-
>
GetDocument
(
)
)
{
doc
-
>
ResetDocumentDirection
(
)
;
}
}
)
;
}
}
void
UIDirectionManager
:
:
Initialize
(
)
{
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
RegisterCallback
(
OnPrefChange
"
intl
.
uidirection
"
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
observe
\
"
intl
.
uidirection
\
"
"
)
;
rv
=
Preferences
:
:
RegisterCallback
(
OnPrefChange
"
intl
.
l10n
.
pseudo
"
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
observe
\
"
intl
.
l10n
.
pseudo
\
"
"
)
;
}
void
UIDirectionManager
:
:
Shutdown
(
)
{
Preferences
:
:
UnregisterCallback
(
OnPrefChange
"
intl
.
uidirection
"
)
;
Preferences
:
:
UnregisterCallback
(
OnPrefChange
"
intl
.
l10n
.
pseudo
"
)
;
}
}
}
