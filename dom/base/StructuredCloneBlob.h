#
ifndef
mozilla_dom_StructuredCloneBlob_h
#
define
mozilla_dom_StructuredCloneBlob_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolderBinding
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
namespace
dom
{
class
StructuredCloneBlob
:
public
StructuredCloneHolder
public
RefCounted
<
StructuredCloneBlob
>
{
public
:
explicit
StructuredCloneBlob
(
)
;
static
JSObject
*
ReadStructuredClone
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
)
;
bool
WriteStructuredClone
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
)
;
static
already_AddRefed
<
StructuredCloneBlob
>
Constructor
(
GlobalObject
&
aGlobal
JS
:
:
HandleValue
aValue
JS
:
:
HandleObject
aTargetGlobal
ErrorResult
&
aRv
)
;
void
Deserialize
(
JSContext
*
aCx
JS
:
:
HandleObject
aTargetScope
JS
:
:
MutableHandleValue
aResult
ErrorResult
&
aRv
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
nullptr
;
}
JSObject
*
GetWrapper
(
)
const
{
return
nullptr
;
}
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandleObject
aResult
)
;
protected
:
template
<
typename
T
detail
:
:
RefCountAtomicity
>
friend
class
detail
:
:
RefCounted
;
~
StructuredCloneBlob
(
)
=
default
;
private
:
bool
ReadStructuredCloneInternal
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
)
;
}
;
}
}
#
endif
