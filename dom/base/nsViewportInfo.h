#
ifndef
nsViewportInfo_h___
#
define
nsViewportInfo_h___
#
include
<
algorithm
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPrefs_apz
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
:
:
dom
{
enum
class
ViewportFitType
:
uint8_t
{
Auto
Contain
Cover
}
;
}
static
const
mozilla
:
:
CSSIntSize
kViewportMinSize
(
200
40
)
;
static
const
mozilla
:
:
CSSIntSize
kViewportMaxSize
(
10000
10000
)
;
inline
mozilla
:
:
LayoutDeviceToScreenScale
ViewportMinScale
(
)
{
return
mozilla
:
:
LayoutDeviceToScreenScale
(
std
:
:
max
(
mozilla
:
:
StaticPrefs
:
:
apz_min_zoom
(
)
0
.
1f
)
)
;
}
inline
mozilla
:
:
LayoutDeviceToScreenScale
ViewportMaxScale
(
)
{
return
mozilla
:
:
LayoutDeviceToScreenScale
(
std
:
:
min
(
mozilla
:
:
StaticPrefs
:
:
apz_max_zoom
(
)
100
.
0f
)
)
;
}
class
MOZ_STACK_CLASS
nsViewportInfo
{
public
:
enum
class
AutoSizeFlag
{
AutoSize
FixedSize
}
;
enum
class
AutoScaleFlag
{
AutoScale
FixedScale
}
;
enum
class
ZoomFlag
{
AllowZoom
DisallowZoom
}
;
enum
class
ZoomBehaviour
{
Mobile
Desktop
}
;
nsViewportInfo
(
const
mozilla
:
:
ScreenIntSize
&
aDisplaySize
const
mozilla
:
:
CSSToScreenScale
&
aDefaultZoom
ZoomFlag
aZoomFlag
ZoomBehaviour
aBehaviour
)
:
mDefaultZoom
(
aDefaultZoom
)
mViewportFit
(
mozilla
:
:
dom
:
:
ViewportFitType
:
:
Auto
)
mDefaultZoomValid
(
true
)
mAutoSize
(
true
)
mAllowZoom
(
aZoomFlag
=
=
ZoomFlag
:
:
AllowZoom
)
{
mSize
=
mozilla
:
:
ScreenSize
(
aDisplaySize
)
/
mDefaultZoom
;
mozilla
:
:
CSSToLayoutDeviceScale
pixelRatio
(
1
.
0f
)
;
if
(
aBehaviour
=
=
ZoomBehaviour
:
:
Desktop
)
{
mMinZoom
=
aDefaultZoom
;
}
else
{
mMinZoom
=
pixelRatio
*
ViewportMinScale
(
)
;
}
mMaxZoom
=
pixelRatio
*
ViewportMaxScale
(
)
;
ConstrainViewportValues
(
)
;
}
nsViewportInfo
(
const
mozilla
:
:
CSSToScreenScale
&
aDefaultZoom
const
mozilla
:
:
CSSToScreenScale
&
aMinZoom
const
mozilla
:
:
CSSToScreenScale
&
aMaxZoom
const
mozilla
:
:
CSSSize
&
aSize
AutoSizeFlag
aAutoSizeFlag
AutoScaleFlag
aAutoScaleFlag
ZoomFlag
aZoomFlag
mozilla
:
:
dom
:
:
ViewportFitType
aViewportFit
)
:
mDefaultZoom
(
aDefaultZoom
)
mMinZoom
(
aMinZoom
)
mMaxZoom
(
aMaxZoom
)
mSize
(
aSize
)
mViewportFit
(
aViewportFit
)
mDefaultZoomValid
(
aAutoScaleFlag
!
=
AutoScaleFlag
:
:
AutoScale
)
mAutoSize
(
aAutoSizeFlag
=
=
AutoSizeFlag
:
:
AutoSize
)
mAllowZoom
(
aZoomFlag
=
=
ZoomFlag
:
:
AllowZoom
)
{
ConstrainViewportValues
(
)
;
}
bool
IsDefaultZoomValid
(
)
const
{
return
mDefaultZoomValid
;
}
mozilla
:
:
CSSToScreenScale
GetDefaultZoom
(
)
const
{
return
mDefaultZoom
;
}
mozilla
:
:
CSSToScreenScale
GetMinZoom
(
)
const
{
return
mMinZoom
;
}
mozilla
:
:
CSSToScreenScale
GetMaxZoom
(
)
const
{
return
mMaxZoom
;
}
mozilla
:
:
CSSSize
GetSize
(
)
const
{
return
mSize
;
}
bool
IsAutoSizeEnabled
(
)
const
{
return
mAutoSize
;
}
bool
IsZoomAllowed
(
)
const
{
return
mAllowZoom
;
}
mozilla
:
:
dom
:
:
ViewportFitType
GetViewportFit
(
)
const
{
return
mViewportFit
;
}
static
constexpr
float
kAuto
=
-
1
.
0f
;
static
constexpr
float
kExtendToZoom
=
-
2
.
0f
;
static
constexpr
float
kDeviceSize
=
-
3
.
0f
;
static
const
float
&
Max
(
const
float
&
aA
const
float
&
aB
)
;
static
const
float
&
Min
(
const
float
&
aA
const
float
&
aB
)
;
private
:
void
ConstrainViewportValues
(
)
;
mozilla
:
:
CSSToScreenScale
mDefaultZoom
;
mozilla
:
:
CSSToScreenScale
mMinZoom
;
mozilla
:
:
CSSToScreenScale
mMaxZoom
;
mozilla
:
:
CSSSize
mSize
;
mozilla
:
:
dom
:
:
ViewportFitType
mViewportFit
;
bool
mDefaultZoomValid
;
bool
mAutoSize
;
bool
mAllowZoom
;
}
;
#
endif
