#
include
"
FuzzingFunctions
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
mozilla
/
dom
/
KeyboardEvent
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Fuzzing
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
TextInputProcessor
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIAccessibilityService
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
xpcAccessibilityService
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
nsITimer
.
h
"
#
ifdef
FUZZING_SNAPSHOT
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
endif
namespace
mozilla
:
:
dom
{
void
FuzzingFunctions
:
:
GarbageCollect
(
const
GlobalObject
&
)
{
nsJSContext
:
:
GarbageCollectNow
(
JS
:
:
GCReason
:
:
COMPONENT_UTILS
nsJSContext
:
:
NonShrinkingGC
)
;
}
void
FuzzingFunctions
:
:
GarbageCollectCompacting
(
const
GlobalObject
&
)
{
nsJSContext
:
:
GarbageCollectNow
(
JS
:
:
GCReason
:
:
COMPONENT_UTILS
nsJSContext
:
:
ShrinkingGC
)
;
}
void
FuzzingFunctions
:
:
Crash
(
const
GlobalObject
&
aGlobalObject
const
nsAString
&
aKeyValue
)
{
char
msgbuf
[
250
]
;
SprintfLiteral
(
msgbuf
"
%
s
"
NS_ConvertUTF16toUTF8
(
aKeyValue
)
.
get
(
)
)
;
if
(
aKeyValue
.
Length
(
)
>
=
sizeof
(
msgbuf
)
)
{
strcpy
(
&
msgbuf
[
sizeof
(
msgbuf
)
-
4
]
"
.
.
.
"
)
;
}
MOZ_CRASH_UNSAFE_PRINTF
(
"
%
s
"
msgbuf
)
;
}
void
FuzzingFunctions
:
:
CycleCollect
(
const
GlobalObject
&
)
{
nsJSContext
:
:
CycleCollectNow
(
CCReason
:
:
API
)
;
}
void
FuzzingFunctions
:
:
MemoryPressure
(
const
GlobalObject
&
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
os
-
>
NotifyObservers
(
nullptr
"
memory
-
pressure
"
u
"
heap
-
minimize
"
)
;
}
void
FuzzingFunctions
:
:
SignalIPCReady
(
const
GlobalObject
&
)
{
#
ifdef
FUZZING_SNAPSHOT
ContentChild
:
:
GetSingleton
(
)
-
>
SendSignalFuzzingReady
(
)
;
#
endif
}
void
FuzzingFunctions
:
:
EnableAccessibility
(
const
GlobalObject
&
ErrorResult
&
aRv
)
{
RefPtr
<
nsIAccessibilityService
>
a11y
;
nsresult
rv
;
rv
=
NS_GetAccessibilityService
(
getter_AddRefs
(
a11y
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
struct
ModifierKey
final
{
Modifier
mModifier
;
KeyNameIndex
mKeyNameIndex
;
bool
mLockable
;
ModifierKey
(
Modifier
aModifier
KeyNameIndex
aKeyNameIndex
bool
aLockable
)
:
mModifier
(
aModifier
)
mKeyNameIndex
(
aKeyNameIndex
)
mLockable
(
aLockable
)
{
}
}
;
MOZ_RUNINIT
static
const
ModifierKey
kModifierKeys
[
]
=
{
ModifierKey
(
MODIFIER_ALT
KEY_NAME_INDEX_Alt
false
)
ModifierKey
(
MODIFIER_ALTGRAPH
KEY_NAME_INDEX_AltGraph
false
)
ModifierKey
(
MODIFIER_CONTROL
KEY_NAME_INDEX_Control
false
)
ModifierKey
(
MODIFIER_FN
KEY_NAME_INDEX_Fn
false
)
ModifierKey
(
MODIFIER_META
KEY_NAME_INDEX_Meta
false
)
ModifierKey
(
MODIFIER_SHIFT
KEY_NAME_INDEX_Shift
false
)
ModifierKey
(
MODIFIER_SYMBOL
KEY_NAME_INDEX_Symbol
false
)
ModifierKey
(
MODIFIER_CAPSLOCK
KEY_NAME_INDEX_CapsLock
true
)
ModifierKey
(
MODIFIER_FNLOCK
KEY_NAME_INDEX_FnLock
true
)
ModifierKey
(
MODIFIER_NUMLOCK
KEY_NAME_INDEX_NumLock
true
)
ModifierKey
(
MODIFIER_SCROLLLOCK
KEY_NAME_INDEX_ScrollLock
true
)
ModifierKey
(
MODIFIER_SYMBOLLOCK
KEY_NAME_INDEX_SymbolLock
true
)
}
;
Modifiers
FuzzingFunctions
:
:
ActivateModifiers
(
TextInputProcessor
*
aTextInputProcessor
Modifiers
aModifiers
nsIWidget
*
aWidget
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aTextInputProcessor
)
;
if
(
aModifiers
=
=
MODIFIER_NONE
)
{
return
MODIFIER_NONE
;
}
uint32_t
flags
=
nsITextInputProcessor
:
:
KEY_NON_PRINTABLE_KEY
|
nsITextInputProcessor
:
:
KEY_DONT_DISPATCH_MODIFIER_KEY_EVENT
;
Modifiers
activatedModifiers
=
MODIFIER_NONE
;
Modifiers
activeModifiers
=
aTextInputProcessor
-
>
GetActiveModifiers
(
)
;
for
(
const
ModifierKey
&
kModifierKey
:
kModifierKeys
)
{
if
(
!
(
kModifierKey
.
mModifier
&
aModifiers
)
)
{
continue
;
}
if
(
kModifierKey
.
mModifier
&
activeModifiers
)
{
continue
;
}
WidgetKeyboardEvent
event
(
true
eVoidEvent
aWidget
)
;
event
.
mKeyNameIndex
=
kModifierKey
.
mKeyNameIndex
;
aRv
=
aTextInputProcessor
-
>
Keydown
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
activatedModifiers
;
}
if
(
kModifierKey
.
mLockable
)
{
aRv
=
aTextInputProcessor
-
>
Keyup
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
activatedModifiers
;
}
}
activatedModifiers
|
=
kModifierKey
.
mModifier
;
}
return
activatedModifiers
;
}
Modifiers
FuzzingFunctions
:
:
InactivateModifiers
(
TextInputProcessor
*
aTextInputProcessor
Modifiers
aModifiers
nsIWidget
*
aWidget
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aTextInputProcessor
)
;
if
(
aModifiers
=
=
MODIFIER_NONE
)
{
return
MODIFIER_NONE
;
}
uint32_t
flags
=
nsITextInputProcessor
:
:
KEY_NON_PRINTABLE_KEY
|
nsITextInputProcessor
:
:
KEY_DONT_DISPATCH_MODIFIER_KEY_EVENT
;
Modifiers
inactivatedModifiers
=
MODIFIER_NONE
;
Modifiers
activeModifiers
=
aTextInputProcessor
-
>
GetActiveModifiers
(
)
;
for
(
const
ModifierKey
&
kModifierKey
:
kModifierKeys
)
{
if
(
!
(
kModifierKey
.
mModifier
&
aModifiers
)
)
{
continue
;
}
if
(
kModifierKey
.
mModifier
&
activeModifiers
)
{
continue
;
}
WidgetKeyboardEvent
event
(
true
eVoidEvent
aWidget
)
;
event
.
mKeyNameIndex
=
kModifierKey
.
mKeyNameIndex
;
if
(
kModifierKey
.
mLockable
)
{
aRv
=
aTextInputProcessor
-
>
Keydown
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
inactivatedModifiers
;
}
}
aRv
=
aTextInputProcessor
-
>
Keyup
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
inactivatedModifiers
;
}
inactivatedModifiers
|
=
kModifierKey
.
mModifier
;
}
return
inactivatedModifiers
;
}
void
FuzzingFunctions
:
:
SynthesizeKeyboardEvents
(
const
GlobalObject
&
aGlobalObject
const
nsAString
&
aKeyValue
const
KeyboardEventInit
&
aDict
ErrorResult
&
aRv
)
{
uint32_t
flags
=
0
;
WidgetKeyboardEvent
event
(
true
eVoidEvent
nullptr
)
;
event
.
mKeyCode
=
aDict
.
mKeyCode
;
event
.
mCharCode
=
0
;
event
.
mKeyNameIndex
=
WidgetKeyboardEvent
:
:
GetKeyNameIndex
(
aKeyValue
)
;
if
(
event
.
mKeyNameIndex
=
=
KEY_NAME_INDEX_USE_STRING
)
{
event
.
mKeyValue
=
aKeyValue
;
}
event
.
mCodeNameIndex
=
aDict
.
mCode
.
IsEmpty
(
)
?
CODE_NAME_INDEX_UNKNOWN
:
WidgetKeyboardEvent
:
:
GetCodeNameIndex
(
aDict
.
mCode
)
;
if
(
NS_WARN_IF
(
event
.
mCodeNameIndex
=
=
CODE_NAME_INDEX_USE_STRING
)
)
{
aRv
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
event
.
mLocation
=
aDict
.
mLocation
;
event
.
mIsRepeat
=
aDict
.
mRepeat
;
#
define
SET_MODIFIER
(
aName
aValue
)
\
if
(
aDict
.
m
#
#
aName
)
{
\
event
.
mModifiers
|
=
aValue
;
\
}
SET_MODIFIER
(
CtrlKey
MODIFIER_CONTROL
)
SET_MODIFIER
(
ShiftKey
MODIFIER_SHIFT
)
SET_MODIFIER
(
AltKey
MODIFIER_ALT
)
SET_MODIFIER
(
MetaKey
MODIFIER_META
)
SET_MODIFIER
(
ModifierAltGraph
MODIFIER_ALTGRAPH
)
SET_MODIFIER
(
ModifierCapsLock
MODIFIER_CAPSLOCK
)
SET_MODIFIER
(
ModifierFn
MODIFIER_FN
)
SET_MODIFIER
(
ModifierFnLock
MODIFIER_FNLOCK
)
SET_MODIFIER
(
ModifierNumLock
MODIFIER_NUMLOCK
)
SET_MODIFIER
(
ModifierScrollLock
MODIFIER_SCROLLLOCK
)
SET_MODIFIER
(
ModifierSymbol
MODIFIER_SYMBOL
)
SET_MODIFIER
(
ModifierSymbolLock
MODIFIER_SYMBOLLOCK
)
#
undef
SET_MODIFIER
Maybe
<
uint32_t
>
maybeNonStandardLocation
;
if
(
!
event
.
mLocation
)
{
maybeNonStandardLocation
=
mozilla
:
:
Some
(
event
.
mLocation
)
;
}
if
(
event
.
mKeyNameIndex
=
=
KEY_NAME_INDEX_USE_STRING
)
{
if
(
event
.
mCodeNameIndex
=
=
CODE_NAME_INDEX_UNKNOWN
)
{
event
.
mCodeNameIndex
=
TextInputProcessor
:
:
GuessCodeNameIndexOfPrintableKeyInUSEnglishLayout
(
event
.
mKeyValue
maybeNonStandardLocation
)
;
MOZ_ASSERT
(
event
.
mCodeNameIndex
!
=
CODE_NAME_INDEX_USE_STRING
)
;
}
if
(
!
event
.
mKeyCode
)
{
event
.
mKeyCode
=
TextInputProcessor
:
:
GuessKeyCodeOfPrintableKeyInUSEnglishLayout
(
event
.
mKeyValue
maybeNonStandardLocation
)
;
if
(
!
event
.
mKeyCode
)
{
flags
|
=
nsITextInputProcessor
:
:
KEY_KEEP_KEYCODE_ZERO
;
}
}
}
else
if
(
event
.
mCodeNameIndex
=
=
CODE_NAME_INDEX_UNKNOWN
)
{
event
.
mCodeNameIndex
=
WidgetKeyboardEvent
:
:
ComputeCodeNameIndexFromKeyNameIndex
(
event
.
mKeyNameIndex
maybeNonStandardLocation
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
windowInner
=
do_QueryInterface
(
aGlobalObject
.
GetAsSupports
(
)
)
;
if
(
!
windowInner
)
{
aRv
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
;
}
nsPIDOMWindowOuter
*
inProcessTopWindowOuter
=
windowInner
-
>
GetInProcessScriptableTop
(
)
;
if
(
NS_WARN_IF
(
!
inProcessTopWindowOuter
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIDocShell
*
docShell
=
inProcessTopWindowOuter
-
>
GetDocShell
(
)
;
if
(
NS_WARN_IF
(
!
docShell
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
nsPresContext
>
presContext
=
docShell
-
>
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
event
.
mWidget
=
presContext
-
>
GetRootWidget
(
)
;
if
(
NS_WARN_IF
(
!
event
.
mWidget
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
inProcessTopWindowInner
=
inProcessTopWindowOuter
-
>
EnsureInnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
inProcessTopWindowInner
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
TextInputProcessor
>
textInputProcessor
=
new
TextInputProcessor
(
)
;
bool
beganInputTransaction
=
false
;
aRv
=
textInputProcessor
-
>
BeginInputTransactionForFuzzing
(
inProcessTopWindowInner
nullptr
&
beganInputTransaction
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
if
(
NS_WARN_IF
(
!
beganInputTransaction
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
Modifiers
activatedModifiers
=
ActivateModifiers
(
textInputProcessor
event
.
mModifiers
MOZ_KnownLive
(
event
.
mWidget
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
aRv
=
textInputProcessor
-
>
Keydown
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
aRv
=
textInputProcessor
-
>
Keyup
(
event
flags
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
InactivateModifiers
(
textInputProcessor
activatedModifiers
MOZ_KnownLive
(
event
.
mWidget
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
}
static
void
SpinEventLoopForCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
*
static_cast
<
bool
*
>
(
aClosure
)
=
true
;
}
void
FuzzingFunctions
:
:
SpinEventLoopFor
(
const
GlobalObject
&
uint32_t
aMilliseconds
)
{
bool
didRun
=
false
;
nsCOMPtr
<
nsITimer
>
timer
=
NS_NewTimer
(
)
;
nsresult
rv
=
timer
-
>
InitWithNamedFuncCallback
(
SpinEventLoopForCallback
&
didRun
aMilliseconds
nsITimer
:
:
TYPE_ONE_SHOT
"
FuzzingFunctions
:
:
SpinEventLoopFor
"
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SpinEventLoopUntil
(
"
FuzzingFunctions
:
:
SpinEventLoopFor
"
_ns
[
&
]
(
)
{
return
didRun
;
}
)
;
timer
-
>
Cancel
(
)
;
}
}
