#
ifndef
mozilla_dom_Highlight_h
#
define
mozilla_dom_Highlight_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
HighlightBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsFrameSelection
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
ErrorResult
;
}
namespace
mozilla
:
:
dom
{
class
AbstractRange
;
class
Document
;
class
HighlightRegistry
;
class
Selection
;
class
Highlight
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
Highlight
)
protected
:
MOZ_CAN_RUN_SCRIPT
Highlight
(
const
Sequence
<
OwningNonNull
<
AbstractRange
>
>
&
aInitialRanges
nsPIDOMWindowInner
*
aWindow
ErrorResult
&
aRv
)
;
~
Highlight
(
)
=
default
;
public
:
void
AddToHighlightRegistry
(
HighlightRegistry
&
aHighlightRegistry
const
nsAtom
&
aHighlightName
)
;
void
RemoveFromHighlightRegistry
(
HighlightRegistry
&
aHighlightRegistry
const
nsAtom
&
aHighlightName
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Selection
>
CreateHighlightSelection
(
const
nsAtom
*
aHighlightName
nsFrameSelection
*
aFrameSelection
ErrorResult
&
aRv
)
const
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
MOZ_CAN_RUN_SCRIPT_BOUNDARY
already_AddRefed
<
Highlight
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Sequence
<
OwningNonNull
<
AbstractRange
>
>
&
aInitialRanges
ErrorResult
&
aRv
)
;
int32_t
Priority
(
)
const
{
return
mPriority
;
}
void
SetPriority
(
int32_t
aPriority
)
{
mPriority
=
aPriority
;
}
HighlightType
Type
(
)
const
{
return
mHighlightType
;
}
void
SetType
(
HighlightType
aHighlightType
)
{
mHighlightType
=
aHighlightType
;
}
MOZ_CAN_RUN_SCRIPT
void
Add
(
AbstractRange
&
aRange
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Clear
(
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
bool
Delete
(
AbstractRange
&
aRange
ErrorResult
&
aRv
)
;
private
:
RefPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsTArray
<
RefPtr
<
AbstractRange
>
>
mRanges
;
HighlightType
mHighlightType
{
HighlightType
:
:
Highlight
}
;
int32_t
mPriority
{
0
}
;
nsTHashMap
<
nsPtrHashKey
<
HighlightRegistry
>
nsTHashSet
<
nsRefPtrHashKey
<
const
nsAtom
>
>
>
mHighlightRegistries
;
}
;
}
#
endif
