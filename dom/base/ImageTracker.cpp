#
include
"
ImageTracker
.
h
"
namespace
mozilla
{
namespace
dom
{
ImageTracker
:
:
ImageTracker
(
)
:
mLocking
(
false
)
mAnimating
(
true
)
{
}
ImageTracker
:
:
~
ImageTracker
(
)
{
SetLockingState
(
false
)
;
}
nsresult
ImageTracker
:
:
Add
(
imgIRequest
*
aImage
)
{
MOZ_ASSERT
(
aImage
)
;
uint32_t
oldCount
=
0
;
mImages
.
Get
(
aImage
&
oldCount
)
;
mImages
.
Put
(
aImage
oldCount
+
1
)
;
nsresult
rv
=
NS_OK
;
if
(
oldCount
=
=
0
&
&
mLocking
)
{
rv
=
aImage
-
>
LockImage
(
)
;
}
if
(
oldCount
=
=
0
&
&
mAnimating
)
{
nsresult
rv2
=
aImage
-
>
IncrementAnimationConsumers
(
)
;
rv
=
NS_SUCCEEDED
(
rv
)
?
rv2
:
rv
;
}
return
rv
;
}
nsresult
ImageTracker
:
:
Remove
(
imgIRequest
*
aImage
uint32_t
aFlags
)
{
NS_ENSURE_ARG_POINTER
(
aImage
)
;
uint32_t
count
=
0
;
DebugOnly
<
bool
>
found
=
mImages
.
Get
(
aImage
&
count
)
;
MOZ_ASSERT
(
found
"
Removing
image
that
wasn
'
t
in
the
tracker
!
"
)
;
MOZ_ASSERT
(
count
>
0
"
Entry
in
the
cache
tracker
with
count
0
!
"
)
;
count
-
-
;
if
(
count
!
=
0
)
{
mImages
.
Put
(
aImage
count
)
;
return
NS_OK
;
}
mImages
.
Remove
(
aImage
)
;
nsresult
rv
=
NS_OK
;
if
(
mLocking
)
{
rv
=
aImage
-
>
UnlockImage
(
)
;
}
if
(
mAnimating
)
{
nsresult
rv2
=
aImage
-
>
DecrementAnimationConsumers
(
)
;
rv
=
NS_SUCCEEDED
(
rv
)
?
rv2
:
rv
;
}
if
(
aFlags
&
REQUEST_DISCARD
)
{
aImage
-
>
RequestDiscard
(
)
;
}
return
rv
;
}
nsresult
ImageTracker
:
:
SetLockingState
(
bool
aLocked
)
{
if
(
XRE_IsContentProcess
(
)
&
&
!
Preferences
:
:
GetBool
(
"
image
.
mem
.
allow_locking_in_content_processes
"
true
)
)
{
return
NS_OK
;
}
if
(
mLocking
=
=
aLocked
)
return
NS_OK
;
for
(
auto
iter
=
mImages
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
imgIRequest
*
image
=
iter
.
Key
(
)
;
if
(
aLocked
)
{
image
-
>
LockImage
(
)
;
}
else
{
image
-
>
UnlockImage
(
)
;
}
}
mLocking
=
aLocked
;
return
NS_OK
;
}
void
ImageTracker
:
:
SetAnimatingState
(
bool
aAnimating
)
{
if
(
mAnimating
=
=
aAnimating
)
return
;
for
(
auto
iter
=
mImages
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
imgIRequest
*
image
=
iter
.
Key
(
)
;
if
(
aAnimating
)
{
image
-
>
IncrementAnimationConsumers
(
)
;
}
else
{
image
-
>
DecrementAnimationConsumers
(
)
;
}
}
mAnimating
=
aAnimating
;
}
void
ImageTracker
:
:
RequestDiscardAll
(
)
{
for
(
auto
iter
=
mImages
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Key
(
)
-
>
RequestDiscard
(
)
;
}
}
}
}
