#
ifndef
nsMimeTypeArray_h___
#
define
nsMimeTypeArray_h___
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
class
nsMimeType
;
class
nsPluginElement
;
class
nsMimeTypeArray
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
nsMimeTypeArray
(
nsPIDOMWindowInner
*
aWindow
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
nsMimeTypeArray
)
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsMimeType
*
Item
(
uint32_t
index
)
{
return
nullptr
;
}
nsMimeType
*
NamedItem
(
const
nsAString
&
name
)
{
return
nullptr
;
}
nsMimeType
*
IndexedGetter
(
uint32_t
index
bool
&
found
)
{
return
nullptr
;
}
nsMimeType
*
NamedGetter
(
const
nsAString
&
name
bool
&
found
)
{
return
nullptr
;
}
uint32_t
Length
(
)
{
return
0
;
}
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
retval
)
{
}
protected
:
virtual
~
nsMimeTypeArray
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
}
;
class
nsMimeType
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
nsMimeType
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
nsMimeType
)
nsMimeType
(
)
=
delete
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
return
nullptr
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
return
nullptr
;
}
void
GetDescription
(
nsString
&
retval
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
}
nsPluginElement
*
GetEnabledPlugin
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
return
nullptr
;
}
void
GetSuffixes
(
nsString
&
retval
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
}
void
GetType
(
nsString
&
retval
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
nsMimeType
can
not
exist
"
)
;
}
protected
:
virtual
~
nsMimeType
(
)
=
default
;
}
;
#
endif
