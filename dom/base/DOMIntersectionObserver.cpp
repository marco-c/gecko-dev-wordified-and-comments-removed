#
include
"
DOMIntersectionObserver
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
dom
/
HTMLImageElement
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
:
:
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DOMIntersectionObserverEntry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DOMIntersectionObserverEntry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DOMIntersectionObserverEntry
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
DOMIntersectionObserverEntry
mOwner
mRootBounds
mBoundingClientRect
mIntersectionRect
mTarget
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DOMIntersectionObserver
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_ENTRY
(
DOMIntersectionObserver
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
tmp
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mOwner
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocument
)
if
(
tmp
-
>
mCallback
.
is
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
)
{
ImplCycleCollectionUnlink
(
tmp
-
>
mCallback
.
as
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRoot
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mQueuedEntries
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
DOMIntersectionObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mOwner
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
)
if
(
tmp
-
>
mCallback
.
is
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
)
{
ImplCycleCollectionTraverse
(
cb
tmp
-
>
mCallback
.
as
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
"
mCallback
"
0
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRoot
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mQueuedEntries
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
DOMIntersectionObserver
:
:
DOMIntersectionObserver
(
already_AddRefed
<
nsPIDOMWindowInner
>
&
&
aOwner
dom
:
:
IntersectionCallback
&
aCb
)
:
mOwner
(
aOwner
)
mDocument
(
mOwner
-
>
GetExtantDoc
(
)
)
mCallback
(
RefPtr
<
dom
:
:
IntersectionCallback
>
(
&
aCb
)
)
mConnected
(
false
)
{
}
already_AddRefed
<
DOMIntersectionObserver
>
DOMIntersectionObserver
:
:
Constructor
(
const
GlobalObject
&
aGlobal
dom
:
:
IntersectionCallback
&
aCb
ErrorResult
&
aRv
)
{
return
Constructor
(
aGlobal
aCb
IntersectionObserverInit
(
)
aRv
)
;
}
already_AddRefed
<
DOMIntersectionObserver
>
DOMIntersectionObserver
:
:
Constructor
(
const
GlobalObject
&
aGlobal
dom
:
:
IntersectionCallback
&
aCb
const
IntersectionObserverInit
&
aOptions
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
window
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
DOMIntersectionObserver
>
observer
=
new
DOMIntersectionObserver
(
window
.
forget
(
)
aCb
)
;
if
(
!
aOptions
.
mRoot
.
IsNull
(
)
)
{
if
(
aOptions
.
mRoot
.
Value
(
)
.
IsElement
(
)
)
{
observer
-
>
mRoot
=
aOptions
.
mRoot
.
Value
(
)
.
GetAsElement
(
)
;
}
else
{
MOZ_ASSERT
(
aOptions
.
mRoot
.
Value
(
)
.
IsDocument
(
)
)
;
observer
-
>
mRoot
=
aOptions
.
mRoot
.
Value
(
)
.
GetAsDocument
(
)
;
}
}
if
(
!
observer
-
>
SetRootMargin
(
aOptions
.
mRootMargin
)
)
{
aRv
.
ThrowSyntaxError
(
"
rootMargin
must
be
specified
in
pixels
or
percent
.
"
)
;
return
nullptr
;
}
if
(
aOptions
.
mThreshold
.
IsDoubleSequence
(
)
)
{
const
Sequence
<
double
>
&
thresholds
=
aOptions
.
mThreshold
.
GetAsDoubleSequence
(
)
;
observer
-
>
mThresholds
.
SetCapacity
(
thresholds
.
Length
(
)
)
;
for
(
const
auto
&
thresh
:
thresholds
)
{
if
(
thresh
<
0
.
0
|
|
thresh
>
1
.
0
)
{
aRv
.
ThrowRangeError
<
dom
:
:
MSG_THRESHOLD_RANGE_ERROR
>
(
)
;
return
nullptr
;
}
observer
-
>
mThresholds
.
AppendElement
(
thresh
)
;
}
observer
-
>
mThresholds
.
Sort
(
)
;
}
else
{
double
thresh
=
aOptions
.
mThreshold
.
GetAsDouble
(
)
;
if
(
thresh
<
0
.
0
|
|
thresh
>
1
.
0
)
{
aRv
.
ThrowRangeError
<
dom
:
:
MSG_THRESHOLD_RANGE_ERROR
>
(
)
;
return
nullptr
;
}
observer
-
>
mThresholds
.
AppendElement
(
thresh
)
;
}
return
observer
.
forget
(
)
;
}
static
void
LazyLoadCallback
(
const
Sequence
<
OwningNonNull
<
DOMIntersectionObserverEntry
>
>
&
aEntries
)
{
for
(
const
auto
&
entry
:
aEntries
)
{
MOZ_ASSERT
(
entry
-
>
Target
(
)
-
>
IsHTMLElement
(
nsGkAtoms
:
:
img
)
)
;
if
(
entry
-
>
IsIntersecting
(
)
)
{
static_cast
<
HTMLImageElement
*
>
(
entry
-
>
Target
(
)
)
-
>
StopLazyLoading
(
HTMLImageElement
:
:
FromIntersectionObserver
:
:
Yes
HTMLImageElement
:
:
StartLoading
:
:
Yes
)
;
}
}
}
static
void
LazyLoadCallbackReachViewport
(
const
Sequence
<
OwningNonNull
<
DOMIntersectionObserverEntry
>
>
&
aEntries
)
{
for
(
const
auto
&
entry
:
aEntries
)
{
MOZ_ASSERT
(
entry
-
>
Target
(
)
-
>
IsHTMLElement
(
nsGkAtoms
:
:
img
)
)
;
if
(
entry
-
>
IsIntersecting
(
)
)
{
static_cast
<
HTMLImageElement
*
>
(
entry
-
>
Target
(
)
)
-
>
LazyLoadImageReachedViewport
(
)
;
}
}
}
static
LengthPercentage
PrefMargin
(
float
aValue
bool
aIsPercentage
)
{
return
aIsPercentage
?
LengthPercentage
:
:
FromPercentage
(
aValue
/
100
.
0f
)
:
LengthPercentage
:
:
FromPixels
(
aValue
)
;
}
DOMIntersectionObserver
:
:
DOMIntersectionObserver
(
Document
&
aDocument
NativeCallback
aCallback
)
:
mOwner
(
aDocument
.
GetInnerWindow
(
)
)
mDocument
(
&
aDocument
)
mCallback
(
aCallback
)
mConnected
(
false
)
{
}
already_AddRefed
<
DOMIntersectionObserver
>
DOMIntersectionObserver
:
:
CreateLazyLoadObserver
(
Document
&
aDocument
)
{
RefPtr
<
DOMIntersectionObserver
>
observer
=
new
DOMIntersectionObserver
(
aDocument
LazyLoadCallback
)
;
observer
-
>
mThresholds
.
AppendElement
(
std
:
:
numeric_limits
<
double
>
:
:
min
(
)
)
;
#
define
SET_MARGIN
(
side_
side_lower_
)
\
observer
-
>
mRootMargin
.
Get
(
eSide
#
#
side_
)
=
PrefMargin
(
\
StaticPrefs
:
:
dom_image_lazy_loading_root_margin_
#
#
side_lower_
(
)
\
StaticPrefs
:
:
\
dom_image_lazy_loading_root_margin_
#
#
side_lower_
#
#
_percentage
(
)
)
;
SET_MARGIN
(
Top
top
)
;
SET_MARGIN
(
Right
right
)
;
SET_MARGIN
(
Bottom
bottom
)
;
SET_MARGIN
(
Left
left
)
;
#
undef
SET_MARGIN
return
observer
.
forget
(
)
;
}
already_AddRefed
<
DOMIntersectionObserver
>
DOMIntersectionObserver
:
:
CreateLazyLoadObserverViewport
(
Document
&
aDocument
)
{
RefPtr
<
DOMIntersectionObserver
>
observer
=
new
DOMIntersectionObserver
(
aDocument
LazyLoadCallbackReachViewport
)
;
observer
-
>
mThresholds
.
AppendElement
(
std
:
:
numeric_limits
<
double
>
:
:
min
(
)
)
;
return
observer
.
forget
(
)
;
}
bool
DOMIntersectionObserver
:
:
SetRootMargin
(
const
nsACString
&
aString
)
{
return
Servo_IntersectionObserverRootMargin_Parse
(
&
aString
&
mRootMargin
)
;
}
nsISupports
*
DOMIntersectionObserver
:
:
GetParentObject
(
)
const
{
return
mOwner
;
}
void
DOMIntersectionObserver
:
:
GetRootMargin
(
nsACString
&
aRetVal
)
{
Servo_IntersectionObserverRootMargin_ToString
(
&
mRootMargin
&
aRetVal
)
;
}
void
DOMIntersectionObserver
:
:
GetThresholds
(
nsTArray
<
double
>
&
aRetVal
)
{
aRetVal
=
mThresholds
.
Clone
(
)
;
}
void
DOMIntersectionObserver
:
:
Observe
(
Element
&
aTarget
)
{
if
(
!
mObservationTargetSet
.
EnsureInserted
(
&
aTarget
)
)
{
return
;
}
aTarget
.
RegisterIntersectionObserver
(
this
)
;
mObservationTargets
.
AppendElement
(
&
aTarget
)
;
MOZ_ASSERT
(
mObservationTargets
.
Length
(
)
=
=
mObservationTargetSet
.
Count
(
)
)
;
Connect
(
)
;
if
(
mDocument
)
{
if
(
nsPresContext
*
pc
=
mDocument
-
>
GetPresContext
(
)
)
{
pc
-
>
RefreshDriver
(
)
-
>
EnsureIntersectionObservationsUpdateHappens
(
)
;
}
}
}
void
DOMIntersectionObserver
:
:
Unobserve
(
Element
&
aTarget
)
{
if
(
!
mObservationTargetSet
.
EnsureRemoved
(
&
aTarget
)
)
{
return
;
}
mObservationTargets
.
RemoveElement
(
&
aTarget
)
;
aTarget
.
UnregisterIntersectionObserver
(
this
)
;
MOZ_ASSERT
(
mObservationTargets
.
Length
(
)
=
=
mObservationTargetSet
.
Count
(
)
)
;
if
(
mObservationTargets
.
IsEmpty
(
)
)
{
Disconnect
(
)
;
}
}
void
DOMIntersectionObserver
:
:
UnlinkTarget
(
Element
&
aTarget
)
{
mObservationTargets
.
RemoveElement
(
&
aTarget
)
;
mObservationTargetSet
.
Remove
(
&
aTarget
)
;
if
(
mObservationTargets
.
IsEmpty
(
)
)
{
Disconnect
(
)
;
}
}
void
DOMIntersectionObserver
:
:
Connect
(
)
{
if
(
mConnected
)
{
return
;
}
mConnected
=
true
;
if
(
mDocument
)
{
mDocument
-
>
AddIntersectionObserver
(
this
)
;
}
}
void
DOMIntersectionObserver
:
:
Disconnect
(
)
{
if
(
!
mConnected
)
{
return
;
}
mConnected
=
false
;
for
(
Element
*
target
:
mObservationTargets
)
{
target
-
>
UnregisterIntersectionObserver
(
this
)
;
}
mObservationTargets
.
Clear
(
)
;
mObservationTargetSet
.
Clear
(
)
;
if
(
mDocument
)
{
mDocument
-
>
RemoveIntersectionObserver
(
this
)
;
}
}
void
DOMIntersectionObserver
:
:
TakeRecords
(
nsTArray
<
RefPtr
<
DOMIntersectionObserverEntry
>
>
&
aRetVal
)
{
aRetVal
=
std
:
:
move
(
mQueuedEntries
)
;
}
static
Maybe
<
nsRect
>
EdgeInclusiveIntersection
(
const
nsRect
&
aRect
const
nsRect
&
aOtherRect
)
{
nscoord
left
=
std
:
:
max
(
aRect
.
x
aOtherRect
.
x
)
;
nscoord
top
=
std
:
:
max
(
aRect
.
y
aOtherRect
.
y
)
;
nscoord
right
=
std
:
:
min
(
aRect
.
XMost
(
)
aOtherRect
.
XMost
(
)
)
;
nscoord
bottom
=
std
:
:
min
(
aRect
.
YMost
(
)
aOtherRect
.
YMost
(
)
)
;
if
(
left
>
right
|
|
top
>
bottom
)
{
return
Nothing
(
)
;
}
return
Some
(
nsRect
(
left
top
right
-
left
bottom
-
top
)
)
;
}
enum
class
BrowsingContextOrigin
{
Similar
Different
}
;
static
BrowsingContextOrigin
SimilarOrigin
(
const
Element
&
aTarget
const
nsINode
*
aRoot
)
{
if
(
!
aRoot
)
{
return
BrowsingContextOrigin
:
:
Different
;
}
return
aTarget
.
OwnerDoc
(
)
-
>
GetDocGroup
(
)
=
=
aRoot
-
>
OwnerDoc
(
)
-
>
GetDocGroup
(
)
?
BrowsingContextOrigin
:
:
Similar
:
BrowsingContextOrigin
:
:
Different
;
}
static
Document
*
GetTopLevelContentDocumentInThisProcess
(
Document
&
aDocument
)
{
auto
*
wc
=
aDocument
.
GetTopLevelWindowContext
(
)
;
return
wc
?
wc
-
>
GetExtantDoc
(
)
:
nullptr
;
}
static
Maybe
<
nsRect
>
ComputeTheIntersection
(
nsIFrame
*
aTarget
nsIFrame
*
aRoot
const
nsRect
&
aRootBounds
const
Maybe
<
nsRect
>
&
aRemoteDocumentVisibleRect
)
{
nsIFrame
*
target
=
aTarget
;
Maybe
<
nsRect
>
intersectionRect
=
Some
(
nsLayoutUtils
:
:
GetAllInFlowRectsUnion
(
target
target
nsLayoutUtils
:
:
RECTS_ACCOUNT_FOR_TRANSFORMS
)
)
;
nsIFrame
*
containerFrame
=
nsLayoutUtils
:
:
GetCrossDocParentFrameInProcess
(
target
)
;
while
(
containerFrame
&
&
containerFrame
!
=
aRoot
)
{
if
(
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
containerFrame
)
)
{
if
(
containerFrame
-
>
GetParent
(
)
=
=
aRoot
&
&
!
aRoot
-
>
GetParent
(
)
)
{
break
;
}
nsRect
subFrameRect
=
scrollFrame
-
>
GetScrollPortRect
(
)
;
nsRect
intersectionRectRelativeToContainer
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
target
intersectionRect
.
value
(
)
containerFrame
)
;
intersectionRect
=
EdgeInclusiveIntersection
(
intersectionRectRelativeToContainer
subFrameRect
)
;
if
(
!
intersectionRect
)
{
return
Nothing
(
)
;
}
target
=
containerFrame
;
}
containerFrame
=
nsLayoutUtils
:
:
GetCrossDocParentFrameInProcess
(
containerFrame
)
;
}
MOZ_ASSERT
(
intersectionRect
)
;
nsRect
intersectionRectRelativeToRoot
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
target
intersectionRect
.
value
(
)
nsLayoutUtils
:
:
GetContainingBlockForClientRect
(
aRoot
)
)
;
intersectionRect
=
EdgeInclusiveIntersection
(
intersectionRectRelativeToRoot
aRootBounds
)
;
if
(
intersectionRect
.
isNothing
(
)
)
{
return
Nothing
(
)
;
}
nsRect
rect
=
intersectionRect
.
value
(
)
;
if
(
aTarget
-
>
PresContext
(
)
!
=
aRoot
-
>
PresContext
(
)
)
{
if
(
nsIFrame
*
rootScrollFrame
=
aTarget
-
>
PresShell
(
)
-
>
GetRootScrollFrame
(
)
)
{
nsLayoutUtils
:
:
TransformRect
(
aRoot
rootScrollFrame
rect
)
;
}
}
if
(
aRemoteDocumentVisibleRect
)
{
MOZ_ASSERT
(
aRoot
-
>
PresContext
(
)
-
>
IsRootContentDocumentInProcess
(
)
&
&
!
aRoot
-
>
PresContext
(
)
-
>
IsRootContentDocumentCrossProcess
(
)
)
;
intersectionRect
=
EdgeInclusiveIntersection
(
rect
*
aRemoteDocumentVisibleRect
)
;
if
(
intersectionRect
.
isNothing
(
)
)
{
return
Nothing
(
)
;
}
rect
=
intersectionRect
.
value
(
)
;
}
return
Some
(
rect
)
;
}
struct
OopIframeMetrics
{
nsIFrame
*
mInProcessRootFrame
=
nullptr
;
nsRect
mInProcessRootRect
;
nsRect
mRemoteDocumentVisibleRect
;
}
;
static
Maybe
<
OopIframeMetrics
>
GetOopIframeMetrics
(
Document
&
aDocument
Document
*
aRootDocument
)
{
Document
*
rootDoc
=
nsContentUtils
:
:
GetInProcessSubtreeRootDocument
(
&
aDocument
)
;
MOZ_ASSERT
(
rootDoc
)
;
if
(
rootDoc
-
>
IsTopLevelContentDocument
(
)
)
{
return
Nothing
(
)
;
}
if
(
aRootDocument
&
&
rootDoc
=
=
nsContentUtils
:
:
GetInProcessSubtreeRootDocument
(
aRootDocument
)
)
{
return
Nothing
(
)
;
}
PresShell
*
rootPresShell
=
rootDoc
-
>
GetPresShell
(
)
;
if
(
!
rootPresShell
|
|
rootPresShell
-
>
IsDestroying
(
)
)
{
return
Some
(
OopIframeMetrics
{
}
)
;
}
nsIFrame
*
inProcessRootFrame
=
rootPresShell
-
>
GetRootFrame
(
)
;
if
(
!
inProcessRootFrame
)
{
return
Some
(
OopIframeMetrics
{
}
)
;
}
BrowserChild
*
browserChild
=
BrowserChild
:
:
GetFrom
(
rootDoc
-
>
GetDocShell
(
)
)
;
if
(
!
browserChild
)
{
return
Some
(
OopIframeMetrics
{
}
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
browserChild
-
>
IsTopLevel
(
)
)
;
nsRect
inProcessRootRect
;
if
(
nsIScrollableFrame
*
scrollFrame
=
rootPresShell
-
>
GetRootScrollFrameAsScrollable
(
)
)
{
inProcessRootRect
=
scrollFrame
-
>
GetScrollPortRect
(
)
;
}
Maybe
<
LayoutDeviceRect
>
remoteDocumentVisibleRect
=
browserChild
-
>
GetTopLevelViewportVisibleRectInSelfCoords
(
)
;
if
(
!
remoteDocumentVisibleRect
)
{
return
Some
(
OopIframeMetrics
{
}
)
;
}
return
Some
(
OopIframeMetrics
{
inProcessRootFrame
inProcessRootRect
LayoutDeviceRect
:
:
ToAppUnits
(
*
remoteDocumentVisibleRect
rootPresShell
-
>
GetPresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
}
)
;
}
void
DOMIntersectionObserver
:
:
Update
(
Document
*
aDocument
DOMHighResTimeStamp
time
)
{
nsRect
rootRect
;
nsIFrame
*
rootFrame
=
nullptr
;
nsINode
*
root
=
mRoot
;
Maybe
<
nsRect
>
remoteDocumentVisibleRect
;
if
(
mRoot
&
&
mRoot
-
>
IsElement
(
)
)
{
if
(
(
rootFrame
=
mRoot
-
>
AsElement
(
)
-
>
GetPrimaryFrame
(
)
)
)
{
nsRect
rootRectRelativeToRootFrame
;
if
(
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
rootFrame
)
)
{
rootRectRelativeToRootFrame
=
scrollFrame
-
>
GetScrollPortRect
(
)
;
}
else
{
rootRectRelativeToRootFrame
=
rootFrame
-
>
GetRectRelativeToSelf
(
)
;
}
nsIFrame
*
containingBlock
=
nsLayoutUtils
:
:
GetContainingBlockForClientRect
(
rootFrame
)
;
rootRect
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
rootFrame
rootRectRelativeToRootFrame
containingBlock
)
;
}
}
else
{
MOZ_ASSERT
(
!
mRoot
|
|
mRoot
-
>
IsDocument
(
)
)
;
Document
*
rootDocument
=
mRoot
?
mRoot
-
>
AsDocument
(
)
:
GetTopLevelContentDocumentInThisProcess
(
*
aDocument
)
;
root
=
rootDocument
;
if
(
rootDocument
)
{
if
(
PresShell
*
presShell
=
rootDocument
-
>
GetPresShell
(
)
)
{
rootFrame
=
presShell
-
>
GetRootFrame
(
)
;
if
(
nsIScrollableFrame
*
scrollFrame
=
presShell
-
>
GetRootScrollFrameAsScrollable
(
)
)
{
rootRect
=
scrollFrame
-
>
GetScrollPortRect
(
)
;
}
}
}
if
(
Maybe
<
OopIframeMetrics
>
metrics
=
GetOopIframeMetrics
(
*
aDocument
rootDocument
)
)
{
rootFrame
=
metrics
-
>
mInProcessRootFrame
;
if
(
!
rootDocument
)
{
rootRect
=
metrics
-
>
mInProcessRootRect
;
}
remoteDocumentVisibleRect
=
Some
(
metrics
-
>
mRemoteDocumentVisibleRect
)
;
}
}
nsMargin
rootMargin
;
for
(
const
auto
side
:
mozilla
:
:
AllPhysicalSides
(
)
)
{
nscoord
basis
=
side
=
=
eSideTop
|
|
side
=
=
eSideBottom
?
rootRect
.
Height
(
)
:
rootRect
.
Width
(
)
;
rootMargin
.
Side
(
side
)
=
mRootMargin
.
Get
(
side
)
.
Resolve
(
basis
static_cast
<
nscoord
(
*
)
(
float
)
>
(
NSToCoordRoundWithClamp
)
)
;
}
for
(
Element
*
target
:
mObservationTargets
)
{
nsIFrame
*
targetFrame
=
target
-
>
GetPrimaryFrame
(
)
;
BrowsingContextOrigin
origin
=
SimilarOrigin
(
*
target
root
)
;
Maybe
<
nsRect
>
intersectionRect
;
nsRect
targetRect
;
nsRect
rootBounds
;
const
bool
canComputeIntersection
=
[
&
]
{
if
(
!
targetFrame
|
|
!
rootFrame
)
{
return
false
;
}
if
(
targetFrame
-
>
AncestorHidesContent
(
)
)
{
return
false
;
}
if
(
rootFrame
=
=
targetFrame
|
|
!
nsLayoutUtils
:
:
IsAncestorFrameCrossDocInProcess
(
rootFrame
targetFrame
)
)
{
return
false
;
}
if
(
mRoot
&
&
mRoot
-
>
OwnerDoc
(
)
!
=
target
-
>
OwnerDoc
(
)
)
{
return
false
;
}
return
true
;
}
(
)
;
if
(
canComputeIntersection
)
{
rootBounds
=
rootRect
;
if
(
origin
=
=
BrowsingContextOrigin
:
:
Similar
)
{
rootBounds
.
Inflate
(
rootMargin
)
;
}
targetRect
=
targetFrame
-
>
GetBoundingClientRect
(
)
;
intersectionRect
=
ComputeTheIntersection
(
targetFrame
rootFrame
rootBounds
remoteDocumentVisibleRect
)
;
}
int64_t
targetArea
=
(
int64_t
)
targetRect
.
Width
(
)
*
(
int64_t
)
targetRect
.
Height
(
)
;
int64_t
intersectionArea
=
!
intersectionRect
?
0
:
(
int64_t
)
intersectionRect
-
>
Width
(
)
*
(
int64_t
)
intersectionRect
-
>
Height
(
)
;
const
bool
isIntersecting
=
intersectionRect
.
isSome
(
)
;
double
intersectionRatio
;
if
(
targetArea
>
0
.
0
)
{
intersectionRatio
=
std
:
:
min
(
(
double
)
intersectionArea
/
(
double
)
targetArea
1
.
0
)
;
}
else
{
intersectionRatio
=
isIntersecting
?
1
.
0
:
0
.
0
;
}
int32_t
thresholdIndex
=
-
1
;
if
(
isIntersecting
)
{
thresholdIndex
=
mThresholds
.
IndexOfFirstElementGt
(
intersectionRatio
)
;
if
(
thresholdIndex
=
=
0
)
{
thresholdIndex
=
-
1
;
}
}
if
(
target
-
>
UpdateIntersectionObservation
(
this
thresholdIndex
)
)
{
QueueIntersectionObserverEntry
(
target
time
origin
=
=
BrowsingContextOrigin
:
:
Similar
?
Some
(
rootBounds
)
:
Nothing
(
)
targetRect
intersectionRect
thresholdIndex
>
0
intersectionRatio
)
;
}
}
}
void
DOMIntersectionObserver
:
:
QueueIntersectionObserverEntry
(
Element
*
aTarget
DOMHighResTimeStamp
time
const
Maybe
<
nsRect
>
&
aRootRect
const
nsRect
&
aTargetRect
const
Maybe
<
nsRect
>
&
aIntersectionRect
bool
aIsIntersecting
double
aIntersectionRatio
)
{
RefPtr
<
DOMRect
>
rootBounds
;
if
(
aRootRect
.
isSome
(
)
)
{
rootBounds
=
new
DOMRect
(
mOwner
)
;
rootBounds
-
>
SetLayoutRect
(
aRootRect
.
value
(
)
)
;
}
RefPtr
<
DOMRect
>
boundingClientRect
=
new
DOMRect
(
mOwner
)
;
boundingClientRect
-
>
SetLayoutRect
(
aTargetRect
)
;
RefPtr
<
DOMRect
>
intersectionRect
=
new
DOMRect
(
mOwner
)
;
if
(
aIntersectionRect
.
isSome
(
)
)
{
intersectionRect
-
>
SetLayoutRect
(
aIntersectionRect
.
value
(
)
)
;
}
RefPtr
<
DOMIntersectionObserverEntry
>
entry
=
new
DOMIntersectionObserverEntry
(
mOwner
time
rootBounds
.
forget
(
)
boundingClientRect
.
forget
(
)
intersectionRect
.
forget
(
)
aIsIntersecting
aTarget
aIntersectionRatio
)
;
mQueuedEntries
.
AppendElement
(
entry
.
forget
(
)
)
;
}
void
DOMIntersectionObserver
:
:
Notify
(
)
{
if
(
!
mQueuedEntries
.
Length
(
)
)
{
return
;
}
Sequence
<
OwningNonNull
<
DOMIntersectionObserverEntry
>
>
entries
;
if
(
entries
.
SetCapacity
(
mQueuedEntries
.
Length
(
)
mozilla
:
:
fallible
)
)
{
for
(
size_t
i
=
0
;
i
<
mQueuedEntries
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
DOMIntersectionObserverEntry
>
next
=
mQueuedEntries
[
i
]
;
*
entries
.
AppendElement
(
mozilla
:
:
fallible
)
=
next
;
}
}
mQueuedEntries
.
Clear
(
)
;
if
(
mCallback
.
is
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
)
{
RefPtr
<
dom
:
:
IntersectionCallback
>
callback
(
mCallback
.
as
<
RefPtr
<
dom
:
:
IntersectionCallback
>
>
(
)
)
;
callback
-
>
Call
(
this
entries
*
this
)
;
}
else
{
mCallback
.
as
<
NativeCallback
>
(
)
(
entries
)
;
}
}
}
