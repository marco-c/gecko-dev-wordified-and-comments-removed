#
include
"
FragmentDirective
.
h
"
#
include
<
cstdint
>
#
include
"
RangeBoundary
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
Document
.
h
"
#
include
"
mozilla
/
dom
/
FragmentDirectiveBinding
.
h
"
#
include
"
mozilla
/
dom
/
FragmentOrElement
.
h
"
#
include
"
mozilla
/
dom
/
NodeBinding
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
intl
/
WordBreaker
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
{
static
LazyLogModule
sFragmentDirectiveLog
(
"
FragmentDirective
"
)
;
nsCString
ToString
(
const
TextDirective
&
aTextDirective
)
{
nsCString
str
;
create_text_directive
(
&
aTextDirective
&
str
)
;
return
str
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
FragmentDirective
mDocument
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FragmentDirective
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FragmentDirective
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FragmentDirective
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
FragmentDirective
:
:
FragmentDirective
(
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
}
JSObject
*
FragmentDirective
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FragmentDirective_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
FragmentDirective
:
:
ParseAndRemoveFragmentDirectiveFromFragmentString
(
nsCString
&
aFragment
nsTArray
<
TextDirective
>
*
aTextDirectives
)
{
ParsedFragmentDirectiveResult
fragmentDirective
;
const
bool
hasRemovedFragmentDirective
=
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
&
&
parse_fragment_directive
(
&
aFragment
&
fragmentDirective
)
;
if
(
hasRemovedFragmentDirective
)
{
aFragment
=
fragmentDirective
.
url_without_fragment_directive
;
if
(
aTextDirectives
)
{
aTextDirectives
-
>
SwapElements
(
fragmentDirective
.
text_directives
)
;
}
}
return
hasRemovedFragmentDirective
;
}
void
FragmentDirective
:
:
ParseAndRemoveFragmentDirectiveFromFragment
(
nsCOMPtr
<
nsIURI
>
&
aURI
nsTArray
<
TextDirective
>
*
aTextDirectives
)
{
if
(
!
aURI
|
|
!
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
)
{
return
;
}
bool
hasRef
=
false
;
aURI
-
>
GetHasRef
(
&
hasRef
)
;
if
(
!
hasRef
)
{
return
;
}
nsAutoCString
hash
;
aURI
-
>
GetRef
(
hash
)
;
const
bool
hasRemovedFragmentDirective
=
ParseAndRemoveFragmentDirectiveFromFragmentString
(
hash
aTextDirectives
)
;
if
(
!
hasRemovedFragmentDirective
)
{
return
;
}
Unused
<
<
NS_MutateURI
(
aURI
)
.
SetRef
(
hash
)
.
Finalize
(
aURI
)
;
}
nsTArray
<
RefPtr
<
nsRange
>
>
FragmentDirective
:
:
FindTextFragmentsInDocument
(
)
{
MOZ_ASSERT
(
mDocument
)
;
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
nsTArray
<
RefPtr
<
nsRange
>
>
textDirectiveRanges
;
for
(
const
TextDirective
&
textDirective
:
mUninvokedTextDirectives
)
{
if
(
RefPtr
<
nsRange
>
range
=
FindRangeForTextDirective
(
textDirective
)
)
{
textDirectiveRanges
.
AppendElement
(
range
)
;
}
}
return
textDirectiveRanges
;
}
bool
NodeIsSearchInvisible
(
nsINode
&
aNode
)
{
if
(
!
aNode
.
IsElement
(
)
)
{
return
false
;
}
nsAtom
*
nodeNameAtom
=
aNode
.
NodeInfo
(
)
-
>
NameAtom
(
)
;
if
(
FragmentOrElement
:
:
IsHTMLVoid
(
nodeNameAtom
)
)
{
return
true
;
}
if
(
aNode
.
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
iframe
nsGkAtoms
:
:
image
nsGkAtoms
:
:
meter
nsGkAtoms
:
:
object
nsGkAtoms
:
:
progress
nsGkAtoms
:
:
style
nsGkAtoms
:
:
script
nsGkAtoms
:
:
video
nsGkAtoms
:
:
audio
)
)
{
return
true
;
}
if
(
aNode
.
IsHTMLElement
(
nsGkAtoms
:
:
select
)
)
{
return
aNode
.
GetAttributes
(
)
-
>
GetNamedItem
(
u
"
multiple
"
_ns
)
=
=
nullptr
;
}
const
Element
*
nodeAsElement
=
Element
:
:
FromNode
(
aNode
)
;
const
RefPtr
<
const
ComputedStyle
>
computedStyle
=
nsComputedDOMStyle
:
:
GetComputedStyleNoFlush
(
nodeAsElement
)
;
return
!
computedStyle
|
|
computedStyle
-
>
StyleDisplay
(
)
-
>
mDisplay
=
=
StyleDisplay
:
:
None
;
}
bool
NodeHasBlockLevelDisplay
(
nsINode
&
aNode
)
{
if
(
!
aNode
.
IsElement
(
)
)
{
return
false
;
}
const
Element
*
nodeAsElement
=
Element
:
:
FromNode
(
aNode
)
;
const
RefPtr
<
const
ComputedStyle
>
computedStyle
=
nsComputedDOMStyle
:
:
GetComputedStyleNoFlush
(
nodeAsElement
)
;
if
(
!
computedStyle
)
{
return
false
;
}
const
StyleDisplay
&
styleDisplay
=
computedStyle
-
>
StyleDisplay
(
)
-
>
mDisplay
;
return
styleDisplay
=
=
StyleDisplay
:
:
Block
|
|
styleDisplay
=
=
StyleDisplay
:
:
Table
|
|
styleDisplay
=
=
StyleDisplay
:
:
FlowRoot
|
|
styleDisplay
=
=
StyleDisplay
:
:
Grid
|
|
styleDisplay
=
=
StyleDisplay
:
:
Flex
|
|
styleDisplay
.
IsListItem
(
)
;
}
nsINode
*
GetBlockAncestorForNode
(
nsINode
*
aNode
)
{
RefPtr
<
nsINode
>
curNode
=
aNode
;
while
(
curNode
)
{
if
(
!
curNode
-
>
IsText
(
)
&
&
NodeHasBlockLevelDisplay
(
*
curNode
)
)
{
return
curNode
;
}
curNode
=
curNode
-
>
GetParentNode
(
)
;
}
return
aNode
-
>
GetOwnerDocument
(
)
;
}
bool
NodeIsPartOfNonSearchableSubTree
(
nsINode
&
aNode
)
{
nsINode
*
node
=
&
aNode
;
do
{
if
(
NodeIsSearchInvisible
(
*
node
)
)
{
return
true
;
}
}
while
(
(
node
=
node
-
>
GetParentOrShadowHostNode
(
)
)
)
;
return
false
;
}
bool
NodeIsVisibleTextNode
(
const
nsINode
&
aNode
)
{
const
Text
*
text
=
Text
:
:
FromNode
(
aNode
)
;
if
(
!
text
)
{
return
false
;
}
const
nsIFrame
*
frame
=
text
-
>
GetPrimaryFrame
(
)
;
return
frame
&
&
frame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
;
}
enum
class
TextScanDirection
{
Left
=
-
1
Right
=
1
}
;
uint32_t
IsWhitespaceAtPosition
(
nsString
&
aText
uint32_t
aPos
TextScanDirection
aDirection
)
{
if
(
aText
.
Length
(
)
=
=
0
)
{
return
0
;
}
if
(
aDirection
=
=
TextScanDirection
:
:
Right
)
{
if
(
aText
.
Length
(
)
>
(
aPos
+
5
)
)
{
if
(
Substring
(
aText
aPos
5
)
.
Equals
(
u
"
&
nbsp
"
)
)
{
return
aText
.
Length
(
)
>
(
aPos
+
6
)
&
&
aText
.
CharAt
(
aPos
+
6
)
=
=
u
'
;
'
?
6
:
5
;
}
}
}
else
{
if
(
aPos
>
6
&
&
Substring
(
aText
aPos
-
6
6
)
.
Equals
(
u
"
&
nbsp
;
"
)
)
{
return
6
;
}
if
(
aPos
>
5
&
&
Substring
(
aText
aPos
-
5
5
)
.
Equals
(
u
"
&
nbsp
"
)
)
{
return
5
;
}
}
return
uint32_t
(
IsSpaceCharacter
(
aText
.
CharAt
(
aPos
)
)
)
;
}
void
AdvanceStartToNextNonWhitespacePosition
(
nsRange
&
aRange
)
{
while
(
!
aRange
.
Collapsed
(
)
)
{
RefPtr
<
nsINode
>
node
=
aRange
.
GetStartContainer
(
)
;
MOZ_ASSERT
(
node
)
;
const
uint32_t
offset
=
aRange
.
StartOffset
(
)
;
if
(
NodeIsPartOfNonSearchableSubTree
(
*
node
)
|
|
!
NodeIsVisibleTextNode
(
*
node
)
|
|
offset
=
=
node
-
>
Length
(
)
)
{
if
(
NS_FAILED
(
aRange
.
SetStart
(
node
-
>
GetNextNode
(
)
0
)
)
)
{
return
;
}
continue
;
}
const
Text
*
text
=
Text
:
:
FromNode
(
node
)
;
nsAutoString
textData
;
text
-
>
GetData
(
textData
)
;
const
uint32_t
whitespace
=
IsWhitespaceAtPosition
(
textData
offset
TextScanDirection
:
:
Right
)
;
if
(
whitespace
=
=
0
)
{
return
;
}
aRange
.
SetStart
(
node
offset
+
whitespace
)
;
}
}
RangeBoundary
MoveRangeBoundaryOneWord
(
const
RangeBoundary
&
aRangeBoundary
TextScanDirection
aDirection
)
{
MOZ_ASSERT
(
aRangeBoundary
.
IsSetAndValid
(
)
)
;
RefPtr
<
nsINode
>
curNode
=
aRangeBoundary
.
Container
(
)
;
uint32_t
offset
=
*
aRangeBoundary
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
;
const
int
offsetIncrement
=
int
(
aDirection
)
;
nsAutoString
text
;
if
(
NodeIsVisibleTextNode
(
*
curNode
)
)
{
const
Text
*
textNode
=
Text
:
:
FromNode
(
curNode
)
;
textNode
-
>
GetData
(
text
)
;
if
(
!
IsWhitespaceAtPosition
(
text
offset
aDirection
)
)
{
const
intl
:
:
WordRange
wordRange
=
intl
:
:
WordBreaker
:
:
FindWord
(
text
offset
)
;
if
(
aDirection
=
=
TextScanDirection
:
:
Right
&
&
offset
!
=
wordRange
.
mBegin
)
{
offset
=
wordRange
.
mEnd
;
}
else
if
(
aDirection
=
=
TextScanDirection
:
:
Left
&
&
offset
!
=
wordRange
.
mEnd
)
{
offset
=
wordRange
.
mBegin
-
1
;
}
}
}
while
(
curNode
)
{
if
(
!
NodeIsVisibleTextNode
(
*
curNode
)
|
|
NodeIsSearchInvisible
(
*
curNode
)
|
|
offset
>
=
curNode
-
>
Length
(
)
)
{
curNode
=
aDirection
=
=
TextScanDirection
:
:
Left
?
curNode
-
>
GetPrevNode
(
)
:
curNode
-
>
GetNextNode
(
)
;
if
(
!
curNode
)
{
break
;
}
offset
=
aDirection
=
=
TextScanDirection
:
:
Left
?
curNode
-
>
Length
(
)
-
1
:
0
;
if
(
const
Text
*
textNode
=
Text
:
:
FromNode
(
curNode
)
)
{
textNode
-
>
GetData
(
text
)
;
}
continue
;
}
if
(
const
uint32_t
whitespace
=
IsWhitespaceAtPosition
(
text
offset
aDirection
)
)
{
offset
+
=
offsetIncrement
*
whitespace
;
continue
;
}
const
intl
:
:
WordRange
wordRange
=
intl
:
:
WordBreaker
:
:
FindWord
(
text
offset
)
;
offset
=
aDirection
=
=
TextScanDirection
:
:
Left
?
wordRange
.
mBegin
:
wordRange
.
mEnd
;
return
{
curNode
offset
}
;
}
return
{
}
;
}
RefPtr
<
nsRange
>
FragmentDirective
:
:
FindRangeForTextDirective
(
const
TextDirective
&
aTextDirective
)
{
MOZ_LOG
(
sFragmentDirectiveLog
LogLevel
:
:
Info
(
"
FragmentDirective
:
:
%
s
(
)
:
Find
range
for
text
directive
'
%
s
'
.
"
__FUNCTION__
ToString
(
aTextDirective
)
.
Data
(
)
)
)
;
ErrorResult
rv
;
RefPtr
<
nsRange
>
searchRange
=
nsRange
:
:
Create
(
mDocument
0
mDocument
mDocument
-
>
Length
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
while
(
!
searchRange
-
>
Collapsed
(
)
)
{
RefPtr
<
nsRange
>
potentialMatch
;
if
(
!
aTextDirective
.
prefix
.
IsEmpty
(
)
)
{
RefPtr
<
nsRange
>
prefixMatch
=
FindStringInRange
(
searchRange
aTextDirective
.
prefix
true
false
)
;
if
(
!
prefixMatch
)
{
return
nullptr
;
}
const
RangeBoundary
boundaryPoint
=
MoveRangeBoundaryOneWord
(
{
prefixMatch
-
>
GetStartContainer
(
)
prefixMatch
-
>
StartOffset
(
)
}
TextScanDirection
:
:
Right
)
;
if
(
!
boundaryPoint
.
IsSetAndValid
(
)
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
boundaryPoint
.
AsRaw
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
nsRange
>
matchRange
=
nsRange
:
:
Create
(
prefixMatch
-
>
GetEndContainer
(
)
prefixMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
AdvanceStartToNextNonWhitespacePosition
(
*
matchRange
)
;
if
(
matchRange
-
>
Collapsed
(
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
matchRange
-
>
GetStartContainer
(
)
-
>
IsText
(
)
)
;
const
bool
mustEndAtWordBoundary
=
!
aTextDirective
.
end
.
IsEmpty
(
)
|
|
aTextDirective
.
suffix
.
IsEmpty
(
)
;
potentialMatch
=
FindStringInRange
(
matchRange
aTextDirective
.
start
false
mustEndAtWordBoundary
)
;
if
(
!
potentialMatch
)
{
return
nullptr
;
}
if
(
potentialMatch
-
>
GetStartContainer
(
)
!
=
matchRange
-
>
GetStartContainer
(
)
)
{
continue
;
}
}
else
{
const
bool
mustEndAtWordBoundary
=
!
aTextDirective
.
end
.
IsEmpty
(
)
|
|
aTextDirective
.
suffix
.
IsEmpty
(
)
;
potentialMatch
=
FindStringInRange
(
searchRange
aTextDirective
.
start
true
mustEndAtWordBoundary
)
;
if
(
!
potentialMatch
)
{
return
nullptr
;
}
RangeBoundary
newRangeBoundary
=
MoveRangeBoundaryOneWord
(
{
potentialMatch
-
>
GetStartContainer
(
)
potentialMatch
-
>
StartOffset
(
)
}
TextScanDirection
:
:
Right
)
;
if
(
!
newRangeBoundary
.
IsSetAndValid
(
)
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
newRangeBoundary
.
AsRaw
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
}
RefPtr
<
nsRange
>
rangeEndSearchRange
=
nsRange
:
:
Create
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
while
(
!
rangeEndSearchRange
-
>
Collapsed
(
)
)
{
if
(
!
aTextDirective
.
end
.
IsEmpty
(
)
)
{
const
bool
mustEndAtWordBoundary
=
aTextDirective
.
suffix
.
IsEmpty
(
)
;
RefPtr
<
nsRange
>
endMatch
=
FindStringInRange
(
rangeEndSearchRange
aTextDirective
.
end
true
mustEndAtWordBoundary
)
;
if
(
!
endMatch
)
{
return
nullptr
;
}
potentialMatch
-
>
SetEnd
(
endMatch
-
>
GetEndContainer
(
)
endMatch
-
>
EndOffset
(
)
)
;
}
MOZ_ASSERT
(
potentialMatch
&
&
!
potentialMatch
-
>
Collapsed
(
)
)
;
if
(
aTextDirective
.
suffix
.
IsEmpty
(
)
)
{
return
potentialMatch
;
}
RefPtr
<
nsRange
>
suffixRange
=
nsRange
:
:
Create
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
AdvanceStartToNextNonWhitespacePosition
(
*
suffixRange
)
;
RefPtr
<
nsRange
>
suffixMatch
=
FindStringInRange
(
suffixRange
aTextDirective
.
suffix
false
true
)
;
if
(
!
suffixMatch
)
{
return
nullptr
;
}
if
(
suffixMatch
-
>
GetStartContainer
(
)
=
=
suffixRange
-
>
GetStartContainer
(
)
&
&
suffixMatch
-
>
StartOffset
(
)
=
=
suffixRange
-
>
StartOffset
(
)
)
{
return
potentialMatch
;
}
if
(
aTextDirective
.
end
.
IsEmpty
(
)
)
{
break
;
}
rangeEndSearchRange
-
>
SetStart
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
)
;
}
if
(
rangeEndSearchRange
-
>
Collapsed
(
)
)
{
MOZ_ASSERT
(
!
aTextDirective
.
end
.
IsEmpty
(
)
)
;
}
}
return
nullptr
;
}
bool
IsAtWordBoundary
(
const
nsAString
&
aText
uint32_t
aPosition
)
{
const
intl
:
:
WordRange
wordRange
=
intl
:
:
WordBreaker
:
:
FindWord
(
aText
aPosition
)
;
return
wordRange
.
mBegin
=
=
aPosition
|
|
wordRange
.
mEnd
=
=
aPosition
;
}
enum
class
IsEndIndex
:
bool
{
No
Yes
}
;
RangeBoundary
GetBoundaryPointAtIndex
(
uint32_t
aIndex
const
nsTArray
<
RefPtr
<
Text
>
>
&
aTextNodeList
IsEndIndex
aIsEndIndex
)
{
uint32_t
counted
=
0
;
for
(
Text
*
curNode
:
aTextNodeList
)
{
uint32_t
nodeEnd
=
counted
+
curNode
-
>
Length
(
)
;
if
(
aIsEndIndex
=
=
IsEndIndex
:
:
Yes
)
{
+
+
nodeEnd
;
}
if
(
nodeEnd
>
aIndex
)
{
return
RangeBoundary
(
curNode
-
>
AsNode
(
)
aIndex
-
counted
)
;
}
counted
+
=
curNode
-
>
Length
(
)
;
}
return
{
}
;
}
RefPtr
<
nsRange
>
FindRangeFromNodeList
(
nsRange
*
aSearchRange
const
nsAString
&
aQuery
const
nsTArray
<
RefPtr
<
Text
>
>
&
aTextNodeList
bool
aWordStartBounded
bool
aWordEndBounded
)
{
uint32_t
bufferLength
=
0
;
for
(
const
Text
*
text
:
aTextNodeList
)
{
bufferLength
+
=
text
-
>
Length
(
)
;
}
if
(
bufferLength
<
aQuery
.
Length
(
)
)
{
return
nullptr
;
}
nsAutoString
searchBuffer
;
searchBuffer
.
SetCapacity
(
bufferLength
)
;
for
(
Text
*
text
:
aTextNodeList
)
{
text
-
>
AppendTextTo
(
searchBuffer
)
;
}
uint32_t
searchStart
=
aTextNodeList
.
SafeElementAt
(
0
)
=
=
aSearchRange
-
>
GetStartContainer
(
)
?
aSearchRange
-
>
StartOffset
(
)
:
0
;
RangeBoundary
start
end
;
int32_t
matchIndex
=
-
1
;
while
(
matchIndex
=
=
-
1
)
{
matchIndex
=
searchBuffer
.
Find
(
aQuery
searchStart
)
;
if
(
matchIndex
=
=
-
1
)
{
return
nullptr
;
}
const
uint32_t
endIx
=
matchIndex
+
aQuery
.
Length
(
)
;
start
=
GetBoundaryPointAtIndex
(
matchIndex
aTextNodeList
IsEndIndex
:
:
No
)
;
end
=
GetBoundaryPointAtIndex
(
endIx
aTextNodeList
IsEndIndex
:
:
Yes
)
;
if
(
(
aWordStartBounded
&
&
!
IsAtWordBoundary
(
searchBuffer
matchIndex
)
)
|
|
(
aWordEndBounded
&
&
!
IsAtWordBoundary
(
searchBuffer
endIx
)
)
)
{
searchStart
=
matchIndex
+
1
;
matchIndex
=
-
1
;
}
}
uint32_t
endInset
=
aTextNodeList
.
LastElement
(
)
=
=
aSearchRange
-
>
GetEndContainer
(
)
?
aSearchRange
-
>
GetEndContainer
(
)
-
>
Length
(
)
-
aSearchRange
-
>
EndOffset
(
)
:
0
;
if
(
matchIndex
+
aQuery
.
Length
(
)
>
searchBuffer
.
Length
(
)
-
endInset
)
{
return
nullptr
;
}
MOZ_ASSERT
(
start
.
IsSetAndValid
(
)
)
;
MOZ_ASSERT
(
end
.
IsSetAndValid
(
)
)
;
ErrorResult
rv
;
RefPtr
<
nsRange
>
range
=
nsRange
:
:
Create
(
start
end
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
return
range
;
}
RefPtr
<
nsRange
>
FragmentDirective
:
:
FindStringInRange
(
nsRange
*
aSearchRange
const
nsAString
&
aQuery
bool
aWordStartBounded
bool
aWordEndBounded
)
{
MOZ_ASSERT
(
aSearchRange
)
;
RefPtr
<
nsRange
>
searchRange
=
aSearchRange
-
>
CloneRange
(
)
;
while
(
searchRange
&
&
!
searchRange
-
>
Collapsed
(
)
)
{
RefPtr
<
nsINode
>
curNode
=
searchRange
-
>
GetStartContainer
(
)
;
if
(
NodeIsPartOfNonSearchableSubTree
(
*
curNode
)
)
{
RefPtr
<
nsINode
>
next
=
curNode
;
while
(
(
next
=
next
-
>
GetNextNode
(
)
)
)
{
if
(
!
next
-
>
IsShadowIncludingInclusiveDescendantOf
(
curNode
)
)
{
break
;
}
}
if
(
!
next
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
next
0
)
;
continue
;
}
if
(
!
NodeIsVisibleTextNode
(
*
curNode
)
)
{
RefPtr
<
nsINode
>
next
=
curNode
;
while
(
(
next
=
next
-
>
GetNextNode
(
)
)
)
{
if
(
next
-
>
NodeType
(
)
!
=
Node_Binding
:
:
DOCUMENT_TYPE_NODE
)
{
break
;
}
}
if
(
!
next
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
next
0
)
;
continue
;
}
RefPtr
<
nsINode
>
blockAncestor
=
GetBlockAncestorForNode
(
curNode
)
;
nsTArray
<
RefPtr
<
Text
>
>
textNodeList
;
while
(
curNode
&
&
curNode
-
>
IsShadowIncludingInclusiveDescendantOf
(
blockAncestor
)
)
{
Maybe
<
int32_t
>
comp
=
nsContentUtils
:
:
ComparePoints
(
curNode
0
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
)
;
if
(
comp
)
{
if
(
*
comp
>
=
0
)
{
break
;
}
}
else
{
return
nullptr
;
}
if
(
NodeHasBlockLevelDisplay
(
*
curNode
)
)
{
break
;
}
if
(
NodeIsSearchInvisible
(
*
curNode
)
)
{
curNode
=
curNode
-
>
GetNextNode
(
)
;
continue
;
}
if
(
NodeIsVisibleTextNode
(
*
curNode
)
)
{
textNodeList
.
AppendElement
(
curNode
-
>
AsText
(
)
)
;
}
curNode
=
curNode
-
>
GetNextNode
(
)
;
}
if
(
RefPtr
<
nsRange
>
range
=
FindRangeFromNodeList
(
searchRange
aQuery
textNodeList
aWordStartBounded
aWordEndBounded
)
)
{
return
range
;
}
if
(
!
curNode
)
{
break
;
}
searchRange
-
>
SetStart
(
curNode
0
)
;
}
return
nullptr
;
}
}
