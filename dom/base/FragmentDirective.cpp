#
include
"
FragmentDirective
.
h
"
#
include
<
cstdint
>
#
include
"
RangeBoundary
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
BasePrincipal
.
h
"
#
include
"
Document
.
h
"
#
include
"
TextDirectiveUtil
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
FragmentDirectiveBinding
.
h
"
#
include
"
mozilla
/
dom
/
FragmentOrElement
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
FragmentDirective
mDocument
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FragmentDirective
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FragmentDirective
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FragmentDirective
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
FragmentDirective
:
:
FragmentDirective
(
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
}
JSObject
*
FragmentDirective
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FragmentDirective_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
FragmentDirective
:
:
ParseAndRemoveFragmentDirectiveFromFragmentString
(
nsCString
&
aFragment
nsTArray
<
TextDirective
>
*
aTextDirectives
nsIURI
*
aURI
)
{
auto
uri
=
TextDirectiveUtil
:
:
ShouldLog
(
)
&
&
aURI
?
aURI
-
>
GetSpecOrDefault
(
)
:
nsCString
(
)
;
if
(
aFragment
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
URL
'
%
s
'
has
no
fragment
.
"
uri
.
Data
(
)
)
;
return
false
;
}
TEXT_FRAGMENT_LOG
(
"
Trying
to
extract
a
fragment
directive
from
fragment
'
%
s
'
of
URL
'
%
s
'
.
"
aFragment
.
Data
(
)
uri
.
Data
(
)
)
;
ParsedFragmentDirectiveResult
fragmentDirective
;
const
bool
hasRemovedFragmentDirective
=
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
&
&
parse_fragment_directive
(
&
aFragment
&
fragmentDirective
)
;
if
(
hasRemovedFragmentDirective
)
{
TEXT_FRAGMENT_LOG
(
"
Found
a
fragment
directive
'
%
s
'
which
was
removed
from
the
fragment
.
"
"
New
fragment
is
'
%
s
'
.
"
fragmentDirective
.
fragment_directive
.
Data
(
)
fragmentDirective
.
hash_without_fragment_directive
.
Data
(
)
)
;
if
(
TextDirectiveUtil
:
:
ShouldLog
(
)
)
{
if
(
fragmentDirective
.
text_directives
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
Found
no
valid
text
directives
in
fragment
directive
'
%
s
'
.
"
fragmentDirective
.
fragment_directive
.
Data
(
)
)
;
}
else
{
TEXT_FRAGMENT_LOG
(
"
Found
%
zu
valid
text
directives
in
fragment
directive
'
%
s
'
:
"
fragmentDirective
.
text_directives
.
Length
(
)
fragmentDirective
.
fragment_directive
.
Data
(
)
)
;
for
(
size_t
index
=
0
;
index
<
fragmentDirective
.
text_directives
.
Length
(
)
;
+
+
index
)
{
const
auto
&
textDirective
=
fragmentDirective
.
text_directives
[
index
]
;
TEXT_FRAGMENT_LOG
(
"
[
%
zu
]
:
%
s
"
index
ToString
(
textDirective
)
.
c_str
(
)
)
;
}
}
}
aFragment
=
fragmentDirective
.
hash_without_fragment_directive
;
if
(
aTextDirectives
)
{
aTextDirectives
-
>
SwapElements
(
fragmentDirective
.
text_directives
)
;
}
}
else
{
TEXT_FRAGMENT_LOG
(
"
Fragment
'
%
s
'
of
URL
'
%
s
'
did
not
contain
a
fragment
directive
.
"
aFragment
.
Data
(
)
uri
.
Data
(
)
)
;
}
return
hasRemovedFragmentDirective
;
}
void
FragmentDirective
:
:
ParseAndRemoveFragmentDirectiveFromFragment
(
nsCOMPtr
<
nsIURI
>
&
aURI
nsTArray
<
TextDirective
>
*
aTextDirectives
)
{
if
(
!
aURI
|
|
!
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
)
{
return
;
}
bool
hasRef
=
false
;
aURI
-
>
GetHasRef
(
&
hasRef
)
;
nsAutoCString
hash
;
aURI
-
>
GetRef
(
hash
)
;
if
(
!
hasRef
|
|
hash
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
URL
'
%
s
'
has
no
fragment
.
Exiting
.
"
aURI
-
>
GetSpecOrDefault
(
)
.
Data
(
)
)
;
}
const
bool
hasRemovedFragmentDirective
=
ParseAndRemoveFragmentDirectiveFromFragmentString
(
hash
aTextDirectives
aURI
)
;
if
(
!
hasRemovedFragmentDirective
)
{
return
;
}
Unused
<
<
NS_MutateURI
(
aURI
)
.
SetRef
(
hash
)
.
Finalize
(
aURI
)
;
TEXT_FRAGMENT_LOG
(
"
Updated
hash
of
the
URL
.
New
URL
:
%
s
"
aURI
-
>
GetSpecOrDefault
(
)
.
Data
(
)
)
;
}
nsTArray
<
RefPtr
<
nsRange
>
>
FragmentDirective
:
:
FindTextFragmentsInDocument
(
)
{
MOZ_ASSERT
(
mDocument
)
;
auto
uri
=
TextDirectiveUtil
:
:
ShouldLog
(
)
&
&
mDocument
-
>
GetDocumentURI
(
)
?
mDocument
-
>
GetDocumentURI
(
)
-
>
GetSpecOrDefault
(
)
:
nsCString
(
)
;
if
(
mUninvokedTextDirectives
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
No
uninvoked
text
directives
in
document
'
%
s
'
.
Exiting
.
"
uri
.
Data
(
)
)
;
return
{
}
;
}
TEXT_FRAGMENT_LOG
(
"
Trying
to
find
text
directives
in
document
'
%
s
'
.
"
uri
.
Data
(
)
)
;
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
nsTArray
<
RefPtr
<
nsRange
>
>
textDirectiveRanges
(
mUninvokedTextDirectives
.
Length
(
)
)
;
nsTArray
<
TextDirective
>
uninvokedTextDirectives
(
mUninvokedTextDirectives
.
Length
(
)
)
;
for
(
TextDirective
&
textDirective
:
mUninvokedTextDirectives
)
{
if
(
RefPtr
<
nsRange
>
range
=
FindRangeForTextDirective
(
textDirective
)
)
{
textDirectiveRanges
.
AppendElement
(
range
)
;
TEXT_FRAGMENT_LOG
(
"
Found
text
directive
'
%
s
'
"
ToString
(
textDirective
)
.
c_str
(
)
)
;
}
else
{
uninvokedTextDirectives
.
AppendElement
(
std
:
:
move
(
textDirective
)
)
;
}
}
if
(
TextDirectiveUtil
:
:
ShouldLog
(
)
)
{
if
(
uninvokedTextDirectives
.
Length
(
)
=
=
mUninvokedTextDirectives
.
Length
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
any
of
the
%
zu
uninvoked
text
directives
.
"
mUninvokedTextDirectives
.
Length
(
)
)
;
}
else
{
TEXT_FRAGMENT_LOG
(
"
Found
%
zu
of
%
zu
text
directives
in
the
document
.
"
mUninvokedTextDirectives
.
Length
(
)
-
uninvokedTextDirectives
.
Length
(
)
mUninvokedTextDirectives
.
Length
(
)
)
;
}
if
(
uninvokedTextDirectives
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
No
uninvoked
text
directives
left
.
"
)
;
}
else
{
TEXT_FRAGMENT_LOG
(
"
There
are
%
zu
uninvoked
text
directives
left
:
"
uninvokedTextDirectives
.
Length
(
)
)
;
for
(
size_t
index
=
0
;
index
<
uninvokedTextDirectives
.
Length
(
)
;
+
+
index
)
{
TEXT_FRAGMENT_LOG
(
"
[
%
zu
]
:
%
s
"
index
ToString
(
uninvokedTextDirectives
[
index
]
)
.
c_str
(
)
)
;
}
}
}
mUninvokedTextDirectives
=
std
:
:
move
(
uninvokedTextDirectives
)
;
return
textDirectiveRanges
;
}
nsresult
FragmentDirective
:
:
GetSpecIgnoringFragmentDirective
(
nsCOMPtr
<
nsIURI
>
&
aURI
nsACString
&
aSpecIgnoringFragmentDirective
)
{
bool
hasRef
=
false
;
if
(
aURI
-
>
GetHasRef
(
&
hasRef
)
;
!
hasRef
)
{
return
aURI
-
>
GetSpec
(
aSpecIgnoringFragmentDirective
)
;
}
nsAutoCString
ref
;
nsresult
rv
=
aURI
-
>
GetRef
(
ref
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
aURI
-
>
GetSpecIgnoringRef
(
aSpecIgnoringFragmentDirective
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
ParseAndRemoveFragmentDirectiveFromFragmentString
(
ref
)
;
if
(
!
ref
.
IsEmpty
(
)
)
{
aSpecIgnoringFragmentDirective
.
Append
(
'
#
'
)
;
aSpecIgnoringFragmentDirective
.
Append
(
ref
)
;
}
return
NS_OK
;
}
bool
FragmentDirective
:
:
IsTextDirectiveAllowedToBeScrolledTo
(
)
{
MOZ_ASSERT
(
mDocument
)
;
auto
uri
=
TextDirectiveUtil
:
:
ShouldLog
(
)
&
&
mDocument
-
>
GetDocumentURI
(
)
?
mDocument
-
>
GetDocumentURI
(
)
-
>
GetSpecOrDefault
(
)
:
nsCString
(
)
;
TEXT_FRAGMENT_LOG
(
"
Trying
to
find
out
if
the
load
of
URL
'
%
s
'
is
allowed
to
scroll
to
the
"
"
text
fragment
"
uri
.
Data
(
)
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
mDocument
-
>
GetChannel
(
)
?
mDocument
-
>
GetChannel
(
)
-
>
LoadInfo
(
)
:
nullptr
;
const
bool
isSameDocumentNavigation
=
loadInfo
&
&
loadInfo
-
>
GetIsSameDocumentNavigation
(
)
;
TEXT_FRAGMENT_LOG
(
"
Current
load
is
%
s
a
same
-
document
navigation
.
"
isSameDocumentNavigation
?
"
"
:
"
not
"
)
;
const
bool
textDirectiveUserActivation
=
mDocument
-
>
ConsumeTextDirectiveUserActivation
(
)
;
TEXT_FRAGMENT_LOG
(
"
Consumed
Document
'
s
TextDirectiveUserActivation
flag
(
value
=
%
s
)
"
textDirectiveUserActivation
?
"
true
"
:
"
false
"
)
;
const
bool
isAllowedMIMEType
=
[
doc
=
this
-
>
mDocument
func
=
__FUNCTION__
]
{
nsAutoString
contentType
;
doc
-
>
GetContentType
(
contentType
)
;
TEXT_FRAGMENT_LOG_FN
(
"
Got
document
MIME
type
:
%
s
"
func
NS_ConvertUTF16toUTF8
(
contentType
)
.
Data
(
)
)
;
return
contentType
=
=
u
"
text
/
html
"
|
|
contentType
=
=
u
"
text
/
plain
"
;
}
(
)
;
if
(
!
isAllowedMIMEType
)
{
TEXT_FRAGMENT_LOG
(
"
Invalid
document
MIME
type
.
Scrolling
not
allowed
.
"
)
;
return
false
;
}
auto
*
triggeringPrincipal
=
loadInfo
?
loadInfo
-
>
TriggeringPrincipal
(
)
:
nullptr
;
const
bool
isTriggeredFromBrowserUI
=
triggeringPrincipal
&
&
triggeringPrincipal
-
>
IsSystemPrincipal
(
)
;
if
(
isTriggeredFromBrowserUI
)
{
TEXT_FRAGMENT_LOG
(
"
The
load
is
triggered
from
browser
UI
.
Scrolling
allowed
.
"
)
;
return
true
;
}
TEXT_FRAGMENT_LOG
(
"
The
load
is
not
triggered
from
browser
UI
.
"
)
;
if
(
!
textDirectiveUserActivation
&
&
!
isSameDocumentNavigation
)
{
TEXT_FRAGMENT_LOG
(
"
User
involvement
is
false
and
not
same
-
document
navigation
.
Scrolling
"
"
not
allowed
.
"
)
;
return
false
;
}
nsDocShell
*
docShell
=
nsDocShell
:
:
Cast
(
mDocument
-
>
GetDocShell
(
)
)
;
if
(
!
isSameDocumentNavigation
&
&
(
!
docShell
|
|
!
docShell
-
>
GetIsTopLevelContentDocShell
(
)
)
)
{
TEXT_FRAGMENT_LOG
(
"
Document
'
s
node
navigable
has
a
parent
and
this
is
not
a
"
"
same
-
document
navigation
.
Scrolling
not
allowed
.
"
)
;
return
false
;
}
const
bool
isSameOrigin
=
[
doc
=
this
-
>
mDocument
triggeringPrincipal
]
{
auto
*
docPrincipal
=
doc
-
>
GetPrincipal
(
)
;
return
triggeringPrincipal
&
&
docPrincipal
&
&
docPrincipal
-
>
Equals
(
triggeringPrincipal
)
;
}
(
)
;
if
(
isSameOrigin
)
{
TEXT_FRAGMENT_LOG
(
"
Same
origin
.
Scrolling
allowed
.
"
)
;
return
true
;
}
TEXT_FRAGMENT_LOG
(
"
Not
same
origin
.
"
)
;
if
(
BrowsingContextGroup
*
group
=
mDocument
-
>
GetBrowsingContext
(
)
?
mDocument
-
>
GetBrowsingContext
(
)
-
>
Group
(
)
:
nullptr
)
{
const
bool
isNoOpenerContext
=
group
-
>
Toplevels
(
)
.
Length
(
)
=
=
1
;
if
(
!
isNoOpenerContext
)
{
TEXT_FRAGMENT_LOG
(
"
Cross
-
origin
+
noopener
=
false
.
Scrolling
not
allowed
.
"
)
;
}
return
isNoOpenerContext
;
}
TEXT_FRAGMENT_LOG
(
"
Scrolling
not
allowed
.
"
)
;
return
false
;
}
void
FragmentDirective
:
:
HighlightTextDirectives
(
const
nsTArray
<
RefPtr
<
nsRange
>
>
&
aTextDirectiveRanges
)
{
MOZ_ASSERT
(
mDocument
)
;
if
(
!
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
)
{
return
;
}
auto
uri
=
TextDirectiveUtil
:
:
ShouldLog
(
)
&
&
mDocument
-
>
GetDocumentURI
(
)
?
mDocument
-
>
GetDocumentURI
(
)
-
>
GetSpecOrDefault
(
)
:
nsCString
(
)
;
if
(
aTextDirectiveRanges
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
No
text
directive
ranges
to
highlight
for
document
'
%
s
'
.
Exiting
.
"
uri
.
Data
(
)
)
;
return
;
}
TEXT_FRAGMENT_LOG
(
"
Highlighting
text
directives
for
document
'
%
s
'
(
%
zu
ranges
)
.
"
uri
.
Data
(
)
aTextDirectiveRanges
.
Length
(
)
)
;
const
RefPtr
<
Selection
>
targetTextSelection
=
[
doc
=
this
-
>
mDocument
]
(
)
-
>
Selection
*
{
if
(
auto
*
presShell
=
doc
-
>
GetPresShell
(
)
)
{
return
presShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eTargetText
)
;
}
return
nullptr
;
}
(
)
;
if
(
!
targetTextSelection
)
{
return
;
}
for
(
const
RefPtr
<
nsRange
>
&
range
:
aTextDirectiveRanges
)
{
targetTextSelection
-
>
AddRangeAndSelectFramesAndNotifyListeners
(
MOZ_KnownLive
(
*
range
)
IgnoreErrors
(
)
)
;
}
}
RefPtr
<
nsRange
>
FragmentDirective
:
:
FindRangeForTextDirective
(
const
TextDirective
&
aTextDirective
)
{
TEXT_FRAGMENT_LOG
(
"
Find
range
for
text
directive
'
%
s
'
.
"
ToString
(
aTextDirective
)
.
c_str
(
)
)
;
ErrorResult
rv
;
RefPtr
<
nsRange
>
searchRange
=
nsRange
:
:
Create
(
mDocument
0
mDocument
mDocument
-
>
Length
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
while
(
!
searchRange
-
>
Collapsed
(
)
)
{
RefPtr
<
nsRange
>
potentialMatch
;
if
(
!
aTextDirective
.
prefix
.
IsEmpty
(
)
)
{
RefPtr
<
nsRange
>
prefixMatch
=
TextDirectiveUtil
:
:
FindStringInRange
(
searchRange
aTextDirective
.
prefix
true
false
)
;
if
(
!
prefixMatch
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
prefix
'
%
s
'
.
The
text
directive
does
not
exist
"
"
in
the
document
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
prefix
)
.
Data
(
)
)
;
return
nullptr
;
}
TEXT_FRAGMENT_LOG
(
"
Did
find
prefix
'
%
s
'
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
prefix
)
.
Data
(
)
)
;
const
RangeBoundary
boundaryPoint
=
TextDirectiveUtil
:
:
MoveRangeBoundaryOneWord
(
{
prefixMatch
-
>
GetStartContainer
(
)
prefixMatch
-
>
StartOffset
(
)
}
TextScanDirection
:
:
Right
)
;
if
(
!
boundaryPoint
.
IsSetAndValid
(
)
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
boundaryPoint
.
AsRaw
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
nsRange
>
matchRange
=
nsRange
:
:
Create
(
prefixMatch
-
>
GetEndContainer
(
)
prefixMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
TextDirectiveUtil
:
:
AdvanceStartToNextNonWhitespacePosition
(
*
matchRange
)
;
if
(
matchRange
-
>
Collapsed
(
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
matchRange
-
>
GetStartContainer
(
)
-
>
IsText
(
)
)
;
const
bool
mustEndAtWordBoundary
=
!
aTextDirective
.
end
.
IsEmpty
(
)
|
|
aTextDirective
.
suffix
.
IsEmpty
(
)
;
potentialMatch
=
TextDirectiveUtil
:
:
FindStringInRange
(
matchRange
aTextDirective
.
start
false
mustEndAtWordBoundary
)
;
if
(
!
potentialMatch
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
start
'
%
s
'
.
The
text
directive
does
not
exist
"
"
in
the
document
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
start
)
.
Data
(
)
)
;
return
nullptr
;
}
TEXT_FRAGMENT_LOG
(
"
Did
find
start
'
%
s
'
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
start
)
.
Data
(
)
)
;
if
(
potentialMatch
-
>
StartRef
(
)
!
=
matchRange
-
>
StartRef
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
The
prefix
is
not
directly
followed
by
the
start
element
.
"
"
Discarding
this
attempt
.
"
)
;
continue
;
}
}
else
{
const
bool
mustEndAtWordBoundary
=
!
aTextDirective
.
end
.
IsEmpty
(
)
|
|
aTextDirective
.
suffix
.
IsEmpty
(
)
;
potentialMatch
=
TextDirectiveUtil
:
:
FindStringInRange
(
searchRange
aTextDirective
.
start
true
mustEndAtWordBoundary
)
;
if
(
!
potentialMatch
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
start
'
%
s
'
.
The
text
directive
does
not
exist
"
"
in
the
document
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
start
)
.
Data
(
)
)
;
return
nullptr
;
}
RangeBoundary
newRangeBoundary
=
TextDirectiveUtil
:
:
MoveRangeBoundaryOneWord
(
{
potentialMatch
-
>
GetStartContainer
(
)
potentialMatch
-
>
StartOffset
(
)
}
TextScanDirection
:
:
Right
)
;
if
(
!
newRangeBoundary
.
IsSetAndValid
(
)
)
{
return
nullptr
;
}
searchRange
-
>
SetStart
(
newRangeBoundary
.
AsRaw
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
}
RefPtr
<
nsRange
>
rangeEndSearchRange
=
nsRange
:
:
Create
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
while
(
!
rangeEndSearchRange
-
>
Collapsed
(
)
)
{
if
(
!
aTextDirective
.
end
.
IsEmpty
(
)
)
{
const
bool
mustEndAtWordBoundary
=
aTextDirective
.
suffix
.
IsEmpty
(
)
;
RefPtr
<
nsRange
>
endMatch
=
TextDirectiveUtil
:
:
FindStringInRange
(
rangeEndSearchRange
aTextDirective
.
end
true
mustEndAtWordBoundary
)
;
if
(
!
endMatch
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
end
'
%
s
'
.
The
text
directive
does
not
exist
"
"
in
the
document
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
end
)
.
Data
(
)
)
;
return
nullptr
;
}
potentialMatch
-
>
SetEnd
(
endMatch
-
>
GetEndContainer
(
)
endMatch
-
>
EndOffset
(
)
)
;
}
MOZ_ASSERT
(
potentialMatch
&
&
!
potentialMatch
-
>
Collapsed
(
)
)
;
if
(
aTextDirective
.
suffix
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
Did
find
a
match
.
"
)
;
return
potentialMatch
;
}
RefPtr
<
nsRange
>
suffixRange
=
nsRange
:
:
Create
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
searchRange
-
>
GetEndContainer
(
)
searchRange
-
>
EndOffset
(
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
TextDirectiveUtil
:
:
AdvanceStartToNextNonWhitespacePosition
(
*
suffixRange
)
;
RefPtr
<
nsRange
>
suffixMatch
=
TextDirectiveUtil
:
:
FindStringInRange
(
suffixRange
aTextDirective
.
suffix
false
true
)
;
if
(
!
suffixMatch
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
suffix
'
%
s
'
.
The
text
directive
does
not
exist
"
"
in
the
document
.
"
NS_ConvertUTF16toUTF8
(
aTextDirective
.
suffix
)
.
Data
(
)
)
;
return
nullptr
;
}
if
(
suffixMatch
-
>
GetStartContainer
(
)
=
=
suffixRange
-
>
GetStartContainer
(
)
&
&
suffixMatch
-
>
StartOffset
(
)
=
=
suffixRange
-
>
StartOffset
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
Did
find
a
match
.
"
)
;
return
potentialMatch
;
}
if
(
aTextDirective
.
end
.
IsEmpty
(
)
)
{
break
;
}
rangeEndSearchRange
-
>
SetStart
(
potentialMatch
-
>
GetEndContainer
(
)
potentialMatch
-
>
EndOffset
(
)
)
;
}
if
(
rangeEndSearchRange
-
>
Collapsed
(
)
)
{
if
(
aTextDirective
.
end
.
IsEmpty
(
)
&
&
aTextDirective
.
suffix
.
IsEmpty
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
rangeEndSearchRange
was
collapsed
no
end
or
suffix
"
"
present
.
Returning
a
match
"
)
;
return
potentialMatch
;
}
TEXT_FRAGMENT_LOG
(
"
rangeEndSearchRange
was
collapsed
there
is
an
end
or
"
"
suffix
.
There
can
'
t
be
a
match
.
"
)
;
return
nullptr
;
}
}
TEXT_FRAGMENT_LOG
(
"
Did
not
find
a
match
.
"
)
;
return
nullptr
;
}
}
