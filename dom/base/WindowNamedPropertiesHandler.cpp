#
include
"
WindowNamedPropertiesHandler
.
h
"
#
include
"
mozilla
/
dom
/
EventTargetBinding
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMClassInfo
.
h
"
#
include
"
nsDOMWindowList
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
xpcprivate
.
h
"
namespace
mozilla
{
namespace
dom
{
static
bool
ShouldExposeChildWindow
(
nsString
&
aNameBeingResolved
nsPIDOMWindowOuter
*
aChild
)
{
Element
*
e
=
aChild
-
>
GetFrameElementInternal
(
)
;
if
(
e
&
&
e
-
>
IsInShadowTree
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIScriptObjectPrincipal
>
sop
=
do_QueryInterface
(
aChild
)
;
NS_ENSURE_TRUE
(
sop
false
)
;
if
(
nsContentUtils
:
:
SubjectPrincipal
(
)
-
>
Equals
(
sop
-
>
GetPrincipal
(
)
)
)
{
return
true
;
}
return
e
&
&
e
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
name
aNameBeingResolved
eCaseMatters
)
;
}
bool
WindowNamedPropertiesHandler
:
:
getOwnPropDescriptor
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
bool
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
const
{
if
(
!
JSID_IS_STRING
(
aId
)
)
{
return
true
;
}
bool
hasOnPrototype
;
if
(
!
HasPropertyOnPrototype
(
aCx
aProxy
aId
&
hasOnPrototype
)
)
{
return
false
;
}
if
(
hasOnPrototype
)
{
return
true
;
}
nsAutoJSString
str
;
if
(
!
str
.
init
(
aCx
JSID_TO_STRING
(
aId
)
)
)
{
return
false
;
}
if
(
str
.
IsEmpty
(
)
)
{
return
true
;
}
JS
:
:
Rooted
<
JSObject
*
>
global
(
aCx
JS_GetGlobalForObject
(
aCx
aProxy
)
)
;
nsGlobalWindow
*
win
=
xpc
:
:
WindowOrNull
(
global
)
;
if
(
win
-
>
Length
(
)
>
0
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
childWin
=
win
-
>
GetChildWindow
(
str
)
;
if
(
childWin
&
&
ShouldExposeChildWindow
(
str
childWin
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
aCx
)
;
if
(
!
WrapObject
(
aCx
childWin
&
v
)
)
{
return
false
;
}
FillPropertyDescriptor
(
aDesc
aProxy
0
v
)
;
return
true
;
}
}
nsCOMPtr
<
nsIHTMLDocument
>
htmlDoc
=
do_QueryInterface
(
win
-
>
GetExtantDoc
(
)
)
;
if
(
!
htmlDoc
)
{
return
true
;
}
nsHTMLDocument
*
document
=
static_cast
<
nsHTMLDocument
*
>
(
htmlDoc
.
get
(
)
)
;
Element
*
element
=
document
-
>
GetElementById
(
str
)
;
if
(
element
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
aCx
)
;
if
(
!
WrapObject
(
aCx
element
&
v
)
)
{
return
false
;
}
FillPropertyDescriptor
(
aDesc
aProxy
0
v
)
;
return
true
;
}
nsWrapperCache
*
cache
;
nsISupports
*
result
=
document
-
>
ResolveName
(
str
&
cache
)
;
if
(
!
result
)
{
return
true
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
aCx
)
;
if
(
!
WrapObject
(
aCx
result
cache
nullptr
&
v
)
)
{
return
false
;
}
FillPropertyDescriptor
(
aDesc
aProxy
0
v
)
;
return
true
;
}
bool
WindowNamedPropertiesHandler
:
:
defineProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
aDesc
JS
:
:
ObjectOpResult
&
result
)
const
{
ErrorResult
rv
;
rv
.
ThrowTypeError
<
MSG_DEFINEPROPERTY_ON_GSP
>
(
)
;
MOZ_ALWAYS_TRUE
(
rv
.
MaybeSetPendingException
(
aCx
)
)
;
return
false
;
}
bool
WindowNamedPropertiesHandler
:
:
ownPropNames
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
unsigned
flags
JS
:
:
AutoIdVector
&
aProps
)
const
{
if
(
!
(
flags
&
JSITER_HIDDEN
)
)
{
return
true
;
}
nsGlobalWindow
*
win
=
xpc
:
:
WindowOrNull
(
JS_GetGlobalForObject
(
aCx
aProxy
)
)
;
nsTArray
<
nsString
>
names
;
nsGlobalWindow
*
outer
=
win
-
>
GetOuterWindowInternal
(
)
;
if
(
outer
)
{
nsDOMWindowList
*
childWindows
=
outer
-
>
GetWindowList
(
)
;
if
(
childWindows
)
{
uint32_t
length
=
childWindows
-
>
GetLength
(
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
item
=
childWindows
-
>
GetDocShellTreeItemAt
(
i
)
;
nsString
name
;
item
-
>
GetName
(
name
)
;
if
(
!
names
.
Contains
(
name
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
childWin
=
win
-
>
GetChildWindow
(
name
)
;
if
(
childWin
&
&
ShouldExposeChildWindow
(
name
childWin
)
)
{
names
.
AppendElement
(
name
)
;
}
}
}
}
}
if
(
!
AppendNamedPropertyIds
(
aCx
aProxy
names
false
aProps
)
)
{
return
false
;
}
names
.
Clear
(
)
;
nsCOMPtr
<
nsIHTMLDocument
>
htmlDoc
=
do_QueryInterface
(
win
-
>
GetExtantDoc
(
)
)
;
if
(
!
htmlDoc
)
{
return
true
;
}
nsHTMLDocument
*
document
=
static_cast
<
nsHTMLDocument
*
>
(
htmlDoc
.
get
(
)
)
;
document
-
>
GetSupportedNames
(
names
)
;
JS
:
:
AutoIdVector
docProps
(
aCx
)
;
if
(
!
AppendNamedPropertyIds
(
aCx
aProxy
names
false
docProps
)
)
{
return
false
;
}
return
js
:
:
AppendUnique
(
aCx
aProps
docProps
)
;
}
bool
WindowNamedPropertiesHandler
:
:
delete_
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProxy
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
ObjectOpResult
&
aResult
)
const
{
return
aResult
.
failCantDeleteWindowNamedProperty
(
)
;
}
static
bool
IsWebExtensionContentScript
(
JSContext
*
aCx
)
{
auto
*
priv
=
xpc
:
:
CompartmentPrivate
:
:
Get
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
return
priv
-
>
isWebExtensionContentScript
;
}
static
const
int32_t
kAlwaysAllowNamedPropertiesObject
=
0
;
static
const
int32_t
kDisallowNamedPropertiesObjectForContentScripts
=
1
;
static
const
int32_t
kDisallowNamedPropertiesObjectForXrays
=
2
;
static
bool
AllowNamedPropertiesObject
(
JSContext
*
aCx
)
{
static
int32_t
sAllowed
;
static
bool
sAllowedCached
=
false
;
if
(
!
sAllowedCached
)
{
Preferences
:
:
AddIntVarCache
(
&
sAllowed
"
dom
.
allow_named_properties_object_for_xrays
"
kDisallowNamedPropertiesObjectForContentScripts
)
;
sAllowedCached
=
true
;
}
if
(
sAllowed
=
=
kDisallowNamedPropertiesObjectForXrays
)
{
return
false
;
}
if
(
sAllowed
=
=
kAlwaysAllowNamedPropertiesObject
)
{
return
true
;
}
if
(
sAllowed
=
=
kDisallowNamedPropertiesObjectForContentScripts
)
{
return
!
IsWebExtensionContentScript
(
aCx
)
;
}
NS_WARNING
(
"
Unknown
value
for
dom
.
allow_named_properties_object_for_xrays
"
)
;
return
true
;
}
static
bool
ResolveWindowNamedProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aWrapper
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
{
if
(
!
AllowNamedPropertiesObject
(
aCx
)
)
{
return
true
;
}
{
JSAutoCompartment
ac
(
aCx
aObj
)
;
if
(
!
js
:
:
GetProxyHandler
(
aObj
)
-
>
getOwnPropertyDescriptor
(
aCx
aObj
aId
aDesc
)
)
{
return
false
;
}
}
if
(
aDesc
.
object
(
)
)
{
aDesc
.
object
(
)
.
set
(
aWrapper
)
;
return
JS_WrapPropertyDescriptor
(
aCx
aDesc
)
;
}
return
true
;
}
static
bool
EnumerateWindowNamedProperties
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aWrapper
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
AutoIdVector
&
aProps
)
{
if
(
!
AllowNamedPropertiesObject
(
aCx
)
)
{
return
true
;
}
JSAutoCompartment
ac
(
aCx
aObj
)
;
return
js
:
:
GetProxyHandler
(
aObj
)
-
>
ownPropertyKeys
(
aCx
aObj
aProps
)
;
}
const
NativePropertyHooks
sWindowNamedPropertiesNativePropertyHooks
[
]
=
{
{
ResolveWindowNamedProperty
EnumerateWindowNamedProperties
nullptr
{
nullptr
nullptr
}
prototypes
:
:
id
:
:
_ID_Count
constructors
:
:
id
:
:
_ID_Count
nullptr
}
}
;
static
const
DOMIfaceAndProtoJSClass
WindowNamedPropertiesClass
=
{
PROXY_CLASS_DEF
(
"
WindowProperties
"
JSCLASS_IS_DOMIFACEANDPROTOJSCLASS
|
JSCLASS_HAS_RESERVED_SLOTS
(
1
)
)
eNamedPropertiesObject
false
prototypes
:
:
id
:
:
_ID_Count
0
sWindowNamedPropertiesNativePropertyHooks
"
[
object
WindowProperties
]
"
EventTargetBinding
:
:
GetProtoObject
}
;
JSObject
*
WindowNamedPropertiesHandler
:
:
Create
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProto
)
{
js
:
:
ProxyOptions
options
;
options
.
setSingleton
(
true
)
;
options
.
setClass
(
&
WindowNamedPropertiesClass
.
mBase
)
;
JS
:
:
Rooted
<
JSObject
*
>
gsp
(
aCx
)
;
gsp
=
js
:
:
NewProxyObject
(
aCx
WindowNamedPropertiesHandler
:
:
getInstance
(
)
JS
:
:
NullHandleValue
aProto
options
)
;
if
(
!
gsp
)
{
return
nullptr
;
}
bool
succeeded
;
if
(
!
JS_SetImmutablePrototype
(
aCx
gsp
&
succeeded
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
succeeded
"
errors
making
the
[
[
Prototype
]
]
of
the
named
properties
object
"
"
immutable
should
have
been
JSAPI
failures
not
!
succeeded
"
)
;
return
gsp
;
}
}
}
