#
include
"
js
/
SliceBudget
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
MainThreadIdlePeriod
.
h
"
#
include
"
nsCycleCollector
.
h
"
static
const
TimeDuration
kOneMinute
=
TimeDuration
:
:
FromSeconds
(
60
.
0f
)
;
static
const
TimeDuration
kCCDelay
=
TimeDuration
:
:
FromSeconds
(
6
)
;
static
const
TimeDuration
kCCSkippableDelay
=
TimeDuration
:
:
FromMilliseconds
(
250
)
;
static
const
TimeDuration
kTimeBetweenForgetSkippableCycles
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kForgetSkippableSliceDuration
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kICCIntersliceDelay
=
TimeDuration
:
:
FromMilliseconds
(
64
)
;
static
const
TimeDuration
kICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
3
)
;
static
const
TimeDuration
kIdleICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kMaxICCDuration
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kCCForced
=
kOneMinute
*
2
;
static
const
uint32_t
kCCForcedPurpleLimit
=
10
;
static
const
TimeDuration
kMaxCCLockedoutTime
=
TimeDuration
:
:
FromSeconds
(
30
)
;
static
const
uint32_t
kCCPurpleLimit
=
200
;
namespace
mozilla
{
class
CCGCScheduler
{
public
:
void
SetActiveIntersliceGCBudget
(
TimeDuration
aDuration
)
{
mActiveIntersliceGCBudget
=
aDuration
;
}
Maybe
<
TimeDuration
>
GetCCBlockedTime
(
TimeStamp
now
)
const
{
MOZ_ASSERT_IF
(
mCCBlockStart
.
IsNull
(
)
!
mInIncrementalGC
)
;
if
(
mCCBlockStart
.
IsNull
(
)
)
{
return
{
}
;
}
return
Some
(
now
-
mCCBlockStart
)
;
}
bool
InIncrementalGC
(
)
const
{
return
mInIncrementalGC
;
}
void
NoteGCBegin
(
)
{
mInIncrementalGC
=
true
;
}
void
NoteGCEnd
(
)
{
mCCBlockStart
=
TimeStamp
(
)
;
mInIncrementalGC
=
false
;
}
enum
IsStartingCCLockout
{
StartingLockout
=
true
AlreadyLockedOut
=
false
}
;
IsStartingCCLockout
EnsureCCIsBlocked
(
TimeStamp
aNow
)
{
MOZ_ASSERT
(
mInIncrementalGC
)
;
if
(
mCCBlockStart
)
{
return
AlreadyLockedOut
;
}
mCCBlockStart
=
aNow
;
return
StartingLockout
;
}
void
UnblockCC
(
)
{
mCCBlockStart
=
TimeStamp
(
)
;
}
TimeDuration
ComputeInterSliceGCBudget
(
TimeStamp
aDeadline
)
const
{
TimeDuration
budget
=
aDeadline
.
IsNull
(
)
?
mActiveIntersliceGCBudget
*
2
:
aDeadline
-
TimeStamp
:
:
Now
(
)
;
if
(
!
mCCBlockStart
)
{
return
budget
;
}
TimeDuration
blockedTime
=
TimeStamp
:
:
Now
(
)
-
mCCBlockStart
;
TimeDuration
maxSliceGCBudget
=
mActiveIntersliceGCBudget
*
10
;
double
percentOfBlockedTime
=
std
:
:
min
(
blockedTime
/
kMaxCCLockedoutTime
1
.
0
)
;
return
std
:
:
max
(
budget
maxSliceGCBudget
.
MultDouble
(
percentOfBlockedTime
)
)
;
}
bool
mInIncrementalGC
=
false
;
TimeStamp
mCCBlockStart
;
TimeDuration
mActiveIntersliceGCBudget
=
TimeDuration
:
:
FromMilliseconds
(
5
)
;
}
;
}
