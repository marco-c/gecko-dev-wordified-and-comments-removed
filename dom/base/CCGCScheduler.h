#
include
"
js
/
SliceBudget
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
MainThreadIdlePeriod
.
h
"
#
include
"
nsCycleCollector
.
h
"
static
const
TimeDuration
kOneMinute
=
TimeDuration
:
:
FromSeconds
(
60
.
0f
)
;
static
const
TimeDuration
kCCDelay
=
TimeDuration
:
:
FromSeconds
(
6
)
;
static
const
TimeDuration
kCCSkippableDelay
=
TimeDuration
:
:
FromMilliseconds
(
250
)
;
static
const
TimeDuration
kTimeBetweenForgetSkippableCycles
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kForgetSkippableSliceDuration
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kICCIntersliceDelay
=
TimeDuration
:
:
FromMilliseconds
(
64
)
;
static
const
TimeDuration
kICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
3
)
;
static
const
TimeDuration
kIdleICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kMaxICCDuration
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kCCForced
=
kOneMinute
*
2
;
static
const
uint32_t
kCCForcedPurpleLimit
=
10
;
static
const
TimeDuration
kMaxCCLockedoutTime
=
TimeDuration
:
:
FromSeconds
(
30
)
;
static
const
uint32_t
kCCPurpleLimit
=
200
;
namespace
mozilla
{
MOZ_ALWAYS_INLINE
static
TimeDuration
TimeBetween
(
TimeStamp
aStart
TimeStamp
aEnd
)
{
MOZ_ASSERT
(
aEnd
>
=
aStart
)
;
return
aEnd
-
aStart
;
}
static
inline
js
:
:
SliceBudget
BudgetFromDuration
(
TimeDuration
aDuration
)
{
return
js
:
:
SliceBudget
(
js
:
:
TimeBudget
(
aDuration
.
ToMilliseconds
(
)
)
)
;
}
class
CCGCScheduler
{
public
:
void
SetActiveIntersliceGCBudget
(
TimeDuration
aDuration
)
{
mActiveIntersliceGCBudget
=
aDuration
;
}
Maybe
<
TimeDuration
>
GetCCBlockedTime
(
TimeStamp
now
)
const
{
MOZ_ASSERT_IF
(
mCCBlockStart
.
IsNull
(
)
!
mInIncrementalGC
)
;
if
(
mCCBlockStart
.
IsNull
(
)
)
{
return
{
}
;
}
return
Some
(
now
-
mCCBlockStart
)
;
}
bool
InIncrementalGC
(
)
const
{
return
mInIncrementalGC
;
}
TimeStamp
GetLastCCEndTime
(
)
const
{
return
mLastCCEndTime
;
}
bool
IsEarlyForgetSkippable
(
uint32_t
aN
=
kMajorForgetSkippableCalls
)
const
{
return
mCleanupsSinceLastGC
<
aN
;
}
void
SetNeedsFullCC
(
)
{
mNeedsFullCC
=
true
;
}
void
NoteGCBegin
(
)
{
mInIncrementalGC
=
true
;
}
void
NoteGCEnd
(
)
{
mCCBlockStart
=
TimeStamp
(
)
;
mCleanupsSinceLastGC
=
0
;
mInIncrementalGC
=
false
;
}
enum
IsStartingCCLockout
{
StartingLockout
=
true
AlreadyLockedOut
=
false
}
;
IsStartingCCLockout
EnsureCCIsBlocked
(
TimeStamp
aNow
)
{
MOZ_ASSERT
(
mInIncrementalGC
)
;
if
(
mCCBlockStart
)
{
return
AlreadyLockedOut
;
}
mCCBlockStart
=
aNow
;
return
StartingLockout
;
}
void
UnblockCC
(
)
{
mCCBlockStart
=
TimeStamp
(
)
;
}
uint32_t
NoteForgetSkippableComplete
(
TimeStamp
aNow
uint32_t
aSuspectedBeforeForgetSkippable
)
{
mLastForgetSkippableEndTime
=
aNow
;
uint32_t
suspected
=
nsCycleCollector_suspectedCount
(
)
;
mPreviousSuspectedCount
=
suspected
;
mCleanupsSinceLastGC
+
+
;
return
aSuspectedBeforeForgetSkippable
-
suspected
;
}
void
NoteCCEnd
(
TimeStamp
aWhen
)
{
mLastCCEndTime
=
aWhen
;
mNeedsFullCC
=
false
;
}
void
NoteForgetSkippableOnlyCycle
(
)
{
mLastForgetSkippableCycleEndTime
=
TimeStamp
:
:
Now
(
)
;
}
TimeDuration
ComputeInterSliceGCBudget
(
TimeStamp
aDeadline
)
const
{
TimeDuration
budget
=
aDeadline
.
IsNull
(
)
?
mActiveIntersliceGCBudget
*
2
:
aDeadline
-
TimeStamp
:
:
Now
(
)
;
if
(
!
mCCBlockStart
)
{
return
budget
;
}
TimeDuration
blockedTime
=
TimeStamp
:
:
Now
(
)
-
mCCBlockStart
;
TimeDuration
maxSliceGCBudget
=
mActiveIntersliceGCBudget
*
10
;
double
percentOfBlockedTime
=
std
:
:
min
(
blockedTime
/
kMaxCCLockedoutTime
1
.
0
)
;
return
std
:
:
max
(
budget
maxSliceGCBudget
.
MultDouble
(
percentOfBlockedTime
)
)
;
}
js
:
:
SliceBudget
ComputeCCSliceBudget
(
TimeStamp
aDeadline
TimeStamp
aCCBeginTime
TimeStamp
aPrevSliceEndTime
bool
*
aPreferShorterSlices
)
const
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
*
aPreferShorterSlices
=
aDeadline
.
IsNull
(
)
|
|
(
aDeadline
-
now
)
<
kICCSliceBudget
;
TimeDuration
baseBudget
=
aDeadline
.
IsNull
(
)
?
kICCSliceBudget
:
aDeadline
-
now
;
if
(
aCCBeginTime
.
IsNull
(
)
)
{
return
BudgetFromDuration
(
baseBudget
)
;
}
TimeDuration
runningTime
=
TimeBetween
(
aCCBeginTime
now
)
;
if
(
runningTime
>
=
kMaxICCDuration
)
{
return
js
:
:
SliceBudget
:
:
unlimited
(
)
;
}
const
TimeDuration
maxSlice
=
TimeDuration
:
:
FromMilliseconds
(
MainThreadIdlePeriod
:
:
GetLongIdlePeriod
(
)
)
;
double
sliceDelayMultiplier
=
TimeBetween
(
aPrevSliceEndTime
now
)
/
kICCIntersliceDelay
;
TimeDuration
delaySliceBudget
=
std
:
:
min
(
baseBudget
.
MultDouble
(
sliceDelayMultiplier
)
maxSlice
)
;
double
percentToHalfDone
=
std
:
:
min
(
2
.
0
*
(
runningTime
/
kMaxICCDuration
)
1
.
0
)
;
TimeDuration
laterSliceBudget
=
maxSlice
.
MultDouble
(
percentToHalfDone
)
;
return
BudgetFromDuration
(
std
:
:
max
(
{
delaySliceBudget
laterSliceBudget
baseBudget
}
)
)
;
}
bool
ShouldFireForgetSkippable
(
uint32_t
aSuspected
)
const
{
return
(
(
mPreviousSuspectedCount
+
100
)
<
=
aSuspected
)
|
|
mCleanupsSinceLastGC
<
kMajorForgetSkippableCalls
;
}
bool
IsCCNeeded
(
uint32_t
aSuspected
TimeStamp
aNow
=
TimeStamp
:
:
Now
(
)
)
const
{
return
mNeedsFullCC
|
|
aSuspected
>
kCCPurpleLimit
|
|
(
aSuspected
>
kCCForcedPurpleLimit
&
&
mLastCCEndTime
&
&
aNow
-
mLastCCEndTime
>
kCCForced
)
;
}
bool
ShouldScheduleCC
(
)
const
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
mCleanupsSinceLastGC
&
&
!
mLastCCEndTime
.
IsNull
(
)
)
{
if
(
now
-
mLastCCEndTime
<
kCCDelay
)
{
return
false
;
}
}
if
(
(
mCleanupsSinceLastGC
>
kMajorForgetSkippableCalls
)
&
&
!
mLastForgetSkippableCycleEndTime
.
IsNull
(
)
)
{
if
(
now
-
mLastForgetSkippableCycleEndTime
<
kTimeBetweenForgetSkippableCycles
)
{
return
false
;
}
}
return
IsCCNeeded
(
nsCycleCollector_suspectedCount
(
)
now
)
;
}
bool
IsLastEarlyCCTimer
(
int32_t
aCurrentFireCount
)
{
int32_t
numEarlyTimerFires
=
std
:
:
max
(
int32_t
(
mCCDelay
/
kCCSkippableDelay
)
-
2
1
)
;
return
aCurrentFireCount
>
=
numEarlyTimerFires
;
}
enum
class
CCRunnerAction
{
None
ForgetSkippable
CleanupContentUnbinder
CleanupDeferred
CycleCollect
StopRunning
}
;
enum
class
CCRunnerState
{
Inactive
ReducePurple
CleanupChildless
CleanupContentUnbinder
CleanupDeferred
CycleCollect
}
;
enum
CCRunnerYield
{
Continue
Yield
}
;
enum
CCRunnerForgetSkippableRemoveChildless
{
KeepChildless
=
false
RemoveChildless
=
true
}
;
struct
CCRunnerStep
{
CCRunnerAction
mAction
;
CCRunnerYield
mYield
;
CCRunnerForgetSkippableRemoveChildless
mRemoveChildless
;
}
;
void
ActivateCCRunner
(
)
{
MOZ_ASSERT
(
mCCRunnerState
=
=
CCRunnerState
:
:
Inactive
)
;
mCCRunnerState
=
CCRunnerState
:
:
ReducePurple
;
mCCDelay
=
kCCDelay
;
mCCRunnerEarlyFireCount
=
0
;
}
void
DeactivateCCRunner
(
)
{
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
}
CCRunnerStep
GetNextCCRunnerAction
(
TimeStamp
aDeadline
uint32_t
aSuspected
)
{
if
(
mCCRunnerState
=
=
CCRunnerState
:
:
Inactive
)
{
return
{
CCRunnerAction
:
:
StopRunning
Yield
}
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
InIncrementalGC
(
)
)
{
if
(
EnsureCCIsBlocked
(
now
)
=
=
StartingLockout
)
{
mCCRunnerState
=
CCRunnerState
:
:
ReducePurple
;
mCCRunnerEarlyFireCount
=
0
;
mCCDelay
=
kCCDelay
/
int64_t
(
3
)
;
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
if
(
GetCCBlockedTime
(
now
)
.
value
(
)
<
kMaxCCLockedoutTime
)
{
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
}
switch
(
mCCRunnerState
)
{
case
CCRunnerState
:
:
ReducePurple
:
case
CCRunnerState
:
:
CleanupDeferred
:
break
;
default
:
if
(
!
IsCCNeeded
(
aSuspected
now
)
)
{
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
NoteForgetSkippableOnlyCycle
(
)
;
if
(
mCCRunnerState
!
=
CCRunnerState
:
:
CleanupContentUnbinder
&
&
ShouldFireForgetSkippable
(
aSuspected
)
)
{
return
{
CCRunnerAction
:
:
ForgetSkippable
Yield
KeepChildless
}
;
}
return
{
CCRunnerAction
:
:
StopRunning
Yield
}
;
}
}
switch
(
mCCRunnerState
)
{
case
CCRunnerState
:
:
ReducePurple
:
+
+
mCCRunnerEarlyFireCount
;
if
(
IsLastEarlyCCTimer
(
mCCRunnerEarlyFireCount
)
)
{
mCCRunnerState
=
CCRunnerState
:
:
CleanupChildless
;
}
if
(
ShouldFireForgetSkippable
(
aSuspected
)
)
{
return
{
CCRunnerAction
:
:
ForgetSkippable
Yield
KeepChildless
}
;
}
if
(
aDeadline
.
IsNull
(
)
)
{
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
mCCRunnerState
=
CCRunnerState
:
:
CleanupChildless
;
return
GetNextCCRunnerAction
(
aDeadline
aSuspected
)
;
case
CCRunnerState
:
:
CleanupChildless
:
mCCRunnerState
=
CCRunnerState
:
:
CleanupContentUnbinder
;
return
{
CCRunnerAction
:
:
ForgetSkippable
Yield
RemoveChildless
}
;
case
CCRunnerState
:
:
CleanupContentUnbinder
:
if
(
aDeadline
.
IsNull
(
)
)
{
mCCRunnerState
=
CCRunnerState
:
:
CycleCollect
;
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
if
(
now
>
=
aDeadline
)
{
mCCRunnerState
=
CCRunnerState
:
:
CycleCollect
;
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
mCCRunnerState
=
CCRunnerState
:
:
CleanupDeferred
;
return
{
CCRunnerAction
:
:
CleanupContentUnbinder
Continue
}
;
case
CCRunnerState
:
:
CleanupDeferred
:
MOZ_ASSERT
(
!
aDeadline
.
IsNull
(
)
"
Should
only
be
in
CleanupDeferred
state
when
idle
"
)
;
mCCRunnerState
=
CCRunnerState
:
:
CycleCollect
;
if
(
now
>
=
aDeadline
)
{
return
{
CCRunnerAction
:
:
None
Yield
}
;
}
return
{
CCRunnerAction
:
:
CleanupDeferred
Yield
}
;
case
CCRunnerState
:
:
CycleCollect
:
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
return
{
CCRunnerAction
:
:
CycleCollect
Yield
}
;
default
:
MOZ_CRASH
(
"
Unexpected
CCRunner
state
"
)
;
}
;
}
js
:
:
SliceBudget
ComputeForgetSkippableBudget
(
TimeStamp
aStartTimeStamp
TimeStamp
aDeadline
)
{
if
(
mForgetSkippableFrequencyStartTime
.
IsNull
(
)
)
{
mForgetSkippableFrequencyStartTime
=
aStartTimeStamp
;
}
else
if
(
aStartTimeStamp
-
mForgetSkippableFrequencyStartTime
>
kOneMinute
)
{
TimeStamp
startPlusMinute
=
mForgetSkippableFrequencyStartTime
+
kOneMinute
;
TimeStamp
endPoint
=
std
:
:
max
(
startPlusMinute
mLastForgetSkippableEndTime
)
;
double
duration
=
(
endPoint
-
mForgetSkippableFrequencyStartTime
)
.
ToSeconds
(
)
/
60
;
uint32_t
frequencyPerMinute
=
uint32_t
(
mForgetSkippableCounter
/
duration
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FORGET_SKIPPABLE_FREQUENCY
frequencyPerMinute
)
;
mForgetSkippableCounter
=
0
;
mForgetSkippableFrequencyStartTime
=
aStartTimeStamp
;
}
+
+
mForgetSkippableCounter
;
TimeDuration
budgetTime
=
aDeadline
?
(
aDeadline
-
aStartTimeStamp
)
:
kForgetSkippableSliceDuration
;
return
BudgetFromDuration
(
budgetTime
)
;
}
bool
mInIncrementalGC
=
false
;
TimeStamp
mCCBlockStart
;
TimeStamp
mLastForgetSkippableEndTime
;
uint32_t
mForgetSkippableCounter
=
0
;
TimeStamp
mForgetSkippableFrequencyStartTime
;
TimeStamp
mLastCCEndTime
;
TimeStamp
mLastForgetSkippableCycleEndTime
;
CCRunnerState
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
int32_t
mCCRunnerEarlyFireCount
=
0
;
TimeDuration
mCCDelay
=
kCCDelay
;
bool
mNeedsFullCC
=
false
;
uint32_t
mPreviousSuspectedCount
=
0
;
uint32_t
mCleanupsSinceLastGC
=
UINT32_MAX
;
TimeDuration
mActiveIntersliceGCBudget
=
TimeDuration
:
:
FromMilliseconds
(
5
)
;
}
;
}
