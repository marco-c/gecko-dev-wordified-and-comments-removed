#
include
"
js
/
SliceBudget
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
IdleTaskRunner
.
h
"
#
include
"
mozilla
/
MainThreadIdlePeriod
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
ipc
/
IdleSchedulerChild
.
h
"
#
include
"
nsCycleCollector
.
h
"
#
include
"
nsJSEnvironment
.
h
"
namespace
mozilla
{
static
const
TimeDuration
kOneMinute
=
TimeDuration
:
:
FromSeconds
(
60
.
0f
)
;
static
const
TimeDuration
kCCDelay
=
TimeDuration
:
:
FromSeconds
(
6
)
;
static
const
TimeDuration
kCCSkippableDelay
=
TimeDuration
:
:
FromMilliseconds
(
250
)
;
static
const
TimeDuration
kTimeBetweenForgetSkippableCycles
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kForgetSkippableSliceDuration
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kICCIntersliceDelay
=
TimeDuration
:
:
FromMilliseconds
(
64
)
;
static
const
TimeDuration
kICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
3
)
;
static
const
TimeDuration
kIdleICCSliceBudget
=
TimeDuration
:
:
FromMilliseconds
(
2
)
;
static
const
TimeDuration
kMaxICCDuration
=
TimeDuration
:
:
FromSeconds
(
2
)
;
static
const
TimeDuration
kCCForced
=
kOneMinute
*
2
;
static
const
uint32_t
kCCForcedPurpleLimit
=
10
;
static
const
TimeDuration
kMaxCCLockedoutTime
=
TimeDuration
:
:
FromSeconds
(
30
)
;
static
const
uint32_t
kCCPurpleLimit
=
200
;
static
const
int64_t
kNumCCNodesBetweenTimeChecks
=
1000
;
enum
class
GCRunnerAction
{
WaitToMajorGC
StartMajorGC
GCSlice
None
}
;
struct
GCRunnerStep
{
GCRunnerAction
mAction
;
JS
:
:
GCReason
mReason
;
}
;
enum
class
CCRunnerAction
{
None
ForgetSkippable
CleanupContentUnbinder
CleanupDeferred
CycleCollect
StopRunning
}
;
enum
CCRunnerYield
{
Continue
Yield
}
;
enum
CCRunnerForgetSkippableRemoveChildless
{
KeepChildless
=
false
RemoveChildless
=
true
}
;
struct
CCRunnerStep
{
CCRunnerAction
mAction
;
CCRunnerYield
mYield
;
CCRunnerForgetSkippableRemoveChildless
mRemoveChildless
;
}
;
class
CCGCScheduler
{
public
:
static
bool
CCRunnerFired
(
TimeStamp
aDeadline
)
;
void
SetActiveIntersliceGCBudget
(
TimeDuration
aDuration
)
{
mActiveIntersliceGCBudget
=
aDuration
;
}
TimeDuration
GetCCBlockedTime
(
TimeStamp
aNow
)
const
{
MOZ_ASSERT
(
mInIncrementalGC
)
;
MOZ_ASSERT
(
!
mCCBlockStart
.
IsNull
(
)
)
;
return
aNow
-
mCCBlockStart
;
}
bool
InIncrementalGC
(
)
const
{
return
mInIncrementalGC
;
}
TimeStamp
GetLastCCEndTime
(
)
const
{
return
mLastCCEndTime
;
}
bool
IsEarlyForgetSkippable
(
uint32_t
aN
=
kMajorForgetSkippableCalls
)
const
{
return
mCleanupsSinceLastGC
<
aN
;
}
bool
NeedsFullGC
(
)
const
{
return
mNeedsFullGC
;
}
void
PokeGC
(
JS
:
:
GCReason
aReason
JSObject
*
aObj
TimeDuration
aDelay
=
0
)
;
void
PokeShrinkingGC
(
)
;
void
PokeFullGC
(
)
;
void
MaybePokeCC
(
TimeStamp
aNow
uint32_t
aSuspectedCCObjects
)
;
void
UserIsInactive
(
)
;
void
UserIsActive
(
)
;
bool
IsUserActive
(
)
const
{
return
mUserIsActive
;
}
void
KillShrinkingGCTimer
(
)
;
void
KillFullGCTimer
(
)
;
void
KillGCRunner
(
)
;
void
KillCCRunner
(
)
;
void
KillAllTimersAndRunners
(
)
;
void
EnsureGCRunner
(
TimeDuration
aDelay
)
;
void
EnsureCCRunner
(
TimeDuration
aDelay
TimeDuration
aBudget
)
;
void
SetNeedsFullGC
(
bool
aNeedGC
=
true
)
{
mNeedsFullGC
=
aNeedGC
;
}
void
SetWantMajorGC
(
JS
:
:
GCReason
aReason
)
{
MOZ_ASSERT
(
aReason
!
=
JS
:
:
GCReason
:
:
NO_REASON
)
;
if
(
aReason
!
=
JS
:
:
GCReason
:
:
USER_INACTIVE
)
{
mWantAtLeastRegularGC
=
true
;
}
if
(
aReason
=
=
JS
:
:
GCReason
:
:
DOM_WINDOW_UTILS
)
{
SetNeedsFullGC
(
)
;
}
switch
(
aReason
)
{
case
JS
:
:
GCReason
:
:
USER_INACTIVE
:
mMajorGCReason
=
aReason
;
break
;
case
JS
:
:
GCReason
:
:
FULL_GC_TIMER
:
if
(
mMajorGCReason
!
=
JS
:
:
GCReason
:
:
USER_INACTIVE
)
{
mMajorGCReason
=
aReason
;
}
break
;
default
:
if
(
mMajorGCReason
!
=
JS
:
:
GCReason
:
:
USER_INACTIVE
&
&
mMajorGCReason
!
=
JS
:
:
GCReason
:
:
FULL_GC_TIMER
)
{
mMajorGCReason
=
aReason
;
}
break
;
}
}
void
EnsureCCThenGC
(
)
{
MOZ_ASSERT
(
mCCRunnerState
!
=
CCRunnerState
:
:
Inactive
)
;
mNeedsFullCC
=
true
;
mNeedsGCAfterCC
=
true
;
}
[
[
nodiscard
]
]
bool
NoteReadyForMajorGC
(
)
{
if
(
mMajorGCReason
=
=
JS
:
:
GCReason
:
:
NO_REASON
|
|
InIncrementalGC
(
)
)
{
return
false
;
}
mReadyForMajorGC
=
true
;
return
true
;
}
void
NoteGCBegin
(
)
;
void
NoteGCEnd
(
)
;
void
NoteWontGC
(
)
;
void
NoteCCBegin
(
TimeStamp
aWhen
)
;
void
NoteCCEnd
(
TimeStamp
aWhen
)
;
void
NoteGCSliceEnd
(
TimeDuration
aSliceDuration
)
{
if
(
mMajorGCReason
=
=
JS
:
:
GCReason
:
:
NO_REASON
)
{
mReadyForMajorGC
=
true
;
}
mMajorGCReason
=
JS
:
:
GCReason
:
:
INTER_SLICE_GC
;
mGCUnnotifiedTotalTime
+
=
aSliceDuration
;
}
bool
GCRunnerFired
(
TimeStamp
aDeadline
)
;
bool
GCRunnerFiredDoGC
(
TimeStamp
aDeadline
const
GCRunnerStep
&
aStep
)
;
using
MayGCPromise
=
MozPromise
<
bool
mozilla
:
:
ipc
:
:
ResponseRejectReason
true
>
;
static
RefPtr
<
MayGCPromise
>
MayGCNow
(
JS
:
:
GCReason
reason
)
;
void
RunNextCollectorTimer
(
JS
:
:
GCReason
aReason
mozilla
:
:
TimeStamp
aDeadline
)
;
void
BlockCC
(
TimeStamp
aNow
)
{
MOZ_ASSERT
(
mInIncrementalGC
)
;
MOZ_ASSERT
(
mCCBlockStart
.
IsNull
(
)
)
;
mCCBlockStart
=
aNow
;
}
void
UnblockCC
(
)
{
mCCBlockStart
=
TimeStamp
(
)
;
}
uint32_t
NoteForgetSkippableComplete
(
TimeStamp
aNow
uint32_t
aSuspectedBeforeForgetSkippable
uint32_t
aSuspectedCCObjects
)
{
mLastForgetSkippableEndTime
=
aNow
;
mPreviousSuspectedCount
=
aSuspectedCCObjects
;
mCleanupsSinceLastGC
+
+
;
return
aSuspectedBeforeForgetSkippable
-
aSuspectedCCObjects
;
}
void
NoteCycleCollected
(
const
CycleCollectorResults
&
aResults
)
{
mCCollectedWaitingForGC
+
=
aResults
.
mFreedGCed
;
mCCollectedZonesWaitingForGC
+
=
aResults
.
mFreedJSZones
;
}
bool
IsCollectingCycles
(
)
const
{
return
mIsCollectingCycles
;
}
void
NoteForgetSkippableOnlyCycle
(
TimeStamp
aNow
)
{
mLastForgetSkippableCycleEndTime
=
aNow
;
}
void
Shutdown
(
)
{
mDidShutdown
=
true
;
KillAllTimersAndRunners
(
)
;
}
js
:
:
SliceBudget
ComputeCCSliceBudget
(
TimeStamp
aDeadline
TimeStamp
aCCBeginTime
TimeStamp
aPrevSliceEndTime
TimeStamp
aNow
bool
*
aPreferShorterSlices
)
const
;
TimeDuration
ComputeInterSliceGCBudget
(
TimeStamp
aDeadline
TimeStamp
aNow
)
const
;
bool
ShouldForgetSkippable
(
uint32_t
aSuspectedCCObjects
)
const
{
return
(
(
mPreviousSuspectedCount
+
100
)
<
=
aSuspectedCCObjects
)
|
|
mCleanupsSinceLastGC
<
kMajorForgetSkippableCalls
;
}
bool
IsCCNeeded
(
TimeStamp
aNow
uint32_t
aSuspectedCCObjects
)
const
{
if
(
mNeedsFullCC
)
{
return
true
;
}
return
aSuspectedCCObjects
>
kCCPurpleLimit
|
|
(
aSuspectedCCObjects
>
kCCForcedPurpleLimit
&
&
mLastCCEndTime
&
&
aNow
-
mLastCCEndTime
>
kCCForced
)
;
}
bool
ShouldScheduleCC
(
TimeStamp
aNow
uint32_t
aSuspectedCCObjects
)
const
;
bool
NeedsGCAfterCC
(
)
const
{
return
mCCollectedWaitingForGC
>
250
|
|
mCCollectedZonesWaitingForGC
>
0
|
|
mLikelyShortLivingObjectsNeedingGC
>
2500
|
|
mNeedsGCAfterCC
;
}
bool
IsLastEarlyCCTimer
(
int32_t
aCurrentFireCount
)
const
{
int32_t
numEarlyTimerFires
=
std
:
:
max
(
int32_t
(
mCCDelay
/
kCCSkippableDelay
)
-
2
1
)
;
return
aCurrentFireCount
>
=
numEarlyTimerFires
;
}
enum
class
CCRunnerState
{
Inactive
ReducePurple
CleanupChildless
CleanupContentUnbinder
CleanupDeferred
StartCycleCollection
CycleCollecting
Canceled
NumStates
}
;
void
InitCCRunnerStateMachine
(
CCRunnerState
initialState
)
{
if
(
mCCRunner
)
{
return
;
}
MOZ_ASSERT
(
mCCRunnerState
=
=
CCRunnerState
:
:
Inactive
"
DeactivateCCRunner
should
have
been
called
"
)
;
mCCRunnerState
=
initialState
;
if
(
initialState
=
=
CCRunnerState
:
:
ReducePurple
)
{
mCCDelay
=
kCCDelay
;
mCCRunnerEarlyFireCount
=
0
;
}
else
if
(
initialState
=
=
CCRunnerState
:
:
CycleCollecting
)
{
}
else
{
MOZ_CRASH
(
"
Invalid
initial
state
"
)
;
}
}
void
DeactivateCCRunner
(
)
{
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
}
GCRunnerStep
GetNextGCRunnerAction
(
)
const
;
CCRunnerStep
AdvanceCCRunner
(
TimeStamp
aDeadline
TimeStamp
aNow
uint32_t
aSuspectedCCObjects
)
;
js
:
:
SliceBudget
ComputeForgetSkippableBudget
(
TimeStamp
aStartTimeStamp
TimeStamp
aDeadline
)
;
private
:
bool
mInIncrementalGC
=
false
;
bool
mHaveAskedParent
=
false
;
bool
mReadyForMajorGC
=
false
;
bool
mWantAtLeastRegularGC
=
false
;
TimeStamp
mCCBlockStart
;
bool
mDidShutdown
=
false
;
TimeStamp
mLastForgetSkippableEndTime
;
uint32_t
mForgetSkippableCounter
=
0
;
TimeStamp
mForgetSkippableFrequencyStartTime
;
TimeStamp
mLastCCEndTime
;
TimeStamp
mLastForgetSkippableCycleEndTime
;
CCRunnerState
mCCRunnerState
=
CCRunnerState
:
:
Inactive
;
int32_t
mCCRunnerEarlyFireCount
=
0
;
TimeDuration
mCCDelay
=
kCCDelay
;
bool
mHasRunGC
=
false
;
bool
mNeedsFullCC
=
false
;
bool
mNeedsFullGC
=
true
;
bool
mNeedsGCAfterCC
=
false
;
uint32_t
mPreviousSuspectedCount
=
0
;
uint32_t
mCleanupsSinceLastGC
=
UINT32_MAX
;
TimeDuration
mGCUnnotifiedTotalTime
;
RefPtr
<
IdleTaskRunner
>
mGCRunner
;
RefPtr
<
IdleTaskRunner
>
mCCRunner
;
nsITimer
*
mShrinkingGCTimer
=
nullptr
;
nsITimer
*
mFullGCTimer
=
nullptr
;
JS
:
:
GCReason
mMajorGCReason
=
JS
:
:
GCReason
:
:
NO_REASON
;
bool
mIsCompactingOnUserInactive
=
false
;
bool
mIsCollectingCycles
=
false
;
bool
mUserIsActive
=
true
;
public
:
uint32_t
mCCollectedWaitingForGC
=
0
;
uint32_t
mCCollectedZonesWaitingForGC
=
0
;
uint32_t
mLikelyShortLivingObjectsNeedingGC
=
0
;
TimeDuration
mActiveIntersliceGCBudget
=
TimeDuration
:
:
FromMilliseconds
(
5
)
;
}
;
}
