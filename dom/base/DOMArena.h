#
ifndef
DOM_Arena_h___
#
define
DOM_Arena_h___
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozmemory
.
h
"
#
include
"
mozilla
/
mozalloc_oom
.
h
"
#
define
NS_DECL_DOMARENA_DESTROY
void
Destroy
(
void
)
;
#
define
NS_IMPL_DOMARENA_DESTROY
(
class
)
\
void
class
:
:
Destroy
(
void
)
{
\
if
(
StaticPrefs
:
:
dom_arena_allocator_enabled_AtStartup
(
)
)
{
\
RefPtr
<
nsNodeInfoManager
>
nim
=
OwnerDoc
(
)
-
>
NodeInfoManager
(
)
;
\
RefPtr
<
DOMArena
>
arena
=
\
HasFlag
(
NODE_KEEPS_DOMARENA
)
\
?
nsContentUtils
:
:
TakeEntryFromDOMArenaTable
(
this
)
\
:
nullptr
;
\
this
-
>
~
class
(
)
;
\
MOZ_ASSERT
(
nim
"
nsNodeInfoManager
needs
to
be
initialized
"
)
;
\
nim
-
>
Free
(
this
)
;
\
}
else
{
\
delete
this
;
\
}
\
}
namespace
mozilla
:
:
dom
{
class
DOMArena
{
public
:
friend
class
DocGroup
;
DOMArena
(
)
{
arena_params_t
params
;
params
.
mMaxDirtyIncreaseOverride
=
5
;
mArenaId
=
moz_create_arena_with_params
(
&
params
)
;
}
NS_INLINE_DECL_REFCOUNTING
(
DOMArena
)
void
*
Allocate
(
size_t
aSize
)
{
void
*
ret
=
moz_arena_malloc
(
mArenaId
aSize
)
;
if
(
!
ret
)
{
mozalloc_handle_oom
(
aSize
)
;
}
return
ret
;
}
private
:
~
DOMArena
(
)
{
moz_dispose_arena
(
mArenaId
)
;
}
arena_id_t
mArenaId
;
}
;
}
#
endif
