#
ifndef
nsDocument_h___
#
define
nsDocument_h___
#
include
"
nsIDocument
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIdentifierMapEntry
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsStubDocumentObserver
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIParser
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsJSThingHashtable
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIRadioGroupContainer
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsILoadGroup
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIApplicationCache
.
h
"
#
include
"
nsIApplicationCacheContainer
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
nsAttrAndChildArray
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIProgressEventSink
.
h
"
#
include
"
nsISecurityEventSink
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
imgIRequest
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PendingAnimationTracker
.
h
"
#
include
"
mozilla
/
dom
/
BoxObject
.
h
"
#
include
"
mozilla
/
dom
/
DOMImplementation
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
mozilla
/
dom
/
StyleSheetList
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
CustomElementRegistry
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIURIClassifier
.
h
"
#
define
XML_DECLARATION_BITS_DECLARATION_EXISTS
(
1
<
<
0
)
#
define
XML_DECLARATION_BITS_ENCODING_EXISTS
(
1
<
<
1
)
#
define
XML_DECLARATION_BITS_STANDALONE_EXISTS
(
1
<
<
2
)
#
define
XML_DECLARATION_BITS_STANDALONE_YES
(
1
<
<
3
)
class
nsDOMStyleSheetSetList
;
class
nsDocument
;
class
nsIRadioVisitor
;
class
nsIFormControl
;
struct
nsRadioGroupStruct
;
class
nsOnloadBlocker
;
class
nsUnblockOnloadEvent
;
class
nsDOMNavigationTiming
;
class
nsWindowSizes
;
class
nsHtml5TreeOpExecutor
;
class
nsDocumentOnStack
;
class
nsISecurityConsoleMessage
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
ImageTracker
;
struct
LifecycleCallbacks
;
class
CallbackFunction
;
class
DOMIntersectionObserver
;
class
Performance
;
struct
FullscreenRequest
:
public
LinkedListElement
<
FullscreenRequest
>
{
explicit
FullscreenRequest
(
Element
*
aElement
)
;
FullscreenRequest
(
const
FullscreenRequest
&
)
=
delete
;
~
FullscreenRequest
(
)
;
Element
*
GetElement
(
)
const
{
return
mElement
;
}
nsDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
private
:
RefPtr
<
Element
>
mElement
;
RefPtr
<
nsDocument
>
mDocument
;
public
:
bool
mIsCallerChrome
=
false
;
bool
mShouldNotifyNewOrigin
=
true
;
}
;
}
}
class
nsOnloadBlocker
final
:
public
nsIRequest
{
public
:
nsOnloadBlocker
(
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUEST
private
:
~
nsOnloadBlocker
(
)
{
}
}
;
class
nsExternalResourceMap
{
public
:
typedef
nsIDocument
:
:
ExternalResourceLoad
ExternalResourceLoad
;
nsExternalResourceMap
(
)
;
nsIDocument
*
RequestResource
(
nsIURI
*
aURI
nsINode
*
aRequestingNode
nsDocument
*
aDisplayDocument
ExternalResourceLoad
*
*
aPendingLoad
)
;
void
EnumerateResources
(
nsIDocument
:
:
nsSubDocEnumFunc
aCallback
void
*
aData
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
*
aCallback
)
const
;
void
Shutdown
(
)
{
mPendingLoads
.
Clear
(
)
;
mMap
.
Clear
(
)
;
mHaveShutDown
=
true
;
}
bool
HaveShutDown
(
)
const
{
return
mHaveShutDown
;
}
struct
ExternalResource
{
~
ExternalResource
(
)
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
nsCOMPtr
<
nsIContentViewer
>
mViewer
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
}
;
void
HideViewers
(
)
;
void
ShowViewers
(
)
;
protected
:
class
PendingLoad
:
public
ExternalResourceLoad
public
nsIStreamListener
{
~
PendingLoad
(
)
{
}
public
:
explicit
PendingLoad
(
nsDocument
*
aDisplayDocument
)
:
mDisplayDocument
(
aDisplayDocument
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
nsresult
StartLoad
(
nsIURI
*
aURI
nsINode
*
aRequestingNode
)
;
nsresult
SetupViewer
(
nsIRequest
*
aRequest
nsIContentViewer
*
*
aViewer
nsILoadGroup
*
*
aLoadGroup
)
;
private
:
RefPtr
<
nsDocument
>
mDisplayDocument
;
nsCOMPtr
<
nsIStreamListener
>
mTargetListener
;
nsCOMPtr
<
nsIURI
>
mURI
;
}
;
friend
class
PendingLoad
;
class
LoadgroupCallbacks
final
:
public
nsIInterfaceRequestor
{
~
LoadgroupCallbacks
(
)
{
}
public
:
explicit
LoadgroupCallbacks
(
nsIInterfaceRequestor
*
aOtherCallbacks
)
:
mCallbacks
(
aOtherCallbacks
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIINTERFACEREQUESTOR
private
:
nsCOMPtr
<
nsIInterfaceRequestor
>
mCallbacks
;
#
define
DECL_SHIM
(
_i
_allcaps
)
\
class
_i
#
#
Shim
final
:
public
nsIInterfaceRequestor
\
public
_i
\
{
\
~
_i
#
#
Shim
(
)
{
}
\
public
:
\
_i
#
#
Shim
(
nsIInterfaceRequestor
*
aIfreq
_i
*
aRealPtr
)
\
:
mIfReq
(
aIfreq
)
mRealPtr
(
aRealPtr
)
\
{
\
NS_ASSERTION
(
mIfReq
"
Expected
non
-
null
here
"
)
;
\
NS_ASSERTION
(
mRealPtr
"
Expected
non
-
null
here
"
)
;
\
}
\
NS_DECL_ISUPPORTS
\
NS_FORWARD_NSIINTERFACEREQUESTOR
(
mIfReq
-
>
)
\
NS_FORWARD_
#
#
_allcaps
(
mRealPtr
-
>
)
\
private
:
\
nsCOMPtr
<
nsIInterfaceRequestor
>
mIfReq
;
\
nsCOMPtr
<
_i
>
mRealPtr
;
\
}
;
DECL_SHIM
(
nsILoadContext
NSILOADCONTEXT
)
DECL_SHIM
(
nsIProgressEventSink
NSIPROGRESSEVENTSINK
)
DECL_SHIM
(
nsIChannelEventSink
NSICHANNELEVENTSINK
)
DECL_SHIM
(
nsISecurityEventSink
NSISECURITYEVENTSINK
)
DECL_SHIM
(
nsIApplicationCacheContainer
NSIAPPLICATIONCACHECONTAINER
)
#
undef
DECL_SHIM
}
;
nsresult
AddExternalResource
(
nsIURI
*
aURI
nsIContentViewer
*
aViewer
nsILoadGroup
*
aLoadGroup
nsIDocument
*
aDisplayDocument
)
;
nsClassHashtable
<
nsURIHashKey
ExternalResource
>
mMap
;
nsRefPtrHashtable
<
nsURIHashKey
PendingLoad
>
mPendingLoads
;
bool
mHaveShutDown
;
}
;
class
nsDocument
:
public
nsIDocument
public
nsIDOMDocument
public
nsSupportsWeakReference
public
nsIScriptObjectPrincipal
public
nsIRadioGroupContainer
public
nsIApplicationCacheContainer
public
nsStubMutationObserver
{
friend
class
nsIDocument
;
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
net
:
:
ReferrerPolicy
ReferrerPolicy
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_ADDSIZEOFEXCLUDINGTHIS
virtual
void
Reset
(
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
)
override
;
virtual
void
ResetToURI
(
nsIURI
*
aURI
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
)
override
;
already_AddRefed
<
nsIPrincipal
>
MaybeDowngradePrincipal
(
nsIPrincipal
*
aPrincipal
)
;
virtual
nsresult
StartDocumentLoad
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsISupports
*
aContainer
nsIStreamListener
*
*
aDocListener
bool
aReset
=
true
nsIContentSink
*
aContentSink
=
nullptr
)
override
=
0
;
virtual
void
StopDocumentLoad
(
)
override
;
virtual
void
SetContentType
(
const
nsAString
&
aContentType
)
override
;
virtual
void
SetDocumentCharacterSet
(
NotNull
<
const
Encoding
*
>
aEncoding
)
override
;
already_AddRefed
<
nsIPresShell
>
CreateShell
(
nsPresContext
*
aContext
nsViewManager
*
aViewManager
mozilla
:
:
StyleSetHandle
aStyleSet
)
final
;
virtual
void
DeleteShell
(
)
override
;
static
bool
CallerIsTrustedAboutPage
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsElementAnimateEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsWebAnimationsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsWebAnimationsEnabled
(
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
;
virtual
mozilla
:
:
dom
:
:
DocumentTimeline
*
Timeline
(
)
override
;
virtual
void
GetAnimations
(
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
Animation
>
>
&
aAnimations
)
override
;
mozilla
:
:
LinkedList
<
mozilla
:
:
dom
:
:
DocumentTimeline
>
&
Timelines
(
)
override
{
return
mTimelines
;
}
virtual
Element
*
GetRootElementInternal
(
)
const
override
;
virtual
nsIChannel
*
GetChannel
(
)
const
override
{
return
mChannel
;
}
virtual
nsIChannel
*
GetFailedChannel
(
)
const
override
{
return
mFailedChannel
;
}
virtual
void
SetFailedChannel
(
nsIChannel
*
aChannel
)
override
{
mFailedChannel
=
aChannel
;
}
virtual
void
SetScriptGlobalObject
(
nsIScriptGlobalObject
*
aGlobalObject
)
override
;
virtual
void
SetScriptHandlingObject
(
nsIScriptGlobalObject
*
aScriptObject
)
override
;
virtual
nsIGlobalObject
*
GetScopeObject
(
)
const
override
;
void
SetScopeObject
(
nsIGlobalObject
*
aGlobal
)
override
;
virtual
mozilla
:
:
dom
:
:
ScriptLoader
*
ScriptLoader
(
)
override
;
virtual
void
AddToIdTable
(
Element
*
aElement
nsAtom
*
aId
)
override
;
virtual
void
RemoveFromIdTable
(
Element
*
aElement
nsAtom
*
aId
)
override
;
virtual
void
AddToNameTable
(
Element
*
aElement
nsAtom
*
aName
)
override
;
virtual
void
RemoveFromNameTable
(
Element
*
aElement
nsAtom
*
aName
)
override
;
virtual
void
EndUpdate
(
nsUpdateType
aUpdateType
)
override
;
virtual
void
BeginLoad
(
)
override
;
virtual
void
EndLoad
(
)
override
;
virtual
void
FlushExternalResources
(
mozilla
:
:
FlushType
aType
)
override
;
virtual
void
SetXMLDeclaration
(
const
char16_t
*
aVersion
const
char16_t
*
aEncoding
const
int32_t
aStandalone
)
override
;
virtual
void
GetXMLDeclaration
(
nsAString
&
aVersion
nsAString
&
aEncoding
nsAString
&
Standalone
)
override
;
virtual
bool
IsScriptEnabled
(
)
override
;
virtual
void
OnPageShow
(
bool
aPersisted
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchStartTarget
)
override
;
virtual
void
OnPageHide
(
bool
aPersisted
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchStartTarget
)
override
;
virtual
void
WillDispatchMutationEvent
(
nsINode
*
aTarget
)
override
;
virtual
void
MutationEventDispatched
(
nsINode
*
aTarget
)
override
;
virtual
bool
IsNodeOfType
(
uint32_t
aFlags
)
const
override
;
virtual
nsIContent
*
GetChildAt_Deprecated
(
uint32_t
aIndex
)
const
override
;
virtual
int32_t
ComputeIndexOf
(
const
nsINode
*
aPossibleChild
)
const
override
;
virtual
uint32_t
GetChildCount
(
)
const
override
;
virtual
nsresult
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
)
override
;
virtual
nsresult
InsertChildAt_Deprecated
(
nsIContent
*
aKid
uint32_t
aIndex
bool
aNotify
)
override
;
virtual
void
RemoveChildAt_Deprecated
(
uint32_t
aIndex
bool
aNotify
)
override
;
virtual
void
RemoveChildNode
(
nsIContent
*
aKid
bool
aNotify
)
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHOD
WalkRadioGroup
(
const
nsAString
&
aName
nsIRadioVisitor
*
aVisitor
bool
aFlushContent
)
override
;
virtual
void
SetCurrentRadioButton
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
mozilla
:
:
dom
:
:
HTMLInputElement
*
GetCurrentRadioButton
(
const
nsAString
&
aName
)
override
;
NS_IMETHOD
GetNextRadioButton
(
const
nsAString
&
aName
const
bool
aPrevious
mozilla
:
:
dom
:
:
HTMLInputElement
*
aFocusedRadio
mozilla
:
:
dom
:
:
HTMLInputElement
*
*
aRadioOut
)
override
;
virtual
void
AddToRadioGroup
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
void
RemoveFromRadioGroup
(
const
nsAString
&
aName
mozilla
:
:
dom
:
:
HTMLInputElement
*
aRadio
)
override
;
virtual
uint32_t
GetRequiredRadioCount
(
const
nsAString
&
aName
)
const
override
;
virtual
void
RadioRequiredWillChange
(
const
nsAString
&
aName
bool
aRequiredAdded
)
override
;
virtual
bool
GetValueMissingState
(
const
nsAString
&
aName
)
const
override
;
virtual
void
SetValueMissingState
(
const
nsAString
&
aName
bool
aValue
)
override
;
nsRadioGroupStruct
*
GetRadioGroup
(
const
nsAString
&
aName
)
const
;
nsRadioGroupStruct
*
GetOrCreateRadioGroup
(
const
nsAString
&
aName
)
;
virtual
nsViewportInfo
GetViewportInfo
(
const
mozilla
:
:
ScreenIntSize
&
aDisplaySize
)
override
;
enum
class
UseCounterReportKind
{
eDefault
eIncludeExternalResources
}
;
void
ReportUseCounters
(
UseCounterReportKind
aKind
=
UseCounterReportKind
:
:
eDefault
)
;
virtual
void
AddIntersectionObserver
(
mozilla
:
:
dom
:
:
DOMIntersectionObserver
*
aObserver
)
override
;
virtual
void
RemoveIntersectionObserver
(
mozilla
:
:
dom
:
:
DOMIntersectionObserver
*
aObserver
)
override
;
virtual
void
UpdateIntersectionObservations
(
)
override
;
virtual
void
ScheduleIntersectionObserverNotification
(
)
override
;
virtual
void
NotifyIntersectionObservers
(
)
override
;
virtual
bool
HasIntersectionObservers
(
)
const
override
{
return
!
mIntersectionObservers
.
IsEmpty
(
)
;
}
virtual
void
NotifyLayerManagerRecreated
(
)
override
;
bool
IsSynthesized
(
)
;
static
bool
IsShadowDOMEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
bool
IsShadowDOMEnabled
(
const
nsINode
*
aNode
)
;
private
:
void
SendToConsole
(
nsCOMArray
<
nsISecurityConsoleMessage
>
&
aMessages
)
;
public
:
NS_DECL_NSIDOMDOCUMENT
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementById
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByTagName
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByTagNameNS
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementsByClassName
;
virtual
nsresult
GetEventTargetParent
(
mozilla
:
:
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
mozilla
:
:
EventListenerManager
*
GetOrCreateListenerManager
(
)
override
;
virtual
mozilla
:
:
EventListenerManager
*
GetExistingListenerManager
(
)
const
override
;
virtual
nsIPrincipal
*
GetPrincipal
(
)
override
;
NS_DECL_NSIAPPLICATIONCACHECONTAINER
virtual
nsresult
Init
(
)
;
virtual
already_AddRefed
<
Element
>
CreateElem
(
const
nsAString
&
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
const
nsAString
*
aIs
=
nullptr
)
override
;
virtual
void
Sanitize
(
)
override
;
virtual
void
EnumerateSubDocuments
(
nsSubDocEnumFunc
aCallback
void
*
aData
)
override
;
virtual
void
CollectDescendantDocuments
(
nsTArray
<
nsCOMPtr
<
nsIDocument
>
>
&
aDescendants
nsDocTestFunc
aCallback
)
const
override
;
virtual
bool
CanSavePresentation
(
nsIRequest
*
aNewRequest
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
void
RemovedFromDocShell
(
)
override
;
virtual
already_AddRefed
<
nsILayoutHistoryState
>
GetLayoutHistoryState
(
)
const
override
;
virtual
void
BlockOnload
(
)
override
;
virtual
void
UnblockOnload
(
bool
aFireSync
)
override
;
virtual
void
ClearBoxObjectFor
(
nsIContent
*
aContent
)
override
;
virtual
already_AddRefed
<
mozilla
:
:
dom
:
:
BoxObject
>
GetBoxObjectFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
ErrorResult
&
aRv
)
override
;
virtual
Element
*
GetAnonymousElementByAttribute
(
nsIContent
*
aElement
nsAtom
*
aAttrName
const
nsAString
&
aAttrValue
)
const
override
;
virtual
nsresult
NodesFromRectHelper
(
float
aX
float
aY
float
aTopSize
float
aRightSize
float
aBottomSize
float
aLeftSize
bool
aIgnoreRootScrollFrame
bool
aFlushLayout
nsIDOMNodeList
*
*
aReturn
)
override
;
virtual
void
FlushSkinBindings
(
)
override
;
virtual
nsresult
InitializeFrameLoader
(
nsFrameLoader
*
aLoader
)
override
;
virtual
nsresult
FinalizeFrameLoader
(
nsFrameLoader
*
aLoader
nsIRunnable
*
aFinalizer
)
override
;
virtual
void
TryCancelFrameLoaderInitialization
(
nsIDocShell
*
aShell
)
override
;
virtual
nsIDocument
*
RequestExternalResource
(
nsIURI
*
aURI
nsINode
*
aRequestingNode
ExternalResourceLoad
*
*
aPendingLoad
)
override
;
virtual
void
EnumerateExternalResources
(
nsSubDocEnumFunc
aCallback
void
*
aData
)
override
;
nsSMILAnimationController
*
GetAnimationController
(
)
override
;
virtual
mozilla
:
:
PendingAnimationTracker
*
GetPendingAnimationTracker
(
)
final
{
return
mPendingAnimationTracker
;
}
virtual
mozilla
:
:
PendingAnimationTracker
*
GetOrCreatePendingAnimationTracker
(
)
override
;
virtual
void
SuppressEventHandling
(
uint32_t
aIncrease
)
override
;
virtual
void
UnsuppressEventHandlingAndFireEvents
(
bool
aFireEvents
)
override
;
void
DecreaseEventSuppression
(
)
{
MOZ_ASSERT
(
mEventsSuppressed
)
;
-
-
mEventsSuppressed
;
UpdateFrameRequestCallbackSchedulingState
(
)
;
}
virtual
nsIDocument
*
GetTemplateContentsOwner
(
)
override
;
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsDocument
nsIDocument
)
nsExternalResourceMap
&
ExternalResourceMap
(
)
{
return
mExternalResourceMap
;
}
void
SetLoadedAsData
(
bool
aLoadedAsData
)
{
mLoadedAsData
=
aLoadedAsData
;
}
void
SetLoadedAsInteractiveData
(
bool
aLoadedAsInteractiveData
)
{
mLoadedAsInteractiveData
=
aLoadedAsInteractiveData
;
}
nsresult
CloneDocHelper
(
nsDocument
*
clone
bool
aPreallocateChildren
)
const
;
void
MaybeInitializeFinalizeFrameLoaders
(
)
;
void
MaybeEndOutermostXBLUpdate
(
)
;
virtual
void
PreloadPictureOpened
(
)
override
;
virtual
void
PreloadPictureClosed
(
)
override
;
virtual
void
PreloadPictureImageSource
(
const
nsAString
&
aSrcsetAttr
const
nsAString
&
aSizesAttr
const
nsAString
&
aTypeAttr
const
nsAString
&
aMediaAttr
)
override
;
virtual
already_AddRefed
<
nsIURI
>
ResolvePreloadImage
(
nsIURI
*
aBaseURI
const
nsAString
&
aSrcAttr
const
nsAString
&
aSrcsetAttr
const
nsAString
&
aSizesAttr
bool
*
aIsImgSet
)
override
;
virtual
void
MaybePreLoadImage
(
nsIURI
*
uri
const
nsAString
&
aCrossOriginAttr
ReferrerPolicy
aReferrerPolicy
bool
aIsImgSet
)
override
;
virtual
void
ForgetImagePreload
(
nsIURI
*
aURI
)
override
;
virtual
void
MaybePreconnect
(
nsIURI
*
uri
mozilla
:
:
CORSMode
aCORSMode
)
override
;
virtual
nsISupports
*
GetCurrentContentSink
(
)
override
;
void
AsyncBlockOnload
(
)
;
virtual
void
SetScrollToRef
(
nsIURI
*
aDocumentURI
)
override
;
virtual
void
ScrollToRef
(
)
override
;
virtual
void
ResetScrolledToRefAlready
(
)
override
;
virtual
void
SetChangeScrollPosWhenScrollingToRef
(
bool
aValue
)
override
;
virtual
nsresult
AddPlugin
(
nsIObjectLoadingContent
*
aPlugin
)
override
;
virtual
void
RemovePlugin
(
nsIObjectLoadingContent
*
aPlugin
)
override
;
virtual
void
GetPlugins
(
nsTArray
<
nsIObjectLoadingContent
*
>
&
aPlugins
)
override
;
virtual
nsresult
AddResponsiveContent
(
nsIContent
*
aContent
)
override
;
virtual
void
RemoveResponsiveContent
(
nsIContent
*
aContent
)
override
;
virtual
void
NotifyMediaFeatureValuesChanged
(
)
override
;
virtual
nsresult
GetStateObject
(
nsIVariant
*
*
aResult
)
override
;
virtual
Element
*
FindImageMap
(
const
nsAString
&
aNormalizedMapName
)
override
;
virtual
nsTArray
<
Element
*
>
GetFullscreenStack
(
)
const
override
;
virtual
void
AsyncRequestFullScreen
(
mozilla
:
:
UniquePtr
<
FullscreenRequest
>
&
&
aRequest
)
override
;
virtual
void
RestorePreviousFullScreenState
(
)
override
;
virtual
bool
IsFullscreenLeaf
(
)
override
;
virtual
nsresult
RemoteFrameFullscreenChanged
(
nsIDOMElement
*
aFrameElement
)
override
;
virtual
nsresult
RemoteFrameFullscreenReverted
(
)
override
;
virtual
nsIDocument
*
GetFullscreenRoot
(
)
override
;
virtual
void
SetFullscreenRoot
(
nsIDocument
*
aRoot
)
override
;
long
BlockedTrackingNodeCount
(
)
const
;
already_AddRefed
<
nsSimpleContentList
>
BlockedTrackingNodes
(
)
const
;
bool
FullscreenElementReadyCheck
(
Element
*
aElement
bool
aWasCallerChrome
)
;
void
RequestFullScreen
(
mozilla
:
:
UniquePtr
<
FullscreenRequest
>
&
&
aRequest
)
;
void
CleanupFullscreenState
(
)
;
bool
FullScreenStackPush
(
Element
*
aElement
)
;
void
FullScreenStackPop
(
)
;
Element
*
FullScreenStackTop
(
)
override
;
bool
FullscreenEnabled
(
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
virtual
bool
AllowPaymentRequest
(
)
const
override
;
virtual
void
SetAllowPaymentRequest
(
bool
aIsAllowPaymentRequest
)
override
;
void
RequestPointerLock
(
Element
*
aElement
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
bool
SetPointerLock
(
Element
*
aElement
int
aCursorStyle
)
;
static
void
UnlockPointer
(
nsIDocument
*
aDoc
=
nullptr
)
;
void
SetCurrentOrientation
(
mozilla
:
:
dom
:
:
OrientationType
aType
uint16_t
aAngle
)
override
;
uint16_t
CurrentOrientationAngle
(
)
const
override
;
mozilla
:
:
dom
:
:
OrientationType
CurrentOrientationType
(
)
const
override
;
void
SetOrientationPendingPromise
(
mozilla
:
:
dom
:
:
Promise
*
aPromise
)
override
;
mozilla
:
:
dom
:
:
Promise
*
GetOrientationPendingPromise
(
)
const
override
;
void
UpdateVisibilityState
(
)
;
virtual
void
PostVisibilityUpdateEvent
(
)
override
;
void
MaybeActiveMediaComponents
(
)
;
virtual
void
DocAddSizeOfExcludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
override
;
virtual
nsIDOMNode
*
AsDOMNode
(
)
override
{
return
this
;
}
virtual
mozilla
:
:
dom
:
:
DOMImplementation
*
GetImplementation
(
mozilla
:
:
ErrorResult
&
rv
)
override
;
virtual
already_AddRefed
<
Element
>
CreateElement
(
const
nsAString
&
aTagName
const
mozilla
:
:
dom
:
:
ElementCreationOptionsOrString
&
aOptions
ErrorResult
&
rv
)
override
;
virtual
already_AddRefed
<
Element
>
CreateElementNS
(
const
nsAString
&
aNamespaceURI
const
nsAString
&
aQualifiedName
const
mozilla
:
:
dom
:
:
ElementCreationOptionsOrString
&
aOptions
mozilla
:
:
ErrorResult
&
rv
)
override
;
virtual
void
UnblockDOMContentLoaded
(
)
override
;
protected
:
friend
class
nsNodeUtils
;
void
DispatchContentLoadedEvents
(
)
;
void
RetrieveRelevantHeaders
(
nsIChannel
*
aChannel
)
;
void
TryChannelCharset
(
nsIChannel
*
aChannel
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
nsHtml5TreeOpExecutor
*
aExecutor
)
;
void
DestroyElementMaps
(
)
;
nsIContent
*
GetFirstBaseNodeWithHref
(
)
;
nsresult
SetFirstBaseNodeWithHref
(
nsIContent
*
node
)
;
public
:
js
:
:
ExpandoAndGeneration
mExpandoAndGeneration
;
bool
ContainsEMEContent
(
)
;
bool
ContainsMSEContent
(
)
;
protected
:
void
DispatchPageTransition
(
mozilla
:
:
dom
:
:
EventTarget
*
aDispatchTarget
const
nsAString
&
aType
bool
aPersisted
)
;
virtual
nsPIDOMWindowOuter
*
GetWindowInternal
(
)
const
override
;
virtual
nsIScriptGlobalObject
*
GetScriptHandlingObjectInternal
(
)
const
override
;
void
UpdateScreenOrientation
(
)
;
#
define
NS_DOCUMENT_NOTIFY_OBSERVERS
(
func_
params_
)
do
{
\
NS_OBSERVER_ARRAY_NOTIFY_XPCOM_OBSERVERS
(
mObservers
nsIDocumentObserver
\
func_
params_
)
;
\
/
*
FIXME
(
emilio
)
:
Apparently
we
can
keep
observing
from
the
BFCache
?
That
\
looks
bogus
.
*
/
\
if
(
nsIPresShell
*
shell
=
GetObservingShell
(
)
)
{
\
shell
-
>
func_
params_
;
\
}
\
}
while
(
0
)
#
ifdef
DEBUG
void
VerifyRootContentState
(
)
;
#
endif
explicit
nsDocument
(
const
char
*
aContentType
)
;
virtual
~
nsDocument
(
)
;
void
EnsureOnloadBlocker
(
)
;
bool
ApplyFullscreen
(
const
FullscreenRequest
&
aRequest
)
;
nsAttrAndChildArray
mChildren
;
nsTHashtable
<
nsPtrHashKey
<
mozilla
:
:
dom
:
:
DOMIntersectionObserver
>
>
mIntersectionObservers
;
RefPtr
<
mozilla
:
:
PendingAnimationTracker
>
mPendingAnimationTracker
;
nsWeakPtr
mScopeObject
;
nsTArray
<
nsWeakPtr
>
mFullScreenStack
;
nsWeakPtr
mFullscreenRoot
;
public
:
RefPtr
<
mozilla
:
:
EventListenerManager
>
mListenerManager
;
RefPtr
<
mozilla
:
:
dom
:
:
ScriptLoader
>
mScriptLoader
;
nsClassHashtable
<
nsStringHashKey
nsRadioGroupStruct
>
mRadioGroups
;
bool
mHasWarnedAboutBoxObjects
:
1
;
bool
mDelayFrameLoaderInitialization
:
1
;
bool
mSynchronousDOMContentLoaded
:
1
;
bool
mParserAborted
:
1
;
friend
class
nsCallRequestFullScreen
;
RefPtr
<
mozilla
:
:
dom
:
:
Promise
>
mOrientationPendingPromise
;
uint16_t
mCurrentOrientationAngle
;
mozilla
:
:
dom
:
:
OrientationType
mCurrentOrientationType
;
bool
mReportedUseCounters
:
1
;
uint8_t
mPendingFullscreenRequests
;
uint8_t
mXMLDeclarationBits
;
nsRefPtrHashtable
<
nsPtrHashKey
<
nsIContent
>
mozilla
:
:
dom
:
:
BoxObject
>
*
mBoxObjectTable
;
nsCOMPtr
<
nsIDocument
>
mTemplateContentsOwner
;
nsCOMPtr
<
nsIApplicationCache
>
mApplicationCache
;
nsCOMPtr
<
nsIContent
>
mFirstBaseNodeWithHref
;
private
:
friend
class
nsUnblockOnloadEvent
;
mozilla
:
:
dom
:
:
VisibilityState
GetVisibilityState
(
)
const
;
void
PostUnblockOnloadEvent
(
)
;
void
DoUnblockOnload
(
)
;
nsresult
InitCSP
(
nsIChannel
*
aChannel
)
;
void
ClearAllBoxObjects
(
)
;
bool
IsAboutPage
(
)
const
;
nsDocument
(
const
nsDocument
&
aOther
)
;
nsDocument
&
operator
=
(
const
nsDocument
&
aOther
)
;
nsCOMPtr
<
nsILayoutHistoryState
>
mLayoutHistoryState
;
uint32_t
mOnloadBlockCount
;
uint32_t
mAsyncOnloadBlockCount
;
nsCOMPtr
<
nsIRequest
>
mOnloadBlocker
;
nsTHashtable
<
nsPtrHashKey
<
nsIContent
>
>
mResponsiveContent
;
nsTArray
<
RefPtr
<
nsFrameLoader
>
>
mInitializableFrameLoaders
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mFrameLoaderFinalizers
;
RefPtr
<
nsRunnableMethod
<
nsDocument
>
>
mFrameLoaderRunner
;
nsCOMPtr
<
nsIRunnable
>
mMaybeEndOutermostXBLUpdateRunner
;
nsExternalResourceMap
mExternalResourceMap
;
nsRefPtrHashtable
<
nsURIHashKey
imgIRequest
>
mPreloadingImages
;
nsDataHashtable
<
nsURIHashKey
bool
>
mPreloadedPreconnects
;
int32_t
mPreloadPictureDepth
;
nsString
mPreloadPictureFoundSource
;
RefPtr
<
mozilla
:
:
dom
:
:
DOMImplementation
>
mDOMImplementation
;
RefPtr
<
nsContentList
>
mImageMaps
;
nsCString
mScrollToRef
;
uint8_t
mScrolledToRefAlready
:
1
;
uint8_t
mChangeScrollPosWhenScrollingToRef
:
1
;
nsTHashtable
<
nsPtrHashKey
<
nsIObjectLoadingContent
>
>
mPlugins
;
RefPtr
<
mozilla
:
:
dom
:
:
DocumentTimeline
>
mDocumentTimeline
;
mozilla
:
:
LinkedList
<
mozilla
:
:
dom
:
:
DocumentTimeline
>
mTimelines
;
bool
mValidWidth
mValidHeight
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleMinFloat
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleMaxFloat
;
mozilla
:
:
LayoutDeviceToScreenScale
mScaleFloat
;
mozilla
:
:
CSSToLayoutDeviceScale
mPixelRatio
;
bool
mAutoSize
mAllowZoom
mAllowDoubleTapZoom
mValidScaleFloat
mValidMaxScale
mScaleStrEmpty
mWidthStrEmpty
;
mozilla
:
:
CSSSize
mViewportSize
;
bool
mMaybeServiceWorkerControlled
;
#
ifdef
DEBUG
public
:
bool
mWillReparent
;
#
endif
}
;
class
nsDocumentOnStack
{
public
:
explicit
nsDocumentOnStack
(
nsIDocument
*
aDoc
)
:
mDoc
(
aDoc
)
{
mDoc
-
>
IncreaseStackRefCnt
(
)
;
}
~
nsDocumentOnStack
(
)
{
mDoc
-
>
DecreaseStackRefCnt
(
)
;
}
private
:
nsIDocument
*
mDoc
;
}
;
#
endif
