#
ifndef
mozilla_dom_PlacesObservers__
#
define
mozilla_dom_PlacesObservers__
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
PlacesObserversBinding
.
h
"
#
include
"
mozilla
/
dom
/
PlacesEvent
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Pair
.
h
"
#
include
"
mozilla
/
places
/
INativePlacesEventCallback
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
PlacesObservers
{
public
:
static
void
AddListener
(
GlobalObject
&
aGlobal
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
PlacesEventCallback
&
aCallback
ErrorResult
&
rv
)
;
static
void
AddListener
(
GlobalObject
&
aGlobal
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
PlacesWeakCallbackWrapper
&
aCallback
ErrorResult
&
rv
)
;
static
void
AddListener
(
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
places
:
:
INativePlacesEventCallback
*
aCallback
)
;
static
void
RemoveListener
(
GlobalObject
&
aGlobal
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
PlacesEventCallback
&
aCallback
ErrorResult
&
rv
)
;
static
void
RemoveListener
(
GlobalObject
&
aGlobal
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
PlacesWeakCallbackWrapper
&
aCallback
ErrorResult
&
rv
)
;
static
void
RemoveListener
(
const
nsTArray
<
PlacesEventType
>
&
aEventTypes
places
:
:
INativePlacesEventCallback
*
aCallback
)
;
static
void
NotifyListeners
(
GlobalObject
&
aGlobal
const
Sequence
<
OwningNonNull
<
PlacesEvent
>
>
&
aEvents
ErrorResult
&
rv
)
;
static
void
NotifyListeners
(
const
Sequence
<
OwningNonNull
<
PlacesEvent
>
>
&
aEvents
)
;
private
:
static
void
RemoveListener
(
uint32_t
aFlags
PlacesEventCallback
&
aCallback
)
;
static
void
RemoveListener
(
uint32_t
aFlags
PlacesWeakCallbackWrapper
&
aCallback
)
;
static
void
RemoveListener
(
uint32_t
aFlags
places
:
:
INativePlacesEventCallback
*
aCallback
)
;
}
;
}
}
#
endif
