#
include
"
base
/
basictypes
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWebProgress
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIBrowser
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIAppWindow
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsMappedAttributes
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
ReferrerInfo
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIDOMChromeWindow
.
h
"
#
include
"
InProcessBrowserChildMessageManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
ContentParent
.
h
"
#
include
"
BrowserParent
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ExpandedPrincipal
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
PresShellInlines
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
ChromeMessageSender
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
FrameCrashedEvent
.
h
"
#
include
"
mozilla
/
dom
/
FrameLoaderBinding
.
h
"
#
include
"
mozilla
/
dom
/
MozFrameLoaderOwnerBinding
.
h
"
#
include
"
mozilla
/
dom
/
SessionStoreListener
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
gfx
/
CrossProcessPaint
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
nsGenericHTMLFrameElement
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
dom
/
HTMLIFrameElement
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
WebBrowserPersistLocalDocument
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
ChildSHistory
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowserHost
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeHost
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
ContentPrincipal
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
plugins
/
PPluginWidgetParent
.
h
"
#
include
"
.
.
/
plugins
/
ipc
/
PluginWidgetParent
.
h
"
#
endif
#
ifdef
MOZ_XUL
#
include
"
nsXULPopupManager
.
h
"
#
endif
#
ifdef
NS_PRINTING
#
include
"
mozilla
/
embedding
/
printingui
/
PrintingParent
.
h
"
#
include
"
nsIWebBrowserPrint
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
hal
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
layout
;
typedef
ScrollableLayerGuid
:
:
ViewID
ViewID
;
#
define
MAX_SAME_URL_CONTENT_FRAMES
2
#
define
MAX_DEPTH_CONTENT_FRAMES
10
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
nsFrameLoader
mPendingBrowsingContext
mMessageManager
mChildMessageManager
mRemoteBrowser
mStaticCloneOf
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsFrameLoader
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsFrameLoader
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsFrameLoader
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY_CONCRETE
(
nsFrameLoader
)
NS_INTERFACE_MAP_ENTRY
(
nsIMutationObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
nsFrameLoader
:
:
nsFrameLoader
(
Element
*
aOwner
BrowsingContext
*
aBrowsingContext
const
nsAString
&
aRemoteType
bool
aNetworkCreated
)
:
mPendingBrowsingContext
(
aBrowsingContext
)
mOwnerContent
(
aOwner
)
mDetachedSubdocFrame
(
nullptr
)
mPendingSwitchID
(
0
)
mChildID
(
0
)
mRemoteType
(
aRemoteType
)
mDepthTooGreat
(
false
)
mIsTopLevelContent
(
false
)
mDestroyCalled
(
false
)
mNeedsAsyncDestroy
(
false
)
mInSwap
(
false
)
mInShow
(
false
)
mHideCalled
(
false
)
mNetworkCreated
(
aNetworkCreated
)
mLoadingOriginalSrc
(
false
)
mRemoteBrowserShown
(
false
)
mIsRemoteFrame
(
!
aRemoteType
.
IsEmpty
(
)
)
mWillChangeProcess
(
false
)
mObservingOwnerContent
(
false
)
mTabProcessCrashFired
(
false
)
{
}
nsFrameLoader
:
:
~
nsFrameLoader
(
)
{
if
(
mMessageManager
)
{
mMessageManager
-
>
Disconnect
(
)
;
}
MOZ_RELEASE_ASSERT
(
mDestroyCalled
)
;
}
static
nsAtom
*
TypeAttrName
(
Element
*
aOwnerContent
)
{
return
aOwnerContent
-
>
IsXULElement
(
)
?
nsGkAtoms
:
:
type
:
nsGkAtoms
:
:
mozframetype
;
}
static
void
GetFrameName
(
Element
*
aOwnerContent
nsAString
&
aFrameName
)
{
int32_t
namespaceID
=
aOwnerContent
-
>
GetNameSpaceID
(
)
;
if
(
namespaceID
=
=
kNameSpaceID_XHTML
&
&
!
aOwnerContent
-
>
IsInHTMLDocument
(
)
)
{
aOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
id
aFrameName
)
;
}
else
{
aOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
aFrameName
)
;
if
(
aFrameName
.
IsEmpty
(
)
&
&
namespaceID
=
=
kNameSpaceID_XUL
)
{
aOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
id
aFrameName
)
;
}
}
}
static
bool
IsTopContent
(
BrowsingContext
*
aParent
Element
*
aOwner
)
{
nsCOMPtr
<
nsIMozBrowserFrame
>
mozbrowser
=
aOwner
-
>
GetAsMozBrowserFrame
(
)
;
if
(
aParent
-
>
IsContent
(
)
)
{
return
(
mozbrowser
&
&
mozbrowser
-
>
GetReallyIsBrowser
(
)
)
|
|
(
aOwner
-
>
IsXULElement
(
)
&
&
aOwner
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
remote
nsGkAtoms
:
:
_true
eCaseMatters
)
)
;
}
return
(
mozbrowser
&
&
mozbrowser
-
>
GetMozbrowser
(
)
)
|
|
(
aOwner
-
>
AttrValueIs
(
kNameSpaceID_None
TypeAttrName
(
aOwner
)
nsGkAtoms
:
:
content
eIgnoreCase
)
)
;
}
static
already_AddRefed
<
BrowsingContext
>
CreateBrowsingContext
(
Element
*
aOwner
BrowsingContext
*
aOpener
)
{
Document
*
doc
=
aOwner
-
>
OwnerDoc
(
)
;
RefPtr
<
nsDocShell
>
parentDocShell
=
nsDocShell
:
:
Cast
(
doc
-
>
GetDocShell
(
)
)
;
if
(
NS_WARN_IF
(
!
parentDocShell
)
)
{
return
nullptr
;
}
RefPtr
<
BrowsingContext
>
parentContext
=
parentDocShell
-
>
GetBrowsingContext
(
)
;
if
(
NS_WARN_IF
(
!
parentContext
)
|
|
parentContext
-
>
IsDiscarded
(
)
)
{
return
nullptr
;
}
nsAutoString
frameName
;
GetFrameName
(
aOwner
frameName
)
;
if
(
IsTopContent
(
parentContext
aOwner
)
)
{
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
CreateDetached
(
nullptr
aOpener
frameName
BrowsingContext
:
:
Type
:
:
Content
)
;
if
(
nsCOMPtr
<
nsIMozBrowserFrame
>
mozbrowser
=
aOwner
-
>
GetAsMozBrowserFrame
(
)
)
{
if
(
mozbrowser
-
>
GetReallyIsBrowser
(
)
)
{
bc
-
>
SetWindowless
(
)
;
}
}
return
bc
.
forget
(
)
;
}
auto
type
=
parentContext
-
>
IsContent
(
)
?
BrowsingContext
:
:
Type
:
:
Content
:
BrowsingContext
:
:
Type
:
:
Chrome
;
return
BrowsingContext
:
:
CreateDetached
(
parentContext
aOpener
frameName
type
)
;
}
static
bool
InitialLoadIsRemote
(
Element
*
aOwner
)
{
if
(
PR_GetEnv
(
"
MOZ_DISABLE_OOP_TABS
"
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
tabs
.
disabled
"
false
)
)
{
return
false
;
}
if
(
XRE_IsContentProcess
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
aOwner
)
;
bool
isMozBrowserFrame
=
browserFrame
&
&
browserFrame
-
>
GetReallyIsBrowser
(
)
;
if
(
isMozBrowserFrame
&
&
!
aOwner
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
remote
)
)
{
return
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
browser_frames
.
oop_by_default
"
false
)
;
}
return
(
isMozBrowserFrame
|
|
aOwner
-
>
GetNameSpaceID
(
)
=
=
kNameSpaceID_XUL
)
&
&
aOwner
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
remote
nsGkAtoms
:
:
_true
eCaseMatters
)
;
}
already_AddRefed
<
nsFrameLoader
>
nsFrameLoader
:
:
Create
(
Element
*
aOwner
BrowsingContext
*
aOpener
bool
aNetworkCreated
)
{
NS_ENSURE_TRUE
(
aOwner
nullptr
)
;
Document
*
doc
=
aOwner
-
>
OwnerDoc
(
)
;
NS_ENSURE_TRUE
(
!
doc
-
>
IsResourceDoc
(
)
&
&
(
(
!
doc
-
>
IsLoadedAsData
(
)
&
&
aOwner
-
>
IsInComposedDoc
(
)
)
|
|
doc
-
>
IsStaticDocument
(
)
)
nullptr
)
;
RefPtr
<
BrowsingContext
>
context
=
CreateBrowsingContext
(
aOwner
aOpener
)
;
NS_ENSURE_TRUE
(
context
nullptr
)
;
nsAutoString
remoteType
(
VoidString
(
)
)
;
if
(
InitialLoadIsRemote
(
aOwner
)
)
{
MOZ_ASSERT
(
!
aOpener
"
Cannot
pass
aOpener
for
a
remote
frame
!
"
)
;
bool
hasRemoteType
=
aOwner
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
remoteType
)
;
if
(
!
hasRemoteType
|
|
remoteType
.
IsEmpty
(
)
)
{
remoteType
.
AssignLiteral
(
DEFAULT_REMOTE_TYPE
)
;
}
}
RefPtr
<
nsFrameLoader
>
fl
=
new
nsFrameLoader
(
aOwner
context
remoteType
aNetworkCreated
)
;
return
fl
.
forget
(
)
;
}
already_AddRefed
<
nsFrameLoader
>
nsFrameLoader
:
:
Recreate
(
mozilla
:
:
dom
:
:
Element
*
aOwner
BrowsingContext
*
aContext
const
nsAString
&
aRemoteType
bool
aNetworkCreated
)
{
NS_ENSURE_TRUE
(
aOwner
nullptr
)
;
#
ifdef
DEBUG
Document
*
doc
=
aOwner
-
>
OwnerDoc
(
)
;
MOZ_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
)
;
MOZ_ASSERT
(
(
!
doc
-
>
IsLoadedAsData
(
)
&
&
aOwner
-
>
IsInComposedDoc
(
)
)
|
|
doc
-
>
IsStaticDocument
(
)
)
;
#
endif
RefPtr
<
BrowsingContext
>
context
=
aContext
;
if
(
!
context
)
{
context
=
CreateBrowsingContext
(
aOwner
nullptr
)
;
}
NS_ENSURE_TRUE
(
context
nullptr
)
;
RefPtr
<
nsFrameLoader
>
fl
=
new
nsFrameLoader
(
aOwner
context
aRemoteType
aNetworkCreated
)
;
return
fl
.
forget
(
)
;
}
void
nsFrameLoader
:
:
LoadFrame
(
bool
aOriginalSrc
)
{
if
(
NS_WARN_IF
(
!
mOwnerContent
)
)
{
return
;
}
nsAutoString
src
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
bool
isSrcdoc
=
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
if
(
isSrcdoc
)
{
src
.
AssignLiteral
(
"
about
:
srcdoc
"
)
;
principal
=
mOwnerContent
-
>
NodePrincipal
(
)
;
csp
=
mOwnerContent
-
>
GetCsp
(
)
;
}
else
{
GetURL
(
src
getter_AddRefs
(
principal
)
getter_AddRefs
(
csp
)
)
;
src
.
Trim
(
"
\
t
\
n
\
r
"
)
;
if
(
src
.
IsEmpty
(
)
)
{
if
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
nodefaultsrc
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
return
;
}
src
.
AssignLiteral
(
"
about
:
blank
"
)
;
principal
=
mOwnerContent
-
>
NodePrincipal
(
)
;
csp
=
mOwnerContent
-
>
GetCsp
(
)
;
}
}
Document
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
if
(
doc
-
>
IsStaticDocument
(
)
)
{
return
;
}
nsIURI
*
base_uri
=
mOwnerContent
-
>
GetBaseURI
(
)
;
auto
encoding
=
doc
-
>
GetDocumentCharacterSet
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
src
encoding
base_uri
)
;
if
(
rv
=
=
NS_ERROR_MALFORMED_URI
)
{
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
NS_LITERAL_STRING
(
"
about
:
blank
"
)
encoding
base_uri
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
LoadURI
(
uri
principal
csp
aOriginalSrc
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
FireErrorEvent
(
)
;
}
}
void
nsFrameLoader
:
:
FireErrorEvent
(
)
{
if
(
!
mOwnerContent
)
{
return
;
}
RefPtr
<
AsyncEventDispatcher
>
loadBlockingAsyncDispatcher
=
new
LoadBlockingAsyncEventDispatcher
(
mOwnerContent
NS_LITERAL_STRING
(
"
error
"
)
CanBubble
:
:
eNo
ChromeOnlyDispatch
:
:
eNo
)
;
loadBlockingAsyncDispatcher
-
>
PostDOMEvent
(
)
;
}
nsresult
nsFrameLoader
:
:
LoadURI
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
nsIContentSecurityPolicy
*
aCsp
bool
aOriginalSrc
)
{
if
(
!
aURI
)
return
NS_ERROR_INVALID_POINTER
;
NS_ENSURE_STATE
(
!
mDestroyCalled
&
&
mOwnerContent
)
;
MOZ_ASSERT
(
aTriggeringPrincipal
"
Must
have
an
explicit
triggeringPrincipal
to
nsFrameLoader
:
:
LoadURI
.
"
)
;
mLoadingOriginalSrc
=
aOriginalSrc
;
nsCOMPtr
<
Document
>
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
nsresult
rv
;
rv
=
CheckURILoad
(
aURI
aTriggeringPrincipal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mURIToLoad
=
aURI
;
mTriggeringPrincipal
=
aTriggeringPrincipal
;
mCsp
=
aCsp
;
rv
=
doc
-
>
InitializeFrameLoader
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
mURIToLoad
=
nullptr
;
mTriggeringPrincipal
=
nullptr
;
mCsp
=
nullptr
;
}
return
rv
;
}
void
nsFrameLoader
:
:
ResumeLoad
(
uint64_t
aPendingSwitchID
)
{
Document
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
if
(
doc
-
>
IsStaticDocument
(
)
)
{
return
;
}
if
(
NS_WARN_IF
(
mDestroyCalled
|
|
!
mOwnerContent
)
)
{
FireErrorEvent
(
)
;
return
;
}
mLoadingOriginalSrc
=
false
;
mURIToLoad
=
nullptr
;
mPendingSwitchID
=
aPendingSwitchID
;
mTriggeringPrincipal
=
mOwnerContent
-
>
NodePrincipal
(
)
;
mCsp
=
mOwnerContent
-
>
GetCsp
(
)
;
nsresult
rv
=
doc
-
>
InitializeFrameLoader
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
mPendingSwitchID
=
0
;
mTriggeringPrincipal
=
nullptr
;
mCsp
=
nullptr
;
FireErrorEvent
(
)
;
}
}
nsresult
nsFrameLoader
:
:
ReallyStartLoading
(
)
{
nsresult
rv
=
ReallyStartLoadingInternal
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
FireErrorEvent
(
)
;
}
return
rv
;
}
nsresult
nsFrameLoader
:
:
ReallyStartLoadingInternal
(
)
{
NS_ENSURE_STATE
(
(
mURIToLoad
|
|
mPendingSwitchID
)
&
&
mOwnerContent
&
&
mOwnerContent
-
>
IsInComposedDoc
(
)
)
;
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
ReallyStartLoadingInternal
"
OTHER
)
;
if
(
IsRemoteFrame
(
)
)
{
if
(
!
EnsureRemoteBrowser
(
)
)
{
NS_WARNING
(
"
Couldn
'
t
create
child
process
for
iframe
.
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
mPendingSwitchID
)
{
mRemoteBrowser
-
>
ResumeLoad
(
mPendingSwitchID
)
;
mPendingSwitchID
=
0
;
}
else
{
mRemoteBrowser
-
>
LoadURL
(
mURIToLoad
)
;
}
if
(
!
mRemoteBrowserShown
)
{
Unused
<
<
ShowRemoteFrame
(
ScreenIntSize
(
0
0
)
)
;
}
return
NS_OK
;
}
if
(
GetDocShell
(
)
)
{
GetDocShell
(
)
-
>
MaybeClearStorageAccessFlag
(
)
;
}
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MOZ_ASSERT
(
GetDocShell
(
)
"
MaybeCreateDocShell
succeeded
with
a
null
docShell
"
)
;
if
(
mPendingSwitchID
)
{
bool
tmpState
=
mNeedsAsyncDestroy
;
mNeedsAsyncDestroy
=
true
;
rv
=
GetDocShell
(
)
-
>
ResumeRedirectedLoad
(
mPendingSwitchID
-
1
)
;
mNeedsAsyncDestroy
=
tmpState
;
mPendingSwitchID
=
0
;
return
rv
;
}
rv
=
CheckURILoad
(
mURIToLoad
mTriggeringPrincipal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
mURIToLoad
)
;
loadState
-
>
SetOriginalFrameSrc
(
mLoadingOriginalSrc
)
;
mLoadingOriginalSrc
=
false
;
if
(
mTriggeringPrincipal
)
{
loadState
-
>
SetTriggeringPrincipal
(
mTriggeringPrincipal
)
;
}
else
{
loadState
-
>
SetTriggeringPrincipal
(
mOwnerContent
-
>
NodePrincipal
(
)
)
;
}
if
(
mCsp
)
{
loadState
-
>
SetCsp
(
mCsp
)
;
}
else
if
(
!
mTriggeringPrincipal
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
mOwnerContent
-
>
GetCsp
(
)
;
loadState
-
>
SetCsp
(
csp
)
;
}
nsAutoString
srcdoc
;
bool
isSrcdoc
=
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
srcdoc
)
;
if
(
isSrcdoc
)
{
loadState
-
>
SetSrcdocData
(
srcdoc
)
;
loadState
-
>
SetBaseURI
(
mOwnerContent
-
>
GetBaseURI
(
)
)
;
}
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
=
new
ReferrerInfo
(
)
;
referrerInfo
-
>
InitWithNode
(
mOwnerContent
)
;
loadState
-
>
SetReferrerInfo
(
referrerInfo
)
;
int32_t
flags
=
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
;
if
(
OwnerIsMozBrowserFrame
(
)
)
{
flags
=
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
|
nsIWebNavigation
:
:
LOAD_FLAGS_DISALLOW_INHERIT_PRINCIPAL
;
}
loadState
-
>
SetIsFromProcessingFrameAttributes
(
)
;
bool
tmpState
=
mNeedsAsyncDestroy
;
mNeedsAsyncDestroy
=
true
;
loadState
-
>
SetLoadFlags
(
flags
)
;
loadState
-
>
SetFirstParty
(
false
)
;
rv
=
GetDocShell
(
)
-
>
LoadURI
(
loadState
false
)
;
mNeedsAsyncDestroy
=
tmpState
;
mURIToLoad
=
nullptr
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
CheckURILoad
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
)
{
nsIScriptSecurityManager
*
secMan
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
nsIPrincipal
*
principal
=
(
aTriggeringPrincipal
?
aTriggeringPrincipal
:
mOwnerContent
-
>
NodePrincipal
(
)
)
;
nsresult
rv
=
secMan
-
>
CheckLoadURIWithPrincipal
(
principal
aURI
nsIScriptSecurityManager
:
:
STANDARD
mOwnerContent
-
>
OwnerDoc
(
)
-
>
InnerWindowID
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
IsRemoteFrame
(
)
)
{
return
NS_OK
;
}
return
CheckForRecursiveLoad
(
aURI
)
;
}
nsDocShell
*
nsFrameLoader
:
:
GetDocShell
(
ErrorResult
&
aRv
)
{
if
(
IsRemoteFrame
(
)
)
{
return
nullptr
;
}
if
(
mOwnerContent
)
{
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
MOZ_ASSERT
(
GetDocShell
(
)
"
MaybeCreateDocShell
succeeded
but
null
docShell
"
)
;
}
return
GetDocShell
(
)
;
}
static
void
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
nsIDocShellTreeItem
*
aItem
nsIDocShellTreeOwner
*
aOwner
EventTarget
*
aHandler
)
{
MOZ_ASSERT
(
aItem
"
Must
have
item
"
)
;
aItem
-
>
SetTreeOwner
(
aOwner
)
;
int32_t
childCount
=
0
;
aItem
-
>
GetInProcessChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
item
;
aItem
-
>
GetInProcessChildAt
(
i
getter_AddRefs
(
item
)
)
;
if
(
aHandler
)
{
nsCOMPtr
<
nsIDocShell
>
shell
(
do_QueryInterface
(
item
)
)
;
shell
-
>
SetChromeEventHandler
(
aHandler
)
;
}
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
item
aOwner
aHandler
)
;
}
}
#
if
defined
(
MOZ_DIAGNOSTIC_ASSERT_ENABLED
)
static
bool
CheckDocShellType
(
mozilla
:
:
dom
:
:
Element
*
aOwnerContent
nsIDocShellTreeItem
*
aDocShell
nsAtom
*
aAtom
)
{
bool
isContent
=
aOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
aAtom
nsGkAtoms
:
:
content
eIgnoreCase
)
;
if
(
!
isContent
)
{
nsCOMPtr
<
nsIMozBrowserFrame
>
mozbrowser
=
aOwnerContent
-
>
GetAsMozBrowserFrame
(
)
;
if
(
mozbrowser
)
{
mozbrowser
-
>
GetMozbrowser
(
&
isContent
)
;
}
}
if
(
isContent
)
{
return
aDocShell
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeContent
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parent
;
aDocShell
-
>
GetInProcessParent
(
getter_AddRefs
(
parent
)
)
;
return
parent
&
&
parent
-
>
ItemType
(
)
=
=
aDocShell
-
>
ItemType
(
)
;
}
#
endif
void
nsFrameLoader
:
:
AddTreeItemToTreeOwner
(
nsIDocShellTreeItem
*
aItem
nsIDocShellTreeOwner
*
aOwner
)
{
MOZ_ASSERT
(
aItem
"
Must
have
docshell
treeitem
"
)
;
MOZ_ASSERT
(
mOwnerContent
"
Must
have
owning
content
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
CheckDocShellType
(
mOwnerContent
aItem
TypeAttrName
(
mOwnerContent
)
)
"
Correct
ItemType
should
be
set
when
creating
BrowsingContext
"
)
;
if
(
mIsTopLevelContent
)
{
bool
is_primary
=
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
if
(
aOwner
)
{
mOwnerContent
-
>
AddMutationObserver
(
this
)
;
mObservingOwnerContent
=
true
;
aOwner
-
>
ContentShellAdded
(
aItem
is_primary
)
;
}
}
}
static
bool
AllDescendantsOfType
(
nsIDocShellTreeItem
*
aParentItem
int32_t
aType
)
{
int32_t
childCount
=
0
;
aParentItem
-
>
GetInProcessChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
kid
;
aParentItem
-
>
GetInProcessChildAt
(
i
getter_AddRefs
(
kid
)
)
;
if
(
kid
-
>
ItemType
(
)
!
=
aType
|
|
!
AllDescendantsOfType
(
kid
aType
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
ParentWindowIsActive
(
Document
*
aDoc
)
{
nsCOMPtr
<
nsPIWindowRoot
>
root
=
nsContentUtils
:
:
GetWindowRoot
(
aDoc
)
;
if
(
root
)
{
nsPIDOMWindowOuter
*
rootWin
=
root
-
>
GetWindow
(
)
;
return
rootWin
&
&
rootWin
-
>
IsActive
(
)
;
}
return
false
;
}
void
nsFrameLoader
:
:
MaybeShowFrame
(
)
{
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
nsSubDocumentFrame
*
subDocFrame
=
do_QueryFrame
(
frame
)
;
if
(
subDocFrame
)
{
subDocFrame
-
>
MaybeShowViewer
(
)
;
}
}
}
static
ScrollbarPreference
GetScrollbarPreference
(
const
Element
*
aOwner
)
{
if
(
!
aOwner
)
{
return
ScrollbarPreference
:
:
Auto
;
}
const
nsAttrValue
*
attrValue
=
aOwner
-
>
GetParsedAttr
(
nsGkAtoms
:
:
scrolling
)
;
return
nsGenericHTMLFrameElement
:
:
MapScrollingAttribute
(
attrValue
)
;
}
static
CSSIntSize
GetMarginAttributes
(
const
Element
*
aOwner
)
{
CSSIntSize
result
(
-
1
-
1
)
;
auto
*
content
=
nsGenericHTMLElement
:
:
FromNodeOrNull
(
aOwner
)
;
if
(
!
content
)
{
return
result
;
}
const
nsAttrValue
*
attr
=
content
-
>
GetParsedAttr
(
nsGkAtoms
:
:
marginwidth
)
;
if
(
attr
&
&
attr
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
result
.
width
=
attr
-
>
GetIntegerValue
(
)
;
}
attr
=
content
-
>
GetParsedAttr
(
nsGkAtoms
:
:
marginheight
)
;
if
(
attr
&
&
attr
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
result
.
height
=
attr
-
>
GetIntegerValue
(
)
;
}
return
result
;
}
bool
nsFrameLoader
:
:
Show
(
nsSubDocumentFrame
*
frame
)
{
if
(
mInShow
)
{
return
false
;
}
mInShow
=
true
;
auto
resetInShow
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
mInShow
=
false
;
}
)
;
ScreenIntSize
size
=
frame
-
>
GetSubdocumentSize
(
)
;
if
(
IsRemoteFrame
(
)
)
{
return
ShowRemoteFrame
(
size
frame
)
;
}
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
nsDocShell
*
ds
=
GetDocShell
(
)
;
MOZ_ASSERT
(
ds
"
MaybeCreateDocShell
succeeded
but
null
docShell
"
)
;
if
(
!
ds
)
{
return
false
;
}
ds
-
>
SetScrollbarPreference
(
GetScrollbarPreference
(
mOwnerContent
)
)
;
const
bool
marginsChanged
=
ds
-
>
UpdateFrameMargins
(
GetMarginAttributes
(
mOwnerContent
)
)
;
if
(
PresShell
*
presShell
=
ds
-
>
GetPresShell
(
)
)
{
if
(
marginsChanged
)
{
if
(
nsIFrame
*
rootScrollFrame
=
presShell
-
>
GetRootScrollFrame
(
)
)
{
presShell
-
>
FrameNeedsReflow
(
rootScrollFrame
IntrinsicDirty
:
:
Resize
NS_FRAME_IS_DIRTY
)
;
}
}
return
true
;
}
nsView
*
view
=
frame
-
>
EnsureInnerView
(
)
;
if
(
!
view
)
return
false
;
RefPtr
<
nsDocShell
>
baseWindow
=
GetDocShell
(
)
;
baseWindow
-
>
InitWindow
(
nullptr
view
-
>
GetWidget
(
)
0
0
size
.
width
size
.
height
)
;
baseWindow
-
>
Create
(
)
;
baseWindow
-
>
SetVisibility
(
true
)
;
NS_ENSURE_TRUE
(
GetDocShell
(
)
false
)
;
if
(
RefPtr
<
PresShell
>
presShell
=
GetDocShell
(
)
-
>
GetPresShell
(
)
)
{
Document
*
doc
=
presShell
-
>
GetDocument
(
)
;
nsHTMLDocument
*
htmlDoc
=
doc
&
&
doc
-
>
IsHTMLOrXHTML
(
)
?
doc
-
>
AsHTMLDocument
(
)
:
nullptr
;
if
(
htmlDoc
)
{
nsAutoString
designMode
;
htmlDoc
-
>
GetDesignMode
(
designMode
)
;
if
(
designMode
.
EqualsLiteral
(
"
on
"
)
)
{
RefPtr
<
HTMLEditor
>
htmlEditor
=
GetDocShell
(
)
-
>
GetHTMLEditor
(
)
;
Unused
<
<
htmlEditor
;
htmlDoc
-
>
SetDesignMode
(
NS_LITERAL_STRING
(
"
off
"
)
Nothing
(
)
IgnoreErrors
(
)
)
;
htmlDoc
-
>
SetDesignMode
(
NS_LITERAL_STRING
(
"
on
"
)
Nothing
(
)
IgnoreErrors
(
)
)
;
}
else
{
bool
editable
=
false
hasEditingSession
=
false
;
GetDocShell
(
)
-
>
GetEditable
(
&
editable
)
;
GetDocShell
(
)
-
>
GetHasEditingSession
(
&
hasEditingSession
)
;
RefPtr
<
HTMLEditor
>
htmlEditor
=
GetDocShell
(
)
-
>
GetHTMLEditor
(
)
;
if
(
editable
&
&
hasEditingSession
&
&
htmlEditor
)
{
htmlEditor
-
>
PostCreate
(
)
;
}
}
}
}
mInShow
=
false
;
if
(
mHideCalled
)
{
mHideCalled
=
false
;
Hide
(
)
;
return
false
;
}
return
true
;
}
void
nsFrameLoader
:
:
MarginsChanged
(
)
{
if
(
IsRemoteFrame
(
)
)
{
return
;
}
nsDocShell
*
docShell
=
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
;
}
if
(
!
docShell
-
>
UpdateFrameMargins
(
GetMarginAttributes
(
mOwnerContent
)
)
)
{
return
;
}
if
(
Document
*
doc
=
docShell
-
>
GetDocument
(
)
)
{
for
(
nsINode
*
cur
=
doc
;
cur
;
cur
=
cur
-
>
GetNextNode
(
)
)
{
if
(
cur
-
>
IsHTMLElement
(
nsGkAtoms
:
:
body
)
)
{
static_cast
<
HTMLBodyElement
*
>
(
cur
)
-
>
ClearMappedServoStyle
(
)
;
}
}
}
if
(
nsPresContext
*
presContext
=
docShell
-
>
GetPresContext
(
)
)
{
presContext
-
>
RebuildAllStyleData
(
nsChangeHint
(
0
)
RestyleHint
:
:
RestyleSubtree
(
)
)
;
}
}
bool
nsFrameLoader
:
:
ShowRemoteFrame
(
const
ScreenIntSize
&
size
nsSubDocumentFrame
*
aFrame
)
{
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
ShowRemoteFrame
"
OTHER
)
;
NS_ASSERTION
(
IsRemoteFrame
(
)
"
ShowRemote
only
makes
sense
on
remote
frames
.
"
)
;
if
(
!
EnsureRemoteBrowser
(
)
)
{
NS_ERROR
(
"
Couldn
'
t
create
child
process
.
"
)
;
return
false
;
}
if
(
!
mRemoteBrowserShown
)
{
if
(
!
mOwnerContent
|
|
!
mOwnerContent
-
>
GetComposedDoc
(
)
)
{
return
false
;
}
nsIWidget
*
widget
=
nsContentUtils
:
:
WidgetForContent
(
mOwnerContent
)
;
if
(
!
widget
|
|
static_cast
<
nsBaseWidget
*
>
(
widget
)
-
>
IsSmallPopup
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsISupports
>
container
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetContainer
(
)
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
container
)
;
nsCOMPtr
<
nsIWidget
>
mainWidget
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
mainWidget
)
)
;
nsSizeMode
sizeMode
=
mainWidget
?
mainWidget
-
>
SizeMode
(
)
:
nsSizeMode_Normal
;
OwnerShowInfo
info
(
size
GetScrollbarPreference
(
mOwnerContent
)
ParentWindowIsActive
(
mOwnerContent
-
>
OwnerDoc
(
)
)
sizeMode
)
;
if
(
!
mRemoteBrowser
-
>
Show
(
info
)
)
{
return
false
;
}
mRemoteBrowserShown
=
true
;
if
(
!
GetBrowserBridgeChild
(
)
)
{
if
(
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
)
{
os
-
>
NotifyObservers
(
ToSupports
(
this
)
"
remote
-
browser
-
shown
"
nullptr
)
;
}
}
}
else
{
nsIntRect
dimensions
;
NS_ENSURE_SUCCESS
(
GetWindowDimensions
(
dimensions
)
false
)
;
if
(
!
aFrame
|
|
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_FIRST_REFLOW
)
)
{
mRemoteBrowser
-
>
UpdateDimensions
(
dimensions
size
)
;
}
}
return
true
;
}
void
nsFrameLoader
:
:
Hide
(
)
{
if
(
mHideCalled
)
{
return
;
}
if
(
mInShow
)
{
mHideCalled
=
true
;
return
;
}
if
(
!
GetDocShell
(
)
)
{
return
;
}
GetDocShell
(
)
-
>
MaybeClearStorageAccessFlag
(
)
;
nsCOMPtr
<
nsIContentViewer
>
contentViewer
;
GetDocShell
(
)
-
>
GetContentViewer
(
getter_AddRefs
(
contentViewer
)
)
;
if
(
contentViewer
)
contentViewer
-
>
SetSticky
(
false
)
;
RefPtr
<
nsDocShell
>
baseWin
=
GetDocShell
(
)
;
baseWin
-
>
SetVisibility
(
false
)
;
baseWin
-
>
SetParentWidget
(
nullptr
)
;
}
void
nsFrameLoader
:
:
ForceLayoutIfNecessary
(
)
{
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
!
frame
)
{
return
;
}
nsPresContext
*
presContext
=
frame
-
>
PresContext
(
)
;
if
(
!
presContext
)
{
return
;
}
if
(
frame
-
>
GetStateBits
(
)
&
NS_FRAME_FIRST_REFLOW
)
{
if
(
RefPtr
<
PresShell
>
presShell
=
presContext
-
>
GetPresShell
(
)
)
{
presShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
}
nsresult
nsFrameLoader
:
:
SwapWithOtherRemoteLoader
(
nsFrameLoader
*
aOther
nsFrameLoaderOwner
*
aThisOwner
nsFrameLoaderOwner
*
aOtherOwner
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
ifdef
DEBUG
RefPtr
<
nsFrameLoader
>
first
=
aThisOwner
-
>
GetFrameLoader
(
)
;
RefPtr
<
nsFrameLoader
>
second
=
aOtherOwner
-
>
GetFrameLoader
(
)
;
MOZ_ASSERT
(
first
=
=
this
"
aThisOwner
must
own
this
"
)
;
MOZ_ASSERT
(
second
=
=
aOther
"
aOtherOwner
must
own
aOther
"
)
;
#
endif
Element
*
ourContent
=
mOwnerContent
;
Element
*
otherContent
=
aOther
-
>
mOwnerContent
;
if
(
!
ourContent
|
|
!
otherContent
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
equal
;
nsresult
rv
=
ourContent
-
>
NodePrincipal
(
)
-
>
Equals
(
otherContent
-
>
NodePrincipal
(
)
&
equal
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
equal
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
Document
*
ourDoc
=
ourContent
-
>
GetComposedDoc
(
)
;
Document
*
otherDoc
=
otherContent
-
>
GetComposedDoc
(
)
;
if
(
!
ourDoc
|
|
!
otherDoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
PresShell
*
ourPresShell
=
ourDoc
-
>
GetPresShell
(
)
;
PresShell
*
otherPresShell
=
otherDoc
-
>
GetPresShell
(
)
;
if
(
!
ourPresShell
|
|
!
otherPresShell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
auto
*
browserParent
=
GetBrowserParent
(
)
;
auto
*
otherBrowserParent
=
aOther
-
>
GetBrowserParent
(
)
;
if
(
!
browserParent
|
|
!
otherBrowserParent
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
OriginAttributes
ourOriginAttributes
=
browserParent
-
>
OriginAttributesRef
(
)
;
rv
=
PopulateUserContextIdFromAttribute
(
ourOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
otherOriginAttributes
=
otherBrowserParent
-
>
OriginAttributesRef
(
)
;
rv
=
aOther
-
>
PopulateUserContextIdFromAttribute
(
otherOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
ourOriginAttributes
!
=
otherOriginAttributes
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourHasHistory
=
mIsTopLevelContent
&
&
ourContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
;
bool
otherHasHistory
=
aOther
-
>
mIsTopLevelContent
&
&
otherContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
;
if
(
ourHasHistory
!
=
otherHasHistory
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
mInSwap
|
|
aOther
-
>
mInSwap
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
mInSwap
=
aOther
-
>
mInSwap
=
true
;
nsIFrame
*
ourFrame
=
ourContent
-
>
GetPrimaryFrame
(
)
;
nsIFrame
*
otherFrame
=
otherContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
ourFrame
|
|
!
otherFrame
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsSubDocumentFrame
*
ourFrameFrame
=
do_QueryFrame
(
ourFrame
)
;
if
(
!
ourFrameFrame
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
rv
=
ourFrameFrame
-
>
BeginSwapDocShells
(
otherFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
rv
;
}
nsCOMPtr
<
nsIBrowserDOMWindow
>
otherBrowserDOMWindow
=
otherBrowserParent
-
>
GetBrowserDOMWindow
(
)
;
nsCOMPtr
<
nsIBrowserDOMWindow
>
browserDOMWindow
=
browserParent
-
>
GetBrowserDOMWindow
(
)
;
if
(
!
!
otherBrowserDOMWindow
!
=
!
!
browserDOMWindow
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
OwnerIsMozBrowserFrame
(
)
&
&
!
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
DestroyBrowserFrameScripts
(
)
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
aOther
-
>
DestroyBrowserFrameScripts
(
)
;
}
otherBrowserParent
-
>
SetBrowserDOMWindow
(
browserDOMWindow
)
;
browserParent
-
>
SetBrowserDOMWindow
(
otherBrowserDOMWindow
)
;
#
ifdef
XP_WIN
if
(
nsPIDOMWindowOuter
*
newWin
=
ourDoc
-
>
GetWindow
(
)
)
{
RefPtr
<
nsIWidget
>
newParent
=
nsGlobalWindowOuter
:
:
Cast
(
newWin
)
-
>
GetMainWidget
(
)
;
const
ManagedContainer
<
mozilla
:
:
plugins
:
:
PPluginWidgetParent
>
&
plugins
=
otherBrowserParent
-
>
ManagedPPluginWidgetParent
(
)
;
for
(
auto
iter
=
plugins
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
static_cast
<
mozilla
:
:
plugins
:
:
PluginWidgetParent
*
>
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
-
>
SetParent
(
newParent
)
;
}
}
#
endif
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentRemoved
)
;
aOther
-
>
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentRemoved
)
;
SetOwnerContent
(
otherContent
)
;
aOther
-
>
SetOwnerContent
(
ourContent
)
;
browserParent
-
>
SetOwnerElement
(
otherContent
)
;
otherBrowserParent
-
>
SetOwnerElement
(
ourContent
)
;
Unused
<
<
browserParent
-
>
SendParentActivated
(
ParentWindowIsActive
(
otherContent
-
>
OwnerDoc
(
)
)
)
;
Unused
<
<
otherBrowserParent
-
>
SendParentActivated
(
ParentWindowIsActive
(
ourContent
-
>
OwnerDoc
(
)
)
)
;
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentChanged
)
;
aOther
-
>
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentChanged
)
;
RefPtr
<
nsFrameMessageManager
>
ourMessageManager
=
mMessageManager
;
RefPtr
<
nsFrameMessageManager
>
otherMessageManager
=
aOther
-
>
mMessageManager
;
if
(
ourMessageManager
)
{
ourMessageManager
-
>
SetCallback
(
aOther
)
;
}
if
(
otherMessageManager
)
{
otherMessageManager
-
>
SetCallback
(
this
)
;
}
mMessageManager
.
swap
(
aOther
-
>
mMessageManager
)
;
RefPtr
<
nsFrameLoader
>
kungFuDeathGrip
(
this
)
;
aThisOwner
-
>
SetFrameLoader
(
aOther
)
;
aOtherOwner
-
>
SetFrameLoader
(
kungFuDeathGrip
)
;
ourFrameFrame
-
>
EndSwapDocShells
(
otherFrame
)
;
ourPresShell
-
>
BackingScaleFactorChanged
(
)
;
otherPresShell
-
>
BackingScaleFactorChanged
(
)
;
InitializeBrowserAPI
(
)
;
aOther
-
>
InitializeBrowserAPI
(
)
;
mInSwap
=
aOther
-
>
mInSwap
=
false
;
MutableTabContext
ourContext
;
rv
=
GetNewTabContext
(
&
ourContext
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
MutableTabContext
otherContext
;
rv
=
aOther
-
>
GetNewTabContext
(
&
otherContext
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
Unused
<
<
browserParent
-
>
SendSwappedWithOtherRemoteLoader
(
ourContext
.
AsIPCTabContext
(
)
)
;
Unused
<
<
otherBrowserParent
-
>
SendSwappedWithOtherRemoteLoader
(
otherContext
.
AsIPCTabContext
(
)
)
;
return
NS_OK
;
}
class
MOZ_RAII
AutoResetInFrameSwap
final
{
public
:
AutoResetInFrameSwap
(
nsFrameLoader
*
aThisFrameLoader
nsFrameLoader
*
aOtherFrameLoader
nsDocShell
*
aThisDocShell
nsDocShell
*
aOtherDocShell
EventTarget
*
aThisEventTarget
EventTarget
*
aOtherEventTarget
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mThisFrameLoader
(
aThisFrameLoader
)
mOtherFrameLoader
(
aOtherFrameLoader
)
mThisDocShell
(
aThisDocShell
)
mOtherDocShell
(
aOtherDocShell
)
mThisEventTarget
(
aThisEventTarget
)
mOtherEventTarget
(
aOtherEventTarget
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mThisFrameLoader
-
>
mInSwap
=
true
;
mOtherFrameLoader
-
>
mInSwap
=
true
;
mThisDocShell
-
>
SetInFrameSwap
(
true
)
;
mOtherDocShell
-
>
SetInFrameSwap
(
true
)
;
nsContentUtils
:
:
FirePageShowEventForFrameLoaderSwap
(
mThisDocShell
mThisEventTarget
false
)
;
nsContentUtils
:
:
FirePageShowEventForFrameLoaderSwap
(
mOtherDocShell
mOtherEventTarget
false
)
;
nsContentUtils
:
:
FirePageHideEventForFrameLoaderSwap
(
mThisDocShell
mThisEventTarget
)
;
nsContentUtils
:
:
FirePageHideEventForFrameLoaderSwap
(
mOtherDocShell
mOtherEventTarget
)
;
}
~
AutoResetInFrameSwap
(
)
{
nsContentUtils
:
:
FirePageShowEventForFrameLoaderSwap
(
mThisDocShell
mThisEventTarget
true
)
;
nsContentUtils
:
:
FirePageShowEventForFrameLoaderSwap
(
mOtherDocShell
mOtherEventTarget
true
)
;
mThisFrameLoader
-
>
mInSwap
=
false
;
mOtherFrameLoader
-
>
mInSwap
=
false
;
mThisDocShell
-
>
SetInFrameSwap
(
false
)
;
mOtherDocShell
-
>
SetInFrameSwap
(
false
)
;
if
(
RefPtr
<
Document
>
doc
=
mThisDocShell
-
>
GetDocument
(
)
)
{
doc
-
>
UpdateVisibilityState
(
)
;
}
if
(
RefPtr
<
Document
>
doc
=
mOtherDocShell
-
>
GetDocument
(
)
)
{
doc
-
>
UpdateVisibilityState
(
)
;
}
}
private
:
RefPtr
<
nsFrameLoader
>
mThisFrameLoader
;
RefPtr
<
nsFrameLoader
>
mOtherFrameLoader
;
RefPtr
<
nsDocShell
>
mThisDocShell
;
RefPtr
<
nsDocShell
>
mOtherDocShell
;
nsCOMPtr
<
EventTarget
>
mThisEventTarget
;
nsCOMPtr
<
EventTarget
>
mOtherEventTarget
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
nsresult
nsFrameLoader
:
:
SwapWithOtherLoader
(
nsFrameLoader
*
aOther
nsFrameLoaderOwner
*
aThisOwner
nsFrameLoaderOwner
*
aOtherOwner
)
{
#
ifdef
DEBUG
RefPtr
<
nsFrameLoader
>
first
=
aThisOwner
-
>
GetFrameLoader
(
)
;
RefPtr
<
nsFrameLoader
>
second
=
aOtherOwner
-
>
GetFrameLoader
(
)
;
MOZ_ASSERT
(
first
=
=
this
"
aThisOwner
must
own
this
"
)
;
MOZ_ASSERT
(
second
=
=
aOther
"
aOtherOwner
must
own
aOther
"
)
;
#
endif
NS_ENSURE_STATE
(
!
mInShow
&
&
!
aOther
-
>
mInShow
)
;
if
(
IsRemoteFrame
(
)
!
=
aOther
-
>
IsRemoteFrame
(
)
)
{
NS_WARNING
(
"
Swapping
remote
and
non
-
remote
frames
is
not
currently
supported
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
Element
*
ourContent
=
mOwnerContent
;
Element
*
otherContent
=
aOther
-
>
mOwnerContent
;
if
(
!
ourContent
|
|
!
otherContent
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourHasSrcdoc
=
ourContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
bool
otherHasSrcdoc
=
otherContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
if
(
ourHasSrcdoc
|
|
otherHasSrcdoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourFullscreenAllowed
=
ourContent
-
>
IsXULElement
(
)
|
|
(
OwnerIsMozBrowserFrame
(
)
&
&
(
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
)
;
bool
otherFullscreenAllowed
=
otherContent
-
>
IsXULElement
(
)
|
|
(
aOther
-
>
OwnerIsMozBrowserFrame
(
)
&
&
(
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
)
;
if
(
ourFullscreenAllowed
!
=
otherFullscreenAllowed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourPaymentRequestAllowed
=
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowpaymentrequest
)
;
bool
otherPaymentRequestAllowed
=
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowpaymentrequest
)
;
if
(
ourPaymentRequestAllowed
!
=
otherPaymentRequestAllowed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsILoadContext
*
ourLoadContext
=
ourContent
-
>
OwnerDoc
(
)
-
>
GetLoadContext
(
)
;
nsILoadContext
*
otherLoadContext
=
otherContent
-
>
OwnerDoc
(
)
-
>
GetLoadContext
(
)
;
MOZ_ASSERT
(
ourLoadContext
&
&
otherLoadContext
"
Swapping
frames
within
dead
documents
?
"
)
;
if
(
ourLoadContext
-
>
UseRemoteTabs
(
)
!
=
otherLoadContext
-
>
UseRemoteTabs
(
)
)
{
NS_WARNING
(
"
Can
'
t
swap
between
e10s
and
non
-
e10s
windows
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
ourLoadContext
-
>
UseRemoteSubframes
(
)
!
=
otherLoadContext
-
>
UseRemoteSubframes
(
)
)
{
NS_WARNING
(
"
Can
'
t
swap
between
fission
and
non
-
fission
windows
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
IsRemoteFrame
(
)
)
{
MOZ_ASSERT
(
aOther
-
>
IsRemoteFrame
(
)
)
;
return
SwapWithOtherRemoteLoader
(
aOther
aThisOwner
aOtherOwner
)
;
}
bool
equal
;
nsresult
rv
=
ourContent
-
>
NodePrincipal
(
)
-
>
Equals
(
otherContent
-
>
NodePrincipal
(
)
&
equal
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
equal
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
RefPtr
<
nsDocShell
>
ourDocshell
=
static_cast
<
nsDocShell
*
>
(
GetExistingDocShell
(
)
)
;
RefPtr
<
nsDocShell
>
otherDocshell
=
static_cast
<
nsDocShell
*
>
(
aOther
-
>
GetExistingDocShell
(
)
)
;
if
(
!
ourDocshell
|
|
!
otherDocshell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
ourRootTreeItem
otherRootTreeItem
;
ourDocshell
-
>
GetInProcessSameTypeRootTreeItem
(
getter_AddRefs
(
ourRootTreeItem
)
)
;
otherDocshell
-
>
GetInProcessSameTypeRootTreeItem
(
getter_AddRefs
(
otherRootTreeItem
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
ourRootWebnav
=
do_QueryInterface
(
ourRootTreeItem
)
;
nsCOMPtr
<
nsIWebNavigation
>
otherRootWebnav
=
do_QueryInterface
(
otherRootTreeItem
)
;
if
(
!
ourRootWebnav
|
|
!
otherRootWebnav
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
RefPtr
<
ChildSHistory
>
ourHistory
=
ourRootWebnav
-
>
GetSessionHistory
(
)
;
RefPtr
<
ChildSHistory
>
otherHistory
=
otherRootWebnav
-
>
GetSessionHistory
(
)
;
if
(
(
ourRootTreeItem
!
=
ourDocshell
|
|
otherRootTreeItem
!
=
otherDocshell
)
&
&
(
ourHistory
|
|
otherHistory
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
int32_t
ourType
=
ourDocshell
-
>
ItemType
(
)
;
int32_t
otherType
=
otherDocshell
-
>
ItemType
(
)
;
if
(
ourType
!
=
otherType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
ourType
!
=
nsIDocShellTreeItem
:
:
typeContent
&
&
(
!
AllDescendantsOfType
(
ourDocshell
ourType
)
|
|
!
AllDescendantsOfType
(
otherDocshell
otherType
)
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
ourOwner
otherOwner
;
ourDocshell
-
>
GetTreeOwner
(
getter_AddRefs
(
ourOwner
)
)
;
otherDocshell
-
>
GetTreeOwner
(
getter_AddRefs
(
otherOwner
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
ourParentItem
otherParentItem
;
ourDocshell
-
>
GetInProcessParent
(
getter_AddRefs
(
ourParentItem
)
)
;
otherDocshell
-
>
GetInProcessParent
(
getter_AddRefs
(
otherParentItem
)
)
;
if
(
!
ourParentItem
|
|
!
otherParentItem
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
int32_t
ourParentType
=
ourParentItem
-
>
ItemType
(
)
;
int32_t
otherParentType
=
otherParentItem
-
>
ItemType
(
)
;
if
(
ourParentType
!
=
otherParentType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
ourDocshell
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
otherWindow
=
otherDocshell
-
>
GetWindow
(
)
;
nsCOMPtr
<
Element
>
ourFrameElement
=
ourWindow
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
Element
>
otherFrameElement
=
otherWindow
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
EventTarget
>
ourChromeEventHandler
=
ourWindow
-
>
GetChromeEventHandler
(
)
;
nsCOMPtr
<
EventTarget
>
otherChromeEventHandler
=
otherWindow
-
>
GetChromeEventHandler
(
)
;
nsCOMPtr
<
EventTarget
>
ourEventTarget
=
ourWindow
-
>
GetParentTarget
(
)
;
nsCOMPtr
<
EventTarget
>
otherEventTarget
=
otherWindow
-
>
GetParentTarget
(
)
;
NS_ASSERTION
(
SameCOMIdentity
(
ourFrameElement
ourContent
)
&
&
SameCOMIdentity
(
otherFrameElement
otherContent
)
&
&
SameCOMIdentity
(
ourChromeEventHandler
ourContent
)
&
&
SameCOMIdentity
(
otherChromeEventHandler
otherContent
)
"
How
did
that
happen
exactly
?
"
)
;
nsCOMPtr
<
Document
>
ourChildDocument
=
ourWindow
-
>
GetExtantDoc
(
)
;
nsCOMPtr
<
Document
>
otherChildDocument
=
otherWindow
-
>
GetExtantDoc
(
)
;
if
(
!
ourChildDocument
|
|
!
otherChildDocument
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
Document
>
ourParentDocument
=
ourChildDocument
-
>
GetInProcessParentDocument
(
)
;
nsCOMPtr
<
Document
>
otherParentDocument
=
otherChildDocument
-
>
GetInProcessParentDocument
(
)
;
Document
*
ourDoc
=
ourContent
-
>
GetComposedDoc
(
)
;
Document
*
otherDoc
=
otherContent
-
>
GetComposedDoc
(
)
;
if
(
!
ourDoc
|
|
!
otherDoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_ASSERTION
(
ourDoc
=
=
ourParentDocument
"
Unexpected
parent
document
"
)
;
NS_ASSERTION
(
otherDoc
=
=
otherParentDocument
"
Unexpected
parent
document
"
)
;
PresShell
*
ourPresShell
=
ourDoc
-
>
GetPresShell
(
)
;
PresShell
*
otherPresShell
=
otherDoc
-
>
GetPresShell
(
)
;
if
(
!
ourPresShell
|
|
!
otherPresShell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
OriginAttributes
ourOriginAttributes
=
ourDocshell
-
>
GetOriginAttributes
(
)
;
rv
=
PopulateUserContextIdFromAttribute
(
ourOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
otherOriginAttributes
=
otherDocshell
-
>
GetOriginAttributes
(
)
;
rv
=
aOther
-
>
PopulateUserContextIdFromAttribute
(
otherOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
ourOriginAttributes
!
=
otherOriginAttributes
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
mInSwap
|
|
aOther
-
>
mInSwap
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
AutoResetInFrameSwap
autoFrameSwap
(
this
aOther
ourDocshell
otherDocshell
ourEventTarget
otherEventTarget
)
;
nsIFrame
*
ourFrame
=
ourContent
-
>
GetPrimaryFrame
(
)
;
nsIFrame
*
otherFrame
=
otherContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
ourFrame
|
|
!
otherFrame
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsSubDocumentFrame
*
ourFrameFrame
=
do_QueryFrame
(
ourFrame
)
;
if
(
!
ourFrameFrame
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
rv
=
ourFrameFrame
-
>
BeginSwapDocShells
(
otherFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
OwnerIsMozBrowserFrame
(
)
&
&
!
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
DestroyBrowserFrameScripts
(
)
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
aOther
-
>
DestroyBrowserFrameScripts
(
)
;
}
ourParentItem
-
>
RemoveChild
(
ourDocshell
)
;
otherParentItem
-
>
RemoveChild
(
otherDocshell
)
;
if
(
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
)
{
ourOwner
-
>
ContentShellRemoved
(
ourDocshell
)
;
otherOwner
-
>
ContentShellRemoved
(
otherDocshell
)
;
}
ourParentItem
-
>
AddChild
(
otherDocshell
)
;
otherParentItem
-
>
AddChild
(
ourDocshell
)
;
ourDocshell
-
>
SetChromeEventHandler
(
otherChromeEventHandler
)
;
otherDocshell
-
>
SetChromeEventHandler
(
ourChromeEventHandler
)
;
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
ourDocshell
otherOwner
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
?
otherChromeEventHandler
.
get
(
)
:
nullptr
)
;
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
otherDocshell
ourOwner
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
?
ourChromeEventHandler
.
get
(
)
:
nullptr
)
;
SetOwnerContent
(
otherContent
)
;
aOther
-
>
SetOwnerContent
(
ourContent
)
;
AddTreeItemToTreeOwner
(
ourDocshell
otherOwner
)
;
aOther
-
>
AddTreeItemToTreeOwner
(
otherDocshell
ourOwner
)
;
ourParentDocument
-
>
SetSubDocumentFor
(
ourContent
nullptr
)
;
otherParentDocument
-
>
SetSubDocumentFor
(
otherContent
nullptr
)
;
ourParentDocument
-
>
SetSubDocumentFor
(
ourContent
otherChildDocument
)
;
otherParentDocument
-
>
SetSubDocumentFor
(
otherContent
ourChildDocument
)
;
ourWindow
-
>
SetFrameElementInternal
(
otherFrameElement
)
;
otherWindow
-
>
SetFrameElementInternal
(
ourFrameElement
)
;
RefPtr
<
nsFrameMessageManager
>
ourMessageManager
=
mMessageManager
;
RefPtr
<
nsFrameMessageManager
>
otherMessageManager
=
aOther
-
>
mMessageManager
;
if
(
mChildMessageManager
)
{
InProcessBrowserChildMessageManager
*
browserChild
=
mChildMessageManager
;
browserChild
-
>
SetOwner
(
otherContent
)
;
browserChild
-
>
SetChromeMessageManager
(
otherMessageManager
)
;
}
if
(
aOther
-
>
mChildMessageManager
)
{
InProcessBrowserChildMessageManager
*
otherBrowserChild
=
aOther
-
>
mChildMessageManager
;
otherBrowserChild
-
>
SetOwner
(
ourContent
)
;
otherBrowserChild
-
>
SetChromeMessageManager
(
ourMessageManager
)
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
SetCallback
(
aOther
)
;
}
if
(
aOther
-
>
mMessageManager
)
{
aOther
-
>
mMessageManager
-
>
SetCallback
(
this
)
;
}
mMessageManager
.
swap
(
aOther
-
>
mMessageManager
)
;
RefPtr
<
nsFrameLoader
>
kungFuDeathGrip
(
this
)
;
aThisOwner
-
>
SetFrameLoader
(
aOther
)
;
aOtherOwner
-
>
SetFrameLoader
(
kungFuDeathGrip
)
;
if
(
ourHistory
)
{
ourHistory
-
>
EvictLocalContentViewers
(
)
;
}
if
(
otherHistory
)
{
otherHistory
-
>
EvictLocalContentViewers
(
)
;
}
NS_ASSERTION
(
ourFrame
=
=
ourContent
-
>
GetPrimaryFrame
(
)
&
&
otherFrame
=
=
otherContent
-
>
GetPrimaryFrame
(
)
"
changed
primary
frame
"
)
;
ourFrameFrame
-
>
EndSwapDocShells
(
otherFrame
)
;
ourPresShell
-
>
BackingScaleFactorChanged
(
)
;
otherPresShell
-
>
BackingScaleFactorChanged
(
)
;
InitializeBrowserAPI
(
)
;
aOther
-
>
InitializeBrowserAPI
(
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
Destroy
(
bool
aForProcessSwitch
)
{
StartDestroy
(
aForProcessSwitch
)
;
}
class
nsFrameLoaderDestroyRunnable
:
public
Runnable
{
enum
DestroyPhase
{
eDestroyDocShell
eWaitForUnloadMessage
eDestroyComplete
}
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
DestroyPhase
mPhase
;
public
:
explicit
nsFrameLoaderDestroyRunnable
(
nsFrameLoader
*
aFrameLoader
)
:
mozilla
:
:
Runnable
(
"
nsFrameLoaderDestroyRunnable
"
)
mFrameLoader
(
aFrameLoader
)
mPhase
(
eDestroyDocShell
)
{
}
NS_IMETHOD
Run
(
)
override
;
}
;
void
nsFrameLoader
:
:
StartDestroy
(
bool
aForProcessSwitch
)
{
if
(
mDestroyCalled
)
{
return
;
}
mDestroyCalled
=
true
;
RequestTabStateFlush
(
0
true
)
;
if
(
mMessageManager
)
{
mMessageManager
-
>
Close
(
)
;
}
if
(
mChildMessageManager
|
|
mRemoteBrowser
)
{
mOwnerContentStrong
=
mOwnerContent
;
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
browserParent
-
>
CacheFrameLoader
(
this
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
CacheFrameLoader
(
this
)
;
}
}
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
browserParent
-
>
RemoveWindowListeners
(
)
;
if
(
aForProcessSwitch
)
{
browserParent
-
>
SuspendProgressEventsUntilAfterNextLoadStarts
(
)
;
}
}
nsCOMPtr
<
Document
>
doc
;
bool
dynamicSubframeRemoval
=
false
;
if
(
mOwnerContent
)
{
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
dynamicSubframeRemoval
=
!
mIsTopLevelContent
&
&
!
doc
-
>
InUnlinkOrDeletion
(
)
;
doc
-
>
SetSubDocumentFor
(
mOwnerContent
nullptr
)
;
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentRemoved
)
;
SetOwnerContent
(
nullptr
)
;
}
if
(
dynamicSubframeRemoval
)
{
if
(
GetDocShell
(
)
)
{
GetDocShell
(
)
-
>
RemoveFromSessionHistory
(
)
;
}
}
if
(
mIsTopLevelContent
)
{
if
(
GetDocShell
(
)
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
parentItem
;
GetDocShell
(
)
-
>
GetInProcessParent
(
getter_AddRefs
(
parentItem
)
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
owner
=
do_GetInterface
(
parentItem
)
;
if
(
owner
)
{
owner
-
>
ContentShellRemoved
(
GetDocShell
(
)
)
;
}
}
}
if
(
GetDocShell
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
win_private
(
GetDocShell
(
)
-
>
GetWindow
(
)
)
;
if
(
win_private
)
{
win_private
-
>
SetFrameElementInternal
(
nullptr
)
;
}
}
nsCOMPtr
<
nsIRunnable
>
destroyRunnable
=
new
nsFrameLoaderDestroyRunnable
(
this
)
;
if
(
mNeedsAsyncDestroy
|
|
!
doc
|
|
NS_FAILED
(
doc
-
>
FinalizeFrameLoader
(
this
destroyRunnable
)
)
)
{
NS_DispatchToCurrentThread
(
destroyRunnable
)
;
}
}
nsresult
nsFrameLoaderDestroyRunnable
:
:
Run
(
)
{
switch
(
mPhase
)
{
case
eDestroyDocShell
:
mFrameLoader
-
>
DestroyDocShell
(
)
;
if
(
mFrameLoader
-
>
mChildMessageManager
)
{
mPhase
=
eWaitForUnloadMessage
;
NS_DispatchToCurrentThread
(
this
)
;
}
break
;
case
eWaitForUnloadMessage
:
mPhase
=
eDestroyComplete
;
NS_DispatchToCurrentThread
(
this
)
;
break
;
case
eDestroyComplete
:
mFrameLoader
-
>
DestroyComplete
(
)
;
break
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
DestroyDocShell
(
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
DestroyStart
(
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
FireUnloadEvent
(
)
;
}
if
(
mSessionStoreListener
)
{
mSessionStoreListener
-
>
RemoveListeners
(
)
;
mSessionStoreListener
=
nullptr
;
}
if
(
GetDocShell
(
)
)
{
GetDocShell
(
)
-
>
Destroy
(
)
;
}
if
(
!
mWillChangeProcess
&
&
mPendingBrowsingContext
-
>
EverAttached
(
)
)
{
mPendingBrowsingContext
-
>
Detach
(
)
;
}
mPendingBrowsingContext
=
nullptr
;
mDocShell
=
nullptr
;
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
DisconnectEventListeners
(
)
;
}
}
void
nsFrameLoader
:
:
DestroyComplete
(
)
{
if
(
mChildMessageManager
|
|
mRemoteBrowser
)
{
mOwnerContentStrong
=
nullptr
;
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
browserParent
-
>
CacheFrameLoader
(
nullptr
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
CacheFrameLoader
(
nullptr
)
;
}
}
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
DestroyComplete
(
)
;
mRemoteBrowser
=
nullptr
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
Disconnect
(
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
Disconnect
(
)
;
}
mMessageManager
=
nullptr
;
mChildMessageManager
=
nullptr
;
}
void
nsFrameLoader
:
:
SetOwnerContent
(
Element
*
aContent
)
{
if
(
mObservingOwnerContent
)
{
mObservingOwnerContent
=
false
;
mOwnerContent
-
>
RemoveMutationObserver
(
this
)
;
}
mOwnerContent
=
aContent
;
if
(
RefPtr
<
BrowsingContext
>
browsingContext
=
GetExtantBrowsingContext
(
)
)
{
browsingContext
-
>
SetEmbedderElement
(
mOwnerContent
)
;
}
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JS
:
:
RootedObject
wrapper
(
jsapi
.
cx
(
)
GetWrapper
(
)
)
;
if
(
wrapper
)
{
JSAutoRealm
ar
(
jsapi
.
cx
(
)
wrapper
)
;
IgnoredErrorResult
rv
;
UpdateReflectorGlobal
(
jsapi
.
cx
(
)
wrapper
rv
)
;
Unused
<
<
NS_WARN_IF
(
rv
.
Failed
(
)
)
;
}
}
bool
nsFrameLoader
:
:
OwnerIsMozBrowserFrame
(
)
{
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
return
browserFrame
?
browserFrame
-
>
GetReallyIsBrowser
(
)
:
false
;
}
void
nsFrameLoader
:
:
AssertSafeToInit
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
|
|
mOwnerContent
-
>
OwnerDoc
(
)
-
>
IsStaticDocument
(
)
"
FrameLoader
should
never
be
initialized
during
"
"
document
update
or
reflow
!
"
)
;
}
nsresult
nsFrameLoader
:
:
MaybeCreateDocShell
(
)
{
if
(
GetDocShell
(
)
)
{
return
NS_OK
;
}
if
(
IsRemoteFrame
(
)
)
{
return
NS_OK
;
}
NS_ENSURE_STATE
(
!
mDestroyCalled
)
;
AssertSafeToInit
(
)
;
Document
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
if
(
!
doc
-
>
IsStaticDocument
(
)
&
&
(
!
doc
-
>
GetWindow
(
)
|
|
!
mOwnerContent
-
>
IsInComposedDoc
(
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
!
doc
-
>
IsActive
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
RefPtr
<
nsDocShell
>
parentDocShell
=
nsDocShell
:
:
Cast
(
doc
-
>
GetDocShell
(
)
)
;
if
(
NS_WARN_IF
(
!
parentDocShell
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
mPendingBrowsingContext
-
>
EnsureAttached
(
)
;
RefPtr
<
nsDocShell
>
docShell
=
nsDocShell
:
:
Create
(
mPendingBrowsingContext
)
;
NS_ENSURE_TRUE
(
docShell
NS_ERROR_FAILURE
)
;
mDocShell
=
docShell
;
mPendingBrowsingContext
-
>
SetEmbedderElement
(
mOwnerContent
)
;
mPendingBrowsingContext
-
>
Embed
(
)
;
mIsTopLevelContent
=
mPendingBrowsingContext
-
>
IsContent
(
)
&
&
!
mPendingBrowsingContext
-
>
GetParent
(
)
;
if
(
!
mNetworkCreated
&
&
!
mIsTopLevelContent
)
{
docShell
-
>
SetCreatedDynamically
(
true
)
;
}
if
(
mIsTopLevelContent
)
{
parentDocShell
-
>
AddChild
(
docShell
)
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
parentDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
AddTreeItemToTreeOwner
(
docShell
parentTreeOwner
)
;
RefPtr
<
EventTarget
>
chromeEventHandler
;
bool
parentIsContent
=
parentDocShell
-
>
GetBrowsingContext
(
)
-
>
IsContent
(
)
;
if
(
parentIsContent
)
{
parentDocShell
-
>
GetChromeEventHandler
(
getter_AddRefs
(
chromeEventHandler
)
)
;
}
else
{
chromeEventHandler
=
mOwnerContent
;
}
docShell
-
>
SetChromeEventHandler
(
chromeEventHandler
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
newWindow
=
docShell
-
>
GetWindow
(
)
;
if
(
NS_WARN_IF
(
!
newWindow
)
)
{
NS_WARNING
(
"
Something
wrong
when
creating
the
docshell
for
a
frameloader
!
"
)
;
return
NS_ERROR_FAILURE
;
}
newWindow
-
>
SetFrameElementInternal
(
mOwnerContent
)
;
if
(
mOwnerContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
allowscriptstoclose
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
nsGlobalWindowOuter
:
:
Cast
(
newWindow
)
-
>
AllowScriptsToClose
(
)
;
}
if
(
NS_FAILED
(
docShell
-
>
Create
(
)
)
)
{
NS_WARNING
(
"
Something
wrong
when
creating
the
docshell
for
a
frameloader
!
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
mIsTopLevelContent
&
&
mOwnerContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
)
{
nsresult
rv
=
docShell
-
>
InitSessionHistory
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
OriginAttributes
attrs
;
if
(
parentDocShell
-
>
ItemType
(
)
=
=
docShell
-
>
ItemType
(
)
)
{
attrs
=
parentDocShell
-
>
GetOriginAttributes
(
)
;
}
if
(
parentIsContent
&
&
!
doc
-
>
NodePrincipal
(
)
-
>
IsSystemPrincipal
(
)
&
&
!
OwnerIsMozBrowserFrame
(
)
)
{
OriginAttributes
oa
=
doc
-
>
NodePrincipal
(
)
-
>
OriginAttributesRef
(
)
;
MOZ_ASSERT_IF
(
mIsTopLevelContent
attrs
.
mFirstPartyDomain
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
attrs
.
mUserContextId
=
=
oa
.
mUserContextId
"
docshell
and
document
should
have
the
same
userContextId
attribute
.
"
)
;
MOZ_ASSERT
(
attrs
.
mPrivateBrowsingId
=
=
oa
.
mPrivateBrowsingId
"
docshell
and
document
should
have
the
same
privateBrowsingId
"
"
attribute
.
"
)
;
attrs
=
oa
;
}
if
(
OwnerIsMozBrowserFrame
(
)
)
{
docShell
-
>
SetFrameType
(
nsIDocShell
:
:
FRAME_TYPE_BROWSER
)
;
}
else
if
(
mPendingBrowsingContext
-
>
GetParent
(
)
)
{
docShell
-
>
SetIsFrame
(
)
;
}
uint32_t
sandboxFlags
=
0
;
HTMLIFrameElement
*
iframe
=
HTMLIFrameElement
:
:
FromNode
(
mOwnerContent
)
;
if
(
iframe
)
{
sandboxFlags
=
iframe
-
>
GetSandboxFlags
(
)
;
}
ApplySandboxFlags
(
sandboxFlags
)
;
nsresult
rv
=
PopulateUserContextIdFromAttribute
(
attrs
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
bool
isPrivate
=
false
;
rv
=
parentDocShell
-
>
GetUsePrivateBrowsing
(
&
isPrivate
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
if
(
OwnerIsMozBrowserFrame
(
)
)
{
nsAutoString
name
;
if
(
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
name
)
)
{
docShell
-
>
SetName
(
name
)
;
}
docShell
-
>
SetFullscreenAllowed
(
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
;
bool
isPrivate
=
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozprivatebrowsing
)
;
if
(
isPrivate
)
{
if
(
docShell
-
>
GetHasLoadedNonBlankURI
(
)
)
{
nsContentUtils
:
:
ReportToConsoleNonLocalized
(
NS_LITERAL_STRING
(
"
We
should
not
switch
to
Private
Browsing
after
"
"
loading
a
document
.
"
)
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
mozprivatebrowsing
"
)
nullptr
)
;
}
else
{
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
}
}
}
docShell
-
>
SetOriginAttributes
(
attrs
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
=
doc
-
>
GetWindow
(
)
;
if
(
!
docShell
-
>
GetIsMozBrowser
(
)
&
&
parentDocShell
-
>
ItemType
(
)
=
=
docShell
-
>
ItemType
(
)
&
&
!
doc
-
>
IsStaticDocument
(
)
&
&
win
)
{
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
ancestorPrincipals
;
ancestorPrincipals
=
doc
-
>
AncestorPrincipals
(
)
;
ancestorPrincipals
.
InsertElementAt
(
0
doc
-
>
NodePrincipal
(
)
)
;
docShell
-
>
SetAncestorPrincipals
(
std
:
:
move
(
ancestorPrincipals
)
)
;
nsTArray
<
uint64_t
>
ancestorOuterWindowIDs
;
ancestorOuterWindowIDs
=
doc
-
>
AncestorOuterWindowIDs
(
)
;
ancestorOuterWindowIDs
.
InsertElementAt
(
0
win
-
>
WindowID
(
)
)
;
docShell
-
>
SetAncestorOuterWindowIDs
(
std
:
:
move
(
ancestorOuterWindowIDs
)
)
;
}
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
ToSupports
(
this
)
"
inprocess
-
browser
-
shown
"
nullptr
)
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
GetURL
(
nsString
&
aURI
nsIPrincipal
*
*
aTriggeringPrincipal
nsIContentSecurityPolicy
*
*
aCsp
)
{
aURI
.
Truncate
(
)
;
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
mOwnerContent
-
>
NodePrincipal
(
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
mOwnerContent
-
>
GetCsp
(
)
;
if
(
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
object
)
)
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
data
aURI
)
;
}
else
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
src
aURI
)
;
if
(
RefPtr
<
nsGenericHTMLFrameElement
>
frame
=
do_QueryObject
(
mOwnerContent
)
)
{
nsCOMPtr
<
nsIPrincipal
>
srcPrincipal
=
frame
-
>
GetSrcTriggeringPrincipal
(
)
;
if
(
srcPrincipal
)
{
triggeringPrincipal
=
srcPrincipal
;
nsCOMPtr
<
nsIExpandedPrincipal
>
ep
=
do_QueryInterface
(
triggeringPrincipal
)
;
if
(
ep
)
{
csp
=
ep
-
>
GetCsp
(
)
;
}
}
}
}
triggeringPrincipal
.
forget
(
aTriggeringPrincipal
)
;
csp
.
forget
(
aCsp
)
;
}
nsresult
nsFrameLoader
:
:
CheckForRecursiveLoad
(
nsIURI
*
aURI
)
{
nsresult
rv
;
MOZ_ASSERT
(
!
IsRemoteFrame
(
)
"
Shouldn
'
t
call
CheckForRecursiveLoad
on
remote
frames
.
"
)
;
mDepthTooGreat
=
false
;
RefPtr
<
BrowsingContext
>
parentBC
(
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetBrowsingContext
(
)
)
;
MOZ_ASSERT
(
parentBC
"
How
can
we
not
have
a
parent
here
?
"
)
;
if
(
!
parentBC
-
>
IsContent
(
)
)
{
return
NS_OK
;
}
int32_t
depth
=
0
;
for
(
BrowsingContext
*
bc
=
parentBC
;
bc
;
bc
=
bc
-
>
GetParent
(
)
)
{
+
+
depth
;
if
(
depth
>
=
MAX_DEPTH_CONTENT_FRAMES
)
{
mDepthTooGreat
=
true
;
NS_WARNING
(
"
Too
many
nested
content
frames
so
giving
up
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
}
nsAutoCString
buffer
;
rv
=
aURI
-
>
GetScheme
(
buffer
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
buffer
.
EqualsLiteral
(
"
about
"
)
)
{
rv
=
aURI
-
>
GetPathQueryRef
(
buffer
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
buffer
.
EqualsLiteral
(
"
srcdoc
"
)
)
{
return
NS_OK
;
}
}
int32_t
matchCount
=
0
;
for
(
BrowsingContext
*
bc
=
parentBC
;
bc
;
bc
=
bc
-
>
GetParent
(
)
)
{
if
(
auto
*
docShell
=
nsDocShell
:
:
Cast
(
bc
-
>
GetDocShell
(
)
)
)
{
nsCOMPtr
<
nsIURI
>
parentURI
;
docShell
-
>
GetCurrentURI
(
getter_AddRefs
(
parentURI
)
)
;
if
(
parentURI
)
{
bool
equal
;
rv
=
aURI
-
>
EqualsExceptRef
(
parentURI
&
equal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
equal
)
{
matchCount
+
+
;
if
(
matchCount
>
=
MAX_SAME_URL_CONTENT_FRAMES
)
{
NS_WARNING
(
"
Too
many
nested
content
frames
have
the
same
url
(
recursion
?
)
"
"
so
giving
up
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
}
}
}
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
GetWindowDimensions
(
nsIntRect
&
aRect
)
{
Document
*
doc
=
mOwnerContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
=
doc
-
>
GetWindow
(
)
;
if
(
!
win
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentAsItem
(
win
-
>
GetDocShell
(
)
)
;
if
(
!
parentAsItem
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentOwner
;
if
(
NS_FAILED
(
parentAsItem
-
>
GetTreeOwner
(
getter_AddRefs
(
parentOwner
)
)
)
|
|
!
parentOwner
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
(
do_GetInterface
(
parentOwner
)
)
;
treeOwnerAsWin
-
>
GetPosition
(
&
aRect
.
x
&
aRect
.
y
)
;
treeOwnerAsWin
-
>
GetSize
(
&
aRect
.
width
&
aRect
.
height
)
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
UpdatePositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
{
if
(
IsRemoteFrame
(
)
)
{
if
(
mRemoteBrowser
)
{
ScreenIntSize
size
=
aIFrame
-
>
GetSubdocumentSize
(
)
;
if
(
!
mRemoteBrowserShown
)
{
ShowRemoteFrame
(
size
aIFrame
)
;
}
nsIntRect
dimensions
;
NS_ENSURE_SUCCESS
(
GetWindowDimensions
(
dimensions
)
NS_ERROR_FAILURE
)
;
mLazySize
=
size
;
mRemoteBrowser
-
>
UpdateDimensions
(
dimensions
size
)
;
}
return
NS_OK
;
}
UpdateBaseWindowPositionAndSize
(
aIFrame
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
SendIsUnderHiddenEmbedderElement
(
bool
aIsUnderHiddenEmbedderElement
)
{
MOZ_ASSERT
(
IsRemoteFrame
(
)
)
;
if
(
auto
*
browserBridgeChild
=
GetBrowserBridgeChild
(
)
)
{
browserBridgeChild
-
>
SetIsUnderHiddenEmbedderElement
(
aIsUnderHiddenEmbedderElement
)
;
}
}
void
nsFrameLoader
:
:
UpdateBaseWindowPositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
{
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
GetDocShell
(
IgnoreErrors
(
)
)
;
if
(
baseWindow
)
{
int32_t
x
=
0
;
int32_t
y
=
0
;
AutoWeakFrame
weakFrame
(
aIFrame
)
;
baseWindow
-
>
GetPosition
(
&
x
&
y
)
;
if
(
!
weakFrame
.
IsAlive
(
)
)
{
return
;
}
ScreenIntSize
size
=
aIFrame
-
>
GetSubdocumentSize
(
)
;
mLazySize
=
size
;
baseWindow
-
>
SetPositionAndSize
(
x
y
size
.
width
size
.
height
nsIBaseWindow
:
:
eDelayResize
)
;
}
}
uint32_t
nsFrameLoader
:
:
LazyWidth
(
)
const
{
uint32_t
lazyWidth
=
mLazySize
.
width
;
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
lazyWidth
=
frame
-
>
PresContext
(
)
-
>
DevPixelsToIntCSSPixels
(
lazyWidth
)
;
}
return
lazyWidth
;
}
uint32_t
nsFrameLoader
:
:
LazyHeight
(
)
const
{
uint32_t
lazyHeight
=
mLazySize
.
height
;
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
lazyHeight
=
frame
-
>
PresContext
(
)
-
>
DevPixelsToIntCSSPixels
(
lazyHeight
)
;
}
return
lazyHeight
;
}
static
Tuple
<
ContentParent
*
BrowserParent
*
>
GetContentParent
(
Element
*
aBrowser
)
{
using
ReturnTuple
=
Tuple
<
ContentParent
*
BrowserParent
*
>
;
nsCOMPtr
<
nsIBrowser
>
browser
=
aBrowser
?
aBrowser
-
>
AsBrowser
(
)
:
nullptr
;
if
(
!
browser
)
{
return
ReturnTuple
(
nullptr
nullptr
)
;
}
RefPtr
<
nsFrameLoader
>
otherLoader
;
browser
-
>
GetSameProcessAsFrameLoader
(
getter_AddRefs
(
otherLoader
)
)
;
if
(
!
otherLoader
)
{
return
ReturnTuple
(
nullptr
nullptr
)
;
}
BrowserParent
*
browserParent
=
BrowserParent
:
:
GetFrom
(
otherLoader
)
;
if
(
browserParent
&
&
browserParent
-
>
Manager
(
)
)
{
return
MakeTuple
(
browserParent
-
>
Manager
(
)
browserParent
)
;
}
return
ReturnTuple
(
nullptr
nullptr
)
;
}
bool
nsFrameLoader
:
:
EnsureRemoteBrowser
(
)
{
MOZ_ASSERT
(
IsRemoteFrame
(
)
)
;
return
mRemoteBrowser
|
|
TryRemoteBrowser
(
)
;
}
bool
nsFrameLoader
:
:
TryRemoteBrowserInternal
(
)
{
NS_ASSERTION
(
!
mRemoteBrowser
"
TryRemoteBrowser
called
with
a
remote
browser
already
?
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
Remote
subframes
should
only
be
created
using
the
"
"
CanonicalBrowsingContext
:
:
ChangeFrameRemoteness
API
"
)
;
AssertSafeToInit
(
)
;
if
(
!
mOwnerContent
)
{
return
false
;
}
Document
*
doc
=
mOwnerContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
if
(
!
doc
-
>
IsActive
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
parentWin
=
doc
-
>
GetWindow
(
)
;
if
(
!
parentWin
)
{
return
false
;
}
nsCOMPtr
<
nsIDocShell
>
parentDocShell
=
parentWin
-
>
GetDocShell
(
)
;
if
(
!
parentDocShell
)
{
return
false
;
}
mPendingBrowsingContext
-
>
EnsureAttached
(
)
;
RefPtr
<
ContentParent
>
openerContentParent
;
RefPtr
<
nsIPrincipal
>
openerContentPrincipal
;
RefPtr
<
BrowserParent
>
sameTabGroupAs
;
if
(
auto
*
host
=
BrowserHost
:
:
GetFrom
(
parentDocShell
-
>
GetOpener
(
)
)
)
{
openerContentParent
=
host
-
>
GetContentParent
(
)
;
BrowserParent
*
openerBrowserParent
=
host
-
>
GetActor
(
)
;
if
(
openerBrowserParent
)
{
openerContentPrincipal
=
openerBrowserParent
-
>
GetContentPrincipal
(
)
;
}
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
!
XRE_IsContentProcess
(
)
)
{
if
(
parentDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
nsIURI
*
parentURI
=
parentWin
-
>
GetDocumentURI
(
)
;
if
(
!
parentURI
)
{
return
false
;
}
nsAutoCString
specIgnoringRef
;
if
(
NS_FAILED
(
parentURI
-
>
GetSpecIgnoringRef
(
specIgnoringRef
)
)
)
{
return
false
;
}
if
(
!
(
specIgnoringRef
.
EqualsLiteral
(
"
about
:
addons
"
)
|
|
specIgnoringRef
.
EqualsLiteral
(
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
aboutaddons
.
html
"
)
|
|
specIgnoringRef
.
EqualsLiteral
(
"
chrome
:
/
/
browser
/
content
/
webext
-
panels
.
xhtml
"
)
)
)
{
return
false
;
}
}
if
(
!
mOwnerContent
-
>
IsXULElement
(
)
)
{
return
false
;
}
if
(
!
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
type
nsGkAtoms
:
:
content
eIgnoreCase
)
)
{
return
false
;
}
Tie
(
openerContentParent
sameTabGroupAs
)
=
GetContentParent
(
mOwnerContent
)
;
if
(
RefPtr
<
BrowsingContext
>
openerBC
=
mPendingBrowsingContext
-
>
GetOpener
(
)
)
{
auto
global
=
openerBC
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
if
(
global
)
{
sameTabGroupAs
=
global
-
>
GetBrowserParent
(
)
;
}
}
}
uint32_t
chromeFlags
=
0
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentOwner
;
if
(
NS_FAILED
(
parentDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentOwner
)
)
)
|
|
!
parentOwner
)
{
return
false
;
}
nsCOMPtr
<
nsIAppWindow
>
window
(
do_GetInterface
(
parentOwner
)
)
;
if
(
window
&
&
NS_FAILED
(
window
-
>
GetChromeFlags
(
&
chromeFlags
)
)
)
{
return
false
;
}
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
TryRemoteBrowser
:
Create
"
OTHER
)
;
MutableTabContext
context
;
nsresult
rv
=
GetNewTabContext
(
&
context
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
openerContentPrincipal
)
{
context
.
SetFirstPartyDomainAttributes
(
openerContentPrincipal
-
>
OriginAttributesRef
(
)
.
mFirstPartyDomain
)
;
}
uint64_t
nextRemoteTabId
=
0
;
if
(
mOwnerContent
)
{
nsAutoString
nextBrowserParentIdAttr
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
nextRemoteTabId
nextBrowserParentIdAttr
)
;
nextRemoteTabId
=
strtoull
(
NS_ConvertUTF16toUTF8
(
nextBrowserParentIdAttr
)
.
get
(
)
nullptr
10
)
;
if
(
!
nextRemoteTabId
&
&
window
)
{
Unused
<
<
window
-
>
GetNextRemoteTabId
(
&
nextRemoteTabId
)
;
}
}
nsCOMPtr
<
Element
>
ownerElement
=
mOwnerContent
;
mRemoteBrowser
=
ContentParent
:
:
CreateBrowser
(
context
ownerElement
mRemoteType
mPendingBrowsingContext
openerContentParent
sameTabGroupAs
nextRemoteTabId
)
;
if
(
!
mRemoteBrowser
)
{
return
false
;
}
if
(
mPendingBrowsingContext
!
=
mRemoteBrowser
-
>
GetBrowsingContext
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
nextRemoteTabId
)
;
mPendingBrowsingContext
-
>
Detach
(
)
;
mPendingBrowsingContext
=
mRemoteBrowser
-
>
GetBrowsingContext
(
)
;
}
mRemoteBrowser
-
>
GetBrowsingContext
(
)
-
>
Embed
(
)
;
RefPtr
<
BrowserParent
>
browserParent
=
GetBrowserParent
(
)
;
ownerElement
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
false
)
;
browserParent
-
>
InitRendering
(
)
;
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentChanged
)
;
mChildID
=
browserParent
-
>
Manager
(
)
-
>
ChildID
(
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
parentDocShell
-
>
GetInProcessRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWin
=
rootItem
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsIDOMChromeWindow
>
rootChromeWin
=
do_QueryInterface
(
rootWin
)
;
if
(
rootChromeWin
)
{
nsCOMPtr
<
nsIBrowserDOMWindow
>
browserDOMWin
;
rootChromeWin
-
>
GetBrowserDOMWindow
(
getter_AddRefs
(
browserDOMWin
)
)
;
browserParent
-
>
SetBrowserDOMWindow
(
browserDOMWin
)
;
}
if
(
mOwnerContent
-
>
IsXULElement
(
)
)
{
nsAutoString
frameName
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
frameName
)
;
if
(
nsContentUtils
:
:
IsOverridingWindowName
(
frameName
)
)
{
mPendingBrowsingContext
-
>
SetName
(
frameName
)
;
}
if
(
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
allowscriptstoclose
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
Unused
<
<
browserParent
-
>
SendAllowScriptsToClose
(
)
;
}
}
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
return
true
;
}
bool
nsFrameLoader
:
:
TryRemoteBrowser
(
)
{
if
(
TryRemoteBrowserInternal
(
)
)
{
return
true
;
}
if
(
XRE_IsParentProcess
(
)
&
&
mOwnerContent
&
&
mOwnerContent
-
>
IsXULElement
(
)
)
{
MaybeNotifyCrashed
(
nullptr
nullptr
)
;
}
return
false
;
}
bool
nsFrameLoader
:
:
IsRemoteFrame
(
)
{
if
(
mIsRemoteFrame
)
{
MOZ_ASSERT
(
!
GetDocShell
(
)
"
Found
a
remote
frame
with
a
DocShell
"
)
;
return
true
;
}
return
false
;
}
RemoteBrowser
*
nsFrameLoader
:
:
GetRemoteBrowser
(
)
const
{
return
mRemoteBrowser
;
}
BrowserParent
*
nsFrameLoader
:
:
GetBrowserParent
(
)
const
{
if
(
!
mRemoteBrowser
)
{
return
nullptr
;
}
RefPtr
<
BrowserHost
>
browserHost
=
mRemoteBrowser
-
>
AsBrowserHost
(
)
;
if
(
!
browserHost
)
{
return
nullptr
;
}
return
browserHost
-
>
GetActor
(
)
;
}
BrowserBridgeChild
*
nsFrameLoader
:
:
GetBrowserBridgeChild
(
)
const
{
if
(
!
mRemoteBrowser
)
{
return
nullptr
;
}
RefPtr
<
BrowserBridgeHost
>
browserBridgeHost
=
mRemoteBrowser
-
>
AsBrowserBridgeHost
(
)
;
if
(
!
browserBridgeHost
)
{
return
nullptr
;
}
return
browserBridgeHost
-
>
GetActor
(
)
;
}
mozilla
:
:
layers
:
:
LayersId
nsFrameLoader
:
:
GetLayersId
(
)
const
{
MOZ_ASSERT
(
mIsRemoteFrame
)
;
return
mRemoteBrowser
-
>
GetLayersId
(
)
;
}
void
nsFrameLoader
:
:
ActivateRemoteFrame
(
ErrorResult
&
aRv
)
{
auto
*
browserParent
=
GetBrowserParent
(
)
;
if
(
!
browserParent
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
browserParent
-
>
Activate
(
)
;
}
void
nsFrameLoader
:
:
DeactivateRemoteFrame
(
ErrorResult
&
aRv
)
{
auto
*
browserParent
=
GetBrowserParent
(
)
;
if
(
!
browserParent
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
browserParent
-
>
Deactivate
(
false
)
;
}
void
nsFrameLoader
:
:
SendCrossProcessMouseEvent
(
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
ErrorResult
&
aRv
)
{
auto
*
browserParent
=
GetBrowserParent
(
)
;
if
(
!
browserParent
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
browserParent
-
>
SendMouseEvent
(
aType
aX
aY
aButton
aClickCount
aModifiers
aIgnoreRootScrollFrame
)
;
}
void
nsFrameLoader
:
:
ActivateFrameEvent
(
const
nsAString
&
aType
bool
aCapture
ErrorResult
&
aRv
)
{
auto
*
browserParent
=
GetBrowserParent
(
)
;
if
(
!
browserParent
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
bool
ok
=
browserParent
-
>
SendActivateFrameEvent
(
nsString
(
aType
)
aCapture
)
;
if
(
!
ok
)
{
aRv
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
}
}
nsresult
nsFrameLoader
:
:
CreateStaticClone
(
nsFrameLoader
*
aDest
)
{
if
(
NS_WARN_IF
(
IsRemoteFrame
(
)
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
aDest
-
>
mPendingBrowsingContext
-
>
EnsureAttached
(
)
;
aDest
-
>
mPendingBrowsingContext
-
>
SetEmbedderElement
(
aDest
-
>
mOwnerContent
)
;
aDest
-
>
mPendingBrowsingContext
-
>
Embed
(
)
;
aDest
-
>
mStaticCloneOf
=
this
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
FinishStaticClone
(
)
{
auto
exitGuard
=
MakeScopeExit
(
[
&
]
{
mStaticCloneOf
=
nullptr
;
}
)
;
if
(
NS_WARN_IF
(
!
mStaticCloneOf
|
|
IsDead
(
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
MaybeCreateDocShell
(
)
;
NS_ENSURE_STATE
(
GetDocShell
(
)
)
;
nsCOMPtr
<
Document
>
kungFuDeathGrip
=
GetDocShell
(
)
-
>
GetDocument
(
)
;
Unused
<
<
kungFuDeathGrip
;
nsCOMPtr
<
nsIContentViewer
>
viewer
;
GetDocShell
(
)
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
NS_ENSURE_STATE
(
viewer
)
;
nsIDocShell
*
origDocShell
=
mStaticCloneOf
-
>
GetDocShell
(
IgnoreErrors
(
)
)
;
NS_ENSURE_STATE
(
origDocShell
)
;
nsCOMPtr
<
Document
>
doc
=
origDocShell
-
>
GetDocument
(
)
;
NS_ENSURE_STATE
(
doc
)
;
nsCOMPtr
<
Document
>
clonedDoc
=
doc
-
>
CreateStaticClone
(
GetDocShell
(
)
)
;
viewer
-
>
SetDocument
(
clonedDoc
)
;
return
NS_OK
;
}
bool
nsFrameLoader
:
:
DoLoadMessageManagerScript
(
const
nsAString
&
aURL
bool
aRunInGlobalScope
)
{
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
return
browserParent
-
>
SendLoadRemoteScript
(
nsString
(
aURL
)
aRunInGlobalScope
)
;
}
RefPtr
<
InProcessBrowserChildMessageManager
>
browserChild
=
GetBrowserChildMessageManager
(
)
;
if
(
browserChild
)
{
browserChild
-
>
LoadFrameScript
(
aURL
aRunInGlobalScope
)
;
}
return
true
;
}
class
nsAsyncMessageToChild
:
public
nsSameProcessAsyncMessageBase
public
Runnable
{
public
:
nsAsyncMessageToChild
(
JS
:
:
RootingContext
*
aRootingCx
JS
:
:
Handle
<
JSObject
*
>
aCpows
nsFrameLoader
*
aFrameLoader
)
:
nsSameProcessAsyncMessageBase
(
aRootingCx
aCpows
)
mozilla
:
:
Runnable
(
"
nsAsyncMessageToChild
"
)
mFrameLoader
(
aFrameLoader
)
{
}
NS_IMETHOD
Run
(
)
override
{
InProcessBrowserChildMessageManager
*
browserChild
=
mFrameLoader
-
>
mChildMessageManager
;
if
(
browserChild
&
&
browserChild
-
>
GetInnerManager
(
)
&
&
mFrameLoader
-
>
GetExistingDocShell
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
kungFuDeathGrip
(
dom
:
:
RootingCx
(
)
browserChild
-
>
GetWrapper
(
)
)
;
ReceiveMessage
(
static_cast
<
EventTarget
*
>
(
browserChild
)
mFrameLoader
browserChild
-
>
GetInnerManager
(
)
)
;
}
return
NS_OK
;
}
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
}
;
nsresult
nsFrameLoader
:
:
DoSendAsyncMessage
(
JSContext
*
aCx
const
nsAString
&
aMessage
StructuredCloneData
&
aData
JS
:
:
Handle
<
JSObject
*
>
aCpows
nsIPrincipal
*
aPrincipal
)
{
auto
*
browserParent
=
GetBrowserParent
(
)
;
if
(
browserParent
)
{
ClonedMessageData
data
;
ContentParent
*
cp
=
browserParent
-
>
Manager
(
)
;
if
(
!
BuildClonedMessageDataForParent
(
cp
aData
data
)
)
{
MOZ_CRASH
(
)
;
return
NS_ERROR_DOM_DATA_CLONE_ERR
;
}
nsTArray
<
mozilla
:
:
jsipc
:
:
CpowEntry
>
cpows
;
jsipc
:
:
CPOWManager
*
mgr
=
cp
-
>
GetCPOWManager
(
)
;
if
(
aCpows
&
&
(
!
mgr
|
|
!
mgr
-
>
Wrap
(
aCx
aCpows
&
cpows
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
browserParent
-
>
SendAsyncMessage
(
nsString
(
aMessage
)
cpows
aPrincipal
data
)
)
{
return
NS_OK
;
}
else
{
return
NS_ERROR_UNEXPECTED
;
}
}
if
(
mChildMessageManager
)
{
JS
:
:
RootingContext
*
rcx
=
JS
:
:
RootingContext
:
:
get
(
aCx
)
;
RefPtr
<
nsAsyncMessageToChild
>
ev
=
new
nsAsyncMessageToChild
(
rcx
aCpows
this
)
;
nsresult
rv
=
ev
-
>
Init
(
aMessage
aData
aPrincipal
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
NS_DispatchToCurrentThread
(
ev
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
rv
;
}
return
NS_ERROR_UNEXPECTED
;
}
already_AddRefed
<
MessageSender
>
nsFrameLoader
:
:
GetMessageManager
(
)
{
EnsureMessageManager
(
)
;
return
do_AddRef
(
mMessageManager
)
;
}
nsresult
nsFrameLoader
:
:
EnsureMessageManager
(
)
{
NS_ENSURE_STATE
(
mOwnerContent
)
;
if
(
mMessageManager
)
{
return
NS_OK
;
}
if
(
!
mIsTopLevelContent
&
&
!
OwnerIsMozBrowserFrame
(
)
&
&
!
IsRemoteFrame
(
)
&
&
!
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
forcemessagemanager
nsGkAtoms
:
:
_true
eCaseMatters
)
)
)
{
return
NS_OK
;
}
RefPtr
<
nsGlobalWindowOuter
>
window
=
nsGlobalWindowOuter
:
:
Cast
(
GetOwnerDoc
(
)
-
>
GetWindow
(
)
)
;
RefPtr
<
ChromeMessageBroadcaster
>
parentManager
;
if
(
window
&
&
window
-
>
IsChromeWindow
(
)
)
{
nsAutoString
messagemanagergroup
;
if
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
messagemanagergroup
messagemanagergroup
)
)
{
parentManager
=
window
-
>
GetGroupMessageManager
(
messagemanagergroup
)
;
}
if
(
!
parentManager
)
{
parentManager
=
window
-
>
GetMessageManager
(
)
;
}
}
else
{
parentManager
=
nsFrameMessageManager
:
:
GetGlobalMessageManager
(
)
;
}
mMessageManager
=
new
ChromeMessageSender
(
parentManager
)
;
if
(
!
IsRemoteFrame
(
)
)
{
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MOZ_ASSERT
(
GetDocShell
(
)
"
MaybeCreateDocShell
succeeded
but
null
docShell
"
)
;
if
(
!
GetDocShell
(
)
)
{
return
NS_ERROR_FAILURE
;
}
mChildMessageManager
=
InProcessBrowserChildMessageManager
:
:
Create
(
GetDocShell
(
)
mOwnerContent
mMessageManager
)
;
NS_ENSURE_TRUE
(
mChildMessageManager
NS_ERROR_UNEXPECTED
)
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
&
&
!
defined
(
MOZ_THUNDERBIRD
)
&
&
\
!
defined
(
MOZ_SUITE
)
if
(
XRE_IsParentProcess
(
)
)
{
mSessionStoreListener
=
new
TabListener
(
GetDocShell
(
)
mOwnerContent
)
;
rv
=
mSessionStoreListener
-
>
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
#
endif
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
ReallyLoadFrameScripts
(
)
{
nsresult
rv
=
EnsureMessageManager
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
InitWithCallback
(
this
)
;
}
return
NS_OK
;
}
already_AddRefed
<
Element
>
nsFrameLoader
:
:
GetOwnerElement
(
)
{
return
do_AddRef
(
mOwnerContent
)
;
}
void
nsFrameLoader
:
:
InitializeFromBrowserParent
(
BrowserParent
*
aBrowserParent
)
{
MOZ_ASSERT
(
!
mRemoteBrowser
)
;
mIsRemoteFrame
=
true
;
mRemoteBrowser
=
new
BrowserHost
(
aBrowserParent
)
;
mPendingBrowsingContext
=
aBrowserParent
-
>
GetBrowsingContext
(
)
;
mChildID
=
aBrowserParent
?
aBrowserParent
-
>
Manager
(
)
-
>
ChildID
(
)
:
0
;
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentChanged
)
;
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
aBrowserParent
-
>
InitRendering
(
)
;
ShowRemoteFrame
(
ScreenIntSize
(
0
0
)
)
;
}
void
nsFrameLoader
:
:
SetDetachedSubdocFrame
(
nsIFrame
*
aDetachedFrame
Document
*
aContainerDoc
)
{
mDetachedSubdocFrame
=
aDetachedFrame
;
mContainerDocWhileDetached
=
aContainerDoc
;
}
nsIFrame
*
nsFrameLoader
:
:
GetDetachedSubdocFrame
(
Document
*
*
aContainerDoc
)
const
{
NS_IF_ADDREF
(
*
aContainerDoc
=
mContainerDocWhileDetached
)
;
return
mDetachedSubdocFrame
.
GetFrame
(
)
;
}
void
nsFrameLoader
:
:
ApplySandboxFlags
(
uint32_t
sandboxFlags
)
{
BrowsingContext
*
context
=
GetExtantBrowsingContext
(
)
;
if
(
!
context
)
{
MOZ_ASSERT
(
!
IsRemoteFrame
(
)
"
cannot
apply
sandbox
flags
to
an
uninitialized
"
"
initially
-
remote
frame
"
)
;
return
;
}
uint32_t
parentSandboxFlags
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetSandboxFlags
(
)
;
sandboxFlags
|
=
parentSandboxFlags
;
if
(
GetDocShell
(
)
)
{
nsAutoString
presentationURL
;
nsContentUtils
:
:
GetPresentationURL
(
GetDocShell
(
)
presentationURL
)
;
if
(
!
presentationURL
.
IsEmpty
(
)
)
{
sandboxFlags
|
=
SANDBOXED_AUXILIARY_NAVIGATION
;
}
}
context
-
>
SetSandboxFlags
(
sandboxFlags
)
;
}
void
nsFrameLoader
:
:
AttributeChanged
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MOZ_ASSERT
(
mObservingOwnerContent
)
;
if
(
aElement
!
=
mOwnerContent
)
{
return
;
}
if
(
aNameSpaceID
!
=
kNameSpaceID_None
|
|
(
aAttribute
!
=
TypeAttrName
(
aElement
)
&
&
aAttribute
!
=
nsGkAtoms
:
:
primary
)
)
{
return
;
}
if
(
!
GetDocShell
(
)
)
{
MaybeUpdatePrimaryBrowserParent
(
eBrowserParentChanged
)
;
return
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentItem
;
GetDocShell
(
)
-
>
GetInProcessParent
(
getter_AddRefs
(
parentItem
)
)
;
if
(
!
parentItem
)
{
return
;
}
if
(
parentItem
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
parentItem
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
if
(
!
parentTreeOwner
)
{
return
;
}
bool
is_primary
=
aElement
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
#
ifdef
MOZ_XUL
if
(
!
is_primary
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
pm
-
>
HidePopupsInDocShell
(
GetDocShell
(
)
)
;
}
}
#
endif
parentTreeOwner
-
>
ContentShellRemoved
(
GetDocShell
(
)
)
;
if
(
aElement
-
>
AttrValueIs
(
kNameSpaceID_None
TypeAttrName
(
aElement
)
nsGkAtoms
:
:
content
eIgnoreCase
)
)
{
parentTreeOwner
-
>
ContentShellAdded
(
GetDocShell
(
)
is_primary
)
;
}
}
void
nsFrameLoader
:
:
RequestNotifyAfterRemotePaint
(
)
{
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
Unused
<
<
browserParent
-
>
SendRequestNotifyAfterRemotePaint
(
)
;
}
}
void
nsFrameLoader
:
:
RequestUpdatePosition
(
ErrorResult
&
aRv
)
{
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
nsresult
rv
=
browserParent
-
>
UpdatePosition
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
}
bool
nsFrameLoader
:
:
RequestTabStateFlush
(
uint32_t
aFlushId
bool
aIsFinal
)
{
if
(
mSessionStoreListener
)
{
mSessionStoreListener
-
>
ForceFlushFromParent
(
aFlushId
aIsFinal
)
;
return
false
;
}
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
Unused
<
<
browserParent
-
>
SendFlushTabState
(
aFlushId
aIsFinal
)
;
return
true
;
}
return
false
;
}
void
nsFrameLoader
:
:
RequestEpochUpdate
(
uint32_t
aEpoch
)
{
if
(
mSessionStoreListener
)
{
mSessionStoreListener
-
>
SetEpoch
(
aEpoch
)
;
return
;
}
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
Unused
<
<
browserParent
-
>
SendUpdateEpoch
(
aEpoch
)
;
}
}
void
nsFrameLoader
:
:
Print
(
uint64_t
aOuterWindowID
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aProgressListener
ErrorResult
&
aRv
)
{
#
if
defined
(
NS_PRINTING
)
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
RefPtr
<
embedding
:
:
PrintingParent
>
printingParent
=
browserParent
-
>
Manager
(
)
-
>
GetPrintingParent
(
)
;
embedding
:
:
PrintData
printData
;
nsresult
rv
=
printingParent
-
>
SerializeAndEnsureRemotePrintJob
(
aPrintSettings
aProgressListener
nullptr
&
printData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
bool
success
=
browserParent
-
>
SendPrint
(
aOuterWindowID
printData
)
;
if
(
!
success
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
}
return
;
}
nsGlobalWindowOuter
*
outerWindow
=
nsGlobalWindowOuter
:
:
GetOuterWindowWithId
(
aOuterWindowID
)
;
if
(
NS_WARN_IF
(
!
outerWindow
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsIWebBrowserPrint
>
webBrowserPrint
=
do_GetInterface
(
ToSupports
(
outerWindow
)
)
;
if
(
NS_WARN_IF
(
!
webBrowserPrint
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsresult
rv
=
webBrowserPrint
-
>
Print
(
aPrintSettings
aProgressListener
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
#
endif
}
already_AddRefed
<
nsIRemoteTab
>
nsFrameLoader
:
:
GetRemoteTab
(
)
{
if
(
!
mRemoteBrowser
)
{
return
nullptr
;
}
if
(
auto
*
browserHost
=
mRemoteBrowser
-
>
AsBrowserHost
(
)
)
{
return
do_AddRef
(
browserHost
)
;
}
return
nullptr
;
}
already_AddRefed
<
nsILoadContext
>
nsFrameLoader
:
:
LoadContext
(
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
;
if
(
IsRemoteFrame
(
)
&
&
EnsureRemoteBrowser
(
)
)
{
loadContext
=
mRemoteBrowser
-
>
GetLoadContext
(
)
;
}
else
{
loadContext
=
do_GetInterface
(
ToSupports
(
GetDocShell
(
IgnoreErrors
(
)
)
)
)
;
}
return
loadContext
.
forget
(
)
;
}
BrowsingContext
*
nsFrameLoader
:
:
GetBrowsingContext
(
)
{
if
(
IsRemoteFrame
(
)
)
{
Unused
<
<
EnsureRemoteBrowser
(
)
;
}
else
if
(
mOwnerContent
)
{
Unused
<
<
MaybeCreateDocShell
(
)
;
}
return
GetExtantBrowsingContext
(
)
;
}
BrowsingContext
*
nsFrameLoader
:
:
GetExtantBrowsingContext
(
)
{
BrowsingContext
*
browsingContext
=
nullptr
;
if
(
mRemoteBrowser
)
{
browsingContext
=
mRemoteBrowser
-
>
GetBrowsingContext
(
)
;
}
else
if
(
mDocShell
)
{
browsingContext
=
mDocShell
-
>
GetBrowsingContext
(
)
;
}
MOZ_ASSERT_IF
(
browsingContext
browsingContext
=
=
mPendingBrowsingContext
)
;
return
browsingContext
;
}
void
nsFrameLoader
:
:
InitializeBrowserAPI
(
)
{
if
(
!
OwnerIsMozBrowserFrame
(
)
)
{
return
;
}
if
(
!
IsRemoteFrame
(
)
)
{
nsresult
rv
=
EnsureMessageManager
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
LoadFrameScript
(
NS_LITERAL_STRING
(
"
chrome
:
/
/
global
/
content
/
BrowserElementChild
.
js
"
)
true
true
IgnoreErrors
(
)
)
;
}
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
browserFrame
)
{
browserFrame
-
>
InitializeBrowserAPI
(
)
;
}
}
void
nsFrameLoader
:
:
DestroyBrowserFrameScripts
(
)
{
if
(
!
OwnerIsMozBrowserFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
browserFrame
)
{
browserFrame
-
>
DestroyBrowserFrameScripts
(
)
;
}
}
void
nsFrameLoader
:
:
StartPersistence
(
uint64_t
aOuterWindowID
nsIWebBrowserPersistDocumentReceiver
*
aRecv
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aRecv
)
;
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
browserParent
-
>
StartPersistence
(
aOuterWindowID
aRecv
aRv
)
;
return
;
}
nsCOMPtr
<
Document
>
rootDoc
=
GetDocShell
(
)
?
GetDocShell
(
)
-
>
GetDocument
(
)
:
nullptr
;
nsCOMPtr
<
Document
>
foundDoc
;
if
(
aOuterWindowID
)
{
foundDoc
=
nsContentUtils
:
:
GetSubdocumentWithOuterWindowId
(
rootDoc
aOuterWindowID
)
;
}
else
{
foundDoc
=
rootDoc
;
}
if
(
!
foundDoc
)
{
aRecv
-
>
OnError
(
NS_ERROR_NO_CONTENT
)
;
}
else
{
nsCOMPtr
<
nsIWebBrowserPersistDocument
>
pdoc
=
new
mozilla
:
:
WebBrowserPersistLocalDocument
(
foundDoc
)
;
aRecv
-
>
OnDocumentReady
(
pdoc
)
;
}
}
void
nsFrameLoader
:
:
MaybeUpdatePrimaryBrowserParent
(
BrowserParentChange
aChange
)
{
if
(
!
mOwnerContent
|
|
!
mRemoteBrowser
)
{
return
;
}
RefPtr
<
BrowserHost
>
browserHost
=
mRemoteBrowser
-
>
AsBrowserHost
(
)
;
if
(
!
browserHost
)
{
return
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
;
}
BrowsingContext
*
browsingContext
=
docShell
-
>
GetBrowsingContext
(
)
;
if
(
!
browsingContext
-
>
IsChrome
(
)
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
if
(
!
parentTreeOwner
)
{
return
;
}
if
(
!
mObservingOwnerContent
)
{
mOwnerContent
-
>
AddMutationObserver
(
this
)
;
mObservingOwnerContent
=
true
;
}
parentTreeOwner
-
>
RemoteTabRemoved
(
browserHost
)
;
if
(
aChange
=
=
eBrowserParentChanged
)
{
bool
isPrimary
=
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
parentTreeOwner
-
>
RemoteTabAdded
(
browserHost
isPrimary
)
;
}
}
nsresult
nsFrameLoader
:
:
GetNewTabContext
(
MutableTabContext
*
aTabContext
nsIURI
*
aURI
)
{
OriginAttributes
attrs
;
nsresult
rv
;
rv
=
PopulateUserContextIdFromAttribute
(
attrs
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
presentationURLStr
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozpresentation
presentationURLStr
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
nsCOMPtr
<
nsILoadContext
>
parentContext
=
do_QueryInterface
(
docShell
)
;
NS_ENSURE_STATE
(
parentContext
)
;
bool
isPrivate
=
parentContext
-
>
UsePrivateBrowsing
(
)
;
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
UIStateChangeType
showFocusRings
=
UIStateChangeType_NoChange
;
uint64_t
chromeOuterWindowID
=
0
;
Document
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
if
(
doc
)
{
nsCOMPtr
<
nsPIWindowRoot
>
root
=
nsContentUtils
:
:
GetWindowRoot
(
doc
)
;
if
(
root
)
{
showFocusRings
=
root
-
>
ShowFocusRings
(
)
?
UIStateChangeType_Set
:
UIStateChangeType_Clear
;
nsPIDOMWindowOuter
*
outerWin
=
root
-
>
GetWindow
(
)
;
if
(
outerWin
)
{
chromeOuterWindowID
=
outerWin
-
>
WindowID
(
)
;
}
}
}
uint32_t
maxTouchPoints
=
BrowserParent
:
:
GetMaxTouchPoints
(
mOwnerContent
)
;
bool
tabContextUpdated
=
aTabContext
-
>
SetTabContext
(
OwnerIsMozBrowserFrame
(
)
chromeOuterWindowID
showFocusRings
attrs
presentationURLStr
maxTouchPoints
)
;
NS_ENSURE_STATE
(
tabContextUpdated
)
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
PopulateUserContextIdFromAttribute
(
OriginAttributes
&
aAttr
)
{
if
(
aAttr
.
mUserContextId
=
=
nsIScriptSecurityManager
:
:
DEFAULT_USER_CONTEXT_ID
)
{
nsAutoString
userContextIdStr
;
int32_t
namespaceID
=
mOwnerContent
-
>
GetNameSpaceID
(
)
;
if
(
(
namespaceID
=
=
kNameSpaceID_XUL
|
|
OwnerIsMozBrowserFrame
(
)
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
usercontextid
userContextIdStr
)
&
&
!
userContextIdStr
.
IsEmpty
(
)
)
{
nsresult
rv
;
aAttr
.
mUserContextId
=
userContextIdStr
.
ToInteger
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
return
NS_OK
;
}
ProcessMessageManager
*
nsFrameLoader
:
:
GetProcessMessageManager
(
)
const
{
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
return
browserParent
-
>
Manager
(
)
-
>
GetMessageManager
(
)
;
}
return
nullptr
;
}
;
JSObject
*
nsFrameLoader
:
:
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
JS
:
:
RootedObject
result
(
cx
)
;
FrameLoader_Binding
:
:
Wrap
(
cx
this
this
aGivenProto
&
result
)
;
return
result
;
}
void
nsFrameLoader
:
:
SetWillChangeProcess
(
)
{
mWillChangeProcess
=
true
;
if
(
IsRemoteFrame
(
)
)
{
if
(
auto
*
browserParent
=
GetBrowserParent
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mPendingBrowsingContext
=
=
GetBrowsingContext
(
)
)
;
RefPtr
<
CanonicalBrowsingContext
>
bc
(
mPendingBrowsingContext
-
>
Canonical
(
)
)
;
bc
-
>
SetInFlightProcessId
(
browserParent
-
>
Manager
(
)
-
>
ChildID
(
)
)
;
auto
callback
=
[
bc
]
(
auto
)
{
bc
-
>
SetInFlightProcessId
(
0
)
;
}
;
browserParent
-
>
SendWillChangeProcess
(
callback
callback
)
;
}
else
if
(
auto
*
browserBridgeChild
=
GetBrowserBridgeChild
(
)
)
{
Unused
<
<
browserBridgeChild
-
>
SendWillChangeProcess
(
)
;
}
return
;
}
RefPtr
<
nsDocShell
>
docshell
=
GetDocShell
(
)
;
MOZ_ASSERT
(
docshell
)
;
docshell
-
>
SetWillChangeProcess
(
)
;
}
void
nsFrameLoader
:
:
MaybeNotifyCrashed
(
BrowsingContext
*
aBrowsingContext
mozilla
:
:
ipc
:
:
MessageChannel
*
aChannel
)
{
if
(
mTabProcessCrashFired
)
{
return
;
}
if
(
mPendingBrowsingContext
=
=
aBrowsingContext
)
{
mTabProcessCrashFired
=
true
;
}
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
!
os
)
{
return
;
}
os
-
>
NotifyObservers
(
ToSupports
(
this
)
"
oop
-
frameloader
-
crashed
"
nullptr
)
;
RefPtr
<
nsFrameLoaderOwner
>
owner
=
do_QueryObject
(
mOwnerContent
)
;
if
(
!
owner
)
{
return
;
}
RefPtr
<
nsFrameLoader
>
currentFrameLoader
=
owner
-
>
GetFrameLoader
(
)
;
if
(
currentFrameLoader
!
=
this
)
{
return
;
}
nsString
eventName
;
if
(
aChannel
&
&
!
aChannel
-
>
DoBuildIDsMatch
(
)
)
{
eventName
=
NS_LITERAL_STRING
(
"
oop
-
browser
-
buildid
-
mismatch
"
)
;
}
else
{
eventName
=
NS_LITERAL_STRING
(
"
oop
-
browser
-
crashed
"
)
;
}
FrameCrashedEventInit
init
;
init
.
mBubbles
=
true
;
init
.
mCancelable
=
true
;
if
(
aBrowsingContext
)
{
init
.
mBrowsingContextId
=
aBrowsingContext
-
>
Id
(
)
;
init
.
mIsTopFrame
=
!
aBrowsingContext
-
>
GetParent
(
)
;
}
RefPtr
<
FrameCrashedEvent
>
event
=
FrameCrashedEvent
:
:
Constructor
(
mOwnerContent
-
>
OwnerDoc
(
)
eventName
init
)
;
event
-
>
SetTrusted
(
true
)
;
EventDispatcher
:
:
DispatchDOMEvent
(
mOwnerContent
nullptr
event
nullptr
nullptr
)
;
}
