#
include
"
base
/
basictypes
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIDOMMozBrowserFrame
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWebProgress
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIDocShellLoadInfo
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIBrowser
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIScrollable
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsIDOMEventTarget
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsISHistoryInternal
.
h
"
#
include
"
nsIDOMHTMLDocument
.
h
"
#
include
"
nsIXULWindow
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
NullPrincipal
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsMappedAttributes
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
GroupedSHistory
.
h
"
#
include
"
PartialSHistory
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIDOMChromeWindow
.
h
"
#
include
"
nsInProcessTabChildGlobal
.
h
"
#
include
"
Layers
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
ContentParent
.
h
"
#
include
"
TabParent
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
FrameLoaderBinding
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
mozilla
/
layout
/
RenderFrameParent
.
h
"
#
include
"
nsGenericHTMLFrameElement
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
dom
/
HTMLIFrameElement
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
WebBrowserPersistLocalDocument
.
h
"
#
include
"
mozilla
/
dom
/
GroupedHistoryEvent
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
ContentPrincipal
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
plugins
/
PPluginWidgetParent
.
h
"
#
include
"
.
.
/
plugins
/
ipc
/
PluginWidgetParent
.
h
"
#
endif
#
ifdef
MOZ_XUL
#
include
"
nsXULPopupManager
.
h
"
#
endif
#
ifdef
NS_PRINTING
#
include
"
mozilla
/
embedding
/
printingui
/
PrintingParent
.
h
"
#
include
"
nsIWebBrowserPrint
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
hal
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
layout
;
typedef
FrameMetrics
:
:
ViewID
ViewID
;
#
define
MAX_SAME_URL_CONTENT_FRAMES
1
#
define
MAX_DEPTH_CONTENT_FRAMES
10
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
nsFrameLoader
mDocShell
mMessageManager
mChildMessageManager
mOpener
mPartialSHistory
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsFrameLoader
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsFrameLoader
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsFrameLoader
)
NS_INTERFACE_MAP_ENTRY
(
nsIFrameLoader
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIFrameLoader
)
NS_INTERFACE_MAP_ENTRY
(
nsIWebBrowserPersistable
)
NS_INTERFACE_MAP_END
nsFrameLoader
:
:
nsFrameLoader
(
Element
*
aOwner
nsPIDOMWindowOuter
*
aOpener
bool
aNetworkCreated
int32_t
aJSPluginID
)
:
mOwnerContent
(
aOwner
)
mDetachedSubdocFrame
(
nullptr
)
mOpener
(
aOpener
)
mRemoteBrowser
(
nullptr
)
mChildID
(
0
)
mJSPluginID
(
aJSPluginID
)
mEventMode
(
EVENT_MODE_NORMAL_DISPATCH
)
mBrowserChangingProcessBlockers
(
nullptr
)
mIsPrerendered
(
false
)
mDepthTooGreat
(
false
)
mIsTopLevelContent
(
false
)
mDestroyCalled
(
false
)
mNeedsAsyncDestroy
(
false
)
mInSwap
(
false
)
mInShow
(
false
)
mHideCalled
(
false
)
mNetworkCreated
(
aNetworkCreated
)
mRemoteBrowserShown
(
false
)
mRemoteFrame
(
false
)
mClipSubdocument
(
true
)
mClampScrollPosition
(
true
)
mObservingOwnerContent
(
false
)
{
mRemoteFrame
=
ShouldUseRemoteProcess
(
)
;
MOZ_ASSERT
(
!
mRemoteFrame
|
|
!
aOpener
"
Cannot
pass
aOpener
for
a
remote
frame
!
"
)
;
}
nsFrameLoader
:
:
~
nsFrameLoader
(
)
{
if
(
mMessageManager
)
{
mMessageManager
-
>
Disconnect
(
)
;
}
MOZ_RELEASE_ASSERT
(
mDestroyCalled
)
;
}
nsFrameLoader
*
nsFrameLoader
:
:
Create
(
Element
*
aOwner
nsPIDOMWindowOuter
*
aOpener
bool
aNetworkCreated
int32_t
aJSPluginId
)
{
NS_ENSURE_TRUE
(
aOwner
nullptr
)
;
nsIDocument
*
doc
=
aOwner
-
>
OwnerDoc
(
)
;
NS_ENSURE_TRUE
(
!
doc
-
>
IsResourceDoc
(
)
&
&
(
(
!
doc
-
>
IsLoadedAsData
(
)
&
&
aOwner
-
>
IsInComposedDoc
(
)
)
|
|
doc
-
>
IsStaticDocument
(
)
)
nullptr
)
;
return
new
nsFrameLoader
(
aOwner
aOpener
aNetworkCreated
aJSPluginId
)
;
}
void
nsFrameLoader
:
:
LoadFrame
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
LoadFrame
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
LoadFrame
(
)
{
NS_ENSURE_TRUE
(
mOwnerContent
NS_ERROR_NOT_INITIALIZED
)
;
nsAutoString
src
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
bool
isSrcdoc
=
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
if
(
isSrcdoc
)
{
src
.
AssignLiteral
(
"
about
:
srcdoc
"
)
;
}
else
{
GetURL
(
src
getter_AddRefs
(
principal
)
)
;
src
.
Trim
(
"
\
t
\
n
\
r
"
)
;
if
(
src
.
IsEmpty
(
)
)
{
if
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
nodefaultsrc
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
return
NS_OK
;
}
src
.
AssignLiteral
(
"
about
:
blank
"
)
;
}
}
nsIDocument
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
if
(
doc
-
>
IsStaticDocument
(
)
)
{
return
NS_OK
;
}
if
(
doc
-
>
IsLoadedAsInteractiveData
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIURI
>
base_uri
=
mOwnerContent
-
>
GetBaseURI
(
)
;
auto
encoding
=
doc
-
>
GetDocumentCharacterSet
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
src
encoding
base_uri
)
;
if
(
rv
=
=
NS_ERROR_MALFORMED_URI
)
{
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
NS_LITERAL_STRING
(
"
about
:
blank
"
)
encoding
base_uri
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
LoadURI
(
uri
principal
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
FireErrorEvent
(
)
;
return
rv
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
FireErrorEvent
(
)
{
if
(
!
mOwnerContent
)
{
return
;
}
RefPtr
<
AsyncEventDispatcher
>
loadBlockingAsyncDispatcher
=
new
LoadBlockingAsyncEventDispatcher
(
mOwnerContent
NS_LITERAL_STRING
(
"
error
"
)
false
false
)
;
loadBlockingAsyncDispatcher
-
>
PostDOMEvent
(
)
;
}
void
nsFrameLoader
:
:
LoadURI
(
nsIURI
*
aURI
ErrorResult
&
aRv
)
{
nsresult
rv
=
LoadURI
(
aURI
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
LoadURI
(
nsIURI
*
aURI
)
{
return
LoadURI
(
aURI
nullptr
)
;
}
nsresult
nsFrameLoader
:
:
LoadURI
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
)
{
if
(
!
aURI
)
return
NS_ERROR_INVALID_POINTER
;
NS_ENSURE_STATE
(
!
mDestroyCalled
&
&
mOwnerContent
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
nsresult
rv
;
if
(
!
IsForJSPlugin
(
)
)
{
rv
=
CheckURILoad
(
aURI
aTriggeringPrincipal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
mURIToLoad
=
aURI
;
mTriggeringPrincipal
=
aTriggeringPrincipal
;
rv
=
doc
-
>
InitializeFrameLoader
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
mURIToLoad
=
nullptr
;
mTriggeringPrincipal
=
nullptr
;
}
return
rv
;
}
void
nsFrameLoader
:
:
SetIsPrerendered
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
SetIsPrerendered
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
SetIsPrerendered
(
)
{
MOZ_ASSERT
(
!
mDocShell
"
Please
call
SetIsPrerendered
before
docShell
is
created
"
)
;
mIsPrerendered
=
true
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
MakePrerenderedLoaderActive
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
MakePrerenderedLoaderActive
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
MakePrerenderedLoaderActive
(
)
{
MOZ_ASSERT
(
mIsPrerendered
"
This
frameloader
was
not
in
prerendered
mode
.
"
)
;
mIsPrerendered
=
false
;
if
(
IsRemoteFrame
(
)
)
{
if
(
!
mRemoteBrowser
)
{
NS_WARNING
(
"
Missing
remote
browser
.
"
)
;
return
NS_ERROR_FAILURE
;
}
mRemoteBrowser
-
>
SetDocShellIsActive
(
true
)
;
}
else
{
if
(
!
mDocShell
)
{
NS_WARNING
(
"
Missing
docshell
.
"
)
;
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
mDocShell
-
>
SetIsActive
(
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
already_AddRefed
<
nsIPartialSHistory
>
nsFrameLoader
:
:
GetPartialSHistory
(
)
{
nsCOMPtr
<
nsIPartialSHistory
>
partialSHistory
;
MOZ_ALWAYS_SUCCEEDS
(
GetPartialSHistory
(
getter_AddRefs
(
partialSHistory
)
)
)
;
return
partialSHistory
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetPartialSHistory
(
nsIPartialSHistory
*
*
aResult
)
{
if
(
mRemoteBrowser
&
&
!
mPartialSHistory
)
{
mPartialSHistory
=
new
PartialSHistory
(
this
)
;
}
nsCOMPtr
<
nsIPartialSHistory
>
partialHistory
(
mPartialSHistory
)
;
partialHistory
.
forget
(
aResult
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIGroupedSHistory
>
nsFrameLoader
:
:
EnsureGroupedSHistory
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGroupedSHistory
>
result
;
nsresult
rv
=
EnsureGroupedSHistory
(
getter_AddRefs
(
result
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
return
result
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
EnsureGroupedSHistory
(
nsIGroupedSHistory
*
*
aResult
)
{
nsCOMPtr
<
nsIPartialSHistory
>
partialHistory
;
GetPartialSHistory
(
getter_AddRefs
(
partialHistory
)
)
;
MOZ_ASSERT
(
partialHistory
)
;
nsCOMPtr
<
nsIGroupedSHistory
>
groupedHistory
;
partialHistory
-
>
GetGroupedSHistory
(
getter_AddRefs
(
groupedHistory
)
)
;
if
(
!
groupedHistory
)
{
groupedHistory
=
new
GroupedSHistory
(
)
;
groupedHistory
-
>
AppendPartialSHistory
(
partialHistory
)
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIGroupedSHistory
>
test
;
GetGroupedSHistory
(
getter_AddRefs
(
test
)
)
;
MOZ_ASSERT
(
test
=
=
groupedHistory
"
GroupedHistory
must
match
"
)
;
#
endif
}
groupedHistory
.
forget
(
aResult
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIGroupedSHistory
>
nsFrameLoader
:
:
GetGroupedSHistory
(
)
{
nsCOMPtr
<
nsIGroupedSHistory
>
groupedSHistory
;
MOZ_ALWAYS_SUCCEEDS
(
GetGroupedSHistory
(
getter_AddRefs
(
groupedSHistory
)
)
)
;
return
groupedSHistory
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetGroupedSHistory
(
nsIGroupedSHistory
*
*
aResult
)
{
nsCOMPtr
<
nsIGroupedSHistory
>
groupedSHistory
;
if
(
mPartialSHistory
)
{
mPartialSHistory
-
>
GetGroupedSHistory
(
getter_AddRefs
(
groupedSHistory
)
)
;
}
groupedSHistory
.
forget
(
aResult
)
;
return
NS_OK
;
}
bool
nsFrameLoader
:
:
SwapBrowsersAndNotify
(
nsFrameLoader
*
aOther
)
{
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
primaryContent
=
mOwnerContent
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
secondaryContent
=
aOther
-
>
mOwnerContent
;
nsCOMPtr
<
nsIBrowser
>
ourBrowser
=
do_QueryInterface
(
primaryContent
)
;
nsCOMPtr
<
nsIBrowser
>
otherBrowser
=
do_QueryInterface
(
secondaryContent
)
;
if
(
NS_WARN_IF
(
!
ourBrowser
|
|
!
otherBrowser
)
)
{
return
false
;
}
nsresult
rv
=
ourBrowser
-
>
SwapBrowsers
(
otherBrowser
nsIBrowser
:
:
SWAP_KEEP_PERMANENT_KEY
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
GroupedHistoryEventInit
eventInit
;
eventInit
.
mBubbles
=
true
;
eventInit
.
mCancelable
=
false
;
eventInit
.
mOtherBrowser
=
secondaryContent
;
RefPtr
<
GroupedHistoryEvent
>
event
=
GroupedHistoryEvent
:
:
Constructor
(
primaryContent
NS_LITERAL_STRING
(
"
BrowserChangedProcess
"
)
eventInit
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
primaryContent
-
>
DispatchEvent
(
event
&
dummy
)
;
return
true
;
}
class
AppendPartialSHistoryAndSwapHelper
:
public
PromiseNativeHandler
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
AppendPartialSHistoryAndSwapHelper
)
AppendPartialSHistoryAndSwapHelper
(
nsFrameLoader
*
aThis
nsFrameLoader
*
aOther
Promise
*
aPromise
)
:
mThis
(
aThis
)
mOther
(
aOther
)
mPromise
(
aPromise
)
{
}
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
{
nsCOMPtr
<
nsIGroupedSHistory
>
otherGroupedHistory
;
mOther
-
>
GetGroupedSHistory
(
getter_AddRefs
(
otherGroupedHistory
)
)
;
MOZ_ASSERT
(
!
otherGroupedHistory
"
Cannot
append
a
GroupedSHistory
owner
to
another
.
"
)
;
if
(
otherGroupedHistory
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsresult
rv
;
nsCOMPtr
<
nsIGroupedSHistory
>
groupedSHistory
;
rv
=
mThis
-
>
EnsureGroupedSHistory
(
getter_AddRefs
(
groupedSHistory
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIPartialSHistory
>
otherPartialSHistory
;
MOZ_ALWAYS_SUCCEEDS
(
mOther
-
>
GetPartialSHistory
(
getter_AddRefs
(
otherPartialSHistory
)
)
)
;
rv
=
groupedSHistory
-
>
AppendPartialSHistory
(
otherPartialSHistory
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
if
(
mThis
-
>
SwapBrowsersAndNotify
(
mOther
)
)
{
mPromise
-
>
MaybeResolveWithUndefined
(
)
;
}
else
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
}
}
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
}
private
:
~
AppendPartialSHistoryAndSwapHelper
(
)
{
}
RefPtr
<
nsFrameLoader
>
mThis
;
RefPtr
<
nsFrameLoader
>
mOther
;
RefPtr
<
Promise
>
mPromise
;
}
;
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
AppendPartialSHistoryAndSwapHelper
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
AppendPartialSHistoryAndSwapHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
AppendPartialSHistoryAndSwapHelper
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION
(
AppendPartialSHistoryAndSwapHelper
mThis
mPromise
)
class
RequestGroupedHistoryNavigationHelper
:
public
PromiseNativeHandler
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
RequestGroupedHistoryNavigationHelper
)
RequestGroupedHistoryNavigationHelper
(
nsFrameLoader
*
aThis
uint32_t
aGlobalIndex
Promise
*
aPromise
)
:
mThis
(
aThis
)
mGlobalIndex
(
aGlobalIndex
)
mPromise
(
aPromise
)
{
}
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
{
if
(
NS_WARN_IF
(
!
mThis
-
>
mOwnerContent
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIGroupedSHistory
>
groupedSHistory
;
mThis
-
>
GetGroupedSHistory
(
getter_AddRefs
(
groupedSHistory
)
)
;
if
(
NS_WARN_IF
(
!
groupedSHistory
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIFrameLoader
>
otherLoader
;
nsresult
rv
=
groupedSHistory
-
>
GotoIndex
(
mGlobalIndex
getter_AddRefs
(
otherLoader
)
)
;
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
mThis
-
>
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
if
(
NS_WARN_IF
(
!
docShell
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
if
(
NS_WARN_IF
(
!
treeOwner
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIXULWindow
>
window
=
do_GetInterface
(
treeOwner
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIXULBrowserWindow
>
xbw
;
window
-
>
GetXULBrowserWindow
(
getter_AddRefs
(
xbw
)
)
;
if
(
NS_WARN_IF
(
!
xbw
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsCOMPtr
<
nsIBrowser
>
ourBrowser
=
do_QueryInterface
(
mThis
-
>
mOwnerContent
)
;
if
(
NS_WARN_IF
(
!
ourBrowser
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
rv
=
xbw
-
>
NavigateAndRestoreByIndex
(
ourBrowser
mGlobalIndex
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
mPromise
-
>
MaybeResolveWithUndefined
(
)
;
return
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
nsFrameLoader
*
other
=
static_cast
<
nsFrameLoader
*
>
(
otherLoader
.
get
(
)
)
;
if
(
!
other
|
|
other
=
=
mThis
)
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
return
;
}
if
(
mThis
-
>
SwapBrowsersAndNotify
(
other
)
)
{
mPromise
-
>
MaybeResolveWithUndefined
(
)
;
}
else
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
}
}
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
{
mPromise
-
>
MaybeRejectWithUndefined
(
)
;
}
private
:
~
RequestGroupedHistoryNavigationHelper
(
)
{
}
RefPtr
<
nsFrameLoader
>
mThis
;
uint32_t
mGlobalIndex
;
RefPtr
<
Promise
>
mPromise
;
}
;
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
RequestGroupedHistoryNavigationHelper
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
RequestGroupedHistoryNavigationHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
RequestGroupedHistoryNavigationHelper
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION
(
RequestGroupedHistoryNavigationHelper
mThis
mPromise
)
already_AddRefed
<
Promise
>
nsFrameLoader
:
:
FireWillChangeProcessEvent
(
)
{
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mOwnerContent
-
>
GetOwnerGlobal
(
)
)
)
)
{
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
GlobalObject
global
(
cx
mOwnerContent
-
>
GetOwnerGlobal
(
)
-
>
GetGlobalJSObject
(
)
)
;
MOZ_ASSERT
(
!
global
.
Failed
(
)
)
;
nsTArray
<
RefPtr
<
Promise
>
>
blockers
;
mBrowserChangingProcessBlockers
=
&
blockers
;
GroupedHistoryEventInit
eventInit
;
eventInit
.
mBubbles
=
true
;
eventInit
.
mCancelable
=
false
;
eventInit
.
mOtherBrowser
=
nullptr
;
RefPtr
<
GroupedHistoryEvent
>
event
=
GroupedHistoryEvent
:
:
Constructor
(
mOwnerContent
NS_LITERAL_STRING
(
"
BrowserWillChangeProcess
"
)
eventInit
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
mOwnerContent
-
>
DispatchEvent
(
event
&
dummy
)
;
mBrowserChangingProcessBlockers
=
nullptr
;
ErrorResult
rv
;
RefPtr
<
Promise
>
allPromise
=
Promise
:
:
All
(
global
blockers
rv
)
;
return
allPromise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
nsFrameLoader
:
:
AppendPartialSHistoryAndSwap
(
nsIFrameLoader
&
aOther
ErrorResult
&
aRv
)
{
nsresult
rv
=
SetIsPrerendered
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
if
(
&
aOther
=
=
this
)
{
return
nullptr
;
}
RefPtr
<
nsFrameLoader
>
otherLoader
=
static_cast
<
nsFrameLoader
*
>
(
&
aOther
)
;
RefPtr
<
Promise
>
ready
=
FireWillChangeProcessEvent
(
)
;
if
(
NS_WARN_IF
(
!
ready
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
complete
=
Promise
:
:
Create
(
mOwnerContent
-
>
GetOwnerGlobal
(
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
RefPtr
<
AppendPartialSHistoryAndSwapHelper
>
helper
=
new
AppendPartialSHistoryAndSwapHelper
(
this
otherLoader
complete
)
;
ready
-
>
AppendNativeHandler
(
helper
)
;
return
complete
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
AppendPartialSHistoryAndSwap
(
nsIFrameLoader
*
aOther
nsISupports
*
*
aPromise
)
{
if
(
!
aOther
)
{
return
NS_ERROR_INVALID_POINTER
;
}
ErrorResult
rv
;
RefPtr
<
Promise
>
complete
=
AppendPartialSHistoryAndSwap
(
*
aOther
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
rv
.
StealNSResult
(
)
;
}
complete
.
forget
(
aPromise
)
;
return
NS_OK
;
}
already_AddRefed
<
Promise
>
nsFrameLoader
:
:
RequestGroupedHistoryNavigation
(
uint32_t
aGlobalIndex
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
ready
=
FireWillChangeProcessEvent
(
)
;
if
(
NS_WARN_IF
(
!
ready
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
complete
=
Promise
:
:
Create
(
mOwnerContent
-
>
GetOwnerGlobal
(
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
RefPtr
<
RequestGroupedHistoryNavigationHelper
>
helper
=
new
RequestGroupedHistoryNavigationHelper
(
this
aGlobalIndex
complete
)
;
ready
-
>
AppendNativeHandler
(
helper
)
;
return
complete
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
RequestGroupedHistoryNavigation
(
uint32_t
aGlobalIndex
nsISupports
*
*
aPromise
)
{
ErrorResult
rv
;
RefPtr
<
Promise
>
complete
=
RequestGroupedHistoryNavigation
(
aGlobalIndex
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
rv
.
StealNSResult
(
)
;
}
complete
.
forget
(
aPromise
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
AddProcessChangeBlockingPromise
(
Promise
&
aPromise
ErrorResult
&
aRv
)
{
if
(
NS_WARN_IF
(
!
mBrowserChangingProcessBlockers
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
}
else
{
mBrowserChangingProcessBlockers
-
>
AppendElement
(
&
aPromise
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
AddProcessChangeBlockingPromise
(
js
:
:
Handle
<
js
:
:
Value
>
aPromise
JSContext
*
aCx
)
{
nsCOMPtr
<
nsIGlobalObject
>
go
=
xpc
:
:
NativeGlobal
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
if
(
!
go
)
{
return
NS_ERROR_FAILURE
;
}
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Resolve
(
go
aCx
aPromise
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
AddProcessChangeBlockingPromise
(
*
promise
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
ReallyStartLoading
(
)
{
nsresult
rv
=
ReallyStartLoadingInternal
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
FireErrorEvent
(
)
;
}
return
rv
;
}
nsresult
nsFrameLoader
:
:
ReallyStartLoadingInternal
(
)
{
NS_ENSURE_STATE
(
mURIToLoad
&
&
mOwnerContent
&
&
mOwnerContent
-
>
IsInComposedDoc
(
)
)
;
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
ReallyStartLoadingInternal
"
OTHER
)
;
if
(
IsRemoteFrame
(
)
)
{
if
(
!
mRemoteBrowser
&
&
!
TryRemoteBrowser
(
)
)
{
NS_WARNING
(
"
Couldn
'
t
create
child
process
for
iframe
.
"
)
;
return
NS_ERROR_FAILURE
;
}
mRemoteBrowser
-
>
LoadURL
(
mURIToLoad
)
;
if
(
!
mRemoteBrowserShown
&
&
!
ShowRemoteFrame
(
ScreenIntSize
(
0
0
)
)
)
{
NS_WARNING
(
"
[
nsFrameLoader
]
ReallyStartLoadingInternal
tried
but
couldn
'
t
show
remote
browser
.
\
n
"
)
;
}
return
NS_OK
;
}
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
NS_ASSERTION
(
mDocShell
"
MaybeCreateDocShell
succeeded
with
a
null
mDocShell
"
)
;
rv
=
CheckURILoad
(
mURIToLoad
mTriggeringPrincipal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIDocShellLoadInfo
>
loadInfo
;
mDocShell
-
>
CreateLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
;
NS_ENSURE_TRUE
(
loadInfo
NS_ERROR_FAILURE
)
;
if
(
mTriggeringPrincipal
)
{
loadInfo
-
>
SetTriggeringPrincipal
(
mTriggeringPrincipal
)
;
}
else
{
loadInfo
-
>
SetTriggeringPrincipal
(
mOwnerContent
-
>
NodePrincipal
(
)
)
;
}
nsCOMPtr
<
nsIURI
>
referrer
;
nsAutoString
srcdoc
;
bool
isSrcdoc
=
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
srcdoc
)
;
if
(
isSrcdoc
)
{
nsAutoString
referrerStr
;
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetReferrer
(
referrerStr
)
;
rv
=
NS_NewURI
(
getter_AddRefs
(
referrer
)
referrerStr
)
;
loadInfo
-
>
SetSrcdocData
(
srcdoc
)
;
nsCOMPtr
<
nsIURI
>
baseURI
=
mOwnerContent
-
>
GetBaseURI
(
)
;
loadInfo
-
>
SetBaseURI
(
baseURI
)
;
}
else
{
rv
=
mOwnerContent
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
referrer
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
referrer
)
{
bool
isNullPrincipalScheme
;
rv
=
referrer
-
>
SchemeIs
(
NS_NULLPRINCIPAL_SCHEME
&
isNullPrincipalScheme
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
isNullPrincipalScheme
)
{
loadInfo
-
>
SetReferrer
(
referrer
)
;
}
}
net
:
:
ReferrerPolicy
referrerPolicy
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetReferrerPolicy
(
)
;
HTMLIFrameElement
*
iframe
=
HTMLIFrameElement
:
:
FromContent
(
mOwnerContent
)
;
if
(
iframe
)
{
net
:
:
ReferrerPolicy
iframeReferrerPolicy
=
iframe
-
>
GetReferrerPolicyAsEnum
(
)
;
if
(
iframeReferrerPolicy
!
=
net
:
:
RP_Unset
)
{
referrerPolicy
=
iframeReferrerPolicy
;
}
}
loadInfo
-
>
SetReferrerPolicy
(
referrerPolicy
)
;
int32_t
flags
=
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
;
if
(
OwnerIsMozBrowserFrame
(
)
)
{
flags
=
nsIWebNavigation
:
:
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
|
nsIWebNavigation
:
:
LOAD_FLAGS_DISALLOW_INHERIT_PRINCIPAL
;
}
bool
tmpState
=
mNeedsAsyncDestroy
;
mNeedsAsyncDestroy
=
true
;
nsCOMPtr
<
nsIURI
>
uriToLoad
=
mURIToLoad
;
rv
=
mDocShell
-
>
LoadURI
(
uriToLoad
loadInfo
flags
false
)
;
mNeedsAsyncDestroy
=
tmpState
;
mURIToLoad
=
nullptr
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
CheckURILoad
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
)
{
nsIScriptSecurityManager
*
secMan
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
nsIPrincipal
*
principal
=
(
aTriggeringPrincipal
?
aTriggeringPrincipal
:
mOwnerContent
-
>
NodePrincipal
(
)
)
;
nsresult
rv
=
secMan
-
>
CheckLoadURIWithPrincipal
(
principal
aURI
nsIScriptSecurityManager
:
:
STANDARD
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
IsRemoteFrame
(
)
)
{
return
NS_OK
;
}
return
CheckForRecursiveLoad
(
aURI
)
;
}
already_AddRefed
<
nsIDocShell
>
nsFrameLoader
:
:
GetDocShell
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
;
nsresult
rv
=
GetDocShell
(
getter_AddRefs
(
docShell
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
return
docShell
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetDocShell
(
nsIDocShell
*
*
aDocShell
)
{
*
aDocShell
=
nullptr
;
nsresult
rv
=
NS_OK
;
if
(
IsRemoteFrame
(
)
)
{
return
rv
;
}
if
(
mOwnerContent
)
{
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
NS_ASSERTION
(
mDocShell
"
MaybeCreateDocShell
succeeded
but
null
mDocShell
"
)
;
}
*
aDocShell
=
mDocShell
;
NS_IF_ADDREF
(
*
aDocShell
)
;
return
rv
;
}
static
void
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
nsIDocShellTreeItem
*
aItem
nsIDocShellTreeOwner
*
aOwner
EventTarget
*
aHandler
)
{
NS_PRECONDITION
(
aItem
"
Must
have
item
"
)
;
aItem
-
>
SetTreeOwner
(
aOwner
)
;
int32_t
childCount
=
0
;
aItem
-
>
GetChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
item
;
aItem
-
>
GetChildAt
(
i
getter_AddRefs
(
item
)
)
;
if
(
aHandler
)
{
nsCOMPtr
<
nsIDocShell
>
shell
(
do_QueryInterface
(
item
)
)
;
shell
-
>
SetChromeEventHandler
(
aHandler
)
;
}
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
item
aOwner
aHandler
)
;
}
}
bool
nsFrameLoader
:
:
AddTreeItemToTreeOwner
(
nsIDocShellTreeItem
*
aItem
nsIDocShellTreeOwner
*
aOwner
int32_t
aParentType
nsIDocShell
*
aParentNode
)
{
NS_PRECONDITION
(
aItem
"
Must
have
docshell
treeitem
"
)
;
NS_PRECONDITION
(
mOwnerContent
"
Must
have
owning
content
"
)
;
nsAutoString
value
;
bool
isContent
=
false
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
TypeAttrName
(
)
value
)
;
isContent
=
value
.
LowerCaseEqualsLiteral
(
"
content
"
)
|
|
StringBeginsWith
(
value
NS_LITERAL_STRING
(
"
content
-
"
)
nsCaseInsensitiveStringComparator
(
)
)
;
nsCOMPtr
<
nsIDOMMozBrowserFrame
>
mozbrowser
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
mozbrowser
)
{
bool
isMozbrowser
=
false
;
mozbrowser
-
>
GetMozbrowser
(
&
isMozbrowser
)
;
isContent
|
=
isMozbrowser
;
}
if
(
isContent
)
{
aItem
-
>
SetItemType
(
nsIDocShellTreeItem
:
:
typeContent
)
;
}
else
{
aItem
-
>
SetItemType
(
aParentType
)
;
}
if
(
aParentNode
)
{
aParentNode
-
>
AddChild
(
aItem
)
;
}
bool
retval
=
false
;
if
(
aParentType
=
=
nsIDocShellTreeItem
:
:
typeChrome
&
&
isContent
)
{
retval
=
true
;
bool
is_primary
=
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
if
(
aOwner
)
{
mOwnerContent
-
>
AddMutationObserver
(
this
)
;
mObservingOwnerContent
=
true
;
aOwner
-
>
ContentShellAdded
(
aItem
is_primary
)
;
}
}
return
retval
;
}
static
bool
AllDescendantsOfType
(
nsIDocShellTreeItem
*
aParentItem
int32_t
aType
)
{
int32_t
childCount
=
0
;
aParentItem
-
>
GetChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
kid
;
aParentItem
-
>
GetChildAt
(
i
getter_AddRefs
(
kid
)
)
;
if
(
kid
-
>
ItemType
(
)
!
=
aType
|
|
!
AllDescendantsOfType
(
kid
aType
)
)
{
return
false
;
}
}
return
true
;
}
class
MOZ_RAII
AutoResetInShow
{
private
:
nsFrameLoader
*
mFrameLoader
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
public
:
explicit
AutoResetInShow
(
nsFrameLoader
*
aFrameLoader
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mFrameLoader
(
aFrameLoader
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
AutoResetInShow
(
)
{
mFrameLoader
-
>
mInShow
=
false
;
}
}
;
static
bool
ParentWindowIsActive
(
nsIDocument
*
aDoc
)
{
nsCOMPtr
<
nsPIWindowRoot
>
root
=
nsContentUtils
:
:
GetWindowRoot
(
aDoc
)
;
if
(
root
)
{
nsPIDOMWindowOuter
*
rootWin
=
root
-
>
GetWindow
(
)
;
return
rootWin
&
&
rootWin
-
>
IsActive
(
)
;
}
return
false
;
}
void
nsFrameLoader
:
:
MaybeShowFrame
(
)
{
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
nsSubDocumentFrame
*
subDocFrame
=
do_QueryFrame
(
frame
)
;
if
(
subDocFrame
)
{
subDocFrame
-
>
MaybeShowViewer
(
)
;
}
}
}
bool
nsFrameLoader
:
:
Show
(
int32_t
marginWidth
int32_t
marginHeight
int32_t
scrollbarPrefX
int32_t
scrollbarPrefY
nsSubDocumentFrame
*
frame
)
{
if
(
mInShow
)
{
return
false
;
}
AutoResetInShow
resetInShow
(
this
)
;
mInShow
=
true
;
ScreenIntSize
size
=
frame
-
>
GetSubdocumentSize
(
)
;
if
(
IsRemoteFrame
(
)
)
{
return
ShowRemoteFrame
(
size
frame
)
;
}
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
NS_ASSERTION
(
mDocShell
"
MaybeCreateDocShell
succeeded
but
null
mDocShell
"
)
;
if
(
!
mDocShell
)
{
return
false
;
}
mDocShell
-
>
SetMarginWidth
(
marginWidth
)
;
mDocShell
-
>
SetMarginHeight
(
marginHeight
)
;
nsCOMPtr
<
nsIScrollable
>
sc
=
do_QueryInterface
(
mDocShell
)
;
if
(
sc
)
{
sc
-
>
SetDefaultScrollbarPreferences
(
nsIScrollable
:
:
ScrollOrientation_X
scrollbarPrefX
)
;
sc
-
>
SetDefaultScrollbarPreferences
(
nsIScrollable
:
:
ScrollOrientation_Y
scrollbarPrefY
)
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
presShell
)
{
nsIFrame
*
rootScrollFrame
=
presShell
-
>
GetRootScrollFrame
(
)
;
if
(
rootScrollFrame
)
{
presShell
-
>
FrameNeedsReflow
(
rootScrollFrame
nsIPresShell
:
:
eResize
NS_FRAME_IS_DIRTY
)
;
}
return
true
;
}
nsView
*
view
=
frame
-
>
EnsureInnerView
(
)
;
if
(
!
view
)
return
false
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
mDocShell
)
;
NS_ASSERTION
(
baseWindow
"
Found
a
nsIDocShell
that
isn
'
t
a
nsIBaseWindow
.
"
)
;
baseWindow
-
>
InitWindow
(
nullptr
view
-
>
GetWidget
(
)
0
0
size
.
width
size
.
height
)
;
baseWindow
-
>
Create
(
)
;
baseWindow
-
>
SetVisibility
(
true
)
;
NS_ENSURE_TRUE
(
mDocShell
false
)
;
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
presShell
)
{
nsCOMPtr
<
nsIDOMHTMLDocument
>
doc
=
do_QueryInterface
(
presShell
-
>
GetDocument
(
)
)
;
if
(
doc
)
{
nsAutoString
designMode
;
doc
-
>
GetDesignMode
(
designMode
)
;
if
(
designMode
.
EqualsLiteral
(
"
on
"
)
)
{
RefPtr
<
HTMLEditor
>
htmlEditor
=
mDocShell
-
>
GetHTMLEditor
(
)
;
Unused
<
<
htmlEditor
;
doc
-
>
SetDesignMode
(
NS_LITERAL_STRING
(
"
off
"
)
)
;
doc
-
>
SetDesignMode
(
NS_LITERAL_STRING
(
"
on
"
)
)
;
}
else
{
bool
editable
=
false
hasEditingSession
=
false
;
mDocShell
-
>
GetEditable
(
&
editable
)
;
mDocShell
-
>
GetHasEditingSession
(
&
hasEditingSession
)
;
RefPtr
<
HTMLEditor
>
htmlEditor
=
mDocShell
-
>
GetHTMLEditor
(
)
;
if
(
editable
&
&
hasEditingSession
&
&
htmlEditor
)
{
htmlEditor
-
>
PostCreate
(
)
;
}
}
}
}
mInShow
=
false
;
if
(
mHideCalled
)
{
mHideCalled
=
false
;
Hide
(
)
;
return
false
;
}
return
true
;
}
void
nsFrameLoader
:
:
MarginsChanged
(
uint32_t
aMarginWidth
uint32_t
aMarginHeight
)
{
if
(
IsRemoteFrame
(
)
)
return
;
if
(
!
mDocShell
)
return
;
mDocShell
-
>
SetMarginWidth
(
aMarginWidth
)
;
mDocShell
-
>
SetMarginHeight
(
aMarginHeight
)
;
if
(
nsIDocument
*
doc
=
mDocShell
-
>
GetDocument
(
)
)
{
if
(
doc
-
>
GetStyleBackendType
(
)
=
=
StyleBackendType
:
:
Servo
)
{
for
(
nsINode
*
cur
=
doc
;
cur
;
cur
=
cur
-
>
GetNextNode
(
)
)
{
if
(
cur
-
>
IsHTMLElement
(
nsGkAtoms
:
:
body
)
)
{
static_cast
<
HTMLBodyElement
*
>
(
cur
)
-
>
ClearMappedServoStyle
(
)
;
}
}
}
}
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
presContext
)
presContext
-
>
RebuildAllStyleData
(
nsChangeHint
(
0
)
eRestyle_Subtree
)
;
}
bool
nsFrameLoader
:
:
ShowRemoteFrame
(
const
ScreenIntSize
&
size
nsSubDocumentFrame
*
aFrame
)
{
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
ShowRemoteFrame
"
GRAPHICS
)
;
NS_ASSERTION
(
IsRemoteFrame
(
)
"
ShowRemote
only
makes
sense
on
remote
frames
.
"
)
;
if
(
!
mRemoteBrowser
&
&
!
TryRemoteBrowser
(
)
)
{
NS_ERROR
(
"
Couldn
'
t
create
child
process
.
"
)
;
return
false
;
}
if
(
!
mRemoteBrowserShown
)
{
if
(
!
mOwnerContent
|
|
!
mOwnerContent
-
>
GetComposedDoc
(
)
)
{
return
false
;
}
nsIWidget
*
widget
=
nsContentUtils
:
:
WidgetForContent
(
mOwnerContent
)
;
if
(
!
widget
|
|
static_cast
<
nsBaseWidget
*
>
(
widget
)
-
>
IsSmallPopup
(
)
)
{
return
false
;
}
RenderFrameParent
*
rfp
=
GetCurrentRenderFrame
(
)
;
if
(
!
rfp
)
{
return
false
;
}
if
(
!
rfp
-
>
AttachLayerManager
(
)
)
{
return
false
;
}
mRemoteBrowser
-
>
Show
(
size
ParentWindowIsActive
(
mOwnerContent
-
>
OwnerDoc
(
)
)
)
;
mRemoteBrowserShown
=
true
;
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
NS_ISUPPORTS_CAST
(
nsIFrameLoader
*
this
)
"
remote
-
browser
-
shown
"
nullptr
)
;
}
}
else
{
nsIntRect
dimensions
;
NS_ENSURE_SUCCESS
(
GetWindowDimensions
(
dimensions
)
false
)
;
if
(
!
aFrame
|
|
!
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_FIRST_REFLOW
)
)
{
mRemoteBrowser
-
>
UpdateDimensions
(
dimensions
size
)
;
}
}
return
true
;
}
void
nsFrameLoader
:
:
Hide
(
)
{
if
(
mHideCalled
)
{
return
;
}
if
(
mInShow
)
{
mHideCalled
=
true
;
return
;
}
if
(
!
mDocShell
)
return
;
nsCOMPtr
<
nsIContentViewer
>
contentViewer
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
contentViewer
)
)
;
if
(
contentViewer
)
contentViewer
-
>
SetSticky
(
false
)
;
nsCOMPtr
<
nsIBaseWindow
>
baseWin
=
do_QueryInterface
(
mDocShell
)
;
NS_ASSERTION
(
baseWin
"
Found
an
nsIDocShell
which
doesn
'
t
implement
nsIBaseWindow
.
"
)
;
baseWin
-
>
SetVisibility
(
false
)
;
baseWin
-
>
SetParentWidget
(
nullptr
)
;
}
nsresult
nsFrameLoader
:
:
SwapWithOtherRemoteLoader
(
nsFrameLoader
*
aOther
nsIFrameLoaderOwner
*
aThisOwner
nsIFrameLoaderOwner
*
aOtherOwner
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
ifdef
DEBUG
RefPtr
<
nsFrameLoader
>
first
=
aThisOwner
-
>
GetFrameLoader
(
)
;
RefPtr
<
nsFrameLoader
>
second
=
aOtherOwner
-
>
GetFrameLoader
(
)
;
MOZ_ASSERT
(
first
=
=
this
"
aThisOwner
must
own
this
"
)
;
MOZ_ASSERT
(
second
=
=
aOther
"
aOtherOwner
must
own
aOther
"
)
;
#
endif
Element
*
ourContent
=
mOwnerContent
;
Element
*
otherContent
=
aOther
-
>
mOwnerContent
;
if
(
!
ourContent
|
|
!
otherContent
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
equal
;
nsresult
rv
=
ourContent
-
>
NodePrincipal
(
)
-
>
Equals
(
otherContent
-
>
NodePrincipal
(
)
&
equal
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
equal
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
nsIDocument
*
ourDoc
=
ourContent
-
>
GetComposedDoc
(
)
;
nsIDocument
*
otherDoc
=
otherContent
-
>
GetComposedDoc
(
)
;
if
(
!
ourDoc
|
|
!
otherDoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsIPresShell
*
ourShell
=
ourDoc
-
>
GetShell
(
)
;
nsIPresShell
*
otherShell
=
otherDoc
-
>
GetShell
(
)
;
if
(
!
ourShell
|
|
!
otherShell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
!
mRemoteBrowser
|
|
!
aOther
-
>
mRemoteBrowser
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
mRemoteBrowser
-
>
IsIsolatedMozBrowserElement
(
)
!
=
aOther
-
>
mRemoteBrowser
-
>
IsIsolatedMozBrowserElement
(
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
OriginAttributes
ourOriginAttributes
=
mRemoteBrowser
-
>
OriginAttributesRef
(
)
;
rv
=
PopulateUserContextIdFromAttribute
(
ourOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
otherOriginAttributes
=
aOther
-
>
mRemoteBrowser
-
>
OriginAttributesRef
(
)
;
rv
=
aOther
-
>
PopulateUserContextIdFromAttribute
(
otherOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
ourOriginAttributes
!
=
otherOriginAttributes
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourHasHistory
=
mIsTopLevelContent
&
&
ourContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
;
bool
otherHasHistory
=
aOther
-
>
mIsTopLevelContent
&
&
otherContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
;
if
(
ourHasHistory
!
=
otherHasHistory
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
mInSwap
|
|
aOther
-
>
mInSwap
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
mInSwap
=
aOther
-
>
mInSwap
=
true
;
nsIFrame
*
ourFrame
=
ourContent
-
>
GetPrimaryFrame
(
)
;
nsIFrame
*
otherFrame
=
otherContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
ourFrame
|
|
!
otherFrame
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsSubDocumentFrame
*
ourFrameFrame
=
do_QueryFrame
(
ourFrame
)
;
if
(
!
ourFrameFrame
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
rv
=
ourFrameFrame
-
>
BeginSwapDocShells
(
otherFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
mInSwap
=
aOther
-
>
mInSwap
=
false
;
return
rv
;
}
nsCOMPtr
<
nsIBrowserDOMWindow
>
otherBrowserDOMWindow
=
aOther
-
>
mRemoteBrowser
-
>
GetBrowserDOMWindow
(
)
;
nsCOMPtr
<
nsIBrowserDOMWindow
>
browserDOMWindow
=
mRemoteBrowser
-
>
GetBrowserDOMWindow
(
)
;
if
(
!
!
otherBrowserDOMWindow
!
=
!
!
browserDOMWindow
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
OwnerIsMozBrowserFrame
(
)
&
&
!
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
DestroyBrowserFrameScripts
(
)
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
aOther
-
>
DestroyBrowserFrameScripts
(
)
;
}
aOther
-
>
mRemoteBrowser
-
>
SetBrowserDOMWindow
(
browserDOMWindow
)
;
mRemoteBrowser
-
>
SetBrowserDOMWindow
(
otherBrowserDOMWindow
)
;
#
ifdef
XP_WIN
if
(
nsPIDOMWindowOuter
*
newWin
=
ourDoc
-
>
GetWindow
(
)
)
{
RefPtr
<
nsIWidget
>
newParent
=
nsGlobalWindowOuter
:
:
Cast
(
newWin
)
-
>
GetMainWidget
(
)
;
const
ManagedContainer
<
mozilla
:
:
plugins
:
:
PPluginWidgetParent
>
&
plugins
=
aOther
-
>
mRemoteBrowser
-
>
ManagedPPluginWidgetParent
(
)
;
for
(
auto
iter
=
plugins
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
static_cast
<
mozilla
:
:
plugins
:
:
PluginWidgetParent
*
>
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
-
>
SetParent
(
newParent
)
;
}
}
#
endif
MaybeUpdatePrimaryTabParent
(
eTabParentRemoved
)
;
aOther
-
>
MaybeUpdatePrimaryTabParent
(
eTabParentRemoved
)
;
SetOwnerContent
(
otherContent
)
;
aOther
-
>
SetOwnerContent
(
ourContent
)
;
mRemoteBrowser
-
>
SetOwnerElement
(
otherContent
)
;
aOther
-
>
mRemoteBrowser
-
>
SetOwnerElement
(
ourContent
)
;
Unused
<
<
mRemoteBrowser
-
>
SendParentActivated
(
ParentWindowIsActive
(
otherContent
-
>
OwnerDoc
(
)
)
)
;
Unused
<
<
aOther
-
>
mRemoteBrowser
-
>
SendParentActivated
(
ParentWindowIsActive
(
ourContent
-
>
OwnerDoc
(
)
)
)
;
MaybeUpdatePrimaryTabParent
(
eTabParentChanged
)
;
aOther
-
>
MaybeUpdatePrimaryTabParent
(
eTabParentChanged
)
;
RefPtr
<
nsFrameMessageManager
>
ourMessageManager
=
mMessageManager
;
RefPtr
<
nsFrameMessageManager
>
otherMessageManager
=
aOther
-
>
mMessageManager
;
if
(
ourMessageManager
)
{
ourMessageManager
-
>
SetCallback
(
aOther
)
;
}
if
(
otherMessageManager
)
{
otherMessageManager
-
>
SetCallback
(
this
)
;
}
mMessageManager
.
swap
(
aOther
-
>
mMessageManager
)
;
nsCOMPtr
<
nsIFrameLoader
>
kungFuDeathGrip
(
this
)
;
aThisOwner
-
>
InternalSetFrameLoader
(
aOther
)
;
aOtherOwner
-
>
InternalSetFrameLoader
(
kungFuDeathGrip
)
;
ourFrameFrame
-
>
EndSwapDocShells
(
otherFrame
)
;
ourShell
-
>
BackingScaleFactorChanged
(
)
;
otherShell
-
>
BackingScaleFactorChanged
(
)
;
InitializeBrowserAPI
(
)
;
aOther
-
>
InitializeBrowserAPI
(
)
;
mInSwap
=
aOther
-
>
mInSwap
=
false
;
MutableTabContext
ourContext
;
rv
=
GetNewTabContext
(
&
ourContext
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
MutableTabContext
otherContext
;
rv
=
aOther
-
>
GetNewTabContext
(
&
otherContext
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsAutoString
ourRemoteType
;
if
(
!
ourContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
ourRemoteType
)
)
{
ourRemoteType
.
AssignLiteral
(
DEFAULT_REMOTE_TYPE
)
;
}
nsAutoString
otherRemoteType
;
if
(
!
otherContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
otherRemoteType
)
)
{
otherRemoteType
.
AssignLiteral
(
DEFAULT_REMOTE_TYPE
)
;
}
ourContent
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
otherRemoteType
false
)
;
otherContent
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
RemoteType
ourRemoteType
false
)
;
Unused
<
<
mRemoteBrowser
-
>
SendSwappedWithOtherRemoteLoader
(
ourContext
.
AsIPCTabContext
(
)
)
;
Unused
<
<
aOther
-
>
mRemoteBrowser
-
>
SendSwappedWithOtherRemoteLoader
(
otherContext
.
AsIPCTabContext
(
)
)
;
return
NS_OK
;
}
class
MOZ_RAII
AutoResetInFrameSwap
final
{
public
:
AutoResetInFrameSwap
(
nsFrameLoader
*
aThisFrameLoader
nsFrameLoader
*
aOtherFrameLoader
nsDocShell
*
aThisDocShell
nsDocShell
*
aOtherDocShell
EventTarget
*
aThisEventTarget
EventTarget
*
aOtherEventTarget
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mThisFrameLoader
(
aThisFrameLoader
)
mOtherFrameLoader
(
aOtherFrameLoader
)
mThisDocShell
(
aThisDocShell
)
mOtherDocShell
(
aOtherDocShell
)
mThisEventTarget
(
aThisEventTarget
)
mOtherEventTarget
(
aOtherEventTarget
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mThisFrameLoader
-
>
mInSwap
=
true
;
mOtherFrameLoader
-
>
mInSwap
=
true
;
mThisDocShell
-
>
SetInFrameSwap
(
true
)
;
mOtherDocShell
-
>
SetInFrameSwap
(
true
)
;
nsContentUtils
:
:
FirePageShowEvent
(
mThisDocShell
mThisEventTarget
false
)
;
nsContentUtils
:
:
FirePageShowEvent
(
mOtherDocShell
mOtherEventTarget
false
)
;
nsContentUtils
:
:
FirePageHideEvent
(
mThisDocShell
mThisEventTarget
)
;
nsContentUtils
:
:
FirePageHideEvent
(
mOtherDocShell
mOtherEventTarget
)
;
}
~
AutoResetInFrameSwap
(
)
{
nsContentUtils
:
:
FirePageShowEvent
(
mThisDocShell
mThisEventTarget
true
)
;
nsContentUtils
:
:
FirePageShowEvent
(
mOtherDocShell
mOtherEventTarget
true
)
;
mThisFrameLoader
-
>
mInSwap
=
false
;
mOtherFrameLoader
-
>
mInSwap
=
false
;
mThisDocShell
-
>
SetInFrameSwap
(
false
)
;
mOtherDocShell
-
>
SetInFrameSwap
(
false
)
;
}
private
:
RefPtr
<
nsFrameLoader
>
mThisFrameLoader
;
RefPtr
<
nsFrameLoader
>
mOtherFrameLoader
;
RefPtr
<
nsDocShell
>
mThisDocShell
;
RefPtr
<
nsDocShell
>
mOtherDocShell
;
nsCOMPtr
<
EventTarget
>
mThisEventTarget
;
nsCOMPtr
<
EventTarget
>
mOtherEventTarget
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
nsresult
nsFrameLoader
:
:
SwapWithOtherLoader
(
nsFrameLoader
*
aOther
nsIFrameLoaderOwner
*
aThisOwner
nsIFrameLoaderOwner
*
aOtherOwner
)
{
#
ifdef
DEBUG
RefPtr
<
nsFrameLoader
>
first
=
aThisOwner
-
>
GetFrameLoader
(
)
;
RefPtr
<
nsFrameLoader
>
second
=
aOtherOwner
-
>
GetFrameLoader
(
)
;
MOZ_ASSERT
(
first
=
=
this
"
aThisOwner
must
own
this
"
)
;
MOZ_ASSERT
(
second
=
=
aOther
"
aOtherOwner
must
own
aOther
"
)
;
#
endif
NS_ENSURE_STATE
(
!
mInShow
&
&
!
aOther
-
>
mInShow
)
;
if
(
IsRemoteFrame
(
)
!
=
aOther
-
>
IsRemoteFrame
(
)
)
{
NS_WARNING
(
"
Swapping
remote
and
non
-
remote
frames
is
not
currently
supported
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
Element
*
ourContent
=
mOwnerContent
;
Element
*
otherContent
=
aOther
-
>
mOwnerContent
;
if
(
!
ourContent
|
|
!
otherContent
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourHasSrcdoc
=
ourContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
bool
otherHasSrcdoc
=
otherContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
srcdoc
)
;
if
(
ourHasSrcdoc
|
|
otherHasSrcdoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourFullscreenAllowed
=
ourContent
-
>
IsXULElement
(
)
|
|
(
OwnerIsMozBrowserFrame
(
)
&
&
(
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
)
;
bool
otherFullscreenAllowed
=
otherContent
-
>
IsXULElement
(
)
|
|
(
aOther
-
>
OwnerIsMozBrowserFrame
(
)
&
&
(
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
)
;
if
(
ourFullscreenAllowed
!
=
otherFullscreenAllowed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ourPaymentRequestAllowed
=
ourContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowpaymentrequest
)
;
bool
otherPaymentRequestAllowed
=
otherContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowpaymentrequest
)
;
if
(
ourPaymentRequestAllowed
!
=
otherPaymentRequestAllowed
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
IsRemoteFrame
(
)
)
{
MOZ_ASSERT
(
aOther
-
>
IsRemoteFrame
(
)
)
;
return
SwapWithOtherRemoteLoader
(
aOther
aThisOwner
aOtherOwner
)
;
}
bool
equal
;
nsresult
rv
=
ourContent
-
>
NodePrincipal
(
)
-
>
Equals
(
otherContent
-
>
NodePrincipal
(
)
&
equal
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
equal
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
RefPtr
<
nsDocShell
>
ourDocshell
=
static_cast
<
nsDocShell
*
>
(
GetExistingDocShell
(
)
)
;
RefPtr
<
nsDocShell
>
otherDocshell
=
static_cast
<
nsDocShell
*
>
(
aOther
-
>
GetExistingDocShell
(
)
)
;
if
(
!
ourDocshell
|
|
!
otherDocshell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
ourRootTreeItem
otherRootTreeItem
;
ourDocshell
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
ourRootTreeItem
)
)
;
otherDocshell
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
otherRootTreeItem
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
ourRootWebnav
=
do_QueryInterface
(
ourRootTreeItem
)
;
nsCOMPtr
<
nsIWebNavigation
>
otherRootWebnav
=
do_QueryInterface
(
otherRootTreeItem
)
;
if
(
!
ourRootWebnav
|
|
!
otherRootWebnav
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsISHistory
>
ourHistory
;
nsCOMPtr
<
nsISHistory
>
otherHistory
;
ourRootWebnav
-
>
GetSessionHistory
(
getter_AddRefs
(
ourHistory
)
)
;
otherRootWebnav
-
>
GetSessionHistory
(
getter_AddRefs
(
otherHistory
)
)
;
if
(
(
ourRootTreeItem
!
=
ourDocshell
|
|
otherRootTreeItem
!
=
otherDocshell
)
&
&
(
ourHistory
|
|
otherHistory
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
int32_t
ourType
=
ourDocshell
-
>
ItemType
(
)
;
int32_t
otherType
=
otherDocshell
-
>
ItemType
(
)
;
if
(
ourType
!
=
otherType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
ourType
!
=
nsIDocShellTreeItem
:
:
typeContent
&
&
(
!
AllDescendantsOfType
(
ourDocshell
ourType
)
|
|
!
AllDescendantsOfType
(
otherDocshell
otherType
)
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
ourOwner
otherOwner
;
ourDocshell
-
>
GetTreeOwner
(
getter_AddRefs
(
ourOwner
)
)
;
otherDocshell
-
>
GetTreeOwner
(
getter_AddRefs
(
otherOwner
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
ourParentItem
otherParentItem
;
ourDocshell
-
>
GetParent
(
getter_AddRefs
(
ourParentItem
)
)
;
otherDocshell
-
>
GetParent
(
getter_AddRefs
(
otherParentItem
)
)
;
if
(
!
ourParentItem
|
|
!
otherParentItem
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
int32_t
ourParentType
=
ourParentItem
-
>
ItemType
(
)
;
int32_t
otherParentType
=
otherParentItem
-
>
ItemType
(
)
;
if
(
ourParentType
!
=
otherParentType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
ourDocshell
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
otherWindow
=
otherDocshell
-
>
GetWindow
(
)
;
nsCOMPtr
<
Element
>
ourFrameElement
=
ourWindow
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
Element
>
otherFrameElement
=
otherWindow
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
EventTarget
>
ourChromeEventHandler
=
do_QueryInterface
(
ourWindow
-
>
GetChromeEventHandler
(
)
)
;
nsCOMPtr
<
EventTarget
>
otherChromeEventHandler
=
do_QueryInterface
(
otherWindow
-
>
GetChromeEventHandler
(
)
)
;
nsCOMPtr
<
EventTarget
>
ourEventTarget
=
ourWindow
-
>
GetParentTarget
(
)
;
nsCOMPtr
<
EventTarget
>
otherEventTarget
=
otherWindow
-
>
GetParentTarget
(
)
;
NS_ASSERTION
(
SameCOMIdentity
(
ourFrameElement
ourContent
)
&
&
SameCOMIdentity
(
otherFrameElement
otherContent
)
&
&
SameCOMIdentity
(
ourChromeEventHandler
ourContent
)
&
&
SameCOMIdentity
(
otherChromeEventHandler
otherContent
)
"
How
did
that
happen
exactly
?
"
)
;
nsCOMPtr
<
nsIDocument
>
ourChildDocument
=
ourWindow
-
>
GetExtantDoc
(
)
;
nsCOMPtr
<
nsIDocument
>
otherChildDocument
=
otherWindow
-
>
GetExtantDoc
(
)
;
if
(
!
ourChildDocument
|
|
!
otherChildDocument
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIDocument
>
ourParentDocument
=
ourChildDocument
-
>
GetParentDocument
(
)
;
nsCOMPtr
<
nsIDocument
>
otherParentDocument
=
otherChildDocument
-
>
GetParentDocument
(
)
;
nsIDocument
*
ourDoc
=
ourContent
-
>
GetComposedDoc
(
)
;
nsIDocument
*
otherDoc
=
otherContent
-
>
GetComposedDoc
(
)
;
if
(
!
ourDoc
|
|
!
otherDoc
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_ASSERTION
(
ourDoc
=
=
ourParentDocument
"
Unexpected
parent
document
"
)
;
NS_ASSERTION
(
otherDoc
=
=
otherParentDocument
"
Unexpected
parent
document
"
)
;
nsIPresShell
*
ourShell
=
ourDoc
-
>
GetShell
(
)
;
nsIPresShell
*
otherShell
=
otherDoc
-
>
GetShell
(
)
;
if
(
!
ourShell
|
|
!
otherShell
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
ourDocshell
-
>
GetIsIsolatedMozBrowserElement
(
)
!
=
otherDocshell
-
>
GetIsIsolatedMozBrowserElement
(
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
OriginAttributes
ourOriginAttributes
=
ourDocshell
-
>
GetOriginAttributes
(
)
;
rv
=
PopulateUserContextIdFromAttribute
(
ourOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
OriginAttributes
otherOriginAttributes
=
otherDocshell
-
>
GetOriginAttributes
(
)
;
rv
=
aOther
-
>
PopulateUserContextIdFromAttribute
(
otherOriginAttributes
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
ourOriginAttributes
!
=
otherOriginAttributes
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
if
(
mInSwap
|
|
aOther
-
>
mInSwap
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
AutoResetInFrameSwap
autoFrameSwap
(
this
aOther
ourDocshell
otherDocshell
ourEventTarget
otherEventTarget
)
;
nsIFrame
*
ourFrame
=
ourContent
-
>
GetPrimaryFrame
(
)
;
nsIFrame
*
otherFrame
=
otherContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
ourFrame
|
|
!
otherFrame
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsSubDocumentFrame
*
ourFrameFrame
=
do_QueryFrame
(
ourFrame
)
;
if
(
!
ourFrameFrame
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
rv
=
ourFrameFrame
-
>
BeginSwapDocShells
(
otherFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
OwnerIsMozBrowserFrame
(
)
&
&
!
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
DestroyBrowserFrameScripts
(
)
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
aOther
-
>
OwnerIsMozBrowserFrame
(
)
)
{
aOther
-
>
DestroyBrowserFrameScripts
(
)
;
}
ourParentItem
-
>
RemoveChild
(
ourDocshell
)
;
otherParentItem
-
>
RemoveChild
(
otherDocshell
)
;
if
(
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
)
{
ourOwner
-
>
ContentShellRemoved
(
ourDocshell
)
;
otherOwner
-
>
ContentShellRemoved
(
otherDocshell
)
;
}
ourParentItem
-
>
AddChild
(
otherDocshell
)
;
otherParentItem
-
>
AddChild
(
ourDocshell
)
;
ourDocshell
-
>
SetChromeEventHandler
(
otherChromeEventHandler
)
;
otherDocshell
-
>
SetChromeEventHandler
(
ourChromeEventHandler
)
;
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
ourDocshell
otherOwner
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
?
otherChromeEventHandler
.
get
(
)
:
nullptr
)
;
SetTreeOwnerAndChromeEventHandlerOnDocshellTree
(
otherDocshell
ourOwner
ourType
=
=
nsIDocShellTreeItem
:
:
typeContent
?
ourChromeEventHandler
.
get
(
)
:
nullptr
)
;
SetOwnerContent
(
otherContent
)
;
aOther
-
>
SetOwnerContent
(
ourContent
)
;
AddTreeItemToTreeOwner
(
ourDocshell
otherOwner
otherParentType
nullptr
)
;
aOther
-
>
AddTreeItemToTreeOwner
(
otherDocshell
ourOwner
ourParentType
nullptr
)
;
ourParentDocument
-
>
SetSubDocumentFor
(
ourContent
nullptr
)
;
otherParentDocument
-
>
SetSubDocumentFor
(
otherContent
nullptr
)
;
ourParentDocument
-
>
SetSubDocumentFor
(
ourContent
otherChildDocument
)
;
otherParentDocument
-
>
SetSubDocumentFor
(
otherContent
ourChildDocument
)
;
ourWindow
-
>
SetFrameElementInternal
(
otherFrameElement
)
;
otherWindow
-
>
SetFrameElementInternal
(
ourFrameElement
)
;
RefPtr
<
nsFrameMessageManager
>
ourMessageManager
=
mMessageManager
;
RefPtr
<
nsFrameMessageManager
>
otherMessageManager
=
aOther
-
>
mMessageManager
;
if
(
mChildMessageManager
)
{
nsInProcessTabChildGlobal
*
tabChild
=
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mChildMessageManager
.
get
(
)
)
;
tabChild
-
>
SetOwner
(
otherContent
)
;
tabChild
-
>
SetChromeMessageManager
(
otherMessageManager
)
;
}
if
(
aOther
-
>
mChildMessageManager
)
{
nsInProcessTabChildGlobal
*
otherTabChild
=
static_cast
<
nsInProcessTabChildGlobal
*
>
(
aOther
-
>
mChildMessageManager
.
get
(
)
)
;
otherTabChild
-
>
SetOwner
(
ourContent
)
;
otherTabChild
-
>
SetChromeMessageManager
(
ourMessageManager
)
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
SetCallback
(
aOther
)
;
}
if
(
aOther
-
>
mMessageManager
)
{
aOther
-
>
mMessageManager
-
>
SetCallback
(
this
)
;
}
mMessageManager
.
swap
(
aOther
-
>
mMessageManager
)
;
nsCOMPtr
<
nsIFrameLoader
>
kungFuDeathGrip
(
this
)
;
aThisOwner
-
>
InternalSetFrameLoader
(
aOther
)
;
aOtherOwner
-
>
InternalSetFrameLoader
(
kungFuDeathGrip
)
;
nsCOMPtr
<
nsISHistoryInternal
>
ourInternalHistory
=
do_QueryInterface
(
ourHistory
)
;
nsCOMPtr
<
nsISHistoryInternal
>
otherInternalHistory
=
do_QueryInterface
(
otherHistory
)
;
if
(
ourInternalHistory
)
{
ourInternalHistory
-
>
EvictAllContentViewers
(
)
;
}
if
(
otherInternalHistory
)
{
otherInternalHistory
-
>
EvictAllContentViewers
(
)
;
}
NS_ASSERTION
(
ourFrame
=
=
ourContent
-
>
GetPrimaryFrame
(
)
&
&
otherFrame
=
=
otherContent
-
>
GetPrimaryFrame
(
)
"
changed
primary
frame
"
)
;
ourFrameFrame
-
>
EndSwapDocShells
(
otherFrame
)
;
ourShell
-
>
BackingScaleFactorChanged
(
)
;
otherShell
-
>
BackingScaleFactorChanged
(
)
;
InitializeBrowserAPI
(
)
;
aOther
-
>
InitializeBrowserAPI
(
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
Destroy
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
Destroy
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
Destroy
(
)
{
StartDestroy
(
)
;
return
NS_OK
;
}
class
nsFrameLoaderDestroyRunnable
:
public
Runnable
{
enum
DestroyPhase
{
eDestroyDocShell
eWaitForUnloadMessage
eDestroyComplete
}
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
DestroyPhase
mPhase
;
public
:
explicit
nsFrameLoaderDestroyRunnable
(
nsFrameLoader
*
aFrameLoader
)
:
mozilla
:
:
Runnable
(
"
nsFrameLoaderDestroyRunnable
"
)
mFrameLoader
(
aFrameLoader
)
mPhase
(
eDestroyDocShell
)
{
}
NS_IMETHOD
Run
(
)
override
;
}
;
void
nsFrameLoader
:
:
StartDestroy
(
)
{
if
(
mDestroyCalled
)
{
return
;
}
mDestroyCalled
=
true
;
if
(
mMessageManager
)
{
mMessageManager
-
>
Close
(
)
;
}
if
(
mChildMessageManager
|
|
mRemoteBrowser
)
{
mOwnerContentStrong
=
mOwnerContent
;
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
CacheFrameLoader
(
this
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
CacheFrameLoader
(
this
)
;
}
}
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
RemoveWindowListeners
(
)
;
}
nsCOMPtr
<
nsIDocument
>
doc
;
bool
dynamicSubframeRemoval
=
false
;
if
(
mOwnerContent
)
{
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
dynamicSubframeRemoval
=
!
mIsTopLevelContent
&
&
!
doc
-
>
InUnlinkOrDeletion
(
)
;
doc
-
>
SetSubDocumentFor
(
mOwnerContent
nullptr
)
;
MaybeUpdatePrimaryTabParent
(
eTabParentRemoved
)
;
SetOwnerContent
(
nullptr
)
;
}
if
(
dynamicSubframeRemoval
)
{
if
(
mDocShell
)
{
mDocShell
-
>
RemoveFromSessionHistory
(
)
;
}
}
if
(
mIsTopLevelContent
)
{
if
(
mDocShell
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
parentItem
;
mDocShell
-
>
GetParent
(
getter_AddRefs
(
parentItem
)
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
owner
=
do_GetInterface
(
parentItem
)
;
if
(
owner
)
{
owner
-
>
ContentShellRemoved
(
mDocShell
)
;
}
}
}
if
(
mDocShell
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
win_private
(
mDocShell
-
>
GetWindow
(
)
)
;
if
(
win_private
)
{
win_private
-
>
SetFrameElementInternal
(
nullptr
)
;
}
}
if
(
mPartialSHistory
&
&
mPartialSHistory
-
>
GetActiveState
(
)
=
=
nsIPartialSHistory
:
:
STATE_ACTIVE
)
{
nsCOMPtr
<
nsIGroupedSHistory
>
groupedSHistory
;
GetGroupedSHistory
(
getter_AddRefs
(
groupedSHistory
)
)
;
if
(
groupedSHistory
)
{
NS_DispatchToCurrentThread
(
NS_NewRunnableFunction
(
"
nsFrameLoader
:
:
StartDestroy
"
[
groupedSHistory
]
(
)
{
groupedSHistory
-
>
CloseInactiveFrameLoaderOwners
(
)
;
}
)
)
;
}
}
nsCOMPtr
<
nsIRunnable
>
destroyRunnable
=
new
nsFrameLoaderDestroyRunnable
(
this
)
;
if
(
mNeedsAsyncDestroy
|
|
!
doc
|
|
NS_FAILED
(
doc
-
>
FinalizeFrameLoader
(
this
destroyRunnable
)
)
)
{
NS_DispatchToCurrentThread
(
destroyRunnable
)
;
}
}
nsresult
nsFrameLoaderDestroyRunnable
:
:
Run
(
)
{
switch
(
mPhase
)
{
case
eDestroyDocShell
:
mFrameLoader
-
>
DestroyDocShell
(
)
;
if
(
mFrameLoader
-
>
mChildMessageManager
)
{
mPhase
=
eWaitForUnloadMessage
;
NS_DispatchToCurrentThread
(
this
)
;
}
break
;
case
eWaitForUnloadMessage
:
mPhase
=
eDestroyComplete
;
NS_DispatchToCurrentThread
(
this
)
;
break
;
case
eDestroyComplete
:
mFrameLoader
-
>
DestroyComplete
(
)
;
break
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
DestroyDocShell
(
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
Destroy
(
)
;
}
if
(
mChildMessageManager
)
{
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mChildMessageManager
.
get
(
)
)
-
>
FireUnloadEvent
(
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
base_win
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
base_win
)
{
base_win
-
>
Destroy
(
)
;
}
mDocShell
=
nullptr
;
if
(
mChildMessageManager
)
{
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mChildMessageManager
.
get
(
)
)
-
>
DisconnectEventListeners
(
)
;
}
}
void
nsFrameLoader
:
:
DestroyComplete
(
)
{
if
(
mChildMessageManager
|
|
mRemoteBrowser
)
{
mOwnerContentStrong
=
nullptr
;
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
CacheFrameLoader
(
nullptr
)
;
}
if
(
mChildMessageManager
)
{
mChildMessageManager
-
>
CacheFrameLoader
(
nullptr
)
;
}
}
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
SetOwnerElement
(
nullptr
)
;
mRemoteBrowser
-
>
Destroy
(
)
;
mRemoteBrowser
=
nullptr
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
Disconnect
(
)
;
}
if
(
mChildMessageManager
)
{
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mChildMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
}
mMessageManager
=
nullptr
;
mChildMessageManager
=
nullptr
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetDepthTooGreat
(
bool
*
aDepthTooGreat
)
{
*
aDepthTooGreat
=
mDepthTooGreat
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
SetOwnerContent
(
Element
*
aContent
)
{
if
(
mObservingOwnerContent
)
{
mObservingOwnerContent
=
false
;
mOwnerContent
-
>
RemoveMutationObserver
(
this
)
;
}
mOwnerContent
=
aContent
;
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JS
:
:
RootedObject
wrapper
(
jsapi
.
cx
(
)
GetWrapper
(
)
)
;
if
(
wrapper
)
{
JSAutoCompartment
ac
(
jsapi
.
cx
(
)
wrapper
)
;
IgnoredErrorResult
rv
;
ReparentWrapper
(
jsapi
.
cx
(
)
wrapper
rv
)
;
Unused
<
<
NS_WARN_IF
(
rv
.
Failed
(
)
)
;
}
if
(
RenderFrameParent
*
rfp
=
GetCurrentRenderFrame
(
)
)
{
rfp
-
>
OwnerContentChanged
(
aContent
)
;
}
}
bool
nsFrameLoader
:
:
OwnerIsMozBrowserFrame
(
)
{
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
return
browserFrame
?
browserFrame
-
>
GetReallyIsBrowser
(
)
:
false
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetOwnerIsMozBrowserFrame
(
bool
*
aResult
)
{
*
aResult
=
OwnerIsMozBrowserFrame
(
)
;
return
NS_OK
;
}
bool
nsFrameLoader
:
:
OwnerIsIsolatedMozBrowserFrame
(
)
{
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
!
browserFrame
)
{
return
false
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
)
{
return
false
;
}
bool
isolated
=
browserFrame
-
>
GetIsolated
(
)
;
if
(
isolated
)
{
return
true
;
}
return
false
;
}
bool
nsFrameLoader
:
:
ShouldUseRemoteProcess
(
)
{
if
(
IsForJSPlugin
(
)
)
{
return
true
;
}
if
(
PR_GetEnv
(
"
MOZ_DISABLE_OOP_TABS
"
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
tabs
.
disabled
"
false
)
)
{
return
false
;
}
if
(
XRE_IsContentProcess
(
)
&
&
!
CompositorBridgeChild
:
:
ChildProcessHasCompositorBridge
(
)
)
{
return
false
;
}
if
(
XRE_IsContentProcess
(
)
&
&
!
(
PR_GetEnv
(
"
MOZ_NESTED_OOP_TABS
"
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
tabs
.
nested
.
enabled
"
false
)
)
)
{
return
false
;
}
if
(
OwnerIsMozBrowserFrame
(
)
&
&
!
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
Remote
)
)
{
return
Preferences
:
:
GetBool
(
"
dom
.
ipc
.
browser_frames
.
oop_by_default
"
false
)
;
}
return
(
OwnerIsMozBrowserFrame
(
)
|
|
mOwnerContent
-
>
GetNameSpaceID
(
)
=
=
kNameSpaceID_XUL
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
Remote
nsGkAtoms
:
:
_true
eCaseMatters
)
;
}
bool
nsFrameLoader
:
:
IsRemoteFrame
(
)
{
if
(
mRemoteFrame
)
{
MOZ_ASSERT
(
!
mDocShell
"
Found
a
remote
frame
with
a
DocShell
"
)
;
return
true
;
}
return
false
;
}
nsresult
nsFrameLoader
:
:
MaybeCreateDocShell
(
)
{
if
(
mDocShell
)
{
return
NS_OK
;
}
if
(
IsRemoteFrame
(
)
)
{
return
NS_OK
;
}
NS_ENSURE_STATE
(
!
mDestroyCalled
)
;
nsIDocument
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
if
(
!
doc
-
>
IsStaticDocument
(
)
&
&
(
!
doc
-
>
GetWindow
(
)
|
|
!
mOwnerContent
-
>
IsInComposedDoc
(
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
!
doc
-
>
IsActive
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
doc
-
>
GetDocShell
(
)
;
nsCOMPtr
<
nsIWebNavigation
>
parentAsWebNav
=
do_QueryInterface
(
docShell
)
;
NS_ENSURE_STATE
(
parentAsWebNav
)
;
mDocShell
=
do_CreateInstance
(
"
mozilla
.
org
/
docshell
;
1
"
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
if
(
mIsPrerendered
)
{
nsresult
rv
=
mDocShell
-
>
SetIsPrerendered
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
mNetworkCreated
)
{
if
(
mDocShell
)
{
mDocShell
-
>
SetCreatedDynamically
(
true
)
;
}
}
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
nsAutoString
frameName
;
int32_t
namespaceID
=
mOwnerContent
-
>
GetNameSpaceID
(
)
;
if
(
namespaceID
=
=
kNameSpaceID_XHTML
&
&
!
mOwnerContent
-
>
IsInHTMLDocument
(
)
)
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
id
frameName
)
;
}
else
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
frameName
)
;
if
(
frameName
.
IsEmpty
(
)
&
&
namespaceID
=
=
kNameSpaceID_XUL
)
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
id
frameName
)
;
}
}
if
(
!
frameName
.
IsEmpty
(
)
)
{
mDocShell
-
>
SetName
(
frameName
)
;
}
const
int32_t
parentType
=
docShell
-
>
ItemType
(
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
NS_ENSURE_STATE
(
parentTreeOwner
)
;
mIsTopLevelContent
=
AddTreeItemToTreeOwner
(
mDocShell
parentTreeOwner
parentType
docShell
)
;
if
(
mIsTopLevelContent
)
{
mDocShell
-
>
SetCreatedDynamically
(
false
)
;
}
nsCOMPtr
<
nsIDOMEventTarget
>
chromeEventHandler
;
if
(
parentType
=
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
chromeEventHandler
=
do_QueryInterface
(
mOwnerContent
)
;
NS_ASSERTION
(
chromeEventHandler
"
This
mContent
should
implement
this
.
"
)
;
}
else
{
docShell
-
>
GetChromeEventHandler
(
getter_AddRefs
(
chromeEventHandler
)
)
;
}
mDocShell
-
>
SetChromeEventHandler
(
chromeEventHandler
)
;
nsCOMPtr
<
Element
>
frame_element
=
mOwnerContent
;
NS_ASSERTION
(
frame_element
"
frame
loader
owner
element
not
a
DOM
element
!
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win_private
(
mDocShell
-
>
GetWindow
(
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
base_win
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
win_private
)
{
win_private
-
>
SetFrameElementInternal
(
frame_element
)
;
if
(
mOpener
)
{
win_private
-
>
SetOpenerWindow
(
mOpener
true
)
;
mOpener
=
nullptr
;
}
}
if
(
NS_FAILED
(
base_win
-
>
Create
(
)
)
|
|
!
win_private
)
{
NS_WARNING
(
"
Something
wrong
when
creating
the
docshell
for
a
frameloader
!
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
mIsTopLevelContent
&
&
mOwnerContent
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
&
&
!
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
disablehistory
)
)
{
nsresult
rv
;
nsCOMPtr
<
nsISHistory
>
sessionHistory
=
do_CreateInstance
(
NS_SHISTORY_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
webNav
-
>
SetSessionHistory
(
sessionHistory
)
;
if
(
GroupedSHistory
:
:
GroupedHistoryEnabled
(
)
)
{
mPartialSHistory
=
new
PartialSHistory
(
this
)
;
nsCOMPtr
<
nsISHistoryListener
>
listener
(
do_QueryInterface
(
mPartialSHistory
)
)
;
nsCOMPtr
<
nsIPartialSHistoryListener
>
partialListener
(
do_QueryInterface
(
mPartialSHistory
)
)
;
sessionHistory
-
>
AddSHistoryListener
(
listener
)
;
sessionHistory
-
>
SetPartialSHistoryListener
(
partialListener
)
;
}
}
OriginAttributes
attrs
;
if
(
docShell
-
>
ItemType
(
)
=
=
mDocShell
-
>
ItemType
(
)
)
{
attrs
=
nsDocShell
:
:
Cast
(
docShell
)
-
>
GetOriginAttributes
(
)
;
}
if
(
parentType
=
=
nsIDocShellTreeItem
:
:
typeContent
&
&
!
nsContentUtils
:
:
IsSystemPrincipal
(
doc
-
>
NodePrincipal
(
)
)
&
&
!
OwnerIsMozBrowserFrame
(
)
)
{
OriginAttributes
oa
=
doc
-
>
NodePrincipal
(
)
-
>
OriginAttributesRef
(
)
;
MOZ_ASSERT_IF
(
mIsTopLevelContent
attrs
.
mFirstPartyDomain
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
attrs
.
mAppId
=
=
oa
.
mAppId
"
docshell
and
document
should
have
the
same
appId
attribute
.
"
)
;
MOZ_ASSERT
(
attrs
.
mUserContextId
=
=
oa
.
mUserContextId
"
docshell
and
document
should
have
the
same
userContextId
attribute
.
"
)
;
MOZ_ASSERT
(
attrs
.
mInIsolatedMozBrowser
=
=
oa
.
mInIsolatedMozBrowser
"
docshell
and
document
should
have
the
same
inIsolatedMozBrowser
attribute
.
"
)
;
MOZ_ASSERT
(
attrs
.
mPrivateBrowsingId
=
=
oa
.
mPrivateBrowsingId
"
docshell
and
document
should
have
the
same
privateBrowsingId
attribute
.
"
)
;
attrs
=
oa
;
}
if
(
OwnerIsMozBrowserFrame
(
)
)
{
attrs
.
mAppId
=
nsIScriptSecurityManager
:
:
NO_APP_ID
;
attrs
.
mInIsolatedMozBrowser
=
OwnerIsIsolatedMozBrowserFrame
(
)
;
mDocShell
-
>
SetFrameType
(
nsIDocShell
:
:
FRAME_TYPE_BROWSER
)
;
}
uint32_t
sandboxFlags
=
0
;
HTMLIFrameElement
*
iframe
=
HTMLIFrameElement
:
:
FromContent
(
mOwnerContent
)
;
if
(
iframe
)
{
sandboxFlags
=
iframe
-
>
GetSandboxFlags
(
)
;
}
ApplySandboxFlags
(
sandboxFlags
)
;
nsresult
rv
=
PopulateUserContextIdFromAttribute
(
attrs
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
bool
isPrivate
=
false
;
nsCOMPtr
<
nsILoadContext
>
parentContext
=
do_QueryInterface
(
docShell
)
;
NS_ENSURE_STATE
(
parentContext
)
;
rv
=
parentContext
-
>
GetUsePrivateBrowsing
(
&
isPrivate
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
if
(
OwnerIsMozBrowserFrame
(
)
)
{
nsAutoString
name
;
if
(
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
name
)
)
{
docShell
-
>
SetName
(
name
)
;
}
mDocShell
-
>
SetFullscreenAllowed
(
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
allowfullscreen
)
|
|
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozallowfullscreen
)
)
;
bool
isPrivate
=
mOwnerContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozprivatebrowsing
)
;
if
(
isPrivate
)
{
if
(
mDocShell
-
>
GetHasLoadedNonBlankURI
(
)
)
{
nsContentUtils
:
:
ReportToConsoleNonLocalized
(
NS_LITERAL_STRING
(
"
We
should
not
switch
to
Private
Browsing
after
loading
a
document
.
"
)
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
mozprivatebrowsing
"
)
nullptr
)
;
}
else
{
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
}
}
}
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
SetOriginAttributes
(
attrs
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
=
doc
-
>
GetWindow
(
)
;
if
(
!
mDocShell
-
>
GetIsMozBrowser
(
)
&
&
parentType
=
=
mDocShell
-
>
ItemType
(
)
&
&
!
doc
-
>
IsStaticDocument
(
)
&
&
win
)
{
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
ancestorPrincipals
;
ancestorPrincipals
=
doc
-
>
AncestorPrincipals
(
)
;
ancestorPrincipals
.
InsertElementAt
(
0
doc
-
>
NodePrincipal
(
)
)
;
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
SetAncestorPrincipals
(
Move
(
ancestorPrincipals
)
)
;
nsTArray
<
uint64_t
>
ancestorOuterWindowIDs
;
ancestorOuterWindowIDs
=
doc
-
>
AncestorOuterWindowIDs
(
)
;
ancestorOuterWindowIDs
.
InsertElementAt
(
0
win
-
>
WindowID
(
)
)
;
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
SetAncestorOuterWindowIDs
(
Move
(
ancestorOuterWindowIDs
)
)
;
}
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
NS_ISUPPORTS_CAST
(
nsIFrameLoader
*
this
)
"
inprocess
-
browser
-
shown
"
nullptr
)
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
GetURL
(
nsString
&
aURI
nsIPrincipal
*
*
aTriggeringPrincipal
)
{
aURI
.
Truncate
(
)
;
if
(
mOwnerContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
object
)
)
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
data
aURI
)
;
}
else
{
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
src
aURI
)
;
if
(
RefPtr
<
nsGenericHTMLFrameElement
>
frame
=
do_QueryObject
(
mOwnerContent
)
)
{
nsCOMPtr
<
nsIPrincipal
>
prin
=
frame
-
>
GetSrcTriggeringPrincipal
(
)
;
prin
.
forget
(
aTriggeringPrincipal
)
;
}
}
}
nsresult
nsFrameLoader
:
:
CheckForRecursiveLoad
(
nsIURI
*
aURI
)
{
nsresult
rv
;
MOZ_ASSERT
(
!
IsRemoteFrame
(
)
"
Shouldn
'
t
call
CheckForRecursiveLoad
on
remote
frames
.
"
)
;
mDepthTooGreat
=
false
;
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
NS_ASSERTION
(
mDocShell
"
MaybeCreateDocShell
succeeded
but
null
mDocShell
"
)
;
if
(
!
mDocShell
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
mDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
NS_WARNING_ASSERTION
(
treeOwner
"
Trying
to
load
a
new
url
to
a
docshell
without
owner
!
"
)
;
NS_ENSURE_STATE
(
treeOwner
)
;
if
(
mDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeContent
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentAsItem
;
mDocShell
-
>
GetSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
int32_t
depth
=
0
;
while
(
parentAsItem
)
{
+
+
depth
;
if
(
depth
>
=
MAX_DEPTH_CONTENT_FRAMES
)
{
mDepthTooGreat
=
true
;
NS_WARNING
(
"
Too
many
nested
content
frames
so
giving
up
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
temp
;
temp
.
swap
(
parentAsItem
)
;
temp
-
>
GetSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
}
nsAutoCString
buffer
;
rv
=
aURI
-
>
GetScheme
(
buffer
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
buffer
.
EqualsLiteral
(
"
about
"
)
)
{
rv
=
aURI
-
>
GetPathQueryRef
(
buffer
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
buffer
.
EqualsLiteral
(
"
srcdoc
"
)
)
{
return
NS_OK
;
}
}
int32_t
matchCount
=
0
;
mDocShell
-
>
GetSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
while
(
parentAsItem
)
{
nsCOMPtr
<
nsIWebNavigation
>
parentAsNav
(
do_QueryInterface
(
parentAsItem
)
)
;
if
(
parentAsNav
)
{
nsCOMPtr
<
nsIURI
>
parentURI
;
parentAsNav
-
>
GetCurrentURI
(
getter_AddRefs
(
parentURI
)
)
;
if
(
parentURI
)
{
bool
equal
;
rv
=
aURI
-
>
EqualsExceptRef
(
parentURI
&
equal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
equal
)
{
matchCount
+
+
;
if
(
matchCount
>
=
MAX_SAME_URL_CONTENT_FRAMES
)
{
NS_WARNING
(
"
Too
many
nested
content
frames
have
the
same
url
(
recursion
?
)
so
giving
up
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
}
}
}
nsCOMPtr
<
nsIDocShellTreeItem
>
temp
;
temp
.
swap
(
parentAsItem
)
;
temp
-
>
GetSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
GetWindowDimensions
(
nsIntRect
&
aRect
)
{
nsIDocument
*
doc
=
mOwnerContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
=
doc
-
>
GetWindow
(
)
;
if
(
!
win
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentAsItem
(
win
-
>
GetDocShell
(
)
)
;
if
(
!
parentAsItem
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentOwner
;
if
(
NS_FAILED
(
parentAsItem
-
>
GetTreeOwner
(
getter_AddRefs
(
parentOwner
)
)
)
|
|
!
parentOwner
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
(
do_GetInterface
(
parentOwner
)
)
;
treeOwnerAsWin
-
>
GetPosition
(
&
aRect
.
x
&
aRect
.
y
)
;
treeOwnerAsWin
-
>
GetSize
(
&
aRect
.
width
&
aRect
.
height
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
UpdatePositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
{
if
(
IsRemoteFrame
(
)
)
{
if
(
mRemoteBrowser
)
{
ScreenIntSize
size
=
aIFrame
-
>
GetSubdocumentSize
(
)
;
if
(
!
mRemoteBrowserShown
)
{
ShowRemoteFrame
(
size
aIFrame
)
;
}
nsIntRect
dimensions
;
NS_ENSURE_SUCCESS
(
GetWindowDimensions
(
dimensions
)
NS_ERROR_FAILURE
)
;
mLazySize
=
size
;
mRemoteBrowser
-
>
UpdateDimensions
(
dimensions
size
)
;
}
return
NS_OK
;
}
UpdateBaseWindowPositionAndSize
(
aIFrame
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
UpdateBaseWindowPositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
;
GetDocShell
(
getter_AddRefs
(
docShell
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
docShell
)
)
;
if
(
baseWindow
)
{
int32_t
x
=
0
;
int32_t
y
=
0
;
AutoWeakFrame
weakFrame
(
aIFrame
)
;
baseWindow
-
>
GetPosition
(
&
x
&
y
)
;
if
(
!
weakFrame
.
IsAlive
(
)
)
{
return
;
}
ScreenIntSize
size
=
aIFrame
-
>
GetSubdocumentSize
(
)
;
mLazySize
=
size
;
baseWindow
-
>
SetPositionAndSize
(
x
y
size
.
width
size
.
height
nsIBaseWindow
:
:
eDelayResize
)
;
}
}
uint32_t
nsFrameLoader
:
:
LazyWidth
(
)
const
{
uint32_t
lazyWidth
=
mLazySize
.
width
;
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
lazyWidth
=
frame
-
>
PresContext
(
)
-
>
DevPixelsToIntCSSPixels
(
lazyWidth
)
;
}
return
lazyWidth
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetLazyWidth
(
uint32_t
*
aLazyWidth
)
{
*
aLazyWidth
=
LazyWidth
(
)
;
return
NS_OK
;
}
uint32_t
nsFrameLoader
:
:
LazyHeight
(
)
const
{
uint32_t
lazyHeight
=
mLazySize
.
height
;
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
lazyHeight
=
frame
-
>
PresContext
(
)
-
>
DevPixelsToIntCSSPixels
(
lazyHeight
)
;
}
return
lazyHeight
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetLazyHeight
(
uint32_t
*
aLazyHeight
)
{
*
aLazyHeight
=
LazyHeight
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetEventMode
(
uint32_t
*
aEventMode
)
{
*
aEventMode
=
mEventMode
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
SetEventMode
(
uint32_t
aEventMode
)
{
mEventMode
=
aEventMode
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetClipSubdocument
(
bool
*
aResult
)
{
*
aResult
=
mClipSubdocument
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
SetClipSubdocument
(
bool
aClip
)
{
mClipSubdocument
=
aClip
;
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
if
(
frame
)
{
frame
-
>
InvalidateFrame
(
)
;
frame
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
frame
nsIPresShell
:
:
eResize
NS_FRAME_IS_DIRTY
)
;
nsSubDocumentFrame
*
subdocFrame
=
do_QueryFrame
(
frame
)
;
if
(
subdocFrame
)
{
nsIFrame
*
subdocRootFrame
=
subdocFrame
-
>
GetSubdocumentRootFrame
(
)
;
if
(
subdocRootFrame
)
{
nsIFrame
*
subdocRootScrollFrame
=
subdocRootFrame
-
>
PresShell
(
)
-
>
GetRootScrollFrame
(
)
;
if
(
subdocRootScrollFrame
)
{
frame
-
>
PresShell
(
)
-
>
FrameNeedsReflow
(
frame
nsIPresShell
:
:
eResize
NS_FRAME_IS_DIRTY
)
;
}
}
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetClampScrollPosition
(
bool
*
aResult
)
{
*
aResult
=
mClampScrollPosition
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
SetClampScrollPosition
(
bool
aClamp
)
{
mClampScrollPosition
=
aClamp
;
if
(
aClamp
)
{
nsIFrame
*
frame
=
GetPrimaryFrameOfOwningContent
(
)
;
nsSubDocumentFrame
*
subdocFrame
=
do_QueryFrame
(
frame
)
;
if
(
subdocFrame
)
{
nsIFrame
*
subdocRootFrame
=
subdocFrame
-
>
GetSubdocumentRootFrame
(
)
;
if
(
subdocRootFrame
)
{
nsIScrollableFrame
*
subdocRootScrollFrame
=
subdocRootFrame
-
>
PresShell
(
)
-
>
GetRootScrollFrameAsScrollable
(
)
;
if
(
subdocRootScrollFrame
)
{
subdocRootScrollFrame
-
>
ScrollTo
(
subdocRootScrollFrame
-
>
GetScrollPosition
(
)
nsIScrollableFrame
:
:
INSTANT
)
;
}
}
}
}
return
NS_OK
;
}
static
Tuple
<
ContentParent
*
TabParent
*
>
GetContentParent
(
Element
*
aBrowser
)
{
using
ReturnTuple
=
Tuple
<
ContentParent
*
TabParent
*
>
;
nsCOMPtr
<
nsIBrowser
>
browser
=
do_QueryInterface
(
aBrowser
)
;
if
(
!
browser
)
{
return
ReturnTuple
(
nullptr
nullptr
)
;
}
nsCOMPtr
<
nsIFrameLoader
>
otherLoader
;
browser
-
>
GetSameProcessAsFrameLoader
(
getter_AddRefs
(
otherLoader
)
)
;
if
(
!
otherLoader
)
{
return
ReturnTuple
(
nullptr
nullptr
)
;
}
TabParent
*
tabParent
=
TabParent
:
:
GetFrom
(
otherLoader
)
;
if
(
tabParent
&
&
tabParent
-
>
Manager
(
)
&
&
tabParent
-
>
Manager
(
)
-
>
IsContentParent
(
)
)
{
return
MakeTuple
(
tabParent
-
>
Manager
(
)
-
>
AsContentParent
(
)
tabParent
)
;
}
return
ReturnTuple
(
nullptr
nullptr
)
;
}
bool
nsFrameLoader
:
:
TryRemoteBrowser
(
)
{
NS_ASSERTION
(
!
mRemoteBrowser
"
TryRemoteBrowser
called
with
a
remote
browser
already
?
"
)
;
nsIDocument
*
doc
=
mOwnerContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
!
doc
-
>
IsResourceDoc
(
)
"
We
shouldn
'
t
even
exist
"
)
;
if
(
!
doc
-
>
IsActive
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
parentWin
=
doc
-
>
GetWindow
(
)
;
if
(
!
parentWin
)
{
return
false
;
}
nsCOMPtr
<
nsIDocShell
>
parentDocShell
=
parentWin
-
>
GetDocShell
(
)
;
if
(
!
parentDocShell
)
{
return
false
;
}
TabParent
*
openingTab
=
TabParent
:
:
GetFrom
(
parentDocShell
-
>
GetOpener
(
)
)
;
RefPtr
<
ContentParent
>
openerContentParent
;
RefPtr
<
TabParent
>
sameTabGroupAs
;
if
(
openingTab
&
&
openingTab
-
>
Manager
(
)
&
&
openingTab
-
>
Manager
(
)
-
>
IsContentParent
(
)
)
{
openerContentParent
=
openingTab
-
>
Manager
(
)
-
>
AsContentParent
(
)
;
}
if
(
!
OwnerIsMozBrowserFrame
(
)
&
&
!
IsForJSPlugin
(
)
)
{
if
(
parentDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
nsCOMPtr
<
nsIWebNavigation
>
parentWebNav
;
nsCOMPtr
<
nsIURI
>
aboutAddons
;
nsCOMPtr
<
nsIURI
>
parentURI
;
bool
equals
;
if
(
!
(
(
parentWebNav
=
do_GetInterface
(
parentDocShell
)
)
&
&
NS_SUCCEEDED
(
NS_NewURI
(
getter_AddRefs
(
aboutAddons
)
"
about
:
addons
"
)
)
&
&
NS_SUCCEEDED
(
parentWebNav
-
>
GetCurrentURI
(
getter_AddRefs
(
parentURI
)
)
)
&
&
NS_SUCCEEDED
(
parentURI
-
>
EqualsExceptRef
(
aboutAddons
&
equals
)
)
&
&
equals
)
)
{
return
false
;
}
}
if
(
!
mOwnerContent
-
>
IsXULElement
(
)
)
{
return
false
;
}
nsAutoString
value
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
type
value
)
;
if
(
!
value
.
LowerCaseEqualsLiteral
(
"
content
"
)
&
&
!
StringBeginsWith
(
value
NS_LITERAL_STRING
(
"
content
-
"
)
nsCaseInsensitiveStringComparator
(
)
)
)
{
return
false
;
}
Tie
(
openerContentParent
sameTabGroupAs
)
=
GetContentParent
(
mOwnerContent
)
;
}
uint32_t
chromeFlags
=
0
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentOwner
;
if
(
NS_FAILED
(
parentDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentOwner
)
)
)
|
|
!
parentOwner
)
{
return
false
;
}
nsCOMPtr
<
nsIXULWindow
>
window
(
do_GetInterface
(
parentOwner
)
)
;
if
(
window
&
&
NS_FAILED
(
window
-
>
GetChromeFlags
(
&
chromeFlags
)
)
)
{
return
false
;
}
AUTO_PROFILER_LABEL
(
"
nsFrameLoader
:
:
TryRemoteBrowser
:
Create
"
OTHER
)
;
MutableTabContext
context
;
nsresult
rv
=
GetNewTabContext
(
&
context
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
uint64_t
nextTabParentId
=
0
;
if
(
mOwnerContent
)
{
nsAutoString
nextTabParentIdAttr
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
nextTabParentId
nextTabParentIdAttr
)
;
nextTabParentId
=
strtoull
(
NS_ConvertUTF16toUTF8
(
nextTabParentIdAttr
)
.
get
(
)
nullptr
10
)
;
if
(
!
nextTabParentId
&
&
window
)
{
Unused
<
<
window
-
>
GetNextTabParentId
(
&
nextTabParentId
)
;
}
}
nsCOMPtr
<
Element
>
ownerElement
=
mOwnerContent
;
mRemoteBrowser
=
ContentParent
:
:
CreateBrowser
(
context
ownerElement
openerContentParent
sameTabGroupAs
nextTabParentId
)
;
if
(
!
mRemoteBrowser
)
{
return
false
;
}
mRemoteBrowser
-
>
InitRenderFrame
(
)
;
MaybeUpdatePrimaryTabParent
(
eTabParentChanged
)
;
mChildID
=
mRemoteBrowser
-
>
Manager
(
)
-
>
ChildID
(
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
parentDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWin
=
rootItem
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsIDOMChromeWindow
>
rootChromeWin
=
do_QueryInterface
(
rootWin
)
;
if
(
rootChromeWin
)
{
nsCOMPtr
<
nsIBrowserDOMWindow
>
browserDOMWin
;
rootChromeWin
-
>
GetBrowserDOMWindow
(
getter_AddRefs
(
browserDOMWin
)
)
;
mRemoteBrowser
-
>
SetBrowserDOMWindow
(
browserDOMWin
)
;
}
if
(
mOwnerContent
-
>
IsXULElement
(
)
)
{
nsAutoString
frameName
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
frameName
)
;
if
(
nsContentUtils
:
:
IsOverridingWindowName
(
frameName
)
)
{
Unused
<
<
mRemoteBrowser
-
>
SendSetWindowName
(
frameName
)
;
}
}
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
return
true
;
}
mozilla
:
:
dom
:
:
PBrowserParent
*
nsFrameLoader
:
:
GetRemoteBrowser
(
)
const
{
return
mRemoteBrowser
;
}
RenderFrameParent
*
nsFrameLoader
:
:
GetCurrentRenderFrame
(
)
const
{
if
(
mRemoteBrowser
)
{
return
mRemoteBrowser
-
>
GetRenderFrame
(
)
;
}
return
nullptr
;
}
void
nsFrameLoader
:
:
ActivateRemoteFrame
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
ActivateRemoteFrame
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
ActivateRemoteFrame
(
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
Activate
(
)
;
return
NS_OK
;
}
return
NS_ERROR_UNEXPECTED
;
}
void
nsFrameLoader
:
:
DeactivateRemoteFrame
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
DeactivateRemoteFrame
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
DeactivateRemoteFrame
(
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
Deactivate
(
)
;
return
NS_OK
;
}
return
NS_ERROR_UNEXPECTED
;
}
void
nsFrameLoader
:
:
SendCrossProcessMouseEvent
(
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
ErrorResult
&
aRv
)
{
nsresult
rv
=
SendCrossProcessMouseEvent
(
aType
aX
aY
aButton
aClickCount
aModifiers
aIgnoreRootScrollFrame
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
SendCrossProcessMouseEvent
(
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
SendMouseEvent
(
aType
aX
aY
aButton
aClickCount
aModifiers
aIgnoreRootScrollFrame
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
void
nsFrameLoader
:
:
ActivateFrameEvent
(
const
nsAString
&
aType
bool
aCapture
ErrorResult
&
aRv
)
{
nsresult
rv
=
ActivateFrameEvent
(
aType
aCapture
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
ActivateFrameEvent
(
const
nsAString
&
aType
bool
aCapture
)
{
if
(
mRemoteBrowser
)
{
return
mRemoteBrowser
-
>
SendActivateFrameEvent
(
nsString
(
aType
)
aCapture
)
?
NS_OK
:
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_ERROR_FAILURE
;
}
void
nsFrameLoader
:
:
SendCrossProcessKeyEvent
(
const
nsAString
&
aType
int32_t
aKeyCode
int32_t
aCharCode
int32_t
aModifiers
bool
aPreventDefault
ErrorResult
&
aRv
)
{
nsresult
rv
=
SendCrossProcessKeyEvent
(
aType
aKeyCode
aCharCode
aModifiers
aPreventDefault
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
SendCrossProcessKeyEvent
(
const
nsAString
&
aType
int32_t
aKeyCode
int32_t
aCharCode
int32_t
aModifiers
bool
aPreventDefault
)
{
if
(
mRemoteBrowser
)
{
mRemoteBrowser
-
>
SendKeyEvent
(
aType
aKeyCode
aCharCode
aModifiers
aPreventDefault
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
nsresult
nsFrameLoader
:
:
CreateStaticClone
(
nsIFrameLoader
*
aDest
)
{
nsFrameLoader
*
dest
=
static_cast
<
nsFrameLoader
*
>
(
aDest
)
;
dest
-
>
MaybeCreateDocShell
(
)
;
NS_ENSURE_STATE
(
dest
-
>
mDocShell
)
;
nsCOMPtr
<
nsIDocument
>
kungFuDeathGrip
=
dest
-
>
mDocShell
-
>
GetDocument
(
)
;
Unused
<
<
kungFuDeathGrip
;
nsCOMPtr
<
nsIContentViewer
>
viewer
;
dest
-
>
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
NS_ENSURE_STATE
(
viewer
)
;
nsCOMPtr
<
nsIDocShell
>
origDocShell
;
GetDocShell
(
getter_AddRefs
(
origDocShell
)
)
;
NS_ENSURE_STATE
(
origDocShell
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
origDocShell
-
>
GetDocument
(
)
;
NS_ENSURE_STATE
(
doc
)
;
nsCOMPtr
<
nsIDocument
>
clonedDoc
=
doc
-
>
CreateStaticClone
(
dest
-
>
mDocShell
)
;
nsCOMPtr
<
nsIDOMDocument
>
clonedDOMDoc
=
do_QueryInterface
(
clonedDoc
)
;
viewer
-
>
SetDOMDocument
(
clonedDOMDoc
)
;
return
NS_OK
;
}
bool
nsFrameLoader
:
:
DoLoadMessageManagerScript
(
const
nsAString
&
aURL
bool
aRunInGlobalScope
)
{
auto
*
tabParent
=
TabParent
:
:
GetFrom
(
GetRemoteBrowser
(
)
)
;
if
(
tabParent
)
{
return
tabParent
-
>
SendLoadRemoteScript
(
nsString
(
aURL
)
aRunInGlobalScope
)
;
}
RefPtr
<
nsInProcessTabChildGlobal
>
tabChild
=
static_cast
<
nsInProcessTabChildGlobal
*
>
(
GetTabChildGlobalAsEventTarget
(
)
)
;
if
(
tabChild
)
{
tabChild
-
>
LoadFrameScript
(
aURL
aRunInGlobalScope
)
;
}
return
true
;
}
class
nsAsyncMessageToChild
:
public
nsSameProcessAsyncMessageBase
public
Runnable
{
public
:
nsAsyncMessageToChild
(
JS
:
:
RootingContext
*
aRootingCx
JS
:
:
Handle
<
JSObject
*
>
aCpows
nsFrameLoader
*
aFrameLoader
)
:
nsSameProcessAsyncMessageBase
(
aRootingCx
aCpows
)
mozilla
:
:
Runnable
(
"
nsAsyncMessageToChild
"
)
mFrameLoader
(
aFrameLoader
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsInProcessTabChildGlobal
*
tabChild
=
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mFrameLoader
-
>
mChildMessageManager
.
get
(
)
)
;
if
(
tabChild
&
&
tabChild
-
>
GetInnerManager
(
)
&
&
mFrameLoader
-
>
GetExistingDocShell
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
kungFuDeathGrip
(
dom
:
:
RootingCx
(
)
tabChild
-
>
GetGlobal
(
)
)
;
ReceiveMessage
(
static_cast
<
EventTarget
*
>
(
tabChild
)
mFrameLoader
tabChild
-
>
GetInnerManager
(
)
)
;
}
return
NS_OK
;
}
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
}
;
nsresult
nsFrameLoader
:
:
DoSendAsyncMessage
(
JSContext
*
aCx
const
nsAString
&
aMessage
StructuredCloneData
&
aData
JS
:
:
Handle
<
JSObject
*
>
aCpows
nsIPrincipal
*
aPrincipal
)
{
TabParent
*
tabParent
=
mRemoteBrowser
;
if
(
tabParent
)
{
ClonedMessageData
data
;
nsIContentParent
*
cp
=
tabParent
-
>
Manager
(
)
;
if
(
!
BuildClonedMessageDataForParent
(
cp
aData
data
)
)
{
MOZ_CRASH
(
)
;
return
NS_ERROR_DOM_DATA_CLONE_ERR
;
}
InfallibleTArray
<
mozilla
:
:
jsipc
:
:
CpowEntry
>
cpows
;
jsipc
:
:
CPOWManager
*
mgr
=
cp
-
>
GetCPOWManager
(
)
;
if
(
aCpows
&
&
(
!
mgr
|
|
!
mgr
-
>
Wrap
(
aCx
aCpows
&
cpows
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
tabParent
-
>
SendAsyncMessage
(
nsString
(
aMessage
)
cpows
IPC
:
:
Principal
(
aPrincipal
)
data
)
)
{
return
NS_OK
;
}
else
{
return
NS_ERROR_UNEXPECTED
;
}
}
if
(
mChildMessageManager
)
{
JS
:
:
RootingContext
*
rcx
=
JS
:
:
RootingContext
:
:
get
(
aCx
)
;
RefPtr
<
nsAsyncMessageToChild
>
ev
=
new
nsAsyncMessageToChild
(
rcx
aCpows
this
)
;
nsresult
rv
=
ev
-
>
Init
(
aMessage
aData
aPrincipal
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
NS_DispatchToCurrentThread
(
ev
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
rv
;
}
return
NS_ERROR_UNEXPECTED
;
}
already_AddRefed
<
nsIMessageSender
>
nsFrameLoader
:
:
GetMessageManager
(
)
{
nsCOMPtr
<
nsIMessageSender
>
messageManager
;
MOZ_ALWAYS_SUCCEEDS
(
GetMessageManager
(
getter_AddRefs
(
messageManager
)
)
)
;
return
messageManager
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetMessageManager
(
nsIMessageSender
*
*
aManager
)
{
EnsureMessageManager
(
)
;
if
(
mMessageManager
)
{
RefPtr
<
nsFrameMessageManager
>
mm
(
mMessageManager
)
;
mm
.
forget
(
aManager
)
;
return
NS_OK
;
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
EnsureMessageManager
(
)
{
NS_ENSURE_STATE
(
mOwnerContent
)
;
if
(
mMessageManager
)
{
return
NS_OK
;
}
if
(
!
mIsTopLevelContent
&
&
!
OwnerIsMozBrowserFrame
(
)
&
&
!
IsRemoteFrame
(
)
&
&
!
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
forcemessagemanager
nsGkAtoms
:
:
_true
eCaseMatters
)
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDOMChromeWindow
>
chromeWindow
=
do_QueryInterface
(
GetOwnerDoc
(
)
-
>
GetWindow
(
)
)
;
nsCOMPtr
<
nsIMessageBroadcaster
>
parentManager
;
if
(
chromeWindow
)
{
nsAutoString
messagemanagergroup
;
if
(
mOwnerContent
-
>
IsXULElement
(
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
messagemanagergroup
messagemanagergroup
)
)
{
chromeWindow
-
>
GetGroupMessageManager
(
messagemanagergroup
getter_AddRefs
(
parentManager
)
)
;
}
if
(
!
parentManager
)
{
chromeWindow
-
>
GetMessageManager
(
getter_AddRefs
(
parentManager
)
)
;
}
}
else
{
parentManager
=
do_GetService
(
"
mozilla
.
org
/
globalmessagemanager
;
1
"
)
;
}
mMessageManager
=
new
nsFrameMessageManager
(
nullptr
static_cast
<
nsFrameMessageManager
*
>
(
parentManager
.
get
(
)
)
MM_CHROME
)
;
if
(
!
IsRemoteFrame
(
)
)
{
nsresult
rv
=
MaybeCreateDocShell
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
NS_ASSERTION
(
mDocShell
"
MaybeCreateDocShell
succeeded
but
null
mDocShell
"
)
;
if
(
!
mDocShell
)
{
return
NS_ERROR_FAILURE
;
}
mChildMessageManager
=
new
nsInProcessTabChildGlobal
(
mDocShell
mOwnerContent
mMessageManager
)
;
}
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
ReallyLoadFrameScripts
(
)
{
nsresult
rv
=
EnsureMessageManager
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
InitWithCallback
(
this
)
;
}
return
NS_OK
;
}
EventTarget
*
nsFrameLoader
:
:
GetTabChildGlobalAsEventTarget
(
)
{
return
static_cast
<
nsInProcessTabChildGlobal
*
>
(
mChildMessageManager
.
get
(
)
)
;
}
already_AddRefed
<
Element
>
nsFrameLoader
:
:
GetOwnerElement
(
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
mOwnerContent
)
;
return
element
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetOwnerElement
(
nsIDOMElement
*
*
aElement
)
{
nsCOMPtr
<
nsIDOMElement
>
ownerElement
=
do_QueryInterface
(
mOwnerContent
)
;
ownerElement
.
forget
(
aElement
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetChildID
(
uint64_t
*
aChildID
)
{
*
aChildID
=
mChildID
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
SetRemoteBrowser
(
nsITabParent
*
aTabParent
)
{
MOZ_ASSERT
(
!
mRemoteBrowser
)
;
mRemoteFrame
=
true
;
mRemoteBrowser
=
TabParent
:
:
GetFrom
(
aTabParent
)
;
mChildID
=
mRemoteBrowser
?
mRemoteBrowser
-
>
Manager
(
)
-
>
ChildID
(
)
:
0
;
MaybeUpdatePrimaryTabParent
(
eTabParentChanged
)
;
ReallyLoadFrameScripts
(
)
;
InitializeBrowserAPI
(
)
;
ShowRemoteFrame
(
ScreenIntSize
(
0
0
)
)
;
}
void
nsFrameLoader
:
:
SetDetachedSubdocFrame
(
nsIFrame
*
aDetachedFrame
nsIDocument
*
aContainerDoc
)
{
mDetachedSubdocFrame
=
aDetachedFrame
;
mContainerDocWhileDetached
=
aContainerDoc
;
}
nsIFrame
*
nsFrameLoader
:
:
GetDetachedSubdocFrame
(
nsIDocument
*
*
aContainerDoc
)
const
{
NS_IF_ADDREF
(
*
aContainerDoc
=
mContainerDocWhileDetached
)
;
return
mDetachedSubdocFrame
.
GetFrame
(
)
;
}
void
nsFrameLoader
:
:
ApplySandboxFlags
(
uint32_t
sandboxFlags
)
{
if
(
mDocShell
)
{
uint32_t
parentSandboxFlags
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetSandboxFlags
(
)
;
sandboxFlags
|
=
parentSandboxFlags
;
nsAutoString
presentationURL
;
nsContentUtils
:
:
GetPresentationURL
(
mDocShell
presentationURL
)
;
if
(
!
presentationURL
.
IsEmpty
(
)
)
{
sandboxFlags
|
=
SANDBOXED_AUXILIARY_NAVIGATION
;
}
mDocShell
-
>
SetSandboxFlags
(
sandboxFlags
)
;
}
}
void
nsFrameLoader
:
:
AttributeChanged
(
nsIDocument
*
aDocument
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MOZ_ASSERT
(
mObservingOwnerContent
)
;
if
(
aNameSpaceID
!
=
kNameSpaceID_None
|
|
(
aAttribute
!
=
TypeAttrName
(
)
&
&
aAttribute
!
=
nsGkAtoms
:
:
primary
)
)
{
return
;
}
if
(
aElement
!
=
mOwnerContent
)
{
return
;
}
if
(
!
mDocShell
)
{
MaybeUpdatePrimaryTabParent
(
eTabParentChanged
)
;
return
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentItem
;
mDocShell
-
>
GetParent
(
getter_AddRefs
(
parentItem
)
)
;
if
(
!
parentItem
)
{
return
;
}
if
(
parentItem
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
parentItem
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
if
(
!
parentTreeOwner
)
{
return
;
}
bool
is_primary
=
aElement
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
#
ifdef
MOZ_XUL
if
(
!
is_primary
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
pm
-
>
HidePopupsInDocShell
(
mDocShell
)
;
}
#
endif
parentTreeOwner
-
>
ContentShellRemoved
(
mDocShell
)
;
nsAutoString
value
;
aElement
-
>
GetAttr
(
kNameSpaceID_None
TypeAttrName
(
)
value
)
;
if
(
value
.
LowerCaseEqualsLiteral
(
"
content
"
)
|
|
StringBeginsWith
(
value
NS_LITERAL_STRING
(
"
content
-
"
)
nsCaseInsensitiveStringComparator
(
)
)
)
{
parentTreeOwner
-
>
ContentShellAdded
(
mDocShell
is_primary
)
;
}
}
void
nsFrameLoader
:
:
RequestNotifyAfterRemotePaint
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
RequestNotifyAfterRemotePaint
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
RequestNotifyAfterRemotePaint
(
)
{
if
(
mRemoteBrowser
)
{
Unused
<
<
mRemoteBrowser
-
>
SendRequestNotifyAfterRemotePaint
(
)
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
RequestFrameLoaderClose
(
ErrorResult
&
aRv
)
{
nsresult
rv
=
RequestFrameLoaderClose
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
RequestFrameLoaderClose
(
)
{
nsCOMPtr
<
nsIBrowser
>
browser
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
NS_WARN_IF
(
!
browser
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
return
browser
-
>
CloseBrowser
(
)
;
}
void
nsFrameLoader
:
:
RequestUpdatePosition
(
ErrorResult
&
aRv
)
{
if
(
auto
*
tabParent
=
TabParent
:
:
GetFrom
(
GetRemoteBrowser
(
)
)
)
{
nsresult
rv
=
tabParent
-
>
UpdatePosition
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
}
void
nsFrameLoader
:
:
Print
(
uint64_t
aOuterWindowID
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aProgressListener
ErrorResult
&
aRv
)
{
nsresult
rv
=
Print
(
aOuterWindowID
aPrintSettings
aProgressListener
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
Print
(
uint64_t
aOuterWindowID
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aProgressListener
)
{
#
if
defined
(
NS_PRINTING
)
if
(
mRemoteBrowser
)
{
RefPtr
<
embedding
:
:
PrintingParent
>
printingParent
=
mRemoteBrowser
-
>
Manager
(
)
-
>
AsContentParent
(
)
-
>
GetPrintingParent
(
)
;
embedding
:
:
PrintData
printData
;
nsresult
rv
=
printingParent
-
>
SerializeAndEnsureRemotePrintJob
(
aPrintSettings
aProgressListener
nullptr
&
printData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
bool
success
=
mRemoteBrowser
-
>
SendPrint
(
aOuterWindowID
printData
)
;
return
success
?
NS_OK
:
NS_ERROR_FAILURE
;
}
nsGlobalWindowOuter
*
outerWindow
=
nsGlobalWindow
:
:
GetOuterWindowWithId
(
aOuterWindowID
)
;
if
(
NS_WARN_IF
(
!
outerWindow
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIWebBrowserPrint
>
webBrowserPrint
=
do_GetInterface
(
outerWindow
-
>
AsOuter
(
)
)
;
if
(
NS_WARN_IF
(
!
webBrowserPrint
)
)
{
return
NS_ERROR_FAILURE
;
}
return
webBrowserPrint
-
>
Print
(
aPrintSettings
aProgressListener
)
;
#
endif
return
NS_OK
;
}
already_AddRefed
<
nsITabParent
>
nsFrameLoader
:
:
GetTabParent
(
)
{
return
do_AddRef
(
mRemoteBrowser
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetTabParent
(
nsITabParent
*
*
aTabParent
)
{
nsCOMPtr
<
nsITabParent
>
tp
=
mRemoteBrowser
;
tp
.
forget
(
aTabParent
)
;
return
NS_OK
;
}
already_AddRefed
<
nsILoadContext
>
nsFrameLoader
:
:
LoadContext
(
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
;
MOZ_ALWAYS_SUCCEEDS
(
GetLoadContext
(
getter_AddRefs
(
loadContext
)
)
)
;
return
loadContext
.
forget
(
)
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetLoadContext
(
nsILoadContext
*
*
aLoadContext
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
;
if
(
IsRemoteFrame
(
)
&
&
(
mRemoteBrowser
|
|
TryRemoteBrowser
(
)
)
)
{
loadContext
=
mRemoteBrowser
-
>
GetLoadContext
(
)
;
}
else
{
nsCOMPtr
<
nsIDocShell
>
docShell
;
GetDocShell
(
getter_AddRefs
(
docShell
)
)
;
loadContext
=
do_GetInterface
(
docShell
)
;
}
loadContext
.
forget
(
aLoadContext
)
;
return
NS_OK
;
}
void
nsFrameLoader
:
:
InitializeBrowserAPI
(
)
{
if
(
!
OwnerIsMozBrowserFrame
(
)
)
{
return
;
}
if
(
!
IsRemoteFrame
(
)
)
{
nsresult
rv
=
EnsureMessageManager
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
if
(
mMessageManager
)
{
mMessageManager
-
>
LoadFrameScript
(
NS_LITERAL_STRING
(
"
chrome
:
/
/
global
/
content
/
BrowserElementChild
.
js
"
)
true
true
)
;
}
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
browserFrame
)
{
browserFrame
-
>
InitializeBrowserAPI
(
)
;
}
}
void
nsFrameLoader
:
:
DestroyBrowserFrameScripts
(
)
{
if
(
!
OwnerIsMozBrowserFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIMozBrowserFrame
>
browserFrame
=
do_QueryInterface
(
mOwnerContent
)
;
if
(
browserFrame
)
{
browserFrame
-
>
DestroyBrowserFrameScripts
(
)
;
}
}
void
nsFrameLoader
:
:
StartPersistence
(
uint64_t
aOuterWindowID
nsIWebBrowserPersistDocumentReceiver
*
aRecv
ErrorResult
&
aRv
)
{
nsresult
rv
=
StartPersistence
(
aOuterWindowID
aRecv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
NS_IMETHODIMP
nsFrameLoader
:
:
StartPersistence
(
uint64_t
aOuterWindowID
nsIWebBrowserPersistDocumentReceiver
*
aRecv
)
{
if
(
!
aRecv
)
{
return
NS_ERROR_INVALID_POINTER
;
}
if
(
mRemoteBrowser
)
{
return
mRemoteBrowser
-
>
StartPersistence
(
aOuterWindowID
aRecv
)
;
}
nsCOMPtr
<
nsIDocument
>
rootDoc
=
mDocShell
?
mDocShell
-
>
GetDocument
(
)
:
nullptr
;
nsCOMPtr
<
nsIDocument
>
foundDoc
;
if
(
aOuterWindowID
)
{
foundDoc
=
nsContentUtils
:
:
GetSubdocumentWithOuterWindowId
(
rootDoc
aOuterWindowID
)
;
}
else
{
foundDoc
=
rootDoc
;
}
if
(
!
foundDoc
)
{
aRecv
-
>
OnError
(
NS_ERROR_NO_CONTENT
)
;
}
else
{
nsCOMPtr
<
nsIWebBrowserPersistDocument
>
pdoc
=
new
mozilla
:
:
WebBrowserPersistLocalDocument
(
foundDoc
)
;
aRecv
-
>
OnDocumentReady
(
pdoc
)
;
}
return
NS_OK
;
}
void
nsFrameLoader
:
:
MaybeUpdatePrimaryTabParent
(
TabParentChange
aChange
)
{
if
(
mRemoteBrowser
&
&
mOwnerContent
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
;
}
int32_t
parentType
=
docShell
-
>
ItemType
(
)
;
if
(
parentType
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
parentTreeOwner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
parentTreeOwner
)
)
;
if
(
!
parentTreeOwner
)
{
return
;
}
if
(
!
mObservingOwnerContent
)
{
mOwnerContent
-
>
AddMutationObserver
(
this
)
;
mObservingOwnerContent
=
true
;
}
parentTreeOwner
-
>
TabParentRemoved
(
mRemoteBrowser
)
;
if
(
aChange
=
=
eTabParentChanged
)
{
bool
isPrimary
=
mOwnerContent
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
primary
nsGkAtoms
:
:
_true
eIgnoreCase
)
;
parentTreeOwner
-
>
TabParentAdded
(
mRemoteBrowser
isPrimary
)
;
}
}
}
nsresult
nsFrameLoader
:
:
GetNewTabContext
(
MutableTabContext
*
aTabContext
nsIURI
*
aURI
)
{
if
(
IsForJSPlugin
(
)
)
{
return
aTabContext
-
>
SetTabContextForJSPluginFrame
(
mJSPluginID
)
?
NS_OK
:
NS_ERROR_FAILURE
;
}
OriginAttributes
attrs
;
attrs
.
mInIsolatedMozBrowser
=
OwnerIsIsolatedMozBrowserFrame
(
)
;
nsresult
rv
;
attrs
.
mAppId
=
nsIScriptSecurityManager
:
:
NO_APP_ID
;
rv
=
PopulateUserContextIdFromAttribute
(
attrs
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
presentationURLStr
;
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
mozpresentation
presentationURLStr
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
mOwnerContent
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
nsCOMPtr
<
nsILoadContext
>
parentContext
=
do_QueryInterface
(
docShell
)
;
NS_ENSURE_STATE
(
parentContext
)
;
bool
isPrivate
=
parentContext
-
>
UsePrivateBrowsing
(
)
;
attrs
.
SyncAttributesWithPrivateBrowsing
(
isPrivate
)
;
UIStateChangeType
showAccelerators
=
UIStateChangeType_NoChange
;
UIStateChangeType
showFocusRings
=
UIStateChangeType_NoChange
;
nsIDocument
*
doc
=
mOwnerContent
-
>
OwnerDoc
(
)
;
if
(
doc
)
{
nsCOMPtr
<
nsPIWindowRoot
>
root
=
nsContentUtils
:
:
GetWindowRoot
(
doc
)
;
if
(
root
)
{
showAccelerators
=
root
-
>
ShowAccelerators
(
)
?
UIStateChangeType_Set
:
UIStateChangeType_Clear
;
showFocusRings
=
root
-
>
ShowFocusRings
(
)
?
UIStateChangeType_Set
:
UIStateChangeType_Clear
;
}
}
bool
tabContextUpdated
=
aTabContext
-
>
SetTabContext
(
OwnerIsMozBrowserFrame
(
)
mIsPrerendered
showAccelerators
showFocusRings
attrs
presentationURLStr
)
;
NS_ENSURE_STATE
(
tabContextUpdated
)
;
return
NS_OK
;
}
nsresult
nsFrameLoader
:
:
PopulateUserContextIdFromAttribute
(
OriginAttributes
&
aAttr
)
{
if
(
aAttr
.
mUserContextId
=
=
nsIScriptSecurityManager
:
:
DEFAULT_USER_CONTEXT_ID
)
{
nsAutoString
userContextIdStr
;
int32_t
namespaceID
=
mOwnerContent
-
>
GetNameSpaceID
(
)
;
if
(
(
namespaceID
=
=
kNameSpaceID_XUL
)
&
&
mOwnerContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
usercontextid
userContextIdStr
)
&
&
!
userContextIdStr
.
IsEmpty
(
)
)
{
nsresult
rv
;
aAttr
.
mUserContextId
=
userContextIdStr
.
ToInteger
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsFrameLoader
:
:
GetIsDead
(
bool
*
aIsDead
)
{
*
aIsDead
=
mDestroyCalled
;
return
NS_OK
;
}
nsIMessageSender
*
nsFrameLoader
:
:
GetProcessMessageManager
(
)
const
{
return
mRemoteBrowser
?
mRemoteBrowser
-
>
Manager
(
)
-
>
GetMessageManager
(
)
:
nullptr
;
}
;
JSObject
*
nsFrameLoader
:
:
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
JS
:
:
RootedObject
result
(
cx
)
;
FrameLoaderBinding
:
:
Wrap
(
cx
this
this
aGivenProto
&
result
)
;
return
result
;
}
