#
include
"
StorageAccessPermissionRequest
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
StorageAccessPermissionRequest
ContentPermissionRequestBase
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
StorageAccessPermissionRequest
ContentPermissionRequestBase
)
StorageAccessPermissionRequest
:
:
StorageAccessPermissionRequest
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aNodePrincipal
AllowCallback
&
&
aAllowCallback
AllowAnySiteCallback
&
&
aAllowAnySiteCallback
CancelCallback
&
&
aCancelCallback
)
:
ContentPermissionRequestBase
(
aNodePrincipal
false
aWindow
NS_LITERAL_CSTRING
(
"
dom
.
storage_access
"
)
NS_LITERAL_CSTRING
(
"
storage
-
access
"
)
)
mAllowCallback
(
std
:
:
move
(
aAllowCallback
)
)
mAllowAnySiteCallback
(
std
:
:
move
(
aAllowAnySiteCallback
)
)
mCancelCallback
(
std
:
:
move
(
aCancelCallback
)
)
mCallbackCalled
(
false
)
{
mPermissionRequests
.
AppendElement
(
PermissionRequest
(
mType
nsTArray
<
nsString
>
(
)
)
)
;
}
StorageAccessPermissionRequest
:
:
~
StorageAccessPermissionRequest
(
)
{
Cancel
(
)
;
}
NS_IMETHODIMP
StorageAccessPermissionRequest
:
:
Cancel
(
)
{
if
(
!
mCallbackCalled
)
{
mCallbackCalled
=
true
;
mCancelCallback
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
StorageAccessPermissionRequest
:
:
Allow
(
JS
:
:
HandleValue
aChoices
)
{
nsTArray
<
PermissionChoice
>
choices
;
nsresult
rv
=
TranslateChoices
(
aChoices
mPermissionRequests
choices
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
mCallbackCalled
)
{
mCallbackCalled
=
true
;
if
(
choices
.
Length
(
)
=
=
1
&
&
choices
[
0
]
.
choice
(
)
.
EqualsLiteral
(
"
allow
-
on
-
any
-
site
"
)
)
{
mAllowAnySiteCallback
(
)
;
}
else
{
mAllowCallback
(
)
;
}
}
return
NS_OK
;
}
already_AddRefed
<
StorageAccessPermissionRequest
>
StorageAccessPermissionRequest
:
:
Create
(
nsPIDOMWindowInner
*
aWindow
AllowCallback
&
&
aAllowCallback
AllowAnySiteCallback
&
&
aAllowAnySiteCallback
CancelCallback
&
&
aCancelCallback
)
{
if
(
!
aWindow
)
{
return
nullptr
;
}
nsGlobalWindowInner
*
win
=
nsGlobalWindowInner
:
:
Cast
(
aWindow
)
;
if
(
!
win
-
>
GetPrincipal
(
)
)
{
return
nullptr
;
}
RefPtr
<
StorageAccessPermissionRequest
>
request
=
new
StorageAccessPermissionRequest
(
aWindow
win
-
>
GetPrincipal
(
)
std
:
:
move
(
aAllowCallback
)
std
:
:
move
(
aAllowAnySiteCallback
)
std
:
:
move
(
aCancelCallback
)
)
;
return
request
.
forget
(
)
;
}
}
}
