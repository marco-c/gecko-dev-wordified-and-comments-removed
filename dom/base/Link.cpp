#
include
"
Link
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
IHistory
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsISizeOf
.
h
"
#
include
"
nsEscape
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsHTMLDNSPrefetch
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
HTMLLinkElement
.
h
"
namespace
mozilla
:
:
dom
{
Link
:
:
Link
(
Element
*
aElement
)
:
mElement
(
aElement
)
mLinkState
(
eLinkState_NotLink
)
mNeedsRegistration
(
false
)
mRegistered
(
false
)
mHasPendingLinkUpdate
(
false
)
mInDNSPrefetch
(
false
)
mHistory
(
true
)
{
MOZ_ASSERT
(
mElement
"
Must
have
an
element
"
)
;
}
Link
:
:
Link
(
)
:
mElement
(
nullptr
)
mLinkState
(
eLinkState_NotLink
)
mNeedsRegistration
(
false
)
mRegistered
(
false
)
mHasPendingLinkUpdate
(
false
)
mInDNSPrefetch
(
false
)
mHistory
(
false
)
{
}
Link
:
:
~
Link
(
)
{
MOZ_ASSERT
(
!
mElement
|
|
!
mElement
-
>
IsInComposedDoc
(
)
)
;
if
(
IsInDNSPrefetch
(
)
)
{
nsHTMLDNSPrefetch
:
:
LinkDestroyed
(
this
)
;
}
UnregisterFromHistory
(
)
;
}
bool
Link
:
:
ElementHasHref
(
)
const
{
return
mElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
)
|
|
(
!
mElement
-
>
IsHTMLElement
(
)
&
&
mElement
-
>
HasAttr
(
kNameSpaceID_XLink
nsGkAtoms
:
:
href
)
)
;
}
void
Link
:
:
TryDNSPrefetch
(
)
{
MOZ_ASSERT
(
mElement
-
>
IsInComposedDoc
(
)
)
;
if
(
ElementHasHref
(
)
&
&
nsHTMLDNSPrefetch
:
:
IsAllowed
(
mElement
-
>
OwnerDoc
(
)
)
)
{
nsHTMLDNSPrefetch
:
:
PrefetchLow
(
this
)
;
}
}
void
Link
:
:
CancelDNSPrefetch
(
nsWrapperCache
:
:
FlagsType
aDeferredFlag
nsWrapperCache
:
:
FlagsType
aRequestedFlag
)
{
if
(
mElement
-
>
HasFlag
(
aDeferredFlag
)
)
{
mElement
-
>
UnsetFlags
(
aDeferredFlag
)
;
}
else
if
(
mElement
-
>
HasFlag
(
aRequestedFlag
)
)
{
mElement
-
>
UnsetFlags
(
aRequestedFlag
)
;
nsHTMLDNSPrefetch
:
:
CancelPrefetchLow
(
this
NS_ERROR_ABORT
)
;
}
}
void
Link
:
:
VisitedQueryFinished
(
bool
aVisited
)
{
MOZ_ASSERT
(
mRegistered
"
Setting
the
link
state
of
an
unregistered
Link
!
"
)
;
MOZ_ASSERT
(
mLinkState
=
=
eLinkState_Unvisited
"
Why
would
we
want
to
know
our
visited
state
otherwise
?
"
)
;
auto
newState
=
aVisited
?
eLinkState_Visited
:
eLinkState_Unvisited
;
mLinkState
=
newState
;
if
(
aVisited
)
{
mRegistered
=
false
;
}
MOZ_ASSERT
(
LinkState
(
)
=
=
NS_EVENT_STATE_VISITED
|
|
LinkState
(
)
=
=
NS_EVENT_STATE_UNVISITED
"
Unexpected
state
obtained
from
LinkState
(
)
!
"
)
;
mElement
-
>
UpdateState
(
true
)
;
if
(
StaticPrefs
:
:
layout_css_always_repaint_on_unvisited
(
)
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
GetElement
(
)
RestyleHint
:
:
RestyleSubtree
(
)
nsChangeHint_RepaintFrame
)
;
}
}
EventStates
Link
:
:
LinkState
(
)
const
{
Link
*
self
=
const_cast
<
Link
*
>
(
this
)
;
Element
*
element
=
self
-
>
mElement
;
if
(
!
mRegistered
&
&
mNeedsRegistration
&
&
element
-
>
IsInComposedDoc
(
)
&
&
!
HasPendingLinkUpdate
(
)
)
{
self
-
>
mNeedsRegistration
=
false
;
nsCOMPtr
<
nsIURI
>
hrefURI
(
GetURI
(
)
)
;
self
-
>
mLinkState
=
eLinkState_Unvisited
;
if
(
mHistory
&
&
hrefURI
)
{
if
(
nsCOMPtr
<
IHistory
>
history
=
services
:
:
GetHistory
(
)
)
{
self
-
>
mRegistered
=
true
;
history
-
>
RegisterVisitedCallback
(
hrefURI
self
)
;
element
-
>
GetComposedDoc
(
)
-
>
AddStyleRelevantLink
(
self
)
;
}
}
}
if
(
mLinkState
=
=
eLinkState_Visited
)
{
return
NS_EVENT_STATE_VISITED
;
}
if
(
mLinkState
=
=
eLinkState_Unvisited
)
{
return
NS_EVENT_STATE_UNVISITED
;
}
return
EventStates
(
)
;
}
nsIURI
*
Link
:
:
GetURI
(
)
const
{
if
(
mCachedURI
)
{
return
mCachedURI
;
}
Link
*
self
=
const_cast
<
Link
*
>
(
this
)
;
Element
*
element
=
self
-
>
mElement
;
mCachedURI
=
element
-
>
GetHrefURI
(
)
;
return
mCachedURI
;
}
void
Link
:
:
SetProtocol
(
const
nsAString
&
aProtocol
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsAString
:
:
const_iterator
start
end
;
aProtocol
.
BeginReading
(
start
)
;
aProtocol
.
EndReading
(
end
)
;
nsAString
:
:
const_iterator
iter
(
start
)
;
(
void
)
FindCharInReadable
(
'
:
'
iter
end
)
;
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetScheme
(
NS_ConvertUTF16toUTF8
(
Substring
(
start
iter
)
)
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetPassword
(
const
nsAString
&
aPassword
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetPassword
(
NS_ConvertUTF16toUTF8
(
aPassword
)
)
.
Finalize
(
uri
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
SetHrefAttribute
(
uri
)
;
}
}
void
Link
:
:
SetUsername
(
const
nsAString
&
aUsername
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetUsername
(
NS_ConvertUTF16toUTF8
(
aUsername
)
)
.
Finalize
(
uri
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
SetHrefAttribute
(
uri
)
;
}
}
void
Link
:
:
SetHost
(
const
nsAString
&
aHost
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetHostPort
(
NS_ConvertUTF16toUTF8
(
aHost
)
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetHostname
(
const
nsAString
&
aHostname
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetHost
(
NS_ConvertUTF16toUTF8
(
aHostname
)
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetPathname
(
const
nsAString
&
aPathname
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
nsCOMPtr
<
nsIURL
>
url
(
do_QueryInterface
(
uri
)
)
;
if
(
!
url
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetFilePath
(
NS_ConvertUTF16toUTF8
(
aPathname
)
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetSearch
(
const
nsAString
&
aSearch
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
nsCOMPtr
<
nsIURL
>
url
(
do_QueryInterface
(
uri
)
)
;
if
(
!
url
)
{
return
;
}
auto
encoding
=
mElement
-
>
OwnerDoc
(
)
-
>
GetDocumentCharacterSet
(
)
;
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetQueryWithEncoding
(
NS_ConvertUTF16toUTF8
(
aSearch
)
encoding
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetPort
(
const
nsAString
&
aPort
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
;
nsAutoString
portStr
(
aPort
)
;
int32_t
port
=
-
1
;
if
(
!
aPort
.
IsEmpty
(
)
)
{
port
=
portStr
.
ToInteger
(
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
rv
=
NS_MutateURI
(
uri
)
.
SetPort
(
port
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
SetHash
(
const
nsAString
&
aHash
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetRef
(
NS_ConvertUTF16toUTF8
(
aHash
)
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
SetHrefAttribute
(
uri
)
;
}
void
Link
:
:
GetOrigin
(
nsAString
&
aOrigin
)
{
aOrigin
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsString
origin
;
nsContentUtils
:
:
GetUTFOrigin
(
uri
origin
)
;
aOrigin
.
Assign
(
origin
)
;
}
void
Link
:
:
GetProtocol
(
nsAString
&
_protocol
)
{
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
_protocol
.
AssignLiteral
(
"
http
"
)
;
}
else
{
nsAutoCString
scheme
;
(
void
)
uri
-
>
GetScheme
(
scheme
)
;
CopyASCIItoUTF16
(
scheme
_protocol
)
;
}
_protocol
.
Append
(
char16_t
(
'
:
'
)
)
;
}
void
Link
:
:
GetUsername
(
nsAString
&
aUsername
)
{
aUsername
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsAutoCString
username
;
uri
-
>
GetUsername
(
username
)
;
CopyASCIItoUTF16
(
username
aUsername
)
;
}
void
Link
:
:
GetPassword
(
nsAString
&
aPassword
)
{
aPassword
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsAutoCString
password
;
uri
-
>
GetPassword
(
password
)
;
CopyASCIItoUTF16
(
password
aPassword
)
;
}
void
Link
:
:
GetHost
(
nsAString
&
_host
)
{
_host
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsAutoCString
hostport
;
nsresult
rv
=
uri
-
>
GetHostPort
(
hostport
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF8toUTF16
(
hostport
_host
)
;
}
}
void
Link
:
:
GetHostname
(
nsAString
&
_hostname
)
{
_hostname
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
uri
_hostname
)
;
}
void
Link
:
:
GetPathname
(
nsAString
&
_pathname
)
{
_pathname
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
nsCOMPtr
<
nsIURL
>
url
(
do_QueryInterface
(
uri
)
)
;
if
(
!
url
)
{
return
;
}
nsAutoCString
file
;
nsresult
rv
=
url
-
>
GetFilePath
(
file
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF8toUTF16
(
file
_pathname
)
;
}
}
void
Link
:
:
GetSearch
(
nsAString
&
_search
)
{
_search
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
nsCOMPtr
<
nsIURL
>
url
(
do_QueryInterface
(
uri
)
)
;
if
(
!
url
)
{
return
;
}
nsAutoCString
search
;
nsresult
rv
=
url
-
>
GetQuery
(
search
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
search
.
IsEmpty
(
)
)
{
_search
.
Assign
(
u
'
?
'
)
;
AppendUTF8toUTF16
(
search
_search
)
;
}
}
void
Link
:
:
GetPort
(
nsAString
&
_port
)
{
_port
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
int32_t
port
;
nsresult
rv
=
uri
-
>
GetPort
(
&
port
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
port
!
=
-
1
)
{
nsAutoString
portStr
;
portStr
.
AppendInt
(
port
10
)
;
_port
.
Assign
(
portStr
)
;
}
}
void
Link
:
:
GetHash
(
nsAString
&
_hash
)
{
_hash
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
(
GetURI
(
)
)
;
if
(
!
uri
)
{
return
;
}
nsAutoCString
ref
;
nsresult
rv
=
uri
-
>
GetRef
(
ref
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
ref
.
IsEmpty
(
)
)
{
_hash
.
Assign
(
char16_t
(
'
#
'
)
)
;
AppendUTF8toUTF16
(
ref
_hash
)
;
}
}
void
Link
:
:
ResetLinkState
(
bool
aNotify
bool
aHasHref
)
{
nsLinkState
defaultState
;
if
(
aHasHref
)
{
defaultState
=
eLinkState_Unvisited
;
}
else
{
defaultState
=
eLinkState_NotLink
;
}
if
(
!
mNeedsRegistration
&
&
mLinkState
!
=
eLinkState_NotLink
)
{
Document
*
doc
=
mElement
-
>
GetComposedDoc
(
)
;
if
(
doc
&
&
(
mRegistered
|
|
mLinkState
=
=
eLinkState_Visited
)
)
{
doc
-
>
ForgetLink
(
this
)
;
}
}
mNeedsRegistration
=
aHasHref
&
&
!
mElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
link
)
;
UnregisterFromHistory
(
)
;
mCachedURI
=
nullptr
;
mLinkState
=
defaultState
;
if
(
aNotify
)
{
mElement
-
>
UpdateState
(
aNotify
)
;
}
else
{
if
(
mLinkState
=
=
eLinkState_Unvisited
)
{
mElement
-
>
UpdateLinkState
(
NS_EVENT_STATE_UNVISITED
)
;
}
else
{
mElement
-
>
UpdateLinkState
(
EventStates
(
)
)
;
}
}
}
void
Link
:
:
UnregisterFromHistory
(
)
{
if
(
!
mRegistered
)
{
return
;
}
if
(
mHistory
&
&
mCachedURI
)
{
if
(
nsCOMPtr
<
IHistory
>
history
=
services
:
:
GetHistory
(
)
)
{
history
-
>
UnregisterVisitedCallback
(
mCachedURI
this
)
;
mRegistered
=
false
;
}
}
}
void
Link
:
:
SetHrefAttribute
(
nsIURI
*
aURI
)
{
NS_ASSERTION
(
aURI
"
Null
URI
is
illegal
!
"
)
;
nsAutoCString
href
;
(
void
)
aURI
-
>
GetSpec
(
href
)
;
(
void
)
mElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
NS_ConvertUTF8toUTF16
(
href
)
true
)
;
}
size_t
Link
:
:
SizeOfExcludingThis
(
mozilla
:
:
SizeOfState
&
aState
)
const
{
size_t
n
=
0
;
if
(
mCachedURI
)
{
nsCOMPtr
<
nsISizeOf
>
iface
=
do_QueryInterface
(
mCachedURI
)
;
if
(
iface
)
{
n
+
=
iface
-
>
SizeOfIncludingThis
(
aState
.
mMallocSizeOf
)
;
}
}
return
n
;
}
}
