#
ifndef
mozilla_ConnectedAncestorTracker_h
#
define
mozilla_ConnectedAncestorTracker_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIContent
.
h
"
namespace
mozilla
{
struct
MOZ_STACK_CLASS
AutoConnectedAncestorTracker
final
{
explicit
AutoConnectedAncestorTracker
(
nsIContent
&
aContent
)
:
mContent
(
aContent
)
mPresShell
(
aContent
.
IsInComposedDoc
(
)
?
aContent
.
OwnerDoc
(
)
-
>
GetPresShell
(
)
:
nullptr
)
{
if
(
mPresShell
)
{
mPresShell
-
>
AddConnectedAncestorTracker
(
*
this
)
;
}
}
~
AutoConnectedAncestorTracker
(
)
{
if
(
mPresShell
)
{
mPresShell
-
>
RemoveConnectedAncestorTracker
(
*
this
)
;
}
}
[
[
nodiscard
]
]
bool
ContentWasRemoved
(
)
const
{
return
mPresShell
&
&
mConnectedAncestor
;
}
[
[
nodiscard
]
]
dom
:
:
Element
*
GetConnectedElement
(
)
const
{
return
ContentWasRemoved
(
)
?
mConnectedAncestor
-
>
GetAsElementOrParentElement
(
)
:
mContent
-
>
GetAsElementOrParentElement
(
)
;
}
[
[
nodiscard
]
]
nsIContent
*
GetConnectedContent
(
)
const
{
return
ContentWasRemoved
(
)
?
nsIContent
:
:
FromNode
(
mConnectedAncestor
)
:
mContent
.
get
(
)
;
}
[
[
nodiscard
]
]
nsINode
&
ConnectedNode
(
)
const
{
return
ContentWasRemoved
(
)
?
*
mConnectedAncestor
:
mContent
.
ref
(
)
;
}
const
OwningNonNull
<
nsIContent
>
mContent
;
nsCOMPtr
<
nsINode
>
mConnectedAncestor
;
const
RefPtr
<
PresShell
>
mPresShell
;
AutoConnectedAncestorTracker
*
mPreviousTracker
=
nullptr
;
}
;
}
#
endif
