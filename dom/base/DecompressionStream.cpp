#
include
"
mozilla
/
dom
/
DecompressionStream
.
h
"
#
include
"
CompressionStreamHelper
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
BufferSourceBinding
.
h
"
#
include
"
mozilla
/
dom
/
BufferSourceBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
DecompressionStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
#
include
"
mozilla
/
dom
/
TextDecoderStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
mozilla
/
dom
/
WritableStream
.
h
"
#
include
"
zstd
/
zstd
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
compression
;
class
DecompressionStreamAlgorithms
:
public
TransformerAlgorithmsWrapper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DecompressionStreamAlgorithms
TransformerAlgorithmsBase
)
MOZ_CAN_RUN_SCRIPT
void
TransformCallbackImpl
(
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
RootedUnion
<
OwningBufferSource
>
bufferSource
(
cx
)
;
if
(
!
bufferSource
.
Init
(
cx
aChunk
)
)
{
aRv
.
MightThrowJSException
(
)
;
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
;
}
ProcessTypedArraysFixed
(
bufferSource
[
&
]
(
const
Span
<
uint8_t
>
&
aData
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY
{
DecompressAndEnqueue
(
cx
aData
Flush
:
:
No
aController
aRv
)
;
}
)
;
}
MOZ_CAN_RUN_SCRIPT
void
FlushCallbackImpl
(
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
DecompressAndEnqueue
(
cx
Span
<
const
uint8_t
>
(
)
Flush
:
:
Yes
aController
aRv
)
;
}
protected
:
static
const
uint16_t
kBufferSize
=
16384
;
~
DecompressionStreamAlgorithms
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
virtual
void
DecompressAndEnqueue
(
JSContext
*
aCx
Span
<
const
uint8_t
>
aInput
Flush
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
=
0
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
DecompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_IMPL_ADDREF_INHERITED
(
DecompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_IMPL_RELEASE_INHERITED
(
DecompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DecompressionStreamAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
TransformerAlgorithmsBase
)
class
ZLibDecompressionStreamAlgorithms
:
public
DecompressionStreamAlgorithms
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ZLibDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
explicit
ZLibDecompressionStreamAlgorithms
(
CompressionFormat
format
)
{
int8_t
err
=
inflateInit2
(
&
mZStream
ZLibWindowBits
(
format
)
)
;
if
(
err
=
=
Z_MEM_ERROR
)
{
MOZ_CRASH
(
"
Out
of
memory
"
)
;
}
MOZ_ASSERT
(
err
=
=
Z_OK
)
;
}
private
:
MOZ_CAN_RUN_SCRIPT
void
DecompressAndEnqueue
(
JSContext
*
aCx
Span
<
const
uint8_t
>
aInput
Flush
aFlush
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
MOZ_ASSERT_IF
(
aFlush
=
=
Flush
:
:
Yes
!
aInput
.
Length
(
)
)
;
mZStream
.
avail_in
=
aInput
.
Length
(
)
;
mZStream
.
next_in
=
const_cast
<
uint8_t
*
>
(
aInput
.
Elements
(
)
)
;
JS
:
:
RootedVector
<
JSObject
*
>
array
(
aCx
)
;
do
{
UniquePtr
<
uint8_t
[
]
JS
:
:
FreePolicy
>
buffer
(
static_cast
<
uint8_t
*
>
(
JS_malloc
(
aCx
kBufferSize
)
)
)
;
if
(
!
buffer
)
{
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
mZStream
.
avail_out
=
kBufferSize
;
mZStream
.
next_out
=
buffer
.
get
(
)
;
int8_t
err
=
inflate
(
&
mZStream
intoZLibFlush
(
aFlush
)
)
;
switch
(
err
)
{
case
Z_DATA_ERROR
:
aRv
.
ThrowTypeError
(
"
The
input
data
is
corrupted
:
"
_ns
+
nsDependentCString
(
mZStream
.
msg
)
)
;
return
;
case
Z_MEM_ERROR
:
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
case
Z_NEED_DICT
:
aRv
.
ThrowTypeError
(
"
The
stream
needs
a
preset
dictionary
but
such
setup
is
"
"
unsupported
"
)
;
return
;
case
Z_STREAM_END
:
if
(
mZStream
.
avail_in
>
0
)
{
aRv
.
ThrowTypeError
(
"
Unexpected
input
after
the
end
of
stream
"
)
;
return
;
}
mObservedStreamEnd
=
true
;
break
;
case
Z_OK
:
case
Z_BUF_ERROR
:
break
;
case
Z_STREAM_ERROR
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
decompression
error
code
"
)
;
aRv
.
ThrowTypeError
(
"
Unexpected
decompression
error
"
)
;
return
;
}
MOZ_ASSERT
(
!
mZStream
.
avail_in
|
|
!
mZStream
.
avail_out
)
;
size_t
written
=
kBufferSize
-
mZStream
.
avail_out
;
if
(
!
written
)
{
break
;
}
JS
:
:
Rooted
<
JSObject
*
>
view
(
aCx
nsJSUtils
:
:
MoveBufferAsUint8Array
(
aCx
written
std
:
:
move
(
buffer
)
)
)
;
if
(
!
view
|
|
!
array
.
append
(
view
)
)
{
JS_ClearPendingException
(
aCx
)
;
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
}
while
(
mZStream
.
avail_out
=
=
0
&
&
!
mObservedStreamEnd
)
;
if
(
aFlush
=
=
Flush
:
:
Yes
&
&
!
mObservedStreamEnd
)
{
aRv
.
ThrowTypeError
(
"
The
input
is
ended
without
reaching
the
stream
end
"
)
;
return
;
}
for
(
const
auto
&
view
:
array
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
JS
:
:
ObjectValue
(
*
view
)
)
;
aController
.
Enqueue
(
aCx
value
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
}
~
ZLibDecompressionStreamAlgorithms
(
)
override
{
inflateEnd
(
&
mZStream
)
;
}
z_stream
mZStream
=
{
}
;
bool
mObservedStreamEnd
=
false
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ZLibDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_IMPL_ADDREF_INHERITED
(
ZLibDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_IMPL_RELEASE_INHERITED
(
ZLibDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ZLibDecompressionStreamAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
DecompressionStreamAlgorithms
)
class
ZstdDecompressionStreamAlgorithms
:
public
DecompressionStreamAlgorithms
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ZstdDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
ZstdDecompressionStreamAlgorithms
(
)
{
mDStream
=
ZSTD_createDStream
(
)
;
if
(
!
mDStream
)
{
NS_ABORT_OOM
(
0
)
;
}
static
const
uint8_t
WINDOW_LOG_MAX
=
23
;
ZSTD_DCtx_setParameter
(
mDStream
ZSTD_d_windowLogMax
WINDOW_LOG_MAX
)
;
}
private
:
MOZ_CAN_RUN_SCRIPT
void
DecompressAndEnqueue
(
JSContext
*
aCx
Span
<
const
uint8_t
>
aInput
Flush
aFlush
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
MOZ_ASSERT_IF
(
aFlush
=
=
Flush
:
:
Yes
!
aInput
.
Length
(
)
)
;
if
(
mObservedStreamEnd
&
&
aInput
.
Length
(
)
>
0
)
{
aRv
.
ThrowTypeError
(
"
Unexpected
input
after
the
end
of
stream
"
)
;
return
;
}
ZSTD_inBuffer
inBuffer
=
{
const_cast
<
uint8_t
*
>
(
aInput
.
Elements
(
)
)
aInput
.
Length
(
)
0
}
;
JS
:
:
RootedVector
<
JSObject
*
>
array
(
aCx
)
;
while
(
inBuffer
.
pos
<
inBuffer
.
size
)
{
UniquePtr
<
uint8_t
[
]
JS
:
:
FreePolicy
>
buffer
(
static_cast
<
uint8_t
*
>
(
JS_malloc
(
aCx
kBufferSize
)
)
)
;
if
(
!
buffer
)
{
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
ZSTD_outBuffer
outBuffer
=
{
buffer
.
get
(
)
kBufferSize
0
}
;
size_t
rv
=
ZSTD_decompressStream
(
mDStream
&
outBuffer
&
inBuffer
)
;
if
(
ZSTD_isError
(
rv
)
)
{
aRv
.
ThrowTypeError
(
"
zstd
decompression
error
:
"
_ns
+
nsDependentCString
(
ZSTD_getErrorName
(
rv
)
)
)
;
return
;
}
if
(
rv
=
=
0
)
{
mObservedStreamEnd
=
true
;
if
(
inBuffer
.
pos
<
inBuffer
.
size
)
{
aRv
.
ThrowTypeError
(
"
Unexpected
input
after
the
end
of
stream
"
)
;
return
;
}
}
size_t
written
=
outBuffer
.
pos
;
if
(
written
>
0
)
{
JS
:
:
Rooted
<
JSObject
*
>
view
(
aCx
nsJSUtils
:
:
MoveBufferAsUint8Array
(
aCx
written
std
:
:
move
(
buffer
)
)
)
;
if
(
!
view
|
|
!
array
.
append
(
view
)
)
{
JS_ClearPendingException
(
aCx
)
;
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
}
}
if
(
aFlush
=
=
Flush
:
:
Yes
&
&
!
mObservedStreamEnd
)
{
aRv
.
ThrowTypeError
(
"
The
input
is
ended
without
reaching
the
stream
end
"
)
;
return
;
}
for
(
const
auto
&
view
:
array
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
JS
:
:
ObjectValue
(
*
view
)
)
;
aController
.
Enqueue
(
aCx
value
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
}
~
ZstdDecompressionStreamAlgorithms
(
)
override
{
if
(
mDStream
)
{
ZSTD_freeDStream
(
mDStream
)
;
mDStream
=
nullptr
;
}
}
ZSTD_DStream
*
mDStream
=
nullptr
;
bool
mObservedStreamEnd
=
false
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
ZstdDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_IMPL_ADDREF_INHERITED
(
ZstdDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_IMPL_RELEASE_INHERITED
(
ZstdDecompressionStreamAlgorithms
DecompressionStreamAlgorithms
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ZstdDecompressionStreamAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
DecompressionStreamAlgorithms
)
static
already_AddRefed
<
DecompressionStreamAlgorithms
>
CreateDecompressionStreamAlgorithms
(
CompressionFormat
aFormat
)
{
if
(
aFormat
=
=
CompressionFormat
:
:
Zstd
)
{
RefPtr
<
DecompressionStreamAlgorithms
>
zstdAlgos
=
new
ZstdDecompressionStreamAlgorithms
(
)
;
return
zstdAlgos
.
forget
(
)
;
}
RefPtr
<
DecompressionStreamAlgorithms
>
zlibAlgos
=
new
ZLibDecompressionStreamAlgorithms
(
aFormat
)
;
return
zlibAlgos
.
forget
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
DecompressionStream
mGlobal
mStream
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DecompressionStream
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DecompressionStream
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DecompressionStream
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
DecompressionStream
:
:
DecompressionStream
(
nsISupports
*
aGlobal
TransformStream
&
aStream
)
:
mGlobal
(
aGlobal
)
mStream
(
&
aStream
)
{
}
DecompressionStream
:
:
~
DecompressionStream
(
)
=
default
;
JSObject
*
DecompressionStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
DecompressionStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
DecompressionStream
>
DecompressionStream
:
:
Constructor
(
const
GlobalObject
&
aGlobal
CompressionFormat
aFormat
ErrorResult
&
aRv
)
{
if
(
aFormat
=
=
CompressionFormat
:
:
Zstd
&
&
aGlobal
.
CallerType
(
)
!
=
CallerType
:
:
System
&
&
!
StaticPrefs
:
:
dom_compression_streams_zstd_enabled
(
)
)
{
aRv
.
ThrowTypeError
(
"
'
zstd
'
(
value
of
argument
1
)
is
not
a
valid
value
for
enumeration
"
"
CompressionFormat
.
"
)
;
return
nullptr
;
}
RefPtr
<
DecompressionStreamAlgorithms
>
algorithms
=
CreateDecompressionStreamAlgorithms
(
aFormat
)
;
RefPtr
<
TransformStream
>
stream
=
TransformStream
:
:
CreateGeneric
(
aGlobal
*
algorithms
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
do_AddRef
(
new
DecompressionStream
(
aGlobal
.
GetAsSupports
(
)
*
stream
)
)
;
}
already_AddRefed
<
ReadableStream
>
DecompressionStream
:
:
Readable
(
)
const
{
return
do_AddRef
(
mStream
-
>
Readable
(
)
)
;
}
;
already_AddRefed
<
WritableStream
>
DecompressionStream
:
:
Writable
(
)
const
{
return
do_AddRef
(
mStream
-
>
Writable
(
)
)
;
}
;
}
