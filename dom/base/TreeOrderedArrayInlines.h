#
ifndef
mozilla_dom_TreeOrderedArrayInlines_h
#
define
mozilla_dom_TreeOrderedArrayInlines_h
#
include
"
mozilla
/
dom
/
TreeOrderedArray
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
<
type_traits
>
namespace
mozilla
:
:
dom
{
template
<
typename
Node
>
size_t
TreeOrderedArray
<
Node
>
:
:
Insert
(
Node
&
aNode
nsINode
*
aCommonAncestor
)
{
static_assert
(
std
:
:
is_base_of_v
<
nsINode
Node
>
"
Should
be
a
node
"
)
;
if
(
mList
.
IsEmpty
(
)
)
{
mList
.
AppendElement
(
&
aNode
)
;
return
0
;
}
struct
PositionComparator
{
Node
&
mNode
;
nsINode
*
mCommonAncestor
;
PositionComparator
(
Node
&
aNode
nsINode
*
aCommonAncestor
)
:
mNode
(
aNode
)
mCommonAncestor
(
aCommonAncestor
)
{
}
int
operator
(
)
(
void
*
aNode
)
const
{
auto
*
curNode
=
static_cast
<
Node
*
>
(
aNode
)
;
MOZ_DIAGNOSTIC_ASSERT
(
curNode
!
=
&
mNode
"
Tried
to
insert
a
node
already
in
the
list
"
)
;
return
nsContentUtils
:
:
CompareTreePosition
<
TreeKind
:
:
DOM
>
(
&
mNode
curNode
mCommonAncestor
)
;
}
}
;
size_t
idx
;
BinarySearchIf
(
mList
0
mList
.
Length
(
)
PositionComparator
(
aNode
aCommonAncestor
)
&
idx
)
;
mList
.
InsertElementAt
(
idx
&
aNode
)
;
return
idx
;
}
}
#
endif
