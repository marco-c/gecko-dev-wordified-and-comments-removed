#
include
"
mozilla
/
dom
/
MaybeCrossOriginObject
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
DOMJSProxyHandler
.
h
"
#
include
"
mozilla
/
dom
/
RemoteObjectProxy
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
AccessCheck
.
h
"
#
include
"
nsContentUtils
.
h
"
#
ifdef
DEBUG
static
bool
IsLocation
(
JSObject
*
obj
)
{
return
strcmp
(
js
:
:
GetObjectClass
(
obj
)
-
>
name
"
Location
"
)
=
=
0
;
}
#
endif
namespace
mozilla
{
namespace
dom
{
bool
MaybeCrossOriginObjectMixins
:
:
IsPlatformObjectSameOrigin
(
JSContext
*
cx
JSObject
*
obj
)
{
MOZ_ASSERT
(
!
js
:
:
IsCrossCompartmentWrapper
(
obj
)
)
;
MOZ_ASSERT
(
js
:
:
GetNonCCWObjectRealm
(
obj
)
=
=
js
:
:
GetNonCCWObjectRealm
(
js
:
:
UncheckedUnwrap
(
obj
true
)
)
"
WindowProxy
not
same
-
Realm
as
Window
?
"
)
;
BasePrincipal
*
subjectPrincipal
=
BasePrincipal
:
:
Cast
(
nsContentUtils
:
:
SubjectPrincipal
(
cx
)
)
;
BasePrincipal
*
objectPrincipal
=
BasePrincipal
:
:
Cast
(
nsContentUtils
:
:
ObjectPrincipal
(
obj
)
)
;
MOZ_ASSERT
(
subjectPrincipal
-
>
FastEqualsConsideringDomain
(
objectPrincipal
)
=
=
subjectPrincipal
-
>
FastSubsumesConsideringDomain
(
objectPrincipal
)
"
Why
are
we
in
an
asymmetric
case
here
?
"
)
;
if
(
OriginAttributes
:
:
IsRestrictOpenerAccessForFPI
(
)
)
{
return
subjectPrincipal
-
>
FastEqualsConsideringDomain
(
objectPrincipal
)
;
}
return
subjectPrincipal
-
>
FastSubsumesConsideringDomainIgnoringFPD
(
objectPrincipal
)
&
&
objectPrincipal
-
>
FastSubsumesConsideringDomainIgnoringFPD
(
subjectPrincipal
)
;
}
bool
MaybeCrossOriginObjectMixins
:
:
CrossOriginGetOwnPropertyHelper
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
{
MOZ_ASSERT
(
!
IsPlatformObjectSameOrigin
(
cx
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Why
did
we
get
called
?
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
holder
(
cx
)
;
if
(
!
EnsureHolder
(
cx
obj
&
holder
)
)
{
return
false
;
}
if
(
!
JS_GetOwnPropertyDescriptorById
(
cx
holder
id
desc
)
)
{
return
false
;
}
if
(
desc
.
object
(
)
)
{
desc
.
object
(
)
.
set
(
obj
)
;
}
return
true
;
}
bool
MaybeCrossOriginObjectMixins
:
:
CrossOriginPropertyFallback
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
{
MOZ_ASSERT
(
!
desc
.
object
(
)
"
Why
are
we
being
called
?
"
)
;
if
(
xpc
:
:
IsCrossOriginWhitelistedProp
(
cx
id
)
)
{
desc
.
setDataDescriptor
(
JS
:
:
UndefinedHandleValue
JSPROP_READONLY
)
;
desc
.
object
(
)
.
set
(
obj
)
;
return
true
;
}
return
ReportCrossOriginDenial
(
cx
id
NS_LITERAL_CSTRING
(
"
access
"
)
)
;
}
bool
MaybeCrossOriginObjectMixins
:
:
CrossOriginGet
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
{
MOZ_ASSERT
(
js
:
:
IsProxy
(
obj
)
"
How
did
we
get
a
bogus
object
here
?
"
)
;
MOZ_ASSERT
(
js
:
:
IsWindowProxy
(
obj
)
|
|
IsLocation
(
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Unexpected
proxy
"
)
;
MOZ_ASSERT
(
!
IsPlatformObjectSameOrigin
(
cx
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Why
did
we
get
called
?
"
)
;
js
:
:
AssertSameCompartment
(
cx
receiver
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyDescriptor
>
desc
(
cx
)
;
if
(
!
js
:
:
GetProxyHandler
(
obj
)
-
>
getOwnPropertyDescriptor
(
cx
obj
id
&
desc
)
)
{
return
false
;
}
desc
.
assertCompleteIfFound
(
)
;
MOZ_ASSERT
(
desc
.
object
(
)
"
Callees
should
throw
in
all
cases
when
they
are
not
finding
a
"
"
property
decriptor
"
)
;
if
(
desc
.
isDataDescriptor
(
)
)
{
vp
.
set
(
desc
.
value
(
)
)
;
return
true
;
}
MOZ_ASSERT
(
desc
.
isAccessorDescriptor
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
getter
(
cx
)
;
if
(
!
desc
.
hasGetterObject
(
)
|
|
!
(
getter
=
desc
.
getterObject
(
)
)
)
{
return
ReportCrossOriginDenial
(
cx
id
NS_LITERAL_CSTRING
(
"
get
"
)
)
;
}
return
JS
:
:
Call
(
cx
receiver
getter
JS
:
:
HandleValueArray
:
:
empty
(
)
vp
)
;
}
bool
MaybeCrossOriginObjectMixins
:
:
CrossOriginSet
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
ObjectOpResult
&
result
)
{
MOZ_ASSERT
(
js
:
:
IsProxy
(
obj
)
"
How
did
we
get
a
bogus
object
here
?
"
)
;
MOZ_ASSERT
(
js
:
:
IsWindowProxy
(
obj
)
|
|
IsLocation
(
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Unexpected
proxy
"
)
;
MOZ_ASSERT
(
!
IsPlatformObjectSameOrigin
(
cx
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Why
did
we
get
called
?
"
)
;
js
:
:
AssertSameCompartment
(
cx
receiver
)
;
js
:
:
AssertSameCompartment
(
cx
v
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyDescriptor
>
desc
(
cx
)
;
if
(
!
js
:
:
GetProxyHandler
(
obj
)
-
>
getOwnPropertyDescriptor
(
cx
obj
id
&
desc
)
)
{
return
false
;
}
desc
.
assertCompleteIfFound
(
)
;
MOZ_ASSERT
(
desc
.
object
(
)
"
Callees
should
throw
in
all
cases
when
they
are
not
finding
a
"
"
property
decriptor
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
setter
(
cx
)
;
if
(
desc
.
hasSetterObject
(
)
&
&
(
setter
=
desc
.
setterObject
(
)
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
ignored
(
cx
)
;
if
(
!
JS
:
:
Call
(
cx
receiver
setter
JS
:
:
HandleValueArray
(
v
)
&
ignored
)
)
{
return
false
;
}
return
result
.
succeed
(
)
;
}
return
ReportCrossOriginDenial
(
cx
id
NS_LITERAL_CSTRING
(
"
set
"
)
)
;
}
bool
MaybeCrossOriginObjectMixins
:
:
EnsureHolder
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
size_t
slot
JSPropertySpec
*
attributes
JSFunctionSpec
*
methods
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
{
MOZ_ASSERT
(
!
IsPlatformObjectSameOrigin
(
cx
obj
)
|
|
IsRemoteObjectProxy
(
obj
)
"
Why
are
we
calling
this
at
all
in
same
-
origin
cases
?
"
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
weakMapVal
(
cx
js
:
:
GetProxyReservedSlot
(
obj
slot
)
)
;
if
(
weakMapVal
.
isUndefined
(
)
)
{
JSAutoRealm
ar
(
cx
obj
)
;
JSObject
*
newMap
=
JS
:
:
NewWeakMapObject
(
cx
)
;
if
(
!
newMap
)
{
return
false
;
}
weakMapVal
.
setObject
(
*
newMap
)
;
js
:
:
SetProxyReservedSlot
(
obj
slot
weakMapVal
)
;
}
MOZ_ASSERT
(
weakMapVal
.
isObject
(
)
"
How
did
a
non
-
object
else
end
up
in
this
slot
?
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
map
(
cx
&
weakMapVal
.
toObject
(
)
)
;
MOZ_ASSERT
(
JS
:
:
IsWeakMapObject
(
map
)
"
How
did
something
else
end
up
in
this
slot
?
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
key
(
cx
JS
:
:
GetRealmObjectPrototype
(
cx
)
)
;
if
(
!
key
)
{
return
false
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
holderVal
(
cx
)
;
{
JSAutoRealm
ar
(
cx
map
)
;
if
(
!
MaybeWrapObject
(
cx
&
key
)
)
{
return
false
;
}
if
(
!
JS
:
:
GetWeakMapEntry
(
cx
map
key
&
holderVal
)
)
{
return
false
;
}
}
if
(
holderVal
.
isObject
(
)
)
{
holder
.
set
(
js
:
:
UncheckedUnwrap
(
&
holderVal
.
toObject
(
)
)
)
;
if
(
!
JS_IsDeadWrapper
(
holder
)
)
{
MOZ_ASSERT
(
js
:
:
GetContextRealm
(
cx
)
=
=
js
:
:
GetNonCCWObjectRealm
(
holder
)
"
How
did
we
end
up
with
a
key
/
value
mismatch
?
"
)
;
return
true
;
}
}
holder
.
set
(
JS_NewObjectWithGivenProto
(
cx
nullptr
nullptr
)
)
;
if
(
!
holder
|
|
!
JS_DefineProperties
(
cx
holder
attributes
)
|
|
!
JS_DefineFunctions
(
cx
holder
methods
)
)
{
return
false
;
}
holderVal
.
setObject
(
*
holder
)
;
{
JSAutoRealm
ar
(
cx
map
)
;
if
(
!
MaybeWrapValue
(
cx
&
holderVal
)
)
{
return
false
;
}
if
(
!
JS
:
:
SetWeakMapEntry
(
cx
map
key
holderVal
)
)
{
return
false
;
}
}
return
true
;
}
bool
MaybeCrossOriginObjectMixins
:
:
ReportCrossOriginDenial
(
JSContext
*
aCx
JS
:
:
Handle
<
jsid
>
aId
const
nsACString
&
aAccessType
)
{
xpc
:
:
AccessCheck
:
:
reportCrossOriginDenial
(
aCx
aId
aAccessType
)
;
return
false
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
getPrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
{
if
(
!
IsPlatformObjectSameOrigin
(
cx
proxy
)
)
{
protop
.
set
(
nullptr
)
;
return
true
;
}
{
JSAutoRealm
ar
(
cx
proxy
)
;
protop
.
set
(
getSameOriginPrototype
(
cx
)
)
;
if
(
!
protop
)
{
return
false
;
}
}
return
MaybeWrapObject
(
cx
protop
)
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
setPrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
JSObject
*
>
proto
JS
:
:
ObjectOpResult
&
result
)
const
{
js
:
:
AssertSameCompartment
(
cx
proto
)
;
JS
:
:
Rooted
<
JSObject
*
>
wrappedProxy
(
cx
proxy
)
;
if
(
!
MaybeWrapObject
(
cx
&
wrappedProxy
)
)
{
return
false
;
}
JS
:
:
Rooted
<
JSObject
*
>
currentProto
(
cx
)
;
if
(
!
js
:
:
GetObjectProto
(
cx
wrappedProxy
&
currentProto
)
)
{
return
false
;
}
if
(
currentProto
!
=
proto
)
{
return
result
.
failCantSetProto
(
)
;
}
return
result
.
succeed
(
)
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
getPrototypeIfOrdinary
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
isOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
{
*
isOrdinary
=
false
;
return
true
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
isExtensible
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
extensible
)
const
{
*
extensible
=
true
;
return
true
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
preventExtensions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
ObjectOpResult
&
result
)
const
{
return
result
.
failCantPreventExtensions
(
)
;
}
template
<
typename
Base
>
bool
MaybeCrossOriginObject
<
Base
>
:
:
defineProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
{
if
(
!
IsPlatformObjectSameOrigin
(
cx
proxy
)
)
{
return
ReportCrossOriginDenial
(
cx
id
NS_LITERAL_CSTRING
(
"
define
"
)
)
;
}
JSAutoRealm
ar
(
cx
proxy
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyDescriptor
>
descCopy
(
cx
desc
)
;
if
(
!
JS_WrapPropertyDescriptor
(
cx
&
descCopy
)
)
{
return
false
;
}
JS_MarkCrossZoneId
(
cx
id
)
;
return
definePropertySameOrigin
(
cx
proxy
id
descCopy
result
)
;
}
template
<
typename
Base
>
JSObject
*
MaybeCrossOriginObject
<
Base
>
:
:
enumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
{
JS
:
:
Rooted
<
JSObject
*
>
self
(
cx
proxy
)
;
if
(
!
MaybeWrapObject
(
cx
&
self
)
)
{
return
nullptr
;
}
js
:
:
AutoIdVector
props
(
cx
)
;
if
(
!
js
:
:
GetPropertyKeys
(
cx
self
0
&
props
)
)
{
return
nullptr
;
}
return
js
:
:
EnumeratedIdVectorToIterator
(
cx
self
props
)
;
}
template
class
MaybeCrossOriginObject
<
js
:
:
Wrapper
>
;
template
class
MaybeCrossOriginObject
<
DOMProxyHandler
>
;
}
}
