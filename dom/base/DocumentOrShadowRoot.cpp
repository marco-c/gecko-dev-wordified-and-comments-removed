#
include
"
DocumentOrShadowRoot
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
dom
/
StyleSheetList
.
h
"
#
include
"
nsDocument
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIRadioVisitor
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
nsWindowSizes
.
h
"
namespace
mozilla
{
namespace
dom
{
DocumentOrShadowRoot
:
:
DocumentOrShadowRoot
(
mozilla
:
:
dom
:
:
ShadowRoot
&
aShadowRoot
)
:
mAsNode
(
aShadowRoot
)
mKind
(
Kind
:
:
ShadowRoot
)
{
}
DocumentOrShadowRoot
:
:
DocumentOrShadowRoot
(
nsIDocument
&
aDoc
)
:
mAsNode
(
aDoc
)
mKind
(
Kind
:
:
Document
)
{
}
void
DocumentOrShadowRoot
:
:
AddSizeOfOwnedSheetArrayExcludingThis
(
nsWindowSizes
&
aSizes
const
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aSheets
)
const
{
size_t
n
=
0
;
n
+
=
aSheets
.
ShallowSizeOfExcludingThis
(
aSizes
.
mState
.
mMallocSizeOf
)
;
for
(
StyleSheet
*
sheet
:
aSheets
)
{
if
(
!
sheet
-
>
GetAssociatedDocumentOrShadowRoot
(
)
)
{
continue
;
}
n
+
=
sheet
-
>
SizeOfIncludingThis
(
aSizes
.
mState
.
mMallocSizeOf
)
;
}
if
(
mKind
=
=
Kind
:
:
ShadowRoot
)
{
aSizes
.
mLayoutShadowDomStyleSheetsSize
+
=
n
;
}
else
{
aSizes
.
mLayoutStyleSheetsSize
+
=
n
;
}
}
void
DocumentOrShadowRoot
:
:
AddSizeOfExcludingThis
(
nsWindowSizes
&
aSizes
)
const
{
AddSizeOfOwnedSheetArrayExcludingThis
(
aSizes
mStyleSheets
)
;
aSizes
.
mDOMOtherSize
+
=
mIdentifierMap
.
SizeOfExcludingThis
(
aSizes
.
mState
.
mMallocSizeOf
)
;
}
DocumentOrShadowRoot
:
:
~
DocumentOrShadowRoot
(
)
{
for
(
StyleSheet
*
sheet
:
mStyleSheets
)
{
sheet
-
>
ClearAssociatedDocumentOrShadowRoot
(
)
;
}
}
StyleSheetList
&
DocumentOrShadowRoot
:
:
EnsureDOMStyleSheets
(
)
{
if
(
!
mDOMStyleSheets
)
{
mDOMStyleSheets
=
new
StyleSheetList
(
*
this
)
;
}
return
*
mDOMStyleSheets
;
}
void
DocumentOrShadowRoot
:
:
InsertSheetAt
(
size_t
aIndex
StyleSheet
&
aSheet
)
{
aSheet
.
SetAssociatedDocumentOrShadowRoot
(
this
StyleSheet
:
:
OwnedByDocumentOrShadowRoot
)
;
mStyleSheets
.
InsertElementAt
(
aIndex
&
aSheet
)
;
}
already_AddRefed
<
StyleSheet
>
DocumentOrShadowRoot
:
:
RemoveSheet
(
StyleSheet
&
aSheet
)
{
auto
index
=
mStyleSheets
.
IndexOf
(
&
aSheet
)
;
if
(
index
=
=
mStyleSheets
.
NoIndex
)
{
return
nullptr
;
}
RefPtr
<
StyleSheet
>
sheet
=
std
:
:
move
(
mStyleSheets
[
index
]
)
;
mStyleSheets
.
RemoveElementAt
(
index
)
;
sheet
-
>
ClearAssociatedDocumentOrShadowRoot
(
)
;
return
sheet
.
forget
(
)
;
}
Element
*
DocumentOrShadowRoot
:
:
GetElementById
(
const
nsAString
&
aElementId
)
{
if
(
MOZ_UNLIKELY
(
aElementId
.
IsEmpty
(
)
)
)
{
nsContentUtils
:
:
ReportEmptyGetElementByIdArg
(
AsNode
(
)
.
OwnerDoc
(
)
)
;
return
nullptr
;
}
if
(
nsIdentifierMapEntry
*
entry
=
mIdentifierMap
.
GetEntry
(
aElementId
)
)
{
if
(
Element
*
el
=
entry
-
>
GetIdElement
(
)
)
{
return
el
;
}
}
return
nullptr
;
}
already_AddRefed
<
nsContentList
>
DocumentOrShadowRoot
:
:
GetElementsByTagNameNS
(
const
nsAString
&
aNamespaceURI
const
nsAString
&
aLocalName
)
{
ErrorResult
rv
;
RefPtr
<
nsContentList
>
list
=
GetElementsByTagNameNS
(
aNamespaceURI
aLocalName
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
return
list
.
forget
(
)
;
}
already_AddRefed
<
nsContentList
>
DocumentOrShadowRoot
:
:
GetElementsByTagNameNS
(
const
nsAString
&
aNamespaceURI
const
nsAString
&
aLocalName
mozilla
:
:
ErrorResult
&
aResult
)
{
int32_t
nameSpaceId
=
kNameSpaceID_Wildcard
;
if
(
!
aNamespaceURI
.
EqualsLiteral
(
"
*
"
)
)
{
aResult
=
nsContentUtils
:
:
NameSpaceManager
(
)
-
>
RegisterNameSpace
(
aNamespaceURI
nameSpaceId
)
;
if
(
aResult
.
Failed
(
)
)
{
return
nullptr
;
}
}
NS_ASSERTION
(
nameSpaceId
!
=
kNameSpaceID_Unknown
"
Unexpected
namespace
ID
!
"
)
;
return
NS_GetContentList
(
&
AsNode
(
)
nameSpaceId
aLocalName
)
;
}
already_AddRefed
<
nsContentList
>
DocumentOrShadowRoot
:
:
GetElementsByClassName
(
const
nsAString
&
aClasses
)
{
return
nsContentUtils
:
:
GetElementsByClassName
(
&
AsNode
(
)
aClasses
)
;
}
nsIContent
*
DocumentOrShadowRoot
:
:
Retarget
(
nsIContent
*
aContent
)
const
{
for
(
nsIContent
*
cur
=
aContent
;
cur
;
cur
=
cur
-
>
GetContainingShadowHost
(
)
)
{
if
(
cur
-
>
SubtreeRoot
(
)
=
=
&
AsNode
(
)
)
{
return
cur
;
}
}
return
nullptr
;
}
Element
*
DocumentOrShadowRoot
:
:
GetRetargetedFocusedElement
(
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
AsNode
(
)
.
OwnerDoc
(
)
-
>
GetWindow
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsIContent
*
focusedContent
=
nsFocusManager
:
:
GetFocusedDescendant
(
window
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
if
(
focusedContent
&
&
focusedContent
-
>
OwnerDoc
(
)
=
=
AsNode
(
)
.
OwnerDoc
(
)
)
{
if
(
focusedContent
-
>
ChromeOnlyAccess
(
)
)
{
focusedContent
=
focusedContent
-
>
FindFirstNonChromeOnlyAccessContent
(
)
;
}
if
(
focusedContent
)
{
if
(
nsIContent
*
retarget
=
Retarget
(
focusedContent
)
)
{
return
retarget
-
>
AsElement
(
)
;
}
}
}
}
return
nullptr
;
}
Element
*
DocumentOrShadowRoot
:
:
GetPointerLockElement
(
)
{
nsCOMPtr
<
Element
>
pointerLockedElement
=
do_QueryReferent
(
EventStateManager
:
:
sPointerLockedElement
)
;
if
(
!
pointerLockedElement
)
{
return
nullptr
;
}
nsIContent
*
retargetedPointerLockedElement
=
Retarget
(
pointerLockedElement
)
;
return
retargetedPointerLockedElement
&
&
retargetedPointerLockedElement
-
>
IsElement
(
)
?
retargetedPointerLockedElement
-
>
AsElement
(
)
:
nullptr
;
}
Element
*
DocumentOrShadowRoot
:
:
GetFullscreenElement
(
)
{
if
(
!
AsNode
(
)
.
IsInComposedDoc
(
)
)
{
return
nullptr
;
}
Element
*
element
=
AsNode
(
)
.
OwnerDoc
(
)
-
>
FullscreenStackTop
(
)
;
NS_ASSERTION
(
!
element
|
|
element
-
>
State
(
)
.
HasState
(
NS_EVENT_STATE_FULLSCREEN
)
"
Fullscreen
element
should
have
fullscreen
styles
applied
"
)
;
nsIContent
*
retargeted
=
Retarget
(
element
)
;
if
(
retargeted
&
&
retargeted
-
>
IsElement
(
)
)
{
return
retargeted
-
>
AsElement
(
)
;
}
return
nullptr
;
}
namespace
{
enum
class
FromPointRequestKind
{
Element
Elements
}
;
enum
class
FlushLayout
{
No
Yes
}
;
using
FrameForPointOption
=
nsLayoutUtils
:
:
FrameForPointOption
;
static
void
ElementsFromPointHelper
(
DocumentOrShadowRoot
&
aRoot
float
aX
float
aY
EnumSet
<
FrameForPointOption
>
aOptions
FlushLayout
aShouldFlushLayout
FromPointRequestKind
aRequestKind
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
>
&
aElements
)
{
if
(
!
aOptions
.
contains
(
FrameForPointOption
:
:
IgnoreRootScrollFrame
)
&
&
(
aX
<
0
|
|
aY
<
0
)
)
{
return
;
}
nscoord
x
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aX
)
;
nscoord
y
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aY
)
;
nsPoint
pt
(
x
y
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
aRoot
.
AsNode
(
)
.
OwnerDoc
(
)
;
if
(
aShouldFlushLayout
=
=
FlushLayout
:
:
Yes
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
nsIPresShell
*
ps
=
doc
-
>
GetShell
(
)
;
if
(
!
ps
)
{
return
;
}
nsIFrame
*
rootFrame
=
ps
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
;
}
nsTArray
<
nsIFrame
*
>
outFrames
;
aOptions
+
=
FrameForPointOption
:
:
IgnorePaintSuppression
;
aOptions
+
=
FrameForPointOption
:
:
IgnoreCrossDoc
;
nsLayoutUtils
:
:
GetFramesForArea
(
rootFrame
nsRect
(
pt
nsSize
(
1
1
)
)
outFrames
aOptions
)
;
if
(
outFrames
.
IsEmpty
(
)
)
{
return
;
}
nsIContent
*
lastAdded
=
nullptr
;
for
(
uint32_t
i
=
0
;
i
<
outFrames
.
Length
(
)
;
i
+
+
)
{
nsIContent
*
node
=
doc
-
>
GetContentInThisDocument
(
outFrames
[
i
]
)
;
if
(
!
node
|
|
!
node
-
>
IsElement
(
)
)
{
if
(
aRequestKind
!
=
FromPointRequestKind
:
:
Element
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
outFrames
[
i
]
)
)
{
continue
;
}
node
=
node
-
>
GetParent
(
)
;
if
(
ShadowRoot
*
shadow
=
ShadowRoot
:
:
FromNodeOrNull
(
node
)
)
{
node
=
shadow
-
>
Host
(
)
;
}
}
node
=
aRoot
.
Retarget
(
node
)
;
if
(
node
&
&
node
!
=
lastAdded
)
{
aElements
.
AppendElement
(
node
-
>
AsElement
(
)
)
;
lastAdded
=
node
;
if
(
aRequestKind
=
=
FromPointRequestKind
:
:
Element
)
{
return
;
}
}
}
}
}
Element
*
DocumentOrShadowRoot
:
:
ElementFromPoint
(
float
aX
float
aY
)
{
return
ElementFromPointHelper
(
aX
aY
false
true
)
;
}
void
DocumentOrShadowRoot
:
:
ElementsFromPoint
(
float
aX
float
aY
nsTArray
<
RefPtr
<
Element
>
>
&
aElements
)
{
ElementsFromPointHelper
(
*
this
aX
aY
{
}
FlushLayout
:
:
Yes
FromPointRequestKind
:
:
Elements
aElements
)
;
}
Element
*
DocumentOrShadowRoot
:
:
ElementFromPointHelper
(
float
aX
float
aY
bool
aIgnoreRootScrollFrame
bool
aFlushLayout
)
{
AutoTArray
<
RefPtr
<
Element
>
1
>
elementArray
;
EnumSet
<
FrameForPointOption
>
options
;
if
(
aIgnoreRootScrollFrame
)
{
options
+
=
FrameForPointOption
:
:
IgnoreRootScrollFrame
;
}
auto
flush
=
aFlushLayout
?
FlushLayout
:
:
Yes
:
FlushLayout
:
:
No
;
ElementsFromPointHelper
(
*
this
aX
aY
options
flush
FromPointRequestKind
:
:
Element
elementArray
)
;
return
elementArray
.
SafeElementAt
(
0
)
;
}
void
DocumentOrShadowRoot
:
:
NodesFromRect
(
float
aX
float
aY
float
aTopSize
float
aRightSize
float
aBottomSize
float
aLeftSize
bool
aIgnoreRootScrollFrame
bool
aFlushLayout
nsTArray
<
RefPtr
<
nsINode
>
>
&
aReturn
)
{
if
(
!
aIgnoreRootScrollFrame
&
&
(
aX
<
0
|
|
aY
<
0
)
)
{
return
;
}
nscoord
x
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aX
-
aLeftSize
)
;
nscoord
y
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aY
-
aTopSize
)
;
nscoord
w
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aLeftSize
+
aRightSize
)
+
1
;
nscoord
h
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
aTopSize
+
aBottomSize
)
+
1
;
nsRect
rect
(
x
y
w
h
)
;
nsIDocument
*
doc
=
AsNode
(
)
.
OwnerDoc
(
)
;
if
(
aFlushLayout
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
nsIPresShell
*
ps
=
doc
-
>
GetShell
(
)
;
if
(
!
ps
)
{
return
;
}
nsIFrame
*
rootFrame
=
ps
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
return
;
EnumSet
<
FrameForPointOption
>
options
=
{
FrameForPointOption
:
:
IgnorePaintSuppression
FrameForPointOption
:
:
IgnoreCrossDoc
}
;
if
(
aIgnoreRootScrollFrame
)
{
options
+
=
FrameForPointOption
:
:
IgnoreRootScrollFrame
;
}
AutoTArray
<
nsIFrame
*
8
>
outFrames
;
nsLayoutUtils
:
:
GetFramesForArea
(
rootFrame
rect
outFrames
options
)
;
nsIContent
*
lastAdded
=
nullptr
;
for
(
uint32_t
i
=
0
;
i
<
outFrames
.
Length
(
)
;
i
+
+
)
{
nsIContent
*
node
=
doc
-
>
GetContentInThisDocument
(
outFrames
[
i
]
)
;
if
(
node
&
&
!
node
-
>
IsElement
(
)
&
&
!
node
-
>
IsText
(
)
)
{
node
=
node
-
>
GetParent
(
)
;
}
if
(
node
&
&
node
!
=
lastAdded
)
{
aReturn
.
AppendElement
(
node
)
;
lastAdded
=
node
;
}
}
}
Element
*
DocumentOrShadowRoot
:
:
AddIDTargetObserver
(
nsAtom
*
aID
IDTargetObserver
aObserver
void
*
aData
bool
aForImage
)
{
nsDependentAtomString
id
(
aID
)
;
if
(
!
CheckGetElementByIdArg
(
id
)
)
{
return
nullptr
;
}
nsIdentifierMapEntry
*
entry
=
mIdentifierMap
.
PutEntry
(
aID
)
;
NS_ENSURE_TRUE
(
entry
nullptr
)
;
entry
-
>
AddContentChangeCallback
(
aObserver
aData
aForImage
)
;
return
aForImage
?
entry
-
>
GetImageIdElement
(
)
:
entry
-
>
GetIdElement
(
)
;
}
void
DocumentOrShadowRoot
:
:
RemoveIDTargetObserver
(
nsAtom
*
aID
IDTargetObserver
aObserver
void
*
aData
bool
aForImage
)
{
nsDependentAtomString
id
(
aID
)
;
if
(
!
CheckGetElementByIdArg
(
id
)
)
{
return
;
}
nsIdentifierMapEntry
*
entry
=
mIdentifierMap
.
GetEntry
(
aID
)
;
if
(
!
entry
)
{
return
;
}
entry
-
>
RemoveContentChangeCallback
(
aObserver
aData
aForImage
)
;
}
Element
*
DocumentOrShadowRoot
:
:
LookupImageElement
(
const
nsAString
&
aId
)
{
if
(
aId
.
IsEmpty
(
)
)
{
return
nullptr
;
}
nsIdentifierMapEntry
*
entry
=
mIdentifierMap
.
GetEntry
(
aId
)
;
return
entry
?
entry
-
>
GetImageIdElement
(
)
:
nullptr
;
}
void
DocumentOrShadowRoot
:
:
ReportEmptyGetElementByIdArg
(
)
{
nsContentUtils
:
:
ReportEmptyGetElementByIdArg
(
AsNode
(
)
.
OwnerDoc
(
)
)
;
}
struct
nsRadioGroupStruct
{
nsRadioGroupStruct
(
)
:
mRequiredRadioCount
(
0
)
mGroupSuffersFromValueMissing
(
false
)
{
}
RefPtr
<
HTMLInputElement
>
mSelectedRadioButton
;
nsCOMArray
<
nsIFormControl
>
mRadioButtons
;
uint32_t
mRequiredRadioCount
;
bool
mGroupSuffersFromValueMissing
;
}
;
nsresult
DocumentOrShadowRoot
:
:
WalkRadioGroup
(
const
nsAString
&
aName
nsIRadioVisitor
*
aVisitor
bool
aFlushContent
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
for
(
int
i
=
0
;
i
<
radioGroup
-
>
mRadioButtons
.
Count
(
)
;
i
+
+
)
{
if
(
!
aVisitor
-
>
Visit
(
radioGroup
-
>
mRadioButtons
[
i
]
)
)
{
return
NS_OK
;
}
}
return
NS_OK
;
}
void
DocumentOrShadowRoot
:
:
SetCurrentRadioButton
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
radioGroup
-
>
mSelectedRadioButton
=
aRadio
;
}
HTMLInputElement
*
DocumentOrShadowRoot
:
:
GetCurrentRadioButton
(
const
nsAString
&
aName
)
{
return
GetOrCreateRadioGroup
(
aName
)
-
>
mSelectedRadioButton
;
}
nsresult
DocumentOrShadowRoot
:
:
GetNextRadioButton
(
const
nsAString
&
aName
const
bool
aPrevious
HTMLInputElement
*
aFocusedRadio
HTMLInputElement
*
*
aRadioOut
)
{
*
aRadioOut
=
nullptr
;
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
RefPtr
<
HTMLInputElement
>
currentRadio
;
if
(
aFocusedRadio
)
{
currentRadio
=
aFocusedRadio
;
}
else
{
currentRadio
=
radioGroup
-
>
mSelectedRadioButton
;
if
(
!
currentRadio
)
{
return
NS_ERROR_FAILURE
;
}
}
int32_t
index
=
radioGroup
-
>
mRadioButtons
.
IndexOf
(
currentRadio
)
;
if
(
index
<
0
)
{
return
NS_ERROR_FAILURE
;
}
int32_t
numRadios
=
radioGroup
-
>
mRadioButtons
.
Count
(
)
;
RefPtr
<
HTMLInputElement
>
radio
;
do
{
if
(
aPrevious
)
{
if
(
-
-
index
<
0
)
{
index
=
numRadios
-
1
;
}
}
else
if
(
+
+
index
>
=
numRadios
)
{
index
=
0
;
}
NS_ASSERTION
(
static_cast
<
nsGenericHTMLFormElement
*
>
(
radioGroup
-
>
mRadioButtons
[
index
]
)
-
>
IsHTMLElement
(
nsGkAtoms
:
:
input
)
"
mRadioButtons
holding
a
non
-
radio
button
"
)
;
radio
=
static_cast
<
HTMLInputElement
*
>
(
radioGroup
-
>
mRadioButtons
[
index
]
)
;
}
while
(
radio
-
>
Disabled
(
)
&
&
radio
!
=
currentRadio
)
;
radio
.
forget
(
aRadioOut
)
;
return
NS_OK
;
}
void
DocumentOrShadowRoot
:
:
AddToRadioGroup
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
radioGroup
-
>
mRadioButtons
.
AppendObject
(
aRadio
)
;
if
(
aRadio
-
>
IsRequired
(
)
)
{
radioGroup
-
>
mRequiredRadioCount
+
+
;
}
}
void
DocumentOrShadowRoot
:
:
RemoveFromRadioGroup
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
radioGroup
-
>
mRadioButtons
.
RemoveObject
(
aRadio
)
;
if
(
aRadio
-
>
IsRequired
(
)
)
{
NS_ASSERTION
(
radioGroup
-
>
mRequiredRadioCount
!
=
0
"
mRequiredRadioCount
about
to
wrap
below
0
!
"
)
;
radioGroup
-
>
mRequiredRadioCount
-
-
;
}
}
uint32_t
DocumentOrShadowRoot
:
:
GetRequiredRadioCount
(
const
nsAString
&
aName
)
const
{
nsRadioGroupStruct
*
radioGroup
=
GetRadioGroup
(
aName
)
;
return
radioGroup
?
radioGroup
-
>
mRequiredRadioCount
:
0
;
}
void
DocumentOrShadowRoot
:
:
RadioRequiredWillChange
(
const
nsAString
&
aName
bool
aRequiredAdded
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
if
(
aRequiredAdded
)
{
radioGroup
-
>
mRequiredRadioCount
+
+
;
}
else
{
NS_ASSERTION
(
radioGroup
-
>
mRequiredRadioCount
!
=
0
"
mRequiredRadioCount
about
to
wrap
below
0
!
"
)
;
radioGroup
-
>
mRequiredRadioCount
-
-
;
}
}
bool
DocumentOrShadowRoot
:
:
GetValueMissingState
(
const
nsAString
&
aName
)
const
{
nsRadioGroupStruct
*
radioGroup
=
GetRadioGroup
(
aName
)
;
return
radioGroup
&
&
radioGroup
-
>
mGroupSuffersFromValueMissing
;
}
void
DocumentOrShadowRoot
:
:
SetValueMissingState
(
const
nsAString
&
aName
bool
aValue
)
{
nsRadioGroupStruct
*
radioGroup
=
GetOrCreateRadioGroup
(
aName
)
;
radioGroup
-
>
mGroupSuffersFromValueMissing
=
aValue
;
}
nsRadioGroupStruct
*
DocumentOrShadowRoot
:
:
GetRadioGroup
(
const
nsAString
&
aName
)
const
{
nsRadioGroupStruct
*
radioGroup
=
nullptr
;
mRadioGroups
.
Get
(
aName
&
radioGroup
)
;
return
radioGroup
;
}
nsRadioGroupStruct
*
DocumentOrShadowRoot
:
:
GetOrCreateRadioGroup
(
const
nsAString
&
aName
)
{
return
mRadioGroups
.
LookupForAdd
(
aName
)
.
OrInsert
(
[
]
(
)
{
return
new
nsRadioGroupStruct
(
)
;
}
)
;
}
void
DocumentOrShadowRoot
:
:
Traverse
(
DocumentOrShadowRoot
*
tmp
nsCycleCollectionTraversalCallback
&
cb
)
{
for
(
auto
iter
=
tmp
-
>
mRadioGroups
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsRadioGroupStruct
*
radioGroup
=
iter
.
UserData
(
)
;
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mRadioGroups
entry
-
>
mSelectedRadioButton
"
)
;
cb
.
NoteXPCOMChild
(
ToSupports
(
radioGroup
-
>
mSelectedRadioButton
)
)
;
uint32_t
i
count
=
radioGroup
-
>
mRadioButtons
.
Count
(
)
;
for
(
i
=
0
;
i
<
count
;
+
+
i
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mRadioGroups
entry
-
>
mRadioButtons
[
i
]
"
)
;
cb
.
NoteXPCOMChild
(
radioGroup
-
>
mRadioButtons
[
i
]
)
;
}
}
}
void
DocumentOrShadowRoot
:
:
Unlink
(
DocumentOrShadowRoot
*
tmp
)
{
tmp
-
>
mRadioGroups
.
Clear
(
)
;
}
}
}
