#
ifndef
mozilla_dom_SerializedStackHolder_h
#
define
mozilla_dom_SerializedStackHolder_h
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SerializedStackHolder
{
StructuredCloneHolder
mHolder
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
void
WriteStack
(
JSContext
*
aCx
JS
:
:
HandleObject
aStack
)
;
public
:
SerializedStackHolder
(
)
;
void
SerializeMainThreadOrWorkletStack
(
JSContext
*
aCx
JS
:
:
HandleObject
aStack
)
;
void
SerializeWorkerStack
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
JS
:
:
HandleObject
aStack
)
;
void
SerializeCurrentStack
(
JSContext
*
aCx
)
;
JSObject
*
ReadStack
(
JSContext
*
aCx
)
;
}
;
UniquePtr
<
SerializedStackHolder
>
GetCurrentStackForNetMonitor
(
JSContext
*
aCx
)
;
void
NotifyNetworkMonitorAlternateStack
(
nsISupports
*
aChannel
UniquePtr
<
SerializedStackHolder
>
aStackHolder
)
;
void
ConvertSerializedStackToJSON
(
UniquePtr
<
SerializedStackHolder
>
aStackHolder
nsAString
&
aStackString
)
;
void
NotifyNetworkMonitorAlternateStack
(
nsISupports
*
aChannel
const
nsAString
&
aStackJSON
)
;
}
}
#
endif
