#
ifndef
mozilla_dom_ShadowIncludingTreeIterator_h
#
define
mozilla_dom_ShadowIncludingTreeIterator_h
#
include
"
nsINode
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ShadowIncludingTreeIterator
{
public
:
explicit
ShadowIncludingTreeIterator
(
nsINode
&
aRoot
)
:
mCurrent
(
&
aRoot
)
{
mRoots
.
AppendElement
(
&
aRoot
)
;
}
#
ifdef
DEBUG
~
ShadowIncludingTreeIterator
(
)
{
MOZ_ASSERT
(
!
mMutationGuard
.
Mutated
(
0
)
"
Don
'
t
mutate
the
DOM
while
using
a
ShadowIncludingTreeIterator
"
)
;
}
#
endif
ShadowIncludingTreeIterator
&
begin
(
)
{
return
*
this
;
}
ShadowIncludingTreeIterator
end
(
)
{
return
ShadowIncludingTreeIterator
(
)
;
}
bool
operator
!
=
(
const
ShadowIncludingTreeIterator
&
aOther
)
{
return
mCurrent
!
=
aOther
.
mCurrent
;
}
void
operator
+
+
(
)
{
Next
(
)
;
}
nsINode
*
operator
*
(
)
{
return
mCurrent
;
}
private
:
ShadowIncludingTreeIterator
(
)
:
mCurrent
(
nullptr
)
{
}
void
Next
(
)
{
MOZ_ASSERT
(
mCurrent
"
Don
'
t
call
Next
(
)
after
we
have
no
current
node
"
)
;
if
(
Element
*
element
=
Element
:
:
FromNode
(
mCurrent
)
)
{
if
(
ShadowRoot
*
shadowRoot
=
element
-
>
GetShadowRoot
(
)
)
{
mCurrent
=
shadowRoot
;
mRoots
.
AppendElement
(
shadowRoot
)
;
return
;
}
}
mCurrent
=
mCurrent
-
>
GetNextNode
(
mRoots
.
LastElement
(
)
)
;
while
(
!
mCurrent
)
{
nsINode
*
root
=
mRoots
.
PopLastElement
(
)
;
if
(
mRoots
.
IsEmpty
(
)
)
{
return
;
}
mCurrent
=
ShadowRoot
:
:
FromNode
(
root
)
-
>
Host
(
)
-
>
GetNextNode
(
mRoots
.
LastElement
(
)
)
;
}
}
nsINode
*
mCurrent
;
AutoTArray
<
nsINode
*
4
>
mRoots
;
#
ifdef
DEBUG
nsMutationGuard
mMutationGuard
;
#
endif
}
;
}
}
#
endif
