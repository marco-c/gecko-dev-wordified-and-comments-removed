#
ifndef
nsJSUtils_h__
#
define
nsJSUtils_h__
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
nsString
.
h
"
class
nsIScriptContext
;
class
nsIScriptGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
AutoJSAPI
;
class
Element
;
}
}
class
nsJSUtils
{
public
:
static
bool
GetCallingLocation
(
JSContext
*
aContext
nsACString
&
aFilename
uint32_t
*
aLineno
=
nullptr
uint32_t
*
aColumn
=
nullptr
)
;
static
bool
GetCallingLocation
(
JSContext
*
aContext
nsAString
&
aFilename
uint32_t
*
aLineno
=
nullptr
uint32_t
*
aColumn
=
nullptr
)
;
static
nsIScriptGlobalObject
*
GetStaticScriptGlobal
(
JSObject
*
aObj
)
;
static
nsIScriptContext
*
GetStaticScriptContext
(
JSObject
*
aObj
)
;
static
uint64_t
GetCurrentlyRunningCodeInnerWindowID
(
JSContext
*
aContext
)
;
static
nsresult
CompileFunction
(
mozilla
:
:
dom
:
:
AutoJSAPI
&
jsapi
JS
:
:
AutoObjectVector
&
aScopeChain
JS
:
:
CompileOptions
&
aOptions
const
nsACString
&
aName
uint32_t
aArgCount
const
char
*
*
aArgArray
const
nsAString
&
aBody
JSObject
*
*
aFunctionObject
)
;
class
MOZ_STACK_CLASS
ExecutionContext
{
#
ifdef
MOZ_GECKO_PROFILER
mozilla
:
:
SamplerStackFrameRAII
mSamplerRAII
;
#
endif
JSContext
*
mCx
;
JSAutoCompartment
mCompartment
;
JS
:
:
Rooted
<
JS
:
:
Value
>
mRetValue
;
JS
:
:
AutoObjectVector
mScopeChain
;
nsresult
mRv
;
bool
mSkip
;
bool
mCoerceToString
;
bool
mEncodeBytecode
;
#
ifdef
DEBUG
bool
mWantsReturnValue
;
bool
mExpectScopeChain
;
#
endif
public
:
ExecutionContext
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
ExecutionContext
(
const
ExecutionContext
&
)
=
delete
;
ExecutionContext
(
ExecutionContext
&
&
)
=
delete
;
~
ExecutionContext
(
)
{
MOZ_ASSERT
(
!
mWantsReturnValue
)
;
}
ExecutionContext
&
SetCoerceToString
(
bool
aCoerceToString
)
{
mCoerceToString
=
aCoerceToString
;
return
*
this
;
}
ExecutionContext
&
SetEncodeBytecode
(
bool
aEncodeBytecode
)
{
mEncodeBytecode
=
aEncodeBytecode
;
return
*
this
;
}
void
SetScopeChain
(
const
JS
:
:
AutoObjectVector
&
aScopeChain
)
;
MOZ_MUST_USE
nsresult
ExtractReturnValue
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetValue
)
;
MOZ_MUST_USE
nsresult
JoinAndExec
(
void
*
*
aOffThreadToken
JS
:
:
MutableHandle
<
JSScript
*
>
aScript
)
;
nsresult
CompileAndExec
(
JS
:
:
CompileOptions
&
aCompileOptions
JS
:
:
SourceBufferHolder
&
aSrcBuf
JS
:
:
MutableHandle
<
JSScript
*
>
aScript
)
;
nsresult
CompileAndExec
(
JS
:
:
CompileOptions
&
aCompileOptions
const
nsAString
&
aScript
)
;
MOZ_MUST_USE
nsresult
DecodeAndExec
(
JS
:
:
CompileOptions
&
aCompileOptions
mozilla
:
:
Vector
<
uint8_t
>
&
aBytecodeBuf
size_t
aBytecodeIndex
)
;
MOZ_MUST_USE
nsresult
DecodeJoinAndExec
(
void
*
*
aOffThreadToken
)
;
}
;
static
nsresult
CompileModule
(
JSContext
*
aCx
JS
:
:
SourceBufferHolder
&
aSrcBuf
JS
:
:
Handle
<
JSObject
*
>
aEvaluationGlobal
JS
:
:
CompileOptions
&
aCompileOptions
JS
:
:
MutableHandle
<
JSObject
*
>
aModule
)
;
static
nsresult
ModuleDeclarationInstantiation
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aModule
)
;
static
nsresult
ModuleEvaluation
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aModule
)
;
static
bool
GetScopeChainForElement
(
JSContext
*
aCx
mozilla
:
:
dom
:
:
Element
*
aElement
JS
:
:
AutoObjectVector
&
aScopeChain
)
;
static
void
ResetTimeZone
(
)
;
}
;
template
<
typename
T
>
inline
bool
AssignJSString
(
JSContext
*
cx
T
&
dest
JSString
*
s
)
{
size_t
len
=
js
:
:
GetStringLength
(
s
)
;
static_assert
(
js
:
:
MaxStringLength
<
(
1
<
<
28
)
"
Shouldn
'
t
overflow
here
or
in
SetCapacity
"
)
;
if
(
MOZ_UNLIKELY
(
!
dest
.
SetLength
(
len
mozilla
:
:
fallible
)
)
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
js
:
:
CopyStringChars
(
cx
dest
.
BeginWriting
(
)
s
len
)
;
}
inline
void
AssignJSFlatString
(
nsAString
&
dest
JSFlatString
*
s
)
{
size_t
len
=
js
:
:
GetFlatStringLength
(
s
)
;
static_assert
(
js
:
:
MaxStringLength
<
(
1
<
<
28
)
"
Shouldn
'
t
overflow
here
or
in
SetCapacity
"
)
;
dest
.
SetLength
(
len
)
;
js
:
:
CopyFlatStringChars
(
dest
.
BeginWriting
(
)
s
len
)
;
}
class
nsAutoJSString
:
public
nsAutoString
{
public
:
nsAutoJSString
(
)
{
}
bool
init
(
JSContext
*
aContext
JSString
*
str
)
{
return
AssignJSString
(
aContext
*
this
str
)
;
}
bool
init
(
JSContext
*
aContext
const
JS
:
:
Value
&
v
)
{
if
(
v
.
isString
(
)
)
{
return
init
(
aContext
v
.
toString
(
)
)
;
}
JS
:
:
Rooted
<
JSString
*
>
str
(
aContext
)
;
if
(
v
.
isObject
(
)
)
{
str
=
JS_NewStringCopyZ
(
aContext
"
[
Object
]
"
)
;
}
else
{
JS
:
:
Rooted
<
JS
:
:
Value
>
rootedVal
(
aContext
v
)
;
str
=
JS
:
:
ToString
(
aContext
rootedVal
)
;
}
return
str
&
&
init
(
aContext
str
)
;
}
bool
init
(
JSContext
*
aContext
jsid
id
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
aContext
)
;
return
JS_IdToValue
(
aContext
id
&
v
)
&
&
init
(
aContext
v
)
;
}
bool
init
(
const
JS
:
:
Value
&
v
)
;
~
nsAutoJSString
(
)
{
}
}
;
#
endif
