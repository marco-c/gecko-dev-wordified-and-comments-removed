#
ifndef
mozilla_dom_timeout_handler_h
#
define
mozilla_dom_timeout_handler_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
SourceLocation
.
h
"
#
include
"
mozilla
/
dom
/
FunctionBinding
.
h
"
#
include
"
js
/
Promise
.
h
"
namespace
mozilla
:
:
dom
{
class
TimeoutHandler
:
public
nsISupports
public
JSHolderBase
{
public
:
MOZ_CAN_RUN_SCRIPT
virtual
bool
Call
(
const
char
*
)
;
virtual
void
GetDescription
(
nsACString
&
aOutString
)
;
virtual
void
MarkForCC
(
)
{
}
protected
:
TimeoutHandler
(
)
=
default
;
explicit
TimeoutHandler
(
JSContext
*
aCx
)
:
mCaller
(
JSCallingLocation
:
:
Get
(
aCx
)
)
{
}
virtual
~
TimeoutHandler
(
)
=
default
;
const
JSCallingLocation
mCaller
=
{
}
;
private
:
TimeoutHandler
(
const
TimeoutHandler
&
)
=
delete
;
TimeoutHandler
&
operator
=
(
const
TimeoutHandler
&
)
=
delete
;
TimeoutHandler
&
operator
=
(
const
TimeoutHandler
&
&
)
=
delete
;
}
;
class
ScriptTimeoutHandler
:
public
TimeoutHandler
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ScriptTimeoutHandler
)
ScriptTimeoutHandler
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
const
nsAString
&
aExpression
)
;
MOZ_CAN_RUN_SCRIPT
virtual
bool
Call
(
const
char
*
)
override
{
return
false
;
}
;
virtual
void
GetDescription
(
nsACString
&
aOutString
)
override
;
protected
:
virtual
~
ScriptTimeoutHandler
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsString
mExpr
;
}
;
class
CallbackTimeoutHandler
final
:
public
TimeoutHandler
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
CallbackTimeoutHandler
)
CallbackTimeoutHandler
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
Function
*
aFunction
nsTArray
<
JS
:
:
Heap
<
JS
:
:
Value
>
>
&
&
aArguments
)
;
MOZ_CAN_RUN_SCRIPT
virtual
bool
Call
(
const
char
*
aExecutionReason
)
override
;
virtual
void
MarkForCC
(
)
override
;
virtual
void
GetDescription
(
nsACString
&
aOutString
)
override
;
void
ReleaseJSObjects
(
)
;
private
:
virtual
~
CallbackTimeoutHandler
(
)
{
ReleaseJSObjects
(
)
;
}
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
Function
>
mFunction
;
nsTArray
<
JS
:
:
Heap
<
JS
:
:
Value
>
>
mArgs
;
}
;
class
DelayedJSDispatchableHandler
final
:
public
TimeoutHandler
{
public
:
DelayedJSDispatchableHandler
(
JSContext
*
aCx
js
:
:
UniquePtr
<
JS
:
:
Dispatchable
>
&
&
aDispatchable
)
:
TimeoutHandler
(
aCx
)
mDispatchable
(
std
:
:
move
(
aDispatchable
)
)
{
}
NS_DECL_ISUPPORTS
MOZ_CAN_RUN_SCRIPT
bool
Call
(
const
char
*
)
override
;
private
:
~
DelayedJSDispatchableHandler
(
)
override
;
js
:
:
UniquePtr
<
JS
:
:
Dispatchable
>
mDispatchable
;
}
;
}
#
endif
