#
ifndef
DOM_FRAGMENTDIRECTIVE_H_
#
define
DOM_FRAGMENTDIRECTIVE_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
fragmentdirectives_ffi_generated
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsINode
;
class
nsIURI
;
class
nsRange
;
namespace
mozilla
:
:
dom
{
class
Document
;
class
Text
;
class
FragmentDirective
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
FragmentDirective
)
public
:
explicit
FragmentDirective
(
Document
*
aDocument
)
;
FragmentDirective
(
Document
*
aDocument
nsTArray
<
TextDirective
>
&
&
aTextDirectives
)
:
mDocument
(
aDocument
)
mUninvokedTextDirectives
(
std
:
:
move
(
aTextDirectives
)
)
{
}
protected
:
~
FragmentDirective
(
)
=
default
;
public
:
Document
*
GetParentObject
(
)
const
{
return
mDocument
;
}
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
SetTextDirectives
(
nsTArray
<
TextDirective
>
&
&
aTextDirectives
)
{
mUninvokedTextDirectives
=
std
:
:
move
(
aTextDirectives
)
;
}
bool
HasUninvokedDirectives
(
)
const
{
return
!
mUninvokedTextDirectives
.
IsEmpty
(
)
;
}
;
void
ClearUninvokedDirectives
(
)
{
mUninvokedTextDirectives
.
Clear
(
)
;
}
MOZ_CAN_RUN_SCRIPT
void
HighlightTextDirectives
(
const
nsTArray
<
RefPtr
<
nsRange
>
>
&
aTextDirectiveRanges
)
;
nsTArray
<
RefPtr
<
nsRange
>
>
FindTextFragmentsInDocument
(
)
;
static
void
ParseAndRemoveFragmentDirectiveFromFragment
(
nsCOMPtr
<
nsIURI
>
&
aURI
nsTArray
<
TextDirective
>
*
aTextDirectives
=
nullptr
)
;
static
bool
ParseAndRemoveFragmentDirectiveFromFragmentString
(
nsCString
&
aFragment
nsTArray
<
TextDirective
>
*
aTextDirectives
=
nullptr
nsIURI
*
aURI
=
nullptr
)
;
private
:
RefPtr
<
nsRange
>
FindRangeForTextDirective
(
const
TextDirective
&
aTextDirective
)
;
RefPtr
<
nsRange
>
FindStringInRange
(
nsRange
*
aSearchRange
const
nsAString
&
aQuery
bool
aWordStartBounded
bool
aWordEndBounded
)
;
RefPtr
<
Document
>
mDocument
;
nsTArray
<
TextDirective
>
mUninvokedTextDirectives
;
}
;
}
#
endif
