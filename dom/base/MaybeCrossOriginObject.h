#
ifndef
mozilla_dom_MaybeCrossOriginObject_h
#
define
mozilla_dom_MaybeCrossOriginObject_h
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MaybeCrossOriginObjectMixins
{
protected
:
static
bool
IsPlatformObjectSameOrigin
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
bool
CrossOriginGetOwnPropertyHelper
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
;
static
bool
CrossOriginPropertyFallback
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
static
bool
CrossOriginGet
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
static
bool
CrossOriginSet
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
ObjectOpResult
&
result
)
;
static
bool
EnsureHolder
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
size_t
slot
JSPropertySpec
*
attributes
JSFunctionSpec
*
methods
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
;
virtual
bool
EnsureHolder
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
const
=
0
;
static
bool
ReportCrossOriginDenial
(
JSContext
*
aCx
JS
:
:
Handle
<
jsid
>
aId
const
nsACString
&
aAccessType
)
;
}
;
template
<
typename
Base
>
class
MaybeCrossOriginObject
:
public
Base
public
MaybeCrossOriginObjectMixins
{
protected
:
template
<
typename
.
.
.
Args
>
constexpr
MaybeCrossOriginObject
(
Args
&
&
.
.
.
aArgs
)
:
Base
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
{
}
bool
getPrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
final
;
virtual
JSObject
*
getSameOriginPrototype
(
JSContext
*
cx
)
const
=
0
;
bool
setPrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
JSObject
*
>
proto
JS
:
:
ObjectOpResult
&
result
)
const
final
;
bool
getPrototypeIfOrdinary
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
isOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
final
;
bool
isExtensible
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
extensible
)
const
final
;
bool
preventExtensions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
ObjectOpResult
&
result
)
const
final
;
bool
getOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
=
0
;
bool
defineProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
final
;
virtual
bool
definePropertySameOrigin
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
=
0
;
bool
get
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
const
override
=
0
;
bool
set
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
ObjectOpResult
&
result
)
const
override
=
0
;
bool
delete_
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
const
override
=
0
;
JSObject
*
enumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
final
;
const
char
*
className
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
override
=
0
;
}
;
}
}
#
endif
