#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
mozilla
/
dom
/
FrameLoaderBinding
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
already_AddRefed
<
nsFrameLoader
>
nsFrameLoaderOwner
:
:
GetFrameLoader
(
)
{
return
do_AddRef
(
mFrameLoader
)
;
}
void
nsFrameLoaderOwner
:
:
SetFrameLoader
(
nsFrameLoader
*
aNewFrameLoader
)
{
mFrameLoader
=
aNewFrameLoader
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
BrowsingContext
>
nsFrameLoaderOwner
:
:
GetBrowsingContext
(
)
{
if
(
mFrameLoader
)
{
return
mFrameLoader
-
>
GetBrowsingContext
(
)
;
}
return
nullptr
;
}
void
nsFrameLoaderOwner
:
:
ChangeRemoteness
(
const
mozilla
:
:
dom
:
:
RemotenessOptions
&
aOptions
mozilla
:
:
ErrorResult
&
rv
)
{
if
(
mFrameLoader
)
{
mFrameLoader
-
>
Destroy
(
)
;
mFrameLoader
=
nullptr
;
}
RefPtr
<
Element
>
owner
=
do_QueryObject
(
this
)
;
MOZ_ASSERT
(
owner
)
;
mFrameLoader
=
nsFrameLoader
:
:
Create
(
owner
aOptions
)
;
if
(
NS_WARN_IF
(
!
mFrameLoader
)
)
{
return
;
}
mFrameLoader
-
>
LoadFrame
(
false
)
;
nsIFrame
*
ourFrame
=
owner
-
>
GetPrimaryFrame
(
)
;
if
(
ourFrame
)
{
nsSubDocumentFrame
*
ourFrameFrame
=
do_QueryFrame
(
ourFrame
)
;
if
(
ourFrameFrame
)
{
ourFrameFrame
-
>
ResetFrameLoader
(
)
;
}
}
(
new
AsyncEventDispatcher
(
owner
NS_LITERAL_STRING
(
"
XULFrameLoaderCreated
"
)
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eYes
)
)
-
>
RunDOMEventWhenSafe
(
)
;
}
