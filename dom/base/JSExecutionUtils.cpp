#
include
"
mozilla
/
dom
/
JSExecutionUtils
.
h
"
#
include
<
utility
>
#
include
"
ErrorList
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsTPromiseFlatString
.
h
"
#
if
!
defined
(
DEBUG
)
&
&
!
defined
(
MOZ_ENABLE_JS_DUMP
)
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
endif
using
namespace
mozilla
;
namespace
mozilla
:
:
dom
{
nsresult
EvaluationExceptionToNSResult
(
ErrorResult
&
aRv
)
{
if
(
aRv
.
IsJSContextException
(
)
)
{
aRv
.
SuppressException
(
)
;
return
NS_SUCCESS_DOM_SCRIPT_EVALUATION_THREW
;
}
if
(
aRv
.
IsUncatchableException
(
)
)
{
aRv
.
SuppressException
(
)
;
return
NS_SUCCESS_DOM_SCRIPT_EVALUATION_THREW_UNCATCHABLE
;
}
return
aRv
.
StealNSResult
(
)
;
}
void
Compile
(
JSContext
*
aCx
JS
:
:
CompileOptions
&
aCompileOptions
const
nsAString
&
aScript
RefPtr
<
JS
:
:
Stencil
>
&
aStencil
ErrorResult
&
aRv
)
{
const
nsPromiseFlatString
&
flatScript
=
PromiseFlatString
(
aScript
)
;
JS
:
:
SourceText
<
char16_t
>
srcBuf
;
if
(
!
srcBuf
.
init
(
aCx
flatScript
.
get
(
)
flatScript
.
Length
(
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
return
;
}
aStencil
=
CompileGlobalScriptToStencil
(
aCx
aCompileOptions
srcBuf
)
;
if
(
!
aStencil
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
}
}
}
