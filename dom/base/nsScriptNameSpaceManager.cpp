#
include
"
nsScriptNameSpaceManager
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIComponentRegistrar
.
h
"
#
include
"
nsICategoryManager
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsIScriptNameSpaceManager
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsIInterfaceInfoManager
.
h
"
#
include
"
nsIInterfaceInfo
.
h
"
#
include
"
xptinfo
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsDOMClassInfo
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
WebIDLGlobalNameHash
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
define
NS_INTERFACE_PREFIX
"
nsI
"
#
define
NS_DOM_INTERFACE_PREFIX
"
nsIDOM
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
static
PLDHashNumber
GlobalNameHashHashKey
(
const
void
*
key
)
{
const
nsAString
*
str
=
static_cast
<
const
nsAString
*
>
(
key
)
;
return
HashString
(
*
str
)
;
}
static
bool
GlobalNameHashMatchEntry
(
const
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
const
GlobalNameMapEntry
*
e
=
static_cast
<
const
GlobalNameMapEntry
*
>
(
entry
)
;
const
nsAString
*
str
=
static_cast
<
const
nsAString
*
>
(
key
)
;
return
str
-
>
Equals
(
e
-
>
mKey
)
;
}
static
void
GlobalNameHashClearEntry
(
PLDHashTable
*
table
PLDHashEntryHdr
*
entry
)
{
GlobalNameMapEntry
*
e
=
static_cast
<
GlobalNameMapEntry
*
>
(
entry
)
;
e
-
>
mKey
.
~
nsString
(
)
;
memset
(
&
e
-
>
mGlobalName
0
sizeof
(
nsGlobalNameStruct
)
)
;
}
static
void
GlobalNameHashInitEntry
(
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
GlobalNameMapEntry
*
e
=
static_cast
<
GlobalNameMapEntry
*
>
(
entry
)
;
const
nsAString
*
keyStr
=
static_cast
<
const
nsAString
*
>
(
key
)
;
new
(
&
e
-
>
mKey
)
nsString
(
*
keyStr
)
;
memset
(
&
e
-
>
mGlobalName
0
sizeof
(
nsGlobalNameStruct
)
)
;
}
NS_IMPL_ISUPPORTS
(
nsScriptNameSpaceManager
nsIObserver
nsISupportsWeakReference
nsIMemoryReporter
)
static
const
PLDHashTableOps
hash_table_ops
=
{
GlobalNameHashHashKey
GlobalNameHashMatchEntry
PLDHashTable
:
:
MoveEntryStub
GlobalNameHashClearEntry
GlobalNameHashInitEntry
}
;
#
define
GLOBALNAME_HASHTABLE_INITIAL_LENGTH
32
nsScriptNameSpaceManager
:
:
nsScriptNameSpaceManager
(
)
:
mGlobalNames
(
&
hash_table_ops
sizeof
(
GlobalNameMapEntry
)
GLOBALNAME_HASHTABLE_INITIAL_LENGTH
)
{
}
nsScriptNameSpaceManager
:
:
~
nsScriptNameSpaceManager
(
)
{
UnregisterWeakMemoryReporter
(
this
)
;
}
nsGlobalNameStruct
*
nsScriptNameSpaceManager
:
:
AddToHash
(
const
char
*
aKey
const
char16_t
*
*
aClassName
)
{
NS_ConvertASCIItoUTF16
key
(
aKey
)
;
auto
entry
=
static_cast
<
GlobalNameMapEntry
*
>
(
mGlobalNames
.
Add
(
&
key
fallible
)
)
;
if
(
!
entry
)
{
return
nullptr
;
}
WebIDLGlobalNameHash
:
:
Remove
(
aKey
key
.
Length
(
)
)
;
if
(
aClassName
)
{
*
aClassName
=
entry
-
>
mKey
.
get
(
)
;
}
return
&
entry
-
>
mGlobalName
;
}
void
nsScriptNameSpaceManager
:
:
RemoveFromHash
(
const
nsAString
*
aKey
)
{
mGlobalNames
.
Remove
(
aKey
)
;
}
nsresult
nsScriptNameSpaceManager
:
:
FillHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
)
{
nsCOMPtr
<
nsISimpleEnumerator
>
e
;
nsresult
rv
=
aCategoryManager
-
>
EnumerateCategory
(
aCategory
getter_AddRefs
(
e
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsISupports
>
entry
;
while
(
NS_SUCCEEDED
(
e
-
>
GetNext
(
getter_AddRefs
(
entry
)
)
)
)
{
rv
=
AddCategoryEntryToHash
(
aCategoryManager
aCategory
entry
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
nsresult
nsScriptNameSpaceManager
:
:
Init
(
)
{
RegisterWeakMemoryReporter
(
this
)
;
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsICategoryManager
>
cm
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIObserverService
>
serv
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
serv
)
{
serv
-
>
AddObserver
(
this
NS_XPCOM_CATEGORY_ENTRY_ADDED_OBSERVER_ID
true
)
;
serv
-
>
AddObserver
(
this
NS_XPCOM_CATEGORY_ENTRY_REMOVED_OBSERVER_ID
true
)
;
}
return
NS_OK
;
}
const
nsGlobalNameStruct
*
nsScriptNameSpaceManager
:
:
LookupName
(
const
nsAString
&
aName
const
char16_t
*
*
aClassName
)
{
auto
entry
=
static_cast
<
GlobalNameMapEntry
*
>
(
mGlobalNames
.
Search
(
&
aName
)
)
;
if
(
entry
)
{
if
(
aClassName
)
{
*
aClassName
=
entry
-
>
mKey
.
get
(
)
;
}
return
&
entry
-
>
mGlobalName
;
}
if
(
aClassName
)
{
*
aClassName
=
nullptr
;
}
return
nullptr
;
}
nsresult
nsScriptNameSpaceManager
:
:
OperateCategoryEntryHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
bool
aRemove
)
{
MOZ_ASSERT
(
aCategoryManager
)
;
return
NS_OK
;
}
nsresult
nsScriptNameSpaceManager
:
:
AddCategoryEntryToHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
)
{
return
OperateCategoryEntryHash
(
aCategoryManager
aCategory
aEntry
false
)
;
}
nsresult
nsScriptNameSpaceManager
:
:
RemoveCategoryEntryFromHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
)
{
return
OperateCategoryEntryHash
(
aCategoryManager
aCategory
aEntry
true
)
;
}
NS_IMETHODIMP
nsScriptNameSpaceManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
aData
)
{
return
NS_OK
;
}
if
(
!
strcmp
(
aTopic
NS_XPCOM_CATEGORY_ENTRY_ADDED_OBSERVER_ID
)
)
{
nsCOMPtr
<
nsICategoryManager
>
cm
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
)
;
if
(
!
cm
)
{
return
NS_OK
;
}
return
AddCategoryEntryToHash
(
cm
NS_ConvertUTF16toUTF8
(
aData
)
.
get
(
)
aSubject
)
;
}
else
if
(
!
strcmp
(
aTopic
NS_XPCOM_CATEGORY_ENTRY_REMOVED_OBSERVER_ID
)
)
{
nsCOMPtr
<
nsICategoryManager
>
cm
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
)
;
if
(
!
cm
)
{
return
NS_OK
;
}
return
RemoveCategoryEntryFromHash
(
cm
NS_ConvertUTF16toUTF8
(
aData
)
.
get
(
)
aSubject
)
;
}
return
NS_OK
;
}
MOZ_DEFINE_MALLOC_SIZE_OF
(
ScriptNameSpaceManagerMallocSizeOf
)
NS_IMETHODIMP
nsScriptNameSpaceManager
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
script
-
namespace
-
manager
"
KIND_HEAP
UNITS_BYTES
SizeOfIncludingThis
(
ScriptNameSpaceManagerMallocSizeOf
)
"
Memory
used
for
the
script
namespace
manager
.
"
)
;
return
NS_OK
;
}
size_t
nsScriptNameSpaceManager
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
n
+
=
mGlobalNames
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
auto
iter
=
mGlobalNames
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
GlobalNameMapEntry
*
>
(
iter
.
Get
(
)
)
;
n
+
=
entry
-
>
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
return
n
;
}
