#
ifndef
mozilla_dom_StaticRange_h
#
define
mozilla_dom_StaticRange_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
dom
/
AbstractRange
.
h
"
#
include
"
mozilla
/
dom
/
StaticRangeBinding
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
StaticRange
final
:
public
AbstractRange
{
public
:
explicit
StaticRange
(
nsINode
*
aNode
)
:
AbstractRange
(
aNode
)
{
}
StaticRange
(
)
=
delete
;
explicit
StaticRange
(
const
StaticRange
&
aOther
)
=
delete
;
static
already_AddRefed
<
StaticRange
>
Constructor
(
const
GlobalObject
&
global
const
StaticRangeInit
&
init
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
StaticRange
>
Create
(
const
AbstractRange
*
aAbstractRange
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aAbstractRange
)
;
return
StaticRange
:
:
Create
(
aAbstractRange
-
>
StartRef
(
)
aAbstractRange
-
>
EndRef
(
)
aRv
)
;
}
static
already_AddRefed
<
StaticRange
>
Create
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
ErrorResult
&
aRv
)
{
return
StaticRange
:
:
Create
(
RawRangeBoundary
(
aStartContainer
aStartOffset
)
RawRangeBoundary
(
aEndContainer
aEndOffset
)
aRv
)
;
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
static
already_AddRefed
<
StaticRange
>
Create
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
ErrorResult
&
aRv
)
;
protected
:
virtual
~
StaticRange
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHODIMP_
(
void
)
DeleteCycleCollectable
(
void
)
override
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
StaticRange
AbstractRange
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
nsresult
SetStartAndEnd
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
{
return
SetStartAndEnd
(
RawRangeBoundary
(
aStartContainer
aStartOffset
)
RawRangeBoundary
(
aEndContainer
aEndOffset
)
)
;
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
nsresult
SetStartAndEnd
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
)
{
return
AbstractRange
:
:
SetStartAndEndInternal
(
aStartBoundary
aEndBoundary
this
)
;
}
protected
:
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
void
DoSetRange
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
nsINode
*
aRootNode
)
;
friend
class
AbstractRange
;
}
;
}
}
#
endif
