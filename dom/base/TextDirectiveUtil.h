#
ifndef
DOM_TEXTDIRECTIVEUTIL_H_
#
define
DOM_TEXTDIRECTIVEUTIL_H_
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsIURI
;
class
nsINode
;
class
nsRange
;
struct
TextDirective
;
namespace
mozilla
:
:
dom
{
extern
LazyLogModule
gFragmentDirectiveLog
;
#
define
TEXT_FRAGMENT_LOG_FN
(
msg
func
.
.
.
)
\
MOZ_LOG_FMT
(
gFragmentDirectiveLog
LogLevel
:
:
Debug
"
{
}
(
)
:
"
msg
func
\
#
#
__VA_ARGS__
)
#
define
TEXT_FRAGMENT_LOG
(
msg
.
.
.
)
\
TEXT_FRAGMENT_LOG_FN
(
msg
__FUNCTION__
#
#
__VA_ARGS__
)
enum
class
TextScanDirection
{
Left
=
-
1
Right
=
1
}
;
class
TextDirectiveUtil
final
{
public
:
MOZ_ALWAYS_INLINE
static
bool
ShouldLog
(
)
{
return
MOZ_LOG_TEST
(
gFragmentDirectiveLog
LogLevel
:
:
Debug
)
;
}
static
Result
<
nsString
ErrorResult
>
RangeContentAsString
(
nsRange
*
aRange
)
;
static
bool
NodeIsVisibleTextNode
(
const
nsINode
&
aNode
)
;
static
RefPtr
<
nsRange
>
FindStringInRange
(
const
RangeBoundary
&
aSearchStart
const
RangeBoundary
&
aSearchEnd
const
nsAString
&
aQuery
bool
aWordStartBounded
bool
aWordEndBounded
nsContentUtils
:
:
NodeIndexCache
*
aCache
=
nullptr
)
;
static
bool
IsWhitespaceAtPosition
(
const
Text
*
aText
uint32_t
aPos
)
;
static
bool
NodeIsSearchInvisible
(
nsINode
&
aNode
)
;
static
bool
NodeHasBlockLevelDisplay
(
nsINode
&
aNode
)
;
static
nsINode
*
GetBlockAncestorForNode
(
nsINode
*
aNode
)
;
static
bool
NodeIsPartOfNonSearchableSubTree
(
nsINode
&
aNode
)
;
static
void
AdvanceStartToNextNonWhitespacePosition
(
nsRange
&
aRange
)
;
static
RangeBoundary
MoveToNextBoundaryPoint
(
const
RangeBoundary
&
aPoint
)
;
template
<
TextScanDirection
direction
>
static
RangeBoundary
FindNextBlockBoundary
(
const
RangeBoundary
&
aRangeBoundary
)
;
}
;
class
TimeoutWatchdog
final
{
public
:
TimeoutWatchdog
(
)
:
mStartTime
(
TimeStamp
:
:
Now
(
)
)
mDuration
(
TimeDuration
:
:
FromSeconds
(
StaticPrefs
:
:
dom_text_fragments_create_text_fragment_timeout_seconds
(
)
)
)
{
}
bool
IsDone
(
)
const
{
return
TimeStamp
:
:
Now
(
)
-
mStartTime
>
mDuration
;
}
private
:
TimeStamp
mStartTime
;
TimeDuration
mDuration
;
}
;
template
<
TextScanDirection
direction
>
class
SameBlockVisibleTextNodeIterator
final
{
public
:
explicit
SameBlockVisibleTextNodeIterator
(
nsINode
&
aStart
)
:
mCurrent
(
&
aStart
)
mBlockAncestor
(
TextDirectiveUtil
:
:
GetBlockAncestorForNode
(
mCurrent
)
)
{
while
(
mCurrent
-
>
HasChildNodes
(
)
)
{
nsINode
*
child
=
direction
=
=
TextScanDirection
:
:
Left
?
mCurrent
-
>
GetLastChild
(
)
:
mCurrent
-
>
GetFirstChild
(
)
;
if
(
TextDirectiveUtil
:
:
GetBlockAncestorForNode
(
child
)
!
=
mBlockAncestor
)
{
break
;
}
mCurrent
=
child
;
}
}
SameBlockVisibleTextNodeIterator
&
begin
(
)
{
return
*
this
;
}
std
:
:
nullptr_t
end
(
)
{
return
nullptr
;
}
bool
operator
!
=
(
std
:
:
nullptr_t
)
const
{
return
!
!
mCurrent
;
}
void
operator
+
+
(
)
{
while
(
mCurrent
)
{
mCurrent
=
direction
=
=
TextScanDirection
:
:
Left
?
mCurrent
-
>
GetPrevNode
(
)
:
mCurrent
-
>
GetNextNode
(
)
;
if
(
!
mCurrent
)
{
return
;
}
if
(
TextDirectiveUtil
:
:
GetBlockAncestorForNode
(
mCurrent
)
!
=
mBlockAncestor
)
{
mCurrent
=
nullptr
;
return
;
}
if
(
TextDirectiveUtil
:
:
NodeIsVisibleTextNode
(
*
mCurrent
)
&
&
!
TextDirectiveUtil
:
:
NodeIsPartOfNonSearchableSubTree
(
*
mCurrent
)
)
{
break
;
}
}
MOZ_ASSERT_IF
(
mCurrent
mCurrent
-
>
IsText
(
)
)
;
}
Text
*
operator
*
(
)
{
return
Text
:
:
FromNodeOrNull
(
mCurrent
)
;
}
private
:
nsINode
*
mCurrent
=
nullptr
;
nsINode
*
mBlockAncestor
=
nullptr
;
}
;
template
<
TextScanDirection
direction
>
RangeBoundary
TextDirectiveUtil
:
:
FindNextBlockBoundary
(
const
RangeBoundary
&
aRangeBoundary
)
{
MOZ_ASSERT
(
aRangeBoundary
.
IsSetAndValid
(
)
)
;
nsINode
*
current
=
aRangeBoundary
.
GetContainer
(
)
;
uint32_t
offset
=
direction
=
=
TextScanDirection
:
:
Left
?
0u
:
current
-
>
Length
(
)
;
for
(
auto
*
node
:
SameBlockVisibleTextNodeIterator
<
direction
>
(
*
current
)
)
{
if
(
!
node
)
{
continue
;
}
current
=
node
;
offset
=
direction
=
=
TextScanDirection
:
:
Left
?
0u
:
current
-
>
Length
(
)
;
}
return
{
current
offset
}
;
}
}
#
endif
