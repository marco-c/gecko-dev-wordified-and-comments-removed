#
include
"
nsDOMSerializer
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsINode
.
h
"
using
namespace
mozilla
;
nsDOMSerializer
:
:
nsDOMSerializer
(
)
{
}
static
already_AddRefed
<
nsIDocumentEncoder
>
SetUpEncoder
(
nsINode
&
aRoot
const
nsAString
&
aCharset
ErrorResult
&
aRv
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDocumentEncoder
>
encoder
=
do_CreateInstance
(
NS_DOC_ENCODER_CONTRACTID_BASE
"
application
/
xhtml
+
xml
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
nsIDocument
*
doc
=
aRoot
.
OwnerDoc
(
)
;
bool
entireDocument
=
(
doc
=
=
&
aRoot
)
;
rv
=
encoder
-
>
NativeInit
(
doc
NS_LITERAL_STRING
(
"
application
/
xhtml
+
xml
"
)
nsIDocumentEncoder
:
:
OutputRaw
|
nsIDocumentEncoder
:
:
OutputDontRewriteEncodingDeclaration
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
NS_ConvertUTF16toUTF8
charset
(
aCharset
)
;
if
(
charset
.
IsEmpty
(
)
)
{
doc
-
>
GetDocumentCharacterSet
(
)
-
>
Name
(
charset
)
;
}
rv
=
encoder
-
>
SetCharset
(
charset
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
if
(
!
entireDocument
)
{
rv
=
encoder
-
>
SetNode
(
&
aRoot
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
return
encoder
.
forget
(
)
;
}
void
nsDOMSerializer
:
:
SerializeToString
(
nsINode
&
aRoot
nsAString
&
aStr
ErrorResult
&
aRv
)
{
aStr
.
Truncate
(
)
;
if
(
!
nsContentUtils
:
:
CanCallerAccess
(
&
aRoot
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsCOMPtr
<
nsIDocumentEncoder
>
encoder
=
SetUpEncoder
(
aRoot
EmptyString
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
nsresult
rv
=
encoder
-
>
EncodeToString
(
aStr
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
void
nsDOMSerializer
:
:
SerializeToStream
(
nsINode
&
aRoot
nsIOutputStream
*
aStream
const
nsAString
&
aCharset
ErrorResult
&
aRv
)
{
if
(
NS_WARN_IF
(
!
aStream
)
)
{
aRv
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsCOMPtr
<
nsIDocumentEncoder
>
encoder
=
SetUpEncoder
(
aRoot
aCharset
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
nsresult
rv
=
encoder
-
>
EncodeToStream
(
aStream
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
