#
ifndef
nsFrameLoaderOwner_h_
#
define
nsFrameLoaderOwner_h_
#
include
<
functional
>
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
BrowsingContext
;
class
BrowsingContextGroup
;
class
BrowserBridgeChild
;
class
ContentParent
;
struct
RemotenessOptions
;
}
}
#
define
NS_FRAMELOADEROWNER_IID
\
{
\
0x1b4fd25c
0x2e57
0x11e9
{
\
0x9e
0x5a
0x5b
0x86
0xe9
0x89
0xa5
0xc0
\
}
\
}
class
nsFrameLoaderOwner
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_FRAMELOADEROWNER_IID
)
nsFrameLoaderOwner
(
)
=
default
;
already_AddRefed
<
nsFrameLoader
>
GetFrameLoader
(
)
;
void
SetFrameLoader
(
nsFrameLoader
*
aNewFrameLoader
)
;
mozilla
:
:
dom
:
:
BrowsingContext
*
GetBrowsingContext
(
)
;
mozilla
:
:
dom
:
:
BrowsingContext
*
GetExtantBrowsingContext
(
)
;
void
ChangeRemoteness
(
const
mozilla
:
:
dom
:
:
RemotenessOptions
&
aOptions
mozilla
:
:
ErrorResult
&
rv
)
;
void
ChangeRemotenessWithBridge
(
mozilla
:
:
dom
:
:
BrowserBridgeChild
*
aBridge
mozilla
:
:
ErrorResult
&
rv
)
;
void
ChangeRemotenessToProcess
(
mozilla
:
:
dom
:
:
ContentParent
*
aContentParent
bool
aReplaceBrowsingContext
mozilla
:
:
dom
:
:
BrowsingContextGroup
*
aGroup
mozilla
:
:
ErrorResult
&
rv
)
;
void
SubframeCrashed
(
)
;
private
:
bool
UseRemoteSubframes
(
)
;
enum
class
ChangeRemotenessContextType
{
DONT_PRESERVE
=
0
PRESERVE
=
1
}
;
ChangeRemotenessContextType
ShouldPreserveBrowsingContext
(
bool
aIsRemote
bool
aReplaceBrowsingContext
)
;
void
ChangeRemotenessCommon
(
const
ChangeRemotenessContextType
&
aContextType
bool
aSwitchingInProgressLoad
bool
aIsRemote
mozilla
:
:
dom
:
:
BrowsingContextGroup
*
aGroup
std
:
:
function
<
void
(
)
>
&
aFrameLoaderInit
mozilla
:
:
ErrorResult
&
aRv
)
;
protected
:
virtual
~
nsFrameLoaderOwner
(
)
=
default
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsFrameLoaderOwner
NS_FRAMELOADEROWNER_IID
)
#
endif
