#
ifndef
mozilla_dom_DOMMozPromiseRequestHolder_h
#
define
mozilla_dom_DOMMozPromiseRequestHolder_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
dom
{
template
<
typename
PromiseType
>
class
DOMMozPromiseRequestHolder
final
:
public
DOMEventTargetHelper
{
MozPromiseRequestHolder
<
PromiseType
>
mHolder
;
~
DOMMozPromiseRequestHolder
(
)
=
default
;
void
DisconnectFromOwner
(
)
override
{
mHolder
.
DisconnectIfExists
(
)
;
DOMEventTargetHelper
:
:
DisconnectFromOwner
(
)
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
MOZ_CRASH
(
"
illegal
method
"
)
;
}
public
:
explicit
DOMMozPromiseRequestHolder
(
nsIGlobalObject
*
aGlobal
)
:
DOMEventTargetHelper
(
aGlobal
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aGlobal
)
;
}
operator
MozPromiseRequestHolder
<
PromiseType
>
&
(
)
{
return
mHolder
;
}
operator
const
MozPromiseRequestHolder
<
PromiseType
>
&
(
)
const
{
return
mHolder
;
}
void
Complete
(
)
{
mHolder
.
Complete
(
)
;
}
void
DisconnectIfExists
(
)
{
mHolder
.
DisconnectIfExists
(
)
;
}
bool
Exists
(
)
const
{
return
mHolder
.
Exists
(
)
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
DOMMozPromiseRequestHolder
DOMEventTargetHelper
)
}
;
}
#
endif
