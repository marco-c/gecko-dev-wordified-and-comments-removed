#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
namespace
mozilla
{
namespace
dom
{
AutoTArray
<
RefPtr
<
DocGroup
>
2
>
*
DocGroup
:
:
sPendingDocGroups
=
nullptr
;
nsresult
DocGroup
:
:
GetKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aKey
)
{
nsresult
rv
=
aPrincipal
-
>
GetBaseDomain
(
aKey
)
;
if
(
NS_FAILED
(
rv
)
)
{
aKey
.
Truncate
(
)
;
}
return
rv
;
}
void
DocGroup
:
:
RemoveDocument
(
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mDocuments
.
Contains
(
aDocument
)
)
;
mDocuments
.
RemoveElement
(
aDocument
)
;
}
DocGroup
:
:
DocGroup
(
TabGroup
*
aTabGroup
const
nsACString
&
aKey
)
:
mKey
(
aKey
)
mTabGroup
(
aTabGroup
)
{
}
DocGroup
:
:
~
DocGroup
(
)
{
MOZ_ASSERT
(
mDocuments
.
IsEmpty
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
nsIEventTarget
*
target
=
EventTargetFor
(
TaskCategory
:
:
Other
)
;
NS_ProxyRelease
(
"
DocGroup
:
:
mReactionsStack
"
target
mReactionsStack
.
forget
(
)
)
;
}
mTabGroup
-
>
mDocGroups
.
RemoveEntry
(
mKey
)
;
}
nsresult
DocGroup
:
:
Dispatch
(
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
return
mTabGroup
-
>
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
nsISerialEventTarget
*
DocGroup
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
return
mTabGroup
-
>
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
DocGroup
:
:
AbstractMainThreadFor
(
TaskCategory
aCategory
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mTabGroup
-
>
AbstractMainThreadFor
(
aCategory
)
;
}
bool
*
DocGroup
:
:
GetValidAccessPtr
(
)
{
return
mTabGroup
-
>
GetValidAccessPtr
(
)
;
}
void
DocGroup
:
:
SignalSlotChange
(
const
HTMLSlotElement
*
aSlot
)
{
if
(
mSignalSlotList
.
Contains
(
aSlot
)
)
{
return
;
}
mSignalSlotList
.
AppendElement
(
const_cast
<
HTMLSlotElement
*
>
(
aSlot
)
)
;
if
(
!
sPendingDocGroups
)
{
nsDOMMutationObserver
:
:
QueueMutationObserverMicroTask
(
)
;
sPendingDocGroups
=
new
AutoTArray
<
RefPtr
<
DocGroup
>
2
>
;
}
sPendingDocGroups
-
>
AppendElement
(
this
)
;
}
}
}
