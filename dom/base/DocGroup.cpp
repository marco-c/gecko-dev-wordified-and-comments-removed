#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIURI
.
h
"
namespace
mozilla
{
namespace
dom
{
nsresult
DocGroup
:
:
GetKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aKey
)
{
aKey
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aPrincipal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_OK
;
}
if
(
!
uri
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIEffectiveTLDService
>
tldService
=
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
)
;
if
(
!
tldService
)
{
return
NS_ERROR_FAILURE
;
}
rv
=
tldService
-
>
GetBaseDomain
(
uri
0
aKey
)
;
if
(
NS_FAILED
(
rv
)
)
{
aKey
.
Truncate
(
)
;
}
return
NS_OK
;
}
void
DocGroup
:
:
RemoveDocument
(
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
mDocuments
.
Contains
(
aDocument
)
)
;
mDocuments
.
RemoveElement
(
aDocument
)
;
}
DocGroup
:
:
DocGroup
(
TabGroup
*
aTabGroup
const
nsACString
&
aKey
)
:
mKey
(
aKey
)
mTabGroup
(
aTabGroup
)
{
}
DocGroup
:
:
~
DocGroup
(
)
{
MOZ_ASSERT
(
mDocuments
.
IsEmpty
(
)
)
;
mTabGroup
-
>
mDocGroups
.
RemoveEntry
(
mKey
)
;
}
NS_IMPL_ISUPPORTS
(
DocGroup
nsISupports
)
nsresult
DocGroup
:
:
Dispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
return
mTabGroup
-
>
Dispatch
(
aName
aCategory
Move
(
aRunnable
)
)
;
}
nsIEventTarget
*
DocGroup
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
return
mTabGroup
-
>
EventTargetFor
(
aCategory
)
;
}
}
}
