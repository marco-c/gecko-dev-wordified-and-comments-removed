#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
PerformanceUtils
.
h
"
#
include
"
mozilla
/
ThrottledEventQueue
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
processthreadsapi
.
h
>
#
else
#
include
<
unistd
.
h
>
#
endif
namespace
mozilla
{
namespace
dom
{
AutoTArray
<
RefPtr
<
DocGroup
>
2
>
*
DocGroup
:
:
sPendingDocGroups
=
nullptr
;
nsresult
DocGroup
:
:
GetKey
(
nsIPrincipal
*
aPrincipal
nsACString
&
aKey
)
{
nsresult
rv
=
aPrincipal
-
>
GetBaseDomain
(
aKey
)
;
if
(
NS_FAILED
(
rv
)
)
{
aKey
.
Truncate
(
)
;
}
return
rv
;
}
void
DocGroup
:
:
RemoveDocument
(
Document
*
aDocument
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mDocuments
.
Contains
(
aDocument
)
)
;
mDocuments
.
RemoveElement
(
aDocument
)
;
}
DocGroup
:
:
DocGroup
(
TabGroup
*
aTabGroup
const
nsACString
&
aKey
const
nsID
&
aAgentClusterId
)
:
mKey
(
aKey
)
mTabGroup
(
aTabGroup
)
mAgentClusterId
(
aAgentClusterId
)
{
mPerformanceCounter
=
new
mozilla
:
:
PerformanceCounter
(
NS_LITERAL_CSTRING
(
"
DocGroup
:
"
)
+
aKey
)
;
}
DocGroup
:
:
~
DocGroup
(
)
{
MOZ_ASSERT
(
mDocuments
.
IsEmpty
(
)
)
;
if
(
!
NS_IsMainThread
(
)
)
{
nsIEventTarget
*
target
=
EventTargetFor
(
TaskCategory
:
:
Other
)
;
NS_ProxyRelease
(
"
DocGroup
:
:
mReactionsStack
"
target
mReactionsStack
.
forget
(
)
)
;
}
mTabGroup
-
>
mDocGroups
.
RemoveEntry
(
mKey
)
;
if
(
mIframePostMessageQueue
)
{
FlushIframePostMessageQueue
(
)
;
}
}
RefPtr
<
PerformanceInfoPromise
>
DocGroup
:
:
ReportPerformanceInfo
(
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mPerformanceCounter
)
;
#
if
defined
(
XP_WIN
)
uint32_t
pid
=
GetCurrentProcessId
(
)
;
#
else
uint32_t
pid
=
getpid
(
)
;
#
endif
uint64_t
windowID
=
0
;
uint16_t
count
=
0
;
uint64_t
duration
=
0
;
bool
isTopLevel
=
false
;
nsCString
host
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
top
;
RefPtr
<
AbstractThread
>
mainThread
;
for
(
const
auto
&
document
:
*
this
)
{
nsCOMPtr
<
Document
>
doc
=
document
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIURI
>
docURI
=
doc
-
>
GetDocumentURI
(
)
;
if
(
!
docURI
)
{
continue
;
}
docURI
-
>
GetHost
(
host
)
;
if
(
host
.
IsEmpty
(
)
)
{
host
=
docURI
-
>
GetSpecOrDefault
(
)
;
}
nsPIDOMWindowOuter
*
win
=
doc
-
>
GetWindow
(
)
;
if
(
!
win
)
{
continue
;
}
top
=
win
-
>
GetInProcessTop
(
)
;
if
(
!
top
)
{
continue
;
}
windowID
=
top
-
>
WindowID
(
)
;
isTopLevel
=
win
-
>
IsTopLevelWindow
(
)
;
mainThread
=
AbstractMainThreadFor
(
TaskCategory
:
:
Performance
)
;
break
;
}
MOZ_ASSERT
(
!
host
.
IsEmpty
(
)
)
;
duration
=
mPerformanceCounter
-
>
GetExecutionDuration
(
)
;
FallibleTArray
<
CategoryDispatch
>
items
;
for
(
uint32_t
index
=
0
;
index
<
(
uint32_t
)
TaskCategory
:
:
Count
;
index
+
+
)
{
TaskCategory
category
=
static_cast
<
TaskCategory
>
(
index
)
;
count
=
mPerformanceCounter
-
>
GetDispatchCount
(
DispatchCategory
(
category
)
)
;
CategoryDispatch
item
=
CategoryDispatch
(
index
count
)
;
if
(
!
items
.
AppendElement
(
item
fallible
)
)
{
NS_ERROR
(
"
Could
not
complete
the
operation
"
)
;
break
;
}
}
if
(
!
isTopLevel
)
{
return
PerformanceInfoPromise
:
:
CreateAndResolve
(
PerformanceInfo
(
host
pid
windowID
duration
mPerformanceCounter
-
>
GetID
(
)
false
isTopLevel
PerformanceMemoryInfo
(
)
items
)
__func__
)
;
}
MOZ_ASSERT
(
mainThread
)
;
RefPtr
<
DocGroup
>
self
=
this
;
return
CollectMemoryInfo
(
top
mainThread
)
-
>
Then
(
mainThread
__func__
[
self
host
pid
windowID
duration
isTopLevel
items
]
(
const
PerformanceMemoryInfo
&
aMemoryInfo
)
{
PerformanceInfo
info
=
PerformanceInfo
(
host
pid
windowID
duration
self
-
>
mPerformanceCounter
-
>
GetID
(
)
false
isTopLevel
aMemoryInfo
items
)
;
return
PerformanceInfoPromise
:
:
CreateAndResolve
(
std
:
:
move
(
info
)
__func__
)
;
}
[
self
]
(
const
nsresult
rv
)
{
return
PerformanceInfoPromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
)
;
}
nsresult
DocGroup
:
:
Dispatch
(
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
if
(
mPerformanceCounter
)
{
mPerformanceCounter
-
>
IncrementDispatchCounter
(
DispatchCategory
(
aCategory
)
)
;
}
return
mTabGroup
-
>
DispatchWithDocGroup
(
aCategory
std
:
:
move
(
aRunnable
)
this
)
;
}
nsISerialEventTarget
*
DocGroup
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
return
mTabGroup
-
>
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
DocGroup
:
:
AbstractMainThreadFor
(
TaskCategory
aCategory
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mTabGroup
-
>
AbstractMainThreadFor
(
aCategory
)
;
}
bool
*
DocGroup
:
:
GetValidAccessPtr
(
)
{
return
mTabGroup
-
>
GetValidAccessPtr
(
)
;
}
void
DocGroup
:
:
SignalSlotChange
(
HTMLSlotElement
&
aSlot
)
{
MOZ_ASSERT
(
!
mSignalSlotList
.
Contains
(
&
aSlot
)
)
;
mSignalSlotList
.
AppendElement
(
&
aSlot
)
;
if
(
!
sPendingDocGroups
)
{
nsDOMMutationObserver
:
:
QueueMutationObserverMicroTask
(
)
;
sPendingDocGroups
=
new
AutoTArray
<
RefPtr
<
DocGroup
>
2
>
;
}
sPendingDocGroups
-
>
AppendElement
(
this
)
;
}
bool
DocGroup
:
:
TryToLoadIframesInBackground
(
)
{
return
StaticPrefs
:
:
dom_separate_event_queue_for_post_message_enabled
(
)
&
&
StaticPrefs
:
:
dom_cross_origin_iframes_loaded_in_background
(
)
;
}
nsresult
DocGroup
:
:
QueueIframePostMessages
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
uint64_t
aWindowId
)
{
if
(
DocGroup
:
:
TryToLoadIframesInBackground
(
)
)
{
if
(
!
mIframePostMessageQueue
)
{
nsCOMPtr
<
nsISerialEventTarget
>
target
=
GetMainThreadSerialEventTarget
(
)
;
mIframePostMessageQueue
=
ThrottledEventQueue
:
:
Create
(
target
"
Background
Loading
Iframe
PostMessage
Queue
"
nsIRunnablePriority
:
:
PRIORITY_DEFERRED_TIMERS
)
;
nsresult
rv
=
mIframePostMessageQueue
-
>
SetIsPaused
(
true
)
;
MOZ_ALWAYS_SUCCEEDS
(
rv
)
;
}
MOZ_ASSERT
(
mIframePostMessageQueue
)
;
MOZ_ASSERT
(
mIframePostMessageQueue
-
>
IsPaused
(
)
)
;
mIframesUsedPostMessageQueue
.
PutEntry
(
aWindowId
)
;
mIframePostMessageQueue
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
NS_DISPATCH_NORMAL
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
void
DocGroup
:
:
TryFlushIframePostMessages
(
uint64_t
aWindowId
)
{
if
(
DocGroup
:
:
TryToLoadIframesInBackground
(
)
)
{
mIframesUsedPostMessageQueue
.
RemoveEntry
(
aWindowId
)
;
if
(
mIframePostMessageQueue
&
&
mIframesUsedPostMessageQueue
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
mIframePostMessageQueue
-
>
IsPaused
(
)
)
;
nsresult
rv
=
mIframePostMessageQueue
-
>
SetIsPaused
(
true
)
;
MOZ_ALWAYS_SUCCEEDS
(
rv
)
;
FlushIframePostMessageQueue
(
)
;
}
}
}
void
DocGroup
:
:
FlushIframePostMessageQueue
(
)
{
nsCOMPtr
<
nsIRunnable
>
event
;
while
(
(
event
=
mIframePostMessageQueue
-
>
GetEvent
(
)
)
)
{
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
}
}
void
DocGroup
:
:
MoveSignalSlotListTo
(
nsTArray
<
RefPtr
<
HTMLSlotElement
>
>
&
aDest
)
{
aDest
.
SetCapacity
(
aDest
.
Length
(
)
+
mSignalSlotList
.
Length
(
)
)
;
for
(
RefPtr
<
HTMLSlotElement
>
&
slot
:
mSignalSlotList
)
{
slot
-
>
RemovedFromSignalSlotList
(
)
;
aDest
.
AppendElement
(
std
:
:
move
(
slot
)
)
;
}
mSignalSlotList
.
Clear
(
)
;
}
bool
DocGroup
:
:
IsActive
(
)
const
{
for
(
Document
*
doc
:
mDocuments
)
{
if
(
doc
-
>
IsCurrentActiveDocument
(
)
)
{
return
true
;
}
}
return
false
;
}
}
}
