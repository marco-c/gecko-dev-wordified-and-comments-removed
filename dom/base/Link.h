#
ifndef
mozilla_dom_Link_h__
#
define
mozilla_dom_Link_h__
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
RustTypes
.
h
"
class
nsIURI
;
namespace
mozilla
{
class
SizeOfState
;
namespace
dom
{
class
Document
;
class
Element
;
struct
BindContext
;
#
define
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
\
{
\
0xb25edee6
0xdd35
0x4f8b
{
\
0xab
0x90
0x66
0xd0
0xbd
0x3c
0x22
0xd5
\
}
\
}
class
Link
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
)
enum
class
State
:
uint8_t
{
Unvisited
=
0
Visited
NotLink
}
;
explicit
Link
(
Element
*
aElement
)
;
explicit
Link
(
)
;
virtual
void
VisitedQueryFinished
(
bool
aVisited
)
;
nsIURI
*
GetURI
(
)
const
;
void
SetProtocol
(
const
nsAString
&
aProtocol
)
;
void
SetUsername
(
const
nsAString
&
aUsername
)
;
void
SetPassword
(
const
nsAString
&
aPassword
)
;
void
SetHost
(
const
nsAString
&
aHost
)
;
void
SetHostname
(
const
nsAString
&
aHostname
)
;
void
SetPathname
(
const
nsAString
&
aPathname
)
;
void
SetSearch
(
const
nsAString
&
aSearch
)
;
void
SetPort
(
const
nsAString
&
aPort
)
;
void
SetHash
(
const
nsAString
&
aHash
)
;
void
GetOrigin
(
nsAString
&
aOrigin
)
;
void
GetProtocol
(
nsAString
&
_protocol
)
;
void
GetUsername
(
nsAString
&
aUsername
)
;
void
GetPassword
(
nsAString
&
aPassword
)
;
void
GetHost
(
nsAString
&
_host
)
;
void
GetHostname
(
nsAString
&
_hostname
)
;
void
GetPathname
(
nsAString
&
_pathname
)
;
void
GetSearch
(
nsAString
&
_search
)
;
void
GetPort
(
nsAString
&
_port
)
;
void
GetHash
(
nsAString
&
_hash
)
;
void
ResetLinkState
(
bool
aNotify
bool
aHasHref
)
;
void
ResetLinkState
(
bool
aNotify
)
{
ResetLinkState
(
aNotify
ElementHasHref
(
)
)
;
}
void
BindToTree
(
const
BindContext
&
)
;
void
UnbindFromTree
(
)
{
ResetLinkState
(
false
)
;
}
Element
*
GetElement
(
)
const
{
return
mElement
;
}
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
SizeOfState
&
aState
)
const
;
virtual
bool
ElementHasHref
(
)
const
;
bool
HasPendingLinkUpdate
(
)
const
{
return
mHasPendingLinkUpdate
;
}
void
SetHasPendingLinkUpdate
(
)
{
mHasPendingLinkUpdate
=
true
;
}
void
ClearHasPendingLinkUpdate
(
)
{
mHasPendingLinkUpdate
=
false
;
}
void
TriggerLinkUpdate
(
bool
aNotify
)
;
virtual
void
NodeInfoChanged
(
Document
*
aOldDoc
)
=
0
;
protected
:
virtual
~
Link
(
)
;
nsIURI
*
GetCachedURI
(
)
const
{
return
mCachedURI
;
}
bool
HasCachedURI
(
)
const
{
return
!
!
mCachedURI
;
}
private
:
void
Unregister
(
)
;
void
SetLinkState
(
State
bool
aNotify
)
;
void
SetHrefAttribute
(
nsIURI
*
aURI
)
;
mutable
nsCOMPtr
<
nsIURI
>
mCachedURI
;
Element
*
const
mElement
;
bool
mNeedsRegistration
:
1
;
bool
mRegistered
:
1
;
bool
mHasPendingLinkUpdate
:
1
;
const
bool
mHistory
:
1
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
Link
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
)
}
}
#
endif
