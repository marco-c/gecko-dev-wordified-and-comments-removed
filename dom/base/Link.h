#
ifndef
mozilla_dom_Link_h__
#
define
mozilla_dom_Link_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentPolicy
.
h
"
namespace
mozilla
{
class
EventStates
;
class
SizeOfState
;
namespace
dom
{
class
Element
;
#
define
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
\
{
\
0xb25edee6
0xdd35
0x4f8b
{
\
0xab
0x90
0x66
0xd0
0xbd
0x3c
0x22
0xd5
\
}
\
}
class
Link
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
)
explicit
Link
(
Element
*
aElement
)
;
explicit
Link
(
)
;
virtual
void
SetLinkState
(
nsLinkState
aState
)
;
EventStates
LinkState
(
)
const
;
nsIURI
*
GetURI
(
)
const
;
virtual
nsIURI
*
GetURIExternal
(
)
const
{
return
GetURI
(
)
;
}
void
SetProtocol
(
const
nsAString
&
aProtocol
)
;
void
SetUsername
(
const
nsAString
&
aUsername
)
;
void
SetPassword
(
const
nsAString
&
aPassword
)
;
void
SetHost
(
const
nsAString
&
aHost
)
;
void
SetHostname
(
const
nsAString
&
aHostname
)
;
void
SetPathname
(
const
nsAString
&
aPathname
)
;
void
SetSearch
(
const
nsAString
&
aSearch
)
;
void
SetPort
(
const
nsAString
&
aPort
)
;
void
SetHash
(
const
nsAString
&
aHash
)
;
void
GetOrigin
(
nsAString
&
aOrigin
)
;
void
GetProtocol
(
nsAString
&
_protocol
)
;
void
GetUsername
(
nsAString
&
aUsername
)
;
void
GetPassword
(
nsAString
&
aPassword
)
;
void
GetHost
(
nsAString
&
_host
)
;
void
GetHostname
(
nsAString
&
_hostname
)
;
void
GetPathname
(
nsAString
&
_pathname
)
;
void
GetSearch
(
nsAString
&
_search
)
;
void
GetPort
(
nsAString
&
_port
)
;
void
GetHash
(
nsAString
&
_hash
)
;
void
ResetLinkState
(
bool
aNotify
bool
aHasHref
)
;
Element
*
GetElement
(
)
const
{
return
mElement
;
}
virtual
void
OnDNSPrefetchDeferred
(
)
{
}
virtual
void
OnDNSPrefetchRequested
(
)
{
}
virtual
bool
HasDeferredDNSPrefetchRequest
(
)
{
return
true
;
}
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
SizeOfState
&
aState
)
const
;
virtual
bool
ElementHasHref
(
)
const
;
void
TryDNSPrefetch
(
)
;
void
CancelDNSPrefetch
(
nsWrapperCache
:
:
FlagsType
aDeferredFlag
nsWrapperCache
:
:
FlagsType
aRequestedFlag
)
;
void
TryDNSPrefetchOrPreconnectOrPrefetchOrPreloadOrPrerender
(
)
;
void
UpdatePreload
(
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
)
;
void
CancelPrefetchOrPreload
(
)
;
bool
HasPendingLinkUpdate
(
)
const
{
return
mHasPendingLinkUpdate
;
}
void
SetHasPendingLinkUpdate
(
)
{
mHasPendingLinkUpdate
=
true
;
}
void
ClearHasPendingLinkUpdate
(
)
{
mHasPendingLinkUpdate
=
false
;
}
virtual
void
NodeInfoChanged
(
nsIDocument
*
aOldDoc
)
=
0
;
bool
IsInDNSPrefetch
(
)
{
return
mInDNSPrefetch
;
}
void
SetIsInDNSPrefetch
(
)
{
mInDNSPrefetch
=
true
;
}
void
ClearIsInDNSPrefetch
(
)
{
mInDNSPrefetch
=
false
;
}
static
void
ParseAsValue
(
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
;
static
nsContentPolicyType
AsValueToContentPolicy
(
const
nsAttrValue
&
aValue
)
;
protected
:
virtual
~
Link
(
)
;
bool
HasURI
(
)
const
{
if
(
HasCachedURI
(
)
)
{
return
true
;
}
return
!
!
GetURI
(
)
;
}
nsIURI
*
GetCachedURI
(
)
const
{
return
mCachedURI
;
}
bool
HasCachedURI
(
)
const
{
return
!
!
mCachedURI
;
}
private
:
void
UnregisterFromHistory
(
)
;
void
SetHrefAttribute
(
nsIURI
*
aURI
)
;
void
GetContentPolicyMimeTypeMedia
(
nsAttrValue
&
aAsAttr
nsContentPolicyType
&
aPolicyType
nsString
&
aMimeType
nsAString
&
aMedia
)
;
mutable
nsCOMPtr
<
nsIURI
>
mCachedURI
;
Element
*
const
mElement
;
uint16_t
mLinkState
;
bool
mNeedsRegistration
:
1
;
bool
mRegistered
:
1
;
bool
mHasPendingLinkUpdate
:
1
;
bool
mInDNSPrefetch
:
1
;
bool
mHistory
:
1
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
Link
MOZILLA_DOM_LINK_IMPLEMENTATION_IID
)
enum
ASDestination
:
uint8_t
{
DESTINATION_INVALID
DESTINATION_AUDIO
DESTINATION_DOCUMENT
DESTINATION_EMBED
DESTINATION_FONT
DESTINATION_IMAGE
DESTINATION_MANIFEST
DESTINATION_OBJECT
DESTINATION_REPORT
DESTINATION_SCRIPT
DESTINATION_SERVICEWORKER
DESTINATION_SHAREDWORKER
DESTINATION_STYLE
DESTINATION_TRACK
DESTINATION_VIDEO
DESTINATION_WORKER
DESTINATION_XSLT
DESTINATION_FETCH
}
;
}
}
#
endif
