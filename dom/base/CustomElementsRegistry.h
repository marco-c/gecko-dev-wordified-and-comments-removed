#
ifndef
mozilla_dom_CustomElementsRegistry_h
#
define
mozilla_dom_CustomElementsRegistry_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
FunctionBinding
.
h
"
class
nsDocument
;
namespace
mozilla
{
namespace
dom
{
struct
CustomElementData
;
struct
ElementDefinitionOptions
;
struct
LifecycleCallbacks
;
class
CallbackFunction
;
class
Function
;
class
Promise
;
struct
LifecycleCallbackArgs
{
nsString
name
;
nsString
oldValue
;
nsString
newValue
;
}
;
class
CustomElementCallback
{
public
:
CustomElementCallback
(
Element
*
aThisObject
nsIDocument
:
:
ElementCallbackType
aCallbackType
CallbackFunction
*
aCallback
CustomElementData
*
aOwnerData
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
;
void
Call
(
)
;
void
SetArgs
(
LifecycleCallbackArgs
&
aArgs
)
{
MOZ_ASSERT
(
mType
=
=
nsIDocument
:
:
eAttributeChanged
"
Arguments
are
only
used
by
attribute
changed
callback
.
"
)
;
mArgs
=
aArgs
;
}
private
:
RefPtr
<
Element
>
mThisObject
;
RefPtr
<
CallbackFunction
>
mCallback
;
nsIDocument
:
:
ElementCallbackType
mType
;
LifecycleCallbackArgs
mArgs
;
CustomElementData
*
mOwnerData
;
}
;
struct
CustomElementData
{
NS_INLINE_DECL_REFCOUNTING
(
CustomElementData
)
explicit
CustomElementData
(
nsIAtom
*
aType
)
;
nsTArray
<
nsAutoPtr
<
CustomElementCallback
>
>
mCallbackQueue
;
nsCOMPtr
<
nsIAtom
>
mType
;
int32_t
mCurrentCallback
;
bool
mElementIsBeingCreated
;
bool
mCreatedCallbackInvoked
;
int32_t
mAssociatedMicroTask
;
void
RunCallbackQueue
(
)
;
private
:
virtual
~
CustomElementData
(
)
{
}
}
;
class
CustomElementHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
CustomElementHashKey
*
KeyType
;
typedef
const
CustomElementHashKey
*
KeyTypePointer
;
CustomElementHashKey
(
int32_t
aNamespaceID
nsIAtom
*
aAtom
)
:
mNamespaceID
(
aNamespaceID
)
mAtom
(
aAtom
)
{
}
explicit
CustomElementHashKey
(
const
CustomElementHashKey
*
aKey
)
:
mNamespaceID
(
aKey
-
>
mNamespaceID
)
mAtom
(
aKey
-
>
mAtom
)
{
}
~
CustomElementHashKey
(
)
{
}
KeyType
GetKey
(
)
const
{
return
const_cast
<
KeyType
>
(
this
)
;
}
bool
KeyEquals
(
const
KeyTypePointer
aKey
)
const
{
MOZ_ASSERT
(
mNamespaceID
!
=
kNameSpaceID_Unknown
"
This
equals
method
is
not
transitive
nor
symmetric
.
"
"
A
key
with
a
namespace
of
kNamespaceID_Unknown
should
"
"
not
be
stored
in
a
hashtable
.
"
)
;
return
(
kNameSpaceID_Unknown
=
=
aKey
-
>
mNamespaceID
|
|
mNamespaceID
=
=
aKey
-
>
mNamespaceID
)
&
&
aKey
-
>
mAtom
=
=
mAtom
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
aKey
;
}
static
PLDHashNumber
HashKey
(
const
KeyTypePointer
aKey
)
{
return
aKey
-
>
mAtom
-
>
hash
(
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
int32_t
mNamespaceID
;
nsCOMPtr
<
nsIAtom
>
mAtom
;
}
;
struct
CustomElementDefinition
{
CustomElementDefinition
(
JSObject
*
aPrototype
nsIAtom
*
aType
nsIAtom
*
aLocalName
mozilla
:
:
dom
:
:
LifecycleCallbacks
*
aCallbacks
uint32_t
aNamespaceID
uint32_t
aDocOrder
)
;
JS
:
:
Heap
<
JSObject
*
>
mPrototype
;
nsCOMPtr
<
nsIAtom
>
mType
;
nsCOMPtr
<
nsIAtom
>
mLocalName
;
nsAutoPtr
<
mozilla
:
:
dom
:
:
LifecycleCallbacks
>
mCallbacks
;
bool
mElementIsBeingCreated
;
int32_t
mNamespaceID
;
uint32_t
mDocOrder
;
}
;
class
CustomElementsRegistry
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
:
:
nsDocument
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
CustomElementsRegistry
)
public
:
static
bool
IsCustomElementsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
already_AddRefed
<
CustomElementsRegistry
>
Create
(
nsPIDOMWindowInner
*
aWindow
)
;
static
void
ProcessTopElementQueue
(
)
;
static
void
XPCOMShutdown
(
)
;
CustomElementDefinition
*
LookupCustomElementDefinition
(
const
nsAString
&
aLocalName
const
nsAString
*
aIs
=
nullptr
)
const
;
void
SetupCustomElement
(
Element
*
aElement
const
nsAString
*
aTypeExtension
)
;
void
EnqueueLifecycleCallback
(
nsIDocument
:
:
ElementCallbackType
aType
Element
*
aCustomElement
LifecycleCallbackArgs
*
aArgs
CustomElementDefinition
*
aDefinition
)
;
void
GetCustomPrototype
(
nsIAtom
*
aAtom
JS
:
:
MutableHandle
<
JSObject
*
>
aPrototype
)
;
private
:
explicit
CustomElementsRegistry
(
nsPIDOMWindowInner
*
aWindow
)
;
~
CustomElementsRegistry
(
)
;
void
RegisterUnresolvedElement
(
Element
*
aElement
nsIAtom
*
aTypeName
=
nullptr
)
;
typedef
nsClassHashtable
<
CustomElementHashKey
CustomElementDefinition
>
DefinitionMap
;
typedef
nsClassHashtable
<
CustomElementHashKey
nsTArray
<
nsWeakPtr
>
>
CandidateMap
;
DefinitionMap
mCustomDefinitions
;
CandidateMap
mCandidatesMap
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
static
mozilla
:
:
Maybe
<
nsTArray
<
RefPtr
<
CustomElementData
>
>
>
sProcessingStack
;
public
:
nsISupports
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
Get
(
JSContext
*
cx
const
nsAString
&
name
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
WhenDefined
(
const
nsAString
&
name
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
