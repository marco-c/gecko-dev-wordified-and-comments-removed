#
ifndef
mozilla_dom_CustomElementsRegistry_h
#
define
mozilla_dom_CustomElementsRegistry_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
FunctionBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
ElementDefinitionOptions
;
struct
LifecycleCallbacks
;
class
Function
;
class
Promise
;
class
CustomElementsRegistry
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
CustomElementsRegistry
)
public
:
static
bool
IsCustomElementsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
;
static
already_AddRefed
<
CustomElementsRegistry
>
Create
(
nsPIDOMWindowInner
*
aWindow
)
;
already_AddRefed
<
nsIDocument
>
GetOwnerDocument
(
)
const
;
private
:
explicit
CustomElementsRegistry
(
nsPIDOMWindowInner
*
aWindow
)
;
~
CustomElementsRegistry
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
public
:
nsISupports
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
Get
(
JSContext
*
cx
const
nsAString
&
name
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
WhenDefined
(
const
nsAString
&
name
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
