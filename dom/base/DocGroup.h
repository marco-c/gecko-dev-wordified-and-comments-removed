#
ifndef
DocGroup_h
#
define
DocGroup_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSlotElement
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
class
AbstractThread
;
namespace
dom
{
class
CustomElementReactionsStack
;
class
JSExecutionManager
;
class
DocGroup
final
{
public
:
typedef
nsTArray
<
Document
*
>
:
:
iterator
Iterator
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
DocGroup
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
DocGroup
)
static
already_AddRefed
<
DocGroup
>
Create
(
BrowsingContextGroup
*
aBrowsingContextGroup
const
DocGroupKey
&
aKey
)
;
void
AssertMatches
(
const
Document
*
aDocument
)
const
;
const
DocGroupKey
&
GetKey
(
)
const
{
return
mKey
;
}
bool
IsOriginKeyed
(
)
const
{
return
mKey
.
mOriginKeyed
;
}
JSExecutionManager
*
GetExecutionManager
(
)
const
{
return
mExecutionManager
;
}
void
SetExecutionManager
(
JSExecutionManager
*
)
;
BrowsingContextGroup
*
GetBrowsingContextGroup
(
)
const
{
return
mBrowsingContextGroup
;
}
mozilla
:
:
dom
:
:
DOMArena
*
ArenaAllocator
(
)
{
return
mArena
;
}
mozilla
:
:
dom
:
:
CustomElementReactionsStack
*
CustomElementReactionsStack
(
)
;
void
AddDocument
(
Document
*
aDocument
)
;
void
RemoveDocument
(
Document
*
aDocument
)
;
Iterator
begin
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mDocuments
.
begin
(
)
;
}
Iterator
end
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mDocuments
.
end
(
)
;
}
bool
*
GetValidAccessPtr
(
)
;
void
SignalSlotChange
(
HTMLSlotElement
&
aSlot
)
;
nsTArray
<
RefPtr
<
HTMLSlotElement
>
>
MoveSignalSlotList
(
)
;
static
AutoTArray
<
RefPtr
<
DocGroup
>
2
>
*
sPendingDocGroups
;
bool
IsActive
(
)
const
;
const
nsID
&
AgentClusterId
(
)
const
{
return
mAgentClusterId
;
}
bool
IsEmpty
(
)
const
{
return
mDocuments
.
IsEmpty
(
)
;
}
private
:
DocGroup
(
BrowsingContextGroup
*
aBrowsingContextGroup
const
DocGroupKey
&
aKey
)
;
~
DocGroup
(
)
;
DocGroupKey
mKey
;
nsTArray
<
Document
*
>
mDocuments
;
RefPtr
<
mozilla
:
:
dom
:
:
CustomElementReactionsStack
>
mReactionsStack
;
nsTArray
<
RefPtr
<
HTMLSlotElement
>
>
mSignalSlotList
;
RefPtr
<
BrowsingContextGroup
>
mBrowsingContextGroup
;
RefPtr
<
JSExecutionManager
>
mExecutionManager
;
const
nsID
mAgentClusterId
;
RefPtr
<
mozilla
:
:
dom
:
:
DOMArena
>
mArena
;
}
;
}
}
#
endif
