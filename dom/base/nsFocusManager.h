#
ifndef
nsFocusManager_h___
#
define
nsFocusManager_h___
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIFocusManager
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
define
FOCUSMETHOD_MASK
0xF000
#
define
FOCUSMETHODANDRING_MASK
0xF0F000
#
define
FOCUSMANAGER_CONTRACTID
"
mozilla
.
org
/
focus
-
manager
;
1
"
class
nsIContent
;
class
nsIDocShellTreeItem
;
class
nsPIDOMWindowOuter
;
class
nsIMessageBroadcaster
;
namespace
mozilla
{
namespace
dom
{
class
TabParent
;
}
}
struct
nsDelayedBlurOrFocusEvent
;
class
nsFocusManager
final
:
public
nsIFocusManager
public
nsIObserver
public
nsSupportsWeakReference
{
typedef
mozilla
:
:
widget
:
:
InputContextAction
InputContextAction
;
public
:
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
nsFocusManager
nsIFocusManager
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIFOCUSMANAGER
static
nsresult
Init
(
)
;
static
void
Shutdown
(
)
;
static
nsFocusManager
*
GetFocusManager
(
)
{
return
sInstance
;
}
nsIContent
*
GetFocusedContent
(
)
{
return
mFocusedContent
;
}
nsPIDOMWindowOuter
*
GetFocusedWindow
(
)
const
{
return
mFocusedWindow
;
}
nsPIDOMWindowOuter
*
GetActiveWindow
(
)
const
{
return
mActiveWindow
;
}
nsresult
ContentRemoved
(
nsIDocument
*
aDocument
nsIContent
*
aContent
)
;
already_AddRefed
<
nsIDocument
>
SetMouseButtonHandlingDocument
(
nsIDocument
*
aDocument
)
{
nsCOMPtr
<
nsIDocument
>
handlingDocument
=
mMouseButtonEventHandlingDocument
;
mMouseButtonEventHandlingDocument
=
aDocument
;
return
handlingDocument
.
forget
(
)
;
}
void
UpdateCaretForCaretBrowsingMode
(
)
;
static
nsIContent
*
GetFocusedDescendant
(
nsPIDOMWindowOuter
*
aWindow
bool
aDeep
nsPIDOMWindowOuter
*
*
aFocusedWindow
)
;
static
nsIContent
*
GetRedirectedFocus
(
nsIContent
*
aContent
)
;
static
InputContextAction
:
:
Cause
GetFocusMoveActionCause
(
uint32_t
aFlags
)
;
static
bool
sMouseFocusesFormControl
;
static
void
MarkUncollectableForCCGeneration
(
uint32_t
aGeneration
)
;
protected
:
nsFocusManager
(
)
;
~
nsFocusManager
(
)
;
void
EnsureCurrentWidgetFocused
(
)
;
void
ActivateOrDeactivateChildren
(
nsIMessageBroadcaster
*
aManager
bool
aActive
)
;
void
ActivateOrDeactivate
(
nsPIDOMWindowOuter
*
aWindow
bool
aActive
)
;
void
SetFocusInner
(
nsIContent
*
aNewContent
int32_t
aFlags
bool
aFocusChanged
bool
aAdjustWidget
)
;
bool
IsSameOrAncestor
(
nsPIDOMWindowOuter
*
aPossibleAncestor
nsPIDOMWindowOuter
*
aWindow
)
;
already_AddRefed
<
nsPIDOMWindowOuter
>
GetCommonAncestor
(
nsPIDOMWindowOuter
*
aWindow1
nsPIDOMWindowOuter
*
aWindow2
)
;
void
AdjustWindowFocus
(
nsPIDOMWindowOuter
*
aNewWindow
bool
aCheckPermission
)
;
bool
IsWindowVisible
(
nsPIDOMWindowOuter
*
aWindow
)
;
bool
IsNonFocusableRoot
(
nsIContent
*
aContent
)
;
nsIContent
*
CheckIfFocusable
(
nsIContent
*
aContent
uint32_t
aFlags
)
;
bool
Blur
(
nsPIDOMWindowOuter
*
aWindowToClear
nsPIDOMWindowOuter
*
aAncestorWindowToFocus
bool
aIsLeavingDocument
bool
aAdjustWidget
nsIContent
*
aContentToFocus
=
nullptr
)
;
void
Focus
(
nsPIDOMWindowOuter
*
aWindow
nsIContent
*
aContent
uint32_t
aFlags
bool
aIsNewDocument
bool
aFocusChanged
bool
aWindowRaised
bool
aAdjustWidget
nsIContent
*
aContentLostFocus
=
nullptr
)
;
void
SendFocusOrBlurEvent
(
mozilla
:
:
EventMessage
aEventMessage
nsIPresShell
*
aPresShell
nsIDocument
*
aDocument
nsISupports
*
aTarget
uint32_t
aFocusMethod
bool
aWindowRaised
bool
aIsRefocus
=
false
mozilla
:
:
dom
:
:
EventTarget
*
aRelatedTarget
=
nullptr
)
;
void
FireFocusOrBlurEvent
(
mozilla
:
:
EventMessage
aEventMessage
nsIPresShell
*
aPresShell
nsISupports
*
aTarget
bool
aWindowRaised
bool
aIsRefocus
=
false
mozilla
:
:
dom
:
:
EventTarget
*
aRelatedTarget
=
nullptr
)
;
void
FireFocusInOrOutEvent
(
mozilla
:
:
EventMessage
aEventMessage
nsIPresShell
*
aPresShell
nsISupports
*
aTarget
nsPIDOMWindowOuter
*
aCurrentFocusedWindow
nsIContent
*
aCurrentFocusedContent
mozilla
:
:
dom
:
:
EventTarget
*
aRelatedTarget
=
nullptr
)
;
void
ScrollIntoView
(
nsIPresShell
*
aPresShell
nsIContent
*
aContent
uint32_t
aFlags
)
;
void
RaiseWindow
(
nsPIDOMWindowOuter
*
aWindow
)
;
void
UpdateCaret
(
bool
aMoveCaretToFocus
bool
aUpdateVisibility
nsIContent
*
aContent
)
;
void
MoveCaretToFocus
(
nsIPresShell
*
aPresShell
nsIContent
*
aContent
)
;
nsresult
SetCaretVisible
(
nsIPresShell
*
aPresShell
bool
aVisible
nsIContent
*
aContent
)
;
nsresult
GetSelectionLocation
(
nsIDocument
*
aDocument
nsIPresShell
*
aPresShell
nsIContent
*
*
aStartContent
nsIContent
*
*
aEndContent
)
;
nsresult
DetermineElementToMoveFocus
(
nsPIDOMWindowOuter
*
aWindow
nsIContent
*
aStart
int32_t
aType
bool
aNoParentTraversal
nsIContent
*
*
aNextContent
)
;
nsresult
GetNextTabbableContent
(
nsIPresShell
*
aPresShell
nsIContent
*
aRootContent
nsIContent
*
aOriginalStartContent
nsIContent
*
aStartContent
bool
aForward
int32_t
aCurrentTabIndex
bool
aIgnoreTabIndex
bool
aForDocumentNavigation
nsIContent
*
*
aResultContent
)
;
nsIContent
*
GetNextTabbableMapArea
(
bool
aForward
int32_t
aCurrentTabIndex
nsIContent
*
aImageContent
nsIContent
*
aStartContent
)
;
int32_t
GetNextTabIndex
(
nsIContent
*
aParent
int32_t
aCurrentTabIndex
bool
aForward
)
;
nsresult
FocusFirst
(
nsIContent
*
aRootContent
nsIContent
*
*
aNextContent
)
;
nsIContent
*
GetRootForFocus
(
nsPIDOMWindowOuter
*
aWindow
nsIDocument
*
aDocument
bool
aForDocumentNavigation
bool
aCheckVisibility
)
;
nsIContent
*
GetRootForChildDocument
(
nsIContent
*
aContent
)
;
void
GetFocusInSelection
(
nsPIDOMWindowOuter
*
aWindow
nsIContent
*
aStartSelection
nsIContent
*
aEndSelection
nsIContent
*
*
aFocusedContent
)
;
private
:
static
void
NotifyFocusStateChange
(
nsIContent
*
aContent
bool
aWindowShouldShowFocusRing
bool
aGettingFocus
)
;
void
SetFocusedWindowInternal
(
nsPIDOMWindowOuter
*
aWindow
)
;
void
NotifyCurrentTopLevelContentWindowChange
(
nsPIDOMWindowOuter
*
aWindow
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mActiveWindow
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mFocusedWindow
;
nsCOMPtr
<
nsIContent
>
mFocusedContent
;
nsCOMPtr
<
nsIContent
>
mFirstBlurEvent
;
nsCOMPtr
<
nsIContent
>
mFirstFocusEvent
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mWindowBeingLowered
;
nsTArray
<
nsDelayedBlurOrFocusEvent
>
mDelayedBlurFocusEvents
;
nsCOMPtr
<
nsIDocument
>
mMouseButtonEventHandlingDocument
;
static
bool
sTestMode
;
static
nsFocusManager
*
sInstance
;
}
;
nsresult
NS_NewFocusManager
(
nsIFocusManager
*
*
aResult
)
;
#
endif
