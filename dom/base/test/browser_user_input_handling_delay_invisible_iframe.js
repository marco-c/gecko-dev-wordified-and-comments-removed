async
function
test_user_input_handling_delay_helper
(
prefs
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
prefs
}
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
data
:
text
/
html
<
body
>
<
iframe
width
=
"
1
"
height
=
"
1
"
style
=
"
position
:
absolute
;
top
:
-
9999px
;
left
:
-
9999px
;
border
-
style
:
none
"
src
=
"
https
:
/
/
example
.
org
/
dom
/
base
/
test
/
empty
.
html
"
>
<
/
iframe
>
<
input
/
>
<
/
body
>
)
;
await
BrowserTestUtils
.
reloadTab
(
tab
)
;
let
iframeFocused
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
function
(
)
{
return
content
.
document
.
activeElement
=
=
iframe
;
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
content
.
document
.
querySelector
(
"
iframe
"
)
.
focus
(
)
;
}
)
;
await
iframeFocused
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
const
inputGetFocused
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForEvent
(
content
.
document
.
querySelector
(
"
input
"
)
"
focus
"
)
;
}
)
.
then
(
function
(
)
{
Assert
.
ok
(
true
"
Invisible
OOP
iframe
shouldn
'
t
prevent
user
input
event
handling
"
)
;
}
)
;
let
iframeBC
=
tab
.
linkedBrowser
.
browsingContext
.
children
[
0
]
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
iframeBC
)
;
await
inputGetFocused
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
test_InvisibleIframe
(
)
{
const
prefs
=
[
[
"
dom
.
input_events
.
security
.
minNumTicks
"
3
]
[
"
dom
.
input_events
.
security
.
minTimeElapsedInMS
"
0
]
[
"
dom
.
input_events
.
security
.
isUserInputHandlingDelayTest
"
true
]
]
;
await
test_user_input_handling_delay_helper
(
prefs
)
;
}
)
;
