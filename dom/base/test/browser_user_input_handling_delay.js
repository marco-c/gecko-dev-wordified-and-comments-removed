async
function
test_user_input_handling_delay_helper
(
prefs
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
prefs
}
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
data
:
text
/
html
<
body
>
<
/
body
>
)
;
let
canHandleInput
=
false
;
let
mouseDownPromise
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
mousedown
"
)
.
then
(
function
(
)
{
Assert
.
ok
(
canHandleInput
"
This
promise
should
be
resolved
after
the
5
seconds
mark
has
passed
"
)
;
}
)
;
for
(
let
i
=
0
;
i
<
10
;
+
+
i
)
{
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
10
10
{
type
:
"
mousedown
"
}
tab
.
linkedBrowser
)
;
}
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
300
;
+
+
i
)
{
await
new
Promise
(
r
=
>
{
content
.
requestAnimationFrame
(
r
)
;
}
)
;
}
}
)
;
canHandleInput
=
true
;
await
BrowserTestUtils
.
synthesizeMouseAtPoint
(
10
10
{
type
:
"
mousedown
"
}
tab
.
linkedBrowser
)
;
await
mouseDownPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
test_MinRAF
(
)
{
const
prefs
=
[
[
"
dom
.
input_events
.
security
.
minNumTicks
"
100
]
[
"
dom
.
input_events
.
security
.
minTimeElapsedInMS
"
0
]
[
"
dom
.
input_events
.
security
.
isUserInputHandlingDelayTest
"
true
]
]
;
await
test_user_input_handling_delay_helper
(
prefs
)
;
}
)
;
add_task
(
async
function
test_MinElapsedTime
(
)
{
const
prefs
=
[
[
"
dom
.
input_events
.
security
.
minNumTicks
"
0
]
[
"
dom
.
input_events
.
security
.
minTimeElapsedInMS
"
5000
]
[
"
dom
.
input_events
.
security
.
isUserInputHandlingDelayTest
"
true
]
]
;
await
test_user_input_handling_delay_helper
(
prefs
)
;
}
)
;
