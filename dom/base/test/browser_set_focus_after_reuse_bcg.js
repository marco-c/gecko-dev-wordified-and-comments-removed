const
SITE_A_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
file_set_focus_after_reuse_bcg_1
.
html
"
;
const
SITE_B_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
org
"
)
+
"
file_set_focus_after_reuse_bcg_2
.
html
"
;
async
function
test_set_focus_after_reuse_bcg
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
SITE_A_URL
)
;
async
function
clickButtonToNavigateSiteB
(
)
{
const
siteBLoaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
SITE_B_URL
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
var
button
=
content
.
document
.
querySelector
(
"
button
"
)
;
button
.
click
(
)
;
}
)
;
await
siteBLoaded
;
}
async
function
clickButtonToEmbedIframe
(
)
{
const
embeddedIframeLoaded
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
await
new
Promise
(
r
=
>
{
const
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
iframe
.
onload
=
r
;
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
var
button
=
content
.
document
.
querySelector
(
"
button
"
)
;
button
.
click
(
)
;
}
)
;
await
embeddedIframeLoaded
;
}
await
clickButtonToNavigateSiteB
(
)
;
await
clickButtonToEmbedIframe
(
)
;
const
pageNavigatedBackToSite1
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
pageshow
"
)
;
tab
.
linkedBrowser
.
goBack
(
)
;
await
pageNavigatedBackToSite1
;
await
BrowserTestUtils
.
reloadTab
(
tab
true
)
;
await
clickButtonToNavigateSiteB
(
)
;
await
clickButtonToEmbedIframe
(
)
;
const
activeBCInIframeProcess
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
iframe
=
content
.
document
.
querySelector
(
"
iframe
"
)
;
return
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
const
FocusManager
=
SpecialPowers
.
Services
.
focus
;
return
FocusManager
.
activeBrowsingContext
;
}
)
;
}
)
;
Assert
.
ok
(
!
!
activeBCInIframeProcess
"
activeBC
should
be
set
to
the
iframe
process
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
(
)
{
await
test_set_focus_after_reuse_bcg
(
)
;
}
)
;
