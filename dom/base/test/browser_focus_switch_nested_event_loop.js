"
use
strict
"
;
const
TAB
=
data
:
text
/
html
<
html
>
<
body
>
<
input
id
=
"
input1
"
onblur
=
"
alert
(
1
)
"
>
<
input
id
=
"
input2
"
>
<
/
body
>
<
/
html
>
;
function
waitForInputFocused
(
tab
inputId
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
inputId
]
async
inputId
=
>
{
let
input
=
content
.
document
.
getElementById
(
inputId
)
;
let
inputFocused
=
new
Promise
(
r
=
>
{
input
.
addEventListener
(
"
focus
"
function
(
)
{
r
(
)
;
}
)
;
}
)
;
content
.
document
.
getElementById
(
inputId
)
.
focus
(
)
;
await
inputFocused
;
}
)
;
}
add_task
(
async
function
test_focusSwitchNestedEventLoop
(
)
{
waitForExplicitFinish
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TAB
true
)
;
await
waitForInputFocused
(
tab
"
input1
"
)
;
let
promptPromise
=
BrowserTestUtils
.
promiseAlertDialogOpen
(
)
;
let
input2FocusedPromise
=
waitForInputFocused
(
tab
"
input2
"
)
;
let
prompt
=
await
promptPromise
;
let
dialog
=
prompt
.
document
.
querySelector
(
"
dialog
"
)
;
dialog
.
cancelDialog
(
)
;
await
input2FocusedPromise
;
let
input2BlurredPromise
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
input
=
content
.
document
.
getElementById
(
"
input2
"
)
;
let
inputBlurred
=
new
Promise
(
r
=
>
{
input
.
addEventListener
(
"
blur
"
function
(
)
{
r
(
)
;
}
)
;
}
)
;
await
inputBlurred
;
}
)
;
await
waitForInputFocused
(
tab
"
input1
"
)
;
await
input2BlurredPromise
;
ok
(
true
"
input2
is
now
correctly
blurred
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
