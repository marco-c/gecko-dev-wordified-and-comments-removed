"
use
strict
"
;
requestLongerTimeout
(
2
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
dom
/
base
/
test
/
fullscreen
/
fullscreen_helpers
.
js
"
this
)
;
SimpleTest
.
ignoreAllUncaughtExceptions
(
true
)
;
add_setup
(
async
function
(
)
{
await
pushPrefs
(
[
"
full
-
screen
-
api
.
transition
-
duration
.
enter
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
transition
-
duration
.
leave
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
)
;
}
)
;
async
function
startTests
(
testFun
name
)
{
TEST_URLS
.
forEach
(
url
=
>
{
add_task
(
async
(
)
=
>
{
info
(
Test
{
name
}
url
:
{
url
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
(
browser
)
{
let
promiseFsState
=
waitForFullscreenState
(
document
true
)
;
SpecialPowers
.
spawn
(
browser
.
browsingContext
.
children
[
0
]
.
children
[
0
]
[
]
function
(
)
{
content
.
setTimeout
(
(
)
=
>
{
content
.
document
.
getElementById
(
"
div
"
)
.
click
(
)
;
}
0
)
;
}
)
;
await
promiseFsState
;
promiseFsState
=
waitForFullscreenState
(
document
false
true
)
;
await
testFun
(
browser
)
;
await
promiseFsState
;
if
(
window
.
fullScreen
)
{
info
(
"
still
in
fullscreen
wait
again
"
)
;
await
waitForFullscreenState
(
document
false
true
)
;
}
ok
(
!
window
.
fullScreen
"
The
chrome
window
should
not
be
in
fullscreen
"
)
;
ok
(
!
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
"
The
chrome
document
should
not
be
in
fullscreen
"
)
;
}
)
;
}
)
;
}
)
;
}
function
MutateAndNavigateFromRemoteDocument
(
aBrowsingContext
aElementId
aURL
)
{
return
SpecialPowers
.
spawn
(
aBrowsingContext
[
aElementId
aURL
]
async
function
(
id
url
)
{
let
element
=
content
.
document
.
getElementById
(
id
)
;
element
.
requestFullscreen
(
)
;
content
.
document
.
body
.
appendChild
(
element
)
;
content
.
location
.
href
=
url
;
}
)
;
}
startTests
(
async
browser
=
>
{
await
MutateAndNavigateFromRemoteDocument
(
browser
.
browsingContext
"
div
"
"
about
:
blank
"
)
;
}
"
document_mutation_navigation_toplevel
"
)
;
startTests
(
async
browser
=
>
{
let
promiseRemoteFsState
=
waitRemoteFullscreenExitEvents
(
[
[
browser
.
browsingContext
"
toplevel
"
]
]
)
;
await
MutateAndNavigateFromRemoteDocument
(
browser
.
browsingContext
.
children
[
0
]
"
div
"
"
about
:
blank
"
)
;
await
promiseRemoteFsState
;
}
"
document_mutation_navigation_middle_frame
"
)
;
startTests
(
async
browser
=
>
{
let
promiseRemoteFsState
=
waitRemoteFullscreenExitEvents
(
[
[
browser
.
browsingContext
"
toplevel
"
]
[
browser
.
browsingContext
.
children
[
0
]
"
middle
"
]
]
)
;
await
MutateAndNavigateFromRemoteDocument
(
browser
.
browsingContext
.
children
[
0
]
.
children
[
0
]
"
div
"
"
about
:
blank
"
)
;
await
promiseRemoteFsState
;
}
"
document_mutation_navigation_inner_frame
"
)
;
