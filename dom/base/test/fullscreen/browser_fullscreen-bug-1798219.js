"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
dom
/
base
/
test
/
fullscreen
/
fullscreen_helpers
.
js
"
this
)
;
SimpleTest
.
ignoreAllUncaughtExceptions
(
true
)
;
add_setup
(
async
function
(
)
{
await
pushPrefs
(
[
"
full
-
screen
-
api
.
transition
-
duration
.
enter
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
transition
-
duration
.
leave
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
)
;
}
)
;
async
function
waitAndCheckFullscreenState
(
aWindow
)
{
if
(
aWindow
.
fullScreen
|
|
aWindow
.
document
.
documentElement
.
hasAttribute
(
"
inFullscreen
"
)
)
{
info
(
"
The
widget
is
still
in
fullscreen
wait
again
"
)
;
await
waitWidgetFullscreenEvent
(
aWindow
false
true
)
;
}
if
(
aWindow
.
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
{
info
(
"
The
chrome
document
is
still
in
fullscreen
wait
again
"
)
;
await
waitForFullScreenObserver
(
aWindow
false
true
)
;
}
ok
(
!
aWindow
.
fullScreen
"
The
widget
should
not
be
in
fullscreen
"
)
;
ok
(
!
aWindow
.
document
.
documentElement
.
hasAttribute
(
"
inFullscreen
"
)
"
The
chrome
window
should
not
be
in
fullscreen
"
)
;
ok
(
!
aWindow
.
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
"
The
chrome
document
should
not
be
in
fullscreen
"
)
;
}
add_task
(
async
(
)
=
>
{
const
URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
fullscreen
/
file_fullscreen
-
bug
-
1798219
.
html
"
;
let
dummyTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
URL
}
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
content
.
document
.
querySelector
(
"
button
"
)
.
click
(
)
;
}
)
;
await
new
Promise
(
aResolve
=
>
{
SimpleTest
.
executeSoon
(
(
)
=
>
{
SimpleTest
.
executeSoon
(
aResolve
)
;
}
)
;
}
)
;
await
waitAndCheckFullscreenState
(
window
)
;
}
)
;
let
dummyTabClosed
=
BrowserTestUtils
.
waitForTabClosing
(
dummyTab
)
;
BrowserTestUtils
.
removeTab
(
dummyTab
)
;
await
dummyTabClosed
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
fullscreen
/
file_fullscreen
-
bug
-
1798219
-
2
.
html
"
}
async
function
(
browser
)
{
let
promiseWin
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
content
.
document
.
querySelector
(
"
button
"
)
.
click
(
)
;
}
)
;
let
newWindow
=
await
promiseWin
;
await
SpecialPowers
.
spawn
(
newWindow
.
gBrowser
.
selectedTab
.
linkedBrowser
[
]
function
(
)
{
content
.
document
.
querySelector
(
"
button
"
)
.
click
(
)
;
}
)
;
await
new
Promise
(
aResolve
=
>
{
SimpleTest
.
executeSoon
(
(
)
=
>
{
SimpleTest
.
executeSoon
(
aResolve
)
;
}
)
;
}
)
;
await
waitAndCheckFullscreenState
(
newWindow
)
;
newWindow
.
close
(
)
;
}
)
;
}
)
;
