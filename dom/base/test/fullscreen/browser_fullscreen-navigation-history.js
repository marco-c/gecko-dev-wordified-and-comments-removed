"
use
strict
"
;
requestLongerTimeout
(
2
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
dom
/
base
/
test
/
fullscreen
/
fullscreen_helpers
.
js
"
this
)
;
SimpleTest
.
ignoreAllUncaughtExceptions
(
true
)
;
add_setup
(
async
function
(
)
{
await
pushPrefs
(
[
"
full
-
screen
-
api
.
transition
-
duration
.
enter
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
transition
-
duration
.
leave
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
)
;
}
)
;
function
preventBFCache
(
aBrowsingContext
aPrevent
)
{
return
SpecialPowers
.
spawn
(
aBrowsingContext
[
aPrevent
]
prevent
=
>
{
if
(
prevent
)
{
content
.
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
}
)
;
}
content
.
window
.
addEventListener
(
"
pagehide
"
e
=
>
{
info
(
Check
BFCache
state
:
e
.
persisted
is
{
e
.
persisted
}
)
;
}
{
once
:
true
}
)
;
}
)
;
}
[
true
false
]
.
forEach
(
crossOrigin
=
>
{
[
true
false
]
.
forEach
(
initialPagePreventsBFCache
=
>
{
[
true
false
]
.
forEach
(
fullscreenPagePreventsBFCache
=
>
{
add_task
(
async
function
navigation_history
(
)
{
info
(
crossOrigin
:
{
crossOrigin
}
initialPagePreventsBFCache
:
{
initialPagePreventsBFCache
}
fullscreenPagePreventsBFCache
:
{
fullscreenPagePreventsBFCache
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
fullscreen
/
dummy_page
.
html
"
}
async
function
(
browser
)
{
await
preventBFCache
(
browser
.
browsingContext
initialPagePreventsBFCache
)
;
const
url
=
crossOrigin
?
"
https
:
/
/
example
.
org
/
browser
/
dom
/
base
/
test
/
fullscreen
/
file_fullscreen
-
iframe
-
inner
.
html
"
:
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
fullscreen
/
file_fullscreen
-
iframe
-
inner
.
html
"
;
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
url
)
;
await
loaded
;
await
preventBFCache
(
browser
.
browsingContext
fullscreenPagePreventsBFCache
)
;
let
promiseFsState
=
waitForFullscreenState
(
document
true
)
;
SpecialPowers
.
spawn
(
browser
.
browsingContext
[
]
(
)
=
>
{
content
.
setTimeout
(
(
)
=
>
{
content
.
document
.
getElementById
(
"
div
"
)
.
click
(
)
;
}
0
)
;
}
)
;
await
promiseFsState
;
promiseFsState
=
waitForFullscreenState
(
document
false
)
;
await
SpecialPowers
.
spawn
(
browser
.
browsingContext
[
]
(
)
=
>
{
content
.
window
.
history
.
back
(
)
;
}
)
;
await
promiseFsState
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
