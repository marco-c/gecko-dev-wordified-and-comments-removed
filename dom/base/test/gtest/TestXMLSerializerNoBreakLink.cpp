#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DOMParser
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
TEST
(
TestXMLSerializerNoBreakLink
TestXMLSerializerNoBreakLinkMain
)
{
nsString
longURL
=
u
"
http
:
/
/
www
.
example
.
com
/
link
with
spaces
"
_ns
;
for
(
int
i
=
1
;
i
<
125
;
+
+
i
)
{
longURL
.
Append
(
u
'
'
)
;
longURL
.
Append
(
IntToTString
<
char16_t
>
(
i
)
)
;
}
nsString
htmlInput
=
u
"
<
html
>
<
head
>
"
"
<
meta
charset
=
\
"
utf
-
8
\
"
>
"
"
<
/
head
>
<
body
>
Hello
Thunderbird
!
<
a
href
=
\
"
"
_ns
+
longURL
+
u
"
\
"
>
Link
<
/
a
>
<
/
body
>
<
/
html
>
"
_ns
;
nsCOMPtr
<
Document
>
document
;
{
IgnoredErrorResult
rv
;
RefPtr
<
DOMParser
>
parser
=
DOMParser
:
:
CreateWithoutGlobal
(
rv
)
;
ASSERT_FALSE
(
rv
.
Failed
(
)
)
;
document
=
parser
-
>
ParseFromStringInternal
(
htmlInput
SupportedType
:
:
Text_html
rv
)
;
ASSERT_FALSE
(
rv
.
Failed
(
)
)
;
}
nsCString
contentTypes
[
]
=
{
"
text
/
xml
"
_ns
"
application
/
xml
"
_ns
"
application
/
xhtml
+
xml
"
_ns
"
image
/
svg
+
xml
"
_ns
"
text
/
html
"
_ns
}
;
for
(
auto
const
&
contentType
:
contentTypes
)
{
uint32_t
flagsToTest
[
]
=
{
nsIDocumentEncoder
:
:
OutputFormatted
nsIDocumentEncoder
:
:
OutputWrap
nsIDocumentEncoder
:
:
OutputFormatted
|
nsIDocumentEncoder
:
:
OutputWrap
}
;
for
(
uint32_t
flags
:
flagsToTest
)
{
nsCOMPtr
<
nsIDocumentEncoder
>
encoder
=
do_createDocumentEncoder
(
contentType
.
get
(
)
)
;
ASSERT_TRUE
(
encoder
)
;
nsresult
rv
=
encoder
-
>
Init
(
document
NS_ConvertASCIItoUTF16
(
contentType
)
flags
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsString
parsed
;
rv
=
encoder
-
>
EncodeToString
(
parsed
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_TRUE
(
parsed
.
Find
(
longURL
)
!
=
kNotFound
)
;
}
}
}
