#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
dom
/
DOMParser
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
TEST
(
TestParser
TestParserMain
)
{
bool
allTestsPassed
=
false
;
constexpr
auto
htmlInput
=
u
"
<
html
>
<
head
>
"
"
<
meta
http
-
equiv
=
\
"
content
-
type
\
"
content
=
\
"
text
/
html
;
charset
=
\
"
>
"
"
<
/
head
>
<
body
>
Hello
<
b
>
Thunderbird
!
<
/
b
>
<
/
body
>
<
/
html
>
"
_ns
;
do
{
mozilla
:
:
IgnoredErrorResult
rv2
;
RefPtr
<
mozilla
:
:
dom
:
:
DOMParser
>
parser
=
mozilla
:
:
dom
:
:
DOMParser
:
:
CreateWithoutGlobal
(
rv2
)
;
if
(
rv2
.
Failed
(
)
)
break
;
nsCOMPtr
<
mozilla
:
:
dom
:
:
Document
>
document
=
parser
-
>
ParseFromString
(
htmlInput
mozilla
:
:
dom
:
:
SupportedType
:
:
Text_html
rv2
)
;
if
(
rv2
.
Failed
(
)
)
break
;
nsCOMPtr
<
nsIDocumentEncoder
>
encoder
=
do_createDocumentEncoder
(
"
text
/
html
"
)
;
if
(
!
encoder
)
break
;
nsresult
rv
=
encoder
-
>
Init
(
document
u
"
text
/
html
"
_ns
nsIDocumentEncoder
:
:
OutputRaw
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
nsString
parsed
;
rv
=
encoder
-
>
EncodeToString
(
parsed
)
;
if
(
NS_FAILED
(
rv
)
)
break
;
EXPECT_TRUE
(
parsed
.
Equals
(
htmlInput
)
)
;
allTestsPassed
=
true
;
}
while
(
false
)
;
EXPECT_TRUE
(
allTestsPassed
)
;
}
