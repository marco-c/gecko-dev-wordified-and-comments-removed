if
(
!
gMultiProcessBrowser
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
this
)
;
PromiseTestUtils
.
expectUncaughtRejection
(
/
is
no
longer
usable
/
)
;
}
const
kBaseURI
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
empty
.
html
"
;
const
kPluginJS
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
dom
/
base
/
test
/
plugin
.
js
"
;
var
testURLs
=
[
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_audioLoop
.
html
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_audioLoopInIframe
.
html
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_pluginAudio
.
html
"
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_webaudio_startstop
.
html
"
]
;
const
kMinTimeoutBackground
=
100
*
1000
*
1000
;
const
kDelay
=
10
;
Services
.
scriptloader
.
loadSubScript
(
kPluginJS
this
)
;
async
function
runTest
(
url
)
{
let
currentTab
=
gBrowser
.
selectedTab
;
let
newTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
kBaseURI
)
;
let
newBrowser
=
gBrowser
.
getBrowserForTab
(
newTab
)
;
let
promise
=
BrowserTestUtils
.
waitForAttribute
(
"
soundplaying
"
newTab
"
true
"
)
;
BrowserTestUtils
.
loadURI
(
newBrowser
url
)
;
await
promise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
currentTab
)
;
let
timeout
=
await
SpecialPowers
.
spawn
(
newBrowser
[
kDelay
]
function
(
delay
)
{
return
new
Promise
(
resolve
=
>
{
let
before
=
new
Date
(
)
;
content
.
window
.
setTimeout
(
function
(
)
{
let
after
=
new
Date
(
)
;
resolve
(
after
-
before
)
;
}
delay
)
;
}
)
;
}
)
;
ok
(
timeout
<
=
kMinTimeoutBackground
Got
the
correct
timeout
(
{
timeout
}
)
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
min_background_timeout_value
"
kMinTimeoutBackground
]
]
}
)
;
}
)
;
add_task
(
async
function
test
(
)
{
for
(
var
url
of
testURLs
)
{
await
runTest
(
url
)
;
}
}
)
;
