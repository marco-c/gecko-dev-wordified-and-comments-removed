add_task
(
async
function
test
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
csp
.
enable
"
false
]
[
"
csp
.
skip_about_page_has_csp_assert
"
true
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
plugins
"
}
async
function
(
newBrowser
)
{
await
SpecialPowers
.
spawn
(
newBrowser
[
]
async
function
(
)
{
var
frame
=
content
.
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_x
-
frame
-
options_page
.
sjs
?
testid
=
deny
&
xfo
=
deny
"
;
content
.
document
.
body
.
appendChild
(
frame
)
;
await
new
content
.
Promise
(
done
=
>
{
frame
.
addEventListener
(
"
load
"
function
(
)
{
done
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
frame
[
]
(
)
=
>
{
var
testFrame
=
content
.
document
.
getElementById
(
"
test
"
)
;
Assert
.
equal
(
testFrame
.
tagName
"
H1
"
"
wrong
element
type
"
)
;
Assert
.
equal
(
testFrame
.
textContent
"
deny
"
"
wrong
textContent
"
)
;
}
)
;
}
)
;
var
observerDeferred
=
{
}
;
observerDeferred
.
promise
=
new
Promise
(
resolve
=
>
{
observerDeferred
.
resolve
=
resolve
;
}
)
;
SpecialPowers
.
registerObservers
(
"
xfo
-
on
-
violate
-
policy
"
)
;
function
examiner
(
)
{
SpecialPowers
.
addObserver
(
this
"
specialpowers
-
xfo
-
on
-
violate
-
policy
"
)
;
}
examiner
.
prototype
=
{
observe
(
subject
topic
data
)
{
var
asciiSpec
=
SpecialPowers
.
getPrivilegedProps
(
SpecialPowers
.
do_QueryInterface
(
subject
"
nsIURI
"
)
"
asciiSpec
"
)
;
is
(
asciiSpec
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_x
-
frame
-
options_page
.
sjs
?
testid
=
deny
&
xfo
=
deny
"
"
correct
subject
"
)
;
is
(
topic
"
specialpowers
-
xfo
-
on
-
violate
-
policy
"
"
correct
topic
"
)
;
is
(
data
"
DENY
"
"
correct
data
"
)
;
myExaminer
.
remove
(
)
;
observerDeferred
.
resolve
(
)
;
}
remove
(
)
{
SpecialPowers
.
removeObserver
(
this
"
specialpowers
-
xfo
-
on
-
violate
-
policy
"
)
;
}
}
;
let
myExaminer
=
new
examiner
(
)
;
await
BrowserTestUtils
.
loadURI
(
newBrowser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
newBrowser
)
;
await
ContentTask
.
spawn
(
newBrowser
null
function
(
)
{
var
frame
=
content
.
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
base
/
test
/
file_x
-
frame
-
options_page
.
sjs
?
testid
=
deny
&
xfo
=
deny
"
;
content
.
document
.
body
.
appendChild
(
frame
)
;
}
)
;
await
observerDeferred
.
promise
;
}
)
;
}
)
;
