async
function
test_user_input_handling_delay_helper
(
prefs
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
prefs
}
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
data
:
text
/
html
<
body
>
<
/
body
>
)
;
await
BrowserTestUtils
.
reloadTab
(
tab
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
5000
)
)
;
const
userInputHappend
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForEvent
(
content
"
keydown
"
)
;
}
)
.
then
(
function
(
)
{
Assert
.
ok
(
true
"
User
input
event
should
be
able
to
work
after
5
seconds
of
an
reload
"
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
tab
.
linkedBrowser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
tab
.
linkedBrowser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
tab
.
linkedBrowser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
}
tab
.
linkedBrowser
)
;
await
userInputHappend
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
test_MinTick
(
)
{
const
prefs
=
[
[
"
dom
.
input_events
.
security
.
minNumTicks
"
10
]
[
"
dom
.
input_events
.
security
.
minTimeElapsedInMS
"
0
]
[
"
dom
.
input_events
.
security
.
isUserInputHandlingDelayTest
"
true
]
]
;
await
test_user_input_handling_delay_helper
(
prefs
)
;
}
)
;
