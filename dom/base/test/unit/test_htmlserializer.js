add_task
(
async
function
testAttrsOutsideBodyWithRawBodyOnly
(
)
{
const
htmlString
=
<
html
>
<
head
>
<
link
rel
=
"
stylesheet
"
href
=
"
foo
"
/
>
<
/
head
>
<
body
>
some
content
<
/
body
>
<
/
html
>
;
const
parser
=
new
DOMParser
(
)
;
const
doc
=
parser
.
parseFromString
(
htmlString
"
text
/
html
"
)
;
const
linkElems
=
doc
.
head
.
getElementsByTagName
(
"
link
"
)
;
Assert
.
equal
(
linkElems
.
length
1
"
document
header
should
contain
one
link
element
"
)
;
Assert
.
equal
(
linkElems
[
0
]
.
rel
"
stylesheet
"
"
link
element
should
have
rel
attribute
set
"
)
;
const
encoder
=
Cu
.
createDocumentEncoder
(
"
text
/
html
"
)
;
encoder
.
init
(
doc
"
text
/
html
"
Ci
.
nsIDocumentEncoder
.
OutputRaw
|
Ci
.
nsIDocumentEncoder
.
OutputBodyOnly
)
;
const
result
=
encoder
.
encodeToString
(
)
;
Assert
.
equal
(
result
"
<
body
>
some
content
<
/
body
>
"
"
output
should
not
contain
attributes
from
head
elements
"
)
;
}
)
;
add_task
(
async
function
testAttrsInsideBodyWithRawBodyOnly
(
)
{
const
htmlString
=
<
html
>
<
head
>
<
link
rel
=
"
stylesheet
"
href
=
"
foo
"
/
>
<
/
head
>
<
body
>
<
span
id
=
"
foo
"
>
some
content
<
/
span
>
<
/
body
>
<
/
html
>
;
const
parser
=
new
DOMParser
(
)
;
const
doc
=
parser
.
parseFromString
(
htmlString
"
text
/
html
"
)
;
const
spanElem
=
doc
.
getElementById
(
"
foo
"
)
;
Assert
.
ok
(
spanElem
"
should
be
able
to
get
span
element
by
ID
"
)
;
const
encoder
=
Cu
.
createDocumentEncoder
(
"
text
/
html
"
)
;
encoder
.
init
(
doc
"
text
/
html
"
Ci
.
nsIDocumentEncoder
.
OutputRaw
|
Ci
.
nsIDocumentEncoder
.
OutputBodyOnly
)
;
const
result
=
encoder
.
encodeToString
(
)
;
Assert
.
equal
(
result
<
body
>
<
span
id
=
"
foo
"
>
some
content
<
/
span
>
<
/
body
>
"
output
should
not
contain
attributes
from
head
elements
"
)
;
}
)
;
