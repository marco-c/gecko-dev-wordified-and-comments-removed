"
use
strict
"
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
{
XPCShellContentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
XPCShellContentUtils
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
XPCShellContentUtils
.
init
(
this
)
;
function
delay
(
)
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
0
)
;
}
)
;
}
const
server
=
XPCShellContentUtils
.
createHttpServer
(
{
hosts
:
[
"
example
.
com
"
]
}
)
;
const
PAGE_URL
=
"
http
:
/
/
example
.
com
/
"
;
server
.
registerPathHandler
(
"
/
"
(
request
response
)
=
>
{
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
xhtml
+
xml
"
)
;
response
.
write
(
String
.
raw
<
!
DOCTYPE
html
>
<
script
xmlns
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
src
=
"
slow
.
js
"
/
>
)
;
}
)
;
let
resolveResumeScriptPromise
;
let
resumeScriptPromise
=
new
Promise
(
resolve
=
>
{
resolveResumeScriptPromise
=
resolve
;
}
)
;
let
resolveScriptRequestPromise
;
let
scriptRequestPromise
=
new
Promise
(
resolve
=
>
{
resolveScriptRequestPromise
=
resolve
;
}
)
;
server
.
registerPathHandler
(
"
/
slow
.
js
"
async
(
request
response
)
=
>
{
response
.
processAsync
(
)
;
resolveScriptRequestPromise
(
)
;
await
resumeScriptPromise
;
response
.
setHeader
(
"
Content
-
type
"
"
text
/
javascript
"
)
;
response
.
write
(
"
"
)
;
response
.
finish
(
)
;
}
)
;
add_task
(
async
function
test_nested_blockParser
(
)
{
let
resolveBlockerPromise
;
let
blockerPromise
;
let
docElementPromise
=
TestUtils
.
topicObserved
(
"
document
-
element
-
inserted
"
doc
=
>
{
if
(
doc
.
location
.
href
=
=
=
PAGE_URL
)
{
blockerPromise
=
new
Promise
(
resolve
=
>
{
resolveBlockerPromise
=
resolve
;
}
)
;
doc
.
blockParsing
(
blockerPromise
)
;
return
true
;
}
return
false
;
}
)
;
let
pagePromise
=
XPCShellContentUtils
.
loadContentPage
(
PAGE_URL
{
remote
:
false
}
)
;
await
docElementPromise
;
await
scriptRequestPromise
;
await
delay
(
)
;
await
delay
(
)
;
resolveResumeScriptPromise
(
)
;
await
delay
(
)
;
await
delay
(
)
;
resolveBlockerPromise
(
)
;
await
delay
(
)
;
await
delay
(
)
;
let
page
=
await
pagePromise
;
await
page
.
close
(
)
;
}
)
;
