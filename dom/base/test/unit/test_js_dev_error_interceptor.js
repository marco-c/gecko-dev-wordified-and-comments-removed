"
use
strict
"
;
function
errors
(
)
{
return
[
new
Error
(
"
This
is
an
error
:
"
+
Math
.
random
(
)
)
new
RangeError
(
"
This
is
a
RangeError
:
"
+
Math
.
random
(
)
)
"
This
is
a
string
:
"
+
Math
.
random
(
)
null
undefined
Math
.
random
(
)
{
}
new
TypeError
(
"
This
is
a
TypeError
:
"
+
Math
.
random
(
)
)
new
SyntaxError
(
"
This
is
a
SyntaxError
:
"
+
Math
.
random
(
)
)
new
ReferenceError
(
"
This
is
a
ReferenceError
:
"
+
Math
.
random
(
)
)
]
;
}
function
isDeveloperError
(
e
)
{
if
(
e
=
=
null
|
|
typeof
e
!
=
"
object
"
)
{
return
false
;
}
return
e
.
constructor
=
=
TypeError
|
|
e
.
constructor
=
=
SyntaxError
|
|
e
.
constructor
=
=
ReferenceError
;
}
function
run_test
(
)
{
ChromeUtils
.
clearRecentJSDevError
(
)
;
Assert
.
equal
(
ChromeUtils
.
recentJSDevError
undefined
)
;
for
(
let
exn
of
errors
(
)
)
{
ChromeUtils
.
clearRecentJSDevError
(
)
;
try
{
throw
exn
;
}
catch
(
e
)
{
}
if
(
isDeveloperError
(
exn
)
)
{
Assert
.
equal
(
ChromeUtils
.
recentJSDevError
.
message
"
"
+
exn
)
;
}
else
{
Assert
.
equal
(
ChromeUtils
.
recentJSDevError
undefined
)
;
}
ChromeUtils
.
clearRecentJSDevError
(
)
;
Assert
.
equal
(
ChromeUtils
.
recentJSDevError
undefined
)
;
}
}
