requestLongerTimeout
(
2
)
;
var
{
Promise
:
promise
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
{
}
)
;
const
gHttpTestRoot
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
base
/
test
/
"
;
var
gOldContentCanRecord
=
false
;
add_task
(
function
*
test_initialize
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
)
;
gOldContentCanRecord
=
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
function
(
)
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
let
old
=
telemetry
.
canRecordExtended
;
telemetry
.
canRecordExtended
=
true
;
return
old
;
}
)
;
info
(
"
canRecord
for
content
:
"
+
gOldContentCanRecord
)
;
}
)
;
add_task
(
function
*
(
)
{
yield
check_use_counter_iframe
(
"
file_use_counter_svg_getElementById
.
svg
"
"
SVGSVGELEMENT_GETELEMENTBYID
"
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_currentScale
.
svg
"
"
SVGSVGELEMENT_CURRENTSCALE_getter
"
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_currentScale
.
svg
"
"
SVGSVGELEMENT_CURRENTSCALE_setter
"
)
;
yield
check_use_counter_img
(
"
file_use_counter_svg_getElementById
.
svg
"
"
PROPERTY_FILL
"
)
;
yield
check_use_counter_img
(
"
file_use_counter_svg_currentScale
.
svg
"
"
PROPERTY_FILL
"
)
;
yield
check_use_counter_direct
(
"
file_use_counter_svg_fill_pattern
.
svg
"
"
PROPERTY_FILLOPACITY
"
true
)
;
yield
check_use_counter_direct
(
"
file_use_counter_svg_fill_pattern_internal
.
svg
"
"
PROPERTY_FILLOPACITY
"
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_background
.
html
"
"
PROPERTY_FILL
"
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_list_style_image
.
html
"
"
PROPERTY_FILL
"
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_background
.
html
"
"
PROPERTY_FILL
"
false
)
;
yield
check_use_counter_iframe
(
"
file_use_counter_svg_list_style_image
.
html
"
"
PROPERTY_FILL
"
false
)
;
}
)
;
add_task
(
function
*
(
)
{
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
oldCanRecord
:
gOldContentCanRecord
}
function
(
arg
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
yield
new
Promise
(
resolve
=
>
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
telemetry
.
canRecordExtended
=
arg
.
oldCanRecord
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
function
waitForDestroyedDocuments
(
)
{
let
deferred
=
promise
.
defer
(
)
;
SpecialPowers
.
exactGC
(
window
deferred
.
resolve
)
;
return
deferred
.
promise
;
}
function
waitForPageLoad
(
browser
)
{
return
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
yield
new
Promise
(
resolve
=
>
{
let
listener
=
(
)
=
>
{
removeEventListener
(
"
load
"
listener
true
)
;
resolve
(
)
;
}
addEventListener
(
"
load
"
listener
true
)
;
}
)
;
}
)
;
}
function
grabHistogramsFromContent
(
browser
use_counter_middlefix
)
{
return
ContentTask
.
spawn
(
browser
{
middlefix
:
use_counter_middlefix
}
function
*
(
arg
)
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
function
snapshot_histogram
(
name
)
{
return
telemetry
.
getHistogramById
(
name
)
.
snapshot
(
)
;
}
let
histogram_page_name
=
"
USE_COUNTER2_
"
+
arg
.
middlefix
+
"
_PAGE
"
;
let
histogram_document_name
=
"
USE_COUNTER2_
"
+
arg
.
middlefix
+
"
_DOCUMENT
"
;
let
histogram_page
=
snapshot_histogram
(
histogram_page_name
)
;
let
histogram_document
=
snapshot_histogram
(
histogram_document_name
)
;
let
histogram_docs
=
snapshot_histogram
(
"
CONTENT_DOCUMENTS_DESTROYED
"
)
;
let
histogram_toplevel_docs
=
snapshot_histogram
(
"
TOP_LEVEL_CONTENT_DOCUMENTS_DESTROYED
"
)
;
return
[
histogram_page
.
sum
histogram_document
.
sum
histogram_docs
.
sum
histogram_toplevel_docs
.
sum
]
;
}
)
;
}
var
check_use_counter_iframe
=
Task
.
async
(
function
*
(
file
use_counter_middlefix
check_documents
=
true
)
{
info
(
"
checking
"
+
file
+
"
with
histogram
"
+
use_counter_middlefix
)
;
let
newTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
gBrowser
.
selectedTab
=
newTab
;
newTab
.
linkedBrowser
.
stop
(
)
;
let
[
histogram_page_before
histogram_document_before
histogram_docs_before
histogram_toplevel_docs_before
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
gBrowser
.
selectedBrowser
.
loadURI
(
gHttpTestRoot
+
"
file_use_counter_outer
.
html
"
)
;
yield
waitForPageLoad
(
gBrowser
.
selectedBrowser
)
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
file
:
file
}
function
(
opts
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
wu
=
content
.
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
iframe
=
content
.
document
.
getElementById
(
'
content
'
)
;
iframe
.
src
=
opts
.
file
;
let
listener
=
(
event
)
=
>
{
event
.
target
.
removeEventListener
(
"
load
"
listener
true
)
;
wu
.
forceUseCounterFlush
(
content
.
document
)
;
wu
.
forceUseCounterFlush
(
iframe
.
contentDocument
)
;
deferred
.
resolve
(
)
;
}
;
iframe
.
addEventListener
(
"
load
"
listener
true
)
;
return
deferred
.
promise
;
}
)
;
gBrowser
.
removeTab
(
newTab
)
;
yield
waitForDestroyedDocuments
(
)
;
let
[
histogram_page_after
histogram_document_after
histogram_docs_after
histogram_toplevel_docs_after
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
is
(
histogram_page_after
histogram_page_before
+
1
"
page
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
ok
(
histogram_toplevel_docs_after
>
=
histogram_toplevel_docs_before
+
1
"
top
level
document
counts
are
correct
"
)
;
if
(
check_documents
)
{
is
(
histogram_document_after
histogram_document_before
+
1
"
document
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
}
}
)
;
var
check_use_counter_img
=
Task
.
async
(
function
*
(
file
use_counter_middlefix
)
{
info
(
"
checking
"
+
file
+
"
as
image
with
histogram
"
+
use_counter_middlefix
)
;
let
newTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
gBrowser
.
selectedTab
=
newTab
;
newTab
.
linkedBrowser
.
stop
(
)
;
let
[
histogram_page_before
histogram_document_before
histogram_docs_before
histogram_toplevel_docs_before
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
gBrowser
.
selectedBrowser
.
loadURI
(
gHttpTestRoot
+
"
file_use_counter_outer
.
html
"
)
;
yield
waitForPageLoad
(
gBrowser
.
selectedBrowser
)
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
file
:
file
}
function
(
opts
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
let
deferred
=
PromiseUtils
.
defer
(
)
;
let
img
=
content
.
document
.
getElementById
(
'
display
'
)
;
img
.
src
=
opts
.
file
;
let
listener
=
(
event
)
=
>
{
img
.
removeEventListener
(
"
load
"
listener
true
)
;
let
wu
=
content
.
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
wu
.
forceUseCounterFlush
(
img
)
;
wu
.
forceUseCounterFlush
(
content
.
document
)
;
deferred
.
resolve
(
)
;
}
;
img
.
addEventListener
(
"
load
"
listener
true
)
;
return
deferred
.
promise
;
}
)
;
gBrowser
.
removeTab
(
newTab
)
;
yield
waitForDestroyedDocuments
(
)
;
let
[
histogram_page_after
histogram_document_after
histogram_docs_after
histogram_toplevel_docs_after
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
is
(
histogram_page_after
histogram_page_before
+
1
"
page
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
is
(
histogram_document_after
histogram_document_before
+
1
"
document
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
ok
(
histogram_toplevel_docs_after
>
=
histogram_toplevel_docs_before
+
1
"
top
level
document
counts
are
correct
"
)
;
ok
(
histogram_docs_after
>
=
histogram_docs_before
+
2
"
document
counts
are
correct
"
)
;
}
)
;
var
check_use_counter_direct
=
Task
.
async
(
function
*
(
file
use_counter_middlefix
xfail
=
false
)
{
info
(
"
checking
"
+
file
+
"
with
histogram
"
+
use_counter_middlefix
)
;
let
newTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
gBrowser
.
selectedTab
=
newTab
;
newTab
.
linkedBrowser
.
stop
(
)
;
let
[
histogram_page_before
histogram_document_before
histogram_docs_before
histogram_toplevel_docs_before
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
gBrowser
.
selectedBrowser
.
loadURI
(
gHttpTestRoot
+
file
)
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
*
(
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
)
;
yield
new
Promise
(
resolve
=
>
{
let
listener
=
(
)
=
>
{
removeEventListener
(
"
load
"
listener
true
)
;
let
wu
=
content
.
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
wu
.
forceUseCounterFlush
(
content
.
document
)
;
setTimeout
(
resolve
0
)
;
}
addEventListener
(
"
load
"
listener
true
)
;
}
)
;
}
)
;
gBrowser
.
removeTab
(
newTab
)
;
yield
waitForDestroyedDocuments
(
)
;
let
[
histogram_page_after
histogram_document_after
histogram_docs_after
histogram_toplevel_docs_after
]
=
yield
grabHistogramsFromContent
(
gBrowser
.
selectedBrowser
use_counter_middlefix
)
;
(
xfail
?
todo_is
:
is
)
(
histogram_page_after
histogram_page_before
+
1
"
page
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
(
xfail
?
todo_is
:
is
)
(
histogram_document_after
histogram_document_before
+
1
"
document
counts
for
"
+
use_counter_middlefix
+
"
after
are
correct
"
)
;
ok
(
histogram_toplevel_docs_after
>
=
histogram_toplevel_docs_before
+
1
"
top
level
document
counts
are
correct
"
)
;
ok
(
histogram_docs_after
>
=
histogram_docs_before
+
1
"
document
counts
are
correct
"
)
;
}
)
;
