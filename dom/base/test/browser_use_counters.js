requestLongerTimeout
(
2
)
;
const
gHttpTestRoot
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
base
/
test
/
"
;
var
gOldContentCanRecord
=
false
;
var
gOldParentCanRecord
=
false
;
add_task
(
async
function
test_initialize
(
)
{
let
Telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
gOldParentCanRecord
=
Telemetry
.
canRecordExtended
;
Telemetry
.
canRecordExtended
=
true
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
[
"
layout
.
css
.
use
-
counters
.
enabled
"
true
]
[
"
layout
.
css
.
use
-
counters
-
unimplemented
.
enabled
"
true
]
]
}
)
;
gOldContentCanRecord
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
function
(
)
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
let
old
=
telemetry
.
canRecordExtended
;
telemetry
.
canRecordExtended
=
true
;
return
old
;
}
)
;
info
(
"
canRecord
for
content
:
"
+
gOldContentCanRecord
)
;
}
)
;
add_task
(
async
function
(
)
{
const
TESTS
=
[
{
type
:
"
iframe
"
filename
:
"
file_use_counter_svg_getElementById
.
svg
"
counters
:
[
{
name
:
"
SVGSVGELEMENT_GETELEMENTBYID
"
}
]
}
{
type
:
"
iframe
"
filename
:
"
file_use_counter_svg_currentScale
.
svg
"
counters
:
[
{
name
:
"
SVGSVGELEMENT_CURRENTSCALE_getter
"
}
{
name
:
"
SVGSVGELEMENT_CURRENTSCALE_setter
"
}
]
}
{
type
:
"
iframe
"
filename
:
"
file_use_counter_style
.
html
"
counters
:
[
{
name
:
"
CSS_PROPERTY_BackgroundImage
"
}
{
name
:
"
CSS_PROPERTY_Padding
"
}
{
name
:
"
CSS_PROPERTY_MozTransform
"
}
{
name
:
"
CSS_PROPERTY_WebkitPaddingStart
"
}
]
}
{
type
:
"
iframe
"
filename
:
"
file_use_counter_svg_getElementById
.
svg
"
counters
:
[
{
name
:
"
SVGSVGELEMENT_GETELEMENTBYID
"
}
]
}
{
type
:
"
iframe
"
filename
:
"
file_use_counter_svg_currentScale
.
svg
"
counters
:
[
{
name
:
"
SVGSVGELEMENT_CURRENTSCALE_getter
"
}
{
name
:
"
SVGSVGELEMENT_CURRENTSCALE_setter
"
}
]
}
{
type
:
"
img
"
filename
:
"
file_use_counter_svg_getElementById
.
svg
"
counters
:
[
{
name
:
"
CSS_PROPERTY_Fill
"
}
]
}
{
type
:
"
img
"
filename
:
"
file_use_counter_svg_currentScale
.
svg
"
counters
:
[
{
name
:
"
CSS_PROPERTY_Fill
"
}
]
}
{
type
:
"
direct
"
filename
:
"
file_use_counter_svg_fill_pattern
.
svg
"
counters
:
[
{
name
:
"
CSS_PROPERTY_FillOpacity
"
xfail
:
true
}
]
}
{
type
:
"
direct
"
filename
:
"
file_use_counter_svg_fill_pattern_internal
.
svg
"
counters
:
[
{
name
:
"
CSS_PROPERTY_FillOpacity
"
}
]
}
{
type
:
"
undisplayed
-
iframe
"
filename
:
"
file_use_counter_svg_currentScale
.
svg
"
counters
:
[
{
name
:
"
SVGSVGELEMENT_CURRENTSCALE_getter
"
}
]
}
{
type
:
"
direct
"
filename
:
"
file_use_counter_bfcache
.
html
"
waitForExplicitFinish
:
true
counters
:
[
{
name
:
"
SVGSVGELEMENT_GETELEMENTBYID
"
}
]
extra_top_documents
:
5
}
]
;
for
(
let
test
of
TESTS
)
{
let
file
=
test
.
filename
;
info
(
checking
{
file
}
(
{
test
.
type
}
)
)
;
let
before
=
await
grabHistogramsFromContent
(
test
.
counters
.
map
(
c
=
>
c
.
name
)
)
;
let
url
targetElement
;
switch
(
test
.
type
)
{
case
"
iframe
"
:
url
=
gHttpTestRoot
+
"
file_use_counter_outer
.
html
"
;
targetElement
=
"
content
"
;
break
;
case
"
undisplayed
-
iframe
"
:
url
=
gHttpTestRoot
+
"
file_use_counter_outer_display_none
.
html
"
;
targetElement
=
"
content
"
;
break
;
case
"
img
"
:
url
=
gHttpTestRoot
+
"
file_use_counter_outer
.
html
"
;
targetElement
=
"
display
"
;
break
;
case
"
direct
"
:
url
=
gHttpTestRoot
+
file
;
targetElement
=
null
;
break
;
default
:
throw
unexpected
type
{
test
.
type
}
;
}
let
waitForFinish
=
null
;
if
(
test
.
waitForExplicitFinish
)
{
is
(
test
.
type
"
direct
"
cannot
use
waitForExplicitFinish
with
test
type
{
test
.
type
}
)
;
waitForFinish
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
url
+
"
#
finished
"
)
;
}
let
newTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
if
(
waitForFinish
)
{
await
waitForFinish
;
}
if
(
targetElement
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
file
targetElement
}
]
function
(
opts
)
{
let
target
=
content
.
document
.
getElementById
(
opts
.
targetElement
)
;
target
.
src
=
opts
.
file
;
return
new
Promise
(
resolve
=
>
{
let
listener
=
event
=
>
{
event
.
target
.
removeEventListener
(
"
load
"
listener
true
)
;
resolve
(
)
;
}
;
target
.
addEventListener
(
"
load
"
listener
true
)
;
}
)
;
}
)
;
}
await
BrowserTestUtils
.
removeTab
(
newTab
)
;
let
after
=
await
grabHistogramsFromContent
(
test
.
counters
.
map
(
c
=
>
c
.
name
)
before
.
sentinel
)
;
for
(
let
counter
of
test
.
counters
)
{
let
name
=
counter
.
name
;
let
value
=
counter
.
value
?
?
1
;
if
(
!
counter
.
xfail
)
{
is
(
after
.
page
[
name
]
before
.
page
[
name
]
+
value
page
counts
for
{
name
}
after
are
correct
)
;
is
(
after
.
document
[
name
]
before
.
document
[
name
]
+
value
document
counts
for
{
name
}
after
are
correct
)
;
}
}
is
(
after
.
toplevel_docs
before
.
toplevel_docs
+
1
+
(
test
.
extra_top_documents
|
|
0
)
"
top
level
destroyed
document
counts
are
correct
"
)
;
ok
(
after
.
docs
>
=
before
.
docs
+
(
test
.
type
=
=
"
img
"
?
2
:
1
)
"
destroyed
document
counts
are
correct
"
)
;
}
}
)
;
add_task
(
async
function
(
)
{
let
Telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
Telemetry
.
canRecordExtended
=
gOldParentCanRecord
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
oldCanRecord
:
gOldContentCanRecord
}
]
async
function
(
arg
)
{
await
new
Promise
(
resolve
=
>
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
telemetry
.
canRecordExtended
=
arg
.
oldCanRecord
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
async
function
grabHistogramsFromContent
(
names
prev_sentinel
=
null
)
{
let
telemetry
=
Cc
[
"
mozilla
.
org
/
base
/
telemetry
;
1
"
]
.
getService
(
Ci
.
nsITelemetry
)
;
let
gatheredHistograms
;
return
BrowserTestUtils
.
waitForCondition
(
function
(
)
{
let
snapshots
=
telemetry
.
getSnapshotForHistograms
(
"
main
"
false
)
;
let
checkGet
=
probe
=
>
{
let
process
=
!
Services
.
appinfo
.
browserTabsRemoteAutostart
|
|
probe
.
endsWith
(
"
_PAGE
"
)
|
|
probe
=
=
"
TOP_LEVEL_CONTENT_DOCUMENTS_DESTROYED
"
?
"
parent
"
:
"
content
"
;
return
snapshots
[
process
]
[
probe
]
?
snapshots
[
process
]
[
probe
]
.
sum
:
0
;
}
;
let
page
=
Object
.
fromEntries
(
names
.
map
(
name
=
>
[
name
checkGet
(
USE_COUNTER2_
{
name
}
_PAGE
)
]
)
)
;
let
document
=
Object
.
fromEntries
(
names
.
map
(
name
=
>
[
name
checkGet
(
USE_COUNTER2_
{
name
}
_DOCUMENT
)
]
)
)
;
gatheredHistograms
=
{
page
document
docs
:
checkGet
(
"
CONTENT_DOCUMENTS_DESTROYED
"
)
toplevel_docs
:
checkGet
(
"
TOP_LEVEL_CONTENT_DOCUMENTS_DESTROYED
"
)
sentinel
:
{
doc
:
checkGet
(
"
USE_COUNTER2_CSS_PROPERTY_MarkerMid_DOCUMENT
"
)
page
:
checkGet
(
"
USE_COUNTER2_CSS_PROPERTY_MarkerMid_PAGE
"
)
}
}
;
let
sentinelChanged
=
!
prev_sentinel
|
|
(
prev_sentinel
.
doc
!
=
gatheredHistograms
.
sentinel
.
doc
&
&
prev_sentinel
.
page
!
=
gatheredHistograms
.
sentinel
.
page
)
;
return
sentinelChanged
;
}
"
grabHistogramsFromContent
"
100
Infinity
)
.
then
(
(
)
=
>
gatheredHistograms
function
(
msg
)
{
throw
msg
;
}
)
;
}
