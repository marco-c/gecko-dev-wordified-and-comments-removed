#
ifndef
nsIStyleSheetLinkingElement_h__
#
define
nsIStyleSheetLinkingElement_h__
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
Result
.
h
"
class
nsIContent
;
class
nsICSSLoaderObserver
;
class
nsIPrincipal
;
class
nsIURI
;
#
define
NS_ISTYLESHEETLINKINGELEMENT_IID
\
{
\
0xa8b79f3b
0x9d18
0x4f9c
{
\
0xb1
0xaa
0x8c
0x9b
0x1b
0xaa
0xac
0xad
\
}
\
}
class
nsIStyleSheetLinkingElement
:
public
nsISupports
{
public
:
enum
class
ForceUpdate
:
uint8_t
{
No
Yes
}
;
enum
class
Completed
:
uint8_t
{
No
Yes
}
;
enum
class
HasAlternateRel
:
uint8_t
{
No
Yes
}
;
enum
class
IsAlternate
:
uint8_t
{
No
Yes
}
;
enum
class
IsInline
:
uint8_t
{
No
Yes
}
;
enum
class
IsExplicitlyEnabled
:
uint8_t
{
No
Yes
}
;
enum
class
MediaMatched
:
uint8_t
{
Yes
No
}
;
struct
Update
{
private
:
bool
mWillNotify
;
bool
mIsAlternate
;
bool
mMediaMatched
;
public
:
Update
(
)
:
mWillNotify
(
false
)
mIsAlternate
(
false
)
mMediaMatched
(
false
)
{
}
Update
(
Completed
aCompleted
IsAlternate
aIsAlternate
MediaMatched
aMediaMatched
)
:
mWillNotify
(
aCompleted
=
=
Completed
:
:
No
)
mIsAlternate
(
aIsAlternate
=
=
IsAlternate
:
:
Yes
)
mMediaMatched
(
aMediaMatched
=
=
MediaMatched
:
:
Yes
)
{
}
bool
WillNotify
(
)
const
{
return
mWillNotify
;
}
bool
ShouldBlock
(
)
const
{
if
(
!
mWillNotify
)
{
return
false
;
}
return
!
mIsAlternate
&
&
mMediaMatched
;
}
}
;
struct
MOZ_STACK_CLASS
SheetInfo
{
nsIContent
*
mContent
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
mozilla
:
:
CORSMode
mCORSMode
;
nsString
mTitle
;
nsString
mMedia
;
nsString
mIntegrity
;
nsString
mNonce
;
bool
mHasAlternateRel
;
bool
mIsInline
;
IsExplicitlyEnabled
mIsExplicitlyEnabled
;
SheetInfo
(
const
mozilla
:
:
dom
:
:
Document
&
nsIContent
*
already_AddRefed
<
nsIURI
>
aURI
already_AddRefed
<
nsIPrincipal
>
aTriggeringPrincipal
already_AddRefed
<
nsIReferrerInfo
>
aReferrerInfo
mozilla
:
:
CORSMode
const
nsAString
&
aTitle
const
nsAString
&
aMedia
const
nsAString
&
aIntegrity
const
nsAString
&
aNonce
HasAlternateRel
IsInline
IsExplicitlyEnabled
)
;
~
SheetInfo
(
)
;
}
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ISTYLESHEETLINKINGELEMENT_IID
)
virtual
void
SetStyleSheet
(
mozilla
:
:
StyleSheet
*
aStyleSheet
)
=
0
;
virtual
mozilla
:
:
Result
<
Update
nsresult
>
UpdateStyleSheet
(
nsICSSLoaderObserver
*
aObserver
)
=
0
;
virtual
void
SetEnableUpdates
(
bool
aEnableUpdates
)
=
0
;
virtual
void
GetCharset
(
nsAString
&
aCharset
)
=
0
;
virtual
void
OverrideBaseURI
(
nsIURI
*
aNewBaseURI
)
=
0
;
virtual
void
SetLineNumber
(
uint32_t
aLineNumber
)
=
0
;
virtual
uint32_t
GetLineNumber
(
)
=
0
;
virtual
void
SetColumnNumber
(
uint32_t
aColumnNumber
)
=
0
;
virtual
uint32_t
GetColumnNumber
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIStyleSheetLinkingElement
NS_ISTYLESHEETLINKINGELEMENT_IID
)
#
endif
