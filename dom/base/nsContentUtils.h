#
ifndef
nsContentUtils_h___
#
define
nsContentUtils_h___
#
if
defined
(
XP_WIN
)
#
include
<
float
.
h
>
#
endif
#
if
defined
(
SOLARIS
)
#
include
<
ieeefp
.
h
>
#
endif
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
tuple
>
#
include
<
utility
>
#
include
"
ErrorList
.
h
"
#
include
"
Units
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
CallState
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TaskCategory
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
FromParser
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsMargin
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTLiteralString
.
h
"
#
include
"
prtime
.
h
"
#
if
defined
(
XP_WIN
)
#
undef
LoadImage
#
endif
class
JSObject
;
class
imgICache
;
class
imgIContainer
;
class
imgINotificationObserver
;
class
imgIRequest
;
class
imgLoader
;
class
imgRequestProxy
;
class
nsAtom
;
class
nsAttrValue
;
class
nsAutoScriptBlockerSuppressNodeRemoved
;
class
nsContentList
;
class
nsCycleCollectionTraversalCallback
;
class
nsDocShell
;
class
nsGlobalWindowInner
;
class
nsHtml5StringParser
;
class
nsIArray
;
class
nsIBidiKeyboard
;
class
nsIChannel
;
class
nsIConsoleService
;
class
nsIContent
;
class
nsIDocShell
;
class
nsIDocShellTreeItem
;
class
nsIDocumentLoaderFactory
;
class
nsIDragSession
;
class
nsIFile
;
class
nsIFragmentContentSink
;
class
nsIFrame
;
class
nsIHttpChannel
;
class
nsIIOService
;
class
nsIImageLoadingContent
;
class
nsIInterfaceRequestor
;
class
nsILoadGroup
;
class
nsILoadInfo
;
class
nsIObserver
;
class
nsIParser
;
class
nsIPluginTag
;
class
nsIPrincipal
;
class
nsIReferrerInfo
;
class
nsIRequest
;
class
nsIRunnable
;
class
nsIScreen
;
class
nsIScriptContext
;
class
nsIScriptSecurityManager
;
class
nsISerialEventTarget
;
class
nsIStringBundle
;
class
nsIStringBundleService
;
class
nsISupports
;
class
nsITransferable
;
class
nsIURI
;
class
nsIUUIDGenerator
;
class
nsIWidget
;
class
nsIXPConnect
;
class
nsNameSpaceManager
;
class
nsNodeInfoManager
;
class
nsPIWindowRoot
;
class
nsPresContext
;
class
nsStringBuffer
;
class
nsStringHashKey
;
class
nsTextFragment
;
class
nsView
;
class
nsWrapperCache
;
struct
JSContext
;
struct
nsPoint
;
template
<
class
T
>
class
nsRefPtrHashKey
;
namespace
IPC
{
class
Message
;
}
namespace
JS
{
class
Value
;
struct
PropertyDescriptor
;
}
namespace
mozilla
{
class
Dispatcher
;
class
ErrorResult
;
class
EventListenerManager
;
class
HTMLEditor
;
class
LazyLogModule
;
class
LogModule
;
class
PresShell
;
class
TextEditor
;
class
WidgetDragEvent
;
class
WidgetKeyboardEvent
;
struct
InputEventOptions
;
template
<
typename
ParentType
typename
RefType
>
class
RangeBoundaryBase
;
template
<
typename
T
>
class
NotNull
;
template
<
class
T
>
class
StaticRefPtr
;
namespace
dom
{
struct
AutocompleteInfo
;
class
BrowserChild
;
class
BrowserParent
;
class
BrowsingContext
;
class
BrowsingContextGroup
;
class
ContentChild
;
class
ContentFrameMessageManager
;
class
ContentParent
;
struct
CustomElementDefinition
;
class
CustomElementRegistry
;
class
DataTransfer
;
class
Document
;
class
DocumentFragment
;
class
DOMArena
;
class
Element
;
class
Event
;
class
EventTarget
;
class
HTMLInputElement
;
class
IPCDataTransfer
;
class
IPCDataTransferItem
;
struct
LifecycleCallbackArgs
;
struct
LifecycleAdoptedCallbackArgs
;
class
MessageBroadcaster
;
class
NodeInfo
;
class
Selection
;
class
WorkerPrivate
;
enum
class
ElementCallbackType
;
enum
class
ReferrerPolicy
:
uint8_t
;
}
namespace
intl
{
class
LineBreaker
;
class
WordBreaker
;
}
namespace
ipc
{
class
Shmem
;
class
IShmemAllocator
;
}
namespace
gfx
{
class
DataSourceSurface
;
enum
class
SurfaceFormat
:
int8_t
;
}
namespace
layers
{
class
LayerManager
;
}
}
extern
const
char
kLoadAsData
[
]
;
const
nsString
&
EmptyString
(
)
;
const
nsCString
&
EmptyCString
(
)
;
enum
EventNameType
{
EventNameType_None
=
0x0000
EventNameType_HTML
=
0x0001
EventNameType_XUL
=
0x0002
EventNameType_SVGGraphic
=
0x0004
EventNameType_SVGSVG
=
0x0008
EventNameType_SMIL
=
0x0010
EventNameType_HTMLBodyOrFramesetOnly
=
0x0020
EventNameType_HTMLMarqueeOnly
=
0x0040
EventNameType_HTMLXUL
=
0x0003
EventNameType_All
=
0xFFFF
}
;
struct
EventNameMapping
{
nsAtom
*
MOZ_NON_OWNING_REF
mAtom
;
int32_t
mType
;
mozilla
:
:
EventMessage
mMessage
;
mozilla
:
:
EventClassID
mEventClassID
;
bool
mMaybeSpecialSVGorSMILEvent
;
}
;
class
nsContentUtils
{
friend
class
nsAutoScriptBlockerSuppressNodeRemoved
;
typedef
mozilla
:
:
dom
:
:
Element
Element
;
typedef
mozilla
:
:
dom
:
:
Document
Document
;
typedef
mozilla
:
:
Cancelable
Cancelable
;
typedef
mozilla
:
:
CanBubble
CanBubble
;
typedef
mozilla
:
:
Composed
Composed
;
typedef
mozilla
:
:
ChromeOnlyDispatch
ChromeOnlyDispatch
;
typedef
mozilla
:
:
EventMessage
EventMessage
;
typedef
mozilla
:
:
TimeDuration
TimeDuration
;
typedef
mozilla
:
:
Trusted
Trusted
;
public
:
static
nsresult
Init
(
)
;
static
bool
IsCallerChrome
(
)
;
static
bool
ThreadsafeIsCallerChrome
(
)
;
static
bool
IsCallerUAWidget
(
)
;
static
bool
IsFuzzingEnabled
(
)
#
ifndef
FUZZING
{
return
false
;
}
#
else
;
#
endif
static
bool
IsErrorPage
(
nsIURI
*
aURI
)
;
static
bool
IsCallerChromeOrFuzzingEnabled
(
JSContext
*
aCx
JSObject
*
)
{
return
ThreadsafeIsSystemCaller
(
aCx
)
|
|
IsFuzzingEnabled
(
)
;
}
static
bool
IsCallerChromeOrElementTransformGettersEnabled
(
JSContext
*
aCx
JSObject
*
)
;
static
bool
IsSystemCaller
(
JSContext
*
aCx
)
;
static
bool
ThreadsafeIsSystemCaller
(
JSContext
*
aCx
)
;
static
bool
LegacyIsCallerNativeCode
(
)
{
return
!
GetCurrentJSContext
(
)
;
}
static
bool
LegacyIsCallerChromeOrNativeCode
(
)
{
return
LegacyIsCallerNativeCode
(
)
|
|
IsCallerChrome
(
)
;
}
static
nsIPrincipal
*
SubjectPrincipalOrSystemIfNativeCaller
(
)
{
if
(
!
GetCurrentJSContext
(
)
)
{
return
GetSystemPrincipal
(
)
;
}
return
SubjectPrincipal
(
)
;
}
static
bool
LookupBindingMember
(
JSContext
*
aCx
nsIContent
*
aContent
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
;
static
bool
ShouldResistFingerprinting
(
)
;
static
bool
ShouldResistFingerprinting
(
nsIDocShell
*
aDocShell
)
;
static
bool
ShouldResistFingerprinting
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
ShouldResistFingerprinting
(
mozilla
:
:
dom
:
:
WorkerPrivate
*
aWorkerPrivate
)
;
static
bool
ShouldResistFingerprinting
(
const
Document
*
aDoc
)
;
static
bool
UseStandinsForNativeColors
(
)
;
static
void
CalcRoundedWindowSizeForResistingFingerprinting
(
int32_t
aChromeWidth
int32_t
aChromeHeight
int32_t
aScreenWidth
int32_t
aScreenHeight
int32_t
aInputWidth
int32_t
aInputHeight
bool
aSetOuterWidth
bool
aSetOuterHeight
int32_t
*
aOutputWidth
int32_t
*
aOutputHeight
)
;
static
nsINode
*
GetNearestInProcessCrossDocParentNode
(
nsINode
*
aChild
)
;
static
bool
ContentIsHostIncludingDescendantOf
(
const
nsINode
*
aPossibleDescendant
const
nsINode
*
aPossibleAncestor
)
;
static
bool
ContentIsCrossDocDescendantOf
(
nsINode
*
aPossibleDescendant
nsINode
*
aPossibleAncestor
)
;
static
bool
ContentIsFlattenedTreeDescendantOf
(
const
nsINode
*
aPossibleDescendant
const
nsINode
*
aPossibleAncestor
)
;
static
bool
ContentIsFlattenedTreeDescendantOfForStyle
(
const
nsINode
*
aPossibleDescendant
const
nsINode
*
aPossibleAncestor
)
;
static
nsINode
*
Retarget
(
nsINode
*
aTargetA
nsINode
*
aTargetB
)
;
static
nsresult
GetInclusiveAncestors
(
nsINode
*
aNode
nsTArray
<
nsINode
*
>
&
aArray
)
;
static
nsresult
GetInclusiveAncestorsAndOffsets
(
nsINode
*
aNode
int32_t
aOffset
nsTArray
<
nsIContent
*
>
*
aAncestorNodes
nsTArray
<
int32_t
>
*
aAncestorOffsets
)
;
static
nsINode
*
GetClosestCommonInclusiveAncestor
(
nsINode
*
aNode1
nsINode
*
aNode2
)
{
if
(
aNode1
=
=
aNode2
)
{
return
aNode1
;
}
return
GetCommonAncestorHelper
(
aNode1
aNode2
)
;
}
static
nsIContent
*
GetCommonFlattenedTreeAncestor
(
nsIContent
*
aContent1
nsIContent
*
aContent2
)
{
if
(
aContent1
=
=
aContent2
)
{
return
aContent1
;
}
return
GetCommonFlattenedTreeAncestorHelper
(
aContent1
aContent2
)
;
}
static
Element
*
GetCommonFlattenedTreeAncestorForStyle
(
Element
*
aElement1
Element
*
aElement2
)
;
static
nsINode
*
GetCommonAncestorUnderInteractiveContent
(
nsINode
*
aNode1
nsINode
*
aNode2
)
;
static
mozilla
:
:
dom
:
:
BrowserParent
*
GetCommonBrowserParentAncestor
(
mozilla
:
:
dom
:
:
BrowserParent
*
aBrowserParent1
mozilla
:
:
dom
:
:
BrowserParent
*
aBrowserParent2
)
;
static
bool
PositionIsBefore
(
nsINode
*
aNode1
nsINode
*
aNode2
int32_t
*
aNode1Index
=
nullptr
int32_t
*
aNode2Index
=
nullptr
)
;
struct
ComparePointsCache
{
int32_t
ComputeIndexOf
(
const
nsINode
*
aParent
const
nsINode
*
aChild
)
{
if
(
aParent
=
=
mParent
&
&
aChild
=
=
mChild
)
{
return
mIndex
;
}
mIndex
=
aParent
-
>
ComputeIndexOf
(
aChild
)
;
mParent
=
aParent
;
mChild
=
aChild
;
return
mIndex
;
}
private
:
const
nsINode
*
mParent
=
nullptr
;
const
nsINode
*
mChild
=
nullptr
;
int32_t
mIndex
=
0
;
}
;
static
mozilla
:
:
Maybe
<
int32_t
>
ComparePoints
(
const
nsINode
*
aParent1
int32_t
aOffset1
const
nsINode
*
aParent2
int32_t
aOffset2
ComparePointsCache
*
aParent1Cache
=
nullptr
)
;
template
<
typename
FPT
typename
FRT
typename
SPT
typename
SRT
>
static
mozilla
:
:
Maybe
<
int32_t
>
ComparePoints
(
const
mozilla
:
:
RangeBoundaryBase
<
FPT
FRT
>
&
aFirstBoundary
const
mozilla
:
:
RangeBoundaryBase
<
SPT
SRT
>
&
aSecondBoundary
)
;
static
int32_t
ComparePoints_Deprecated
(
const
nsINode
*
aParent1
int32_t
aOffset1
const
nsINode
*
aParent2
int32_t
aOffset2
bool
*
aDisconnected
=
nullptr
ComparePointsCache
*
aParent1Cache
=
nullptr
)
;
template
<
typename
FPT
typename
FRT
typename
SPT
typename
SRT
>
static
int32_t
ComparePoints_Deprecated
(
const
mozilla
:
:
RangeBoundaryBase
<
FPT
FRT
>
&
aFirstBoundary
const
mozilla
:
:
RangeBoundaryBase
<
SPT
SRT
>
&
aSecondBoundary
bool
*
aDisconnected
=
nullptr
)
;
static
Element
*
MatchElementId
(
nsIContent
*
aContent
const
nsAString
&
aId
)
;
static
Element
*
MatchElementId
(
nsIContent
*
aContent
const
nsAtom
*
aId
)
;
static
uint16_t
ReverseDocumentPosition
(
uint16_t
aDocumentPosition
)
;
static
const
nsDependentSubstring
TrimCharsInSet
(
const
char
*
aSet
const
nsAString
&
aValue
)
;
template
<
bool
IsWhitespace
(
char16_t
)
>
static
const
nsDependentSubstring
TrimWhitespace
(
const
nsAString
&
aStr
bool
aTrimTrailing
=
true
)
;
static
bool
IsFirstLetterPunctuation
(
uint32_t
aChar
)
;
static
bool
IsAlphanumeric
(
uint32_t
aChar
)
;
static
bool
IsAlphanumericOrSymbol
(
uint32_t
aChar
)
;
static
bool
IsAlphanumericOrSymbolAt
(
const
nsTextFragment
*
aFrag
uint32_t
aOffset
)
;
static
bool
IsHTMLWhitespace
(
char16_t
aChar
)
;
static
bool
IsHTMLWhitespaceOrNBSP
(
char16_t
aChar
)
;
static
bool
IsHTMLBlockLevelElement
(
nsIContent
*
aContent
)
;
enum
ParseHTMLIntegerResultFlags
{
eParseHTMLInteger_NoFlags
=
0
eParseHTMLInteger_NonStandard
=
1
<
<
0
eParseHTMLInteger_DidNotConsumeAllInput
=
1
<
<
1
eParseHTMLInteger_Error
=
1
<
<
2
eParseHTMLInteger_ErrorNoValue
=
1
<
<
3
eParseHTMLInteger_ErrorOverflow
=
1
<
<
4
eParseHTMLInteger_Negative
=
1
<
<
5
}
;
static
int32_t
ParseHTMLInteger
(
const
nsAString
&
aValue
ParseHTMLIntegerResultFlags
*
aResult
)
;
static
int32_t
ParseHTMLInteger
(
const
nsACString
&
aValue
ParseHTMLIntegerResultFlags
*
aResult
)
;
private
:
template
<
class
StringT
>
static
int32_t
ParseHTMLIntegerImpl
(
const
StringT
&
aValue
ParseHTMLIntegerResultFlags
*
aResult
)
;
public
:
static
bool
ParseIntMarginValue
(
const
nsAString
&
aString
nsIntMargin
&
aResult
)
;
static
int32_t
ParseLegacyFontSize
(
const
nsAString
&
aValue
)
;
static
void
Shutdown
(
)
;
static
nsresult
CheckSameOrigin
(
const
nsINode
*
aTrustedNode
const
nsINode
*
unTrustedNode
)
;
static
bool
CanCallerAccess
(
const
nsINode
*
aNode
)
;
static
bool
CanCallerAccess
(
nsPIDOMWindowInner
*
aWindow
)
;
static
bool
PrincipalHasPermission
(
nsIPrincipal
&
aPrincipal
const
nsAtom
*
aPerm
)
;
static
bool
CallerHasPermission
(
JSContext
*
aCx
const
nsAtom
*
aPerm
)
;
static
nsIPrincipal
*
GetAttrTriggeringPrincipal
(
nsIContent
*
aContent
const
nsAString
&
aAttrValue
nsIPrincipal
*
aSubjectPrincipal
)
;
static
bool
IsAbsoluteURL
(
const
nsACString
&
aURL
)
;
static
bool
InProlog
(
nsINode
*
aNode
)
;
static
nsNameSpaceManager
*
NameSpaceManager
(
)
{
return
sNameSpaceManager
;
}
static
nsIIOService
*
GetIOService
(
)
{
return
sIOService
;
}
static
nsIBidiKeyboard
*
GetBidiKeyboard
(
)
;
static
nsIScriptSecurityManager
*
GetSecurityManager
(
)
{
return
sSecurityManager
;
}
static
nsIPrincipal
*
SubjectPrincipal
(
JSContext
*
aCx
)
;
static
nsIPrincipal
*
SubjectPrincipal
(
)
;
static
nsIPrincipal
*
ObjectPrincipal
(
JSObject
*
aObj
)
;
static
void
GenerateStateKey
(
nsIContent
*
aContent
Document
*
aDocument
nsACString
&
aKey
)
;
static
nsresult
NewURIWithDocumentCharset
(
nsIURI
*
*
aResult
const
nsAString
&
aSpec
Document
*
aDocument
nsIURI
*
aBaseURI
)
;
static
bool
IsNameWithDash
(
nsAtom
*
aName
)
;
static
bool
IsCustomElementName
(
nsAtom
*
aName
uint32_t
aNameSpaceID
)
;
static
nsresult
CheckQName
(
const
nsAString
&
aQualifiedName
bool
aNamespaceAware
=
true
const
char16_t
*
*
aColon
=
nullptr
)
;
static
nsresult
SplitQName
(
const
nsIContent
*
aNamespaceResolver
const
nsString
&
aQName
int32_t
*
aNamespace
nsAtom
*
*
aLocalName
)
;
static
nsresult
GetNodeInfoFromQName
(
const
nsAString
&
aNamespaceURI
const
nsAString
&
aQualifiedName
nsNodeInfoManager
*
aNodeInfoManager
uint16_t
aNodeType
mozilla
:
:
dom
:
:
NodeInfo
*
*
aNodeInfo
)
;
static
void
SplitExpatName
(
const
char16_t
*
aExpatName
nsAtom
*
*
aPrefix
nsAtom
*
*
aTagName
int32_t
*
aNameSpaceID
)
;
static
bool
IsSitePermAllow
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
static
bool
IsSitePermDeny
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
static
bool
IsExactSitePermAllow
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
static
bool
IsExactSitePermDeny
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aType
)
;
static
bool
HaveEqualPrincipals
(
Document
*
aDoc1
Document
*
aDoc2
)
;
static
mozilla
:
:
intl
:
:
LineBreaker
*
LineBreaker
(
)
{
return
sLineBreaker
.
get
(
)
;
}
static
mozilla
:
:
intl
:
:
WordBreaker
*
WordBreaker
(
)
{
return
sWordBreaker
.
get
(
)
;
}
static
void
RegisterShutdownObserver
(
nsIObserver
*
aObserver
)
;
static
void
UnregisterShutdownObserver
(
nsIObserver
*
aObserver
)
;
static
bool
HasNonEmptyAttr
(
const
nsIContent
*
aContent
int32_t
aNameSpaceID
nsAtom
*
aName
)
;
static
nsPresContext
*
GetContextForContent
(
const
nsIContent
*
aContent
)
;
static
mozilla
:
:
PresShell
*
GetPresShellForContent
(
const
nsIContent
*
aContent
)
;
static
bool
CanLoadImage
(
nsIURI
*
aURI
nsINode
*
aNode
Document
*
aLoadingDocument
nsIPrincipal
*
aLoadingPrincipal
)
;
static
bool
DocumentInactiveForImageLoads
(
Document
*
aDocument
)
;
static
int32_t
CORSModeToLoadImageFlags
(
mozilla
:
:
CORSMode
aMode
)
;
static
nsresult
LoadImage
(
nsIURI
*
aURI
nsINode
*
aContext
Document
*
aLoadingDocument
nsIPrincipal
*
aLoadingPrincipal
uint64_t
aRequestContextID
nsIReferrerInfo
*
aReferrerInfo
imgINotificationObserver
*
aObserver
int32_t
aLoadFlags
const
nsAString
&
initiatorType
imgRequestProxy
*
*
aRequest
nsContentPolicyType
aContentPolicyType
=
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE
bool
aUseUrgentStartForChannel
=
false
bool
aLinkPreload
=
false
)
;
static
imgLoader
*
GetImgLoaderForDocument
(
Document
*
aDoc
)
;
static
imgLoader
*
GetImgLoaderForChannel
(
nsIChannel
*
aChannel
Document
*
aContext
)
;
static
bool
IsImageInCache
(
nsIURI
*
aURI
Document
*
aDocument
)
;
static
already_AddRefed
<
imgIContainer
>
GetImageFromContent
(
nsIImageLoadingContent
*
aContent
imgIRequest
*
*
aRequest
=
nullptr
)
;
static
bool
ContentIsDraggable
(
nsIContent
*
aContent
)
;
static
bool
IsDraggableImage
(
nsIContent
*
aContent
)
;
static
bool
IsDraggableLink
(
const
nsIContent
*
aContent
)
;
static
nsresult
QNameChanged
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsAtom
*
aName
mozilla
:
:
dom
:
:
NodeInfo
*
*
aResult
)
;
static
void
GetEventArgNames
(
int32_t
aNameSpaceID
nsAtom
*
aEventName
bool
aIsForWindow
uint32_t
*
aArgCount
const
char
*
*
*
aArgNames
)
;
static
bool
IsInPrivateBrowsing
(
Document
*
aDoc
)
;
static
bool
IsInPrivateBrowsing
(
nsILoadGroup
*
aLoadGroup
)
;
static
bool
IsInSameAnonymousTree
(
const
nsINode
*
aNode
const
nsIContent
*
aContent
)
;
static
bool
IsInInteractiveHTMLContent
(
const
Element
*
aElement
const
Element
*
aStop
)
;
static
nsIXPConnect
*
XPConnect
(
)
{
return
sXPConnect
;
}
static
void
LogSimpleConsoleError
(
const
nsAString
&
aErrorText
const
char
*
aCategory
bool
aFromPrivateWindow
bool
aFromChromeContext
uint32_t
aErrorFlags
=
nsIScriptError
:
:
errorFlag
)
;
enum
MissingErrorLocationMode
{
eOMIT_LOCATION
eUSE_CALLING_LOCATION
}
;
static
nsresult
ReportToConsoleNonLocalized
(
const
nsAString
&
aErrorText
uint32_t
aErrorFlags
const
nsACString
&
aCategory
const
Document
*
aDocument
nsIURI
*
aURI
=
nullptr
const
nsString
&
aSourceLine
=
u
"
"
_ns
uint32_t
aLineNumber
=
0
uint32_t
aColumnNumber
=
0
MissingErrorLocationMode
aLocationMode
=
eUSE_CALLING_LOCATION
)
;
static
nsresult
ReportToConsoleByWindowID
(
const
nsAString
&
aErrorText
uint32_t
aErrorFlags
const
nsACString
&
aCategory
uint64_t
aInnerWindowID
nsIURI
*
aURI
=
nullptr
const
nsString
&
aSourceLine
=
u
"
"
_ns
uint32_t
aLineNumber
=
0
uint32_t
aColumnNumber
=
0
MissingErrorLocationMode
aLocationMode
=
eUSE_CALLING_LOCATION
)
;
enum
PropertiesFile
{
eCSS_PROPERTIES
eXUL_PROPERTIES
eLAYOUT_PROPERTIES
eFORMS_PROPERTIES
ePRINTING_PROPERTIES
eDOM_PROPERTIES
eHTMLPARSER_PROPERTIES
eSVG_PROPERTIES
eBRAND_PROPERTIES
eCOMMON_DIALOG_PROPERTIES
eMATHML_PROPERTIES
eSECURITY_PROPERTIES
eNECKO_PROPERTIES
eFORMS_PROPERTIES_en_US
eDOM_PROPERTIES_en_US
PropertiesFile_COUNT
}
;
static
nsresult
ReportToConsole
(
uint32_t
aErrorFlags
const
nsACString
&
aCategory
const
Document
*
aDocument
PropertiesFile
aFile
const
char
*
aMessageName
const
nsTArray
<
nsString
>
&
aParams
=
nsTArray
<
nsString
>
(
)
nsIURI
*
aURI
=
nullptr
const
nsString
&
aSourceLine
=
u
"
"
_ns
uint32_t
aLineNumber
=
0
uint32_t
aColumnNumber
=
0
)
;
static
void
ReportEmptyGetElementByIdArg
(
const
Document
*
aDoc
)
;
static
void
LogMessageToConsole
(
const
char
*
aMsg
)
;
static
bool
SpoofLocaleEnglish
(
)
;
static
nsresult
GetLocalizedString
(
PropertiesFile
aFile
const
char
*
aKey
nsAString
&
aResult
)
;
static
nsresult
GetMaybeLocalizedString
(
PropertiesFile
aFile
const
char
*
aKey
Document
*
aDocument
nsAString
&
aResult
)
;
static
uint32_t
ParseSandboxAttributeToFlags
(
const
nsAttrValue
*
aSandboxAttr
)
;
static
bool
IsValidSandboxFlag
(
const
nsAString
&
aFlag
)
;
static
void
SandboxFlagsToString
(
uint32_t
aFlags
nsAString
&
aString
)
;
static
nsresult
GenerateUUIDInPlace
(
nsID
&
aUUID
)
;
static
nsID
GenerateUUID
(
)
;
static
bool
PrefetchPreloadEnabled
(
nsIDocShell
*
aDocShell
)
;
static
void
ExtractErrorValues
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsAString
&
aSourceSpecOut
uint32_t
*
aLineOut
uint32_t
*
aColumnOut
nsString
&
aMessageOut
)
;
static
void
ExtractErrorValues
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
nsACString
&
aSourceSpecOut
uint32_t
*
aLineOut
uint32_t
*
aColumnOut
nsString
&
aMessageOut
)
;
static
nsresult
CalculateBufferSizeForImage
(
const
uint32_t
&
aStride
const
mozilla
:
:
gfx
:
:
IntSize
&
aImageSize
const
mozilla
:
:
gfx
:
:
SurfaceFormat
&
aFormat
size_t
*
aMaxBufferSize
size_t
*
aUsedBufferSize
)
;
static
bool
IsURIInList
(
nsIURI
*
aURI
const
nsCString
&
aList
)
;
static
bool
IsURIInPrefList
(
nsIURI
*
aURI
const
char
*
aPrefName
)
;
template
<
typename
.
.
.
T
>
static
nsresult
FormatLocalizedString
(
nsAString
&
aResult
PropertiesFile
aFile
const
char
*
aKey
const
T
&
.
.
.
aParams
)
{
static_assert
(
sizeof
.
.
.
(
aParams
)
!
=
0
"
Use
GetLocalizedString
(
)
"
)
;
AutoTArray
<
nsString
sizeof
.
.
.
(
aParams
)
>
params
=
{
aParams
.
.
.
}
;
return
FormatLocalizedString
(
aFile
aKey
params
aResult
)
;
}
template
<
typename
.
.
.
T
>
static
nsresult
FormatMaybeLocalizedString
(
nsAString
&
aResult
PropertiesFile
aFile
const
char
*
aKey
Document
*
aDocument
const
T
&
.
.
.
aParams
)
{
static_assert
(
sizeof
.
.
.
(
aParams
)
!
=
0
"
Use
GetMaybeLocalizedString
(
)
"
)
;
AutoTArray
<
nsString
sizeof
.
.
.
(
aParams
)
>
params
=
{
aParams
.
.
.
}
;
return
FormatMaybeLocalizedString
(
aFile
aKey
aDocument
params
aResult
)
;
}
static
nsresult
FormatLocalizedString
(
PropertiesFile
aFile
const
char
*
aKey
const
nsTArray
<
nsString
>
&
aParamArray
nsAString
&
aResult
)
;
static
nsresult
FormatMaybeLocalizedString
(
PropertiesFile
aFile
const
char
*
aKey
Document
*
aDocument
const
nsTArray
<
nsString
>
&
aParamArray
nsAString
&
aResult
)
;
static
bool
IsChromeDoc
(
const
Document
*
aDocument
)
;
static
bool
IsChildOfSameType
(
Document
*
aDoc
)
;
static
bool
IsPlainTextType
(
const
nsACString
&
aContentType
)
;
static
bool
IsUtf8OnlyPlainTextType
(
const
nsACString
&
aContentType
)
;
static
bool
IsInChromeDocshell
(
const
Document
*
aDocument
)
;
static
nsIContentPolicy
*
GetContentPolicy
(
)
;
static
inline
ExtContentPolicyType
InternalContentPolicyTypeToExternal
(
nsContentPolicyType
aType
)
;
static
bool
IsPreloadType
(
nsContentPolicyType
aType
)
;
static
bool
IsUpgradableDisplayType
(
ExtContentPolicyType
aType
)
;
static
bool
HasMutationListeners
(
nsINode
*
aNode
uint32_t
aType
nsINode
*
aTargetForSubtreeModified
)
;
static
bool
HasMutationListeners
(
Document
*
aDocument
uint32_t
aType
)
;
static
void
MaybeFireNodeRemoved
(
nsINode
*
aChild
nsINode
*
aParent
)
;
static
nsresult
DispatchTrustedEvent
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
Cancelable
Composed
aComposed
=
Composed
:
:
eDefault
bool
*
aDefaultAction
=
nullptr
)
;
static
nsresult
DispatchTrustedEvent
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
aCanBubble
Cancelable
aCancelable
bool
*
aDefaultAction
)
{
return
DispatchTrustedEvent
(
aDoc
aTarget
aEventName
aCanBubble
aCancelable
Composed
:
:
eDefault
aDefaultAction
)
;
}
template
<
class
WidgetEventType
>
static
nsresult
DispatchTrustedEvent
(
Document
*
aDoc
nsISupports
*
aTarget
EventMessage
aEventMessage
CanBubble
aCanBubble
Cancelable
aCancelable
bool
*
aDefaultAction
=
nullptr
ChromeOnlyDispatch
aOnlyChromeDispatch
=
ChromeOnlyDispatch
:
:
eNo
)
{
WidgetEventType
event
(
true
aEventMessage
)
;
MOZ_ASSERT
(
GetEventClassIDFromMessage
(
aEventMessage
)
=
=
event
.
mClass
)
;
return
DispatchEvent
(
aDoc
aTarget
event
aEventMessage
aCanBubble
aCancelable
Trusted
:
:
eYes
aDefaultAction
aOnlyChromeDispatch
)
;
}
MOZ_CAN_RUN_SCRIPT
static
nsresult
DispatchInputEvent
(
Element
*
aEventTarget
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
DispatchInputEvent
(
Element
*
aEventTarget
mozilla
:
:
EventMessage
aEventMessage
mozilla
:
:
EditorInputType
aEditorInputType
mozilla
:
:
TextEditor
*
aTextEditor
mozilla
:
:
InputEventOptions
&
&
aOptions
nsEventStatus
*
aEventStatus
=
nullptr
)
;
static
nsresult
DispatchUntrustedEvent
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
Cancelable
bool
*
aDefaultAction
=
nullptr
)
;
template
<
class
WidgetEventType
>
static
nsresult
DispatchUntrustedEvent
(
Document
*
aDoc
nsISupports
*
aTarget
EventMessage
aEventMessage
CanBubble
aCanBubble
Cancelable
aCancelable
bool
*
aDefaultAction
=
nullptr
ChromeOnlyDispatch
aOnlyChromeDispatch
=
ChromeOnlyDispatch
:
:
eNo
)
{
WidgetEventType
event
(
false
aEventMessage
)
;
MOZ_ASSERT
(
GetEventClassIDFromMessage
(
aEventMessage
)
=
=
event
.
mClass
)
;
return
DispatchEvent
(
aDoc
aTarget
event
aEventMessage
aCanBubble
aCancelable
Trusted
:
:
eNo
aDefaultAction
aOnlyChromeDispatch
)
;
}
static
nsresult
DispatchChromeEvent
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
Cancelable
bool
*
aDefaultAction
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
void
RequestFrameFocus
(
Element
&
aFrameElement
bool
aCanRaise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
;
static
nsresult
DispatchEventOnlyToChrome
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
Cancelable
Composed
aComposed
=
Composed
:
:
eDefault
bool
*
aDefaultAction
=
nullptr
)
;
static
nsresult
DispatchEventOnlyToChrome
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
aCanBubble
Cancelable
aCancelable
bool
*
aDefaultAction
)
{
return
DispatchEventOnlyToChrome
(
aDoc
aTarget
aEventName
aCanBubble
aCancelable
Composed
:
:
eDefault
aDefaultAction
)
;
}
static
bool
IsEventAttributeName
(
nsAtom
*
aName
int32_t
aType
)
;
static
EventMessage
GetEventMessage
(
nsAtom
*
aName
)
;
static
EventMessage
GetEventMessageAndAtomForListener
(
const
nsAString
&
aName
nsAtom
*
*
aOnName
)
;
static
mozilla
:
:
EventClassID
GetEventClassID
(
const
nsAString
&
aName
)
;
static
nsAtom
*
GetEventMessageAndAtom
(
const
nsAString
&
aName
mozilla
:
:
EventClassID
aEventClassID
EventMessage
*
aEventMessage
)
;
static
void
TraverseListenerManager
(
nsINode
*
aNode
nsCycleCollectionTraversalCallback
&
cb
)
;
static
mozilla
:
:
EventListenerManager
*
GetListenerManagerForNode
(
nsINode
*
aNode
)
;
static
mozilla
:
:
EventListenerManager
*
GetExistingListenerManagerForNode
(
const
nsINode
*
aNode
)
;
static
void
AddEntryToDOMArenaTable
(
nsINode
*
aNode
mozilla
:
:
dom
:
:
DOMArena
*
aDOMArena
)
;
static
already_AddRefed
<
mozilla
:
:
dom
:
:
DOMArena
>
TakeEntryFromDOMArenaTable
(
const
nsINode
*
aNode
)
;
static
void
UnmarkGrayJSListenersInCCGenerationDocuments
(
)
;
static
void
RemoveListenerManager
(
nsINode
*
aNode
)
;
static
bool
IsInitialized
(
)
{
return
sInitialized
;
}
static
bool
IsValidNodeName
(
nsAtom
*
aLocalName
nsAtom
*
aPrefix
int32_t
aNamespaceID
)
;
static
already_AddRefed
<
mozilla
:
:
dom
:
:
DocumentFragment
>
CreateContextualFragment
(
nsINode
*
aContextNode
const
nsAString
&
aFragment
bool
aPreventScriptExecution
mozilla
:
:
ErrorResult
&
aRv
)
;
static
nsresult
ParseFragmentHTML
(
const
nsAString
&
aSourceBuffer
nsIContent
*
aTargetNode
nsAtom
*
aContextLocalName
int32_t
aContextNamespace
bool
aQuirks
bool
aPreventScriptExecution
int32_t
aFlags
=
-
1
)
;
static
nsresult
ParseFragmentXML
(
const
nsAString
&
aSourceBuffer
Document
*
aDocument
nsTArray
<
nsString
>
&
aTagStack
bool
aPreventScriptExecution
int32_t
aFlags
mozilla
:
:
dom
:
:
DocumentFragment
*
*
aReturn
)
;
static
nsresult
ParseDocumentHTML
(
const
nsAString
&
aSourceBuffer
Document
*
aTargetDocument
bool
aScriptingEnabledForNoscriptParsing
)
;
static
nsresult
ConvertToPlainText
(
const
nsAString
&
aSourceBuffer
nsAString
&
aResultBuffer
uint32_t
aFlags
uint32_t
aWrapCol
)
;
static
already_AddRefed
<
Document
>
CreateInertHTMLDocument
(
const
Document
*
aTemplate
)
;
static
already_AddRefed
<
Document
>
CreateInertXMLDocument
(
const
Document
*
aTemplate
)
;
public
:
static
nsresult
SetNodeTextContent
(
nsIContent
*
aContent
const
nsAString
&
aValue
bool
aTryReuse
)
;
[
[
nodiscard
]
]
static
bool
GetNodeTextContent
(
nsINode
*
aNode
bool
aDeep
nsAString
&
aResult
const
mozilla
:
:
fallible_t
&
)
;
static
void
GetNodeTextContent
(
nsINode
*
aNode
bool
aDeep
nsAString
&
aResult
)
;
static
bool
AppendNodeTextContent
(
nsINode
*
aNode
bool
aDeep
nsAString
&
aResult
const
mozilla
:
:
fallible_t
&
)
;
enum
TextContentDiscoverMode
:
uint8_t
{
eRecurseIntoChildren
eDontRecurseIntoChildren
}
;
static
bool
HasNonEmptyTextContent
(
nsINode
*
aNode
TextContentDiscoverMode
aDiscoverMode
=
eDontRecurseIntoChildren
)
;
static
void
DestroyMatchString
(
void
*
aData
)
;
static
void
NotifyInstalledMenuKeyboardListener
(
bool
aInstalling
)
;
static
bool
SchemeIs
(
nsIURI
*
aURI
const
char
*
aScheme
)
;
static
bool
IsExpandedPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
IsSystemOrExpandedPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
static
nsIPrincipal
*
GetSystemPrincipal
(
)
;
static
nsIPrincipal
*
GetNullSubjectPrincipal
(
)
{
return
sNullSubjectPrincipal
;
}
static
bool
CombineResourcePrincipals
(
nsCOMPtr
<
nsIPrincipal
>
*
aResourcePrincipal
nsIPrincipal
*
aExtraPrincipal
)
;
static
void
TriggerLink
(
nsIContent
*
aContent
nsIURI
*
aLinkURI
const
nsString
&
aTargetSpec
bool
aClick
bool
aIsTrusted
)
;
static
void
GetLinkLocation
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsString
&
aLocationString
)
;
static
nsIWidget
*
GetTopLevelWidget
(
nsIWidget
*
aWidget
)
;
static
const
nsDependentString
GetLocalizedEllipsis
(
)
;
static
void
HidePopupsInDocument
(
Document
*
aDocument
)
;
static
already_AddRefed
<
nsIDragSession
>
GetDragSession
(
)
;
static
nsresult
SetDataTransferInEvent
(
mozilla
:
:
WidgetDragEvent
*
aDragEvent
)
;
static
uint32_t
FilterDropEffect
(
uint32_t
aAction
uint32_t
aEffectAllowed
)
;
static
bool
CheckForSubFrameDrop
(
nsIDragSession
*
aDragSession
mozilla
:
:
WidgetDragEvent
*
aDropEvent
)
;
static
bool
URIIsLocalFile
(
nsIURI
*
aURI
)
;
static
void
GetOfflineAppManifest
(
Document
*
aDocument
nsIURI
*
*
aURI
)
;
static
bool
OfflineAppAllowed
(
nsIURI
*
aURI
)
;
static
bool
OfflineAppAllowed
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
PrincipalAllowsL10n
(
nsIPrincipal
&
aPrincipal
nsIURI
*
aDocumentURI
)
;
static
void
AddScriptBlocker
(
)
;
static
void
RemoveScriptBlocker
(
)
;
static
void
AddScriptRunner
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
static
void
AddScriptRunner
(
nsIRunnable
*
aRunnable
)
;
static
bool
IsSafeToRunScript
(
)
;
static
already_AddRefed
<
nsPIDOMWindowOuter
>
GetMostRecentNonPBWindow
(
)
;
static
void
WarnScriptWasIgnored
(
Document
*
aDocument
)
;
static
void
RunInStableState
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
static
void
AddPendingIDBTransaction
(
already_AddRefed
<
nsIRunnable
>
aTransaction
)
;
static
bool
IsInStableOrMetaStableState
(
)
;
static
JSContext
*
GetCurrentJSContext
(
)
;
static
bool
EqualsIgnoreASCIICase
(
nsAtom
*
aAtom1
nsAtom
*
aAtom2
)
;
static
bool
EqualsIgnoreASCIICase
(
const
nsAString
&
aStr1
const
nsAString
&
aStr2
)
;
static
void
ASCIIToLower
(
nsAString
&
aStr
)
;
static
void
ASCIIToLower
(
nsACString
&
aStr
)
;
static
void
ASCIIToLower
(
const
nsAString
&
aSource
nsAString
&
aDest
)
;
static
void
ASCIIToLower
(
const
nsACString
&
aSource
nsACString
&
aDest
)
;
static
void
ASCIIToUpper
(
nsAString
&
aStr
)
;
static
void
ASCIIToUpper
(
nsACString
&
aStr
)
;
static
void
ASCIIToUpper
(
const
nsAString
&
aSource
nsAString
&
aDest
)
;
static
void
ASCIIToUpper
(
const
nsACString
&
aSource
nsACString
&
aDest
)
;
static
bool
StringContainsASCIIUpper
(
const
nsAString
&
aStr
)
;
static
nsresult
CheckSameOrigin
(
nsIChannel
*
aOldChannel
nsIChannel
*
aNewChannel
)
;
static
nsIInterfaceRequestor
*
SameOriginChecker
(
)
;
static
nsresult
GetASCIIOrigin
(
nsIURI
*
aURI
nsACString
&
aOrigin
)
;
static
nsresult
GetUTFOrigin
(
nsIPrincipal
*
aPrincipal
nsAString
&
aOrigin
)
;
static
nsresult
GetUTFOrigin
(
nsIURI
*
aURI
nsAString
&
aOrigin
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
DispatchXULCommand
(
nsIContent
*
aTarget
bool
aTrusted
mozilla
:
:
dom
:
:
Event
*
aSourceEvent
=
nullptr
mozilla
:
:
PresShell
*
aPresShell
=
nullptr
bool
aCtrl
=
false
bool
aAlt
=
false
bool
aShift
=
false
bool
aMeta
=
false
uint16_t
inputSource
=
0
int16_t
aButton
=
0
)
;
static
bool
CheckMayLoad
(
nsIPrincipal
*
aPrincipal
nsIChannel
*
aChannel
bool
aAllowIfInheritsPrincipal
)
;
static
bool
CanAccessNativeAnon
(
)
;
[
[
nodiscard
]
]
static
nsresult
WrapNative
(
JSContext
*
cx
nsISupports
*
native
const
nsIID
*
aIID
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
aAllowWrapping
=
true
)
{
return
WrapNative
(
cx
native
nullptr
aIID
vp
aAllowWrapping
)
;
}
[
[
nodiscard
]
]
static
nsresult
WrapNative
(
JSContext
*
cx
nsISupports
*
native
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
aAllowWrapping
=
true
)
{
return
WrapNative
(
cx
native
nullptr
nullptr
vp
aAllowWrapping
)
;
}
[
[
nodiscard
]
]
static
nsresult
WrapNative
(
JSContext
*
cx
nsISupports
*
native
nsWrapperCache
*
cache
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
aAllowWrapping
=
true
)
{
return
WrapNative
(
cx
native
cache
nullptr
vp
aAllowWrapping
)
;
}
static
nsresult
CreateArrayBuffer
(
JSContext
*
aCx
const
nsACString
&
aData
JSObject
*
*
aResult
)
;
static
void
StripNullChars
(
const
nsAString
&
aInStr
nsAString
&
aOutStr
)
;
static
void
RemoveNewlines
(
nsString
&
aString
)
;
static
void
PlatformToDOMLineBreaks
(
nsString
&
aString
)
;
[
[
nodiscard
]
]
static
bool
PlatformToDOMLineBreaks
(
nsString
&
aString
const
mozilla
:
:
fallible_t
&
)
;
static
void
PopulateStringFromStringBuffer
(
nsStringBuffer
*
aBuf
nsAString
&
aResultString
)
;
static
bool
IsHandlingKeyBoardEvent
(
)
{
return
sIsHandlingKeyBoardEvent
;
}
static
void
SetIsHandlingKeyBoardEvent
(
bool
aHandling
)
{
sIsHandlingKeyBoardEvent
=
aHandling
;
}
static
already_AddRefed
<
nsContentList
>
GetElementsByClassName
(
nsINode
*
aRootNode
const
nsAString
&
aClasses
)
;
static
mozilla
:
:
PresShell
*
FindPresShellForDocument
(
const
Document
*
aDocument
)
;
static
nsPresContext
*
FindPresContextForDocument
(
const
Document
*
aDocument
)
;
static
nsIWidget
*
WidgetForDocument
(
const
Document
*
aDocument
)
;
static
nsIWidget
*
WidgetForContent
(
const
nsIContent
*
aContent
)
;
static
already_AddRefed
<
mozilla
:
:
layers
:
:
LayerManager
>
LayerManagerForDocument
(
const
Document
*
aDoc
)
;
static
already_AddRefed
<
mozilla
:
:
layers
:
:
LayerManager
>
LayerManagerForContent
(
const
nsIContent
*
aContent
)
;
static
already_AddRefed
<
mozilla
:
:
layers
:
:
LayerManager
>
PersistentLayerManagerForDocument
(
Document
*
aDoc
)
;
static
bool
IsFocusedContent
(
const
nsIContent
*
aContent
)
;
static
bool
IsCutCopyAllowed
(
Document
*
aDocument
nsIPrincipal
&
aSubjectPrincipal
)
;
static
bool
ResistFingerprinting
(
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
{
return
aCallerType
!
=
mozilla
:
:
dom
:
:
CallerType
:
:
System
&
&
ShouldResistFingerprinting
(
)
;
}
static
bool
BypassCSSOMOriginCheck
(
)
{
#
ifdef
RELEASE_OR_BETA
return
false
;
#
else
return
sBypassCSSOMOriginCheck
;
#
endif
}
static
void
FireMutationEventsForDirectParsing
(
Document
*
aDoc
nsIContent
*
aDest
int32_t
aOldChildCount
)
;
static
bool
HasPluginWithUncontrolledEventDispatch
(
nsIContent
*
aContent
)
;
static
Document
*
GetRootDocument
(
Document
*
aDoc
)
;
static
void
GetShiftText
(
nsAString
&
text
)
;
static
void
GetControlText
(
nsAString
&
text
)
;
static
void
GetMetaText
(
nsAString
&
text
)
;
static
void
GetOSText
(
nsAString
&
text
)
;
static
void
GetAltText
(
nsAString
&
text
)
;
static
void
GetModifierSeparatorText
(
nsAString
&
text
)
;
static
bool
IsSubDocumentTabbable
(
nsIContent
*
aContent
)
;
static
bool
HasScrollgrab
(
nsIContent
*
aContent
)
;
static
void
FlushLayoutForTree
(
nsPIDOMWindowOuter
*
aWindow
)
;
static
bool
AllowXULXBLForPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
static
void
XPCOMShutdown
(
)
;
static
bool
IsPDFJSEnabled
(
)
;
static
bool
IsPDFJS
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
IsPDFJS
(
JSContext
*
JSObject
*
)
;
static
bool
IsSWFPlayerEnabled
(
)
;
enum
ContentViewerType
{
TYPE_UNSUPPORTED
TYPE_CONTENT
TYPE_FALLBACK
TYPE_UNKNOWN
}
;
static
already_AddRefed
<
nsIDocumentLoaderFactory
>
FindInternalContentViewer
(
const
nsACString
&
aType
ContentViewerType
*
aLoaderType
=
nullptr
)
;
static
mozilla
:
:
Maybe
<
bool
>
IsPatternMatching
(
nsAString
&
aValue
nsAString
&
aPattern
const
Document
*
aDocument
)
;
static
void
InitializeTouchEventTable
(
)
;
static
nsresult
URIInheritsSecurityContext
(
nsIURI
*
aURI
bool
*
aResult
)
;
static
bool
ChannelShouldInheritPrincipal
(
nsIPrincipal
*
aLoadingPrincipal
nsIURI
*
aURI
bool
aInheritForAboutBlank
bool
aForceInherit
)
;
static
nsresult
Btoa
(
const
nsAString
&
aBinaryData
nsAString
&
aAsciiBase64String
)
;
static
nsresult
Atob
(
const
nsAString
&
aAsciiString
nsAString
&
aBinaryData
)
;
static
bool
IsAutocompleteEnabled
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInput
)
;
enum
AutocompleteAttrState
:
uint8_t
{
eAutocompleteAttrState_Unknown
=
1
eAutocompleteAttrState_Invalid
eAutocompleteAttrState_Valid
}
;
static
AutocompleteAttrState
SerializeAutocompleteAttribute
(
const
nsAttrValue
*
aAttr
nsAString
&
aResult
AutocompleteAttrState
aCachedState
=
eAutocompleteAttrState_Unknown
)
;
static
AutocompleteAttrState
SerializeAutocompleteAttribute
(
const
nsAttrValue
*
aAttr
mozilla
:
:
dom
:
:
AutocompleteInfo
&
aInfo
AutocompleteAttrState
aCachedState
=
eAutocompleteAttrState_Unknown
bool
aGrantAllValidValue
=
false
)
;
static
bool
GetPseudoAttributeValue
(
const
nsString
&
aSource
nsAtom
*
aName
nsAString
&
aValue
)
;
static
bool
IsJavaScriptLanguage
(
const
nsString
&
aName
)
;
static
bool
IsJavascriptMIMEType
(
const
nsAString
&
aMIMEType
)
;
static
void
SplitMimeType
(
const
nsAString
&
aValue
nsString
&
aType
nsString
&
aParams
)
;
static
nsresult
IsUserIdle
(
uint32_t
aRequestedIdleTimeInMS
bool
*
aUserIsIdle
)
;
static
void
GetSelectionInTextControl
(
mozilla
:
:
dom
:
:
Selection
*
aSelection
Element
*
aRoot
uint32_t
&
aOutStartOffset
uint32_t
&
aOutEndOffset
)
;
static
int32_t
GetAdjustedOffsetInTextControl
(
nsIFrame
*
aOffsetFrame
int32_t
aOffset
)
;
static
mozilla
:
:
HTMLEditor
*
GetHTMLEditor
(
nsPresContext
*
aPresContext
)
;
static
mozilla
:
:
HTMLEditor
*
GetHTMLEditor
(
nsDocShell
*
aDocShell
)
;
static
mozilla
:
:
TextEditor
*
GetActiveEditor
(
nsPresContext
*
aPresContext
)
;
static
mozilla
:
:
TextEditor
*
GetActiveEditor
(
nsPIDOMWindowOuter
*
aWindow
)
;
static
mozilla
:
:
TextEditor
*
GetTextEditorFromAnonymousNodeWithoutCreation
(
nsIContent
*
aAnonymousContent
)
;
static
bool
IsNodeInEditableRegion
(
nsINode
*
aNode
)
;
static
mozilla
:
:
LogModule
*
DOMDumpLog
(
)
;
static
bool
IsForbiddenRequestHeader
(
const
nsACString
&
aHeader
)
;
static
bool
IsForbiddenSystemRequestHeader
(
const
nsACString
&
aHeader
)
;
static
bool
IsCorsUnsafeRequestHeaderValue
(
const
nsACString
&
aHeaderValue
)
;
static
bool
IsAllowedNonCorsAccept
(
const
nsACString
&
aHeaderValue
)
;
static
bool
IsAllowedNonCorsContentType
(
const
nsACString
&
aHeaderValue
)
;
static
bool
IsAllowedNonCorsLanguage
(
const
nsACString
&
aHeaderValue
)
;
static
bool
IsCORSSafelistedRequestHeader
(
const
nsACString
&
aName
const
nsACString
&
aValue
)
;
static
bool
IsForbiddenResponseHeader
(
const
nsACString
&
aHeader
)
;
static
uint64_t
GetInnerWindowID
(
nsIRequest
*
aRequest
)
;
static
uint64_t
GetInnerWindowID
(
nsILoadGroup
*
aLoadGroup
)
;
static
void
MaybeFixIPv6Host
(
nsACString
&
aHost
)
;
static
nsresult
GetHostOrIPv6WithBrackets
(
nsIURI
*
aURI
nsAString
&
aHost
)
;
static
nsresult
GetHostOrIPv6WithBrackets
(
nsIURI
*
aURI
nsACString
&
aHost
)
;
static
nsresult
GetHostOrIPv6WithBrackets
(
nsIPrincipal
*
aPrincipal
nsACString
&
aHost
)
;
static
void
CallOnAllRemoteChildren
(
nsPIDOMWindowOuter
*
aWindow
const
std
:
:
function
<
mozilla
:
:
CallState
(
mozilla
:
:
dom
:
:
BrowserParent
*
)
>
&
aCallback
)
;
static
void
SetKeyboardIndicatorsOnRemoteChildren
(
nsPIDOMWindowOuter
*
aWindow
UIStateChangeType
aShowFocusRings
)
;
static
nsresult
SlurpFileToString
(
nsIFile
*
aFile
nsACString
&
aString
)
;
static
bool
IsFileImage
(
nsIFile
*
aFile
nsACString
&
aType
)
;
static
nsresult
DataTransferItemToImage
(
const
mozilla
:
:
dom
:
:
IPCDataTransferItem
&
aItem
imgIContainer
*
*
aContainer
)
;
static
bool
IsFlavorImage
(
const
nsACString
&
aFlavor
)
;
static
nsresult
IPCTransferableToTransferable
(
const
mozilla
:
:
dom
:
:
IPCDataTransfer
&
aDataTransfer
const
bool
&
aIsPrivateData
nsIPrincipal
*
aRequestingPrincipal
const
nsContentPolicyType
&
aContentPolicyType
nsITransferable
*
aTransferable
mozilla
:
:
dom
:
:
ContentParent
*
aContentParent
mozilla
:
:
dom
:
:
BrowserChild
*
aBrowserChild
)
;
static
void
TransferablesToIPCTransferables
(
nsIArray
*
aTransferables
nsTArray
<
mozilla
:
:
dom
:
:
IPCDataTransfer
>
&
aIPC
bool
aInSyncMessage
mozilla
:
:
dom
:
:
ContentChild
*
aChild
mozilla
:
:
dom
:
:
ContentParent
*
aParent
)
;
static
void
TransferableToIPCTransferable
(
nsITransferable
*
aTransferable
mozilla
:
:
dom
:
:
IPCDataTransfer
*
aIPCDataTransfer
bool
aInSyncMessage
mozilla
:
:
dom
:
:
ContentChild
*
aChild
mozilla
:
:
dom
:
:
ContentParent
*
aParent
)
;
static
mozilla
:
:
UniquePtr
<
char
[
]
>
GetSurfaceData
(
mozilla
:
:
NotNull
<
mozilla
:
:
gfx
:
:
DataSourceSurface
*
>
aSurface
size_t
*
aLength
int32_t
*
aStride
)
;
static
mozilla
:
:
Maybe
<
mozilla
:
:
ipc
:
:
Shmem
>
GetSurfaceData
(
mozilla
:
:
gfx
:
:
DataSourceSurface
*
aSurface
size_t
*
aLength
int32_t
*
aStride
mozilla
:
:
ipc
:
:
IShmemAllocator
*
aAlloc
)
;
static
mozilla
:
:
Modifiers
GetWidgetModifiers
(
int32_t
aModifiers
)
;
static
nsIWidget
*
GetWidget
(
mozilla
:
:
PresShell
*
aPresShell
nsPoint
*
aOffset
)
;
static
int16_t
GetButtonsFlagForButton
(
int32_t
aButton
)
;
static
mozilla
:
:
LayoutDeviceIntPoint
ToWidgetPoint
(
const
mozilla
:
:
CSSPoint
&
aPoint
const
nsPoint
&
aOffset
nsPresContext
*
aPresContext
)
;
static
nsView
*
GetViewToDispatchEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
PresShell
*
*
aPresShell
)
;
MOZ_CAN_RUN_SCRIPT
static
nsresult
SendMouseEvent
(
mozilla
:
:
PresShell
*
aPresShell
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aButtons
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
float
aPressure
unsigned
short
aInputSourceArg
uint32_t
aIdentifier
bool
aToWindow
bool
*
aPreventDefault
bool
aIsDOMEventSynthesized
bool
aIsWidgetEventSynthesized
)
;
static
void
FirePageShowEventForFrameLoaderSwap
(
nsIDocShellTreeItem
*
aItem
mozilla
:
:
dom
:
:
EventTarget
*
aChromeEventHandler
bool
aFireIfShowing
bool
aOnlySystemGroup
=
false
)
;
static
void
FirePageHideEventForFrameLoaderSwap
(
nsIDocShellTreeItem
*
aItem
mozilla
:
:
dom
:
:
EventTarget
*
aChromeEventHandler
bool
aOnlySystemGroup
=
false
)
;
static
already_AddRefed
<
nsPIWindowRoot
>
GetWindowRoot
(
Document
*
aDoc
)
;
static
mozilla
:
:
dom
:
:
ReferrerPolicy
GetReferrerPolicyFromChannel
(
nsIChannel
*
aChannel
)
;
static
bool
IsNonSubresourceRequest
(
nsIChannel
*
aChannel
)
;
static
bool
IsNonSubresourceInternalPolicyType
(
nsContentPolicyType
aType
)
;
public
:
static
bool
IsThirdPartyWindowOrChannel
(
nsPIDOMWindowInner
*
aWindow
nsIChannel
*
aChannel
nsIURI
*
aURI
)
;
static
bool
IsThirdPartyTrackingResourceWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
static
bool
IsFirstPartyTrackingResourceWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
static
bool
SerializeNodeToMarkup
(
nsINode
*
aRoot
bool
aDescendentsOnly
nsAString
&
aOut
)
;
static
bool
IsSpecificAboutPage
(
JSObject
*
aGlobal
const
char
*
aUri
)
;
static
void
SetScrollbarsVisibility
(
nsIDocShell
*
aDocShell
bool
aVisible
)
;
static
nsIDocShell
*
GetDocShellForEventTarget
(
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
)
;
static
bool
HttpsStateIsModern
(
Document
*
aDocument
)
;
static
bool
ComputeIsSecureContext
(
nsIChannel
*
aChannel
)
;
static
void
TryToUpgradeElement
(
Element
*
aElement
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
nsresult
NewXULOrHTMLElement
(
Element
*
*
aResult
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
nsAtom
*
aIsAtom
mozilla
:
:
dom
:
:
CustomElementDefinition
*
aDefinition
)
;
static
mozilla
:
:
dom
:
:
CustomElementRegistry
*
GetCustomElementRegistry
(
Document
*
)
;
static
mozilla
:
:
dom
:
:
CustomElementDefinition
*
LookupCustomElementDefinition
(
Document
*
aDoc
nsAtom
*
aNameAtom
uint32_t
aNameSpaceID
nsAtom
*
aTypeAtom
)
;
static
void
RegisterCallbackUpgradeElement
(
Element
*
aElement
nsAtom
*
aTypeName
)
;
static
void
RegisterUnresolvedElement
(
Element
*
aElement
nsAtom
*
aTypeName
)
;
static
void
UnregisterUnresolvedElement
(
Element
*
aElement
)
;
static
void
EnqueueUpgradeReaction
(
Element
*
aElement
mozilla
:
:
dom
:
:
CustomElementDefinition
*
aDefinition
)
;
static
void
EnqueueLifecycleCallback
(
mozilla
:
:
dom
:
:
ElementCallbackType
aType
Element
*
aCustomElement
mozilla
:
:
dom
:
:
LifecycleCallbackArgs
*
aArgs
=
nullptr
mozilla
:
:
dom
:
:
LifecycleAdoptedCallbackArgs
*
aAdoptedCallbackArgs
=
nullptr
mozilla
:
:
dom
:
:
CustomElementDefinition
*
aDefinition
=
nullptr
)
;
static
void
AppendDocumentLevelNativeAnonymousContentTo
(
Document
*
aDocument
nsTArray
<
nsIContent
*
>
&
aElements
)
;
static
void
AppendNativeAnonymousChildren
(
const
nsIContent
*
aContent
nsTArray
<
nsIContent
*
>
&
aKids
uint32_t
aFlags
)
;
static
bool
QueryTriggeringPrincipal
(
nsIContent
*
aLoadingNode
nsIPrincipal
*
aDefaultPrincipal
nsIPrincipal
*
*
aTriggeringPrincipal
)
;
static
bool
QueryTriggeringPrincipal
(
nsIContent
*
aLoadingNode
nsIPrincipal
*
*
aTriggeringPrincipal
)
{
return
QueryTriggeringPrincipal
(
aLoadingNode
nullptr
aTriggeringPrincipal
)
;
}
static
void
GetContentPolicyTypeForUIImageLoading
(
nsIContent
*
aLoadingNode
nsIPrincipal
*
*
aTriggeringPrincipal
nsContentPolicyType
&
aContentPolicyType
uint64_t
*
aRequestContextID
)
;
static
nsresult
CreateJSValueFromSequenceOfObject
(
JSContext
*
aCx
const
mozilla
:
:
dom
:
:
Sequence
<
JSObject
*
>
&
aTransfer
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
static
bool
ShouldBlockReservedKeys
(
mozilla
:
:
WidgetKeyboardEvent
*
aKeyEvent
)
;
static
already_AddRefed
<
nsIPluginTag
>
PluginTagForType
(
const
nsCString
&
aMIMEType
bool
aNoFakePlugin
)
;
static
uint32_t
HtmlObjectContentTypeForMIMEType
(
const
nsCString
&
aMIMEType
bool
aNoFakePlugin
nsIContent
*
aContent
)
;
static
already_AddRefed
<
nsISerialEventTarget
>
GetEventTargetByLoadInfo
(
nsILoadInfo
*
aLoadInfo
mozilla
:
:
TaskCategory
aCategory
)
;
static
bool
IsLocalRefURL
(
const
nsAString
&
aString
)
;
static
uint64_t
GenerateTabId
(
)
;
static
uint64_t
GenerateBrowserId
(
)
;
static
uint64_t
GenerateBrowsingContextId
(
)
;
static
uint64_t
GenerateProcessSpecificId
(
uint64_t
aId
)
;
static
std
:
:
tuple
<
uint64_t
uint64_t
>
SplitProcessSpecificId
(
uint64_t
aId
)
;
static
uint64_t
GenerateWindowId
(
)
;
static
uint64_t
GenerateLoadIdentifier
(
)
;
static
bool
GetUserIsInteracting
(
)
;
[
[
nodiscard
]
]
static
bool
InitJSBytecodeMimeType
(
)
;
static
nsCString
&
JSBytecodeMimeType
(
)
{
MOZ_ASSERT
(
sJSBytecodeMimeType
)
;
return
*
sJSBytecodeMimeType
;
}
static
bool
IsSpecialName
(
const
nsAString
&
aName
)
;
static
bool
IsOverridingWindowName
(
const
nsAString
&
aName
)
;
static
bool
GetSourceMapURL
(
nsIHttpChannel
*
aChannel
nsACString
&
aResult
)
;
static
bool
IsMessageInputEvent
(
const
IPC
:
:
Message
&
aMsg
)
;
static
bool
IsMessageCriticalInputEvent
(
const
IPC
:
:
Message
&
aMsg
)
;
static
void
AsyncPrecreateStringBundles
(
)
;
static
bool
ContentIsLink
(
nsIContent
*
aContent
)
;
static
already_AddRefed
<
mozilla
:
:
dom
:
:
ContentFrameMessageManager
>
TryGetBrowserChildGlobal
(
nsISupports
*
aFrom
)
;
static
uint32_t
InnerOrOuterWindowCreated
(
)
;
static
void
InnerOrOuterWindowDestroyed
(
)
;
static
int32_t
GetCurrentInnerOrOuterWindowCount
(
)
{
return
sInnerOrOuterWindowCount
;
}
static
bool
StringifyJSON
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
nsAString
&
aOutStr
)
;
static
bool
HighPriorityEventPendingForTopLevelDocumentBeforeContentfulPaint
(
Document
*
aDocument
)
;
static
nsGlobalWindowInner
*
CallerInnerWindow
(
)
;
static
mozilla
:
:
ScreenIntMargin
GetWindowSafeAreaInsets
(
nsIScreen
*
aScreen
const
mozilla
:
:
ScreenIntMargin
&
aSafeareaInsets
const
mozilla
:
:
LayoutDeviceIntRect
&
aWindowRect
)
;
struct
SubresourceCacheValidationInfo
{
mozilla
:
:
Maybe
<
uint32_t
>
mExpirationTime
;
bool
mMustRevalidate
=
false
;
}
;
static
SubresourceCacheValidationInfo
GetSubresourceCacheValidationInfo
(
nsIRequest
*
)
;
static
uint32_t
SecondsFromPRTime
(
PRTime
aTime
)
{
return
uint32_t
(
int64_t
(
aTime
)
/
int64_t
(
PR_USEC_PER_SEC
)
)
;
}
static
nsCString
TruncatedURLForDisplay
(
nsIURI
*
aURL
uint32_t
aMaxLen
=
128
)
;
private
:
static
bool
InitializeEventTable
(
)
;
static
nsresult
EnsureStringBundle
(
PropertiesFile
aFile
)
;
static
bool
CanCallerAccess
(
nsIPrincipal
*
aSubjectPrincipal
nsIPrincipal
*
aPrincipal
)
;
static
nsresult
WrapNative
(
JSContext
*
cx
nsISupports
*
native
nsWrapperCache
*
cache
const
nsIID
*
aIID
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
aAllowWrapping
)
;
static
nsresult
DispatchEvent
(
Document
*
aDoc
nsISupports
*
aTarget
const
nsAString
&
aEventName
CanBubble
Cancelable
Composed
Trusted
bool
*
aDefaultAction
=
nullptr
ChromeOnlyDispatch
=
ChromeOnlyDispatch
:
:
eNo
)
;
static
nsresult
DispatchEvent
(
Document
*
aDoc
nsISupports
*
aTarget
mozilla
:
:
WidgetEvent
&
aWidgetEvent
EventMessage
aEventMessage
CanBubble
Cancelable
Trusted
bool
*
aDefaultAction
=
nullptr
ChromeOnlyDispatch
=
ChromeOnlyDispatch
:
:
eNo
)
;
static
void
InitializeModifierStrings
(
)
;
static
void
DropFragmentParsers
(
)
;
static
bool
MatchClassNames
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNamespaceID
nsAtom
*
aAtom
void
*
aData
)
;
static
void
DestroyClassNameArray
(
void
*
aData
)
;
static
void
*
AllocClassMatchingInfo
(
nsINode
*
aRootNode
const
nsString
*
aClasses
)
;
static
mozilla
:
:
EventClassID
GetEventClassIDFromMessage
(
EventMessage
aEventMessage
)
;
static
AutocompleteAttrState
InternalSerializeAutocompleteAttribute
(
const
nsAttrValue
*
aAttrVal
mozilla
:
:
dom
:
:
AutocompleteInfo
&
aInfo
bool
aGrantAllValidValue
=
false
)
;
static
mozilla
:
:
CallState
CallOnAllRemoteChildren
(
mozilla
:
:
dom
:
:
MessageBroadcaster
*
aManager
const
std
:
:
function
<
mozilla
:
:
CallState
(
mozilla
:
:
dom
:
:
BrowserParent
*
)
>
&
aCallback
)
;
static
nsINode
*
GetCommonAncestorHelper
(
nsINode
*
aNode1
nsINode
*
aNode2
)
;
static
nsIContent
*
GetCommonFlattenedTreeAncestorHelper
(
nsIContent
*
aContent1
nsIContent
*
aContent2
)
;
static
nsIXPConnect
*
sXPConnect
;
static
nsIScriptSecurityManager
*
sSecurityManager
;
static
nsIPrincipal
*
sSystemPrincipal
;
static
nsIPrincipal
*
sNullSubjectPrincipal
;
static
nsNameSpaceManager
*
sNameSpaceManager
;
static
nsIIOService
*
sIOService
;
static
nsIUUIDGenerator
*
sUUIDGenerator
;
static
nsIConsoleService
*
sConsoleService
;
static
nsTHashMap
<
nsRefPtrHashKey
<
nsAtom
>
EventNameMapping
>
*
sAtomEventTable
;
static
nsTHashMap
<
nsStringHashKey
EventNameMapping
>
*
sStringEventTable
;
static
nsTArray
<
RefPtr
<
nsAtom
>
>
*
sUserDefinedEvents
;
static
nsIStringBundleService
*
sStringBundleService
;
static
nsIStringBundle
*
sStringBundles
[
PropertiesFile_COUNT
]
;
class
nsContentUtilsReporter
;
static
nsIContentPolicy
*
sContentPolicyService
;
static
bool
sTriedToGetContentPolicy
;
static
RefPtr
<
mozilla
:
:
intl
:
:
LineBreaker
>
sLineBreaker
;
static
RefPtr
<
mozilla
:
:
intl
:
:
WordBreaker
>
sWordBreaker
;
static
mozilla
:
:
StaticRefPtr
<
nsIBidiKeyboard
>
sBidiKeyboard
;
static
bool
sInitialized
;
static
uint32_t
sScriptBlockerCount
;
static
uint32_t
sDOMNodeRemovedSuppressCount
;
static
AutoTArray
<
nsCOMPtr
<
nsIRunnable
>
8
>
*
sBlockedScriptRunners
;
static
uint32_t
sRunnersCountAtFirstBlocker
;
static
uint32_t
sScriptBlockerCountWhereRunnersPrevented
;
static
nsIInterfaceRequestor
*
sSameOriginChecker
;
static
bool
sIsHandlingKeyBoardEvent
;
#
ifndef
RELEASE_OR_BETA
static
bool
sBypassCSSOMOriginCheck
;
#
endif
class
UserInteractionObserver
;
static
UserInteractionObserver
*
sUserInteractionObserver
;
static
nsHtml5StringParser
*
sHTMLFragmentParser
;
static
nsIParser
*
sXMLFragmentParser
;
static
nsIFragmentContentSink
*
sXMLFragmentSink
;
static
bool
sFragmentParsingActive
;
static
nsString
*
sShiftText
;
static
nsString
*
sControlText
;
static
nsString
*
sMetaText
;
static
nsString
*
sOSText
;
static
nsString
*
sAltText
;
static
nsString
*
sModifierSeparator
;
static
nsCString
*
sJSBytecodeMimeType
;
static
mozilla
:
:
LazyLogModule
sDOMDumpLog
;
static
int32_t
sInnerOrOuterWindowCount
;
static
uint32_t
sInnerOrOuterWindowSerialCounter
;
}
;
inline
ExtContentPolicyType
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
nsContentPolicyType
aType
)
{
switch
(
aType
)
{
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SCRIPT
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SCRIPT_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_MODULE
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_MODULE_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_WORKER
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SHARED_WORKER
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SERVICE_WORKER
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_WORKER_IMPORT_SCRIPTS
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_AUDIOWORKLET
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_PAINTWORKLET
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_CHROMEUTILS_COMPILED_SCRIPT
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_FRAME_MESSAGEMANAGER_SCRIPT
:
return
ExtContentPolicy
:
:
TYPE_SCRIPT
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_EMBED
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_OBJECT
:
return
ExtContentPolicy
:
:
TYPE_OBJECT
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_FRAME
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IFRAME
:
return
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_AUDIO
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_VIDEO
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_TRACK
:
return
ExtContentPolicy
:
:
TYPE_MEDIA
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_XMLHTTPREQUEST
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_EVENTSOURCE
:
return
ExtContentPolicy
:
:
TYPE_XMLHTTPREQUEST
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE_FAVICON
:
return
ExtContentPolicy
:
:
TYPE_IMAGE
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_STYLESHEET
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_STYLESHEET_PRELOAD
:
return
ExtContentPolicy
:
:
TYPE_STYLESHEET
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_DTD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_FORCE_ALLOWED_DTD
:
return
ExtContentPolicy
:
:
TYPE_DTD
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_FONT_PRELOAD
:
return
ExtContentPolicy
:
:
TYPE_FONT
;
case
nsIContentPolicy
:
:
TYPE_INTERNAL_FETCH_PRELOAD
:
return
ExtContentPolicy
:
:
TYPE_FETCH
;
default
:
return
static_cast
<
ExtContentPolicyType
>
(
aType
)
;
}
}
class
MOZ_RAII
nsAutoScriptBlocker
{
public
:
explicit
nsAutoScriptBlocker
(
)
{
nsContentUtils
:
:
AddScriptBlocker
(
)
;
}
~
nsAutoScriptBlocker
(
)
{
nsContentUtils
:
:
RemoveScriptBlocker
(
)
;
}
private
:
}
;
class
MOZ_STACK_CLASS
nsAutoScriptBlockerSuppressNodeRemoved
:
public
nsAutoScriptBlocker
{
public
:
nsAutoScriptBlockerSuppressNodeRemoved
(
)
{
+
+
nsContentUtils
:
:
sDOMNodeRemovedSuppressCount
;
}
~
nsAutoScriptBlockerSuppressNodeRemoved
(
)
{
-
-
nsContentUtils
:
:
sDOMNodeRemovedSuppressCount
;
}
}
;
namespace
mozilla
{
namespace
dom
{
class
TreeOrderComparator
{
public
:
bool
Equals
(
nsINode
*
aElem1
nsINode
*
aElem2
)
const
{
return
aElem1
=
=
aElem2
;
}
bool
LessThan
(
nsINode
*
aElem1
nsINode
*
aElem2
)
const
{
return
nsContentUtils
:
:
PositionIsBefore
(
aElem1
aElem2
)
;
}
}
;
}
}
#
define
NS_INTERFACE_MAP_ENTRY_TEAROFF
(
_interface
_allocator
)
\
if
(
aIID
.
Equals
(
NS_GET_IID
(
_interface
)
)
)
{
\
foundInterface
=
static_cast
<
_interface
*
>
(
_allocator
)
;
\
if
(
!
foundInterface
)
{
\
*
aInstancePtr
=
nullptr
;
\
return
NS_ERROR_OUT_OF_MEMORY
;
\
}
\
}
else
#
define
NS_ENSURE_FINITE
(
f
rv
)
\
if
(
!
mozilla
:
:
IsFinite
(
f
)
)
{
\
return
(
rv
)
;
\
}
#
define
NS_ENSURE_FINITE2
(
f1
f2
rv
)
\
if
(
!
mozilla
:
:
IsFinite
(
(
f1
)
+
(
f2
)
)
)
{
\
return
(
rv
)
;
\
}
#
define
NS_ENSURE_FINITE4
(
f1
f2
f3
f4
rv
)
\
if
(
!
mozilla
:
:
IsFinite
(
(
f1
)
+
(
f2
)
+
(
f3
)
+
(
f4
)
)
)
{
\
return
(
rv
)
;
\
}
#
define
NS_ENSURE_FINITE5
(
f1
f2
f3
f4
f5
rv
)
\
if
(
!
mozilla
:
:
IsFinite
(
(
f1
)
+
(
f2
)
+
(
f3
)
+
(
f4
)
+
(
f5
)
)
)
{
\
return
(
rv
)
;
\
}
#
define
NS_ENSURE_FINITE6
(
f1
f2
f3
f4
f5
f6
rv
)
\
if
(
!
mozilla
:
:
IsFinite
(
(
f1
)
+
(
f2
)
+
(
f3
)
+
(
f4
)
+
(
f5
)
+
(
f6
)
)
)
{
\
return
(
rv
)
;
\
}
#
define
NS_CONTENT_DELETE_LIST_MEMBER
(
type_
ptr_
member_
)
\
{
\
type_
*
cur
=
(
ptr_
)
-
>
member_
;
\
(
ptr_
)
-
>
member_
=
nullptr
;
\
while
(
cur
)
{
\
type_
*
next
=
cur
-
>
member_
;
\
cur
-
>
member_
=
nullptr
;
\
delete
cur
;
\
cur
=
next
;
\
}
\
}
#
endif
