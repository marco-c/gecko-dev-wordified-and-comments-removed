#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
nsTextNode
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
namespace
mozilla
{
namespace
dom
{
already_AddRefed
<
Text
>
Text
:
:
SplitText
(
uint32_t
aOffset
ErrorResult
&
aRv
)
{
nsAutoString
cutText
;
uint32_t
length
=
TextLength
(
)
;
if
(
aOffset
>
length
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
;
return
nullptr
;
}
uint32_t
cutStartOffset
=
aOffset
;
uint32_t
cutLength
=
length
-
aOffset
;
SubstringData
(
cutStartOffset
cutLength
cutText
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
nsIDocument
*
document
=
GetComposedDoc
(
)
;
mozAutoDocUpdate
updateBatch
(
document
UPDATE_CONTENT_MODEL
true
)
;
nsGenericDOMDataNode
*
clone
=
CloneDataNode
(
mNodeInfo
false
)
;
MOZ_ASSERT
(
clone
&
&
clone
-
>
IsText
(
)
)
;
RefPtr
<
Text
>
newContent
=
static_cast
<
Text
*
>
(
clone
)
;
newContent
-
>
SetText
(
cutText
true
)
;
CharacterDataChangeInfo
:
:
Details
details
=
{
CharacterDataChangeInfo
:
:
Details
:
:
eSplit
newContent
}
;
nsresult
rv
=
SetTextInternal
(
cutStartOffset
cutLength
nullptr
0
true
&
details
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
nsCOMPtr
<
nsINode
>
parent
=
GetParentNode
(
)
;
if
(
parent
)
{
nsCOMPtr
<
nsIContent
>
beforeNode
=
GetNextSibling
(
)
;
parent
-
>
InsertChildBefore
(
newContent
beforeNode
true
)
;
}
return
newContent
.
forget
(
)
;
}
already_AddRefed
<
Text
>
Text
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aData
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
return
window
-
>
GetDoc
(
)
-
>
CreateTextNode
(
aData
)
;
}
}
}
