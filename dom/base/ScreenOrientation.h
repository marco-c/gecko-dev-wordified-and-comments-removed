#
ifndef
mozilla_dom_ScreenOrientation_h
#
define
mozilla_dom_ScreenOrientation_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ScreenOrientationBinding
.
h
"
#
include
"
mozilla
/
HalScreenConfiguration
.
h
"
class
nsScreen
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
ScreenOrientation
final
:
public
DOMEventTargetHelper
public
mozilla
:
:
hal
:
:
ScreenConfigurationObserver
{
friend
class
:
:
nsScreen
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ScreenOrientation
mozilla
:
:
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
change
)
ScreenOrientation
(
nsPIDOMWindowInner
*
aWindow
nsScreen
*
aScreen
)
;
already_AddRefed
<
Promise
>
Lock
(
OrientationLockType
aOrientation
ErrorResult
&
aRv
)
;
void
Unlock
(
ErrorResult
&
aRv
)
;
OrientationType
DeviceType
(
CallerType
aCallerType
)
const
;
uint16_t
DeviceAngle
(
CallerType
aCallerType
)
const
;
OrientationType
GetType
(
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
uint16_t
GetAngle
(
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Notify
(
const
mozilla
:
:
hal
:
:
ScreenConfiguration
&
aConfiguration
)
override
;
static
void
UpdateActiveOrientationLock
(
hal
:
:
ScreenOrientation
aOrientation
)
;
static
void
AbortInProcessOrientationPromises
(
BrowsingContext
*
aBrowsingContext
)
;
private
:
virtual
~
ScreenOrientation
(
)
;
class
FullscreenEventListener
;
class
VisibleEventListener
;
class
LockOrientationTask
;
enum
LockPermission
{
LOCK_DENIED
FULLSCREEN_LOCK_ALLOWED
LOCK_ALLOWED
}
;
bool
LockDeviceOrientation
(
hal
:
:
ScreenOrientation
aOrientation
bool
aIsFullscreen
ErrorResult
&
aRv
)
;
void
UnlockDeviceOrientation
(
)
;
already_AddRefed
<
Promise
>
LockInternal
(
hal
:
:
ScreenOrientation
aOrientation
ErrorResult
&
aRv
)
;
nsCOMPtr
<
nsIRunnable
>
DispatchChangeEventAndResolvePromise
(
)
;
bool
ShouldResistFingerprinting
(
)
const
;
LockPermission
GetLockOrientationPermission
(
bool
aCheckSandbox
)
const
;
Document
*
GetResponsibleDocument
(
)
const
;
RefPtr
<
nsScreen
>
mScreen
;
RefPtr
<
FullscreenEventListener
>
mFullscreenListener
;
RefPtr
<
VisibleEventListener
>
mVisibleListener
;
OrientationType
mType
;
uint16_t
mAngle
;
}
;
}
}
#
endif
