#
ifndef
mozilla_dom_ScreenOrientation_h
#
define
mozilla_dom_ScreenOrientation_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ScreenOrientationBinding
.
h
"
#
include
"
mozilla
/
HalScreenConfiguration
.
h
"
class
nsScreen
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
typedef
uint32_t
ScreenOrientationInternal
;
static
const
ScreenOrientationInternal
eScreenOrientation_None
=
0
;
static
const
ScreenOrientationInternal
eScreenOrientation_PortraitPrimary
=
1u
<
<
0
;
static
const
ScreenOrientationInternal
eScreenOrientation_PortraitSecondary
=
1u
<
<
1
;
static
const
ScreenOrientationInternal
eScreenOrientation_LandscapePrimary
=
1u
<
<
2
;
static
const
ScreenOrientationInternal
eScreenOrientation_LandscapeSecondary
=
1u
<
<
3
;
static
const
ScreenOrientationInternal
eScreenOrientation_Default
=
1u
<
<
4
;
class
ScreenOrientation
final
:
public
DOMEventTargetHelper
public
mozilla
:
:
hal
:
:
ScreenConfigurationObserver
{
friend
class
:
:
nsScreen
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ScreenOrientation
mozilla
:
:
DOMEventTargetHelper
)
NS_REALLY_FORWARD_NSIDOMEVENTTARGET
(
mozilla
:
:
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
change
)
ScreenOrientation
(
nsPIDOMWindowInner
*
aWindow
nsScreen
*
aScreen
)
;
already_AddRefed
<
Promise
>
Lock
(
OrientationLockType
aOrientation
ErrorResult
&
aRv
)
;
void
Unlock
(
ErrorResult
&
aRv
)
;
OrientationType
DeviceType
(
CallerType
aCallerType
)
const
;
uint16_t
DeviceAngle
(
)
const
;
OrientationType
GetType
(
ErrorResult
&
aRv
)
const
;
uint16_t
GetAngle
(
ErrorResult
&
aRv
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Notify
(
const
mozilla
:
:
hal
:
:
ScreenConfiguration
&
aConfiguration
)
override
;
static
void
UpdateActiveOrientationLock
(
ScreenOrientationInternal
aOrientation
)
;
private
:
virtual
~
ScreenOrientation
(
)
;
class
FullScreenEventListener
;
class
VisibleEventListener
;
class
LockOrientationTask
;
enum
LockPermission
{
LOCK_DENIED
FULLSCREEN_LOCK_ALLOWED
LOCK_ALLOWED
}
;
bool
LockDeviceOrientation
(
ScreenOrientationInternal
aOrientation
bool
aIsFullscreen
ErrorResult
&
aRv
)
;
void
UnlockDeviceOrientation
(
)
;
already_AddRefed
<
Promise
>
LockInternal
(
ScreenOrientationInternal
aOrientation
ErrorResult
&
aRv
)
;
void
DispatchChangeEvent
(
)
;
bool
ShouldResistFingerprinting
(
)
const
;
LockPermission
GetLockOrientationPermission
(
bool
aCheckSandbox
)
const
;
nsIDocument
*
GetResponsibleDocument
(
)
const
;
RefPtr
<
nsScreen
>
mScreen
;
RefPtr
<
FullScreenEventListener
>
mFullScreenListener
;
RefPtr
<
VisibleEventListener
>
mVisibleListener
;
OrientationType
mType
;
uint16_t
mAngle
;
}
;
}
}
#
endif
