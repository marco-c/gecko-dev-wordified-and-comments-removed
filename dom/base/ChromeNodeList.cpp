#
include
"
mozilla
/
dom
/
ChromeNodeList
.
h
"
#
include
<
new
>
#
include
<
utility
>
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ChromeNodeListBinding
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
ChromeNodeList
>
ChromeNodeList
:
:
Constructor
(
const
GlobalObject
&
aGlobal
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
Document
*
root
=
win
?
win
-
>
GetExtantDoc
(
)
:
nullptr
;
RefPtr
<
ChromeNodeList
>
list
=
new
ChromeNodeList
(
root
)
;
return
list
.
forget
(
)
;
}
JSObject
*
ChromeNodeList
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
ChromeNodeList_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ChromeNodeList
:
:
Append
(
nsINode
&
aNode
ErrorResult
&
aError
)
{
if
(
!
aNode
.
IsContent
(
)
)
{
aError
.
ThrowTypeError
(
"
The
node
passed
in
is
not
a
ChildNode
"
)
;
return
;
}
AppendElement
(
aNode
.
AsContent
(
)
)
;
}
void
ChromeNodeList
:
:
Remove
(
nsINode
&
aNode
ErrorResult
&
aError
)
{
if
(
!
aNode
.
IsContent
(
)
)
{
aError
.
ThrowTypeError
(
"
The
node
passed
in
is
not
a
ChildNode
"
)
;
return
;
}
RemoveElement
(
aNode
.
AsContent
(
)
)
;
}
