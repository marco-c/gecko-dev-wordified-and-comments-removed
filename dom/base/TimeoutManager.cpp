#
include
"
TimeoutManager
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
PerformanceCounter
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
ThrottledEventQueue
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsITimeoutHandler
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
TimeoutExecutor
.
h
"
#
include
"
TimeoutBudgetManager
.
h
"
#
include
"
mozilla
/
net
/
WebSocketEventService
.
h
"
#
include
"
mozilla
/
MediaManager
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
static
LazyLogModule
gLog
(
"
Timeout
"
)
;
static
int32_t
gRunningTimeoutDepth
=
0
;
#
define
DEFAULT_MIN_CLAMP_TIMEOUT_VALUE
4
/
/
4ms
#
define
DEFAULT_MIN_BACKGROUND_TIMEOUT_VALUE
1000
/
/
1000ms
#
define
DEFAULT_MIN_TRACKING_TIMEOUT_VALUE
4
/
/
4ms
#
define
DEFAULT_MIN_TRACKING_BACKGROUND_TIMEOUT_VALUE
1000
/
/
1000ms
static
int32_t
gMinClampTimeoutValue
=
0
;
static
int32_t
gMinBackgroundTimeoutValue
=
0
;
static
int32_t
gMinTrackingTimeoutValue
=
0
;
static
int32_t
gMinTrackingBackgroundTimeoutValue
=
0
;
static
int32_t
gTimeoutThrottlingDelay
=
0
;
static
bool
gAnnotateTrackingChannels
=
false
;
#
define
DEFAULT_BACKGROUND_BUDGET_REGENERATION_FACTOR
100
/
/
1ms
per
100ms
#
define
DEFAULT_FOREGROUND_BUDGET_REGENERATION_FACTOR
1
/
/
1ms
per
1ms
#
define
DEFAULT_BACKGROUND_THROTTLING_MAX_BUDGET
50
/
/
50ms
#
define
DEFAULT_FOREGROUND_THROTTLING_MAX_BUDGET
-
1
/
/
infinite
#
define
DEFAULT_BUDGET_THROTTLING_MAX_DELAY
15000
/
/
15s
#
define
DEFAULT_ENABLE_BUDGET_TIMEOUT_THROTTLING
false
static
int32_t
gBackgroundBudgetRegenerationFactor
=
0
;
static
int32_t
gForegroundBudgetRegenerationFactor
=
0
;
static
int32_t
gBackgroundThrottlingMaxBudget
=
0
;
static
int32_t
gForegroundThrottlingMaxBudget
=
0
;
static
int32_t
gBudgetThrottlingMaxDelay
=
0
;
static
bool
gEnableBudgetTimeoutThrottling
=
false
;
const
uint32_t
TimeoutManager
:
:
InvalidFiringId
=
0
;
namespace
{
double
GetRegenerationFactor
(
bool
aIsBackground
)
{
double
denominator
=
std
:
:
max
(
aIsBackground
?
gBackgroundBudgetRegenerationFactor
:
gForegroundBudgetRegenerationFactor
1
)
;
return
1
.
0
/
denominator
;
}
TimeDuration
GetMaxBudget
(
bool
aIsBackground
)
{
int32_t
maxBudget
=
aIsBackground
?
gBackgroundThrottlingMaxBudget
:
gForegroundThrottlingMaxBudget
;
return
maxBudget
>
0
?
TimeDuration
:
:
FromMilliseconds
(
maxBudget
)
:
TimeDuration
:
:
Forever
(
)
;
}
TimeDuration
GetMinBudget
(
bool
aIsBackground
)
{
return
TimeDuration
:
:
FromMilliseconds
(
-
gBudgetThrottlingMaxDelay
/
std
:
:
max
(
aIsBackground
?
gBackgroundBudgetRegenerationFactor
:
gForegroundBudgetRegenerationFactor
1
)
)
;
}
}
bool
TimeoutManager
:
:
IsBackground
(
)
const
{
return
!
IsActive
(
)
&
&
mWindow
.
IsBackgroundInternal
(
)
;
}
bool
TimeoutManager
:
:
IsActive
(
)
const
{
if
(
mWindow
.
IsChromeWindow
(
)
)
{
return
true
;
}
if
(
mWindow
.
AsInner
(
)
-
>
IsPlayingAudio
(
)
)
{
return
true
;
}
return
false
;
}
uint32_t
TimeoutManager
:
:
CreateFiringId
(
)
{
uint32_t
id
=
mNextFiringId
;
mNextFiringId
+
=
1
;
if
(
mNextFiringId
=
=
InvalidFiringId
)
{
mNextFiringId
+
=
1
;
}
mFiringIdStack
.
AppendElement
(
id
)
;
return
id
;
}
void
TimeoutManager
:
:
DestroyFiringId
(
uint32_t
aFiringId
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mFiringIdStack
.
IsEmpty
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mFiringIdStack
.
LastElement
(
)
=
=
aFiringId
)
;
mFiringIdStack
.
RemoveLastElement
(
)
;
}
bool
TimeoutManager
:
:
IsValidFiringId
(
uint32_t
aFiringId
)
const
{
return
!
IsInvalidFiringId
(
aFiringId
)
;
}
TimeDuration
TimeoutManager
:
:
MinSchedulingDelay
(
)
const
{
if
(
IsActive
(
)
)
{
return
TimeDuration
(
)
;
}
bool
isBackground
=
mWindow
.
IsBackgroundInternal
(
)
;
TimeDuration
unthrottled
=
isBackground
?
TimeDuration
:
:
FromMilliseconds
(
gMinBackgroundTimeoutValue
)
:
TimeDuration
(
)
;
if
(
BudgetThrottlingEnabled
(
isBackground
)
&
&
mExecutionBudget
<
TimeDuration
(
)
)
{
double
factor
=
1
.
0
/
GetRegenerationFactor
(
mWindow
.
IsBackgroundInternal
(
)
)
;
return
TimeDuration
:
:
Max
(
unthrottled
-
mExecutionBudget
.
MultDouble
(
factor
)
)
;
}
return
unthrottled
;
}
nsresult
TimeoutManager
:
:
MaybeSchedule
(
const
TimeStamp
&
aWhen
const
TimeStamp
&
aNow
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mExecutor
)
;
UpdateBudget
(
aNow
)
;
return
mExecutor
-
>
MaybeSchedule
(
aWhen
MinSchedulingDelay
(
)
)
;
}
bool
TimeoutManager
:
:
IsInvalidFiringId
(
uint32_t
aFiringId
)
const
{
if
(
aFiringId
=
=
InvalidFiringId
|
|
mFiringIdStack
.
IsEmpty
(
)
)
{
return
true
;
}
if
(
mFiringIdStack
.
Length
(
)
=
=
1
)
{
return
mFiringIdStack
[
0
]
!
=
aFiringId
;
}
uint32_t
low
=
mFiringIdStack
[
0
]
;
uint32_t
high
=
mFiringIdStack
.
LastElement
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
low
!
=
high
)
;
if
(
low
>
high
)
{
Swap
(
low
high
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
low
<
high
)
;
if
(
aFiringId
<
low
|
|
aFiringId
>
high
)
{
return
true
;
}
return
!
mFiringIdStack
.
Contains
(
aFiringId
)
;
}
#
define
DOM_CLAMP_TIMEOUT_NESTING_LEVEL
5u
TimeDuration
TimeoutManager
:
:
CalculateDelay
(
Timeout
*
aTimeout
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
aTimeout
)
;
TimeDuration
result
=
aTimeout
-
>
mInterval
;
if
(
aTimeout
-
>
mNestingLevel
>
=
DOM_CLAMP_TIMEOUT_NESTING_LEVEL
)
{
result
=
TimeDuration
:
:
Max
(
result
TimeDuration
:
:
FromMilliseconds
(
gMinClampTimeoutValue
)
)
;
}
return
result
;
}
PerformanceCounter
*
TimeoutManager
:
:
GetPerformanceCounter
(
)
{
if
(
!
StaticPrefs
:
:
dom_performance_enable_scheduler_timing
(
)
)
{
return
nullptr
;
}
nsIDocument
*
doc
=
mWindow
.
GetDocument
(
)
;
if
(
doc
)
{
dom
:
:
DocGroup
*
docGroup
=
doc
-
>
GetDocGroup
(
)
;
if
(
docGroup
)
{
return
docGroup
-
>
GetPerformanceCounter
(
)
;
}
}
return
nullptr
;
}
void
TimeoutManager
:
:
RecordExecution
(
Timeout
*
aRunningTimeout
Timeout
*
aTimeout
)
{
if
(
!
StaticPrefs
:
:
dom_performance_enable_scheduler_timing
(
)
&
&
mWindow
.
IsChromeWindow
(
)
)
{
return
;
}
TimeoutBudgetManager
&
budgetManager
=
TimeoutBudgetManager
:
:
Get
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
aRunningTimeout
)
{
TimeDuration
duration
=
budgetManager
.
RecordExecution
(
now
aRunningTimeout
)
;
UpdateBudget
(
now
duration
)
;
PerformanceCounter
*
counter
=
GetPerformanceCounter
(
)
;
if
(
counter
)
{
counter
-
>
IncrementExecutionDuration
(
duration
.
ToMicroseconds
(
)
)
;
}
}
if
(
aTimeout
)
{
budgetManager
.
StartRecording
(
now
)
;
PerformanceCounter
*
counter
=
GetPerformanceCounter
(
)
;
if
(
counter
)
{
counter
-
>
IncrementDispatchCounter
(
DispatchCategory
(
TaskCategory
:
:
Timer
)
)
;
}
}
else
{
budgetManager
.
StopRecording
(
)
;
}
}
void
TimeoutManager
:
:
UpdateBudget
(
const
TimeStamp
&
aNow
const
TimeDuration
&
aDuration
)
{
if
(
mWindow
.
IsChromeWindow
(
)
)
{
return
;
}
bool
isBackground
=
mWindow
.
IsBackgroundInternal
(
)
;
if
(
BudgetThrottlingEnabled
(
isBackground
)
)
{
double
factor
=
GetRegenerationFactor
(
isBackground
)
;
TimeDuration
regenerated
=
(
aNow
-
mLastBudgetUpdate
)
.
MultDouble
(
factor
)
;
mExecutionBudget
=
TimeDuration
:
:
Max
(
GetMinBudget
(
isBackground
)
TimeDuration
:
:
Min
(
GetMaxBudget
(
isBackground
)
mExecutionBudget
-
aDuration
+
regenerated
)
)
;
}
else
{
mExecutionBudget
=
GetMaxBudget
(
isBackground
)
;
}
mLastBudgetUpdate
=
aNow
;
}
#
define
DEFAULT_TIMEOUT_THROTTLING_DELAY
-
1
/
/
Only
positive
integers
cause
us
to
introduce
a
delay
for
#
define
DOM_MAX_TIMEOUT_VALUE
DELAY_INTERVAL_LIMIT
uint32_t
TimeoutManager
:
:
sNestingLevel
=
0
;
namespace
{
#
define
DEFAULT_MAX_CONSECUTIVE_CALLBACKS_MILLISECONDS
4
uint32_t
gMaxConsecutiveCallbacksMilliseconds
;
#
define
DEFAULT_DISABLE_OPEN_CLICK_DELAY
0
int32_t
gDisableOpenClickDelay
;
}
TimeoutManager
:
:
TimeoutManager
(
nsGlobalWindowInner
&
aWindow
)
:
mWindow
(
aWindow
)
mExecutor
(
new
TimeoutExecutor
(
this
)
)
mTimeouts
(
*
this
)
mTimeoutIdCounter
(
1
)
mNextFiringId
(
InvalidFiringId
+
1
)
mRunningTimeout
(
nullptr
)
mIdleCallbackTimeoutCounter
(
1
)
mLastBudgetUpdate
(
TimeStamp
:
:
Now
(
)
)
mExecutionBudget
(
GetMaxBudget
(
mWindow
.
IsBackgroundInternal
(
)
)
)
mThrottleTimeouts
(
false
)
mThrottleTrackingTimeouts
(
false
)
mBudgetThrottleTimeouts
(
false
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
TimeoutManager
%
p
created
tracking
bucketing
%
s
\
n
"
this
gAnnotateTrackingChannels
?
"
enabled
"
:
"
disabled
"
)
)
;
}
TimeoutManager
:
:
~
TimeoutManager
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mWindow
.
IsDying
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mThrottleTimeoutsTimer
)
;
mExecutor
-
>
Shutdown
(
)
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
TimeoutManager
%
p
destroyed
\
n
"
this
)
)
;
}
void
TimeoutManager
:
:
Initialize
(
)
{
Preferences
:
:
AddIntVarCache
(
&
gMinClampTimeoutValue
"
dom
.
min_timeout_value
"
DEFAULT_MIN_CLAMP_TIMEOUT_VALUE
)
;
Preferences
:
:
AddIntVarCache
(
&
gMinBackgroundTimeoutValue
"
dom
.
min_background_timeout_value
"
DEFAULT_MIN_BACKGROUND_TIMEOUT_VALUE
)
;
Preferences
:
:
AddIntVarCache
(
&
gMinTrackingTimeoutValue
"
dom
.
min_tracking_timeout_value
"
DEFAULT_MIN_TRACKING_TIMEOUT_VALUE
)
;
Preferences
:
:
AddIntVarCache
(
&
gMinTrackingBackgroundTimeoutValue
"
dom
.
min_tracking_background_timeout_value
"
DEFAULT_MIN_TRACKING_BACKGROUND_TIMEOUT_VALUE
)
;
Preferences
:
:
AddIntVarCache
(
&
gTimeoutThrottlingDelay
"
dom
.
timeout
.
throttling_delay
"
DEFAULT_TIMEOUT_THROTTLING_DELAY
)
;
Preferences
:
:
AddBoolVarCache
(
&
gAnnotateTrackingChannels
"
privacy
.
trackingprotection
.
annotate_channels
"
false
)
;
Preferences
:
:
AddUintVarCache
(
&
gMaxConsecutiveCallbacksMilliseconds
"
dom
.
timeout
.
max_consecutive_callbacks_ms
"
DEFAULT_MAX_CONSECUTIVE_CALLBACKS_MILLISECONDS
)
;
Preferences
:
:
AddIntVarCache
(
&
gDisableOpenClickDelay
"
dom
.
disable_open_click_delay
"
DEFAULT_DISABLE_OPEN_CLICK_DELAY
)
;
Preferences
:
:
AddIntVarCache
(
&
gBackgroundBudgetRegenerationFactor
"
dom
.
timeout
.
background_budget_regeneration_rate
"
DEFAULT_BACKGROUND_BUDGET_REGENERATION_FACTOR
)
;
Preferences
:
:
AddIntVarCache
(
&
gForegroundBudgetRegenerationFactor
"
dom
.
timeout
.
foreground_budget_regeneration_rate
"
DEFAULT_FOREGROUND_BUDGET_REGENERATION_FACTOR
)
;
Preferences
:
:
AddIntVarCache
(
&
gBackgroundThrottlingMaxBudget
"
dom
.
timeout
.
background_throttling_max_budget
"
DEFAULT_BACKGROUND_THROTTLING_MAX_BUDGET
)
;
Preferences
:
:
AddIntVarCache
(
&
gForegroundThrottlingMaxBudget
"
dom
.
timeout
.
foreground_throttling_max_budget
"
DEFAULT_FOREGROUND_THROTTLING_MAX_BUDGET
)
;
Preferences
:
:
AddIntVarCache
(
&
gBudgetThrottlingMaxDelay
"
dom
.
timeout
.
budget_throttling_max_delay
"
DEFAULT_BUDGET_THROTTLING_MAX_DELAY
)
;
Preferences
:
:
AddBoolVarCache
(
&
gEnableBudgetTimeoutThrottling
"
dom
.
timeout
.
enable_budget_timer_throttling
"
DEFAULT_ENABLE_BUDGET_TIMEOUT_THROTTLING
)
;
}
uint32_t
TimeoutManager
:
:
GetTimeoutId
(
Timeout
:
:
Reason
aReason
)
{
switch
(
aReason
)
{
case
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
:
return
+
+
mIdleCallbackTimeoutCounter
;
case
Timeout
:
:
Reason
:
:
eTimeoutOrInterval
:
default
:
return
+
+
mTimeoutIdCounter
;
}
}
bool
TimeoutManager
:
:
IsRunningTimeout
(
)
const
{
return
mRunningTimeout
;
}
nsresult
TimeoutManager
:
:
SetTimeout
(
nsITimeoutHandler
*
aHandler
int32_t
interval
bool
aIsInterval
Timeout
:
:
Reason
aReason
int32_t
*
aReturn
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
mWindow
.
GetExtantDoc
(
)
;
if
(
!
doc
)
{
return
NS_OK
;
}
interval
=
std
:
:
max
(
0
interval
)
;
uint32_t
maxTimeoutMs
=
PR_IntervalToMilliseconds
(
DOM_MAX_TIMEOUT_VALUE
)
;
if
(
static_cast
<
uint32_t
>
(
interval
)
>
maxTimeoutMs
)
{
interval
=
maxTimeoutMs
;
}
RefPtr
<
Timeout
>
timeout
=
new
Timeout
(
)
;
timeout
-
>
mWindow
=
&
mWindow
;
timeout
-
>
mIsInterval
=
aIsInterval
;
timeout
-
>
mInterval
=
TimeDuration
:
:
FromMilliseconds
(
interval
)
;
timeout
-
>
mScriptHandler
=
aHandler
;
timeout
-
>
mReason
=
aReason
;
timeout
-
>
mPopupState
=
openAbused
;
timeout
-
>
mNestingLevel
=
sNestingLevel
<
DOM_CLAMP_TIMEOUT_NESTING_LEVEL
?
sNestingLevel
+
1
:
sNestingLevel
;
TimeDuration
realInterval
=
CalculateDelay
(
timeout
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
timeout
-
>
SetWhenOrTimeRemaining
(
now
realInterval
)
;
if
(
!
mWindow
.
IsSuspended
(
)
)
{
nsresult
rv
=
MaybeSchedule
(
timeout
-
>
When
(
)
now
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
if
(
gRunningTimeoutDepth
=
=
0
&
&
nsContentUtils
:
:
GetPopupControlState
(
)
<
openBlocked
)
{
if
(
interval
<
=
gDisableOpenClickDelay
)
{
timeout
-
>
mPopupState
=
nsContentUtils
:
:
GetPopupControlState
(
)
;
}
}
Timeouts
:
:
SortBy
sort
(
mWindow
.
IsFrozen
(
)
?
Timeouts
:
:
SortBy
:
:
TimeRemaining
:
Timeouts
:
:
SortBy
:
:
TimeWhen
)
;
mTimeouts
.
Insert
(
timeout
sort
)
;
timeout
-
>
mTimeoutId
=
GetTimeoutId
(
aReason
)
;
*
aReturn
=
timeout
-
>
mTimeoutId
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Set
%
s
(
TimeoutManager
=
%
p
timeout
=
%
p
delay
=
%
i
"
"
minimum
=
%
f
throttling
=
%
s
state
=
%
s
(
%
s
)
realInterval
=
%
f
)
"
"
returned
timeout
ID
%
u
budget
=
%
d
\
n
"
aIsInterval
?
"
Interval
"
:
"
Timeout
"
this
timeout
.
get
(
)
interval
(
CalculateDelay
(
timeout
)
-
timeout
-
>
mInterval
)
.
ToMilliseconds
(
)
mThrottleTimeouts
?
"
yes
"
:
(
mThrottleTimeoutsTimer
?
"
pending
"
:
"
no
"
)
IsActive
(
)
?
"
active
"
:
"
inactive
"
mWindow
.
IsBackgroundInternal
(
)
?
"
background
"
:
"
foreground
"
realInterval
.
ToMilliseconds
(
)
timeout
-
>
mTimeoutId
int
(
mExecutionBudget
.
ToMilliseconds
(
)
)
)
)
;
return
NS_OK
;
}
void
TimeoutManager
:
:
ClearTimeout
(
int32_t
aTimerId
Timeout
:
:
Reason
aReason
)
{
uint32_t
timerId
=
(
uint32_t
)
aTimerId
;
bool
firstTimeout
=
true
;
bool
deferredDeletion
=
false
;
mTimeouts
.
ForEachAbortable
(
[
&
]
(
Timeout
*
aTimeout
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Clear
%
s
(
TimeoutManager
=
%
p
timeout
=
%
p
aTimerId
=
%
u
ID
=
%
u
)
\
n
"
aTimeout
-
>
mIsInterval
?
"
Interval
"
:
"
Timeout
"
this
aTimeout
timerId
aTimeout
-
>
mTimeoutId
)
)
;
if
(
aTimeout
-
>
mTimeoutId
=
=
timerId
&
&
aTimeout
-
>
mReason
=
=
aReason
)
{
if
(
aTimeout
-
>
mRunning
)
{
aTimeout
-
>
mIsInterval
=
false
;
deferredDeletion
=
true
;
}
else
{
aTimeout
-
>
remove
(
)
;
}
return
true
;
}
firstTimeout
=
false
;
return
false
;
}
)
;
if
(
!
firstTimeout
|
|
deferredDeletion
|
|
mWindow
.
IsSuspended
(
)
)
{
return
;
}
mExecutor
-
>
Cancel
(
)
;
Timeout
*
nextTimeout
=
mTimeouts
.
GetFirst
(
)
;
if
(
nextTimeout
)
{
MOZ_ALWAYS_SUCCEEDS
(
MaybeSchedule
(
nextTimeout
-
>
When
(
)
)
)
;
}
}
void
TimeoutManager
:
:
RunTimeout
(
const
TimeStamp
&
aNow
const
TimeStamp
&
aTargetDeadline
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
aNow
.
IsNull
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aTargetDeadline
.
IsNull
(
)
)
;
MOZ_ASSERT_IF
(
mWindow
.
IsFrozen
(
)
mWindow
.
IsSuspended
(
)
)
;
if
(
mWindow
.
IsSuspended
(
)
)
{
return
;
}
uint32_t
totalTimeLimitMS
=
std
:
:
max
(
1u
gMaxConsecutiveCallbacksMilliseconds
)
;
const
TimeDuration
totalTimeLimit
=
TimeDuration
:
:
Min
(
TimeDuration
:
:
FromMilliseconds
(
totalTimeLimitMS
)
TimeDuration
:
:
Max
(
TimeDuration
(
)
mExecutionBudget
)
)
;
const
TimeDuration
initialTimeLimit
=
TimeDuration
:
:
FromMilliseconds
(
totalTimeLimit
.
ToMilliseconds
(
)
/
4
)
;
const
uint32_t
kNumTimersPerInitialElapsedCheck
=
100
;
TimeStamp
now
(
aNow
)
;
TimeStamp
start
=
now
;
uint32_t
firingId
=
CreateFiringId
(
)
;
auto
guard
=
MakeScopeExit
(
[
&
]
{
DestroyFiringId
(
firingId
)
;
}
)
;
nsCOMPtr
<
nsIScriptGlobalObject
>
windowKungFuDeathGrip
(
&
mWindow
)
;
Unused
<
<
windowKungFuDeathGrip
;
TimeStamp
deadline
;
if
(
aTargetDeadline
>
now
)
{
deadline
=
aTargetDeadline
;
}
else
{
deadline
=
now
;
}
TimeStamp
nextDeadline
;
uint32_t
numTimersToRun
=
0
;
for
(
Timeout
*
timeout
=
mTimeouts
.
GetFirst
(
)
;
timeout
!
=
nullptr
;
timeout
=
timeout
-
>
getNext
(
)
)
{
if
(
totalTimeLimit
.
IsZero
(
)
|
|
timeout
-
>
When
(
)
>
deadline
)
{
nextDeadline
=
timeout
-
>
When
(
)
;
break
;
}
if
(
IsInvalidFiringId
(
timeout
-
>
mFiringId
)
)
{
timeout
-
>
mFiringId
=
firingId
;
numTimersToRun
+
=
1
;
if
(
numTimersToRun
%
kNumTimersPerInitialElapsedCheck
=
=
0
)
{
now
=
TimeStamp
:
:
Now
(
)
;
TimeDuration
elapsed
(
now
-
start
)
;
if
(
elapsed
>
=
initialTimeLimit
)
{
nextDeadline
=
timeout
-
>
When
(
)
;
break
;
}
}
}
}
now
=
TimeStamp
:
:
Now
(
)
;
if
(
!
nextDeadline
.
IsNull
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mWindow
.
IsSuspended
(
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
MaybeSchedule
(
nextDeadline
now
)
)
;
}
if
(
!
numTimersToRun
)
{
return
;
}
{
RefPtr
<
Timeout
>
next
;
for
(
RefPtr
<
Timeout
>
timeout
=
mTimeouts
.
GetFirst
(
)
;
timeout
!
=
nullptr
;
timeout
=
next
)
{
if
(
timeout
-
>
mFiringId
!
=
firingId
)
{
if
(
IsValidFiringId
(
timeout
-
>
mFiringId
)
)
{
continue
;
}
else
{
break
;
}
}
MOZ_ASSERT_IF
(
mWindow
.
IsFrozen
(
)
mWindow
.
IsSuspended
(
)
)
;
if
(
mWindow
.
IsSuspended
(
)
)
{
break
;
}
nsCOMPtr
<
nsIScriptContext
>
scx
=
mWindow
.
GetContextInternal
(
)
;
if
(
!
scx
)
{
timeout
-
>
remove
(
)
;
continue
;
}
bool
timeout_was_cleared
=
mWindow
.
RunTimeoutHandler
(
timeout
scx
)
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Run
%
s
(
TimeoutManager
=
%
p
timeout
=
%
p
)
returned
%
d
\
n
"
timeout
-
>
mIsInterval
?
"
Interval
"
:
"
Timeout
"
this
timeout
.
get
(
)
!
!
timeout_was_cleared
)
)
;
if
(
timeout_was_cleared
)
{
next
=
nullptr
;
MOZ_DIAGNOSTIC_ASSERT
(
!
HasTimeouts
(
)
)
;
return
;
}
TimeStamp
lastCallbackTime
=
now
;
now
=
TimeStamp
:
:
Now
(
)
;
bool
needsReinsertion
=
RescheduleTimeout
(
timeout
lastCallbackTime
now
)
;
next
=
timeout
-
>
getNext
(
)
;
timeout
-
>
remove
(
)
;
if
(
needsReinsertion
)
{
mTimeouts
.
Insert
(
timeout
mWindow
.
IsFrozen
(
)
?
Timeouts
:
:
SortBy
:
:
TimeRemaining
:
Timeouts
:
:
SortBy
:
:
TimeWhen
)
;
}
TimeDuration
elapsed
=
now
-
start
;
if
(
elapsed
>
=
totalTimeLimit
)
{
if
(
!
mWindow
.
IsSuspended
(
)
)
{
if
(
next
)
{
if
(
mExecutionBudget
<
TimeDuration
(
)
)
{
mExecutor
-
>
Cancel
(
)
;
}
MOZ_ALWAYS_SUCCEEDS
(
MaybeSchedule
(
next
-
>
When
(
)
now
)
)
;
}
}
break
;
}
}
}
}
bool
TimeoutManager
:
:
RescheduleTimeout
(
Timeout
*
aTimeout
const
TimeStamp
&
aLastCallbackTime
const
TimeStamp
&
aCurrentNow
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aLastCallbackTime
<
=
aCurrentNow
)
;
if
(
!
aTimeout
-
>
mIsInterval
)
{
return
false
;
}
if
(
aTimeout
-
>
mNestingLevel
<
DOM_CLAMP_TIMEOUT_NESTING_LEVEL
)
{
aTimeout
-
>
mNestingLevel
+
=
1
;
}
TimeDuration
nextInterval
=
CalculateDelay
(
aTimeout
)
;
TimeStamp
firingTime
=
aLastCallbackTime
+
nextInterval
;
TimeDuration
delay
=
firingTime
-
aCurrentNow
;
if
(
delay
<
TimeDuration
(
0
)
)
{
delay
=
TimeDuration
(
0
)
;
}
aTimeout
-
>
SetWhenOrTimeRemaining
(
aCurrentNow
delay
)
;
if
(
mWindow
.
IsSuspended
(
)
)
{
return
true
;
}
nsresult
rv
=
MaybeSchedule
(
aTimeout
-
>
When
(
)
aCurrentNow
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
return
true
;
}
void
TimeoutManager
:
:
ClearAllTimeouts
(
)
{
bool
seenRunningTimeout
=
false
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
ClearAllTimeouts
(
TimeoutManager
=
%
p
)
\
n
"
this
)
)
;
if
(
mThrottleTimeoutsTimer
)
{
mThrottleTimeoutsTimer
-
>
Cancel
(
)
;
mThrottleTimeoutsTimer
=
nullptr
;
}
mExecutor
-
>
Cancel
(
)
;
ForEachUnorderedTimeout
(
[
&
]
(
Timeout
*
aTimeout
)
{
if
(
mRunningTimeout
=
=
aTimeout
)
{
seenRunningTimeout
=
true
;
}
aTimeout
-
>
mCleared
=
true
;
}
)
;
mTimeouts
.
Clear
(
)
;
}
void
TimeoutManager
:
:
Timeouts
:
:
Insert
(
Timeout
*
aTimeout
SortBy
aSortBy
)
{
Timeout
*
prevSibling
;
for
(
prevSibling
=
GetLast
(
)
;
prevSibling
&
&
(
aSortBy
=
=
SortBy
:
:
TimeRemaining
?
prevSibling
-
>
TimeRemaining
(
)
>
aTimeout
-
>
TimeRemaining
(
)
:
prevSibling
-
>
When
(
)
>
aTimeout
-
>
When
(
)
)
&
&
mManager
.
IsInvalidFiringId
(
prevSibling
-
>
mFiringId
)
;
prevSibling
=
prevSibling
-
>
getPrevious
(
)
)
{
}
if
(
prevSibling
)
{
prevSibling
-
>
setNext
(
aTimeout
)
;
}
else
{
InsertFront
(
aTimeout
)
;
}
aTimeout
-
>
mFiringId
=
InvalidFiringId
;
}
Timeout
*
TimeoutManager
:
:
BeginRunningTimeout
(
Timeout
*
aTimeout
)
{
Timeout
*
currentTimeout
=
mRunningTimeout
;
mRunningTimeout
=
aTimeout
;
+
+
gRunningTimeoutDepth
;
RecordExecution
(
currentTimeout
aTimeout
)
;
return
currentTimeout
;
}
void
TimeoutManager
:
:
EndRunningTimeout
(
Timeout
*
aTimeout
)
{
-
-
gRunningTimeoutDepth
;
RecordExecution
(
mRunningTimeout
aTimeout
)
;
mRunningTimeout
=
aTimeout
;
}
void
TimeoutManager
:
:
UnmarkGrayTimers
(
)
{
ForEachUnorderedTimeout
(
[
]
(
Timeout
*
aTimeout
)
{
if
(
aTimeout
-
>
mScriptHandler
)
{
aTimeout
-
>
mScriptHandler
-
>
MarkForCC
(
)
;
}
}
)
;
}
void
TimeoutManager
:
:
Suspend
(
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Suspend
(
TimeoutManager
=
%
p
)
\
n
"
this
)
)
;
if
(
mThrottleTimeoutsTimer
)
{
mThrottleTimeoutsTimer
-
>
Cancel
(
)
;
mThrottleTimeoutsTimer
=
nullptr
;
}
mExecutor
-
>
Cancel
(
)
;
}
void
TimeoutManager
:
:
Resume
(
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Resume
(
TimeoutManager
=
%
p
)
\
n
"
this
)
)
;
if
(
mWindow
.
AsInner
(
)
-
>
IsDocumentLoaded
(
)
&
&
!
mThrottleTimeouts
)
{
MaybeStartThrottleTimeout
(
)
;
}
Timeout
*
nextTimeout
=
mTimeouts
.
GetFirst
(
)
;
if
(
nextTimeout
)
{
MOZ_ALWAYS_SUCCEEDS
(
MaybeSchedule
(
nextTimeout
-
>
When
(
)
)
)
;
}
}
void
TimeoutManager
:
:
Freeze
(
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Freeze
(
TimeoutManager
=
%
p
)
\
n
"
this
)
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
ForEachUnorderedTimeout
(
[
&
]
(
Timeout
*
aTimeout
)
{
TimeDuration
delta
(
0
)
;
if
(
aTimeout
-
>
When
(
)
>
now
)
{
delta
=
aTimeout
-
>
When
(
)
-
now
;
}
aTimeout
-
>
SetWhenOrTimeRemaining
(
now
delta
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aTimeout
-
>
TimeRemaining
(
)
=
=
delta
)
;
}
)
;
}
void
TimeoutManager
:
:
Thaw
(
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
Thaw
(
TimeoutManager
=
%
p
)
\
n
"
this
)
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
ForEachUnorderedTimeout
(
[
&
]
(
Timeout
*
aTimeout
)
{
aTimeout
-
>
SetWhenOrTimeRemaining
(
now
aTimeout
-
>
TimeRemaining
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aTimeout
-
>
When
(
)
.
IsNull
(
)
)
;
}
)
;
}
void
TimeoutManager
:
:
UpdateBackgroundState
(
)
{
mExecutionBudget
=
GetMaxBudget
(
mWindow
.
IsBackgroundInternal
(
)
)
;
if
(
!
mWindow
.
IsSuspended
(
)
)
{
Timeout
*
nextTimeout
=
mTimeouts
.
GetFirst
(
)
;
if
(
nextTimeout
)
{
mExecutor
-
>
Cancel
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
MaybeSchedule
(
nextTimeout
-
>
When
(
)
)
)
;
}
}
}
namespace
{
class
ThrottleTimeoutsCallback
final
:
public
nsITimerCallback
public
nsINamed
{
public
:
explicit
ThrottleTimeoutsCallback
(
nsGlobalWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
{
aName
.
AssignLiteral
(
"
ThrottleTimeoutsCallback
"
)
;
return
NS_OK
;
}
private
:
~
ThrottleTimeoutsCallback
(
)
{
}
private
:
RefPtr
<
nsGlobalWindowInner
>
mWindow
;
}
;
NS_IMPL_ISUPPORTS
(
ThrottleTimeoutsCallback
nsITimerCallback
nsINamed
)
NS_IMETHODIMP
ThrottleTimeoutsCallback
:
:
Notify
(
nsITimer
*
aTimer
)
{
mWindow
-
>
AsInner
(
)
-
>
TimeoutManager
(
)
.
StartThrottlingTimeouts
(
)
;
mWindow
=
nullptr
;
return
NS_OK
;
}
}
bool
TimeoutManager
:
:
BudgetThrottlingEnabled
(
bool
aIsBackground
)
const
{
if
(
(
aIsBackground
?
gBackgroundThrottlingMaxBudget
:
gForegroundThrottlingMaxBudget
)
<
0
)
{
return
false
;
}
if
(
!
mBudgetThrottleTimeouts
|
|
IsActive
(
)
)
{
return
false
;
}
if
(
mWindow
.
AsInner
(
)
-
>
HasActiveIndexedDBDatabases
(
)
)
{
return
false
;
}
if
(
mWindow
.
AsInner
(
)
-
>
HasActivePeerConnections
(
)
)
{
return
false
;
}
if
(
mWindow
.
AsInner
(
)
-
>
HasOpenWebSockets
(
)
)
{
return
false
;
}
return
true
;
}
void
TimeoutManager
:
:
StartThrottlingTimeouts
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mThrottleTimeoutsTimer
)
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
TimeoutManager
%
p
started
to
throttle
tracking
timeouts
\
n
"
this
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mThrottleTimeouts
)
;
mThrottleTimeouts
=
true
;
mThrottleTrackingTimeouts
=
true
;
mBudgetThrottleTimeouts
=
gEnableBudgetTimeoutThrottling
;
mThrottleTimeoutsTimer
=
nullptr
;
}
void
TimeoutManager
:
:
OnDocumentLoaded
(
)
{
if
(
!
mThrottleTimeouts
)
{
MaybeStartThrottleTimeout
(
)
;
}
}
void
TimeoutManager
:
:
MaybeStartThrottleTimeout
(
)
{
if
(
gTimeoutThrottlingDelay
<
=
0
|
|
mWindow
.
IsDying
(
)
|
|
mWindow
.
IsSuspended
(
)
)
{
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
mThrottleTimeouts
)
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
TimeoutManager
%
p
delaying
tracking
timeout
throttling
by
%
dms
\
n
"
this
gTimeoutThrottlingDelay
)
)
;
nsCOMPtr
<
nsITimerCallback
>
callback
=
new
ThrottleTimeoutsCallback
(
&
mWindow
)
;
NS_NewTimerWithCallback
(
getter_AddRefs
(
mThrottleTimeoutsTimer
)
callback
gTimeoutThrottlingDelay
nsITimer
:
:
TYPE_ONE_SHOT
EventTarget
(
)
)
;
}
void
TimeoutManager
:
:
BeginSyncOperation
(
)
{
RecordExecution
(
mRunningTimeout
nullptr
)
;
}
void
TimeoutManager
:
:
EndSyncOperation
(
)
{
RecordExecution
(
nullptr
mRunningTimeout
)
;
}
nsIEventTarget
*
TimeoutManager
:
:
EventTarget
(
)
{
return
mWindow
.
EventTargetFor
(
TaskCategory
:
:
Timer
)
;
}
