#
define
FORWARD_TO_INNER
(
method
args
err_rval
)
\
PR_BEGIN_MACRO
\
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
\
if
(
!
mInnerWindow
)
{
\
NS_WARNING
(
"
No
inner
window
available
!
"
)
;
\
return
err_rval
;
\
}
\
return
GetCurrentInnerWindowInternal
(
)
-
>
method
args
;
\
PR_END_MACRO
#
define
FORWARD_TO_INNER_VOID
(
method
args
)
\
PR_BEGIN_MACRO
\
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
\
if
(
!
mInnerWindow
)
{
\
NS_WARNING
(
"
No
inner
window
available
!
"
)
;
\
return
;
\
}
\
GetCurrentInnerWindowInternal
(
)
-
>
method
args
;
\
return
;
\
PR_END_MACRO
#
define
FORWARD_TO_INNER_CREATE
(
method
args
err_rval
)
\
PR_BEGIN_MACRO
\
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
\
if
(
!
mInnerWindow
)
{
\
if
(
mIsClosed
)
{
\
return
err_rval
;
\
}
\
nsCOMPtr
<
nsIDocument
>
kungFuDeathGrip
=
GetDoc
(
)
;
\
:
:
mozilla
:
:
Unused
<
<
kungFuDeathGrip
;
\
if
(
!
mInnerWindow
)
{
\
return
err_rval
;
\
}
\
}
\
return
GetCurrentInnerWindowInternal
(
)
-
>
method
args
;
\
PR_END_MACRO
nsGlobalWindowOuter
:
:
OuterWindowByIdTable
*
nsGlobalWindowOuter
:
:
sOuterWindowsById
=
nullptr
;
static
already_AddRefed
<
nsIVariant
>
CreateVoidVariant
(
)
{
RefPtr
<
nsVariantCC
>
writable
=
new
nsVariantCC
(
)
;
writable
-
>
SetAsVoid
(
)
;
return
writable
.
forget
(
)
;
}
nsresult
DialogValueHolder
:
:
Get
(
nsIPrincipal
*
aSubject
nsIVariant
*
*
aResult
)
{
nsCOMPtr
<
nsIVariant
>
result
;
if
(
aSubject
-
>
SubsumesConsideringDomain
(
mOrigin
)
)
{
result
=
mValue
;
}
else
{
result
=
CreateVoidVariant
(
)
;
}
result
.
forget
(
aResult
)
;
return
NS_OK
;
}
void
DialogValueHolder
:
:
Get
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aScope
nsIPrincipal
*
aSubject
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
mozilla
:
:
ErrorResult
&
aError
)
{
if
(
aSubject
-
>
Subsumes
(
mOrigin
)
)
{
aError
=
nsContentUtils
:
:
XPConnect
(
)
-
>
VariantToJS
(
aCx
aScope
mValue
aResult
)
;
}
else
{
aResult
.
setUndefined
(
)
;
}
}
void
nsGlobalWindowOuter
:
:
RemoveIdleCallback
(
mozilla
:
:
dom
:
:
IdleRequest
*
aRequest
)
{
AssertIsOnMainThread
(
)
;
if
(
aRequest
-
>
HasTimeout
(
)
)
{
mTimeoutManager
-
>
ClearTimeout
(
aRequest
-
>
GetTimeoutHandle
(
)
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
)
;
}
aRequest
-
>
removeFrom
(
mIdleRequestCallbacks
)
;
aRequest
-
>
Release
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
RunIdleRequest
(
IdleRequest
*
aRequest
DOMHighResTimeStamp
aDeadline
bool
aDidTimeout
)
{
AssertIsOnMainThread
(
)
;
RefPtr
<
IdleRequest
>
request
(
aRequest
)
;
RemoveIdleCallback
(
request
)
;
return
request
-
>
IdleRun
(
AsInner
(
)
aDeadline
aDidTimeout
)
;
}
bool
nsGlobalWindowOuter
:
:
IsBackgroundInternal
(
)
const
{
return
!
mOuterWindow
|
|
mOuterWindow
-
>
IsBackground
(
)
;
}
nsPIDOMWindowOuter
*
nsPIDOMWindowOuter
:
:
GetFromCurrentInner
(
nsPIDOMWindowInner
*
aInner
)
{
if
(
!
aInner
)
{
return
nullptr
;
}
nsPIDOMWindowOuter
*
outer
=
aInner
-
>
GetOuterWindow
(
)
;
if
(
!
outer
|
|
outer
-
>
GetCurrentInnerWindow
(
)
!
=
aInner
)
{
return
nullptr
;
}
return
outer
;
}
NS_IMPL_CYCLE_COLLECTION
(
DialogValueHolder
mValue
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DialogValueHolder
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DialogValueHolder
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DialogValueHolder
)
class
nsOuterWindowProxy
:
public
js
:
:
Wrapper
{
public
:
constexpr
nsOuterWindowProxy
(
)
:
js
:
:
Wrapper
(
0
)
{
}
bool
finalizeInBackground
(
const
JS
:
:
Value
&
priv
)
const
override
{
return
false
;
}
bool
getOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
bool
defineProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
override
;
bool
ownPropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
AutoIdVector
&
props
)
const
override
;
bool
delete_
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
const
override
;
bool
getPrototypeIfOrdinary
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
isOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
override
;
JSObject
*
enumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
override
;
bool
preventExtensions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
ObjectOpResult
&
result
)
const
override
;
bool
isExtensible
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
extensible
)
const
override
;
bool
has
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
bool
*
bp
)
const
override
;
bool
get
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
const
override
;
bool
set
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
ObjectOpResult
&
result
)
const
override
;
bool
getPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
bool
hasOwn
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
bool
*
bp
)
const
override
;
bool
getOwnEnumerablePropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
AutoIdVector
&
props
)
const
override
;
const
char
*
className
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
)
const
override
;
void
finalize
(
JSFreeOp
*
fop
JSObject
*
proxy
)
const
override
;
size_t
objectMoved
(
JSObject
*
proxy
JSObject
*
old
)
const
override
;
bool
isCallable
(
JSObject
*
obj
)
const
override
{
return
false
;
}
bool
isConstructor
(
JSObject
*
obj
)
const
override
{
return
false
;
}
static
const
nsOuterWindowProxy
singleton
;
protected
:
static
nsGlobalWindowOuter
*
GetOuterWindow
(
JSObject
*
proxy
)
{
nsGlobalWindowOuter
*
outerWindow
=
nsGlobalWindowOuter
:
:
FromSupports
(
static_cast
<
nsISupports
*
>
(
js
:
:
GetProxyReservedSlot
(
proxy
0
)
.
toPrivate
(
)
)
)
;
MOZ_ASSERT_IF
(
outerWindow
outerWindow
-
>
IsOuterWindow
(
)
)
;
return
outerWindow
;
}
bool
GetSubframeWindow
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
&
found
)
const
;
already_AddRefed
<
nsPIDOMWindowOuter
>
GetSubframeWindow
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
)
const
;
bool
AppendIndexedPropertyNames
(
JSContext
*
cx
JSObject
*
proxy
JS
:
:
AutoIdVector
&
props
)
const
;
}
;
const
js
:
:
Class
OuterWindowProxyClass
=
PROXY_CLASS_DEF
(
"
Proxy
"
JSCLASS_HAS_RESERVED_SLOTS
(
2
)
)
;
const
char
*
nsOuterWindowProxy
:
:
className
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
{
MOZ_ASSERT
(
js
:
:
IsProxy
(
proxy
)
)
;
return
"
Window
"
;
}
void
nsOuterWindowProxy
:
:
finalize
(
JSFreeOp
*
fop
JSObject
*
proxy
)
const
{
nsGlobalWindowOuter
*
outerWindow
=
GetOuterWindow
(
proxy
)
;
if
(
outerWindow
)
{
outerWindow
-
>
ClearWrapper
(
proxy
)
;
outerWindow
-
>
PoisonOuterWindowProxy
(
proxy
)
;
}
}
bool
nsOuterWindowProxy
:
:
getPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
{
desc
.
object
(
)
.
set
(
nullptr
)
;
if
(
!
getOwnPropertyDescriptor
(
cx
proxy
id
desc
)
)
{
return
false
;
}
if
(
desc
.
object
(
)
)
{
return
true
;
}
return
js
:
:
Wrapper
:
:
getPropertyDescriptor
(
cx
proxy
id
desc
)
;
}
bool
nsOuterWindowProxy
:
:
getOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
{
bool
found
;
if
(
!
GetSubframeWindow
(
cx
proxy
id
desc
.
value
(
)
found
)
)
{
return
false
;
}
if
(
found
)
{
FillPropertyDescriptor
(
desc
proxy
true
)
;
return
true
;
}
return
js
:
:
Wrapper
:
:
getOwnPropertyDescriptor
(
cx
proxy
id
desc
)
;
}
bool
nsOuterWindowProxy
:
:
defineProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
{
if
(
IsArrayIndex
(
GetArrayIndexFromId
(
cx
id
)
)
)
{
return
result
.
failCantDefineWindowElement
(
)
;
}
return
js
:
:
Wrapper
:
:
defineProperty
(
cx
proxy
id
desc
result
)
;
}
bool
nsOuterWindowProxy
:
:
ownPropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
AutoIdVector
&
props
)
const
{
if
(
!
AppendIndexedPropertyNames
(
cx
proxy
props
)
)
{
return
false
;
}
JS
:
:
AutoIdVector
innerProps
(
cx
)
;
if
(
!
js
:
:
Wrapper
:
:
ownPropertyKeys
(
cx
proxy
innerProps
)
)
{
return
false
;
}
return
js
:
:
AppendUnique
(
cx
props
innerProps
)
;
}
bool
nsOuterWindowProxy
:
:
delete_
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
const
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
frame
=
GetSubframeWindow
(
cx
proxy
id
)
)
{
return
result
.
failCantDeleteWindowElement
(
)
;
}
if
(
IsArrayIndex
(
GetArrayIndexFromId
(
cx
id
)
)
)
{
return
result
.
succeed
(
)
;
}
return
js
:
:
Wrapper
:
:
delete_
(
cx
proxy
id
result
)
;
}
bool
nsOuterWindowProxy
:
:
getPrototypeIfOrdinary
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
isOrdinary
JS
:
:
MutableHandle
<
JSObject
*
>
protop
)
const
{
*
isOrdinary
=
false
;
return
true
;
}
bool
nsOuterWindowProxy
:
:
preventExtensions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
ObjectOpResult
&
result
)
const
{
return
result
.
failCantPreventExtensions
(
)
;
}
bool
nsOuterWindowProxy
:
:
isExtensible
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
bool
*
extensible
)
const
{
*
extensible
=
true
;
return
true
;
}
bool
nsOuterWindowProxy
:
:
has
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
bool
*
bp
)
const
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
frame
=
GetSubframeWindow
(
cx
proxy
id
)
)
{
*
bp
=
true
;
return
true
;
}
return
js
:
:
Wrapper
:
:
has
(
cx
proxy
id
bp
)
;
}
bool
nsOuterWindowProxy
:
:
hasOwn
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
bool
*
bp
)
const
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
frame
=
GetSubframeWindow
(
cx
proxy
id
)
)
{
*
bp
=
true
;
return
true
;
}
return
js
:
:
Wrapper
:
:
hasOwn
(
cx
proxy
id
bp
)
;
}
bool
nsOuterWindowProxy
:
:
get
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
const
{
if
(
id
=
=
nsDOMClassInfo
:
:
sWrappedJSObject_id
&
&
xpc
:
:
AccessCheck
:
:
isChrome
(
js
:
:
GetContextCompartment
(
cx
)
)
)
{
vp
.
set
(
JS
:
:
ObjectValue
(
*
proxy
)
)
;
return
true
;
}
bool
found
;
if
(
!
GetSubframeWindow
(
cx
proxy
id
vp
found
)
)
{
return
false
;
}
if
(
found
)
{
return
true
;
}
return
js
:
:
Wrapper
:
:
get
(
cx
proxy
receiver
id
vp
)
;
}
bool
nsOuterWindowProxy
:
:
set
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
JS
:
:
Handle
<
JS
:
:
Value
>
receiver
JS
:
:
ObjectOpResult
&
result
)
const
{
if
(
IsArrayIndex
(
GetArrayIndexFromId
(
cx
id
)
)
)
{
return
result
.
failReadOnly
(
)
;
}
return
js
:
:
Wrapper
:
:
set
(
cx
proxy
id
v
receiver
result
)
;
}
bool
nsOuterWindowProxy
:
:
getOwnEnumerablePropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
AutoIdVector
&
props
)
const
{
if
(
!
AppendIndexedPropertyNames
(
cx
proxy
props
)
)
{
return
false
;
}
JS
:
:
AutoIdVector
innerProps
(
cx
)
;
if
(
!
js
:
:
Wrapper
:
:
getOwnEnumerablePropertyKeys
(
cx
proxy
innerProps
)
)
{
return
false
;
}
return
js
:
:
AppendUnique
(
cx
props
innerProps
)
;
}
JSObject
*
nsOuterWindowProxy
:
:
enumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
{
return
js
:
:
BaseProxyHandler
:
:
enumerate
(
cx
proxy
)
;
}
bool
nsOuterWindowProxy
:
:
GetSubframeWindow
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
bool
&
found
)
const
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
frame
=
GetSubframeWindow
(
cx
proxy
id
)
;
if
(
!
frame
)
{
found
=
false
;
return
true
;
}
found
=
true
;
nsGlobalWindowOuter
*
global
=
nsGlobalWindowOuter
:
:
Cast
(
frame
)
;
frame
-
>
EnsureInnerWindow
(
)
;
JSObject
*
obj
=
global
-
>
FastGetGlobalJSObject
(
)
;
if
(
MOZ_UNLIKELY
(
!
obj
)
)
{
return
xpc
:
:
Throw
(
cx
NS_ERROR_FAILURE
)
;
}
JS
:
:
ExposeObjectToActiveJS
(
obj
)
;
vp
.
setObject
(
*
obj
)
;
return
JS_WrapValue
(
cx
vp
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsOuterWindowProxy
:
:
GetSubframeWindow
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
JS
:
:
Handle
<
jsid
>
id
)
const
{
uint32_t
index
=
GetArrayIndexFromId
(
cx
id
)
;
if
(
!
IsArrayIndex
(
index
)
)
{
return
nullptr
;
}
nsGlobalWindowOuter
*
win
=
GetOuterWindow
(
proxy
)
;
MOZ_ASSERT
(
win
-
>
IsOuterWindow
(
)
)
;
return
win
-
>
IndexedGetterOuter
(
index
)
;
}
bool
nsOuterWindowProxy
:
:
AppendIndexedPropertyNames
(
JSContext
*
cx
JSObject
*
proxy
JS
:
:
AutoIdVector
&
props
)
const
{
uint32_t
length
=
GetOuterWindow
(
proxy
)
-
>
Length
(
)
;
MOZ_ASSERT
(
int32_t
(
length
)
>
=
0
)
;
if
(
!
props
.
reserve
(
props
.
length
(
)
+
length
)
)
{
return
false
;
}
for
(
int32_t
i
=
0
;
i
<
int32_t
(
length
)
;
+
+
i
)
{
if
(
!
props
.
append
(
INT_TO_JSID
(
i
)
)
)
{
return
false
;
}
}
return
true
;
}
size_t
nsOuterWindowProxy
:
:
objectMoved
(
JSObject
*
obj
JSObject
*
old
)
const
{
nsGlobalWindowOuter
*
outerWindow
=
GetOuterWindow
(
obj
)
;
if
(
outerWindow
)
{
outerWindow
-
>
UpdateWrapper
(
obj
old
)
;
}
return
0
;
}
const
nsOuterWindowProxy
nsOuterWindowProxy
:
:
singleton
;
class
nsChromeOuterWindowProxy
:
public
nsOuterWindowProxy
{
public
:
constexpr
nsChromeOuterWindowProxy
(
)
:
nsOuterWindowProxy
(
)
{
}
const
char
*
className
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
)
const
override
;
static
const
nsChromeOuterWindowProxy
singleton
;
}
;
const
char
*
nsChromeOuterWindowProxy
:
:
className
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proxy
)
const
{
MOZ_ASSERT
(
js
:
:
IsProxy
(
proxy
)
)
;
return
"
ChromeWindow
"
;
}
const
nsChromeOuterWindowProxy
nsChromeOuterWindowProxy
:
:
singleton
;
static
JSObject
*
NewOuterWindowProxy
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
global
bool
isChrome
)
{
JSAutoCompartment
ac
(
cx
global
)
;
MOZ_ASSERT
(
js
:
:
GetGlobalForObjectCrossCompartment
(
global
)
=
=
global
)
;
js
:
:
WrapperOptions
options
;
options
.
setClass
(
&
OuterWindowProxyClass
)
;
options
.
setSingleton
(
true
)
;
JSObject
*
obj
=
js
:
:
Wrapper
:
:
New
(
cx
global
isChrome
?
&
nsChromeOuterWindowProxy
:
:
singleton
:
&
nsOuterWindowProxy
:
:
singleton
options
)
;
MOZ_ASSERT_IF
(
obj
js
:
:
IsWindowProxy
(
obj
)
)
;
return
obj
;
}
nsGlobalWindowOuter
:
:
nsGlobalWindowOuter
(
)
:
nsPIDOMWindowOuter
(
)
mIdleFuzzFactor
(
0
)
mIdleCallbackIndex
(
-
1
)
mCurrentlyIdle
(
false
)
mAddActiveEventFuzzTime
(
true
)
mFullScreen
(
false
)
mFullscreenMode
(
false
)
mIsClosed
(
false
)
mInClose
(
false
)
mHavePendingClose
(
false
)
mHadOriginalOpener
(
false
)
mOriginalOpenerWasSecureContext
(
false
)
mIsPopupSpam
(
false
)
mBlockScriptedClosingFlag
(
false
)
mWasOffline
(
false
)
mHasHadSlowScript
(
false
)
mNotifyIdleObserversIdleOnThaw
(
false
)
mNotifyIdleObserversActiveOnThaw
(
false
)
mCreatingInnerWindow
(
false
)
mIsChrome
(
false
)
mCleanMessageManager
(
false
)
mNeedsFocus
(
true
)
mHasFocus
(
false
)
mShowFocusRingForContent
(
false
)
mFocusByKeyOccurred
(
false
)
mHasGamepad
(
false
)
mHasVREvents
(
false
)
mHasVRDisplayActivateEvents
(
false
)
mHasSeenGamepadInput
(
false
)
mNotifiedIDDestroyed
(
false
)
mAllowScriptsToClose
(
false
)
mTopLevelOuterContentWindow
(
false
)
mSuspendDepth
(
0
)
mFreezeDepth
(
0
)
mFocusMethod
(
0
)
mSerial
(
0
)
mIdleRequestCallbackCounter
(
1
)
mIdleRequestExecutor
(
nullptr
)
#
ifdef
DEBUG
mSetOpenerWindowCalled
(
false
)
#
endif
mCleanedUp
(
false
)
mDialogAbuseCount
(
0
)
mAreDialogsEnabled
(
true
)
#
ifdef
DEBUG
mIsValidatingTabGroup
(
false
)
#
endif
mCanSkipCCGeneration
(
0
)
mAutoActivateVRDisplayID
(
0
)
mBeforeUnloadListenerCount
(
0
)
{
AssertIsOnMainThread
(
)
;
nsLayoutStatics
:
:
AddRef
(
)
;
PR_INIT_CLIST
(
this
)
;
MOZ_ASSERT
(
IsFrozen
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
;
if
(
docShell
)
{
mTabChild
=
docShell
-
>
GetTabChild
(
)
;
}
}
gRefCnt
+
+
;
EnsurePrefCaches
(
)
;
if
(
gDumpFile
=
=
nullptr
)
{
nsAutoCString
fname
;
Preferences
:
:
GetCString
(
"
browser
.
dom
.
window
.
dump
.
file
"
fname
)
;
if
(
!
fname
.
IsEmpty
(
)
)
{
gDumpFile
=
fopen
(
fname
.
get
(
)
"
wb
+
"
)
;
}
else
{
gDumpFile
=
stdout
;
}
}
mSerial
=
+
+
gSerialCounter
;
#
ifdef
DEBUG
if
(
!
PR_GetEnv
(
"
MOZ_QUIET
"
)
)
{
printf_stderr
(
"
+
+
DOMWINDOW
=
=
%
d
(
%
p
)
[
pid
=
%
d
]
[
serial
=
%
d
]
[
outer
=
%
p
]
\
n
"
gRefCnt
static_cast
<
void
*
>
(
ToCanonicalSupports
(
this
)
)
getpid
(
)
gSerialCounter
nullptr
)
;
}
#
endif
MOZ_LOG
(
gDOMLeakPRLog
LogLevel
:
:
Debug
(
"
DOMWINDOW
%
p
created
outer
=
nullptr
"
this
)
)
;
MOZ_ASSERT
(
sOuterWindowsById
"
Outer
Windows
hash
table
must
be
created
!
"
)
;
MOZ_ASSERT
(
!
sOuterWindowsById
-
>
Get
(
mWindowID
)
"
This
window
shouldn
'
t
be
in
the
hash
table
yet
!
"
)
;
if
(
sOuterWindowsById
)
{
sOuterWindowsById
-
>
Put
(
mWindowID
this
)
;
}
}
#
ifdef
DEBUG
void
nsGlobalWindowOuter
:
:
AssertIsOnMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
#
endif
void
nsGlobalWindowOuter
:
:
Init
(
)
{
AssertIsOnMainThread
(
)
;
NS_ASSERTION
(
gDOMLeakPRLog
"
gDOMLeakPRLog
should
have
been
initialized
!
"
)
;
sOuterWindowsById
=
new
OuterWindowByIdTable
(
)
;
}
nsGlobalWindowOuter
:
:
~
nsGlobalWindowOuter
(
)
{
AssertIsOnMainThread
(
)
;
if
(
IsChromeWindow
(
)
)
{
MOZ_ASSERT
(
mCleanMessageManager
"
chrome
windows
may
always
disconnect
the
msg
manager
"
)
;
DisconnectAndClearGroupMessageManagers
(
)
;
if
(
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
}
mCleanMessageManager
=
false
;
}
if
(
sOuterWindowsById
)
{
MOZ_ASSERT
(
sOuterWindowsById
-
>
Get
(
mWindowID
)
"
This
window
should
be
in
the
hash
table
"
)
;
sOuterWindowsById
-
>
Remove
(
mWindowID
)
;
}
-
-
gRefCnt
;
#
ifdef
DEBUG
if
(
!
PR_GetEnv
(
"
MOZ_QUIET
"
)
)
{
nsAutoCString
url
;
if
(
mLastOpenedURI
)
{
url
=
mLastOpenedURI
-
>
GetSpecOrDefault
(
)
;
const
uint32_t
maxURLLength
=
1000
;
if
(
url
.
Length
(
)
>
maxURLLength
)
{
url
.
Truncate
(
maxURLLength
)
;
}
}
nsGlobalWindowOuter
*
outer
=
nsGlobalWindowOuter
:
:
Cast
(
mOuterWindow
)
;
printf_stderr
(
"
-
-
DOMWINDOW
=
=
%
d
(
%
p
)
[
pid
=
%
d
]
[
serial
=
%
d
]
[
outer
=
%
p
]
[
url
=
%
s
]
\
n
"
gRefCnt
static_cast
<
void
*
>
(
ToCanonicalSupports
(
this
)
)
getpid
(
)
mSerial
static_cast
<
void
*
>
(
ToCanonicalSupports
(
outer
)
)
url
.
get
(
)
)
;
}
#
endif
MOZ_LOG
(
gDOMLeakPRLog
LogLevel
:
:
Debug
(
"
DOMWINDOW
%
p
destroyed
"
this
)
)
;
JSObject
*
proxy
=
GetWrapperMaybeDead
(
)
;
if
(
proxy
)
{
js
:
:
SetProxyReservedSlot
(
proxy
0
js
:
:
PrivateValue
(
nullptr
)
)
;
}
PRCList
*
w
;
while
(
(
w
=
PR_LIST_HEAD
(
this
)
)
!
=
this
)
{
PR_REMOVE_AND_INIT_LINK
(
w
)
;
}
DropOuterWindowDocs
(
)
;
if
(
mTabGroup
)
{
mTabGroup
-
>
Leave
(
this
)
;
}
MOZ_ASSERT
(
mCleanedUp
)
;
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
ac
-
>
RemoveWindowAsListener
(
this
)
;
nsLayoutStatics
:
:
Release
(
)
;
}
void
nsGlobalWindowOuter
:
:
ShutDown
(
)
{
AssertIsOnMainThread
(
)
;
if
(
gDumpFile
&
&
gDumpFile
!
=
stdout
)
{
fclose
(
gDumpFile
)
;
}
gDumpFile
=
nullptr
;
delete
sOuterWindowsById
;
sOuterWindowsById
=
nullptr
;
}
void
nsGlobalWindowOuter
:
:
CleanupCachedXBLHandlers
(
)
{
if
(
mCachedXBLPrototypeHandlers
&
&
mCachedXBLPrototypeHandlers
-
>
Count
(
)
>
0
)
{
mCachedXBLPrototypeHandlers
-
>
Clear
(
)
;
}
}
void
nsGlobalWindowOuter
:
:
MaybeForgiveSpamCount
(
)
{
if
(
IsPopupSpamWindow
(
)
)
{
SetIsPopupSpamWindow
(
false
)
;
}
}
void
nsGlobalWindowOuter
:
:
SetIsPopupSpamWindow
(
bool
aIsPopupSpam
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
mIsPopupSpam
=
aIsPopupSpam
;
if
(
aIsPopupSpam
)
{
+
+
gOpenPopupSpamCount
;
}
else
{
-
-
gOpenPopupSpamCount
;
NS_ASSERTION
(
gOpenPopupSpamCount
>
=
0
"
Unbalanced
decrement
of
gOpenPopupSpamCount
"
)
;
}
}
void
nsGlobalWindowOuter
:
:
DropOuterWindowDocs
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT_IF
(
mDoc
!
mDoc
-
>
EventHandlingSuppressed
(
)
)
;
mDoc
=
nullptr
;
mSuspendedDoc
=
nullptr
;
}
void
nsGlobalWindowOuter
:
:
CleanUp
(
)
{
if
(
mCleanedUp
)
return
;
mCleanedUp
=
true
;
StartDying
(
)
;
MOZ_RELEASE_ASSERT
(
!
mObserver
"
mObserver
should
only
be
set
on
the
inner
window
"
)
;
if
(
mNavigator
)
{
mNavigator
-
>
Invalidate
(
)
;
mNavigator
=
nullptr
;
}
mScreen
=
nullptr
;
mMenubar
=
nullptr
;
mToolbar
=
nullptr
;
mLocationbar
=
nullptr
;
mPersonalbar
=
nullptr
;
mStatusbar
=
nullptr
;
mScrollbars
=
nullptr
;
mHistory
=
nullptr
;
mCustomElements
=
nullptr
;
mFrames
=
nullptr
;
mWindowUtils
=
nullptr
;
mApplicationCache
=
nullptr
;
mIndexedDB
=
nullptr
;
mConsole
=
nullptr
;
mAudioWorklet
=
nullptr
;
mPaintWorklet
=
nullptr
;
mExternal
=
nullptr
;
mMozSelfSupport
=
nullptr
;
mPerformance
=
nullptr
;
#
ifdef
MOZ_WEBSPEECH
mSpeechSynthesis
=
nullptr
;
#
endif
#
if
defined
(
MOZ_WIDGET_ANDROID
)
mOrientationChangeObserver
=
nullptr
;
#
endif
ClearControllers
(
)
;
mOpener
=
nullptr
;
if
(
mContext
)
{
mContext
=
nullptr
;
}
mChromeEventHandler
=
nullptr
;
mParentTarget
=
nullptr
;
nsGlobalWindowInner
*
inner
=
GetCurrentInnerWindowInternal
(
)
;
if
(
inner
)
{
inner
-
>
CleanUp
(
)
;
}
MOZ_ASSERT
(
!
mHasGamepad
)
;
MOZ_ASSERT
(
!
mHasVREvents
)
;
MOZ_ASSERT
(
!
mHasVRDisplayActivateEvents
)
;
if
(
mCleanMessageManager
)
{
MOZ_ASSERT
(
mIsChrome
"
only
chrome
should
have
msg
manager
cleaned
"
)
;
if
(
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
}
}
mArguments
=
nullptr
;
CleanupCachedXBLHandlers
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
mAudioContexts
[
i
]
-
>
Shutdown
(
)
;
}
mAudioContexts
.
Clear
(
)
;
if
(
mIdleTimer
)
{
mIdleTimer
-
>
Cancel
(
)
;
mIdleTimer
=
nullptr
;
}
mServiceWorkerRegistrationTable
.
Clear
(
)
;
mIntlUtils
=
nullptr
;
}
void
nsGlobalWindowOuter
:
:
ClearControllers
(
)
{
if
(
mControllers
)
{
uint32_t
count
;
mControllers
-
>
GetControllerCount
(
&
count
)
;
while
(
count
-
-
)
{
nsCOMPtr
<
nsIController
>
controller
;
mControllers
-
>
GetControllerAt
(
count
getter_AddRefs
(
controller
)
)
;
nsCOMPtr
<
nsIControllerContext
>
context
=
do_QueryInterface
(
controller
)
;
if
(
context
)
context
-
>
SetCommandContext
(
nullptr
)
;
}
mControllers
=
nullptr
;
}
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsGlobalWindowOuter
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIDOMEventTarget
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMWindow
)
NS_INTERFACE_MAP_ENTRY
(
nsIGlobalObject
)
NS_INTERFACE_MAP_ENTRY
(
nsIScriptGlobalObject
)
NS_INTERFACE_MAP_ENTRY
(
nsIScriptObjectPrincipal
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMEventTarget
)
NS_INTERFACE_MAP_ENTRY
(
mozilla
:
:
dom
:
:
EventTarget
)
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsPIDOMWindowOuter
)
)
)
{
foundInterface
=
static_cast
<
nsPIDOMWindowOuter
*
>
(
this
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
mozIDOMWindowProxy
)
)
&
&
IsOuterWindow
(
)
)
{
foundInterface
=
static_cast
<
mozIDOMWindowProxy
*
>
(
this
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIDOMChromeWindow
)
)
&
&
IsChromeWindow
(
)
)
{
foundInterface
=
static_cast
<
nsIDOMChromeWindow
*
>
(
this
)
;
}
else
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY
(
nsIInterfaceRequestor
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsGlobalWindowOuter
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsGlobalWindowOuter
)
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
nsGlobalWindowOuter
)
if
(
tmp
-
>
IsBlackForCC
(
false
)
)
{
if
(
nsCCUncollectableMarker
:
:
InGeneration
(
tmp
-
>
mCanSkipCCGeneration
)
)
{
return
true
;
}
tmp
-
>
mCanSkipCCGeneration
=
nsCCUncollectableMarker
:
:
sGeneration
;
if
(
tmp
-
>
mCachedXBLPrototypeHandlers
)
{
for
(
auto
iter
=
tmp
-
>
mCachedXBLPrototypeHandlers
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Data
(
)
.
exposeToActiveJS
(
)
;
}
}
if
(
EventListenerManager
*
elm
=
tmp
-
>
GetExistingListenerManager
(
)
)
{
elm
-
>
MarkForCC
(
)
;
}
if
(
tmp
-
>
mTimeoutManager
)
{
tmp
-
>
mTimeoutManager
-
>
UnmarkGrayTimers
(
)
;
}
return
true
;
}
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
nsGlobalWindowOuter
)
return
tmp
-
>
IsBlackForCC
(
true
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
nsGlobalWindowOuter
)
return
tmp
-
>
IsBlackForCC
(
false
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
nsGlobalWindowOuter
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INTERNAL
(
nsGlobalWindowOuter
)
if
(
MOZ_UNLIKELY
(
cb
.
WantDebugInfo
(
)
)
)
{
char
name
[
512
]
;
nsAutoCString
uri
;
if
(
tmp
-
>
mDoc
&
&
tmp
-
>
mDoc
-
>
GetDocumentURI
(
)
)
{
uri
=
tmp
-
>
mDoc
-
>
GetDocumentURI
(
)
-
>
GetSpecOrDefault
(
)
;
}
SprintfLiteral
(
name
"
nsGlobalWindowOuter
#
%
"
PRIu64
"
%
s
%
s
"
tmp
-
>
mWindowID
tmp
-
>
IsInnerWindow
(
)
?
"
inner
"
:
"
outer
"
uri
.
get
(
)
)
;
cb
.
DescribeRefCountedNode
(
tmp
-
>
mRefCnt
.
get
(
)
name
)
;
}
else
{
NS_IMPL_CYCLE_COLLECTION_DESCRIBE
(
nsGlobalWindowOuter
tmp
-
>
mRefCnt
.
get
(
)
)
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mContext
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mControllers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mArguments
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mReturnValue
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mNavigator
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mServiceWorkerRegistrationTable
)
#
ifdef
MOZ_WEBSPEECH
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSpeechSynthesis
)
#
endif
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mOuterWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTopInnerWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mListenerManager
)
if
(
tmp
-
>
mTimeoutManager
)
{
tmp
-
>
mTimeoutManager
-
>
ForEachUnorderedTimeout
(
[
&
cb
]
(
Timeout
*
timeout
)
{
cb
.
NoteNativeChild
(
timeout
NS_CYCLE_COLLECTION_PARTICIPANT
(
Timeout
)
)
;
}
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocation
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mHistory
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCustomElements
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocalStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSessionStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mApplicationCache
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSuspendedDoc
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIndexedDB
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocumentPrincipal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTabChild
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDoc
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleService
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWakeLock
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleRequestExecutor
)
for
(
IdleRequest
*
request
:
tmp
-
>
mIdleRequestCallbacks
)
{
cb
.
NoteNativeChild
(
request
NS_CYCLE_COLLECTION_PARTICIPANT
(
IdleRequest
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleObservers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mGamepads
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCacheStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mVRDisplays
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeEventHandler
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mParentTarget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFrameElement
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFocusedNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMenubar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mToolbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocationbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPersonalbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mStatusbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mScrollbars
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCrypto
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mU2F
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mConsole
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mAudioWorklet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPaintWorklet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mExternal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMozSelfSupport
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIntlUtils
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocShell
)
tmp
-
>
TraverseHostObjectURIs
(
cb
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mBrowserDOMWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mMessageManager
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mGroupMessageManagers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mOpenerForInitialContentBrowser
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
nsGlobalWindowOuter
)
tmp
-
>
CleanupCachedXBLHandlers
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mContext
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mControllers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mArguments
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mReturnValue
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mNavigator
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mServiceWorkerRegistrationTable
)
#
ifdef
MOZ_WEBSPEECH
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSpeechSynthesis
)
#
endif
if
(
tmp
-
>
mListenerManager
)
{
tmp
-
>
mListenerManager
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mListenerManager
)
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTopInnerWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocation
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mHistory
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCustomElements
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocalStorage
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSessionStorage
)
if
(
tmp
-
>
mApplicationCache
)
{
static_cast
<
nsDOMOfflineResourceList
*
>
(
tmp
-
>
mApplicationCache
.
get
(
)
)
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mApplicationCache
)
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSuspendedDoc
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIndexedDB
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocumentPrincipal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTabChild
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDoc
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleService
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWakeLock
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleObservers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mGamepads
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCacheStorage
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mVRDisplays
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeEventHandler
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mParentTarget
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mFrameElement
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mFocusedNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mMenubar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mToolbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocationbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPersonalbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mStatusbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mScrollbars
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCrypto
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mU2F
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mConsole
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mAudioWorklet
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPaintWorklet
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mExternal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mMozSelfSupport
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIntlUtils
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocShell
)
tmp
-
>
UnlinkHostObjectURIs
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleRequestExecutor
)
if
(
tmp
-
>
IsChromeWindow
(
)
)
{
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mBrowserDOMWindow
)
if
(
tmp
-
>
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
tmp
-
>
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mMessageManager
)
}
tmp
-
>
DisconnectAndClearGroupMessageManagers
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mGroupMessageManagers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mOpenerForInitialContentBrowser
)
}
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
#
ifdef
DEBUG
void
nsGlobalWindowOuter
:
:
RiskyUnlink
(
)
{
NS_CYCLE_COLLECTION_INNERNAME
.
Unlink
(
this
)
;
}
#
endif
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
nsGlobalWindowOuter
)
if
(
tmp
-
>
mCachedXBLPrototypeHandlers
)
{
for
(
auto
iter
=
tmp
-
>
mCachedXBLPrototypeHandlers
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
Data
(
)
"
Cached
XBL
prototype
handler
"
aClosure
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
bool
nsGlobalWindowOuter
:
:
IsBlackForCC
(
bool
aTracingNeeded
)
{
if
(
!
nsCCUncollectableMarker
:
:
sGeneration
)
{
return
false
;
}
return
(
nsCCUncollectableMarker
:
:
InGeneration
(
GetMarkedCCGeneration
(
)
)
|
|
HasKnownLiveWrapper
(
)
)
&
&
(
!
aTracingNeeded
|
|
HasNothingToTrace
(
static_cast
<
nsIDOMEventTarget
*
>
(
this
)
)
)
;
}
nsresult
nsGlobalWindowOuter
:
:
EnsureScriptEnvironment
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
NS_WARNING
(
"
No
outer
window
available
!
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
outer
-
>
GetWrapperPreserveColor
(
)
)
{
return
NS_OK
;
}
NS_ASSERTION
(
!
outer
-
>
GetCurrentInnerWindowInternal
(
)
"
No
cached
wrapper
but
we
have
an
inner
window
?
"
)
;
nsCOMPtr
<
nsIScriptContext
>
context
=
new
nsJSContext
(
!
IsFrame
(
)
outer
)
;
NS_ASSERTION
(
!
outer
-
>
mContext
"
Will
overwrite
mContext
!
"
)
;
context
-
>
WillInitializeContext
(
)
;
nsresult
rv
=
context
-
>
InitContext
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
outer
-
>
mContext
=
context
;
return
NS_OK
;
}
nsIScriptContext
*
nsGlobalWindowOuter
:
:
GetScriptContext
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
return
nullptr
;
}
return
outer
-
>
mContext
;
}
JSObject
*
nsGlobalWindowOuter
:
:
GetGlobalJSObject
(
)
{
return
FastGetGlobalJSObject
(
)
;
}
void
nsGlobalWindowOuter
:
:
TraceGlobalJSObject
(
JSTracer
*
aTrc
)
{
TraceWrapper
(
aTrc
"
active
window
global
"
)
;
}
bool
nsGlobalWindowOuter
:
:
WouldReuseInnerWindow
(
nsIDocument
*
aNewDocument
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDoc
|
|
!
aNewDocument
)
{
return
false
;
}
if
(
!
mDoc
-
>
IsInitialDocument
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
{
nsCOMPtr
<
nsIURI
>
uri
;
mDoc
-
>
GetDocumentURI
(
)
-
>
CloneIgnoringRef
(
getter_AddRefs
(
uri
)
)
;
NS_ASSERTION
(
NS_IsAboutBlank
(
uri
)
"
How
'
d
this
happen
?
"
)
;
}
#
endif
if
(
mDoc
=
=
aNewDocument
)
{
return
true
;
}
bool
equal
;
if
(
NS_SUCCEEDED
(
mDoc
-
>
NodePrincipal
(
)
-
>
Equals
(
aNewDocument
-
>
NodePrincipal
(
)
&
equal
)
)
&
&
equal
)
{
return
true
;
}
return
false
;
}
void
nsGlobalWindowOuter
:
:
SetInitialPrincipalToSubject
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
newWindowPrincipal
=
nsContentUtils
:
:
SubjectPrincipalOrSystemIfNativeCaller
(
)
;
if
(
nsContentUtils
:
:
IsExpandedPrincipal
(
newWindowPrincipal
)
|
|
(
nsContentUtils
:
:
IsSystemPrincipal
(
newWindowPrincipal
)
&
&
GetDocShell
(
)
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
)
{
newWindowPrincipal
=
nullptr
;
}
if
(
mDoc
)
{
if
(
!
mDoc
-
>
IsInitialDocument
(
)
)
return
;
if
(
mDoc
-
>
NodePrincipal
(
)
=
=
newWindowPrincipal
)
return
;
#
ifdef
DEBUG
bool
isNullPrincipal
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
mDoc
-
>
NodePrincipal
(
)
-
>
GetIsNullPrincipal
(
&
isNullPrincipal
)
)
&
&
isNullPrincipal
)
;
#
endif
}
GetDocShell
(
)
-
>
CreateAboutBlankContentViewer
(
newWindowPrincipal
)
;
if
(
mDoc
)
{
mDoc
-
>
SetIsInitialDocument
(
true
)
;
}
nsCOMPtr
<
nsIPresShell
>
shell
=
GetDocShell
(
)
-
>
GetPresShell
(
)
;
if
(
shell
&
&
!
shell
-
>
DidInitialize
(
)
)
{
nsRect
r
=
shell
-
>
GetPresContext
(
)
-
>
GetVisibleArea
(
)
;
shell
-
>
Initialize
(
r
.
Width
(
)
r
.
Height
(
)
)
;
}
}
PopupControlState
nsGlobalWindowOuter
:
:
PushPopupControlState
(
PopupControlState
aState
bool
aForce
)
const
{
return
:
:
PushPopupControlState
(
aState
aForce
)
;
}
void
nsGlobalWindowOuter
:
:
PopPopupControlState
(
PopupControlState
aState
)
const
{
:
:
PopPopupControlState
(
aState
)
;
}
PopupControlState
nsGlobalWindowOuter
:
:
GetPopupControlState
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
gPopupControlState
;
}
#
define
WINDOWSTATEHOLDER_IID
\
{
0x0b917c3e
0xbd50
0x4683
{
0xaf
0xc9
0xc7
0x81
0x07
0xae
0x33
0x26
}
}
class
WindowStateHolder
final
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
WINDOWSTATEHOLDER_IID
)
NS_DECL_ISUPPORTS
explicit
WindowStateHolder
(
nsGlobalWindowInner
*
aWindow
)
;
nsGlobalWindowInner
*
GetInnerWindow
(
)
{
return
mInnerWindow
;
}
void
DidRestoreWindow
(
)
{
mInnerWindow
=
nullptr
;
mInnerWindowReflector
=
nullptr
;
}
protected
:
~
WindowStateHolder
(
)
;
nsGlobalWindowInner
*
mInnerWindow
;
JS
:
:
PersistentRooted
<
JSObject
*
>
mInnerWindowReflector
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
WindowStateHolder
WINDOWSTATEHOLDER_IID
)
WindowStateHolder
:
:
WindowStateHolder
(
nsGlobalWindowInner
*
aWindow
)
:
mInnerWindow
(
aWindow
)
mInnerWindowReflector
(
RootingCx
(
)
aWindow
-
>
GetWrapper
(
)
)
{
NS_PRECONDITION
(
aWindow
"
null
window
"
)
;
NS_PRECONDITION
(
aWindow
-
>
IsInnerWindow
(
)
"
Saving
an
outer
window
"
)
;
aWindow
-
>
Suspend
(
)
;
xpc
:
:
Scriptability
:
:
Get
(
mInnerWindowReflector
)
.
SetDocShellAllowsScript
(
false
)
;
}
WindowStateHolder
:
:
~
WindowStateHolder
(
)
{
if
(
mInnerWindow
)
{
mInnerWindow
-
>
FreeInnerObjects
(
)
;
}
}
NS_IMPL_ISUPPORTS
(
WindowStateHolder
WindowStateHolder
)
bool
nsGlobalWindowOuter
:
:
ComputeIsSecureContext
(
nsIDocument
*
aDocument
SecureContextFlags
aFlags
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
aDocument
-
>
NodePrincipal
(
)
;
if
(
nsContentUtils
:
:
IsSystemPrincipal
(
principal
)
)
{
return
true
;
}
bool
hadNonSecureContextCreator
=
false
;
nsPIDOMWindowOuter
*
parentOuterWin
=
GetScriptableParent
(
)
;
MOZ_ASSERT
(
parentOuterWin
"
How
can
we
get
here
?
No
docShell
somehow
?
"
)
;
if
(
nsGlobalWindowOuter
:
:
Cast
(
parentOuterWin
)
!
=
this
)
{
nsIDocument
*
creatorDoc
=
aDocument
-
>
GetParentDocument
(
)
;
if
(
!
creatorDoc
)
{
return
false
;
}
nsGlobalWindowInner
*
parentWin
=
nsGlobalWindowInner
:
:
Cast
(
creatorDoc
-
>
GetInnerWindow
(
)
)
;
if
(
!
parentWin
)
{
return
false
;
}
MOZ_ASSERT
(
parentWin
=
=
nsGlobalWindowInner
:
:
Cast
(
parentOuterWin
-
>
GetCurrentInnerWindow
(
)
)
"
Creator
window
mismatch
while
setting
Secure
Context
state
"
)
;
if
(
aFlags
!
=
SecureContextFlags
:
:
eIgnoreOpener
)
{
hadNonSecureContextCreator
=
!
parentWin
-
>
IsSecureContext
(
)
;
}
else
{
hadNonSecureContextCreator
=
!
parentWin
-
>
IsSecureContextIfOpenerIgnored
(
)
;
}
}
else
if
(
mHadOriginalOpener
)
{
if
(
aFlags
!
=
SecureContextFlags
:
:
eIgnoreOpener
)
{
hadNonSecureContextCreator
=
!
mOriginalOpenerWasSecureContext
;
}
}
if
(
hadNonSecureContextCreator
)
{
return
false
;
}
if
(
nsContentUtils
:
:
HttpsStateIsModern
(
aDocument
)
)
{
return
true
;
}
if
(
principal
-
>
GetIsNullPrincipal
(
)
)
{
nsCOMPtr
<
nsIURI
>
uri
=
aDocument
-
>
GetOriginalURI
(
)
;
const
OriginAttributes
&
attrs
=
principal
-
>
OriginAttributesRef
(
)
;
principal
=
BasePrincipal
:
:
CreateCodebasePrincipal
(
uri
attrs
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
false
;
}
}
nsCOMPtr
<
nsIContentSecurityManager
>
csm
=
do_GetService
(
NS_CONTENTSECURITYMANAGER_CONTRACTID
)
;
NS_WARNING_ASSERTION
(
csm
"
csm
is
null
"
)
;
if
(
csm
)
{
bool
isTrustworthyOrigin
=
false
;
csm
-
>
IsOriginPotentiallyTrustworthy
(
principal
&
isTrustworthyOrigin
)
;
if
(
isTrustworthyOrigin
)
{
return
true
;
}
}
return
false
;
}
nsresult
nsGlobalWindowOuter
:
:
SetNewDocument
(
nsIDocument
*
aDocument
nsISupports
*
aState
bool
aForceReuseInnerWindow
)
{
NS_PRECONDITION
(
mDocumentPrincipal
=
=
nullptr
"
mDocumentPrincipal
prematurely
set
!
"
)
;
MOZ_ASSERT
(
aDocument
)
;
NS_PRECONDITION
(
IsOuterWindow
(
)
"
Must
only
be
called
on
outer
windows
"
)
;
NS_ENSURE_STATE
(
!
mCleanedUp
)
;
NS_ASSERTION
(
!
GetCurrentInnerWindow
(
)
|
|
GetCurrentInnerWindow
(
)
-
>
GetExtantDoc
(
)
=
=
mDoc
"
Uh
mDoc
doesn
'
t
match
the
current
inner
window
"
"
document
!
"
)
;
bool
wouldReuseInnerWindow
=
WouldReuseInnerWindow
(
aDocument
)
;
if
(
aForceReuseInnerWindow
&
&
!
wouldReuseInnerWindow
&
&
mDoc
&
&
mDoc
-
>
NodePrincipal
(
)
!
=
aDocument
-
>
NodePrincipal
(
)
)
{
NS_ERROR
(
"
Attempted
forced
inner
window
reuse
while
changing
principal
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsCOMPtr
<
nsIDocument
>
oldDoc
=
mDoc
;
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
if
(
!
js
:
:
CheckRecursionLimitConservativeDontReport
(
cx
)
)
{
NS_WARNING
(
"
Overrecursion
in
SetNewDocument
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
mDoc
)
{
nsPIDOMWindowOuter
*
privateRoot
=
GetPrivateRoot
(
)
;
if
(
privateRoot
=
=
this
)
{
nsXBLService
:
:
AttachGlobalKeyHandler
(
mChromeEventHandler
)
;
}
}
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsGlobalWindowOuter
:
:
ClearStatus
"
this
&
nsGlobalWindowOuter
:
:
ClearStatus
)
)
;
bool
reUseInnerWindow
=
(
aForceReuseInnerWindow
|
|
wouldReuseInnerWindow
)
&
&
GetCurrentInnerWindowInternal
(
)
;
nsresult
rv
=
NS_OK
;
mDoc
=
aDocument
;
mSuspendedDoc
=
nullptr
;
#
ifdef
DEBUG
mLastOpenedURI
=
aDocument
-
>
GetDocumentURI
(
)
;
#
endif
mContext
-
>
WillInitializeContext
(
)
;
nsGlobalWindowInner
*
currentInner
=
GetCurrentInnerWindowInternal
(
)
;
if
(
currentInner
&
&
currentInner
-
>
mNavigator
)
{
currentInner
-
>
mNavigator
-
>
OnNavigation
(
)
;
}
RefPtr
<
nsGlobalWindowInner
>
newInnerWindow
;
bool
createdInnerWindow
=
false
;
bool
thisChrome
=
IsChromeWindow
(
)
;
nsCOMPtr
<
WindowStateHolder
>
wsh
=
do_QueryInterface
(
aState
)
;
NS_ASSERTION
(
!
aState
|
|
wsh
"
What
kind
of
weird
state
are
you
giving
me
here
?
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
newInnerGlobal
(
cx
)
;
if
(
reUseInnerWindow
)
{
NS_ASSERTION
(
!
currentInner
-
>
IsFrozen
(
)
"
We
should
never
be
reusing
a
shared
inner
window
"
)
;
newInnerWindow
=
currentInner
;
newInnerGlobal
=
currentInner
-
>
GetWrapperPreserveColor
(
)
;
if
(
aDocument
!
=
oldDoc
)
{
JS
:
:
ExposeObjectToActiveJS
(
newInnerGlobal
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
rootedObject
(
cx
GetWrapper
(
)
)
;
if
(
!
JS_RefreshCrossCompartmentWrappers
(
cx
rootedObject
)
)
{
return
NS_ERROR_FAILURE
;
}
JSCompartment
*
compartment
=
js
:
:
GetObjectCompartment
(
newInnerGlobal
)
;
#
ifdef
DEBUG
bool
sameOrigin
=
false
;
nsIPrincipal
*
existing
=
nsJSPrincipals
:
:
get
(
JS_GetCompartmentPrincipals
(
compartment
)
)
;
aDocument
-
>
NodePrincipal
(
)
-
>
Equals
(
existing
&
sameOrigin
)
;
MOZ_ASSERT
(
sameOrigin
)
;
#
endif
MOZ_ASSERT_IF
(
aDocument
=
=
oldDoc
xpc
:
:
GetCompartmentPrincipal
(
compartment
)
=
=
aDocument
-
>
NodePrincipal
(
)
)
;
if
(
aDocument
!
=
oldDoc
)
{
JS_SetCompartmentPrincipals
(
compartment
nsJSPrincipals
:
:
get
(
aDocument
-
>
NodePrincipal
(
)
)
)
;
xpc
:
:
ClearContentXBLScope
(
newInnerGlobal
)
;
}
}
else
{
if
(
aState
)
{
newInnerWindow
=
wsh
-
>
GetInnerWindow
(
)
;
newInnerGlobal
=
newInnerWindow
-
>
GetWrapperPreserveColor
(
)
;
}
else
{
newInnerWindow
=
nsGlobalWindowInner
:
:
Create
(
this
thisChrome
)
;
mInnerWindow
=
nullptr
;
mCreatingInnerWindow
=
true
;
rv
=
CreateNativeGlobalForInner
(
cx
newInnerWindow
aDocument
-
>
GetDocumentURI
(
)
aDocument
-
>
NodePrincipal
(
)
&
newInnerGlobal
ComputeIsSecureContext
(
aDocument
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
&
&
newInnerGlobal
&
&
newInnerWindow
-
>
GetWrapperPreserveColor
(
)
=
=
newInnerGlobal
"
Failed
to
get
script
global
"
)
;
newInnerWindow
-
>
mIsSecureContextIfOpenerIgnored
=
ComputeIsSecureContext
(
aDocument
SecureContextFlags
:
:
eIgnoreOpener
)
;
mCreatingInnerWindow
=
false
;
createdInnerWindow
=
true
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
currentInner
&
&
currentInner
-
>
GetWrapperPreserveColor
(
)
)
{
if
(
oldDoc
=
=
aDocument
)
{
currentInner
-
>
AsInner
(
)
-
>
CreatePerformanceObjectIfNeeded
(
)
;
if
(
currentInner
-
>
mPerformance
)
{
newInnerWindow
-
>
mPerformance
=
Performance
:
:
CreateForMainThread
(
newInnerWindow
-
>
AsInner
(
)
currentInner
-
>
mPerformance
-
>
GetDOMTiming
(
)
currentInner
-
>
mPerformance
-
>
GetChannel
(
)
)
;
}
}
if
(
!
currentInner
-
>
IsFrozen
(
)
)
{
currentInner
-
>
FreeInnerObjects
(
)
;
}
}
mInnerWindow
=
newInnerWindow
-
>
AsInner
(
)
;
MOZ_ASSERT
(
mInnerWindow
)
;
mInnerWindow
-
>
TryToCacheTopInnerWindow
(
)
;
if
(
!
GetWrapperPreserveColor
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
outer
(
cx
NewOuterWindowProxy
(
cx
newInnerGlobal
thisChrome
)
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_FAILURE
)
;
js
:
:
SetProxyReservedSlot
(
outer
0
js
:
:
PrivateValue
(
ToSupports
(
this
)
)
)
;
mContext
-
>
SetWindowProxy
(
outer
)
;
mContext
-
>
DidInitializeContext
(
)
;
SetWrapper
(
mContext
-
>
GetWindowProxy
(
)
)
;
}
else
{
JS
:
:
ExposeObjectToActiveJS
(
newInnerGlobal
)
;
JS
:
:
Rooted
<
JSObject
*
>
outerObject
(
cx
NewOuterWindowProxy
(
cx
newInnerGlobal
thisChrome
)
)
;
if
(
!
outerObject
)
{
NS_ERROR
(
"
out
of
memory
"
)
;
return
NS_ERROR_FAILURE
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
GetWrapperPreserveColor
(
)
)
;
js
:
:
SetProxyReservedSlot
(
obj
0
js
:
:
PrivateValue
(
nullptr
)
)
;
js
:
:
SetProxyReservedSlot
(
outerObject
0
js
:
:
PrivateValue
(
nullptr
)
)
;
outerObject
=
xpc
:
:
TransplantObject
(
cx
obj
outerObject
)
;
if
(
!
outerObject
)
{
NS_ERROR
(
"
unable
to
transplant
wrappers
probably
OOM
"
)
;
return
NS_ERROR_FAILURE
;
}
js
:
:
SetProxyReservedSlot
(
outerObject
0
js
:
:
PrivateValue
(
ToSupports
(
this
)
)
)
;
SetWrapper
(
outerObject
)
;
MOZ_ASSERT
(
js
:
:
GetGlobalForObjectCrossCompartment
(
outerObject
)
=
=
newInnerGlobal
)
;
mContext
-
>
SetWindowProxy
(
outerObject
)
;
}
JSAutoCompartment
ac
(
cx
GetWrapperPreserveColor
(
)
)
;
{
JS
:
:
Rooted
<
JSObject
*
>
outer
(
cx
GetWrapperPreserveColor
(
)
)
;
js
:
:
SetWindowProxy
(
cx
newInnerGlobal
outer
)
;
}
bool
allow
=
GetDocShell
(
)
-
>
GetCanExecuteScripts
(
)
;
xpc
:
:
Scriptability
:
:
Get
(
GetWrapperPreserveColor
(
)
)
.
SetDocShellAllowsScript
(
allow
)
;
if
(
!
aState
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
unused
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
newInnerGlobal
"
window
"
&
unused
)
)
{
NS_ERROR
(
"
can
'
t
create
the
'
window
'
property
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
JS_GetProperty
(
cx
newInnerGlobal
"
self
"
&
unused
)
)
{
NS_ERROR
(
"
can
'
t
create
the
'
self
'
property
"
)
;
return
NS_ERROR_FAILURE
;
}
}
}
JSAutoCompartment
ac
(
cx
GetWrapperPreserveColor
(
)
)
;
if
(
!
aState
&
&
!
reUseInnerWindow
)
{
MOZ_ASSERT
(
mContext
-
>
GetWindowProxy
(
)
=
=
GetWrapperPreserveColor
(
)
)
;
#
ifdef
DEBUG
JS
:
:
Rooted
<
JSObject
*
>
rootedJSObject
(
cx
GetWrapperPreserveColor
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
proto1
(
cx
)
proto2
(
cx
)
;
JS_GetPrototype
(
cx
rootedJSObject
&
proto1
)
;
JS_GetPrototype
(
cx
newInnerGlobal
&
proto2
)
;
NS_ASSERTION
(
proto1
=
=
proto2
"
outer
and
inner
globals
should
have
the
same
prototype
"
)
;
#
endif
mInnerWindow
-
>
SyncStateFromParentWindow
(
)
;
}
nsCOMPtr
<
nsIScriptContext
>
kungFuDeathGrip
(
mContext
)
;
aDocument
-
>
SetScriptGlobalObject
(
newInnerWindow
)
;
MOZ_ASSERT
(
newInnerWindow
-
>
mTabGroup
"
We
must
have
a
TabGroup
cached
at
this
point
"
)
;
if
(
!
aState
)
{
if
(
reUseInnerWindow
)
{
if
(
newInnerWindow
-
>
mDoc
!
=
aDocument
)
{
newInnerWindow
-
>
mDoc
=
aDocument
;
newInnerWindow
-
>
mLocalStorage
=
nullptr
;
newInnerWindow
-
>
mSessionStorage
=
nullptr
;
newInnerWindow
-
>
ClearDocumentDependentSlots
(
cx
)
;
}
}
else
{
newInnerWindow
-
>
InnerSetNewDocument
(
cx
aDocument
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
newInnerGlobal
)
;
rv
=
kungFuDeathGrip
-
>
InitClasses
(
obj
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIJARChannel
>
jarChannel
=
do_QueryInterface
(
aDocument
-
>
GetChannel
(
)
)
;
if
(
jarChannel
&
&
jarChannel
-
>
GetIsUnsafe
(
)
)
{
xpc
:
:
Scriptability
:
:
Get
(
newInnerGlobal
)
.
Block
(
)
;
}
if
(
mArguments
)
{
newInnerWindow
-
>
DefineArgumentsProperty
(
mArguments
)
;
mArguments
=
nullptr
;
}
newInnerWindow
-
>
mChromeEventHandler
=
mChromeEventHandler
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDoc
-
>
NodePrincipal
(
)
;
if
(
GetDocGroup
(
)
&
&
!
nsContentUtils
:
:
IsSystemPrincipal
(
principal
)
&
&
!
BasePrincipal
:
:
Cast
(
principal
)
-
>
AddonPolicy
(
)
)
{
js
:
:
SetCompartmentValidAccessPtr
(
cx
newInnerGlobal
newInnerWindow
-
>
GetDocGroup
(
)
-
>
GetValidAccessPtr
(
)
)
;
}
kungFuDeathGrip
-
>
DidInitializeContext
(
)
;
if
(
createdInnerWindow
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsGlobalWindowInner
:
:
FireOnNewGlobalObject
"
newInnerWindow
&
nsGlobalWindowInner
:
:
FireOnNewGlobalObject
)
)
;
}
if
(
newInnerWindow
&
&
!
newInnerWindow
-
>
mHasNotifiedGlobalCreated
&
&
mDoc
)
{
if
(
!
mDocShell
|
|
mDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
|
|
nsContentUtils
:
:
IsSystemPrincipal
(
mDoc
-
>
NodePrincipal
(
)
)
)
{
newInnerWindow
-
>
mHasNotifiedGlobalCreated
=
true
;
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsGlobalWindowOuter
:
:
DispatchDOMWindowCreated
"
this
&
nsGlobalWindowOuter
:
:
DispatchDOMWindowCreated
)
)
;
}
}
PreloadLocalStorage
(
)
;
ReportLargeAllocStatus
(
)
;
mLargeAllocStatus
=
LargeAllocStatus
:
:
NONE
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
PreloadLocalStorage
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
Preferences
:
:
GetBool
(
kStorageEnabled
)
)
{
return
;
}
if
(
IsChromeWindow
(
)
)
{
return
;
}
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
if
(
!
principal
)
{
return
;
}
nsresult
rv
;
nsCOMPtr
<
nsIDOMStorageManager
>
storageManager
=
do_GetService
(
"
mozilla
.
org
/
dom
/
localStorage
-
manager
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
principal
-
>
GetPrivateBrowsingId
(
)
=
=
0
)
{
nsCOMPtr
<
nsIDOMStorage
>
storage
;
rv
=
storageManager
-
>
PrecacheStorage
(
principal
getter_AddRefs
(
storage
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mLocalStorage
=
static_cast
<
Storage
*
>
(
storage
.
get
(
)
)
;
}
}
}
void
nsGlobalWindowOuter
:
:
DispatchDOMWindowCreated
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDoc
)
{
return
;
}
nsContentUtils
:
:
DispatchChromeEvent
(
mDoc
mDoc
NS_LITERAL_STRING
(
"
DOMWindowCreated
"
)
true
false
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
&
&
mDoc
)
{
nsAutoString
origin
;
nsIPrincipal
*
principal
=
mDoc
-
>
NodePrincipal
(
)
;
nsContentUtils
:
:
GetUTFOrigin
(
principal
origin
)
;
observerService
-
>
NotifyObservers
(
static_cast
<
nsIDOMWindow
*
>
(
this
)
nsContentUtils
:
:
IsSystemPrincipal
(
principal
)
?
"
chrome
-
document
-
global
-
created
"
:
"
content
-
document
-
global
-
created
"
origin
.
get
(
)
)
;
}
}
void
nsGlobalWindowOuter
:
:
ClearStatus
(
)
{
SetStatusOuter
(
EmptyString
(
)
)
;
}
void
nsGlobalWindowOuter
:
:
SetDocShell
(
nsIDocShell
*
aDocShell
)
{
NS_ASSERTION
(
IsOuterWindow
(
)
"
Uh
SetDocShell
(
)
called
on
inner
window
!
"
)
;
MOZ_ASSERT
(
aDocShell
)
;
if
(
aDocShell
=
=
mDocShell
)
{
return
;
}
mDocShell
=
aDocShell
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
parentWindow
=
GetScriptableParentOrNull
(
)
;
MOZ_RELEASE_ASSERT
(
!
parentWindow
|
|
!
mTabGroup
|
|
mTabGroup
=
=
nsGlobalWindowOuter
:
:
Cast
(
parentWindow
)
-
>
mTabGroup
)
;
mTopLevelOuterContentWindow
=
!
mIsChrome
&
&
GetScriptableTopInternal
(
)
=
=
this
;
NS_ASSERTION
(
!
mNavigator
"
Non
-
null
mNavigator
in
outer
window
!
"
)
;
if
(
mFrames
)
{
mFrames
-
>
SetDocShell
(
aDocShell
)
;
}
nsCOMPtr
<
nsIDOMEventTarget
>
chromeEventHandler
;
mDocShell
-
>
GetChromeEventHandler
(
getter_AddRefs
(
chromeEventHandler
)
)
;
mChromeEventHandler
=
do_QueryInterface
(
chromeEventHandler
)
;
if
(
!
mChromeEventHandler
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
parentWindow
=
GetParent
(
)
;
if
(
parentWindow
.
get
(
)
!
=
this
)
{
mChromeEventHandler
=
parentWindow
-
>
GetChromeEventHandler
(
)
;
}
else
{
mChromeEventHandler
=
NS_NewWindowRoot
(
this
)
;
mIsRootOuterWindow
=
true
;
}
}
bool
docShellActive
;
mDocShell
-
>
GetIsActive
(
&
docShellActive
)
;
SetIsBackgroundInternal
(
!
docShellActive
)
;
}
void
nsGlobalWindowOuter
:
:
DetachFromDocShell
(
)
{
NS_ASSERTION
(
IsOuterWindow
(
)
"
Uh
DetachFromDocShell
(
)
called
on
inner
window
!
"
)
;
RefPtr
<
nsGlobalWindowInner
>
inner
;
for
(
PRCList
*
node
=
PR_LIST_HEAD
(
this
)
;
node
!
=
this
;
node
=
PR_NEXT_LINK
(
inner
)
)
{
inner
=
static_cast
<
nsGlobalWindowInner
*
>
(
node
)
;
MOZ_ASSERT
(
inner
-
>
IsInnerWindow
(
)
)
;
MOZ_ASSERT
(
!
inner
-
>
mOuterWindow
|
|
inner
-
>
mOuterWindow
=
=
this
)
;
inner
-
>
FreeInnerObjects
(
)
;
}
NotifyWindowIDDestroyed
(
"
outer
-
window
-
destroyed
"
)
;
nsGlobalWindowInner
*
currentInner
=
GetCurrentInnerWindowInternal
(
)
;
if
(
currentInner
)
{
NS_ASSERTION
(
mDoc
"
Must
have
doc
!
"
)
;
mDocumentPrincipal
=
mDoc
-
>
NodePrincipal
(
)
;
mDocumentURI
=
mDoc
-
>
GetDocumentURI
(
)
;
mDocBaseURI
=
mDoc
-
>
GetDocBaseURI
(
)
;
DropOuterWindowDocs
(
)
;
mFocusedNode
=
nullptr
;
}
ClearControllers
(
)
;
mChromeEventHandler
=
nullptr
;
if
(
mContext
)
{
nsJSContext
:
:
PokeGC
(
JS
:
:
gcreason
:
:
SET_DOC_SHELL
(
mTopLevelOuterContentWindow
|
|
mIsChrome
)
?
nullptr
:
GetWrapperPreserveColor
(
)
)
;
mContext
=
nullptr
;
}
mDocShell
=
nullptr
;
NS_ASSERTION
(
!
mNavigator
"
Non
-
null
mNavigator
in
outer
window
!
"
)
;
if
(
mFrames
)
{
mFrames
-
>
SetDocShell
(
nullptr
)
;
}
MaybeForgiveSpamCount
(
)
;
CleanUp
(
)
;
}
void
nsGlobalWindowOuter
:
:
SetOpenerWindow
(
nsPIDOMWindowOuter
*
aOpener
bool
aOriginalOpener
)
{
nsWeakPtr
opener
=
do_GetWeakReference
(
aOpener
)
;
if
(
opener
=
=
mOpener
)
{
return
;
}
NS_ASSERTION
(
!
aOriginalOpener
|
|
!
mSetOpenerWindowCalled
"
aOriginalOpener
is
true
but
not
first
call
to
"
"
SetOpenerWindow
!
"
)
;
NS_ASSERTION
(
aOpener
|
|
!
aOriginalOpener
"
Shouldn
'
t
set
mHadOriginalOpener
if
aOpener
is
null
"
)
;
mOpener
=
opener
.
forget
(
)
;
NS_ASSERTION
(
mOpener
|
|
!
aOpener
"
Opener
must
support
weak
references
!
"
)
;
nsPIDOMWindowOuter
*
contentOpener
=
GetSanitizedOpener
(
aOpener
)
;
mozilla
:
:
Unused
<
<
contentOpener
;
MOZ_DIAGNOSTIC_ASSERT
(
!
contentOpener
|
|
!
mTabGroup
|
|
mTabGroup
=
=
nsGlobalWindowOuter
:
:
Cast
(
contentOpener
)
-
>
mTabGroup
)
;
if
(
aOriginalOpener
)
{
MOZ_ASSERT
(
!
mHadOriginalOpener
"
Probably
too
late
to
call
ComputeIsSecureContext
again
"
)
;
mHadOriginalOpener
=
true
;
mOriginalOpenerWasSecureContext
=
aOpener
-
>
GetCurrentInnerWindow
(
)
-
>
IsSecureContext
(
)
;
}
#
ifdef
DEBUG
mSetOpenerWindowCalled
=
true
;
#
endif
}
void
nsGlobalWindowOuter
:
:
UpdateParentTarget
(
)
{
nsCOMPtr
<
Element
>
frameElement
=
GetOuterWindow
(
)
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
EventTarget
>
eventTarget
=
TryGetTabChildGlobalAsEventTarget
(
frameElement
)
;
if
(
!
eventTarget
)
{
nsGlobalWindowOuter
*
topWin
=
GetScriptableTopInternal
(
)
;
if
(
topWin
)
{
frameElement
=
topWin
-
>
GetFrameElementInternal
(
)
;
eventTarget
=
TryGetTabChildGlobalAsEventTarget
(
frameElement
)
;
}
}
if
(
!
eventTarget
)
{
eventTarget
=
TryGetTabChildGlobalAsEventTarget
(
mChromeEventHandler
)
;
}
if
(
!
eventTarget
)
{
eventTarget
=
mChromeEventHandler
;
}
mParentTarget
=
eventTarget
;
}
EventTarget
*
nsGlobalWindowOuter
:
:
GetTargetForDOMEvent
(
)
{
return
GetOuterWindowInternal
(
)
;
}
EventTarget
*
nsGlobalWindowOuter
:
:
GetTargetForEventTargetChain
(
)
{
return
GetCurrentInnerWindowInternal
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
WillHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
return
NS_OK
;
}
nsresult
nsGlobalWindowOuter
:
:
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
bool
nsGlobalWindowOuter
:
:
ShouldPromptToBlockDialogs
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsGlobalWindowOuter
*
topWindowOuter
=
GetScriptableTopInternal
(
)
;
if
(
!
topWindowOuter
)
{
NS_ASSERTION
(
!
mDocShell
"
ShouldPromptToBlockDialogs
(
)
called
without
a
top
window
?
"
)
;
return
true
;
}
nsGlobalWindowInner
*
topWindow
=
topWindowOuter
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
!
topWindow
)
{
return
true
;
}
return
topWindow
-
>
DialogsAreBeingAbused
(
)
;
}
bool
nsGlobalWindowOuter
:
:
AreDialogsEnabled
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsGlobalWindowOuter
*
topWindowOuter
=
GetScriptableTopInternal
(
)
;
if
(
!
topWindowOuter
)
{
NS_ERROR
(
"
AreDialogsEnabled
(
)
called
without
a
top
window
?
"
)
;
return
false
;
}
nsGlobalWindowInner
*
topWindow
=
topWindowOuter
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
!
topWindow
)
{
return
false
;
}
if
(
mDocShell
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
bool
isHidden
;
cv
-
>
GetIsHidden
(
&
isHidden
)
;
if
(
isHidden
)
{
return
false
;
}
}
if
(
!
mDoc
|
|
(
mDoc
-
>
GetSandboxFlags
(
)
&
SANDBOXED_MODALS
)
)
{
return
false
;
}
return
topWindow
-
>
mAreDialogsEnabled
;
}
bool
nsGlobalWindowOuter
:
:
ConfirmDialogIfNeeded
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
NS_ENSURE_TRUE
(
mDocShell
false
)
;
nsCOMPtr
<
nsIPromptService
>
promptSvc
=
do_GetService
(
"
mozilla
.
org
/
embedcomp
/
prompt
-
service
;
1
"
)
;
if
(
!
promptSvc
)
{
return
true
;
}
nsAutoPopupStatePusher
popupStatePusher
(
openAbused
true
)
;
bool
disableDialog
=
false
;
nsAutoString
label
title
;
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDialogLabel
"
label
)
;
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDialogPreventTitle
"
title
)
;
promptSvc
-
>
Confirm
(
this
title
.
get
(
)
label
.
get
(
)
&
disableDialog
)
;
if
(
disableDialog
)
{
DisableDialogs
(
)
;
return
false
;
}
return
true
;
}
void
nsGlobalWindowOuter
:
:
DisableDialogs
(
)
{
nsGlobalWindowOuter
*
topWindowOuter
=
GetScriptableTopInternal
(
)
;
if
(
!
topWindowOuter
)
{
NS_ERROR
(
"
DisableDialogs
(
)
called
without
a
top
window
?
"
)
;
return
;
}
nsGlobalWindowInner
*
topWindow
=
topWindowOuter
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
topWindow
)
{
topWindow
-
>
mAreDialogsEnabled
=
false
;
}
}
void
nsGlobalWindowOuter
:
:
EnableDialogs
(
)
{
nsGlobalWindowOuter
*
topWindowOuter
=
GetScriptableTopInternal
(
)
;
if
(
!
topWindowOuter
)
{
NS_ERROR
(
"
EnableDialogs
(
)
called
without
a
top
window
?
"
)
;
return
;
}
nsGlobalWindowInner
*
topWindow
=
topWindowOuter
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
topWindow
)
{
topWindow
-
>
mAreDialogsEnabled
=
true
;
}
}
nsresult
nsGlobalWindowOuter
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
PoisonOuterWindowProxy
(
JSObject
*
aObject
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
aObject
=
=
GetWrapperMaybeDead
(
)
)
{
PoisonWrapper
(
)
;
}
}
nsresult
nsGlobalWindowOuter
:
:
SetArguments
(
nsIArray
*
aArguments
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsresult
rv
;
nsGlobalWindowInner
*
currentInner
=
GetCurrentInnerWindowInternal
(
)
;
mArguments
=
aArguments
;
rv
=
currentInner
-
>
DefineArgumentsProperty
(
aArguments
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsIPrincipal
*
nsGlobalWindowOuter
:
:
GetPrincipal
(
)
{
if
(
mDoc
)
{
return
mDoc
-
>
NodePrincipal
(
)
;
}
if
(
mDocumentPrincipal
)
{
return
mDocumentPrincipal
;
}
nsCOMPtr
<
nsIScriptObjectPrincipal
>
objPrincipal
=
do_QueryInterface
(
GetParentInternal
(
)
)
;
if
(
objPrincipal
)
{
return
objPrincipal
-
>
GetPrincipal
(
)
;
}
return
nullptr
;
}
void
nsPIDOMWindowOuter
:
:
SetInitialKeyboardIndicators
(
UIStateChangeType
aShowAccelerators
UIStateChangeType
aShowFocusRings
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
!
GetCurrentInnerWindow
(
)
)
;
nsPIDOMWindowOuter
*
piWin
=
GetPrivateRoot
(
)
;
if
(
!
piWin
)
{
return
;
}
MOZ_ASSERT
(
piWin
=
=
this
)
;
nsCOMPtr
<
nsPIWindowRoot
>
windowRoot
=
do_QueryInterface
(
mChromeEventHandler
)
;
if
(
!
windowRoot
)
{
return
;
}
if
(
aShowAccelerators
!
=
UIStateChangeType_NoChange
)
{
windowRoot
-
>
SetShowAccelerators
(
aShowAccelerators
=
=
UIStateChangeType_Set
)
;
}
if
(
aShowFocusRings
!
=
UIStateChangeType_NoChange
)
{
windowRoot
-
>
SetShowFocusRings
(
aShowFocusRings
=
=
UIStateChangeType_Set
)
;
}
nsContentUtils
:
:
SetKeyboardIndicatorsOnRemoteChildren
(
GetOuterWindow
(
)
aShowAccelerators
aShowFocusRings
)
;
}
Element
*
nsPIDOMWindowOuter
:
:
GetFrameElementInternal
(
)
const
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
return
mFrameElement
;
}
void
nsPIDOMWindowOuter
:
:
SetFrameElementInternal
(
Element
*
aFrameElement
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
mFrameElement
=
aFrameElement
;
}
nsIDOMNavigator
*
nsGlobalWindowOuter
:
:
GetNavigator
(
)
{
FORWARD_TO_INNER
(
GetNavigator
(
)
nullptr
)
;
}
nsIDOMScreen
*
nsGlobalWindowOuter
:
:
GetScreen
(
)
{
FORWARD_TO_INNER
(
GetScreen
(
)
nullptr
)
;
}
CustomElementRegistry
*
nsGlobalWindowOuter
:
:
CustomElements
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsPIDOMWindowOuter
:
:
MaybeActiveMediaComponents
(
)
{
if
(
mMediaSuspend
!
=
nsISuspendedTypes
:
:
SUSPENDED_BLOCK
)
{
return
;
}
MOZ_LOG
(
AudioChannelService
:
:
GetAudioChannelLog
(
)
LogLevel
:
:
Debug
(
"
nsPIDOMWindowOuter
MaybeActiveMediaComponents
"
"
resume
the
window
from
blocked
this
=
%
p
\
n
"
this
)
)
;
SetMediaSuspend
(
nsISuspendedTypes
:
:
NONE_SUSPENDED
)
;
}
SuspendTypes
nsPIDOMWindowOuter
:
:
GetMediaSuspend
(
)
const
{
return
mMediaSuspend
;
}
void
nsPIDOMWindowOuter
:
:
SetMediaSuspend
(
SuspendTypes
aSuspend
)
{
if
(
!
IsDisposableSuspend
(
aSuspend
)
)
{
MaybeNotifyMediaResumedFromBlock
(
aSuspend
)
;
mMediaSuspend
=
aSuspend
;
}
RefreshMediaElementsSuspend
(
aSuspend
)
;
}
void
nsPIDOMWindowOuter
:
:
MaybeNotifyMediaResumedFromBlock
(
SuspendTypes
aSuspend
)
{
if
(
mMediaSuspend
=
=
nsISuspendedTypes
:
:
SUSPENDED_BLOCK
&
&
aSuspend
=
=
nsISuspendedTypes
:
:
NONE_SUSPENDED
)
{
RefPtr
<
AudioChannelService
>
service
=
AudioChannelService
:
:
GetOrCreate
(
)
;
if
(
service
)
{
service
-
>
NotifyMediaResumedFromBlock
(
GetOuterWindow
(
)
)
;
}
}
}
bool
nsPIDOMWindowOuter
:
:
GetAudioMuted
(
)
const
{
return
mAudioMuted
;
}
void
nsPIDOMWindowOuter
:
:
SetAudioMuted
(
bool
aMuted
)
{
if
(
mAudioMuted
=
=
aMuted
)
{
return
;
}
mAudioMuted
=
aMuted
;
RefreshMediaElementsVolume
(
)
;
}
float
nsPIDOMWindowOuter
:
:
GetAudioVolume
(
)
const
{
return
mAudioVolume
;
}
nsresult
nsPIDOMWindowOuter
:
:
SetAudioVolume
(
float
aVolume
)
{
if
(
aVolume
<
0
.
0
)
{
return
NS_ERROR_DOM_INDEX_SIZE_ERR
;
}
if
(
mAudioVolume
=
=
aVolume
)
{
return
NS_OK
;
}
mAudioVolume
=
aVolume
;
RefreshMediaElementsVolume
(
)
;
return
NS_OK
;
}
void
nsPIDOMWindowOuter
:
:
RefreshMediaElementsVolume
(
)
{
RefPtr
<
AudioChannelService
>
service
=
AudioChannelService
:
:
GetOrCreate
(
)
;
if
(
service
)
{
service
-
>
RefreshAgentsVolume
(
GetOuterWindow
(
)
)
;
}
}
void
nsPIDOMWindowOuter
:
:
RefreshMediaElementsSuspend
(
SuspendTypes
aSuspend
)
{
RefPtr
<
AudioChannelService
>
service
=
AudioChannelService
:
:
GetOrCreate
(
)
;
if
(
service
)
{
service
-
>
RefreshAgentsSuspend
(
GetOuterWindow
(
)
aSuspend
)
;
}
}
bool
nsPIDOMWindowOuter
:
:
IsDisposableSuspend
(
SuspendTypes
aSuspend
)
const
{
return
(
aSuspend
=
=
nsISuspendedTypes
:
:
SUSPENDED_PAUSE_DISPOSABLE
|
|
aSuspend
=
=
nsISuspendedTypes
:
:
SUSPENDED_STOP_DISPOSABLE
)
;
}
void
nsPIDOMWindowOuter
:
:
SetServiceWorkersTestingEnabled
(
bool
aEnabled
)
{
#
ifdef
DEBUG
nsCOMPtr
<
nsPIDOMWindowOuter
>
topWindow
=
GetScriptableTop
(
)
;
MOZ_ASSERT_IF
(
aEnabled
this
=
=
topWindow
)
;
#
endif
mServiceWorkersTestingEnabled
=
aEnabled
;
}
bool
nsPIDOMWindowOuter
:
:
GetServiceWorkersTestingEnabled
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
topWindow
=
GetScriptableTop
(
)
;
if
(
!
topWindow
)
{
return
false
;
}
return
topWindow
-
>
mServiceWorkersTestingEnabled
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetParentOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
;
if
(
mDocShell
-
>
GetIsMozBrowser
(
)
)
{
parent
=
this
;
}
else
{
parent
=
GetParent
(
)
;
}
return
parent
.
forget
(
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetScriptableParent
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
GetParentOuter
(
)
;
return
parent
.
get
(
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetScriptableParentOrNull
(
)
{
nsPIDOMWindowOuter
*
parent
=
GetScriptableParent
(
)
;
return
(
nsGlobalWindowOuter
:
:
Cast
(
parent
)
=
=
this
)
?
nullptr
:
parent
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetParent
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShell
>
parent
;
mDocShell
-
>
GetSameTypeParentIgnoreBrowserBoundaries
(
getter_AddRefs
(
parent
)
)
;
if
(
parent
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
=
parent
-
>
GetWindow
(
)
;
return
win
.
forget
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
win
(
this
)
;
return
win
.
forget
(
)
;
}
static
nsresult
GetTopImpl
(
nsGlobalWindowOuter
*
aWin
nsPIDOMWindowOuter
*
*
aTop
bool
aScriptable
)
{
*
aTop
=
nullptr
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
prevParent
=
aWin
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
aWin
;
do
{
if
(
!
parent
)
{
break
;
}
prevParent
=
parent
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
newParent
;
if
(
aScriptable
)
{
newParent
=
parent
-
>
GetScriptableParent
(
)
;
}
else
{
newParent
=
parent
-
>
GetParent
(
)
;
}
parent
=
newParent
;
}
while
(
parent
!
=
prevParent
)
;
if
(
parent
)
{
parent
.
swap
(
*
aTop
)
;
}
return
NS_OK
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetScriptableTop
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
;
GetTopImpl
(
this
getter_AddRefs
(
window
)
true
)
;
return
window
.
get
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetTop
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
;
GetTopImpl
(
this
getter_AddRefs
(
window
)
false
)
;
return
window
.
forget
(
)
;
}
void
nsGlobalWindowOuter
:
:
GetContentOuter
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
content
=
GetContentInternal
(
aError
aCallerType
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
if
(
content
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
aCx
)
;
aError
=
nsContentUtils
:
:
WrapNative
(
aCx
content
&
val
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
aRetval
.
set
(
&
val
.
toObject
(
)
)
;
return
;
}
aRetval
.
set
(
nullptr
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetContentInternal
(
ErrorResult
&
aError
CallerType
aCallerType
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWindow
=
GetChildWindow
(
NS_LITERAL_STRING
(
"
content
"
)
)
;
if
(
domWindow
)
{
return
domWindow
.
forget
(
)
;
}
if
(
mDocShell
&
&
mDocShell
-
>
GetIsInMozBrowser
(
)
)
{
return
GetTopOuter
(
)
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
primaryContent
;
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
if
(
mDoc
)
{
mDoc
-
>
WarnOnceAbout
(
nsIDocument
:
:
eWindowContentUntrusted
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
baseWin
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
baseWin
)
{
bool
visible
=
false
;
baseWin
-
>
GetVisibility
(
&
visible
)
;
if
(
!
visible
)
{
mDocShell
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
primaryContent
)
)
;
}
}
}
if
(
!
primaryContent
)
{
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
if
(
!
treeOwner
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
treeOwner
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
primaryContent
)
)
;
}
if
(
!
primaryContent
)
{
return
nullptr
;
}
domWindow
=
primaryContent
-
>
GetWindow
(
)
;
return
domWindow
.
forget
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
GetPrompter
(
nsIPrompt
*
*
aPrompt
)
{
if
(
!
mDocShell
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIPrompt
>
prompter
(
do_GetInterface
(
mDocShell
)
)
;
NS_ENSURE_TRUE
(
prompter
NS_ERROR_NO_INTERFACE
)
;
prompter
.
forget
(
aPrompt
)
;
return
NS_OK
;
}
bool
nsGlobalWindowOuter
:
:
GetClosedOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
mIsClosed
|
|
!
mDocShell
;
}
bool
nsGlobalWindowOuter
:
:
Closed
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetClosedOuter
(
)
;
}
nsDOMWindowList
*
nsGlobalWindowOuter
:
:
GetWindowList
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mFrames
&
&
mDocShell
)
{
mFrames
=
new
nsDOMWindowList
(
mDocShell
)
;
}
return
mFrames
;
}
already_AddRefed
<
nsIDOMWindowCollection
>
nsGlobalWindowOuter
:
:
GetFrames
(
)
{
nsCOMPtr
<
nsIDOMWindowCollection
>
frames
=
GetWindowList
(
)
;
return
frames
.
forget
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
IndexedGetterOuter
(
uint32_t
aIndex
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsDOMWindowList
*
windows
=
GetWindowList
(
)
;
NS_ENSURE_TRUE
(
windows
nullptr
)
;
return
windows
-
>
IndexedGetter
(
aIndex
)
;
}
already_AddRefed
<
nsIDOMOfflineResourceList
>
nsGlobalWindowOuter
:
:
GetApplicationCache
(
)
{
FORWARD_TO_INNER
(
GetApplicationCache
(
)
nullptr
)
;
}
nsIControllers
*
nsGlobalWindowOuter
:
:
GetControllersOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mControllers
)
{
nsresult
rv
;
mControllers
=
do_CreateInstance
(
kXULControllersCID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIController
>
controller
=
do_CreateInstance
(
NS_WINDOWCONTROLLER_CONTRACTID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
mControllers
-
>
InsertControllerAt
(
0
controller
)
;
nsCOMPtr
<
nsIControllerContext
>
controllerContext
=
do_QueryInterface
(
controller
)
;
if
(
!
controllerContext
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
controllerContext
-
>
SetCommandContext
(
static_cast
<
nsIDOMWindow
*
>
(
this
)
)
;
}
return
mControllers
;
}
nsresult
nsGlobalWindowOuter
:
:
GetControllers
(
nsIControllers
*
*
aResult
)
{
FORWARD_TO_INNER
(
GetControllers
(
aResult
)
NS_ERROR_UNEXPECTED
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetSanitizedOpener
(
nsPIDOMWindowOuter
*
aOpener
)
{
if
(
!
aOpener
)
{
return
nullptr
;
}
nsGlobalWindowOuter
*
win
=
nsGlobalWindowOuter
:
:
Cast
(
aOpener
)
;
if
(
win
-
>
IsChromeWindow
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShell
>
openerDocShell
=
aOpener
-
>
GetDocShell
(
)
;
if
(
openerDocShell
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
openerRootItem
;
openerDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
openerRootItem
)
)
;
nsCOMPtr
<
nsIDocShell
>
openerRootDocShell
(
do_QueryInterface
(
openerRootItem
)
)
;
if
(
openerRootDocShell
)
{
uint32_t
appType
;
nsresult
rv
=
openerRootDocShell
-
>
GetAppType
(
&
appType
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
appType
!
=
nsIDocShell
:
:
APP_TYPE_MAIL
)
{
return
aOpener
;
}
}
}
return
nullptr
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetOpenerWindowOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
opener
=
do_QueryReferent
(
mOpener
)
;
if
(
!
opener
)
{
return
nullptr
;
}
if
(
nsContentUtils
:
:
LegacyIsCallerChromeOrNativeCode
(
)
)
{
if
(
GetPrincipal
(
)
=
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
&
&
nsGlobalWindowOuter
:
:
Cast
(
opener
)
-
>
GetPrincipal
(
)
!
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
)
{
return
nullptr
;
}
return
opener
;
}
return
GetSanitizedOpener
(
opener
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetOpener
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
opener
=
GetOpenerWindowOuter
(
)
;
return
opener
.
forget
(
)
;
}
void
nsGlobalWindowOuter
:
:
GetStatusOuter
(
nsAString
&
aStatus
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
aStatus
=
mStatus
;
}
void
nsGlobalWindowOuter
:
:
SetStatusOuter
(
const
nsAString
&
aStatus
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
mStatus
=
aStatus
;
if
(
!
CanSetProperty
(
"
dom
.
disable_window_status_change
"
)
)
{
return
;
}
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
GetWebBrowserChrome
(
)
;
if
(
browserChrome
)
{
browserChrome
-
>
SetStatus
(
nsIWebBrowserChrome
:
:
STATUS_SCRIPT
PromiseFlatString
(
aStatus
)
.
get
(
)
)
;
}
}
void
nsGlobalWindowOuter
:
:
GetNameOuter
(
nsAString
&
aName
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
mDocShell
)
{
mDocShell
-
>
GetName
(
aName
)
;
}
}
void
nsGlobalWindowOuter
:
:
SetNameOuter
(
const
nsAString
&
aName
mozilla
:
:
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
mDocShell
)
{
aError
=
mDocShell
-
>
SetName
(
aName
)
;
}
}
int32_t
nsGlobalWindowOuter
:
:
DevToCSSIntPixels
(
int32_t
px
)
{
if
(
!
mDocShell
)
return
px
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
return
px
;
return
presContext
-
>
DevPixelsToIntCSSPixels
(
px
)
;
}
int32_t
nsGlobalWindowOuter
:
:
CSSToDevIntPixels
(
int32_t
px
)
{
if
(
!
mDocShell
)
return
px
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
return
px
;
return
presContext
-
>
CSSPixelsToDevPixels
(
px
)
;
}
nsIntSize
nsGlobalWindowOuter
:
:
DevToCSSIntPixels
(
nsIntSize
px
)
{
if
(
!
mDocShell
)
return
px
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
return
px
;
return
nsIntSize
(
presContext
-
>
DevPixelsToIntCSSPixels
(
px
.
width
)
presContext
-
>
DevPixelsToIntCSSPixels
(
px
.
height
)
)
;
}
nsIntSize
nsGlobalWindowOuter
:
:
CSSToDevIntPixels
(
nsIntSize
px
)
{
if
(
!
mDocShell
)
return
px
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
return
px
;
return
nsIntSize
(
presContext
-
>
CSSPixelsToDevPixels
(
px
.
width
)
presContext
-
>
CSSPixelsToDevPixels
(
px
.
height
)
)
;
}
nsresult
nsGlobalWindowOuter
:
:
GetInnerSize
(
CSSIntSize
&
aSize
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
EnsureSizeAndPositionUpToDate
(
)
;
NS_ENSURE_STATE
(
mDocShell
)
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
RefPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presContext
|
|
!
presShell
)
{
aSize
=
CSSIntSize
(
0
0
)
;
return
NS_OK
;
}
if
(
presShell
-
>
IsScrollPositionClampingScrollPortSizeSet
(
)
)
{
aSize
=
CSSIntRect
:
:
FromAppUnitsRounded
(
presShell
-
>
GetScrollPositionClampingScrollPortSize
(
)
)
;
}
else
{
RefPtr
<
nsViewManager
>
viewManager
=
presShell
-
>
GetViewManager
(
)
;
if
(
viewManager
)
{
viewManager
-
>
FlushDelayedResize
(
false
)
;
}
aSize
=
CSSIntRect
:
:
FromAppUnitsRounded
(
presContext
-
>
GetVisibleArea
(
)
.
Size
(
)
)
;
}
return
NS_OK
;
}
int32_t
nsGlobalWindowOuter
:
:
GetInnerWidthOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
CSSIntSize
size
;
aError
=
GetInnerSize
(
size
)
;
return
size
.
width
;
}
nsresult
nsGlobalWindowOuter
:
:
GetInnerWidth
(
int32_t
*
aInnerWidth
)
{
FORWARD_TO_INNER
(
GetInnerWidth
(
aInnerWidth
)
NS_ERROR_UNEXPECTED
)
;
}
void
nsGlobalWindowOuter
:
:
SetInnerWidthOuter
(
int32_t
aInnerWidth
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
CheckSecurityWidthAndHeight
(
&
aInnerWidth
nullptr
aCallerType
)
;
RefPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
presShell
&
&
presShell
-
>
GetIsViewportOverridden
(
)
)
{
nscoord
height
=
0
;
RefPtr
<
nsPresContext
>
presContext
;
presContext
=
presShell
-
>
GetPresContext
(
)
;
nsRect
shellArea
=
presContext
-
>
GetVisibleArea
(
)
;
height
=
shellArea
.
Height
(
)
;
SetCSSViewportWidthAndHeight
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
aInnerWidth
)
height
)
;
return
;
}
int32_t
height
=
0
;
int32_t
unused
=
0
;
nsCOMPtr
<
nsIBaseWindow
>
docShellAsWin
(
do_QueryInterface
(
mDocShell
)
)
;
docShellAsWin
-
>
GetSize
(
&
unused
&
height
)
;
aError
=
SetDocShellWidthAndHeight
(
CSSToDevIntPixels
(
aInnerWidth
)
height
)
;
}
int32_t
nsGlobalWindowOuter
:
:
GetInnerHeightOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
CSSIntSize
size
;
aError
=
GetInnerSize
(
size
)
;
return
size
.
height
;
}
nsresult
nsGlobalWindowOuter
:
:
GetInnerHeight
(
int32_t
*
aInnerHeight
)
{
FORWARD_TO_INNER
(
GetInnerHeight
(
aInnerHeight
)
NS_ERROR_UNEXPECTED
)
;
}
void
nsGlobalWindowOuter
:
:
SetInnerHeightOuter
(
int32_t
aInnerHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
RefPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
presShell
&
&
presShell
-
>
GetIsViewportOverridden
(
)
)
{
RefPtr
<
nsPresContext
>
presContext
;
presContext
=
presShell
-
>
GetPresContext
(
)
;
nsRect
shellArea
=
presContext
-
>
GetVisibleArea
(
)
;
nscoord
height
=
aInnerHeight
;
nscoord
width
=
shellArea
.
Width
(
)
;
CheckSecurityWidthAndHeight
(
nullptr
&
height
aCallerType
)
;
SetCSSViewportWidthAndHeight
(
width
nsPresContext
:
:
CSSPixelsToAppUnits
(
height
)
)
;
return
;
}
int32_t
height
=
0
;
int32_t
width
=
0
;
nsCOMPtr
<
nsIBaseWindow
>
docShellAsWin
(
do_QueryInterface
(
mDocShell
)
)
;
docShellAsWin
-
>
GetSize
(
&
width
&
height
)
;
CheckSecurityWidthAndHeight
(
nullptr
&
aInnerHeight
aCallerType
)
;
aError
=
SetDocShellWidthAndHeight
(
width
CSSToDevIntPixels
(
aInnerHeight
)
)
;
}
nsIntSize
nsGlobalWindowOuter
:
:
GetOuterSize
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
CSSIntSize
size
;
aError
=
GetInnerSize
(
size
)
;
return
nsIntSize
(
size
.
width
size
.
height
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nsIntSize
(
0
0
)
;
}
nsIntSize
sizeDevPixels
;
aError
=
treeOwnerAsWin
-
>
GetSize
(
&
sizeDevPixels
.
width
&
sizeDevPixels
.
height
)
;
if
(
aError
.
Failed
(
)
)
{
return
nsIntSize
(
)
;
}
return
DevToCSSIntPixels
(
sizeDevPixels
)
;
}
int32_t
nsGlobalWindowOuter
:
:
GetOuterWidthOuter
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetOuterSize
(
aCallerType
aError
)
.
width
;
}
int32_t
nsGlobalWindowOuter
:
:
GetOuterHeightOuter
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetOuterSize
(
aCallerType
aError
)
.
height
;
}
void
nsGlobalWindowOuter
:
:
SetOuterSize
(
int32_t
aLengthCSSPixels
bool
aIsWidth
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
CheckSecurityWidthAndHeight
(
aIsWidth
?
&
aLengthCSSPixels
:
nullptr
aIsWidth
?
nullptr
:
&
aLengthCSSPixels
aCallerType
)
;
int32_t
width
height
;
aError
=
treeOwnerAsWin
-
>
GetSize
(
&
width
&
height
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
int32_t
lengthDevPixels
=
CSSToDevIntPixels
(
aLengthCSSPixels
)
;
if
(
aIsWidth
)
{
width
=
lengthDevPixels
;
}
else
{
height
=
lengthDevPixels
;
}
aError
=
treeOwnerAsWin
-
>
SetSize
(
width
height
true
)
;
CheckForDPIChange
(
)
;
}
void
nsGlobalWindowOuter
:
:
SetOuterWidthOuter
(
int32_t
aOuterWidth
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
SetOuterSize
(
aOuterWidth
true
aCallerType
aError
)
;
}
void
nsGlobalWindowOuter
:
:
SetOuterHeightOuter
(
int32_t
aOuterHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
SetOuterSize
(
aOuterHeight
false
aCallerType
aError
)
;
}
CSSIntPoint
nsGlobalWindowOuter
:
:
GetScreenXY
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
return
CSSIntPoint
(
0
0
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
CSSIntPoint
(
0
0
)
;
}
int32_t
x
=
0
y
=
0
;
aError
=
treeOwnerAsWin
-
>
GetPosition
(
&
x
&
y
)
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
{
return
CSSIntPoint
(
x
y
)
;
}
nsDeviceContext
*
dc
=
presContext
-
>
DeviceContext
(
)
;
nsRect
screenRect
;
dc
-
>
GetRect
(
screenRect
)
;
LayoutDeviceRect
screenRectDev
=
LayoutDevicePixel
:
:
FromAppUnits
(
screenRect
dc
-
>
AppUnitsPerDevPixel
(
)
)
;
DesktopToLayoutDeviceScale
scale
=
dc
-
>
GetDesktopToDeviceScale
(
)
;
DesktopRect
screenRectDesk
=
screenRectDev
/
scale
;
CSSPoint
cssPt
=
LayoutDevicePoint
(
x
-
screenRectDev
.
x
y
-
screenRectDev
.
y
)
/
presContext
-
>
CSSToDevPixelScale
(
)
;
cssPt
.
x
+
=
screenRectDesk
.
x
;
cssPt
.
y
+
=
screenRectDesk
.
y
;
return
CSSIntPoint
(
NSToIntRound
(
cssPt
.
x
)
NSToIntRound
(
cssPt
.
y
)
)
;
}
int32_t
nsGlobalWindowOuter
:
:
GetScreenXOuter
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetScreenXY
(
aCallerType
aError
)
.
x
;
}
nsRect
nsGlobalWindowOuter
:
:
GetInnerScreenRect
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nsRect
(
)
;
}
EnsureSizeAndPositionUpToDate
(
)
;
if
(
!
mDocShell
)
{
return
nsRect
(
)
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nsRect
(
)
;
}
nsIFrame
*
rootFrame
=
presShell
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
nsRect
(
)
;
}
return
rootFrame
-
>
GetScreenRectInAppUnits
(
)
;
}
float
nsGlobalWindowOuter
:
:
GetMozInnerScreenXOuter
(
CallerType
aCallerType
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
return
0
.
0
;
}
nsRect
r
=
GetInnerScreenRect
(
)
;
return
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
r
.
x
)
;
}
float
nsGlobalWindowOuter
:
:
GetMozInnerScreenYOuter
(
CallerType
aCallerType
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
return
0
.
0
;
}
nsRect
r
=
GetInnerScreenRect
(
)
;
return
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
r
.
y
)
;
}
double
nsGlobalWindowOuter
:
:
GetDevicePixelRatioOuter
(
CallerType
aCallerType
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
1
.
0
;
}
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
!
presContext
)
{
return
1
.
0
;
}
if
(
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
)
{
return
1
.
0
;
}
float
overrideDPPX
=
presContext
-
>
GetOverrideDPPX
(
)
;
if
(
overrideDPPX
>
0
)
{
return
overrideDPPX
;
}
return
double
(
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
/
double
(
presContext
-
>
AppUnitsPerDevPixel
(
)
)
;
}
float
nsPIDOMWindowOuter
:
:
GetDevicePixelRatio
(
CallerType
aCallerType
)
{
return
nsGlobalWindowOuter
:
:
Cast
(
this
)
-
>
GetDevicePixelRatioOuter
(
aCallerType
)
;
}
uint64_t
nsGlobalWindowOuter
:
:
GetMozPaintCountOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
0
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
return
presShell
?
presShell
-
>
GetPaintCount
(
)
:
0
;
}
already_AddRefed
<
MediaQueryList
>
nsGlobalWindowOuter
:
:
MatchMediaOuter
(
const
nsAString
&
aMediaQueryList
CallerType
aCallerType
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDoc
)
{
return
nullptr
;
}
return
mDoc
-
>
MatchMedia
(
aMediaQueryList
aCallerType
)
;
}
void
nsGlobalWindowOuter
:
:
SetScreenXOuter
(
int32_t
aScreenX
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
int32_t
x
y
;
aError
=
treeOwnerAsWin
-
>
GetPosition
(
&
x
&
y
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
CheckSecurityLeftAndTop
(
&
aScreenX
nullptr
aCallerType
)
;
x
=
CSSToDevIntPixels
(
aScreenX
)
;
aError
=
treeOwnerAsWin
-
>
SetPosition
(
x
y
)
;
CheckForDPIChange
(
)
;
}
int32_t
nsGlobalWindowOuter
:
:
GetScreenYOuter
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetScreenXY
(
aCallerType
aError
)
.
y
;
}
void
nsGlobalWindowOuter
:
:
SetScreenYOuter
(
int32_t
aScreenY
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
int32_t
x
y
;
aError
=
treeOwnerAsWin
-
>
GetPosition
(
&
x
&
y
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
CheckSecurityLeftAndTop
(
nullptr
&
aScreenY
aCallerType
)
;
y
=
CSSToDevIntPixels
(
aScreenY
)
;
aError
=
treeOwnerAsWin
-
>
SetPosition
(
x
y
)
;
CheckForDPIChange
(
)
;
}
void
nsGlobalWindowOuter
:
:
CheckSecurityWidthAndHeight
(
int32_t
*
aWidth
int32_t
*
aHeight
CallerType
aCallerType
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
#
ifdef
MOZ_XUL
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
nsContentUtils
:
:
HidePopupsInDocument
(
mDoc
)
;
}
#
endif
if
(
(
aWidth
&
&
*
aWidth
<
100
)
|
|
(
aHeight
&
&
*
aHeight
<
100
)
)
{
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
if
(
aWidth
&
&
*
aWidth
<
100
)
{
*
aWidth
=
100
;
}
if
(
aHeight
&
&
*
aHeight
<
100
)
{
*
aHeight
=
100
;
}
}
}
}
nsresult
nsGlobalWindowOuter
:
:
SetDocShellWidthAndHeight
(
int32_t
aInnerWidth
int32_t
aInnerHeight
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
mDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
NS_ENSURE_TRUE
(
treeOwner
NS_ERROR_FAILURE
)
;
NS_ENSURE_SUCCESS
(
treeOwner
-
>
SizeShellTo
(
mDocShell
aInnerWidth
aInnerHeight
)
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
SetCSSViewportWidthAndHeight
(
nscoord
aInnerWidth
nscoord
aInnerHeight
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
nsRect
shellArea
=
presContext
-
>
GetVisibleArea
(
)
;
shellArea
.
SetHeight
(
aInnerHeight
)
;
shellArea
.
SetWidth
(
aInnerWidth
)
;
presContext
-
>
SetVisibleArea
(
shellArea
)
;
}
void
nsGlobalWindowOuter
:
:
CheckSecurityLeftAndTop
(
int32_t
*
aLeft
int32_t
*
aTop
CallerType
aCallerType
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
#
ifdef
MOZ_XUL
nsContentUtils
:
:
HidePopupsInDocument
(
mDoc
)
;
#
endif
if
(
nsGlobalWindowOuter
*
rootWindow
=
nsGlobalWindowOuter
:
:
Cast
(
GetPrivateRoot
(
)
)
)
{
rootWindow
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwner
=
GetTreeOwnerWindow
(
)
;
nsCOMPtr
<
nsIDOMScreen
>
screen
=
GetScreen
(
)
;
if
(
treeOwner
&
&
screen
)
{
int32_t
screenLeft
screenTop
screenWidth
screenHeight
;
int32_t
winLeft
winTop
winWidth
winHeight
;
treeOwner
-
>
GetPositionAndSize
(
&
winLeft
&
winTop
&
winWidth
&
winHeight
)
;
winLeft
=
DevToCSSIntPixels
(
winLeft
)
;
winTop
=
DevToCSSIntPixels
(
winTop
)
;
winWidth
=
DevToCSSIntPixels
(
winWidth
)
;
winHeight
=
DevToCSSIntPixels
(
winHeight
)
;
screen
-
>
GetAvailLeft
(
&
screenLeft
)
;
screen
-
>
GetAvailWidth
(
&
screenWidth
)
;
screen
-
>
GetAvailHeight
(
&
screenHeight
)
;
#
if
defined
(
XP_MACOSX
)
screen
-
>
GetTop
(
&
screenTop
)
;
#
else
screen
-
>
GetAvailTop
(
&
screenTop
)
;
#
endif
if
(
aLeft
)
{
if
(
screenLeft
+
screenWidth
<
*
aLeft
+
winWidth
)
*
aLeft
=
screenLeft
+
screenWidth
-
winWidth
;
if
(
screenLeft
>
*
aLeft
)
*
aLeft
=
screenLeft
;
}
if
(
aTop
)
{
if
(
screenTop
+
screenHeight
<
*
aTop
+
winHeight
)
*
aTop
=
screenTop
+
screenHeight
-
winHeight
;
if
(
screenTop
>
*
aTop
)
*
aTop
=
screenTop
;
}
}
else
{
if
(
aLeft
)
*
aLeft
=
0
;
if
(
aTop
)
*
aTop
=
0
;
}
}
}
int32_t
nsGlobalWindowOuter
:
:
GetScrollBoundaryOuter
(
Side
aSide
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
if
(
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
)
{
return
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
sf
-
>
GetScrollRange
(
)
.
Edge
(
aSide
)
)
;
}
return
0
;
}
CSSPoint
nsGlobalWindowOuter
:
:
GetScrollXY
(
bool
aDoFlush
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
aDoFlush
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
else
{
EnsureSizeAndPositionUpToDate
(
)
;
}
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
!
sf
)
{
return
CSSIntPoint
(
0
0
)
;
}
nsPoint
scrollPos
=
sf
-
>
GetScrollPosition
(
)
;
if
(
scrollPos
!
=
nsPoint
(
0
0
)
&
&
!
aDoFlush
)
{
return
GetScrollXY
(
true
)
;
}
return
CSSPoint
:
:
FromAppUnits
(
scrollPos
)
;
}
double
nsGlobalWindowOuter
:
:
GetScrollXOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetScrollXY
(
false
)
.
x
;
}
double
nsGlobalWindowOuter
:
:
GetScrollYOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
GetScrollXY
(
false
)
.
y
;
}
uint32_t
nsGlobalWindowOuter
:
:
Length
(
)
{
nsDOMWindowList
*
windows
=
GetWindowList
(
)
;
return
windows
?
windows
-
>
GetLength
(
)
:
0
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetTopOuter
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
top
=
GetScriptableTop
(
)
;
return
top
.
forget
(
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetChildWindow
(
const
nsAString
&
aName
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
GetDocShell
(
)
)
;
NS_ENSURE_TRUE
(
docShell
nullptr
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
child
;
docShell
-
>
FindChildWithName
(
aName
false
true
nullptr
nullptr
getter_AddRefs
(
child
)
)
;
return
child
?
child
-
>
GetWindow
(
)
:
nullptr
;
}
bool
nsGlobalWindowOuter
:
:
DispatchCustomEvent
(
const
nsAString
&
aEventName
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
bool
defaultActionEnabled
=
true
;
nsContentUtils
:
:
DispatchTrustedEvent
(
mDoc
ToSupports
(
this
)
aEventName
true
true
&
defaultActionEnabled
)
;
return
defaultActionEnabled
;
}
bool
nsGlobalWindowOuter
:
:
DispatchResizeEvent
(
const
CSSIntSize
&
aSize
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
ErrorResult
res
;
RefPtr
<
Event
>
domEvent
=
mDoc
-
>
CreateEvent
(
NS_LITERAL_STRING
(
"
CustomEvent
"
)
CallerType
:
:
System
res
)
;
if
(
res
.
Failed
(
)
)
{
return
false
;
}
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JSAutoCompartment
ac
(
cx
GetWrapperPreserveColor
(
)
)
;
DOMWindowResizeEventDetail
detail
;
detail
.
mWidth
=
aSize
.
width
;
detail
.
mHeight
=
aSize
.
height
;
JS
:
:
Rooted
<
JS
:
:
Value
>
detailValue
(
cx
)
;
if
(
!
ToJSValue
(
cx
detail
&
detailValue
)
)
{
return
false
;
}
CustomEvent
*
customEvent
=
static_cast
<
CustomEvent
*
>
(
domEvent
.
get
(
)
)
;
customEvent
-
>
InitCustomEvent
(
cx
NS_LITERAL_STRING
(
"
DOMWindowResize
"
)
true
true
detailValue
res
)
;
if
(
res
.
Failed
(
)
)
{
return
false
;
}
domEvent
-
>
SetTrusted
(
true
)
;
domEvent
-
>
WidgetEventPtr
(
)
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
nsCOMPtr
<
EventTarget
>
target
=
do_QueryInterface
(
GetOuterWindow
(
)
)
;
domEvent
-
>
SetTarget
(
target
)
;
bool
defaultActionEnabled
=
true
;
target
-
>
DispatchEvent
(
domEvent
&
defaultActionEnabled
)
;
return
defaultActionEnabled
;
}
static
already_AddRefed
<
nsIDocShellTreeItem
>
GetCallerDocShellTreeItem
(
)
{
nsCOMPtr
<
nsIWebNavigation
>
callerWebNav
=
do_GetInterface
(
GetEntryGlobal
(
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
callerItem
=
do_QueryInterface
(
callerWebNav
)
;
return
callerItem
.
forget
(
)
;
}
bool
nsGlobalWindowOuter
:
:
WindowExists
(
const
nsAString
&
aName
bool
aForceNoOpener
bool
aLookForCallerOnJSStack
)
{
NS_PRECONDITION
(
IsOuterWindow
(
)
"
Must
be
outer
window
"
)
;
NS_PRECONDITION
(
mDocShell
"
Must
have
docshell
"
)
;
if
(
aForceNoOpener
)
{
return
aName
.
LowerCaseEqualsLiteral
(
"
_self
"
)
|
|
aName
.
LowerCaseEqualsLiteral
(
"
_top
"
)
|
|
aName
.
LowerCaseEqualsLiteral
(
"
_parent
"
)
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
caller
;
if
(
aLookForCallerOnJSStack
)
{
caller
=
GetCallerDocShellTreeItem
(
)
;
}
if
(
!
caller
)
{
caller
=
mDocShell
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
namedItem
;
mDocShell
-
>
FindItemWithName
(
aName
nullptr
caller
false
getter_AddRefs
(
namedItem
)
)
;
return
namedItem
!
=
nullptr
;
}
already_AddRefed
<
nsIWidget
>
nsGlobalWindowOuter
:
:
GetMainWidget
(
)
{
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
;
if
(
treeOwnerAsWin
)
{
treeOwnerAsWin
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
}
return
widget
.
forget
(
)
;
}
nsIWidget
*
nsGlobalWindowOuter
:
:
GetNearestWidget
(
)
const
{
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
NS_ENSURE_TRUE
(
docShell
nullptr
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
docShell
-
>
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
presShell
nullptr
)
;
nsIFrame
*
rootFrame
=
presShell
-
>
GetRootFrame
(
)
;
NS_ENSURE_TRUE
(
rootFrame
nullptr
)
;
return
rootFrame
-
>
GetView
(
)
-
>
GetNearestWidget
(
nullptr
)
;
}
void
nsGlobalWindowOuter
:
:
SetFullScreenOuter
(
bool
aFullScreen
mozilla
:
:
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
aError
=
SetFullscreenInternal
(
FullscreenReason
:
:
ForFullscreenMode
aFullScreen
)
;
}
nsresult
nsGlobalWindowOuter
:
:
SetFullScreen
(
bool
aFullScreen
)
{
return
SetFullscreenInternal
(
FullscreenReason
:
:
ForFullscreenMode
aFullScreen
)
;
}
static
void
FinishDOMFullscreenChange
(
nsIDocument
*
aDoc
bool
aInDOMFullscreen
)
{
if
(
aInDOMFullscreen
)
{
if
(
!
nsIDocument
:
:
HandlePendingFullscreenRequests
(
aDoc
)
)
{
nsIDocument
:
:
AsyncExitFullscreen
(
aDoc
)
;
}
}
else
{
nsIDocument
:
:
ExitFullscreenInDocTree
(
aDoc
)
;
}
}
struct
FullscreenTransitionDuration
{
uint16_t
mFadeIn
=
0
;
uint16_t
mFadeOut
=
0
;
bool
IsSuppressed
(
)
const
{
return
mFadeIn
=
=
0
&
&
mFadeOut
=
=
0
;
}
}
;
static
void
GetFullscreenTransitionDuration
(
bool
aEnterFullscreen
FullscreenTransitionDuration
*
aDuration
)
{
const
char
*
pref
=
aEnterFullscreen
?
"
full
-
screen
-
api
.
transition
-
duration
.
enter
"
:
"
full
-
screen
-
api
.
transition
-
duration
.
leave
"
;
nsAutoCString
prefValue
;
Preferences
:
:
GetCString
(
pref
prefValue
)
;
if
(
!
prefValue
.
IsEmpty
(
)
)
{
sscanf
(
prefValue
.
get
(
)
"
%
hu
%
hu
"
&
aDuration
-
>
mFadeIn
&
aDuration
-
>
mFadeOut
)
;
}
}
class
FullscreenTransitionTask
:
public
Runnable
{
public
:
FullscreenTransitionTask
(
const
FullscreenTransitionDuration
&
aDuration
nsGlobalWindowOuter
*
aWindow
bool
aFullscreen
nsIWidget
*
aWidget
nsIScreen
*
aScreen
nsISupports
*
aTransitionData
)
:
mozilla
:
:
Runnable
(
"
FullscreenTransitionTask
"
)
mWindow
(
aWindow
)
mWidget
(
aWidget
)
mScreen
(
aScreen
)
mTransitionData
(
aTransitionData
)
mDuration
(
aDuration
)
mStage
(
eBeforeToggle
)
mFullscreen
(
aFullscreen
)
{
}
NS_IMETHOD
Run
(
)
override
;
private
:
~
FullscreenTransitionTask
(
)
override
{
}
enum
Stage
{
eBeforeToggle
eToggleFullscreen
eAfterToggle
eEnd
}
;
class
Observer
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
explicit
Observer
(
FullscreenTransitionTask
*
aTask
)
:
mTask
(
aTask
)
{
}
private
:
~
Observer
(
)
=
default
;
RefPtr
<
FullscreenTransitionTask
>
mTask
;
}
;
static
const
char
*
const
kPaintedTopic
;
RefPtr
<
nsGlobalWindowOuter
>
mWindow
;
nsCOMPtr
<
nsIWidget
>
mWidget
;
nsCOMPtr
<
nsIScreen
>
mScreen
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsCOMPtr
<
nsISupports
>
mTransitionData
;
TimeStamp
mFullscreenChangeStartTime
;
FullscreenTransitionDuration
mDuration
;
Stage
mStage
;
bool
mFullscreen
;
}
;
const
char
*
const
FullscreenTransitionTask
:
:
kPaintedTopic
=
"
fullscreen
-
painted
"
;
NS_IMETHODIMP
FullscreenTransitionTask
:
:
Run
(
)
{
Stage
stage
=
mStage
;
mStage
=
Stage
(
mStage
+
1
)
;
if
(
MOZ_UNLIKELY
(
mWidget
-
>
Destroyed
(
)
)
)
{
NS_WARNING
(
"
The
widget
to
fullscreen
has
been
destroyed
"
)
;
return
NS_OK
;
}
if
(
stage
=
=
eBeforeToggle
)
{
PROFILER_ADD_MARKER
(
"
Fullscreen
transition
start
"
)
;
mWidget
-
>
PerformFullscreenTransition
(
nsIWidget
:
:
eBeforeFullscreenToggle
mDuration
.
mFadeIn
mTransitionData
this
)
;
}
else
if
(
stage
=
=
eToggleFullscreen
)
{
PROFILER_ADD_MARKER
(
"
Fullscreen
toggle
start
"
)
;
mFullscreenChangeStartTime
=
TimeStamp
:
:
Now
(
)
;
if
(
MOZ_UNLIKELY
(
mWindow
-
>
mFullScreen
!
=
mFullscreen
)
)
{
NS_WARNING
(
"
The
fullscreen
state
of
the
window
does
not
match
"
)
;
mWindow
-
>
mFullScreen
=
mFullscreen
;
}
if
(
!
mWindow
-
>
SetWidgetFullscreen
(
FullscreenReason
:
:
ForFullscreenAPI
mFullscreen
mWidget
mScreen
)
)
{
mWindow
-
>
FinishFullscreenChange
(
mFullscreen
)
;
}
nsCOMPtr
<
nsIObserver
>
observer
=
new
Observer
(
this
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
AddObserver
(
observer
kPaintedTopic
false
)
;
uint32_t
timeout
=
Preferences
:
:
GetUint
(
"
full
-
screen
-
api
.
transition
.
timeout
"
1000
)
;
NS_NewTimerWithObserver
(
getter_AddRefs
(
mTimer
)
observer
timeout
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
else
if
(
stage
=
=
eAfterToggle
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
FULLSCREEN_TRANSITION_BLACK_MS
mFullscreenChangeStartTime
)
;
mWidget
-
>
PerformFullscreenTransition
(
nsIWidget
:
:
eAfterFullscreenToggle
mDuration
.
mFadeOut
mTransitionData
this
)
;
}
else
if
(
stage
=
=
eEnd
)
{
PROFILER_ADD_MARKER
(
"
Fullscreen
transition
end
"
)
;
}
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
FullscreenTransitionTask
:
:
Observer
nsIObserver
)
NS_IMETHODIMP
FullscreenTransitionTask
:
:
Observer
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
bool
shouldContinue
=
false
;
if
(
strcmp
(
aTopic
FullscreenTransitionTask
:
:
kPaintedTopic
)
=
=
0
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
win
(
do_QueryInterface
(
aSubject
)
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
win
?
nsGlobalWindowInner
:
:
Cast
(
win
)
-
>
GetMainWidget
(
)
:
nullptr
;
if
(
widget
=
=
mTask
-
>
mWidget
)
{
mTask
-
>
mTimer
-
>
Cancel
(
)
;
shouldContinue
=
true
;
PROFILER_ADD_MARKER
(
"
Fullscreen
toggle
end
"
)
;
}
}
else
{
#
ifdef
DEBUG
MOZ_ASSERT
(
strcmp
(
aTopic
NS_TIMER_CALLBACK_TOPIC
)
=
=
0
"
Should
only
get
fullscreen
-
painted
or
timer
-
callback
"
)
;
nsCOMPtr
<
nsITimer
>
timer
(
do_QueryInterface
(
aSubject
)
)
;
MOZ_ASSERT
(
timer
&
&
timer
=
=
mTask
-
>
mTimer
"
Should
only
trigger
this
with
the
timer
the
task
created
"
)
;
#
endif
shouldContinue
=
true
;
PROFILER_ADD_MARKER
(
"
Fullscreen
toggle
timeout
"
)
;
}
if
(
shouldContinue
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
RemoveObserver
(
this
kPaintedTopic
)
;
mTask
-
>
mTimer
=
nullptr
;
mTask
-
>
Run
(
)
;
}
return
NS_OK
;
}
static
bool
MakeWidgetFullscreen
(
nsGlobalWindowOuter
*
aWindow
FullscreenReason
aReason
bool
aFullscreen
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
aWindow
-
>
GetMainWidget
(
)
;
if
(
!
widget
)
{
return
false
;
}
FullscreenTransitionDuration
duration
;
bool
performTransition
=
false
;
nsCOMPtr
<
nsISupports
>
transitionData
;
if
(
aReason
=
=
FullscreenReason
:
:
ForFullscreenAPI
)
{
GetFullscreenTransitionDuration
(
aFullscreen
&
duration
)
;
if
(
!
duration
.
IsSuppressed
(
)
)
{
performTransition
=
widget
-
>
PrepareForFullscreenTransition
(
getter_AddRefs
(
transitionData
)
)
;
}
}
if
(
!
performTransition
)
{
return
aWindow
-
>
SetWidgetFullscreen
(
aReason
aFullscreen
widget
nullptr
)
;
}
nsCOMPtr
<
nsIRunnable
>
task
=
new
FullscreenTransitionTask
(
duration
aWindow
aFullscreen
widget
nullptr
transitionData
)
;
task
-
>
Run
(
)
;
return
true
;
}
nsresult
nsGlobalWindowOuter
:
:
SetFullscreenInternal
(
FullscreenReason
aReason
bool
aFullScreen
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Requires
safe
to
run
script
as
it
"
"
may
call
FinishDOMFullscreenChange
"
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
MOZ_ASSERT
(
aReason
!
=
FullscreenReason
:
:
ForForceExitFullscreen
|
|
!
aFullScreen
"
FullscreenReason
:
:
ForForceExitFullscreen
can
"
"
only
be
used
with
exiting
fullscreen
"
)
;
if
(
aReason
=
=
FullscreenReason
:
:
ForFullscreenMode
&
&
!
nsContentUtils
:
:
LegacyIsCallerChromeOrNativeCode
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
mDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
rootItem
?
rootItem
-
>
GetWindow
(
)
:
nullptr
;
if
(
!
window
)
return
NS_ERROR_FAILURE
;
if
(
rootItem
!
=
mDocShell
)
return
window
-
>
SetFullscreenInternal
(
aReason
aFullScreen
)
;
if
(
mDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
return
NS_ERROR_FAILURE
;
if
(
mFullScreen
=
=
aFullScreen
)
return
NS_OK
;
if
(
aReason
=
=
FullscreenReason
:
:
ForFullscreenMode
)
{
if
(
!
aFullScreen
&
&
!
mFullscreenMode
)
{
aReason
=
FullscreenReason
:
:
ForFullscreenAPI
;
}
else
{
mFullscreenMode
=
aFullScreen
;
}
}
else
{
if
(
!
aFullScreen
&
&
mFullscreenMode
)
{
FinishDOMFullscreenChange
(
mDoc
false
)
;
return
NS_OK
;
}
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
nsCOMPtr
<
nsIXULWindow
>
xulWin
(
do_GetInterface
(
treeOwnerAsWin
)
)
;
if
(
aFullScreen
&
&
xulWin
)
{
xulWin
-
>
SetIntrinsicallySized
(
false
)
;
}
mFullScreen
=
aFullScreen
;
if
(
!
Preferences
:
:
GetBool
(
"
full
-
screen
-
api
.
ignore
-
widgets
"
false
)
)
{
if
(
MakeWidgetFullscreen
(
this
aReason
aFullScreen
)
)
{
return
NS_OK
;
}
}
FinishFullscreenChange
(
aFullScreen
)
;
return
NS_OK
;
}
bool
nsGlobalWindowOuter
:
:
SetWidgetFullscreen
(
FullscreenReason
aReason
bool
aIsFullscreen
nsIWidget
*
aWidget
nsIScreen
*
aScreen
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
this
=
=
GetTopInternal
(
)
"
Only
topmost
window
should
call
this
"
)
;
MOZ_ASSERT
(
!
GetFrameElementInternal
(
)
"
Content
window
should
not
call
this
"
)
;
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Default
)
;
if
(
!
NS_WARN_IF
(
!
IsChromeWindow
(
)
)
)
{
if
(
!
NS_WARN_IF
(
mChromeFields
.
mFullscreenPresShell
)
)
{
if
(
nsIPresShell
*
shell
=
mDocShell
-
>
GetPresShell
(
)
)
{
if
(
nsRefreshDriver
*
rd
=
shell
-
>
GetRefreshDriver
(
)
)
{
mChromeFields
.
mFullscreenPresShell
=
do_GetWeakReference
(
shell
)
;
MOZ_ASSERT
(
mChromeFields
.
mFullscreenPresShell
)
;
rd
-
>
SetIsResizeSuppressed
(
)
;
rd
-
>
Freeze
(
)
;
}
}
}
}
nsresult
rv
=
aReason
=
=
FullscreenReason
:
:
ForFullscreenMode
?
aWidget
-
>
MakeFullScreenWithNativeTransition
(
aIsFullscreen
aScreen
)
:
aWidget
-
>
MakeFullScreen
(
aIsFullscreen
aScreen
)
;
return
NS_SUCCEEDED
(
rv
)
;
}
void
nsGlobalWindowOuter
:
:
FullscreenWillChange
(
bool
aIsFullscreen
)
{
if
(
aIsFullscreen
)
{
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
willenterfullscreen
"
)
)
;
}
else
{
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
willexitfullscreen
"
)
)
;
}
}
void
nsGlobalWindowOuter
:
:
FinishFullscreenChange
(
bool
aIsFullscreen
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
aIsFullscreen
!
=
mFullScreen
)
{
NS_WARNING
(
"
Failed
to
toggle
fullscreen
state
of
the
widget
"
)
;
if
(
!
aIsFullscreen
)
{
mFullScreen
=
false
;
mFullscreenMode
=
false
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Failed
to
exit
fullscreen
?
"
)
;
mFullScreen
=
true
;
mFullscreenMode
=
false
;
}
return
;
}
FinishDOMFullscreenChange
(
mDoc
mFullScreen
)
;
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
fullscreen
"
)
)
;
if
(
!
NS_WARN_IF
(
!
IsChromeWindow
(
)
)
)
{
if
(
nsCOMPtr
<
nsIPresShell
>
shell
=
do_QueryReferent
(
mChromeFields
.
mFullscreenPresShell
)
)
{
if
(
nsRefreshDriver
*
rd
=
shell
-
>
GetRefreshDriver
(
)
)
{
rd
-
>
Thaw
(
)
;
}
mChromeFields
.
mFullscreenPresShell
=
nullptr
;
}
}
if
(
!
mWakeLock
&
&
mFullScreen
)
{
RefPtr
<
power
:
:
PowerManagerService
>
pmService
=
power
:
:
PowerManagerService
:
:
GetInstance
(
)
;
if
(
!
pmService
)
{
return
;
}
ErrorResult
rv
;
mWakeLock
=
pmService
-
>
NewWakeLock
(
NS_LITERAL_STRING
(
"
DOM_Fullscreen
"
)
GetCurrentInnerWindow
(
)
rv
)
;
NS_WARNING_ASSERTION
(
!
rv
.
Failed
(
)
"
Failed
to
lock
the
wakelock
"
)
;
rv
.
SuppressException
(
)
;
}
else
if
(
mWakeLock
&
&
!
mFullScreen
)
{
ErrorResult
rv
;
mWakeLock
-
>
Unlock
(
rv
)
;
mWakeLock
=
nullptr
;
rv
.
SuppressException
(
)
;
}
}
bool
nsGlobalWindowOuter
:
:
FullScreen
(
)
const
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
NS_ENSURE_TRUE
(
mDocShell
mFullScreen
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
mDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
if
(
rootItem
=
=
mDocShell
)
{
if
(
!
XRE_IsContentProcess
(
)
)
{
return
mFullScreen
;
}
if
(
nsCOMPtr
<
nsIWidget
>
widget
=
GetNearestWidget
(
)
)
{
return
widget
-
>
SizeMode
(
)
=
=
nsSizeMode_Fullscreen
;
}
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
rootItem
-
>
GetWindow
(
)
;
NS_ENSURE_TRUE
(
window
mFullScreen
)
;
return
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
FullScreen
(
)
;
}
bool
nsGlobalWindowOuter
:
:
GetFullScreenOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
FullScreen
(
)
;
}
bool
nsGlobalWindowOuter
:
:
GetFullScreen
(
)
{
FORWARD_TO_INNER
(
GetFullScreen
(
)
false
)
;
}
void
nsGlobalWindowOuter
:
:
EnsureReflowFlushAndPaint
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
NS_ASSERTION
(
mDocShell
"
EnsureReflowFlushAndPaint
(
)
called
with
no
"
"
docshell
!
"
)
;
if
(
!
mDocShell
)
return
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
return
;
if
(
mDoc
)
{
mDoc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
presShell
-
>
UnsuppressPainting
(
)
;
}
void
nsGlobalWindowOuter
:
:
MakeScriptDialogTitle
(
nsAString
&
aOutTitle
nsIPrincipal
*
aSubjectPrincipal
)
{
MOZ_ASSERT
(
aSubjectPrincipal
)
;
aOutTitle
.
Truncate
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aSubjectPrincipal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
uri
&
&
nsContentUtils
:
:
GetCurrentJSContext
(
)
)
{
nsCOMPtr
<
nsIURIFixup
>
fixup
(
do_GetService
(
NS_URIFIXUP_CONTRACTID
)
)
;
if
(
fixup
)
{
nsCOMPtr
<
nsIURI
>
fixedURI
;
rv
=
fixup
-
>
CreateExposableURI
(
uri
getter_AddRefs
(
fixedURI
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
fixedURI
)
{
nsAutoCString
host
;
fixedURI
-
>
GetHost
(
host
)
;
if
(
!
host
.
IsEmpty
(
)
)
{
nsAutoCString
prepath
;
fixedURI
-
>
GetDisplayPrePath
(
prepath
)
;
NS_ConvertUTF8toUTF16
ucsPrePath
(
prepath
)
;
const
char16_t
*
formatStrings
[
]
=
{
ucsPrePath
.
get
(
)
}
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDlgHeading
"
formatStrings
aOutTitle
)
;
}
}
}
}
if
(
aOutTitle
.
IsEmpty
(
)
)
{
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDlgGenericHeading
"
aOutTitle
)
;
}
if
(
aOutTitle
.
IsEmpty
(
)
)
{
NS_WARNING
(
"
could
not
get
ScriptDlgGenericHeading
string
from
string
bundle
"
)
;
aOutTitle
.
AssignLiteral
(
"
[
Script
]
"
)
;
}
}
bool
nsGlobalWindowOuter
:
:
CanMoveResizeWindows
(
CallerType
aCallerType
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
if
(
!
mHadOriginalOpener
)
{
return
false
;
}
if
(
!
CanSetProperty
(
"
dom
.
disable_window_move_resize
"
)
)
{
return
false
;
}
uint32_t
itemCount
=
0
;
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
;
if
(
docShell
)
{
nsCOMPtr
<
nsITabChild
>
child
=
docShell
-
>
GetTabChild
(
)
;
if
(
child
)
{
child
-
>
SendGetTabCount
(
&
itemCount
)
;
}
}
}
else
{
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
if
(
!
treeOwner
|
|
NS_FAILED
(
treeOwner
-
>
GetTabCount
(
&
itemCount
)
)
)
{
itemCount
=
0
;
}
}
if
(
itemCount
>
1
)
{
return
false
;
}
}
if
(
mDocShell
)
{
bool
allow
;
nsresult
rv
=
mDocShell
-
>
GetAllowWindowControl
(
&
allow
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
allow
)
return
false
;
}
if
(
gMouseDown
&
&
!
gDragServiceDisabled
)
{
nsCOMPtr
<
nsIDragService
>
ds
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
ds
)
{
gDragServiceDisabled
=
true
;
ds
-
>
Suppress
(
)
;
}
}
return
true
;
}
bool
nsGlobalWindowOuter
:
:
AlertOrConfirm
(
bool
aAlert
const
nsAString
&
aMessage
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
AreDialogsEnabled
(
)
)
{
return
false
;
}
nsAutoPopupStatePusher
popupStatePusher
(
openAbused
true
)
;
EnsureReflowFlushAndPaint
(
)
;
nsAutoString
title
;
MakeScriptDialogTitle
(
title
&
aSubjectPrincipal
)
;
nsAutoString
final
;
nsContentUtils
:
:
StripNullChars
(
aMessage
final
)
;
nsresult
rv
;
nsCOMPtr
<
nsIPromptFactory
>
promptFac
=
do_GetService
(
"
mozilla
.
org
/
prompter
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
false
;
}
nsCOMPtr
<
nsIPrompt
>
prompt
;
aError
=
promptFac
-
>
GetPrompt
(
this
NS_GET_IID
(
nsIPrompt
)
getter_AddRefs
(
prompt
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
false
;
}
if
(
nsCOMPtr
<
nsIWritablePropertyBag2
>
promptBag
=
do_QueryInterface
(
prompt
)
)
{
promptBag
-
>
SetPropertyAsBool
(
NS_LITERAL_STRING
(
"
allowTabModal
"
)
true
)
;
}
bool
result
=
false
;
nsAutoSyncOperation
sync
(
mDoc
)
;
if
(
ShouldPromptToBlockDialogs
(
)
)
{
bool
disallowDialog
=
false
;
nsAutoString
label
;
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDialogLabel
"
label
)
;
aError
=
aAlert
?
prompt
-
>
AlertCheck
(
title
.
get
(
)
final
.
get
(
)
label
.
get
(
)
&
disallowDialog
)
:
prompt
-
>
ConfirmCheck
(
title
.
get
(
)
final
.
get
(
)
label
.
get
(
)
&
disallowDialog
&
result
)
;
if
(
disallowDialog
)
DisableDialogs
(
)
;
}
else
{
aError
=
aAlert
?
prompt
-
>
Alert
(
title
.
get
(
)
final
.
get
(
)
)
:
prompt
-
>
Confirm
(
title
.
get
(
)
final
.
get
(
)
&
result
)
;
}
return
result
;
}
void
nsGlobalWindowOuter
:
:
AlertOuter
(
const
nsAString
&
aMessage
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
AlertOrConfirm
(
true
aMessage
aSubjectPrincipal
aError
)
;
}
bool
nsGlobalWindowOuter
:
:
ConfirmOuter
(
const
nsAString
&
aMessage
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
return
AlertOrConfirm
(
false
aMessage
aSubjectPrincipal
aError
)
;
}
void
nsGlobalWindowOuter
:
:
PromptOuter
(
const
nsAString
&
aMessage
const
nsAString
&
aInitial
nsAString
&
aReturn
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
SetDOMStringToNull
(
aReturn
)
;
if
(
!
AreDialogsEnabled
(
)
)
{
return
;
}
nsAutoPopupStatePusher
popupStatePusher
(
openAbused
true
)
;
EnsureReflowFlushAndPaint
(
)
;
nsAutoString
title
;
MakeScriptDialogTitle
(
title
&
aSubjectPrincipal
)
;
nsAutoString
fixedMessage
fixedInitial
;
nsContentUtils
:
:
StripNullChars
(
aMessage
fixedMessage
)
;
nsContentUtils
:
:
StripNullChars
(
aInitial
fixedInitial
)
;
nsresult
rv
;
nsCOMPtr
<
nsIPromptFactory
>
promptFac
=
do_GetService
(
"
mozilla
.
org
/
prompter
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
;
}
nsCOMPtr
<
nsIPrompt
>
prompt
;
aError
=
promptFac
-
>
GetPrompt
(
this
NS_GET_IID
(
nsIPrompt
)
getter_AddRefs
(
prompt
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
if
(
nsCOMPtr
<
nsIWritablePropertyBag2
>
promptBag
=
do_QueryInterface
(
prompt
)
)
{
promptBag
-
>
SetPropertyAsBool
(
NS_LITERAL_STRING
(
"
allowTabModal
"
)
true
)
;
}
char16_t
*
inoutValue
=
ToNewUnicode
(
fixedInitial
)
;
bool
disallowDialog
=
false
;
nsAutoString
label
;
label
.
SetIsVoid
(
true
)
;
if
(
ShouldPromptToBlockDialogs
(
)
)
{
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eCOMMON_DIALOG_PROPERTIES
"
ScriptDialogLabel
"
label
)
;
}
nsAutoSyncOperation
sync
(
mDoc
)
;
bool
ok
;
aError
=
prompt
-
>
Prompt
(
title
.
get
(
)
fixedMessage
.
get
(
)
&
inoutValue
label
.
IsVoid
(
)
?
nullptr
:
label
.
get
(
)
&
disallowDialog
&
ok
)
;
if
(
disallowDialog
)
{
DisableDialogs
(
)
;
}
if
(
aError
.
Failed
(
)
)
{
return
;
}
nsString
outValue
;
outValue
.
Adopt
(
inoutValue
)
;
if
(
ok
&
&
inoutValue
)
{
aReturn
.
Assign
(
outValue
)
;
}
}
void
nsGlobalWindowOuter
:
:
FocusOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
;
}
nsCOMPtr
<
nsIBaseWindow
>
baseWin
=
do_QueryInterface
(
mDocShell
)
;
bool
isVisible
=
false
;
if
(
baseWin
)
{
baseWin
-
>
GetVisibility
(
&
isVisible
)
;
}
if
(
!
isVisible
)
{
return
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
caller
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
nsPIDOMWindowOuter
*
callerOuter
=
caller
?
caller
-
>
GetOuterWindow
(
)
:
nullptr
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
opener
=
GetOpener
(
)
;
bool
canFocus
=
CanSetProperty
(
"
dom
.
disable_window_flip
"
)
|
|
(
opener
=
=
callerOuter
&
&
RevisePopupAbuseLevel
(
gPopupControlState
)
<
openBlocked
)
;
nsCOMPtr
<
mozIDOMWindowProxy
>
activeDOMWindow
;
fm
-
>
GetActiveWindow
(
getter_AddRefs
(
activeDOMWindow
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
mDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWin
=
rootItem
?
rootItem
-
>
GetWindow
(
)
:
nullptr
;
auto
*
activeWindow
=
nsPIDOMWindowOuter
:
:
From
(
activeDOMWindow
)
;
bool
isActive
=
(
rootWin
=
=
activeWindow
)
;
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
treeOwnerAsWin
&
&
(
canFocus
|
|
isActive
)
)
{
bool
isEnabled
=
true
;
if
(
NS_SUCCEEDED
(
treeOwnerAsWin
-
>
GetEnabled
(
&
isEnabled
)
)
&
&
!
isEnabled
)
{
NS_WARNING
(
"
Should
not
try
to
set
the
focus
on
a
disabled
window
"
)
;
return
;
}
nsCOMPtr
<
nsIEmbeddingSiteWindow
>
embeddingWin
(
do_GetInterface
(
treeOwnerAsWin
)
)
;
if
(
embeddingWin
)
embeddingWin
-
>
SetFocus
(
)
;
}
if
(
!
mDocShell
)
{
return
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
;
bool
lookForPresShell
=
true
;
if
(
mDocShell
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeChrome
&
&
GetPrivateRoot
(
)
=
=
this
&
&
mDoc
)
{
nsIURI
*
ourURI
=
mDoc
-
>
GetDocumentURI
(
)
;
if
(
ourURI
)
{
lookForPresShell
=
!
NS_IsAboutBlank
(
ourURI
)
;
}
}
if
(
lookForPresShell
)
{
mDocShell
-
>
GetEldestPresShell
(
getter_AddRefs
(
presShell
)
)
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentDsti
;
mDocShell
-
>
GetParent
(
getter_AddRefs
(
parentDsti
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
parentDsti
?
parentDsti
-
>
GetWindow
(
)
:
nullptr
;
if
(
parent
)
{
nsCOMPtr
<
nsIDocument
>
parentdoc
=
parent
-
>
GetDoc
(
)
;
if
(
!
parentdoc
)
{
return
;
}
nsIContent
*
frame
=
parentdoc
-
>
FindContentForSubDocument
(
mDoc
)
;
nsCOMPtr
<
nsIDOMElement
>
frameElement
=
do_QueryInterface
(
frame
)
;
if
(
frameElement
)
{
uint32_t
flags
=
nsIFocusManager
:
:
FLAG_NOSCROLL
;
if
(
canFocus
)
flags
|
=
nsIFocusManager
:
:
FLAG_RAISE
;
aError
=
fm
-
>
SetFocus
(
frameElement
flags
)
;
}
return
;
}
if
(
canFocus
)
{
aError
=
fm
-
>
SetActiveWindow
(
this
)
;
}
}
nsresult
nsGlobalWindowOuter
:
:
Focus
(
)
{
FORWARD_TO_INNER
(
Focus
(
)
NS_ERROR_UNEXPECTED
)
;
}
void
nsGlobalWindowOuter
:
:
BlurOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
CanSetProperty
(
"
dom
.
disable_window_flip
"
)
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
nsCOMPtr
<
nsIEmbeddingSiteWindow
>
siteWindow
(
do_GetInterface
(
treeOwner
)
)
;
if
(
siteWindow
)
{
siteWindow
-
>
Blur
(
)
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
mDoc
)
{
nsCOMPtr
<
nsIDOMElement
>
element
;
fm
-
>
GetFocusedElementForWindow
(
this
false
nullptr
getter_AddRefs
(
element
)
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
element
)
;
if
(
content
=
=
mDoc
-
>
GetRootElement
(
)
)
{
fm
-
>
ClearFocus
(
this
)
;
}
}
}
}
void
nsGlobalWindowOuter
:
:
BackOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
!
webNav
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aError
=
webNav
-
>
GoBack
(
)
;
}
void
nsGlobalWindowOuter
:
:
ForwardOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
!
webNav
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aError
=
webNav
-
>
GoForward
(
)
;
}
void
nsGlobalWindowOuter
:
:
HomeOuter
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
;
}
nsAutoString
homeURL
;
Preferences
:
:
GetLocalizedString
(
PREF_BROWSER_STARTUP_HOMEPAGE
homeURL
)
;
if
(
homeURL
.
IsEmpty
(
)
)
{
#
ifdef
DEBUG_seth
printf
(
"
all
else
failed
.
using
%
s
as
the
home
page
\
n
"
DEFAULT_HOME_PAGE
)
;
#
endif
CopyASCIItoUTF16
(
DEFAULT_HOME_PAGE
homeURL
)
;
}
#
ifdef
MOZ_PHOENIX
{
int32_t
firstPipe
=
homeURL
.
FindChar
(
'
|
'
)
;
if
(
firstPipe
>
0
)
{
homeURL
.
Truncate
(
firstPipe
)
;
}
}
#
endif
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
!
webNav
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aError
=
webNav
-
>
LoadURI
(
homeURL
.
get
(
)
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
nullptr
nullptr
nullptr
&
aSubjectPrincipal
)
;
}
void
nsGlobalWindowOuter
:
:
StopOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
webNav
)
{
aError
=
webNav
-
>
Stop
(
nsIWebNavigation
:
:
STOP_ALL
)
;
}
}
void
nsGlobalWindowOuter
:
:
PrintOuter
(
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
#
ifdef
NS_PRINTING
if
(
!
AreDialogsEnabled
(
)
)
{
aError
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
;
}
if
(
ShouldPromptToBlockDialogs
(
)
&
&
!
ConfirmDialogIfNeeded
(
)
)
{
aError
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
;
}
nsCOMPtr
<
nsIWebBrowserPrint
>
webBrowserPrint
;
if
(
NS_SUCCEEDED
(
GetInterface
(
NS_GET_IID
(
nsIWebBrowserPrint
)
getter_AddRefs
(
webBrowserPrint
)
)
)
)
{
nsAutoSyncOperation
sync
(
GetCurrentInnerWindowInternal
(
)
?
GetCurrentInnerWindowInternal
(
)
-
>
mDoc
.
get
(
)
:
nullptr
)
;
nsCOMPtr
<
nsIPrintSettingsService
>
printSettingsService
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
)
;
nsCOMPtr
<
nsIPrintSettings
>
printSettings
;
if
(
printSettingsService
)
{
bool
printSettingsAreGlobal
=
Preferences
:
:
GetBool
(
"
print
.
use_global_printsettings
"
false
)
;
if
(
printSettingsAreGlobal
)
{
printSettingsService
-
>
GetGlobalPrintSettings
(
getter_AddRefs
(
printSettings
)
)
;
nsAutoString
printerName
;
printSettings
-
>
GetPrinterName
(
printerName
)
;
bool
shouldGetDefaultPrinterName
=
printerName
.
IsEmpty
(
)
;
#
ifdef
MOZ_X11
if
(
!
XRE_IsParentProcess
(
)
)
{
shouldGetDefaultPrinterName
=
false
;
}
#
endif
if
(
shouldGetDefaultPrinterName
)
{
printSettingsService
-
>
GetDefaultPrinterName
(
printerName
)
;
printSettings
-
>
SetPrinterName
(
printerName
)
;
}
printSettingsService
-
>
InitPrintSettingsFromPrinter
(
printerName
printSettings
)
;
printSettingsService
-
>
InitPrintSettingsFromPrefs
(
printSettings
true
nsIPrintSettings
:
:
kInitSaveAll
)
;
}
else
{
printSettingsService
-
>
GetNewPrintSettings
(
getter_AddRefs
(
printSettings
)
)
;
}
EnterModalState
(
)
;
webBrowserPrint
-
>
Print
(
printSettings
nullptr
)
;
LeaveModalState
(
)
;
bool
savePrintSettings
=
Preferences
:
:
GetBool
(
"
print
.
save_print_settings
"
false
)
;
if
(
printSettingsAreGlobal
&
&
savePrintSettings
)
{
printSettingsService
-
>
SavePrintSettingsToPrefs
(
printSettings
true
nsIPrintSettings
:
:
kInitSaveAll
)
;
printSettingsService
-
>
SavePrintSettingsToPrefs
(
printSettings
false
nsIPrintSettings
:
:
kInitSavePrinterName
)
;
}
}
else
{
webBrowserPrint
-
>
GetGlobalPrintSettings
(
getter_AddRefs
(
printSettings
)
)
;
webBrowserPrint
-
>
Print
(
printSettings
nullptr
)
;
}
}
#
endif
}
void
nsGlobalWindowOuter
:
:
MoveToOuter
(
int32_t
aXPos
int32_t
aYPos
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
CanMoveResizeWindows
(
aCallerType
)
|
|
IsFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsIScreenManager
>
screenMgr
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
)
;
nsCOMPtr
<
nsIScreen
>
screen
;
if
(
screenMgr
)
{
CSSIntSize
size
;
GetInnerSize
(
size
)
;
screenMgr
-
>
ScreenForRect
(
aXPos
aYPos
size
.
width
size
.
height
getter_AddRefs
(
screen
)
)
;
}
if
(
screen
)
{
int32_t
screenLeftDeskPx
screenTopDeskPx
w
h
;
screen
-
>
GetRectDisplayPix
(
&
screenLeftDeskPx
&
screenTopDeskPx
&
w
&
h
)
;
CSSIntPoint
cssPos
(
aXPos
-
screenLeftDeskPx
aYPos
-
screenTopDeskPx
)
;
CheckSecurityLeftAndTop
(
&
cssPos
.
x
&
cssPos
.
y
aCallerType
)
;
double
scale
;
screen
-
>
GetDefaultCSSScaleFactor
(
&
scale
)
;
LayoutDevicePoint
devPos
=
cssPos
*
CSSToLayoutDeviceScale
(
scale
)
;
screen
-
>
GetContentsScaleFactor
(
&
scale
)
;
DesktopPoint
deskPos
=
devPos
/
DesktopToLayoutDeviceScale
(
scale
)
;
aError
=
treeOwnerAsWin
-
>
SetPositionDesktopPix
(
screenLeftDeskPx
+
deskPos
.
x
screenTopDeskPx
+
deskPos
.
y
)
;
}
else
{
CSSIntPoint
cssPos
(
aXPos
aXPos
)
;
CheckSecurityLeftAndTop
(
&
cssPos
.
x
&
cssPos
.
y
aCallerType
)
;
LayoutDevicePoint
devPos
=
cssPos
*
CSSToLayoutDeviceScale
(
1
.
0
)
;
aError
=
treeOwnerAsWin
-
>
SetPosition
(
devPos
.
x
devPos
.
y
)
;
}
CheckForDPIChange
(
)
;
}
void
nsGlobalWindowOuter
:
:
MoveByOuter
(
int32_t
aXDif
int32_t
aYDif
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
CanMoveResizeWindows
(
aCallerType
)
|
|
IsFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
int32_t
x
y
;
aError
=
treeOwnerAsWin
-
>
GetPosition
(
&
x
&
y
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
nsIntSize
cssPos
(
DevToCSSIntPixels
(
nsIntSize
(
x
y
)
)
)
;
cssPos
.
width
+
=
aXDif
;
cssPos
.
height
+
=
aYDif
;
CheckSecurityLeftAndTop
(
&
cssPos
.
width
&
cssPos
.
height
aCallerType
)
;
nsIntSize
newDevPos
(
CSSToDevIntPixels
(
cssPos
)
)
;
aError
=
treeOwnerAsWin
-
>
SetPosition
(
newDevPos
.
width
newDevPos
.
height
)
;
CheckForDPIChange
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
MoveBy
(
int32_t
aXDif
int32_t
aYDif
)
{
ErrorResult
rv
;
MoveByOuter
(
aXDif
aYDif
CallerType
:
:
System
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
void
nsGlobalWindowOuter
:
:
ResizeToOuter
(
int32_t
aWidth
int32_t
aHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
mDocShell
&
&
mDocShell
-
>
GetIsMozBrowser
(
)
)
{
CSSIntSize
size
(
aWidth
aHeight
)
;
if
(
!
DispatchResizeEvent
(
size
)
)
{
return
;
}
}
if
(
!
CanMoveResizeWindows
(
aCallerType
)
|
|
IsFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIntSize
cssSize
(
aWidth
aHeight
)
;
CheckSecurityWidthAndHeight
(
&
cssSize
.
width
&
cssSize
.
height
aCallerType
)
;
nsIntSize
devSz
(
CSSToDevIntPixels
(
cssSize
)
)
;
aError
=
treeOwnerAsWin
-
>
SetSize
(
devSz
.
width
devSz
.
height
true
)
;
CheckForDPIChange
(
)
;
}
void
nsGlobalWindowOuter
:
:
ResizeByOuter
(
int32_t
aWidthDif
int32_t
aHeightDif
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
mDocShell
&
&
mDocShell
-
>
GetIsMozBrowser
(
)
)
{
CSSIntSize
size
;
if
(
NS_FAILED
(
GetInnerSize
(
size
)
)
)
{
return
;
}
size
.
width
+
=
aWidthDif
;
size
.
height
+
=
aHeightDif
;
if
(
!
DispatchResizeEvent
(
size
)
)
{
return
;
}
}
if
(
!
CanMoveResizeWindows
(
aCallerType
)
|
|
IsFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
!
treeOwnerAsWin
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
int32_t
width
height
;
aError
=
treeOwnerAsWin
-
>
GetSize
(
&
width
&
height
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
nsIntSize
cssSize
(
DevToCSSIntPixels
(
nsIntSize
(
width
height
)
)
)
;
cssSize
.
width
+
=
aWidthDif
;
cssSize
.
height
+
=
aHeightDif
;
CheckSecurityWidthAndHeight
(
&
cssSize
.
width
&
cssSize
.
height
aCallerType
)
;
nsIntSize
newDevSize
(
CSSToDevIntPixels
(
cssSize
)
)
;
aError
=
treeOwnerAsWin
-
>
SetSize
(
newDevSize
.
width
newDevSize
.
height
true
)
;
CheckForDPIChange
(
)
;
}
void
nsGlobalWindowOuter
:
:
SizeToContentOuter
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
;
}
if
(
!
CanMoveResizeWindows
(
aCallerType
)
|
|
IsFrame
(
)
)
{
return
;
}
nsCOMPtr
<
nsIContentViewer
>
cv
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
if
(
!
cv
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
int32_t
width
height
;
aError
=
cv
-
>
GetContentSize
(
&
width
&
height
)
;
if
(
aError
.
Failed
(
)
)
{
return
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
if
(
!
treeOwner
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIntSize
cssSize
(
DevToCSSIntPixels
(
nsIntSize
(
width
height
)
)
)
;
CheckSecurityWidthAndHeight
(
&
cssSize
.
width
&
cssSize
.
height
aCallerType
)
;
nsIntSize
newDevSize
(
CSSToDevIntPixels
(
cssSize
)
)
;
aError
=
treeOwner
-
>
SizeShellTo
(
mDocShell
newDevSize
.
width
newDevSize
.
height
)
;
}
already_AddRefed
<
nsPIWindowRoot
>
nsGlobalWindowOuter
:
:
GetTopWindowRoot
(
)
{
nsPIDOMWindowOuter
*
piWin
=
GetPrivateRoot
(
)
;
if
(
!
piWin
)
{
return
nullptr
;
}
nsCOMPtr
<
nsPIWindowRoot
>
window
=
do_QueryInterface
(
piWin
-
>
GetChromeEventHandler
(
)
)
;
return
window
.
forget
(
)
;
}
static
bool
IsPopupBlocked
(
nsIDocument
*
aDoc
)
{
nsCOMPtr
<
nsIPopupWindowManager
>
pm
=
do_GetService
(
NS_POPUPWINDOWMANAGER_CONTRACTID
)
;
if
(
!
pm
)
{
return
false
;
}
if
(
!
aDoc
)
{
return
true
;
}
uint32_t
permission
=
nsIPopupWindowManager
:
:
ALLOW_POPUP
;
pm
-
>
TestPermission
(
aDoc
-
>
NodePrincipal
(
)
&
permission
)
;
return
permission
=
=
nsIPopupWindowManager
:
:
DENY_POPUP
;
}
void
nsGlobalWindowOuter
:
:
FirePopupBlockedEvent
(
nsIDocument
*
aDoc
nsIURI
*
aPopupURI
const
nsAString
&
aPopupWindowName
const
nsAString
&
aPopupWindowFeatures
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
"
All
callers
seem
to
assume
we
'
re
an
outer
window
?
"
)
;
MOZ_ASSERT
(
aDoc
)
;
PopupBlockedEventInit
init
;
init
.
mBubbles
=
true
;
init
.
mCancelable
=
true
;
init
.
mRequestingWindow
=
GetCurrentInnerWindowInternal
(
)
;
init
.
mPopupWindowURI
=
aPopupURI
;
init
.
mPopupWindowName
=
aPopupWindowName
;
init
.
mPopupWindowFeatures
=
aPopupWindowFeatures
;
RefPtr
<
PopupBlockedEvent
>
event
=
PopupBlockedEvent
:
:
Constructor
(
aDoc
NS_LITERAL_STRING
(
"
DOMPopupBlocked
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
aDoc
-
>
DispatchEvent
(
event
&
defaultActionEnabled
)
;
}
bool
nsGlobalWindowOuter
:
:
CanSetProperty
(
const
char
*
aPrefName
)
{
if
(
nsContentUtils
:
:
LegacyIsCallerChromeOrNativeCode
(
)
)
{
return
true
;
}
return
!
Preferences
:
:
GetBool
(
aPrefName
true
)
;
}
bool
nsGlobalWindowOuter
:
:
PopupWhitelisted
(
)
{
if
(
!
IsPopupBlocked
(
mDoc
)
)
return
true
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
GetParent
(
)
;
if
(
parent
=
=
this
)
{
return
false
;
}
return
nsGlobalWindowOuter
:
:
Cast
(
parent
)
-
>
PopupWhitelisted
(
)
;
}
PopupControlState
nsGlobalWindowOuter
:
:
RevisePopupAbuseLevel
(
PopupControlState
aControl
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
NS_ASSERTION
(
mDocShell
"
Must
have
docshell
"
)
;
if
(
mDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeContent
)
{
return
openAllowed
;
}
PopupControlState
abuse
=
aControl
;
switch
(
abuse
)
{
case
openControlled
:
case
openBlocked
:
case
openOverridden
:
if
(
PopupWhitelisted
(
)
)
abuse
=
PopupControlState
(
abuse
-
1
)
;
break
;
case
openAbused
:
if
(
PopupWhitelisted
(
)
)
abuse
=
openControlled
;
break
;
case
openAllowed
:
break
;
default
:
NS_WARNING
(
"
Strange
PopupControlState
!
"
)
;
}
if
(
abuse
=
=
openAbused
|
|
abuse
=
=
openBlocked
|
|
abuse
=
=
openControlled
)
{
int32_t
popupMax
=
Preferences
:
:
GetInt
(
"
dom
.
popup_maximum
"
-
1
)
;
if
(
popupMax
>
=
0
&
&
gOpenPopupSpamCount
>
=
popupMax
)
abuse
=
openOverridden
;
}
return
abuse
;
}
void
nsGlobalWindowOuter
:
:
FireAbuseEvents
(
const
nsAString
&
aPopupURL
const
nsAString
&
aPopupWindowName
const
nsAString
&
aPopupWindowFeatures
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetTop
(
)
;
if
(
!
window
)
{
return
;
}
nsCOMPtr
<
nsIDocument
>
topDoc
=
window
-
>
GetDoc
(
)
;
nsCOMPtr
<
nsIURI
>
popupURI
;
nsIURI
*
baseURL
=
nullptr
;
nsCOMPtr
<
nsIDocument
>
doc
=
GetEntryDocument
(
)
;
if
(
doc
)
baseURL
=
doc
-
>
GetDocBaseURI
(
)
;
nsCOMPtr
<
nsIIOService
>
ios
(
do_GetService
(
NS_IOSERVICE_CONTRACTID
)
)
;
if
(
ios
)
ios
-
>
NewURI
(
NS_ConvertUTF16toUTF8
(
aPopupURL
)
nullptr
baseURL
getter_AddRefs
(
popupURI
)
)
;
FirePopupBlockedEvent
(
topDoc
popupURI
aPopupWindowName
aPopupWindowFeatures
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
OpenOuter
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
;
aError
=
OpenJS
(
aUrl
aName
aOptions
getter_AddRefs
(
window
)
)
;
return
window
.
forget
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
Open
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
nsIDocShellLoadInfo
*
aLoadInfo
bool
aForceNoOpener
nsPIDOMWindowOuter
*
*
_retval
)
{
return
OpenInternal
(
aUrl
aName
aOptions
false
false
true
false
true
nullptr
nullptr
aLoadInfo
aForceNoOpener
_retval
)
;
}
nsresult
nsGlobalWindowOuter
:
:
OpenJS
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
nsPIDOMWindowOuter
*
*
_retval
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
return
OpenInternal
(
aUrl
aName
aOptions
false
false
false
true
true
nullptr
nullptr
nullptr
false
_retval
)
;
}
nsresult
nsGlobalWindowOuter
:
:
OpenDialog
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
nsISupports
*
aExtraArgument
nsPIDOMWindowOuter
*
*
_retval
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
return
OpenInternal
(
aUrl
aName
aOptions
true
false
true
false
true
nullptr
aExtraArgument
nullptr
false
_retval
)
;
}
nsresult
nsGlobalWindowOuter
:
:
OpenNoNavigate
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
nsPIDOMWindowOuter
*
*
_retval
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
return
OpenInternal
(
aUrl
aName
aOptions
false
false
true
false
false
nullptr
nullptr
nullptr
false
_retval
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
OpenDialogOuter
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
const
Sequence
<
JS
:
:
Value
>
&
aExtraArgument
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIJSArgArray
>
argvArray
;
aError
=
NS_CreateJSArgv
(
aCx
aExtraArgument
.
Length
(
)
aExtraArgument
.
Elements
(
)
getter_AddRefs
(
argvArray
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
dialog
;
aError
=
OpenInternal
(
aUrl
aName
aOptions
true
false
false
false
true
argvArray
nullptr
nullptr
false
getter_AddRefs
(
dialog
)
)
;
return
dialog
.
forget
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowOuter
:
:
GetFramesOuter
(
)
{
RefPtr
<
nsPIDOMWindowOuter
>
frames
(
this
)
;
FlushPendingNotifications
(
FlushType
:
:
ContentAndNotify
)
;
return
frames
.
forget
(
)
;
}
nsGlobalWindowInner
*
nsGlobalWindowOuter
:
:
CallerInnerWindow
(
)
{
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
NS_ENSURE_TRUE
(
cx
nullptr
)
;
nsIGlobalObject
*
global
=
GetIncumbentGlobal
(
)
;
NS_ENSURE_TRUE
(
global
nullptr
)
;
JS
:
:
Rooted
<
JSObject
*
>
scope
(
cx
global
-
>
GetGlobalJSObject
(
)
)
;
NS_ENSURE_TRUE
(
scope
nullptr
)
;
if
(
xpc
:
:
IsSandbox
(
scope
)
)
{
JSAutoCompartment
ac
(
cx
scope
)
;
JS
:
:
Rooted
<
JSObject
*
>
scopeProto
(
cx
)
;
bool
ok
=
JS_GetPrototype
(
cx
scope
&
scopeProto
)
;
NS_ENSURE_TRUE
(
ok
nullptr
)
;
if
(
scopeProto
&
&
xpc
:
:
IsSandboxPrototypeProxy
(
scopeProto
)
&
&
(
scopeProto
=
js
:
:
CheckedUnwrap
(
scopeProto
false
)
)
)
{
global
=
xpc
:
:
NativeGlobal
(
scopeProto
)
;
NS_ENSURE_TRUE
(
global
nullptr
)
;
}
}
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
global
)
;
return
nsGlobalWindowInner
:
:
Cast
(
win
)
;
}
void
nsGlobalWindowOuter
:
:
PostMessageMozOuter
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
nsAString
&
aTargetOrigin
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
RefPtr
<
nsGlobalWindowInner
>
callerInnerWin
=
CallerInnerWindow
(
)
;
nsIPrincipal
*
callerPrin
;
if
(
callerInnerWin
)
{
MOZ_ASSERT
(
callerInnerWin
-
>
IsInnerWindow
(
)
"
should
have
gotten
an
inner
window
here
"
)
;
callerPrin
=
callerInnerWin
-
>
GetPrincipal
(
)
;
}
else
{
nsIGlobalObject
*
global
=
GetIncumbentGlobal
(
)
;
NS_ASSERTION
(
global
"
Why
is
there
no
global
object
?
"
)
;
callerPrin
=
global
-
>
PrincipalOrNull
(
)
;
}
if
(
!
callerPrin
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
callerOuterURI
;
if
(
NS_FAILED
(
callerPrin
-
>
GetURI
(
getter_AddRefs
(
callerOuterURI
)
)
)
)
{
return
;
}
nsAutoString
origin
;
if
(
callerOuterURI
)
{
nsContentUtils
:
:
GetUTFOrigin
(
callerPrin
origin
)
;
}
else
if
(
callerInnerWin
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
callerInnerWin
-
>
GetExtantDoc
(
)
;
if
(
!
doc
)
{
return
;
}
callerOuterURI
=
doc
-
>
GetDocumentURI
(
)
;
nsContentUtils
:
:
GetUTFOrigin
(
callerOuterURI
origin
)
;
}
else
{
if
(
!
nsContentUtils
:
:
IsSystemPrincipal
(
callerPrin
)
)
{
return
;
}
}
nsCOMPtr
<
nsIPrincipal
>
providedPrincipal
;
if
(
aTargetOrigin
.
EqualsASCII
(
"
/
"
)
)
{
providedPrincipal
=
callerPrin
;
}
else
if
(
!
aTargetOrigin
.
EqualsASCII
(
"
*
"
)
)
{
nsCOMPtr
<
nsIURI
>
originURI
;
if
(
NS_FAILED
(
NS_NewURI
(
getter_AddRefs
(
originURI
)
aTargetOrigin
)
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_SYNTAX_ERR
)
;
return
;
}
if
(
NS_FAILED
(
originURI
-
>
SetUserPass
(
EmptyCString
(
)
)
)
|
|
NS_FAILED
(
originURI
-
>
SetPathQueryRef
(
EmptyCString
(
)
)
)
)
{
return
;
}
OriginAttributes
attrs
=
aSubjectPrincipal
.
OriginAttributesRef
(
)
;
if
(
aSubjectPrincipal
.
GetIsSystemPrincipal
(
)
)
{
auto
principal
=
BasePrincipal
:
:
Cast
(
GetPrincipal
(
)
)
;
if
(
attrs
!
=
principal
-
>
OriginAttributesRef
(
)
)
{
nsCOMPtr
<
nsIURI
>
targetURI
;
nsAutoCString
targetURL
;
nsAutoCString
sourceOrigin
;
nsAutoCString
targetOrigin
;
if
(
NS_FAILED
(
principal
-
>
GetURI
(
getter_AddRefs
(
targetURI
)
)
)
|
|
NS_FAILED
(
targetURI
-
>
GetAsciiSpec
(
targetURL
)
)
|
|
NS_FAILED
(
principal
-
>
GetOrigin
(
targetOrigin
)
)
|
|
NS_FAILED
(
aSubjectPrincipal
.
GetOrigin
(
sourceOrigin
)
)
)
{
NS_WARNING
(
"
Failed
to
get
source
and
target
origins
"
)
;
return
;
}
nsContentUtils
:
:
LogSimpleConsoleError
(
NS_ConvertUTF8toUTF16
(
nsPrintfCString
(
R
"
(
Attempting
to
post
a
message
to
window
with
url
"
%
s
"
and
)
"
R
"
(
origin
"
%
s
"
from
a
system
principal
scope
with
mismatched
)
"
R
"
(
origin
"
%
s
"
.
)
"
targetURL
.
get
(
)
targetOrigin
.
get
(
)
sourceOrigin
.
get
(
)
)
)
"
DOM
"
)
;
attrs
=
principal
-
>
OriginAttributesRef
(
)
;
}
}
providedPrincipal
=
BasePrincipal
:
:
CreateCodebasePrincipal
(
originURI
attrs
)
;
if
(
NS_WARN_IF
(
!
providedPrincipal
)
)
{
return
;
}
}
RefPtr
<
PostMessageEvent
>
event
=
new
PostMessageEvent
(
nsContentUtils
:
:
IsCallerChrome
(
)
|
|
!
callerInnerWin
?
nullptr
:
callerInnerWin
-
>
GetOuterWindowInternal
(
)
origin
this
providedPrincipal
callerInnerWin
?
callerInnerWin
-
>
GetDoc
(
)
:
nullptr
nsContentUtils
:
:
IsCallerChrome
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
message
(
aCx
aMessage
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
transfer
(
aCx
aTransfer
)
;
event
-
>
Write
(
aCx
message
transfer
JS
:
:
CloneDataPolicy
(
)
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
;
}
aError
=
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
}
class
nsCloseEvent
:
public
Runnable
{
RefPtr
<
nsGlobalWindowOuter
>
mWindow
;
bool
mIndirect
;
nsCloseEvent
(
nsGlobalWindowOuter
*
aWindow
bool
aIndirect
)
:
mozilla
:
:
Runnable
(
"
nsCloseEvent
"
)
mWindow
(
aWindow
)
mIndirect
(
aIndirect
)
{
}
public
:
static
nsresult
PostCloseEvent
(
nsGlobalWindowOuter
*
aWindow
bool
aIndirect
)
{
nsCOMPtr
<
nsIRunnable
>
ev
=
new
nsCloseEvent
(
aWindow
aIndirect
)
;
nsresult
rv
=
aWindow
-
>
Dispatch
(
TaskCategory
:
:
Other
ev
.
forget
(
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
aWindow
-
>
MaybeForgiveSpamCount
(
)
;
return
rv
;
}
NS_IMETHOD
Run
(
)
override
{
if
(
mWindow
)
{
if
(
mIndirect
)
{
return
PostCloseEvent
(
mWindow
false
)
;
}
mWindow
-
>
ReallyCloseWindow
(
)
;
}
return
NS_OK
;
}
}
;
bool
nsGlobalWindowOuter
:
:
CanClose
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
mIsChrome
)
{
nsCOMPtr
<
nsIBrowserDOMWindow
>
bwin
;
GetBrowserDOMWindow
(
getter_AddRefs
(
bwin
)
)
;
bool
canClose
=
true
;
if
(
bwin
&
&
NS_SUCCEEDED
(
bwin
-
>
CanClose
(
&
canClose
)
)
)
{
return
canClose
;
}
}
if
(
!
mDocShell
)
{
return
true
;
}
nsCOMPtr
<
nsIContentViewer
>
cv
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
if
(
cv
)
{
bool
canClose
;
nsresult
rv
=
cv
-
>
PermitUnload
(
&
canClose
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
canClose
)
return
false
;
rv
=
cv
-
>
RequestWindowClose
(
&
canClose
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
canClose
)
return
false
;
}
return
true
;
}
void
nsGlobalWindowOuter
:
:
CloseOuter
(
bool
aTrustedCaller
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
|
|
IsInModalState
(
)
|
|
(
IsFrame
(
)
&
&
!
mDocShell
-
>
GetIsMozBrowser
(
)
)
)
{
return
;
}
if
(
mHavePendingClose
)
{
return
;
}
if
(
mBlockScriptedClosingFlag
)
{
return
;
}
nsAutoString
url
;
nsresult
rv
=
mDoc
-
>
GetURL
(
url
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
if
(
!
StringBeginsWith
(
url
NS_LITERAL_STRING
(
"
about
:
neterror
"
)
)
&
&
!
mHadOriginalOpener
&
&
!
aTrustedCaller
)
{
bool
allowClose
=
mAllowScriptsToClose
|
|
Preferences
:
:
GetBool
(
"
dom
.
allow_scripts_to_close_windows
"
true
)
;
if
(
!
allowClose
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
DOM
Window
"
)
mDoc
nsContentUtils
:
:
eDOM_PROPERTIES
"
WindowCloseBlockedWarning
"
)
;
return
;
}
}
if
(
!
mInClose
&
&
!
mIsClosed
&
&
!
CanClose
(
)
)
{
return
;
}
bool
wasInClose
=
mInClose
;
mInClose
=
true
;
if
(
!
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
DOMWindowClose
"
)
)
)
{
mInClose
=
wasInClose
;
return
;
}
FinalClose
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
Close
(
)
{
CloseOuter
(
true
)
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
ForceClose
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Default
)
;
if
(
IsFrame
(
)
|
|
!
mDocShell
)
{
return
;
}
if
(
mHavePendingClose
)
{
return
;
}
mInClose
=
true
;
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
DOMWindowClose
"
)
)
;
FinalClose
(
)
;
}
void
nsGlobalWindowOuter
:
:
FinalClose
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
mIsClosed
=
true
;
if
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
)
{
return
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
entryWindow
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
bool
indirect
=
entryWindow
&
&
entryWindow
-
>
GetOuterWindow
(
)
=
=
this
;
if
(
NS_FAILED
(
nsCloseEvent
:
:
PostCloseEvent
(
this
indirect
)
)
)
{
ReallyCloseWindow
(
)
;
}
else
{
mHavePendingClose
=
true
;
}
}
void
nsGlobalWindowOuter
:
:
ReallyCloseWindow
(
)
{
mHavePendingClose
=
true
;
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
GetTreeOwnerWindow
(
)
;
if
(
treeOwnerAsWin
)
{
if
(
mDocShell
)
{
nsCOMPtr
<
nsIBrowserDOMWindow
>
bwin
;
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
mDocShell
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWin
=
rootItem
?
rootItem
-
>
GetWindow
(
)
:
nullptr
;
nsCOMPtr
<
nsIDOMChromeWindow
>
chromeWin
(
do_QueryInterface
(
rootWin
)
)
;
if
(
chromeWin
)
chromeWin
-
>
GetBrowserDOMWindow
(
getter_AddRefs
(
bwin
)
)
;
if
(
rootWin
)
{
bool
isTab
;
if
(
rootWin
=
=
this
|
|
!
bwin
|
|
(
NS_SUCCEEDED
(
bwin
-
>
IsTabContentWindow
(
GetOuterWindowInternal
(
)
&
isTab
)
)
&
&
isTab
)
)
{
treeOwnerAsWin
-
>
Destroy
(
)
;
}
}
}
CleanUp
(
)
;
}
}
void
nsGlobalWindowOuter
:
:
EnterModalState
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
"
Modal
state
is
maintained
on
outer
windows
"
)
;
nsGlobalWindowOuter
*
topWin
=
GetScriptableTopInternal
(
)
;
if
(
!
topWin
)
{
NS_ERROR
(
"
Uh
EnterModalState
(
)
called
w
/
o
a
reachable
top
window
?
"
)
;
return
;
}
EventStateManager
*
activeESM
=
static_cast
<
EventStateManager
*
>
(
EventStateManager
:
:
GetActiveEventStateManager
(
)
)
;
if
(
activeESM
&
&
activeESM
-
>
GetPresContext
(
)
)
{
nsIPresShell
*
activeShell
=
activeESM
-
>
GetPresContext
(
)
-
>
GetPresShell
(
)
;
if
(
activeShell
&
&
(
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
activeShell
-
>
GetDocument
(
)
mDoc
)
|
|
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
mDoc
activeShell
-
>
GetDocument
(
)
)
)
)
{
EventStateManager
:
:
ClearGlobalActiveContent
(
activeESM
)
;
activeShell
-
>
SetCapturingContent
(
nullptr
0
)
;
if
(
activeShell
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
activeShell
-
>
FrameSelection
(
)
;
frameSelection
-
>
SetDragState
(
false
)
;
}
}
}
nsCOMPtr
<
nsIDragService
>
ds
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
ds
)
{
ds
-
>
EndDragSession
(
true
0
)
;
}
nsIDocument
*
topDoc
=
topWin
-
>
GetExtantDoc
(
)
;
nsIContent
*
capturingContent
=
nsIPresShell
:
:
GetCapturingContent
(
)
;
if
(
capturingContent
&
&
topDoc
&
&
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
capturingContent
topDoc
)
)
{
nsIPresShell
:
:
SetCapturingContent
(
nullptr
0
)
;
}
if
(
topWin
-
>
mModalStateDepth
=
=
0
)
{
NS_ASSERTION
(
!
topWin
-
>
mSuspendedDoc
"
Shouldn
'
t
have
mSuspendedDoc
here
!
"
)
;
topWin
-
>
mSuspendedDoc
=
topDoc
;
if
(
topDoc
)
{
topDoc
-
>
SuppressEventHandling
(
)
;
}
nsGlobalWindowInner
*
inner
=
topWin
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
inner
)
{
topWin
-
>
GetCurrentInnerWindowInternal
(
)
-
>
Suspend
(
)
;
}
}
topWin
-
>
mModalStateDepth
+
+
;
}
void
nsGlobalWindowOuter
:
:
LeaveModalState
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
"
Modal
state
is
maintained
on
outer
windows
"
)
;
nsGlobalWindowOuter
*
topWin
=
GetScriptableTopInternal
(
)
;
if
(
!
topWin
)
{
NS_ERROR
(
"
Uh
LeaveModalState
(
)
called
w
/
o
a
reachable
top
window
?
"
)
;
return
;
}
MOZ_ASSERT
(
topWin
-
>
mModalStateDepth
!
=
0
)
;
MOZ_ASSERT
(
IsSuspended
(
)
)
;
MOZ_ASSERT
(
topWin
-
>
IsSuspended
(
)
)
;
topWin
-
>
mModalStateDepth
-
-
;
nsGlobalWindowInner
*
inner
=
topWin
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
topWin
-
>
mModalStateDepth
=
=
0
)
{
if
(
inner
)
{
inner
-
>
Resume
(
)
;
}
if
(
topWin
-
>
mSuspendedDoc
)
{
nsCOMPtr
<
nsIDocument
>
currentDoc
=
topWin
-
>
GetExtantDoc
(
)
;
topWin
-
>
mSuspendedDoc
-
>
UnsuppressEventHandlingAndFireEvents
(
currentDoc
=
=
topWin
-
>
mSuspendedDoc
)
;
topWin
-
>
mSuspendedDoc
=
nullptr
;
}
}
if
(
inner
)
{
inner
-
>
mLastDialogQuitTime
=
TimeStamp
:
:
Now
(
)
;
}
if
(
topWin
-
>
mModalStateDepth
=
=
0
)
{
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
inner
nullptr
nullptr
)
;
event
-
>
InitEvent
(
NS_LITERAL_STRING
(
"
endmodalstate
"
)
true
false
)
;
event
-
>
SetTrusted
(
true
)
;
event
-
>
WidgetEventPtr
(
)
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
bool
dummy
;
topWin
-
>
DispatchEvent
(
event
&
dummy
)
;
}
}
bool
nsGlobalWindowOuter
:
:
IsInModalState
(
)
{
nsGlobalWindowOuter
*
topWin
=
GetScriptableTopInternal
(
)
;
if
(
!
topWin
)
{
return
false
;
}
return
topWin
-
>
mModalStateDepth
!
=
0
;
}
void
nsGlobalWindowOuter
:
:
NotifyWindowIDDestroyed
(
const
char
*
aTopic
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
WindowDestroyedEvent
(
this
mWindowID
aTopic
)
;
nsresult
rv
=
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mNotifiedIDDestroyed
=
true
;
}
}
JSObject
*
nsGlobalWindowOuter
:
:
GetCachedXBLPrototypeHandler
(
nsXBLPrototypeHandler
*
aKey
)
{
JS
:
:
Rooted
<
JSObject
*
>
handler
(
RootingCx
(
)
)
;
if
(
mCachedXBLPrototypeHandlers
)
{
mCachedXBLPrototypeHandlers
-
>
Get
(
aKey
handler
.
address
(
)
)
;
}
return
handler
;
}
void
nsGlobalWindowOuter
:
:
CacheXBLPrototypeHandler
(
nsXBLPrototypeHandler
*
aKey
JS
:
:
Handle
<
JSObject
*
>
aHandler
)
{
if
(
!
mCachedXBLPrototypeHandlers
)
{
mCachedXBLPrototypeHandlers
=
MakeUnique
<
XBLPrototypeHandlerTable
>
(
)
;
PreserveWrapper
(
ToSupports
(
this
)
)
;
}
mCachedXBLPrototypeHandlers
-
>
Put
(
aKey
aHandler
)
;
}
Element
*
nsGlobalWindowOuter
:
:
GetFrameElementOuter
(
nsIPrincipal
&
aSubjectPrincipal
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
|
|
mDocShell
-
>
GetIsMozBrowser
(
)
)
{
return
nullptr
;
}
Element
*
element
=
GetRealFrameElementOuter
(
)
;
if
(
!
element
)
{
return
nullptr
;
}
if
(
!
aSubjectPrincipal
.
SubsumesConsideringDomain
(
element
-
>
NodePrincipal
(
)
)
)
{
return
nullptr
;
}
return
element
;
}
Element
*
nsGlobalWindowOuter
:
:
GetRealFrameElementOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShell
>
parent
;
mDocShell
-
>
GetSameTypeParentIgnoreBrowserBoundaries
(
getter_AddRefs
(
parent
)
)
;
if
(
!
parent
|
|
parent
=
=
mDocShell
)
{
return
nullptr
;
}
return
mFrameElement
;
}
already_AddRefed
<
nsIDOMElement
>
nsGlobalWindowOuter
:
:
GetFrameElement
(
)
{
FORWARD_TO_INNER
(
GetFrameElement
(
)
nullptr
)
;
}
nsresult
nsGlobalWindowOuter
:
:
UpdateCommands
(
const
nsAString
&
anAction
nsISelection
*
aSel
int16_t
aReason
)
{
if
(
nsIDocShell
*
docShell
=
GetDocShell
(
)
)
{
if
(
nsCOMPtr
<
nsITabChild
>
child
=
docShell
-
>
GetTabChild
(
)
)
{
nsCOMPtr
<
nsPIWindowRoot
>
root
=
GetTopWindowRoot
(
)
;
if
(
root
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
ChildCommandDispatcher
(
root
child
anAction
)
)
;
}
return
NS_OK
;
}
}
nsPIDOMWindowOuter
*
rootWindow
=
GetPrivateRoot
(
)
;
if
(
!
rootWindow
)
return
NS_OK
;
nsCOMPtr
<
nsIDOMXULDocument
>
xulDoc
=
do_QueryInterface
(
rootWindow
-
>
GetExtantDoc
(
)
)
;
if
(
xulDoc
&
&
!
anAction
.
EqualsLiteral
(
"
selectionchange
"
)
)
{
nsCOMPtr
<
nsIDOMXULCommandDispatcher
>
xulCommandDispatcher
;
xulDoc
-
>
GetCommandDispatcher
(
getter_AddRefs
(
xulCommandDispatcher
)
)
;
if
(
xulCommandDispatcher
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
CommandDispatcher
(
xulCommandDispatcher
anAction
)
)
;
}
}
return
NS_OK
;
}
Selection
*
nsGlobalWindowOuter
:
:
GetSelectionOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
nsISelection
*
domSelection
=
presShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
return
domSelection
?
domSelection
-
>
AsSelection
(
)
:
nullptr
;
}
already_AddRefed
<
nsISelection
>
nsGlobalWindowOuter
:
:
GetSelection
(
)
{
nsCOMPtr
<
nsISelection
>
selection
=
GetSelectionOuter
(
)
;
return
selection
.
forget
(
)
;
}
bool
nsGlobalWindowOuter
:
:
FindOuter
(
const
nsAString
&
aString
bool
aCaseSensitive
bool
aBackwards
bool
aWrapAround
bool
aWholeWord
bool
aSearchInFrames
bool
aShowDialog
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
Unused
<
<
aShowDialog
;
if
(
Preferences
:
:
GetBool
(
"
dom
.
disable_window_find
"
false
)
)
{
aError
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
false
;
}
nsCOMPtr
<
nsIWebBrowserFind
>
finder
(
do_GetInterface
(
mDocShell
)
)
;
if
(
!
finder
)
{
aError
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
false
;
}
aError
=
finder
-
>
SetSearchString
(
PromiseFlatString
(
aString
)
.
get
(
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
false
;
}
finder
-
>
SetMatchCase
(
aCaseSensitive
)
;
finder
-
>
SetFindBackwards
(
aBackwards
)
;
finder
-
>
SetWrapFind
(
aWrapAround
)
;
finder
-
>
SetEntireWord
(
aWholeWord
)
;
finder
-
>
SetSearchFrames
(
aSearchInFrames
)
;
nsCOMPtr
<
nsIWebBrowserFindInFrames
>
framesFinder
(
do_QueryInterface
(
finder
)
)
;
if
(
framesFinder
)
{
framesFinder
-
>
SetRootSearchFrame
(
this
)
;
framesFinder
-
>
SetCurrentSearchFrame
(
this
)
;
}
if
(
aString
.
IsEmpty
(
)
)
{
return
false
;
}
bool
didFind
=
false
;
aError
=
finder
-
>
FindNext
(
&
didFind
)
;
return
didFind
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetOwnerGlobalForBindings
(
)
{
return
this
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
RemoveEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
)
{
if
(
RefPtr
<
EventListenerManager
>
elm
=
GetExistingListenerManager
(
)
)
{
elm
-
>
RemoveEventListener
(
aType
aListener
aUseCapture
)
;
}
return
NS_OK
;
}
NS_IMPL_REMOVE_SYSTEM_EVENT_LISTENER
(
nsGlobalWindowOuter
)
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
DispatchEvent
(
nsIDOMEvent
*
aEvent
bool
*
aRetVal
)
{
FORWARD_TO_INNER
(
DispatchEvent
(
aEvent
aRetVal
)
NS_OK
)
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
AddEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
bool
aWantsUntrusted
uint8_t
aOptionalArgc
)
{
NS_ASSERTION
(
!
aWantsUntrusted
|
|
aOptionalArgc
>
1
"
Won
'
t
check
if
this
is
chrome
you
want
to
set
"
"
aWantsUntrusted
to
false
or
make
the
aWantsUntrusted
"
"
explicit
by
making
optional_argc
non
-
zero
.
"
)
;
if
(
!
aWantsUntrusted
&
&
(
aOptionalArgc
<
2
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
)
)
{
aWantsUntrusted
=
true
;
}
EventListenerManager
*
manager
=
GetOrCreateListenerManager
(
)
;
NS_ENSURE_STATE
(
manager
)
;
manager
-
>
AddEventListener
(
aType
aListener
aUseCapture
aWantsUntrusted
)
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
AddEventListener
(
const
nsAString
&
aType
EventListener
*
aListener
const
AddEventListenerOptionsOrBoolean
&
aOptions
const
Nullable
<
bool
>
&
aWantsUntrusted
ErrorResult
&
aRv
)
{
if
(
mInnerWindow
&
&
!
nsContentUtils
:
:
CanCallerAccess
(
mInnerWindow
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
bool
wantsUntrusted
;
if
(
aWantsUntrusted
.
IsNull
(
)
)
{
wantsUntrusted
=
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
;
}
else
{
wantsUntrusted
=
aWantsUntrusted
.
Value
(
)
;
}
EventListenerManager
*
manager
=
GetOrCreateListenerManager
(
)
;
if
(
!
manager
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
manager
-
>
AddEventListener
(
aType
aListener
aOptions
wantsUntrusted
)
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
AddSystemEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
bool
aWantsUntrusted
uint8_t
aOptionalArgc
)
{
NS_ASSERTION
(
!
aWantsUntrusted
|
|
aOptionalArgc
>
1
"
Won
'
t
check
if
this
is
chrome
you
want
to
set
"
"
aWantsUntrusted
to
false
or
make
the
aWantsUntrusted
"
"
explicit
by
making
optional_argc
non
-
zero
.
"
)
;
if
(
mInnerWindow
&
&
!
nsContentUtils
:
:
LegacyIsCallerNativeCode
(
)
&
&
!
nsContentUtils
:
:
CanCallerAccess
(
mInnerWindow
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
if
(
!
aWantsUntrusted
&
&
(
aOptionalArgc
<
2
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
)
)
{
aWantsUntrusted
=
true
;
}
return
NS_AddSystemEventListener
(
this
aType
aListener
aUseCapture
aWantsUntrusted
)
;
}
EventListenerManager
*
nsGlobalWindowOuter
:
:
GetOrCreateListenerManager
(
)
{
FORWARD_TO_INNER_CREATE
(
GetOrCreateListenerManager
(
)
nullptr
)
;
}
EventListenerManager
*
nsGlobalWindowOuter
:
:
GetExistingListenerManager
(
)
const
{
FORWARD_TO_INNER
(
GetExistingListenerManager
(
)
nullptr
)
;
}
nsIScriptContext
*
nsGlobalWindowOuter
:
:
GetContextForEventHandlers
(
nsresult
*
aRv
)
{
*
aRv
=
NS_ERROR_UNEXPECTED
;
nsIScriptContext
*
scx
;
if
(
(
scx
=
GetContext
(
)
)
)
{
*
aRv
=
NS_OK
;
return
scx
;
}
return
nullptr
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetPrivateParent
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
GetParent
(
)
;
if
(
this
=
=
parent
)
{
nsCOMPtr
<
nsIContent
>
chromeElement
(
do_QueryInterface
(
mChromeEventHandler
)
)
;
if
(
!
chromeElement
)
return
nullptr
;
nsIDocument
*
doc
=
chromeElement
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
return
nullptr
;
return
doc
-
>
GetWindow
(
)
;
}
return
parent
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetPrivateRoot
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
top
=
GetTop
(
)
;
nsCOMPtr
<
nsIContent
>
chromeElement
(
do_QueryInterface
(
mChromeEventHandler
)
)
;
if
(
chromeElement
)
{
nsIDocument
*
doc
=
chromeElement
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
doc
-
>
GetWindow
(
)
;
if
(
parent
)
{
top
=
parent
-
>
GetTop
(
)
;
}
}
}
return
top
;
}
Location
*
nsGlobalWindowOuter
:
:
GetLocation
(
)
{
FORWARD_TO_INNER
(
GetLocation
(
)
nullptr
)
;
}
void
nsGlobalWindowOuter
:
:
ActivateOrDeactivate
(
bool
aActivate
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDoc
)
{
return
;
}
nsCOMPtr
<
nsIWidget
>
mainWidget
=
GetMainWidget
(
)
;
nsCOMPtr
<
nsIWidget
>
topLevelWidget
;
if
(
mainWidget
)
{
topLevelWidget
=
mainWidget
-
>
GetSheetWindowParent
(
)
;
if
(
!
topLevelWidget
)
{
topLevelWidget
=
mainWidget
;
}
}
SetActive
(
aActivate
)
;
if
(
mainWidget
!
=
topLevelWidget
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
topLevelWindow
;
nsIWidgetListener
*
listener
=
topLevelWidget
-
>
GetWidgetListener
(
)
;
if
(
listener
)
{
nsCOMPtr
<
nsIXULWindow
>
window
=
listener
-
>
GetXULWindow
(
)
;
nsCOMPtr
<
nsIInterfaceRequestor
>
req
(
do_QueryInterface
(
window
)
)
;
topLevelWindow
=
do_GetInterface
(
req
)
;
}
if
(
topLevelWindow
)
{
topLevelWindow
-
>
SetActive
(
aActivate
)
;
}
}
}
static
bool
NotifyDocumentTree
(
nsIDocument
*
aDocument
void
*
aData
)
{
aDocument
-
>
EnumerateSubDocuments
(
NotifyDocumentTree
nullptr
)
;
aDocument
-
>
DocumentStatesChanged
(
NS_DOCUMENT_STATE_WINDOW_INACTIVE
)
;
return
true
;
}
void
nsGlobalWindowOuter
:
:
SetActive
(
bool
aActive
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsPIDOMWindow
:
:
SetActive
(
aActive
)
;
if
(
mDoc
)
{
NotifyDocumentTree
(
mDoc
nullptr
)
;
}
}
bool
nsGlobalWindowOuter
:
:
IsTopLevelWindowActive
(
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
treeItem
(
GetDocShell
(
)
)
;
if
(
!
treeItem
)
{
return
false
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
treeItem
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
if
(
!
rootItem
)
{
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWindow
=
rootItem
-
>
GetWindow
(
)
;
return
domWindow
&
&
domWindow
-
>
IsActive
(
)
;
}
void
nsGlobalWindowOuter
:
:
SetIsBackground
(
bool
aIsBackground
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
bool
changed
=
aIsBackground
!
=
IsBackground
(
)
;
SetIsBackgroundInternal
(
aIsBackground
)
;
nsGlobalWindowInner
*
inner
=
GetCurrentInnerWindowInternal
(
)
;
if
(
inner
&
&
changed
)
{
inner
-
>
mTimeoutManager
-
>
UpdateBackgroundState
(
)
;
}
if
(
aIsBackground
)
{
if
(
inner
&
&
changed
)
{
inner
-
>
StopGamepadHaptics
(
)
;
inner
-
>
ResetVRTelemetry
(
true
)
;
}
return
;
}
if
(
inner
)
{
inner
-
>
ResetVRTelemetry
(
false
)
;
inner
-
>
SyncGamepadState
(
)
;
}
}
void
nsGlobalWindowOuter
:
:
SetIsBackgroundInternal
(
bool
aIsBackground
)
{
if
(
mIsBackground
!
=
aIsBackground
)
{
TabGroup
(
)
-
>
WindowChangedBackgroundStatus
(
aIsBackground
)
;
}
mIsBackground
=
aIsBackground
;
}
void
nsGlobalWindowOuter
:
:
MaybeUpdateTouchState
(
)
{
FORWARD_TO_INNER_VOID
(
MaybeUpdateTouchState
(
)
)
;
}
void
nsGlobalWindowOuter
:
:
SetChromeEventHandler
(
EventTarget
*
aChromeEventHandler
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
SetChromeEventHandlerInternal
(
aChromeEventHandler
)
;
RefPtr
<
nsGlobalWindowInner
>
inner
;
for
(
PRCList
*
node
=
PR_LIST_HEAD
(
this
)
;
node
!
=
this
;
node
=
PR_NEXT_LINK
(
inner
)
)
{
inner
=
static_cast
<
nsGlobalWindowInner
*
>
(
node
)
;
NS_ASSERTION
(
!
inner
-
>
mOuterWindow
|
|
inner
-
>
mOuterWindow
=
=
this
"
bad
outer
window
pointer
"
)
;
inner
-
>
SetChromeEventHandlerInternal
(
aChromeEventHandler
)
;
}
}
void
nsGlobalWindowOuter
:
:
SetFocusedNode
(
nsIContent
*
aNode
uint32_t
aFocusMethod
bool
aNeedsFocus
)
{
FORWARD_TO_INNER_VOID
(
SetFocusedNode
(
aNode
aFocusMethod
aNeedsFocus
)
)
;
}
uint32_t
nsGlobalWindowOuter
:
:
GetFocusMethod
(
)
{
FORWARD_TO_INNER
(
GetFocusMethod
(
)
0
)
;
}
bool
nsGlobalWindowOuter
:
:
ShouldShowFocusRing
(
)
{
FORWARD_TO_INNER
(
ShouldShowFocusRing
(
)
false
)
;
}
void
nsGlobalWindowOuter
:
:
SetKeyboardIndicators
(
UIStateChangeType
aShowAccelerators
UIStateChangeType
aShowFocusRings
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsPIDOMWindowOuter
*
piWin
=
GetPrivateRoot
(
)
;
if
(
!
piWin
)
{
return
;
}
MOZ_ASSERT
(
piWin
=
=
this
)
;
bool
oldShouldShowFocusRing
=
ShouldShowFocusRing
(
)
;
nsCOMPtr
<
nsPIWindowRoot
>
windowRoot
=
do_QueryInterface
(
mChromeEventHandler
)
;
if
(
!
windowRoot
)
{
return
;
}
if
(
aShowAccelerators
!
=
UIStateChangeType_NoChange
)
{
windowRoot
-
>
SetShowAccelerators
(
aShowAccelerators
=
=
UIStateChangeType_Set
)
;
}
if
(
aShowFocusRings
!
=
UIStateChangeType_NoChange
)
{
windowRoot
-
>
SetShowFocusRings
(
aShowFocusRings
=
=
UIStateChangeType_Set
)
;
}
nsContentUtils
:
:
SetKeyboardIndicatorsOnRemoteChildren
(
GetOuterWindow
(
)
aShowAccelerators
aShowFocusRings
)
;
bool
newShouldShowFocusRing
=
ShouldShowFocusRing
(
)
;
if
(
mHasFocus
&
&
mFocusedNode
&
&
oldShouldShowFocusRing
!
=
newShouldShowFocusRing
&
&
mFocusedNode
-
>
IsElement
(
)
)
{
if
(
newShouldShowFocusRing
)
{
mFocusedNode
-
>
AsElement
(
)
-
>
AddStates
(
NS_EVENT_STATE_FOCUSRING
)
;
}
else
{
mFocusedNode
-
>
AsElement
(
)
-
>
RemoveStates
(
NS_EVENT_STATE_FOCUSRING
)
;
}
}
}
bool
nsGlobalWindowOuter
:
:
TakeFocus
(
bool
aFocus
uint32_t
aFocusMethod
)
{
FORWARD_TO_INNER
(
TakeFocus
(
aFocus
aFocusMethod
)
false
)
;
}
void
nsGlobalWindowOuter
:
:
SetReadyForFocus
(
)
{
FORWARD_TO_INNER_VOID
(
SetReadyForFocus
(
)
)
;
}
void
nsGlobalWindowOuter
:
:
PageHidden
(
)
{
FORWARD_TO_INNER_VOID
(
PageHidden
(
)
)
;
}
nsresult
nsGlobalWindowOuter
:
:
DispatchAsyncHashchange
(
nsIURI
*
aOldURI
nsIURI
*
aNewURI
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
nsresult
nsGlobalWindowOuter
:
:
DispatchSyncPopState
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
already_AddRefed
<
nsICSSDeclaration
>
nsGlobalWindowOuter
:
:
GetComputedStyle
(
Element
&
aElt
const
nsAString
&
aPseudoElt
ErrorResult
&
aError
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
already_AddRefed
<
nsICSSDeclaration
>
nsGlobalWindowOuter
:
:
GetComputedStyleHelperOuter
(
Element
&
aElt
const
nsAString
&
aPseudoElt
bool
aDefaultStylesOnly
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
auto
*
parent
=
nsGlobalWindowOuter
:
:
Cast
(
GetPrivateParent
(
)
)
;
if
(
!
parent
)
{
return
nullptr
;
}
parent
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
if
(
!
mDocShell
)
{
return
nullptr
;
}
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
}
RefPtr
<
nsComputedDOMStyle
>
compStyle
=
NS_NewComputedDOMStyle
(
&
aElt
aPseudoElt
presShell
aDefaultStylesOnly
?
nsComputedDOMStyle
:
:
eDefaultOnly
:
nsComputedDOMStyle
:
:
eAll
)
;
return
compStyle
.
forget
(
)
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aSink
)
{
NS_ENSURE_ARG_POINTER
(
aSink
)
;
*
aSink
=
nullptr
;
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIDocCharset
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
NS_WARNING
(
"
Using
deprecated
nsIDocCharset
:
use
nsIDocShell
.
GetCharset
(
)
instead
"
)
;
nsCOMPtr
<
nsIDocCharset
>
docCharset
(
do_QueryInterface
(
outer
-
>
mDocShell
)
)
;
docCharset
.
forget
(
aSink
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIWebNavigation
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
outer
-
>
mDocShell
)
)
;
webNav
.
forget
(
aSink
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIDocShell
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
outer
-
>
mDocShell
;
docShell
.
forget
(
aSink
)
;
}
#
ifdef
NS_PRINTING
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIWebBrowserPrint
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
if
(
outer
-
>
mDocShell
)
{
nsCOMPtr
<
nsIContentViewer
>
viewer
;
outer
-
>
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
viewer
)
{
nsCOMPtr
<
nsIWebBrowserPrint
>
webBrowserPrint
(
do_QueryInterface
(
viewer
)
)
;
webBrowserPrint
.
forget
(
aSink
)
;
}
}
}
#
endif
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIDOMWindowUtils
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
if
(
!
mWindowUtils
)
{
mWindowUtils
=
new
nsDOMWindowUtils
(
outer
)
;
}
*
aSink
=
mWindowUtils
;
NS_ADDREF
(
(
(
nsISupports
*
)
*
aSink
)
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsILoadContext
)
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
(
do_QueryInterface
(
outer
-
>
mDocShell
)
)
;
loadContext
.
forget
(
aSink
)
;
}
else
{
return
QueryInterface
(
aIID
aSink
)
;
}
return
*
aSink
?
NS_OK
:
NS_ERROR_NO_INTERFACE
;
}
nsresult
nsGlobalWindowOuter
:
:
RegisterIdleObserver
(
nsIIdleObserver
*
aIdleObserver
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
nsresult
nsGlobalWindowOuter
:
:
UnregisterIdleObserver
(
nsIIdleObserver
*
aIdleObserver
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
bool
nsGlobalWindowOuter
:
:
IsSuspended
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mInnerWindow
)
{
return
true
;
}
return
mInnerWindow
-
>
IsSuspended
(
)
;
}
bool
nsGlobalWindowOuter
:
:
IsFrozen
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mInnerWindow
)
{
return
true
;
}
return
mInnerWindow
-
>
IsFrozen
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
FireDelayedDOMEvents
(
)
{
FORWARD_TO_INNER
(
FireDelayedDOMEvents
(
)
NS_ERROR_UNEXPECTED
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowOuter
:
:
GetParentInternal
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
parent
=
GetParent
(
)
;
if
(
parent
&
&
parent
!
=
this
)
{
return
parent
;
}
return
nullptr
;
}
void
nsGlobalWindowOuter
:
:
UnblockScriptedClosing
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
mBlockScriptedClosingFlag
=
false
;
}
class
AutoUnblockScriptClosing
{
private
:
RefPtr
<
nsGlobalWindowOuter
>
mWin
;
public
:
explicit
AutoUnblockScriptClosing
(
nsGlobalWindowOuter
*
aWin
)
:
mWin
(
aWin
)
{
MOZ_ASSERT
(
mWin
)
;
MOZ_ASSERT
(
mWin
-
>
IsOuterWindow
(
)
)
;
}
~
AutoUnblockScriptClosing
(
)
{
void
(
nsGlobalWindowOuter
:
:
*
run
)
(
)
=
&
nsGlobalWindowOuter
:
:
UnblockScriptedClosing
;
nsCOMPtr
<
nsIRunnable
>
caller
=
NewRunnableMethod
(
"
AutoUnblockScriptClosing
:
:
~
AutoUnblockScriptClosing
"
mWin
run
)
;
mWin
-
>
Dispatch
(
TaskCategory
:
:
Other
caller
.
forget
(
)
)
;
}
}
;
nsresult
nsGlobalWindowOuter
:
:
OpenInternal
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
bool
aDialog
bool
aContentModal
bool
aCalledNoScript
bool
aDoJSFixups
bool
aNavigate
nsIArray
*
argv
nsISupports
*
aExtraArgument
nsIDocShellLoadInfo
*
aLoadInfo
bool
aForceNoOpener
nsPIDOMWindowOuter
*
*
aReturn
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
#
ifdef
DEBUG
uint32_t
argc
=
0
;
if
(
argv
)
argv
-
>
GetLength
(
&
argc
)
;
#
endif
NS_PRECONDITION
(
!
aExtraArgument
|
|
(
!
argv
&
&
argc
=
=
0
)
"
Can
'
t
pass
in
arguments
both
ways
"
)
;
NS_PRECONDITION
(
!
aCalledNoScript
|
|
(
!
argv
&
&
argc
=
=
0
)
"
Can
'
t
pass
JS
args
when
called
via
the
noscript
methods
"
)
;
mozilla
:
:
Maybe
<
AutoUnblockScriptClosing
>
closeUnblocker
;
MOZ_ASSERT
(
aCalledNoScript
|
|
aNavigate
)
;
*
aReturn
=
nullptr
;
nsCOMPtr
<
nsIWebBrowserChrome
>
chrome
=
GetWebBrowserChrome
(
)
;
if
(
!
chrome
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_ASSERTION
(
mDocShell
"
Must
have
docshell
here
"
)
;
bool
forceNoOpener
=
aForceNoOpener
;
if
(
!
forceNoOpener
)
{
nsCharSeparatedTokenizerTemplate
<
nsContentUtils
:
:
IsHTMLWhitespace
>
tok
(
aOptions
'
'
)
;
while
(
tok
.
hasMoreTokens
(
)
)
{
if
(
tok
.
nextToken
(
)
.
EqualsLiteral
(
"
noopener
"
)
)
{
forceNoOpener
=
true
;
break
;
}
}
}
const
bool
checkForPopup
=
!
nsContentUtils
:
:
LegacyIsCallerChromeOrNativeCode
(
)
&
&
!
aDialog
&
&
!
WindowExists
(
aName
forceNoOpener
!
aCalledNoScript
)
;
nsCString
url
;
url
.
SetIsVoid
(
true
)
;
nsresult
rv
=
NS_OK
;
if
(
!
aUrl
.
IsEmpty
(
)
)
{
AppendUTF16toUTF8
(
aUrl
url
)
;
if
(
!
url
.
IsVoid
(
)
&
&
!
aDialog
&
&
aNavigate
)
rv
=
SecurityCheckURL
(
url
.
get
(
)
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
PopupControlState
abuseLevel
=
gPopupControlState
;
if
(
checkForPopup
)
{
abuseLevel
=
RevisePopupAbuseLevel
(
abuseLevel
)
;
if
(
abuseLevel
>
=
openBlocked
)
{
if
(
!
aCalledNoScript
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
entryWindow
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
if
(
entryWindow
&
&
entryWindow
-
>
GetOuterWindow
(
)
=
=
this
)
{
mBlockScriptedClosingFlag
=
true
;
closeUnblocker
.
emplace
(
this
)
;
}
}
FireAbuseEvents
(
aUrl
aName
aOptions
)
;
return
aDoJSFixups
?
NS_OK
:
NS_ERROR_FAILURE
;
}
}
nsCOMPtr
<
mozIDOMWindowProxy
>
domReturn
;
nsCOMPtr
<
nsIWindowWatcher
>
wwatch
=
do_GetService
(
NS_WINDOWWATCHER_CONTRACTID
&
rv
)
;
NS_ENSURE_TRUE
(
wwatch
rv
)
;
NS_ConvertUTF16toUTF8
options
(
aOptions
)
;
NS_ConvertUTF16toUTF8
name
(
aName
)
;
const
char
*
options_ptr
=
aOptions
.
IsEmpty
(
)
?
nullptr
:
options
.
get
(
)
;
const
char
*
name_ptr
=
aName
.
IsEmpty
(
)
?
nullptr
:
name
.
get
(
)
;
nsCOMPtr
<
nsPIWindowWatcher
>
pwwatch
(
do_QueryInterface
(
wwatch
)
)
;
NS_ENSURE_STATE
(
pwwatch
)
;
MOZ_ASSERT_IF
(
checkForPopup
abuseLevel
<
openBlocked
)
;
bool
isPopupSpamWindow
=
checkForPopup
&
&
(
abuseLevel
>
=
openControlled
)
;
{
nsAutoPopupStatePusher
popupStatePusher
(
openAbused
true
)
;
if
(
!
aCalledNoScript
)
{
rv
=
pwwatch
-
>
OpenWindow2
(
this
url
.
IsVoid
(
)
?
nullptr
:
url
.
get
(
)
name_ptr
options_ptr
true
aDialog
aNavigate
argv
isPopupSpamWindow
forceNoOpener
aLoadInfo
getter_AddRefs
(
domReturn
)
)
;
}
else
{
Maybe
<
AutoNoJSAPI
>
nojsapi
;
if
(
!
aContentModal
)
{
nojsapi
.
emplace
(
)
;
}
rv
=
pwwatch
-
>
OpenWindow2
(
this
url
.
IsVoid
(
)
?
nullptr
:
url
.
get
(
)
name_ptr
options_ptr
false
aDialog
aNavigate
aExtraArgument
isPopupSpamWindow
forceNoOpener
aLoadInfo
getter_AddRefs
(
domReturn
)
)
;
}
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
domReturn
NS_OK
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
outerReturn
=
nsPIDOMWindowOuter
:
:
From
(
domReturn
)
;
outerReturn
.
swap
(
*
aReturn
)
;
if
(
aDoJSFixups
)
{
nsCOMPtr
<
nsIDOMChromeWindow
>
chrome_win
(
do_QueryInterface
(
*
aReturn
)
)
;
if
(
!
chrome_win
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
(
*
aReturn
)
-
>
GetDoc
(
)
;
Unused
<
<
doc
;
}
}
return
rv
;
}
already_AddRefed
<
nsIDocShellTreeOwner
>
nsGlobalWindowOuter
:
:
GetTreeOwner
(
)
{
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
mDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
return
treeOwner
.
forget
(
)
;
}
already_AddRefed
<
nsIBaseWindow
>
nsGlobalWindowOuter
:
:
GetTreeOwnerWindow
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
if
(
mDocShell
)
{
mDocShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
}
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
treeOwner
)
;
return
baseWindow
.
forget
(
)
;
}
already_AddRefed
<
nsIWebBrowserChrome
>
nsGlobalWindowOuter
:
:
GetWebBrowserChrome
(
)
{
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
do_GetInterface
(
treeOwner
)
;
return
browserChrome
.
forget
(
)
;
}
nsIScrollableFrame
*
nsGlobalWindowOuter
:
:
GetScrollFrame
(
)
{
if
(
!
mDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
presShell
)
{
return
presShell
-
>
GetRootScrollFrameAsScrollable
(
)
;
}
return
nullptr
;
}
nsresult
nsGlobalWindowOuter
:
:
SecurityCheckURL
(
const
char
*
aURL
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
sourceWindow
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
if
(
!
sourceWindow
)
{
sourceWindow
=
GetCurrentInnerWindow
(
)
;
}
AutoJSContext
cx
;
nsGlobalWindowInner
*
sourceWin
=
nsGlobalWindowInner
:
:
Cast
(
sourceWindow
)
;
JSAutoCompartment
ac
(
cx
sourceWin
-
>
GetGlobalJSObject
(
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
sourceWindow
-
>
GetDoc
(
)
;
nsIURI
*
baseURI
=
nullptr
;
auto
encoding
=
UTF_8_ENCODING
;
if
(
doc
)
{
baseURI
=
doc
-
>
GetDocBaseURI
(
)
;
encoding
=
doc
-
>
GetDocumentCharacterSet
(
)
;
}
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
nsDependentCString
(
aURL
)
encoding
baseURI
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_DOM_SYNTAX_ERR
;
}
if
(
NS_FAILED
(
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
CheckLoadURIFromScript
(
cx
uri
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
bool
nsGlobalWindowOuter
:
:
IsPrivateBrowsing
(
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
GetDocShell
(
)
)
;
return
loadContext
&
&
loadContext
-
>
UsePrivateBrowsing
(
)
;
}
void
nsGlobalWindowOuter
:
:
FlushPendingNotifications
(
FlushType
aType
)
{
if
(
mDoc
)
{
mDoc
-
>
FlushPendingNotifications
(
aType
)
;
}
}
void
nsGlobalWindowOuter
:
:
EnsureSizeAndPositionUpToDate
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
nsGlobalWindowOuter
*
parent
=
nsGlobalWindowOuter
:
:
Cast
(
GetPrivateParent
(
)
)
;
if
(
parent
)
{
parent
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
already_AddRefed
<
nsISupports
>
nsGlobalWindowOuter
:
:
SaveWindowState
(
)
{
NS_PRECONDITION
(
IsOuterWindow
(
)
"
Can
'
t
save
the
inner
window
'
s
state
"
)
;
if
(
!
mContext
|
|
!
GetWrapperPreserveColor
(
)
)
{
return
nullptr
;
}
nsGlobalWindowInner
*
inner
=
GetCurrentInnerWindowInternal
(
)
;
NS_ASSERTION
(
inner
"
No
inner
window
to
save
"
)
;
inner
-
>
Freeze
(
)
;
nsCOMPtr
<
nsISupports
>
state
=
new
WindowStateHolder
(
inner
)
;
#
ifdef
DEBUG_PAGE_CACHE
printf
(
"
saving
window
state
state
=
%
p
\
n
"
(
void
*
)
state
)
;
#
endif
return
state
.
forget
(
)
;
}
nsresult
nsGlobalWindowOuter
:
:
RestoreWindowState
(
nsISupports
*
aState
)
{
NS_ASSERTION
(
IsOuterWindow
(
)
"
Cannot
restore
an
inner
window
"
)
;
if
(
!
mContext
|
|
!
GetWrapperPreserveColor
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
WindowStateHolder
>
holder
=
do_QueryInterface
(
aState
)
;
NS_ENSURE_TRUE
(
holder
NS_ERROR_FAILURE
)
;
#
ifdef
DEBUG_PAGE_CACHE
printf
(
"
restoring
window
state
state
=
%
p
\
n
"
(
void
*
)
holder
)
;
#
endif
nsGlobalWindowInner
*
inner
=
GetCurrentInnerWindowInternal
(
)
;
nsIContent
*
focusedNode
=
inner
-
>
GetFocusedNode
(
)
;
if
(
IsLink
(
focusedNode
)
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
nsCOMPtr
<
nsIDOMElement
>
focusedElement
(
do_QueryInterface
(
focusedNode
)
)
;
fm
-
>
SetFocus
(
focusedElement
nsIFocusManager
:
:
FLAG_NOSCROLL
|
nsIFocusManager
:
:
FLAG_SHOWRING
)
;
}
}
inner
-
>
Thaw
(
)
;
holder
-
>
DidRestoreWindow
(
)
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
EnableDeviceSensor
(
uint32_t
aType
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
DisableDeviceSensor
(
uint32_t
aType
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
nsGlobalWindowOuter
:
:
EnableOrientationChangeListener
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
DisableOrientationChangeListener
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
#
endif
void
nsGlobalWindowOuter
:
:
SetHasGamepadEventListener
(
bool
aHasGamepad
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
EventListenerAdded
(
nsAtom
*
aType
)
{
}
void
nsGlobalWindowOuter
:
:
EventListenerRemoved
(
nsAtom
*
aType
)
{
}
void
nsGlobalWindowOuter
:
:
EnableTimeChangeNotifications
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
DisableTimeChangeNotifications
(
)
{
MOZ_CRASH
(
"
Virtual
inner
window
only
function
"
)
;
}
void
nsGlobalWindowOuter
:
:
AddSizeOfIncludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
{
aWindowSizes
.
mDOMOtherSize
+
=
aWindowSizes
.
mState
.
mMallocSizeOf
(
this
)
;
if
(
mNavigator
)
{
aWindowSizes
.
mDOMOtherSize
+
=
mNavigator
-
>
SizeOfIncludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
aWindowSizes
.
mDOMEventTargetsSize
+
=
mEventTargetObjects
.
ShallowSizeOfExcludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
for
(
auto
iter
=
mEventTargetObjects
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DOMEventTargetHelper
*
et
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
nsCOMPtr
<
nsISizeOfEventTarget
>
iSizeOf
=
do_QueryObject
(
et
)
)
{
aWindowSizes
.
mDOMEventTargetsSize
+
=
iSizeOf
-
>
SizeOfEventTargetIncludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
if
(
EventListenerManager
*
elm
=
et
-
>
GetExistingListenerManager
(
)
)
{
aWindowSizes
.
mDOMEventListenersCount
+
=
elm
-
>
ListenerCount
(
)
;
}
+
+
aWindowSizes
.
mDOMEventTargetsCount
;
}
}
bool
nsGlobalWindowOuter
:
:
UpdateVRDisplays
(
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
VRDisplay
>
>
&
aDevices
)
{
FORWARD_TO_INNER
(
UpdateVRDisplays
(
aDevices
)
false
)
;
}
uint32_t
nsGlobalWindowOuter
:
:
GetAutoActivateVRDisplayID
(
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
uint32_t
retVal
=
mAutoActivateVRDisplayID
;
mAutoActivateVRDisplayID
=
0
;
return
retVal
;
}
void
nsGlobalWindowOuter
:
:
SetAutoActivateVRDisplayID
(
uint32_t
aAutoActivateVRDisplayID
)
{
MOZ_ASSERT
(
IsOuterWindow
(
)
)
;
mAutoActivateVRDisplayID
=
aAutoActivateVRDisplayID
;
}
already_AddRefed
<
nsWindowRoot
>
nsGlobalWindowOuter
:
:
GetWindowRootOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
nsCOMPtr
<
nsPIWindowRoot
>
root
=
GetTopWindowRoot
(
)
;
return
root
.
forget
(
)
.
downcast
<
nsWindowRoot
>
(
)
;
}
void
nsGlobalWindowOuter
:
:
SetCursorOuter
(
const
nsAString
&
aCursor
ErrorResult
&
aError
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
int32_t
cursor
;
if
(
aCursor
.
EqualsLiteral
(
"
auto
"
)
)
cursor
=
NS_STYLE_CURSOR_AUTO
;
else
{
nsCSSKeyword
keyword
=
nsCSSKeywords
:
:
LookupKeyword
(
aCursor
)
;
if
(
!
nsCSSProps
:
:
FindKeyword
(
keyword
nsCSSProps
:
:
kCursorKTable
cursor
)
)
{
return
;
}
}
RefPtr
<
nsPresContext
>
presContext
;
if
(
mDocShell
)
{
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
}
if
(
presContext
)
{
nsCOMPtr
<
nsIPresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsViewManager
*
vm
=
presShell
-
>
GetViewManager
(
)
;
if
(
!
vm
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsView
*
rootView
=
vm
-
>
GetRootView
(
)
;
if
(
!
rootView
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIWidget
*
widget
=
rootView
-
>
GetNearestWidget
(
nullptr
)
;
if
(
!
widget
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aError
=
presContext
-
>
EventStateManager
(
)
-
>
SetCursor
(
cursor
nullptr
false
0
.
0f
0
.
0f
widget
true
)
;
}
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
GetBrowserDOMWindow
(
nsIBrowserDOMWindow
*
*
aBrowserWindow
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
FORWARD_TO_INNER
(
GetBrowserDOMWindow
(
aBrowserWindow
)
NS_ERROR_UNEXPECTED
)
;
}
nsIBrowserDOMWindow
*
nsGlobalWindowOuter
:
:
GetBrowserDOMWindowOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
IsChromeWindow
(
)
)
;
return
mChromeFields
.
mBrowserDOMWindow
;
}
void
nsGlobalWindowOuter
:
:
SetBrowserDOMWindowOuter
(
nsIBrowserDOMWindow
*
aBrowserWindow
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
IsChromeWindow
(
)
)
;
mChromeFields
.
mBrowserDOMWindow
=
aBrowserWindow
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
GetMessageManager
(
nsIMessageBroadcaster
*
*
aManager
)
{
FORWARD_TO_INNER
(
GetMessageManager
(
aManager
)
NS_ERROR_UNEXPECTED
)
;
}
NS_IMETHODIMP
nsGlobalWindowOuter
:
:
GetGroupMessageManager
(
const
nsAString
&
aGroup
nsIMessageBroadcaster
*
*
aManager
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
FORWARD_TO_INNER
(
GetGroupMessageManager
(
aGroup
aManager
)
NS_ERROR_UNEXPECTED
)
;
}
nsresult
nsGlobalWindowOuter
:
:
SetOpenerForInitialContentBrowser
(
mozIDOMWindowProxy
*
aOpenerWindow
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
MOZ_ASSERT
(
!
mChromeFields
.
mOpenerForInitialContentBrowser
)
;
mChromeFields
.
mOpenerForInitialContentBrowser
=
aOpenerWindow
;
return
NS_OK
;
}
nsresult
nsGlobalWindowOuter
:
:
TakeOpenerForInitialContentBrowser
(
mozIDOMWindowProxy
*
*
aOpenerWindow
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
mChromeFields
.
mOpenerForInitialContentBrowser
.
forget
(
aOpenerWindow
)
;
return
NS_OK
;
}
void
nsGlobalWindowOuter
:
:
InitWasOffline
(
)
{
mWasOffline
=
NS_IsOffline
(
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
int16_t
nsGlobalWindowOuter
:
:
Orientation
(
CallerType
aCallerType
)
const
{
return
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
?
0
:
WindowOrientationObserver
:
:
OrientationAngle
(
)
;
}
#
endif
bool
nsGlobalWindowOuter
:
:
GetIsPrerendered
(
)
{
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
return
docShell
&
&
docShell
-
>
GetIsPrerendered
(
)
;
}
void
nsPIDOMWindowOuter
:
:
SetLargeAllocStatus
(
LargeAllocStatus
aStatus
)
{
MOZ_ASSERT
(
mLargeAllocStatus
=
=
LargeAllocStatus
:
:
NONE
)
;
mLargeAllocStatus
=
aStatus
;
}
bool
nsPIDOMWindowOuter
:
:
IsTopLevelWindow
(
)
{
return
nsGlobalWindowOuter
:
:
Cast
(
this
)
-
>
IsTopLevelWindow
(
)
;
}
bool
nsPIDOMWindowOuter
:
:
HadOriginalOpener
(
)
const
{
return
nsGlobalWindowOuter
:
:
Cast
(
this
)
-
>
HadOriginalOpener
(
)
;
}
void
nsGlobalWindowOuter
:
:
ReportLargeAllocStatus
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
uint32_t
errorFlags
=
nsIScriptError
:
:
warningFlag
;
const
char
*
message
=
nullptr
;
switch
(
mLargeAllocStatus
)
{
case
LargeAllocStatus
:
:
SUCCESS
:
errorFlags
=
nsIScriptError
:
:
infoFlag
;
message
=
"
LargeAllocationSuccess
"
;
break
;
case
LargeAllocStatus
:
:
NON_WIN32
:
errorFlags
=
nsIScriptError
:
:
infoFlag
;
message
=
"
LargeAllocationNonWin32
"
;
break
;
case
LargeAllocStatus
:
:
NON_GET
:
message
=
"
LargeAllocationNonGetRequest
"
;
break
;
case
LargeAllocStatus
:
:
NON_E10S
:
message
=
"
LargeAllocationNonE10S
"
;
break
;
case
LargeAllocStatus
:
:
NOT_ONLY_TOPLEVEL_IN_TABGROUP
:
message
=
"
LargeAllocationNotOnlyToplevelInTabGroup
"
;
break
;
default
:
return
;
}
nsContentUtils
:
:
ReportToConsole
(
errorFlags
NS_LITERAL_CSTRING
(
"
DOM
"
)
mDoc
nsContentUtils
:
:
eDOM_PROPERTIES
message
)
;
}
void
nsGlobalWindowOuter
:
:
RedefineProperty
(
JSContext
*
aCx
const
char
*
aPropName
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aError
)
{
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
GetWrapperPreserveColor
(
)
)
;
if
(
!
thisObj
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
if
(
!
JS_WrapObject
(
aCx
&
thisObj
)
|
|
!
JS_DefineProperty
(
aCx
thisObj
aPropName
aValue
JSPROP_ENUMERATE
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
}
}
#
ifdef
_WINDOWS_
#
error
"
Never
include
windows
.
h
in
this
file
!
"
#
endif
void
nsGlobalWindowOuter
:
:
CheckForDPIChange
(
)
{
if
(
mDocShell
)
{
RefPtr
<
nsPresContext
>
presContext
;
mDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
presContext
)
{
if
(
presContext
-
>
DeviceContext
(
)
-
>
CheckDPIChange
(
)
)
{
presContext
-
>
UIResolutionChanged
(
)
;
}
}
}
}
mozilla
:
:
dom
:
:
TabGroup
*
nsGlobalWindowOuter
:
:
TabGroupOuter
(
)
{
MOZ_RELEASE_ASSERT
(
IsOuterWindow
(
)
)
;
if
(
!
mTabGroup
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
piOpener
=
do_QueryReferent
(
mOpener
)
;
nsPIDOMWindowOuter
*
opener
=
GetSanitizedOpener
(
piOpener
)
;
nsPIDOMWindowOuter
*
parent
=
GetScriptableParentOrNull
(
)
;
MOZ_ASSERT
(
!
parent
|
|
!
opener
"
Only
one
of
parent
and
opener
may
be
provided
"
)
;
mozilla
:
:
dom
:
:
TabGroup
*
toJoin
=
nullptr
;
if
(
GetDocShell
(
)
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
toJoin
=
TabGroup
:
:
GetChromeTabGroup
(
)
;
}
else
if
(
opener
)
{
toJoin
=
opener
-
>
TabGroup
(
)
;
}
else
if
(
parent
)
{
toJoin
=
parent
-
>
TabGroup
(
)
;
}
else
{
toJoin
=
TabGroup
:
:
GetFromWindow
(
this
)
;
}
#
ifdef
DEBUG
mozilla
:
:
dom
:
:
TabGroup
*
testGroup
=
TabGroup
:
:
GetFromWindow
(
this
)
;
MOZ_ASSERT_IF
(
testGroup
testGroup
=
=
toJoin
)
;
#
endif
mTabGroup
=
mozilla
:
:
dom
:
:
TabGroup
:
:
Join
(
this
toJoin
)
;
}
MOZ_ASSERT
(
mTabGroup
)
;
#
ifdef
DEBUG
if
(
!
mIsValidatingTabGroup
)
{
mIsValidatingTabGroup
=
true
;
if
(
mIsChrome
)
{
MOZ_ASSERT
(
mTabGroup
=
=
TabGroup
:
:
GetChromeTabGroup
(
)
)
;
}
else
{
RefPtr
<
nsPIDOMWindowOuter
>
parent
=
GetScriptableParentOrNull
(
)
;
MOZ_ASSERT_IF
(
parent
parent
-
>
TabGroup
(
)
=
=
mTabGroup
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
piOpener
=
do_QueryReferent
(
mOpener
)
;
nsPIDOMWindowOuter
*
opener
=
GetSanitizedOpener
(
piOpener
)
;
MOZ_ASSERT_IF
(
opener
&
&
nsGlobalWindowOuter
:
:
Cast
(
opener
)
!
=
this
opener
-
>
TabGroup
(
)
=
=
mTabGroup
)
;
}
mIsValidatingTabGroup
=
false
;
}
#
endif
return
mTabGroup
;
}
nsresult
nsGlobalWindowOuter
:
:
Dispatch
(
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
return
DispatcherTrait
:
:
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
nsISerialEventTarget
*
nsGlobalWindowOuter
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
EventTargetFor
(
aCategory
)
;
}
return
DispatcherTrait
:
:
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
nsGlobalWindowOuter
:
:
AbstractMainThreadFor
(
TaskCategory
aCategory
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
AbstractMainThreadFor
(
aCategory
)
;
}
return
DispatcherTrait
:
:
AbstractMainThreadFor
(
aCategory
)
;
}
nsGlobalWindowOuter
:
:
TemporarilyDisableDialogs
:
:
TemporarilyDisableDialogs
(
nsGlobalWindowOuter
*
aWindow
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
MOZ_ASSERT
(
aWindow
)
;
nsGlobalWindowOuter
*
topWindowOuter
=
aWindow
-
>
GetScriptableTopInternal
(
)
;
if
(
!
topWindowOuter
)
{
NS_ERROR
(
"
nsGlobalWindowOuter
:
:
TemporarilyDisableDialogs
used
without
a
top
"
"
window
?
"
)
;
return
;
}
nsGlobalWindowInner
*
topWindow
=
topWindowOuter
-
>
GetCurrentInnerWindowInternal
(
)
;
if
(
topWindow
)
{
mTopWindow
=
topWindow
;
mSavedDialogsEnabled
=
mTopWindow
-
>
mAreDialogsEnabled
;
mTopWindow
-
>
mAreDialogsEnabled
=
false
;
}
}
nsGlobalWindowOuter
:
:
TemporarilyDisableDialogs
:
:
~
TemporarilyDisableDialogs
(
)
{
if
(
mTopWindow
)
{
mTopWindow
-
>
mAreDialogsEnabled
=
mSavedDialogsEnabled
;
}
}
already_AddRefed
<
nsGlobalWindowOuter
>
nsGlobalWindowOuter
:
:
Create
(
bool
aIsChrome
)
{
RefPtr
<
nsGlobalWindowOuter
>
window
=
new
nsGlobalWindowOuter
(
)
;
if
(
aIsChrome
)
{
window
-
>
mIsChrome
=
true
;
window
-
>
mCleanMessageManager
=
true
;
}
window
-
>
InitWasOffline
(
)
;
return
window
.
forget
(
)
;
}
