#
include
"
nsGlobalWindow
.
h
"
#
include
<
algorithm
>
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
Navigator
.
h
"
#
include
"
nsContentSecurityManager
.
h
"
#
include
"
nsScreen
.
h
"
#
include
"
nsHistory
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsIDOMStorageManager
.
h
"
#
include
"
mozilla
/
dom
/
DOMPrefs
.
h
"
#
include
"
mozilla
/
dom
/
LocalStorage
.
h
"
#
include
"
mozilla
/
dom
/
Storage
.
h
"
#
include
"
mozilla
/
dom
/
IdleRequest
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
dom
/
StorageEvent
.
h
"
#
include
"
mozilla
/
dom
/
StorageEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
StorageNotifierService
.
h
"
#
include
"
mozilla
/
dom
/
StorageUtils
.
h
"
#
include
"
mozilla
/
dom
/
Timeout
.
h
"
#
include
"
mozilla
/
dom
/
TimeoutHandler
.
h
"
#
include
"
mozilla
/
dom
/
TimeoutManager
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
mozilla
/
dom
/
WindowOrientationObserver
.
h
"
#
endif
#
include
"
nsDOMOfflineResourceList
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIIdleService
.
h
"
#
include
"
nsISizeOfEventTarget
.
h
"
#
include
"
nsDOMJSUtils
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
nsIDOMWindowCollection
.
h
"
#
include
"
nsDOMWindowList
.
h
"
#
include
"
mozilla
/
dom
/
WakeLock
.
h
"
#
include
"
mozilla
/
dom
/
power
/
PowerManagerService
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIDocumentLoader
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsIScriptTimeoutHandler
.
h
"
#
include
"
nsITimeoutHandler
.
h
"
#
include
"
nsIController
.
h
"
#
include
"
nsScriptNameSpaceManager
.
h
"
#
include
"
nsISlowScriptDebug
.
h
"
#
include
"
nsWindowMemoryReporter
.
h
"
#
include
"
nsWindowSizes
.
h
"
#
include
"
WindowNamedPropertiesHandler
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
WindowDestroyedEvent
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jswrapper
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsDOMClassInfo
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
BarProps
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsLayoutStatics
.
h
"
#
include
"
nsCCUncollectableMarker
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Debug
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
ProcessHangMonitor
.
h
"
#
include
"
mozilla
/
ThrottledEventQueue
.
h
"
#
include
"
AudioChannelService
.
h
"
#
include
"
nsAboutProtocolUtils
.
h
"
#
include
"
nsCharTraits
.
h
"
#
include
"
PostMessageEvent
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsIWidgetListener
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDeviceSensors
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
Crypto
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMEvent
.
h
"
#
include
"
nsIDOMOfflineResourceList
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsIEmbeddingSiteWindow
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISelection
.
h
"
#
include
"
nsIPrompt
.
h
"
#
include
"
nsIPromptService
.
h
"
#
include
"
nsIPromptFactory
.
h
"
#
include
"
nsIAddonPolicyService
.
h
"
#
include
"
nsIWritablePropertyBag2
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIWebBrowserFind
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsDOMCID
.
h
"
#
include
"
nsDOMWindowUtils
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsPIWindowWatcher
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIControllers
.
h
"
#
include
"
nsIControllerContext
.
h
"
#
include
"
nsGlobalWindowCommands
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsIDOMFileList
.
h
"
#
include
"
nsIURIFixup
.
h
"
#
ifndef
DEBUG
#
include
"
nsIAppStartup
.
h
"
#
include
"
nsToolkitCompsCID
.
h
"
#
endif
#
include
"
nsCDefaultURIFixup
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIXULWindow
.
h
"
#
include
"
nsITimedChannel
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
ifdef
MOZ_XUL
#
include
"
nsIDOMXULControlElement
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
endif
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
nsIJARChannel
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
xpcprivate
.
h
"
#
ifdef
NS_PRINTING
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIPrintSettingsService
.
h
"
#
include
"
nsIWebBrowserPrint
.
h
"
#
endif
#
include
"
nsWindowRoot
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsIArray
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsXBLService
.
h
"
#
include
"
nsIPopupWindowManager
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsXPCOMCID
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
prenv
.
h
"
#
include
"
mozilla
/
dom
/
IDBFactory
.
h
"
#
include
"
mozilla
/
dom
/
MessageChannel
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
Gamepad
.
h
"
#
include
"
mozilla
/
dom
/
GamepadManager
.
h
"
#
include
"
gfxVR
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplay
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplayEvent
.
h
"
#
include
"
mozilla
/
dom
/
VRDisplayEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
VREventObserver
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
Layers
.
h
"
#
include
"
mozilla
/
AddonPathService
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
dom
/
Location
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsWrapperCacheInlines
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
prrng
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
mozilla
/
dom
/
AudioContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowserElementDictionariesBinding
.
h
"
#
include
"
mozilla
/
dom
/
cache
/
CacheStorage
.
h
"
#
include
"
mozilla
/
dom
/
Console
.
h
"
#
include
"
mozilla
/
dom
/
Fetch
.
h
"
#
include
"
mozilla
/
dom
/
FunctionBinding
.
h
"
#
include
"
mozilla
/
dom
/
HashChangeEvent
.
h
"
#
include
"
mozilla
/
dom
/
IntlUtils
.
h
"
#
include
"
mozilla
/
dom
/
PopStateEvent
.
h
"
#
include
"
mozilla
/
dom
/
PopupBlockedEvent
.
h
"
#
include
"
mozilla
/
dom
/
PrimitiveConversions
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
nsITabChild
.
h
"
#
include
"
mozilla
/
dom
/
MediaQueryList
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
NavigatorBinding
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmap
.
h
"
#
include
"
mozilla
/
dom
/
ImageBitmapBinding
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorker
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistration
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationDescriptor
.
h
"
#
include
"
mozilla
/
dom
/
U2F
.
h
"
#
include
"
mozilla
/
dom
/
WebIDLGlobalNameHash
.
h
"
#
include
"
mozilla
/
dom
/
Worklet
.
h
"
#
ifdef
HAVE_SIDEBAR
#
include
"
mozilla
/
dom
/
ExternalBinding
.
h
"
#
endif
#
ifdef
MOZ_WEBSPEECH
#
include
"
mozilla
/
dom
/
SpeechSynthesis
.
h
"
#
endif
#
include
"
mozilla
/
dom
/
ClientManager
.
h
"
#
include
"
mozilla
/
dom
/
ClientSource
.
h
"
#
include
"
mozilla
/
dom
/
ClientState
.
h
"
#
ifdef
check
class
nsIScriptTimeoutHandler
;
#
undef
check
#
endif
#
include
"
AccessCheck
.
h
"
#
ifdef
ANDROID
#
include
<
android
/
log
.
h
>
#
endif
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
else
#
include
<
unistd
.
h
>
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
mozilla
:
:
TimeStamp
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
dom
:
:
cache
:
:
CacheStorage
;
#
define
FORWARD_TO_OUTER
(
method
args
err_rval
)
\
PR_BEGIN_MACRO
\
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
\
if
(
!
HasActiveDocument
(
)
)
{
\
NS_WARNING
(
outer
?
\
"
Inner
window
does
not
have
active
document
.
"
:
\
"
No
outer
window
available
!
"
)
;
\
return
err_rval
;
\
}
\
return
outer
-
>
method
args
;
\
PR_END_MACRO
#
define
FORWARD_TO_OUTER_OR_THROW
(
method
args
errorresult
err_rval
)
\
PR_BEGIN_MACRO
\
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
\
if
(
MOZ_LIKELY
(
HasActiveDocument
(
)
)
)
{
\
return
outer
-
>
method
args
;
\
}
\
if
(
!
outer
)
{
\
NS_WARNING
(
"
No
outer
window
available
!
"
)
;
\
errorresult
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
\
}
else
{
\
errorresult
.
Throw
(
NS_ERROR_XPC_SECURITY_MANAGER_VETO
)
;
\
}
\
return
err_rval
;
\
PR_END_MACRO
#
define
FORWARD_TO_OUTER_VOID
(
method
args
)
\
PR_BEGIN_MACRO
\
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
\
if
(
!
HasActiveDocument
(
)
)
{
\
NS_WARNING
(
outer
?
\
"
Inner
window
does
not
have
active
document
.
"
:
\
"
No
outer
window
available
!
"
)
;
\
return
;
\
}
\
outer
-
>
method
args
;
\
return
;
\
PR_END_MACRO
#
define
DOM_TOUCH_LISTENER_ADDED
"
dom
-
touch
-
listener
-
added
"
#
define
MEMORY_PRESSURE_OBSERVER_TOPIC
"
memory
-
pressure
"
#
define
DEFAULT_SUCCESSIVE_DIALOG_TIME_LIMIT
3
/
/
3
sec
#
define
MAX_SUCCESSIVE_DIALOG_COUNT
5
#
define
MAX_IDLE_FUZZ_TIME_MS
90000
#
define
MIN_IDLE_NOTIFICATION_TIME_S
1
static
LazyLogModule
gDOMLeakPRLogInner
(
"
DOMLeakInner
"
)
;
static
bool
gIdleObserversAPIFuzzTimeDisabled
=
false
;
static
FILE
*
gDumpFile
=
nullptr
;
nsGlobalWindowInner
:
:
InnerWindowByIdTable
*
nsGlobalWindowInner
:
:
sInnerWindowsById
=
nullptr
;
bool
nsGlobalWindowInner
:
:
sDragServiceDisabled
=
false
;
bool
nsGlobalWindowInner
:
:
sMouseDown
=
false
;
class
nsGlobalWindowObserver
final
:
public
nsIObserver
public
nsIInterfaceRequestor
public
StorageNotificationObserver
{
public
:
explicit
nsGlobalWindowObserver
(
nsGlobalWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
NS_DECL_ISUPPORTS
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
if
(
!
mWindow
)
return
NS_OK
;
return
mWindow
-
>
Observe
(
aSubject
aTopic
aData
)
;
}
void
Forget
(
)
{
mWindow
=
nullptr
;
}
NS_IMETHOD
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
override
{
if
(
mWindow
&
&
aIID
.
Equals
(
NS_GET_IID
(
nsIDOMWindow
)
)
&
&
mWindow
)
{
return
mWindow
-
>
QueryInterface
(
aIID
aResult
)
;
}
return
NS_NOINTERFACE
;
}
void
ObserveStorageNotification
(
StorageEvent
*
aEvent
const
char16_t
*
aStorageType
bool
aPrivateBrowsing
)
override
{
if
(
mWindow
)
{
mWindow
-
>
ObserveStorageNotification
(
aEvent
aStorageType
aPrivateBrowsing
)
;
}
}
nsIPrincipal
*
GetPrincipal
(
)
const
override
{
return
mWindow
?
mWindow
-
>
GetPrincipal
(
)
:
nullptr
;
}
bool
IsPrivateBrowsing
(
)
const
override
{
return
mWindow
?
mWindow
-
>
IsPrivateBrowsing
(
)
:
false
;
}
nsIEventTarget
*
GetEventTarget
(
)
const
override
{
return
mWindow
?
mWindow
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
:
nullptr
;
}
private
:
~
nsGlobalWindowObserver
(
)
=
default
;
nsGlobalWindowInner
*
MOZ_NON_OWNING_REF
mWindow
;
}
;
NS_IMPL_ISUPPORTS
(
nsGlobalWindowObserver
nsIObserver
nsIInterfaceRequestor
)
class
IdleRequestExecutor
;
class
IdleRequestExecutorTimeoutHandler
final
:
public
TimeoutHandler
{
public
:
explicit
IdleRequestExecutorTimeoutHandler
(
IdleRequestExecutor
*
aExecutor
)
:
mExecutor
(
aExecutor
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
IdleRequestExecutorTimeoutHandler
TimeoutHandler
)
nsresult
Call
(
)
override
;
private
:
~
IdleRequestExecutorTimeoutHandler
(
)
override
{
}
RefPtr
<
IdleRequestExecutor
>
mExecutor
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
IdleRequestExecutorTimeoutHandler
TimeoutHandler
mExecutor
)
NS_IMPL_ADDREF_INHERITED
(
IdleRequestExecutorTimeoutHandler
TimeoutHandler
)
NS_IMPL_RELEASE_INHERITED
(
IdleRequestExecutorTimeoutHandler
TimeoutHandler
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
IdleRequestExecutorTimeoutHandler
)
NS_INTERFACE_MAP_END_INHERITING
(
TimeoutHandler
)
class
IdleRequestExecutor
final
:
public
nsIRunnable
public
nsICancelableRunnable
public
nsINamed
public
nsIIdleRunnable
{
public
:
explicit
IdleRequestExecutor
(
nsGlobalWindowInner
*
aWindow
)
:
mDispatched
(
false
)
mDeadline
(
TimeStamp
:
:
Now
(
)
)
mWindow
(
aWindow
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mWindow
)
;
mIdlePeriodLimit
=
{
mDeadline
mWindow
-
>
LastIdleRequestHandle
(
)
}
;
mDelayedExecutorDispatcher
=
new
IdleRequestExecutorTimeoutHandler
(
this
)
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
IdleRequestExecutor
nsIRunnable
)
NS_DECL_NSIRUNNABLE
NS_DECL_NSINAMED
nsresult
Cancel
(
)
override
;
void
SetDeadline
(
TimeStamp
aDeadline
)
override
;
bool
IsCancelled
(
)
const
{
return
!
mWindow
|
|
mWindow
-
>
InnerObjectsFreed
(
)
;
}
bool
IneligibleForCurrentIdlePeriod
(
IdleRequest
*
aRequest
)
const
{
return
aRequest
-
>
Handle
(
)
>
=
mIdlePeriodLimit
.
mLastRequestIdInIdlePeriod
&
&
TimeStamp
:
:
Now
(
)
<
=
mIdlePeriodLimit
.
mEndOfIdlePeriod
;
}
void
MaybeUpdateIdlePeriodLimit
(
)
;
void
MaybeDispatch
(
TimeStamp
aDelayUntil
=
TimeStamp
(
)
)
;
void
ScheduleDispatch
(
)
;
private
:
struct
IdlePeriodLimit
{
TimeStamp
mEndOfIdlePeriod
;
uint32_t
mLastRequestIdInIdlePeriod
;
}
;
void
DelayedDispatch
(
uint32_t
aDelay
)
;
~
IdleRequestExecutor
(
)
override
{
}
bool
mDispatched
;
TimeStamp
mDeadline
;
IdlePeriodLimit
mIdlePeriodLimit
;
RefPtr
<
nsGlobalWindowInner
>
mWindow
;
nsCOMPtr
<
nsITimeoutHandler
>
mDelayedExecutorDispatcher
;
Maybe
<
int32_t
>
mDelayedExecutorHandle
;
}
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
IdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
IdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
IdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
IdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDelayedExecutorDispatcher
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
IdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDelayedExecutorDispatcher
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
IdleRequestExecutor
)
NS_INTERFACE_MAP_ENTRY
(
nsIRunnable
)
NS_INTERFACE_MAP_ENTRY
(
nsICancelableRunnable
)
NS_INTERFACE_MAP_ENTRY
(
nsINamed
)
NS_INTERFACE_MAP_ENTRY
(
nsIIdleRunnable
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIRunnable
)
NS_INTERFACE_MAP_END
NS_IMETHODIMP
IdleRequestExecutor
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
AssignASCII
(
"
IdleRequestExecutor
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
IdleRequestExecutor
:
:
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDispatched
=
false
;
if
(
mWindow
)
{
return
mWindow
-
>
ExecuteIdleRequest
(
mDeadline
)
;
}
return
NS_OK
;
}
nsresult
IdleRequestExecutor
:
:
Cancel
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mDelayedExecutorHandle
&
&
mWindow
)
{
mWindow
-
>
TimeoutManager
(
)
.
ClearTimeout
(
mDelayedExecutorHandle
.
value
(
)
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
)
;
}
mWindow
=
nullptr
;
return
NS_OK
;
}
void
IdleRequestExecutor
:
:
SetDeadline
(
TimeStamp
aDeadline
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mWindow
)
{
return
;
}
mDeadline
=
aDeadline
;
}
void
IdleRequestExecutor
:
:
MaybeUpdateIdlePeriodLimit
(
)
{
if
(
TimeStamp
:
:
Now
(
)
>
mIdlePeriodLimit
.
mEndOfIdlePeriod
)
{
mIdlePeriodLimit
=
{
mDeadline
mWindow
-
>
LastIdleRequestHandle
(
)
}
;
}
}
void
IdleRequestExecutor
:
:
MaybeDispatch
(
TimeStamp
aDelayUntil
)
{
if
(
mDispatched
|
|
IsCancelled
(
)
)
{
return
;
}
mDispatched
=
true
;
nsPIDOMWindowOuter
*
outer
=
mWindow
-
>
GetOuterWindow
(
)
;
if
(
outer
&
&
outer
-
>
AsOuter
(
)
-
>
IsBackground
(
)
)
{
DelayedDispatch
(
0
)
;
return
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
!
aDelayUntil
|
|
aDelayUntil
<
now
)
{
ScheduleDispatch
(
)
;
return
;
}
TimeDuration
delay
=
aDelayUntil
-
now
;
DelayedDispatch
(
static_cast
<
uint32_t
>
(
delay
.
ToMilliseconds
(
)
)
)
;
}
void
IdleRequestExecutor
:
:
ScheduleDispatch
(
)
{
MOZ_ASSERT
(
mWindow
)
;
mDelayedExecutorHandle
=
Nothing
(
)
;
RefPtr
<
IdleRequestExecutor
>
request
=
this
;
NS_IdleDispatchToCurrentThread
(
request
.
forget
(
)
)
;
}
void
IdleRequestExecutor
:
:
DelayedDispatch
(
uint32_t
aDelay
)
{
MOZ_ASSERT
(
mWindow
)
;
MOZ_ASSERT
(
mDelayedExecutorHandle
.
isNothing
(
)
)
;
int32_t
handle
;
mWindow
-
>
TimeoutManager
(
)
.
SetTimeout
(
mDelayedExecutorDispatcher
aDelay
false
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
&
handle
)
;
mDelayedExecutorHandle
=
Some
(
handle
)
;
}
nsresult
IdleRequestExecutorTimeoutHandler
:
:
Call
(
)
{
if
(
!
mExecutor
-
>
IsCancelled
(
)
)
{
mExecutor
-
>
ScheduleDispatch
(
)
;
}
return
NS_OK
;
}
void
nsGlobalWindowInner
:
:
ScheduleIdleRequestDispatch
(
)
{
AssertIsOnMainThread
(
)
;
if
(
!
mIdleRequestExecutor
)
{
mIdleRequestExecutor
=
new
IdleRequestExecutor
(
this
)
;
}
mIdleRequestExecutor
-
>
MaybeDispatch
(
)
;
}
void
nsGlobalWindowInner
:
:
SuspendIdleRequests
(
)
{
if
(
mIdleRequestExecutor
)
{
mIdleRequestExecutor
-
>
Cancel
(
)
;
mIdleRequestExecutor
=
nullptr
;
}
}
void
nsGlobalWindowInner
:
:
ResumeIdleRequests
(
)
{
MOZ_ASSERT
(
!
mIdleRequestExecutor
)
;
ScheduleIdleRequestDispatch
(
)
;
}
void
nsGlobalWindowInner
:
:
RemoveIdleCallback
(
mozilla
:
:
dom
:
:
IdleRequest
*
aRequest
)
{
AssertIsOnMainThread
(
)
;
if
(
aRequest
-
>
HasTimeout
(
)
)
{
mTimeoutManager
-
>
ClearTimeout
(
aRequest
-
>
GetTimeoutHandle
(
)
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
)
;
}
aRequest
-
>
removeFrom
(
mIdleRequestCallbacks
)
;
}
nsresult
nsGlobalWindowInner
:
:
RunIdleRequest
(
IdleRequest
*
aRequest
DOMHighResTimeStamp
aDeadline
bool
aDidTimeout
)
{
AssertIsOnMainThread
(
)
;
RefPtr
<
IdleRequest
>
request
(
aRequest
)
;
RemoveIdleCallback
(
request
)
;
return
request
-
>
IdleRun
(
this
aDeadline
aDidTimeout
)
;
}
nsresult
nsGlobalWindowInner
:
:
ExecuteIdleRequest
(
TimeStamp
aDeadline
)
{
AssertIsOnMainThread
(
)
;
RefPtr
<
IdleRequest
>
request
=
mIdleRequestCallbacks
.
getFirst
(
)
;
if
(
!
request
)
{
return
NS_OK
;
}
if
(
mIdleRequestExecutor
-
>
IneligibleForCurrentIdlePeriod
(
request
)
)
{
mIdleRequestExecutor
-
>
MaybeDispatch
(
aDeadline
)
;
return
NS_OK
;
}
DOMHighResTimeStamp
deadline
=
0
.
0
;
if
(
Performance
*
perf
=
GetPerformance
(
)
)
{
deadline
=
perf
-
>
GetDOMTiming
(
)
-
>
TimeStampToDOMHighRes
(
aDeadline
)
;
}
mIdleRequestExecutor
-
>
MaybeUpdateIdlePeriodLimit
(
)
;
nsresult
result
=
RunIdleRequest
(
request
deadline
false
)
;
if
(
mIdleRequestExecutor
)
{
mIdleRequestExecutor
-
>
MaybeDispatch
(
)
;
}
return
result
;
}
class
IdleRequestTimeoutHandler
final
:
public
TimeoutHandler
{
public
:
IdleRequestTimeoutHandler
(
JSContext
*
aCx
IdleRequest
*
aIdleRequest
nsPIDOMWindowInner
*
aWindow
)
:
TimeoutHandler
(
aCx
)
mIdleRequest
(
aIdleRequest
)
mWindow
(
aWindow
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
IdleRequestTimeoutHandler
TimeoutHandler
)
nsresult
Call
(
)
override
{
return
nsGlobalWindowInner
:
:
Cast
(
mWindow
)
-
>
RunIdleRequest
(
mIdleRequest
0
.
0
true
)
;
}
private
:
~
IdleRequestTimeoutHandler
(
)
override
{
}
RefPtr
<
IdleRequest
>
mIdleRequest
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
IdleRequestTimeoutHandler
TimeoutHandler
mIdleRequest
mWindow
)
NS_IMPL_ADDREF_INHERITED
(
IdleRequestTimeoutHandler
TimeoutHandler
)
NS_IMPL_RELEASE_INHERITED
(
IdleRequestTimeoutHandler
TimeoutHandler
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
IdleRequestTimeoutHandler
)
NS_INTERFACE_MAP_END_INHERITING
(
TimeoutHandler
)
uint32_t
nsGlobalWindowInner
:
:
RequestIdleCallback
(
JSContext
*
aCx
IdleRequestCallback
&
aCallback
const
IdleRequestOptions
&
aOptions
ErrorResult
&
aError
)
{
AssertIsOnMainThread
(
)
;
if
(
mInnerObjectsFreed
)
{
return
0
;
}
uint32_t
handle
=
mIdleRequestCallbackCounter
+
+
;
RefPtr
<
IdleRequest
>
request
=
new
IdleRequest
(
&
aCallback
handle
)
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
int32_t
timeoutHandle
;
nsCOMPtr
<
nsITimeoutHandler
>
handler
(
new
IdleRequestTimeoutHandler
(
aCx
request
this
)
)
;
nsresult
rv
=
mTimeoutManager
-
>
SetTimeout
(
handler
aOptions
.
mTimeout
.
Value
(
)
false
Timeout
:
:
Reason
:
:
eIdleCallbackTimeout
&
timeoutHandle
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
0
;
}
request
-
>
SetTimeoutHandle
(
timeoutHandle
)
;
}
mIdleRequestCallbacks
.
insertBack
(
request
)
;
if
(
!
IsSuspended
(
)
)
{
ScheduleIdleRequestDispatch
(
)
;
}
return
handle
;
}
void
nsGlobalWindowInner
:
:
CancelIdleCallback
(
uint32_t
aHandle
)
{
for
(
IdleRequest
*
r
:
mIdleRequestCallbacks
)
{
if
(
r
-
>
Handle
(
)
=
=
aHandle
)
{
RemoveIdleCallback
(
r
)
;
break
;
}
}
}
void
nsGlobalWindowInner
:
:
DisableIdleCallbackRequests
(
)
{
if
(
mIdleRequestExecutor
)
{
mIdleRequestExecutor
-
>
Cancel
(
)
;
mIdleRequestExecutor
=
nullptr
;
}
while
(
!
mIdleRequestCallbacks
.
isEmpty
(
)
)
{
RefPtr
<
IdleRequest
>
request
=
mIdleRequestCallbacks
.
getFirst
(
)
;
RemoveIdleCallback
(
request
)
;
}
}
bool
nsGlobalWindowInner
:
:
IsBackgroundInternal
(
)
const
{
return
!
mOuterWindow
|
|
mOuterWindow
-
>
IsBackground
(
)
;
}
nsGlobalWindowInner
:
:
nsGlobalWindowInner
(
nsGlobalWindowOuter
*
aOuterWindow
)
:
nsPIDOMWindowInner
(
aOuterWindow
-
>
AsOuter
(
)
)
mIdleFuzzFactor
(
0
)
mIdleCallbackIndex
(
-
1
)
mCurrentlyIdle
(
false
)
mAddActiveEventFuzzTime
(
true
)
mWasOffline
(
false
)
mHasHadSlowScript
(
false
)
mNotifyIdleObserversIdleOnThaw
(
false
)
mNotifyIdleObserversActiveOnThaw
(
false
)
mIsChrome
(
false
)
mCleanMessageManager
(
false
)
mNeedsFocus
(
true
)
mHasFocus
(
false
)
mShowFocusRingForContent
(
false
)
mFocusByKeyOccurred
(
false
)
mHasGamepad
(
false
)
mHasVREvents
(
false
)
mHasVRDisplayActivateEvents
(
false
)
mHasSeenGamepadInput
(
false
)
mSuspendDepth
(
0
)
mFreezeDepth
(
0
)
mFocusMethod
(
0
)
mSerial
(
0
)
mIdleRequestCallbackCounter
(
1
)
mIdleRequestExecutor
(
nullptr
)
mCleanedUp
(
false
)
mDialogAbuseCount
(
0
)
mAreDialogsEnabled
(
true
)
mCanSkipCCGeneration
(
0
)
mBeforeUnloadListenerCount
(
0
)
{
AssertIsOnMainThread
(
)
;
nsLayoutStatics
:
:
AddRef
(
)
;
PR_INIT_CLIST
(
this
)
;
if
(
aOuterWindow
)
{
PR_INSERT_AFTER
(
this
aOuterWindow
)
;
mTimeoutManager
=
MakeUnique
<
mozilla
:
:
dom
:
:
TimeoutManager
>
(
*
nsGlobalWindowInner
:
:
Cast
(
AsInner
(
)
)
)
;
mObserver
=
new
nsGlobalWindowObserver
(
this
)
;
if
(
mObserver
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
AddObserver
(
mObserver
NS_IOSERVICE_OFFLINE_STATUS_TOPIC
false
)
;
os
-
>
AddObserver
(
mObserver
MEMORY_PRESSURE_OBSERVER_TOPIC
false
)
;
}
Preferences
:
:
AddStrongObserver
(
mObserver
"
intl
.
accept_languages
"
)
;
RefPtr
<
StorageNotifierService
>
sns
=
StorageNotifierService
:
:
GetOrCreate
(
)
;
if
(
sns
)
{
sns
-
>
Register
(
mObserver
)
;
}
}
}
else
{
MOZ_ASSERT
(
IsFrozen
(
)
)
;
}
if
(
XRE_IsContentProcess
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
;
if
(
docShell
)
{
mTabChild
=
docShell
-
>
GetTabChild
(
)
;
}
}
mSerial
=
nsContentUtils
:
:
InnerOrOuterWindowCreated
(
)
;
static
bool
sFirstTime
=
true
;
if
(
sFirstTime
)
{
sFirstTime
=
false
;
TimeoutManager
:
:
Initialize
(
)
;
Preferences
:
:
AddBoolVarCache
(
&
gIdleObserversAPIFuzzTimeDisabled
"
dom
.
idle
-
observers
-
api
.
fuzz_time
.
disabled
"
false
)
;
}
if
(
gDumpFile
=
=
nullptr
)
{
nsAutoCString
fname
;
Preferences
:
:
GetCString
(
"
browser
.
dom
.
window
.
dump
.
file
"
fname
)
;
if
(
!
fname
.
IsEmpty
(
)
)
{
gDumpFile
=
fopen
(
fname
.
get
(
)
"
wb
+
"
)
;
}
else
{
gDumpFile
=
stdout
;
}
}
#
ifdef
DEBUG
if
(
!
PR_GetEnv
(
"
MOZ_QUIET
"
)
)
{
printf_stderr
(
"
+
+
DOMWINDOW
=
=
%
d
(
%
p
)
[
pid
=
%
d
]
[
serial
=
%
d
]
[
outer
=
%
p
]
\
n
"
nsContentUtils
:
:
GetCurrentInnerOrOuterWindowCount
(
)
static_cast
<
void
*
>
(
ToCanonicalSupports
(
this
)
)
getpid
(
)
mSerial
static_cast
<
void
*
>
(
ToCanonicalSupports
(
aOuterWindow
)
)
)
;
}
#
endif
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
DOMWINDOW
%
p
created
outer
=
%
p
"
this
aOuterWindow
)
)
;
MOZ_ASSERT
(
sInnerWindowsById
"
Inner
Windows
hash
table
must
be
created
!
"
)
;
MOZ_ASSERT
(
!
sInnerWindowsById
-
>
Get
(
mWindowID
)
"
This
window
shouldn
'
t
be
in
the
hash
table
yet
!
"
)
;
if
(
sInnerWindowsById
)
{
sInnerWindowsById
-
>
Put
(
mWindowID
this
)
;
}
}
#
ifdef
DEBUG
void
nsGlobalWindowInner
:
:
AssertIsOnMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
#
endif
void
nsGlobalWindowInner
:
:
Init
(
)
{
AssertIsOnMainThread
(
)
;
NS_ASSERTION
(
gDOMLeakPRLogInner
"
gDOMLeakPRLogInner
should
have
been
initialized
!
"
)
;
sInnerWindowsById
=
new
InnerWindowByIdTable
(
)
;
}
nsGlobalWindowInner
:
:
~
nsGlobalWindowInner
(
)
{
AssertIsOnMainThread
(
)
;
if
(
IsChromeWindow
(
)
)
{
MOZ_ASSERT
(
mCleanMessageManager
"
chrome
windows
may
always
disconnect
the
msg
manager
"
)
;
DisconnectAndClearGroupMessageManagers
(
)
;
if
(
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
}
mCleanMessageManager
=
false
;
}
DisconnectEventTargetObjects
(
)
;
if
(
sInnerWindowsById
)
{
MOZ_ASSERT
(
sInnerWindowsById
-
>
Get
(
mWindowID
)
"
This
window
should
be
in
the
hash
table
"
)
;
sInnerWindowsById
-
>
Remove
(
mWindowID
)
;
}
nsContentUtils
:
:
InnerOrOuterWindowDestroyed
(
)
;
#
ifdef
DEBUG
if
(
!
PR_GetEnv
(
"
MOZ_QUIET
"
)
)
{
nsAutoCString
url
;
if
(
mLastOpenedURI
)
{
url
=
mLastOpenedURI
-
>
GetSpecOrDefault
(
)
;
const
uint32_t
maxURLLength
=
1000
;
if
(
url
.
Length
(
)
>
maxURLLength
)
{
url
.
Truncate
(
maxURLLength
)
;
}
}
nsGlobalWindowOuter
*
outer
=
nsGlobalWindowOuter
:
:
Cast
(
mOuterWindow
)
;
printf_stderr
(
"
-
-
DOMWINDOW
=
=
%
d
(
%
p
)
[
pid
=
%
d
]
[
serial
=
%
d
]
[
outer
=
%
p
]
[
url
=
%
s
]
\
n
"
nsContentUtils
:
:
GetCurrentInnerOrOuterWindowCount
(
)
static_cast
<
void
*
>
(
ToCanonicalSupports
(
this
)
)
getpid
(
)
mSerial
static_cast
<
void
*
>
(
ToCanonicalSupports
(
outer
)
)
url
.
get
(
)
)
;
}
#
endif
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
DOMWINDOW
%
p
destroyed
"
this
)
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INNERWINDOWS_WITH_MUTATION_LISTENERS
mMutationBits
?
1
:
0
)
;
if
(
mListenerManager
)
{
mListenerManager
-
>
Disconnect
(
)
;
mListenerManager
=
nullptr
;
}
PR_REMOVE_LINK
(
this
)
;
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
outer
)
{
outer
-
>
MaybeClearInnerWindow
(
this
)
;
}
CleanUp
(
)
;
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
ac
-
>
RemoveWindowAsListener
(
this
)
;
nsLayoutStatics
:
:
Release
(
)
;
}
void
nsGlobalWindowInner
:
:
AddEventTargetObject
(
DOMEventTargetHelper
*
aObject
)
{
mEventTargetObjects
.
PutEntry
(
aObject
)
;
}
void
nsGlobalWindowInner
:
:
RemoveEventTargetObject
(
DOMEventTargetHelper
*
aObject
)
{
mEventTargetObjects
.
RemoveEntry
(
aObject
)
;
}
void
nsGlobalWindowInner
:
:
DisconnectEventTargetObjects
(
)
{
for
(
auto
iter
=
mEventTargetObjects
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
DOMEventTargetHelper
>
target
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
target
-
>
DisconnectFromOwner
(
)
;
}
mEventTargetObjects
.
Clear
(
)
;
}
void
nsGlobalWindowInner
:
:
ShutDown
(
)
{
AssertIsOnMainThread
(
)
;
if
(
gDumpFile
&
&
gDumpFile
!
=
stdout
)
{
fclose
(
gDumpFile
)
;
}
gDumpFile
=
nullptr
;
delete
sInnerWindowsById
;
sInnerWindowsById
=
nullptr
;
}
void
nsGlobalWindowInner
:
:
CleanupCachedXBLHandlers
(
)
{
if
(
mCachedXBLPrototypeHandlers
&
&
mCachedXBLPrototypeHandlers
-
>
Count
(
)
>
0
)
{
mCachedXBLPrototypeHandlers
-
>
Clear
(
)
;
}
}
void
nsGlobalWindowInner
:
:
CleanUp
(
)
{
if
(
mCleanedUp
)
return
;
mCleanedUp
=
true
;
StartDying
(
)
;
DisconnectEventTargetObjects
(
)
;
if
(
mObserver
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
RemoveObserver
(
mObserver
NS_IOSERVICE_OFFLINE_STATUS_TOPIC
)
;
os
-
>
RemoveObserver
(
mObserver
MEMORY_PRESSURE_OBSERVER_TOPIC
)
;
}
RefPtr
<
StorageNotifierService
>
sns
=
StorageNotifierService
:
:
GetOrCreate
(
)
;
if
(
sns
)
{
sns
-
>
Unregister
(
mObserver
)
;
}
if
(
mIdleService
)
{
mIdleService
-
>
RemoveIdleObserver
(
mObserver
MIN_IDLE_NOTIFICATION_TIME_S
)
;
}
Preferences
:
:
RemoveObserver
(
mObserver
"
intl
.
accept_languages
"
)
;
mObserver
-
>
Forget
(
)
;
}
if
(
mNavigator
)
{
mNavigator
-
>
Invalidate
(
)
;
mNavigator
=
nullptr
;
}
mScreen
=
nullptr
;
mMenubar
=
nullptr
;
mToolbar
=
nullptr
;
mLocationbar
=
nullptr
;
mPersonalbar
=
nullptr
;
mStatusbar
=
nullptr
;
mScrollbars
=
nullptr
;
mHistory
=
nullptr
;
mCustomElements
=
nullptr
;
mApplicationCache
=
nullptr
;
mIndexedDB
=
nullptr
;
mConsole
=
nullptr
;
mAudioWorklet
=
nullptr
;
mPaintWorklet
=
nullptr
;
mExternal
=
nullptr
;
mPerformance
=
nullptr
;
#
ifdef
MOZ_WEBSPEECH
mSpeechSynthesis
=
nullptr
;
#
endif
#
if
defined
(
MOZ_WIDGET_ANDROID
)
mOrientationChangeObserver
=
nullptr
;
#
endif
mChromeEventHandler
=
nullptr
;
mParentTarget
=
nullptr
;
DisableGamepadUpdates
(
)
;
mHasGamepad
=
false
;
DisableVRUpdates
(
)
;
mHasVREvents
=
false
;
mHasVRDisplayActivateEvents
=
false
;
DisableIdleCallbackRequests
(
)
;
if
(
mCleanMessageManager
)
{
MOZ_ASSERT
(
mIsChrome
"
only
chrome
should
have
msg
manager
cleaned
"
)
;
if
(
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
}
}
CleanupCachedXBLHandlers
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
mAudioContexts
[
i
]
-
>
Shutdown
(
)
;
}
mAudioContexts
.
Clear
(
)
;
if
(
mIdleTimer
)
{
mIdleTimer
-
>
Cancel
(
)
;
mIdleTimer
=
nullptr
;
}
mServiceWorkerRegistrationTable
.
Clear
(
)
;
mIntlUtils
=
nullptr
;
}
void
nsGlobalWindowInner
:
:
FreeInnerObjects
(
)
{
NotifyDOMWindowDestroyed
(
this
)
;
if
(
auto
*
reporter
=
nsWindowMemoryReporter
:
:
Get
(
)
)
{
reporter
-
>
ObserveDOMWindowDetached
(
this
)
;
}
mInnerObjectsFreed
=
true
;
CancelWorkersForWindow
(
this
)
;
if
(
mTimeoutManager
)
{
mTimeoutManager
-
>
ClearAllTimeouts
(
)
;
}
if
(
mIdleTimer
)
{
mIdleTimer
-
>
Cancel
(
)
;
mIdleTimer
=
nullptr
;
}
mIdleObservers
.
Clear
(
)
;
DisableIdleCallbackRequests
(
)
;
mChromeEventHandler
=
nullptr
;
if
(
mListenerManager
)
{
mListenerManager
-
>
Disconnect
(
)
;
mListenerManager
=
nullptr
;
}
mHistory
=
nullptr
;
mCustomElements
=
nullptr
;
if
(
mNavigator
)
{
mNavigator
-
>
OnNavigation
(
)
;
mNavigator
-
>
Invalidate
(
)
;
mNavigator
=
nullptr
;
}
if
(
mScreen
)
{
mScreen
=
nullptr
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
mOrientationChangeObserver
=
nullptr
;
#
endif
if
(
mDoc
)
{
mDocumentPrincipal
=
mDoc
-
>
NodePrincipal
(
)
;
mDocumentURI
=
mDoc
-
>
GetDocumentURI
(
)
;
mDocBaseURI
=
mDoc
-
>
GetDocBaseURI
(
)
;
while
(
mDoc
-
>
EventHandlingSuppressed
(
)
)
{
mDoc
-
>
UnsuppressEventHandlingAndFireEvents
(
false
)
;
}
}
mFocusedNode
=
nullptr
;
if
(
mApplicationCache
)
{
static_cast
<
nsDOMOfflineResourceList
*
>
(
mApplicationCache
.
get
(
)
)
-
>
Disconnect
(
)
;
mApplicationCache
=
nullptr
;
}
mIndexedDB
=
nullptr
;
UnlinkHostObjectURIs
(
)
;
NotifyWindowIDDestroyed
(
"
inner
-
window
-
destroyed
"
)
;
CleanupCachedXBLHandlers
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
mAudioContexts
[
i
]
-
>
Shutdown
(
)
;
}
mAudioContexts
.
Clear
(
)
;
DisableGamepadUpdates
(
)
;
mHasGamepad
=
false
;
mGamepads
.
Clear
(
)
;
DisableVRUpdates
(
)
;
mHasVREvents
=
false
;
mHasVRDisplayActivateEvents
=
false
;
mVRDisplays
.
Clear
(
)
;
mClientSource
.
reset
(
)
;
if
(
mTabChild
)
{
for
(
int
i
=
0
;
i
<
mBeforeUnloadListenerCount
;
+
+
i
)
{
mTabChild
-
>
BeforeUnloadRemoved
(
)
;
}
mBeforeUnloadListenerCount
=
0
;
}
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsGlobalWindowInner
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIDOMEventTarget
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMWindow
)
NS_INTERFACE_MAP_ENTRY
(
nsIGlobalObject
)
NS_INTERFACE_MAP_ENTRY
(
nsIScriptGlobalObject
)
NS_INTERFACE_MAP_ENTRY
(
nsIScriptObjectPrincipal
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMEventTarget
)
NS_INTERFACE_MAP_ENTRY
(
mozilla
:
:
dom
:
:
EventTarget
)
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsPIDOMWindowInner
)
)
)
{
foundInterface
=
static_cast
<
nsPIDOMWindowInner
*
>
(
this
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
mozIDOMWindow
)
)
)
{
foundInterface
=
static_cast
<
mozIDOMWindow
*
>
(
this
)
;
}
else
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIDOMChromeWindow
)
)
&
&
IsChromeWindow
(
)
)
{
foundInterface
=
static_cast
<
nsIDOMChromeWindow
*
>
(
this
)
;
}
else
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY
(
nsIInterfaceRequestor
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsGlobalWindowInner
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsGlobalWindowInner
)
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
nsGlobalWindowInner
)
if
(
tmp
-
>
IsBlackForCC
(
false
)
)
{
if
(
nsCCUncollectableMarker
:
:
InGeneration
(
tmp
-
>
mCanSkipCCGeneration
)
)
{
return
true
;
}
tmp
-
>
mCanSkipCCGeneration
=
nsCCUncollectableMarker
:
:
sGeneration
;
if
(
tmp
-
>
mCachedXBLPrototypeHandlers
)
{
for
(
auto
iter
=
tmp
-
>
mCachedXBLPrototypeHandlers
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Data
(
)
.
exposeToActiveJS
(
)
;
}
}
if
(
EventListenerManager
*
elm
=
tmp
-
>
GetExistingListenerManager
(
)
)
{
elm
-
>
MarkForCC
(
)
;
}
if
(
tmp
-
>
mTimeoutManager
)
{
tmp
-
>
mTimeoutManager
-
>
UnmarkGrayTimers
(
)
;
}
return
true
;
}
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
nsGlobalWindowInner
)
return
tmp
-
>
IsBlackForCC
(
true
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
nsGlobalWindowInner
)
return
tmp
-
>
IsBlackForCC
(
false
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
nsGlobalWindowInner
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INTERNAL
(
nsGlobalWindowInner
)
if
(
MOZ_UNLIKELY
(
cb
.
WantDebugInfo
(
)
)
)
{
char
name
[
512
]
;
nsAutoCString
uri
;
if
(
tmp
-
>
mDoc
&
&
tmp
-
>
mDoc
-
>
GetDocumentURI
(
)
)
{
uri
=
tmp
-
>
mDoc
-
>
GetDocumentURI
(
)
-
>
GetSpecOrDefault
(
)
;
}
SprintfLiteral
(
name
"
nsGlobalWindowInner
#
%
"
PRIu64
"
inner
%
s
"
tmp
-
>
mWindowID
uri
.
get
(
)
)
;
cb
.
DescribeRefCountedNode
(
tmp
-
>
mRefCnt
.
get
(
)
name
)
;
}
else
{
NS_IMPL_CYCLE_COLLECTION_DESCRIBE
(
nsGlobalWindowInner
tmp
-
>
mRefCnt
.
get
(
)
)
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mNavigator
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mServiceWorkerRegistrationTable
)
#
ifdef
MOZ_WEBSPEECH
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSpeechSynthesis
)
#
endif
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mOuterWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTopInnerWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mListenerManager
)
if
(
tmp
-
>
mTimeoutManager
)
{
tmp
-
>
mTimeoutManager
-
>
ForEachUnorderedTimeout
(
[
&
cb
]
(
Timeout
*
timeout
)
{
cb
.
NoteNativeChild
(
timeout
NS_CYCLE_COLLECTION_PARTICIPANT
(
Timeout
)
)
;
}
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocation
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mHistory
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCustomElements
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocalStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSessionStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mApplicationCache
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIndexedDB
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocumentPrincipal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTabChild
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDoc
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleService
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleRequestExecutor
)
for
(
IdleRequest
*
request
:
tmp
-
>
mIdleRequestCallbacks
)
{
cb
.
NoteNativeChild
(
request
NS_CYCLE_COLLECTION_PARTICIPANT
(
IdleRequest
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIdleObservers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mClientSource
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mGamepads
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCacheStorage
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mVRDisplays
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeEventHandler
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mParentTarget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFocusedNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMenubar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mToolbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLocationbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPersonalbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mStatusbar
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mScrollbars
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCrypto
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mU2F
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mConsole
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mAudioWorklet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPaintWorklet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mExternal
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIntlUtils
)
tmp
-
>
TraverseHostObjectURIs
(
cb
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mMessageManager
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mChromeFields
.
mGroupMessageManagers
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPendingPromises
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
nsGlobalWindowInner
)
tmp
-
>
CleanupCachedXBLHandlers
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mNavigator
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mServiceWorkerRegistrationTable
)
#
ifdef
MOZ_WEBSPEECH
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSpeechSynthesis
)
#
endif
if
(
tmp
-
>
mOuterWindow
)
{
nsGlobalWindowOuter
:
:
Cast
(
tmp
-
>
mOuterWindow
)
-
>
MaybeClearInnerWindow
(
tmp
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mOuterWindow
)
}
if
(
tmp
-
>
mListenerManager
)
{
tmp
-
>
mListenerManager
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mListenerManager
)
}
tmp
-
>
UpdateTopInnerWindow
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTopInnerWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocation
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mHistory
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCustomElements
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocalStorage
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSessionStorage
)
if
(
tmp
-
>
mApplicationCache
)
{
static_cast
<
nsDOMOfflineResourceList
*
>
(
tmp
-
>
mApplicationCache
.
get
(
)
)
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mApplicationCache
)
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIndexedDB
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocumentPrincipal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTabChild
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDoc
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleService
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleObservers
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mGamepads
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCacheStorage
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mVRDisplays
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeEventHandler
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mParentTarget
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mFocusedNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mMenubar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mToolbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLocationbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPersonalbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mStatusbar
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mScrollbars
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCrypto
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mU2F
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mConsole
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mAudioWorklet
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPaintWorklet
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mExternal
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIntlUtils
)
tmp
-
>
UnlinkHostObjectURIs
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mIdleRequestExecutor
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mClientSource
)
if
(
tmp
-
>
IsChromeWindow
(
)
)
{
if
(
tmp
-
>
mChromeFields
.
mMessageManager
)
{
static_cast
<
nsFrameMessageManager
*
>
(
tmp
-
>
mChromeFields
.
mMessageManager
.
get
(
)
)
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mMessageManager
)
}
tmp
-
>
DisconnectAndClearGroupMessageManagers
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mChromeFields
.
mGroupMessageManagers
)
}
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPendingPromises
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
#
ifdef
DEBUG
void
nsGlobalWindowInner
:
:
RiskyUnlink
(
)
{
NS_CYCLE_COLLECTION_INNERNAME
.
Unlink
(
this
)
;
}
#
endif
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
nsGlobalWindowInner
)
if
(
tmp
-
>
mCachedXBLPrototypeHandlers
)
{
for
(
auto
iter
=
tmp
-
>
mCachedXBLPrototypeHandlers
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
Data
(
)
"
Cached
XBL
prototype
handler
"
aClosure
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
bool
nsGlobalWindowInner
:
:
IsBlackForCC
(
bool
aTracingNeeded
)
{
if
(
!
nsCCUncollectableMarker
:
:
sGeneration
)
{
return
false
;
}
return
(
nsCCUncollectableMarker
:
:
InGeneration
(
GetMarkedCCGeneration
(
)
)
|
|
HasKnownLiveWrapper
(
)
)
&
&
(
!
aTracingNeeded
|
|
HasNothingToTrace
(
static_cast
<
nsIDOMEventTarget
*
>
(
this
)
)
)
;
}
nsresult
nsGlobalWindowInner
:
:
EnsureScriptEnvironment
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
NS_WARNING
(
"
No
outer
window
available
!
"
)
;
return
NS_ERROR_FAILURE
;
}
return
outer
-
>
EnsureScriptEnvironment
(
)
;
}
nsIScriptContext
*
nsGlobalWindowInner
:
:
GetScriptContext
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
return
nullptr
;
}
return
outer
-
>
GetScriptContext
(
)
;
}
JSObject
*
nsGlobalWindowInner
:
:
GetGlobalJSObject
(
)
{
return
FastGetGlobalJSObject
(
)
;
}
void
nsGlobalWindowInner
:
:
TraceGlobalJSObject
(
JSTracer
*
aTrc
)
{
TraceWrapper
(
aTrc
"
active
window
global
"
)
;
}
PopupControlState
nsGlobalWindowInner
:
:
GetPopupControlState
(
)
const
{
return
nsContentUtils
:
:
GetPopupControlState
(
)
;
}
nsresult
nsGlobalWindowInner
:
:
SetNewDocument
(
nsIDocument
*
aDocument
nsISupports
*
aState
bool
aForceReuseInnerWindow
)
{
NS_PRECONDITION
(
mDocumentPrincipal
=
=
nullptr
"
mDocumentPrincipal
prematurely
set
!
"
)
;
MOZ_ASSERT
(
aDocument
)
;
if
(
!
mOuterWindow
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
mOuterWindow
-
>
GetCurrentInnerWindow
(
)
!
=
this
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
GetOuterWindowInternal
(
)
-
>
SetNewDocument
(
aDocument
aState
aForceReuseInnerWindow
)
;
}
void
nsGlobalWindowInner
:
:
InnerSetNewDocument
(
JSContext
*
aCx
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
if
(
MOZ_LOG_TEST
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
)
)
{
nsIURI
*
uri
=
aDocument
-
>
GetDocumentURI
(
)
;
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
DOMWINDOW
%
p
SetNewDocument
%
s
"
this
uri
?
uri
-
>
GetSpecOrDefault
(
)
.
get
(
)
:
"
"
)
)
;
}
mDoc
=
aDocument
;
ClearDocumentDependentSlots
(
aCx
)
;
mFocusedNode
=
nullptr
;
mLocalStorage
=
nullptr
;
mSessionStorage
=
nullptr
;
#
ifdef
DEBUG
mLastOpenedURI
=
aDocument
-
>
GetDocumentURI
(
)
;
#
endif
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INNERWINDOWS_WITH_MUTATION_LISTENERS
mMutationBits
?
1
:
0
)
;
mMutationBits
=
0
;
}
nsresult
nsGlobalWindowInner
:
:
EnsureClientSource
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mDoc
)
;
bool
newClientSource
=
false
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
nsCOMPtr
<
nsIChannel
>
channel
=
mDoc
-
>
GetChannel
(
)
;
if
(
channel
)
{
nsCOMPtr
<
nsIURI
>
uri
;
Unused
<
<
channel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
bool
ignoreLoadInfo
=
false
;
bool
isAbout
=
false
;
if
(
NS_SUCCEEDED
(
uri
-
>
SchemeIs
(
"
about
"
&
isAbout
)
)
&
&
isAbout
)
{
nsCString
spec
=
uri
-
>
GetSpecOrDefault
(
)
;
ignoreLoadInfo
=
spec
.
EqualsLiteral
(
"
about
:
blank
"
)
|
|
spec
.
EqualsLiteral
(
"
about
:
srcdoc
"
)
;
}
else
{
bool
isData
=
false
;
bool
isBlob
=
false
;
ignoreLoadInfo
=
(
NS_SUCCEEDED
(
uri
-
>
SchemeIs
(
"
data
"
&
isData
)
)
&
&
isData
)
|
|
(
NS_SUCCEEDED
(
uri
-
>
SchemeIs
(
"
blob
"
&
isBlob
)
)
&
&
isBlob
)
;
}
if
(
!
ignoreLoadInfo
)
{
loadInfo
=
channel
-
>
GetLoadInfo
(
)
;
}
}
UniquePtr
<
ClientSource
>
initialClientSource
;
nsIDocShell
*
docshell
=
GetDocShell
(
)
;
if
(
docshell
)
{
initialClientSource
=
docshell
-
>
TakeInitialClientSource
(
)
;
}
if
(
loadInfo
)
{
UniquePtr
<
ClientSource
>
reservedClient
=
loadInfo
-
>
TakeReservedClientSource
(
)
;
if
(
reservedClient
)
{
mClientSource
.
reset
(
)
;
mClientSource
=
Move
(
reservedClient
)
;
newClientSource
=
true
;
}
}
if
(
!
mClientSource
)
{
mClientSource
=
Move
(
initialClientSource
)
;
if
(
mClientSource
)
{
newClientSource
=
true
;
}
}
if
(
mClientSource
)
{
nsCOMPtr
<
nsIPrincipal
>
clientPrincipal
(
mClientSource
-
>
Info
(
)
.
GetPrincipal
(
)
)
;
if
(
!
clientPrincipal
|
|
!
clientPrincipal
-
>
Equals
(
mDoc
-
>
NodePrincipal
(
)
)
)
{
mClientSource
.
reset
(
)
;
}
}
if
(
!
mClientSource
)
{
mClientSource
=
ClientManager
:
:
CreateSource
(
ClientType
:
:
Window
EventTargetFor
(
TaskCategory
:
:
Other
)
mDoc
-
>
NodePrincipal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mClientSource
)
;
newClientSource
=
true
;
}
else
if
(
loadInfo
)
{
const
Maybe
<
ServiceWorkerDescriptor
>
controller
=
loadInfo
-
>
GetController
(
)
;
if
(
controller
.
isSome
(
)
)
{
mClientSource
-
>
SetController
(
controller
.
ref
(
)
)
;
}
else
if
(
mClientSource
-
>
GetController
(
)
.
isSome
(
)
)
{
mClientSource
.
reset
(
)
;
mClientSource
=
ClientManager
:
:
CreateSource
(
ClientType
:
:
Window
EventTargetFor
(
TaskCategory
:
:
Other
)
mDoc
-
>
NodePrincipal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mClientSource
)
;
newClientSource
=
true
;
}
}
if
(
newClientSource
&
&
IsFrozen
(
)
)
{
mClientSource
-
>
Freeze
(
)
;
}
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
ExecutionReady
(
)
{
nsresult
rv
=
EnsureClientSource
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
mClientSource
-
>
WindowExecutionReady
(
AsInner
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
nsGlobalWindowInner
:
:
SetOpenerWindow
(
nsPIDOMWindowOuter
*
aOpener
bool
aOriginalOpener
)
{
FORWARD_TO_OUTER_VOID
(
SetOpenerWindow
(
aOpener
aOriginalOpener
)
)
;
}
void
nsGlobalWindowInner
:
:
UpdateParentTarget
(
)
{
nsCOMPtr
<
Element
>
frameElement
=
GetOuterWindow
(
)
-
>
GetFrameElementInternal
(
)
;
nsCOMPtr
<
EventTarget
>
eventTarget
=
nsContentUtils
:
:
TryGetTabChildGlobalAsEventTarget
(
frameElement
)
;
if
(
!
eventTarget
)
{
nsGlobalWindowOuter
*
topWin
=
GetScriptableTopInternal
(
)
;
if
(
topWin
)
{
frameElement
=
topWin
-
>
AsOuter
(
)
-
>
GetFrameElementInternal
(
)
;
eventTarget
=
nsContentUtils
:
:
TryGetTabChildGlobalAsEventTarget
(
frameElement
)
;
}
}
if
(
!
eventTarget
)
{
eventTarget
=
nsContentUtils
:
:
TryGetTabChildGlobalAsEventTarget
(
mChromeEventHandler
)
;
}
if
(
!
eventTarget
)
{
eventTarget
=
mChromeEventHandler
;
}
mParentTarget
=
eventTarget
;
}
EventTarget
*
nsGlobalWindowInner
:
:
GetTargetForDOMEvent
(
)
{
return
GetOuterWindowInternal
(
)
;
}
EventTarget
*
nsGlobalWindowInner
:
:
GetTargetForEventTargetChain
(
)
{
return
this
;
}
nsresult
nsGlobalWindowInner
:
:
WillHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
{
EventMessage
msg
=
aVisitor
.
mEvent
-
>
mMessage
;
aVisitor
.
mCanHandle
=
true
;
aVisitor
.
mForceContentDispatch
=
true
;
if
(
msg
=
=
eResize
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aVisitor
.
mEvent
-
>
mOriginalTarget
)
;
if
(
window
)
{
mIsHandlingResizeEvent
=
true
;
}
}
else
if
(
msg
=
=
eMouseDown
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
)
{
sMouseDown
=
true
;
}
else
if
(
(
msg
=
=
eMouseUp
|
|
msg
=
=
eDragEnd
)
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
)
{
sMouseDown
=
false
;
if
(
sDragServiceDisabled
)
{
nsCOMPtr
<
nsIDragService
>
ds
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
ds
)
{
sDragServiceDisabled
=
false
;
ds
-
>
Unsuppress
(
)
;
}
}
}
aVisitor
.
SetParentTarget
(
GetParentTarget
(
)
true
)
;
if
(
!
mIdleObservers
.
IsEmpty
(
)
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
&
&
(
aVisitor
.
mEvent
-
>
HasMouseEventMessage
(
)
|
|
aVisitor
.
mEvent
-
>
HasDragEventMessage
(
)
)
)
{
mAddActiveEventFuzzTime
=
false
;
}
return
NS_OK
;
}
bool
nsGlobalWindowInner
:
:
DialogsAreBeingAbused
(
)
{
NS_ASSERTION
(
GetScriptableTopInternal
(
)
&
&
GetScriptableTopInternal
(
)
-
>
GetCurrentInnerWindowInternal
(
)
=
=
this
"
DialogsAreBeingAbused
called
with
invalid
window
"
)
;
if
(
mLastDialogQuitTime
.
IsNull
(
)
|
|
nsContentUtils
:
:
IsCallerChrome
(
)
)
{
return
false
;
}
TimeDuration
dialogInterval
(
TimeStamp
:
:
Now
(
)
-
mLastDialogQuitTime
)
;
if
(
dialogInterval
.
ToSeconds
(
)
<
Preferences
:
:
GetInt
(
"
dom
.
successive_dialog_time_limit
"
DEFAULT_SUCCESSIVE_DIALOG_TIME_LIMIT
)
)
{
mDialogAbuseCount
+
+
;
return
GetPopupControlState
(
)
>
openAllowed
|
|
mDialogAbuseCount
>
MAX_SUCCESSIVE_DIALOG_COUNT
;
}
mDialogAbuseCount
=
0
;
return
false
;
}
void
nsGlobalWindowInner
:
:
DisableDialogs
(
)
{
FORWARD_TO_OUTER_VOID
(
DisableDialogs
(
)
)
;
}
void
nsGlobalWindowInner
:
:
EnableDialogs
(
)
{
FORWARD_TO_OUTER_VOID
(
EnableDialogs
(
)
)
;
}
nsresult
nsGlobalWindowInner
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
switch
(
aVisitor
.
mEvent
-
>
mMessage
)
{
case
eResize
:
case
eUnload
:
case
eLoad
:
break
;
default
:
return
NS_OK
;
}
nsCOMPtr
<
nsIDOMEventTarget
>
kungFuDeathGrip1
(
mChromeEventHandler
)
;
mozilla
:
:
Unused
<
<
kungFuDeathGrip1
;
nsCOMPtr
<
nsIScriptContext
>
kungFuDeathGrip2
(
GetContextInternal
(
)
)
;
mozilla
:
:
Unused
<
<
kungFuDeathGrip2
;
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eResize
)
{
mIsHandlingResizeEvent
=
false
;
}
else
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eUnload
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
)
{
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
IsPresenting
(
)
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
outer
)
{
outer
-
>
SetAutoActivateVRDisplayID
(
display
-
>
DisplayId
(
)
)
;
}
break
;
}
}
if
(
mDoc
)
{
mDoc
-
>
BindingManager
(
)
-
>
ExecuteDetachedHandlers
(
)
;
}
mIsDocumentLoaded
=
false
;
}
else
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eLoad
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
)
{
mIsDocumentLoaded
=
true
;
mTimeoutManager
-
>
OnDocumentLoaded
(
)
;
nsCOMPtr
<
Element
>
element
=
GetOuterWindow
(
)
-
>
GetFrameElementInternal
(
)
;
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
if
(
element
&
&
GetParentInternal
(
)
&
&
docShell
&
&
docShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetEvent
event
(
aVisitor
.
mEvent
-
>
IsTrusted
(
)
eLoad
)
;
event
.
mFlags
.
mBubbles
=
false
;
event
.
mFlags
.
mCancelable
=
false
;
EventDispatcher
:
:
Dispatch
(
element
nullptr
&
event
nullptr
&
status
)
;
}
if
(
mVREventObserver
)
{
mVREventObserver
-
>
NotifyAfterLoad
(
)
;
}
uint32_t
autoActivateVRDisplayID
=
0
;
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
outer
)
{
autoActivateVRDisplayID
=
outer
-
>
GetAutoActivateVRDisplayID
(
)
;
}
if
(
autoActivateVRDisplayID
)
{
DispatchVRDisplayActivate
(
autoActivateVRDisplayID
VRDisplayEventReason
:
:
Navigation
)
;
}
}
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
DefineArgumentsProperty
(
nsIArray
*
aArguments
)
{
nsIScriptContext
*
ctx
=
GetOuterWindowInternal
(
)
-
>
mContext
;
NS_ENSURE_TRUE
(
aArguments
&
&
ctx
NS_ERROR_NOT_INITIALIZED
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
RootingCx
(
)
GetWrapperPreserveColor
(
)
)
;
return
ctx
-
>
SetProperty
(
obj
"
arguments
"
aArguments
)
;
}
nsIPrincipal
*
nsGlobalWindowInner
:
:
GetPrincipal
(
)
{
if
(
mDoc
)
{
return
mDoc
-
>
NodePrincipal
(
)
;
}
if
(
mDocumentPrincipal
)
{
return
mDocumentPrincipal
;
}
nsCOMPtr
<
nsIScriptObjectPrincipal
>
objPrincipal
=
do_QueryInterface
(
GetParentInternal
(
)
)
;
if
(
objPrincipal
)
{
return
objPrincipal
-
>
GetPrincipal
(
)
;
}
return
nullptr
;
}
bool
nsPIDOMWindowInner
:
:
AddAudioContext
(
AudioContext
*
aAudioContext
)
{
mAudioContexts
.
AppendElement
(
aAudioContext
)
;
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
return
docShell
&
&
!
docShell
-
>
GetAllowMedia
(
)
&
&
!
aAudioContext
-
>
IsOffline
(
)
;
}
void
nsPIDOMWindowInner
:
:
RemoveAudioContext
(
AudioContext
*
aAudioContext
)
{
mAudioContexts
.
RemoveElement
(
aAudioContext
)
;
}
void
nsPIDOMWindowInner
:
:
MuteAudioContexts
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
if
(
!
mAudioContexts
[
i
]
-
>
IsOffline
(
)
)
{
mAudioContexts
[
i
]
-
>
Mute
(
)
;
}
}
}
void
nsPIDOMWindowInner
:
:
UnmuteAudioContexts
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
if
(
!
mAudioContexts
[
i
]
-
>
IsOffline
(
)
)
{
mAudioContexts
[
i
]
-
>
Unmute
(
)
;
}
}
}
nsGlobalWindowInner
*
nsGlobalWindowInner
:
:
Window
(
)
{
return
this
;
}
nsGlobalWindowInner
*
nsGlobalWindowInner
:
:
Self
(
)
{
return
this
;
}
Navigator
*
nsPIDOMWindowInner
:
:
Navigator
(
)
{
if
(
!
mNavigator
)
{
mNavigator
=
new
mozilla
:
:
dom
:
:
Navigator
(
this
)
;
}
return
mNavigator
;
}
nsScreen
*
nsGlobalWindowInner
:
:
GetScreen
(
ErrorResult
&
aError
)
{
if
(
!
mScreen
)
{
mScreen
=
nsScreen
:
:
Create
(
this
)
;
if
(
!
mScreen
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
}
return
mScreen
;
}
nsIDOMScreen
*
nsGlobalWindowInner
:
:
GetScreen
(
)
{
ErrorResult
dummy
;
nsIDOMScreen
*
screen
=
GetScreen
(
dummy
)
;
dummy
.
SuppressException
(
)
;
return
screen
;
}
nsHistory
*
nsGlobalWindowInner
:
:
GetHistory
(
ErrorResult
&
aError
)
{
if
(
!
mHistory
)
{
mHistory
=
new
nsHistory
(
this
)
;
}
return
mHistory
;
}
CustomElementRegistry
*
nsGlobalWindowInner
:
:
CustomElements
(
)
{
if
(
!
mCustomElements
)
{
mCustomElements
=
new
CustomElementRegistry
(
this
)
;
}
return
mCustomElements
;
}
Performance
*
nsPIDOMWindowInner
:
:
GetPerformance
(
)
{
CreatePerformanceObjectIfNeeded
(
)
;
return
mPerformance
;
}
void
nsPIDOMWindowInner
:
:
CreatePerformanceObjectIfNeeded
(
)
{
if
(
mPerformance
|
|
!
mDoc
)
{
return
;
}
RefPtr
<
nsDOMNavigationTiming
>
timing
=
mDoc
-
>
GetNavigationTiming
(
)
;
nsCOMPtr
<
nsITimedChannel
>
timedChannel
(
do_QueryInterface
(
mDoc
-
>
GetChannel
(
)
)
)
;
bool
timingEnabled
=
false
;
if
(
!
timedChannel
|
|
!
NS_SUCCEEDED
(
timedChannel
-
>
GetTimingEnabled
(
&
timingEnabled
)
)
|
|
!
timingEnabled
)
{
timedChannel
=
nullptr
;
}
if
(
timing
)
{
mPerformance
=
Performance
:
:
CreateForMainThread
(
this
timing
timedChannel
)
;
}
}
bool
nsPIDOMWindowInner
:
:
IsSecureContext
(
)
const
{
return
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
IsSecureContext
(
)
;
}
void
nsPIDOMWindowInner
:
:
Suspend
(
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
Suspend
(
)
;
}
void
nsPIDOMWindowInner
:
:
Resume
(
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
Resume
(
)
;
}
void
nsPIDOMWindowInner
:
:
Freeze
(
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
Freeze
(
)
;
}
void
nsPIDOMWindowInner
:
:
Thaw
(
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
Thaw
(
)
;
}
void
nsPIDOMWindowInner
:
:
SyncStateFromParentWindow
(
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
SyncStateFromParentWindow
(
)
;
}
Maybe
<
ClientInfo
>
nsPIDOMWindowInner
:
:
GetClientInfo
(
)
const
{
return
Move
(
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
GetClientInfo
(
)
)
;
}
Maybe
<
ClientState
>
nsPIDOMWindowInner
:
:
GetClientState
(
)
const
{
return
Move
(
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
GetClientState
(
)
)
;
}
Maybe
<
ServiceWorkerDescriptor
>
nsPIDOMWindowInner
:
:
GetController
(
)
const
{
return
Move
(
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
GetController
(
)
)
;
}
RefPtr
<
mozilla
:
:
dom
:
:
ServiceWorker
>
nsPIDOMWindowInner
:
:
GetOrCreateServiceWorker
(
const
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
&
aDescriptor
)
{
return
Move
(
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
GetOrCreateServiceWorker
(
aDescriptor
)
)
;
}
void
nsPIDOMWindowInner
:
:
NoteCalledRegisterForServiceWorkerScope
(
const
nsACString
&
aScope
)
{
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
NoteCalledRegisterForServiceWorkerScope
(
aScope
)
;
}
bool
nsGlobalWindowInner
:
:
ShouldReportForServiceWorkerScope
(
const
nsAString
&
aScope
)
{
bool
result
=
false
;
nsPIDOMWindowOuter
*
topOuter
=
GetScriptableTop
(
)
;
NS_ENSURE_TRUE
(
topOuter
false
)
;
nsGlobalWindowInner
*
topInner
=
nsGlobalWindowInner
:
:
Cast
(
topOuter
-
>
GetCurrentInnerWindow
(
)
)
;
NS_ENSURE_TRUE
(
topInner
false
)
;
topInner
-
>
ShouldReportForServiceWorkerScopeInternal
(
NS_ConvertUTF16toUTF8
(
aScope
)
&
result
)
;
return
result
;
}
nsGlobalWindowInner
:
:
CallState
nsGlobalWindowInner
:
:
ShouldReportForServiceWorkerScopeInternal
(
const
nsACString
&
aScope
bool
*
aResultOut
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aResultOut
)
;
const
Maybe
<
ServiceWorkerDescriptor
>
swd
=
GetController
(
)
;
if
(
swd
.
isSome
(
)
&
&
swd
.
ref
(
)
.
Scope
(
)
=
=
aScope
)
{
*
aResultOut
=
true
;
return
CallState
:
:
Stop
;
}
if
(
mClientSource
&
&
mClientSource
-
>
CalledRegisterForServiceWorkerScope
(
aScope
)
)
{
*
aResultOut
=
true
;
return
CallState
:
:
Stop
;
}
nsCOMPtr
<
nsIDocumentLoader
>
loader
(
do_QueryInterface
(
GetDocShell
(
)
)
)
;
if
(
loader
)
{
nsCOMPtr
<
nsILoadGroup
>
loadgroup
;
Unused
<
<
loader
-
>
GetLoadGroup
(
getter_AddRefs
(
loadgroup
)
)
;
if
(
loadgroup
)
{
nsCOMPtr
<
nsISimpleEnumerator
>
iter
;
Unused
<
<
loadgroup
-
>
GetRequests
(
getter_AddRefs
(
iter
)
)
;
if
(
iter
)
{
nsCOMPtr
<
nsISupports
>
tmp
;
bool
hasMore
=
true
;
while
(
NS_SUCCEEDED
(
iter
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
iter
-
>
GetNext
(
getter_AddRefs
(
tmp
)
)
;
nsCOMPtr
<
nsIChannel
>
loadingChannel
(
do_QueryInterface
(
tmp
)
)
;
if
(
!
loadingChannel
|
|
!
nsContentUtils
:
:
IsNonSubresourceRequest
(
loadingChannel
)
)
{
continue
;
}
nsCOMPtr
<
nsIURI
>
loadingURL
;
Unused
<
<
loadingChannel
-
>
GetURI
(
getter_AddRefs
(
loadingURL
)
)
;
if
(
!
loadingURL
)
{
continue
;
}
nsAutoCString
loadingSpec
;
Unused
<
<
loadingURL
-
>
GetSpec
(
loadingSpec
)
;
if
(
StringBeginsWith
(
loadingSpec
aScope
)
)
{
*
aResultOut
=
true
;
return
CallState
:
:
Stop
;
}
}
}
}
}
return
CallOnChildren
(
&
nsGlobalWindowInner
:
:
ShouldReportForServiceWorkerScopeInternal
aScope
aResultOut
)
;
}
void
nsGlobalWindowInner
:
:
NoteCalledRegisterForServiceWorkerScope
(
const
nsACString
&
aScope
)
{
if
(
!
mClientSource
)
{
return
;
}
mClientSource
-
>
NoteCalledRegisterForServiceWorkerScope
(
aScope
)
;
}
void
nsGlobalWindowInner
:
:
UpdateTopInnerWindow
(
)
{
if
(
IsTopInnerWindow
(
)
|
|
!
mTopInnerWindow
)
{
return
;
}
mTopInnerWindow
-
>
UpdateWebSocketCount
(
-
(
int32_t
)
mNumOfOpenWebSockets
)
;
}
void
nsPIDOMWindowInner
:
:
AddPeerConnection
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mTopInnerWindow
?
mTopInnerWindow
-
>
mActivePeerConnections
+
+
:
mActivePeerConnections
+
+
;
}
void
nsPIDOMWindowInner
:
:
RemovePeerConnection
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mTopInnerWindow
?
mTopInnerWindow
-
>
mActivePeerConnections
:
mActivePeerConnections
)
;
mTopInnerWindow
?
mTopInnerWindow
-
>
mActivePeerConnections
-
-
:
mActivePeerConnections
-
-
;
}
bool
nsPIDOMWindowInner
:
:
HasActivePeerConnections
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mTopInnerWindow
?
mTopInnerWindow
-
>
mActivePeerConnections
:
mActivePeerConnections
;
}
bool
nsPIDOMWindowInner
:
:
IsPlayingAudio
(
)
{
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
i
+
+
)
{
if
(
mAudioContexts
[
i
]
-
>
IsRunning
(
)
)
{
return
true
;
}
}
RefPtr
<
AudioChannelService
>
acs
=
AudioChannelService
:
:
Get
(
)
;
if
(
!
acs
)
{
return
false
;
}
auto
outer
=
GetOuterWindow
(
)
;
if
(
!
outer
)
{
return
false
;
}
return
acs
-
>
IsWindowActive
(
outer
)
;
}
bool
nsPIDOMWindowInner
:
:
IsDocumentLoaded
(
)
const
{
return
mIsDocumentLoaded
;
}
mozilla
:
:
dom
:
:
TimeoutManager
&
nsPIDOMWindowInner
:
:
TimeoutManager
(
)
{
return
*
mTimeoutManager
;
}
bool
nsPIDOMWindowInner
:
:
IsRunningTimeout
(
)
{
return
TimeoutManager
(
)
.
IsRunningTimeout
(
)
;
}
void
nsPIDOMWindowInner
:
:
TryToCacheTopInnerWindow
(
)
{
if
(
mHasTriedToCacheTopInnerWindow
)
{
return
;
}
MOZ_ASSERT
(
!
mInnerObjectsFreed
)
;
mHasTriedToCacheTopInnerWindow
=
true
;
nsGlobalWindowInner
*
window
=
nsGlobalWindowInner
:
:
Cast
(
this
)
;
MOZ_ASSERT
(
window
)
;
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
topOutter
=
window
-
>
GetScriptableTop
(
)
)
{
mTopInnerWindow
=
topOutter
-
>
GetCurrentInnerWindow
(
)
;
}
}
void
nsPIDOMWindowInner
:
:
UpdateActiveIndexedDBTransactionCount
(
int32_t
aDelta
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aDelta
=
=
0
)
{
return
;
}
TabGroup
(
)
-
>
IndexedDBTransactionCounter
(
)
+
=
aDelta
;
}
void
nsPIDOMWindowInner
:
:
UpdateActiveIndexedDBDatabaseCount
(
int32_t
aDelta
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aDelta
=
=
0
)
{
return
;
}
uint32_t
&
counter
=
mTopInnerWindow
?
mTopInnerWindow
-
>
mNumOfIndexedDBDatabases
:
mNumOfIndexedDBDatabases
;
counter
+
=
aDelta
;
TabGroup
(
)
-
>
IndexedDBDatabaseCounter
(
)
+
=
aDelta
;
}
bool
nsPIDOMWindowInner
:
:
HasActiveIndexedDBDatabases
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mTopInnerWindow
?
mTopInnerWindow
-
>
mNumOfIndexedDBDatabases
>
0
:
mNumOfIndexedDBDatabases
>
0
;
}
void
nsPIDOMWindowInner
:
:
UpdateWebSocketCount
(
int32_t
aDelta
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aDelta
=
=
0
)
{
return
;
}
if
(
mTopInnerWindow
&
&
!
IsTopInnerWindow
(
)
)
{
mTopInnerWindow
-
>
UpdateWebSocketCount
(
aDelta
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
aDelta
>
0
|
|
(
(
aDelta
+
mNumOfOpenWebSockets
)
<
mNumOfOpenWebSockets
)
)
;
mNumOfOpenWebSockets
+
=
aDelta
;
}
bool
nsPIDOMWindowInner
:
:
HasOpenWebSockets
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mNumOfOpenWebSockets
|
|
(
mTopInnerWindow
&
&
mTopInnerWindow
-
>
mNumOfOpenWebSockets
)
;
}
bool
nsPIDOMWindowInner
:
:
GetAudioCaptured
(
)
const
{
return
mAudioCaptured
;
}
nsresult
nsPIDOMWindowInner
:
:
SetAudioCapture
(
bool
aCapture
)
{
mAudioCaptured
=
aCapture
;
RefPtr
<
AudioChannelService
>
service
=
AudioChannelService
:
:
GetOrCreate
(
)
;
if
(
service
)
{
service
-
>
SetWindowAudioCaptured
(
GetOuterWindow
(
)
mWindowID
aCapture
)
;
}
return
NS_OK
;
}
#
ifdef
MOZ_WEBSPEECH
SpeechSynthesis
*
nsGlobalWindowInner
:
:
GetSpeechSynthesis
(
ErrorResult
&
aError
)
{
if
(
!
mSpeechSynthesis
)
{
mSpeechSynthesis
=
new
SpeechSynthesis
(
this
)
;
}
return
mSpeechSynthesis
;
}
bool
nsGlobalWindowInner
:
:
HasActiveSpeechSynthesis
(
)
{
if
(
mSpeechSynthesis
)
{
return
!
mSpeechSynthesis
-
>
HasEmptyQueue
(
)
;
}
return
false
;
}
#
endif
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
GetParent
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetParentOuter
(
)
aError
nullptr
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetScriptableParent
(
)
{
FORWARD_TO_OUTER
(
GetScriptableParent
(
)
nullptr
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetScriptableParentOrNull
(
)
{
FORWARD_TO_OUTER
(
GetScriptableParentOrNull
(
)
nullptr
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetScriptableTop
(
)
{
FORWARD_TO_OUTER
(
GetScriptableTop
(
)
nullptr
)
;
}
void
nsGlobalWindowInner
:
:
GetContent
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetContentOuter
(
aCx
aRetval
aCallerType
aError
)
aError
)
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetMenubar
(
ErrorResult
&
aError
)
{
if
(
!
mMenubar
)
{
mMenubar
=
new
MenubarProp
(
this
)
;
}
return
mMenubar
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetToolbar
(
ErrorResult
&
aError
)
{
if
(
!
mToolbar
)
{
mToolbar
=
new
ToolbarProp
(
this
)
;
}
return
mToolbar
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetLocationbar
(
ErrorResult
&
aError
)
{
if
(
!
mLocationbar
)
{
mLocationbar
=
new
LocationbarProp
(
this
)
;
}
return
mLocationbar
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetPersonalbar
(
ErrorResult
&
aError
)
{
if
(
!
mPersonalbar
)
{
mPersonalbar
=
new
PersonalbarProp
(
this
)
;
}
return
mPersonalbar
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetStatusbar
(
ErrorResult
&
aError
)
{
if
(
!
mStatusbar
)
{
mStatusbar
=
new
StatusbarProp
(
this
)
;
}
return
mStatusbar
;
}
BarProp
*
nsGlobalWindowInner
:
:
GetScrollbars
(
ErrorResult
&
aError
)
{
if
(
!
mScrollbars
)
{
mScrollbars
=
new
ScrollbarsProp
(
this
)
;
}
return
mScrollbars
;
}
bool
nsGlobalWindowInner
:
:
GetClosed
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetClosedOuter
(
)
aError
false
)
;
}
already_AddRefed
<
nsIDOMWindowCollection
>
nsGlobalWindowInner
:
:
GetFrames
(
)
{
FORWARD_TO_OUTER
(
GetFrames
(
)
nullptr
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
IndexedGetter
(
uint32_t
aIndex
)
{
FORWARD_TO_OUTER
(
IndexedGetterOuter
(
aIndex
)
nullptr
)
;
}
bool
nsGlobalWindowInner
:
:
DoResolve
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
{
if
(
!
JSID_IS_STRING
(
aId
)
)
{
return
true
;
}
bool
found
;
if
(
!
WebIDLGlobalNameHash
:
:
DefineIfEnabled
(
aCx
aObj
aId
aDesc
&
found
)
)
{
return
false
;
}
if
(
found
)
{
return
true
;
}
nsresult
rv
=
nsWindowSH
:
:
GlobalResolve
(
this
aCx
aObj
aId
aDesc
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Throw
(
aCx
rv
)
;
}
return
true
;
}
bool
nsGlobalWindowInner
:
:
MayResolve
(
jsid
aId
)
{
if
(
!
JSID_IS_STRING
(
aId
)
)
{
return
false
;
}
if
(
aId
=
=
XPCJSRuntime
:
:
Get
(
)
-
>
GetStringID
(
XPCJSContext
:
:
IDX_COMPONENTS
)
)
{
return
true
;
}
if
(
aId
=
=
XPCJSRuntime
:
:
Get
(
)
-
>
GetStringID
(
XPCJSContext
:
:
IDX_CONTROLLERS
)
|
|
aId
=
=
XPCJSRuntime
:
:
Get
(
)
-
>
GetStringID
(
XPCJSContext
:
:
IDX_CONTROLLERS_CLASS
)
)
{
return
true
;
}
if
(
WebIDLGlobalNameHash
:
:
MayResolve
(
aId
)
)
{
return
true
;
}
nsScriptNameSpaceManager
*
nameSpaceManager
=
PeekNameSpaceManager
(
)
;
if
(
!
nameSpaceManager
)
{
return
true
;
}
nsAutoString
name
;
AssignJSFlatString
(
name
JSID_TO_FLAT_STRING
(
aId
)
)
;
return
nameSpaceManager
-
>
LookupName
(
name
)
;
}
void
nsGlobalWindowInner
:
:
GetOwnPropertyNames
(
JSContext
*
aCx
JS
:
:
AutoIdVector
&
aNames
bool
aEnumerableOnly
ErrorResult
&
aRv
)
{
if
(
aEnumerableOnly
)
{
return
;
}
nsScriptNameSpaceManager
*
nameSpaceManager
=
GetNameSpaceManager
(
)
;
if
(
nameSpaceManager
)
{
JS
:
:
Rooted
<
JSObject
*
>
wrapper
(
aCx
GetWrapper
(
)
)
;
WebIDLGlobalNameHash
:
:
NameType
nameType
=
js
:
:
IsObjectInContextCompartment
(
wrapper
aCx
)
?
WebIDLGlobalNameHash
:
:
UnresolvedNamesOnly
:
WebIDLGlobalNameHash
:
:
AllNames
;
if
(
!
WebIDLGlobalNameHash
:
:
GetNames
(
aCx
wrapper
nameType
aNames
)
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
}
for
(
auto
i
=
nameSpaceManager
-
>
GlobalNameIter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
const
GlobalNameMapEntry
*
entry
=
i
.
Get
(
)
;
if
(
nsWindowSH
:
:
NameStructEnabled
(
aCx
this
entry
-
>
mKey
entry
-
>
mGlobalName
)
)
{
JSString
*
str
=
JS_AtomizeUCStringN
(
aCx
entry
-
>
mKey
.
BeginReading
(
)
entry
-
>
mKey
.
Length
(
)
)
;
if
(
!
str
|
|
!
aNames
.
append
(
NON_INTEGER_ATOM_TO_JSID
(
str
)
)
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
return
;
}
}
}
}
}
bool
nsGlobalWindowInner
:
:
IsPrivilegedChromeWindow
(
JSContext
*
aCx
JSObject
*
aObj
)
{
return
xpc
:
:
WindowOrNull
(
aObj
)
-
>
IsChromeWindow
(
)
&
&
nsContentUtils
:
:
ObjectPrincipal
(
aObj
)
=
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
;
}
bool
nsGlobalWindowInner
:
:
OfflineCacheAllowedForContext
(
JSContext
*
aCx
JSObject
*
aObj
)
{
return
IsSecureContextOrObjectIsFromSecureContext
(
aCx
aObj
)
|
|
Preferences
:
:
GetBool
(
"
browser
.
cache
.
offline
.
insecure
.
enable
"
)
;
}
bool
nsGlobalWindowInner
:
:
IsRequestIdleCallbackEnabled
(
JSContext
*
aCx
JSObject
*
aObj
)
{
return
nsContentUtils
:
:
RequestIdleCallbackEnabled
(
)
|
|
nsContentUtils
:
:
IsSystemCaller
(
aCx
)
;
}
bool
nsGlobalWindowInner
:
:
RegisterProtocolHandlerAllowedForContext
(
JSContext
*
aCx
JSObject
*
aObj
)
{
return
IsSecureContextOrObjectIsFromSecureContext
(
aCx
aObj
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
registerProtocolHandler
.
insecure
.
enabled
"
)
;
}
nsIDOMOfflineResourceList
*
nsGlobalWindowInner
:
:
GetApplicationCache
(
ErrorResult
&
aError
)
{
if
(
!
mApplicationCache
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
GetDocShell
(
)
)
)
;
if
(
!
webNav
|
|
!
mDoc
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uri
;
aError
=
webNav
-
>
GetCurrentURI
(
getter_AddRefs
(
uri
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
manifestURI
;
nsContentUtils
:
:
GetOfflineAppManifest
(
mDoc
getter_AddRefs
(
manifestURI
)
)
;
RefPtr
<
nsDOMOfflineResourceList
>
applicationCache
=
new
nsDOMOfflineResourceList
(
manifestURI
uri
mDoc
-
>
NodePrincipal
(
)
this
)
;
applicationCache
-
>
Init
(
)
;
mApplicationCache
=
applicationCache
;
}
return
mApplicationCache
;
}
already_AddRefed
<
nsIDOMOfflineResourceList
>
nsGlobalWindowInner
:
:
GetApplicationCache
(
)
{
ErrorResult
dummy
;
nsCOMPtr
<
nsIDOMOfflineResourceList
>
applicationCache
=
GetApplicationCache
(
dummy
)
;
dummy
.
SuppressException
(
)
;
return
applicationCache
.
forget
(
)
;
}
Crypto
*
nsGlobalWindowInner
:
:
GetCrypto
(
ErrorResult
&
aError
)
{
if
(
!
mCrypto
)
{
mCrypto
=
new
Crypto
(
this
)
;
}
return
mCrypto
;
}
mozilla
:
:
dom
:
:
U2F
*
nsGlobalWindowInner
:
:
GetU2f
(
ErrorResult
&
aError
)
{
if
(
!
mU2F
)
{
RefPtr
<
U2F
>
u2f
=
new
U2F
(
this
)
;
u2f
-
>
Init
(
aError
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
nullptr
;
}
mU2F
=
u2f
;
}
return
mU2F
;
}
nsIControllers
*
nsGlobalWindowInner
:
:
GetControllers
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetControllersOuter
(
aError
)
aError
nullptr
)
;
}
nsresult
nsGlobalWindowInner
:
:
GetControllers
(
nsIControllers
*
*
aResult
)
{
ErrorResult
rv
;
nsCOMPtr
<
nsIControllers
>
controllers
=
GetControllers
(
rv
)
;
controllers
.
forget
(
aResult
)
;
return
rv
.
StealNSResult
(
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetOpenerWindow
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetOpenerWindowOuter
(
)
aError
nullptr
)
;
}
void
nsGlobalWindowInner
:
:
GetOpener
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aError
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
opener
=
GetOpenerWindow
(
aError
)
;
if
(
aError
.
Failed
(
)
|
|
!
opener
)
{
aRetval
.
setNull
(
)
;
return
;
}
aError
=
nsContentUtils
:
:
WrapNative
(
aCx
opener
aRetval
)
;
}
void
nsGlobalWindowInner
:
:
SetOpener
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aOpener
ErrorResult
&
aError
)
{
if
(
!
aOpener
.
isNull
(
)
&
&
!
nsContentUtils
:
:
IsCallerChrome
(
)
)
{
RedefineProperty
(
aCx
"
opener
"
aOpener
aError
)
;
return
;
}
if
(
!
aOpener
.
isObjectOrNull
(
)
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
nsPIDOMWindowInner
*
win
=
nullptr
;
if
(
aOpener
.
isObject
(
)
)
{
JSObject
*
unwrapped
=
js
:
:
CheckedUnwrap
(
&
aOpener
.
toObject
(
)
false
)
;
if
(
!
unwrapped
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
auto
*
globalWindow
=
xpc
:
:
WindowOrNull
(
unwrapped
)
;
if
(
!
globalWindow
)
{
aError
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
win
=
globalWindow
;
}
nsPIDOMWindowOuter
*
outer
=
nullptr
;
if
(
win
)
{
if
(
!
win
-
>
IsCurrentInnerWindow
(
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
outer
=
win
-
>
GetOuterWindow
(
)
;
}
SetOpenerWindow
(
outer
false
)
;
}
void
nsGlobalWindowInner
:
:
GetStatus
(
nsAString
&
aStatus
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetStatusOuter
(
aStatus
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetStatus
(
const
nsAString
&
aStatus
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetStatusOuter
(
aStatus
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
GetName
(
nsAString
&
aName
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetNameOuter
(
aName
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetName
(
const
nsAString
&
aName
mozilla
:
:
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetNameOuter
(
aName
aError
)
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetInnerWidth
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetInnerWidthOuter
(
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetInnerWidth
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetInnerWidth
aValue
aCallerType
aError
)
;
}
nsresult
nsGlobalWindowInner
:
:
GetInnerWidth
(
int32_t
*
aInnerWidth
)
{
ErrorResult
rv
;
*
aInnerWidth
=
GetInnerWidth
(
CallerType
:
:
NonSystem
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
void
nsGlobalWindowInner
:
:
SetInnerWidth
(
int32_t
aInnerWidth
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetInnerWidthOuter
(
aInnerWidth
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetInnerWidth
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetInnerWidth
aValue
"
innerWidth
"
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetInnerHeight
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetInnerHeightOuter
(
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetInnerHeight
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetInnerHeight
aValue
aCallerType
aError
)
;
}
nsresult
nsGlobalWindowInner
:
:
GetInnerHeight
(
int32_t
*
aInnerHeight
)
{
ErrorResult
rv
;
*
aInnerHeight
=
GetInnerHeight
(
CallerType
:
:
NonSystem
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
void
nsGlobalWindowInner
:
:
SetInnerHeight
(
int32_t
aInnerHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetInnerHeightOuter
(
aInnerHeight
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetInnerHeight
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetInnerHeight
aValue
"
innerHeight
"
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetOuterWidth
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetOuterWidthOuter
(
aCallerType
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetOuterWidth
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetOuterWidth
aValue
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetOuterHeight
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetOuterHeightOuter
(
aCallerType
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetOuterHeight
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetOuterHeight
aValue
aCallerType
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetOuterWidth
(
int32_t
aOuterWidth
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetOuterWidthOuter
(
aOuterWidth
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetOuterWidth
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetOuterWidth
aValue
"
outerWidth
"
aCallerType
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetOuterHeight
(
int32_t
aOuterHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetOuterHeightOuter
(
aOuterHeight
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetOuterHeight
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetOuterHeight
aValue
"
outerHeight
"
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScreenX
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScreenXOuter
(
aCallerType
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetScreenX
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetScreenX
aValue
aCallerType
aError
)
;
}
float
nsGlobalWindowInner
:
:
GetMozInnerScreenX
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetMozInnerScreenXOuter
(
aCallerType
)
aError
0
)
;
}
float
nsGlobalWindowInner
:
:
GetMozInnerScreenY
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetMozInnerScreenYOuter
(
aCallerType
)
aError
0
)
;
}
double
nsGlobalWindowInner
:
:
GetDevicePixelRatio
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetDevicePixelRatioOuter
(
aCallerType
)
aError
0
.
0
)
;
}
uint64_t
nsGlobalWindowInner
:
:
GetMozPaintCount
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetMozPaintCountOuter
(
)
aError
0
)
;
}
int32_t
nsGlobalWindowInner
:
:
RequestAnimationFrame
(
FrameRequestCallback
&
aCallback
ErrorResult
&
aError
)
{
if
(
!
mDoc
)
{
return
0
;
}
if
(
GetWrapperPreserveColor
(
)
)
{
js
:
:
NotifyAnimationActivity
(
GetWrapperPreserveColor
(
)
)
;
}
int32_t
handle
;
aError
=
mDoc
-
>
ScheduleFrameRequestCallback
(
aCallback
&
handle
)
;
return
handle
;
}
void
nsGlobalWindowInner
:
:
CancelAnimationFrame
(
int32_t
aHandle
ErrorResult
&
aError
)
{
if
(
!
mDoc
)
{
return
;
}
mDoc
-
>
CancelFrameRequestCallback
(
aHandle
)
;
}
already_AddRefed
<
MediaQueryList
>
nsGlobalWindowInner
:
:
MatchMedia
(
const
nsAString
&
aMediaQueryList
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
MatchMediaOuter
(
aMediaQueryList
aCallerType
)
aError
nullptr
)
;
}
void
nsGlobalWindowInner
:
:
SetScreenX
(
int32_t
aScreenX
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetScreenXOuter
(
aScreenX
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetScreenX
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetScreenX
aValue
"
screenX
"
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScreenY
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScreenYOuter
(
aCallerType
aError
)
aError
0
)
;
}
void
nsGlobalWindowInner
:
:
GetScreenY
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
GetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
GetScreenY
aValue
aCallerType
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetScreenY
(
int32_t
aScreenY
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetScreenYOuter
(
aScreenY
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SetScreenY
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
CallerType
aCallerType
ErrorResult
&
aError
)
{
SetReplaceableWindowCoord
(
aCx
&
nsGlobalWindowInner
:
:
SetScreenY
aValue
"
screenY
"
aCallerType
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScrollMinX
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollBoundaryOuter
(
eSideLeft
)
aError
0
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScrollMinY
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollBoundaryOuter
(
eSideTop
)
aError
0
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScrollMaxX
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollBoundaryOuter
(
eSideRight
)
aError
0
)
;
}
int32_t
nsGlobalWindowInner
:
:
GetScrollMaxY
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollBoundaryOuter
(
eSideBottom
)
aError
0
)
;
}
double
nsGlobalWindowInner
:
:
GetScrollX
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollXOuter
(
)
aError
0
)
;
}
double
nsGlobalWindowInner
:
:
GetScrollY
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetScrollYOuter
(
)
aError
0
)
;
}
uint32_t
nsGlobalWindowInner
:
:
Length
(
)
{
FORWARD_TO_OUTER
(
Length
(
)
0
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
GetTop
(
mozilla
:
:
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetTopOuter
(
)
aError
nullptr
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetChildWindow
(
const
nsAString
&
aName
)
{
if
(
GetOuterWindowInternal
(
)
)
{
return
GetOuterWindowInternal
(
)
-
>
GetChildWindow
(
aName
)
;
}
return
nullptr
;
}
void
nsGlobalWindowInner
:
:
RefreshCompartmentPrincipal
(
)
{
JS_SetCompartmentPrincipals
(
js
:
:
GetObjectCompartment
(
GetWrapperPreserveColor
(
)
)
nsJSPrincipals
:
:
get
(
mDoc
-
>
NodePrincipal
(
)
)
)
;
}
already_AddRefed
<
nsIWidget
>
nsGlobalWindowInner
:
:
GetMainWidget
(
)
{
FORWARD_TO_OUTER
(
GetMainWidget
(
)
nullptr
)
;
}
nsIWidget
*
nsGlobalWindowInner
:
:
GetNearestWidget
(
)
const
{
if
(
GetOuterWindowInternal
(
)
)
{
return
GetOuterWindowInternal
(
)
-
>
GetNearestWidget
(
)
;
}
return
nullptr
;
}
void
nsGlobalWindowInner
:
:
SetFullScreen
(
bool
aFullScreen
mozilla
:
:
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetFullScreenOuter
(
aFullScreen
aError
)
aError
)
;
}
bool
nsGlobalWindowInner
:
:
GetFullScreen
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetFullScreenOuter
(
)
aError
false
)
;
}
bool
nsGlobalWindowInner
:
:
GetFullScreen
(
)
{
ErrorResult
dummy
;
bool
fullscreen
=
GetFullScreen
(
dummy
)
;
dummy
.
SuppressException
(
)
;
return
fullscreen
;
}
void
nsGlobalWindowInner
:
:
Dump
(
const
nsAString
&
aStr
)
{
if
(
!
DOMPrefs
:
:
DumpEnabled
(
)
)
{
return
;
}
char
*
cstr
=
ToNewUTF8String
(
aStr
)
;
#
if
defined
(
XP_MACOSX
)
char
*
c
=
cstr
*
cEnd
=
cstr
+
strlen
(
cstr
)
;
while
(
c
<
cEnd
)
{
if
(
*
c
=
=
'
\
r
'
)
*
c
=
'
\
n
'
;
c
+
+
;
}
#
endif
if
(
cstr
)
{
MOZ_LOG
(
nsContentUtils
:
:
DOMDumpLog
(
)
LogLevel
:
:
Debug
(
"
[
Window
.
Dump
]
%
s
"
cstr
)
)
;
#
ifdef
XP_WIN
PrintToDebugger
(
cstr
)
;
#
endif
#
ifdef
ANDROID
__android_log_write
(
ANDROID_LOG_INFO
"
GeckoDump
"
cstr
)
;
#
endif
FILE
*
fp
=
gDumpFile
?
gDumpFile
:
stdout
;
fputs
(
cstr
fp
)
;
fflush
(
fp
)
;
free
(
cstr
)
;
}
}
void
nsGlobalWindowInner
:
:
Alert
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
Alert
(
EmptyString
(
)
aSubjectPrincipal
aError
)
;
}
void
nsGlobalWindowInner
:
:
Alert
(
const
nsAString
&
aMessage
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
AlertOuter
(
aMessage
aSubjectPrincipal
aError
)
aError
)
;
}
bool
nsGlobalWindowInner
:
:
Confirm
(
const
nsAString
&
aMessage
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
ConfirmOuter
(
aMessage
aSubjectPrincipal
aError
)
aError
false
)
;
}
already_AddRefed
<
Promise
>
nsGlobalWindowInner
:
:
Fetch
(
const
RequestOrUSVString
&
aInput
const
RequestInit
&
aInit
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
FetchRequest
(
this
aInput
aInit
aCallerType
aRv
)
;
}
void
nsGlobalWindowInner
:
:
Prompt
(
const
nsAString
&
aMessage
const
nsAString
&
aInitial
nsAString
&
aReturn
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
PromptOuter
(
aMessage
aInitial
aReturn
aSubjectPrincipal
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
Focus
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
FocusOuter
(
aError
)
aError
)
;
}
nsresult
nsGlobalWindowInner
:
:
Focus
(
)
{
ErrorResult
rv
;
Focus
(
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
void
nsGlobalWindowInner
:
:
Blur
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
BlurOuter
(
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
Back
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
BackOuter
(
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
Forward
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
ForwardOuter
(
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
Home
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
HomeOuter
(
aSubjectPrincipal
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
Stop
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
StopOuter
(
aError
)
aError
)
;
}
bool
nsGlobalWindowInner
:
:
IsWindowPrintEnabled
(
JSContext
*
JSObject
*
)
{
static
bool
called
=
false
;
static
bool
printDisabled
=
false
;
if
(
!
called
)
{
called
=
true
;
Preferences
:
:
AddBoolVarCache
(
&
printDisabled
"
dom
.
disable_window_print
"
)
;
}
return
!
printDisabled
;
}
void
nsGlobalWindowInner
:
:
Print
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
PrintOuter
(
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
MoveTo
(
int32_t
aXPos
int32_t
aYPos
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
MoveToOuter
(
aXPos
aYPos
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
MoveBy
(
int32_t
aXDif
int32_t
aYDif
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
MoveByOuter
(
aXDif
aYDif
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
ResizeTo
(
int32_t
aWidth
int32_t
aHeight
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
ResizeToOuter
(
aWidth
aHeight
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
ResizeBy
(
int32_t
aWidthDif
int32_t
aHeightDif
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
ResizeByOuter
(
aWidthDif
aHeightDif
aCallerType
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
SizeToContent
(
CallerType
aCallerType
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SizeToContentOuter
(
aCallerType
aError
)
aError
)
;
}
already_AddRefed
<
nsPIWindowRoot
>
nsGlobalWindowInner
:
:
GetTopWindowRoot
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
return
nullptr
;
}
return
outer
-
>
GetTopWindowRoot
(
)
;
}
void
nsGlobalWindowInner
:
:
Scroll
(
double
aXScroll
double
aYScroll
)
{
auto
scrollPos
=
CSSIntPoint
:
:
Truncate
(
mozilla
:
:
ToZeroIfNonfinite
(
aXScroll
)
mozilla
:
:
ToZeroIfNonfinite
(
aYScroll
)
)
;
ScrollTo
(
scrollPos
ScrollOptions
(
)
)
;
}
void
nsGlobalWindowInner
:
:
ScrollTo
(
double
aXScroll
double
aYScroll
)
{
auto
scrollPos
=
CSSIntPoint
:
:
Truncate
(
mozilla
:
:
ToZeroIfNonfinite
(
aXScroll
)
mozilla
:
:
ToZeroIfNonfinite
(
aYScroll
)
)
;
ScrollTo
(
scrollPos
ScrollOptions
(
)
)
;
}
void
nsGlobalWindowInner
:
:
ScrollTo
(
const
ScrollToOptions
&
aOptions
)
{
FlushType
flushType
=
(
(
aOptions
.
mLeft
.
WasPassed
(
)
&
&
aOptions
.
mLeft
.
Value
(
)
>
0
)
|
|
(
aOptions
.
mTop
.
WasPassed
(
)
&
&
aOptions
.
mTop
.
Value
(
)
>
0
)
)
?
FlushType
:
:
Layout
:
FlushType
:
:
Frames
;
FlushPendingNotifications
(
flushType
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
CSSIntPoint
scrollPos
=
sf
-
>
GetScrollPositionCSSPixels
(
)
;
if
(
aOptions
.
mLeft
.
WasPassed
(
)
)
{
scrollPos
.
x
=
mozilla
:
:
ToZeroIfNonfinite
(
aOptions
.
mLeft
.
Value
(
)
)
;
}
if
(
aOptions
.
mTop
.
WasPassed
(
)
)
{
scrollPos
.
y
=
mozilla
:
:
ToZeroIfNonfinite
(
aOptions
.
mTop
.
Value
(
)
)
;
}
ScrollTo
(
scrollPos
aOptions
)
;
}
}
void
nsGlobalWindowInner
:
:
Scroll
(
const
ScrollToOptions
&
aOptions
)
{
ScrollTo
(
aOptions
)
;
}
void
nsGlobalWindowInner
:
:
ScrollTo
(
const
CSSIntPoint
&
aScroll
const
ScrollOptions
&
aOptions
)
{
FlushType
flushType
=
(
aScroll
.
x
|
|
aScroll
.
y
)
?
FlushType
:
:
Layout
:
FlushType
:
:
Frames
;
FlushPendingNotifications
(
flushType
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
const
int32_t
maxpx
=
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
0x7fffffff
)
-
4
;
CSSIntPoint
scroll
(
aScroll
)
;
if
(
scroll
.
x
>
maxpx
)
{
scroll
.
x
=
maxpx
;
}
if
(
scroll
.
y
>
maxpx
)
{
scroll
.
y
=
maxpx
;
}
bool
smoothScroll
=
sf
-
>
GetScrollbarStyles
(
)
.
IsSmoothScroll
(
aOptions
.
mBehavior
)
;
sf
-
>
ScrollToCSSPixels
(
scroll
smoothScroll
?
nsIScrollableFrame
:
:
SMOOTH_MSD
:
nsIScrollableFrame
:
:
INSTANT
)
;
}
}
void
nsGlobalWindowInner
:
:
ScrollBy
(
double
aXScrollDif
double
aYScrollDif
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
auto
scrollDif
=
CSSIntPoint
:
:
Truncate
(
mozilla
:
:
ToZeroIfNonfinite
(
aXScrollDif
)
mozilla
:
:
ToZeroIfNonfinite
(
aYScrollDif
)
)
;
ScrollTo
(
sf
-
>
GetScrollPositionCSSPixels
(
)
+
scrollDif
ScrollOptions
(
)
)
;
}
}
void
nsGlobalWindowInner
:
:
ScrollBy
(
const
ScrollToOptions
&
aOptions
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
CSSIntPoint
scrollPos
=
sf
-
>
GetScrollPositionCSSPixels
(
)
;
if
(
aOptions
.
mLeft
.
WasPassed
(
)
)
{
scrollPos
.
x
+
=
mozilla
:
:
ToZeroIfNonfinite
(
aOptions
.
mLeft
.
Value
(
)
)
;
}
if
(
aOptions
.
mTop
.
WasPassed
(
)
)
{
scrollPos
.
y
+
=
mozilla
:
:
ToZeroIfNonfinite
(
aOptions
.
mTop
.
Value
(
)
)
;
}
ScrollTo
(
scrollPos
aOptions
)
;
}
}
void
nsGlobalWindowInner
:
:
ScrollByLines
(
int32_t
numLines
const
ScrollOptions
&
aOptions
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
bool
smoothScroll
=
sf
-
>
GetScrollbarStyles
(
)
.
IsSmoothScroll
(
aOptions
.
mBehavior
)
;
sf
-
>
ScrollBy
(
nsIntPoint
(
0
numLines
)
nsIScrollableFrame
:
:
LINES
smoothScroll
?
nsIScrollableFrame
:
:
SMOOTH_MSD
:
nsIScrollableFrame
:
:
INSTANT
)
;
}
}
void
nsGlobalWindowInner
:
:
ScrollByPages
(
int32_t
numPages
const
ScrollOptions
&
aOptions
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
bool
smoothScroll
=
sf
-
>
GetScrollbarStyles
(
)
.
IsSmoothScroll
(
aOptions
.
mBehavior
)
;
sf
-
>
ScrollBy
(
nsIntPoint
(
0
numPages
)
nsIScrollableFrame
:
:
PAGES
smoothScroll
?
nsIScrollableFrame
:
:
SMOOTH_MSD
:
nsIScrollableFrame
:
:
INSTANT
)
;
}
}
void
nsGlobalWindowInner
:
:
MozScrollSnap
(
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
nsIScrollableFrame
*
sf
=
GetScrollFrame
(
)
;
if
(
sf
)
{
sf
-
>
ScrollSnap
(
)
;
}
}
void
nsGlobalWindowInner
:
:
ClearTimeout
(
int32_t
aHandle
)
{
if
(
aHandle
>
0
)
{
mTimeoutManager
-
>
ClearTimeout
(
aHandle
Timeout
:
:
Reason
:
:
eTimeoutOrInterval
)
;
}
}
void
nsGlobalWindowInner
:
:
ClearInterval
(
int32_t
aHandle
)
{
if
(
aHandle
>
0
)
{
mTimeoutManager
-
>
ClearTimeout
(
aHandle
Timeout
:
:
Reason
:
:
eTimeoutOrInterval
)
;
}
}
void
nsGlobalWindowInner
:
:
SetResizable
(
bool
aResizable
)
const
{
}
void
nsGlobalWindowInner
:
:
CaptureEvents
(
)
{
if
(
mDoc
)
{
mDoc
-
>
WarnOnceAbout
(
nsIDocument
:
:
eUseOfCaptureEvents
)
;
}
}
void
nsGlobalWindowInner
:
:
ReleaseEvents
(
)
{
if
(
mDoc
)
{
mDoc
-
>
WarnOnceAbout
(
nsIDocument
:
:
eUseOfReleaseEvents
)
;
}
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
Open
(
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
OpenOuter
(
aUrl
aName
aOptions
aError
)
aError
nullptr
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
OpenDialog
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
nsAString
&
aName
const
nsAString
&
aOptions
const
Sequence
<
JS
:
:
Value
>
&
aExtraArgument
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
OpenDialogOuter
(
aCx
aUrl
aName
aOptions
aExtraArgument
aError
)
aError
nullptr
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsGlobalWindowInner
:
:
GetFrames
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetFramesOuter
(
)
aError
nullptr
)
;
}
nsGlobalWindowInner
*
nsGlobalWindowInner
:
:
CallerInnerWindow
(
)
{
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
NS_ENSURE_TRUE
(
cx
nullptr
)
;
nsIGlobalObject
*
global
=
GetIncumbentGlobal
(
)
;
NS_ENSURE_TRUE
(
global
nullptr
)
;
JS
:
:
Rooted
<
JSObject
*
>
scope
(
cx
global
-
>
GetGlobalJSObject
(
)
)
;
NS_ENSURE_TRUE
(
scope
nullptr
)
;
if
(
xpc
:
:
IsSandbox
(
scope
)
)
{
JSAutoCompartment
ac
(
cx
scope
)
;
JS
:
:
Rooted
<
JSObject
*
>
scopeProto
(
cx
)
;
bool
ok
=
JS_GetPrototype
(
cx
scope
&
scopeProto
)
;
NS_ENSURE_TRUE
(
ok
nullptr
)
;
if
(
scopeProto
&
&
xpc
:
:
IsSandboxPrototypeProxy
(
scopeProto
)
&
&
(
scopeProto
=
js
:
:
CheckedUnwrap
(
scopeProto
false
)
)
)
{
global
=
xpc
:
:
NativeGlobal
(
scopeProto
)
;
NS_ENSURE_TRUE
(
global
nullptr
)
;
}
}
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
global
)
;
return
nsGlobalWindowInner
:
:
Cast
(
win
)
;
}
void
nsGlobalWindowInner
:
:
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
nsAString
&
aTargetOrigin
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
PostMessageMozOuter
(
aCx
aMessage
aTargetOrigin
aTransfer
aSubjectPrincipal
aError
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
PostMessageMoz
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
nsAString
&
aTargetOrigin
const
Sequence
<
JSObject
*
>
&
aTransfer
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
transferArray
(
aCx
JS
:
:
UndefinedValue
(
)
)
;
aRv
=
nsContentUtils
:
:
CreateJSValueFromSequenceOfObject
(
aCx
aTransfer
&
transferArray
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
PostMessageMoz
(
aCx
aMessage
aTargetOrigin
transferArray
aSubjectPrincipal
aRv
)
;
}
void
nsGlobalWindowInner
:
:
Close
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
CloseOuter
(
nsContentUtils
:
:
IsCallerChrome
(
)
)
aError
)
;
}
nsresult
nsGlobalWindowInner
:
:
Close
(
)
{
FORWARD_TO_OUTER
(
Close
(
)
NS_ERROR_UNEXPECTED
)
;
}
void
nsGlobalWindowInner
:
:
ReallyCloseWindow
(
)
{
FORWARD_TO_OUTER_VOID
(
ReallyCloseWindow
(
)
)
;
}
bool
nsGlobalWindowInner
:
:
IsInModalState
(
)
{
FORWARD_TO_OUTER
(
IsInModalState
(
)
false
)
;
}
void
nsGlobalWindowInner
:
:
NotifyDOMWindowDestroyed
(
nsGlobalWindowInner
*
aWindow
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
ToSupports
(
aWindow
)
DOM_WINDOW_DESTROYED_TOPIC
nullptr
)
;
}
}
void
nsGlobalWindowInner
:
:
NotifyWindowIDDestroyed
(
const
char
*
aTopic
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
WindowDestroyedEvent
(
this
mWindowID
aTopic
)
;
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
void
nsGlobalWindowInner
:
:
NotifyDOMWindowFrozen
(
nsGlobalWindowInner
*
aWindow
)
{
if
(
aWindow
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
ToSupports
(
aWindow
)
DOM_WINDOW_FROZEN_TOPIC
nullptr
)
;
}
}
}
void
nsGlobalWindowInner
:
:
NotifyDOMWindowThawed
(
nsGlobalWindowInner
*
aWindow
)
{
if
(
aWindow
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
ToSupports
(
aWindow
)
DOM_WINDOW_THAWED_TOPIC
nullptr
)
;
}
}
}
JSObject
*
nsGlobalWindowInner
:
:
GetCachedXBLPrototypeHandler
(
nsXBLPrototypeHandler
*
aKey
)
{
JS
:
:
Rooted
<
JSObject
*
>
handler
(
RootingCx
(
)
)
;
if
(
mCachedXBLPrototypeHandlers
)
{
mCachedXBLPrototypeHandlers
-
>
Get
(
aKey
handler
.
address
(
)
)
;
}
return
handler
;
}
void
nsGlobalWindowInner
:
:
CacheXBLPrototypeHandler
(
nsXBLPrototypeHandler
*
aKey
JS
:
:
Handle
<
JSObject
*
>
aHandler
)
{
if
(
!
mCachedXBLPrototypeHandlers
)
{
mCachedXBLPrototypeHandlers
=
MakeUnique
<
XBLPrototypeHandlerTable
>
(
)
;
PreserveWrapper
(
ToSupports
(
this
)
)
;
}
mCachedXBLPrototypeHandlers
-
>
Put
(
aKey
aHandler
)
;
}
Element
*
nsGlobalWindowInner
:
:
GetFrameElement
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetFrameElementOuter
(
aSubjectPrincipal
)
aError
nullptr
)
;
}
Element
*
nsGlobalWindowInner
:
:
GetRealFrameElement
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetRealFrameElementOuter
(
)
aError
nullptr
)
;
}
already_AddRefed
<
nsIDOMElement
>
nsGlobalWindowInner
:
:
GetFrameElement
(
)
{
ErrorResult
dummy
;
nsCOMPtr
<
nsIDOMElement
>
frameElement
=
do_QueryInterface
(
GetRealFrameElement
(
dummy
)
)
;
dummy
.
SuppressException
(
)
;
return
frameElement
.
forget
(
)
;
}
bool
nsGlobalWindowInner
:
:
TokenizeDialogOptions
(
nsAString
&
aToken
nsAString
:
:
const_iterator
&
aIter
nsAString
:
:
const_iterator
aEnd
)
{
while
(
aIter
!
=
aEnd
&
&
nsCRT
:
:
IsAsciiSpace
(
*
aIter
)
)
{
+
+
aIter
;
}
if
(
aIter
=
=
aEnd
)
{
return
false
;
}
if
(
*
aIter
=
=
'
;
'
|
|
*
aIter
=
=
'
:
'
|
|
*
aIter
=
=
'
=
'
)
{
aToken
.
Assign
(
*
aIter
)
;
+
+
aIter
;
return
true
;
}
nsAString
:
:
const_iterator
start
=
aIter
;
while
(
aIter
!
=
aEnd
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
aIter
)
&
&
*
aIter
!
=
'
;
'
&
&
*
aIter
!
=
'
:
'
&
&
*
aIter
!
=
'
=
'
)
{
+
+
aIter
;
}
aToken
.
Assign
(
Substring
(
start
aIter
)
)
;
return
true
;
}
void
nsGlobalWindowInner
:
:
ConvertDialogOptions
(
const
nsAString
&
aOptions
nsAString
&
aResult
)
{
nsAString
:
:
const_iterator
end
;
aOptions
.
EndReading
(
end
)
;
nsAString
:
:
const_iterator
iter
;
aOptions
.
BeginReading
(
iter
)
;
nsAutoString
token
;
nsAutoString
name
;
nsAutoString
value
;
while
(
true
)
{
if
(
!
TokenizeDialogOptions
(
name
iter
end
)
)
{
break
;
}
if
(
name
.
EqualsLiteral
(
"
=
"
)
|
|
name
.
EqualsLiteral
(
"
:
"
)
|
|
name
.
EqualsLiteral
(
"
;
"
)
)
{
break
;
}
if
(
!
TokenizeDialogOptions
(
token
iter
end
)
)
{
break
;
}
if
(
!
token
.
EqualsLiteral
(
"
:
"
)
&
&
!
token
.
EqualsLiteral
(
"
=
"
)
)
{
continue
;
}
if
(
!
TokenizeDialogOptions
(
value
iter
end
)
)
{
break
;
}
if
(
name
.
LowerCaseEqualsLiteral
(
"
center
"
)
)
{
if
(
value
.
LowerCaseEqualsLiteral
(
"
on
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
yes
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
1
"
)
)
{
aResult
.
AppendLiteral
(
"
centerscreen
=
1
"
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
dialogwidth
"
)
)
{
if
(
!
value
.
IsEmpty
(
)
)
{
aResult
.
AppendLiteral
(
"
width
=
"
)
;
aResult
.
Append
(
value
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
dialogheight
"
)
)
{
if
(
!
value
.
IsEmpty
(
)
)
{
aResult
.
AppendLiteral
(
"
height
=
"
)
;
aResult
.
Append
(
value
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
dialogtop
"
)
)
{
if
(
!
value
.
IsEmpty
(
)
)
{
aResult
.
AppendLiteral
(
"
top
=
"
)
;
aResult
.
Append
(
value
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
dialogleft
"
)
)
{
if
(
!
value
.
IsEmpty
(
)
)
{
aResult
.
AppendLiteral
(
"
left
=
"
)
;
aResult
.
Append
(
value
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
resizable
"
)
)
{
if
(
value
.
LowerCaseEqualsLiteral
(
"
on
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
yes
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
1
"
)
)
{
aResult
.
AppendLiteral
(
"
resizable
=
1
"
)
;
}
}
else
if
(
name
.
LowerCaseEqualsLiteral
(
"
scroll
"
)
)
{
if
(
value
.
LowerCaseEqualsLiteral
(
"
off
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
no
"
)
|
|
value
.
LowerCaseEqualsLiteral
(
"
0
"
)
)
{
aResult
.
AppendLiteral
(
"
scrollbars
=
0
"
)
;
}
}
if
(
iter
=
=
end
|
|
!
TokenizeDialogOptions
(
token
iter
end
)
|
|
!
token
.
EqualsLiteral
(
"
;
"
)
)
{
break
;
}
}
}
void
nsGlobalWindowInner
:
:
UpdateCommands
(
const
nsAString
&
anAction
nsISelection
*
aSel
int16_t
aReason
)
{
if
(
GetOuterWindowInternal
(
)
)
{
GetOuterWindowInternal
(
)
-
>
UpdateCommands
(
anAction
aSel
aReason
)
;
}
}
Selection
*
nsGlobalWindowInner
:
:
GetSelection
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetSelectionOuter
(
)
aError
nullptr
)
;
}
bool
nsGlobalWindowInner
:
:
Find
(
const
nsAString
&
aString
bool
aCaseSensitive
bool
aBackwards
bool
aWrapAround
bool
aWholeWord
bool
aSearchInFrames
bool
aShowDialog
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
FindOuter
(
aString
aCaseSensitive
aBackwards
aWrapAround
aWholeWord
aSearchInFrames
aShowDialog
aError
)
aError
false
)
;
}
void
nsGlobalWindowInner
:
:
GetOrigin
(
nsAString
&
aOrigin
)
{
nsContentUtils
:
:
GetUTFOrigin
(
GetPrincipal
(
)
aOrigin
)
;
}
void
nsGlobalWindowInner
:
:
Atob
(
const
nsAString
&
aAsciiBase64String
nsAString
&
aBinaryData
ErrorResult
&
aError
)
{
aError
=
nsContentUtils
:
:
Atob
(
aAsciiBase64String
aBinaryData
)
;
}
void
nsGlobalWindowInner
:
:
Btoa
(
const
nsAString
&
aBinaryData
nsAString
&
aAsciiBase64String
ErrorResult
&
aError
)
{
aError
=
nsContentUtils
:
:
Btoa
(
aBinaryData
aAsciiBase64String
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetOwnerGlobalForBindings
(
)
{
return
nsPIDOMWindowOuter
:
:
GetFromCurrentInner
(
this
)
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
RemoveEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
)
{
if
(
RefPtr
<
EventListenerManager
>
elm
=
GetExistingListenerManager
(
)
)
{
elm
-
>
RemoveEventListener
(
aType
aListener
aUseCapture
)
;
}
return
NS_OK
;
}
NS_IMPL_REMOVE_SYSTEM_EVENT_LISTENER
(
nsGlobalWindowInner
)
NS_IMETHODIMP
nsGlobalWindowInner
:
:
DispatchEvent
(
nsIDOMEvent
*
aEvent
bool
*
aRetVal
)
{
if
(
!
IsCurrentInnerWindow
(
)
)
{
NS_WARNING
(
"
DispatchEvent
called
on
non
-
current
inner
window
dropping
.
"
"
Please
check
the
window
in
the
caller
instead
.
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
mDoc
)
{
return
NS_ERROR_FAILURE
;
}
nsIPresShell
*
shell
=
mDoc
-
>
GetShell
(
)
;
RefPtr
<
nsPresContext
>
presContext
;
if
(
shell
)
{
presContext
=
shell
-
>
GetPresContext
(
)
;
}
nsEventStatus
status
=
nsEventStatus_eIgnore
;
nsresult
rv
=
EventDispatcher
:
:
DispatchDOMEvent
(
ToSupports
(
this
)
nullptr
aEvent
presContext
&
status
)
;
*
aRetVal
=
(
status
!
=
nsEventStatus_eConsumeNoDefault
)
;
return
rv
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
AddEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
bool
aWantsUntrusted
uint8_t
aOptionalArgc
)
{
NS_ASSERTION
(
!
aWantsUntrusted
|
|
aOptionalArgc
>
1
"
Won
'
t
check
if
this
is
chrome
you
want
to
set
"
"
aWantsUntrusted
to
false
or
make
the
aWantsUntrusted
"
"
explicit
by
making
optional_argc
non
-
zero
.
"
)
;
if
(
!
aWantsUntrusted
&
&
(
aOptionalArgc
<
2
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
)
)
{
aWantsUntrusted
=
true
;
}
EventListenerManager
*
manager
=
GetOrCreateListenerManager
(
)
;
NS_ENSURE_STATE
(
manager
)
;
manager
-
>
AddEventListener
(
aType
aListener
aUseCapture
aWantsUntrusted
)
;
return
NS_OK
;
}
void
nsGlobalWindowInner
:
:
AddEventListener
(
const
nsAString
&
aType
EventListener
*
aListener
const
AddEventListenerOptionsOrBoolean
&
aOptions
const
Nullable
<
bool
>
&
aWantsUntrusted
ErrorResult
&
aRv
)
{
bool
wantsUntrusted
;
if
(
aWantsUntrusted
.
IsNull
(
)
)
{
wantsUntrusted
=
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
;
}
else
{
wantsUntrusted
=
aWantsUntrusted
.
Value
(
)
;
}
EventListenerManager
*
manager
=
GetOrCreateListenerManager
(
)
;
if
(
!
manager
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
manager
-
>
AddEventListener
(
aType
aListener
aOptions
wantsUntrusted
)
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
AddSystemEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
bool
aWantsUntrusted
uint8_t
aOptionalArgc
)
{
NS_ASSERTION
(
!
aWantsUntrusted
|
|
aOptionalArgc
>
1
"
Won
'
t
check
if
this
is
chrome
you
want
to
set
"
"
aWantsUntrusted
to
false
or
make
the
aWantsUntrusted
"
"
explicit
by
making
optional_argc
non
-
zero
.
"
)
;
if
(
!
aWantsUntrusted
&
&
(
aOptionalArgc
<
2
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
mDoc
)
)
)
{
aWantsUntrusted
=
true
;
}
return
NS_AddSystemEventListener
(
this
aType
aListener
aUseCapture
aWantsUntrusted
)
;
}
EventListenerManager
*
nsGlobalWindowInner
:
:
GetOrCreateListenerManager
(
)
{
if
(
!
mListenerManager
)
{
mListenerManager
=
new
EventListenerManager
(
static_cast
<
EventTarget
*
>
(
this
)
)
;
}
return
mListenerManager
;
}
EventListenerManager
*
nsGlobalWindowInner
:
:
GetExistingListenerManager
(
)
const
{
return
mListenerManager
;
}
nsIScriptContext
*
nsGlobalWindowInner
:
:
GetContextForEventHandlers
(
nsresult
*
aRv
)
{
*
aRv
=
NS_ERROR_UNEXPECTED
;
FORWARD_TO_OUTER
(
GetContextForEventHandlers
(
aRv
)
nullptr
)
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetPrivateRoot
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
NS_WARNING
(
"
No
outer
window
available
!
"
)
;
return
nullptr
;
}
return
outer
-
>
GetPrivateRoot
(
)
;
}
Location
*
nsGlobalWindowInner
:
:
GetLocation
(
)
{
if
(
!
mLocation
)
{
mLocation
=
new
dom
:
:
Location
(
this
GetDocShell
(
)
)
;
}
return
mLocation
;
}
bool
nsGlobalWindowInner
:
:
IsTopLevelWindowActive
(
)
{
if
(
GetOuterWindowInternal
(
)
)
{
return
GetOuterWindowInternal
(
)
-
>
IsTopLevelWindowActive
(
)
;
}
return
false
;
}
void
nsGlobalWindowInner
:
:
MaybeUpdateTouchState
(
)
{
if
(
mMayHaveTouchEventListener
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
static_cast
<
nsIDOMWindow
*
>
(
this
)
DOM_TOUCH_LISTENER_ADDED
nullptr
)
;
}
}
}
void
nsGlobalWindowInner
:
:
EnableGamepadUpdates
(
)
{
if
(
mHasGamepad
)
{
RefPtr
<
GamepadManager
>
gamepadManager
(
GamepadManager
:
:
GetService
(
)
)
;
if
(
gamepadManager
)
{
gamepadManager
-
>
AddListener
(
this
)
;
}
}
}
void
nsGlobalWindowInner
:
:
DisableGamepadUpdates
(
)
{
if
(
mHasGamepad
)
{
RefPtr
<
GamepadManager
>
gamepadManager
(
GamepadManager
:
:
GetService
(
)
)
;
if
(
gamepadManager
)
{
gamepadManager
-
>
RemoveListener
(
this
)
;
}
}
}
void
nsGlobalWindowInner
:
:
EnableVRUpdates
(
)
{
if
(
mHasVREvents
&
&
!
mVREventObserver
)
{
mVREventObserver
=
new
VREventObserver
(
this
)
;
}
}
void
nsGlobalWindowInner
:
:
DisableVRUpdates
(
)
{
if
(
mVREventObserver
)
{
mVREventObserver
-
>
DisconnectFromOwner
(
)
;
mVREventObserver
=
nullptr
;
}
}
void
nsGlobalWindowInner
:
:
ResetVRTelemetry
(
bool
aUpdate
)
{
if
(
mVREventObserver
)
{
mVREventObserver
-
>
UpdateSpentTimeIn2DTelemetry
(
aUpdate
)
;
}
}
static
bool
ShouldShowFocusRingIfFocusedByMouse
(
nsIContent
*
aNode
)
{
if
(
!
aNode
)
{
return
true
;
}
return
!
nsContentUtils
:
:
ContentIsLink
(
aNode
)
&
&
!
aNode
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
video
nsGkAtoms
:
:
audio
)
;
}
void
nsGlobalWindowInner
:
:
SetFocusedNode
(
nsIContent
*
aNode
uint32_t
aFocusMethod
bool
aNeedsFocus
)
{
if
(
aNode
&
&
aNode
-
>
GetComposedDoc
(
)
!
=
mDoc
)
{
NS_WARNING
(
"
Trying
to
set
focus
to
a
node
from
a
wrong
document
"
)
;
return
;
}
if
(
mCleanedUp
)
{
NS_ASSERTION
(
!
aNode
"
Trying
to
focus
cleaned
up
window
!
"
)
;
aNode
=
nullptr
;
aNeedsFocus
=
false
;
}
if
(
mFocusedNode
!
=
aNode
)
{
UpdateCanvasFocus
(
false
aNode
)
;
mFocusedNode
=
aNode
;
mFocusMethod
=
aFocusMethod
&
FOCUSMETHOD_MASK
;
mShowFocusRingForContent
=
false
;
}
if
(
mFocusedNode
)
{
if
(
mFocusMethod
&
nsIFocusManager
:
:
FLAG_BYKEY
)
{
mFocusByKeyOccurred
=
true
;
}
else
if
(
#
ifndef
XP_WIN
!
(
mFocusMethod
&
nsIFocusManager
:
:
FLAG_BYMOUSE
)
|
|
ShouldShowFocusRingIfFocusedByMouse
(
aNode
)
|
|
#
endif
aFocusMethod
&
nsIFocusManager
:
:
FLAG_SHOWRING
)
{
mShowFocusRingForContent
=
true
;
}
}
if
(
aNeedsFocus
)
mNeedsFocus
=
aNeedsFocus
;
}
uint32_t
nsGlobalWindowInner
:
:
GetFocusMethod
(
)
{
return
mFocusMethod
;
}
bool
nsGlobalWindowInner
:
:
ShouldShowFocusRing
(
)
{
if
(
mShowFocusRingForContent
|
|
mFocusByKeyOccurred
)
{
return
true
;
}
nsCOMPtr
<
nsPIWindowRoot
>
root
=
GetTopWindowRoot
(
)
;
return
root
?
root
-
>
ShowFocusRings
(
)
:
false
;
}
bool
nsGlobalWindowInner
:
:
TakeFocus
(
bool
aFocus
uint32_t
aFocusMethod
)
{
if
(
mCleanedUp
)
{
return
false
;
}
if
(
aFocus
)
mFocusMethod
=
aFocusMethod
&
FOCUSMETHOD_MASK
;
if
(
mHasFocus
!
=
aFocus
)
{
mHasFocus
=
aFocus
;
UpdateCanvasFocus
(
true
mFocusedNode
)
;
}
if
(
aFocus
&
&
mNeedsFocus
&
&
mDoc
&
&
mDoc
-
>
GetRootElement
(
)
!
=
nullptr
)
{
mNeedsFocus
=
false
;
return
true
;
}
mNeedsFocus
=
false
;
return
false
;
}
void
nsGlobalWindowInner
:
:
SetReadyForFocus
(
)
{
bool
oldNeedsFocus
=
mNeedsFocus
;
mNeedsFocus
=
false
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
WindowShown
(
GetOuterWindow
(
)
oldNeedsFocus
)
;
}
}
void
nsGlobalWindowInner
:
:
PageHidden
(
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
WindowHidden
(
GetOuterWindow
(
)
)
;
}
mNeedsFocus
=
true
;
}
class
HashchangeCallback
:
public
Runnable
{
public
:
HashchangeCallback
(
const
nsAString
&
aOldURL
const
nsAString
&
aNewURL
nsGlobalWindowInner
*
aWindow
)
:
mozilla
:
:
Runnable
(
"
HashchangeCallback
"
)
mWindow
(
aWindow
)
{
MOZ_ASSERT
(
mWindow
)
;
mOldURL
.
Assign
(
aOldURL
)
;
mNewURL
.
Assign
(
aNewURL
)
;
}
NS_IMETHOD
Run
(
)
override
{
NS_PRECONDITION
(
NS_IsMainThread
(
)
"
Should
be
called
on
the
main
thread
.
"
)
;
return
mWindow
-
>
FireHashchange
(
mOldURL
mNewURL
)
;
}
private
:
nsString
mOldURL
;
nsString
mNewURL
;
RefPtr
<
nsGlobalWindowInner
>
mWindow
;
}
;
nsresult
nsGlobalWindowInner
:
:
DispatchAsyncHashchange
(
nsIURI
*
aOldURI
nsIURI
*
aNewURI
)
{
bool
equal
=
false
;
NS_ENSURE_STATE
(
NS_SUCCEEDED
(
aOldURI
-
>
EqualsExceptRef
(
aNewURI
&
equal
)
)
&
&
equal
)
;
nsAutoCString
oldHash
newHash
;
bool
oldHasHash
newHasHash
;
NS_ENSURE_STATE
(
NS_SUCCEEDED
(
aOldURI
-
>
GetRef
(
oldHash
)
)
&
&
NS_SUCCEEDED
(
aNewURI
-
>
GetRef
(
newHash
)
)
&
&
NS_SUCCEEDED
(
aOldURI
-
>
GetHasRef
(
&
oldHasHash
)
)
&
&
NS_SUCCEEDED
(
aNewURI
-
>
GetHasRef
(
&
newHasHash
)
)
&
&
(
oldHasHash
!
=
newHasHash
|
|
!
oldHash
.
Equals
(
newHash
)
)
)
;
nsAutoCString
oldSpec
newSpec
;
nsresult
rv
=
aOldURI
-
>
GetSpec
(
oldSpec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
aNewURI
-
>
GetSpec
(
newSpec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ConvertUTF8toUTF16
oldWideSpec
(
oldSpec
)
;
NS_ConvertUTF8toUTF16
newWideSpec
(
newSpec
)
;
nsCOMPtr
<
nsIRunnable
>
callback
=
new
HashchangeCallback
(
oldWideSpec
newWideSpec
this
)
;
return
Dispatch
(
TaskCategory
:
:
Other
callback
.
forget
(
)
)
;
}
nsresult
nsGlobalWindowInner
:
:
FireHashchange
(
const
nsAString
&
aOldURL
const
nsAString
&
aNewURL
)
{
if
(
IsFrozen
(
)
)
{
return
NS_OK
;
}
NS_ENSURE_STATE
(
IsCurrentInnerWindow
(
)
)
;
nsIPresShell
*
shell
=
mDoc
-
>
GetShell
(
)
;
RefPtr
<
nsPresContext
>
presContext
;
if
(
shell
)
{
presContext
=
shell
-
>
GetPresContext
(
)
;
}
HashChangeEventInit
init
;
init
.
mBubbles
=
true
;
init
.
mCancelable
=
false
;
init
.
mNewURL
=
aNewURL
;
init
.
mOldURL
=
aOldURL
;
RefPtr
<
HashChangeEvent
>
event
=
HashChangeEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
hashchange
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
return
DispatchEvent
(
event
&
dummy
)
;
}
nsresult
nsGlobalWindowInner
:
:
DispatchSyncPopState
(
)
{
NS_ASSERTION
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Must
be
safe
to
run
script
here
.
"
)
;
nsresult
rv
=
NS_OK
;
if
(
IsFrozen
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIVariant
>
stateObj
;
rv
=
mDoc
-
>
GetStateObject
(
getter_AddRefs
(
stateObj
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsIPresShell
*
shell
=
mDoc
-
>
GetShell
(
)
;
RefPtr
<
nsPresContext
>
presContext
;
if
(
shell
)
{
presContext
=
shell
-
>
GetPresContext
(
)
;
}
bool
result
=
true
;
AutoJSAPI
jsapi
;
result
=
jsapi
.
Init
(
this
)
;
NS_ENSURE_TRUE
(
result
NS_ERROR_FAILURE
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
stateJSValue
(
cx
JS
:
:
NullValue
(
)
)
;
result
=
stateObj
?
VariantToJsval
(
cx
stateObj
&
stateJSValue
)
:
true
;
NS_ENSURE_TRUE
(
result
NS_ERROR_FAILURE
)
;
RootedDictionary
<
PopStateEventInit
>
init
(
cx
)
;
init
.
mBubbles
=
true
;
init
.
mCancelable
=
false
;
init
.
mState
=
stateJSValue
;
RefPtr
<
PopStateEvent
>
event
=
PopStateEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
popstate
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
event
-
>
SetTarget
(
this
)
;
bool
dummy
;
return
DispatchEvent
(
event
&
dummy
)
;
}
static
nsCanvasFrame
*
FindCanvasFrame
(
nsIFrame
*
aFrame
)
{
nsCanvasFrame
*
canvasFrame
=
do_QueryFrame
(
aFrame
)
;
if
(
canvasFrame
)
{
return
canvasFrame
;
}
for
(
nsIFrame
*
kid
:
aFrame
-
>
PrincipalChildList
(
)
)
{
canvasFrame
=
FindCanvasFrame
(
kid
)
;
if
(
canvasFrame
)
{
return
canvasFrame
;
}
}
return
nullptr
;
}
void
nsGlobalWindowInner
:
:
UpdateCanvasFocus
(
bool
aFocusChanged
nsIContent
*
aNewContent
)
{
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
if
(
!
docShell
)
return
;
bool
editable
;
docShell
-
>
GetEditable
(
&
editable
)
;
if
(
editable
)
return
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
docShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
|
|
!
mDoc
)
return
;
Element
*
rootElement
=
mDoc
-
>
GetRootElement
(
)
;
if
(
rootElement
)
{
if
(
(
mHasFocus
|
|
aFocusChanged
)
&
&
(
mFocusedNode
=
=
rootElement
|
|
aNewContent
=
=
rootElement
)
)
{
nsIFrame
*
frame
=
rootElement
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
frame
=
frame
-
>
GetParent
(
)
;
nsCanvasFrame
*
canvasFrame
=
do_QueryFrame
(
frame
)
;
if
(
canvasFrame
)
{
canvasFrame
-
>
SetHasFocus
(
mHasFocus
&
&
rootElement
=
=
aNewContent
)
;
}
}
}
}
else
{
nsIFrame
*
frame
=
presShell
-
>
GetRootFrame
(
)
;
if
(
frame
)
{
nsCanvasFrame
*
canvasFrame
=
FindCanvasFrame
(
frame
)
;
if
(
canvasFrame
)
{
canvasFrame
-
>
SetHasFocus
(
false
)
;
}
}
}
}
already_AddRefed
<
nsICSSDeclaration
>
nsGlobalWindowInner
:
:
GetComputedStyle
(
Element
&
aElt
const
nsAString
&
aPseudoElt
ErrorResult
&
aError
)
{
return
GetComputedStyleHelper
(
aElt
aPseudoElt
false
aError
)
;
}
already_AddRefed
<
nsICSSDeclaration
>
nsGlobalWindowInner
:
:
GetDefaultComputedStyle
(
Element
&
aElt
const
nsAString
&
aPseudoElt
ErrorResult
&
aError
)
{
return
GetComputedStyleHelper
(
aElt
aPseudoElt
true
aError
)
;
}
nsresult
nsGlobalWindowInner
:
:
GetComputedStyleHelper
(
nsIDOMElement
*
aElt
const
nsAString
&
aPseudoElt
bool
aDefaultStylesOnly
nsICSSDeclaration
*
*
aReturn
)
{
NS_ENSURE_ARG_POINTER
(
aReturn
)
;
*
aReturn
=
nullptr
;
nsCOMPtr
<
dom
:
:
Element
>
element
=
do_QueryInterface
(
aElt
)
;
if
(
!
element
)
{
return
NS_ERROR_DOM_NOT_SUPPORTED_ERR
;
}
ErrorResult
rv
;
nsCOMPtr
<
nsICSSDeclaration
>
cs
=
GetComputedStyleHelper
(
*
element
aPseudoElt
aDefaultStylesOnly
rv
)
;
cs
.
forget
(
aReturn
)
;
return
rv
.
StealNSResult
(
)
;
}
already_AddRefed
<
nsICSSDeclaration
>
nsGlobalWindowInner
:
:
GetComputedStyleHelper
(
Element
&
aElt
const
nsAString
&
aPseudoElt
bool
aDefaultStylesOnly
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetComputedStyleHelperOuter
(
aElt
aPseudoElt
aDefaultStylesOnly
)
aError
nullptr
)
;
}
Storage
*
nsGlobalWindowInner
:
:
GetSessionStorage
(
ErrorResult
&
aError
)
{
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
if
(
!
principal
|
|
!
docShell
|
|
!
Storage
:
:
StoragePrefIsEnabled
(
)
)
{
return
nullptr
;
}
if
(
mSessionStorage
)
{
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
nsGlobalWindowInner
%
p
has
%
p
sessionStorage
"
this
mSessionStorage
.
get
(
)
)
)
;
bool
canAccess
=
principal
-
>
Subsumes
(
mSessionStorage
-
>
Principal
(
)
)
;
NS_ASSERTION
(
canAccess
"
This
window
owned
sessionStorage
"
"
that
could
not
be
accessed
!
"
)
;
if
(
!
canAccess
)
{
mSessionStorage
=
nullptr
;
}
}
if
(
!
mSessionStorage
)
{
nsString
documentURI
;
if
(
mDoc
)
{
aError
=
mDoc
-
>
GetDocumentURI
(
documentURI
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
nullptr
;
}
}
if
(
!
mDoc
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
mDoc
-
>
GetSandboxFlags
(
)
&
SANDBOXED_ORIGIN
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
nullptr
;
}
nsresult
rv
;
nsCOMPtr
<
nsIDOMStorageManager
>
storageManager
=
do_QueryInterface
(
docShell
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIDOMStorage
>
storage
;
aError
=
storageManager
-
>
CreateStorage
(
this
principal
documentURI
IsPrivateBrowsing
(
)
getter_AddRefs
(
storage
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
mSessionStorage
=
static_cast
<
Storage
*
>
(
storage
.
get
(
)
)
;
MOZ_ASSERT
(
mSessionStorage
)
;
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
nsGlobalWindowInner
%
p
tried
to
get
a
new
sessionStorage
%
p
"
this
mSessionStorage
.
get
(
)
)
)
;
if
(
!
mSessionStorage
)
{
aError
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
nullptr
;
}
}
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
nsGlobalWindowInner
%
p
returns
%
p
sessionStorage
"
this
mSessionStorage
.
get
(
)
)
)
;
return
mSessionStorage
;
}
Storage
*
nsGlobalWindowInner
:
:
GetLocalStorage
(
ErrorResult
&
aError
)
{
if
(
!
Storage
:
:
StoragePrefIsEnabled
(
)
)
{
return
nullptr
;
}
if
(
!
mLocalStorage
)
{
if
(
nsContentUtils
:
:
StorageAllowedForWindow
(
this
)
=
=
nsContentUtils
:
:
StorageAccess
:
:
eDeny
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
nullptr
;
}
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
if
(
!
principal
)
{
return
nullptr
;
}
nsresult
rv
;
nsCOMPtr
<
nsIDOMStorageManager
>
storageManager
=
do_GetService
(
"
mozilla
.
org
/
dom
/
localStorage
-
manager
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
nsString
documentURI
;
if
(
mDoc
)
{
aError
=
mDoc
-
>
GetDocumentURI
(
documentURI
)
;
if
(
NS_WARN_IF
(
aError
.
Failed
(
)
)
)
{
return
nullptr
;
}
}
nsCOMPtr
<
nsIDOMStorage
>
storage
;
aError
=
storageManager
-
>
CreateStorage
(
this
principal
documentURI
IsPrivateBrowsing
(
)
getter_AddRefs
(
storage
)
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
mLocalStorage
=
static_cast
<
Storage
*
>
(
storage
.
get
(
)
)
;
MOZ_ASSERT
(
mLocalStorage
)
;
}
return
mLocalStorage
;
}
IDBFactory
*
nsGlobalWindowInner
:
:
GetIndexedDB
(
ErrorResult
&
aError
)
{
if
(
!
mIndexedDB
)
{
aError
=
IDBFactory
:
:
CreateForWindow
(
this
getter_AddRefs
(
mIndexedDB
)
)
;
}
return
mIndexedDB
;
}
void
nsGlobalWindowInner
:
:
AddPendingPromise
(
mozilla
:
:
dom
:
:
Promise
*
aPromise
)
{
mPendingPromises
.
AppendElement
(
aPromise
)
;
}
void
nsGlobalWindowInner
:
:
RemovePendingPromise
(
mozilla
:
:
dom
:
:
Promise
*
aPromise
)
{
DebugOnly
<
bool
>
foundIt
=
mPendingPromises
.
RemoveElement
(
aPromise
)
;
MOZ_ASSERT
(
foundIt
"
tried
to
remove
a
non
-
existent
element
from
mPendingPromises
"
)
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aSink
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
NS_ENSURE_TRUE
(
outer
NS_ERROR_NOT_INITIALIZED
)
;
nsresult
rv
=
outer
-
>
GetInterfaceInternal
(
aIID
aSink
)
;
if
(
rv
=
=
NS_ERROR_NO_INTERFACE
)
{
return
QueryInterface
(
aIID
aSink
)
;
}
return
rv
;
}
void
nsGlobalWindowInner
:
:
GetInterface
(
JSContext
*
aCx
nsIJSID
*
aIID
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aError
)
{
dom
:
:
GetInterface
(
aCx
this
aIID
aRetval
aError
)
;
}
already_AddRefed
<
CacheStorage
>
nsGlobalWindowInner
:
:
GetCaches
(
ErrorResult
&
aRv
)
{
if
(
!
mCacheStorage
)
{
bool
forceTrustedOrigin
=
GetOuterWindow
(
)
-
>
GetServiceWorkersTestingEnabled
(
)
;
nsContentUtils
:
:
StorageAccess
access
=
nsContentUtils
:
:
StorageAllowedForWindow
(
this
)
;
bool
storageBlocked
=
access
<
=
nsContentUtils
:
:
StorageAccess
:
:
ePrivateBrowsing
;
mCacheStorage
=
CacheStorage
:
:
CreateOnMainThread
(
cache
:
:
DEFAULT_NAMESPACE
this
GetPrincipal
(
)
storageBlocked
forceTrustedOrigin
aRv
)
;
}
RefPtr
<
CacheStorage
>
ref
=
mCacheStorage
;
return
ref
.
forget
(
)
;
}
already_AddRefed
<
ServiceWorkerRegistration
>
nsPIDOMWindowInner
:
:
GetServiceWorkerRegistration
(
const
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
{
NS_ConvertUTF8toUTF16
scope
(
aDescriptor
.
Scope
(
)
)
;
RefPtr
<
ServiceWorkerRegistration
>
registration
;
if
(
!
mServiceWorkerRegistrationTable
.
Get
(
scope
getter_AddRefs
(
registration
)
)
)
{
registration
=
ServiceWorkerRegistration
:
:
CreateForMainThread
(
this
aDescriptor
)
;
mServiceWorkerRegistrationTable
.
Put
(
scope
registration
)
;
}
return
registration
.
forget
(
)
;
}
void
nsPIDOMWindowInner
:
:
InvalidateServiceWorkerRegistration
(
const
nsAString
&
aScope
)
{
mServiceWorkerRegistrationTable
.
Remove
(
aScope
)
;
}
void
nsGlobalWindowInner
:
:
FireOfflineStatusEventIfChanged
(
)
{
if
(
!
IsCurrentInnerWindow
(
)
)
return
;
if
(
mWasOffline
=
=
NS_IsOffline
(
)
)
{
return
;
}
mWasOffline
=
!
mWasOffline
;
nsAutoString
name
;
if
(
mWasOffline
)
{
name
.
AssignLiteral
(
"
offline
"
)
;
}
else
{
name
.
AssignLiteral
(
"
online
"
)
;
}
nsCOMPtr
<
EventTarget
>
eventTarget
=
mDoc
.
get
(
)
;
nsHTMLDocument
*
htmlDoc
=
mDoc
-
>
AsHTMLDocument
(
)
;
if
(
htmlDoc
)
{
Element
*
body
=
htmlDoc
-
>
GetBody
(
)
;
if
(
body
)
{
eventTarget
=
body
;
}
}
else
{
Element
*
documentElement
=
mDoc
-
>
GetDocumentElement
(
)
;
if
(
documentElement
)
{
eventTarget
=
documentElement
;
}
}
nsContentUtils
:
:
DispatchTrustedEvent
(
mDoc
eventTarget
name
true
false
)
;
}
class
NotifyIdleObserverRunnable
:
public
Runnable
{
public
:
NotifyIdleObserverRunnable
(
nsIIdleObserver
*
aIdleObserver
uint32_t
aTimeInS
bool
aCallOnidle
nsGlobalWindowInner
*
aIdleWindow
)
:
mozilla
:
:
Runnable
(
"
NotifyIdleObserverRunnable
"
)
mIdleObserver
(
aIdleObserver
)
mTimeInS
(
aTimeInS
)
mIdleWindow
(
aIdleWindow
)
mCallOnidle
(
aCallOnidle
)
{
}
NS_IMETHOD
Run
(
)
override
{
if
(
mIdleWindow
-
>
ContainsIdleObserver
(
mIdleObserver
mTimeInS
)
)
{
return
mCallOnidle
?
mIdleObserver
-
>
Onidle
(
)
:
mIdleObserver
-
>
Onactive
(
)
;
}
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIIdleObserver
>
mIdleObserver
;
uint32_t
mTimeInS
;
RefPtr
<
nsGlobalWindowInner
>
mIdleWindow
;
bool
mCallOnidle
;
}
;
void
nsGlobalWindowInner
:
:
NotifyIdleObserver
(
IdleObserverHolder
*
aIdleObserverHolder
bool
aCallOnidle
)
{
MOZ_ASSERT
(
aIdleObserverHolder
)
;
aIdleObserverHolder
-
>
mPrevNotificationIdle
=
aCallOnidle
;
nsCOMPtr
<
nsIRunnable
>
caller
=
new
NotifyIdleObserverRunnable
(
aIdleObserverHolder
-
>
mIdleObserver
aIdleObserverHolder
-
>
mTimeInS
aCallOnidle
this
)
;
if
(
NS_FAILED
(
Dispatch
(
TaskCategory
:
:
Other
caller
.
forget
(
)
)
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
thread
for
idle
observer
notification
.
"
)
;
}
}
bool
nsGlobalWindowInner
:
:
ContainsIdleObserver
(
nsIIdleObserver
*
aIdleObserver
uint32_t
aTimeInS
)
{
MOZ_ASSERT
(
aIdleObserver
"
Idle
observer
not
instantiated
.
"
)
;
bool
found
=
false
;
nsTObserverArray
<
IdleObserverHolder
>
:
:
ForwardIterator
iter
(
mIdleObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
IdleObserverHolder
&
idleObserver
=
iter
.
GetNext
(
)
;
if
(
idleObserver
.
mIdleObserver
=
=
aIdleObserver
&
&
idleObserver
.
mTimeInS
=
=
aTimeInS
)
{
found
=
true
;
break
;
}
}
return
found
;
}
void
IdleActiveTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
nsGlobalWindowInner
>
idleWindow
=
static_cast
<
nsGlobalWindowInner
*
>
(
aClosure
)
;
MOZ_ASSERT
(
idleWindow
"
Idle
window
has
not
been
instantiated
.
"
)
;
idleWindow
-
>
HandleIdleActiveEvent
(
)
;
}
void
IdleObserverTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
nsGlobalWindowInner
>
idleWindow
=
static_cast
<
nsGlobalWindowInner
*
>
(
aClosure
)
;
MOZ_ASSERT
(
idleWindow
"
Idle
window
has
not
been
instantiated
.
"
)
;
idleWindow
-
>
HandleIdleObserverCallback
(
)
;
}
void
nsGlobalWindowInner
:
:
HandleIdleObserverCallback
(
)
{
MOZ_ASSERT
(
static_cast
<
uint32_t
>
(
mIdleCallbackIndex
)
<
mIdleObservers
.
Length
(
)
"
Idle
callback
index
exceeds
array
bounds
!
"
)
;
IdleObserverHolder
&
idleObserver
=
mIdleObservers
.
ElementAt
(
mIdleCallbackIndex
)
;
NotifyIdleObserver
(
&
idleObserver
true
)
;
mIdleCallbackIndex
+
+
;
if
(
NS_FAILED
(
ScheduleNextIdleObserverCallback
(
)
)
)
{
NS_WARNING
(
"
Failed
to
set
next
idle
observer
callback
.
"
)
;
}
}
nsresult
nsGlobalWindowInner
:
:
ScheduleNextIdleObserverCallback
(
)
{
MOZ_ASSERT
(
mIdleService
"
No
idle
service
!
"
)
;
if
(
mIdleCallbackIndex
<
0
|
|
static_cast
<
uint32_t
>
(
mIdleCallbackIndex
)
>
=
mIdleObservers
.
Length
(
)
)
{
return
NS_OK
;
}
IdleObserverHolder
&
idleObserver
=
mIdleObservers
.
ElementAt
(
mIdleCallbackIndex
)
;
uint32_t
userIdleTimeMS
=
0
;
nsresult
rv
=
mIdleService
-
>
GetIdleTime
(
&
userIdleTimeMS
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint32_t
callbackTimeMS
=
0
;
if
(
idleObserver
.
mTimeInS
*
1000
+
mIdleFuzzFactor
>
userIdleTimeMS
)
{
callbackTimeMS
=
idleObserver
.
mTimeInS
*
1000
-
userIdleTimeMS
+
mIdleFuzzFactor
;
}
mIdleTimer
-
>
Cancel
(
)
;
rv
=
mIdleTimer
-
>
InitWithNamedFuncCallback
(
IdleObserverTimerCallback
this
callbackTimeMS
nsITimer
:
:
TYPE_ONE_SHOT
"
nsGlobalWindowInner
:
:
ScheduleNextIdleObserverCallback
"
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
uint32_t
nsGlobalWindowInner
:
:
GetFuzzTimeMS
(
)
{
if
(
gIdleObserversAPIFuzzTimeDisabled
)
{
return
0
;
}
uint32_t
randNum
=
MAX_IDLE_FUZZ_TIME_MS
;
size_t
nbytes
=
PR_GetRandomNoise
(
&
randNum
sizeof
(
randNum
)
)
;
if
(
nbytes
!
=
sizeof
(
randNum
)
)
{
NS_WARNING
(
"
PR_GetRandomNoise
(
.
.
.
)
Not
implemented
or
no
available
noise
!
"
)
;
return
MAX_IDLE_FUZZ_TIME_MS
;
}
if
(
randNum
>
MAX_IDLE_FUZZ_TIME_MS
)
{
randNum
%
=
MAX_IDLE_FUZZ_TIME_MS
;
}
return
randNum
;
}
nsresult
nsGlobalWindowInner
:
:
ScheduleActiveTimerCallback
(
)
{
if
(
!
mAddActiveEventFuzzTime
)
{
return
HandleIdleActiveEvent
(
)
;
}
MOZ_ASSERT
(
mIdleTimer
)
;
mIdleTimer
-
>
Cancel
(
)
;
uint32_t
fuzzFactorInMS
=
GetFuzzTimeMS
(
)
;
nsresult
rv
=
mIdleTimer
-
>
InitWithNamedFuncCallback
(
IdleActiveTimerCallback
this
fuzzFactorInMS
nsITimer
:
:
TYPE_ONE_SHOT
"
nsGlobalWindowInner
:
:
ScheduleActiveTimerCallback
"
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
HandleIdleActiveEvent
(
)
{
if
(
mCurrentlyIdle
)
{
mIdleCallbackIndex
=
0
;
mIdleFuzzFactor
=
GetFuzzTimeMS
(
)
;
nsresult
rv
=
ScheduleNextIdleObserverCallback
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
mIdleCallbackIndex
=
-
1
;
MOZ_ASSERT
(
mIdleTimer
)
;
mIdleTimer
-
>
Cancel
(
)
;
nsTObserverArray
<
IdleObserverHolder
>
:
:
ForwardIterator
iter
(
mIdleObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
IdleObserverHolder
&
idleObserver
=
iter
.
GetNext
(
)
;
if
(
idleObserver
.
mPrevNotificationIdle
)
{
NotifyIdleObserver
(
&
idleObserver
false
)
;
}
}
return
NS_OK
;
}
nsGlobalWindowInner
:
:
SlowScriptResponse
nsGlobalWindowInner
:
:
ShowSlowScriptDialog
(
const
nsString
&
aAddonId
)
{
nsresult
rv
;
AutoJSContext
cx
;
if
(
Preferences
:
:
GetBool
(
"
dom
.
always_stop_slow_scripts
"
)
)
{
return
KillSlowScript
;
}
if
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
{
JS_ReportWarningASCII
(
cx
"
A
long
running
script
was
terminated
"
)
;
return
KillSlowScript
;
}
if
(
!
HasActiveDocument
(
)
)
{
return
KillSlowScript
;
}
JS
:
:
AutoFilename
filename
;
unsigned
lineno
;
unsigned
*
linenop
=
XRE_IsParentProcess
(
)
?
&
lineno
:
nullptr
;
bool
hasFrame
=
JS
:
:
DescribeScriptedCaller
(
cx
&
filename
linenop
)
;
if
(
!
mHasHadSlowScript
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
SLOW_SCRIPT_PAGE_COUNT
1
)
;
}
mHasHadSlowScript
=
true
;
if
(
XRE_IsContentProcess
(
)
&
&
ProcessHangMonitor
:
:
Get
(
)
)
{
ProcessHangMonitor
:
:
SlowScriptAction
action
;
RefPtr
<
ProcessHangMonitor
>
monitor
=
ProcessHangMonitor
:
:
Get
(
)
;
nsIDocShell
*
docShell
=
GetDocShell
(
)
;
nsCOMPtr
<
nsITabChild
>
child
=
docShell
?
docShell
-
>
GetTabChild
(
)
:
nullptr
;
action
=
monitor
-
>
NotifySlowScript
(
child
filename
.
get
(
)
aAddonId
)
;
if
(
action
=
=
ProcessHangMonitor
:
:
Terminate
)
{
return
KillSlowScript
;
}
if
(
action
=
=
ProcessHangMonitor
:
:
TerminateGlobal
)
{
return
KillScriptGlobal
;
}
if
(
action
=
=
ProcessHangMonitor
:
:
StartDebugger
)
{
RefPtr
<
nsGlobalWindowOuter
>
outer
=
GetOuterWindowInternal
(
)
;
outer
-
>
EnterModalState
(
)
;
SpinEventLoopUntil
(
[
&
]
(
)
{
return
monitor
-
>
IsDebuggerStartupComplete
(
)
;
}
)
;
outer
-
>
LeaveModalState
(
)
;
return
ContinueSlowScript
;
}
return
ContinueSlowScriptAndKeepNotifying
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
SLOW_SCRIPT_NOTICE_COUNT
1
)
;
nsCOMPtr
<
nsIDocShell
>
ds
=
GetDocShell
(
)
;
NS_ENSURE_TRUE
(
ds
KillSlowScript
)
;
nsCOMPtr
<
nsIPrompt
>
prompt
=
do_GetInterface
(
ds
)
;
NS_ENSURE_TRUE
(
prompt
KillSlowScript
)
;
nsCOMPtr
<
nsISlowScriptDebugCallback
>
debugCallback
;
if
(
hasFrame
)
{
const
char
*
debugCID
=
"
mozilla
.
org
/
dom
/
slow
-
script
-
debug
;
1
"
;
nsCOMPtr
<
nsISlowScriptDebug
>
debugService
=
do_GetService
(
debugCID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
debugService
-
>
GetActivationHandler
(
getter_AddRefs
(
debugCallback
)
)
;
}
}
bool
failed
=
false
;
auto
getString
=
[
&
]
(
const
char
*
name
nsContentUtils
:
:
PropertiesFile
propFile
=
nsContentUtils
:
:
eDOM_PROPERTIES
)
{
nsAutoString
result
;
nsresult
rv
=
nsContentUtils
:
:
GetLocalizedString
(
propFile
name
result
)
;
failed
=
failed
|
|
NS_FAILED
(
rv
)
|
|
result
.
IsEmpty
(
)
;
return
Move
(
result
)
;
}
;
bool
isAddonScript
=
!
aAddonId
.
IsEmpty
(
)
;
bool
showDebugButton
=
debugCallback
&
&
!
isAddonScript
;
nsAutoString
title
checkboxMsg
debugButton
msg
;
if
(
isAddonScript
)
{
title
=
getString
(
"
KillAddonScriptTitle
"
)
;
checkboxMsg
=
getString
(
"
KillAddonScriptGlobalMessage
"
)
;
auto
appName
=
getString
(
"
brandShortName
"
nsContentUtils
:
:
eBRAND_PROPERTIES
)
;
nsCOMPtr
<
nsIAddonPolicyService
>
aps
=
do_GetService
(
"
mozilla
.
org
/
addons
/
policy
-
service
;
1
"
)
;
nsString
addonName
;
if
(
!
aps
|
|
NS_FAILED
(
aps
-
>
GetExtensionName
(
aAddonId
addonName
)
)
)
{
addonName
=
aAddonId
;
}
const
char16_t
*
params
[
]
=
{
addonName
.
get
(
)
appName
.
get
(
)
}
;
rv
=
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
KillAddonScriptMessage
"
params
msg
)
;
failed
=
failed
|
|
NS_FAILED
(
rv
)
;
}
else
{
title
=
getString
(
"
KillScriptTitle
"
)
;
checkboxMsg
=
getString
(
"
DontAskAgain
"
)
;
if
(
showDebugButton
)
{
debugButton
=
getString
(
"
DebugScriptButton
"
)
;
msg
=
getString
(
"
KillScriptWithDebugMessage
"
)
;
}
else
{
msg
=
getString
(
"
KillScriptMessage
"
)
;
}
}
auto
stopButton
=
getString
(
"
StopScriptButton
"
)
;
auto
waitButton
=
getString
(
"
WaitForScriptButton
"
)
;
if
(
failed
)
{
NS_ERROR
(
"
Failed
to
get
localized
strings
.
"
)
;
return
ContinueSlowScript
;
}
if
(
filename
.
get
(
)
)
{
nsAutoString
scriptLocation
;
NS_ConvertUTF8toUTF16
filenameUTF16
(
filename
.
get
(
)
)
;
if
(
filenameUTF16
.
Length
(
)
>
60
)
{
size_t
cutStart
=
30
;
size_t
cutLength
=
filenameUTF16
.
Length
(
)
-
60
;
MOZ_ASSERT
(
cutLength
>
0
)
;
if
(
NS_IS_LOW_SURROGATE
(
filenameUTF16
[
cutStart
]
)
)
{
+
+
cutStart
;
-
-
cutLength
;
}
if
(
NS_IS_LOW_SURROGATE
(
filenameUTF16
[
cutStart
+
cutLength
]
)
)
{
+
+
cutLength
;
}
filenameUTF16
.
ReplaceLiteral
(
cutStart
cutLength
u
"
\
x2026
"
)
;
}
const
char16_t
*
formatParams
[
]
=
{
filenameUTF16
.
get
(
)
}
;
rv
=
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
KillScriptLocation
"
formatParams
scriptLocation
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
msg
.
AppendLiteral
(
"
\
n
\
n
"
)
;
msg
.
Append
(
scriptLocation
)
;
msg
.
Append
(
'
:
'
)
;
msg
.
AppendInt
(
lineno
)
;
}
}
uint32_t
buttonFlags
=
nsIPrompt
:
:
BUTTON_POS_1_DEFAULT
+
(
nsIPrompt
:
:
BUTTON_TITLE_IS_STRING
*
(
nsIPrompt
:
:
BUTTON_POS_0
+
nsIPrompt
:
:
BUTTON_POS_1
)
)
;
if
(
showDebugButton
)
buttonFlags
+
=
nsIPrompt
:
:
BUTTON_TITLE_IS_STRING
*
nsIPrompt
:
:
BUTTON_POS_2
;
bool
checkboxValue
=
false
;
int32_t
buttonPressed
=
0
;
{
AutoDisableJSInterruptCallback
disabler
(
cx
)
;
rv
=
prompt
-
>
ConfirmEx
(
title
.
get
(
)
msg
.
get
(
)
buttonFlags
waitButton
.
get
(
)
stopButton
.
get
(
)
debugButton
.
get
(
)
checkboxMsg
.
get
(
)
&
checkboxValue
&
buttonPressed
)
;
}
if
(
buttonPressed
=
=
0
)
{
if
(
checkboxValue
&
&
!
isAddonScript
&
&
NS_SUCCEEDED
(
rv
)
)
return
AlwaysContinueSlowScript
;
return
ContinueSlowScript
;
}
if
(
buttonPressed
=
=
2
)
{
MOZ_RELEASE_ASSERT
(
debugCallback
)
;
rv
=
debugCallback
-
>
HandleSlowScriptDebug
(
this
)
;
return
NS_SUCCEEDED
(
rv
)
?
ContinueSlowScript
:
KillSlowScript
;
}
JS_ClearPendingException
(
cx
)
;
if
(
checkboxValue
&
&
isAddonScript
)
return
KillScriptGlobal
;
return
KillSlowScript
;
}
uint32_t
nsGlobalWindowInner
:
:
FindInsertionIndex
(
IdleObserverHolder
*
aIdleObserver
)
{
MOZ_ASSERT
(
aIdleObserver
"
Idle
observer
not
instantiated
.
"
)
;
uint32_t
i
=
0
;
nsTObserverArray
<
IdleObserverHolder
>
:
:
ForwardIterator
iter
(
mIdleObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
IdleObserverHolder
&
idleObserver
=
iter
.
GetNext
(
)
;
if
(
idleObserver
.
mTimeInS
>
aIdleObserver
-
>
mTimeInS
)
{
break
;
}
i
+
+
;
MOZ_ASSERT
(
i
<
=
mIdleObservers
.
Length
(
)
"
Array
index
out
of
bounds
error
.
"
)
;
}
return
i
;
}
nsresult
nsGlobalWindowInner
:
:
RegisterIdleObserver
(
nsIIdleObserver
*
aIdleObserver
)
{
nsresult
rv
;
if
(
mIdleObservers
.
IsEmpty
(
)
)
{
mIdleService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
idleservice
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
mIdleService
-
>
AddIdleObserver
(
mObserver
MIN_IDLE_NOTIFICATION_TIME_S
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
mIdleTimer
)
{
mIdleTimer
=
NS_NewTimer
(
)
;
NS_ENSURE_TRUE
(
mIdleTimer
NS_ERROR_OUT_OF_MEMORY
)
;
}
else
{
mIdleTimer
-
>
Cancel
(
)
;
}
}
MOZ_ASSERT
(
mIdleService
)
;
MOZ_ASSERT
(
mIdleTimer
)
;
IdleObserverHolder
tmpIdleObserver
;
tmpIdleObserver
.
mIdleObserver
=
aIdleObserver
;
rv
=
aIdleObserver
-
>
GetTime
(
&
tmpIdleObserver
.
mTimeInS
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_ARG_MAX
(
tmpIdleObserver
.
mTimeInS
UINT32_MAX
/
1000
)
;
NS_ENSURE_ARG_MIN
(
tmpIdleObserver
.
mTimeInS
MIN_IDLE_NOTIFICATION_TIME_S
)
;
uint32_t
insertAtIndex
=
FindInsertionIndex
(
&
tmpIdleObserver
)
;
if
(
insertAtIndex
=
=
mIdleObservers
.
Length
(
)
)
{
mIdleObservers
.
AppendElement
(
tmpIdleObserver
)
;
}
else
{
mIdleObservers
.
InsertElementAt
(
insertAtIndex
tmpIdleObserver
)
;
}
bool
userIsIdle
=
false
;
rv
=
nsContentUtils
:
:
IsUserIdle
(
MIN_IDLE_NOTIFICATION_TIME_S
&
userIsIdle
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
userIsIdle
&
&
mIdleCallbackIndex
=
=
-
1
)
{
return
NS_OK
;
}
if
(
!
mCurrentlyIdle
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
mIdleCallbackIndex
>
=
0
)
;
if
(
static_cast
<
int32_t
>
(
insertAtIndex
)
<
mIdleCallbackIndex
)
{
IdleObserverHolder
&
idleObserver
=
mIdleObservers
.
ElementAt
(
insertAtIndex
)
;
NotifyIdleObserver
(
&
idleObserver
true
)
;
mIdleCallbackIndex
+
+
;
return
NS_OK
;
}
if
(
static_cast
<
int32_t
>
(
insertAtIndex
)
=
=
mIdleCallbackIndex
)
{
mIdleTimer
-
>
Cancel
(
)
;
rv
=
ScheduleNextIdleObserverCallback
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
FindIndexOfElementToRemove
(
nsIIdleObserver
*
aIdleObserver
int32_t
*
aRemoveElementIndex
)
{
MOZ_ASSERT
(
aIdleObserver
"
Idle
observer
not
instantiated
.
"
)
;
*
aRemoveElementIndex
=
0
;
if
(
mIdleObservers
.
IsEmpty
(
)
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
aIdleObserverTimeInS
;
nsresult
rv
=
aIdleObserver
-
>
GetTime
(
&
aIdleObserverTimeInS
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_ARG_MIN
(
aIdleObserverTimeInS
MIN_IDLE_NOTIFICATION_TIME_S
)
;
nsTObserverArray
<
IdleObserverHolder
>
:
:
ForwardIterator
iter
(
mIdleObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
IdleObserverHolder
&
idleObserver
=
iter
.
GetNext
(
)
;
if
(
idleObserver
.
mTimeInS
=
=
aIdleObserverTimeInS
&
&
idleObserver
.
mIdleObserver
=
=
aIdleObserver
)
{
break
;
}
(
*
aRemoveElementIndex
)
+
+
;
}
return
static_cast
<
uint32_t
>
(
*
aRemoveElementIndex
)
>
=
mIdleObservers
.
Length
(
)
?
NS_ERROR_FAILURE
:
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
UnregisterIdleObserver
(
nsIIdleObserver
*
aIdleObserver
)
{
int32_t
removeElementIndex
;
nsresult
rv
=
FindIndexOfElementToRemove
(
aIdleObserver
&
removeElementIndex
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Idle
observer
not
found
in
list
of
idle
observers
.
No
idle
observer
removed
.
"
)
;
return
NS_OK
;
}
mIdleObservers
.
RemoveElementAt
(
removeElementIndex
)
;
MOZ_ASSERT
(
mIdleTimer
)
;
if
(
mIdleObservers
.
IsEmpty
(
)
&
&
mIdleService
)
{
rv
=
mIdleService
-
>
RemoveIdleObserver
(
mObserver
MIN_IDLE_NOTIFICATION_TIME_S
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mIdleService
=
nullptr
;
mIdleTimer
-
>
Cancel
(
)
;
mIdleCallbackIndex
=
-
1
;
return
NS_OK
;
}
if
(
!
mCurrentlyIdle
)
{
return
NS_OK
;
}
if
(
removeElementIndex
<
mIdleCallbackIndex
)
{
mIdleCallbackIndex
-
-
;
return
NS_OK
;
}
if
(
removeElementIndex
!
=
mIdleCallbackIndex
)
{
return
NS_OK
;
}
mIdleTimer
-
>
Cancel
(
)
;
if
(
static_cast
<
uint32_t
>
(
mIdleCallbackIndex
)
=
=
mIdleObservers
.
Length
(
)
)
{
mIdleCallbackIndex
-
-
;
}
rv
=
ScheduleNextIdleObserverCallback
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
nsresult
nsGlobalWindowInner
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_IOSERVICE_OFFLINE_STATUS_TOPIC
)
)
{
if
(
!
IsFrozen
(
)
)
{
FireOfflineStatusEventIfChanged
(
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
MEMORY_PRESSURE_OBSERVER_TOPIC
)
)
{
if
(
mPerformance
)
{
mPerformance
-
>
MemoryPressure
(
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
OBSERVER_TOPIC_IDLE
)
)
{
mCurrentlyIdle
=
true
;
if
(
IsFrozen
(
)
)
{
mNotifyIdleObserversIdleOnThaw
=
true
;
mNotifyIdleObserversActiveOnThaw
=
false
;
}
else
if
(
IsCurrentInnerWindow
(
)
)
{
HandleIdleActiveEvent
(
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
OBSERVER_TOPIC_ACTIVE
)
)
{
mCurrentlyIdle
=
false
;
if
(
IsFrozen
(
)
)
{
mNotifyIdleObserversActiveOnThaw
=
true
;
mNotifyIdleObserversIdleOnThaw
=
false
;
}
else
if
(
IsCurrentInnerWindow
(
)
)
{
ScheduleActiveTimerCallback
(
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
offline
-
cache
-
update
-
added
"
)
)
{
if
(
mApplicationCache
)
return
NS_OK
;
nsCOMPtr
<
nsIDOMOfflineResourceList
>
applicationCache
=
GetApplicationCache
(
)
;
nsCOMPtr
<
nsIObserver
>
observer
=
do_QueryInterface
(
applicationCache
)
;
if
(
observer
)
observer
-
>
Observe
(
aSubject
aTopic
aData
)
;
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
)
{
MOZ_ASSERT
(
!
NS_strcmp
(
aData
u
"
intl
.
accept_languages
"
)
)
;
if
(
mNavigator
)
{
NavigatorBinding
:
:
ClearCachedLanguageValue
(
mNavigator
)
;
NavigatorBinding
:
:
ClearCachedLanguagesValue
(
mNavigator
)
;
}
if
(
!
IsCurrentInnerWindow
(
)
)
{
return
NS_OK
;
}
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
this
nullptr
nullptr
)
;
event
-
>
InitEvent
(
NS_LITERAL_STRING
(
"
languagechange
"
)
false
false
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
return
DispatchEvent
(
event
&
dummy
)
;
}
NS_WARNING
(
"
unrecognized
topic
in
nsGlobalWindowInner
:
:
Observe
"
)
;
return
NS_ERROR_FAILURE
;
}
void
nsGlobalWindowInner
:
:
ObserveStorageNotification
(
StorageEvent
*
aEvent
const
char16_t
*
aStorageType
bool
aPrivateBrowsing
)
{
MOZ_ASSERT
(
aEvent
)
;
if
(
aPrivateBrowsing
!
=
IsPrivateBrowsing
(
)
)
{
return
;
}
if
(
!
IsCurrentInnerWindow
(
)
|
|
IsFrozen
(
)
)
{
return
;
}
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
if
(
!
principal
)
{
return
;
}
bool
fireMozStorageChanged
=
false
;
nsAutoString
eventType
;
eventType
.
AssignLiteral
(
"
storage
"
)
;
if
(
!
NS_strcmp
(
aStorageType
u
"
sessionStorage
"
)
)
{
nsCOMPtr
<
nsIDOMStorage
>
changingStorage
=
aEvent
-
>
GetStorageArea
(
)
;
MOZ_ASSERT
(
changingStorage
)
;
bool
check
=
false
;
nsCOMPtr
<
nsIDOMStorageManager
>
storageManager
=
do_QueryInterface
(
GetDocShell
(
)
)
;
if
(
storageManager
)
{
nsresult
rv
=
storageManager
-
>
CheckStorage
(
principal
changingStorage
&
check
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
if
(
!
check
)
{
return
;
}
MOZ_LOG
(
gDOMLeakPRLogInner
LogLevel
:
:
Debug
(
"
nsGlobalWindowInner
%
p
with
sessionStorage
%
p
passing
event
from
%
p
"
this
mSessionStorage
.
get
(
)
changingStorage
.
get
(
)
)
)
;
fireMozStorageChanged
=
mSessionStorage
=
=
changingStorage
;
if
(
fireMozStorageChanged
)
{
eventType
.
AssignLiteral
(
"
MozSessionStorageChanged
"
)
;
}
}
else
{
MOZ_ASSERT
(
!
NS_strcmp
(
aStorageType
u
"
localStorage
"
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
StorageUtils
:
:
PrincipalsEqual
(
aEvent
-
>
GetPrincipal
(
)
principal
)
)
;
fireMozStorageChanged
=
mLocalStorage
=
=
aEvent
-
>
GetStorageArea
(
)
;
if
(
fireMozStorageChanged
)
{
eventType
.
AssignLiteral
(
"
MozLocalStorageChanged
"
)
;
}
}
IgnoredErrorResult
error
;
RefPtr
<
StorageEvent
>
clonedEvent
=
CloneStorageEvent
(
eventType
aEvent
error
)
;
if
(
error
.
Failed
(
)
)
{
return
;
}
clonedEvent
-
>
SetTrusted
(
true
)
;
if
(
fireMozStorageChanged
)
{
WidgetEvent
*
internalEvent
=
clonedEvent
-
>
WidgetEventPtr
(
)
;
internalEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
}
bool
defaultActionEnabled
;
DispatchEvent
(
clonedEvent
&
defaultActionEnabled
)
;
}
already_AddRefed
<
StorageEvent
>
nsGlobalWindowInner
:
:
CloneStorageEvent
(
const
nsAString
&
aType
const
RefPtr
<
StorageEvent
>
&
aEvent
ErrorResult
&
aRv
)
{
StorageEventInit
dict
;
dict
.
mBubbles
=
aEvent
-
>
Bubbles
(
)
;
dict
.
mCancelable
=
aEvent
-
>
Cancelable
(
)
;
aEvent
-
>
GetKey
(
dict
.
mKey
)
;
aEvent
-
>
GetOldValue
(
dict
.
mOldValue
)
;
aEvent
-
>
GetNewValue
(
dict
.
mNewValue
)
;
aEvent
-
>
GetUrl
(
dict
.
mUrl
)
;
RefPtr
<
Storage
>
storageArea
=
aEvent
-
>
GetStorageArea
(
)
;
RefPtr
<
Storage
>
storage
;
if
(
!
storageArea
)
{
storage
=
GetLocalStorage
(
aRv
)
;
if
(
aRv
.
Failed
(
)
|
|
!
storage
)
{
return
nullptr
;
}
MOZ_ASSERT
(
storage
-
>
Type
(
)
=
=
Storage
:
:
eLocalStorage
)
;
RefPtr
<
LocalStorage
>
localStorage
=
static_cast
<
LocalStorage
*
>
(
storage
.
get
(
)
)
;
localStorage
-
>
ApplyEvent
(
aEvent
)
;
}
else
if
(
storageArea
-
>
Type
(
)
=
=
Storage
:
:
eSessionStorage
)
{
storage
=
GetSessionStorage
(
aRv
)
;
}
else
{
MOZ_ASSERT
(
storageArea
-
>
Type
(
)
=
=
Storage
:
:
eLocalStorage
)
;
storage
=
GetLocalStorage
(
aRv
)
;
}
if
(
aRv
.
Failed
(
)
|
|
!
storage
)
{
return
nullptr
;
}
MOZ_ASSERT
(
storage
)
;
MOZ_ASSERT_IF
(
storageArea
storage
-
>
IsForkOf
(
storageArea
)
)
;
dict
.
mStorageArea
=
storage
;
RefPtr
<
StorageEvent
>
event
=
StorageEvent
:
:
Constructor
(
this
aType
dict
)
;
return
event
.
forget
(
)
;
}
void
nsGlobalWindowInner
:
:
Suspend
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
IsCurrentInnerWindow
(
)
)
{
return
;
}
CallOnChildren
(
&
nsGlobalWindowInner
:
:
Suspend
)
;
mSuspendDepth
+
=
1
;
if
(
mSuspendDepth
!
=
1
)
{
return
;
}
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
{
for
(
uint32_t
i
=
0
;
i
<
mEnabledSensors
.
Length
(
)
;
i
+
+
)
ac
-
>
RemoveWindowListener
(
mEnabledSensors
[
i
]
this
)
;
}
DisableGamepadUpdates
(
)
;
DisableVRUpdates
(
)
;
SuspendWorkersForWindow
(
this
)
;
SuspendIdleRequests
(
)
;
mTimeoutManager
-
>
Suspend
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
ErrorResult
dummy
;
RefPtr
<
Promise
>
d
=
mAudioContexts
[
i
]
-
>
Suspend
(
dummy
)
;
}
}
void
nsGlobalWindowInner
:
:
Resume
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
IsCurrentInnerWindow
(
)
)
{
return
;
}
CallOnChildren
(
&
nsGlobalWindowInner
:
:
Resume
)
;
MOZ_ASSERT
(
mSuspendDepth
!
=
0
)
;
mSuspendDepth
-
=
1
;
if
(
mSuspendDepth
!
=
0
)
{
return
;
}
MOZ_ASSERT
(
mFreezeDepth
=
=
0
)
;
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
{
for
(
uint32_t
i
=
0
;
i
<
mEnabledSensors
.
Length
(
)
;
i
+
+
)
ac
-
>
AddWindowListener
(
mEnabledSensors
[
i
]
this
)
;
}
EnableGamepadUpdates
(
)
;
EnableVRUpdates
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mAudioContexts
.
Length
(
)
;
+
+
i
)
{
ErrorResult
dummy
;
RefPtr
<
Promise
>
d
=
mAudioContexts
[
i
]
-
>
Resume
(
dummy
)
;
}
mTimeoutManager
-
>
Resume
(
)
;
ResumeIdleRequests
(
)
;
ResumeWorkersForWindow
(
this
)
;
}
bool
nsGlobalWindowInner
:
:
IsSuspended
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mSuspendDepth
!
=
0
;
}
void
nsGlobalWindowInner
:
:
Freeze
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Suspend
(
)
;
FreezeInternal
(
)
;
}
void
nsGlobalWindowInner
:
:
FreezeInternal
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsCurrentInnerWindow
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsSuspended
(
)
)
;
CallOnChildren
(
&
nsGlobalWindowInner
:
:
FreezeInternal
)
;
mFreezeDepth
+
=
1
;
MOZ_ASSERT
(
mSuspendDepth
>
=
mFreezeDepth
)
;
if
(
mFreezeDepth
!
=
1
)
{
return
;
}
FreezeWorkersForWindow
(
this
)
;
mTimeoutManager
-
>
Freeze
(
)
;
if
(
mClientSource
)
{
mClientSource
-
>
Freeze
(
)
;
}
NotifyDOMWindowFrozen
(
this
)
;
}
void
nsGlobalWindowInner
:
:
Thaw
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ThawInternal
(
)
;
Resume
(
)
;
}
void
nsGlobalWindowInner
:
:
ThawInternal
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsCurrentInnerWindow
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsSuspended
(
)
)
;
CallOnChildren
(
&
nsGlobalWindowInner
:
:
ThawInternal
)
;
MOZ_ASSERT
(
mFreezeDepth
!
=
0
)
;
mFreezeDepth
-
=
1
;
MOZ_ASSERT
(
mSuspendDepth
>
=
mFreezeDepth
)
;
if
(
mFreezeDepth
!
=
0
)
{
return
;
}
if
(
mClientSource
)
{
mClientSource
-
>
Thaw
(
)
;
}
mTimeoutManager
-
>
Thaw
(
)
;
ThawWorkersForWindow
(
this
)
;
NotifyDOMWindowThawed
(
this
)
;
}
bool
nsGlobalWindowInner
:
:
IsFrozen
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
bool
frozen
=
mFreezeDepth
!
=
0
;
MOZ_ASSERT_IF
(
frozen
IsSuspended
(
)
)
;
return
frozen
;
}
void
nsGlobalWindowInner
:
:
SyncStateFromParentWindow
(
)
{
MOZ_ASSERT
(
IsCurrentInnerWindow
(
)
)
;
nsPIDOMWindowOuter
*
outer
=
GetOuterWindow
(
)
;
MOZ_ASSERT
(
outer
)
;
nsCOMPtr
<
Element
>
frame
=
outer
-
>
GetFrameElementInternal
(
)
;
nsPIDOMWindowOuter
*
parentOuter
=
frame
?
frame
-
>
OwnerDoc
(
)
-
>
GetWindow
(
)
:
nullptr
;
nsGlobalWindowInner
*
parentInner
=
parentOuter
?
nsGlobalWindowInner
:
:
Cast
(
parentOuter
-
>
GetCurrentInnerWindow
(
)
)
:
nullptr
;
if
(
(
!
parentInner
|
|
!
parentInner
-
>
IsInModalState
(
)
)
&
&
IsInModalState
(
)
)
{
Suspend
(
)
;
}
uint32_t
parentFreezeDepth
=
parentInner
?
parentInner
-
>
mFreezeDepth
:
0
;
uint32_t
parentSuspendDepth
=
parentInner
?
parentInner
-
>
mSuspendDepth
:
0
;
MOZ_ASSERT
(
parentFreezeDepth
<
=
parentSuspendDepth
)
;
for
(
uint32_t
i
=
0
;
i
<
parentFreezeDepth
;
+
+
i
)
{
Freeze
(
)
;
}
for
(
uint32_t
i
=
0
;
i
<
(
parentSuspendDepth
-
parentFreezeDepth
)
;
+
+
i
)
{
Suspend
(
)
;
}
}
template
<
typename
Method
typename
.
.
.
Args
>
nsGlobalWindowInner
:
:
CallState
nsGlobalWindowInner
:
:
CallOnChildren
(
Method
aMethod
Args
&
.
.
.
aArgs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
IsCurrentInnerWindow
(
)
)
;
CallState
state
=
CallState
:
:
Continue
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
state
;
}
int32_t
childCount
=
0
;
docShell
-
>
GetChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
childShell
;
docShell
-
>
GetChildAt
(
i
getter_AddRefs
(
childShell
)
)
;
NS_ASSERTION
(
childShell
"
null
child
shell
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
pWin
=
childShell
-
>
GetWindow
(
)
;
if
(
!
pWin
)
{
continue
;
}
auto
*
win
=
nsGlobalWindowOuter
:
:
Cast
(
pWin
)
;
nsGlobalWindowInner
*
inner
=
win
-
>
GetCurrentInnerWindowInternal
(
)
;
nsCOMPtr
<
Element
>
frame
=
pWin
-
>
GetFrameElementInternal
(
)
;
if
(
!
mDoc
|
|
!
frame
|
|
mDoc
!
=
frame
-
>
OwnerDoc
(
)
|
|
!
inner
)
{
continue
;
}
typedef
decltype
(
(
inner
-
>
*
aMethod
)
(
aArgs
.
.
.
)
)
returnType
;
state
=
CallChild
<
returnType
>
(
inner
aMethod
aArgs
.
.
.
)
;
if
(
state
=
=
CallState
:
:
Stop
)
{
return
state
;
}
}
return
state
;
}
Maybe
<
ClientInfo
>
nsGlobalWindowInner
:
:
GetClientInfo
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Maybe
<
ClientInfo
>
clientInfo
;
if
(
mClientSource
)
{
clientInfo
.
emplace
(
mClientSource
-
>
Info
(
)
)
;
}
return
Move
(
clientInfo
)
;
}
Maybe
<
ClientState
>
nsGlobalWindowInner
:
:
GetClientState
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Maybe
<
ClientState
>
clientState
;
if
(
mClientSource
)
{
ClientState
state
;
nsresult
rv
=
mClientSource
-
>
SnapshotState
(
&
state
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
clientState
.
emplace
(
state
)
;
}
}
return
Move
(
clientState
)
;
}
Maybe
<
ServiceWorkerDescriptor
>
nsGlobalWindowInner
:
:
GetController
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Maybe
<
ServiceWorkerDescriptor
>
controller
;
if
(
mClientSource
)
{
controller
=
mClientSource
-
>
GetController
(
)
;
}
return
Move
(
controller
)
;
}
RefPtr
<
ServiceWorker
>
nsGlobalWindowInner
:
:
GetOrCreateServiceWorker
(
const
ServiceWorkerDescriptor
&
aDescriptor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
ServiceWorker
>
ref
;
for
(
auto
sw
:
mServiceWorkerList
)
{
if
(
sw
-
>
Descriptor
(
)
.
Matches
(
aDescriptor
)
)
{
ref
=
sw
;
return
ref
.
forget
(
)
;
}
}
ref
=
ServiceWorker
:
:
Create
(
this
aDescriptor
)
;
return
ref
.
forget
(
)
;
}
void
nsGlobalWindowInner
:
:
AddServiceWorker
(
ServiceWorker
*
aServiceWorker
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aServiceWorker
)
;
MOZ_ASSERT
(
!
mServiceWorkerList
.
Contains
(
aServiceWorker
)
)
;
mServiceWorkerList
.
AppendElement
(
aServiceWorker
)
;
}
void
nsGlobalWindowInner
:
:
RemoveServiceWorker
(
ServiceWorker
*
aServiceWorker
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aServiceWorker
)
;
MOZ_ASSERT
(
mServiceWorkerList
.
Contains
(
aServiceWorker
)
)
;
mServiceWorkerList
.
RemoveElement
(
aServiceWorker
)
;
}
nsresult
nsGlobalWindowInner
:
:
FireDelayedDOMEvents
(
)
{
if
(
mApplicationCache
)
{
static_cast
<
nsDOMOfflineResourceList
*
>
(
mApplicationCache
.
get
(
)
)
-
>
FirePendingEvents
(
)
;
}
FireOfflineStatusEventIfChanged
(
)
;
if
(
mNotifyIdleObserversIdleOnThaw
)
{
mNotifyIdleObserversIdleOnThaw
=
false
;
HandleIdleActiveEvent
(
)
;
}
if
(
mNotifyIdleObserversActiveOnThaw
)
{
mNotifyIdleObserversActiveOnThaw
=
false
;
ScheduleActiveTimerCallback
(
)
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
;
if
(
docShell
)
{
int32_t
childCount
=
0
;
docShell
-
>
GetChildCount
(
&
childCount
)
;
for
(
int32_t
i
=
0
;
i
<
childCount
;
+
+
i
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
childShell
;
docShell
-
>
GetChildAt
(
i
getter_AddRefs
(
childShell
)
)
;
NS_ASSERTION
(
childShell
"
null
child
shell
"
)
;
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
pWin
=
childShell
-
>
GetWindow
(
)
)
{
auto
*
win
=
nsGlobalWindowOuter
:
:
Cast
(
pWin
)
;
win
-
>
FireDelayedDOMEvents
(
)
;
}
}
}
return
NS_OK
;
}
nsPIDOMWindowOuter
*
nsGlobalWindowInner
:
:
GetParentInternal
(
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
)
{
return
nullptr
;
}
return
outer
-
>
GetParentInternal
(
)
;
}
nsGlobalWindowInner
*
nsGlobalWindowInner
:
:
InnerForSetTimeoutOrInterval
(
ErrorResult
&
aError
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
nsGlobalWindowInner
*
currentInner
=
outer
?
outer
-
>
GetCurrentInnerWindowInternal
(
)
:
this
;
return
HasActiveDocument
(
)
?
currentInner
:
nullptr
;
}
int32_t
nsGlobalWindowInner
:
:
SetTimeout
(
JSContext
*
aCx
Function
&
aFunction
int32_t
aTimeout
const
Sequence
<
JS
:
:
Value
>
&
aArguments
ErrorResult
&
aError
)
{
return
SetTimeoutOrInterval
(
aCx
aFunction
aTimeout
aArguments
false
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
SetTimeout
(
JSContext
*
aCx
const
nsAString
&
aHandler
int32_t
aTimeout
const
Sequence
<
JS
:
:
Value
>
&
ErrorResult
&
aError
)
{
return
SetTimeoutOrInterval
(
aCx
aHandler
aTimeout
false
aError
)
;
}
static
bool
IsInterval
(
const
Optional
<
int32_t
>
&
aTimeout
int32_t
&
aResultTimeout
)
{
if
(
aTimeout
.
WasPassed
(
)
)
{
aResultTimeout
=
aTimeout
.
Value
(
)
;
return
true
;
}
aResultTimeout
=
0
;
return
false
;
}
int32_t
nsGlobalWindowInner
:
:
SetInterval
(
JSContext
*
aCx
Function
&
aFunction
const
Optional
<
int32_t
>
&
aTimeout
const
Sequence
<
JS
:
:
Value
>
&
aArguments
ErrorResult
&
aError
)
{
int32_t
timeout
;
bool
isInterval
=
IsInterval
(
aTimeout
timeout
)
;
return
SetTimeoutOrInterval
(
aCx
aFunction
timeout
aArguments
isInterval
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
SetInterval
(
JSContext
*
aCx
const
nsAString
&
aHandler
const
Optional
<
int32_t
>
&
aTimeout
const
Sequence
<
JS
:
:
Value
>
&
ErrorResult
&
aError
)
{
int32_t
timeout
;
bool
isInterval
=
IsInterval
(
aTimeout
timeout
)
;
return
SetTimeoutOrInterval
(
aCx
aHandler
timeout
isInterval
aError
)
;
}
int32_t
nsGlobalWindowInner
:
:
SetTimeoutOrInterval
(
JSContext
*
aCx
Function
&
aFunction
int32_t
aTimeout
const
Sequence
<
JS
:
:
Value
>
&
aArguments
bool
aIsInterval
ErrorResult
&
aError
)
{
nsGlobalWindowInner
*
inner
=
InnerForSetTimeoutOrInterval
(
aError
)
;
if
(
!
inner
)
{
return
-
1
;
}
if
(
inner
!
=
this
)
{
return
inner
-
>
SetTimeoutOrInterval
(
aCx
aFunction
aTimeout
aArguments
aIsInterval
aError
)
;
}
nsCOMPtr
<
nsIScriptTimeoutHandler
>
handler
=
NS_CreateJSTimeoutHandler
(
aCx
this
aFunction
aArguments
aError
)
;
if
(
!
handler
)
{
return
0
;
}
int32_t
result
;
aError
=
mTimeoutManager
-
>
SetTimeout
(
handler
aTimeout
aIsInterval
Timeout
:
:
Reason
:
:
eTimeoutOrInterval
&
result
)
;
return
result
;
}
int32_t
nsGlobalWindowInner
:
:
SetTimeoutOrInterval
(
JSContext
*
aCx
const
nsAString
&
aHandler
int32_t
aTimeout
bool
aIsInterval
ErrorResult
&
aError
)
{
nsGlobalWindowInner
*
inner
=
InnerForSetTimeoutOrInterval
(
aError
)
;
if
(
!
inner
)
{
return
-
1
;
}
if
(
inner
!
=
this
)
{
return
inner
-
>
SetTimeoutOrInterval
(
aCx
aHandler
aTimeout
aIsInterval
aError
)
;
}
nsCOMPtr
<
nsIScriptTimeoutHandler
>
handler
=
NS_CreateJSTimeoutHandler
(
aCx
this
aHandler
aError
)
;
if
(
!
handler
)
{
return
0
;
}
int32_t
result
;
aError
=
mTimeoutManager
-
>
SetTimeout
(
handler
aTimeout
aIsInterval
Timeout
:
:
Reason
:
:
eTimeoutOrInterval
&
result
)
;
return
result
;
}
bool
nsGlobalWindowInner
:
:
RunTimeoutHandler
(
Timeout
*
aTimeout
nsIScriptContext
*
aScx
)
{
RefPtr
<
Timeout
>
timeout
=
aTimeout
;
Timeout
*
last_running_timeout
=
mTimeoutManager
-
>
BeginRunningTimeout
(
timeout
)
;
timeout
-
>
mRunning
=
true
;
nsAutoPopupStatePusher
popupStatePusher
(
timeout
-
>
mPopupState
)
;
timeout
-
>
mPopupState
=
openAbused
;
bool
trackNestingLevel
=
!
timeout
-
>
mIsInterval
;
uint32_t
nestingLevel
;
if
(
trackNestingLevel
)
{
nestingLevel
=
TimeoutManager
:
:
GetNestingLevel
(
)
;
TimeoutManager
:
:
SetNestingLevel
(
timeout
-
>
mNestingLevel
)
;
}
const
char
*
reason
;
if
(
timeout
-
>
mIsInterval
)
{
reason
=
"
setInterval
handler
"
;
}
else
{
reason
=
"
setTimeout
handler
"
;
}
bool
abortIntervalHandler
=
false
;
nsCOMPtr
<
nsIScriptTimeoutHandler
>
handler
(
do_QueryInterface
(
timeout
-
>
mScriptHandler
)
)
;
if
(
handler
)
{
RefPtr
<
Function
>
callback
=
handler
-
>
GetCallback
(
)
;
if
(
!
callback
)
{
const
nsAString
&
script
=
handler
-
>
GetHandlerText
(
)
;
const
char
*
filename
=
nullptr
;
uint32_t
lineNo
=
0
dummyColumn
=
0
;
handler
-
>
GetLocation
(
&
filename
&
lineNo
&
dummyColumn
)
;
nsAutoMicroTask
mt
;
AutoEntryScript
aes
(
this
reason
true
)
;
JS
:
:
CompileOptions
options
(
aes
.
cx
(
)
)
;
options
.
setFileAndLine
(
filename
lineNo
)
;
options
.
setNoScriptRval
(
true
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
aes
.
cx
(
)
FastGetGlobalJSObject
(
)
)
;
nsresult
rv
=
NS_OK
;
{
nsJSUtils
:
:
ExecutionContext
exec
(
aes
.
cx
(
)
global
)
;
rv
=
exec
.
CompileAndExec
(
options
script
)
;
}
if
(
rv
=
=
NS_SUCCESS_DOM_SCRIPT_EVALUATION_THREW_UNCATCHABLE
)
{
abortIntervalHandler
=
true
;
}
}
else
{
nsCOMPtr
<
nsISupports
>
me
(
static_cast
<
nsIDOMWindow
*
>
(
this
)
)
;
ErrorResult
rv
;
JS
:
:
Rooted
<
JS
:
:
Value
>
ignoredVal
(
RootingCx
(
)
)
;
callback
-
>
Call
(
me
handler
-
>
GetArgs
(
)
&
ignoredVal
rv
reason
)
;
if
(
rv
.
IsUncatchableException
(
)
)
{
abortIntervalHandler
=
true
;
}
rv
.
SuppressException
(
)
;
}
}
else
{
nsCOMPtr
<
nsITimeoutHandler
>
basicHandler
(
timeout
-
>
mScriptHandler
)
;
nsCOMPtr
<
nsISupports
>
kungFuDeathGrip
(
static_cast
<
nsIDOMWindow
*
>
(
this
)
)
;
mozilla
:
:
Unused
<
<
kungFuDeathGrip
;
basicHandler
-
>
Call
(
)
;
}
if
(
abortIntervalHandler
)
{
timeout
-
>
mIsInterval
=
false
;
}
Promise
:
:
PerformMicroTaskCheckpoint
(
)
;
if
(
trackNestingLevel
)
{
TimeoutManager
:
:
SetNestingLevel
(
nestingLevel
)
;
}
mTimeoutManager
-
>
EndRunningTimeout
(
last_running_timeout
)
;
timeout
-
>
mRunning
=
false
;
return
timeout
-
>
mCleared
;
}
already_AddRefed
<
nsIDocShellTreeOwner
>
nsGlobalWindowInner
:
:
GetTreeOwner
(
)
{
FORWARD_TO_OUTER
(
GetTreeOwner
(
)
nullptr
)
;
}
already_AddRefed
<
nsIWebBrowserChrome
>
nsGlobalWindowInner
:
:
GetWebBrowserChrome
(
)
{
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
=
GetTreeOwner
(
)
;
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
do_GetInterface
(
treeOwner
)
;
return
browserChrome
.
forget
(
)
;
}
nsIScrollableFrame
*
nsGlobalWindowInner
:
:
GetScrollFrame
(
)
{
FORWARD_TO_OUTER
(
GetScrollFrame
(
)
nullptr
)
;
}
bool
nsGlobalWindowInner
:
:
IsPrivateBrowsing
(
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
GetDocShell
(
)
)
;
return
loadContext
&
&
loadContext
-
>
UsePrivateBrowsing
(
)
;
}
void
nsGlobalWindowInner
:
:
FlushPendingNotifications
(
FlushType
aType
)
{
if
(
mDoc
)
{
mDoc
-
>
FlushPendingNotifications
(
aType
)
;
}
}
void
nsGlobalWindowInner
:
:
EnableDeviceSensor
(
uint32_t
aType
)
{
bool
alreadyEnabled
=
false
;
for
(
uint32_t
i
=
0
;
i
<
mEnabledSensors
.
Length
(
)
;
i
+
+
)
{
if
(
mEnabledSensors
[
i
]
=
=
aType
)
{
alreadyEnabled
=
true
;
break
;
}
}
mEnabledSensors
.
AppendElement
(
aType
)
;
if
(
alreadyEnabled
)
{
return
;
}
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
{
ac
-
>
AddWindowListener
(
aType
this
)
;
}
}
void
nsGlobalWindowInner
:
:
DisableDeviceSensor
(
uint32_t
aType
)
{
int32_t
doomedElement
=
-
1
;
int32_t
listenerCount
=
0
;
for
(
uint32_t
i
=
0
;
i
<
mEnabledSensors
.
Length
(
)
;
i
+
+
)
{
if
(
mEnabledSensors
[
i
]
=
=
aType
)
{
doomedElement
=
i
;
listenerCount
+
+
;
}
}
if
(
doomedElement
=
=
-
1
)
{
return
;
}
mEnabledSensors
.
RemoveElementAt
(
doomedElement
)
;
if
(
listenerCount
>
1
)
{
return
;
}
nsCOMPtr
<
nsIDeviceSensors
>
ac
=
do_GetService
(
NS_DEVICE_SENSORS_CONTRACTID
)
;
if
(
ac
)
{
ac
-
>
RemoveWindowListener
(
aType
this
)
;
}
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
nsGlobalWindowInner
:
:
EnableOrientationChangeListener
(
)
{
nsIDocShell
*
docShell
=
nullptr
;
if
(
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
docShell
)
&
&
!
mOrientationChangeObserver
)
{
mOrientationChangeObserver
=
MakeUnique
<
WindowOrientationObserver
>
(
this
)
;
}
}
void
nsGlobalWindowInner
:
:
DisableOrientationChangeListener
(
)
{
mOrientationChangeObserver
=
nullptr
;
}
#
endif
void
nsGlobalWindowInner
:
:
SetHasGamepadEventListener
(
bool
aHasGamepad
)
{
mHasGamepad
=
aHasGamepad
;
if
(
aHasGamepad
)
{
EnableGamepadUpdates
(
)
;
}
}
void
nsGlobalWindowInner
:
:
EventListenerAdded
(
nsAtom
*
aType
)
{
if
(
aType
=
=
nsGkAtoms
:
:
onvrdisplayactivate
|
|
aType
=
=
nsGkAtoms
:
:
onvrdisplayconnect
|
|
aType
=
=
nsGkAtoms
:
:
onvrdisplaydeactivate
|
|
aType
=
=
nsGkAtoms
:
:
onvrdisplaydisconnect
|
|
aType
=
=
nsGkAtoms
:
:
onvrdisplaypresentchange
)
{
NotifyVREventListenerAdded
(
)
;
}
if
(
aType
=
=
nsGkAtoms
:
:
onvrdisplayactivate
)
{
mHasVRDisplayActivateEvents
=
true
;
}
if
(
aType
=
=
nsGkAtoms
:
:
onbeforeunload
&
&
mTabChild
&
&
(
!
mDoc
|
|
!
(
mDoc
-
>
GetSandboxFlags
(
)
&
SANDBOXED_MODALS
)
)
)
{
mBeforeUnloadListenerCount
+
+
;
MOZ_ASSERT
(
mBeforeUnloadListenerCount
>
0
)
;
mTabChild
-
>
BeforeUnloadAdded
(
)
;
}
if
(
aType
=
=
nsGkAtoms
:
:
onstorage
)
{
ErrorResult
rv
;
GetLocalStorage
(
rv
)
;
rv
.
SuppressException
(
)
;
}
}
void
nsGlobalWindowInner
:
:
EventListenerRemoved
(
nsAtom
*
aType
)
{
if
(
aType
=
=
nsGkAtoms
:
:
onbeforeunload
&
&
mTabChild
&
&
(
!
mDoc
|
|
!
(
mDoc
-
>
GetSandboxFlags
(
)
&
SANDBOXED_MODALS
)
)
)
{
mBeforeUnloadListenerCount
-
-
;
MOZ_ASSERT
(
mBeforeUnloadListenerCount
>
=
0
)
;
mTabChild
-
>
BeforeUnloadRemoved
(
)
;
}
}
void
nsGlobalWindowInner
:
:
NotifyVREventListenerAdded
(
)
{
mHasVREvents
=
true
;
EnableVRUpdates
(
)
;
}
bool
nsGlobalWindowInner
:
:
HasUsedVR
(
)
const
{
return
mHasVREvents
;
}
bool
nsGlobalWindowInner
:
:
IsVRContentDetected
(
)
const
{
return
mHasVRDisplayActivateEvents
;
}
bool
nsGlobalWindowInner
:
:
IsVRContentPresenting
(
)
const
{
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
IsAnyPresenting
(
gfx
:
:
kVRGroupAll
)
)
{
return
true
;
}
}
return
false
;
}
void
nsGlobalWindowInner
:
:
AddSizeOfIncludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
{
aWindowSizes
.
mDOMOtherSize
+
=
aWindowSizes
.
mState
.
mMallocSizeOf
(
this
)
;
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
if
(
elm
)
{
aWindowSizes
.
mDOMOtherSize
+
=
elm
-
>
SizeOfIncludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
aWindowSizes
.
mDOMEventListenersCount
+
=
elm
-
>
ListenerCount
(
)
;
}
if
(
mDoc
)
{
if
(
!
mDoc
-
>
GetInnerWindow
(
)
|
|
mDoc
-
>
GetInnerWindow
(
)
=
=
this
)
{
mDoc
-
>
DocAddSizeOfIncludingThis
(
aWindowSizes
)
;
}
}
if
(
mNavigator
)
{
aWindowSizes
.
mDOMOtherSize
+
=
mNavigator
-
>
SizeOfIncludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
aWindowSizes
.
mDOMEventTargetsSize
+
=
mEventTargetObjects
.
ShallowSizeOfExcludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
for
(
auto
iter
=
mEventTargetObjects
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DOMEventTargetHelper
*
et
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
nsCOMPtr
<
nsISizeOfEventTarget
>
iSizeOf
=
do_QueryObject
(
et
)
)
{
aWindowSizes
.
mDOMEventTargetsSize
+
=
iSizeOf
-
>
SizeOfEventTargetIncludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
if
(
EventListenerManager
*
elm
=
et
-
>
GetExistingListenerManager
(
)
)
{
aWindowSizes
.
mDOMEventListenersCount
+
=
elm
-
>
ListenerCount
(
)
;
}
+
+
aWindowSizes
.
mDOMEventTargetsCount
;
}
if
(
mPerformance
)
{
aWindowSizes
.
mDOMPerformanceUserEntries
=
mPerformance
-
>
SizeOfUserEntries
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
aWindowSizes
.
mDOMPerformanceResourceEntries
=
mPerformance
-
>
SizeOfResourceEntries
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
aWindowSizes
.
mDOMOtherSize
+
=
mPendingPromises
.
ShallowSizeOfExcludingThis
(
aWindowSizes
.
mState
.
mMallocSizeOf
)
;
}
void
nsGlobalWindowInner
:
:
AddGamepad
(
uint32_t
aIndex
Gamepad
*
aGamepad
)
{
int
index
=
0
;
while
(
mGamepadIndexSet
.
Contains
(
index
)
)
{
+
+
index
;
}
mGamepadIndexSet
.
Put
(
index
)
;
aGamepad
-
>
SetIndex
(
index
)
;
mGamepads
.
Put
(
aIndex
aGamepad
)
;
}
void
nsGlobalWindowInner
:
:
RemoveGamepad
(
uint32_t
aIndex
)
{
RefPtr
<
Gamepad
>
gamepad
;
if
(
!
mGamepads
.
Get
(
aIndex
getter_AddRefs
(
gamepad
)
)
)
{
return
;
}
mGamepadIndexSet
.
Remove
(
gamepad
-
>
Index
(
)
)
;
mGamepads
.
Remove
(
aIndex
)
;
}
void
nsGlobalWindowInner
:
:
GetGamepads
(
nsTArray
<
RefPtr
<
Gamepad
>
>
&
aGamepads
)
{
aGamepads
.
Clear
(
)
;
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
;
}
aGamepads
.
SetCapacity
(
mGamepads
.
Count
(
)
)
;
for
(
auto
iter
=
mGamepads
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
Gamepad
*
gamepad
=
iter
.
UserData
(
)
;
aGamepads
.
EnsureLengthAtLeast
(
gamepad
-
>
Index
(
)
+
1
)
;
aGamepads
[
gamepad
-
>
Index
(
)
]
=
gamepad
;
}
}
already_AddRefed
<
Gamepad
>
nsGlobalWindowInner
:
:
GetGamepad
(
uint32_t
aIndex
)
{
RefPtr
<
Gamepad
>
gamepad
;
if
(
mGamepads
.
Get
(
aIndex
getter_AddRefs
(
gamepad
)
)
)
{
return
gamepad
.
forget
(
)
;
}
return
nullptr
;
}
void
nsGlobalWindowInner
:
:
SetHasSeenGamepadInput
(
bool
aHasSeen
)
{
mHasSeenGamepadInput
=
aHasSeen
;
}
bool
nsGlobalWindowInner
:
:
HasSeenGamepadInput
(
)
{
return
mHasSeenGamepadInput
;
}
void
nsGlobalWindowInner
:
:
SyncGamepadState
(
)
{
if
(
mHasSeenGamepadInput
)
{
RefPtr
<
GamepadManager
>
gamepadManager
(
GamepadManager
:
:
GetService
(
)
)
;
for
(
auto
iter
=
mGamepads
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
gamepadManager
-
>
SyncGamepadState
(
iter
.
Key
(
)
iter
.
UserData
(
)
)
;
}
}
}
void
nsGlobalWindowInner
:
:
StopGamepadHaptics
(
)
{
if
(
mHasSeenGamepadInput
)
{
RefPtr
<
GamepadManager
>
gamepadManager
(
GamepadManager
:
:
GetService
(
)
)
;
gamepadManager
-
>
StopHaptics
(
)
;
}
}
bool
nsGlobalWindowInner
:
:
UpdateVRDisplays
(
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
VRDisplay
>
>
&
aDevices
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
aDevices
=
mVRDisplays
;
return
true
;
}
void
nsGlobalWindowInner
:
:
NotifyActiveVRDisplaysChanged
(
)
{
if
(
mNavigator
)
{
mNavigator
-
>
NotifyActiveVRDisplaysChanged
(
)
;
}
}
void
nsGlobalWindowInner
:
:
DispatchVRDisplayActivate
(
uint32_t
aDisplayID
mozilla
:
:
dom
:
:
VRDisplayEventReason
aReason
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
DisplayId
(
)
=
=
aDisplayID
)
{
if
(
aReason
!
=
VRDisplayEventReason
:
:
Navigation
&
&
display
-
>
IsAnyPresenting
(
gfx
:
:
kVRGroupContent
)
)
{
continue
;
}
VRDisplayEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mDisplay
=
display
;
init
.
mReason
.
Construct
(
aReason
)
;
RefPtr
<
VRDisplayEvent
>
event
=
VRDisplayEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
vrdisplayactivate
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
display
-
>
StartHandlingVRNavigationEvent
(
)
;
Unused
<
<
DispatchEvent
(
event
&
defaultActionEnabled
)
;
display
-
>
StopHandlingVRNavigationEvent
(
)
;
return
;
}
}
}
void
nsGlobalWindowInner
:
:
DispatchVRDisplayDeactivate
(
uint32_t
aDisplayID
mozilla
:
:
dom
:
:
VRDisplayEventReason
aReason
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
DisplayId
(
)
=
=
aDisplayID
&
&
display
-
>
IsPresenting
(
)
)
{
VRDisplayEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mDisplay
=
display
;
init
.
mReason
.
Construct
(
aReason
)
;
RefPtr
<
VRDisplayEvent
>
event
=
VRDisplayEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
vrdisplaydeactivate
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
Unused
<
<
DispatchEvent
(
event
&
defaultActionEnabled
)
;
return
;
}
}
}
void
nsGlobalWindowInner
:
:
DispatchVRDisplayConnect
(
uint32_t
aDisplayID
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
DisplayId
(
)
=
=
aDisplayID
)
{
VRDisplayEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mDisplay
=
display
;
RefPtr
<
VRDisplayEvent
>
event
=
VRDisplayEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
vrdisplayconnect
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
Unused
<
<
DispatchEvent
(
event
&
defaultActionEnabled
)
;
return
;
}
}
}
void
nsGlobalWindowInner
:
:
DispatchVRDisplayDisconnect
(
uint32_t
aDisplayID
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
DisplayId
(
)
=
=
aDisplayID
)
{
VRDisplayEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mDisplay
=
display
;
RefPtr
<
VRDisplayEvent
>
event
=
VRDisplayEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
vrdisplaydisconnect
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
Unused
<
<
DispatchEvent
(
event
&
defaultActionEnabled
)
;
return
;
}
}
}
void
nsGlobalWindowInner
:
:
DispatchVRDisplayPresentChange
(
uint32_t
aDisplayID
)
{
VRDisplay
:
:
UpdateVRDisplays
(
mVRDisplays
this
)
;
for
(
const
auto
&
display
:
mVRDisplays
)
{
if
(
display
-
>
DisplayId
(
)
=
=
aDisplayID
)
{
VRDisplayEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mDisplay
=
display
;
RefPtr
<
VRDisplayEvent
>
event
=
VRDisplayEvent
:
:
Constructor
(
this
NS_LITERAL_STRING
(
"
vrdisplaypresentchange
"
)
init
)
;
event
-
>
SetTrusted
(
true
)
;
bool
defaultActionEnabled
;
Unused
<
<
DispatchEvent
(
event
&
defaultActionEnabled
)
;
return
;
}
}
}
enum
WindowState
{
STATE_MAXIMIZED
=
1
STATE_MINIMIZED
=
2
STATE_NORMAL
=
3
STATE_FULLSCREEN
=
4
}
;
uint16_t
nsGlobalWindowInner
:
:
WindowState
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
int32_t
mode
=
widget
?
widget
-
>
SizeMode
(
)
:
0
;
switch
(
mode
)
{
case
nsSizeMode_Minimized
:
return
STATE_MINIMIZED
;
case
nsSizeMode_Maximized
:
return
STATE_MAXIMIZED
;
case
nsSizeMode_Fullscreen
:
return
STATE_FULLSCREEN
;
case
nsSizeMode_Normal
:
return
STATE_NORMAL
;
default
:
NS_WARNING
(
"
Illegal
window
state
for
this
chrome
window
"
)
;
break
;
}
return
STATE_NORMAL
;
}
bool
nsGlobalWindowInner
:
:
IsFullyOccluded
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
return
widget
&
&
widget
-
>
IsFullyOccluded
(
)
;
}
void
nsGlobalWindowInner
:
:
Maximize
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
if
(
widget
)
{
widget
-
>
SetSizeMode
(
nsSizeMode_Maximized
)
;
}
}
void
nsGlobalWindowInner
:
:
Minimize
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
if
(
widget
)
{
widget
-
>
SetSizeMode
(
nsSizeMode_Minimized
)
;
}
}
void
nsGlobalWindowInner
:
:
Restore
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
if
(
widget
)
{
widget
-
>
SetSizeMode
(
nsSizeMode_Normal
)
;
}
}
void
nsGlobalWindowInner
:
:
GetAttention
(
ErrorResult
&
aResult
)
{
return
GetAttentionWithCycleCount
(
-
1
aResult
)
;
}
void
nsGlobalWindowInner
:
:
GetAttentionWithCycleCount
(
int32_t
aCycleCount
ErrorResult
&
aError
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetMainWidget
(
)
;
if
(
widget
)
{
aError
=
widget
-
>
GetAttention
(
aCycleCount
)
;
}
}
void
nsGlobalWindowInner
:
:
BeginWindowMove
(
Event
&
aMouseDownEvent
Element
*
aPanel
ErrorResult
&
aError
)
{
nsCOMPtr
<
nsIWidget
>
widget
;
#
ifdef
MOZ_XUL
if
(
aPanel
)
{
nsIFrame
*
frame
=
aPanel
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
|
|
!
frame
-
>
IsMenuPopupFrame
(
)
)
{
return
;
}
widget
=
(
static_cast
<
nsMenuPopupFrame
*
>
(
frame
)
)
-
>
GetWidget
(
)
;
}
else
{
#
endif
widget
=
GetMainWidget
(
)
;
#
ifdef
MOZ_XUL
}
#
endif
if
(
!
widget
)
{
return
;
}
WidgetMouseEvent
*
mouseEvent
=
aMouseDownEvent
.
WidgetEventPtr
(
)
-
>
AsMouseEvent
(
)
;
if
(
!
mouseEvent
|
|
mouseEvent
-
>
mClass
!
=
eMouseEventClass
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aError
=
widget
-
>
BeginMoveDrag
(
mouseEvent
)
;
}
already_AddRefed
<
nsWindowRoot
>
nsGlobalWindowInner
:
:
GetWindowRoot
(
mozilla
:
:
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetWindowRootOuter
(
)
aError
nullptr
)
;
}
void
nsGlobalWindowInner
:
:
SetCursor
(
const
nsAString
&
aCursor
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetCursorOuter
(
aCursor
aError
)
aError
)
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
GetBrowserDOMWindow
(
nsIBrowserDOMWindow
*
*
aBrowserWindow
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
ErrorResult
rv
;
NS_IF_ADDREF
(
*
aBrowserWindow
=
GetBrowserDOMWindow
(
rv
)
)
;
return
rv
.
StealNSResult
(
)
;
}
nsIBrowserDOMWindow
*
nsGlobalWindowInner
:
:
GetBrowserDOMWindow
(
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
GetBrowserDOMWindowOuter
(
)
aError
nullptr
)
;
}
void
nsGlobalWindowInner
:
:
SetBrowserDOMWindow
(
nsIBrowserDOMWindow
*
aBrowserWindow
ErrorResult
&
aError
)
{
FORWARD_TO_OUTER_OR_THROW
(
SetBrowserDOMWindowOuter
(
aBrowserWindow
)
aError
)
;
}
void
nsGlobalWindowInner
:
:
NotifyDefaultButtonLoaded
(
Element
&
aDefaultButton
ErrorResult
&
aError
)
{
#
ifdef
MOZ_XUL
nsCOMPtr
<
nsIDOMXULControlElement
>
xulControl
=
do_QueryInterface
(
&
aDefaultButton
)
;
if
(
!
xulControl
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
bool
disabled
;
aError
=
xulControl
-
>
GetDisabled
(
&
disabled
)
;
if
(
aError
.
Failed
(
)
|
|
disabled
)
{
return
;
}
nsIFrame
*
frame
=
aDefaultButton
.
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
LayoutDeviceIntRect
buttonRect
=
LayoutDeviceIntRect
:
:
FromAppUnitsToNearest
(
frame
-
>
GetScreenRectInAppUnits
(
)
frame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
nsIWidget
*
widget
=
GetNearestWidget
(
)
;
if
(
!
widget
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
LayoutDeviceIntRect
widgetRect
=
widget
-
>
GetScreenBounds
(
)
;
buttonRect
-
=
widgetRect
.
TopLeft
(
)
;
nsresult
rv
=
widget
-
>
OnDefaultButtonLoaded
(
buttonRect
)
;
if
(
NS_FAILED
(
rv
)
&
&
rv
!
=
NS_ERROR_NOT_IMPLEMENTED
)
{
aError
.
Throw
(
rv
)
;
}
#
else
aError
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
#
endif
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
GetMessageManager
(
nsIMessageBroadcaster
*
*
aManager
)
{
ErrorResult
rv
;
NS_IF_ADDREF
(
*
aManager
=
GetMessageManager
(
rv
)
)
;
return
rv
.
StealNSResult
(
)
;
}
nsIMessageBroadcaster
*
nsGlobalWindowInner
:
:
GetMessageManager
(
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsChromeWindow
(
)
)
;
if
(
!
mChromeFields
.
mMessageManager
)
{
nsCOMPtr
<
nsIMessageBroadcaster
>
globalMM
=
do_GetService
(
"
mozilla
.
org
/
globalmessagemanager
;
1
"
)
;
mChromeFields
.
mMessageManager
=
new
nsFrameMessageManager
(
nullptr
static_cast
<
nsFrameMessageManager
*
>
(
globalMM
.
get
(
)
)
MM_CHROME
|
MM_BROADCASTER
)
;
}
return
mChromeFields
.
mMessageManager
;
}
NS_IMETHODIMP
nsGlobalWindowInner
:
:
GetGroupMessageManager
(
const
nsAString
&
aGroup
nsIMessageBroadcaster
*
*
aManager
)
{
MOZ_RELEASE_ASSERT
(
IsChromeWindow
(
)
)
;
ErrorResult
rv
;
NS_IF_ADDREF
(
*
aManager
=
GetGroupMessageManager
(
aGroup
rv
)
)
;
return
rv
.
StealNSResult
(
)
;
}
nsIMessageBroadcaster
*
nsGlobalWindowInner
:
:
GetGroupMessageManager
(
const
nsAString
&
aGroup
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
IsChromeWindow
(
)
)
;
nsCOMPtr
<
nsIMessageBroadcaster
>
messageManager
=
mChromeFields
.
mGroupMessageManagers
.
LookupForAdd
(
aGroup
)
.
OrInsert
(
[
this
&
aError
]
(
)
{
nsFrameMessageManager
*
parent
=
static_cast
<
nsFrameMessageManager
*
>
(
GetMessageManager
(
aError
)
)
;
return
new
nsFrameMessageManager
(
nullptr
parent
MM_CHROME
|
MM_BROADCASTER
)
;
}
)
;
return
messageManager
;
}
void
nsGlobalWindowInner
:
:
InitWasOffline
(
)
{
mWasOffline
=
NS_IsOffline
(
)
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
int16_t
nsGlobalWindowInner
:
:
Orientation
(
CallerType
aCallerType
)
const
{
return
nsContentUtils
:
:
ResistFingerprinting
(
aCallerType
)
?
0
:
WindowOrientationObserver
:
:
OrientationAngle
(
)
;
}
#
endif
already_AddRefed
<
Console
>
nsGlobalWindowInner
:
:
GetConsole
(
ErrorResult
&
aRv
)
{
if
(
!
mConsole
)
{
mConsole
=
Console
:
:
Create
(
this
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
}
RefPtr
<
Console
>
console
=
mConsole
;
return
console
.
forget
(
)
;
}
bool
nsGlobalWindowInner
:
:
IsSecureContext
(
)
const
{
return
JS_GetIsSecureContext
(
js
:
:
GetObjectCompartment
(
GetWrapperPreserveColor
(
)
)
)
;
}
already_AddRefed
<
External
>
nsGlobalWindowInner
:
:
GetExternal
(
ErrorResult
&
aRv
)
{
#
ifdef
HAVE_SIDEBAR
if
(
!
mExternal
)
{
AutoJSContext
cx
;
JS
:
:
Rooted
<
JSObject
*
>
jsImplObj
(
cx
)
;
ConstructJSImplementation
(
"
mozilla
.
org
/
sidebar
;
1
"
this
&
jsImplObj
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
mExternal
=
new
External
(
jsImplObj
this
)
;
}
RefPtr
<
External
>
external
=
static_cast
<
External
*
>
(
mExternal
.
get
(
)
)
;
return
external
.
forget
(
)
;
#
else
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
#
endif
}
void
nsGlobalWindowInner
:
:
GetSidebar
(
OwningExternalOrWindowProxy
&
aResult
ErrorResult
&
aRv
)
{
#
ifdef
HAVE_SIDEBAR
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWindow
=
GetChildWindow
(
NS_LITERAL_STRING
(
"
sidebar
"
)
)
;
if
(
domWindow
)
{
aResult
.
SetAsWindowProxy
(
)
=
domWindow
.
forget
(
)
;
return
;
}
RefPtr
<
External
>
external
=
GetExternal
(
aRv
)
;
if
(
external
)
{
aResult
.
SetAsExternal
(
)
=
external
;
}
#
else
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
#
endif
}
void
nsGlobalWindowInner
:
:
ClearDocumentDependentSlots
(
JSContext
*
aCx
)
{
if
(
!
WindowBinding
:
:
ClearCachedDocumentValue
(
aCx
this
)
|
|
!
WindowBinding
:
:
ClearCachedPerformanceValue
(
aCx
this
)
)
{
MOZ_CRASH
(
"
Unhandlable
OOM
while
clearing
document
dependent
slots
.
"
)
;
}
}
JSObject
*
nsGlobalWindowInner
:
:
CreateNamedPropertiesObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aProto
)
{
return
WindowNamedPropertiesHandler
:
:
Create
(
aCx
aProto
)
;
}
void
nsGlobalWindowInner
:
:
RedefineProperty
(
JSContext
*
aCx
const
char
*
aPropName
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aError
)
{
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
GetWrapperPreserveColor
(
)
)
;
if
(
!
thisObj
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
if
(
!
JS_WrapObject
(
aCx
&
thisObj
)
|
|
!
JS_DefineProperty
(
aCx
thisObj
aPropName
aValue
JSPROP_ENUMERATE
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
}
}
void
nsGlobalWindowInner
:
:
GetReplaceableWindowCoord
(
JSContext
*
aCx
nsGlobalWindowInner
:
:
WindowCoordGetter
aGetter
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
CallerType
aCallerType
ErrorResult
&
aError
)
{
int32_t
coord
=
(
this
-
>
*
aGetter
)
(
aCallerType
aError
)
;
if
(
!
aError
.
Failed
(
)
&
&
!
ToJSValue
(
aCx
coord
aRetval
)
)
{
aError
.
Throw
(
NS_ERROR_FAILURE
)
;
}
}
void
nsGlobalWindowInner
:
:
SetReplaceableWindowCoord
(
JSContext
*
aCx
nsGlobalWindowInner
:
:
WindowCoordSetter
aSetter
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
const
char
*
aPropName
CallerType
aCallerType
ErrorResult
&
aError
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
if
(
!
outer
|
|
!
outer
-
>
CanMoveResizeWindows
(
aCallerType
)
|
|
outer
-
>
IsFrame
(
)
)
{
RedefineProperty
(
aCx
aPropName
aValue
aError
)
;
return
;
}
int32_t
value
;
if
(
!
ValueToPrimitive
<
int32_t
eDefault
>
(
aCx
aValue
&
value
)
)
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
GetDocShell
(
)
)
)
{
bool
innerWidthSpecified
=
false
;
bool
innerHeightSpecified
=
false
;
bool
outerWidthSpecified
=
false
;
bool
outerHeightSpecified
=
false
;
if
(
strcmp
(
aPropName
"
innerWidth
"
)
=
=
0
)
{
innerWidthSpecified
=
true
;
}
else
if
(
strcmp
(
aPropName
"
innerHeight
"
)
=
=
0
)
{
innerHeightSpecified
=
true
;
}
else
if
(
strcmp
(
aPropName
"
outerWidth
"
)
=
=
0
)
{
outerWidthSpecified
=
true
;
}
else
if
(
strcmp
(
aPropName
"
outerHeight
"
)
=
=
0
)
{
outerHeightSpecified
=
true
;
}
if
(
innerWidthSpecified
|
|
innerHeightSpecified
|
|
outerWidthSpecified
|
|
outerHeightSpecified
)
{
nsCOMPtr
<
nsIBaseWindow
>
treeOwnerAsWin
=
outer
-
>
GetTreeOwnerWindow
(
)
;
nsCOMPtr
<
nsIScreen
>
screen
;
nsCOMPtr
<
nsIScreenManager
>
screenMgr
(
do_GetService
(
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
)
)
;
int32_t
winLeft
=
0
;
int32_t
winTop
=
0
;
int32_t
winWidth
=
0
;
int32_t
winHeight
=
0
;
double
scale
=
1
.
0
;
if
(
treeOwnerAsWin
&
&
screenMgr
)
{
treeOwnerAsWin
-
>
GetUnscaledDevicePixelsPerCSSPixel
(
&
scale
)
;
treeOwnerAsWin
-
>
GetPositionAndSize
(
&
winLeft
&
winTop
&
winWidth
&
winHeight
)
;
winLeft
=
NSToIntRound
(
winHeight
/
scale
)
;
winTop
=
NSToIntRound
(
winWidth
/
scale
)
;
winWidth
=
NSToIntRound
(
winWidth
/
scale
)
;
winHeight
=
NSToIntRound
(
winHeight
/
scale
)
;
CSSIntSize
contentSize
;
outer
-
>
GetInnerSize
(
contentSize
)
;
screenMgr
-
>
ScreenForRect
(
winLeft
winTop
winWidth
winHeight
getter_AddRefs
(
screen
)
)
;
if
(
screen
)
{
int32_t
*
targetContentWidth
=
nullptr
;
int32_t
*
targetContentHeight
=
nullptr
;
int32_t
screenWidth
=
0
;
int32_t
screenHeight
=
0
;
int32_t
chromeWidth
=
0
;
int32_t
chromeHeight
=
0
;
int32_t
inputWidth
=
0
;
int32_t
inputHeight
=
0
;
int32_t
unused
=
0
;
screen
-
>
GetAvailRect
(
&
unused
&
unused
&
screenWidth
&
screenHeight
)
;
screenWidth
=
NSToIntRound
(
screenWidth
/
scale
)
;
screenHeight
=
NSToIntRound
(
screenHeight
/
scale
)
;
chromeWidth
=
winWidth
-
contentSize
.
width
;
chromeHeight
=
winHeight
-
contentSize
.
height
;
if
(
innerWidthSpecified
|
|
outerWidthSpecified
)
{
inputWidth
=
value
;
targetContentWidth
=
&
value
;
targetContentHeight
=
&
unused
;
}
else
if
(
innerHeightSpecified
|
|
outerHeightSpecified
)
{
inputHeight
=
value
;
targetContentWidth
=
&
unused
;
targetContentHeight
=
&
value
;
}
nsContentUtils
:
:
CalcRoundedWindowSizeForResistingFingerprinting
(
chromeWidth
chromeHeight
screenWidth
screenHeight
inputWidth
inputHeight
outerWidthSpecified
outerHeightSpecified
targetContentWidth
targetContentHeight
)
;
}
}
}
}
(
this
-
>
*
aSetter
)
(
value
aCallerType
aError
)
;
}
void
nsGlobalWindowInner
:
:
FireOnNewGlobalObject
(
)
{
AutoEntryScript
aes
(
this
"
nsGlobalWindowInner
report
new
global
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
aes
.
cx
(
)
GetWrapper
(
)
)
;
JS_FireOnNewGlobalObject
(
aes
.
cx
(
)
global
)
;
}
#
ifdef
_WINDOWS_
#
error
"
Never
include
windows
.
h
in
this
file
!
"
#
endif
already_AddRefed
<
Promise
>
nsGlobalWindowInner
:
:
CreateImageBitmap
(
JSContext
*
aCx
const
ImageBitmapSource
&
aImage
ErrorResult
&
aRv
)
{
if
(
aImage
.
IsArrayBuffer
(
)
|
|
aImage
.
IsArrayBufferView
(
)
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
return
ImageBitmap
:
:
Create
(
this
aImage
Nothing
(
)
aRv
)
;
}
already_AddRefed
<
Promise
>
nsGlobalWindowInner
:
:
CreateImageBitmap
(
JSContext
*
aCx
const
ImageBitmapSource
&
aImage
int32_t
aSx
int32_t
aSy
int32_t
aSw
int32_t
aSh
ErrorResult
&
aRv
)
{
if
(
aImage
.
IsArrayBuffer
(
)
|
|
aImage
.
IsArrayBufferView
(
)
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
return
ImageBitmap
:
:
Create
(
this
aImage
Some
(
gfx
:
:
IntRect
(
aSx
aSy
aSw
aSh
)
)
aRv
)
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
nsGlobalWindowInner
:
:
CreateImageBitmap
(
JSContext
*
aCx
const
ImageBitmapSource
&
aImage
int32_t
aOffset
int32_t
aLength
ImageBitmapFormat
aFormat
const
Sequence
<
ChannelPixelLayout
>
&
aLayout
ErrorResult
&
aRv
)
{
if
(
!
DOMPrefs
:
:
ImageBitmapExtensionsEnabled
(
)
)
{
aRv
.
Throw
(
NS_ERROR_TYPE_ERR
)
;
return
nullptr
;
}
if
(
aImage
.
IsArrayBuffer
(
)
|
|
aImage
.
IsArrayBufferView
(
)
)
{
return
ImageBitmap
:
:
Create
(
this
aImage
aOffset
aLength
aFormat
aLayout
aRv
)
;
}
aRv
.
Throw
(
NS_ERROR_TYPE_ERR
)
;
return
nullptr
;
}
mozilla
:
:
dom
:
:
TabGroup
*
nsGlobalWindowInner
:
:
TabGroupInner
(
)
{
if
(
!
mTabGroup
)
{
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
MOZ_RELEASE_ASSERT
(
outer
"
Inner
window
without
outer
window
has
no
cached
tab
group
!
"
)
;
mTabGroup
=
outer
-
>
TabGroup
(
)
;
}
MOZ_ASSERT
(
mTabGroup
)
;
#
ifdef
DEBUG
nsGlobalWindowOuter
*
outer
=
GetOuterWindowInternal
(
)
;
MOZ_ASSERT_IF
(
outer
outer
-
>
TabGroup
(
)
=
=
mTabGroup
)
;
#
endif
return
mTabGroup
;
}
nsresult
nsGlobalWindowInner
:
:
Dispatch
(
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
return
DispatcherTrait
:
:
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
nsISerialEventTarget
*
nsGlobalWindowInner
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
EventTargetFor
(
aCategory
)
;
}
return
DispatcherTrait
:
:
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
nsGlobalWindowInner
:
:
AbstractMainThreadFor
(
TaskCategory
aCategory
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
GetDocGroup
(
)
)
{
return
GetDocGroup
(
)
-
>
AbstractMainThreadFor
(
aCategory
)
;
}
return
DispatcherTrait
:
:
AbstractMainThreadFor
(
aCategory
)
;
}
Worklet
*
nsGlobalWindowInner
:
:
GetAudioWorklet
(
ErrorResult
&
aRv
)
{
if
(
!
mAudioWorklet
)
{
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
if
(
!
principal
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
mAudioWorklet
=
new
Worklet
(
this
principal
Worklet
:
:
eAudioWorklet
)
;
}
return
mAudioWorklet
;
}
Worklet
*
nsGlobalWindowInner
:
:
GetPaintWorklet
(
ErrorResult
&
aRv
)
{
if
(
!
mPaintWorklet
)
{
nsIPrincipal
*
principal
=
GetPrincipal
(
)
;
if
(
!
principal
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
mPaintWorklet
=
new
Worklet
(
this
principal
Worklet
:
:
ePaintWorklet
)
;
}
return
mPaintWorklet
;
}
void
nsGlobalWindowInner
:
:
GetRegionalPrefsLocales
(
nsTArray
<
nsString
>
&
aLocales
)
{
AutoTArray
<
nsCString
10
>
rpLocales
;
mozilla
:
:
intl
:
:
LocaleService
:
:
GetInstance
(
)
-
>
GetRegionalPrefsLocales
(
rpLocales
)
;
for
(
const
auto
&
loc
:
rpLocales
)
{
aLocales
.
AppendElement
(
NS_ConvertUTF8toUTF16
(
loc
)
)
;
}
}
IntlUtils
*
nsGlobalWindowInner
:
:
GetIntlUtils
(
ErrorResult
&
aError
)
{
if
(
!
mIntlUtils
)
{
mIntlUtils
=
new
IntlUtils
(
this
)
;
}
return
mIntlUtils
;
}
mozilla
:
:
dom
:
:
TabGroup
*
nsPIDOMWindowInner
:
:
TabGroup
(
)
{
return
nsGlobalWindowInner
:
:
Cast
(
this
)
-
>
TabGroupInner
(
)
;
}
already_AddRefed
<
nsGlobalWindowInner
>
nsGlobalWindowInner
:
:
Create
(
nsGlobalWindowOuter
*
aOuterWindow
bool
aIsChrome
)
{
RefPtr
<
nsGlobalWindowInner
>
window
=
new
nsGlobalWindowInner
(
aOuterWindow
)
;
if
(
aIsChrome
)
{
window
-
>
mIsChrome
=
true
;
window
-
>
mCleanMessageManager
=
true
;
}
window
-
>
InitWasOffline
(
)
;
return
window
.
forget
(
)
;
}
nsIURI
*
nsPIDOMWindowInner
:
:
GetDocumentURI
(
)
const
{
return
mDoc
?
mDoc
-
>
GetDocumentURI
(
)
:
mDocumentURI
.
get
(
)
;
}
nsIURI
*
nsPIDOMWindowInner
:
:
GetDocBaseURI
(
)
const
{
return
mDoc
?
mDoc
-
>
GetDocBaseURI
(
)
:
mDocBaseURI
.
get
(
)
;
}
void
nsPIDOMWindowInner
:
:
MaybeCreateDoc
(
)
{
MOZ_ASSERT
(
!
mDoc
)
;
if
(
nsIDocShell
*
docShell
=
GetDocShell
(
)
)
{
nsCOMPtr
<
nsIDocument
>
document
=
docShell
-
>
GetDocument
(
)
;
Unused
<
<
document
;
}
}
mozilla
:
:
dom
:
:
DocGroup
*
nsPIDOMWindowInner
:
:
GetDocGroup
(
)
const
{
nsIDocument
*
doc
=
GetExtantDoc
(
)
;
if
(
doc
)
{
return
doc
-
>
GetDocGroup
(
)
;
}
return
nullptr
;
}
namespace
mozilla
{
namespace
dom
{
extern
uint64_t
NextWindowID
(
)
;
}
}
nsPIDOMWindowInner
:
:
nsPIDOMWindowInner
(
nsPIDOMWindowOuter
*
aOuterWindow
)
:
mMutationBits
(
0
)
mActivePeerConnections
(
0
)
mIsDocumentLoaded
(
false
)
mIsHandlingResizeEvent
(
false
)
mMayHavePaintEventListener
(
false
)
mMayHaveTouchEventListener
(
false
)
mMayHaveSelectionChangeEventListener
(
false
)
mMayHaveMouseEnterLeaveEventListener
(
false
)
mMayHavePointerEnterLeaveEventListener
(
false
)
mInnerObjectsFreed
(
false
)
mAudioCaptured
(
false
)
mOuterWindow
(
aOuterWindow
)
mWindowID
(
NextWindowID
(
)
)
mHasNotifiedGlobalCreated
(
false
)
mMarkedCCGeneration
(
0
)
mHasTriedToCacheTopInnerWindow
(
false
)
mNumOfIndexedDBDatabases
(
0
)
mNumOfOpenWebSockets
(
0
)
{
MOZ_ASSERT
(
aOuterWindow
)
;
}
nsPIDOMWindowInner
:
:
~
nsPIDOMWindowInner
(
)
{
}
#
undef
FORWARD_TO_OUTER
#
undef
FORWARD_TO_OUTER_OR_THROW
#
undef
FORWARD_TO_OUTER_VOID
