#
ifndef
mozilla_RangeUtils_h
#
define
mozilla_RangeUtils_h
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AbstractRange
;
}
class
RangeUtils
final
{
typedef
dom
:
:
AbstractRange
AbstractRange
;
public
:
static
const
RawRangeBoundary
GetRawRangeBoundaryAfter
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
if
(
NS_WARN_IF
(
!
aNode
-
>
IsContent
(
)
)
)
{
return
RawRangeBoundary
(
)
;
}
nsINode
*
parentNode
=
aNode
-
>
GetParentNode
(
)
;
if
(
!
parentNode
)
{
return
RawRangeBoundary
(
)
;
}
RawRangeBoundary
afterNode
(
parentNode
aNode
-
>
AsContent
(
)
)
;
if
(
NS_WARN_IF
(
!
afterNode
.
Offset
(
RawRangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
)
)
{
return
RawRangeBoundary
(
)
;
}
return
afterNode
;
}
static
const
RawRangeBoundary
GetRawRangeBoundaryBefore
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
if
(
NS_WARN_IF
(
!
aNode
-
>
IsContent
(
)
)
)
{
return
RawRangeBoundary
(
)
;
}
nsINode
*
parentNode
=
aNode
-
>
GetParentNode
(
)
;
if
(
!
parentNode
)
{
return
RawRangeBoundary
(
)
;
}
int32_t
indexInParent
=
parentNode
-
>
ComputeIndexOf
(
aNode
)
;
if
(
NS_WARN_IF
(
indexInParent
<
0
)
)
{
return
RawRangeBoundary
(
)
;
}
return
RawRangeBoundary
(
parentNode
indexInParent
)
;
}
static
nsINode
*
ComputeRootNode
(
nsINode
*
aNode
)
;
static
bool
IsValidOffset
(
uint32_t
aOffset
)
{
return
aOffset
<
=
INT32_MAX
;
}
static
bool
IsValidPoints
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
{
return
IsValidPoints
(
RawRangeBoundary
(
aStartContainer
aStartOffset
)
RawRangeBoundary
(
aEndContainer
aEndOffset
)
)
;
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
static
bool
IsValidPoints
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
)
;
static
nsresult
CompareNodeToRange
(
nsINode
*
aNode
AbstractRange
*
aAbstractRange
bool
*
aNodeIsBeforeRange
bool
*
aNodeIsAfterRange
)
;
}
;
}
#
endif
