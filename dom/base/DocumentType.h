#
ifndef
DocumentType_h
#
define
DocumentType_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
CharacterData
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
dom
{
class
DocumentType
final
:
public
CharacterData
{
public
:
DocumentType
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
const
nsAString
&
aPublicId
const
nsAString
&
aSystemId
const
nsAString
&
aInternalSubset
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
DocumentType
CharacterData
)
virtual
bool
IsNodeOfType
(
uint32_t
aFlags
)
const
override
;
virtual
void
GetNodeValueInternal
(
nsAString
&
aNodeValue
)
override
{
SetDOMStringToNull
(
aNodeValue
)
;
}
virtual
void
SetNodeValueInternal
(
const
nsAString
&
aNodeValue
mozilla
:
:
ErrorResult
&
aError
)
override
{
}
virtual
const
nsTextFragment
*
GetText
(
)
override
;
virtual
already_AddRefed
<
CharacterData
>
CloneDataNode
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
bool
aCloneText
)
const
override
;
void
GetName
(
nsAString
&
aName
)
const
;
void
GetPublicId
(
nsAString
&
aPublicId
)
const
;
void
GetSystemId
(
nsAString
&
aSystemId
)
const
;
void
GetInternalSubset
(
nsAString
&
aInternalSubset
)
const
;
protected
:
virtual
~
DocumentType
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsString
mPublicId
;
nsString
mSystemId
;
nsString
mInternalSubset
;
}
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
DocumentType
>
NS_NewDOMDocumentType
(
nsNodeInfoManager
*
aNodeInfoManager
nsAtom
*
aName
const
nsAString
&
aPublicId
const
nsAString
&
aSystemId
const
nsAString
&
aInternalSubset
)
;
#
endif
