#
ifndef
mozilla_dom_ResizeObserverController_h
#
define
mozilla_dom_ResizeObserverController_h
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
ResizeObserver
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRefreshObservers
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsRefreshDriver
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
ResizeObserverController
final
{
public
:
explicit
ResizeObserverController
(
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
MOZ_ASSERT
(
mDocument
"
Need
a
non
-
null
document
"
)
;
}
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
)
const
;
void
ShellDetachedFromDocument
(
)
{
UnscheduleNotification
(
)
;
}
void
AddResizeObserver
(
ResizeObserver
&
aObserver
)
{
MOZ_ASSERT
(
!
mResizeObservers
.
Contains
(
&
aObserver
)
)
;
if
(
aObserver
.
HasNativeCallback
(
)
)
{
mResizeObservers
.
InsertElementAt
(
0
&
aObserver
)
;
}
else
{
mResizeObservers
.
AppendElement
(
&
aObserver
)
;
}
}
void
RemoveResizeObserver
(
ResizeObserver
&
aObserver
)
{
MOZ_ASSERT
(
mResizeObservers
.
Contains
(
&
aObserver
)
)
;
mResizeObservers
.
RemoveElement
(
&
aObserver
)
;
}
void
ScheduleNotification
(
)
;
void
UnscheduleNotification
(
)
;
MOZ_CAN_RUN_SCRIPT
void
Notify
(
)
;
bool
IsScheduled
(
)
const
{
return
mScheduled
;
}
~
ResizeObserverController
(
)
;
private
:
nsRefreshDriver
*
GetRefreshDriver
(
)
const
;
void
GatherAllActiveObservations
(
uint32_t
aDepth
)
;
MOZ_CAN_RUN_SCRIPT
uint32_t
BroadcastAllActiveObservations
(
)
;
bool
HasAnyActiveObservations
(
)
const
;
bool
HasAnySkippedObservations
(
)
const
;
Document
*
const
mDocument
;
nsTArray
<
ResizeObserver
*
>
mResizeObservers
;
bool
mScheduled
=
false
;
}
;
}
}
#
endif
