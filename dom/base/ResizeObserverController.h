#
ifndef
mozilla_dom_ResizeObserverController_h
#
define
mozilla_dom_ResizeObserverController_h
#
include
"
mozilla
/
dom
/
ResizeObserver
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRefreshObservers
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsRefreshDriver
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Document
;
class
ResizeObserverController
;
class
ResizeObserverNotificationHelper
final
:
public
nsARefreshObserver
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ResizeObserverNotificationHelper
override
)
explicit
ResizeObserverNotificationHelper
(
ResizeObserverController
*
aOwner
)
:
mOwner
(
aOwner
)
mRegistered
(
false
)
{
MOZ_ASSERT
(
mOwner
"
Need
a
non
-
null
owner
"
)
;
}
MOZ_CAN_RUN_SCRIPT
void
WillRefresh
(
TimeStamp
aTime
)
override
;
nsRefreshDriver
*
GetRefreshDriver
(
)
const
;
void
Register
(
)
;
void
Unregister
(
)
;
bool
IsRegistered
(
)
const
{
return
mRegistered
;
}
void
DetachFromOwner
(
)
{
mOwner
=
nullptr
;
}
private
:
virtual
~
ResizeObserverNotificationHelper
(
)
;
ResizeObserverController
*
mOwner
;
bool
mRegistered
;
}
;
class
ResizeObserverController
final
{
public
:
explicit
ResizeObserverController
(
Document
*
aDocument
)
:
mDocument
(
aDocument
)
mResizeObserverNotificationHelper
(
new
ResizeObserverNotificationHelper
(
this
)
)
{
MOZ_ASSERT
(
mDocument
"
Need
a
non
-
null
document
"
)
;
}
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
;
void
Unlink
(
)
;
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
)
const
;
void
ShellDetachedFromDocument
(
)
;
void
AddResizeObserver
(
ResizeObserver
&
aObserver
)
{
MOZ_ASSERT
(
!
mResizeObservers
.
Contains
(
&
aObserver
)
)
;
mResizeObservers
.
AppendElement
(
&
aObserver
)
;
}
void
RemoveResizeObserver
(
ResizeObserver
&
aObserver
)
{
MOZ_ASSERT
(
mResizeObservers
.
Contains
(
&
aObserver
)
)
;
mResizeObservers
.
RemoveElement
(
&
aObserver
)
;
}
void
ScheduleNotification
(
)
;
MOZ_CAN_RUN_SCRIPT
void
Notify
(
)
;
PresShell
*
GetPresShell
(
)
const
{
return
mDocument
-
>
GetPresShell
(
)
;
}
~
ResizeObserverController
(
)
;
private
:
void
GatherAllActiveObservations
(
uint32_t
aDepth
)
;
MOZ_CAN_RUN_SCRIPT
uint32_t
BroadcastAllActiveObservations
(
)
;
bool
HasAnyActiveObservations
(
)
const
;
bool
HasAnySkippedObservations
(
)
const
;
Document
*
const
mDocument
;
RefPtr
<
ResizeObserverNotificationHelper
>
mResizeObserverNotificationHelper
;
nsTArray
<
RefPtr
<
ResizeObserver
>
>
mResizeObservers
;
}
;
}
}
#
endif
