#
ifndef
mozilla_dom_Navigator_h
#
define
mozilla_dom_Navigator_h
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsIDOMNavigator
.
h
"
#
include
"
nsIMozNavigatorNetwork
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
ifdef
MOZ_EME
#
include
"
mozilla
/
dom
/
MediaKeySystemAccessManager
.
h
"
#
endif
class
nsPluginArray
;
class
nsMimeTypeArray
;
class
nsPIDOMWindowInner
;
class
nsIDOMNavigatorSystemMessages
;
class
nsDOMCameraManager
;
class
nsDOMDeviceStorage
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
Geolocation
;
class
systemMessageCallback
;
class
MediaDevices
;
struct
MediaStreamConstraints
;
class
WakeLock
;
class
ArrayBufferViewOrBlobOrStringOrFormData
;
struct
MobileIdOptions
;
class
ServiceWorkerContainer
;
class
DOMRequest
;
}
}
namespace
mozilla
{
namespace
dom
{
class
Permissions
;
namespace
battery
{
class
BatteryManager
;
}
#
ifdef
MOZ_B2G_FM
class
FMRadio
;
#
endif
class
Promise
;
class
DesktopNotificationCenter
;
class
MobileMessageManager
;
class
MozIdleObserver
;
#
ifdef
MOZ_GAMEPAD
class
Gamepad
;
#
endif
#
ifdef
MOZ_MEDIA_NAVIGATOR
class
NavigatorUserMediaSuccessCallback
;
class
NavigatorUserMediaErrorCallback
;
class
MozGetUserMediaDevicesSuccessCallback
;
#
endif
namespace
network
{
class
Connection
;
}
#
ifdef
MOZ_B2G_BT
namespace
bluetooth
{
class
BluetoothManager
;
}
#
endif
#
ifdef
MOZ_B2G_RIL
class
MobileConnectionArray
;
#
endif
class
PowerManager
;
class
CellBroadcast
;
class
IccManager
;
class
Telephony
;
class
Voicemail
;
class
TVManager
;
class
InputPortManager
;
class
DeviceStorageAreaListener
;
class
Presentation
;
class
LegacyMozTCPSocket
;
namespace
time
{
class
TimeManager
;
}
namespace
system
{
#
ifdef
MOZ_AUDIO_CHANNEL_MANAGER
class
AudioChannelManager
;
#
endif
}
class
Navigator
final
:
public
nsIDOMNavigator
public
nsIMozNavigatorNetwork
public
nsWrapperCache
{
public
:
explicit
Navigator
(
nsPIDOMWindowInner
*
aInnerWindow
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
Navigator
nsIDOMNavigator
)
NS_DECL_NSIDOMNAVIGATOR
NS_DECL_NSIMOZNAVIGATORNETWORK
static
void
Init
(
)
;
void
Invalidate
(
)
;
nsPIDOMWindowInner
*
GetWindow
(
)
const
{
return
mWindow
;
}
void
RefreshMIMEArray
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
SetWindow
(
nsPIDOMWindowInner
*
aInnerWindow
)
;
void
OnNavigation
(
)
;
nsresult
EnsureMessagesManager
(
)
;
bool
OnLine
(
)
;
void
RegisterProtocolHandler
(
const
nsAString
&
aScheme
const
nsAString
&
aURL
const
nsAString
&
aTitle
ErrorResult
&
aRv
)
;
void
RegisterContentHandler
(
const
nsAString
&
aMIMEType
const
nsAString
&
aURL
const
nsAString
&
aTitle
ErrorResult
&
aRv
)
;
nsMimeTypeArray
*
GetMimeTypes
(
ErrorResult
&
aRv
)
;
nsPluginArray
*
GetPlugins
(
ErrorResult
&
aRv
)
;
Permissions
*
GetPermissions
(
ErrorResult
&
aRv
)
;
Geolocation
*
GetGeolocation
(
ErrorResult
&
aRv
)
;
Promise
*
GetBattery
(
ErrorResult
&
aRv
)
;
battery
:
:
BatteryManager
*
GetDeprecatedBattery
(
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
GetDataStores
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
const
nsAString
&
aOwner
ErrorResult
&
aRv
)
;
static
void
AppName
(
nsAString
&
aAppName
bool
aUsePrefOverriddenValue
)
;
static
nsresult
GetPlatform
(
nsAString
&
aPlatform
bool
aUsePrefOverriddenValue
)
;
static
nsresult
GetAppVersion
(
nsAString
&
aAppVersion
bool
aUsePrefOverriddenValue
)
;
static
nsresult
GetUserAgent
(
nsPIDOMWindowInner
*
aWindow
nsIURI
*
aURI
bool
aIsCallerChrome
nsAString
&
aUserAgent
)
;
void
ClearUserAgentCache
(
)
;
already_AddRefed
<
Promise
>
GetDataStores
(
const
nsAString
&
aName
const
nsAString
&
aOwner
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetFeature
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
HasFeature
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
;
bool
Vibrate
(
uint32_t
aDuration
)
;
bool
Vibrate
(
const
nsTArray
<
uint32_t
>
&
aDuration
)
;
uint32_t
MaxTouchPoints
(
)
;
void
GetAppCodeName
(
nsString
&
aAppCodeName
ErrorResult
&
aRv
)
{
aRv
=
GetAppCodeName
(
aAppCodeName
)
;
}
void
GetOscpu
(
nsString
&
aOscpu
ErrorResult
&
aRv
)
{
aRv
=
GetOscpu
(
aOscpu
)
;
}
bool
CookieEnabled
(
)
;
void
GetBuildID
(
nsString
&
aBuildID
ErrorResult
&
aRv
)
{
aRv
=
GetBuildID
(
aBuildID
)
;
}
PowerManager
*
GetMozPower
(
ErrorResult
&
aRv
)
;
bool
JavaEnabled
(
ErrorResult
&
aRv
)
;
uint64_t
HardwareConcurrency
(
)
;
bool
TaintEnabled
(
)
{
return
false
;
}
void
AddIdleObserver
(
MozIdleObserver
&
aObserver
ErrorResult
&
aRv
)
;
void
RemoveIdleObserver
(
MozIdleObserver
&
aObserver
ErrorResult
&
aRv
)
;
already_AddRefed
<
WakeLock
>
RequestWakeLock
(
const
nsAString
&
aTopic
ErrorResult
&
aRv
)
;
DeviceStorageAreaListener
*
GetDeviceStorageAreaListener
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsDOMDeviceStorage
>
GetDeviceStorage
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
;
void
GetDeviceStorages
(
const
nsAString
&
aType
nsTArray
<
RefPtr
<
nsDOMDeviceStorage
>
>
&
aStores
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsDOMDeviceStorage
>
GetDeviceStorageByNameAndType
(
const
nsAString
&
aName
const
nsAString
&
aType
ErrorResult
&
aRv
)
;
DesktopNotificationCenter
*
GetMozNotification
(
ErrorResult
&
aRv
)
;
CellBroadcast
*
GetMozCellBroadcast
(
ErrorResult
&
aRv
)
;
IccManager
*
GetMozIccManager
(
ErrorResult
&
aRv
)
;
MobileMessageManager
*
GetMozMobileMessage
(
)
;
Telephony
*
GetMozTelephony
(
ErrorResult
&
aRv
)
;
Voicemail
*
GetMozVoicemail
(
ErrorResult
&
aRv
)
;
TVManager
*
GetTv
(
)
;
InputPortManager
*
GetInputPortManager
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
LegacyMozTCPSocket
>
MozTCPSocket
(
)
;
network
:
:
Connection
*
GetConnection
(
ErrorResult
&
aRv
)
;
nsDOMCameraManager
*
GetMozCameras
(
ErrorResult
&
aRv
)
;
MediaDevices
*
GetMediaDevices
(
ErrorResult
&
aRv
)
;
void
MozSetMessageHandler
(
const
nsAString
&
aType
systemMessageCallback
*
aCallback
ErrorResult
&
aRv
)
;
bool
MozHasPendingMessage
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
;
void
MozSetMessageHandlerPromise
(
Promise
&
aPromise
ErrorResult
&
aRv
)
;
#
ifdef
MOZ_B2G
already_AddRefed
<
Promise
>
GetMobileIdAssertion
(
const
MobileIdOptions
&
options
ErrorResult
&
aRv
)
;
#
endif
#
ifdef
MOZ_B2G_RIL
MobileConnectionArray
*
GetMozMobileConnections
(
ErrorResult
&
aRv
)
;
#
endif
#
ifdef
MOZ_GAMEPAD
void
GetGamepads
(
nsTArray
<
RefPtr
<
Gamepad
>
>
&
aGamepads
ErrorResult
&
aRv
)
;
#
endif
already_AddRefed
<
Promise
>
GetVRDevices
(
ErrorResult
&
aRv
)
;
void
NotifyVRDevicesUpdated
(
)
;
#
ifdef
MOZ_B2G_FM
FMRadio
*
GetMozFMRadio
(
ErrorResult
&
aRv
)
;
#
endif
#
ifdef
MOZ_B2G_BT
bluetooth
:
:
BluetoothManager
*
GetMozBluetooth
(
ErrorResult
&
aRv
)
;
#
endif
#
ifdef
MOZ_TIME_MANAGER
time
:
:
TimeManager
*
GetMozTime
(
ErrorResult
&
aRv
)
;
#
endif
#
ifdef
MOZ_AUDIO_CHANNEL_MANAGER
system
:
:
AudioChannelManager
*
GetMozAudioChannelManager
(
ErrorResult
&
aRv
)
;
#
endif
Presentation
*
GetPresentation
(
ErrorResult
&
aRv
)
;
bool
SendBeacon
(
const
nsAString
&
aUrl
const
Nullable
<
ArrayBufferViewOrBlobOrStringOrFormData
>
&
aData
ErrorResult
&
aRv
)
;
#
ifdef
MOZ_MEDIA_NAVIGATOR
void
MozGetUserMedia
(
const
MediaStreamConstraints
&
aConstraints
NavigatorUserMediaSuccessCallback
&
aOnSuccess
NavigatorUserMediaErrorCallback
&
aOnError
ErrorResult
&
aRv
)
;
void
MozGetUserMediaDevices
(
const
MediaStreamConstraints
&
aConstraints
MozGetUserMediaDevicesSuccessCallback
&
aOnSuccess
NavigatorUserMediaErrorCallback
&
aOnError
uint64_t
aInnerWindowID
const
nsAString
&
aCallID
ErrorResult
&
aRv
)
;
#
endif
already_AddRefed
<
ServiceWorkerContainer
>
ServiceWorker
(
)
;
bool
DoResolve
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
;
static
bool
MayResolve
(
jsid
aId
)
;
void
GetOwnPropertyNames
(
JSContext
*
aCx
nsTArray
<
nsString
>
&
aNames
ErrorResult
&
aRv
)
;
void
GetLanguages
(
nsTArray
<
nsString
>
&
aLanguages
)
;
bool
MozE10sEnabled
(
)
;
#
ifdef
MOZ_PAY
already_AddRefed
<
DOMRequest
>
MozPay
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aJwts
ErrorResult
&
aRv
)
;
#
endif
static
void
GetAcceptLanguages
(
nsTArray
<
nsString
>
&
aLanguages
)
;
static
bool
HasWakeLockSupport
(
JSContext
*
JSObject
*
)
;
static
bool
HasCameraSupport
(
JSContext
*
JSObject
*
aGlobal
)
;
static
bool
HasWifiManagerSupport
(
JSContext
*
JSObject
*
aGlobal
)
;
#
ifdef
MOZ_NFC
static
bool
HasNFCSupport
(
JSContext
*
JSObject
*
aGlobal
)
;
#
endif
#
ifdef
MOZ_MEDIA_NAVIGATOR
static
bool
HasUserMediaSupport
(
JSContext
*
JSObject
*
)
;
#
endif
static
bool
HasDataStoreSupport
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
HasDataStoreSupport
(
JSContext
*
cx
JSObject
*
aGlobal
)
;
#
ifdef
MOZ_B2G
static
bool
HasMobileIdSupport
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
#
endif
static
bool
HasPresentationSupport
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
static
bool
IsE10sEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
GetWindow
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
nsPIDOMWindowInner
>
GetWindowFromGlobal
(
JSObject
*
aGlobal
)
;
#
ifdef
MOZ_EME
already_AddRefed
<
Promise
>
RequestMediaKeySystemAccess
(
const
nsAString
&
aKeySystem
const
Sequence
<
MediaKeySystemConfiguration
>
&
aConfig
ErrorResult
&
aRv
)
;
private
:
RefPtr
<
MediaKeySystemAccessManager
>
mMediaKeySystemAccessManager
;
#
endif
private
:
virtual
~
Navigator
(
)
;
bool
CheckPermission
(
const
char
*
type
)
;
static
bool
CheckPermission
(
nsPIDOMWindowInner
*
aWindow
const
char
*
aType
)
;
already_AddRefed
<
nsDOMDeviceStorage
>
FindDeviceStorage
(
const
nsAString
&
aName
const
nsAString
&
aType
)
;
RefPtr
<
nsMimeTypeArray
>
mMimeTypes
;
RefPtr
<
nsPluginArray
>
mPlugins
;
RefPtr
<
Permissions
>
mPermissions
;
RefPtr
<
Geolocation
>
mGeolocation
;
RefPtr
<
DesktopNotificationCenter
>
mNotification
;
RefPtr
<
battery
:
:
BatteryManager
>
mBatteryManager
;
RefPtr
<
Promise
>
mBatteryPromise
;
#
ifdef
MOZ_B2G_FM
RefPtr
<
FMRadio
>
mFMRadio
;
#
endif
RefPtr
<
PowerManager
>
mPowerManager
;
RefPtr
<
CellBroadcast
>
mCellBroadcast
;
RefPtr
<
IccManager
>
mIccManager
;
RefPtr
<
MobileMessageManager
>
mMobileMessageManager
;
RefPtr
<
Telephony
>
mTelephony
;
RefPtr
<
Voicemail
>
mVoicemail
;
RefPtr
<
TVManager
>
mTVManager
;
RefPtr
<
InputPortManager
>
mInputPortManager
;
RefPtr
<
network
:
:
Connection
>
mConnection
;
#
ifdef
MOZ_B2G_RIL
RefPtr
<
MobileConnectionArray
>
mMobileConnections
;
#
endif
#
ifdef
MOZ_B2G_BT
RefPtr
<
bluetooth
:
:
BluetoothManager
>
mBluetooth
;
#
endif
#
ifdef
MOZ_AUDIO_CHANNEL_MANAGER
RefPtr
<
system
:
:
AudioChannelManager
>
mAudioChannelManager
;
#
endif
RefPtr
<
nsDOMCameraManager
>
mCameraManager
;
RefPtr
<
MediaDevices
>
mMediaDevices
;
nsCOMPtr
<
nsIDOMNavigatorSystemMessages
>
mMessagesManager
;
nsTArray
<
nsWeakPtr
>
mDeviceStorageStores
;
RefPtr
<
time
:
:
TimeManager
>
mTimeManager
;
RefPtr
<
ServiceWorkerContainer
>
mServiceWorkerContainer
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
RefPtr
<
DeviceStorageAreaListener
>
mDeviceStorageAreaListener
;
RefPtr
<
Presentation
>
mPresentation
;
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
mCachedResolveResults
;
nsTArray
<
RefPtr
<
Promise
>
>
mVRGetDevicesPromises
;
}
;
}
}
#
endif
