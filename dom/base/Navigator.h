#
ifndef
mozilla_dom_Navigator_h
#
define
mozilla_dom_Navigator_h
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
AddonManagerBinding
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Fetch
.
h
"
#
include
"
mozilla
/
dom
/
NavigatorBinding
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySystemAccessManager
.
h
"
class
nsPluginArray
;
class
nsMimeTypeArray
;
class
nsPIDOMWindowInner
;
class
nsIDOMNavigatorSystemMessages
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
AddonManager
;
class
BodyExtractorBase
;
class
Geolocation
;
class
systemMessageCallback
;
class
MediaDevices
;
struct
MediaStreamConstraints
;
class
ArrayBufferOrArrayBufferViewOrBlobOrFormDataOrUSVStringOrURLSearchParams
;
class
ServiceWorkerContainer
;
class
DOMRequest
;
class
CredentialsContainer
;
class
Clipboard
;
class
LockManager
;
class
HTMLMediaElement
;
class
AudioContext
;
}
namespace
webgpu
{
class
Instance
;
}
}
namespace
mozilla
:
:
dom
{
class
Permissions
;
namespace
battery
{
class
BatteryManager
;
}
class
Promise
;
class
Gamepad
;
class
GamepadServiceTest
;
class
NavigatorUserMediaSuccessCallback
;
class
NavigatorUserMediaErrorCallback
;
struct
MIDIOptions
;
nsTArray
<
uint32_t
>
SanitizeVibratePattern
(
const
nsTArray
<
uint32_t
>
&
aPattern
)
;
namespace
network
{
class
Connection
;
}
class
LegacyMozTCPSocket
;
class
VRDisplay
;
class
VRServiceTest
;
class
XRSystem
;
class
StorageManager
;
class
MediaCapabilities
;
class
MediaSession
;
struct
ShareData
;
class
WindowGlobalChild
;
class
Navigator
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
Navigator
(
nsPIDOMWindowInner
*
aInnerWindow
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
Navigator
)
void
Invalidate
(
)
;
nsPIDOMWindowInner
*
GetWindow
(
)
const
{
return
mWindow
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
OnNavigation
(
)
;
void
GetProduct
(
nsAString
&
aProduct
)
;
void
GetLanguage
(
nsAString
&
aLanguage
)
;
void
GetAppName
(
nsAString
&
aAppName
)
const
;
void
GetAppVersion
(
nsAString
&
aAppName
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
void
GetPlatform
(
nsAString
&
aPlatform
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
void
GetUserAgent
(
nsAString
&
aUserAgent
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
bool
OnLine
(
)
;
void
CheckProtocolHandlerAllowed
(
const
nsAString
&
aScheme
nsIURI
*
aHandlerURI
nsIURI
*
aDocumentURI
ErrorResult
&
aRv
)
;
void
RegisterProtocolHandler
(
const
nsAString
&
aScheme
const
nsAString
&
aURL
ErrorResult
&
aRv
)
;
nsMimeTypeArray
*
GetMimeTypes
(
ErrorResult
&
aRv
)
;
nsPluginArray
*
GetPlugins
(
ErrorResult
&
aRv
)
;
bool
PdfViewerEnabled
(
)
;
Permissions
*
GetPermissions
(
ErrorResult
&
aRv
)
;
void
GetDoNotTrack
(
nsAString
&
aResult
)
;
bool
GlobalPrivacyControl
(
)
;
Geolocation
*
GetGeolocation
(
ErrorResult
&
aRv
)
;
Promise
*
GetBattery
(
ErrorResult
&
aRv
)
;
bool
CanShare
(
const
ShareData
&
aData
)
;
already_AddRefed
<
Promise
>
Share
(
const
ShareData
&
aData
ErrorResult
&
aRv
)
;
static
nsresult
GetPlatform
(
nsAString
&
aPlatform
Document
*
aCallerDoc
bool
aUsePrefOverriddenValue
)
;
static
nsresult
GetAppVersion
(
nsAString
&
aAppVersion
Document
*
aCallerDoc
bool
aUsePrefOverriddenValue
)
;
static
nsresult
GetUserAgent
(
nsPIDOMWindowInner
*
aWindow
Document
*
aCallerDoc
Maybe
<
bool
>
aShouldResistFingerprinting
nsAString
&
aUserAgent
)
;
void
ClearPlatformCache
(
)
;
void
ClearUserAgentCache
(
)
;
bool
Vibrate
(
uint32_t
aDuration
)
;
bool
Vibrate
(
const
nsTArray
<
uint32_t
>
&
aDuration
)
;
void
SetVibrationPermission
(
bool
aPermitted
bool
aPersistent
)
;
uint32_t
MaxTouchPoints
(
CallerType
aCallerType
)
;
void
GetAppCodeName
(
nsAString
&
aAppCodeName
ErrorResult
&
aRv
)
;
void
GetOscpu
(
nsAString
&
aOscpu
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
void
GetVendorSub
(
nsAString
&
aVendorSub
)
;
void
GetVendor
(
nsAString
&
aVendor
)
;
void
GetProductSub
(
nsAString
&
aProductSub
)
;
bool
CookieEnabled
(
)
;
void
GetBuildID
(
nsAString
&
aBuildID
CallerType
aCallerType
ErrorResult
&
aRv
)
const
;
bool
JavaEnabled
(
)
{
return
false
;
}
uint64_t
HardwareConcurrency
(
)
;
bool
TaintEnabled
(
)
{
return
false
;
}
already_AddRefed
<
LegacyMozTCPSocket
>
MozTCPSocket
(
)
;
network
:
:
Connection
*
GetConnection
(
ErrorResult
&
aRv
)
;
MediaDevices
*
GetMediaDevices
(
ErrorResult
&
aRv
)
;
MediaDevices
*
GetExtantMediaDevices
(
)
const
{
return
mMediaDevices
;
}
;
void
GetGamepads
(
nsTArray
<
RefPtr
<
Gamepad
>
>
&
aGamepads
ErrorResult
&
aRv
)
;
GamepadServiceTest
*
RequestGamepadServiceTest
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetVRDisplays
(
ErrorResult
&
aRv
)
;
void
FinishGetVRDisplays
(
bool
isWebVRSupportedInwindow
Promise
*
p
)
;
void
GetActiveVRDisplays
(
nsTArray
<
RefPtr
<
VRDisplay
>
>
&
aDisplays
)
const
;
void
OnXRPermissionRequestAllow
(
)
;
void
OnXRPermissionRequestCancel
(
)
;
VRServiceTest
*
RequestVRServiceTest
(
ErrorResult
&
aRv
)
;
bool
IsWebVRContentDetected
(
)
const
;
bool
IsWebVRContentPresenting
(
)
const
;
void
RequestVRPresentation
(
VRDisplay
&
aDisplay
)
;
XRSystem
*
GetXr
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
RequestMIDIAccess
(
const
MIDIOptions
&
aOptions
ErrorResult
&
aRv
)
;
bool
SendBeacon
(
const
nsAString
&
aUrl
const
Nullable
<
fetch
:
:
BodyInit
>
&
aData
ErrorResult
&
aRv
)
;
void
MozGetUserMedia
(
const
MediaStreamConstraints
&
aConstraints
NavigatorUserMediaSuccessCallback
&
aOnSuccess
NavigatorUserMediaErrorCallback
&
aOnError
CallerType
aCallerType
ErrorResult
&
aRv
)
;
already_AddRefed
<
ServiceWorkerContainer
>
ServiceWorker
(
)
;
already_AddRefed
<
ServiceWorkerContainer
>
ServiceWorkerJS
(
)
;
mozilla
:
:
dom
:
:
CredentialsContainer
*
Credentials
(
)
;
dom
:
:
Clipboard
*
Clipboard
(
)
;
webgpu
:
:
Instance
*
Gpu
(
)
;
dom
:
:
LockManager
*
Locks
(
)
;
static
bool
Webdriver
(
)
;
void
GetLanguages
(
nsTArray
<
nsString
>
&
aLanguages
)
;
StorageManager
*
Storage
(
)
;
static
void
GetAcceptLanguages
(
nsTArray
<
nsString
>
&
aLanguages
)
;
dom
:
:
MediaCapabilities
*
MediaCapabilities
(
)
;
dom
:
:
MediaSession
*
MediaSession
(
)
;
AddonManager
*
GetMozAddonManager
(
ErrorResult
&
aRv
)
;
static
bool
HasUserMediaSupport
(
JSContext
*
JSObject
*
)
;
static
bool
HasShareSupport
(
JSContext
*
JSObject
*
)
;
static
bool
HasMidiSupport
(
JSContext
*
JSObject
*
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
GetWindow
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
nsPIDOMWindowInner
>
GetWindowFromGlobal
(
JSObject
*
aGlobal
)
;
already_AddRefed
<
Promise
>
RequestMediaKeySystemAccess
(
const
nsAString
&
aKeySystem
const
Sequence
<
MediaKeySystemConfiguration
>
&
aConfig
ErrorResult
&
aRv
)
;
bool
HasCreatedMediaSession
(
)
const
;
AutoplayPolicy
GetAutoplayPolicy
(
AutoplayPolicyMediaType
aType
)
;
AutoplayPolicy
GetAutoplayPolicy
(
HTMLMediaElement
&
aElement
)
;
AutoplayPolicy
GetAutoplayPolicy
(
AudioContext
&
aContext
)
;
private
:
void
ValidateShareData
(
const
ShareData
&
aData
ErrorResult
&
aRv
)
;
RefPtr
<
MediaKeySystemAccessManager
>
mMediaKeySystemAccessManager
;
public
:
void
NotifyVRDisplaysUpdated
(
)
;
void
NotifyActiveVRDisplaysChanged
(
)
;
bool
TestTrialGatedAttribute
(
)
const
{
return
true
;
}
private
:
virtual
~
Navigator
(
)
;
enum
BeaconType
{
eBeaconTypeBlob
eBeaconTypeArrayBuffer
eBeaconTypeOther
}
;
bool
SendBeaconInternal
(
const
nsAString
&
aUrl
BodyExtractorBase
*
aBody
BeaconType
aType
ErrorResult
&
aRv
)
;
nsIDocShell
*
GetDocShell
(
)
const
{
return
mWindow
?
mWindow
-
>
GetDocShell
(
)
:
nullptr
;
}
RefPtr
<
nsPluginArray
>
mPlugins
;
RefPtr
<
Permissions
>
mPermissions
;
RefPtr
<
Geolocation
>
mGeolocation
;
RefPtr
<
battery
:
:
BatteryManager
>
mBatteryManager
;
RefPtr
<
Promise
>
mBatteryPromise
;
RefPtr
<
network
:
:
Connection
>
mConnection
;
RefPtr
<
CredentialsContainer
>
mCredentials
;
RefPtr
<
dom
:
:
Clipboard
>
mClipboard
;
RefPtr
<
MediaDevices
>
mMediaDevices
;
RefPtr
<
ServiceWorkerContainer
>
mServiceWorkerContainer
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
RefPtr
<
GamepadServiceTest
>
mGamepadServiceTest
;
nsTArray
<
RefPtr
<
Promise
>
>
mVRGetDisplaysPromises
;
RefPtr
<
VRServiceTest
>
mVRServiceTest
;
RefPtr
<
XRSystem
>
mXRSystem
;
nsTArray
<
uint32_t
>
mRequestedVibrationPattern
;
RefPtr
<
StorageManager
>
mStorageManager
;
RefPtr
<
dom
:
:
MediaCapabilities
>
mMediaCapabilities
;
RefPtr
<
dom
:
:
MediaSession
>
mMediaSession
;
RefPtr
<
AddonManager
>
mAddonManager
;
RefPtr
<
webgpu
:
:
Instance
>
mWebGpu
;
RefPtr
<
Promise
>
mSharePromise
;
RefPtr
<
dom
:
:
LockManager
>
mLocks
;
}
;
}
#
endif
