#
ifndef
mozilla_dom_FileList_h
#
define
mozilla_dom_FileList_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDOMFileList
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BlobImpls
;
class
File
;
class
FileList
final
:
public
nsIDOMFileList
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
FileList
)
NS_DECL_NSIDOMFILELIST
explicit
FileList
(
nsISupports
*
aParent
)
:
mParent
(
aParent
)
{
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsISupports
*
GetParentObject
(
)
{
return
mParent
;
}
bool
Append
(
File
*
aFile
)
{
return
mFiles
.
AppendElement
(
aFile
)
;
}
bool
Remove
(
uint32_t
aIndex
)
{
if
(
aIndex
<
mFiles
.
Length
(
)
)
{
mFiles
.
RemoveElementAt
(
aIndex
)
;
return
true
;
}
return
false
;
}
void
Clear
(
)
{
return
mFiles
.
Clear
(
)
;
}
static
FileList
*
FromSupports
(
nsISupports
*
aSupports
)
{
#
ifdef
DEBUG
{
nsCOMPtr
<
nsIDOMFileList
>
list_qi
=
do_QueryInterface
(
aSupports
)
;
NS_ASSERTION
(
list_qi
=
=
static_cast
<
nsIDOMFileList
*
>
(
aSupports
)
"
Uh
fix
QI
!
"
)
;
}
#
endif
return
static_cast
<
FileList
*
>
(
aSupports
)
;
}
File
*
Item
(
uint32_t
aIndex
)
{
return
mFiles
.
SafeElementAt
(
aIndex
)
;
}
File
*
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
{
aFound
=
aIndex
<
mFiles
.
Length
(
)
;
return
aFound
?
mFiles
.
ElementAt
(
aIndex
)
:
nullptr
;
}
uint32_t
Length
(
)
{
return
mFiles
.
Length
(
)
;
}
private
:
~
FileList
(
)
{
}
nsTArray
<
nsRefPtr
<
File
>
>
mFiles
;
nsCOMPtr
<
nsISupports
>
mParent
;
}
;
}
}
#
endif
