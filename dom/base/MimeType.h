#
ifndef
mozilla_dom_MimeType_h
#
define
mozilla_dom_MimeType_h
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTArray
.
h
"
template
<
typename
char_type
>
struct
HashKeyType
;
template
<
>
struct
HashKeyType
<
char16_t
>
{
typedef
nsStringHashKey
HashType
;
}
;
template
<
>
struct
HashKeyType
<
char
>
{
typedef
nsCStringHashKey
HashType
;
}
;
template
<
typename
char_type
>
class
TMimeType
final
{
private
:
class
ParameterValue
:
public
nsTString
<
char_type
>
{
public
:
bool
mRequiresQuoting
;
ParameterValue
(
)
:
mRequiresQuoting
(
false
)
{
}
}
;
nsTString
<
char_type
>
mType
;
nsTString
<
char_type
>
mSubtype
;
nsDataHashtable
<
typename
HashKeyType
<
char_type
>
:
:
HashType
ParameterValue
>
mParameters
;
nsTArray
<
nsTString
<
char_type
>
>
mParameterNames
;
public
:
TMimeType
(
const
nsTSubstring
<
char_type
>
&
aType
const
nsTSubstring
<
char_type
>
&
aSubtype
)
:
mType
(
aType
)
mSubtype
(
aSubtype
)
{
}
static
mozilla
:
:
UniquePtr
<
TMimeType
<
char_type
>
>
Parse
(
const
nsTSubstring
<
char_type
>
&
aStr
)
;
void
Serialize
(
nsTSubstring
<
char_type
>
&
aStr
)
const
;
void
GetFullType
(
nsTSubstring
<
char_type
>
&
aStr
)
const
;
bool
GetParameterValue
(
const
nsTSubstring
<
char_type
>
&
aName
nsTSubstring
<
char_type
>
&
aOutput
bool
aAppend
=
false
)
const
;
}
;
using
MimeType
=
TMimeType
<
char16_t
>
;
using
CMimeType
=
TMimeType
<
char
>
;
#
endif
