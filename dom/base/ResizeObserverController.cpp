#
include
"
mozilla
/
dom
/
ResizeObserverController
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
ErrorEvent
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
<
limits
>
namespace
mozilla
:
:
dom
{
static
void
FlushLayoutForWholeBrowsingContextTree
(
Document
&
aDoc
)
{
if
(
BrowsingContext
*
bc
=
aDoc
.
GetBrowsingContext
(
)
)
{
RefPtr
<
BrowsingContext
>
top
=
bc
-
>
Top
(
)
;
top
-
>
PreOrderWalk
(
[
]
(
BrowsingContext
*
aCur
)
{
if
(
Document
*
doc
=
aCur
-
>
GetExtantDocument
(
)
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
)
;
}
else
{
aDoc
.
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
void
ResizeObserverController
:
:
Notify
(
)
{
UnscheduleNotification
(
)
;
if
(
mResizeObservers
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
Document
>
doc
(
mDocument
)
;
uint32_t
shallowestTargetDepth
=
0
;
while
(
true
)
{
FlushLayoutForWholeBrowsingContextTree
(
*
doc
)
;
GatherAllActiveObservations
(
shallowestTargetDepth
)
;
if
(
!
HasAnyActiveObservations
(
)
)
{
break
;
}
DebugOnly
<
uint32_t
>
oldShallowestTargetDepth
=
shallowestTargetDepth
;
shallowestTargetDepth
=
BroadcastAllActiveObservations
(
)
;
NS_ASSERTION
(
oldShallowestTargetDepth
<
shallowestTargetDepth
"
shallowestTargetDepth
should
be
getting
strictly
deeper
"
)
;
}
if
(
HasAnySkippedObservations
(
)
)
{
RootedDictionary
<
ErrorEventInit
>
init
(
RootingCx
(
)
)
;
init
.
mMessage
.
AssignLiteral
(
"
ResizeObserver
loop
completed
with
undelivered
notifications
.
"
)
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
doc
-
>
GetInnerWindow
(
)
)
{
nsCOMPtr
<
nsIScriptGlobalObject
>
sgo
=
do_QueryInterface
(
window
)
;
MOZ_ASSERT
(
sgo
)
;
if
(
NS_WARN_IF
(
sgo
-
>
HandleScriptError
(
init
&
status
)
)
)
{
status
=
nsEventStatus_eIgnore
;
}
}
else
{
}
ScheduleNotification
(
)
;
}
}
void
ResizeObserverController
:
:
GatherAllActiveObservations
(
uint32_t
aDepth
)
{
for
(
ResizeObserver
*
observer
:
mResizeObservers
)
{
observer
-
>
GatherActiveObservations
(
aDepth
)
;
}
}
uint32_t
ResizeObserverController
:
:
BroadcastAllActiveObservations
(
)
{
uint32_t
shallowestTargetDepth
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
;
const
auto
observers
=
ToTArray
<
nsTArray
<
RefPtr
<
ResizeObserver
>
>
>
(
mResizeObservers
)
;
for
(
auto
&
observer
:
observers
)
{
uint32_t
targetDepth
=
MOZ_KnownLive
(
observer
)
-
>
BroadcastActiveObservations
(
)
;
if
(
targetDepth
<
shallowestTargetDepth
)
{
shallowestTargetDepth
=
targetDepth
;
}
}
return
shallowestTargetDepth
;
}
bool
ResizeObserverController
:
:
HasAnyActiveObservations
(
)
const
{
for
(
auto
&
observer
:
mResizeObservers
)
{
if
(
observer
-
>
HasActiveObservations
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
ResizeObserverController
:
:
HasAnySkippedObservations
(
)
const
{
for
(
auto
&
observer
:
mResizeObservers
)
{
if
(
observer
-
>
HasSkippedObservations
(
)
)
{
return
true
;
}
}
return
false
;
}
void
ResizeObserverController
:
:
ScheduleNotification
(
)
{
if
(
mScheduled
)
{
return
;
}
nsRefreshDriver
*
refreshDriver
=
GetRefreshDriver
(
)
;
if
(
!
refreshDriver
)
{
return
;
}
refreshDriver
-
>
ResizeObserverControllerAdded
(
)
;
mScheduled
=
true
;
}
void
ResizeObserverController
:
:
UnscheduleNotification
(
)
{
if
(
!
mScheduled
)
{
return
;
}
nsRefreshDriver
*
refreshDriver
=
GetRefreshDriver
(
)
;
MOZ_RELEASE_ASSERT
(
refreshDriver
"
We
should
not
leave
a
dangling
reference
to
the
observer
around
"
)
;
refreshDriver
-
>
ResizeObserverControllerRemoved
(
)
;
mScheduled
=
false
;
}
ResizeObserverController
:
:
~
ResizeObserverController
(
)
{
MOZ_RELEASE_ASSERT
(
!
mScheduled
"
Nothing
else
should
be
scheduled
when
we
go
away
"
)
;
}
void
ResizeObserverController
:
:
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
{
MallocSizeOf
mallocSizeOf
=
aSizes
.
mState
.
mMallocSizeOf
;
size_t
size
=
mallocSizeOf
(
this
)
;
size
+
=
mResizeObservers
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
aSizes
.
mDOMSizes
.
mDOMResizeObserverControllerSize
+
=
size
;
}
nsRefreshDriver
*
ResizeObserverController
:
:
GetRefreshDriver
(
)
const
{
PresShell
*
presShell
=
mDocument
-
>
GetPresShell
(
)
;
if
(
MOZ_UNLIKELY
(
!
presShell
)
)
{
return
nullptr
;
}
nsPresContext
*
presContext
=
presShell
-
>
GetPresContext
(
)
;
if
(
MOZ_UNLIKELY
(
!
presContext
)
)
{
return
nullptr
;
}
return
presContext
-
>
RefreshDriver
(
)
;
}
}
