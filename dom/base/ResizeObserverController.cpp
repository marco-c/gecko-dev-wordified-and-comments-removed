#
include
"
mozilla
/
dom
/
ResizeObserverController
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
ErrorEvent
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
<
limits
>
namespace
mozilla
{
namespace
dom
{
void
ResizeObserverNotificationHelper
:
:
WillRefresh
(
TimeStamp
aTime
)
{
MOZ_ASSERT
(
mOwner
"
Why
mOwner
already
dead
when
this
RefreshObserver
still
"
"
registered
?
"
)
;
mOwner
-
>
Notify
(
)
;
}
nsRefreshDriver
*
ResizeObserverNotificationHelper
:
:
GetRefreshDriver
(
)
const
{
PresShell
*
presShell
=
mOwner
-
>
GetPresShell
(
)
;
if
(
MOZ_UNLIKELY
(
!
presShell
)
)
{
return
nullptr
;
}
nsPresContext
*
presContext
=
presShell
-
>
GetPresContext
(
)
;
if
(
MOZ_UNLIKELY
(
!
presContext
)
)
{
return
nullptr
;
}
return
presContext
-
>
RefreshDriver
(
)
;
}
void
ResizeObserverNotificationHelper
:
:
Register
(
)
{
if
(
mRegistered
)
{
return
;
}
nsRefreshDriver
*
refreshDriver
=
GetRefreshDriver
(
)
;
if
(
!
refreshDriver
)
{
return
;
}
refreshDriver
-
>
AddRefreshObserver
(
this
FlushType
:
:
Display
)
;
mRegistered
=
true
;
}
void
ResizeObserverNotificationHelper
:
:
Unregister
(
)
{
if
(
!
mRegistered
)
{
return
;
}
nsRefreshDriver
*
refreshDriver
=
GetRefreshDriver
(
)
;
if
(
!
refreshDriver
)
{
return
;
}
DebugOnly
<
bool
>
rv
=
refreshDriver
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Display
)
;
MOZ_ASSERT
(
rv
"
Should
remove
the
observer
successfully
"
)
;
mRegistered
=
false
;
}
ResizeObserverNotificationHelper
:
:
~
ResizeObserverNotificationHelper
(
)
{
Unregister
(
)
;
}
void
ResizeObserverController
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
{
ImplCycleCollectionTraverse
(
aCb
mResizeObservers
"
mResizeObservers
"
)
;
}
void
ResizeObserverController
:
:
Unlink
(
)
{
mResizeObservers
.
Clear
(
)
;
}
void
ResizeObserverController
:
:
AddResizeObserver
(
ResizeObserver
*
aObserver
)
{
MOZ_ASSERT
(
aObserver
"
AddResizeObserver
(
)
should
never
be
called
with
a
null
"
"
parameter
"
)
;
mResizeObservers
.
AppendElement
(
aObserver
)
;
}
void
ResizeObserverController
:
:
Notify
(
)
{
if
(
mResizeObservers
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
Document
>
doc
(
mDocument
)
;
uint32_t
shallowestTargetDepth
=
0
;
GatherAllActiveObservations
(
shallowestTargetDepth
)
;
while
(
HasAnyActiveObservations
(
)
)
{
DebugOnly
<
uint32_t
>
oldShallowestTargetDepth
=
shallowestTargetDepth
;
shallowestTargetDepth
=
BroadcastAllActiveObservations
(
)
;
NS_ASSERTION
(
oldShallowestTargetDepth
<
shallowestTargetDepth
"
shallowestTargetDepth
should
be
getting
strictly
deeper
"
)
;
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
GatherAllActiveObservations
(
shallowestTargetDepth
)
;
}
mResizeObserverNotificationHelper
-
>
Unregister
(
)
;
if
(
HasAnySkippedObservations
(
)
)
{
RootedDictionary
<
ErrorEventInit
>
init
(
RootingCx
(
)
)
;
init
.
mMessage
.
AssignLiteral
(
"
ResizeObserver
loop
completed
with
undelivered
notifications
.
"
)
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
doc
-
>
GetWindow
(
)
-
>
GetCurrentInnerWindow
(
)
;
if
(
window
)
{
nsCOMPtr
<
nsIScriptGlobalObject
>
sgo
=
do_QueryInterface
(
window
)
;
MOZ_ASSERT
(
sgo
)
;
if
(
NS_WARN_IF
(
sgo
-
>
HandleScriptError
(
init
&
status
)
)
)
{
status
=
nsEventStatus_eIgnore
;
}
}
else
{
}
ScheduleNotification
(
)
;
}
}
void
ResizeObserverController
:
:
GatherAllActiveObservations
(
uint32_t
aDepth
)
{
nsTObserverArray
<
RefPtr
<
ResizeObserver
>
>
:
:
ForwardIterator
iter
(
mResizeObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
iter
.
GetNext
(
)
-
>
GatherActiveObservations
(
aDepth
)
;
}
}
uint32_t
ResizeObserverController
:
:
BroadcastAllActiveObservations
(
)
{
uint32_t
shallowestTargetDepth
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
;
nsTObserverArray
<
RefPtr
<
ResizeObserver
>
>
:
:
EndLimitedIterator
iter
(
mResizeObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
RefPtr
<
ResizeObserver
>
&
observer
=
iter
.
GetNext
(
)
;
uint32_t
targetDepth
=
observer
-
>
BroadcastActiveObservations
(
)
;
if
(
targetDepth
<
shallowestTargetDepth
)
{
shallowestTargetDepth
=
targetDepth
;
}
}
return
shallowestTargetDepth
;
}
bool
ResizeObserverController
:
:
HasAnyActiveObservations
(
)
const
{
nsTObserverArray
<
RefPtr
<
ResizeObserver
>
>
:
:
ForwardIterator
iter
(
mResizeObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
if
(
iter
.
GetNext
(
)
-
>
HasActiveObservations
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
ResizeObserverController
:
:
HasAnySkippedObservations
(
)
const
{
nsTObserverArray
<
RefPtr
<
ResizeObserver
>
>
:
:
ForwardIterator
iter
(
mResizeObservers
)
;
while
(
iter
.
HasMore
(
)
)
{
if
(
iter
.
GetNext
(
)
-
>
HasSkippedObservations
(
)
)
{
return
true
;
}
}
return
false
;
}
void
ResizeObserverController
:
:
ScheduleNotification
(
)
{
mResizeObserverNotificationHelper
-
>
Register
(
)
;
}
ResizeObserverController
:
:
~
ResizeObserverController
(
)
{
mResizeObserverNotificationHelper
-
>
Unregister
(
)
;
}
}
}
