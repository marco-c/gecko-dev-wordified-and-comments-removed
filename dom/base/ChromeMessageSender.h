#
ifndef
mozilla_dom_ChromeMessageSender_h
#
define
mozilla_dom_ChromeMessageSender_h
#
include
"
mozilla
/
dom
/
MessageSender
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ChromeMessageSender
final
:
public
MessageSender
{
public
:
ChromeMessageSender
(
ipc
:
:
MessageManagerCallback
*
aCallback
nsFrameMessageManager
*
aParentManager
MessageManagerFlags
aFlags
=
MessageManagerFlags
:
:
MM_NONE
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
using
nsFrameMessageManager
:
:
LoadProcessScript
;
void
LoadProcessScript
(
const
nsAString
&
aUrl
bool
aAllowDelayedLoad
mozilla
:
:
ErrorResult
&
aError
)
{
LoadScript
(
aUrl
aAllowDelayedLoad
false
aError
)
;
}
using
nsFrameMessageManager
:
:
GetDelayedProcessScripts
;
void
GetDelayedProcessScripts
(
JSContext
*
aCx
nsTArray
<
nsTArray
<
JS
:
:
Value
>
>
&
aScripts
mozilla
:
:
ErrorResult
&
aError
)
{
GetDelayedScripts
(
aCx
aScripts
aError
)
;
}
using
nsFrameMessageManager
:
:
LoadFrameScript
;
void
LoadFrameScript
(
const
nsAString
&
aUrl
bool
aAllowDelayedLoad
bool
aRunInGlobalScope
mozilla
:
:
ErrorResult
&
aError
)
{
LoadScript
(
aUrl
aAllowDelayedLoad
aRunInGlobalScope
aError
)
;
}
using
nsFrameMessageManager
:
:
GetDelayedFrameScripts
;
void
GetDelayedFrameScripts
(
JSContext
*
aCx
nsTArray
<
nsTArray
<
JS
:
:
Value
>
>
&
aScripts
mozilla
:
:
ErrorResult
&
aError
)
{
GetDelayedScripts
(
aCx
aScripts
aError
)
;
}
}
;
}
}
#
endif
