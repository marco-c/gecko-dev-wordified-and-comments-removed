#
ifndef
mozilla_dom_PostMessageEvent_h
#
define
mozilla_dom_PostMessageEvent_h
#
include
"
js
/
StructuredClone
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MaybeOneOf
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsGlobalWindowOuter
;
class
nsGlobalWindowInner
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
BrowsingContext
;
class
Event
;
class
EventTarget
;
class
PostMessageEvent
final
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
PostMessageEvent
(
BrowsingContext
*
aSource
const
nsAString
&
aCallerOrigin
nsGlobalWindowOuter
*
aTargetWindow
nsIPrincipal
*
aProvidedPrincipal
uint64_t
aCallerWindowID
nsIURI
*
aCallerURI
const
nsCString
&
aScriptLocation
const
Maybe
<
nsID
>
&
aCallerAgentClusterId
)
:
PostMessageEvent
(
aSource
aCallerOrigin
aTargetWindow
aProvidedPrincipal
aCallerWindowID
aCallerURI
aScriptLocation
false
aCallerAgentClusterId
)
{
}
PostMessageEvent
(
BrowsingContext
*
aSource
const
nsAString
&
aCallerOrigin
nsGlobalWindowOuter
*
aTargetWindow
nsIPrincipal
*
aProvidedPrincipal
uint64_t
aCallerWindowID
nsIURI
*
aCallerURI
const
nsCString
&
aScriptLocation
bool
aIsFromPrivateWindow
)
:
PostMessageEvent
(
aSource
aCallerOrigin
aTargetWindow
aProvidedPrincipal
aCallerWindowID
aCallerURI
aScriptLocation
aIsFromPrivateWindow
Nothing
(
)
)
{
}
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
const
JS
:
:
CloneDataPolicy
&
aClonePolicy
ErrorResult
&
aError
)
{
mHolder
.
construct
<
StructuredCloneHolder
>
(
StructuredCloneHolder
:
:
CloningSupported
StructuredCloneHolder
:
:
TransferringSupported
JS
:
:
StructuredCloneScope
:
:
SameProcess
)
;
mHolder
.
ref
<
StructuredCloneHolder
>
(
)
.
Write
(
aCx
aMessage
aTransfer
aClonePolicy
aError
)
;
}
void
UnpackFrom
(
const
ClonedOrErrorMessageData
&
aMessageData
)
{
if
(
aMessageData
.
type
(
)
!
=
ClonedOrErrorMessageData
:
:
TClonedMessageData
)
{
return
;
}
mHolder
.
construct
<
ipc
:
:
StructuredCloneData
>
(
)
;
mHolder
.
ref
<
ipc
:
:
StructuredCloneData
>
(
)
.
CopyFromClonedMessageDataForChild
(
aMessageData
)
;
}
void
DispatchToTargetThread
(
ErrorResult
&
aError
)
;
private
:
PostMessageEvent
(
BrowsingContext
*
aSource
const
nsAString
&
aCallerOrigin
nsGlobalWindowOuter
*
aTargetWindow
nsIPrincipal
*
aProvidedPrincipal
uint64_t
aCallerWindowID
nsIURI
*
aCallerURI
const
nsCString
&
aScriptLocation
bool
aIsFromPrivateWindow
const
Maybe
<
nsID
>
&
aCallerAgentClusterId
)
;
~
PostMessageEvent
(
)
;
void
Dispatch
(
nsGlobalWindowInner
*
aTargetWindow
Event
*
aEvent
)
;
void
DispatchError
(
JSContext
*
aCx
nsGlobalWindowInner
*
aTargetWindow
mozilla
:
:
dom
:
:
EventTarget
*
aEventTarget
)
;
RefPtr
<
BrowsingContext
>
mSource
;
nsString
mCallerOrigin
;
RefPtr
<
nsGlobalWindowOuter
>
mTargetWindow
;
nsCOMPtr
<
nsIPrincipal
>
mProvidedPrincipal
;
MaybeOneOf
<
StructuredCloneHolder
ipc
:
:
StructuredCloneData
>
mHolder
;
uint64_t
mCallerWindowID
;
const
Maybe
<
nsID
>
mCallerAgentClusterId
;
nsCOMPtr
<
nsIURI
>
mCallerURI
;
const
Maybe
<
nsCString
>
mScriptLocation
;
bool
mIsFromPrivateWindow
;
}
;
}
}
#
endif
