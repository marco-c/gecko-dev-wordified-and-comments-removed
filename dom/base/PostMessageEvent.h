#
ifndef
mozilla_dom_PostMessageEvent_h
#
define
mozilla_dom_PostMessageEvent_h
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsGlobalWindowOuter
;
class
nsGlobalWindowInner
;
class
nsIDocument
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
PostMessageEvent
final
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
PostMessageEvent
(
BrowsingContext
*
aSource
const
nsAString
&
aCallerOrigin
nsGlobalWindowOuter
*
aTargetWindow
nsIPrincipal
*
aProvidedPrincipal
uint64_t
aCallerWindowID
nsIURI
*
aCallerDocumentURI
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
ErrorResult
&
aError
)
{
mHolder
.
Write
(
aCx
aMessage
aTransfer
JS
:
:
CloneDataPolicy
(
)
aError
)
;
}
private
:
~
PostMessageEvent
(
)
;
void
Dispatch
(
nsGlobalWindowInner
*
aTargetWindow
Event
*
aEvent
)
;
void
DispatchError
(
JSContext
*
aCx
nsGlobalWindowInner
*
aTargetWindow
mozilla
:
:
dom
:
:
EventTarget
*
aEventTarget
)
;
RefPtr
<
BrowsingContext
>
mSource
;
nsString
mCallerOrigin
;
RefPtr
<
nsGlobalWindowOuter
>
mTargetWindow
;
nsCOMPtr
<
nsIPrincipal
>
mProvidedPrincipal
;
StructuredCloneHolder
mHolder
;
uint64_t
mCallerWindowID
;
nsCOMPtr
<
nsIURI
>
mCallerDocumentURI
;
}
;
}
}
#
endif
