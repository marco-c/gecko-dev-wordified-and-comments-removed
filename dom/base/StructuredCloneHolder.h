#
ifndef
mozilla_dom_StructuredCloneHolder_h
#
define
mozilla_dom_StructuredCloneHolder_h
#
include
"
js
/
StructuredClone
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
ifdef
DEBUG
#
include
"
nsIThread
.
h
"
#
endif
namespace
mozilla
{
class
ErrorResult
;
namespace
layers
{
class
Image
;
}
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
dom
{
class
StructuredCloneHolderBase
{
public
:
typedef
JS
:
:
StructuredCloneScope
StructuredCloneScope
;
StructuredCloneHolderBase
(
StructuredCloneScope
aScope
=
StructuredCloneScope
:
:
SameProcessSameThread
)
;
virtual
~
StructuredCloneHolderBase
(
)
;
virtual
JSObject
*
CustomReadHandler
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
=
0
;
virtual
bool
CustomWriteHandler
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
=
0
;
void
Clear
(
)
;
virtual
bool
CustomReadTransferHandler
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
;
virtual
bool
CustomWriteTransferHandler
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
;
virtual
void
CustomFreeTransferHandler
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
)
;
bool
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
bool
HasData
(
)
const
{
return
!
!
mBuffer
;
}
uint64_t
*
BufferData
(
)
const
{
MOZ_ASSERT
(
mBuffer
"
Write
(
)
has
never
been
called
.
"
)
;
return
mBuffer
-
>
data
(
)
;
}
size_t
BufferSize
(
)
const
{
MOZ_ASSERT
(
mBuffer
"
Write
(
)
has
never
been
called
.
"
)
;
return
mBuffer
-
>
nbytes
(
)
;
}
protected
:
nsAutoPtr
<
JSAutoStructuredCloneBuffer
>
mBuffer
;
StructuredCloneScope
mStructuredCloneScope
;
#
ifdef
DEBUG
bool
mClearCalled
;
#
endif
}
;
class
BlobImpl
;
class
MessagePort
;
class
MessagePortIdentifier
;
class
StructuredCloneHolder
:
public
StructuredCloneHolderBase
{
public
:
enum
CloningSupport
{
CloningSupported
CloningNotSupported
}
;
enum
TransferringSupport
{
TransferringSupported
TransferringNotSupported
}
;
explicit
StructuredCloneHolder
(
CloningSupport
aSupportsCloning
TransferringSupport
aSupportsTransferring
StructuredCloneScope
aStructuredCloneScope
)
;
virtual
~
StructuredCloneHolder
(
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
ErrorResult
&
aRv
)
;
void
Read
(
nsISupports
*
aParent
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
MoveBufferDataToArray
(
FallibleTArray
<
uint8_t
>
&
aArray
ErrorResult
&
aRv
)
;
bool
HasClonedDOMObjects
(
)
const
{
return
!
mBlobImplArray
.
IsEmpty
(
)
|
|
!
mClonedSurfaces
.
IsEmpty
(
)
;
}
nsTArray
<
RefPtr
<
BlobImpl
>
>
&
BlobImpls
(
)
{
MOZ_ASSERT
(
mSupportsCloning
"
Blobs
cannot
be
taken
/
set
if
cloning
is
not
supported
.
"
)
;
return
mBlobImplArray
;
}
StructuredCloneScope
CloneScope
(
)
const
{
return
mStructuredCloneScope
;
}
nsISupports
*
ParentDuringRead
(
)
const
{
return
mParent
;
}
nsTArray
<
RefPtr
<
MessagePort
>
>
&
&
TakeTransferredPorts
(
)
{
MOZ_ASSERT
(
mSupportsTransferring
)
;
return
Move
(
mTransferredPorts
)
;
}
nsTArray
<
MessagePortIdentifier
>
&
PortIdentifiers
(
)
const
{
MOZ_ASSERT
(
mSupportsTransferring
)
;
return
mPortIdentifiers
;
}
nsTArray
<
RefPtr
<
gfx
:
:
DataSourceSurface
>
>
&
GetSurfaces
(
)
{
return
mClonedSurfaces
;
}
virtual
JSObject
*
CustomReadHandler
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
override
;
virtual
bool
CustomWriteHandler
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
override
;
virtual
bool
CustomReadTransferHandler
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
override
;
virtual
bool
CustomWriteTransferHandler
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
override
;
virtual
void
CustomFreeTransferHandler
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
override
;
static
JSObject
*
ReadFullySerializableObjects
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
)
;
static
bool
WriteFullySerializableObjects
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
protected
:
void
ReadFromBuffer
(
nsISupports
*
aParent
JSContext
*
aCx
uint64_t
*
aBuffer
size_t
aBufferLength
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
ReadFromBuffer
(
nsISupports
*
aParent
JSContext
*
aCx
uint64_t
*
aBuffer
size_t
aBufferLength
uint32_t
aAlgorithmVersion
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
FreeBuffer
(
uint64_t
*
aBuffer
size_t
aBufferLength
)
;
bool
mSupportsCloning
;
bool
mSupportsTransferring
;
nsTArray
<
RefPtr
<
BlobImpl
>
>
mBlobImplArray
;
nsTArray
<
RefPtr
<
gfx
:
:
DataSourceSurface
>
>
mClonedSurfaces
;
nsISupports
*
MOZ_NON_OWNING_REF
mParent
;
nsTArray
<
RefPtr
<
MessagePort
>
>
mTransferredPorts
;
mutable
nsTArray
<
MessagePortIdentifier
>
mPortIdentifiers
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIThread
>
mCreationThread
;
#
endif
}
;
}
}
#
endif
