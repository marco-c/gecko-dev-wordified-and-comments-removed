#
ifndef
mozilla_dom_shadowroot_h__
#
define
mozilla_dom_shadowroot_h__
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
DocumentOrShadowRoot
.
h
"
#
include
"
mozilla
/
ServoStyleRuleMap
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIdentifierMapEntry
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsAtom
;
class
nsIContent
;
class
nsXBLPrototypeBinding
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
Element
;
class
ShadowRoot
final
:
public
DocumentFragment
public
DocumentOrShadowRoot
public
nsStubMutationObserver
{
public
:
static
ShadowRoot
*
FromNode
(
nsINode
*
aNode
)
{
return
aNode
-
>
IsShadowRoot
(
)
?
static_cast
<
ShadowRoot
*
>
(
aNode
)
:
nullptr
;
}
static
const
ShadowRoot
*
FromNode
(
const
nsINode
*
aNode
)
{
return
aNode
-
>
IsShadowRoot
(
)
?
static_cast
<
const
ShadowRoot
*
>
(
aNode
)
:
nullptr
;
}
static
ShadowRoot
*
FromNodeOrNull
(
nsINode
*
aNode
)
{
return
aNode
?
FromNode
(
aNode
)
:
nullptr
;
}
static
const
ShadowRoot
*
FromNodeOrNull
(
const
nsINode
*
aNode
)
{
return
aNode
?
FromNode
(
aNode
)
:
nullptr
;
}
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ShadowRoot
DocumentFragment
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
ShadowRoot
(
Element
*
aElement
ShadowRootMode
aMode
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
Element
*
Host
(
)
const
{
MOZ_ASSERT
(
GetHost
(
)
"
ShadowRoot
always
has
a
host
how
did
we
create
"
"
this
ShadowRoot
?
"
)
;
return
GetHost
(
)
;
}
ShadowRootMode
Mode
(
)
const
{
return
mMode
;
}
bool
IsClosed
(
)
const
{
return
mMode
=
=
ShadowRootMode
:
:
Closed
;
}
void
InsertSheet
(
StyleSheet
*
aSheet
nsIContent
*
aLinkingContent
)
;
void
RemoveSheet
(
StyleSheet
*
aSheet
)
;
StyleSheetList
*
StyleSheets
(
)
{
return
&
DocumentOrShadowRoot
:
:
EnsureDOMStyleSheets
(
)
;
}
void
CloneInternalDataFrom
(
ShadowRoot
*
aOther
)
;
private
:
bool
MaybeReassignElement
(
Element
*
aElement
const
nsAttrValue
*
aOldValue
)
;
const
HTMLSlotElement
*
AssignSlotFor
(
nsIContent
*
aContent
)
;
const
HTMLSlotElement
*
UnassignSlotFor
(
nsIContent
*
aContent
const
nsAString
&
aSlotName
)
;
public
:
void
AddSlot
(
HTMLSlotElement
*
aSlot
)
;
void
RemoveSlot
(
HTMLSlotElement
*
aSlot
)
;
const
RawServoAuthorStyles
*
ServoStyles
(
)
const
{
return
mServoStyles
.
get
(
)
;
}
RawServoAuthorStyles
*
ServoStyles
(
)
{
return
mServoStyles
.
get
(
)
;
}
void
StyleSheetChanged
(
)
;
mozilla
:
:
ServoStyleRuleMap
&
ServoStyleRuleMap
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
AddToIdTable
(
Element
*
aElement
nsAtom
*
aId
)
;
void
RemoveFromIdTable
(
Element
*
aElement
nsAtom
*
aId
)
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementById
;
Element
*
GetActiveElement
(
)
;
void
GetInnerHTML
(
nsAString
&
aInnerHTML
)
;
void
SetInnerHTML
(
const
nsAString
&
aInnerHTML
ErrorResult
&
aError
)
;
bool
IsComposedDocParticipant
(
)
const
{
return
mIsComposedDocParticipant
;
}
void
SetIsComposedDocParticipant
(
bool
aIsComposedDocParticipant
)
{
mIsComposedDocParticipant
=
aIsComposedDocParticipant
;
}
nsresult
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
protected
:
virtual
~
ShadowRoot
(
)
;
void
SyncServoStyles
(
)
;
const
ShadowRootMode
mMode
;
UniquePtr
<
RawServoAuthorStyles
>
mServoStyles
;
UniquePtr
<
mozilla
:
:
ServoStyleRuleMap
>
mStyleRuleMap
;
using
SlotArray
=
AutoTArray
<
HTMLSlotElement
*
1
>
;
nsClassHashtable
<
nsStringHashKey
SlotArray
>
mSlotMap
;
bool
mIsComposedDocParticipant
;
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
}
;
}
}
#
endif
