#
ifndef
mozilla_dom_shadowroot_h__
#
define
mozilla_dom_shadowroot_h__
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
DocumentOrShadowRoot
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIdentifierMapEntry
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsAtom
;
class
nsIContent
;
class
nsXBLPrototypeBinding
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
Element
;
class
ShadowRoot
final
:
public
DocumentFragment
public
DocumentOrShadowRoot
public
nsStubMutationObserver
{
public
:
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ShadowRoot
DocumentFragment
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
ShadowRoot
(
Element
*
aElement
bool
aClosed
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
nsXBLPrototypeBinding
*
aProtoBinding
)
;
Element
*
Host
(
)
;
ShadowRootMode
Mode
(
)
const
{
return
mMode
;
}
bool
IsClosed
(
)
const
{
return
mMode
=
=
ShadowRootMode
:
:
Closed
;
}
void
InsertSheet
(
StyleSheet
*
aSheet
nsIContent
*
aLinkingContent
)
;
void
RemoveSheet
(
StyleSheet
*
aSheet
)
;
bool
ApplyAuthorStyles
(
)
;
void
SetApplyAuthorStyles
(
bool
aApplyAuthorStyles
)
;
StyleSheetList
*
StyleSheets
(
)
{
return
&
DocumentOrShadowRoot
:
:
EnsureDOMStyleSheets
(
)
;
}
void
DistributeAllNodes
(
)
;
private
:
bool
MaybeReassignElement
(
Element
*
aElement
const
nsAttrValue
*
aOldValue
)
;
const
HTMLSlotElement
*
AssignSlotFor
(
nsIContent
*
aContent
)
;
const
HTMLSlotElement
*
UnassignSlotFor
(
nsIContent
*
aContent
const
nsAString
&
aSlotName
)
;
void
DistributionChanged
(
)
;
bool
IsPooledNode
(
nsIContent
*
aChild
)
const
;
public
:
void
AddSlot
(
HTMLSlotElement
*
aSlot
)
;
void
RemoveSlot
(
HTMLSlotElement
*
aSlot
)
;
void
SetInsertionPointChanged
(
)
{
mInsertionPointChanged
=
true
;
}
void
SetAssociatedBinding
(
nsXBLBinding
*
aBinding
)
{
mAssociatedBinding
=
aBinding
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
ShadowRoot
*
FromNode
(
nsINode
*
aNode
)
;
void
AddToIdTable
(
Element
*
aElement
nsAtom
*
aId
)
;
void
RemoveFromIdTable
(
Element
*
aElement
nsAtom
*
aId
)
;
using
mozilla
:
:
dom
:
:
DocumentOrShadowRoot
:
:
GetElementById
;
void
GetInnerHTML
(
nsAString
&
aInnerHTML
)
;
void
SetInnerHTML
(
const
nsAString
&
aInnerHTML
ErrorResult
&
aError
)
;
void
StyleSheetChanged
(
)
;
bool
IsComposedDocParticipant
(
)
{
return
mIsComposedDocParticipant
;
}
void
SetIsComposedDocParticipant
(
bool
aIsComposedDocParticipant
)
{
mIsComposedDocParticipant
=
aIsComposedDocParticipant
;
}
nsresult
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
protected
:
virtual
~
ShadowRoot
(
)
;
ShadowRootMode
mMode
;
nsClassHashtable
<
nsStringHashKey
nsTArray
<
mozilla
:
:
dom
:
:
HTMLSlotElement
*
>
>
mSlotMap
;
nsXBLPrototypeBinding
*
mProtoBinding
;
RefPtr
<
nsXBLBinding
>
mAssociatedBinding
;
bool
mInsertionPointChanged
;
bool
mIsComposedDocParticipant
;
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
}
;
}
}
#
endif
