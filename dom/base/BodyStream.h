#
ifndef
mozilla_dom_BodyStream_h
#
define
mozilla_dom_BodyStream_h
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
ByteStreamHelpers
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIGlobalObject
;
class
nsIInputStream
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
BodyStream
;
class
StrongWorkerRef
;
class
ReadableStream
;
class
ReadableStreamController
;
class
BodyStreamUnderlyingSourceAlgorithms
;
class
BodyStreamHolder
:
public
nsISupports
{
friend
class
BodyStream
;
friend
class
BodyStreamUnderlyingSourceAlgorithms
;
friend
class
BodyStreamUnderlyingSourceErrorCallbackHelper
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
BodyStreamHolder
)
BodyStreamHolder
(
)
;
virtual
void
NullifyStream
(
)
{
mReadableStreamBody
=
nullptr
;
}
virtual
void
MarkAsRead
(
)
{
}
void
SetReadableStreamBody
(
ReadableStream
*
aBody
)
{
mReadableStreamBody
=
aBody
;
}
ReadableStream
*
GetReadableStreamBody
(
)
{
return
mReadableStreamBody
;
}
protected
:
virtual
~
BodyStreamHolder
(
)
=
default
;
RefPtr
<
ReadableStream
>
mReadableStreamBody
;
private
:
void
StoreBodyStream
(
BodyStream
*
aBodyStream
)
;
already_AddRefed
<
BodyStream
>
TakeBodyStream
(
)
{
MOZ_ASSERT_IF
(
mStreamCreated
mBodyStream
)
;
return
mBodyStream
.
forget
(
)
;
}
BodyStream
*
GetBodyStream
(
)
{
return
mBodyStream
;
}
RefPtr
<
BodyStream
>
mBodyStream
;
#
ifdef
DEBUG
bool
mStreamCreated
=
false
;
#
endif
}
;
class
BodyStream
final
:
public
nsIInputStreamCallback
public
nsIObserver
public
nsSupportsWeakReference
{
friend
class
BodyStreamHolder
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIOBSERVER
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
void
Create
(
JSContext
*
aCx
BodyStreamHolder
*
aStreamHolder
nsIGlobalObject
*
aGlobal
nsIInputStream
*
aInputStream
ErrorResult
&
aRv
)
;
void
Close
(
)
;
static
nsresult
RetrieveInputStream
(
BodyStreamHolder
*
aStream
nsIInputStream
*
*
aInputStream
)
;
private
:
BodyStream
(
nsIGlobalObject
*
aGlobal
BodyStreamHolder
*
aStreamHolder
nsIInputStream
*
aInputStream
)
;
~
BodyStream
(
)
;
public
:
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
;
void
CloseInputAndReleaseObjects
(
)
;
private
:
void
WriteIntoReadRequestBuffer
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JSObject
*
>
aBuffer
uint32_t
aLength
uint32_t
*
aByteWritten
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
EnqueueChunkWithSizeIntoStream
(
JSContext
*
aCx
ReadableStream
*
aStream
uint64_t
aAvailableData
ErrorResult
&
aRv
)
;
void
ErrorPropagation
(
JSContext
*
aCx
ReadableStream
*
aStream
nsresult
aError
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
CloseAndReleaseObjects
(
JSContext
*
aCx
ReadableStream
*
aStream
)
;
class
WorkerShutdown
;
void
ReleaseObjects
(
)
;
enum
State
{
eInitializing
eInitialized
eClosed
}
;
State
mState
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
BodyStreamHolder
>
mStreamHolder
;
nsCOMPtr
<
nsIEventTarget
>
mOwningEventTarget
;
RefPtr
<
Promise
>
mPullPromise
;
nsCOMPtr
<
nsIInputStream
>
mOriginalInputStream
;
nsCOMPtr
<
nsIAsyncInputStream
>
mInputStream
;
RefPtr
<
StrongWorkerRef
>
mWorkerRef
;
RefPtr
<
StrongWorkerRef
>
mAsyncWaitWorkerRef
;
}
;
}
}
#
endif
