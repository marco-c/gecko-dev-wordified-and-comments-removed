#
ifndef
StorageAccessPermissionRequest_h_
#
define
StorageAccessPermissionRequest_h_
#
include
"
nsContentPermissionHelper
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
<
functional
>
class
nsPIDOMWindowInner
;
namespace
mozilla
:
:
dom
{
class
StorageAccessPermissionRequest
final
:
public
ContentPermissionRequestBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
StorageAccessPermissionRequest
ContentPermissionRequestBase
)
NS_IMETHOD
Cancel
(
void
)
override
;
NS_IMETHOD
Allow
(
JS
:
:
Handle
<
JS
:
:
Value
>
choices
)
override
;
NS_IMETHOD
GetTypes
(
nsIArray
*
*
aTypes
)
override
;
using
AllowCallback
=
std
:
:
function
<
void
(
)
>
;
using
CancelCallback
=
std
:
:
function
<
void
(
)
>
;
static
already_AddRefed
<
StorageAccessPermissionRequest
>
Create
(
nsPIDOMWindowInner
*
aWindow
AllowCallback
&
&
aAllowCallback
CancelCallback
&
&
aCancelCallback
)
;
static
already_AddRefed
<
StorageAccessPermissionRequest
>
Create
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
AllowCallback
&
&
aAllowCallback
CancelCallback
&
&
aCancelCallback
)
;
static
already_AddRefed
<
StorageAccessPermissionRequest
>
Create
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
const
Maybe
<
nsCString
>
&
aTopLevelBaseDomain
bool
aFrameOnly
AllowCallback
&
&
aAllowCallback
CancelCallback
&
&
aCancelCallback
)
;
using
AutoGrantDelayPromise
=
MozPromise
<
bool
bool
true
>
;
RefPtr
<
AutoGrantDelayPromise
>
MaybeDelayAutomaticGrants
(
)
;
private
:
StorageAccessPermissionRequest
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aNodePrincipal
const
Maybe
<
nsCString
>
&
aTopLevelBaseDomain
bool
aFrameOnly
AllowCallback
&
&
aAllowCallback
CancelCallback
&
&
aCancelCallback
)
;
~
StorageAccessPermissionRequest
(
)
{
Cancel
(
)
;
}
unsigned
CalculateSimulatedDelay
(
)
;
AllowCallback
mAllowCallback
;
CancelCallback
mCancelCallback
;
nsTArray
<
nsString
>
mOptions
;
nsTArray
<
PermissionRequest
>
mPermissionRequests
;
bool
mCallbackCalled
;
}
;
}
#
endif
