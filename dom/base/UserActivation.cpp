#
include
"
mozilla
/
dom
/
UserActivation
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
static
int32_t
sUserInputEventDepth
=
0
;
static
int32_t
sUserKeyboardEventDepth
=
0
;
static
TimeStamp
sHandlingInputStart
;
static
TimeStamp
sLatestUserInputStart
;
}
bool
UserActivation
:
:
IsHandlingUserInput
(
)
{
return
sUserInputEventDepth
>
0
;
}
bool
UserActivation
:
:
IsHandlingKeyboardInput
(
)
{
return
sUserKeyboardEventDepth
>
0
;
}
bool
UserActivation
:
:
IsUserInteractionEvent
(
const
WidgetEvent
*
aEvent
)
{
if
(
!
aEvent
-
>
IsTrusted
(
)
)
{
return
false
;
}
switch
(
aEvent
-
>
mMessage
)
{
case
eKeyPress
:
case
eKeyDown
:
case
eKeyUp
:
return
aEvent
-
>
AsKeyboardEvent
(
)
-
>
CanTreatAsUserInput
(
)
;
case
eFormChange
:
case
eMouseClick
:
case
eMouseDown
:
case
eMouseUp
:
case
ePointerDown
:
case
ePointerUp
:
case
eTouchStart
:
case
eTouchEnd
:
return
true
;
default
:
return
false
;
}
}
void
UserActivation
:
:
StartHandlingUserInput
(
EventMessage
aMessage
)
{
+
+
sUserInputEventDepth
;
if
(
sUserInputEventDepth
=
=
1
)
{
sLatestUserInputStart
=
sHandlingInputStart
=
TimeStamp
:
:
Now
(
)
;
}
if
(
WidgetEvent
:
:
IsKeyEventMessage
(
aMessage
)
)
{
+
+
sUserKeyboardEventDepth
;
}
}
void
UserActivation
:
:
StopHandlingUserInput
(
EventMessage
aMessage
)
{
-
-
sUserInputEventDepth
;
if
(
sUserInputEventDepth
=
=
0
)
{
sHandlingInputStart
=
TimeStamp
(
)
;
}
if
(
WidgetEvent
:
:
IsKeyEventMessage
(
aMessage
)
)
{
-
-
sUserKeyboardEventDepth
;
}
}
TimeStamp
UserActivation
:
:
GetHandlingInputStart
(
)
{
return
sHandlingInputStart
;
}
TimeStamp
UserActivation
:
:
LatestUserInputStart
(
)
{
return
sLatestUserInputStart
;
}
AutoHandlingUserInputStatePusher
:
:
AutoHandlingUserInputStatePusher
(
bool
aIsHandlingUserInput
WidgetEvent
*
aEvent
)
:
mMessage
(
aEvent
?
aEvent
-
>
mMessage
:
eVoidEvent
)
mIsHandlingUserInput
(
aIsHandlingUserInput
)
{
if
(
!
aIsHandlingUserInput
)
{
return
;
}
UserActivation
:
:
StartHandlingUserInput
(
mMessage
)
;
}
AutoHandlingUserInputStatePusher
:
:
~
AutoHandlingUserInputStatePusher
(
)
{
if
(
!
mIsHandlingUserInput
)
{
return
;
}
UserActivation
:
:
StopHandlingUserInput
(
mMessage
)
;
}
}
}
