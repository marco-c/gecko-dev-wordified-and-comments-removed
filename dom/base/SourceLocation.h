#
ifndef
mozilla_SourceLocation_h
#
define
mozilla_SourceLocation_h
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsCOMPtr
.
h
"
struct
JSContext
;
class
nsIURI
;
namespace
mozilla
{
struct
SourceLocation
{
mozilla
:
:
Variant
<
nsCString
nsCOMPtr
<
nsIURI
>
>
mResource
{
VoidCString
(
)
}
;
uint32_t
mLine
=
0
;
uint32_t
mColumn
=
1
;
SourceLocation
(
)
;
explicit
SourceLocation
(
nsCString
&
&
uint32_t
aLine
=
0
uint32_t
aCol
=
1
)
;
explicit
SourceLocation
(
nsCOMPtr
<
nsIURI
>
&
&
uint32_t
aLine
=
0
uint32_t
aCol
=
1
)
;
~
SourceLocation
(
)
;
bool
IsEmpty
(
)
const
{
return
mResource
.
is
<
nsCString
>
(
)
?
mResource
.
as
<
nsCString
>
(
)
.
IsEmpty
(
)
:
!
mResource
.
as
<
nsCOMPtr
<
nsIURI
>
>
(
)
;
}
explicit
operator
bool
(
)
const
{
return
!
IsEmpty
(
)
;
}
}
;
struct
JSCallingLocation
:
SourceLocation
{
const
nsCString
&
FileName
(
)
const
{
return
mResource
.
as
<
nsCString
>
(
)
;
}
static
JSCallingLocation
Get
(
)
;
static
JSCallingLocation
Get
(
JSContext
*
)
;
class
MOZ_STACK_CLASS
AutoFallback
{
public
:
explicit
AutoFallback
(
const
JSCallingLocation
*
aFallback
)
:
mOldFallback
(
GetFallback
(
)
)
{
SetFallback
(
aFallback
)
;
}
~
AutoFallback
(
)
{
SetFallback
(
mOldFallback
)
;
}
private
:
const
JSCallingLocation
*
mOldFallback
;
}
;
private
:
static
const
JSCallingLocation
*
GetFallback
(
)
;
static
void
SetFallback
(
const
JSCallingLocation
*
)
;
}
;
}
#
endif
