#
include
"
WindowOrientationObserver
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
using
namespace
mozilla
:
:
dom
;
WindowOrientationObserver
:
:
WindowOrientationObserver
(
nsGlobalWindowInner
*
aGlobalWindow
)
:
mWindow
(
aGlobalWindow
)
{
MOZ_ASSERT
(
aGlobalWindow
)
;
hal
:
:
RegisterScreenConfigurationObserver
(
this
)
;
hal
:
:
ScreenConfiguration
config
;
hal
:
:
GetCurrentScreenConfiguration
(
&
config
)
;
mAngle
=
config
.
angle
(
)
;
}
WindowOrientationObserver
:
:
~
WindowOrientationObserver
(
)
{
hal
:
:
UnregisterScreenConfigurationObserver
(
this
)
;
}
void
WindowOrientationObserver
:
:
Notify
(
const
mozilla
:
:
hal
:
:
ScreenConfiguration
&
aConfiguration
)
{
uint16_t
currentAngle
=
aConfiguration
.
angle
(
)
;
if
(
mAngle
!
=
currentAngle
&
&
mWindow
-
>
AsInner
(
)
-
>
IsCurrentInnerWindow
(
)
)
{
mAngle
=
currentAngle
;
mWindow
-
>
GetOuterWindow
(
)
-
>
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
orientationchange
"
)
)
;
}
}
int16_t
WindowOrientationObserver
:
:
OrientationAngle
(
)
{
hal
:
:
ScreenConfiguration
config
;
hal
:
:
GetCurrentScreenConfiguration
(
&
config
)
;
int16_t
angle
=
static_cast
<
int16_t
>
(
config
.
angle
(
)
)
;
return
angle
<
=
180
?
angle
:
angle
-
360
;
}
