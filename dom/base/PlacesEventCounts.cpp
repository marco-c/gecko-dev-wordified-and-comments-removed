#
include
"
PlacesEventCounts
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
PlacesEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
PlacesEventCounts
.
h
"
#
include
"
mozilla
/
dom
/
PlacesObserversBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0
(
PlacesEventCounts
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
PlacesEventCounts
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
PlacesEventCounts
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PlacesEventCounts
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
PlacesEventCounts
:
:
PlacesEventCounts
(
)
{
ErrorResult
rv
;
for
(
auto
eventType
:
MakeWebIDLEnumeratedRange
<
PlacesEventType
>
(
)
)
{
PlacesEventCounts_Binding
:
:
MaplikeHelpers
:
:
Set
(
this
NS_ConvertUTF8toUTF16
(
GetEnumString
(
eventType
)
)
0
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
return
;
}
}
}
nsresult
PlacesEventCounts
:
:
Increment
(
PlacesEventType
aEventType
)
{
ErrorResult
rv
;
nsAutoCString
eventName
(
GetEnumString
(
aEventType
)
)
;
uint64_t
count
=
PlacesEventCounts_Binding
:
:
MaplikeHelpers
:
:
Get
(
this
NS_ConvertUTF8toUTF16
(
eventName
)
rv
)
;
if
(
MOZ_UNLIKELY
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
PlacesEventCounts_Binding
:
:
MaplikeHelpers
:
:
Set
(
this
NS_ConvertUTF8toUTF16
(
eventName
)
+
+
count
rv
)
;
if
(
MOZ_UNLIKELY
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
return
NS_OK
;
}
JSObject
*
PlacesEventCounts
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PlacesEventCounts_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
