#
ifndef
nsPluginArray_h___
#
define
nsPluginArray_h___
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Array
.
h
"
class
nsPIDOMWindowInner
;
class
nsPluginElement
;
class
nsMimeTypeArray
;
class
nsMimeType
;
class
nsPluginArray
final
:
public
nsSupportsWeakReference
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
nsPluginArray
)
explicit
nsPluginArray
(
nsPIDOMWindowInner
*
aWindow
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsMimeTypeArray
*
MimeTypeArray
(
)
{
return
mMimeTypeArray
;
}
uint32_t
Length
(
)
{
return
ForceNoPlugins
(
)
?
0
:
std
:
:
size
(
mPlugins
)
;
}
nsPluginElement
*
Item
(
uint32_t
aIndex
)
{
bool
unused
;
return
IndexedGetter
(
aIndex
unused
)
;
}
nsPluginElement
*
NamedItem
(
const
nsAString
&
aName
)
{
bool
unused
;
return
NamedGetter
(
aName
unused
)
;
}
nsPluginElement
*
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
;
nsPluginElement
*
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aRetval
)
;
void
Refresh
(
)
{
}
private
:
virtual
~
nsPluginArray
(
)
;
bool
ForceNoPlugins
(
)
;
RefPtr
<
nsMimeTypeArray
>
mMimeTypeArray
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
mozilla
:
:
Array
<
RefPtr
<
nsPluginElement
>
5
>
mPlugins
;
}
;
class
nsPluginElement
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
nsPluginElement
)
explicit
nsPluginElement
(
nsPluginArray
*
aPluginArray
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
)
;
nsPluginArray
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetDescription
(
nsString
&
retval
)
const
{
retval
=
kDescription
;
}
void
GetFilename
(
nsString
&
retval
)
const
{
retval
=
kFilename
;
}
void
GetName
(
nsString
&
retval
)
const
{
retval
=
mName
;
}
const
nsString
&
Name
(
)
const
{
return
mName
;
}
nsMimeType
*
Item
(
uint32_t
index
)
{
bool
unused
;
return
IndexedGetter
(
index
unused
)
;
}
nsMimeType
*
NamedItem
(
const
nsAString
&
name
)
{
bool
unused
;
return
NamedGetter
(
name
unused
)
;
}
uint32_t
Length
(
)
;
nsMimeType
*
IndexedGetter
(
uint32_t
index
bool
&
found
)
;
nsMimeType
*
NamedGetter
(
const
nsAString
&
name
bool
&
found
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
retval
)
;
protected
:
virtual
~
nsPluginElement
(
)
=
default
;
nsMimeTypeArray
*
MimeTypeArray
(
)
{
return
mPluginArray
-
>
MimeTypeArray
(
)
;
}
static
constexpr
nsLiteralString
kDescription
=
u
"
Portable
Document
Format
"
_ns
;
static
constexpr
nsLiteralString
kFilename
=
u
"
internal
-
pdf
-
viewer
"
_ns
;
RefPtr
<
nsPluginArray
>
mPluginArray
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsString
mName
;
}
;
#
endif
