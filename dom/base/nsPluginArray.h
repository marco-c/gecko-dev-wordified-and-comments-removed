#
ifndef
nsPluginArray_h___
#
define
nsPluginArray_h___
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
class
nsPluginElement
;
class
nsMimeType
;
class
nsIInternalPluginTag
;
class
nsPluginArray
final
:
public
nsIObserver
public
nsSupportsWeakReference
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsPluginArray
nsIObserver
)
NS_DECL_NSIOBSERVER
explicit
nsPluginArray
(
nsPIDOMWindowInner
*
aWindow
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Init
(
)
;
void
Invalidate
(
)
;
void
GetMimeTypes
(
nsTArray
<
RefPtr
<
nsMimeType
>
>
&
aMimeTypes
)
;
void
GetCTPMimeTypes
(
nsTArray
<
RefPtr
<
nsMimeType
>
>
&
aMimeTypes
)
;
static
void
NotifyHiddenPluginTouched
(
nsPluginElement
*
aElement
)
;
nsPluginElement
*
Item
(
uint32_t
aIndex
)
;
nsPluginElement
*
NamedItem
(
const
nsAString
&
aName
)
;
void
Refresh
(
bool
aReloadDocuments
)
;
nsPluginElement
*
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
;
nsPluginElement
*
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
uint32_t
Length
(
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aRetval
)
;
private
:
virtual
~
nsPluginArray
(
)
;
bool
AllowPlugins
(
)
const
;
void
EnsurePlugins
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsTArray
<
RefPtr
<
nsPluginElement
>
>
mPlugins
;
nsTArray
<
RefPtr
<
nsPluginElement
>
>
mCTPPlugins
;
}
;
class
nsPluginElement
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
nsPluginElement
)
nsPluginElement
(
nsPIDOMWindowInner
*
aWindow
nsIInternalPluginTag
*
aPluginTag
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIInternalPluginTag
*
PluginTag
(
)
const
{
return
mPluginTag
;
}
void
GetDescription
(
nsString
&
retval
)
const
;
void
GetFilename
(
nsString
&
retval
)
const
;
void
GetVersion
(
nsString
&
retval
)
const
;
void
GetName
(
nsString
&
retval
)
const
;
nsMimeType
*
Item
(
uint32_t
index
)
;
nsMimeType
*
NamedItem
(
const
nsAString
&
name
)
;
nsMimeType
*
IndexedGetter
(
uint32_t
index
bool
&
found
)
;
nsMimeType
*
NamedGetter
(
const
nsAString
&
name
bool
&
found
)
;
uint32_t
Length
(
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
retval
)
;
nsTArray
<
RefPtr
<
nsMimeType
>
>
&
MimeTypes
(
)
;
protected
:
~
nsPluginElement
(
)
;
void
EnsurePluginMimeTypes
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsCOMPtr
<
nsIInternalPluginTag
>
mPluginTag
;
nsTArray
<
RefPtr
<
nsMimeType
>
>
mMimeTypes
;
}
;
#
endif
