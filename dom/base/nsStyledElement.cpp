#
include
"
nsStyledElement
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
mozilla
/
InternalMutationEvent
.
h
"
#
include
"
nsDOMCSSDeclaration
.
h
"
#
include
"
nsDOMCSSAttrDeclaration
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
mozilla
/
DeclarationBlockInlines
.
h
"
#
include
"
nsCSSParser
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsIDOMMutationEvent
.
h
"
#
include
"
nsXULElement
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsStyleUtil
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_QUERY_INTERFACE_CYCLE_COLLECTION_INHERITED
(
nsStyledElement
nsStyledElementBase
nsStyledElement
)
bool
nsStyledElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsIAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
style
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
{
ParseStyleAttribute
(
aValue
aResult
false
)
;
return
true
;
}
return
nsStyledElementBase
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aResult
)
;
}
nsresult
nsStyledElement
:
:
BeforeSetAttr
(
int32_t
aNamespaceID
nsIAtom
*
aName
const
nsAttrValueOrString
*
aValue
bool
aNotify
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aName
=
=
nsGkAtoms
:
:
style
)
{
if
(
aValue
)
{
SetMayHaveStyle
(
)
;
}
}
}
return
nsStyledElementBase
:
:
BeforeSetAttr
(
aNamespaceID
aName
aValue
aNotify
)
;
}
nsresult
nsStyledElement
:
:
SetInlineStyleDeclaration
(
DeclarationBlock
*
aDeclaration
const
nsAString
*
aSerialized
bool
aNotify
)
{
SetMayHaveStyle
(
)
;
bool
modification
=
false
;
nsAttrValue
oldValue
;
bool
oldValueSet
=
false
;
bool
hasListeners
=
aNotify
&
&
nsContentUtils
:
:
HasMutationListeners
(
this
NS_EVENT_BITS_MUTATION_ATTRMODIFIED
this
)
;
if
(
hasListeners
)
{
nsAutoString
oldValueStr
;
modification
=
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
style
oldValueStr
)
;
if
(
modification
)
{
oldValue
.
SetTo
(
oldValueStr
)
;
oldValueSet
=
true
;
}
}
else
if
(
aNotify
&
&
IsInUncomposedDoc
(
)
)
{
modification
=
!
!
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
style
)
;
}
nsAttrValue
attrValue
(
do_AddRef
(
aDeclaration
)
aSerialized
)
;
uint8_t
modType
=
modification
?
static_cast
<
uint8_t
>
(
nsIDOMMutationEvent
:
:
MODIFICATION
)
:
static_cast
<
uint8_t
>
(
nsIDOMMutationEvent
:
:
ADDITION
)
;
nsIDocument
*
document
=
GetComposedDoc
(
)
;
mozAutoDocUpdate
updateBatch
(
document
UPDATE_CONTENT_MODEL
aNotify
)
;
return
SetAttrAndNotify
(
kNameSpaceID_None
nsGkAtoms
:
:
style
nullptr
oldValueSet
?
&
oldValue
:
nullptr
attrValue
modType
hasListeners
aNotify
kDontCallAfterSetAttr
document
updateBatch
)
;
}
nsICSSDeclaration
*
nsStyledElement
:
:
Style
(
)
{
Element
:
:
nsDOMSlots
*
slots
=
DOMSlots
(
)
;
if
(
!
slots
-
>
mStyle
)
{
ReparseStyleAttribute
(
true
false
)
;
slots
-
>
mStyle
=
new
nsDOMCSSAttributeDeclaration
(
this
false
)
;
SetMayHaveStyle
(
)
;
}
return
slots
-
>
mStyle
;
}
nsresult
nsStyledElement
:
:
ReparseStyleAttribute
(
bool
aForceInDataDoc
bool
aForceIfAlreadyParsed
)
{
if
(
!
MayHaveStyle
(
)
)
{
return
NS_OK
;
}
const
nsAttrValue
*
oldVal
=
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
style
)
;
if
(
oldVal
&
&
(
aForceIfAlreadyParsed
|
|
oldVal
-
>
Type
(
)
!
=
nsAttrValue
:
:
eCSSDeclaration
)
)
{
nsAttrValue
attrValue
;
nsAutoString
stringValue
;
oldVal
-
>
ToString
(
stringValue
)
;
ParseStyleAttribute
(
stringValue
attrValue
aForceInDataDoc
)
;
bool
oldValueSet
;
nsresult
rv
=
mAttrsAndChildren
.
SetAndSwapAttr
(
nsGkAtoms
:
:
style
attrValue
&
oldValueSet
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
void
nsStyledElement
:
:
NodeInfoChanged
(
nsIDocument
*
aOldDoc
)
{
nsStyledElementBase
:
:
NodeInfoChanged
(
aOldDoc
)
;
if
(
OwnerDoc
(
)
-
>
GetStyleBackendType
(
)
!
=
aOldDoc
-
>
GetStyleBackendType
(
)
)
{
ReparseStyleAttribute
(
false
true
)
;
}
}
nsICSSDeclaration
*
nsStyledElement
:
:
GetExistingStyle
(
)
{
Element
:
:
nsDOMSlots
*
slots
=
GetExistingDOMSlots
(
)
;
if
(
!
slots
)
{
return
nullptr
;
}
return
slots
-
>
mStyle
;
}
void
nsStyledElement
:
:
ParseStyleAttribute
(
const
nsAString
&
aValue
nsAttrValue
&
aResult
bool
aForceInDataDoc
)
{
nsIDocument
*
doc
=
OwnerDoc
(
)
;
bool
isNativeAnon
=
IsInNativeAnonymousSubtree
(
)
;
if
(
!
isNativeAnon
&
&
!
nsStyleUtil
:
:
CSPAllowsInlineStyle
(
nullptr
NodePrincipal
(
)
doc
-
>
GetDocumentURI
(
)
0
aValue
nullptr
)
)
return
;
if
(
aForceInDataDoc
|
|
!
doc
-
>
IsLoadedAsData
(
)
|
|
GetExistingStyle
(
)
|
|
doc
-
>
IsStaticDocument
(
)
)
{
bool
isCSS
=
true
;
if
(
!
isNativeAnon
)
{
nsAutoString
styleType
;
doc
-
>
GetHeaderData
(
nsGkAtoms
:
:
headerContentStyleType
styleType
)
;
if
(
!
styleType
.
IsEmpty
(
)
)
{
static
const
char
textCssStr
[
]
=
"
text
/
css
"
;
isCSS
=
(
styleType
.
EqualsIgnoreCase
(
textCssStr
sizeof
(
textCssStr
)
-
1
)
)
;
}
}
if
(
isCSS
&
&
aResult
.
ParseStyleAttribute
(
aValue
this
)
)
{
return
;
}
}
aResult
.
SetTo
(
aValue
)
;
}
