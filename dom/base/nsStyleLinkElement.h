#
ifndef
nsStyleLinkElement_h___
#
define
nsStyleLinkElement_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIStyleSheetLinkingElement
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIURI
;
namespace
mozilla
{
class
CSSStyleSheet
;
namespace
dom
{
class
Document
;
class
ShadowRoot
;
}
}
class
nsStyleLinkElement
:
public
nsIStyleSheetLinkingElement
{
template
<
typename
V
typename
E
>
using
Result
=
mozilla
:
:
Result
<
V
E
>
;
public
:
nsStyleLinkElement
(
)
;
virtual
~
nsStyleLinkElement
(
)
;
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
=
0
;
mozilla
:
:
StyleSheet
*
GetSheet
(
)
const
{
return
mStyleSheet
;
}
void
SetStyleSheet
(
mozilla
:
:
StyleSheet
*
aStyleSheet
)
final
;
Result
<
Update
nsresult
>
UpdateStyleSheet
(
nsICSSLoaderObserver
*
)
final
;
void
SetEnableUpdates
(
bool
aEnableUpdates
)
final
;
void
GetCharset
(
nsAString
&
aCharset
)
override
;
void
SetLineNumber
(
uint32_t
aLineNumber
)
final
;
uint32_t
GetLineNumber
(
)
final
;
void
SetColumnNumber
(
uint32_t
aColumnNumber
)
final
;
uint32_t
GetColumnNumber
(
)
final
;
enum
RelValue
{
ePREFETCH
=
0x00000001
eDNS_PREFETCH
=
0x00000002
eSTYLESHEET
=
0x00000004
eNEXT
=
0x00000008
eALTERNATE
=
0x00000010
ePRECONNECT
=
0x00000020
ePRELOAD
=
0x00000080
}
;
static
uint32_t
ParseLinkTypes
(
const
nsAString
&
aTypes
)
;
void
UpdateStyleSheetInternal
(
)
{
mozilla
:
:
Unused
<
<
UpdateStyleSheetInternal
(
nullptr
nullptr
)
;
}
protected
:
Result
<
Update
nsresult
>
UpdateStyleSheetInternal
(
mozilla
:
:
dom
:
:
Document
*
aOldDocument
mozilla
:
:
dom
:
:
ShadowRoot
*
aOldShadowRoot
ForceUpdate
=
ForceUpdate
:
:
No
)
;
static
void
GetTitleAndMediaForElement
(
const
mozilla
:
:
dom
:
:
Element
&
nsString
&
aTitle
nsString
&
aMedia
)
;
static
bool
IsCSSMimeTypeAttributeForStyleElement
(
const
mozilla
:
:
dom
:
:
Element
&
)
;
virtual
mozilla
:
:
Maybe
<
SheetInfo
>
GetStyleSheetInfo
(
)
=
0
;
void
Unlink
(
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
;
private
:
mozilla
:
:
Result
<
Update
nsresult
>
DoUpdateStyleSheet
(
mozilla
:
:
dom
:
:
Document
*
aOldDocument
mozilla
:
:
dom
:
:
ShadowRoot
*
aOldShadowRoot
nsICSSLoaderObserver
*
aObserver
ForceUpdate
)
;
RefPtr
<
mozilla
:
:
StyleSheet
>
mStyleSheet
;
protected
:
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
bool
mUpdatesEnabled
;
uint32_t
mLineNumber
;
uint32_t
mColumnNumber
;
}
;
#
endif
