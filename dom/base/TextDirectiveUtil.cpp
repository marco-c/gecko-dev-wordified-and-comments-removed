#
include
"
TextDirectiveUtil
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsDOMAttributeMap
.
h
"
#
include
"
nsFind
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Document
.
h
"
#
include
"
fragmentdirectives_ffi_generated
.
h
"
#
include
"
Text
.
h
"
#
include
"
mozilla
/
intl
/
WordBreaker
.
h
"
#
include
"
mozilla
/
SelectionMovementUtils
.
h
"
namespace
mozilla
:
:
dom
{
LazyLogModule
sFragmentDirectiveLog
(
"
FragmentDirective
"
)
;
bool
TextDirectiveUtil
:
:
NodeIsVisibleTextNode
(
const
nsINode
&
aNode
)
{
const
Text
*
text
=
Text
:
:
FromNode
(
aNode
)
;
if
(
!
text
)
{
return
false
;
}
const
nsIFrame
*
frame
=
text
-
>
GetPrimaryFrame
(
)
;
return
frame
&
&
frame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
;
}
RefPtr
<
nsRange
>
TextDirectiveUtil
:
:
FindStringInRange
(
nsRange
*
aSearchRange
const
nsAString
&
aQuery
bool
aWordStartBounded
bool
aWordEndBounded
)
{
MOZ_ASSERT
(
aSearchRange
)
;
TEXT_FRAGMENT_LOG
(
"
query
=
'
%
s
'
wordStartBounded
=
'
%
d
'
wordEndBounded
=
'
%
d
'
.
\
n
"
NS_ConvertUTF16toUTF8
(
aQuery
)
.
Data
(
)
aWordStartBounded
aWordEndBounded
)
;
RefPtr
<
nsFind
>
finder
=
new
nsFind
(
)
;
finder
-
>
SetWordStartBounded
(
aWordStartBounded
)
;
finder
-
>
SetWordEndBounded
(
aWordEndBounded
)
;
finder
-
>
SetCaseSensitive
(
false
)
;
RefPtr
<
nsRange
>
searchRangeStart
=
nsRange
:
:
Create
(
aSearchRange
-
>
StartRef
(
)
aSearchRange
-
>
StartRef
(
)
IgnoreErrors
(
)
)
;
RefPtr
<
nsRange
>
searchRangeEnd
=
nsRange
:
:
Create
(
aSearchRange
-
>
EndRef
(
)
aSearchRange
-
>
EndRef
(
)
IgnoreErrors
(
)
)
;
RefPtr
<
nsRange
>
result
;
Unused
<
<
finder
-
>
Find
(
aQuery
aSearchRange
searchRangeStart
searchRangeEnd
getter_AddRefs
(
result
)
)
;
if
(
!
result
|
|
result
-
>
Collapsed
(
)
)
{
TEXT_FRAGMENT_LOG
(
"
Did
not
find
query
'
%
s
'
"
NS_ConvertUTF16toUTF8
(
aQuery
)
.
Data
(
)
)
;
}
else
{
auto
rangeToString
=
[
]
(
nsRange
*
range
)
-
>
nsCString
{
nsString
rangeString
;
range
-
>
ToString
(
rangeString
IgnoreErrors
(
)
)
;
return
NS_ConvertUTF16toUTF8
(
rangeString
)
;
}
;
TEXT_FRAGMENT_LOG
(
"
find
returned
'
%
s
'
"
rangeToString
(
result
)
.
Data
(
)
)
;
}
return
result
;
}
RangeBoundary
TextDirectiveUtil
:
:
MoveRangeBoundaryOneWord
(
const
RangeBoundary
&
aRangeBoundary
TextScanDirection
aDirection
)
{
MOZ_ASSERT
(
aRangeBoundary
.
IsSetAndValid
(
)
)
;
PeekOffsetOptions
options
=
{
PeekOffsetOption
:
:
JumpLines
PeekOffsetOption
:
:
StopAtScroller
PeekOffsetOption
:
:
IsKeyboardSelect
}
;
Result
<
RangeBoundary
nsresult
>
newBoundary
=
SelectionMovementUtils
:
:
MoveRangeBoundaryToSomewhere
(
aRangeBoundary
aDirection
=
=
TextScanDirection
:
:
Left
?
nsDirection
:
:
eDirPrevious
:
nsDirection
:
:
eDirNext
aDirection
=
=
TextScanDirection
:
:
Left
?
CaretAssociationHint
:
:
Before
:
CaretAssociationHint
:
:
After
intl
:
:
BidiEmbeddingLevel
:
:
DefaultLTR
(
)
nsSelectionAmount
:
:
eSelectWord
options
)
;
return
newBoundary
.
unwrapOr
(
{
}
)
;
}
bool
TextDirectiveUtil
:
:
IsWhitespaceAtPosition
(
const
Text
*
aText
uint32_t
aPos
)
{
if
(
!
aText
|
|
aText
-
>
Length
(
)
=
=
0
|
|
aPos
>
=
aText
-
>
Length
(
)
)
{
return
false
;
}
const
nsTextFragment
&
frag
=
aText
-
>
TextFragment
(
)
;
const
char
NBSP_CHAR
=
char
(
0xA0
)
;
if
(
frag
.
Is2b
(
)
)
{
const
char16_t
*
content
=
frag
.
Get2b
(
)
;
return
IsSpaceCharacter
(
content
[
aPos
]
)
|
|
content
[
aPos
]
=
=
char16_t
(
NBSP_CHAR
)
;
}
const
char
*
content
=
frag
.
Get1b
(
)
;
return
IsSpaceCharacter
(
content
[
aPos
]
)
|
|
content
[
aPos
]
=
=
NBSP_CHAR
;
}
bool
TextDirectiveUtil
:
:
NodeIsSearchInvisible
(
nsINode
&
aNode
)
{
if
(
!
aNode
.
IsElement
(
)
)
{
return
false
;
}
nsAtom
*
nodeNameAtom
=
aNode
.
NodeInfo
(
)
-
>
NameAtom
(
)
;
if
(
FragmentOrElement
:
:
IsHTMLVoid
(
nodeNameAtom
)
)
{
return
true
;
}
if
(
aNode
.
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
iframe
nsGkAtoms
:
:
image
nsGkAtoms
:
:
meter
nsGkAtoms
:
:
object
nsGkAtoms
:
:
progress
nsGkAtoms
:
:
style
nsGkAtoms
:
:
script
nsGkAtoms
:
:
video
nsGkAtoms
:
:
audio
)
)
{
return
true
;
}
if
(
aNode
.
IsHTMLElement
(
nsGkAtoms
:
:
select
)
)
{
return
aNode
.
GetAttributes
(
)
-
>
GetNamedItem
(
u
"
multiple
"
_ns
)
=
=
nullptr
;
}
const
Element
*
nodeAsElement
=
Element
:
:
FromNode
(
aNode
)
;
const
RefPtr
<
const
ComputedStyle
>
computedStyle
=
nsComputedDOMStyle
:
:
GetComputedStyleNoFlush
(
nodeAsElement
)
;
return
!
computedStyle
|
|
computedStyle
-
>
StyleDisplay
(
)
-
>
mDisplay
=
=
StyleDisplay
:
:
None
;
}
bool
TextDirectiveUtil
:
:
NodeHasBlockLevelDisplay
(
nsINode
&
aNode
)
{
if
(
!
aNode
.
IsElement
(
)
)
{
return
false
;
}
const
Element
*
nodeAsElement
=
Element
:
:
FromNode
(
aNode
)
;
const
RefPtr
<
const
ComputedStyle
>
computedStyle
=
nsComputedDOMStyle
:
:
GetComputedStyleNoFlush
(
nodeAsElement
)
;
if
(
!
computedStyle
)
{
return
false
;
}
const
StyleDisplay
&
styleDisplay
=
computedStyle
-
>
StyleDisplay
(
)
-
>
mDisplay
;
return
styleDisplay
=
=
StyleDisplay
:
:
Block
|
|
styleDisplay
=
=
StyleDisplay
:
:
Table
|
|
styleDisplay
=
=
StyleDisplay
:
:
FlowRoot
|
|
styleDisplay
=
=
StyleDisplay
:
:
Grid
|
|
styleDisplay
=
=
StyleDisplay
:
:
Flex
|
|
styleDisplay
.
IsListItem
(
)
;
}
nsINode
*
TextDirectiveUtil
:
:
GetBlockAncestorForNode
(
nsINode
*
aNode
)
{
RefPtr
<
nsINode
>
curNode
=
aNode
;
while
(
curNode
)
{
if
(
!
curNode
-
>
IsText
(
)
&
&
NodeHasBlockLevelDisplay
(
*
curNode
)
)
{
return
curNode
;
}
curNode
=
curNode
-
>
GetParentNode
(
)
;
}
return
aNode
-
>
GetOwnerDocument
(
)
;
}
bool
TextDirectiveUtil
:
:
NodeIsPartOfNonSearchableSubTree
(
nsINode
&
aNode
)
{
nsINode
*
node
=
&
aNode
;
do
{
if
(
NodeIsSearchInvisible
(
*
node
)
)
{
return
true
;
}
}
while
(
(
node
=
node
-
>
GetParentOrShadowHostNode
(
)
)
)
;
return
false
;
}
bool
TextDirectiveUtil
:
:
IsAtWordBoundary
(
const
nsAString
&
aText
uint32_t
aPosition
)
{
const
intl
:
:
WordRange
wordRange
=
intl
:
:
WordBreaker
:
:
FindWord
(
aText
aPosition
)
;
return
wordRange
.
mBegin
=
=
aPosition
|
|
wordRange
.
mEnd
=
=
aPosition
;
}
RangeBoundary
TextDirectiveUtil
:
:
GetBoundaryPointAtIndex
(
uint32_t
aIndex
const
nsTArray
<
RefPtr
<
Text
>
>
&
aTextNodeList
IsEndIndex
aIsEndIndex
)
{
uint32_t
counted
=
0
;
for
(
Text
*
curNode
:
aTextNodeList
)
{
uint32_t
nodeEnd
=
counted
+
curNode
-
>
Length
(
)
;
if
(
aIsEndIndex
=
=
IsEndIndex
:
:
Yes
)
{
+
+
nodeEnd
;
}
if
(
nodeEnd
>
aIndex
)
{
return
RangeBoundary
(
curNode
-
>
AsNode
(
)
aIndex
-
counted
)
;
}
counted
+
=
curNode
-
>
Length
(
)
;
}
return
{
}
;
}
void
TextDirectiveUtil
:
:
AdvanceStartToNextNonWhitespacePosition
(
nsRange
&
aRange
)
{
while
(
!
aRange
.
Collapsed
(
)
)
{
RefPtr
<
nsINode
>
node
=
aRange
.
GetStartContainer
(
)
;
MOZ_ASSERT
(
node
)
;
const
uint32_t
offset
=
aRange
.
StartOffset
(
)
;
if
(
NodeIsPartOfNonSearchableSubTree
(
*
node
)
|
|
!
NodeIsVisibleTextNode
(
*
node
)
|
|
offset
=
=
node
-
>
Length
(
)
)
{
if
(
NS_FAILED
(
aRange
.
SetStart
(
node
-
>
GetNextNode
(
)
0
)
)
)
{
return
;
}
continue
;
}
const
Text
*
text
=
Text
:
:
FromNode
(
node
)
;
MOZ_ASSERT
(
text
)
;
if
(
!
IsWhitespaceAtPosition
(
text
offset
)
)
{
return
;
}
aRange
.
SetStart
(
node
offset
+
1
)
;
}
}
}
