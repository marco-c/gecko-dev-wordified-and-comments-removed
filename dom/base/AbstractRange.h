#
ifndef
mozilla_dom_AbstractRange_h
#
define
mozilla_dom_AbstractRange_h
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
AbstractRange
:
public
nsISupports
public
nsWrapperCache
{
protected
:
explicit
AbstractRange
(
nsINode
*
aNode
)
;
virtual
~
AbstractRange
(
)
=
default
;
public
:
AbstractRange
(
)
=
delete
;
explicit
AbstractRange
(
const
AbstractRange
&
aOther
)
=
delete
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
AbstractRange
)
const
RangeBoundary
&
StartRef
(
)
const
{
return
mStart
;
}
const
RangeBoundary
&
EndRef
(
)
const
{
return
mEnd
;
}
nsIContent
*
GetChildAtStartOffset
(
)
const
{
return
mStart
.
GetChildAtOffset
(
)
;
}
nsIContent
*
GetChildAtEndOffset
(
)
const
{
return
mEnd
.
GetChildAtOffset
(
)
;
}
bool
IsPositioned
(
)
const
{
return
mIsPositioned
;
}
nsINode
*
GetCommonAncestor
(
)
const
;
nsINode
*
GetStartContainer
(
)
const
{
return
mStart
.
Container
(
)
;
}
nsINode
*
GetEndContainer
(
)
const
{
return
mEnd
.
Container
(
)
;
}
uint32_t
StartOffset
(
)
const
{
return
static_cast
<
uint32_t
>
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
)
;
}
uint32_t
EndOffset
(
)
const
{
return
static_cast
<
uint32_t
>
(
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
)
;
}
bool
Collapsed
(
)
const
{
return
!
mIsPositioned
|
|
(
mStart
.
Container
(
)
=
=
mEnd
.
Container
(
)
&
&
StartOffset
(
)
=
=
EndOffset
(
)
)
;
}
nsINode
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
typename
RangeType
>
static
nsresult
SetStartAndEndInternal
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
RangeType
*
aRange
)
;
RefPtr
<
Document
>
mOwner
;
RangeBoundary
mStart
;
RangeBoundary
mEnd
;
bool
mIsPositioned
;
bool
mIsGenerated
;
bool
mCalledByJS
;
}
;
}
}
#
endif
