#
include
"
mozilla
/
dom
/
BarProps
.
h
"
#
include
"
mozilla
/
dom
/
BarPropBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
namespace
mozilla
:
:
dom
{
BarProp
:
:
BarProp
(
nsGlobalWindowInner
*
aWindow
)
:
mDOMWindow
(
aWindow
)
{
}
BarProp
:
:
~
BarProp
(
)
=
default
;
nsPIDOMWindowInner
*
BarProp
:
:
GetParentObject
(
)
const
{
return
mDOMWindow
;
}
JSObject
*
BarProp
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
BarProp_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
BarProp
mDOMWindow
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
BarProp
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
BarProp
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
BarProp
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
bool
BarProp
:
:
GetVisibleByIsPopup
(
)
{
RefPtr
<
BrowsingContext
>
bc
=
GetBrowsingContext
(
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
true
;
}
bc
=
bc
-
>
Top
(
)
;
bool
isPopup
=
bc
-
>
GetIsPopupRequested
(
)
;
return
!
isPopup
;
}
bool
BarProp
:
:
GetVisibleByFlag
(
uint32_t
aChromeFlag
CallerType
aCallerType
ErrorResult
&
aRv
)
{
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
return
GetVisibleByIsPopup
(
)
;
}
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
GetBrowserChrome
(
)
;
NS_ENSURE_TRUE
(
browserChrome
false
)
;
uint32_t
chromeFlags
;
if
(
NS_FAILED
(
browserChrome
-
>
GetChromeFlags
(
&
chromeFlags
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
return
(
chromeFlags
&
aChromeFlag
)
;
}
void
BarProp
:
:
SetVisibleByFlag
(
bool
aVisible
uint32_t
aChromeFlag
CallerType
aCallerType
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
GetBrowserChrome
(
)
;
NS_ENSURE_TRUE_VOID
(
browserChrome
)
;
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
return
;
}
uint32_t
chromeFlags
;
if
(
NS_FAILED
(
browserChrome
-
>
GetChromeFlags
(
&
chromeFlags
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
aVisible
)
chromeFlags
|
=
aChromeFlag
;
else
chromeFlags
&
=
~
aChromeFlag
;
if
(
NS_FAILED
(
browserChrome
-
>
SetChromeFlags
(
chromeFlags
)
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
}
}
already_AddRefed
<
nsIWebBrowserChrome
>
BarProp
:
:
GetBrowserChrome
(
)
{
if
(
!
mDOMWindow
)
{
return
nullptr
;
}
return
mDOMWindow
-
>
GetWebBrowserChrome
(
)
;
}
BrowsingContext
*
BarProp
:
:
GetBrowsingContext
(
)
{
if
(
!
mDOMWindow
)
{
return
nullptr
;
}
return
mDOMWindow
-
>
GetBrowsingContext
(
)
;
}
MenubarProp
:
:
MenubarProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
MenubarProp
:
:
~
MenubarProp
(
)
=
default
;
bool
MenubarProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
GetVisibleByFlag
(
nsIWebBrowserChrome
:
:
CHROME_MENUBAR
aCallerType
aRv
)
;
}
void
MenubarProp
:
:
SetVisible
(
bool
aVisible
CallerType
aCallerType
ErrorResult
&
aRv
)
{
BarProp
:
:
SetVisibleByFlag
(
aVisible
nsIWebBrowserChrome
:
:
CHROME_MENUBAR
aCallerType
aRv
)
;
}
ToolbarProp
:
:
ToolbarProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
ToolbarProp
:
:
~
ToolbarProp
(
)
=
default
;
bool
ToolbarProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
GetVisibleByFlag
(
nsIWebBrowserChrome
:
:
CHROME_TOOLBAR
aCallerType
aRv
)
;
}
void
ToolbarProp
:
:
SetVisible
(
bool
aVisible
CallerType
aCallerType
ErrorResult
&
aRv
)
{
BarProp
:
:
SetVisibleByFlag
(
aVisible
nsIWebBrowserChrome
:
:
CHROME_TOOLBAR
aCallerType
aRv
)
;
}
LocationbarProp
:
:
LocationbarProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
LocationbarProp
:
:
~
LocationbarProp
(
)
=
default
;
bool
LocationbarProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
GetVisibleByFlag
(
nsIWebBrowserChrome
:
:
CHROME_LOCATIONBAR
aCallerType
aRv
)
;
}
void
LocationbarProp
:
:
SetVisible
(
bool
aVisible
CallerType
aCallerType
ErrorResult
&
aRv
)
{
BarProp
:
:
SetVisibleByFlag
(
aVisible
nsIWebBrowserChrome
:
:
CHROME_LOCATIONBAR
aCallerType
aRv
)
;
}
PersonalbarProp
:
:
PersonalbarProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
PersonalbarProp
:
:
~
PersonalbarProp
(
)
=
default
;
bool
PersonalbarProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
GetVisibleByFlag
(
nsIWebBrowserChrome
:
:
CHROME_PERSONAL_TOOLBAR
aCallerType
aRv
)
;
}
void
PersonalbarProp
:
:
SetVisible
(
bool
aVisible
CallerType
aCallerType
ErrorResult
&
aRv
)
{
BarProp
:
:
SetVisibleByFlag
(
aVisible
nsIWebBrowserChrome
:
:
CHROME_PERSONAL_TOOLBAR
aCallerType
aRv
)
;
}
StatusbarProp
:
:
StatusbarProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
StatusbarProp
:
:
~
StatusbarProp
(
)
=
default
;
bool
StatusbarProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
GetVisibleByFlag
(
nsIWebBrowserChrome
:
:
CHROME_STATUSBAR
aCallerType
aRv
)
;
}
void
StatusbarProp
:
:
SetVisible
(
bool
aVisible
CallerType
aCallerType
ErrorResult
&
aRv
)
{
return
BarProp
:
:
SetVisibleByFlag
(
aVisible
nsIWebBrowserChrome
:
:
CHROME_STATUSBAR
aCallerType
aRv
)
;
}
ScrollbarsProp
:
:
ScrollbarsProp
(
nsGlobalWindowInner
*
aWindow
)
:
BarProp
(
aWindow
)
{
}
ScrollbarsProp
:
:
~
ScrollbarsProp
(
)
=
default
;
bool
ScrollbarsProp
:
:
GetVisible
(
CallerType
aCallerType
ErrorResult
&
aRv
)
{
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
return
BarProp
:
:
GetVisibleByIsPopup
(
)
;
}
if
(
!
mDOMWindow
)
{
return
true
;
}
nsIDocShell
*
ds
=
mDOMWindow
-
>
GetDocShell
(
)
;
if
(
!
ds
)
{
return
true
;
}
ScrollbarPreference
pref
=
nsDocShell
:
:
Cast
(
ds
)
-
>
ScrollbarPreference
(
)
;
return
pref
!
=
ScrollbarPreference
:
:
Never
;
}
void
ScrollbarsProp
:
:
SetVisible
(
bool
aVisible
CallerType
ErrorResult
&
)
{
}
}
