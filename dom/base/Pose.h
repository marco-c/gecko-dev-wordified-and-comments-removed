#
ifndef
mozilla_dom_Pose_h
#
define
mozilla_dom_Pose_h
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Pose
:
public
nsWrapperCache
{
public
:
explicit
Pose
(
nsISupports
*
aParent
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
Pose
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
Pose
)
nsISupports
*
GetParentObject
(
)
const
;
virtual
void
GetPosition
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetLinearVelocity
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetLinearAcceleration
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetOrientation
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetAngularVelocity
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
virtual
void
GetAngularAcceleration
(
JSContext
*
aJSContext
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
=
0
;
static
void
SetFloat32Array
(
JSContext
*
aJSContext
nsWrapperCache
*
creator
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
JS
:
:
Heap
<
JSObject
*
>
&
aObj
float
*
aVal
uint32_t
aValLength
ErrorResult
&
aRv
)
;
protected
:
virtual
~
Pose
(
)
;
nsCOMPtr
<
nsISupports
>
mParent
;
JS
:
:
Heap
<
JSObject
*
>
mPosition
;
JS
:
:
Heap
<
JSObject
*
>
mLinearVelocity
;
JS
:
:
Heap
<
JSObject
*
>
mLinearAcceleration
;
JS
:
:
Heap
<
JSObject
*
>
mOrientation
;
JS
:
:
Heap
<
JSObject
*
>
mAngularVelocity
;
JS
:
:
Heap
<
JSObject
*
>
mAngularAcceleration
;
}
;
}
}
#
endif
