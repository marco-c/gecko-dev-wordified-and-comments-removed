#
include
"
ChromeUtils
.
h
"
#
include
"
MozQueryInterface
.
h
"
#
include
"
xptinfo
.
h
"
#
include
<
string
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
:
:
dom
{
constexpr
size_t
IID_SIZE
=
sizeof
(
nsIID
)
;
static_assert
(
IID_SIZE
=
=
16
"
Size
of
nsID
struct
changed
.
Please
ensure
this
code
is
still
valid
.
"
)
;
static
int
CompareIIDs
(
const
nsIID
&
aA
const
nsIID
&
aB
)
{
return
memcmp
(
(
void
*
)
&
aA
.
m0
(
void
*
)
&
aB
.
m0
IID_SIZE
)
;
}
MozQueryInterface
*
ChromeUtils
:
:
GenerateQI
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aInterfaces
ErrorResult
&
aRv
)
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
nsTArray
<
nsIID
>
ifaces
;
JS
:
:
RootedValue
iface
(
cx
)
;
for
(
uint32_t
idx
=
0
;
idx
<
aInterfaces
.
Length
(
)
;
+
+
idx
)
{
iface
=
aInterfaces
[
idx
]
;
if
(
Maybe
<
nsID
>
id
=
xpc
:
:
JSValue2ID
(
cx
iface
)
)
{
ifaces
.
AppendElement
(
*
id
)
;
continue
;
}
if
(
iface
.
isString
(
)
)
{
JS
:
:
UniqueChars
name
=
JS_EncodeStringToLatin1
(
cx
iface
.
toString
(
)
)
;
const
nsXPTInterfaceInfo
*
iinfo
=
nsXPTInterfaceInfo
:
:
ByName
(
name
.
get
(
)
)
;
if
(
iinfo
)
{
ifaces
.
AppendElement
(
iinfo
-
>
IID
(
)
)
;
continue
;
}
}
}
MOZ_ASSERT
(
!
ifaces
.
Contains
(
NS_GET_IID
(
nsISupports
)
CompareIIDs
)
)
;
ifaces
.
AppendElement
(
NS_GET_IID
(
nsISupports
)
)
;
ifaces
.
Sort
(
CompareIIDs
)
;
return
new
MozQueryInterface
(
std
:
:
move
(
ifaces
)
)
;
}
bool
MozQueryInterface
:
:
QueriesTo
(
const
nsIID
&
aIID
)
const
{
return
mInterfaces
.
ContainsSorted
(
aIID
CompareIIDs
)
;
}
void
MozQueryInterface
:
:
LegacyCall
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
thisv
JS
:
:
Handle
<
JS
:
:
Value
>
aIID
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
ErrorResult
&
aRv
)
const
{
Maybe
<
nsID
>
id
=
xpc
:
:
JSValue2ID
(
cx
aIID
)
;
if
(
id
&
&
QueriesTo
(
*
id
)
)
{
aResult
.
set
(
thisv
)
;
}
else
{
aRv
.
Throw
(
NS_ERROR_NO_INTERFACE
)
;
}
}
bool
MozQueryInterface
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
{
return
MozQueryInterface_Binding
:
:
Wrap
(
aCx
this
aGivenProto
aReflector
)
;
}
}
