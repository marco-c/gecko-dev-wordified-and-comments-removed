#
ifndef
DOM_BASE_JSEXECUTIONCONTEXT_H_
#
define
DOM_BASE_JSEXECUTIONCONTEXT_H_
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
ProfilerLabels
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nscore
.
h
"
class
nsIScriptContext
;
class
nsIScriptElement
;
class
nsIScriptGlobalObject
;
class
nsXBLPrototypeBinding
;
namespace
mozilla
{
union
Utf8Unit
;
namespace
dom
{
class
ScriptLoadContext
;
nsresult
EvaluationExceptionToNSResult
(
ErrorResult
&
aRv
)
;
class
MOZ_STACK_CLASS
JSExecutionContext
final
{
mozilla
:
:
AutoProfilerLabel
mAutoProfilerLabel
;
JSContext
*
mCx
;
JSAutoRealm
mRealm
;
JS
:
:
Rooted
<
JS
:
:
Value
>
mRetValue
;
JS
:
:
Rooted
<
JSScript
*
>
mScript
;
JS
:
:
CompileOptions
&
mCompileOptions
;
JS
:
:
Rooted
<
JS
:
:
Value
>
mDebuggerPrivateValue
;
JS
:
:
Rooted
<
JSScript
*
>
mDebuggerIntroductionScript
;
RefPtr
<
JS
:
:
Stencil
>
mStencil
;
bool
mSkip
;
bool
mCoerceToString
;
bool
mEncodeBytecode
;
bool
mKeepStencil
=
false
;
#
ifdef
DEBUG
bool
mWantsReturnValue
;
bool
mScriptUsed
;
#
endif
private
:
template
<
typename
Unit
>
void
InternalCompile
(
JS
:
:
SourceText
<
Unit
>
&
aSrcBuf
ErrorResult
&
aRv
)
;
public
:
JSExecutionContext
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aCompileOptions
ErrorResult
&
aRv
JS
:
:
Handle
<
JS
:
:
Value
>
aDebuggerPrivateValue
=
JS
:
:
UndefinedHandleValue
JS
:
:
Handle
<
JSScript
*
>
aDebuggerIntroductionScript
=
nullptr
)
;
JSExecutionContext
(
const
JSExecutionContext
&
)
=
delete
;
JSExecutionContext
(
JSExecutionContext
&
&
)
=
delete
;
~
JSExecutionContext
(
)
{
MOZ_ASSERT_IF
(
!
mSkip
!
mWantsReturnValue
)
;
}
void
SetKeepStencil
(
)
{
mKeepStencil
=
true
;
}
already_AddRefed
<
JS
:
:
Stencil
>
StealStencil
(
)
{
return
mStencil
.
forget
(
)
;
}
JSExecutionContext
&
SetCoerceToString
(
bool
aCoerceToString
)
{
mCoerceToString
=
aCoerceToString
;
return
*
this
;
}
JSExecutionContext
&
SetEncodeBytecode
(
bool
aEncodeBytecode
)
{
mEncodeBytecode
=
aEncodeBytecode
;
return
*
this
;
}
void
JoinOffThread
(
ScriptLoadContext
*
aContext
ErrorResult
&
aRv
)
;
void
Compile
(
JS
:
:
SourceText
<
char16_t
>
&
aSrcBuf
ErrorResult
&
aRv
)
;
void
Compile
(
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
aSrcBuf
ErrorResult
&
aRv
)
;
void
Compile
(
const
nsAString
&
aScript
ErrorResult
&
aRv
)
;
void
Decode
(
const
JS
:
:
TranscodeRange
&
aBytecodeBuf
ErrorResult
&
aRv
)
;
void
InstantiateStencil
(
RefPtr
<
JS
:
:
Stencil
>
&
&
aStencil
bool
&
incrementalEncodingAlreadyStarted
ErrorResult
&
aRv
JS
:
:
InstantiationStorage
*
aStorage
=
nullptr
)
;
JSScript
*
GetScript
(
)
;
JSScript
*
MaybeGetScript
(
)
;
void
ExecScript
(
ErrorResult
&
aRv
)
;
void
ExecScript
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetValue
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
