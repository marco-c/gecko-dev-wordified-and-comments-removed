#
include
"
mozilla
/
dom
/
TestUtils
.
h
"
#
include
"
mozilla
/
dom
/
TestUtilsBinding
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
nsJSEnvironment
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TestUtils
mOwner
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TestUtils
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TestUtils
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TestUtils
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
TestUtils
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TestUtils_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
TestUtils
:
:
Gc
(
ErrorResult
&
aRv
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mOwner
aRv
)
;
NS_DispatchToCurrentThread
(
NS_NewCancelableRunnableFunction
(
"
TestUtils
:
:
Gc
"
[
promise
]
{
if
(
NS_IsMainThread
(
)
)
{
nsJSContext
:
:
GarbageCollectNow
(
JS
:
:
GCReason
:
:
DOM_TESTUTILS
nsJSContext
:
:
NonIncrementalGC
nsJSContext
:
:
NonShrinkingGC
)
;
nsJSContext
:
:
CycleCollectNow
(
CCReason
:
:
API
)
;
}
else
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
workerPrivate
-
>
GarbageCollectInternal
(
workerPrivate
-
>
GetJSContext
(
)
false
false
)
;
workerPrivate
-
>
CycleCollectInternal
(
false
)
;
}
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
)
)
;
return
promise
.
forget
(
)
;
}
}
