#
include
"
mozilla
/
dom
/
TestUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TestUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
:
:
dom
{
already_AddRefed
<
Promise
>
TestUtils
:
:
Gc
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
NS_DispatchToCurrentThread
(
NS_NewCancelableRunnableFunction
(
"
TestUtils
:
:
Gc
"
[
promise
]
{
if
(
NS_IsMainThread
(
)
)
{
nsJSContext
:
:
GarbageCollectNow
(
JS
:
:
GCReason
:
:
DOM_TESTUTILS
nsJSContext
:
:
NonShrinkingGC
)
;
nsJSContext
:
:
CycleCollectNow
(
CCReason
:
:
API
)
;
}
else
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
workerPrivate
-
>
GarbageCollectInternal
(
workerPrivate
-
>
GetJSContext
(
)
false
false
)
;
workerPrivate
-
>
CycleCollectInternal
(
false
)
;
}
promise
-
>
MaybeResolveWithUndefined
(
)
;
}
)
)
;
return
promise
.
forget
(
)
;
}
}
