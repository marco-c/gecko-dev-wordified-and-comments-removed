#
ifndef
nsIGlobalObject_h__
#
define
nsIGlobalObject_h__
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
ClientState
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
#
include
"
mozilla
/
OriginTrials
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
define
NS_IGLOBALOBJECT_IID
\
{
\
0x11afa8be
0xd997
0x4e07
{
\
0xa6
0xa3
0x6f
0x87
0x2e
0xc3
0xee
0x7f
\
}
\
}
class
nsCycleCollectionTraversalCallback
;
class
nsICookieJarSettings
;
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
DOMEventTargetHelper
;
class
GlobalFreezeObserver
;
class
GlobalTeardownObserver
;
template
<
typename
V
typename
E
>
class
Result
;
enum
class
StorageAccess
;
namespace
dom
{
class
VoidFunction
;
class
DebuggerNotificationManager
;
class
FontFaceSet
;
class
Function
;
class
Report
;
class
ReportBody
;
class
ReportingObserver
;
class
ServiceWorker
;
class
ServiceWorkerRegistration
;
class
ServiceWorkerRegistrationDescriptor
;
class
StorageManager
;
enum
class
CallerType
:
uint32_t
;
}
namespace
ipc
{
class
PrincipalInfo
;
}
}
namespace
JS
:
:
loader
{
class
ModuleLoaderBase
;
}
class
nsIGlobalObject
:
public
nsISupports
{
private
:
nsTArray
<
nsCString
>
mHostObjectURIs
;
mozilla
:
:
LinkedList
<
mozilla
:
:
GlobalTeardownObserver
>
mGlobalTeardownObservers
;
mozilla
:
:
LinkedList
<
mozilla
:
:
GlobalFreezeObserver
>
mGlobalFreezeObservers
;
bool
mIsDying
;
bool
mIsScriptForbidden
;
protected
:
bool
mIsInnerWindow
;
nsIGlobalObject
(
)
;
public
:
using
RTPCallerType
=
mozilla
:
:
RTPCallerType
;
using
RFPTarget
=
mozilla
:
:
RFPTarget
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IGLOBALOBJECT_IID
)
bool
IsDying
(
)
const
{
return
mIsDying
;
}
bool
IsScriptForbidden
(
JSObject
*
aCallback
bool
aIsJSImplementedWebIDL
=
false
)
const
;
virtual
JSObject
*
GetGlobalJSObject
(
)
=
0
;
virtual
JSObject
*
GetGlobalJSObjectPreserveColor
(
)
const
=
0
;
bool
HasJSGlobal
(
)
const
{
return
GetGlobalJSObjectPreserveColor
(
)
;
}
virtual
nsISerialEventTarget
*
SerialEventTarget
(
)
const
=
0
;
virtual
nsresult
Dispatch
(
already_AddRefed
<
nsIRunnable
>
&
&
)
const
=
0
;
nsIPrincipal
*
PrincipalOrNull
(
)
const
;
void
RegisterHostObjectURI
(
const
nsACString
&
aURI
)
;
void
UnregisterHostObjectURI
(
const
nsACString
&
aURI
)
;
void
UnlinkObjectsInGlobal
(
)
;
void
TraverseObjectsInGlobal
(
nsCycleCollectionTraversalCallback
&
aCb
)
;
void
AddGlobalTeardownObserver
(
mozilla
:
:
GlobalTeardownObserver
*
aObject
)
;
void
RemoveGlobalTeardownObserver
(
mozilla
:
:
GlobalTeardownObserver
*
aObject
)
;
void
ForEachGlobalTeardownObserver
(
const
std
:
:
function
<
void
(
mozilla
:
:
GlobalTeardownObserver
*
bool
*
aDoneOut
)
>
&
aFunc
)
const
;
void
AddGlobalFreezeObserver
(
mozilla
:
:
GlobalFreezeObserver
*
aObserver
)
;
void
RemoveGlobalFreezeObserver
(
mozilla
:
:
GlobalFreezeObserver
*
aObserver
)
;
void
ForEachGlobalFreezeObserver
(
const
std
:
:
function
<
void
(
mozilla
:
:
GlobalFreezeObserver
*
bool
*
aDoneOut
)
>
&
aFunc
)
const
;
virtual
bool
IsInSyncOperation
(
)
{
return
false
;
}
virtual
mozilla
:
:
dom
:
:
DebuggerNotificationManager
*
GetOrCreateDebuggerNotificationManager
(
)
{
return
nullptr
;
}
virtual
mozilla
:
:
dom
:
:
DebuggerNotificationManager
*
GetExistingDebuggerNotificationManager
(
)
{
return
nullptr
;
}
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
GetClientInfo
(
)
const
;
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientState
>
GetClientState
(
)
const
;
virtual
mozilla
:
:
Maybe
<
nsID
>
GetAgentClusterId
(
)
const
;
virtual
bool
CrossOriginIsolated
(
)
const
{
return
false
;
}
virtual
bool
IsSharedMemoryAllowed
(
)
const
{
return
false
;
}
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
GetController
(
)
const
;
virtual
RefPtr
<
mozilla
:
:
dom
:
:
ServiceWorker
>
GetOrCreateServiceWorker
(
const
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
&
aDescriptor
)
;
virtual
RefPtr
<
mozilla
:
:
dom
:
:
ServiceWorkerRegistration
>
GetServiceWorkerRegistration
(
const
mozilla
:
:
dom
:
:
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
const
;
virtual
RefPtr
<
mozilla
:
:
dom
:
:
ServiceWorkerRegistration
>
GetOrCreateServiceWorkerRegistration
(
const
mozilla
:
:
dom
:
:
ServiceWorkerRegistrationDescriptor
&
aDescriptor
)
;
virtual
mozilla
:
:
StorageAccess
GetStorageAccess
(
)
;
virtual
nsICookieJarSettings
*
GetCookieJarSettings
(
)
;
virtual
mozilla
:
:
OriginTrials
Trials
(
)
const
=
0
;
nsPIDOMWindowInner
*
GetAsInnerWindow
(
)
;
void
QueueMicrotask
(
mozilla
:
:
dom
:
:
VoidFunction
&
aCallback
)
;
void
RegisterReportingObserver
(
mozilla
:
:
dom
:
:
ReportingObserver
*
aObserver
bool
aBuffered
)
;
void
UnregisterReportingObserver
(
mozilla
:
:
dom
:
:
ReportingObserver
*
aObserver
)
;
void
BroadcastReport
(
mozilla
:
:
dom
:
:
Report
*
aReport
)
;
MOZ_CAN_RUN_SCRIPT
void
NotifyReportingObservers
(
)
;
void
RemoveReportRecords
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
Function
>
GetCountQueuingStrategySizeFunction
(
)
;
void
SetCountQueuingStrategySizeFunction
(
mozilla
:
:
dom
:
:
Function
*
aFunction
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
Function
>
GetByteLengthQueuingStrategySizeFunction
(
)
;
void
SetByteLengthQueuingStrategySizeFunction
(
mozilla
:
:
dom
:
:
Function
*
aFunction
)
;
virtual
bool
ShouldResistFingerprinting
(
RFPTarget
aTarget
)
const
=
0
;
bool
ShouldResistFingerprinting
(
mozilla
:
:
dom
:
:
CallerType
aCallerType
RFPTarget
aTarget
)
const
;
RTPCallerType
GetRTPCallerType
(
)
const
;
virtual
JS
:
:
loader
:
:
ModuleLoaderBase
*
GetModuleLoader
(
JSContext
*
aCx
)
{
return
nullptr
;
}
virtual
mozilla
:
:
dom
:
:
FontFaceSet
*
GetFonts
(
)
{
return
nullptr
;
}
virtual
mozilla
:
:
Result
<
mozilla
:
:
ipc
:
:
PrincipalInfo
nsresult
>
GetStorageKey
(
)
;
mozilla
:
:
Result
<
bool
nsresult
>
HasEqualStorageKey
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aStorageKey
)
;
virtual
mozilla
:
:
dom
:
:
StorageManager
*
GetStorageManager
(
)
{
return
nullptr
;
}
virtual
bool
IsEligibleForMessaging
(
)
{
return
false
;
}
;
virtual
bool
IsBackgroundInternal
(
)
const
{
return
false
;
}
virtual
mozilla
:
:
dom
:
:
TimeoutManager
*
GetTimeoutManager
(
)
{
return
nullptr
;
}
virtual
bool
IsRunningTimeout
(
)
{
return
false
;
}
virtual
bool
IsXPCSandbox
(
)
{
return
false
;
}
protected
:
virtual
~
nsIGlobalObject
(
)
;
void
StartDying
(
)
{
mIsDying
=
true
;
}
void
StartForbiddingScript
(
)
{
mIsScriptForbidden
=
true
;
}
void
StopForbiddingScript
(
)
{
mIsScriptForbidden
=
false
;
}
void
DisconnectGlobalTeardownObservers
(
)
;
void
DisconnectGlobalFreezeObservers
(
)
;
void
NotifyGlobalFrozen
(
)
;
void
NotifyGlobalThawed
(
)
;
size_t
ShallowSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aSizeOf
)
const
;
private
:
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
ReportingObserver
>
>
mReportingObservers
;
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
Report
>
>
mReportRecords
;
RefPtr
<
mozilla
:
:
dom
:
:
Function
>
mCountQueuingStrategySizeFunction
;
RefPtr
<
mozilla
:
:
dom
:
:
Function
>
mByteLengthQueuingStrategySizeFunction
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIGlobalObject
NS_IGLOBALOBJECT_IID
)
#
endif
