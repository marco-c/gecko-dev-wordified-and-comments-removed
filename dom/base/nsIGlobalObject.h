#
ifndef
nsIGlobalObject_h__
#
define
nsIGlobalObject_h__
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
DispatcherTrait
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
define
NS_IGLOBALOBJECT_IID
\
{
0x11afa8be
0xd997
0x4e07
\
{
0xa6
0xa3
0x6f
0x87
0x2e
0xc3
0xee
0x7f
}
}
class
nsCycleCollectionTraversalCallback
;
class
nsIPrincipal
;
namespace
mozilla
{
class
DOMEventTargetHelper
;
namespace
dom
{
class
ServiceWorker
;
}
}
class
nsIGlobalObject
:
public
nsISupports
public
mozilla
:
:
dom
:
:
DispatcherTrait
{
nsTArray
<
nsCString
>
mHostObjectURIs
;
nsTHashtable
<
nsPtrHashKey
<
mozilla
:
:
DOMEventTargetHelper
>
>
mEventTargetObjects
;
bool
mIsDying
;
protected
:
nsIGlobalObject
(
)
:
mIsDying
(
false
)
{
}
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IGLOBALOBJECT_IID
)
bool
IsDying
(
)
const
{
return
mIsDying
;
}
virtual
JSObject
*
GetGlobalJSObject
(
)
=
0
;
nsIPrincipal
*
PrincipalOrNull
(
)
;
void
RegisterHostObjectURI
(
const
nsACString
&
aURI
)
;
void
UnregisterHostObjectURI
(
const
nsACString
&
aURI
)
;
void
UnlinkHostObjectURIs
(
)
;
void
TraverseHostObjectURIs
(
nsCycleCollectionTraversalCallback
&
aCb
)
;
void
AddEventTargetObject
(
mozilla
:
:
DOMEventTargetHelper
*
aObject
)
;
void
RemoveEventTargetObject
(
mozilla
:
:
DOMEventTargetHelper
*
aObject
)
;
void
ForEachEventTargetObject
(
const
std
:
:
function
<
void
(
mozilla
:
:
DOMEventTargetHelper
*
)
>
&
aFunc
)
const
;
virtual
bool
IsInSyncOperation
(
)
{
return
false
;
}
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
GetClientInfo
(
)
const
;
virtual
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
GetController
(
)
const
;
virtual
RefPtr
<
mozilla
:
:
dom
:
:
ServiceWorker
>
GetOrCreateServiceWorker
(
const
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
&
aDescriptor
)
;
virtual
void
AddServiceWorker
(
mozilla
:
:
dom
:
:
ServiceWorker
*
aServiceWorker
)
;
virtual
void
RemoveServiceWorker
(
mozilla
:
:
dom
:
:
ServiceWorker
*
aServiceWorker
)
;
protected
:
virtual
~
nsIGlobalObject
(
)
;
void
StartDying
(
)
{
mIsDying
=
true
;
}
void
DisconnectEventTargetObjects
(
)
;
size_t
ShallowSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aSizeOf
)
const
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIGlobalObject
NS_IGLOBALOBJECT_IID
)
#
endif
