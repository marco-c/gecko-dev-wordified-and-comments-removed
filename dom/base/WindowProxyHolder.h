#
ifndef
mozilla_dom_WindowProxyHolder_h__
#
define
mozilla_dom_WindowProxyHolder_h__
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WindowProxyHolder
{
public
:
WindowProxyHolder
(
)
=
default
;
explicit
WindowProxyHolder
(
nsPIDOMWindowOuter
*
aWin
)
:
mWindow
(
aWin
)
{
MOZ_ASSERT
(
mWindow
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
}
explicit
WindowProxyHolder
(
already_AddRefed
<
nsPIDOMWindowOuter
>
&
&
aWin
)
:
mWindow
(
std
:
:
move
(
aWin
)
)
{
MOZ_ASSERT
(
mWindow
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
}
WindowProxyHolder
&
operator
=
(
nsPIDOMWindowOuter
*
aWin
)
{
mWindow
=
aWin
;
MOZ_ASSERT
(
mWindow
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
return
*
this
;
}
WindowProxyHolder
&
operator
=
(
already_AddRefed
<
nsPIDOMWindowOuter
>
&
&
aWin
)
{
mWindow
=
std
:
:
move
(
aWin
)
;
MOZ_ASSERT
(
mWindow
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
return
*
this
;
}
nsPIDOMWindowOuter
*
get
(
)
const
{
MOZ_ASSERT
(
mWindow
"
WindowProxyHolder
hasn
'
t
been
initialized
.
"
)
;
return
mWindow
;
}
private
:
friend
void
ImplCycleCollectionUnlink
(
WindowProxyHolder
&
aProxy
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mWindow
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
WindowProxyHolder
&
aProxy
const
char
*
aName
uint32_t
aFlags
=
0
)
{
CycleCollectionNoteChild
(
aCallback
aProxy
.
get
(
)
"
mWindow
"
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
WindowProxyHolder
&
aProxy
)
{
aProxy
.
mWindow
=
nullptr
;
}
}
}
#
endif
