#
ifndef
mozilla_dom_WindowProxyHolder_h__
#
define
mozilla_dom_WindowProxyHolder_h__
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
struct
JSContext
;
class
JSObject
;
namespace
JS
{
template
<
typename
T
>
class
MutableHandle
;
}
namespace
mozilla
{
namespace
dom
{
class
WindowProxyHolder
{
public
:
WindowProxyHolder
(
)
=
default
;
explicit
WindowProxyHolder
(
BrowsingContext
*
aBC
)
:
mBrowsingContext
(
aBC
)
{
MOZ_ASSERT
(
mBrowsingContext
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
}
explicit
WindowProxyHolder
(
RefPtr
<
BrowsingContext
>
&
&
aBC
)
:
mBrowsingContext
(
std
:
:
move
(
aBC
)
)
{
MOZ_ASSERT
(
mBrowsingContext
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
}
WindowProxyHolder
&
operator
=
(
BrowsingContext
*
aBC
)
{
mBrowsingContext
=
aBC
;
MOZ_ASSERT
(
mBrowsingContext
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
return
*
this
;
}
WindowProxyHolder
&
operator
=
(
RefPtr
<
BrowsingContext
>
&
&
aBC
)
{
mBrowsingContext
=
std
:
:
move
(
aBC
)
;
MOZ_ASSERT
(
mBrowsingContext
"
Don
'
t
set
WindowProxyHolder
to
null
.
"
)
;
return
*
this
;
}
BrowsingContext
*
get
(
)
const
{
MOZ_ASSERT
(
mBrowsingContext
"
WindowProxyHolder
hasn
'
t
been
initialized
.
"
)
;
return
mBrowsingContext
;
}
private
:
friend
void
ImplCycleCollectionUnlink
(
WindowProxyHolder
&
aProxy
)
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
WindowProxyHolder
&
aProxy
const
char
*
aName
uint32_t
aFlags
=
0
)
{
CycleCollectionNoteChild
(
aCallback
aProxy
.
get
(
)
"
mBrowsingContext
"
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
WindowProxyHolder
&
aProxy
)
{
aProxy
.
mBrowsingContext
=
nullptr
;
}
extern
bool
GetRemoteOuterWindowProxy
(
JSContext
*
aCx
BrowsingContext
*
aContext
JS
:
:
Handle
<
JSObject
*
>
aTransplantTo
JS
:
:
MutableHandle
<
JSObject
*
>
aValue
)
;
}
}
#
endif
