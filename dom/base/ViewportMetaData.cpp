#
include
"
ViewportMetaData
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
static
void
ProcessViewportToken
(
Document
*
aDocument
const
nsAString
&
token
)
{
nsAString
:
:
const_iterator
tip
tail
end
;
token
.
BeginReading
(
tip
)
;
tail
=
tip
;
token
.
EndReading
(
end
)
;
while
(
(
tip
!
=
end
)
&
&
(
*
tip
!
=
'
=
'
)
)
{
+
+
tip
;
}
if
(
tip
=
=
end
)
{
return
;
}
const
nsAString
&
key
=
nsContentUtils
:
:
TrimWhitespace
<
nsCRT
:
:
IsAsciiSpace
>
(
Substring
(
tail
tip
)
true
)
;
const
nsAString
&
value
=
nsContentUtils
:
:
TrimWhitespace
<
nsCRT
:
:
IsAsciiSpace
>
(
Substring
(
+
+
tip
end
)
true
)
;
RefPtr
<
nsAtom
>
key_atom
=
NS_Atomize
(
key
)
;
if
(
key_atom
=
=
nsGkAtoms
:
:
height
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_height
value
)
;
}
else
if
(
key_atom
=
=
nsGkAtoms
:
:
width
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_width
value
)
;
}
else
if
(
key_atom
=
=
nsGkAtoms
:
:
initial_scale
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_initial_scale
value
)
;
}
else
if
(
key_atom
=
=
nsGkAtoms
:
:
minimum_scale
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_minimum_scale
value
)
;
}
else
if
(
key_atom
=
=
nsGkAtoms
:
:
maximum_scale
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_maximum_scale
value
)
;
}
else
if
(
key_atom
=
=
nsGkAtoms
:
:
user_scalable
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport_user_scalable
value
)
;
}
}
#
define
IS_SEPARATOR
(
c
)
\
(
(
(
c
)
=
=
'
=
'
)
|
|
(
(
c
)
=
=
'
'
)
|
|
(
(
c
)
=
=
'
;
'
)
|
|
(
(
c
)
=
=
'
\
t
'
)
|
|
\
(
(
c
)
=
=
'
\
n
'
)
|
|
(
(
c
)
=
=
'
\
r
'
)
)
void
ViewportMetaData
:
:
ProcessViewportInfo
(
Document
*
aDocument
const
nsAString
&
viewportInfo
)
{
aDocument
-
>
SetHeaderData
(
nsGkAtoms
:
:
viewport
viewportInfo
)
;
nsAString
:
:
const_iterator
tip
tail
end
;
viewportInfo
.
BeginReading
(
tip
)
;
tail
=
tip
;
viewportInfo
.
EndReading
(
end
)
;
while
(
(
tip
!
=
end
)
&
&
(
IS_SEPARATOR
(
*
tip
)
|
|
nsCRT
:
:
IsAsciiSpace
(
*
tip
)
)
)
{
+
+
tip
;
}
while
(
tip
!
=
end
)
{
tail
=
tip
;
while
(
(
tip
!
=
end
)
&
&
!
IS_SEPARATOR
(
*
tip
)
)
{
+
+
tip
;
}
if
(
(
tip
!
=
end
)
&
&
(
*
tip
=
=
'
=
'
)
)
{
+
+
tip
;
while
(
(
tip
!
=
end
)
&
&
nsCRT
:
:
IsAsciiSpace
(
*
tip
)
)
{
+
+
tip
;
}
while
(
(
tip
!
=
end
)
&
&
!
(
IS_SEPARATOR
(
*
tip
)
|
|
nsCRT
:
:
IsAsciiSpace
(
*
tip
)
)
)
{
+
+
tip
;
}
}
ProcessViewportToken
(
aDocument
Substring
(
tail
tip
)
)
;
while
(
(
tip
!
=
end
)
&
&
(
IS_SEPARATOR
(
*
tip
)
|
|
nsCRT
:
:
IsAsciiSpace
(
*
tip
)
)
)
{
+
+
tip
;
}
}
}
#
undef
IS_SEPARATOR
