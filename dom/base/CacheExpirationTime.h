#
ifndef
mozilla_dom_CacheExpirationTime_h___
#
define
mozilla_dom_CacheExpirationTime_h___
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsICacheEntry
.
h
"
#
include
"
prtime
.
h
"
struct
CacheExpirationTime
{
private
:
uint32_t
mTime
;
static
constexpr
uint32_t
kAlreadyExpired
=
0
;
static
constexpr
uint32_t
kNever
=
nsICacheEntry
:
:
NO_EXPIRATION_TIME
;
constexpr
CacheExpirationTime
(
)
:
mTime
(
kNever
)
{
}
explicit
constexpr
CacheExpirationTime
(
uint32_t
aTime
)
:
mTime
(
aTime
)
{
}
static
uint32_t
SecondsFromPRTime
(
PRTime
aTime
)
{
return
uint32_t
(
int64_t
(
aTime
)
/
int64_t
(
PR_USEC_PER_SEC
)
)
;
}
public
:
static
constexpr
CacheExpirationTime
AlreadyExpired
(
)
{
return
CacheExpirationTime
(
kAlreadyExpired
)
;
}
static
constexpr
CacheExpirationTime
Never
(
)
{
return
CacheExpirationTime
(
kNever
)
;
}
static
constexpr
CacheExpirationTime
ExpireAt
(
uint32_t
aTime
)
{
return
CacheExpirationTime
(
aTime
)
;
}
bool
IsExpired
(
)
const
{
if
(
IsNever
(
)
)
{
return
false
;
}
return
mTime
<
=
SecondsFromPRTime
(
PR_Now
(
)
)
;
}
bool
IsNever
(
)
const
{
return
mTime
=
=
kNever
;
}
bool
IsShorterThan
(
const
CacheExpirationTime
&
aOther
)
const
{
return
mTime
<
aOther
.
mTime
;
}
void
SetMinimum
(
const
CacheExpirationTime
&
aOther
)
{
if
(
aOther
.
IsNever
(
)
)
{
return
;
}
if
(
IsNever
(
)
|
|
aOther
.
IsShorterThan
(
*
this
)
)
{
mTime
=
aOther
.
mTime
;
}
}
}
;
#
endif
