#
include
"
ChildIterator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
XBLChildrenElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLContentElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLShadowElement
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MatchedNodes
{
public
:
explicit
MatchedNodes
(
HTMLContentElement
*
aInsertionPoint
)
:
mIsContentElement
(
true
)
mContentElement
(
aInsertionPoint
)
{
}
explicit
MatchedNodes
(
XBLChildrenElement
*
aInsertionPoint
)
:
mIsContentElement
(
false
)
mChildrenElement
(
aInsertionPoint
)
{
}
uint32_t
Length
(
)
const
{
return
mIsContentElement
?
mContentElement
-
>
MatchedNodes
(
)
.
Length
(
)
:
mChildrenElement
-
>
InsertedChildrenLength
(
)
;
}
nsIContent
*
operator
[
]
(
int32_t
aIndex
)
const
{
return
mIsContentElement
?
mContentElement
-
>
MatchedNodes
(
)
[
aIndex
]
:
mChildrenElement
-
>
InsertedChild
(
aIndex
)
;
}
bool
IsEmpty
(
)
const
{
return
mIsContentElement
?
mContentElement
-
>
MatchedNodes
(
)
.
IsEmpty
(
)
:
!
mChildrenElement
-
>
HasInsertedChildren
(
)
;
}
protected
:
bool
mIsContentElement
;
union
{
HTMLContentElement
*
mContentElement
;
XBLChildrenElement
*
mChildrenElement
;
}
;
}
;
static
inline
MatchedNodes
GetMatchedNodesForPoint
(
nsIContent
*
aContent
)
{
if
(
aContent
-
>
NodeInfo
(
)
-
>
Equals
(
nsGkAtoms
:
:
children
kNameSpaceID_XBL
)
)
{
return
MatchedNodes
(
static_cast
<
XBLChildrenElement
*
>
(
aContent
)
)
;
}
MOZ_ASSERT
(
aContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
content
)
)
;
return
MatchedNodes
(
static_cast
<
HTMLContentElement
*
>
(
aContent
)
)
;
}
nsIContent
*
ExplicitChildIterator
:
:
GetNextChild
(
)
{
if
(
mIndexInInserted
)
{
MOZ_ASSERT
(
mChild
)
;
MOZ_ASSERT
(
nsContentUtils
:
:
IsContentInsertionPoint
(
mChild
)
)
;
MOZ_ASSERT
(
!
mDefaultChild
)
;
MatchedNodes
assignedChildren
=
GetMatchedNodesForPoint
(
mChild
)
;
if
(
mIndexInInserted
<
assignedChildren
.
Length
(
)
)
{
return
assignedChildren
[
mIndexInInserted
+
+
]
;
}
mIndexInInserted
=
0
;
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
if
(
mShadowIterator
)
{
nsIContent
*
nextChild
=
mShadowIterator
-
>
GetNextChild
(
)
;
if
(
nextChild
)
{
return
nextChild
;
}
mShadowIterator
=
nullptr
;
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
if
(
mDefaultChild
)
{
MOZ_ASSERT
(
mChild
)
;
MOZ_ASSERT
(
nsContentUtils
:
:
IsContentInsertionPoint
(
mChild
)
)
;
mDefaultChild
=
mDefaultChild
-
>
GetNextSibling
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
if
(
mIsFirst
)
{
mChild
=
mParent
-
>
GetFirstChild
(
)
;
mIsFirst
=
false
;
}
else
if
(
mChild
)
{
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
while
(
mChild
)
{
if
(
ShadowRoot
:
:
IsShadowInsertionPoint
(
mChild
)
)
{
HTMLShadowElement
*
shadowElem
=
static_cast
<
HTMLShadowElement
*
>
(
mChild
)
;
ShadowRoot
*
projectedShadow
=
shadowElem
-
>
GetOlderShadowRoot
(
)
;
if
(
projectedShadow
)
{
mShadowIterator
=
new
ExplicitChildIterator
(
projectedShadow
)
;
nsIContent
*
nextChild
=
mShadowIterator
-
>
GetNextChild
(
)
;
if
(
nextChild
)
{
return
nextChild
;
}
mShadowIterator
=
nullptr
;
}
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
if
(
nsContentUtils
:
:
IsContentInsertionPoint
(
mChild
)
)
{
MatchedNodes
assignedChildren
=
GetMatchedNodesForPoint
(
mChild
)
;
if
(
!
assignedChildren
.
IsEmpty
(
)
)
{
mIndexInInserted
=
1
;
return
assignedChildren
[
0
]
;
}
mDefaultChild
=
mChild
-
>
GetFirstChild
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
{
break
;
}
}
return
mChild
;
}
void
FlattenedChildIterator
:
:
Init
(
bool
aIgnoreXBL
)
{
if
(
aIgnoreXBL
)
{
return
;
}
nsXBLBinding
*
binding
=
mParent
-
>
OwnerDoc
(
)
-
>
BindingManager
(
)
-
>
GetBindingWithContent
(
mParent
)
;
if
(
binding
)
{
nsIContent
*
anon
=
binding
-
>
GetAnonymousContent
(
)
;
if
(
anon
)
{
mParent
=
anon
;
mXBLInvolved
=
true
;
}
}
if
(
!
mXBLInvolved
&
&
mParent
-
>
GetBindingParent
(
)
)
{
for
(
nsIContent
*
child
=
mParent
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
NodeInfo
(
)
-
>
Equals
(
nsGkAtoms
:
:
children
kNameSpaceID_XBL
)
)
{
MOZ_ASSERT
(
child
-
>
GetBindingParent
(
)
)
;
mXBLInvolved
=
true
;
break
;
}
}
}
}
bool
ExplicitChildIterator
:
:
Seek
(
nsIContent
*
aChildToFind
)
{
if
(
aChildToFind
-
>
GetParent
(
)
=
=
mParent
&
&
!
aChildToFind
-
>
IsRootOfAnonymousSubtree
(
)
)
{
MOZ_ASSERT
(
!
ShadowRoot
:
:
IsShadowInsertionPoint
(
aChildToFind
)
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsContentInsertionPoint
(
aChildToFind
)
)
;
mChild
=
aChildToFind
;
mIndexInInserted
=
0
;
mShadowIterator
=
nullptr
;
mDefaultChild
=
nullptr
;
mIsFirst
=
false
;
return
true
;
}
return
Seek
(
aChildToFind
nullptr
)
;
}
nsIContent
*
ExplicitChildIterator
:
:
Get
(
)
const
{
MOZ_ASSERT
(
!
mIsFirst
)
;
if
(
mIndexInInserted
)
{
MatchedNodes
assignedChildren
=
GetMatchedNodesForPoint
(
mChild
)
;
return
assignedChildren
[
mIndexInInserted
-
1
]
;
}
else
if
(
mShadowIterator
)
{
return
mShadowIterator
-
>
Get
(
)
;
}
return
mDefaultChild
?
mDefaultChild
:
mChild
;
}
nsIContent
*
ExplicitChildIterator
:
:
GetPreviousChild
(
)
{
if
(
mIndexInInserted
)
{
MatchedNodes
assignedChildren
=
GetMatchedNodesForPoint
(
mChild
)
;
if
(
-
-
mIndexInInserted
)
{
return
assignedChildren
[
mIndexInInserted
-
1
]
;
}
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
if
(
mShadowIterator
)
{
nsIContent
*
previousChild
=
mShadowIterator
-
>
GetPreviousChild
(
)
;
if
(
previousChild
)
{
return
previousChild
;
}
mShadowIterator
=
nullptr
;
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
if
(
mDefaultChild
)
{
mDefaultChild
=
mDefaultChild
-
>
GetPreviousSibling
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
if
(
mIsFirst
)
{
return
nullptr
;
}
else
if
(
mChild
)
{
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
{
mChild
=
mParent
-
>
GetLastChild
(
)
;
}
while
(
mChild
)
{
if
(
ShadowRoot
:
:
IsShadowInsertionPoint
(
mChild
)
)
{
HTMLShadowElement
*
shadowElem
=
static_cast
<
HTMLShadowElement
*
>
(
mChild
)
;
ShadowRoot
*
projectedShadow
=
shadowElem
-
>
GetOlderShadowRoot
(
)
;
if
(
projectedShadow
)
{
mShadowIterator
=
new
ExplicitChildIterator
(
projectedShadow
false
)
;
nsIContent
*
previousChild
=
mShadowIterator
-
>
GetPreviousChild
(
)
;
if
(
previousChild
)
{
return
previousChild
;
}
mShadowIterator
=
nullptr
;
}
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
if
(
nsContentUtils
:
:
IsContentInsertionPoint
(
mChild
)
)
{
MatchedNodes
assignedChildren
=
GetMatchedNodesForPoint
(
mChild
)
;
if
(
!
assignedChildren
.
IsEmpty
(
)
)
{
mIndexInInserted
=
assignedChildren
.
Length
(
)
;
return
assignedChildren
[
mIndexInInserted
-
1
]
;
}
mDefaultChild
=
mChild
-
>
GetLastChild
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
{
break
;
}
}
if
(
!
mChild
)
{
mIsFirst
=
true
;
}
return
mChild
;
}
nsIContent
*
AllChildrenIterator
:
:
Get
(
)
const
{
switch
(
mPhase
)
{
case
eAtBeforeKid
:
{
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
MOZ_ASSERT
(
frame
"
No
frame
at
eAtBeforeKid
phase
"
)
;
nsIFrame
*
beforeFrame
=
nsLayoutUtils
:
:
GetBeforeFrame
(
frame
)
;
MOZ_ASSERT
(
beforeFrame
"
No
content
before
frame
at
eAtBeforeKid
phase
"
)
;
return
beforeFrame
-
>
GetContent
(
)
;
}
case
eAtExplicitKids
:
return
ExplicitChildIterator
:
:
Get
(
)
;
case
eAtAnonKids
:
return
mAnonKids
[
mAnonKidsIdx
]
;
case
eAtAfterKid
:
{
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
MOZ_ASSERT
(
frame
"
No
frame
at
eAtAfterKid
phase
"
)
;
nsIFrame
*
afterFrame
=
nsLayoutUtils
:
:
GetAfterFrame
(
frame
)
;
MOZ_ASSERT
(
afterFrame
"
No
content
before
frame
at
eAtBeforeKid
phase
"
)
;
return
afterFrame
-
>
GetContent
(
)
;
}
default
:
return
nullptr
;
}
}
bool
AllChildrenIterator
:
:
Seek
(
nsIContent
*
aChildToFind
)
{
if
(
mPhase
=
=
eAtBegin
|
|
mPhase
=
=
eAtBeforeKid
)
{
mPhase
=
eAtExplicitKids
;
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsIFrame
*
beforeFrame
=
nsLayoutUtils
:
:
GetBeforeFrame
(
frame
)
;
if
(
beforeFrame
)
{
if
(
beforeFrame
-
>
GetContent
(
)
=
=
aChildToFind
)
{
mPhase
=
eAtBeforeKid
;
return
true
;
}
}
}
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
if
(
ExplicitChildIterator
:
:
Seek
(
aChildToFind
)
)
{
return
true
;
}
mPhase
=
eAtAnonKids
;
}
nsIContent
*
child
=
nullptr
;
do
{
child
=
GetNextChild
(
)
;
}
while
(
child
&
&
child
!
=
aChildToFind
)
;
return
child
=
=
aChildToFind
;
}
void
AllChildrenIterator
:
:
AppendNativeAnonymousChildren
(
)
{
AppendNativeAnonymousChildrenFromFrame
(
mOriginalContent
-
>
GetPrimaryFrame
(
)
)
;
if
(
mOriginalContent
=
=
mOriginalContent
-
>
OwnerDoc
(
)
-
>
GetRootElement
(
)
)
{
nsIPresShell
*
presShell
=
mOriginalContent
-
>
OwnerDoc
(
)
-
>
GetShell
(
)
;
nsIFrame
*
scrollFrame
=
presShell
?
presShell
-
>
GetRootScrollFrame
(
)
:
nullptr
;
if
(
scrollFrame
)
{
AppendNativeAnonymousChildrenFromFrame
(
scrollFrame
)
;
}
}
}
void
AllChildrenIterator
:
:
AppendNativeAnonymousChildrenFromFrame
(
nsIFrame
*
aFrame
)
{
nsIAnonymousContentCreator
*
ac
=
do_QueryFrame
(
aFrame
)
;
if
(
ac
)
{
ac
-
>
AppendAnonymousContentTo
(
mAnonKids
mFlags
)
;
}
}
nsIContent
*
AllChildrenIterator
:
:
GetNextChild
(
)
{
if
(
mPhase
=
=
eAtBegin
)
{
mPhase
=
eAtExplicitKids
;
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsIFrame
*
beforeFrame
=
nsLayoutUtils
:
:
GetBeforeFrame
(
frame
)
;
if
(
beforeFrame
)
{
mPhase
=
eAtBeforeKid
;
return
beforeFrame
-
>
GetContent
(
)
;
}
}
}
if
(
mPhase
=
=
eAtBeforeKid
)
{
mPhase
=
eAtExplicitKids
;
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
nsIContent
*
kid
=
ExplicitChildIterator
:
:
GetNextChild
(
)
;
if
(
kid
)
{
return
kid
;
}
mPhase
=
eAtAnonKids
;
}
if
(
mPhase
=
=
eAtAnonKids
)
{
if
(
mAnonKids
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
mAnonKidsIdx
=
=
UINT32_MAX
)
;
AppendNativeAnonymousChildren
(
)
;
mAnonKidsIdx
=
0
;
}
else
{
if
(
mAnonKidsIdx
=
=
UINT32_MAX
)
{
mAnonKidsIdx
=
0
;
}
else
{
mAnonKidsIdx
+
+
;
}
}
if
(
mAnonKidsIdx
<
mAnonKids
.
Length
(
)
)
{
return
mAnonKids
[
mAnonKidsIdx
]
;
}
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsIFrame
*
afterFrame
=
nsLayoutUtils
:
:
GetAfterFrame
(
frame
)
;
if
(
afterFrame
)
{
mPhase
=
eAtAfterKid
;
return
afterFrame
-
>
GetContent
(
)
;
}
}
}
mPhase
=
eAtEnd
;
return
nullptr
;
}
nsIContent
*
AllChildrenIterator
:
:
GetPreviousChild
(
)
{
if
(
mPhase
=
=
eAtEnd
)
{
MOZ_ASSERT
(
mAnonKidsIdx
=
=
mAnonKids
.
Length
(
)
)
;
mPhase
=
eAtAnonKids
;
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsIFrame
*
afterFrame
=
nsLayoutUtils
:
:
GetAfterFrame
(
frame
)
;
if
(
afterFrame
)
{
mPhase
=
eAtAfterKid
;
return
afterFrame
-
>
GetContent
(
)
;
}
}
}
if
(
mPhase
=
=
eAtAfterKid
)
{
mPhase
=
eAtAnonKids
;
}
if
(
mPhase
=
=
eAtAnonKids
)
{
if
(
mAnonKids
.
IsEmpty
(
)
)
{
AppendNativeAnonymousChildren
(
)
;
mAnonKidsIdx
=
mAnonKids
.
Length
(
)
;
}
-
-
mAnonKidsIdx
;
if
(
mAnonKidsIdx
<
mAnonKids
.
Length
(
)
)
{
return
mAnonKids
[
mAnonKidsIdx
]
;
}
mPhase
=
eAtExplicitKids
;
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
nsIContent
*
kid
=
ExplicitChildIterator
:
:
GetPreviousChild
(
)
;
if
(
kid
)
{
return
kid
;
}
nsIFrame
*
frame
=
mOriginalContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsIFrame
*
beforeFrame
=
nsLayoutUtils
:
:
GetBeforeFrame
(
frame
)
;
if
(
beforeFrame
)
{
mPhase
=
eAtBeforeKid
;
return
beforeFrame
-
>
GetContent
(
)
;
}
}
}
mPhase
=
eAtBegin
;
return
nullptr
;
}
static
bool
IsNativeAnonymousImplementationOfPseudoElement
(
nsIContent
*
aContent
)
{
nsIFrame
*
f
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
f
)
{
return
false
;
}
CSSPseudoElementType
pseudoType
=
f
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
;
if
(
pseudoType
=
=
CSSPseudoElementType
:
:
AnonBox
)
{
MOZ_ASSERT
(
f
-
>
StyleContext
(
)
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
mozText
|
|
f
-
>
StyleContext
(
)
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
tableWrapper
)
;
return
false
;
}
bool
isImpl
=
pseudoType
!
=
CSSPseudoElementType
:
:
NotPseudo
;
MOZ_ASSERT_IF
(
isImpl
aContent
-
>
IsRootOfNativeAnonymousSubtree
(
)
)
;
return
isImpl
;
}
bool
StyleChildrenIterator
:
:
IsNeeded
(
Element
*
aElement
)
{
if
(
aElement
-
>
IsInAnonymousSubtree
(
)
)
{
return
true
;
}
if
(
aElement
-
>
HasFlag
(
NODE_MAY_BE_IN_BINDING_MNGR
)
)
{
nsBindingManager
*
manager
=
aElement
-
>
OwnerDoc
(
)
-
>
BindingManager
(
)
;
nsXBLBinding
*
binding
=
manager
-
>
GetBindingWithContent
(
aElement
)
;
if
(
binding
&
&
binding
-
>
GetAnonymousContent
(
)
)
{
return
true
;
}
}
nsIAnonymousContentCreator
*
ac
=
do_QueryFrame
(
aElement
-
>
GetPrimaryFrame
(
)
)
;
if
(
ac
)
{
return
true
;
}
if
(
aElement
=
=
aElement
-
>
OwnerDoc
(
)
-
>
GetRootElement
(
)
)
{
return
true
;
}
return
false
;
}
nsIContent
*
StyleChildrenIterator
:
:
GetNextChild
(
)
{
while
(
nsIContent
*
child
=
AllChildrenIterator
:
:
GetNextChild
(
)
)
{
if
(
IsNativeAnonymousImplementationOfPseudoElement
(
child
)
)
{
}
else
{
return
child
;
}
}
return
nullptr
;
}
}
}
