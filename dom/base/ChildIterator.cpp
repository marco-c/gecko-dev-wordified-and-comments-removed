#
include
"
ChildIterator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSlotElement
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
namespace
mozilla
{
namespace
dom
{
ExplicitChildIterator
:
:
ExplicitChildIterator
(
const
nsIContent
*
aParent
bool
aStartAtBeginning
)
:
mParent
(
aParent
)
mChild
(
nullptr
)
mDefaultChild
(
nullptr
)
mIsFirst
(
aStartAtBeginning
)
mIndexInInserted
(
0
)
{
mParentAsSlot
=
HTMLSlotElement
:
:
FromNode
(
mParent
)
;
}
nsIContent
*
ExplicitChildIterator
:
:
GetNextChild
(
)
{
if
(
mIndexInInserted
)
{
MOZ_ASSERT
(
mChild
)
;
MOZ_ASSERT
(
!
mDefaultChild
)
;
if
(
mParentAsSlot
)
{
const
nsTArray
<
RefPtr
<
nsINode
>
>
&
assignedNodes
=
mParentAsSlot
-
>
AssignedNodes
(
)
;
mChild
=
(
mIndexInInserted
<
assignedNodes
.
Length
(
)
)
?
assignedNodes
[
mIndexInInserted
+
+
]
-
>
AsContent
(
)
:
nullptr
;
if
(
!
mChild
)
{
mIndexInInserted
=
0
;
}
return
mChild
;
}
MOZ_ASSERT_UNREACHABLE
(
"
This
needs
to
be
revisited
"
)
;
}
else
if
(
mDefaultChild
)
{
MOZ_ASSERT
(
mChild
)
;
MOZ_ASSERT
(
mChild
-
>
IsActiveChildrenElement
(
)
)
;
mDefaultChild
=
mDefaultChild
-
>
GetNextSibling
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
else
if
(
mIsFirst
)
{
if
(
mParentAsSlot
)
{
const
nsTArray
<
RefPtr
<
nsINode
>
>
&
assignedNodes
=
mParentAsSlot
-
>
AssignedNodes
(
)
;
if
(
!
assignedNodes
.
IsEmpty
(
)
)
{
mIndexInInserted
=
1
;
mChild
=
assignedNodes
[
0
]
-
>
AsContent
(
)
;
mIsFirst
=
false
;
return
mChild
;
}
}
mChild
=
mParent
-
>
GetFirstChild
(
)
;
mIsFirst
=
false
;
}
else
if
(
mChild
)
{
mChild
=
mChild
-
>
GetNextSibling
(
)
;
}
while
(
mChild
)
{
if
(
mChild
-
>
IsActiveChildrenElement
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
This
needs
to
be
revisited
"
)
;
}
else
{
break
;
}
}
return
mChild
;
}
void
FlattenedChildIterator
:
:
Init
(
bool
aIgnoreXBL
)
{
if
(
aIgnoreXBL
)
{
return
;
}
if
(
mParent
-
>
IsElement
(
)
)
{
if
(
ShadowRoot
*
shadow
=
mParent
-
>
AsElement
(
)
-
>
GetShadowRoot
(
)
)
{
mParent
=
shadow
;
mXBLInvolved
=
true
;
return
;
}
if
(
mParentAsSlot
)
{
mXBLInvolved
=
true
;
return
;
}
}
}
bool
ExplicitChildIterator
:
:
Seek
(
const
nsIContent
*
aChildToFind
)
{
if
(
aChildToFind
-
>
GetParent
(
)
=
=
mParent
&
&
!
aChildToFind
-
>
IsRootOfAnonymousSubtree
(
)
)
{
mChild
=
const_cast
<
nsIContent
*
>
(
aChildToFind
)
;
mIndexInInserted
=
0
;
mDefaultChild
=
nullptr
;
mIsFirst
=
false
;
MOZ_ASSERT
(
!
mChild
-
>
IsActiveChildrenElement
(
)
)
;
return
true
;
}
return
Seek
(
aChildToFind
nullptr
)
;
}
nsIContent
*
ExplicitChildIterator
:
:
Get
(
)
const
{
MOZ_ASSERT
(
!
mIsFirst
)
;
if
(
mParentAsSlot
)
{
return
mChild
;
}
if
(
mIndexInInserted
)
{
MOZ_ASSERT_UNREACHABLE
(
"
This
needs
to
be
revisited
"
)
;
}
return
mDefaultChild
?
mDefaultChild
:
mChild
;
}
nsIContent
*
ExplicitChildIterator
:
:
GetPreviousChild
(
)
{
if
(
mIndexInInserted
)
{
if
(
mParentAsSlot
)
{
const
nsTArray
<
RefPtr
<
nsINode
>
>
&
assignedNodes
=
mParentAsSlot
-
>
AssignedNodes
(
)
;
mChild
=
(
-
-
mIndexInInserted
)
?
assignedNodes
[
mIndexInInserted
-
1
]
-
>
AsContent
(
)
:
nullptr
;
if
(
!
mChild
)
{
mIsFirst
=
true
;
}
return
mChild
;
}
MOZ_ASSERT_UNREACHABLE
(
"
This
needs
to
be
revisited
"
)
;
}
else
if
(
mDefaultChild
)
{
mDefaultChild
=
mDefaultChild
-
>
GetPreviousSibling
(
)
;
if
(
mDefaultChild
)
{
return
mDefaultChild
;
}
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
if
(
mIsFirst
)
{
return
nullptr
;
}
else
if
(
mChild
)
{
mChild
=
mChild
-
>
GetPreviousSibling
(
)
;
}
else
{
if
(
mParentAsSlot
)
{
const
nsTArray
<
RefPtr
<
nsINode
>
>
&
assignedNodes
=
mParentAsSlot
-
>
AssignedNodes
(
)
;
if
(
!
assignedNodes
.
IsEmpty
(
)
)
{
mIndexInInserted
=
assignedNodes
.
Length
(
)
;
mChild
=
assignedNodes
[
mIndexInInserted
-
1
]
-
>
AsContent
(
)
;
return
mChild
;
}
}
mChild
=
mParent
-
>
GetLastChild
(
)
;
}
while
(
mChild
)
{
if
(
mChild
-
>
IsActiveChildrenElement
(
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
This
needs
to
be
revisited
"
)
;
}
else
{
break
;
}
}
if
(
!
mChild
)
{
mIsFirst
=
true
;
}
return
mChild
;
}
nsIContent
*
AllChildrenIterator
:
:
Get
(
)
const
{
switch
(
mPhase
)
{
case
eAtMarkerKid
:
{
Element
*
marker
=
nsLayoutUtils
:
:
GetMarkerPseudo
(
mOriginalContent
)
;
MOZ_ASSERT
(
marker
"
No
content
marker
frame
at
eAtMarkerKid
phase
"
)
;
return
marker
;
}
case
eAtBeforeKid
:
{
Element
*
before
=
nsLayoutUtils
:
:
GetBeforePseudo
(
mOriginalContent
)
;
MOZ_ASSERT
(
before
"
No
content
before
frame
at
eAtBeforeKid
phase
"
)
;
return
before
;
}
case
eAtExplicitKids
:
return
ExplicitChildIterator
:
:
Get
(
)
;
case
eAtAnonKids
:
return
mAnonKids
[
mAnonKidsIdx
]
;
case
eAtAfterKid
:
{
Element
*
after
=
nsLayoutUtils
:
:
GetAfterPseudo
(
mOriginalContent
)
;
MOZ_ASSERT
(
after
"
No
content
after
frame
at
eAtAfterKid
phase
"
)
;
return
after
;
}
default
:
return
nullptr
;
}
}
bool
AllChildrenIterator
:
:
Seek
(
const
nsIContent
*
aChildToFind
)
{
if
(
mPhase
=
=
eAtBegin
|
|
mPhase
=
=
eAtMarkerKid
)
{
mPhase
=
eAtBeforeKid
;
Element
*
markerPseudo
=
nsLayoutUtils
:
:
GetMarkerPseudo
(
mOriginalContent
)
;
if
(
markerPseudo
&
&
markerPseudo
=
=
aChildToFind
)
{
mPhase
=
eAtMarkerKid
;
return
true
;
}
}
if
(
mPhase
=
=
eAtBeforeKid
)
{
mPhase
=
eAtExplicitKids
;
Element
*
beforePseudo
=
nsLayoutUtils
:
:
GetBeforePseudo
(
mOriginalContent
)
;
if
(
beforePseudo
&
&
beforePseudo
=
=
aChildToFind
)
{
mPhase
=
eAtBeforeKid
;
return
true
;
}
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
if
(
ExplicitChildIterator
:
:
Seek
(
aChildToFind
)
)
{
return
true
;
}
mPhase
=
eAtAnonKids
;
}
nsIContent
*
child
=
nullptr
;
do
{
child
=
GetNextChild
(
)
;
}
while
(
child
&
&
child
!
=
aChildToFind
)
;
return
child
=
=
aChildToFind
;
}
void
AllChildrenIterator
:
:
AppendNativeAnonymousChildren
(
)
{
nsContentUtils
:
:
AppendNativeAnonymousChildren
(
mOriginalContent
mAnonKids
mFlags
)
;
}
nsIContent
*
AllChildrenIterator
:
:
GetNextChild
(
)
{
if
(
mPhase
=
=
eAtBegin
)
{
Element
*
markerContent
=
nsLayoutUtils
:
:
GetMarkerPseudo
(
mOriginalContent
)
;
if
(
markerContent
)
{
mPhase
=
eAtMarkerKid
;
return
markerContent
;
}
}
if
(
mPhase
=
=
eAtBegin
|
|
mPhase
=
=
eAtMarkerKid
)
{
mPhase
=
eAtExplicitKids
;
Element
*
beforeContent
=
nsLayoutUtils
:
:
GetBeforePseudo
(
mOriginalContent
)
;
if
(
beforeContent
)
{
mPhase
=
eAtBeforeKid
;
return
beforeContent
;
}
}
if
(
mPhase
=
=
eAtBeforeKid
)
{
mPhase
=
eAtExplicitKids
;
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
nsIContent
*
kid
=
ExplicitChildIterator
:
:
GetNextChild
(
)
;
if
(
kid
)
{
return
kid
;
}
mPhase
=
eAtAnonKids
;
}
if
(
mPhase
=
=
eAtAnonKids
)
{
if
(
mAnonKids
.
IsEmpty
(
)
)
{
MOZ_ASSERT
(
mAnonKidsIdx
=
=
UINT32_MAX
)
;
AppendNativeAnonymousChildren
(
)
;
mAnonKidsIdx
=
0
;
}
else
{
if
(
mAnonKidsIdx
=
=
UINT32_MAX
)
{
mAnonKidsIdx
=
0
;
}
else
{
mAnonKidsIdx
+
+
;
}
}
if
(
mAnonKidsIdx
<
mAnonKids
.
Length
(
)
)
{
return
mAnonKids
[
mAnonKidsIdx
]
;
}
Element
*
afterContent
=
nsLayoutUtils
:
:
GetAfterPseudo
(
mOriginalContent
)
;
if
(
afterContent
)
{
mPhase
=
eAtAfterKid
;
return
afterContent
;
}
}
mPhase
=
eAtEnd
;
return
nullptr
;
}
nsIContent
*
AllChildrenIterator
:
:
GetPreviousChild
(
)
{
if
(
mPhase
=
=
eAtEnd
)
{
MOZ_ASSERT
(
mAnonKidsIdx
=
=
mAnonKids
.
Length
(
)
)
;
mPhase
=
eAtAnonKids
;
Element
*
afterContent
=
nsLayoutUtils
:
:
GetAfterPseudo
(
mOriginalContent
)
;
if
(
afterContent
)
{
mPhase
=
eAtAfterKid
;
return
afterContent
;
}
}
if
(
mPhase
=
=
eAtAfterKid
)
{
mPhase
=
eAtAnonKids
;
}
if
(
mPhase
=
=
eAtAnonKids
)
{
if
(
mAnonKids
.
IsEmpty
(
)
)
{
AppendNativeAnonymousChildren
(
)
;
mAnonKidsIdx
=
mAnonKids
.
Length
(
)
;
}
-
-
mAnonKidsIdx
;
if
(
mAnonKidsIdx
<
mAnonKids
.
Length
(
)
)
{
return
mAnonKids
[
mAnonKidsIdx
]
;
}
mPhase
=
eAtExplicitKids
;
}
if
(
mPhase
=
=
eAtExplicitKids
)
{
nsIContent
*
kid
=
ExplicitChildIterator
:
:
GetPreviousChild
(
)
;
if
(
kid
)
{
return
kid
;
}
Element
*
beforeContent
=
nsLayoutUtils
:
:
GetBeforePseudo
(
mOriginalContent
)
;
if
(
beforeContent
)
{
mPhase
=
eAtBeforeKid
;
return
beforeContent
;
}
}
if
(
mPhase
=
=
eAtExplicitKids
|
|
mPhase
=
=
eAtBeforeKid
)
{
Element
*
markerContent
=
nsLayoutUtils
:
:
GetMarkerPseudo
(
mOriginalContent
)
;
if
(
markerContent
)
{
mPhase
=
eAtMarkerKid
;
return
markerContent
;
}
}
mPhase
=
eAtBegin
;
return
nullptr
;
}
}
}
