#
ifndef
mozilla_dom_HighlightRegistry_h
#
define
mozilla_dom_HighlightRegistry_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CompactPair
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsFrameSelection
;
namespace
mozilla
{
class
ErrorResult
;
}
namespace
mozilla
:
:
dom
{
class
AbstractRange
;
class
Document
;
class
Highlight
;
class
HighlightRegistry
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
HighlightRegistry
)
public
:
explicit
HighlightRegistry
(
Document
*
aDocument
)
;
protected
:
~
HighlightRegistry
(
)
;
public
:
MOZ_CAN_RUN_SCRIPT
void
AddHighlightSelectionsToFrameSelection
(
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeAddRangeToHighlightSelection
(
AbstractRange
&
aRange
Highlight
&
aHighlight
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeRemoveRangeFromHighlightSelection
(
AbstractRange
&
aRange
Highlight
&
aHighlight
)
;
MOZ_CAN_RUN_SCRIPT
void
RemoveHighlightSelection
(
Highlight
&
aHighlight
)
;
Document
*
GetParentObject
(
)
const
{
return
mDocument
;
}
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MOZ_CAN_RUN_SCRIPT
void
Set
(
const
nsAString
&
aKey
Highlight
&
aValue
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Clear
(
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
bool
Delete
(
const
nsAString
&
aKey
ErrorResult
&
aRv
)
;
private
:
RefPtr
<
nsFrameSelection
>
GetFrameSelection
(
)
;
RefPtr
<
Document
>
mDocument
;
nsTArray
<
CompactPair
<
RefPtr
<
const
nsAtom
>
RefPtr
<
Highlight
>
>
>
mHighlightsOrdered
;
}
;
}
#
endif
