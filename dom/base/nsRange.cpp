#
include
"
nscore
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsINodeList
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsTextFrame
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
ContentIterator
.
h
"
#
include
"
mozilla
/
dom
/
CharacterData
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
DocumentType
.
h
"
#
include
"
mozilla
/
dom
/
RangeBinding
.
h
"
#
include
"
mozilla
/
dom
/
DOMRect
.
h
"
#
include
"
mozilla
/
dom
/
DOMStringList
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RangeUtils
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsStyleStructInlines
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
mozilla
/
dom
/
InspectorFontFace
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
template
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
const
RangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
ErrorResult
&
aRv
)
;
template
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
const
RangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
ErrorResult
&
aRv
)
;
template
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
const
RawRangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
ErrorResult
&
aRv
)
;
template
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
const
RawRangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
ErrorResult
&
aRv
)
;
template
nsresult
nsRange
:
:
SetStartAndEnd
(
const
RangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
)
;
template
nsresult
nsRange
:
:
SetStartAndEnd
(
const
RangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
)
;
template
nsresult
nsRange
:
:
SetStartAndEnd
(
const
RawRangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
)
;
template
nsresult
nsRange
:
:
SetStartAndEnd
(
const
RawRangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
)
;
template
void
nsRange
:
:
DoSetRange
(
const
RangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
nsINode
*
aRootNode
bool
aNotInsertedYet
)
;
template
void
nsRange
:
:
DoSetRange
(
const
RangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
nsINode
*
aRootNode
bool
aNotInsertedYet
)
;
template
void
nsRange
:
:
DoSetRange
(
const
RawRangeBoundary
&
aStartBoundary
const
RangeBoundary
&
aEndBoundary
nsINode
*
aRootNode
bool
aNotInsertedYet
)
;
template
void
nsRange
:
:
DoSetRange
(
const
RawRangeBoundary
&
aStartBoundary
const
RawRangeBoundary
&
aEndBoundary
nsINode
*
aRootNode
bool
aNotInsertedYet
)
;
JSObject
*
nsRange
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Range_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
DocGroup
*
nsRange
:
:
GetDocGroup
(
)
const
{
return
mOwner
?
mOwner
-
>
GetDocGroup
(
)
:
nullptr
;
}
static
void
InvalidateAllFrames
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
"
bad
arg
"
)
;
nsIFrame
*
frame
=
nullptr
;
switch
(
aNode
-
>
NodeType
(
)
)
{
case
nsINode
:
:
TEXT_NODE
:
case
nsINode
:
:
ELEMENT_NODE
:
{
nsIContent
*
content
=
static_cast
<
nsIContent
*
>
(
aNode
)
;
frame
=
content
-
>
GetPrimaryFrame
(
)
;
break
;
}
case
nsINode
:
:
DOCUMENT_NODE
:
{
Document
*
doc
=
static_cast
<
Document
*
>
(
aNode
)
;
PresShell
*
presShell
=
doc
?
doc
-
>
GetPresShell
(
)
:
nullptr
;
frame
=
presShell
?
presShell
-
>
GetRootFrame
(
)
:
nullptr
;
break
;
}
}
for
(
nsIFrame
*
f
=
frame
;
f
;
f
=
f
-
>
GetNextContinuation
(
)
)
{
f
-
>
InvalidateFrameSubtree
(
)
;
}
}
nsTArray
<
RefPtr
<
nsRange
>
>
*
nsRange
:
:
sCachedRanges
=
nullptr
;
nsRange
:
:
~
nsRange
(
)
{
NS_ASSERTION
(
!
IsInSelection
(
)
"
deleting
nsRange
that
is
in
use
"
)
;
DoSetRange
(
RawRangeBoundary
(
)
RawRangeBoundary
(
)
nullptr
)
;
}
nsRange
:
:
nsRange
(
nsINode
*
aNode
)
:
AbstractRange
(
aNode
)
mRegisteredClosestCommonInclusiveAncestor
(
nullptr
)
mNextStartRef
(
nullptr
)
mNextEndRef
(
nullptr
)
{
static_assert
(
sizeof
(
nsRange
)
<
=
192
"
nsRange
size
shouldn
'
t
be
increased
as
far
as
possible
"
)
;
}
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
if
(
!
sCachedRanges
|
|
sCachedRanges
-
>
IsEmpty
(
)
)
{
return
do_AddRef
(
new
nsRange
(
aNode
)
)
;
}
RefPtr
<
nsRange
>
range
=
sCachedRanges
-
>
PopLastElement
(
)
.
forget
(
)
;
range
-
>
Init
(
aNode
)
;
return
range
.
forget
(
)
;
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
already_AddRefed
<
nsRange
>
nsRange
:
:
Create
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
ErrorResult
&
aRv
)
{
RefPtr
<
nsRange
>
range
=
nsRange
:
:
Create
(
aStartBoundary
.
Container
(
)
)
;
aRv
=
range
-
>
SetStartAndEnd
(
aStartBoundary
aEndBoundary
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
return
range
.
forget
(
)
;
}
NS_IMPL_MAIN_THREAD_ONLY_CYCLE_COLLECTING_ADDREF
(
nsRange
)
NS_IMPL_MAIN_THREAD_ONLY_CYCLE_COLLECTING_RELEASE_WITH_INTERRUPTABLE_LAST_RELEASE
(
nsRange
DoSetRange
(
RawRangeBoundary
(
)
RawRangeBoundary
(
)
nullptr
)
MaybeInterruptLastRelease
(
)
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsRange
)
NS_INTERFACE_MAP_ENTRY
(
nsIMutationObserver
)
NS_INTERFACE_MAP_END_INHERITING
(
AbstractRange
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
nsRange
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
nsRange
AbstractRange
)
if
(
tmp
-
>
mRegisteredClosestCommonInclusiveAncestor
)
{
tmp
-
>
UnregisterClosestCommonInclusiveAncestor
(
tmp
-
>
mRegisteredClosestCommonInclusiveAncestor
true
)
;
}
tmp
-
>
Reset
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
tmp
-
>
isInList
(
)
"
Shouldn
'
t
be
registered
now
that
we
'
re
unlinking
"
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
nsRange
AbstractRange
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRoot
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
nsRange
AbstractRange
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
bool
nsRange
:
:
MaybeInterruptLastRelease
(
)
{
bool
interrupt
=
AbstractRange
:
:
MaybeCacheToReuse
(
*
this
)
;
MOZ_ASSERT
(
!
interrupt
|
|
IsCleared
(
)
)
;
return
interrupt
;
}
static
void
MarkDescendants
(
nsINode
*
aNode
)
{
if
(
!
aNode
-
>
IsMaybeSelected
(
)
)
{
nsINode
*
node
=
aNode
-
>
GetNextNode
(
aNode
)
;
while
(
node
)
{
node
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
if
(
!
node
-
>
IsClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
node
=
node
-
>
GetNextNode
(
aNode
)
;
}
else
{
node
=
node
-
>
GetNextNonChildNode
(
aNode
)
;
}
}
}
}
static
void
UnmarkDescendants
(
nsINode
*
aNode
)
{
if
(
!
aNode
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
nsINode
*
node
=
aNode
-
>
GetNextNode
(
aNode
)
;
while
(
node
)
{
node
-
>
ClearDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
if
(
!
node
-
>
IsClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
node
=
node
-
>
GetNextNode
(
aNode
)
;
}
else
{
node
=
node
-
>
GetNextNonChildNode
(
aNode
)
;
}
}
}
}
void
nsRange
:
:
RegisterClosestCommonInclusiveAncestor
(
nsINode
*
aNode
)
{
MOZ_ASSERT
(
aNode
"
bad
arg
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
IsInSelection
(
)
"
registering
range
not
in
selection
"
)
;
mRegisteredClosestCommonInclusiveAncestor
=
aNode
;
MarkDescendants
(
aNode
)
;
UniquePtr
<
LinkedList
<
nsRange
>
>
&
ranges
=
aNode
-
>
GetClosestCommonInclusiveAncestorRangesPtr
(
)
;
if
(
!
ranges
)
{
ranges
=
MakeUnique
<
LinkedList
<
nsRange
>
>
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
isInList
(
)
)
;
ranges
-
>
insertBack
(
this
)
;
aNode
-
>
SetClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
void
nsRange
:
:
UnregisterClosestCommonInclusiveAncestor
(
nsINode
*
aNode
bool
aIsUnlinking
)
{
MOZ_ASSERT
(
aNode
"
bad
arg
"
)
;
NS_ASSERTION
(
aNode
-
>
IsClosestCommonInclusiveAncestorForRangeInSelection
(
)
"
wrong
node
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aNode
=
=
mRegisteredClosestCommonInclusiveAncestor
"
wrong
node
"
)
;
LinkedList
<
nsRange
>
*
ranges
=
aNode
-
>
GetExistingClosestCommonInclusiveAncestorRanges
(
)
;
MOZ_ASSERT
(
ranges
)
;
mRegisteredClosestCommonInclusiveAncestor
=
nullptr
;
#
ifdef
DEBUG
bool
found
=
false
;
for
(
nsRange
*
range
:
*
ranges
)
{
if
(
range
=
=
this
)
{
found
=
true
;
break
;
}
}
MOZ_ASSERT
(
found
"
We
should
be
in
the
list
on
our
registered
common
ancestor
"
)
;
#
endif
remove
(
)
;
if
(
!
aIsUnlinking
&
&
ranges
-
>
isEmpty
(
)
)
{
aNode
-
>
ClearClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
UnmarkDescendants
(
aNode
)
;
}
}
void
nsRange
:
:
AdjustNextRefsOnCharacterDataSplit
(
const
nsIContent
&
aContent
const
CharacterDataChangeInfo
&
aInfo
)
{
nsINode
*
parentNode
=
aContent
.
GetParentNode
(
)
;
if
(
parentNode
=
=
mEnd
.
Container
(
)
)
{
if
(
&
aContent
=
=
mEnd
.
Ref
(
)
)
{
MOZ_ASSERT
(
aInfo
.
mDetails
-
>
mNextSibling
)
;
mNextEndRef
=
aInfo
.
mDetails
-
>
mNextSibling
;
}
}
if
(
parentNode
=
=
mStart
.
Container
(
)
)
{
if
(
&
aContent
=
=
mStart
.
Ref
(
)
)
{
MOZ_ASSERT
(
aInfo
.
mDetails
-
>
mNextSibling
)
;
mNextStartRef
=
aInfo
.
mDetails
-
>
mNextSibling
;
}
}
}
nsRange
:
:
RangeBoundariesAndRoot
nsRange
:
:
DetermineNewRangeBoundariesAndRootOnCharacterDataMerge
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
aInfo
)
const
{
RawRangeBoundary
newStart
;
RawRangeBoundary
newEnd
;
nsINode
*
newRoot
=
nullptr
;
nsIContent
*
removed
=
aInfo
.
mDetails
-
>
mNextSibling
;
if
(
removed
=
=
mStart
.
Container
(
)
)
{
CheckedUint32
newStartOffset
{
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
}
;
newStartOffset
+
=
aInfo
.
mChangeStart
;
newStart
=
{
aContent
newStartOffset
.
value
(
)
}
;
if
(
MOZ_UNLIKELY
(
removed
=
=
mRoot
)
)
{
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
newStart
.
Container
(
)
)
;
}
}
if
(
removed
=
=
mEnd
.
Container
(
)
)
{
CheckedUint32
newEndOffset
{
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
}
;
newEndOffset
+
=
aInfo
.
mChangeStart
;
newEnd
=
{
aContent
newEndOffset
.
value
(
)
}
;
if
(
MOZ_UNLIKELY
(
removed
=
=
mRoot
)
)
{
newRoot
=
{
RangeUtils
:
:
ComputeRootNode
(
newEnd
.
Container
(
)
)
}
;
}
}
nsINode
*
parentNode
=
aContent
-
>
GetParentNode
(
)
;
if
(
parentNode
=
=
mStart
.
Container
(
)
&
&
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
>
0
&
&
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
parentNode
-
>
GetChildCount
(
)
&
&
removed
=
=
mStart
.
GetChildAtOffset
(
)
)
{
newStart
=
{
aContent
aInfo
.
mChangeStart
}
;
}
if
(
parentNode
=
=
mEnd
.
Container
(
)
&
&
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
>
0
&
&
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
parentNode
-
>
GetChildCount
(
)
&
&
removed
=
=
mEnd
.
GetChildAtOffset
(
)
)
{
newEnd
=
{
aContent
aInfo
.
mChangeEnd
}
;
}
return
{
newStart
newEnd
newRoot
}
;
}
void
nsRange
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
aInfo
)
{
MOZ_ASSERT
(
aContent
)
;
MOZ_ASSERT
(
mIsPositioned
)
;
MOZ_ASSERT
(
!
mNextEndRef
)
;
MOZ_ASSERT
(
!
mNextStartRef
)
;
nsINode
*
newRoot
=
nullptr
;
RawRangeBoundary
newStart
;
RawRangeBoundary
newEnd
;
if
(
aInfo
.
mDetails
&
&
aInfo
.
mDetails
-
>
mType
=
=
CharacterDataChangeInfo
:
:
Details
:
:
eSplit
)
{
AdjustNextRefsOnCharacterDataSplit
(
*
aContent
aInfo
)
;
}
if
(
aContent
=
=
mStart
.
Container
(
)
&
&
aInfo
.
mChangeStart
<
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
)
{
if
(
aInfo
.
mDetails
)
{
NS_ASSERTION
(
aInfo
.
mDetails
-
>
mType
=
=
CharacterDataChangeInfo
:
:
Details
:
:
eSplit
"
only
a
split
can
start
before
the
end
"
)
;
NS_ASSERTION
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
=
aInfo
.
mChangeEnd
+
1
"
mStart
.
Offset
(
)
is
beyond
the
end
of
this
node
"
)
;
const
uint32_t
newStartOffset
=
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
-
aInfo
.
mChangeStart
;
newStart
=
{
aInfo
.
mDetails
-
>
mNextSibling
newStartOffset
}
;
if
(
MOZ_UNLIKELY
(
aContent
=
=
mRoot
)
)
{
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
newStart
.
Container
(
)
)
;
}
bool
isCommonAncestor
=
IsInSelection
(
)
&
&
mStart
.
Container
(
)
=
=
mEnd
.
Container
(
)
;
if
(
isCommonAncestor
)
{
UnregisterClosestCommonInclusiveAncestor
(
mStart
.
Container
(
)
false
)
;
RegisterClosestCommonInclusiveAncestor
(
newStart
.
Container
(
)
)
;
}
if
(
mStart
.
Container
(
)
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
newStart
.
Container
(
)
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
}
else
{
CheckedUint32
newStartOffset
{
0
}
;
if
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
=
aInfo
.
mChangeEnd
)
{
newStartOffset
=
aInfo
.
mChangeStart
;
}
else
{
newStartOffset
=
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
;
newStartOffset
-
=
aInfo
.
LengthOfRemovedText
(
)
;
newStartOffset
+
=
aInfo
.
mReplaceLength
;
}
newStart
=
{
mStart
.
Container
(
)
newStartOffset
.
value
(
)
}
;
}
}
if
(
aContent
=
=
mEnd
.
Container
(
)
&
&
aInfo
.
mChangeStart
<
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
)
{
if
(
aInfo
.
mDetails
&
&
(
aContent
-
>
GetParentNode
(
)
|
|
newStart
.
Container
(
)
)
)
{
NS_ASSERTION
(
aInfo
.
mDetails
-
>
mType
=
=
CharacterDataChangeInfo
:
:
Details
:
:
eSplit
"
only
a
split
can
start
before
the
end
"
)
;
MOZ_ASSERT
(
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
=
aInfo
.
mChangeEnd
+
1
"
mEnd
.
Offset
(
)
is
beyond
the
end
of
this
node
"
)
;
const
uint32_t
newEndOffset
{
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
-
aInfo
.
mChangeStart
}
;
newEnd
=
{
aInfo
.
mDetails
-
>
mNextSibling
newEndOffset
}
;
bool
isCommonAncestor
=
IsInSelection
(
)
&
&
mStart
.
Container
(
)
=
=
mEnd
.
Container
(
)
;
if
(
isCommonAncestor
&
&
!
newStart
.
Container
(
)
)
{
UnregisterClosestCommonInclusiveAncestor
(
mStart
.
Container
(
)
false
)
;
RegisterClosestCommonInclusiveAncestor
(
mStart
.
Container
(
)
-
>
GetParentNode
(
)
)
;
newEnd
.
Container
(
)
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
else
if
(
mEnd
.
Container
(
)
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
newEnd
.
Container
(
)
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
}
else
{
CheckedUint32
newEndOffset
{
0
}
;
if
(
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
<
=
aInfo
.
mChangeEnd
)
{
newEndOffset
=
aInfo
.
mChangeStart
;
}
else
{
newEndOffset
=
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOrInvalidOffsets
)
;
newEndOffset
-
=
aInfo
.
LengthOfRemovedText
(
)
;
newEndOffset
+
=
aInfo
.
mReplaceLength
;
}
newEnd
=
{
mEnd
.
Container
(
)
newEndOffset
.
value
(
)
}
;
}
}
if
(
aInfo
.
mDetails
&
&
aInfo
.
mDetails
-
>
mType
=
=
CharacterDataChangeInfo
:
:
Details
:
:
eMerge
)
{
MOZ_ASSERT
(
!
newStart
.
IsSet
(
)
)
;
MOZ_ASSERT
(
!
newEnd
.
IsSet
(
)
)
;
RangeBoundariesAndRoot
rangeBoundariesAndRoot
=
DetermineNewRangeBoundariesAndRootOnCharacterDataMerge
(
aContent
aInfo
)
;
newStart
=
rangeBoundariesAndRoot
.
mStart
;
newEnd
=
rangeBoundariesAndRoot
.
mEnd
;
newRoot
=
rangeBoundariesAndRoot
.
mRoot
;
}
if
(
newStart
.
IsSet
(
)
|
|
newEnd
.
IsSet
(
)
)
{
if
(
!
newStart
.
IsSet
(
)
)
{
newStart
=
mStart
;
}
if
(
!
newEnd
.
IsSet
(
)
)
{
newEnd
=
mEnd
;
}
DoSetRange
(
newStart
newEnd
newRoot
?
newRoot
:
mRoot
.
get
(
)
!
newEnd
.
Container
(
)
-
>
GetParentNode
(
)
|
|
!
newStart
.
Container
(
)
-
>
GetParentNode
(
)
)
;
}
}
void
nsRange
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
MOZ_ASSERT
(
mIsPositioned
)
;
nsINode
*
container
=
aFirstNewContent
-
>
GetParentNode
(
)
;
MOZ_ASSERT
(
container
)
;
if
(
container
-
>
IsMaybeSelected
(
)
&
&
IsInSelection
(
)
)
{
nsINode
*
child
=
aFirstNewContent
;
while
(
child
)
{
if
(
!
child
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
MarkDescendants
(
child
)
;
child
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
child
=
child
-
>
GetNextSibling
(
)
;
}
}
if
(
mNextStartRef
|
|
mNextEndRef
)
{
if
(
mNextStartRef
)
{
mStart
=
{
mStart
.
Container
(
)
mNextStartRef
}
;
MOZ_ASSERT
(
mNextStartRef
=
=
aFirstNewContent
)
;
mNextStartRef
=
nullptr
;
}
if
(
mNextEndRef
)
{
mEnd
=
{
mEnd
.
Container
(
)
mNextEndRef
}
;
MOZ_ASSERT
(
mNextEndRef
=
=
aFirstNewContent
)
;
mNextEndRef
=
nullptr
;
}
DoSetRange
(
mStart
mEnd
mRoot
true
)
;
}
}
void
nsRange
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
MOZ_ASSERT
(
mIsPositioned
)
;
bool
updateBoundaries
=
false
;
nsINode
*
container
=
aChild
-
>
GetParentNode
(
)
;
MOZ_ASSERT
(
container
)
;
RawRangeBoundary
newStart
(
mStart
)
;
RawRangeBoundary
newEnd
(
mEnd
)
;
MOZ_ASSERT
(
aChild
-
>
GetParentNode
(
)
=
=
container
)
;
if
(
container
=
=
mStart
.
Container
(
)
)
{
newStart
.
InvalidateOffset
(
)
;
updateBoundaries
=
true
;
}
if
(
container
=
=
mEnd
.
Container
(
)
)
{
newEnd
.
InvalidateOffset
(
)
;
updateBoundaries
=
true
;
}
if
(
container
-
>
IsMaybeSelected
(
)
&
&
!
aChild
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
MarkDescendants
(
aChild
)
;
aChild
-
>
SetDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
}
if
(
mNextStartRef
|
|
mNextEndRef
)
{
if
(
mNextStartRef
)
{
newStart
=
{
mStart
.
Container
(
)
mNextStartRef
}
;
MOZ_ASSERT
(
mNextStartRef
=
=
aChild
)
;
mNextStartRef
=
nullptr
;
}
if
(
mNextEndRef
)
{
newEnd
=
{
mEnd
.
Container
(
)
mNextEndRef
}
;
MOZ_ASSERT
(
mNextEndRef
=
=
aChild
)
;
mNextEndRef
=
nullptr
;
}
updateBoundaries
=
true
;
}
if
(
updateBoundaries
)
{
DoSetRange
(
newStart
newEnd
mRoot
)
;
}
}
void
nsRange
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
MOZ_ASSERT
(
mIsPositioned
)
;
nsINode
*
container
=
aChild
-
>
GetParentNode
(
)
;
MOZ_ASSERT
(
container
)
;
RawRangeBoundary
newStart
;
RawRangeBoundary
newEnd
;
Maybe
<
bool
>
gravitateStart
;
bool
gravitateEnd
;
if
(
container
=
=
mStart
.
Container
(
)
)
{
if
(
aChild
=
=
mStart
.
Ref
(
)
)
{
newStart
=
{
container
aPreviousSibling
}
;
}
else
{
newStart
=
mStart
;
newStart
.
InvalidateOffset
(
)
;
}
}
else
{
gravitateStart
=
Some
(
mStart
.
Container
(
)
-
>
IsInclusiveDescendantOf
(
aChild
)
)
;
if
(
gravitateStart
.
value
(
)
)
{
newStart
=
{
container
aPreviousSibling
}
;
}
}
if
(
container
=
=
mEnd
.
Container
(
)
)
{
if
(
aChild
=
=
mEnd
.
Ref
(
)
)
{
newEnd
=
{
container
aPreviousSibling
}
;
}
else
{
newEnd
=
mEnd
;
newEnd
.
InvalidateOffset
(
)
;
}
}
else
{
if
(
mStart
.
Container
(
)
=
=
mEnd
.
Container
(
)
&
&
gravitateStart
.
isSome
(
)
)
{
gravitateEnd
=
gravitateStart
.
value
(
)
;
}
else
{
gravitateEnd
=
mEnd
.
Container
(
)
-
>
IsInclusiveDescendantOf
(
aChild
)
;
}
if
(
gravitateEnd
)
{
newEnd
=
{
container
aPreviousSibling
}
;
}
}
if
(
newStart
.
IsSet
(
)
|
|
newEnd
.
IsSet
(
)
)
{
DoSetRange
(
newStart
.
IsSet
(
)
?
newStart
:
mStart
.
AsRaw
(
)
newEnd
.
IsSet
(
)
?
newEnd
:
mEnd
.
AsRaw
(
)
mRoot
)
;
}
MOZ_ASSERT
(
mStart
.
Ref
(
)
!
=
aChild
)
;
MOZ_ASSERT
(
mEnd
.
Ref
(
)
!
=
aChild
)
;
if
(
container
-
>
IsMaybeSelected
(
)
&
&
aChild
-
>
IsDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
)
{
aChild
-
>
ClearDescendantOfClosestCommonInclusiveAncestorForRangeInSelection
(
)
;
UnmarkDescendants
(
aChild
)
;
}
}
void
nsRange
:
:
ParentChainChanged
(
nsIContent
*
aContent
)
{
NS_ASSERTION
(
mRoot
=
=
aContent
"
Wrong
ParentChainChanged
notification
?
"
)
;
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
mStart
.
Container
(
)
)
;
NS_ASSERTION
(
newRoot
"
No
valid
boundary
or
root
found
!
"
)
;
if
(
newRoot
!
=
RangeUtils
:
:
ComputeRootNode
(
mEnd
.
Container
(
)
)
)
{
NS_ASSERTION
(
mEnd
.
Container
(
)
-
>
IsInNativeAnonymousSubtree
(
)
"
This
special
case
should
happen
only
with
"
"
native
-
anonymous
content
"
)
;
Reset
(
)
;
return
;
}
DoSetRange
(
mStart
mEnd
newRoot
)
;
}
bool
nsRange
:
:
IsPointComparableToRange
(
const
nsINode
&
aContainer
uint32_t
aOffset
ErrorResult
&
aErrorResult
)
const
{
if
(
!
mIsPositioned
)
{
aErrorResult
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
false
;
}
if
(
!
aContainer
.
IsInclusiveDescendantOf
(
mRoot
)
)
{
aErrorResult
.
Throw
(
NS_ERROR_DOM_WRONG_DOCUMENT_ERR
)
;
return
false
;
}
if
(
aContainer
.
NodeType
(
)
=
=
nsINode
:
:
DOCUMENT_TYPE_NODE
)
{
aErrorResult
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
false
;
}
if
(
aOffset
>
aContainer
.
Length
(
)
)
{
aErrorResult
.
Throw
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
;
return
false
;
}
return
true
;
}
bool
nsRange
:
:
IsPointInRange
(
const
nsINode
&
aContainer
uint32_t
aOffset
ErrorResult
&
aRv
)
const
{
uint16_t
compareResult
=
ComparePoint
(
aContainer
aOffset
aRv
)
;
if
(
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_WRONG_DOCUMENT_ERR
)
)
{
aRv
.
SuppressException
(
)
;
return
false
;
}
return
compareResult
=
=
0
;
}
int16_t
nsRange
:
:
ComparePoint
(
const
nsINode
&
aContainer
uint32_t
aOffset
ErrorResult
&
aRv
)
const
{
if
(
!
IsPointComparableToRange
(
aContainer
aOffset
aRv
)
)
{
return
0
;
}
const
RawRangeBoundary
point
{
const_cast
<
nsINode
*
>
(
&
aContainer
)
aOffset
}
;
MOZ_ASSERT
(
point
.
IsSetAndValid
(
)
)
;
Maybe
<
int32_t
>
order
=
nsContentUtils
:
:
ComparePoints
(
point
mStart
)
;
if
(
*
order
<
=
0
)
{
return
*
order
;
}
order
=
nsContentUtils
:
:
ComparePoints
(
mEnd
point
)
;
if
(
*
order
=
=
-
1
)
{
return
1
;
}
return
0
;
}
bool
nsRange
:
:
IntersectsNode
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
mIsPositioned
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
false
;
}
nsINode
*
parent
=
aNode
.
GetParentNode
(
)
;
if
(
!
parent
)
{
return
GetRoot
(
)
=
=
&
aNode
;
}
const
int32_t
nodeIndex
=
parent
-
>
ComputeIndexOf
(
&
aNode
)
;
const
Maybe
<
int32_t
>
startOrder
=
nsContentUtils
:
:
ComparePoints
(
mStart
.
Container
(
)
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
parent
nodeIndex
+
1
)
;
if
(
startOrder
&
&
(
*
startOrder
<
0
)
)
{
const
Maybe
<
int32_t
>
endOrder
=
nsContentUtils
:
:
ComparePoints
(
parent
nodeIndex
mEnd
.
Container
(
)
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
)
;
return
endOrder
&
&
(
*
endOrder
<
0
)
;
}
return
false
;
}
void
nsRange
:
:
NotifySelectionListenersAfterRangeSet
(
)
{
if
(
mSelection
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
false
;
RefPtr
<
Selection
>
selection
=
mSelection
.
get
(
)
;
selection
-
>
NotifySelectionListeners
(
calledByJSRestorer
.
SavedValue
(
)
)
;
}
}
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
void
nsRange
:
:
DoSetRange
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
nsINode
*
aRootNode
bool
aNotInsertedYet
)
{
mIsPositioned
=
aStartBoundary
.
IsSetAndValid
(
)
&
&
aEndBoundary
.
IsSetAndValid
(
)
&
&
aRootNode
;
MOZ_ASSERT
(
mIsPositioned
|
|
(
!
aStartBoundary
.
IsSet
(
)
&
&
!
aEndBoundary
.
IsSet
(
)
&
&
!
aRootNode
)
"
Set
all
or
none
"
)
;
MOZ_ASSERT
(
!
aRootNode
|
|
aNotInsertedYet
|
|
(
aStartBoundary
.
Container
(
)
-
>
IsInclusiveDescendantOf
(
aRootNode
)
&
&
aEndBoundary
.
Container
(
)
-
>
IsInclusiveDescendantOf
(
aRootNode
)
&
&
aRootNode
=
=
RangeUtils
:
:
ComputeRootNode
(
aStartBoundary
.
Container
(
)
)
&
&
aRootNode
=
=
RangeUtils
:
:
ComputeRootNode
(
aEndBoundary
.
Container
(
)
)
)
"
Wrong
root
"
)
;
MOZ_ASSERT
(
!
aRootNode
|
|
(
aStartBoundary
.
Container
(
)
-
>
IsContent
(
)
&
&
aEndBoundary
.
Container
(
)
-
>
IsContent
(
)
&
&
aRootNode
=
=
RangeUtils
:
:
ComputeRootNode
(
aStartBoundary
.
Container
(
)
)
&
&
aRootNode
=
=
RangeUtils
:
:
ComputeRootNode
(
aEndBoundary
.
Container
(
)
)
)
|
|
(
!
aRootNode
-
>
GetParentNode
(
)
&
&
(
aRootNode
-
>
IsDocument
(
)
|
|
aRootNode
-
>
IsAttr
(
)
|
|
aRootNode
-
>
IsDocumentFragment
(
)
|
|
aRootNode
-
>
IsContent
(
)
)
)
"
Bad
root
"
)
;
if
(
mRoot
!
=
aRootNode
)
{
if
(
mRoot
)
{
mRoot
-
>
RemoveMutationObserver
(
this
)
;
}
if
(
aRootNode
)
{
aRootNode
-
>
AddMutationObserver
(
this
)
;
}
}
bool
checkCommonAncestor
=
(
mStart
.
Container
(
)
!
=
aStartBoundary
.
Container
(
)
|
|
mEnd
.
Container
(
)
!
=
aEndBoundary
.
Container
(
)
)
&
&
IsInSelection
(
)
&
&
!
aNotInsertedYet
;
mStart
=
aStartBoundary
;
mEnd
=
aEndBoundary
;
if
(
checkCommonAncestor
)
{
nsINode
*
oldCommonAncestor
=
mRegisteredClosestCommonInclusiveAncestor
;
nsINode
*
newCommonAncestor
=
GetClosestCommonInclusiveAncestor
(
)
;
if
(
newCommonAncestor
!
=
oldCommonAncestor
)
{
if
(
oldCommonAncestor
)
{
UnregisterClosestCommonInclusiveAncestor
(
oldCommonAncestor
false
)
;
}
if
(
newCommonAncestor
)
{
RegisterClosestCommonInclusiveAncestor
(
newCommonAncestor
)
;
}
else
{
NS_ASSERTION
(
!
mIsPositioned
"
unexpected
disconnected
nodes
"
)
;
mSelection
=
nullptr
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mRegisteredClosestCommonInclusiveAncestor
"
How
can
we
have
a
registered
common
ancestor
when
we
"
"
didn
'
t
register
ourselves
?
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
isInList
(
)
"
Shouldn
'
t
be
registered
if
we
have
no
"
"
mRegisteredClosestCommonInclusiveAncestor
"
)
;
}
}
}
mRoot
=
aRootNode
;
if
(
mSelection
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
NotifySelectionListenersAfterRangeSet
"
this
&
nsRange
:
:
NotifySelectionListenersAfterRangeSet
)
)
;
}
}
static
int32_t
IndexOf
(
nsINode
*
aChild
)
{
nsINode
*
parent
=
aChild
-
>
GetParentNode
(
)
;
return
parent
?
parent
-
>
ComputeIndexOf
(
aChild
)
:
-
1
;
}
void
nsRange
:
:
RegisterSelection
(
Selection
&
aSelection
)
{
MOZ_ASSERT
(
!
mSelection
)
;
if
(
mSelection
=
=
&
aSelection
)
{
return
;
}
if
(
mSelection
)
{
const
RefPtr
<
nsRange
>
range
{
this
}
;
const
RefPtr
<
Selection
>
selection
{
mSelection
}
;
selection
-
>
RemoveRangeAndUnselectFramesAndNotifyListeners
(
*
range
IgnoreErrors
(
)
)
;
}
mSelection
=
&
aSelection
;
nsINode
*
commonAncestor
=
GetClosestCommonInclusiveAncestor
(
)
;
MOZ_ASSERT
(
commonAncestor
"
unexpected
disconnected
nodes
"
)
;
RegisterClosestCommonInclusiveAncestor
(
commonAncestor
)
;
}
void
nsRange
:
:
UnregisterSelection
(
)
{
mSelection
=
nullptr
;
if
(
mRegisteredClosestCommonInclusiveAncestor
)
{
UnregisterClosestCommonInclusiveAncestor
(
mRegisteredClosestCommonInclusiveAncestor
false
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mRegisteredClosestCommonInclusiveAncestor
"
How
can
we
have
a
registered
common
ancestor
when
we
"
"
just
unregistered
?
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
isInList
(
)
"
Shouldn
'
t
be
registered
if
we
have
no
"
"
mRegisteredClosestCommonInclusiveAncestor
after
unregistering
"
)
;
}
}
void
nsRange
:
:
Reset
(
)
{
DoSetRange
(
RawRangeBoundary
(
)
RawRangeBoundary
(
)
nullptr
)
;
}
void
nsRange
:
:
SetStartJS
(
nsINode
&
aNode
uint32_t
aOffset
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetStart
(
aNode
aOffset
aErr
)
;
}
bool
nsRange
:
:
CanAccess
(
const
nsINode
&
aNode
)
const
{
if
(
nsContentUtils
:
:
LegacyIsCallerNativeCode
(
)
)
{
return
true
;
}
return
nsContentUtils
:
:
CanCallerAccess
(
&
aNode
)
;
}
void
nsRange
:
:
SetStart
(
nsINode
&
aNode
uint32_t
aOffset
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetStart
(
RawRangeBoundary
(
&
aNode
aOffset
)
aRv
)
;
}
void
nsRange
:
:
SetStart
(
const
RawRangeBoundary
&
aPoint
ErrorResult
&
aRv
)
{
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
aPoint
.
Container
(
)
)
;
if
(
!
newRoot
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
if
(
!
aPoint
.
IsSetAndValid
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
;
return
;
}
const
bool
collapse
=
[
&
]
(
)
{
if
(
!
mIsPositioned
|
|
(
newRoot
!
=
mRoot
)
)
{
return
true
;
}
const
Maybe
<
int32_t
>
order
=
nsContentUtils
:
:
ComparePoints
(
aPoint
mEnd
)
;
if
(
order
)
{
return
*
order
=
=
1
;
}
MOZ_ASSERT_UNREACHABLE
(
)
;
return
true
;
}
(
)
;
if
(
collapse
)
{
DoSetRange
(
aPoint
aPoint
newRoot
)
;
return
;
}
DoSetRange
(
aPoint
mEnd
mRoot
)
;
}
void
nsRange
:
:
SetStartBeforeJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetStartBefore
(
aNode
aErr
)
;
}
void
nsRange
:
:
SetStartBefore
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetStart
(
RangeUtils
:
:
GetRawRangeBoundaryBefore
(
&
aNode
)
aRv
)
;
}
void
nsRange
:
:
SetStartAfterJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetStartAfter
(
aNode
aErr
)
;
}
void
nsRange
:
:
SetStartAfter
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetStart
(
RangeUtils
:
:
GetRawRangeBoundaryAfter
(
&
aNode
)
aRv
)
;
}
void
nsRange
:
:
SetEndJS
(
nsINode
&
aNode
uint32_t
aOffset
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetEnd
(
aNode
aOffset
aErr
)
;
}
void
nsRange
:
:
SetEnd
(
nsINode
&
aNode
uint32_t
aOffset
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetEnd
(
RawRangeBoundary
(
&
aNode
aOffset
)
aRv
)
;
}
void
nsRange
:
:
SetEnd
(
const
RawRangeBoundary
&
aPoint
ErrorResult
&
aRv
)
{
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
aPoint
.
Container
(
)
)
;
if
(
!
newRoot
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
if
(
!
aPoint
.
IsSetAndValid
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
;
return
;
}
const
bool
collapse
=
[
&
]
(
)
{
if
(
!
mIsPositioned
|
|
(
newRoot
!
=
mRoot
)
)
{
return
true
;
}
const
Maybe
<
int32_t
>
order
=
nsContentUtils
:
:
ComparePoints
(
mStart
aPoint
)
;
if
(
order
)
{
return
*
order
=
=
1
;
}
MOZ_ASSERT_UNREACHABLE
(
)
;
return
true
;
}
(
)
;
if
(
collapse
)
{
DoSetRange
(
aPoint
aPoint
newRoot
)
;
return
;
}
DoSetRange
(
mStart
aPoint
mRoot
)
;
}
void
nsRange
:
:
SelectNodesInContainer
(
nsINode
*
aContainer
nsIContent
*
aStartContent
nsIContent
*
aEndContent
)
{
MOZ_ASSERT
(
aContainer
)
;
MOZ_ASSERT
(
aContainer
-
>
ComputeIndexOf
(
aStartContent
)
<
=
aContainer
-
>
ComputeIndexOf
(
aEndContent
)
)
;
MOZ_ASSERT
(
aStartContent
&
&
aContainer
-
>
ComputeIndexOf
(
aStartContent
)
!
=
-
1
)
;
MOZ_ASSERT
(
aEndContent
&
&
aContainer
-
>
ComputeIndexOf
(
aEndContent
)
!
=
-
1
)
;
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
aContainer
)
;
MOZ_ASSERT
(
newRoot
)
;
if
(
!
newRoot
)
{
return
;
}
RawRangeBoundary
start
(
aContainer
aStartContent
-
>
GetPreviousSibling
(
)
)
;
RawRangeBoundary
end
(
aContainer
aEndContent
)
;
DoSetRange
(
start
end
newRoot
)
;
}
void
nsRange
:
:
SetEndBeforeJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetEndBefore
(
aNode
aErr
)
;
}
void
nsRange
:
:
SetEndBefore
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetEnd
(
RangeUtils
:
:
GetRawRangeBoundaryBefore
(
&
aNode
)
aRv
)
;
}
void
nsRange
:
:
SetEndAfterJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SetEndAfter
(
aNode
aErr
)
;
}
void
nsRange
:
:
SetEndAfter
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
SetEnd
(
RangeUtils
:
:
GetRawRangeBoundaryAfter
(
&
aNode
)
aRv
)
;
}
void
nsRange
:
:
Collapse
(
bool
aToStart
)
{
if
(
!
mIsPositioned
)
return
;
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
if
(
aToStart
)
{
DoSetRange
(
mStart
mStart
mRoot
)
;
}
else
{
DoSetRange
(
mEnd
mEnd
mRoot
)
;
}
}
void
nsRange
:
:
CollapseJS
(
bool
aToStart
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
Collapse
(
aToStart
)
;
}
void
nsRange
:
:
SelectNodeJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SelectNode
(
aNode
aErr
)
;
}
void
nsRange
:
:
SelectNode
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsINode
*
container
=
aNode
.
GetParentNode
(
)
;
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
container
)
;
if
(
!
newRoot
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
int32_t
index
=
container
-
>
ComputeIndexOf
(
&
aNode
)
;
if
(
NS_WARN_IF
(
index
<
0
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
DoSetRange
(
RawRangeBoundary
{
container
static_cast
<
uint32_t
>
(
index
)
}
RawRangeBoundary
{
container
static_cast
<
uint32_t
>
(
index
+
1
)
}
newRoot
)
;
}
void
nsRange
:
:
SelectNodeContentsJS
(
nsINode
&
aNode
ErrorResult
&
aErr
)
{
AutoCalledByJSRestore
calledByJSRestorer
(
*
this
)
;
mCalledByJS
=
true
;
SelectNodeContents
(
aNode
aErr
)
;
}
void
nsRange
:
:
SelectNodeContents
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsINode
*
newRoot
=
RangeUtils
:
:
ComputeRootNode
(
&
aNode
)
;
if
(
!
newRoot
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
AutoInvalidateSelection
atEndOfBlock
(
this
)
;
DoSetRange
(
RawRangeBoundary
(
&
aNode
0u
)
RawRangeBoundary
(
&
aNode
aNode
.
Length
(
)
)
newRoot
)
;
}
class
MOZ_STACK_CLASS
RangeSubtreeIterator
{
private
:
enum
RangeSubtreeIterState
{
eDone
=
0
eUseStart
eUseIterator
eUseEnd
}
;
Maybe
<
ContentSubtreeIterator
>
mSubtreeIter
;
RangeSubtreeIterState
mIterState
;
nsCOMPtr
<
nsINode
>
mStart
;
nsCOMPtr
<
nsINode
>
mEnd
;
public
:
RangeSubtreeIterator
(
)
:
mIterState
(
eDone
)
{
}
~
RangeSubtreeIterator
(
)
=
default
;
nsresult
Init
(
nsRange
*
aRange
)
;
already_AddRefed
<
nsINode
>
GetCurrentNode
(
)
;
void
First
(
)
;
void
Last
(
)
;
void
Next
(
)
;
void
Prev
(
)
;
bool
IsDone
(
)
{
return
mIterState
=
=
eDone
;
}
}
;
nsresult
RangeSubtreeIterator
:
:
Init
(
nsRange
*
aRange
)
{
mIterState
=
eDone
;
if
(
aRange
-
>
Collapsed
(
)
)
{
return
NS_OK
;
}
if
(
!
aRange
-
>
IsPositioned
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsINode
*
node
=
aRange
-
>
GetStartContainer
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
node
-
>
IsCharacterData
(
)
|
|
(
node
-
>
IsElement
(
)
&
&
node
-
>
AsElement
(
)
-
>
GetChildCount
(
)
=
=
aRange
-
>
StartOffset
(
)
)
)
{
mStart
=
node
;
}
node
=
aRange
-
>
GetEndContainer
(
)
;
if
(
NS_WARN_IF
(
!
node
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
node
-
>
IsCharacterData
(
)
|
|
(
node
-
>
IsElement
(
)
&
&
aRange
-
>
EndOffset
(
)
=
=
0
)
)
{
mEnd
=
node
;
}
if
(
mStart
&
&
mStart
=
=
mEnd
)
{
mEnd
=
nullptr
;
}
else
{
mSubtreeIter
.
emplace
(
)
;
nsresult
res
=
mSubtreeIter
-
>
Init
(
aRange
)
;
if
(
NS_FAILED
(
res
)
)
return
res
;
if
(
mSubtreeIter
-
>
IsDone
(
)
)
{
mSubtreeIter
.
reset
(
)
;
}
}
First
(
)
;
return
NS_OK
;
}
already_AddRefed
<
nsINode
>
RangeSubtreeIterator
:
:
GetCurrentNode
(
)
{
nsCOMPtr
<
nsINode
>
node
;
if
(
mIterState
=
=
eUseStart
&
&
mStart
)
{
node
=
mStart
;
}
else
if
(
mIterState
=
=
eUseEnd
&
&
mEnd
)
{
node
=
mEnd
;
}
else
if
(
mIterState
=
=
eUseIterator
&
&
mSubtreeIter
)
{
node
=
mSubtreeIter
-
>
GetCurrentNode
(
)
;
}
return
node
.
forget
(
)
;
}
void
RangeSubtreeIterator
:
:
First
(
)
{
if
(
mStart
)
mIterState
=
eUseStart
;
else
if
(
mSubtreeIter
)
{
mSubtreeIter
-
>
First
(
)
;
mIterState
=
eUseIterator
;
}
else
if
(
mEnd
)
mIterState
=
eUseEnd
;
else
mIterState
=
eDone
;
}
void
RangeSubtreeIterator
:
:
Last
(
)
{
if
(
mEnd
)
mIterState
=
eUseEnd
;
else
if
(
mSubtreeIter
)
{
mSubtreeIter
-
>
Last
(
)
;
mIterState
=
eUseIterator
;
}
else
if
(
mStart
)
mIterState
=
eUseStart
;
else
mIterState
=
eDone
;
}
void
RangeSubtreeIterator
:
:
Next
(
)
{
if
(
mIterState
=
=
eUseStart
)
{
if
(
mSubtreeIter
)
{
mSubtreeIter
-
>
First
(
)
;
mIterState
=
eUseIterator
;
}
else
if
(
mEnd
)
mIterState
=
eUseEnd
;
else
mIterState
=
eDone
;
}
else
if
(
mIterState
=
=
eUseIterator
)
{
mSubtreeIter
-
>
Next
(
)
;
if
(
mSubtreeIter
-
>
IsDone
(
)
)
{
if
(
mEnd
)
mIterState
=
eUseEnd
;
else
mIterState
=
eDone
;
}
}
else
mIterState
=
eDone
;
}
void
RangeSubtreeIterator
:
:
Prev
(
)
{
if
(
mIterState
=
=
eUseEnd
)
{
if
(
mSubtreeIter
)
{
mSubtreeIter
-
>
Last
(
)
;
mIterState
=
eUseIterator
;
}
else
if
(
mStart
)
mIterState
=
eUseStart
;
else
mIterState
=
eDone
;
}
else
if
(
mIterState
=
=
eUseIterator
)
{
mSubtreeIter
-
>
Prev
(
)
;
if
(
mSubtreeIter
-
>
IsDone
(
)
)
{
if
(
mStart
)
mIterState
=
eUseStart
;
else
mIterState
=
eDone
;
}
}
else
mIterState
=
eDone
;
}
static
nsresult
CollapseRangeAfterDelete
(
nsRange
*
aRange
)
{
NS_ENSURE_ARG_POINTER
(
aRange
)
;
if
(
aRange
-
>
Collapsed
(
)
)
{
return
NS_OK
;
}
if
(
!
aRange
-
>
IsPositioned
(
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsCOMPtr
<
nsINode
>
commonAncestor
=
aRange
-
>
GetClosestCommonInclusiveAncestor
(
)
;
nsCOMPtr
<
nsINode
>
startContainer
=
aRange
-
>
GetStartContainer
(
)
;
nsCOMPtr
<
nsINode
>
endContainer
=
aRange
-
>
GetEndContainer
(
)
;
if
(
startContainer
=
=
commonAncestor
)
{
aRange
-
>
Collapse
(
true
)
;
return
NS_OK
;
}
if
(
endContainer
=
=
commonAncestor
)
{
aRange
-
>
Collapse
(
false
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsINode
>
nodeToSelect
(
startContainer
)
;
while
(
nodeToSelect
)
{
nsCOMPtr
<
nsINode
>
parent
=
nodeToSelect
-
>
GetParentNode
(
)
;
if
(
parent
=
=
commonAncestor
)
break
;
nodeToSelect
=
parent
;
}
if
(
!
nodeToSelect
)
return
NS_ERROR_FAILURE
;
ErrorResult
error
;
aRange
-
>
SelectNode
(
*
nodeToSelect
error
)
;
if
(
error
.
Failed
(
)
)
{
return
error
.
StealNSResult
(
)
;
}
aRange
-
>
Collapse
(
false
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PrependChild
(
nsINode
*
aContainer
nsINode
*
aChild
)
{
nsCOMPtr
<
nsINode
>
first
=
aContainer
-
>
GetFirstChild
(
)
;
ErrorResult
rv
;
aContainer
-
>
InsertBefore
(
*
aChild
first
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
static
bool
ValidateCurrentNode
(
nsRange
*
aRange
RangeSubtreeIterator
&
aIter
)
{
bool
before
after
;
nsCOMPtr
<
nsINode
>
node
=
aIter
.
GetCurrentNode
(
)
;
if
(
!
node
)
{
return
true
;
}
nsresult
rv
=
RangeUtils
:
:
CompareNodeToRange
(
node
aRange
&
before
&
after
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
before
|
|
after
)
{
if
(
node
-
>
IsCharacterData
(
)
)
{
if
(
before
&
&
node
=
=
aRange
-
>
GetStartContainer
(
)
)
{
before
=
false
;
}
if
(
after
&
&
node
=
=
aRange
-
>
GetEndContainer
(
)
)
{
after
=
false
;
}
}
}
return
!
before
&
&
!
after
;
}
nsresult
nsRange
:
:
CutContents
(
DocumentFragment
*
*
aFragment
)
{
if
(
aFragment
)
{
*
aFragment
=
nullptr
;
}
if
(
!
CanAccess
(
*
mStart
.
Container
(
)
)
|
|
!
CanAccess
(
*
mEnd
.
Container
(
)
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
nsCOMPtr
<
Document
>
doc
=
mStart
.
Container
(
)
-
>
OwnerDoc
(
)
;
ErrorResult
res
;
nsCOMPtr
<
nsINode
>
commonAncestor
=
GetCommonAncestorContainer
(
res
)
;
NS_ENSURE_TRUE
(
!
res
.
Failed
(
)
res
.
StealNSResult
(
)
)
;
RefPtr
<
DocumentFragment
>
retval
;
if
(
aFragment
)
{
retval
=
new
(
doc
-
>
NodeInfoManager
(
)
)
DocumentFragment
(
doc
-
>
NodeInfoManager
(
)
)
;
}
nsCOMPtr
<
nsINode
>
commonCloneAncestor
=
retval
.
get
(
)
;
mozAutoSubtreeModified
subtree
(
mRoot
?
mRoot
-
>
OwnerDoc
(
)
:
nullptr
nullptr
)
;
nsCOMPtr
<
nsINode
>
startContainer
=
mStart
.
Container
(
)
;
uint32_t
startOffset
=
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
nsCOMPtr
<
nsINode
>
endContainer
=
mEnd
.
Container
(
)
;
uint32_t
endOffset
=
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
if
(
retval
)
{
nsCOMPtr
<
Document
>
commonAncestorDocument
=
do_QueryInterface
(
commonAncestor
)
;
if
(
commonAncestorDocument
)
{
RefPtr
<
DocumentType
>
doctype
=
commonAncestorDocument
-
>
GetDoctype
(
)
;
if
(
doctype
&
&
*
nsContentUtils
:
:
ComparePoints
(
startContainer
static_cast
<
int32_t
>
(
startOffset
)
doctype
0
)
<
0
&
&
*
nsContentUtils
:
:
ComparePoints
(
doctype
0
endContainer
static_cast
<
int32_t
>
(
endOffset
)
)
<
0
)
{
return
NS_ERROR_DOM_HIERARCHY_REQUEST_ERR
;
}
}
}
RangeSubtreeIterator
iter
;
nsresult
rv
=
iter
.
Init
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
iter
.
IsDone
(
)
)
{
rv
=
CollapseRangeAfterDelete
(
this
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
aFragment
)
{
retval
.
forget
(
aFragment
)
;
}
return
rv
;
}
iter
.
First
(
)
;
bool
handled
=
false
;
while
(
!
iter
.
IsDone
(
)
)
{
nsCOMPtr
<
nsINode
>
nodeToResult
;
nsCOMPtr
<
nsINode
>
node
=
iter
.
GetCurrentNode
(
)
;
iter
.
Next
(
)
;
nsCOMPtr
<
nsINode
>
nextNode
=
iter
.
GetCurrentNode
(
)
;
while
(
nextNode
&
&
nextNode
-
>
IsInclusiveDescendantOf
(
node
)
)
{
iter
.
Next
(
)
;
nextNode
=
iter
.
GetCurrentNode
(
)
;
}
handled
=
false
;
if
(
auto
charData
=
CharacterData
:
:
FromNode
(
node
)
)
{
uint32_t
dataLength
=
0
;
if
(
node
=
=
startContainer
)
{
if
(
node
=
=
endContainer
)
{
if
(
endOffset
>
startOffset
)
{
if
(
retval
)
{
nsAutoString
cutValue
;
ErrorResult
err
;
charData
-
>
SubstringData
(
startOffset
endOffset
-
startOffset
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nsCOMPtr
<
nsINode
>
clone
=
node
-
>
CloneNode
(
false
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
clone
-
>
SetNodeValue
(
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nodeToResult
=
clone
;
}
nsMutationGuard
guard
;
ErrorResult
err
;
charData
-
>
DeleteData
(
startOffset
endOffset
-
startOffset
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
NS_ENSURE_STATE
(
!
guard
.
Mutated
(
0
)
|
|
ValidateCurrentNode
(
this
iter
)
)
;
}
handled
=
true
;
}
else
{
dataLength
=
charData
-
>
Length
(
)
;
if
(
dataLength
>
=
startOffset
)
{
if
(
retval
)
{
nsAutoString
cutValue
;
ErrorResult
err
;
charData
-
>
SubstringData
(
startOffset
dataLength
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nsCOMPtr
<
nsINode
>
clone
=
node
-
>
CloneNode
(
false
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
clone
-
>
SetNodeValue
(
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nodeToResult
=
clone
;
}
nsMutationGuard
guard
;
ErrorResult
err
;
charData
-
>
DeleteData
(
startOffset
dataLength
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_STATE
(
!
guard
.
Mutated
(
0
)
|
|
ValidateCurrentNode
(
this
iter
)
)
;
}
handled
=
true
;
}
}
else
if
(
node
=
=
endContainer
)
{
if
(
retval
)
{
nsAutoString
cutValue
;
ErrorResult
err
;
charData
-
>
SubstringData
(
0
endOffset
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nsCOMPtr
<
nsINode
>
clone
=
node
-
>
CloneNode
(
false
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
clone
-
>
SetNodeValue
(
cutValue
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nodeToResult
=
clone
;
}
nsMutationGuard
guard
;
ErrorResult
err
;
charData
-
>
DeleteData
(
0
endOffset
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
NS_ENSURE_STATE
(
!
guard
.
Mutated
(
0
)
|
|
ValidateCurrentNode
(
this
iter
)
)
;
handled
=
true
;
}
}
if
(
!
handled
&
&
(
node
=
=
endContainer
|
|
node
=
=
startContainer
)
)
{
if
(
node
&
&
node
-
>
IsElement
(
)
&
&
(
(
node
=
=
endContainer
&
&
endOffset
=
=
0
)
|
|
(
node
=
=
startContainer
&
&
node
-
>
AsElement
(
)
-
>
GetChildCount
(
)
=
=
startOffset
)
)
)
{
if
(
retval
)
{
ErrorResult
rv
;
nodeToResult
=
node
-
>
CloneNode
(
false
rv
)
;
NS_ENSURE_TRUE
(
!
rv
.
Failed
(
)
rv
.
StealNSResult
(
)
)
;
}
handled
=
true
;
}
}
if
(
!
handled
)
{
nodeToResult
=
node
;
}
uint32_t
parentCount
=
0
;
if
(
retval
)
{
nsCOMPtr
<
nsINode
>
oldCommonAncestor
=
commonAncestor
;
if
(
!
iter
.
IsDone
(
)
)
{
NS_ENSURE_STATE
(
nextNode
)
;
commonAncestor
=
nsContentUtils
:
:
GetClosestCommonInclusiveAncestor
(
node
nextNode
)
;
NS_ENSURE_STATE
(
commonAncestor
)
;
nsCOMPtr
<
nsINode
>
parentCounterNode
=
node
;
while
(
parentCounterNode
&
&
parentCounterNode
!
=
commonAncestor
)
{
+
+
parentCount
;
parentCounterNode
=
parentCounterNode
-
>
GetParentNode
(
)
;
NS_ENSURE_STATE
(
parentCounterNode
)
;
}
}
nsCOMPtr
<
nsINode
>
closestAncestor
farthestAncestor
;
rv
=
CloneParentsBetween
(
oldCommonAncestor
node
getter_AddRefs
(
closestAncestor
)
getter_AddRefs
(
farthestAncestor
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ErrorResult
res
;
if
(
farthestAncestor
)
{
commonCloneAncestor
-
>
AppendChild
(
*
farthestAncestor
res
)
;
res
.
WouldReportJSException
(
)
;
if
(
NS_WARN_IF
(
res
.
Failed
(
)
)
)
{
return
res
.
StealNSResult
(
)
;
}
}
nsMutationGuard
guard
;
nsCOMPtr
<
nsINode
>
parent
=
nodeToResult
-
>
GetParentNode
(
)
;
if
(
closestAncestor
)
{
closestAncestor
-
>
AppendChild
(
*
nodeToResult
res
)
;
}
else
{
commonCloneAncestor
-
>
AppendChild
(
*
nodeToResult
res
)
;
}
res
.
WouldReportJSException
(
)
;
if
(
NS_WARN_IF
(
res
.
Failed
(
)
)
)
{
return
res
.
StealNSResult
(
)
;
}
NS_ENSURE_STATE
(
!
guard
.
Mutated
(
parent
?
2
:
1
)
|
|
ValidateCurrentNode
(
this
iter
)
)
;
}
else
if
(
nodeToResult
)
{
nsMutationGuard
guard
;
nsCOMPtr
<
nsINode
>
node
=
nodeToResult
;
nsCOMPtr
<
nsINode
>
parent
=
node
-
>
GetParentNode
(
)
;
if
(
parent
)
{
mozilla
:
:
ErrorResult
error
;
parent
-
>
RemoveChild
(
*
node
error
)
;
NS_ENSURE_FALSE
(
error
.
Failed
(
)
error
.
StealNSResult
(
)
)
;
}
NS_ENSURE_STATE
(
!
guard
.
Mutated
(
1
)
|
|
ValidateCurrentNode
(
this
iter
)
)
;
}
if
(
!
iter
.
IsDone
(
)
&
&
retval
)
{
nsCOMPtr
<
nsINode
>
newCloneAncestor
=
nodeToResult
;
for
(
uint32_t
i
=
parentCount
;
i
;
-
-
i
)
{
newCloneAncestor
=
newCloneAncestor
-
>
GetParentNode
(
)
;
NS_ENSURE_STATE
(
newCloneAncestor
)
;
}
commonCloneAncestor
=
newCloneAncestor
;
}
}
rv
=
CollapseRangeAfterDelete
(
this
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
aFragment
)
{
retval
.
forget
(
aFragment
)
;
}
return
rv
;
}
void
nsRange
:
:
DeleteContents
(
ErrorResult
&
aRv
)
{
aRv
=
CutContents
(
nullptr
)
;
}
already_AddRefed
<
DocumentFragment
>
nsRange
:
:
ExtractContents
(
ErrorResult
&
rv
)
{
RefPtr
<
DocumentFragment
>
fragment
;
rv
=
CutContents
(
getter_AddRefs
(
fragment
)
)
;
return
fragment
.
forget
(
)
;
}
int16_t
nsRange
:
:
CompareBoundaryPoints
(
uint16_t
aHow
const
nsRange
&
aOtherRange
ErrorResult
&
aRv
)
{
if
(
!
mIsPositioned
|
|
!
aOtherRange
.
IsPositioned
(
)
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
0
;
}
nsINode
*
ourNode
*
otherNode
;
uint32_t
ourOffset
otherOffset
;
switch
(
aHow
)
{
case
Range_Binding
:
:
START_TO_START
:
ourNode
=
mStart
.
Container
(
)
;
ourOffset
=
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
otherNode
=
aOtherRange
.
GetStartContainer
(
)
;
otherOffset
=
aOtherRange
.
StartOffset
(
)
;
break
;
case
Range_Binding
:
:
START_TO_END
:
ourNode
=
mEnd
.
Container
(
)
;
ourOffset
=
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
otherNode
=
aOtherRange
.
GetStartContainer
(
)
;
otherOffset
=
aOtherRange
.
StartOffset
(
)
;
break
;
case
Range_Binding
:
:
END_TO_START
:
ourNode
=
mStart
.
Container
(
)
;
ourOffset
=
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
otherNode
=
aOtherRange
.
GetEndContainer
(
)
;
otherOffset
=
aOtherRange
.
EndOffset
(
)
;
break
;
case
Range_Binding
:
:
END_TO_END
:
ourNode
=
mEnd
.
Container
(
)
;
ourOffset
=
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
otherNode
=
aOtherRange
.
GetEndContainer
(
)
;
otherOffset
=
aOtherRange
.
EndOffset
(
)
;
break
;
default
:
aRv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
0
;
}
if
(
mRoot
!
=
aOtherRange
.
GetRoot
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_WRONG_DOCUMENT_ERR
)
;
return
0
;
}
const
Maybe
<
int32_t
>
order
=
nsContentUtils
:
:
ComparePoints
(
ourNode
static_cast
<
int32_t
>
(
ourOffset
)
otherNode
static_cast
<
int32_t
>
(
otherOffset
)
)
;
return
*
order
;
}
nsresult
nsRange
:
:
CloneParentsBetween
(
nsINode
*
aAncestor
nsINode
*
aNode
nsINode
*
*
aClosestAncestor
nsINode
*
*
aFarthestAncestor
)
{
NS_ENSURE_ARG_POINTER
(
(
aAncestor
&
&
aNode
&
&
aClosestAncestor
&
&
aFarthestAncestor
)
)
;
*
aClosestAncestor
=
nullptr
;
*
aFarthestAncestor
=
nullptr
;
if
(
aAncestor
=
=
aNode
)
return
NS_OK
;
AutoTArray
<
nsCOMPtr
<
nsINode
>
16
>
parentStack
;
nsCOMPtr
<
nsINode
>
parent
=
aNode
-
>
GetParentNode
(
)
;
while
(
parent
&
&
parent
!
=
aAncestor
)
{
parentStack
.
AppendElement
(
parent
)
;
parent
=
parent
-
>
GetParentNode
(
)
;
}
nsCOMPtr
<
nsINode
>
firstParent
;
nsCOMPtr
<
nsINode
>
lastParent
;
for
(
int32_t
i
=
parentStack
.
Length
(
)
-
1
;
i
>
=
0
;
i
-
-
)
{
ErrorResult
rv
;
nsCOMPtr
<
nsINode
>
clone
=
parentStack
[
i
]
-
>
CloneNode
(
false
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
rv
.
StealNSResult
(
)
;
}
if
(
!
clone
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
lastParent
)
{
lastParent
=
clone
;
}
else
{
firstParent
-
>
AppendChild
(
*
clone
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
rv
.
StealNSResult
(
)
;
}
}
firstParent
=
clone
;
}
firstParent
.
forget
(
aClosestAncestor
)
;
lastParent
.
forget
(
aFarthestAncestor
)
;
return
NS_OK
;
}
already_AddRefed
<
DocumentFragment
>
nsRange
:
:
CloneContents
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsINode
>
commonAncestor
=
GetCommonAncestorContainer
(
aRv
)
;
MOZ_ASSERT
(
!
aRv
.
Failed
(
)
"
GetCommonAncestorContainer
(
)
shouldn
'
t
fail
!
"
)
;
nsCOMPtr
<
Document
>
doc
=
mStart
.
Container
(
)
-
>
OwnerDoc
(
)
;
NS_ASSERTION
(
doc
"
CloneContents
needs
a
document
to
continue
.
"
)
;
if
(
!
doc
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
DocumentFragment
>
clonedFrag
=
new
(
doc
-
>
NodeInfoManager
(
)
)
DocumentFragment
(
doc
-
>
NodeInfoManager
(
)
)
;
if
(
Collapsed
(
)
)
{
return
clonedFrag
.
forget
(
)
;
}
nsCOMPtr
<
nsINode
>
commonCloneAncestor
=
clonedFrag
.
get
(
)
;
RangeSubtreeIterator
iter
;
aRv
=
iter
.
Init
(
this
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
iter
.
IsDone
(
)
)
{
return
clonedFrag
.
forget
(
)
;
}
iter
.
First
(
)
;
while
(
!
iter
.
IsDone
(
)
)
{
nsCOMPtr
<
nsINode
>
node
=
iter
.
GetCurrentNode
(
)
;
bool
deepClone
=
!
node
-
>
IsElement
(
)
|
|
(
!
(
node
=
=
mEnd
.
Container
(
)
&
&
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
=
=
0
)
&
&
!
(
node
=
=
mStart
.
Container
(
)
&
&
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
=
=
node
-
>
AsElement
(
)
-
>
GetChildCount
(
)
)
)
;
nsCOMPtr
<
nsINode
>
clone
=
node
-
>
CloneNode
(
deepClone
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
auto
charData
=
CharacterData
:
:
FromNode
(
clone
)
)
{
if
(
node
=
=
mEnd
.
Container
(
)
)
{
uint32_t
dataLength
=
charData
-
>
Length
(
)
;
if
(
dataLength
>
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
)
{
charData
-
>
DeleteData
(
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
dataLength
-
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
}
}
if
(
node
=
=
mStart
.
Container
(
)
)
{
if
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
>
0
)
{
charData
-
>
DeleteData
(
0
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
}
}
}
nsCOMPtr
<
nsINode
>
closestAncestor
farthestAncestor
;
aRv
=
CloneParentsBetween
(
commonAncestor
node
getter_AddRefs
(
closestAncestor
)
getter_AddRefs
(
farthestAncestor
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
farthestAncestor
)
{
commonCloneAncestor
-
>
AppendChild
(
*
farthestAncestor
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
}
nsCOMPtr
<
nsINode
>
cloneNode
=
clone
;
if
(
closestAncestor
)
{
closestAncestor
-
>
AppendChild
(
*
cloneNode
aRv
)
;
}
else
{
commonCloneAncestor
-
>
AppendChild
(
*
cloneNode
aRv
)
;
}
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
iter
.
Next
(
)
;
if
(
iter
.
IsDone
(
)
)
break
;
nsCOMPtr
<
nsINode
>
nextNode
=
iter
.
GetCurrentNode
(
)
;
if
(
!
nextNode
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
commonAncestor
=
nsContentUtils
:
:
GetClosestCommonInclusiveAncestor
(
node
nextNode
)
;
if
(
!
commonAncestor
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
while
(
node
&
&
node
!
=
commonAncestor
)
{
node
=
node
-
>
GetParentNode
(
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
node
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
cloneNode
=
cloneNode
-
>
GetParentNode
(
)
;
if
(
!
cloneNode
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
}
commonCloneAncestor
=
cloneNode
;
}
return
clonedFrag
.
forget
(
)
;
}
already_AddRefed
<
nsRange
>
nsRange
:
:
CloneRange
(
)
const
{
RefPtr
<
nsRange
>
range
=
nsRange
:
:
Create
(
mOwner
)
;
range
-
>
DoSetRange
(
mStart
mEnd
mRoot
)
;
return
range
.
forget
(
)
;
}
void
nsRange
:
:
InsertNode
(
nsINode
&
aNode
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNode
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
IsPositioned
(
)
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
;
}
uint32_t
tStartOffset
=
StartOffset
(
)
;
nsCOMPtr
<
nsINode
>
tStartContainer
=
GetStartContainer
(
)
;
if
(
!
CanAccess
(
*
tStartContainer
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
&
aNode
=
=
tStartContainer
)
{
aRv
.
Throw
(
NS_ERROR_DOM_HIERARCHY_REQUEST_ERR
)
;
return
;
}
nsCOMPtr
<
nsINode
>
referenceNode
;
nsCOMPtr
<
nsINode
>
referenceParentNode
=
tStartContainer
;
RefPtr
<
Text
>
startTextNode
=
tStartContainer
-
>
GetAsText
(
)
;
nsCOMPtr
<
nsINodeList
>
tChildList
;
if
(
startTextNode
)
{
referenceParentNode
=
tStartContainer
-
>
GetParentNode
(
)
;
if
(
!
referenceParentNode
)
{
aRv
.
Throw
(
NS_ERROR_DOM_HIERARCHY_REQUEST_ERR
)
;
return
;
}
referenceParentNode
-
>
EnsurePreInsertionValidity
(
aNode
tStartContainer
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
RefPtr
<
Text
>
secondPart
=
startTextNode
-
>
SplitText
(
tStartOffset
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
referenceNode
=
secondPart
;
}
else
{
tChildList
=
tStartContainer
-
>
ChildNodes
(
)
;
referenceNode
=
tChildList
-
>
Item
(
tStartOffset
)
;
tStartContainer
-
>
EnsurePreInsertionValidity
(
aNode
referenceNode
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
uint32_t
newOffset
;
if
(
referenceNode
)
{
int32_t
indexInParent
=
IndexOf
(
referenceNode
)
;
if
(
NS_WARN_IF
(
indexInParent
<
0
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
newOffset
=
static_cast
<
uint32_t
>
(
indexInParent
)
;
}
else
{
newOffset
=
tChildList
-
>
Length
(
)
;
}
if
(
aNode
.
NodeType
(
)
=
=
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
)
{
newOffset
+
=
aNode
.
GetChildCount
(
)
;
}
else
{
newOffset
+
+
;
}
nsCOMPtr
<
nsINode
>
tResultNode
;
tResultNode
=
referenceParentNode
-
>
InsertBefore
(
aNode
referenceNode
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
if
(
Collapsed
(
)
)
{
aRv
=
SetEnd
(
referenceParentNode
newOffset
)
;
}
}
void
nsRange
:
:
SurroundContents
(
nsINode
&
aNewParent
ErrorResult
&
aRv
)
{
if
(
!
CanAccess
(
aNewParent
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
mRoot
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
if
(
mStart
.
Container
(
)
!
=
mEnd
.
Container
(
)
)
{
bool
startIsText
=
mStart
.
Container
(
)
-
>
IsText
(
)
;
bool
endIsText
=
mEnd
.
Container
(
)
-
>
IsText
(
)
;
nsINode
*
startGrandParent
=
mStart
.
Container
(
)
-
>
GetParentNode
(
)
;
nsINode
*
endGrandParent
=
mEnd
.
Container
(
)
-
>
GetParentNode
(
)
;
if
(
!
(
(
startIsText
&
&
endIsText
&
&
startGrandParent
&
&
startGrandParent
=
=
endGrandParent
)
|
|
(
startIsText
&
&
startGrandParent
&
&
startGrandParent
=
=
mEnd
.
Container
(
)
)
|
|
(
endIsText
&
&
endGrandParent
&
&
endGrandParent
=
=
mStart
.
Container
(
)
)
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
}
uint16_t
nodeType
=
aNewParent
.
NodeType
(
)
;
if
(
nodeType
=
=
nsINode
:
:
DOCUMENT_NODE
|
|
nodeType
=
=
nsINode
:
:
DOCUMENT_TYPE_NODE
|
|
nodeType
=
=
nsINode
:
:
DOCUMENT_FRAGMENT_NODE
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_NODE_TYPE_ERR
)
;
return
;
}
RefPtr
<
DocumentFragment
>
docFrag
=
ExtractContents
(
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
if
(
!
docFrag
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsINodeList
>
children
=
aNewParent
.
ChildNodes
(
)
;
if
(
!
children
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
uint32_t
numChildren
=
children
-
>
Length
(
)
;
while
(
numChildren
)
{
nsCOMPtr
<
nsINode
>
child
=
children
-
>
Item
(
-
-
numChildren
)
;
if
(
!
child
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aNewParent
.
RemoveChild
(
*
child
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
InsertNode
(
aNewParent
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
aNewParent
.
AppendChild
(
*
docFrag
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
SelectNode
(
aNewParent
aRv
)
;
}
void
nsRange
:
:
ToString
(
nsAString
&
aReturn
ErrorResult
&
aErr
)
{
aReturn
.
Truncate
(
)
;
if
(
!
mIsPositioned
)
{
return
;
}
#
ifdef
DEBUG_range
printf
(
"
Range
dump
:
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
#
endif
if
(
mStart
.
Container
(
)
=
=
mEnd
.
Container
(
)
)
{
Text
*
textNode
=
mStart
.
Container
(
)
?
mStart
.
Container
(
)
-
>
GetAsText
(
)
:
nullptr
;
if
(
textNode
)
{
#
ifdef
DEBUG_range
textNode
-
>
List
(
stdout
)
;
printf
(
"
End
Range
dump
:
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
#
endif
textNode
-
>
SubstringData
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
-
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
aReturn
aErr
)
;
return
;
}
}
PostContentIterator
postOrderIter
;
nsresult
rv
=
postOrderIter
.
Init
(
this
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aErr
.
Throw
(
rv
)
;
return
;
}
nsString
tempString
;
for
(
;
!
postOrderIter
.
IsDone
(
)
;
postOrderIter
.
Next
(
)
)
{
nsINode
*
n
=
postOrderIter
.
GetCurrentNode
(
)
;
#
ifdef
DEBUG_range
n
-
>
List
(
stdout
)
;
#
endif
Text
*
textNode
=
n
-
>
GetAsText
(
)
;
if
(
textNode
)
{
if
(
n
=
=
mStart
.
Container
(
)
)
{
uint32_t
strLength
=
textNode
-
>
Length
(
)
;
textNode
-
>
SubstringData
(
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
strLength
-
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
tempString
IgnoreErrors
(
)
)
;
aReturn
+
=
tempString
;
}
else
if
(
n
=
=
mEnd
.
Container
(
)
)
{
textNode
-
>
SubstringData
(
0
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
tempString
IgnoreErrors
(
)
)
;
aReturn
+
=
tempString
;
}
else
{
textNode
-
>
GetData
(
tempString
)
;
aReturn
+
=
tempString
;
}
}
}
#
ifdef
DEBUG_range
printf
(
"
End
Range
dump
:
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
#
endif
}
void
nsRange
:
:
Detach
(
)
{
}
already_AddRefed
<
DocumentFragment
>
nsRange
:
:
CreateContextualFragment
(
const
nsAString
&
aFragment
ErrorResult
&
aRv
)
const
{
if
(
!
mIsPositioned
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
return
nsContentUtils
:
:
CreateContextualFragment
(
mStart
.
Container
(
)
aFragment
false
aRv
)
;
}
static
void
ExtractRectFromOffset
(
nsIFrame
*
aFrame
const
int32_t
aOffset
nsRect
*
aR
bool
aFlushToOriginEdge
bool
aClampToEdge
)
{
MOZ_ASSERT
(
aFrame
)
;
MOZ_ASSERT
(
aR
)
;
nsPoint
point
;
aFrame
-
>
GetPointFromOffset
(
aOffset
&
point
)
;
bool
isVertical
=
aFrame
-
>
GetWritingMode
(
)
.
IsVertical
(
)
;
if
(
!
aClampToEdge
&
&
!
aR
-
>
Contains
(
point
)
)
{
if
(
isVertical
)
{
aR
-
>
SetHeight
(
0
)
;
aR
-
>
y
=
point
.
y
;
}
else
{
aR
-
>
SetWidth
(
0
)
;
aR
-
>
x
=
point
.
x
;
}
return
;
}
if
(
aClampToEdge
)
{
point
=
aR
-
>
ClampPoint
(
point
)
;
}
if
(
aFlushToOriginEdge
)
{
if
(
isVertical
)
{
aR
-
>
SetHeight
(
point
.
y
-
aR
-
>
y
)
;
}
else
{
aR
-
>
SetWidth
(
point
.
x
-
aR
-
>
x
)
;
}
}
else
{
if
(
isVertical
)
{
aR
-
>
SetHeight
(
aR
-
>
YMost
(
)
-
point
.
y
)
;
aR
-
>
y
=
point
.
y
;
}
else
{
aR
-
>
SetWidth
(
aR
-
>
XMost
(
)
-
point
.
x
)
;
aR
-
>
x
=
point
.
x
;
}
}
}
static
nsTextFrame
*
GetTextFrameForContent
(
nsIContent
*
aContent
bool
aFlushLayout
)
{
RefPtr
<
Document
>
doc
=
aContent
-
>
OwnerDoc
(
)
;
PresShell
*
presShell
=
doc
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
if
(
aFlushLayout
)
{
const
bool
frameWillBeUnsuppressed
=
presShell
-
>
FrameConstructor
(
)
-
>
EnsureFrameForTextNodeIsCreatedAfterFlush
(
static_cast
<
CharacterData
*
>
(
aContent
)
)
;
if
(
frameWillBeUnsuppressed
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
nsIFrame
*
frame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
|
|
!
frame
-
>
IsTextFrame
(
)
)
{
return
nullptr
;
}
return
static_cast
<
nsTextFrame
*
>
(
frame
)
;
}
static
nsresult
GetPartialTextRect
(
nsLayoutUtils
:
:
RectCallback
*
aCallback
Sequence
<
nsString
>
*
aTextList
nsIContent
*
aContent
int32_t
aStartOffset
int32_t
aEndOffset
bool
aClampToEdge
bool
aFlushLayout
)
{
nsTextFrame
*
textFrame
=
GetTextFrameForContent
(
aContent
aFlushLayout
)
;
if
(
textFrame
)
{
nsIFrame
*
relativeTo
=
nsLayoutUtils
:
:
GetContainingBlockForClientRect
(
textFrame
)
;
for
(
nsTextFrame
*
f
=
textFrame
;
f
;
f
=
static_cast
<
nsTextFrame
*
>
(
f
-
>
GetNextContinuation
(
)
)
)
{
int32_t
fstart
=
f
-
>
GetContentOffset
(
)
fend
=
f
-
>
GetContentEnd
(
)
;
if
(
fend
<
=
aStartOffset
|
|
fstart
>
=
aEndOffset
)
continue
;
int32_t
textContentStart
=
fstart
;
int32_t
textContentEnd
=
fend
;
f
-
>
EnsureTextRun
(
nsTextFrame
:
:
eInflated
)
;
NS_ENSURE_TRUE
(
f
-
>
GetTextRun
(
nsTextFrame
:
:
eInflated
)
NS_ERROR_OUT_OF_MEMORY
)
;
bool
topLeftToBottomRight
=
!
f
-
>
GetTextRun
(
nsTextFrame
:
:
eInflated
)
-
>
IsInlineReversed
(
)
;
nsRect
r
=
f
-
>
GetRectRelativeToSelf
(
)
;
if
(
fstart
<
aStartOffset
)
{
ExtractRectFromOffset
(
f
aStartOffset
&
r
!
topLeftToBottomRight
aClampToEdge
)
;
textContentStart
=
aStartOffset
;
}
if
(
fend
>
aEndOffset
)
{
ExtractRectFromOffset
(
f
aEndOffset
&
r
topLeftToBottomRight
aClampToEdge
)
;
textContentEnd
=
aEndOffset
;
}
r
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
f
r
relativeTo
)
;
aCallback
-
>
AddRect
(
r
)
;
if
(
aTextList
)
{
nsIFrame
:
:
RenderedText
renderedText
=
f
-
>
GetRenderedText
(
textContentStart
textContentEnd
nsIFrame
:
:
TextOffsetType
:
:
OffsetsInContentText
nsIFrame
:
:
TrailingWhitespace
:
:
DontTrim
)
;
NS_ENSURE_TRUE
(
aTextList
-
>
AppendElement
(
renderedText
.
mString
fallible
)
NS_ERROR_OUT_OF_MEMORY
)
;
}
}
}
return
NS_OK
;
}
void
nsRange
:
:
CollectClientRectsAndText
(
nsLayoutUtils
:
:
RectCallback
*
aCollector
Sequence
<
nsString
>
*
aTextList
nsRange
*
aRange
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
bool
aClampToEdge
bool
aFlushLayout
)
{
MOZ_ASSERT
(
RangeUtils
:
:
IsValidOffset
(
aStartOffset
)
)
;
MOZ_ASSERT
(
RangeUtils
:
:
IsValidOffset
(
aEndOffset
)
)
;
nsCOMPtr
<
nsINode
>
startContainer
=
aStartContainer
;
nsCOMPtr
<
nsINode
>
endContainer
=
aEndContainer
;
if
(
!
aStartContainer
-
>
IsInComposedDoc
(
)
)
{
return
;
}
if
(
aFlushLayout
)
{
aStartContainer
-
>
OwnerDoc
(
)
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
if
(
!
aStartContainer
-
>
IsInComposedDoc
(
)
)
{
return
;
}
}
RangeSubtreeIterator
iter
;
nsresult
rv
=
iter
.
Init
(
aRange
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
if
(
iter
.
IsDone
(
)
)
{
if
(
aStartContainer
-
>
IsText
(
)
)
{
nsTextFrame
*
textFrame
=
GetTextFrameForContent
(
aStartContainer
-
>
AsText
(
)
aFlushLayout
)
;
if
(
textFrame
)
{
int32_t
outOffset
;
nsIFrame
*
outFrame
;
textFrame
-
>
GetChildFrameContainingOffset
(
static_cast
<
int32_t
>
(
aStartOffset
)
false
&
outOffset
&
outFrame
)
;
if
(
outFrame
)
{
nsIFrame
*
relativeTo
=
nsLayoutUtils
:
:
GetContainingBlockForClientRect
(
outFrame
)
;
nsRect
r
=
outFrame
-
>
GetRectRelativeToSelf
(
)
;
ExtractRectFromOffset
(
outFrame
static_cast
<
int32_t
>
(
aStartOffset
)
&
r
false
aClampToEdge
)
;
r
.
SetWidth
(
0
)
;
r
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
outFrame
r
relativeTo
)
;
aCollector
-
>
AddRect
(
r
)
;
}
}
}
return
;
}
do
{
nsCOMPtr
<
nsINode
>
node
=
iter
.
GetCurrentNode
(
)
;
iter
.
Next
(
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
node
)
;
if
(
!
content
)
continue
;
if
(
content
-
>
IsText
(
)
)
{
if
(
node
=
=
startContainer
)
{
int32_t
offset
=
startContainer
=
=
endContainer
?
static_cast
<
int32_t
>
(
aEndOffset
)
:
content
-
>
AsText
(
)
-
>
TextDataLength
(
)
;
GetPartialTextRect
(
aCollector
aTextList
content
static_cast
<
int32_t
>
(
aStartOffset
)
offset
aClampToEdge
aFlushLayout
)
;
continue
;
}
else
if
(
node
=
=
endContainer
)
{
GetPartialTextRect
(
aCollector
aTextList
content
0
static_cast
<
int32_t
>
(
aEndOffset
)
aClampToEdge
aFlushLayout
)
;
continue
;
}
}
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsLayoutUtils
:
:
GetAllInFlowRectsAndTexts
(
frame
nsLayoutUtils
:
:
GetContainingBlockForClientRect
(
frame
)
aCollector
aTextList
nsLayoutUtils
:
:
RECTS_ACCOUNT_FOR_TRANSFORMS
)
;
}
}
while
(
!
iter
.
IsDone
(
)
)
;
}
already_AddRefed
<
DOMRect
>
nsRange
:
:
GetBoundingClientRect
(
bool
aClampToEdge
bool
aFlushLayout
)
{
RefPtr
<
DOMRect
>
rect
=
new
DOMRect
(
ToSupports
(
this
)
)
;
if
(
!
mIsPositioned
)
{
return
rect
.
forget
(
)
;
}
nsLayoutUtils
:
:
RectAccumulator
accumulator
;
CollectClientRectsAndText
(
&
accumulator
nullptr
this
mStart
.
Container
(
)
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
mEnd
.
Container
(
)
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
aClampToEdge
aFlushLayout
)
;
nsRect
r
=
accumulator
.
mResultRect
.
IsEmpty
(
)
?
accumulator
.
mFirstRect
:
accumulator
.
mResultRect
;
rect
-
>
SetLayoutRect
(
r
)
;
return
rect
.
forget
(
)
;
}
already_AddRefed
<
DOMRectList
>
nsRange
:
:
GetClientRects
(
bool
aClampToEdge
bool
aFlushLayout
)
{
if
(
!
mIsPositioned
)
{
return
nullptr
;
}
RefPtr
<
DOMRectList
>
rectList
=
new
DOMRectList
(
static_cast
<
AbstractRange
*
>
(
this
)
)
;
nsLayoutUtils
:
:
RectListBuilder
builder
(
rectList
)
;
CollectClientRectsAndText
(
&
builder
nullptr
this
mStart
.
Container
(
)
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
mEnd
.
Container
(
)
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
aClampToEdge
aFlushLayout
)
;
return
rectList
.
forget
(
)
;
}
void
nsRange
:
:
GetClientRectsAndTexts
(
mozilla
:
:
dom
:
:
ClientRectsAndTexts
&
aResult
ErrorResult
&
aErr
)
{
if
(
!
mIsPositioned
)
{
return
;
}
aResult
.
mRectList
=
new
DOMRectList
(
static_cast
<
AbstractRange
*
>
(
this
)
)
;
nsLayoutUtils
:
:
RectListBuilder
builder
(
aResult
.
mRectList
)
;
CollectClientRectsAndText
(
&
builder
&
aResult
.
mTextList
this
mStart
.
Container
(
)
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
mEnd
.
Container
(
)
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
true
true
)
;
}
nsresult
nsRange
:
:
GetUsedFontFaces
(
nsLayoutUtils
:
:
UsedFontFaceList
&
aResult
uint32_t
aMaxRanges
bool
aSkipCollapsedWhitespace
)
{
NS_ENSURE_TRUE
(
mIsPositioned
NS_ERROR_UNEXPECTED
)
;
nsCOMPtr
<
nsINode
>
startContainer
=
mStart
.
Container
(
)
;
nsCOMPtr
<
nsINode
>
endContainer
=
mEnd
.
Container
(
)
;
Document
*
doc
=
mStart
.
Container
(
)
-
>
OwnerDoc
(
)
;
NS_ENSURE_TRUE
(
doc
NS_ERROR_UNEXPECTED
)
;
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
NS_ENSURE_TRUE
(
mStart
.
Container
(
)
-
>
IsInComposedDoc
(
)
NS_ERROR_UNEXPECTED
)
;
nsLayoutUtils
:
:
UsedFontFaceTable
fontFaces
;
RangeSubtreeIterator
iter
;
nsresult
rv
=
iter
.
Init
(
this
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
while
(
!
iter
.
IsDone
(
)
)
{
nsCOMPtr
<
nsINode
>
node
=
iter
.
GetCurrentNode
(
)
;
iter
.
Next
(
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
node
)
;
if
(
!
content
)
{
continue
;
}
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
continue
;
}
if
(
content
-
>
IsText
(
)
)
{
if
(
node
=
=
startContainer
)
{
int32_t
offset
=
startContainer
=
=
endContainer
?
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
:
content
-
>
AsText
(
)
-
>
TextDataLength
(
)
;
nsLayoutUtils
:
:
GetFontFacesForText
(
frame
*
mStart
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
offset
true
aResult
fontFaces
aMaxRanges
aSkipCollapsedWhitespace
)
;
continue
;
}
if
(
node
=
=
endContainer
)
{
nsLayoutUtils
:
:
GetFontFacesForText
(
frame
0
*
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
true
aResult
fontFaces
aMaxRanges
aSkipCollapsedWhitespace
)
;
continue
;
}
}
nsLayoutUtils
:
:
GetFontFacesForFrames
(
frame
aResult
fontFaces
aMaxRanges
aSkipCollapsedWhitespace
)
;
}
return
NS_OK
;
}
nsINode
*
nsRange
:
:
GetRegisteredClosestCommonInclusiveAncestor
(
)
{
MOZ_ASSERT
(
IsInSelection
(
)
"
GetRegisteredClosestCommonInclusiveAncestor
only
valid
for
range
"
"
in
selection
"
)
;
MOZ_ASSERT
(
mRegisteredClosestCommonInclusiveAncestor
)
;
return
mRegisteredClosestCommonInclusiveAncestor
;
}
bool
nsRange
:
:
AutoInvalidateSelection
:
:
sIsNested
;
nsRange
:
:
AutoInvalidateSelection
:
:
~
AutoInvalidateSelection
(
)
{
if
(
!
mCommonAncestor
)
{
return
;
}
sIsNested
=
false
;
:
:
InvalidateAllFrames
(
mCommonAncestor
)
;
if
(
mRange
-
>
IsInSelection
(
)
)
{
nsINode
*
commonAncestor
=
mRange
-
>
GetRegisteredClosestCommonInclusiveAncestor
(
)
;
if
(
commonAncestor
&
&
commonAncestor
!
=
mCommonAncestor
)
{
:
:
InvalidateAllFrames
(
commonAncestor
)
;
}
}
}
already_AddRefed
<
nsRange
>
nsRange
:
:
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
return
window
-
>
GetDoc
(
)
-
>
CreateRange
(
aRv
)
;
}
static
bool
ExcludeIfNextToNonSelectable
(
nsIContent
*
aContent
)
{
return
aContent
-
>
IsText
(
)
&
&
aContent
-
>
HasFlag
(
NS_CREATE_FRAME_IF_NON_WHITESPACE
)
;
}
void
nsRange
:
:
ExcludeNonSelectableNodes
(
nsTArray
<
RefPtr
<
nsRange
>
>
*
aOutRanges
)
{
if
(
!
mIsPositioned
)
{
MOZ_ASSERT
(
false
)
;
return
;
}
MOZ_ASSERT
(
mEnd
.
Container
(
)
)
;
MOZ_ASSERT
(
mStart
.
Container
(
)
)
;
nsRange
*
range
=
this
;
RefPtr
<
nsRange
>
newRange
;
while
(
range
)
{
PreContentIterator
preOrderIter
;
nsresult
rv
=
preOrderIter
.
Init
(
range
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
bool
added
=
false
;
bool
seenSelectable
=
false
;
nsIContent
*
firstNonSelectableContent
=
nullptr
;
while
(
true
)
{
ErrorResult
err
;
nsINode
*
node
=
preOrderIter
.
GetCurrentNode
(
)
;
preOrderIter
.
Next
(
)
;
bool
selectable
=
true
;
nsIContent
*
content
=
node
&
&
node
-
>
IsContent
(
)
?
node
-
>
AsContent
(
)
:
nullptr
;
if
(
content
)
{
if
(
firstNonSelectableContent
&
&
ExcludeIfNextToNonSelectable
(
content
)
)
{
selectable
=
false
;
}
if
(
selectable
)
{
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
for
(
nsIContent
*
p
=
content
;
!
frame
&
&
(
p
=
p
-
>
GetParent
(
)
)
;
)
{
frame
=
p
-
>
GetPrimaryFrame
(
)
;
}
if
(
frame
)
{
selectable
=
frame
-
>
IsSelectable
(
nullptr
)
;
}
}
}
if
(
!
selectable
)
{
if
(
!
firstNonSelectableContent
)
{
firstNonSelectableContent
=
content
;
}
if
(
preOrderIter
.
IsDone
(
)
&
&
seenSelectable
)
{
range
-
>
SetEndBefore
(
*
firstNonSelectableContent
err
)
;
}
}
else
if
(
firstNonSelectableContent
)
{
if
(
range
=
=
this
&
&
!
seenSelectable
)
{
range
-
>
SetStartBefore
(
*
node
err
)
;
if
(
err
.
Failed
(
)
)
{
return
;
}
break
;
}
else
{
nsINode
*
endContainer
=
range
-
>
mEnd
.
Container
(
)
;
const
int32_t
endOffset
=
*
range
-
>
mEnd
.
Offset
(
RangeBoundary
:
:
OffsetFilter
:
:
kValidOffsets
)
;
range
-
>
SetEndBefore
(
*
firstNonSelectableContent
err
)
;
if
(
!
added
&
&
!
err
.
Failed
(
)
)
{
aOutRanges
-
>
AppendElement
(
range
)
;
}
nsINode
*
startContainer
=
node
;
int32_t
startOffset
=
0
;
if
(
content
&
&
content
-
>
HasIndependentSelection
(
)
)
{
nsINode
*
parent
=
startContainer
-
>
GetParent
(
)
;
if
(
parent
)
{
startOffset
=
parent
-
>
ComputeIndexOf
(
startContainer
)
;
startContainer
=
parent
;
}
}
newRange
=
nsRange
:
:
Create
(
startContainer
startOffset
endContainer
endOffset
IgnoreErrors
(
)
)
;
if
(
!
newRange
|
|
newRange
-
>
Collapsed
(
)
)
{
newRange
=
nullptr
;
}
range
=
newRange
;
break
;
}
}
else
{
seenSelectable
=
true
;
if
(
!
added
)
{
added
=
true
;
aOutRanges
-
>
AppendElement
(
range
)
;
}
}
if
(
preOrderIter
.
IsDone
(
)
)
{
return
;
}
}
}
}
struct
InnerTextAccumulator
{
explicit
InnerTextAccumulator
(
mozilla
:
:
dom
:
:
DOMString
&
aValue
)
:
mString
(
aValue
.
AsAString
(
)
)
mRequiredLineBreakCount
(
0
)
{
}
void
FlushLineBreaks
(
)
{
while
(
mRequiredLineBreakCount
>
0
)
{
if
(
!
mString
.
IsEmpty
(
)
)
{
mString
.
Append
(
'
\
n
'
)
;
}
-
-
mRequiredLineBreakCount
;
}
}
void
Append
(
char
aCh
)
{
Append
(
nsAutoString
(
aCh
)
)
;
}
void
Append
(
const
nsAString
&
aString
)
{
if
(
aString
.
IsEmpty
(
)
)
{
return
;
}
FlushLineBreaks
(
)
;
mString
.
Append
(
aString
)
;
}
void
AddRequiredLineBreakCount
(
int8_t
aCount
)
{
mRequiredLineBreakCount
=
std
:
:
max
(
mRequiredLineBreakCount
aCount
)
;
}
nsAString
&
mString
;
int8_t
mRequiredLineBreakCount
;
}
;
static
bool
IsVisibleAndNotInReplacedElement
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
|
|
!
aFrame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
|
|
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
return
false
;
}
for
(
nsIFrame
*
f
=
aFrame
-
>
GetParent
(
)
;
f
;
f
=
f
-
>
GetParent
(
)
)
{
if
(
f
-
>
IsFrameOfType
(
nsIFrame
:
:
eReplaced
)
&
&
!
f
-
>
GetContent
(
)
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
button
nsGkAtoms
:
:
select
)
&
&
!
f
-
>
GetContent
(
)
-
>
IsSVGElement
(
)
)
{
return
false
;
}
}
return
true
;
}
static
void
AppendTransformedText
(
InnerTextAccumulator
&
aResult
nsIContent
*
aContainer
)
{
auto
textNode
=
static_cast
<
CharacterData
*
>
(
aContainer
)
;
nsIFrame
*
frame
=
textNode
-
>
GetPrimaryFrame
(
)
;
if
(
!
IsVisibleAndNotInReplacedElement
(
frame
)
)
{
return
;
}
nsIFrame
:
:
RenderedText
text
=
frame
-
>
GetRenderedText
(
0
aContainer
-
>
GetChildCount
(
)
)
;
aResult
.
Append
(
text
.
mString
)
;
}
enum
TreeTraversalState
{
AT_NODE
AFTER_NODE
}
;
static
int8_t
GetRequiredInnerTextLineBreakCount
(
nsIFrame
*
aFrame
)
{
if
(
aFrame
-
>
GetContent
(
)
-
>
IsHTMLElement
(
nsGkAtoms
:
:
p
)
)
{
return
2
;
}
const
nsStyleDisplay
*
styleDisplay
=
aFrame
-
>
StyleDisplay
(
)
;
if
(
styleDisplay
-
>
IsBlockOutside
(
aFrame
)
|
|
styleDisplay
-
>
mDisplay
=
=
StyleDisplay
:
:
TableCaption
)
{
return
1
;
}
return
0
;
}
static
bool
IsLastCellOfRow
(
nsIFrame
*
aFrame
)
{
LayoutFrameType
type
=
aFrame
-
>
Type
(
)
;
if
(
type
!
=
LayoutFrameType
:
:
TableCell
)
{
return
true
;
}
for
(
nsIFrame
*
c
=
aFrame
;
c
;
c
=
c
-
>
GetNextContinuation
(
)
)
{
if
(
c
-
>
GetNextSibling
(
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
IsLastRowOfRowGroup
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
IsTableRowFrame
(
)
)
{
return
true
;
}
for
(
nsIFrame
*
c
=
aFrame
;
c
;
c
=
c
-
>
GetNextContinuation
(
)
)
{
if
(
c
-
>
GetNextSibling
(
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
IsLastNonemptyRowGroupOfTable
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
IsTableRowGroupFrame
(
)
)
{
return
true
;
}
for
(
nsIFrame
*
c
=
aFrame
;
c
;
c
=
c
-
>
GetNextContinuation
(
)
)
{
for
(
nsIFrame
*
next
=
c
-
>
GetNextSibling
(
)
;
next
;
next
=
next
-
>
GetNextSibling
(
)
)
{
if
(
next
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
)
{
return
false
;
}
}
}
return
true
;
}
void
nsRange
:
:
GetInnerTextNoFlush
(
DOMString
&
aValue
ErrorResult
&
aError
nsIContent
*
aContainer
)
{
InnerTextAccumulator
result
(
aValue
)
;
if
(
aContainer
-
>
IsText
(
)
)
{
AppendTransformedText
(
result
aContainer
)
;
return
;
}
nsIContent
*
currentNode
=
aContainer
;
TreeTraversalState
currentState
=
AFTER_NODE
;
nsIContent
*
endNode
=
aContainer
;
TreeTraversalState
endState
=
AFTER_NODE
;
nsIContent
*
firstChild
=
aContainer
-
>
GetFirstChild
(
)
;
if
(
firstChild
)
{
currentNode
=
firstChild
;
currentState
=
AT_NODE
;
}
while
(
currentNode
!
=
endNode
|
|
currentState
!
=
endState
)
{
nsIFrame
*
f
=
currentNode
-
>
GetPrimaryFrame
(
)
;
bool
isVisibleAndNotReplaced
=
IsVisibleAndNotInReplacedElement
(
f
)
;
if
(
currentState
=
=
AT_NODE
)
{
bool
isText
=
currentNode
-
>
IsText
(
)
;
if
(
isVisibleAndNotReplaced
)
{
result
.
AddRequiredLineBreakCount
(
GetRequiredInnerTextLineBreakCount
(
f
)
)
;
if
(
isText
)
{
nsIFrame
:
:
RenderedText
text
=
f
-
>
GetRenderedText
(
)
;
result
.
Append
(
text
.
mString
)
;
}
}
nsIContent
*
child
=
currentNode
-
>
GetFirstChild
(
)
;
if
(
child
)
{
currentNode
=
child
;
continue
;
}
currentState
=
AFTER_NODE
;
}
if
(
currentNode
=
=
endNode
&
&
currentState
=
=
endState
)
{
break
;
}
if
(
isVisibleAndNotReplaced
)
{
if
(
currentNode
-
>
IsHTMLElement
(
nsGkAtoms
:
:
br
)
)
{
result
.
Append
(
'
\
n
'
)
;
}
switch
(
f
-
>
StyleDisplay
(
)
-
>
mDisplay
)
{
case
StyleDisplay
:
:
TableCell
:
if
(
!
IsLastCellOfRow
(
f
)
)
{
result
.
Append
(
'
\
t
'
)
;
}
break
;
case
StyleDisplay
:
:
TableRow
:
if
(
!
IsLastRowOfRowGroup
(
f
)
|
|
!
IsLastNonemptyRowGroupOfTable
(
f
-
>
GetParent
(
)
)
)
{
result
.
Append
(
'
\
n
'
)
;
}
break
;
default
:
break
;
}
result
.
AddRequiredLineBreakCount
(
GetRequiredInnerTextLineBreakCount
(
f
)
)
;
}
nsIContent
*
next
=
currentNode
-
>
GetNextSibling
(
)
;
if
(
next
)
{
currentNode
=
next
;
currentState
=
AT_NODE
;
}
else
{
currentNode
=
currentNode
-
>
GetParent
(
)
;
}
}
}
