#
ifndef
nsNameSpaceManager_h___
#
define
nsNameSpaceManager_h___
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
class
nsAString
;
class
nsNameSpaceManager
final
{
public
:
virtual
~
nsNameSpaceManager
(
)
{
}
virtual
nsresult
RegisterNameSpace
(
const
nsAString
&
aURI
int32_t
&
aNameSpaceID
)
;
virtual
nsresult
GetNameSpaceURI
(
int32_t
aNameSpaceID
nsAString
&
aURI
)
;
nsIAtom
*
NameSpaceURIAtom
(
int32_t
aNameSpaceID
)
{
MOZ_ASSERT
(
aNameSpaceID
>
0
&
&
(
int64_t
)
aNameSpaceID
<
=
(
int64_t
)
mURIArray
.
Length
(
)
)
;
return
mURIArray
.
ElementAt
(
aNameSpaceID
-
1
)
;
}
virtual
int32_t
GetNameSpaceID
(
const
nsAString
&
aURI
)
;
virtual
bool
HasElementCreator
(
int32_t
aNameSpaceID
)
;
static
nsNameSpaceManager
*
GetInstance
(
)
;
private
:
bool
Init
(
)
;
nsresult
AddNameSpace
(
already_AddRefed
<
nsIAtom
>
aURI
const
int32_t
aNameSpaceID
)
;
nsDataHashtable
<
nsISupportsHashKey
int32_t
>
mURIToIDTable
;
nsTArray
<
nsCOMPtr
<
nsIAtom
>
>
mURIArray
;
static
mozilla
:
:
StaticAutoPtr
<
nsNameSpaceManager
>
sInstance
;
}
;
#
endif
