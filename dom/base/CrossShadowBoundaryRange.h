#
ifndef
mozilla_dom_CrossShadowBoundaryRange_h
#
define
mozilla_dom_CrossShadowBoundaryRange_h
#
include
"
mozilla
/
RangeBoundary
.
h
"
#
include
"
mozilla
/
RangeUtils
.
h
"
#
include
"
mozilla
/
dom
/
AbstractRange
.
h
"
#
include
"
mozilla
/
dom
/
StaticRange
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
CrossShadowBoundaryRange
final
:
public
StaticRange
public
nsStubMutationObserver
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHODIMP_
(
void
)
DeleteCycleCollectable
(
void
)
override
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
CrossShadowBoundaryRange
StaticRange
)
CrossShadowBoundaryRange
(
)
=
delete
;
explicit
CrossShadowBoundaryRange
(
const
StaticRange
&
aOther
)
=
delete
;
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
static
already_AddRefed
<
CrossShadowBoundaryRange
>
Create
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
nsRange
*
aOwner
)
;
void
NotifyNodeBecomesShadowHost
(
nsINode
*
aNode
)
{
if
(
aNode
=
=
mStart
.
Container
(
)
)
{
mStart
.
NotifyParentBecomesShadowHost
(
)
;
}
if
(
aNode
=
=
mEnd
.
Container
(
)
)
{
mEnd
.
NotifyParentBecomesShadowHost
(
)
;
}
}
nsINode
*
GetCommonAncestor
(
)
const
{
return
mCommonAncestor
;
}
nsresult
SetStartAndEnd
(
nsINode
*
aStartContainer
uint32_t
aStartOffset
nsINode
*
aEndContainer
uint32_t
aEndOffset
)
=
delete
;
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
nsresult
SetStartAndEnd
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
)
{
return
StaticRange
:
:
SetStartAndEnd
(
aStartBoundary
aEndBoundary
)
;
}
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
private
:
explicit
CrossShadowBoundaryRange
(
nsINode
*
aNode
nsRange
*
aOwner
)
:
StaticRange
(
aNode
RangeBoundaryIsMutationObserved
:
:
Yes
)
mOwner
(
aOwner
)
{
}
virtual
~
CrossShadowBoundaryRange
(
)
=
default
;
template
<
typename
SPT
typename
SRT
typename
EPT
typename
ERT
>
void
DoSetRange
(
const
RangeBoundaryBase
<
SPT
SRT
>
&
aStartBoundary
const
RangeBoundaryBase
<
EPT
ERT
>
&
aEndBoundary
nsINode
*
aRootNode
nsRange
*
aOwner
)
;
nsCOMPtr
<
nsINode
>
mCommonAncestor
;
static
nsTArray
<
RefPtr
<
CrossShadowBoundaryRange
>
>
*
sCachedRanges
;
friend
class
AbstractRange
;
nsRange
*
mOwner
;
}
;
}
}
#
endif
