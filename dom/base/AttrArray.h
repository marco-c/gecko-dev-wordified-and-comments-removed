#
ifndef
AttrArray_h___
#
define
AttrArray_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
dom
/
BorrowedAttrInfo
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsCaseTreatment
.
h
"
class
nsMappedAttributes
;
class
nsMappedAttributeElement
;
namespace
mozilla
{
class
AttributeStyles
;
}
class
AttrArray
{
using
BorrowedAttrInfo
=
mozilla
:
:
dom
:
:
BorrowedAttrInfo
;
public
:
AttrArray
(
)
=
default
;
~
AttrArray
(
)
=
default
;
bool
HasAttrs
(
)
const
{
return
NonMappedAttrCount
(
)
|
|
MappedAttrCount
(
)
;
}
uint32_t
AttrCount
(
)
const
{
return
NonMappedAttrCount
(
)
+
MappedAttrCount
(
)
;
}
const
nsAttrValue
*
GetAttr
(
const
nsAtom
*
aLocalName
int32_t
aNamespaceID
=
kNameSpaceID_None
)
const
;
const
nsAttrValue
*
GetAttr
(
const
nsAString
&
aName
)
const
;
const
nsAttrValue
*
GetAttr
(
const
nsAString
&
aName
nsCaseTreatment
aCaseSensitive
)
const
;
const
nsAttrValue
*
AttrAt
(
uint32_t
aPos
)
const
;
nsresult
SetAndSwapAttr
(
nsAtom
*
aLocalName
nsAttrValue
&
aValue
bool
*
aHadValue
)
;
nsresult
SetAndSwapAttr
(
mozilla
:
:
dom
:
:
NodeInfo
*
aName
nsAttrValue
&
aValue
bool
*
aHadValue
)
;
nsresult
RemoveAttrAt
(
uint32_t
aPos
nsAttrValue
&
aValue
)
;
const
nsAttrName
*
AttrNameAt
(
uint32_t
aPos
)
const
;
BorrowedAttrInfo
AttrInfoAt
(
uint32_t
aPos
)
const
;
const
nsAttrName
*
GetSafeAttrNameAt
(
uint32_t
aPos
)
const
;
const
nsAttrName
*
GetExistingAttrNameFromQName
(
const
nsAString
&
aName
)
const
;
int32_t
IndexOfAttr
(
const
nsAtom
*
aLocalName
int32_t
aNamespaceID
=
kNameSpaceID_None
)
const
;
nsresult
SetAndSwapMappedAttr
(
nsAtom
*
aLocalName
nsAttrValue
&
aValue
nsMappedAttributeElement
*
aContent
bool
*
aHadValue
)
;
nsresult
UpdateMappedAttrRuleMapper
(
nsMappedAttributeElement
&
aElement
)
{
if
(
!
mImpl
|
|
!
mImpl
-
>
mMappedAttrs
)
{
return
NS_OK
;
}
return
DoUpdateMappedAttrRuleMapper
(
aElement
)
;
}
void
Compact
(
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
bool
HasMappedAttrs
(
)
const
{
return
!
!
GetMapped
(
)
;
}
const
nsMappedAttributes
*
GetMapped
(
)
const
{
return
mImpl
?
mImpl
-
>
mMappedAttrs
:
nullptr
;
}
nsresult
ForceMapped
(
nsMappedAttributeElement
*
aContent
)
;
void
ClearMappedServoStyle
(
)
;
nsresult
EnsureCapacityToClone
(
const
AttrArray
&
aOther
)
;
enum
AttrValuesState
{
ATTR_MISSING
=
-
1
ATTR_VALUE_NO_MATCH
=
-
2
}
;
using
AttrValuesArray
=
nsStaticAtom
*
const
;
int32_t
FindAttrValueIn
(
int32_t
aNameSpaceID
const
nsAtom
*
aName
AttrValuesArray
*
aValues
nsCaseTreatment
aCaseSensitive
)
const
;
inline
bool
GetAttr
(
int32_t
aNameSpaceID
const
nsAtom
*
aName
nsAString
&
aResult
)
const
{
MOZ_ASSERT
(
aResult
.
IsEmpty
(
)
"
Should
have
empty
string
coming
in
"
)
;
const
nsAttrValue
*
val
=
GetAttr
(
aName
aNameSpaceID
)
;
if
(
val
)
{
val
-
>
ToString
(
aResult
)
;
return
true
;
}
return
false
;
}
inline
bool
HasAttr
(
int32_t
aNameSpaceID
const
nsAtom
*
aName
)
const
{
return
GetAttr
(
aName
aNameSpaceID
)
!
=
nullptr
;
}
inline
bool
AttrValueIs
(
int32_t
aNameSpaceID
const
nsAtom
*
aName
const
nsAString
&
aValue
nsCaseTreatment
aCaseSensitive
)
const
{
NS_ASSERTION
(
aName
"
Must
have
attr
name
"
)
;
NS_ASSERTION
(
aNameSpaceID
!
=
kNameSpaceID_Unknown
"
Must
have
namespace
"
)
;
const
nsAttrValue
*
val
=
GetAttr
(
aName
aNameSpaceID
)
;
return
val
&
&
val
-
>
Equals
(
aValue
aCaseSensitive
)
;
}
inline
bool
AttrValueIs
(
int32_t
aNameSpaceID
const
nsAtom
*
aName
const
nsAtom
*
aValue
nsCaseTreatment
aCaseSensitive
)
const
{
NS_ASSERTION
(
aName
"
Must
have
attr
name
"
)
;
NS_ASSERTION
(
aNameSpaceID
!
=
kNameSpaceID_Unknown
"
Must
have
namespace
"
)
;
NS_ASSERTION
(
aValue
"
Null
value
atom
"
)
;
const
nsAttrValue
*
val
=
GetAttr
(
aName
aNameSpaceID
)
;
return
val
&
&
val
-
>
Equals
(
aValue
aCaseSensitive
)
;
}
nsresult
SetMappedAttributeStyles
(
mozilla
:
:
AttributeStyles
*
aNewStyles
)
;
struct
InternalAttr
{
nsAttrName
mName
;
nsAttrValue
mValue
;
}
;
AttrArray
(
const
AttrArray
&
aOther
)
=
delete
;
AttrArray
&
operator
=
(
const
AttrArray
&
aOther
)
=
delete
;
private
:
uint32_t
NonMappedAttrCount
(
)
const
{
return
mImpl
?
mImpl
-
>
mAttrCount
:
0
;
}
uint32_t
MappedAttrCount
(
)
const
{
return
mImpl
&
&
mImpl
-
>
mMappedAttrs
?
DoGetMappedAttrCount
(
)
:
0
;
}
uint32_t
DoGetMappedAttrCount
(
)
const
;
nsMappedAttributes
*
ModifiableMapped
(
nsMappedAttributeElement
*
aContent
bool
aWillAddAttr
int32_t
aAttrCount
=
1
)
;
nsresult
MakeMappedUnique
(
nsMappedAttributes
*
aAttributes
)
;
bool
GrowBy
(
uint32_t
aGrowSize
)
;
template
<
typename
Name
>
nsresult
AddNewAttribute
(
Name
*
nsAttrValue
&
)
;
nsresult
DoUpdateMappedAttrRuleMapper
(
nsMappedAttributeElement
&
aElement
)
;
#
ifdef
_MSC_VER
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4200
)
#
endif
class
Impl
{
public
:
constexpr
static
size_t
AllocationSizeForAttributes
(
uint32_t
aAttrCount
)
{
return
sizeof
(
Impl
)
+
aAttrCount
*
sizeof
(
InternalAttr
)
;
}
auto
NonMappedAttrs
(
)
const
{
return
mozilla
:
:
Span
<
const
InternalAttr
>
{
mBuffer
mAttrCount
}
;
}
auto
NonMappedAttrs
(
)
{
return
mozilla
:
:
Span
<
InternalAttr
>
{
mBuffer
mAttrCount
}
;
}
Impl
(
const
Impl
&
)
=
delete
;
Impl
(
Impl
&
&
)
=
delete
;
~
Impl
(
)
;
uint32_t
mAttrCount
;
uint32_t
mCapacity
;
nsMappedAttributes
*
mMappedAttrs
;
InternalAttr
mBuffer
[
0
]
;
}
;
#
ifdef
_MSC_VER
#
pragma
warning
(
pop
)
#
endif
mozilla
:
:
Span
<
InternalAttr
>
NonMappedAttrs
(
)
{
return
mImpl
?
mImpl
-
>
NonMappedAttrs
(
)
:
mozilla
:
:
Span
<
InternalAttr
>
(
)
;
}
mozilla
:
:
Span
<
const
InternalAttr
>
NonMappedAttrs
(
)
const
{
return
mImpl
?
mImpl
-
>
NonMappedAttrs
(
)
:
mozilla
:
:
Span
<
const
InternalAttr
>
(
)
;
}
mozilla
:
:
UniquePtr
<
Impl
>
mImpl
;
}
;
#
endif
