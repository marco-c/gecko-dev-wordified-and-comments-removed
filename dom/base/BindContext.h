#
ifndef
mozilla_dom_BindContext_h__
#
define
mozilla_dom_BindContext_h__
#
ifdef
MOZ_XBL
#
include
"
nsXBLBinding
.
h
"
#
endif
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
MOZ_STACK_CLASS
BindContext
final
{
struct
NestingLevel
;
friend
struct
NestingLevel
;
Document
&
OwnerDoc
(
)
const
{
return
mDoc
;
}
bool
InComposedDoc
(
)
const
{
return
mInComposedDoc
;
}
bool
InUncomposedDoc
(
)
const
{
return
mInUncomposedDoc
;
}
Document
*
GetComposedDoc
(
)
const
{
return
mInComposedDoc
?
&
mDoc
:
nullptr
;
}
Document
*
GetUncomposedDoc
(
)
const
{
return
mInUncomposedDoc
?
&
mDoc
:
nullptr
;
}
bool
SubtreeRootChanges
(
)
const
{
return
mSubtreeRootChanges
;
}
Element
*
GetBindingParent
(
)
const
{
return
mBindingParent
;
}
explicit
BindContext
(
nsINode
&
aParent
)
:
mDoc
(
*
aParent
.
OwnerDoc
(
)
)
mBindingParent
(
aParent
.
IsContent
(
)
?
aParent
.
AsContent
(
)
-
>
GetBindingParent
(
)
:
nullptr
)
mInComposedDoc
(
aParent
.
IsInComposedDoc
(
)
)
mInUncomposedDoc
(
aParent
.
IsInUncomposedDoc
(
)
)
mSubtreeRootChanges
(
true
)
mCollectingDisplayedNodeDataDuringLoad
(
ShouldCollectDisplayedNodeDataDuringLoad
(
mInComposedDoc
mDoc
aParent
)
)
{
}
explicit
BindContext
(
ShadowRoot
&
aShadowRoot
)
:
mDoc
(
*
aShadowRoot
.
OwnerDoc
(
)
)
mBindingParent
(
aShadowRoot
.
Host
(
)
)
mInComposedDoc
(
aShadowRoot
.
IsInComposedDoc
(
)
)
mInUncomposedDoc
(
false
)
mSubtreeRootChanges
(
false
)
mCollectingDisplayedNodeDataDuringLoad
(
ShouldCollectDisplayedNodeDataDuringLoad
(
mInComposedDoc
mDoc
aShadowRoot
)
)
{
}
enum
ForNativeAnonymous
{
ForNativeAnonymous
}
;
BindContext
(
Element
&
aParentElement
enum
ForNativeAnonymous
)
:
mDoc
(
*
aParentElement
.
OwnerDoc
(
)
)
mBindingParent
(
&
aParentElement
)
mInComposedDoc
(
aParentElement
.
IsInComposedDoc
(
)
)
mInUncomposedDoc
(
aParentElement
.
IsInUncomposedDoc
(
)
)
mSubtreeRootChanges
(
true
)
mCollectingDisplayedNodeDataDuringLoad
(
ShouldCollectDisplayedNodeDataDuringLoad
(
mInComposedDoc
mDoc
aParentElement
)
)
{
MOZ_ASSERT
(
mInComposedDoc
"
Binding
NAC
in
a
disconnected
subtree
?
"
)
;
}
#
ifdef
MOZ_XBL
BindContext
(
nsXBLBinding
&
aBinding
Element
&
aParentElement
)
:
mDoc
(
*
aParentElement
.
OwnerDoc
(
)
)
mBindingParent
(
aBinding
.
GetBoundElement
(
)
)
mInComposedDoc
(
aParentElement
.
IsInComposedDoc
(
)
)
mInUncomposedDoc
(
aParentElement
.
IsInUncomposedDoc
(
)
)
mSubtreeRootChanges
(
true
)
mCollectingDisplayedNodeDataDuringLoad
(
ShouldCollectDisplayedNodeDataDuringLoad
(
mInComposedDoc
mDoc
aParentElement
)
)
{
}
#
endif
bool
CollectingDisplayedNodeDataDuringLoad
(
)
const
{
return
mCollectingDisplayedNodeDataDuringLoad
;
}
private
:
static
bool
IsLikelyUndisplayed
(
const
nsINode
&
aParent
)
{
return
aParent
.
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
style
nsGkAtoms
:
:
script
)
;
}
static
bool
ShouldCollectDisplayedNodeDataDuringLoad
(
bool
aConnected
Document
&
aDoc
nsINode
&
aParent
)
{
return
aDoc
.
GetReadyStateEnum
(
)
=
=
Document
:
:
READYSTATE_LOADING
&
&
aConnected
&
&
!
IsLikelyUndisplayed
(
aParent
)
;
}
Document
&
mDoc
;
Element
*
const
mBindingParent
;
const
bool
mInComposedDoc
;
const
bool
mInUncomposedDoc
;
const
bool
mSubtreeRootChanges
;
bool
mCollectingDisplayedNodeDataDuringLoad
;
}
;
struct
MOZ_STACK_CLASS
BindContext
:
:
NestingLevel
{
explicit
NestingLevel
(
BindContext
&
aContext
const
Element
&
aParent
)
:
mRestoreCollecting
(
aContext
.
mCollectingDisplayedNodeDataDuringLoad
)
{
if
(
aContext
.
mCollectingDisplayedNodeDataDuringLoad
)
{
aContext
.
mCollectingDisplayedNodeDataDuringLoad
=
BindContext
:
:
IsLikelyUndisplayed
(
aParent
)
;
}
}
private
:
AutoRestore
<
bool
>
mRestoreCollecting
;
}
;
}
}
#
endif
