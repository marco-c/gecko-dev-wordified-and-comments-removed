#
ifndef
nsWindowMemoryReporter_h__
#
define
nsWindowMemoryReporter_h__
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
class
nsWindowMemoryReporter
final
:
public
nsIMemoryReporter
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
NS_DECL_NSIOBSERVER
static
void
Init
(
)
;
#
ifdef
DEBUG
static
void
UnlinkGhostWindows
(
)
;
#
endif
static
nsWindowMemoryReporter
*
Get
(
)
;
void
ObserveDOMWindowDetached
(
nsGlobalWindow
*
aWindow
)
;
private
:
~
nsWindowMemoryReporter
(
)
;
class
GhostWindowsReporter
final
:
public
nsIMemoryReporter
{
~
GhostWindowsReporter
(
)
{
}
public
:
NS_DECL_ISUPPORTS
static
int64_t
DistinguishedAmount
(
)
;
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
override
{
MOZ_COLLECT_REPORT
(
"
ghost
-
windows
"
KIND_OTHER
UNITS_COUNT
DistinguishedAmount
(
)
"
The
number
of
ghost
windows
present
(
the
number
of
nodes
underneath
"
"
explicit
/
window
-
objects
/
top
(
none
)
/
ghost
modulo
race
conditions
)
.
A
ghost
"
"
window
is
not
shown
in
any
tab
does
not
share
a
domain
with
any
non
-
detached
"
"
windows
and
has
met
these
criteria
for
at
least
"
"
memory
.
ghost_window_timeout_seconds
or
has
survived
a
round
of
"
"
about
:
memory
'
s
minimize
memory
usage
button
.
\
n
\
n
"
"
Ghost
windows
can
happen
legitimately
but
they
are
often
indicative
of
"
"
leaks
in
the
browser
or
add
-
ons
.
"
)
;
return
NS_OK
;
}
}
;
nsWindowMemoryReporter
(
)
;
uint32_t
GetGhostTimeout
(
)
;
void
ObserveAfterMinimizeMemoryUsage
(
)
;
void
CheckForGhostWindows
(
nsTHashtable
<
nsUint64HashKey
>
*
aOutGhostIDs
=
nullptr
)
;
void
AsyncCheckForGhostWindows
(
)
;
void
KillCheckTimer
(
)
;
static
void
CheckTimerFired
(
nsITimer
*
aTimer
void
*
aClosure
)
;
nsDataHashtable
<
nsISupportsHashKey
mozilla
:
:
TimeStamp
>
mDetachedWindows
;
mozilla
:
:
TimeStamp
mLastCheckForGhostWindows
;
nsCOMPtr
<
nsITimer
>
mCheckTimer
;
bool
mCycleCollectorIsRunning
;
bool
mCheckTimerWaitingForCCEnd
;
int64_t
mGhostWindowCount
;
}
;
#
endif
