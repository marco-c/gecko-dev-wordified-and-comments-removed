#
include
"
DOMPreferences
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
namespace
mozilla
{
namespace
dom
{
void
DOMPreferences
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
if
!
(
defined
(
DEBUG
)
|
|
defined
(
MOZ_ENABLE_JS_DUMP
)
)
DOMPreferences
:
:
DumpEnabled
(
)
;
#
endif
#
define
DOM_PREF
(
name
pref
)
DOMPreferences
:
:
name
(
)
;
#
include
"
DOMPreferencesInternal
.
h
"
#
undef
DOM_PREF
}
#
define
DOM_PREF
(
name
pref
)
bool
\
DOMPreferences
:
:
name
(
)
\
{
\
static
bool
initialized
=
false
;
\
static
Atomic
<
bool
>
cachedValue
;
\
if
(
!
initialized
)
{
\
initialized
=
true
;
\
Preferences
:
:
AddAtomicBoolVarCache
(
&
cachedValue
\
pref
false
)
;
\
}
\
return
cachedValue
;
\
}
#
if
!
(
defined
(
DEBUG
)
|
|
defined
(
MOZ_ENABLE_JS_DUMP
)
)
DOM_PREF
(
DumpEnabled
"
browser
.
dom
.
window
.
dump
.
enabled
"
)
#
else
bool
DOMPreferences
:
:
DumpEnabled
(
)
{
return
true
;
}
#
endif
#
include
"
DOMPreferencesInternal
.
h
"
#
undef
DOM_PREF
#
define
DOM_PREF_WEBIDL
(
name
)
bool
\
DOMPreferences
:
:
name
(
JSContext
*
aCx
JSObject
*
aObj
)
\
{
\
return
DOMPreferences
:
:
name
(
)
;
\
}
DOM_PREF_WEBIDL
(
ImageBitmapExtensionsEnabled
)
DOM_PREF_WEBIDL
(
DOMCachesEnabled
)
DOM_PREF_WEBIDL
(
NotificationEnabledInServiceWorkers
)
DOM_PREF_WEBIDL
(
NotificationRIEnabled
)
DOM_PREF_WEBIDL
(
ServiceWorkersEnabled
)
DOM_PREF_WEBIDL
(
OpenWindowEnabled
)
DOM_PREF_WEBIDL
(
StorageManagerEnabled
)
DOM_PREF_WEBIDL
(
PromiseRejectionEventsEnabled
)
DOM_PREF_WEBIDL
(
PushEnabled
)
DOM_PREF_WEBIDL
(
StreamsEnabled
)
DOM_PREF_WEBIDL
(
RequestContextEnabled
)
DOM_PREF_WEBIDL
(
OffscreenCanvasEnabled
)
DOM_PREF_WEBIDL
(
WebkitBlinkDirectoryPickerEnabled
)
DOM_PREF_WEBIDL
(
NetworkInformationEnabled
)
DOM_PREF_WEBIDL
(
FetchObserverEnabled
)
#
undef
DOM_PREF_WEBIDL
}
}
