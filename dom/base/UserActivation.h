#
ifndef
mozilla_dom_UserActivation_h
#
define
mozilla_dom_UserActivation_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
IPC
{
template
<
class
P
>
struct
ParamTraits
;
}
namespace
mozilla
:
:
dom
{
class
UserActivation
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS_FINAL
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
UserActivation
)
explicit
UserActivation
(
nsPIDOMWindowInner
*
aWindow
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
bool
HasBeenActive
(
)
const
;
bool
IsActive
(
)
const
;
enum
class
State
:
uint8_t
{
None
HasBeenActivated
FullActivated
EndGuard_
}
;
class
StateAndModifiers
;
class
Modifiers
{
public
:
static
constexpr
uint8_t
Shift
=
0x10
;
static
constexpr
uint8_t
Meta
=
0x20
;
static
constexpr
uint8_t
Control
=
0x40
;
static
constexpr
uint8_t
Alt
=
0x80
;
static
constexpr
uint8_t
MiddleMouse
=
0x08
;
static
constexpr
uint8_t
Mask
=
0xF8
;
static_assert
(
(
uint8_t
(
State
:
:
EndGuard_
)
&
~
Mask
)
=
=
uint8_t
(
State
:
:
EndGuard_
)
)
;
constexpr
Modifiers
(
)
=
default
;
explicit
constexpr
Modifiers
(
uint8_t
aModifiers
)
:
mModifiers
(
aModifiers
)
{
}
static
constexpr
Modifiers
None
(
)
{
return
Modifiers
(
0
)
;
}
void
SetShift
(
)
{
mModifiers
|
=
Shift
;
}
void
SetMeta
(
)
{
mModifiers
|
=
Meta
;
}
void
SetControl
(
)
{
mModifiers
|
=
Control
;
}
void
SetAlt
(
)
{
mModifiers
|
=
Alt
;
}
void
SetMiddleMouse
(
)
{
mModifiers
|
=
MiddleMouse
;
}
bool
IsShift
(
)
const
{
return
mModifiers
&
Shift
;
}
bool
IsMeta
(
)
const
{
return
mModifiers
&
Meta
;
}
bool
IsControl
(
)
const
{
return
mModifiers
&
Control
;
}
bool
IsAlt
(
)
const
{
return
mModifiers
&
Alt
;
}
bool
IsMiddleMouse
(
)
const
{
return
mModifiers
&
MiddleMouse
;
}
private
:
uint8_t
mModifiers
=
0
;
friend
class
StateAndModifiers
;
template
<
class
P
>
friend
struct
IPC
:
:
ParamTraits
;
}
;
class
StateAndModifiers
{
public
:
using
DataT
=
uint8_t
;
constexpr
StateAndModifiers
(
)
=
default
;
explicit
constexpr
StateAndModifiers
(
DataT
aStateAndModifiers
)
:
mStateAndModifiers
(
aStateAndModifiers
)
{
}
DataT
GetRawData
(
)
const
{
return
mStateAndModifiers
;
}
State
GetState
(
)
const
{
return
State
(
RawState
(
)
)
;
}
void
SetState
(
State
aState
)
{
MOZ_ASSERT
(
(
uint8_t
(
aState
)
&
Modifiers
:
:
Mask
)
=
=
0
)
;
mStateAndModifiers
=
uint8_t
(
aState
)
|
RawModifiers
(
)
;
}
Modifiers
GetModifiers
(
)
const
{
return
Modifiers
(
RawModifiers
(
)
)
;
}
void
SetModifiers
(
Modifiers
aModifiers
)
{
mStateAndModifiers
=
RawState
(
)
|
aModifiers
.
mModifiers
;
}
private
:
uint8_t
RawState
(
)
const
{
return
mStateAndModifiers
&
~
Modifiers
:
:
Mask
;
}
uint8_t
RawModifiers
(
)
const
{
return
mStateAndModifiers
&
Modifiers
:
:
Mask
;
}
uint8_t
mStateAndModifiers
=
0
;
}
;
static
bool
IsHandlingUserInput
(
)
;
static
bool
IsHandlingKeyboardInput
(
)
;
static
bool
IsUserInteractionEvent
(
const
WidgetEvent
*
aEvent
)
;
static
void
StartHandlingUserInput
(
EventMessage
aMessage
)
;
static
void
StopHandlingUserInput
(
EventMessage
aMessage
)
;
static
TimeStamp
GetHandlingInputStart
(
)
;
static
TimeStamp
LatestUserInputStart
(
)
;
private
:
~
UserActivation
(
)
=
default
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
}
;
class
MOZ_RAII
AutoHandlingUserInputStatePusher
final
{
public
:
explicit
AutoHandlingUserInputStatePusher
(
bool
aIsHandlingUserInput
WidgetEvent
*
aEvent
=
nullptr
)
;
~
AutoHandlingUserInputStatePusher
(
)
;
protected
:
EventMessage
mMessage
;
bool
mIsHandlingUserInput
;
}
;
}
#
endif
