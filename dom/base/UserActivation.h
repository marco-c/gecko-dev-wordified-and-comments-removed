#
ifndef
mozilla_dom_UserActivation_h
#
define
mozilla_dom_UserActivation_h
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
:
:
dom
{
class
UserActivation
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
UserActivation
)
explicit
UserActivation
(
nsPIDOMWindowInner
*
aWindow
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mWindow
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
bool
HasBeenActive
(
)
const
;
bool
IsActive
(
)
const
;
enum
class
State
:
uint8_t
{
None
HasBeenActivated
FullActivated
EndGuard_
}
;
static
bool
IsHandlingUserInput
(
)
;
static
bool
IsHandlingKeyboardInput
(
)
;
static
bool
IsUserInteractionEvent
(
const
WidgetEvent
*
aEvent
)
;
static
void
StartHandlingUserInput
(
EventMessage
aMessage
)
;
static
void
StopHandlingUserInput
(
EventMessage
aMessage
)
;
static
TimeStamp
GetHandlingInputStart
(
)
;
static
TimeStamp
LatestUserInputStart
(
)
;
private
:
~
UserActivation
(
)
=
default
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
}
;
class
MOZ_RAII
AutoHandlingUserInputStatePusher
final
{
public
:
explicit
AutoHandlingUserInputStatePusher
(
bool
aIsHandlingUserInput
WidgetEvent
*
aEvent
=
nullptr
)
;
~
AutoHandlingUserInputStatePusher
(
)
;
protected
:
EventMessage
mMessage
;
bool
mIsHandlingUserInput
;
}
;
}
#
endif
