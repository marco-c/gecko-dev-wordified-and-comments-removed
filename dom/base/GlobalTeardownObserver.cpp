#
include
"
GlobalTeardownObserver
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
namespace
mozilla
{
GlobalTeardownObserver
:
:
GlobalTeardownObserver
(
)
=
default
;
GlobalTeardownObserver
:
:
GlobalTeardownObserver
(
nsIGlobalObject
*
aGlobalObject
bool
aHasOrHasHadOwnerWindow
)
:
mHasOrHasHadOwnerWindow
(
aHasOrHasHadOwnerWindow
)
{
BindToOwner
(
aGlobalObject
)
;
}
GlobalTeardownObserver
:
:
~
GlobalTeardownObserver
(
)
{
if
(
mParentObject
)
{
mParentObject
-
>
RemoveGlobalTeardownObserver
(
this
)
;
}
}
void
GlobalTeardownObserver
:
:
BindToOwner
(
nsIGlobalObject
*
aOwner
)
{
MOZ_ASSERT
(
!
mParentObject
)
;
if
(
aOwner
)
{
mParentObject
=
aOwner
;
aOwner
-
>
AddGlobalTeardownObserver
(
this
)
;
mOwnerWindow
=
nsCOMPtr
<
nsPIDOMWindowInner
>
(
do_QueryInterface
(
aOwner
)
)
.
get
(
)
;
if
(
mOwnerWindow
)
{
mHasOrHasHadOwnerWindow
=
true
;
}
}
}
void
GlobalTeardownObserver
:
:
DisconnectFromOwner
(
)
{
if
(
mParentObject
)
{
mParentObject
-
>
RemoveGlobalTeardownObserver
(
this
)
;
}
mOwnerWindow
=
nullptr
;
mParentObject
=
nullptr
;
}
nsresult
GlobalTeardownObserver
:
:
CheckCurrentGlobalCorrectness
(
)
const
{
NS_ENSURE_STATE
(
!
mHasOrHasHadOwnerWindow
|
|
mOwnerWindow
)
;
if
(
mOwnerWindow
&
&
!
mOwnerWindow
-
>
IsCurrentInnerWindow
(
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_IsMainThread
(
)
)
{
return
NS_OK
;
}
if
(
!
mParentObject
)
{
return
NS_ERROR_FAILURE
;
}
if
(
mParentObject
-
>
IsDying
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
}
;
