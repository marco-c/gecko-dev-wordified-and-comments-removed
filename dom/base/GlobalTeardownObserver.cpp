#
include
"
GlobalTeardownObserver
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
namespace
mozilla
{
GlobalTeardownObserver
:
:
GlobalTeardownObserver
(
)
=
default
;
GlobalTeardownObserver
:
:
GlobalTeardownObserver
(
nsIGlobalObject
*
aGlobalObject
bool
aHasOrHasHadOwnerWindow
)
:
mHasOrHasHadOwnerWindow
(
aHasOrHasHadOwnerWindow
)
{
BindToOwner
(
aGlobalObject
)
;
}
GlobalTeardownObserver
:
:
~
GlobalTeardownObserver
(
)
{
if
(
mParentObject
)
{
mParentObject
-
>
RemoveGlobalTeardownObserver
(
this
)
;
}
}
nsGlobalWindowInner
*
GlobalTeardownObserver
:
:
GetOwnerWindow
(
)
const
{
return
mHasOrHasHadOwnerWindow
?
static_cast
<
nsGlobalWindowInner
*
>
(
mParentObject
)
:
nullptr
;
}
void
GlobalTeardownObserver
:
:
BindToOwner
(
nsIGlobalObject
*
aOwner
)
{
MOZ_ASSERT
(
!
mParentObject
)
;
if
(
aOwner
)
{
mParentObject
=
aOwner
;
aOwner
-
>
AddGlobalTeardownObserver
(
this
)
;
const
bool
isWindow
=
!
!
aOwner
-
>
GetAsInnerWindow
(
)
;
MOZ_ASSERT_IF
(
!
isWindow
!
mHasOrHasHadOwnerWindow
)
;
mHasOrHasHadOwnerWindow
=
isWindow
;
}
}
void
GlobalTeardownObserver
:
:
DisconnectFromOwner
(
)
{
if
(
mParentObject
)
{
mParentObject
-
>
RemoveGlobalTeardownObserver
(
this
)
;
mParentObject
=
nullptr
;
}
}
nsresult
GlobalTeardownObserver
:
:
CheckCurrentGlobalCorrectness
(
)
const
{
if
(
!
mParentObject
)
{
if
(
NS_IsMainThread
(
)
&
&
!
HasOrHasHadOwnerWindow
(
)
)
{
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
if
(
mHasOrHasHadOwnerWindow
)
{
auto
*
ownerWin
=
static_cast
<
nsGlobalWindowInner
*
>
(
mParentObject
)
;
if
(
!
ownerWin
-
>
IsCurrentInnerWindow
(
)
)
{
return
NS_ERROR_FAILURE
;
}
}
if
(
NS_IsMainThread
(
)
)
{
return
NS_OK
;
}
if
(
mParentObject
-
>
IsDying
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
}
;
