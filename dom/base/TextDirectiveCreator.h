#
ifndef
DOM_TEXTDIRECTIVECREATOR_H_
#
define
DOM_TEXTDIRECTIVECREATOR_H_
#
include
<
tuple
>
#
include
"
RangeBoundary
.
h
"
#
include
"
mozilla
/
dom
/
fragmentdirectives_ffi_generated
.
h
"
#
include
"
TextDirectiveUtil
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
class
nsRange
;
namespace
mozilla
{
class
ErrorResult
;
}
namespace
mozilla
:
:
dom
{
class
Document
;
class
TextDirectiveCreator
{
public
:
static
Result
<
nsCString
ErrorResult
>
CreateTextDirectiveFromRange
(
Document
&
aDocument
AbstractRange
*
aInputRange
)
;
virtual
~
TextDirectiveCreator
(
)
=
default
;
protected
:
TextDirectiveCreator
(
Document
&
aDocument
AbstractRange
*
aRange
)
;
static
Result
<
RefPtr
<
AbstractRange
>
ErrorResult
>
ExtendRangeToBlockBoundaries
(
AbstractRange
*
aRange
)
;
static
Result
<
bool
ErrorResult
>
MustUseRangeBasedMatching
(
AbstractRange
*
aRange
)
;
static
Result
<
UniquePtr
<
TextDirectiveCreator
>
ErrorResult
>
CreateInstance
(
Document
&
aDocument
AbstractRange
*
aRange
)
;
virtual
Result
<
Ok
ErrorResult
>
CollectContextTerms
(
)
=
0
;
Result
<
Ok
ErrorResult
>
CollectPrefixContextTerm
(
)
;
Result
<
Ok
ErrorResult
>
CollectSuffixContextTerm
(
)
;
nsString
mPrefixContent
;
nsString
mPrefixFoldCaseContent
;
nsString
mStartContent
;
nsString
mStartFoldCaseContent
;
nsString
mSuffixContent
;
nsString
mSuffixFoldCaseContent
;
Document
&
mDocument
;
RefPtr
<
AbstractRange
>
mRange
;
TimeoutWatchdog
mWatchdog
;
}
;
class
RangeBasedTextDirectiveCreator
:
public
TextDirectiveCreator
{
private
:
using
TextDirectiveCreator
:
:
TextDirectiveCreator
;
Result
<
Ok
ErrorResult
>
CollectContextTerms
(
)
override
;
nsString
mEndContent
;
nsString
mEndFoldCaseContent
;
}
;
class
ExactMatchTextDirectiveCreator
:
public
TextDirectiveCreator
{
private
:
using
TextDirectiveCreator
:
:
TextDirectiveCreator
;
Result
<
Ok
ErrorResult
>
CollectContextTerms
(
)
override
;
}
;
}
#
endif
