#
ifndef
mozilla_dom_FilteredNodeIterator_h
#
define
mozilla_dom_FilteredNodeIterator_h
#
include
"
nsINode
.
h
"
namespace
mozilla
{
namespace
dom
{
template
<
typename
T
typename
Iter
>
class
FilteredNodeIterator
:
public
Iter
{
public
:
explicit
FilteredNodeIterator
(
const
nsINode
&
aNode
)
:
Iter
(
aNode
)
{
EnsureValid
(
)
;
}
FilteredNodeIterator
&
begin
(
)
{
return
*
this
;
}
using
Iter
:
:
end
;
void
operator
+
+
(
)
{
Iter
:
:
operator
+
+
(
)
;
EnsureValid
(
)
;
}
using
Iter
:
:
operator
!
=
;
T
*
operator
*
(
)
{
nsINode
*
node
=
Iter
:
:
operator
*
(
)
;
MOZ_ASSERT
(
!
node
|
|
T
:
:
FromNode
(
node
)
)
;
return
static_cast
<
T
*
>
(
node
)
;
}
private
:
void
EnsureValid
(
)
{
while
(
true
)
{
nsINode
*
node
=
Iter
:
:
operator
*
(
)
;
if
(
!
node
|
|
T
:
:
FromNode
(
node
)
)
{
return
;
}
Iter
:
:
operator
+
+
(
)
;
}
}
FilteredNodeIterator
(
)
:
Iter
(
)
{
}
}
;
}
}
#
endif
