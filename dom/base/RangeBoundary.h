#
ifndef
mozilla_RangeBoundary_h
#
define
mozilla_RangeBoundary_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
template
<
typename
T
typename
U
>
class
EditorDOMPointBase
;
template
<
typename
ParentType
typename
RefType
>
class
RangeBoundaryBase
;
typedef
RangeBoundaryBase
<
nsCOMPtr
<
nsINode
>
nsCOMPtr
<
nsIContent
>
>
RangeBoundary
;
typedef
RangeBoundaryBase
<
nsINode
*
nsIContent
*
>
RawRangeBoundary
;
template
<
typename
ParentType
typename
RefType
>
class
RangeBoundaryBase
{
template
<
typename
T
typename
U
>
friend
class
RangeBoundaryBase
;
template
<
typename
T
typename
U
>
friend
class
EditorDOMPointBase
;
friend
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
RangeBoundary
&
const
char
*
uint32_t
)
;
friend
void
ImplCycleCollectionUnlink
(
RangeBoundary
&
)
;
public
:
RangeBoundaryBase
(
nsINode
*
aContainer
nsIContent
*
aRef
)
:
mParent
(
aContainer
)
mRef
(
aRef
)
{
if
(
!
mRef
)
{
mOffset
=
mozilla
:
:
Some
(
0
)
;
}
else
{
NS_WARNING_ASSERTION
(
mRef
-
>
GetParentNode
(
)
=
=
mParent
"
Initializing
RangeBoundary
with
invalid
value
"
)
;
mOffset
.
reset
(
)
;
}
}
RangeBoundaryBase
(
nsINode
*
aContainer
int32_t
aOffset
)
:
mParent
(
aContainer
)
mRef
(
nullptr
)
mOffset
(
mozilla
:
:
Some
(
aOffset
)
)
{
if
(
mParent
&
&
mParent
-
>
IsContainerNode
(
)
)
{
if
(
aOffset
=
=
static_cast
<
int32_t
>
(
aContainer
-
>
GetChildCount
(
)
)
)
{
mRef
=
aContainer
-
>
GetLastChild
(
)
;
}
else
if
(
aOffset
!
=
0
)
{
mRef
=
mParent
-
>
GetChildAt_Deprecated
(
aOffset
-
1
)
;
}
NS_WARNING_ASSERTION
(
mRef
|
|
aOffset
=
=
0
"
Constructing
RangeBoundary
with
invalid
value
"
)
;
}
NS_WARNING_ASSERTION
(
!
mRef
|
|
mRef
-
>
GetParentNode
(
)
=
=
mParent
"
Constructing
RangeBoundary
with
invalid
value
"
)
;
}
RangeBoundaryBase
(
)
:
mParent
(
nullptr
)
mRef
(
nullptr
)
{
}
template
<
typename
PT
typename
RT
>
explicit
RangeBoundaryBase
(
const
RangeBoundaryBase
<
PT
RT
>
&
aOther
)
:
mParent
(
aOther
.
mParent
)
mRef
(
aOther
.
mRef
)
mOffset
(
aOther
.
mOffset
)
{
}
nsIContent
*
Ref
(
)
const
{
return
mRef
;
}
nsINode
*
Container
(
)
const
{
return
mParent
;
}
nsIContent
*
GetChildAtOffset
(
)
const
{
if
(
!
mParent
|
|
!
mParent
-
>
IsContainerNode
(
)
)
{
return
nullptr
;
}
if
(
!
mRef
)
{
MOZ_ASSERT
(
Offset
(
)
=
=
0
"
invalid
RangeBoundary
"
)
;
return
mParent
-
>
GetFirstChild
(
)
;
}
MOZ_ASSERT
(
mParent
-
>
GetChildAt_Deprecated
(
Offset
(
)
)
=
=
mRef
-
>
GetNextSibling
(
)
)
;
return
mRef
-
>
GetNextSibling
(
)
;
}
nsIContent
*
GetNextSiblingOfChildAtOffset
(
)
const
{
if
(
NS_WARN_IF
(
!
mParent
)
|
|
NS_WARN_IF
(
!
mParent
-
>
IsContainerNode
(
)
)
)
{
return
nullptr
;
}
if
(
NS_WARN_IF
(
!
mRef
-
>
GetNextSibling
(
)
)
)
{
return
nullptr
;
}
return
mRef
-
>
GetNextSibling
(
)
-
>
GetNextSibling
(
)
;
}
nsIContent
*
GetPreviousSiblingOfChildAtOffset
(
)
const
{
if
(
NS_WARN_IF
(
!
mParent
)
|
|
NS_WARN_IF
(
!
mParent
-
>
IsContainerNode
(
)
)
)
{
return
nullptr
;
}
if
(
NS_WARN_IF
(
!
mRef
)
)
{
return
nullptr
;
}
return
mRef
;
}
uint32_t
Offset
(
)
const
{
if
(
mOffset
.
isSome
(
)
)
{
return
mOffset
.
value
(
)
;
}
if
(
!
mParent
)
{
return
0
;
}
MOZ_ASSERT
(
mRef
)
;
MOZ_ASSERT
(
mRef
-
>
GetParentNode
(
)
=
=
mParent
)
;
mOffset
=
mozilla
:
:
Some
(
mParent
-
>
IndexOf
(
mRef
)
+
1
)
;
return
mOffset
.
value
(
)
;
}
void
InvalidateOffset
(
)
{
MOZ_ASSERT
(
mParent
)
;
MOZ_ASSERT
(
mParent
-
>
IsContainerNode
(
)
"
Range
is
positioned
on
a
text
node
!
"
)
;
if
(
!
mRef
)
{
MOZ_ASSERT
(
mOffset
.
isSome
(
)
&
&
mOffset
.
value
(
)
=
=
0
"
Invalidating
offset
of
invalid
RangeBoundary
?
"
)
;
return
;
}
mOffset
.
reset
(
)
;
}
void
Set
(
nsINode
*
aContainer
int32_t
aOffset
)
{
mParent
=
aContainer
;
if
(
mParent
&
&
mParent
-
>
IsContainerNode
(
)
)
{
if
(
aOffset
=
=
static_cast
<
int32_t
>
(
aContainer
-
>
GetChildCount
(
)
)
)
{
mRef
=
aContainer
-
>
GetLastChild
(
)
;
}
else
if
(
aOffset
=
=
0
)
{
mRef
=
nullptr
;
}
else
{
mRef
=
mParent
-
>
GetChildAt_Deprecated
(
aOffset
-
1
)
;
MOZ_ASSERT
(
mRef
)
;
}
NS_WARNING_ASSERTION
(
mRef
|
|
aOffset
=
=
0
"
Setting
RangeBoundary
to
invalid
value
"
)
;
}
else
{
mRef
=
nullptr
;
}
mOffset
=
mozilla
:
:
Some
(
aOffset
)
;
NS_WARNING_ASSERTION
(
!
mRef
|
|
mRef
-
>
GetParentNode
(
)
=
=
mParent
"
Setting
RangeBoundary
to
invalid
value
"
)
;
}
void
SetAfterRef
(
nsINode
*
aParent
nsIContent
*
aRef
)
{
mParent
=
aParent
;
mRef
=
aRef
;
if
(
!
mRef
)
{
mOffset
=
mozilla
:
:
Some
(
0
)
;
}
else
{
mOffset
.
reset
(
)
;
}
}
bool
IsSet
(
)
const
{
return
mParent
&
&
(
mRef
|
|
mOffset
.
isSome
(
)
)
;
}
bool
IsSetAndValid
(
)
const
{
if
(
!
IsSet
(
)
)
{
return
false
;
}
if
(
Ref
(
)
)
{
return
Ref
(
)
-
>
GetParentNode
(
)
=
=
Container
(
)
;
}
return
Offset
(
)
<
=
Container
(
)
-
>
Length
(
)
;
}
bool
IsStartOfContainer
(
)
const
{
return
!
Ref
(
)
&
&
mOffset
.
value
(
)
=
=
0
;
}
bool
IsEndOfContainer
(
)
const
{
return
Ref
(
)
?
!
Ref
(
)
-
>
GetNextSibling
(
)
:
mOffset
.
value
(
)
=
=
Container
(
)
-
>
Length
(
)
;
}
RangeBoundaryBase
<
nsINode
*
nsIContent
*
>
AsRaw
(
)
const
{
return
RangeBoundaryBase
<
nsINode
*
nsIContent
*
>
(
*
this
)
;
}
template
<
typename
A
typename
B
>
RangeBoundaryBase
&
operator
=
(
const
RangeBoundaryBase
<
A
B
>
&
aOther
)
{
if
(
mParent
!
=
aOther
.
mParent
)
{
mParent
=
aOther
.
mParent
;
}
if
(
mRef
!
=
aOther
.
mRef
)
{
mRef
=
aOther
.
mRef
;
}
mOffset
=
aOther
.
mOffset
;
return
*
this
;
}
template
<
typename
A
typename
B
>
bool
operator
=
=
(
const
RangeBoundaryBase
<
A
B
>
&
aOther
)
const
{
return
mParent
=
=
aOther
.
mParent
&
&
(
mRef
?
mRef
=
=
aOther
.
mRef
:
mOffset
=
=
aOther
.
mOffset
)
;
}
template
<
typename
A
typename
B
>
bool
operator
!
=
(
const
RangeBoundaryBase
<
A
B
>
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
private
:
ParentType
mParent
;
RefType
mRef
;
mutable
mozilla
:
:
Maybe
<
uint32_t
>
mOffset
;
}
;
inline
void
ImplCycleCollectionUnlink
(
RangeBoundary
&
aField
)
{
ImplCycleCollectionUnlink
(
aField
.
mParent
)
;
ImplCycleCollectionUnlink
(
aField
.
mRef
)
;
}
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
RangeBoundary
&
aField
const
char
*
aName
uint32_t
aFlags
)
{
ImplCycleCollectionTraverse
(
aCallback
aField
.
mParent
"
mParent
"
0
)
;
ImplCycleCollectionTraverse
(
aCallback
aField
.
mRef
"
mRef
"
0
)
;
}
}
#
endif
