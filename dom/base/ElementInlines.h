#
ifndef
mozilla_dom_ElementInlines_h
#
define
mozilla_dom_ElementInlines_h
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIContentInlines
.
h
"
namespace
mozilla
:
:
dom
{
inline
void
Element
:
:
RegisterActivityObserver
(
)
{
OwnerDoc
(
)
-
>
RegisterActivityObserver
(
this
)
;
}
inline
void
Element
:
:
UnregisterActivityObserver
(
)
{
OwnerDoc
(
)
-
>
UnregisterActivityObserver
(
this
)
;
}
inline
bool
Element
:
:
IsContentEditablePlainTextOnly
(
)
const
{
const
auto
*
const
htmlElement
=
nsGenericHTMLElement
:
:
FromNode
(
this
)
;
return
htmlElement
&
&
htmlElement
-
>
GetContentEditableState
(
)
=
=
nsGenericHTMLElement
:
:
ContentEditableState
:
:
PlainTextOnly
;
}
}
inline
mozilla
:
:
dom
:
:
Element
*
nsINode
:
:
GetFlattenedTreeParentElement
(
)
const
{
nsINode
*
parentNode
=
GetFlattenedTreeParentNode
(
)
;
if
MOZ_LIKELY
(
parentNode
&
&
parentNode
-
>
IsElement
(
)
)
{
return
parentNode
-
>
AsElement
(
)
;
}
return
nullptr
;
}
inline
mozilla
:
:
dom
:
:
Element
*
nsINode
:
:
GetFlattenedTreeParentElementForStyle
(
)
const
{
nsINode
*
parentNode
=
GetFlattenedTreeParentNodeForStyle
(
)
;
if
(
MOZ_LIKELY
(
parentNode
&
&
parentNode
-
>
IsElement
(
)
)
)
{
return
parentNode
-
>
AsElement
(
)
;
}
return
nullptr
;
}
inline
mozilla
:
:
dom
:
:
Element
*
nsINode
:
:
GetInclusiveFlattenedTreeAncestorElement
(
)
const
{
nsIContent
*
content
=
const_cast
<
nsIContent
*
>
(
nsIContent
:
:
FromNode
(
this
)
)
;
while
(
content
&
&
!
content
-
>
IsElement
(
)
)
{
content
=
content
-
>
GetFlattenedTreeParent
(
)
;
}
return
mozilla
:
:
dom
:
:
Element
:
:
FromNodeOrNull
(
content
)
;
}
#
endif
