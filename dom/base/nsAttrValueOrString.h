#
ifndef
nsAttrValueOrString_h___
#
define
nsAttrValueOrString_h___
#
include
"
nsString
.
h
"
#
include
"
nsAttrValue
.
h
"
class
MOZ_STACK_CLASS
nsAttrValueOrString
{
public
:
explicit
nsAttrValueOrString
(
const
nsAString
&
aValue
)
:
mAttrValue
(
nullptr
)
mStringPtr
(
&
aValue
)
mCheapString
(
nullptr
)
{
}
explicit
nsAttrValueOrString
(
const
nsAString
*
aValue
)
:
mAttrValue
(
nullptr
)
mStringPtr
(
aValue
)
mCheapString
(
nullptr
)
{
}
explicit
nsAttrValueOrString
(
const
nsAttrValue
&
aValue
)
:
mAttrValue
(
&
aValue
)
mStringPtr
(
nullptr
)
mCheapString
(
nullptr
)
{
}
explicit
nsAttrValueOrString
(
const
nsAttrValue
*
aValue
)
:
mAttrValue
(
aValue
)
mStringPtr
(
nullptr
)
mCheapString
(
nullptr
)
{
}
void
ResetToAttrValue
(
const
nsAttrValue
&
aValue
)
{
mAttrValue
=
&
aValue
;
mStringPtr
=
nullptr
;
}
const
nsAString
&
String
(
)
const
;
bool
EqualsAsStrings
(
const
nsAttrValue
&
aOther
)
const
{
if
(
mStringPtr
)
{
return
aOther
.
Equals
(
*
mStringPtr
eCaseMatters
)
;
}
return
aOther
.
EqualsAsStrings
(
*
mAttrValue
)
;
}
bool
IsEmpty
(
)
const
{
if
(
mStringPtr
)
{
return
mStringPtr
-
>
IsEmpty
(
)
;
}
if
(
mAttrValue
)
{
return
mAttrValue
-
>
IsEmptyString
(
)
;
}
return
true
;
}
protected
:
const
nsAttrValue
*
mAttrValue
;
mutable
const
nsAString
*
mStringPtr
;
mutable
nsCheapString
mCheapString
;
}
;
#
endif
