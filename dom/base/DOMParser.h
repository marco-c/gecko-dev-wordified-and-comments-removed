#
ifndef
mozilla_dom_DOMParser_h_
#
define
mozilla_dom_DOMParser_h_
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
dom
/
DOMParserBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DOMParser
final
:
public
nsISupports
public
nsWrapperCache
{
typedef
mozilla
:
:
dom
:
:
GlobalObject
GlobalObject
;
virtual
~
DOMParser
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
DOMParser
)
static
already_AddRefed
<
DOMParser
>
Constructor
(
const
GlobalObject
&
aOwner
mozilla
:
:
ErrorResult
&
rv
)
;
already_AddRefed
<
Document
>
ParseFromString
(
const
nsAString
&
aStr
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Document
>
ParseFromSafeString
(
const
nsAString
&
aStr
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Document
>
ParseFromBuffer
(
Span
<
const
uint8_t
>
aBuf
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Document
>
ParseFromBuffer
(
const
Uint8Array
&
aBuf
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
Document
>
ParseFromStream
(
nsIInputStream
*
aStream
const
nsAString
&
aCharset
int32_t
aContentLength
SupportedType
aType
ErrorResult
&
aRv
)
;
void
ForceEnableXULXBL
(
)
{
mForceEnableXULXBL
=
true
;
ForceEnableDTD
(
)
;
}
void
ForceEnableDTD
(
)
{
mForceEnableDTD
=
true
;
}
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
mozilla
:
:
dom
:
:
DOMParser_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
already_AddRefed
<
DOMParser
>
CreateWithoutGlobal
(
ErrorResult
&
aRv
)
;
private
:
DOMParser
(
nsIGlobalObject
*
aOwner
nsIPrincipal
*
aDocPrincipal
nsIURI
*
aDocumentURI
)
;
already_AddRefed
<
Document
>
SetUpDocument
(
DocumentFlavor
aFlavor
ErrorResult
&
aRv
)
;
nsCOMPtr
<
nsIGlobalObject
>
mOwner
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
bool
mForceEnableXULXBL
;
bool
mForceEnableDTD
;
}
;
}
}
#
endif
