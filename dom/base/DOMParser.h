#
ifndef
mozilla_dom_DOMParser_h_
#
define
mozilla_dom_DOMParser_h_
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMParser
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
dom
/
DOMParserBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
DOMParser
final
:
public
nsIDOMParser
public
nsSupportsWeakReference
public
nsWrapperCache
{
typedef
mozilla
:
:
dom
:
:
GlobalObject
GlobalObject
;
virtual
~
DOMParser
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
DOMParser
nsIDOMParser
)
NS_DECL_NSIDOMPARSER
static
already_AddRefed
<
DOMParser
>
Constructor
(
const
GlobalObject
&
aOwner
mozilla
:
:
ErrorResult
&
rv
)
;
already_AddRefed
<
nsIDocument
>
ParseFromString
(
const
nsAString
&
aStr
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsIDocument
>
ParseFromBuffer
(
Span
<
const
uint8_t
>
aBuf
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsIDocument
>
ParseFromBuffer
(
const
Uint8Array
&
aBuf
SupportedType
aType
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsIDocument
>
ParseFromStream
(
nsIInputStream
*
aStream
const
nsAString
&
aCharset
int32_t
aContentLength
SupportedType
aType
ErrorResult
&
aRv
)
;
void
ForceEnableXULXBL
(
)
{
mForceEnableXULXBL
=
true
;
}
nsISupports
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
mozilla
:
:
dom
:
:
DOMParserBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
private
:
explicit
DOMParser
(
nsISupports
*
aOwner
)
:
mOwner
(
aOwner
)
mAttemptedInit
(
false
)
mForceEnableXULXBL
(
false
)
{
MOZ_ASSERT
(
aOwner
)
;
}
nsresult
Init
(
nsIPrincipal
*
aPrincipal
nsIURI
*
aDocumentURI
nsIURI
*
aBaseURI
nsIGlobalObject
*
aSriptObjet
)
;
already_AddRefed
<
nsIDocument
>
SetUpDocument
(
DocumentFlavor
aFlavor
ErrorResult
&
aRv
)
;
class
AttemptedInitMarker
{
public
:
explicit
AttemptedInitMarker
(
bool
*
aAttemptedInit
)
:
mAttemptedInit
(
aAttemptedInit
)
{
}
~
AttemptedInitMarker
(
)
{
*
mAttemptedInit
=
true
;
}
private
:
bool
*
mAttemptedInit
;
}
;
nsCOMPtr
<
nsISupports
>
mOwner
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
nsWeakPtr
mScriptHandlingObject
;
bool
mAttemptedInit
;
bool
mForceEnableXULXBL
;
}
;
}
}
#
endif
