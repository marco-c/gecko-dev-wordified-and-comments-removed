#
ifndef
DirectionalityUtils_h___
#
define
DirectionalityUtils_h___
#
include
"
nscore
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsIContent
;
class
nsINode
;
class
nsAttrValue
;
class
nsTextNode
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
class
HTMLSlotElement
;
}
}
namespace
mozilla
{
enum
Directionality
:
uint8_t
{
eDir_NotSet
eDir_RTL
eDir_LTR
eDir_Auto
}
;
Directionality
GetDirectionFromText
(
const
char16_t
*
aText
const
uint32_t
aLength
uint32_t
*
aFirstStrong
=
nullptr
)
;
Directionality
RecomputeDirectionality
(
mozilla
:
:
dom
:
:
Element
*
aElement
bool
aNotify
=
true
)
;
void
SetDirectionalityOnDescendants
(
mozilla
:
:
dom
:
:
Element
*
aElement
Directionality
aDir
bool
aNotify
=
true
)
;
void
WalkDescendantsResetAutoDirection
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
void
SlotStateChanged
(
dom
:
:
HTMLSlotElement
*
aSlot
bool
aAllAssignedNodesChanged
=
true
)
;
void
SlotAssignedNodeChanged
(
dom
:
:
HTMLSlotElement
*
aSlot
nsIContent
&
aAssignedNode
)
;
void
WalkDescendantsSetDirAuto
(
mozilla
:
:
dom
:
:
Element
*
aElement
bool
aNotify
=
true
)
;
void
WalkDescendantsClearAncestorDirAuto
(
nsIContent
*
aContent
)
;
bool
TextNodeWillChangeDirection
(
nsTextNode
*
aTextNode
Directionality
*
aOldDir
uint32_t
aOffset
)
;
void
TextNodeChangedDirection
(
nsTextNode
*
aTextNode
Directionality
aOldDir
bool
aNotify
)
;
void
SetDirectionFromNewTextNode
(
nsTextNode
*
aTextNode
)
;
void
ResetDirectionSetByTextNode
(
nsTextNode
*
aTextNode
)
;
void
SetDirectionalityFromValue
(
mozilla
:
:
dom
:
:
Element
*
aElement
const
nsAString
&
aValue
bool
aNotify
)
;
void
OnSetDirAttr
(
mozilla
:
:
dom
:
:
Element
*
aElement
const
nsAttrValue
*
aNewValue
bool
hadValidDir
bool
hadDirAuto
bool
aNotify
)
;
void
SetDirOnBind
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsIContent
*
aParent
)
;
void
ResetDir
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
}
#
endif
