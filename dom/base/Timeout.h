#
ifndef
mozilla_dom_timeout_h
#
define
mozilla_dom_timeout_h
#
include
"
mozilla
/
dom
/
PopupBlocker
.
h
"
#
include
"
mozilla
/
dom
/
TimeoutHandler
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
GeckoProfiler
.
h
"
class
nsIEventTarget
;
class
nsIPrincipal
;
class
nsIEventTarget
;
class
nsGlobalWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
Timeout
final
:
public
LinkedListElement
<
RefPtr
<
Timeout
>
>
{
public
:
Timeout
(
)
;
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
Timeout
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
Timeout
)
enum
class
Reason
:
uint8_t
{
eTimeoutOrInterval
eIdleCallbackTimeout
}
;
void
SetWhenOrTimeRemaining
(
const
TimeStamp
&
aBaseTime
const
TimeDuration
&
aDelay
)
;
const
TimeStamp
&
When
(
)
const
;
const
TimeStamp
&
SubmitTime
(
)
const
;
const
TimeDuration
&
TimeRemaining
(
)
const
;
#
ifdef
MOZ_GECKO_PROFILER
UniqueProfilerBacktrace
TakeProfilerBacktrace
(
)
{
return
std
:
:
move
(
mCause
)
;
}
#
endif
private
:
TimeStamp
mWhen
;
TimeDuration
mTimeRemaining
;
TimeStamp
mSubmitTime
;
~
Timeout
(
)
=
default
;
public
:
RefPtr
<
nsGlobalWindowInner
>
mWindow
;
RefPtr
<
TimeoutHandler
>
mScriptHandler
;
TimeDuration
mInterval
;
#
ifdef
MOZ_GECKO_PROFILER
UniqueProfilerBacktrace
mCause
;
#
endif
uint32_t
mTimeoutId
;
uint32_t
mFiringId
;
#
ifdef
DEBUG
int64_t
mFiringIndex
;
#
endif
PopupBlocker
:
:
PopupControlState
mPopupState
;
Reason
mReason
;
uint8_t
mNestingLevel
;
bool
mCleared
;
bool
mRunning
;
bool
mIsInterval
;
}
;
}
}
#
endif
