#
ifndef
mozilla_dom_timeout_h
#
define
mozilla_dom_timeout_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsITimeoutHandler
.
h
"
class
nsIEventTarget
;
class
nsIPrincipal
;
class
nsIEventTarget
;
namespace
mozilla
{
namespace
dom
{
class
Timeout
final
:
public
LinkedListElement
<
RefPtr
<
Timeout
>
>
{
public
:
Timeout
(
)
;
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
Timeout
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
Timeout
)
enum
class
Reason
{
eTimeoutOrInterval
eIdleCallbackTimeout
}
;
void
SetWhenOrTimeRemaining
(
const
TimeStamp
&
aBaseTime
const
TimeDuration
&
aDelay
)
;
const
TimeStamp
&
When
(
)
const
;
const
TimeDuration
&
TimeRemaining
(
)
const
;
const
TimeDuration
&
ScheduledDelay
(
)
const
;
RefPtr
<
nsGlobalWindow
>
mWindow
;
bool
mCleared
;
bool
mRunning
;
bool
mIsInterval
;
bool
mIsTracking
;
Reason
mReason
;
uint32_t
mTimeoutId
;
uint32_t
mInterval
;
uint32_t
mFiringId
;
uint32_t
mNestingLevel
;
PopupControlState
mPopupState
;
nsCOMPtr
<
nsITimeoutHandler
>
mScriptHandler
;
private
:
TimeStamp
mWhen
;
TimeDuration
mTimeRemaining
;
TimeDuration
mScheduledDelay
;
~
Timeout
(
)
=
default
;
}
;
}
}
#
endif
