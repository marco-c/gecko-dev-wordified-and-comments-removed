#
ifndef
nsTreeSanitizer_h_
#
define
nsTreeSanitizer_h_
#
include
"
nsAtom
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
NameSpaceConstants
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
class
nsIContent
;
class
nsIGlobalObject
;
class
nsINode
;
namespace
mozilla
{
class
DeclarationBlock
;
class
ErrorResult
;
enum
class
StyleSanitizationKind
:
uint8_t
;
}
namespace
mozilla
:
:
dom
{
class
DocumentFragment
;
class
Element
;
class
OwningStringOrSanitizerAttributeNamespace
;
class
OwningStringOrSanitizerElementNamespace
;
class
OwningStringOrSanitizerElementNamespaceWithAttributes
;
}
class
nsTreeSanitizer
{
public
:
explicit
nsTreeSanitizer
(
uint32_t
aFlags
=
0
)
;
static
void
InitializeStatics
(
)
;
static
void
ReleaseStatics
(
)
;
void
Sanitize
(
mozilla
:
:
dom
:
:
DocumentFragment
*
aFragment
)
;
void
Sanitize
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
void
WithWebSanitizerOptions
(
nsIGlobalObject
*
aGlobal
const
mozilla
:
:
dom
:
:
SanitizerConfig
&
aOptions
mozilla
:
:
ErrorResult
&
aRv
)
;
static
void
RemoveConditionalCSSFromSubtree
(
nsINode
*
aRoot
)
;
private
:
bool
mAllowStyles
;
bool
mAllowComments
;
bool
mDropNonCSSPresentation
;
bool
mDropForms
;
bool
mCidEmbedsOnly
;
bool
mDropMedia
;
bool
mFullDocument
;
bool
mLogRemovals
;
uint64_t
mInnerWindowID
=
0
;
class
AtomsTable
:
public
nsTHashSet
<
const
nsStaticAtom
*
>
{
public
:
explicit
AtomsTable
(
uint32_t
aLength
)
:
nsTHashSet
<
const
nsStaticAtom
*
>
(
aLength
)
{
}
bool
Contains
(
nsAtom
*
aAtom
)
{
return
aAtom
-
>
IsStatic
(
)
&
&
GetEntry
(
aAtom
-
>
AsStatic
(
)
)
;
}
}
;
class
NamespaceAtom
:
public
PLDHashEntryHdr
{
public
:
using
KeyType
=
const
NamespaceAtom
&
;
using
KeyTypePointer
=
const
NamespaceAtom
*
;
explicit
NamespaceAtom
(
KeyTypePointer
aKey
)
:
mNamespaceID
(
aKey
-
>
mNamespaceID
)
mLocalName
(
aKey
-
>
mLocalName
)
{
}
NamespaceAtom
(
int32_t
aNamespaceID
RefPtr
<
nsAtom
>
aLocalName
)
:
mNamespaceID
(
aNamespaceID
)
mLocalName
(
std
:
:
move
(
aLocalName
)
)
{
}
NamespaceAtom
(
NamespaceAtom
&
&
)
=
default
;
~
NamespaceAtom
(
)
=
default
;
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
mNamespaceID
=
=
aKey
-
>
mNamespaceID
&
&
mLocalName
=
=
aKey
-
>
mLocalName
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
if
(
!
aKey
)
{
return
0
;
}
return
mozilla
:
:
HashGeneric
(
aKey
-
>
mNamespaceID
aKey
-
>
mLocalName
.
get
(
)
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
int32_t
mNamespaceID
=
kNameSpaceID_None
;
RefPtr
<
nsAtom
>
mLocalName
;
}
;
using
ElementName
=
NamespaceAtom
;
using
AttributeName
=
NamespaceAtom
;
using
ElementNameSet
=
nsTHashSet
<
ElementName
>
;
using
AttributeNameSet
=
nsTHashSet
<
AttributeName
>
;
class
ElementWithAttributes
{
public
:
mozilla
:
:
UniquePtr
<
AttributeNameSet
>
mAttributes
;
mozilla
:
:
UniquePtr
<
AttributeNameSet
>
mRemoveAttributes
;
}
;
using
ElementsToAttributesMap
=
nsTHashMap
<
ElementName
ElementWithAttributes
>
;
void
SanitizeChildren
(
nsINode
*
aRoot
)
;
bool
MustFlatten
(
int32_t
aNamespace
nsAtom
*
aLocal
)
;
bool
MustFlattenForSanitizerAPI
(
int32_t
aNamespace
nsAtom
*
aLocal
)
;
bool
MustPrune
(
int32_t
aNamespace
nsAtom
*
aLocal
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
bool
MustPruneForSanitizerAPI
(
int32_t
aNamespace
nsAtom
*
aLocal
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
bool
IsURL
(
const
nsStaticAtom
*
const
*
aURLs
nsAtom
*
aLocalName
)
;
struct
AllowedAttributes
{
AtomsTable
*
mNames
=
nullptr
;
const
nsStaticAtom
*
const
*
mURLs
=
nullptr
;
bool
mXLink
=
false
;
bool
mStyle
=
false
;
bool
mDangerousSrc
=
false
;
}
;
void
SanitizeAttributes
(
mozilla
:
:
dom
:
:
Element
*
aElement
AllowedAttributes
aAllowed
)
;
bool
MustDropAttribute
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aAttrNamespace
nsAtom
*
aAttrLocalName
)
;
bool
MustDropFunkyAttribute
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aAttrNamespace
nsAtom
*
aAttrLocalName
)
;
bool
SanitizeURL
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNamespace
nsAtom
*
aLocalName
bool
aFragmentsOnly
=
false
)
;
bool
SanitizeStyleDeclaration
(
mozilla
:
:
DeclarationBlock
*
aDeclaration
)
;
static
bool
SanitizeInlineStyle
(
mozilla
:
:
dom
:
:
Element
*
mozilla
:
:
StyleSanitizationKind
)
;
static
void
RemoveAllAttributes
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
static
void
RemoveAllAttributesFromDescendants
(
mozilla
:
:
dom
:
:
Element
*
)
;
static
bool
MatchesElementName
(
ElementNameSet
&
aNames
int32_t
aNamespace
nsAtom
*
aLocalName
)
;
static
bool
MatchesAttributeName
(
AttributeNameSet
&
aNames
int32_t
aNamespace
nsAtom
*
aLocalName
)
;
static
mozilla
:
:
UniquePtr
<
ElementNameSet
>
ConvertElements
(
const
nsTArray
<
mozilla
:
:
dom
:
:
OwningStringOrSanitizerElementNamespace
>
&
aElements
mozilla
:
:
ErrorResult
&
aRv
)
;
static
mozilla
:
:
UniquePtr
<
ElementsToAttributesMap
>
ConvertElementsWithAttributes
(
const
nsTArray
<
mozilla
:
:
dom
:
:
OwningStringOrSanitizerElementNamespaceWithAttributes
>
&
aElements
mozilla
:
:
ErrorResult
&
aRv
)
;
static
mozilla
:
:
UniquePtr
<
AttributeNameSet
>
ConvertAttributes
(
const
nsTArray
<
mozilla
:
:
dom
:
:
OwningStringOrSanitizerAttributeNamespace
>
&
aAttributes
mozilla
:
:
ErrorResult
&
aRv
)
;
void
LogMessage
(
const
char
*
aMessage
mozilla
:
:
dom
:
:
Document
*
aDoc
mozilla
:
:
dom
:
:
Element
*
aElement
=
nullptr
nsAtom
*
aAttr
=
nullptr
)
;
static
AtomsTable
*
sElementsHTML
;
static
AtomsTable
*
sAttributesHTML
;
static
AtomsTable
*
sPresAttributesHTML
;
static
AtomsTable
*
sElementsSVG
;
static
AtomsTable
*
sAttributesSVG
;
static
AtomsTable
*
sElementsMathML
;
static
AtomsTable
*
sAttributesMathML
;
static
AtomsTable
*
sBaselineAttributeAllowlist
;
static
AtomsTable
*
sBaselineElementAllowlist
;
static
AtomsTable
*
sDefaultConfigurationAttributeAllowlist
;
static
AtomsTable
*
sDefaultConfigurationElementAllowlist
;
static
nsIPrincipal
*
sNullPrincipal
;
bool
mIsForSanitizerAPI
=
false
;
bool
mAllowCustomElements
=
false
;
bool
mAllowUnknownMarkup
=
false
;
mozilla
:
:
UniquePtr
<
ElementsToAttributesMap
>
mElements
;
mozilla
:
:
UniquePtr
<
ElementNameSet
>
mRemoveElements
;
mozilla
:
:
UniquePtr
<
ElementNameSet
>
mReplaceWithChildrenElements
;
mozilla
:
:
UniquePtr
<
AttributeNameSet
>
mAttributes
;
mozilla
:
:
UniquePtr
<
AttributeNameSet
>
mRemoveAttributes
;
}
;
#
endif
