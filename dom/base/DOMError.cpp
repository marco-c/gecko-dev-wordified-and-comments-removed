#
include
"
mozilla
/
dom
/
DOMError
.
h
"
#
include
"
mozilla
/
dom
/
DOMErrorBinding
.
h
"
#
include
"
mozilla
/
dom
/
DOMException
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
DOMError
mWindow
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
DOMError
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
DOMError
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
DOMError
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
DOMError
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
DOMError
:
:
DOMError
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
DOMError
:
:
DOMError
(
nsPIDOMWindowInner
*
aWindow
nsresult
aValue
)
:
mWindow
(
aWindow
)
{
nsCString
name
message
;
NS_GetNameAndMessageForDOMNSResult
(
aValue
name
message
)
;
CopyUTF8toUTF16
(
name
mName
)
;
CopyUTF8toUTF16
(
message
mMessage
)
;
}
DOMError
:
:
DOMError
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
)
:
mWindow
(
aWindow
)
mName
(
aName
)
{
}
DOMError
:
:
DOMError
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
const
nsAString
&
aMessage
)
:
mWindow
(
aWindow
)
mName
(
aName
)
mMessage
(
aMessage
)
{
}
DOMError
:
:
~
DOMError
(
)
{
}
JSObject
*
DOMError
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
DOMErrorBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
DOMError
>
DOMError
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aName
const
nsAString
&
aMessage
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
window
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
doc
)
{
doc
-
>
SetDocumentAndPageUseCounter
(
eUseCounter_custom_DOMErrorConstructor
)
;
}
}
RefPtr
<
DOMError
>
ret
=
new
DOMError
(
window
aName
aMessage
)
;
return
ret
.
forget
(
)
;
}
}
}
