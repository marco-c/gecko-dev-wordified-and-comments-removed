#
ifndef
nsNodeInfoManager_h___
#
define
nsNodeInfoManager_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
mozilla
/
dom
/
DOMArena
.
h
"
#
include
"
mozilla
/
MruCache
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsAtom
;
class
nsIPrincipal
;
class
nsWindowSizes
;
template
<
class
T
>
struct
already_AddRefed
;
namespace
mozilla
:
:
dom
{
class
Document
;
}
class
nsNodeInfoManager
final
{
private
:
~
nsNodeInfoManager
(
)
;
public
:
explicit
nsNodeInfoManager
(
mozilla
:
:
dom
:
:
Document
*
aDocument
nsIPrincipal
*
aPrincipal
)
;
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_NATIVE_CLASS
(
nsNodeInfoManager
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
nsNodeInfoManager
)
void
DropDocumentReference
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetNodeInfo
(
nsAtom
*
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
uint16_t
aNodeType
nsAtom
*
aExtraName
=
nullptr
)
;
nsresult
GetNodeInfo
(
const
nsAString
&
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
uint16_t
aNodeType
mozilla
:
:
dom
:
:
NodeInfo
*
*
aNodeInfo
)
;
nsresult
GetNodeInfo
(
const
nsAString
&
aName
nsAtom
*
aPrefix
const
nsAString
&
aNamespaceURI
uint16_t
aNodeType
mozilla
:
:
dom
:
:
NodeInfo
*
*
aNodeInfo
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetTextNodeInfo
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetCommentNodeInfo
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetDocumentNodeInfo
(
)
;
mozilla
:
:
dom
:
:
Document
*
GetDocument
(
)
const
{
return
mDocument
;
}
nsIPrincipal
*
DocumentPrincipal
(
)
const
{
NS_ASSERTION
(
mPrincipal
"
How
'
d
that
happen
?
"
)
;
return
mPrincipal
;
}
void
RemoveNodeInfo
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
)
;
bool
SVGEnabled
(
)
{
return
mSVGEnabled
.
valueOrFrom
(
[
this
]
{
return
InternalSVGEnabled
(
)
;
}
)
;
}
bool
MathMLEnabled
(
)
{
return
mMathMLEnabled
.
valueOrFrom
(
[
this
]
{
return
InternalMathMLEnabled
(
)
;
}
)
;
}
mozilla
:
:
dom
:
:
DOMArena
*
GetArenaAllocator
(
)
{
return
mArena
;
}
void
SetArenaAllocator
(
mozilla
:
:
dom
:
:
DOMArena
*
aArena
)
;
void
*
Allocate
(
size_t
aSize
)
;
void
Free
(
void
*
aPtr
)
{
free
(
aPtr
)
;
}
bool
HasAllocated
(
)
{
return
mHasAllocated
;
}
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
;
protected
:
friend
class
mozilla
:
:
dom
:
:
Document
;
friend
class
nsXULPrototypeDocument
;
void
SetDocumentPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
private
:
bool
InternalSVGEnabled
(
)
;
bool
InternalMathMLEnabled
(
)
;
class
NodeInfoInnerKey
:
public
nsPtrHashKey
<
mozilla
:
:
dom
:
:
NodeInfo
:
:
NodeInfoInner
>
{
public
:
explicit
NodeInfoInnerKey
(
KeyTypePointer
aKey
)
:
nsPtrHashKey
(
aKey
)
{
}
NodeInfoInnerKey
(
NodeInfoInnerKey
&
&
)
=
default
;
~
NodeInfoInnerKey
(
)
=
default
;
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
*
mKey
=
=
*
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
aKey
-
>
Hash
(
)
;
}
}
;
struct
NodeInfoCache
:
public
mozilla
:
:
MruCache
<
mozilla
:
:
dom
:
:
NodeInfo
:
:
NodeInfoInner
mozilla
:
:
dom
:
:
NodeInfo
*
NodeInfoCache
>
{
static
mozilla
:
:
HashNumber
Hash
(
const
mozilla
:
:
dom
:
:
NodeInfo
:
:
NodeInfoInner
&
aKey
)
{
return
aKey
.
Hash
(
)
;
}
static
bool
Match
(
const
mozilla
:
:
dom
:
:
NodeInfo
:
:
NodeInfoInner
&
aKey
const
mozilla
:
:
dom
:
:
NodeInfo
*
aVal
)
{
return
aKey
=
=
aVal
-
>
mInner
;
}
}
;
nsTHashMap
<
NodeInfoInnerKey
mozilla
:
:
dom
:
:
NodeInfo
*
>
mNodeInfoHash
;
mozilla
:
:
dom
:
:
Document
*
MOZ_NON_OWNING_REF
mDocument
;
uint32_t
mNonDocumentNodeInfos
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mDefaultPrincipal
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mTextNodeInfo
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mCommentNodeInfo
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mDocumentNodeInfo
;
NodeInfoCache
mRecentlyUsedNodeInfos
;
mozilla
:
:
Maybe
<
bool
>
mSVGEnabled
;
mozilla
:
:
Maybe
<
bool
>
mMathMLEnabled
;
RefPtr
<
mozilla
:
:
dom
:
:
DOMArena
>
mArena
;
bool
mHasAllocated
=
false
;
}
;
#
endif
