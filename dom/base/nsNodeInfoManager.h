#
ifndef
nsNodeInfoManager_h___
#
define
nsNodeInfoManager_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsBindingManager
;
class
nsAtom
;
class
nsIDocument
;
class
nsIPrincipal
;
class
nsWindowSizes
;
template
<
class
T
>
struct
already_AddRefed
;
#
define
RECENTLY_USED_NODEINFOS_SIZE
31
class
nsNodeInfoManager
final
{
private
:
~
nsNodeInfoManager
(
)
;
public
:
nsNodeInfoManager
(
)
;
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_NATIVE_CLASS
(
nsNodeInfoManager
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
nsNodeInfoManager
)
nsresult
Init
(
nsIDocument
*
aDocument
)
;
void
DropDocumentReference
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetNodeInfo
(
nsAtom
*
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
uint16_t
aNodeType
nsAtom
*
aExtraName
=
nullptr
)
;
nsresult
GetNodeInfo
(
const
nsAString
&
aName
nsAtom
*
aPrefix
int32_t
aNamespaceID
uint16_t
aNodeType
mozilla
:
:
dom
:
:
NodeInfo
*
*
aNodeInfo
)
;
nsresult
GetNodeInfo
(
const
nsAString
&
aName
nsAtom
*
aPrefix
const
nsAString
&
aNamespaceURI
uint16_t
aNodeType
mozilla
:
:
dom
:
:
NodeInfo
*
*
aNodeInfo
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetTextNodeInfo
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetCommentNodeInfo
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
GetDocumentNodeInfo
(
)
;
nsIDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
nsIPrincipal
*
DocumentPrincipal
(
)
const
{
NS_ASSERTION
(
mPrincipal
"
How
'
d
that
happen
?
"
)
;
return
mPrincipal
;
}
void
RemoveNodeInfo
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
)
;
nsBindingManager
*
GetBindingManager
(
)
const
{
return
mBindingManager
;
}
enum
Tri
{
eTriUnset
=
0
eTriFalse
eTriTrue
}
;
bool
SVGEnabled
(
)
{
return
mSVGEnabled
=
=
eTriTrue
?
true
:
mSVGEnabled
=
=
eTriFalse
?
false
:
InternalSVGEnabled
(
)
;
}
bool
MathMLEnabled
(
)
{
return
mMathMLEnabled
=
=
eTriTrue
?
true
:
mMathMLEnabled
=
=
eTriFalse
?
false
:
InternalMathMLEnabled
(
)
;
}
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
;
protected
:
friend
class
nsIDocument
;
friend
class
nsXULPrototypeDocument
;
void
SetDocumentPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
private
:
bool
InternalSVGEnabled
(
)
;
bool
InternalMathMLEnabled
(
)
;
class
NodeInfoInnerKey
:
public
nsPtrHashKey
<
mozilla
:
:
dom
:
:
NodeInfo
:
:
NodeInfoInner
>
{
public
:
explicit
NodeInfoInnerKey
(
KeyTypePointer
aKey
)
:
nsPtrHashKey
(
aKey
)
{
}
NodeInfoInnerKey
(
NodeInfoInnerKey
&
&
)
=
default
;
~
NodeInfoInnerKey
(
)
=
default
;
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
*
mKey
=
=
*
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
aKey
-
>
Hash
(
)
;
}
}
;
nsDataHashtable
<
NodeInfoInnerKey
mozilla
:
:
dom
:
:
NodeInfo
*
>
mNodeInfoHash
;
nsIDocument
*
MOZ_NON_OWNING_REF
mDocument
;
uint32_t
mNonDocumentNodeInfos
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mDefaultPrincipal
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mTextNodeInfo
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mCommentNodeInfo
;
mozilla
:
:
dom
:
:
NodeInfo
*
MOZ_NON_OWNING_REF
mDocumentNodeInfo
;
RefPtr
<
nsBindingManager
>
mBindingManager
;
mozilla
:
:
dom
:
:
NodeInfo
*
mRecentlyUsedNodeInfos
[
RECENTLY_USED_NODEINFOS_SIZE
]
;
Tri
mSVGEnabled
;
Tri
mMathMLEnabled
;
}
;
#
endif
