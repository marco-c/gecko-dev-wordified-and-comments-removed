use
percent_encoding
:
:
{
percent_decode
percent_encode
NON_ALPHANUMERIC
}
;
use
std
:
:
str
;
pub
enum
TextDirectiveParameter
{
Prefix
(
String
)
StartOrEnd
(
String
)
Suffix
(
String
)
}
impl
TextDirectiveParameter
{
pub
fn
from_percent_encoded
(
token
:
&
[
u8
]
)
-
>
Option
<
Self
>
{
if
token
.
is_empty
(
)
{
return
None
;
}
let
starts_with_dash
=
*
token
.
first
(
)
.
unwrap
(
)
=
=
b
'
-
'
;
let
ends_with_dash
=
*
token
.
last
(
)
.
unwrap
(
)
=
=
b
'
-
'
;
if
starts_with_dash
&
&
ends_with_dash
{
return
None
;
}
if
token
.
len
(
)
=
=
1
&
&
starts_with_dash
{
return
None
;
}
if
starts_with_dash
{
if
let
Ok
(
decoded_suffix
)
=
percent_decode
(
&
token
[
1
.
.
]
)
.
decode_utf8
(
)
{
return
Some
(
TextDirectiveParameter
:
:
Suffix
(
String
:
:
from
(
decoded_suffix
.
trim
(
)
)
)
)
;
}
return
None
;
}
if
ends_with_dash
{
if
let
Ok
(
decoded_prefix
)
=
percent_decode
(
&
token
[
.
.
token
.
len
(
)
-
1
]
)
.
decode_utf8
(
)
{
return
Some
(
TextDirectiveParameter
:
:
Prefix
(
String
:
:
from
(
decoded_prefix
.
trim
(
)
)
)
)
;
}
return
None
;
}
if
let
Ok
(
decoded_text
)
=
percent_decode
(
&
token
)
.
decode_utf8
(
)
{
return
Some
(
TextDirectiveParameter
:
:
StartOrEnd
(
String
:
:
from
(
decoded_text
.
trim
(
)
)
)
)
;
}
None
}
pub
fn
value
(
&
self
)
-
>
&
String
{
match
self
{
TextDirectiveParameter
:
:
Prefix
(
value
)
=
>
&
value
TextDirectiveParameter
:
:
StartOrEnd
(
value
)
=
>
&
value
TextDirectiveParameter
:
:
Suffix
(
value
)
=
>
&
value
}
}
pub
fn
to_percent_encoded_string
(
&
self
)
-
>
String
{
let
encode
=
|
text
:
&
String
|
percent_encode
(
text
.
as_bytes
(
)
NON_ALPHANUMERIC
)
.
to_string
(
)
;
match
self
{
Self
:
:
Prefix
(
text
)
=
>
encode
(
text
)
+
"
-
"
Self
:
:
StartOrEnd
(
text
)
=
>
encode
(
text
)
Self
:
:
Suffix
(
text
)
=
>
{
let
encoded
=
encode
(
text
)
;
let
mut
result
=
String
:
:
with_capacity
(
encoded
.
len
(
)
+
1
)
;
result
.
push_str
(
"
-
"
)
;
result
.
push_str
(
&
encoded
)
;
result
}
}
}
}
#
[
derive
(
Default
)
]
pub
struct
TextDirective
{
prefix
:
Option
<
TextDirectiveParameter
>
start
:
Option
<
TextDirectiveParameter
>
end
:
Option
<
TextDirectiveParameter
>
suffix
:
Option
<
TextDirectiveParameter
>
}
impl
TextDirective
{
pub
fn
from_parts
(
prefix
:
String
start
:
String
end
:
String
suffix
:
String
)
-
>
Option
<
Self
>
{
if
!
start
.
is_empty
(
)
{
Some
(
Self
{
prefix
:
if
!
prefix
.
is_empty
(
)
{
Some
(
TextDirectiveParameter
:
:
Prefix
(
prefix
.
trim
(
)
.
into
(
)
)
)
}
else
{
None
}
start
:
Some
(
TextDirectiveParameter
:
:
StartOrEnd
(
start
.
trim
(
)
.
into
(
)
)
)
end
:
if
!
end
.
is_empty
(
)
{
Some
(
TextDirectiveParameter
:
:
StartOrEnd
(
end
.
trim
(
)
.
into
(
)
)
)
}
else
{
None
}
suffix
:
if
!
suffix
.
is_empty
(
)
{
Some
(
TextDirectiveParameter
:
:
Suffix
(
suffix
.
trim
(
)
.
into
(
)
)
)
}
else
{
None
}
}
)
}
else
{
None
}
}
pub
fn
from_percent_encoded_string
(
text_directive
:
&
str
)
-
>
Option
<
Self
>
{
if
text_directive
.
len
(
)
<
6
{
return
None
;
}
if
!
text_directive
.
starts_with
(
"
text
=
"
)
{
return
None
;
}
let
mut
parsed_text_directive
=
Self
:
:
default
(
)
;
let
valid
=
text_directive
[
5
.
.
]
.
split
(
"
"
)
.
map
(
|
token
|
TextDirectiveParameter
:
:
from_percent_encoded
(
token
.
as_bytes
(
)
)
)
.
map
(
|
token
|
match
token
{
Some
(
TextDirectiveParameter
:
:
Prefix
(
.
.
)
)
=
>
{
if
!
parsed_text_directive
.
is_empty
(
)
{
return
false
;
}
parsed_text_directive
.
prefix
=
token
;
return
true
;
}
Some
(
TextDirectiveParameter
:
:
StartOrEnd
(
.
.
)
)
=
>
{
if
parsed_text_directive
.
suffix
.
is_some
(
)
{
return
false
;
}
if
parsed_text_directive
.
start
.
is_none
(
)
{
parsed_text_directive
.
start
=
token
;
return
true
;
}
if
parsed_text_directive
.
end
.
is_none
(
)
{
parsed_text_directive
.
end
=
token
;
return
true
;
}
return
false
;
}
Some
(
TextDirectiveParameter
:
:
Suffix
(
.
.
)
)
=
>
{
if
parsed_text_directive
.
start
.
is_some
(
)
&
&
parsed_text_directive
.
suffix
.
is_none
(
)
{
parsed_text_directive
.
suffix
=
token
;
return
true
;
}
return
false
;
}
None
=
>
false
}
)
.
all
(
|
valid
|
valid
)
;
if
valid
{
return
Some
(
parsed_text_directive
)
;
}
None
}
pub
fn
to_percent_encoded_string
(
&
self
)
-
>
String
{
if
!
self
.
is_valid
(
)
{
return
String
:
:
default
(
)
;
}
String
:
:
from
(
"
text
=
"
)
+
&
[
&
self
.
prefix
&
self
.
start
&
self
.
end
&
self
.
suffix
]
.
iter
(
)
.
filter_map
(
|
&
token
|
token
.
as_ref
(
)
)
.
map
(
|
token
|
token
.
to_percent_encoded_string
(
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
.
join
(
"
"
)
}
pub
fn
start
(
&
self
)
-
>
&
Option
<
TextDirectiveParameter
>
{
&
self
.
start
}
pub
fn
end
(
&
self
)
-
>
&
Option
<
TextDirectiveParameter
>
{
&
self
.
end
}
pub
fn
prefix
(
&
self
)
-
>
&
Option
<
TextDirectiveParameter
>
{
&
self
.
prefix
}
pub
fn
suffix
(
&
self
)
-
>
&
Option
<
TextDirectiveParameter
>
{
&
self
.
suffix
}
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
prefix
.
is_none
(
)
&
&
self
.
start
.
is_none
(
)
&
&
self
.
end
.
is_none
(
)
&
&
self
.
suffix
.
is_none
(
)
}
fn
is_valid
(
&
self
)
-
>
bool
{
self
.
start
.
is_some
(
)
}
}
pub
fn
parse_fragment_directive_and_remove_it_from_hash
(
url
:
&
str
)
-
>
Option
<
(
&
str
&
str
Vec
<
TextDirective
>
)
>
{
let
maybe_first_hash_pos
=
url
.
find
(
"
#
"
)
;
let
first_hash_pos
=
maybe_first_hash_pos
.
unwrap_or_default
(
)
;
let
mut
fragment_directive_iter
=
url
[
first_hash_pos
.
.
]
.
split
(
"
:
~
:
"
)
;
let
url_with_stripped_fragment_directive
=
&
url
[
.
.
first_hash_pos
+
fragment_directive_iter
.
next
(
)
.
unwrap_or_default
(
)
.
len
(
)
]
;
if
let
Some
(
fragment_directive
)
=
fragment_directive_iter
.
next
(
)
{
if
fragment_directive_iter
.
next
(
)
.
is_some
(
)
{
return
Some
(
(
url_with_stripped_fragment_directive
.
strip_suffix
(
"
#
"
)
.
unwrap_or
(
url_with_stripped_fragment_directive
)
fragment_directive
vec
!
[
]
)
)
;
}
let
text_directives
:
Vec
<
_
>
=
fragment_directive
.
split
(
"
&
"
)
.
map
(
|
maybe_text_fragment
|
{
TextDirective
:
:
from_percent_encoded_string
(
&
maybe_text_fragment
)
}
)
.
filter_map
(
|
maybe_text_directive
|
maybe_text_directive
)
.
collect
(
)
;
return
Some
(
(
url_with_stripped_fragment_directive
.
strip_suffix
(
"
#
"
)
.
unwrap_or
(
url_with_stripped_fragment_directive
)
fragment_directive
text_directives
)
)
;
}
None
}
pub
fn
create_fragment_directive_string
(
text_directives
:
&
Vec
<
TextDirective
>
)
-
>
Option
<
String
>
{
if
text_directives
.
is_empty
(
)
{
return
None
;
}
let
encoded_fragment_directives
:
Vec
<
_
>
=
text_directives
.
iter
(
)
.
filter
(
|
&
fragment_directive
|
fragment_directive
.
is_valid
(
)
)
.
map
(
|
fragment_directive
|
fragment_directive
.
to_percent_encoded_string
(
)
)
.
filter
(
|
text_directive
|
!
text_directive
.
is_empty
(
)
)
.
collect
(
)
;
if
encoded_fragment_directives
.
is_empty
(
)
{
return
None
;
}
Some
(
String
:
:
from
(
"
:
~
:
"
)
+
&
encoded_fragment_directives
.
join
(
"
&
"
)
)
}
pub
fn
create_text_directive_string
(
text_directive
:
&
TextDirective
)
-
>
Option
<
String
>
{
if
text_directive
.
is_valid
(
)
{
Some
(
text_directive
.
to_percent_encoded_string
(
)
)
}
else
{
None
}
}
