#
ifndef
mozilla_dom_PopupBlocker_h
#
define
mozilla_dom_PopupBlocker_h
#
include
"
mozilla
/
BasicEvents
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
PopupBlocker
final
{
public
:
enum
PopupControlState
{
openAllowed
=
0
openControlled
openBlocked
openAbused
openOverridden
}
;
static
PopupControlState
PushPopupControlState
(
PopupControlState
aState
bool
aForce
)
;
static
void
PopPopupControlState
(
PopupControlState
aState
)
;
static
PopupControlState
GetPopupControlState
(
)
;
static
void
PopupStatePusherCreated
(
)
;
static
void
PopupStatePusherDestroyed
(
)
;
static
bool
CanShowPopupByPermission
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
TryUsePopupOpeningToken
(
nsIPrincipal
*
aPrincipal
)
;
static
bool
IsPopupOpeningTokenUnused
(
)
;
static
PopupBlocker
:
:
PopupControlState
GetEventPopupControlState
(
WidgetEvent
*
aEvent
Event
*
aDOMEvent
=
nullptr
)
;
static
bool
ConsumeTimerTokenForExternalProtocolIframe
(
)
;
static
TimeStamp
WhenLastExternalProtocolIframeAllowed
(
)
;
static
void
ResetLastExternalProtocolIframeAllowed
(
)
;
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
}
;
}
}
#
ifdef
MOZILLA_INTERNAL_API
#
define
NS_AUTO_POPUP_STATE_PUSHER
nsAutoPopupStatePusherInternal
#
else
#
define
NS_AUTO_POPUP_STATE_PUSHER
nsAutoPopupStatePusherExternal
#
endif
class
NS_AUTO_POPUP_STATE_PUSHER
{
public
:
#
ifdef
MOZILLA_INTERNAL_API
explicit
NS_AUTO_POPUP_STATE_PUSHER
(
mozilla
:
:
dom
:
:
PopupBlocker
:
:
PopupControlState
aState
bool
aForce
=
false
)
;
~
NS_AUTO_POPUP_STATE_PUSHER
(
)
;
#
else
NS_AUTO_POPUP_STATE_PUSHER
(
nsPIDOMWindowOuter
*
aWindow
mozilla
:
:
dom
:
:
PopupBlocker
:
:
PopupControlState
aState
)
:
mWindow
(
aWindow
)
mOldState
(
openAbused
)
{
if
(
aWindow
)
{
mOldState
=
PopupBlocker
:
:
PushPopupControlState
(
aState
false
)
;
}
}
~
NS_AUTO_POPUP_STATE_PUSHER
(
)
{
if
(
mWindow
)
{
PopupBlocker
:
:
PopPopupControlState
(
mOldState
)
;
}
}
#
endif
protected
:
#
ifndef
MOZILLA_INTERNAL_API
nsCOMPtr
<
nsPIDOMWindowOuter
>
mWindow
;
#
endif
mozilla
:
:
dom
:
:
PopupBlocker
:
:
PopupControlState
mOldState
;
private
:
static
void
*
operator
new
(
size_t
)
CPP_THROW_NEW
{
return
nullptr
;
}
static
void
operator
delete
(
void
*
)
{
}
}
;
#
define
nsAutoPopupStatePusher
NS_AUTO_POPUP_STATE_PUSHER
#
endif
