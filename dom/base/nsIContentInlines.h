#
ifndef
nsIContentInlines_h
#
define
nsIContentInlines_h
#
include
"
nsIContent
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
inline
bool
nsIContent
:
:
IsInHTMLDocument
(
)
const
{
return
OwnerDoc
(
)
-
>
IsHTMLDocument
(
)
;
}
inline
bool
nsIContent
:
:
IsInChromeDocument
(
)
const
{
return
nsContentUtils
:
:
IsChromeDoc
(
OwnerDoc
(
)
)
;
}
inline
mozilla
:
:
dom
:
:
ShadowRoot
*
nsIContent
:
:
GetShadowRoot
(
)
const
{
if
(
!
IsElement
(
)
)
{
return
nullptr
;
}
return
AsElement
(
)
-
>
FastGetShadowRoot
(
)
;
}
template
<
nsIContent
:
:
FlattenedParentType
Type
>
static
inline
nsINode
*
GetFlattenedTreeParentNode
(
const
nsINode
*
aNode
)
{
nsINode
*
parent
=
aNode
-
>
GetParentNode
(
)
;
bool
needSlowCall
=
aNode
-
>
HasFlag
(
NODE_MAY_BE_IN_BINDING_MNGR
)
|
|
aNode
-
>
IsInShadowTree
(
)
|
|
(
parent
&
&
parent
-
>
IsContent
(
)
&
&
parent
-
>
AsContent
(
)
-
>
GetShadowRoot
(
)
)
|
|
(
Type
=
=
nsIContent
:
:
eForStyle
&
&
aNode
-
>
IsContent
(
)
&
&
aNode
-
>
AsContent
(
)
-
>
IsRootOfNativeAnonymousSubtree
(
)
&
&
aNode
-
>
OwnerDoc
(
)
-
>
GetRootElement
(
)
=
=
parent
)
;
if
(
MOZ_UNLIKELY
(
needSlowCall
)
)
{
MOZ_ASSERT
(
aNode
-
>
IsContent
(
)
)
;
return
aNode
-
>
AsContent
(
)
-
>
GetFlattenedTreeParentNodeInternal
(
Type
)
;
}
return
parent
;
}
inline
nsINode
*
nsINode
:
:
GetFlattenedTreeParentNode
(
)
const
{
return
:
:
GetFlattenedTreeParentNode
<
nsIContent
:
:
eNotForStyle
>
(
this
)
;
}
inline
nsIContent
*
nsIContent
:
:
GetFlattenedTreeParent
(
)
const
{
nsINode
*
parent
=
GetFlattenedTreeParentNode
(
)
;
return
(
parent
&
&
parent
-
>
IsContent
(
)
)
?
parent
-
>
AsContent
(
)
:
nullptr
;
}
inline
nsINode
*
nsINode
:
:
GetFlattenedTreeParentNodeForStyle
(
)
const
{
return
:
:
GetFlattenedTreeParentNode
<
nsIContent
:
:
eForStyle
>
(
this
)
;
}
#
endif
