#
ifndef
TabGroup_h
#
define
TabGroup_h
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
mozIDOMWindowProxy
;
class
nsIDocShellTreeItem
;
class
nsIDocument
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
class
AbstractThread
;
class
ThrottledEventQueue
;
namespace
dom
{
class
DocGroup
;
class
TabGroup
final
:
public
SchedulerGroup
{
private
:
class
HashEntry
:
public
nsCStringHashKey
{
public
:
DocGroup
*
mDocGroup
;
explicit
HashEntry
(
const
nsACString
*
aKey
)
;
}
;
typedef
nsTHashtable
<
HashEntry
>
DocGroupMap
;
public
:
typedef
DocGroupMap
:
:
Iterator
Iterator
;
friend
class
DocGroup
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TabGroup
override
)
static
TabGroup
*
GetChromeTabGroup
(
)
;
static
TabGroup
*
GetFromActor
(
TabChild
*
aTabChild
)
;
static
TabGroup
*
GetFromWindow
(
mozIDOMWindowProxy
*
aWindow
)
;
explicit
TabGroup
(
bool
aIsChrome
=
false
)
;
already_AddRefed
<
DocGroup
>
GetDocGroup
(
const
nsACString
&
aKey
)
;
already_AddRefed
<
DocGroup
>
AddDocument
(
const
nsACString
&
aKey
nsIDocument
*
aDocument
)
;
static
already_AddRefed
<
TabGroup
>
Join
(
nsPIDOMWindowOuter
*
aWindow
TabGroup
*
aTabGroup
)
;
void
Leave
(
nsPIDOMWindowOuter
*
aWindow
)
;
Iterator
Iter
(
)
{
return
mDocGroups
.
Iter
(
)
;
}
nsresult
FindItemWithName
(
const
nsAString
&
aName
nsIDocShellTreeItem
*
aRequestor
nsIDocShellTreeItem
*
aOriginalRequestor
nsIDocShellTreeItem
*
*
aFoundItem
)
;
nsTArray
<
nsPIDOMWindowOuter
*
>
GetTopLevelWindows
(
)
const
;
const
nsTArray
<
nsPIDOMWindowOuter
*
>
&
GetWindows
(
)
{
return
mWindows
;
}
nsIEventTarget
*
EventTargetFor
(
TaskCategory
aCategory
)
const
override
;
void
WindowChangedBackgroundStatus
(
bool
aIsNowBackground
)
;
bool
IsBackground
(
)
const
override
;
private
:
virtual
AbstractThread
*
AbstractMainThreadForImpl
(
TaskCategory
aCategory
)
override
;
TabGroup
*
AsTabGroup
(
)
override
{
return
this
;
}
void
EnsureThrottledEventQueues
(
)
;
~
TabGroup
(
)
;
Atomic
<
bool
>
mLastWindowLeft
;
Atomic
<
bool
>
mThrottledQueuesInitialized
;
const
bool
mIsChrome
;
DocGroupMap
mDocGroups
;
nsTArray
<
nsPIDOMWindowOuter
*
>
mWindows
;
uint32_t
mForegroundCount
;
}
;
}
}
#
endif
