#
ifndef
nsWindowRoot_h__
#
define
nsWindowRoot_h__
class
nsIGlobalObject
;
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsHashKeys
.
h
"
class
nsWindowRoot
final
:
public
nsPIWindowRoot
{
public
:
explicit
nsWindowRoot
(
nsPIDOMWindowOuter
*
aWindow
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
mozilla
:
:
EventListenerManager
*
GetExistingListenerManager
(
)
const
override
;
mozilla
:
:
EventListenerManager
*
GetOrCreateListenerManager
(
)
override
;
bool
ComputeDefaultWantsUntrusted
(
mozilla
:
:
ErrorResult
&
aRv
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
bool
DispatchEvent
(
mozilla
:
:
dom
:
:
Event
&
aEvent
mozilla
:
:
dom
:
:
CallerType
aCallerType
mozilla
:
:
ErrorResult
&
aRv
)
override
;
void
GetEventTargetParent
(
mozilla
:
:
EventChainPreVisitor
&
aVisitor
)
override
;
nsresult
PostHandleEvent
(
mozilla
:
:
EventChainPostVisitor
&
aVisitor
)
override
;
nsPIDOMWindowOuter
*
GetWindow
(
)
override
;
nsresult
GetControllers
(
bool
aForVisibleWindow
nsIControllers
*
*
aResult
)
override
;
nsresult
GetControllerForCommand
(
const
char
*
aCommand
bool
aForVisibleWindow
nsIController
*
*
_retval
)
override
;
void
GetEnabledDisabledCommands
(
nsTArray
<
nsCString
>
&
aEnabledCommands
nsTArray
<
nsCString
>
&
aDisabledCommands
)
override
;
already_AddRefed
<
nsINode
>
GetPopupNode
(
)
override
;
void
SetPopupNode
(
nsINode
*
aNode
)
override
;
void
SetParentTarget
(
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
)
override
{
mParent
=
aTarget
;
}
mozilla
:
:
dom
:
:
EventTarget
*
GetParentTarget
(
)
override
{
return
mParent
;
}
nsPIDOMWindowOuter
*
GetOwnerGlobalForBindingsInternal
(
)
override
;
nsIGlobalObject
*
GetOwnerGlobal
(
)
const
override
;
nsIGlobalObject
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
nsWindowRoot
)
void
AddBrowser
(
nsIRemoteTab
*
aBrowser
)
override
;
void
RemoveBrowser
(
nsIRemoteTab
*
aBrowser
)
override
;
void
EnumerateBrowsers
(
BrowserEnumerator
aEnumFunc
void
*
aArg
)
override
;
bool
ShowFocusRings
(
)
override
{
return
mShowFocusRings
;
}
void
SetShowFocusRings
(
bool
aEnable
)
override
{
mShowFocusRings
=
aEnable
;
}
protected
:
virtual
~
nsWindowRoot
(
)
;
void
GetEnabledDisabledCommandsForControllers
(
nsIControllers
*
aControllers
nsTHashSet
<
nsCString
>
&
aCommandsHandled
nsTArray
<
nsCString
>
&
aEnabledCommands
nsTArray
<
nsCString
>
&
aDisabledCommands
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mWindow
;
RefPtr
<
mozilla
:
:
EventListenerManager
>
mListenerManager
;
nsWeakPtr
mPopupNode
;
bool
mShowFocusRings
;
nsCOMPtr
<
mozilla
:
:
dom
:
:
EventTarget
>
mParent
;
using
WeakBrowserTable
=
nsTHashSet
<
RefPtr
<
nsIWeakReference
>
>
;
WeakBrowserTable
mWeakBrowsers
;
}
;
extern
already_AddRefed
<
mozilla
:
:
dom
:
:
EventTarget
>
NS_NewWindowRoot
(
nsPIDOMWindowOuter
*
aWindow
)
;
#
endif
