#
include
"
nsDOMWindowList
.
h
"
#
include
"
FlushType
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIWebNavigation
.
h
"
using
namespace
mozilla
;
nsDOMWindowList
:
:
nsDOMWindowList
(
nsIDocShell
*
aDocShell
)
{
SetDocShell
(
aDocShell
)
;
}
nsDOMWindowList
:
:
~
nsDOMWindowList
(
)
{
}
void
nsDOMWindowList
:
:
SetDocShell
(
nsIDocShell
*
aDocShell
)
{
mDocShellNode
=
aDocShell
;
}
void
nsDOMWindowList
:
:
EnsureFresh
(
)
{
nsCOMPtr
<
nsIWebNavigation
>
shellAsNav
=
do_QueryInterface
(
mDocShellNode
)
;
if
(
shellAsNav
)
{
nsCOMPtr
<
dom
:
:
Document
>
doc
;
shellAsNav
-
>
GetDocument
(
getter_AddRefs
(
doc
)
)
;
if
(
doc
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
ContentAndNotify
)
;
}
}
}
uint32_t
nsDOMWindowList
:
:
GetLength
(
)
{
EnsureFresh
(
)
;
NS_ENSURE_TRUE
(
mDocShellNode
0
)
;
int32_t
length
;
nsresult
rv
=
mDocShellNode
-
>
GetChildCount
(
&
length
)
;
NS_ENSURE_SUCCESS
(
rv
0
)
;
return
uint32_t
(
length
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsDOMWindowList
:
:
IndexedGetter
(
uint32_t
aIndex
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
item
=
GetDocShellTreeItemAt
(
aIndex
)
;
if
(
!
item
)
{
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
item
-
>
GetWindow
(
)
;
MOZ_ASSERT
(
window
)
;
return
window
.
forget
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsDOMWindowList
:
:
NamedItem
(
const
nsAString
&
aName
)
{
EnsureFresh
(
)
;
if
(
!
mDocShellNode
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
item
;
mDocShellNode
-
>
FindChildWithName
(
aName
false
false
nullptr
nullptr
getter_AddRefs
(
item
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
childWindow
(
do_GetInterface
(
item
)
)
;
return
childWindow
.
forget
(
)
;
}
