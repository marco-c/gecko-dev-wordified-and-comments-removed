#
include
"
mozilla
/
dom
/
CustomElementsRegistry
.
h
"
#
include
"
mozilla
/
dom
/
CustomElementsRegistryBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebComponentsBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
void
CustomElementCallback
:
:
Call
(
)
{
ErrorResult
rv
;
switch
(
mType
)
{
case
nsIDocument
:
:
eCreated
:
{
mOwnerData
-
>
mElementIsBeingCreated
=
true
;
mOwnerData
-
>
mCreatedCallbackInvoked
=
true
;
nsIDocument
*
document
=
mThisObject
-
>
GetComposedDoc
(
)
;
if
(
document
&
&
document
-
>
GetDocShell
(
)
)
{
nsContentUtils
:
:
EnqueueLifecycleCallback
(
document
nsIDocument
:
:
eAttached
mThisObject
)
;
}
static_cast
<
LifecycleCreatedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
mOwnerData
-
>
mElementIsBeingCreated
=
false
;
break
;
}
case
nsIDocument
:
:
eAttached
:
static_cast
<
LifecycleAttachedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
break
;
case
nsIDocument
:
:
eDetached
:
static_cast
<
LifecycleDetachedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
rv
)
;
break
;
case
nsIDocument
:
:
eAttributeChanged
:
static_cast
<
LifecycleAttributeChangedCallback
*
>
(
mCallback
.
get
(
)
)
-
>
Call
(
mThisObject
mArgs
.
name
mArgs
.
oldValue
mArgs
.
newValue
rv
)
;
break
;
}
}
void
CustomElementCallback
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mThisObject
"
)
;
aCb
.
NoteXPCOMChild
(
mThisObject
)
;
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
mCallback
"
)
;
aCb
.
NoteXPCOMChild
(
mCallback
)
;
}
CustomElementCallback
:
:
CustomElementCallback
(
Element
*
aThisObject
nsIDocument
:
:
ElementCallbackType
aCallbackType
mozilla
:
:
dom
:
:
CallbackFunction
*
aCallback
CustomElementData
*
aOwnerData
)
:
mThisObject
(
aThisObject
)
mCallback
(
aCallback
)
mType
(
aCallbackType
)
mOwnerData
(
aOwnerData
)
{
}
CustomElementData
:
:
CustomElementData
(
nsIAtom
*
aType
)
:
mType
(
aType
)
mCurrentCallback
(
-
1
)
mElementIsBeingCreated
(
false
)
mCreatedCallbackInvoked
(
true
)
mAssociatedMicroTask
(
-
1
)
{
}
void
CustomElementData
:
:
RunCallbackQueue
(
)
{
while
(
static_cast
<
uint32_t
>
(
+
+
mCurrentCallback
)
<
mCallbackQueue
.
Length
(
)
)
{
mCallbackQueue
[
mCurrentCallback
]
-
>
Call
(
)
;
}
mCallbackQueue
.
Clear
(
)
;
mCurrentCallback
=
-
1
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CustomElementsRegistry
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CustomElementsRegistry
)
tmp
-
>
mCustomDefinitions
.
Clear
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
CustomElementsRegistry
)
for
(
auto
iter
=
tmp
-
>
mCustomDefinitions
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
LifecycleCallbacks
>
&
callbacks
=
iter
.
UserData
(
)
-
>
mCallbacks
;
if
(
callbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mAttributeChangedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAttributeChangedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mCreatedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mCreatedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mCreatedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mAttachedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mAttachedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mAttachedCallback
.
Value
(
)
)
;
}
if
(
callbacks
-
>
mDetachedCallback
.
WasPassed
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
mCustomDefinitions
-
>
mCallbacks
-
>
mDetachedCallback
"
)
;
cb
.
NoteXPCOMChild
(
callbacks
-
>
mDetachedCallback
.
Value
(
)
)
;
}
}
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWindow
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
CustomElementsRegistry
)
for
(
auto
iter
=
tmp
-
>
mCustomDefinitions
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aCallbacks
.
Trace
(
&
iter
.
UserData
(
)
-
>
mPrototype
"
mCustomDefinitions
prototype
"
aClosure
)
;
}
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CustomElementsRegistry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CustomElementsRegistry
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CustomElementsRegistry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
bool
CustomElementsRegistry
:
:
IsCustomElementsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
aObject
)
;
if
(
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
customelements
.
enabled
"
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
enabled
"
)
)
{
return
true
;
}
return
false
;
}
already_AddRefed
<
CustomElementsRegistry
>
CustomElementsRegistry
:
:
Create
(
nsPIDOMWindowInner
*
aWindow
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aWindow
-
>
IsInnerWindow
(
)
)
;
if
(
!
aWindow
-
>
GetDocShell
(
)
)
{
return
nullptr
;
}
if
(
!
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
enabled
"
)
&
&
!
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
customelement
.
enabled
"
)
)
{
return
nullptr
;
}
RefPtr
<
CustomElementsRegistry
>
customElementsRegistry
=
new
CustomElementsRegistry
(
aWindow
)
;
return
customElementsRegistry
.
forget
(
)
;
}
void
CustomElementsRegistry
:
:
ProcessTopElementQueue
(
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
nsTArray
<
RefPtr
<
CustomElementData
>
>
&
stack
=
*
sProcessingStack
;
uint32_t
firstQueue
=
stack
.
LastIndexOf
(
(
CustomElementData
*
)
nullptr
)
;
for
(
uint32_t
i
=
firstQueue
+
1
;
i
<
stack
.
Length
(
)
;
+
+
i
)
{
if
(
stack
[
i
]
-
>
mAssociatedMicroTask
!
=
-
1
)
{
stack
[
i
]
-
>
RunCallbackQueue
(
)
;
stack
[
i
]
-
>
mAssociatedMicroTask
=
-
1
;
}
}
if
(
firstQueue
!
=
0
)
{
stack
.
SetLength
(
firstQueue
)
;
}
else
{
stack
.
SetLength
(
1
)
;
}
}
void
CustomElementsRegistry
:
:
XPCOMShutdown
(
)
{
sProcessingStack
.
reset
(
)
;
}
Maybe
<
nsTArray
<
RefPtr
<
CustomElementData
>
>
>
CustomElementsRegistry
:
:
sProcessingStack
;
CustomElementsRegistry
:
:
CustomElementsRegistry
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
if
(
!
sProcessingStack
)
{
sProcessingStack
.
emplace
(
)
;
sProcessingStack
-
>
AppendElement
(
(
CustomElementData
*
)
nullptr
)
;
}
}
CustomElementsRegistry
:
:
~
CustomElementsRegistry
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
CustomElementDefinition
*
CustomElementsRegistry
:
:
LookupCustomElementDefinition
(
const
nsAString
&
aLocalName
const
nsAString
*
aIs
)
const
{
nsCOMPtr
<
nsIAtom
>
localNameAtom
=
NS_Atomize
(
aLocalName
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
aIs
?
NS_Atomize
(
*
aIs
)
:
localNameAtom
;
CustomElementHashKey
key
(
kNameSpaceID_XHTML
typeAtom
)
;
CustomElementDefinition
*
data
=
mCustomDefinitions
.
Get
(
&
key
)
;
if
(
data
&
&
data
-
>
mLocalName
=
=
localNameAtom
)
{
return
data
;
}
return
nullptr
;
}
void
CustomElementsRegistry
:
:
RegisterUnresolvedElement
(
Element
*
aElement
nsIAtom
*
aTypeName
)
{
mozilla
:
:
dom
:
:
NodeInfo
*
info
=
aElement
-
>
NodeInfo
(
)
;
nsCOMPtr
<
nsIAtom
>
typeName
=
aTypeName
;
if
(
!
typeName
)
{
typeName
=
info
-
>
NameAtom
(
)
;
}
CustomElementHashKey
key
(
info
-
>
NamespaceID
(
)
typeName
)
;
if
(
mCustomDefinitions
.
Get
(
&
key
)
)
{
return
;
}
nsTArray
<
nsWeakPtr
>
*
unresolved
=
mCandidatesMap
.
Get
(
&
key
)
;
if
(
!
unresolved
)
{
unresolved
=
new
nsTArray
<
nsWeakPtr
>
(
)
;
mCandidatesMap
.
Put
(
&
key
unresolved
)
;
}
nsWeakPtr
*
elem
=
unresolved
-
>
AppendElement
(
)
;
*
elem
=
do_GetWeakReference
(
aElement
)
;
aElement
-
>
AddStates
(
NS_EVENT_STATE_UNRESOLVED
)
;
return
;
}
void
CustomElementsRegistry
:
:
SetupCustomElement
(
Element
*
aElement
const
nsAString
*
aTypeExtension
)
{
nsCOMPtr
<
nsIAtom
>
tagAtom
=
aElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
aTypeExtension
?
NS_Atomize
(
*
aTypeExtension
)
:
tagAtom
;
if
(
aTypeExtension
&
&
!
aElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
is
)
)
{
aElement
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
is
*
aTypeExtension
true
)
;
}
CustomElementDefinition
*
data
=
LookupCustomElementDefinition
(
aElement
-
>
NodeInfo
(
)
-
>
LocalName
(
)
aTypeExtension
)
;
if
(
!
data
)
{
RegisterUnresolvedElement
(
aElement
typeAtom
)
;
return
;
}
if
(
data
-
>
mLocalName
!
=
tagAtom
)
{
return
;
}
EnqueueLifecycleCallback
(
nsIDocument
:
:
eCreated
aElement
nullptr
data
)
;
}
void
CustomElementsRegistry
:
:
EnqueueLifecycleCallback
(
nsIDocument
:
:
ElementCallbackType
aType
Element
*
aCustomElement
LifecycleCallbackArgs
*
aArgs
CustomElementDefinition
*
aDefinition
)
{
CustomElementData
*
elementData
=
aCustomElement
-
>
GetCustomElementData
(
)
;
CustomElementDefinition
*
definition
=
aDefinition
;
if
(
!
definition
)
{
mozilla
:
:
dom
:
:
NodeInfo
*
info
=
aCustomElement
-
>
NodeInfo
(
)
;
nsCOMPtr
<
nsIAtom
>
typeAtom
=
elementData
?
elementData
-
>
mType
.
get
(
)
:
info
-
>
NameAtom
(
)
;
CustomElementHashKey
key
(
info
-
>
NamespaceID
(
)
typeAtom
)
;
definition
=
mCustomDefinitions
.
Get
(
&
key
)
;
if
(
!
definition
|
|
definition
-
>
mLocalName
!
=
info
-
>
NameAtom
(
)
)
{
return
;
}
}
if
(
!
elementData
)
{
elementData
=
new
CustomElementData
(
definition
-
>
mType
)
;
aCustomElement
-
>
SetCustomElementData
(
elementData
)
;
MOZ_ASSERT
(
aType
=
=
nsIDocument
:
:
eCreated
"
First
callback
should
be
the
created
callback
"
)
;
}
CallbackFunction
*
func
=
nullptr
;
switch
(
aType
)
{
case
nsIDocument
:
:
eCreated
:
if
(
definition
-
>
mCallbacks
-
>
mCreatedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mCreatedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAttached
:
if
(
definition
-
>
mCallbacks
-
>
mAttachedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mAttachedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eDetached
:
if
(
definition
-
>
mCallbacks
-
>
mDetachedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mDetachedCallback
.
Value
(
)
;
}
break
;
case
nsIDocument
:
:
eAttributeChanged
:
if
(
definition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
WasPassed
(
)
)
{
func
=
definition
-
>
mCallbacks
-
>
mAttributeChangedCallback
.
Value
(
)
;
}
break
;
}
if
(
!
func
)
{
return
;
}
if
(
aType
=
=
nsIDocument
:
:
eCreated
)
{
elementData
-
>
mCreatedCallbackInvoked
=
false
;
}
else
if
(
!
elementData
-
>
mCreatedCallbackInvoked
)
{
return
;
}
CustomElementCallback
*
callback
=
new
CustomElementCallback
(
aCustomElement
aType
func
elementData
)
;
elementData
-
>
mCallbackQueue
.
AppendElement
(
callback
)
;
if
(
aArgs
)
{
callback
-
>
SetArgs
(
*
aArgs
)
;
}
if
(
!
elementData
-
>
mElementIsBeingCreated
)
{
CustomElementData
*
lastData
=
sProcessingStack
-
>
SafeLastElement
(
nullptr
)
;
bool
shouldPushElementQueue
=
(
!
lastData
|
|
lastData
-
>
mAssociatedMicroTask
<
static_cast
<
int32_t
>
(
nsContentUtils
:
:
MicroTaskLevel
(
)
)
)
;
if
(
shouldPushElementQueue
)
{
sProcessingStack
-
>
AppendElement
(
(
CustomElementData
*
)
nullptr
)
;
}
sProcessingStack
-
>
AppendElement
(
elementData
)
;
elementData
-
>
mAssociatedMicroTask
=
static_cast
<
int32_t
>
(
nsContentUtils
:
:
MicroTaskLevel
(
)
)
;
if
(
shouldPushElementQueue
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableFunction
(
&
CustomElementsRegistry
:
:
ProcessTopElementQueue
)
;
nsContentUtils
:
:
AddScriptRunner
(
runnable
)
;
}
}
}
void
CustomElementsRegistry
:
:
GetCustomPrototype
(
nsIAtom
*
aAtom
JS
:
:
MutableHandle
<
JSObject
*
>
aPrototype
)
{
mozilla
:
:
dom
:
:
CustomElementHashKey
key
(
kNameSpaceID_XHTML
aAtom
)
;
mozilla
:
:
dom
:
:
CustomElementDefinition
*
definition
=
mCustomDefinitions
.
Get
(
&
key
)
;
if
(
definition
)
{
aPrototype
.
set
(
definition
-
>
mPrototype
)
;
}
else
{
aPrototype
.
set
(
nullptr
)
;
}
}
JSObject
*
CustomElementsRegistry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CustomElementsRegistryBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
CustomElementsRegistry
:
:
GetParentObject
(
)
const
{
return
mWindow
;
}
void
CustomElementsRegistry
:
:
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CustomElementsRegistry
:
:
Get
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
already_AddRefed
<
Promise
>
CustomElementsRegistry
:
:
WhenDefined
(
const
nsAString
&
name
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
CustomElementDefinition
:
:
CustomElementDefinition
(
JSObject
*
aPrototype
nsIAtom
*
aType
nsIAtom
*
aLocalName
LifecycleCallbacks
*
aCallbacks
uint32_t
aNamespaceID
uint32_t
aDocOrder
)
:
mPrototype
(
aPrototype
)
mType
(
aType
)
mLocalName
(
aLocalName
)
mCallbacks
(
aCallbacks
)
mNamespaceID
(
aNamespaceID
)
mDocOrder
(
aDocOrder
)
{
}
}
}
