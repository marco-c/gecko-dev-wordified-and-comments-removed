#
include
"
mozilla
/
dom
/
CustomElementsRegistry
.
h
"
#
include
"
mozilla
/
dom
/
CustomElementsRegistryBinding
.
h
"
#
include
"
mozilla
/
dom
/
WebComponentsBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CustomElementsRegistry
mWindow
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CustomElementsRegistry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CustomElementsRegistry
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CustomElementsRegistry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
bool
CustomElementsRegistry
:
:
IsCustomElementsEnabled
(
JSContext
*
aCx
JSObject
*
aObject
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
aObject
)
;
if
(
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
customelements
.
enabled
"
)
|
|
Preferences
:
:
GetBool
(
"
dom
.
webcomponents
.
enabled
"
)
)
{
return
true
;
}
return
false
;
}
already_AddRefed
<
CustomElementsRegistry
>
CustomElementsRegistry
:
:
Create
(
nsPIDOMWindowInner
*
aWindow
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aWindow
-
>
IsInnerWindow
(
)
)
;
if
(
!
aWindow
-
>
GetDocShell
(
)
)
{
return
nullptr
;
}
RefPtr
<
CustomElementsRegistry
>
customElementsRegistry
=
new
CustomElementsRegistry
(
aWindow
)
;
return
customElementsRegistry
.
forget
(
)
;
}
CustomElementsRegistry
:
:
CustomElementsRegistry
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
CustomElementsRegistry
:
:
~
CustomElementsRegistry
(
)
{
}
JSObject
*
CustomElementsRegistry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CustomElementsRegistryBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
CustomElementsRegistry
:
:
GetParentObject
(
)
const
{
return
mWindow
;
}
void
CustomElementsRegistry
:
:
Define
(
const
nsAString
&
aName
Function
&
aFunctionConstructor
const
ElementDefinitionOptions
&
aOptions
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CustomElementsRegistry
:
:
Get
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
already_AddRefed
<
Promise
>
CustomElementsRegistry
:
:
WhenDefined
(
const
nsAString
&
name
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
CustomElementDefinition
:
:
CustomElementDefinition
(
JSObject
*
aPrototype
nsIAtom
*
aType
nsIAtom
*
aLocalName
LifecycleCallbacks
*
aCallbacks
uint32_t
aNamespaceID
uint32_t
aDocOrder
)
:
mPrototype
(
aPrototype
)
mType
(
aType
)
mLocalName
(
aLocalName
)
mCallbacks
(
aCallbacks
)
mNamespaceID
(
aNamespaceID
)
mDocOrder
(
aDocOrder
)
{
}
}
}
