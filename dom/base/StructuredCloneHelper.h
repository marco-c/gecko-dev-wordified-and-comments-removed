#
ifndef
mozilla_dom_StructuredCloneHelper_h
#
define
mozilla_dom_StructuredCloneHelper_h
#
include
"
js
/
StructuredClone
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
StructuredCloneHelperInternal
{
public
:
virtual
JSObject
*
ReadCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
=
0
;
virtual
bool
WriteCallback
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
=
0
;
virtual
bool
ReadTransferCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
;
virtual
bool
WriteTransferCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
;
virtual
void
FreeTransferCallback
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
)
;
bool
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
protected
:
nsAutoPtr
<
JSAutoStructuredCloneBuffer
>
mBuffer
;
}
;
class
MessagePortBase
;
class
MessagePortIdentifier
;
class
StructuredCloneHelper
:
public
StructuredCloneHelperInternal
{
public
:
enum
StructuredCloneHelperFlags
{
eAll
=
0
eBlobNotSupported
=
1
<
<
0
eFileListNotSupported
=
1
<
<
1
eMessagePortNotSupported
=
1
<
<
2
}
;
explicit
StructuredCloneHelper
(
uint32_t
aFlags
=
eAll
)
;
virtual
~
StructuredCloneHelper
(
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
)
;
bool
Read
(
nsISupports
*
aParent
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
nsTArray
<
nsRefPtr
<
MessagePortBase
>
>
&
GetTransferredPorts
(
)
{
MOZ_ASSERT
(
!
(
mFlags
&
eMessagePortNotSupported
)
)
;
return
mTransferredPorts
;
}
virtual
JSObject
*
ReadCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
override
;
virtual
bool
WriteCallback
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
override
;
virtual
bool
ReadTransferCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
override
;
virtual
bool
WriteTransferCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
override
;
virtual
void
FreeTransferCallback
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
override
;
private
:
bool
StoreISupports
(
nsISupports
*
aSupports
)
{
MOZ_ASSERT
(
aSupports
)
;
mSupportsArray
.
AppendElement
(
aSupports
)
;
return
true
;
}
uint32_t
mFlags
;
nsTArray
<
nsCOMPtr
<
nsISupports
>
>
mSupportsArray
;
nsISupports
*
MOZ_NON_OWNING_REF
mParent
;
nsTArray
<
nsRefPtr
<
MessagePortBase
>
>
mTransferringPort
;
nsTArray
<
nsRefPtr
<
MessagePortBase
>
>
mTransferredPorts
;
nsTArray
<
MessagePortIdentifier
>
mPortIdentifiers
;
}
;
}
}
#
endif
