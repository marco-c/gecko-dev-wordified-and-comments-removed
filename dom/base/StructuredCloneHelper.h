#
ifndef
mozilla_dom_StructuredCloneHelper_h
#
define
mozilla_dom_StructuredCloneHelper_h
#
include
"
js
/
StructuredClone
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
layers
{
class
Image
;
}
namespace
dom
{
class
StructuredCloneHelperInternal
{
public
:
StructuredCloneHelperInternal
(
)
;
virtual
~
StructuredCloneHelperInternal
(
)
;
virtual
JSObject
*
ReadCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
=
0
;
virtual
bool
WriteCallback
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
=
0
;
void
Shutdown
(
)
;
virtual
bool
ReadTransferCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
;
virtual
bool
WriteTransferCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
;
virtual
void
FreeTransferCallback
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
bool
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
)
;
bool
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
bool
HasBeenWritten
(
)
const
{
return
!
!
mBuffer
;
}
uint64_t
*
BufferData
(
)
const
{
MOZ_ASSERT
(
mBuffer
"
Write
(
)
has
never
been
called
.
"
)
;
return
mBuffer
-
>
data
(
)
;
}
size_t
BufferSize
(
)
const
{
MOZ_ASSERT
(
mBuffer
"
Write
(
)
has
never
been
called
.
"
)
;
return
mBuffer
-
>
nbytes
(
)
;
}
protected
:
nsAutoPtr
<
JSAutoStructuredCloneBuffer
>
mBuffer
;
#
ifdef
DEBUG
bool
mShutdownCalled
;
#
endif
}
;
class
BlobImpl
;
class
MessagePortBase
;
class
MessagePortIdentifier
;
class
StructuredCloneHelper
:
public
StructuredCloneHelperInternal
{
public
:
enum
CloningSupport
{
CloningSupported
CloningNotSupported
}
;
enum
TransferringSupport
{
TransferringSupported
TransferringNotSupported
}
;
enum
ContextSupport
{
SameProcessSameThread
SameProcessDifferentThread
DifferentProcess
}
;
explicit
StructuredCloneHelper
(
CloningSupport
aSupportsCloning
TransferringSupport
aSupportsTransferring
ContextSupport
aContextSupport
)
;
virtual
~
StructuredCloneHelper
(
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JS
:
:
Value
>
aTransfer
ErrorResult
&
aRv
)
;
void
Read
(
nsISupports
*
aParent
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
MoveBufferDataToArray
(
FallibleTArray
<
uint8_t
>
&
aArray
ErrorResult
&
aRv
)
;
void
ReadFromBuffer
(
nsISupports
*
aParent
JSContext
*
aCx
uint64_t
*
aBuffer
size_t
aBufferLength
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
ReadFromBuffer
(
nsISupports
*
aParent
JSContext
*
aCx
uint64_t
*
aBuffer
size_t
aBufferLength
uint32_t
aAlgorithmVersion
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
FreeBuffer
(
uint64_t
*
aBuffer
size_t
aBufferLength
)
;
bool
HasClonedDOMObjects
(
)
const
{
return
!
mBlobImplArray
.
IsEmpty
(
)
|
|
!
mClonedImages
.
IsEmpty
(
)
;
}
nsTArray
<
nsRefPtr
<
BlobImpl
>
>
&
BlobImpls
(
)
{
MOZ_ASSERT
(
mSupportsCloning
"
Blobs
cannot
be
taken
/
set
if
cloning
is
not
supported
.
"
)
;
return
mBlobImplArray
;
}
nsISupports
*
ParentDuringRead
(
)
const
{
return
mParent
;
}
void
TakeTransferredPorts
(
nsTArray
<
nsRefPtr
<
MessagePortBase
>
>
&
aPorts
)
{
MOZ_ASSERT
(
mSupportsTransferring
)
;
MOZ_ASSERT
(
aPorts
.
IsEmpty
(
)
)
;
aPorts
.
SwapElements
(
mTransferredPorts
)
;
}
nsTArray
<
MessagePortIdentifier
>
&
PortIdentifiers
(
)
{
MOZ_ASSERT
(
mSupportsTransferring
)
;
return
mPortIdentifiers
;
}
nsTArray
<
nsRefPtr
<
layers
:
:
Image
>
>
&
GetImages
(
)
{
return
mClonedImages
;
}
virtual
JSObject
*
ReadCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
override
;
virtual
bool
WriteCallback
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
override
;
virtual
bool
ReadTransferCallback
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
void
*
aContent
uint64_t
aExtraData
JS
:
:
MutableHandleObject
aReturnObject
)
override
;
virtual
bool
WriteTransferCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
uint32_t
*
aTag
JS
:
:
TransferableOwnership
*
aOwnership
void
*
*
aContent
uint64_t
*
aExtraData
)
override
;
virtual
void
FreeTransferCallback
(
uint32_t
aTag
JS
:
:
TransferableOwnership
aOwnership
void
*
aContent
uint64_t
aExtraData
)
override
;
protected
:
bool
mSupportsCloning
;
bool
mSupportsTransferring
;
ContextSupport
mContext
;
nsTArray
<
nsRefPtr
<
BlobImpl
>
>
mBlobImplArray
;
nsTArray
<
nsRefPtr
<
layers
:
:
Image
>
>
mClonedImages
;
nsISupports
*
MOZ_NON_OWNING_REF
mParent
;
nsTArray
<
nsRefPtr
<
MessagePortBase
>
>
mTransferredPorts
;
nsTArray
<
MessagePortIdentifier
>
mPortIdentifiers
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIThread
>
mCreationThread
;
#
endif
}
;
}
}
#
endif
