#
include
"
ChromeUtils
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
namespace
mozilla
{
namespace
dom
{
void
ThreadSafeChromeUtils
:
:
NondeterministicGetWeakMapKeys
(
GlobalObject
&
aGlobal
JS
:
:
Handle
<
JS
:
:
Value
>
aMap
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aRv
)
{
if
(
!
aMap
.
isObject
(
)
)
{
aRetval
.
setUndefined
(
)
;
}
else
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
objRet
(
cx
)
;
JS
:
:
Rooted
<
JSObject
*
>
mapObj
(
cx
&
aMap
.
toObject
(
)
)
;
if
(
!
JS_NondeterministicGetWeakMapKeys
(
cx
mapObj
&
objRet
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
else
{
aRetval
.
set
(
objRet
?
JS
:
:
ObjectValue
(
*
objRet
)
:
JS
:
:
UndefinedValue
(
)
)
;
}
}
}
void
ThreadSafeChromeUtils
:
:
NondeterministicGetWeakSetKeys
(
GlobalObject
&
aGlobal
JS
:
:
Handle
<
JS
:
:
Value
>
aSet
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aRv
)
{
if
(
!
aSet
.
isObject
(
)
)
{
aRetval
.
setUndefined
(
)
;
}
else
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
objRet
(
cx
)
;
JS
:
:
Rooted
<
JSObject
*
>
setObj
(
cx
&
aSet
.
toObject
(
)
)
;
if
(
!
JS_NondeterministicGetWeakSetKeys
(
cx
setObj
&
objRet
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
else
{
aRetval
.
set
(
objRet
?
JS
:
:
ObjectValue
(
*
objRet
)
:
JS
:
:
UndefinedValue
(
)
)
;
}
}
}
void
ChromeUtils
:
:
OriginAttributesToSuffix
(
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
OriginAttributesDictionary
&
aAttrs
nsCString
&
aSuffix
)
{
GenericOriginAttributes
attrs
(
aAttrs
)
;
attrs
.
CreateSuffix
(
aSuffix
)
;
}
bool
ChromeUtils
:
:
OriginAttributesMatchPattern
(
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
OriginAttributesDictionary
&
aAttrs
const
dom
:
:
OriginAttributesPatternDictionary
&
aPattern
)
{
GenericOriginAttributes
attrs
(
aAttrs
)
;
OriginAttributesPattern
pattern
(
aPattern
)
;
return
pattern
.
Matches
(
attrs
)
;
}
void
ChromeUtils
:
:
CreateDefaultOriginAttributes
(
dom
:
:
GlobalObject
&
aGlobal
dom
:
:
OriginAttributesDictionary
&
aAttrs
)
{
aAttrs
=
GenericOriginAttributes
(
)
;
}
void
ChromeUtils
:
:
CreateOriginAttributesFromOrigin
(
dom
:
:
GlobalObject
&
aGlobal
const
nsAString
&
aOrigin
dom
:
:
OriginAttributesDictionary
&
aAttrs
ErrorResult
&
aRv
)
{
GenericOriginAttributes
attrs
;
nsAutoCString
suffix
;
if
(
!
attrs
.
PopulateFromOrigin
(
NS_ConvertUTF16toUTF8
(
aOrigin
)
suffix
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aAttrs
=
attrs
;
}
void
ChromeUtils
:
:
CreateOriginAttributesFromDict
(
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
OriginAttributesDictionary
&
aAttrs
dom
:
:
OriginAttributesDictionary
&
aNewAttrs
)
{
aNewAttrs
=
aAttrs
;
}
}
}
