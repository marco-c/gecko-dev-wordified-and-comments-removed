#
ifndef
NSOBJECTLOADINGCONTENT_H_
#
define
NSOBJECTLOADINGCONTENT_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsImageLoadingContent
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsIObjectLoadingContent
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
class
nsAsyncInstantiateEvent
;
class
nsStopPluginRunnable
;
class
AutoSetInstantiatingToFalse
;
class
nsIPrincipal
;
class
nsFrameLoader
;
class
nsPluginFrame
;
class
nsPluginInstanceOwner
;
namespace
mozilla
{
namespace
dom
{
template
<
typename
T
>
class
Sequence
;
struct
MozPluginParameter
;
class
HTMLIFrameElement
;
template
<
typename
T
>
struct
Nullable
;
class
WindowProxyHolder
;
class
XULFrameElement
;
}
}
class
nsObjectLoadingContent
:
public
nsImageLoadingContent
public
nsIStreamListener
public
nsFrameLoaderOwner
public
nsIObjectLoadingContent
public
nsIChannelEventSink
{
friend
class
AutoSetInstantiatingToFalse
;
friend
class
AutoSetLoadingToFalse
;
friend
class
CheckPluginStopEvent
;
friend
class
nsStopPluginRunnable
;
friend
class
nsAsyncInstantiateEvent
;
public
:
enum
ObjectType
{
eType_Loading
=
TYPE_LOADING
eType_Image
=
TYPE_IMAGE
eType_Plugin
=
TYPE_PLUGIN
eType_FakePlugin
=
TYPE_FAKE_PLUGIN
eType_Document
=
TYPE_DOCUMENT
eType_Null
=
TYPE_NULL
}
;
enum
FallbackType
{
eFallbackUnsupported
=
nsIObjectLoadingContent
:
:
PLUGIN_UNSUPPORTED
eFallbackAlternate
=
nsIObjectLoadingContent
:
:
PLUGIN_ALTERNATE
eFallbackDisabled
=
nsIObjectLoadingContent
:
:
PLUGIN_DISABLED
eFallbackBlocklisted
=
nsIObjectLoadingContent
:
:
PLUGIN_BLOCKLISTED
eFallbackOutdated
=
nsIObjectLoadingContent
:
:
PLUGIN_OUTDATED
eFallbackCrashed
=
nsIObjectLoadingContent
:
:
PLUGIN_CRASHED
eFallbackSuppressed
=
nsIObjectLoadingContent
:
:
PLUGIN_SUPPRESSED
eFallbackUserDisabled
=
nsIObjectLoadingContent
:
:
PLUGIN_USER_DISABLED
eFallbackClickToPlay
=
nsIObjectLoadingContent
:
:
PLUGIN_CLICK_TO_PLAY
eFallbackVulnerableUpdatable
=
nsIObjectLoadingContent
:
:
PLUGIN_VULNERABLE_UPDATABLE
eFallbackVulnerableNoUpdate
=
nsIObjectLoadingContent
:
:
PLUGIN_VULNERABLE_NO_UPDATE
eFallbackClickToPlayQuiet
=
nsIObjectLoadingContent
:
:
PLUGIN_CLICK_TO_PLAY_QUIET
}
;
nsObjectLoadingContent
(
)
;
virtual
~
nsObjectLoadingContent
(
)
;
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIOBJECTLOADINGCONTENT
NS_DECL_NSICHANNELEVENTSINK
mozilla
:
:
EventStates
ObjectState
(
)
const
;
ObjectType
Type
(
)
const
{
return
mType
;
}
void
SetIsNetworkCreated
(
bool
aNetworkCreated
)
{
mNetworkCreated
=
aNetworkCreated
;
}
void
GetPluginAttributes
(
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
&
aAttributes
)
;
void
GetPluginParameters
(
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
&
aParameters
)
;
nsresult
InstantiatePluginInstance
(
bool
aIsLoading
=
false
)
;
void
NotifyOwnerDocumentActivityChanged
(
)
;
void
SetupProtoChain
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
)
;
void
TeardownProtoChain
(
)
;
bool
DoResolve
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
;
static
bool
MayResolve
(
jsid
aId
)
;
void
GetOwnPropertyNames
(
JSContext
*
aCx
JS
:
:
AutoIdVector
&
bool
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
Document
*
GetContentDocument
(
nsIPrincipal
&
aSubjectPrincipal
)
;
void
GetActualType
(
nsAString
&
aType
)
const
{
CopyUTF8toUTF16
(
mContentType
aType
)
;
}
uint32_t
DisplayedType
(
)
const
{
return
mType
;
}
uint32_t
GetContentTypeForMIMEType
(
const
nsAString
&
aMIMEType
)
{
return
GetTypeOfContent
(
NS_ConvertUTF16toUTF8
(
aMIMEType
)
false
)
;
}
void
PlayPlugin
(
mozilla
:
:
dom
:
:
SystemCallerGuarantee
mozilla
:
:
ErrorResult
&
aRv
)
;
void
Reload
(
bool
aClearActivation
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
=
Reload
(
aClearActivation
)
;
}
bool
Activated
(
)
const
{
return
mActivated
;
}
nsIURI
*
GetSrcURI
(
)
const
{
return
mURI
;
}
uint32_t
DefaultFallbackType
(
)
;
uint32_t
PluginFallbackType
(
)
const
{
return
mFallbackType
;
}
bool
HasRunningPlugin
(
)
const
{
return
!
!
mInstanceOwner
;
}
void
SkipFakePlugins
(
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
=
SkipFakePlugins
(
)
;
}
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
HTMLIFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
XULFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
LegacyCall
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aThisVal
const
mozilla
:
:
dom
:
:
Sequence
<
JS
:
:
Value
>
&
aArguments
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
mozilla
:
:
ErrorResult
&
aRv
)
;
uint32_t
GetRunID
(
mozilla
:
:
dom
:
:
SystemCallerGuarantee
mozilla
:
:
ErrorResult
&
aRv
)
;
bool
IsRewrittenYoutubeEmbed
(
)
const
{
return
mRewrittenYoutubeEmbed
;
}
void
PresetOpenerWindow
(
const
mozilla
:
:
dom
:
:
Nullable
<
mozilla
:
:
dom
:
:
WindowProxyHolder
>
&
aOpenerWindow
mozilla
:
:
ErrorResult
&
aRv
)
;
protected
:
nsresult
LoadObject
(
bool
aNotify
bool
aForceLoad
=
false
)
;
enum
Capabilities
{
eSupportImages
=
1u
<
<
0
eSupportPlugins
=
1u
<
<
1
eSupportDocuments
=
1u
<
<
2
eFallbackIfClassIDPresent
=
1u
<
<
3
eAllowPluginSkipChannel
=
1u
<
<
4
}
;
virtual
uint32_t
GetCapabilities
(
)
const
;
void
DestroyContent
(
)
;
static
void
Traverse
(
nsObjectLoadingContent
*
tmp
nsCycleCollectionTraversalCallback
&
cb
)
;
void
CreateStaticClone
(
nsObjectLoadingContent
*
aDest
)
const
;
void
DoStopPlugin
(
nsPluginInstanceOwner
*
aInstanceOwner
)
;
nsresult
BindToTree
(
mozilla
:
:
dom
:
:
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
;
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
;
virtual
nsContentPolicyType
GetContentPolicyType
(
)
const
=
0
;
bool
BlockEmbedOrObjectContentLoading
(
)
;
private
:
enum
ParameterUpdateFlags
{
eParamNoChange
=
0
eParamChannelChanged
=
1u
<
<
0
eParamStateChanged
=
1u
<
<
1
eParamContentTypeChanged
=
1u
<
<
2
}
;
void
GetNestedParams
(
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
&
aParameters
)
;
MOZ_MUST_USE
nsresult
BuildParametersArray
(
)
;
void
LoadFallback
(
FallbackType
aType
bool
aNotify
)
;
nsresult
LoadObject
(
bool
aNotify
bool
aForceLoad
nsIRequest
*
aLoadingChannel
)
;
ParameterUpdateFlags
UpdateObjectParameters
(
)
;
void
QueueCheckPluginStopEvent
(
)
;
void
NotifyContentObjectWrapper
(
)
;
nsresult
OpenChannel
(
)
;
nsresult
CloseChannel
(
)
;
bool
ShouldBlockContent
(
)
;
bool
ShouldPlay
(
FallbackType
&
aReason
)
;
bool
FavorFallbackMode
(
bool
aIsPluginClickToPlay
)
;
bool
HasGoodFallback
(
)
;
bool
PreferFallback
(
bool
aIsPluginClickToPlay
)
;
bool
CheckLoadPolicy
(
int16_t
*
aContentPolicy
)
;
bool
CheckProcessPolicy
(
int16_t
*
aContentPolicy
)
;
bool
MakePluginListener
(
)
;
void
SetupFrameLoader
(
int32_t
aJSPluginId
)
;
already_AddRefed
<
nsIDocShell
>
SetupDocShell
(
nsIURI
*
aRecursionCheckURI
)
;
void
UnloadObject
(
bool
aResetState
=
true
)
;
void
NotifyStateChanged
(
ObjectType
aOldType
mozilla
:
:
EventStates
aOldState
bool
aSync
bool
aNotify
)
;
ObjectType
GetTypeOfContent
(
const
nsCString
&
aMIMEType
bool
aNoFakePlugin
)
;
nsPluginFrame
*
GetExistingFrame
(
)
;
void
MaybeRewriteYoutubeEmbed
(
nsIURI
*
aURI
nsIURI
*
aBaseURI
nsIURI
*
*
aRewrittenURI
)
;
class
SetupProtoChainRunner
final
:
public
nsIRunnable
{
~
SetupProtoChainRunner
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS
explicit
SetupProtoChainRunner
(
nsObjectLoadingContent
*
aContent
)
;
NS_IMETHOD
Run
(
)
override
;
private
:
RefPtr
<
nsIObjectLoadingContent
>
mContent
;
}
;
nsNPAPIPluginInstance
*
ScriptRequestPluginInstance
(
JSContext
*
aCx
)
;
static
nsresult
GetPluginJSObject
(
JSContext
*
cx
nsNPAPIPluginInstance
*
plugin_inst
JS
:
:
MutableHandle
<
JSObject
*
>
plugin_obj
JS
:
:
MutableHandle
<
JSObject
*
>
plugin_proto
)
;
void
MaybeFireErrorEvent
(
)
;
nsCOMPtr
<
nsIStreamListener
>
mFinalListener
;
nsCOMPtr
<
nsIRunnable
>
mPendingInstantiateEvent
;
nsCOMPtr
<
nsIRunnable
>
mPendingCheckPluginStopEvent
;
nsCString
mContentType
;
nsCString
mOriginalContentType
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
ObjectType
mType
:
8
;
FallbackType
mFallbackType
:
8
;
uint32_t
mRunID
;
bool
mHasRunID
:
1
;
bool
mChannelLoaded
:
1
;
bool
mInstantiating
:
1
;
bool
mNetworkCreated
:
1
;
bool
mActivated
:
1
;
bool
mContentBlockingEnabled
:
1
;
bool
mSkipFakePlugins
:
1
;
bool
mIsStopping
:
1
;
bool
mIsLoading
:
1
;
bool
mScriptRequested
:
1
;
bool
mRewrittenYoutubeEmbed
:
1
;
bool
mPreferFallback
:
1
;
bool
mPreferFallbackKnown
:
1
;
WeakFrame
mPrintFrame
;
RefPtr
<
nsPluginInstanceOwner
>
mInstanceOwner
;
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
mCachedAttributes
;
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
mCachedParameters
;
}
;
#
endif
