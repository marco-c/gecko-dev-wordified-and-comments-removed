#
ifndef
NSOBJECTLOADINGCONTENT_H_
#
define
NSOBJECTLOADINGCONTENT_H_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIObjectLoadingContent
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
class
nsStopPluginRunnable
;
class
nsIPrincipal
;
class
nsFrameLoader
;
namespace
mozilla
:
:
dom
{
struct
BindContext
;
template
<
typename
T
>
class
Sequence
;
class
HTMLIFrameElement
;
template
<
typename
T
>
struct
Nullable
;
class
WindowProxyHolder
;
class
XULFrameElement
;
}
class
nsObjectLoadingContent
:
public
nsIStreamListener
public
nsFrameLoaderOwner
public
nsIObjectLoadingContent
public
nsIChannelEventSink
{
friend
class
AutoSetLoadingToFalse
;
public
:
enum
ObjectType
{
eType_Loading
=
TYPE_LOADING
eType_Fallback
=
TYPE_FALLBACK
eType_Document
=
TYPE_DOCUMENT
eType_Null
=
TYPE_NULL
}
;
nsObjectLoadingContent
(
)
;
virtual
~
nsObjectLoadingContent
(
)
;
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIOBJECTLOADINGCONTENT
NS_DECL_NSICHANNELEVENTSINK
ObjectType
Type
(
)
const
{
return
mType
;
}
void
SetIsNetworkCreated
(
bool
aNetworkCreated
)
{
mNetworkCreated
=
aNetworkCreated
;
}
bool
DoResolve
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObject
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
aDesc
)
;
static
bool
MayResolve
(
jsid
aId
)
;
static
bool
IsSuccessfulRequest
(
nsIRequest
*
nsresult
*
aStatus
)
;
void
GetOwnPropertyNames
(
JSContext
*
aCx
JS
:
:
MutableHandleVector
<
jsid
>
bool
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
Document
*
GetContentDocument
(
nsIPrincipal
&
aSubjectPrincipal
)
;
void
GetActualType
(
nsAString
&
aType
)
const
{
CopyUTF8toUTF16
(
mContentType
aType
)
;
}
uint32_t
DisplayedType
(
)
const
{
return
mType
;
}
void
Reload
(
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
=
Reload
(
)
;
}
nsIURI
*
GetSrcURI
(
)
const
{
return
mURI
;
}
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
HTMLIFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
XULFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
uint32_t
GetRunID
(
mozilla
:
:
dom
:
:
SystemCallerGuarantee
mozilla
:
:
ErrorResult
&
aRv
)
;
bool
IsRewrittenYoutubeEmbed
(
)
const
{
return
mRewrittenYoutubeEmbed
;
}
void
PresetOpenerWindow
(
const
mozilla
:
:
dom
:
:
Nullable
<
mozilla
:
:
dom
:
:
WindowProxyHolder
>
&
aOpenerWindow
mozilla
:
:
ErrorResult
&
aRv
)
;
const
mozilla
:
:
Maybe
<
mozilla
:
:
IntrinsicSize
>
&
GetSubdocumentIntrinsicSize
(
)
const
{
return
mSubdocumentIntrinsicSize
;
}
const
mozilla
:
:
Maybe
<
mozilla
:
:
AspectRatio
>
&
GetSubdocumentIntrinsicRatio
(
)
const
{
return
mSubdocumentIntrinsicRatio
;
}
void
SubdocumentIntrinsicSizeOrRatioChanged
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
IntrinsicSize
>
&
aIntrinsicSize
const
mozilla
:
:
Maybe
<
mozilla
:
:
AspectRatio
>
&
aIntrinsicRatio
)
;
void
SubdocumentImageLoadComplete
(
nsresult
aResult
)
;
protected
:
nsresult
LoadObject
(
bool
aNotify
bool
aForceLoad
=
false
)
;
enum
Capabilities
{
eSupportImages
=
1u
<
<
0
eSupportPlugins
=
1u
<
<
1
eSupportDocuments
=
1u
<
<
2
eFallbackIfClassIDPresent
=
1u
<
<
3
eAllowPluginSkipChannel
=
1u
<
<
4
}
;
virtual
uint32_t
GetCapabilities
(
)
const
;
void
Destroy
(
)
;
static
void
Traverse
(
nsObjectLoadingContent
*
tmp
nsCycleCollectionTraversalCallback
&
cb
)
;
static
void
Unlink
(
nsObjectLoadingContent
*
tmp
)
;
void
CreateStaticClone
(
nsObjectLoadingContent
*
aDest
)
const
;
void
UnbindFromTree
(
bool
aNullParent
=
true
)
;
virtual
nsContentPolicyType
GetContentPolicyType
(
)
const
=
0
;
virtual
const
mozilla
:
:
dom
:
:
Element
*
AsElement
(
)
const
=
0
;
mozilla
:
:
dom
:
:
Element
*
AsElement
(
)
{
return
const_cast
<
mozilla
:
:
dom
:
:
Element
*
>
(
const_cast
<
const
nsObjectLoadingContent
*
>
(
this
)
-
>
AsElement
(
)
)
;
}
bool
BlockEmbedOrObjectContentLoading
(
)
;
private
:
enum
ParameterUpdateFlags
{
eParamNoChange
=
0
eParamChannelChanged
=
1u
<
<
0
eParamStateChanged
=
1u
<
<
1
eParamContentTypeChanged
=
1u
<
<
2
}
;
void
ConfigureFallback
(
)
;
nsresult
LoadObject
(
bool
aNotify
bool
aForceLoad
nsIRequest
*
aLoadingChannel
)
;
ParameterUpdateFlags
UpdateObjectParameters
(
)
;
public
:
bool
IsAboutBlankLoadOntoInitialAboutBlank
(
nsIURI
*
aURI
bool
aInheritPrincipal
nsIPrincipal
*
aPrincipalToInherit
)
;
private
:
nsresult
OpenChannel
(
)
;
nsresult
CloseChannel
(
)
;
bool
ShouldBlockContent
(
)
;
bool
PreferFallback
(
bool
aIsPluginClickToPlay
)
;
bool
CheckLoadPolicy
(
int16_t
*
aContentPolicy
)
;
bool
CheckProcessPolicy
(
int16_t
*
aContentPolicy
)
;
void
SetupFrameLoader
(
)
;
already_AddRefed
<
nsIDocShell
>
SetupDocShell
(
nsIURI
*
aRecursionCheckURI
)
;
void
UnloadObject
(
bool
aResetState
=
true
)
;
void
NotifyStateChanged
(
ObjectType
aOldType
bool
aNotify
)
;
ObjectType
GetTypeOfContent
(
const
nsCString
&
aMIMEType
)
;
void
MaybeRewriteYoutubeEmbed
(
nsIURI
*
aURI
nsIURI
*
aBaseURI
nsIURI
*
*
aRewrittenURI
)
;
void
MaybeFireErrorEvent
(
)
;
void
MaybeStoreCrossOriginFeaturePolicy
(
)
;
nsCOMPtr
<
nsIStreamListener
>
mFinalListener
;
nsCString
mContentType
;
nsCString
mOriginalContentType
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
ObjectType
mType
:
8
;
uint32_t
mRunID
;
bool
mHasRunID
:
1
;
bool
mChannelLoaded
:
1
;
bool
mNetworkCreated
:
1
;
bool
mContentBlockingEnabled
:
1
;
bool
mIsStopping
:
1
;
bool
mIsLoading
:
1
;
bool
mScriptRequested
:
1
;
bool
mRewrittenYoutubeEmbed
:
1
;
bool
mLoadingSyntheticDocument
:
1
;
mozilla
:
:
Maybe
<
mozilla
:
:
IntrinsicSize
>
mSubdocumentIntrinsicSize
;
mozilla
:
:
Maybe
<
mozilla
:
:
AspectRatio
>
mSubdocumentIntrinsicRatio
;
}
;
#
endif
