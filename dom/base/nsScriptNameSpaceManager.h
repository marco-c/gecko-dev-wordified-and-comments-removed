#
ifndef
nsScriptNameSpaceManager_h__
#
define
nsScriptNameSpaceManager_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsBaseHashtable
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIScriptNameSpaceManager
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsID
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
nsDOMClassInfo
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
xpcpublic
.
h
"
struct
nsGlobalNameStruct
{
enum
nametype
{
eTypeNotInitialized
eTypeProperty
eTypeExternalConstructor
eTypeClassConstructor
eTypeClassProto
}
mType
;
bool
mChromeOnly
:
1
;
bool
mAllowXBL
:
1
;
union
{
int32_t
mDOMClassInfoID
;
nsIID
mIID
;
nsCID
mCID
;
}
;
}
;
class
GlobalNameMapEntry
:
public
PLDHashEntryHdr
{
public
:
nsString
mKey
;
nsGlobalNameStruct
mGlobalName
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mKey
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
}
}
;
class
nsICategoryManager
;
class
nsScriptNameSpaceManager
:
public
nsIObserver
public
nsSupportsWeakReference
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIMEMORYREPORTER
nsScriptNameSpaceManager
(
)
;
nsresult
Init
(
)
;
const
nsGlobalNameStruct
*
LookupName
(
const
nsAString
&
aName
const
char16_t
*
*
aClassName
=
nullptr
)
;
nsresult
RegisterClassName
(
const
char
*
aClassName
int32_t
aDOMClassInfoID
bool
aPrivileged
bool
aXBLAllowed
const
char16_t
*
*
aResult
)
;
nsresult
RegisterClassProto
(
const
char
*
aClassName
const
nsIID
*
aConstructorProtoIID
bool
*
aFoundOld
)
;
class
NameIterator
:
public
PLDHashTable
:
:
Iterator
{
public
:
typedef
PLDHashTable
:
:
Iterator
Base
;
explicit
NameIterator
(
PLDHashTable
*
aTable
)
:
Base
(
aTable
)
{
}
NameIterator
(
NameIterator
&
&
aOther
)
:
Base
(
mozilla
:
:
Move
(
aOther
.
mTable
)
)
{
}
const
GlobalNameMapEntry
*
Get
(
)
const
{
return
static_cast
<
const
GlobalNameMapEntry
*
>
(
Base
:
:
Get
(
)
)
;
}
private
:
NameIterator
(
)
=
delete
;
NameIterator
(
const
NameIterator
&
)
=
delete
;
NameIterator
&
operator
=
(
const
NameIterator
&
)
=
delete
;
NameIterator
&
operator
=
(
const
NameIterator
&
&
)
=
delete
;
}
;
NameIterator
GlobalNameIter
(
)
{
return
NameIterator
(
&
mGlobalNames
)
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
virtual
~
nsScriptNameSpaceManager
(
)
;
nsGlobalNameStruct
*
AddToHash
(
const
char
*
aKey
const
char16_t
*
*
aClassName
=
nullptr
)
;
void
RemoveFromHash
(
const
nsAString
*
aKey
)
;
nsresult
FillHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
)
;
nsresult
AddCategoryEntryToHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
)
;
nsresult
RemoveCategoryEntryFromHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
)
;
nsresult
OperateCategoryEntryHash
(
nsICategoryManager
*
aCategoryManager
const
char
*
aCategory
nsISupports
*
aEntry
bool
aRemove
)
;
PLDHashTable
mGlobalNames
;
}
;
#
endif
