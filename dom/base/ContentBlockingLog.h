#
ifndef
mozilla_dom_ContentBlockingLog_h
#
define
mozilla_dom_ContentBlockingLog_h
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
mozilla
/
Pair
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ContentBlockingLog
final
{
typedef
nsTArray
<
mozilla
:
:
Pair
<
uint32_t
bool
>
>
OriginLog
;
struct
StringWriteFunc
:
public
JSONWriteFunc
{
nsAString
&
mBuffer
;
explicit
StringWriteFunc
(
nsAString
&
aBuffer
)
:
mBuffer
(
aBuffer
)
{
}
void
Write
(
const
char
*
aStr
)
override
{
mBuffer
.
Append
(
NS_ConvertUTF8toUTF16
(
aStr
)
)
;
}
}
;
public
:
ContentBlockingLog
(
)
=
default
;
~
ContentBlockingLog
(
)
=
default
;
void
RecordLog
(
const
nsAString
&
aOrigin
uint32_t
aType
bool
aBlocked
)
{
if
(
aOrigin
.
IsVoid
(
)
)
{
return
;
}
auto
entry
=
mLog
.
LookupForAdd
(
aOrigin
)
;
if
(
entry
)
{
entry
.
Data
(
)
-
>
AppendElement
(
mozilla
:
:
MakePair
(
aType
aBlocked
)
)
;
}
else
{
entry
.
OrInsert
(
[
=
]
{
auto
log
(
MakeUnique
<
OriginLog
>
(
)
)
;
log
-
>
AppendElement
(
mozilla
:
:
MakePair
(
aType
aBlocked
)
)
;
return
log
.
release
(
)
;
}
)
;
}
}
nsAutoString
Stringify
(
)
{
nsAutoString
buffer
;
JSONWriter
w
(
MakeUnique
<
StringWriteFunc
>
(
buffer
)
)
;
w
.
Start
(
)
;
for
(
auto
iter
=
mLog
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
!
iter
.
UserData
(
)
)
{
w
.
StartArrayProperty
(
NS_ConvertUTF16toUTF8
(
iter
.
Key
(
)
)
.
get
(
)
w
.
SingleLineStyle
)
;
w
.
EndArray
(
)
;
continue
;
}
w
.
StartArrayProperty
(
NS_ConvertUTF16toUTF8
(
iter
.
Key
(
)
)
.
get
(
)
w
.
SingleLineStyle
)
;
for
(
auto
&
item
:
*
iter
.
UserData
(
)
)
{
w
.
StartArrayElement
(
w
.
SingleLineStyle
)
;
{
w
.
IntElement
(
item
.
first
(
)
)
;
w
.
BoolElement
(
item
.
second
(
)
)
;
}
w
.
EndArray
(
)
;
}
w
.
EndArray
(
)
;
}
w
.
End
(
)
;
return
buffer
;
}
private
:
nsClassHashtable
<
nsStringHashKey
OriginLog
>
mLog
;
}
;
}
}
#
endif
