const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
const
BASE_PREF
=
"
dom
.
ipc
.
processCount
"
const
PREF_BRANCH
=
BASE_PREF
+
"
.
"
;
function
getMaxContentParents
(
processType
)
{
let
maxContentParents
=
-
1
;
try
{
maxContentParents
=
Services
.
prefs
.
getIntPref
(
PREF_BRANCH
+
aType
)
;
}
catch
(
e
)
{
try
{
maxContentParents
=
Services
.
prefs
.
getIntPref
(
BASE_PREF
)
;
}
catch
(
e
)
{
maxContentParents
=
1
;
}
}
return
maxContentParents
;
}
function
RandomSelector
(
)
{
}
RandomSelector
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
c616fcfd
-
9737
-
41f1
-
aa74
-
cee72a38f91b
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIContentProcessProvider
]
)
provideProcess
(
aType
aOpener
aProcesses
aCount
)
{
let
maxContentParents
=
getMaxContentParents
(
)
;
if
(
aCount
<
maxContentParents
)
{
return
Ci
.
nsIContentProcessProvider
.
NEW_PROCESS
;
}
let
startIdx
=
Math
.
floor
(
Math
.
random
(
)
*
maxContentParents
)
;
let
curIdx
=
startIdx
;
do
{
if
(
aProcesses
[
curIdx
]
.
opener
=
=
=
aOpener
)
{
return
curIdx
;
}
curIdx
=
(
curIdx
+
1
)
%
maxContentParents
;
}
while
(
curIdx
!
=
=
startIdx
)
;
return
Ci
.
nsIContentProcessProvider
.
NEW_PROCESS
;
}
}
;
var
components
=
[
RandomSelector
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
components
)
;
