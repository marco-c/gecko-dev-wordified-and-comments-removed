#
include
"
mozilla
/
dom
/
CompressionStream
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
CompressionStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
#
include
"
mozilla
/
dom
/
WritableStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
TextDecoderStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
ZLibHelper
.
h
"
namespace
mozilla
:
:
dom
{
class
CompressionStreamAlgorithms
:
public
TransformerAlgorithmsWrapper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CompressionStreamAlgorithms
TransformerAlgorithmsBase
)
explicit
CompressionStreamAlgorithms
(
CompressionFormat
format
)
{
int8_t
err
=
deflateInit2
(
&
mZStream
Z_DEFAULT_COMPRESSION
Z_DEFLATED
ZLibWindowBits
(
format
)
8
Z_DEFAULT_STRATEGY
)
;
if
(
err
=
=
Z_MEM_ERROR
)
{
MOZ_CRASH
(
"
Out
of
memory
"
)
;
}
MOZ_ASSERT
(
err
=
=
Z_OK
)
;
}
MOZ_CAN_RUN_SCRIPT
void
TransformCallbackImpl
(
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
Span
<
const
uint8_t
>
input
=
ExtractSpanFromBufferSource
(
cx
aChunk
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
CompressAndEnqueue
(
cx
input
ZLibFlush
:
:
No
aController
aRv
)
;
}
MOZ_CAN_RUN_SCRIPT
void
FlushCallbackImpl
(
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
CompressAndEnqueue
(
cx
Span
<
const
uint8_t
>
(
)
ZLibFlush
:
:
Yes
aController
aRv
)
;
}
private
:
MOZ_CAN_RUN_SCRIPT
void
CompressAndEnqueue
(
JSContext
*
aCx
Span
<
const
uint8_t
>
aInput
ZLibFlush
aFlush
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
MOZ_ASSERT_IF
(
aFlush
=
=
ZLibFlush
:
:
Yes
!
aInput
.
Length
(
)
)
;
mZStream
.
avail_in
=
aInput
.
Length
(
)
;
mZStream
.
next_in
=
const_cast
<
uint8_t
*
>
(
aInput
.
Elements
(
)
)
;
JS
:
:
RootedVector
<
JSObject
*
>
array
(
aCx
)
;
do
{
static
uint16_t
kBufferSize
=
16384
;
UniquePtr
<
uint8_t
>
buffer
(
static_cast
<
uint8_t
*
>
(
JS_malloc
(
aCx
kBufferSize
)
)
)
;
if
(
!
buffer
)
{
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
mZStream
.
avail_out
=
kBufferSize
;
mZStream
.
next_out
=
buffer
.
get
(
)
;
int8_t
err
=
deflate
(
&
mZStream
aFlush
)
;
switch
(
err
)
{
case
Z_OK
:
case
Z_STREAM_END
:
case
Z_BUF_ERROR
:
break
;
case
Z_STREAM_ERROR
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
compression
error
code
"
)
;
aRv
.
ThrowTypeError
(
"
Unexpected
compression
error
"
)
;
return
;
}
MOZ_ASSERT_IF
(
err
=
=
Z_STREAM_END
aFlush
=
=
ZLibFlush
:
:
Yes
)
;
MOZ_ASSERT_IF
(
aFlush
=
=
ZLibFlush
:
:
Yes
err
=
=
Z_STREAM_END
)
;
MOZ_ASSERT
(
!
mZStream
.
avail_in
|
|
!
mZStream
.
avail_out
)
;
size_t
written
=
kBufferSize
-
mZStream
.
avail_out
;
if
(
!
written
)
{
break
;
}
JS
:
:
Rooted
<
JSObject
*
>
view
(
aCx
nsJSUtils
:
:
MoveBufferAsUint8Array
(
aCx
written
buffer
)
)
;
if
(
!
view
|
|
!
array
.
append
(
view
)
)
{
JS_ClearPendingException
(
aCx
)
;
aRv
.
ThrowTypeError
(
"
Out
of
memory
"
)
;
return
;
}
}
while
(
mZStream
.
avail_out
=
=
0
)
;
for
(
const
auto
&
view
:
array
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
JS
:
:
ObjectValue
(
*
view
)
)
;
aController
.
Enqueue
(
aCx
value
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
}
~
CompressionStreamAlgorithms
(
)
override
{
deflateEnd
(
&
mZStream
)
;
}
;
z_stream
mZStream
=
{
}
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
CompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_IMPL_ADDREF_INHERITED
(
CompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_IMPL_RELEASE_INHERITED
(
CompressionStreamAlgorithms
TransformerAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CompressionStreamAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
TransformerAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CompressionStream
mGlobal
mStream
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CompressionStream
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CompressionStream
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CompressionStream
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
CompressionStream
:
:
CompressionStream
(
nsISupports
*
aGlobal
TransformStream
&
aStream
)
:
mGlobal
(
aGlobal
)
mStream
(
&
aStream
)
{
}
CompressionStream
:
:
~
CompressionStream
(
)
=
default
;
JSObject
*
CompressionStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CompressionStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CompressionStream
>
CompressionStream
:
:
Constructor
(
const
GlobalObject
&
aGlobal
CompressionFormat
aFormat
ErrorResult
&
aRv
)
{
auto
algorithms
=
MakeRefPtr
<
CompressionStreamAlgorithms
>
(
aFormat
)
;
RefPtr
<
TransformStream
>
stream
=
TransformStream
:
:
CreateGeneric
(
aGlobal
*
algorithms
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
do_AddRef
(
new
CompressionStream
(
aGlobal
.
GetAsSupports
(
)
*
stream
)
)
;
}
already_AddRefed
<
ReadableStream
>
CompressionStream
:
:
Readable
(
)
const
{
return
do_AddRef
(
mStream
-
>
Readable
(
)
)
;
}
already_AddRefed
<
WritableStream
>
CompressionStream
:
:
Writable
(
)
const
{
return
do_AddRef
(
mStream
-
>
Writable
(
)
)
;
}
}
