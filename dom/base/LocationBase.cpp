#
include
"
mozilla
/
dom
/
LocationBase
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
namespace
mozilla
{
namespace
dom
{
already_AddRefed
<
nsDocShellLoadState
>
LocationBase
:
:
CheckURL
(
nsIURI
*
aURI
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
RefPtr
<
BrowsingContext
>
bc
(
GetBrowsingContext
(
)
)
;
if
(
NS_WARN_IF
(
!
bc
)
)
{
aRv
.
Throw
(
NS_ERROR_NOT_AVAILABLE
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
;
nsCOMPtr
<
nsIURI
>
sourceURI
;
ReferrerPolicy
referrerPolicy
=
ReferrerPolicy
:
:
_empty
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
if
(
NS_WARN_IF
(
!
ssm
)
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
nsresult
rv
=
ssm
-
>
CheckLoadURIWithPrincipal
(
&
aSubjectPrincipal
aURI
nsIScriptSecurityManager
:
:
STANDARD
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
aRv
.
ThrowTypeError
<
MSG_URL_NOT_LOADABLE
>
(
NS_ConvertUTF8toUTF16
(
spec
)
)
;
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
incumbent
=
do_QueryInterface
(
mozilla
:
:
dom
:
:
GetIncumbentGlobal
(
)
)
;
nsCOMPtr
<
Document
>
doc
=
incumbent
?
incumbent
-
>
GetDoc
(
)
:
nullptr
;
if
(
doc
)
{
nsCOMPtr
<
nsIURI
>
docOriginalURI
docCurrentURI
principalURI
;
docOriginalURI
=
doc
-
>
GetOriginalURI
(
)
;
docCurrentURI
=
doc
-
>
GetDocumentURI
(
)
;
rv
=
doc
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
principalURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
triggeringPrincipal
=
doc
-
>
NodePrincipal
(
)
;
referrerPolicy
=
doc
-
>
GetReferrerPolicy
(
)
;
bool
urisEqual
=
false
;
if
(
docOriginalURI
&
&
docCurrentURI
&
&
principalURI
)
{
principalURI
-
>
Equals
(
docOriginalURI
&
urisEqual
)
;
}
if
(
urisEqual
)
{
sourceURI
=
docCurrentURI
;
}
else
{
if
(
principalURI
&
&
!
principalURI
-
>
SchemeIs
(
NS_NULLPRINCIPAL_SCHEME
)
)
{
sourceURI
=
principalURI
;
}
}
}
else
{
triggeringPrincipal
=
&
aSubjectPrincipal
;
}
RefPtr
<
nsDocShellLoadState
>
loadState
=
new
nsDocShellLoadState
(
aURI
)
;
loadState
-
>
SetTriggeringPrincipal
(
triggeringPrincipal
)
;
if
(
doc
)
{
loadState
-
>
SetCsp
(
doc
-
>
GetCsp
(
)
)
;
}
if
(
sourceURI
)
{
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
=
new
ReferrerInfo
(
sourceURI
referrerPolicy
)
;
loadState
-
>
SetReferrerInfo
(
referrerInfo
)
;
}
return
loadState
.
forget
(
)
;
}
void
LocationBase
:
:
SetURI
(
nsIURI
*
aURI
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
bool
aReplace
)
{
RefPtr
<
BrowsingContext
>
bc
=
GetBrowsingContext
(
)
;
if
(
bc
&
&
!
bc
-
>
IsDiscarded
(
)
)
{
RefPtr
<
nsDocShellLoadState
>
loadState
=
CheckURL
(
aURI
aSubjectPrincipal
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
if
(
aReplace
)
{
loadState
-
>
SetLoadType
(
LOAD_STOP_CONTENT_AND_REPLACE
)
;
}
else
{
loadState
-
>
SetLoadType
(
LOAD_STOP_CONTENT
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
sourceWindow
=
nsContentUtils
:
:
CallerInnerWindow
(
)
;
RefPtr
<
BrowsingContext
>
accessingBC
;
if
(
sourceWindow
)
{
accessingBC
=
sourceWindow
-
>
GetBrowsingContext
(
)
;
loadState
-
>
SetSourceDocShell
(
sourceWindow
-
>
GetDocShell
(
)
)
;
}
loadState
-
>
SetLoadFlags
(
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
)
;
loadState
-
>
SetFirstParty
(
true
)
;
nsresult
rv
=
bc
-
>
LoadURI
(
accessingBC
loadState
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
}
void
LocationBase
:
:
SetHref
(
const
nsAString
&
aHref
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
DoSetHref
(
aHref
aSubjectPrincipal
false
aRv
)
;
}
void
LocationBase
:
:
DoSetHref
(
const
nsAString
&
aHref
nsIPrincipal
&
aSubjectPrincipal
bool
aReplace
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIURI
>
base
=
GetSourceBaseURL
(
)
;
SetHrefWithBase
(
aHref
base
aSubjectPrincipal
aReplace
aRv
)
;
}
void
LocationBase
:
:
SetHrefWithBase
(
const
nsAString
&
aHref
nsIURI
*
aBase
nsIPrincipal
&
aSubjectPrincipal
bool
aReplace
ErrorResult
&
aRv
)
{
nsresult
result
;
nsCOMPtr
<
nsIURI
>
newUri
;
if
(
Document
*
doc
=
GetEntryDocument
(
)
)
{
result
=
NS_NewURI
(
getter_AddRefs
(
newUri
)
aHref
doc
-
>
GetDocumentCharacterSet
(
)
aBase
)
;
}
else
{
result
=
NS_NewURI
(
getter_AddRefs
(
newUri
)
aHref
nullptr
aBase
)
;
}
if
(
newUri
)
{
bool
inScriptTag
=
false
;
nsIScriptContext
*
scriptContext
=
nullptr
;
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
if
(
win
)
{
scriptContext
=
nsGlobalWindowInner
:
:
Cast
(
win
)
-
>
GetContextInternal
(
)
;
}
if
(
scriptContext
)
{
if
(
scriptContext
-
>
GetProcessingScriptTag
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
GetDocShell
(
)
)
;
nsCOMPtr
<
nsIScriptGlobalObject
>
ourGlobal
=
docShell
?
docShell
-
>
GetScriptGlobalObject
(
)
:
nullptr
;
inScriptTag
=
(
ourGlobal
=
=
scriptContext
-
>
GetGlobalObject
(
)
)
;
}
}
SetURI
(
newUri
aSubjectPrincipal
aRv
aReplace
|
|
inScriptTag
)
;
return
;
}
aRv
.
Throw
(
result
)
;
}
void
LocationBase
:
:
Replace
(
const
nsAString
&
aUrl
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
DoSetHref
(
aUrl
aSubjectPrincipal
true
aRv
)
;
}
nsIURI
*
LocationBase
:
:
GetSourceBaseURL
(
)
{
Document
*
doc
=
GetEntryDocument
(
)
;
if
(
!
doc
)
{
if
(
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
docShellWin
=
do_QueryInterface
(
docShell
-
>
GetScriptGlobalObject
(
)
)
;
if
(
docShellWin
)
{
doc
=
docShellWin
-
>
GetDoc
(
)
;
}
}
}
return
doc
?
doc
-
>
GetBaseURI
(
)
:
nullptr
;
}
}
}
