#
include
"
mozilla
/
dom
/
LocationBase
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsIClassifiedChannel
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
namespace
mozilla
:
:
dom
{
void
LocationBase
:
:
SetURI
(
nsIURI
*
aURI
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
bool
aReplace
)
{
RefPtr
<
BrowsingContext
>
bc
=
GetBrowsingContext
(
)
;
if
(
!
bc
|
|
bc
-
>
IsDiscarded
(
)
)
{
return
;
}
bc
-
>
Navigate
(
aURI
aSubjectPrincipal
aRv
aReplace
?
NavigationHistoryBehavior
:
:
Replace
:
NavigationHistoryBehavior
:
:
Push
)
;
}
void
LocationBase
:
:
SetHref
(
const
nsACString
&
aHref
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
DoSetHref
(
aHref
aSubjectPrincipal
false
aRv
)
;
}
void
LocationBase
:
:
DoSetHref
(
const
nsACString
&
aHref
nsIPrincipal
&
aSubjectPrincipal
bool
aReplace
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIURI
>
base
=
GetSourceBaseURL
(
)
;
SetHrefWithBase
(
aHref
base
aSubjectPrincipal
aReplace
aRv
)
;
}
void
LocationBase
:
:
SetHrefWithBase
(
const
nsACString
&
aHref
nsIURI
*
aBase
nsIPrincipal
&
aSubjectPrincipal
bool
aReplace
ErrorResult
&
aRv
)
{
nsresult
result
;
nsCOMPtr
<
nsIURI
>
newUri
;
if
(
Document
*
doc
=
GetEntryDocument
(
)
)
{
result
=
NS_NewURI
(
getter_AddRefs
(
newUri
)
aHref
doc
-
>
GetDocumentCharacterSet
(
)
aBase
)
;
}
else
{
result
=
NS_NewURI
(
getter_AddRefs
(
newUri
)
aHref
nullptr
aBase
)
;
}
if
(
NS_FAILED
(
result
)
|
|
!
newUri
)
{
aRv
.
ThrowSyntaxError
(
"
'
"
_ns
+
aHref
+
"
'
is
not
a
valid
URL
.
"
_ns
)
;
return
;
}
bool
inScriptTag
=
false
;
nsIScriptContext
*
scriptContext
=
nullptr
;
nsCOMPtr
<
nsPIDOMWindowInner
>
win
=
do_QueryInterface
(
GetEntryGlobal
(
)
)
;
if
(
win
)
{
scriptContext
=
nsGlobalWindowInner
:
:
Cast
(
win
)
-
>
GetContextInternal
(
)
;
}
if
(
scriptContext
)
{
if
(
scriptContext
-
>
GetProcessingScriptTag
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
GetDocShell
(
)
)
;
nsCOMPtr
<
nsIScriptGlobalObject
>
ourGlobal
=
docShell
?
docShell
-
>
GetScriptGlobalObject
(
)
:
nullptr
;
inScriptTag
=
(
ourGlobal
=
=
scriptContext
-
>
GetGlobalObject
(
)
)
;
}
}
SetURI
(
newUri
aSubjectPrincipal
aRv
aReplace
|
|
inScriptTag
)
;
}
void
LocationBase
:
:
Replace
(
const
nsACString
&
aUrl
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
DoSetHref
(
aUrl
aSubjectPrincipal
true
aRv
)
;
}
nsIURI
*
LocationBase
:
:
GetSourceBaseURL
(
)
{
Document
*
doc
=
GetEntryDocument
(
)
;
if
(
!
doc
)
{
if
(
nsCOMPtr
<
nsIDocShell
>
docShell
=
GetDocShell
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
docShellWin
=
do_QueryInterface
(
docShell
-
>
GetScriptGlobalObject
(
)
)
;
if
(
docShellWin
)
{
doc
=
docShellWin
-
>
GetDoc
(
)
;
}
}
}
return
doc
?
doc
-
>
GetBaseURI
(
)
:
nullptr
;
}
}
