#
include
"
ThirdPartyUtil
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
NS_IMPL_ISUPPORTS
(
ThirdPartyUtil
mozIThirdPartyUtil
)
static
mozilla
:
:
LazyLogModule
gThirdPartyLog
(
"
thirdPartyUtil
"
)
;
#
undef
LOG
#
define
LOG
(
args
)
MOZ_LOG
(
gThirdPartyLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
static
mozilla
:
:
StaticRefPtr
<
ThirdPartyUtil
>
gService
;
nsresult
ThirdPartyUtil
:
:
Init
(
)
{
NS_ENSURE_TRUE
(
NS_IsMainThread
(
)
NS_ERROR_NOT_AVAILABLE
)
;
MOZ_ASSERT
(
!
gService
)
;
gService
=
this
;
mozilla
:
:
ClearOnShutdown
(
&
gService
)
;
nsresult
rv
;
mTLDService
=
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
;
return
rv
;
}
ThirdPartyUtil
:
:
~
ThirdPartyUtil
(
)
{
gService
=
nullptr
;
}
ThirdPartyUtil
*
ThirdPartyUtil
:
:
GetInstance
(
)
{
if
(
gService
)
{
return
gService
;
}
nsCOMPtr
<
mozIThirdPartyUtil
>
tpuService
=
mozilla
:
:
services
:
:
GetThirdPartyUtil
(
)
;
if
(
!
tpuService
)
{
return
nullptr
;
}
MOZ_ASSERT
(
gService
"
gService
must
have
been
initialized
in
nsEffectiveTLDService
:
:
Init
"
)
;
return
gService
;
}
nsresult
ThirdPartyUtil
:
:
IsThirdPartyInternal
(
const
nsCString
&
aFirstDomain
nsIURI
*
aSecondURI
bool
*
aResult
)
{
if
(
!
aSecondURI
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoCString
secondDomain
;
nsresult
rv
=
GetBaseDomain
(
aSecondURI
secondDomain
)
;
LOG
(
(
"
ThirdPartyUtil
:
:
IsThirdPartyInternal
%
s
=
?
%
s
"
aFirstDomain
.
get
(
)
secondDomain
.
get
(
)
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
*
aResult
=
aFirstDomain
!
=
secondDomain
;
return
NS_OK
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
GetURIFromWindow
(
mozIDOMWindowProxy
*
aWin
nsIURI
*
*
result
)
{
nsresult
rv
;
nsCOMPtr
<
nsIScriptObjectPrincipal
>
scriptObjPrin
=
do_QueryInterface
(
aWin
)
;
if
(
!
scriptObjPrin
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsIPrincipal
*
prin
=
scriptObjPrin
-
>
GetPrincipal
(
)
;
if
(
!
prin
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
prin
-
>
GetIsNullPrincipal
(
)
)
{
LOG
(
(
"
ThirdPartyUtil
:
:
GetURIFromWindow
can
'
t
use
null
principal
\
n
"
)
)
;
return
NS_ERROR_INVALID_ARG
;
}
rv
=
prin
-
>
GetURI
(
result
)
;
return
rv
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
IsThirdPartyURI
(
nsIURI
*
aFirstURI
nsIURI
*
aSecondURI
bool
*
aResult
)
{
NS_ENSURE_ARG
(
aFirstURI
)
;
NS_ENSURE_ARG
(
aSecondURI
)
;
NS_ASSERTION
(
aResult
"
null
outparam
pointer
"
)
;
nsAutoCString
firstHost
;
nsresult
rv
=
GetBaseDomain
(
aFirstURI
firstHost
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
IsThirdPartyInternal
(
firstHost
aSecondURI
aResult
)
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
IsThirdPartyWindow
(
mozIDOMWindowProxy
*
aWindow
nsIURI
*
aURI
bool
*
aResult
)
{
NS_ENSURE_ARG
(
aWindow
)
;
NS_ASSERTION
(
aResult
"
null
outparam
pointer
"
)
;
bool
result
;
nsresult
rv
;
nsCOMPtr
<
nsIURI
>
currentURI
;
rv
=
GetURIFromWindow
(
aWindow
getter_AddRefs
(
currentURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsAutoCString
bottomDomain
;
rv
=
GetBaseDomain
(
currentURI
bottomDomain
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
aURI
)
{
rv
=
IsThirdPartyInternal
(
bottomDomain
aURI
&
result
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
result
)
{
*
aResult
=
true
;
return
NS_OK
;
}
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
current
=
nsPIDOMWindowOuter
:
:
From
(
aWindow
)
parent
;
nsCOMPtr
<
nsIURI
>
parentURI
;
do
{
parent
=
current
-
>
GetScriptableParent
(
)
;
if
(
SameCOMIdentity
(
parent
current
)
)
{
*
aResult
=
false
;
return
NS_OK
;
}
rv
=
GetURIFromWindow
(
parent
getter_AddRefs
(
parentURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
IsThirdPartyInternal
(
bottomDomain
parentURI
&
result
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
result
)
{
*
aResult
=
true
;
return
NS_OK
;
}
current
=
parent
;
currentURI
=
parentURI
;
}
while
(
1
)
;
MOZ_ASSERT_UNREACHABLE
(
"
should
'
ve
returned
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
IsThirdPartyChannel
(
nsIChannel
*
aChannel
nsIURI
*
aURI
bool
*
aResult
)
{
LOG
(
(
"
ThirdPartyUtil
:
:
IsThirdPartyChannel
[
channel
=
%
p
]
"
aChannel
)
)
;
NS_ENSURE_ARG
(
aChannel
)
;
NS_ASSERTION
(
aResult
"
null
outparam
pointer
"
)
;
nsresult
rv
;
bool
doForce
=
false
;
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannelInternal
=
do_QueryInterface
(
aChannel
)
;
if
(
httpChannelInternal
)
{
uint32_t
flags
=
0
;
mozilla
:
:
Unused
<
<
httpChannelInternal
-
>
GetThirdPartyFlags
(
&
flags
)
;
doForce
=
(
flags
&
nsIHttpChannelInternal
:
:
THIRD_PARTY_FORCE_ALLOW
)
;
if
(
doForce
&
&
!
aURI
)
{
*
aResult
=
false
;
return
NS_OK
;
}
}
bool
parentIsThird
=
false
;
nsCOMPtr
<
nsIURI
>
channelURI
;
rv
=
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
channelURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsAutoCString
channelDomain
;
rv
=
GetBaseDomain
(
channelURI
channelDomain
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
!
doForce
)
{
if
(
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
GetLoadInfo
(
)
)
{
parentIsThird
=
loadInfo
-
>
GetIsInThirdPartyContext
(
)
;
if
(
!
parentIsThird
&
&
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
nsCOMPtr
<
nsIURI
>
parentURI
;
rv
=
loadInfo
-
>
LoadingPrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
parentURI
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
parentURI
)
{
rv
=
IsThirdPartyInternal
(
channelDomain
parentURI
&
parentIsThird
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
else
{
parentIsThird
=
true
;
}
}
}
else
{
NS_WARNING
(
"
Found
channel
with
no
loadinfo
assuming
third
-
party
request
"
)
;
parentIsThird
=
true
;
}
}
if
(
!
aURI
|
|
parentIsThird
)
{
*
aResult
=
parentIsThird
;
return
NS_OK
;
}
return
IsThirdPartyInternal
(
channelDomain
aURI
aResult
)
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
GetTopWindowForChannel
(
nsIChannel
*
aChannel
nsIURI
*
aURIBeingLoaded
mozIDOMWindowProxy
*
*
aWin
)
{
NS_ENSURE_ARG
(
aWin
)
;
nsCOMPtr
<
nsILoadContext
>
ctx
;
NS_QueryNotificationCallbacks
(
aChannel
ctx
)
;
if
(
!
ctx
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
mozIDOMWindowProxy
>
window
;
ctx
-
>
GetAssociatedWindow
(
getter_AddRefs
(
window
)
)
;
if
(
!
window
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
top
=
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
GetTopExcludingExtensionAccessibleContentFrames
(
aURIBeingLoaded
)
;
top
.
forget
(
aWin
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ThirdPartyUtil
:
:
GetBaseDomain
(
nsIURI
*
aHostURI
nsACString
&
aBaseDomain
)
{
if
(
!
aHostURI
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsresult
rv
=
mTLDService
-
>
GetBaseDomain
(
aHostURI
0
aBaseDomain
)
;
if
(
rv
=
=
NS_ERROR_HOST_IS_IP_ADDRESS
|
|
rv
=
=
NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS
)
{
rv
=
aHostURI
-
>
GetAsciiHost
(
aBaseDomain
)
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aBaseDomain
.
Length
(
)
=
=
1
&
&
aBaseDomain
.
Last
(
)
=
=
'
.
'
)
return
NS_ERROR_INVALID_ARG
;
if
(
aBaseDomain
.
IsEmpty
(
)
)
{
bool
isFileURI
=
false
;
aHostURI
-
>
SchemeIs
(
"
file
"
&
isFileURI
)
;
if
(
!
isFileURI
)
{
return
NS_ERROR_INVALID_ARG
;
}
}
return
NS_OK
;
}
