#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
ThrottledEventQueue
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIURI
.
h
"
namespace
mozilla
{
namespace
dom
{
static
StaticRefPtr
<
TabGroup
>
sChromeTabGroup
;
TabGroup
:
:
TabGroup
(
bool
aIsChrome
)
:
mLastWindowLeft
(
false
)
mThrottledQueuesInitialized
(
false
)
mIsChrome
(
aIsChrome
)
{
CreateEventTargets
(
!
aIsChrome
)
;
if
(
aIsChrome
)
{
MOZ_ASSERT
(
!
sChromeTabGroup
)
;
return
;
}
if
(
NS_IsMainThread
(
)
)
{
EnsureThrottledEventQueues
(
)
;
}
}
TabGroup
:
:
~
TabGroup
(
)
{
MOZ_ASSERT
(
mDocGroups
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mWindows
.
IsEmpty
(
)
)
;
MOZ_RELEASE_ASSERT
(
mLastWindowLeft
|
|
mIsChrome
)
;
}
void
TabGroup
:
:
EnsureThrottledEventQueues
(
)
{
if
(
mThrottledQueuesInitialized
)
{
return
;
}
mThrottledQueuesInitialized
=
true
;
for
(
size_t
i
=
0
;
i
<
size_t
(
TaskCategory
:
:
Count
)
;
i
+
+
)
{
TaskCategory
category
=
static_cast
<
TaskCategory
>
(
i
)
;
if
(
category
=
=
TaskCategory
:
:
Worker
|
|
category
=
=
TaskCategory
:
:
Timer
)
{
nsCOMPtr
<
nsIEventTarget
>
target
=
ThrottledEventQueue
:
:
Create
(
mEventTargets
[
i
]
)
;
if
(
target
)
{
mEventTargets
[
i
]
=
target
;
}
}
}
}
TabGroup
*
TabGroup
:
:
GetChromeTabGroup
(
)
{
if
(
!
sChromeTabGroup
)
{
sChromeTabGroup
=
new
TabGroup
(
true
)
;
ClearOnShutdown
(
&
sChromeTabGroup
)
;
}
return
sChromeTabGroup
;
}
TabGroup
*
TabGroup
:
:
GetFromWindowActor
(
mozIDOMWindowProxy
*
aWindow
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
TabChild
*
tabChild
=
TabChild
:
:
GetFrom
(
aWindow
)
;
if
(
!
tabChild
)
{
return
nullptr
;
}
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
cc
-
>
GetActorEventTarget
(
tabChild
)
;
if
(
!
target
)
{
return
nullptr
;
}
RefPtr
<
ValidatingDispatcher
>
dispatcher
=
ValidatingDispatcher
:
:
FromEventTarget
(
target
)
;
MOZ_RELEASE_ASSERT
(
dispatcher
)
;
auto
tabGroup
=
dispatcher
-
>
AsTabGroup
(
)
;
MOZ_RELEASE_ASSERT
(
tabGroup
)
;
tabGroup
-
>
EnsureThrottledEventQueues
(
)
;
return
tabGroup
;
}
already_AddRefed
<
DocGroup
>
TabGroup
:
:
GetDocGroup
(
const
nsACString
&
aKey
)
{
RefPtr
<
DocGroup
>
docGroup
(
mDocGroups
.
GetEntry
(
aKey
)
-
>
mDocGroup
)
;
return
docGroup
.
forget
(
)
;
}
already_AddRefed
<
DocGroup
>
TabGroup
:
:
AddDocument
(
const
nsACString
&
aKey
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
HashEntry
*
entry
=
mDocGroups
.
PutEntry
(
aKey
)
;
RefPtr
<
DocGroup
>
docGroup
;
if
(
entry
-
>
mDocGroup
)
{
docGroup
=
entry
-
>
mDocGroup
;
}
else
{
docGroup
=
new
DocGroup
(
this
aKey
)
;
entry
-
>
mDocGroup
=
docGroup
;
}
MOZ_ASSERT
(
RefPtr
<
DocGroup
>
(
GetDocGroup
(
aKey
)
)
=
=
docGroup
)
;
docGroup
-
>
mDocuments
.
AppendElement
(
aDocument
)
;
return
docGroup
.
forget
(
)
;
}
already_AddRefed
<
TabGroup
>
TabGroup
:
:
Join
(
nsPIDOMWindowOuter
*
aWindow
TabGroup
*
aTabGroup
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
TabGroup
>
tabGroup
=
aTabGroup
;
if
(
!
tabGroup
)
{
tabGroup
=
new
TabGroup
(
)
;
}
MOZ_RELEASE_ASSERT
(
!
tabGroup
-
>
mLastWindowLeft
)
;
MOZ_ASSERT
(
!
tabGroup
-
>
mWindows
.
Contains
(
aWindow
)
)
;
tabGroup
-
>
mWindows
.
AppendElement
(
aWindow
)
;
return
tabGroup
.
forget
(
)
;
}
void
TabGroup
:
:
Leave
(
nsPIDOMWindowOuter
*
aWindow
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mWindows
.
Contains
(
aWindow
)
)
;
mWindows
.
RemoveElement
(
aWindow
)
;
if
(
!
mIsChrome
&
&
mWindows
.
IsEmpty
(
)
)
{
mLastWindowLeft
=
true
;
Shutdown
(
false
)
;
}
}
nsresult
TabGroup
:
:
FindItemWithName
(
const
nsAString
&
aName
nsIDocShellTreeItem
*
aRequestor
nsIDocShellTreeItem
*
aOriginalRequestor
nsIDocShellTreeItem
*
*
aFoundItem
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_ARG_POINTER
(
aFoundItem
)
;
*
aFoundItem
=
nullptr
;
MOZ_ASSERT
(
!
aName
.
LowerCaseEqualsLiteral
(
"
_blank
"
)
&
&
!
aName
.
LowerCaseEqualsLiteral
(
"
_top
"
)
&
&
!
aName
.
LowerCaseEqualsLiteral
(
"
_parent
"
)
&
&
!
aName
.
LowerCaseEqualsLiteral
(
"
_self
"
)
)
;
for
(
nsPIDOMWindowOuter
*
outerWindow
:
mWindows
)
{
if
(
outerWindow
-
>
GetScriptableParentOrNull
(
)
)
{
continue
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
docshell
=
outerWindow
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
{
continue
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
root
;
docshell
-
>
GetSameTypeRootTreeItem
(
getter_AddRefs
(
root
)
)
;
MOZ_RELEASE_ASSERT
(
docshell
=
=
root
)
;
if
(
root
&
&
aRequestor
!
=
root
)
{
root
-
>
FindItemWithName
(
aName
aRequestor
aOriginalRequestor
true
aFoundItem
)
;
if
(
*
aFoundItem
)
{
break
;
}
}
}
return
NS_OK
;
}
nsTArray
<
nsPIDOMWindowOuter
*
>
TabGroup
:
:
GetTopLevelWindows
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsTArray
<
nsPIDOMWindowOuter
*
>
array
;
for
(
nsPIDOMWindowOuter
*
outerWindow
:
mWindows
)
{
if
(
outerWindow
-
>
GetDocShell
(
)
&
&
!
outerWindow
-
>
GetScriptableParentOrNull
(
)
)
{
array
.
AppendElement
(
outerWindow
)
;
}
}
return
array
;
}
TabGroup
:
:
HashEntry
:
:
HashEntry
(
const
nsACString
*
aKey
)
:
nsCStringHashKey
(
aKey
)
mDocGroup
(
nullptr
)
{
}
nsIEventTarget
*
TabGroup
:
:
EventTargetFor
(
TaskCategory
aCategory
)
const
{
if
(
aCategory
=
=
TaskCategory
:
:
Worker
|
|
aCategory
=
=
TaskCategory
:
:
Timer
)
{
MOZ_RELEASE_ASSERT
(
mThrottledQueuesInitialized
|
|
mIsChrome
)
;
}
return
ValidatingDispatcher
:
:
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
TabGroup
:
:
AbstractMainThreadForImpl
(
TaskCategory
aCategory
)
{
if
(
this
=
=
sChromeTabGroup
|
|
NS_WARN_IF
(
mLastWindowLeft
)
)
{
return
AbstractThread
:
:
MainThread
(
)
;
}
return
ValidatingDispatcher
:
:
AbstractMainThreadForImpl
(
aCategory
)
;
}
}
}
