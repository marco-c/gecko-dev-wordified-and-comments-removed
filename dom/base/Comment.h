#
ifndef
mozilla_dom_Comment_h
#
define
mozilla_dom_Comment_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsGenericDOMDataNode
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Comment
final
:
public
CharacterData
public
nsIDOMCharacterData
{
private
:
void
Init
(
)
{
MOZ_ASSERT
(
mNodeInfo
-
>
NodeType
(
)
=
=
COMMENT_NODE
"
Bad
NodeType
in
aNodeInfo
"
)
;
}
virtual
~
Comment
(
)
;
public
:
explicit
Comment
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
CharacterData
(
aNodeInfo
)
{
Init
(
)
;
}
explicit
Comment
(
nsNodeInfoManager
*
aNodeInfoManager
)
:
CharacterData
(
aNodeInfoManager
-
>
GetCommentNodeInfo
(
)
)
{
Init
(
)
;
}
NS_DECL_ISUPPORTS_INHERITED
NS_FORWARD_NSIDOMCHARACTERDATA
(
CharacterData
:
:
)
using
CharacterData
:
:
SetData
;
virtual
bool
IsNodeOfType
(
uint32_t
aFlags
)
const
override
;
virtual
CharacterData
*
CloneDataNode
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
bool
aCloneText
)
const
override
;
virtual
nsIDOMNode
*
AsDOMNode
(
)
override
{
return
this
;
}
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
int32_t
aIndent
)
const
override
;
virtual
void
DumpContent
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
bool
aDumpAll
=
true
)
const
override
{
return
;
}
#
endif
static
already_AddRefed
<
Comment
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aData
ErrorResult
&
aRv
)
;
protected
:
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
}
;
}
}
#
endif
