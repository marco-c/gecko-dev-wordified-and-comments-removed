#
ifndef
nsFrameLoader_h_
#
define
nsFrameLoader_h_
#
include
"
nsIDocShell
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsIFrameLoaderOwner
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ParentSHistory
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsPluginTags
.
h
"
class
nsIURI
;
class
nsSubDocumentFrame
;
class
nsView
;
class
AutoResetInShow
;
class
AutoResetInFrameSwap
;
class
nsITabParent
;
class
nsIDocShellTreeItem
;
class
nsIDocShellTreeOwner
;
class
nsILoadContext
;
class
nsIMessageSender
;
class
nsIPrintSettings
;
class
nsIWebBrowserPersistDocumentReceiver
;
class
nsIWebProgressListener
;
namespace
mozilla
{
class
OriginAttributes
;
namespace
dom
{
class
BrowsingContext
;
class
ChromeMessageSender
;
class
ContentParent
;
class
InProcessTabChildMessageManager
;
class
MessageSender
;
class
PBrowserParent
;
class
ProcessMessageManager
;
class
Promise
;
class
TabParent
;
class
MutableTabContext
;
namespace
ipc
{
class
StructuredCloneData
;
}
}
namespace
layout
{
class
RenderFrame
;
}
}
#
if
defined
(
MOZ_WIDGET_GTK
)
typedef
struct
_GtkWidget
GtkWidget
;
#
endif
#
define
NS_FRAMELOADER_IID
\
{
\
0x297fd0ea
0x1b4a
0x4c9a
{
\
0xa4
0x04
0xe5
0x8b
0xe8
0x95
0x10
0x50
\
}
\
}
class
nsFrameLoader
final
:
public
nsStubMutationObserver
public
mozilla
:
:
dom
:
:
ipc
:
:
MessageManagerCallback
public
nsWrapperCache
{
friend
class
AutoResetInShow
;
friend
class
AutoResetInFrameSwap
;
typedef
mozilla
:
:
dom
:
:
PBrowserParent
PBrowserParent
;
typedef
mozilla
:
:
dom
:
:
TabParent
TabParent
;
typedef
mozilla
:
:
layout
:
:
RenderFrame
RenderFrame
;
public
:
static
nsFrameLoader
*
Create
(
mozilla
:
:
dom
:
:
Element
*
aOwner
nsPIDOMWindowOuter
*
aOpener
bool
aNetworkCreated
int32_t
aJSPluginID
=
nsFakePluginTag
:
:
NOT_JSPLUGIN
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_FRAMELOADER_IID
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
nsFrameLoader
)
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
nsresult
CheckForRecursiveLoad
(
nsIURI
*
aURI
)
;
nsresult
ReallyStartLoading
(
)
;
void
StartDestroy
(
)
;
void
DestroyDocShell
(
)
;
void
DestroyComplete
(
)
;
nsIDocShell
*
GetExistingDocShell
(
)
{
return
mDocShell
;
}
mozilla
:
:
dom
:
:
InProcessTabChildMessageManager
*
GetTabChildMessageManager
(
)
const
{
return
mChildMessageManager
;
}
nsresult
CreateStaticClone
(
nsFrameLoader
*
aDest
)
;
nsresult
UpdatePositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
;
nsIDocShell
*
GetDocShell
(
mozilla
:
:
ErrorResult
&
aRv
)
;
already_AddRefed
<
nsITabParent
>
GetTabParent
(
)
;
already_AddRefed
<
nsILoadContext
>
LoadContext
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
BrowsingContext
>
GetBrowsingContext
(
)
;
void
LoadFrame
(
bool
aOriginalSrc
)
;
nsresult
LoadURI
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
bool
aOriginalSrc
)
;
void
Destroy
(
)
;
void
ActivateRemoteFrame
(
mozilla
:
:
ErrorResult
&
aRv
)
;
void
DeactivateRemoteFrame
(
mozilla
:
:
ErrorResult
&
aRv
)
;
void
SendCrossProcessMouseEvent
(
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
mozilla
:
:
ErrorResult
&
aRv
)
;
void
ActivateFrameEvent
(
const
nsAString
&
aType
bool
aCapture
mozilla
:
:
ErrorResult
&
aRv
)
;
void
RequestNotifyAfterRemotePaint
(
)
;
void
RequestUpdatePosition
(
mozilla
:
:
ErrorResult
&
aRv
)
;
void
Print
(
uint64_t
aOuterWindowID
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aProgressListener
mozilla
:
:
ErrorResult
&
aRv
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
DrawSnapshot
(
double
aX
double
aY
double
aW
double
aH
double
aScale
const
nsAString
&
aBackgroundColor
mozilla
:
:
ErrorResult
&
aRv
)
;
void
StartPersistence
(
uint64_t
aOuterWindowID
nsIWebBrowserPersistDocumentReceiver
*
aRecv
mozilla
:
:
ErrorResult
&
aRv
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
MessageSender
>
GetMessageManager
(
)
;
already_AddRefed
<
Element
>
GetOwnerElement
(
)
;
uint32_t
LazyWidth
(
)
const
;
uint32_t
LazyHeight
(
)
const
;
uint64_t
ChildID
(
)
const
{
return
mChildID
;
}
bool
ClampScrollPosition
(
)
const
{
return
mClampScrollPosition
;
}
void
SetClampScrollPosition
(
bool
aClamp
)
;
bool
DepthTooGreat
(
)
const
{
return
mDepthTooGreat
;
}
bool
IsDead
(
)
const
{
return
mDestroyCalled
;
}
bool
OwnerIsMozBrowserFrame
(
)
;
nsIContent
*
GetParentObject
(
)
const
{
return
mOwnerContent
;
}
virtual
bool
DoLoadMessageManagerScript
(
const
nsAString
&
aURL
bool
aRunInGlobalScope
)
override
;
virtual
nsresult
DoSendAsyncMessage
(
JSContext
*
aCx
const
nsAString
&
aMessage
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
&
aData
JS
:
:
Handle
<
JSObject
*
>
aCpows
nsIPrincipal
*
aPrincipal
)
override
;
bool
Show
(
int32_t
marginWidth
int32_t
marginHeight
int32_t
scrollbarPrefX
int32_t
scrollbarPrefY
nsSubDocumentFrame
*
frame
)
;
void
MaybeShowFrame
(
)
;
void
MarginsChanged
(
uint32_t
aMarginWidth
uint32_t
aMarginHeight
)
;
void
Hide
(
)
;
void
ForceLayoutIfNecessary
(
)
;
nsresult
SwapWithOtherLoader
(
nsFrameLoader
*
aOther
nsIFrameLoaderOwner
*
aThisOwner
nsIFrameLoaderOwner
*
aOtherOwner
)
;
nsresult
SwapWithOtherRemoteLoader
(
nsFrameLoader
*
aOther
nsIFrameLoaderOwner
*
aThisOwner
nsIFrameLoaderOwner
*
aOtherOwner
)
;
nsIFrame
*
GetPrimaryFrameOfOwningContent
(
)
const
{
return
mOwnerContent
?
mOwnerContent
-
>
GetPrimaryFrame
(
)
:
nullptr
;
}
nsIDocument
*
GetOwnerDoc
(
)
const
{
return
mOwnerContent
?
mOwnerContent
-
>
OwnerDoc
(
)
:
nullptr
;
}
PBrowserParent
*
GetRemoteBrowser
(
)
const
;
RenderFrame
*
GetCurrentRenderFrame
(
)
const
;
mozilla
:
:
dom
:
:
ChromeMessageSender
*
GetFrameMessageManager
(
)
{
return
mMessageManager
;
}
mozilla
:
:
dom
:
:
Element
*
GetOwnerContent
(
)
{
return
mOwnerContent
;
}
bool
ShouldClampScrollPosition
(
)
{
return
mClampScrollPosition
;
}
mozilla
:
:
dom
:
:
ParentSHistory
*
GetParentSHistory
(
)
{
return
mParentSHistory
;
}
void
SetRemoteBrowser
(
nsITabParent
*
aTabParent
)
;
void
SetDetachedSubdocFrame
(
nsIFrame
*
aDetachedFrame
nsIDocument
*
aContainerDoc
)
;
nsIFrame
*
GetDetachedSubdocFrame
(
nsIDocument
*
*
aContainerDoc
)
const
;
void
ApplySandboxFlags
(
uint32_t
sandboxFlags
)
;
void
GetURL
(
nsString
&
aURL
nsIPrincipal
*
*
aTriggeringPrincipal
)
;
nsresult
GetWindowDimensions
(
nsIntRect
&
aRect
)
;
virtual
mozilla
:
:
dom
:
:
ProcessMessageManager
*
GetProcessMessageManager
(
)
const
override
;
RefPtr
<
mozilla
:
:
dom
:
:
ChromeMessageSender
>
mMessageManager
;
RefPtr
<
mozilla
:
:
dom
:
:
InProcessTabChildMessageManager
>
mChildMessageManager
;
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
nsFrameLoader
(
mozilla
:
:
dom
:
:
Element
*
aOwner
nsPIDOMWindowOuter
*
aOpener
bool
aNetworkCreated
int32_t
aJSPluginID
)
;
~
nsFrameLoader
(
)
;
void
SetOwnerContent
(
mozilla
:
:
dom
:
:
Element
*
aContent
)
;
bool
ShouldUseRemoteProcess
(
)
;
bool
IsRemoteFrame
(
)
;
bool
IsForJSPlugin
(
)
{
return
mJSPluginID
!
=
nsFakePluginTag
:
:
NOT_JSPLUGIN
;
}
bool
OwnerIsIsolatedMozBrowserFrame
(
)
;
void
GetOwnerAppManifestURL
(
nsAString
&
aOut
)
;
nsresult
MaybeCreateDocShell
(
)
;
nsresult
EnsureMessageManager
(
)
;
nsresult
ReallyLoadFrameScripts
(
)
;
void
UpdateBaseWindowPositionAndSize
(
nsSubDocumentFrame
*
aIFrame
)
;
nsresult
CheckURILoad
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
)
;
void
FireErrorEvent
(
)
;
nsresult
ReallyStartLoadingInternal
(
)
;
bool
TryRemoteBrowser
(
)
;
bool
ShowRemoteFrame
(
const
mozilla
:
:
ScreenIntSize
&
size
nsSubDocumentFrame
*
aFrame
=
nullptr
)
;
void
AddTreeItemToTreeOwner
(
nsIDocShellTreeItem
*
aItem
nsIDocShellTreeOwner
*
aOwner
)
;
nsAtom
*
TypeAttrName
(
)
const
{
return
mOwnerContent
-
>
IsXULElement
(
)
?
nsGkAtoms
:
:
type
:
nsGkAtoms
:
:
mozframetype
;
}
void
InitializeBrowserAPI
(
)
;
void
DestroyBrowserFrameScripts
(
)
;
nsresult
GetNewTabContext
(
mozilla
:
:
dom
:
:
MutableTabContext
*
aTabContext
nsIURI
*
aURI
=
nullptr
)
;
enum
TabParentChange
{
eTabParentRemoved
eTabParentChanged
}
;
void
MaybeUpdatePrimaryTabParent
(
TabParentChange
aChange
)
;
nsresult
PopulateUserContextIdFromAttribute
(
mozilla
:
:
OriginAttributes
&
aAttr
)
;
nsCOMPtr
<
nsIDocShell
>
mDocShell
;
nsCOMPtr
<
nsIURI
>
mURIToLoad
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
mozilla
:
:
dom
:
:
Element
*
mOwnerContent
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mOwnerContentStrong
;
WeakFrame
mDetachedSubdocFrame
;
nsCOMPtr
<
nsIDocument
>
mContainerDocWhileDetached
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
mOpener
;
TabParent
*
mRemoteBrowser
;
uint64_t
mChildID
;
int32_t
mJSPluginID
;
mozilla
:
:
ScreenIntSize
mLazySize
;
RefPtr
<
mozilla
:
:
dom
:
:
ParentSHistory
>
mParentSHistory
;
bool
mDepthTooGreat
:
1
;
bool
mIsTopLevelContent
:
1
;
bool
mDestroyCalled
:
1
;
bool
mNeedsAsyncDestroy
:
1
;
bool
mInSwap
:
1
;
bool
mInShow
:
1
;
bool
mHideCalled
:
1
;
bool
mNetworkCreated
:
1
;
bool
mLoadingOriginalSrc
:
1
;
bool
mRemoteBrowserShown
:
1
;
bool
mRemoteFrame
:
1
;
bool
mClampScrollPosition
:
1
;
bool
mObservingOwnerContent
:
1
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsFrameLoader
NS_FRAMELOADER_IID
)
inline
nsISupports
*
ToSupports
(
nsFrameLoader
*
aFrameLoader
)
{
return
aFrameLoader
;
}
#
endif
