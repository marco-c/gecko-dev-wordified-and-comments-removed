#
include
"
FetchStream
.
h
"
#
include
"
mozilla
/
dom
/
DOMException
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
define
FETCH_STREAM_FLAG
0
static
NS_DEFINE_CID
(
kStreamTransportServiceCID
NS_STREAMTRANSPORTSERVICE_CID
)
;
namespace
mozilla
{
namespace
dom
{
class
FetchStream
:
:
WorkerShutdown
final
:
public
WorkerControlRunnable
{
public
:
WorkerShutdown
(
WorkerPrivate
*
aWorkerPrivate
RefPtr
<
FetchStream
>
aStream
)
:
WorkerControlRunnable
(
aWorkerPrivate
WorkerThreadUnchangedBusyCount
)
mStream
(
aStream
)
{
}
bool
WorkerRun
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
)
override
{
mStream
-
>
ReleaseObjects
(
)
;
return
true
;
}
bool
PreDispatch
(
WorkerPrivate
*
aWorkerPrivate
)
override
{
return
true
;
}
void
PostDispatch
(
WorkerPrivate
*
aWorkerPrivate
bool
aDispatchResult
)
override
{
}
private
:
RefPtr
<
FetchStream
>
mStream
;
}
;
NS_IMPL_ISUPPORTS
(
FetchStream
nsIInputStreamCallback
nsIObserver
nsISupportsWeakReference
)
void
FetchStream
:
:
Create
(
JSContext
*
aCx
FetchStreamHolder
*
aStreamHolder
nsIGlobalObject
*
aGlobal
nsIInputStream
*
aInputStream
JS
:
:
MutableHandle
<
JSObject
*
>
aStream
ErrorResult
&
aRv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aCx
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aStreamHolder
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aInputStream
)
;
RefPtr
<
FetchStream
>
stream
=
new
FetchStream
(
aGlobal
aStreamHolder
aInputStream
)
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
os
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
aRv
=
os
-
>
AddObserver
(
stream
DOM_WINDOW_DESTROYED_TOPIC
true
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
}
else
{
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
aCx
)
;
MOZ_ASSERT
(
workerPrivate
)
;
RefPtr
<
WeakWorkerRef
>
workerRef
=
WeakWorkerRef
:
:
Create
(
workerPrivate
[
stream
]
(
)
{
stream
-
>
Close
(
)
;
}
)
;
if
(
NS_WARN_IF
(
!
workerRef
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
stream
-
>
mWorkerRef
=
workerRef
.
forget
(
)
;
}
if
(
!
JS
:
:
HasReadableStreamCallbacks
(
aCx
)
)
{
JS
:
:
SetReadableStreamCallbacks
(
aCx
&
FetchStream
:
:
RequestDataCallback
&
FetchStream
:
:
WriteIntoReadRequestCallback
&
FetchStream
:
:
CancelCallback
&
FetchStream
:
:
ClosedCallback
&
FetchStream
:
:
ErroredCallback
&
FetchStream
:
:
FinalizeCallback
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
body
(
aCx
JS
:
:
NewReadableExternalSourceStreamObject
(
aCx
stream
FETCH_STREAM_FLAG
)
)
;
if
(
!
body
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
NS_ADDREF
(
stream
.
get
(
)
)
;
aStream
.
set
(
body
)
;
}
void
FetchStream
:
:
RequestDataCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
uint8_t
aFlags
size_t
aDesiredSize
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
MOZ_DIAGNOSTIC_ASSERT
(
JS
:
:
ReadableStreamIsDisturbed
(
aStream
)
)
;
RefPtr
<
FetchStream
>
stream
=
static_cast
<
FetchStream
*
>
(
aUnderlyingSource
)
;
stream
-
>
AssertIsOnOwningThread
(
)
;
MutexAutoLock
lock
(
stream
-
>
mMutex
)
;
MOZ_DIAGNOSTIC_ASSERT
(
stream
-
>
mState
=
=
eInitializing
|
|
stream
-
>
mState
=
=
eWaiting
|
|
stream
-
>
mState
=
=
eChecking
|
|
stream
-
>
mState
=
=
eReading
)
;
if
(
stream
-
>
mState
=
=
eReading
)
{
return
;
}
if
(
stream
-
>
mState
=
=
eChecking
)
{
MOZ_ASSERT
(
stream
-
>
mInputStream
)
;
stream
-
>
mState
=
eReading
;
return
;
}
if
(
stream
-
>
mState
=
=
eInitializing
)
{
stream
-
>
mStreamHolder
-
>
MarkAsRead
(
)
;
}
stream
-
>
mState
=
eReading
;
if
(
!
stream
-
>
mInputStream
)
{
MOZ_ASSERT
(
stream
-
>
mOriginalInputStream
)
;
nsCOMPtr
<
nsIAsyncInputStream
>
asyncStream
;
nsresult
rv
=
NS_MakeAsyncNonBlockingInputStream
(
stream
-
>
mOriginalInputStream
.
forget
(
)
getter_AddRefs
(
asyncStream
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
stream
-
>
ErrorPropagation
(
aCx
lock
aStream
rv
)
;
return
;
}
stream
-
>
mInputStream
=
asyncStream
;
stream
-
>
mOriginalInputStream
=
nullptr
;
}
MOZ_DIAGNOSTIC_ASSERT
(
stream
-
>
mInputStream
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
stream
-
>
mOriginalInputStream
)
;
nsresult
rv
=
stream
-
>
mInputStream
-
>
AsyncWait
(
stream
0
0
stream
-
>
mOwningEventTarget
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
stream
-
>
ErrorPropagation
(
aCx
lock
aStream
rv
)
;
return
;
}
}
void
FetchStream
:
:
WriteIntoReadRequestCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
uint8_t
aFlags
void
*
aBuffer
size_t
aLength
size_t
*
aByteWritten
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aBuffer
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aByteWritten
)
;
RefPtr
<
FetchStream
>
stream
=
static_cast
<
FetchStream
*
>
(
aUnderlyingSource
)
;
stream
-
>
AssertIsOnOwningThread
(
)
;
MutexAutoLock
lock
(
stream
-
>
mMutex
)
;
MOZ_DIAGNOSTIC_ASSERT
(
stream
-
>
mInputStream
)
;
MOZ_DIAGNOSTIC_ASSERT
(
stream
-
>
mState
=
=
eWriting
)
;
stream
-
>
mState
=
eChecking
;
uint32_t
written
;
nsresult
rv
=
stream
-
>
mInputStream
-
>
Read
(
static_cast
<
char
*
>
(
aBuffer
)
aLength
&
written
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
stream
-
>
ErrorPropagation
(
aCx
lock
aStream
rv
)
;
return
;
}
*
aByteWritten
=
written
;
if
(
written
=
=
0
)
{
stream
-
>
CloseAndReleaseObjects
(
aCx
lock
aStream
)
;
return
;
}
rv
=
stream
-
>
mInputStream
-
>
AsyncWait
(
stream
0
0
stream
-
>
mOwningEventTarget
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
stream
-
>
ErrorPropagation
(
aCx
lock
aStream
rv
)
;
return
;
}
}
JS
:
:
Value
FetchStream
:
:
CancelCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
uint8_t
aFlags
JS
:
:
HandleValue
aReason
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
FetchStream
*
stream
=
static_cast
<
FetchStream
*
>
(
aUnderlyingSource
)
;
stream
-
>
AssertIsOnOwningThread
(
)
;
if
(
stream
-
>
mState
=
=
eInitializing
)
{
stream
-
>
mStreamHolder
-
>
MarkAsRead
(
)
;
}
if
(
stream
-
>
mInputStream
)
{
stream
-
>
mInputStream
-
>
CloseWithStatus
(
NS_BASE_STREAM_CLOSED
)
;
}
stream
-
>
ReleaseObjects
(
)
;
return
JS
:
:
UndefinedValue
(
)
;
}
void
FetchStream
:
:
ClosedCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
uint8_t
aFlags
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
}
void
FetchStream
:
:
ErroredCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
uint8_t
aFlags
JS
:
:
HandleValue
aReason
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
FetchStream
*
stream
=
static_cast
<
FetchStream
*
>
(
aUnderlyingSource
)
;
stream
-
>
AssertIsOnOwningThread
(
)
;
if
(
stream
-
>
mState
=
=
eInitializing
)
{
stream
-
>
mStreamHolder
-
>
MarkAsRead
(
)
;
}
if
(
stream
-
>
mInputStream
)
{
stream
-
>
mInputStream
-
>
CloseWithStatus
(
NS_BASE_STREAM_CLOSED
)
;
}
stream
-
>
ReleaseObjects
(
)
;
}
void
FetchStream
:
:
FinalizeCallback
(
void
*
aUnderlyingSource
uint8_t
aFlags
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aUnderlyingSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aFlags
=
=
FETCH_STREAM_FLAG
)
;
RefPtr
<
FetchStream
>
stream
=
dont_AddRef
(
static_cast
<
FetchStream
*
>
(
aUnderlyingSource
)
)
;
stream
-
>
ReleaseObjects
(
)
;
}
FetchStream
:
:
FetchStream
(
nsIGlobalObject
*
aGlobal
FetchStreamHolder
*
aStreamHolder
nsIInputStream
*
aInputStream
)
:
mMutex
(
"
FetchStream
:
:
mMutex
"
)
mState
(
eInitializing
)
mGlobal
(
aGlobal
)
mStreamHolder
(
aStreamHolder
)
mOwningEventTarget
(
aGlobal
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
mOriginalInputStream
(
aInputStream
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aInputStream
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aStreamHolder
)
;
}
FetchStream
:
:
~
FetchStream
(
)
{
}
void
FetchStream
:
:
ErrorPropagation
(
JSContext
*
aCx
const
MutexAutoLock
&
aProofOfLock
JS
:
:
HandleObject
aStream
nsresult
aError
)
{
AssertIsOnOwningThread
(
)
;
if
(
mState
=
=
eClosed
)
{
return
;
}
if
(
aError
=
=
NS_BASE_STREAM_CLOSED
)
{
CloseAndReleaseObjects
(
aCx
aProofOfLock
aStream
)
;
return
;
}
RefPtr
<
DOMException
>
error
=
DOMException
:
:
Create
(
NS_ERROR_DOM_TYPE_ERR
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
errorValue
(
aCx
)
;
if
(
ToJSValue
(
aCx
error
&
errorValue
)
)
{
MutexAutoUnlock
unlock
(
mMutex
)
;
JS
:
:
ReadableStreamError
(
aCx
aStream
errorValue
)
;
}
ReleaseObjects
(
aProofOfLock
)
;
}
NS_IMETHODIMP
FetchStream
:
:
OnInputStreamReady
(
nsIAsyncInputStream
*
aStream
)
{
AssertIsOnOwningThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aStream
)
;
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eClosed
)
{
return
NS_OK
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mInputStream
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mState
=
=
eReading
|
|
mState
=
=
eChecking
)
;
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mGlobal
)
)
)
{
return
NS_ERROR_FAILURE
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
stream
(
cx
mStreamHolder
-
>
ReadableStreamBody
(
)
)
;
uint64_t
size
=
0
;
nsresult
rv
=
mInputStream
-
>
Available
(
&
size
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
size
=
=
0
)
{
rv
=
NS_BASE_STREAM_CLOSED
;
}
if
(
rv
=
=
NS_BASE_STREAM_CLOSED
|
|
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
ErrorPropagation
(
cx
lock
stream
rv
)
;
return
NS_OK
;
}
if
(
mState
=
=
eChecking
)
{
mState
=
eWaiting
;
return
NS_OK
;
}
mState
=
eWriting
;
{
MutexAutoUnlock
unlock
(
mMutex
)
;
JS
:
:
ReadableStreamUpdateDataAvailableFromSource
(
cx
stream
size
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mState
=
=
eChecking
)
;
return
NS_OK
;
}
nsresult
FetchStream
:
:
RetrieveInputStream
(
void
*
aUnderlyingReadableStreamSource
nsIInputStream
*
*
aInputStream
)
{
MOZ_ASSERT
(
aUnderlyingReadableStreamSource
)
;
MOZ_ASSERT
(
aInputStream
)
;
RefPtr
<
FetchStream
>
stream
=
static_cast
<
FetchStream
*
>
(
aUnderlyingReadableStreamSource
)
;
stream
-
>
AssertIsOnOwningThread
(
)
;
if
(
NS_WARN_IF
(
!
stream
-
>
mOriginalInputStream
)
)
{
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
nsCOMPtr
<
nsIInputStream
>
inputStream
=
stream
-
>
mOriginalInputStream
;
inputStream
.
forget
(
aInputStream
)
;
return
NS_OK
;
}
void
FetchStream
:
:
Close
(
)
{
AssertIsOnOwningThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eClosed
)
{
return
;
}
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mGlobal
)
)
)
{
ReleaseObjects
(
lock
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
stream
(
cx
mStreamHolder
-
>
ReadableStreamBody
(
)
)
;
CloseAndReleaseObjects
(
cx
lock
stream
)
;
}
void
FetchStream
:
:
CloseAndReleaseObjects
(
JSContext
*
aCx
const
MutexAutoLock
&
aProofOfLock
JS
:
:
HandleObject
aStream
)
{
AssertIsOnOwningThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mState
!
=
eClosed
)
;
ReleaseObjects
(
aProofOfLock
)
;
MutexAutoUnlock
unlock
(
mMutex
)
;
if
(
JS
:
:
ReadableStreamIsReadable
(
aStream
)
)
{
JS
:
:
ReadableStreamClose
(
aCx
aStream
)
;
}
}
void
FetchStream
:
:
ReleaseObjects
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
ReleaseObjects
(
lock
)
;
}
void
FetchStream
:
:
ReleaseObjects
(
const
MutexAutoLock
&
aProofOfLock
)
{
if
(
mState
=
=
eClosed
)
{
return
;
}
mState
=
eClosed
;
if
(
!
NS_IsMainThread
(
)
&
&
!
IsCurrentThreadRunningWorker
(
)
)
{
if
(
mWorkerRef
)
{
RefPtr
<
WorkerShutdown
>
r
=
new
WorkerShutdown
(
mWorkerRef
-
>
GetUnsafePrivate
(
)
this
)
;
Unused
<
<
NS_WARN_IF
(
!
r
-
>
Dispatch
(
)
)
;
return
;
}
RefPtr
<
FetchStream
>
self
=
this
;
RefPtr
<
Runnable
>
r
=
NS_NewRunnableFunction
(
"
FetchStream
:
:
ReleaseObjects
"
[
self
]
(
)
{
self
-
>
ReleaseObjects
(
)
;
}
)
;
mOwningEventTarget
-
>
Dispatch
(
r
.
forget
(
)
)
;
return
;
}
AssertIsOnOwningThread
(
)
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
RemoveObserver
(
this
DOM_WINDOW_DESTROYED_TOPIC
)
;
}
}
mWorkerRef
=
nullptr
;
mGlobal
=
nullptr
;
mStreamHolder
-
>
NullifyStream
(
)
;
mStreamHolder
=
nullptr
;
}
#
ifdef
DEBUG
void
FetchStream
:
:
AssertIsOnOwningThread
(
)
{
NS_ASSERT_OWNINGTHREAD
(
FetchStream
)
;
}
#
endif
NS_IMETHODIMP
FetchStream
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
AssertIsOnMainThread
(
)
;
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
strcmp
(
aTopic
DOM_WINDOW_DESTROYED_TOPIC
)
=
=
0
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
SameCOMIdentity
(
aSubject
window
)
)
{
Close
(
)
;
}
return
NS_OK
;
}
}
}
