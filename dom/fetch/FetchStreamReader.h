#
ifndef
mozilla_dom_FetchStreamReader_h
#
define
mozilla_dom_FetchStreamReader_h
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
FetchBinding
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
:
:
dom
{
class
ReadableStream
;
class
ReadableStreamDefaultReader
;
class
WeakWorkerRef
;
class
FetchStreamReader
final
:
public
nsIOutputStreamCallback
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
FetchStreamReader
nsIOutputStreamCallback
)
NS_DECL_NSIOUTPUTSTREAMCALLBACK
static
nsresult
Create
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
FetchStreamReader
*
*
aStreamReader
nsIInputStream
*
*
aInputStream
)
;
void
ChunkSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
;
void
ErrorSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
CloseAndRelease
(
JSContext
*
aCx
nsresult
aStatus
)
;
void
StartConsuming
(
JSContext
*
aCx
ReadableStream
*
aStream
ReadableStreamDefaultReader
*
*
aReader
ErrorResult
&
aRv
)
;
private
:
explicit
FetchStreamReader
(
nsIGlobalObject
*
aGlobal
)
;
~
FetchStreamReader
(
)
;
nsresult
WriteBuffer
(
)
;
void
ReportErrorToConsole
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsIEventTarget
>
mOwningEventTarget
;
nsCOMPtr
<
nsIAsyncOutputStream
>
mPipeOut
;
RefPtr
<
WeakWorkerRef
>
mWorkerRef
;
RefPtr
<
ReadableStreamDefaultReader
>
mReader
;
nsTArray
<
uint8_t
>
mBuffer
;
uint32_t
mBufferRemaining
;
uint32_t
mBufferOffset
;
bool
mStreamClosed
;
}
;
}
#
endif
