#
include
"
mozilla
/
dom
/
ChannelInfo
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
net
/
HttpBaseChannel
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsSerializationHelper
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
void
ChannelInfo
:
:
InitFromDocument
(
Document
*
aDoc
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInited
"
Cannot
initialize
the
object
twice
"
)
;
nsCOMPtr
<
nsITransportSecurityInfo
>
securityInfo
(
aDoc
-
>
GetSecurityInfo
(
)
)
;
if
(
securityInfo
)
{
SetSecurityInfo
(
securityInfo
)
;
}
mInited
=
true
;
}
void
ChannelInfo
:
:
InitFromChannel
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInited
"
Cannot
initialize
the
object
twice
"
)
;
nsCOMPtr
<
nsITransportSecurityInfo
>
securityInfo
;
aChannel
-
>
GetSecurityInfo
(
getter_AddRefs
(
securityInfo
)
)
;
if
(
securityInfo
)
{
SetSecurityInfo
(
securityInfo
)
;
}
mInited
=
true
;
}
void
ChannelInfo
:
:
InitFromChromeGlobal
(
nsIGlobalObject
*
aGlobal
)
{
MOZ_ASSERT
(
!
mInited
"
Cannot
initialize
the
object
twice
"
)
;
MOZ_ASSERT
(
aGlobal
)
;
MOZ_RELEASE_ASSERT
(
aGlobal
-
>
PrincipalOrNull
(
)
-
>
IsSystemPrincipal
(
)
)
;
mSecurityInfo
=
nullptr
;
mInited
=
true
;
}
void
ChannelInfo
:
:
InitFromTransportSecurityInfo
(
nsITransportSecurityInfo
*
aSecurityInfo
)
{
MOZ_ASSERT
(
!
mInited
"
Cannot
initialize
the
object
twice
"
)
;
mSecurityInfo
=
aSecurityInfo
;
mInited
=
true
;
}
void
ChannelInfo
:
:
SetSecurityInfo
(
nsITransportSecurityInfo
*
aSecurityInfo
)
{
MOZ_ASSERT
(
!
mSecurityInfo
"
security
info
should
only
be
set
once
"
)
;
mSecurityInfo
=
aSecurityInfo
;
}
nsresult
ChannelInfo
:
:
ResurrectInfoOnChannel
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mInited
)
;
if
(
mSecurityInfo
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
MOZ_ASSERT
(
httpChannel
)
;
net
:
:
HttpBaseChannel
*
httpBaseChannel
=
static_cast
<
net
:
:
HttpBaseChannel
*
>
(
httpChannel
.
get
(
)
)
;
nsresult
rv
=
httpBaseChannel
-
>
OverrideSecurityInfo
(
mSecurityInfo
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
already_AddRefed
<
nsITransportSecurityInfo
>
ChannelInfo
:
:
SecurityInfo
(
)
const
{
nsCOMPtr
<
nsITransportSecurityInfo
>
securityInfo
(
mSecurityInfo
)
;
return
securityInfo
.
forget
(
)
;
}
