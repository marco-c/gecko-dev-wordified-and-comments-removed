#
ifndef
mozilla_dom_Fetch_h
#
define
mozilla_dom_Fetch_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
dom
/
AbortSignal
.
h
"
#
include
"
mozilla
/
dom
/
BodyConsumer
.
h
"
#
include
"
mozilla
/
dom
/
BodyStream
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
FetchStreamReader
.
h
"
#
include
"
mozilla
/
dom
/
RequestBinding
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
RuntimeService
.
h
"
class
nsIGlobalObject
;
class
nsIEventTarget
;
namespace
mozilla
{
class
ErrorResult
;
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
BlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrUSVString
;
class
BlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrReadableStreamOrUSVString
;
class
BlobImpl
;
class
InternalRequest
;
class
OwningBlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrUSVString
;
class
ReadableStream
;
class
RequestOrUSVString
;
class
WorkerPrivate
;
enum
class
CallerType
:
uint32_t
;
already_AddRefed
<
Promise
>
FetchRequest
(
nsIGlobalObject
*
aGlobal
const
RequestOrUSVString
&
aInput
const
RequestInit
&
aInit
CallerType
aCallerType
ErrorResult
&
aRv
)
;
nsresult
UpdateRequestReferrer
(
nsIGlobalObject
*
aGlobal
InternalRequest
*
aRequest
)
;
namespace
fetch
{
using
BodyInit
=
BlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrUSVString
;
using
ResponseBodyInit
=
BlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrReadableStreamOrUSVString
;
using
OwningBodyInit
=
OwningBlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrUSVString
;
}
;
nsresult
ExtractByteStreamFromBody
(
const
fetch
:
:
OwningBodyInit
&
aBodyInit
nsIInputStream
*
*
aStream
nsCString
&
aContentType
uint64_t
&
aContentLength
)
;
nsresult
ExtractByteStreamFromBody
(
const
fetch
:
:
BodyInit
&
aBodyInit
nsIInputStream
*
*
aStream
nsCString
&
aContentType
uint64_t
&
aContentLength
)
;
nsresult
ExtractByteStreamFromBody
(
const
fetch
:
:
ResponseBodyInit
&
aBodyInit
nsIInputStream
*
*
aStream
nsCString
&
aContentType
uint64_t
&
aContentLength
)
;
template
<
class
Derived
>
class
FetchBody
:
public
BodyStreamHolder
public
AbortFollower
{
public
:
using
BodyStreamHolder
:
:
QueryInterface
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
FetchBody
BodyStreamHolder
)
bool
GetBodyUsed
(
ErrorResult
&
aRv
)
const
;
bool
CheckBodyUsed
(
)
const
;
already_AddRefed
<
Promise
>
ArrayBuffer
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
ConsumeBody
(
aCx
BodyConsumer
:
:
CONSUME_ARRAYBUFFER
aRv
)
;
}
already_AddRefed
<
Promise
>
Blob
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
ConsumeBody
(
aCx
BodyConsumer
:
:
CONSUME_BLOB
aRv
)
;
}
already_AddRefed
<
Promise
>
FormData
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
ConsumeBody
(
aCx
BodyConsumer
:
:
CONSUME_FORMDATA
aRv
)
;
}
already_AddRefed
<
Promise
>
Json
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
ConsumeBody
(
aCx
BodyConsumer
:
:
CONSUME_JSON
aRv
)
;
}
already_AddRefed
<
Promise
>
Text
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
ConsumeBody
(
aCx
BodyConsumer
:
:
CONSUME_TEXT
aRv
)
;
}
#
ifdef
MOZ_DOM_STREAMS
already_AddRefed
<
ReadableStream
>
GetBody
(
ErrorResult
&
aRv
)
{
MOZ_CRASH
(
"
MOZ_DOM_STREAMS
:
NYI
"
)
;
}
#
else
void
GetBody
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aBodyOut
ErrorResult
&
aRv
)
;
#
endif
void
GetMimeType
(
nsACString
&
aMimeType
)
;
const
nsACString
&
BodyBlobURISpec
(
)
const
;
const
nsAString
&
BodyLocalPath
(
)
const
;
void
MaybeTeeReadableStreamBody
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aBodyOut
FetchStreamReader
*
*
aStreamReader
nsIInputStream
*
*
aInputStream
ErrorResult
&
aRv
)
;
void
SetBodyUsed
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
void
NullifyStream
(
)
override
{
mReadableStreamBody
=
nullptr
;
mReadableStreamReader
=
nullptr
;
mFetchStreamReader
=
nullptr
;
}
void
SetReadableStreamBody
(
JSObject
*
aBody
)
override
{
mReadableStreamBody
=
aBody
;
}
JSObject
*
GetReadableStreamBody
(
)
override
{
return
mReadableStreamBody
;
}
void
MarkAsRead
(
)
override
{
mBodyUsed
=
true
;
}
virtual
AbortSignalImpl
*
GetSignalImpl
(
)
const
=
0
;
void
RunAbortAlgorithm
(
)
override
;
already_AddRefed
<
Promise
>
ConsumeBody
(
JSContext
*
aCx
BodyConsumer
:
:
ConsumeType
aType
ErrorResult
&
aRv
)
;
protected
:
nsCOMPtr
<
nsIGlobalObject
>
mOwner
;
JS
:
:
Heap
<
JSObject
*
>
mReadableStreamBody
;
JS
:
:
Heap
<
JSObject
*
>
mReadableStreamReader
;
RefPtr
<
FetchStreamReader
>
mFetchStreamReader
;
explicit
FetchBody
(
nsIGlobalObject
*
aOwner
)
;
virtual
~
FetchBody
(
)
;
void
SetReadableStreamBody
(
JSContext
*
aCx
JSObject
*
aBody
)
;
private
:
Derived
*
DerivedClass
(
)
const
{
return
static_cast
<
Derived
*
>
(
const_cast
<
FetchBody
*
>
(
this
)
)
;
}
void
LockStream
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
ErrorResult
&
aRv
)
;
void
AssertIsOnTargetThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
=
=
!
GetCurrentThreadWorkerPrivate
(
)
)
;
}
bool
mBodyUsed
;
nsCOMPtr
<
nsIEventTarget
>
mMainThreadEventTarget
;
}
;
class
EmptyBody
final
:
public
FetchBody
<
EmptyBody
>
{
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
EmptyBody
FetchBody
<
EmptyBody
>
)
public
:
static
already_AddRefed
<
EmptyBody
>
Create
(
nsIGlobalObject
*
aGlobal
mozilla
:
:
ipc
:
:
PrincipalInfo
*
aPrincipalInfo
AbortSignalImpl
*
aAbortSignalImpl
const
nsACString
&
aMimeType
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
AbortSignalImpl
*
GetSignalImpl
(
)
const
override
{
return
mAbortSignalImpl
;
}
const
UniquePtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
&
GetPrincipalInfo
(
)
const
{
return
mPrincipalInfo
;
}
void
GetMimeType
(
nsACString
&
aMimeType
)
{
aMimeType
=
mMimeType
;
}
void
GetBody
(
nsIInputStream
*
*
aStream
int64_t
*
aBodyLength
=
nullptr
)
;
using
FetchBody
:
:
BodyBlobURISpec
;
const
nsACString
&
BodyBlobURISpec
(
)
const
{
return
EmptyCString
(
)
;
}
using
FetchBody
:
:
BodyLocalPath
;
const
nsAString
&
BodyLocalPath
(
)
const
{
return
EmptyString
(
)
;
}
private
:
EmptyBody
(
nsIGlobalObject
*
aGlobal
mozilla
:
:
ipc
:
:
PrincipalInfo
*
aPrincipalInfo
AbortSignalImpl
*
aAbortSignalImpl
const
nsACString
&
aMimeType
already_AddRefed
<
nsIInputStream
>
aBodyStream
)
;
~
EmptyBody
(
)
;
UniquePtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
mPrincipalInfo
;
RefPtr
<
AbortSignalImpl
>
mAbortSignalImpl
;
nsCString
mMimeType
;
nsCOMPtr
<
nsIInputStream
>
mBodyStream
;
}
;
}
}
#
endif
