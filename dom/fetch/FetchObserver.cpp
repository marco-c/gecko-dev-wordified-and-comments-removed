#
include
"
FetchObserver
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
EventBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
FetchObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FetchObserver
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
FetchObserver
:
:
FetchObserver
(
nsIGlobalObject
*
aGlobal
AbortSignalImpl
*
aSignalImpl
)
:
DOMEventTargetHelper
(
aGlobal
)
mState
(
FetchState
:
:
Requesting
)
{
if
(
aSignalImpl
)
{
Follow
(
aSignalImpl
)
;
}
}
JSObject
*
FetchObserver
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FetchObserver_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
FetchState
FetchObserver
:
:
State
(
)
const
{
return
mState
;
}
void
FetchObserver
:
:
RunAbortAlgorithm
(
)
{
SetState
(
FetchState
:
:
Aborted
)
;
}
void
FetchObserver
:
:
SetState
(
FetchState
aState
)
{
MOZ_ASSERT
(
mState
<
aState
)
;
if
(
mState
=
=
FetchState
:
:
Aborted
|
|
mState
=
=
FetchState
:
:
Errored
|
|
mState
=
=
FetchState
:
:
Complete
)
{
return
;
}
if
(
mState
=
=
FetchState
:
:
Requesting
&
&
aState
=
=
FetchState
:
:
Complete
)
{
SetState
(
FetchState
:
:
Responding
)
;
}
mState
=
aState
;
if
(
mState
=
=
FetchState
:
:
Aborted
|
|
mState
=
=
FetchState
:
:
Errored
|
|
mState
=
=
FetchState
:
:
Complete
)
{
Unfollow
(
)
;
}
EventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
RefPtr
<
Event
>
event
=
Event
:
:
Constructor
(
this
u
"
statechange
"
_ns
init
)
;
event
-
>
SetTrusted
(
true
)
;
DispatchEvent
(
*
event
)
;
}
}
