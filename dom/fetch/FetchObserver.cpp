#
include
"
FetchObserver
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
FetchObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
FetchObserver
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
FetchObserver
DOMEventTargetHelper
)
bool
FetchObserver
:
:
IsEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
{
if
(
NS_IsMainThread
(
)
)
{
return
Preferences
:
:
GetBool
(
"
dom
.
fetchObserver
.
enabled
"
false
)
;
}
using
namespace
workers
;
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
aCx
)
;
if
(
!
workerPrivate
)
{
return
false
;
}
return
workerPrivate
-
>
FetchObserverEnabled
(
)
;
}
FetchObserver
:
:
FetchObserver
(
nsIGlobalObject
*
aGlobal
FetchState
aState
)
:
DOMEventTargetHelper
(
aGlobal
)
mState
(
aState
)
{
}
JSObject
*
FetchObserver
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FetchObserverBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
FetchState
FetchObserver
:
:
State
(
)
const
{
return
mState
;
}
}
}
