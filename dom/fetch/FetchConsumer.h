#
ifndef
mozilla_dom_FetchConsumer_h
#
define
mozilla_dom_FetchConsumer_h
#
include
"
Fetch
.
h
"
#
include
"
mozilla
/
dom
/
AbortSignal
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIThread
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
namespace
workers
{
class
WorkerPrivate
;
class
WorkerHolder
;
}
template
<
class
Derived
>
class
FetchBody
;
template
<
class
Derived
>
class
FetchBodyConsumer
final
:
public
nsIObserver
public
nsSupportsWeakReference
public
AbortSignal
:
:
Follower
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
Promise
>
Create
(
nsIGlobalObject
*
aGlobal
nsIEventTarget
*
aMainThreadEventTarget
FetchBody
<
Derived
>
*
aBody
AbortSignal
*
aSignal
FetchConsumeType
aType
ErrorResult
&
aRv
)
;
void
ReleaseObject
(
)
;
FetchBody
<
Derived
>
*
Body
(
)
const
{
return
mBody
;
}
void
BeginConsumeBodyMainThread
(
)
;
void
ContinueConsumeBody
(
nsresult
aStatus
uint32_t
aLength
uint8_t
*
aResult
)
;
void
ContinueConsumeBlobBody
(
BlobImpl
*
aBlobImpl
)
;
void
ShutDownMainThreadConsuming
(
)
;
workers
:
:
WorkerPrivate
*
GetWorkerPrivate
(
)
const
{
return
mWorkerPrivate
;
}
void
NullifyConsumeBodyPump
(
)
{
mConsumeBodyPump
=
nullptr
;
}
void
Aborted
(
)
override
;
private
:
FetchBodyConsumer
(
nsIEventTarget
*
aMainThreadEventTarget
nsIGlobalObject
*
aGlobalObject
workers
:
:
WorkerPrivate
*
aWorkerPrivate
FetchBody
<
Derived
>
*
aBody
Promise
*
aPromise
FetchConsumeType
aType
)
;
~
FetchBodyConsumer
(
)
;
void
AssertIsOnTargetThread
(
)
const
;
bool
RegisterWorkerHolder
(
workers
:
:
WorkerPrivate
*
aWorkerPrivate
)
;
nsCOMPtr
<
nsIThread
>
mTargetThread
;
nsCOMPtr
<
nsIEventTarget
>
mMainThreadEventTarget
;
RefPtr
<
FetchBody
<
Derived
>
>
mBody
;
UniquePtr
<
workers
:
:
WorkerHolder
>
mWorkerHolder
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
workers
:
:
WorkerPrivate
*
mWorkerPrivate
;
nsCOMPtr
<
nsIInputStreamPump
>
mConsumeBodyPump
;
FetchConsumeType
mConsumeType
;
RefPtr
<
Promise
>
mConsumePromise
;
bool
mBodyConsumed
;
bool
mShuttingDown
;
}
;
}
}
#
endif
