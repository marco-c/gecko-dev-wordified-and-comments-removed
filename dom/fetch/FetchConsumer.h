#
ifndef
mozilla_dom_FetchConsumer_h
#
define
mozilla_dom_FetchConsumer_h
#
include
"
Fetch
.
h
"
#
include
"
mozilla
/
dom
/
AbortSignal
.
h
"
#
include
"
mozilla
/
dom
/
MutableBlobStorage
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIThread
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
ThreadSafeWorkerRef
;
class
FetchBodyConsumer
final
:
public
nsIObserver
public
nsSupportsWeakReference
public
AbortFollower
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
Promise
>
Create
(
nsIGlobalObject
*
aGlobal
nsIEventTarget
*
aMainThreadEventTarget
nsIInputStream
*
aBodyStream
AbortSignalImpl
*
aSignalImpl
FetchConsumeType
aType
const
nsACString
&
aBodyBlobURISpec
const
nsAString
&
aBodyLocalPath
const
nsACString
&
aBodyMimeType
MutableBlobStorage
:
:
MutableBlobStorageType
aBlobStorageType
ErrorResult
&
aRv
)
;
void
ReleaseObject
(
)
;
void
BeginConsumeBodyMainThread
(
ThreadSafeWorkerRef
*
aWorkerRef
)
;
void
OnBlobResult
(
Blob
*
aBlob
ThreadSafeWorkerRef
*
aWorkerRef
=
nullptr
)
;
void
ContinueConsumeBody
(
nsresult
aStatus
uint32_t
aLength
uint8_t
*
aResult
bool
aShuttingDown
=
false
)
;
void
ContinueConsumeBlobBody
(
BlobImpl
*
aBlobImpl
bool
aShuttingDown
=
false
)
;
void
DispatchContinueConsumeBlobBody
(
BlobImpl
*
aBlobImpl
ThreadSafeWorkerRef
*
aWorkerRef
)
;
void
ShutDownMainThreadConsuming
(
)
;
void
NullifyConsumeBodyPump
(
)
{
mShuttingDown
=
true
;
mConsumeBodyPump
=
nullptr
;
}
void
Abort
(
)
override
;
private
:
FetchBodyConsumer
(
nsIEventTarget
*
aMainThreadEventTarget
nsIGlobalObject
*
aGlobalObject
nsIInputStream
*
aBodyStream
Promise
*
aPromise
FetchConsumeType
aType
const
nsACString
&
aBodyBlobURISpec
const
nsAString
&
aBodyLocalPath
const
nsACString
&
aBodyMimeType
MutableBlobStorage
:
:
MutableBlobStorageType
aBlobStorageType
)
;
~
FetchBodyConsumer
(
)
;
nsresult
GetBodyLocalFile
(
nsIFile
*
*
aFile
)
const
;
void
AssertIsOnTargetThread
(
)
const
;
nsCOMPtr
<
nsIThread
>
mTargetThread
;
nsCOMPtr
<
nsIEventTarget
>
mMainThreadEventTarget
;
nsCOMPtr
<
nsIInputStream
>
mBodyStream
;
MutableBlobStorage
:
:
MutableBlobStorageType
mBlobStorageType
;
nsCString
mBodyMimeType
;
nsCString
mBodyBlobURISpec
;
nsString
mBodyLocalPath
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsIInputStreamPump
>
mConsumeBodyPump
;
FetchConsumeType
mConsumeType
;
RefPtr
<
Promise
>
mConsumePromise
;
bool
mBodyConsumed
;
bool
mShuttingDown
;
}
;
}
}
#
endif
