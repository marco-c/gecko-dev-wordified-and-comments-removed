#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
FetchService
.
h
"
#
include
"
mozilla
/
dom
/
InternalRequest
.
h
"
#
include
"
mozilla
/
dom
/
InternalResponse
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
:
:
dom
{
FetchService
:
:
FetchInstance
:
:
FetchInstance
(
SafeRefPtr
<
InternalRequest
>
aRequest
)
:
mRequest
(
std
:
:
move
(
aRequest
)
)
{
}
nsresult
FetchService
:
:
FetchInstance
:
:
Initialize
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
FetchService
:
:
FetchInstance
:
:
~
FetchInstance
(
)
=
default
;
RefPtr
<
FetchServiceResponsePromise
>
FetchService
:
:
FetchInstance
:
:
Fetch
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mResponsePromiseHolder
.
Ensure
(
__func__
)
;
}
StaticRefPtr
<
FetchService
>
gInstance
;
already_AddRefed
<
FetchService
>
FetchService
:
:
GetInstance
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gInstance
)
{
gInstance
=
MakeRefPtr
<
FetchService
>
(
)
;
ClearOnShutdown
(
&
gInstance
)
;
}
RefPtr
<
FetchService
>
service
=
gInstance
;
return
service
.
forget
(
)
;
}
RefPtr
<
FetchServiceResponsePromise
>
FetchService
:
:
NetworkErrorResponse
(
nsresult
aRv
)
{
return
FetchServiceResponsePromise
:
:
CreateAndResolve
(
InternalResponse
:
:
NetworkError
(
aRv
)
__func__
)
;
}
FetchService
:
:
FetchService
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
FetchService
:
:
~
FetchService
(
)
=
default
;
RefPtr
<
FetchServiceResponsePromise
>
FetchService
:
:
Fetch
(
SafeRefPtr
<
InternalRequest
>
aRequest
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
FetchInstance
>
fetch
=
MakeRefPtr
<
FetchInstance
>
(
aRequest
.
clonePtr
(
)
)
;
nsresult
rv
=
fetch
-
>
Initialize
(
aChannel
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NetworkErrorResponse
(
rv
)
;
}
RefPtr
<
FetchServiceResponsePromise
>
responsePromise
=
fetch
-
>
Fetch
(
)
;
if
(
!
mFetchInstanceTable
.
WithEntryHandle
(
responsePromise
[
&
]
(
auto
&
&
entry
)
{
if
(
entry
.
HasEntry
(
)
)
{
return
false
;
}
entry
.
Insert
(
fetch
)
;
return
true
;
}
)
)
{
return
NetworkErrorResponse
(
NS_ERROR_UNEXPECTED
)
;
}
return
responsePromise
;
}
void
FetchService
:
:
CancelFetch
(
RefPtr
<
FetchServiceResponsePromise
>
&
&
aResponsePromise
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aResponsePromise
)
;
auto
entry
=
mFetchInstanceTable
.
Lookup
(
aResponsePromise
)
;
if
(
entry
)
{
entry
.
Remove
(
)
;
}
}
}
