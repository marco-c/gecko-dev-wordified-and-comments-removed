#
ifndef
mozilla_dom_FetchController_h
#
define
mozilla_dom_FetchController_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
FetchSignal
;
class
FetchController
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
FetchController
)
static
bool
IsEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
static
already_AddRefed
<
FetchController
>
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
explicit
FetchController
(
nsIGlobalObject
*
aGlobal
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
FetchSignal
*
Signal
(
)
;
void
Abort
(
)
;
void
Follow
(
FetchSignal
&
aSignal
)
;
void
Unfollow
(
FetchSignal
&
aSignal
)
;
private
:
~
FetchController
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
FetchSignal
>
mSignal
;
bool
mAborted
;
}
;
}
}
#
endif
