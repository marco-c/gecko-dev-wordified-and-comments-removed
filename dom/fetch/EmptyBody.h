#
ifndef
mozilla_dom_EmptyBody_h
#
define
mozilla_dom_EmptyBody_h
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
dom
/
Fetch
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
EmptyBody
final
:
public
FetchBody
<
EmptyBody
>
{
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
EmptyBody
FetchBody
<
EmptyBody
>
)
public
:
static
already_AddRefed
<
EmptyBody
>
Create
(
nsIGlobalObject
*
aGlobal
mozilla
:
:
ipc
:
:
PrincipalInfo
*
aPrincipalInfo
AbortSignalImpl
*
aAbortSignalImpl
const
nsACString
&
aMimeType
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
AbortSignalImpl
*
GetSignalImpl
(
)
const
override
{
return
mAbortSignalImpl
;
}
const
UniquePtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
&
GetPrincipalInfo
(
)
const
{
return
mPrincipalInfo
;
}
void
GetMimeType
(
nsACString
&
aMimeType
)
{
aMimeType
=
mMimeType
;
}
void
GetBody
(
nsIInputStream
*
*
aStream
int64_t
*
aBodyLength
=
nullptr
)
;
using
FetchBody
:
:
BodyBlobURISpec
;
const
nsACString
&
BodyBlobURISpec
(
)
const
{
return
EmptyCString
(
)
;
}
using
FetchBody
:
:
BodyLocalPath
;
const
nsAString
&
BodyLocalPath
(
)
const
{
return
EmptyString
(
)
;
}
private
:
EmptyBody
(
nsIGlobalObject
*
aGlobal
mozilla
:
:
ipc
:
:
PrincipalInfo
*
aPrincipalInfo
AbortSignalImpl
*
aAbortSignalImpl
const
nsACString
&
aMimeType
already_AddRefed
<
nsIInputStream
>
mBodyStream
)
;
~
EmptyBody
(
)
;
UniquePtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
mPrincipalInfo
;
RefPtr
<
AbortSignalImpl
>
mAbortSignalImpl
;
nsCString
mMimeType
;
nsCOMPtr
<
nsIInputStream
>
mBodyStream
;
}
;
}
}
#
endif
