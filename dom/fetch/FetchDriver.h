#
ifndef
mozilla_dom_FetchDriver_h
#
define
mozilla_dom_FetchDriver_h
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
class
nsIDocument
;
class
nsIOutputStream
;
class
nsILoadGroup
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
InternalRequest
;
class
InternalResponse
;
class
FetchDriverObserver
{
public
:
FetchDriverObserver
(
)
:
mGotResponseAvailable
(
false
)
{
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FetchDriverObserver
)
;
void
OnResponseAvailable
(
InternalResponse
*
aResponse
)
{
MOZ_ASSERT
(
!
mGotResponseAvailable
)
;
mGotResponseAvailable
=
true
;
OnResponseAvailableInternal
(
aResponse
)
;
}
virtual
void
OnResponseEnd
(
)
{
}
;
protected
:
virtual
~
FetchDriverObserver
(
)
{
}
;
virtual
void
OnResponseAvailableInternal
(
InternalResponse
*
aResponse
)
=
0
;
private
:
bool
mGotResponseAvailable
;
}
;
class
FetchDriver
final
:
public
nsIStreamListener
public
nsIChannelEventSink
public
nsIInterfaceRequestor
public
nsIThreadRetargetableStreamListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
explicit
FetchDriver
(
InternalRequest
*
aRequest
nsIPrincipal
*
aPrincipal
nsILoadGroup
*
aLoadGroup
)
;
NS_IMETHOD
Fetch
(
FetchDriverObserver
*
aObserver
)
;
void
SetDocument
(
nsIDocument
*
aDocument
)
;
private
:
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
RefPtr
<
InternalRequest
>
mRequest
;
RefPtr
<
InternalResponse
>
mResponse
;
nsCOMPtr
<
nsIOutputStream
>
mPipeOutputStream
;
RefPtr
<
FetchDriverObserver
>
mObserver
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
DebugOnly
<
bool
>
mResponseAvailableCalled
;
DebugOnly
<
bool
>
mFetchCalled
;
FetchDriver
(
)
=
delete
;
FetchDriver
(
const
FetchDriver
&
)
=
delete
;
FetchDriver
&
operator
=
(
const
FetchDriver
&
)
=
delete
;
~
FetchDriver
(
)
;
nsresult
ContinueFetch
(
)
;
nsresult
HttpFetch
(
)
;
already_AddRefed
<
InternalResponse
>
BeginAndGetFilteredResponse
(
InternalResponse
*
aResponse
nsIURI
*
aFinalURI
bool
aFoundOpaqueRedirect
)
;
nsresult
FailWithNetworkError
(
)
;
}
;
}
}
#
endif
