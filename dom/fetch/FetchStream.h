#
ifndef
mozilla_dom_FetchStream_h
#
define
mozilla_dom_FetchStream_h
#
include
"
Fetch
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Stream
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIGlobalObject
;
class
nsIInputStream
;
namespace
mozilla
{
namespace
dom
{
class
FetchStreamHolder
;
class
WeakWorkerRef
;
class
FetchStream
final
:
public
nsIInputStreamCallback
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIOBSERVER
static
void
Create
(
JSContext
*
aCx
FetchStreamHolder
*
aStreamHolder
nsIGlobalObject
*
aGlobal
nsIInputStream
*
aInputStream
JS
:
:
MutableHandle
<
JSObject
*
>
aStream
ErrorResult
&
aRv
)
;
void
Close
(
)
;
static
nsresult
RetrieveInputStream
(
void
*
aUnderlyingReadableStreamSource
nsIInputStream
*
*
aInputStream
)
;
private
:
FetchStream
(
nsIGlobalObject
*
aGlobal
FetchStreamHolder
*
aStreamHolder
nsIInputStream
*
aInputStream
)
;
~
FetchStream
(
)
;
#
ifdef
DEBUG
void
AssertIsOnOwningThread
(
)
;
#
else
void
AssertIsOnOwningThread
(
)
{
}
#
endif
static
void
RequestDataCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
size_t
aDesiredSize
)
;
static
void
WriteIntoReadRequestCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
void
*
aBuffer
size_t
aLength
size_t
*
aByteWritten
)
;
static
JS
:
:
Value
CancelCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
JS
:
:
HandleValue
aReason
)
;
static
void
ClosedCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
)
;
static
void
ErroredCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aStream
void
*
aUnderlyingSource
JS
:
:
HandleValue
reason
)
;
static
void
FinalizeCallback
(
void
*
aUnderlyingSource
)
;
void
ErrorPropagation
(
JSContext
*
aCx
const
MutexAutoLock
&
aProofOfLock
JS
:
:
HandleObject
aStream
nsresult
aRv
)
;
void
CloseAndReleaseObjects
(
JSContext
*
aCx
const
MutexAutoLock
&
aProofOfLock
JS
:
:
HandleObject
aSteam
)
;
class
WorkerShutdown
;
void
ReleaseObjects
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
ReleaseObjects
(
)
;
enum
State
{
eInitializing
eWaiting
eReading
eWriting
eChecking
eClosed
}
;
Mutex
mMutex
;
State
mState
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
FetchStreamHolder
>
mStreamHolder
;
nsCOMPtr
<
nsIEventTarget
>
mOwningEventTarget
;
nsCOMPtr
<
nsIInputStream
>
mOriginalInputStream
;
nsCOMPtr
<
nsIAsyncInputStream
>
mInputStream
;
RefPtr
<
WeakWorkerRef
>
mWorkerRef
;
}
;
}
}
#
endif
