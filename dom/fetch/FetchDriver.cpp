#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
dom
/
FetchDriver
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIHttpHeaderVisitor
.
h
"
#
include
"
nsIJARChannel
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIThreadRetargetableRequest
.
h
"
#
include
"
nsIUploadChannel2
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIPipe
.
h
"
#
include
"
nsContentPolicyUtils
.
h
"
#
include
"
nsCORSListenerProxy
.
h
"
#
include
"
nsDataHandler
.
h
"
#
include
"
nsHostObjectProtocolHandler
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsHttpChannel
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
workers
/
Workers
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
Fetch
.
h
"
#
include
"
InternalRequest
.
h
"
#
include
"
InternalResponse
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
FetchDriver
nsIStreamListener
nsIChannelEventSink
nsIInterfaceRequestor
nsIThreadRetargetableStreamListener
)
FetchDriver
:
:
FetchDriver
(
InternalRequest
*
aRequest
nsIPrincipal
*
aPrincipal
nsILoadGroup
*
aLoadGroup
)
:
mPrincipal
(
aPrincipal
)
mLoadGroup
(
aLoadGroup
)
mRequest
(
aRequest
)
mHasBeenCrossSite
(
false
)
mResponseAvailableCalled
(
false
)
mFetchCalled
(
false
)
{
}
FetchDriver
:
:
~
FetchDriver
(
)
{
MOZ_ASSERT
(
mResponseAvailableCalled
)
;
}
nsresult
FetchDriver
:
:
Fetch
(
FetchDriverObserver
*
aObserver
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
!
mFetchCalled
)
;
mFetchCalled
=
true
;
mObserver
=
aObserver
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
SERVICE_WORKER_REQUEST_PASSTHROUGH
mRequest
-
>
WasCreatedByFetchEvent
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
mRequest
-
>
IsSynchronous
(
)
"
Synchronous
fetch
not
supported
"
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableMethod
(
this
&
FetchDriver
:
:
ContinueFetch
)
;
return
NS_DispatchToCurrentThread
(
r
)
;
}
nsresult
FetchDriver
:
:
SetTainting
(
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
if
(
mHasBeenCrossSite
)
{
return
NS_OK
;
}
nsAutoCString
url
;
mRequest
-
>
GetURL
(
url
)
;
nsCOMPtr
<
nsIURI
>
requestURI
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
requestURI
)
url
nullptr
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
NS_IsAboutBlank
(
requestURI
)
|
|
NS_SUCCEEDED
(
mPrincipal
-
>
CheckMayLoad
(
requestURI
false
true
)
)
)
{
return
NS_OK
;
}
mHasBeenCrossSite
=
true
;
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
Same_origin
)
{
return
NS_ERROR_DOM_BAD_URI
;
}
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
No_cors
)
{
mRequest
-
>
MaybeIncreaseResponseTainting
(
LoadTainting
:
:
Opaque
)
;
return
NS_OK
;
}
mRequest
-
>
MaybeIncreaseResponseTainting
(
LoadTainting
:
:
CORS
)
;
return
NS_OK
;
}
nsresult
FetchDriver
:
:
ContinueFetch
(
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
nsresult
rv
=
HttpFetch
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
FailWithNetworkError
(
)
;
}
return
rv
;
}
nsresult
FetchDriver
:
:
HttpFetch
(
)
{
mResponse
=
nullptr
;
nsresult
rv
;
nsCOMPtr
<
nsIIOService
>
ios
=
do_GetIOService
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
url
;
mRequest
-
>
GetURL
(
url
)
;
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
url
nullptr
nullptr
ios
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
SetTainting
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
const
nsLoadFlags
credentialsFlag
=
(
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Omit
|
|
(
mHasBeenCrossSite
&
&
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Same_origin
&
&
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
No_cors
)
)
?
nsIRequest
:
:
LOAD_ANONYMOUS
:
0
;
const
nsLoadFlags
bypassFlag
=
mRequest
-
>
SkipServiceWorker
(
)
?
nsIChannel
:
:
LOAD_BYPASS_SERVICE_WORKER
:
0
;
nsSecurityFlags
secFlags
;
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
Cors
&
&
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Include
)
{
secFlags
=
nsILoadInfo
:
:
SEC_REQUIRE_CORS_DATA_INHERITS
|
nsILoadInfo
:
:
SEC_REQUIRE_CORS_WITH_CREDENTIALS
;
}
else
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
Cors
)
{
secFlags
=
nsILoadInfo
:
:
SEC_REQUIRE_CORS_DATA_INHERITS
;
}
else
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
Same_origin
)
{
secFlags
=
nsILoadInfo
:
:
SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS
;
}
else
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
No_cors
)
{
secFlags
=
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
request
mode
!
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
if
(
mRequest
-
>
GetRedirectMode
(
)
!
=
RequestRedirect
:
:
Follow
)
{
secFlags
|
=
nsILoadInfo
:
:
SEC_DONT_FOLLOW_REDIRECTS
;
}
MOZ_ASSERT
(
mLoadGroup
)
;
nsCOMPtr
<
nsIChannel
>
chan
;
nsLoadFlags
loadFlags
=
nsIRequest
:
:
LOAD_NORMAL
|
credentialsFlag
|
bypassFlag
|
nsIChannel
:
:
LOAD_CLASSIFY_URI
;
if
(
mDocument
)
{
MOZ_ASSERT
(
mDocument
-
>
NodePrincipal
(
)
=
=
mPrincipal
)
;
rv
=
NS_NewChannel
(
getter_AddRefs
(
chan
)
uri
mDocument
secFlags
|
nsILoadInfo
:
:
SEC_ABOUT_BLANK_INHERITS
mRequest
-
>
ContentPolicyType
(
)
mLoadGroup
nullptr
loadFlags
ios
)
;
}
else
{
rv
=
NS_NewChannel
(
getter_AddRefs
(
chan
)
uri
mPrincipal
secFlags
|
nsILoadInfo
:
:
SEC_ABOUT_BLANK_INHERITS
mRequest
-
>
ContentPolicyType
(
)
mLoadGroup
nullptr
loadFlags
ios
)
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mLoadGroup
=
nullptr
;
#
ifdef
DEBUG
{
nsCOMPtr
<
nsIInterfaceRequestor
>
notificationCallbacks
;
chan
-
>
GetNotificationCallbacks
(
getter_AddRefs
(
notificationCallbacks
)
)
;
MOZ_ASSERT
(
!
notificationCallbacks
)
;
}
#
endif
chan
-
>
SetNotificationCallbacks
(
this
)
;
nsCOMPtr
<
nsIHttpChannel
>
httpChan
=
do_QueryInterface
(
chan
)
;
if
(
httpChan
)
{
nsAutoCString
method
;
mRequest
-
>
GetMethod
(
method
)
;
rv
=
httpChan
-
>
SetRequestMethod
(
method
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoTArray
<
InternalHeaders
:
:
Entry
5
>
headers
;
mRequest
-
>
Headers
(
)
-
>
GetEntries
(
headers
)
;
bool
hasAccept
=
false
;
for
(
uint32_t
i
=
0
;
i
<
headers
.
Length
(
)
;
+
+
i
)
{
if
(
!
hasAccept
&
&
headers
[
i
]
.
mName
.
EqualsLiteral
(
"
accept
"
)
)
{
hasAccept
=
true
;
}
if
(
headers
[
i
]
.
mValue
.
IsEmpty
(
)
)
{
httpChan
-
>
SetEmptyRequestHeader
(
headers
[
i
]
.
mName
)
;
}
else
{
httpChan
-
>
SetRequestHeader
(
headers
[
i
]
.
mName
headers
[
i
]
.
mValue
false
)
;
}
}
if
(
!
hasAccept
)
{
httpChan
-
>
SetRequestHeader
(
NS_LITERAL_CSTRING
(
"
accept
"
)
NS_LITERAL_CSTRING
(
"
*
/
*
"
)
false
)
;
}
nsAutoString
referrer
;
mRequest
-
>
GetReferrer
(
referrer
)
;
if
(
referrer
.
EqualsLiteral
(
kFETCH_CLIENT_REFERRER_STR
)
)
{
rv
=
nsContentUtils
:
:
SetFetchReferrerURIWithPolicy
(
mPrincipal
mDocument
httpChan
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
if
(
referrer
.
IsEmpty
(
)
)
{
rv
=
httpChan
-
>
SetReferrerWithPolicy
(
nullptr
net
:
:
RP_No_Referrer
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
nsCOMPtr
<
nsIURI
>
referrerURI
;
rv
=
NS_NewURI
(
getter_AddRefs
(
referrerURI
)
referrer
nullptr
nullptr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
httpChan
-
>
SetReferrerWithPolicy
(
referrerURI
mDocument
?
mDocument
-
>
GetReferrerPolicy
(
)
:
net
:
:
RP_Default
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
mRequest
-
>
ForceOriginHeader
(
)
)
{
nsAutoString
origin
;
rv
=
nsContentUtils
:
:
GetUTFOrigin
(
mPrincipal
origin
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
httpChan
-
>
SetRequestHeader
(
NS_LITERAL_CSTRING
(
"
origin
"
)
NS_ConvertUTF16toUTF8
(
origin
)
false
)
;
}
nsCOMPtr
<
nsIHttpChannelInternal
>
internalChan
=
do_QueryInterface
(
httpChan
)
;
internalChan
-
>
SetCorsMode
(
static_cast
<
uint32_t
>
(
mRequest
-
>
Mode
(
)
)
)
;
internalChan
-
>
SetRedirectMode
(
static_cast
<
uint32_t
>
(
mRequest
-
>
GetRedirectMode
(
)
)
)
;
}
nsCOMPtr
<
nsIUploadChannel2
>
uploadChan
=
do_QueryInterface
(
chan
)
;
if
(
uploadChan
)
{
nsAutoCString
contentType
;
ErrorResult
result
;
mRequest
-
>
Headers
(
)
-
>
Get
(
NS_LITERAL_CSTRING
(
"
content
-
type
"
)
contentType
result
)
;
if
(
result
.
Failed
(
)
)
{
return
result
.
StealNSResult
(
)
;
}
nsCOMPtr
<
nsIInputStream
>
bodyStream
;
mRequest
-
>
GetBody
(
getter_AddRefs
(
bodyStream
)
)
;
if
(
bodyStream
)
{
nsAutoCString
method
;
mRequest
-
>
GetMethod
(
method
)
;
rv
=
uploadChan
-
>
ExplicitSetUploadStream
(
bodyStream
contentType
-
1
method
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
if
(
IsUnsafeRequest
(
)
)
{
if
(
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
No_cors
)
{
return
NS_ERROR_DOM_BAD_URI
;
}
mRequest
-
>
SetRedirectMode
(
RequestRedirect
:
:
Error
)
;
nsAutoTArray
<
nsCString
5
>
unsafeHeaders
;
mRequest
-
>
Headers
(
)
-
>
GetUnsafeHeaders
(
unsafeHeaders
)
;
nsCOMPtr
<
nsIHttpChannelInternal
>
internalChan
=
do_QueryInterface
(
httpChan
)
;
NS_ENSURE_TRUE
(
internalChan
NS_ERROR_DOM_BAD_URI
)
;
rv
=
internalChan
-
>
SetCorsPreflightParameters
(
unsafeHeaders
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
chan
-
>
AsyncOpen2
(
this
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
bool
FetchDriver
:
:
IsUnsafeRequest
(
)
{
return
mHasBeenCrossSite
&
&
(
mRequest
-
>
UnsafeRequest
(
)
&
&
(
!
mRequest
-
>
HasSimpleMethod
(
)
|
|
!
mRequest
-
>
Headers
(
)
-
>
HasOnlySimpleHeaders
(
)
)
)
;
}
already_AddRefed
<
InternalResponse
>
FetchDriver
:
:
BeginAndGetFilteredResponse
(
InternalResponse
*
aResponse
nsIURI
*
aFinalURI
bool
aFoundOpaqueRedirect
)
{
MOZ_ASSERT
(
aResponse
)
;
nsAutoCString
reqURL
;
if
(
aFinalURI
)
{
aFinalURI
-
>
GetSpec
(
reqURL
)
;
}
else
{
mRequest
-
>
GetURL
(
reqURL
)
;
}
DebugOnly
<
nsresult
>
rv
=
aResponse
-
>
StripFragmentAndSetUrl
(
reqURL
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
RefPtr
<
InternalResponse
>
filteredResponse
;
if
(
aFoundOpaqueRedirect
)
{
filteredResponse
=
aResponse
-
>
OpaqueRedirectResponse
(
)
;
}
else
{
switch
(
mRequest
-
>
GetResponseTainting
(
)
)
{
case
LoadTainting
:
:
Basic
:
filteredResponse
=
aResponse
-
>
BasicResponse
(
)
;
break
;
case
LoadTainting
:
:
CORS
:
filteredResponse
=
aResponse
-
>
CORSResponse
(
)
;
break
;
case
LoadTainting
:
:
Opaque
:
filteredResponse
=
aResponse
-
>
OpaqueResponse
(
)
;
break
;
default
:
MOZ_CRASH
(
"
Unexpected
case
"
)
;
}
}
MOZ_ASSERT
(
filteredResponse
)
;
MOZ_ASSERT
(
mObserver
)
;
mObserver
-
>
OnResponseAvailable
(
filteredResponse
)
;
mResponseAvailableCalled
=
true
;
return
filteredResponse
.
forget
(
)
;
}
nsresult
FetchDriver
:
:
FailWithNetworkError
(
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
RefPtr
<
InternalResponse
>
error
=
InternalResponse
:
:
NetworkError
(
)
;
if
(
mObserver
)
{
mObserver
-
>
OnResponseAvailable
(
error
)
;
mResponseAvailableCalled
=
true
;
mObserver
-
>
OnResponseEnd
(
)
;
mObserver
=
nullptr
;
}
return
NS_OK
;
}
namespace
{
class
FillResponseHeaders
final
:
public
nsIHttpHeaderVisitor
{
InternalResponse
*
mResponse
;
~
FillResponseHeaders
(
)
{
}
public
:
NS_DECL_ISUPPORTS
explicit
FillResponseHeaders
(
InternalResponse
*
aResponse
)
:
mResponse
(
aResponse
)
{
}
NS_IMETHOD
VisitHeader
(
const
nsACString
&
aHeader
const
nsACString
&
aValue
)
override
{
ErrorResult
result
;
mResponse
-
>
Headers
(
)
-
>
Append
(
aHeader
aValue
result
)
;
if
(
result
.
Failed
(
)
)
{
NS_WARNING
(
nsPrintfCString
(
"
Fetch
ignoring
illegal
header
-
'
%
s
'
:
'
%
s
'
"
PromiseFlatCString
(
aHeader
)
.
get
(
)
PromiseFlatCString
(
aValue
)
.
get
(
)
)
.
get
(
)
)
;
result
.
SuppressException
(
)
;
}
return
NS_OK
;
}
}
;
NS_IMPL_ISUPPORTS
(
FillResponseHeaders
nsIHttpHeaderVisitor
)
}
NS_IMETHODIMP
FetchDriver
:
:
OnStartRequest
(
nsIRequest
*
aRequest
nsISupports
*
aContext
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
nsresult
rv
;
aRequest
-
>
GetStatus
(
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FailWithNetworkError
(
)
;
return
rv
;
}
MOZ_ASSERT
(
!
mPipeOutputStream
)
;
MOZ_ASSERT
(
mObserver
)
;
RefPtr
<
InternalResponse
>
response
;
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryInterface
(
aRequest
)
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aRequest
)
;
nsCOMPtr
<
nsIJARChannel
>
jarChannel
=
do_QueryInterface
(
aRequest
)
;
bool
foundOpaqueRedirect
=
false
;
if
(
httpChannel
)
{
uint32_t
responseStatus
;
httpChannel
-
>
GetResponseStatus
(
&
responseStatus
)
;
if
(
mozilla
:
:
net
:
:
nsHttpChannel
:
:
IsRedirectStatus
(
responseStatus
)
)
{
if
(
mRequest
-
>
GetRedirectMode
(
)
=
=
RequestRedirect
:
:
Error
)
{
FailWithNetworkError
(
)
;
return
NS_BINDING_FAILED
;
}
if
(
mRequest
-
>
GetRedirectMode
(
)
=
=
RequestRedirect
:
:
Manual
)
{
foundOpaqueRedirect
=
true
;
}
}
nsAutoCString
statusText
;
httpChannel
-
>
GetResponseStatusText
(
statusText
)
;
response
=
new
InternalResponse
(
responseStatus
statusText
)
;
RefPtr
<
FillResponseHeaders
>
visitor
=
new
FillResponseHeaders
(
response
)
;
rv
=
httpChannel
-
>
VisitResponseHeaders
(
visitor
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
NS_WARNING
(
"
Failed
to
visit
all
headers
.
"
)
;
}
}
else
if
(
jarChannel
)
{
uint32_t
responseStatus
=
200
;
nsAutoCString
statusText
;
response
=
new
InternalResponse
(
responseStatus
NS_LITERAL_CSTRING
(
"
OK
"
)
)
;
ErrorResult
result
;
nsAutoCString
contentType
;
jarChannel
-
>
GetContentType
(
contentType
)
;
response
-
>
Headers
(
)
-
>
Append
(
NS_LITERAL_CSTRING
(
"
content
-
type
"
)
contentType
result
)
;
MOZ_ASSERT
(
!
result
.
Failed
(
)
)
;
}
else
{
response
=
new
InternalResponse
(
200
NS_LITERAL_CSTRING
(
"
OK
"
)
)
;
ErrorResult
result
;
nsAutoCString
contentType
;
rv
=
channel
-
>
GetContentType
(
contentType
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
contentType
.
IsEmpty
(
)
)
{
nsAutoCString
contentCharset
;
channel
-
>
GetContentCharset
(
contentCharset
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
contentCharset
.
IsEmpty
(
)
)
{
contentType
+
=
NS_LITERAL_CSTRING
(
"
;
charset
=
"
)
+
contentCharset
;
}
response
-
>
Headers
(
)
-
>
Append
(
NS_LITERAL_CSTRING
(
"
Content
-
Type
"
)
contentType
result
)
;
MOZ_ASSERT
(
!
result
.
Failed
(
)
)
;
}
int64_t
contentLength
;
rv
=
channel
-
>
GetContentLength
(
&
contentLength
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
contentLength
)
{
nsAutoCString
contentLenStr
;
contentLenStr
.
AppendInt
(
contentLength
)
;
response
-
>
Headers
(
)
-
>
Append
(
NS_LITERAL_CSTRING
(
"
Content
-
Length
"
)
contentLenStr
result
)
;
MOZ_ASSERT
(
!
result
.
Failed
(
)
)
;
}
}
nsCOMPtr
<
nsIInputStream
>
pipeInputStream
;
rv
=
NS_NewPipe
(
getter_AddRefs
(
pipeInputStream
)
getter_AddRefs
(
mPipeOutputStream
)
0
UINT32_MAX
true
false
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FailWithNetworkError
(
)
;
return
rv
;
}
response
-
>
SetBody
(
pipeInputStream
)
;
response
-
>
InitChannelInfo
(
channel
)
;
nsCOMPtr
<
nsIURI
>
channelURI
;
rv
=
channel
-
>
GetURI
(
getter_AddRefs
(
channelURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FailWithNetworkError
(
)
;
return
rv
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
rv
=
channel
-
>
GetLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FailWithNetworkError
(
)
;
return
rv
;
}
LoadTainting
channelTainting
=
LoadTainting
:
:
Basic
;
if
(
loadInfo
)
{
channelTainting
=
loadInfo
-
>
GetTainting
(
)
;
}
mRequest
-
>
MaybeIncreaseResponseTainting
(
channelTainting
)
;
mResponse
=
BeginAndGetFilteredResponse
(
response
channelURI
foundOpaqueRedirect
)
;
nsCOMPtr
<
nsIEventTarget
>
sts
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
FailWithNetworkError
(
)
;
return
rv
;
}
if
(
nsCOMPtr
<
nsIThreadRetargetableRequest
>
rr
=
do_QueryInterface
(
aRequest
)
)
{
NS_WARN_IF
(
NS_FAILED
(
rr
-
>
RetargetDeliveryTo
(
sts
)
)
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
FetchDriver
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsIInputStream
*
aInputStream
uint64_t
aOffset
uint32_t
aCount
)
{
uint32_t
aRead
;
MOZ_ASSERT
(
mResponse
)
;
MOZ_ASSERT
(
mPipeOutputStream
)
;
nsresult
rv
=
aInputStream
-
>
ReadSegments
(
NS_CopySegmentToStream
mPipeOutputStream
aCount
&
aRead
)
;
return
rv
;
}
NS_IMETHODIMP
FetchDriver
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsresult
aStatusCode
)
{
workers
:
:
AssertIsOnMainThread
(
)
;
if
(
NS_FAILED
(
aStatusCode
)
)
{
nsCOMPtr
<
nsIAsyncOutputStream
>
outputStream
=
do_QueryInterface
(
mPipeOutputStream
)
;
if
(
outputStream
)
{
outputStream
-
>
CloseWithStatus
(
NS_BINDING_FAILED
)
;
}
}
else
{
MOZ_ASSERT
(
mResponse
)
;
MOZ_ASSERT
(
!
mResponse
-
>
IsError
(
)
)
;
if
(
mPipeOutputStream
)
{
mPipeOutputStream
-
>
Close
(
)
;
}
}
if
(
mObserver
)
{
mObserver
-
>
OnResponseEnd
(
)
;
mObserver
=
nullptr
;
}
return
NS_OK
;
}
NS_IMETHODIMP
FetchDriver
:
:
AsyncOnChannelRedirect
(
nsIChannel
*
aOldChannel
nsIChannel
*
aNewChannel
uint32_t
aFlags
nsIAsyncVerifyRedirectCallback
*
aCallback
)
{
NS_PRECONDITION
(
aNewChannel
"
Redirect
without
a
channel
?
"
)
;
if
(
NS_IsInternalSameURIRedirect
(
aOldChannel
aNewChannel
aFlags
)
|
|
NS_IsHSTSUpgradeRedirect
(
aOldChannel
aNewChannel
aFlags
)
)
{
aCallback
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
return
NS_OK
;
}
MOZ_ASSERT
(
mRequest
-
>
GetRedirectMode
(
)
=
=
RequestRedirect
:
:
Follow
|
|
(
mRequest
-
>
GetRedirectMode
(
)
=
=
RequestRedirect
:
:
Error
&
&
IsUnsafeRequest
(
)
)
)
;
if
(
NS_WARN_IF
(
mRequest
-
>
GetRedirectMode
(
)
=
=
RequestRedirect
:
:
Error
)
)
{
aOldChannel
-
>
Cancel
(
NS_BINDING_FAILED
)
;
return
NS_BINDING_FAILED
;
}
nsCOMPtr
<
nsIURI
>
newURI
;
nsresult
rv
=
NS_GetFinalChannelURI
(
aNewChannel
getter_AddRefs
(
newURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aOldChannel
-
>
Cancel
(
rv
)
;
return
rv
;
}
nsAutoCString
newUrl
;
newURI
-
>
GetSpec
(
newUrl
)
;
mRequest
-
>
SetURL
(
newUrl
)
;
rv
=
SetTainting
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
aOldChannel
-
>
Cancel
(
rv
)
;
return
rv
;
}
if
(
IsUnsafeRequest
(
)
)
{
aOldChannel
-
>
Cancel
(
NS_BINDING_FAILED
)
;
return
NS_BINDING_FAILED
;
}
if
(
mHasBeenCrossSite
&
&
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Same_origin
&
&
mRequest
-
>
Mode
(
)
=
=
RequestMode
:
:
No_cors
)
{
nsLoadFlags
flags
;
rv
=
aNewChannel
-
>
GetLoadFlags
(
&
flags
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
flags
|
=
nsIRequest
:
:
LOAD_ANONYMOUS
;
rv
=
aNewChannel
-
>
SetLoadFlags
(
flags
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
aOldChannel
-
>
Cancel
(
rv
)
;
return
rv
;
}
}
#
ifdef
DEBUG
{
nsLoadFlags
flags
;
aNewChannel
-
>
GetLoadFlags
(
&
flags
)
;
bool
shouldBeAnon
=
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Omit
|
|
(
mHasBeenCrossSite
&
&
mRequest
-
>
GetCredentialsMode
(
)
=
=
RequestCredentials
:
:
Same_origin
)
;
MOZ_ASSERT
(
!
!
(
flags
&
nsIRequest
:
:
LOAD_ANONYMOUS
)
=
=
shouldBeAnon
)
;
}
#
endif
aCallback
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
return
NS_OK
;
}
NS_IMETHODIMP
FetchDriver
:
:
CheckListenerChain
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
FetchDriver
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIChannelEventSink
)
)
)
{
*
aResult
=
static_cast
<
nsIChannelEventSink
*
>
(
this
)
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIStreamListener
)
)
)
{
*
aResult
=
static_cast
<
nsIStreamListener
*
>
(
this
)
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIRequestObserver
)
)
)
{
*
aResult
=
static_cast
<
nsIRequestObserver
*
>
(
this
)
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
return
QueryInterface
(
aIID
aResult
)
;
}
void
FetchDriver
:
:
SetDocument
(
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
!
mFetchCalled
)
;
mDocument
=
aDocument
;
}
}
}
