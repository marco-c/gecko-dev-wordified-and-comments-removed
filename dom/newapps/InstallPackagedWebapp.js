const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
Constructor
:
CC
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppsUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PermissionsInstaller
"
"
resource
:
/
/
gre
/
modules
/
PermissionsInstaller
.
jsm
"
)
;
function
debug
(
aMsg
)
{
dump
(
"
-
*
-
*
-
InstallPackagedWebapps
.
js
:
"
+
aMsg
+
"
\
n
"
)
;
}
function
InstallPackagedWebapp
(
)
{
}
InstallPackagedWebapp
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIInstallPackagedWebapp
]
)
classID
:
Components
.
ID
(
"
{
5cc6554a
-
5421
-
4a5e
-
b8c2
-
c62e8b7f4f3f
}
"
)
installPackagedWebapp
:
function
(
aManifestContent
aOrigin
aManifestURL
)
{
try
{
let
isSuccess
=
true
;
let
manifest
=
JSON
.
parse
(
aManifestContent
)
;
PermissionsInstaller
.
installPermissions
(
{
manifest
:
manifest
manifestURL
:
aManifestURL
origin
:
aOrigin
isPreinstalled
:
false
isCachedPackage
:
true
}
false
function
(
)
{
Cu
.
reportError
(
ex
)
;
}
)
;
return
isSuccess
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
return
false
;
}
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
InstallPackagedWebapp
]
)
;
