#
ifndef
mozilla_dom_BroadcastChannelParent_h
#
define
mozilla_dom_BroadcastChannelParent_h
#
include
"
mozilla
/
dom
/
PBroadcastChannelParent
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
BackgroundParentImpl
;
class
PrincipalInfo
;
}
namespace
dom
{
class
BroadcastChannelParentMessage
;
class
BroadcastChannelService
;
class
BroadcastChannelParent
final
:
public
PBroadcastChannelParent
{
NS_INLINE_DECL_REFCOUNTING
(
BroadcastChannelParent
)
friend
class
mozilla
:
:
ipc
:
:
BackgroundParentImpl
;
typedef
mozilla
:
:
ipc
:
:
PrincipalInfo
PrincipalInfo
;
public
:
void
Deliver
(
BroadcastChannelParentMessage
*
aMsg
)
;
bool
Destroyed
(
)
const
{
return
mStatus
=
=
eDestroyed
;
}
void
Start
(
)
;
private
:
explicit
BroadcastChannelParent
(
const
nsAString
&
aOriginChannelKey
)
;
~
BroadcastChannelParent
(
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPostMessage
(
const
ClonedMessageData
&
aData
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DeliverInternal
(
BroadcastChannelParentMessage
*
aMsg
)
;
void
Shutdown
(
)
;
RefPtr
<
BroadcastChannelService
>
mService
;
const
nsString
mOriginChannelKey
;
nsTArray
<
RefPtr
<
BroadcastChannelParentMessage
>
>
mPendingMessages
;
nsTArray
<
RefPtr
<
BroadcastChannelParentMessage
>
>
mDeliveringMessages
;
enum
{
eInitializing
eInitialized
eClosing
eDestroyed
}
mStatus
;
}
;
}
}
#
endif
