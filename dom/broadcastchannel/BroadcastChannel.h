#
ifndef
mozilla_dom_BroadcastChannel_h
#
define
mozilla_dom_BroadcastChannel_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
BroadcastChannelChild
;
class
BroadcastChannelMessage
;
class
RefMessageBodyService
;
class
WorkerRef
;
class
BroadcastChannel
final
:
public
DOMEventTargetHelper
{
friend
class
BroadcastChannelChild
;
typedef
mozilla
:
:
ipc
:
:
PrincipalInfo
PrincipalInfo
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BroadcastChannel
DOMEventTargetHelper
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
BroadcastChannel
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aChannel
ErrorResult
&
aRv
)
;
void
GetName
(
nsAString
&
aName
)
const
{
aName
=
mChannel
;
}
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
ErrorResult
&
aRv
)
;
void
Close
(
)
;
IMPL_EVENT_HANDLER
(
message
)
IMPL_EVENT_HANDLER
(
messageerror
)
void
Shutdown
(
)
;
private
:
BroadcastChannel
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aChannel
const
nsID
&
aPortUUID
)
;
~
BroadcastChannel
(
)
;
void
RemoveDocFromBFCache
(
)
;
void
DisconnectFromOwner
(
)
override
;
RefPtr
<
BroadcastChannelChild
>
mActor
;
RefPtr
<
RefMessageBodyService
>
mRefMessageBodyService
;
RefPtr
<
WorkerRef
>
mWorkerRef
;
nsString
mChannel
;
enum
{
StateActive
StateClosed
}
mState
;
nsID
mPortUUID
;
}
;
}
}
#
endif
