#
include
"
BroadcastChannelParent
.
h
"
#
include
"
BroadcastChannelService
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
BlobParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
BroadcastChannelParent
:
:
BroadcastChannelParent
(
const
nsAString
&
aOriginChannelKey
)
:
mService
(
BroadcastChannelService
:
:
GetOrCreate
(
)
)
mOriginChannelKey
(
aOriginChannelKey
)
{
AssertIsOnBackgroundThread
(
)
;
mService
-
>
RegisterActor
(
this
mOriginChannelKey
)
;
}
BroadcastChannelParent
:
:
~
BroadcastChannelParent
(
)
{
AssertIsOnBackgroundThread
(
)
;
}
bool
BroadcastChannelParent
:
:
RecvPostMessage
(
const
ClonedMessageData
&
aData
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
NS_WARN_IF
(
!
mService
)
)
{
return
false
;
}
mService
-
>
PostMessage
(
this
aData
mOriginChannelKey
)
;
return
true
;
}
bool
BroadcastChannelParent
:
:
RecvClose
(
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
NS_WARN_IF
(
!
mService
)
)
{
return
false
;
}
mService
-
>
UnregisterActor
(
this
mOriginChannelKey
)
;
mService
=
nullptr
;
Unused
<
<
Send__delete__
(
this
)
;
return
true
;
}
void
BroadcastChannelParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
mService
)
{
mService
-
>
UnregisterActor
(
this
mOriginChannelKey
)
;
}
}
void
BroadcastChannelParent
:
:
Deliver
(
const
ClonedMessageData
&
aData
)
{
AssertIsOnBackgroundThread
(
)
;
ClonedMessageData
newData
(
aData
)
;
for
(
uint32_t
i
=
0
len
=
newData
.
blobsParent
(
)
.
Length
(
)
;
i
<
len
;
+
+
i
)
{
RefPtr
<
BlobImpl
>
impl
=
static_cast
<
BlobParent
*
>
(
newData
.
blobsParent
(
)
[
i
]
)
-
>
GetBlobImpl
(
)
;
PBlobParent
*
blobParent
=
BackgroundParent
:
:
GetOrCreateActorForBlobImpl
(
Manager
(
)
impl
)
;
if
(
!
blobParent
)
{
return
;
}
newData
.
blobsParent
(
)
[
i
]
=
blobParent
;
}
Unused
<
<
SendNotify
(
newData
)
;
}
}
}
