#
include
"
BroadcastChannelParent
.
h
"
#
include
"
BroadcastChannelService
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamUtils
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
BroadcastChannelParent
:
:
BroadcastChannelParent
(
const
nsAString
&
aOriginChannelKey
)
:
mService
(
BroadcastChannelService
:
:
GetOrCreate
(
)
)
mOriginChannelKey
(
aOriginChannelKey
)
{
AssertIsOnBackgroundThread
(
)
;
mService
-
>
RegisterActor
(
this
mOriginChannelKey
)
;
}
BroadcastChannelParent
:
:
~
BroadcastChannelParent
(
)
{
AssertIsOnBackgroundThread
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BroadcastChannelParent
:
:
RecvPostMessage
(
const
ClonedMessageData
&
aData
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
NS_WARN_IF
(
!
mService
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mService
-
>
PostMessage
(
this
aData
mOriginChannelKey
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BroadcastChannelParent
:
:
RecvClose
(
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
NS_WARN_IF
(
!
mService
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mService
-
>
UnregisterActor
(
this
mOriginChannelKey
)
;
mService
=
nullptr
;
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
void
BroadcastChannelParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
AssertIsOnBackgroundThread
(
)
;
if
(
mService
)
{
mService
-
>
UnregisterActor
(
this
mOriginChannelKey
)
;
}
}
}
}
