#
include
"
mozilla
/
dom
/
PushSubscriptionOptions
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
PushSubscriptionOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
PushSubscriptionOptions
:
:
PushSubscriptionOptions
(
nsIGlobalObject
*
aGlobal
nsTArray
<
uint8_t
>
&
&
aRawAppServerKey
)
:
mGlobal
(
aGlobal
)
mRawAppServerKey
(
std
:
:
move
(
aRawAppServerKey
)
)
mAppServerKey
(
nullptr
)
{
MOZ_ASSERT_IF
(
NS_IsMainThread
(
)
mGlobal
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
PushSubscriptionOptions
:
:
~
PushSubscriptionOptions
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_WITH_JS_MEMBERS
(
PushSubscriptionOptions
(
mGlobal
)
(
mAppServerKey
)
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
PushSubscriptionOptions
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
PushSubscriptionOptions
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PushSubscriptionOptions
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
PushSubscriptionOptions
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PushSubscriptionOptions_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
PushSubscriptionOptions
:
:
GetApplicationServerKey
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aKey
ErrorResult
&
aRv
)
{
if
(
!
mRawAppServerKey
.
IsEmpty
(
)
&
&
!
mAppServerKey
)
{
mAppServerKey
=
ArrayBuffer
:
:
Create
(
aCx
mRawAppServerKey
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
aKey
.
set
(
mAppServerKey
)
;
}
}
