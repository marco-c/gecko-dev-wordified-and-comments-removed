"
use
strict
"
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
const
Cr
=
Components
.
results
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Messaging
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
PushRecord
"
]
;
const
prefs
=
new
Preferences
(
"
dom
.
push
.
"
)
;
function
PushRecord
(
props
)
{
this
.
pushEndpoint
=
props
.
pushEndpoint
;
this
.
scope
=
props
.
scope
;
this
.
originAttributes
=
props
.
originAttributes
;
this
.
pushCount
=
props
.
pushCount
|
|
0
;
this
.
lastPush
=
props
.
lastPush
|
|
0
;
this
.
p256dhPublicKey
=
props
.
p256dhPublicKey
;
this
.
p256dhPrivateKey
=
props
.
p256dhPrivateKey
;
this
.
authenticationSecret
=
props
.
authenticationSecret
;
this
.
systemRecord
=
!
!
props
.
systemRecord
;
this
.
setQuota
(
props
.
quota
)
;
this
.
ctime
=
(
typeof
props
.
ctime
=
=
=
"
number
"
)
?
props
.
ctime
:
0
;
}
PushRecord
.
prototype
=
{
setQuota
(
suggestedQuota
)
{
if
(
this
.
quotaApplies
(
)
&
&
!
isNaN
(
suggestedQuota
)
&
&
suggestedQuota
>
=
0
)
{
this
.
quota
=
suggestedQuota
;
}
else
{
this
.
resetQuota
(
)
;
}
}
resetQuota
(
)
{
this
.
quota
=
this
.
quotaApplies
(
)
?
prefs
.
get
(
"
maxQuotaPerSubscription
"
)
:
Infinity
;
}
updateQuota
(
lastVisit
)
{
if
(
this
.
isExpired
(
)
|
|
!
this
.
quotaApplies
(
)
)
{
return
;
}
if
(
lastVisit
<
0
)
{
this
.
quota
=
0
;
return
;
}
if
(
lastVisit
>
this
.
lastPush
)
{
let
daysElapsed
=
(
Date
.
now
(
)
-
lastVisit
)
/
24
/
60
/
60
/
1000
;
this
.
quota
=
Math
.
min
(
Math
.
round
(
8
*
Math
.
pow
(
daysElapsed
-
0
.
8
)
)
prefs
.
get
(
"
maxQuotaPerSubscription
"
)
)
;
Services
.
telemetry
.
getHistogramById
(
"
PUSH_API_QUOTA_RESET_TO
"
)
.
add
(
this
.
quota
)
;
}
}
receivedPush
(
lastVisit
)
{
this
.
updateQuota
(
lastVisit
)
;
this
.
pushCount
+
+
;
this
.
lastPush
=
Date
.
now
(
)
;
}
reduceQuota
(
)
{
if
(
!
this
.
quotaApplies
(
)
)
{
return
;
}
this
.
quota
=
Math
.
max
(
this
.
quota
-
1
0
)
;
if
(
this
.
isExpired
(
)
&
&
this
.
ctime
>
0
)
{
let
duration
=
Date
.
now
(
)
-
this
.
ctime
;
Services
.
telemetry
.
getHistogramById
(
"
PUSH_API_QUOTA_EXPIRATION_TIME
"
)
.
add
(
duration
/
1000
)
;
}
}
getLastVisit
(
)
{
if
(
!
this
.
quotaApplies
(
)
|
|
this
.
isTabOpen
(
)
)
{
return
Promise
.
resolve
(
Date
.
now
(
)
)
;
}
if
(
AppConstants
.
MOZ_ANDROID_HISTORY
)
{
return
Messaging
.
sendRequestForResult
(
{
type
:
"
History
:
GetPrePathLastVisitedTimeMilliseconds
"
prePath
:
this
.
uri
.
prePath
}
)
.
then
(
result
=
>
{
if
(
result
=
=
0
)
{
return
-
Infinity
;
}
return
result
;
}
)
;
}
const
QUOTA_REFRESH_TRANSITIONS_SQL
=
[
Ci
.
nsINavHistoryService
.
TRANSITION_LINK
Ci
.
nsINavHistoryService
.
TRANSITION_TYPED
Ci
.
nsINavHistoryService
.
TRANSITION_BOOKMARK
Ci
.
nsINavHistoryService
.
TRANSITION_REDIRECT_PERMANENT
Ci
.
nsINavHistoryService
.
TRANSITION_REDIRECT_TEMPORARY
]
.
join
(
"
"
)
;
return
PlacesUtils
.
withConnectionWrapper
(
"
PushRecord
.
getLastVisit
"
db
=
>
{
return
db
.
executeCached
(
SELECT
MAX
(
p
.
last_visit_date
)
FROM
moz_places
p
INNER
JOIN
moz_historyvisits
h
ON
p
.
id
=
h
.
place_id
WHERE
(
p
.
url
>
=
:
urlLowerBound
AND
p
.
url
<
=
:
urlUpperBound
AND
h
.
visit_type
IN
(
{
QUOTA_REFRESH_TRANSITIONS_SQL
}
)
)
{
urlLowerBound
:
this
.
uri
.
prePath
urlUpperBound
:
this
.
uri
.
prePath
+
"
\
x7f
"
}
)
;
}
)
.
then
(
rows
=
>
{
if
(
!
rows
.
length
)
{
return
-
Infinity
;
}
let
lastVisit
=
rows
[
0
]
.
getResultByIndex
(
0
)
;
return
lastVisit
/
1000
;
}
)
;
}
isTabOpen
(
)
{
let
windows
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
let
window
=
windows
.
getNext
(
)
;
if
(
window
.
closed
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
continue
;
}
let
tabs
=
window
.
gBrowser
?
window
.
gBrowser
.
tabContainer
.
children
:
window
.
BrowserApp
.
tabs
;
for
(
let
tab
of
tabs
)
{
let
tabURI
=
(
tab
.
linkedBrowser
|
|
tab
.
browser
)
.
currentURI
;
if
(
tabURI
.
prePath
=
=
this
.
uri
.
prePath
)
{
return
true
;
}
}
}
return
false
;
}
hasPermission
(
)
{
if
(
this
.
systemRecord
|
|
prefs
.
get
(
"
testing
.
ignorePermission
"
)
)
{
return
true
;
}
let
permission
=
Services
.
perms
.
testExactPermissionFromPrincipal
(
this
.
principal
"
desktop
-
notification
"
)
;
return
permission
=
=
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
;
}
quotaChanged
(
)
{
if
(
!
this
.
hasPermission
(
)
)
{
return
Promise
.
resolve
(
false
)
;
}
return
this
.
getLastVisit
(
)
.
then
(
lastVisit
=
>
lastVisit
>
this
.
lastPush
)
;
}
quotaApplies
(
)
{
return
!
this
.
systemRecord
;
}
isExpired
(
)
{
return
this
.
quota
=
=
=
0
;
}
matchesOriginAttributes
(
pattern
)
{
if
(
this
.
systemRecord
)
{
return
false
;
}
return
ChromeUtils
.
originAttributesMatchPattern
(
this
.
principal
.
originAttributes
pattern
)
;
}
toSubscription
(
)
{
return
{
endpoint
:
this
.
pushEndpoint
lastPush
:
this
.
lastPush
pushCount
:
this
.
pushCount
p256dhKey
:
this
.
p256dhPublicKey
authenticationSecret
:
this
.
authenticationSecret
quota
:
this
.
quotaApplies
(
)
?
this
.
quota
:
-
1
}
;
}
}
;
var
principals
=
new
WeakMap
(
)
;
Object
.
defineProperties
(
PushRecord
.
prototype
{
principal
:
{
get
(
)
{
if
(
this
.
systemRecord
)
{
return
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
}
let
principal
=
principals
.
get
(
this
)
;
if
(
!
principal
)
{
let
url
=
this
.
scope
;
if
(
this
.
originAttributes
)
{
url
+
=
this
.
originAttributes
;
}
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipalFromOrigin
(
url
)
;
principals
.
set
(
this
principal
)
;
}
return
principal
;
}
configurable
:
true
}
uri
:
{
get
(
)
{
return
this
.
principal
.
URI
;
}
configurable
:
true
}
}
)
;
