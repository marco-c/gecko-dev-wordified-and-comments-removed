#
ifndef
mozilla_dom_PushManager_h
#
define
mozilla_dom_PushManager_h
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRefPtr
.
h
"
#
include
"
jsapi
.
h
"
class
nsIGlobalObject
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
class
WorkerPrivate
;
}
class
Promise
;
class
PushManagerImpl
;
class
PushSubscription
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
PushSubscription
)
explicit
PushSubscription
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aEndpoint
const
nsAString
&
aScope
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
void
GetEndpoint
(
nsAString
&
aEndpoint
)
const
{
aEndpoint
=
mEndpoint
;
}
static
already_AddRefed
<
PushSubscription
>
Constructor
(
GlobalObject
&
aGlobal
const
nsAString
&
aEndpoint
const
nsAString
&
aScope
ErrorResult
&
aRv
)
;
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
already_AddRefed
<
Promise
>
Unsubscribe
(
ErrorResult
&
aRv
)
;
protected
:
~
PushSubscription
(
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsString
mEndpoint
;
nsString
mScope
;
}
;
class
PushManager
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
PushManager
)
explicit
PushManager
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aScope
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Subscribe
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetSubscription
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
PermissionState
(
ErrorResult
&
aRv
)
;
void
SetPushManagerImpl
(
PushManagerImpl
&
foo
ErrorResult
&
aRv
)
;
protected
:
~
PushManager
(
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsRefPtr
<
PushManagerImpl
>
mImpl
;
nsString
mScope
;
}
;
class
WorkerPushSubscription
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
WorkerPushSubscription
)
explicit
WorkerPushSubscription
(
const
nsAString
&
aEndpoint
const
nsAString
&
aScope
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
nullptr
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
WorkerPushSubscription
>
Constructor
(
GlobalObject
&
aGlobal
const
nsAString
&
aEndpoint
const
nsAString
&
aScope
ErrorResult
&
aRv
)
;
void
GetEndpoint
(
nsAString
&
aEndpoint
)
const
{
aEndpoint
=
mEndpoint
;
}
already_AddRefed
<
Promise
>
Unsubscribe
(
ErrorResult
&
aRv
)
;
protected
:
~
WorkerPushSubscription
(
)
;
private
:
nsString
mEndpoint
;
nsString
mScope
;
}
;
class
WorkerPushManager
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
WorkerPushManager
)
enum
SubscriptionAction
{
SubscribeAction
GetSubscriptionAction
}
;
explicit
WorkerPushManager
(
const
nsAString
&
aScope
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
nullptr
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
PerformSubscriptionAction
(
SubscriptionAction
aAction
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Subscribe
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetSubscription
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
PermissionState
(
ErrorResult
&
aRv
)
;
protected
:
~
WorkerPushManager
(
)
;
private
:
nsString
mScope
;
}
;
}
}
#
endif
