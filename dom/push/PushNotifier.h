#
ifndef
mozilla_dom_PushNotifier_h
#
define
mozilla_dom_PushNotifier_h
#
include
"
nsIPushNotifier
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
:
:
dom
{
class
ContentChild
;
class
ContentParent
;
class
MOZ_STACK_CLASS
PushDispatcher
{
public
:
virtual
nsresult
NotifyObservers
(
)
=
0
;
virtual
nsresult
NotifyWorkers
(
)
=
0
;
nsresult
NotifyObserversAndWorkers
(
)
;
virtual
bool
SendToParent
(
ContentChild
*
aParentActor
)
=
0
;
virtual
bool
SendToChild
(
ContentParent
*
aContentActor
)
=
0
;
virtual
nsresult
HandleNoChildProcesses
(
)
;
nsIPrincipal
*
GetPrincipal
(
)
{
return
mPrincipal
;
}
protected
:
PushDispatcher
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
)
;
virtual
~
PushDispatcher
(
)
;
bool
ShouldNotifyWorkers
(
)
;
nsresult
DoNotifyObservers
(
nsISupports
*
aSubject
const
char
*
aTopic
const
nsACString
&
aScope
)
;
const
nsCString
mScope
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
}
;
class
PushNotifier
final
:
public
nsIPushNotifier
{
public
:
PushNotifier
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
PushNotifier
nsIPushNotifier
)
NS_DECL_NSIPUSHNOTIFIER
private
:
~
PushNotifier
(
)
;
nsresult
Dispatch
(
PushDispatcher
&
aDispatcher
)
;
}
;
class
PushData
final
:
public
nsIPushData
{
public
:
explicit
PushData
(
const
nsTArray
<
uint8_t
>
&
aData
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
PushData
nsIPushData
)
NS_DECL_NSIPUSHDATA
private
:
~
PushData
(
)
;
nsresult
EnsureDecodedText
(
)
;
nsTArray
<
uint8_t
>
mData
;
nsString
mDecodedText
;
}
;
class
PushMessage
final
:
public
nsIPushMessage
{
public
:
PushMessage
(
nsIPrincipal
*
aPrincipal
nsIPushData
*
aData
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
PushMessage
nsIPushMessage
)
NS_DECL_NSIPUSHMESSAGE
private
:
~
PushMessage
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIPushData
>
mData
;
}
;
class
PushMessageDispatcher
final
:
public
PushDispatcher
{
public
:
PushMessageDispatcher
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
const
nsAString
&
aMessageId
const
Maybe
<
nsTArray
<
uint8_t
>
>
&
aData
)
;
~
PushMessageDispatcher
(
)
;
nsresult
NotifyObservers
(
)
override
;
nsresult
NotifyWorkers
(
)
override
;
bool
SendToParent
(
ContentChild
*
aParentActor
)
override
;
bool
SendToChild
(
ContentParent
*
aContentActor
)
override
;
private
:
const
nsString
mMessageId
;
const
Maybe
<
nsTArray
<
uint8_t
>
>
mData
;
}
;
class
PushSubscriptionChangeDispatcher
final
:
public
PushDispatcher
{
public
:
PushSubscriptionChangeDispatcher
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
nsIPushSubscription
*
aOldSubscription
)
;
~
PushSubscriptionChangeDispatcher
(
)
;
nsresult
NotifyObservers
(
)
override
;
nsresult
NotifyWorkers
(
)
override
;
bool
SendToParent
(
ContentChild
*
aParentActor
)
override
;
bool
SendToChild
(
ContentParent
*
aContentActor
)
override
;
private
:
nsCOMPtr
<
nsIPushSubscription
>
mOldSubscription
;
}
;
class
PushSubscriptionModifiedDispatcher
:
public
PushDispatcher
{
public
:
PushSubscriptionModifiedDispatcher
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
)
;
~
PushSubscriptionModifiedDispatcher
(
)
;
nsresult
NotifyObservers
(
)
override
;
nsresult
NotifyWorkers
(
)
override
;
bool
SendToParent
(
ContentChild
*
aParentActor
)
override
;
bool
SendToChild
(
ContentParent
*
aContentActor
)
override
;
}
;
class
PushErrorDispatcher
final
:
public
PushDispatcher
{
public
:
PushErrorDispatcher
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
const
nsAString
&
aMessage
uint32_t
aFlags
)
;
~
PushErrorDispatcher
(
)
;
nsresult
NotifyObservers
(
)
override
;
nsresult
NotifyWorkers
(
)
override
;
bool
SendToParent
(
ContentChild
*
aParentActor
)
override
;
bool
SendToChild
(
ContentParent
*
aContentActor
)
override
;
private
:
nsresult
HandleNoChildProcesses
(
)
override
;
const
nsString
mMessage
;
uint32_t
mFlags
;
}
;
}
#
endif
