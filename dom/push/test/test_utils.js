(
function
(
g
)
{
"
use
strict
"
;
let
url
=
SimpleTest
.
getTestFileURL
(
"
mockpushserviceparent
.
js
"
)
;
let
chromeScript
=
SpecialPowers
.
loadChromeScript
(
url
)
;
function
replacePushService
(
mockService
)
{
chromeScript
.
sendSyncMessage
(
"
service
-
replace
"
)
;
chromeScript
.
addMessageListener
(
"
service
-
delivery
-
error
"
function
(
msg
)
{
mockService
.
reportDeliveryError
(
msg
.
messageId
msg
.
reason
)
;
}
)
;
chromeScript
.
addMessageListener
(
"
service
-
request
"
function
(
msg
)
{
let
promise
;
try
{
let
handler
=
mockService
[
msg
.
name
]
;
promise
=
Promise
.
resolve
(
handler
(
msg
.
params
)
)
;
}
catch
(
error
)
{
promise
=
Promise
.
reject
(
error
)
;
}
promise
.
then
(
result
=
>
{
chromeScript
.
sendAsyncMessage
(
"
service
-
response
"
{
id
:
msg
.
id
result
:
result
}
)
;
}
error
=
>
{
chromeScript
.
sendAsyncMessage
(
"
service
-
response
"
{
id
:
msg
.
id
error
:
error
}
)
;
}
)
;
}
)
;
}
function
restorePushService
(
)
{
chromeScript
.
sendSyncMessage
(
"
service
-
restore
"
)
;
}
let
userAgentID
=
"
8e1c93a9
-
139b
-
419c
-
b200
-
e715bb1e8ce8
"
;
let
currentMockSocket
=
null
;
function
setupMockPushSocket
(
mockWebSocket
)
{
currentMockSocket
=
mockWebSocket
;
currentMockSocket
.
_isActive
=
true
;
chromeScript
.
sendSyncMessage
(
"
socket
-
setup
"
)
;
chromeScript
.
addMessageListener
(
"
socket
-
client
-
msg
"
function
(
msg
)
{
mockWebSocket
.
handleMessage
(
msg
)
;
}
)
;
}
function
teardownMockPushSocket
(
)
{
if
(
currentMockSocket
)
{
return
new
Promise
(
resolve
=
>
{
currentMockSocket
.
_isActive
=
false
;
chromeScript
.
addMessageListener
(
"
socket
-
server
-
teardown
"
resolve
)
;
chromeScript
.
sendSyncMessage
(
"
socket
-
teardown
"
)
;
}
)
;
}
return
Promise
.
resolve
(
)
;
}
function
MockWebSocket
(
)
{
}
let
registerCount
=
0
;
MockWebSocket
.
prototype
=
{
_isActive
:
false
onHello
(
request
)
{
this
.
serverSendMsg
(
JSON
.
stringify
(
{
messageType
:
"
hello
"
uaid
:
userAgentID
status
:
200
use_webpush
:
true
}
)
)
;
}
onRegister
(
request
)
{
this
.
serverSendMsg
(
JSON
.
stringify
(
{
messageType
:
"
register
"
uaid
:
userAgentID
channelID
:
request
.
channelID
status
:
200
pushEndpoint
:
"
https
:
/
/
example
.
com
/
endpoint
/
"
+
registerCount
+
+
}
)
)
;
}
onUnregister
(
request
)
{
}
onAck
(
request
)
{
}
handleMessage
(
msg
)
{
let
request
=
JSON
.
parse
(
msg
)
;
let
messageType
=
request
.
messageType
;
switch
(
messageType
)
{
case
"
hello
"
:
this
.
onHello
(
request
)
;
break
;
case
"
register
"
:
this
.
onRegister
(
request
)
;
break
;
case
"
unregister
"
:
this
.
onUnregister
(
request
)
;
break
;
case
"
ack
"
:
this
.
onAck
(
request
)
;
break
;
default
:
throw
new
Error
(
"
Unexpected
message
:
"
+
messageType
)
;
}
}
serverSendMsg
(
msg
)
{
if
(
this
.
_isActive
)
{
chromeScript
.
sendAsyncMessage
(
"
socket
-
server
-
msg
"
msg
)
;
}
}
}
;
g
.
MockWebSocket
=
MockWebSocket
;
g
.
setupMockPushSocket
=
setupMockPushSocket
;
g
.
teardownMockPushSocket
=
teardownMockPushSocket
;
g
.
replacePushService
=
replacePushService
;
g
.
restorePushService
=
restorePushService
;
}
(
this
)
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
flushPermissions
(
_
=
>
{
SpecialPowers
.
flushPrefEnv
(
resolve
)
;
}
)
;
}
)
.
then
(
_
=
>
{
restorePushService
(
)
;
return
teardownMockPushSocket
(
)
;
}
)
;
}
)
;
function
setPushPermission
(
allow
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
desktop
-
notification
"
allow
context
:
document
}
]
resolve
)
;
}
)
;
}
function
setupPrefs
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
push
.
enabled
"
true
]
[
"
dom
.
push
.
connection
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
exemptFromPerDomainMax
"
true
]
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
]
}
resolve
)
;
}
)
;
}
function
setupPrefsAndReplaceService
(
mockService
)
{
replacePushService
(
mockService
)
;
return
setupPrefs
(
)
;
}
function
setupPrefsAndMockSocket
(
mockSocket
)
{
setupMockPushSocket
(
mockSocket
)
;
return
setupPrefs
(
)
;
}
function
injectControlledFrame
(
target
=
document
.
body
)
{
return
new
Promise
(
function
(
res
rej
)
{
var
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
/
tests
/
dom
/
push
/
test
/
frame
.
html
"
;
var
controlledFrame
=
{
remove
(
)
{
target
.
removeChild
(
iframe
)
;
iframe
=
null
;
}
waitOnWorkerMessage
(
type
)
{
return
iframe
?
iframe
.
contentWindow
.
waitOnWorkerMessage
(
type
)
:
Promise
.
reject
(
new
Error
(
"
Frame
removed
from
document
"
)
)
;
}
innerWindowId
(
)
{
var
utils
=
SpecialPowers
.
getDOMWindowUtils
(
iframe
.
contentWindow
)
;
return
utils
.
currentInnerWindowID
;
}
}
;
iframe
.
onload
=
(
)
=
>
res
(
controlledFrame
)
;
target
.
appendChild
(
iframe
)
;
}
)
;
}
function
sendRequestToWorker
(
request
)
{
return
navigator
.
serviceWorker
.
ready
.
then
(
registration
=
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
var
channel
=
new
MessageChannel
(
)
;
channel
.
port1
.
onmessage
=
e
=
>
{
(
e
.
data
.
error
?
reject
:
resolve
)
(
e
.
data
)
;
}
;
registration
.
active
.
postMessage
(
request
[
channel
.
port2
]
)
;
}
)
;
}
)
;
}
