this
.
onpush
=
handlePush
;
this
.
onmessage
=
handleMessage
;
this
.
onpushsubscriptionchange
=
handleSubscriptionChange
;
function
getJSON
(
data
)
{
var
result
=
{
ok
:
false
}
;
try
{
result
.
value
=
data
.
json
(
)
;
result
.
ok
=
true
;
}
catch
(
e
)
{
}
return
result
;
}
function
handlePush
(
event
)
{
self
.
clients
.
matchAll
(
)
.
then
(
function
(
result
)
{
if
(
event
instanceof
PushEvent
)
{
if
(
!
(
'
data
'
in
event
)
)
{
result
[
0
]
.
postMessage
(
{
type
:
"
finished
"
okay
:
"
yes
"
}
)
;
return
;
}
var
message
=
{
type
:
"
finished
"
okay
:
"
yes
"
}
;
if
(
event
.
data
)
{
message
.
data
=
{
text
:
event
.
data
.
text
(
)
arrayBuffer
:
event
.
data
.
arrayBuffer
(
)
json
:
getJSON
(
event
.
data
)
blob
:
event
.
data
.
blob
(
)
}
;
}
result
[
0
]
.
postMessage
(
message
)
;
return
;
}
result
[
0
]
.
postMessage
(
{
type
:
"
finished
"
okay
:
"
no
"
}
)
;
}
)
;
}
function
handleMessage
(
event
)
{
}
function
handleSubscriptionChange
(
event
)
{
event
.
waitUntil
(
self
.
registration
.
pushManager
.
subscribe
(
)
.
then
(
subscription
=
>
self
.
clients
.
matchAll
(
)
)
.
then
(
(
[
client
]
)
=
>
{
client
.
postMessage
(
{
type
:
"
changed
"
okay
:
"
yes
"
}
)
;
}
)
.
catch
(
err
=
>
{
dump
(
"
handleSubscriptionChange
:
Error
notifying
client
:
"
+
err
+
"
\
n
"
)
;
}
)
)
;
}
