#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
loader
/
ModuleLoadRequest
.
h
"
#
include
"
mozilla
/
dom
/
WorkerLoadContext
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
ScriptLoader
.
h
"
#
include
"
WorkerModuleLoader
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
:
:
workerinternals
:
:
loader
{
NS_IMPL_ADDREF_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_IMPL_RELEASE_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WorkerModuleLoader
)
NS_INTERFACE_MAP_END_INHERITING
(
JS
:
:
loader
:
:
ModuleLoaderBase
)
WorkerModuleLoader
:
:
WorkerModuleLoader
(
WorkerScriptLoader
*
aScriptLoader
nsIGlobalObject
*
aGlobalObject
nsISerialEventTarget
*
aEventTarget
)
:
ModuleLoaderBase
(
aScriptLoader
aGlobalObject
aEventTarget
)
{
}
nsIURI
*
WorkerModuleLoader
:
:
GetBaseURI
(
)
const
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
return
workerPrivate
-
>
GetBaseURI
(
)
;
}
already_AddRefed
<
ModuleLoadRequest
>
WorkerModuleLoader
:
:
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
{
Maybe
<
ClientInfo
>
clientInfo
=
GetGlobalObject
(
)
-
>
GetClientInfo
(
)
;
RefPtr
<
WorkerLoadContext
>
loadContext
=
new
WorkerLoadContext
(
WorkerLoadContext
:
:
Kind
:
:
StaticImport
clientInfo
)
;
RefPtr
<
ModuleLoadRequest
>
request
=
new
ModuleLoadRequest
(
aURI
aParent
-
>
mFetchOptions
SRIMetadata
(
)
aParent
-
>
mURI
loadContext
false
false
this
aParent
-
>
mVisitedSet
aParent
-
>
GetRootModule
(
)
)
;
request
-
>
mURL
=
request
-
>
mURI
-
>
GetSpecOrDefault
(
)
;
return
request
.
forget
(
)
;
}
already_AddRefed
<
ModuleLoadRequest
>
WorkerModuleLoader
:
:
CreateDynamicImport
(
JSContext
*
aCx
nsIURI
*
aURI
LoadedScript
*
aMaybeActiveScript
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
{
return
nullptr
;
}
bool
WorkerModuleLoader
:
:
CanStartLoad
(
ModuleLoadRequest
*
aRequest
nsresult
*
aRvOut
)
{
return
true
;
}
nsresult
WorkerModuleLoader
:
:
StartFetch
(
ModuleLoadRequest
*
aRequest
)
{
if
(
!
GetScriptLoader
(
)
-
>
DispatchLoadScript
(
aRequest
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
WorkerModuleLoader
:
:
CompileFetchedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
{
RefPtr
<
JS
:
:
Stencil
>
stencil
;
MOZ_ASSERT
(
aRequest
-
>
IsTextSource
(
)
)
;
MaybeSourceText
maybeSource
;
nsresult
rv
=
aRequest
-
>
GetScriptSource
(
aCx
&
maybeSource
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
auto
compile
=
[
&
]
(
auto
&
source
)
{
return
JS
:
:
CompileModuleScriptToStencil
(
aCx
aOptions
source
)
;
}
;
stencil
=
maybeSource
.
mapNonEmpty
(
compile
)
;
if
(
!
stencil
)
{
return
NS_ERROR_FAILURE
;
}
JS
:
:
InstantiateOptions
instantiateOptions
(
aOptions
)
;
aModuleScript
.
set
(
JS
:
:
InstantiateModuleStencil
(
aCx
instantiateOptions
stencil
)
)
;
if
(
!
aModuleScript
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
WorkerScriptLoader
*
WorkerModuleLoader
:
:
GetScriptLoader
(
)
{
return
static_cast
<
WorkerScriptLoader
*
>
(
mLoader
.
get
(
)
)
;
}
void
WorkerModuleLoader
:
:
OnModuleLoadComplete
(
ModuleLoadRequest
*
aRequest
)
{
if
(
aRequest
-
>
IsTopLevel
(
)
)
{
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
GetGlobalObject
(
)
)
)
)
{
return
;
}
GetScriptLoader
(
)
-
>
MaybeMoveToLoadedList
(
aRequest
)
;
GetScriptLoader
(
)
-
>
ProcessPendingRequests
(
jsapi
.
cx
(
)
)
;
}
}
}
