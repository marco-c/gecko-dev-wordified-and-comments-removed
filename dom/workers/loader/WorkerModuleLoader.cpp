#
include
"
mozilla
/
dom
/
workerinternals
/
ScriptLoader
.
h
"
#
include
"
WorkerModuleLoader
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
:
:
workerinternals
:
:
loader
{
NS_IMPL_ADDREF_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_IMPL_RELEASE_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
WorkerModuleLoader
)
NS_INTERFACE_MAP_END_INHERITING
(
JS
:
:
loader
:
:
ModuleLoaderBase
)
WorkerModuleLoader
:
:
WorkerModuleLoader
(
WorkerScriptLoader
*
aScriptLoader
nsIGlobalObject
*
aGlobalObject
nsISerialEventTarget
*
aEventTarget
)
:
ModuleLoaderBase
(
aScriptLoader
aGlobalObject
aEventTarget
)
{
}
already_AddRefed
<
ModuleLoadRequest
>
WorkerModuleLoader
:
:
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
{
MOZ_CRASH
(
"
Not
implemented
yet
"
)
;
}
already_AddRefed
<
ModuleLoadRequest
>
WorkerModuleLoader
:
:
CreateDynamicImport
(
JSContext
*
aCx
nsIURI
*
aURI
LoadedScript
*
aMaybeActiveScript
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
{
return
nullptr
;
}
bool
WorkerModuleLoader
:
:
CanStartLoad
(
ModuleLoadRequest
*
aRequest
nsresult
*
aRvOut
)
{
return
true
;
}
nsresult
WorkerModuleLoader
:
:
StartFetch
(
ModuleLoadRequest
*
aRequest
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
WorkerModuleLoader
:
:
CompileFetchedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
{
return
NS_ERROR_FAILURE
;
}
WorkerScriptLoader
*
WorkerModuleLoader
:
:
GetScriptLoader
(
)
{
return
static_cast
<
WorkerScriptLoader
*
>
(
mLoader
.
get
(
)
)
;
}
void
WorkerModuleLoader
:
:
OnModuleLoadComplete
(
ModuleLoadRequest
*
aRequest
)
{
}
}
