#
include
"
ScriptResponseHeaderProcessor
.
h
"
#
include
"
mozilla
/
Try
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
workerinternals
{
namespace
loader
{
NS_IMPL_ISUPPORTS
(
ScriptResponseHeaderProcessor
nsIRequestObserver
)
;
nsresult
ScriptResponseHeaderProcessor
:
:
ProcessCrossOriginEmbedderPolicyHeader
(
WorkerPrivate
*
aWorkerPrivate
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
bool
aIsMainScript
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
if
(
aIsMainScript
)
{
MOZ_TRY
(
aWorkerPrivate
-
>
SetEmbedderPolicy
(
aPolicy
)
)
;
}
else
{
Unused
<
<
NS_WARN_IF
(
!
aWorkerPrivate
-
>
MatchEmbedderPolicy
(
aPolicy
)
)
;
}
return
NS_OK
;
}
nsresult
ScriptResponseHeaderProcessor
:
:
EnsureExpectedModuleType
(
nsIRequest
*
aRequest
)
{
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryInterface
(
aRequest
)
;
MOZ_ASSERT
(
channel
)
;
nsAutoCString
mimeType
;
channel
-
>
GetContentType
(
mimeType
)
;
NS_ConvertUTF8toUTF16
typeString
(
mimeType
)
;
if
(
mModuleType
=
=
JS
:
:
ModuleType
:
:
JavaScript
&
&
nsContentUtils
:
:
IsJavascriptMIMEType
(
typeString
)
)
{
return
NS_OK
;
}
if
(
mModuleType
=
=
JS
:
:
ModuleType
:
:
JSON
&
&
nsContentUtils
:
:
IsJsonMimeType
(
typeString
)
)
{
return
NS_OK
;
}
return
NS_ERROR_DOM_NETWORK_ERR
;
}
nsresult
ScriptResponseHeaderProcessor
:
:
ProcessCrossOriginEmbedderPolicyHeader
(
nsIRequest
*
aRequest
)
{
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannel
=
do_QueryInterface
(
aRequest
)
;
MOZ_ASSERT
(
mWorkerRef
)
;
if
(
!
httpChannel
)
{
if
(
mIsMainScript
)
{
mWorkerRef
-
>
Private
(
)
-
>
InheritOwnerEmbedderPolicyOrNull
(
aRequest
)
;
}
return
NS_OK
;
}
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
coep
;
MOZ_TRY
(
httpChannel
-
>
GetResponseEmbedderPolicy
(
mWorkerRef
-
>
Private
(
)
-
>
Trials
(
)
.
IsEnabled
(
OriginTrial
:
:
CoepCredentialless
)
&
coep
)
)
;
return
ProcessCrossOriginEmbedderPolicyHeader
(
mWorkerRef
-
>
Private
(
)
coep
mIsMainScript
)
;
}
}
}
}
}
