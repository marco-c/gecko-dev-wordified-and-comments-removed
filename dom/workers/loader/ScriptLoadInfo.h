#
ifndef
mozilla_dom_workers_ScriptLoadInfo_h__
#
define
mozilla_dom_workers_ScriptLoadInfo_h__
#
include
"
nsIRequest
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIChannel
.
h
"
class
nsIChannel
;
class
nsIReferrerInfo
;
class
nsIURI
;
namespace
mozilla
:
:
dom
{
class
ClientInfo
;
class
WorkerPrivate
;
struct
ScriptLoadInfo
{
ScriptLoadInfo
(
)
{
MOZ_ASSERT
(
mScriptIsUTF8
=
=
false
"
set
by
member
initializer
"
)
;
MOZ_ASSERT
(
mScriptLength
=
=
0
"
set
by
member
initializer
"
)
;
mScript
.
mUTF16
=
nullptr
;
}
~
ScriptLoadInfo
(
)
{
if
(
void
*
data
=
mScriptIsUTF8
?
static_cast
<
void
*
>
(
mScript
.
mUTF8
)
:
static_cast
<
void
*
>
(
mScript
.
mUTF16
)
)
{
js_free
(
data
)
;
}
}
nsString
mURL
;
nsString
mFullURL
;
RefPtr
<
Promise
>
mCachePromise
;
nsCOMPtr
<
nsIInputStream
>
mCacheReadStream
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsresult
mLoadResult
=
NS_ERROR_NOT_INITIALIZED
;
union
{
char16_t
*
mUTF16
;
Utf8Unit
*
mUTF8
;
}
mScript
;
size_t
mScriptLength
=
0
;
bool
mScriptIsUTF8
=
false
;
bool
ScriptTextIsNull
(
)
const
{
return
mScriptIsUTF8
?
mScript
.
mUTF8
=
=
nullptr
:
mScript
.
mUTF16
=
=
nullptr
;
}
void
InitUTF8Script
(
)
{
MOZ_ASSERT
(
ScriptTextIsNull
(
)
)
;
MOZ_ASSERT
(
mScriptLength
=
=
0
)
;
mScriptIsUTF8
=
true
;
mScript
.
mUTF8
=
nullptr
;
mScriptLength
=
0
;
}
void
InitUTF16Script
(
)
{
MOZ_ASSERT
(
ScriptTextIsNull
(
)
)
;
MOZ_ASSERT
(
mScriptLength
=
=
0
)
;
mScriptIsUTF8
=
false
;
mScript
.
mUTF16
=
nullptr
;
mScriptLength
=
0
;
}
bool
mLoadingFinished
=
false
;
bool
mExecutionScheduled
=
false
;
bool
mExecutionResult
=
false
;
Maybe
<
nsString
>
mSourceMapURL
;
enum
CacheStatus
{
Uncached
WritingToCache
ReadingFromCache
Cached
ToBeCached
Cancel
}
;
CacheStatus
mCacheStatus
=
Uncached
;
Maybe
<
bool
>
mMutedErrorFlag
;
bool
Finished
(
)
const
{
return
mLoadingFinished
&
&
!
mCachePromise
&
&
!
mChannel
;
}
}
;
}
#
endif
