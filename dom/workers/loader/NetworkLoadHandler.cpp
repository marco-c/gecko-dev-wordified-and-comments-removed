#
include
"
NetworkLoadHandler
.
h
"
#
include
"
CacheLoadHandler
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
include
"
mozilla
/
dom
/
InternalResponse
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerBinding
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
mozilla
/
dom
/
Response
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
ScriptLoader
.
h
"
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
namespace
mozilla
{
namespace
dom
{
namespace
workerinternals
:
:
loader
{
NS_IMPL_ISUPPORTS
(
NetworkLoadHandler
nsIStreamLoaderObserver
nsIRequestObserver
)
NetworkLoadHandler
:
:
NetworkLoadHandler
(
WorkerScriptLoader
*
aLoader
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
)
:
mLoader
(
aLoader
)
mWorkerPrivate
(
aLoader
-
>
mWorkerPrivate
)
mLoadContext
(
aRequest
-
>
GetWorkerLoadContext
(
)
)
{
MOZ_ASSERT
(
mLoader
)
;
mDecoder
=
MakeUnique
<
ScriptDecoder
>
(
UTF_8_ENCODING
ScriptDecoder
:
:
BOMHandling
:
:
Remove
)
;
}
NS_IMETHODIMP
NetworkLoadHandler
:
:
OnStreamComplete
(
nsIStreamLoader
*
aLoader
nsISupports
*
aContext
nsresult
aStatus
uint32_t
aStringLen
const
uint8_t
*
aString
)
{
nsresult
rv
=
DataReceivedFromNetwork
(
aLoader
aStatus
aStringLen
aString
)
;
return
mLoader
-
>
OnStreamComplete
(
mLoadContext
-
>
mRequest
rv
)
;
}
nsresult
NetworkLoadHandler
:
:
DataReceivedFromNetwork
(
nsIStreamLoader
*
aLoader
nsresult
aStatus
uint32_t
aStringLen
const
uint8_t
*
aString
)
{
AssertIsOnMainThread
(
)
;
if
(
mLoader
-
>
IsCancelled
(
)
)
{
return
mLoader
-
>
mCancelMainThread
.
ref
(
)
;
}
if
(
NS_FAILED
(
aStatus
)
)
{
return
aStatus
;
}
NS_ASSERTION
(
aString
"
This
should
never
be
null
!
"
)
;
nsCOMPtr
<
nsIRequest
>
request
;
nsresult
rv
=
aLoader
-
>
GetRequest
(
getter_AddRefs
(
request
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryInterface
(
request
)
;
MOZ_ASSERT
(
channel
)
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
NS_ASSERTION
(
ssm
"
Should
never
be
null
!
"
)
;
nsCOMPtr
<
nsIPrincipal
>
channelPrincipal
;
rv
=
ssm
-
>
GetChannelResultPrincipal
(
channel
getter_AddRefs
(
channelPrincipal
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsIPrincipal
*
principal
=
mWorkerPrivate
-
>
GetPrincipal
(
)
;
if
(
!
principal
)
{
WorkerPrivate
*
parentWorker
=
mWorkerPrivate
-
>
GetParent
(
)
;
MOZ_ASSERT
(
parentWorker
"
Must
have
a
parent
!
"
)
;
principal
=
parentWorker
-
>
GetPrincipal
(
)
;
}
#
ifdef
DEBUG
if
(
mLoader
-
>
IsMainWorkerScript
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
loadingPrincipal
=
mWorkerPrivate
-
>
GetLoadingPrincipal
(
)
;
MOZ_ASSERT
(
!
loadingPrincipal
|
|
loadingPrincipal
-
>
GetIsNullPrincipal
(
)
|
|
principal
-
>
GetIsNullPrincipal
(
)
|
|
loadingPrincipal
-
>
Subsumes
(
principal
)
)
;
}
#
endif
mLoadContext
-
>
mMutedErrorFlag
.
emplace
(
!
mLoader
-
>
IsMainWorkerScript
(
)
&
&
!
principal
-
>
Subsumes
(
channelPrincipal
)
)
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
request
)
;
nsAutoCString
tCspHeaderValue
tCspROHeaderValue
tRPHeaderCValue
;
if
(
httpChannel
)
{
bool
requestSucceeded
;
rv
=
httpChannel
-
>
GetRequestSucceeded
(
&
requestSucceeded
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
requestSucceeded
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
"
content
-
security
-
policy
"
_ns
tCspHeaderValue
)
;
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
"
content
-
security
-
policy
-
report
-
only
"
_ns
tCspROHeaderValue
)
;
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
"
referrer
-
policy
"
_ns
tRPHeaderCValue
)
;
nsAutoCString
sourceMapURL
;
if
(
nsContentUtils
:
:
GetSourceMapURL
(
httpChannel
sourceMapURL
)
)
{
mLoadContext
-
>
mSourceMapURL
=
Some
(
NS_ConvertUTF8toUTF16
(
sourceMapURL
)
)
;
}
}
Document
*
parentDoc
=
mWorkerPrivate
-
>
GetDocument
(
)
;
mLoadContext
-
>
mRequest
-
>
SetTextSource
(
)
;
rv
=
mDecoder
-
>
DecodeRawData
(
mLoadContext
-
>
mRequest
aString
aStringLen
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
mLoadContext
-
>
mRequest
-
>
ScriptTextLength
(
)
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
"
DOM
"
_ns
parentDoc
nsContentUtils
:
:
eDOM_PROPERTIES
"
EmptyWorkerSourceWarning
"
)
;
}
nsCOMPtr
<
nsIURI
>
finalURI
;
rv
=
NS_GetFinalChannelURI
(
channel
getter_AddRefs
(
finalURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
principal
-
>
IsSameOrigin
(
finalURI
)
)
{
nsCString
filename
;
rv
=
finalURI
-
>
GetSpec
(
filename
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
filename
.
IsEmpty
(
)
)
{
mLoadContext
-
>
mURL
.
Assign
(
NS_ConvertUTF8toUTF16
(
filename
)
)
;
}
}
if
(
mLoader
-
>
IsMainWorkerScript
(
)
)
{
mWorkerPrivate
-
>
SetBaseURI
(
finalURI
)
;
mWorkerPrivate
-
>
InitChannelInfo
(
channel
)
;
NS_ENSURE_TRUE
(
mWorkerPrivate
-
>
FinalChannelPrincipalIsValid
(
channel
)
NS_ERROR_FAILURE
)
;
rv
=
mWorkerPrivate
-
>
SetPrincipalsAndCSPFromChannel
(
channel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
mWorkerPrivate
-
>
GetCSP
(
)
;
if
(
!
csp
)
{
rv
=
mWorkerPrivate
-
>
SetCSPFromHeaderValues
(
tCspHeaderValue
tCspROHeaderValue
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
else
{
csp
-
>
EnsureEventTarget
(
mWorkerPrivate
-
>
MainThreadEventTarget
(
)
)
;
}
mWorkerPrivate
-
>
UpdateReferrerInfoFromHeader
(
tRPHeaderCValue
)
;
WorkerPrivate
*
parent
=
mWorkerPrivate
-
>
GetParent
(
)
;
if
(
parent
)
{
mWorkerPrivate
-
>
SetXHRParamsAllowed
(
parent
-
>
XHRParamsAllowed
(
)
)
;
}
nsCOMPtr
<
nsILoadInfo
>
chanLoadInfo
=
channel
-
>
LoadInfo
(
)
;
if
(
chanLoadInfo
)
{
mLoader
-
>
SetController
(
chanLoadInfo
-
>
GetController
(
)
)
;
}
if
(
IsBlobURI
(
mWorkerPrivate
-
>
GetBaseURI
(
)
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mLoader
-
>
GetController
(
)
.
isNothing
(
)
)
;
mLoader
-
>
SetController
(
mWorkerPrivate
-
>
GetParentController
(
)
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
NetworkLoadHandler
:
:
OnStartRequest
(
nsIRequest
*
aRequest
)
{
nsresult
rv
=
PrepareForRequest
(
aRequest
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRequest
-
>
Cancel
(
rv
)
;
}
return
rv
;
}
nsresult
NetworkLoadHandler
:
:
PrepareForRequest
(
nsIRequest
*
aRequest
)
{
AssertIsOnMainThread
(
)
;
if
(
mLoader
-
>
IsCancelled
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIChannel
>
channel
=
do_QueryInterface
(
aRequest
)
;
if
(
mWorkerPrivate
-
>
IsServiceWorker
(
)
)
{
nsAutoCString
mimeType
;
channel
-
>
GetContentType
(
mimeType
)
;
if
(
!
nsContentUtils
:
:
IsJavascriptMIMEType
(
NS_ConvertUTF8toUTF16
(
mimeType
)
)
)
{
const
nsCString
&
scope
=
mWorkerPrivate
-
>
GetServiceWorkerRegistrationDescriptor
(
)
.
Scope
(
)
;
ServiceWorkerManager
:
:
LocalizeAndReportToAllClients
(
scope
"
ServiceWorkerRegisterMimeTypeError2
"
nsTArray
<
nsString
>
{
NS_ConvertUTF8toUTF16
(
scope
)
NS_ConvertUTF8toUTF16
(
mimeType
)
mLoadContext
-
>
mURL
}
)
;
return
NS_ERROR_DOM_NETWORK_ERR
;
}
}
SafeRefPtr
<
mozilla
:
:
dom
:
:
InternalResponse
>
ir
=
MakeSafeRefPtr
<
mozilla
:
:
dom
:
:
InternalResponse
>
(
200
"
OK
"
_ns
)
;
ir
-
>
SetBody
(
mLoadContext
-
>
mCacheReadStream
InternalResponse
:
:
UNKNOWN_BODY_SIZE
)
;
mLoadContext
-
>
mCacheReadStream
=
nullptr
;
ir
-
>
InitChannelInfo
(
channel
)
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
NS_ASSERTION
(
ssm
"
Should
never
be
null
!
"
)
;
nsCOMPtr
<
nsIPrincipal
>
channelPrincipal
;
MOZ_TRY
(
ssm
-
>
GetChannelResultPrincipal
(
channel
getter_AddRefs
(
channelPrincipal
)
)
)
;
UniquePtr
<
PrincipalInfo
>
principalInfo
(
new
PrincipalInfo
(
)
)
;
MOZ_TRY
(
PrincipalToPrincipalInfo
(
channelPrincipal
principalInfo
.
get
(
)
)
)
;
ir
-
>
SetPrincipalInfo
(
std
:
:
move
(
principalInfo
)
)
;
ir
-
>
Headers
(
)
-
>
FillResponseHeaders
(
channel
)
;
RefPtr
<
mozilla
:
:
dom
:
:
Response
>
response
=
new
mozilla
:
:
dom
:
:
Response
(
mLoadContext
-
>
GetCacheCreator
(
)
-
>
Global
(
)
std
:
:
move
(
ir
)
nullptr
)
;
mozilla
:
:
dom
:
:
RequestOrUSVString
request
;
MOZ_ASSERT
(
!
mLoadContext
-
>
mFullURL
.
IsEmpty
(
)
)
;
request
.
SetAsUSVString
(
)
.
ShareOrDependUpon
(
mLoadContext
-
>
mFullURL
)
;
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
ErrorResult
error
;
RefPtr
<
Promise
>
cachePromise
=
mLoadContext
-
>
GetCacheCreator
(
)
-
>
Cache_
(
)
-
>
Put
(
jsapi
.
cx
(
)
request
*
response
error
)
;
error
.
WouldReportJSException
(
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
RefPtr
<
CachePromiseHandler
>
promiseHandler
=
new
CachePromiseHandler
(
mLoader
mLoadContext
-
>
mRequest
)
;
cachePromise
-
>
AppendNativeHandler
(
promiseHandler
)
;
mLoadContext
-
>
mCachePromise
.
swap
(
cachePromise
)
;
mLoadContext
-
>
mCacheStatus
=
WorkerLoadContext
:
:
WritingToCache
;
return
NS_OK
;
}
}
}
}
