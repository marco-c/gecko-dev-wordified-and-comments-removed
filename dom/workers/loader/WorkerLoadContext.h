#
ifndef
mozilla_dom_workers_WorkerLoadContext_h__
#
define
mozilla_dom_workers_WorkerLoadContext_h__
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
js
/
loader
/
ScriptKind
.
h
"
#
include
"
js
/
loader
/
ScriptLoadRequest
.
h
"
#
include
"
js
/
loader
/
LoadContextBase
.
h
"
class
nsIReferrerInfo
;
class
nsIURI
;
namespace
mozilla
:
:
dom
{
class
ClientInfo
;
class
WorkerPrivate
;
namespace
workerinternals
:
:
loader
{
class
CacheCreator
;
}
class
WorkerLoadContext
:
public
JS
:
:
loader
:
:
LoadContextNoCCBase
{
public
:
enum
Kind
{
MainScript
ImportScript
DebuggerScript
}
;
explicit
WorkerLoadContext
(
Kind
aKind
const
Maybe
<
ClientInfo
>
&
aClientInfo
)
;
void
SetRequest
(
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
)
override
{
LoadContextBase
:
:
SetRequest
(
aRequest
)
;
mIsTopLevel
=
aRequest
-
>
IsTopLevel
(
)
&
&
(
mKind
=
=
Kind
:
:
MainScript
)
;
}
bool
IsTopLevel
(
)
{
return
mIsTopLevel
;
}
;
static
Kind
GetKind
(
bool
isMainScript
bool
isDebuggerScript
)
{
if
(
isDebuggerScript
)
{
return
Kind
:
:
DebuggerScript
;
}
if
(
isMainScript
)
{
return
Kind
:
:
MainScript
;
}
return
Kind
:
:
ImportScript
;
}
;
Maybe
<
bool
>
mMutedErrorFlag
;
nsresult
mLoadResult
=
NS_ERROR_NOT_INITIALIZED
;
bool
mLoadingFinished
=
false
;
bool
mIsTopLevel
=
true
;
Kind
mKind
;
Maybe
<
ClientInfo
>
mClientInfo
;
nsString
mFullURL
;
RefPtr
<
Promise
>
mCachePromise
;
nsCOMPtr
<
nsIInputStream
>
mCacheReadStream
;
nsMainThreadPtrHandle
<
workerinternals
:
:
loader
:
:
CacheCreator
>
mCacheCreator
;
void
ClearCacheCreator
(
)
;
void
SetCacheCreator
(
RefPtr
<
workerinternals
:
:
loader
:
:
CacheCreator
>
aCacheCreator
)
;
RefPtr
<
workerinternals
:
:
loader
:
:
CacheCreator
>
GetCacheCreator
(
)
;
enum
CacheStatus
{
Uncached
WritingToCache
ReadingFromCache
Cached
ToBeCached
Cancel
}
;
CacheStatus
mCacheStatus
=
Uncached
;
bool
IsAwaitingPromise
(
)
const
{
return
bool
(
mCachePromise
)
;
}
}
;
}
#
endif
