#
include
"
WorkerLoadContext
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
ScriptLoader
.
h
"
#
include
"
CacheLoadHandler
.
h
"
namespace
mozilla
{
namespace
dom
{
WorkerLoadContext
:
:
WorkerLoadContext
(
Kind
aKind
const
Maybe
<
ClientInfo
>
&
aClientInfo
)
:
JS
:
:
loader
:
:
LoadContextBase
(
JS
:
:
loader
:
:
ContextKind
:
:
Worker
)
mKind
(
aKind
)
mClientInfo
(
aClientInfo
)
{
}
;
void
WorkerLoadContext
:
:
SetCacheCreator
(
RefPtr
<
workerinternals
:
:
loader
:
:
CacheCreator
>
aCacheCreator
)
{
AssertIsOnMainThread
(
)
;
mCacheCreator
=
new
nsMainThreadPtrHolder
<
workerinternals
:
:
loader
:
:
CacheCreator
>
(
"
WorkerLoadContext
:
:
mCacheCreator
"
aCacheCreator
)
;
}
void
WorkerLoadContext
:
:
ClearCacheCreator
(
)
{
AssertIsOnMainThread
(
)
;
mCacheCreator
=
nullptr
;
}
RefPtr
<
workerinternals
:
:
loader
:
:
CacheCreator
>
WorkerLoadContext
:
:
GetCacheCreator
(
)
{
AssertIsOnMainThread
(
)
;
return
mCacheCreator
.
get
(
)
;
}
ThreadSafeRequestHandle
:
:
ThreadSafeRequestHandle
(
JS
:
:
loader
:
:
ScriptLoadRequest
*
aRequest
nsISerialEventTarget
*
aSyncTarget
)
:
mRequest
(
aRequest
)
mOwningEventTarget
(
aSyncTarget
)
{
}
already_AddRefed
<
JS
:
:
loader
:
:
ScriptLoadRequest
>
ThreadSafeRequestHandle
:
:
ReleaseRequest
(
)
{
mRunnable
=
nullptr
;
return
mRequest
.
forget
(
)
;
}
nsresult
ThreadSafeRequestHandle
:
:
OnStreamComplete
(
nsresult
aStatus
)
{
return
mRunnable
-
>
OnStreamComplete
(
this
aStatus
)
;
}
void
ThreadSafeRequestHandle
:
:
LoadingFinished
(
nsresult
aRv
)
{
mRunnable
-
>
LoadingFinished
(
this
aRv
)
;
}
void
ThreadSafeRequestHandle
:
:
MaybeExecuteFinishedScripts
(
)
{
mRunnable
-
>
MaybeExecuteFinishedScripts
(
this
)
;
}
bool
ThreadSafeRequestHandle
:
:
IsCancelled
(
)
{
return
mRunnable
-
>
IsCancelled
(
)
;
}
nsresult
ThreadSafeRequestHandle
:
:
GetCancelResult
(
)
{
return
mRunnable
-
>
GetCancelResult
(
)
;
}
ThreadSafeRequestHandle
:
:
~
ThreadSafeRequestHandle
(
)
{
if
(
!
mRequest
|
|
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
NS_ProxyRelease
(
"
ThreadSafeRequestHandle
:
:
mRequest
"
mOwningEventTarget
mRequest
.
forget
(
)
)
)
;
}
}
}
