#
ifndef
mozilla_loader_WorkerModuleLoader_h
#
define
mozilla_loader_WorkerModuleLoader_h
#
include
"
js
/
loader
/
ModuleLoaderBase
.
h
"
#
include
"
js
/
loader
/
ScriptFetchOptions
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
SerializedStackHolder
.
h
"
namespace
mozilla
:
:
dom
:
:
workerinternals
:
:
loader
{
class
WorkerScriptLoader
;
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
using
ScriptKind
=
JS
:
:
loader
:
:
ScriptKind
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ScriptLoadRequestList
=
JS
:
:
loader
:
:
ScriptLoadRequestList
;
using
ModuleLoadRequest
=
JS
:
:
loader
:
:
ModuleLoadRequest
;
class
WorkerModuleLoader
:
public
JS
:
:
loader
:
:
ModuleLoaderBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
WorkerModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
WorkerModuleLoader
(
WorkerScriptLoader
*
aScriptLoader
nsIGlobalObject
*
aGlobalObject
)
;
private
:
~
WorkerModuleLoader
(
)
=
default
;
nsIURI
*
GetClientReferrerURI
(
)
override
;
already_AddRefed
<
JS
:
:
loader
:
:
ScriptFetchOptions
>
CreateDefaultScriptFetchOptions
(
)
override
;
already_AddRefed
<
ModuleLoadRequest
>
CreateRequest
(
JSContext
*
aCx
nsIURI
*
aURI
JS
:
:
Handle
<
JSObject
*
>
aModuleRequest
JS
:
:
Handle
<
JS
:
:
Value
>
aHostDefined
JS
:
:
Handle
<
JS
:
:
Value
>
aPayload
bool
aIsDynamicImport
ScriptFetchOptions
*
aOptions
mozilla
:
:
dom
:
:
ReferrerPolicy
aReferrerPolicy
nsIURI
*
aBaseURL
const
mozilla
:
:
dom
:
:
SRIMetadata
&
aSriMetadata
)
override
;
bool
CreateDynamicImportLoader
(
)
;
void
SetScriptLoader
(
JS
:
:
loader
:
:
ScriptLoaderInterface
*
aLoader
)
{
mLoader
=
aLoader
;
}
WorkerScriptLoader
*
GetCurrentScriptLoader
(
)
;
WorkerScriptLoader
*
GetScriptLoaderFor
(
ModuleLoadRequest
*
aRequest
)
;
nsIURI
*
GetBaseURI
(
)
const
override
;
bool
IsDynamicImportSupported
(
)
override
;
bool
CanStartLoad
(
ModuleLoadRequest
*
aRequest
nsresult
*
aRvOut
)
override
;
nsresult
StartFetch
(
ModuleLoadRequest
*
aRequest
)
override
;
nsresult
CompileFetchedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
override
;
nsresult
CompileJavaScriptModule
(
JSContext
*
aCx
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
;
nsresult
CompileJsonModule
(
JSContext
*
aCx
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
;
void
OnModuleLoadComplete
(
ModuleLoadRequest
*
aRequest
)
override
;
bool
IsModuleEvaluationAborted
(
ModuleLoadRequest
*
aRequest
)
override
;
bool
IsModuleTypeAllowed
(
JS
:
:
ModuleType
aModuleType
)
override
{
return
aModuleType
!
=
JS
:
:
ModuleType
:
:
Unknown
&
&
aModuleType
!
=
JS
:
:
ModuleType
:
:
CSS
;
}
}
;
}
#
endif
