#
ifndef
mozilla_dom_workers_ScriptResponseHeaderProcessor_h__
#
define
mozilla_dom_workers_ScriptResponseHeaderProcessor_h__
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIStreamLoader
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
namespace
workerinternals
{
namespace
loader
{
class
ScriptResponseHeaderProcessor
final
:
public
nsIRequestObserver
{
public
:
NS_DECL_ISUPPORTS
ScriptResponseHeaderProcessor
(
WorkerPrivate
*
aWorkerPrivate
bool
aIsMainScript
)
:
mWorkerPrivate
(
aWorkerPrivate
)
mIsMainScript
(
aIsMainScript
)
{
AssertIsOnMainThread
(
)
;
}
NS_IMETHOD
OnStartRequest
(
nsIRequest
*
aRequest
)
override
{
if
(
!
StaticPrefs
:
:
browser_tabs_remote_useCrossOriginEmbedderPolicy
(
)
)
{
return
NS_OK
;
}
nsresult
rv
=
ProcessCrossOriginEmbedderPolicyHeader
(
aRequest
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRequest
-
>
Cancel
(
rv
)
;
}
return
rv
;
}
NS_IMETHOD
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatusCode
)
override
{
return
NS_OK
;
}
static
nsresult
ProcessCrossOriginEmbedderPolicyHeader
(
WorkerPrivate
*
aWorkerPrivate
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
bool
aIsMainScript
)
;
private
:
~
ScriptResponseHeaderProcessor
(
)
=
default
;
nsresult
ProcessCrossOriginEmbedderPolicyHeader
(
nsIRequest
*
aRequest
)
;
WorkerPrivate
*
const
mWorkerPrivate
;
const
bool
mIsMainScript
;
}
;
}
}
}
}
#
endif
