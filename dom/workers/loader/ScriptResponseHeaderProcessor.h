#
ifndef
mozilla_dom_workers_ScriptResponseHeaderProcessor_h__
#
define
mozilla_dom_workers_ScriptResponseHeaderProcessor_h__
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIStreamLoader
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
js
/
Modules
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
namespace
mozilla
:
:
dom
{
class
ThreadSafeWorkerRef
;
namespace
workerinternals
:
:
loader
{
class
ScriptResponseHeaderProcessor
final
:
public
nsIRequestObserver
{
public
:
NS_DECL_ISUPPORTS
ScriptResponseHeaderProcessor
(
RefPtr
<
ThreadSafeWorkerRef
>
&
aWorkerRef
bool
aIsMainScript
bool
aIsModuleScript
JS
:
:
ModuleType
aModuleType
)
:
mWorkerRef
(
aWorkerRef
)
mIsMainScript
(
aIsMainScript
)
mIsModuleScript
(
aIsModuleScript
)
mModuleType
(
aModuleType
)
{
AssertIsOnMainThread
(
)
;
}
NS_IMETHOD
OnStartRequest
(
nsIRequest
*
aRequest
)
override
{
nsresult
rv
=
NS_OK
;
if
(
mIsModuleScript
&
&
StaticPrefs
:
:
dom_workers_importScripts_enforceStrictMimeType
(
)
)
{
rv
=
EnsureExpectedModuleType
(
aRequest
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRequest
-
>
Cancel
(
rv
)
;
return
NS_OK
;
}
}
if
(
!
StaticPrefs
:
:
browser_tabs_remote_useCrossOriginEmbedderPolicy
(
)
)
{
return
NS_OK
;
}
rv
=
ProcessCrossOriginEmbedderPolicyHeader
(
aRequest
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRequest
-
>
Cancel
(
rv
)
;
}
return
rv
;
}
NS_IMETHOD
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatusCode
)
override
{
return
NS_OK
;
}
static
nsresult
ProcessCrossOriginEmbedderPolicyHeader
(
WorkerPrivate
*
aWorkerPrivate
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
bool
aIsMainScript
)
;
private
:
~
ScriptResponseHeaderProcessor
(
)
=
default
;
nsresult
EnsureExpectedModuleType
(
nsIRequest
*
aRequest
)
;
nsresult
ProcessCrossOriginEmbedderPolicyHeader
(
nsIRequest
*
aRequest
)
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
const
bool
mIsMainScript
;
const
bool
mIsModuleScript
;
const
JS
:
:
ModuleType
mModuleType
;
}
;
}
}
#
endif
