#
ifndef
mozilla_dom_ServiceWorkerRegistration_h
#
define
mozilla_dom_ServiceWorkerRegistration_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerBinding
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationBinding
.
h
"
#
include
"
mozilla
/
dom
/
workers
/
bindings
/
WorkerHolder
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
NotificationBinding
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PushManager
;
class
WorkerListener
;
namespace
workers
{
class
ServiceWorker
;
class
WorkerPrivate
;
}
class
ServiceWorkerRegistrationListener
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
UpdateFound
(
)
=
0
;
virtual
void
InvalidateWorkers
(
WhichServiceWorker
aWhichOnes
)
=
0
;
virtual
void
TransitionWorker
(
WhichServiceWorker
aWhichOne
)
=
0
;
virtual
void
RegistrationRemoved
(
)
=
0
;
virtual
void
GetScope
(
nsAString
&
aScope
)
const
=
0
;
}
;
class
ServiceWorkerRegistration
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
IMPL_EVENT_HANDLER
(
updatefound
)
static
bool
Visible
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
already_AddRefed
<
ServiceWorkerRegistration
>
CreateForMainThread
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aScope
)
;
static
already_AddRefed
<
ServiceWorkerRegistration
>
CreateForWorker
(
workers
:
:
WorkerPrivate
*
aWorkerPrivate
const
nsAString
&
aScope
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetInstalling
(
)
=
0
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetWaiting
(
)
=
0
;
virtual
already_AddRefed
<
workers
:
:
ServiceWorker
>
GetActive
(
)
=
0
;
virtual
void
GetScope
(
nsAString
&
aScope
)
const
=
0
;
virtual
ServiceWorkerUpdateViaCache
GetUpdateViaCache
(
ErrorResult
&
aRv
)
const
=
0
;
virtual
already_AddRefed
<
Promise
>
Update
(
ErrorResult
&
aRv
)
=
0
;
virtual
already_AddRefed
<
Promise
>
Unregister
(
ErrorResult
&
aRv
)
=
0
;
virtual
already_AddRefed
<
PushManager
>
GetPushManager
(
JSContext
*
aCx
ErrorResult
&
aRv
)
=
0
;
virtual
already_AddRefed
<
Promise
>
ShowNotification
(
JSContext
*
aCx
const
nsAString
&
aTitle
const
NotificationOptions
&
aOptions
ErrorResult
&
aRv
)
=
0
;
virtual
already_AddRefed
<
Promise
>
GetNotifications
(
const
GetNotificationOptions
&
aOptions
ErrorResult
&
aRv
)
=
0
;
protected
:
ServiceWorkerRegistration
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aScope
)
;
virtual
~
ServiceWorkerRegistration
(
)
{
}
const
nsString
mScope
;
}
;
}
}
#
endif
