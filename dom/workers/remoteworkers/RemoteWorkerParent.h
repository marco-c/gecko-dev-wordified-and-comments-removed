#
ifndef
mozilla_dom_RemoteWorkerParent_h
#
define
mozilla_dom_RemoteWorkerParent_h
#
include
"
mozilla
/
dom
/
PRemoteWorkerParent
.
h
"
#
include
"
mozilla
/
dom
/
UniqueContentParentKeepAlive
.
h
"
namespace
mozilla
:
:
dom
{
class
RemoteWorkerController
;
class
RemoteWorkerServiceParent
;
class
RemoteWorkerParent
final
:
public
PRemoteWorkerParent
{
friend
class
PRemoteWorkerParent
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteWorkerParent
override
)
;
explicit
RemoteWorkerParent
(
UniqueThreadsafeContentParentKeepAlive
&
&
aKeepAlive
)
;
void
SetController
(
RemoteWorkerController
*
aController
)
;
void
MaybeSendDelete
(
)
;
RemoteWorkerServiceParent
*
Manager
(
)
const
;
private
:
~
RemoteWorkerParent
(
)
;
already_AddRefed
<
PFetchEventOpProxyParent
>
AllocPFetchEventOpProxyParent
(
const
ParentToChildServiceWorkerFetchEventOpArgs
&
aArgs
)
;
void
ActorDestroy
(
mozilla
:
:
ipc
:
:
IProtocol
:
:
ActorDestroyReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvError
(
const
ErrorValue
&
aValue
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyLock
(
const
bool
&
aCreated
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyWebTransport
(
const
bool
&
aCreated
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreated
(
const
bool
&
aStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetServiceWorkerSkipWaitingFlag
(
SetServiceWorkerSkipWaitingFlagResolver
&
&
aResolve
)
;
bool
mDeleteSent
=
false
;
RefPtr
<
RemoteWorkerController
>
mController
;
UniqueThreadsafeContentParentKeepAlive
mContentParentKeepAlive
;
}
;
}
#
endif
