#
ifndef
mozilla_dom_RemoteWorkerParent_h
#
define
mozilla_dom_RemoteWorkerParent_h
#
include
"
mozilla
/
dom
/
PRemoteWorkerParent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RemoteWorkerController
;
class
RemoteWorkerParent
final
:
public
PRemoteWorkerParent
{
friend
class
PRemoteWorkerParent
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteWorkerParent
)
RemoteWorkerParent
(
)
;
void
Initialize
(
bool
aAlreadyRegistered
=
false
)
;
void
SetController
(
RemoteWorkerController
*
aController
)
;
void
MaybeSendDelete
(
)
;
private
:
~
RemoteWorkerParent
(
)
;
PFetchEventOpProxyParent
*
AllocPFetchEventOpProxyParent
(
const
ServiceWorkerFetchEventOpArgs
&
aArgs
)
;
bool
DeallocPFetchEventOpProxyParent
(
PFetchEventOpProxyParent
*
aActor
)
;
void
ActorDestroy
(
mozilla
:
:
ipc
:
:
IProtocol
:
:
ActorDestroyReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvError
(
const
ErrorValue
&
aValue
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyLock
(
const
bool
&
aCreated
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreated
(
const
bool
&
aStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetServiceWorkerSkipWaitingFlag
(
SetServiceWorkerSkipWaitingFlagResolver
&
&
aResolve
)
;
bool
mDeleteSent
=
false
;
RefPtr
<
RemoteWorkerController
>
mController
;
}
;
}
}
#
endif
