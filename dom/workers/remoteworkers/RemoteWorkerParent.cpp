#
include
"
RemoteWorkerParent
.
h
"
#
include
"
RemoteWorkerController
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
PFetchEventOpProxyParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
class
UnregisterActorRunnable
final
:
public
Runnable
{
public
:
explicit
UnregisterActorRunnable
(
already_AddRefed
<
ThreadsafeContentParentHandle
>
aParent
)
:
Runnable
(
"
UnregisterActorRunnable
"
)
mContentHandle
(
aParent
)
{
AssertIsOnBackgroundThread
(
)
;
}
NS_IMETHOD
Run
(
)
override
{
AssertIsOnMainThread
(
)
;
if
(
RefPtr
<
ContentParent
>
contentParent
=
mContentHandle
-
>
GetContentParent
(
)
)
{
contentParent
-
>
UnregisterRemoveWorkerActor
(
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
ThreadsafeContentParentHandle
>
mContentHandle
;
}
;
}
RemoteWorkerParent
:
:
RemoteWorkerParent
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
RemoteWorkerParent
:
:
~
RemoteWorkerParent
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
void
RemoteWorkerParent
:
:
Initialize
(
bool
aAlreadyRegistered
)
{
RefPtr
<
ThreadsafeContentParentHandle
>
parent
=
BackgroundParent
:
:
GetContentParentHandle
(
Manager
(
)
)
;
if
(
parent
)
{
if
(
!
aAlreadyRegistered
)
{
parent
-
>
RegisterRemoteWorkerActor
(
)
;
}
NS_ReleaseOnMainThread
(
"
RemoteWorkerParent
:
:
Initialize
ContentParent
"
parent
.
forget
(
)
)
;
}
}
already_AddRefed
<
PFetchEventOpProxyParent
>
RemoteWorkerParent
:
:
AllocPFetchEventOpProxyParent
(
const
ParentToChildServiceWorkerFetchEventOpArgs
&
aArgs
)
{
MOZ_CRASH
(
"
PFetchEventOpProxyParent
actors
must
be
manually
constructed
!
"
)
;
return
nullptr
;
}
void
RemoteWorkerParent
:
:
ActorDestroy
(
IProtocol
:
:
ActorDestroyReason
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
RefPtr
<
ThreadsafeContentParentHandle
>
parent
=
BackgroundParent
:
:
GetContentParentHandle
(
Manager
(
)
)
;
if
(
parent
)
{
RefPtr
<
UnregisterActorRunnable
>
r
=
new
UnregisterActorRunnable
(
parent
.
forget
(
)
)
;
SchedulerGroup
:
:
Dispatch
(
r
.
forget
(
)
)
;
}
if
(
mController
)
{
mController
-
>
NoteDeadWorkerActor
(
)
;
mController
=
nullptr
;
}
}
IPCResult
RemoteWorkerParent
:
:
RecvCreated
(
const
bool
&
aStatus
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
mController
)
{
return
IPC_OK
(
)
;
}
if
(
aStatus
)
{
mController
-
>
CreationSucceeded
(
)
;
}
else
{
mController
-
>
CreationFailed
(
)
;
}
return
IPC_OK
(
)
;
}
IPCResult
RemoteWorkerParent
:
:
RecvError
(
const
ErrorValue
&
aValue
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
mController
)
{
mController
-
>
ErrorPropagation
(
aValue
)
;
}
return
IPC_OK
(
)
;
}
IPCResult
RemoteWorkerParent
:
:
RecvNotifyLock
(
const
bool
&
aCreated
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
mController
)
{
mController
-
>
NotifyLock
(
aCreated
)
;
}
return
IPC_OK
(
)
;
}
IPCResult
RemoteWorkerParent
:
:
RecvNotifyWebTransport
(
const
bool
&
aCreated
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
mController
)
{
mController
-
>
NotifyWebTransport
(
aCreated
)
;
}
return
IPC_OK
(
)
;
}
void
RemoteWorkerParent
:
:
MaybeSendDelete
(
)
{
if
(
mDeleteSent
)
{
return
;
}
mDeleteSent
=
true
;
Unused
<
<
Send__delete__
(
this
)
;
}
IPCResult
RemoteWorkerParent
:
:
RecvClose
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
mController
)
{
mController
-
>
WorkerTerminated
(
)
;
}
MaybeSendDelete
(
)
;
return
IPC_OK
(
)
;
}
void
RemoteWorkerParent
:
:
SetController
(
RemoteWorkerController
*
aController
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
mController
=
aController
;
}
IPCResult
RemoteWorkerParent
:
:
RecvSetServiceWorkerSkipWaitingFlag
(
SetServiceWorkerSkipWaitingFlagResolver
&
&
aResolve
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
mController
)
{
mController
-
>
SetServiceWorkerSkipWaitingFlag
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
resolve
=
aResolve
]
(
bool
)
{
resolve
(
true
)
;
}
[
resolve
=
aResolve
]
(
nsresult
)
{
resolve
(
false
)
;
}
)
;
}
else
{
aResolve
(
false
)
;
}
return
IPC_OK
(
)
;
}
}
}
