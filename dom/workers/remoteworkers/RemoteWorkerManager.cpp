#
include
"
RemoteWorkerManager
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
RemoteWorkerServiceParent
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
RemoteWorkerManager
*
sRemoteWorkerManager
;
bool
IsServiceWorker
(
const
RemoteWorkerData
&
aData
)
{
return
aData
.
serviceWorkerData
(
)
.
type
(
)
=
=
OptionalServiceWorkerData
:
:
TServiceWorkerData
;
}
bool
IsServiceWorkerRemoteType
(
const
nsAString
&
aRemoteType
)
{
return
IsWebRemoteType
(
aRemoteType
)
&
&
!
IsWebCoopCoepRemoteType
(
aRemoteType
)
;
}
void
TransmitPermissionsAndBlobURLsForPrincipalInfo
(
ContentParent
*
aContentParent
const
PrincipalInfo
&
aPrincipalInfo
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
aContentParent
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
PrincipalInfoToPrincipal
(
aPrincipalInfo
)
;
aContentParent
-
>
TransmitBlobURLsForPrincipal
(
principal
)
;
MOZ_ALWAYS_SUCCEEDS
(
aContentParent
-
>
TransmitPermissionsForPrincipal
(
principal
)
)
;
}
}
already_AddRefed
<
RemoteWorkerManager
>
RemoteWorkerManager
:
:
GetOrCreate
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
if
(
!
sRemoteWorkerManager
)
{
sRemoteWorkerManager
=
new
RemoteWorkerManager
(
)
;
}
RefPtr
<
RemoteWorkerManager
>
rwm
=
sRemoteWorkerManager
;
return
rwm
.
forget
(
)
;
}
RemoteWorkerManager
:
:
RemoteWorkerManager
(
)
:
mParentActor
(
nullptr
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
sRemoteWorkerManager
)
;
}
RemoteWorkerManager
:
:
~
RemoteWorkerManager
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
sRemoteWorkerManager
=
=
this
)
;
sRemoteWorkerManager
=
nullptr
;
}
void
RemoteWorkerManager
:
:
RegisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
!
BackgroundParent
:
:
IsOtherProcessActor
(
aActor
-
>
Manager
(
)
)
)
{
MOZ_ASSERT
(
!
mParentActor
)
;
mParentActor
=
aActor
;
MOZ_ASSERT
(
mPendings
.
IsEmpty
(
)
)
;
return
;
}
MOZ_ASSERT
(
!
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
AppendElement
(
aActor
)
;
nsTArray
<
Pending
>
unlaunched
;
RefPtr
<
ContentParent
>
contentParent
=
BackgroundParent
:
:
GetContentParent
(
aActor
-
>
Manager
(
)
)
;
auto
scopeExit
=
MakeScopeExit
(
[
&
]
{
NS_ReleaseOnMainThreadSystemGroup
(
contentParent
.
forget
(
)
)
;
}
)
;
const
auto
&
remoteType
=
contentParent
-
>
GetRemoteType
(
)
;
if
(
!
mPendings
.
IsEmpty
(
)
)
{
for
(
Pending
&
p
:
mPendings
)
{
if
(
p
.
mController
-
>
IsTerminated
(
)
)
{
continue
;
}
if
(
IsServiceWorker
(
p
.
mData
)
&
&
!
IsServiceWorkerRemoteType
(
remoteType
)
)
{
unlaunched
.
AppendElement
(
std
:
:
move
(
p
)
)
;
continue
;
}
LaunchInternal
(
p
.
mController
aActor
p
.
mData
)
;
}
std
:
:
swap
(
mPendings
unlaunched
)
;
if
(
mPendings
.
IsEmpty
(
)
)
{
Release
(
)
;
}
}
}
void
RemoteWorkerManager
:
:
UnregisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
aActor
=
=
mParentActor
)
{
mParentActor
=
nullptr
;
}
else
{
MOZ_ASSERT
(
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
RemoveElement
(
aActor
)
;
}
}
void
RemoteWorkerManager
:
:
Launch
(
RemoteWorkerController
*
aController
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
RemoteWorkerServiceParent
*
targetActor
=
SelectTargetActor
(
aData
aProcessId
)
;
if
(
!
targetActor
)
{
if
(
mPendings
.
IsEmpty
(
)
)
{
AddRef
(
)
;
}
Pending
*
pending
=
mPendings
.
AppendElement
(
)
;
pending
-
>
mController
=
aController
;
pending
-
>
mData
=
aData
;
LaunchNewContentProcess
(
aData
)
;
return
;
}
LaunchInternal
(
aController
targetActor
aData
IsServiceWorker
(
aData
)
)
;
}
void
RemoteWorkerManager
:
:
LaunchInternal
(
RemoteWorkerController
*
aController
RemoteWorkerServiceParent
*
aTargetActor
const
RemoteWorkerData
&
aData
bool
aRemoteWorkerAlreadyRegistered
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aController
)
;
MOZ_ASSERT
(
aTargetActor
)
;
MOZ_ASSERT
(
aTargetActor
=
=
mParentActor
|
|
mChildActors
.
Contains
(
aTargetActor
)
)
;
RemoteWorkerParent
*
workerActor
=
static_cast
<
RemoteWorkerParent
*
>
(
aTargetActor
-
>
Manager
(
)
-
>
SendPRemoteWorkerConstructor
(
aData
)
)
;
if
(
NS_WARN_IF
(
!
workerActor
)
)
{
AsyncCreationFailed
(
aController
)
;
return
;
}
workerActor
-
>
Initialize
(
aRemoteWorkerAlreadyRegistered
)
;
aController
-
>
SetWorkerActor
(
workerActor
)
;
workerActor
-
>
SetController
(
aController
)
;
}
void
RemoteWorkerManager
:
:
AsyncCreationFailed
(
RemoteWorkerController
*
aController
)
{
RefPtr
<
RemoteWorkerController
>
controller
=
aController
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
RemoteWorkerManager
:
:
AsyncCreationFailed
"
[
controller
]
(
)
{
controller
-
>
CreationFailed
(
)
;
}
)
;
NS_DispatchToCurrentThread
(
r
.
forget
(
)
)
;
}
template
<
typename
Callback
>
void
RemoteWorkerManager
:
:
ForEachActor
(
Callback
&
&
aCallback
)
const
{
AssertIsOnBackgroundThread
(
)
;
const
auto
length
=
mChildActors
.
Length
(
)
;
const
auto
end
=
static_cast
<
uint32_t
>
(
rand
(
)
)
%
length
;
uint32_t
i
=
end
;
nsTArray
<
RefPtr
<
ContentParent
>
>
proxyReleaseArray
;
do
{
MOZ_ASSERT
(
i
<
mChildActors
.
Length
(
)
)
;
RemoteWorkerServiceParent
*
actor
=
mChildActors
[
i
]
;
RefPtr
<
ContentParent
>
contentParent
=
BackgroundParent
:
:
GetContentParent
(
actor
-
>
Manager
(
)
)
;
auto
scopeExit
=
MakeScopeExit
(
[
&
]
(
)
{
proxyReleaseArray
.
AppendElement
(
std
:
:
move
(
contentParent
)
)
;
}
)
;
if
(
!
aCallback
(
actor
std
:
:
move
(
contentParent
)
)
)
{
break
;
}
i
=
(
i
+
1
)
%
length
;
}
while
(
i
!
=
end
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
proxyReleaseArray
=
std
:
:
move
(
proxyReleaseArray
)
]
{
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActorForServiceWorker
(
const
RemoteWorkerData
&
aData
)
const
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
mChildActors
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
IsServiceWorker
(
aData
)
)
;
RemoteWorkerServiceParent
*
actor
=
nullptr
;
ForEachActor
(
[
&
]
(
RemoteWorkerServiceParent
*
aActor
RefPtr
<
ContentParent
>
&
&
aContentParent
)
{
const
auto
&
remoteType
=
aContentParent
-
>
GetRemoteType
(
)
;
if
(
IsServiceWorkerRemoteType
(
remoteType
)
)
{
auto
lock
=
aContentParent
-
>
mRemoteWorkerActorData
.
Lock
(
)
;
if
(
lock
-
>
mCount
|
|
!
lock
-
>
mShutdownStarted
)
{
+
+
lock
-
>
mCount
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
contentParent
=
std
:
:
move
(
aContentParent
)
principalInfo
=
aData
.
principalInfo
(
)
]
{
TransmitPermissionsAndBlobURLsForPrincipalInfo
(
contentParent
principalInfo
)
;
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
actor
=
aActor
;
return
false
;
}
}
MOZ_ASSERT
(
!
actor
)
;
return
true
;
}
)
;
return
actor
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActorForSharedWorker
(
base
:
:
ProcessId
aProcessId
)
const
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
mChildActors
.
IsEmpty
(
)
)
;
RemoteWorkerServiceParent
*
actor
=
nullptr
;
ForEachActor
(
[
&
]
(
RemoteWorkerServiceParent
*
aActor
RefPtr
<
ContentParent
>
&
&
aContentParent
)
{
if
(
IsWebCoopCoepRemoteType
(
aContentParent
-
>
GetRemoteType
(
)
)
)
{
return
true
;
}
if
(
aActor
-
>
OtherPid
(
)
=
=
aProcessId
)
{
actor
=
aActor
;
return
false
;
}
if
(
!
actor
)
{
actor
=
aActor
;
}
return
true
;
}
)
;
return
actor
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActor
(
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
if
(
aData
.
principalInfo
(
)
.
type
(
)
=
=
PrincipalInfo
:
:
TSystemPrincipalInfo
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
if
(
!
BrowserTabsRemoteAutostart
(
)
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
MOZ_ASSERT
(
aProcessId
!
=
base
:
:
GetCurrentProcId
(
)
)
;
if
(
mChildActors
.
IsEmpty
(
)
)
{
return
nullptr
;
}
return
IsServiceWorker
(
aData
)
?
SelectTargetActorForServiceWorker
(
aData
)
:
SelectTargetActorForSharedWorker
(
aProcessId
)
;
}
void
RemoteWorkerManager
:
:
LaunchNewContentProcess
(
const
RemoteWorkerData
&
aData
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
nsCOMPtr
<
nsISerialEventTarget
>
bgEventTarget
=
GetCurrentThreadSerialEventTarget
(
)
;
using
CallbackParamType
=
ContentParent
:
:
LaunchPromise
:
:
ResolveOrRejectValue
;
auto
processLaunchCallback
=
[
isServiceWorker
=
IsServiceWorker
(
aData
)
principalInfo
=
aData
.
principalInfo
(
)
bgEventTarget
=
std
:
:
move
(
bgEventTarget
)
self
=
RefPtr
<
RemoteWorkerManager
>
(
this
)
]
(
const
CallbackParamType
&
aValue
)
mutable
{
if
(
aValue
.
IsResolve
(
)
)
{
if
(
isServiceWorker
)
{
TransmitPermissionsAndBlobURLsForPrincipalInfo
(
aValue
.
ResolveValue
(
)
principalInfo
)
;
}
NS_ProxyRelease
(
__func__
bgEventTarget
self
.
forget
(
)
)
;
}
else
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
self
=
std
:
:
move
(
self
)
]
{
auto
pendings
=
std
:
:
move
(
self
-
>
mPendings
)
;
for
(
const
auto
&
pending
:
pendings
)
{
pending
.
mController
-
>
CreationFailed
(
)
;
}
}
)
;
bgEventTarget
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
callback
=
std
:
:
move
(
processLaunchCallback
)
]
(
)
mutable
{
ContentParent
:
:
GetNewOrUsedBrowserProcessAsync
(
nullptr
NS_LITERAL_STRING
(
DEFAULT_REMOTE_TYPE
)
)
-
>
Then
(
GetCurrentThreadSerialEventTarget
(
)
__func__
[
callback
=
std
:
:
move
(
callback
)
]
(
const
CallbackParamType
&
aValue
)
mutable
{
callback
(
aValue
)
;
}
)
;
}
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
;
target
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
}
