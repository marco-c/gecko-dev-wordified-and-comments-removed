#
include
"
RemoteWorkerManager
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ProcessIsolation
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerController
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
mozilla
/
StaticPrefs_extensions
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsImportModule
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
RemoteWorkerServiceParent
.
h
"
mozilla
:
:
LazyLogModule
gRemoteWorkerManagerLog
(
"
RemoteWorkerManager
"
)
;
#
ifdef
LOG
#
undef
LOG
#
endif
#
define
LOG
(
fmt
)
\
MOZ_LOG
(
gRemoteWorkerManagerLog
mozilla
:
:
LogLevel
:
:
Verbose
fmt
)
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
RemoteWorkerManager
*
sRemoteWorkerManager
;
bool
IsServiceWorker
(
const
RemoteWorkerData
&
aData
)
{
return
aData
.
serviceWorkerData
(
)
.
type
(
)
=
=
OptionalServiceWorkerData
:
:
TServiceWorkerData
;
}
void
TransmitPermissionsAndBlobURLsForPrincipalInfo
(
ContentParent
*
aContentParent
const
PrincipalInfo
&
aPrincipalInfo
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
aContentParent
)
;
auto
principalOrErr
=
PrincipalInfoToPrincipal
(
aPrincipalInfo
)
;
if
(
NS_WARN_IF
(
principalOrErr
.
isErr
(
)
)
)
{
return
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
principalOrErr
.
unwrap
(
)
;
aContentParent
-
>
TransmitBlobURLsForPrincipal
(
principal
)
;
MOZ_ALWAYS_SUCCEEDS
(
aContentParent
-
>
TransmitPermissionsForPrincipal
(
principal
)
)
;
}
}
bool
RemoteWorkerManager
:
:
MatchRemoteType
(
const
nsACString
&
processRemoteType
const
nsACString
&
workerRemoteType
)
{
LOG
(
(
"
MatchRemoteType
[
processRemoteType
=
%
s
workerRemoteType
=
%
s
]
"
PromiseFlatCString
(
processRemoteType
)
.
get
(
)
PromiseFlatCString
(
workerRemoteType
)
.
get
(
)
)
)
;
MOZ_ASSERT
(
!
IsWebCoopCoepRemoteType
(
workerRemoteType
)
)
;
return
processRemoteType
.
Equals
(
workerRemoteType
)
;
}
Result
<
nsCString
nsresult
>
RemoteWorkerManager
:
:
GetRemoteType
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aPrincipal
WorkerKind
aWorkerKind
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT_IF
(
aWorkerKind
=
=
WorkerKind
:
:
WorkerKindService
aPrincipal
-
>
GetIsContentPrincipal
(
)
)
;
if
(
!
BrowserTabsRemoteAutostart
(
)
)
{
LOG
(
(
"
GetRemoteType
:
Loading
in
parent
process
as
e10s
is
disabled
"
)
)
;
return
NOT_REMOTE_TYPE
;
}
nsCString
preferredRemoteType
=
DEFAULT_REMOTE_TYPE
;
if
(
aWorkerKind
=
=
WorkerKind
:
:
WorkerKindShared
)
{
if
(
auto
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
)
{
preferredRemoteType
=
contentChild
-
>
GetRemoteType
(
)
;
}
else
if
(
aPrincipal
-
>
IsSystemPrincipal
(
)
)
{
preferredRemoteType
=
NOT_REMOTE_TYPE
;
}
}
auto
result
=
IsolationOptionsForWorker
(
aPrincipal
aWorkerKind
preferredRemoteType
FissionAutostart
(
)
)
;
if
(
NS_WARN_IF
(
result
.
isErr
(
)
)
)
{
LOG
(
(
"
GetRemoteType
Abort
:
IsolationOptionsForWorker
failed
"
)
)
;
return
Err
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
auto
options
=
result
.
unwrap
(
)
;
if
(
MOZ_LOG_TEST
(
gRemoteWorkerManagerLog
LogLevel
:
:
Verbose
)
)
{
nsCString
principalOrigin
;
aPrincipal
-
>
GetOrigin
(
principalOrigin
)
;
LOG
(
(
"
GetRemoteType
workerType
=
%
s
principal
=
%
s
"
"
preferredRemoteType
=
%
s
selectedRemoteType
=
%
s
"
aWorkerKind
=
=
WorkerKind
:
:
WorkerKindService
?
"
service
"
:
"
shared
"
principalOrigin
.
get
(
)
preferredRemoteType
.
get
(
)
options
.
mRemoteType
.
get
(
)
)
)
;
}
return
options
.
mRemoteType
;
}
bool
RemoteWorkerManager
:
:
HasExtensionPrincipal
(
const
RemoteWorkerData
&
aData
)
{
auto
principalInfo
=
aData
.
principalInfo
(
)
;
return
principalInfo
.
type
(
)
=
=
PrincipalInfo
:
:
TContentPrincipalInfo
&
&
StringBeginsWith
(
principalInfo
.
get_ContentPrincipalInfo
(
)
.
spec
(
)
"
moz
-
extension
:
/
/
"
_ns
)
;
}
bool
RemoteWorkerManager
:
:
IsRemoteTypeAllowed
(
const
RemoteWorkerData
&
aData
)
{
AssertIsOnMainThread
(
)
;
if
(
!
BrowserTabsRemoteAutostart
(
)
)
{
return
true
;
}
const
auto
&
principalInfo
=
aData
.
principalInfo
(
)
;
auto
*
contentChild
=
ContentChild
:
:
GetSingleton
(
)
;
if
(
!
contentChild
)
{
return
principalInfo
.
type
(
)
=
=
PrincipalInfo
:
:
TSystemPrincipalInfo
|
|
(
!
StaticPrefs
:
:
extensions_webextensions_remote
(
)
&
&
aData
.
remoteType
(
)
.
Equals
(
NOT_REMOTE_TYPE
)
&
&
HasExtensionPrincipal
(
aData
)
)
;
}
auto
principalOrErr
=
PrincipalInfoToPrincipal
(
principalInfo
)
;
if
(
NS_WARN_IF
(
principalOrErr
.
isErr
(
)
)
)
{
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
principalOrErr
.
unwrap
(
)
;
bool
isServiceWorker
=
aData
.
serviceWorkerData
(
)
.
type
(
)
=
=
OptionalServiceWorkerData
:
:
TServiceWorkerData
;
auto
remoteType
=
GetRemoteType
(
principal
isServiceWorker
?
WorkerKindService
:
WorkerKindShared
)
;
if
(
NS_WARN_IF
(
remoteType
.
isErr
(
)
)
)
{
LOG
(
(
"
IsRemoteTypeAllowed
:
Error
to
retrieve
remote
type
"
)
)
;
return
false
;
}
return
MatchRemoteType
(
remoteType
.
unwrap
(
)
contentChild
-
>
GetRemoteType
(
)
)
;
}
already_AddRefed
<
RemoteWorkerManager
>
RemoteWorkerManager
:
:
GetOrCreate
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
if
(
!
sRemoteWorkerManager
)
{
sRemoteWorkerManager
=
new
RemoteWorkerManager
(
)
;
}
RefPtr
<
RemoteWorkerManager
>
rwm
=
sRemoteWorkerManager
;
return
rwm
.
forget
(
)
;
}
RemoteWorkerManager
:
:
RemoteWorkerManager
(
)
:
mParentActor
(
nullptr
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
sRemoteWorkerManager
)
;
}
RemoteWorkerManager
:
:
~
RemoteWorkerManager
(
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
sRemoteWorkerManager
=
=
this
)
;
sRemoteWorkerManager
=
nullptr
;
}
void
RemoteWorkerManager
:
:
RegisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
!
aActor
-
>
IsOtherProcessActor
(
)
)
{
MOZ_ASSERT
(
!
mParentActor
)
;
mParentActor
=
aActor
;
MOZ_ASSERT
(
mPendings
.
IsEmpty
(
)
)
;
return
;
}
MOZ_ASSERT
(
!
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
AppendElement
(
aActor
)
;
if
(
!
mPendings
.
IsEmpty
(
)
)
{
const
auto
&
processRemoteType
=
aActor
-
>
GetRemoteType
(
)
;
nsTArray
<
Pending
>
unlaunched
;
for
(
Pending
&
p
:
mPendings
)
{
if
(
p
.
mController
-
>
IsTerminated
(
)
)
{
continue
;
}
const
auto
&
workerRemoteType
=
p
.
mData
.
remoteType
(
)
;
if
(
MatchRemoteType
(
processRemoteType
workerRemoteType
)
)
{
LOG
(
(
"
RegisterActor
-
Launch
Pending
workerRemoteType
=
%
s
"
workerRemoteType
.
get
(
)
)
)
;
LaunchInternal
(
p
.
mController
aActor
p
.
mData
)
;
}
else
{
unlaunched
.
AppendElement
(
std
:
:
move
(
p
)
)
;
continue
;
}
}
std
:
:
swap
(
mPendings
unlaunched
)
;
if
(
mPendings
.
IsEmpty
(
)
)
{
Release
(
)
;
}
LOG
(
(
"
RegisterActor
-
mPendings
length
:
%
zu
"
mPendings
.
Length
(
)
)
)
;
}
}
void
RemoteWorkerManager
:
:
UnregisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
aActor
=
=
mParentActor
)
{
mParentActor
=
nullptr
;
}
else
{
MOZ_ASSERT
(
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
RemoveElement
(
aActor
)
;
}
}
void
RemoteWorkerManager
:
:
Launch
(
RemoteWorkerController
*
aController
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
RemoteWorkerServiceParent
*
targetActor
=
SelectTargetActor
(
aData
aProcessId
)
;
if
(
!
targetActor
)
{
if
(
mPendings
.
IsEmpty
(
)
)
{
AddRef
(
)
;
}
Pending
*
pending
=
mPendings
.
AppendElement
(
)
;
pending
-
>
mController
=
aController
;
pending
-
>
mData
=
aData
;
LaunchNewContentProcess
(
aData
)
;
return
;
}
LaunchInternal
(
aController
targetActor
aData
true
)
;
}
void
RemoteWorkerManager
:
:
LaunchInternal
(
RemoteWorkerController
*
aController
RemoteWorkerServiceParent
*
aTargetActor
const
RemoteWorkerData
&
aData
bool
aRemoteWorkerAlreadyRegistered
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aController
)
;
MOZ_ASSERT
(
aTargetActor
)
;
MOZ_ASSERT
(
aTargetActor
=
=
mParentActor
|
|
mChildActors
.
Contains
(
aTargetActor
)
)
;
if
(
aTargetActor
!
=
mParentActor
)
{
RefPtr
<
ThreadsafeContentParentHandle
>
contentHandle
=
aTargetActor
-
>
GetContentParentHandle
(
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
contentHandle
=
std
:
:
move
(
contentHandle
)
principalInfo
=
aData
.
principalInfo
(
)
]
{
AssertIsOnMainThread
(
)
;
if
(
RefPtr
<
ContentParent
>
contentParent
=
contentHandle
-
>
GetContentParent
(
)
)
{
TransmitPermissionsAndBlobURLsForPrincipalInfo
(
contentParent
principalInfo
)
;
}
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SchedulerGroup
:
:
Dispatch
(
r
.
forget
(
)
)
)
;
}
RefPtr
<
RemoteWorkerParent
>
workerActor
=
MakeAndAddRef
<
RemoteWorkerParent
>
(
)
;
if
(
!
aTargetActor
-
>
SendPRemoteWorkerConstructor
(
workerActor
aData
)
)
{
AsyncCreationFailed
(
aController
)
;
return
;
}
workerActor
-
>
Initialize
(
aRemoteWorkerAlreadyRegistered
)
;
aController
-
>
SetWorkerActor
(
workerActor
)
;
workerActor
-
>
SetController
(
aController
)
;
}
void
RemoteWorkerManager
:
:
AsyncCreationFailed
(
RemoteWorkerController
*
aController
)
{
RefPtr
<
RemoteWorkerController
>
controller
=
aController
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
RemoteWorkerManager
:
:
AsyncCreationFailed
"
[
controller
]
(
)
{
controller
-
>
CreationFailed
(
)
;
}
)
;
NS_DispatchToCurrentThread
(
r
.
forget
(
)
)
;
}
template
<
typename
Callback
>
void
RemoteWorkerManager
:
:
ForEachActor
(
Callback
&
&
aCallback
const
nsACString
&
aRemoteType
Maybe
<
base
:
:
ProcessId
>
aProcessId
)
const
{
AssertIsOnBackgroundThread
(
)
;
const
auto
length
=
mChildActors
.
Length
(
)
;
auto
end
=
static_cast
<
uint32_t
>
(
rand
(
)
)
%
length
;
if
(
aProcessId
)
{
for
(
auto
j
=
length
-
1
;
j
>
0
;
j
-
-
)
{
if
(
mChildActors
[
j
]
-
>
OtherPid
(
)
=
=
*
aProcessId
)
{
end
=
j
;
break
;
}
}
}
uint32_t
i
=
end
;
do
{
MOZ_ASSERT
(
i
<
mChildActors
.
Length
(
)
)
;
RemoteWorkerServiceParent
*
actor
=
mChildActors
[
i
]
;
if
(
MatchRemoteType
(
actor
-
>
GetRemoteType
(
)
aRemoteType
)
)
{
ThreadsafeContentParentHandle
*
contentHandle
=
actor
-
>
GetContentParentHandle
(
)
;
if
(
!
aCallback
(
actor
contentHandle
)
)
{
break
;
}
}
i
=
(
i
+
1
)
%
length
;
}
while
(
i
!
=
end
)
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActorInternal
(
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
const
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
!
mChildActors
.
IsEmpty
(
)
)
;
RemoteWorkerServiceParent
*
actor
=
nullptr
;
const
auto
&
workerRemoteType
=
aData
.
remoteType
(
)
;
ForEachActor
(
[
&
]
(
RemoteWorkerServiceParent
*
aActor
ThreadsafeContentParentHandle
*
aContentHandle
)
{
if
(
aContentHandle
-
>
MaybeRegisterRemoteWorkerActor
(
[
&
]
(
uint32_t
count
bool
shutdownStarted
)
-
>
bool
{
return
(
count
|
|
!
shutdownStarted
)
&
&
(
aActor
-
>
OtherPid
(
)
=
=
aProcessId
|
|
!
actor
)
;
}
)
)
{
actor
=
aActor
;
return
false
;
}
MOZ_ASSERT
(
!
actor
)
;
return
true
;
}
workerRemoteType
IsServiceWorker
(
aData
)
?
Nothing
(
)
:
Some
(
aProcessId
)
)
;
return
actor
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActor
(
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
if
(
aData
.
principalInfo
(
)
.
type
(
)
=
=
PrincipalInfo
:
:
TSystemPrincipalInfo
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
if
(
aProcessId
=
=
base
:
:
GetCurrentProcId
(
)
&
&
aData
.
remoteType
(
)
.
Equals
(
NOT_REMOTE_TYPE
)
&
&
!
StaticPrefs
:
:
extensions_webextensions_remote
(
)
&
&
HasExtensionPrincipal
(
aData
)
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
if
(
!
BrowserTabsRemoteAutostart
(
)
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
MOZ_ASSERT
(
aProcessId
!
=
base
:
:
GetCurrentProcId
(
)
)
;
if
(
mChildActors
.
IsEmpty
(
)
)
{
return
nullptr
;
}
return
SelectTargetActorInternal
(
aData
aProcessId
)
;
}
void
RemoteWorkerManager
:
:
LaunchNewContentProcess
(
const
RemoteWorkerData
&
aData
)
{
AssertIsInMainProcess
(
)
;
AssertIsOnBackgroundThread
(
)
;
nsCOMPtr
<
nsISerialEventTarget
>
bgEventTarget
=
GetCurrentSerialEventTarget
(
)
;
using
LaunchPromiseType
=
ContentParent
:
:
LaunchPromise
;
using
CallbackParamType
=
LaunchPromiseType
:
:
ResolveOrRejectValue
;
auto
processLaunchCallback
=
[
principalInfo
=
aData
.
principalInfo
(
)
bgEventTarget
=
std
:
:
move
(
bgEventTarget
)
self
=
RefPtr
<
RemoteWorkerManager
>
(
this
)
]
(
const
CallbackParamType
&
aValue
const
nsCString
&
remoteType
)
mutable
{
if
(
aValue
.
IsResolve
(
)
)
{
LOG
(
(
"
LaunchNewContentProcess
:
successfully
got
child
process
"
)
)
;
NS_ProxyRelease
(
__func__
bgEventTarget
self
.
forget
(
)
)
;
}
else
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
self
=
std
:
:
move
(
self
)
remoteType
]
{
nsTArray
<
Pending
>
uncancelled
;
auto
pendings
=
std
:
:
move
(
self
-
>
mPendings
)
;
for
(
const
auto
&
pending
:
pendings
)
{
const
auto
&
workerRemoteType
=
pending
.
mData
.
remoteType
(
)
;
if
(
self
-
>
MatchRemoteType
(
remoteType
workerRemoteType
)
)
{
LOG
(
(
"
LaunchNewContentProcess
:
Cancel
pending
with
"
"
workerRemoteType
=
%
s
"
workerRemoteType
.
get
(
)
)
)
;
pending
.
mController
-
>
CreationFailed
(
)
;
}
else
{
uncancelled
.
AppendElement
(
pending
)
;
}
}
std
:
:
swap
(
self
-
>
mPendings
uncancelled
)
;
}
)
;
bgEventTarget
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
;
LOG
(
(
"
LaunchNewContentProcess
:
remoteType
=
%
s
"
aData
.
remoteType
(
)
.
get
(
)
)
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
__func__
[
callback
=
std
:
:
move
(
processLaunchCallback
)
workerRemoteType
=
aData
.
remoteType
(
)
]
(
)
mutable
{
auto
remoteType
=
workerRemoteType
.
IsEmpty
(
)
?
DEFAULT_REMOTE_TYPE
:
workerRemoteType
;
RefPtr
<
LaunchPromiseType
>
onFinished
;
if
(
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
onFinished
=
ContentParent
:
:
GetNewOrUsedBrowserProcessAsync
(
remoteType
nullptr
hal
:
:
ProcessPriority
:
:
PROCESS_PRIORITY_FOREGROUND
true
)
;
}
else
{
onFinished
=
LaunchPromiseType
:
:
CreateAndReject
(
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
__func__
)
;
}
onFinished
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
callback
=
std
:
:
move
(
callback
)
remoteType
]
(
const
CallbackParamType
&
aValue
)
mutable
{
callback
(
aValue
remoteType
)
;
}
)
;
}
)
;
SchedulerGroup
:
:
Dispatch
(
r
.
forget
(
)
)
;
}
}
}
