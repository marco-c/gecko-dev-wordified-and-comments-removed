#
include
"
RemoteWorkerManager
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
RemoteWorkerServiceParent
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
RemoteWorkerManager
*
sRemoteWorkerManager
;
}
already_AddRefed
<
RemoteWorkerManager
>
RemoteWorkerManager
:
:
GetOrCreate
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
sRemoteWorkerManager
)
{
sRemoteWorkerManager
=
new
RemoteWorkerManager
(
)
;
}
RefPtr
<
RemoteWorkerManager
>
rwm
=
sRemoteWorkerManager
;
return
rwm
.
forget
(
)
;
}
RemoteWorkerManager
:
:
RemoteWorkerManager
(
)
:
mParentActor
(
nullptr
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
!
sRemoteWorkerManager
)
;
}
RemoteWorkerManager
:
:
~
RemoteWorkerManager
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
sRemoteWorkerManager
=
=
this
)
;
sRemoteWorkerManager
=
nullptr
;
}
void
RemoteWorkerManager
:
:
RegisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
!
BackgroundParent
:
:
IsOtherProcessActor
(
aActor
-
>
Manager
(
)
)
)
{
MOZ_ASSERT
(
!
mParentActor
)
;
mParentActor
=
aActor
;
MOZ_ASSERT
(
mPendings
.
IsEmpty
(
)
)
;
return
;
}
MOZ_ASSERT
(
!
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
AppendElement
(
aActor
)
;
if
(
!
mPendings
.
IsEmpty
(
)
)
{
for
(
const
Pending
&
p
:
mPendings
)
{
LaunchInternal
(
p
.
mController
aActor
p
.
mData
)
;
}
mPendings
.
Clear
(
)
;
Release
(
)
;
}
}
void
RemoteWorkerManager
:
:
UnregisterActor
(
RemoteWorkerServiceParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
aActor
=
=
mParentActor
)
{
mParentActor
=
nullptr
;
}
else
{
MOZ_ASSERT
(
mChildActors
.
Contains
(
aActor
)
)
;
mChildActors
.
RemoveElement
(
aActor
)
;
}
}
void
RemoteWorkerManager
:
:
Launch
(
RemoteWorkerController
*
aController
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
RemoteWorkerServiceParent
*
targetActor
=
SelectTargetActor
(
aData
aProcessId
)
;
if
(
!
targetActor
)
{
if
(
mPendings
.
IsEmpty
(
)
)
{
AddRef
(
)
;
}
Pending
*
pending
=
mPendings
.
AppendElement
(
)
;
pending
-
>
mController
=
aController
;
pending
-
>
mData
=
aData
;
LaunchNewContentProcess
(
)
;
return
;
}
LaunchInternal
(
aController
targetActor
aData
)
;
}
void
RemoteWorkerManager
:
:
LaunchInternal
(
RemoteWorkerController
*
aController
RemoteWorkerServiceParent
*
aTargetActor
const
RemoteWorkerData
&
aData
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
aController
)
;
MOZ_ASSERT
(
aTargetActor
)
;
MOZ_ASSERT
(
aTargetActor
=
=
mParentActor
|
|
mChildActors
.
Contains
(
aTargetActor
)
)
;
RemoteWorkerParent
*
workerActor
=
static_cast
<
RemoteWorkerParent
*
>
(
aTargetActor
-
>
Manager
(
)
-
>
SendPRemoteWorkerConstructor
(
aData
)
)
;
if
(
NS_WARN_IF
(
!
workerActor
)
)
{
AsyncCreationFailed
(
aController
)
;
return
;
}
workerActor
-
>
Initialize
(
)
;
aController
-
>
SetWorkerActor
(
workerActor
)
;
workerActor
-
>
SetController
(
aController
)
;
}
void
RemoteWorkerManager
:
:
AsyncCreationFailed
(
RemoteWorkerController
*
aController
)
{
RefPtr
<
RemoteWorkerController
>
controller
=
aController
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
RemoteWorkerManager
:
:
AsyncCreationFailed
"
[
controller
]
(
)
{
controller
-
>
CreationFailed
(
)
;
}
)
;
NS_DispatchToCurrentThread
(
r
.
forget
(
)
)
;
}
RemoteWorkerServiceParent
*
RemoteWorkerManager
:
:
SelectTargetActor
(
const
RemoteWorkerData
&
aData
base
:
:
ProcessId
aProcessId
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
aData
.
principalInfo
(
)
.
type
(
)
=
=
PrincipalInfo
:
:
TSystemPrincipalInfo
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
if
(
!
BrowserTabsRemoteAutostart
(
)
)
{
MOZ_ASSERT
(
mParentActor
)
;
return
mParentActor
;
}
MOZ_ASSERT
(
aProcessId
!
=
base
:
:
GetCurrentProcId
(
)
)
;
if
(
mChildActors
.
IsEmpty
(
)
)
{
return
nullptr
;
}
for
(
RemoteWorkerServiceParent
*
actor
:
mChildActors
)
{
if
(
actor
-
>
OtherPid
(
)
=
=
aProcessId
)
{
return
actor
;
}
}
uint32_t
id
=
uint32_t
(
rand
(
)
)
%
mChildActors
.
Length
(
)
;
return
mChildActors
[
id
]
;
}
void
RemoteWorkerManager
:
:
LaunchNewContentProcess
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
LaunchNewContentProcess
"
[
]
(
)
{
RefPtr
<
ContentParent
>
unused
=
ContentParent
:
:
GetNewOrUsedBrowserProcess
(
nullptr
NS_LITERAL_STRING
(
DEFAULT_REMOTE_TYPE
)
)
;
}
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
;
target
-
>
Dispatch
(
r
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
}
}
