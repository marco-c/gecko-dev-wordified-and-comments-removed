#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
RemoteWorkerController
.
h
"
#
include
"
RemoteWorkerManager
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
already_AddRefed
<
RemoteWorkerController
>
RemoteWorkerController
:
:
Create
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
RefPtr
<
RemoteWorkerController
>
controller
=
new
RemoteWorkerController
(
)
;
RemoteWorkerData
data
;
RefPtr
<
RemoteWorkerManager
>
manager
=
RemoteWorkerManager
:
:
GetOrCreate
(
)
;
MOZ_ASSERT
(
manager
)
;
manager
-
>
Launch
(
controller
data
)
;
return
controller
.
forget
(
)
;
}
RemoteWorkerController
:
:
RemoteWorkerController
(
)
:
mState
(
ePending
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
RemoteWorkerController
:
:
~
RemoteWorkerController
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
void
RemoteWorkerController
:
:
SetWorkerActor
(
RemoteWorkerParent
*
aActor
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
!
mActor
)
;
MOZ_ASSERT
(
aActor
)
;
mActor
=
aActor
;
}
void
RemoteWorkerController
:
:
CreationFailed
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
mActor
)
;
mState
=
eTerminated
;
mActor
=
nullptr
;
}
void
RemoteWorkerController
:
:
CreationSucceeded
(
)
{
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
mActor
)
;
mState
=
eReady
;
}
}
}
