#
ifndef
mozilla_dom_remoteworkercontrollerparent_h__
#
define
mozilla_dom_remoteworkercontrollerparent_h__
#
include
<
functional
>
#
include
"
nsISupportsImpl
.
h
"
#
include
"
RemoteWorkerController
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PRemoteWorkerControllerParent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RemoteWorkerControllerParent
final
:
public
PRemoteWorkerControllerParent
public
RemoteWorkerObserver
{
friend
class
PRemoteWorkerControllerParent
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteWorkerControllerParent
override
)
explicit
RemoteWorkerControllerParent
(
const
RemoteWorkerData
&
aRemoteWorkerData
)
;
RefPtr
<
RemoteWorkerParent
>
GetRemoteWorkerParent
(
)
const
;
void
MaybeSendSetServiceWorkerSkipWaitingFlag
(
std
:
:
function
<
void
(
bool
)
>
&
&
aCallback
)
;
private
:
~
RemoteWorkerControllerParent
(
)
;
PFetchEventOpParent
*
AllocPFetchEventOpParent
(
const
ServiceWorkerFetchEventOpArgs
&
aArgs
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPFetchEventOpConstructor
(
PFetchEventOpParent
*
aActor
const
ServiceWorkerFetchEventOpArgs
&
aArgs
)
override
;
bool
DeallocPFetchEventOpParent
(
PFetchEventOpParent
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvExecServiceWorkerOp
(
ServiceWorkerOpArgs
&
&
aArgs
ExecServiceWorkerOpResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
ShutdownResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
void
CreationFailed
(
)
override
;
void
CreationSucceeded
(
)
override
;
void
ErrorReceived
(
const
ErrorValue
&
aValue
)
override
;
void
LockNotified
(
bool
aCreated
)
final
{
}
void
Terminated
(
)
override
;
RefPtr
<
RemoteWorkerController
>
mRemoteWorkerController
;
bool
mIPCActive
=
true
;
}
;
}
}
#
endif
