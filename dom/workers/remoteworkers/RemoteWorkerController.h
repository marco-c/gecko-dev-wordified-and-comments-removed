#
ifndef
mozilla_dom_RemoteWorkerController_h
#
define
mozilla_dom_RemoteWorkerController_h
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ErrorValue
;
class
MessagePortIdentifier
;
class
RemoteWorkerManager
;
class
RemoteWorkerParent
;
class
RemoteWorkerController
final
{
friend
class
RemoteWorkerManager
;
friend
class
RemoteWorkerParent
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteWorkerController
)
static
already_AddRefed
<
RemoteWorkerController
>
Create
(
const
RemoteWorkerData
&
aData
)
;
void
AddWindowID
(
uint64_t
aWindowID
)
;
void
RemoveWindowID
(
uint64_t
aWindowID
)
;
void
AddPortIdentifier
(
const
MessagePortIdentifier
&
aPortIdentifier
)
;
void
Terminate
(
)
;
void
Suspend
(
)
;
void
Resume
(
)
;
void
Freeze
(
)
;
void
Thaw
(
)
;
private
:
RemoteWorkerController
(
)
;
~
RemoteWorkerController
(
)
;
void
SetWorkerActor
(
RemoteWorkerParent
*
aActor
)
;
void
ErrorPropagation
(
const
ErrorValue
&
aValue
)
;
void
WorkerTerminated
(
)
;
void
Shutdown
(
)
;
void
CreationFailed
(
)
;
void
CreationSucceeded
(
)
;
enum
{
ePending
eReady
eTerminated
}
mState
;
RefPtr
<
RemoteWorkerParent
>
mActor
;
struct
Op
{
enum
Type
{
eTerminate
eSuspend
eResume
eFreeze
eThaw
ePortIdentifier
eAddWindowID
eRemoveWindowID
}
;
explicit
Op
(
Type
aType
uint64_t
aWindowID
=
0
)
:
mType
(
aType
)
mWindowID
(
aWindowID
)
mCompleted
(
false
)
{
MOZ_COUNT_CTOR
(
Op
)
;
}
explicit
Op
(
const
MessagePortIdentifier
&
aPortIdentifier
)
:
mType
(
ePortIdentifier
)
mPortIdentifier
(
aPortIdentifier
)
mCompleted
(
false
)
{
MOZ_COUNT_CTOR
(
Op
)
;
}
Op
(
Op
const
&
)
=
delete
;
Op
&
operator
=
(
Op
const
&
)
=
delete
;
~
Op
(
)
;
void
Completed
(
)
{
mCompleted
=
true
;
}
Type
mType
;
MessagePortIdentifier
mPortIdentifier
;
uint64_t
mWindowID
;
bool
mCompleted
;
}
;
nsTArray
<
UniquePtr
<
Op
>
>
mPendingOps
;
}
;
}
}
#
endif
