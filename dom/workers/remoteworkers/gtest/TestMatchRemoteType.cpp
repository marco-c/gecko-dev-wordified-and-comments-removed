#
include
"
gtest
/
gtest
.
h
"
#
include
"
.
.
/
RemoteWorkerManager
.
h
"
using
namespace
mozilla
:
:
dom
;
TEST
(
RemoteWorkerManager
TestMatchRemoteType
)
{
static
const
struct
{
const
nsCString
processRemoteType
;
const
nsCString
workerRemoteType
;
const
bool
shouldMatch
;
}
tests
[
]
=
{
{
DEFAULT_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
true
}
{
EXTENSION_REMOTE_TYPE
EXTENSION_REMOTE_TYPE
true
}
{
PRIVILEGEDMOZILLA_REMOTE_TYPE
PRIVILEGEDMOZILLA_REMOTE_TYPE
true
}
{
PRIVILEGEDMOZILLA_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
false
}
{
PRIVILEGEDABOUT_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
false
}
{
EXTENSION_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
false
}
{
FILE_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
false
}
{
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
DEFAULT_REMOTE_TYPE
false
}
{
LARGE_ALLOCATION_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
true
}
{
FISSION_WEB_REMOTE_TYPE
DEFAULT_REMOTE_TYPE
true
}
{
DEFAULT_REMOTE_TYPE
NOT_REMOTE_TYPE
true
}
{
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
NOT_REMOTE_TYPE
false
}
{
PRIVILEGEDMOZILLA_REMOTE_TYPE
NOT_REMOTE_TYPE
false
}
{
EXTENSION_REMOTE_TYPE
NOT_REMOTE_TYPE
false
}
}
;
for
(
const
auto
&
test
:
tests
)
{
auto
message
=
nsPrintfCString
(
R
"
(
MatchRemoteType
(
"
%
s
"
"
%
s
"
)
should
return
%
s
)
"
test
.
processRemoteType
.
get
(
)
test
.
workerRemoteType
.
get
(
)
test
.
shouldMatch
?
"
true
"
:
"
false
"
)
;
ASSERT_EQ
(
RemoteWorkerManager
:
:
MatchRemoteType
(
test
.
processRemoteType
test
.
workerRemoteType
)
test
.
shouldMatch
)
<
<
message
;
}
}
