#
ifndef
mozilla_dom_remoteworkercontrollerchild_h__
#
define
mozilla_dom_remoteworkercontrollerchild_h__
#
include
"
nsISupportsImpl
.
h
"
#
include
"
RemoteWorkerController
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PRemoteWorkerControllerChild
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RemoteWorkerControllerChild
final
:
public
PRemoteWorkerControllerChild
{
friend
class
PRemoteWorkerControllerChild
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteWorkerControllerChild
)
explicit
RemoteWorkerControllerChild
(
RefPtr
<
RemoteWorkerObserver
>
aObserver
)
;
void
Initialize
(
)
;
void
RevokeObserver
(
RemoteWorkerObserver
*
aObserver
)
;
void
MaybeSendDelete
(
)
;
private
:
~
RemoteWorkerControllerChild
(
)
=
default
;
PFetchEventOpChild
*
AllocPFetchEventOpChild
(
const
ParentToParentServiceWorkerFetchEventOpArgs
&
aArgs
)
;
bool
DeallocPFetchEventOpChild
(
PFetchEventOpChild
*
aActor
)
;
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreationFailed
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCreationSucceeded
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvErrorReceived
(
const
ErrorValue
&
aError
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvTerminated
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetServiceWorkerSkipWaitingFlag
(
SetServiceWorkerSkipWaitingFlagResolver
&
&
aResolve
)
;
RefPtr
<
RemoteWorkerObserver
>
mObserver
;
bool
mIPCActive
=
true
;
}
;
}
}
#
endif
