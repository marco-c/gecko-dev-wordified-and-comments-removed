#
include
"
WorkerDebuggerManager
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
WorkerPrivate
.
h
"
USING_WORKERS_NAMESPACE
class
RegisterDebuggerMainThreadRunnable
final
:
public
nsRunnable
{
RefPtr
<
WorkerDebuggerManager
>
mManager
;
WorkerPrivate
*
mWorkerPrivate
;
bool
mNotifyListeners
;
public
:
RegisterDebuggerMainThreadRunnable
(
WorkerDebuggerManager
*
aManager
WorkerPrivate
*
aWorkerPrivate
bool
aNotifyListeners
)
:
mManager
(
aManager
)
mWorkerPrivate
(
aWorkerPrivate
)
mNotifyListeners
(
aNotifyListeners
)
{
}
private
:
~
RegisterDebuggerMainThreadRunnable
(
)
{
}
NS_IMETHOD
Run
(
)
override
{
mManager
-
>
RegisterDebuggerMainThread
(
mWorkerPrivate
mNotifyListeners
)
;
return
NS_OK
;
}
}
;
class
UnregisterDebuggerMainThreadRunnable
final
:
public
nsRunnable
{
RefPtr
<
WorkerDebuggerManager
>
mManager
;
WorkerPrivate
*
mWorkerPrivate
;
public
:
UnregisterDebuggerMainThreadRunnable
(
WorkerDebuggerManager
*
aManager
WorkerPrivate
*
aWorkerPrivate
)
:
mManager
(
aManager
)
mWorkerPrivate
(
aWorkerPrivate
)
{
}
private
:
~
UnregisterDebuggerMainThreadRunnable
(
)
{
}
NS_IMETHOD
Run
(
)
override
{
mManager
-
>
UnregisterDebuggerMainThread
(
mWorkerPrivate
)
;
return
NS_OK
;
}
}
;
BEGIN_WORKERS_NAMESPACE
class
WorkerDebuggerEnumerator
final
:
public
nsISimpleEnumerator
{
nsTArray
<
RefPtr
<
WorkerDebugger
>
>
mDebuggers
;
uint32_t
mIndex
;
public
:
explicit
WorkerDebuggerEnumerator
(
const
nsTArray
<
RefPtr
<
WorkerDebugger
>
>
&
aDebuggers
)
:
mDebuggers
(
aDebuggers
)
mIndex
(
0
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSISIMPLEENUMERATOR
private
:
~
WorkerDebuggerEnumerator
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
WorkerDebuggerEnumerator
nsISimpleEnumerator
)
;
NS_IMETHODIMP
WorkerDebuggerEnumerator
:
:
HasMoreElements
(
bool
*
aResult
)
{
*
aResult
=
mIndex
<
mDebuggers
.
Length
(
)
;
return
NS_OK
;
}
;
NS_IMETHODIMP
WorkerDebuggerEnumerator
:
:
GetNext
(
nsISupports
*
*
aResult
)
{
if
(
mIndex
=
=
mDebuggers
.
Length
(
)
)
{
return
NS_ERROR_FAILURE
;
}
mDebuggers
.
ElementAt
(
mIndex
+
+
)
.
forget
(
aResult
)
;
return
NS_OK
;
}
;
WorkerDebuggerManager
:
:
WorkerDebuggerManager
(
)
:
mMutex
(
"
WorkerDebuggerManager
:
:
mMutex
"
)
{
AssertIsOnMainThread
(
)
;
}
WorkerDebuggerManager
:
:
~
WorkerDebuggerManager
(
)
{
AssertIsOnMainThread
(
)
;
}
NS_IMPL_ISUPPORTS
(
WorkerDebuggerManager
nsIWorkerDebuggerManager
)
;
NS_IMETHODIMP
WorkerDebuggerManager
:
:
GetWorkerDebuggerEnumerator
(
nsISimpleEnumerator
*
*
aResult
)
{
AssertIsOnMainThread
(
)
;
RefPtr
<
WorkerDebuggerEnumerator
>
enumerator
=
new
WorkerDebuggerEnumerator
(
mDebuggers
)
;
enumerator
.
forget
(
aResult
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WorkerDebuggerManager
:
:
AddListener
(
nsIWorkerDebuggerManagerListener
*
aListener
)
{
AssertIsOnMainThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
if
(
mListeners
.
Contains
(
aListener
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
mListeners
.
AppendElement
(
aListener
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WorkerDebuggerManager
:
:
RemoveListener
(
nsIWorkerDebuggerManagerListener
*
aListener
)
{
AssertIsOnMainThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mListeners
.
Contains
(
aListener
)
)
{
return
NS_OK
;
}
mListeners
.
RemoveElement
(
aListener
)
;
return
NS_OK
;
}
void
WorkerDebuggerManager
:
:
ClearListeners
(
)
{
AssertIsOnMainThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
mListeners
.
Clear
(
)
;
}
void
WorkerDebuggerManager
:
:
RegisterDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
{
aWorkerPrivate
-
>
AssertIsOnParentThread
(
)
;
if
(
NS_IsMainThread
(
)
)
{
RegisterDebuggerMainThread
(
aWorkerPrivate
true
)
;
}
else
{
bool
hasListeners
=
false
;
{
MutexAutoLock
lock
(
mMutex
)
;
hasListeners
=
!
mListeners
.
IsEmpty
(
)
;
}
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
RegisterDebuggerMainThreadRunnable
(
this
aWorkerPrivate
hasListeners
)
;
MOZ_ALWAYS_TRUE
(
NS_SUCCEEDED
(
NS_DispatchToMainThread
(
runnable
NS_DISPATCH_NORMAL
)
)
)
;
if
(
hasListeners
)
{
aWorkerPrivate
-
>
WaitForIsDebuggerRegistered
(
true
)
;
}
}
}
void
WorkerDebuggerManager
:
:
UnregisterDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
{
aWorkerPrivate
-
>
AssertIsOnParentThread
(
)
;
if
(
NS_IsMainThread
(
)
)
{
UnregisterDebuggerMainThread
(
aWorkerPrivate
)
;
}
else
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
UnregisterDebuggerMainThreadRunnable
(
this
aWorkerPrivate
)
;
MOZ_ALWAYS_TRUE
(
NS_SUCCEEDED
(
NS_DispatchToMainThread
(
runnable
NS_DISPATCH_NORMAL
)
)
)
;
aWorkerPrivate
-
>
WaitForIsDebuggerRegistered
(
false
)
;
}
}
void
WorkerDebuggerManager
:
:
RegisterDebuggerMainThread
(
WorkerPrivate
*
aWorkerPrivate
bool
aNotifyListeners
)
{
AssertIsOnMainThread
(
)
;
RefPtr
<
WorkerDebugger
>
debugger
=
new
WorkerDebugger
(
aWorkerPrivate
)
;
mDebuggers
.
AppendElement
(
debugger
)
;
aWorkerPrivate
-
>
SetDebugger
(
debugger
)
;
if
(
aNotifyListeners
)
{
nsTArray
<
nsCOMPtr
<
nsIWorkerDebuggerManagerListener
>
>
listeners
;
{
MutexAutoLock
lock
(
mMutex
)
;
listeners
=
mListeners
;
}
for
(
size_t
index
=
0
;
index
<
listeners
.
Length
(
)
;
+
+
index
)
{
listeners
[
index
]
-
>
OnRegister
(
debugger
)
;
}
}
aWorkerPrivate
-
>
SetIsDebuggerRegistered
(
true
)
;
}
void
WorkerDebuggerManager
:
:
UnregisterDebuggerMainThread
(
WorkerPrivate
*
aWorkerPrivate
)
{
AssertIsOnMainThread
(
)
;
if
(
!
aWorkerPrivate
-
>
IsDebuggerRegistered
(
)
)
{
return
;
}
RefPtr
<
WorkerDebugger
>
debugger
=
aWorkerPrivate
-
>
Debugger
(
)
;
mDebuggers
.
RemoveElement
(
debugger
)
;
aWorkerPrivate
-
>
SetDebugger
(
nullptr
)
;
nsTArray
<
nsCOMPtr
<
nsIWorkerDebuggerManagerListener
>
>
listeners
;
{
MutexAutoLock
lock
(
mMutex
)
;
listeners
=
mListeners
;
}
for
(
size_t
index
=
0
;
index
<
listeners
.
Length
(
)
;
+
+
index
)
{
listeners
[
index
]
-
>
OnUnregister
(
debugger
)
;
}
debugger
-
>
Close
(
)
;
aWorkerPrivate
-
>
SetIsDebuggerRegistered
(
false
)
;
}
END_WORKERS_NAMESPACE
