#
ifndef
mozilla_dom_workers_sharedworker_h__
#
define
mozilla_dom_workers_sharedworker_h__
#
include
"
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
MessagePort
;
class
StringOrWorkerOptions
;
class
WorkerPrivate
;
class
Event
;
namespace
workerinternals
{
class
RuntimeService
;
}
class
SharedWorker
final
:
public
DOMEventTargetHelper
{
friend
class
workerinternals
:
:
RuntimeService
;
typedef
mozilla
:
:
ErrorResult
ErrorResult
;
typedef
mozilla
:
:
dom
:
:
GlobalObject
GlobalObject
;
RefPtr
<
WorkerPrivate
>
mWorkerPrivate
;
RefPtr
<
MessagePort
>
mMessagePort
;
nsTArray
<
RefPtr
<
Event
>
>
mFrozenEvents
;
bool
mFrozen
;
public
:
static
already_AddRefed
<
SharedWorker
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aScriptURL
const
StringOrWorkerOptions
&
aOptions
ErrorResult
&
aRv
)
;
MessagePort
*
Port
(
)
;
bool
IsFrozen
(
)
const
{
return
mFrozen
;
}
void
Freeze
(
)
;
void
Thaw
(
)
;
void
QueueEvent
(
Event
*
aEvent
)
;
void
Close
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SharedWorker
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
error
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
WorkerPrivate
*
GetWorkerPrivate
(
)
const
{
return
mWorkerPrivate
;
}
private
:
SharedWorker
(
nsPIDOMWindowInner
*
aWindow
WorkerPrivate
*
aWorkerPrivate
MessagePort
*
aMessagePort
)
;
~
SharedWorker
(
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
