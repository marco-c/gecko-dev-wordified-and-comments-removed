#
ifndef
mozilla_dom_workers_scriptloader_h__
#
define
mozilla_dom_workers_scriptloader_h__
#
include
"
js
/
loader
/
ScriptLoadRequest
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsIChannel
;
class
nsICookieJarSettings
;
class
nsILoadGroup
;
class
nsIPrincipal
;
class
nsIReferrerInfo
;
class
nsIURI
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
ClientInfo
;
class
Document
;
struct
WorkerLoadInfo
;
class
WorkerPrivate
;
class
SerializedStackHolder
;
enum
WorkerScriptType
{
WorkerScript
DebuggerScript
}
;
namespace
workerinternals
{
namespace
loader
{
class
ScriptLoaderRunnable
;
class
ScriptExecutorRunnable
;
class
CachePromiseHandler
;
class
CacheLoadHandler
;
class
CacheCreator
;
class
NetworkLoadHandler
;
class
WorkerScriptLoader
final
:
public
nsINamed
{
friend
class
ScriptLoaderRunnable
;
friend
class
ScriptExecutorRunnable
;
friend
class
CachePromiseHandler
;
friend
class
CacheLoadHandler
;
friend
class
CacheCreator
;
friend
class
NetworkLoadHandler
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ScriptLoadRequestList
=
JS
:
:
loader
:
:
ScriptLoadRequestList
;
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
RefPtr
<
ThreadSafeWorkerRef
>
mWorkerRef
;
UniquePtr
<
SerializedStackHolder
>
mOriginStack
;
nsString
mOriginStackJSON
;
nsCOMPtr
<
nsIEventTarget
>
mSyncLoopTarget
;
JS
:
:
loader
:
:
ScriptLoadRequestList
mLoadingRequests
;
JS
:
:
loader
:
:
ScriptLoadRequestList
mLoadedRequests
;
Maybe
<
ClientInfo
>
mClientInfo
;
Maybe
<
ServiceWorkerDescriptor
>
mController
;
WorkerScriptType
mWorkerScriptType
;
Maybe
<
nsresult
>
mCancelMainThread
;
ErrorResult
&
mRv
;
bool
mExecutionAborted
=
false
;
bool
mMutedErrorFlag
=
false
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
WorkerScriptLoader
(
WorkerPrivate
*
aWorkerPrivate
UniquePtr
<
SerializedStackHolder
>
aOriginStack
nsIEventTarget
*
aSyncLoopTarget
const
nsTArray
<
nsString
>
&
aScriptURLs
const
mozilla
:
:
Encoding
*
aDocumentEncoding
const
Maybe
<
ClientInfo
>
&
aClientInfo
const
Maybe
<
ServiceWorkerDescriptor
>
&
aController
bool
aIsMainScript
WorkerScriptType
aWorkerScriptType
ErrorResult
&
aRv
)
;
void
CancelMainThreadWithBindingAborted
(
)
{
CancelMainThread
(
NS_BINDING_ABORTED
)
;
}
bool
DispatchLoadScripts
(
)
;
protected
:
nsIURI
*
GetBaseURI
(
)
;
nsIURI
*
GetInitialBaseURI
(
)
;
void
MaybeExecuteFinishedScripts
(
ScriptLoadRequest
*
aRequest
)
;
void
MaybeMoveToLoadedList
(
ScriptLoadRequest
*
aRequest
)
;
bool
StoreCSP
(
)
;
bool
ProcessPendingRequests
(
JSContext
*
aCx
)
;
bool
AllScriptsExecuted
(
)
{
return
mLoadingRequests
.
isEmpty
(
)
&
&
mLoadedRequests
.
isEmpty
(
)
;
}
nsresult
OnStreamComplete
(
ScriptLoadRequest
*
aRequest
nsresult
aStatus
)
;
bool
IsDebuggerScript
(
)
const
{
return
mWorkerScriptType
=
=
DebuggerScript
;
}
void
SetController
(
const
Maybe
<
ServiceWorkerDescriptor
>
&
aDescriptor
)
{
mController
=
aDescriptor
;
}
Maybe
<
ServiceWorkerDescriptor
>
&
GetController
(
)
{
return
mController
;
}
bool
IsCancelled
(
)
{
return
mCancelMainThread
.
isSome
(
)
;
}
void
CancelMainThread
(
nsresult
aCancelResult
)
;
nsresult
LoadScripts
(
)
;
nsresult
LoadScript
(
ScriptLoadRequest
*
aRequest
)
;
void
ShutdownScriptLoader
(
bool
aResult
bool
aMutedError
)
;
private
:
~
WorkerScriptLoader
(
)
=
default
;
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
{
aName
.
AssignLiteral
(
"
WorkerScriptLoader
"
)
;
return
NS_OK
;
}
void
LoadingFinished
(
ScriptLoadRequest
*
aRequest
nsresult
aRv
)
;
void
DispatchMaybeMoveToLoadedList
(
ScriptLoadRequest
*
aRequest
)
;
bool
EvaluateScript
(
JSContext
*
aCx
ScriptLoadRequest
*
aRequest
)
;
void
LogExceptionToConsole
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
)
;
}
;
}
nsresult
ChannelFromScriptURLMainThread
(
nsIPrincipal
*
aPrincipal
Document
*
aParentDoc
nsILoadGroup
*
aLoadGroup
nsIURI
*
aScriptURL
const
Maybe
<
ClientInfo
>
&
aClientInfo
nsContentPolicyType
aContentPolicyType
nsICookieJarSettings
*
aCookieJarSettings
nsIReferrerInfo
*
aReferrerInfo
nsIChannel
*
*
aChannel
)
;
nsresult
ChannelFromScriptURLWorkerThread
(
JSContext
*
aCx
WorkerPrivate
*
aParent
const
nsAString
&
aScriptURL
WorkerLoadInfo
&
aLoadInfo
)
;
void
ReportLoadError
(
ErrorResult
&
aRv
nsresult
aLoadResult
const
nsAString
&
aScriptURL
)
;
void
LoadMainScript
(
WorkerPrivate
*
aWorkerPrivate
UniquePtr
<
SerializedStackHolder
>
aOriginStack
const
nsAString
&
aScriptURL
WorkerScriptType
aWorkerScriptType
ErrorResult
&
aRv
const
mozilla
:
:
Encoding
*
aDocumentEncoding
)
;
void
Load
(
WorkerPrivate
*
aWorkerPrivate
UniquePtr
<
SerializedStackHolder
>
aOriginStack
const
nsTArray
<
nsString
>
&
aScriptURLs
WorkerScriptType
aWorkerScriptType
ErrorResult
&
aRv
)
;
}
}
}
#
endif
