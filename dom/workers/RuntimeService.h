#
ifndef
mozilla_dom_workers_runtimeservice_h__
#
define
mozilla_dom_workers_runtimeservice_h__
#
include
"
WorkerCommon
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
class
nsITimer
;
class
nsPIDOMWindowInner
;
BEGIN_WORKERS_NAMESPACE
class
SharedWorker
;
struct
WorkerLoadInfo
;
class
WorkerThread
;
class
RuntimeService
final
:
public
nsIObserver
{
struct
SharedWorkerInfo
{
WorkerPrivate
*
mWorkerPrivate
;
nsCString
mScriptSpec
;
nsString
mName
;
SharedWorkerInfo
(
WorkerPrivate
*
aWorkerPrivate
const
nsACString
&
aScriptSpec
const
nsAString
&
aName
)
:
mWorkerPrivate
(
aWorkerPrivate
)
mScriptSpec
(
aScriptSpec
)
mName
(
aName
)
{
}
}
;
struct
WorkerDomainInfo
{
nsCString
mDomain
;
nsTArray
<
WorkerPrivate
*
>
mActiveWorkers
;
nsTArray
<
WorkerPrivate
*
>
mActiveServiceWorkers
;
nsTArray
<
WorkerPrivate
*
>
mQueuedWorkers
;
nsTArray
<
UniquePtr
<
SharedWorkerInfo
>
>
mSharedWorkerInfos
;
uint32_t
mChildWorkerCount
;
WorkerDomainInfo
(
)
:
mActiveWorkers
(
1
)
mChildWorkerCount
(
0
)
{
}
uint32_t
ActiveWorkerCount
(
)
const
{
return
mActiveWorkers
.
Length
(
)
+
mChildWorkerCount
;
}
uint32_t
ActiveServiceWorkerCount
(
)
const
{
return
mActiveServiceWorkers
.
Length
(
)
;
}
bool
HasNoWorkers
(
)
const
{
return
ActiveWorkerCount
(
)
=
=
0
&
&
ActiveServiceWorkerCount
(
)
=
=
0
;
}
}
;
struct
IdleThreadInfo
;
mozilla
:
:
Mutex
mMutex
;
nsClassHashtable
<
nsCStringHashKey
WorkerDomainInfo
>
mDomainMap
;
nsTArray
<
IdleThreadInfo
>
mIdleThreadArray
;
nsClassHashtable
<
nsPtrHashKey
<
nsPIDOMWindowInner
>
nsTArray
<
WorkerPrivate
*
>
>
mWindowMap
;
nsCOMPtr
<
nsITimer
>
mIdleThreadTimer
;
static
JSSettings
sDefaultJSSettings
;
public
:
struct
NavigatorProperties
{
nsString
mAppName
;
nsString
mAppNameOverridden
;
nsString
mAppVersion
;
nsString
mAppVersionOverridden
;
nsString
mPlatform
;
nsString
mPlatformOverridden
;
nsTArray
<
nsString
>
mLanguages
;
}
;
private
:
NavigatorProperties
mNavigatorProperties
;
bool
mObserved
;
bool
mShuttingDown
;
bool
mNavigatorPropertiesLoaded
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
RuntimeService
*
GetOrCreateService
(
)
;
static
RuntimeService
*
GetService
(
)
;
bool
RegisterWorker
(
WorkerPrivate
*
aWorkerPrivate
)
;
void
UnregisterWorker
(
WorkerPrivate
*
aWorkerPrivate
)
;
void
RemoveSharedWorker
(
WorkerDomainInfo
*
aDomainInfo
WorkerPrivate
*
aWorkerPrivate
)
;
void
CancelWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
void
FreezeWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
void
ThawWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
void
SuspendWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
void
ResumeWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
)
;
nsresult
CreateSharedWorker
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aScriptURL
const
nsAString
&
aName
SharedWorker
*
*
aSharedWorker
)
;
void
ForgetSharedWorker
(
WorkerPrivate
*
aWorkerPrivate
)
;
const
NavigatorProperties
&
GetNavigatorProperties
(
)
const
{
return
mNavigatorProperties
;
}
void
NoteIdleThread
(
WorkerThread
*
aThread
)
;
static
void
GetDefaultJSSettings
(
JSSettings
&
aSettings
)
{
AssertIsOnMainThread
(
)
;
aSettings
=
sDefaultJSSettings
;
}
static
void
SetDefaultContextOptions
(
const
JS
:
:
ContextOptions
&
aContextOptions
)
{
AssertIsOnMainThread
(
)
;
sDefaultJSSettings
.
contextOptions
=
aContextOptions
;
}
void
UpdateAppNameOverridePreference
(
const
nsAString
&
aValue
)
;
void
UpdateAppVersionOverridePreference
(
const
nsAString
&
aValue
)
;
void
UpdatePlatformOverridePreference
(
const
nsAString
&
aValue
)
;
void
UpdateAllWorkerContextOptions
(
)
;
void
UpdateAllWorkerLanguages
(
const
nsTArray
<
nsString
>
&
aLanguages
)
;
static
void
SetDefaultJSGCSettings
(
JSGCParamKey
aKey
uint32_t
aValue
)
{
AssertIsOnMainThread
(
)
;
sDefaultJSSettings
.
ApplyGCSetting
(
aKey
aValue
)
;
}
void
UpdateAllWorkerMemoryParameter
(
JSGCParamKey
aKey
uint32_t
aValue
)
;
#
ifdef
JS_GC_ZEAL
static
void
SetDefaultGCZeal
(
uint8_t
aGCZeal
uint32_t
aFrequency
)
{
AssertIsOnMainThread
(
)
;
sDefaultJSSettings
.
gcZeal
=
aGCZeal
;
sDefaultJSSettings
.
gcZealFrequency
=
aFrequency
;
}
void
UpdateAllWorkerGCZeal
(
)
;
#
endif
void
GarbageCollectAllWorkers
(
bool
aShrinking
)
;
void
CycleCollectAllWorkers
(
)
;
void
SendOfflineStatusChangeEventToAllWorkers
(
bool
aIsOffline
)
;
void
MemoryPressureAllWorkers
(
)
;
uint32_t
ClampedHardwareConcurrency
(
)
const
;
void
CrashIfHanging
(
)
;
private
:
RuntimeService
(
)
;
~
RuntimeService
(
)
;
nsresult
Init
(
)
;
void
Shutdown
(
)
;
void
Cleanup
(
)
;
void
AddAllTopLevelWorkersToArray
(
nsTArray
<
WorkerPrivate
*
>
&
aWorkers
)
;
void
GetWorkersForWindow
(
nsPIDOMWindowInner
*
aWindow
nsTArray
<
WorkerPrivate
*
>
&
aWorkers
)
;
bool
ScheduleWorker
(
WorkerPrivate
*
aWorkerPrivate
)
;
static
void
ShutdownIdleThreads
(
nsITimer
*
aTimer
void
*
aClosure
)
;
nsresult
CreateSharedWorkerFromLoadInfo
(
JSContext
*
aCx
WorkerLoadInfo
*
aLoadInfo
const
nsAString
&
aScriptURL
const
nsAString
&
aName
SharedWorker
*
*
aSharedWorker
)
;
}
;
END_WORKERS_NAMESPACE
#
endif
