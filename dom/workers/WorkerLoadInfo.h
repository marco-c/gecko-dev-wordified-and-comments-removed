#
ifndef
mozilla_dom_workers_WorkerLoadInfo_h
#
define
mozilla_dom_workers_WorkerLoadInfo_h
#
include
"
mozilla
/
dom
/
ChannelInfo
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrationDescriptor
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
class
nsIChannel
;
class
nsIContentSecurityPolicy
;
class
nsILoadGroup
;
class
nsIPrincipal
;
class
nsIRunnable
;
class
nsIScriptContext
;
class
nsITabChild
;
class
nsIURI
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
WorkerPrivate
;
struct
WorkerLoadInfoData
{
nsCOMPtr
<
nsIURI
>
mBaseURI
;
nsCOMPtr
<
nsIURI
>
mResolvedScriptURI
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
nsCOMPtr
<
nsIScriptContext
>
mScriptContext
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
mCSP
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
class
InterfaceRequestor
final
:
public
nsIInterfaceRequestor
{
NS_DECL_ISUPPORTS
public
:
InterfaceRequestor
(
nsIPrincipal
*
aPrincipal
nsILoadGroup
*
aLoadGroup
)
;
void
MaybeAddTabChild
(
nsILoadGroup
*
aLoadGroup
)
;
NS_IMETHOD
GetInterface
(
const
nsIID
&
aIID
void
*
*
aSink
)
override
;
void
SetOuterRequestor
(
nsIInterfaceRequestor
*
aOuterRequestor
)
{
MOZ_ASSERT
(
!
mOuterRequestor
)
;
MOZ_ASSERT
(
aOuterRequestor
)
;
mOuterRequestor
=
aOuterRequestor
;
}
private
:
~
InterfaceRequestor
(
)
{
}
already_AddRefed
<
nsITabChild
>
GetAnyLiveTabChild
(
)
;
nsCOMPtr
<
nsILoadContext
>
mLoadContext
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mOuterRequestor
;
nsTArray
<
nsWeakPtr
>
mTabChildList
;
}
;
RefPtr
<
InterfaceRequestor
>
mInterfaceRequestor
;
nsAutoPtr
<
mozilla
:
:
ipc
:
:
PrincipalInfo
>
mPrincipalInfo
;
nsCString
mDomain
;
nsString
mOrigin
;
nsString
mServiceWorkerCacheName
;
Maybe
<
ServiceWorkerDescriptor
>
mServiceWorkerDescriptor
;
Maybe
<
ServiceWorkerRegistrationDescriptor
>
mServiceWorkerRegistrationDescriptor
;
Maybe
<
ServiceWorkerDescriptor
>
mParentController
;
ChannelInfo
mChannelInfo
;
nsLoadFlags
mLoadFlags
;
uint64_t
mWindowID
;
net
:
:
ReferrerPolicy
mReferrerPolicy
;
bool
mFromWindow
;
bool
mEvalAllowed
;
bool
mReportCSPViolations
;
bool
mXHRParamsAllowed
;
bool
mPrincipalIsSystem
;
bool
mStorageAllowed
;
bool
mFirstPartyStorageAccessGranted
;
bool
mServiceWorkersTestingInWindow
;
OriginAttributes
mOriginAttributes
;
enum
{
eNotSet
eInsecureContext
eSecureContext
}
mSecureContext
;
WorkerLoadInfoData
(
)
;
WorkerLoadInfoData
(
WorkerLoadInfoData
&
&
aOther
)
=
default
;
WorkerLoadInfoData
&
operator
=
(
WorkerLoadInfoData
&
&
aOther
)
=
default
;
}
;
struct
WorkerLoadInfo
:
WorkerLoadInfoData
{
WorkerLoadInfo
(
)
;
WorkerLoadInfo
(
WorkerLoadInfo
&
&
aOther
)
noexcept
;
~
WorkerLoadInfo
(
)
;
WorkerLoadInfo
&
operator
=
(
WorkerLoadInfo
&
&
aOther
)
=
default
;
nsresult
SetPrincipalOnMainThread
(
nsIPrincipal
*
aPrincipal
nsILoadGroup
*
aLoadGroup
)
;
nsresult
GetPrincipalAndLoadGroupFromChannel
(
nsIChannel
*
aChannel
nsIPrincipal
*
*
aPrincipalOut
nsILoadGroup
*
*
aLoadGroupOut
)
;
nsresult
SetPrincipalFromChannel
(
nsIChannel
*
aChannel
)
;
bool
FinalChannelPrincipalIsValid
(
nsIChannel
*
aChannel
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
PrincipalIsValid
(
)
const
;
bool
PrincipalURIMatchesScriptURL
(
)
;
#
endif
bool
ProxyReleaseMainThreadObjects
(
WorkerPrivate
*
aWorkerPrivate
)
;
bool
ProxyReleaseMainThreadObjects
(
WorkerPrivate
*
aWorkerPrivate
nsCOMPtr
<
nsILoadGroup
>
&
aLoadGroupToCancel
)
;
}
;
}
}
#
endif
