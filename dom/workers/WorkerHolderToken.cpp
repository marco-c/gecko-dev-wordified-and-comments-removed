#
include
"
WorkerHolderToken
.
h
"
#
include
"
WorkerPrivate
.
h
"
namespace
mozilla
{
namespace
dom
{
using
namespace
workers
;
already_AddRefed
<
WorkerHolderToken
>
WorkerHolderToken
:
:
Create
(
WorkerPrivate
*
aWorkerPrivate
Status
aShutdownStatus
Behavior
aBehavior
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
RefPtr
<
WorkerHolderToken
>
workerHolder
=
new
WorkerHolderToken
(
aShutdownStatus
aBehavior
)
;
if
(
NS_WARN_IF
(
!
workerHolder
-
>
HoldWorker
(
aWorkerPrivate
aShutdownStatus
)
)
)
{
return
nullptr
;
}
return
workerHolder
.
forget
(
)
;
}
void
WorkerHolderToken
:
:
AddListener
(
Listener
*
aListener
)
{
NS_ASSERT_OWNINGTHREAD
(
WorkerHolderToken
)
;
MOZ_ASSERT
(
aListener
)
;
MOZ_ASSERT
(
!
mListenerList
.
Contains
(
aListener
)
)
;
mListenerList
.
AppendElement
(
aListener
)
;
if
(
mShuttingDown
)
{
aListener
-
>
WorkerShuttingDown
(
)
;
}
}
void
WorkerHolderToken
:
:
RemoveListener
(
Listener
*
aListener
)
{
NS_ASSERT_OWNINGTHREAD
(
WorkerHolderToken
)
;
MOZ_ASSERT
(
aListener
)
;
DebugOnly
<
bool
>
removed
=
mListenerList
.
RemoveElement
(
aListener
)
;
MOZ_ASSERT
(
removed
)
;
MOZ_ASSERT
(
!
mListenerList
.
Contains
(
aListener
)
)
;
}
bool
WorkerHolderToken
:
:
IsShuttingDown
(
)
const
{
return
mShuttingDown
;
}
WorkerPrivate
*
WorkerHolderToken
:
:
GetWorkerPrivate
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
WorkerHolderToken
)
;
return
mWorkerPrivate
;
}
WorkerHolderToken
:
:
WorkerHolderToken
(
Status
aShutdownStatus
Behavior
aBehavior
)
:
WorkerHolder
(
"
WorkerHolderToken
"
aBehavior
)
mShutdownStatus
(
aShutdownStatus
)
mShuttingDown
(
false
)
{
}
WorkerHolderToken
:
:
~
WorkerHolderToken
(
)
{
NS_ASSERT_OWNINGTHREAD
(
WorkerHolderToken
)
;
MOZ_ASSERT
(
mListenerList
.
IsEmpty
(
)
)
;
}
bool
WorkerHolderToken
:
:
Notify
(
Status
aStatus
)
{
NS_ASSERT_OWNINGTHREAD
(
WorkerHolderToken
)
;
if
(
aStatus
<
mShutdownStatus
|
|
mShuttingDown
)
{
return
true
;
}
nsTObserverArray
<
Listener
*
>
:
:
ForwardIterator
iter
(
mListenerList
)
;
while
(
iter
.
HasMore
(
)
)
{
iter
.
GetNext
(
)
-
>
WorkerShuttingDown
(
)
;
}
mShuttingDown
=
true
;
return
true
;
}
}
}
