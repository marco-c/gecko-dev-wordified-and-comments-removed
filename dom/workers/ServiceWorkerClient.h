#
ifndef
mozilla_dom_workers_serviceworkerclient_h
#
define
mozilla_dom_workers_serviceworkerclient_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ClientBinding
.
h
"
#
include
"
mozilla
/
dom
/
DOMPreferences
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
class
ServiceWorkerClient
;
class
ServiceWorkerWindowClient
;
class
ServiceWorkerClientInfo
final
{
friend
class
ServiceWorkerClient
;
friend
class
ServiceWorkerWindowClient
;
public
:
explicit
ServiceWorkerClientInfo
(
nsIDocument
*
aDoc
uint32_t
aOrdinal
=
0
)
;
const
nsString
&
ClientId
(
)
const
{
return
mClientId
;
}
bool
operator
<
(
const
ServiceWorkerClientInfo
&
aRight
)
const
;
bool
operator
=
=
(
const
ServiceWorkerClientInfo
&
aRight
)
const
;
private
:
const
mozilla
:
:
dom
:
:
ClientType
mType
;
const
uint32_t
mOrdinal
;
nsString
mClientId
;
uint64_t
mWindowId
;
nsString
mUrl
;
VisibilityState
mVisibilityState
;
FrameType
mFrameType
;
TimeStamp
mLastFocusTime
;
bool
mFocused
;
}
;
class
ServiceWorkerClient
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ServiceWorkerClient
)
ServiceWorkerClient
(
nsISupports
*
aOwner
const
ServiceWorkerClientInfo
&
aClientInfo
)
:
mOwner
(
aOwner
)
mType
(
aClientInfo
.
mType
)
mId
(
aClientInfo
.
mClientId
)
mUrl
(
aClientInfo
.
mUrl
)
mWindowId
(
aClientInfo
.
mWindowId
)
mFrameType
(
aClientInfo
.
mFrameType
)
{
MOZ_ASSERT
(
aOwner
)
;
}
nsISupports
*
GetParentObject
(
)
const
{
return
mOwner
;
}
void
GetId
(
nsString
&
aRetval
)
const
{
aRetval
=
mId
;
}
void
GetUrl
(
nsAString
&
aUrl
)
const
{
aUrl
.
Assign
(
mUrl
)
;
}
mozilla
:
:
dom
:
:
FrameType
FrameType
(
)
const
{
return
mFrameType
;
}
mozilla
:
:
dom
:
:
ClientType
Type
(
)
const
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
ServiceWorkerClient
(
)
{
}
private
:
nsCOMPtr
<
nsISupports
>
mOwner
;
const
ClientType
mType
;
nsString
mId
;
nsString
mUrl
;
protected
:
uint64_t
mWindowId
;
mozilla
:
:
dom
:
:
FrameType
mFrameType
;
}
;
}
}
}
#
endif
