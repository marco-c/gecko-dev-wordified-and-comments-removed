#
include
"
ServiceWorker
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
ServiceWorkerClient
.
h
"
#
include
"
ServiceWorkerManager
.
h
"
#
include
"
ServiceWorkerPrivate
.
h
"
#
include
"
WorkerPrivate
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerGlobalScopeBinding
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
using
mozilla
:
:
ErrorResult
;
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
bool
ServiceWorkerVisible
(
JSContext
*
aCx
JSObject
*
aObj
)
{
if
(
NS_IsMainThread
(
)
)
{
return
Preferences
:
:
GetBool
(
"
dom
.
serviceWorkers
.
enabled
"
false
)
;
}
ServiceWorkerGlobalScope
*
scope
=
nullptr
;
nsresult
rv
=
UNWRAP_OBJECT
(
ServiceWorkerGlobalScope
aObj
scope
)
;
return
NS_SUCCEEDED
(
rv
)
;
}
ServiceWorker
:
:
ServiceWorker
(
nsPIDOMWindowInner
*
aWindow
ServiceWorkerInfo
*
aInfo
)
:
DOMEventTargetHelper
(
aWindow
)
mInfo
(
aInfo
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
aInfo
)
;
mInfo
-
>
AppendWorker
(
this
)
;
}
ServiceWorker
:
:
~
ServiceWorker
(
)
{
AssertIsOnMainThread
(
)
;
mInfo
-
>
RemoveWorker
(
this
)
;
}
NS_IMPL_ADDREF_INHERITED
(
ServiceWorker
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
ServiceWorker
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
ServiceWorker
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
JSObject
*
ServiceWorker
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
AssertIsOnMainThread
(
)
;
return
ServiceWorkerBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ServiceWorker
:
:
GetScriptURL
(
nsString
&
aURL
)
const
{
CopyUTF8toUTF16
(
mInfo
-
>
ScriptSpec
(
)
aURL
)
;
}
void
ServiceWorker
:
:
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
{
if
(
State
(
)
=
=
ServiceWorkerState
:
:
Redundant
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
GetParentObject
(
)
)
;
if
(
!
window
|
|
!
window
-
>
GetExtantDoc
(
)
)
{
NS_WARNING
(
"
Trying
to
call
post
message
from
an
invalid
dom
object
.
"
)
;
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
UniquePtr
<
ServiceWorkerClientInfo
>
clientInfo
(
new
ServiceWorkerClientInfo
(
window
-
>
GetExtantDoc
(
)
)
)
;
ServiceWorkerPrivate
*
workerPrivate
=
mInfo
-
>
WorkerPrivate
(
)
;
aRv
=
workerPrivate
-
>
SendMessageEvent
(
aCx
aMessage
aTransferable
Move
(
clientInfo
)
)
;
}
}
}
}
