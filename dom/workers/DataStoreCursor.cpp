#
include
"
DataStore
.
h
"
#
include
"
DataStoreCursor
.
h
"
#
include
"
mozilla
/
dom
/
DataStore
.
h
"
#
include
"
mozilla
/
dom
/
DataStoreCursor
.
h
"
#
include
"
mozilla
/
dom
/
DataStoreBinding
.
h
"
#
include
"
mozilla
/
dom
/
DataStoreImplBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseWorkerProxy
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
WorkerPrivate
.
h
"
#
include
"
WorkerRunnable
.
h
"
#
include
"
WorkerScope
.
h
"
BEGIN_WORKERS_NAMESPACE
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
WorkerDataStoreCursor
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
WorkerDataStoreCursor
Release
)
NS_IMPL_CYCLE_COLLECTION
(
WorkerDataStoreCursor
mWorkerStore
)
WorkerDataStoreCursor
:
:
WorkerDataStoreCursor
(
WorkerDataStore
*
aWorkerStore
)
:
mWorkerStore
(
aWorkerStore
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
}
already_AddRefed
<
WorkerDataStoreCursor
>
WorkerDataStoreCursor
:
:
Constructor
(
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
NS_NOTREACHED
(
"
Cannot
use
the
chrome
constructor
on
the
worker
!
"
)
;
return
nullptr
;
}
bool
WorkerDataStoreCursor
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
{
return
DataStoreCursorBinding_workers
:
:
Wrap
(
aCx
this
aGivenProto
aReflector
)
;
}
class
DataStoreCursorRunnable
:
public
WorkerMainThreadRunnable
{
protected
:
nsMainThreadPtrHandle
<
DataStoreCursor
>
mBackingCursor
;
public
:
DataStoreCursorRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsMainThreadPtrHandle
<
DataStoreCursor
>
&
aBackingCursor
)
:
WorkerMainThreadRunnable
(
aWorkerPrivate
)
mBackingCursor
(
aBackingCursor
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
}
;
class
DataStoreCursorNextRunnable
final
:
public
DataStoreCursorRunnable
{
RefPtr
<
PromiseWorkerProxy
>
mPromiseWorkerProxy
;
ErrorResult
&
mRv
;
public
:
DataStoreCursorNextRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsMainThreadPtrHandle
<
DataStoreCursor
>
&
aBackingCursor
Promise
*
aWorkerPromise
ErrorResult
&
aRv
)
:
DataStoreCursorRunnable
(
aWorkerPrivate
aBackingCursor
)
mRv
(
aRv
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
mPromiseWorkerProxy
=
PromiseWorkerProxy
:
:
Create
(
aWorkerPrivate
aWorkerPromise
)
;
}
void
Dispatch
(
ErrorResult
&
aRv
)
{
if
(
mPromiseWorkerProxy
)
{
DataStoreCursorRunnable
:
:
Dispatch
(
aRv
)
;
}
}
protected
:
virtual
bool
MainThreadRun
(
)
override
{
AssertIsOnMainThread
(
)
;
RefPtr
<
Promise
>
promise
=
mBackingCursor
-
>
Next
(
mRv
)
;
promise
-
>
AppendNativeHandler
(
mPromiseWorkerProxy
)
;
return
true
;
}
}
;
class
DataStoreCursorCloseRunnable
final
:
public
DataStoreCursorRunnable
{
ErrorResult
&
mRv
;
public
:
DataStoreCursorCloseRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsMainThreadPtrHandle
<
DataStoreCursor
>
&
aBackingCursor
ErrorResult
&
aRv
)
:
DataStoreCursorRunnable
(
aWorkerPrivate
aBackingCursor
)
mRv
(
aRv
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
protected
:
virtual
bool
MainThreadRun
(
)
override
{
AssertIsOnMainThread
(
)
;
mBackingCursor
-
>
Close
(
mRv
)
;
return
true
;
}
}
;
already_AddRefed
<
WorkerDataStore
>
WorkerDataStoreCursor
:
:
GetStore
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
aCx
)
;
MOZ_ASSERT
(
workerPrivate
)
;
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
MOZ_ASSERT
(
mWorkerStore
)
;
RefPtr
<
WorkerDataStore
>
workerStore
=
mWorkerStore
;
return
workerStore
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WorkerDataStoreCursor
:
:
Next
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
aCx
)
;
MOZ_ASSERT
(
workerPrivate
)
;
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
workerPrivate
-
>
GlobalScope
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
DataStoreCursorNextRunnable
>
runnable
=
new
DataStoreCursorNextRunnable
(
workerPrivate
mBackingCursor
promise
aRv
)
;
runnable
-
>
Dispatch
(
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
promise
.
forget
(
)
;
}
void
WorkerDataStoreCursor
:
:
Close
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
aCx
)
;
MOZ_ASSERT
(
workerPrivate
)
;
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
RefPtr
<
DataStoreCursorCloseRunnable
>
runnable
=
new
DataStoreCursorCloseRunnable
(
workerPrivate
mBackingCursor
aRv
)
;
runnable
-
>
Dispatch
(
aRv
)
;
}
void
WorkerDataStoreCursor
:
:
SetBackingDataStoreCursor
(
const
nsMainThreadPtrHandle
<
DataStoreCursor
>
&
aBackingCursor
)
{
mBackingCursor
=
aBackingCursor
;
}
END_WORKERS_NAMESPACE
