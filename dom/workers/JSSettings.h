#
ifndef
mozilla_dom_workerinternals_JSSettings_h
#
define
mozilla_dom_workerinternals_JSSettings_h
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
js
/
ContextOptions
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
workerinternals
{
const
uint32_t
kJSPrincipalsDebugToken
=
0x7e2df9d2
;
struct
JSSettings
{
enum
{
JSSettings_JSGC_MAX_BYTES
=
0
JSSettings_JSGC_HIGH_FREQUENCY_TIME_LIMIT
JSSettings_JSGC_LOW_FREQUENCY_HEAP_GROWTH
JSSettings_JSGC_HIGH_FREQUENCY_LARGE_HEAP_GROWTH
JSSettings_JSGC_HIGH_FREQUENCY_SMALL_HEAP_GROWTH
JSSettings_JSGC_SMALL_HEAP_SIZE_MAX
JSSettings_JSGC_LARGE_HEAP_SIZE_MIN
JSSettings_JSGC_ALLOCATION_THRESHOLD
JSSettings_JSGC_SLICE_TIME_BUDGET
JSSettings_JSGC_DYNAMIC_HEAP_GROWTH
JSSettings_JSGC_DYNAMIC_MARK_SLICE
kGCSettingsArraySize
}
;
struct
JSGCSetting
{
JSGCParamKey
key
;
Maybe
<
uint32_t
>
value
;
bool
operator
=
=
(
JSGCParamKey
k
)
const
{
return
key
=
=
k
;
}
}
;
struct
JSContentChromeSettings
{
JS
:
:
RealmOptions
realmOptions
;
int32_t
maxScriptRuntime
=
0
;
}
;
JSContentChromeSettings
chrome
;
JSContentChromeSettings
content
;
nsTArray
<
JSGCSetting
>
gcSettings
;
JS
:
:
ContextOptions
contextOptions
;
#
ifdef
JS_GC_ZEAL
uint8_t
gcZeal
=
0
;
uint32_t
gcZealFrequency
=
0
;
#
endif
bool
ApplyGCSetting
(
JSGCParamKey
aKey
Maybe
<
uint32_t
>
aValue
)
{
size_t
index
=
gcSettings
.
IndexOf
(
aKey
)
;
if
(
index
=
=
gcSettings
.
NoIndex
)
{
gcSettings
.
AppendElement
(
JSGCSetting
{
aKey
aValue
}
)
;
return
true
;
}
if
(
gcSettings
[
index
]
.
value
!
=
aValue
)
{
gcSettings
[
index
]
.
value
=
aValue
;
return
true
;
}
return
false
;
}
}
;
}
}
}
#
endif
