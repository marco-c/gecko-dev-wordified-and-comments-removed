#
ifndef
mozilla_dom_workers_workerprivate_h__
#
define
mozilla_dom_workers_workerprivate_h__
#
include
<
bitset
>
#
include
"
MainThreadUtils
.
h
"
#
include
"
ScriptLoader
.
h
"
#
include
"
js
/
ContextOptions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
PerformanceCounter
.
h
"
#
include
"
mozilla
/
RelativeTimeline
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
mozilla
/
ThreadBound
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
mozilla
/
dom
/
ClientSource
.
h
"
#
include
"
mozilla
/
dom
/
FlippedOnce
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerChild
.
h
"
#
include
"
mozilla
/
dom
/
Worker
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerLoadInfo
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
dom
/
WorkerStatus
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
JSSettings
.
h
"
#
include
"
mozilla
/
dom
/
workerinternals
/
Queue
.
h
"
#
include
"
mozilla
/
StaticPrefs_extensions
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsIThreadInternal
;
namespace
mozilla
{
class
ThrottledEventQueue
;
namespace
dom
{
enum
WorkerKind
{
WorkerKindDedicated
WorkerKindShared
WorkerKindService
}
;
class
ClientInfo
;
class
ClientSource
;
class
Function
;
class
JSExecutionManager
;
class
MessagePort
;
class
UniqueMessagePortId
;
class
PerformanceStorage
;
class
TimeoutHandler
;
class
WorkerControlRunnable
;
class
WorkerCSPEventListener
;
class
WorkerDebugger
;
class
WorkerDebuggerGlobalScope
;
class
WorkerErrorReport
;
class
WorkerEventTarget
;
class
WorkerGlobalScope
;
class
WorkerRef
;
class
WorkerRunnable
;
class
WorkerDebuggeeRunnable
;
class
WorkerThread
;
class
SharedMutex
{
using
Mutex
=
mozilla
:
:
Mutex
;
class
RefCountedMutex
final
:
public
Mutex
{
public
:
explicit
RefCountedMutex
(
const
char
*
aName
)
:
Mutex
(
aName
)
{
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefCountedMutex
)
private
:
~
RefCountedMutex
(
)
=
default
;
}
;
const
RefPtr
<
RefCountedMutex
>
mMutex
;
public
:
explicit
SharedMutex
(
const
char
*
aName
)
:
mMutex
(
new
RefCountedMutex
(
aName
)
)
{
}
SharedMutex
(
const
SharedMutex
&
aOther
)
=
default
;
operator
Mutex
&
(
)
{
return
*
mMutex
;
}
operator
const
Mutex
&
(
)
const
{
return
*
mMutex
;
}
void
AssertCurrentThreadOwns
(
)
const
{
mMutex
-
>
AssertCurrentThreadOwns
(
)
;
}
}
;
nsString
ComputeWorkerPrivateId
(
)
;
class
WorkerPrivate
final
:
public
RelativeTimeline
{
public
:
struct
LocationInfo
{
nsCString
mHref
;
nsCString
mProtocol
;
nsCString
mHost
;
nsCString
mHostname
;
nsCString
mPort
;
nsCString
mPathname
;
nsCString
mSearch
;
nsCString
mHash
;
nsString
mOrigin
;
}
;
NS_INLINE_DECL_REFCOUNTING
(
WorkerPrivate
)
static
already_AddRefed
<
WorkerPrivate
>
Constructor
(
JSContext
*
aCx
const
nsAString
&
aScriptURL
bool
aIsChromeWorker
WorkerKind
aWorkerKind
const
nsAString
&
aWorkerName
const
nsACString
&
aServiceWorkerScope
WorkerLoadInfo
*
aLoadInfo
ErrorResult
&
aRv
nsString
aId
=
u
"
"
_ns
)
;
enum
LoadGroupBehavior
{
InheritLoadGroup
OverrideLoadGroup
}
;
static
nsresult
GetLoadInfo
(
JSContext
*
aCx
nsPIDOMWindowInner
*
aWindow
WorkerPrivate
*
aParent
const
nsAString
&
aScriptURL
bool
aIsChromeWorker
LoadGroupBehavior
aLoadGroupBehavior
WorkerKind
aWorkerKind
WorkerLoadInfo
*
aLoadInfo
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
aCb
)
;
void
ClearSelfAndParentEventTargetRef
(
)
{
AssertIsOnParentThread
(
)
;
MOZ_ASSERT
(
mSelfRef
)
;
mParentEventTargetRef
=
nullptr
;
mSelfRef
=
nullptr
;
}
bool
Start
(
)
;
bool
Notify
(
WorkerStatus
aStatus
)
;
bool
Cancel
(
)
{
return
Notify
(
Canceling
)
;
}
bool
Close
(
)
;
static
void
OverrideLoadInfoLoadGroup
(
WorkerLoadInfo
&
aLoadInfo
nsIPrincipal
*
aPrincipal
)
;
bool
IsDebuggerRegistered
(
)
{
AssertIsOnMainThread
(
)
;
return
mDebuggerRegistered
;
}
bool
ExtensionAPIAllowed
(
)
{
return
(
StaticPrefs
:
:
extensions_backgroundServiceWorker_enabled_AtStartup
(
)
&
&
mExtensionAPIAllowed
)
;
}
void
SetIsDebuggerRegistered
(
bool
aDebuggerRegistered
)
{
AssertIsOnMainThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
MOZ_ASSERT
(
mDebuggerRegistered
!
=
aDebuggerRegistered
)
;
mDebuggerRegistered
=
aDebuggerRegistered
;
mCondVar
.
Notify
(
)
;
}
void
WaitForIsDebuggerRegistered
(
bool
aDebuggerRegistered
)
{
AssertIsOnParentThread
(
)
;
AutoYieldJSThreadExecution
yield
;
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MutexAutoLock
lock
(
mMutex
)
;
while
(
mDebuggerRegistered
!
=
aDebuggerRegistered
)
{
mCondVar
.
Wait
(
)
;
}
}
nsresult
SetIsDebuggerReady
(
bool
aReady
)
;
WorkerDebugger
*
Debugger
(
)
const
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mDebugger
)
;
return
mDebugger
;
}
void
SetDebugger
(
WorkerDebugger
*
aDebugger
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mDebugger
!
=
aDebugger
)
;
mDebugger
=
aDebugger
;
}
JS
:
:
UniqueChars
AdoptDefaultLocale
(
)
{
MOZ_ASSERT
(
mDefaultLocale
"
the
default
locale
must
have
been
successfully
set
for
anyone
"
"
to
be
trying
to
adopt
it
"
)
;
return
std
:
:
move
(
mDefaultLocale
)
;
}
void
RunLoopNeverRan
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DoRunLoop
(
JSContext
*
aCx
)
;
bool
InterruptCallback
(
JSContext
*
aCx
)
;
bool
IsOnCurrentThread
(
)
;
void
CloseInternal
(
)
;
bool
FreezeInternal
(
)
;
bool
ThawInternal
(
)
;
void
PropagateStorageAccessPermissionGrantedInternal
(
)
;
void
TraverseTimeouts
(
nsCycleCollectionTraversalCallback
&
aCallback
)
;
void
UnlinkTimeouts
(
)
;
bool
ModifyBusyCountFromWorker
(
bool
aIncrease
)
;
bool
AddChildWorker
(
WorkerPrivate
*
aChildWorker
)
;
void
RemoveChildWorker
(
WorkerPrivate
*
aChildWorker
)
;
void
PostMessageToParent
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
void
PostMessageToParentMessagePort
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
EnterDebuggerEventLoop
(
)
;
void
LeaveDebuggerEventLoop
(
)
;
void
PostMessageToDebugger
(
const
nsAString
&
aMessage
)
;
void
SetDebuggerImmediate
(
Function
&
aHandler
ErrorResult
&
aRv
)
;
void
ReportErrorToDebugger
(
const
nsAString
&
aFilename
uint32_t
aLineno
const
nsAString
&
aMessage
)
;
bool
NotifyInternal
(
WorkerStatus
aStatus
)
;
void
ReportError
(
JSContext
*
aCx
JS
:
:
ConstUTF8CharsZ
aToStringResult
JSErrorReport
*
aReport
)
;
static
void
ReportErrorToConsole
(
const
char
*
aMessage
)
;
static
void
ReportErrorToConsole
(
const
char
*
aMessage
const
nsTArray
<
nsString
>
&
aParams
)
;
int32_t
SetTimeout
(
JSContext
*
aCx
TimeoutHandler
*
aHandler
int32_t
aTimeout
bool
aIsInterval
ErrorResult
&
aRv
)
;
void
ClearTimeout
(
int32_t
aId
)
;
MOZ_CAN_RUN_SCRIPT
bool
RunExpiredTimeouts
(
JSContext
*
aCx
)
;
bool
RescheduleTimeoutTimer
(
JSContext
*
aCx
)
;
void
UpdateContextOptionsInternal
(
JSContext
*
aCx
const
JS
:
:
ContextOptions
&
aContextOptions
)
;
void
UpdateLanguagesInternal
(
const
nsTArray
<
nsString
>
&
aLanguages
)
;
void
UpdateJSWorkerMemoryParameterInternal
(
JSContext
*
aCx
JSGCParamKey
key
Maybe
<
uint32_t
>
aValue
)
;
enum
WorkerRanOrNot
{
WorkerNeverRan
=
0
WorkerRan
}
;
void
ScheduleDeletion
(
WorkerRanOrNot
aRanOrNot
)
;
bool
CollectRuntimeStats
(
JS
:
:
RuntimeStats
*
aRtStats
bool
aAnonymize
)
;
#
ifdef
JS_GC_ZEAL
void
UpdateGCZealInternal
(
JSContext
*
aCx
uint8_t
aGCZeal
uint32_t
aFrequency
)
;
#
endif
void
SetLowMemoryStateInternal
(
JSContext
*
aCx
bool
aState
)
;
void
GarbageCollectInternal
(
JSContext
*
aCx
bool
aShrinking
bool
aCollectChildren
)
;
void
CycleCollectInternal
(
bool
aCollectChildren
)
;
void
OfflineStatusChangeEventInternal
(
bool
aIsOffline
)
;
void
MemoryPressureInternal
(
)
;
void
SetFetchHandlerWasAdded
(
)
{
MOZ_ASSERT
(
IsServiceWorker
(
)
)
;
AssertIsOnWorkerThread
(
)
;
mFetchHandlerWasAdded
=
true
;
}
bool
FetchHandlerWasAdded
(
)
const
{
MOZ_ASSERT
(
IsServiceWorker
(
)
)
;
AssertIsOnWorkerThread
(
)
;
return
mFetchHandlerWasAdded
;
}
JSContext
*
GetJSContext
(
)
const
{
AssertIsOnWorkerThread
(
)
;
return
mJSContext
;
}
WorkerGlobalScope
*
GlobalScope
(
)
const
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
data
-
>
mScope
;
}
WorkerDebuggerGlobalScope
*
DebuggerGlobalScope
(
)
const
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
data
-
>
mDebuggerScope
;
}
nsIGlobalObject
*
GetCurrentEventLoopGlobal
(
)
const
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
data
-
>
mCurrentEventLoopGlobal
;
}
nsICSPEventListener
*
CSPEventListener
(
)
const
;
void
SetThread
(
WorkerThread
*
aThread
)
;
void
SetWorkerPrivateInWorkerThread
(
WorkerThread
*
aThread
)
;
void
ResetWorkerPrivateInWorkerThread
(
)
;
bool
IsOnWorkerThread
(
)
const
;
void
AssertIsOnWorkerThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
void
BeginCTypesCall
(
)
;
void
EndCTypesCall
(
)
;
void
BeginCTypesCallback
(
)
;
void
EndCTypesCallback
(
)
;
bool
ConnectMessagePort
(
JSContext
*
aCx
UniqueMessagePortId
&
aIdentifier
)
;
WorkerGlobalScope
*
GetOrCreateGlobalScope
(
JSContext
*
aCx
)
;
WorkerDebuggerGlobalScope
*
CreateDebuggerGlobalScope
(
JSContext
*
aCx
)
;
bool
RegisterBindings
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
bool
RegisterDebuggerBindings
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
bool
OnLine
(
)
const
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
data
-
>
mOnLine
;
}
void
StopSyncLoop
(
nsIEventTarget
*
aSyncLoopTarget
bool
aResult
)
;
bool
AllPendingRunnablesShouldBeCanceled
(
)
const
{
return
mCancelAllPendingRunnables
;
}
void
ClearMainEventQueue
(
WorkerRanOrNot
aRanOrNot
)
;
void
ClearDebuggerEventQueue
(
)
;
void
OnProcessNextEvent
(
)
;
void
AfterProcessNextEvent
(
)
;
void
AssertValidSyncLoop
(
nsIEventTarget
*
aSyncLoopTarget
)
#
ifdef
DEBUG
;
#
else
{
}
#
endif
void
SetWorkerScriptExecutedSuccessfully
(
)
{
AssertIsOnWorkerThread
(
)
;
MOZ_ASSERT
(
!
mWorkerScriptExecutedSuccessfully
)
;
mWorkerScriptExecutedSuccessfully
=
true
;
}
bool
WorkerScriptExecutedSuccessfully
(
)
const
{
AssertIsOnWorkerThread
(
)
;
return
mWorkerScriptExecutedSuccessfully
;
}
nsIEventTarget
*
MainThreadEventTargetForMessaging
(
)
;
nsresult
DispatchToMainThreadForMessaging
(
nsIRunnable
*
aRunnable
uint32_t
aFlags
=
NS_DISPATCH_NORMAL
)
;
nsresult
DispatchToMainThreadForMessaging
(
already_AddRefed
<
nsIRunnable
>
aRunnable
uint32_t
aFlags
=
NS_DISPATCH_NORMAL
)
;
nsIEventTarget
*
MainThreadEventTarget
(
)
;
nsresult
DispatchToMainThread
(
nsIRunnable
*
aRunnable
uint32_t
aFlags
=
NS_DISPATCH_NORMAL
)
;
nsresult
DispatchToMainThread
(
already_AddRefed
<
nsIRunnable
>
aRunnable
uint32_t
aFlags
=
NS_DISPATCH_NORMAL
)
;
nsresult
DispatchDebuggeeToMainThread
(
already_AddRefed
<
WorkerDebuggeeRunnable
>
aRunnable
uint32_t
aFlags
=
NS_DISPATCH_NORMAL
)
;
nsISerialEventTarget
*
ControlEventTarget
(
)
;
nsISerialEventTarget
*
HybridEventTarget
(
)
;
void
DumpCrashInformation
(
nsACString
&
aString
)
;
ClientType
GetClientType
(
)
const
;
bool
EnsureCSPEventListener
(
)
;
void
EnsurePerformanceStorage
(
)
;
bool
GetExecutionGranted
(
)
const
;
void
SetExecutionGranted
(
bool
aGranted
)
;
void
ScheduleTimeSliceExpiration
(
uint32_t
aDelay
)
;
void
CancelTimeSliceExpiration
(
)
;
JSExecutionManager
*
GetExecutionManager
(
)
const
;
void
SetExecutionManager
(
JSExecutionManager
*
aManager
)
;
void
ExecutionReady
(
)
;
PerformanceStorage
*
GetPerformanceStorage
(
)
;
PerformanceCounter
&
MutablePerformanceCounterRef
(
)
const
{
return
*
mPerformanceCounter
;
}
const
PerformanceCounter
&
PerformanceCounterRef
(
)
const
{
return
MutablePerformanceCounterRef
(
)
;
}
bool
IsAcceptingEvents
(
)
{
AssertIsOnParentThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
return
mParentStatus
<
Canceling
;
}
WorkerStatus
ParentStatusProtected
(
)
{
AssertIsOnParentThread
(
)
;
MutexAutoLock
lock
(
mMutex
)
;
return
mParentStatus
;
}
WorkerStatus
ParentStatus
(
)
const
{
mMutex
.
AssertCurrentThreadOwns
(
)
;
return
mParentStatus
;
}
Worker
*
ParentEventTargetRef
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
mParentEventTargetRef
)
;
return
mParentEventTargetRef
;
}
void
SetParentEventTargetRef
(
Worker
*
aParentEventTargetRef
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aParentEventTargetRef
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mParentEventTargetRef
)
;
mParentEventTargetRef
=
aParentEventTargetRef
;
}
bool
ModifyBusyCount
(
bool
aIncrease
)
;
uint32_t
BusyCount
(
)
{
return
mBusyCount
;
}
bool
IsSecureContext
(
)
const
{
return
mIsSecureContext
;
}
bool
IsInAutomation
(
)
const
{
return
mIsInAutomation
;
}
TimeStamp
CreationTimeStamp
(
)
const
{
return
mCreationTimeStamp
;
}
DOMHighResTimeStamp
CreationTime
(
)
const
{
return
mCreationTimeHighRes
;
}
DOMHighResTimeStamp
TimeStampToDOMHighRes
(
const
TimeStamp
&
aTimeStamp
)
const
{
MOZ_ASSERT
(
!
aTimeStamp
.
IsNull
(
)
)
;
TimeDuration
duration
=
aTimeStamp
-
mCreationTimeStamp
;
return
duration
.
ToMilliseconds
(
)
;
}
LocationInfo
&
GetLocationInfo
(
)
{
return
mLocationInfo
;
}
void
CopyJSSettings
(
workerinternals
:
:
JSSettings
&
aSettings
)
{
mozilla
:
:
MutexAutoLock
lock
(
mMutex
)
;
aSettings
=
mJSSettings
;
}
void
CopyJSRealmOptions
(
JS
:
:
RealmOptions
&
aOptions
)
{
mozilla
:
:
MutexAutoLock
lock
(
mMutex
)
;
aOptions
=
IsChromeWorker
(
)
?
mJSSettings
.
chromeRealmOptions
:
mJSSettings
.
contentRealmOptions
;
}
bool
IsChromeWorker
(
)
const
{
return
mIsChromeWorker
;
}
WorkerPrivate
*
GetParent
(
)
const
{
return
mParent
;
}
bool
IsFrozen
(
)
const
{
AssertIsOnParentThread
(
)
;
return
mParentFrozen
;
}
bool
IsParentWindowPaused
(
)
const
{
AssertIsOnParentThread
(
)
;
return
mParentWindowPaused
;
}
void
ParentWindowPaused
(
)
;
void
ParentWindowResumed
(
)
;
const
nsString
&
ScriptURL
(
)
const
{
return
mScriptURL
;
}
const
nsString
&
WorkerName
(
)
const
{
return
mWorkerName
;
}
WorkerKind
Kind
(
)
const
{
return
mWorkerKind
;
}
bool
IsDedicatedWorker
(
)
const
{
return
mWorkerKind
=
=
WorkerKindDedicated
;
}
bool
IsSharedWorker
(
)
const
{
return
mWorkerKind
=
=
WorkerKindShared
;
}
bool
IsServiceWorker
(
)
const
{
return
mWorkerKind
=
=
WorkerKindService
;
}
nsContentPolicyType
ContentPolicyType
(
)
const
{
return
ContentPolicyType
(
mWorkerKind
)
;
}
static
nsContentPolicyType
ContentPolicyType
(
WorkerKind
aWorkerKind
)
{
switch
(
aWorkerKind
)
{
case
WorkerKindDedicated
:
return
nsIContentPolicy
:
:
TYPE_INTERNAL_WORKER
;
case
WorkerKindShared
:
return
nsIContentPolicy
:
:
TYPE_INTERNAL_SHARED_WORKER
;
case
WorkerKindService
:
return
nsIContentPolicy
:
:
TYPE_INTERNAL_SERVICE_WORKER
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
worker
type
"
)
;
return
nsIContentPolicy
:
:
TYPE_INVALID
;
}
}
nsIScriptContext
*
GetScriptContext
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mScriptContext
;
}
const
nsCString
&
Domain
(
)
const
{
return
mLoadInfo
.
mDomain
;
}
bool
IsFromWindow
(
)
const
{
return
mLoadInfo
.
mFromWindow
;
}
nsLoadFlags
GetLoadFlags
(
)
const
{
return
mLoadInfo
.
mLoadFlags
;
}
uint64_t
WindowID
(
)
const
{
return
mLoadInfo
.
mWindowID
;
}
uint64_t
ServiceWorkerID
(
)
const
{
return
GetServiceWorkerDescriptor
(
)
.
Id
(
)
;
}
const
nsCString
&
ServiceWorkerScope
(
)
const
{
return
GetServiceWorkerDescriptor
(
)
.
Scope
(
)
;
}
nsIURI
*
GetBaseURI
(
)
const
{
return
mLoadInfo
.
mBaseURI
;
}
void
SetBaseURI
(
nsIURI
*
aBaseURI
)
;
nsIURI
*
GetResolvedScriptURI
(
)
const
{
return
mLoadInfo
.
mResolvedScriptURI
;
}
const
nsString
&
ServiceWorkerCacheName
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
IsServiceWorker
(
)
)
;
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mServiceWorkerCacheName
;
}
const
ServiceWorkerDescriptor
&
GetServiceWorkerDescriptor
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
IsServiceWorker
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mLoadInfo
.
mServiceWorkerDescriptor
.
isSome
(
)
)
;
return
mLoadInfo
.
mServiceWorkerDescriptor
.
ref
(
)
;
}
const
ServiceWorkerRegistrationDescriptor
&
GetServiceWorkerRegistrationDescriptor
(
)
const
{
MOZ_DIAGNOSTIC_ASSERT
(
IsServiceWorker
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mLoadInfo
.
mServiceWorkerRegistrationDescriptor
.
isSome
(
)
)
;
return
mLoadInfo
.
mServiceWorkerRegistrationDescriptor
.
ref
(
)
;
}
void
UpdateServiceWorkerState
(
ServiceWorkerState
aState
)
{
MOZ_DIAGNOSTIC_ASSERT
(
IsServiceWorker
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mLoadInfo
.
mServiceWorkerDescriptor
.
isSome
(
)
)
;
return
mLoadInfo
.
mServiceWorkerDescriptor
.
ref
(
)
.
SetState
(
aState
)
;
}
const
Maybe
<
ServiceWorkerDescriptor
>
&
GetParentController
(
)
const
{
return
mLoadInfo
.
mParentController
;
}
const
ChannelInfo
&
GetChannelInfo
(
)
const
{
return
mLoadInfo
.
mChannelInfo
;
}
void
SetChannelInfo
(
const
ChannelInfo
&
aChannelInfo
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
!
mLoadInfo
.
mChannelInfo
.
IsInitialized
(
)
)
;
MOZ_ASSERT
(
aChannelInfo
.
IsInitialized
(
)
)
;
mLoadInfo
.
mChannelInfo
=
aChannelInfo
;
}
void
InitChannelInfo
(
nsIChannel
*
aChannel
)
{
mLoadInfo
.
mChannelInfo
.
InitFromChannel
(
aChannel
)
;
}
void
InitChannelInfo
(
const
ChannelInfo
&
aChannelInfo
)
{
mLoadInfo
.
mChannelInfo
=
aChannelInfo
;
}
nsIPrincipal
*
GetPrincipal
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mPrincipal
;
}
nsIPrincipal
*
GetLoadingPrincipal
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mLoadingPrincipal
;
}
nsIPrincipal
*
GetPartitionedPrincipal
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mPartitionedPrincipal
;
}
const
nsAString
&
OriginNoSuffix
(
)
const
{
return
mLoadInfo
.
mOriginNoSuffix
;
}
const
nsACString
&
Origin
(
)
const
{
return
mLoadInfo
.
mOrigin
;
}
const
nsACString
&
EffectiveStoragePrincipalOrigin
(
)
const
;
nsILoadGroup
*
GetLoadGroup
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mLoadGroup
;
}
bool
UsesSystemPrincipal
(
)
const
{
return
mLoadInfo
.
mPrincipalIsSystem
;
}
bool
UsesAddonOrExpandedAddonPrincipal
(
)
const
{
return
mLoadInfo
.
mPrincipalIsAddonOrExpandedAddon
;
}
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
GetPrincipalInfo
(
)
const
{
return
*
mLoadInfo
.
mPrincipalInfo
;
}
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
GetEffectiveStoragePrincipalInfo
(
)
const
;
already_AddRefed
<
nsIChannel
>
ForgetWorkerChannel
(
)
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mChannel
.
forget
(
)
;
}
nsPIDOMWindowInner
*
GetWindow
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mWindow
;
}
nsPIDOMWindowInner
*
GetAncestorWindow
(
)
const
;
nsIContentSecurityPolicy
*
GetCSP
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mLoadInfo
.
mCSP
;
}
void
SetCSP
(
nsIContentSecurityPolicy
*
aCSP
)
;
nsresult
SetCSPFromHeaderValues
(
const
nsACString
&
aCSPHeaderValue
const
nsACString
&
aCSPReportOnlyHeaderValue
)
;
void
StoreCSPOnClient
(
)
;
const
mozilla
:
:
ipc
:
:
CSPInfo
&
GetCSPInfo
(
)
const
{
return
*
mLoadInfo
.
mCSPInfo
;
}
void
UpdateReferrerInfoFromHeader
(
const
nsACString
&
aReferrerPolicyHeaderValue
)
;
nsIReferrerInfo
*
GetReferrerInfo
(
)
const
{
return
mLoadInfo
.
mReferrerInfo
;
}
ReferrerPolicy
GetReferrerPolicy
(
)
const
{
return
mLoadInfo
.
mReferrerInfo
-
>
ReferrerPolicy
(
)
;
}
void
SetReferrerInfo
(
nsIReferrerInfo
*
aReferrerInfo
)
{
mLoadInfo
.
mReferrerInfo
=
aReferrerInfo
;
}
bool
IsEvalAllowed
(
)
const
{
return
mLoadInfo
.
mEvalAllowed
;
}
void
SetEvalAllowed
(
bool
aEvalAllowed
)
{
mLoadInfo
.
mEvalAllowed
=
aEvalAllowed
;
}
bool
GetReportCSPViolations
(
)
const
{
return
mLoadInfo
.
mReportCSPViolations
;
}
void
SetReportCSPViolations
(
bool
aReport
)
{
mLoadInfo
.
mReportCSPViolations
=
aReport
;
}
bool
XHRParamsAllowed
(
)
const
{
return
mLoadInfo
.
mXHRParamsAllowed
;
}
void
SetXHRParamsAllowed
(
bool
aAllowed
)
{
mLoadInfo
.
mXHRParamsAllowed
=
aAllowed
;
}
mozilla
:
:
StorageAccess
StorageAccess
(
)
const
{
AssertIsOnWorkerThread
(
)
;
if
(
mLoadInfo
.
mHasStorageAccessPermissionGranted
)
{
return
mozilla
:
:
StorageAccess
:
:
eAllow
;
}
return
mLoadInfo
.
mStorageAccess
;
}
bool
UseRegularPrincipal
(
)
const
{
AssertIsOnWorkerThread
(
)
;
return
mLoadInfo
.
mUseRegularPrincipal
;
}
bool
HasStorageAccessPermissionGranted
(
)
const
{
AssertIsOnWorkerThread
(
)
;
return
mLoadInfo
.
mHasStorageAccessPermissionGranted
;
}
nsICookieJarSettings
*
CookieJarSettings
(
)
const
{
MOZ_ASSERT
(
mLoadInfo
.
mCookieJarSettings
)
;
return
mLoadInfo
.
mCookieJarSettings
;
}
const
OriginAttributes
&
GetOriginAttributes
(
)
const
{
return
mLoadInfo
.
mOriginAttributes
;
}
bool
ServiceWorkersTestingInWindow
(
)
const
{
return
mLoadInfo
.
mServiceWorkersTestingInWindow
;
}
bool
IsWatchedByDevTools
(
)
const
{
return
mLoadInfo
.
mWatchedByDevTools
;
}
bool
IsLoadingWorkerScript
(
)
const
{
return
mLoadingWorkerScript
;
}
void
SetLoadingWorkerScript
(
bool
aLoadingWorkerScript
)
{
mLoadingWorkerScript
=
aLoadingWorkerScript
;
}
RemoteWorkerChild
*
GetRemoteWorkerController
(
)
;
void
SetRemoteWorkerController
(
RemoteWorkerChild
*
aController
)
;
void
SetRemoteWorkerControllerWeakRef
(
ThreadSafeWeakPtr
<
RemoteWorkerChild
>
aWeakRef
)
;
ThreadSafeWeakPtr
<
RemoteWorkerChild
>
GetRemoteWorkerControllerWeakRef
(
)
;
RefPtr
<
GenericPromise
>
SetServiceWorkerSkipWaitingFlag
(
)
;
bool
Freeze
(
const
nsPIDOMWindowInner
*
aWindow
)
;
bool
Thaw
(
const
nsPIDOMWindowInner
*
aWindow
)
;
void
PropagateStorageAccessPermissionGranted
(
)
;
void
EnableDebugger
(
)
;
void
DisableDebugger
(
)
;
already_AddRefed
<
WorkerRunnable
>
MaybeWrapAsWorkerRunnable
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
bool
ProxyReleaseMainThreadObjects
(
)
;
void
SetLowMemoryState
(
bool
aState
)
;
void
GarbageCollect
(
bool
aShrinking
)
;
void
CycleCollect
(
)
;
nsresult
SetPrincipalsAndCSPOnMainThread
(
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aPartitionedPrincipal
nsILoadGroup
*
aLoadGroup
nsIContentSecurityPolicy
*
aCsp
)
;
nsresult
SetPrincipalsAndCSPFromChannel
(
nsIChannel
*
aChannel
)
;
bool
FinalChannelPrincipalIsValid
(
nsIChannel
*
aChannel
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
PrincipalURIMatchesScriptURL
(
)
;
#
endif
void
UpdateOverridenLoadGroup
(
nsILoadGroup
*
aBaseLoadGroup
)
;
void
WorkerScriptLoaded
(
)
;
Document
*
GetDocument
(
)
const
;
void
MemoryPressure
(
)
;
void
UpdateContextOptions
(
const
JS
:
:
ContextOptions
&
aContextOptions
)
;
void
UpdateLanguages
(
const
nsTArray
<
nsString
>
&
aLanguages
)
;
void
UpdateJSWorkerMemoryParameter
(
JSGCParamKey
key
Maybe
<
uint32_t
>
value
)
;
#
ifdef
JS_GC_ZEAL
void
UpdateGCZeal
(
uint8_t
aGCZeal
uint32_t
aFrequency
)
;
#
endif
void
OfflineStatusChangeEvent
(
bool
aIsOffline
)
;
nsresult
Dispatch
(
already_AddRefed
<
WorkerRunnable
>
aRunnable
nsIEventTarget
*
aSyncLoopTarget
=
nullptr
)
;
nsresult
DispatchControlRunnable
(
already_AddRefed
<
WorkerControlRunnable
>
aWorkerControlRunnable
)
;
nsresult
DispatchDebuggerRunnable
(
already_AddRefed
<
WorkerRunnable
>
aDebuggerRunnable
)
;
#
ifdef
DEBUG
void
AssertIsOnParentThread
(
)
const
;
void
AssertInnerWindowIsCorrect
(
)
const
;
#
else
void
AssertIsOnParentThread
(
)
const
{
}
void
AssertInnerWindowIsCorrect
(
)
const
{
}
#
endif
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
PrincipalIsValid
(
)
const
;
#
endif
void
StartCancelingTimer
(
)
;
const
nsAString
&
Id
(
)
;
const
nsID
&
AgentClusterId
(
)
const
{
return
mAgentClusterId
;
}
bool
IsSharedMemoryAllowed
(
)
const
;
bool
CrossOriginIsolated
(
)
const
;
void
SetUseCounter
(
UseCounterWorker
aUseCounter
)
{
MOZ_ASSERT
(
!
mReportedUseCounters
)
;
MOZ_ASSERT
(
aUseCounter
>
UseCounterWorker
:
:
Unknown
)
;
AssertIsOnWorkerThread
(
)
;
mUseCounters
[
static_cast
<
size_t
>
(
aUseCounter
)
]
=
true
;
}
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
GetEmbedderPolicy
(
)
const
;
mozilla
:
:
Result
<
Ok
nsresult
>
SetEmbedderPolicy
(
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
)
;
void
InheritOwnerEmbedderPolicyOrNull
(
nsIRequest
*
aRequest
)
;
bool
MatchEmbedderPolicy
(
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
)
const
;
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
GetOwnerEmbedderPolicy
(
)
const
;
void
SetCCCollectedAnything
(
bool
collectedAnything
)
;
uint32_t
GetCurrentTimerNestingLevel
(
)
const
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
data
-
>
mCurrentTimerNestingLevel
;
}
void
IncreaseTopLevelWorkerFinishedRunnableCount
(
)
{
+
+
mTopLevelWorkerFinishedRunnableCount
;
}
void
DecreaseTopLevelWorkerFinishedRunnableCount
(
)
{
-
-
mTopLevelWorkerFinishedRunnableCount
;
}
void
IncreaseWorkerFinishedRunnableCount
(
)
{
+
+
mWorkerFinishedRunnableCount
;
}
void
DecreaseWorkerFinishedRunnableCount
(
)
{
-
-
mWorkerFinishedRunnableCount
;
}
private
:
WorkerPrivate
(
WorkerPrivate
*
aParent
const
nsAString
&
aScriptURL
bool
aIsChromeWorker
WorkerKind
aWorkerKind
const
nsAString
&
aWorkerName
const
nsACString
&
aServiceWorkerScope
WorkerLoadInfo
&
aLoadInfo
nsString
&
&
aId
const
nsID
&
aAgentClusterId
const
nsILoadInfo
:
:
CrossOriginOpenerPolicy
aAgentClusterOpenerPolicy
)
;
~
WorkerPrivate
(
)
;
bool
MayContinueRunning
(
)
{
AssertIsOnWorkerThread
(
)
;
WorkerStatus
status
;
{
MutexAutoLock
lock
(
mMutex
)
;
status
=
mStatus
;
}
if
(
status
<
Canceling
)
{
return
true
;
}
return
false
;
}
void
CancelAllTimeouts
(
)
;
enum
class
ProcessAllControlRunnablesResult
{
Nothing
MayContinue
Abort
}
;
ProcessAllControlRunnablesResult
ProcessAllControlRunnables
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
return
ProcessAllControlRunnablesLocked
(
)
;
}
ProcessAllControlRunnablesResult
ProcessAllControlRunnablesLocked
(
)
;
void
EnableMemoryReporter
(
)
;
void
DisableMemoryReporter
(
)
;
void
WaitForWorkerEvents
(
)
;
already_AddRefed
<
nsIEventTarget
>
CreateNewSyncLoop
(
WorkerStatus
aFailStatus
)
;
bool
RunCurrentSyncLoop
(
)
;
bool
DestroySyncLoop
(
uint32_t
aLoopIndex
)
;
void
InitializeGCTimers
(
)
;
enum
GCTimerMode
{
PeriodicTimer
=
0
IdleTimer
NoTimer
}
;
void
SetGCTimerMode
(
GCTimerMode
aMode
)
;
void
ShutdownGCTimers
(
)
;
friend
class
WorkerRef
;
bool
AddWorkerRef
(
WorkerRef
*
aWorkerRefer
WorkerStatus
aFailStatus
)
;
void
RemoveWorkerRef
(
WorkerRef
*
aWorkerRef
)
;
void
NotifyWorkerRefs
(
WorkerStatus
aStatus
)
;
bool
HasActiveWorkerRefs
(
)
{
auto
data
=
mWorkerThreadAccessible
.
Access
(
)
;
return
!
(
data
-
>
mChildWorkers
.
IsEmpty
(
)
&
&
data
-
>
mTimeouts
.
IsEmpty
(
)
&
&
data
-
>
mWorkerRefs
.
IsEmpty
(
)
)
;
}
nsresult
DispatchLockHeld
(
already_AddRefed
<
WorkerRunnable
>
aRunnable
nsIEventTarget
*
aSyncLoopTarget
const
MutexAutoLock
&
aProofOfLock
)
;
void
DispatchCancelingRunnable
(
)
;
bool
GetUseCounter
(
UseCounterWorker
aUseCounter
)
{
MOZ_ASSERT
(
aUseCounter
>
UseCounterWorker
:
:
Unknown
)
;
AssertIsOnWorkerThread
(
)
;
return
mUseCounters
[
static_cast
<
size_t
>
(
aUseCounter
)
]
;
}
void
ReportUseCounters
(
)
;
UniquePtr
<
ClientSource
>
CreateClientSource
(
)
;
void
EnsureOwnerEmbedderPolicy
(
)
;
class
EventTarget
;
friend
class
EventTarget
;
friend
class
AutoSyncLoopHolder
;
struct
TimeoutInfo
;
class
MemoryReporter
;
friend
class
MemoryReporter
;
friend
class
mozilla
:
:
dom
:
:
WorkerThread
;
SharedMutex
mMutex
;
mozilla
:
:
CondVar
mCondVar
;
WorkerPrivate
*
const
mParent
;
const
nsString
mScriptURL
;
const
nsString
mWorkerName
;
const
WorkerKind
mWorkerKind
;
RefPtr
<
Worker
>
mParentEventTargetRef
;
RefPtr
<
WorkerPrivate
>
mSelfRef
;
WorkerLoadInfo
mLoadInfo
;
LocationInfo
mLocationInfo
;
workerinternals
:
:
JSSettings
mJSSettings
;
WorkerDebugger
*
mDebugger
;
workerinternals
:
:
Queue
<
WorkerControlRunnable
*
4
>
mControlQueue
;
workerinternals
:
:
Queue
<
WorkerRunnable
*
4
>
mDebuggerQueue
;
JSContext
*
mJSContext
;
RefPtr
<
WorkerThread
>
mThread
;
PRThread
*
mPRThread
;
RefPtr
<
ThrottledEventQueue
>
mMainThreadEventTargetForMessaging
;
RefPtr
<
ThrottledEventQueue
>
mMainThreadEventTarget
;
RefPtr
<
WorkerEventTarget
>
mWorkerControlEventTarget
;
RefPtr
<
WorkerEventTarget
>
mWorkerHybridEventTarget
;
RefPtr
<
ThrottledEventQueue
>
mMainThreadDebuggeeEventTarget
;
struct
SyncLoopInfo
{
explicit
SyncLoopInfo
(
EventTarget
*
aEventTarget
)
;
RefPtr
<
EventTarget
>
mEventTarget
;
bool
mCompleted
;
bool
mResult
;
#
ifdef
DEBUG
bool
mHasRun
;
#
endif
}
;
nsTArray
<
UniquePtr
<
SyncLoopInfo
>
>
mSyncLoopStack
;
nsCOMPtr
<
nsITimer
>
mCancelingTimer
;
nsCOMPtr
<
nsIRunnable
>
mLoadFailedRunnable
;
RefPtr
<
PerformanceStorage
>
mPerformanceStorage
;
RefPtr
<
WorkerCSPEventListener
>
mCSPEventListener
;
nsTArray
<
RefPtr
<
WorkerRunnable
>
>
mPreStartRunnables
;
RefPtr
<
RemoteWorkerChild
>
mRemoteWorkerController
;
ThreadSafeWeakPtr
<
RemoteWorkerChild
>
mRemoteWorkerControllerWeakRef
;
JS
:
:
UniqueChars
mDefaultLocale
;
TimeStamp
mKillTime
;
WorkerStatus
mParentStatus
;
WorkerStatus
mStatus
;
Atomic
<
uint64_t
>
mBusyCount
;
Atomic
<
bool
>
mLoadingWorkerScript
;
TimeStamp
mCreationTimeStamp
;
DOMHighResTimeStamp
mCreationTimeHighRes
;
static_assert
(
sizeof
(
UseCounterWorker
)
<
=
sizeof
(
size_t
)
"
UseCounterWorker
is
too
big
"
)
;
static_assert
(
UseCounterWorker
:
:
Count
>
=
static_cast
<
UseCounterWorker
>
(
0
)
"
Should
be
non
-
negative
value
and
safe
to
cast
to
unsigned
"
)
;
std
:
:
bitset
<
static_cast
<
size_t
>
(
UseCounterWorker
:
:
Count
)
>
mUseCounters
;
bool
mReportedUseCounters
;
const
nsID
mAgentClusterId
;
struct
WorkerThreadAccessible
{
explicit
WorkerThreadAccessible
(
WorkerPrivate
*
aParent
)
;
RefPtr
<
WorkerGlobalScope
>
mScope
;
RefPtr
<
WorkerDebuggerGlobalScope
>
mDebuggerScope
;
nsTArray
<
WorkerPrivate
*
>
mChildWorkers
;
nsTObserverArray
<
WorkerRef
*
>
mWorkerRefs
;
nsTArray
<
UniquePtr
<
TimeoutInfo
>
>
mTimeouts
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsCOMPtr
<
nsITimerCallback
>
mTimerRunnable
;
nsCOMPtr
<
nsITimer
>
mGCTimer
;
RefPtr
<
MemoryReporter
>
mMemoryReporter
;
nsCOMPtr
<
nsIGlobalObject
>
mCurrentEventLoopGlobal
;
nsCOMPtr
<
nsITimer
>
mTSTimer
;
RefPtr
<
JSExecutionManager
>
mExecutionManager
;
nsTArray
<
AutoYieldJSThreadExecution
>
mYieldJSThreadExecution
;
uint32_t
mNumWorkerRefsPreventingShutdownStart
;
uint32_t
mDebuggerEventLoopLevel
;
uint32_t
mErrorHandlerRecursionCount
;
uint32_t
mNextTimeoutId
;
uint32_t
mCurrentTimerNestingLevel
;
bool
mFrozen
;
bool
mTimerRunning
;
bool
mRunningExpiredTimeouts
;
bool
mPeriodicGCTimerRunning
;
bool
mIdleGCTimerRunning
;
bool
mOnLine
;
bool
mJSThreadExecutionGranted
;
bool
mCCCollectedAnything
;
FlippedOnce
<
false
>
mDeletionScheduled
;
}
;
ThreadBound
<
WorkerThreadAccessible
>
mWorkerThreadAccessible
;
class
MOZ_RAII
AutoPushEventLoopGlobal
{
public
:
AutoPushEventLoopGlobal
(
WorkerPrivate
*
aWorkerPrivate
JSContext
*
aCx
)
;
~
AutoPushEventLoopGlobal
(
)
;
private
:
WorkerPrivate
*
mWorkerPrivate
;
nsCOMPtr
<
nsIGlobalObject
>
mOldEventLoopGlobal
;
}
;
friend
class
AutoPushEventLoopGlobal
;
uint32_t
mPostSyncLoopOperations
;
enum
{
ePendingEventQueueClearing
=
0x01
eDispatchCancelingRunnable
=
0x02
}
;
bool
mParentWindowPaused
;
bool
mCancelAllPendingRunnables
;
bool
mWorkerScriptExecutedSuccessfully
;
bool
mFetchHandlerWasAdded
;
bool
mMainThreadObjectsForgotten
;
bool
mIsChromeWorker
;
bool
mParentFrozen
;
const
bool
mIsSecureContext
;
bool
mDebuggerRegistered
;
bool
mDebuggerReady
;
nsTArray
<
RefPtr
<
WorkerRunnable
>
>
mDelayedDebuggeeRunnables
;
bool
mExtensionAPIAllowed
;
bool
mIsInAutomation
;
const
RefPtr
<
mozilla
:
:
PerformanceCounter
>
mPerformanceCounter
=
MakeRefPtr
<
mozilla
:
:
PerformanceCounter
>
(
nsPrintfCString
(
"
Worker
:
%
s
"
NS_ConvertUTF16toUTF8
(
mWorkerName
)
.
get
(
)
)
)
;
nsString
mId
;
const
nsILoadInfo
:
:
CrossOriginOpenerPolicy
mAgentClusterOpenerPolicy
;
Maybe
<
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
>
mEmbedderPolicy
;
Maybe
<
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
>
mOwnerEmbedderPolicy
;
bool
mIsPrivilegedAddonGlobal
;
Atomic
<
uint32_t
>
mTopLevelWorkerFinishedRunnableCount
;
Atomic
<
uint32_t
>
mWorkerFinishedRunnableCount
;
}
;
class
AutoSyncLoopHolder
{
WorkerPrivate
*
mWorkerPrivate
;
nsCOMPtr
<
nsIEventTarget
>
mTarget
;
uint32_t
mIndex
;
public
:
AutoSyncLoopHolder
(
WorkerPrivate
*
aWorkerPrivate
WorkerStatus
aFailStatus
)
:
mWorkerPrivate
(
aWorkerPrivate
)
mTarget
(
aWorkerPrivate
-
>
CreateNewSyncLoop
(
aFailStatus
)
)
mIndex
(
aWorkerPrivate
-
>
mSyncLoopStack
.
Length
(
)
-
1
)
{
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
~
AutoSyncLoopHolder
(
)
{
if
(
mWorkerPrivate
&
&
mTarget
)
{
mWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
mWorkerPrivate
-
>
StopSyncLoop
(
mTarget
false
)
;
mWorkerPrivate
-
>
DestroySyncLoop
(
mIndex
)
;
}
}
bool
Run
(
)
{
WorkerPrivate
*
workerPrivate
=
mWorkerPrivate
;
mWorkerPrivate
=
nullptr
;
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
return
workerPrivate
-
>
RunCurrentSyncLoop
(
)
;
}
nsIEventTarget
*
GetEventTarget
(
)
const
{
return
mTarget
;
}
}
;
}
}
#
endif
