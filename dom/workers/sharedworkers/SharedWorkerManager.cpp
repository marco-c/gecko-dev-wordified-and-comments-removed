#
include
"
SharedWorkerManager
.
h
"
#
include
"
SharedWorkerParent
.
h
"
#
include
"
SharedWorkerService
.
h
"
#
include
"
mozilla
/
dom
/
MessagePort
.
h
"
#
include
"
mozilla
/
dom
/
PSharedWorker
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerController
.
h
"
#
include
"
nsIConsoleReportCollector
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
:
:
dom
{
already_AddRefed
<
SharedWorkerManagerHolder
>
SharedWorkerManager
:
:
Create
(
SharedWorkerService
*
aService
nsIEventTarget
*
aPBackgroundEventTarget
const
RemoteWorkerData
&
aData
nsIPrincipal
*
aLoadingPrincipal
const
OriginAttributes
&
aEffectiveStoragePrincipalAttrs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
SharedWorkerManager
>
manager
=
new
SharedWorkerManager
(
aPBackgroundEventTarget
aData
aLoadingPrincipal
aEffectiveStoragePrincipalAttrs
)
;
RefPtr
<
SharedWorkerManagerHolder
>
holder
=
new
SharedWorkerManagerHolder
(
manager
aService
)
;
return
holder
.
forget
(
)
;
}
SharedWorkerManager
:
:
SharedWorkerManager
(
nsIEventTarget
*
aPBackgroundEventTarget
const
RemoteWorkerData
&
aData
nsIPrincipal
*
aLoadingPrincipal
const
OriginAttributes
&
aEffectiveStoragePrincipalAttrs
)
:
mPBackgroundEventTarget
(
aPBackgroundEventTarget
)
mLoadingPrincipal
(
aLoadingPrincipal
)
mDomain
(
aData
.
domain
(
)
)
mEffectiveStoragePrincipalAttrs
(
aEffectiveStoragePrincipalAttrs
)
mResolvedScriptURL
(
DeserializeURI
(
aData
.
resolvedScriptURL
(
)
)
)
mWorkerOptions
(
aData
.
workerOptions
(
)
)
mIsSecureContext
(
aData
.
isSecureContext
(
)
)
mSuspended
(
false
)
mFrozen
(
false
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aLoadingPrincipal
)
;
}
SharedWorkerManager
:
:
~
SharedWorkerManager
(
)
{
NS_ReleaseOnMainThread
(
"
SharedWorkerManager
:
:
mLoadingPrincipal
"
mLoadingPrincipal
.
forget
(
)
)
;
NS_ProxyRelease
(
"
SharedWorkerManager
:
:
mRemoteWorkerController
"
mPBackgroundEventTarget
mRemoteWorkerController
.
forget
(
)
)
;
}
bool
SharedWorkerManager
:
:
MaybeCreateRemoteWorker
(
const
RemoteWorkerData
&
aData
uint64_t
aWindowID
UniqueMessagePortId
&
aPortIdentifier
base
:
:
ProcessId
aProcessId
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
false
;
}
if
(
!
mRemoteWorkerController
)
{
mRemoteWorkerController
=
RemoteWorkerController
:
:
Create
(
aData
this
aProcessId
)
;
if
(
NS_WARN_IF
(
!
mRemoteWorkerController
)
)
{
return
false
;
}
}
if
(
aWindowID
)
{
mRemoteWorkerController
-
>
AddWindowID
(
aWindowID
)
;
}
mRemoteWorkerController
-
>
AddPortIdentifier
(
aPortIdentifier
.
release
(
)
)
;
return
true
;
}
already_AddRefed
<
SharedWorkerManagerHolder
>
SharedWorkerManager
:
:
MatchOnMainThread
(
SharedWorkerService
*
aService
const
RemoteWorkerData
&
aData
nsIURI
*
aScriptURL
nsIPrincipal
*
aLoadingPrincipal
const
OriginAttributes
&
aEffectiveStoragePrincipalAttrs
bool
*
aMatchNameButNotOptions
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aMatchNameButNotOptions
)
;
bool
urlEquals
;
if
(
NS_FAILED
(
aScriptURL
-
>
Equals
(
mResolvedScriptURL
&
urlEquals
)
)
)
{
return
nullptr
;
}
bool
match
=
aData
.
domain
(
)
=
=
mDomain
&
&
urlEquals
&
&
aData
.
workerOptions
(
)
.
mName
=
=
mWorkerOptions
.
mName
&
&
mLoadingPrincipal
-
>
Subsumes
(
aLoadingPrincipal
)
&
&
aLoadingPrincipal
-
>
Subsumes
(
mLoadingPrincipal
)
&
&
mEffectiveStoragePrincipalAttrs
=
=
aEffectiveStoragePrincipalAttrs
;
if
(
!
match
)
{
return
nullptr
;
}
*
aMatchNameButNotOptions
=
aData
.
workerOptions
(
)
.
mType
!
=
mWorkerOptions
.
mType
|
|
aData
.
workerOptions
(
)
.
mCredentials
!
=
mWorkerOptions
.
mCredentials
;
if
(
*
aMatchNameButNotOptions
)
{
return
nullptr
;
}
RefPtr
<
SharedWorkerManagerHolder
>
holder
=
new
SharedWorkerManagerHolder
(
this
aService
)
;
return
holder
.
forget
(
)
;
}
void
SharedWorkerManager
:
:
AddActor
(
SharedWorkerParent
*
aParent
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
!
mActors
.
Contains
(
aParent
)
)
;
mActors
.
AppendElement
(
aParent
)
;
if
(
mLockCount
)
{
Unused
<
<
aParent
-
>
SendNotifyLock
(
true
)
;
}
if
(
mWebTransportCount
)
{
Unused
<
<
aParent
-
>
SendNotifyWebTransport
(
true
)
;
}
}
void
SharedWorkerManager
:
:
RemoveActor
(
SharedWorkerParent
*
aParent
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
mActors
.
Contains
(
aParent
)
)
;
uint64_t
windowID
=
aParent
-
>
WindowID
(
)
;
if
(
windowID
)
{
mRemoteWorkerController
-
>
RemoveWindowID
(
windowID
)
;
}
mActors
.
RemoveElement
(
aParent
)
;
if
(
!
mActors
.
IsEmpty
(
)
)
{
UpdateSuspend
(
)
;
UpdateFrozen
(
)
;
return
;
}
}
void
SharedWorkerManager
:
:
Terminate
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
mActors
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mHolders
.
IsEmpty
(
)
)
;
if
(
!
mRemoteWorkerController
)
{
return
;
}
mRemoteWorkerController
-
>
Terminate
(
)
;
mRemoteWorkerController
=
nullptr
;
}
void
SharedWorkerManager
:
:
UpdateSuspend
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
mRemoteWorkerController
)
;
uint32_t
suspended
=
0
;
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
if
(
actor
-
>
IsSuspended
(
)
)
{
+
+
suspended
;
}
}
if
(
(
mSuspended
&
&
suspended
=
=
mActors
.
Length
(
)
)
|
|
(
!
mSuspended
&
&
suspended
!
=
mActors
.
Length
(
)
)
)
{
return
;
}
if
(
!
mSuspended
)
{
mSuspended
=
true
;
mRemoteWorkerController
-
>
Suspend
(
)
;
}
else
{
mSuspended
=
false
;
mRemoteWorkerController
-
>
Resume
(
)
;
}
}
void
SharedWorkerManager
:
:
UpdateFrozen
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT
(
mRemoteWorkerController
)
;
uint32_t
frozen
=
0
;
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
if
(
actor
-
>
IsFrozen
(
)
)
{
+
+
frozen
;
}
}
if
(
(
mFrozen
&
&
frozen
=
=
mActors
.
Length
(
)
)
|
|
(
!
mFrozen
&
&
frozen
!
=
mActors
.
Length
(
)
)
)
{
return
;
}
if
(
!
mFrozen
)
{
mFrozen
=
true
;
mRemoteWorkerController
-
>
Freeze
(
)
;
}
else
{
mFrozen
=
false
;
mRemoteWorkerController
-
>
Thaw
(
)
;
}
}
bool
SharedWorkerManager
:
:
IsSecureContext
(
)
const
{
return
mIsSecureContext
;
}
void
SharedWorkerManager
:
:
CreationFailed
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
Unused
<
<
actor
-
>
SendError
(
NS_ERROR_FAILURE
)
;
}
}
void
SharedWorkerManager
:
:
CreationSucceeded
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
}
void
SharedWorkerManager
:
:
ErrorReceived
(
const
ErrorValue
&
aValue
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
Unused
<
<
actor
-
>
SendError
(
aValue
)
;
}
}
void
SharedWorkerManager
:
:
LockNotified
(
bool
aCreated
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT_IF
(
!
aCreated
mLockCount
>
0
)
;
mLockCount
+
=
aCreated
?
1
:
-
1
;
if
(
(
aCreated
&
&
mLockCount
=
=
1
)
|
|
!
mLockCount
)
{
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
Unused
<
<
actor
-
>
SendNotifyLock
(
aCreated
)
;
}
}
}
;
void
SharedWorkerManager
:
:
WebTransportNotified
(
bool
aCreated
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
MOZ_ASSERT_IF
(
!
aCreated
mWebTransportCount
>
0
)
;
mWebTransportCount
+
=
aCreated
?
1
:
-
1
;
if
(
(
aCreated
&
&
mWebTransportCount
=
=
1
)
|
|
mWebTransportCount
=
=
0
)
{
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
Unused
<
<
actor
-
>
SendNotifyWebTransport
(
aCreated
)
;
}
}
}
;
void
SharedWorkerManager
:
:
Terminated
(
)
{
:
:
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
(
)
;
for
(
SharedWorkerParent
*
actor
:
mActors
)
{
Unused
<
<
actor
-
>
SendTerminate
(
)
;
}
}
void
SharedWorkerManager
:
:
RegisterHolder
(
SharedWorkerManagerHolder
*
aHolder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aHolder
)
;
MOZ_ASSERT
(
!
mHolders
.
Contains
(
aHolder
)
)
;
mHolders
.
AppendElement
(
aHolder
)
;
}
void
SharedWorkerManager
:
:
UnregisterHolder
(
SharedWorkerManagerHolder
*
aHolder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aHolder
)
;
MOZ_ASSERT
(
mHolders
.
Contains
(
aHolder
)
)
;
mHolders
.
RemoveElement
(
aHolder
)
;
if
(
!
mHolders
.
IsEmpty
(
)
)
{
return
;
}
aHolder
-
>
Service
(
)
-
>
RemoveWorkerManagerOnMainThread
(
this
)
;
RefPtr
<
SharedWorkerManager
>
self
=
this
;
mPBackgroundEventTarget
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
SharedWorkerService
:
:
RemoveWorkerManagerOnMainThread
"
[
self
]
(
)
{
self
-
>
Terminate
(
)
;
}
)
NS_DISPATCH_NORMAL
)
;
}
SharedWorkerManagerHolder
:
:
SharedWorkerManagerHolder
(
SharedWorkerManager
*
aManager
SharedWorkerService
*
aService
)
:
mManager
(
aManager
)
mService
(
aService
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aManager
)
;
MOZ_ASSERT
(
aService
)
;
aManager
-
>
RegisterHolder
(
this
)
;
}
SharedWorkerManagerHolder
:
:
~
SharedWorkerManagerHolder
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mManager
-
>
UnregisterHolder
(
this
)
;
}
SharedWorkerManagerWrapper
:
:
SharedWorkerManagerWrapper
(
already_AddRefed
<
SharedWorkerManagerHolder
>
aHolder
)
:
mHolder
(
aHolder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
SharedWorkerManagerWrapper
:
:
~
SharedWorkerManagerWrapper
(
)
{
NS_ReleaseOnMainThread
(
"
SharedWorkerManagerWrapper
:
:
mHolder
"
mHolder
.
forget
(
)
)
;
}
}
