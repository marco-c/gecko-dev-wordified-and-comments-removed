#
ifndef
mozilla_dom_SharedWorkerManager_h
#
define
mozilla_dom_SharedWorkerManager_h
#
include
"
mozilla
/
dom
/
RemoteWorkerController
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
MessagePortIdentifier
;
class
RemoteWorkerData
;
class
SharedWorkerParent
;
class
SharedWorkerManager
final
:
public
RemoteWorkerObserver
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SharedWorkerManager
override
)
;
SharedWorkerManager
(
nsIEventTarget
*
aPBackgroundEventTarget
const
RemoteWorkerData
&
aData
nsIPrincipal
*
aLoadingPrincipal
)
;
bool
MatchOnMainThread
(
const
nsACString
&
aDomain
const
nsACString
&
aScriptURL
const
nsAString
&
aName
nsIPrincipal
*
aLoadingPrincipal
)
const
;
void
CreationFailed
(
)
override
;
void
CreationSucceeded
(
)
override
;
void
ErrorReceived
(
const
ErrorValue
&
aValue
)
override
;
void
Terminated
(
)
override
;
bool
MaybeCreateRemoteWorker
(
const
RemoteWorkerData
&
aData
uint64_t
aWindowID
const
MessagePortIdentifier
&
aPortIdentifier
)
;
void
AddActor
(
SharedWorkerParent
*
aParent
)
;
void
RemoveActor
(
SharedWorkerParent
*
aParent
)
;
void
UpdateSuspend
(
)
;
void
UpdateFrozen
(
)
;
bool
IsSecureContext
(
)
const
;
private
:
~
SharedWorkerManager
(
)
;
nsCOMPtr
<
nsIEventTarget
>
mPBackgroundEventTarget
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsCString
mDomain
;
nsCString
mResolvedScriptURL
;
nsString
mName
;
bool
mIsSecureContext
;
nsTArray
<
SharedWorkerParent
*
>
mActors
;
RefPtr
<
RemoteWorkerController
>
mRemoteWorkerController
;
}
;
}
}
#
endif
