function
workerTestExec
(
script
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
var
worker
=
new
Worker
(
"
worker_wrapper
.
js
"
)
;
worker
.
onmessage
=
function
(
event
)
{
if
(
event
.
data
.
type
=
=
"
finish
"
)
{
SimpleTest
.
finish
(
)
;
}
else
if
(
event
.
data
.
type
=
=
"
status
"
)
{
ok
(
event
.
data
.
status
event
.
data
.
msg
)
;
}
else
if
(
event
.
data
.
type
=
=
"
getHelperData
"
)
{
const
{
AppConstants
}
=
SpecialPowers
.
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
isNightly
=
AppConstants
.
NIGHTLY_BUILD
;
const
isEarlyBetaOrEarlier
=
AppConstants
.
EARLY_BETA_OR_EARLIER
;
const
isRelease
=
AppConstants
.
RELEASE_OR_BETA
;
const
isDesktop
=
!
/
Mobile
|
Tablet
/
.
test
(
navigator
.
userAgent
)
;
const
isMac
=
AppConstants
.
platform
=
=
"
macosx
"
;
const
isWindows
=
AppConstants
.
platform
=
=
"
win
"
;
const
isAndroid
=
AppConstants
.
platform
=
=
"
android
"
;
const
isLinux
=
AppConstants
.
platform
=
=
"
linux
"
;
const
isInsecureContext
=
!
window
.
isSecureContext
;
const
isFennec
=
isAndroid
&
&
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
android
/
bridge
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIAndroidBridge
)
.
isFennec
;
const
isCrossOriginIsolated
=
window
.
crossOriginIsolated
;
const
result
=
{
isNightly
isEarlyBetaOrEarlier
isRelease
isDesktop
isMac
isWindows
isAndroid
isLinux
isInsecureContext
isFennec
isCrossOriginIsolated
}
;
worker
.
postMessage
(
{
type
:
"
returnHelperData
"
result
}
)
;
}
}
;
worker
.
onerror
=
function
(
event
)
{
ok
(
false
"
Worker
had
an
error
:
"
+
event
.
data
)
;
SimpleTest
.
finish
(
)
;
}
;
worker
.
postMessage
(
{
script
}
)
;
}
