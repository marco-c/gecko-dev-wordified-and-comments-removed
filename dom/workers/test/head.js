"
use
strict
"
;
function
addTab
(
url
)
{
return
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TAB_URL
)
;
}
function
removeTab
(
tab
)
{
gBrowser
.
removeTab
(
tab
)
;
}
function
createWorkerInTab
(
tab
url
)
{
info
(
"
Creating
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
url
]
urlChild
=
>
{
if
(
!
content
.
_workers
)
{
content
.
_workers
=
{
}
;
}
content
.
_workers
[
urlChild
]
=
new
content
.
Worker
(
urlChild
)
;
}
)
;
}
function
terminateWorkerInTab
(
tab
url
)
{
info
(
"
Terminating
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
url
]
urlChild
=
>
{
content
.
_workers
[
urlChild
]
.
terminate
(
)
;
delete
content
.
_workers
[
urlChild
]
;
}
)
;
}
function
postMessageToWorkerInTab
(
tab
url
message
)
{
info
(
"
Posting
message
to
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
url
message
]
(
urlChild
messageChild
)
=
>
{
let
worker
=
content
.
_workers
[
urlChild
]
;
worker
.
postMessage
(
messageChild
)
;
return
new
Promise
(
function
(
resolve
)
{
worker
.
onmessage
=
function
(
event
)
{
worker
.
onmessage
=
null
;
resolve
(
event
.
data
)
;
}
;
}
)
;
}
)
;
}
function
disableCacheInTab
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
content
.
docShell
.
defaultLoadFlags
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
|
Ci
.
nsIRequest
.
INHIBIT_CACHING
;
}
)
;
}
