"
use
strict
"
;
const
EXAMPLE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
workers
/
test
/
"
;
const
FRAME_SCRIPT_URL
=
getRootDirectory
(
gTestPath
)
+
"
frame_script
.
js
"
;
function
addTab
(
url
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
TAB_URL
)
;
gBrowser
.
selectedTab
=
tab
;
let
linkedBrowser
=
tab
.
linkedBrowser
;
linkedBrowser
.
messageManager
.
loadFrameScript
(
FRAME_SCRIPT_URL
false
)
;
return
BrowserTestUtils
.
browserLoaded
(
linkedBrowser
)
.
then
(
(
)
=
>
tab
)
;
}
function
removeTab
(
tab
)
{
gBrowser
.
removeTab
(
tab
)
;
}
let
nextId
=
0
;
function
jsonrpc
(
tab
method
params
)
{
let
currentId
=
nextId
+
+
;
let
messageManager
=
tab
.
linkedBrowser
.
messageManager
;
messageManager
.
sendAsyncMessage
(
"
jsonrpc
"
{
id
:
currentId
method
params
}
)
;
return
new
Promise
(
function
(
resolve
reject
)
{
messageManager
.
addMessageListener
(
"
jsonrpc
"
function
listener
(
event
)
{
let
{
id
result
error
}
=
event
.
data
;
if
(
id
!
=
=
currentId
)
{
return
;
}
messageManager
.
removeMessageListener
(
"
jsonrpc
"
listener
)
;
if
(
error
)
{
reject
(
error
)
;
return
;
}
resolve
(
result
)
;
}
)
;
}
)
;
}
function
createWorkerInTab
(
tab
url
)
{
return
jsonrpc
(
tab
"
createWorker
"
[
url
]
)
;
}
function
terminateWorkerInTab
(
tab
url
)
{
return
jsonrpc
(
tab
"
terminateWorker
"
[
url
]
)
;
}
function
postMessageToWorkerInTab
(
tab
url
message
)
{
return
jsonrpc
(
tab
"
postMessageToWorker
"
[
url
message
]
)
;
}
function
disableCacheInTab
(
tab
)
{
return
jsonrpc
(
tab
"
disableCache
"
[
]
)
;
}
