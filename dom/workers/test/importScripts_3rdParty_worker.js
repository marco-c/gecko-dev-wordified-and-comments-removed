const
workerURL
=
"
http
:
/
/
mochi
.
test
:
8888
/
tests
/
dom
/
workers
/
test
/
importScripts_3rdParty_worker
.
js
"
;
function
normalizeError
(
err
)
{
if
(
!
err
)
{
return
null
;
}
const
isDOMException
=
"
filename
"
in
err
;
return
{
message
:
err
.
message
name
:
err
.
name
isDOMException
code
:
err
.
code
fileName
:
isDOMException
?
err
.
filename
:
err
.
fileName
hasFileName
:
!
!
err
.
fileName
hasFilename
:
!
!
err
.
filename
lineNumber
:
err
.
lineNumber
columnNumber
:
err
.
columnNumber
stack
:
err
.
stack
stringified
:
err
.
toString
(
)
}
;
}
function
normalizeErrorEvent
(
event
)
{
if
(
!
event
)
{
return
null
;
}
return
{
message
:
event
.
message
filename
:
event
.
filename
lineno
:
event
.
lineno
colno
:
event
.
colno
error
:
normalizeError
(
event
.
error
)
stringified
:
event
.
toString
(
)
}
;
}
function
normalizeOnError
(
msgOrEvent
fileName
lineNumber
columnNumber
error
)
{
return
{
message
:
msgOrEvent
filename
:
fileName
lineno
:
lineNumber
colno
:
columnNumber
error
:
normalizeError
(
error
)
stringified
:
null
}
;
}
function
delayedPostMessage
(
data
)
{
setTimeout
(
(
)
=
>
{
postMessage
(
data
)
;
}
0
)
;
}
onmessage
=
function
(
a
)
{
const
args
=
a
.
data
;
if
(
a
.
data
.
nested
)
{
const
worker
=
new
Worker
(
workerURL
)
;
let
firstErrorEvent
;
worker
.
onmessage
=
function
(
event
)
{
delayedPostMessage
(
{
nestedMessage
:
event
.
data
errorEvent
:
firstErrorEvent
}
)
;
}
;
worker
.
onerror
=
function
(
event
)
{
firstErrorEvent
=
normalizeErrorEvent
(
event
)
;
event
.
preventDefault
(
)
;
}
;
a
.
data
.
nested
=
false
;
worker
.
postMessage
(
a
.
data
)
;
return
;
}
if
(
a
.
data
.
mode
=
=
=
"
catch
"
)
{
try
{
importScripts
(
a
.
data
.
url
)
;
workerMethod
(
)
;
}
catch
(
ex
)
{
delayedPostMessage
(
{
args
error
:
normalizeError
(
ex
)
}
)
;
}
}
else
if
(
a
.
data
.
mode
=
=
=
"
uncaught
"
)
{
const
onerrorPromise
=
new
Promise
(
resolve
=
>
{
self
.
onerror
=
(
.
.
.
onerrorArgs
)
=
>
{
resolve
(
normalizeOnError
(
.
.
.
onerrorArgs
)
)
;
}
;
}
)
;
const
listenerPromise
=
new
Promise
(
resolve
=
>
{
self
.
addEventListener
(
"
error
"
evt
=
>
{
resolve
(
normalizeErrorEvent
(
evt
)
)
;
}
)
;
}
)
;
Promise
.
all
(
[
onerrorPromise
listenerPromise
]
)
.
then
(
(
[
onerrorEvent
listenerEvent
]
)
=
>
{
delayedPostMessage
(
{
args
onerrorEvent
listenerEvent
}
)
;
}
)
;
importScripts
(
a
.
data
.
url
)
;
workerMethod
(
)
;
throw
new
Error
(
"
We
expected
an
error
and
this
is
a
failsafe
for
hangs
.
"
)
;
}
}
;
