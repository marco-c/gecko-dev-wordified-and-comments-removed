add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
separatePrivilegedMozillaWebContentProcess
"
true
]
[
"
browser
.
tabs
.
remote
.
separatedMozillaDomains
"
"
example
.
org
"
]
[
"
dom
.
ipc
.
processCount
.
web
"
1
]
[
"
dom
.
ipc
.
processCount
.
privilegedmozilla
"
1
]
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_serviceworker
(
)
{
const
basePath
=
"
browser
/
dom
/
workers
/
test
"
;
const
pagePath
=
{
basePath
}
/
file_service_worker_container
.
html
;
const
scriptPath
=
{
basePath
}
/
file_service_worker
.
js
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
async
function
runWorkerInProcess
(
)
{
function
getActiveWorkerURLs
(
)
{
const
wdm
=
Cc
[
"
mozilla
.
org
/
dom
/
workers
/
workerdebuggermanager
;
1
"
]
.
getService
(
Ci
.
nsIWorkerDebuggerManager
)
;
const
workerDebuggerUrls
=
Array
.
from
(
wdm
.
getWorkerDebuggerEnumerator
(
)
)
.
map
(
wd
=
>
{
return
wd
.
url
;
}
)
;
return
workerDebuggerUrls
;
}
return
new
Promise
(
resolve
=
>
{
content
.
navigator
.
serviceWorker
.
ready
.
then
(
(
{
active
}
)
=
>
{
const
{
port1
port2
}
=
new
content
.
MessageChannel
(
)
;
active
.
postMessage
(
"
webpage
-
>
serviceworker
"
[
port2
]
)
;
port1
.
onmessage
=
evt
=
>
{
resolve
(
{
msg
:
evt
.
data
workerUrls
:
getActiveWorkerURLs
(
)
}
)
;
}
;
}
)
;
}
)
.
then
(
async
res
=
>
{
const
registration
=
await
content
.
navigator
.
serviceWorker
.
ready
;
await
registration
.
unregister
(
)
;
return
res
;
}
)
;
}
const
testCaseList
=
[
{
remoteType
:
"
privilegedmozilla
"
hostname
:
example
.
org
}
]
;
for
(
const
testCase
of
testCaseList
)
{
const
{
remoteType
hostname
}
=
testCase
;
info
(
Test
remote
serviceworkers
launch
selects
a
{
remoteType
}
process
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
https
:
/
/
{
hostname
}
/
{
pagePath
}
}
)
;
is
(
tab
.
linkedBrowser
.
remoteType
remoteType
Got
the
expected
remoteType
for
{
hostname
}
tab
)
;
const
results
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
runWorkerInProcess
)
;
Assert
.
deepEqual
(
results
{
msg
:
"
serviceworker
-
reply
"
workerUrls
:
[
https
:
/
/
{
hostname
}
/
{
scriptPath
}
]
}
Got
the
expected
results
for
{
hostname
}
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
