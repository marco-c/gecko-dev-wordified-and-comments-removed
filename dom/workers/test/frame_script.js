"
use
strict
"
;
let
workers
=
{
}
;
let
methods
=
{
createWorker
(
url
)
{
dump
(
"
Frame
script
:
creating
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
workers
[
url
]
=
new
content
.
Worker
(
url
)
;
return
Promise
.
resolve
(
)
;
}
terminateWorker
(
url
)
{
dump
(
"
Frame
script
:
terminating
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
workers
[
url
]
.
terminate
(
)
;
delete
workers
[
url
]
;
return
Promise
.
resolve
(
)
;
}
postMessageToWorker
(
url
message
)
{
dump
(
"
Frame
script
:
posting
message
to
worker
with
url
'
"
+
url
+
"
'
\
n
"
)
;
let
worker
=
workers
[
url
]
;
worker
.
postMessage
(
message
)
;
return
new
Promise
(
function
(
resolve
)
{
worker
.
onmessage
=
function
(
event
)
{
worker
.
onmessage
=
null
;
resolve
(
event
.
data
)
;
}
;
}
)
;
}
disableCache
(
)
{
docShell
.
defaultLoadFlags
=
Ci
.
nsIRequest
.
LOAD_BYPASS_CACHE
|
Ci
.
nsIRequest
.
INHIBIT_CACHING
;
}
}
;
addMessageListener
(
"
jsonrpc
"
function
(
event
)
{
let
{
id
method
params
}
=
event
.
data
;
Promise
.
resolve
(
)
.
then
(
function
(
)
{
return
methods
[
method
]
.
apply
(
undefined
params
)
;
}
)
.
then
(
function
(
result
)
{
sendAsyncMessage
(
"
jsonrpc
"
{
id
result
}
)
;
}
)
.
catch
(
function
(
error
)
{
sendAsyncMessage
(
"
jsonrpc
"
{
id
error
:
error
.
toString
(
)
}
)
;
}
)
;
}
)
;
