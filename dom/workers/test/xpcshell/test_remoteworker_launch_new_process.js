"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
createHttpServer
}
=
AddonTestUtils
;
do_get_profile
(
true
)
;
AddonTestUtils
.
init
(
this
)
;
const
server
=
createHttpServer
(
{
hosts
:
[
"
localhost
"
"
example
.
org
"
]
}
)
;
server
.
registerPathHandler
(
"
/
sw
.
js
"
(
request
response
)
=
>
{
info
(
/
sw
.
js
is
being
requested
:
{
JSON
.
stringify
(
request
)
}
)
;
response
.
setHeader
(
"
Content
-
Type
"
"
application
/
javascript
"
)
;
response
.
write
(
"
"
)
;
}
)
;
add_task
(
async
function
setup_prefs
(
)
{
equal
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
remote
.
autostart
"
)
true
"
e10s
is
expected
to
be
enabled
"
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
tabs
.
remote
.
separatePrivilegedMozillaWebContentProcess
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
tabs
.
remote
.
separatedMozillaDomains
"
"
example
.
org
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
tabs
.
remote
.
separatePrivilegedMozillaWebContentProcess
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
tabs
.
remote
.
separatedMozillaDomains
"
)
;
}
)
;
}
)
;
add_task
(
async
function
launch_remoteworkers_in_new_processes
(
)
{
const
swm
=
Cc
[
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
]
.
getService
(
Ci
.
nsIServiceWorkerManager
)
;
const
ssm
=
Services
.
scriptSecurityManager
;
const
initialChildCount
=
Services
.
ppmm
.
childCount
;
const
swRegInfoWeb
=
await
swm
.
registerForTest
(
ssm
.
createContentPrincipal
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
"
)
{
}
)
"
http
:
/
/
localhost
/
scope
"
"
http
:
/
/
localhost
/
sw
.
js
"
)
;
swRegInfoWeb
.
QueryInterface
(
Ci
.
nsIServiceWorkerRegistrationInfo
)
;
info
(
web
content
service
worker
registered
:
{
JSON
.
stringify
(
{
principal
:
swRegInfoWeb
.
principal
.
spec
scope
:
swRegInfoWeb
.
scope
}
)
}
)
;
const
swRegInfoPriv
=
await
swm
.
registerForTest
(
ssm
.
createContentPrincipal
(
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
org
"
)
{
}
)
"
http
:
/
/
example
.
org
/
scope
"
"
http
:
/
/
example
.
org
/
sw
.
js
"
)
;
swRegInfoPriv
.
QueryInterface
(
Ci
.
nsIServiceWorkerRegistrationInfo
)
;
info
(
privilegedmozilla
service
worker
registered
:
{
JSON
.
stringify
(
{
principal
:
swRegInfoPriv
.
principal
.
spec
scope
:
swRegInfoPriv
.
scope
}
)
}
)
;
info
(
"
Wait
new
process
to
be
launched
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
Services
.
ppmm
.
childCount
-
initialChildCount
>
=
2
;
}
"
wait
for
a
new
child
processes
to
be
started
"
)
;
info
(
"
Wait
for
webcontent
worker
to
become
active
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
swRegInfoPriv
.
activeWorker
wait
workers
for
scope
{
swRegInfoPriv
.
scope
}
to
be
active
)
;
info
(
"
Wait
for
privilegedmozille
worker
to
become
active
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
swRegInfoPriv
.
activeWorker
wait
workers
for
scope
{
swRegInfoPriv
.
scope
}
to
be
active
)
;
}
)
;
