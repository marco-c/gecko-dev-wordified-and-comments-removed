#
ifndef
mozilla_dom_workers_WorkerRef_h
#
define
mozilla_dom_workers_WorkerRef_h
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerHolder
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
class
StrongWorkerRef
;
class
ThreadSafeWorkerRef
;
class
WorkerRef
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
WorkerRef
)
protected
:
class
Holder
;
friend
class
Holder
;
explicit
WorkerRef
(
WorkerPrivate
*
aWorkerPrivate
)
;
virtual
~
WorkerRef
(
)
;
virtual
void
Notify
(
)
;
WorkerPrivate
*
mWorkerPrivate
;
UniquePtr
<
WorkerHolder
>
mHolder
;
std
:
:
function
<
void
(
)
>
mCallback
;
}
;
class
WeakWorkerRef
final
:
public
WorkerRef
{
public
:
static
already_AddRefed
<
WeakWorkerRef
>
Create
(
WorkerPrivate
*
aWorkerPrivate
std
:
:
function
<
void
(
)
>
&
&
aCallback
=
nullptr
)
;
WorkerPrivate
*
GetPrivate
(
)
const
;
WorkerPrivate
*
GetUnsafePrivate
(
)
const
;
private
:
explicit
WeakWorkerRef
(
WorkerPrivate
*
aWorkerPrivate
)
;
~
WeakWorkerRef
(
)
;
void
Notify
(
)
override
;
}
;
class
StrongWorkerRef
final
:
public
WorkerRef
{
public
:
static
already_AddRefed
<
StrongWorkerRef
>
Create
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
std
:
:
function
<
void
(
)
>
&
&
aCallback
=
nullptr
)
;
WorkerPrivate
*
Private
(
)
const
;
private
:
friend
class
WeakWorkerRef
;
friend
class
ThreadSafeWorkerRef
;
explicit
StrongWorkerRef
(
WorkerPrivate
*
aWorkerPrivate
)
;
~
StrongWorkerRef
(
)
;
}
;
class
ThreadSafeWorkerRef
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ThreadSafeWorkerRef
)
explicit
ThreadSafeWorkerRef
(
StrongWorkerRef
*
aRef
)
;
WorkerPrivate
*
Private
(
)
const
;
private
:
friend
class
StrongWorkerRef
;
~
ThreadSafeWorkerRef
(
)
;
RefPtr
<
StrongWorkerRef
>
mRef
;
}
;
}
}
#
endif
