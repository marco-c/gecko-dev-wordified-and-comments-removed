#
ifndef
mozilla_dom_workers_WorkerRef_h
#
define
mozilla_dom_workers_WorkerRef_h
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerStatus
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
class
StrongWorkerRef
;
class
ThreadSafeWorkerRef
;
class
WorkerRef
{
friend
class
WorkerPrivate
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
WorkerRef
)
protected
:
WorkerRef
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
bool
aIsPreventingShutdown
)
;
virtual
~
WorkerRef
(
)
;
virtual
void
Notify
(
)
;
bool
HoldWorker
(
WorkerStatus
aStatus
)
;
void
ReleaseWorker
(
)
;
bool
IsPreventingShutdown
(
)
const
{
return
mIsPreventingShutdown
;
}
const
char
*
Name
(
)
const
{
return
mName
;
}
WorkerPrivate
*
mWorkerPrivate
;
std
:
:
function
<
void
(
)
>
mCallback
;
const
char
*
const
mName
;
const
bool
mIsPreventingShutdown
;
bool
mHolding
;
}
;
class
WeakWorkerRef
final
:
public
WorkerRef
{
public
:
static
already_AddRefed
<
WeakWorkerRef
>
Create
(
WorkerPrivate
*
aWorkerPrivate
std
:
:
function
<
void
(
)
>
&
&
aCallback
=
nullptr
)
;
WorkerPrivate
*
GetPrivate
(
)
const
;
WorkerPrivate
*
GetUnsafePrivate
(
)
const
;
private
:
explicit
WeakWorkerRef
(
WorkerPrivate
*
aWorkerPrivate
)
;
~
WeakWorkerRef
(
)
;
void
Notify
(
)
override
;
}
;
class
StrongWorkerRef
final
:
public
WorkerRef
{
public
:
static
already_AddRefed
<
StrongWorkerRef
>
Create
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
std
:
:
function
<
void
(
)
>
&
&
aCallback
=
nullptr
)
;
static
already_AddRefed
<
StrongWorkerRef
>
CreateForcibly
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
)
;
WorkerPrivate
*
Private
(
)
const
;
private
:
friend
class
WeakWorkerRef
;
friend
class
ThreadSafeWorkerRef
;
static
already_AddRefed
<
StrongWorkerRef
>
CreateImpl
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
WorkerStatus
aFailStatus
)
;
StrongWorkerRef
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
)
;
~
StrongWorkerRef
(
)
;
}
;
class
ThreadSafeWorkerRef
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ThreadSafeWorkerRef
)
explicit
ThreadSafeWorkerRef
(
StrongWorkerRef
*
aRef
)
;
WorkerPrivate
*
Private
(
)
const
;
private
:
friend
class
StrongWorkerRef
;
~
ThreadSafeWorkerRef
(
)
;
RefPtr
<
StrongWorkerRef
>
mRef
;
}
;
class
IPCWorkerRef
final
:
public
WorkerRef
{
public
:
static
already_AddRefed
<
IPCWorkerRef
>
Create
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
std
:
:
function
<
void
(
)
>
&
&
aCallback
=
nullptr
)
;
WorkerPrivate
*
Private
(
)
const
;
private
:
IPCWorkerRef
(
WorkerPrivate
*
aWorkerPrivate
const
char
*
aName
)
;
~
IPCWorkerRef
(
)
;
}
;
template
<
class
ActorPtr
>
class
IPCWorkerRefHelper
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
IPCWorkerRefHelper
)
;
explicit
IPCWorkerRefHelper
(
ActorPtr
*
aActor
)
:
mActor
(
aActor
)
{
}
ActorPtr
*
Actor
(
)
const
{
return
mActor
;
}
private
:
~
IPCWorkerRefHelper
(
)
=
default
;
ActorPtr
*
mActor
;
}
;
}
}
#
endif
