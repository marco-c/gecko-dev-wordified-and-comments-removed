#
ifndef
mozilla_dom_workers_WorkerDebugger_h
#
define
mozilla_dom_workers_WorkerDebugger_h
#
include
"
mozilla
/
PerformanceTypes
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIWorkerDebugger
.
h
"
class
mozIDOMWindow
;
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
class
WorkerDebugger
:
public
nsIWorkerDebugger
{
class
ReportDebuggerErrorRunnable
;
class
PostDebuggerMessageRunnable
;
CheckedUnsafePtr
<
WorkerPrivate
>
mWorkerPrivate
;
bool
mIsInitialized
;
nsTArray
<
nsCOMPtr
<
nsIWorkerDebuggerListener
>
>
mListeners
;
public
:
explicit
WorkerDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIWORKERDEBUGGER
void
AssertIsOnParentThread
(
)
;
void
Close
(
)
;
void
PostMessageToDebugger
(
const
nsAString
&
aMessage
)
;
void
ReportErrorToDebugger
(
const
nsAString
&
aFilename
uint32_t
aLineno
const
nsAString
&
aMessage
)
;
RefPtr
<
PerformanceInfoPromise
>
ReportPerformanceInfo
(
)
;
private
:
virtual
~
WorkerDebugger
(
)
;
void
PostMessageToDebuggerOnMainThread
(
const
nsAString
&
aMessage
)
;
void
ReportErrorToDebuggerOnMainThread
(
const
nsAString
&
aFilename
uint32_t
aLineno
const
nsAString
&
aMessage
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
DedicatedWorkerWindow
(
)
;
}
;
}
}
#
endif
