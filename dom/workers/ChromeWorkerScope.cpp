#
include
"
ChromeWorkerScope
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
MemoryFunctions
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
WorkerPrivate
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
#
ifdef
BUILD_CTYPES
char
*
UnicodeToNative
(
JSContext
*
aCx
const
char16_t
*
aSource
size_t
aSourceLen
)
{
nsDependentSubstring
unicode
(
aSource
aSourceLen
)
;
nsAutoCString
native
;
if
(
NS_FAILED
(
NS_CopyUnicodeToNative
(
unicode
native
)
)
)
{
JS_ReportErrorASCII
(
aCx
"
Could
not
convert
string
to
native
charset
!
"
)
;
return
nullptr
;
}
char
*
result
=
static_cast
<
char
*
>
(
JS_malloc
(
aCx
native
.
Length
(
)
+
1
)
)
;
if
(
!
result
)
{
return
nullptr
;
}
memcpy
(
result
native
.
get
(
)
native
.
Length
(
)
)
;
result
[
native
.
Length
(
)
]
=
0
;
return
result
;
}
#
endif
}
bool
DefineChromeWorkerFunctions
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
{
#
ifdef
BUILD_CTYPES
{
JS
:
:
Rooted
<
JS
:
:
Value
>
ctypes
(
aCx
)
;
if
(
!
JS_InitCTypesClass
(
aCx
aGlobal
)
|
|
!
JS_GetProperty
(
aCx
aGlobal
"
ctypes
"
&
ctypes
)
)
{
return
false
;
}
static
const
JSCTypesCallbacks
callbacks
=
{
UnicodeToNative
}
;
JS_SetCTypesCallbacks
(
ctypes
.
toObjectOrNull
(
)
&
callbacks
)
;
}
#
endif
return
true
;
}
}
}
