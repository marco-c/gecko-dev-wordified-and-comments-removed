#
ifndef
mozilla_dom_workers_serviceworkerjob_h
#
define
mozilla_dom_workers_serviceworkerjob_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
namespace
workers
{
class
ServiceWorkerJob2
{
public
:
class
Callback
{
public
:
virtual
void
JobFinished
(
ServiceWorkerJob2
*
aJob
ErrorResult
&
aStatus
)
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
=
0
;
}
;
enum
class
Type
{
Register
Update
Unregister
}
;
enum
class
State
{
Initial
Started
Finished
}
;
Type
GetType
(
)
const
;
State
GetState
(
)
const
;
bool
Canceled
(
)
const
;
bool
IsEquivalentTo
(
ServiceWorkerJob2
*
aJob
)
const
;
void
AppendResultCallback
(
Callback
*
aCallback
)
;
void
StealResultCallbacksFrom
(
ServiceWorkerJob2
*
aJob
)
;
void
Start
(
Callback
*
aFinalCallback
)
;
void
Cancel
(
)
;
protected
:
ServiceWorkerJob2
(
Type
aType
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
const
nsACString
&
aScriptSpec
)
;
virtual
~
ServiceWorkerJob2
(
)
;
void
InvokeResultCallbacks
(
ErrorResult
&
aRv
)
;
void
InvokeResultCallbacks
(
nsresult
aRv
)
;
void
Finish
(
ErrorResult
&
aRv
)
;
void
Finish
(
nsresult
aRv
)
;
virtual
void
AsyncExecute
(
)
=
0
;
const
Type
mType
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
const
nsCString
mScope
;
const
nsCString
mScriptSpec
;
private
:
RefPtr
<
Callback
>
mFinalCallback
;
nsTArray
<
RefPtr
<
Callback
>
>
mResultCallbackList
;
State
mState
;
bool
mCanceled
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServiceWorkerJob2
)
}
;
}
}
}
#
endif
