#
ifndef
mozilla_dom_Worker_h
#
define
mozilla_dom_Worker_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
DebuggerNotificationBinding
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
ifdef
XP_WIN
#
undef
PostMessage
#
endif
namespace
mozilla
:
:
dom
{
class
EventWithOptionsRunnable
;
struct
StructuredSerializeOptions
;
struct
WorkerOptions
;
class
WorkerPrivate
;
class
TrustedScriptURLOrUSVString
;
class
Worker
:
public
DOMEventTargetHelper
public
SupportsWeakPtr
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
Worker
DOMEventTargetHelper
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
already_AddRefed
<
Worker
>
Constructor
(
const
GlobalObject
&
aGlobal
const
TrustedScriptURLOrUSVString
&
aScriptURL
const
WorkerOptions
&
aOptions
ErrorResult
&
aRv
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
Maybe
<
EventCallbackDebuggerNotificationType
>
GetDebuggerNotificationType
(
)
const
override
{
return
Some
(
EventCallbackDebuggerNotificationType
:
:
Worker
)
;
}
bool
IsEligibleForMessaging
(
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferable
ErrorResult
&
aRv
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
StructuredSerializeOptions
&
aOptions
ErrorResult
&
aRv
)
;
void
PostEventWithOptions
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aOptions
const
Sequence
<
JSObject
*
>
&
aTransferable
EventWithOptionsRunnable
*
aRunnable
ErrorResult
&
aRv
)
;
void
Terminate
(
)
;
IMPL_EVENT_HANDLER
(
error
)
IMPL_EVENT_HANDLER
(
message
)
IMPL_EVENT_HANDLER
(
messageerror
)
protected
:
Worker
(
nsIGlobalObject
*
aGlobalObject
already_AddRefed
<
WorkerPrivate
>
aWorkerPrivate
)
;
~
Worker
(
)
;
friend
class
EventWithOptionsRunnable
;
RefPtr
<
WorkerPrivate
>
mWorkerPrivate
;
}
;
}
#
endif
