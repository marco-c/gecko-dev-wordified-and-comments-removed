#
ifndef
mozilla_dom_workers_jsexecutionmanager_h__
#
define
mozilla_dom_workers_jsexecutionmanager_h__
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WorkerStatus
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsICancelableRunnable
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
deque
>
struct
JSContext
;
class
nsIEventTarget
;
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
AutoRequestJSThreadExecution
;
class
AutoYieldJSThreadExecution
;
class
JSExecutionManager
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
JSExecutionManager
)
explicit
JSExecutionManager
(
int32_t
aMaxRunning
=
1
)
:
mMaxRunning
(
aMaxRunning
)
{
}
enum
class
RequestState
{
Granted
ExecutingAlready
}
;
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
JSExecutionManager
*
GetSABSerializationManager
(
)
;
private
:
friend
class
AutoRequestJSThreadExecution
;
friend
class
AutoYieldJSThreadExecution
;
~
JSExecutionManager
(
)
=
default
;
RequestState
RequestJSThreadExecution
(
)
;
void
YieldJSThreadExecution
(
)
;
bool
YieldJSThreadExecutionIfGranted
(
)
;
RequestState
RequestJSThreadExecutionMainThread
(
)
;
static
JSExecutionManager
*
mCurrentMTManager
;
std
:
:
deque
<
WorkerPrivate
*
>
mExecutionQueue
;
int32_t
mRunning
=
0
;
int32_t
mMaxRunning
=
1
;
Mutex
mExecutionQueueMutex
=
Mutex
{
"
JSExecutionManager
:
:
sExecutionQueueMutex
"
}
;
CondVar
mExecutionQueueCondVar
=
CondVar
{
mExecutionQueueMutex
"
JSExecutionManager
:
:
sExecutionQueueMutex
"
}
;
bool
mMainThreadIsExecuting
=
false
;
bool
mMainThreadAwaitingExecution
=
false
;
}
;
class
MOZ_STACK_CLASS
AutoRequestJSThreadExecution
{
public
:
explicit
AutoRequestJSThreadExecution
(
nsIGlobalObject
*
aGlobalObject
bool
aIsMainThread
)
;
~
AutoRequestJSThreadExecution
(
)
{
if
(
mExecutionGrantingManager
)
{
mExecutionGrantingManager
-
>
YieldJSThreadExecution
(
)
;
}
if
(
mIsMainThread
)
{
if
(
mOldGrantingManager
)
{
mOldGrantingManager
-
>
RequestJSThreadExecution
(
)
;
}
JSExecutionManager
:
:
mCurrentMTManager
=
mOldGrantingManager
;
}
}
private
:
RefPtr
<
JSExecutionManager
>
mExecutionGrantingManager
;
RefPtr
<
JSExecutionManager
>
mOldGrantingManager
;
bool
mIsMainThread
;
}
;
class
MOZ_STACK_CLASS
AutoYieldJSThreadExecution
{
public
:
AutoYieldJSThreadExecution
(
)
;
~
AutoYieldJSThreadExecution
(
)
{
if
(
mExecutionGrantingManager
)
{
mExecutionGrantingManager
-
>
RequestJSThreadExecution
(
)
;
if
(
NS_IsMainThread
(
)
)
{
JSExecutionManager
:
:
mCurrentMTManager
=
mExecutionGrantingManager
;
}
}
}
private
:
RefPtr
<
JSExecutionManager
>
mExecutionGrantingManager
;
}
;
}
}
#
endif
