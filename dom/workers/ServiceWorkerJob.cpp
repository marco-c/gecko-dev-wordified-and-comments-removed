#
include
"
ServiceWorkerJob
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Workers
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
ServiceWorkerJob2
:
:
Type
ServiceWorkerJob2
:
:
GetType
(
)
const
{
return
mType
;
}
ServiceWorkerJob2
:
:
State
ServiceWorkerJob2
:
:
GetState
(
)
const
{
return
mState
;
}
bool
ServiceWorkerJob2
:
:
Canceled
(
)
const
{
return
mCanceled
;
}
bool
ServiceWorkerJob2
:
:
IsEquivalentTo
(
ServiceWorkerJob2
*
aJob
)
const
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
aJob
)
;
return
mType
=
=
aJob
-
>
mType
&
&
mScope
.
Equals
(
aJob
-
>
mScope
)
&
&
mScriptSpec
.
Equals
(
aJob
-
>
mScriptSpec
)
&
&
mPrincipal
-
>
Equals
(
aJob
-
>
mPrincipal
)
;
}
void
ServiceWorkerJob2
:
:
AppendResultCallback
(
Callback
*
aCallback
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mState
!
=
State
:
:
Finished
)
;
MOZ_ASSERT
(
aCallback
)
;
MOZ_ASSERT
(
mFinalCallback
!
=
aCallback
)
;
MOZ_ASSERT
(
!
mResultCallbackList
.
Contains
(
aCallback
)
)
;
mResultCallbackList
.
AppendElement
(
aCallback
)
;
}
void
ServiceWorkerJob2
:
:
StealResultCallbacksFrom
(
ServiceWorkerJob2
*
aJob
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
aJob
)
;
MOZ_ASSERT
(
aJob
-
>
mState
=
=
State
:
:
Initial
)
;
nsTArray
<
RefPtr
<
Callback
>
>
callbackList
;
callbackList
.
SwapElements
(
aJob
-
>
mResultCallbackList
)
;
for
(
RefPtr
<
Callback
>
&
callback
:
callbackList
)
{
AppendResultCallback
(
callback
)
;
}
}
void
ServiceWorkerJob2
:
:
Start
(
Callback
*
aFinalCallback
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
!
mCanceled
)
;
MOZ_ASSERT
(
aFinalCallback
)
;
MOZ_ASSERT
(
!
mFinalCallback
)
;
MOZ_ASSERT
(
!
mResultCallbackList
.
Contains
(
aFinalCallback
)
)
;
mFinalCallback
=
aFinalCallback
;
MOZ_ASSERT
(
mState
=
=
State
:
:
Initial
)
;
mState
=
State
:
:
Started
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableMethod
(
this
&
ServiceWorkerJob2
:
:
AsyncExecute
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
!
swm
-
>
HasBackgroundActor
(
)
)
{
swm
-
>
AppendPendingOperation
(
runnable
)
;
return
;
}
MOZ_ALWAYS_TRUE
(
NS_SUCCEEDED
(
NS_DispatchToMainThread
(
runnable
.
forget
(
)
)
)
)
;
}
void
ServiceWorkerJob2
:
:
Cancel
(
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
!
mCanceled
)
;
mCanceled
=
true
;
}
ServiceWorkerJob2
:
:
ServiceWorkerJob2
(
Type
aType
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
const
nsACString
&
aScriptSpec
)
:
mType
(
aType
)
mPrincipal
(
aPrincipal
)
mScope
(
aScope
)
mScriptSpec
(
aScriptSpec
)
mState
(
State
:
:
Initial
)
mCanceled
(
false
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mPrincipal
)
;
MOZ_ASSERT
(
!
mScope
.
IsEmpty
(
)
)
;
}
ServiceWorkerJob2
:
:
~
ServiceWorkerJob2
(
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mState
!
=
State
:
:
Started
)
;
}
void
ServiceWorkerJob2
:
:
InvokeResultCallbacks
(
ErrorResult
&
aRv
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mState
=
=
State
:
:
Started
)
;
nsTArray
<
RefPtr
<
Callback
>
>
callbackList
;
callbackList
.
SwapElements
(
mResultCallbackList
)
;
for
(
RefPtr
<
Callback
>
&
callback
:
callbackList
)
{
ErrorResult
rv
;
aRv
.
CloneTo
(
rv
)
;
callback
-
>
JobFinished
(
this
rv
)
;
rv
.
SuppressException
(
)
;
}
}
void
ServiceWorkerJob2
:
:
InvokeResultCallbacks
(
nsresult
aRv
)
{
ErrorResult
converted
(
aRv
)
;
InvokeResultCallbacks
(
converted
)
;
}
void
ServiceWorkerJob2
:
:
Finish
(
ErrorResult
&
aRv
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
mState
=
=
State
:
:
Started
)
;
if
(
aRv
.
Failed
(
)
&
&
!
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_SECURITY_ERR
)
&
&
!
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_TYPE_ERR
)
&
&
!
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
)
{
aRv
.
SuppressException
(
)
;
NS_ConvertUTF8toUTF16
scriptSpec
(
mScriptSpec
)
;
NS_ConvertUTF8toUTF16
scope
(
mScope
)
;
aRv
.
ThrowTypeError
<
MSG_SW_INSTALL_ERROR
>
(
scriptSpec
scope
)
;
}
RefPtr
<
ServiceWorkerJob2
>
kungFuDeathGrip
=
this
;
InvokeResultCallbacks
(
aRv
)
;
mState
=
State
:
:
Finished
;
mFinalCallback
-
>
JobFinished
(
this
aRv
)
;
mFinalCallback
=
nullptr
;
aRv
.
SuppressException
(
)
;
NS_ReleaseOnMainThread
(
kungFuDeathGrip
.
forget
(
)
true
)
;
}
void
ServiceWorkerJob2
:
:
Finish
(
nsresult
aRv
)
{
ErrorResult
converted
(
aRv
)
;
Finish
(
converted
)
;
}
}
}
}
