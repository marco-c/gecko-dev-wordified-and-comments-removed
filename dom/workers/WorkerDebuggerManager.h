#
ifndef
mozilla_dom_workers_workerdebuggermanager_h
#
define
mozilla_dom_workers_workerdebuggermanager_h
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIWorkerDebuggerManager
.
h
"
#
include
"
nsTArray
.
h
"
#
define
WORKERDEBUGGERMANAGER_CID
\
{
0x62ec8731
0x55ad
0x4246
{
0xb2
0xea
0xf2
0x6c
0x1f
0xe1
0x9d
0x2d
}
}
#
define
WORKERDEBUGGERMANAGER_CONTRACTID
\
"
mozilla
.
org
/
dom
/
workers
/
workerdebuggermanager
;
1
"
namespace
mozilla
:
:
dom
{
class
WorkerDebugger
;
class
WorkerPrivate
;
class
WorkerDebuggerManager
final
:
public
nsIObserver
public
nsIWorkerDebuggerManager
{
Mutex
mMutex
MOZ_UNANNOTATED
;
nsTArray
<
nsCOMPtr
<
nsIWorkerDebuggerManagerListener
>
>
mListeners
;
nsTArray
<
RefPtr
<
WorkerDebugger
>
>
mDebuggers
;
public
:
static
already_AddRefed
<
WorkerDebuggerManager
>
GetInstance
(
)
;
static
WorkerDebuggerManager
*
GetOrCreate
(
)
;
static
WorkerDebuggerManager
*
Get
(
)
;
WorkerDebuggerManager
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIWORKERDEBUGGERMANAGER
nsresult
Init
(
)
;
void
Shutdown
(
)
;
void
RegisterDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
;
void
RegisterDebuggerMainThread
(
WorkerPrivate
*
aWorkerPrivate
bool
aNotifyListeners
)
;
void
UnregisterDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
;
void
UnregisterDebuggerMainThread
(
WorkerPrivate
*
aWorkerPrivate
)
;
uint32_t
GetDebuggersLength
(
)
const
;
WorkerDebugger
*
GetDebuggerAt
(
uint32_t
aIndex
)
const
;
private
:
nsTArray
<
nsCOMPtr
<
nsIWorkerDebuggerManagerListener
>
>
CloneListeners
(
)
;
virtual
~
WorkerDebuggerManager
(
)
;
}
;
inline
nsresult
RegisterWorkerDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
{
WorkerDebuggerManager
*
manager
;
if
(
NS_IsMainThread
(
)
)
{
manager
=
WorkerDebuggerManager
:
:
GetOrCreate
(
)
;
if
(
!
manager
)
{
NS_WARNING
(
"
Failed
to
create
worker
debugger
manager
!
"
)
;
return
NS_ERROR_FAILURE
;
}
}
else
{
manager
=
WorkerDebuggerManager
:
:
Get
(
)
;
}
manager
-
>
RegisterDebugger
(
aWorkerPrivate
)
;
return
NS_OK
;
}
inline
nsresult
UnregisterWorkerDebugger
(
WorkerPrivate
*
aWorkerPrivate
)
{
WorkerDebuggerManager
*
manager
;
if
(
NS_IsMainThread
(
)
)
{
manager
=
WorkerDebuggerManager
:
:
GetOrCreate
(
)
;
if
(
!
manager
)
{
NS_WARNING
(
"
Failed
to
create
worker
debugger
manager
!
"
)
;
return
NS_ERROR_FAILURE
;
}
}
else
{
manager
=
WorkerDebuggerManager
:
:
Get
(
)
;
}
manager
-
>
UnregisterDebugger
(
aWorkerPrivate
)
;
return
NS_OK
;
}
}
#
endif
