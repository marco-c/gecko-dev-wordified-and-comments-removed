#
ifndef
mozilla_dom_workers_WorkerError_h
#
define
mozilla_dom_workers_WorkerError_h
#
include
"
mozilla
/
dom
/
SerializedStackHolder
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
jsapi
.
h
"
namespace
mozilla
{
class
DOMEventTargetHelper
;
namespace
dom
{
class
ErrorData
;
class
WorkerErrorBase
{
public
:
nsString
mMessage
;
nsCString
mFilename
;
uint32_t
mLineNumber
=
0
;
uint32_t
mColumnNumber
=
0
;
uint32_t
mErrorNumber
=
0
;
WorkerErrorBase
(
)
=
default
;
void
AssignErrorBase
(
JSErrorBase
*
aReport
)
;
}
;
class
WorkerErrorNote
:
public
WorkerErrorBase
{
public
:
void
AssignErrorNote
(
JSErrorNotes
:
:
Note
*
aNote
)
;
}
;
class
WorkerPrivate
;
class
WorkerErrorReport
:
public
WorkerErrorBase
public
SerializedStackHolder
{
public
:
bool
mIsWarning
;
JSExnType
mExnType
;
bool
mMutedError
;
nsTArray
<
WorkerErrorNote
>
mNotes
;
WorkerErrorReport
(
)
;
void
AssignErrorReport
(
JSErrorReport
*
aReport
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
void
ReportError
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
bool
aFireAtScope
DOMEventTargetHelper
*
aTarget
UniquePtr
<
WorkerErrorReport
>
aReport
uint64_t
aInnerWindowId
JS
:
:
Handle
<
JS
:
:
Value
>
aException
=
JS
:
:
NullHandleValue
)
;
static
void
LogErrorToConsole
(
JSContext
*
aCx
WorkerErrorReport
&
aReport
uint64_t
aInnerWindowId
)
;
static
void
LogErrorToConsole
(
const
mozilla
:
:
dom
:
:
ErrorData
&
aReport
uint64_t
aInnerWindowId
JS
:
:
Handle
<
JSObject
*
>
aStack
=
nullptr
JS
:
:
Handle
<
JSObject
*
>
aStackGlobal
=
nullptr
)
;
static
void
LogErrorToConsole
(
const
nsAString
&
aMessage
)
;
static
void
CreateAndDispatchGenericErrorRunnableToParent
(
WorkerPrivate
*
aWorkerPrivate
)
;
}
;
}
}
#
endif
