#
ifndef
mozilla_dom_workers_WorkerHolder_h
#
define
mozilla_dom_workers_WorkerHolder_h
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
enum
WorkerStatus
{
Pending
=
0
Running
Closing
Terminating
Canceling
Killing
Dead
}
;
class
WorkerHolder
{
public
:
enum
Behavior
{
AllowIdleShutdownStart
PreventIdleShutdownStart
}
;
explicit
WorkerHolder
(
const
char
*
aName
Behavior
aBehavior
=
PreventIdleShutdownStart
)
;
virtual
~
WorkerHolder
(
)
;
bool
HoldWorker
(
WorkerPrivate
*
aWorkerPrivate
WorkerStatus
aFailStatus
)
;
void
ReleaseWorker
(
)
;
virtual
bool
Notify
(
WorkerStatus
aStatus
)
=
0
;
Behavior
GetBehavior
(
)
const
;
const
char
*
Name
(
)
const
{
return
mName
;
}
protected
:
void
ReleaseWorkerInternal
(
)
;
WorkerPrivate
*
MOZ_NON_OWNING_REF
mWorkerPrivate
;
private
:
void
AssertIsOwningThread
(
)
const
;
const
Behavior
mBehavior
;
void
*
mThread
;
const
char
*
mName
;
}
;
}
}
#
endif
