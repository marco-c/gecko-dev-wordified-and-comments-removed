#
include
"
ServiceWorkerUnregisterJob
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
workers
{
ServiceWorkerUnregisterJob2
:
:
ServiceWorkerUnregisterJob2
(
nsIPrincipal
*
aPrincipal
const
nsACString
&
aScope
bool
aSendToParent
)
:
ServiceWorkerJob2
(
Type
:
:
Unregister
aPrincipal
aScope
EmptyCString
(
)
)
mResult
(
false
)
mSendToParent
(
aSendToParent
)
{
}
bool
ServiceWorkerUnregisterJob2
:
:
GetResult
(
)
const
{
AssertIsOnMainThread
(
)
;
return
mResult
;
}
ServiceWorkerUnregisterJob2
:
:
~
ServiceWorkerUnregisterJob2
(
)
{
}
void
ServiceWorkerUnregisterJob2
:
:
AsyncExecute
(
)
{
AssertIsOnMainThread
(
)
;
if
(
Canceled
(
)
)
{
Finish
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
;
}
PrincipalInfo
principalInfo
;
nsresult
rv
=
PrincipalToPrincipalInfo
(
mPrincipal
&
principalInfo
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Finish
(
NS_OK
)
;
return
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
nsAutoCString
scopeKey
;
rv
=
swm
-
>
PrincipalToScopeKey
(
mPrincipal
scopeKey
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Finish
(
NS_OK
)
;
return
;
}
ServiceWorkerManager
:
:
RegistrationDataPerPrincipal
*
data
;
if
(
!
swm
-
>
mRegistrationInfos
.
Get
(
scopeKey
&
data
)
)
{
Finish
(
NS_OK
)
;
return
;
}
RefPtr
<
ServiceWorkerRegistrationInfo
>
registration
;
if
(
!
data
-
>
mInfos
.
Get
(
mScope
getter_AddRefs
(
registration
)
)
)
{
Finish
(
NS_OK
)
;
return
;
}
MOZ_ASSERT
(
registration
)
;
if
(
mSendToParent
&
&
!
registration
-
>
mPendingUninstall
&
&
swm
-
>
mActor
)
{
swm
-
>
mActor
-
>
SendUnregister
(
principalInfo
NS_ConvertUTF8toUTF16
(
mScope
)
)
;
}
registration
-
>
mPendingUninstall
=
true
;
mResult
=
true
;
InvokeResultCallbacks
(
NS_OK
)
;
if
(
!
registration
-
>
IsControllingDocuments
(
)
)
{
if
(
!
registration
-
>
mPendingUninstall
)
{
Finish
(
NS_OK
)
;
return
;
}
swm
-
>
RemoveRegistration
(
registration
)
;
}
Finish
(
NS_OK
)
;
}
}
}
}
