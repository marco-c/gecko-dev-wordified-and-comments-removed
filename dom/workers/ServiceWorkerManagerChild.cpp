#
include
"
ServiceWorkerManagerChild
.
h
"
#
include
"
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
workers
{
mozilla
:
:
ipc
:
:
IPCResult
ServiceWorkerManagerChild
:
:
RecvNotifyRegister
(
const
ServiceWorkerRegistrationData
&
aData
)
{
if
(
mShuttingDown
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_ASSERT
(
swm
)
;
swm
-
>
LoadRegistration
(
aData
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ServiceWorkerManagerChild
:
:
RecvNotifySoftUpdate
(
const
OriginAttributes
&
aOriginAttributes
const
nsString
&
aScope
)
{
if
(
mShuttingDown
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_ASSERT
(
swm
)
;
swm
-
>
SoftUpdate
(
aOriginAttributes
NS_ConvertUTF16toUTF8
(
aScope
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ServiceWorkerManagerChild
:
:
RecvNotifyUnregister
(
const
PrincipalInfo
&
aPrincipalInfo
const
nsString
&
aScope
)
{
if
(
mShuttingDown
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_ASSERT
(
swm
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
PrincipalInfoToPrincipal
(
aPrincipalInfo
)
;
if
(
NS_WARN_IF
(
!
principal
)
)
{
return
IPC_OK
(
)
;
}
nsresult
rv
=
swm
-
>
NotifyUnregister
(
principal
aScope
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ServiceWorkerManagerChild
:
:
RecvNotifyRemove
(
const
nsCString
&
aHost
)
{
if
(
mShuttingDown
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_ASSERT
(
swm
)
;
swm
-
>
Remove
(
aHost
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ServiceWorkerManagerChild
:
:
RecvNotifyRemoveAll
(
)
{
if
(
mShuttingDown
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_ASSERT
(
swm
)
;
swm
-
>
RemoveAll
(
)
;
return
IPC_OK
(
)
;
}
}
}
}
