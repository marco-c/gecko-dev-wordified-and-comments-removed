"
use
strict
"
;
const
{
PromiseMessage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseMessage
.
jsm
"
)
;
const
{
ManifestProcessor
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ManifestProcessor
.
jsm
"
)
;
var
ManifestObtainer
=
{
async
browserObtainManifest
(
aBrowser
)
{
const
msgKey
=
"
DOM
:
ManifestObtainer
:
Obtain
"
;
if
(
!
isXULBrowser
(
aBrowser
)
)
{
throw
new
TypeError
(
"
Invalid
input
.
Expected
XUL
browser
.
"
)
;
}
const
mm
=
aBrowser
.
messageManager
;
const
{
data
:
{
success
result
}
}
=
await
PromiseMessage
.
send
(
mm
msgKey
)
;
if
(
!
success
)
{
const
error
=
toError
(
result
)
;
throw
error
;
}
return
result
;
}
async
contentObtainManifest
(
aContent
)
{
if
(
!
aContent
|
|
isXULBrowser
(
aContent
)
)
{
throw
new
TypeError
(
"
Invalid
input
.
Expected
a
DOM
Window
.
"
)
;
}
let
manifest
;
try
{
manifest
=
await
fetchManifest
(
aContent
)
;
}
catch
(
err
)
{
throw
err
;
}
return
manifest
;
}
}
;
function
toError
(
aErrorClone
)
{
let
error
;
switch
(
aErrorClone
.
name
)
{
case
"
TypeError
"
:
error
=
new
TypeError
(
)
;
break
;
default
:
error
=
new
Error
(
)
;
}
Object
.
getOwnPropertyNames
(
aErrorClone
)
.
forEach
(
name
=
>
error
[
name
]
=
aErrorClone
[
name
]
)
;
return
error
;
}
function
isXULBrowser
(
aBrowser
)
{
if
(
!
aBrowser
|
|
!
aBrowser
.
namespaceURI
|
|
!
aBrowser
.
localName
)
{
return
false
;
}
const
XUL
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
return
(
aBrowser
.
namespaceURI
=
=
=
XUL
&
&
aBrowser
.
localName
=
=
=
"
browser
"
)
;
}
const
processResponse
=
async
function
(
aResp
aContentWindow
)
{
const
badStatus
=
aResp
.
status
<
200
|
|
aResp
.
status
>
=
300
;
if
(
aResp
.
type
=
=
=
"
error
"
|
|
badStatus
)
{
const
msg
=
Fetch
error
:
{
aResp
.
status
}
-
{
aResp
.
statusText
}
at
{
aResp
.
url
}
;
throw
new
Error
(
msg
)
;
}
const
text
=
await
aResp
.
text
(
)
;
const
args
=
{
jsonText
:
text
manifestURL
:
aResp
.
url
docURL
:
aContentWindow
.
location
.
href
}
;
const
manifest
=
ManifestProcessor
.
process
(
args
)
;
return
manifest
;
}
;
const
fetchManifest
=
async
function
(
aWindow
)
{
if
(
!
aWindow
|
|
aWindow
.
top
!
=
=
aWindow
)
{
let
msg
=
"
Window
must
be
a
top
-
level
browsing
context
.
"
;
throw
new
Error
(
msg
)
;
}
const
elem
=
aWindow
.
document
.
querySelector
(
"
link
[
rel
~
=
'
manifest
'
]
"
)
;
if
(
!
elem
|
|
!
elem
.
getAttribute
(
"
href
"
)
)
{
let
msg
=
No
manifest
to
fetch
at
{
aWindow
.
location
}
;
throw
new
Error
(
msg
)
;
}
const
manifestURL
=
new
aWindow
.
URL
(
elem
.
href
elem
.
baseURI
)
;
const
reqInit
=
{
mode
:
"
cors
"
}
;
if
(
elem
.
crossOrigin
=
=
=
"
use
-
credentials
"
)
{
reqInit
.
credentials
=
"
include
"
;
}
const
request
=
new
aWindow
.
Request
(
manifestURL
reqInit
)
;
request
.
overrideContentPolicyType
(
Ci
.
nsIContentPolicy
.
TYPE_WEB_MANIFEST
)
;
let
response
;
try
{
response
=
await
aWindow
.
fetch
(
request
)
;
}
catch
(
err
)
{
throw
err
;
}
const
manifest
=
await
processResponse
(
response
aWindow
)
;
return
manifest
;
}
;
var
EXPORTED_SYMBOLS
=
[
"
ManifestObtainer
"
]
;
