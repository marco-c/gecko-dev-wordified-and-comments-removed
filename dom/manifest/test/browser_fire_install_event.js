"
use
strict
"
;
const
{
PromiseMessage
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PromiseMessage
.
jsm
"
{
}
)
;
const
testPath
=
"
/
browser
/
dom
/
manifest
/
test
/
file_reg_install_event
.
html
"
;
const
defaultURL
=
new
URL
(
"
http
:
/
/
example
.
org
/
browser
/
dom
/
manifest
/
test
/
file_testserver
.
sjs
"
)
;
const
testURL
=
new
URL
(
defaultURL
)
;
testURL
.
searchParams
.
append
(
"
file
"
testPath
)
;
function
enableOnInstallPref
(
)
{
const
ops
=
{
"
set
"
:
[
[
"
dom
.
manifest
.
oninstall
"
true
]
]
}
;
return
SpecialPowers
.
pushPrefEnv
(
ops
)
;
}
function
*
theTest
(
aBrowser
)
{
aBrowser
.
allowEvents
=
true
;
let
waitForInstall
=
ContentTask
.
spawn
(
aBrowser
null
function
*
(
)
{
yield
ContentTaskUtils
.
waitForEvent
(
content
.
window
"
install
"
)
;
}
)
;
const
{
data
:
{
success
}
}
=
yield
PromiseMessage
.
send
(
aBrowser
.
messageManager
"
DOM
:
Manifest
:
FireInstallEvent
"
)
;
ok
(
success
"
message
sent
and
received
successfully
.
"
)
;
try
{
yield
waitForInstall
;
ok
(
true
"
Install
event
fired
"
)
;
}
catch
(
err
)
{
ok
(
false
"
Install
event
didn
'
t
fire
:
"
+
err
.
message
)
;
}
}
add_task
(
function
*
(
)
{
yield
enableOnInstallPref
(
)
;
let
tabOptions
=
{
gBrowser
:
gBrowser
url
:
testURL
.
href
}
;
yield
BrowserTestUtils
.
withNewTab
(
tabOptions
theTest
)
;
}
)
;
