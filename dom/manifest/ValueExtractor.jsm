"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
InspectorUtils
"
]
)
;
function
ValueExtractor
(
aConsole
aBundle
)
{
this
.
console
=
aConsole
;
this
.
domBundle
=
aBundle
;
}
ValueExtractor
.
prototype
=
{
extractValue
(
{
expectedType
object
objectName
property
trim
}
)
{
const
value
=
object
[
property
]
;
const
isArray
=
Array
.
isArray
(
value
)
;
const
type
=
(
isArray
)
?
"
array
"
:
typeof
value
;
if
(
type
!
=
=
expectedType
)
{
if
(
type
!
=
=
"
undefined
"
)
{
this
.
console
.
warn
(
this
.
domBundle
.
formatStringFromName
(
"
ManifestInvalidType
"
[
objectName
property
expectedType
]
3
)
)
;
}
return
undefined
;
}
const
shouldTrim
=
expectedType
=
=
=
"
string
"
&
&
value
&
&
trim
;
if
(
shouldTrim
)
{
return
value
.
trim
(
)
|
|
undefined
;
}
return
value
;
}
extractColorValue
(
spec
)
{
const
value
=
this
.
extractValue
(
spec
)
;
let
color
;
if
(
InspectorUtils
.
isValidCSSColor
(
value
)
)
{
color
=
value
;
}
else
if
(
value
)
{
this
.
console
.
warn
(
this
.
domBundle
.
formatStringFromName
(
"
ManifestInvalidCSSColor
"
[
spec
.
property
value
]
2
)
)
;
}
return
color
;
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
ValueExtractor
"
]
;
