#
ifndef
GPU_UTIL_H_
#
define
GPU_UTIL_H_
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
dom
/
WebGPUBinding
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
struct
GPUComputePassDescriptor
;
enum
class
PredefinedColorSpace
:
uint8_t
;
template
<
typename
T
>
class
Sequence
;
using
GPUExtent3D
=
RangeEnforcedUnsignedLongSequenceOrGPUExtent3DDict
;
using
OwningGPUExtent3D
=
OwningRangeEnforcedUnsignedLongSequenceOrGPUExtent3DDict
;
}
namespace
webgpu
{
namespace
ffi
{
struct
WGPUExtent3d
;
}
void
ConvertExtent3DToFFI
(
const
dom
:
:
GPUExtent3D
&
aExtent
ffi
:
:
WGPUExtent3d
*
aExtentFFI
)
;
void
ConvertExtent3DToFFI
(
const
dom
:
:
OwningGPUExtent3D
&
aExtent
ffi
:
:
WGPUExtent3d
*
aExtentFFI
)
;
ffi
:
:
WGPUExtent3d
ConvertExtent
(
const
dom
:
:
GPUExtent3D
&
aExtent
)
;
ffi
:
:
WGPUExtent3d
ConvertExtent
(
const
dom
:
:
OwningGPUExtent3D
&
aExtent
)
;
ffi
:
:
WGPUCompareFunction
ConvertCompareFunction
(
const
dom
:
:
GPUCompareFunction
&
aCompare
)
;
ffi
:
:
WGPUTextureFormat
ConvertTextureFormat
(
const
dom
:
:
GPUTextureFormat
&
aFormat
)
;
ffi
:
:
WGPUTextureAspect
ConvertTextureAspect
(
const
dom
:
:
GPUTextureAspect
&
aAspect
)
;
ffi
:
:
WGPUVertexFormat
ConvertVertexFormat
(
const
dom
:
:
GPUVertexFormat
&
aFormat
)
;
ffi
:
:
WGPUMultisampleState
ConvertMultisampleState
(
const
dom
:
:
GPUMultisampleState
&
aDesc
)
;
ffi
:
:
WGPUBlendComponent
ConvertBlendComponent
(
const
dom
:
:
GPUBlendComponent
&
aDesc
)
;
ffi
:
:
WGPUStencilFaceState
ConvertStencilFaceState
(
const
dom
:
:
GPUStencilFaceState
&
aDesc
)
;
ffi
:
:
WGPUDepthStencilState
ConvertDepthStencilState
(
const
dom
:
:
GPUDepthStencilState
&
aDesc
)
;
ffi
:
:
WGPUPredefinedColorSpace
ConvertPredefinedColorSpace
(
const
dom
:
:
PredefinedColorSpace
&
aColorSpace
)
;
mozilla
:
:
Maybe
<
mozilla
:
:
Buffer
<
uint32_t
>
>
GetDynamicOffsetsFromArray
(
const
dom
:
:
Uint32Array
&
aDynamicOffsetsData
uint64_t
aDynamicOffsetsDataStart
uint64_t
aDynamicOffsetsDataLength
ErrorResult
&
aRv
)
;
}
}
#
endif
