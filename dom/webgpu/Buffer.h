#
ifndef
GPU_BUFFER_H_
#
define
GPU_BUFFER_H_
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
webgpu
/
WebGPUTypes
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
ObjectModel
.
h
"
#
include
"
mozilla
/
ipc
/
RawShmem
.
h
"
#
include
<
memory
>
namespace
mozilla
{
namespace
webgpu
{
struct
MappedView
;
}
}
template
<
>
struct
nsTArray_RelocationStrategy
<
mozilla
:
:
webgpu
:
:
MappedView
>
{
using
Type
=
nsTArray_RelocateUsingMoveConstructor
<
mozilla
:
:
webgpu
:
:
MappedView
>
;
}
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
struct
GPUBufferDescriptor
;
template
<
typename
T
>
class
Optional
;
enum
class
GPUBufferMapState
:
uint8_t
;
}
namespace
webgpu
{
class
Device
;
struct
MappedView
{
BufferAddress
mOffset
;
BufferAddress
mRangeEnd
;
JS
:
:
Heap
<
JSObject
*
>
mArrayBuffer
;
MappedView
(
BufferAddress
aOffset
BufferAddress
aRangeEnd
JSObject
*
aArrayBuffer
)
:
mOffset
(
aOffset
)
mRangeEnd
(
aRangeEnd
)
mArrayBuffer
(
aArrayBuffer
)
{
}
}
;
struct
MappedInfo
{
bool
mWritable
=
false
;
nsTArray
<
MappedView
>
mViews
;
BufferAddress
mOffset
;
BufferAddress
mSize
;
MappedInfo
(
)
=
default
;
MappedInfo
(
const
MappedInfo
&
)
=
delete
;
}
;
class
Buffer
final
:
public
ObjectBase
public
ChildOf
<
Device
>
{
public
:
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
Buffer
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
Buffer
)
GPU_DECL_JS_WRAP
(
Buffer
)
static
already_AddRefed
<
Buffer
>
Create
(
Device
*
aDevice
RawId
aDeviceId
const
dom
:
:
GPUBufferDescriptor
&
aDesc
ErrorResult
&
aRv
)
;
already_AddRefed
<
dom
:
:
Promise
>
MapAsync
(
uint32_t
aMode
uint64_t
aOffset
const
dom
:
:
Optional
<
uint64_t
>
&
aSize
ErrorResult
&
aRv
)
;
void
GetMappedRange
(
JSContext
*
aCx
uint64_t
aOffset
const
dom
:
:
Optional
<
uint64_t
>
&
aSize
JS
:
:
Rooted
<
JSObject
*
>
*
aObject
ErrorResult
&
aRv
)
;
void
Unmap
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
void
Destroy
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
const
RawId
mId
;
uint64_t
Size
(
)
const
{
return
mSize
;
}
uint32_t
Usage
(
)
const
{
return
mUsage
;
}
dom
:
:
GPUBufferMapState
MapState
(
)
const
;
private
:
Buffer
(
Device
*
const
aParent
RawId
aId
BufferAddress
aSize
uint32_t
aUsage
ipc
:
:
WritableSharedMemoryMapping
&
&
aShmem
)
;
virtual
~
Buffer
(
)
;
Device
&
GetDevice
(
)
{
return
*
mParent
;
}
void
Cleanup
(
)
;
void
UnmapArrayBuffers
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
void
RejectMapRequest
(
dom
:
:
Promise
*
aPromise
nsACString
&
message
)
;
void
AbortMapRequest
(
)
;
void
SetMapped
(
BufferAddress
aOffset
BufferAddress
aSize
bool
aWritable
)
;
const
BufferAddress
mSize
;
const
uint32_t
mUsage
;
nsString
mLabel
;
Maybe
<
MappedInfo
>
mMapped
;
RefPtr
<
dom
:
:
Promise
>
mMapRequest
;
std
:
:
shared_ptr
<
ipc
:
:
WritableSharedMemoryMapping
>
mShmem
;
}
;
}
}
#
endif
