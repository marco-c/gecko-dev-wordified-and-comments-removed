#
ifndef
GPU_Queue_H_
#
define
GPU_Queue_H_
#
include
"
nsWrapperCache
.
h
"
#
include
"
ObjectModel
.
h
"
#
include
"
mozilla
/
dom
/
BufferSourceBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
webgpu
/
WebGPUTypes
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
RangeEnforcedUnsignedLongSequenceOrGPUExtent3DDict
;
template
<
typename
T
>
class
Optional
;
template
<
typename
T
>
class
Sequence
;
struct
GPUCopyExternalImageDestInfo
;
struct
GPUCopyExternalImageSourceInfo
;
struct
GPUTexelCopyTextureInfo
;
struct
GPUTexelCopyBufferLayout
;
struct
TextureCopyView
;
struct
TextureDataLayout
;
using
GPUExtent3D
=
RangeEnforcedUnsignedLongSequenceOrGPUExtent3DDict
;
}
namespace
webgpu
{
class
Buffer
;
class
CommandBuffer
;
class
Device
;
class
Fence
;
class
Queue
final
:
public
ObjectBase
public
ChildOf
<
Device
>
{
public
:
GPU_DECL_CYCLE_COLLECTION
(
Queue
)
GPU_DECL_JS_WRAP
(
Queue
)
Queue
(
Device
*
const
aParent
WebGPUChild
*
aBridge
RawId
aId
)
;
void
Submit
(
const
dom
:
:
Sequence
<
OwningNonNull
<
CommandBuffer
>
>
&
aCommandBuffers
)
;
already_AddRefed
<
dom
:
:
Promise
>
OnSubmittedWorkDone
(
ErrorResult
&
aRv
)
;
void
WriteBuffer
(
const
Buffer
&
aBuffer
uint64_t
aBufferOffset
const
dom
:
:
AllowSharedBufferSource
&
data
uint64_t
aDataOffset
const
dom
:
:
Optional
<
uint64_t
>
&
aSize
ErrorResult
&
aRv
)
;
void
WriteTexture
(
const
dom
:
:
GPUTexelCopyTextureInfo
&
aDestination
const
dom
:
:
AllowSharedBufferSource
&
data
const
dom
:
:
GPUTexelCopyBufferLayout
&
aDataLayout
const
dom
:
:
GPUExtent3D
&
aSize
ErrorResult
&
aRv
)
;
void
CopyExternalImageToTexture
(
const
dom
:
:
GPUCopyExternalImageSourceInfo
&
aSource
const
dom
:
:
GPUCopyExternalImageDestInfo
&
aDestination
const
dom
:
:
GPUExtent3D
&
aCopySize
ErrorResult
&
aRv
)
;
private
:
virtual
~
Queue
(
)
;
void
Cleanup
(
)
{
}
RefPtr
<
WebGPUChild
>
mBridge
;
const
RawId
mId
;
public
:
}
;
}
}
#
endif
