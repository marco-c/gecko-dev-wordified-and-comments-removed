#
include
"
ExternalTextureMacIOSurface
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
MacIOSurface
.
h
"
#
include
"
mozilla
/
layers
/
ImageDataSerializer
.
h
"
namespace
mozilla
:
:
webgpu
{
UniquePtr
<
ExternalTextureMacIOSurface
>
ExternalTextureMacIOSurface
:
:
Create
(
const
uint32_t
aWidth
const
uint32_t
aHeight
const
struct
ffi
:
:
WGPUTextureFormat
aFormat
const
ffi
:
:
WGPUTextureUsages
aUsage
)
{
if
(
aFormat
.
tag
!
=
ffi
:
:
WGPUTextureFormat_Bgra8Unorm
)
{
gfxCriticalNoteOnce
<
<
"
Non
supported
format
:
"
<
<
aFormat
.
tag
;
return
nullptr
;
}
RefPtr
<
MacIOSurface
>
surface
=
MacIOSurface
:
:
CreateIOSurface
(
aWidth
aHeight
true
)
;
if
(
!
surface
)
{
return
nullptr
;
}
return
MakeUnique
<
ExternalTextureMacIOSurface
>
(
aWidth
aHeight
aFormat
aUsage
std
:
:
move
(
surface
)
)
;
}
ExternalTextureMacIOSurface
:
:
ExternalTextureMacIOSurface
(
const
uint32_t
aWidth
const
uint32_t
aHeight
const
struct
ffi
:
:
WGPUTextureFormat
aFormat
const
ffi
:
:
WGPUTextureUsages
aUsage
RefPtr
<
MacIOSurface
>
&
&
aSurface
)
:
ExternalTexture
(
aWidth
aHeight
aFormat
aUsage
)
mSurface
(
std
:
:
move
(
aSurface
)
)
{
}
ExternalTextureMacIOSurface
:
:
~
ExternalTextureMacIOSurface
(
)
{
}
void
*
ExternalTextureMacIOSurface
:
:
GetExternalTextureHandle
(
)
{
return
nullptr
;
}
uint32_t
ExternalTextureMacIOSurface
:
:
GetIOSurfaceId
(
)
{
return
mSurface
-
>
GetIOSurfaceID
(
)
;
}
Maybe
<
layers
:
:
SurfaceDescriptor
>
ExternalTextureMacIOSurface
:
:
ToSurfaceDescriptor
(
Maybe
<
gfx
:
:
FenceInfo
>
&
aFenceInfo
)
{
return
Some
(
layers
:
:
SurfaceDescriptorMacIOSurface
(
mSurface
-
>
GetIOSurfaceID
(
)
!
mSurface
-
>
HasAlpha
(
)
mSurface
-
>
GetYUVColorSpace
(
)
)
)
;
}
void
ExternalTextureMacIOSurface
:
:
GetSnapshot
(
const
ipc
:
:
Shmem
&
aDestShmem
const
gfx
:
:
IntSize
&
aSize
)
{
}
}
