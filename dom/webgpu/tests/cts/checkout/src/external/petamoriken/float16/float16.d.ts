export
interface
Float16Array
{
readonly
BYTES_PER_ELEMENT
:
number
;
readonly
buffer
:
ArrayBufferLike
;
readonly
byteLength
:
number
;
readonly
byteOffset
:
number
;
[
Symbol
.
iterator
]
(
)
:
IterableIterator
<
number
>
;
entries
(
)
:
IterableIterator
<
[
number
number
]
>
;
keys
(
)
:
IterableIterator
<
number
>
;
values
(
)
:
IterableIterator
<
number
>
;
at
(
index
:
number
)
:
number
|
undefined
;
copyWithin
(
target
:
number
start
:
number
end
?
:
number
)
:
this
;
every
(
callbackfn
:
(
value
:
number
index
:
number
array
:
Float16Array
)
=
>
unknown
thisArg
?
:
any
)
:
boolean
;
fill
(
value
:
number
start
?
:
number
end
?
:
number
)
:
this
;
filter
(
predicate
:
(
value
:
number
index
:
number
array
:
Float16Array
)
=
>
any
thisArg
?
:
any
)
:
Float16Array
;
find
(
predicate
:
(
value
:
number
index
:
number
obj
:
Float16Array
)
=
>
boolean
thisArg
?
:
any
)
:
number
|
undefined
;
findIndex
(
predicate
:
(
value
:
number
index
:
number
obj
:
Float16Array
)
=
>
boolean
thisArg
?
:
any
)
:
number
;
findLast
(
predicate
:
(
value
:
number
index
:
number
obj
:
Float16Array
)
=
>
boolean
thisArg
?
:
any
)
:
number
|
undefined
;
findLastIndex
(
predicate
:
(
value
:
number
index
:
number
obj
:
Float16Array
)
=
>
boolean
thisArg
?
:
any
)
:
number
;
forEach
(
callbackfn
:
(
value
:
number
index
:
number
array
:
Float16Array
)
=
>
void
thisArg
?
:
any
)
:
void
;
includes
(
searchElement
:
number
fromIndex
?
:
number
)
:
boolean
;
indexOf
(
searchElement
:
number
fromIndex
?
:
number
)
:
number
;
join
(
separator
?
:
string
)
:
string
;
lastIndexOf
(
searchElement
:
number
fromIndex
?
:
number
)
:
number
;
readonly
length
:
number
;
map
(
callbackfn
:
(
value
:
number
index
:
number
array
:
Float16Array
)
=
>
number
thisArg
?
:
any
)
:
Float16Array
;
reduce
(
callbackfn
:
(
previousValue
:
number
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
number
)
:
number
;
reduce
(
callbackfn
:
(
previousValue
:
number
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
number
initialValue
:
number
)
:
number
;
reduce
<
U
>
(
callbackfn
:
(
previousValue
:
U
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
U
initialValue
:
U
)
:
U
;
reduceRight
(
callbackfn
:
(
previousValue
:
number
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
number
)
:
number
;
reduceRight
(
callbackfn
:
(
previousValue
:
number
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
number
initialValue
:
number
)
:
number
;
reduceRight
<
U
>
(
callbackfn
:
(
previousValue
:
U
currentValue
:
number
currentIndex
:
number
array
:
Float16Array
)
=
>
U
initialValue
:
U
)
:
U
;
reverse
(
)
:
this
;
set
(
array
:
ArrayLike
<
number
>
offset
?
:
number
)
:
void
;
slice
(
start
?
:
number
end
?
:
number
)
:
Float16Array
;
some
(
callbackfn
:
(
value
:
number
index
:
number
array
:
Float16Array
)
=
>
unknown
thisArg
?
:
any
)
:
boolean
;
sort
(
compareFn
?
:
(
a
:
number
b
:
number
)
=
>
number
)
:
this
;
subarray
(
begin
?
:
number
end
?
:
number
)
:
Float16Array
;
toReversed
(
)
:
Float16Array
;
toSorted
(
compareFn
?
:
(
a
:
number
b
:
number
)
=
>
number
)
:
Float16Array
;
with
(
index
:
number
value
:
number
)
:
Float16Array
;
toLocaleString
(
)
:
string
;
toString
(
)
:
string
;
valueOf
(
)
:
Float16Array
;
readonly
[
Symbol
.
toStringTag
]
:
"
Float16Array
"
;
[
index
:
number
]
:
number
;
}
export
interface
Float16ArrayConstructor
{
readonly
prototype
:
Float16Array
;
new
(
)
:
Float16Array
;
new
(
length
:
number
)
:
Float16Array
;
new
(
elements
:
Iterable
<
number
>
)
:
Float16Array
;
new
(
array
:
ArrayLike
<
number
>
|
ArrayBufferLike
)
:
Float16Array
;
new
(
buffer
:
ArrayBufferLike
byteOffset
:
number
length
?
:
number
)
:
Float16Array
;
readonly
BYTES_PER_ELEMENT
:
number
;
of
(
.
.
.
items
:
number
[
]
)
:
Float16Array
;
from
(
elements
:
Iterable
<
number
>
)
:
Float16Array
;
from
<
T
>
(
elements
:
Iterable
<
T
>
mapfn
:
(
v
:
T
k
:
number
)
=
>
number
thisArg
?
:
any
)
:
Float16Array
;
from
(
arrayLike
:
ArrayLike
<
number
>
)
:
Float16Array
;
from
<
T
>
(
arrayLike
:
ArrayLike
<
T
>
mapfn
:
(
v
:
T
k
:
number
)
=
>
number
thisArg
?
:
any
)
:
Float16Array
;
}
export
declare
const
Float16Array
:
Float16ArrayConstructor
;
export
declare
function
isFloat16Array
(
value
:
unknown
)
:
value
is
Float16Array
;
export
declare
function
isTypedArray
(
value
:
unknown
)
:
value
is
|
Uint8Array
|
Uint8ClampedArray
|
Uint16Array
|
Uint32Array
|
Int8Array
|
Int16Array
|
Int32Array
|
Float16Array
|
Float32Array
|
Float64Array
|
BigUint64Array
|
BigInt64Array
;
export
declare
function
getFloat16
(
dataView
:
DataView
byteOffset
:
number
littleEndian
?
:
boolean
)
:
number
;
export
declare
function
setFloat16
(
dataView
:
DataView
byteOffset
:
number
value
:
number
littleEndian
?
:
boolean
)
:
void
;
export
declare
function
f16round
(
x
:
number
)
:
number
;
export
declare
function
hfround
(
x
:
number
)
:
number
;
