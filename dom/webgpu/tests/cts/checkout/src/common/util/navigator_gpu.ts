import
{
assert
}
from
'
.
/
util
.
js
'
;
function
defaultGPUProvider
(
)
:
GPU
{
assert
(
typeof
navigator
!
=
=
'
undefined
'
&
&
navigator
.
gpu
!
=
=
undefined
'
No
WebGPU
implementation
found
'
)
;
return
navigator
.
gpu
;
}
export
type
GPUProvider
=
(
)
=
>
GPU
;
let
gpuProvider
:
GPUProvider
=
defaultGPUProvider
;
export
function
setGPUProvider
(
provider
:
GPUProvider
)
{
assert
(
impl
=
=
=
undefined
'
setGPUProvider
(
)
should
not
be
after
getGPU
(
)
'
)
;
gpuProvider
=
provider
;
}
let
impl
:
GPU
|
undefined
=
undefined
;
let
defaultRequestAdapterOptions
:
GPURequestAdapterOptions
|
undefined
;
export
function
setDefaultRequestAdapterOptions
(
options
:
GPURequestAdapterOptions
)
{
if
(
impl
)
{
throw
new
Error
(
'
must
call
setDefaultRequestAdapterOptions
before
getGPU
'
)
;
}
defaultRequestAdapterOptions
=
{
.
.
.
options
}
;
}
export
function
getGPU
(
)
:
GPU
{
if
(
impl
)
{
return
impl
;
}
impl
=
gpuProvider
(
)
;
if
(
defaultRequestAdapterOptions
)
{
const
oldFn
=
impl
.
requestAdapter
;
impl
.
requestAdapter
=
function
(
options
?
:
GPURequestAdapterOptions
)
:
Promise
<
GPUAdapter
|
null
>
{
const
promise
=
oldFn
.
call
(
this
{
.
.
.
defaultRequestAdapterOptions
.
.
.
(
options
|
|
{
}
)
}
)
;
void
promise
.
then
(
async
adapter
=
>
{
if
(
adapter
)
{
const
info
=
await
adapter
.
requestAdapterInfo
(
)
;
console
.
log
(
info
)
;
}
}
)
;
return
promise
;
}
;
}
return
impl
;
}
