import
{
isCompatibilityDevice
}
from
'
.
.
/
common
/
framework
/
test_config
.
js
'
;
import
{
keysOf
}
from
'
.
.
/
common
/
util
/
data_tables
.
js
'
;
import
{
assert
unreachable
}
from
'
.
.
/
common
/
util
/
util
.
js
'
;
import
{
align
roundDown
}
from
'
.
/
util
/
math
.
js
'
;
import
{
getTextureDimensionFromView
}
from
'
.
/
util
/
texture
/
base
.
js
'
;
import
{
ImageCopyType
}
from
'
.
/
util
/
texture
/
layout
.
js
'
;
const
kFormatUniversalDefaults
=
{
blockWidth
:
undefined
blockHeight
:
undefined
color
:
undefined
depth
:
undefined
stencil
:
undefined
colorRender
:
undefined
multisample
:
undefined
feature
:
undefined
baseFormat
:
undefined
bytesPerBlock
:
undefined
}
as
const
;
function
formatTableWithDefaults
<
Defaults
extends
{
}
Table
extends
{
readonly
[
K
:
string
]
:
{
}
}
>
(
{
defaults
table
}
:
{
defaults
:
Defaults
;
table
:
Table
;
}
)
:
{
readonly
[
F
in
keyof
Table
]
:
{
readonly
[
K
in
keyof
typeof
kFormatUniversalDefaults
]
:
K
extends
keyof
Table
[
F
]
?
Table
[
F
]
[
K
]
:
K
extends
keyof
Defaults
?
Defaults
[
K
]
:
(
typeof
kFormatUniversalDefaults
)
[
K
]
;
}
;
}
{
return
Object
.
fromEntries
(
Object
.
entries
(
table
)
.
map
(
(
[
k
row
]
)
=
>
[
k
{
.
.
.
kFormatUniversalDefaults
.
.
.
defaults
.
.
.
row
}
]
)
)
as
any
;
}
const
kRegularTextureFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
blockWidth
:
1
blockHeight
:
1
}
table
:
{
r8unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
1
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r8snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r8uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
1
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r8sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
1
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg8unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
2
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg8snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg8uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
2
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg8sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
2
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba8unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
1
}
multisample
:
true
baseFormat
:
'
rgba8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
rgba8unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
1
}
multisample
:
true
baseFormat
:
'
rgba8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba8snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba8uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba8sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
1
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
bgra8unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
1
}
multisample
:
true
baseFormat
:
'
bgra8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bgra8unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
1
}
multisample
:
true
baseFormat
:
'
bgra8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r16unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
2
alignment
:
2
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r16snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
2
alignment
:
2
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r16uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
2
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r16sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
2
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r16float
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
2
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg16unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
4
alignment
:
2
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg16snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
4
alignment
:
2
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg16uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg16sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg16float
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
4
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba16unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
8
alignment
:
4
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba16snorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
true
resolve
:
false
byteCost
:
8
alignment
:
2
}
multisample
:
true
feature
:
'
texture
-
formats
-
tier1
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba16uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba16sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba16float
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
2
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r32uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
true
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r32sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
true
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
r32float
:
{
color
:
{
type
:
'
unfilterable
-
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
true
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
4
alignment
:
4
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg32uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg32sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg32float
:
{
color
:
{
type
:
'
unfilterable
-
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
8
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba32uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
16
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
16
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba32sint
:
{
color
:
{
type
:
'
sint
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
16
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
16
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgba32float
:
{
color
:
{
type
:
'
unfilterable
-
float
'
copySrc
:
true
copyDst
:
true
storage
:
true
readWriteStorage
:
false
bytes
:
16
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
16
alignment
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgb10a2uint
:
{
color
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
false
resolve
:
false
byteCost
:
8
alignment
:
4
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgb10a2unorm
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
4
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rg11b10ufloat
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
colorRender
:
{
blend
:
true
resolve
:
true
byteCost
:
8
alignment
:
4
}
multisample
:
true
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
rgb9e5ufloat
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
multisample
:
false
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
}
}
as
const
)
;
const
kSizedDepthStencilFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
blockWidth
:
1
blockHeight
:
1
multisample
:
true
}
table
:
{
stencil8
:
{
stencil
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
bytesPerBlock
:
1
}
depth16unorm
:
{
depth
:
{
type
:
'
depth
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
2
}
bytesPerBlock
:
2
}
depth32float
:
{
depth
:
{
type
:
'
depth
'
copySrc
:
true
copyDst
:
false
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
bytesPerBlock
:
4
}
}
}
as
const
)
;
const
kUnsizedDepthStencilFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
blockWidth
:
1
blockHeight
:
1
multisample
:
true
}
table
:
{
depth24plus
:
{
depth
:
{
type
:
'
depth
'
copySrc
:
false
copyDst
:
false
storage
:
false
readWriteStorage
:
false
bytes
:
undefined
}
}
'
depth24plus
-
stencil8
'
:
{
depth
:
{
type
:
'
depth
'
copySrc
:
false
copyDst
:
false
storage
:
false
readWriteStorage
:
false
bytes
:
undefined
}
stencil
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
}
'
depth32float
-
stencil8
'
:
{
depth
:
{
type
:
'
depth
'
copySrc
:
true
copyDst
:
false
storage
:
false
readWriteStorage
:
false
bytes
:
4
}
stencil
:
{
type
:
'
uint
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
1
}
feature
:
'
depth32float
-
stencil8
'
}
}
}
as
const
)
;
const
kBCTextureFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
blockWidth
:
4
blockHeight
:
4
multisample
:
false
feature
:
'
texture
-
compression
-
bc
'
}
table
:
{
'
bc1
-
rgba
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
bc1
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc1
-
rgba
-
unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
bc1
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc2
-
rgba
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc2
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc2
-
rgba
-
unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc2
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc3
-
rgba
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc3
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc3
-
rgba
-
unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc3
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc4
-
r
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc4
-
r
-
snorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc5
-
rg
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc5
-
rg
-
snorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc6h
-
rgb
-
ufloat
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc6h
-
rgb
-
float
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc7
-
rgba
-
unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc7
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
bc7
-
rgba
-
unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
bc7
-
rgba
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
}
}
as
const
)
;
const
kETC2TextureFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
blockWidth
:
4
blockHeight
:
4
multisample
:
false
feature
:
'
texture
-
compression
-
etc2
'
}
table
:
{
'
etc2
-
rgb8unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
etc2
-
rgb8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
etc2
-
rgb8unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
etc2
-
rgb8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
etc2
-
rgb8a1unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
etc2
-
rgb8a1unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
etc2
-
rgb8a1unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
baseFormat
:
'
etc2
-
rgb8a1unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
etc2
-
rgba8unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
etc2
-
rgba8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
etc2
-
rgba8unorm
-
srgb
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
etc2
-
rgba8unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
eac
-
r11unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
eac
-
r11snorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
8
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
eac
-
rg11unorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
eac
-
rg11snorm
'
:
{
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
}
}
as
const
)
;
const
kASTCTextureFormatInfo
=
formatTableWithDefaults
(
{
defaults
:
{
multisample
:
false
feature
:
'
texture
-
compression
-
astc
'
}
table
:
{
'
astc
-
4x4
-
unorm
'
:
{
blockWidth
:
4
blockHeight
:
4
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
4x4
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
4x4
-
unorm
-
srgb
'
:
{
blockWidth
:
4
blockHeight
:
4
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
4x4
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
5x4
-
unorm
'
:
{
blockWidth
:
5
blockHeight
:
4
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
5x4
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
5x4
-
unorm
-
srgb
'
:
{
blockWidth
:
5
blockHeight
:
4
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
5x4
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
5x5
-
unorm
'
:
{
blockWidth
:
5
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
5x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
5x5
-
unorm
-
srgb
'
:
{
blockWidth
:
5
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
5x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
6x5
-
unorm
'
:
{
blockWidth
:
6
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
6x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
6x5
-
unorm
-
srgb
'
:
{
blockWidth
:
6
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
6x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
6x6
-
unorm
'
:
{
blockWidth
:
6
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
6x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
6x6
-
unorm
-
srgb
'
:
{
blockWidth
:
6
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
6x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x5
-
unorm
'
:
{
blockWidth
:
8
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x5
-
unorm
-
srgb
'
:
{
blockWidth
:
8
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x6
-
unorm
'
:
{
blockWidth
:
8
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x6
-
unorm
-
srgb
'
:
{
blockWidth
:
8
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x8
-
unorm
'
:
{
blockWidth
:
8
blockHeight
:
8
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x8
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
8x8
-
unorm
-
srgb
'
:
{
blockWidth
:
8
blockHeight
:
8
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
8x8
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x5
-
unorm
'
:
{
blockWidth
:
10
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x5
-
unorm
-
srgb
'
:
{
blockWidth
:
10
blockHeight
:
5
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x5
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x6
-
unorm
'
:
{
blockWidth
:
10
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x6
-
unorm
-
srgb
'
:
{
blockWidth
:
10
blockHeight
:
6
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x6
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x8
-
unorm
'
:
{
blockWidth
:
10
blockHeight
:
8
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x8
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x8
-
unorm
-
srgb
'
:
{
blockWidth
:
10
blockHeight
:
8
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x8
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x10
-
unorm
'
:
{
blockWidth
:
10
blockHeight
:
10
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x10
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
10x10
-
unorm
-
srgb
'
:
{
blockWidth
:
10
blockHeight
:
10
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
10x10
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
12x10
-
unorm
'
:
{
blockWidth
:
12
blockHeight
:
10
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
12x10
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
12x10
-
unorm
-
srgb
'
:
{
blockWidth
:
12
blockHeight
:
10
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
12x10
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
12x12
-
unorm
'
:
{
blockWidth
:
12
blockHeight
:
12
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
12x12
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
'
astc
-
12x12
-
unorm
-
srgb
'
:
{
blockWidth
:
12
blockHeight
:
12
color
:
{
type
:
'
float
'
copySrc
:
true
copyDst
:
true
storage
:
false
readWriteStorage
:
false
bytes
:
16
}
baseFormat
:
'
astc
-
12x12
-
unorm
'
get
bytesPerBlock
(
)
{
return
this
.
color
.
bytes
;
}
}
}
}
as
const
)
;
const
kCompressedTextureFormatInfo
=
{
.
.
.
kBCTextureFormatInfo
.
.
.
kETC2TextureFormatInfo
.
.
.
kASTCTextureFormatInfo
}
as
const
;
const
kColorTextureFormatInfo
=
{
.
.
.
kRegularTextureFormatInfo
.
.
.
kCompressedTextureFormatInfo
}
as
const
;
const
kEncodableTextureFormatInfo
=
{
.
.
.
kRegularTextureFormatInfo
.
.
.
kSizedDepthStencilFormatInfo
}
as
const
;
const
kSizedTextureFormatInfo
=
{
.
.
.
kRegularTextureFormatInfo
.
.
.
kSizedDepthStencilFormatInfo
.
.
.
kCompressedTextureFormatInfo
}
as
const
;
const
kDepthStencilFormatInfo
=
{
.
.
.
kSizedDepthStencilFormatInfo
.
.
.
kUnsizedDepthStencilFormatInfo
}
as
const
;
const
kUncompressedTextureFormatInfo
=
{
.
.
.
kRegularTextureFormatInfo
.
.
.
kSizedDepthStencilFormatInfo
.
.
.
kUnsizedDepthStencilFormatInfo
}
as
const
;
const
kAllTextureFormatInfo
=
{
.
.
.
kUncompressedTextureFormatInfo
.
.
.
kCompressedTextureFormatInfo
}
as
const
;
export
type
RegularTextureFormat
=
keyof
typeof
kRegularTextureFormatInfo
;
export
type
SizedDepthStencilFormat
=
keyof
typeof
kSizedDepthStencilFormatInfo
;
export
type
UnsizedDepthStencilFormat
=
keyof
typeof
kUnsizedDepthStencilFormatInfo
;
export
type
CompressedTextureFormat
=
keyof
typeof
kCompressedTextureFormatInfo
;
export
type
ColorTextureFormat
=
keyof
typeof
kColorTextureFormatInfo
;
export
type
EncodableTextureFormat
=
keyof
typeof
kEncodableTextureFormatInfo
;
export
type
SizedTextureFormat
=
keyof
typeof
kSizedTextureFormatInfo
;
export
type
DepthStencilFormat
=
keyof
typeof
kDepthStencilFormatInfo
;
export
type
UncompressedTextureFormat
=
keyof
typeof
kUncompressedTextureFormatInfo
;
export
const
kRegularTextureFormats
:
readonly
RegularTextureFormat
[
]
=
keysOf
(
kRegularTextureFormatInfo
)
;
export
const
kSizedDepthStencilFormats
:
readonly
SizedDepthStencilFormat
[
]
=
keysOf
(
kSizedDepthStencilFormatInfo
)
;
export
const
kUnsizedDepthStencilFormats
:
readonly
UnsizedDepthStencilFormat
[
]
=
keysOf
(
kUnsizedDepthStencilFormatInfo
)
;
export
const
kCompressedTextureFormats
:
readonly
CompressedTextureFormat
[
]
=
keysOf
(
kCompressedTextureFormatInfo
)
;
export
const
kBCCompressedTextureFormats
:
readonly
CompressedTextureFormat
[
]
=
keysOf
(
kBCTextureFormatInfo
)
;
export
const
kASTCCompressedTextureFormats
:
readonly
CompressedTextureFormat
[
]
=
keysOf
(
kASTCTextureFormatInfo
)
;
export
const
kColorTextureFormats
:
readonly
ColorTextureFormat
[
]
=
keysOf
(
kColorTextureFormatInfo
)
;
export
const
kEncodableTextureFormats
:
readonly
EncodableTextureFormat
[
]
=
keysOf
(
kEncodableTextureFormatInfo
)
;
export
const
kSizedTextureFormats
:
readonly
SizedTextureFormat
[
]
=
keysOf
(
kSizedTextureFormatInfo
)
;
export
const
kDepthStencilFormats
:
readonly
DepthStencilFormat
[
]
=
keysOf
(
kDepthStencilFormatInfo
)
;
export
const
kUncompressedTextureFormats
:
readonly
UncompressedTextureFormat
[
]
=
keysOf
(
kUncompressedTextureFormatInfo
)
;
export
const
kAllTextureFormats
:
readonly
GPUTextureFormat
[
]
=
keysOf
(
kAllTextureFormatInfo
)
;
interface
TextureFormatAspectInfo
{
copySrc
:
boolean
;
copyDst
:
boolean
;
storage
:
boolean
;
readWriteStorage
:
boolean
;
bytes
:
number
|
undefined
;
}
interface
TextureFormatColorAspectInfo
extends
TextureFormatAspectInfo
{
bytes
:
number
;
type
:
'
float
'
|
'
uint
'
|
'
sint
'
|
'
unfilterable
-
float
'
;
}
interface
TextureFormatDepthAspectInfo
extends
TextureFormatAspectInfo
{
type
:
'
depth
'
;
}
interface
TextureFormatStencilAspectInfo
extends
TextureFormatAspectInfo
{
bytes
:
1
;
type
:
'
uint
'
;
}
type
TextureFormatInfo_TypeCheck
=
{
blockWidth
:
number
;
blockHeight
:
number
;
multisample
:
boolean
;
baseFormat
:
GPUTextureFormat
|
undefined
;
feature
:
GPUFeatureName
|
undefined
;
bytesPerBlock
:
number
|
undefined
;
}
&
(
|
{
color
:
TextureFormatColorAspectInfo
;
colorRender
:
|
undefined
|
{
blend
:
boolean
;
resolve
:
boolean
;
byteCost
:
number
;
alignment
:
number
;
}
;
}
|
(
|
{
depth
:
TextureFormatDepthAspectInfo
;
stencil
:
undefined
|
TextureFormatStencilAspectInfo
;
multisample
:
true
;
}
|
{
stencil
:
TextureFormatStencilAspectInfo
;
multisample
:
true
;
}
)
)
;
const
kTextureFormatInfo
=
{
.
.
.
kRegularTextureFormatInfo
.
.
.
kSizedDepthStencilFormatInfo
.
.
.
kUnsizedDepthStencilFormatInfo
.
.
.
kBCTextureFormatInfo
.
.
.
kETC2TextureFormatInfo
.
.
.
kASTCTextureFormatInfo
}
as
const
;
const
kTextureFormatInfo_TypeCheck
:
{
readonly
[
F
in
GPUTextureFormat
]
:
TextureFormatInfo_TypeCheck
;
}
=
kTextureFormatInfo
;
export
const
kDepthTextureFormats
=
[
.
.
.
kDepthStencilFormats
.
filter
(
v
=
>
kTextureFormatInfo
[
v
]
.
depth
)
]
as
const
;
export
const
kStencilTextureFormats
=
kDepthStencilFormats
.
filter
(
v
=
>
kTextureFormatInfo
[
v
]
.
stencil
)
;
export
const
kTextureFormatTier1AllowsResolve
:
readonly
ColorTextureFormat
[
]
=
[
'
r8snorm
'
'
rg8snorm
'
'
rgba8snorm
'
'
rg11b10ufloat
'
]
as
const
;
export
const
kTextureFormatTier1ThrowsWhenNotEnabled
:
readonly
ColorTextureFormat
[
]
=
[
'
r16unorm
'
'
r16snorm
'
'
rg16unorm
'
'
rg16snorm
'
'
rgba16unorm
'
'
rgba16snorm
'
]
as
const
;
export
const
kTextureFormatTier1AllowsRenderAttachmentBlendableMultisample
:
readonly
ColorTextureFormat
[
]
=
[
'
r16unorm
'
'
r16snorm
'
'
rg16unorm
'
'
rg16snorm
'
'
rgba16unorm
'
'
rgba16snorm
'
'
r8snorm
'
'
rg8snorm
'
'
rgba8snorm
'
'
rg11b10ufloat
'
]
as
const
;
export
const
kTextureFormatsTier1EnablesStorageReadOnlyWriteOnly
:
readonly
ColorTextureFormat
[
]
=
[
'
r8unorm
'
'
r8snorm
'
'
r8uint
'
'
r8sint
'
'
rg8unorm
'
'
rg8snorm
'
'
rg8uint
'
'
rg8sint
'
'
r16uint
'
'
r16sint
'
'
r16float
'
'
rg16uint
'
'
rg16sint
'
'
rg16float
'
'
rgb10a2uint
'
'
rgb10a2unorm
'
'
rg11b10ufloat
'
]
as
const
;
export
const
kTextureFormatsTier2EnablesStorageReadWrite
:
readonly
ColorTextureFormat
[
]
=
[
'
r8unorm
'
'
r8uint
'
'
r8sint
'
'
rgba8unorm
'
'
rgba8uint
'
'
rgba8sint
'
'
r16uint
'
'
r16sint
'
'
r16float
'
'
rgba16uint
'
'
rgba16sint
'
'
rgba16float
'
'
rgba32uint
'
'
rgba32sint
'
'
rgba32float
'
]
as
const
;
export
const
kPossibleStorageTextureFormats
=
[
.
.
.
kRegularTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
color
?
.
storage
)
'
bgra8unorm
'
.
.
.
kTextureFormatsTier1EnablesStorageReadOnlyWriteOnly
]
as
readonly
RegularTextureFormat
[
]
;
export
const
kPossibleReadWriteStorageTextureFormats
=
[
.
.
.
kPossibleStorageTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
color
?
.
readWriteStorage
)
.
.
.
kTextureFormatsTier2EnablesStorageReadWrite
]
as
readonly
RegularTextureFormat
[
]
;
export
const
kPossibleMultisampledTextureFormats
=
[
.
.
.
kRegularTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
multisample
)
.
.
.
kDepthStencilFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
multisample
)
]
as
const
;
export
const
kPossibleColorRenderableTextureFormats
=
[
.
.
.
kRegularTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
colorRender
)
]
as
const
;
export
type
PossibleColorRenderTextureFormat
=
(
typeof
kPossibleColorRenderableTextureFormats
)
[
number
]
;
export
const
kDifferentBaseFormatTextureFormats
=
kColorTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
baseFormat
&
&
kTextureFormatInfo
[
f
]
.
baseFormat
!
=
=
f
)
;
export
const
kDifferentBaseFormatRegularTextureFormats
=
kRegularTextureFormats
.
filter
(
f
=
>
kTextureFormatInfo
[
f
]
.
baseFormat
&
&
kTextureFormatInfo
[
f
]
.
baseFormat
!
=
=
f
)
;
export
const
kOptionalTextureFormats
=
kAllTextureFormats
.
filter
(
t
=
>
kTextureFormatInfo
[
t
]
.
feature
!
=
=
undefined
)
;
export
const
kValidTextureFormatsForCopyE2T
=
[
'
r8unorm
'
'
r16float
'
'
r32float
'
'
rg8unorm
'
'
rg16float
'
'
rg32float
'
'
rgba8unorm
'
'
rgba8unorm
-
srgb
'
'
bgra8unorm
'
'
bgra8unorm
-
srgb
'
'
rgb10a2unorm
'
'
rgba16float
'
'
rgba32float
'
]
as
const
;
const
kDepthStencilFormatCapabilityInBufferTextureCopy
=
{
depth24plus
:
{
CopyB2T
:
[
]
CopyT2B
:
[
]
texelAspectSize
:
{
'
depth
-
only
'
:
-
1
'
stencil
-
only
'
:
-
1
}
}
'
depth24plus
-
stencil8
'
:
{
CopyB2T
:
[
'
stencil
-
only
'
]
CopyT2B
:
[
'
stencil
-
only
'
]
texelAspectSize
:
{
'
depth
-
only
'
:
-
1
'
stencil
-
only
'
:
1
}
}
depth16unorm
:
{
CopyB2T
:
[
'
all
'
'
depth
-
only
'
]
CopyT2B
:
[
'
all
'
'
depth
-
only
'
]
texelAspectSize
:
{
'
depth
-
only
'
:
2
'
stencil
-
only
'
:
-
1
}
}
depth32float
:
{
CopyB2T
:
[
]
CopyT2B
:
[
'
all
'
'
depth
-
only
'
]
texelAspectSize
:
{
'
depth
-
only
'
:
4
'
stencil
-
only
'
:
-
1
}
}
'
depth32float
-
stencil8
'
:
{
CopyB2T
:
[
'
stencil
-
only
'
]
CopyT2B
:
[
'
depth
-
only
'
'
stencil
-
only
'
]
texelAspectSize
:
{
'
depth
-
only
'
:
4
'
stencil
-
only
'
:
1
}
}
stencil8
:
{
CopyB2T
:
[
'
all
'
'
stencil
-
only
'
]
CopyT2B
:
[
'
all
'
'
stencil
-
only
'
]
texelAspectSize
:
{
'
depth
-
only
'
:
-
1
'
stencil
-
only
'
:
1
}
}
}
as
const
;
export
const
kDepthStencilFormatResolvedAspect
:
{
readonly
[
k
in
DepthStencilFormat
]
:
{
readonly
[
a
in
GPUTextureAspect
]
:
DepthStencilFormat
|
undefined
;
}
;
}
=
{
depth24plus
:
{
all
:
'
depth24plus
'
'
depth
-
only
'
:
'
depth24plus
'
'
stencil
-
only
'
:
undefined
}
'
depth24plus
-
stencil8
'
:
{
all
:
'
depth24plus
-
stencil8
'
'
depth
-
only
'
:
'
depth24plus
'
'
stencil
-
only
'
:
'
stencil8
'
}
depth16unorm
:
{
all
:
'
depth16unorm
'
'
depth
-
only
'
:
'
depth16unorm
'
'
stencil
-
only
'
:
undefined
}
depth32float
:
{
all
:
'
depth32float
'
'
depth
-
only
'
:
'
depth32float
'
'
stencil
-
only
'
:
undefined
}
'
depth32float
-
stencil8
'
:
{
all
:
'
depth32float
-
stencil8
'
'
depth
-
only
'
:
'
depth32float
'
'
stencil
-
only
'
:
'
stencil8
'
}
stencil8
:
{
all
:
'
stencil8
'
'
depth
-
only
'
:
undefined
'
stencil
-
only
'
:
'
stencil8
'
}
}
as
const
;
export
function
resolvePerAspectFormat
(
format
:
GPUTextureFormat
aspect
?
:
GPUTextureAspect
)
:
GPUTextureFormat
{
if
(
aspect
=
=
=
'
all
'
|
|
aspect
=
=
=
undefined
)
{
return
format
;
}
assert
(
!
!
kTextureFormatInfo
[
format
]
.
depth
|
|
!
!
kTextureFormatInfo
[
format
]
.
stencil
)
;
const
resolved
=
kDepthStencilFormatResolvedAspect
[
format
as
DepthStencilFormat
]
[
aspect
?
?
'
all
'
]
;
assert
(
resolved
!
=
=
undefined
)
;
return
resolved
;
}
export
function
sampleTypeForFormatAndAspect
(
format
:
GPUTextureFormat
aspect
:
GPUTextureAspect
)
:
'
uint
'
|
'
depth
'
|
'
float
'
|
'
sint
'
|
'
unfilterable
-
float
'
{
const
info
=
kTextureFormatInfo
[
format
]
;
if
(
info
.
color
)
{
assert
(
aspect
=
=
=
'
all
'
color
format
{
format
}
used
with
aspect
{
aspect
}
)
;
return
info
.
color
.
type
;
}
else
if
(
info
.
depth
&
&
info
.
stencil
)
{
if
(
aspect
=
=
=
'
depth
-
only
'
)
{
return
info
.
depth
.
type
;
}
else
if
(
aspect
=
=
=
'
stencil
-
only
'
)
{
return
info
.
stencil
.
type
;
}
else
{
unreachable
(
depth
-
stencil
format
{
format
}
used
with
aspect
{
aspect
}
)
;
}
}
else
if
(
info
.
depth
)
{
assert
(
aspect
!
=
=
'
stencil
-
only
'
depth
-
only
format
{
format
}
used
with
aspect
{
aspect
}
)
;
return
info
.
depth
.
type
;
}
else
if
(
info
.
stencil
)
{
assert
(
aspect
!
=
=
'
depth
-
only
'
stencil
-
only
format
{
format
}
used
with
aspect
{
aspect
}
)
;
return
info
.
stencil
.
type
;
}
unreachable
(
)
;
}
export
function
depthStencilFormatCopyableAspects
(
type
:
ImageCopyType
format
:
DepthStencilFormat
)
:
readonly
GPUTextureAspect
[
]
{
const
appliedType
=
type
=
=
=
'
WriteTexture
'
?
'
CopyB2T
'
:
type
;
return
kDepthStencilFormatCapabilityInBufferTextureCopy
[
format
]
[
appliedType
]
;
}
export
function
depthStencilBufferTextureCopySupported
(
type
:
ImageCopyType
format
:
DepthStencilFormat
aspect
:
GPUTextureAspect
)
:
boolean
{
const
supportedAspects
:
readonly
GPUTextureAspect
[
]
=
depthStencilFormatCopyableAspects
(
type
format
)
;
return
supportedAspects
.
includes
(
aspect
)
;
}
export
function
depthStencilFormatAspectSize
(
format
:
DepthStencilFormat
aspect
:
'
depth
-
only
'
|
'
stencil
-
only
'
)
{
const
texelAspectSize
=
kDepthStencilFormatCapabilityInBufferTextureCopy
[
format
]
.
texelAspectSize
[
aspect
]
;
assert
(
texelAspectSize
>
0
)
;
return
texelAspectSize
;
}
export
function
textureFormatAndDimensionPossiblyCompatible
(
dimension
:
undefined
|
GPUTextureDimension
format
:
GPUTextureFormat
)
:
boolean
{
if
(
dimension
=
=
=
'
3d
'
&
&
(
isBCTextureFormat
(
format
)
|
|
isASTCTextureFormat
(
format
)
)
)
{
return
true
;
}
const
info
=
kAllTextureFormatInfo
[
format
]
;
return
!
(
(
dimension
=
=
=
'
1d
'
|
|
dimension
=
=
=
'
3d
'
)
&
&
(
info
.
blockWidth
>
1
|
|
info
.
depth
|
|
info
.
stencil
)
)
;
}
export
function
textureDimensionAndFormatCompatibleForDevice
(
device
:
GPUDevice
dimension
:
undefined
|
GPUTextureDimension
format
:
GPUTextureFormat
)
:
boolean
{
if
(
dimension
=
=
=
'
3d
'
&
&
(
(
isBCTextureFormat
(
format
)
&
&
device
.
features
.
has
(
'
texture
-
compression
-
bc
-
sliced
-
3d
'
)
)
|
|
(
isASTCTextureFormat
(
format
)
&
&
device
.
features
.
has
(
'
texture
-
compression
-
astc
-
sliced
-
3d
'
)
)
)
)
{
return
true
;
}
const
info
=
kAllTextureFormatInfo
[
format
]
;
return
!
(
(
dimension
=
=
=
'
1d
'
|
|
dimension
=
=
=
'
3d
'
)
&
&
(
info
.
blockWidth
>
1
|
|
info
.
depth
|
|
info
.
stencil
)
)
;
}
export
function
textureViewDimensionAndFormatCompatibleForDevice
(
device
:
GPUDevice
dimension
:
GPUTextureViewDimension
format
:
GPUTextureFormat
)
:
boolean
{
return
textureDimensionAndFormatCompatibleForDevice
(
device
getTextureDimensionFromView
(
dimension
)
format
)
;
}
export
function
textureFormatsAreViewCompatible
(
device
:
GPUDevice
a
:
GPUTextureFormat
b
:
GPUTextureFormat
)
{
return
isCompatibilityDevice
(
device
)
?
a
=
=
=
b
:
a
=
=
=
b
|
|
a
+
'
-
srgb
'
=
=
=
b
|
|
b
+
'
-
srgb
'
=
=
=
a
;
}
export
function
getBlockInfoForColorTextureFormat
(
format
:
ColorTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
{
blockWidth
:
info
.
blockWidth
blockHeight
:
info
.
blockHeight
bytesPerBlock
:
info
.
color
?
.
bytes
}
;
}
export
function
getBlockInfoForSizedTextureFormat
(
format
:
SizedTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
bytesPerBlock
=
info
.
color
?
.
bytes
|
|
info
.
depth
?
.
bytes
|
|
info
.
stencil
?
.
bytes
;
assert
(
!
!
bytesPerBlock
)
;
return
{
blockWidth
:
info
.
blockWidth
blockHeight
:
info
.
blockHeight
bytesPerBlock
}
;
}
export
function
getBlockInfoForEncodableTextureFormat
(
format
:
EncodableTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
bytesPerBlock
=
info
.
color
?
.
bytes
|
|
info
.
depth
?
.
bytes
|
|
info
.
stencil
?
.
bytes
;
assert
(
!
!
bytesPerBlock
)
;
return
{
blockWidth
:
info
.
blockWidth
blockHeight
:
info
.
blockHeight
bytesPerBlock
}
;
}
export
function
getBlockInfoForTextureFormat
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
{
blockWidth
:
info
.
blockWidth
blockHeight
:
info
.
blockHeight
bytesPerBlock
:
info
.
color
?
.
bytes
?
?
info
.
depth
?
.
bytes
?
?
info
.
stencil
?
.
bytes
}
;
}
export
function
getColorRenderByteCost
(
format
:
PossibleColorRenderTextureFormat
)
{
const
byteCost
=
kTextureFormatInfo
[
format
]
.
colorRender
?
.
byteCost
;
assert
(
byteCost
!
=
=
undefined
)
;
return
byteCost
;
}
export
function
getColorRenderAlignment
(
format
:
PossibleColorRenderTextureFormat
)
{
const
alignment
=
kTextureFormatInfo
[
format
]
.
colorRender
?
.
alignment
;
assert
(
alignment
!
=
=
undefined
)
;
return
alignment
;
}
export
function
getBaseFormatForTextureFormat
(
format
:
(
typeof
kDifferentBaseFormatTextureFormats
)
[
number
]
)
:
ColorTextureFormat
{
return
kTextureFormatInfo
[
format
]
.
baseFormat
!
;
}
export
function
getBaseFormatForRegularTextureFormat
(
format
:
RegularTextureFormat
)
:
RegularTextureFormat
|
undefined
{
return
kTextureFormatInfo
[
format
]
.
baseFormat
as
RegularTextureFormat
;
}
export
function
getRequiredFeatureForTextureFormat
(
format
:
GPUTextureFormat
)
{
return
kTextureFormatInfo
[
format
]
.
feature
;
}
export
function
getFeaturesForFormats
<
T
>
(
formats
:
readonly
(
T
&
(
GPUTextureFormat
|
undefined
)
)
[
]
)
:
readonly
(
GPUFeatureName
|
undefined
)
[
]
{
return
Array
.
from
(
new
Set
(
formats
.
map
(
f
=
>
(
f
?
kTextureFormatInfo
[
f
]
.
feature
:
undefined
)
)
)
)
;
}
export
function
filterFormatsByFeature
<
T
>
(
feature
:
GPUFeatureName
|
undefined
formats
:
readonly
(
T
&
(
GPUTextureFormat
|
undefined
)
)
[
]
)
:
readonly
(
T
&
(
GPUTextureFormat
|
undefined
)
)
[
]
{
return
formats
.
filter
(
f
=
>
f
=
=
=
undefined
|
|
kTextureFormatInfo
[
f
]
.
feature
=
=
=
feature
)
;
}
function
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
:
GPUTextureFormat
)
{
return
kTextureFormatTier1AllowsRenderAttachmentBlendableMultisample
.
includes
(
format
as
ColorTextureFormat
)
;
}
function
isTextureFormatTier1EnablesResolve
(
format
:
GPUTextureFormat
)
{
return
kTextureFormatTier1AllowsResolve
.
includes
(
format
as
ColorTextureFormat
)
;
}
function
isTextureFormatTier1EnablesStorageReadOnlyWriteOnly
(
format
:
GPUTextureFormat
)
{
return
kTextureFormatsTier1EnablesStorageReadOnlyWriteOnly
.
includes
(
format
as
ColorTextureFormat
)
;
}
function
isTextureFormatTier2EnablesStorageReadWrite
(
format
:
GPUTextureFormat
)
{
return
kTextureFormatsTier2EnablesStorageReadWrite
.
includes
(
format
as
ColorTextureFormat
)
;
}
export
function
canCopyToAspectOfTextureFormat
(
format
:
GPUTextureFormat
aspect
:
GPUTextureAspect
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
switch
(
aspect
)
{
case
'
depth
-
only
'
:
assert
(
isDepthTextureFormat
(
format
)
)
;
return
info
.
depth
&
&
info
.
depth
.
copyDst
;
case
'
stencil
-
only
'
:
assert
(
isStencilTextureFormat
(
format
)
)
;
return
info
.
stencil
&
&
info
.
stencil
.
copyDst
;
case
'
all
'
:
return
(
(
!
isDepthTextureFormat
(
format
)
|
|
info
.
depth
?
.
copyDst
)
&
&
(
!
isStencilTextureFormat
(
format
)
|
|
info
.
stencil
?
.
copyDst
)
&
&
(
!
isColorTextureFormat
(
format
)
|
|
!
info
.
color
?
.
copyDst
)
)
;
}
}
export
function
canCopyFromAspectOfTextureFormat
(
format
:
GPUTextureFormat
aspect
:
GPUTextureAspect
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
switch
(
aspect
)
{
case
'
depth
-
only
'
:
assert
(
isDepthTextureFormat
(
format
)
)
;
return
info
.
depth
&
&
info
.
depth
.
copySrc
;
case
'
stencil
-
only
'
:
assert
(
isStencilTextureFormat
(
format
)
)
;
return
info
.
stencil
&
&
info
.
stencil
.
copySrc
;
case
'
all
'
:
return
(
(
!
isDepthTextureFormat
(
format
)
|
|
info
.
depth
?
.
copySrc
)
&
&
(
!
isStencilTextureFormat
(
format
)
|
|
info
.
stencil
?
.
copySrc
)
&
&
(
!
isColorTextureFormat
(
format
)
|
|
!
info
.
color
?
.
copySrc
)
)
;
}
}
export
function
canCopyToAllAspectsOfTextureFormat
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
(
(
!
info
.
color
|
|
info
.
color
.
copyDst
)
&
&
(
!
info
.
depth
|
|
info
.
depth
.
copyDst
)
&
&
(
!
info
.
stencil
|
|
info
.
stencil
.
copyDst
)
)
;
}
export
function
canCopyFromAllAspectsOfTextureFormat
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
(
(
!
info
.
color
|
|
info
.
color
.
copySrc
)
&
&
(
!
info
.
depth
|
|
info
.
depth
.
copySrc
)
&
&
(
!
info
.
stencil
|
|
info
.
stencil
.
copySrc
)
)
;
}
export
function
isCompressedTextureFormat
(
format
:
GPUTextureFormat
)
{
return
format
in
kCompressedTextureFormatInfo
;
}
export
function
isBCTextureFormat
(
format
:
GPUTextureFormat
)
{
return
format
in
kBCTextureFormatInfo
;
}
export
function
isASTCTextureFormat
(
format
:
GPUTextureFormat
)
{
return
format
in
kASTCTextureFormatInfo
;
}
export
function
isColorTextureFormat
(
format
:
GPUTextureFormat
)
{
return
!
!
kTextureFormatInfo
[
format
]
.
color
;
}
export
function
isDepthTextureFormat
(
format
:
GPUTextureFormat
)
{
return
!
!
kTextureFormatInfo
[
format
]
.
depth
;
}
export
function
isStencilTextureFormat
(
format
:
GPUTextureFormat
)
{
return
!
!
kTextureFormatInfo
[
format
]
.
stencil
;
}
export
function
isDepthOrStencilTextureFormat
(
format
:
GPUTextureFormat
)
{
return
isDepthTextureFormat
(
format
)
|
|
isStencilTextureFormat
(
format
)
;
}
export
function
isEncodableTextureFormat
(
format
:
GPUTextureFormat
)
{
return
kEncodableTextureFormats
.
includes
(
format
as
EncodableTextureFormat
)
;
}
export
function
isTextureFormatUsableAsRenderAttachment
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
{
if
(
format
=
=
=
'
rg11b10ufloat
'
)
{
return
device
.
features
.
has
(
'
rg11b10ufloat
-
renderable
'
)
;
}
if
(
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
{
return
device
.
features
.
has
(
'
texture
-
formats
-
tier1
'
)
;
}
return
kTextureFormatInfo
[
format
]
.
colorRender
|
|
isDepthOrStencilTextureFormat
(
format
)
;
}
export
function
isTextureFormatColorRenderable
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
format
=
=
=
'
rg11b10ufloat
'
)
{
return
device
.
features
.
has
(
'
rg11b10ufloat
-
renderable
'
)
;
}
if
(
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
{
return
device
.
features
.
has
(
'
texture
-
formats
-
tier1
'
)
;
}
return
!
!
kAllTextureFormatInfo
[
format
]
.
colorRender
;
}
export
function
isTextureFormatBlendable
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
!
isTextureFormatColorRenderable
(
device
format
)
)
{
return
false
;
}
if
(
format
=
=
=
'
rg11b10ufloat
'
)
{
return
device
.
features
.
has
(
'
rg11b10ufloat
-
renderable
'
)
;
}
if
(
is32Float
(
format
)
)
{
return
device
.
features
.
has
(
'
float32
-
blendable
'
)
;
}
return
!
!
kAllTextureFormatInfo
[
format
]
.
colorRender
?
.
blend
;
}
export
function
getTextureFormatType
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
type
=
info
.
color
?
.
type
?
?
info
.
depth
?
.
type
?
?
info
.
stencil
?
.
type
;
assert
(
!
!
type
)
;
return
type
;
}
export
function
getTextureFormatColorType
(
format
:
RegularTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
type
=
info
.
color
?
.
type
;
assert
(
!
!
type
)
;
return
type
;
}
export
function
isTextureFormatPossiblyUsableAsRenderAttachment
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
(
isDepthOrStencilTextureFormat
(
format
)
|
|
!
!
info
.
colorRender
|
|
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
;
}
export
function
isTextureFormatPossiblyUsableAsColorRenderAttachment
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
(
!
!
info
.
colorRender
|
|
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
;
}
export
function
isTextureFormatPossiblyMultisampled
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
(
info
.
multisample
|
|
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
;
}
export
function
isTextureFormatPossiblyStorageReadable
(
format
:
GPUTextureFormat
)
{
return
(
!
!
kTextureFormatInfo
[
format
]
.
color
?
.
storage
|
|
isTextureFormatTier1EnablesStorageReadOnlyWriteOnly
(
format
)
)
;
}
export
function
isTextureFormatPossiblyStorageReadWritable
(
format
:
GPUTextureFormat
)
{
return
(
!
!
kTextureFormatInfo
[
format
]
.
color
?
.
readWriteStorage
|
|
isTextureFormatTier2EnablesStorageReadWrite
(
format
)
)
;
}
export
function
is16Float
(
format
:
GPUTextureFormat
)
{
return
format
=
=
=
'
r16float
'
|
|
format
=
=
=
'
rg16float
'
|
|
format
=
=
=
'
rgba16float
'
;
}
export
function
is32Float
(
format
:
GPUTextureFormat
)
{
return
format
=
=
=
'
r32float
'
|
|
format
=
=
=
'
rg32float
'
|
|
format
=
=
=
'
rgba32float
'
;
}
export
function
isTextureFormatPossiblyFilterableAsTextureF32
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
return
info
.
color
?
.
type
=
=
=
'
float
'
|
|
is32Float
(
format
)
;
}
export
const
kCompatModeUnsupportedStorageTextureFormats
:
readonly
GPUTextureFormat
[
]
=
[
'
rg32float
'
'
rg32sint
'
'
rg32uint
'
]
as
const
;
function
isTextureFormatUsableAsWriteOnlyStorageTexture
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
isCompatibilityDevice
(
device
)
)
{
if
(
kCompatModeUnsupportedStorageTextureFormats
.
indexOf
(
format
)
>
=
0
)
{
return
false
;
}
}
if
(
format
=
=
=
'
bgra8unorm
'
&
&
device
.
features
.
has
(
'
bgra8unorm
-
storage
'
)
)
{
return
true
;
}
if
(
isTextureFormatTier1EnablesStorageReadOnlyWriteOnly
(
format
)
&
&
device
.
features
.
has
(
'
texture
-
formats
-
tier1
'
)
)
{
return
true
;
}
const
info
=
kTextureFormatInfo
[
format
]
;
return
!
!
(
info
.
color
?
.
storage
|
|
info
.
depth
?
.
storage
|
|
info
.
stencil
?
.
storage
)
;
}
export
function
isTextureFormatUsableWithStorageAccessMode
(
device
:
GPUDevice
format
:
GPUTextureFormat
access
:
GPUStorageTextureAccess
|
'
read
'
|
'
write
'
|
'
read_write
'
)
{
switch
(
access
)
{
case
'
read
'
:
case
'
read
-
only
'
:
return
isTextureFormatUsableAsReadOnlyStorageTexture
(
device
format
)
;
case
'
write
'
:
case
'
write
-
only
'
:
return
isTextureFormatUsableAsWriteOnlyStorageTexture
(
device
format
)
;
case
'
read_write
'
:
case
'
read
-
write
'
:
return
isTextureFormatUsableAsReadWriteStorageTexture
(
device
format
)
;
}
}
function
isTextureFormatUsableAsReadOnlyStorageTexture
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
format
=
=
=
'
bgra8unorm
'
)
{
return
false
;
}
return
isTextureFormatUsableAsWriteOnlyStorageTexture
(
device
format
)
;
}
export
function
isTextureFormatUsableAsStorageFormatInCreateShaderModule
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
return
kPossibleStorageTextureFormats
.
includes
(
format
as
(
typeof
kPossibleStorageTextureFormats
)
[
number
]
)
;
}
function
isTextureFormatUsableAsReadWriteStorageTexture
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
isTextureFormatTier2EnablesStorageReadWrite
(
format
)
)
{
return
device
.
features
.
has
(
'
texture
-
formats
-
tier2
'
)
;
}
return
!
!
kTextureFormatInfo
[
format
]
.
color
?
.
readWriteStorage
;
}
export
function
isRegularTextureFormat
(
format
:
GPUTextureFormat
)
{
return
format
in
kRegularTextureFormatInfo
;
}
export
function
isCompressedFloatTextureFormat
(
format
:
GPUTextureFormat
)
{
return
isCompressedTextureFormat
(
format
)
&
&
format
.
includes
(
'
float
'
)
;
}
export
function
isSintOrUintFormat
(
format
:
GPUTextureFormat
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
type
=
info
.
color
?
.
type
?
?
info
.
depth
?
.
type
?
?
info
.
stencil
?
.
type
;
return
type
=
=
=
'
sint
'
|
|
type
=
=
=
'
uint
'
;
}
export
const
kCompatModeUnsupportedMultisampledTextureFormats
:
readonly
GPUTextureFormat
[
]
=
[
'
r8uint
'
'
r8sint
'
'
rg8uint
'
'
rg8sint
'
'
rgba8uint
'
'
rgba8sint
'
'
r16uint
'
'
r16sint
'
'
rg16uint
'
'
rg16sint
'
'
rgba16uint
'
'
rgba16sint
'
'
rgb10a2uint
'
'
rgba16float
'
'
r32float
'
]
as
const
;
export
function
isTextureFormatMultisampled
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
isCompatibilityDevice
(
device
)
)
{
if
(
kCompatModeUnsupportedMultisampledTextureFormats
.
indexOf
(
format
)
>
=
0
)
{
return
false
;
}
}
if
(
format
=
=
=
'
rg11b10ufloat
'
)
{
return
device
.
features
.
has
(
'
rg11b10ufloat
-
renderable
'
)
;
}
if
(
isTextureFormatTier1EnablesRenderAttachmentBlendableMultisample
(
format
)
)
{
return
device
.
features
.
has
(
'
texture
-
formats
-
tier1
'
)
;
}
return
kAllTextureFormatInfo
[
format
]
.
multisample
;
}
export
function
isTextureFormatResolvable
(
device
:
GPUDevice
format
:
GPUTextureFormat
)
:
boolean
{
if
(
format
=
=
=
'
rg11b10ufloat
'
)
{
return
device
.
features
.
has
(
'
rg11b10ufloat
-
renderable
'
)
;
}
if
(
isTextureFormatTier1EnablesResolve
(
format
)
)
{
return
device
.
features
.
has
(
'
texture
-
formats
-
tier1
'
)
;
}
if
(
!
isTextureFormatMultisampled
(
device
format
)
)
{
return
false
;
}
const
info
=
kAllTextureFormatInfo
[
format
]
;
return
!
!
info
.
colorRender
?
.
resolve
;
}
export
const
kFeaturesForFormats
=
getFeaturesForFormats
(
kAllTextureFormats
)
;
export
function
computeBytesPerSampleFromFormats
(
formats
:
readonly
GPUTextureFormat
[
]
)
{
let
bytesPerSample
=
0
;
for
(
const
format
of
formats
)
{
const
info
=
kTextureFormatInfo
[
format
]
;
const
alignedBytesPerSample
=
align
(
bytesPerSample
info
.
colorRender
!
.
alignment
)
;
bytesPerSample
=
alignedBytesPerSample
+
info
.
colorRender
!
.
byteCost
;
}
return
bytesPerSample
;
}
export
function
computeBytesPerSample
(
targets
:
GPUColorTargetState
[
]
)
{
return
computeBytesPerSampleFromFormats
(
targets
.
map
(
(
{
format
}
)
=
>
format
)
)
;
}
export
function
getMaxValidTextureSizeForFormatAndDimension
(
device
:
GPUDevice
format
:
GPUTextureFormat
dimension
:
GPUTextureDimension
)
:
[
number
number
number
]
{
const
info
=
getBlockInfoForTextureFormat
(
format
)
;
switch
(
dimension
)
{
case
'
1d
'
:
return
[
device
.
limits
.
maxTextureDimension1D
1
1
]
;
case
'
2d
'
:
return
[
roundDown
(
device
.
limits
.
maxTextureDimension2D
info
.
blockWidth
)
roundDown
(
device
.
limits
.
maxTextureDimension2D
info
.
blockHeight
)
device
.
limits
.
maxTextureArrayLayers
]
;
case
'
3d
'
:
return
[
roundDown
(
device
.
limits
.
maxTextureDimension3D
info
.
blockWidth
)
roundDown
(
device
.
limits
.
maxTextureDimension3D
info
.
blockHeight
)
device
.
limits
.
maxTextureDimension3D
]
;
}
}
