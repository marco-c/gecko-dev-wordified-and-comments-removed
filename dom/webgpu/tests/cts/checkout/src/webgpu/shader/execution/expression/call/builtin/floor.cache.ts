import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
const
kSmallMagnitudeTestValues
=
[
0
.
1
0
.
9
1
.
0
1
.
1
1
.
9
-
0
.
1
-
0
.
9
-
1
.
0
-
1
.
1
-
1
.
9
]
;
const
kIssue2766Value
=
{
abstract
:
0x8000_0000_0000_0000
f32
:
0x8000_0000
f16
:
0x8000
}
;
const
cases
=
(
[
'
f32
'
'
f16
'
'
abstract
'
]
as
const
)
.
map
(
trait
=
>
(
{
[
{
trait
}
]
:
(
)
=
>
{
return
FP
[
trait
]
.
generateScalarToIntervalCases
(
[
.
.
.
kSmallMagnitudeTestValues
kIssue2766Value
[
trait
]
.
.
.
FP
[
trait
]
.
scalarRange
(
)
]
'
unfiltered
'
FP
[
trait
]
.
floorInterval
)
;
}
}
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
floor
'
cases
)
;
