import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
const
kDeterminantValues
=
[
-
38
-
10
-
5
-
1
0
1
5
10
38
]
;
const
kDeterminantMatrixValues
=
{
2
:
kDeterminantValues
.
map
(
(
f
idx
)
=
>
[
[
idx
%
4
=
=
=
0
?
f
:
idx
idx
%
4
=
=
=
1
?
f
:
-
idx
]
[
idx
%
4
=
=
=
2
?
f
:
-
idx
idx
%
4
=
=
=
3
?
f
:
idx
]
]
)
3
:
kDeterminantValues
.
map
(
(
f
idx
)
=
>
[
[
idx
%
9
=
=
=
0
?
f
:
idx
idx
%
9
=
=
=
1
?
f
:
-
idx
idx
%
9
=
=
=
2
?
f
:
idx
]
[
idx
%
9
=
=
=
3
?
f
:
-
idx
idx
%
9
=
=
=
4
?
f
:
idx
idx
%
9
=
=
=
5
?
f
:
-
idx
]
[
idx
%
9
=
=
=
6
?
f
:
idx
idx
%
9
=
=
=
7
?
f
:
-
idx
idx
%
9
=
=
=
8
?
f
:
idx
]
]
)
4
:
kDeterminantValues
.
map
(
(
f
idx
)
=
>
[
[
idx
%
16
=
=
=
0
?
f
:
idx
idx
%
16
=
=
=
1
?
f
:
-
idx
idx
%
16
=
=
=
2
?
f
:
idx
idx
%
16
=
=
=
3
?
f
:
-
idx
]
[
idx
%
16
=
=
=
4
?
f
:
-
idx
idx
%
16
=
=
=
5
?
f
:
idx
idx
%
16
=
=
=
6
?
f
:
-
idx
idx
%
16
=
=
=
7
?
f
:
idx
]
[
idx
%
16
=
=
=
8
?
f
:
idx
idx
%
16
=
=
=
9
?
f
:
-
idx
idx
%
16
=
=
=
10
?
f
:
idx
idx
%
16
=
=
=
11
?
f
:
-
idx
]
[
idx
%
16
=
=
=
12
?
f
:
-
idx
idx
%
16
=
=
=
13
?
f
:
idx
idx
%
16
=
=
=
14
?
f
:
-
idx
idx
%
16
=
=
=
15
?
f
:
idx
]
]
)
}
;
const
f32_cases
=
(
[
2
3
4
]
as
const
)
.
flatMap
(
dim
=
>
(
[
true
false
]
as
const
)
.
map
(
nonConst
=
>
(
{
[
f32_mat
{
dim
}
x
{
dim
}
_
{
nonConst
?
'
non_const
'
:
'
const
'
}
]
:
(
)
=
>
{
return
FP
.
f32
.
generateMatrixToScalarCases
(
kDeterminantMatrixValues
[
dim
]
nonConst
?
'
unfiltered
'
:
'
finite
'
FP
.
f32
.
determinantInterval
)
;
}
}
)
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
const
f16_cases
=
(
[
2
3
4
]
as
const
)
.
flatMap
(
dim
=
>
(
[
true
false
]
as
const
)
.
map
(
nonConst
=
>
(
{
[
f16_mat
{
dim
}
x
{
dim
}
_
{
nonConst
?
'
non_const
'
:
'
const
'
}
]
:
(
)
=
>
{
return
FP
.
f16
.
generateMatrixToScalarCases
(
kDeterminantMatrixValues
[
dim
]
nonConst
?
'
unfiltered
'
:
'
finite
'
FP
.
f16
.
determinantInterval
)
;
}
}
)
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
const
abstract_cases
=
(
[
2
3
4
]
as
const
)
.
map
(
dim
=
>
(
{
[
abstract_mat
{
dim
}
x
{
dim
}
]
:
(
)
=
>
{
return
FP
.
abstract
.
generateMatrixToScalarCases
(
kDeterminantMatrixValues
[
dim
]
'
finite
'
FP
.
f32
.
determinantInterval
)
;
}
}
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
determinant
'
{
.
.
.
f32_cases
.
.
.
f16_cases
.
.
.
abstract_cases
}
)
;
