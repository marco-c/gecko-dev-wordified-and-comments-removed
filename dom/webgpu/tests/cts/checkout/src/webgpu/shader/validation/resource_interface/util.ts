export
type
ResourceDeclarationEmitter
=
(
name
:
string
group
?
:
number
binding
?
:
number
)
=
>
string
;
function
groupAndBinding
(
group
?
:
number
binding
?
:
number
)
:
string
{
return
(
{
group
!
=
=
undefined
?
group
(
{
group
}
)
:
'
/
*
no
group
*
/
'
}
+
{
binding
!
=
=
undefined
?
binding
(
{
binding
}
)
:
'
/
*
no
binding
*
/
'
}
)
;
}
function
basicEmitter
(
type
:
string
)
:
ResourceDeclarationEmitter
{
return
(
name
:
string
group
?
:
number
binding
?
:
number
)
=
>
{
groupAndBinding
(
group
binding
)
}
var
{
name
}
:
{
type
}
;
\
n
;
}
export
const
kResourceEmitters
=
new
Map
<
string
ResourceDeclarationEmitter
>
(
[
[
'
texture_1d
'
basicEmitter
(
'
texture_1d
<
i32
>
'
)
]
[
'
texture_2d
'
basicEmitter
(
'
texture_2d
<
i32
>
'
)
]
[
'
texture_2d_array
'
basicEmitter
(
'
texture_2d_array
<
f32
>
'
)
]
[
'
texture_3d
'
basicEmitter
(
'
texture_3d
<
i32
>
'
)
]
[
'
texture_cube
'
basicEmitter
(
'
texture_cube
<
u32
>
'
)
]
[
'
texture_cube_array
'
basicEmitter
(
'
texture_cube_array
<
u32
>
'
)
]
[
'
texture_multisampled_2d
'
basicEmitter
(
'
texture_multisampled_2d
<
i32
>
'
)
]
[
'
texture_external
'
basicEmitter
(
'
texture_external
'
)
]
[
'
texture_storage_1d
'
basicEmitter
(
'
texture_storage_1d
<
rgba8unorm
write
>
'
)
]
[
'
texture_storage_2d
'
basicEmitter
(
'
texture_storage_2d
<
rgba8sint
write
>
'
)
]
[
'
texture_storage_2d_array
'
basicEmitter
(
'
texture_storage_2d_array
<
r32uint
write
>
'
)
]
[
'
texture_storage_3d
'
basicEmitter
(
'
texture_storage_3d
<
rg32uint
write
>
'
)
]
[
'
texture_depth_2d
'
basicEmitter
(
'
texture_depth_2d
'
)
]
[
'
texture_depth_2d_array
'
basicEmitter
(
'
texture_depth_2d_array
'
)
]
[
'
texture_depth_cube
'
basicEmitter
(
'
texture_depth_cube
'
)
]
[
'
texture_depth_cube_array
'
basicEmitter
(
'
texture_depth_cube_array
'
)
]
[
'
texture_depth_multisampled_2d
'
basicEmitter
(
'
texture_depth_multisampled_2d
'
)
]
[
'
sampler
'
basicEmitter
(
'
sampler
'
)
]
[
'
sampler_comparison
'
basicEmitter
(
'
sampler_comparison
'
)
]
[
'
uniform
'
(
name
:
string
group
?
:
number
binding
?
:
number
)
=
>
{
groupAndBinding
(
group
binding
)
}
var
<
uniform
>
{
name
}
:
array
<
vec4
<
f32
>
16
>
;
\
n
]
[
'
storage
'
(
name
:
string
group
?
:
number
binding
?
:
number
)
=
>
{
groupAndBinding
(
group
binding
)
}
var
<
storage
>
{
name
}
:
array
<
vec4
<
f32
>
16
>
;
\
n
]
]
)
;
export
const
kResourceKindsA
=
[
'
storage
'
'
texture_2d
'
'
texture_external
'
'
uniform
'
]
;
export
const
kResourceKindsB
=
[
'
texture_3d
'
'
texture_storage_1d
'
'
uniform
'
]
;
export
type
ShaderStage
=
'
vertex
'
|
'
fragment
'
|
'
compute
'
;
export
function
declareEntrypoint
(
name
:
string
stage
:
ShaderStage
body
:
string
)
:
string
{
switch
(
stage
)
{
case
'
vertex
'
:
return
vertex
fn
{
name
}
(
)
-
>
builtin
(
position
)
vec4f
{
{
body
}
return
vec4f
(
)
;
}
;
case
'
fragment
'
:
return
fragment
fn
{
name
}
(
)
{
{
body
}
}
;
case
'
compute
'
:
return
compute
workgroup_size
(
1
)
fn
{
name
}
(
)
{
{
body
}
}
;
}
}
