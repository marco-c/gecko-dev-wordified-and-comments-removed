export
const
description
=
Validation
tests
for
declarations
in
compound
statements
.
;
import
{
makeTestGroup
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
common
/
framework
/
test_group
.
js
'
;
import
{
keysOf
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
common
/
util
/
data_tables
.
js
'
;
import
{
ShaderValidationTest
}
from
'
.
.
/
shader_validation_test
.
js
'
;
export
const
g
=
makeTestGroup
(
ShaderValidationTest
)
;
const
kConflictTests
=
{
a
:
{
src
:
'
let
x
=
1
;
{
let
x
=
1
;
}
'
pass
:
true
}
bc
:
{
src
:
'
{
let
x
=
1
;
let
x
=
1
;
}
'
pass
:
false
}
d
:
{
src
:
'
{
let
x
=
1
;
{
let
x
=
1
;
}
}
'
pass
:
true
}
e
:
{
src
:
'
{
let
x
=
1
;
}
let
x
=
1
;
'
pass
:
true
}
}
;
g
.
test
(
'
decl_conflict
'
)
.
desc
(
'
Test
a
potentially
conflicting
declaration
relative
to
a
declaration
in
a
compound
statement
'
)
.
params
(
u
=
>
u
.
combine
(
'
case
'
keysOf
(
kConflictTests
)
)
)
.
fn
(
t
=
>
{
const
wgsl
=
vertex
fn
vtx
(
)
-
>
builtin
(
position
)
vec4f
{
{
kConflictTests
[
t
.
params
.
case
]
.
src
}
return
vec4f
(
1
)
;
}
;
t
.
expectCompileResult
(
kConflictTests
[
t
.
params
.
case
]
.
pass
wgsl
)
;
}
)
;
const
kUseTests
=
{
a
:
{
src
:
'
let
y
=
x
;
{
let
x
=
1
;
}
'
pass
:
false
}
b
:
{
src
:
'
{
let
y
=
x
;
let
x
=
1
;
}
'
pass
:
false
}
self
:
{
src
:
'
{
let
x
=
(
x
)
;
}
'
pass
:
false
}
c_yes
:
{
src
:
'
{
const
x
=
1
;
const_assert
x
=
=
1
;
}
'
pass
:
true
}
c_no
:
{
src
:
'
{
const
x
=
1
;
const_assert
x
=
=
2
;
}
'
pass
:
false
}
d_yes
:
{
src
:
'
{
const
x
=
1
;
{
const_assert
x
=
=
1
;
}
}
'
pass
:
true
}
d_no
:
{
src
:
'
{
const
x
=
1
;
{
const_assert
x
=
=
2
;
}
}
'
pass
:
false
}
e
:
{
src
:
'
{
const
x
=
1
;
}
let
y
=
x
;
'
pass
:
false
}
}
;
g
.
test
(
'
decl_use
'
)
.
desc
(
'
Test
a
use
of
a
declaration
in
a
compound
statement
'
)
.
params
(
u
=
>
u
.
combine
(
'
case
'
keysOf
(
kUseTests
)
)
)
.
fn
(
t
=
>
{
const
wgsl
=
vertex
fn
vtx
(
)
-
>
builtin
(
position
)
vec4f
{
{
kUseTests
[
t
.
params
.
case
]
.
src
}
return
vec4f
(
1
)
;
}
;
t
.
expectCompileResult
(
kUseTests
[
t
.
params
.
case
]
.
pass
wgsl
)
;
}
)
;
