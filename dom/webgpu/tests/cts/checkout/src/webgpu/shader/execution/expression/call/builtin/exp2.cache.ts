import
{
kValue
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
constants
.
js
'
;
import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
biasedRange
linearRange
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
math
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
const
f32_inputs
=
[
0
-
128
kValue
.
f32
.
negative
.
min
.
.
.
biasedRange
(
kValue
.
f32
.
negative
.
max
-
127
100
)
.
.
.
biasedRange
(
kValue
.
f32
.
positive
.
min
127
100
)
.
.
.
linearRange
(
128
1023
10
)
]
;
const
f16_inputs
=
[
0
-
16
kValue
.
f16
.
negative
.
min
.
.
.
biasedRange
(
kValue
.
f16
.
negative
.
max
-
15
100
)
.
.
.
biasedRange
(
kValue
.
f16
.
positive
.
min
15
100
)
.
.
.
linearRange
(
16
1023
10
)
]
;
export
const
d
=
makeCaseCache
(
'
exp2
'
{
f32_const
:
(
)
=
>
{
return
FP
.
f32
.
generateScalarToIntervalCases
(
f32_inputs
'
finite
'
FP
.
f32
.
exp2Interval
)
;
}
f32_non_const
:
(
)
=
>
{
return
FP
.
f32
.
generateScalarToIntervalCases
(
f32_inputs
'
unfiltered
'
FP
.
f32
.
exp2Interval
)
;
}
f16_const
:
(
)
=
>
{
return
FP
.
f16
.
generateScalarToIntervalCases
(
f16_inputs
'
finite
'
FP
.
f16
.
exp2Interval
)
;
}
f16_non_const
:
(
)
=
>
{
return
FP
.
f16
.
generateScalarToIntervalCases
(
f16_inputs
'
unfiltered
'
FP
.
f16
.
exp2Interval
)
;
}
abstract
:
(
)
=
>
{
return
FP
.
abstract
.
generateScalarToIntervalCases
(
f32_inputs
'
finite
'
FP
.
f32
.
exp2Interval
)
;
}
}
)
;
