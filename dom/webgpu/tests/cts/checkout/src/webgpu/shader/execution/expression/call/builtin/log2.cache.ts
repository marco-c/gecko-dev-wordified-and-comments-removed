import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
biasedRange
linearRange
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
math
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
const
cases
=
(
[
'
f32
'
'
f16
'
'
abstract
'
]
as
const
)
.
flatMap
(
trait
=
>
(
[
true
false
]
as
const
)
.
map
(
nonConst
=
>
(
{
[
{
trait
}
_
{
nonConst
?
'
non_const
'
:
'
const
'
}
]
:
(
)
=
>
{
if
(
trait
=
=
=
'
abstract
'
&
&
nonConst
)
{
return
[
]
;
}
return
FP
[
trait
]
.
generateScalarToIntervalCases
(
[
.
.
.
linearRange
(
FP
[
trait
]
.
constants
(
)
.
positive
.
min
0
.
5
20
)
.
.
.
linearRange
(
0
.
5
2
.
0
20
)
.
.
.
biasedRange
(
2
.
0
2
*
*
32
1000
)
.
.
.
FP
[
trait
]
.
scalarRange
(
)
]
nonConst
?
'
unfiltered
'
:
'
finite
'
FP
[
trait
!
=
=
'
abstract
'
?
trait
:
'
f32
'
]
.
log2Interval
)
;
}
}
)
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
log2
'
cases
)
;
