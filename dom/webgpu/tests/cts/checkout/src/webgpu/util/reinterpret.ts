import
{
Float16Array
}
from
'
.
.
/
.
.
/
external
/
petamoriken
/
float16
/
float16
.
js
'
;
const
workingData
=
new
ArrayBuffer
(
8
)
;
const
workingDataU32
=
new
Uint32Array
(
workingData
)
;
const
workingDataU16
=
new
Uint16Array
(
workingData
)
;
const
workingDataF32
=
new
Float32Array
(
workingData
)
;
const
workingDataF16
=
new
Float16Array
(
workingData
)
;
const
workingDataI32
=
new
Int32Array
(
workingData
)
;
const
workingDataF64
=
new
Float64Array
(
workingData
)
;
const
workingDataU64
=
new
BigUint64Array
(
workingData
)
;
export
function
reinterpretU64AsF64
(
input
:
bigint
)
:
number
{
workingDataU64
[
0
]
=
input
;
return
workingDataF64
[
0
]
;
}
export
function
reinterpretF64AsU64
(
input
:
number
)
:
bigint
{
workingDataF64
[
0
]
=
input
;
return
workingDataU64
[
0
]
;
}
export
function
reinterpretF64AsU32s
(
f64
:
number
)
:
[
number
number
]
{
workingDataF64
[
0
]
=
f64
;
return
[
workingDataU32
[
0
]
workingDataU32
[
1
]
]
;
}
export
function
reinterpretU32sAsF64
(
u32s
:
[
number
number
]
)
:
number
{
workingDataU32
[
0
]
=
u32s
[
0
]
;
workingDataU32
[
1
]
=
u32s
[
1
]
;
return
workingDataF64
[
0
]
;
}
export
function
reinterpretF32AsU32
(
f32
:
number
)
:
number
{
workingDataF32
[
0
]
=
f32
;
return
workingDataU32
[
0
]
;
}
export
function
reinterpretF32AsI32
(
f32
:
number
)
:
number
{
workingDataF32
[
0
]
=
f32
;
return
workingDataI32
[
0
]
;
}
export
function
reinterpretU32AsF32
(
u32
:
number
)
:
number
{
workingDataU32
[
0
]
=
u32
;
return
workingDataF32
[
0
]
;
}
export
function
reinterpretU32AsI32
(
u32
:
number
)
:
number
{
workingDataU32
[
0
]
=
u32
;
return
workingDataI32
[
0
]
;
}
export
function
reinterpretI32AsU32
(
i32
:
number
)
:
number
{
workingDataI32
[
0
]
=
i32
;
return
workingDataU32
[
0
]
;
}
export
function
reinterpretI32AsF32
(
i32
:
number
)
:
number
{
workingDataI32
[
0
]
=
i32
;
return
workingDataF32
[
0
]
;
}
export
function
reinterpretF16AsU16
(
f16
:
number
)
:
number
{
workingDataF16
[
0
]
=
f16
;
return
workingDataU16
[
0
]
;
}
export
function
reinterpretU16AsF16
(
u16
:
number
)
:
number
{
workingDataU16
[
0
]
=
u16
;
return
workingDataF16
[
0
]
;
}
