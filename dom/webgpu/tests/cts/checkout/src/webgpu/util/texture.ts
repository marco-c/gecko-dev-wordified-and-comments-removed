import
{
assert
}
from
'
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
import
{
getTextureCopyLayout
}
from
'
.
/
texture
/
layout
.
js
'
;
import
{
TexelView
}
from
'
.
/
texture
/
texel_view
.
js
'
;
import
{
reifyExtent3D
}
from
'
.
/
unions
.
js
'
;
export
function
createTextureFromTexelViews
(
device
:
GPUDevice
texelViews
:
TexelView
[
]
desc
:
Omit
<
GPUTextureDescriptor
'
format
'
>
)
:
GPUTexture
{
assert
(
texelViews
.
length
>
0
&
&
texelViews
.
every
(
e
=
>
e
.
format
=
=
=
texelViews
[
0
]
.
format
)
)
;
const
format
=
texelViews
[
0
]
.
format
;
const
{
width
height
depthOrArrayLayers
}
=
reifyExtent3D
(
desc
.
size
)
;
const
texture
=
device
.
createTexture
(
{
.
.
.
desc
format
:
texelViews
[
0
]
.
format
usage
:
desc
.
usage
|
GPUTextureUsage
.
COPY_DST
mipLevelCount
:
texelViews
.
length
}
)
;
const
commandEncoder
=
device
.
createCommandEncoder
(
)
;
const
stagingBuffers
=
[
]
;
for
(
let
mipLevel
=
0
;
mipLevel
<
texelViews
.
length
;
mipLevel
+
+
)
{
const
{
bytesPerRow
mipSize
:
[
mipWidth
mipHeight
mipDepthOrArray
]
}
=
getTextureCopyLayout
(
format
desc
.
dimension
?
?
'
2d
'
[
width
height
depthOrArrayLayers
]
{
mipLevel
}
)
;
const
stagingBuffer
=
device
.
createBuffer
(
{
mappedAtCreation
:
true
size
:
bytesPerRow
*
mipHeight
*
mipDepthOrArray
usage
:
GPUBufferUsage
.
COPY_SRC
}
)
;
stagingBuffers
.
push
(
stagingBuffer
)
;
texelViews
[
mipLevel
]
.
writeTextureData
(
new
Uint8Array
(
stagingBuffer
.
getMappedRange
(
)
)
{
bytesPerRow
rowsPerImage
:
mipHeight
subrectOrigin
:
[
0
0
0
]
subrectSize
:
[
mipWidth
mipHeight
mipDepthOrArray
]
}
)
;
stagingBuffer
.
unmap
(
)
;
commandEncoder
.
copyBufferToTexture
(
{
buffer
:
stagingBuffer
bytesPerRow
}
{
texture
mipLevel
}
[
mipWidth
mipHeight
mipDepthOrArray
]
)
;
}
device
.
queue
.
submit
(
[
commandEncoder
.
finish
(
)
]
)
;
stagingBuffers
.
forEach
(
value
=
>
value
.
destroy
(
)
)
;
return
texture
;
}
export
function
createTextureFromTexelView
(
device
:
GPUDevice
texelView
:
TexelView
desc
:
Omit
<
GPUTextureDescriptor
'
format
'
>
)
:
GPUTexture
{
return
createTextureFromTexelViews
(
device
[
texelView
]
desc
)
;
}
