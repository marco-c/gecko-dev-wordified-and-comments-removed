import
{
range
}
from
'
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
export
function
numericToStringBuilder
(
is_integer
:
boolean
)
:
(
n
:
number
|
bigint
)
=
>
string
{
if
(
is_integer
)
{
return
(
val
:
number
|
bigint
)
:
string
=
>
{
if
(
typeof
val
=
=
=
'
number
'
)
{
return
val
.
toFixed
(
)
;
}
return
val
.
toString
(
)
;
}
;
}
return
(
val
:
number
|
bigint
)
:
string
=
>
{
if
(
typeof
val
=
=
=
'
number
'
)
{
return
val
.
toPrecision
(
6
)
;
}
return
val
.
toString
(
)
;
}
;
}
export
function
generatePrettyTable
(
{
fillToWidth
numericToString
}
:
{
fillToWidth
:
number
;
numericToString
:
(
n
:
number
|
bigint
)
=
>
string
}
rows
:
ReadonlyArray
<
Iterable
<
string
|
number
|
bigint
>
>
)
:
string
{
const
rowStrings
=
range
(
rows
.
length
(
)
=
>
'
'
)
;
let
totalTableWidth
=
0
;
const
iters
=
rows
.
map
(
row
=
>
row
[
Symbol
.
iterator
]
(
)
)
;
for
(
;
;
)
{
const
cellsForColumn
=
iters
.
map
(
iter
=
>
{
const
r
=
iter
.
next
(
)
;
if
(
r
.
done
)
{
return
undefined
;
}
if
(
typeof
r
.
value
=
=
=
'
number
'
|
|
typeof
r
.
value
=
=
=
'
bigint
'
)
{
return
numericToString
(
r
.
value
)
;
}
return
r
.
value
;
}
)
;
if
(
cellsForColumn
.
every
(
cell
=
>
cell
=
=
=
undefined
)
)
break
;
const
colWidth
=
Math
.
max
(
.
.
.
cellsForColumn
.
map
(
c
=
>
(
c
=
=
=
undefined
?
0
:
c
.
length
)
)
)
+
1
;
for
(
let
row
=
0
;
row
<
rowStrings
.
length
;
+
+
row
)
{
const
cell
=
cellsForColumn
[
row
]
;
if
(
cell
!
=
=
undefined
)
{
rowStrings
[
row
]
+
=
cell
.
padStart
(
colWidth
)
;
}
}
totalTableWidth
+
=
colWidth
;
if
(
totalTableWidth
>
=
fillToWidth
)
{
for
(
let
row
=
0
;
row
<
rowStrings
.
length
;
+
+
row
)
{
if
(
cellsForColumn
[
row
]
!
=
=
undefined
)
{
rowStrings
[
row
]
+
=
'
.
.
.
'
;
}
}
break
;
}
}
return
rowStrings
.
join
(
'
\
n
'
)
;
}
