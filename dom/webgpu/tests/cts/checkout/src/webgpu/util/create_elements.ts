import
{
Fixture
}
from
'
.
.
/
.
.
/
common
/
framework
/
fixture
.
js
'
;
import
{
unreachable
}
from
'
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
export
const
kAllCanvasTypes
=
[
'
onscreen
'
'
offscreen
'
]
as
const
;
export
type
CanvasType
=
typeof
kAllCanvasTypes
[
number
]
;
type
CanvasForCanvasType
<
T
extends
CanvasType
>
=
{
onscreen
:
HTMLCanvasElement
;
offscreen
:
OffscreenCanvas
;
}
[
T
]
;
export
const
kValidCanvasContextIds
=
[
'
2d
'
'
bitmaprenderer
'
'
webgl
'
'
webgl2
'
'
webgpu
'
]
as
const
;
export
type
CanvasContext
=
typeof
kValidCanvasContextIds
[
number
]
;
export
function
canCopyFromCanvasContext
(
contextName
:
CanvasContext
)
{
switch
(
contextName
)
{
case
'
2d
'
:
case
'
webgl
'
:
case
'
webgl2
'
:
case
'
webgpu
'
:
return
true
;
default
:
return
false
;
}
}
export
function
createCanvas
<
T
extends
CanvasType
>
(
test
:
Fixture
canvasType
:
T
width
:
number
height
:
number
)
:
CanvasForCanvasType
<
T
>
{
if
(
canvasType
=
=
=
'
onscreen
'
)
{
if
(
typeof
document
!
=
=
'
undefined
'
)
{
return
createOnscreenCanvas
(
test
width
height
)
as
CanvasForCanvasType
<
T
>
;
}
else
{
test
.
skip
(
'
Cannot
create
HTMLCanvasElement
'
)
;
}
}
else
if
(
canvasType
=
=
=
'
offscreen
'
)
{
if
(
typeof
OffscreenCanvas
!
=
=
'
undefined
'
)
{
return
createOffscreenCanvas
(
test
width
height
)
as
CanvasForCanvasType
<
T
>
;
}
else
{
test
.
skip
(
'
Cannot
create
an
OffscreenCanvas
'
)
;
}
}
else
{
unreachable
(
)
;
}
}
export
function
createOnscreenCanvas
(
test
:
Fixture
width
:
number
height
:
number
)
:
HTMLCanvasElement
{
let
canvas
:
HTMLCanvasElement
;
if
(
typeof
document
!
=
=
'
undefined
'
)
{
canvas
=
document
.
createElement
(
'
canvas
'
)
;
canvas
.
width
=
width
;
canvas
.
height
=
height
;
}
else
{
test
.
skip
(
'
Cannot
create
HTMLCanvasElement
'
)
;
}
return
canvas
;
}
export
function
createOffscreenCanvas
(
test
:
Fixture
width
:
number
height
:
number
)
:
OffscreenCanvas
{
if
(
typeof
OffscreenCanvas
=
=
=
'
undefined
'
)
{
test
.
skip
(
'
OffscreenCanvas
is
not
supported
'
)
;
}
return
new
OffscreenCanvas
(
width
height
)
;
}
