import
{
assert
memcpy
}
from
'
.
.
/
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
import
{
EncodableTextureFormat
kTextureFormatInfo
resolvePerAspectFormat
SizedTextureFormat
}
from
'
.
.
/
.
.
/
capability_info
.
js
'
;
import
{
align
}
from
'
.
.
/
math
.
js
'
;
import
{
reifyExtent3D
}
from
'
.
.
/
unions
.
js
'
;
import
{
physicalMipSize
virtualMipSize
}
from
'
.
/
base
.
js
'
;
export
const
kBytesPerRowAlignment
=
256
;
export
const
kBufferCopyAlignment
=
4
;
export
interface
LayoutOptions
{
mipLevel
:
number
;
bytesPerRow
?
:
number
;
rowsPerImage
?
:
number
;
aspect
?
:
GPUTextureAspect
;
}
const
kDefaultLayoutOptions
=
{
mipLevel
:
0
bytesPerRow
:
undefined
rowsPerImage
:
undefined
aspect
:
'
all
'
as
const
}
;
export
interface
TextureSubCopyLayout
{
bytesPerBlock
:
number
;
byteLength
:
number
;
minBytesPerRow
:
number
;
bytesPerRow
:
number
;
rowsPerImage
:
number
;
}
export
interface
TextureCopyLayout
extends
TextureSubCopyLayout
{
mipSize
:
[
number
number
number
]
;
}
export
function
getTextureCopyLayout
(
format
:
GPUTextureFormat
dimension
:
GPUTextureDimension
baseSize
:
readonly
[
number
number
number
]
{
mipLevel
bytesPerRow
rowsPerImage
aspect
}
:
LayoutOptions
=
kDefaultLayoutOptions
)
:
TextureCopyLayout
{
const
mipSize
=
physicalMipSize
(
{
width
:
baseSize
[
0
]
height
:
baseSize
[
1
]
depthOrArrayLayers
:
baseSize
[
2
]
}
format
dimension
mipLevel
)
;
const
layout
=
getTextureSubCopyLayout
(
format
mipSize
{
bytesPerRow
rowsPerImage
aspect
}
)
;
return
{
.
.
.
layout
mipSize
:
[
mipSize
.
width
mipSize
.
height
mipSize
.
depthOrArrayLayers
]
}
;
}
export
function
getTextureSubCopyLayout
(
format
:
GPUTextureFormat
copySize
:
GPUExtent3D
{
bytesPerRow
rowsPerImage
aspect
=
'
all
'
as
const
}
:
{
readonly
bytesPerRow
?
:
number
;
readonly
rowsPerImage
?
:
number
;
readonly
aspect
?
:
GPUTextureAspect
;
}
=
{
}
)
:
TextureSubCopyLayout
{
format
=
resolvePerAspectFormat
(
format
aspect
)
;
const
{
blockWidth
blockHeight
bytesPerBlock
}
=
kTextureFormatInfo
[
format
]
;
assert
(
bytesPerBlock
!
=
=
undefined
)
;
const
copySize_
=
reifyExtent3D
(
copySize
)
;
assert
(
copySize_
.
width
>
0
&
&
copySize_
.
height
>
0
&
&
copySize_
.
depthOrArrayLayers
>
0
'
not
implemented
for
empty
copySize
'
)
;
assert
(
copySize_
.
width
%
blockWidth
=
=
=
0
&
&
copySize_
.
height
%
blockHeight
=
=
=
0
'
copySize
must
be
a
multiple
of
the
block
size
'
)
;
const
copySizeBlocks
=
{
width
:
copySize_
.
width
/
blockWidth
height
:
copySize_
.
height
/
blockHeight
depthOrArrayLayers
:
copySize_
.
depthOrArrayLayers
}
;
const
minBytesPerRow
=
copySizeBlocks
.
width
*
bytesPerBlock
;
const
alignedMinBytesPerRow
=
align
(
minBytesPerRow
kBytesPerRowAlignment
)
;
if
(
bytesPerRow
!
=
=
undefined
)
{
assert
(
bytesPerRow
>
=
alignedMinBytesPerRow
)
;
assert
(
bytesPerRow
%
kBytesPerRowAlignment
=
=
=
0
)
;
}
else
{
bytesPerRow
=
alignedMinBytesPerRow
;
}
if
(
rowsPerImage
!
=
=
undefined
)
{
assert
(
rowsPerImage
>
=
copySizeBlocks
.
height
)
;
}
else
{
rowsPerImage
=
copySizeBlocks
.
height
;
}
const
bytesPerSlice
=
bytesPerRow
*
rowsPerImage
;
const
sliceSize
=
bytesPerRow
*
(
copySizeBlocks
.
height
-
1
)
+
bytesPerBlock
*
copySizeBlocks
.
width
;
const
byteLength
=
bytesPerSlice
*
(
copySizeBlocks
.
depthOrArrayLayers
-
1
)
+
sliceSize
;
return
{
bytesPerBlock
byteLength
:
align
(
byteLength
kBufferCopyAlignment
)
minBytesPerRow
bytesPerRow
rowsPerImage
}
;
}
export
function
fillTextureDataWithTexelValue
(
texelValue
:
ArrayBuffer
format
:
EncodableTextureFormat
dimension
:
GPUTextureDimension
outputBuffer
:
ArrayBuffer
size
:
[
number
number
number
]
options
:
LayoutOptions
=
kDefaultLayoutOptions
)
:
void
{
const
{
blockWidth
blockHeight
bytesPerBlock
}
=
kTextureFormatInfo
[
format
]
;
assert
(
blockWidth
=
=
=
1
)
;
assert
(
blockHeight
=
=
=
1
)
;
assert
(
bytesPerBlock
=
=
=
texelValue
.
byteLength
'
texelValue
must
be
of
size
bytesPerBlock
'
)
;
const
{
byteLength
rowsPerImage
bytesPerRow
}
=
getTextureCopyLayout
(
format
dimension
size
options
)
;
assert
(
byteLength
<
=
outputBuffer
.
byteLength
)
;
const
mipSize
=
virtualMipSize
(
dimension
size
options
.
mipLevel
)
;
const
outputTexelValueBytes
=
new
Uint8Array
(
outputBuffer
)
;
for
(
let
slice
=
0
;
slice
<
mipSize
[
2
]
;
+
+
slice
)
{
for
(
let
row
=
0
;
row
<
mipSize
[
1
]
;
row
+
=
blockHeight
)
{
for
(
let
col
=
0
;
col
<
mipSize
[
0
]
;
col
+
=
blockWidth
)
{
const
byteOffset
=
slice
*
rowsPerImage
*
bytesPerRow
+
row
*
bytesPerRow
+
col
*
texelValue
.
byteLength
;
memcpy
(
{
src
:
texelValue
}
{
dst
:
outputTexelValueBytes
start
:
byteOffset
}
)
;
}
}
}
}
export
function
createTextureUploadBuffer
(
texelValue
:
ArrayBuffer
device
:
GPUDevice
format
:
EncodableTextureFormat
dimension
:
GPUTextureDimension
size
:
[
number
number
number
]
options
:
LayoutOptions
=
kDefaultLayoutOptions
)
:
{
buffer
:
GPUBuffer
;
bytesPerRow
:
number
;
rowsPerImage
:
number
;
}
{
const
{
byteLength
bytesPerRow
rowsPerImage
bytesPerBlock
}
=
getTextureCopyLayout
(
format
dimension
size
options
)
;
const
buffer
=
device
.
createBuffer
(
{
mappedAtCreation
:
true
size
:
byteLength
usage
:
GPUBufferUsage
.
COPY_SRC
}
)
;
const
mapping
=
buffer
.
getMappedRange
(
)
;
assert
(
texelValue
.
byteLength
=
=
=
bytesPerBlock
)
;
fillTextureDataWithTexelValue
(
texelValue
format
dimension
mapping
size
options
)
;
buffer
.
unmap
(
)
;
return
{
buffer
bytesPerRow
rowsPerImage
}
;
}
export
type
ImageCopyType
=
'
WriteTexture
'
|
'
CopyB2T
'
|
'
CopyT2B
'
;
export
const
kImageCopyTypes
:
readonly
ImageCopyType
[
]
=
[
'
WriteTexture
'
'
CopyB2T
'
'
CopyT2B
'
]
as
const
;
export
function
bytesInACompleteRow
(
copyWidth
:
number
format
:
SizedTextureFormat
)
:
number
{
const
info
=
kTextureFormatInfo
[
format
]
;
assert
(
copyWidth
%
info
.
blockWidth
=
=
=
0
)
;
return
(
info
.
bytesPerBlock
*
copyWidth
)
/
info
.
blockWidth
;
}
function
validateBytesPerRow
(
{
bytesPerRow
bytesInLastRow
sizeInBlocks
}
:
{
bytesPerRow
:
number
|
undefined
;
bytesInLastRow
:
number
;
sizeInBlocks
:
Required
<
GPUExtent3DDict
>
;
}
)
{
if
(
bytesPerRow
!
=
=
undefined
&
&
bytesPerRow
<
bytesInLastRow
)
{
return
false
;
}
if
(
bytesPerRow
=
=
=
undefined
&
&
(
sizeInBlocks
.
height
>
1
|
|
sizeInBlocks
.
depthOrArrayLayers
>
1
)
)
{
return
false
;
}
return
true
;
}
function
validateRowsPerImage
(
{
rowsPerImage
sizeInBlocks
}
:
{
rowsPerImage
:
number
|
undefined
;
sizeInBlocks
:
Required
<
GPUExtent3DDict
>
;
}
)
{
if
(
rowsPerImage
!
=
=
undefined
&
&
rowsPerImage
<
sizeInBlocks
.
height
)
{
return
false
;
}
if
(
rowsPerImage
=
=
=
undefined
&
&
sizeInBlocks
.
depthOrArrayLayers
>
1
)
{
return
false
;
}
return
true
;
}
interface
DataBytesForCopyArgs
{
layout
:
GPUImageDataLayout
;
format
:
SizedTextureFormat
;
copySize
:
Readonly
<
GPUExtent3DDict
>
|
readonly
number
[
]
;
method
:
ImageCopyType
;
}
export
function
dataBytesForCopyOrFail
(
args
:
DataBytesForCopyArgs
)
:
number
{
const
{
minDataSizeOrOverestimate
copyValid
}
=
dataBytesForCopyOrOverestimate
(
args
)
;
assert
(
copyValid
'
copy
was
invalid
'
)
;
return
minDataSizeOrOverestimate
;
}
export
function
dataBytesForCopyOrOverestimate
(
{
layout
format
copySize
:
copySize_
method
}
:
DataBytesForCopyArgs
)
:
{
minDataSizeOrOverestimate
:
number
;
copyValid
:
boolean
}
{
const
copyExtent
=
reifyExtent3D
(
copySize_
)
;
const
info
=
kTextureFormatInfo
[
format
]
;
assert
(
copyExtent
.
width
%
info
.
blockWidth
=
=
=
0
)
;
assert
(
copyExtent
.
height
%
info
.
blockHeight
=
=
=
0
)
;
const
sizeInBlocks
=
{
width
:
copyExtent
.
width
/
info
.
blockWidth
height
:
copyExtent
.
height
/
info
.
blockHeight
depthOrArrayLayers
:
copyExtent
.
depthOrArrayLayers
}
as
const
;
const
bytesInLastRow
=
sizeInBlocks
.
width
*
info
.
bytesPerBlock
;
let
valid
=
true
;
const
offset
=
layout
.
offset
?
?
0
;
if
(
method
!
=
=
'
WriteTexture
'
)
{
if
(
offset
%
info
.
bytesPerBlock
!
=
=
0
)
valid
=
false
;
if
(
layout
.
bytesPerRow
&
&
layout
.
bytesPerRow
%
256
!
=
=
0
)
valid
=
false
;
}
let
requiredBytesInCopy
=
0
;
{
let
{
bytesPerRow
rowsPerImage
}
=
layout
;
if
(
!
validateBytesPerRow
(
{
bytesPerRow
bytesInLastRow
sizeInBlocks
}
)
)
{
bytesPerRow
=
undefined
;
valid
=
false
;
}
if
(
!
validateRowsPerImage
(
{
rowsPerImage
sizeInBlocks
}
)
)
{
rowsPerImage
=
undefined
;
valid
=
false
;
}
bytesPerRow
?
?
=
align
(
info
.
bytesPerBlock
*
sizeInBlocks
.
width
256
)
;
rowsPerImage
?
?
=
sizeInBlocks
.
height
;
if
(
copyExtent
.
depthOrArrayLayers
>
1
)
{
const
bytesPerImage
=
bytesPerRow
*
rowsPerImage
;
const
bytesBeforeLastImage
=
bytesPerImage
*
(
copyExtent
.
depthOrArrayLayers
-
1
)
;
requiredBytesInCopy
+
=
bytesBeforeLastImage
;
}
if
(
copyExtent
.
depthOrArrayLayers
>
0
)
{
if
(
sizeInBlocks
.
height
>
1
)
requiredBytesInCopy
+
=
bytesPerRow
*
(
sizeInBlocks
.
height
-
1
)
;
if
(
sizeInBlocks
.
height
>
0
)
requiredBytesInCopy
+
=
bytesInLastRow
;
}
}
return
{
minDataSizeOrOverestimate
:
offset
+
requiredBytesInCopy
copyValid
:
valid
}
;
}
