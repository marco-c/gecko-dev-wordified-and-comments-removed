import
{
assert
}
from
'
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
import
{
kValue
}
from
'
.
/
constants
.
js
'
;
export
class
PRNG
{
private
readonly
t_vars
:
Uint32Array
;
private
readonly
n_vars
:
Uint32Array
;
private
readonly
state
:
Uint32Array
;
private
static
readonly
kMat1
:
number
=
0x8f7011ee
;
private
static
readonly
kMat2
:
number
=
0xfc78ff1f
;
private
static
readonly
kTMat
:
number
=
0x3793fdff
;
private
static
readonly
kMask
=
0x7fffffff
;
private
static
readonly
kMinLoop
=
8
;
private
static
readonly
kPreLoop
=
8
;
private
static
readonly
kSH0
=
1
;
private
static
readonly
kSH1
=
10
;
private
static
readonly
kSH8
=
8
;
private
static
readonly
kRandomDivisor
=
4294967296
.
0
;
constructor
(
seed
:
number
)
{
assert
(
seed
>
=
0
&
&
seed
<
=
kValue
.
u32
.
max
'
seed
to
PRNG
needs
to
a
u32
'
)
;
this
.
t_vars
=
new
Uint32Array
(
2
)
;
this
.
n_vars
=
new
Uint32Array
(
2
)
;
this
.
state
=
new
Uint32Array
(
[
Math
.
round
(
seed
)
PRNG
.
kMat1
PRNG
.
kMat2
PRNG
.
kTMat
]
)
;
for
(
let
i
=
1
;
i
<
PRNG
.
kMinLoop
;
i
+
+
)
{
this
.
state
[
i
&
3
]
^
=
i
+
Math
.
imul
(
1812433253
this
.
state
[
(
i
-
1
)
&
3
]
^
(
this
.
state
[
(
i
-
1
)
&
3
]
>
>
>
30
)
)
;
}
assert
(
(
this
.
state
[
0
]
&
PRNG
.
kMask
)
!
=
=
0
|
|
this
.
state
[
1
]
!
=
=
0
|
|
this
.
state
[
2
]
!
=
=
0
|
|
this
.
state
[
2
]
!
=
=
0
'
Initialization
of
PRNG
unexpectedly
generated
all
0s
initial
state
this
means
the
tuning
parameters
are
bad
'
)
;
for
(
let
i
=
0
;
i
<
PRNG
.
kPreLoop
;
i
+
+
)
{
this
.
next
(
)
;
}
}
private
next
(
)
{
this
.
n_vars
[
0
]
=
(
this
.
state
[
0
]
&
PRNG
.
kMask
)
^
this
.
state
[
1
]
^
this
.
state
[
2
]
;
this
.
n_vars
[
1
]
=
this
.
state
[
3
]
;
this
.
n_vars
[
0
]
^
=
this
.
n_vars
[
0
]
<
<
PRNG
.
kSH0
;
this
.
n_vars
[
1
]
^
=
(
this
.
n_vars
[
1
]
>
>
>
PRNG
.
kSH0
)
^
this
.
n_vars
[
0
]
;
this
.
state
[
0
]
=
this
.
state
[
1
]
;
this
.
state
[
1
]
=
this
.
state
[
2
]
;
this
.
state
[
2
]
=
this
.
n_vars
[
0
]
^
(
this
.
n_vars
[
1
]
<
<
PRNG
.
kSH1
)
;
this
.
state
[
3
]
=
this
.
n_vars
[
1
]
;
if
(
(
this
.
n_vars
[
1
]
&
1
)
!
=
=
0
)
{
this
.
state
[
1
]
^
=
PRNG
.
kMat1
;
this
.
state
[
2
]
^
=
PRNG
.
kMat2
;
}
}
private
temper
(
)
:
number
{
this
.
t_vars
[
0
]
=
this
.
state
[
3
]
;
this
.
t_vars
[
1
]
=
this
.
state
[
0
]
+
(
this
.
state
[
2
]
>
>
>
PRNG
.
kSH8
)
;
this
.
t_vars
[
0
]
^
=
this
.
t_vars
[
1
]
;
if
(
(
this
.
t_vars
[
1
]
&
1
)
!
=
=
0
)
{
this
.
t_vars
[
0
]
^
=
PRNG
.
kTMat
;
}
return
this
.
t_vars
[
0
]
;
}
public
random
(
)
:
number
{
this
.
next
(
)
;
return
this
.
temper
(
)
/
PRNG
.
kRandomDivisor
;
}
public
randomU32
(
)
:
number
{
this
.
next
(
)
;
return
this
.
temper
(
)
;
}
}
