import
{
ResourceState
GPUTestBase
}
from
'
.
.
/
gpu_test
.
js
'
;
export
const
kRenderEncodeTypes
=
[
'
render
pass
'
'
render
bundle
'
]
as
const
;
export
type
RenderEncodeType
=
(
typeof
kRenderEncodeTypes
)
[
number
]
;
export
const
kProgrammableEncoderTypes
=
[
'
compute
pass
'
.
.
.
kRenderEncodeTypes
]
as
const
;
export
type
ProgrammableEncoderType
=
(
typeof
kProgrammableEncoderTypes
)
[
number
]
;
export
const
kEncoderTypes
=
[
'
non
-
pass
'
.
.
.
kProgrammableEncoderTypes
]
as
const
;
export
type
EncoderType
=
(
typeof
kEncoderTypes
)
[
number
]
;
type
EncoderByEncoderType
<
T
extends
EncoderType
>
=
{
'
non
-
pass
'
:
GPUCommandEncoder
;
'
compute
pass
'
:
GPUComputePassEncoder
;
'
render
pass
'
:
GPURenderPassEncoder
;
'
render
bundle
'
:
GPURenderBundleEncoder
;
}
[
T
]
;
export
class
CommandBufferMaker
<
T
extends
EncoderType
>
{
readonly
encoder
:
EncoderByEncoderType
<
T
>
;
readonly
finish
:
(
)
=
>
GPUCommandBuffer
;
readonly
validateFinish
:
(
shouldSucceed
:
boolean
)
=
>
GPUCommandBuffer
;
readonly
validateFinishAndSubmit
:
(
shouldBeValid
:
boolean
submitShouldSucceedIfValid
:
boolean
)
=
>
void
;
readonly
validateFinishAndSubmitGivenState
:
(
resourceState
:
ResourceState
)
=
>
void
;
constructor
(
t
:
GPUTestBase
encoder
:
EncoderByEncoderType
<
EncoderType
>
finish
:
(
)
=
>
GPUCommandBuffer
)
{
this
.
encoder
=
encoder
as
EncoderByEncoderType
<
T
>
;
this
.
finish
=
finish
;
this
.
validateFinish
=
(
shouldSucceed
:
boolean
)
=
>
{
return
t
.
expectGPUError
(
'
validation
'
this
.
finish
!
shouldSucceed
)
;
}
;
this
.
validateFinishAndSubmit
=
(
shouldBeValid
:
boolean
submitShouldSucceedIfValid
:
boolean
)
=
>
{
const
commandBuffer
=
this
.
validateFinish
(
shouldBeValid
)
;
if
(
shouldBeValid
)
{
t
.
expectValidationError
(
(
)
=
>
t
.
queue
.
submit
(
[
commandBuffer
]
)
!
submitShouldSucceedIfValid
)
;
}
}
;
this
.
validateFinishAndSubmitGivenState
=
(
resourceState
:
ResourceState
)
=
>
{
this
.
validateFinishAndSubmit
(
resourceState
!
=
=
'
invalid
'
resourceState
!
=
=
'
destroyed
'
)
;
}
;
}
}
