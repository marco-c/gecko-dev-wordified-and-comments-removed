#
ifndef
GPU_AdapterLimitss_H_
#
define
GPU_AdapterLimitss_H_
#
include
"
nsWrapperCache
.
h
"
#
include
"
ObjectModel
.
h
"
namespace
mozilla
{
namespace
webgpu
{
namespace
ffi
{
struct
WGPULimits
;
}
class
Adapter
;
class
AdapterLimits
final
:
public
nsWrapperCache
public
ChildOf
<
Adapter
>
{
const
UniquePtr
<
ffi
:
:
WGPULimits
>
mLimits
;
public
:
GPU_DECL_CYCLE_COLLECTION
(
AdapterLimits
)
GPU_DECL_JS_WRAP
(
AdapterLimits
)
uint32_t
MaxTextureDimension1D
(
)
const
;
uint32_t
MaxTextureDimension2D
(
)
const
;
uint32_t
MaxTextureDimension3D
(
)
const
;
uint32_t
MaxTextureArrayLayers
(
)
const
;
uint32_t
MaxBindGroups
(
)
const
;
uint32_t
MaxDynamicUniformBuffersPerPipelineLayout
(
)
const
;
uint32_t
MaxDynamicStorageBuffersPerPipelineLayout
(
)
const
;
uint32_t
MaxSampledTexturesPerShaderStage
(
)
const
;
uint32_t
MaxSamplersPerShaderStage
(
)
const
;
uint32_t
MaxStorageBuffersPerShaderStage
(
)
const
;
uint32_t
MaxStorageTexturesPerShaderStage
(
)
const
;
uint32_t
MaxUniformBuffersPerShaderStage
(
)
const
;
uint32_t
MaxUniformBufferBindingSize
(
)
const
;
uint32_t
MaxStorageBufferBindingSize
(
)
const
;
uint32_t
MaxVertexBuffers
(
)
const
;
uint32_t
MaxVertexAttributes
(
)
const
;
uint32_t
MaxVertexBufferArrayStride
(
)
const
;
AdapterLimits
(
Adapter
*
const
aParent
const
ffi
:
:
WGPULimits
&
aLimits
)
;
private
:
~
AdapterLimits
(
)
;
void
Cleanup
(
)
{
}
}
;
}
}
#
endif
