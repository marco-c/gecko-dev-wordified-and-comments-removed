#
ifndef
GPU_ComputePassEncoder_H_
#
define
GPU_ComputePassEncoder_H_
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
webgpu
/
WebGPUTypes
.
h
"
#
include
"
mozilla
/
webgpu
/
ffi
/
wgpu
.
h
"
#
include
"
ObjectModel
.
h
"
namespace
mozilla
{
namespace
webgpu
{
class
BindGroup
;
class
Buffer
;
class
CommandEncoder
;
class
ComputePipeline
;
class
ComputePassEncoder
final
:
public
ObjectBase
public
ChildOf
<
CommandEncoder
>
{
public
:
GPU_DECL_CYCLE_COLLECTION
(
ComputePassEncoder
)
GPU_DECL_JS_WRAP
(
ComputePassEncoder
)
ComputePassEncoder
(
CommandEncoder
*
const
aParent
const
dom
:
:
GPUComputePassDescriptor
&
aDesc
)
;
private
:
virtual
~
ComputePassEncoder
(
)
;
void
Cleanup
(
)
{
}
ffi
:
:
WGPURawPass
mRaw
;
std
:
:
vector
<
RefPtr
<
const
BindGroup
>
>
mUsedBindGroups
;
std
:
:
vector
<
RefPtr
<
const
ComputePipeline
>
>
mUsedPipelines
;
public
:
void
SetBindGroup
(
uint32_t
aSlot
const
BindGroup
&
aBindGroup
const
dom
:
:
Sequence
<
uint32_t
>
&
aDynamicOffsets
)
;
void
SetPipeline
(
const
ComputePipeline
&
aPipeline
)
;
void
Dispatch
(
uint32_t
x
uint32_t
y
uint32_t
z
)
;
void
EndPass
(
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
