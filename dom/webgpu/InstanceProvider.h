#
ifndef
GPU_INSTANCE_PROVIDER_H_
#
define
GPU_INSTANCE_PROVIDER_H_
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
class
nsCycleCollectionTraversalCallback
;
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
webgpu
{
class
Instance
;
class
InstanceProvider
{
private
:
nsIGlobalObject
*
const
mGlobal
;
mutable
Maybe
<
RefPtr
<
Instance
>
>
mInstance
;
protected
:
explicit
InstanceProvider
(
nsIGlobalObject
*
global
)
;
virtual
~
InstanceProvider
(
)
;
public
:
already_AddRefed
<
Instance
>
Webgpu
(
)
const
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
void
CcTraverse
(
nsCycleCollectionTraversalCallback
&
)
const
;
void
CcUnlink
(
)
;
}
;
template
<
typename
T
>
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
callback
const
Maybe
<
T
>
&
field
const
char
*
name
uint32_t
flags
)
{
if
(
field
)
{
CycleCollectionNoteChild
(
callback
field
.
value
(
)
name
flags
)
;
}
}
template
<
typename
T
>
void
ImplCycleCollectionUnlink
(
Maybe
<
T
>
&
field
)
{
field
=
Nothing
(
)
;
}
}
}
#
endif
