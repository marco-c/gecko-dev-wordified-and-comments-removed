#
include
"
mozilla
/
dom
/
WebGPUBinding
.
h
"
#
include
"
CommandBuffer
.
h
"
#
include
"
ipc
/
WebGPUChild
.
h
"
#
include
"
mozilla
/
webgpu
/
CanvasContext
.
h
"
#
include
"
Device
.
h
"
namespace
mozilla
:
:
webgpu
{
GPU_IMPL_CYCLE_COLLECTION
(
CommandBuffer
mParent
)
GPU_IMPL_JS_WRAP
(
CommandBuffer
)
CommandBuffer
:
:
CommandBuffer
(
Device
*
const
aParent
RawId
aId
nsTArray
<
WeakPtr
<
CanvasContext
>
>
&
&
aTargetContexts
)
:
ChildOf
(
aParent
)
mId
(
aId
)
mTargetContexts
(
std
:
:
move
(
aTargetContexts
)
)
{
MOZ_RELEASE_ASSERT
(
aId
)
;
}
CommandBuffer
:
:
~
CommandBuffer
(
)
{
Cleanup
(
)
;
}
void
CommandBuffer
:
:
Cleanup
(
)
{
if
(
mValid
&
&
mParent
)
{
mValid
=
false
;
auto
bridge
=
mParent
-
>
GetBridge
(
)
;
if
(
bridge
&
&
bridge
-
>
IsOpen
(
)
)
{
bridge
-
>
SendCommandBufferDrop
(
mId
)
;
}
}
}
Maybe
<
RawId
>
CommandBuffer
:
:
Commit
(
)
{
if
(
!
mValid
)
{
return
Nothing
(
)
;
}
mValid
=
false
;
for
(
const
auto
&
targetContext
:
mTargetContexts
)
{
if
(
targetContext
)
{
targetContext
-
>
MaybeQueueSwapChainPresent
(
)
;
}
}
return
Some
(
mId
)
;
}
}
