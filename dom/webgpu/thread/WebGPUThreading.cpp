#
include
"
WebGPUThreading
.
h
"
#
include
"
mtransport
/
runnable_utils
.
h
"
namespace
mozilla
{
namespace
webgpu
{
static
StaticRefPtr
<
WebGPUThreading
>
sWebGPUThread
;
WebGPUThreading
:
:
WebGPUThreading
(
base
:
:
Thread
*
aThread
)
:
mThread
(
aThread
)
{
}
WebGPUThreading
:
:
~
WebGPUThreading
(
)
{
delete
mThread
;
}
void
WebGPUThreading
:
:
Start
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sWebGPUThread
)
;
base
:
:
Thread
*
thread
=
new
base
:
:
Thread
(
"
WebGPU
"
)
;
base
:
:
Thread
:
:
Options
options
;
if
(
!
thread
-
>
StartWithOptions
(
options
)
)
{
delete
thread
;
return
;
}
sWebGPUThread
=
new
WebGPUThreading
(
thread
)
;
const
auto
fnInit
=
[
]
(
)
{
}
;
RefPtr
<
Runnable
>
runnable
=
NS_NewRunnableFunction
(
"
WebGPUThreading
fnInit
"
fnInit
)
;
sWebGPUThread
-
>
GetLoop
(
)
-
>
PostTask
(
runnable
.
forget
(
)
)
;
}
void
WebGPUThreading
:
:
ShutDown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sWebGPUThread
)
;
const
auto
fnExit
=
[
]
(
)
{
}
;
RefPtr
<
Runnable
>
runnable
=
NS_NewRunnableFunction
(
"
WebGPUThreading
fnExit
"
fnExit
)
;
sWebGPUThread
-
>
GetLoop
(
)
-
>
PostTask
(
runnable
.
forget
(
)
)
;
sWebGPUThread
=
nullptr
;
}
MessageLoop
*
WebGPUThreading
:
:
GetLoop
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
sWebGPUThread
?
sWebGPUThread
-
>
mThread
-
>
message_loop
(
)
:
nullptr
;
}
}
}
