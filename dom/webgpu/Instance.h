#
ifndef
GPU_INSTANCE_H_
#
define
GPU_INSTANCE_H_
#
include
"
ObjectModel
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
WebGPUBinding
.
h
"
#
include
"
mozilla
/
layers
/
BuildConstants
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Promise
;
struct
GPURequestAdapterOptions
;
}
namespace
webgpu
{
class
Adapter
;
class
GPUAdapter
;
class
Instance
;
class
WebGPUChild
;
class
WGSLLanguageFeatures
final
:
public
nsWrapperCache
public
ChildOf
<
Instance
>
{
public
:
GPU_DECL_CYCLE_COLLECTION
(
WGSLLanguageFeatures
)
public
:
explicit
WGSLLanguageFeatures
(
Instance
*
const
aParent
)
:
ChildOf
(
aParent
)
{
}
void
Add
(
const
nsAString
&
feature
ErrorResult
&
aRv
)
{
dom
:
:
WGSLLanguageFeatures_Binding
:
:
SetlikeHelpers
:
:
Add
(
this
feature
aRv
)
;
}
private
:
void
Cleanup
(
)
{
}
protected
:
~
WGSLLanguageFeatures
(
)
{
Cleanup
(
)
;
}
;
public
:
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
dom
:
:
WGSLLanguageFeatures_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
;
class
Instance
final
:
public
nsWrapperCache
{
public
:
GPU_DECL_CYCLE_COLLECTION
(
Instance
)
GPU_DECL_JS_WRAP
(
Instance
)
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mOwner
;
}
static
bool
PrefEnabled
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
bool
ExternalTextureEnabled
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
already_AddRefed
<
Instance
>
Create
(
nsIGlobalObject
*
aOwner
)
;
already_AddRefed
<
dom
:
:
Promise
>
RequestAdapter
(
const
dom
:
:
GPURequestAdapterOptions
&
aOptions
ErrorResult
&
aRv
)
;
dom
:
:
GPUTextureFormat
GetPreferredCanvasFormat
(
)
const
{
if
(
kIsAndroid
)
{
return
dom
:
:
GPUTextureFormat
:
:
Rgba8unorm
;
}
return
dom
:
:
GPUTextureFormat
:
:
Bgra8unorm
;
}
;
private
:
explicit
Instance
(
nsIGlobalObject
*
aOwner
)
;
virtual
~
Instance
(
)
;
void
Cleanup
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mOwner
;
RefPtr
<
WGSLLanguageFeatures
>
mWgslLanguageFeatures
;
public
:
already_AddRefed
<
WGSLLanguageFeatures
>
WgslLanguageFeatures
(
)
const
{
RefPtr
<
WGSLLanguageFeatures
>
features
=
mWgslLanguageFeatures
;
return
features
.
forget
(
)
;
}
}
;
}
}
#
endif
