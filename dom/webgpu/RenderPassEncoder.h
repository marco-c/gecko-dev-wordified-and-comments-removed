#
ifndef
GPU_RenderPassEncoder_H_
#
define
GPU_RenderPassEncoder_H_
#
include
"
ObjectModel
.
h
"
namespace
mozilla
{
namespace
dom
{
class
DoubleSequenceOrGPUColorDict
;
template
<
typename
T
>
class
Sequence
;
namespace
binding_detail
{
template
<
typename
T
>
class
AutoSequence
;
}
}
namespace
webgpu
{
class
CommandEncoder
;
class
RenderBundle
;
class
RenderPipeline
;
class
RenderPassEncoder
final
:
public
ObjectBase
public
ChildOf
<
CommandEncoder
>
{
public
:
GPU_DECL_CYCLE_COLLECTION
(
RenderPassEncoder
)
GPU_DECL_JS_WRAP
(
RenderPassEncoder
)
RenderPassEncoder
(
CommandEncoder
*
const
aParent
const
dom
:
:
GPURenderPassDescriptor
&
aDesc
)
;
protected
:
virtual
~
RenderPassEncoder
(
)
;
void
Cleanup
(
)
{
}
ffi
:
:
WGPURenderPass
*
const
mRaw
;
nsTArray
<
RefPtr
<
const
BindGroup
>
>
mUsedBindGroups
;
nsTArray
<
RefPtr
<
const
Buffer
>
>
mUsedBuffers
;
nsTArray
<
RefPtr
<
const
RenderPipeline
>
>
mUsedPipelines
;
nsTArray
<
RefPtr
<
const
TextureView
>
>
mUsedTextureViews
;
public
:
void
SetBindGroup
(
uint32_t
aSlot
const
BindGroup
&
aBindGroup
const
dom
:
:
Sequence
<
uint32_t
>
&
aDynamicOffsets
)
;
void
SetPipeline
(
const
RenderPipeline
&
aPipeline
)
;
void
SetIndexBuffer
(
const
Buffer
&
aBuffer
uint64_t
aOffset
uint64_t
aSize
)
;
void
SetVertexBuffer
(
uint32_t
aSlot
const
Buffer
&
aBuffer
uint64_t
aOffset
uint64_t
aSize
)
;
void
Draw
(
uint32_t
aVertexCount
uint32_t
aInstanceCount
uint32_t
aFirstVertex
uint32_t
aFirstInstance
)
;
void
DrawIndexed
(
uint32_t
aIndexCount
uint32_t
aInstanceCount
uint32_t
aFirstIndex
int32_t
aBaseVertex
uint32_t
aFirstInstance
)
;
void
DrawIndirect
(
const
Buffer
&
aIndirectBuffer
uint64_t
aIndirectOffset
)
;
void
DrawIndexedIndirect
(
const
Buffer
&
aIndirectBuffer
uint64_t
aIndirectOffset
)
;
void
EndPass
(
ErrorResult
&
aRv
)
;
}
;
}
}
#
endif
