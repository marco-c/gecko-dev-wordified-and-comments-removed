#
ifndef
WEBGPU_CHILD_H_
#
define
WEBGPU_CHILD_H_
#
include
"
mozilla
/
webgpu
/
PWebGPUChild
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
GPURequestAdapterOptions
;
}
namespace
layers
{
class
CompositorBridgeChild
;
}
namespace
webgpu
{
namespace
ffi
{
struct
WGPUClient
;
struct
WGPUTextureViewDescriptor
;
}
typedef
MozPromise
<
RawId
Maybe
<
ipc
:
:
ResponseRejectReason
>
true
>
RawIdPromise
;
ffi
:
:
WGPUByteBuf
*
ToFFI
(
ipc
:
:
ByteBuf
*
x
)
;
class
WebGPUChild
final
:
public
PWebGPUChild
public
SupportsWeakPtr
{
public
:
friend
class
layers
:
:
CompositorBridgeChild
;
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
WebGPUChild
)
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
WebGPUChild
)
public
:
explicit
WebGPUChild
(
)
;
bool
IsOpen
(
)
const
{
return
mIPCOpen
;
}
RefPtr
<
RawIdPromise
>
InstanceRequestAdapter
(
const
dom
:
:
GPURequestAdapterOptions
&
aOptions
)
;
Maybe
<
RawId
>
AdapterRequestDevice
(
RawId
aSelfId
const
dom
:
:
GPUDeviceDescriptor
&
aDesc
)
;
RawId
DeviceCreateBuffer
(
RawId
aSelfId
const
dom
:
:
GPUBufferDescriptor
&
aDesc
)
;
RawId
DeviceCreateTexture
(
RawId
aSelfId
const
dom
:
:
GPUTextureDescriptor
&
aDesc
)
;
RawId
TextureCreateView
(
RawId
aSelfId
const
dom
:
:
GPUTextureViewDescriptor
&
aDesc
)
;
RawId
DeviceCreateSampler
(
RawId
aSelfId
const
dom
:
:
GPUSamplerDescriptor
&
aDesc
)
;
RawId
DeviceCreateCommandEncoder
(
RawId
aSelfId
const
dom
:
:
GPUCommandEncoderDescriptor
&
aDesc
)
;
RawId
CommandEncoderFinish
(
RawId
aSelfId
const
dom
:
:
GPUCommandBufferDescriptor
&
aDesc
)
;
RawId
DeviceCreateBindGroupLayout
(
RawId
aSelfId
const
dom
:
:
GPUBindGroupLayoutDescriptor
&
aDesc
)
;
RawId
DeviceCreatePipelineLayout
(
RawId
aSelfId
const
dom
:
:
GPUPipelineLayoutDescriptor
&
aDesc
)
;
RawId
DeviceCreateBindGroup
(
RawId
aSelfId
const
dom
:
:
GPUBindGroupDescriptor
&
aDesc
)
;
RawId
DeviceCreateShaderModule
(
RawId
aSelfId
const
dom
:
:
GPUShaderModuleDescriptor
&
aDesc
)
;
RawId
DeviceCreateComputePipeline
(
RawId
aSelfId
const
dom
:
:
GPUComputePipelineDescriptor
&
aDesc
nsTArray
<
RawId
>
*
const
aImplicitBindGroupLayoutIds
)
;
RawId
DeviceCreateRenderPipeline
(
RawId
aSelfId
const
dom
:
:
GPURenderPipelineDescriptor
&
aDesc
nsTArray
<
RawId
>
*
const
aImplicitBindGroupLayoutIds
)
;
void
DeviceCreateSwapChain
(
RawId
aSelfId
const
RGBDescriptor
&
aRgbDesc
size_t
maxBufferCount
wr
:
:
ExternalImageId
aExternalImageId
)
;
void
SwapChainPresent
(
wr
:
:
ExternalImageId
aExternalImageId
RawId
aTextureId
)
;
private
:
virtual
~
WebGPUChild
(
)
;
void
AddIPDLReference
(
)
{
MOZ_ASSERT
(
!
mIPCOpen
)
;
mIPCOpen
=
true
;
AddRef
(
)
;
}
void
ReleaseIPDLReference
(
)
{
MOZ_ASSERT
(
mIPCOpen
)
;
mIPCOpen
=
false
;
Release
(
)
;
}
ffi
:
:
WGPUClient
*
const
mClient
;
bool
mIPCOpen
;
public
:
ipc
:
:
IPCResult
RecvDropAction
(
const
ipc
:
:
ByteBuf
&
aByteBuf
)
;
ipc
:
:
IPCResult
RecvFreeAdapter
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeDevice
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreePipelineLayout
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeShaderModule
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeBindGroupLayout
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeBindGroup
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeCommandBuffer
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeRenderPipeline
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeComputePipeline
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeBuffer
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeTexture
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeTextureView
(
RawId
id
)
;
ipc
:
:
IPCResult
RecvFreeSampler
(
RawId
id
)
;
}
;
}
}
#
endif
