#
include
"
WebGPUParent
.
h
"
#
include
"
mozilla
/
webgpu
/
ffi
/
wgpu
.
h
"
namespace
mozilla
{
namespace
webgpu
{
WebGPUParent
:
:
WebGPUParent
(
)
:
mContext
(
ffi
:
:
wgpu_server_new
(
)
)
{
}
WebGPUParent
:
:
~
WebGPUParent
(
)
=
default
;
ipc
:
:
IPCResult
WebGPUParent
:
:
RecvInstanceRequestAdapter
(
const
dom
:
:
GPURequestAdapterOptions
&
aOptions
const
nsTArray
<
RawId
>
&
aTargetIds
InstanceRequestAdapterResolver
&
&
resolver
)
{
ffi
:
:
WGPURequestAdapterOptions
options
=
{
}
;
if
(
aOptions
.
mPowerPreference
.
WasPassed
(
)
)
{
options
.
power_preference
=
static_cast
<
ffi
:
:
WGPUPowerPreference
>
(
aOptions
.
mPowerPreference
.
Value
(
)
)
;
}
int8_t
index
=
ffi
:
:
wgpu_server_instance_request_adapter
(
mContext
&
options
aTargetIds
.
Elements
(
)
aTargetIds
.
Length
(
)
)
;
if
(
index
>
=
0
)
{
resolver
(
aTargetIds
[
index
]
)
;
}
else
{
resolver
(
0
)
;
}
return
IPC_OK
(
)
;
}
ipc
:
:
IPCResult
WebGPUParent
:
:
RecvAdapterRequestDevice
(
RawId
aSelfId
const
dom
:
:
GPUDeviceDescriptor
&
aOptions
RawId
aNewId
)
{
ffi
:
:
WGPUDeviceDescriptor
desc
=
{
}
;
ffi
:
:
wgpu_server_adapter_request_device
(
mContext
aSelfId
&
desc
aNewId
)
;
return
IPC_OK
(
)
;
}
ipc
:
:
IPCResult
WebGPUParent
:
:
RecvDeviceDestroy
(
RawId
aSelfId
)
{
ffi
:
:
wgpu_server_device_destroy
(
mContext
aSelfId
)
;
return
IPC_OK
(
)
;
}
ipc
:
:
IPCResult
WebGPUParent
:
:
RecvShutdown
(
)
{
ffi
:
:
wgpu_server_delete
(
const_cast
<
ffi
:
:
WGPUGlobal
*
>
(
mContext
)
)
;
return
IPC_OK
(
)
;
}
}
}
