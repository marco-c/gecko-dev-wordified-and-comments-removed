#
ifndef
PluginFinder_h_
#
define
PluginFinder_h_
#
include
"
nsIRunnable
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsPluginTags
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsIRunnable
.
h
"
class
nsIFile
;
class
nsPluginHost
;
class
nsInvalidPluginTag
:
public
nsISupports
{
virtual
~
nsInvalidPluginTag
(
)
;
public
:
explicit
nsInvalidPluginTag
(
const
char
*
aFullPath
int64_t
aLastModifiedTime
=
0
)
;
NS_DECL_ISUPPORTS
nsCString
mFullPath
;
int64_t
mLastModifiedTime
;
bool
mSeen
;
RefPtr
<
nsInvalidPluginTag
>
mPrev
;
RefPtr
<
nsInvalidPluginTag
>
mNext
;
}
;
static
inline
bool
UnloadPluginsASAP
(
)
{
return
mozilla
:
:
StaticPrefs
:
:
dom_ipc_plugins_unloadTimeoutSecs
(
)
=
=
0
;
}
class
PluginFinder
final
:
public
nsIRunnable
{
~
PluginFinder
(
)
=
default
;
public
:
explicit
PluginFinder
(
bool
aFlashOnly
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIRUNNABLE
typedef
std
:
:
function
<
void
(
bool
RefPtr
<
nsPluginTag
>
nsTArray
<
mozilla
:
:
Pair
<
bool
RefPtr
<
nsPluginTag
>
>
>
&
)
>
FoundPluginCallback
;
typedef
std
:
:
function
<
void
(
bool
)
>
PluginChangeCallback
;
nsresult
DoFullSearch
(
const
FoundPluginCallback
&
aCallback
)
;
nsresult
HavePluginsChanged
(
const
PluginChangeCallback
&
aCallback
)
;
static
nsresult
WritePluginInfo
(
bool
aFlashOnly
nsPluginTag
*
aPlugins
nsInvalidPluginTag
*
aInvalidPlugins
=
nullptr
)
;
private
:
nsPluginTag
*
FirstPluginWithPath
(
const
nsCString
&
path
)
;
bool
ShouldAddPlugin
(
const
nsPluginInfo
&
aInfo
)
;
nsresult
ReadFlashInfo
(
)
;
static
nsresult
WriteFlashInfo
(
nsPluginTag
*
aPlugins
)
;
static
nsresult
EnsurePluginReg
(
)
;
nsresult
ReadPluginInfo
(
)
;
nsresult
ReadPluginInfoFromDisk
(
)
;
nsresult
DeterminePluginDirs
(
)
;
nsresult
ScanPluginsDirectory
(
nsIFile
*
aPluginsDir
bool
*
aPluginsChanged
)
;
nsresult
FindPlugins
(
)
;
void
RemoveCachedPluginsInfo
(
const
char
*
filePath
nsPluginTag
*
*
result
)
;
nsTArray
<
nsCOMPtr
<
nsIFile
>
>
mPluginDirs
;
RefPtr
<
nsPluginTag
>
mPlugins
;
RefPtr
<
nsPluginTag
>
mCachedPlugins
;
RefPtr
<
nsInvalidPluginTag
>
mInvalidPlugins
;
nsTArray
<
mozilla
:
:
Pair
<
bool
RefPtr
<
nsPluginTag
>
>
>
mPluginBlocklistRequests
;
FoundPluginCallback
mFoundPluginCallback
;
PluginChangeCallback
mChangeCallback
;
RefPtr
<
nsPluginHost
>
mHost
;
bool
mFlashOnly
;
bool
mCreateList
;
bool
mPluginsChanged
;
bool
mFinishedFinding
;
}
;
#
endif
