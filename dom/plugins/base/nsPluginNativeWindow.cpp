#
include
"
nsDebug
.
h
"
#
include
"
nsPluginNativeWindow
.
h
"
class
nsPluginNativeWindowImpl
:
public
nsPluginNativeWindow
{
public
:
nsPluginNativeWindowImpl
(
)
;
virtual
~
nsPluginNativeWindowImpl
(
)
;
#
ifdef
MOZ_WIDGET_GTK
NPSetWindowCallbackStruct
mWsInfo
;
#
endif
}
;
nsPluginNativeWindowImpl
:
:
nsPluginNativeWindowImpl
(
)
:
nsPluginNativeWindow
(
)
{
window
=
nullptr
;
x
=
0
;
y
=
0
;
width
=
0
;
height
=
0
;
memset
(
&
clipRect
0
sizeof
(
clipRect
)
)
;
type
=
NPWindowTypeWindow
;
#
ifdef
MOZ_WIDGET_GTK
ws_info
=
&
mWsInfo
;
mWsInfo
.
type
=
0
;
mWsInfo
.
display
=
nullptr
;
mWsInfo
.
visual
=
nullptr
;
mWsInfo
.
colormap
=
0
;
mWsInfo
.
depth
=
0
;
#
elif
defined
(
XP_UNIX
)
&
&
!
defined
(
XP_MACOSX
)
ws_info
=
nullptr
;
#
endif
}
nsPluginNativeWindowImpl
:
:
~
nsPluginNativeWindowImpl
(
)
=
default
;
nsresult
PLUG_NewPluginNativeWindow
(
nsPluginNativeWindow
*
*
aPluginNativeWindow
)
{
NS_ENSURE_ARG_POINTER
(
aPluginNativeWindow
)
;
*
aPluginNativeWindow
=
new
nsPluginNativeWindowImpl
(
)
;
return
NS_OK
;
}
nsresult
PLUG_DeletePluginNativeWindow
(
nsPluginNativeWindow
*
aPluginNativeWindow
)
{
NS_ENSURE_ARG_POINTER
(
aPluginNativeWindow
)
;
delete
static_cast
<
nsPluginNativeWindowImpl
*
>
(
aPluginNativeWindow
)
;
return
NS_OK
;
}
