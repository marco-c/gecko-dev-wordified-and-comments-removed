XPIDL_SOURCES
+
=
[
"
nsIHTTPHeaderListener
.
idl
"
"
nsIPluginDocument
.
idl
"
"
nsIPluginHost
.
idl
"
"
nsIPluginInputStream
.
idl
"
"
nsIPluginInstanceOwner
.
idl
"
"
nsIPluginTag
.
idl
"
"
nspluginroot
.
idl
"
]
XPIDL_MODULE
=
"
plugin
"
EXPORTS
+
=
[
"
npapi
.
h
"
"
npfunctions
.
h
"
"
npruntime
.
h
"
"
nptypes
.
h
"
"
nsJSNPRuntime
.
h
"
"
nsNPAPIPluginInstance
.
h
"
"
nsPluginDirServiceProvider
.
h
"
"
nsPluginHost
.
h
"
"
nsPluginInstanceOwner
.
h
"
"
nsPluginLogging
.
h
"
"
nsPluginNativeWindow
.
h
"
"
nsPluginsCID
.
h
"
"
nsPluginsDir
.
h
"
"
nsPluginTags
.
h
"
]
UNIFIED_SOURCES
+
=
[
"
nsJSNPRuntime
.
cpp
"
"
nsNPAPIPluginInstance
.
cpp
"
"
nsNPAPIPluginStreamListener
.
cpp
"
"
nsPluginInstanceOwner
.
cpp
"
"
nsPluginStreamListenerPeer
.
cpp
"
"
nsPluginTags
.
cpp
"
"
PluginFinder
.
cpp
"
]
SOURCES
+
=
[
"
nsNPAPIPlugin
.
cpp
"
"
nsPluginHost
.
cpp
"
]
if
CONFIG
[
"
OS_ARCH
"
]
=
=
"
WINNT
"
:
UNIFIED_SOURCES
+
=
[
"
nsPluginDirServiceProvider
.
cpp
"
"
nsPluginNativeWindowWin
.
cpp
"
"
nsPluginsDirWin
.
cpp
"
]
elif
CONFIG
[
"
MOZ_WIDGET_TOOLKIT
"
]
=
=
"
cocoa
"
:
UNIFIED_SOURCES
+
=
[
"
nsPluginNativeWindow
.
cpp
"
]
SOURCES
+
=
[
"
nsPluginsDirDarwin
.
cpp
"
]
else
:
UNIFIED_SOURCES
+
=
[
"
nsPluginNativeWindow
.
cpp
"
"
nsPluginsDirUnix
.
cpp
"
]
XPCOM_MANIFESTS
+
=
[
"
components
.
conf
"
]
LOCAL_INCLUDES
+
=
[
"
/
dom
/
base
"
"
/
dom
/
plugins
/
ipc
"
"
/
layout
/
generic
"
"
/
layout
/
xul
"
"
/
netwerk
/
base
"
"
/
widget
"
"
/
widget
/
cocoa
"
"
/
xpcom
/
base
"
]
if
CONFIG
[
"
OS_ARCH
"
]
=
=
"
WINNT
"
:
LOCAL_INCLUDES
+
=
[
"
/
xpcom
/
base
"
]
include
(
"
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
"
)
FINAL_LIBRARY
=
"
xul
"
CXXFLAGS
+
=
CONFIG
[
"
MOZ_CAIRO_CFLAGS
"
]
CXXFLAGS
+
=
CONFIG
[
"
TK_CFLAGS
"
]
if
CONFIG
[
"
CC_TYPE
"
]
in
(
"
clang
"
"
gcc
"
)
:
CXXFLAGS
+
=
[
"
-
Wno
-
error
=
shadow
"
]
