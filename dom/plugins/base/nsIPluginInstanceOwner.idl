#
include
"
nsISupports
.
idl
"
#
include
"
nspluginroot
.
idl
"
#
include
"
nsIInputStream
.
idl
"
webidl
Document
;
%
{
C
+
+
#
include
"
npapi
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
class
nsNPAPIPluginInstance
;
enum
nsPluginTagType
{
nsPluginTagType_Unknown
nsPluginTagType_Embed
nsPluginTagType_Object
}
;
%
}
[
ptr
]
native
nsNPAPIPluginInstancePtr
(
nsNPAPIPluginInstance
)
;
[
uuid
(
7d65452e
-
c167
-
4cba
-
a0e3
-
ddc61bdde8c3
)
]
interface
nsIPluginInstanceOwner
:
nsISupports
{
void
setInstance
(
in
nsNPAPIPluginInstancePtr
aInstance
)
;
[
notxpcom
nostdcall
]
nsNPAPIPluginInstancePtr
getInstance
(
)
;
void
getWindow
(
in
NPWindowStarRef
aWindow
)
;
readonly
attribute
int32_t
mode
;
void
createWidget
(
)
;
%
{
C
+
+
NS_IMETHOD
GetURL
(
const
char
*
aURL
const
char
*
aTarget
nsIInputStream
*
aPostStream
void
*
aHeadersData
uint32_t
aHeadersDataLen
bool
aDoCheckLoadURIChecks
)
=
0
;
%
}
readonly
attribute
Document
document
;
void
invalidateRect
(
in
NPRectPtr
aRect
)
;
void
invalidateRegion
(
in
NPRegion
aRegion
)
;
void
redrawPlugin
(
)
;
void
getNetscapeWindow
(
in
voidPtr
aValue
)
;
%
{
C
+
+
virtual
NPBool
ConvertPoint
(
double
sourceX
double
sourceY
NPCoordinateSpace
sourceSpace
double
*
destX
double
*
destY
NPCoordinateSpace
destSpace
)
=
0
;
virtual
NPError
InitAsyncSurface
(
NPSize
*
size
NPImageFormat
format
void
*
initData
NPAsyncSurface
*
surface
)
=
0
;
virtual
NPError
FinalizeAsyncSurface
(
NPAsyncSurface
*
surface
)
=
0
;
virtual
void
SetCurrentAsyncSurface
(
NPAsyncSurface
*
surface
NPRect
*
changed
)
=
0
;
%
}
void
setEventModel
(
in
int32_t
eventModel
)
;
void
callSetWindow
(
)
;
double
getContentsScaleFactor
(
)
;
}
;
