#
ifndef
nsPluginTags_h_
#
define
nsPluginTags_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIPluginTag
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsString
.
h
"
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
struct
FakePluginTagInit
;
}
}
#
define
NS_IINTERNALPLUGINTAG_IID
\
{
\
0xe8fdd227
0x27da
0x46ee
{
\
0xbe
0xf3
0x1a
0xef
0x5a
0x8f
0xc5
0xb4
\
}
\
}
class
nsIInternalPluginTag
:
public
nsIPluginTag
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IINTERNALPLUGINTAG_IID
)
nsIInternalPluginTag
(
)
;
nsIInternalPluginTag
(
const
char
*
aName
const
char
*
aDescription
const
char
*
aFileName
const
char
*
aVersion
)
;
nsIInternalPluginTag
(
const
char
*
aName
const
char
*
aDescription
const
char
*
aFileName
const
char
*
aVersion
const
nsTArray
<
nsCString
>
&
aMimeTypes
const
nsTArray
<
nsCString
>
&
aMimeDescriptions
const
nsTArray
<
nsCString
>
&
aExtensions
)
;
virtual
bool
IsEnabled
(
)
=
0
;
virtual
const
nsCString
&
GetNiceFileName
(
)
=
0
;
const
nsCString
&
Name
(
)
const
{
return
mName
;
}
const
nsCString
&
Description
(
)
const
{
return
mDescription
;
}
const
nsTArray
<
nsCString
>
&
MimeTypes
(
)
const
{
return
mMimeTypes
;
}
const
nsTArray
<
nsCString
>
&
MimeDescriptions
(
)
const
{
return
mMimeDescriptions
;
}
const
nsTArray
<
nsCString
>
&
Extensions
(
)
const
{
return
mExtensions
;
}
const
nsCString
&
FileName
(
)
const
{
return
mFileName
;
}
const
nsCString
&
Version
(
)
const
{
return
mVersion
;
}
bool
HasMimeType
(
const
nsACString
&
aMimeType
)
const
;
bool
HasExtension
(
const
nsACString
&
aExtension
nsACString
&
aMatchingType
)
const
;
enum
PluginState
{
ePluginState_Disabled
=
0
ePluginState_Clicktoplay
=
1
ePluginState_Enabled
=
2
ePluginState_MaxValue
=
3
}
;
protected
:
~
nsIInternalPluginTag
(
)
;
nsCString
mName
;
nsCString
mDescription
;
nsCString
mFileName
;
nsCString
mVersion
;
nsTArray
<
nsCString
>
mMimeTypes
;
nsTArray
<
nsCString
>
mMimeDescriptions
;
nsTArray
<
nsCString
>
mExtensions
;
static
uint32_t
sNextId
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIInternalPluginTag
NS_IINTERNALPLUGINTAG_IID
)
class
nsFakePluginTag
:
public
nsIInternalPluginTag
public
nsIFakePluginTag
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPLUGINTAG
NS_DECL_NSIFAKEPLUGINTAG
static
nsresult
Create
(
const
mozilla
:
:
dom
:
:
FakePluginTagInit
&
aInitDictionary
nsFakePluginTag
*
*
aPluginTag
)
;
nsFakePluginTag
(
uint32_t
aId
already_AddRefed
<
nsIURI
>
&
&
aHandlerURI
const
char
*
aName
const
char
*
aDescription
const
nsTArray
<
nsCString
>
&
aMimeTypes
const
nsTArray
<
nsCString
>
&
aMimeDescriptions
const
nsTArray
<
nsCString
>
&
aExtensions
const
nsCString
&
aNiceName
const
nsString
&
aSandboxScript
)
;
bool
IsEnabled
(
)
override
;
const
nsCString
&
GetNiceFileName
(
)
override
;
bool
HandlerURIMatches
(
nsIURI
*
aURI
)
;
nsIURI
*
HandlerURI
(
)
const
{
return
mHandlerURI
;
}
uint32_t
Id
(
)
const
{
return
mId
;
}
const
nsString
&
SandboxScript
(
)
const
{
return
mSandboxScript
;
}
static
const
int32_t
NOT_JSPLUGIN
=
-
1
;
private
:
nsFakePluginTag
(
)
;
virtual
~
nsFakePluginTag
(
)
;
uint32_t
mId
;
nsCOMPtr
<
nsIURI
>
mHandlerURI
;
nsCString
mFullPath
;
nsCString
mNiceName
;
nsString
mSandboxScript
;
PluginState
mState
;
}
;
#
endif
