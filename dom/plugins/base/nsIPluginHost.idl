#
include
"
nspluginroot
.
idl
"
#
include
"
nsISupports
.
idl
"
#
include
"
nsIPluginTag
.
idl
"
%
{
C
+
+
#
define
MOZ_PLUGIN_HOST_CONTRACTID
\
"
mozilla
.
org
/
plugin
/
host
;
1
"
%
}
[
scriptable
function
uuid
(
9c311778
-
7c2c
-
4ad8
-
b439
-
b8a2786a20dd
)
]
interface
nsIClearSiteDataCallback
:
nsISupports
{
void
callback
(
in
nsresult
rv
)
;
}
;
[
scriptable
uuid
(
f938f5ba
-
7093
-
42cd
-
a559
-
af8039d99204
)
]
interface
nsIPluginHost
:
nsISupports
{
void
reloadPlugins
(
)
;
Array
<
nsIPluginTag
>
getPluginTags
(
)
;
const
uint32_t
FLAG_CLEAR_ALL
=
0
;
const
uint32_t
FLAG_CLEAR_CACHE
=
1
;
const
uint32_t
EXCLUDE_NONE
=
0
;
const
uint32_t
EXCLUDE_DISABLED
=
1
<
<
0
;
const
uint32_t
EXCLUDE_FAKE
=
1
<
<
1
;
void
clearSiteData
(
in
nsIPluginTag
plugin
in
AUTF8String
domain
in
uint64_t
flags
in
int64_t
maxAge
in
nsIClearSiteDataCallback
callback
)
;
boolean
siteHasData
(
in
nsIPluginTag
plugin
in
AUTF8String
domain
)
;
ACString
getPermissionStringForType
(
in
AUTF8String
mimeType
[
optional
]
in
uint32_t
excludeFlags
)
;
ACString
getPermissionStringForTag
(
in
nsIPluginTag
tag
[
optional
]
in
uint32_t
excludeFlags
)
;
nsIPluginTag
getPluginTagForType
(
in
AUTF8String
mimeType
[
optional
]
in
uint32_t
excludeFlags
)
;
unsigned
long
getStateForType
(
in
AUTF8String
mimeType
[
optional
]
in
uint32_t
excludeFlags
)
;
uint32_t
getBlocklistStateForType
(
in
AUTF8String
aMimeType
[
optional
]
in
uint32_t
excludeFlags
)
;
[
implicit_jscontext
]
nsIFakePluginTag
registerFakePlugin
(
in
jsval
initDictionary
)
;
[
implicit_jscontext
]
nsIFakePluginTag
createFakePlugin
(
in
jsval
initDictionary
)
;
nsIFakePluginTag
getFakePlugin
(
in
AUTF8String
mimeType
)
;
void
unregisterFakePlugin
(
in
AUTF8String
handlerURI
)
;
}
;
