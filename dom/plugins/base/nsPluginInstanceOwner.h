#
ifndef
nsPluginInstanceOwner_h_
#
define
nsPluginInstanceOwner_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
npapi
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIKeyEventInPluginCallback
.
h
"
#
include
"
nsIPluginInstanceOwner
.
h
"
#
include
"
nsIPrivacyTransitionObserver
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsPluginHost
.
h
"
#
include
"
nsPluginNativeWindow
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
gfxRect
.
h
"
#
ifdef
XP_MACOSX
#
include
"
mozilla
/
gfx
/
QuartzSupport
.
h
"
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
endif
class
nsIInputStream
;
class
nsPluginDOMContextMenuListener
;
class
nsPluginFrame
;
class
nsDisplayListBuilder
;
#
if
defined
(
MOZ_X11
)
class
gfxContext
;
#
endif
namespace
mozilla
{
class
TextComposition
;
namespace
dom
{
class
Event
;
struct
MozPluginParameter
;
}
namespace
widget
{
class
PuppetWidget
;
}
}
using
mozilla
:
:
widget
:
:
PuppetWidget
;
#
ifdef
MOZ_X11
#
include
"
gfxXlibNativeRenderer
.
h
"
#
endif
class
nsPluginInstanceOwner
final
:
public
nsIPluginInstanceOwner
public
nsIDOMEventListener
public
nsIPrivacyTransitionObserver
public
nsIKeyEventInPluginCallback
public
nsSupportsWeakReference
{
public
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
nsPluginInstanceOwner
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIPLUGININSTANCEOWNER
NS_DECL_NSIPRIVACYTRANSITIONOBSERVER
NS_IMETHOD
GetURL
(
const
char
*
aURL
const
char
*
aTarget
nsIInputStream
*
aPostStream
void
*
aHeadersData
uint32_t
aHeadersDataLen
bool
aDoCheckLoadURIChecks
)
override
;
NPBool
ConvertPoint
(
double
sourceX
double
sourceY
NPCoordinateSpace
sourceSpace
double
*
destX
double
*
destY
NPCoordinateSpace
destSpace
)
override
;
NPError
InitAsyncSurface
(
NPSize
*
size
NPImageFormat
format
void
*
initData
NPAsyncSurface
*
surface
)
override
;
NPError
FinalizeAsyncSurface
(
NPAsyncSurface
*
surface
)
override
;
void
SetCurrentAsyncSurface
(
NPAsyncSurface
*
surface
NPRect
*
changed
)
override
;
NS_IMETHOD
GetTagType
(
nsPluginTagType
*
aResult
)
;
void
GetParameters
(
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
&
parameters
)
;
void
GetAttributes
(
nsTArray
<
mozilla
:
:
dom
:
:
MozPluginParameter
>
&
attributes
)
;
NS_IMETHOD
GetDOMElement
(
nsIDOMElement
*
*
aResult
)
;
NS_DECL_NSIDOMEVENTLISTENER
nsresult
ProcessMouseDown
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nsresult
ProcessKeyPress
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
nsresult
Destroy
(
)
;
#
ifdef
XP_WIN
void
Paint
(
const
RECT
&
aDirty
HDC
aDC
)
;
#
elif
defined
(
XP_MACOSX
)
void
Paint
(
const
gfxRect
&
aDirtyRect
CGContextRef
cgContext
)
;
void
RenderCoreAnimation
(
CGContextRef
aCGContext
int
aWidth
int
aHeight
)
;
void
DoCocoaEventDrawRect
(
const
gfxRect
&
aDrawRect
CGContextRef
cgContext
)
;
#
elif
defined
(
MOZ_X11
)
void
Paint
(
gfxContext
*
aContext
const
gfxRect
&
aFrameRect
const
gfxRect
&
aDirtyRect
)
;
#
endif
nsresult
Init
(
nsIContent
*
aContent
)
;
void
*
GetPluginPort
(
)
;
void
ReleasePluginPort
(
void
*
pluginPort
)
;
nsEventStatus
ProcessEvent
(
const
mozilla
:
:
WidgetGUIEvent
&
anEvent
)
;
static
void
GeneratePluginEvent
(
const
mozilla
:
:
WidgetCompositionEvent
*
aSrcCompositionEvent
mozilla
:
:
WidgetCompositionEvent
*
aDistCompositionEvent
)
;
#
if
defined
(
XP_WIN
)
void
SetWidgetWindowAsParent
(
HWND
aWindowToAdopt
)
;
nsresult
SetNetscapeWindowAsParent
(
HWND
aWindowToAdopt
)
;
#
endif
#
ifdef
XP_MACOSX
enum
{
ePluginPaintEnable
ePluginPaintDisable
}
;
void
WindowFocusMayHaveChanged
(
)
;
bool
WindowIsActive
(
)
;
void
SendWindowFocusChanged
(
bool
aIsActive
)
;
NPDrawingModel
GetDrawingModel
(
)
;
bool
IsRemoteDrawingCoreAnimation
(
)
;
NPEventModel
GetEventModel
(
)
;
static
void
CARefresh
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
AddToCARefreshTimer
(
)
;
void
RemoveFromCARefreshTimer
(
)
;
void
FixUpPluginWindow
(
int32_t
inPaintState
)
;
void
HidePluginWindow
(
)
;
void
SetPluginPort
(
)
;
#
else
void
UpdateWindowPositionAndClipRect
(
bool
aSetWindow
)
;
void
UpdateWindowVisibility
(
bool
aVisible
)
;
#
endif
void
ResolutionMayHaveChanged
(
)
;
#
if
defined
(
XP_MACOSX
)
|
|
defined
(
XP_WIN
)
nsresult
ContentsScaleFactorChanged
(
double
aContentsScaleFactor
)
;
#
endif
void
UpdateDocumentActiveState
(
bool
aIsActive
)
;
void
SetFrame
(
nsPluginFrame
*
aFrame
)
;
nsPluginFrame
*
GetFrame
(
)
;
uint32_t
GetLastEventloopNestingLevel
(
)
const
{
return
mLastEventloopNestingLevel
;
}
static
uint32_t
GetEventloopNestingLevel
(
)
;
void
ConsiderNewEventloopNestingLevel
(
)
{
uint32_t
currentLevel
=
GetEventloopNestingLevel
(
)
;
if
(
currentLevel
<
mLastEventloopNestingLevel
)
{
mLastEventloopNestingLevel
=
currentLevel
;
}
}
const
char
*
GetPluginName
(
)
{
if
(
mInstance
&
&
mPluginHost
)
{
const
char
*
name
=
nullptr
;
if
(
NS_SUCCEEDED
(
mPluginHost
-
>
GetPluginName
(
mInstance
&
name
)
)
&
&
name
)
return
name
;
}
return
"
"
;
}
#
ifdef
MOZ_X11
void
GetPluginDescription
(
nsACString
&
aDescription
)
{
aDescription
.
Truncate
(
)
;
if
(
mInstance
&
&
mPluginHost
)
{
nsCOMPtr
<
nsIPluginTag
>
pluginTag
;
mPluginHost
-
>
GetPluginTagForInstance
(
mInstance
getter_AddRefs
(
pluginTag
)
)
;
if
(
pluginTag
)
{
pluginTag
-
>
GetDescription
(
aDescription
)
;
}
}
}
#
endif
bool
SendNativeEvents
(
)
{
#
ifdef
XP_WIN
return
mPluginWindow
-
>
type
=
=
NPWindowTypeDrawable
&
&
(
MatchPluginName
(
"
Shockwave
Flash
"
)
|
|
MatchPluginName
(
"
Test
Plug
-
in
"
)
)
;
#
elif
defined
(
MOZ_X11
)
|
|
defined
(
XP_MACOSX
)
return
true
;
#
else
return
false
;
#
endif
}
bool
MatchPluginName
(
const
char
*
aPluginName
)
{
return
strncmp
(
GetPluginName
(
)
aPluginName
strlen
(
aPluginName
)
)
=
=
0
;
}
void
NotifyPaintWaiter
(
nsDisplayListBuilder
*
aBuilder
)
;
already_AddRefed
<
mozilla
:
:
layers
:
:
ImageContainer
>
GetImageContainer
(
)
;
bool
NeedsScrollImageLayer
(
)
;
void
DidComposite
(
)
;
nsIntSize
GetCurrentImageSize
(
)
;
void
SetBackgroundUnknown
(
)
;
already_AddRefed
<
DrawTarget
>
BeginUpdateBackground
(
const
nsIntRect
&
aRect
)
;
void
EndUpdateBackground
(
const
nsIntRect
&
aRect
)
;
bool
UseAsyncRendering
(
)
;
already_AddRefed
<
nsIURI
>
GetBaseURI
(
)
const
;
bool
GetCompositionString
(
uint32_t
aIndex
nsTArray
<
uint8_t
>
*
aString
int32_t
*
aLength
)
;
bool
SetCandidateWindow
(
const
mozilla
:
:
widget
:
:
CandidateWindowPosition
&
aPosition
)
;
bool
RequestCommitOrCancel
(
bool
aCommitted
)
;
virtual
void
HandledWindowedPluginKeyEvent
(
const
mozilla
:
:
NativeEventData
&
aKeyEventData
bool
aIsConsumed
)
override
;
void
OnWindowedPluginKeyEvent
(
const
mozilla
:
:
NativeEventData
&
aNativeKeyData
)
;
void
GetCSSZoomFactor
(
float
*
result
)
;
private
:
virtual
~
nsPluginInstanceOwner
(
)
;
bool
IsUpToDate
(
)
{
nsIntSize
size
;
return
NS_SUCCEEDED
(
mInstance
-
>
GetImageSize
(
&
size
)
)
&
&
size
=
=
nsIntSize
(
mPluginWindow
-
>
width
mPluginWindow
-
>
height
)
;
}
#
if
defined
(
XP_WIN
)
nsIWidget
*
GetContainingWidgetIfOffset
(
)
;
already_AddRefed
<
mozilla
:
:
TextComposition
>
GetTextComposition
(
)
;
void
HandleNoConsumedCompositionMessage
(
mozilla
:
:
WidgetCompositionEvent
*
aCompositionEvent
const
NPEvent
*
aPluginEvent
)
;
bool
mGotCompositionData
;
bool
mSentStartComposition
;
bool
mPluginDidNotHandleIMEComposition
;
#
endif
nsPluginNativeWindow
*
mPluginWindow
;
RefPtr
<
nsNPAPIPluginInstance
>
mInstance
;
nsPluginFrame
*
mPluginFrame
;
nsWeakPtr
mContent
;
nsCString
mDocumentBase
;
bool
mWidgetCreationComplete
;
nsCOMPtr
<
nsIWidget
>
mWidget
;
RefPtr
<
nsPluginHost
>
mPluginHost
;
#
ifdef
XP_MACOSX
static
mozilla
:
:
StaticRefPtr
<
nsITimer
>
sCATimer
;
static
nsTArray
<
nsPluginInstanceOwner
*
>
*
sCARefreshListeners
;
bool
mSentInitialTopLevelWindowEvent
;
bool
mLastWindowIsActive
;
bool
mLastContentFocused
;
bool
mShouldBlurOnActivate
;
#
endif
double
mLastScaleFactor
;
double
mLastCSSZoomFactor
;
uint32_t
mLastEventloopNestingLevel
;
bool
mContentFocused
;
bool
mWidgetVisible
;
#
ifdef
MOZ_X11
bool
mFlash10Quirks
;
#
endif
bool
mPluginWindowVisible
;
bool
mPluginDocumentActiveState
;
#
ifdef
XP_MACOSX
NPEventModel
mEventModel
;
bool
mUseAsyncRendering
;
#
endif
RefPtr
<
nsPluginDOMContextMenuListener
>
mCXMenuListener
;
nsresult
DispatchKeyToPlugin
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
nsresult
DispatchMouseToPlugin
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
bool
aAllowPropagate
=
false
)
;
nsresult
DispatchFocusToPlugin
(
mozilla
:
:
dom
:
:
Event
*
aFocusEvent
)
;
nsresult
DispatchCompositionToPlugin
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
#
ifdef
XP_WIN
void
CallDefaultProc
(
const
mozilla
:
:
WidgetGUIEvent
*
aEvent
)
;
#
endif
#
ifdef
XP_MACOSX
static
NPBool
ConvertPointPuppet
(
PuppetWidget
*
widget
nsPluginFrame
*
pluginFrame
double
sourceX
double
sourceY
NPCoordinateSpace
sourceSpace
double
*
destX
double
*
destY
NPCoordinateSpace
destSpace
)
;
static
NPBool
ConvertPointNoPuppet
(
nsIWidget
*
widget
nsPluginFrame
*
pluginFrame
double
sourceX
double
sourceY
NPCoordinateSpace
sourceSpace
double
*
destX
double
*
destY
NPCoordinateSpace
destSpace
)
;
void
PerformDelayedBlurs
(
)
;
#
endif
int
mLastMouseDownButtonType
;
#
ifdef
MOZ_X11
class
Renderer
:
public
gfxXlibNativeRenderer
{
public
:
Renderer
(
NPWindow
*
aWindow
nsPluginInstanceOwner
*
aInstanceOwner
const
nsIntSize
&
aPluginSize
const
nsIntRect
&
aDirtyRect
)
:
mWindow
(
aWindow
)
mInstanceOwner
(
aInstanceOwner
)
mPluginSize
(
aPluginSize
)
mDirtyRect
(
aDirtyRect
)
{
}
virtual
nsresult
DrawWithXlib
(
cairo_surface_t
*
surface
nsIntPoint
offset
nsIntRect
*
clipRects
uint32_t
numClipRects
)
override
;
private
:
NPWindow
*
mWindow
;
nsPluginInstanceOwner
*
mInstanceOwner
;
const
nsIntSize
&
mPluginSize
;
const
nsIntRect
&
mDirtyRect
;
}
;
#
endif
bool
mWaitingForPaint
;
}
;
#
endif
