#
include
"
base
/
basictypes
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jswrapper
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsJSNPRuntime
.
h
"
#
include
"
nsNPAPIPlugin
.
h
"
#
include
"
nsNPAPIPluginInstance
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsDOMJSUtils
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
xpcpublic
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsPluginInstanceOwner
.
h
"
#
include
"
nsWrapperCacheInlines
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
define
NPRUNTIME_JSCLASS_NAME
"
NPObject
JS
wrapper
class
"
using
namespace
mozilla
:
:
plugins
:
:
parent
;
using
namespace
mozilla
;
#
include
"
mozilla
/
plugins
/
PluginScriptableObjectParent
.
h
"
using
mozilla
:
:
plugins
:
:
PluginScriptableObjectParent
;
using
mozilla
:
:
plugins
:
:
ParentNPObject
;
struct
JSObjWrapperHasher
{
typedef
nsJSObjWrapperKey
Key
;
typedef
Key
Lookup
;
static
uint32_t
hash
(
const
Lookup
&
l
)
{
return
js
:
:
MovableCellHasher
<
JS
:
:
Heap
<
JSObject
*
>
>
:
:
hash
(
l
.
mJSObj
)
^
HashGeneric
(
l
.
mNpp
)
;
}
static
bool
match
(
const
Key
&
k
const
Lookup
&
l
)
{
return
js
:
:
MovableCellHasher
<
JS
:
:
Heap
<
JSObject
*
>
>
:
:
match
(
k
.
mJSObj
l
.
mJSObj
)
&
&
k
.
mNpp
=
=
l
.
mNpp
;
}
}
;
namespace
JS
{
template
<
>
struct
GCPolicy
<
nsJSObjWrapper
*
>
{
static
void
trace
(
JSTracer
*
trc
nsJSObjWrapper
*
*
wrapper
const
char
*
name
)
{
MOZ_ASSERT
(
wrapper
)
;
MOZ_ASSERT
(
*
wrapper
)
;
(
*
wrapper
)
-
>
trace
(
trc
)
;
}
}
;
}
class
NPObjWrapperHashEntry
:
public
PLDHashEntryHdr
{
public
:
NPObject
*
mNPObj
;
JS
:
:
TenuredHeap
<
JSObject
*
>
mJSObj
;
NPP
mNpp
;
}
;
typedef
JS
:
:
GCHashMap
<
nsJSObjWrapperKey
nsJSObjWrapper
*
JSObjWrapperHasher
js
:
:
SystemAllocPolicy
>
JSObjWrapperTable
;
static
JSObjWrapperTable
sJSObjWrappers
;
static
bool
sJSObjWrappersAccessible
=
false
;
static
PLDHashTable
*
sNPObjWrappers
;
static
int32_t
sWrapperCount
;
static
bool
sCallbackIsRegistered
=
false
;
static
nsTArray
<
NPObject
*
>
*
sDelayedReleases
;
namespace
{
inline
bool
NPObjectIsOutOfProcessProxy
(
NPObject
*
obj
)
{
return
obj
-
>
_class
=
=
PluginScriptableObjectParent
:
:
GetClass
(
)
;
}
}
class
MOZ_STACK_CLASS
AutoJSExceptionSuppressor
{
public
:
AutoJSExceptionSuppressor
(
dom
:
:
AutoEntryScript
&
aes
nsJSObjWrapper
*
aWrapper
)
:
mAes
(
aes
)
mIsDestroyPending
(
aWrapper
-
>
mDestroyPending
)
{
}
~
AutoJSExceptionSuppressor
(
)
{
if
(
mIsDestroyPending
)
{
mAes
.
ClearException
(
)
;
}
}
protected
:
dom
:
:
AutoEntryScript
&
mAes
;
bool
mIsDestroyPending
;
}
;
NPClass
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
=
{
NP_CLASS_STRUCT_VERSION
nsJSObjWrapper
:
:
NP_Allocate
nsJSObjWrapper
:
:
NP_Deallocate
nsJSObjWrapper
:
:
NP_Invalidate
nsJSObjWrapper
:
:
NP_HasMethod
nsJSObjWrapper
:
:
NP_Invoke
nsJSObjWrapper
:
:
NP_InvokeDefault
nsJSObjWrapper
:
:
NP_HasProperty
nsJSObjWrapper
:
:
NP_GetProperty
nsJSObjWrapper
:
:
NP_SetProperty
nsJSObjWrapper
:
:
NP_RemoveProperty
nsJSObjWrapper
:
:
NP_Enumerate
nsJSObjWrapper
:
:
NP_Construct
}
;
static
bool
NPObjWrapper_AddProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
)
;
static
bool
NPObjWrapper_DelProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
;
static
bool
NPObjWrapper_SetProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
JS
:
:
ObjectOpResult
&
result
)
;
static
bool
NPObjWrapper_GetProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
static
bool
NPObjWrapper_NewEnumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
AutoIdVector
&
properties
bool
enumerableOnly
)
;
static
bool
NPObjWrapper_Resolve
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
bool
*
resolvedp
)
;
static
void
NPObjWrapper_Finalize
(
js
:
:
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
NPObjWrapper_ObjectMoved
(
JSObject
*
obj
const
JSObject
*
old
)
;
static
bool
NPObjWrapper_Call
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
NPObjWrapper_Construct
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
NPObjWrapper_toPrimitive
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
bool
CreateNPObjectMember
(
NPP
npp
JSContext
*
cx
JSObject
*
obj
NPObject
*
npobj
JS
:
:
Handle
<
jsid
>
id
NPVariant
*
getPropertyResult
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
const
static
js
:
:
ClassOps
sNPObjectJSWrapperClassOps
=
{
NPObjWrapper_AddProperty
NPObjWrapper_DelProperty
NPObjWrapper_GetProperty
NPObjWrapper_SetProperty
nullptr
NPObjWrapper_NewEnumerate
NPObjWrapper_Resolve
nullptr
NPObjWrapper_Finalize
NPObjWrapper_Call
nullptr
NPObjWrapper_Construct
nullptr
}
;
const
static
js
:
:
ClassExtension
sNPObjectJSWrapperClassExtension
=
{
nullptr
NPObjWrapper_ObjectMoved
}
;
const
static
js
:
:
Class
sNPObjectJSWrapperClass
=
{
NPRUNTIME_JSCLASS_NAME
JSCLASS_HAS_PRIVATE
|
JSCLASS_FOREGROUND_FINALIZE
&
sNPObjectJSWrapperClassOps
JS_NULL_CLASS_SPEC
&
sNPObjectJSWrapperClassExtension
JS_NULL_OBJECT_OPS
}
;
typedef
struct
NPObjectMemberPrivate
{
JS
:
:
Heap
<
JSObject
*
>
npobjWrapper
;
JS
:
:
Heap
<
JS
:
:
Value
>
fieldValue
;
JS
:
:
Heap
<
jsid
>
methodName
;
NPP
npp
;
}
NPObjectMemberPrivate
;
static
bool
NPObjectMember_GetProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
MutableHandleValue
vp
)
;
static
void
NPObjectMember_Finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
;
static
bool
NPObjectMember_Call
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
void
NPObjectMember_Trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
static
bool
NPObjectMember_toPrimitive
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
const
JSClassOps
sNPObjectMemberClassOps
=
{
nullptr
nullptr
NPObjectMember_GetProperty
nullptr
nullptr
nullptr
nullptr
nullptr
NPObjectMember_Finalize
NPObjectMember_Call
nullptr
nullptr
NPObjectMember_Trace
}
;
static
const
JSClass
sNPObjectMemberClass
=
{
"
NPObject
Ambiguous
Member
class
"
JSCLASS_HAS_PRIVATE
|
JSCLASS_FOREGROUND_FINALIZE
&
sNPObjectMemberClassOps
}
;
static
void
OnWrapperDestroyed
(
)
;
static
void
TraceJSObjWrappers
(
JSTracer
*
trc
void
*
data
)
{
if
(
sJSObjWrappers
.
initialized
(
)
)
{
sJSObjWrappers
.
trace
(
trc
)
;
}
}
static
void
DelayedReleaseGCCallback
(
JSGCStatus
status
)
{
if
(
JSGC_END
=
=
status
)
{
nsAutoPtr
<
nsTArray
<
NPObject
*
>
>
delayedReleases
(
sDelayedReleases
)
;
sDelayedReleases
=
nullptr
;
if
(
delayedReleases
)
{
for
(
uint32_t
i
=
0
;
i
<
delayedReleases
-
>
Length
(
)
;
+
+
i
)
{
NPObject
*
obj
=
(
*
delayedReleases
)
[
i
]
;
if
(
obj
)
_releaseobject
(
obj
)
;
OnWrapperDestroyed
(
)
;
}
}
}
}
static
bool
RegisterGCCallbacks
(
)
{
if
(
sCallbackIsRegistered
)
{
return
true
;
}
JSContext
*
cx
=
dom
:
:
danger
:
:
GetJSContext
(
)
;
if
(
!
JS_AddExtraGCRootsTracer
(
cx
TraceJSObjWrappers
nullptr
)
)
{
return
false
;
}
xpc
:
:
AddGCCallback
(
DelayedReleaseGCCallback
)
;
sCallbackIsRegistered
=
true
;
return
true
;
}
static
void
UnregisterGCCallbacks
(
)
{
MOZ_ASSERT
(
sCallbackIsRegistered
)
;
JSContext
*
cx
=
dom
:
:
danger
:
:
GetJSContext
(
)
;
JS_RemoveExtraGCRootsTracer
(
cx
TraceJSObjWrappers
nullptr
)
;
if
(
sCallbackIsRegistered
)
{
xpc
:
:
RemoveGCCallback
(
DelayedReleaseGCCallback
)
;
sCallbackIsRegistered
=
false
;
}
}
static
bool
CreateJSObjWrapperTable
(
)
{
MOZ_ASSERT
(
!
sJSObjWrappersAccessible
)
;
MOZ_ASSERT
(
!
sJSObjWrappers
.
initialized
(
)
)
;
if
(
!
RegisterGCCallbacks
(
)
)
{
return
false
;
}
if
(
!
sJSObjWrappers
.
init
(
16
)
)
{
NS_ERROR
(
"
Error
initializing
PLDHashTable
sJSObjWrappers
!
"
)
;
return
false
;
}
sJSObjWrappersAccessible
=
true
;
return
true
;
}
static
void
DestroyJSObjWrapperTable
(
)
{
MOZ_ASSERT
(
sJSObjWrappersAccessible
)
;
MOZ_ASSERT
(
sJSObjWrappers
.
initialized
(
)
)
;
MOZ_ASSERT
(
sJSObjWrappers
.
count
(
)
=
=
0
)
;
sJSObjWrappers
.
finish
(
)
;
sJSObjWrappersAccessible
=
false
;
}
static
bool
CreateNPObjWrapperTable
(
)
{
MOZ_ASSERT
(
!
sNPObjWrappers
)
;
if
(
!
RegisterGCCallbacks
(
)
)
{
return
false
;
}
sNPObjWrappers
=
new
PLDHashTable
(
PLDHashTable
:
:
StubOps
(
)
sizeof
(
NPObjWrapperHashEntry
)
)
;
return
true
;
}
static
void
DestroyNPObjWrapperTable
(
)
{
MOZ_ASSERT
(
sNPObjWrappers
-
>
EntryCount
(
)
=
=
0
)
;
delete
sNPObjWrappers
;
sNPObjWrappers
=
nullptr
;
}
static
void
OnWrapperCreated
(
)
{
+
+
sWrapperCount
;
}
static
void
OnWrapperDestroyed
(
)
{
NS_ASSERTION
(
sWrapperCount
"
Whaaa
unbalanced
created
/
destroyed
calls
!
"
)
;
if
(
-
-
sWrapperCount
=
=
0
)
{
if
(
sJSObjWrappersAccessible
)
{
DestroyJSObjWrapperTable
(
)
;
}
if
(
sNPObjWrappers
)
{
DestroyNPObjWrapperTable
(
)
;
}
UnregisterGCCallbacks
(
)
;
}
}
namespace
mozilla
{
namespace
plugins
{
namespace
parent
{
static
nsIGlobalObject
*
GetGlobalObject
(
NPP
npp
)
{
NS_ENSURE_TRUE
(
npp
nullptr
)
;
nsNPAPIPluginInstance
*
inst
=
(
nsNPAPIPluginInstance
*
)
npp
-
>
ndata
;
NS_ENSURE_TRUE
(
inst
nullptr
)
;
RefPtr
<
nsPluginInstanceOwner
>
owner
=
inst
-
>
GetOwner
(
)
;
NS_ENSURE_TRUE
(
owner
nullptr
)
;
nsCOMPtr
<
nsIDocument
>
doc
;
owner
-
>
GetDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_TRUE
(
doc
nullptr
)
;
return
doc
-
>
GetScopeObject
(
)
;
}
}
}
}
static
NPP
LookupNPP
(
NPObject
*
npobj
)
;
static
JS
:
:
Value
NPVariantToJSVal
(
NPP
npp
JSContext
*
cx
const
NPVariant
*
variant
)
{
switch
(
variant
-
>
type
)
{
case
NPVariantType_Void
:
return
JS
:
:
UndefinedValue
(
)
;
case
NPVariantType_Null
:
return
JS
:
:
NullValue
(
)
;
case
NPVariantType_Bool
:
return
JS
:
:
BooleanValue
(
NPVARIANT_TO_BOOLEAN
(
*
variant
)
)
;
case
NPVariantType_Int32
:
{
return
:
:
JS_NumberValue
(
NPVARIANT_TO_INT32
(
*
variant
)
)
;
}
case
NPVariantType_Double
:
{
return
:
:
JS_NumberValue
(
NPVARIANT_TO_DOUBLE
(
*
variant
)
)
;
}
case
NPVariantType_String
:
{
const
NPString
*
s
=
&
NPVARIANT_TO_STRING
(
*
variant
)
;
NS_ConvertUTF8toUTF16
utf16String
(
s
-
>
UTF8Characters
s
-
>
UTF8Length
)
;
JSString
*
str
=
:
:
JS_NewUCStringCopyN
(
cx
utf16String
.
get
(
)
utf16String
.
Length
(
)
)
;
if
(
str
)
{
return
JS
:
:
StringValue
(
str
)
;
}
break
;
}
case
NPVariantType_Object
:
{
if
(
npp
)
{
JSObject
*
obj
=
nsNPObjWrapper
:
:
GetNewOrUsed
(
npp
cx
NPVARIANT_TO_OBJECT
(
*
variant
)
)
;
if
(
obj
)
{
return
JS
:
:
ObjectValue
(
*
obj
)
;
}
}
NS_ERROR
(
"
Error
wrapping
NPObject
!
"
)
;
break
;
}
default
:
NS_ERROR
(
"
Unknown
NPVariant
type
!
"
)
;
}
NS_ERROR
(
"
Unable
to
convert
NPVariant
to
jsval
!
"
)
;
return
JS
:
:
UndefinedValue
(
)
;
}
bool
JSValToNPVariant
(
NPP
npp
JSContext
*
cx
const
JS
:
:
Value
&
val
NPVariant
*
variant
)
{
NS_ASSERTION
(
npp
"
Must
have
an
NPP
to
wrap
a
jsval
!
"
)
;
if
(
val
.
isPrimitive
(
)
)
{
if
(
val
.
isUndefined
(
)
)
{
VOID_TO_NPVARIANT
(
*
variant
)
;
}
else
if
(
val
.
isNull
(
)
)
{
NULL_TO_NPVARIANT
(
*
variant
)
;
}
else
if
(
val
.
isBoolean
(
)
)
{
BOOLEAN_TO_NPVARIANT
(
val
.
toBoolean
(
)
*
variant
)
;
}
else
if
(
val
.
isInt32
(
)
)
{
INT32_TO_NPVARIANT
(
val
.
toInt32
(
)
*
variant
)
;
}
else
if
(
val
.
isDouble
(
)
)
{
double
d
=
val
.
toDouble
(
)
;
int
i
;
if
(
JS_DoubleIsInt32
(
d
&
i
)
)
{
INT32_TO_NPVARIANT
(
i
*
variant
)
;
}
else
{
DOUBLE_TO_NPVARIANT
(
d
*
variant
)
;
}
}
else
if
(
val
.
isString
(
)
)
{
JSString
*
jsstr
=
val
.
toString
(
)
;
nsAutoJSString
str
;
if
(
!
str
.
init
(
cx
jsstr
)
)
{
return
false
;
}
uint32_t
len
;
char
*
p
=
ToNewUTF8String
(
str
&
len
)
;
if
(
!
p
)
{
return
false
;
}
STRINGN_TO_NPVARIANT
(
p
len
*
variant
)
;
}
else
{
NS_ERROR
(
"
Unknown
primitive
type
!
"
)
;
return
false
;
}
return
true
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
val
.
toObjectOrNull
(
)
)
;
obj
=
js
:
:
CheckedUnwrap
(
obj
)
;
if
(
!
obj
)
{
obj
=
val
.
toObjectOrNull
(
)
;
}
NPObject
*
npobj
=
nsJSObjWrapper
:
:
GetNewOrUsed
(
npp
obj
)
;
if
(
!
npobj
)
{
return
false
;
}
OBJECT_TO_NPVARIANT
(
npobj
*
variant
)
;
return
true
;
}
static
void
ThrowJSExceptionASCII
(
JSContext
*
cx
const
char
*
message
)
{
const
char
*
ex
=
PeekException
(
)
;
if
(
ex
)
{
nsAutoString
ucex
;
if
(
message
)
{
AppendASCIItoUTF16
(
message
ucex
)
;
AppendASCIItoUTF16
(
"
[
plugin
exception
:
"
ucex
)
;
}
AppendUTF8toUTF16
(
ex
ucex
)
;
if
(
message
)
{
AppendASCIItoUTF16
(
"
]
.
"
ucex
)
;
}
JSString
*
str
=
:
:
JS_NewUCStringCopyN
(
cx
ucex
.
get
(
)
ucex
.
Length
(
)
)
;
if
(
str
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exn
(
cx
JS
:
:
StringValue
(
str
)
)
;
:
:
JS_SetPendingException
(
cx
exn
)
;
}
PopException
(
)
;
}
else
{
:
:
JS_ReportErrorASCII
(
cx
"
%
s
"
message
)
;
}
}
static
bool
ReportExceptionIfPending
(
JSContext
*
cx
)
{
const
char
*
ex
=
PeekException
(
)
;
if
(
!
ex
)
{
return
true
;
}
ThrowJSExceptionASCII
(
cx
nullptr
)
;
return
false
;
}
nsJSObjWrapper
:
:
nsJSObjWrapper
(
NPP
npp
)
:
mJSObj
(
nullptr
)
mNpp
(
npp
)
mDestroyPending
(
false
)
{
MOZ_COUNT_CTOR
(
nsJSObjWrapper
)
;
OnWrapperCreated
(
)
;
}
nsJSObjWrapper
:
:
~
nsJSObjWrapper
(
)
{
MOZ_COUNT_DTOR
(
nsJSObjWrapper
)
;
NP_Invalidate
(
this
)
;
OnWrapperDestroyed
(
)
;
}
NPObject
*
nsJSObjWrapper
:
:
NP_Allocate
(
NPP
npp
NPClass
*
aClass
)
{
NS_ASSERTION
(
aClass
=
=
&
sJSObjWrapperNPClass
"
Huh
wrong
class
passed
to
NP_Allocate
(
)
!
!
!
"
)
;
return
new
nsJSObjWrapper
(
npp
)
;
}
void
nsJSObjWrapper
:
:
NP_Deallocate
(
NPObject
*
npobj
)
{
delete
(
nsJSObjWrapper
*
)
npobj
;
}
void
nsJSObjWrapper
:
:
NP_Invalidate
(
NPObject
*
npobj
)
{
nsJSObjWrapper
*
jsnpobj
=
(
nsJSObjWrapper
*
)
npobj
;
if
(
jsnpobj
&
&
jsnpobj
-
>
mJSObj
)
{
if
(
sJSObjWrappersAccessible
)
{
nsJSObjWrapperKey
key
(
jsnpobj
-
>
mJSObj
jsnpobj
-
>
mNpp
)
;
JSObjWrapperTable
:
:
Ptr
ptr
=
sJSObjWrappers
.
lookup
(
key
)
;
MOZ_ASSERT
(
ptr
.
found
(
)
)
;
sJSObjWrappers
.
remove
(
ptr
)
;
}
jsnpobj
-
>
mJSObj
=
nullptr
;
}
}
static
bool
GetProperty
(
JSContext
*
cx
JSObject
*
objArg
NPIdentifier
npid
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
{
NS_ASSERTION
(
NPIdentifierIsInt
(
npid
)
|
|
NPIdentifierIsString
(
npid
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
objArg
)
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
NPIdentifierToJSId
(
npid
)
)
;
return
:
:
JS_GetPropertyById
(
cx
obj
id
rval
)
;
}
static
void
MarkCrossZoneNPIdentifier
(
JSContext
*
cx
NPIdentifier
npid
)
{
JS_MarkCrossZoneId
(
cx
NPIdentifierToJSId
(
npid
)
)
;
}
bool
nsJSObjWrapper
:
:
NP_HasMethod
(
NPObject
*
npobj
NPIdentifier
id
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsIGlobalObject
*
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
HasMethod
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_HasMethod
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
JSAutoCompartment
ac
(
cx
npjsobj
-
>
mJSObj
)
;
MarkCrossZoneNPIdentifier
(
cx
id
)
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
bool
ok
=
GetProperty
(
cx
npjsobj
-
>
mJSObj
id
&
v
)
;
return
ok
&
&
!
v
.
isPrimitive
(
)
&
&
:
:
JS_ObjectIsFunction
(
cx
v
.
toObjectOrNull
(
)
)
;
}
static
bool
doInvoke
(
NPObject
*
npobj
NPIdentifier
method
const
NPVariant
*
args
uint32_t
argCount
bool
ctorCall
NPVariant
*
result
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
doInvoke
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
|
|
!
result
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
or
result
in
doInvoke
!
"
)
;
return
false
;
}
VOID_TO_NPVARIANT
(
*
result
)
;
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
JS
:
:
Rooted
<
JSObject
*
>
jsobj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
jsobj
)
;
MarkCrossZoneNPIdentifier
(
cx
method
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
fv
(
cx
)
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
if
(
method
!
=
NPIdentifier_VOID
)
{
if
(
!
GetProperty
(
cx
jsobj
method
&
fv
)
|
|
:
:
JS_TypeOfValue
(
cx
fv
)
!
=
JSTYPE_FUNCTION
)
{
return
false
;
}
}
else
{
fv
.
setObject
(
*
jsobj
)
;
}
JS
:
:
AutoValueVector
jsargs
(
cx
)
;
if
(
!
jsargs
.
reserve
(
argCount
)
)
{
:
:
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
argCount
;
+
+
i
)
{
jsargs
.
infallibleAppend
(
NPVariantToJSVal
(
npp
cx
args
+
i
)
)
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
bool
ok
=
false
;
if
(
ctorCall
)
{
JSObject
*
newObj
=
:
:
JS_New
(
cx
jsobj
jsargs
)
;
if
(
newObj
)
{
v
.
setObject
(
*
newObj
)
;
ok
=
true
;
}
}
else
{
ok
=
:
:
JS_CallFunctionValue
(
cx
jsobj
fv
jsargs
&
v
)
;
}
if
(
ok
)
ok
=
JSValToNPVariant
(
npp
cx
v
result
)
;
return
ok
;
}
bool
nsJSObjWrapper
:
:
NP_Invoke
(
NPObject
*
npobj
NPIdentifier
method
const
NPVariant
*
args
uint32_t
argCount
NPVariant
*
result
)
{
if
(
method
=
=
NPIdentifier_VOID
)
{
return
false
;
}
return
doInvoke
(
npobj
method
args
argCount
false
result
)
;
}
bool
nsJSObjWrapper
:
:
NP_InvokeDefault
(
NPObject
*
npobj
const
NPVariant
*
args
uint32_t
argCount
NPVariant
*
result
)
{
return
doInvoke
(
npobj
NPIdentifier_VOID
args
argCount
false
result
)
;
}
bool
nsJSObjWrapper
:
:
NP_HasProperty
(
NPObject
*
npobj
NPIdentifier
npid
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsIGlobalObject
*
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
HasProperty
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_HasProperty
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
bool
found
ok
=
false
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
Rooted
<
JSObject
*
>
jsobj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
jsobj
)
;
MarkCrossZoneNPIdentifier
(
cx
npid
)
;
NS_ASSERTION
(
NPIdentifierIsInt
(
npid
)
|
|
NPIdentifierIsString
(
npid
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
NPIdentifierToJSId
(
npid
)
)
;
ok
=
:
:
JS_HasPropertyById
(
cx
jsobj
id
&
found
)
;
return
ok
&
&
found
;
}
bool
nsJSObjWrapper
:
:
NP_GetProperty
(
NPObject
*
npobj
NPIdentifier
id
NPVariant
*
result
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
get
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_GetProperty
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JSAutoCompartment
ac
(
cx
npjsobj
-
>
mJSObj
)
;
MarkCrossZoneNPIdentifier
(
cx
id
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
return
(
GetProperty
(
cx
npjsobj
-
>
mJSObj
id
&
v
)
&
&
JSValToNPVariant
(
npp
cx
v
result
)
)
;
}
bool
nsJSObjWrapper
:
:
NP_SetProperty
(
NPObject
*
npobj
NPIdentifier
npid
const
NPVariant
*
value
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
set
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_SetProperty
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
bool
ok
=
false
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
Rooted
<
JSObject
*
>
jsObj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
jsObj
)
;
MarkCrossZoneNPIdentifier
(
cx
npid
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
NPVariantToJSVal
(
npp
cx
value
)
)
;
NS_ASSERTION
(
NPIdentifierIsInt
(
npid
)
|
|
NPIdentifierIsString
(
npid
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
NPIdentifierToJSId
(
npid
)
)
;
ok
=
:
:
JS_SetPropertyById
(
cx
jsObj
id
v
)
;
return
ok
;
}
bool
nsJSObjWrapper
:
:
NP_RemoveProperty
(
NPObject
*
npobj
NPIdentifier
npid
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsIGlobalObject
*
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
RemoveProperty
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_RemoveProperty
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
ObjectOpResult
result
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
obj
)
;
MarkCrossZoneNPIdentifier
(
cx
npid
)
;
NS_ASSERTION
(
NPIdentifierIsInt
(
npid
)
|
|
NPIdentifierIsString
(
npid
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
NPIdentifierToJSId
(
npid
)
)
;
if
(
!
:
:
JS_DeletePropertyById
(
cx
obj
id
result
)
)
return
false
;
if
(
result
)
{
bool
hasProp
;
if
(
!
:
:
JS_HasPropertyById
(
cx
obj
id
&
hasProp
)
)
return
false
;
if
(
!
hasProp
)
return
true
;
result
.
failCantDelete
(
)
;
}
return
result
.
reportError
(
cx
obj
id
)
;
}
bool
nsJSObjWrapper
:
:
NP_Enumerate
(
NPObject
*
npobj
NPIdentifier
*
*
idarray
uint32_t
*
count
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsIGlobalObject
*
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
Enumerate
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
*
idarray
=
0
;
*
count
=
0
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_Enumerate
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
Rooted
<
JSObject
*
>
jsobj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
jsobj
)
;
JS
:
:
Rooted
<
JS
:
:
IdVector
>
ida
(
cx
JS
:
:
IdVector
(
cx
)
)
;
if
(
!
JS_Enumerate
(
cx
jsobj
&
ida
)
)
{
return
false
;
}
*
count
=
ida
.
length
(
)
;
*
idarray
=
(
NPIdentifier
*
)
malloc
(
*
count
*
sizeof
(
NPIdentifier
)
)
;
if
(
!
*
idarray
)
{
ThrowJSExceptionASCII
(
cx
"
Memory
allocation
failed
for
NPIdentifier
!
"
)
;
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
*
count
;
i
+
+
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
if
(
!
JS_IdToValue
(
cx
ida
[
i
]
&
v
)
)
{
free
(
*
idarray
)
;
return
false
;
}
NPIdentifier
id
;
if
(
v
.
isString
(
)
)
{
JS
:
:
Rooted
<
JSString
*
>
str
(
cx
v
.
toString
(
)
)
;
str
=
JS_AtomizeAndPinJSString
(
cx
str
)
;
if
(
!
str
)
{
free
(
*
idarray
)
;
return
false
;
}
id
=
StringToNPIdentifier
(
cx
str
)
;
}
else
{
NS_ASSERTION
(
v
.
isInt32
(
)
"
The
element
in
ida
must
be
either
string
or
int
!
\
n
"
)
;
id
=
IntToNPIdentifier
(
v
.
toInt32
(
)
)
;
}
(
*
idarray
)
[
i
]
=
id
;
}
return
true
;
}
bool
nsJSObjWrapper
:
:
NP_Construct
(
NPObject
*
npobj
const
NPVariant
*
args
uint32_t
argCount
NPVariant
*
result
)
{
return
doInvoke
(
npobj
NPIdentifier_VOID
args
argCount
true
result
)
;
}
NPObject
*
nsJSObjWrapper
:
:
GetNewOrUsed
(
NPP
npp
JS
:
:
Handle
<
JSObject
*
>
obj
)
{
if
(
!
npp
)
{
NS_ERROR
(
"
Null
NPP
passed
to
nsJSObjWrapper
:
:
GetNewOrUsed
(
)
!
"
)
;
return
nullptr
;
}
if
(
nsNPObjWrapper
:
:
IsWrapper
(
obj
)
)
{
NPObject
*
npobj
=
(
NPObject
*
)
:
:
JS_GetPrivate
(
obj
)
;
if
(
!
npobj
)
return
nullptr
;
if
(
LookupNPP
(
npobj
)
=
=
npp
)
return
_retainobject
(
npobj
)
;
}
if
(
!
sJSObjWrappers
.
initialized
(
)
)
{
if
(
!
CreateJSObjWrapperTable
(
)
)
return
nullptr
;
}
MOZ_ASSERT
(
sJSObjWrappersAccessible
)
;
JSObjWrapperTable
:
:
Ptr
p
=
sJSObjWrappers
.
lookupForAdd
(
nsJSObjWrapperKey
(
obj
npp
)
)
;
if
(
p
)
{
MOZ_ASSERT
(
p
-
>
value
(
)
)
;
return
_retainobject
(
p
-
>
value
(
)
)
;
}
nsJSObjWrapper
*
wrapper
=
(
nsJSObjWrapper
*
)
_createobject
(
npp
&
sJSObjWrapperNPClass
)
;
if
(
!
wrapper
)
{
return
nullptr
;
}
wrapper
-
>
mJSObj
=
obj
;
if
(
!
sJSObjWrappers
.
putNew
(
nsJSObjWrapperKey
(
obj
npp
)
wrapper
)
)
{
_releaseobject
(
wrapper
)
;
return
nullptr
;
}
return
wrapper
;
}
static
JSObject
*
GetNPObjectWrapper
(
JSContext
*
cx
JSObject
*
aObj
bool
wrapResult
=
true
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
aObj
)
;
while
(
obj
&
&
(
obj
=
js
:
:
CheckedUnwrap
(
obj
)
)
)
{
if
(
nsNPObjWrapper
:
:
IsWrapper
(
obj
)
)
{
if
(
wrapResult
&
&
!
JS_WrapObject
(
cx
&
obj
)
)
{
return
nullptr
;
}
return
obj
;
}
JSAutoCompartment
ac
(
cx
obj
)
;
if
(
!
:
:
JS_GetPrototype
(
cx
obj
&
obj
)
)
{
return
nullptr
;
}
}
return
nullptr
;
}
static
NPObject
*
GetNPObject
(
JSContext
*
cx
JSObject
*
obj
)
{
obj
=
GetNPObjectWrapper
(
cx
obj
false
)
;
if
(
!
obj
)
{
return
nullptr
;
}
return
(
NPObject
*
)
:
:
JS_GetPrivate
(
obj
)
;
}
static
bool
NPObjWrapper_AddProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
Value
>
v
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
hasProperty
|
|
!
npobj
-
>
_class
-
>
hasMethod
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
if
(
NPObjectIsOutOfProcessProxy
(
npobj
)
)
{
return
true
;
}
PluginDestructionGuard
pdg
(
LookupNPP
(
npobj
)
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
bool
hasProperty
=
npobj
-
>
_class
-
>
hasProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
hasProperty
)
return
true
;
bool
hasMethod
=
npobj
-
>
_class
-
>
hasMethod
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
!
hasMethod
)
{
ThrowJSExceptionASCII
(
cx
"
Trying
to
add
unsupported
property
on
NPObject
!
"
)
;
return
false
;
}
return
true
;
}
static
bool
NPObjWrapper_DelProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
hasProperty
|
|
!
npobj
-
>
_class
-
>
removeProperty
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
LookupNPP
(
npobj
)
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
if
(
!
NPObjectIsOutOfProcessProxy
(
npobj
)
)
{
bool
hasProperty
=
npobj
-
>
_class
-
>
hasProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
!
hasProperty
)
return
result
.
succeed
(
)
;
}
bool
succeeded
=
npobj
-
>
_class
-
>
removeProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
return
succeeded
?
result
.
succeed
(
)
:
result
.
failCantDelete
(
)
;
}
static
bool
NPObjWrapper_SetProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
JS
:
:
ObjectOpResult
&
result
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
hasProperty
|
|
!
npobj
-
>
_class
-
>
setProperty
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
NPP
npp
=
LookupNPP
(
npobj
)
;
if
(
!
npp
)
{
ThrowJSExceptionASCII
(
cx
"
No
NPP
found
for
NPObject
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
npp
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
if
(
!
NPObjectIsOutOfProcessProxy
(
npobj
)
)
{
bool
hasProperty
=
npobj
-
>
_class
-
>
hasProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
!
hasProperty
)
{
ThrowJSExceptionASCII
(
cx
"
Trying
to
set
unsupported
property
on
NPObject
!
"
)
;
return
false
;
}
}
NPVariant
npv
;
if
(
!
JSValToNPVariant
(
npp
cx
vp
&
npv
)
)
{
ThrowJSExceptionASCII
(
cx
"
Error
converting
jsval
to
NPVariant
!
"
)
;
return
false
;
}
bool
ok
=
npobj
-
>
_class
-
>
setProperty
(
npobj
identifier
&
npv
)
;
_releasevariantvalue
(
&
npv
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
!
ok
)
{
ThrowJSExceptionASCII
(
cx
"
Error
setting
property
on
NPObject
!
"
)
;
return
false
;
}
return
result
.
succeed
(
)
;
}
static
bool
NPObjWrapper_GetProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
hasProperty
|
|
!
npobj
-
>
_class
-
>
hasMethod
|
|
!
npobj
-
>
_class
-
>
getProperty
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
if
(
JSID_IS_SYMBOL
(
id
)
)
{
JS
:
:
RootedSymbol
sym
(
cx
JSID_TO_SYMBOL
(
id
)
)
;
if
(
JS
:
:
GetSymbolCode
(
sym
)
=
=
JS
:
:
SymbolCode
:
:
toPrimitive
)
{
JS
:
:
RootedObject
obj
(
cx
JS_GetFunctionObject
(
JS_NewFunction
(
cx
NPObjWrapper_toPrimitive
1
0
"
Symbol
.
toPrimitive
"
)
)
)
;
if
(
!
obj
)
return
false
;
vp
.
setObject
(
*
obj
)
;
return
true
;
}
if
(
JS
:
:
GetSymbolCode
(
sym
)
=
=
JS
:
:
SymbolCode
:
:
toStringTag
)
{
JS
:
:
RootedString
tag
(
cx
JS_NewStringCopyZ
(
cx
NPRUNTIME_JSCLASS_NAME
)
)
;
if
(
!
tag
)
{
return
false
;
}
vp
.
setString
(
tag
)
;
return
true
;
}
vp
.
setUndefined
(
)
;
return
true
;
}
NPP
npp
=
LookupNPP
(
npobj
)
;
if
(
!
npp
)
{
ThrowJSExceptionASCII
(
cx
"
No
NPP
found
for
NPObject
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
npp
)
;
bool
hasProperty
hasMethod
;
NPVariant
npv
;
VOID_TO_NPVARIANT
(
npv
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
if
(
NPObjectIsOutOfProcessProxy
(
npobj
)
)
{
PluginScriptableObjectParent
*
actor
=
static_cast
<
ParentNPObject
*
>
(
npobj
)
-
>
parent
;
if
(
!
actor
)
return
false
;
bool
success
=
actor
-
>
GetPropertyHelper
(
identifier
&
hasProperty
&
hasMethod
&
npv
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
{
if
(
success
)
_releasevariantvalue
(
&
npv
)
;
return
false
;
}
if
(
success
)
{
if
(
hasProperty
&
&
hasMethod
)
return
CreateNPObjectMember
(
npp
cx
obj
npobj
id
&
npv
vp
)
;
if
(
hasProperty
)
{
vp
.
set
(
NPVariantToJSVal
(
npp
cx
&
npv
)
)
;
_releasevariantvalue
(
&
npv
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
}
}
return
true
;
}
hasProperty
=
npobj
-
>
_class
-
>
hasProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
hasMethod
=
npobj
-
>
_class
-
>
hasMethod
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
hasProperty
&
&
hasMethod
)
return
CreateNPObjectMember
(
npp
cx
obj
npobj
id
nullptr
vp
)
;
if
(
hasProperty
)
{
if
(
npobj
-
>
_class
-
>
getProperty
(
npobj
identifier
&
npv
)
)
vp
.
set
(
NPVariantToJSVal
(
npp
cx
&
npv
)
)
;
_releasevariantvalue
(
&
npv
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
}
return
true
;
}
static
bool
CallNPMethodInternal
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
unsigned
argc
JS
:
:
Value
*
argv
JS
:
:
Value
*
rval
bool
ctorCall
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
NPP
npp
=
LookupNPP
(
npobj
)
;
if
(
!
npp
)
{
ThrowJSExceptionASCII
(
cx
"
Error
finding
NPP
for
NPObject
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
npp
)
;
NPVariant
npargs_buf
[
8
]
;
NPVariant
*
npargs
=
npargs_buf
;
if
(
argc
>
(
sizeof
(
npargs_buf
)
/
sizeof
(
NPVariant
)
)
)
{
npargs
=
(
NPVariant
*
)
malloc
(
argc
*
sizeof
(
NPVariant
)
)
;
if
(
!
npargs
)
{
ThrowJSExceptionASCII
(
cx
"
Out
of
memory
!
"
)
;
return
false
;
}
}
uint32_t
i
;
for
(
i
=
0
;
i
<
argc
;
+
+
i
)
{
if
(
!
JSValToNPVariant
(
npp
cx
argv
[
i
]
npargs
+
i
)
)
{
ThrowJSExceptionASCII
(
cx
"
Error
converting
jsvals
to
NPVariants
!
"
)
;
if
(
npargs
!
=
npargs_buf
)
{
free
(
npargs
)
;
}
return
false
;
}
}
NPVariant
v
;
VOID_TO_NPVARIANT
(
v
)
;
JSObject
*
funobj
=
argv
[
-
2
]
.
toObjectOrNull
(
)
;
bool
ok
;
const
char
*
msg
=
"
Error
calling
method
on
NPObject
!
"
;
if
(
ctorCall
)
{
if
(
NP_CLASS_STRUCT_VERSION_HAS_CTOR
(
npobj
-
>
_class
)
&
&
npobj
-
>
_class
-
>
construct
)
{
ok
=
npobj
-
>
_class
-
>
construct
(
npobj
npargs
argc
&
v
)
;
}
else
{
ok
=
false
;
msg
=
"
Attempt
to
construct
object
from
class
with
no
constructor
.
"
;
}
}
else
if
(
funobj
!
=
obj
)
{
if
(
npobj
-
>
_class
-
>
invoke
)
{
JSFunction
*
fun
=
:
:
JS_GetObjectFunction
(
funobj
)
;
JS
:
:
Rooted
<
JSString
*
>
funId
(
cx
:
:
JS_GetFunctionId
(
fun
)
)
;
JSString
*
name
=
:
:
JS_AtomizeAndPinJSString
(
cx
funId
)
;
NPIdentifier
id
=
StringToNPIdentifier
(
cx
name
)
;
ok
=
npobj
-
>
_class
-
>
invoke
(
npobj
id
npargs
argc
&
v
)
;
}
else
{
ok
=
false
;
msg
=
"
Attempt
to
call
a
method
on
object
with
no
invoke
method
.
"
;
}
}
else
{
if
(
npobj
-
>
_class
-
>
invokeDefault
)
{
ok
=
npobj
-
>
_class
-
>
invokeDefault
(
npobj
npargs
argc
&
v
)
;
}
else
{
ok
=
false
;
msg
=
"
Attempt
to
call
a
default
method
on
object
with
no
"
"
invokeDefault
method
.
"
;
}
}
for
(
i
=
0
;
i
<
argc
;
+
+
i
)
{
_releasevariantvalue
(
npargs
+
i
)
;
}
if
(
npargs
!
=
npargs_buf
)
{
free
(
npargs
)
;
}
if
(
!
ok
)
{
if
(
ReportExceptionIfPending
(
cx
)
)
ThrowJSExceptionASCII
(
cx
msg
)
;
return
false
;
}
*
rval
=
NPVariantToJSVal
(
npp
cx
&
v
)
;
_releasevariantvalue
(
&
v
)
;
return
ReportExceptionIfPending
(
cx
)
;
}
static
bool
CallNPMethod
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
JS_THIS_OBJECT
(
cx
vp
)
)
;
if
(
!
obj
)
return
false
;
return
CallNPMethodInternal
(
cx
obj
args
.
length
(
)
args
.
array
(
)
vp
false
)
;
}
static
bool
NPObjWrapper_NewEnumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
AutoIdVector
&
properties
bool
enumerableOnly
)
{
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
LookupNPP
(
npobj
)
)
;
if
(
!
NP_CLASS_STRUCT_VERSION_HAS_ENUM
(
npobj
-
>
_class
)
|
|
!
npobj
-
>
_class
-
>
enumerate
)
{
return
true
;
}
NPIdentifier
*
identifiers
;
uint32_t
length
;
if
(
!
npobj
-
>
_class
-
>
enumerate
(
npobj
&
identifiers
&
length
)
)
{
if
(
ReportExceptionIfPending
(
cx
)
)
{
ThrowJSExceptionASCII
(
cx
"
Error
enumerating
properties
on
scriptable
"
"
plugin
object
"
)
;
}
return
false
;
}
if
(
!
properties
.
reserve
(
length
)
)
return
false
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
i
+
+
)
{
id
=
NPIdentifierToJSId
(
identifiers
[
i
]
)
;
properties
.
infallibleAppend
(
id
)
;
}
free
(
identifiers
)
;
return
true
;
}
static
bool
NPObjWrapper_Resolve
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
bool
*
resolvedp
)
{
if
(
JSID_IS_SYMBOL
(
id
)
)
return
true
;
AUTO_PROFILER_LABEL
(
"
NPObjWrapper_Resolve
"
JS
)
;
NPObject
*
npobj
=
GetNPObject
(
cx
obj
)
;
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
hasProperty
|
|
!
npobj
-
>
_class
-
>
hasMethod
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
as
private
data
!
"
)
;
return
false
;
}
PluginDestructionGuard
pdg
(
LookupNPP
(
npobj
)
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
bool
hasProperty
=
npobj
-
>
_class
-
>
hasProperty
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
hasProperty
)
{
NS_ASSERTION
(
JSID_IS_STRING
(
id
)
|
|
JSID_IS_INT
(
id
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
if
(
!
:
:
JS_DefinePropertyById
(
cx
obj
id
JS
:
:
UndefinedHandleValue
JSPROP_ENUMERATE
|
JSPROP_SHARED
)
)
{
return
false
;
}
*
resolvedp
=
true
;
return
true
;
}
bool
hasMethod
=
npobj
-
>
_class
-
>
hasMethod
(
npobj
identifier
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
)
return
false
;
if
(
hasMethod
)
{
NS_ASSERTION
(
JSID_IS_STRING
(
id
)
|
|
JSID_IS_INT
(
id
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JSFunction
*
fnc
=
:
:
JS_DefineFunctionById
(
cx
obj
id
CallNPMethod
0
JSPROP_ENUMERATE
)
;
*
resolvedp
=
true
;
return
fnc
!
=
nullptr
;
}
return
true
;
}
static
void
NPObjWrapper_Finalize
(
js
:
:
FreeOp
*
fop
JSObject
*
obj
)
{
JS
:
:
AutoAssertGCCallback
inCallback
;
NPObject
*
npobj
=
(
NPObject
*
)
:
:
JS_GetPrivate
(
obj
)
;
if
(
npobj
)
{
if
(
sNPObjWrappers
)
{
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Search
(
npobj
)
)
;
if
(
entry
&
&
entry
-
>
mJSObj
=
=
obj
)
{
sNPObjWrappers
-
>
Remove
(
npobj
)
;
}
}
}
if
(
!
sDelayedReleases
)
sDelayedReleases
=
new
nsTArray
<
NPObject
*
>
;
sDelayedReleases
-
>
AppendElement
(
npobj
)
;
}
static
void
NPObjWrapper_ObjectMoved
(
JSObject
*
obj
const
JSObject
*
old
)
{
if
(
!
sNPObjWrappers
)
{
return
;
}
NPObject
*
npobj
=
(
NPObject
*
)
:
:
JS_GetPrivate
(
obj
)
;
if
(
!
npobj
)
{
return
;
}
JS
:
:
AutoSuppressGCAnalysis
nogc
;
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Search
(
npobj
)
)
;
MOZ_ASSERT
(
entry
&
&
entry
-
>
mJSObj
)
;
MOZ_ASSERT
(
entry
-
>
mJSObj
=
=
old
)
;
entry
-
>
mJSObj
=
obj
;
}
static
bool
NPObjWrapper_Call
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
&
args
.
callee
(
)
)
;
return
CallNPMethodInternal
(
cx
obj
args
.
length
(
)
args
.
array
(
)
vp
false
)
;
}
static
bool
NPObjWrapper_Construct
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
&
args
.
callee
(
)
)
;
return
CallNPMethodInternal
(
cx
obj
args
.
length
(
)
args
.
array
(
)
vp
true
)
;
}
static
bool
NPObjWrapper_toPrimitive
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
RootedValue
thisv
(
cx
args
.
thisv
(
)
)
;
if
(
thisv
.
isPrimitive
(
)
)
return
true
;
JS
:
:
RootedObject
obj
(
cx
&
thisv
.
toObject
(
)
)
;
JS
:
:
RootedValue
v
(
cx
)
;
if
(
!
JS_GetProperty
(
cx
obj
"
toString
"
&
v
)
)
return
false
;
if
(
v
.
isObject
(
)
&
&
JS
:
:
IsCallable
(
&
v
.
toObject
(
)
)
)
{
if
(
!
JS_CallFunctionValue
(
cx
obj
v
JS
:
:
HandleValueArray
:
:
empty
(
)
args
.
rval
(
)
)
)
return
false
;
if
(
args
.
rval
(
)
.
isPrimitive
(
)
)
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
js
:
:
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
JS_GetClass
(
obj
)
-
>
name
"
primitive
type
"
)
;
return
false
;
}
bool
nsNPObjWrapper
:
:
IsWrapper
(
JSObject
*
obj
)
{
return
js
:
:
GetObjectClass
(
obj
)
=
=
&
sNPObjectJSWrapperClass
;
}
void
nsNPObjWrapper
:
:
OnDestroy
(
NPObject
*
npobj
)
{
if
(
!
npobj
)
{
return
;
}
if
(
npobj
-
>
_class
=
=
&
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
)
{
return
;
}
if
(
!
sNPObjWrappers
)
{
return
;
}
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Search
(
npobj
)
)
;
if
(
entry
&
&
entry
-
>
mJSObj
)
{
:
:
JS_SetPrivate
(
entry
-
>
mJSObj
nullptr
)
;
sNPObjWrappers
-
>
RawRemove
(
entry
)
;
}
}
JSObject
*
nsNPObjWrapper
:
:
GetNewOrUsed
(
NPP
npp
JSContext
*
cx
NPObject
*
npobj
)
{
if
(
!
npobj
)
{
NS_ERROR
(
"
Null
NPObject
passed
to
nsNPObjWrapper
:
:
GetNewOrUsed
(
)
!
"
)
;
return
nullptr
;
}
if
(
npobj
-
>
_class
=
=
&
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
(
(
nsJSObjWrapper
*
)
npobj
)
-
>
mJSObj
)
;
if
(
!
JS_WrapObject
(
cx
&
obj
)
)
{
return
nullptr
;
}
return
obj
;
}
if
(
!
npp
)
{
NS_ERROR
(
"
No
npp
passed
to
nsNPObjWrapper
:
:
GetNewOrUsed
(
)
!
"
)
;
return
nullptr
;
}
if
(
!
sNPObjWrappers
)
{
if
(
!
CreateNPObjWrapperTable
(
)
)
{
return
nullptr
;
}
}
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Add
(
npobj
fallible
)
)
;
if
(
!
entry
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
if
(
entry
-
>
mJSObj
)
{
JSObject
*
obj
=
entry
-
>
mJSObj
;
if
(
js
:
:
gc
:
:
EdgeNeedsSweepUnbarriered
(
&
obj
)
)
{
entry
-
>
mJSObj
=
nullptr
;
}
else
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
entry
-
>
mJSObj
)
;
if
(
!
JS_WrapObject
(
cx
&
obj
)
)
{
return
nullptr
;
}
return
obj
;
}
}
entry
-
>
mNPObj
=
npobj
;
entry
-
>
mNpp
=
npp
;
uint32_t
generation
=
sNPObjWrappers
-
>
Generation
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
:
:
JS_NewObject
(
cx
js
:
:
Jsvalify
(
&
sNPObjectJSWrapperClass
)
)
)
;
if
(
generation
!
=
sNPObjWrappers
-
>
Generation
(
)
)
{
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Search
(
npobj
)
)
;
NS_ASSERTION
(
entry
"
Hashtable
didn
'
t
find
what
we
just
added
?
"
)
;
}
if
(
!
obj
)
{
sNPObjWrappers
-
>
RawRemove
(
entry
)
;
return
nullptr
;
}
OnWrapperCreated
(
)
;
entry
-
>
mJSObj
=
obj
;
:
:
JS_SetPrivate
(
obj
npobj
)
;
_retainobject
(
npobj
)
;
return
obj
;
}
void
nsJSNPRuntime
:
:
OnPluginDestroy
(
NPP
npp
)
{
if
(
sJSObjWrappersAccessible
)
{
sJSObjWrappersAccessible
=
false
;
for
(
JSObjWrapperTable
:
:
Enum
e
(
sJSObjWrappers
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
nsJSObjWrapper
*
npobj
=
e
.
front
(
)
.
value
(
)
;
MOZ_ASSERT
(
npobj
-
>
_class
=
=
&
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
)
;
if
(
npobj
-
>
mNpp
=
=
npp
)
{
if
(
npobj
-
>
_class
&
&
npobj
-
>
_class
-
>
invalidate
)
{
npobj
-
>
_class
-
>
invalidate
(
npobj
)
;
}
_releaseobject
(
npobj
)
;
e
.
removeFront
(
)
;
}
}
sJSObjWrappersAccessible
=
true
;
}
if
(
sNPObjWrappers
)
{
for
(
auto
i
=
sNPObjWrappers
-
>
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
i
.
Get
(
)
)
;
if
(
entry
-
>
mNpp
=
=
npp
)
{
PLDHashTable
*
tmp
=
sNPObjWrappers
;
sNPObjWrappers
=
nullptr
;
NPObject
*
npobj
=
entry
-
>
mNPObj
;
if
(
npobj
-
>
_class
&
&
npobj
-
>
_class
-
>
invalidate
)
{
npobj
-
>
_class
-
>
invalidate
(
npobj
)
;
}
#
ifdef
NS_BUILD_REFCNT_LOGGING
{
int32_t
refCnt
=
npobj
-
>
referenceCount
;
while
(
refCnt
)
{
-
-
refCnt
;
NS_LOG_RELEASE
(
npobj
refCnt
"
BrowserNPObject
"
)
;
}
}
#
endif
if
(
npobj
-
>
_class
&
&
npobj
-
>
_class
-
>
deallocate
)
{
npobj
-
>
_class
-
>
deallocate
(
npobj
)
;
}
else
{
free
(
npobj
)
;
}
:
:
JS_SetPrivate
(
entry
-
>
mJSObj
nullptr
)
;
sNPObjWrappers
=
tmp
;
if
(
sDelayedReleases
&
&
sDelayedReleases
-
>
RemoveElement
(
npobj
)
)
{
OnWrapperDestroyed
(
)
;
}
i
.
Remove
(
)
;
}
}
}
}
void
nsJSNPRuntime
:
:
OnPluginDestroyPending
(
NPP
npp
)
{
if
(
sJSObjWrappersAccessible
)
{
sJSObjWrappersAccessible
=
false
;
for
(
JSObjWrapperTable
:
:
Enum
e
(
sJSObjWrappers
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
nsJSObjWrapper
*
npobj
=
e
.
front
(
)
.
value
(
)
;
MOZ_ASSERT
(
npobj
-
>
_class
=
=
&
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
)
;
if
(
npobj
-
>
mNpp
=
=
npp
)
{
npobj
-
>
mDestroyPending
=
true
;
}
}
sJSObjWrappersAccessible
=
true
;
}
}
static
NPP
LookupNPP
(
NPObject
*
npobj
)
{
if
(
npobj
-
>
_class
=
=
&
nsJSObjWrapper
:
:
sJSObjWrapperNPClass
)
{
nsJSObjWrapper
*
o
=
static_cast
<
nsJSObjWrapper
*
>
(
npobj
)
;
return
o
-
>
mNpp
;
}
auto
entry
=
static_cast
<
NPObjWrapperHashEntry
*
>
(
sNPObjWrappers
-
>
Add
(
npobj
fallible
)
)
;
if
(
!
entry
)
{
return
nullptr
;
}
NS_ASSERTION
(
entry
-
>
mNpp
"
Live
NPObject
entry
w
/
o
an
NPP
!
"
)
;
return
entry
-
>
mNpp
;
}
static
bool
CreateNPObjectMember
(
NPP
npp
JSContext
*
cx
JSObject
*
obj
NPObject
*
npobj
JS
:
:
Handle
<
jsid
>
id
NPVariant
*
getPropertyResult
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
{
if
(
!
npobj
|
|
!
npobj
-
>
_class
|
|
!
npobj
-
>
_class
-
>
getProperty
|
|
!
npobj
-
>
_class
-
>
invoke
)
{
ThrowJSExceptionASCII
(
cx
"
Bad
NPObject
"
)
;
return
false
;
}
NPObjectMemberPrivate
*
memberPrivate
=
(
NPObjectMemberPrivate
*
)
malloc
(
sizeof
(
NPObjectMemberPrivate
)
)
;
if
(
!
memberPrivate
)
return
false
;
memset
(
memberPrivate
0
sizeof
(
NPObjectMemberPrivate
)
)
;
JSObject
*
memobj
=
:
:
JS_NewObject
(
cx
&
sNPObjectMemberClass
)
;
if
(
!
memobj
)
{
free
(
memberPrivate
)
;
return
false
;
}
vp
.
setObject
(
*
memobj
)
;
:
:
JS_SetPrivate
(
memobj
(
void
*
)
memberPrivate
)
;
NPIdentifier
identifier
=
JSIdToNPIdentifier
(
id
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
fieldValue
(
cx
)
;
NPVariant
npv
;
if
(
getPropertyResult
)
{
npv
=
*
getPropertyResult
;
}
else
{
VOID_TO_NPVARIANT
(
npv
)
;
NPBool
hasProperty
=
npobj
-
>
_class
-
>
getProperty
(
npobj
identifier
&
npv
)
;
if
(
!
ReportExceptionIfPending
(
cx
)
|
|
!
hasProperty
)
{
return
false
;
}
}
fieldValue
=
NPVariantToJSVal
(
npp
cx
&
npv
)
;
obj
=
GetNPObjectWrapper
(
cx
obj
)
;
memberPrivate
-
>
npobjWrapper
=
obj
;
memberPrivate
-
>
fieldValue
=
fieldValue
;
memberPrivate
-
>
methodName
=
id
;
memberPrivate
-
>
npp
=
npp
;
return
true
;
}
static
bool
NPObjectMember_GetProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
MutableHandleValue
vp
)
{
AUTO_PROFILER_LABEL
(
"
NPObjectMember_GetProperty
"
OTHER
)
;
if
(
JSID_IS_SYMBOL
(
id
)
)
{
JS
:
:
RootedSymbol
sym
(
cx
JSID_TO_SYMBOL
(
id
)
)
;
if
(
JS
:
:
GetSymbolCode
(
sym
)
=
=
JS
:
:
SymbolCode
:
:
toPrimitive
)
{
JS
:
:
RootedObject
obj
(
cx
JS_GetFunctionObject
(
JS_NewFunction
(
cx
NPObjectMember_toPrimitive
1
0
"
Symbol
.
toPrimitive
"
)
)
)
;
if
(
!
obj
)
return
false
;
vp
.
setObject
(
*
obj
)
;
return
true
;
}
}
return
true
;
}
static
void
NPObjectMember_Finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
NPObjectMemberPrivate
*
memberPrivate
;
memberPrivate
=
(
NPObjectMemberPrivate
*
)
:
:
JS_GetPrivate
(
obj
)
;
if
(
!
memberPrivate
)
return
;
free
(
memberPrivate
)
;
}
static
bool
NPObjectMember_Call
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
Rooted
<
JSObject
*
>
memobj
(
cx
&
args
.
callee
(
)
)
;
NS_ENSURE_TRUE
(
memobj
false
)
;
NPObjectMemberPrivate
*
memberPrivate
=
(
NPObjectMemberPrivate
*
)
:
:
JS_GetInstancePrivate
(
cx
memobj
&
sNPObjectMemberClass
&
args
)
;
if
(
!
memberPrivate
|
|
!
memberPrivate
-
>
npobjWrapper
)
return
false
;
NPObject
*
npobj
=
GetNPObject
(
cx
memberPrivate
-
>
npobjWrapper
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Call
on
invalid
member
object
"
)
;
return
false
;
}
NPVariant
npargs_buf
[
8
]
;
NPVariant
*
npargs
=
npargs_buf
;
if
(
args
.
length
(
)
>
(
sizeof
(
npargs_buf
)
/
sizeof
(
NPVariant
)
)
)
{
npargs
=
(
NPVariant
*
)
malloc
(
args
.
length
(
)
*
sizeof
(
NPVariant
)
)
;
if
(
!
npargs
)
{
ThrowJSExceptionASCII
(
cx
"
Out
of
memory
!
"
)
;
return
false
;
}
}
for
(
uint32_t
i
=
0
;
i
<
args
.
length
(
)
;
+
+
i
)
{
if
(
!
JSValToNPVariant
(
memberPrivate
-
>
npp
cx
args
[
i
]
npargs
+
i
)
)
{
ThrowJSExceptionASCII
(
cx
"
Error
converting
jsvals
to
NPVariants
!
"
)
;
if
(
npargs
!
=
npargs_buf
)
{
free
(
npargs
)
;
}
return
false
;
}
}
NPVariant
npv
;
bool
ok
=
npobj
-
>
_class
-
>
invoke
(
npobj
JSIdToNPIdentifier
(
memberPrivate
-
>
methodName
)
npargs
args
.
length
(
)
&
npv
)
;
for
(
uint32_t
i
=
0
;
i
<
args
.
length
(
)
;
+
+
i
)
{
_releasevariantvalue
(
npargs
+
i
)
;
}
if
(
npargs
!
=
npargs_buf
)
{
free
(
npargs
)
;
}
if
(
!
ok
)
{
if
(
ReportExceptionIfPending
(
cx
)
)
ThrowJSExceptionASCII
(
cx
"
Error
calling
method
on
NPObject
!
"
)
;
return
false
;
}
args
.
rval
(
)
.
set
(
NPVariantToJSVal
(
memberPrivate
-
>
npp
cx
&
npv
)
)
;
_releasevariantvalue
(
&
npv
)
;
return
ReportExceptionIfPending
(
cx
)
;
}
static
void
NPObjectMember_Trace
(
JSTracer
*
trc
JSObject
*
obj
)
{
NPObjectMemberPrivate
*
memberPrivate
=
(
NPObjectMemberPrivate
*
)
:
:
JS_GetPrivate
(
obj
)
;
if
(
!
memberPrivate
)
return
;
JS
:
:
TraceEdge
(
trc
&
memberPrivate
-
>
methodName
"
NPObjectMemberPrivate
.
methodName
"
)
;
JS
:
:
TraceEdge
(
trc
&
memberPrivate
-
>
fieldValue
"
NPObject
Member
=
>
fieldValue
"
)
;
JS
:
:
TraceEdge
(
trc
&
memberPrivate
-
>
npobjWrapper
"
NPObject
Member
=
>
npobjWrapper
"
)
;
}
static
bool
NPObjectMember_toPrimitive
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
JS
:
:
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
RootedValue
thisv
(
cx
args
.
thisv
(
)
)
;
if
(
thisv
.
isPrimitive
(
)
)
{
args
.
rval
(
)
.
set
(
thisv
)
;
return
true
;
}
JS
:
:
RootedObject
obj
(
cx
&
thisv
.
toObject
(
)
)
;
NPObjectMemberPrivate
*
memberPrivate
=
(
NPObjectMemberPrivate
*
)
:
:
JS_GetInstancePrivate
(
cx
obj
&
sNPObjectMemberClass
&
args
)
;
if
(
!
memberPrivate
)
return
false
;
JSType
hint
;
if
(
!
JS
:
:
GetFirstArgumentAsTypeHint
(
cx
args
&
hint
)
)
return
false
;
args
.
rval
(
)
.
set
(
memberPrivate
-
>
fieldValue
)
;
if
(
args
.
rval
(
)
.
isObject
(
)
)
{
JS
:
:
Rooted
<
JSObject
*
>
objVal
(
cx
&
args
.
rval
(
)
.
toObject
(
)
)
;
return
JS
:
:
ToPrimitive
(
cx
objVal
hint
args
.
rval
(
)
)
;
}
return
true
;
}
bool
nsJSObjWrapper
:
:
HasOwnProperty
(
NPObject
*
npobj
NPIdentifier
npid
)
{
NPP
npp
=
NPPStack
:
:
Peek
(
)
;
nsIGlobalObject
*
globalObject
=
GetGlobalObject
(
npp
)
;
if
(
NS_WARN_IF
(
!
globalObject
)
)
{
return
false
;
}
dom
:
:
AutoEntryScript
aes
(
globalObject
"
NPAPI
HasOwnProperty
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
if
(
!
npobj
)
{
ThrowJSExceptionASCII
(
cx
"
Null
npobj
in
nsJSObjWrapper
:
:
NP_HasOwnProperty
!
"
)
;
return
false
;
}
nsJSObjWrapper
*
npjsobj
=
(
nsJSObjWrapper
*
)
npobj
;
bool
found
ok
=
false
;
AutoJSExceptionSuppressor
suppressor
(
aes
npjsobj
)
;
JS
:
:
Rooted
<
JSObject
*
>
jsobj
(
cx
npjsobj
-
>
mJSObj
)
;
JSAutoCompartment
ac
(
cx
jsobj
)
;
MarkCrossZoneNPIdentifier
(
cx
npid
)
;
NS_ASSERTION
(
NPIdentifierIsInt
(
npid
)
|
|
NPIdentifierIsString
(
npid
)
"
id
must
be
either
string
or
int
!
\
n
"
)
;
JS
:
:
Rooted
<
jsid
>
id
(
cx
NPIdentifierToJSId
(
npid
)
)
;
ok
=
:
:
JS_AlreadyHasOwnPropertyById
(
cx
jsobj
id
&
found
)
;
return
ok
&
&
found
;
}
