#
include
"
PluginWidgetParent
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
nsDebug
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
#
define
PWLOG
(
.
.
.
)
namespace
mozilla
{
namespace
dom
{
const
wchar_t
*
kPluginWidgetContentParentProperty
=
L
"
kPluginWidgetParentProperty
"
;
}
}
namespace
mozilla
{
namespace
plugins
{
#
define
ENSURE_CHANNEL
{
\
if
(
!
mWidget
)
{
\
NS_WARNING
(
"
called
on
an
invalid
remote
widget
.
"
)
;
\
return
IPC_OK
(
)
;
\
}
\
}
PluginWidgetParent
:
:
PluginWidgetParent
(
)
{
PWLOG
(
"
PluginWidgetParent
:
:
PluginWidgetParent
(
)
\
n
"
)
;
MOZ_COUNT_CTOR
(
PluginWidgetParent
)
;
}
PluginWidgetParent
:
:
~
PluginWidgetParent
(
)
{
PWLOG
(
"
PluginWidgetParent
:
:
~
PluginWidgetParent
(
)
\
n
"
)
;
MOZ_COUNT_DTOR
(
PluginWidgetParent
)
;
KillWidget
(
)
;
}
mozilla
:
:
dom
:
:
TabParent
*
PluginWidgetParent
:
:
GetTabParent
(
)
{
return
static_cast
<
mozilla
:
:
dom
:
:
TabParent
*
>
(
Manager
(
)
)
;
}
void
PluginWidgetParent
:
:
SetParent
(
nsIWidget
*
aParent
)
{
if
(
mWidget
&
&
aParent
)
{
mWidget
-
>
SetParent
(
aParent
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
PluginWidgetParent
:
:
RecvCreate
(
nsresult
*
aResult
uint64_t
*
aScrollCaptureId
uintptr_t
*
aPluginInstanceId
)
{
PWLOG
(
"
PluginWidgetParent
:
:
RecvCreate
(
)
\
n
"
)
;
*
aScrollCaptureId
=
0
;
*
aPluginInstanceId
=
0
;
mWidget
=
nsIWidget
:
:
CreateChildWindow
(
)
;
*
aResult
=
mWidget
?
NS_OK
:
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIWidget
>
parentWidget
=
GetTabParent
(
)
-
>
GetWidget
(
)
;
if
(
!
parentWidget
)
{
*
aResult
=
NS_ERROR_NOT_AVAILABLE
;
KillWidget
(
)
;
return
IPC_OK
(
)
;
}
nsWidgetInitData
initData
;
initData
.
mWindowType
=
eWindowType_plugin_ipc_chrome
;
initData
.
mUnicode
=
false
;
initData
.
clipChildren
=
true
;
initData
.
clipSiblings
=
true
;
*
aResult
=
mWidget
-
>
Create
(
parentWidget
.
get
(
)
nullptr
LayoutDeviceIntRect
(
0
0
0
0
)
&
initData
)
;
if
(
NS_FAILED
(
*
aResult
)
)
{
KillWidget
(
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mWidget
-
>
EnableDragDrop
(
true
)
;
mWidget
-
>
RegisterPluginWindowForRemoteUpdates
(
)
;
return
IPC_OK
(
)
;
}
void
PluginWidgetParent
:
:
KillWidget
(
)
{
PWLOG
(
"
PluginWidgetParent
:
:
KillWidget
(
)
widget
=
%
p
\
n
"
(
void
*
)
mWidget
.
get
(
)
)
;
if
(
mWidget
)
{
mWidget
-
>
UnregisterPluginWindowForRemoteUpdates
(
)
;
mWidget
-
>
Destroy
(
)
;
:
:
RemovePropW
(
(
HWND
)
mWidget
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
mozilla
:
:
dom
:
:
kPluginWidgetContentParentProperty
)
;
mWidget
=
nullptr
;
}
}
void
PluginWidgetParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
PWLOG
(
"
PluginWidgetParent
:
:
ActorDestroy
(
%
d
)
\
n
"
aWhy
)
;
KillWidget
(
)
;
}
void
PluginWidgetParent
:
:
ParentDestroy
(
)
{
PWLOG
(
"
PluginWidgetParent
:
:
ParentDestroy
(
)
\
n
"
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PluginWidgetParent
:
:
RecvSetFocus
(
const
bool
&
aRaise
)
{
ENSURE_CHANNEL
;
PWLOG
(
"
PluginWidgetParent
:
:
RecvSetFocus
(
%
d
)
\
n
"
aRaise
)
;
mWidget
-
>
SetFocus
(
aRaise
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PluginWidgetParent
:
:
RecvGetNativePluginPort
(
uintptr_t
*
value
)
{
ENSURE_CHANNEL
;
*
value
=
(
uintptr_t
)
mWidget
-
>
GetNativeData
(
NS_NATIVE_PLUGIN_PORT
)
;
NS_ASSERTION
(
*
value
"
no
native
port
?
?
"
)
;
PWLOG
(
"
PluginWidgetParent
:
:
RecvGetNativeData
(
)
%
p
\
n
"
(
void
*
)
*
value
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
PluginWidgetParent
:
:
RecvSetNativeChildWindow
(
const
uintptr_t
&
aChildWindow
)
{
ENSURE_CHANNEL
;
PWLOG
(
"
PluginWidgetParent
:
:
RecvSetNativeChildWindow
(
%
p
)
\
n
"
(
void
*
)
aChildWindow
)
;
mWidget
-
>
SetNativeData
(
NS_NATIVE_CHILD_WINDOW
aChildWindow
)
;
return
IPC_OK
(
)
;
}
}
}
