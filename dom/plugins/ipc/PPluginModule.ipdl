include
protocol
PPluginInstance
;
include
protocol
PPluginScriptableObject
;
include
protocol
PContent
;
include
protocol
PProfiler
;
include
protocol
PFunctionBroker
;
using
NPError
from
"
npapi
.
h
"
;
using
NPNVariable
from
"
npapi
.
h
"
;
using
mozilla
:
:
dom
:
:
NativeThreadId
from
"
mozilla
/
dom
/
NativeThreadId
.
h
"
;
using
class
mac_plugin_interposing
:
:
NSCursorInfo
from
"
mozilla
/
plugins
/
PluginMessageUtils
.
h
"
;
using
struct
nsID
from
"
nsID
.
h
"
;
using
struct
mozilla
:
:
plugins
:
:
NPAudioDeviceChangeDetailsIPC
from
"
mozilla
/
plugins
/
PluginMessageUtils
.
h
"
;
using
struct
mozilla
:
:
plugins
:
:
NPAudioDeviceStateChangedIPC
from
"
mozilla
/
plugins
/
PluginMessageUtils
.
h
"
;
namespace
mozilla
{
namespace
plugins
{
struct
PluginSettings
{
bool
javascriptEnabled
;
bool
asdEnabled
;
bool
isOffline
;
bool
supportsXembed
;
bool
supportsWindowless
;
nsCString
userAgent
;
bool
nativeCursorsSupported
;
}
;
intr
protocol
PPluginModule
{
manages
PPluginInstance
;
both
:
async
ProcessNativeEventsInInterruptCall
(
)
;
child
:
async
InitProfiler
(
Endpoint
<
PProfilerChild
>
aEndPoint
)
;
async
DisableFlashProtectedMode
(
)
;
intr
ModuleSupportsAsyncRender
(
)
returns
(
bool
result
)
;
intr
NP_GetEntryPoints
(
)
returns
(
NPError
rv
)
;
intr
NP_Initialize
(
PluginSettings
settings
)
returns
(
NPError
rv
)
;
async
PPluginInstance
(
nsCString
aMimeType
nsCString
[
]
aNames
nsCString
[
]
aValues
)
;
intr
SyncNPP_New
(
PPluginInstance
aActor
)
returns
(
NPError
rv
)
;
intr
NP_Shutdown
(
)
returns
(
NPError
rv
)
;
intr
OptionalFunctionsSupported
(
)
returns
(
bool
aURLRedirectNotify
bool
aClearSiteData
bool
aGetSitesWithData
)
;
async
NPP_ClearSiteData
(
nsCString
site
uint64_t
flags
uint64_t
maxAge
uint64_t
aCallbackId
)
;
async
NPP_GetSitesWithData
(
uint64_t
aCallbackId
)
;
async
SetAudioSessionData
(
nsID
aID
nsString
aDisplayName
nsString
aIconPath
)
;
async
SetParentHangTimeout
(
uint32_t
seconds
)
;
intr
InitCrashReporter
(
)
returns
(
NativeThreadId
tid
)
;
async
SettingChanged
(
PluginSettings
settings
)
;
async
NPP_SetValue_NPNVaudioDeviceChangeDetails
(
NPAudioDeviceChangeDetailsIPC
changeDetails
)
;
async
NPP_SetValue_NPNVaudioDeviceStateChanged
(
NPAudioDeviceStateChangedIPC
deviceState
)
;
async
InitPluginModuleChild
(
Endpoint
<
PPluginModuleChild
>
endpoint
)
;
async
InitPluginFunctionBroker
(
Endpoint
<
PFunctionBrokerChild
>
endpoint
)
;
parent
:
async
BackUpXResources
(
FileDescriptor
aXSocketFd
)
;
intr
ProcessSomeEvents
(
)
;
async
PluginShowWindow
(
uint32_t
aWindowId
bool
aModal
int32_t
aX
int32_t
aY
double
aWidth
double
aHeight
)
;
async
PluginHideWindow
(
uint32_t
aWindowId
)
;
async
SetCursor
(
NSCursorInfo
cursorInfo
)
;
async
ShowCursor
(
bool
show
)
;
async
PushCursor
(
NSCursorInfo
cursorInfo
)
;
async
PopCursor
(
)
;
sync
NPN_SetException
(
nsCString
message
)
;
async
NPN_ReloadPlugins
(
bool
aReloadPages
)
;
async
NotifyContentModuleDestroyed
(
)
;
async
ReturnClearSiteData
(
NPError
aRv
uint64_t
aCallbackId
)
;
async
ReturnSitesWithData
(
nsCString
[
]
aSites
uint64_t
aCallbackId
)
;
intr
NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges
(
bool
shouldRegister
)
returns
(
NPError
result
)
;
}
;
}
}
