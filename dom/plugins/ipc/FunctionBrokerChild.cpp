#
include
"
FunctionBrokerChild
.
h
"
#
include
"
FunctionBrokerThread
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
namespace
mozilla
:
:
plugins
{
FunctionBrokerChild
*
FunctionBrokerChild
:
:
sInstance
=
nullptr
;
bool
FunctionBrokerChild
:
:
IsDispatchThread
(
)
{
return
mThread
-
>
IsOnThread
(
)
;
}
void
FunctionBrokerChild
:
:
PostToDispatchThread
(
already_AddRefed
<
nsIRunnable
>
&
&
runnable
)
{
mThread
-
>
Dispatch
(
std
:
:
move
(
runnable
)
)
;
}
bool
FunctionBrokerChild
:
:
Initialize
(
Endpoint
<
PFunctionBrokerChild
>
&
&
aBrokerEndpoint
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsPluginProcess
(
)
"
FunctionBrokerChild
can
only
be
used
in
plugin
processes
"
)
;
MOZ_ASSERT
(
!
sInstance
)
;
FunctionBrokerThread
*
thread
=
FunctionBrokerThread
:
:
Create
(
)
;
if
(
!
thread
)
{
return
false
;
}
sInstance
=
new
FunctionBrokerChild
(
thread
std
:
:
move
(
aBrokerEndpoint
)
)
;
return
true
;
}
FunctionBrokerChild
*
FunctionBrokerChild
:
:
GetInstance
(
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsPluginProcess
(
)
"
FunctionBrokerChild
can
only
be
used
in
plugin
processes
"
)
;
MOZ_ASSERT
(
sInstance
"
Must
initialize
FunctionBrokerChild
before
using
it
"
)
;
return
sInstance
;
}
FunctionBrokerChild
:
:
FunctionBrokerChild
(
FunctionBrokerThread
*
aThread
Endpoint
<
PFunctionBrokerChild
>
&
&
aEndpoint
)
:
mThread
(
aThread
)
mShutdownDone
(
false
)
mMonitor
(
"
FunctionBrokerChild
Lock
"
)
{
MOZ_ASSERT
(
aThread
)
;
PostToDispatchThread
(
NewNonOwningRunnableMethod
<
Endpoint
<
PFunctionBrokerChild
>
&
&
>
(
"
FunctionBrokerChild
:
:
Bind
"
this
&
FunctionBrokerChild
:
:
Bind
std
:
:
move
(
aEndpoint
)
)
)
;
}
void
FunctionBrokerChild
:
:
Bind
(
Endpoint
<
PFunctionBrokerChild
>
&
&
aEndpoint
)
{
MOZ_RELEASE_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
DebugOnly
<
bool
>
ok
=
aEndpoint
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
}
void
FunctionBrokerChild
:
:
ShutdownOnDispatchThread
(
)
{
MOZ_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
MonitorAutoLock
lock
(
mMonitor
)
;
mShutdownDone
=
true
;
mMonitor
.
Notify
(
)
;
}
void
FunctionBrokerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_ASSERT
(
mThread
-
>
IsOnThread
(
)
)
;
sInstance
-
>
PostToDispatchThread
(
NewNonOwningRunnableMethod
(
"
FunctionBrokerChild
:
:
ShutdownOnDispatchThread
"
sInstance
&
FunctionBrokerChild
:
:
ShutdownOnDispatchThread
)
)
;
}
void
FunctionBrokerChild
:
:
Destroy
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sInstance
)
{
return
;
}
{
MonitorAutoLock
lock
(
sInstance
-
>
mMonitor
)
;
while
(
!
sInstance
-
>
mShutdownDone
)
{
sInstance
-
>
mMonitor
.
Wait
(
)
;
}
}
delete
sInstance
;
sInstance
=
nullptr
;
}
}
