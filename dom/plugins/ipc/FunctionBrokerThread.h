#
ifndef
mozilla_plugins_functionbrokerthread_h
#
define
mozilla_plugins_functionbrokerthread_h
#
include
"
nsThreadManager
.
h
"
namespace
mozilla
{
namespace
plugins
{
class
FunctionBrokerThread
{
public
:
void
Dispatch
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
mThread
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
nsIEventTarget
:
:
NS_DISPATCH_NORMAL
)
;
}
bool
IsOnThread
(
)
{
bool
on
;
return
NS_SUCCEEDED
(
mThread
-
>
IsOnCurrentThread
(
&
on
)
)
&
&
on
;
}
static
FunctionBrokerThread
*
Create
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIThread
>
thread
;
if
(
NS_FAILED
(
NS_NewNamedThread
(
"
Function
Broker
"
getter_AddRefs
(
thread
)
)
)
)
{
return
nullptr
;
}
return
new
FunctionBrokerThread
(
thread
)
;
}
~
FunctionBrokerThread
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
mThread
-
>
Shutdown
(
)
;
}
private
:
explicit
FunctionBrokerThread
(
nsIThread
*
aThread
)
:
mThread
(
aThread
)
{
MOZ_ASSERT
(
mThread
)
;
}
nsCOMPtr
<
nsIThread
>
mThread
;
}
;
}
}
#
endif
