#
ifndef
mozilla_plugins_functionbrokerparent_h
#
define
mozilla_plugins_functionbrokerparent_h
#
include
"
mozilla
/
plugins
/
PFunctionBrokerParent
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
sandboxPermissions
.
h
"
#
endif
namespace
mozilla
{
namespace
plugins
{
class
FunctionBrokerThread
;
class
FunctionBrokerParent
:
public
PFunctionBrokerParent
{
public
:
static
FunctionBrokerParent
*
Create
(
Endpoint
<
PFunctionBrokerParent
>
&
&
aParentEnd
)
;
static
void
Destroy
(
FunctionBrokerParent
*
aInst
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBrokerFunction
(
const
FunctionHookId
&
aFunctionId
const
IpdlTuple
&
aInTuple
IpdlTuple
*
aOutTuple
)
override
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
static
mozilla
:
:
SandboxPermissions
*
GetSandboxPermissions
(
)
{
return
&
sSandboxPermissions
;
}
#
endif
private
:
explicit
FunctionBrokerParent
(
FunctionBrokerThread
*
aThread
Endpoint
<
PFunctionBrokerParent
>
&
&
aParentEnd
)
;
~
FunctionBrokerParent
(
)
;
void
ShutdownOnBrokerThread
(
)
;
void
Bind
(
Endpoint
<
PFunctionBrokerParent
>
&
&
aEnd
)
;
static
bool
RunBrokeredFunction
(
base
:
:
ProcessId
aClientId
const
FunctionHookId
&
aFunctionId
const
IPC
:
:
IpdlTuple
&
aInTuple
IPC
:
:
IpdlTuple
*
aOutTuple
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
static
void
RemovePermissionsForProcess
(
base
:
:
ProcessId
aClientId
)
;
static
mozilla
:
:
SandboxPermissions
sSandboxPermissions
;
#
endif
UniquePtr
<
FunctionBrokerThread
>
mThread
;
Monitor
mMonitor
;
bool
mShutdownDone
;
}
;
}
}
#
endif
