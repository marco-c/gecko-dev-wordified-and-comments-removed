#
ifndef
mozilla_plugins_PluginBridge_h
#
define
mozilla_plugins_PluginBridge_h
#
include
<
functional
>
#
include
"
base
/
process
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
}
namespace
ipc
{
template
<
class
PFooSide
>
class
Endpoint
;
}
namespace
plugins
{
class
PPluginModuleParent
;
bool
SetupBridge
(
uint32_t
aPluginId
dom
:
:
ContentParent
*
aContentParent
nsresult
*
aResult
uint32_t
*
aRunID
ipc
:
:
Endpoint
<
PPluginModuleParent
>
*
aEndpoint
)
;
nsresult
FindPluginsForContent
(
uint32_t
aPluginEpoch
nsTArray
<
PluginTag
>
*
aPlugins
nsTArray
<
FakePluginTag
>
*
aFakePlugins
uint32_t
*
aNewPluginEpoch
)
;
void
TakeFullMinidump
(
uint32_t
aPluginId
base
:
:
ProcessId
aContentProcessId
const
nsAString
&
aBrowserDumpId
std
:
:
function
<
void
(
nsString
)
>
&
&
aCallback
bool
aAsync
)
;
void
TerminatePlugin
(
uint32_t
aPluginId
base
:
:
ProcessId
aContentProcessId
const
nsCString
&
aMonitorDescription
const
nsAString
&
aDumpId
std
:
:
function
<
void
(
bool
)
>
&
&
aCallback
)
;
}
}
#
endif
