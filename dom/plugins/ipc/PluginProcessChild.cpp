#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
plugins
/
PluginProcessChild
.
h
"
#
include
"
prlink
.
h
"
#
include
"
base
/
command_line
.
h
"
#
include
"
base
/
string_util
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
ClearOnShutdown
.
h
"
#
if
defined
(
XP_MACOSX
)
#
include
"
nsCocoaFeatures
.
h
"
extern
"
C
"
CGError
CGSSetDebugOptions
(
int
options
)
;
#
endif
#
ifdef
XP_WIN
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
endif
#
endif
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
#
ifdef
OS_WIN
#
include
"
nsSetDllDirectory
.
h
"
#
include
<
algorithm
>
#
endif
namespace
mozilla
{
namespace
plugins
{
bool
PluginProcessChild
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
nsDebugImpl
:
:
SetMultiprocessMode
(
"
NPAPI
"
)
;
#
if
defined
(
XP_MACOSX
)
nsCString
interpose
(
PR_GetEnv
(
"
DYLD_INSERT_LIBRARIES
"
)
)
;
if
(
!
interpose
.
IsEmpty
(
)
)
{
int32_t
lastSeparatorPos
=
interpose
.
RFind
(
"
:
"
)
;
int32_t
lastTriggerPos
=
interpose
.
RFind
(
"
libplugin_child_interpose
.
dylib
"
)
;
bool
needsReset
=
false
;
if
(
lastTriggerPos
!
=
-
1
)
{
if
(
lastSeparatorPos
=
=
-
1
)
{
interpose
.
Truncate
(
)
;
needsReset
=
true
;
}
else
if
(
lastTriggerPos
>
lastSeparatorPos
)
{
interpose
.
SetLength
(
lastSeparatorPos
)
;
needsReset
=
true
;
}
}
if
(
needsReset
)
{
nsCString
setInterpose
(
"
DYLD_INSERT_LIBRARIES
=
"
)
;
if
(
!
interpose
.
IsEmpty
(
)
)
{
setInterpose
.
Append
(
interpose
)
;
}
char
*
setInterposePtr
=
strdup
(
setInterpose
.
get
(
)
)
;
PR_SetEnv
(
setInterposePtr
)
;
}
}
#
endif
message_loop
(
)
-
>
set_exception_restoration
(
true
)
;
std
:
:
string
pluginFilename
;
#
if
defined
(
OS_POSIX
)
std
:
:
vector
<
std
:
:
string
>
values
=
CommandLine
:
:
ForCurrentProcess
(
)
-
>
argv
(
)
;
MOZ_ASSERT
(
values
.
size
(
)
>
=
2
"
not
enough
args
"
)
;
pluginFilename
=
UnmungePluginDsoPath
(
values
[
1
]
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
values
.
size
(
)
>
=
3
&
&
values
[
2
]
=
=
"
-
flashSandbox
"
)
{
bool
enableLogging
=
false
;
if
(
values
.
size
(
)
>
=
4
&
&
values
[
3
]
=
=
"
-
flashSandboxLogging
"
)
{
enableLogging
=
true
;
}
mPlugin
.
EnableFlashSandbox
(
enableLogging
)
;
}
#
endif
#
elif
defined
(
OS_WIN
)
std
:
:
vector
<
std
:
:
wstring
>
values
=
CommandLine
:
:
ForCurrentProcess
(
)
-
>
GetLooseValues
(
)
;
MOZ_ASSERT
(
values
.
size
(
)
>
=
1
"
not
enough
loose
args
"
)
;
SanitizeEnvironmentVariables
(
)
;
SetDllDirectory
(
L
"
"
)
;
pluginFilename
=
WideToUTF8
(
values
[
0
]
)
;
NS_SetMainThread
(
)
;
mozilla
:
:
TimeStamp
:
:
Startup
(
)
;
NS_LogInit
(
)
;
mozilla
:
:
LogModule
:
:
Init
(
)
;
nsThreadManager
:
:
get
(
)
.
Init
(
)
;
#
if
defined
(
MOZ_SANDBOX
)
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
endif
#
else
#
error
Sorry
#
endif
if
(
NS_FAILED
(
nsRegion
:
:
InitStatic
(
)
)
)
{
NS_ERROR
(
"
Could
not
initialize
nsRegion
"
)
;
return
false
;
}
bool
retval
=
mPlugin
.
InitForChrome
(
pluginFilename
ParentPid
(
)
IOThreadChild
:
:
message_loop
(
)
IOThreadChild
:
:
channel
(
)
)
;
#
if
defined
(
XP_MACOSX
)
if
(
nsCocoaFeatures
:
:
OnYosemiteOrLater
(
)
)
{
CGSSetDebugOptions
(
0x80000007
)
;
}
#
endif
return
retval
;
}
void
PluginProcessChild
:
:
CleanUp
(
)
{
#
if
defined
(
OS_WIN
)
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsThreadManager
:
:
get
(
)
.
Shutdown
(
)
;
mozilla
:
:
KillClearOnShutdown
(
ShutdownPhase
:
:
ShutdownFinal
)
;
NS_LogTerm
(
)
;
#
endif
nsRegion
:
:
ShutdownStatic
(
)
;
}
}
}
