#
ifndef
dom_plugins_PluginInstanceChild_h
#
define
dom_plugins_PluginInstanceChild_h
1
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
plugins
/
PPluginInstanceChild
.
h
"
#
include
"
mozilla
/
plugins
/
PluginScriptableObjectChild
.
h
"
#
include
"
mozilla
/
plugins
/
StreamNotifyChild
.
h
"
#
include
"
mozilla
/
plugins
/
PPluginSurfaceChild
.
h
"
#
include
"
mozilla
/
ipc
/
CrossProcessMutex
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
if
defined
(
OS_WIN
)
#
include
"
mozilla
/
gfx
/
SharedDIBWin
.
h
"
#
elif
defined
(
MOZ_WIDGET_COCOA
)
#
include
"
PluginUtilsOSX
.
h
"
#
include
"
mozilla
/
gfx
/
QuartzSupport
.
h
"
#
include
"
base
/
timer
.
h
"
#
endif
#
include
"
npfunctions
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
ChildAsyncCall
.
h
"
#
include
"
ChildTimer
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
mozilla
/
PaintTracker
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
<
map
>
#
ifdef
MOZ_WIDGET_GTK
#
include
"
gtk2xtbin
.
h
"
#
endif
class
gfxASurface
;
namespace
mozilla
{
namespace
plugins
{
class
PBrowserStreamChild
;
class
BrowserStreamChild
;
class
StreamNotifyChild
;
class
PluginInstanceChild
:
public
PPluginInstanceChild
{
friend
class
BrowserStreamChild
;
friend
class
PluginStreamChild
;
friend
class
StreamNotifyChild
;
friend
class
PluginScriptableObjectChild
;
#
ifdef
OS_WIN
friend
LRESULT
CALLBACK
PluginWindowProc
(
HWND
hWnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
static
LRESULT
CALLBACK
PluginWindowProcInternal
(
HWND
hWnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
#
endif
protected
:
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerCreateChildPluginWindow
(
NativeWindowHandle
*
aChildPluginWindow
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCreateChildPopupSurrogate
(
const
NativeWindowHandle
&
aNetscapeWindow
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_SetWindow
(
const
NPRemoteWindow
&
window
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_GetValue_NPPVpluginWantsAllNetworkStreams
(
bool
*
wantsAllStreams
NPError
*
rv
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_GetValue_NPPVpluginScriptableNPObject
(
PPluginScriptableObjectChild
*
*
value
NPError
*
result
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId
(
nsCString
*
aPlugId
NPError
*
aResult
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_SetValue_NPNVprivateModeBool
(
const
bool
&
value
NPError
*
result
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_SetValue_NPNVmuteAudioBool
(
const
bool
&
value
NPError
*
result
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_SetValue_NPNVCSSZoomFactor
(
const
double
&
value
NPError
*
result
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_HandleEvent
(
const
NPRemoteEvent
&
event
int16_t
*
handled
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_HandleEvent_Shmem
(
const
NPRemoteEvent
&
event
Shmem
&
&
mem
int16_t
*
handled
Shmem
*
rtnmem
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_HandleEvent_IOSurface
(
const
NPRemoteEvent
&
event
const
uint32_t
&
surface
int16_t
*
handled
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncSetWindow
(
const
gfxSurfaceType
&
aSurfaceType
const
NPRemoteWindow
&
aWindow
)
override
;
virtual
void
DoAsyncSetWindow
(
const
gfxSurfaceType
&
aSurfaceType
const
NPRemoteWindow
&
aWindow
bool
aIsAsync
)
;
virtual
PPluginSurfaceChild
*
AllocPPluginSurfaceChild
(
const
WindowsSharedMemoryHandle
&
const
gfx
:
:
IntSize
&
const
bool
&
)
override
{
return
new
PPluginSurfaceChild
(
)
;
}
virtual
bool
DeallocPPluginSurfaceChild
(
PPluginSurfaceChild
*
s
)
override
{
delete
s
;
return
true
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerPaint
(
const
NPRemoteEvent
&
event
int16_t
*
handled
)
override
{
PaintTracker
pt
;
if
(
!
AnswerNPP_HandleEvent
(
event
handled
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvWindowPosChanged
(
const
NPRemoteEvent
&
event
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvContentsScaleFactorChanged
(
const
double
&
aContentsScaleFactor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_Destroy
(
NPError
*
result
)
override
;
virtual
PPluginScriptableObjectChild
*
AllocPPluginScriptableObjectChild
(
)
override
;
virtual
bool
DeallocPPluginScriptableObjectChild
(
PPluginScriptableObjectChild
*
aObject
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPPluginScriptableObjectConstructor
(
PPluginScriptableObjectChild
*
aActor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPBrowserStreamConstructor
(
PBrowserStreamChild
*
aActor
const
nsCString
&
aURL
const
uint32_t
&
aLength
const
uint32_t
&
aLastmodified
PStreamNotifyChild
*
aNotifyData
const
nsCString
&
aHeaders
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerNPP_NewStream
(
PBrowserStreamChild
*
actor
const
nsCString
&
mimeType
const
bool
&
seekable
NPError
*
rv
uint16_t
*
stype
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncNPP_NewStream
(
PBrowserStreamChild
*
actor
const
nsCString
&
mimeType
const
bool
&
seekable
)
override
;
virtual
PBrowserStreamChild
*
AllocPBrowserStreamChild
(
const
nsCString
&
url
const
uint32_t
&
length
const
uint32_t
&
lastmodified
PStreamNotifyChild
*
notifyData
const
nsCString
&
headers
)
override
;
virtual
bool
DeallocPBrowserStreamChild
(
PBrowserStreamChild
*
stream
)
override
;
virtual
PPluginStreamChild
*
AllocPPluginStreamChild
(
const
nsCString
&
mimeType
const
nsCString
&
target
NPError
*
result
)
override
;
virtual
bool
DeallocPPluginStreamChild
(
PPluginStreamChild
*
stream
)
override
;
virtual
PStreamNotifyChild
*
AllocPStreamNotifyChild
(
const
nsCString
&
url
const
nsCString
&
target
const
bool
&
post
const
nsCString
&
buffer
const
bool
&
file
NPError
*
result
)
override
;
virtual
bool
DeallocPStreamNotifyChild
(
PStreamNotifyChild
*
notifyData
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerSetPluginFocus
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
AnswerUpdateWindow
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNPP_DidComposite
(
)
override
;
public
:
PluginInstanceChild
(
const
NPPluginFuncs
*
aPluginIface
const
nsCString
&
aMimeType
const
InfallibleTArray
<
nsCString
>
&
aNames
const
InfallibleTArray
<
nsCString
>
&
aValues
)
;
virtual
~
PluginInstanceChild
(
)
;
NPError
DoNPP_New
(
)
;
NPError
DoNPP_NewStream
(
BrowserStreamChild
*
actor
const
nsCString
&
mimeType
const
bool
&
seekable
uint16_t
*
stype
)
;
bool
Initialize
(
)
;
NPP
GetNPP
(
)
{
return
&
mData
;
}
NPError
NPN_GetValue
(
NPNVariable
aVariable
void
*
aValue
)
;
NPError
NPN_SetValue
(
NPPVariable
aVariable
void
*
aValue
)
;
PluginScriptableObjectChild
*
GetActorForNPObject
(
NPObject
*
aObject
)
;
NPError
NPN_NewStream
(
NPMIMEType
aMIMEType
const
char
*
aWindow
NPStream
*
*
aStream
)
;
void
InvalidateRect
(
NPRect
*
aInvalidRect
)
;
#
ifdef
MOZ_WIDGET_COCOA
void
Invalidate
(
)
;
#
endif
uint32_t
ScheduleTimer
(
uint32_t
interval
bool
repeat
TimerFunc
func
)
;
void
UnscheduleTimer
(
uint32_t
id
)
;
void
AsyncCall
(
PluginThreadCallback
aFunc
void
*
aUserData
)
;
void
PostChildAsyncCall
(
already_AddRefed
<
ChildAsyncCall
>
aTask
)
;
int
GetQuirks
(
)
;
void
NPN_URLRedirectResponse
(
void
*
notifyData
NPBool
allow
)
;
NPError
NPN_InitAsyncSurface
(
NPSize
*
size
NPImageFormat
format
void
*
initData
NPAsyncSurface
*
surface
)
;
NPError
NPN_FinalizeAsyncSurface
(
NPAsyncSurface
*
surface
)
;
void
NPN_SetCurrentAsyncSurface
(
NPAsyncSurface
*
surface
NPRect
*
changed
)
;
void
DoAsyncRedraw
(
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvHandledWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
const
bool
&
aIsConsumed
)
override
;
#
if
defined
(
XP_WIN
)
NPError
DefaultAudioDeviceChanged
(
NPAudioDeviceChangeDetails
&
details
)
;
#
endif
private
:
friend
class
PluginModuleChild
;
NPError
InternalGetNPObjectForValue
(
NPNVariable
aValue
NPObject
*
*
aObject
)
;
bool
IsUsingDirectDrawing
(
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateBackground
(
const
SurfaceDescriptor
&
aBackground
const
nsIntRect
&
aRect
)
override
;
virtual
PPluginBackgroundDestroyerChild
*
AllocPPluginBackgroundDestroyerChild
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPPluginBackgroundDestroyerConstructor
(
PPluginBackgroundDestroyerChild
*
aActor
)
override
;
virtual
bool
DeallocPPluginBackgroundDestroyerChild
(
PPluginBackgroundDestroyerChild
*
aActor
)
override
;
#
if
defined
(
OS_WIN
)
static
bool
RegisterWindowClass
(
)
;
bool
CreatePluginWindow
(
)
;
void
DestroyPluginWindow
(
)
;
void
SizePluginWindow
(
int
width
int
height
)
;
int16_t
WinlessHandleEvent
(
NPEvent
&
event
)
;
void
CreateWinlessPopupSurrogate
(
)
;
void
DestroyWinlessPopupSurrogate
(
)
;
void
InitPopupMenuHook
(
)
;
void
SetupFlashMsgThrottle
(
)
;
void
UnhookWinlessFlashThrottle
(
)
;
void
HookSetWindowLongPtr
(
)
;
void
InitImm32Hook
(
)
;
static
inline
bool
SetWindowLongHookCheck
(
HWND
hWnd
int
nIndex
LONG_PTR
newLong
)
;
void
FlashThrottleMessage
(
HWND
UINT
WPARAM
LPARAM
bool
)
;
static
LRESULT
CALLBACK
DummyWindowProc
(
HWND
hWnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
static
LRESULT
CALLBACK
PluginWindowProc
(
HWND
hWnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
static
BOOL
WINAPI
TrackPopupHookProc
(
HMENU
hMenu
UINT
uFlags
int
x
int
y
int
nReserved
HWND
hWnd
CONST
RECT
*
prcRect
)
;
static
BOOL
CALLBACK
EnumThreadWindowsCallback
(
HWND
hWnd
LPARAM
aParam
)
;
static
LRESULT
CALLBACK
WinlessHiddenFlashWndProc
(
HWND
hWnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
#
ifdef
_WIN64
static
LONG_PTR
WINAPI
SetWindowLongPtrAHook
(
HWND
hWnd
int
nIndex
LONG_PTR
newLong
)
;
static
LONG_PTR
WINAPI
SetWindowLongPtrWHook
(
HWND
hWnd
int
nIndex
LONG_PTR
newLong
)
;
#
else
static
LONG
WINAPI
SetWindowLongAHook
(
HWND
hWnd
int
nIndex
LONG
newLong
)
;
static
LONG
WINAPI
SetWindowLongWHook
(
HWND
hWnd
int
nIndex
LONG
newLong
)
;
#
endif
static
HIMC
WINAPI
ImmGetContextProc
(
HWND
aWND
)
;
static
BOOL
WINAPI
ImmReleaseContextProc
(
HWND
aWND
HIMC
aIMC
)
;
static
LONG
WINAPI
ImmGetCompositionStringProc
(
HIMC
aIMC
DWORD
aIndex
LPVOID
aBuf
DWORD
aLen
)
;
static
BOOL
WINAPI
ImmSetCandidateWindowProc
(
HIMC
hIMC
LPCANDIDATEFORM
plCandidate
)
;
static
BOOL
WINAPI
ImmNotifyIME
(
HIMC
aIMC
DWORD
aAction
DWORD
aIndex
DWORD
aValue
)
;
class
FlashThrottleAsyncMsg
:
public
ChildAsyncCall
{
public
:
FlashThrottleAsyncMsg
(
)
;
FlashThrottleAsyncMsg
(
PluginInstanceChild
*
aInst
HWND
aWnd
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
bool
isWindowed
)
:
ChildAsyncCall
(
aInst
nullptr
nullptr
)
mWnd
(
aWnd
)
mMsg
(
aMsg
)
mWParam
(
aWParam
)
mLParam
(
aLParam
)
mWindowed
(
isWindowed
)
{
}
NS_IMETHOD
Run
(
)
override
;
WNDPROC
GetProc
(
)
;
HWND
GetWnd
(
)
{
return
mWnd
;
}
UINT
GetMsg
(
)
{
return
mMsg
;
}
WPARAM
GetWParam
(
)
{
return
mWParam
;
}
LPARAM
GetLParam
(
)
{
return
mLParam
;
}
private
:
HWND
mWnd
;
UINT
mMsg
;
WPARAM
mWParam
;
LPARAM
mLParam
;
bool
mWindowed
;
}
;
bool
ShouldPostKeyMessage
(
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
bool
MaybePostKeyMessage
(
UINT
message
WPARAM
wParam
LPARAM
lParam
)
;
#
endif
const
NPPluginFuncs
*
mPluginIface
;
nsCString
mMimeType
;
InfallibleTArray
<
nsCString
>
mNames
;
InfallibleTArray
<
nsCString
>
mValues
;
NPP_t
mData
;
NPWindow
mWindow
;
#
if
defined
(
XP_DARWIN
)
|
|
defined
(
XP_WIN
)
double
mContentsScaleFactor
;
#
endif
double
mCSSZoomFactor
;
uint32_t
mPostingKeyEvents
;
uint32_t
mPostingKeyEventsOutdated
;
int16_t
mDrawingModel
;
NPAsyncSurface
*
mCurrentDirectSurface
;
struct
DirectBitmap
{
DirectBitmap
(
PluginInstanceChild
*
aOwner
const
Shmem
&
shmem
const
gfx
:
:
IntSize
&
size
uint32_t
stride
SurfaceFormat
format
)
;
private
:
~
DirectBitmap
(
)
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DirectBitmap
)
;
PluginInstanceChild
*
mOwner
;
Shmem
mShmem
;
gfx
:
:
SurfaceFormat
mFormat
;
gfx
:
:
IntSize
mSize
;
uint32_t
mStride
;
}
;
nsRefPtrHashtable
<
nsPtrHashKey
<
NPAsyncSurface
>
DirectBitmap
>
mDirectBitmaps
;
#
if
defined
(
XP_WIN
)
nsDataHashtable
<
nsPtrHashKey
<
NPAsyncSurface
>
WindowsHandle
>
mDxgiSurfaces
;
#
endif
mozilla
:
:
Mutex
mAsyncInvalidateMutex
;
CancelableRunnable
*
mAsyncInvalidateTask
;
PluginScriptableObjectChild
*
mCachedWindowActor
;
PluginScriptableObjectChild
*
mCachedElementActor
;
#
if
defined
(
MOZ_X11
)
&
&
defined
(
XP_UNIX
)
&
&
!
defined
(
XP_MACOSX
)
NPSetWindowCallbackStruct
mWsInfo
;
#
ifdef
MOZ_WIDGET_GTK
XtClient
mXtClient
;
#
endif
#
elif
defined
(
OS_WIN
)
HWND
mPluginWindowHWND
;
WNDPROC
mPluginWndProc
;
HWND
mPluginParentHWND
;
int
mNestedEventLevelDepth
;
HWND
mCachedWinlessPluginHWND
;
HWND
mWinlessPopupSurrogateHWND
;
nsIntPoint
mPluginSize
;
WNDPROC
mWinlessThrottleOldWndProc
;
HWND
mWinlessHiddenMsgHWND
;
#
endif
friend
class
ChildAsyncCall
;
Mutex
mAsyncCallMutex
;
nsTArray
<
ChildAsyncCall
*
>
mPendingAsyncCalls
;
nsTArray
<
nsAutoPtr
<
ChildTimer
>
>
mTimers
;
nsAutoPtr
<
nsTHashtable
<
DeletingObjectEntry
>
>
mDeletingHash
;
#
if
defined
(
MOZ_WIDGET_COCOA
)
private
:
#
if
defined
(
__i386__
)
NPEventModel
mEventModel
;
#
endif
CGColorSpaceRef
mShColorSpace
;
CGContextRef
mShContext
;
RefPtr
<
nsCARenderer
>
mCARenderer
;
void
*
mCGLayer
;
uint32_t
mCARefreshTimer
;
public
:
const
NPCocoaEvent
*
getCurrentEvent
(
)
{
return
mCurrentEvent
;
}
bool
CGDraw
(
CGContextRef
ref
nsIntRect
aUpdateRect
)
;
#
if
defined
(
__i386__
)
NPEventModel
EventModel
(
)
{
return
mEventModel
;
}
#
endif
private
:
const
NPCocoaEvent
*
mCurrentEvent
;
#
endif
bool
CanPaintOnBackground
(
)
;
bool
IsVisible
(
)
{
#
ifdef
XP_MACOSX
return
mWindow
.
clipRect
.
top
!
=
mWindow
.
clipRect
.
bottom
&
&
mWindow
.
clipRect
.
left
!
=
mWindow
.
clipRect
.
right
;
#
else
return
mWindow
.
clipRect
.
top
!
=
0
|
|
mWindow
.
clipRect
.
left
!
=
0
|
|
mWindow
.
clipRect
.
bottom
!
=
0
|
|
mWindow
.
clipRect
.
right
!
=
0
;
#
endif
}
bool
ShowPluginFrame
(
void
)
;
bool
ReadbackDifferenceRect
(
const
nsIntRect
&
rect
)
;
void
AsyncShowPluginFrame
(
void
)
;
void
PaintRectToSurface
(
const
nsIntRect
&
aRect
gfxASurface
*
aSurface
const
gfx
:
:
Color
&
aColor
)
;
void
PaintRectWithAlphaExtraction
(
const
nsIntRect
&
aRect
gfxASurface
*
aSurface
)
;
void
PaintRectToPlatformSurface
(
const
nsIntRect
&
aRect
gfxASurface
*
aSurface
)
;
void
UpdateWindowAttributes
(
bool
aForceSetWindow
=
false
)
;
bool
CreateOptSurface
(
void
)
;
bool
MaybeCreatePlatformHelperSurface
(
void
)
;
bool
EnsureCurrentBuffer
(
void
)
;
void
InvalidateRectDelayed
(
void
)
;
void
ClearCurrentSurface
(
)
;
void
SwapSurfaces
(
)
;
void
ClearAllSurfaces
(
)
;
void
Destroy
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
bool
mLayersRendering
;
RefPtr
<
gfxASurface
>
mCurrentSurface
;
RefPtr
<
gfxASurface
>
mBackSurface
;
#
ifdef
XP_MACOSX
PluginUtilsOSX
:
:
nsDoubleBufferCARenderer
mDoubleBufferCARenderer
;
#
endif
RefPtr
<
gfxASurface
>
mBackground
;
#
ifdef
XP_WIN
PPluginSurfaceChild
*
mCurrentSurfaceActor
;
PPluginSurfaceChild
*
mBackSurfaceActor
;
#
endif
nsIntRect
mAccumulatedInvalidRect
;
bool
mIsTransparent
;
gfxSurfaceType
mSurfaceType
;
RefPtr
<
CancelableRunnable
>
mCurrentInvalidateTask
;
RefPtr
<
CancelableRunnable
>
mCurrentAsyncSetWindowTask
;
bool
mPendingPluginCall
;
RefPtr
<
gfxASurface
>
mHelperSurface
;
bool
mDoAlphaExtraction
;
bool
mHasPainted
;
nsIntRect
mSurfaceDifferenceRect
;
bool
mDestroyed
;
#
ifdef
XP_WIN
bool
mLastKeyEventConsumed
;
#
endif
static
bool
sIsIMEComposing
;
public
:
class
AutoStackHelper
{
public
:
explicit
AutoStackHelper
(
PluginInstanceChild
*
instance
)
:
mInstance
(
instance
)
{
+
+
mInstance
-
>
mStackDepth
;
}
~
AutoStackHelper
(
)
{
-
-
mInstance
-
>
mStackDepth
;
}
private
:
PluginInstanceChild
*
const
mInstance
;
}
;
private
:
int32_t
mStackDepth
;
}
;
}
}
#
endif
