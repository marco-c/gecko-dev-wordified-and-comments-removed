function
waitTabSwitched
(
)
{
return
new
Promise
(
resolve
=
>
{
gBrowser
.
addEventListener
(
"
TabSwitchDone
"
function
(
)
{
executeSoon
(
resolve
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
waitForMs
(
aMs
)
{
return
new
Promise
(
(
resolve
)
=
>
{
setTimeout
(
done
aMs
)
;
function
done
(
)
{
resolve
(
true
)
;
}
}
)
;
}
function
getPlatform
(
)
{
if
(
navigator
.
platform
.
indexOf
(
"
Win
"
)
=
=
0
)
{
return
"
windows
"
;
}
if
(
navigator
.
platform
.
indexOf
(
"
Mac
"
)
=
=
0
)
{
return
"
mac
"
;
}
if
(
navigator
.
platform
.
indexOf
(
"
Linux
"
)
=
=
0
)
{
return
"
linux
"
;
}
return
"
unknown
"
;
}
function
nativeVerticalWheelEventMsg
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
0x020A
;
case
"
mac
"
:
return
0
;
case
"
linux
"
:
return
4
;
}
throw
"
Native
wheel
events
not
supported
on
platform
"
+
getPlatform
(
)
;
}
function
waitScrollStart
(
aTarget
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
aTarget
.
addEventListener
(
"
scroll
"
function
(
event
)
{
resolve
(
event
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
}
function
waitScrollFinish
(
aTarget
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
recent
=
false
;
let
count
=
0
;
function
listener
(
event
)
{
recent
=
true
;
}
aTarget
.
addEventListener
(
"
scroll
"
listener
true
)
;
setInterval
(
function
(
)
{
if
(
!
recent
)
{
aTarget
.
removeEventListener
(
"
scroll
"
listener
true
)
;
resolve
(
)
;
return
;
}
recent
=
false
;
if
(
count
>
10
)
{
aTarget
.
removeEventListener
(
"
scroll
"
listener
true
)
;
reject
(
)
;
}
}
1000
)
;
}
)
;
}
function
setTestPluginEnabledState
(
aState
aPluginName
)
{
let
name
=
aPluginName
|
|
"
Test
Plug
-
in
"
;
SpecialPowers
.
setTestPluginEnabledState
(
aState
name
)
;
}
function
getTestPlugin
(
aName
)
{
let
pluginName
=
aName
|
|
"
Test
Plug
-
in
"
;
let
ph
=
Components
.
classes
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPluginHost
)
;
let
tags
=
ph
.
getPluginTags
(
)
;
for
(
let
i
=
0
;
i
<
tags
.
length
;
i
+
+
)
{
if
(
tags
[
i
]
.
name
=
=
pluginName
)
return
tags
[
i
]
;
}
ok
(
false
"
Unable
to
find
plugin
"
)
;
return
null
;
}
