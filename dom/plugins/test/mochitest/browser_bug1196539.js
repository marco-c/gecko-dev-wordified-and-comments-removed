var
gTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
"
)
;
function
checkPaintCount
(
aCount
)
{
ok
(
aCount
!
=
0
"
paint
count
can
'
t
be
greater
than
zero
count
was
"
+
aCount
)
;
ok
(
aCount
<
kMaxPaints
"
paint
count
should
be
within
limits
count
was
"
+
aCount
)
;
}
const
kMaxPaints
=
10
;
add_task
(
async
function
(
)
{
let
result
tabSwitchedPromise
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
tabCacheSize
"
0
]
]
}
)
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
"
Test
Plug
-
in
"
)
;
let
testTab
=
gBrowser
.
selectedTab
;
let
pluginTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
gTestRoot
+
"
plugin_test
.
html
"
)
;
let
homeTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
home
"
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
!
plugin
;
}
)
;
is
(
result
true
"
plugin
is
loaded
"
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
hidden
"
)
;
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
tabSwitchedPromise
=
waitTabSwitched
(
)
;
gBrowser
.
selectedTab
=
pluginTab
;
await
tabSwitchedPromise
;
await
waitForMs
(
100
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
visible
"
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
checkPaintCount
(
result
)
;
tabSwitchedPromise
=
waitTabSwitched
(
)
;
gBrowser
.
selectedTab
=
homeTab
;
await
tabSwitchedPromise
;
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
await
waitForMs
(
100
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
is
(
result
0
"
no
paints
this
is
correct
.
"
)
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
hidden
"
)
;
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
tabSwitchedPromise
=
waitTabSwitched
(
)
;
gBrowser
.
selectedTab
=
pluginTab
;
await
tabSwitchedPromise
;
result
=
await
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
checkPaintCount
(
result
)
;
gBrowser
.
removeTab
(
homeTab
)
;
gBrowser
.
removeTab
(
pluginTab
)
;
}
)
;
