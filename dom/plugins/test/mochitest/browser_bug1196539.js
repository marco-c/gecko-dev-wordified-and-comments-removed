let
gTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
"
)
;
function
getTestPlugin
(
aName
)
{
let
pluginName
=
aName
|
|
"
Test
Plug
-
in
"
;
let
ph
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
let
tags
=
ph
.
getPluginTags
(
)
;
for
(
let
i
=
0
;
i
<
tags
.
length
;
i
+
+
)
{
if
(
tags
[
i
]
.
name
=
=
pluginName
)
return
tags
[
i
]
;
}
ok
(
false
"
Unable
to
find
plugin
"
)
;
return
null
;
}
function
setTestPluginEnabledState
(
newEnabledState
pluginName
)
{
let
name
=
pluginName
|
|
"
Test
Plug
-
in
"
;
let
plugin
=
getTestPlugin
(
name
)
;
plugin
.
enabledState
=
newEnabledState
;
}
function
promiseNewTabSwitched
(
)
{
return
new
Promise
(
resolve
=
>
{
gBrowser
.
addEventListener
(
"
TabSwitchDone
"
function
onSwitch
(
)
{
gBrowser
.
removeEventListener
(
"
TabSwitchDone
"
onSwitch
)
;
executeSoon
(
resolve
)
;
}
)
;
}
)
;
}
function
waitForMs
(
aMs
)
{
return
new
Promise
(
(
resolve
)
=
>
{
setTimeout
(
done
aMs
)
;
function
done
(
)
{
resolve
(
true
)
;
}
}
)
;
}
function
checkPaintCount
(
aCount
)
{
ok
(
aCount
!
=
0
"
paint
count
can
'
t
be
greater
than
zero
count
was
"
+
aCount
)
;
ok
(
aCount
<
kMaxPaints
"
paint
count
should
be
within
limits
count
was
"
+
aCount
)
;
}
const
kMaxPaints
=
10
;
add_task
(
function
*
(
)
{
let
result
tabSwitchedPromise
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
"
Test
Plug
-
in
"
)
;
let
testTab
=
gBrowser
.
selectedTab
;
let
pluginTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
gTestRoot
+
"
plugin_test
.
html
"
)
;
let
homeTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
home
"
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
!
plugin
;
}
)
;
is
(
result
true
"
plugin
is
loaded
"
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
hidden
"
)
;
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
pluginTab
;
yield
tabSwitchedPromise
;
yield
waitForMs
(
100
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
visible
"
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
checkPaintCount
(
result
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
homeTab
;
yield
tabSwitchedPromise
;
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
yield
waitForMs
(
100
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
is
(
result
0
"
no
paints
this
is
correct
.
"
)
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
!
XPCNativeWrapper
.
unwrap
(
plugin
)
.
nativeWidgetIsVisible
(
)
;
}
)
;
is
(
result
true
"
plugin
is
hidden
"
)
;
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
XPCNativeWrapper
.
unwrap
(
plugin
)
.
resetPaintCount
(
)
;
}
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
pluginTab
;
yield
tabSwitchedPromise
;
result
=
yield
ContentTask
.
spawn
(
pluginTab
.
linkedBrowser
null
function
*
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
testplugin
"
)
;
return
XPCNativeWrapper
.
unwrap
(
plugin
)
.
getPaintCount
(
)
;
}
)
;
checkPaintCount
(
result
)
;
gBrowser
.
removeTab
(
homeTab
)
;
gBrowser
.
removeTab
(
pluginTab
)
;
}
)
;
