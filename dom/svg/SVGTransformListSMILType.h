#
ifndef
DOM_SVG_SVGTRANSFORMLISTSMILTYPE_H_
#
define
DOM_SVG_SVGTRANSFORMLISTSMILTYPE_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILType
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
SMILValue
;
class
SVGTransform
;
class
SVGTransformList
;
class
SVGTransformSMILData
;
class
SVGTransformListSMILType
:
public
SMILType
{
public
:
static
SVGTransformListSMILType
*
Singleton
(
)
{
static
SVGTransformListSMILType
sSingleton
;
return
&
sSingleton
;
}
protected
:
void
InitValue
(
SMILValue
&
aValue
)
const
override
;
void
DestroyValue
(
SMILValue
&
aValue
)
const
override
;
nsresult
Assign
(
SMILValue
&
aDest
const
SMILValue
&
aSrc
)
const
override
;
bool
IsEqual
(
const
SMILValue
&
aLeft
const
SMILValue
&
aRight
)
const
override
;
nsresult
Add
(
SMILValue
&
aDest
const
SMILValue
&
aValueToAdd
uint32_t
aCount
)
const
override
;
nsresult
SandwichAdd
(
SMILValue
&
aDest
const
SMILValue
&
aValueToAdd
)
const
override
;
nsresult
ComputeDistance
(
const
SMILValue
&
aFrom
const
SMILValue
&
aTo
double
&
aDistance
)
const
override
;
nsresult
Interpolate
(
const
SMILValue
&
aStartVal
const
SMILValue
&
aEndVal
double
aUnitDistance
SMILValue
&
aResult
)
const
override
;
public
:
static
nsresult
AppendTransform
(
const
SVGTransformSMILData
&
aTransform
SMILValue
&
aValue
)
;
static
bool
AppendTransforms
(
const
SVGTransformList
&
aList
SMILValue
&
aValue
)
;
static
bool
GetTransforms
(
const
SMILValue
&
aValue
FallibleTArray
<
SVGTransform
>
&
aTransforms
)
;
private
:
constexpr
SVGTransformListSMILType
(
)
=
default
;
}
;
}
#
endif
