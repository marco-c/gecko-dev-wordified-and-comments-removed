#
include
"
mozilla
/
dom
/
SVGFEMergeElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEMergeElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEMergeNodeElement
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
FEMerge
)
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
:
:
dom
{
JSObject
*
SVGFEMergeElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFEMergeElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
StringInfo
SVGFEMergeElement
:
:
sStringInfo
[
1
]
=
{
{
nsGkAtoms
:
:
result
kNameSpaceID_None
true
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFEMergeElement
)
FilterPrimitiveDescription
SVGFEMergeElement
:
:
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
{
return
FilterPrimitiveDescription
(
AsVariant
(
MergeAttributes
(
)
)
)
;
}
void
SVGFEMergeElement
:
:
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
{
for
(
nsIContent
*
child
=
nsINode
:
:
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
auto
*
node
=
SVGFEMergeNodeElement
:
:
FromNode
(
child
)
)
{
aSources
.
AppendElement
(
SVGStringInfo
(
node
-
>
GetIn1
(
)
node
)
)
;
}
}
}
nsresult
SVGFEMergeElement
:
:
BindToTree
(
BindContext
&
aCtx
nsINode
&
aParent
)
{
if
(
aCtx
.
InComposedDoc
(
)
)
{
aCtx
.
OwnerDoc
(
)
.
SetUseCounter
(
eUseCounter_custom_feMerge
)
;
}
return
SVGFE
:
:
BindToTree
(
aCtx
aParent
)
;
}
SVGElement
:
:
StringAttributesInfo
SVGFEMergeElement
:
:
GetStringInfo
(
)
{
return
StringAttributesInfo
(
mStringAttributes
sStringInfo
ArrayLength
(
sStringInfo
)
)
;
}
}
