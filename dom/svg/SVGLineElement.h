#
ifndef
mozilla_dom_SVGLineElement_h
#
define
mozilla_dom_SVGLineElement_h
#
include
"
SVGGeometryElement
.
h
"
#
include
"
nsSVGLength2
.
h
"
nsresult
NS_NewSVGLineElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGGeometryElement
SVGLineElementBase
;
class
SVGLineElement
final
:
public
SVGLineElementBase
{
protected
:
explicit
SVGLineElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
friend
nsresult
(
:
:
NS_NewSVGLineElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
void
MaybeAdjustForZeroLength
(
float
aX1
float
aY1
float
&
aX2
float
aY2
)
;
public
:
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
name
)
const
override
;
virtual
bool
IsMarkable
(
)
override
{
return
true
;
}
virtual
void
GetMarkPoints
(
nsTArray
<
SVGMark
>
*
aMarks
)
override
;
virtual
void
GetAsSimplePath
(
SimplePath
*
aSimplePath
)
override
;
virtual
already_AddRefed
<
Path
>
BuildPath
(
PathBuilder
*
aBuilder
)
override
;
virtual
bool
GetGeometryBounds
(
Rect
*
aBounds
const
StrokeOptions
&
aStrokeOptions
const
Matrix
&
aToBoundsSpace
const
Matrix
*
aToNonScalingStrokeSpace
=
nullptr
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
SVGAnimatedLength
>
X1
(
)
;
already_AddRefed
<
SVGAnimatedLength
>
Y1
(
)
;
already_AddRefed
<
SVGAnimatedLength
>
X2
(
)
;
already_AddRefed
<
SVGAnimatedLength
>
Y2
(
)
;
protected
:
virtual
LengthAttributesInfo
GetLengthInfo
(
)
override
;
enum
{
ATTR_X1
ATTR_Y1
ATTR_X2
ATTR_Y2
}
;
nsSVGLength2
mLengthAttributes
[
4
]
;
static
LengthInfo
sLengthInfo
[
4
]
;
}
;
}
}
#
endif
