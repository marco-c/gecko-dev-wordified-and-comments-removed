#
ifndef
DOM_SVG_SVGFEIMAGEELEMENT_H_
#
define
DOM_SVG_SVGFEIMAGEELEMENT_H_
#
include
"
mozilla
/
dom
/
SVGFilters
.
h
"
#
include
"
SVGAnimatedPreserveAspectRatio
.
h
"
nsresult
NS_NewSVGFEImageElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
class
SVGFEImageFrame
;
namespace
dom
{
using
SVGFEImageElementBase
=
SVGFilterPrimitiveElement
;
class
SVGFEImageElement
final
:
public
SVGFEImageElementBase
public
nsImageLoadingContent
{
friend
class
mozilla
:
:
SVGFEImageFrame
;
protected
:
friend
nsresult
(
:
:
NS_NewSVGFEImageElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGFEImageElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
virtual
~
SVGFEImageElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
bool
SubregionIsUnionOfRegions
(
)
override
{
return
false
;
}
NS_DECL_ISUPPORTS_INHERITED
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
override
;
FilterPrimitiveDescription
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
SVGAnimatedString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
CORSMode
GetCORSMode
(
)
override
;
bool
OutputIsTainted
(
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsIPrincipal
*
aReferencePrincipal
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
void
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
UnbindFromTree
(
UnbindContext
&
)
override
;
void
DestroyContent
(
)
override
;
NS_DECL_IMGINOTIFICATIONOBSERVER
NS_IMETHOD_
(
void
)
FrameCreated
(
nsIFrame
*
aFrame
)
override
;
void
NodeInfoChanged
(
Document
*
aOldDoc
)
override
;
void
MaybeLoadSVGImage
(
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
already_AddRefed
<
DOMSVGAnimatedPreserveAspectRatio
>
PreserveAspectRatio
(
)
;
void
GetCrossOrigin
(
nsAString
&
aCrossOrigin
)
{
GetEnumAttr
(
nsGkAtoms
:
:
crossorigin
nullptr
aCrossOrigin
)
;
}
void
SetCrossOrigin
(
const
nsAString
&
aCrossOrigin
ErrorResult
&
aError
)
{
SetOrRemoveNullableStringAttr
(
nsGkAtoms
:
:
crossorigin
aCrossOrigin
aError
)
;
}
void
GetFetchPriority
(
nsAString
&
aFetchPriority
)
const
;
void
SetFetchPriority
(
const
nsAString
&
aFetchPriority
)
{
SetAttr
(
nsGkAtoms
:
:
fetchpriority
aFetchPriority
IgnoreErrors
(
)
)
;
}
private
:
void
DidAnimateAttribute
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
override
;
void
UpdateSrcURI
(
)
;
nsresult
LoadSVGImage
(
bool
aForce
bool
aNotify
)
;
bool
ShouldLoadImage
(
)
const
;
protected
:
bool
ProducesSRGB
(
)
override
{
return
true
;
}
SVGAnimatedPreserveAspectRatio
*
GetAnimatedPreserveAspectRatio
(
)
override
;
StringAttributesInfo
GetStringInfo
(
)
override
;
nsIContent
*
AsContent
(
)
override
{
return
this
;
}
FetchPriority
GetFetchPriorityForImage
(
)
const
override
{
return
Element
:
:
GetFetchPriority
(
)
;
}
nsCOMPtr
<
nsIURI
>
mSrcURI
;
enum
{
RESULT
HREF
XLINK_HREF
}
;
SVGAnimatedString
mStringAttributes
[
3
]
;
static
StringInfo
sStringInfo
[
3
]
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
uint16_t
mImageAnimationMode
;
}
;
}
}
#
endif
