#
ifndef
MOZILLA_SVGTRANSFORMLIST_H__
#
define
MOZILLA_SVGTRANSFORMLIST_H__
#
include
"
gfxMatrix
.
h
"
#
include
"
SVGTransform
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
DOMSVGTransform
;
class
DOMSVGTransformList
;
}
class
SVGTransformList
{
friend
class
SVGAnimatedTransformList
;
friend
class
dom
:
:
DOMSVGTransform
;
friend
class
dom
:
:
DOMSVGTransformList
;
public
:
SVGTransformList
(
)
=
default
;
~
SVGTransformList
(
)
=
default
;
void
GetValueAsString
(
nsAString
&
aValue
)
const
;
bool
IsEmpty
(
)
const
{
return
mItems
.
IsEmpty
(
)
;
}
uint32_t
Length
(
)
const
{
return
mItems
.
Length
(
)
;
}
const
SVGTransform
&
operator
[
]
(
uint32_t
aIndex
)
const
{
return
mItems
[
aIndex
]
;
}
bool
operator
=
=
(
const
SVGTransformList
&
rhs
)
const
{
return
mItems
=
=
rhs
.
mItems
;
}
bool
SetCapacity
(
uint32_t
size
)
{
return
mItems
.
SetCapacity
(
size
fallible
)
;
}
void
Compact
(
)
{
mItems
.
Compact
(
)
;
}
gfxMatrix
GetConsolidationMatrix
(
)
const
;
protected
:
nsresult
CopyFrom
(
const
SVGTransformList
&
rhs
)
;
nsresult
CopyFrom
(
const
nsTArray
<
SVGTransform
>
&
aTransformArray
)
;
SVGTransform
&
operator
[
]
(
uint32_t
aIndex
)
{
return
mItems
[
aIndex
]
;
}
bool
SetLength
(
uint32_t
aNumberOfItems
)
{
return
mItems
.
SetLength
(
aNumberOfItems
fallible
)
;
}
private
:
nsresult
SetValueFromString
(
const
nsAString
&
aValue
)
;
void
Clear
(
)
{
mItems
.
Clear
(
)
;
}
bool
InsertItem
(
uint32_t
aIndex
const
SVGTransform
&
aTransform
)
{
if
(
aIndex
>
=
mItems
.
Length
(
)
)
{
aIndex
=
mItems
.
Length
(
)
;
}
return
!
!
mItems
.
InsertElementAt
(
aIndex
aTransform
fallible
)
;
}
void
ReplaceItem
(
uint32_t
aIndex
const
SVGTransform
&
aTransform
)
{
MOZ_ASSERT
(
aIndex
<
mItems
.
Length
(
)
"
DOM
wrapper
caller
should
have
raised
INDEX_SIZE_ERR
"
)
;
mItems
[
aIndex
]
=
aTransform
;
}
void
RemoveItem
(
uint32_t
aIndex
)
{
MOZ_ASSERT
(
aIndex
<
mItems
.
Length
(
)
"
DOM
wrapper
caller
should
have
raised
INDEX_SIZE_ERR
"
)
;
mItems
.
RemoveElementAt
(
aIndex
)
;
}
bool
AppendItem
(
const
SVGTransform
&
aTransform
)
{
return
!
!
mItems
.
AppendElement
(
aTransform
fallible
)
;
}
protected
:
FallibleTArray
<
SVGTransform
>
mItems
;
}
;
}
#
endif
