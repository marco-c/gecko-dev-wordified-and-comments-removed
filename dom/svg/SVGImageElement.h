#
ifndef
DOM_SVG_SVGIMAGEELEMENT_H_
#
define
DOM_SVG_SVGIMAGEELEMENT_H_
#
include
"
nsImageLoadingContent
.
h
"
#
include
"
SVGAnimatedLength
.
h
"
#
include
"
SVGAnimatedString
.
h
"
#
include
"
SVGGeometryElement
.
h
"
#
include
"
SVGAnimatedPreserveAspectRatio
.
h
"
nsresult
NS_NewSVGImageElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
class
SVGImageFrame
;
namespace
dom
{
class
DOMSVGAnimatedPreserveAspectRatio
;
using
SVGImageElementBase
=
SVGGeometryElement
;
class
SVGImageElement
:
public
SVGImageElementBase
public
nsImageLoadingContent
{
friend
class
mozilla
:
:
SVGImageFrame
;
protected
:
explicit
SVGImageElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
virtual
~
SVGImageElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
friend
nsresult
(
:
:
NS_NewSVGImageElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
override
;
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
bool
IsNodeOfType
(
uint32_t
aFlags
)
const
override
{
return
SVGGraphicsElement
:
:
IsNodeOfType
(
aFlags
)
;
}
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
)
override
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
virtual
void
DestroyContent
(
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
name
)
const
override
;
virtual
bool
GetGeometryBounds
(
Rect
*
aBounds
const
StrokeOptions
&
aStrokeOptions
const
Matrix
&
aToBoundsSpace
const
Matrix
*
aToNonScalingStrokeSpace
=
nullptr
)
override
;
virtual
already_AddRefed
<
Path
>
BuildPath
(
PathBuilder
*
aBuilder
)
override
;
virtual
bool
HasValidDimensions
(
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
MaybeLoadSVGImage
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
X
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Y
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Width
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Height
(
)
;
already_AddRefed
<
DOMSVGAnimatedPreserveAspectRatio
>
PreserveAspectRatio
(
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
void
SetDecoding
(
const
nsAString
&
aDecoding
ErrorResult
&
aError
)
{
SetAttr
(
nsGkAtoms
:
:
decoding
aDecoding
aError
)
;
}
void
GetDecoding
(
nsAString
&
aValue
)
;
already_AddRefed
<
Promise
>
Decode
(
ErrorResult
&
aRv
)
;
static
nsCSSPropertyID
GetCSSPropertyIdForAttrEnum
(
uint8_t
aAttrEnum
)
;
protected
:
nsresult
LoadSVGImage
(
bool
aForce
bool
aNotify
)
;
virtual
LengthAttributesInfo
GetLengthInfo
(
)
override
;
virtual
SVGAnimatedPreserveAspectRatio
*
GetAnimatedPreserveAspectRatio
(
)
override
;
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
nsIContent
*
AsContent
(
)
override
{
return
this
;
}
enum
{
ATTR_X
ATTR_Y
ATTR_WIDTH
ATTR_HEIGHT
}
;
SVGAnimatedLength
mLengthAttributes
[
4
]
;
static
LengthInfo
sLengthInfo
[
4
]
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
enum
{
HREF
XLINK_HREF
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
}
#
endif
