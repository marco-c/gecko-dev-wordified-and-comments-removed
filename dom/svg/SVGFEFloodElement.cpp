#
include
"
mozilla
/
dom
/
SVGFEFloodElement
.
h
"
#
include
"
FilterSupport
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEFloodElementBinding
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsIFrame
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
FEFlood
)
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
:
:
dom
{
JSObject
*
SVGFEFloodElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFEFloodElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
StringInfo
SVGFEFloodElement
:
:
sStringInfo
[
1
]
=
{
{
nsGkAtoms
:
:
result
kNameSpaceID_None
true
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFEFloodElement
)
FilterPrimitiveDescription
SVGFEFloodElement
:
:
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
{
FloodAttributes
atts
;
if
(
const
auto
*
frame
=
GetPrimaryFrame
(
)
)
{
const
nsStyleSVGReset
*
styleSVGReset
=
frame
-
>
Style
(
)
-
>
StyleSVGReset
(
)
;
sRGBColor
color
(
sRGBColor
:
:
FromABGR
(
styleSVGReset
-
>
mFloodColor
.
CalcColor
(
frame
)
)
)
;
color
.
a
*
=
styleSVGReset
-
>
mFloodOpacity
;
atts
.
mColor
=
color
;
}
else
{
atts
.
mColor
=
sRGBColor
(
)
;
}
return
FilterPrimitiveDescription
(
AsVariant
(
std
:
:
move
(
atts
)
)
)
;
}
bool
SVGFEFloodElement
:
:
OutputIsTainted
(
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsIPrincipal
*
aReferencePrincipal
)
{
if
(
const
auto
*
frame
=
GetPrimaryFrame
(
)
)
{
if
(
frame
-
>
Style
(
)
-
>
StyleSVGReset
(
)
-
>
mFloodColor
.
IsCurrentColor
(
)
)
{
return
true
;
}
}
return
SVGFEFloodElementBase
:
:
OutputIsTainted
(
aInputsAreTainted
aReferencePrincipal
)
;
}
nsresult
SVGFEFloodElement
:
:
BindToTree
(
BindContext
&
aCtx
nsINode
&
aParent
)
{
if
(
aCtx
.
InComposedDoc
(
)
)
{
aCtx
.
OwnerDoc
(
)
.
SetUseCounter
(
eUseCounter_custom_feFlood
)
;
}
return
SVGFEFloodElementBase
:
:
BindToTree
(
aCtx
aParent
)
;
}
SVGElement
:
:
StringAttributesInfo
SVGFEFloodElement
:
:
GetStringInfo
(
)
{
return
StringAttributesInfo
(
mStringAttributes
sStringInfo
std
:
:
size
(
sStringInfo
)
)
;
}
}
