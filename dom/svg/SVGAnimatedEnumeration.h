#
ifndef
DOM_SVG_SVGANIMATEDENUMERATION_H_
#
define
DOM_SVG_SVGANIMATEDENUMERATION_H_
#
include
"
DOMSVGAnimatedEnumeration
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsError
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
class
nsAtom
;
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGAnimationElement
;
}
typedef
uint8_t
SVGEnumValue
;
struct
SVGEnumMapping
{
nsStaticAtom
*
const
mKey
;
const
SVGEnumValue
mVal
;
}
;
class
SVGAnimatedEnumeration
{
public
:
typedef
mozilla
:
:
dom
:
:
SVGElement
SVGElement
;
void
Init
(
uint8_t
aAttrEnum
uint16_t
aValue
)
{
mAnimVal
=
mBaseVal
=
uint8_t
(
aValue
)
;
mAttrEnum
=
aAttrEnum
;
mIsAnimated
=
false
;
mIsBaseSet
=
false
;
}
bool
SetBaseValueAtom
(
const
nsAtom
*
aValue
SVGElement
*
aSVGElement
)
;
nsAtom
*
GetBaseValueAtom
(
SVGElement
*
aSVGElement
)
;
void
SetBaseValue
(
uint16_t
aValue
SVGElement
*
aSVGElement
ErrorResult
&
aRv
)
;
uint16_t
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
void
SetAnimValue
(
uint16_t
aValue
SVGElement
*
aSVGElement
)
;
uint16_t
GetAnimValue
(
)
const
{
return
mAnimVal
;
}
bool
IsExplicitlySet
(
)
const
{
return
mIsAnimated
|
|
mIsBaseSet
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
DOMSVGAnimatedEnumeration
>
ToDOMAnimatedEnum
(
SVGElement
*
aSVGElement
)
;
mozilla
:
:
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
private
:
SVGEnumValue
mAnimVal
;
SVGEnumValue
mBaseVal
;
uint8_t
mAttrEnum
;
bool
mIsAnimated
;
bool
mIsBaseSet
;
const
SVGEnumMapping
*
GetMapping
(
SVGElement
*
aSVGElement
)
;
public
:
struct
DOMAnimatedEnum
final
:
public
mozilla
:
:
dom
:
:
DOMSVGAnimatedEnumeration
{
DOMAnimatedEnum
(
SVGAnimatedEnumeration
*
aVal
SVGElement
*
aSVGElement
)
:
mozilla
:
:
dom
:
:
DOMSVGAnimatedEnumeration
(
aSVGElement
)
mVal
(
aVal
)
{
}
virtual
~
DOMAnimatedEnum
(
)
;
SVGAnimatedEnumeration
*
mVal
;
using
mozilla
:
:
dom
:
:
DOMSVGAnimatedEnumeration
:
:
SetBaseVal
;
virtual
uint16_t
BaseVal
(
)
override
{
return
mVal
-
>
GetBaseValue
(
)
;
}
virtual
void
SetBaseVal
(
uint16_t
aBaseVal
ErrorResult
&
aRv
)
override
{
mVal
-
>
SetBaseValue
(
aBaseVal
mSVGElement
aRv
)
;
}
virtual
uint16_t
AnimVal
(
)
override
{
mSVGElement
-
>
FlushAnimations
(
)
;
return
mVal
-
>
GetAnimValue
(
)
;
}
}
;
struct
SMILEnum
:
public
SMILAttr
{
public
:
SMILEnum
(
SVGAnimatedEnumeration
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedEnumeration
*
mVal
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
mozilla
:
:
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
