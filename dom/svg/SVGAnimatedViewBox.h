#
ifndef
DOM_SVG_SVGANIMATEDVIEWBOX_H_
#
define
DOM_SVG_SVGANIMATEDVIEWBOX_H_
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsError
.
h
"
#
include
"
SVGAttrTearoffTable
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
SVGAnimatedRect
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGRect
;
class
SVGAnimationElement
;
class
SVGElement
;
}
struct
SVGViewBox
{
float
x
y
;
float
width
height
;
bool
none
;
SVGViewBox
(
)
:
x
(
0
.
0
)
y
(
0
.
0
)
width
(
0
.
0
)
height
(
0
.
0
)
none
(
true
)
{
}
SVGViewBox
(
float
aX
float
aY
float
aWidth
float
aHeight
)
:
x
(
aX
)
y
(
aY
)
width
(
aWidth
)
height
(
aHeight
)
none
(
false
)
{
}
bool
operator
=
=
(
const
SVGViewBox
&
aOther
)
const
;
static
nsresult
FromString
(
const
nsAString
&
aStr
SVGViewBox
*
aViewBox
)
;
}
;
class
SVGAnimatedViewBox
{
public
:
using
SVGElement
=
dom
:
:
SVGElement
;
void
Init
(
)
;
bool
HasRect
(
)
const
;
bool
IsExplicitlySet
(
)
const
{
if
(
mAnimVal
|
|
mHasBaseVal
)
{
const
SVGViewBox
&
rect
=
GetAnimValue
(
)
;
return
rect
.
none
|
|
(
rect
.
width
>
=
0
&
&
rect
.
height
>
=
0
)
;
}
return
false
;
}
const
SVGViewBox
&
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
void
SetBaseValue
(
const
SVGViewBox
&
aRect
SVGElement
*
aSVGElement
)
;
const
SVGViewBox
&
GetAnimValue
(
)
const
{
return
mAnimVal
?
*
mAnimVal
:
mBaseVal
;
}
void
SetAnimValue
(
const
SVGViewBox
&
aRect
SVGElement
*
aSVGElement
)
;
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
;
void
GetBaseValueString
(
nsAString
&
aValue
)
const
;
already_AddRefed
<
dom
:
:
SVGAnimatedRect
>
ToSVGAnimatedRect
(
SVGElement
*
aSVGElement
)
;
already_AddRefed
<
dom
:
:
SVGRect
>
ToDOMBaseVal
(
SVGElement
*
aSVGElement
)
;
already_AddRefed
<
dom
:
:
SVGRect
>
ToDOMAnimVal
(
SVGElement
*
aSVGElement
)
;
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
private
:
SVGViewBox
mBaseVal
;
UniquePtr
<
SVGViewBox
>
mAnimVal
;
bool
mHasBaseVal
;
public
:
struct
SMILViewBox
:
public
SMILAttr
{
public
:
SMILViewBox
(
SVGAnimatedViewBox
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedViewBox
*
mVal
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
static
SVGAttrTearoffTable
<
SVGAnimatedViewBox
dom
:
:
SVGAnimatedRect
>
sSVGAnimatedRectTearoffTable
;
}
;
}
#
endif
