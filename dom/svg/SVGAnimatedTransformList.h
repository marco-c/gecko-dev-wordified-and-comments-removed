#
ifndef
DOM_SVG_SVGANIMATEDTRANSFORMLIST_H_
#
define
DOM_SVG_SVGANIMATEDTRANSFORMLIST_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
SVGTransformList
.
h
"
class
nsAtom
;
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGAnimationElement
;
class
SVGElement
;
class
DOMSVGTransform
;
}
class
SVGAnimatedTransformList
{
friend
class
dom
:
:
DOMSVGTransform
;
friend
class
dom
:
:
DOMSVGTransformList
;
public
:
SVGAnimatedTransformList
(
)
:
mIsAttrSet
(
false
)
mCreatedOrRemovedOnLastChange
(
true
)
{
}
const
SVGTransformList
&
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
nsresult
SetBaseValue
(
const
SVGTransformList
&
aValue
dom
:
:
SVGElement
*
aSVGElement
)
;
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
dom
:
:
SVGElement
*
aSVGElement
)
;
void
ClearBaseValue
(
)
;
const
SVGTransformList
&
GetAnimValue
(
)
const
{
return
mAnimVal
?
*
mAnimVal
:
mBaseVal
;
}
nsresult
SetAnimValue
(
const
SVGTransformList
&
aValue
dom
:
:
SVGElement
*
aElement
)
;
void
ClearAnimValue
(
dom
:
:
SVGElement
*
aElement
)
;
bool
IsExplicitlySet
(
)
const
;
bool
HasTransform
(
)
const
{
return
(
mAnimVal
&
&
!
mAnimVal
-
>
IsEmpty
(
)
)
|
|
!
mBaseVal
.
IsEmpty
(
)
;
}
bool
IsAnimating
(
)
const
{
return
!
!
mAnimVal
;
}
bool
CreatedOrRemovedOnLastChange
(
)
const
{
return
mCreatedOrRemovedOnLastChange
;
}
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
dom
:
:
SVGElement
*
aSVGElement
)
;
private
:
SVGTransformList
mBaseVal
;
UniquePtr
<
SVGTransformList
>
mAnimVal
;
bool
mIsAttrSet
;
bool
mCreatedOrRemovedOnLastChange
;
struct
SMILAnimatedTransformList
:
public
SMILAttr
{
public
:
SMILAnimatedTransformList
(
SVGAnimatedTransformList
*
aVal
dom
:
:
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mElement
(
aSVGElement
)
{
}
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aNewAnimValue
)
override
;
protected
:
static
void
ParseValue
(
const
nsAString
&
aSpec
const
nsAtom
*
aTransformType
SMILValue
&
aResult
)
;
static
int32_t
ParseParameterList
(
const
nsAString
&
aSpec
float
*
aVars
int32_t
aNVars
)
;
SVGAnimatedTransformList
*
mVal
;
dom
:
:
SVGElement
*
mElement
;
}
;
}
;
}
#
endif
