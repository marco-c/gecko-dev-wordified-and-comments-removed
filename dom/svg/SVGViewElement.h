#
ifndef
DOM_SVG_SVGVIEWELEMENT_H_
#
define
DOM_SVG_SVGVIEWELEMENT_H_
#
include
"
SVGAnimatedEnumeration
.
h
"
#
include
"
SVGAnimatedPreserveAspectRatio
.
h
"
#
include
"
SVGAnimatedViewBox
.
h
"
#
include
"
SVGStringList
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
nsresult
NS_NewSVGViewElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
class
SVGFragmentIdentifier
;
class
SVGOuterSVGFrame
;
namespace
dom
{
class
SVGViewportElement
;
using
SVGViewElementBase
=
SVGElement
;
class
SVGViewElement
final
:
public
SVGViewElementBase
{
protected
:
friend
class
mozilla
:
:
SVGFragmentIdentifier
;
friend
class
mozilla
:
:
SVGOuterSVGFrame
;
friend
class
SVGSVGElement
;
friend
class
SVGViewportElement
;
explicit
SVGViewElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
friend
nsresult
(
:
:
NS_NewSVGViewElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_IMPL_FROMNODE_WITH_TAG
(
SVGViewElement
kNameSpaceID_SVG
view
)
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
uint16_t
ZoomAndPan
(
)
{
return
mEnumAttributes
[
ZOOMANDPAN
]
.
GetAnimValue
(
)
;
}
void
SetZoomAndPan
(
uint16_t
aZoomAndPan
ErrorResult
&
rv
)
;
already_AddRefed
<
SVGAnimatedRect
>
ViewBox
(
)
;
already_AddRefed
<
DOMSVGAnimatedPreserveAspectRatio
>
PreserveAspectRatio
(
)
;
private
:
EnumAttributesInfo
GetEnumInfo
(
)
override
;
enum
{
ZOOMANDPAN
}
;
SVGAnimatedEnumeration
mEnumAttributes
[
1
]
;
static
SVGEnumMapping
sZoomAndPanMap
[
]
;
static
EnumInfo
sEnumInfo
[
1
]
;
SVGAnimatedViewBox
*
GetAnimatedViewBox
(
)
override
;
SVGAnimatedPreserveAspectRatio
*
GetAnimatedPreserveAspectRatio
(
)
override
;
SVGAnimatedViewBox
mViewBox
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
}
;
}
}
#
endif
