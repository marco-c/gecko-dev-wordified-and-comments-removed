#
include
"
SVGAnimatedViewBox
.
h
"
#
include
<
utility
>
#
include
"
SVGViewBoxSMILType
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
SMILValue
.
h
"
#
include
"
mozilla
/
SVGContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
SVGRect
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsTextFormatter
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
#
define
NUM_VIEWBOX_COMPONENTS
4
bool
SVGViewBox
:
:
operator
=
=
(
const
SVGViewBox
&
aOther
)
const
{
if
(
&
aOther
=
=
this
)
return
true
;
return
(
none
&
&
aOther
.
none
)
|
|
(
!
none
&
&
!
aOther
.
none
&
&
x
=
=
aOther
.
x
&
&
y
=
=
aOther
.
y
&
&
width
=
=
aOther
.
width
&
&
height
=
=
aOther
.
height
)
;
}
nsresult
SVGViewBox
:
:
FromString
(
const
nsAString
&
aStr
SVGViewBox
*
aViewBox
)
{
if
(
aStr
.
EqualsLiteral
(
"
none
"
)
)
{
aViewBox
-
>
none
=
true
;
return
NS_OK
;
}
nsCharSeparatedTokenizerTemplate
<
nsContentUtils
:
:
IsHTMLWhitespace
nsTokenizerFlags
:
:
SeparatorOptional
>
tokenizer
(
aStr
'
'
)
;
float
vals
[
NUM_VIEWBOX_COMPONENTS
]
;
uint32_t
i
;
for
(
i
=
0
;
i
<
NUM_VIEWBOX_COMPONENTS
&
&
tokenizer
.
hasMoreTokens
(
)
;
+
+
i
)
{
if
(
!
SVGContentUtils
:
:
ParseNumber
(
tokenizer
.
nextToken
(
)
vals
[
i
]
)
)
{
return
NS_ERROR_DOM_SYNTAX_ERR
;
}
}
if
(
i
!
=
NUM_VIEWBOX_COMPONENTS
|
|
tokenizer
.
hasMoreTokens
(
)
|
|
tokenizer
.
separatorAfterCurrentToken
(
)
)
{
return
NS_ERROR_DOM_SYNTAX_ERR
;
}
aViewBox
-
>
x
=
vals
[
0
]
;
aViewBox
-
>
y
=
vals
[
1
]
;
aViewBox
-
>
width
=
vals
[
2
]
;
aViewBox
-
>
height
=
vals
[
3
]
;
aViewBox
-
>
none
=
false
;
return
NS_OK
;
}
MOZ_CONSTINIT
static
SVGAttrTearoffTable
<
SVGAnimatedViewBox
SVGRect
>
sBaseSVGViewBoxTearoffTable
;
MOZ_CONSTINIT
static
SVGAttrTearoffTable
<
SVGAnimatedViewBox
SVGRect
>
sAnimSVGViewBoxTearoffTable
;
MOZ_CONSTINIT
SVGAttrTearoffTable
<
SVGAnimatedViewBox
SVGAnimatedRect
>
SVGAnimatedViewBox
:
:
sSVGAnimatedRectTearoffTable
;
class
MOZ_RAII
AutoChangeViewBoxNotifier
{
public
:
AutoChangeViewBoxNotifier
(
SVGAnimatedViewBox
*
aViewBox
SVGElement
*
aSVGElement
bool
aDoSetAttr
=
true
)
:
mViewBox
(
aViewBox
)
mSVGElement
(
aSVGElement
)
mDoSetAttr
(
aDoSetAttr
)
{
MOZ_ASSERT
(
mViewBox
"
Expecting
non
-
null
viewBox
"
)
;
MOZ_ASSERT
(
mSVGElement
"
Expecting
non
-
null
element
"
)
;
if
(
mDoSetAttr
)
{
mUpdateBatch
.
emplace
(
aSVGElement
-
>
GetComposedDoc
(
)
true
)
;
mSVGElement
-
>
WillChangeViewBox
(
mUpdateBatch
.
ref
(
)
)
;
}
}
~
AutoChangeViewBoxNotifier
(
)
{
if
(
mDoSetAttr
)
{
mSVGElement
-
>
DidChangeViewBox
(
mUpdateBatch
.
ref
(
)
)
;
}
if
(
mViewBox
-
>
mAnimVal
)
{
mSVGElement
-
>
AnimationNeedsResample
(
)
;
}
}
private
:
SVGAnimatedViewBox
*
const
mViewBox
;
SVGElement
*
const
mSVGElement
;
Maybe
<
mozAutoDocUpdate
>
mUpdateBatch
;
bool
mDoSetAttr
;
}
;
void
SVGAnimatedViewBox
:
:
Init
(
)
{
mHasBaseVal
=
false
;
mBaseVal
.
none
=
true
;
mAnimVal
=
nullptr
;
}
bool
SVGAnimatedViewBox
:
:
HasRect
(
)
const
{
const
SVGViewBox
*
rect
=
mAnimVal
.
get
(
)
;
if
(
!
rect
)
{
if
(
!
mHasBaseVal
)
{
return
false
;
}
rect
=
&
mBaseVal
;
}
return
!
rect
-
>
none
&
&
rect
-
>
width
>
=
0
&
&
rect
-
>
height
>
=
0
;
}
void
SVGAnimatedViewBox
:
:
SetAnimValue
(
const
SVGViewBox
&
aRect
SVGElement
*
aSVGElement
)
{
if
(
!
mAnimVal
)
{
mAnimVal
=
MakeUnique
<
SVGViewBox
>
(
aRect
)
;
}
else
{
if
(
aRect
=
=
*
mAnimVal
)
{
return
;
}
*
mAnimVal
=
aRect
;
}
aSVGElement
-
>
DidAnimateViewBox
(
)
;
}
void
SVGAnimatedViewBox
:
:
SetBaseValue
(
const
SVGViewBox
&
aRect
SVGElement
*
aSVGElement
)
{
if
(
!
mHasBaseVal
|
|
mBaseVal
=
=
aRect
)
{
mBaseVal
=
aRect
;
return
;
}
AutoChangeViewBoxNotifier
notifier
(
this
aSVGElement
)
;
mBaseVal
=
aRect
;
mHasBaseVal
=
true
;
}
nsresult
SVGAnimatedViewBox
:
:
SetBaseValueString
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
{
SVGViewBox
viewBox
;
nsresult
rv
=
SVGViewBox
:
:
FromString
(
aValue
&
viewBox
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
mHasBaseVal
&
&
viewBox
=
=
mBaseVal
)
{
return
NS_OK
;
}
AutoChangeViewBoxNotifier
notifier
(
this
aSVGElement
aDoSetAttr
)
;
mHasBaseVal
=
true
;
mBaseVal
=
viewBox
;
return
NS_OK
;
}
void
SVGAnimatedViewBox
:
:
GetBaseValueString
(
nsAString
&
aValue
)
const
{
if
(
mBaseVal
.
none
)
{
aValue
.
AssignLiteral
(
"
none
"
)
;
return
;
}
nsTextFormatter
:
:
ssprintf
(
aValue
u
"
%
g
%
g
%
g
%
g
"
(
double
)
mBaseVal
.
x
(
double
)
mBaseVal
.
y
(
double
)
mBaseVal
.
width
(
double
)
mBaseVal
.
height
)
;
}
already_AddRefed
<
SVGAnimatedRect
>
SVGAnimatedViewBox
:
:
ToSVGAnimatedRect
(
SVGElement
*
aSVGElement
)
{
RefPtr
<
SVGAnimatedRect
>
domAnimatedRect
=
sSVGAnimatedRectTearoffTable
.
GetTearoff
(
this
)
;
if
(
!
domAnimatedRect
)
{
domAnimatedRect
=
new
SVGAnimatedRect
(
this
aSVGElement
)
;
sSVGAnimatedRectTearoffTable
.
AddTearoff
(
this
domAnimatedRect
)
;
}
return
domAnimatedRect
.
forget
(
)
;
}
already_AddRefed
<
SVGRect
>
SVGAnimatedViewBox
:
:
ToDOMBaseVal
(
SVGElement
*
aSVGElement
)
{
if
(
!
mHasBaseVal
|
|
mBaseVal
.
none
)
{
return
nullptr
;
}
RefPtr
<
SVGRect
>
domBaseVal
=
sBaseSVGViewBoxTearoffTable
.
GetTearoff
(
this
)
;
if
(
!
domBaseVal
)
{
domBaseVal
=
new
SVGRect
(
this
aSVGElement
SVGRect
:
:
RectType
:
:
BaseValue
)
;
sBaseSVGViewBoxTearoffTable
.
AddTearoff
(
this
domBaseVal
)
;
}
return
domBaseVal
.
forget
(
)
;
}
SVGRect
:
:
~
SVGRect
(
)
{
switch
(
mType
)
{
case
RectType
:
:
BaseValue
:
sBaseSVGViewBoxTearoffTable
.
RemoveTearoff
(
mVal
)
;
break
;
case
RectType
:
:
AnimValue
:
sAnimSVGViewBoxTearoffTable
.
RemoveTearoff
(
mVal
)
;
break
;
default
:
break
;
}
}
already_AddRefed
<
SVGRect
>
SVGAnimatedViewBox
:
:
ToDOMAnimVal
(
SVGElement
*
aSVGElement
)
{
if
(
(
mAnimVal
&
&
mAnimVal
-
>
none
)
|
|
(
!
mAnimVal
&
&
(
!
mHasBaseVal
|
|
mBaseVal
.
none
)
)
)
{
return
nullptr
;
}
RefPtr
<
SVGRect
>
domAnimVal
=
sAnimSVGViewBoxTearoffTable
.
GetTearoff
(
this
)
;
if
(
!
domAnimVal
)
{
domAnimVal
=
new
SVGRect
(
this
aSVGElement
SVGRect
:
:
RectType
:
:
AnimValue
)
;
sAnimSVGViewBoxTearoffTable
.
AddTearoff
(
this
domAnimVal
)
;
}
return
domAnimVal
.
forget
(
)
;
}
UniquePtr
<
SMILAttr
>
SVGAnimatedViewBox
:
:
ToSMILAttr
(
SVGElement
*
aSVGElement
)
{
return
MakeUnique
<
SMILViewBox
>
(
this
aSVGElement
)
;
}
nsresult
SVGAnimatedViewBox
:
:
SMILViewBox
:
:
ValueFromString
(
const
nsAString
&
aStr
const
SVGAnimationElement
*
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
{
SVGViewBox
viewBox
;
nsresult
res
=
SVGViewBox
:
:
FromString
(
aStr
&
viewBox
)
;
if
(
NS_FAILED
(
res
)
)
{
return
res
;
}
SMILValue
val
(
&
SVGViewBoxSMILType
:
:
sSingleton
)
;
*
static_cast
<
SVGViewBox
*
>
(
val
.
mU
.
mPtr
)
=
viewBox
;
aValue
=
std
:
:
move
(
val
)
;
return
NS_OK
;
}
SMILValue
SVGAnimatedViewBox
:
:
SMILViewBox
:
:
GetBaseValue
(
)
const
{
SMILValue
val
(
&
SVGViewBoxSMILType
:
:
sSingleton
)
;
*
static_cast
<
SVGViewBox
*
>
(
val
.
mU
.
mPtr
)
=
mVal
-
>
mBaseVal
;
return
val
;
}
void
SVGAnimatedViewBox
:
:
SMILViewBox
:
:
ClearAnimValue
(
)
{
if
(
mVal
-
>
mAnimVal
)
{
mVal
-
>
mAnimVal
=
nullptr
;
mSVGElement
-
>
DidAnimateViewBox
(
)
;
}
}
nsresult
SVGAnimatedViewBox
:
:
SMILViewBox
:
:
SetAnimValue
(
const
SMILValue
&
aValue
)
{
NS_ASSERTION
(
aValue
.
mType
=
=
&
SVGViewBoxSMILType
:
:
sSingleton
"
Unexpected
type
to
assign
animated
value
"
)
;
if
(
aValue
.
mType
=
=
&
SVGViewBoxSMILType
:
:
sSingleton
)
{
SVGViewBox
&
vb
=
*
static_cast
<
SVGViewBox
*
>
(
aValue
.
mU
.
mPtr
)
;
mVal
-
>
SetAnimValue
(
vb
mSVGElement
)
;
}
return
NS_OK
;
}
}
