#
ifndef
DOM_SVG_SVGFILTERS_H_
#
define
DOM_SVG_SVGFILTERS_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
FilterDescription
.
h
"
#
include
"
nsImageLoadingContent
.
h
"
#
include
"
SVGAnimatedLength
.
h
"
#
include
"
SVGAnimatedNumber
.
h
"
#
include
"
SVGAnimatedNumberPair
.
h
"
#
include
"
SVGAnimatedString
.
h
"
namespace
mozilla
{
class
SVGFilterInstance
;
namespace
dom
{
struct
SVGStringInfo
{
SVGStringInfo
(
const
SVGAnimatedString
*
aString
SVGElement
*
aElement
)
:
mString
(
aString
)
mElement
(
aElement
)
{
}
const
SVGAnimatedString
*
mString
;
SVGElement
*
mElement
;
}
;
using
SVGFilterPrimitiveElementBase
=
SVGElement
;
class
SVGFilterPrimitiveElement
:
public
SVGFilterPrimitiveElementBase
{
friend
class
mozilla
:
:
SVGFilterInstance
;
protected
:
using
SourceSurface
=
mozilla
:
:
gfx
:
:
SourceSurface
;
using
Size
=
mozilla
:
:
gfx
:
:
Size
;
using
IntRect
=
mozilla
:
:
gfx
:
:
IntRect
;
using
ColorSpace
=
mozilla
:
:
gfx
:
:
ColorSpace
;
using
FilterPrimitiveDescription
=
mozilla
:
:
gfx
:
:
FilterPrimitiveDescription
;
explicit
SVGFilterPrimitiveElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFilterPrimitiveElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
~
SVGFilterPrimitiveElement
(
)
=
default
;
public
:
using
PrimitiveAttributes
=
mozilla
:
:
gfx
:
:
PrimitiveAttributes
;
NS_IMPL_FROMNODE_HELPER
(
SVGFilterPrimitiveElement
IsSVGFilterPrimitiveElement
(
)
)
ColorSpace
GetInputColorSpace
(
int32_t
aInputIndex
ColorSpace
aUnchangedInputColorSpace
)
{
return
OperatesOnSRGB
(
aInputIndex
aUnchangedInputColorSpace
=
=
ColorSpace
:
:
SRGB
)
?
ColorSpace
:
:
SRGB
:
ColorSpace
:
:
LinearRGB
;
}
ColorSpace
GetOutputColorSpace
(
)
{
return
ProducesSRGB
(
)
?
ColorSpace
:
:
SRGB
:
ColorSpace
:
:
LinearRGB
;
}
virtual
bool
SubregionIsUnionOfRegions
(
)
{
return
true
;
}
bool
IsSVGFilterPrimitiveElement
(
)
const
final
{
return
true
;
}
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
=
0
;
bool
HasValidDimensions
(
)
const
override
;
virtual
SVGAnimatedString
&
GetResultImageName
(
)
=
0
;
virtual
void
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
;
virtual
FilterPrimitiveDescription
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
=
0
;
virtual
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
;
virtual
bool
OutputIsTainted
(
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsIPrincipal
*
aReferencePrincipal
)
;
static
nsIntRect
GetMaxRect
(
)
{
return
nsIntRect
(
INT32_MIN
/
2
INT32_MIN
/
2
INT32_MAX
INT32_MAX
)
;
}
operator
nsISupports
*
(
)
{
return
static_cast
<
nsIContent
*
>
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedLength
>
X
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Y
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Width
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Height
(
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Result
(
)
;
protected
:
virtual
bool
OperatesOnSRGB
(
int32_t
aInputIndex
bool
aInputIsAlreadySRGB
)
{
return
StyleIsSetToSRGB
(
)
;
}
virtual
bool
ProducesSRGB
(
)
{
return
StyleIsSetToSRGB
(
)
;
}
bool
StyleIsSetToSRGB
(
)
;
LengthAttributesInfo
GetLengthInfo
(
)
override
;
Size
GetKernelUnitLength
(
SVGFilterInstance
*
aInstance
SVGAnimatedNumberPair
*
aKernelUnitLength
)
;
enum
{
ATTR_X
ATTR_Y
ATTR_WIDTH
ATTR_HEIGHT
}
;
SVGAnimatedLength
mLengthAttributes
[
4
]
;
static
LengthInfo
sLengthInfo
[
4
]
;
}
;
using
SVGFilterPrimitiveChildElementBase
=
SVGElement
;
class
SVGFilterPrimitiveChildElement
:
public
SVGFilterPrimitiveChildElementBase
{
protected
:
explicit
SVGFilterPrimitiveChildElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFilterPrimitiveChildElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
public
:
NS_IMPL_FROMNODE_HELPER
(
SVGFilterPrimitiveChildElement
IsSVGFilterPrimitiveChildElement
(
)
)
bool
IsSVGFilterPrimitiveChildElement
(
)
const
final
{
return
true
;
}
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
=
0
;
virtual
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
=
0
;
}
;
using
SVGFELightingElementBase
=
SVGFilterPrimitiveElement
;
class
SVGFELightingElement
:
public
SVGFELightingElementBase
{
protected
:
explicit
SVGFELightingElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFELightingElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
~
SVGFELightingElement
(
)
=
default
;
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
SVGFELightingElement
SVGFELightingElementBase
)
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
SVGAnimatedString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
bool
OutputIsTainted
(
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsIPrincipal
*
aReferencePrincipal
)
override
;
void
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
override
;
protected
:
NumberAttributesInfo
GetNumberInfo
(
)
override
;
NumberPairAttributesInfo
GetNumberPairInfo
(
)
override
;
StringAttributesInfo
GetStringInfo
(
)
override
;
mozilla
:
:
gfx
:
:
LightType
ComputeLightAttributes
(
SVGFilterInstance
*
aInstance
nsTArray
<
float
>
&
aFloatAttributes
)
;
bool
AddLightingAttributes
(
mozilla
:
:
gfx
:
:
DiffuseLightingAttributes
*
aAttributes
SVGFilterInstance
*
aInstance
)
;
enum
{
SURFACE_SCALE
DIFFUSE_CONSTANT
SPECULAR_CONSTANT
SPECULAR_EXPONENT
}
;
SVGAnimatedNumber
mNumberAttributes
[
4
]
;
static
NumberInfo
sNumberInfo
[
4
]
;
enum
{
KERNEL_UNIT_LENGTH
}
;
SVGAnimatedNumberPair
mNumberPairAttributes
[
1
]
;
static
NumberPairInfo
sNumberPairInfo
[
1
]
;
enum
{
RESULT
IN1
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
using
SVGFELightElementBase
=
SVGFilterPrimitiveChildElement
;
class
SVGFELightElement
:
public
SVGFELightElementBase
{
protected
:
explicit
SVGFELightElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFELightElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
public
:
using
PrimitiveAttributes
=
gfx
:
:
PrimitiveAttributes
;
virtual
mozilla
:
:
gfx
:
:
LightType
ComputeLightAttributes
(
SVGFilterInstance
*
aInstance
nsTArray
<
float
>
&
aFloatAttributes
)
=
0
;
}
;
}
}
#
endif
