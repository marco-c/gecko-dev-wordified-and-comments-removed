#
include
"
DOMSVGNumber
.
h
"
#
include
"
DOMSVGNumberList
.
h
"
#
include
"
DOMSVGAnimatedNumberList
.
h
"
#
include
"
SVGAnimatedNumberList
.
h
"
#
include
"
SVGElement
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
SVGNumberBinding
.
h
"
#
include
"
mozilla
/
dom
/
SVGSVGElement
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
DOMSVGNumber
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
DOMSVGNumber
)
if
(
tmp
-
>
mList
)
{
tmp
-
>
mList
-
>
mItems
[
tmp
-
>
mListIndex
]
=
nullptr
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mList
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mParent
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
DOMSVGNumber
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mList
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mParent
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
DOMSVGNumber
)
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
DOMSVGNumber
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
DOMSVGNumber
Release
)
DOMSVGNumber
:
:
DOMSVGNumber
(
DOMSVGNumberList
*
aList
uint8_t
aAttrEnum
uint32_t
aListIndex
bool
aIsAnimValItem
)
:
mList
(
aList
)
mParent
(
aList
)
mListIndex
(
aListIndex
)
mAttrEnum
(
aAttrEnum
)
mIsAnimValItem
(
aIsAnimValItem
)
mValue
(
0
.
0f
)
{
MOZ_ASSERT
(
aList
&
&
aAttrEnum
<
(
1
<
<
4
)
&
&
aListIndex
<
=
MaxListIndex
(
)
"
bad
arg
"
)
;
MOZ_ASSERT
(
IndexIsValid
(
)
"
Bad
index
for
DOMSVGNumber
!
"
)
;
}
DOMSVGNumber
:
:
DOMSVGNumber
(
nsISupports
*
aParent
)
:
mList
(
nullptr
)
mParent
(
aParent
)
mListIndex
(
0
)
mAttrEnum
(
0
)
mIsAnimValItem
(
false
)
mValue
(
0
.
0f
)
{
}
DOMSVGNumber
:
:
DOMSVGNumber
(
SVGSVGElement
*
aParent
)
:
mList
(
nullptr
)
mParent
(
ToSupports
(
aParent
)
)
mListIndex
(
0
)
mAttrEnum
(
0
)
mIsAnimValItem
(
false
)
mValue
(
0
.
0f
)
{
}
float
DOMSVGNumber
:
:
Value
(
)
{
if
(
mIsAnimValItem
&
&
HasOwner
(
)
)
{
Element
(
)
-
>
FlushAnimations
(
)
;
}
return
HasOwner
(
)
?
InternalItem
(
)
:
mValue
;
}
void
DOMSVGNumber
:
:
SetValue
(
float
aValue
ErrorResult
&
aRv
)
{
if
(
mIsAnimValItem
)
{
aRv
.
Throw
(
NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR
)
;
return
;
}
if
(
HasOwner
(
)
)
{
if
(
InternalItem
(
)
=
=
aValue
)
{
return
;
}
AutoChangeNumberListNotifier
notifier
(
this
)
;
InternalItem
(
)
=
aValue
;
return
;
}
mValue
=
aValue
;
}
void
DOMSVGNumber
:
:
InsertingIntoList
(
DOMSVGNumberList
*
aList
uint8_t
aAttrEnum
uint32_t
aListIndex
bool
aIsAnimValItem
)
{
NS_ASSERTION
(
!
HasOwner
(
)
"
Inserting
item
that
is
already
in
a
list
"
)
;
mList
=
aList
;
mAttrEnum
=
aAttrEnum
;
mListIndex
=
aListIndex
;
mIsAnimValItem
=
aIsAnimValItem
;
MOZ_ASSERT
(
IndexIsValid
(
)
"
Bad
index
for
DOMSVGNumber
!
"
)
;
}
void
DOMSVGNumber
:
:
RemovingFromList
(
)
{
mValue
=
InternalItem
(
)
;
mList
=
nullptr
;
mIsAnimValItem
=
false
;
}
float
DOMSVGNumber
:
:
ToSVGNumber
(
)
{
return
HasOwner
(
)
?
InternalItem
(
)
:
mValue
;
}
float
&
DOMSVGNumber
:
:
InternalItem
(
)
{
SVGAnimatedNumberList
*
alist
=
Element
(
)
-
>
GetAnimatedNumberList
(
mAttrEnum
)
;
return
mIsAnimValItem
&
&
alist
-
>
mAnimVal
?
(
*
alist
-
>
mAnimVal
)
[
mListIndex
]
:
alist
-
>
mBaseVal
[
mListIndex
]
;
}
#
ifdef
DEBUG
bool
DOMSVGNumber
:
:
IndexIsValid
(
)
{
SVGAnimatedNumberList
*
alist
=
Element
(
)
-
>
GetAnimatedNumberList
(
mAttrEnum
)
;
return
(
mIsAnimValItem
&
&
mListIndex
<
alist
-
>
GetAnimValue
(
)
.
Length
(
)
)
|
|
(
!
mIsAnimValItem
&
&
mListIndex
<
alist
-
>
GetBaseValue
(
)
.
Length
(
)
)
;
}
#
endif
JSObject
*
DOMSVGNumber
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGNumber_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
