#
ifndef
mozilla_dom_SVGFEDropShadowElement_h
#
define
mozilla_dom_SVGFEDropShadowElement_h
#
include
"
SVGFilters
.
h
"
#
include
"
nsSVGNumber2
.
h
"
#
include
"
SVGNumberPair
.
h
"
#
include
"
nsSVGString
.
h
"
nsresult
NS_NewSVGFEDropShadowElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGFE
SVGFEDropShadowElementBase
;
class
SVGFEDropShadowElement
:
public
SVGFEDropShadowElementBase
{
friend
nsresult
(
:
:
NS_NewSVGFEDropShadowElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
protected
:
explicit
SVGFEDropShadowElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFEDropShadowElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
virtual
FilterPrimitiveDescription
GetPrimitiveDescription
(
nsSVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
virtual
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
virtual
nsSVGString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
virtual
void
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
SVGAnimatedString
>
In1
(
)
;
already_AddRefed
<
SVGAnimatedNumber
>
Dx
(
)
;
already_AddRefed
<
SVGAnimatedNumber
>
Dy
(
)
;
already_AddRefed
<
SVGAnimatedNumber
>
StdDeviationX
(
)
;
already_AddRefed
<
SVGAnimatedNumber
>
StdDeviationY
(
)
;
void
SetStdDeviation
(
float
stdDeviationX
float
stdDeviationY
)
;
protected
:
virtual
NumberAttributesInfo
GetNumberInfo
(
)
override
;
virtual
NumberPairAttributesInfo
GetNumberPairInfo
(
)
override
;
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
enum
{
DX
DY
}
;
nsSVGNumber2
mNumberAttributes
[
2
]
;
static
NumberInfo
sNumberInfo
[
2
]
;
enum
{
STD_DEV
}
;
SVGNumberPair
mNumberPairAttributes
[
1
]
;
static
NumberPairInfo
sNumberPairInfo
[
1
]
;
enum
{
RESULT
IN1
}
;
nsSVGString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
}
#
endif
