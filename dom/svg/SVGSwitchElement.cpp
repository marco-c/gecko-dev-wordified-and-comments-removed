#
include
"
mozilla
/
dom
/
SVGSwitchElement
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
mozilla
/
SVGUtils
.
h
"
#
include
"
mozilla
/
dom
/
SVGSwitchElementBinding
.
h
"
class
nsIFrame
;
NS_IMPL_NS_NEW_SVG_ELEMENT
(
Switch
)
namespace
mozilla
:
:
dom
{
JSObject
*
SVGSwitchElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGSwitchElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
SVGSwitchElement
SVGSwitchElementBase
mActiveChild
)
NS_IMPL_ADDREF_INHERITED
(
SVGSwitchElement
SVGSwitchElementBase
)
NS_IMPL_RELEASE_INHERITED
(
SVGSwitchElement
SVGSwitchElementBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
SVGSwitchElement
)
NS_INTERFACE_MAP_END_INHERITING
(
SVGSwitchElementBase
)
SVGSwitchElement
:
:
SVGSwitchElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGSwitchElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
void
SVGSwitchElement
:
:
MaybeInvalidate
(
)
{
auto
*
newActiveChild
=
SVGTests
:
:
FindActiveSwitchChild
(
this
)
;
if
(
newActiveChild
=
=
mActiveChild
)
{
return
;
}
if
(
auto
*
frame
=
GetPrimaryFrame
(
)
)
{
nsLayoutUtils
:
:
PostRestyleEvent
(
this
RestyleHint
{
0
}
nsChangeHint_InvalidateRenderingObservers
)
;
SVGUtils
:
:
ScheduleReflowSVG
(
frame
)
;
}
mActiveChild
=
newActiveChild
;
}
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGSwitchElement
)
void
SVGSwitchElement
:
:
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
ErrorResult
&
aRv
)
{
SVGSwitchElementBase
:
:
InsertChildBefore
(
aKid
aBeforeThis
aNotify
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
MaybeInvalidate
(
)
;
}
void
SVGSwitchElement
:
:
RemoveChildNode
(
nsIContent
*
aKid
bool
aNotify
const
BatchRemovalState
*
aState
)
{
SVGSwitchElementBase
:
:
RemoveChildNode
(
aKid
aNotify
aState
)
;
MaybeInvalidate
(
)
;
}
}
