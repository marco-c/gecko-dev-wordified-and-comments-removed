#
include
"
SVGStringList
.
h
"
#
include
"
SVGContentUtils
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWhitespaceTokenizer
.
h
"
namespace
mozilla
{
nsresult
SVGStringList
:
:
CopyFrom
(
const
SVGStringList
&
rhs
)
{
if
(
!
mStrings
.
Assign
(
rhs
.
mStrings
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
mIsSet
=
true
;
return
NS_OK
;
}
void
SVGStringList
:
:
GetValue
(
nsAString
&
aValue
)
const
{
aValue
=
StringJoin
(
mIsCommaSeparated
?
u
"
"
_ns
:
u
"
"
_ns
mStrings
)
;
}
nsresult
SVGStringList
:
:
SetValue
(
const
nsAString
&
aValue
)
{
SVGStringList
temp
;
if
(
mIsCommaSeparated
)
{
nsCharSeparatedTokenizerTemplate
<
nsContentUtils
:
:
IsHTMLWhitespace
>
tokenizer
(
aValue
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
!
temp
.
AppendItem
(
tokenizer
.
nextToken
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
if
(
tokenizer
.
separatorAfterCurrentToken
(
)
)
{
return
NS_ERROR_DOM_SYNTAX_ERR
;
}
}
else
{
nsWhitespaceTokenizerTemplate
<
nsContentUtils
:
:
IsHTMLWhitespace
>
tokenizer
(
aValue
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
!
temp
.
AppendItem
(
tokenizer
.
nextToken
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
}
return
CopyFrom
(
temp
)
;
}
}
