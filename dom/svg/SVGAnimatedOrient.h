#
ifndef
DOM_SVG_SVGANIMATEDORIENT_H_
#
define
DOM_SVG_SVGANIMATEDORIENT_H_
#
include
"
DOMSVGAnimatedEnumeration
.
h
"
#
include
"
nsError
.
h
"
#
include
"
SVGAnimatedEnumeration
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
dom
/
SVGAngleBinding
.
h
"
#
include
"
mozilla
/
dom
/
SVGMarkerElementBinding
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsISupports
;
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
DOMSVGAngle
;
class
DOMSVGAnimatedAngle
;
class
SVGAnimationElement
;
class
SVGElement
;
}
class
SVGAnimatedOrient
{
friend
class
AutoChangeOrientNotifier
;
friend
class
dom
:
:
DOMSVGAngle
;
friend
class
dom
:
:
DOMSVGAnimatedAngle
;
using
SVGElement
=
dom
:
:
SVGElement
;
public
:
void
Init
(
)
{
mAnimVal
=
mBaseVal
=
.
0f
;
mAnimType
=
mBaseType
=
dom
:
:
SVGMarkerElement_Binding
:
:
SVG_MARKER_ORIENT_ANGLE
;
mAnimValUnit
=
mBaseValUnit
=
dom
:
:
SVGAngle_Binding
:
:
SVG_ANGLETYPE_UNSPECIFIED
;
mIsAnimated
=
false
;
}
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
;
void
GetBaseValueString
(
nsAString
&
aValue
)
const
;
void
GetBaseAngleValueString
(
nsAString
&
aValue
)
const
;
void
GetAnimAngleValueString
(
nsAString
&
aValue
)
const
;
float
GetBaseValue
(
)
const
{
return
mBaseVal
*
GetDegreesPerUnit
(
mBaseValUnit
)
;
}
float
GetAnimValue
(
)
const
{
return
mAnimVal
*
GetDegreesPerUnit
(
mAnimValUnit
)
;
}
SVGEnumValue
GetAnimType
(
)
const
{
return
mAnimType
;
}
void
SetBaseValue
(
float
aValue
uint8_t
aUnit
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
;
void
SetBaseType
(
SVGEnumValue
aValue
SVGElement
*
aSVGElement
ErrorResult
&
aRv
)
;
void
SetAnimValue
(
float
aValue
uint8_t
aUnit
SVGElement
*
aSVGElement
)
;
void
SetAnimType
(
SVGEnumValue
aValue
SVGElement
*
aSVGElement
)
;
uint8_t
GetBaseValueUnit
(
)
const
{
return
mBaseValUnit
;
}
uint8_t
GetAnimValueUnit
(
)
const
{
return
mAnimValUnit
;
}
float
GetBaseValInSpecifiedUnits
(
)
const
{
return
mBaseVal
;
}
float
GetAnimValInSpecifiedUnits
(
)
const
{
return
mAnimVal
;
}
static
nsresult
ToDOMSVGAngle
(
nsISupports
*
*
aResult
)
;
already_AddRefed
<
dom
:
:
DOMSVGAnimatedAngle
>
ToDOMAnimatedAngle
(
SVGElement
*
aSVGElement
)
;
already_AddRefed
<
dom
:
:
DOMSVGAnimatedEnumeration
>
ToDOMAnimatedEnum
(
SVGElement
*
aSVGElement
)
;
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
static
bool
GetValueFromString
(
const
nsAString
&
aString
float
&
aValue
uint16_t
*
aUnitType
)
;
static
float
GetDegreesPerUnit
(
uint8_t
aUnit
)
;
private
:
float
mAnimVal
;
float
mBaseVal
;
uint8_t
mAnimType
;
uint8_t
mBaseType
;
uint8_t
mAnimValUnit
;
uint8_t
mBaseValUnit
;
bool
mIsAnimated
;
void
SetBaseValueInSpecifiedUnits
(
float
aValue
SVGElement
*
aSVGElement
)
;
nsresult
NewValueSpecifiedUnits
(
uint16_t
aUnitType
float
aValueInSpecifiedUnits
SVGElement
*
aSVGElement
)
;
nsresult
ConvertToSpecifiedUnits
(
uint16_t
aUnitType
SVGElement
*
aSVGElement
)
;
already_AddRefed
<
dom
:
:
DOMSVGAngle
>
ToDOMBaseVal
(
SVGElement
*
aSVGElement
)
;
already_AddRefed
<
dom
:
:
DOMSVGAngle
>
ToDOMAnimVal
(
SVGElement
*
aSVGElement
)
;
public
:
struct
DOMAnimatedEnum
final
:
public
dom
:
:
DOMSVGAnimatedEnumeration
{
DOMAnimatedEnum
(
SVGAnimatedOrient
*
aVal
SVGElement
*
aSVGElement
)
:
DOMSVGAnimatedEnumeration
(
aSVGElement
)
mVal
(
aVal
)
{
}
~
DOMAnimatedEnum
(
)
;
SVGAnimatedOrient
*
mVal
;
using
dom
:
:
DOMSVGAnimatedEnumeration
:
:
SetBaseVal
;
uint16_t
BaseVal
(
)
override
{
return
mVal
-
>
mBaseType
;
}
void
SetBaseVal
(
uint16_t
aBaseVal
ErrorResult
&
aRv
)
override
{
mVal
-
>
SetBaseType
(
aBaseVal
mSVGElement
aRv
)
;
}
uint16_t
AnimVal
(
)
override
{
mSVGElement
-
>
FlushAnimations
(
)
;
return
mVal
-
>
mAnimType
;
}
}
;
struct
SMILOrient
final
:
public
SMILAttr
{
public
:
SMILOrient
(
SVGAnimatedOrient
*
aOrient
SVGElement
*
aSVGElement
)
:
mOrient
(
aOrient
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedOrient
*
mOrient
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
