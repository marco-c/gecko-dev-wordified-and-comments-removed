#
ifndef
DOM_SVG_SVGANIMATEDNUMBERPAIR_H_
#
define
DOM_SVG_SVGANIMATEDNUMBERPAIR_H_
#
include
"
DOMSVGAnimatedNumber
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsMathUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGAnimationElement
;
class
SVGElement
;
}
class
SVGAnimatedNumberPair
{
public
:
friend
class
AutoChangeNumberPairNotifier
;
using
SVGElement
=
dom
:
:
SVGElement
;
enum
PairIndex
{
eFirst
eSecond
}
;
void
Init
(
uint8_t
aAttrEnum
=
0xff
float
aValue1
=
0
float
aValue2
=
0
)
{
mAnimVal
[
0
]
=
mBaseVal
[
0
]
=
aValue1
;
mAnimVal
[
1
]
=
mBaseVal
[
1
]
=
aValue2
;
mAttrEnum
=
aAttrEnum
;
mIsAnimated
=
false
;
mIsBaseSet
=
false
;
}
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
)
;
void
GetBaseValueString
(
nsAString
&
aValue
)
const
;
void
SetBaseValue
(
float
aValue
PairIndex
aPairIndex
SVGElement
*
aSVGElement
)
;
void
SetBaseValues
(
float
aValue1
float
aValue2
SVGElement
*
aSVGElement
)
;
float
GetBaseValue
(
PairIndex
aIndex
)
const
{
return
mBaseVal
[
aIndex
=
=
eFirst
?
0
:
1
]
;
}
void
SetAnimValue
(
const
float
aValue
[
2
]
SVGElement
*
aSVGElement
)
;
float
GetAnimValue
(
PairIndex
aIndex
)
const
{
return
mAnimVal
[
aIndex
=
=
eFirst
?
0
:
1
]
;
}
bool
IsExplicitlySet
(
)
const
{
return
mIsAnimated
|
|
mIsBaseSet
;
}
already_AddRefed
<
dom
:
:
DOMSVGAnimatedNumber
>
ToDOMAnimatedNumber
(
PairIndex
aIndex
SVGElement
*
aSVGElement
)
;
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
private
:
float
mAnimVal
[
2
]
;
float
mBaseVal
[
2
]
;
uint8_t
mAttrEnum
;
bool
mIsAnimated
;
bool
mIsBaseSet
;
public
:
struct
DOMAnimatedNumber
final
:
public
dom
:
:
DOMSVGAnimatedNumber
{
DOMAnimatedNumber
(
SVGAnimatedNumberPair
*
aVal
PairIndex
aIndex
SVGElement
*
aSVGElement
)
:
dom
:
:
DOMSVGAnimatedNumber
(
aSVGElement
)
mVal
(
aVal
)
mIndex
(
aIndex
)
{
}
virtual
~
DOMAnimatedNumber
(
)
;
SVGAnimatedNumberPair
*
mVal
;
PairIndex
mIndex
;
virtual
float
BaseVal
(
)
override
{
return
mVal
-
>
GetBaseValue
(
mIndex
)
;
}
virtual
void
SetBaseVal
(
float
aValue
)
override
{
MOZ_ASSERT
(
IsFinite
(
aValue
)
)
;
mVal
-
>
SetBaseValue
(
aValue
mIndex
mSVGElement
)
;
}
virtual
float
AnimVal
(
)
override
{
mSVGElement
-
>
FlushAnimations
(
)
;
return
mVal
-
>
GetAnimValue
(
mIndex
)
;
}
}
;
struct
SMILNumberPair
:
public
SMILAttr
{
public
:
SMILNumberPair
(
SVGAnimatedNumberPair
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedNumberPair
*
mVal
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
