#
ifndef
mozilla_dom_SVGTests_h
#
define
mozilla_dom_SVGTests_h
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
SVGStringList
.
h
"
class
nsAttrValue
;
class
nsAtom
;
class
nsStaticAtom
;
namespace
mozilla
{
class
DOMSVGStringList
;
#
define
MOZILLA_DOMSVGTESTS_IID
\
{
\
0x92370da8
0xda28
0x4895
{
\
0x9b
0x1b
0xe0
0x06
0x0d
0xb7
0x3f
0xc3
\
}
\
}
namespace
dom
{
class
SVGElement
;
class
SVGTests
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_DOMSVGTESTS_IID
)
SVGTests
(
)
;
friend
class
mozilla
:
:
DOMSVGStringList
;
typedef
mozilla
:
:
SVGStringList
SVGStringList
;
int32_t
GetBestLanguagePreferenceRank
(
const
nsAString
&
aAcceptLangs
)
const
;
static
const
nsString
*
const
kIgnoreSystemLanguage
;
bool
PassesConditionalProcessingTests
(
const
nsString
*
aAcceptLangs
=
nullptr
)
const
;
bool
IsConditionalProcessingAttribute
(
const
nsAtom
*
aAttribute
)
const
;
bool
ParseConditionalProcessingAttribute
(
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
;
void
UnsetAttr
(
const
nsAtom
*
aAttribute
)
;
nsStaticAtom
*
GetAttrName
(
uint8_t
aAttrEnum
)
const
;
void
GetAttrValue
(
uint8_t
aAttrEnum
nsAttrValue
&
aValue
)
const
;
void
MaybeInvalidate
(
)
;
already_AddRefed
<
DOMSVGStringList
>
RequiredExtensions
(
)
;
already_AddRefed
<
DOMSVGStringList
>
SystemLanguage
(
)
;
bool
HasExtension
(
const
nsAString
&
aExtension
)
const
;
virtual
SVGElement
*
AsSVGElement
(
)
=
0
;
const
SVGElement
*
AsSVGElement
(
)
const
{
return
const_cast
<
SVGTests
*
>
(
this
)
-
>
AsSVGElement
(
)
;
}
protected
:
virtual
~
SVGTests
(
)
=
default
;
private
:
enum
{
EXTENSIONS
LANGUAGE
}
;
SVGStringList
mStringListAttributes
[
2
]
;
static
nsStaticAtom
*
const
sStringListNames
[
2
]
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
SVGTests
MOZILLA_DOMSVGTESTS_IID
)
}
}
#
endif
