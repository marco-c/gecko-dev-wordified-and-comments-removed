#
include
"
mozilla
/
dom
/
SVGViewElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGViewElementBinding
.
h
"
NS_IMPL_NS_NEW_NAMESPACED_SVG_ELEMENT
(
View
)
namespace
mozilla
{
namespace
dom
{
using
namespace
SVGViewElement_Binding
;
JSObject
*
SVGViewElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGViewElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsSVGEnumMapping
SVGViewElement
:
:
sZoomAndPanMap
[
]
=
{
{
nsGkAtoms
:
:
disable
SVG_ZOOMANDPAN_DISABLE
}
{
nsGkAtoms
:
:
magnify
SVG_ZOOMANDPAN_MAGNIFY
}
{
nullptr
0
}
}
;
nsSVGElement
:
:
EnumInfo
SVGViewElement
:
:
sEnumInfo
[
1
]
=
{
{
nsGkAtoms
:
:
zoomAndPan
sZoomAndPanMap
SVG_ZOOMANDPAN_MAGNIFY
}
}
;
SVGViewElement
:
:
SVGViewElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGViewElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGViewElement
)
void
SVGViewElement
:
:
SetZoomAndPan
(
uint16_t
aZoomAndPan
ErrorResult
&
rv
)
{
if
(
aZoomAndPan
=
=
SVG_ZOOMANDPAN_DISABLE
|
|
aZoomAndPan
=
=
SVG_ZOOMANDPAN_MAGNIFY
)
{
mEnumAttributes
[
ZOOMANDPAN
]
.
SetBaseValue
(
aZoomAndPan
this
)
;
return
;
}
rv
.
ThrowRangeError
<
MSG_INVALID_ZOOMANDPAN_VALUE_ERROR
>
(
)
;
}
already_AddRefed
<
SVGAnimatedRect
>
SVGViewElement
:
:
ViewBox
(
)
{
return
mViewBox
.
ToSVGAnimatedRect
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedPreserveAspectRatio
>
SVGViewElement
:
:
PreserveAspectRatio
(
)
{
return
mPreserveAspectRatio
.
ToDOMAnimatedPreserveAspectRatio
(
this
)
;
}
nsSVGElement
:
:
EnumAttributesInfo
SVGViewElement
:
:
GetEnumInfo
(
)
{
return
EnumAttributesInfo
(
mEnumAttributes
sEnumInfo
ArrayLength
(
sEnumInfo
)
)
;
}
nsSVGViewBox
*
SVGViewElement
:
:
GetViewBox
(
)
{
return
&
mViewBox
;
}
SVGAnimatedPreserveAspectRatio
*
SVGViewElement
:
:
GetPreserveAspectRatio
(
)
{
return
&
mPreserveAspectRatio
;
}
}
}
