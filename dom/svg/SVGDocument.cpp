#
include
"
mozilla
/
dom
/
SVGDocument
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsICategoryManager
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsIStyleSheetService
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsIDOMSVGElement
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsSVGElement
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
using
namespace
mozilla
:
:
css
;
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
namespace
dom
{
nsresult
SVGDocument
:
:
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
)
{
if
(
aKid
-
>
IsElement
(
)
&
&
!
aKid
-
>
IsSVGElement
(
)
)
{
EnsureNonSVGUserAgentStyleSheetsLoaded
(
)
;
}
return
XMLDocument
:
:
InsertChildBefore
(
aKid
aBeforeThis
aNotify
)
;
}
nsresult
SVGDocument
:
:
InsertChildAt_Deprecated
(
nsIContent
*
aKid
uint32_t
aIndex
bool
aNotify
)
{
if
(
aKid
-
>
IsElement
(
)
&
&
!
aKid
-
>
IsSVGElement
(
)
)
{
EnsureNonSVGUserAgentStyleSheetsLoaded
(
)
;
}
return
XMLDocument
:
:
InsertChildAt_Deprecated
(
aKid
aIndex
aNotify
)
;
}
nsresult
SVGDocument
:
:
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
{
NS_ASSERTION
(
aNodeInfo
-
>
NodeInfoManager
(
)
=
=
mNodeInfoManager
"
Can
'
t
import
this
document
into
another
document
!
"
)
;
RefPtr
<
SVGDocument
>
clone
=
new
SVGDocument
(
)
;
nsresult
rv
=
CloneDocHelper
(
clone
.
get
(
)
aPreallocateChildren
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
CallQueryInterface
(
clone
.
get
(
)
aResult
)
;
}
void
SVGDocument
:
:
EnsureNonSVGUserAgentStyleSheetsLoaded
(
)
{
if
(
mHasLoadedNonSVGUserAgentStyleSheets
)
{
return
;
}
if
(
IsStaticDocument
(
)
)
{
return
;
}
mHasLoadedNonSVGUserAgentStyleSheets
=
true
;
BeginUpdate
(
UPDATE_STYLE
)
;
if
(
IsBeingUsedAsImage
(
)
)
{
nsCOMPtr
<
nsICategoryManager
>
catMan
=
do_GetService
(
NS_CATEGORYMANAGER_CONTRACTID
)
;
if
(
catMan
)
{
nsCOMPtr
<
nsISimpleEnumerator
>
sheets
;
catMan
-
>
EnumerateCategory
(
"
agent
-
style
-
sheets
"
getter_AddRefs
(
sheets
)
)
;
if
(
sheets
)
{
bool
hasMore
;
while
(
NS_SUCCEEDED
(
sheets
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
nsCOMPtr
<
nsISupports
>
sheet
;
if
(
NS_FAILED
(
sheets
-
>
GetNext
(
getter_AddRefs
(
sheet
)
)
)
)
break
;
nsCOMPtr
<
nsISupportsCString
>
icStr
=
do_QueryInterface
(
sheet
)
;
MOZ_ASSERT
(
icStr
"
category
manager
entries
must
be
nsISupportsCStrings
"
)
;
nsAutoCString
name
;
icStr
-
>
GetData
(
name
)
;
nsCString
spec
;
catMan
-
>
GetCategoryEntry
(
"
agent
-
style
-
sheets
"
name
.
get
(
)
getter_Copies
(
spec
)
)
;
mozilla
:
:
css
:
:
Loader
*
cssLoader
=
CSSLoader
(
)
;
if
(
cssLoader
-
>
GetEnabled
(
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
NS_NewURI
(
getter_AddRefs
(
uri
)
spec
)
;
if
(
uri
)
{
RefPtr
<
StyleSheet
>
sheet
;
cssLoader
-
>
LoadSheetSync
(
uri
mozilla
:
:
css
:
:
eAgentSheetFeatures
true
&
sheet
)
;
if
(
sheet
)
{
EnsureOnDemandBuiltInUASheet
(
sheet
)
;
}
}
}
}
}
}
}
auto
cache
=
nsLayoutStylesheetCache
:
:
For
(
GetStyleBackendType
(
)
)
;
StyleSheet
*
sheet
=
cache
-
>
NumberControlSheet
(
)
;
if
(
sheet
)
{
EnsureOnDemandBuiltInUASheet
(
sheet
)
;
}
EnsureOnDemandBuiltInUASheet
(
cache
-
>
FormsSheet
(
)
)
;
EnsureOnDemandBuiltInUASheet
(
cache
-
>
CounterStylesSheet
(
)
)
;
EnsureOnDemandBuiltInUASheet
(
cache
-
>
HTMLSheet
(
)
)
;
if
(
nsLayoutUtils
:
:
ShouldUseNoFramesSheet
(
this
)
)
{
EnsureOnDemandBuiltInUASheet
(
cache
-
>
NoFramesSheet
(
)
)
;
}
if
(
nsLayoutUtils
:
:
ShouldUseNoScriptSheet
(
this
)
)
{
EnsureOnDemandBuiltInUASheet
(
cache
-
>
NoScriptSheet
(
)
)
;
}
EnsureOnDemandBuiltInUASheet
(
cache
-
>
UASheet
(
)
)
;
EndUpdate
(
UPDATE_STYLE
)
;
}
}
}
nsresult
NS_NewSVGDocument
(
nsIDocument
*
*
aInstancePtrResult
)
{
RefPtr
<
SVGDocument
>
doc
=
new
SVGDocument
(
)
;
nsresult
rv
=
doc
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
doc
.
forget
(
aInstancePtrResult
)
;
return
rv
;
}
