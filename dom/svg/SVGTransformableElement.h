#
ifndef
DOM_SVG_SVGTRANSFORMABLEELEMENT_H_
#
define
DOM_SVG_SVGTRANSFORMABLEELEMENT_H_
#
include
"
gfxMatrix
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
SVGAnimatedTransformList
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
namespace
mozilla
:
:
dom
{
class
DOMSVGAnimatedTransformList
;
class
SVGGraphicsElement
;
class
SVGMatrix
;
class
SVGRect
;
struct
SVGBoundingBoxOptions
;
class
SVGTransformableElement
:
public
SVGElement
{
public
:
explicit
SVGTransformableElement
(
already_AddRefed
<
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
~
SVGTransformableElement
(
)
=
default
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
=
0
;
already_AddRefed
<
DOMSVGAnimatedTransformList
>
Transform
(
)
;
bool
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
override
;
const
gfx
:
:
Matrix
*
GetAnimateMotionTransform
(
)
const
override
;
void
SetAnimateMotionTransform
(
const
gfx
:
:
Matrix
*
aMatrix
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
SVGAnimatedTransformList
*
GetAnimatedTransformList
(
uint32_t
aFlags
=
0
)
override
;
nsStaticAtom
*
GetTransformListAttrName
(
)
const
override
{
return
nsGkAtoms
:
:
transform
;
}
bool
IsTransformable
(
)
override
{
return
true
;
}
protected
:
UniquePtr
<
SVGAnimatedTransformList
>
mTransforms
;
UniquePtr
<
gfx
:
:
Matrix
>
mAnimateMotionTransform
;
}
;
}
#
endif
