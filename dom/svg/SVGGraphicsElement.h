#
ifndef
DOM_SVG_SVGGRAPHICSELEMENT_H_
#
define
DOM_SVG_SVGGRAPHICSELEMENT_H_
#
include
"
mozilla
/
dom
/
SVGTests
.
h
"
#
include
"
mozilla
/
dom
/
SVGTransformableElement
.
h
"
namespace
mozilla
:
:
dom
{
using
SVGGraphicsElementBase
=
SVGTransformableElement
;
class
SVGGraphicsElement
:
public
SVGGraphicsElementBase
public
SVGTests
{
protected
:
explicit
SVGGraphicsElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGGraphicsElement
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_IMPL_FROMNODE_HELPER
(
SVGGraphicsElement
IsSVGGraphicsElement
(
)
)
SVGElement
*
GetNearestViewportElement
(
)
;
SVGElement
*
GetFarthestViewportElement
(
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
SVGRect
>
GetBBox
(
const
SVGBoundingBoxOptions
&
)
;
already_AddRefed
<
SVGMatrix
>
GetCTM
(
)
;
already_AddRefed
<
SVGMatrix
>
GetScreenCTM
(
)
;
bool
IsFocusableInternal
(
int32_t
*
aTabIndex
bool
aWithMouse
)
override
;
bool
IsSVGGraphicsElement
(
)
const
final
{
return
true
;
}
using
nsINode
:
:
Clone
;
SVGElement
*
AsSVGElement
(
)
final
{
return
this
;
}
protected
:
bool
IsSVGFocusable
(
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
;
template
<
typename
T
>
bool
IsInLengthInfo
(
const
nsAtom
*
aAttribute
const
T
&
aLengthInfos
)
const
{
for
(
auto
const
&
e
:
aLengthInfos
)
{
if
(
e
.
mName
=
=
aAttribute
)
{
return
true
;
}
}
return
false
;
}
}
;
}
#
endif
