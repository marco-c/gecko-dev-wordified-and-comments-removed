#
ifndef
mozilla_dom_SVGUseElement_h
#
define
mozilla_dom_SVGUseElement_h
#
include
"
mozilla
/
dom
/
FromParser
.
h
"
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
mozilla
/
dom
/
SVGGraphicsElement
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
SVGAnimatedLength
.
h
"
#
include
"
SVGAnimatedString
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIContent
;
class
nsSVGUseFrame
;
nsresult
NS_NewSVGSVGElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
;
nsresult
NS_NewSVGUseElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
struct
URLExtraData
;
namespace
dom
{
typedef
SVGGraphicsElement
SVGUseElementBase
;
class
SVGUseElement
final
:
public
SVGUseElementBase
public
nsStubMutationObserver
{
friend
class
:
:
nsSVGUseFrame
;
protected
:
friend
nsresult
(
:
:
NS_NewSVGUseElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGUseElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
virtual
~
SVGUseElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_IMPL_FROMNODE_WITH_TAG
(
SVGUseElement
kNameSpaceID_SVG
use
)
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
void
UnbindFromTree
(
bool
aNullParent
=
true
)
override
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGUseElement
SVGUseElementBase
)
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_NSIMUTATIONOBSERVER_NODEWILLBEDESTROYED
virtual
gfxMatrix
PrependLocalTransformsTo
(
const
gfxMatrix
&
aMatrix
SVGTransformTypes
aWhich
=
eAllTransforms
)
const
override
;
virtual
bool
HasValidDimensions
(
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
X
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Y
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Width
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Height
(
)
;
nsIURI
*
GetSourceDocURI
(
)
;
URLExtraData
*
GetContentURLData
(
)
const
{
return
mContentURLData
;
}
void
UpdateShadowTree
(
)
;
void
ProcessAttributeChange
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
)
;
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
final
;
protected
:
bool
IsCyclicReferenceTo
(
const
Element
&
aTarget
)
const
;
class
ElementTracker
final
:
public
IDTracker
{
public
:
explicit
ElementTracker
(
SVGUseElement
*
aOwningUseElement
)
:
mOwningUseElement
(
aOwningUseElement
)
{
}
private
:
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
IDTracker
:
:
ElementChanged
(
aFrom
aTo
)
;
if
(
aFrom
)
{
aFrom
-
>
RemoveMutationObserver
(
mOwningUseElement
)
;
}
mOwningUseElement
-
>
TriggerReclone
(
)
;
}
SVGUseElement
*
mOwningUseElement
;
}
;
nsSVGUseFrame
*
GetFrame
(
)
const
;
virtual
LengthAttributesInfo
GetLengthInfo
(
)
override
;
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
bool
OurWidthAndHeightAreUsed
(
)
const
;
void
SyncWidthOrHeight
(
nsAtom
*
aName
)
;
void
LookupHref
(
)
;
void
TriggerReclone
(
)
;
void
UnlinkSource
(
)
;
enum
{
ATTR_X
ATTR_Y
ATTR_WIDTH
ATTR_HEIGHT
}
;
SVGAnimatedLength
mLengthAttributes
[
4
]
;
static
LengthInfo
sLengthInfo
[
4
]
;
enum
{
HREF
XLINK_HREF
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
RefPtr
<
SVGUseElement
>
mOriginal
;
ElementTracker
mReferencedElementTracker
;
RefPtr
<
URLExtraData
>
mContentURLData
;
}
;
}
}
#
endif
