#
ifndef
mozilla_dom_SVGFETurbulenceElement_h
#
define
mozilla_dom_SVGFETurbulenceElement_h
#
include
"
SVGEnum
.
h
"
#
include
"
SVGFilters
.
h
"
#
include
"
nsSVGNumber2
.
h
"
#
include
"
SVGInteger
.
h
"
#
include
"
SVGString
.
h
"
nsresult
NS_NewSVGFETurbulenceElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGFE
SVGFETurbulenceElementBase
;
class
SVGFETurbulenceElement
:
public
SVGFETurbulenceElementBase
{
friend
nsresult
(
:
:
NS_NewSVGFETurbulenceElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
protected
:
explicit
SVGFETurbulenceElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFETurbulenceElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
virtual
bool
SubregionIsUnionOfRegions
(
)
override
{
return
false
;
}
virtual
FilterPrimitiveDescription
GetPrimitiveDescription
(
nsSVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
virtual
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
virtual
SVGString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
BaseFrequencyX
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
BaseFrequencyY
(
)
;
already_AddRefed
<
DOMSVGAnimatedInteger
>
NumOctaves
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
Seed
(
)
;
already_AddRefed
<
DOMSVGAnimatedEnumeration
>
StitchTiles
(
)
;
already_AddRefed
<
DOMSVGAnimatedEnumeration
>
Type
(
)
;
protected
:
virtual
NumberAttributesInfo
GetNumberInfo
(
)
override
;
virtual
NumberPairAttributesInfo
GetNumberPairInfo
(
)
override
;
virtual
IntegerAttributesInfo
GetIntegerInfo
(
)
override
;
virtual
EnumAttributesInfo
GetEnumInfo
(
)
override
;
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
enum
{
SEED
}
;
nsSVGNumber2
mNumberAttributes
[
1
]
;
static
NumberInfo
sNumberInfo
[
1
]
;
enum
{
BASE_FREQ
}
;
SVGNumberPair
mNumberPairAttributes
[
1
]
;
static
NumberPairInfo
sNumberPairInfo
[
1
]
;
enum
{
OCTAVES
}
;
SVGInteger
mIntegerAttributes
[
1
]
;
static
IntegerInfo
sIntegerInfo
[
1
]
;
enum
{
TYPE
STITCHTILES
}
;
SVGEnum
mEnumAttributes
[
2
]
;
static
SVGEnumMapping
sTypeMap
[
]
;
static
SVGEnumMapping
sStitchTilesMap
[
]
;
static
EnumInfo
sEnumInfo
[
2
]
;
enum
{
RESULT
}
;
SVGString
mStringAttributes
[
1
]
;
static
StringInfo
sStringInfo
[
1
]
;
}
;
}
}
#
endif
