#
ifndef
mozilla_dom_SVGTitleElement_h
#
define
mozilla_dom_SVGTitleElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
SVGElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
nsresult
NS_NewSVGTitleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGElement
SVGTitleElementBase
;
class
SVGTitleElement
final
:
public
SVGTitleElementBase
public
nsStubMutationObserver
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGTitleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGTitleElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGTitleElement
(
)
=
default
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
virtual
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
void
DoneAddingChildren
(
bool
aHaveNotified
)
override
;
private
:
void
SendTitleChangeEvent
(
bool
aBound
)
;
}
;
}
}
#
endif
