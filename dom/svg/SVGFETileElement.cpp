#
include
"
mozilla
/
dom
/
SVGFETileElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFETileElementBinding
.
h
"
#
include
"
mozilla
/
SVGFilterInstance
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
FETile
)
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
dom
{
JSObject
*
SVGFETileElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFETileElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
StringInfo
SVGFETileElement
:
:
sStringInfo
[
2
]
=
{
{
nsGkAtoms
:
:
result
kNameSpaceID_None
true
}
{
nsGkAtoms
:
:
in
kNameSpaceID_None
true
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFETileElement
)
already_AddRefed
<
DOMSVGAnimatedString
>
SVGFETileElement
:
:
In1
(
)
{
return
mStringAttributes
[
IN1
]
.
ToDOMAnimatedString
(
this
)
;
}
void
SVGFETileElement
:
:
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
{
aSources
.
AppendElement
(
SVGStringInfo
(
&
mStringAttributes
[
IN1
]
this
)
)
;
}
FilterPrimitiveDescription
SVGFETileElement
:
:
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
{
return
FilterPrimitiveDescription
(
AsVariant
(
TileAttributes
(
)
)
)
;
}
bool
SVGFETileElement
:
:
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
{
return
SVGFETileElementBase
:
:
AttributeAffectsRendering
(
aNameSpaceID
aAttribute
)
|
|
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
in
)
;
}
SVGElement
:
:
StringAttributesInfo
SVGFETileElement
:
:
GetStringInfo
(
)
{
return
StringAttributesInfo
(
mStringAttributes
sStringInfo
ArrayLength
(
sStringInfo
)
)
;
}
nsresult
SVGFETileElement
:
:
BindToTree
(
BindContext
&
aCtx
nsINode
&
aParent
)
{
if
(
aCtx
.
InComposedDoc
(
)
)
{
aCtx
.
OwnerDoc
(
)
.
SetUseCounter
(
eUseCounter_custom_feTile
)
;
}
return
SVGFE
:
:
BindToTree
(
aCtx
aParent
)
;
}
}
}
