#
ifndef
mozilla_dom_SVGSVGElement_h
#
define
mozilla_dom_SVGSVGElement_h
#
include
"
SVGEnum
.
h
"
#
include
"
SVGViewportElement
.
h
"
nsresult
NS_NewSVGSVGElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
;
namespace
mozilla
{
class
AutoSVGViewHandler
;
class
SMILTimeContainer
;
class
SVGFragmentIdentifier
;
class
EventChainPreVisitor
;
namespace
dom
{
class
DOMSVGAngle
;
class
DOMSVGLength
;
class
DOMSVGNumber
;
class
SVGMatrix
;
class
SVGIRect
;
class
SVGSVGElement
;
class
SVGView
{
public
:
SVGView
(
)
;
mozilla
:
:
SVGEnum
mZoomAndPan
;
SVGViewBox
mViewBox
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
nsAutoPtr
<
SVGAnimatedTransformList
>
mTransforms
;
}
;
class
DOMSVGTranslatePoint
final
:
public
nsISVGPoint
{
public
:
DOMSVGTranslatePoint
(
SVGPoint
*
aPt
SVGSVGElement
*
aElement
)
:
nsISVGPoint
(
aPt
true
)
mElement
(
aElement
)
{
}
explicit
DOMSVGTranslatePoint
(
DOMSVGTranslatePoint
*
aPt
)
:
nsISVGPoint
(
&
aPt
-
>
mPt
true
)
mElement
(
aPt
-
>
mElement
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DOMSVGTranslatePoint
nsISVGPoint
)
virtual
DOMSVGPoint
*
Copy
(
)
override
;
virtual
float
X
(
)
override
{
return
mPt
.
GetX
(
)
;
}
virtual
float
Y
(
)
override
{
return
mPt
.
GetY
(
)
;
}
virtual
void
SetX
(
float
aValue
ErrorResult
&
rv
)
override
;
virtual
void
SetY
(
float
aValue
ErrorResult
&
rv
)
override
;
virtual
already_AddRefed
<
nsISVGPoint
>
MatrixTransform
(
SVGMatrix
&
matrix
)
override
;
virtual
nsISupports
*
GetParentObject
(
)
override
;
RefPtr
<
SVGSVGElement
>
mElement
;
private
:
~
DOMSVGTranslatePoint
(
)
{
}
}
;
typedef
SVGViewportElement
SVGSVGElementBase
;
class
SVGSVGElement
final
:
public
SVGSVGElementBase
{
friend
class
:
:
nsSVGOuterSVGFrame
;
friend
class
mozilla
:
:
SVGFragmentIdentifier
;
friend
class
mozilla
:
:
AutoSVGViewHandler
;
friend
class
mozilla
:
:
AutoPreserveAspectRatioOverride
;
friend
class
mozilla
:
:
dom
:
:
SVGView
;
protected
:
SVGSVGElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
friend
nsresult
(
:
:
NS_NewSVGSVGElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
)
;
~
SVGSVGElement
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGSVGElement
SVGSVGElementBase
)
void
SetCurrentScaleTranslate
(
float
s
float
x
float
y
)
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
bool
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
DOMSVGAnimatedLength
>
X
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Y
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Width
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Height
(
)
;
bool
UseCurrentView
(
)
;
float
CurrentScale
(
)
;
void
SetCurrentScale
(
float
aCurrentScale
)
;
already_AddRefed
<
nsISVGPoint
>
CurrentTranslate
(
)
;
void
SetCurrentTranslate
(
float
x
float
y
)
;
uint32_t
SuspendRedraw
(
uint32_t
max_wait_milliseconds
)
;
void
UnsuspendRedraw
(
uint32_t
suspend_handle_id
)
;
void
UnsuspendRedrawAll
(
)
;
void
ForceRedraw
(
)
;
void
PauseAnimations
(
)
;
void
UnpauseAnimations
(
)
;
bool
AnimationsPaused
(
)
;
float
GetCurrentTimeAsFloat
(
)
;
void
SetCurrentTime
(
float
seconds
)
;
void
DeselectAll
(
)
;
already_AddRefed
<
DOMSVGNumber
>
CreateSVGNumber
(
)
;
already_AddRefed
<
DOMSVGLength
>
CreateSVGLength
(
)
;
already_AddRefed
<
DOMSVGAngle
>
CreateSVGAngle
(
)
;
already_AddRefed
<
nsISVGPoint
>
CreateSVGPoint
(
)
;
already_AddRefed
<
SVGMatrix
>
CreateSVGMatrix
(
)
;
already_AddRefed
<
SVGIRect
>
CreateSVGRect
(
)
;
already_AddRefed
<
DOMSVGTransform
>
CreateSVGTransform
(
)
;
already_AddRefed
<
DOMSVGTransform
>
CreateSVGTransformFromMatrix
(
SVGMatrix
&
matrix
)
;
using
nsINode
:
:
GetElementById
;
uint16_t
ZoomAndPan
(
)
;
void
SetZoomAndPan
(
uint16_t
aZoomAndPan
ErrorResult
&
rv
)
;
virtual
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
bool
aNullParent
)
override
;
virtual
SVGAnimatedTransformList
*
GetAnimatedTransformList
(
uint32_t
aFlags
=
0
)
override
;
bool
IsOverriddenBy
(
const
nsAString
&
aViewID
)
const
{
return
mCurrentViewID
&
&
mCurrentViewID
-
>
Equals
(
aViewID
)
;
}
SMILTimeContainer
*
GetTimedDocumentRoot
(
)
;
int32_t
GetIntrinsicWidth
(
)
;
int32_t
GetIntrinsicHeight
(
)
;
virtual
void
FlushImageTransformInvalidation
(
)
;
private
:
virtual
SVGViewElement
*
GetCurrentViewElement
(
)
const
;
virtual
SVGPreserveAspectRatio
GetPreserveAspectRatioWithOverride
(
)
const
override
;
bool
WillBeOutermostSVG
(
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
const
;
void
InvalidateTransformNotifyFrame
(
)
;
void
SetImageOverridePreserveAspectRatio
(
const
SVGPreserveAspectRatio
&
aPAR
)
;
void
ClearImageOverridePreserveAspectRatio
(
)
;
bool
SetPreserveAspectRatioProperty
(
const
SVGPreserveAspectRatio
&
aPAR
)
;
const
SVGPreserveAspectRatio
*
GetPreserveAspectRatioProperty
(
)
const
;
bool
ClearPreserveAspectRatioProperty
(
)
;
virtual
SVGPoint
GetCurrentTranslate
(
)
const
override
{
return
mCurrentTranslate
;
}
virtual
float
GetCurrentScale
(
)
const
override
{
return
mCurrentScale
;
}
virtual
const
SVGViewBox
&
GetViewBoxInternal
(
)
const
override
;
virtual
SVGAnimatedTransformList
*
GetTransformInternal
(
)
const
override
;
virtual
EnumAttributesInfo
GetEnumInfo
(
)
override
;
enum
{
ZOOMANDPAN
}
;
mozilla
:
:
SVGEnum
mEnumAttributes
[
1
]
;
static
mozilla
:
:
SVGEnumMapping
sZoomAndPanMap
[
]
;
static
EnumInfo
sEnumInfo
[
1
]
;
nsAutoPtr
<
SMILTimeContainer
>
mTimedDocumentRoot
;
SVGPoint
mCurrentTranslate
;
float
mCurrentScale
;
SVGPoint
mPreviousTranslate
;
float
mPreviousScale
;
bool
mStartAnimationOnBindToTree
;
bool
mImageNeedsTransformInvalidation
;
nsAutoPtr
<
nsString
>
mCurrentViewID
;
nsAutoPtr
<
SVGView
>
mSVGView
;
}
;
}
class
MOZ_RAII
AutoSVGTimeSetRestore
{
public
:
AutoSVGTimeSetRestore
(
dom
:
:
SVGSVGElement
*
aRootElem
float
aFrameTime
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mRootElem
(
aRootElem
)
mOriginalTime
(
mRootElem
-
>
GetCurrentTimeAsFloat
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
mRootElem
-
>
SetCurrentTime
(
aFrameTime
)
;
}
~
AutoSVGTimeSetRestore
(
)
{
mRootElem
-
>
SetCurrentTime
(
mOriginalTime
)
;
}
private
:
const
RefPtr
<
dom
:
:
SVGSVGElement
>
mRootElem
;
const
float
mOriginalTime
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoPreserveAspectRatioOverride
{
public
:
AutoPreserveAspectRatioOverride
(
const
Maybe
<
SVGImageContext
>
&
aSVGContext
dom
:
:
SVGSVGElement
*
aRootElem
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mRootElem
(
aRootElem
)
mDidOverride
(
false
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
MOZ_ASSERT
(
mRootElem
"
No
SVG
/
Symbol
node
to
manage
?
"
)
;
if
(
aSVGContext
.
isSome
(
)
&
&
aSVGContext
-
>
GetPreserveAspectRatio
(
)
.
isSome
(
)
)
{
mRootElem
-
>
SetImageOverridePreserveAspectRatio
(
*
aSVGContext
-
>
GetPreserveAspectRatio
(
)
)
;
mDidOverride
=
true
;
}
}
~
AutoPreserveAspectRatioOverride
(
)
{
if
(
mDidOverride
)
{
mRootElem
-
>
ClearImageOverridePreserveAspectRatio
(
)
;
}
}
private
:
const
RefPtr
<
dom
:
:
SVGSVGElement
>
mRootElem
;
bool
mDidOverride
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
}
#
endif
