#
ifndef
DOM_SVG_SVGSVGELEMENT_H_
#
define
DOM_SVG_SVGSVGELEMENT_H_
#
include
"
SVGAnimatedEnumeration
.
h
"
#
include
"
SVGViewportElement
.
h
"
nsresult
NS_NewSVGSVGElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
;
#
define
MOZILLA_SVGSVGELEMENT_IID
\
{
\
0x4b83982c
0xe5e9
0x4ca1
{
\
0xab
0xd4
0x14
0xd2
0x7e
0x8b
0x35
0x31
\
}
\
}
namespace
mozilla
{
class
AutoSVGViewHandler
;
class
SMILTimeContainer
;
class
SVGFragmentIdentifier
;
class
EventChainPreVisitor
;
namespace
dom
{
struct
DOMMatrix2DInit
;
class
DOMSVGAngle
;
class
DOMSVGLength
;
class
DOMSVGNumber
;
class
DOMSVGPoint
;
class
SVGMatrix
;
class
SVGRect
;
class
SVGSVGElement
;
class
SVGView
{
public
:
SVGView
(
)
;
SVGAnimatedEnumeration
mZoomAndPan
;
SVGAnimatedViewBox
mViewBox
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
UniquePtr
<
SVGAnimatedTransformList
>
mTransforms
;
}
;
using
SVGSVGElementBase
=
SVGViewportElement
;
class
SVGSVGElement
final
:
public
SVGSVGElementBase
{
friend
class
mozilla
:
:
SVGFragmentIdentifier
;
friend
class
mozilla
:
:
SVGOuterSVGFrame
;
friend
class
mozilla
:
:
AutoSVGViewHandler
;
friend
class
mozilla
:
:
AutoPreserveAspectRatioOverride
;
friend
class
mozilla
:
:
dom
:
:
SVGView
;
protected
:
SVGSVGElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
friend
nsresult
(
:
:
NS_NewSVGSVGElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
)
;
~
SVGSVGElement
(
)
=
default
;
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_SVGSVGELEMENT_IID
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGSVGElement
SVGSVGElementBase
)
MOZ_CAN_RUN_SCRIPT
void
DidChangeTranslate
(
)
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
bool
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
DOMSVGAnimatedLength
>
X
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Y
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Width
(
)
;
already_AddRefed
<
DOMSVGAnimatedLength
>
Height
(
)
;
bool
UseCurrentView
(
)
const
;
float
CurrentScale
(
)
const
;
void
SetCurrentScale
(
float
aCurrentScale
)
;
already_AddRefed
<
DOMSVGPoint
>
CurrentTranslate
(
)
;
uint32_t
SuspendRedraw
(
uint32_t
max_wait_milliseconds
)
;
void
UnsuspendRedraw
(
uint32_t
suspend_handle_id
)
;
void
UnsuspendRedrawAll
(
)
;
void
ForceRedraw
(
)
;
void
PauseAnimations
(
)
;
void
UnpauseAnimations
(
)
;
bool
AnimationsPaused
(
)
;
float
GetCurrentTimeAsFloat
(
)
;
void
SetCurrentTime
(
float
seconds
)
;
void
DeselectAll
(
)
;
already_AddRefed
<
DOMSVGNumber
>
CreateSVGNumber
(
)
;
already_AddRefed
<
DOMSVGLength
>
CreateSVGLength
(
)
;
already_AddRefed
<
DOMSVGAngle
>
CreateSVGAngle
(
)
;
already_AddRefed
<
DOMSVGPoint
>
CreateSVGPoint
(
)
;
already_AddRefed
<
SVGMatrix
>
CreateSVGMatrix
(
)
;
already_AddRefed
<
SVGRect
>
CreateSVGRect
(
)
;
already_AddRefed
<
DOMSVGTransform
>
CreateSVGTransform
(
)
;
already_AddRefed
<
DOMSVGTransform
>
CreateSVGTransformFromMatrix
(
const
DOMMatrix2DInit
&
matrix
ErrorResult
&
rv
)
;
using
nsINode
:
:
GetElementById
;
uint16_t
ZoomAndPan
(
)
const
;
void
SetZoomAndPan
(
uint16_t
aZoomAndPan
ErrorResult
&
rv
)
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
)
override
;
virtual
SVGAnimatedTransformList
*
GetAnimatedTransformList
(
uint32_t
aFlags
=
0
)
override
;
bool
IsOverriddenBy
(
const
nsAString
&
aViewID
)
const
{
return
mCurrentViewID
&
&
mCurrentViewID
-
>
Equals
(
aViewID
)
;
}
SMILTimeContainer
*
GetTimedDocumentRoot
(
)
;
const
SVGPoint
&
GetCurrentTranslate
(
)
const
{
return
mCurrentTranslate
;
}
bool
IsScaledOrTranslated
(
)
const
{
return
mCurrentTranslate
!
=
SVGPoint
(
)
|
|
mCurrentScale
!
=
1
.
0f
;
}
int32_t
GetIntrinsicWidth
(
)
;
int32_t
GetIntrinsicHeight
(
)
;
virtual
void
FlushImageTransformInvalidation
(
)
;
private
:
virtual
SVGViewElement
*
GetCurrentViewElement
(
)
const
;
virtual
SVGPreserveAspectRatio
GetPreserveAspectRatioWithOverride
(
)
const
override
;
bool
WillBeOutermostSVG
(
nsINode
&
aParent
)
const
;
void
InvalidateTransformNotifyFrame
(
)
;
void
SetImageOverridePreserveAspectRatio
(
const
SVGPreserveAspectRatio
&
aPAR
)
;
void
ClearImageOverridePreserveAspectRatio
(
)
;
bool
SetPreserveAspectRatioProperty
(
const
SVGPreserveAspectRatio
&
aPAR
)
;
const
SVGPreserveAspectRatio
*
GetPreserveAspectRatioProperty
(
)
const
;
bool
ClearPreserveAspectRatioProperty
(
)
;
virtual
const
SVGAnimatedViewBox
&
GetViewBoxInternal
(
)
const
override
;
virtual
SVGAnimatedTransformList
*
GetTransformInternal
(
)
const
override
;
virtual
EnumAttributesInfo
GetEnumInfo
(
)
override
;
enum
{
ZOOMANDPAN
}
;
SVGAnimatedEnumeration
mEnumAttributes
[
1
]
;
static
SVGEnumMapping
sZoomAndPanMap
[
]
;
static
EnumInfo
sEnumInfo
[
1
]
;
UniquePtr
<
SMILTimeContainer
>
mTimedDocumentRoot
;
SVGPoint
mCurrentTranslate
;
float
mCurrentScale
;
bool
mStartAnimationOnBindToTree
;
bool
mImageNeedsTransformInvalidation
;
UniquePtr
<
nsString
>
mCurrentViewID
;
UniquePtr
<
SVGView
>
mSVGView
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
SVGSVGElement
MOZILLA_SVGSVGELEMENT_IID
)
}
class
MOZ_RAII
AutoSVGTimeSetRestore
{
public
:
AutoSVGTimeSetRestore
(
dom
:
:
SVGSVGElement
*
aRootElem
float
aFrameTime
)
:
mRootElem
(
aRootElem
)
mOriginalTime
(
mRootElem
-
>
GetCurrentTimeAsFloat
(
)
)
{
mRootElem
-
>
SetCurrentTime
(
aFrameTime
)
;
}
~
AutoSVGTimeSetRestore
(
)
{
mRootElem
-
>
SetCurrentTime
(
mOriginalTime
)
;
}
private
:
const
RefPtr
<
dom
:
:
SVGSVGElement
>
mRootElem
;
const
float
mOriginalTime
;
}
;
class
MOZ_RAII
AutoPreserveAspectRatioOverride
{
public
:
AutoPreserveAspectRatioOverride
(
const
SVGImageContext
&
aSVGContext
dom
:
:
SVGSVGElement
*
aRootElem
)
:
mRootElem
(
aRootElem
)
mDidOverride
(
false
)
{
MOZ_ASSERT
(
mRootElem
"
No
SVG
/
Symbol
node
to
manage
?
"
)
;
if
(
aSVGContext
.
GetPreserveAspectRatio
(
)
.
isSome
(
)
)
{
mRootElem
-
>
SetImageOverridePreserveAspectRatio
(
*
aSVGContext
.
GetPreserveAspectRatio
(
)
)
;
mDidOverride
=
true
;
}
}
~
AutoPreserveAspectRatioOverride
(
)
{
if
(
mDidOverride
)
{
mRootElem
-
>
ClearImageOverridePreserveAspectRatio
(
)
;
}
}
private
:
const
RefPtr
<
dom
:
:
SVGSVGElement
>
mRootElem
;
bool
mDidOverride
;
}
;
}
#
endif
