#
include
"
mozilla
/
dom
/
SVGFEDistantLightElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEDistantLightElementBinding
.
h
"
#
include
"
mozilla
/
SVGFilterInstance
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
FEDistantLight
)
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
:
:
dom
{
JSObject
*
SVGFEDistantLightElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFEDistantLightElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
NumberInfo
SVGFEDistantLightElement
:
:
sNumberInfo
[
2
]
=
{
{
nsGkAtoms
:
:
azimuth
0
}
{
nsGkAtoms
:
:
elevation
0
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFEDistantLightElement
)
bool
SVGFEDistantLightElement
:
:
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
{
return
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
azimuth
|
|
aAttribute
=
=
nsGkAtoms
:
:
elevation
)
;
}
LightType
SVGFEDistantLightElement
:
:
ComputeLightAttributes
(
SVGFilterInstance
*
aInstance
nsTArray
<
float
>
&
aFloatAttributes
)
{
float
azimuth
elevation
;
GetAnimatedNumberValues
(
&
azimuth
&
elevation
nullptr
)
;
aFloatAttributes
.
SetLength
(
kDistantLightNumAttributes
)
;
aFloatAttributes
[
kDistantLightAzimuthIndex
]
=
azimuth
;
aFloatAttributes
[
kDistantLightElevationIndex
]
=
elevation
;
return
LightType
:
:
Distant
;
}
already_AddRefed
<
DOMSVGAnimatedNumber
>
SVGFEDistantLightElement
:
:
Azimuth
(
)
{
return
mNumberAttributes
[
AZIMUTH
]
.
ToDOMAnimatedNumber
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedNumber
>
SVGFEDistantLightElement
:
:
Elevation
(
)
{
return
mNumberAttributes
[
ELEVATION
]
.
ToDOMAnimatedNumber
(
this
)
;
}
SVGElement
:
:
NumberAttributesInfo
SVGFEDistantLightElement
:
:
GetNumberInfo
(
)
{
return
NumberAttributesInfo
(
mNumberAttributes
sNumberInfo
std
:
:
size
(
sNumberInfo
)
)
;
}
}
