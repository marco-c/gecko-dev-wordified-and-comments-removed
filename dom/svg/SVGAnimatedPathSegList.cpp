#
include
"
SVGAnimatedPathSegList
.
h
"
#
include
<
utility
>
#
include
"
SVGPathSegListSMILType
.
h
"
#
include
"
mozilla
/
SMILValue
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
nsresult
SVGAnimatedPathSegList
:
:
SetBaseValueString
(
const
nsAString
&
aValue
)
{
return
mBaseVal
.
SetValueFromString
(
NS_ConvertUTF16toUTF8
(
aValue
)
)
;
}
void
SVGAnimatedPathSegList
:
:
ClearBaseValue
(
)
{
mBaseVal
.
Clear
(
)
;
}
nsresult
SVGAnimatedPathSegList
:
:
SetAnimValue
(
const
SVGPathData
&
aNewAnimValue
SVGElement
*
aElement
)
{
if
(
!
mAnimVal
)
{
mAnimVal
=
MakeUnique
<
SVGPathData
>
(
)
;
}
*
mAnimVal
=
aNewAnimValue
;
aElement
-
>
DidAnimatePathSegList
(
)
;
return
NS_OK
;
}
void
SVGAnimatedPathSegList
:
:
ClearAnimValue
(
SVGElement
*
aElement
)
{
mAnimVal
=
nullptr
;
aElement
-
>
DidAnimatePathSegList
(
)
;
}
bool
SVGAnimatedPathSegList
:
:
IsRendered
(
)
const
{
return
mAnimVal
?
!
mAnimVal
-
>
IsEmpty
(
)
:
!
mBaseVal
.
IsEmpty
(
)
;
}
UniquePtr
<
SMILAttr
>
SVGAnimatedPathSegList
:
:
ToSMILAttr
(
SVGElement
*
aElement
)
{
return
MakeUnique
<
SMILAnimatedPathSegList
>
(
this
aElement
)
;
}
nsresult
SVGAnimatedPathSegList
:
:
SMILAnimatedPathSegList
:
:
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
{
SMILValue
val
(
SVGPathSegListSMILType
:
:
Singleton
(
)
)
;
SVGPathDataAndInfo
*
list
=
static_cast
<
SVGPathDataAndInfo
*
>
(
val
.
mU
.
mPtr
)
;
nsresult
rv
=
list
-
>
SetValueFromString
(
NS_ConvertUTF16toUTF8
(
aStr
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
list
-
>
SetElement
(
mElement
)
;
aValue
=
std
:
:
move
(
val
)
;
}
return
rv
;
}
SMILValue
SVGAnimatedPathSegList
:
:
SMILAnimatedPathSegList
:
:
GetBaseValue
(
)
const
{
SMILValue
tmp
(
SVGPathSegListSMILType
:
:
Singleton
(
)
)
;
auto
*
list
=
static_cast
<
SVGPathDataAndInfo
*
>
(
tmp
.
mU
.
mPtr
)
;
list
-
>
CopyFrom
(
mVal
-
>
mBaseVal
)
;
list
-
>
SetElement
(
mElement
)
;
return
tmp
;
}
nsresult
SVGAnimatedPathSegList
:
:
SMILAnimatedPathSegList
:
:
SetAnimValue
(
const
SMILValue
&
aValue
)
{
NS_ASSERTION
(
aValue
.
mType
=
=
SVGPathSegListSMILType
:
:
Singleton
(
)
"
Unexpected
type
to
assign
animated
value
"
)
;
if
(
aValue
.
mType
=
=
SVGPathSegListSMILType
:
:
Singleton
(
)
)
{
mVal
-
>
SetAnimValue
(
*
static_cast
<
SVGPathDataAndInfo
*
>
(
aValue
.
mU
.
mPtr
)
mElement
)
;
}
return
NS_OK
;
}
void
SVGAnimatedPathSegList
:
:
SMILAnimatedPathSegList
:
:
ClearAnimValue
(
)
{
if
(
mVal
-
>
mAnimVal
)
{
mVal
-
>
ClearAnimValue
(
mElement
)
;
}
}
size_t
SVGAnimatedPathSegList
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
total
=
mBaseVal
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
if
(
mAnimVal
)
{
mAnimVal
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
return
total
;
}
}
