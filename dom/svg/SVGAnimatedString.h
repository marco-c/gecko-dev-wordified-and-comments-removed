#
ifndef
DOM_SVG_SVGANIMATEDSTRING_H_
#
define
DOM_SVG_SVGANIMATEDSTRING_H_
#
include
"
nsError
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
SVGAnimatedClassOrString
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGElement
;
}
class
SVGAnimatedString
final
:
public
SVGAnimatedClassOrString
{
public
:
using
SVGElement
=
dom
:
:
SVGElement
;
void
Init
(
uint8_t
aAttrEnum
)
{
mAnimVal
=
nullptr
;
mAttrEnum
=
aAttrEnum
;
mIsBaseSet
=
false
;
}
void
SetBaseValue
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
override
;
void
GetBaseValue
(
nsAString
&
aValue
const
SVGElement
*
aSVGElement
)
const
override
{
aSVGElement
-
>
GetStringBaseValue
(
mAttrEnum
aValue
)
;
}
void
SetAnimValue
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
)
;
void
GetAnimValue
(
nsAString
&
aResult
const
SVGElement
*
aSVGElement
)
const
override
;
bool
IsExplicitlySet
(
)
const
{
return
!
!
mAnimVal
|
|
mIsBaseSet
;
}
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
SVGAnimatedString
(
)
=
default
;
SVGAnimatedString
&
operator
=
(
const
SVGAnimatedString
&
aOther
)
{
mAttrEnum
=
aOther
.
mAttrEnum
;
mIsBaseSet
=
aOther
.
mIsBaseSet
;
if
(
aOther
.
mAnimVal
)
{
mAnimVal
=
MakeUnique
<
nsString
>
(
*
aOther
.
mAnimVal
)
;
}
return
*
this
;
}
SVGAnimatedString
(
const
SVGAnimatedString
&
aOther
)
:
SVGAnimatedString
(
)
{
*
this
=
aOther
;
}
private
:
UniquePtr
<
nsString
>
mAnimVal
;
uint8_t
mAttrEnum
=
0
;
bool
mIsBaseSet
=
false
;
public
:
struct
SMILString
:
public
SMILAttr
{
public
:
SMILString
(
SVGAnimatedString
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedString
*
mVal
;
SVGElement
*
mSVGElement
;
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
SMILValue
GetBaseValue
(
)
const
override
;
void
ClearAnimValue
(
)
override
;
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
