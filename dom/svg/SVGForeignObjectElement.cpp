#
include
"
mozilla
/
dom
/
SVGForeignObjectElement
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
dom
/
SVGDocument
.
h
"
#
include
"
mozilla
/
dom
/
SVGForeignObjectElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
SVGLengthBinding
.
h
"
#
include
"
SVGGeometryProperty
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
ForeignObject
)
namespace
mozilla
:
:
dom
{
JSObject
*
SVGForeignObjectElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGForeignObjectElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
LengthInfo
SVGForeignObjectElement
:
:
sLengthInfo
[
4
]
=
{
{
nsGkAtoms
:
:
x
0
SVGLength_Binding
:
:
SVG_LENGTHTYPE_NUMBER
SVGContentUtils
:
:
X
}
{
nsGkAtoms
:
:
y
0
SVGLength_Binding
:
:
SVG_LENGTHTYPE_NUMBER
SVGContentUtils
:
:
Y
}
{
nsGkAtoms
:
:
width
0
SVGLength_Binding
:
:
SVG_LENGTHTYPE_NUMBER
SVGContentUtils
:
:
X
}
{
nsGkAtoms
:
:
height
0
SVGLength_Binding
:
:
SVG_LENGTHTYPE_NUMBER
SVGContentUtils
:
:
Y
}
}
;
SVGForeignObjectElement
:
:
SVGForeignObjectElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGGraphicsElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
namespace
SVGT
=
SVGGeometryProperty
:
:
Tags
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGForeignObjectElement
)
already_AddRefed
<
DOMSVGAnimatedLength
>
SVGForeignObjectElement
:
:
X
(
)
{
return
mLengthAttributes
[
ATTR_X
]
.
ToDOMAnimatedLength
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedLength
>
SVGForeignObjectElement
:
:
Y
(
)
{
return
mLengthAttributes
[
ATTR_Y
]
.
ToDOMAnimatedLength
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedLength
>
SVGForeignObjectElement
:
:
Width
(
)
{
return
mLengthAttributes
[
ATTR_WIDTH
]
.
ToDOMAnimatedLength
(
this
)
;
}
already_AddRefed
<
DOMSVGAnimatedLength
>
SVGForeignObjectElement
:
:
Height
(
)
{
return
mLengthAttributes
[
ATTR_HEIGHT
]
.
ToDOMAnimatedLength
(
this
)
;
}
gfxMatrix
SVGForeignObjectElement
:
:
ChildToUserSpaceTransform
(
)
const
{
float
x
y
;
if
(
!
SVGGeometryProperty
:
:
ResolveAll
<
SVGT
:
:
X
SVGT
:
:
Y
>
(
this
&
x
&
y
)
)
{
const_cast
<
SVGForeignObjectElement
*
>
(
this
)
-
>
GetAnimatedLengthValues
(
&
x
&
y
nullptr
)
;
}
return
gfxMatrix
:
:
Translation
(
x
y
)
;
}
bool
SVGForeignObjectElement
:
:
HasValidDimensions
(
)
const
{
float
width
height
;
DebugOnly
<
bool
>
ok
=
SVGGeometryProperty
:
:
ResolveAll
<
SVGT
:
:
Width
SVGT
:
:
Height
>
(
this
&
width
&
height
)
;
MOZ_ASSERT
(
ok
"
SVGGeometryProperty
:
:
ResolveAll
failed
"
)
;
return
width
>
0
&
&
height
>
0
;
}
NS_IMETHODIMP_
(
bool
)
SVGForeignObjectElement
:
:
IsAttributeMapped
(
const
nsAtom
*
name
)
const
{
return
IsInLengthInfo
(
name
sLengthInfo
)
|
|
SVGGraphicsElement
:
:
IsAttributeMapped
(
name
)
;
}
SVGElement
:
:
LengthAttributesInfo
SVGForeignObjectElement
:
:
GetLengthInfo
(
)
{
return
LengthAttributesInfo
(
mLengthAttributes
sLengthInfo
ArrayLength
(
sLengthInfo
)
)
;
}
nsCSSPropertyID
SVGForeignObjectElement
:
:
GetCSSPropertyIdForAttrEnum
(
uint8_t
aAttrEnum
)
{
switch
(
aAttrEnum
)
{
case
ATTR_X
:
return
eCSSProperty_x
;
case
ATTR_Y
:
return
eCSSProperty_y
;
case
ATTR_WIDTH
:
return
eCSSProperty_width
;
case
ATTR_HEIGHT
:
return
eCSSProperty_height
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
attr
enum
"
)
;
return
eCSSProperty_UNKNOWN
;
}
}
}
