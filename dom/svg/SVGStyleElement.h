#
ifndef
DOM_SVG_SVGSTYLEELEMENT_H_
#
define
DOM_SVG_SVGSTYLEELEMENT_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
LinkStyle
.
h
"
#
include
"
SVGElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
nsresult
NS_NewSVGStyleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
:
:
dom
{
using
SVGStyleElementBase
=
SVGElement
;
class
SVGStyleElement
final
:
public
SVGStyleElementBase
public
nsStubMutationObserver
public
LinkStyle
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGStyleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGStyleElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGStyleElement
(
)
=
default
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGStyleElement
SVGStyleElementBase
)
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
UnbindFromTree
(
UnbindContext
&
)
override
;
virtual
void
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
bool
Disabled
(
)
const
;
void
SetDisabled
(
bool
aDisabled
)
;
void
GetMedia
(
nsAString
&
aMedia
)
;
void
SetMedia
(
const
nsAString
&
aMedia
ErrorResult
&
rv
)
;
void
GetType
(
nsAString
&
aType
)
;
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
rv
)
;
void
GetTitle
(
nsAString
&
aTitle
)
;
void
SetTitle
(
const
nsAString
&
aTitle
ErrorResult
&
rv
)
;
protected
:
inline
nsresult
Init
(
)
{
return
NS_OK
;
}
nsIContent
&
AsContent
(
)
final
{
return
*
this
;
}
const
LinkStyle
*
AsLinkStyle
(
)
const
final
{
return
this
;
}
Maybe
<
SheetInfo
>
GetStyleSheetInfo
(
)
final
;
void
ContentChanged
(
nsIContent
*
aContent
)
;
}
;
}
#
endif
