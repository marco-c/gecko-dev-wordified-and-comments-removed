#
ifndef
mozilla_dom_SVGStyleElement_h
#
define
mozilla_dom_SVGStyleElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
SVGElement
.
h
"
#
include
"
nsStyleLinkElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
nsresult
NS_NewSVGStyleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGElement
SVGStyleElementBase
;
class
SVGStyleElement
final
:
public
SVGStyleElementBase
public
nsStyleLinkElement
public
nsStubMutationObserver
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGStyleElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGStyleElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGStyleElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGStyleElement
SVGStyleElementBase
)
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
void
GetXmlspace
(
nsAString
&
aXmlspace
)
;
void
SetXmlspace
(
const
nsAString
&
aXmlspace
ErrorResult
&
rv
)
;
void
GetMedia
(
nsAString
&
aMedia
)
;
void
SetMedia
(
const
nsAString
&
aMedia
ErrorResult
&
rv
)
;
void
GetType
(
nsAString
&
aType
)
;
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
rv
)
;
void
GetTitle
(
nsAString
&
aTitle
)
;
void
SetTitle
(
const
nsAString
&
aTitle
ErrorResult
&
rv
)
;
protected
:
inline
nsresult
Init
(
)
{
return
NS_OK
;
}
Maybe
<
SheetInfo
>
GetStyleSheetInfo
(
)
final
;
void
ContentChanged
(
nsIContent
*
aContent
)
;
}
;
}
}
#
endif
