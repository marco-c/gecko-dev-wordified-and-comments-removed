#
ifndef
DOM_SVG_SVGMPATHELEMENT_H_
#
define
DOM_SVG_SVGMPATHELEMENT_H_
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
SVGAnimatedString
.
h
"
nsresult
NS_NewSVGMPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
:
:
dom
{
class
SVGGeometryElement
;
using
SVGMPathElementBase
=
SVGElement
;
class
SVGMPathElement
final
:
public
SVGMPathElementBase
public
nsStubMutationObserver
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGMPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGMPathElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGMPathElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGMPathElement
SVGMPathElementBase
)
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
UnbindFromTree
(
bool
aNullParent
)
override
;
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
SVGGeometryElement
*
GetReferencedPath
(
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
protected
:
class
PathElementTracker
final
:
public
IDTracker
{
public
:
explicit
PathElementTracker
(
SVGMPathElement
*
aMpathElement
)
:
mMpathElement
(
aMpathElement
)
{
}
protected
:
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
IDTracker
:
:
ElementChanged
(
aFrom
aTo
)
;
if
(
aFrom
)
{
aFrom
-
>
RemoveMutationObserver
(
mMpathElement
)
;
}
if
(
aTo
)
{
aTo
-
>
AddMutationObserver
(
mMpathElement
)
;
}
mMpathElement
-
>
NotifyParentOfMpathChange
(
mMpathElement
-
>
GetParent
(
)
)
;
}
bool
IsPersistent
(
)
override
{
return
true
;
}
private
:
SVGMPathElement
*
const
mMpathElement
;
}
;
StringAttributesInfo
GetStringInfo
(
)
override
;
void
UpdateHrefTarget
(
nsIContent
*
aParent
const
nsAString
&
aHrefStr
)
;
void
UnlinkHrefTarget
(
bool
aNotifyParent
)
;
void
NotifyParentOfMpathChange
(
nsIContent
*
aParent
)
;
enum
{
HREF
XLINK_HREF
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
PathElementTracker
mPathTracker
;
}
;
}
#
endif
