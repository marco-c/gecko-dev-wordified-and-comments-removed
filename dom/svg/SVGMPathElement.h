#
ifndef
DOM_SVG_SVGMPATHELEMENT_H_
#
define
DOM_SVG_SVGMPATHELEMENT_H_
#
include
"
SVGAnimatedString
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
nsresult
NS_NewSVGMPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
:
:
dom
{
class
SVGGeometryElement
;
using
SVGMPathElementBase
=
SVGElement
;
class
SVGMPathElement
final
:
public
SVGMPathElementBase
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGMPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGMPathElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGMPathElement
(
)
=
default
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGMPathElement
SVGMPathElementBase
)
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
UnbindFromTree
(
UnbindContext
&
)
override
;
void
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
SVGGeometryElement
*
GetReferencedPath
(
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
void
HrefAsString
(
nsAString
&
aHref
)
;
void
NotifyParentOfMpathChange
(
)
;
RefPtr
<
nsISupports
>
mMPathObserver
;
protected
:
StringAttributesInfo
GetStringInfo
(
)
override
;
enum
{
HREF
XLINK_HREF
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
#
endif
