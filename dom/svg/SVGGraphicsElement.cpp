#
include
"
mozilla
/
dom
/
SVGGraphicsElement
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIContentInlines
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ADDREF_INHERITED
(
SVGGraphicsElement
SVGGraphicsElementBase
)
NS_IMPL_RELEASE_INHERITED
(
SVGGraphicsElement
SVGGraphicsElementBase
)
NS_INTERFACE_MAP_BEGIN
(
SVGGraphicsElement
)
NS_INTERFACE_MAP_ENTRY
(
mozilla
:
:
dom
:
:
SVGTests
)
NS_INTERFACE_MAP_END_INHERITING
(
SVGGraphicsElementBase
)
SVGGraphicsElement
:
:
SVGGraphicsElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGGraphicsElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
bool
SVGGraphicsElement
:
:
IsSVGFocusable
(
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
{
if
(
!
IsInComposedDoc
(
)
|
|
IsInDesignMode
(
)
)
{
if
(
aTabIndex
)
{
*
aTabIndex
=
-
1
;
}
*
aIsFocusable
=
false
;
return
true
;
}
int32_t
tabIndex
=
TabIndex
(
)
;
if
(
aTabIndex
)
{
*
aTabIndex
=
tabIndex
;
}
*
aIsFocusable
=
tabIndex
>
=
0
|
|
GetTabIndexAttrValue
(
)
.
isSome
(
)
;
return
false
;
}
bool
SVGGraphicsElement
:
:
IsFocusableInternal
(
int32_t
*
aTabIndex
bool
aWithMouse
)
{
bool
isFocusable
=
false
;
IsSVGFocusable
(
&
isFocusable
aTabIndex
)
;
return
isFocusable
;
}
nsresult
SVGGraphicsElement
:
:
BindToTree
(
BindContext
&
aContext
nsINode
&
aParent
)
{
nsresult
rv
=
SVGGraphicsElementBase
:
:
BindToTree
(
aContext
aParent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
IsFocusable
(
)
&
&
HasAttr
(
nsGkAtoms
:
:
autofocus
)
&
&
aContext
.
AllowsAutoFocus
(
)
)
{
aContext
.
OwnerDoc
(
)
.
SetAutoFocusElement
(
this
)
;
}
return
NS_OK
;
}
}
}
