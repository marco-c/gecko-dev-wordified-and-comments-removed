#
ifndef
DOM_SVG_SVGFEDIFFUSELIGHTINGELEMENT_H_
#
define
DOM_SVG_SVGFEDIFFUSELIGHTINGELEMENT_H_
#
include
"
mozilla
/
dom
/
SVGFilters
.
h
"
nsresult
NS_NewSVGFEDiffuseLightingElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
using
SVGFEDiffuseLightingElementBase
=
SVGFELightingElement
;
class
SVGFEDiffuseLightingElement
:
public
SVGFEDiffuseLightingElementBase
{
friend
nsresult
(
:
:
NS_NewSVGFEDiffuseLightingElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
protected
:
explicit
SVGFEDiffuseLightingElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFEDiffuseLightingElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
virtual
FilterPrimitiveDescription
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
virtual
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
already_AddRefed
<
DOMSVGAnimatedString
>
In1
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
SurfaceScale
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
DiffuseConstant
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
KernelUnitLengthX
(
)
;
already_AddRefed
<
DOMSVGAnimatedNumber
>
KernelUnitLengthY
(
)
;
}
;
}
}
#
endif
