#
ifndef
DOM_SVG_SVGANIMATEDLENGTHLIST_H_
#
define
DOM_SVG_SVGANIMATEDLENGTHLIST_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
SVGLengthList
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGAnimationElement
;
class
SVGElement
;
}
class
SVGAnimatedLengthList
{
friend
class
dom
:
:
DOMSVGLength
;
friend
class
dom
:
:
DOMSVGLengthList
;
public
:
SVGAnimatedLengthList
(
)
=
default
;
SVGAnimatedLengthList
&
operator
=
(
const
SVGAnimatedLengthList
&
aOther
)
{
mBaseVal
=
aOther
.
mBaseVal
;
if
(
aOther
.
mAnimVal
)
{
mAnimVal
=
MakeUnique
<
SVGLengthList
>
(
*
aOther
.
mAnimVal
)
;
}
return
*
this
;
}
const
SVGLengthList
&
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
)
;
void
ClearBaseValue
(
uint32_t
aAttrEnum
)
;
const
SVGLengthList
&
GetAnimValue
(
)
const
{
return
mAnimVal
?
*
mAnimVal
:
mBaseVal
;
}
nsresult
SetAnimValue
(
const
SVGLengthList
&
aNewAnimValue
dom
:
:
SVGElement
*
aElement
uint32_t
aAttrEnum
)
;
void
ClearAnimValue
(
dom
:
:
SVGElement
*
aElement
uint32_t
aAttrEnum
)
;
bool
IsAnimating
(
)
const
{
return
!
!
mAnimVal
;
}
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
dom
:
:
SVGElement
*
aSVGElement
uint8_t
aAttrEnum
uint8_t
aAxis
bool
aCanZeroPadList
)
;
private
:
SVGLengthList
mBaseVal
;
UniquePtr
<
SVGLengthList
>
mAnimVal
;
struct
SMILAnimatedLengthList
:
public
SMILAttr
{
public
:
SMILAnimatedLengthList
(
SVGAnimatedLengthList
*
aVal
dom
:
:
SVGElement
*
aSVGElement
uint8_t
aAttrEnum
uint8_t
aAxis
bool
aCanZeroPadList
)
:
mVal
(
aVal
)
mElement
(
aSVGElement
)
mAttrEnum
(
aAttrEnum
)
mAxis
(
aAxis
)
mCanZeroPadList
(
aCanZeroPadList
)
{
}
SVGAnimatedLengthList
*
mVal
;
dom
:
:
SVGElement
*
mElement
;
uint8_t
mAttrEnum
;
uint8_t
mAxis
;
bool
mCanZeroPadList
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
