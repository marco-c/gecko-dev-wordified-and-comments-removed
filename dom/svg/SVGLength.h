#
ifndef
DOM_SVG_SVGLENGTH_H_
#
define
DOM_SVG_SVGLENGTH_H_
#
include
"
nsDebug
.
h
"
#
include
"
nsMathUtils
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
dom
/
SVGLengthBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SVGElement
;
}
class
SVGLength
{
public
:
SVGLength
(
)
:
mValue
(
0
.
0f
)
mUnit
(
dom
:
:
SVGLength_Binding
:
:
SVG_LENGTHTYPE_UNKNOWN
)
{
}
SVGLength
(
float
aValue
uint8_t
aUnit
)
:
mValue
(
aValue
)
mUnit
(
aUnit
)
{
NS_ASSERTION
(
IsValid
(
)
"
Constructed
an
invalid
length
"
)
;
}
bool
operator
=
=
(
const
SVGLength
&
rhs
)
const
{
return
mValue
=
=
rhs
.
mValue
&
&
mUnit
=
=
rhs
.
mUnit
;
}
void
GetValueAsString
(
nsAString
&
aValue
)
const
;
bool
SetValueFromString
(
const
nsAString
&
aString
)
;
float
GetValueInCurrentUnits
(
)
const
{
return
mValue
;
}
uint8_t
GetUnit
(
)
const
{
return
mUnit
;
}
void
SetValueInCurrentUnits
(
float
aValue
)
{
mValue
=
aValue
;
NS_ASSERTION
(
IsValid
(
)
"
Set
invalid
SVGLength
"
)
;
}
void
SetValueAndUnit
(
float
aValue
uint8_t
aUnit
)
{
mValue
=
aValue
;
mUnit
=
aUnit
;
NS_ASSERTION
(
IsValidUnitType
(
mUnit
)
"
Set
invalid
SVGLength
"
)
;
}
float
GetValueInUserUnits
(
const
dom
:
:
SVGElement
*
aElement
uint8_t
aAxis
)
const
{
return
mValue
*
GetUserUnitsPerUnit
(
aElement
aAxis
)
;
}
float
GetValueInSpecifiedUnit
(
uint8_t
aUnit
const
dom
:
:
SVGElement
*
aElement
uint8_t
aAxis
)
const
;
bool
IsPercentage
(
)
const
{
return
mUnit
=
=
dom
:
:
SVGLength_Binding
:
:
SVG_LENGTHTYPE_PERCENTAGE
;
}
static
bool
IsValidUnitType
(
uint16_t
unit
)
{
return
unit
>
dom
:
:
SVGLength_Binding
:
:
SVG_LENGTHTYPE_UNKNOWN
&
&
unit
<
=
dom
:
:
SVGLength_Binding
:
:
SVG_LENGTHTYPE_PC
;
}
float
GetUserUnitsPerUnit
(
const
dom
:
:
SVGElement
*
aElement
uint8_t
aAxis
)
const
;
private
:
#
ifdef
DEBUG
bool
IsValid
(
)
const
{
return
std
:
:
isfinite
(
mValue
)
&
&
IsValidUnitType
(
mUnit
)
;
}
#
endif
static
float
GetUserUnitsPerInch
(
)
{
return
96
.
0
;
}
static
float
GetUserUnitsPerPercent
(
const
dom
:
:
SVGElement
*
aElement
uint8_t
aAxis
)
;
float
mValue
;
uint8_t
mUnit
;
}
;
}
#
endif
