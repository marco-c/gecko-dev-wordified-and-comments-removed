#
ifndef
mozilla_dom_SVGTransform_h
#
define
mozilla_dom_SVGTransform_h
#
include
"
DOMSVGTransformList
.
h
"
#
include
"
gfxMatrix
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsID
.
h
"
#
include
"
SVGTransform
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
define
MOZ_SVG_LIST_INDEX_BIT_COUNT
31
/
/
supports
>
2
billion
list
items
namespace
mozilla
{
namespace
dom
{
class
SVGElement
;
class
SVGMatrix
;
class
DOMSVGTransform
final
:
public
nsWrapperCache
{
friend
class
AutoChangeTransformNotifier
;
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
DOMSVGTransform
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
DOMSVGTransform
)
DOMSVGTransform
(
DOMSVGTransformList
*
aList
uint32_t
aListIndex
bool
aIsAnimValItem
)
;
explicit
DOMSVGTransform
(
)
;
explicit
DOMSVGTransform
(
const
gfxMatrix
&
aMatrix
)
;
explicit
DOMSVGTransform
(
const
SVGTransform
&
aTransform
)
;
DOMSVGTransform
*
Clone
(
)
{
NS_ASSERTION
(
mList
"
unexpected
caller
"
)
;
return
new
DOMSVGTransform
(
InternalItem
(
)
)
;
}
bool
IsInList
(
)
const
{
return
!
!
mList
;
}
bool
HasOwner
(
)
const
{
return
!
!
mList
;
}
void
InsertingIntoList
(
DOMSVGTransformList
*
aList
uint32_t
aListIndex
bool
aIsAnimValItem
)
;
static
uint32_t
MaxListIndex
(
)
{
return
(
1U
<
<
MOZ_SVG_LIST_INDEX_BIT_COUNT
)
-
1
;
}
void
UpdateListIndex
(
uint32_t
aListIndex
)
{
mListIndex
=
aListIndex
;
}
void
RemovingFromList
(
)
;
SVGTransform
ToSVGTransform
(
)
const
{
return
Transform
(
)
;
}
DOMSVGTransformList
*
GetParentObject
(
)
const
{
return
mList
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint16_t
Type
(
)
const
;
dom
:
:
SVGMatrix
*
GetMatrix
(
)
;
float
Angle
(
)
const
;
void
SetMatrix
(
dom
:
:
SVGMatrix
&
matrix
ErrorResult
&
rv
)
;
void
SetTranslate
(
float
tx
float
ty
ErrorResult
&
rv
)
;
void
SetScale
(
float
sx
float
sy
ErrorResult
&
rv
)
;
void
SetRotate
(
float
angle
float
cx
float
cy
ErrorResult
&
rv
)
;
void
SetSkewX
(
float
angle
ErrorResult
&
rv
)
;
void
SetSkewY
(
float
angle
ErrorResult
&
rv
)
;
protected
:
~
DOMSVGTransform
(
)
;
friend
class
dom
:
:
SVGMatrix
;
bool
IsAnimVal
(
)
const
{
return
mIsAnimValItem
;
}
const
gfxMatrix
&
Matrixgfx
(
)
const
{
return
Transform
(
)
.
GetMatrix
(
)
;
}
void
SetMatrix
(
const
gfxMatrix
&
aMatrix
)
;
private
:
SVGElement
*
Element
(
)
{
return
mList
-
>
Element
(
)
;
}
SVGTransform
&
InternalItem
(
)
;
const
SVGTransform
&
InternalItem
(
)
const
;
#
ifdef
DEBUG
bool
IndexIsValid
(
)
;
#
endif
const
SVGTransform
&
Transform
(
)
const
{
return
HasOwner
(
)
?
InternalItem
(
)
:
*
mTransform
;
}
SVGTransform
&
Transform
(
)
{
return
HasOwner
(
)
?
InternalItem
(
)
:
*
mTransform
;
}
RefPtr
<
DOMSVGTransformList
>
mList
;
uint32_t
mListIndex
:
MOZ_SVG_LIST_INDEX_BIT_COUNT
;
uint32_t
mIsAnimValItem
:
1
;
nsAutoPtr
<
SVGTransform
>
mTransform
;
}
;
}
}
#
undef
MOZ_SVG_LIST_INDEX_BIT_COUNT
#
endif
