#
include
"
mozilla
/
dom
/
SVGAnimationElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGSVGElement
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsSMILTimeContainer
.
h
"
#
include
"
nsSMILAnimationController
.
h
"
#
include
"
nsSMILAnimationFunction
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ADDREF_INHERITED
(
SVGAnimationElement
SVGAnimationElementBase
)
NS_IMPL_RELEASE_INHERITED
(
SVGAnimationElement
SVGAnimationElementBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
SVGAnimationElement
)
NS_INTERFACE_MAP_ENTRY
(
mozilla
:
:
dom
:
:
SVGTests
)
NS_INTERFACE_MAP_END_INHERITING
(
SVGAnimationElementBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
SVGAnimationElement
SVGAnimationElementBase
mHrefTarget
mTimedElement
)
SVGAnimationElement
:
:
SVGAnimationElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
:
SVGAnimationElementBase
(
aNodeInfo
)
mHrefTarget
(
this
)
{
}
SVGAnimationElement
:
:
~
SVGAnimationElement
(
)
{
}
nsresult
SVGAnimationElement
:
:
Init
(
)
{
nsresult
rv
=
SVGAnimationElementBase
:
:
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mTimedElement
.
SetAnimationElement
(
this
)
;
AnimationFunction
(
)
.
SetAnimationElement
(
this
)
;
mTimedElement
.
SetTimeClient
(
&
AnimationFunction
(
)
)
;
return
NS_OK
;
}
Element
*
SVGAnimationElement
:
:
GetTargetElementContent
(
)
{
if
(
HasAttr
(
kNameSpaceID_XLink
nsGkAtoms
:
:
href
)
|
|
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
)
)
{
return
mHrefTarget
.
get
(
)
;
}
MOZ_ASSERT
(
!
mHrefTarget
.
get
(
)
"
We
shouldn
'
t
have
a
href
target
"
"
if
we
don
'
t
have
an
xlink
:
href
or
href
attribute
"
)
;
return
GetParentElement
(
)
;
}
bool
SVGAnimationElement
:
:
GetTargetAttributeName
(
int32_t
*
aNamespaceID
nsAtom
*
*
aLocalName
)
const
{
const
nsAttrValue
*
nameAttr
=
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
attributeName
)
;
if
(
!
nameAttr
)
return
false
;
NS_ASSERTION
(
nameAttr
-
>
Type
(
)
=
=
nsAttrValue
:
:
eAtom
"
attributeName
should
have
been
parsed
as
an
atom
"
)
;
return
NS_SUCCEEDED
(
nsContentUtils
:
:
SplitQName
(
this
nsDependentAtomString
(
nameAttr
-
>
GetAtomValue
(
)
)
aNamespaceID
aLocalName
)
)
;
}
nsSMILTimedElement
&
SVGAnimationElement
:
:
TimedElement
(
)
{
return
mTimedElement
;
}
nsSVGElement
*
SVGAnimationElement
:
:
GetTargetElement
(
)
{
FlushAnimations
(
)
;
nsIContent
*
target
=
GetTargetElementContent
(
)
;
return
(
target
&
&
target
-
>
IsSVGElement
(
)
)
?
static_cast
<
nsSVGElement
*
>
(
target
)
:
nullptr
;
}
float
SVGAnimationElement
:
:
GetStartTime
(
ErrorResult
&
rv
)
{
FlushAnimations
(
)
;
nsSMILTimeValue
startTime
=
mTimedElement
.
GetStartTime
(
)
;
if
(
!
startTime
.
IsDefinite
(
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
0
.
f
;
}
return
float
(
double
(
startTime
.
GetMillis
(
)
)
/
PR_MSEC_PER_SEC
)
;
}
float
SVGAnimationElement
:
:
GetCurrentTime
(
)
{
nsSMILTimeContainer
*
root
=
GetTimeContainer
(
)
;
if
(
root
)
{
return
float
(
double
(
root
-
>
GetCurrentTime
(
)
)
/
PR_MSEC_PER_SEC
)
;
}
return
0
.
0f
;
}
float
SVGAnimationElement
:
:
GetSimpleDuration
(
ErrorResult
&
rv
)
{
nsSMILTimeValue
simpleDur
=
mTimedElement
.
GetSimpleDuration
(
)
;
if
(
!
simpleDur
.
IsDefinite
(
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
0
.
f
;
}
return
float
(
double
(
simpleDur
.
GetMillis
(
)
)
/
PR_MSEC_PER_SEC
)
;
}
nsresult
SVGAnimationElement
:
:
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
{
MOZ_ASSERT
(
!
mHrefTarget
.
get
(
)
"
Shouldn
'
t
have
href
-
target
yet
(
or
it
should
'
ve
been
cleared
)
"
)
;
nsresult
rv
=
SVGAnimationElementBase
:
:
BindToTree
(
aDocument
aParent
aBindingParent
aCompileEventHandlers
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
nsIDocument
*
doc
=
GetComposedDoc
(
)
)
{
nsSMILAnimationController
*
controller
=
doc
-
>
GetAnimationController
(
)
;
if
(
controller
)
{
controller
-
>
RegisterAnimationElement
(
this
)
;
}
const
nsAttrValue
*
href
=
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
)
?
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
href
kNameSpaceID_None
)
:
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
href
kNameSpaceID_XLink
)
;
if
(
href
)
{
nsAutoString
hrefStr
;
href
-
>
ToString
(
hrefStr
)
;
UpdateHrefTarget
(
hrefStr
)
;
}
mTimedElement
.
BindToTree
(
aParent
)
;
}
AnimationNeedsResample
(
)
;
return
NS_OK
;
}
void
SVGAnimationElement
:
:
UnbindFromTree
(
bool
aDeep
bool
aNullParent
)
{
nsSMILAnimationController
*
controller
=
OwnerDoc
(
)
-
>
GetAnimationController
(
)
;
if
(
controller
)
{
controller
-
>
UnregisterAnimationElement
(
this
)
;
}
mHrefTarget
.
Unlink
(
)
;
mTimedElement
.
DissolveReferences
(
)
;
AnimationNeedsResample
(
)
;
SVGAnimationElementBase
:
:
UnbindFromTree
(
aDeep
aNullParent
)
;
}
bool
SVGAnimationElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
attributeName
)
{
aResult
.
ParseAtom
(
aValue
)
;
AnimationNeedsResample
(
)
;
return
true
;
}
nsresult
rv
=
NS_ERROR_FAILURE
;
bool
foundMatch
=
AnimationFunction
(
)
.
SetAttr
(
aAttribute
aValue
aResult
&
rv
)
;
if
(
!
foundMatch
)
{
foundMatch
=
mTimedElement
.
SetAttr
(
aAttribute
aValue
aResult
this
&
rv
)
;
}
if
(
foundMatch
)
{
AnimationNeedsResample
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReportAttributeParseFailure
(
OwnerDoc
(
)
aAttribute
aValue
)
;
return
false
;
}
return
true
;
}
}
return
SVGAnimationElementBase
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
nsresult
SVGAnimationElement
:
:
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
{
if
(
!
aValue
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
AnimationFunction
(
)
.
UnsetAttr
(
aName
)
|
|
mTimedElement
.
UnsetAttr
(
aName
)
)
{
AnimationNeedsResample
(
)
;
}
}
nsresult
rv
=
SVGAnimationElementBase
:
:
AfterSetAttr
(
aNamespaceID
aName
aValue
aOldValue
aSubjectPrincipal
aNotify
)
;
if
(
SVGTests
:
:
IsConditionalProcessingAttribute
(
aName
)
)
{
bool
isDisabled
=
!
SVGTests
:
:
PassesConditionalProcessingTests
(
)
;
if
(
mTimedElement
.
SetIsDisabled
(
isDisabled
)
)
{
AnimationNeedsResample
(
)
;
}
}
if
(
!
IsInComposedDoc
(
)
)
{
return
rv
;
}
if
(
!
(
(
aNamespaceID
=
=
kNameSpaceID_None
|
|
aNamespaceID
=
=
kNameSpaceID_XLink
)
&
&
aName
=
=
nsGkAtoms
:
:
href
)
)
{
return
rv
;
}
if
(
!
aValue
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
mHrefTarget
.
Unlink
(
)
;
AnimationTargetChanged
(
)
;
const
nsAttrValue
*
xlinkHref
=
mAttrsAndChildren
.
GetAttr
(
nsGkAtoms
:
:
href
kNameSpaceID_XLink
)
;
if
(
xlinkHref
)
{
UpdateHrefTarget
(
xlinkHref
-
>
GetStringValue
(
)
)
;
}
}
else
if
(
!
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
)
)
{
mHrefTarget
.
Unlink
(
)
;
AnimationTargetChanged
(
)
;
}
}
else
if
(
!
(
aNamespaceID
=
=
kNameSpaceID_XLink
&
&
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
)
)
)
{
MOZ_ASSERT
(
aValue
-
>
Type
(
)
=
=
nsAttrValue
:
:
eString
"
Expected
href
attribute
to
be
string
type
"
)
;
UpdateHrefTarget
(
aValue
-
>
GetStringValue
(
)
)
;
}
return
rv
;
}
bool
SVGAnimationElement
:
:
IsNodeOfType
(
uint32_t
aFlags
)
const
{
return
!
(
aFlags
&
~
eANIMATION
)
;
}
void
SVGAnimationElement
:
:
ActivateByHyperlink
(
)
{
FlushAnimations
(
)
;
nsSMILTimeValue
seekTime
=
mTimedElement
.
GetHyperlinkTime
(
)
;
if
(
seekTime
.
IsDefinite
(
)
)
{
nsSMILTimeContainer
*
timeContainer
=
GetTimeContainer
(
)
;
if
(
timeContainer
)
{
timeContainer
-
>
SetCurrentTime
(
seekTime
.
GetMillis
(
)
)
;
AnimationNeedsResample
(
)
;
FlushAnimations
(
)
;
}
}
else
{
BeginElement
(
IgnoreErrors
(
)
)
;
}
}
nsSMILTimeContainer
*
SVGAnimationElement
:
:
GetTimeContainer
(
)
{
SVGSVGElement
*
element
=
SVGContentUtils
:
:
GetOuterSVGElement
(
this
)
;
if
(
element
)
{
return
element
-
>
GetTimedDocumentRoot
(
)
;
}
return
nullptr
;
}
void
SVGAnimationElement
:
:
BeginElementAt
(
float
offset
ErrorResult
&
rv
)
{
FlushAnimations
(
)
;
rv
=
mTimedElement
.
BeginElementAt
(
offset
)
;
if
(
rv
.
Failed
(
)
)
return
;
AnimationNeedsResample
(
)
;
FlushAnimations
(
)
;
}
void
SVGAnimationElement
:
:
EndElementAt
(
float
offset
ErrorResult
&
rv
)
{
FlushAnimations
(
)
;
rv
=
mTimedElement
.
EndElementAt
(
offset
)
;
if
(
rv
.
Failed
(
)
)
return
;
AnimationNeedsResample
(
)
;
FlushAnimations
(
)
;
}
bool
SVGAnimationElement
:
:
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
{
return
nsContentUtils
:
:
IsEventAttributeName
(
aName
EventNameType_SMIL
)
;
}
void
SVGAnimationElement
:
:
UpdateHrefTarget
(
const
nsAString
&
aHrefStr
)
{
nsCOMPtr
<
nsIURI
>
targetURI
;
nsCOMPtr
<
nsIURI
>
baseURI
=
GetBaseURI
(
)
;
nsContentUtils
:
:
NewURIWithDocumentCharset
(
getter_AddRefs
(
targetURI
)
aHrefStr
OwnerDoc
(
)
baseURI
)
;
mHrefTarget
.
Reset
(
this
targetURI
)
;
AnimationTargetChanged
(
)
;
}
void
SVGAnimationElement
:
:
AnimationTargetChanged
(
)
{
mTimedElement
.
HandleTargetElementChange
(
GetTargetElementContent
(
)
)
;
AnimationNeedsResample
(
)
;
}
}
}
