#
ifndef
__NS_SVGBOOLEAN_H__
#
define
__NS_SVGBOOLEAN_H__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsISMILAttr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsAtom
;
class
nsSMILValue
;
namespace
mozilla
{
namespace
dom
{
class
SVGAnimationElement
;
class
SVGAnimatedBoolean
;
class
SVGElement
;
}
}
class
nsSVGBoolean
{
public
:
typedef
mozilla
:
:
dom
:
:
SVGElement
SVGElement
;
void
Init
(
uint8_t
aAttrEnum
=
0xff
bool
aValue
=
false
)
{
mAnimVal
=
mBaseVal
=
aValue
;
mAttrEnum
=
aAttrEnum
;
mIsAnimated
=
false
;
}
nsresult
SetBaseValueAtom
(
const
nsAtom
*
aValue
SVGElement
*
aSVGElement
)
;
nsAtom
*
GetBaseValueAtom
(
)
const
;
void
SetBaseValue
(
bool
aValue
SVGElement
*
aSVGElement
)
;
bool
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
void
SetAnimValue
(
bool
aValue
SVGElement
*
aSVGElement
)
;
bool
GetAnimValue
(
)
const
{
return
mAnimVal
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
SVGAnimatedBoolean
>
ToDOMAnimatedBoolean
(
SVGElement
*
aSVGElement
)
;
mozilla
:
:
UniquePtr
<
nsISMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
private
:
bool
mAnimVal
;
bool
mBaseVal
;
bool
mIsAnimated
;
uint8_t
mAttrEnum
;
public
:
struct
SMILBool
:
public
nsISMILAttr
{
public
:
SMILBool
(
nsSVGBoolean
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
nsSVGBoolean
*
mVal
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
mozilla
:
:
dom
:
:
SVGAnimationElement
*
aSrcElement
nsSMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
nsSMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
nsSMILValue
&
aValue
)
override
;
}
;
}
;
#
endif
