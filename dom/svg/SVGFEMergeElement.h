#
ifndef
mozilla_dom_SVGFEMergeElement_h
#
define
mozilla_dom_SVGFEMergeElement_h
#
include
"
SVGFilters
.
h
"
nsresult
NS_NewSVGFEMergeElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGFE
SVGFEMergeElementBase
;
class
SVGFEMergeElement
:
public
SVGFEMergeElementBase
{
friend
nsresult
(
:
:
NS_NewSVGFEMergeElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
protected
:
explicit
SVGFEMergeElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFEMergeElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
virtual
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
virtual
FilterPrimitiveDescription
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
virtual
SVGAnimatedString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
virtual
void
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
protected
:
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
enum
{
RESULT
}
;
SVGAnimatedString
mStringAttributes
[
1
]
;
static
StringInfo
sStringInfo
[
1
]
;
}
;
}
}
#
endif
