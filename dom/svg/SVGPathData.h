#
ifndef
DOM_SVG_SVGPATHDATA_H_
#
define
DOM_SVG_SVGPATHDATA_H_
#
include
<
string
.
h
>
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
struct
SVGMark
;
enum
class
StyleStrokeLinecap
:
uint8_t
;
namespace
dom
{
class
SVGPathElement
;
class
SVGPathSegment
;
}
class
SVGPathData
{
friend
class
SVGAnimatedPathSegList
;
friend
class
SVGPathDataAndInfo
;
friend
class
SVGPathSegListSMILType
;
using
DrawTarget
=
gfx
:
:
DrawTarget
;
using
Path
=
gfx
:
:
Path
;
using
PathBuilder
=
gfx
:
:
PathBuilder
;
using
FillRule
=
gfx
:
:
FillRule
;
using
Float
=
gfx
:
:
Float
;
using
CapStyle
=
gfx
:
:
CapStyle
;
public
:
SVGPathData
(
)
=
default
;
~
SVGPathData
(
)
=
default
;
explicit
SVGPathData
(
const
nsACString
&
aString
)
{
SetValueFromString
(
aString
)
;
}
SVGPathData
&
operator
=
(
const
SVGPathData
&
)
=
default
;
SVGPathData
(
const
SVGPathData
&
)
=
default
;
SVGPathData
&
operator
=
(
SVGPathData
&
&
)
=
default
;
SVGPathData
(
SVGPathData
&
&
)
=
default
;
bool
operator
=
=
(
const
SVGPathData
&
rhs
)
const
{
return
mData
=
=
rhs
.
mData
;
}
void
GetValueAsString
(
nsACString
&
aValue
)
const
;
Span
<
const
StylePathCommand
>
AsSpan
(
)
const
{
return
mData
.
_0
.
AsSpan
(
)
;
}
bool
IsEmpty
(
)
const
{
return
AsSpan
(
)
.
IsEmpty
(
)
;
}
const
StyleSVGPathData
&
RawData
(
)
const
{
return
mData
;
}
static
already_AddRefed
<
dom
:
:
SVGPathSegment
>
GetPathSegmentAtLength
(
dom
:
:
SVGPathElement
*
aPathElement
Span
<
const
StylePathCommand
>
aPath
float
aDistance
)
;
void
GetMarkerPositioningData
(
float
aZoom
nsTArray
<
SVGMark
>
*
aMarks
)
const
;
static
void
GetMarkerPositioningData
(
Span
<
const
StylePathCommand
>
aPath
float
aZoom
nsTArray
<
SVGMark
>
*
aMarks
)
;
bool
GetDistancesFromOriginToEndsOfVisibleSegments
(
FallibleTArray
<
double
>
*
aOutput
)
const
;
static
bool
GetDistancesFromOriginToEndsOfVisibleSegments
(
Span
<
const
StylePathCommand
>
aPath
FallibleTArray
<
double
>
*
aOutput
)
;
already_AddRefed
<
Path
>
BuildPathForMeasuring
(
float
aZoom
)
const
;
already_AddRefed
<
Path
>
BuildPath
(
PathBuilder
*
aBuilder
StyleStrokeLinecap
aStrokeLineCap
Float
aStrokeWidth
float
aZoom
)
const
;
static
already_AddRefed
<
Path
>
BuildPathForMeasuring
(
Span
<
const
StylePathCommand
>
aPath
float
aZoom
)
;
static
already_AddRefed
<
Path
>
BuildPath
(
Span
<
const
StylePathCommand
>
aPath
PathBuilder
*
aBuilder
StyleStrokeLinecap
aStrokeLineCap
Float
aStrokeWidth
const
CSSSize
&
aBasis
=
{
}
const
gfx
:
:
Point
&
aOffset
=
{
}
float
aZoomFactor
=
1
.
0
)
;
static
already_AddRefed
<
Path
>
BuildPath
(
Span
<
const
StyleShapeCommand
>
aShape
PathBuilder
*
aBuilder
StyleStrokeLinecap
aStrokeLineCap
Float
aStrokeWidth
const
CSSSize
&
aBasis
const
gfx
:
:
Point
&
aOffset
=
gfx
:
:
Point
(
)
float
aZoomFactor
=
1
.
0
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
protected
:
nsresult
SetValueFromString
(
const
nsACString
&
aValue
)
;
void
Clear
(
)
{
mData
=
{
}
;
}
StyleSVGPathData
&
RawData
(
)
{
return
mData
;
}
mozilla
:
:
StyleSVGPathData
mData
;
}
;
class
SVGPathDataAndInfo
final
:
public
SVGPathData
{
public
:
explicit
SVGPathDataAndInfo
(
dom
:
:
SVGElement
*
aElement
=
nullptr
)
:
mElement
(
do_GetWeakReference
(
static_cast
<
nsINode
*
>
(
aElement
)
)
)
{
}
void
SetElement
(
dom
:
:
SVGElement
*
aElement
)
{
mElement
=
do_GetWeakReference
(
static_cast
<
nsINode
*
>
(
aElement
)
)
;
}
dom
:
:
SVGElement
*
Element
(
)
const
{
nsCOMPtr
<
nsIContent
>
e
=
do_QueryReferent
(
mElement
)
;
return
static_cast
<
dom
:
:
SVGElement
*
>
(
e
.
get
(
)
)
;
}
void
CopyFrom
(
const
SVGPathData
&
aOther
)
{
mData
=
aOther
.
mData
;
}
void
CopyFrom
(
const
SVGPathDataAndInfo
&
aOther
)
{
CopyFrom
(
static_cast
<
const
SVGPathData
&
>
(
aOther
)
)
;
mElement
=
aOther
.
mElement
;
}
bool
IsIdentity
(
)
const
{
if
(
!
mElement
)
{
MOZ_ASSERT
(
IsEmpty
(
)
"
target
element
propagation
failure
"
)
;
return
true
;
}
return
false
;
}
private
:
nsWeakPtr
mElement
;
}
;
}
#
endif
