#
include
"
SVGAnimatedLengthList
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
SMILValue
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGLengthBinding
.
h
"
#
include
"
DOMSVGAnimatedLengthList
.
h
"
#
include
"
nsSVGAttrTearoffTable
.
h
"
#
include
"
SVGLengthListSMILType
.
h
"
namespace
mozilla
{
using
namespace
dom
;
nsresult
SVGAnimatedLengthList
:
:
SetBaseValueString
(
const
nsAString
&
aValue
)
{
SVGLengthList
newBaseValue
;
nsresult
rv
=
newBaseValue
.
SetValueFromString
(
aValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
DOMSVGAnimatedLengthList
*
domWrapper
=
DOMSVGAnimatedLengthList
:
:
GetDOMWrapperIfExists
(
this
)
;
if
(
domWrapper
)
{
domWrapper
-
>
InternalBaseValListWillChangeTo
(
newBaseValue
)
;
}
rv
=
mBaseVal
.
CopyFrom
(
newBaseValue
)
;
if
(
NS_FAILED
(
rv
)
&
&
domWrapper
)
{
domWrapper
-
>
InternalBaseValListWillChangeTo
(
mBaseVal
)
;
}
return
rv
;
}
void
SVGAnimatedLengthList
:
:
ClearBaseValue
(
uint32_t
aAttrEnum
)
{
DOMSVGAnimatedLengthList
*
domWrapper
=
DOMSVGAnimatedLengthList
:
:
GetDOMWrapperIfExists
(
this
)
;
if
(
domWrapper
)
{
domWrapper
-
>
InternalBaseValListWillChangeTo
(
SVGLengthList
(
)
)
;
}
mBaseVal
.
Clear
(
)
;
}
nsresult
SVGAnimatedLengthList
:
:
SetAnimValue
(
const
SVGLengthList
&
aNewAnimValue
SVGElement
*
aElement
uint32_t
aAttrEnum
)
{
DOMSVGAnimatedLengthList
*
domWrapper
=
DOMSVGAnimatedLengthList
:
:
GetDOMWrapperIfExists
(
this
)
;
if
(
domWrapper
)
{
domWrapper
-
>
InternalAnimValListWillChangeTo
(
aNewAnimValue
)
;
}
if
(
!
mAnimVal
)
{
mAnimVal
=
new
SVGLengthList
(
)
;
}
nsresult
rv
=
mAnimVal
-
>
CopyFrom
(
aNewAnimValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
ClearAnimValue
(
aElement
aAttrEnum
)
;
return
rv
;
}
aElement
-
>
DidAnimateLengthList
(
aAttrEnum
)
;
return
NS_OK
;
}
void
SVGAnimatedLengthList
:
:
ClearAnimValue
(
SVGElement
*
aElement
uint32_t
aAttrEnum
)
{
DOMSVGAnimatedLengthList
*
domWrapper
=
DOMSVGAnimatedLengthList
:
:
GetDOMWrapperIfExists
(
this
)
;
if
(
domWrapper
)
{
domWrapper
-
>
InternalAnimValListWillChangeTo
(
mBaseVal
)
;
}
mAnimVal
=
nullptr
;
aElement
-
>
DidAnimateLengthList
(
aAttrEnum
)
;
}
UniquePtr
<
nsISMILAttr
>
SVGAnimatedLengthList
:
:
ToSMILAttr
(
SVGElement
*
aSVGElement
uint8_t
aAttrEnum
uint8_t
aAxis
bool
aCanZeroPadList
)
{
return
MakeUnique
<
SMILAnimatedLengthList
>
(
this
aSVGElement
aAttrEnum
aAxis
aCanZeroPadList
)
;
}
nsresult
SVGAnimatedLengthList
:
:
SMILAnimatedLengthList
:
:
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
{
SMILValue
val
(
&
SVGLengthListSMILType
:
:
sSingleton
)
;
SVGLengthListAndInfo
*
llai
=
static_cast
<
SVGLengthListAndInfo
*
>
(
val
.
mU
.
mPtr
)
;
nsresult
rv
=
llai
-
>
SetValueFromString
(
aStr
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
llai
-
>
SetInfo
(
mElement
mAxis
mCanZeroPadList
)
;
aValue
=
std
:
:
move
(
val
)
;
aPreventCachingOfSandwich
=
false
;
for
(
uint32_t
i
=
0
;
i
<
llai
-
>
Length
(
)
;
+
+
i
)
{
uint8_t
unit
=
(
*
llai
)
[
i
]
.
GetUnit
(
)
;
if
(
unit
=
=
SVGLength_Binding
:
:
SVG_LENGTHTYPE_PERCENTAGE
|
|
unit
=
=
SVGLength_Binding
:
:
SVG_LENGTHTYPE_EMS
|
|
unit
=
=
SVGLength_Binding
:
:
SVG_LENGTHTYPE_EXS
)
{
aPreventCachingOfSandwich
=
true
;
break
;
}
}
}
return
rv
;
}
SMILValue
SVGAnimatedLengthList
:
:
SMILAnimatedLengthList
:
:
GetBaseValue
(
)
const
{
SMILValue
val
;
SMILValue
tmp
(
&
SVGLengthListSMILType
:
:
sSingleton
)
;
SVGLengthListAndInfo
*
llai
=
static_cast
<
SVGLengthListAndInfo
*
>
(
tmp
.
mU
.
mPtr
)
;
nsresult
rv
=
llai
-
>
CopyFrom
(
mVal
-
>
mBaseVal
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
llai
-
>
SetInfo
(
mElement
mAxis
mCanZeroPadList
)
;
val
=
std
:
:
move
(
tmp
)
;
}
return
val
;
}
nsresult
SVGAnimatedLengthList
:
:
SMILAnimatedLengthList
:
:
SetAnimValue
(
const
SMILValue
&
aValue
)
{
NS_ASSERTION
(
aValue
.
mType
=
=
&
SVGLengthListSMILType
:
:
sSingleton
"
Unexpected
type
to
assign
animated
value
"
)
;
if
(
aValue
.
mType
=
=
&
SVGLengthListSMILType
:
:
sSingleton
)
{
mVal
-
>
SetAnimValue
(
*
static_cast
<
SVGLengthListAndInfo
*
>
(
aValue
.
mU
.
mPtr
)
mElement
mAttrEnum
)
;
}
return
NS_OK
;
}
void
SVGAnimatedLengthList
:
:
SMILAnimatedLengthList
:
:
ClearAnimValue
(
)
{
if
(
mVal
-
>
mAnimVal
)
{
mVal
-
>
ClearAnimValue
(
mElement
mAttrEnum
)
;
}
}
}
