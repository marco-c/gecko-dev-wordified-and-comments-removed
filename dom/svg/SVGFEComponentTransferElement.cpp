#
include
"
mozilla
/
dom
/
SVGComponentTransferFunctionElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEComponentTransferElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFEComponentTransferElementBinding
.
h
"
#
include
"
nsSVGUtils
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
NS_IMPL_NS_NEW_SVG_ELEMENT
(
FEComponentTransfer
)
using
namespace
mozilla
:
:
gfx
;
;
namespace
mozilla
{
namespace
dom
{
JSObject
*
SVGFEComponentTransferElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFEComponentTransferElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
StringInfo
SVGFEComponentTransferElement
:
:
sStringInfo
[
2
]
=
{
{
nsGkAtoms
:
:
result
kNameSpaceID_None
true
}
{
nsGkAtoms
:
:
in
kNameSpaceID_None
true
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFEComponentTransferElement
)
already_AddRefed
<
SVGAnimatedString
>
SVGFEComponentTransferElement
:
:
In1
(
)
{
return
mStringAttributes
[
IN1
]
.
ToDOMAnimatedString
(
this
)
;
}
SVGElement
:
:
StringAttributesInfo
SVGFEComponentTransferElement
:
:
GetStringInfo
(
)
{
return
StringAttributesInfo
(
mStringAttributes
sStringInfo
ArrayLength
(
sStringInfo
)
)
;
}
FilterPrimitiveDescription
SVGFEComponentTransferElement
:
:
GetPrimitiveDescription
(
nsSVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
{
RefPtr
<
SVGComponentTransferFunctionElement
>
childForChannel
[
4
]
;
for
(
nsIContent
*
childContent
=
nsINode
:
:
GetFirstChild
(
)
;
childContent
;
childContent
=
childContent
-
>
GetNextSibling
(
)
)
{
RefPtr
<
SVGComponentTransferFunctionElement
>
child
;
CallQueryInterface
(
childContent
(
SVGComponentTransferFunctionElement
*
*
)
getter_AddRefs
(
child
)
)
;
if
(
child
)
{
childForChannel
[
child
-
>
GetChannel
(
)
]
=
child
;
}
}
ComponentTransferAttributes
atts
;
for
(
int32_t
i
=
0
;
i
<
4
;
i
+
+
)
{
if
(
childForChannel
[
i
]
)
{
childForChannel
[
i
]
-
>
ComputeAttributes
(
i
atts
)
;
}
else
{
atts
.
mTypes
[
i
]
=
(
uint8_t
)
SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY
;
}
}
return
FilterPrimitiveDescription
(
AsVariant
(
std
:
:
move
(
atts
)
)
)
;
}
bool
SVGFEComponentTransferElement
:
:
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
{
return
SVGFEComponentTransferElementBase
:
:
AttributeAffectsRendering
(
aNameSpaceID
aAttribute
)
|
|
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
in
)
;
}
void
SVGFEComponentTransferElement
:
:
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
{
aSources
.
AppendElement
(
SVGStringInfo
(
&
mStringAttributes
[
IN1
]
this
)
)
;
}
}
}
