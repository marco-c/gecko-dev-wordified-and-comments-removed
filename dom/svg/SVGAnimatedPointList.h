#
ifndef
MOZILLA_SVGANIMATEDPOINTLIST_H__
#
define
MOZILLA_SVGANIMATEDPOINTLIST_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsISMILAttr
.
h
"
#
include
"
SVGPointList
.
h
"
class
nsSMILValue
;
namespace
mozilla
{
namespace
dom
{
class
SVGAnimationElement
;
class
SVGElement
;
}
class
SVGAnimatedPointList
{
friend
class
DOMSVGPoint
;
friend
class
DOMSVGPointList
;
public
:
SVGAnimatedPointList
(
)
{
}
const
SVGPointList
&
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
)
;
void
ClearBaseValue
(
)
;
const
SVGPointList
&
GetAnimValue
(
)
const
{
return
mAnimVal
?
*
mAnimVal
:
mBaseVal
;
}
nsresult
SetAnimValue
(
const
SVGPointList
&
aValue
dom
:
:
SVGElement
*
aElement
)
;
void
ClearAnimValue
(
dom
:
:
SVGElement
*
aElement
)
;
void
*
GetBaseValKey
(
)
const
{
return
(
void
*
)
&
mBaseVal
;
}
void
*
GetAnimValKey
(
)
const
{
return
(
void
*
)
&
mAnimVal
;
}
bool
IsAnimating
(
)
const
{
return
!
!
mAnimVal
;
}
UniquePtr
<
nsISMILAttr
>
ToSMILAttr
(
dom
:
:
SVGElement
*
aElement
)
;
private
:
SVGPointList
mBaseVal
;
nsAutoPtr
<
SVGPointList
>
mAnimVal
;
struct
SMILAnimatedPointList
:
public
nsISMILAttr
{
public
:
SMILAnimatedPointList
(
SVGAnimatedPointList
*
aVal
dom
:
:
SVGElement
*
aElement
)
:
mVal
(
aVal
)
mElement
(
aElement
)
{
}
SVGAnimatedPointList
*
mVal
;
dom
:
:
SVGElement
*
mElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
nsSMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
nsSMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
nsSMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
