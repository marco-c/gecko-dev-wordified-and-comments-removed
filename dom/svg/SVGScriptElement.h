#
ifndef
mozilla_dom_SVGScriptElement_h
#
define
mozilla_dom_SVGScriptElement_h
#
include
"
SVGElement
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsSVGString
.
h
"
#
include
"
mozilla
/
dom
/
ScriptElement
.
h
"
class
nsIDocument
;
nsresult
NS_NewSVGScriptElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
;
namespace
mozilla
{
namespace
dom
{
typedef
SVGElement
SVGScriptElementBase
;
class
SVGScriptElement
final
:
public
SVGScriptElementBase
public
ScriptElement
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGScriptElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
)
;
SVGScriptElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
bool
GetScriptType
(
nsAString
&
type
)
override
;
virtual
void
GetScriptText
(
nsAString
&
text
)
override
;
virtual
void
GetScriptCharset
(
nsAString
&
charset
)
override
;
virtual
void
FreezeExecutionAttrs
(
nsIDocument
*
aOwnerDoc
)
override
;
virtual
CORSMode
GetCORSMode
(
)
const
override
;
virtual
bool
HasScriptContent
(
)
override
;
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
GetType
(
nsAString
&
aType
)
;
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
rv
)
;
void
GetCrossOrigin
(
nsAString
&
aCrossOrigin
)
;
void
SetCrossOrigin
(
const
nsAString
&
aCrossOrigin
ErrorResult
&
aError
)
;
already_AddRefed
<
SVGAnimatedString
>
Href
(
)
;
protected
:
~
SVGScriptElement
(
)
;
virtual
StringAttributesInfo
GetStringInfo
(
)
override
;
virtual
bool
GetAsyncState
(
)
override
{
return
false
;
}
enum
{
HREF
XLINK_HREF
}
;
nsSVGString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
}
#
endif
