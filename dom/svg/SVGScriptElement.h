#
ifndef
DOM_SVG_SVGSCRIPTELEMENT_H_
#
define
DOM_SVG_SVGSCRIPTELEMENT_H_
#
include
"
SVGAnimatedString
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
dom
/
ScriptElement
.
h
"
nsresult
NS_NewSVGScriptElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
;
namespace
mozilla
:
:
dom
{
using
SVGScriptElementBase
=
SVGElement
;
class
SVGScriptElement
final
:
public
SVGScriptElementBase
public
ScriptElement
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGScriptElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
)
;
SVGScriptElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_DECL_ISUPPORTS_INHERITED
void
GetScriptText
(
nsAString
&
text
)
const
override
;
void
GetScriptCharset
(
nsAString
&
charset
)
override
;
void
FreezeExecutionAttrs
(
const
Document
*
aOwnerDoc
)
override
;
CORSMode
GetCORSMode
(
)
const
override
;
FetchPriority
GetFetchPriority
(
)
const
override
;
bool
HasExternalScriptContent
(
)
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
GetType
(
nsAString
&
aType
)
;
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
rv
)
;
bool
Async
(
)
{
return
mForceAsync
|
|
GetBoolAttr
(
nsGkAtoms
:
:
async
)
;
}
void
SetAsync
(
bool
aValue
)
{
mForceAsync
=
false
;
SetBoolAttr
(
nsGkAtoms
:
:
async
aValue
)
;
}
bool
Defer
(
)
{
return
GetBoolAttr
(
nsGkAtoms
:
:
defer
)
;
}
void
SetDefer
(
bool
aDefer
)
{
SetBoolAttr
(
nsGkAtoms
:
:
defer
aDefer
)
;
}
void
GetCrossOrigin
(
nsAString
&
aCrossOrigin
)
;
void
SetCrossOrigin
(
const
nsAString
&
aCrossOrigin
ErrorResult
&
aError
)
;
already_AddRefed
<
DOMSVGAnimatedString
>
Href
(
)
;
void
GetFetchPriority
(
nsAString
&
aFetchPriority
)
const
;
void
SetFetchPriority
(
const
nsAString
&
aFetchPriority
)
{
SetAttr
(
nsGkAtoms
:
:
fetchpriority
aFetchPriority
IgnoreErrors
(
)
)
;
}
protected
:
~
SVGScriptElement
(
)
=
default
;
StringAttributesInfo
GetStringInfo
(
)
override
;
bool
GetAsyncState
(
)
override
{
return
Async
(
)
;
}
nsIContent
*
GetAsContent
(
)
override
{
return
this
;
}
enum
{
HREF
XLINK_HREF
}
;
SVGAnimatedScriptHrefString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
#
endif
