#
ifndef
DOM_SVG_SVGANIMATIONELEMENT_H_
#
define
DOM_SVG_SVGANIMATIONELEMENT_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILTimedElement
.
h
"
#
include
"
mozilla
/
dom
/
IDTracker
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGTests
.
h
"
#
define
MOZILLA_SVGANIMATIONELEMENT_IID
\
{
\
0xf80ef85f
0xef48
0x401a
{
\
0x8a
0xed
0x16
0x52
0x31
0x23
0x26
0xb0
\
}
\
}
namespace
mozilla
{
namespace
dom
{
using
SVGAnimationElementBase
=
SVGElement
;
class
SVGAnimationElement
:
public
SVGAnimationElementBase
public
SVGTests
{
protected
:
explicit
SVGAnimationElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
nsresult
Init
(
)
;
virtual
~
SVGAnimationElement
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECLARE_STATIC_IID_ACCESSOR
(
MOZILLA_SVGANIMATIONELEMENT_IID
)
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGAnimationElement
SVGAnimationElementBase
)
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
=
0
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
Element
*
GetTargetElementContent
(
)
;
virtual
bool
GetTargetAttributeName
(
int32_t
*
aNamespaceID
nsAtom
*
*
aLocalName
)
const
;
mozilla
:
:
SMILTimedElement
&
TimedElement
(
)
;
mozilla
:
:
SMILTimeContainer
*
GetTimeContainer
(
)
;
virtual
SMILAnimationFunction
&
AnimationFunction
(
)
=
0
;
virtual
bool
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
override
;
void
ActivateByHyperlink
(
)
;
SVGElement
*
GetTargetElement
(
)
;
float
GetStartTime
(
ErrorResult
&
rv
)
;
float
GetCurrentTimeAsFloat
(
)
;
float
GetSimpleDuration
(
ErrorResult
&
rv
)
;
void
BeginElement
(
ErrorResult
&
rv
)
{
BeginElementAt
(
0
.
f
rv
)
;
}
void
BeginElementAt
(
float
offset
ErrorResult
&
rv
)
;
void
EndElement
(
ErrorResult
&
rv
)
{
EndElementAt
(
0
.
f
rv
)
;
}
void
EndElementAt
(
float
offset
ErrorResult
&
rv
)
;
SVGElement
*
AsSVGElement
(
)
final
{
return
this
;
}
protected
:
void
UpdateHrefTarget
(
const
nsAString
&
aHrefStr
)
;
void
AnimationTargetChanged
(
)
;
class
HrefTargetTracker
final
:
public
IDTracker
{
public
:
explicit
HrefTargetTracker
(
SVGAnimationElement
*
aAnimationElement
)
:
mAnimationElement
(
aAnimationElement
)
{
}
protected
:
virtual
void
ElementChanged
(
Element
*
aFrom
Element
*
aTo
)
override
{
IDTracker
:
:
ElementChanged
(
aFrom
aTo
)
;
mAnimationElement
-
>
AnimationTargetChanged
(
)
;
}
virtual
bool
IsPersistent
(
)
override
{
return
true
;
}
private
:
SVGAnimationElement
*
const
mAnimationElement
;
}
;
HrefTargetTracker
mHrefTarget
;
mozilla
:
:
SMILTimedElement
mTimedElement
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
SVGAnimationElement
MOZILLA_SVGANIMATIONELEMENT_IID
)
}
}
#
endif
