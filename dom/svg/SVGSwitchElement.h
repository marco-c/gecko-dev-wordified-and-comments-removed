#
ifndef
DOM_SVG_SVGSWITCHELEMENT_H_
#
define
DOM_SVG_SVGSWITCHELEMENT_H_
#
include
"
mozilla
/
dom
/
SVGGraphicsElement
.
h
"
#
include
"
nsCOMPtr
.
h
"
nsresult
NS_NewSVGSwitchElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
using
SVGSwitchElementBase
=
SVGGraphicsElement
;
class
SVGSwitchElement
final
:
public
SVGSwitchElementBase
{
protected
:
friend
nsresult
(
:
:
NS_NewSVGSwitchElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
explicit
SVGSwitchElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
~
SVGSwitchElement
(
)
=
default
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
NS_IMPL_FROMNODE_WITH_TAG
(
SVGSwitchElement
kNameSpaceID_SVG
svgSwitch
)
nsIContent
*
GetActiveChild
(
)
const
{
return
mActiveChild
;
}
void
MaybeInvalidate
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
SVGSwitchElement
SVGSwitchElementBase
)
virtual
void
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
ErrorResult
&
aRv
)
override
;
void
RemoveChildNode
(
nsIContent
*
aKid
bool
aNotify
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
private
:
nsCOMPtr
<
nsIContent
>
mActiveChild
;
}
;
}
}
#
endif
