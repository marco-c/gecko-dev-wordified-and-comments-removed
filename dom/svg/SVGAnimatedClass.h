#
ifndef
DOM_SVG_SVGANIMATEDCLASS_H_
#
define
DOM_SVG_SVGANIMATEDCLASS_H_
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
DOMSVGAnimatedString
;
class
SVGElement
;
class
SVGAnimatedClass
{
public
:
using
SVGElement
=
dom
:
:
SVGElement
;
void
Init
(
)
{
mAnimVal
=
nullptr
;
}
void
SetBaseValue
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
bool
aDoSetAttr
)
;
void
GetBaseValue
(
nsAString
&
aValue
const
SVGElement
*
aSVGElement
)
const
;
void
SetAnimValue
(
const
nsAString
&
aValue
SVGElement
*
aSVGElement
)
;
void
GetAnimValue
(
nsAString
&
aResult
const
SVGElement
*
aSVGElement
)
const
;
bool
IsAnimated
(
)
const
{
return
!
!
mAnimVal
;
}
already_AddRefed
<
dom
:
:
DOMSVGAnimatedString
>
ToDOMAnimatedString
(
SVGElement
*
aSVGElement
)
;
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
SVGElement
*
aSVGElement
)
;
private
:
UniquePtr
<
nsString
>
mAnimVal
;
public
:
struct
SMILString
:
public
SMILAttr
{
public
:
SMILString
(
SVGAnimatedClass
*
aVal
SVGElement
*
aSVGElement
)
:
mVal
(
aVal
)
mSVGElement
(
aSVGElement
)
{
}
SVGAnimatedClass
*
mVal
;
SVGElement
*
mSVGElement
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
}
#
endif
