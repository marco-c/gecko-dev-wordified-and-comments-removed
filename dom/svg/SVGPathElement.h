#
ifndef
DOM_SVG_SVGPATHELEMENT_H_
#
define
DOM_SVG_SVGPATHELEMENT_H_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
SVGAnimatedPathSegList
.
h
"
#
include
"
SVGGeometryElement
.
h
"
nsresult
NS_NewSVGPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
:
:
dom
{
using
SVGPathElementBase
=
SVGGeometryElement
;
class
SVGPathElement
final
:
public
SVGPathElementBase
{
using
Path
=
mozilla
:
:
gfx
:
:
Path
;
protected
:
friend
nsresult
(
:
:
NS_NewSVGPathElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
explicit
SVGPathElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
void
GetAsSimplePath
(
SimplePath
*
aSimplePath
)
override
;
public
:
NS_DECL_ADDSIZEOFEXCLUDINGTHIS
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
name
)
const
override
;
bool
HasValidDimensions
(
)
const
override
;
bool
AttributeDefinesGeometry
(
const
nsAtom
*
aName
)
override
;
bool
IsMarkable
(
)
override
;
void
GetMarkPoints
(
nsTArray
<
SVGMark
>
*
aMarks
)
override
;
already_AddRefed
<
Path
>
BuildPath
(
PathBuilder
*
aBuilder
)
override
;
already_AddRefed
<
Path
>
GetOrBuildPathForMeasuring
(
)
override
;
bool
GetDistancesFromOriginToEndsOfVisibleSegments
(
FallibleTArray
<
double
>
*
aOutput
)
override
;
bool
IsClosedLoop
(
)
const
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
SVGAnimatedPathSegList
*
GetAnimPathSegList
(
)
override
{
return
&
mD
;
}
nsStaticAtom
*
GetPathDataAttrName
(
)
const
override
{
return
nsGkAtoms
:
:
d
;
}
static
bool
IsDPropertyChangedViaCSS
(
const
ComputedStyle
&
aNewStyle
const
ComputedStyle
&
aOldStyle
)
;
protected
:
SVGAnimatedPathSegList
mD
;
}
;
}
#
endif
