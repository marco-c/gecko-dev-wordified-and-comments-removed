#
include
"
mozilla
/
dom
/
SVGFETurbulenceElement
.
h
"
#
include
"
mozilla
/
dom
/
SVGFETurbulenceElementBinding
.
h
"
#
include
"
nsSVGFilterInstance
.
h
"
#
include
"
nsSVGUtils
.
h
"
NS_IMPL_NS_NEW_NAMESPACED_SVG_ELEMENT
(
FETurbulence
)
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
dom
{
static
const
unsigned
short
SVG_STITCHTYPE_STITCH
=
1
;
static
const
unsigned
short
SVG_STITCHTYPE_NOSTITCH
=
2
;
static
const
int32_t
MAX_OCTAVES
=
10
;
JSObject
*
SVGFETurbulenceElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
SVGFETurbulenceElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
SVGElement
:
:
NumberInfo
SVGFETurbulenceElement
:
:
sNumberInfo
[
1
]
=
{
{
nsGkAtoms
:
:
seed
0
false
}
}
;
SVGElement
:
:
NumberPairInfo
SVGFETurbulenceElement
:
:
sNumberPairInfo
[
1
]
=
{
{
nsGkAtoms
:
:
baseFrequency
0
0
}
}
;
SVGElement
:
:
IntegerInfo
SVGFETurbulenceElement
:
:
sIntegerInfo
[
1
]
=
{
{
nsGkAtoms
:
:
numOctaves
1
}
}
;
nsSVGEnumMapping
SVGFETurbulenceElement
:
:
sTypeMap
[
]
=
{
{
nsGkAtoms
:
:
fractalNoise
SVG_TURBULENCE_TYPE_FRACTALNOISE
}
{
nsGkAtoms
:
:
turbulence
SVG_TURBULENCE_TYPE_TURBULENCE
}
{
nullptr
0
}
}
;
nsSVGEnumMapping
SVGFETurbulenceElement
:
:
sStitchTilesMap
[
]
=
{
{
nsGkAtoms
:
:
stitch
SVG_STITCHTYPE_STITCH
}
{
nsGkAtoms
:
:
noStitch
SVG_STITCHTYPE_NOSTITCH
}
{
nullptr
0
}
}
;
SVGElement
:
:
EnumInfo
SVGFETurbulenceElement
:
:
sEnumInfo
[
2
]
=
{
{
nsGkAtoms
:
:
type
sTypeMap
SVG_TURBULENCE_TYPE_TURBULENCE
}
{
nsGkAtoms
:
:
stitchTiles
sStitchTilesMap
SVG_STITCHTYPE_NOSTITCH
}
}
;
SVGElement
:
:
StringInfo
SVGFETurbulenceElement
:
:
sStringInfo
[
1
]
=
{
{
nsGkAtoms
:
:
result
kNameSpaceID_None
true
}
}
;
NS_IMPL_ELEMENT_CLONE_WITH_INIT
(
SVGFETurbulenceElement
)
already_AddRefed
<
SVGAnimatedNumber
>
SVGFETurbulenceElement
:
:
BaseFrequencyX
(
)
{
return
mNumberPairAttributes
[
BASE_FREQ
]
.
ToDOMAnimatedNumber
(
nsSVGNumberPair
:
:
eFirst
this
)
;
}
already_AddRefed
<
SVGAnimatedNumber
>
SVGFETurbulenceElement
:
:
BaseFrequencyY
(
)
{
return
mNumberPairAttributes
[
BASE_FREQ
]
.
ToDOMAnimatedNumber
(
nsSVGNumberPair
:
:
eSecond
this
)
;
}
already_AddRefed
<
SVGAnimatedInteger
>
SVGFETurbulenceElement
:
:
NumOctaves
(
)
{
return
mIntegerAttributes
[
OCTAVES
]
.
ToDOMAnimatedInteger
(
this
)
;
}
already_AddRefed
<
SVGAnimatedNumber
>
SVGFETurbulenceElement
:
:
Seed
(
)
{
return
mNumberAttributes
[
SEED
]
.
ToDOMAnimatedNumber
(
this
)
;
}
already_AddRefed
<
SVGAnimatedEnumeration
>
SVGFETurbulenceElement
:
:
StitchTiles
(
)
{
return
mEnumAttributes
[
STITCHTILES
]
.
ToDOMAnimatedEnum
(
this
)
;
}
already_AddRefed
<
SVGAnimatedEnumeration
>
SVGFETurbulenceElement
:
:
Type
(
)
{
return
mEnumAttributes
[
TYPE
]
.
ToDOMAnimatedEnum
(
this
)
;
}
FilterPrimitiveDescription
SVGFETurbulenceElement
:
:
GetPrimitiveDescription
(
nsSVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
{
float
fX
=
mNumberPairAttributes
[
BASE_FREQ
]
.
GetAnimValue
(
nsSVGNumberPair
:
:
eFirst
)
;
float
fY
=
mNumberPairAttributes
[
BASE_FREQ
]
.
GetAnimValue
(
nsSVGNumberPair
:
:
eSecond
)
;
float
seed
=
mNumberAttributes
[
OCTAVES
]
.
GetAnimValue
(
)
;
uint32_t
octaves
=
clamped
(
mIntegerAttributes
[
OCTAVES
]
.
GetAnimValue
(
)
0
MAX_OCTAVES
)
;
uint32_t
type
=
mEnumAttributes
[
TYPE
]
.
GetAnimValue
(
)
;
uint16_t
stitch
=
mEnumAttributes
[
STITCHTILES
]
.
GetAnimValue
(
)
;
if
(
fX
=
=
0
&
&
fY
=
=
0
)
{
if
(
type
=
=
SVG_TURBULENCE_TYPE_TURBULENCE
)
{
return
FilterPrimitiveDescription
(
)
;
}
FloodAttributes
atts
;
atts
.
mColor
=
Color
(
0
.
5
0
.
5
0
.
5
0
.
5
)
;
return
FilterPrimitiveDescription
(
AsVariant
(
std
:
:
move
(
atts
)
)
)
;
}
gfxRect
firstPeriodInUserSpace
(
0
0
fX
=
=
0
?
1
:
(
1
/
fX
)
fY
=
=
0
?
1
:
(
1
/
fY
)
)
;
gfxRect
firstPeriodInFilterSpace
=
aInstance
-
>
UserSpaceToFilterSpace
(
firstPeriodInUserSpace
)
;
Size
frequencyInFilterSpace
(
fX
=
=
0
?
0
:
(
1
/
firstPeriodInFilterSpace
.
width
)
fY
=
=
0
?
0
:
(
1
/
firstPeriodInFilterSpace
.
height
)
)
;
gfxPoint
offset
=
firstPeriodInFilterSpace
.
TopLeft
(
)
;
TurbulenceAttributes
atts
;
atts
.
mOffset
=
IntPoint
:
:
Truncate
(
offset
.
x
offset
.
y
)
;
atts
.
mBaseFrequency
=
frequencyInFilterSpace
;
atts
.
mSeed
=
seed
;
atts
.
mOctaves
=
octaves
;
atts
.
mStitchable
=
stitch
=
=
SVG_STITCHTYPE_STITCH
;
atts
.
mType
=
type
;
return
FilterPrimitiveDescription
(
AsVariant
(
std
:
:
move
(
atts
)
)
)
;
}
bool
SVGFETurbulenceElement
:
:
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
{
return
SVGFETurbulenceElementBase
:
:
AttributeAffectsRendering
(
aNameSpaceID
aAttribute
)
|
|
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
seed
|
|
aAttribute
=
=
nsGkAtoms
:
:
baseFrequency
|
|
aAttribute
=
=
nsGkAtoms
:
:
numOctaves
|
|
aAttribute
=
=
nsGkAtoms
:
:
type
|
|
aAttribute
=
=
nsGkAtoms
:
:
stitchTiles
)
)
;
}
SVGElement
:
:
NumberAttributesInfo
SVGFETurbulenceElement
:
:
GetNumberInfo
(
)
{
return
NumberAttributesInfo
(
mNumberAttributes
sNumberInfo
ArrayLength
(
sNumberInfo
)
)
;
}
SVGElement
:
:
NumberPairAttributesInfo
SVGFETurbulenceElement
:
:
GetNumberPairInfo
(
)
{
return
NumberPairAttributesInfo
(
mNumberPairAttributes
sNumberPairInfo
ArrayLength
(
sNumberPairInfo
)
)
;
}
SVGElement
:
:
IntegerAttributesInfo
SVGFETurbulenceElement
:
:
GetIntegerInfo
(
)
{
return
IntegerAttributesInfo
(
mIntegerAttributes
sIntegerInfo
ArrayLength
(
sIntegerInfo
)
)
;
}
SVGElement
:
:
EnumAttributesInfo
SVGFETurbulenceElement
:
:
GetEnumInfo
(
)
{
return
EnumAttributesInfo
(
mEnumAttributes
sEnumInfo
ArrayLength
(
sEnumInfo
)
)
;
}
SVGElement
:
:
StringAttributesInfo
SVGFETurbulenceElement
:
:
GetStringInfo
(
)
{
return
StringAttributesInfo
(
mStringAttributes
sStringInfo
ArrayLength
(
sStringInfo
)
)
;
}
}
}
