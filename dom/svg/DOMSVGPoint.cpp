#
include
"
DOMSVGPoint
.
h
"
#
include
"
DOMSVGPointList
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
SVGPoint
.
h
"
#
include
"
mozilla
/
dom
/
DOMMatrix
.
h
"
#
include
"
mozilla
/
dom
/
SVGElement
.
h
"
using
namespace
mozilla
:
:
gfx
;
namespace
mozilla
{
namespace
dom
{
class
MOZ_RAII
AutoChangePointNotifier
:
public
mozAutoDocUpdate
{
public
:
explicit
AutoChangePointNotifier
(
DOMSVGPoint
*
aPoint
)
:
mozAutoDocUpdate
(
aPoint
-
>
Element
(
)
-
>
GetComposedDoc
(
)
true
)
mPoint
(
aPoint
)
{
MOZ_ASSERT
(
mPoint
"
Expecting
non
-
null
point
"
)
;
MOZ_ASSERT
(
mPoint
-
>
HasOwner
(
)
"
Expecting
list
to
have
an
owner
for
notification
"
)
;
mEmptyOrOldValue
=
mPoint
-
>
Element
(
)
-
>
WillChangePointList
(
*
this
)
;
}
~
AutoChangePointNotifier
(
)
{
mPoint
-
>
Element
(
)
-
>
DidChangePointList
(
mEmptyOrOldValue
*
this
)
;
if
(
mPoint
-
>
mList
&
&
mPoint
-
>
mList
-
>
AttrIsAnimating
(
)
)
{
mPoint
-
>
Element
(
)
-
>
AnimationNeedsResample
(
)
;
}
}
private
:
DOMSVGPoint
*
const
mPoint
;
nsAttrValue
mEmptyOrOldValue
;
}
;
float
DOMSVGPoint
:
:
X
(
)
{
if
(
mIsAnimValItem
&
&
HasOwner
(
)
)
{
Element
(
)
-
>
FlushAnimations
(
)
;
}
return
HasOwner
(
)
?
InternalItem
(
)
.
mX
:
mPt
.
mX
;
}
void
DOMSVGPoint
:
:
SetX
(
float
aX
ErrorResult
&
rv
)
{
if
(
mIsAnimValItem
|
|
mIsReadonly
)
{
rv
.
Throw
(
NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR
)
;
return
;
}
if
(
HasOwner
(
)
)
{
if
(
InternalItem
(
)
.
mX
=
=
aX
)
{
return
;
}
AutoChangePointNotifier
notifier
(
this
)
;
InternalItem
(
)
.
mX
=
aX
;
return
;
}
mPt
.
mX
=
aX
;
}
float
DOMSVGPoint
:
:
Y
(
)
{
if
(
mIsAnimValItem
&
&
HasOwner
(
)
)
{
Element
(
)
-
>
FlushAnimations
(
)
;
}
return
HasOwner
(
)
?
InternalItem
(
)
.
mY
:
mPt
.
mY
;
}
void
DOMSVGPoint
:
:
SetY
(
float
aY
ErrorResult
&
rv
)
{
if
(
mIsAnimValItem
|
|
mIsReadonly
)
{
rv
.
Throw
(
NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR
)
;
return
;
}
if
(
HasOwner
(
)
)
{
if
(
InternalItem
(
)
.
mY
=
=
aY
)
{
return
;
}
AutoChangePointNotifier
notifier
(
this
)
;
InternalItem
(
)
.
mY
=
aY
;
return
;
}
mPt
.
mY
=
aY
;
}
already_AddRefed
<
nsISVGPoint
>
DOMSVGPoint
:
:
MatrixTransform
(
const
DOMMatrix2DInit
&
aMatrix
ErrorResult
&
aRv
)
{
RefPtr
<
DOMMatrixReadOnly
>
matrix
=
DOMMatrixReadOnly
:
:
FromMatrix
(
GetParentObject
(
)
aMatrix
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
const
auto
*
matrix2D
=
matrix
-
>
GetInternal2D
(
)
;
if
(
!
matrix2D
-
>
IsFinite
(
)
)
{
aRv
.
ThrowTypeError
<
MSG_NOT_FINITE
>
(
"
MatrixTransform
matrix
"
)
;
return
nullptr
;
}
auto
pt
=
matrix2D
-
>
TransformPoint
(
HasOwner
(
)
?
InternalItem
(
)
:
mPt
)
;
nsCOMPtr
<
nsISVGPoint
>
newPoint
=
new
DOMSVGPoint
(
ToPoint
(
pt
)
)
;
return
newPoint
.
forget
(
)
;
}
}
}
