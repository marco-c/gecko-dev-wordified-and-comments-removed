#
ifndef
MOZILLA_SVGANIMATEDNUMBERLIST_H__
#
define
MOZILLA_SVGANIMATEDNUMBERLIST_H__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SMILAttr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
SVGNumberList
.
h
"
namespace
mozilla
{
class
SMILValue
;
namespace
dom
{
class
SVGAnimationElement
;
class
SVGElement
;
}
class
SVGAnimatedNumberList
{
friend
class
dom
:
:
DOMSVGNumber
;
friend
class
dom
:
:
DOMSVGNumberList
;
public
:
SVGAnimatedNumberList
(
)
:
mIsBaseSet
(
false
)
{
}
const
SVGNumberList
&
GetBaseValue
(
)
const
{
return
mBaseVal
;
}
nsresult
SetBaseValueString
(
const
nsAString
&
aValue
)
;
void
ClearBaseValue
(
uint32_t
aAttrEnum
)
;
const
SVGNumberList
&
GetAnimValue
(
)
const
{
return
mAnimVal
?
*
mAnimVal
:
mBaseVal
;
}
nsresult
SetAnimValue
(
const
SVGNumberList
&
aNewAnimValue
dom
:
:
SVGElement
*
aElement
uint32_t
aAttrEnum
)
;
void
ClearAnimValue
(
dom
:
:
SVGElement
*
aElement
uint32_t
aAttrEnum
)
;
bool
IsExplicitlySet
(
)
const
{
return
!
!
mAnimVal
|
|
mIsBaseSet
;
}
bool
IsAnimating
(
)
const
{
return
!
!
mAnimVal
;
}
UniquePtr
<
SMILAttr
>
ToSMILAttr
(
dom
:
:
SVGElement
*
aSVGElement
uint8_t
aAttrEnum
)
;
private
:
SVGNumberList
mBaseVal
;
UniquePtr
<
SVGNumberList
>
mAnimVal
;
bool
mIsBaseSet
;
struct
SMILAnimatedNumberList
:
public
SMILAttr
{
public
:
SMILAnimatedNumberList
(
SVGAnimatedNumberList
*
aVal
dom
:
:
SVGElement
*
aSVGElement
uint8_t
aAttrEnum
)
:
mVal
(
aVal
)
mElement
(
aSVGElement
)
mAttrEnum
(
aAttrEnum
)
{
}
SVGAnimatedNumberList
*
mVal
;
dom
:
:
SVGElement
*
mElement
;
uint8_t
mAttrEnum
;
virtual
nsresult
ValueFromString
(
const
nsAString
&
aStr
const
dom
:
:
SVGAnimationElement
*
aSrcElement
SMILValue
&
aValue
bool
&
aPreventCachingOfSandwich
)
const
override
;
virtual
SMILValue
GetBaseValue
(
)
const
override
;
virtual
void
ClearAnimValue
(
)
override
;
virtual
nsresult
SetAnimValue
(
const
SMILValue
&
aValue
)
override
;
}
;
}
;
}
#
endif
