#
ifndef
DOM_SVG_SVGFETILEELEMENT_H_
#
define
DOM_SVG_SVGFETILEELEMENT_H_
#
include
"
mozilla
/
dom
/
SVGFilters
.
h
"
nsresult
NS_NewSVGFETileElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
namespace
mozilla
:
:
dom
{
using
SVGFETileElementBase
=
SVGFilterPrimitiveElement
;
class
SVGFETileElement
final
:
public
SVGFETileElementBase
{
friend
nsresult
(
:
:
NS_NewSVGFETileElement
(
nsIContent
*
*
aResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
)
;
protected
:
explicit
SVGFETileElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
SVGFETileElementBase
(
std
:
:
move
(
aNodeInfo
)
)
{
}
JSObject
*
WrapNode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
public
:
bool
SubregionIsUnionOfRegions
(
)
override
{
return
false
;
}
FilterPrimitiveDescription
GetPrimitiveDescription
(
SVGFilterInstance
*
aInstance
const
IntRect
&
aFilterSubregion
const
nsTArray
<
bool
>
&
aInputsAreTainted
nsTArray
<
RefPtr
<
SourceSurface
>
>
&
aInputImages
)
override
;
bool
AttributeAffectsRendering
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
const
override
;
SVGAnimatedString
&
GetResultImageName
(
)
override
{
return
mStringAttributes
[
RESULT
]
;
}
void
GetSourceImageNames
(
nsTArray
<
SVGStringInfo
>
&
aSources
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsresult
BindToTree
(
BindContext
&
aCtx
nsINode
&
aParent
)
override
;
already_AddRefed
<
DOMSVGAnimatedString
>
In1
(
)
;
protected
:
StringAttributesInfo
GetStringInfo
(
)
override
;
enum
{
RESULT
IN1
}
;
SVGAnimatedString
mStringAttributes
[
2
]
;
static
StringInfo
sStringInfo
[
2
]
;
}
;
}
#
endif
