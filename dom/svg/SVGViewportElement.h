#
ifndef
mozilla_dom_SVGViewportElement_h
#
define
mozilla_dom_SVGViewportElement_h
#
include
"
mozilla
/
dom
/
FromParser
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsISVGPoint
.
h
"
#
include
"
nsSVGEnum
.
h
"
#
include
"
nsSVGLength2
.
h
"
#
include
"
SVGGraphicsElement
.
h
"
#
include
"
SVGImageContext
.
h
"
#
include
"
nsSVGViewBox
.
h
"
#
include
"
SVGPreserveAspectRatio
.
h
"
#
include
"
SVGAnimatedPreserveAspectRatio
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsSVGOuterSVGFrame
;
class
nsSVGViewportFrame
;
namespace
mozilla
{
class
AutoPreserveAspectRatioOverride
;
class
DOMSVGAnimatedPreserveAspectRatio
;
namespace
dom
{
class
SVGAnimatedRect
;
class
SVGTransform
;
class
SVGViewElement
;
class
SVGViewportElement
;
class
svgFloatSize
{
public
:
svgFloatSize
(
float
aWidth
float
aHeight
)
:
width
(
aWidth
)
height
(
aHeight
)
{
}
bool
operator
!
=
(
const
svgFloatSize
&
rhs
)
{
return
width
!
=
rhs
.
width
|
|
height
!
=
rhs
.
height
;
}
float
width
;
float
height
;
}
;
class
SVGViewportElement
:
public
SVGGraphicsElement
{
friend
class
:
:
nsSVGOuterSVGFrame
;
friend
class
:
:
nsSVGViewportFrame
;
protected
:
SVGViewportElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
~
SVGViewportElement
(
)
;
public
:
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
virtual
gfxMatrix
PrependLocalTransformsTo
(
const
gfxMatrix
&
aMatrix
SVGTransformTypes
aWhich
=
eAllTransforms
)
const
override
;
virtual
bool
HasValidDimensions
(
)
const
override
;
float
GetLength
(
uint8_t
mCtxType
)
;
bool
HasViewBoxRect
(
)
const
{
return
GetViewBoxInternal
(
)
.
HasRect
(
)
;
}
bool
ShouldSynthesizeViewBox
(
)
const
;
bool
HasViewBoxOrSyntheticViewBox
(
)
const
{
return
HasViewBoxRect
(
)
|
|
ShouldSynthesizeViewBox
(
)
;
}
bool
HasChildrenOnlyTransform
(
)
const
{
return
mHasChildrenOnlyTransform
;
}
void
UpdateHasChildrenOnlyTransform
(
)
;
enum
ChildrenOnlyTransformChangedFlags
{
eDuringReflow
=
1
}
;
void
ChildrenOnlyTransformChanged
(
uint32_t
aFlags
=
0
)
;
gfx
:
:
Matrix
GetViewBoxTransform
(
)
const
;
svgFloatSize
GetViewportSize
(
)
const
{
return
svgFloatSize
(
mViewportWidth
mViewportHeight
)
;
}
void
SetViewportSize
(
const
svgFloatSize
&
aSize
)
{
mViewportWidth
=
aSize
.
width
;
mViewportHeight
=
aSize
.
height
;
}
already_AddRefed
<
SVGAnimatedRect
>
ViewBox
(
)
;
already_AddRefed
<
DOMSVGAnimatedPreserveAspectRatio
>
PreserveAspectRatio
(
)
;
virtual
nsSVGViewBox
*
GetViewBox
(
)
override
;
protected
:
bool
IsRoot
(
)
const
{
NS_ASSERTION
(
(
IsInUncomposedDoc
(
)
&
&
!
GetParent
(
)
)
=
=
(
OwnerDoc
(
)
-
>
GetRootElement
(
)
=
=
this
)
"
Can
'
t
determine
if
we
'
re
root
"
)
;
return
IsInUncomposedDoc
(
)
&
&
!
GetParent
(
)
;
}
bool
IsInner
(
)
const
{
const
nsIContent
*
parent
=
GetFlattenedTreeParent
(
)
;
return
parent
&
&
parent
-
>
IsSVGElement
(
)
&
&
!
parent
-
>
IsSVGElement
(
nsGkAtoms
:
:
foreignObject
)
;
}
virtual
SVGPreserveAspectRatio
GetPreserveAspectRatioWithOverride
(
)
const
{
return
mPreserveAspectRatio
.
GetAnimValue
(
)
;
}
nsSVGViewBoxRect
GetViewBoxWithSynthesis
(
float
aViewportWidth
float
aViewportHeight
)
const
;
virtual
SVGPoint
GetCurrentTranslate
(
)
const
{
return
SVGPoint
(
0
.
0f
0
.
0f
)
;
}
virtual
float
GetCurrentScale
(
)
const
{
return
1
.
0f
;
}
enum
{
ATTR_X
ATTR_Y
ATTR_WIDTH
ATTR_HEIGHT
}
;
nsSVGLength2
mLengthAttributes
[
4
]
;
static
LengthInfo
sLengthInfo
[
4
]
;
virtual
LengthAttributesInfo
GetLengthInfo
(
)
override
;
virtual
SVGAnimatedPreserveAspectRatio
*
GetPreserveAspectRatio
(
)
override
;
virtual
const
nsSVGViewBox
&
GetViewBoxInternal
(
)
const
{
return
mViewBox
;
}
virtual
nsSVGAnimatedTransformList
*
GetTransformInternal
(
)
const
{
return
mTransforms
;
}
nsSVGViewBox
mViewBox
;
SVGAnimatedPreserveAspectRatio
mPreserveAspectRatio
;
float
mViewportWidth
mViewportHeight
;
bool
mHasChildrenOnlyTransform
;
}
;
}
}
#
endif
