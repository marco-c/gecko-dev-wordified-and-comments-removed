#
ifndef
DOM_SVG_SVGMOTIONSMILANIMATIONFUNCTION_H_
#
define
DOM_SVG_SVGMOTIONSMILANIMATIONFUNCTION_H_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
SMILAnimationFunction
.
h
"
#
include
"
SVGMotionSMILType
.
h
"
#
include
"
nsTArray
.
h
"
class
nsAttrValue
;
class
nsAtom
;
class
nsIContent
;
namespace
mozilla
{
class
SMILAttr
;
class
SMILValue
;
namespace
dom
{
class
SVGMPathElement
;
}
class
SVGMotionSMILAnimationFunction
final
:
public
SMILAnimationFunction
{
using
Path
=
mozilla
:
:
gfx
:
:
Path
;
public
:
SVGMotionSMILAnimationFunction
(
)
;
bool
SetAttr
(
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
nsresult
*
aParseResult
=
nullptr
)
override
;
bool
UnsetAttr
(
nsAtom
*
aAttribute
)
override
;
void
MpathChanged
(
)
{
mIsPathStale
=
mHasChanged
=
true
;
}
protected
:
enum
PathSourceType
{
ePathSourceType_None
ePathSourceType_ByAttr
ePathSourceType_ToAttr
ePathSourceType_ValuesAttr
ePathSourceType_PathAttr
ePathSourceType_Mpath
}
;
SMILCalcMode
GetCalcMode
(
)
const
override
;
virtual
nsresult
GetValues
(
const
SMILAttr
&
aSMILAttr
SMILValueArray
&
aResult
)
override
;
void
CheckValueListDependentAttrs
(
uint32_t
aNumValues
)
override
;
bool
IsToAnimation
(
)
const
override
;
void
CheckKeyPoints
(
)
;
nsresult
SetKeyPoints
(
const
nsAString
&
aKeyPoints
nsAttrValue
&
aResult
)
;
void
UnsetKeyPoints
(
)
;
nsresult
SetRotate
(
const
nsAString
&
aRotate
nsAttrValue
&
aResult
)
;
void
UnsetRotate
(
)
;
void
MarkStaleIfAttributeAffectsPath
(
nsAtom
*
aAttribute
)
;
void
RebuildPathAndVertices
(
const
nsIContent
*
aTargetElement
)
;
void
RebuildPathAndVerticesFromMpathElem
(
dom
:
:
SVGMPathElement
*
aMpathElem
)
;
void
RebuildPathAndVerticesFromPathAttr
(
)
;
void
RebuildPathAndVerticesFromBasicAttrs
(
const
nsIContent
*
aContextElem
)
;
nsresult
GenerateValuesForPathAndPoints
(
Path
*
aPath
bool
aIsKeyPoints
FallibleTArray
<
double
>
&
aPointDistances
SMILValueArray
&
aResult
)
;
FallibleTArray
<
double
>
mKeyPoints
;
RotateType
mRotateType
;
float
mRotateAngle
;
PathSourceType
mPathSourceType
;
RefPtr
<
Path
>
mPath
;
FallibleTArray
<
double
>
mPathVertices
;
bool
mIsPathStale
;
}
;
}
#
endif
