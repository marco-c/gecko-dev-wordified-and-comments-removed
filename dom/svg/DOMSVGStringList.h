#
ifndef
MOZILLA_DOMSVGSTRINGLIST_H__
#
define
MOZILLA_DOMSVGSTRINGLIST_H__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
SVGElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
namespace
mozilla
{
class
ErrorResult
;
class
SVGStringList
;
class
DOMSVGStringList
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
AutoChangeStringListNotifier
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
DOMSVGStringList
)
dom
:
:
SVGElement
*
GetParentObject
(
)
const
{
return
mElement
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint32_t
NumberOfItems
(
)
const
;
uint32_t
Length
(
)
const
;
void
Clear
(
)
;
void
Initialize
(
const
nsAString
&
aNewItem
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
void
GetItem
(
uint32_t
aIndex
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsAString
&
aRetval
)
;
void
InsertItemBefore
(
const
nsAString
&
aNewItem
uint32_t
aIndex
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
void
ReplaceItem
(
const
nsAString
&
aNewItem
uint32_t
aIndex
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
void
RemoveItem
(
uint32_t
aIndex
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
void
AppendItem
(
const
nsAString
&
aNewItem
nsAString
&
aRetval
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
DOMSVGStringList
>
GetDOMWrapper
(
SVGStringList
*
aList
dom
:
:
SVGElement
*
aElement
bool
aIsConditionalProcessingAttribute
uint8_t
aAttrEnum
)
;
private
:
DOMSVGStringList
(
dom
:
:
SVGElement
*
aElement
bool
aIsConditionalProcessingAttribute
uint8_t
aAttrEnum
)
:
mElement
(
aElement
)
mAttrEnum
(
aAttrEnum
)
mIsConditionalProcessingAttribute
(
aIsConditionalProcessingAttribute
)
{
}
~
DOMSVGStringList
(
)
;
SVGStringList
&
InternalList
(
)
const
;
RefPtr
<
dom
:
:
SVGElement
>
mElement
;
uint8_t
mAttrEnum
;
bool
mIsConditionalProcessingAttribute
;
}
;
}
#
endif
