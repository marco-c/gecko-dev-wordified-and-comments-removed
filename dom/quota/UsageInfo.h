#
ifndef
mozilla_dom_quota_usageinfo_h__
#
define
mozilla_dom_quota_usageinfo_h__
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
BEGIN_QUOTA_NAMESPACE
class
UsageInfo
final
{
public
:
void
Append
(
const
UsageInfo
&
aUsageInfo
)
{
IncrementUsage
(
mDatabaseUsage
aUsageInfo
.
mDatabaseUsage
)
;
IncrementUsage
(
mFileUsage
aUsageInfo
.
mFileUsage
)
;
}
void
AppendToDatabaseUsage
(
const
Maybe
<
uint64_t
>
&
aUsage
)
{
IncrementUsage
(
mDatabaseUsage
aUsage
)
;
}
void
AppendToFileUsage
(
const
Maybe
<
uint64_t
>
&
aUsage
)
{
IncrementUsage
(
mFileUsage
aUsage
)
;
}
const
Maybe
<
uint64_t
>
&
FileUsage
(
)
const
{
return
mFileUsage
;
}
Maybe
<
uint64_t
>
TotalUsage
(
)
{
Maybe
<
uint64_t
>
totalUsage
;
IncrementUsage
(
totalUsage
mDatabaseUsage
)
;
IncrementUsage
(
totalUsage
mFileUsage
)
;
return
totalUsage
;
}
static
void
IncrementUsage
(
Maybe
<
uint64_t
>
&
aUsage
const
Maybe
<
uint64_t
>
&
aDelta
)
{
if
(
aDelta
.
isNothing
(
)
)
{
return
;
}
CheckedUint64
value
=
aUsage
.
valueOr
(
0
)
;
value
+
=
aDelta
.
value
(
)
;
if
(
value
.
isValid
(
)
)
{
aUsage
=
Some
(
value
.
value
(
)
)
;
}
else
{
aUsage
=
Some
(
UINT64_MAX
)
;
}
}
private
:
Maybe
<
uint64_t
>
mDatabaseUsage
;
Maybe
<
uint64_t
>
mFileUsage
;
}
;
END_QUOTA_NAMESPACE
#
endif
