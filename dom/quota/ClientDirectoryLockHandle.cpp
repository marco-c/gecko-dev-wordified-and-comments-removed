#
include
"
mozilla
/
dom
/
quota
/
ClientDirectoryLockHandle
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ClientDirectoryLock
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
DirectoryLock
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
DirectoryLockInlines
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
ClientDirectoryLockHandle
:
:
ClientDirectoryLockHandle
(
)
{
MOZ_COUNT_CTOR
(
mozilla
:
:
dom
:
:
quota
:
:
ClientDirectoryLockHandle
)
;
}
ClientDirectoryLockHandle
:
:
ClientDirectoryLockHandle
(
RefPtr
<
ClientDirectoryLock
>
aClientDirectoryLock
)
{
aClientDirectoryLock
-
>
AssertIsOnOwningThread
(
)
;
mClientDirectoryLock
=
std
:
:
move
(
aClientDirectoryLock
)
;
MOZ_COUNT_CTOR
(
mozilla
:
:
dom
:
:
quota
:
:
ClientDirectoryLockHandle
)
;
}
ClientDirectoryLockHandle
:
:
ClientDirectoryLockHandle
(
ClientDirectoryLockHandle
&
&
aOther
)
noexcept
{
aOther
.
AssertIsOnOwningThread
(
)
;
mClientDirectoryLock
=
std
:
:
move
(
aOther
.
mClientDirectoryLock
)
;
aOther
.
mClientDirectoryLock
=
nullptr
;
MOZ_COUNT_CTOR
(
mozilla
:
:
dom
:
:
quota
:
:
ClientDirectoryLockHandle
)
;
}
ClientDirectoryLockHandle
:
:
~
ClientDirectoryLockHandle
(
)
{
if
(
mClientDirectoryLock
)
{
AssertIsOnOwningThread
(
)
;
DropDirectoryLock
(
mClientDirectoryLock
)
;
}
MOZ_COUNT_DTOR
(
mozilla
:
:
dom
:
:
quota
:
:
ClientDirectoryLockHandle
)
;
}
void
ClientDirectoryLockHandle
:
:
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
ClientDirectoryLockHandle
)
;
}
ClientDirectoryLockHandle
&
ClientDirectoryLockHandle
:
:
operator
=
(
ClientDirectoryLockHandle
&
&
aOther
)
noexcept
{
AssertIsOnOwningThread
(
)
;
aOther
.
AssertIsOnOwningThread
(
)
;
if
(
this
!
=
&
aOther
)
{
mClientDirectoryLock
=
std
:
:
move
(
aOther
.
mClientDirectoryLock
)
;
aOther
.
mClientDirectoryLock
=
nullptr
;
}
return
*
this
;
}
ClientDirectoryLockHandle
:
:
operator
bool
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
!
!
mClientDirectoryLock
;
}
ClientDirectoryLock
*
ClientDirectoryLockHandle
:
:
get
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mClientDirectoryLock
?
mClientDirectoryLock
.
get
(
)
:
nullptr
;
}
ClientDirectoryLock
&
ClientDirectoryLockHandle
:
:
operator
*
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
*
get
(
)
;
}
ClientDirectoryLock
*
ClientDirectoryLockHandle
:
:
operator
-
>
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
get
(
)
;
}
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
ClientDirectoryLockHandle
:
:
IsInert
(
)
const
{
return
!
mClientDirectoryLock
;
}
#
endif
}
