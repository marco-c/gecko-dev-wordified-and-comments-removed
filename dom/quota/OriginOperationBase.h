#
ifndef
DOM_QUOTA_ORIGINOPERATIONBASE_H_
#
define
DOM_QUOTA_ORIGINOPERATIONBASE_H_
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Config
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
nsISupportsImpl
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
:
:
dom
:
:
quota
{
class
QuotaManager
;
class
OriginOperationBase
:
public
BackgroundThreadObject
{
protected
:
nsresult
mResultCode
;
private
:
bool
mActorDestroyed
;
#
ifdef
QM_COLLECTING_OPERATION_TELEMETRY
const
char
*
mName
=
nullptr
;
#
endif
public
:
NS_INLINE_DECL_REFCOUNTING
(
OriginOperationBase
)
void
NoteActorDestroyed
(
)
{
AssertIsOnOwningThread
(
)
;
mActorDestroyed
=
true
;
}
bool
IsActorDestroyed
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mActorDestroyed
;
}
#
ifdef
QM_COLLECTING_OPERATION_TELEMETRY
const
char
*
Name
(
)
const
{
return
mName
;
}
#
endif
void
RunImmediately
(
)
;
protected
:
explicit
OriginOperationBase
(
const
char
*
aName
)
;
virtual
~
OriginOperationBase
(
)
;
virtual
nsresult
DoInit
(
QuotaManager
&
aQuotaManager
)
;
virtual
RefPtr
<
BoolPromise
>
Open
(
)
=
0
;
#
ifdef
DEBUG
virtual
nsresult
DirectoryOpen
(
)
;
#
endif
virtual
nsresult
DoDirectoryWork
(
QuotaManager
&
aQuotaManager
)
=
0
;
virtual
void
UnblockOpen
(
)
=
0
;
}
;
}
#
endif
