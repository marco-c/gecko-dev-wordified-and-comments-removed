#
ifndef
mozilla_dom_quota_persistencetype_h__
#
define
mozilla_dom_quota_persistencetype_h__
#
include
<
cstdint
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
StorageTypeBinding
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
nsStringFwd
.
h
"
BEGIN_QUOTA_NAMESPACE
enum
PersistenceType
{
PERSISTENCE_TYPE_PERSISTENT
=
0
PERSISTENCE_TYPE_TEMPORARY
PERSISTENCE_TYPE_DEFAULT
PERSISTENCE_TYPE_INVALID
}
;
static
const
PersistenceType
kAllPersistenceTypes
[
]
=
{
PERSISTENCE_TYPE_PERSISTENT
PERSISTENCE_TYPE_TEMPORARY
PERSISTENCE_TYPE_DEFAULT
}
;
static
const
PersistenceType
kBestEffortPersistenceTypes
[
]
=
{
PERSISTENCE_TYPE_TEMPORARY
PERSISTENCE_TYPE_DEFAULT
}
;
bool
IsValidPersistenceType
(
PersistenceType
aPersistenceType
)
;
bool
IsBestEffortPersistenceType
(
const
PersistenceType
aPersistenceType
)
;
nsLiteralCString
PersistenceTypeToString
(
PersistenceType
aPersistenceType
)
;
Maybe
<
PersistenceType
>
PersistenceTypeFromString
(
const
nsACString
&
aString
const
fallible_t
&
)
;
PersistenceType
PersistenceTypeFromString
(
const
nsACString
&
aString
)
;
StorageType
PersistenceTypeToStorageType
(
PersistenceType
aPersistenceType
)
;
PersistenceType
PersistenceTypeFromStorageType
(
StorageType
aStorageType
)
;
Maybe
<
PersistenceType
>
PersistenceTypeFromInt32
(
int32_t
aInt32
const
fallible_t
&
)
;
inline
PersistenceType
ComplementaryPersistenceType
(
const
PersistenceType
aPersistenceType
)
{
MOZ_ASSERT
(
aPersistenceType
=
=
PERSISTENCE_TYPE_DEFAULT
|
|
aPersistenceType
=
=
PERSISTENCE_TYPE_TEMPORARY
)
;
if
(
aPersistenceType
=
=
PERSISTENCE_TYPE_DEFAULT
)
{
return
PERSISTENCE_TYPE_TEMPORARY
;
}
return
PERSISTENCE_TYPE_DEFAULT
;
}
END_QUOTA_NAMESPACE
#
endif
