#
include
"
QuotaCommon
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsIFile
.
h
"
#
ifdef
XP_WIN
#
include
"
nsILocalFileWin
.
h
"
#
endif
#
include
"
nsXPCOM
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
quota
{
namespace
{
LazyLogModule
gLogger
(
"
QuotaManager
"
)
;
void
AnonymizeCString
(
nsACString
&
aCString
uint32_t
aStart
)
{
MOZ_ASSERT
(
!
aCString
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
aStart
<
aCString
.
Length
(
)
)
;
char
*
iter
=
aCString
.
BeginWriting
(
)
+
aStart
;
char
*
end
=
aCString
.
EndWriting
(
)
;
while
(
iter
!
=
end
)
{
char
c
=
*
iter
;
if
(
IsAsciiAlpha
(
c
)
)
{
*
iter
=
'
a
'
;
}
else
if
(
IsAsciiDigit
(
c
)
)
{
*
iter
=
'
D
'
;
}
+
+
iter
;
}
}
}
const
char
kQuotaGenericDelimiter
=
'
|
'
;
#
ifdef
NIGHTLY_BUILD
NS_NAMED_LITERAL_CSTRING
(
kQuotaInternalError
"
internal
"
)
;
NS_NAMED_LITERAL_CSTRING
(
kQuotaExternalError
"
external
"
)
;
#
endif
LogModule
*
GetQuotaManagerLogger
(
)
{
return
gLogger
;
}
void
AnonymizeCString
(
nsACString
&
aCString
)
{
if
(
aCString
.
IsEmpty
(
)
)
{
return
;
}
AnonymizeCString
(
aCString
0
)
;
}
void
AnonymizeOriginString
(
nsACString
&
aOriginString
)
{
if
(
aOriginString
.
IsEmpty
(
)
)
{
return
;
}
int32_t
start
=
aOriginString
.
FindChar
(
'
:
'
)
;
if
(
start
<
0
)
{
start
=
0
;
}
AnonymizeCString
(
aOriginString
start
)
;
}
Result
<
nsCOMPtr
<
nsIFile
>
nsresult
>
QM_NewLocalFile
(
const
nsAString
&
aPath
)
{
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_NewLocalFile
(
aPath
false
getter_AddRefs
(
file
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
Err
(
rv
)
;
}
#
ifdef
XP_WIN
nsCOMPtr
<
nsILocalFileWin
>
winFile
=
do_QueryInterface
(
file
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
Err
(
rv
)
;
}
MOZ_ASSERT
(
winFile
)
;
winFile
-
>
SetUseDOSDevicePathSyntax
(
true
)
;
#
endif
return
file
;
}
}
}
}
