#
ifndef
DOM_QUOTA_RESOLVABLENORMALORIGINOP_H_
#
define
DOM_QUOTA_RESOLVABLENORMALORIGINOP_H_
#
include
"
NormalOriginOperationBase
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
template
<
typename
T
>
class
ResolvableNormalOriginOp
:
public
NormalOriginOperationBase
{
public
:
using
PromiseType
=
MozPromise
<
T
nsresult
false
>
;
RefPtr
<
PromiseType
>
OnResults
(
)
{
AssertIsOnOwningThread
(
)
;
return
mPromiseHolder
.
Ensure
(
__func__
)
;
}
protected
:
ResolvableNormalOriginOp
(
MovingNotNull
<
RefPtr
<
QuotaManager
>
>
aQuotaManager
const
char
*
aName
)
:
NormalOriginOperationBase
(
std
:
:
move
(
aQuotaManager
)
aName
)
{
AssertIsOnOwningThread
(
)
;
}
virtual
~
ResolvableNormalOriginOp
(
)
=
default
;
virtual
T
GetResolveValue
(
)
=
0
;
private
:
void
SendResults
(
)
override
{
#
ifdef
DEBUG
NoteActorDestroyed
(
)
;
#
endif
if
(
Canceled
(
)
)
{
mResultCode
=
NS_ERROR_FAILURE
;
}
if
(
NS_SUCCEEDED
(
mResultCode
)
)
{
mPromiseHolder
.
ResolveIfExists
(
GetResolveValue
(
)
__func__
)
;
}
else
{
mPromiseHolder
.
RejectIfExists
(
mResultCode
__func__
)
;
}
}
MozPromiseHolder
<
PromiseType
>
mPromiseHolder
;
}
;
}
#
endif
