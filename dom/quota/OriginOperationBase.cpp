#
include
"
OriginOperationBase
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIThread
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
NS_IMETHODIMP
OriginOperationBase
:
:
Run
(
)
{
nsresult
rv
;
switch
(
mState
)
{
case
State_Initial
:
{
rv
=
Init
(
)
;
break
;
}
case
State_DirectoryOpenPending
:
{
rv
=
DirectoryOpen
(
)
;
break
;
}
case
State_DirectoryWorkOpen
:
{
rv
=
DirectoryWork
(
)
;
break
;
}
case
State_UnblockingOpen
:
{
UnblockOpen
(
)
;
return
NS_OK
;
}
default
:
MOZ_CRASH
(
"
Bad
state
!
"
)
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
&
&
mState
!
=
State_UnblockingOpen
)
{
Finish
(
rv
)
;
}
return
NS_OK
;
}
nsresult
OriginOperationBase
:
:
DoInit
(
QuotaManager
&
aQuotaManager
)
{
AssertIsOnOwningThread
(
)
;
return
NS_OK
;
}
nsresult
OriginOperationBase
:
:
DirectoryOpen
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mState
=
=
State_DirectoryOpenPending
)
;
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
QM_TRY
(
OkIf
(
quotaManager
)
NS_ERROR_FAILURE
)
;
AdvanceState
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
quotaManager
-
>
IOThread
(
)
-
>
Dispatch
(
this
NS_DISPATCH_NORMAL
)
)
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
void
OriginOperationBase
:
:
Finish
(
nsresult
aResult
)
{
if
(
NS_SUCCEEDED
(
mResultCode
)
)
{
mResultCode
=
aResult
;
}
mState
=
State_UnblockingOpen
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningThread
-
>
Dispatch
(
this
NS_DISPATCH_NORMAL
)
)
;
}
nsresult
OriginOperationBase
:
:
Init
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mState
=
=
State_Initial
)
;
if
(
QuotaManager
:
:
IsShuttingDown
(
)
)
{
return
NS_ERROR_ABORT
;
}
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
QM_TRY
(
MOZ_TO_RESULT
(
DoInit
(
*
quotaManager
)
)
)
;
Open
(
)
;
return
NS_OK
;
}
nsresult
OriginOperationBase
:
:
DirectoryWork
(
)
{
AssertIsOnIOThread
(
)
;
MOZ_ASSERT
(
mState
=
=
State_DirectoryWorkOpen
)
;
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
QM_TRY
(
OkIf
(
quotaManager
)
NS_ERROR_FAILURE
)
;
if
(
mNeedsStorageInit
)
{
QM_TRY
(
MOZ_TO_RESULT
(
quotaManager
-
>
EnsureStorageIsInitialized
(
)
)
)
;
}
QM_TRY
(
MOZ_TO_RESULT
(
DoDirectoryWork
(
*
quotaManager
)
)
)
;
AdvanceState
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
mOwningThread
-
>
Dispatch
(
this
NS_DISPATCH_NORMAL
)
)
;
return
NS_OK
;
}
}
