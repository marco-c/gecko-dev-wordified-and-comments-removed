#
include
"
OriginOperationBase
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
fs
/
TargetPtrHolder
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
OriginOperationBase
:
:
OriginOperationBase
(
const
char
*
aName
)
:
BackgroundThreadObject
(
GetCurrentSerialEventTarget
(
)
)
mResultCode
(
NS_OK
)
mActorDestroyed
(
false
)
#
ifdef
QM_COLLECTING_OPERATION_TELEMETRY
mName
(
aName
)
#
endif
{
AssertIsOnOwningThread
(
)
;
}
OriginOperationBase
:
:
~
OriginOperationBase
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mActorDestroyed
)
;
}
void
OriginOperationBase
:
:
RunImmediately
(
)
{
AssertIsOnOwningThread
(
)
;
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
[
self
=
RefPtr
(
this
)
]
(
)
{
if
(
QuotaManager
:
:
IsShuttingDown
(
)
)
{
return
BoolPromise
:
:
CreateAndReject
(
NS_ERROR_ABORT
__func__
)
;
}
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
QM_TRY
(
MOZ_TO_RESULT
(
self
-
>
DoInit
(
*
quotaManager
)
)
CreateAndRejectBoolPromise
)
;
return
self
-
>
Open
(
)
;
}
(
)
#
ifdef
DEBUG
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
(
this
)
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
return
BoolPromise
:
:
CreateAndReject
(
aValue
.
RejectValue
(
)
__func__
)
;
}
QM_TRY
(
MOZ_TO_RESULT
(
self
-
>
DirectoryOpen
(
)
)
CreateAndRejectBoolPromise
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
#
endif
-
>
Then
(
quotaManager
-
>
IOThread
(
)
__func__
[
selfHolder
=
fs
:
:
TargetPtrHolder
(
this
)
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
return
BoolPromise
:
:
CreateAndReject
(
aValue
.
RejectValue
(
)
__func__
)
;
}
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
quotaManager
)
CreateAndRejectBoolPromise
)
;
QM_TRY
(
MOZ_TO_RESULT
(
selfHolder
-
>
DoDirectoryWork
(
*
quotaManager
)
)
CreateAndRejectBoolPromise
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
RefPtr
(
this
)
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsReject
(
)
)
{
MOZ_ASSERT
(
NS_SUCCEEDED
(
self
-
>
mResultCode
)
)
;
self
-
>
mResultCode
=
aValue
.
RejectValue
(
)
;
}
self
-
>
UnblockOpen
(
)
;
}
)
;
}
nsresult
OriginOperationBase
:
:
DoInit
(
QuotaManager
&
aQuotaManager
)
{
AssertIsOnOwningThread
(
)
;
return
NS_OK
;
}
#
ifdef
DEBUG
nsresult
OriginOperationBase
:
:
DirectoryOpen
(
)
{
AssertIsOnOwningThread
(
)
;
return
NS_OK
;
}
#
endif
}
