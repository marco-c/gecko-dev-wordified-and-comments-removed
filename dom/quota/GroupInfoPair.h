#
ifndef
DOM_QUOTA_GROUPINFOPAIR_H_
#
define
DOM_QUOTA_GROUPINFOPAIR_H_
#
include
"
GroupInfo
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
class
GroupInfo
;
class
GroupInfoPair
{
public
:
GroupInfoPair
(
const
nsACString
&
aSuffix
const
nsACString
&
aGroup
)
:
mSuffix
(
aSuffix
)
mGroup
(
aGroup
)
{
MOZ_COUNT_CTOR
(
GroupInfoPair
)
;
}
MOZ_COUNTED_DTOR
(
GroupInfoPair
)
const
nsCString
&
Suffix
(
)
const
{
return
mSuffix
;
}
const
nsCString
&
Group
(
)
const
{
return
mGroup
;
}
RefPtr
<
GroupInfo
>
LockedGetGroupInfo
(
PersistenceType
aPersistenceType
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
MOZ_ASSERT
(
aPersistenceType
!
=
PERSISTENCE_TYPE_PERSISTENT
)
;
return
GetGroupInfoForPersistenceType
(
aPersistenceType
)
;
}
void
LockedSetGroupInfo
(
PersistenceType
aPersistenceType
GroupInfo
*
aGroupInfo
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
MOZ_ASSERT
(
aPersistenceType
!
=
PERSISTENCE_TYPE_PERSISTENT
)
;
RefPtr
<
GroupInfo
>
&
groupInfo
=
GetGroupInfoForPersistenceType
(
aPersistenceType
)
;
groupInfo
=
aGroupInfo
;
}
void
LockedClearGroupInfo
(
PersistenceType
aPersistenceType
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
MOZ_ASSERT
(
aPersistenceType
!
=
PERSISTENCE_TYPE_PERSISTENT
)
;
RefPtr
<
GroupInfo
>
&
groupInfo
=
GetGroupInfoForPersistenceType
(
aPersistenceType
)
;
groupInfo
=
nullptr
;
}
bool
LockedHasGroupInfos
(
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
return
mTemporaryStorageGroupInfo
|
|
mDefaultStorageGroupInfo
;
}
private
:
RefPtr
<
GroupInfo
>
&
GetGroupInfoForPersistenceType
(
PersistenceType
aPersistenceType
)
;
const
nsCString
mSuffix
;
const
nsCString
mGroup
;
RefPtr
<
GroupInfo
>
mTemporaryStorageGroupInfo
;
RefPtr
<
GroupInfo
>
mDefaultStorageGroupInfo
;
}
;
}
#
endif
