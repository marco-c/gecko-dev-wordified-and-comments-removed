#
include
"
RemoteQuotaObject
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
RemoteQuotaObjectChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
RemoteQuotaObject
:
:
RemoteQuotaObject
(
RefPtr
<
RemoteQuotaObjectChild
>
aActor
)
:
QuotaObject
(
true
)
mActor
(
std
:
:
move
(
aActor
)
)
{
MOZ_COUNT_CTOR
(
RemoteQuotaObject
)
;
mActor
-
>
SetRemoteQuotaObject
(
this
)
;
}
RemoteQuotaObject
:
:
~
RemoteQuotaObject
(
)
{
MOZ_COUNT_DTOR
(
RemoteQuotaObject
)
;
Close
(
)
;
}
void
RemoteQuotaObject
:
:
ClearActor
(
)
{
MOZ_ASSERT
(
mActor
)
;
mActor
=
nullptr
;
}
void
RemoteQuotaObject
:
:
Close
(
)
{
if
(
!
mActor
)
{
return
;
}
MOZ_ASSERT
(
mActor
-
>
GetActorEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
mActor
-
>
Close
(
)
;
MOZ_ASSERT
(
!
mActor
)
;
}
const
nsAString
&
RemoteQuotaObject
:
:
Path
(
)
const
{
return
EmptyString
(
)
;
}
bool
RemoteQuotaObject
:
:
MaybeUpdateSize
(
int64_t
aSize
bool
aTruncate
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mozilla
:
:
ipc
:
:
IsOnBackgroundThread
(
)
)
;
MOZ_ASSERT
(
!
GetCurrentThreadWorkerPrivate
(
)
)
;
if
(
!
mActor
)
{
return
false
;
}
MOZ_ASSERT
(
mActor
-
>
GetActorEventTarget
(
)
-
>
IsOnCurrentThread
(
)
)
;
bool
result
;
if
(
!
mActor
-
>
SendMaybeUpdateSize
(
aSize
aTruncate
&
result
)
)
{
return
false
;
}
return
result
;
}
}
