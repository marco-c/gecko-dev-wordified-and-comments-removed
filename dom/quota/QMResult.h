#
ifndef
DOM_QUOTA_QMRESULT_H_
#
define
DOM_QUOTA_QMRESULT_H_
#
include
"
mozilla
/
dom
/
quota
/
Config
.
h
"
#
include
"
ErrorList
.
h
"
namespace
mozilla
{
#
ifdef
QM_ERROR_STACKS_ENABLED
struct
Ok
;
template
<
typename
V
typename
E
>
class
Result
;
class
QMResult
{
uint64_t
mStackId
;
uint32_t
mFrameId
;
nsresult
mNSResult
;
public
:
QMResult
(
)
:
QMResult
(
NS_OK
)
{
}
explicit
QMResult
(
nsresult
aNSResult
)
;
uint64_t
StackId
(
)
const
{
return
mStackId
;
}
uint32_t
FrameId
(
)
const
{
return
mFrameId
;
}
nsresult
NSResult
(
)
const
{
return
mNSResult
;
}
QMResult
Propagate
(
)
const
{
return
QMResult
{
mStackId
mFrameId
+
1
mNSResult
}
;
}
private
:
QMResult
(
uint64_t
aStackId
uint32_t
aFrameId
nsresult
aNSResult
)
:
mStackId
(
aStackId
)
mFrameId
(
aFrameId
)
mNSResult
(
aNSResult
)
{
}
}
;
#
else
using
QMResult
=
nsresult
;
#
endif
inline
QMResult
ToQMResult
(
nsresult
aValue
)
{
return
QMResult
(
aValue
)
;
}
using
OkOrErr
=
Result
<
Ok
QMResult
>
;
#
ifdef
QM_ERROR_STACKS_ENABLED
inline
OkOrErr
ToResult
(
const
QMResult
&
aValue
)
;
inline
OkOrErr
ToResult
(
QMResult
&
&
aValue
)
;
#
endif
}
#
define
MOZ_TO_RESULT
(
expr
)
ToResult
(
expr
)
#
define
QM_TO_RESULT
(
expr
)
ToResult
<
QMResult
>
(
expr
)
#
endif
