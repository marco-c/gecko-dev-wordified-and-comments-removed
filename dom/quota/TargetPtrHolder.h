#
ifndef
DOM_QUOTA_TARGETPTRHOLDER_H_
#
define
DOM_QUOTA_TARGETPTRHOLDER_H_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
template
<
typename
T
>
class
TargetPtrHolder
{
public
:
MOZ_IMPLICIT
TargetPtrHolder
(
T
*
aRawPtr
)
:
mTarget
(
GetCurrentSerialEventTarget
(
)
)
mPtr
(
aRawPtr
)
{
MOZ_ASSERT
(
mPtr
)
;
}
TargetPtrHolder
(
const
TargetPtrHolder
&
)
=
default
;
TargetPtrHolder
&
operator
=
(
const
TargetPtrHolder
&
)
=
default
;
TargetPtrHolder
(
TargetPtrHolder
&
&
)
=
default
;
TargetPtrHolder
&
operator
=
(
TargetPtrHolder
&
&
)
=
default
;
~
TargetPtrHolder
(
)
{
if
(
!
mPtr
)
{
return
;
}
NS_ProxyRelease
(
"
TargetPtrHolder
:
:
mPtr
"
mTarget
mPtr
.
forget
(
)
)
;
}
T
*
get
(
)
const
{
MOZ_ASSERT
(
mPtr
)
;
return
mPtr
.
get
(
)
;
}
T
*
operator
-
>
(
)
const
MOZ_NO_ADDREF_RELEASE_ON_RETURN
{
return
get
(
)
;
}
bool
operator
!
(
)
{
return
!
mPtr
.
get
(
)
;
}
private
:
nsCOMPtr
<
nsISerialEventTarget
>
mTarget
;
RefPtr
<
T
>
mPtr
;
}
;
}
#
endif
