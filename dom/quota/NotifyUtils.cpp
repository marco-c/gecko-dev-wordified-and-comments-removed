#
include
"
mozilla
/
dom
/
quota
/
NotifyUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsSupportsPrimitives
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
namespace
{
void
NotifyObserversOnMainThread
(
const
char
*
aTopic
std
:
:
function
<
already_AddRefed
<
nsISupports
>
(
)
>
&
&
aSubjectGetter
=
nullptr
)
{
auto
mainThreadFunction
=
[
topic
=
aTopic
subjectGetter
=
std
:
:
move
(
aSubjectGetter
)
]
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
observerService
)
QM_VOID
)
;
nsCOMPtr
<
nsISupports
>
subject
;
if
(
subjectGetter
)
{
subject
=
subjectGetter
(
)
;
}
observerService
-
>
NotifyObservers
(
subject
topic
u
"
"
)
;
}
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
dom
:
:
quota
:
:
NotifyObserversOnMainThread
"
std
:
:
move
(
mainThreadFunction
)
)
)
)
;
}
}
void
NotifyStoragePressure
(
QuotaManager
&
aQuotaManager
uint64_t
aUsage
)
{
aQuotaManager
.
AssertNotCurrentThreadOwnsQuotaMutex
(
)
;
auto
subjectGetter
=
[
usage
=
aUsage
]
(
)
{
auto
wrapper
=
MakeRefPtr
<
nsSupportsPRUint64
>
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
wrapper
-
>
SetData
(
usage
)
)
;
return
wrapper
.
forget
(
)
;
}
;
NotifyObserversOnMainThread
(
"
QuotaManager
:
:
StoragePressure
"
std
:
:
move
(
subjectGetter
)
)
;
}
void
NotifyMaintenanceStarted
(
QuotaManager
&
aQuotaManager
)
{
aQuotaManager
.
AssertIsOnOwningThread
(
)
;
NotifyObserversOnMainThread
(
"
QuotaManager
:
:
MaintenanceStarted
"
)
;
}
}
