#
include
"
mozilla
/
dom
/
quota
/
NotifyUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsSupportsPrimitives
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
namespace
{
class
StoragePressureRunnable
final
:
public
Runnable
{
const
uint64_t
mUsage
;
public
:
explicit
StoragePressureRunnable
(
uint64_t
aUsage
)
:
Runnable
(
"
dom
:
:
quota
:
:
QuotaObject
:
:
StoragePressureRunnable
"
)
mUsage
(
aUsage
)
{
}
private
:
~
StoragePressureRunnable
(
)
=
default
;
NS_DECL_NSIRUNNABLE
}
;
}
void
NotifyStoragePressure
(
QuotaManager
&
aQuotaManager
uint64_t
aUsage
)
{
aQuotaManager
.
AssertNotCurrentThreadOwnsQuotaMutex
(
)
;
RefPtr
<
StoragePressureRunnable
>
storagePressureRunnable
=
new
StoragePressureRunnable
(
aUsage
)
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
storagePressureRunnable
)
)
;
}
void
NotifyMaintenanceStarted
(
QuotaManager
&
aQuotaManager
)
{
aQuotaManager
.
AssertIsOnOwningThread
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
dom
:
:
quota
:
:
QuotaManager
:
:
NotifyMaintenanceStarted
"
[
]
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
QM_TRY
(
MOZ_TO_RESULT
(
observerService
)
QM_VOID
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
QuotaManager
:
:
MaintenanceStarted
"
u
"
"
)
;
}
)
)
)
;
}
NS_IMETHODIMP
StoragePressureRunnable
:
:
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
obsSvc
)
)
{
return
NS_ERROR_FAILURE
;
}
auto
wrapper
=
MakeRefPtr
<
nsSupportsPRUint64
>
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
wrapper
-
>
SetData
(
mUsage
)
)
;
obsSvc
-
>
NotifyObservers
(
wrapper
"
QuotaManager
:
:
StoragePressure
"
u
"
"
)
;
return
NS_OK
;
}
}
