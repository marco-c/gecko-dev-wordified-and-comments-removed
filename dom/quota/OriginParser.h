#
ifndef
DOM_QUOTA_ORIGINPARSER_H_
#
define
DOM_QUOTA_ORIGINPARSER_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
OriginAttributes
;
namespace
dom
:
:
quota
{
class
MOZ_STACK_CLASS
OriginParser
final
{
public
:
enum
ResultType
{
InvalidOrigin
ObsoleteOrigin
ValidOrigin
}
;
private
:
using
Tokenizer
=
nsCCharSeparatedTokenizerTemplate
<
NS_TokenizerIgnoreNothing
>
;
enum
SchemeType
{
eNone
eFile
eAbout
eChrome
}
;
enum
State
{
eExpectingAppIdOrScheme
eExpectingInMozBrowser
eExpectingScheme
eExpectingEmptyToken1
eExpectingEmptyToken2
eExpectingEmptyTokenOrUniversalFileOrigin
eExpectingHost
eExpectingPort
eExpectingEmptyTokenOrDriveLetterOrPathnameComponent
eExpectingEmptyTokenOrPathnameComponent
eExpectingEmptyToken1OrHost
eExpectingIPV6Token
eComplete
eHandledTrailingSeparator
}
;
const
nsCString
mOrigin
;
Tokenizer
mTokenizer
;
nsCString
mScheme
;
nsCString
mHost
;
Nullable
<
uint32_t
>
mPort
;
nsTArray
<
nsCString
>
mPathnameComponents
;
nsCString
mHandledTokens
;
SchemeType
mSchemeType
;
State
mState
;
bool
mInIsolatedMozBrowser
;
bool
mUniversalFileOrigin
;
bool
mMaybeDriveLetter
;
bool
mError
;
bool
mMaybeObsolete
;
uint8_t
mIPGroup
;
public
:
explicit
OriginParser
(
const
nsACString
&
aOrigin
)
:
mOrigin
(
aOrigin
)
mTokenizer
(
aOrigin
'
+
'
)
mPort
(
)
mSchemeType
(
eNone
)
mState
(
eExpectingAppIdOrScheme
)
mInIsolatedMozBrowser
(
false
)
mUniversalFileOrigin
(
false
)
mMaybeDriveLetter
(
false
)
mError
(
false
)
mMaybeObsolete
(
false
)
mIPGroup
(
0
)
{
}
static
ResultType
ParseOrigin
(
const
nsACString
&
aOrigin
nsCString
&
aSpec
OriginAttributes
*
aAttrs
nsCString
&
aOriginalSuffix
)
;
ResultType
Parse
(
nsACString
&
aSpec
)
;
private
:
void
HandleScheme
(
const
nsDependentCSubstring
&
aToken
)
;
void
HandlePathnameComponent
(
const
nsDependentCSubstring
&
aToken
)
;
void
HandleToken
(
const
nsDependentCSubstring
&
aToken
)
;
void
HandleTrailingSeparator
(
)
;
}
;
bool
IsUUIDOrigin
(
const
nsCString
&
aOrigin
)
;
}
}
#
endif
