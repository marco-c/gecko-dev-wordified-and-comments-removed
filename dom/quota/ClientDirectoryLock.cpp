#
include
"
ClientDirectoryLock
.
h
"
#
include
<
utility
>
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
DirectoryLockCategory
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
OriginScope
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceScope
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
RefPtr
<
ClientDirectoryLock
>
ClientDirectoryLock
:
:
Create
(
MovingNotNull
<
RefPtr
<
QuotaManager
>
>
aQuotaManager
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
Client
:
:
Type
aClientType
bool
aExclusive
)
{
return
MakeRefPtr
<
ClientDirectoryLock
>
(
std
:
:
move
(
aQuotaManager
)
PersistenceScope
:
:
CreateFromValue
(
aPersistenceType
)
OriginScope
:
:
FromOrigin
(
aOriginMetadata
)
ClientStorageScope
:
:
CreateFromClient
(
aClientType
)
aExclusive
false
ShouldUpdateLockIdTableFlag
:
:
Yes
DirectoryLockCategory
:
:
None
)
;
}
RefPtr
<
ClientDirectoryLock
>
ClientDirectoryLock
:
:
Create
(
MovingNotNull
<
RefPtr
<
QuotaManager
>
>
aQuotaManager
const
PersistenceScope
&
aPersistenceScope
const
OriginScope
&
aOriginScope
const
ClientStorageScope
&
aClientStorageScope
bool
aExclusive
bool
aInternal
ShouldUpdateLockIdTableFlag
aShouldUpdateLockIdTableFlag
DirectoryLockCategory
aCategory
)
{
MOZ_ASSERT_IF
(
aOriginScope
.
IsOrigin
(
)
!
aOriginScope
.
GetOrigin
(
)
.
IsEmpty
(
)
)
;
MOZ_ASSERT_IF
(
!
aInternal
aPersistenceScope
.
IsValue
(
)
)
;
MOZ_ASSERT_IF
(
!
aInternal
aPersistenceScope
.
GetValue
(
)
!
=
PERSISTENCE_TYPE_INVALID
)
;
MOZ_ASSERT_IF
(
!
aInternal
aOriginScope
.
IsOrigin
(
)
)
;
MOZ_ASSERT_IF
(
!
aInternal
aClientStorageScope
.
IsClient
(
)
)
;
MOZ_ASSERT_IF
(
!
aInternal
aClientStorageScope
.
GetClientType
(
)
<
Client
:
:
TypeMax
(
)
)
;
return
MakeRefPtr
<
ClientDirectoryLock
>
(
std
:
:
move
(
aQuotaManager
)
aPersistenceScope
aOriginScope
aClientStorageScope
aExclusive
aInternal
aShouldUpdateLockIdTableFlag
aCategory
)
;
}
}
