#
ifndef
DOM_QUOTA_SCOPEDLOGEXTRAINFO_H_
#
define
DOM_QUOTA_SCOPEDLOGEXTRAINFO_H_
#
include
"
mozilla
/
dom
/
quota
/
Config
.
h
"
#
include
<
map
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
struct
MOZ_STACK_CLASS
ScopedLogExtraInfo
{
static
constexpr
const
char
kTagQuery
[
]
=
"
query
"
;
static
constexpr
const
char
kTagContext
[
]
=
"
context
"
;
#
ifdef
QM_SCOPED_LOG_EXTRA_INFO_ENABLED
private
:
static
auto
FindSlot
(
const
char
*
aTag
)
;
public
:
template
<
size_t
N
>
ScopedLogExtraInfo
(
const
char
(
&
aTag
)
[
N
]
const
nsACString
&
aExtraInfo
)
:
mTag
{
aTag
}
mCurrentValue
{
aExtraInfo
}
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
AddInfo
(
)
;
}
~
ScopedLogExtraInfo
(
)
;
ScopedLogExtraInfo
(
ScopedLogExtraInfo
&
&
aOther
)
;
ScopedLogExtraInfo
&
operator
=
(
ScopedLogExtraInfo
&
&
aOther
)
=
delete
;
ScopedLogExtraInfo
(
const
ScopedLogExtraInfo
&
)
=
delete
;
ScopedLogExtraInfo
&
operator
=
(
const
ScopedLogExtraInfo
&
)
=
delete
;
using
ScopedLogExtraInfoMap
=
std
:
:
map
<
const
char
*
const
nsACString
*
>
;
static
ScopedLogExtraInfoMap
GetExtraInfoMap
(
)
;
static
void
Initialize
(
)
;
private
:
const
char
*
mTag
;
const
nsACString
*
mPreviousValue
;
nsCString
mCurrentValue
;
static
MOZ_THREAD_LOCAL
(
const
nsACString
*
)
sQueryValue
;
static
MOZ_THREAD_LOCAL
(
const
nsACString
*
)
sContextValue
;
void
AddInfo
(
)
;
#
else
template
<
size_t
N
>
ScopedLogExtraInfo
(
const
char
(
&
aTag
)
[
N
]
const
nsACString
&
aExtraInfo
)
{
}
~
ScopedLogExtraInfo
(
)
{
}
#
endif
}
;
}
#
endif
