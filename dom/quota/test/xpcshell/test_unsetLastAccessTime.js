async
function
testSteps
(
)
{
const
metadataFile
=
getRelativeFile
(
"
storage
/
default
/
https
+
+
+
foo
.
example
.
com
/
.
metadata
-
v2
"
)
;
function
getLastAccessTime
(
)
{
let
fileInputStream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileInputStream
)
;
fileInputStream
.
init
(
metadataFile
-
1
-
1
0
)
;
let
binaryInputStream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
binaryInputStream
.
setInputStream
(
fileInputStream
)
;
return
BigInt
.
asIntN
(
64
BigInt
(
binaryInputStream
.
read64
(
)
)
)
;
}
info
(
"
Clearing
"
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Installing
package
"
)
;
installPackage
(
"
unsetLastAccessTime_profile
"
)
;
info
(
"
Verifying
last
access
time
"
)
;
ok
(
getLastAccessTime
(
)
=
=
INT64_MIN
"
Correct
last
access
time
"
)
;
info
(
"
Initializing
"
)
;
request
=
init
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Initializing
temporary
storage
"
)
;
request
=
initTemporaryStorage
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Verifying
last
access
time
"
)
;
ok
(
getLastAccessTime
(
)
!
=
INT64_MIN
"
Correct
last
access
time
"
)
;
}
