async
function
testSteps
(
)
{
const
principal
=
getPrincipal
(
"
http
:
/
/
example
.
com
"
)
;
async
function
testFunctionality
(
testFunction
)
{
const
modes
=
[
{
initializedStorage
:
false
initializedTemporaryStorage
:
false
}
{
initializedStorage
:
true
initializedTemporaryStorage
:
false
}
{
initializedStorage
:
true
initializedTemporaryStorage
:
true
}
]
;
for
(
const
mode
of
modes
)
{
info
(
"
Clearing
"
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Installing
package
"
)
;
installPackage
(
"
unknownFiles_profile
"
)
;
if
(
mode
.
initializedStorage
)
{
info
(
"
Initializing
storage
"
)
;
request
=
init
(
)
;
await
requestFinished
(
request
)
;
}
if
(
mode
.
initializedTemporaryStorage
)
{
info
(
"
Initializing
temporary
storage
"
)
;
request
=
initTemporaryStorage
(
)
;
await
requestFinished
(
request
)
;
}
info
(
"
Verifying
initialization
status
"
)
;
await
verifyInitializationStatus
(
mode
.
initializedStorage
mode
.
initializedTemporaryStorage
)
;
await
testFunction
(
mode
.
initializedStorage
mode
.
initializedTemporaryStorage
)
;
info
(
"
Clearing
"
)
;
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
}
}
info
(
"
Testing
initStorageAndOrigin
functionality
"
)
;
await
testFunctionality
(
async
function
(
)
{
info
(
"
Initializing
origin
"
)
;
request
=
initStorageAndOrigin
(
principal
"
default
"
)
;
await
requestFinished
(
request
)
;
ok
(
request
.
result
=
=
=
false
"
The
origin
directory
was
not
created
"
)
;
}
)
;
info
(
"
Testing
getUsageForPrincipal
functionality
"
)
;
await
testFunctionality
(
async
function
(
)
{
info
(
"
Getting
origin
usage
"
)
;
request
=
getOriginUsage
(
principal
)
;
await
requestFinished
(
request
)
;
ok
(
request
.
result
instanceof
Ci
.
nsIQuotaOriginUsageResult
"
The
result
is
nsIQuotaOriginUsageResult
instance
"
)
;
is
(
request
.
result
.
usage
115025
"
Correct
total
usage
"
)
;
is
(
request
.
result
.
fileUsage
231
"
Correct
file
usage
"
)
;
}
)
;
info
(
"
Testing
clearStoragesForPrincipal
functionality
"
)
;
await
testFunctionality
(
async
function
(
)
{
info
(
"
Clearing
origin
"
)
;
request
=
clearOrigin
(
principal
"
default
"
)
;
await
requestFinished
(
request
)
;
}
)
;
}
