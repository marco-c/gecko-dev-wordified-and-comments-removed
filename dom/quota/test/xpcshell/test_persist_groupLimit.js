async
function
testSteps
(
)
{
const
groupLimitKB
=
10
*
1024
;
const
globalLimitKB
=
groupLimitKB
*
5
;
const
urls
=
[
"
http
:
/
/
foo1
.
example
.
com
"
"
http
:
/
/
foo2
.
example
.
com
"
]
;
const
foo2Index
=
1
;
let
index
;
info
(
"
Setting
limits
"
)
;
setGlobalLimit
(
globalLimitKB
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Opening
databases
"
)
;
let
databases
=
[
]
;
for
(
index
=
0
;
index
<
urls
.
length
;
index
+
+
)
{
let
database
=
getSimpleDatabase
(
getPrincipal
(
urls
[
index
]
)
)
;
request
=
database
.
open
(
"
data
"
)
;
await
requestFinished
(
request
)
;
databases
.
push
(
database
)
;
}
info
(
"
Filling
up
the
whole
group
"
)
;
try
{
request
=
databases
[
foo2Index
]
.
write
(
new
ArrayBuffer
(
groupLimitKB
*
1024
)
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
info
(
"
Verifying
no
more
data
can
be
written
"
)
;
for
(
index
=
0
;
index
<
urls
.
length
;
index
+
+
)
{
try
{
request
=
databases
[
index
]
.
write
(
new
ArrayBuffer
(
1
)
)
;
await
requestFinished
(
request
)
;
ok
(
false
"
Should
have
thrown
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Should
have
thrown
"
)
;
ok
(
e
.
resultCode
=
=
NS_ERROR_FILE_NO_DEVICE_SPACE
"
Threw
right
result
code
"
)
;
}
}
info
(
"
Persisting
origin
"
)
;
request
=
persist
(
getPrincipal
(
urls
[
foo2Index
]
)
)
;
await
requestFinished
(
request
)
;
info
(
"
Verifying
more
data
data
can
be
written
"
)
;
for
(
index
=
0
;
index
<
urls
.
length
;
index
+
+
)
{
try
{
request
=
databases
[
index
]
.
write
(
new
ArrayBuffer
(
1
)
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
}
info
(
"
Closing
databases
"
)
;
for
(
index
=
0
;
index
<
urls
.
length
;
index
+
+
)
{
request
=
databases
[
index
]
.
close
(
)
;
await
requestFinished
(
request
)
;
}
finishTest
(
)
;
}
