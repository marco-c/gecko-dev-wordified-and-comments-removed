loadScript
(
"
dom
/
quota
/
test
/
common
/
file
.
js
"
)
;
function
getOriginDir
(
persistence
origin
)
{
return
getRelativeFile
(
storage
/
{
persistence
}
/
{
origin
}
)
;
}
function
getMetadataFile
(
persistence
origin
)
{
const
metadataFile
=
getOriginDir
(
persistence
origin
)
;
metadataFile
.
append
(
"
.
metadata
-
v2
"
)
;
return
metadataFile
;
}
function
populateRepository
(
persistence
)
{
const
originDir
=
getOriginDir
(
persistence
"
https
+
+
+
good
-
example
.
com
"
)
;
originDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
function
makeRepositoryUnusable
(
persistence
)
{
const
metadataFile
=
getMetadataFile
(
persistence
"
https
+
+
+
bad
-
example
.
com
"
)
;
metadataFile
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
}
async
function
fillOrigin
(
principal
size
)
{
let
database
=
getSimpleDatabase
(
principal
)
;
let
request
=
database
.
open
(
"
data
"
)
;
await
requestFinished
(
request
)
;
try
{
request
=
database
.
write
(
getBuffer
(
size
)
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
request
=
database
.
close
(
)
;
await
requestFinished
(
request
)
;
}
