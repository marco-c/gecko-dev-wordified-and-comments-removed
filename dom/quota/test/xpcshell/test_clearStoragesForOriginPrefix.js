async
function
testSteps
(
)
{
const
packages
=
[
"
clearStoragesForOriginPrefix_profile
"
"
defaultStorageDirectory_shared
"
]
;
const
testData
=
[
{
origin
:
"
http
:
/
/
example
.
com
"
persistence
:
null
key
:
"
afterClearByOriginPrefix
"
}
{
origin
:
"
http
:
/
/
example
.
com
"
persistence
:
"
default
"
key
:
"
afterClearByOriginPrefix_default
"
}
{
origin
:
"
http
:
/
/
example
.
com
"
persistence
:
"
persistent
"
key
:
"
afterClearByOriginPrefix_persistent
"
}
{
origin
:
"
http
:
/
/
example
.
com
"
persistence
:
"
temporary
"
key
:
"
afterClearByOriginPrefix_temporary
"
}
]
;
for
(
const
item
of
testData
)
{
info
(
"
Clearing
"
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Verifying
storage
"
)
;
verifyStorage
(
packages
"
beforeInstall
"
)
;
info
(
"
Installing
package
"
)
;
installPackages
(
packages
)
;
info
(
"
Verifying
storage
"
)
;
verifyStorage
(
packages
"
afterInstall
"
)
;
getRelativeFile
(
"
storage
/
default
/
invalid
+
+
+
example
.
com
"
)
.
remove
(
false
)
;
getRelativeFile
(
"
storage
/
permanent
/
invalid
+
+
+
example
.
com
"
)
.
remove
(
false
)
;
getRelativeFile
(
"
storage
/
temporary
/
invalid
+
+
+
example
.
com
"
)
.
remove
(
false
)
;
info
(
"
Clearing
origin
by
prefix
"
)
;
request
=
clearOriginsByPrefix
(
getPrincipal
(
item
.
origin
)
item
.
persistence
)
;
await
requestFinished
(
request
)
;
info
(
"
Verifying
storage
"
)
;
verifyStorage
(
packages
item
.
key
"
afterClearByOriginPrefix
"
)
;
}
}
