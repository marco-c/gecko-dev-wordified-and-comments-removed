async
function
testSteps
(
)
{
const
webAppsStoreFile
=
"
webappsstore
.
sqlite
"
;
const
lsArchiveFile
=
"
storage
/
ls
-
archive
.
sqlite
"
;
const
lsArchiveTmpFile
=
"
storage
/
ls
-
archive
-
tmp
.
sqlite
"
;
function
checkArchiveFileNotExists
(
)
{
info
(
"
Checking
archive
tmp
file
"
)
;
let
archiveTmpFile
=
getRelativeFile
(
lsArchiveTmpFile
)
;
let
exists
=
archiveTmpFile
.
exists
(
)
;
ok
(
!
exists
"
archive
tmp
file
doesn
'
t
exist
"
)
;
info
(
"
Checking
archive
file
"
)
;
let
archiveFile
=
getRelativeFile
(
lsArchiveFile
)
;
exists
=
archiveFile
.
exists
(
)
;
ok
(
!
exists
"
archive
file
doesn
'
t
exist
"
)
;
}
function
checkArchiveFileExists
(
)
{
info
(
"
Checking
archive
tmp
file
"
)
;
let
archiveTmpFile
=
getRelativeFile
(
lsArchiveTmpFile
)
;
let
exists
=
archiveTmpFile
.
exists
(
)
;
ok
(
!
exists
"
archive
tmp
file
doesn
'
t
exist
"
)
;
info
(
"
Checking
archive
file
"
)
;
let
archiveFile
=
getRelativeFile
(
lsArchiveFile
)
;
exists
=
archiveFile
.
exists
(
)
;
ok
(
exists
"
archive
file
does
exist
"
)
;
info
(
"
Checking
archive
file
size
"
)
;
let
fileSize
=
archiveFile
.
fileSize
;
Assert
.
greater
(
fileSize
0
"
archive
file
size
is
greater
than
zero
"
)
;
}
info
(
"
Clearing
"
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
let
appsStoreFile
=
getRelativeFile
(
webAppsStoreFile
)
;
let
exists
=
appsStoreFile
.
exists
(
)
;
ok
(
!
exists
"
apps
store
file
doesn
'
t
exist
"
)
;
checkArchiveFileNotExists
(
)
;
try
{
request
=
init
(
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
checkArchiveFileExists
(
)
;
info
(
"
Clearing
"
)
;
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
appsStoreFile
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
parseInt
(
"
0755
"
8
)
)
;
checkArchiveFileNotExists
(
)
;
try
{
request
=
init
(
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
checkArchiveFileExists
(
)
;
appsStoreFile
.
remove
(
true
)
;
info
(
"
Clearing
"
)
;
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
let
ostream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
ostream
.
init
(
appsStoreFile
-
1
parseInt
(
"
0644
"
8
)
0
)
;
ostream
.
write
(
"
foobar
"
6
)
;
ostream
.
close
(
)
;
checkArchiveFileNotExists
(
)
;
try
{
request
=
init
(
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
checkArchiveFileExists
(
)
;
appsStoreFile
.
remove
(
false
)
;
info
(
"
Clearing
"
)
;
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Installing
package
"
)
;
installPackage
(
"
createLocalStorage_profile
"
)
;
let
fileSize
=
appsStoreFile
.
fileSize
;
Assert
.
greater
(
fileSize
0
"
apps
store
file
size
is
greater
than
zero
"
)
;
checkArchiveFileNotExists
(
)
;
try
{
request
=
init
(
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
checkArchiveFileExists
(
)
;
appsStoreFile
.
remove
(
false
)
;
}
