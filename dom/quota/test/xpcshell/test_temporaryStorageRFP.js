const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
async
function
testSteps
(
)
{
const
principal
=
getPrincipal
(
"
http
:
/
/
example
.
com
"
)
;
const
GiB
=
1024
*
1024
*
1024
;
const
globalLimitBytes
=
1
*
GiB
;
const
globalLimitKib
=
globalLimitBytes
/
1024
;
setGlobalLimit
(
globalLimitKib
)
;
let
request
=
init
(
)
;
await
requestFinished
(
request
)
;
request
=
initTemporaryStorage
(
)
;
await
requestFinished
(
request
)
;
request
=
estimateOrigin
(
principal
)
;
await
requestFinished
(
request
)
;
const
perGroupPercentage
=
0
.
2
;
const
expectedGroupLimitBytes
=
Math
.
floor
(
globalLimitBytes
*
perGroupPercentage
)
;
is
(
expectedGroupLimitBytes
request
.
result
.
limit
)
;
request
=
reset
(
)
;
await
requestFinished
(
request
)
;
let
spoofedLimitBytes
=
50
*
GiB
;
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
spoofedLimitBytes
=
32
*
GiB
;
}
Services
.
prefs
.
setBoolPref
(
"
privacy
.
resistFingerprinting
"
true
)
;
request
=
init
(
)
;
await
requestFinished
(
request
)
;
request
=
initTemporaryStorage
(
)
;
await
requestFinished
(
request
)
;
request
=
estimateOrigin
(
principal
)
;
await
requestFinished
(
request
)
;
const
expectedSpoofedGroupLimitBytes
=
Math
.
floor
(
spoofedLimitBytes
*
perGroupPercentage
)
;
is
(
expectedSpoofedGroupLimitBytes
request
.
result
.
limit
"
RFP
limit
should
be
applied
"
)
;
Services
.
prefs
.
clearUserPref
(
"
privacy
.
resistFingerprinting
"
)
;
resetGlobalLimit
(
)
;
request
=
reset
(
)
;
await
requestFinished
(
request
)
;
}
