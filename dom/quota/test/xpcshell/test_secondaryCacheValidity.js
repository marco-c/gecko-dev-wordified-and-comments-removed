const
{
FileUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
FileUtils
.
sys
.
mjs
"
)
;
const
{
PrincipalUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
PrincipalUtils
.
sys
.
mjs
"
)
;
const
{
QuotaUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
QuotaUtils
.
sys
.
mjs
"
)
;
async
function
testSecondaryCacheValidity
(
)
{
const
principal
=
PrincipalUtils
.
createPrincipal
(
"
http
:
/
/
example42
.
com
"
)
;
const
metadata
=
FileUtils
.
getFile
(
"
storage
/
default
/
http
+
+
+
example42
.
com
/
.
metadata
-
v2
"
)
;
info
(
"
Clearing
storage
"
)
;
{
const
request
=
Services
.
qms
.
clear
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Installing
package
"
)
;
installPackage
(
"
secondaryCacheValidity_profile
"
)
;
info
(
"
Initializing
storage
"
)
;
{
const
request
=
Services
.
qms
.
init
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
storage
"
)
;
{
const
request
=
Services
.
qms
.
initTemporaryStorage
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Getting
full
origin
metadata
"
)
;
{
const
request
=
Services
.
qms
.
getFullOriginMetadata
(
"
default
"
principal
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Getting
full
origin
metadata
"
)
;
const
fullOriginMetadataBefore
=
await
(
async
function
(
)
{
const
request
=
Services
.
qms
.
getFullOriginMetadata
(
"
default
"
principal
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
return
request
.
result
;
}
)
(
)
;
info
(
"
Shutting
down
storage
"
)
;
{
const
request
=
Services
.
qms
.
reset
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Removing
origin
metadata
"
)
;
metadata
.
remove
(
false
)
;
info
(
"
Initializing
storage
"
)
;
{
const
request
=
Services
.
qms
.
init
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
storage
"
)
;
{
const
request
=
Services
.
qms
.
initTemporaryStorage
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Getting
full
origin
metadata
"
)
;
const
fullOriginMetadataAfter
=
await
(
async
function
(
)
{
const
request
=
Services
.
qms
.
getFullOriginMetadata
(
"
default
"
principal
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
return
request
.
result
;
}
)
(
)
;
info
(
"
Verifying
full
origin
metadata
"
)
;
Assert
.
notEqual
(
BigInt
(
fullOriginMetadataBefore
.
lastAccessTime
)
BigInt
(
fullOriginMetadataAfter
.
lastAccessTime
)
"
Last
access
times
are
not
the
same
"
)
;
info
(
"
Client
usages
before
:
"
+
fullOriginMetadataBefore
.
clientUsages
)
;
info
(
"
Client
usages
after
:
"
+
fullOriginMetadataAfter
.
clientUsages
)
;
Assert
.
equal
(
fullOriginMetadataBefore
.
clientUsages
fullOriginMetadataAfter
.
clientUsages
"
Client
usages
are
the
same
"
)
;
info
(
"
Origin
usgae
before
:
"
+
fullOriginMetadataBefore
.
originUsage
)
;
info
(
"
Origin
usage
after
:
"
+
fullOriginMetadataAfter
.
originUsage
)
;
Assert
.
equal
(
fullOriginMetadataBefore
.
originUsage
fullOriginMetadataAfter
.
originUsage
"
Origin
usage
is
the
same
"
)
;
}
async
function
testSteps
(
)
{
add_task
(
{
pref_set
:
[
[
"
dom
.
quotaManager
.
loadQuotaFromCache
"
false
]
]
}
testSecondaryCacheValidity
)
;
}
