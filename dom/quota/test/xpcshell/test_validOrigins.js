async
function
testSteps
(
)
{
const
basePath
=
"
storage
/
default
/
"
;
const
longExampleOriginSubstring
=
"
a
"
.
repeat
(
255
-
"
https
:
/
/
example
.
.
com
"
.
length
)
;
const
origins
=
[
{
dirName
:
"
https
+
+
+
example
.
com
"
url
:
"
https
:
/
/
example
.
com
"
}
{
dirName
:
"
https
+
+
+
smaug
-
-
-
-
.
github
.
io
"
url
:
"
https
:
/
/
smaug
-
-
-
-
.
github
.
io
/
"
}
{
dirName
:
"
about
+
home
"
url
:
"
about
:
home
"
}
{
dirName
:
"
about
+
reader
"
url
:
"
about
:
reader
"
}
{
dirName
:
"
https
+
+
+
[
+
+
]
"
url
:
"
https
:
/
/
[
:
:
]
"
}
{
dirName
:
"
https
+
+
+
[
ffff
+
ffff
+
ffff
+
ffff
+
ffff
+
ffff
+
ffff
+
ffff
]
"
url
:
"
https
:
/
/
[
ffff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
:
ffff
]
"
}
{
dirName
:
"
http
+
+
+
[
2010
+
836b
+
4179
+
+
836b
+
4179
]
"
url
:
"
http
:
/
/
[
2010
:
836B
:
4179
:
:
836B
:
4179
]
:
80
"
}
{
dirName
:
"
https
+
+
+
[
+
+
ffff
+
8190
+
3426
]
"
url
:
"
https
:
/
/
[
:
:
FFFF
:
129
.
144
.
52
.
38
]
"
}
{
dirName
:
https
+
+
+
example
.
{
longExampleOriginSubstring
}
.
com
url
:
https
:
/
/
example
.
{
longExampleOriginSubstring
}
.
com
}
{
dirName
:
"
https
+
+
+
example
.
com
.
"
url
:
"
https
:
/
/
example
.
com
.
"
}
]
;
info
(
"
Initializing
"
)
;
let
request
=
init
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Initializing
temporary
storage
"
)
;
request
=
initTemporaryStorage
(
)
;
await
requestFinished
(
request
)
;
for
(
let
origin
of
origins
)
{
info
(
Testing
{
origin
.
url
}
)
;
try
{
request
=
initTemporaryOrigin
(
"
default
"
getPrincipal
(
origin
.
url
)
true
)
;
await
requestFinished
(
request
)
;
ok
(
true
"
Should
not
have
thrown
"
)
;
}
catch
(
ex
)
{
ok
(
false
"
Should
not
have
thrown
"
)
;
}
let
dir
=
getRelativeFile
(
basePath
+
origin
.
dirName
)
;
ok
(
dir
.
exists
(
)
"
Origin
was
created
"
)
;
Assert
.
strictEqual
(
origin
.
dirName
dir
.
leafName
Origin
{
origin
.
dirName
}
was
created
expectedly
)
;
}
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
}
