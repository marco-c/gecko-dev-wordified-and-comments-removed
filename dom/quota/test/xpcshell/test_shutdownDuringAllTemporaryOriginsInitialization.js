const
{
FileUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
FileUtils
.
sys
.
mjs
"
)
;
const
{
PrincipalUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
PrincipalUtils
.
sys
.
mjs
"
)
;
const
{
QuotaUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
dom
/
quota
/
test
/
modules
/
QuotaUtils
.
sys
.
mjs
"
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
async
function
testShutdownDuringAllTemporaryOriginsInitialization
(
)
{
const
principal1
=
PrincipalUtils
.
createPrincipal
(
"
https
:
/
/
1
.
example
.
com
"
)
;
const
principal2
=
PrincipalUtils
.
createPrincipal
(
"
https
:
/
/
2
.
example
.
com
"
)
;
const
metadata1
=
FileUtils
.
getFile
(
"
storage
/
default
/
https
+
+
+
1
.
example
.
com
/
.
metadata
-
v2
"
)
;
const
metadata2
=
FileUtils
.
getFile
(
"
storage
/
default
/
https
+
+
+
2
.
example
.
com
/
.
metadata
-
v2
"
)
;
info
(
"
Initializing
storage
"
)
;
{
const
request
=
Services
.
qms
.
init
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
storage
"
)
;
{
const
request
=
Services
.
qms
.
initTemporaryStorage
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
origin
"
)
;
{
const
request
=
Services
.
qms
.
initializeTemporaryOrigin
(
"
default
"
principal1
true
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
origin
"
)
;
{
const
request
=
Services
.
qms
.
initializeTemporaryOrigin
(
"
default
"
principal2
true
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Shutting
down
storage
"
)
;
{
const
request
=
Services
.
qms
.
reset
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
storage
"
)
;
{
const
request
=
Services
.
qms
.
init
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Initializing
temporary
storage
"
)
;
{
const
request
=
Services
.
qms
.
initTemporaryStorage
(
)
;
await
QuotaUtils
.
requestFinished
(
request
)
;
}
info
(
"
Removing
origin
metadata
"
)
;
metadata1
.
remove
(
false
)
;
info
(
"
Removing
origin
metadata
"
)
;
metadata2
.
remove
(
false
)
;
info
(
"
Starting
all
temporary
origins
initialization
"
)
;
const
initPromise
=
(
async
function
(
)
{
const
request
=
Services
.
qms
.
initializeAllTemporaryOrigins
(
)
;
const
promise
=
QuotaUtils
.
requestFinished
(
request
)
;
return
promise
;
}
)
(
)
;
info
(
"
Waiting
for
origin
initialization
to
start
"
)
;
await
TestUtils
.
topicObserved
(
"
QuotaManager
:
:
OriginInitializationStarted
"
)
;
info
(
"
Starting
shutdown
"
)
;
QuotaUtils
.
startShutdown
(
)
;
info
(
"
Waiting
for
all
temoporary
origins
initialization
to
finish
"
)
;
await
initPromise
;
info
(
"
Metadata
file
for
first
origin
exists
:
"
+
metadata1
.
exists
(
)
)
;
info
(
"
Metadata
file
for
second
origin
exists
:
"
+
metadata2
.
exists
(
)
)
;
todo
(
metadata1
.
exists
(
)
!
=
metadata2
.
exists
(
)
"
Metadata
for
the
second
origin
is
not
restored
"
)
;
}
async
function
testSteps
(
)
{
add_task
(
{
pref_set
:
[
[
"
dom
.
quotaManager
.
temporaryStorage
.
lazyOriginInitialization
"
true
]
[
"
dom
.
quotaManager
.
loadQuotaFromCache
"
false
]
[
"
dom
.
quotaManager
.
originInitialization
.
pauseOnIOThreadMs
"
2000
]
]
}
testShutdownDuringAllTemporaryOriginsInitialization
)
;
}
