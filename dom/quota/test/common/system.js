const
NS_ERROR_STORAGE_BUSY
=
Cr
.
NS_ERROR_STORAGE_BUSY
;
loadScript
(
"
dom
/
quota
/
test
/
common
/
global
.
js
"
)
;
function
getProfileDir
(
)
{
return
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
}
function
getRelativeFile
(
relativePath
baseFile
)
{
if
(
!
baseFile
)
{
baseFile
=
getProfileDir
(
)
;
}
let
file
=
baseFile
.
clone
(
)
;
if
(
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
)
{
let
winFile
=
file
.
QueryInterface
(
Ci
.
nsILocalFileWin
)
;
winFile
.
useDOSDevicePathSyntax
=
true
;
}
relativePath
.
split
(
"
/
"
)
.
forEach
(
function
(
component
)
{
if
(
component
=
=
"
.
.
"
)
{
file
=
file
.
parent
;
}
else
{
file
.
append
(
component
)
;
}
}
)
;
return
file
;
}
function
getCurrentPrincipal
(
)
{
return
Cc
[
"
mozilla
.
org
/
systemprincipal
;
1
"
]
.
createInstance
(
Ci
.
nsIPrincipal
)
;
}
function
getSimpleDatabase
(
principal
persistence
)
{
let
connection
=
Cc
[
"
mozilla
.
org
/
dom
/
sdb
-
connection
;
1
"
]
.
createInstance
(
Ci
.
nsISDBConnection
)
;
if
(
!
principal
)
{
principal
=
getCurrentPrincipal
(
)
;
}
connection
.
init
(
principal
persistence
)
;
return
connection
;
}
async
function
requestFinished
(
request
)
{
await
new
Promise
(
function
(
resolve
)
{
request
.
callback
=
function
(
)
{
resolve
(
)
;
}
;
}
)
;
if
(
request
.
resultCode
!
=
=
Cr
.
NS_OK
)
{
throw
new
RequestError
(
request
.
resultCode
request
.
resultName
)
;
}
return
request
.
result
;
}
