#
ifndef
DOM_QUOTA_TEST_GTEST_QUOTAMANAGERDEPENDENCYFIXTURE_H_
#
define
DOM_QUOTA_TEST_GTEST_QUOTAMANAGERDEPENDENCYFIXTURE_H_
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
:
:
test
{
class
QuotaManagerDependencyFixture
:
public
testing
:
:
Test
{
public
:
protected
:
static
void
InitializeFixture
(
)
;
static
void
ShutdownFixture
(
)
;
static
void
InitializeStorage
(
)
;
static
void
StorageInitialized
(
bool
*
aResult
=
nullptr
)
;
static
void
IsStorageInitialized
(
bool
*
aResult
)
;
static
void
AssertStorageIsInitialized
(
)
;
static
void
AssertStorageIsNotInitialized
(
)
;
static
void
ShutdownStorage
(
)
;
static
void
ClearStoragesForOrigin
(
const
OriginMetadata
&
aOriginMetadata
)
;
template
<
class
Invokable
class
.
.
.
Args
>
static
void
PerformOnBackgroundThread
(
Invokable
&
&
aInvokable
Args
&
&
.
.
.
aArgs
)
{
bool
done
=
false
;
auto
boundTask
=
std
:
:
bind
(
std
:
:
forward
<
Invokable
>
(
aInvokable
)
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
InvokeAsync
(
BackgroundTargetStrongRef
(
)
__func__
[
boundTask
=
std
:
:
move
(
boundTask
)
]
{
boundTask
(
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
)
{
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
}
template
<
class
Invokable
class
.
.
.
Args
>
static
void
PerformOnIOThread
(
Invokable
&
&
aInvokable
Args
&
&
.
.
.
aArgs
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
bool
done
=
false
;
auto
boundTask
=
std
:
:
bind
(
std
:
:
forward
<
Invokable
>
(
aInvokable
)
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
InvokeAsync
(
quotaManager
-
>
IOThread
(
)
__func__
[
boundTask
=
std
:
:
move
(
boundTask
)
]
(
)
{
boundTask
(
)
;
return
BoolPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
value
)
{
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
}
static
const
nsCOMPtr
<
nsISerialEventTarget
>
&
BackgroundTargetStrongRef
(
)
{
return
sBackgroundTarget
;
}
static
OriginMetadata
GetTestOriginMetadata
(
)
;
static
ClientMetadata
GetTestClientMetadata
(
)
;
static
OriginMetadata
GetOtherTestOriginMetadata
(
)
;
static
ClientMetadata
GetOtherTestClientMetadata
(
)
;
private
:
static
nsCOMPtr
<
nsISerialEventTarget
>
sBackgroundTarget
;
}
;
}
#
endif
