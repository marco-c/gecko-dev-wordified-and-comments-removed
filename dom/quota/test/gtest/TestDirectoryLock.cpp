#
include
"
DirectoryLockImpl
.
h
"
#
include
"
QuotaManagerDependencyFixture
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
OriginScope
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
UniversalDirectoryLock
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
:
:
test
{
class
DOM_Quota_DirectoryLock
:
public
QuotaManagerDependencyFixture
{
public
:
static
void
SetUpTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
InitializeFixture
(
)
)
;
}
static
void
TearDownTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownFixture
(
)
)
;
}
}
;
TEST_F
(
DOM_Quota_DirectoryLock
Drop_Timing
)
{
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
RefPtr
<
UniversalDirectoryLock
>
exclusiveDirectoryLock
=
quotaManager
-
>
CreateDirectoryLockInternal
(
PersistenceScope
:
:
CreateFromNull
(
)
OriginScope
:
:
FromNull
(
)
Nullable
<
Client
:
:
Type
>
(
)
true
DirectoryLockCategory
:
:
None
)
;
bool
done
=
false
;
exclusiveDirectoryLock
-
>
Acquire
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
auto
exclusiveDirectoryLockDropPromise
=
exclusiveDirectoryLock
-
>
Drop
(
)
;
exclusiveDirectoryLock
=
nullptr
;
RefPtr
<
UniversalDirectoryLock
>
sharedDirectoryLock
=
quotaManager
-
>
CreateDirectoryLockInternal
(
PersistenceScope
:
:
CreateFromNull
(
)
OriginScope
:
:
FromNull
(
)
Nullable
<
Client
:
:
Type
>
(
)
false
DirectoryLockCategory
:
:
None
)
;
ASSERT_TRUE
(
sharedDirectoryLock
-
>
MustWait
(
)
)
;
done
=
false
;
exclusiveDirectoryLockDropPromise
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
BoolPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
ASSERT_FALSE
(
sharedDirectoryLock
-
>
MustWait
(
)
)
;
sharedDirectoryLock
=
nullptr
;
}
)
;
}
}
