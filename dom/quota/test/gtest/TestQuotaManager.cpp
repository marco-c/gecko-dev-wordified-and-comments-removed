#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
QuotaManagerDependencyFixture
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
:
:
test
{
class
TestQuotaManager
:
public
QuotaManagerDependencyFixture
{
public
:
static
void
SetUpTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
InitializeFixture
(
)
)
;
}
static
void
TearDownTestCase
(
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownFixture
(
)
)
;
}
}
;
TEST_F
(
TestQuotaManager
ShutdownStorage_Simple
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
ASSERT_NS_SUCCEEDED
(
quotaManager
-
>
EnsureStorageIsInitializedInternal
(
)
)
;
ASSERT_TRUE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
}
TEST_F
(
TestQuotaManager
ShutdownStorage_Ongoing
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
ASSERT_NS_SUCCEEDED
(
quotaManager
-
>
EnsureStorageIsInitializedInternal
(
)
)
;
ASSERT_TRUE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
nsTArray
<
RefPtr
<
BoolPromise
>
>
promises
;
promises
.
AppendElement
(
quotaManager
-
>
ShutdownStorage
(
)
)
;
promises
.
AppendElement
(
quotaManager
-
>
ShutdownStorage
(
)
)
;
bool
done
=
false
;
BoolPromise
:
:
All
(
GetCurrentSerialEventTarget
(
)
promises
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
CopyableTArray
<
bool
>
&
aResolveValues
)
{
done
=
true
;
}
[
&
done
]
(
nsresult
aRejectValue
)
{
ASSERT_TRUE
(
false
)
;
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
}
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
}
TEST_F
(
TestQuotaManager
ShutdownStorage_OngoingWithScheduledInitialization
)
{
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
ASSERT_NS_SUCCEEDED
(
quotaManager
-
>
EnsureStorageIsInitializedInternal
(
)
)
;
ASSERT_TRUE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
nsTArray
<
RefPtr
<
BoolPromise
>
>
promises
;
promises
.
AppendElement
(
quotaManager
-
>
ShutdownStorage
(
)
)
;
promises
.
AppendElement
(
quotaManager
-
>
ClearPrivateRepository
(
)
)
;
promises
.
AppendElement
(
quotaManager
-
>
ShutdownStorage
(
)
)
;
bool
done
=
false
;
BoolPromise
:
:
All
(
GetCurrentSerialEventTarget
(
)
promises
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
&
done
]
(
const
CopyableTArray
<
bool
>
&
aResolveValues
)
{
done
=
true
;
}
[
&
done
]
(
nsresult
aRejectValue
)
{
ASSERT_TRUE
(
false
)
;
done
=
true
;
}
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
done
]
(
)
{
return
done
;
}
)
;
}
)
;
PerformOnIOThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_FALSE
(
quotaManager
-
>
IsStorageInitializedInternal
(
)
)
;
}
)
;
ASSERT_NO_FATAL_FAILURE
(
ShutdownStorage
(
)
)
;
}
}
