#
include
"
Flatten
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
TEST
(
Flatten
FlatEmpty
)
{
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
int
>
{
}
)
)
{
Unused
<
<
item
;
FAIL
(
)
;
}
}
TEST
(
Flatten
NestedOuterEmpty
)
{
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
CopyableTArray
<
int
>
>
{
}
)
)
{
Unused
<
<
item
;
FAIL
(
)
;
}
}
TEST
(
Flatten
NestedInnerEmpty
)
{
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
CopyableTArray
<
int
>
>
{
CopyableTArray
<
int
>
{
}
}
)
)
{
Unused
<
<
item
;
FAIL
(
)
;
}
}
TEST
(
Flatten
NestedInnerSingular
)
{
nsTArray
<
int
>
flattened
;
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
CopyableTArray
<
int
>
>
{
CopyableTArray
<
int
>
{
1
}
}
)
)
{
flattened
.
AppendElement
(
item
)
;
}
EXPECT_EQ
(
nsTArray
{
1
}
flattened
)
;
}
TEST
(
Flatten
NestedInnerSingulars
)
{
nsTArray
<
int
>
flattened
;
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
CopyableTArray
<
int
>
>
{
CopyableTArray
<
int
>
{
1
}
CopyableTArray
<
int
>
{
2
}
}
)
)
{
flattened
.
AppendElement
(
item
)
;
}
EXPECT_EQ
(
(
nsTArray
{
1
2
}
)
flattened
)
;
}
TEST
(
Flatten
NestedInnerNonSingulars
)
{
nsTArray
<
int
>
flattened
;
for
(
const
auto
&
item
:
Flatten
<
int
>
(
nsTArray
<
CopyableTArray
<
int
>
>
{
CopyableTArray
<
int
>
{
1
2
}
CopyableTArray
<
int
>
{
3
4
}
}
)
)
{
flattened
.
AppendElement
(
item
)
;
}
EXPECT_EQ
(
(
nsTArray
{
1
2
3
4
}
)
flattened
)
;
}
}
