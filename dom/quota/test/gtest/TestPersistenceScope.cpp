#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceScope
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
TEST
(
DOM_Quota_PersistenceScope
SanityChecks
)
{
{
const
auto
persistenceScope
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PERSISTENT
)
)
;
ASSERT_TRUE
(
persistenceScope
.
IsValue
(
)
)
;
ASSERT_EQ
(
persistenceScope
.
GetValue
(
)
PERSISTENCE_TYPE_PERSISTENT
)
;
}
{
const
auto
persistenceScope
(
PersistenceScope
:
:
CreateFromNull
(
)
)
;
ASSERT_TRUE
(
persistenceScope
.
IsNull
(
)
)
;
}
}
TEST
(
DOM_Quota_PersistenceScope
MatchesValue
)
{
{
const
auto
persistenceScope
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PERSISTENT
)
)
;
ASSERT_TRUE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PERSISTENT
)
)
)
;
ASSERT_FALSE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_TEMPORARY
)
)
)
;
ASSERT_FALSE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_DEFAULT
)
)
)
;
ASSERT_FALSE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PRIVATE
)
)
)
;
}
{
const
auto
persistenceScope
(
PersistenceScope
:
:
CreateFromNull
(
)
)
;
ASSERT_TRUE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PERSISTENT
)
)
)
;
ASSERT_TRUE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_TEMPORARY
)
)
)
;
ASSERT_TRUE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_DEFAULT
)
)
)
;
ASSERT_TRUE
(
persistenceScope
.
Matches
(
PersistenceScope
:
:
CreateFromValue
(
PERSISTENCE_TYPE_PRIVATE
)
)
)
;
}
}
}
