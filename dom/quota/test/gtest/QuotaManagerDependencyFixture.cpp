#
include
"
QuotaManagerDependencyFixture
.
h
"
#
include
"
mozIStorageService
.
h
"
#
include
"
mozStorageCID
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManagerService
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundSharedTypes
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsIPrefService
.
h
"
#
include
"
nsIQuotaCallbacks
.
h
"
#
include
"
nsIQuotaRequests
.
h
"
#
include
"
nsIVariant
.
h
"
#
include
"
nsScriptSecurityManager
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
:
:
test
{
namespace
{
class
RequestResolver
final
:
public
nsIQuotaCallback
{
public
:
RequestResolver
(
)
:
mDone
(
false
)
{
}
bool
Done
(
)
const
{
return
mDone
;
}
NS_DECL_ISUPPORTS
NS_IMETHOD
OnComplete
(
nsIQuotaRequest
*
aRequest
)
override
{
mDone
=
true
;
return
NS_OK
;
}
private
:
~
RequestResolver
(
)
=
default
;
bool
mDone
;
}
;
}
NS_IMPL_ISUPPORTS
(
RequestResolver
nsIQuotaCallback
)
void
QuotaManagerDependencyFixture
:
:
InitializeFixture
(
)
{
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
prefs
-
>
SetBoolPref
(
"
dom
.
quotaManager
.
testing
"
true
)
;
nsCOMPtr
<
mozIStorageService
>
storageService
=
do_GetService
(
MOZ_STORAGE_SERVICE_CONTRACTID
)
;
ASSERT_TRUE
(
storageService
)
;
nsIObserver
*
observer
=
QuotaManager
:
:
GetObserver
(
)
;
ASSERT_TRUE
(
observer
)
;
nsresult
rv
=
observer
-
>
Observe
(
nullptr
"
profile
-
do
-
change
"
nullptr
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
ASSERT_NO_FATAL_FAILURE
(
EnsureQuotaManager
(
)
)
;
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
ASSERT_TRUE
(
quotaManager
-
>
OwningThread
(
)
)
;
sBackgroundTarget
=
quotaManager
-
>
OwningThread
(
)
;
}
void
QuotaManagerDependencyFixture
:
:
ShutdownFixture
(
)
{
nsCOMPtr
<
nsIPrefBranch
>
prefs
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
prefs
-
>
SetBoolPref
(
"
dom
.
quotaManager
.
testing
"
false
)
;
nsIObserver
*
observer
=
QuotaManager
:
:
GetObserver
(
)
;
ASSERT_TRUE
(
observer
)
;
nsresult
rv
=
observer
-
>
Observe
(
nullptr
"
profile
-
before
-
change
-
qm
"
nullptr
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
:
:
Reset
(
)
;
}
)
;
sBackgroundTarget
=
nullptr
;
}
void
QuotaManagerDependencyFixture
:
:
InitializeStorage
(
)
{
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
Await
(
quotaManager
-
>
InitializeStorage
(
)
)
;
}
)
;
}
void
QuotaManagerDependencyFixture
:
:
StorageInitialized
(
bool
*
aResult
)
{
ASSERT_TRUE
(
aResult
)
;
PerformOnBackgroundThread
(
[
aResult
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
auto
value
=
Await
(
quotaManager
-
>
StorageInitialized
(
)
)
;
if
(
value
.
IsResolve
(
)
)
{
*
aResult
=
value
.
ResolveValue
(
)
;
}
else
{
*
aResult
=
false
;
}
}
)
;
}
void
QuotaManagerDependencyFixture
:
:
AssertStorageInitialized
(
)
{
bool
result
;
ASSERT_NO_FATAL_FAILURE
(
StorageInitialized
(
&
result
)
)
;
ASSERT_TRUE
(
result
)
;
}
void
QuotaManagerDependencyFixture
:
:
AssertStorageNotInitialized
(
)
{
bool
result
;
ASSERT_NO_FATAL_FAILURE
(
StorageInitialized
(
&
result
)
)
;
ASSERT_FALSE
(
result
)
;
}
void
QuotaManagerDependencyFixture
:
:
ShutdownStorage
(
)
{
PerformOnBackgroundThread
(
[
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
Await
(
quotaManager
-
>
ShutdownStorage
(
)
)
;
}
)
;
}
void
QuotaManagerDependencyFixture
:
:
ClearStoragesForOrigin
(
const
OriginMetadata
&
aOriginMetadata
)
{
PerformOnBackgroundThread
(
[
&
aOriginMetadata
]
(
)
{
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
ASSERT_TRUE
(
quotaManager
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
BasePrincipal
:
:
CreateContentPrincipal
(
aOriginMetadata
.
mOrigin
)
;
QM_TRY
(
MOZ_TO_RESULT
(
principal
)
QM_TEST_FAIL
)
;
mozilla
:
:
ipc
:
:
PrincipalInfo
principalInfo
;
QM_TRY
(
MOZ_TO_RESULT
(
PrincipalToPrincipalInfo
(
principal
&
principalInfo
)
)
QM_TEST_FAIL
)
;
Await
(
quotaManager
-
>
ClearStoragesForOrigin
(
Nothing
(
)
principalInfo
Nothing
(
)
)
)
;
}
)
;
}
OriginMetadata
QuotaManagerDependencyFixture
:
:
GetTestOriginMetadata
(
)
{
return
{
"
"
_ns
"
example
.
com
"
_ns
"
http
:
/
/
example
.
com
"
_ns
"
http
:
/
/
example
.
com
"
_ns
false
PERSISTENCE_TYPE_DEFAULT
}
;
}
ClientMetadata
QuotaManagerDependencyFixture
:
:
GetTestClientMetadata
(
)
{
return
{
GetTestOriginMetadata
(
)
Client
:
:
SDB
}
;
}
OriginMetadata
QuotaManagerDependencyFixture
:
:
GetOtherTestOriginMetadata
(
)
{
return
{
"
"
_ns
"
other
-
example
.
com
"
_ns
"
http
:
/
/
other
-
example
.
com
"
_ns
"
http
:
/
/
other
-
example
.
com
"
_ns
false
PERSISTENCE_TYPE_DEFAULT
}
;
}
ClientMetadata
QuotaManagerDependencyFixture
:
:
GetOtherTestClientMetadata
(
)
{
return
{
GetOtherTestOriginMetadata
(
)
Client
:
:
SDB
}
;
}
void
QuotaManagerDependencyFixture
:
:
EnsureQuotaManager
(
)
{
AutoJSAPI
jsapi
;
bool
ok
=
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
ASSERT_TRUE
(
ok
)
;
nsCOMPtr
<
nsIQuotaManagerService
>
qms
=
QuotaManagerService
:
:
GetOrCreate
(
)
;
ASSERT_TRUE
(
qms
)
;
nsCOMPtr
<
nsIQuotaRequest
>
request
;
nsresult
rv
=
qms
-
>
StorageName
(
getter_AddRefs
(
request
)
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
RefPtr
<
RequestResolver
>
resolver
=
new
RequestResolver
(
)
;
rv
=
request
-
>
SetCallback
(
resolver
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
SpinEventLoopUntil
(
"
Promise
is
fulfilled
"
_ns
[
&
resolver
]
(
)
{
return
resolver
-
>
Done
(
)
;
}
)
;
}
nsCOMPtr
<
nsISerialEventTarget
>
QuotaManagerDependencyFixture
:
:
sBackgroundTarget
;
}
