async
function
testSteps
(
)
{
const
lsDirs
=
[
"
storage
/
default
/
http
+
+
+
localhost
/
ls
"
"
storage
/
default
/
http
+
+
+
www
.
mozilla
.
org
/
ls
"
"
storage
/
default
/
http
+
+
+
example
.
com
/
ls
"
]
;
const
principalInfos
=
[
"
http
:
/
/
localhost
"
"
http
:
/
/
www
.
mozilla
.
org
"
"
http
:
/
/
example
.
com
"
]
;
const
data
=
[
{
key
:
"
foo0
"
value
:
"
bar
"
}
{
key
:
"
foo1
"
value
:
"
A
"
}
{
key
:
"
foo2
"
value
:
"
A
"
.
repeat
(
100
)
}
]
;
function
getLocalStorage
(
principal
)
{
return
Services
.
domStorageManager
.
createStorage
(
null
principal
principal
"
"
)
;
}
info
(
"
Clearing
"
)
;
let
request
=
clear
(
)
;
await
requestFinished
(
request
)
;
info
(
"
Installing
package
"
)
;
installPackage
(
"
localStorageArchive4upgrade_profile
"
)
;
info
(
"
Checking
ls
dirs
"
)
;
for
(
let
lsDir
of
lsDirs
)
{
let
dir
=
getRelativeFile
(
lsDir
)
;
exists
=
dir
.
exists
(
)
;
ok
(
exists
"
ls
directory
does
exist
"
)
;
}
request
=
init
(
)
;
request
=
await
requestFinished
(
request
)
;
info
(
"
Checking
ls
dirs
"
)
;
for
(
let
lsDir
of
lsDirs
)
{
let
dir
=
getRelativeFile
(
lsDir
)
;
exists
=
dir
.
exists
(
)
;
ok
(
!
exists
"
ls
directory
doesn
'
t
exist
"
)
;
}
info
(
"
Getting
storages
"
)
;
let
storages
=
[
]
;
for
(
let
i
=
0
;
i
<
principalInfos
.
length
;
i
+
+
)
{
let
storage
=
getLocalStorage
(
getPrincipal
(
principalInfos
[
i
]
)
)
;
storages
.
push
(
storage
)
;
}
info
(
"
Verifying
data
"
)
;
for
(
let
i
=
0
;
i
<
storages
.
length
;
i
+
+
)
{
is
(
storages
[
i
]
.
getItem
(
data
[
i
]
.
key
)
data
[
i
]
.
value
"
Correct
value
"
)
;
}
}
