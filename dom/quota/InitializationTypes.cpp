#
include
"
InitializationTypes
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TelemetryHistogramEnums
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
namespace
{
nsLiteralCString
GetInitializationString
(
const
Initialization
aInitialization
)
{
switch
(
aInitialization
)
{
case
Initialization
:
:
Storage
:
return
"
Storage
"
_ns
;
case
Initialization
:
:
TemporaryStorage
:
return
"
TemporaryStorage
"
_ns
;
case
Initialization
:
:
DefaultRepository
:
return
"
DefaultRepository
"
_ns
;
case
Initialization
:
:
TemporaryRepository
:
return
"
TemporaryRepository
"
_ns
;
case
Initialization
:
:
UpgradeStorageFrom0_0To1_0
:
return
"
UpgradeStorageFrom0_0To1_0
"
_ns
;
case
Initialization
:
:
UpgradeStorageFrom1_0To2_0
:
return
"
UpgradeStorageFrom1_0To2_0
"
_ns
;
case
Initialization
:
:
UpgradeStorageFrom2_0To2_1
:
return
"
UpgradeStorageFrom2_0To2_1
"
_ns
;
case
Initialization
:
:
UpgradeStorageFrom2_1To2_2
:
return
"
UpgradeStorageFrom2_1To2_2
"
_ns
;
case
Initialization
:
:
UpgradeStorageFrom2_2To2_3
:
return
"
UpgradeStorageFrom2_2To2_3
"
_ns
;
case
Initialization
:
:
UpgradeFromIndexedDBDirectory
:
return
"
UpgradeFromIndexedDBDirectory
"
_ns
;
case
Initialization
:
:
UpgradeFromPersistentStorageDirectory
:
return
"
UpgradeFromPersistentStorageDirectory
"
_ns
;
default
:
MOZ_CRASH
(
"
Bad
initialization
value
!
"
)
;
}
}
}
void
InitializationInfo
:
:
ReportFirstInitializationAttempt
(
const
Initialization
aInitialization
const
bool
aSuccess
)
{
MOZ_ASSERT
(
!
InitializationAttempted
(
aInitialization
)
)
;
mInitializationAttempts
|
=
aInitialization
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
QM_FIRST_INITIALIZATION_ATTEMPT
GetInitializationString
(
aInitialization
)
static_cast
<
uint32_t
>
(
aSuccess
)
)
;
}
}
