#
ifndef
DOM_QUOTA_ORIGININFO_H_
#
define
DOM_QUOTA_ORIGININFO_H_
#
include
"
Assertions
.
h
"
#
include
"
ClientUsageArray
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManager
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
class
CanonicalQuotaObject
;
class
GroupInfo
;
class
OriginInfo
final
{
friend
class
CanonicalQuotaObject
;
friend
class
GroupInfo
;
friend
class
PersistOp
;
friend
class
QuotaManager
;
public
:
OriginInfo
(
GroupInfo
*
aGroupInfo
const
nsACString
&
aOrigin
const
nsACString
&
aStorageOrigin
bool
aIsPrivate
const
ClientUsageArray
&
aClientUsages
uint64_t
aUsage
int64_t
aAccessTime
bool
aPersisted
bool
aDirectoryExists
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
OriginInfo
)
GroupInfo
*
GetGroupInfo
(
)
const
{
return
mGroupInfo
;
}
const
nsCString
&
Origin
(
)
const
{
return
mOrigin
;
}
int64_t
LockedUsage
(
)
const
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
#
ifdef
DEBUG
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
uint64_t
usage
=
0
;
for
(
Client
:
:
Type
type
:
quotaManager
-
>
AllClientTypes
(
)
)
{
AssertNoOverflow
(
usage
mClientUsages
[
type
]
.
valueOr
(
0
)
)
;
usage
+
=
mClientUsages
[
type
]
.
valueOr
(
0
)
;
}
MOZ_ASSERT
(
mUsage
=
=
usage
)
;
#
endif
return
mUsage
;
}
int64_t
LockedAccessTime
(
)
const
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
return
mAccessTime
;
}
bool
LockedPersisted
(
)
const
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
return
mPersisted
;
}
bool
IsExtensionOrigin
(
)
const
{
return
mIsExtension
;
}
bool
LockedDirectoryExists
(
)
const
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
return
mDirectoryExists
;
}
OriginMetadata
FlattenToOriginMetadata
(
)
const
;
FullOriginMetadata
LockedFlattenToFullOriginMetadata
(
)
const
;
nsresult
LockedBindToStatement
(
mozIStorageStatement
*
aStatement
)
const
;
private
:
~
OriginInfo
(
)
{
MOZ_COUNT_DTOR
(
OriginInfo
)
;
MOZ_ASSERT
(
!
mCanonicalQuotaObjects
.
Count
(
)
)
;
}
void
LockedDecreaseUsage
(
Client
:
:
Type
aClientType
int64_t
aSize
)
;
void
LockedResetUsageForClient
(
Client
:
:
Type
aClientType
)
;
UsageInfo
LockedGetUsageForClient
(
Client
:
:
Type
aClientType
)
;
void
LockedUpdateAccessTime
(
int64_t
aAccessTime
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
mAccessTime
=
aAccessTime
;
if
(
!
mAccessed
)
{
mAccessed
=
true
;
}
}
void
LockedPersist
(
)
;
void
LockedDirectoryCreated
(
)
;
nsTHashMap
<
nsStringHashKey
NotNull
<
CanonicalQuotaObject
*
>
>
mCanonicalQuotaObjects
;
ClientUsageArray
mClientUsages
;
GroupInfo
*
mGroupInfo
;
const
nsCString
mOrigin
;
const
nsCString
mStorageOrigin
;
uint64_t
mUsage
;
int64_t
mAccessTime
;
bool
mIsPrivate
;
bool
mAccessed
;
bool
mPersisted
;
const
bool
mIsExtension
;
bool
mDirectoryExists
;
}
;
class
OriginInfoAccessTimeComparator
{
public
:
bool
Equals
(
const
NotNull
<
RefPtr
<
const
OriginInfo
>
>
&
a
const
NotNull
<
RefPtr
<
const
OriginInfo
>
>
&
b
)
const
{
return
a
-
>
LockedAccessTime
(
)
=
=
b
-
>
LockedAccessTime
(
)
;
}
bool
LessThan
(
const
NotNull
<
RefPtr
<
const
OriginInfo
>
>
&
a
const
NotNull
<
RefPtr
<
const
OriginInfo
>
>
&
b
)
const
{
return
a
-
>
LockedAccessTime
(
)
<
b
-
>
LockedAccessTime
(
)
;
}
}
;
}
#
endif
