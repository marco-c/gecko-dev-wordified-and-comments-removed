#
include
"
GroupInfo
.
h
"
#
include
"
OriginInfo
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
AssertionsImpl
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
already_AddRefed
<
OriginInfo
>
GroupInfo
:
:
LockedGetOriginInfo
(
const
nsACString
&
aOrigin
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
for
(
const
auto
&
originInfo
:
mOriginInfos
)
{
if
(
originInfo
-
>
mOrigin
=
=
aOrigin
)
{
RefPtr
<
OriginInfo
>
result
=
originInfo
;
return
result
.
forget
(
)
;
}
}
return
nullptr
;
}
void
GroupInfo
:
:
LockedAddOriginInfo
(
NotNull
<
RefPtr
<
OriginInfo
>
>
&
&
aOriginInfo
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
NS_ASSERTION
(
!
mOriginInfos
.
Contains
(
aOriginInfo
)
"
Replacing
an
existing
entry
!
"
)
;
mOriginInfos
.
AppendElement
(
std
:
:
move
(
aOriginInfo
)
)
;
uint64_t
usage
=
aOriginInfo
-
>
LockedUsage
(
)
;
if
(
!
aOriginInfo
-
>
LockedPersisted
(
)
)
{
AssertNoOverflow
(
mUsage
usage
)
;
mUsage
+
=
usage
;
}
QuotaManager
*
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
AssertNoOverflow
(
quotaManager
-
>
mTemporaryStorageUsage
usage
)
;
quotaManager
-
>
mTemporaryStorageUsage
+
=
usage
;
}
void
GroupInfo
:
:
LockedAdjustUsageForRemovedOriginInfo
(
const
OriginInfo
&
aOriginInfo
)
{
const
uint64_t
usage
=
aOriginInfo
.
LockedUsage
(
)
;
if
(
!
aOriginInfo
.
LockedPersisted
(
)
)
{
AssertNoUnderflow
(
mUsage
usage
)
;
mUsage
-
=
usage
;
}
QuotaManager
*
const
quotaManager
=
QuotaManager
:
:
Get
(
)
;
MOZ_ASSERT
(
quotaManager
)
;
AssertNoUnderflow
(
quotaManager
-
>
mTemporaryStorageUsage
usage
)
;
quotaManager
-
>
mTemporaryStorageUsage
-
=
usage
;
}
void
GroupInfo
:
:
LockedRemoveOriginInfo
(
const
nsACString
&
aOrigin
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
const
auto
foundIt
=
std
:
:
find_if
(
mOriginInfos
.
cbegin
(
)
mOriginInfos
.
cend
(
)
[
&
aOrigin
]
(
const
auto
&
originInfo
)
{
return
originInfo
-
>
mOrigin
=
=
aOrigin
;
}
)
;
if
(
foundIt
!
=
mOriginInfos
.
cend
(
)
)
{
LockedAdjustUsageForRemovedOriginInfo
(
*
*
foundIt
)
;
mOriginInfos
.
RemoveElementAt
(
foundIt
)
;
}
}
void
GroupInfo
:
:
LockedRemoveOriginInfos
(
)
{
AssertCurrentThreadOwnsQuotaMutex
(
)
;
for
(
const
auto
&
originInfo
:
std
:
:
exchange
(
mOriginInfos
{
}
)
)
{
LockedAdjustUsageForRemovedOriginInfo
(
*
originInfo
)
;
}
}
}
