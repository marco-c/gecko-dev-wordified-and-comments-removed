#
ifndef
mozilla_dom_quota_ActorsChild_h
#
define
mozilla_dom_quota_ActorsChild_h
#
include
"
mozilla
/
dom
/
quota
/
PQuotaChild
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PQuotaRequestChild
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PQuotaUsageRequestChild
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
BackgroundChildImpl
;
}
namespace
dom
{
namespace
quota
{
class
QuotaManagerService
;
class
Request
;
class
UsageRequest
;
class
QuotaChild
final
:
public
PQuotaChild
{
friend
class
mozilla
:
:
ipc
:
:
BackgroundChildImpl
;
friend
class
QuotaManagerService
;
QuotaManagerService
*
mService
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIEventTarget
>
mOwningThread
;
#
endif
public
:
void
AssertIsOnOwningThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
private
:
explicit
QuotaChild
(
QuotaManagerService
*
aService
)
;
~
QuotaChild
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
PQuotaUsageRequestChild
*
AllocPQuotaUsageRequestChild
(
const
UsageRequestParams
&
aParams
)
override
;
virtual
bool
DeallocPQuotaUsageRequestChild
(
PQuotaUsageRequestChild
*
aActor
)
override
;
virtual
PQuotaRequestChild
*
AllocPQuotaRequestChild
(
const
RequestParams
&
aParams
)
override
;
virtual
bool
DeallocPQuotaRequestChild
(
PQuotaRequestChild
*
aActor
)
override
;
}
;
class
QuotaUsageRequestChild
final
:
public
PQuotaUsageRequestChild
{
friend
class
QuotaChild
;
friend
class
QuotaManagerService
;
RefPtr
<
UsageRequest
>
mRequest
;
public
:
void
AssertIsOnOwningThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
private
:
explicit
QuotaUsageRequestChild
(
UsageRequest
*
aRequest
)
;
~
QuotaUsageRequestChild
(
)
;
void
HandleResponse
(
nsresult
aResponse
)
;
void
HandleResponse
(
const
OriginUsageResponse
&
aResponse
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
UsageRequestResponse
&
aResponse
)
override
;
}
;
class
QuotaRequestChild
final
:
public
PQuotaRequestChild
{
friend
class
QuotaChild
;
friend
class
QuotaManagerService
;
RefPtr
<
Request
>
mRequest
;
public
:
void
AssertIsOnOwningThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
private
:
explicit
QuotaRequestChild
(
Request
*
aRequest
)
;
~
QuotaRequestChild
(
)
;
void
HandleResponse
(
nsresult
aResponse
)
;
void
HandleResponse
(
)
;
void
HandleResponse
(
bool
aResponse
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
RequestResponse
&
aResponse
)
override
;
}
;
}
}
}
#
endif
