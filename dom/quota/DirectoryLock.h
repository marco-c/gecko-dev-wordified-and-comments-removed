#
ifndef
DOM_QUOTA_DIRECTORYLOCK_H_
#
define
DOM_QUOTA_DIRECTORYLOCK_H_
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Client
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
class
ClientDirectoryLock
;
class
OpenDirectoryListener
;
struct
OriginMetadata
;
class
NS_NO_VTABLE
DirectoryLock
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
int64_t
Id
(
)
const
=
0
;
virtual
void
Acquire
(
RefPtr
<
OpenDirectoryListener
>
aOpenListener
)
=
0
;
virtual
void
AcquireImmediately
(
)
=
0
;
virtual
void
Log
(
)
const
=
0
;
}
;
class
NS_NO_VTABLE
OriginDirectoryLock
:
public
DirectoryLock
{
public
:
virtual
PersistenceType
GetPersistenceType
(
)
const
=
0
;
virtual
quota
:
:
OriginMetadata
OriginMetadata
(
)
const
=
0
;
virtual
const
nsACString
&
Origin
(
)
const
=
0
;
}
;
class
NS_NO_VTABLE
ClientDirectoryLock
:
public
OriginDirectoryLock
{
public
:
virtual
Client
:
:
Type
ClientType
(
)
const
=
0
;
}
;
class
UniversalDirectoryLock
:
public
DirectoryLock
{
public
:
virtual
const
Nullable
<
PersistenceType
>
&
NullablePersistenceType
(
)
const
=
0
;
virtual
const
OriginScope
&
GetOriginScope
(
)
const
=
0
;
virtual
const
Nullable
<
Client
:
:
Type
>
&
NullableClientType
(
)
const
=
0
;
virtual
RefPtr
<
ClientDirectoryLock
>
SpecializeForClient
(
PersistenceType
aPersistenceType
const
OriginMetadata
&
aOriginMetadata
Client
:
:
Type
aClientType
)
const
=
0
;
}
;
class
NS_NO_VTABLE
OpenDirectoryListener
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
DirectoryLockAcquired
(
DirectoryLock
*
aLock
)
=
0
;
virtual
void
DirectoryLockFailed
(
)
=
0
;
protected
:
virtual
~
OpenDirectoryListener
(
)
=
default
;
}
;
}
#
endif
