#
ifndef
DOM_QUOTA_DIRECTORYLOCK_H_
#
define
DOM_QUOTA_DIRECTORYLOCK_H_
#
include
<
cstdint
>
#
include
<
functional
>
#
include
"
nscore
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Client
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
ForwardDecls
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
:
:
dom
{
template
<
typename
T
>
struct
Nullable
;
}
namespace
mozilla
:
:
dom
:
:
quota
{
enum
class
DirectoryLockCategory
:
uint8_t
;
struct
OriginMetadata
;
class
OriginScope
;
class
PersistenceScope
;
class
NS_NO_VTABLE
DirectoryLock
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
int64_t
Id
(
)
const
=
0
;
virtual
DirectoryLockCategory
Category
(
)
const
=
0
;
virtual
bool
Acquired
(
)
const
=
0
;
virtual
bool
MustWait
(
)
const
=
0
;
virtual
nsTArray
<
RefPtr
<
DirectoryLock
>
>
LocksMustWaitFor
(
)
const
=
0
;
virtual
bool
Invalidated
(
)
const
=
0
;
virtual
bool
Dropped
(
)
const
=
0
;
virtual
RefPtr
<
BoolPromise
>
Acquire
(
)
=
0
;
virtual
void
AcquireImmediately
(
)
=
0
;
virtual
void
AssertIsAcquiredExclusively
(
)
=
0
;
virtual
RefPtr
<
BoolPromise
>
Drop
(
)
=
0
;
virtual
void
OnInvalidate
(
std
:
:
function
<
void
(
)
>
&
&
aCallback
)
=
0
;
virtual
void
Log
(
)
const
=
0
;
}
;
class
NS_NO_VTABLE
OriginDirectoryLock
:
public
DirectoryLock
{
public
:
virtual
PersistenceType
GetPersistenceType
(
)
const
=
0
;
virtual
quota
:
:
OriginMetadata
OriginMetadata
(
)
const
=
0
;
virtual
const
nsACString
&
Origin
(
)
const
=
0
;
}
;
class
NS_NO_VTABLE
ClientDirectoryLock
:
public
OriginDirectoryLock
{
public
:
virtual
Client
:
:
Type
ClientType
(
)
const
=
0
;
}
;
class
UniversalDirectoryLock
:
public
DirectoryLock
{
public
:
virtual
const
PersistenceScope
&
PersistenceScopeRef
(
)
const
=
0
;
virtual
const
OriginScope
&
GetOriginScope
(
)
const
=
0
;
virtual
const
Nullable
<
Client
:
:
Type
>
&
NullableClientType
(
)
const
=
0
;
virtual
RefPtr
<
ClientDirectoryLock
>
SpecializeForClient
(
PersistenceType
aPersistenceType
const
OriginMetadata
&
aOriginMetadata
Client
:
:
Type
aClientType
)
const
=
0
;
}
;
template
<
typename
T
>
constexpr
void
SafeDropDirectoryLock
(
RefPtr
<
T
>
&
aDirectoryLock
)
;
template
<
typename
T
>
constexpr
void
DropDirectoryLock
(
RefPtr
<
T
>
&
aDirectoryLock
)
;
template
<
typename
T
>
constexpr
void
SafeDropDirectoryLockIfNotDropped
(
RefPtr
<
T
>
&
aDirectoryLock
)
;
template
<
typename
T
>
constexpr
void
DropDirectoryLockIfNotDropped
(
RefPtr
<
T
>
&
aDirectoryLock
)
;
}
#
endif
