#
ifndef
DOM_QUOTA_QMRESULTINLINES_H_
#
define
DOM_QUOTA_QMRESULTINLINES_H_
#
ifndef
DOM_QUOTA_QMRESULT_H_
#
error
Must
include
QMResult
.
h
first
#
endif
#
ifdef
QM_ERROR_STACKS_ENABLED
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
nsError
.
h
"
#
endif
namespace
mozilla
{
#
ifdef
QM_ERROR_STACKS_ENABLED
template
<
>
class
MOZ_MUST_USE_TYPE
GenericErrorResult
<
QMResult
>
{
QMResult
mErrorValue
;
template
<
typename
V
typename
E2
>
friend
class
Result
;
public
:
explicit
GenericErrorResult
(
const
QMResult
&
aErrorValue
)
:
mErrorValue
(
aErrorValue
)
{
MOZ_ASSERT
(
NS_FAILED
(
aErrorValue
.
NSResult
(
)
)
)
;
}
explicit
GenericErrorResult
(
QMResult
&
&
aErrorValue
)
:
mErrorValue
(
std
:
:
move
(
aErrorValue
)
)
{
MOZ_ASSERT
(
NS_FAILED
(
aErrorValue
.
NSResult
(
)
)
)
;
}
explicit
GenericErrorResult
(
const
QMResult
&
aErrorValue
const
ErrorPropagationTag
&
)
:
GenericErrorResult
(
aErrorValue
.
Propagate
(
)
)
{
}
explicit
GenericErrorResult
(
QMResult
&
&
aErrorValue
const
ErrorPropagationTag
&
)
:
GenericErrorResult
(
aErrorValue
.
Propagate
(
)
)
{
}
operator
QMResult
(
)
const
{
return
mErrorValue
;
}
operator
nsresult
(
)
const
{
return
mErrorValue
.
NSResult
(
)
;
}
}
;
inline
Result
<
Ok
QMResult
>
ToResult
(
const
QMResult
&
aValue
)
{
if
(
NS_FAILED
(
aValue
.
NSResult
(
)
)
)
{
return
Err
(
aValue
)
;
}
return
Ok
(
)
;
}
inline
Result
<
Ok
QMResult
>
ToResult
(
QMResult
&
&
aValue
)
{
if
(
NS_FAILED
(
aValue
.
NSResult
(
)
)
)
{
return
Err
(
std
:
:
move
(
aValue
)
)
;
}
return
Ok
(
)
;
}
#
endif
}
#
endif
