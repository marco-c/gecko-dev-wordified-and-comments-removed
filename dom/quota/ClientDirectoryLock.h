#
ifndef
DOM_QUOTA_CLIENTDIRECTORYLOCK_H_
#
define
DOM_QUOTA_CLIENTDIRECTORYLOCK_H_
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
Client
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
DirectoryLockImpl
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
{
template
<
typename
T
>
class
MovingNotNull
;
}
namespace
mozilla
:
:
dom
{
template
<
typename
T
>
struct
Nullable
;
}
namespace
mozilla
:
:
dom
:
:
quota
{
enum
class
DirectoryLockCategory
:
uint8_t
;
struct
OriginMetadata
;
class
OriginScope
;
class
PersistenceScope
;
class
QuotaManager
;
class
UniversalDirectoryLock
;
class
ClientDirectoryLock
final
:
public
DirectoryLockImpl
{
friend
class
QuotaManager
;
friend
class
UniversalDirectoryLock
;
public
:
using
DirectoryLockImpl
:
:
DirectoryLockImpl
;
PersistenceType
GetPersistenceType
(
)
const
{
return
DirectoryLockImpl
:
:
GetPersistenceType
(
)
;
}
quota
:
:
OriginMetadata
OriginMetadata
(
)
const
{
return
DirectoryLockImpl
:
:
OriginMetadata
(
)
;
}
const
nsACString
&
Origin
(
)
const
{
return
DirectoryLockImpl
:
:
Origin
(
)
;
}
Client
:
:
Type
ClientType
(
)
const
{
return
DirectoryLockImpl
:
:
ClientType
(
)
;
}
private
:
static
RefPtr
<
ClientDirectoryLock
>
Create
(
MovingNotNull
<
RefPtr
<
QuotaManager
>
>
aQuotaManager
PersistenceType
aPersistenceType
const
quota
:
:
OriginMetadata
&
aOriginMetadata
Client
:
:
Type
aClientType
bool
aExclusive
)
;
static
RefPtr
<
ClientDirectoryLock
>
Create
(
MovingNotNull
<
RefPtr
<
QuotaManager
>
>
aQuotaManager
const
PersistenceScope
&
aPersistenceScope
const
OriginScope
&
aOriginScope
const
Nullable
<
Client
:
:
Type
>
&
aClientType
bool
aExclusive
bool
aInternal
ShouldUpdateLockIdTableFlag
aShouldUpdateLockIdTableFlag
DirectoryLockCategory
aCategory
)
;
}
;
}
#
endif
