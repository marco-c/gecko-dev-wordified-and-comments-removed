#
ifndef
mozilla_dom_quota_DecryptingInputStream_h
#
define
mozilla_dom_quota_DecryptingInputStream_h
#
include
"
mozilla
/
InitializedOnce
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsICloneableInputStream
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIIPCSerializableInputStream
.
h
"
#
include
"
nsISeekableStream
.
h
"
#
include
"
EncryptedBlock
.
h
"
namespace
mozilla
:
:
dom
:
:
quota
{
class
DecryptingInputStreamBase
:
public
nsIInputStream
public
nsISeekableStream
public
nsICloneableInputStream
public
nsIIPCSerializableInputStream
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_IMETHOD
Read
(
char
*
aBuf
uint32_t
aCount
uint32_t
*
_retval
)
final
;
NS_IMETHOD
IsNonBlocking
(
bool
*
_retval
)
final
;
NS_IMETHOD
SetEOF
(
)
final
;
using
nsICloneableInputStream
:
:
GetCloneable
;
NS_IMETHOD
GetCloneable
(
bool
*
aCloneable
)
final
;
using
nsIIPCSerializableInputStream
:
:
Serialize
;
void
Serialize
(
mozilla
:
:
ipc
:
:
InputStreamParams
&
aParams
FileDescriptorArray
&
aFileDescriptors
bool
aDelayedStart
uint32_t
aMaxSize
uint32_t
*
aSizeUsed
mozilla
:
:
ipc
:
:
ChildToParentStreamActorManager
*
aManager
)
final
;
protected
:
DecryptingInputStreamBase
(
MovingNotNull
<
nsCOMPtr
<
nsIInputStream
>
>
aBaseStream
size_t
aBlockSize
)
;
DecryptingInputStreamBase
(
)
=
default
;
virtual
~
DecryptingInputStreamBase
(
)
=
default
;
void
Init
(
MovingNotNull
<
nsCOMPtr
<
nsIInputStream
>
>
aBaseStream
size_t
aBlockSize
)
;
size_t
PlainLength
(
)
const
;
size_t
EncryptedBufferLength
(
)
const
;
LazyInitializedOnceEarlyDestructible
<
const
NotNull
<
nsCOMPtr
<
nsIInputStream
>
>
>
mBaseStream
;
LazyInitializedOnce
<
const
NotNull
<
nsISeekableStream
*
>
>
mBaseSeekableStream
;
LazyInitializedOnce
<
const
NotNull
<
nsICloneableInputStream
*
>
>
mBaseCloneableInputStream
;
LazyInitializedOnce
<
const
NotNull
<
nsIIPCSerializableInputStream
*
>
>
mBaseIPCSerializableInputStream
;
size_t
mPlainBytes
=
0
;
size_t
mNextByte
=
0
;
LazyInitializedOnceNotNull
<
const
size_t
>
mBlockSize
;
size_t
mLastBlockLength
=
0
;
}
;
template
<
typename
CipherStrategy
>
class
DecryptingInputStream
final
:
public
DecryptingInputStreamBase
{
public
:
DecryptingInputStream
(
MovingNotNull
<
nsCOMPtr
<
nsIInputStream
>
>
aBaseStream
size_t
aBlockSize
typename
CipherStrategy
:
:
KeyType
aKey
)
;
explicit
DecryptingInputStream
(
)
;
NS_IMETHOD
Close
(
)
override
;
NS_IMETHOD
Available
(
uint64_t
*
_retval
)
override
;
NS_IMETHOD
ReadSegments
(
nsWriteSegmentFun
aWriter
void
*
aClosure
uint32_t
aCount
uint32_t
*
_retval
)
override
;
NS_DECL_NSITELLABLESTREAM
NS_IMETHOD
Seek
(
int32_t
aWhence
int64_t
aOffset
)
override
;
NS_IMETHOD
Clone
(
nsIInputStream
*
*
_retval
)
override
;
using
DecryptingInputStreamBase
:
:
Serialize
;
void
Serialize
(
mozilla
:
:
ipc
:
:
InputStreamParams
&
aParams
FileDescriptorArray
&
aFileDescriptors
bool
aDelayedStart
uint32_t
aMaxSize
uint32_t
*
aSizeUsed
mozilla
:
:
ipc
:
:
ParentToChildStreamActorManager
*
aManager
)
override
;
bool
Deserialize
(
const
mozilla
:
:
ipc
:
:
InputStreamParams
&
aParams
const
FileDescriptorArray
&
aFileDescriptors
)
override
;
private
:
~
DecryptingInputStream
(
)
;
nsresult
ParseNextChunk
(
uint32_t
*
aBytesReadOut
)
;
nsresult
ReadAll
(
char
*
aBuf
uint32_t
aCount
uint32_t
aMinValidCount
uint32_t
*
aBytesReadOut
)
;
bool
EnsureBuffers
(
)
;
CipherStrategy
mCipherStrategy
;
LazyInitializedOnce
<
const
typename
CipherStrategy
:
:
KeyType
>
mKey
;
using
EncryptedBlockType
=
EncryptedBlock
<
CipherStrategy
:
:
BlockPrefixLength
CipherStrategy
:
:
BasicBlockSize
>
;
Maybe
<
EncryptedBlockType
>
mEncryptedBlock
;
nsTArray
<
uint8_t
>
mPlainBuffer
;
}
;
}
#
endif
