#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
StringifyUtils
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
MOZ_THREAD_LOCAL
(
nsTHashSet
<
Stringifyable
*
>
*
)
Stringifyable
:
:
sActiveStringifyableInstances
;
#
ifdef
DEBUG
Atomic
<
bool
>
sStringifyableTLSInitialized
(
false
)
;
#
endif
void
Stringifyable
:
:
Stringify
(
nsACString
&
aData
)
{
if
(
IsActive
(
)
)
{
aData
.
Append
(
"
(
.
.
.
)
"
_ns
)
;
return
;
}
SetActive
(
true
)
;
aData
.
Append
(
kStringifyStartInstance
)
;
DoStringify
(
aData
)
;
aData
.
Append
(
kStringifyEndInstance
)
;
SetActive
(
false
)
;
}
void
Stringifyable
:
:
InitTLS
(
)
{
if
(
sActiveStringifyableInstances
.
init
(
)
)
{
#
ifdef
DEBUG
sStringifyableTLSInitialized
=
true
;
#
endif
}
}
bool
Stringifyable
:
:
IsActive
(
)
{
MOZ_ASSERT
(
sStringifyableTLSInitialized
)
;
auto
*
set
=
sActiveStringifyableInstances
.
get
(
)
;
return
set
&
&
set
-
>
Contains
(
this
)
;
}
void
Stringifyable
:
:
SetActive
(
bool
aIsActive
)
{
MOZ_ASSERT
(
sStringifyableTLSInitialized
)
;
auto
*
myset
=
sActiveStringifyableInstances
.
get
(
)
;
if
(
!
myset
&
&
aIsActive
)
{
myset
=
new
nsTHashSet
<
Stringifyable
*
>
(
)
;
sActiveStringifyableInstances
.
set
(
myset
)
;
}
MOZ_ASSERT
(
myset
)
;
if
(
aIsActive
)
{
myset
-
>
Insert
(
this
)
;
}
else
{
myset
-
>
Remove
(
this
)
;
if
(
myset
-
>
IsEmpty
(
)
)
{
sActiveStringifyableInstances
.
set
(
nullptr
)
;
delete
myset
;
}
}
}
}
