MARIONETTE_TIMEOUT
=
180000
;
MARIONETTE_HEAD_JS
=
'
head
.
js
'
;
let
Numbers
=
[
"
0911111111
"
"
0922222222
"
]
;
function
exptectedCall
(
aCall
aNumberIndex
aState
aEmulatorState
=
null
)
{
let
disconnectedReason
=
(
aState
=
=
=
"
disconnected
"
)
?
"
NormalCallClearing
"
:
null
;
return
TelephonyHelper
.
createExptectedCall
(
aCall
Numbers
[
aNumberIndex
]
false
"
in
"
aState
aEmulatorState
disconnectedReason
)
;
}
function
empty
(
aCalls
)
{
return
[
exptectedCall
(
aCalls
[
0
]
0
"
disconnected
"
)
exptectedCall
(
aCalls
[
1
]
1
"
disconnected
"
)
]
;
}
function
flash
(
aCall
)
{
return
TelephonyHelper
.
hold
(
aCall
false
)
;
}
let
Opening
=
(
function
(
)
{
function
CWN
(
)
{
let
call
;
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Remote
.
dial
(
Numbers
[
0
]
)
)
.
then
(
aCall
=
>
call
=
aCall
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
[
exptectedCall
(
call
0
"
incoming
"
)
]
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
answer
(
call
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
[
exptectedCall
(
call
0
"
connected
"
)
]
)
)
.
then
(
(
)
=
>
Remote
.
dial
(
Numbers
[
1
]
)
)
.
then
(
(
)
=
>
{
let
calls
=
[
exptectedCall
(
call
0
"
connected
"
"
active
"
)
exptectedCall
(
call
1
"
connected
"
"
waiting
"
)
]
;
return
TelephonyHelper
.
equals
(
calls
)
;
}
)
.
then
(
(
)
=
>
call
)
;
}
function
CW
(
)
{
let
call
;
return
CWN
(
)
.
then
(
aCall
=
>
call
=
aCall
)
.
then
(
(
)
=
>
flash
(
call
)
)
.
then
(
(
)
=
>
{
let
calls
=
[
exptectedCall
(
call
0
"
connected
"
"
held
"
)
exptectedCall
(
call
1
"
connected
"
"
active
"
)
]
;
return
TelephonyHelper
.
equals
(
calls
)
;
}
)
.
then
(
(
)
=
>
call
)
;
}
function
CW_1Flash
(
)
{
let
call
;
return
CW
(
)
.
then
(
aCall
=
>
call
=
aCall
)
.
then
(
(
)
=
>
flash
(
call
)
)
.
then
(
(
)
=
>
{
let
calls
=
[
exptectedCall
(
call
0
"
connected
"
"
active
"
)
exptectedCall
(
call
1
"
connected
"
"
held
"
)
]
;
return
TelephonyHelper
.
equals
(
calls
)
;
}
)
.
then
(
(
)
=
>
call
)
;
}
function
CW_2Flash
(
)
{
let
call
;
return
CW_1Flash
(
)
.
then
(
aCall
=
>
call
=
aCall
)
.
then
(
(
)
=
>
flash
(
call
)
)
.
then
(
(
)
=
>
{
let
calls
=
[
exptectedCall
(
call
0
"
connected
"
"
held
"
)
exptectedCall
(
call
1
"
connected
"
"
active
"
)
]
;
return
TelephonyHelper
.
equals
(
calls
)
;
}
)
.
then
(
(
)
=
>
call
)
;
}
function
CW_3Flash
(
)
{
let
call
;
return
CW_2Flash
(
)
.
then
(
aCall
=
>
call
=
aCall
)
.
then
(
(
)
=
>
flash
(
call
)
)
.
then
(
(
)
=
>
{
let
calls
=
[
exptectedCall
(
call
0
"
connected
"
"
active
"
)
exptectedCall
(
call
1
"
connected
"
"
held
"
)
]
;
return
TelephonyHelper
.
equals
(
calls
)
;
}
)
.
then
(
(
)
=
>
call
)
;
}
return
{
CWN
:
CWN
CW
:
CW
CW_1Flash
:
CW_1Flash
CW_2Flash
:
CW_2Flash
CW_3Flash
:
CW_3Flash
}
;
}
)
(
)
;
let
Ending
=
(
function
(
)
{
function
AHangUp
(
aCall
)
{
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
TelephonyHelper
.
hangUp
(
aCall
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
empty
(
[
aCall
aCall
]
)
)
)
;
}
function
BHangUp
(
aCall
)
{
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Remote
.
hangUp
(
Numbers
[
0
]
true
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
empty
(
[
aCall
aCall
]
)
)
)
;
}
function
CHangUp
(
aCall
)
{
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Remote
.
hangUp
(
Numbers
[
1
]
true
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
empty
(
[
aCall
aCall
]
)
)
)
;
}
function
intermediate_BHangUp
(
aCall
)
{
let
calls
=
[
exptectedCall
(
aCall
0
"
connected
"
"
disconnected
"
)
exptectedCall
(
aCall
1
"
connected
"
"
active
"
)
]
;
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Remote
.
hangUp
(
Numbers
[
0
]
false
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
calls
)
)
.
then
(
(
)
=
>
aCall
)
;
}
function
intermediate_CHangUp
(
aCall
)
{
let
calls
=
[
exptectedCall
(
aCall
0
"
connected
"
"
active
"
)
exptectedCall
(
aCall
1
"
connected
"
"
disconnected
"
)
]
;
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Remote
.
hangUp
(
Numbers
[
1
]
false
)
)
.
then
(
(
)
=
>
TelephonyHelper
.
equals
(
calls
)
)
.
then
(
(
)
=
>
aCall
)
;
}
function
BHangUp_AHangUp
(
aCall
)
{
return
intermediate_BHangUp
(
aCall
)
.
then
(
aCall
=
>
AHangUp
(
aCall
)
)
;
}
function
BHangUp_CHangUp
(
aCall
)
{
return
intermediate_BHangUp
(
aCall
)
.
then
(
aCall
=
>
CHangUp
(
aCall
)
)
;
}
function
CHangUp_AHangUp
(
aCall
)
{
return
intermediate_CHangUp
(
aCall
)
.
then
(
aCall
=
>
AHangUp
(
aCall
)
)
;
}
function
CHangUp_BHangUp
(
aCall
)
{
return
intermediate_CHangUp
(
aCall
)
.
then
(
aCall
=
>
BHangUp
(
aCall
)
)
;
}
return
{
AHangUp
:
AHangUp
BHangUp
:
BHangUp
CHangUp
:
CHangUp
BHangUp_AHangUp
:
BHangUp_AHangUp
BHangUp_CHangUp
:
BHangUp_CHangUp
CHangUp_AHangUp
:
CHangUp_AHangUp
CHangUp_BHangUp
:
CHangUp_BHangUp
}
;
}
)
(
)
;
function
runTestSuiteForCallWaitingNotification
(
)
{
let
endings
=
[
Ending
.
AHangUp
Ending
.
BHangUp
Ending
.
CHangUp_AHangUp
Ending
.
CHangUp_BHangUp
]
;
let
promise
=
Promise
.
resolve
(
)
;
endings
.
forEach
(
ending
=
>
{
promise
=
promise
.
then
(
(
)
=
>
log
(
"
=
Test
:
"
+
Opening
.
CWN
.
name
+
"
_
"
+
ending
.
name
+
"
=
"
)
)
.
then
(
(
)
=
>
Opening
.
CWN
(
)
)
.
then
(
aCall
=
>
ending
(
aCall
)
)
;
}
)
;
return
promise
;
}
function
runTestSuiteForCallWaiting
(
)
{
let
openings
=
[
Opening
.
CW
Opening
.
CW_1Flash
Opening
.
CW_2Flash
Opening
.
CW_3Flash
]
;
let
endings
=
[
Ending
.
AHangUp
Ending
.
BHangUp_AHangUp
Ending
.
BHangUp_CHangUp
Ending
.
CHangUp_AHangUp
Ending
.
CHangUp_BHangUp
]
;
let
promise
=
Promise
.
resolve
(
)
;
openings
.
forEach
(
opening
=
>
{
endings
.
forEach
(
ending
=
>
{
promise
=
promise
.
then
(
(
)
=
>
log
(
"
=
Test
:
"
+
opening
.
name
+
"
_
"
+
ending
.
name
+
"
=
"
)
)
.
then
(
(
)
=
>
opening
(
)
)
.
then
(
aCall
=
>
ending
(
aCall
)
)
;
}
)
;
}
)
;
return
promise
;
}
startTest
(
function
(
)
{
return
Promise
.
resolve
(
)
.
then
(
(
)
=
>
Modem
.
changeTech
(
"
cdma
"
)
)
.
then
(
(
)
=
>
runTestSuiteForCallWaitingNotification
(
)
)
.
then
(
(
)
=
>
runTestSuiteForCallWaiting
(
)
)
.
then
(
(
)
=
>
Modem
.
changeTech
(
"
wcdma
"
)
)
.
catch
(
error
=
>
ok
(
false
"
Promise
reject
:
"
+
error
)
)
.
then
(
finish
)
;
}
)
;
