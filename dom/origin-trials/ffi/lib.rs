use
origin_trial_token
:
:
{
Token
TokenValidationError
Usage
}
;
use
std
:
:
ffi
:
:
c_void
;
#
[
repr
(
u8
)
]
pub
enum
OriginTrial
{
TestTrial
}
impl
OriginTrial
{
fn
from_str
(
s
:
&
str
)
-
>
Option
<
Self
>
{
return
Some
(
match
s
{
"
TestTrial
"
=
>
Self
:
:
TestTrial
_
=
>
return
None
}
)
;
}
}
#
[
repr
(
u8
)
]
pub
enum
OriginTrialResult
{
Success
{
trial
:
OriginTrial
}
BufferTooSmall
MismatchedPayloadSize
{
expected
:
usize
actual
:
usize
}
InvalidSignature
UnknownVersion
UnsupportedThirdPartyToken
UnexpectedUsageInNonThirdPartyToken
MalformedPayload
ExpiredToken
UnknownTrial
OriginMismatch
}
#
[
repr
(
C
)
]
pub
struct
OriginTrialValidationParams
{
pub
verify_signature
:
extern
"
C
"
fn
(
signature
:
*
const
u8
signature_len
:
usize
data
:
*
const
u8
data_len
:
usize
user_data
:
*
mut
c_void
)
-
>
bool
pub
matches_origin
:
extern
"
C
"
fn
(
origin
:
*
const
u8
len
:
usize
is_subdomain
:
bool
is_third_party
:
bool
is_usage_subset
:
bool
user_data
:
*
mut
c_void
)
-
>
bool
pub
user_data
:
*
mut
c_void
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
origin_trials_parse_and_validate_token
(
bytes
:
*
const
u8
len
:
usize
params
:
&
OriginTrialValidationParams
)
-
>
OriginTrialResult
{
let
slice
=
std
:
:
slice
:
:
from_raw_parts
(
bytes
len
)
;
let
token
=
Token
:
:
from_buffer
(
slice
|
signature
data
|
{
(
params
.
verify_signature
)
(
signature
.
as_ptr
(
)
signature
.
len
(
)
data
.
as_ptr
(
)
data
.
len
(
)
params
.
user_data
)
}
)
;
let
token
=
match
token
{
Ok
(
token
)
=
>
token
Err
(
e
)
=
>
{
return
match
e
{
TokenValidationError
:
:
BufferTooSmall
=
>
OriginTrialResult
:
:
BufferTooSmall
TokenValidationError
:
:
MismatchedPayloadSize
{
expected
actual
}
=
>
{
OriginTrialResult
:
:
MismatchedPayloadSize
{
expected
actual
}
}
TokenValidationError
:
:
InvalidSignature
=
>
OriginTrialResult
:
:
InvalidSignature
TokenValidationError
:
:
UnknownVersion
=
>
OriginTrialResult
:
:
UnknownVersion
TokenValidationError
:
:
UnsupportedThirdPartyToken
=
>
{
OriginTrialResult
:
:
UnsupportedThirdPartyToken
}
TokenValidationError
:
:
UnexpectedUsageInNonThirdPartyToken
=
>
{
OriginTrialResult
:
:
UnexpectedUsageInNonThirdPartyToken
}
TokenValidationError
:
:
MalformedPayload
(
.
.
)
=
>
OriginTrialResult
:
:
MalformedPayload
}
}
}
;
if
token
.
is_expired
(
)
{
return
OriginTrialResult
:
:
ExpiredToken
;
}
let
trial
=
match
OriginTrial
:
:
from_str
(
token
.
feature
(
)
)
{
Some
(
t
)
=
>
t
None
=
>
return
OriginTrialResult
:
:
UnknownTrial
}
;
let
is_usage_subset
=
match
token
.
usage
{
Usage
:
:
None
=
>
false
Usage
:
:
Subset
=
>
true
}
;
if
!
(
params
.
matches_origin
)
(
token
.
origin
.
as_ptr
(
)
token
.
origin
.
len
(
)
token
.
is_subdomain
token
.
is_third_party
is_usage_subset
params
.
user_data
)
{
return
OriginTrialResult
:
:
OriginMismatch
;
}
OriginTrialResult
:
:
Success
{
trial
}
}
