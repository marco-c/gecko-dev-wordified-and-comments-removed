#
ifndef
mozilla_dom_FileBlobImpl_h
#
define
mozilla_dom_FileBlobImpl_h
#
include
"
mozilla
/
dom
/
BaseBlobImpl
.
h
"
class
nsIFile
;
namespace
mozilla
{
namespace
dom
{
class
FileBlobImpl
:
public
BaseBlobImpl
{
public
:
NS_DECL_ISUPPORTS_INHERITED
explicit
FileBlobImpl
(
nsIFile
*
aFile
)
;
FileBlobImpl
(
const
nsAString
&
aName
const
nsAString
&
aContentType
uint64_t
aLength
nsIFile
*
aFile
)
;
FileBlobImpl
(
const
nsAString
&
aName
const
nsAString
&
aContentType
uint64_t
aLength
nsIFile
*
aFile
int64_t
aLastModificationDate
)
;
FileBlobImpl
(
nsIFile
*
aFile
const
nsAString
&
aName
const
nsAString
&
aContentType
)
;
virtual
uint64_t
GetSize
(
ErrorResult
&
aRv
)
override
;
virtual
void
GetType
(
nsAString
&
aType
)
override
;
virtual
int64_t
GetLastModified
(
ErrorResult
&
aRv
)
override
;
virtual
void
SetLastModified
(
int64_t
aLastModified
)
override
;
virtual
void
GetMozFullPathInternal
(
nsAString
&
aFullPath
ErrorResult
&
aRv
)
const
override
;
virtual
void
GetInternalStream
(
nsIInputStream
*
*
aInputStream
ErrorResult
&
aRv
)
override
;
virtual
bool
IsDirectory
(
)
const
override
;
virtual
bool
IsSizeUnknown
(
)
const
override
{
return
false
;
}
virtual
bool
IsDateUnknown
(
)
const
override
{
return
false
;
}
protected
:
virtual
~
FileBlobImpl
(
)
=
default
;
private
:
FileBlobImpl
(
const
FileBlobImpl
*
aOther
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
)
;
virtual
already_AddRefed
<
BlobImpl
>
CreateSlice
(
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
ErrorResult
&
aRv
)
override
;
nsCOMPtr
<
nsIFile
>
mFile
;
bool
mWholeFile
;
}
;
}
}
#
endif
