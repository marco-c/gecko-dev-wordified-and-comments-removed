#
ifndef
mozilla_dom_File_h
#
define
mozilla_dom_File_h
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
dom
/
Date
.
h
"
class
nsIFile
;
namespace
mozilla
{
namespace
dom
{
struct
ChromeFilePropertyBag
;
struct
FilePropertyBag
;
class
Promise
;
class
File
final
:
public
Blob
{
friend
class
Blob
;
public
:
static
File
*
Create
(
nsIGlobalObject
*
aGlobal
BlobImpl
*
aImpl
)
;
static
already_AddRefed
<
File
>
Create
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aName
const
nsAString
&
aContentType
uint64_t
aLength
int64_t
aLastModifiedDate
)
;
static
already_AddRefed
<
File
>
CreateMemoryFile
(
nsIGlobalObject
*
aGlobal
void
*
aMemoryBuffer
uint64_t
aLength
const
nsAString
&
aName
const
nsAString
&
aContentType
int64_t
aLastModifiedDate
)
;
static
already_AddRefed
<
File
>
CreateFromFile
(
nsIGlobalObject
*
aGlobal
nsIFile
*
aFile
)
;
static
already_AddRefed
<
File
>
CreateFromFile
(
nsIGlobalObject
*
aGlobal
nsIFile
*
aFile
const
nsAString
&
aName
const
nsAString
&
aContentType
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
File
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Sequence
<
BlobPart
>
&
aData
const
nsAString
&
aName
const
FilePropertyBag
&
aBag
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
CreateFromFileName
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aFilePath
const
ChromeFilePropertyBag
&
aBag
SystemCallerGuarantee
aGuarantee
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Promise
>
CreateFromNsIFile
(
const
GlobalObject
&
aGlobal
nsIFile
*
aFile
const
ChromeFilePropertyBag
&
aBag
SystemCallerGuarantee
aGuarantee
ErrorResult
&
aRv
)
;
void
GetName
(
nsAString
&
aName
)
const
;
int64_t
GetLastModified
(
ErrorResult
&
aRv
)
;
void
GetRelativePath
(
nsAString
&
aPath
)
const
;
void
GetMozFullPath
(
nsAString
&
aFilename
SystemCallerGuarantee
aGuarantee
ErrorResult
&
aRv
)
;
void
GetMozFullPathInternal
(
nsAString
&
aName
ErrorResult
&
aRv
)
;
protected
:
virtual
bool
HasFileInterface
(
)
const
override
{
return
true
;
}
private
:
File
(
nsIGlobalObject
*
aGlobal
BlobImpl
*
aImpl
)
;
~
File
(
)
;
}
;
}
}
#
endif
