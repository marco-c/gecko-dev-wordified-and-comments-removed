#
include
"
TemporaryBlobImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS_INHERITED0
(
TemporaryBlobImpl
BlobImpl
)
TemporaryBlobImpl
:
:
TemporaryBlobImpl
(
PRFileDesc
*
aFD
uint64_t
aStartPos
uint64_t
aLength
const
nsAString
&
aContentType
)
:
BaseBlobImpl
(
aContentType
aLength
)
mStartPos
(
aStartPos
)
{
mFileDescOwner
=
new
nsTemporaryFileInputStream
:
:
FileDescOwner
(
aFD
)
;
}
TemporaryBlobImpl
:
:
TemporaryBlobImpl
(
const
TemporaryBlobImpl
*
aOther
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
)
:
BaseBlobImpl
(
aContentType
aLength
)
mStartPos
(
aStart
)
mFileDescOwner
(
aOther
-
>
mFileDescOwner
)
{
}
already_AddRefed
<
BlobImpl
>
TemporaryBlobImpl
:
:
CreateSlice
(
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
ErrorResult
&
aRv
)
{
if
(
aStart
+
aLength
>
mLength
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
RefPtr
<
BlobImpl
>
impl
=
new
TemporaryBlobImpl
(
this
aStart
+
mStartPos
aLength
aContentType
)
;
return
impl
.
forget
(
)
;
}
void
TemporaryBlobImpl
:
:
CreateInputStream
(
nsIInputStream
*
*
aStream
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIInputStream
>
stream
=
new
nsTemporaryFileInputStream
(
mFileDescOwner
mStartPos
mStartPos
+
mLength
)
;
stream
.
forget
(
aStream
)
;
}
}
}
