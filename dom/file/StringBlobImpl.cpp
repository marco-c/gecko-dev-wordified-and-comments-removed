#
include
"
StringBlobImpl
.
h
"
#
include
"
nsStringStream
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_ISUPPORTS_INHERITED
(
StringBlobImpl
BlobImpl
nsIMemoryReporter
)
already_AddRefed
<
StringBlobImpl
>
StringBlobImpl
:
:
Create
(
const
nsACString
&
aData
const
nsAString
&
aContentType
)
{
RefPtr
<
StringBlobImpl
>
blobImpl
=
new
StringBlobImpl
(
aData
aContentType
)
;
RegisterWeakMemoryReporter
(
blobImpl
)
;
return
blobImpl
.
forget
(
)
;
}
StringBlobImpl
:
:
StringBlobImpl
(
const
nsACString
&
aData
const
nsAString
&
aContentType
)
:
BaseBlobImpl
(
aContentType
aData
.
Length
(
)
)
mData
(
aData
)
{
}
StringBlobImpl
:
:
~
StringBlobImpl
(
)
{
UnregisterWeakMemoryReporter
(
this
)
;
}
already_AddRefed
<
BlobImpl
>
StringBlobImpl
:
:
CreateSlice
(
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
ErrorResult
&
aRv
)
const
{
RefPtr
<
BlobImpl
>
impl
=
new
StringBlobImpl
(
Substring
(
mData
aStart
aLength
)
aContentType
)
;
return
impl
.
forget
(
)
;
}
void
StringBlobImpl
:
:
CreateInputStream
(
nsIInputStream
*
*
aStream
ErrorResult
&
aRv
)
const
{
aRv
=
NS_NewCStringInputStream
(
aStream
mData
)
;
}
NS_IMETHODIMP
StringBlobImpl
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
dom
/
memory
-
file
-
data
/
string
"
KIND_HEAP
UNITS_BYTES
mData
.
SizeOfExcludingThisIfUnshared
(
MallocSizeOf
)
"
Memory
used
to
back
a
File
/
Blob
based
on
a
string
.
"
)
;
return
NS_OK
;
}
}
