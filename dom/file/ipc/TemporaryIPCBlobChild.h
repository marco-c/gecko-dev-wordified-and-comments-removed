#
ifndef
mozilla_dom_ipc_TemporaryIPCBlobChild_h
#
define
mozilla_dom_ipc_TemporaryIPCBlobChild_h
#
include
"
mozilla
/
ipc
/
PTemporaryIPCBlob
.
h
"
#
include
"
mozilla
/
ipc
/
PTemporaryIPCBlobChild
.
h
"
namespace
mozilla
{
namespace
dom
{
class
MutableBlobStorage
;
class
TemporaryIPCBlobChildCallback
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
void
OperationSucceeded
(
BlobImpl
*
aBlobImpl
)
=
0
;
virtual
void
OperationFailed
(
nsresult
aRv
)
=
0
;
}
;
class
TemporaryIPCBlobChild
final
:
public
mozilla
:
:
ipc
:
:
PTemporaryIPCBlobChild
{
friend
class
mozilla
:
:
ipc
:
:
PTemporaryIPCBlobChild
;
public
:
NS_INLINE_DECL_REFCOUNTING
(
TemporaryIPCBlobChild
)
explicit
TemporaryIPCBlobChild
(
MutableBlobStorage
*
aMutableBlobStorage
)
;
void
AskForBlob
(
TemporaryIPCBlobChildCallback
*
aCallback
const
nsACString
&
aContentType
PRFileDesc
*
aFD
)
;
private
:
~
TemporaryIPCBlobChild
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFileDesc
(
const
FileDescriptor
&
aFD
)
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
IPCBlobOrError
&
aBlobOrError
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
RefPtr
<
MutableBlobStorage
>
mMutableBlobStorage
;
RefPtr
<
TemporaryIPCBlobChildCallback
>
mCallback
;
bool
mActive
;
}
;
}
}
#
endif
