#
include
"
RemoteLazyInputStreamChild
.
h
"
#
include
"
RemoteLazyInputStreamThread
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamUtils
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
namespace
mozilla
{
using
namespace
dom
;
namespace
{
class
ShutdownRunnable
final
:
public
DiscardableRunnable
{
public
:
explicit
ShutdownRunnable
(
RemoteLazyInputStreamChild
*
aActor
)
:
DiscardableRunnable
(
"
dom
:
:
ShutdownRunnable
"
)
mActor
(
aActor
)
{
}
NS_IMETHOD
Run
(
)
override
{
mActor
-
>
Shutdown
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
RemoteLazyInputStreamChild
>
mActor
;
}
;
class
StreamNeededRunnable
final
:
public
DiscardableRunnable
{
public
:
explicit
StreamNeededRunnable
(
RemoteLazyInputStreamChild
*
aActor
)
:
DiscardableRunnable
(
"
dom
:
:
StreamNeededRunnable
"
)
mActor
(
aActor
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
mActor
-
>
State
(
)
!
=
RemoteLazyInputStreamChild
:
:
eActiveMigrating
&
&
mActor
-
>
State
(
)
!
=
RemoteLazyInputStreamChild
:
:
eInactiveMigrating
)
;
if
(
mActor
-
>
State
(
)
=
=
RemoteLazyInputStreamChild
:
:
eActive
)
{
mActor
-
>
SendStreamNeeded
(
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
RemoteLazyInputStreamChild
>
mActor
;
}
;
class
StreamReadyRunnable
final
:
public
DiscardableRunnable
{
public
:
StreamReadyRunnable
(
RemoteLazyInputStream
*
aDestinationStream
already_AddRefed
<
nsIInputStream
>
aCreatedStream
)
:
DiscardableRunnable
(
"
dom
:
:
StreamReadyRunnable
"
)
mDestinationStream
(
aDestinationStream
)
mCreatedStream
(
std
:
:
move
(
aCreatedStream
)
)
{
MOZ_ASSERT
(
mDestinationStream
)
;
}
NS_IMETHOD
Run
(
)
override
{
mDestinationStream
-
>
StreamReady
(
mCreatedStream
.
forget
(
)
)
;
return
NS_OK
;
}
private
:
RefPtr
<
RemoteLazyInputStream
>
mDestinationStream
;
nsCOMPtr
<
nsIInputStream
>
mCreatedStream
;
}
;
class
LengthNeededRunnable
final
:
public
DiscardableRunnable
{
public
:
explicit
LengthNeededRunnable
(
RemoteLazyInputStreamChild
*
aActor
)
:
DiscardableRunnable
(
"
dom
:
:
LengthNeededRunnable
"
)
mActor
(
aActor
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
mActor
-
>
State
(
)
!
=
RemoteLazyInputStreamChild
:
:
eActiveMigrating
&
&
mActor
-
>
State
(
)
!
=
RemoteLazyInputStreamChild
:
:
eInactiveMigrating
)
;
if
(
mActor
-
>
State
(
)
=
=
RemoteLazyInputStreamChild
:
:
eActive
)
{
mActor
-
>
SendLengthNeeded
(
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
RemoteLazyInputStreamChild
>
mActor
;
}
;
class
LengthReadyRunnable
final
:
public
DiscardableRunnable
{
public
:
LengthReadyRunnable
(
RemoteLazyInputStream
*
aDestinationStream
int64_t
aSize
)
:
DiscardableRunnable
(
"
dom
:
:
LengthReadyRunnable
"
)
mDestinationStream
(
aDestinationStream
)
mSize
(
aSize
)
{
MOZ_ASSERT
(
mDestinationStream
)
;
}
NS_IMETHOD
Run
(
)
override
{
mDestinationStream
-
>
LengthReady
(
mSize
)
;
return
NS_OK
;
}
private
:
RefPtr
<
RemoteLazyInputStream
>
mDestinationStream
;
int64_t
mSize
;
}
;
}
RemoteLazyInputStreamChild
:
:
RemoteLazyInputStreamChild
(
const
nsID
&
aID
uint64_t
aSize
)
:
mMutex
(
"
RemoteLazyInputStreamChild
:
:
mMutex
"
)
mID
(
aID
)
mSize
(
aSize
)
mState
(
eActive
)
mOwningEventTarget
(
GetCurrentSerialEventTarget
(
)
)
{
if
(
!
NS_IsMainThread
(
)
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
if
(
!
workerPrivate
)
{
return
;
}
RefPtr
<
StrongWorkerRef
>
workerRef
=
StrongWorkerRef
:
:
Create
(
workerPrivate
"
RemoteLazyInputStreamChild
"
)
;
if
(
!
workerRef
)
{
return
;
}
mWorkerRef
=
new
ThreadSafeWorkerRef
(
workerRef
)
;
}
}
RemoteLazyInputStreamChild
:
:
~
RemoteLazyInputStreamChild
(
)
=
default
;
void
RemoteLazyInputStreamChild
:
:
Shutdown
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
RefPtr
<
RemoteLazyInputStreamChild
>
kungFuDeathGrip
=
this
;
mWorkerRef
=
nullptr
;
mPendingOperations
.
Clear
(
)
;
if
(
mState
=
=
eActive
)
{
SendClose
(
)
;
mState
=
eInactive
;
}
}
void
RemoteLazyInputStreamChild
:
:
ActorDestroy
(
IProtocol
:
:
ActorDestroyReason
aReason
)
{
bool
migrating
=
false
;
{
MutexAutoLock
lock
(
mMutex
)
;
migrating
=
mState
=
=
eActiveMigrating
;
mState
=
migrating
?
eInactiveMigrating
:
eInactive
;
}
if
(
!
migrating
)
{
Shutdown
(
)
;
return
;
}
}
RemoteLazyInputStreamChild
:
:
ActorState
RemoteLazyInputStreamChild
:
:
State
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
return
mState
;
}
already_AddRefed
<
RemoteLazyInputStream
>
RemoteLazyInputStreamChild
:
:
CreateStream
(
)
{
bool
shouldMigrate
=
false
;
RefPtr
<
RemoteLazyInputStream
>
stream
;
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eInactive
)
{
return
nullptr
;
}
if
(
mState
=
=
eActive
&
&
!
RemoteLazyInputStreamThread
:
:
IsOnFileEventTarget
(
mOwningEventTarget
)
)
{
MOZ_ASSERT
(
mStreams
.
IsEmpty
(
)
)
;
shouldMigrate
=
true
;
mState
=
eActiveMigrating
;
RefPtr
<
RemoteLazyInputStreamThread
>
thread
=
RemoteLazyInputStreamThread
:
:
GetOrCreate
(
)
;
MOZ_ASSERT
(
thread
"
We
cannot
continue
without
DOMFile
thread
.
"
)
;
RefPtr
<
RemoteLazyInputStreamChild
>
newActor
=
new
RemoteLazyInputStreamChild
(
mID
mSize
)
;
{
MutexAutoLock
newActorLock
(
newActor
-
>
mMutex
)
;
newActor
-
>
mWorkerRef
=
mWorkerRef
;
newActor
-
>
mState
=
eInactiveMigrating
;
newActor
-
>
mPendingOperations
=
std
:
:
move
(
mPendingOperations
)
;
stream
=
new
RemoteLazyInputStream
(
newActor
)
;
newActor
-
>
mStreams
.
AppendElement
(
stream
)
;
}
thread
-
>
MigrateActor
(
newActor
)
;
}
else
{
stream
=
new
RemoteLazyInputStream
(
this
)
;
mStreams
.
AppendElement
(
stream
)
;
}
}
if
(
shouldMigrate
)
{
Send__delete__
(
this
)
;
}
return
stream
.
forget
(
)
;
}
void
RemoteLazyInputStreamChild
:
:
ForgetStream
(
RemoteLazyInputStream
*
aStream
)
{
MOZ_ASSERT
(
aStream
)
;
RefPtr
<
RemoteLazyInputStreamChild
>
kungFuDeathGrip
=
this
;
{
MutexAutoLock
lock
(
mMutex
)
;
mStreams
.
RemoveElement
(
aStream
)
;
if
(
!
mStreams
.
IsEmpty
(
)
|
|
mState
!
=
eActive
)
{
return
;
}
}
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
Shutdown
(
)
;
return
;
}
RefPtr
<
ShutdownRunnable
>
runnable
=
new
ShutdownRunnable
(
this
)
;
mOwningEventTarget
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
}
void
RemoteLazyInputStreamChild
:
:
StreamNeeded
(
RemoteLazyInputStream
*
aStream
nsIEventTarget
*
aEventTarget
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eInactive
)
{
return
;
}
MOZ_ASSERT
(
mStreams
.
Contains
(
aStream
)
)
;
PendingOperation
*
opt
=
mPendingOperations
.
AppendElement
(
)
;
opt
-
>
mStream
=
aStream
;
opt
-
>
mEventTarget
=
aEventTarget
;
opt
-
>
mOp
=
PendingOperation
:
:
eStreamNeeded
;
if
(
mState
=
=
eActiveMigrating
|
|
mState
=
=
eInactiveMigrating
)
{
return
;
}
MOZ_ASSERT
(
mState
=
=
eActive
)
;
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
SendStreamNeeded
(
)
;
return
;
}
RefPtr
<
StreamNeededRunnable
>
runnable
=
new
StreamNeededRunnable
(
this
)
;
mOwningEventTarget
-
>
Dispatch
(
runnable
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteLazyInputStreamChild
:
:
RecvStreamReady
(
const
Maybe
<
IPCStream
>
&
aStream
)
{
nsCOMPtr
<
nsIInputStream
>
stream
=
mozilla
:
:
ipc
:
:
DeserializeIPCStream
(
aStream
)
;
RefPtr
<
RemoteLazyInputStream
>
pendingStream
;
nsCOMPtr
<
nsIEventTarget
>
eventTarget
;
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eInactive
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
!
mPendingOperations
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mState
=
=
eActive
)
;
pendingStream
=
mPendingOperations
[
0
]
.
mStream
;
eventTarget
=
mPendingOperations
[
0
]
.
mEventTarget
;
MOZ_ASSERT
(
mPendingOperations
[
0
]
.
mOp
=
=
PendingOperation
:
:
eStreamNeeded
)
;
mPendingOperations
.
RemoveElementAt
(
0
)
;
}
RefPtr
<
StreamReadyRunnable
>
runnable
=
new
StreamReadyRunnable
(
pendingStream
stream
.
forget
(
)
)
;
if
(
eventTarget
)
{
eventTarget
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
}
else
{
runnable
-
>
Run
(
)
;
}
return
IPC_OK
(
)
;
}
void
RemoteLazyInputStreamChild
:
:
LengthNeeded
(
RemoteLazyInputStream
*
aStream
nsIEventTarget
*
aEventTarget
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eInactive
)
{
return
;
}
MOZ_ASSERT
(
mStreams
.
Contains
(
aStream
)
)
;
PendingOperation
*
opt
=
mPendingOperations
.
AppendElement
(
)
;
opt
-
>
mStream
=
aStream
;
opt
-
>
mEventTarget
=
aEventTarget
;
opt
-
>
mOp
=
PendingOperation
:
:
eLengthNeeded
;
if
(
mState
=
=
eActiveMigrating
|
|
mState
=
=
eInactiveMigrating
)
{
return
;
}
MOZ_ASSERT
(
mState
=
=
eActive
)
;
if
(
mOwningEventTarget
-
>
IsOnCurrentThread
(
)
)
{
SendLengthNeeded
(
)
;
return
;
}
RefPtr
<
LengthNeededRunnable
>
runnable
=
new
LengthNeededRunnable
(
this
)
;
mOwningEventTarget
-
>
Dispatch
(
runnable
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteLazyInputStreamChild
:
:
RecvLengthReady
(
const
int64_t
&
aLength
)
{
RefPtr
<
RemoteLazyInputStream
>
pendingStream
;
nsCOMPtr
<
nsIEventTarget
>
eventTarget
;
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mState
=
=
eInactive
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
!
mPendingOperations
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
mState
=
=
eActive
)
;
pendingStream
=
mPendingOperations
[
0
]
.
mStream
;
eventTarget
=
mPendingOperations
[
0
]
.
mEventTarget
;
MOZ_ASSERT
(
mPendingOperations
[
0
]
.
mOp
=
=
PendingOperation
:
:
eLengthNeeded
)
;
mPendingOperations
.
RemoveElementAt
(
0
)
;
}
RefPtr
<
LengthReadyRunnable
>
runnable
=
new
LengthReadyRunnable
(
pendingStream
aLength
)
;
MOZ_ASSERT
(
eventTarget
)
;
eventTarget
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
void
RemoteLazyInputStreamChild
:
:
Migrated
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
MOZ_ASSERT
(
mState
=
=
eInactiveMigrating
)
;
mWorkerRef
=
nullptr
;
mOwningEventTarget
=
GetCurrentSerialEventTarget
(
)
;
MOZ_ASSERT
(
RemoteLazyInputStreamThread
:
:
IsOnFileEventTarget
(
mOwningEventTarget
)
)
;
if
(
mStreams
.
IsEmpty
(
)
)
{
mState
=
eInactive
;
SendClose
(
)
;
return
;
}
mState
=
eActive
;
for
(
uint32_t
i
=
0
;
i
<
mPendingOperations
.
Length
(
)
;
+
+
i
)
{
if
(
mPendingOperations
[
i
]
.
mOp
=
=
PendingOperation
:
:
eStreamNeeded
)
{
SendStreamNeeded
(
)
;
}
else
{
MOZ_ASSERT
(
mPendingOperations
[
i
]
.
mOp
=
=
PendingOperation
:
:
eLengthNeeded
)
;
SendLengthNeeded
(
)
;
}
}
}
}
