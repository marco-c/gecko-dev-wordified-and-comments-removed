#
include
"
RemoteLazyInputStreamChild
.
h
"
#
include
"
RemoteLazyInputStreamThread
.
h
"
namespace
mozilla
{
extern
mozilla
:
:
LazyLogModule
gRemoteLazyStreamLog
;
RemoteLazyInputStreamChild
:
:
RemoteLazyInputStreamChild
(
const
nsID
&
aID
)
:
mID
(
aID
)
{
}
RemoteLazyInputStreamChild
:
:
~
RemoteLazyInputStreamChild
(
)
=
default
;
void
RemoteLazyInputStreamChild
:
:
StreamCreated
(
)
{
size_t
count
=
+
+
mStreamCount
;
MOZ_LOG
(
gRemoteLazyStreamLog
LogLevel
:
:
Verbose
(
"
Child
:
:
StreamCreated
%
s
=
%
zu
"
nsIDToCString
(
mID
)
.
get
(
)
count
)
)
;
}
void
RemoteLazyInputStreamChild
:
:
StreamConsumed
(
)
{
size_t
count
=
-
-
mStreamCount
;
MOZ_LOG
(
gRemoteLazyStreamLog
LogLevel
:
:
Verbose
(
"
Child
:
:
StreamConsumed
%
s
=
%
zu
"
nsIDToCString
(
mID
)
.
get
(
)
count
)
)
;
if
(
count
=
=
0
)
{
RefPtr
<
RemoteLazyInputStreamThread
>
t
=
RemoteLazyInputStreamThread
:
:
Get
(
)
;
if
(
t
)
{
t
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteLazyInputStreamChild
:
:
StreamConsumed
"
[
self
=
RefPtr
{
this
}
]
(
)
{
if
(
self
-
>
CanSend
(
)
)
{
self
-
>
SendGoodbye
(
)
;
}
}
)
)
;
}
}
}
void
RemoteLazyInputStreamChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mStreamCount
!
=
0
)
{
NS_WARNING
(
nsPrintfCString
(
"
RemoteLazyInputStreamChild
disconnected
unexpectedly
"
"
(
%
zu
streams
remaining
)
!
%
p
%
s
"
size_t
(
mStreamCount
)
this
nsIDToCString
(
mID
)
.
get
(
)
)
.
get
(
)
)
;
}
}
}
