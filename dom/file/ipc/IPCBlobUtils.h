#
ifndef
mozilla_dom_IPCBlobUtils_h
#
define
mozilla_dom_IPCBlobUtils_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
IProtocol
;
class
PBackgroundChild
;
class
PBackgroundParent
;
}
namespace
dom
{
class
IPCBlob
;
class
ContentChild
;
class
ContentParent
;
class
PIPCBlobInputStreamParent
;
namespace
IPCBlobUtils
{
already_AddRefed
<
BlobImpl
>
Deserialize
(
const
IPCBlob
&
aIPCBlob
)
;
nsresult
Serialize
(
BlobImpl
*
aBlobImpl
ContentChild
*
aManager
IPCBlob
&
aIPCBlob
)
;
nsresult
Serialize
(
BlobImpl
*
aBlobImpl
mozilla
:
:
ipc
:
:
PBackgroundChild
*
aManager
IPCBlob
&
aIPCBlob
)
;
nsresult
Serialize
(
BlobImpl
*
aBlobImpl
ContentParent
*
aManager
IPCBlob
&
aIPCBlob
)
;
nsresult
Serialize
(
BlobImpl
*
aBlobImpl
mozilla
:
:
ipc
:
:
PBackgroundParent
*
aManager
IPCBlob
&
aIPCBlob
)
;
nsresult
SerializeInputStream
(
nsIInputStream
*
aInputStream
uint64_t
aSize
PIPCBlobInputStreamParent
*
&
aActorParent
ContentParent
*
aManager
)
;
nsresult
SerializeUntyped
(
BlobImpl
*
aBlobImpl
mozilla
:
:
ipc
:
:
IProtocol
*
aActor
IPCBlob
&
aIPCBlob
)
;
}
}
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
dom
:
:
BlobImpl
*
>
{
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
mozilla
:
:
dom
:
:
BlobImpl
*
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
RefPtr
<
mozilla
:
:
dom
:
:
BlobImpl
>
*
aResult
)
;
}
;
}
}
#
endif
