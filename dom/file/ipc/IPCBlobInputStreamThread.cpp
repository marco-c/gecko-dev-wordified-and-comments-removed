#
include
"
IPCBlobInputStreamThread
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
mozilla
/
TaskCategory
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
#
include
"
nsXPCOMPrivate
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
namespace
dom
{
namespace
{
StaticMutex
gIPCBlobThreadMutex
;
StaticRefPtr
<
IPCBlobInputStreamThread
>
gIPCBlobThread
;
bool
gShutdownHasStarted
=
false
;
class
ThreadInitializeRunnable
final
:
public
Runnable
{
public
:
ThreadInitializeRunnable
(
)
:
Runnable
(
"
dom
:
:
ThreadInitializeRunnable
"
)
{
}
NS_IMETHOD
Run
(
)
override
{
mozilla
:
:
StaticMutexAutoLock
lock
(
gIPCBlobThreadMutex
)
;
MOZ_ASSERT
(
gIPCBlobThread
)
;
gIPCBlobThread
-
>
InitializeOnMainThread
(
)
;
return
NS_OK
;
}
}
;
class
MigrateActorRunnable
final
:
public
Runnable
public
nsIIPCBackgroundChildCreateCallback
{
public
:
NS_DECL_ISUPPORTS_INHERITED
explicit
MigrateActorRunnable
(
IPCBlobInputStreamChild
*
aActor
)
:
Runnable
(
"
dom
:
:
MigrateActorRunnable
"
)
mActor
(
aActor
)
{
MOZ_ASSERT
(
mActor
)
;
}
NS_IMETHOD
Run
(
)
override
{
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
this
)
;
return
NS_OK
;
}
void
ActorFailed
(
)
override
{
}
void
ActorCreated
(
mozilla
:
:
ipc
:
:
PBackgroundChild
*
aActor
)
override
{
MOZ_ASSERT
(
mActor
-
>
State
(
)
=
=
IPCBlobInputStreamChild
:
:
eInactiveMigrating
)
;
if
(
aActor
-
>
SendPIPCBlobInputStreamConstructor
(
mActor
mActor
-
>
ID
(
)
mActor
-
>
Size
(
)
)
)
{
mActor
.
get
(
)
-
>
AddRef
(
)
;
mActor
-
>
Migrated
(
)
;
}
}
private
:
~
MigrateActorRunnable
(
)
=
default
;
RefPtr
<
IPCBlobInputStreamChild
>
mActor
;
}
;
NS_IMPL_ISUPPORTS_INHERITED
(
MigrateActorRunnable
Runnable
nsIIPCBackgroundChildCreateCallback
)
}
NS_IMPL_ISUPPORTS
(
IPCBlobInputStreamThread
nsIObserver
)
bool
IPCBlobInputStreamThread
:
:
IsOnFileEventTarget
(
nsIEventTarget
*
aEventTarget
)
{
MOZ_ASSERT
(
aEventTarget
)
;
mozilla
:
:
StaticMutexAutoLock
lock
(
gIPCBlobThreadMutex
)
;
return
gIPCBlobThread
&
&
aEventTarget
=
=
gIPCBlobThread
-
>
mThread
;
}
IPCBlobInputStreamThread
*
IPCBlobInputStreamThread
:
:
GetOrCreate
(
)
{
mozilla
:
:
StaticMutexAutoLock
lock
(
gIPCBlobThreadMutex
)
;
if
(
gShutdownHasStarted
)
{
return
nullptr
;
}
if
(
!
gIPCBlobThread
)
{
gIPCBlobThread
=
new
IPCBlobInputStreamThread
(
)
;
if
(
!
gIPCBlobThread
-
>
Initialize
(
)
)
{
return
nullptr
;
}
}
return
gIPCBlobThread
;
}
bool
IPCBlobInputStreamThread
:
:
Initialize
(
)
{
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewNamedThread
(
"
DOM
File
"
getter_AddRefs
(
thread
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
mThread
=
thread
;
if
(
!
mPendingActors
.
IsEmpty
(
)
)
{
for
(
uint32_t
i
=
0
;
i
<
mPendingActors
.
Length
(
)
;
+
+
i
)
{
MigrateActorInternal
(
mPendingActors
[
i
]
)
;
}
mPendingActors
.
Clear
(
)
;
}
if
(
!
NS_IsMainThread
(
)
)
{
RefPtr
<
Runnable
>
runnable
=
new
ThreadInitializeRunnable
(
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
return
true
;
}
InitializeOnMainThread
(
)
;
return
true
;
}
void
IPCBlobInputStreamThread
:
:
InitializeOnMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
obs
)
)
{
return
;
}
nsresult
rv
=
obs
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_THREADS_OBSERVER_ID
false
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
}
nsIEventTarget
*
IPCBlobInputStreamThread
:
:
EventTarget
(
)
const
{
return
mThread
;
}
NS_IMETHODIMP
IPCBlobInputStreamThread
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_THREADS_OBSERVER_ID
)
)
;
mozilla
:
:
StaticMutexAutoLock
lock
(
gIPCBlobThreadMutex
)
;
if
(
mThread
)
{
mThread
-
>
Shutdown
(
)
;
mThread
=
nullptr
;
}
gShutdownHasStarted
=
true
;
gIPCBlobThread
=
nullptr
;
return
NS_OK
;
}
void
IPCBlobInputStreamThread
:
:
MigrateActor
(
IPCBlobInputStreamChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
-
>
State
(
)
=
=
IPCBlobInputStreamChild
:
:
eInactiveMigrating
)
;
mozilla
:
:
StaticMutexAutoLock
lock
(
gIPCBlobThreadMutex
)
;
if
(
gShutdownHasStarted
)
{
return
;
}
if
(
!
mThread
)
{
mPendingActors
.
AppendElement
(
aActor
)
;
return
;
}
MigrateActorInternal
(
aActor
)
;
}
void
IPCBlobInputStreamThread
:
:
MigrateActorInternal
(
IPCBlobInputStreamChild
*
aActor
)
{
RefPtr
<
Runnable
>
runnable
=
new
MigrateActorRunnable
(
aActor
)
;
mThread
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
}
}
}
