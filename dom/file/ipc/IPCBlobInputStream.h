#
ifndef
mozilla_dom_ipc_IPCBlobInputStream_h
#
define
mozilla_dom_ipc_IPCBlobInputStream_h
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsICloneableInputStream
.
h
"
#
include
"
nsIFileStreams
.
h
"
#
include
"
nsIIPCSerializableInputStream
.
h
"
#
include
"
nsIInputStreamLength
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPCBlobInputStreamChild
;
#
define
IPCBLOBINPUTSTREAM_IID
\
{
0xbcfa38fc
0x8b7f
0x4d79
\
{
0xbe
0x3a
0x1e
0x7b
0xbe
0x52
0x38
0xcd
}
}
class
nsIIPCBlobInputStream
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
IPCBLOBINPUTSTREAM_IID
)
virtual
nsIInputStream
*
GetInternalStream
(
)
const
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIIPCBlobInputStream
IPCBLOBINPUTSTREAM_IID
)
class
IPCBlobInputStream
final
:
public
nsIAsyncInputStream
public
nsIInputStreamCallback
public
nsICloneableInputStreamWithRange
public
nsIIPCSerializableInputStream
public
nsIAsyncFileMetadata
public
nsIInputStreamLength
public
nsIAsyncInputStreamLength
public
nsIIPCBlobInputStream
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINPUTSTREAM
NS_DECL_NSIASYNCINPUTSTREAM
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSICLONEABLEINPUTSTREAM
NS_DECL_NSICLONEABLEINPUTSTREAMWITHRANGE
NS_DECL_NSIIPCSERIALIZABLEINPUTSTREAM
NS_DECL_NSIFILEMETADATA
NS_DECL_NSIASYNCFILEMETADATA
NS_DECL_NSIINPUTSTREAMLENGTH
NS_DECL_NSIASYNCINPUTSTREAMLENGTH
explicit
IPCBlobInputStream
(
IPCBlobInputStreamChild
*
aActor
)
;
void
StreamReady
(
already_AddRefed
<
nsIInputStream
>
aInputStream
)
;
void
LengthReady
(
int64_t
aLength
)
;
nsIInputStream
*
GetInternalStream
(
)
const
override
{
if
(
mRemoteStream
)
{
return
mRemoteStream
;
}
if
(
mAsyncRemoteStream
)
{
return
mAsyncRemoteStream
;
}
return
nullptr
;
}
private
:
~
IPCBlobInputStream
(
)
;
nsresult
EnsureAsyncRemoteStream
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
InitWithExistingRange
(
uint64_t
aStart
uint64_t
aLength
const
MutexAutoLock
&
aProofOfLock
)
;
RefPtr
<
IPCBlobInputStreamChild
>
mActor
;
enum
{
eInit
ePending
eRunning
eClosed
}
mState
;
uint64_t
mStart
;
uint64_t
mLength
;
bool
mConsumed
;
nsCOMPtr
<
nsIInputStream
>
mRemoteStream
;
nsCOMPtr
<
nsIAsyncInputStream
>
mAsyncRemoteStream
;
nsCOMPtr
<
nsIInputStreamCallback
>
mInputStreamCallback
;
nsCOMPtr
<
nsIEventTarget
>
mInputStreamCallbackEventTarget
;
nsCOMPtr
<
nsIFileMetadataCallback
>
mFileMetadataCallback
;
nsCOMPtr
<
nsIEventTarget
>
mFileMetadataCallbackEventTarget
;
nsCOMPtr
<
nsIInputStreamLengthCallback
>
mLengthCallback
;
nsCOMPtr
<
nsIEventTarget
>
mLengthCallbackEventTarget
;
Mutex
mMutex
;
}
;
}
}
#
endif
