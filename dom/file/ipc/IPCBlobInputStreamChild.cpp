#
include
"
IPCBlobInputStreamChild
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
class
DeleteRunnable
final
:
public
Runnable
{
public
:
explicit
DeleteRunnable
(
IPCBlobInputStreamChild
*
aActor
)
:
mActor
(
aActor
)
{
}
NS_IMETHOD
Run
(
)
override
{
mActor
-
>
Send__delete__
(
mActor
)
;
return
NS_OK
;
}
private
:
RefPtr
<
IPCBlobInputStreamChild
>
mActor
;
}
;
}
IPCBlobInputStreamChild
:
:
IPCBlobInputStreamChild
(
const
nsID
&
aID
uint64_t
aSize
)
:
mMutex
(
"
IPCBlobInputStreamChild
:
:
mMutex
"
)
mID
(
aID
)
mSize
(
aSize
)
mActorAlive
(
true
)
mOwningThread
(
NS_GetCurrentThread
(
)
)
{
}
IPCBlobInputStreamChild
:
:
~
IPCBlobInputStreamChild
(
)
{
}
void
IPCBlobInputStreamChild
:
:
ActorDestroy
(
IProtocol
:
:
ActorDestroyReason
aReason
)
{
mActorAlive
=
false
;
}
already_AddRefed
<
nsIInputStream
>
IPCBlobInputStreamChild
:
:
CreateStream
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
RefPtr
<
IPCBlobInputStream
>
stream
=
new
IPCBlobInputStream
(
this
)
;
mStreams
.
AppendElement
(
stream
)
;
return
stream
.
forget
(
)
;
}
void
IPCBlobInputStreamChild
:
:
ForgetStream
(
IPCBlobInputStream
*
aStream
)
{
MOZ_ASSERT
(
aStream
)
;
RefPtr
<
IPCBlobInputStreamChild
>
kungFoDeathGrip
=
this
;
{
MutexAutoLock
lock
(
mMutex
)
;
mStreams
.
RemoveElement
(
aStream
)
;
if
(
!
mStreams
.
IsEmpty
(
)
|
|
!
mActorAlive
)
{
return
;
}
}
if
(
mOwningThread
=
=
NS_GetCurrentThread
(
)
)
{
Send__delete__
(
this
)
;
return
;
}
RefPtr
<
DeleteRunnable
>
runnable
=
new
DeleteRunnable
(
this
)
;
mOwningThread
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
}
}
}
