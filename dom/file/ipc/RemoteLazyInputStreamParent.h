#
ifndef
mozilla_dom_RemoteLazyInputStreamParent_h
#
define
mozilla_dom_RemoteLazyInputStreamParent_h
#
include
"
mozilla
/
dom
/
PRemoteLazyInputStreamParent
.
h
"
class
nsIInputStream
;
namespace
mozilla
{
namespace
net
{
class
SocketProcessParent
;
}
namespace
dom
{
class
NS_NO_VTABLE
RemoteLazyInputStreamParentCallback
{
public
:
virtual
void
ActorDestroyed
(
const
nsID
&
aID
)
=
0
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected
:
virtual
~
RemoteLazyInputStreamParentCallback
(
)
=
default
;
}
;
class
RemoteLazyInputStreamParent
final
:
public
PRemoteLazyInputStreamParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteLazyInputStreamParent
final
)
template
<
typename
M
>
static
already_AddRefed
<
RemoteLazyInputStreamParent
>
Create
(
nsIInputStream
*
aInputStream
uint64_t
aSize
uint64_t
aChildID
nsresult
*
aRv
M
*
aManager
)
;
static
already_AddRefed
<
RemoteLazyInputStreamParent
>
Create
(
const
nsID
&
aID
uint64_t
aSize
mozilla
:
:
ipc
:
:
PBackgroundParent
*
aManager
)
;
static
already_AddRefed
<
RemoteLazyInputStreamParent
>
Create
(
const
nsID
&
aID
uint64_t
aSize
mozilla
:
:
net
:
:
SocketProcessParent
*
aManager
)
;
void
ActorDestroy
(
IProtocol
:
:
ActorDestroyReason
aReason
)
override
;
const
nsID
&
ID
(
)
const
{
return
mID
;
}
uint64_t
Size
(
)
const
{
return
mSize
;
}
void
SetCallback
(
RemoteLazyInputStreamParentCallback
*
aCallback
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStreamNeeded
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLengthNeeded
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClose
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
)
override
;
bool
HasValidStream
(
)
const
;
private
:
RemoteLazyInputStreamParent
(
const
nsID
&
aID
uint64_t
aSize
ContentParent
*
aManager
)
;
RemoteLazyInputStreamParent
(
const
nsID
&
aID
uint64_t
aSize
mozilla
:
:
ipc
:
:
PBackgroundParent
*
aManager
)
;
RemoteLazyInputStreamParent
(
const
nsID
&
aID
uint64_t
aSize
mozilla
:
:
net
:
:
SocketProcessParent
*
aManager
)
;
~
RemoteLazyInputStreamParent
(
)
=
default
;
const
nsID
mID
;
const
uint64_t
mSize
;
ContentParent
*
mContentManager
;
mozilla
:
:
ipc
:
:
PBackgroundParent
*
mPBackgroundManager
;
mozilla
:
:
net
:
:
SocketProcessParent
*
mSocketProcessManager
;
RefPtr
<
RemoteLazyInputStreamParentCallback
>
mCallback
;
bool
mMigrating
;
}
;
}
}
#
endif
