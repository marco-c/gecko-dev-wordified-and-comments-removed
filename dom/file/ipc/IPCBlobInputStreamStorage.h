#
ifndef
mozilla_dom_ipc_IPCBlobInputStreamStorage_h
#
define
mozilla_dom_ipc_IPCBlobInputStreamStorage_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsIInputStream
;
struct
nsID
;
namespace
mozilla
{
namespace
dom
{
class
IPCBlobInputStreamParentCallback
;
class
IPCBlobInputStreamStorage
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
IPCBlobInputStreamStorage
)
;
static
void
Initialize
(
)
;
static
IPCBlobInputStreamStorage
*
Get
(
)
;
void
AddStream
(
nsIInputStream
*
aInputStream
const
nsID
&
aID
)
;
void
ForgetStream
(
const
nsID
&
aID
)
;
void
GetStream
(
const
nsID
&
aID
nsIInputStream
*
*
aInputStream
)
;
void
StoreCallback
(
const
nsID
&
aID
IPCBlobInputStreamParentCallback
*
aCallback
)
;
already_AddRefed
<
IPCBlobInputStreamParentCallback
>
TakeCallback
(
const
nsID
&
aID
)
;
private
:
IPCBlobInputStreamStorage
(
)
;
~
IPCBlobInputStreamStorage
(
)
;
struct
StreamData
{
nsCOMPtr
<
nsIInputStream
>
mInputStream
;
RefPtr
<
IPCBlobInputStreamParentCallback
>
mCallback
;
}
;
nsClassHashtable
<
nsIDHashKey
StreamData
>
mStorage
;
}
;
}
}
#
endif
