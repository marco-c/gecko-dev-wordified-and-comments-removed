#
include
"
private
/
pprio
.
h
"
#
include
"
TemporaryIPCBlobParent
.
h
"
#
include
"
mozilla
/
dom
/
FileBlobImpl
.
h
"
#
include
"
nsAnonymousTemporaryFile
.
h
"
#
include
"
TemporaryFileBlobImpl
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
namespace
mozilla
:
:
dom
{
TemporaryIPCBlobParent
:
:
TemporaryIPCBlobParent
(
)
:
mActive
(
true
)
{
}
TemporaryIPCBlobParent
:
:
~
TemporaryIPCBlobParent
(
)
{
if
(
mFile
)
{
mFile
-
>
Remove
(
false
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
TemporaryIPCBlobParent
:
:
CreateAndShareFile
(
)
{
MOZ_ASSERT
(
mActive
)
;
MOZ_ASSERT
(
!
mFile
)
;
nsresult
rv
=
NS_OpenAnonymousTemporaryNsIFile
(
getter_AddRefs
(
mFile
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
SendDeleteError
(
rv
)
;
}
PRFileDesc
*
fd
;
rv
=
mFile
-
>
OpenNSPRFileDesc
(
PR_RDWR
PR_IRWXU
&
fd
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
SendDeleteError
(
rv
)
;
}
FileDescriptor
fdd
=
FileDescriptor
(
FileDescriptor
:
:
PlatformHandleType
(
PR_FileDesc2NativeHandle
(
fd
)
)
)
;
PR_Close
(
fd
)
;
(
void
)
SendFileDesc
(
fdd
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TemporaryIPCBlobParent
:
:
RecvOperationFailed
(
)
{
MOZ_ASSERT
(
mActive
)
;
mActive
=
false
;
(
void
)
Send__delete__
(
this
NS_ERROR_FAILURE
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
TemporaryIPCBlobParent
:
:
RecvOperationDone
(
const
nsCString
&
aContentType
const
FileDescriptor
&
aFD
)
{
MOZ_ASSERT
(
mActive
)
;
mActive
=
false
;
auto
rawFD
=
aFD
.
ClonePlatformHandle
(
)
;
PRFileDesc
*
prfile
=
PR_ImportFile
(
PROsfd
(
rawFD
.
release
(
)
)
)
;
nsCOMPtr
<
nsIFile
>
file
=
std
:
:
move
(
mFile
)
;
RefPtr
<
TemporaryFileBlobImpl
>
blobImpl
=
new
TemporaryFileBlobImpl
(
file
NS_ConvertUTF8toUTF16
(
aContentType
)
)
;
PR_Close
(
prfile
)
;
IPCBlob
ipcBlob
;
nsresult
rv
=
IPCBlobUtils
:
:
Serialize
(
blobImpl
ipcBlob
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
(
void
)
Send__delete__
(
this
NS_ERROR_FAILURE
)
;
return
IPC_OK
(
)
;
}
(
void
)
Send__delete__
(
this
ipcBlob
)
;
return
IPC_OK
(
)
;
}
void
TemporaryIPCBlobParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mActive
=
false
;
}
mozilla
:
:
ipc
:
:
IPCResult
TemporaryIPCBlobParent
:
:
SendDeleteError
(
nsresult
aRv
)
{
MOZ_ASSERT
(
mActive
)
;
mActive
=
false
;
(
void
)
Send__delete__
(
this
aRv
)
;
return
IPC_OK
(
)
;
}
}
