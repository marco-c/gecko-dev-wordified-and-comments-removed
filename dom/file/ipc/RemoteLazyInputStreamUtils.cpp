#
include
"
RemoteLazyInputStreamUtils
.
h
"
#
include
"
RemoteLazyInputStream
.
h
"
#
include
"
RemoteLazyInputStreamChild
.
h
"
#
include
"
RemoteLazyInputStreamParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamUtils
.
h
"
#
include
"
RemoteLazyInputStreamStorage
.
h
"
#
include
"
StreamBlobImpl
.
h
"
namespace
mozilla
{
namespace
{
template
<
typename
M
>
nsresult
SerializeInputStreamParent
(
nsIInputStream
*
aInputStream
uint64_t
aSize
uint64_t
aChildID
PRemoteLazyInputStreamParent
*
&
aActorParent
M
*
aManager
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsIInputStream
>
stream
=
aInputStream
;
nsCOMPtr
<
mozIRemoteLazyInputStream
>
remoteLazyInputStream
=
do_QueryInterface
(
aInputStream
)
;
if
(
remoteLazyInputStream
)
{
stream
=
remoteLazyInputStream
-
>
GetInternalStream
(
)
;
if
(
NS_WARN_IF
(
!
stream
)
)
{
return
NS_ERROR_FAILURE
;
}
}
nsresult
rv
;
RefPtr
<
RemoteLazyInputStreamParent
>
parentActor
=
RemoteLazyInputStreamParent
:
:
Create
(
stream
aSize
aChildID
&
rv
aManager
)
;
if
(
!
parentActor
)
{
return
rv
;
}
if
(
!
aManager
-
>
SendPRemoteLazyInputStreamConstructor
(
parentActor
parentActor
-
>
ID
(
)
parentActor
-
>
Size
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
aActorParent
=
parentActor
;
return
NS_OK
;
}
}
nsresult
RemoteLazyInputStreamUtils
:
:
SerializeInputStream
(
nsIInputStream
*
aInputStream
uint64_t
aSize
RemoteLazyStream
&
aOutStream
dom
:
:
ContentParent
*
aManager
)
{
PRemoteLazyInputStreamParent
*
actor
=
nullptr
;
nsresult
rv
=
SerializeInputStreamParent
(
aInputStream
aSize
aManager
-
>
ChildID
(
)
actor
aManager
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aOutStream
=
actor
;
return
NS_OK
;
}
nsresult
RemoteLazyInputStreamUtils
:
:
SerializeInputStream
(
nsIInputStream
*
aInputStream
uint64_t
aSize
RemoteLazyStream
&
aOutStream
ipc
:
:
PBackgroundParent
*
aManager
)
{
PRemoteLazyInputStreamParent
*
actor
=
nullptr
;
nsresult
rv
=
SerializeInputStreamParent
(
aInputStream
aSize
ipc
:
:
BackgroundParent
:
:
GetChildID
(
aManager
)
actor
aManager
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aOutStream
=
actor
;
return
NS_OK
;
}
nsresult
RemoteLazyInputStreamUtils
:
:
SerializeInputStream
(
nsIInputStream
*
aInputStream
uint64_t
aSize
RemoteLazyStream
&
aOutStream
dom
:
:
ContentChild
*
aManager
)
{
ipc
:
:
AutoIPCStream
ipcStream
(
true
)
;
if
(
!
ipcStream
.
Serialize
(
aInputStream
aManager
)
)
{
return
NS_ERROR_FAILURE
;
}
aOutStream
=
ipcStream
.
TakeValue
(
)
;
return
NS_OK
;
}
nsresult
RemoteLazyInputStreamUtils
:
:
SerializeInputStream
(
nsIInputStream
*
aInputStream
uint64_t
aSize
RemoteLazyStream
&
aOutStream
ipc
:
:
PBackgroundChild
*
aManager
)
{
ipc
:
:
AutoIPCStream
ipcStream
(
true
)
;
if
(
!
ipcStream
.
Serialize
(
aInputStream
aManager
)
)
{
return
NS_ERROR_FAILURE
;
}
aOutStream
=
ipcStream
.
TakeValue
(
)
;
return
NS_OK
;
}
}
