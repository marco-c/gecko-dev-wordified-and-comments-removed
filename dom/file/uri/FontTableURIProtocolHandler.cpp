#
include
"
FontTableURIProtocolHandler
.
h
"
#
include
"
nsIDUtils
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsSimpleURI
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsresult
FontTableURIProtocolHandler
:
:
GenerateURIString
(
nsACString
&
aUri
)
{
nsresult
rv
;
nsCOMPtr
<
nsIUUIDGenerator
>
uuidgen
=
do_GetService
(
"
mozilla
.
org
/
uuid
-
generator
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsID
id
;
rv
=
uuidgen
-
>
GenerateUUIDInPlace
(
&
id
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aUri
=
FONTTABLEURI_SCHEME
;
aUri
.
Append
(
'
:
'
)
;
aUri
+
=
NSID_TrimBracketsASCII
(
id
)
;
return
NS_OK
;
}
FontTableURIProtocolHandler
:
:
FontTableURIProtocolHandler
(
)
=
default
;
FontTableURIProtocolHandler
:
:
~
FontTableURIProtocolHandler
(
)
=
default
;
NS_IMPL_ISUPPORTS
(
FontTableURIProtocolHandler
nsIProtocolHandler
nsISupportsWeakReference
)
NS_IMETHODIMP
FontTableURIProtocolHandler
:
:
NewChannel
(
nsIURI
*
uri
nsILoadInfo
*
aLoadInfo
nsIChannel
*
*
result
)
{
return
NS_ERROR_DOM_BAD_URI
;
}
NS_IMETHODIMP
FontTableURIProtocolHandler
:
:
AllowPort
(
int32_t
port
const
char
*
scheme
bool
*
_retval
)
{
*
_retval
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
FontTableURIProtocolHandler
:
:
GetScheme
(
nsACString
&
result
)
{
result
.
AssignLiteral
(
FONTTABLEURI_SCHEME
)
;
return
NS_OK
;
}
