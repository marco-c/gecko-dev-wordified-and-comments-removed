#
ifndef
mozilla_dom_BlobURLProtocolHandler_h
#
define
mozilla_dom_BlobURLProtocolHandler_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
define
BLOBURI_SCHEME
"
blob
"
class
nsIPrincipal
;
namespace
mozilla
{
class
BlobURLsReporter
;
namespace
dom
{
class
BlobImpl
;
class
BlobURLRegistrationData
;
class
ContentParent
;
class
MediaSource
;
class
BlobURLProtocolHandler
final
:
public
nsIProtocolHandler
public
nsIProtocolHandlerWithDynamicFlags
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPROTOCOLHANDLER
NS_DECL_NSIPROTOCOLHANDLERWITHDYNAMICFLAGS
BlobURLProtocolHandler
(
)
;
static
nsresult
CreateNewURI
(
const
nsACString
&
aSpec
const
char
*
aCharset
nsIURI
*
aBaseURI
nsIURI
*
*
result
)
;
static
nsresult
AddDataEntry
(
BlobImpl
*
nsIPrincipal
*
nsACString
&
aUri
)
;
static
nsresult
AddDataEntry
(
MediaSource
*
nsIPrincipal
*
nsACString
&
aUri
)
;
static
void
AddDataEntry
(
const
nsACString
&
aURI
nsIPrincipal
*
BlobImpl
*
)
;
static
void
RemoveDataEntry
(
const
nsACString
&
aUri
bool
aBroadcastToOTherProcesses
=
true
)
;
static
void
RemoveDataEntries
(
)
;
static
bool
HasDataEntry
(
const
nsACString
&
aUri
)
;
static
nsIPrincipal
*
GetDataEntryPrincipal
(
const
nsACString
&
aUri
)
;
static
void
Traverse
(
const
nsACString
&
aUri
nsCycleCollectionTraversalCallback
&
aCallback
)
;
static
bool
GetAllBlobURLEntries
(
nsTArray
<
BlobURLRegistrationData
>
&
aRegistrations
ContentParent
*
)
;
static
bool
GetBlobURLPrincipal
(
nsIURI
*
aURI
nsIPrincipal
*
*
aPrincipal
)
;
private
:
~
BlobURLProtocolHandler
(
)
;
static
void
Init
(
)
;
static
nsresult
GenerateURIString
(
nsIPrincipal
*
aPrincipal
nsACString
&
aUri
)
;
}
;
bool
IsBlobURI
(
nsIURI
*
aUri
)
;
bool
IsMediaSourceURI
(
nsIURI
*
aUri
)
;
}
}
extern
nsresult
NS_GetBlobForBlobURI
(
nsIURI
*
aURI
mozilla
:
:
dom
:
:
BlobImpl
*
*
aBlob
)
;
extern
nsresult
NS_GetBlobForBlobURISpec
(
const
nsACString
&
aSpec
mozilla
:
:
dom
:
:
BlobImpl
*
*
aBlob
)
;
extern
nsresult
NS_GetSourceForMediaSourceURI
(
nsIURI
*
aURI
mozilla
:
:
dom
:
:
MediaSource
*
*
aSource
)
;
#
endif
