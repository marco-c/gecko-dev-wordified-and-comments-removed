#
include
"
BlobURLChannel
.
h
"
#
include
"
mozilla
/
dom
/
BlobImpl
.
h
"
#
include
"
mozilla
/
dom
/
BlobURL
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLInputStream
.
h
"
using
namespace
mozilla
:
:
dom
;
BlobURLChannel
:
:
BlobURLChannel
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
:
mContentStreamOpened
(
false
)
{
SetURI
(
aURI
)
;
SetOriginalURI
(
aURI
)
;
SetLoadInfo
(
aLoadInfo
)
;
if
(
aLoadInfo
&
&
aLoadInfo
-
>
GetLoadingSandboxed
(
)
)
{
SetOwner
(
nullptr
)
;
}
}
BlobURLChannel
:
:
~
BlobURLChannel
(
)
=
default
;
nsresult
BlobURLChannel
:
:
OpenContentStream
(
bool
aAsync
nsIInputStream
*
*
aResult
nsIChannel
*
*
aChannel
)
{
if
(
mContentStreamOpened
)
{
return
NS_ERROR_ALREADY_OPENED
;
}
mContentStreamOpened
=
true
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
GetURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
NS_ERROR_MALFORMED_URI
)
;
RefPtr
<
BlobURL
>
blobURL
;
rv
=
uri
-
>
QueryInterface
(
kHOSTOBJECTURICID
getter_AddRefs
(
blobURL
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
|
|
NS_WARN_IF
(
!
blobURL
)
)
{
return
NS_ERROR_MALFORMED_URI
;
}
if
(
blobURL
-
>
Revoked
(
)
)
{
#
ifdef
MOZ_WIDGET_ANDROID
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
GetLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
;
if
(
loadInfo
&
&
!
loadInfo
-
>
TriggeringPrincipal
(
)
-
>
IsSystemPrincipal
(
)
)
{
return
NS_ERROR_MALFORMED_URI
;
}
#
else
return
NS_ERROR_MALFORMED_URI
;
#
endif
}
nsCOMPtr
<
nsIInputStream
>
inputStream
=
BlobURLInputStream
:
:
Create
(
this
blobURL
)
;
if
(
NS_WARN_IF
(
!
inputStream
)
)
{
return
NS_ERROR_MALFORMED_URI
;
}
EnableSynthesizedProgressEvents
(
true
)
;
inputStream
.
forget
(
aResult
)
;
return
NS_OK
;
}
