#
ifndef
mozilla_dom_BaseBlobImpl_h
#
define
mozilla_dom_BaseBlobImpl_h
#
include
"
mozilla
/
dom
/
BlobImpl
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
namespace
mozilla
:
:
dom
{
class
FileBlobImpl
;
class
BaseBlobImpl
:
public
BlobImpl
{
friend
class
FileBlobImpl
;
public
:
BaseBlobImpl
(
const
nsAString
&
aName
const
nsAString
&
aContentType
uint64_t
aLength
int64_t
aLastModifiedDate
)
:
mIsFile
(
true
)
mContentType
(
aContentType
)
mName
(
aName
)
mStart
(
0
)
mLength
(
aLength
)
mSerialNumber
(
NextSerialNumber
(
)
)
mLastModificationDate
(
aLastModifiedDate
)
{
mContentType
.
SetIsVoid
(
false
)
;
}
BaseBlobImpl
(
const
nsAString
&
aContentType
uint64_t
aLength
)
:
mIsFile
(
false
)
mContentType
(
aContentType
)
mStart
(
0
)
mLength
(
aLength
)
mSerialNumber
(
NextSerialNumber
(
)
)
mLastModificationDate
(
0
)
{
mContentType
.
SetIsVoid
(
false
)
;
}
BaseBlobImpl
(
const
nsAString
&
aContentType
uint64_t
aStart
uint64_t
aLength
)
:
mIsFile
(
false
)
mContentType
(
aContentType
)
mStart
(
aStart
)
mLength
(
aLength
)
mSerialNumber
(
NextSerialNumber
(
)
)
mLastModificationDate
(
0
)
{
mContentType
.
SetIsVoid
(
false
)
;
}
void
GetName
(
nsAString
&
aName
)
const
override
;
void
GetDOMPath
(
nsAString
&
aPath
)
const
override
;
void
SetDOMPath
(
const
nsAString
&
aPath
)
override
;
int64_t
GetLastModified
(
ErrorResult
&
aRv
)
override
;
void
GetMozFullPath
(
nsAString
&
aFileName
SystemCallerGuarantee
ErrorResult
&
aRv
)
override
;
void
GetMozFullPathInternal
(
nsAString
&
aFileName
ErrorResult
&
aRv
)
override
;
uint64_t
GetSize
(
ErrorResult
&
aRv
)
override
{
return
mLength
;
}
void
GetType
(
nsAString
&
aType
)
override
;
size_t
GetAllocationSize
(
)
const
override
{
return
0
;
}
size_t
GetAllocationSize
(
FallibleTArray
<
BlobImpl
*
>
&
aVisitedBlobImpls
)
const
override
{
return
GetAllocationSize
(
)
;
}
uint64_t
GetSerialNumber
(
)
const
override
{
return
mSerialNumber
;
}
already_AddRefed
<
BlobImpl
>
CreateSlice
(
uint64_t
aStart
uint64_t
aLength
const
nsAString
&
aContentType
ErrorResult
&
aRv
)
override
{
return
nullptr
;
}
const
nsTArray
<
RefPtr
<
BlobImpl
>
>
*
GetSubBlobImpls
(
)
const
override
{
return
nullptr
;
}
void
CreateInputStream
(
nsIInputStream
*
*
aStream
ErrorResult
&
aRv
)
const
override
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
int64_t
GetFileId
(
)
const
override
;
void
SetLazyData
(
const
nsAString
&
aName
const
nsAString
&
aContentType
uint64_t
aLength
int64_t
aLastModifiedDate
)
override
{
mName
=
aName
;
mContentType
=
aContentType
;
mLength
=
aLength
;
SetLastModificationDatePrecisely
(
aLastModifiedDate
)
;
mIsFile
=
!
aName
.
IsVoid
(
)
;
}
bool
IsMemoryFile
(
)
const
override
{
return
false
;
}
bool
IsFile
(
)
const
override
{
return
mIsFile
;
}
void
GetBlobImplType
(
nsAString
&
aBlobImplType
)
const
override
{
aBlobImplType
=
u
"
BaseBlobImpl
"
_ns
;
}
protected
:
~
BaseBlobImpl
(
)
override
=
default
;
static
uint64_t
NextSerialNumber
(
)
;
void
SetLastModificationDate
(
bool
aCrossOriginIsolated
int64_t
aDate
)
;
void
SetLastModificationDatePrecisely
(
int64_t
aDate
)
;
#
ifdef
DEBUG
bool
IsLastModificationDateUnset
(
)
const
{
return
mLastModificationDate
=
=
INT64_MAX
;
}
#
endif
const
nsString
mBlobImplType
;
bool
mIsFile
;
nsString
mContentType
;
nsString
mName
;
nsString
mPath
;
uint64_t
mStart
;
uint64_t
mLength
;
const
uint64_t
mSerialNumber
;
private
:
int64_t
mLastModificationDate
;
}
;
}
#
endif
