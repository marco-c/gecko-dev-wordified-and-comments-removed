#
include
"
FlexLine
.
h
"
#
include
"
FlexItem
.
h
"
#
include
"
mozilla
/
dom
/
FlexBinding
.
h
"
#
include
"
nsFlexContainerFrame
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
FlexLine
mParent
mItems
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FlexLine
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FlexLine
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FlexLine
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
FlexLine
:
:
FlexLine
(
Flex
*
aParent
const
ComputedFlexLineInfo
*
aLine
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
aLine
"
Should
never
be
instantiated
with
a
null
ComputedFlexLineInfo
.
"
)
;
switch
(
aLine
-
>
mGrowthState
)
{
case
ComputedFlexLineInfo
:
:
GrowthState
:
:
SHRINKING
:
mGrowthState
=
FlexLineGrowthState
:
:
Shrinking
;
break
;
case
ComputedFlexLineInfo
:
:
GrowthState
:
:
GROWING
:
mGrowthState
=
FlexLineGrowthState
:
:
Growing
;
break
;
default
:
mGrowthState
=
FlexLineGrowthState
:
:
Unchanged
;
}
;
mCrossSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aLine
-
>
mCrossSize
)
;
mFirstBaselineOffset
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aLine
-
>
mFirstBaselineOffset
)
;
mLastBaselineOffset
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aLine
-
>
mLastBaselineOffset
)
;
mItems
.
SetLength
(
aLine
-
>
mItems
.
Length
(
)
)
;
uint32_t
index
=
0
;
for
(
auto
&
&
i
:
aLine
-
>
mItems
)
{
FlexItem
*
item
=
new
FlexItem
(
this
&
i
)
;
mItems
.
ElementAt
(
index
)
=
item
;
index
+
+
;
}
}
JSObject
*
FlexLine
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FlexLineBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
FlexLineGrowthState
FlexLine
:
:
GrowthState
(
)
const
{
return
mGrowthState
;
}
double
FlexLine
:
:
CrossSize
(
)
const
{
return
mCrossSize
;
}
double
FlexLine
:
:
FirstBaselineOffset
(
)
const
{
return
mFirstBaselineOffset
;
}
double
FlexLine
:
:
LastBaselineOffset
(
)
const
{
return
mLastBaselineOffset
;
}
void
FlexLine
:
:
GetItems
(
nsTArray
<
RefPtr
<
FlexItem
>
>
&
aResult
)
{
aResult
.
AppendElements
(
mItems
)
;
}
}
}
