#
include
"
FlexItemValues
.
h
"
#
include
"
mozilla
/
dom
/
FlexBinding
.
h
"
#
include
"
nsFlexContainerFrame
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
FlexItemValues
mParent
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FlexItemValues
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FlexItemValues
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FlexItemValues
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
static
double
ToPossiblyUnconstrainedPixels
(
nscoord
aSize
)
{
if
(
aSize
=
=
NS_UNCONSTRAINEDSIZE
)
{
return
std
:
:
numeric_limits
<
double
>
:
:
infinity
(
)
;
}
return
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aSize
)
;
}
FlexItemValues
:
:
FlexItemValues
(
FlexLineValues
*
aParent
const
ComputedFlexItemInfo
*
aItem
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
aItem
"
Should
never
be
instantiated
with
a
null
ComputedFlexLineInfo
.
"
)
;
mNode
=
aItem
-
>
mNode
;
mMainPosition
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mMainPosition
)
;
mMainSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mMainSize
)
;
mMainBaseSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mMainBaseSize
)
;
mMainDeltaSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mMainDeltaSize
)
;
mMainMinSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mMainMinSize
)
;
mMainMaxSize
=
ToPossiblyUnconstrainedPixels
(
aItem
-
>
mMainMaxSize
)
;
mCrossPosition
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mCrossPosition
)
;
mCrossSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mCrossSize
)
;
mCrossMinSize
=
nsPresContext
:
:
AppUnitsToDoubleCSSPixels
(
aItem
-
>
mCrossMinSize
)
;
mCrossMaxSize
=
ToPossiblyUnconstrainedPixels
(
aItem
-
>
mCrossMaxSize
)
;
mClampState
=
aItem
-
>
mClampState
;
}
JSObject
*
FlexItemValues
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FlexItemValues_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsINode
*
FlexItemValues
:
:
GetNode
(
)
const
{
return
mNode
;
}
double
FlexItemValues
:
:
MainPosition
(
)
const
{
return
mMainPosition
;
}
double
FlexItemValues
:
:
MainSize
(
)
const
{
return
mMainSize
;
}
double
FlexItemValues
:
:
MainBaseSize
(
)
const
{
return
mMainBaseSize
;
}
double
FlexItemValues
:
:
MainDeltaSize
(
)
const
{
return
mMainDeltaSize
;
}
double
FlexItemValues
:
:
MainMinSize
(
)
const
{
return
mMainMinSize
;
}
double
FlexItemValues
:
:
MainMaxSize
(
)
const
{
return
mMainMaxSize
;
}
double
FlexItemValues
:
:
CrossPosition
(
)
const
{
return
mCrossPosition
;
}
double
FlexItemValues
:
:
CrossSize
(
)
const
{
return
mCrossSize
;
}
double
FlexItemValues
:
:
CrossMinSize
(
)
const
{
return
mCrossMinSize
;
}
double
FlexItemValues
:
:
CrossMaxSize
(
)
const
{
return
mCrossMaxSize
;
}
FlexItemClampState
FlexItemValues
:
:
ClampState
(
)
const
{
return
mClampState
;
}
}
}
