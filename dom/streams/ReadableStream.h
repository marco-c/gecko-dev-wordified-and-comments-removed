#
ifndef
mozilla_dom_ReadableStream_h
#
define
mozilla_dom_ReadableStream_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamController
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceCallbackHelpers
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
class
Promise
;
class
ReadableStreamGenericReader
;
class
ReadableStreamDefaultReader
;
class
ReadableStreamGenericReader
;
struct
ReadableStreamGetReaderOptions
;
struct
ReadIntoRequest
;
class
WritableStream
;
struct
ReadableWritablePair
;
struct
StreamPipeOptions
;
using
ReadableStreamReader
=
ReadableStreamDefaultReaderOrReadableStreamBYOBReader
;
using
OwningReadableStreamReader
=
OwningReadableStreamDefaultReaderOrReadableStreamBYOBReader
;
class
NativeUnderlyingSource
;
class
BodyStreamHolder
;
class
UniqueMessagePortId
;
class
MessagePort
;
class
ReadableStream
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
ReadableStream
)
protected
:
virtual
~
ReadableStream
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
public
:
explicit
ReadableStream
(
const
GlobalObject
&
aGlobal
)
;
explicit
ReadableStream
(
nsIGlobalObject
*
aGlobal
)
;
enum
class
ReaderState
{
Readable
Closed
Errored
}
;
public
:
MOZ_KNOWN_LIVE
ReadableStreamController
*
Controller
(
)
{
return
mController
;
}
ReadableStreamDefaultController
*
DefaultController
(
)
{
MOZ_ASSERT
(
mController
&
&
mController
-
>
IsDefault
(
)
)
;
return
mController
-
>
AsDefault
(
)
;
}
void
SetController
(
ReadableStreamController
&
aController
)
{
MOZ_ASSERT
(
!
mController
)
;
mController
=
&
aController
;
}
bool
Disturbed
(
)
const
{
return
mDisturbed
;
}
void
SetDisturbed
(
bool
aDisturbed
)
{
mDisturbed
=
aDisturbed
;
}
ReadableStreamGenericReader
*
GetReader
(
)
{
return
mReader
;
}
void
SetReader
(
ReadableStreamGenericReader
*
aReader
)
;
ReadableStreamDefaultReader
*
GetDefaultReader
(
)
;
ReaderState
State
(
)
const
{
return
mState
;
}
void
SetState
(
const
ReaderState
&
aState
)
{
mState
=
aState
;
}
JS
:
:
Value
StoredError
(
)
const
{
return
mStoredError
;
}
void
SetStoredError
(
JS
:
:
Handle
<
JS
:
:
Value
>
aStoredError
)
{
mStoredError
=
aStoredError
;
}
void
SetNativeUnderlyingSource
(
BodyStreamHolder
*
aUnderlyingSource
)
;
BodyStreamHolder
*
GetNativeUnderlyingSource
(
)
{
return
mNativeUnderlyingSource
;
}
bool
HasNativeUnderlyingSource
(
)
{
return
mNativeUnderlyingSource
;
}
void
ReleaseObjectsFromBodyStream
(
)
;
MOZ_CAN_RUN_SCRIPT
bool
Transfer
(
JSContext
*
aCx
UniqueMessagePortId
&
aPortId
)
;
static
MOZ_CAN_RUN_SCRIPT
bool
ReceiveTransfer
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
MessagePort
&
aPort
JS
:
:
MutableHandle
<
JSObject
*
>
aReturnObject
)
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MOZ_CAN_RUN_SCRIPT
static
already_AddRefed
<
ReadableStream
>
Create
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
BodyStreamHolder
*
aUnderlyingSource
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
already_AddRefed
<
ReadableStream
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aUnderlyingSource
const
QueuingStrategy
&
aStrategy
ErrorResult
&
aRv
)
;
bool
Locked
(
)
const
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
Cancel
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
ErrorResult
&
aRv
)
;
void
GetReader
(
const
ReadableStreamGetReaderOptions
&
aOptions
OwningReadableStreamReader
&
resultReader
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
ReadableStream
>
PipeThrough
(
const
ReadableWritablePair
&
aTransform
const
StreamPipeOptions
&
aOptions
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
PipeTo
(
WritableStream
&
aDestinaton
const
StreamPipeOptions
&
aOptions
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Tee
(
JSContext
*
aCx
nsTArray
<
RefPtr
<
ReadableStream
>
>
&
aResult
ErrorResult
&
aRv
)
;
private
:
RefPtr
<
ReadableStreamController
>
mController
;
bool
mDisturbed
=
false
;
RefPtr
<
ReadableStreamGenericReader
>
mReader
;
ReaderState
mState
=
ReaderState
:
:
Readable
;
JS
:
:
Heap
<
JS
:
:
Value
>
mStoredError
;
RefPtr
<
BodyStreamHolder
>
mNativeUnderlyingSource
;
}
;
bool
IsReadableStreamLocked
(
ReadableStream
*
aStream
)
;
double
ReadableStreamGetNumReadRequests
(
ReadableStream
*
aStream
)
;
void
ReadableStreamError
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
ReadableStreamClose
(
JSContext
*
aCx
ReadableStream
*
aStream
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
ReadableStreamFulfillReadRequest
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
bool
done
ErrorResult
&
aRv
)
;
void
ReadableStreamAddReadRequest
(
ReadableStream
*
aStream
ReadRequest
*
aReadRequest
)
;
void
ReadableStreamAddReadIntoRequest
(
ReadableStream
*
aStream
ReadIntoRequest
*
aReadIntoRequest
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
ReadableStreamCancel
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
;
already_AddRefed
<
ReadableStreamDefaultReader
>
AcquireReadableStreamDefaultReader
(
ReadableStream
*
aStream
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
ReadableStream
>
CreateReadableStream
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
UnderlyingSourceAlgorithmsBase
*
aAlgorithms
mozilla
:
:
Maybe
<
double
>
aHighWaterMark
QueuingStrategySize
*
aSizeAlgorithm
ErrorResult
&
aRv
)
;
bool
ReadableStreamHasBYOBReader
(
ReadableStream
*
aStream
)
;
bool
ReadableStreamHasDefaultReader
(
ReadableStream
*
aStream
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
ReadableStream
>
CreateReadableByteStream
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
UnderlyingSourceAlgorithmsBase
*
aAlgorithms
ErrorResult
&
aRv
)
;
}
#
endif
