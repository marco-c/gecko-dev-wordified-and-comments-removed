#
include
"
mozilla
/
dom
/
TransformStreamDefaultController
.
h
"
#
include
"
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformStreamDefaultControllerBinding
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TransformStreamDefaultController
mGlobal
mStream
mTransformerAlgorithms
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TransformStreamDefaultController
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TransformStreamDefaultController
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TransformStreamDefaultController
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
void
TransformStreamDefaultController
:
:
SetStream
(
TransformStream
&
aStream
)
{
MOZ_ASSERT
(
!
mStream
)
;
mStream
=
&
aStream
;
}
void
TransformStreamDefaultController
:
:
SetAlgorithms
(
TransformerAlgorithms
*
aTransformerAlgorithms
)
{
mTransformerAlgorithms
=
aTransformerAlgorithms
;
}
TransformStreamDefaultController
:
:
TransformStreamDefaultController
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
TransformStreamDefaultController
:
:
~
TransformStreamDefaultController
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
TransformStreamDefaultController
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TransformStreamDefaultController_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
Nullable
<
double
>
TransformStreamDefaultController
:
:
GetDesiredSize
(
)
const
{
RefPtr
<
ReadableStreamDefaultController
>
readableController
=
mStream
-
>
Readable
(
)
-
>
Controller
(
)
-
>
AsDefault
(
)
;
return
ReadableStreamDefaultControllerGetDesiredSize
(
readableController
)
;
}
static
bool
ReadableStreamDefaultControllerHasBackpressure
(
ReadableStreamDefaultController
*
aController
)
{
return
!
ReadableStreamDefaultControllerShouldCallPull
(
aController
)
;
}
void
TransformStreamDefaultController
:
:
Enqueue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
{
RefPtr
<
TransformStream
>
stream
=
mStream
;
RefPtr
<
ReadableStreamDefaultController
>
readableController
=
stream
-
>
Readable
(
)
-
>
Controller
(
)
-
>
AsDefault
(
)
;
if
(
!
ReadableStreamDefaultControllerCanCloseOrEnqueueAndThrow
(
readableController
CloseOrEnqueue
:
:
Enqueue
aRv
)
)
{
return
;
}
ErrorResult
rv
;
ReadableStreamDefaultControllerEnqueue
(
aCx
readableController
aChunk
rv
)
;
if
(
rv
.
MaybeSetPendingException
(
aCx
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
error
(
aCx
)
;
if
(
!
JS_GetPendingException
(
aCx
&
error
)
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
JS_ClearPendingException
(
aCx
)
;
TransformStreamErrorWritableAndUnblockWrite
(
aCx
stream
error
aRv
)
;
JS
:
:
RootedValue
storedError
(
aCx
stream
-
>
Readable
(
)
-
>
StoredError
(
)
)
;
aRv
.
MightThrowJSException
(
)
;
aRv
.
ThrowJSException
(
aCx
storedError
)
;
return
;
}
bool
backpressure
=
ReadableStreamDefaultControllerHasBackpressure
(
readableController
)
;
if
(
backpressure
!
=
stream
-
>
Backpressure
(
)
)
{
MOZ_ASSERT
(
backpressure
)
;
TransformStreamSetBackpressure
(
stream
true
aRv
)
;
}
}
void
TransformStreamDefaultController
:
:
Error
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
{
TransformStreamError
(
aCx
mStream
aError
aRv
)
;
}
void
TransformStreamDefaultController
:
:
Terminate
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
RefPtr
<
TransformStream
>
stream
=
mStream
;
RefPtr
<
ReadableStreamDefaultController
>
readableController
=
stream
-
>
Readable
(
)
-
>
Controller
(
)
-
>
AsDefault
(
)
;
ReadableStreamDefaultControllerClose
(
aCx
readableController
aRv
)
;
ErrorResult
rv
;
rv
.
ThrowTypeError
(
"
Terminating
the
stream
"
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
error
(
aCx
)
;
MOZ_ALWAYS_TRUE
(
ToJSValue
(
aCx
std
:
:
move
(
rv
)
&
error
)
)
;
TransformStreamErrorWritableAndUnblockWrite
(
aCx
stream
error
aRv
)
;
}
void
SetUpTransformStreamDefaultController
(
JSContext
*
aCx
TransformStream
&
aStream
TransformStreamDefaultController
&
aController
TransformerAlgorithms
&
aTransformerAlgorithms
)
{
MOZ_ASSERT
(
!
aStream
.
Controller
(
)
)
;
aController
.
SetStream
(
aStream
)
;
aStream
.
SetController
(
aController
)
;
aController
.
SetAlgorithms
(
&
aTransformerAlgorithms
)
;
}
void
SetUpTransformStreamDefaultControllerFromTransformer
(
JSContext
*
aCx
TransformStream
&
aStream
JS
:
:
HandleObject
aTransformer
Transformer
&
aTransformerDict
)
{
auto
controller
=
MakeRefPtr
<
TransformStreamDefaultController
>
(
aStream
.
GetParentObject
(
)
)
;
auto
algorithms
=
MakeRefPtr
<
TransformerAlgorithms
>
(
aStream
.
GetParentObject
(
)
aTransformer
aTransformerDict
)
;
SetUpTransformStreamDefaultController
(
aCx
aStream
*
controller
*
algorithms
)
;
}
}
