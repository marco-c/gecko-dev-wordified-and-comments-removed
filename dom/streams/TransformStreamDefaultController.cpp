#
include
"
mozilla
/
dom
/
TransformStreamDefaultController
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformStreamDefaultControllerBinding
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_WITH_JS_MEMBERS
(
TransformStreamDefaultController
(
mGlobal
mTransformCallback
)
(
mTransformer
)
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TransformStreamDefaultController
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TransformStreamDefaultController
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TransformStreamDefaultController
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
TransformStreamDefaultController
:
:
TransformStreamDefaultController
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
TransformStreamDefaultController
:
:
~
TransformStreamDefaultController
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
TransformStreamDefaultController
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TransformStreamDefaultController_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
Nullable
<
double
>
TransformStreamDefaultController
:
:
GetDesiredSize
(
)
const
{
return
0
;
}
void
TransformStreamDefaultController
:
:
Enqueue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
TransformStreamDefaultController
:
:
Error
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
TransformStreamDefaultController
:
:
Terminate
(
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
SetUpTransformStreamDefaultController
(
JSContext
*
aCx
TransformStream
&
aStream
TransformStreamDefaultController
&
aController
TransformStreamDefaultController
:
:
TransformAlgorithm
aTransformAlgorithm
)
{
MOZ_ASSERT
(
!
aStream
.
Controller
(
)
)
;
aStream
.
SetController
(
&
aController
)
;
aController
.
SetTransformAlgorithm
(
aTransformAlgorithm
)
;
}
void
SetUpTransformStreamDefaultControllerFromTransformer
(
JSContext
*
aCx
TransformStream
&
aStream
JS
:
:
HandleObject
aTransformer
Transformer
&
aTransformerDict
)
{
RefPtr
<
TransformStreamDefaultController
>
controller
=
new
TransformStreamDefaultController
(
aStream
.
GetParentObject
(
)
)
;
TransformStreamDefaultController
:
:
TransformAlgorithm
transformAlgorithm
;
if
(
!
aTransformerDict
.
mTransform
.
WasPassed
(
)
)
{
transformAlgorithm
=
[
]
(
JSContext
*
aCx
TransformStreamDefaultController
&
aController
JS
:
:
HandleValue
aChunk
ErrorResult
&
aRv
)
-
>
already_AddRefed
<
Promise
>
{
MOZ_ASSERT
(
!
aController
.
GetTransformCallback
(
)
)
;
MOZ_ASSERT
(
!
aController
.
GetTransformer
(
)
)
;
return
Promise
:
:
CreateResolvedWithUndefined
(
aController
.
GetParentObject
(
)
aRv
)
;
}
;
}
else
{
controller
-
>
SetTransformerMembers
(
aTransformerDict
.
mTransform
.
Value
(
)
aTransformer
)
;
transformAlgorithm
=
[
]
(
JSContext
*
aCx
TransformStreamDefaultController
&
aController
JS
:
:
HandleValue
aChunk
ErrorResult
&
aRv
)
MOZ_CAN_RUN_SCRIPT_FOR_DEFINITION
-
>
already_AddRefed
<
Promise
>
{
MOZ_ASSERT
(
aController
.
GetTransformCallback
(
)
)
;
MOZ_ASSERT
(
aController
.
GetTransformer
(
)
)
;
JS
:
:
RootedObject
thisObj
(
aCx
aController
.
GetTransformer
(
)
)
;
RefPtr
<
TransformerTransformCallback
>
callback
=
aController
.
GetTransformCallback
(
)
;
return
callback
-
>
Call
(
thisObj
aChunk
aController
aRv
"
TransformStreamDefaultController
.
[
[
transformAlgorithm
]
]
"
CallbackObject
:
:
eRethrowExceptions
)
;
}
;
}
SetUpTransformStreamDefaultController
(
aCx
aStream
*
controller
transformAlgorithm
)
;
}
}
