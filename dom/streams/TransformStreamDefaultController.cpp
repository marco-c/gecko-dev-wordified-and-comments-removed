#
include
"
mozilla
/
dom
/
TransformStreamDefaultController
.
h
"
#
include
"
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
TransformStreamDefaultControllerBinding
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TransformStreamDefaultController
mGlobal
mTransformerAlgorithms
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TransformStreamDefaultController
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TransformStreamDefaultController
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TransformStreamDefaultController
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
void
TransformStreamDefaultController
:
:
SetAlgorithms
(
TransformerAlgorithms
*
aTransformerAlgorithms
)
{
mTransformerAlgorithms
=
aTransformerAlgorithms
;
}
TransformStreamDefaultController
:
:
TransformStreamDefaultController
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
TransformStreamDefaultController
:
:
~
TransformStreamDefaultController
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
TransformStreamDefaultController
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TransformStreamDefaultController_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
Nullable
<
double
>
TransformStreamDefaultController
:
:
GetDesiredSize
(
)
const
{
return
0
;
}
void
TransformStreamDefaultController
:
:
Enqueue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
TransformStreamDefaultController
:
:
Error
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
TransformStreamDefaultController
:
:
Terminate
(
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
SetUpTransformStreamDefaultController
(
JSContext
*
aCx
TransformStream
&
aStream
TransformStreamDefaultController
&
aController
TransformerAlgorithms
&
aTransformerAlgorithms
)
{
MOZ_ASSERT
(
!
aStream
.
Controller
(
)
)
;
aStream
.
SetController
(
&
aController
)
;
aController
.
SetAlgorithms
(
&
aTransformerAlgorithms
)
;
}
void
SetUpTransformStreamDefaultControllerFromTransformer
(
JSContext
*
aCx
TransformStream
&
aStream
JS
:
:
HandleObject
aTransformer
Transformer
&
aTransformerDict
)
{
auto
controller
=
MakeRefPtr
<
TransformStreamDefaultController
>
(
aStream
.
GetParentObject
(
)
)
;
auto
algorithms
=
MakeRefPtr
<
TransformerAlgorithms
>
(
aStream
.
GetParentObject
(
)
aTransformer
aTransformerDict
)
;
SetUpTransformStreamDefaultController
(
aCx
aStream
*
controller
*
algorithms
)
;
}
}
