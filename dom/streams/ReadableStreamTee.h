#
ifndef
mozilla_dom_ReadableStreamTee_h
#
define
mozilla_dom_ReadableStreamTee_h
#
include
"
mozilla
/
dom
/
ReadRequest
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamControllerBase
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceCallbackHelpers
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
struct
TeeState
;
enum
class
TeeBranch
:
bool
;
class
ReadableStream
;
class
ReadableStreamDefaultTeeSourceAlgorithms
final
:
public
UnderlyingSourceAlgorithmsBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ReadableStreamDefaultTeeSourceAlgorithms
UnderlyingSourceAlgorithmsBase
)
ReadableStreamDefaultTeeSourceAlgorithms
(
TeeState
*
aTeeState
TeeBranch
aBranch
)
:
mTeeState
(
aTeeState
)
mBranch
(
aBranch
)
{
}
MOZ_CAN_RUN_SCRIPT
void
StartCallback
(
JSContext
*
aCx
ReadableStreamControllerBase
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
override
{
aRetVal
.
setUndefined
(
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamControllerBase
&
aController
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
protected
:
~
ReadableStreamDefaultTeeSourceAlgorithms
(
)
override
=
default
;
private
:
MOZ_KNOWN_LIVE
RefPtr
<
TeeState
>
mTeeState
;
TeeBranch
mBranch
;
}
;
struct
ReadableStreamDefaultTeeReadRequest
final
:
public
ReadRequest
{
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ReadableStreamDefaultTeeReadRequest
ReadRequest
)
RefPtr
<
TeeState
>
mTeeState
;
explicit
ReadableStreamDefaultTeeReadRequest
(
TeeState
*
aTeeState
)
:
mTeeState
(
aTeeState
)
{
}
void
ChunkSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
void
CloseSteps
(
JSContext
*
aCx
ErrorResult
&
aRv
)
override
;
void
ErrorSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
override
;
protected
:
~
ReadableStreamDefaultTeeReadRequest
(
)
override
=
default
;
}
;
namespace
streams_abstract
{
MOZ_CAN_RUN_SCRIPT
void
ReadableByteStreamTee
(
JSContext
*
aCx
ReadableStream
*
aStream
nsTArray
<
RefPtr
<
ReadableStream
>
>
&
aResult
ErrorResult
&
aRv
)
;
}
}
#
endif
