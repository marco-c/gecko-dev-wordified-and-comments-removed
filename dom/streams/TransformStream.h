#
ifndef
DOM_STREAMS_TRANSFORMSTREAM_H_
#
define
DOM_STREAMS_TRANSFORMSTREAM_H_
#
include
"
TransformStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
mozilla
/
dom
/
TransformerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
class
WritableStream
;
class
ReadableStream
;
class
UniqueMessagePortId
;
class
MessagePort
;
class
TransformStream
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
TransformStream
)
TransformStream
(
nsIGlobalObject
*
aGlobal
ReadableStream
*
aReadable
WritableStream
*
aWritable
)
;
bool
Backpressure
(
)
const
{
return
mBackpressure
;
}
Promise
*
BackpressureChangePromise
(
)
{
return
mBackpressureChangePromise
;
}
void
SetBackpressure
(
bool
aBackpressure
ErrorResult
&
aRv
)
;
MOZ_KNOWN_LIVE
TransformStreamDefaultController
*
Controller
(
)
{
return
mController
;
}
void
SetController
(
TransformStreamDefaultController
&
aController
)
{
MOZ_ASSERT
(
!
mController
)
;
mController
=
&
aController
;
}
MOZ_CAN_RUN_SCRIPT
bool
Transfer
(
JSContext
*
aCx
UniqueMessagePortId
&
aPortId1
UniqueMessagePortId
&
aPortId2
)
;
static
MOZ_CAN_RUN_SCRIPT
bool
ReceiveTransfer
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
MessagePort
&
aPort1
MessagePort
&
aPort2
JS
:
:
MutableHandle
<
JSObject
*
>
aReturnObject
)
;
protected
:
~
TransformStream
(
)
;
explicit
TransformStream
(
nsIGlobalObject
*
aGlobal
)
;
MOZ_CAN_RUN_SCRIPT
void
Initialize
(
JSContext
*
aCx
Promise
*
aStartPromise
double
aWritableHighWaterMark
QueuingStrategySize
*
aWritableSizeAlgorithm
double
aReadableHighWaterMark
QueuingStrategySize
*
aReadableSizeAlgorithm
ErrorResult
&
aRv
)
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
already_AddRefed
<
TransformStream
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aTransformer
const
QueuingStrategy
&
aWritableStrategy
const
QueuingStrategy
&
aReadableStrategy
ErrorResult
&
aRv
)
;
ReadableStream
*
Readable
(
)
const
{
return
mReadable
;
}
WritableStream
*
Writable
(
)
const
{
return
mWritable
;
}
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
bool
mBackpressure
=
false
;
RefPtr
<
Promise
>
mBackpressureChangePromise
;
RefPtr
<
TransformStreamDefaultController
>
mController
;
RefPtr
<
ReadableStream
>
mReadable
;
RefPtr
<
WritableStream
>
mWritable
;
}
;
MOZ_CAN_RUN_SCRIPT
void
TransformStreamErrorWritableAndUnblockWrite
(
JSContext
*
aCx
TransformStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
TransformStreamError
(
JSContext
*
aCx
TransformStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
;
}
#
endif
