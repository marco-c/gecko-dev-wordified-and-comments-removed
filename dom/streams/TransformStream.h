#
ifndef
DOM_STREAMS_TRANSFORMSTREAM_H_
#
define
DOM_STREAMS_TRANSFORMSTREAM_H_
#
include
"
TransformStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
mozilla
/
dom
/
TransformerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
ifndef
MOZ_DOM_STREAMS
#
error
"
Shouldn
'
t
be
compiling
with
this
header
without
MOZ_DOM_STREAMS
set
"
#
endif
namespace
mozilla
:
:
dom
{
class
WritableStream
;
class
ReadableStream
;
class
TransformStream
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
TransformStream
)
TransformStreamDefaultController
*
Controller
(
)
{
return
mController
;
}
void
SetController
(
TransformStreamDefaultController
*
aController
)
{
mController
=
aController
;
}
protected
:
~
TransformStream
(
)
;
explicit
TransformStream
(
nsIGlobalObject
*
aGlobal
)
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
already_AddRefed
<
TransformStream
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aTransformer
const
QueuingStrategy
&
aWritableStrategy
const
QueuingStrategy
&
aReadableStrategy
ErrorResult
&
aRv
)
;
already_AddRefed
<
ReadableStream
>
GetReadable
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
WritableStream
>
GetWritable
(
ErrorResult
&
aRv
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
TransformStreamDefaultController
>
mController
;
}
;
}
#
endif
