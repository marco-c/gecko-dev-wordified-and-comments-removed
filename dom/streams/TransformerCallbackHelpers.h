#
ifndef
DOM_STREAMS_TRANSFORMERCALLBACKHELPERS_H_
#
define
DOM_STREAMS_TRANSFORMERCALLBACKHELPERS_H_
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
TransformerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
:
:
dom
{
class
Promise
;
class
TransformerAlgorithmsBase
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
TransformerAlgorithmsBase
)
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
TransformCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
FlushCallback
(
JSContext
*
aCx
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
=
0
;
protected
:
virtual
~
TransformerAlgorithmsBase
(
)
=
default
;
}
;
class
TransformerAlgorithms
final
:
public
TransformerAlgorithmsBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
TransformerAlgorithms
TransformerAlgorithmsBase
)
TransformerAlgorithms
(
nsIGlobalObject
*
aGlobal
JS
:
:
Handle
<
JSObject
*
>
aTransformer
Transformer
&
aTransformerDict
)
:
mGlobal
(
aGlobal
)
mTransformer
(
aTransformer
)
{
if
(
aTransformerDict
.
mTransform
.
WasPassed
(
)
)
{
mTransformCallback
=
aTransformerDict
.
mTransform
.
Value
(
)
;
}
if
(
aTransformerDict
.
mFlush
.
WasPassed
(
)
)
{
mFlushCallback
=
aTransformerDict
.
mFlush
.
Value
(
)
;
}
mozilla
:
:
HoldJSObjects
(
this
)
;
}
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
TransformCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
FlushCallback
(
JSContext
*
aCx
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
;
protected
:
~
TransformerAlgorithms
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
JS
:
:
Heap
<
JSObject
*
>
mTransformer
;
MOZ_KNOWN_LIVE
RefPtr
<
TransformerTransformCallback
>
mTransformCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
TransformerFlushCallback
>
mFlushCallback
;
}
;
}
#
endif
