#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
BindingCallContext
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultReader
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
Promise
-
inl
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ReadableStream
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
ReadableStream
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mGlobal
mController
mReader
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
tmp
-
>
mStoredError
.
setNull
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
ReadableStream
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mGlobal
mController
mReader
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
ReadableStream
)
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mStoredError
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ReadableStream
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ReadableStream
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ReadableStream
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
ReadableStream
:
:
ReadableStream
(
const
GlobalObject
&
aGlobal
)
:
mGlobal
(
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
ReadableStream
:
:
~
ReadableStream
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
ReadableStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
ReadableStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ReadableStream
:
:
SetReader
(
ReadableStreamDefaultReader
*
aReader
)
{
mReader
=
aReader
;
}
static
double
ExtractHighWaterMark
(
const
QueuingStrategy
&
aStrategy
double
aDefaultHWM
ErrorResult
&
aRv
)
{
if
(
!
aStrategy
.
mHighWaterMark
.
WasPassed
(
)
)
{
return
aDefaultHWM
;
}
double
highWaterMark
=
aStrategy
.
mHighWaterMark
.
Value
(
)
;
if
(
mozilla
:
:
IsNaN
(
highWaterMark
)
|
|
highWaterMark
<
0
)
{
aRv
.
ThrowRangeError
(
"
Invalid
highWaterMark
"
)
;
return
0
.
0
;
}
return
highWaterMark
;
}
already_AddRefed
<
ReadableStream
>
ReadableStream
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aUnderlyingSource
const
QueuingStrategy
&
aStrategy
ErrorResult
&
aRv
)
{
JS
:
:
RootedObject
underlyingSourceObj
(
aGlobal
.
Context
(
)
aUnderlyingSource
.
WasPassed
(
)
?
aUnderlyingSource
.
Value
(
)
:
nullptr
)
;
UnderlyingSource
underlyingSourceDict
;
if
(
underlyingSourceObj
)
{
JS
:
:
RootedValue
objValue
(
aGlobal
.
Context
(
)
JS
:
:
ObjectValue
(
*
underlyingSourceObj
)
)
;
dom
:
:
BindingCallContext
callCx
(
aGlobal
.
Context
(
)
"
ReadableStream
.
constructor
"
)
;
aRv
.
MightThrowJSException
(
)
;
if
(
!
underlyingSourceDict
.
Init
(
callCx
objValue
)
)
{
aRv
.
StealExceptionFromJSContext
(
aGlobal
.
Context
(
)
)
;
return
nullptr
;
}
}
RefPtr
<
ReadableStream
>
readableStream
=
new
ReadableStream
(
aGlobal
)
;
if
(
underlyingSourceDict
.
mType
.
WasPassed
(
)
)
{
MOZ_ASSERT
(
underlyingSourceDict
.
mType
.
Value
(
)
=
=
ReadableStreamType
:
:
Bytes
)
;
if
(
aStrategy
.
mSize
.
WasPassed
(
)
)
{
aRv
.
ThrowRangeError
(
"
Implementation
preserved
member
'
size
'
"
)
;
return
nullptr
;
}
double
highWaterMark
=
ExtractHighWaterMark
(
aStrategy
0
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
(
void
)
highWaterMark
;
MOZ_CRASH
(
"
Byte
Streams
Not
Yet
Implemented
"
)
;
return
readableStream
.
forget
(
)
;
}
RefPtr
<
QueuingStrategySize
>
sizeAlgorithm
=
aStrategy
.
mSize
.
WasPassed
(
)
?
&
aStrategy
.
mSize
.
Value
(
)
:
nullptr
;
double
highWaterMark
=
ExtractHighWaterMark
(
aStrategy
1
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
SetupReadableStreamDefaultControllerFromUnderlyingSource
(
aGlobal
.
Context
(
)
readableStream
underlyingSourceObj
underlyingSourceDict
highWaterMark
sizeAlgorithm
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
readableStream
.
forget
(
)
;
}
bool
ReadableStream
:
:
Locked
(
)
const
{
return
mReader
;
}
void
ReadableStreamClose
(
JSContext
*
aCx
ReadableStream
*
aStream
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aStream
-
>
State
(
)
=
=
ReadableStream
:
:
ReaderState
:
:
Readable
)
;
aStream
-
>
SetState
(
ReadableStream
:
:
ReaderState
:
:
Closed
)
;
ReadableStreamDefaultReader
*
reader
=
aStream
-
>
GetReader
(
)
;
if
(
!
reader
)
{
return
;
}
reader
-
>
ClosedPromise
(
)
-
>
MaybeResolveWithUndefined
(
)
;
for
(
ReadRequest
*
readRequest
:
reader
-
>
ReadRequests
(
)
)
{
readRequest
-
>
CloseSteps
(
aCx
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
reader
-
>
ReadRequests
(
)
.
clear
(
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
ReadableStreamCancel
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
{
aStream
-
>
SetDisturbed
(
true
)
;
if
(
aStream
-
>
State
(
)
=
=
ReadableStream
:
:
ReaderState
:
:
Closed
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
aStream
-
>
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeResolveWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
if
(
aStream
-
>
State
(
)
=
=
ReadableStream
:
:
ReaderState
:
:
Errored
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
aStream
-
>
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
JS
:
:
RootedValue
storedError
(
aCx
aStream
-
>
StoredError
(
)
)
;
promise
-
>
MaybeReject
(
storedError
)
;
return
promise
.
forget
(
)
;
}
ReadableStreamClose
(
aCx
aStream
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
Promise
>
sourceCancelPromise
=
aStream
-
>
Controller
(
)
-
>
CancelSteps
(
aCx
aError
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
sourceCancelPromise
-
>
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
Result
<
RefPtr
<
Promise
>
nsresult
>
returnResult
=
sourceCancelPromise
-
>
ThenWithCycleCollectedArgs
(
[
]
(
JSContext
*
JS
:
:
HandleValue
RefPtr
<
Promise
>
newPromise
)
{
newPromise
-
>
MaybeResolveWithUndefined
(
)
;
return
newPromise
.
forget
(
)
;
}
promise
)
;
if
(
returnResult
.
isErr
(
)
)
{
aRv
.
Throw
(
returnResult
.
unwrapErr
(
)
)
;
return
nullptr
;
}
return
returnResult
.
unwrap
(
)
.
forget
(
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
ReadableStream
:
:
Cancel
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
ErrorResult
&
aRv
)
{
if
(
Locked
(
)
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
GetParentObject
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeRejectWithTypeError
(
"
Canceled
Locked
Stream
"
)
;
return
promise
.
forget
(
)
;
}
RefPtr
<
ReadableStream
>
thisRefPtr
=
this
;
return
ReadableStreamCancel
(
aCx
thisRefPtr
aReason
aRv
)
;
}
already_AddRefed
<
ReadableStreamDefaultReader
>
AcquireReadableStreamDefaultReader
(
JSContext
*
aCx
ReadableStream
*
aStream
ErrorResult
&
aRv
)
{
RefPtr
<
ReadableStreamDefaultReader
>
reader
=
new
ReadableStreamDefaultReader
(
aStream
-
>
GetParentObject
(
)
)
;
SetUpReadableStreamDefaultReader
(
aCx
reader
aStream
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
reader
.
forget
(
)
;
}
already_AddRefed
<
ReadableStreamDefaultReader
>
ReadableStream
:
:
GetReader
(
JSContext
*
aCx
const
ReadableStreamGetReaderOptions
&
aOptions
ErrorResult
&
aRv
)
{
if
(
!
aOptions
.
mMode
.
WasPassed
(
)
)
{
RefPtr
<
ReadableStream
>
thisRefPtr
=
this
;
return
AcquireReadableStreamDefaultReader
(
aCx
thisRefPtr
aRv
)
;
}
MOZ_CRASH
(
"
BYOB
STREAMS
NOT
IMPLEMENTED
"
)
;
return
nullptr
;
}
bool
IsReadableStreamLocked
(
ReadableStream
*
aStream
)
{
return
aStream
-
>
Locked
(
)
;
}
#
ifdef
DEBUG
static
bool
ReadableStreamHasDefaultReader
(
ReadableStream
*
aStream
)
{
ReadableStreamDefaultReader
*
reader
=
aStream
-
>
GetReader
(
)
;
if
(
!
reader
)
{
return
false
;
}
return
true
;
}
#
endif
double
ReadableStreamGetNumReadRequests
(
ReadableStream
*
aStream
)
{
MOZ_ASSERT
(
ReadableStreamHasDefaultReader
(
aStream
)
)
;
return
double
(
aStream
-
>
GetReader
(
)
-
>
ReadRequests
(
)
.
length
(
)
)
;
}
void
ReadableStreamError
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aStream
-
>
State
(
)
=
=
ReadableStream
:
:
ReaderState
:
:
Readable
)
;
aStream
-
>
SetState
(
ReadableStream
:
:
ReaderState
:
:
Errored
)
;
aStream
-
>
SetStoredError
(
aValue
)
;
ReadableStreamDefaultReader
*
reader
=
aStream
-
>
GetReader
(
)
;
if
(
!
reader
)
{
return
;
}
reader
-
>
ClosedPromise
(
)
-
>
MaybeReject
(
aValue
)
;
reader
-
>
ClosedPromise
(
)
-
>
SetSettledPromiseIsHandled
(
)
;
for
(
ReadRequest
*
readRequest
:
reader
-
>
ReadRequests
(
)
)
{
readRequest
-
>
ErrorSteps
(
aCx
aValue
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
reader
-
>
ReadRequests
(
)
.
clear
(
)
;
}
void
ReadableStreamFulfillReadRequest
(
JSContext
*
aCx
ReadableStream
*
aStream
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
bool
aDone
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
ReadableStreamHasDefaultReader
(
aStream
)
)
;
ReadableStreamDefaultReader
*
reader
=
aStream
-
>
GetReader
(
)
;
MOZ_ASSERT
(
!
reader
-
>
ReadRequests
(
)
.
isEmpty
(
)
)
;
RefPtr
<
ReadRequest
>
readRequest
=
reader
-
>
ReadRequests
(
)
.
popFirst
(
)
;
if
(
aDone
)
{
readRequest
-
>
CloseSteps
(
aCx
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
readRequest
-
>
ChunkSteps
(
aCx
aChunk
aRv
)
;
}
void
ReadableStreamAddReadRequest
(
ReadableStream
*
aStream
ReadRequest
*
aReadRequest
)
{
MOZ_ASSERT
(
aStream
-
>
State
(
)
=
=
ReadableStream
:
:
ReaderState
:
:
Readable
)
;
aStream
-
>
GetReader
(
)
-
>
ReadRequests
(
)
.
insertBack
(
aReadRequest
)
;
}
}
}
