#
ifndef
mozilla_dom_UnderlyingSinkCallbackHelpers_h
#
define
mozilla_dom_UnderlyingSinkCallbackHelpers_h
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSinkBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
WritableStreamDefaultController
;
class
UnderlyingSinkAlgorithmsBase
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
UnderlyingSinkAlgorithmsBase
)
MOZ_CAN_RUN_SCRIPT
virtual
void
StartCallback
(
JSContext
*
aCx
WritableStreamDefaultController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
=
0
;
virtual
void
ReleaseObjects
(
)
{
}
protected
:
virtual
~
UnderlyingSinkAlgorithmsBase
(
)
=
default
;
}
;
class
UnderlyingSinkAlgorithms
final
:
public
UnderlyingSinkAlgorithmsBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
UnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
)
UnderlyingSinkAlgorithms
(
nsIGlobalObject
*
aGlobal
JS
:
:
Handle
<
JSObject
*
>
aUnderlyingSink
UnderlyingSink
&
aUnderlyingSinkDict
)
:
mGlobal
(
aGlobal
)
mUnderlyingSink
(
aUnderlyingSink
)
{
if
(
aUnderlyingSinkDict
.
mStart
.
WasPassed
(
)
)
{
mStartCallback
=
aUnderlyingSinkDict
.
mStart
.
Value
(
)
;
}
if
(
aUnderlyingSinkDict
.
mWrite
.
WasPassed
(
)
)
{
mWriteCallback
=
aUnderlyingSinkDict
.
mWrite
.
Value
(
)
;
}
if
(
aUnderlyingSinkDict
.
mClose
.
WasPassed
(
)
)
{
mCloseCallback
=
aUnderlyingSinkDict
.
mClose
.
Value
(
)
;
}
if
(
aUnderlyingSinkDict
.
mAbort
.
WasPassed
(
)
)
{
mAbortCallback
=
aUnderlyingSinkDict
.
mAbort
.
Value
(
)
;
}
mozilla
:
:
HoldJSObjects
(
this
)
;
}
;
MOZ_CAN_RUN_SCRIPT
void
StartCallback
(
JSContext
*
aCx
WritableStreamDefaultController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
protected
:
~
UnderlyingSinkAlgorithms
(
)
override
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSink
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSinkStartCallback
>
mStartCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSinkWriteCallback
>
mWriteCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSinkCloseCallback
>
mCloseCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSinkAbortCallback
>
mAbortCallback
;
}
;
class
UnderlyingSinkAlgorithmsWrapper
:
public
UnderlyingSinkAlgorithmsBase
{
public
:
void
StartCallback
(
JSContext
*
aCx
WritableStreamDefaultController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
final
{
aRetVal
.
setUndefined
(
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
final
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
final
;
virtual
already_AddRefed
<
Promise
>
CloseCallbackImpl
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
return
nullptr
;
}
virtual
already_AddRefed
<
Promise
>
AbortCallbackImpl
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
{
return
nullptr
;
}
}
;
}
#
endif
