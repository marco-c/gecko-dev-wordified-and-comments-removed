#
ifndef
mozilla_dom_UnderlyingSinkCallbackHelpers_h
#
define
mozilla_dom_UnderlyingSinkCallbackHelpers_h
#
include
"
js
/
loader
/
ModuleMapKey
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSinkBinding
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
WritableStreamDefaultController
;
}
namespace
mozilla
:
:
dom
{
class
UnderlyingSinkStartCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSinkStartCallbackHelper
)
UnderlyingSinkStartCallbackHelper
(
UnderlyingSinkStartCallback
*
aCallback
JS
:
:
Handle
<
JSObject
*
>
aUnderlyingSink
)
:
mUnderlyingSink
(
aUnderlyingSink
)
mCallback
(
aCallback
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
void
StartCallback
(
JSContext
*
aCx
WritableStreamDefaultController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
;
protected
:
virtual
~
UnderlyingSinkStartCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
;
private
:
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSink
;
RefPtr
<
UnderlyingSinkStartCallback
>
mCallback
;
}
;
class
UnderlyingSinkWriteCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSinkWriteCallbackHelper
)
explicit
UnderlyingSinkWriteCallbackHelper
(
UnderlyingSinkWriteCallback
*
aCallback
JS
:
:
Handle
<
JSObject
*
>
aUnderlyingSink
)
:
mUnderlyingSink
(
aUnderlyingSink
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
mCallback
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
;
protected
:
virtual
~
UnderlyingSinkWriteCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSink
;
RefPtr
<
UnderlyingSinkWriteCallback
>
mCallback
;
}
;
class
UnderlyingSinkCloseCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSinkCloseCallbackHelper
)
UnderlyingSinkCloseCallbackHelper
(
UnderlyingSinkCloseCallback
*
aCallback
JS
:
:
Handle
<
JSObject
*
>
aUnderlyingSink
)
:
mUnderlyingSink
(
aUnderlyingSink
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
mCallback
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
protected
:
virtual
~
UnderlyingSinkCloseCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSink
;
RefPtr
<
UnderlyingSinkCloseCallback
>
mCallback
;
}
;
class
UnderlyingSinkAbortCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSinkAbortCallbackHelper
)
UnderlyingSinkAbortCallbackHelper
(
UnderlyingSinkAbortCallback
*
aCallback
JS
:
:
Handle
<
JSObject
*
>
aUnderlyingSink
)
:
mUnderlyingSink
(
aUnderlyingSink
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
mCallback
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
;
protected
:
virtual
~
UnderlyingSinkAbortCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSink
;
RefPtr
<
UnderlyingSinkAbortCallback
>
mCallback
;
}
;
}
#
endif
