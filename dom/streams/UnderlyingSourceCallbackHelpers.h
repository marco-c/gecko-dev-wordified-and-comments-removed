#
ifndef
mozilla_dom_UnderlyingSourceCallbackHelpers_h
#
define
mozilla_dom_UnderlyingSourceCallbackHelpers_h
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
ModuleMapKey
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceBinding
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
BodyStreamHolder
;
class
UnderlyingSourceStartCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSourceStartCallbackHelper
)
UnderlyingSourceStartCallbackHelper
(
UnderlyingSourceStartCallback
*
aCallback
JS
:
:
HandleObject
aThisObj
)
:
mThisObj
(
aThisObj
)
mCallback
(
aCallback
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
void
StartCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
;
protected
:
virtual
~
UnderlyingSourceStartCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
;
private
:
JS
:
:
Heap
<
JSObject
*
>
mThisObj
;
RefPtr
<
UnderlyingSourceStartCallback
>
mCallback
;
}
;
class
UnderlyingSourcePullCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSourcePullCallbackHelper
)
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
=
0
;
protected
:
virtual
~
UnderlyingSourcePullCallbackHelper
(
)
=
default
;
}
;
class
IDLUnderlyingSourcePullCallbackHelper
final
:
public
UnderlyingSourcePullCallbackHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
IDLUnderlyingSourcePullCallbackHelper
UnderlyingSourcePullCallbackHelper
)
explicit
IDLUnderlyingSourcePullCallbackHelper
(
UnderlyingSourcePullCallback
*
aCallback
JS
:
:
HandleObject
aThisObj
)
:
mThisObj
(
aThisObj
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
mCallback
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
override
;
protected
:
virtual
~
IDLUnderlyingSourcePullCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
JS
:
:
Heap
<
JSObject
*
>
mThisObj
;
RefPtr
<
UnderlyingSourcePullCallback
>
mCallback
;
}
;
class
BodyStreamUnderlyingSourcePullCallbackHelper
final
:
public
UnderlyingSourcePullCallbackHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BodyStreamUnderlyingSourcePullCallbackHelper
UnderlyingSourcePullCallbackHelper
)
explicit
BodyStreamUnderlyingSourcePullCallbackHelper
(
BodyStreamHolder
*
underlyingSource
)
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
override
;
protected
:
virtual
~
BodyStreamUnderlyingSourcePullCallbackHelper
(
)
=
default
;
private
:
RefPtr
<
BodyStreamHolder
>
mUnderlyingSource
;
}
;
class
UnderlyingSourceCancelCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSourceCancelCallbackHelper
)
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
=
0
;
protected
:
virtual
~
UnderlyingSourceCancelCallbackHelper
(
)
=
default
;
}
;
class
IDLUnderlyingSourceCancelCallbackHelper
final
:
public
UnderlyingSourceCancelCallbackHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
IDLUnderlyingSourceCancelCallbackHelper
UnderlyingSourceCancelCallbackHelper
)
explicit
IDLUnderlyingSourceCancelCallbackHelper
(
UnderlyingSourceCancelCallback
*
aCallback
JS
:
:
HandleObject
aThisObj
)
:
mThisObj
(
aThisObj
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
mCallback
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
protected
:
virtual
~
IDLUnderlyingSourceCancelCallbackHelper
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
private
:
JS
:
:
Heap
<
JSObject
*
>
mThisObj
;
RefPtr
<
UnderlyingSourceCancelCallback
>
mCallback
;
}
;
class
BodyStreamUnderlyingSourceCancelCallbackHelper
final
:
public
UnderlyingSourceCancelCallbackHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BodyStreamUnderlyingSourceCancelCallbackHelper
UnderlyingSourceCancelCallbackHelper
)
explicit
BodyStreamUnderlyingSourceCancelCallbackHelper
(
BodyStreamHolder
*
aUnderlyingSource
)
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
protected
:
virtual
~
BodyStreamUnderlyingSourceCancelCallbackHelper
(
)
=
default
;
private
:
RefPtr
<
BodyStreamHolder
>
mUnderlyingSource
;
}
;
class
UnderlyingSourceErrorCallbackHelper
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
UnderlyingSourceErrorCallbackHelper
)
virtual
void
Call
(
)
=
0
;
protected
:
virtual
~
UnderlyingSourceErrorCallbackHelper
(
)
=
default
;
}
;
class
BodyStreamUnderlyingSourceErrorCallbackHelper
final
:
public
UnderlyingSourceErrorCallbackHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BodyStreamUnderlyingSourceErrorCallbackHelper
UnderlyingSourceErrorCallbackHelper
)
explicit
BodyStreamUnderlyingSourceErrorCallbackHelper
(
BodyStreamHolder
*
aUnderlyingSource
)
;
virtual
void
Call
(
)
override
;
protected
:
virtual
~
BodyStreamUnderlyingSourceErrorCallbackHelper
(
)
=
default
;
private
:
RefPtr
<
BodyStreamHolder
>
mUnderlyingSource
;
}
;
}
#
endif
