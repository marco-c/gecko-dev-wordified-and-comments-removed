#
ifndef
mozilla_dom_UnderlyingSourceCallbackHelpers_h
#
define
mozilla_dom_UnderlyingSourceCallbackHelpers_h
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceBinding
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
:
:
dom
{
class
BodyStreamHolder
;
class
ReadableStreamController
;
class
UnderlyingSourceAlgorithmsBase
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
UnderlyingSourceAlgorithmsBase
)
MOZ_CAN_RUN_SCRIPT
virtual
void
StartCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
=
0
;
virtual
void
ErrorCallback
(
)
=
0
;
protected
:
virtual
~
UnderlyingSourceAlgorithmsBase
(
)
=
default
;
}
;
class
UnderlyingSourceAlgorithms
final
:
public
UnderlyingSourceAlgorithmsBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
UnderlyingSourceAlgorithms
UnderlyingSourceAlgorithmsBase
)
UnderlyingSourceAlgorithms
(
nsIGlobalObject
*
aGlobal
JS
:
:
HandleObject
aUnderlyingSource
UnderlyingSource
&
aUnderlyingSourceDict
)
:
mGlobal
(
aGlobal
)
mUnderlyingSource
(
aUnderlyingSource
)
{
if
(
aUnderlyingSourceDict
.
mStart
.
WasPassed
(
)
)
{
mStartCallback
=
aUnderlyingSourceDict
.
mStart
.
Value
(
)
;
}
if
(
aUnderlyingSourceDict
.
mPull
.
WasPassed
(
)
)
{
mPullCallback
=
aUnderlyingSourceDict
.
mPull
.
Value
(
)
;
}
if
(
aUnderlyingSourceDict
.
mCancel
.
WasPassed
(
)
)
{
mCancelCallback
=
aUnderlyingSourceDict
.
mCancel
.
Value
(
)
;
}
mozilla
:
:
HoldJSObjects
(
this
)
;
}
;
MOZ_CAN_RUN_SCRIPT
void
StartCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
override
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
override
;
void
ErrorCallback
(
)
override
{
}
protected
:
~
UnderlyingSourceAlgorithms
(
)
override
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
JS
:
:
Heap
<
JSObject
*
>
mUnderlyingSource
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSourceStartCallback
>
mStartCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSourcePullCallback
>
mPullCallback
;
MOZ_KNOWN_LIVE
RefPtr
<
UnderlyingSourceCancelCallback
>
mCancelCallback
;
}
;
}
#
endif
