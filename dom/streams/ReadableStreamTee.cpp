#
include
"
mozilla
/
dom
/
ReadableStreamTee
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamDefaultReader
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ReadableStreamDefaultTeePullAlgorithm
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
ReadableStreamDefaultTeePullAlgorithm
UnderlyingSourcePullCallbackHelper
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTeeState
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
ReadableStreamDefaultTeePullAlgorithm
UnderlyingSourcePullCallbackHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTeeState
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_ADDREF_INHERITED
(
ReadableStreamDefaultTeePullAlgorithm
UnderlyingSourcePullCallbackHelper
)
NS_IMPL_RELEASE_INHERITED
(
ReadableStreamDefaultTeePullAlgorithm
UnderlyingSourcePullCallbackHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ReadableStreamDefaultTeePullAlgorithm
)
NS_INTERFACE_MAP_END_INHERITING
(
UnderlyingSourcePullCallbackHelper
)
already_AddRefed
<
Promise
>
ReadableStreamDefaultTeePullAlgorithm
:
:
PullCallback
(
JSContext
*
aCx
ReadableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
if
(
mTeeState
-
>
Reading
(
)
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
aController
.
GetParentObject
(
)
aRv
)
;
}
mTeeState
-
>
SetReading
(
true
)
;
RefPtr
<
ReadRequest
>
readRequest
=
new
ReadableStreamDefaultTeeReadRequest
(
mTeeState
)
;
RefPtr
<
ReadableStreamDefaultReader
>
reader
(
mTeeState
-
>
GetReader
(
)
)
;
ReadableStreamDefaultReaderRead
(
aCx
reader
readRequest
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
Promise
:
:
CreateResolvedWithUndefined
(
aController
.
GetParentObject
(
)
aRv
)
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ReadableStreamDefaultTeeReadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
ReadableStreamDefaultTeeReadRequest
ReadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTeeState
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
ReadableStreamDefaultTeeReadRequest
ReadRequest
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTeeState
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_ADDREF_INHERITED
(
ReadableStreamDefaultTeeReadRequest
ReadRequest
)
NS_IMPL_RELEASE_INHERITED
(
ReadableStreamDefaultTeeReadRequest
ReadRequest
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ReadableStreamDefaultTeeReadRequest
)
NS_INTERFACE_MAP_END_INHERITING
(
ReadRequest
)
void
ReadableStreamDefaultTeeReadRequest
:
:
ChunkSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
{
class
ReadableStreamDefaultTeeReadRequestChunkSteps
:
public
MicroTaskRunnable
{
RefPtr
<
TeeState
>
mTeeState
;
JS
:
:
PersistentRooted
<
JS
:
:
Value
>
mChunk
;
public
:
ReadableStreamDefaultTeeReadRequestChunkSteps
(
JSContext
*
aCx
TeeState
*
aTeeState
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
)
:
mTeeState
(
aTeeState
)
mChunk
(
aCx
aChunk
)
{
}
MOZ_CAN_RUN_SCRIPT
void
Run
(
AutoSlowOperation
&
aAso
)
override
{
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
mTeeState
-
>
GetStream
(
)
-
>
GetParentObject
(
)
)
)
)
{
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
mTeeState
-
>
SetReading
(
false
)
;
JS
:
:
RootedValue
chunk1
(
cx
mChunk
)
;
JS
:
:
RootedValue
chunk2
(
cx
mChunk
)
;
MOZ_RELEASE_ASSERT
(
!
mTeeState
-
>
CloneForBranch2
(
)
)
;
if
(
!
mTeeState
-
>
Canceled1
(
)
)
{
IgnoredErrorResult
rv
;
RefPtr
<
ReadableStreamDefaultController
>
controller
(
mTeeState
-
>
Branch1
(
)
-
>
Controller
(
)
)
;
ReadableStreamDefaultControllerEnqueue
(
cx
controller
chunk1
rv
)
;
(
void
)
NS_WARN_IF
(
rv
.
Failed
(
)
)
;
}
if
(
!
mTeeState
-
>
Canceled2
(
)
)
{
IgnoredErrorResult
rv
;
RefPtr
<
ReadableStreamDefaultController
>
controller
(
mTeeState
-
>
Branch2
(
)
-
>
Controller
(
)
)
;
ReadableStreamDefaultControllerEnqueue
(
cx
controller
chunk2
rv
)
;
(
void
)
NS_WARN_IF
(
rv
.
Failed
(
)
)
;
}
}
bool
Suppressed
(
)
override
{
nsIGlobalObject
*
global
=
mTeeState
-
>
GetStream
(
)
-
>
GetParentObject
(
)
;
return
global
&
&
global
-
>
IsInSyncOperation
(
)
;
}
}
;
RefPtr
<
ReadableStreamDefaultTeeReadRequestChunkSteps
>
task
=
MakeRefPtr
<
ReadableStreamDefaultTeeReadRequestChunkSteps
>
(
aCx
mTeeState
aChunk
)
;
CycleCollectedJSContext
:
:
Get
(
)
-
>
DispatchToMicroTask
(
task
.
forget
(
)
)
;
}
void
ReadableStreamDefaultTeeReadRequest
:
:
CloseSteps
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
mTeeState
-
>
SetReading
(
false
)
;
if
(
!
mTeeState
-
>
Canceled1
(
)
)
{
ReadableStreamDefaultControllerClose
(
aCx
mTeeState
-
>
Branch1
(
)
-
>
Controller
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
if
(
!
mTeeState
-
>
Canceled2
(
)
)
{
ReadableStreamDefaultControllerClose
(
aCx
mTeeState
-
>
Branch2
(
)
-
>
Controller
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
if
(
!
mTeeState
-
>
Canceled1
(
)
|
|
!
mTeeState
-
>
Canceled2
(
)
)
{
mTeeState
-
>
CancelPromise
(
)
-
>
MaybeResolveWithUndefined
(
)
;
}
}
void
ReadableStreamDefaultTeeReadRequest
:
:
ErrorSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
{
mTeeState
-
>
SetReading
(
false
)
;
}
}
