#
include
"
mozilla
/
dom
/
CountQueuingStrategy
.
h
"
#
include
"
mozilla
/
dom
/
FunctionBinding
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CountQueuingStrategy
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CountQueuingStrategy
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CountQueuingStrategy
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CountQueuingStrategy
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
already_AddRefed
<
CountQueuingStrategy
>
CountQueuingStrategy
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
QueuingStrategyInit
&
aInit
)
{
RefPtr
<
CountQueuingStrategy
>
strategy
=
new
CountQueuingStrategy
(
aGlobal
.
GetAsSupports
(
)
aInit
.
mHighWaterMark
)
;
return
strategy
.
forget
(
)
;
}
nsIGlobalObject
*
CountQueuingStrategy
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
CountQueuingStrategy
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CountQueuingStrategy_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
bool
CountQueuingStrategySize
(
JSContext
*
aCx
unsigned
aArgc
JS
:
:
Value
*
aVp
)
{
JS
:
:
CallArgs
args
=
CallArgsFromVp
(
aArgc
aVp
)
;
args
.
rval
(
)
.
setInt32
(
1
)
;
return
true
;
}
already_AddRefed
<
Function
>
CountQueuingStrategy
:
:
GetSize
(
ErrorResult
&
aRv
)
{
if
(
RefPtr
<
Function
>
fun
=
mGlobal
-
>
GetCountQueuingStrategySizeFunction
(
)
)
{
return
fun
.
forget
(
)
;
}
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
mGlobal
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
nullptr
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JSFunction
*
>
sizeFunction
(
cx
JS_NewFunction
(
cx
CountQueuingStrategySize
0
0
"
size
"
)
)
;
if
(
!
sizeFunction
)
{
aRv
.
StealExceptionFromJSContext
(
cx
)
;
return
nullptr
;
}
JS
:
:
Rooted
<
JSObject
*
>
funObj
(
cx
JS_GetFunctionObject
(
sizeFunction
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
cx
mGlobal
-
>
GetGlobalJSObject
(
)
)
;
RefPtr
<
Function
>
function
=
new
Function
(
cx
funObj
global
mGlobal
)
;
mGlobal
-
>
SetCountQueuingStrategySizeFunction
(
function
)
;
return
function
.
forget
(
)
;
}
}
}
