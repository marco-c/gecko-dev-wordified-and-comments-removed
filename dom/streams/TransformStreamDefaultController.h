#
ifndef
DOM_STREAMS_TRANSFORMSTREAMDEFAULTCONTROLLER_H_
#
define
DOM_STREAMS_TRANSFORMSTREAMDEFAULTCONTROLLER_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
QueuingStrategyBinding
.
h
"
#
include
"
mozilla
/
dom
/
TransformerBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
class
TransformStream
;
class
TransformerAlgorithmsBase
;
class
TransformStreamDefaultController
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
TransformStreamDefaultController
)
MOZ_KNOWN_LIVE
TransformStream
*
Stream
(
)
;
void
SetStream
(
TransformStream
&
aStream
)
;
TransformerAlgorithmsBase
*
Algorithms
(
)
;
void
SetAlgorithms
(
TransformerAlgorithmsBase
*
aTransformerAlgorithms
)
;
explicit
TransformStreamDefaultController
(
nsIGlobalObject
*
aGlobal
)
;
protected
:
~
TransformStreamDefaultController
(
)
;
public
:
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
Nullable
<
double
>
GetDesiredSize
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
Enqueue
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Error
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
Terminate
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
TransformStream
>
mStream
;
RefPtr
<
TransformerAlgorithmsBase
>
mTransformerAlgorithms
;
}
;
void
SetUpTransformStreamDefaultControllerFromTransformer
(
JSContext
*
aCx
TransformStream
&
aStream
JS
:
:
Handle
<
JSObject
*
>
aTransformer
Transformer
&
aTransformerDict
)
;
}
#
endif
