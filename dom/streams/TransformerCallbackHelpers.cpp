#
include
"
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TransformStreamDefaultController
.
h
"
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_WITH_JS_MEMBERS
(
TransformerAlgorithms
(
mGlobal
mTransformCallback
mFlushCallback
)
(
mTransformer
)
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
TransformerAlgorithms
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
TransformerAlgorithms
Release
)
already_AddRefed
<
Promise
>
TransformerAlgorithms
:
:
TransformCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
if
(
!
mTransformCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
aController
.
GetParentObject
(
)
aRv
)
;
}
JS
:
:
RootedObject
thisObj
(
aCx
mTransformer
)
;
return
MOZ_KnownLive
(
mTransformCallback
)
-
>
Call
(
thisObj
aChunk
aController
aRv
"
TransformStreamDefaultController
.
[
[
transformAlgorithm
]
]
"
CallbackObject
:
:
eRethrowExceptions
)
;
}
already_AddRefed
<
Promise
>
TransformerAlgorithms
:
:
FlushCallback
(
JSContext
*
aCx
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
if
(
!
mFlushCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
aController
.
GetParentObject
(
)
aRv
)
;
}
JS
:
:
RootedObject
thisObj
(
aCx
mTransformer
)
;
return
MOZ_KnownLive
(
mFlushCallback
)
-
>
Call
(
thisObj
aController
aRv
"
TransformStreamDefaultController
.
[
[
flushAlgorithm
]
]
"
CallbackObject
:
:
eRethrowExceptions
)
;
}
