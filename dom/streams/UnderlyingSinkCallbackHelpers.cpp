#
include
"
mozilla
/
dom
/
UnderlyingSinkCallbackHelpers
.
h
"
#
include
"
StreamUtils
.
h
"
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION
(
UnderlyingSinkAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
UnderlyingSinkAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
UnderlyingSinkAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
UnderlyingSinkAlgorithmsBase
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_INHERITED_WITH_JS_MEMBERS
(
UnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
(
mGlobal
mStartCallback
mWriteCallback
mCloseCallback
mAbortCallback
)
(
mUnderlyingSink
)
)
NS_IMPL_ADDREF_INHERITED
(
UnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
)
NS_IMPL_RELEASE_INHERITED
(
UnderlyingSinkAlgorithms
UnderlyingSinkAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
UnderlyingSinkAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
UnderlyingSinkAlgorithmsBase
)
void
UnderlyingSinkAlgorithms
:
:
StartCallback
(
JSContext
*
aCx
WritableStreamDefaultController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
{
if
(
!
mStartCallback
)
{
aRetVal
.
setUndefined
(
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSink
)
;
return
mStartCallback
-
>
Call
(
thisObj
aController
aRetVal
aRv
"
UnderlyingSink
.
start
"
CallbackFunction
:
:
eRethrowExceptions
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSinkAlgorithms
:
:
WriteCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
WritableStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
if
(
!
mWriteCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
mGlobal
aRv
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSink
)
;
RefPtr
<
Promise
>
promise
=
mWriteCallback
-
>
Call
(
thisObj
aChunk
aController
aRv
"
UnderlyingSink
.
write
"
CallbackFunction
:
:
eRethrowExceptions
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSinkAlgorithms
:
:
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
if
(
!
mCloseCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
mGlobal
aRv
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSink
)
;
RefPtr
<
Promise
>
promise
=
mCloseCallback
-
>
Call
(
thisObj
aRv
"
UnderlyingSink
.
close
"
CallbackFunction
:
:
eRethrowExceptions
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSinkAlgorithms
:
:
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
{
if
(
!
mAbortCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
mGlobal
aRv
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSink
)
;
RefPtr
<
Promise
>
promise
=
mAbortCallback
-
>
Call
(
thisObj
aReason
aRv
"
UnderlyingSink
.
abort
"
CallbackFunction
:
:
eRethrowExceptions
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSinkAlgorithmsWrapper
:
:
CloseCallback
(
JSContext
*
aCx
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
;
return
PromisifyAlgorithm
(
global
[
&
]
(
ErrorResult
&
aRv
)
{
return
CloseCallbackImpl
(
aCx
aRv
)
;
}
aRv
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSinkAlgorithmsWrapper
:
:
AbortCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
xpc
:
:
CurrentNativeGlobal
(
aCx
)
;
return
PromisifyAlgorithm
(
global
[
&
]
(
ErrorResult
&
aRv
)
{
return
AbortCallbackImpl
(
aCx
aReason
aRv
)
;
}
aRv
)
;
}
