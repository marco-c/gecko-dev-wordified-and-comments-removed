#
include
"
mozilla
/
dom
/
ReadableStreamBYOBRequest
.
h
"
#
include
"
js
/
ArrayBuffer
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
mozilla
/
dom
/
ByteStreamHelpers
.
h
"
#
include
"
mozilla
/
dom
/
ReadableByteStreamController
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStream
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamBYOBRequestBinding
.
h
"
#
include
"
mozilla
/
dom
/
ReadableStreamControllerBase
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
streams_abstract
;
ReadableStreamBYOBRequest
:
:
ReadableStreamBYOBRequest
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
ReadableStreamBYOBRequest
:
:
~
ReadableStreamBYOBRequest
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_WITH_JS_MEMBERS
(
ReadableStreamBYOBRequest
(
mGlobal
mController
)
(
mView
)
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ReadableStreamBYOBRequest
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ReadableStreamBYOBRequest
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ReadableStreamBYOBRequest
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
ReadableStreamBYOBRequest
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
ReadableStreamBYOBRequest_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
ReadableStreamBYOBRequest
:
:
GetView
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
)
const
{
aRetVal
.
set
(
mView
)
;
}
void
ReadableStreamBYOBRequest
:
:
Respond
(
JSContext
*
aCx
uint64_t
bytesWritten
ErrorResult
&
aRv
)
{
if
(
!
mController
)
{
aRv
.
ThrowTypeError
(
"
Undefined
Controller
"
)
;
return
;
}
bool
isSharedMemory
;
JS
:
:
Rooted
<
JSObject
*
>
view
(
aCx
mView
)
;
JS
:
:
Rooted
<
JSObject
*
>
arrayBuffer
(
aCx
JS_GetArrayBufferViewBuffer
(
aCx
view
&
isSharedMemory
)
)
;
if
(
!
arrayBuffer
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
if
(
JS
:
:
IsDetachedArrayBufferObject
(
arrayBuffer
)
)
{
aRv
.
ThrowTypeError
(
"
View
of
Detached
buffer
"
)
;
return
;
}
MOZ_ASSERT
(
JS_GetArrayBufferViewByteLength
(
view
)
>
0
)
;
MOZ_ASSERT
(
JS
:
:
GetArrayBufferByteLength
(
arrayBuffer
)
>
0
)
;
RefPtr
<
ReadableByteStreamController
>
controller
(
mController
)
;
ReadableByteStreamControllerRespond
(
aCx
controller
bytesWritten
aRv
)
;
}
void
ReadableStreamBYOBRequest
:
:
RespondWithNewView
(
JSContext
*
aCx
const
ArrayBufferView
&
view
ErrorResult
&
aRv
)
{
if
(
!
mController
)
{
aRv
.
ThrowTypeError
(
"
Undefined
Controller
"
)
;
return
;
}
bool
isSharedMemory
;
JS
:
:
Rooted
<
JSObject
*
>
rootedViewObj
(
aCx
view
.
Obj
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
viewedArrayBuffer
(
aCx
JS_GetArrayBufferViewBuffer
(
aCx
rootedViewObj
&
isSharedMemory
)
)
;
if
(
!
viewedArrayBuffer
)
{
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
;
}
if
(
JS
:
:
IsDetachedArrayBufferObject
(
viewedArrayBuffer
)
)
{
aRv
.
ThrowTypeError
(
"
View
of
Detached
Array
Buffer
"
)
;
return
;
}
RefPtr
<
ReadableByteStreamController
>
controller
(
mController
)
;
ReadableByteStreamControllerRespondWithNewView
(
aCx
controller
rootedViewObj
aRv
)
;
}
void
ReadableStreamBYOBRequest
:
:
SetController
(
ReadableByteStreamController
*
aController
)
{
mController
=
aController
;
}
}
