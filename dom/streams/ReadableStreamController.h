#
ifndef
mozilla_dom_ReadableStreamController_h
#
define
mozilla_dom_ReadableStreamController_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
UnderlyingSourceCallbackHelpers
.
h
"
namespace
mozilla
:
:
dom
{
struct
ReadRequest
;
class
ReadableStreamDefaultController
;
class
ReadableByteStreamController
;
class
ReadableStreamController
:
public
nsISupports
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ReadableStreamController
)
ReadableStreamController
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
}
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
virtual
bool
IsDefault
(
)
=
0
;
virtual
bool
IsByte
(
)
=
0
;
virtual
ReadableStreamDefaultController
*
AsDefault
(
)
=
0
;
virtual
ReadableByteStreamController
*
AsByte
(
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
already_AddRefed
<
Promise
>
CancelSteps
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReason
ErrorResult
&
aRv
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
void
PullSteps
(
JSContext
*
aCx
ReadRequest
*
aReadRequest
ErrorResult
&
aRv
)
=
0
;
virtual
void
ReleaseSteps
(
)
=
0
;
UnderlyingSourceAlgorithmsBase
*
GetAlgorithms
(
)
{
return
mAlgorithms
;
}
void
SetAlgorithms
(
UnderlyingSourceAlgorithmsBase
&
aAlgorithms
)
{
mAlgorithms
=
&
aAlgorithms
;
}
void
ClearAlgorithms
(
)
{
MOZ_ASSERT
(
mAlgorithms
)
;
mAlgorithms
-
>
ReleaseObjects
(
)
;
mAlgorithms
=
nullptr
;
}
protected
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
UnderlyingSourceAlgorithmsBase
>
mAlgorithms
;
virtual
~
ReadableStreamController
(
)
=
default
;
}
;
}
#
endif
