#
include
"
mozilla
/
dom
/
ReadableStreamDefaultController
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
UnderlyingSourceBinding
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION
(
UnderlyingSourceAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
UnderlyingSourceAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
UnderlyingSourceAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
UnderlyingSourceAlgorithmsBase
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
UnderlyingSourceAlgorithmsBase
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_INHERITED_WITH_JS_MEMBERS
(
UnderlyingSourceAlgorithms
UnderlyingSourceAlgorithmsBase
(
mGlobal
mStartCallback
mPullCallback
mCancelCallback
)
(
mUnderlyingSource
)
)
NS_IMPL_ADDREF_INHERITED
(
UnderlyingSourceAlgorithms
UnderlyingSourceAlgorithmsBase
)
NS_IMPL_RELEASE_INHERITED
(
UnderlyingSourceAlgorithms
UnderlyingSourceAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
UnderlyingSourceAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
UnderlyingSourceAlgorithmsBase
)
void
UnderlyingSourceAlgorithms
:
:
StartCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
{
if
(
!
mStartCallback
)
{
aRetVal
.
setUndefined
(
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSource
)
;
ReadableStreamDefaultControllerOrReadableByteStreamController
controller
;
if
(
aController
.
IsDefault
(
)
)
{
controller
.
SetAsReadableStreamDefaultController
(
)
=
aController
.
AsDefault
(
)
;
}
else
{
controller
.
SetAsReadableByteStreamController
(
)
=
aController
.
AsByte
(
)
;
}
return
mStartCallback
-
>
Call
(
thisObj
controller
aRetVal
aRv
"
UnderlyingSource
.
start
"
CallbackFunction
:
:
eRethrowExceptions
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSourceAlgorithms
:
:
PullCallback
(
JSContext
*
aCx
ReadableStreamController
&
aController
ErrorResult
&
aRv
)
{
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSource
)
;
if
(
!
mPullCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
mGlobal
aRv
)
;
}
ReadableStreamDefaultControllerOrReadableByteStreamController
controller
;
if
(
aController
.
IsDefault
(
)
)
{
controller
.
SetAsReadableStreamDefaultController
(
)
=
aController
.
AsDefault
(
)
;
}
else
{
controller
.
SetAsReadableByteStreamController
(
)
=
aController
.
AsByte
(
)
;
}
RefPtr
<
Promise
>
promise
=
mPullCallback
-
>
Call
(
thisObj
controller
aRv
"
UnderlyingSource
.
pull
"
CallbackFunction
:
:
eRethrowExceptions
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
UnderlyingSourceAlgorithms
:
:
CancelCallback
(
JSContext
*
aCx
const
Optional
<
JS
:
:
Handle
<
JS
:
:
Value
>
>
&
aReason
ErrorResult
&
aRv
)
{
if
(
!
mCancelCallback
)
{
return
Promise
:
:
CreateResolvedWithUndefined
(
mGlobal
aRv
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
thisObj
(
aCx
mUnderlyingSource
)
;
RefPtr
<
Promise
>
promise
=
mCancelCallback
-
>
Call
(
thisObj
aReason
aRv
"
UnderlyingSource
.
cancel
"
CallbackFunction
:
:
eRethrowExceptions
)
;
return
promise
.
forget
(
)
;
}
}
