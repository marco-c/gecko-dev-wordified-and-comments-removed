function
init
(
array
)
{
for
(
var
i
=
0
;
i
<
array
.
length
;
i
+
+
)
{
array
[
i
]
=
i
%
256
;
}
}
const
ABLENGTH
=
(
2
*
*
32
+
8
)
/
12
;
function
get_file
(
)
{
const
array
=
new
ArrayBuffer
(
ABLENGTH
)
;
const
buff
=
new
Uint8Array
(
array
)
;
init
(
buff
)
;
const
blob
=
new
Blob
(
[
buff
buff
]
{
}
)
;
return
new
File
(
[
blob
blob
blob
blob
blob
blob
]
{
}
)
;
}
function
verify_chunk
(
chunk
verification_state
)
{
for
(
var
j
=
0
;
j
<
chunk
.
length
;
j
+
+
)
{
if
(
chunk
[
j
]
!
=
verification_state
.
expected
)
{
if
(
verification_state
.
total_index
%
ABLENGTH
!
=
0
|
|
chunk
[
j
]
!
=
0
)
{
throw
new
Error
(
Mismatch
:
chunk
[
{
j
}
]
(
{
chunk
[
j
]
}
)
!
=
{
verification_state
.
expected
}
(
total_index
{
verification_state
.
total_index
}
)
)
;
}
verification_state
.
expected
=
1
;
}
else
{
verification_state
.
expected
=
(
verification_state
.
expected
+
1
)
%
256
;
}
verification_state
.
total_index
+
+
;
}
}
add_task
(
async
(
)
=
>
{
var
chunk_verification_state
=
{
expected
:
0
total_index
:
0
}
;
const
file
=
get_file
(
)
;
await
file
.
stream
(
)
.
pipeTo
(
new
WritableStream
(
{
write
(
chunk
)
{
verify_chunk
(
chunk
chunk_verification_state
)
;
}
}
)
)
;
}
)
;
add_task
(
async
(
)
=
>
{
var
file
=
get_file
(
)
;
var
chunk_verification_state
=
{
expected
:
0
total_index
:
0
}
;
var
streamReader
=
file
.
stream
(
)
.
getReader
(
)
;
while
(
true
)
{
var
res
=
await
streamReader
.
read
(
)
;
if
(
res
.
done
)
{
break
;
}
var
chunk
=
res
.
value
;
verify_chunk
(
chunk
chunk_verification_state
)
;
}
}
)
;
