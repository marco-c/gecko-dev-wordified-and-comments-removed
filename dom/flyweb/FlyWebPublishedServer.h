#
ifndef
mozilla_dom_FlyWebPublishedServer_h
#
define
mozilla_dom_FlyWebPublishedServer_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
nsPIDOMWindowInner
;
class
nsITransportProvider
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
InternalResponse
;
class
InternalRequest
;
class
WebSocket
;
struct
FlyWebPublishOptions
;
class
FlyWebPublishedServer
;
typedef
MozPromise
<
RefPtr
<
FlyWebPublishedServer
>
nsresult
false
>
FlyWebPublishPromise
;
class
FlyWebPublishedServer
:
public
mozilla
:
:
DOMEventTargetHelper
{
public
:
FlyWebPublishedServer
(
nsPIDOMWindowInner
*
aOwner
const
nsAString
&
aName
const
FlyWebPublishOptions
&
aOptions
)
;
virtual
void
LastRelease
(
)
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint64_t
OwnerWindowID
(
)
const
{
return
mOwnerWindowID
;
}
void
GetName
(
nsAString
&
aName
)
{
aName
=
mName
;
}
nsAString
&
Name
(
)
{
return
mName
;
}
void
GetUiUrl
(
nsAString
&
aUiUrl
)
{
aUiUrl
=
mUiUrl
;
}
virtual
void
PermissionGranted
(
bool
aGranted
)
=
0
;
virtual
void
OnFetchResponse
(
InternalRequest
*
aRequest
InternalResponse
*
aResponse
)
=
0
;
already_AddRefed
<
WebSocket
>
OnWebSocketAccept
(
InternalRequest
*
aConnectRequest
const
Optional
<
nsAString
>
&
aProtocol
ErrorResult
&
aRv
)
;
virtual
void
OnWebSocketResponse
(
InternalRequest
*
aConnectRequest
InternalResponse
*
aResponse
)
=
0
;
virtual
already_AddRefed
<
nsITransportProvider
>
OnWebSocketAcceptInternal
(
InternalRequest
*
aConnectRequest
const
Optional
<
nsAString
>
&
aProtocol
ErrorResult
&
aRv
)
=
0
;
virtual
void
Close
(
)
;
void
FireFetchEvent
(
InternalRequest
*
aRequest
)
;
void
FireWebsocketEvent
(
InternalRequest
*
aConnectRequest
)
;
void
PublishedServerStarted
(
nsresult
aStatus
)
;
IMPL_EVENT_HANDLER
(
fetch
)
IMPL_EVENT_HANDLER
(
websocket
)
IMPL_EVENT_HANDLER
(
close
)
already_AddRefed
<
FlyWebPublishPromise
>
GetPublishPromise
(
)
{
return
mPublishPromise
.
Ensure
(
__func__
)
;
}
protected
:
virtual
~
FlyWebPublishedServer
(
)
{
MOZ_ASSERT
(
!
mIsRegistered
"
Subclass
dtor
forgot
to
call
Close
(
)
"
)
;
}
uint64_t
mOwnerWindowID
;
MozPromiseHolder
<
FlyWebPublishPromise
>
mPublishPromise
;
nsString
mName
;
nsString
mUiUrl
;
bool
mIsRegistered
;
}
;
}
}
#
endif
