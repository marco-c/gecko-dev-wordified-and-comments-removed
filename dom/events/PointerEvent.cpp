#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
PointerEvent
.
h
"
#
include
"
mozilla
/
dom
/
PointerEventBinding
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
PointerEvent
:
:
PointerEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetPointerEvent
*
aEvent
)
:
MouseEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
WidgetPointerEvent
(
false
eVoidEvent
nullptr
)
)
{
NS_ASSERTION
(
mEvent
-
>
mClass
=
=
ePointerEventClass
"
event
type
mismatch
ePointerEventClass
"
)
;
WidgetMouseEvent
*
mouseEvent
=
mEvent
-
>
AsMouseEvent
(
)
;
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
mEvent
-
>
mTime
=
PR_Now
(
)
;
mEvent
-
>
mRefPoint
=
LayoutDeviceIntPoint
(
0
0
)
;
mouseEvent
-
>
inputSource
=
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
;
}
mDetail
=
0
;
}
JSObject
*
PointerEvent
:
:
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PointerEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
uint16_t
ConvertStringToPointerType
(
const
nsAString
&
aPointerTypeArg
)
{
if
(
aPointerTypeArg
.
EqualsLiteral
(
"
mouse
"
)
)
{
return
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
;
}
if
(
aPointerTypeArg
.
EqualsLiteral
(
"
pen
"
)
)
{
return
MouseEvent_Binding
:
:
MOZ_SOURCE_PEN
;
}
if
(
aPointerTypeArg
.
EqualsLiteral
(
"
touch
"
)
)
{
return
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
;
}
return
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
;
}
void
ConvertPointerTypeToString
(
uint16_t
aPointerTypeSrc
nsAString
&
aPointerTypeDest
)
{
switch
(
aPointerTypeSrc
)
{
case
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
:
aPointerTypeDest
.
AssignLiteral
(
"
mouse
"
)
;
break
;
case
MouseEvent_Binding
:
:
MOZ_SOURCE_PEN
:
aPointerTypeDest
.
AssignLiteral
(
"
pen
"
)
;
break
;
case
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
:
aPointerTypeDest
.
AssignLiteral
(
"
touch
"
)
;
break
;
default
:
aPointerTypeDest
.
Truncate
(
)
;
break
;
}
}
already_AddRefed
<
PointerEvent
>
PointerEvent
:
:
Constructor
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
PointerEventInit
&
aParam
)
{
RefPtr
<
PointerEvent
>
e
=
new
PointerEvent
(
aOwner
nullptr
nullptr
)
;
bool
trusted
=
e
-
>
Init
(
aOwner
)
;
e
-
>
InitMouseEvent
(
aType
aParam
.
mBubbles
aParam
.
mCancelable
aParam
.
mView
aParam
.
mDetail
aParam
.
mScreenX
aParam
.
mScreenY
aParam
.
mClientX
aParam
.
mClientY
false
false
false
false
aParam
.
mButton
aParam
.
mRelatedTarget
)
;
e
-
>
InitializeExtraMouseEventDictionaryMembers
(
aParam
)
;
WidgetPointerEvent
*
widgetEvent
=
e
-
>
mEvent
-
>
AsPointerEvent
(
)
;
widgetEvent
-
>
pointerId
=
aParam
.
mPointerId
;
widgetEvent
-
>
mWidth
=
aParam
.
mWidth
;
widgetEvent
-
>
mHeight
=
aParam
.
mHeight
;
widgetEvent
-
>
pressure
=
aParam
.
mPressure
;
widgetEvent
-
>
tangentialPressure
=
aParam
.
mTangentialPressure
;
widgetEvent
-
>
tiltX
=
aParam
.
mTiltX
;
widgetEvent
-
>
tiltY
=
aParam
.
mTiltY
;
widgetEvent
-
>
twist
=
aParam
.
mTwist
;
widgetEvent
-
>
inputSource
=
ConvertStringToPointerType
(
aParam
.
mPointerType
)
;
widgetEvent
-
>
mIsPrimary
=
aParam
.
mIsPrimary
;
widgetEvent
-
>
buttons
=
aParam
.
mButtons
;
if
(
!
aParam
.
mCoalescedEvents
.
IsEmpty
(
)
)
{
e
-
>
mCoalescedEvents
.
AppendElements
(
aParam
.
mCoalescedEvents
)
;
}
e
-
>
SetTrusted
(
trusted
)
;
e
-
>
SetComposed
(
aParam
.
mComposed
)
;
return
e
.
forget
(
)
;
}
already_AddRefed
<
PointerEvent
>
PointerEvent
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
PointerEventInit
&
aParam
ErrorResult
&
aRv
)
{
nsCOMPtr
<
EventTarget
>
owner
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
return
Constructor
(
owner
aType
aParam
)
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
PointerEvent
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
PointerEvent
MouseEvent
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mCoalescedEvents
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
PointerEvent
MouseEvent
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mCoalescedEvents
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PointerEvent
)
NS_INTERFACE_MAP_END_INHERITING
(
MouseEvent
)
NS_IMPL_ADDREF_INHERITED
(
PointerEvent
MouseEvent
)
NS_IMPL_RELEASE_INHERITED
(
PointerEvent
MouseEvent
)
void
PointerEvent
:
:
GetPointerType
(
nsAString
&
aPointerType
CallerType
aCallerType
)
{
if
(
ShouldResistFingerprinting
(
aCallerType
)
)
{
aPointerType
.
AssignLiteral
(
"
mouse
"
)
;
return
;
}
ConvertPointerTypeToString
(
mEvent
-
>
AsPointerEvent
(
)
-
>
inputSource
aPointerType
)
;
}
int32_t
PointerEvent
:
:
PointerId
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
PointerEventHandler
:
:
GetSpoofedPointerIdForRFP
(
)
:
mEvent
-
>
AsPointerEvent
(
)
-
>
pointerId
;
}
int32_t
PointerEvent
:
:
Width
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
1
:
mEvent
-
>
AsPointerEvent
(
)
-
>
mWidth
;
}
int32_t
PointerEvent
:
:
Height
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
1
:
mEvent
-
>
AsPointerEvent
(
)
-
>
mHeight
;
}
float
PointerEvent
:
:
Pressure
(
CallerType
aCallerType
)
{
if
(
mEvent
-
>
mMessage
=
=
ePointerUp
|
|
!
ShouldResistFingerprinting
(
aCallerType
)
)
{
return
mEvent
-
>
AsPointerEvent
(
)
-
>
pressure
;
}
float
spoofedPressure
=
0
.
0
;
if
(
mEvent
-
>
AsPointerEvent
(
)
-
>
buttons
)
{
spoofedPressure
=
0
.
5
;
}
return
spoofedPressure
;
}
float
PointerEvent
:
:
TangentialPressure
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
0
:
mEvent
-
>
AsPointerEvent
(
)
-
>
tangentialPressure
;
}
int32_t
PointerEvent
:
:
TiltX
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
0
:
mEvent
-
>
AsPointerEvent
(
)
-
>
tiltX
;
}
int32_t
PointerEvent
:
:
TiltY
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
0
:
mEvent
-
>
AsPointerEvent
(
)
-
>
tiltY
;
}
int32_t
PointerEvent
:
:
Twist
(
CallerType
aCallerType
)
{
return
ShouldResistFingerprinting
(
aCallerType
)
?
0
:
mEvent
-
>
AsPointerEvent
(
)
-
>
twist
;
}
bool
PointerEvent
:
:
IsPrimary
(
)
{
return
mEvent
-
>
AsPointerEvent
(
)
-
>
mIsPrimary
;
}
void
PointerEvent
:
:
GetCoalescedEvents
(
nsTArray
<
RefPtr
<
PointerEvent
>
>
&
aPointerEvents
)
{
WidgetPointerEvent
*
widgetEvent
=
mEvent
-
>
AsPointerEvent
(
)
;
if
(
mCoalescedEvents
.
IsEmpty
(
)
&
&
widgetEvent
&
&
widgetEvent
-
>
mCoalescedWidgetEvents
&
&
!
widgetEvent
-
>
mCoalescedWidgetEvents
-
>
mEvents
.
IsEmpty
(
)
)
{
for
(
WidgetPointerEvent
&
event
:
widgetEvent
-
>
mCoalescedWidgetEvents
-
>
mEvents
)
{
RefPtr
<
PointerEvent
>
domEvent
=
NS_NewDOMPointerEvent
(
nullptr
nullptr
&
event
)
;
domEvent
-
>
mEvent
-
>
AsGUIEvent
(
)
-
>
mWidget
=
widgetEvent
-
>
mWidget
;
domEvent
-
>
mPresContext
=
mPresContext
;
MOZ_ASSERT
(
!
domEvent
-
>
mEvent
-
>
mTarget
)
;
domEvent
-
>
mEvent
-
>
mTarget
=
mEvent
-
>
mTarget
;
domEvent
-
>
DuplicatePrivateData
(
)
;
domEvent
-
>
mPresContext
=
mPresContext
;
mCoalescedEvents
.
AppendElement
(
domEvent
)
;
}
}
if
(
mEvent
-
>
mTarget
)
{
for
(
RefPtr
<
PointerEvent
>
&
pointerEvent
:
mCoalescedEvents
)
{
if
(
!
pointerEvent
-
>
mEvent
-
>
mTarget
)
{
pointerEvent
-
>
mEvent
-
>
mTarget
=
mEvent
-
>
mTarget
;
}
}
}
aPointerEvents
.
AppendElements
(
mCoalescedEvents
)
;
}
bool
PointerEvent
:
:
ShouldResistFingerprinting
(
CallerType
aCallerType
)
{
if
(
!
mEvent
-
>
IsTrusted
(
)
|
|
aCallerType
=
=
CallerType
:
:
System
|
|
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
|
|
mEvent
-
>
AsPointerEvent
(
)
-
>
inputSource
=
=
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
)
{
return
false
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
GetDocument
(
)
;
return
doc
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
doc
)
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
PointerEvent
>
NS_NewDOMPointerEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetPointerEvent
*
aEvent
)
{
RefPtr
<
PointerEvent
>
it
=
new
PointerEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
