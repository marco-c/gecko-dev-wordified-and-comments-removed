#
ifndef
mozilla_dom_EventTarget_h_
#
define
mozilla_dom_EventTarget_h_
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsIDOMEventTarget
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsAtom
.
h
"
class
nsPIDOMWindowOuter
;
class
nsIGlobalObject
;
namespace
mozilla
{
class
AsyncEventDispatcher
;
class
ErrorResult
;
class
EventListenerManager
;
namespace
dom
{
class
AddEventListenerOptionsOrBoolean
;
class
Event
;
class
EventListener
;
class
EventListenerOptionsOrBoolean
;
class
EventHandlerNonNull
;
class
GlobalObject
;
template
<
class
T
>
struct
Nullable
;
#
define
NS_EVENTTARGET_IID
\
{
0xde651c36
0x0053
0x4c67
\
{
0xb1
0x3d
0x67
0xb9
0x40
0xfc
0x82
0xe4
}
}
class
EventTarget
:
public
nsIDOMEventTarget
public
nsWrapperCache
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_EVENTTARGET_IID
)
static
already_AddRefed
<
EventTarget
>
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
using
nsIDOMEventTarget
:
:
AddEventListener
;
using
nsIDOMEventTarget
:
:
DispatchEvent
;
virtual
void
AddEventListener
(
const
nsAString
&
aType
EventListener
*
aCallback
const
AddEventListenerOptionsOrBoolean
&
aOptions
const
Nullable
<
bool
>
&
aWantsUntrusted
ErrorResult
&
aRv
)
=
0
;
void
RemoveEventListener
(
const
nsAString
&
aType
EventListener
*
aCallback
const
EventListenerOptionsOrBoolean
&
aOptions
ErrorResult
&
aRv
)
;
void
RemoveEventListener
(
const
nsAString
&
aType
nsIDOMEventListener
*
aListener
bool
aUseCapture
)
;
bool
DispatchEvent
(
Event
&
aEvent
CallerType
aCallerType
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
GetOwnerGlobal
(
)
;
}
EventHandlerNonNull
*
GetEventHandler
(
const
nsAString
&
aType
)
{
RefPtr
<
nsAtom
>
type
=
NS_Atomize
(
aType
)
;
return
GetEventHandler
(
type
EmptyString
(
)
)
;
}
void
SetEventHandler
(
const
nsAString
&
aType
EventHandlerNonNull
*
aHandler
ErrorResult
&
rv
)
;
virtual
void
EventListenerAdded
(
nsAtom
*
aType
)
{
}
virtual
void
EventListenerAdded
(
const
nsAString
&
aType
)
{
}
virtual
void
EventListenerRemoved
(
nsAtom
*
aType
)
{
}
virtual
void
EventListenerRemoved
(
const
nsAString
&
aType
)
{
}
virtual
nsPIDOMWindowOuter
*
GetOwnerGlobalForBindings
(
)
=
0
;
virtual
nsIGlobalObject
*
GetOwnerGlobal
(
)
const
=
0
;
virtual
EventListenerManager
*
GetOrCreateListenerManager
(
)
=
0
;
virtual
EventListenerManager
*
GetExistingListenerManager
(
)
const
=
0
;
virtual
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
{
}
bool
HasNonSystemGroupListenersForUntrustedKeyEvents
(
)
const
;
bool
HasNonPassiveNonSystemGroupListenersForUntrustedKeyEvents
(
)
const
;
virtual
bool
IsApzAware
(
)
const
;
protected
:
EventHandlerNonNull
*
GetEventHandler
(
nsAtom
*
aType
const
nsAString
&
aTypeString
)
;
void
SetEventHandler
(
nsAtom
*
aType
const
nsAString
&
aTypeString
EventHandlerNonNull
*
aHandler
)
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
EventTarget
NS_EVENTTARGET_IID
)
}
}
#
endif
