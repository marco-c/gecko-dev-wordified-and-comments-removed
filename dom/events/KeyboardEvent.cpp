#
include
"
mozilla
/
dom
/
KeyboardEvent
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
:
:
dom
{
KeyboardEvent
:
:
KeyboardEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetKeyboardEvent
*
aEvent
)
:
UIEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
WidgetKeyboardEvent
(
false
eVoidEvent
nullptr
)
)
mInitializedByJS
(
false
)
mInitializedByCtor
(
false
)
mInitializedWhichValue
(
0
)
{
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
mEvent
-
>
mTime
=
PR_Now
(
)
;
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mKeyNameIndex
=
KEY_NAME_INDEX_USE_STRING
;
}
}
bool
KeyboardEvent
:
:
AltKey
(
CallerType
aCallerType
)
{
bool
altState
=
mEvent
-
>
AsKeyboardEvent
(
)
-
>
IsAlt
(
)
;
if
(
!
ShouldResistFingerprinting
(
aCallerType
)
)
{
return
altState
;
}
return
GetSpoofedModifierStates
(
Modifier
:
:
MODIFIER_ALT
altState
)
;
}
bool
KeyboardEvent
:
:
CtrlKey
(
CallerType
aCallerType
)
{
return
mEvent
-
>
AsKeyboardEvent
(
)
-
>
IsControl
(
)
;
}
bool
KeyboardEvent
:
:
ShiftKey
(
CallerType
aCallerType
)
{
bool
shiftState
=
mEvent
-
>
AsKeyboardEvent
(
)
-
>
IsShift
(
)
;
if
(
!
ShouldResistFingerprinting
(
aCallerType
)
)
{
return
shiftState
;
}
return
GetSpoofedModifierStates
(
Modifier
:
:
MODIFIER_SHIFT
shiftState
)
;
}
bool
KeyboardEvent
:
:
MetaKey
(
)
{
return
mEvent
-
>
AsKeyboardEvent
(
)
-
>
IsMeta
(
)
;
}
bool
KeyboardEvent
:
:
Repeat
(
)
{
return
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mIsRepeat
;
}
bool
KeyboardEvent
:
:
IsComposing
(
)
{
return
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mIsComposing
;
}
void
KeyboardEvent
:
:
GetKey
(
nsAString
&
aKeyName
)
const
{
mEvent
-
>
AsKeyboardEvent
(
)
-
>
GetDOMKeyName
(
aKeyName
)
;
}
void
KeyboardEvent
:
:
GetCode
(
nsAString
&
aCodeName
CallerType
aCallerType
)
{
if
(
!
ShouldResistFingerprinting
(
aCallerType
)
)
{
mEvent
-
>
AsKeyboardEvent
(
)
-
>
GetDOMCodeName
(
aCodeName
)
;
return
;
}
nsCOMPtr
<
Document
>
doc
=
GetDocument
(
)
;
nsRFPService
:
:
GetSpoofedCode
(
doc
mEvent
-
>
AsKeyboardEvent
(
)
aCodeName
)
;
}
void
KeyboardEvent
:
:
GetInitDict
(
KeyboardEventInit
&
aParam
)
{
GetKey
(
aParam
.
mKey
)
;
GetCode
(
aParam
.
mCode
)
;
aParam
.
mLocation
=
Location
(
)
;
aParam
.
mRepeat
=
Repeat
(
)
;
aParam
.
mIsComposing
=
IsComposing
(
)
;
aParam
.
mKeyCode
=
KeyCode
(
)
;
aParam
.
mCharCode
=
CharCode
(
)
;
aParam
.
mWhich
=
Which
(
)
;
aParam
.
mCtrlKey
=
CtrlKey
(
)
;
aParam
.
mShiftKey
=
ShiftKey
(
)
;
aParam
.
mAltKey
=
AltKey
(
)
;
aParam
.
mMetaKey
=
MetaKey
(
)
;
WidgetKeyboardEvent
*
internalEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
aParam
.
mModifierAltGraph
=
internalEvent
-
>
IsAltGraph
(
)
;
aParam
.
mModifierCapsLock
=
internalEvent
-
>
IsCapsLocked
(
)
;
aParam
.
mModifierFn
=
internalEvent
-
>
IsFn
(
)
;
aParam
.
mModifierFnLock
=
internalEvent
-
>
IsFnLocked
(
)
;
aParam
.
mModifierNumLock
=
internalEvent
-
>
IsNumLocked
(
)
;
aParam
.
mModifierOS
=
internalEvent
-
>
IsOS
(
)
;
aParam
.
mModifierScrollLock
=
internalEvent
-
>
IsScrollLocked
(
)
;
aParam
.
mModifierSymbol
=
internalEvent
-
>
IsSymbol
(
)
;
aParam
.
mModifierSymbolLock
=
internalEvent
-
>
IsSymbolLocked
(
)
;
aParam
.
mBubbles
=
internalEvent
-
>
mFlags
.
mBubbles
;
aParam
.
mCancelable
=
internalEvent
-
>
mFlags
.
mCancelable
;
}
bool
KeyboardEvent
:
:
ShouldUseSameValueForCharCodeAndKeyCode
(
const
WidgetKeyboardEvent
&
aWidgetKeyboardEvent
CallerType
aCallerType
)
const
{
if
(
mInitializedByJS
|
|
aWidgetKeyboardEvent
.
mMessage
!
=
eKeyPress
|
|
aWidgetKeyboardEvent
.
mUseLegacyKeyCodeAndCharCodeValues
|
|
aCallerType
=
=
CallerType
:
:
System
|
|
aWidgetKeyboardEvent
.
mFlags
.
mInSystemGroup
)
{
return
false
;
}
MOZ_ASSERT
(
aCallerType
=
=
CallerType
:
:
NonSystem
)
;
return
StaticPrefs
:
:
dom_keyboardevent_keypress_set_keycode_and_charcode_to_same_value
(
)
;
}
uint32_t
KeyboardEvent
:
:
CharCode
(
CallerType
aCallerType
)
{
WidgetKeyboardEvent
*
widgetKeyboardEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
if
(
mInitializedByJS
)
{
if
(
mInitializedByCtor
)
{
return
widgetKeyboardEvent
-
>
mCharCode
;
}
return
widgetKeyboardEvent
-
>
mMessage
=
=
eKeyPress
|
|
widgetKeyboardEvent
-
>
mMessage
=
=
eAccessKeyNotFound
?
widgetKeyboardEvent
-
>
mCharCode
:
0
;
}
if
(
widgetKeyboardEvent
-
>
mKeyNameIndex
!
=
KEY_NAME_INDEX_USE_STRING
&
&
ShouldUseSameValueForCharCodeAndKeyCode
(
*
widgetKeyboardEvent
aCallerType
)
)
{
return
ComputeTraditionalKeyCode
(
*
widgetKeyboardEvent
aCallerType
)
;
}
return
widgetKeyboardEvent
-
>
mCharCode
;
}
uint32_t
KeyboardEvent
:
:
KeyCode
(
CallerType
aCallerType
)
{
WidgetKeyboardEvent
*
widgetKeyboardEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
if
(
mInitializedByJS
)
{
if
(
mInitializedByCtor
)
{
return
widgetKeyboardEvent
-
>
mKeyCode
;
}
return
widgetKeyboardEvent
-
>
HasKeyEventMessage
(
)
?
widgetKeyboardEvent
-
>
mKeyCode
:
0
;
}
if
(
widgetKeyboardEvent
-
>
mKeyNameIndex
=
=
KEY_NAME_INDEX_USE_STRING
&
&
ShouldUseSameValueForCharCodeAndKeyCode
(
*
widgetKeyboardEvent
aCallerType
)
)
{
return
widgetKeyboardEvent
-
>
mCharCode
;
}
return
ComputeTraditionalKeyCode
(
*
widgetKeyboardEvent
aCallerType
)
;
}
uint32_t
KeyboardEvent
:
:
ComputeTraditionalKeyCode
(
WidgetKeyboardEvent
&
aKeyboardEvent
CallerType
aCallerType
)
{
if
(
!
ShouldResistFingerprinting
(
aCallerType
)
)
{
return
aKeyboardEvent
.
mKeyCode
;
}
if
(
(
mEvent
-
>
mMessage
=
=
eKeyPress
|
|
mEvent
-
>
mMessage
=
=
eAccessKeyNotFound
)
&
&
aKeyboardEvent
.
mCharCode
)
{
return
0
;
}
nsCOMPtr
<
Document
>
doc
=
GetDocument
(
)
;
uint32_t
spoofedKeyCode
;
if
(
nsRFPService
:
:
GetSpoofedKeyCode
(
doc
&
aKeyboardEvent
spoofedKeyCode
)
)
{
return
spoofedKeyCode
;
}
return
0
;
}
uint32_t
KeyboardEvent
:
:
Which
(
CallerType
aCallerType
)
{
if
(
mInitializedByCtor
)
{
return
mInitializedWhichValue
;
}
switch
(
mEvent
-
>
mMessage
)
{
case
eKeyDown
:
case
eKeyDownOnPlugin
:
case
eKeyUp
:
case
eKeyUpOnPlugin
:
return
KeyCode
(
aCallerType
)
;
case
eKeyPress
:
{
uint32_t
keyCode
=
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mKeyCode
;
if
(
keyCode
=
=
NS_VK_RETURN
|
|
keyCode
=
=
NS_VK_BACK
)
{
return
keyCode
;
}
return
CharCode
(
)
;
}
default
:
break
;
}
return
0
;
}
uint32_t
KeyboardEvent
:
:
Location
(
)
{
return
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mLocation
;
}
already_AddRefed
<
KeyboardEvent
>
KeyboardEvent
:
:
ConstructorJS
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
KeyboardEventInit
&
aParam
)
{
nsCOMPtr
<
EventTarget
>
target
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
KeyboardEvent
>
newEvent
=
new
KeyboardEvent
(
target
nullptr
nullptr
)
;
newEvent
-
>
InitWithKeyboardEventInit
(
target
aType
aParam
)
;
return
newEvent
.
forget
(
)
;
}
void
KeyboardEvent
:
:
InitWithKeyboardEventInit
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
KeyboardEventInit
&
aParam
)
{
bool
trusted
=
Init
(
aOwner
)
;
InitKeyEventJS
(
aType
aParam
.
mBubbles
aParam
.
mCancelable
aParam
.
mView
false
false
false
false
aParam
.
mKeyCode
aParam
.
mCharCode
)
;
InitModifiers
(
aParam
)
;
SetTrusted
(
trusted
)
;
mDetail
=
aParam
.
mDetail
;
mInitializedByJS
=
true
;
mInitializedByCtor
=
true
;
mInitializedWhichValue
=
aParam
.
mWhich
;
WidgetKeyboardEvent
*
internalEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
internalEvent
-
>
mLocation
=
aParam
.
mLocation
;
internalEvent
-
>
mIsRepeat
=
aParam
.
mRepeat
;
internalEvent
-
>
mIsComposing
=
aParam
.
mIsComposing
;
internalEvent
-
>
mKeyNameIndex
=
WidgetKeyboardEvent
:
:
GetKeyNameIndex
(
aParam
.
mKey
)
;
if
(
internalEvent
-
>
mKeyNameIndex
=
=
KEY_NAME_INDEX_USE_STRING
)
{
internalEvent
-
>
mKeyValue
=
aParam
.
mKey
;
}
internalEvent
-
>
mCodeNameIndex
=
WidgetKeyboardEvent
:
:
GetCodeNameIndex
(
aParam
.
mCode
)
;
if
(
internalEvent
-
>
mCodeNameIndex
=
=
CODE_NAME_INDEX_USE_STRING
)
{
internalEvent
-
>
mCodeValue
=
aParam
.
mCode
;
}
}
void
KeyboardEvent
:
:
InitKeyEventJS
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
uint32_t
aKeyCode
uint32_t
aCharCode
)
{
NS_ENSURE_TRUE_VOID
(
!
mEvent
-
>
mFlags
.
mIsBeingDispatched
)
;
mInitializedByJS
=
true
;
mInitializedByCtor
=
false
;
UIEvent
:
:
InitUIEvent
(
aType
aCanBubble
aCancelable
aView
0
)
;
WidgetKeyboardEvent
*
keyEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
keyEvent
-
>
InitBasicModifiers
(
aCtrlKey
aAltKey
aShiftKey
aMetaKey
)
;
keyEvent
-
>
mKeyCode
=
aKeyCode
;
keyEvent
-
>
mCharCode
=
aCharCode
;
}
void
KeyboardEvent
:
:
InitKeyboardEventJS
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
const
nsAString
&
aKey
uint32_t
aLocation
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
)
{
NS_ENSURE_TRUE_VOID
(
!
mEvent
-
>
mFlags
.
mIsBeingDispatched
)
;
mInitializedByJS
=
true
;
mInitializedByCtor
=
false
;
UIEvent
:
:
InitUIEvent
(
aType
aCanBubble
aCancelable
aView
0
)
;
WidgetKeyboardEvent
*
keyEvent
=
mEvent
-
>
AsKeyboardEvent
(
)
;
keyEvent
-
>
InitBasicModifiers
(
aCtrlKey
aAltKey
aShiftKey
aMetaKey
)
;
keyEvent
-
>
mLocation
=
aLocation
;
keyEvent
-
>
mKeyNameIndex
=
KEY_NAME_INDEX_USE_STRING
;
keyEvent
-
>
mKeyValue
=
aKey
;
}
bool
KeyboardEvent
:
:
ShouldResistFingerprinting
(
CallerType
aCallerType
)
{
if
(
mInitializedByJS
|
|
aCallerType
=
=
CallerType
:
:
System
|
|
mEvent
-
>
mFlags
.
mInSystemGroup
|
|
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
|
|
mEvent
-
>
AsKeyboardEvent
(
)
-
>
mLocation
=
=
KeyboardEvent_Binding
:
:
DOM_KEY_LOCATION_NUMPAD
)
{
return
false
;
}
nsCOMPtr
<
Document
>
doc
=
GetDocument
(
)
;
return
doc
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
doc
)
;
}
bool
KeyboardEvent
:
:
GetSpoofedModifierStates
(
const
Modifiers
aModifierKey
const
bool
aRawModifierState
)
{
bool
spoofedState
;
nsCOMPtr
<
Document
>
doc
=
GetDocument
(
)
;
if
(
nsRFPService
:
:
GetSpoofedModifierStates
(
doc
mEvent
-
>
AsKeyboardEvent
(
)
aModifierKey
spoofedState
)
)
{
return
spoofedState
;
}
return
aRawModifierState
;
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
KeyboardEvent
>
NS_NewDOMKeyboardEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetKeyboardEvent
*
aEvent
)
{
RefPtr
<
KeyboardEvent
>
it
=
new
KeyboardEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
