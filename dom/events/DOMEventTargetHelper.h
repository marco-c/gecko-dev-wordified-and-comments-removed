#
ifndef
mozilla_DOMEventTargetHelper_h_
#
define
mozilla_DOMEventTargetHelper_h_
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Document
;
class
Event
;
}
#
define
NS_DOMEVENTTARGETHELPER_IID
\
{
\
0xa28385c6
0x9451
0x4d7e
{
\
0xa3
0xdd
0xf4
0xb6
0x87
0x2f
0xa4
0x76
\
}
\
}
class
DOMEventTargetHelper
:
public
dom
:
:
EventTarget
public
LinkedListElement
<
DOMEventTargetHelper
>
{
public
:
DOMEventTargetHelper
(
)
:
mParentObject
(
nullptr
)
mOwnerWindow
(
nullptr
)
mHasOrHasHadOwnerWindow
(
false
)
mIsKeptAlive
(
false
)
{
}
explicit
DOMEventTargetHelper
(
nsPIDOMWindowInner
*
aWindow
)
:
mParentObject
(
nullptr
)
mOwnerWindow
(
nullptr
)
mHasOrHasHadOwnerWindow
(
false
)
mIsKeptAlive
(
false
)
{
nsIGlobalObject
*
global
=
aWindow
?
aWindow
-
>
AsGlobal
(
)
:
nullptr
;
BindToOwnerInternal
(
global
)
;
}
explicit
DOMEventTargetHelper
(
nsIGlobalObject
*
aGlobalObject
)
:
mParentObject
(
nullptr
)
mOwnerWindow
(
nullptr
)
mHasOrHasHadOwnerWindow
(
false
)
mIsKeptAlive
(
false
)
{
BindToOwnerInternal
(
aGlobalObject
)
;
}
explicit
DOMEventTargetHelper
(
DOMEventTargetHelper
*
aOther
)
:
mParentObject
(
nullptr
)
mOwnerWindow
(
nullptr
)
mHasOrHasHadOwnerWindow
(
false
)
mIsKeptAlive
(
false
)
{
if
(
!
aOther
)
{
BindToOwnerInternal
(
static_cast
<
nsIGlobalObject
*
>
(
nullptr
)
)
;
return
;
}
BindToOwnerInternal
(
aOther
-
>
GetParentObject
(
)
)
;
mHasOrHasHadOwnerWindow
=
aOther
-
>
HasOrHasHadOwner
(
)
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS
(
DOMEventTargetHelper
)
virtual
EventListenerManager
*
GetExistingListenerManager
(
)
const
override
;
virtual
EventListenerManager
*
GetOrCreateListenerManager
(
)
override
;
bool
ComputeDefaultWantsUntrusted
(
ErrorResult
&
aRv
)
override
;
using
EventTarget
:
:
DispatchEvent
;
bool
DispatchEvent
(
dom
:
:
Event
&
aEvent
dom
:
:
CallerType
aCallerType
ErrorResult
&
aRv
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_DOMEVENTTARGETHELPER_IID
)
void
GetParentObject
(
nsIScriptGlobalObject
*
*
aParentObject
)
{
if
(
mParentObject
)
{
CallQueryInterface
(
mParentObject
aParentObject
)
;
}
else
{
*
aParentObject
=
nullptr
;
}
}
static
DOMEventTargetHelper
*
FromSupports
(
nsISupports
*
aSupports
)
{
dom
:
:
EventTarget
*
target
=
static_cast
<
dom
:
:
EventTarget
*
>
(
aSupports
)
;
#
ifdef
DEBUG
{
nsCOMPtr
<
dom
:
:
EventTarget
>
target_qi
=
do_QueryInterface
(
aSupports
)
;
NS_ASSERTION
(
target_qi
=
=
target
"
Uh
fix
QI
!
"
)
;
}
#
endif
return
static_cast
<
DOMEventTargetHelper
*
>
(
target
)
;
}
bool
HasListenersFor
(
const
nsAString
&
aType
)
const
{
return
mListenerManager
&
&
mListenerManager
-
>
HasListenersFor
(
aType
)
;
}
bool
HasListenersFor
(
nsAtom
*
aTypeWithOn
)
const
{
return
mListenerManager
&
&
mListenerManager
-
>
HasListenersFor
(
aTypeWithOn
)
;
}
virtual
nsPIDOMWindowOuter
*
GetOwnerGlobalForBindingsInternal
(
)
override
{
return
nsPIDOMWindowOuter
:
:
GetFromCurrentInner
(
GetOwner
(
)
)
;
}
nsresult
CheckCurrentGlobalCorrectness
(
)
const
;
nsPIDOMWindowInner
*
GetOwner
(
)
const
{
return
mOwnerWindow
;
}
nsPIDOMWindowInner
*
GetWindowIfCurrent
(
)
const
;
mozilla
:
:
dom
:
:
Document
*
GetDocumentIfCurrent
(
)
const
;
virtual
void
DisconnectFromOwner
(
)
;
using
EventTarget
:
:
GetParentObject
;
nsIGlobalObject
*
GetOwnerGlobal
(
)
const
final
{
return
mParentObject
;
}
bool
HasOrHasHadOwner
(
)
{
return
mHasOrHasHadOwnerWindow
;
}
virtual
void
EventListenerAdded
(
nsAtom
*
aType
)
override
;
virtual
void
EventListenerRemoved
(
nsAtom
*
aType
)
override
;
nsresult
DispatchTrustedEvent
(
const
nsAString
&
aEventName
)
;
protected
:
virtual
~
DOMEventTargetHelper
(
)
;
nsresult
WantsUntrusted
(
bool
*
aRetVal
)
;
void
MaybeUpdateKeepAlive
(
)
;
void
MaybeDontKeepAlive
(
)
;
virtual
bool
IsCertainlyAliveForCC
(
)
const
{
return
mIsKeptAlive
;
}
RefPtr
<
EventListenerManager
>
mListenerManager
;
nsresult
DispatchTrustedEvent
(
dom
:
:
Event
*
aEvent
)
;
virtual
void
LastRelease
(
)
{
}
void
KeepAliveIfHasListenersFor
(
const
nsAString
&
aType
)
;
void
KeepAliveIfHasListenersFor
(
nsAtom
*
aType
)
;
void
IgnoreKeepAliveIfHasListenersFor
(
const
nsAString
&
aType
)
;
void
IgnoreKeepAliveIfHasListenersFor
(
nsAtom
*
aType
)
;
void
BindToOwnerInternal
(
nsIGlobalObject
*
aOwner
)
;
private
:
nsIGlobalObject
*
MOZ_NON_OWNING_REF
mParentObject
;
nsPIDOMWindowInner
*
MOZ_NON_OWNING_REF
mOwnerWindow
;
bool
mHasOrHasHadOwnerWindow
;
struct
{
nsTArray
<
nsString
>
mStrings
;
nsTArray
<
RefPtr
<
nsAtom
>
>
mAtoms
;
}
mKeepingAliveTypes
;
bool
mIsKeptAlive
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
DOMEventTargetHelper
NS_DOMEVENTTARGETHELPER_IID
)
}
#
define
IMPL_EVENT_HANDLER
(
_event
)
\
inline
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
GetOn
#
#
_event
(
)
{
\
return
GetEventHandler
(
nsGkAtoms
:
:
on
#
#
_event
)
;
\
}
\
inline
void
SetOn
#
#
_event
(
mozilla
:
:
dom
:
:
EventHandlerNonNull
*
aCallback
)
{
\
SetEventHandler
(
nsGkAtoms
:
:
on
#
#
_event
aCallback
)
;
\
}
#
endif
