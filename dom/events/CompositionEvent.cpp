#
include
"
mozilla
/
dom
/
CompositionEvent
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
CompositionEvent
:
:
CompositionEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCompositionEvent
*
aEvent
)
:
UIEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
WidgetCompositionEvent
(
false
eVoidEvent
nullptr
)
)
{
NS_ASSERTION
(
mEvent
-
>
mClass
=
=
eCompositionEventClass
"
event
type
mismatch
"
)
;
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
mEvent
-
>
time
=
PR_Now
(
)
;
mEvent
-
>
mFlags
.
mCancelable
=
false
;
}
mData
=
mEvent
-
>
AsCompositionEvent
(
)
-
>
mData
;
}
NS_IMPL_ADDREF_INHERITED
(
CompositionEvent
UIEvent
)
NS_IMPL_RELEASE_INHERITED
(
CompositionEvent
UIEvent
)
NS_INTERFACE_MAP_BEGIN
(
CompositionEvent
)
NS_INTERFACE_MAP_END_INHERITING
(
UIEvent
)
void
CompositionEvent
:
:
GetData
(
nsAString
&
aData
)
const
{
aData
=
mData
;
}
void
CompositionEvent
:
:
GetLocale
(
nsAString
&
aLocale
)
const
{
aLocale
=
mLocale
;
}
void
CompositionEvent
:
:
InitCompositionEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindow
*
aView
const
nsAString
&
aData
const
nsAString
&
aLocale
)
{
UIEvent
:
:
InitUIEvent
(
aType
aCanBubble
aCancelable
aView
0
)
;
mData
=
aData
;
mLocale
=
aLocale
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
CompositionEvent
>
NS_NewDOMCompositionEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCompositionEvent
*
aEvent
)
{
RefPtr
<
CompositionEvent
>
event
=
new
CompositionEvent
(
aOwner
aPresContext
aEvent
)
;
return
event
.
forget
(
)
;
}
