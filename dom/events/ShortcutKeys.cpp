#
include
"
ShortcutKeys
.
h
"
#
include
"
mozilla
/
KeyEventHandler
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
ShortcutKeys
nsIObserver
)
;
StaticRefPtr
<
ShortcutKeys
>
ShortcutKeys
:
:
sInstance
;
ShortcutKeys
:
:
ShortcutKeys
(
)
:
mBrowserHandlers
(
nullptr
)
mEditorHandlers
(
nullptr
)
mInputHandlers
(
nullptr
)
mTextAreaHandlers
(
nullptr
)
{
MOZ_ASSERT
(
!
sInstance
"
Attempt
to
instantiate
a
second
ShortcutKeys
.
"
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
this
)
;
}
ShortcutKeys
:
:
~
ShortcutKeys
(
)
{
delete
mBrowserHandlers
;
delete
mEditorHandlers
;
delete
mInputHandlers
;
delete
mTextAreaHandlers
;
}
nsresult
ShortcutKeys
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
ShortcutKeys
:
:
Shutdown
(
)
;
return
NS_OK
;
}
void
ShortcutKeys
:
:
Shutdown
(
)
{
sInstance
=
nullptr
;
}
KeyEventHandler
*
ShortcutKeys
:
:
GetHandlers
(
HandlerType
aType
)
{
if
(
!
sInstance
)
{
sInstance
=
new
ShortcutKeys
(
)
;
}
return
sInstance
-
>
EnsureHandlers
(
aType
)
;
}
nsAtom
*
ShortcutKeys
:
:
ConvertEventToDOMEventType
(
const
WidgetKeyboardEvent
*
aWidgetKeyboardEvent
)
{
switch
(
aWidgetKeyboardEvent
-
>
mMessage
)
{
case
eKeyDown
:
return
nsGkAtoms
:
:
keydown
;
case
eKeyUp
:
return
nsGkAtoms
:
:
keyup
;
case
eKeyPress
:
case
eAccessKeyNotFound
:
return
nsGkAtoms
:
:
keypress
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
All
event
messages
relating
to
shortcut
keys
should
be
handled
"
)
;
return
nullptr
;
}
}
KeyEventHandler
*
ShortcutKeys
:
:
EnsureHandlers
(
HandlerType
aType
)
{
ShortcutKeyData
*
keyData
;
KeyEventHandler
*
*
cache
;
switch
(
aType
)
{
case
HandlerType
:
:
eBrowser
:
keyData
=
&
sBrowserHandlers
[
0
]
;
cache
=
&
mBrowserHandlers
;
break
;
case
HandlerType
:
:
eEditor
:
keyData
=
&
sEditorHandlers
[
0
]
;
cache
=
&
mEditorHandlers
;
break
;
case
HandlerType
:
:
eInput
:
keyData
=
&
sInputHandlers
[
0
]
;
cache
=
&
mInputHandlers
;
break
;
case
HandlerType
:
:
eTextArea
:
keyData
=
&
sTextAreaHandlers
[
0
]
;
cache
=
&
mTextAreaHandlers
;
break
;
default
:
MOZ_ASSERT
(
false
"
Unknown
handler
type
requested
.
"
)
;
}
if
(
*
cache
)
{
return
*
cache
;
}
KeyEventHandler
*
lastHandler
=
nullptr
;
while
(
keyData
-
>
event
)
{
KeyEventHandler
*
handler
=
new
KeyEventHandler
(
keyData
)
;
if
(
lastHandler
)
{
lastHandler
-
>
SetNextHandler
(
handler
)
;
}
else
{
*
cache
=
handler
;
}
lastHandler
=
handler
;
keyData
+
+
;
}
return
*
cache
;
}
}
