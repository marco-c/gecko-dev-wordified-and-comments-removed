#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
TextEvent
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsPresContext
.
h
"
namespace
mozilla
:
:
dom
{
TextEvent
:
:
TextEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalLegacyTextEvent
*
aEvent
)
:
UIEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
InternalLegacyTextEvent
(
false
eVoidEvent
nullptr
)
)
{
NS_ASSERTION
(
mEvent
-
>
mClass
=
=
eLegacyTextEventClass
"
event
type
mismatch
"
)
;
mEventIsInternal
=
!
aEvent
;
}
void
TextEvent
:
:
InitTextEvent
(
const
nsAString
&
typeArg
bool
canBubbleArg
bool
cancelableArg
nsGlobalWindowInner
*
viewArg
const
nsAString
&
dataArg
)
{
if
(
NS_WARN_IF
(
mEvent
-
>
mFlags
.
mIsBeingDispatched
)
)
{
return
;
}
UIEvent
:
:
InitUIEvent
(
typeArg
canBubbleArg
cancelableArg
viewArg
0
)
;
static_cast
<
InternalLegacyTextEvent
*
>
(
mEvent
)
-
>
mData
=
dataArg
;
}
void
TextEvent
:
:
GetData
(
nsAString
&
aData
)
const
{
aData
=
static_cast
<
InternalLegacyTextEvent
*
>
(
mEvent
)
-
>
mData
;
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
TextEvent
>
NS_NewDOMTextEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalLegacyTextEvent
*
aEvent
)
{
RefPtr
<
TextEvent
>
it
=
new
TextEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
