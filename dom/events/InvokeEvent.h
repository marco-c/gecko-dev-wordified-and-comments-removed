#
ifndef
DOM_INVOKEEVENT_H_
#
define
DOM_INVOKEEVENT_H_
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
InvokeEventBinding
.
h
"
struct
JSContext
;
namespace
mozilla
:
:
dom
{
class
InvokeEvent
:
public
Event
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
InvokeEvent
Event
)
virtual
InvokeEvent
*
AsInvokeEvent
(
)
{
return
this
;
}
explicit
InvokeEvent
(
EventTarget
*
aOwner
)
:
Event
(
aOwner
nullptr
nullptr
)
{
}
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
InvokeEvent
>
Constructor
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
InvokeEventInit
&
aEventInitDict
)
;
static
already_AddRefed
<
InvokeEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
InvokeEventInit
&
aEventInitDict
)
;
Element
*
GetInvoker
(
)
;
void
GetAction
(
nsAString
&
aAction
)
const
{
aAction
=
mAction
;
}
protected
:
~
InvokeEvent
(
)
=
default
;
RefPtr
<
Element
>
mInvoker
;
nsString
mAction
;
}
;
}
#
endif
