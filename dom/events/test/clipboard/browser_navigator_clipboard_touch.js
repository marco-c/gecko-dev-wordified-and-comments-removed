"
use
strict
"
;
const
kBaseUrlForContent
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
kContentFileUrl
=
kBaseUrlForContent
+
"
simple_navigator_clipboard_readText
.
html
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
function
promiseTouchTapContent
(
aBrowser
aContentElementId
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
aContentElementId
]
async
_contentElementId
=
>
{
await
content
.
wrappedJSObject
.
waitUntilApzStable
(
)
;
const
contentElement
=
content
.
document
.
getElementById
(
_contentElementId
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
contentElement
.
addEventListener
(
"
click
"
function
(
e
)
{
resolve
(
{
x
:
e
.
screenX
y
:
e
.
screenY
}
)
;
}
{
once
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeTouchAtCenter
(
contentElement
{
asyncEnabled
:
true
}
content
.
window
)
;
return
promise
;
}
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
events
.
asyncClipboard
.
readText
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_paste_button_position_touch
(
)
{
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
const
coordsOfClickInContentRelativeToScreenInDevicePixels
=
await
promiseTouchTapContent
(
browser
"
invokeReadTextOnceId
"
)
;
info
(
"
coordsOfClickInContentRelativeToScreenInDevicePixels
:
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
x
+
"
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
y
)
;
const
pasteButtonCoordsRelativeToScreenInDevicePixels
=
await
pasteButtonIsShown
;
info
(
"
pasteButtonCoordsRelativeToScreenInDevicePixels
:
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
y
)
;
const
mouseCoordsRelativeToScreenInDevicePixels
=
getMouseCoordsRelativeToScreenInDevicePixels
(
)
;
info
(
"
mouseCoordsRelativeToScreenInDevicePixels
:
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
y
)
;
ok
(
isCloselyLeftOnTopOf
(
mouseCoordsRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
'
Paste
'
button
is
closely
left
on
top
of
the
mouse
pointer
.
"
)
;
ok
(
isCloselyLeftOnTopOf
(
coordsOfClickInContentRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
Coords
of
click
in
content
are
closely
left
on
top
of
the
'
Paste
'
button
.
"
)
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
}
)
;
}
)
;
