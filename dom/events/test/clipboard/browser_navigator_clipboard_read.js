"
use
strict
"
;
const
kBaseUrlForContent
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
kContentFileName
=
"
simple_navigator_clipboard_read
.
html
"
;
const
kContentFileUrl
=
kBaseUrlForContent
+
kContentFileName
;
const
kApzTestNativeEventUtilsUrl
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
;
Services
.
scriptloader
.
loadSubScript
(
kApzTestNativeEventUtilsUrl
this
)
;
function
promiseClickContentToTriggerClipboardRead
(
aBrowser
aMultipleReadTextCalls
)
{
return
promiseClickContentElement
(
aBrowser
aMultipleReadTextCalls
?
"
invokeReadTwiceId
"
:
"
invokeReadOnceId
"
)
;
}
function
promiseMutatedReadResultFromContentElement
(
aBrowser
)
{
return
promiseMutatedTextContentFromContentElement
(
aBrowser
"
readResultId
"
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
events
.
asyncClipboard
.
clipboardItem
"
true
]
[
"
test
.
events
.
async
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_paste_button_position
(
)
{
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
const
coordsOfClickInContentRelativeToScreenInDevicePixels
=
await
promiseClickContentToTriggerClipboardRead
(
browser
false
)
;
AccessibilityUtils
.
resetEnv
(
)
;
info
(
"
coordsOfClickInContentRelativeToScreenInDevicePixels
:
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
x
+
"
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
y
)
;
const
pasteButtonCoordsRelativeToScreenInDevicePixels
=
await
pasteButtonIsShown
;
info
(
"
pasteButtonCoordsRelativeToScreenInDevicePixels
:
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
y
)
;
const
mouseCoordsRelativeToScreenInDevicePixels
=
getMouseCoordsRelativeToScreenInDevicePixels
(
)
;
info
(
"
mouseCoordsRelativeToScreenInDevicePixels
:
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
y
)
;
ok
(
isCloselyLeftOnTopOf
(
mouseCoordsRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
'
Paste
'
button
is
closely
left
on
top
of
the
mouse
pointer
.
"
)
;
ok
(
isCloselyLeftOnTopOf
(
coordsOfClickInContentRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
Coords
of
click
in
content
are
closely
left
on
top
of
the
'
Paste
'
button
.
"
)
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
}
)
;
}
)
;
add_task
(
async
function
test_accepting_paste_button
(
)
{
const
clipboardText
=
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
await
promiseClickContentToTriggerClipboardRead
(
browser
false
)
;
AccessibilityUtils
.
resetEnv
(
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
const
mutatedReadResultFromContentElement
=
promiseMutatedReadResultFromContentElement
(
browser
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
await
mutatedReadResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Resolved
:
"
+
clipboardText
"
Text
returned
from
navigator
.
clipboard
.
read
(
)
is
as
expected
.
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_dismissing_paste_button
(
)
{
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
await
promiseClickContentToTriggerClipboardRead
(
browser
false
)
;
AccessibilityUtils
.
resetEnv
(
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
const
mutatedReadResultFromContentElement
=
promiseMutatedReadResultFromContentElement
(
browser
)
;
await
promiseDismissPasteButton
(
)
;
await
pasteButtonIsHidden
;
await
mutatedReadResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Rejected
:
Clipboard
read
operation
is
not
allowed
.
"
"
navigator
.
clipboard
.
read
(
)
rejected
after
dismissing
the
'
Paste
'
button
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_multiple_read_invocations_for_same_user_activation
(
)
{
const
clipboardText
=
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
await
promiseClickContentToTriggerClipboardRead
(
browser
true
)
;
AccessibilityUtils
.
resetEnv
(
)
;
await
pasteButtonIsShown
;
const
mutatedReadResultFromContentElement
=
promiseMutatedReadResultFromContentElement
(
browser
)
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
mutatedReadResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Resolved
1
:
"
+
clipboardText
+
"
;
Resolved
2
:
"
+
clipboardText
"
Two
calls
of
navigator
.
clipboard
.
read
(
)
both
resolved
with
the
expected
text
.
"
)
;
}
)
;
await
pasteButtonIsHidden
;
}
)
;
}
)
;
add_task
(
async
function
test_new_user_activation_shows_paste_button_again
(
)
{
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
await
promiseWritingRandomTextToClipboard
(
)
;
for
(
let
i
=
0
;
i
<
2
;
+
+
i
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
await
promiseClickContentToTriggerClipboardRead
(
browser
false
)
;
AccessibilityUtils
.
resetEnv
(
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
}
}
)
;
}
)
;
