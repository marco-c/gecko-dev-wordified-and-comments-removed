"
use
strict
"
;
const
kPasteMenuPopupId
=
"
clipboardReadTextPasteMenuPopup
"
;
const
kPasteMenuItemId
=
"
clipboardReadTextPasteMenuItem
"
;
function
promiseWritingRandomTextToClipboard
(
)
{
const
clipboardText
=
"
X
"
+
Math
.
random
(
)
;
return
navigator
.
clipboard
.
writeText
(
clipboardText
)
.
then
(
(
)
=
>
{
return
clipboardText
;
}
)
;
}
function
promiseBrowserReflow
(
)
{
return
new
Promise
(
resolve
=
>
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
resolve
)
)
)
;
}
function
waitForPasteMenuPopupEvent
(
aEventSuffix
)
{
return
BrowserTestUtils
.
waitForEvent
(
document
"
popup
"
+
aEventSuffix
false
e
=
>
{
return
e
.
target
.
getAttribute
(
"
id
"
)
=
=
kPasteMenuPopupId
;
}
)
;
}
function
promisePasteButtonIsShown
(
)
{
return
waitForPasteMenuPopupEvent
(
"
shown
"
)
.
then
(
(
)
=
>
{
ok
(
true
"
Witnessed
'
popupshown
'
event
for
'
Paste
'
button
.
"
)
;
const
pasteButton
=
document
.
getElementById
(
kPasteMenuItemId
)
;
return
promiseBrowserReflow
(
)
.
then
(
(
)
=
>
{
return
coordinatesRelativeToScreen
(
{
target
:
pasteButton
offsetX
:
0
offsetY
:
0
}
)
;
}
)
;
}
)
;
}
function
promisePasteButtonIsHidden
(
)
{
return
waitForPasteMenuPopupEvent
(
"
hidden
"
)
.
then
(
(
)
=
>
{
ok
(
true
"
Witnessed
'
popuphidden
'
event
for
'
Paste
'
button
.
"
)
;
return
promiseBrowserReflow
(
)
;
}
)
;
}
function
promiseClickPasteButton
(
)
{
const
pasteButton
=
document
.
getElementById
(
kPasteMenuItemId
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
pasteButton
"
click
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
pasteButton
{
}
)
;
return
promise
;
}
function
getMouseCoordsRelativeToScreenInDevicePixels
(
)
{
let
mouseXInCSSPixels
=
{
}
;
let
mouseYInCSSPixels
=
{
}
;
window
.
windowUtils
.
getLastOverWindowPointerLocationInCSSPixels
(
mouseXInCSSPixels
mouseYInCSSPixels
)
;
return
{
x
:
(
mouseXInCSSPixels
.
value
+
window
.
mozInnerScreenX
)
*
window
.
devicePixelRatio
y
:
(
mouseYInCSSPixels
.
value
+
window
.
mozInnerScreenY
)
*
window
.
devicePixelRatio
}
;
}
function
isCloselyLeftOnTopOf
(
aCoordsP1
aCoordsP2
aDelta
=
10
)
{
return
(
Math
.
abs
(
aCoordsP2
.
x
-
aCoordsP1
.
x
)
<
aDelta
&
&
Math
.
abs
(
aCoordsP2
.
y
-
aCoordsP1
.
y
)
<
aDelta
)
;
}
function
promiseDismissPasteButton
(
)
{
return
EventUtils
.
promiseNativeMouseEvent
(
{
type
:
"
click
"
target
:
document
.
body
atCenter
:
true
}
)
;
}
function
promiseClickContentElement
(
aBrowser
aContentElementId
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
aContentElementId
]
async
_contentElementId
=
>
{
const
contentElement
=
content
.
document
.
getElementById
(
_contentElementId
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
contentElement
.
addEventListener
(
"
click
"
function
(
e
)
{
resolve
(
{
x
:
e
.
screenX
y
:
e
.
screenY
}
)
;
}
{
once
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
contentElement
{
}
content
.
window
)
;
return
promise
;
}
)
;
}
function
promiseMutatedTextContentFromContentElement
(
aBrowser
aContentElementId
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
aContentElementId
]
async
_contentElementId
=
>
{
const
contentElement
=
content
.
document
.
getElementById
(
_contentElementId
)
;
const
promiseTextContentResult
=
new
Promise
(
resolve
=
>
{
const
mutationObserver
=
new
content
.
MutationObserver
(
(
aMutationRecord
aMutationObserver
)
=
>
{
info
(
"
Observed
mutation
.
"
)
;
aMutationObserver
.
disconnect
(
)
;
resolve
(
contentElement
.
textContent
)
;
}
)
;
mutationObserver
.
observe
(
contentElement
{
childList
:
true
}
)
;
}
)
;
return
await
promiseTextContentResult
;
}
)
;
}
