addEventListener
(
"
load
"
function
(
event
)
{
console
.
log
(
"
OnLoad
external
document
"
)
;
prepareTest
(
)
;
}
false
)
;
function
prepareTest
(
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
SimpleTest
.
requestCompleteLog
(
)
;
turnOnPointerEvents
(
startTest
)
;
}
function
setImplicitPointerCapture
(
capture
callback
)
{
console
.
log
(
"
SET
dom
.
w3c_pointer_events
.
implicit_capture
as
"
+
capture
)
;
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
w3c_pointer_events
.
implicit_capture
"
capture
]
]
}
callback
)
;
}
function
turnOnPointerEvents
(
callback
)
{
console
.
log
(
"
SET
dom
.
w3c_pointer_events
.
enabled
as
TRUE
"
)
;
console
.
log
(
"
SET
layout
.
css
.
touch_action
.
enabled
as
TRUE
"
)
;
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
w3c_pointer_events
.
enabled
"
true
]
[
"
layout
.
css
.
touch_action
.
enabled
"
true
]
]
}
callback
)
;
}
var
MouseEventHelper
=
(
function
(
)
{
var
utils
=
SpecialPowers
.
Ci
.
nsIDOMWindowUtils
;
return
{
BUTTONS_STATE
:
utils
.
MOUSE_BUTTONS_NO_BUTTON
BUTTON_NONE
:
-
1
BUTTON_LEFT
:
utils
.
MOUSE_BUTTON_LEFT_BUTTON
BUTTON_MIDDLE
:
utils
.
MOUSE_BUTTON_MIDDLE_BUTTON
BUTTON_RIGHT
:
utils
.
MOUSE_BUTTON_RIGHT_BUTTON
BUTTONS_NONE
:
utils
.
MOUSE_BUTTONS_NO_BUTTON
BUTTONS_LEFT
:
utils
.
MOUSE_BUTTONS_LEFT_BUTTON
BUTTONS_MIDDLE
:
utils
.
MOUSE_BUTTONS_MIDDLE_BUTTON
BUTTONS_RIGHT
:
utils
.
MOUSE_BUTTONS_RIGHT_BUTTON
BUTTONS_4TH
:
utils
.
MOUSE_BUTTONS_4TH_BUTTON
BUTTONS_5TH
:
utils
.
MOUSE_BUTTONS_5TH_BUTTON
computeButtonsMaskFromButton
:
function
(
aButton
)
{
var
mask
=
[
this
.
BUTTONS_NONE
this
.
BUTTONS_LEFT
this
.
BUTTONS_MIDDLE
this
.
BUTTONS_RIGHT
]
[
aButton
+
1
]
;
ok
(
mask
!
=
=
undefined
"
Unrecognized
button
value
caught
!
"
)
;
return
mask
;
}
checkExitState
:
function
(
)
{
ok
(
!
this
.
BUTTONS_STATE
"
Mismatched
mousedown
/
mouseup
caught
.
"
)
;
}
}
;
}
)
(
)
;
function
sendMouseEvent
(
int_win
elemId
mouseEventType
params
)
{
var
elem
=
int_win
.
document
.
getElementById
(
elemId
)
;
if
(
!
!
elem
)
{
var
rect
=
elem
.
getBoundingClientRect
(
)
;
var
eventObj
=
{
type
:
mouseEventType
}
;
if
(
params
&
&
"
inputSource
"
in
params
)
eventObj
.
inputSource
=
params
.
inputSource
;
var
isButtonEvent
=
mouseEventType
=
=
=
"
mouseup
"
|
|
mouseEventType
=
=
=
"
mousedown
"
;
eventObj
.
button
=
isButtonEvent
?
MouseEventHelper
.
BUTTON_LEFT
:
MouseEventHelper
.
BUTTON_NONE
;
if
(
params
&
&
"
button
"
in
params
)
{
var
hasButtonValue
=
(
params
.
button
!
=
=
MouseEventHelper
.
BUTTON_NONE
)
;
ok
(
!
isButtonEvent
|
|
hasButtonValue
"
Inappropriate
|
button
|
value
caught
.
"
)
;
eventObj
.
button
=
params
.
button
;
}
var
buttonsMask
=
MouseEventHelper
.
computeButtonsMaskFromButton
(
eventObj
.
button
)
;
switch
(
mouseEventType
)
{
case
"
mousedown
"
:
MouseEventHelper
.
BUTTONS_STATE
|
=
buttonsMask
;
break
;
case
"
mouseup
"
:
MouseEventHelper
.
BUTTONS_STATE
&
=
~
buttonsMask
;
break
;
}
eventObj
.
buttons
=
MouseEventHelper
.
BUTTONS_STATE
;
if
(
mouseEventType
=
=
=
"
mousemove
"
)
{
eventObj
.
button
=
MouseEventHelper
.
BUTTON_LEFT
;
}
var
offsetX
=
params
&
&
"
offsetX
"
in
params
?
params
.
offsetX
:
rect
.
width
/
2
;
var
offsetY
=
params
&
&
"
offsetY
"
in
params
?
params
.
offsetY
:
rect
.
height
/
2
;
console
.
log
(
elemId
eventObj
)
;
synthesizeMouse
(
elem
offsetX
offsetY
eventObj
int_win
)
;
}
else
{
is
(
!
!
elem
true
"
Document
should
have
element
with
id
:
"
+
elemId
)
;
}
}
var
TouchEventHelper
=
{
TOUCH_STATE
:
false
checkExitState
:
function
(
)
{
ok
(
!
this
.
TOUCH_STATE
"
Mismatched
touchstart
/
touchend
caught
.
"
)
;
}
}
function
sendTouchEvent
(
int_win
elemId
touchEventType
params
)
{
var
elem
=
int_win
.
document
.
getElementById
(
elemId
)
;
if
(
!
!
elem
)
{
var
rect
=
elem
.
getBoundingClientRect
(
)
;
var
eventObj
=
{
type
:
touchEventType
}
;
switch
(
touchEventType
)
{
case
"
touchstart
"
:
TouchEventHelper
.
TOUCH_STATE
=
true
;
break
;
case
"
touchend
"
:
TouchEventHelper
.
TOUCH_STATE
=
false
;
break
;
}
var
offsetX
=
params
&
&
"
offsetX
"
in
params
?
params
.
offsetX
:
rect
.
width
/
2
;
var
offsetY
=
params
&
&
"
offsetY
"
in
params
?
params
.
offsetY
:
rect
.
height
/
2
;
console
.
log
(
elemId
eventObj
)
;
synthesizeTouch
(
elem
offsetX
offsetY
eventObj
int_win
)
;
}
else
{
is
(
!
!
elem
true
"
Document
should
have
element
with
id
:
"
+
elemId
)
;
}
}
function
runTestInNewWindow
(
aFile
)
{
var
testURL
=
location
.
href
.
substring
(
0
location
.
href
.
lastIndexOf
(
'
/
'
)
+
1
)
+
aFile
;
var
testWindow
=
window
.
open
(
testURL
"
_blank
"
)
;
window
.
addEventListener
(
"
message
"
function
(
aEvent
)
{
switch
(
aEvent
.
data
.
type
)
{
case
"
START
"
:
turnOnPointerEvents
(
(
)
=
>
{
executeTest
(
testWindow
)
;
}
)
;
return
;
case
"
RESULT
"
:
ok
(
aEvent
.
data
.
result
aEvent
.
data
.
message
)
;
return
;
case
"
FIN
"
:
MouseEventHelper
.
checkExitState
(
)
;
TouchEventHelper
.
checkExitState
(
)
;
testWindow
.
close
(
)
;
SimpleTest
.
finish
(
)
;
return
;
}
}
)
;
}
