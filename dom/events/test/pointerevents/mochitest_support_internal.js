const
PARENT_ORIGIN
=
"
http
:
/
/
mochi
.
test
:
8888
/
"
;
const
POINTER_MOUSE_ID
=
7
;
const
POINTER_PEN_ID
=
8
;
const
POINTER_TOUCH_ID
=
9
;
addListeners
(
document
.
getElementById
(
"
target0
"
)
)
;
addListeners
(
document
.
getElementById
(
"
target1
"
)
)
;
function
resultCallback
(
aTestObj
)
{
var
message
=
aTestObj
[
"
name
"
]
+
"
(
"
;
message
+
=
"
Get
:
"
+
JSON
.
stringify
(
aTestObj
[
"
status
"
]
)
+
"
"
;
message
+
=
"
Expect
:
"
+
JSON
.
stringify
(
aTestObj
[
"
PASS
"
]
)
+
"
)
"
;
window
.
opener
.
postMessage
(
{
type
:
"
RESULT
"
message
:
message
result
:
aTestObj
[
"
status
"
]
=
=
=
aTestObj
[
"
PASS
"
]
}
PARENT_ORIGIN
)
;
}
add_result_callback
(
resultCallback
)
;
add_completion_callback
(
(
)
=
>
{
window
.
opener
.
postMessage
(
{
type
:
"
FIN
"
}
PARENT_ORIGIN
)
;
}
)
;
window
.
addEventListener
(
"
load
"
(
)
=
>
{
var
startMessage
=
{
type
:
"
START
"
message
:
{
mouseId
:
POINTER_MOUSE_ID
penId
:
POINTER_PEN_ID
touchId
:
POINTER_TOUCH_ID
}
}
window
.
opener
.
postMessage
(
startMessage
PARENT_ORIGIN
)
;
}
)
;
function
addListeners
(
elem
)
{
if
(
!
elem
)
return
;
var
All_Events
=
[
"
pointerdown
"
"
pointerup
"
"
pointercancel
"
"
pointermove
"
"
pointerover
"
"
pointerout
"
"
pointerenter
"
"
pointerleave
"
"
gotpointercapture
"
"
lostpointercapture
"
]
;
All_Events
.
forEach
(
function
(
name
)
{
elem
.
addEventListener
(
name
function
(
event
)
{
console
.
log
(
'
(
'
+
event
.
type
+
'
)
-
(
'
+
event
.
pointerType
+
'
)
'
)
;
if
(
!
event
.
isTrusted
)
{
return
;
}
var
pointerId
=
{
mouse
:
POINTER_MOUSE_ID
pen
:
POINTER_PEN_ID
touch
:
POINTER_TOUCH_ID
}
[
event
.
pointerType
]
;
resultCallback
(
{
name
:
"
Mismatched
event
.
pointerId
recieved
.
"
status
:
event
.
pointerId
PASS
:
pointerId
}
)
;
}
false
)
;
}
)
;
}
