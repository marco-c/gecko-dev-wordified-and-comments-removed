"
use
strict
"
async
function
checkForEventListenerLeaks
(
name
target
)
{
await
_eventListenerLeakStep
(
target
{
name
}
default
)
;
await
_eventListenerLeakStep
(
target
{
name
}
bfcache
frame
=
>
{
frame
.
src
=
"
about
:
blank
"
;
return
new
Promise
(
resolve
=
>
frame
.
onload
=
resolve
)
;
}
)
;
await
_eventListenerLeakStep
(
target
{
name
}
document
.
open
(
)
frame
=
>
{
frame
.
contentDocument
.
open
(
)
;
frame
.
contentDocument
.
close
(
)
;
}
)
;
}
async
function
_withFrame
(
doc
url
)
{
let
frame
=
doc
.
createElement
(
'
iframe
'
)
;
frame
.
src
=
url
;
doc
.
body
.
appendChild
(
frame
)
;
await
new
Promise
(
resolve
=
>
frame
.
onload
=
resolve
)
;
return
frame
;
}
async
function
_eventListenerLeakStep
(
target
name
extra
)
{
let
frame
=
await
_withFrame
(
document
"
empty
.
html
"
)
;
await
target
(
frame
.
contentWindow
)
;
let
weakRef
=
SpecialPowers
.
Cu
.
getWeakReference
(
frame
.
contentWindow
)
;
ok
(
weakRef
.
get
(
)
should
be
able
to
create
a
weak
reference
-
{
name
}
)
;
if
(
extra
)
{
await
extra
(
frame
)
;
}
frame
.
remove
(
)
;
frame
=
null
;
await
new
Promise
(
resolve
=
>
SpecialPowers
.
exactGC
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
SpecialPowers
.
exactGC
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
SpecialPowers
.
exactGC
(
resolve
)
)
;
ok
(
!
weakRef
.
get
(
)
iframe
content
window
should
be
garbage
collected
-
{
name
}
)
;
}
