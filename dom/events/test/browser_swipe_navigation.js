"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
gesture
.
swipe
.
left
"
"
Browser
:
BackOrBackDuplicate
"
]
[
"
browser
.
gesture
.
swipe
.
right
"
"
Browser
:
ForwardOrForwardDuplicate
"
]
[
"
widget
.
disable
-
swipe
-
tracker
"
false
]
[
"
widget
.
swipe
.
velocity
-
twitch
-
tolerance
"
0
.
0000001
]
[
"
widget
.
swipe
.
success
-
velocity
-
contribution
"
999999
.
0
]
[
"
widget
.
swipe
.
pixel
-
size
"
1
.
0
]
[
"
dom
.
event
.
wheel
-
event
-
groups
.
enabled
"
true
]
[
"
mousewheel
.
transaction
.
timeout
"
10000
]
]
}
)
;
const
firstPage
=
"
about
:
about
"
;
const
secondPage
=
"
data
:
text
/
html
<
html
style
=
'
height
:
500vh
'
>
<
/
html
>
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
firstPage
true
)
;
BrowserTestUtils
.
startLoadingURIString
(
tab
.
linkedBrowser
secondPage
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
secondPage
)
;
ok
(
gBrowser
.
webNavigation
.
canGoBack
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
content
.
window
.
addEventListener
(
"
wheel
"
(
)
=
>
{
}
{
passive
:
false
}
)
;
}
)
;
const
scrollendPromise
=
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
content
.
window
.
addEventListener
(
"
scrollend
"
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
resolve
(
)
)
;
}
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
tab
.
linkedBrowser
100
100
0
NativePanHandler
.
delta
NativePanHandler
.
beginPhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
tab
.
linkedBrowser
100
100
0
0
NativePanHandler
.
endPhase
)
;
await
scrollendPromise
;
const
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
firstPage
)
;
await
panLeftToRight
(
tab
.
linkedBrowser
100
100
1
)
;
await
loadPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
