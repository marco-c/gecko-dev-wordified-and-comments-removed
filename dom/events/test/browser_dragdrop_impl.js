"
use
strict
"
;
const
{
MockRegistrar
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
sys
.
mjs
"
)
;
let
tab1Cxt
;
let
tab2Cxt
;
let
dragServiceCid
;
let
dragController
;
async
function
runDnd
(
testName
sourceBrowsingCxt
targetBrowsingCxt
dndOptions
=
{
}
)
{
return
EventUtils
.
synthesizeMockDragAndDrop
(
{
dragController
srcElement
:
"
dropSource
"
targetElement
:
"
dropTarget
"
sourceBrowsingCxt
targetBrowsingCxt
id
:
SpecialPowers
.
Ci
.
nsIDOMWindowUtils
.
DEFAULT_MOUSE_POINTER_ID
contextLabel
:
testName
info
record
dragAction
:
Ci
.
nsIDragService
.
DRAGDROP_ACTION_MOVE
.
.
.
dndOptions
}
)
;
}
async
function
openWindow
(
tabIdx
configParams
)
{
let
win
=
tabIdx
=
=
0
?
window
:
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
const
OUTER_URL_ARRAY
=
[
configParams
.
outerURL1
configParams
.
outerURL2
]
;
let
url
=
OUTER_URL_ARRAY
[
tabIdx
]
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
win
.
gBrowser
url
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
if
(
tabIdx
!
=
0
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
const
INNER_URL_ARRAY
=
[
configParams
.
innerURL1
configParams
.
innerURL2
]
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
.
browsingContext
[
tabIdx
INNER_URL_ARRAY
[
tabIdx
]
]
async
(
tabIdx
iframeUrl
)
=
>
{
let
iframe
=
content
.
document
.
getElementById
(
"
iframe
"
)
;
if
(
!
iframe
&
&
content
.
document
.
body
.
shadowRoot
)
{
iframe
=
content
.
document
.
body
.
shadowRoot
.
getElementById
(
"
iframe
"
)
;
}
ok
(
iframe
Found
iframe
in
window
{
tabIdx
}
)
;
let
loadedPromise
=
new
Promise
(
res
=
>
{
iframe
.
addEventListener
(
"
load
"
res
{
once
:
true
}
)
;
}
)
;
iframe
.
src
=
iframeUrl
;
await
loadedPromise
;
const
ds
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIDragService
)
;
ds
.
neverAllowSessionIsSynthesizedForTests
=
true
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
.
browsingContext
.
children
[
0
]
[
]
(
)
=
>
{
const
ds
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIDragService
)
;
ds
.
neverAllowSessionIsSynthesizedForTests
=
true
;
}
)
;
return
tab
.
linkedBrowser
.
browsingContext
;
}
async
function
setup
(
configParams
)
{
const
oldDragService
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIDragService
)
;
dragController
=
oldDragService
.
getMockDragController
(
)
;
dragServiceCid
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
dragController
.
mockDragService
)
;
ok
(
dragServiceCid
"
MockDragService
was
registered
"
)
;
if
(
!
dragServiceCid
)
{
SimpleTest
.
finish
(
)
;
}
registerCleanupFunction
(
async
function
(
)
{
MockRegistrar
.
unregister
(
dragServiceCid
)
;
}
)
;
dragController
.
mockDragService
.
neverAllowSessionIsSynthesizedForTests
=
true
;
tab1Cxt
=
await
openWindow
(
0
configParams
)
;
tab2Cxt
=
await
openWindow
(
1
configParams
)
;
}
var
runTest
=
runDnd
;
add_task
(
async
function
test_dnd_tab1_to_tab1
(
)
{
await
runTest
(
"
tab1
-
>
tab1
"
tab1Cxt
tab1Cxt
)
;
}
)
;
add_task
(
async
function
test_dnd_tab1_to_iframe1
(
)
{
await
runTest
(
"
tab1
-
>
iframe1
"
tab1Cxt
tab1Cxt
.
children
[
0
]
)
;
}
)
;
add_task
(
async
function
test_dnd_tab1_to_tab2
(
)
{
await
runTest
(
"
tab1
-
>
tab2
"
tab1Cxt
tab2Cxt
)
;
}
)
;
add_task
(
async
function
test_dnd_tab1_to_iframe2
(
)
{
await
runTest
(
"
tab1
-
>
iframe2
"
tab1Cxt
tab2Cxt
.
children
[
0
]
)
;
}
)
;
add_task
(
async
function
test_dnd_iframe1_to_tab1
(
)
{
await
runTest
(
"
iframe1
-
>
tab1
"
tab1Cxt
.
children
[
0
]
tab1Cxt
)
;
}
)
;
add_task
(
async
function
test_dnd_iframe1_to_iframe1
(
)
{
await
runTest
(
"
iframe1
-
>
iframe1
"
tab1Cxt
.
children
[
0
]
tab1Cxt
.
children
[
0
]
)
;
}
)
;
add_task
(
async
function
test_dnd_iframe1_to_tab2
(
)
{
await
runTest
(
"
iframe1
-
>
tab2
"
tab1Cxt
.
children
[
0
]
tab2Cxt
)
;
}
)
;
add_task
(
async
function
test_dnd_iframe1_to_iframe2
(
)
{
await
runTest
(
"
iframe1
-
>
iframe2
"
tab1Cxt
.
children
[
0
]
tab2Cxt
.
children
[
0
]
)
;
}
)
;
