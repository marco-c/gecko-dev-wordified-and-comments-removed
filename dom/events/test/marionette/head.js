const
{
Cc
:
Cc
Ci
:
Ci
Cr
:
Cr
Cu
:
Cu
}
=
SpecialPowers
;
var
Promise
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
.
Promise
;
var
_pendingEmulatorCmdCount
=
0
;
function
runEmulatorCmdSafe
(
aCommand
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
+
+
_pendingEmulatorCmdCount
;
runEmulatorCmd
(
aCommand
function
(
aResult
)
{
-
-
_pendingEmulatorCmdCount
;
ok
(
true
"
Emulator
response
:
"
+
JSON
.
stringify
(
aResult
)
)
;
if
(
Array
.
isArray
(
aResult
)
&
&
aResult
[
aResult
.
length
-
1
]
=
=
=
"
OK
"
)
{
resolve
(
aResult
)
;
}
else
{
reject
(
aResult
)
;
}
}
)
;
}
)
;
}
function
getEmulatorSensorValues
(
aSensorName
)
{
return
runEmulatorCmdSafe
(
"
sensor
get
"
+
aSensorName
)
.
then
(
function
(
aResult
)
{
return
aResult
[
0
]
.
split
(
"
"
)
[
2
]
.
split
(
"
:
"
)
.
map
(
function
(
aElement
)
{
return
parseInt
(
aElement
10
)
;
}
)
;
}
)
;
}
function
getEmulatorOrientationValues
(
)
{
return
getEmulatorSensorValues
(
"
orientation
"
)
;
}
function
setEmulatorOrientationValues
(
aAzimuth
aPitch
aRoll
)
{
let
cmd
=
"
sensor
set
orientation
"
+
aAzimuth
+
"
:
"
+
aPitch
+
"
:
"
+
aRoll
;
return
runEmulatorCmdSafe
(
cmd
)
;
}
function
waitForWindowEvent
(
aEventName
)
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
aEventName
function
(
aEvent
)
{
ok
(
true
"
Window
event
'
"
+
aEventName
+
"
'
got
.
"
)
;
resolve
(
aEvent
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
cleanUp
(
)
{
ok
(
true
"
:
:
CLEANING
UP
:
:
"
)
;
waitFor
(
finish
function
(
)
{
return
_pendingEmulatorCmdCount
=
=
=
0
;
}
)
;
}
function
startTestBase
(
aTestCaseMain
)
{
Promise
.
resolve
(
)
.
then
(
aTestCaseMain
)
.
then
(
cleanUp
function
(
)
{
ok
(
false
'
promise
rejects
during
test
.
'
)
;
cleanUp
(
)
;
}
)
;
}
