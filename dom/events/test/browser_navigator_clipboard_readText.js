"
use
strict
"
;
const
kBaseUrlForContent
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
kContentFileName
=
"
simple_navigator_clipboard_readText
.
html
"
;
const
kContentFileUrl
=
kBaseUrlForContent
+
kContentFileName
;
const
kApzTestNativeEventUtilsUrl
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
;
Services
.
scriptloader
.
loadSubScript
(
kApzTestNativeEventUtilsUrl
this
)
;
const
chromeDoc
=
window
.
document
;
const
kPasteMenuPopupId
=
"
clipboardReadTextPasteMenuPopup
"
;
const
kPasteMenuItemId
=
"
clipboardReadTextPasteMenuItem
"
;
function
promiseBrowserReflow
(
)
{
return
new
Promise
(
resolve
=
>
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
resolve
)
)
)
;
}
function
promiseClickPasteButton
(
)
{
const
pasteButton
=
chromeDoc
.
getElementById
(
kPasteMenuItemId
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
pasteButton
"
click
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
pasteButton
{
}
)
;
return
promise
;
}
function
getMouseCoordsRelativeToScreenInDevicePixels
(
)
{
let
mouseXInCSSPixels
=
{
}
;
let
mouseYInCSSPixels
=
{
}
;
window
.
windowUtils
.
getLastOverWindowPointerLocationInCSSPixels
(
mouseXInCSSPixels
mouseYInCSSPixels
)
;
return
{
x
:
(
mouseXInCSSPixels
.
value
+
window
.
mozInnerScreenX
)
*
window
.
devicePixelRatio
y
:
(
mouseYInCSSPixels
.
value
+
window
.
mozInnerScreenY
)
*
window
.
devicePixelRatio
}
;
}
function
isCloselyLeftOnTopOf
(
aCoordsP1
aCoordsP2
aDelta
)
{
const
kDelta
=
10
;
return
(
aCoordsP2
.
x
-
aCoordsP1
.
x
<
kDelta
&
&
aCoordsP2
.
y
-
aCoordsP1
.
y
<
kDelta
)
;
}
function
waitForPasteMenuPopupEvent
(
aEventSuffix
)
{
return
BrowserTestUtils
.
waitForEvent
(
chromeDoc
"
popup
"
+
aEventSuffix
false
e
=
>
{
return
e
.
target
.
getAttribute
(
"
id
"
)
=
=
kPasteMenuPopupId
;
}
)
;
}
function
promisePasteButtonIsShown
(
)
{
return
waitForPasteMenuPopupEvent
(
"
shown
"
)
.
then
(
(
)
=
>
{
ok
(
true
"
Witnessed
'
popupshown
'
event
for
'
Paste
'
button
.
"
)
;
const
pasteButton
=
chromeDoc
.
getElementById
(
kPasteMenuItemId
)
;
return
promiseBrowserReflow
(
)
.
then
(
(
)
=
>
{
return
coordinatesRelativeToScreen
(
{
target
:
pasteButton
offsetX
:
0
offsetY
:
0
}
)
;
}
)
;
}
)
;
}
function
promisePasteButtonIsHidden
(
)
{
return
waitForPasteMenuPopupEvent
(
"
hidden
"
)
.
then
(
(
)
=
>
{
ok
(
true
"
Witnessed
'
popuphidden
'
event
for
'
Paste
'
button
.
"
)
;
return
promiseBrowserReflow
(
)
;
}
)
;
}
function
promiseClickContentToTriggerClipboardReadText
(
aBrowser
aMultipleReadTextCalls
)
{
const
contentButtonId
=
aMultipleReadTextCalls
?
"
invokeReadTextTwiceId
"
:
"
invokeReadTextOnceId
"
;
return
SpecialPowers
.
spawn
(
aBrowser
[
contentButtonId
]
async
_contentButtonId
=
>
{
const
contentButton
=
content
.
document
.
getElementById
(
_contentButtonId
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
contentButton
.
addEventListener
(
"
click
"
function
(
e
)
{
resolve
(
{
x
:
e
.
screenX
y
:
e
.
screenY
}
)
;
}
{
once
:
true
}
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
contentButton
{
}
content
.
window
)
;
return
promise
;
}
)
;
}
function
promiseMutatedReadTextResultFromContentElement
(
aBrowser
)
{
return
SpecialPowers
.
spawn
(
aBrowser
[
]
async
(
)
=
>
{
const
readTextResultElement
=
content
.
document
.
getElementById
(
"
readTextResultId
"
)
;
const
promiseReadTextResult
=
new
Promise
(
resolve
=
>
{
const
mutationObserver
=
new
content
.
MutationObserver
(
(
aMutationRecord
aMutationObserver
)
=
>
{
info
(
"
Observed
mutation
.
"
)
;
aMutationObserver
.
disconnect
(
)
;
resolve
(
readTextResultElement
.
textContent
)
;
}
)
;
mutationObserver
.
observe
(
readTextResultElement
{
childList
:
true
}
)
;
}
)
;
return
await
promiseReadTextResult
;
}
)
;
}
function
promiseWritingRandomTextToClipboard
(
)
{
const
clipboardText
=
"
X
"
+
Math
.
random
(
)
;
return
navigator
.
clipboard
.
writeText
(
clipboardText
)
.
then
(
(
)
=
>
{
return
clipboardText
;
}
)
;
}
function
promiseDismissPasteButton
(
)
{
return
EventUtils
.
promiseNativeMouseEvent
(
{
type
:
"
click
"
target
:
chromeDoc
.
body
atCenter
:
true
}
)
;
}
add_task
(
async
function
init
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
events
.
asyncClipboard
.
readText
"
true
]
[
"
test
.
events
.
async
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_paste_button_position
(
)
{
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
const
coordsOfClickInContentRelativeToScreenInDevicePixels
=
await
promiseClickContentToTriggerClipboardReadText
(
browser
false
)
;
info
(
"
coordsOfClickInContentRelativeToScreenInDevicePixels
:
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
x
+
"
"
+
coordsOfClickInContentRelativeToScreenInDevicePixels
.
y
)
;
const
pasteButtonCoordsRelativeToScreenInDevicePixels
=
await
pasteButtonIsShown
;
info
(
"
pasteButtonCoordsRelativeToScreenInDevicePixels
:
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
pasteButtonCoordsRelativeToScreenInDevicePixels
.
y
)
;
const
mouseCoordsRelativeToScreenInDevicePixels
=
getMouseCoordsRelativeToScreenInDevicePixels
(
)
;
info
(
"
mouseCoordsRelativeToScreenInDevicePixels
:
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
x
+
"
"
+
mouseCoordsRelativeToScreenInDevicePixels
.
y
)
;
ok
(
isCloselyLeftOnTopOf
(
mouseCoordsRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
'
Paste
'
button
is
closely
left
on
top
of
the
mouse
pointer
.
"
)
;
ok
(
isCloselyLeftOnTopOf
(
coordsOfClickInContentRelativeToScreenInDevicePixels
pasteButtonCoordsRelativeToScreenInDevicePixels
)
"
Coords
of
click
in
content
are
closely
left
on
top
of
the
'
Paste
'
button
.
"
)
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
}
)
;
}
)
;
add_task
(
async
function
test_accepting_paste_button
(
)
{
const
clipboardText
=
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
await
promiseClickContentToTriggerClipboardReadText
(
browser
false
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
const
mutatedReadTextResultFromContentElement
=
promiseMutatedReadTextResultFromContentElement
(
browser
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
await
mutatedReadTextResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Resolved
:
"
+
clipboardText
"
Text
returned
from
navigator
.
clipboard
.
readText
(
)
is
as
expected
.
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_dismissing_paste_button
(
)
{
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
await
promiseClickContentToTriggerClipboardReadText
(
browser
false
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
const
mutatedReadTextResultFromContentElement
=
promiseMutatedReadTextResultFromContentElement
(
browser
)
;
await
promiseDismissPasteButton
(
)
;
await
pasteButtonIsHidden
;
await
mutatedReadTextResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Rejected
.
"
"
navigator
.
clipboard
.
readText
(
)
rejected
after
dismissing
the
'
Paste
'
button
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_multiple_readText_invocations_for_same_user_activation
(
)
{
const
clipboardText
=
await
promiseWritingRandomTextToClipboard
(
)
;
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
await
promiseClickContentToTriggerClipboardReadText
(
browser
true
)
;
await
pasteButtonIsShown
;
const
mutatedReadTextResultFromContentElement
=
promiseMutatedReadTextResultFromContentElement
(
browser
)
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
mutatedReadTextResultFromContentElement
.
then
(
value
=
>
{
is
(
value
"
Resolved
1
:
"
+
clipboardText
+
"
;
Resolved
2
:
"
+
clipboardText
"
Two
calls
of
navigator
.
clipboard
.
read
(
)
both
resolved
with
the
expected
text
.
"
)
;
}
)
;
await
pasteButtonIsHidden
;
}
)
;
}
)
;
add_task
(
async
function
test_new_user_activation_shows_paste_button_again
(
)
{
await
BrowserTestUtils
.
withNewTab
(
kContentFileUrl
async
function
(
browser
)
{
await
promiseWritingRandomTextToClipboard
(
)
;
for
(
let
i
=
0
;
i
<
2
;
+
+
i
)
{
const
pasteButtonIsShown
=
promisePasteButtonIsShown
(
)
;
await
promiseClickContentToTriggerClipboardReadText
(
browser
false
)
;
await
pasteButtonIsShown
;
const
pasteButtonIsHidden
=
promisePasteButtonIsHidden
(
)
;
await
promiseClickPasteButton
(
)
;
await
pasteButtonIsHidden
;
}
}
)
;
}
)
;
