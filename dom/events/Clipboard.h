#
ifndef
mozilla_dom_Clipboard_h_
#
define
mozilla_dom_Clipboard_h_
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
namespace
mozilla
:
:
dom
{
enum
ClipboardReadType
{
eRead
eReadText
}
;
class
Promise
;
class
ClipboardItem
;
class
Clipboard
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
Clipboard
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
message
)
IMPL_EVENT_HANDLER
(
messageerror
)
explicit
Clipboard
(
nsPIDOMWindowInner
*
aWindow
)
;
already_AddRefed
<
Promise
>
Read
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
ReadText
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Write
(
const
Sequence
<
OwningNonNull
<
ClipboardItem
>
>
&
aData
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
WriteText
(
const
nsAString
&
aData
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
OnUserReactedToPasteMenuPopup
(
bool
aAllowed
)
;
static
LogModule
*
GetClipboardLog
(
)
;
static
bool
ReadTextEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
static
bool
IsTestingPrefEnabled
(
)
;
static
bool
IsTestingPrefEnabledOrHasReadPermission
(
nsIPrincipal
&
aSubjectPrincipal
)
;
already_AddRefed
<
nsIRunnable
>
CheckReadTextPermissionAndHandleRequest
(
Promise
&
aPromise
nsIPrincipal
&
aSubjectPrincipal
)
;
already_AddRefed
<
nsIRunnable
>
HandleReadTextRequestWhichRequiresPasteButton
(
Promise
&
aPromise
nsIPrincipal
&
aSubjectPrincipal
)
;
already_AddRefed
<
Promise
>
ReadHelper
(
nsIPrincipal
&
aSubjectPrincipal
ClipboardReadType
aClipboardReadType
ErrorResult
&
aRv
)
;
static
void
ProcessDataTransfer
(
DataTransfer
&
aDataTransfer
Promise
&
aPromise
ClipboardReadType
aClipboardReadType
nsPIDOMWindowInner
*
aOwner
nsIPrincipal
&
aSubjectPrincipal
bool
aNeedToFill
)
;
~
Clipboard
(
)
;
class
ReadTextRequest
final
{
public
:
ReadTextRequest
(
Promise
&
aPromise
nsIPrincipal
&
aSubjectPrincipal
)
:
mPromise
{
&
aPromise
}
mSubjectPrincipal
{
&
aSubjectPrincipal
}
{
}
already_AddRefed
<
nsIRunnable
>
Answer
(
)
;
void
MaybeRejectWithNotAllowedError
(
const
nsACString
&
aMessage
)
;
private
:
RefPtr
<
Promise
>
mPromise
;
RefPtr
<
nsIPrincipal
>
mSubjectPrincipal
;
}
;
AutoTArray
<
UniquePtr
<
ReadTextRequest
>
1
>
mReadTextRequests
;
class
TransientUserPasteState
final
{
public
:
enum
class
Value
{
Initial
WaitingForUserReactionToPasteMenuPopup
TransientlyForbiddenByUser
TransientlyAllowedByUser
}
;
Value
RefreshAndGet
(
WindowContext
&
aWindowContext
)
;
void
OnStartWaitingForUserReactionToPasteMenuPopup
(
const
TimeStamp
&
aUserGestureStart
)
;
void
OnUserReactedToPasteMenuPopup
(
bool
aAllowed
)
;
private
:
TimeStamp
mUserGestureStart
;
Value
mValue
=
Value
:
:
Initial
;
}
;
TransientUserPasteState
mTransientUserPasteState
;
}
;
}
#
endif
