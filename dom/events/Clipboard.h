#
ifndef
mozilla_dom_Clipboard_h_
#
define
mozilla_dom_Clipboard_h_
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsIAsyncGetClipboardData
;
namespace
mozilla
:
:
dom
{
class
Promise
;
class
ClipboardItem
;
class
Clipboard
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
Clipboard
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
message
)
IMPL_EVENT_HANDLER
(
messageerror
)
explicit
Clipboard
(
nsPIDOMWindowInner
*
aWindow
)
;
already_AddRefed
<
Promise
>
Read
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
ReadText
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Write
(
const
Sequence
<
OwningNonNull
<
ClipboardItem
>
>
&
aData
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
WriteText
(
const
nsAString
&
aData
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
static
LogModule
*
GetClipboardLog
(
)
;
static
bool
ReadTextEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
static
Span
<
const
nsLiteralCString
>
MandatoryDataTypes
(
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
enum
class
ReadRequestType
{
eRead
eReadText
}
;
static
bool
IsTestingPrefEnabled
(
)
;
static
bool
IsTestingPrefEnabledOrHasReadPermission
(
nsIPrincipal
&
aSubjectPrincipal
)
;
already_AddRefed
<
Promise
>
ReadHelper
(
nsIPrincipal
&
aSubjectPrincipal
ReadRequestType
aType
ErrorResult
&
aRv
)
;
~
Clipboard
(
)
;
void
RequestRead
(
Promise
*
aPromise
ReadRequestType
aType
nsPIDOMWindowInner
*
aOwner
nsIPrincipal
&
aPrincipal
)
;
void
RequestRead
(
Promise
&
aPromise
const
ReadRequestType
&
aType
nsPIDOMWindowInner
&
aOwner
nsIPrincipal
&
aSubjectPrincipal
nsIAsyncGetClipboardData
&
aRequest
)
;
}
;
}
#
endif
