#
include
"
ContentEventHandler
.
h
"
#
include
"
IMEContentObserver
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_test
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
TextControlElement
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
WritingModes
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
using
RawNodePosition
=
ContentEventHandler
:
:
RawNodePosition
;
using
namespace
dom
;
using
namespace
widget
;
LazyLogModule
sIMECOLog
(
"
IMEContentObserver
"
)
;
LazyLogModule
sCacheLog
(
"
IMEContentObserverCache
"
)
;
static
const
char
*
ToChar
(
bool
aBool
)
{
return
aBool
?
"
true
"
:
"
false
"
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
IMEContentObserver
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
IMEContentObserver
)
nsAutoScriptBlocker
scriptBlocker
;
tmp
-
>
NotifyIMEOfBlur
(
)
;
tmp
-
>
UnregisterObservers
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSelection
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEditableNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocShell
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEditorBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocumentObserver
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEndOfAddedTextCache
.
mContainerNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mEndOfAddedTextCache
.
mContent
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mStartOfRemovingTextRangeCache
.
mContainerNode
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mStartOfRemovingTextRangeCache
.
mContent
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_WEAK_REFERENCE
tmp
-
>
mIMENotificationRequests
=
nullptr
;
tmp
-
>
mESM
=
nullptr
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
IMEContentObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mWidget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFocusedWidget
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSelection
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRootElement
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEditableNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocShell
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEditorBase
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocumentObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEndOfAddedTextCache
.
mContainerNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mEndOfAddedTextCache
.
mContent
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mStartOfRemovingTextRangeCache
.
mContainerNode
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mStartOfRemovingTextRangeCache
.
mContent
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
IMEContentObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIMutationObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIReflowObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIScrollObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIReflowObserver
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
IMEContentObserver
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
IMEContentObserver
)
IMEContentObserver
:
:
IMEContentObserver
(
)
{
#
ifdef
DEBUG
mTextChangeData
.
Test
(
)
;
#
endif
}
void
IMEContentObserver
:
:
Init
(
nsIWidget
&
aWidget
nsPresContext
&
aPresContext
Element
*
aElement
EditorBase
&
aEditorBase
)
{
State
state
=
GetState
(
)
;
if
(
NS_WARN_IF
(
state
=
=
eState_Observing
)
)
{
return
;
}
bool
firstInitialization
=
state
!
=
eState_StoppedObserving
;
if
(
!
firstInitialization
)
{
UnregisterObservers
(
)
;
Clear
(
)
;
}
mESM
=
aPresContext
.
EventStateManager
(
)
;
mESM
-
>
OnStartToObserveContent
(
this
)
;
mWidget
=
&
aWidget
;
mIMENotificationRequests
=
&
mWidget
-
>
IMENotificationRequestsRef
(
)
;
if
(
!
InitWithEditor
(
aPresContext
aElement
aEditorBase
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Error
(
"
0x
%
p
Init
(
)
FAILED
due
to
InitWithEditor
(
)
"
"
failure
"
this
)
)
;
Clear
(
)
;
return
;
}
if
(
firstInitialization
)
{
MaybeNotifyIMEOfFocusSet
(
)
;
return
;
}
ObserveEditableNode
(
)
;
if
(
!
NeedsToNotifyIMEOfSomething
(
)
)
{
return
;
}
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
OnIMEReceivedFocus
(
)
{
if
(
GetState
(
)
!
=
eState_Initializing
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
OnIMEReceivedFocus
(
)
"
"
but
the
state
is
not
\
"
initializing
\
"
so
does
nothing
"
this
)
)
;
return
;
}
if
(
!
mRootElement
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
OnIMEReceivedFocus
(
)
"
"
but
mRootElement
has
already
been
cleared
so
does
nothing
"
this
)
)
;
return
;
}
ObserveEditableNode
(
)
;
if
(
!
NeedsToNotifyIMEOfSomething
(
)
)
{
return
;
}
FlushMergeableNotifications
(
)
;
}
bool
IMEContentObserver
:
:
InitWithEditor
(
nsPresContext
&
aPresContext
Element
*
aElement
EditorBase
&
aEditorBase
)
{
mEditableNode
=
IMEStateManager
:
:
GetRootEditableNode
(
aPresContext
aElement
)
;
if
(
NS_WARN_IF
(
!
mEditableNode
)
)
{
return
false
;
}
mEditorBase
=
&
aEditorBase
;
RefPtr
<
PresShell
>
presShell
=
aPresContext
.
GetPresShell
(
)
;
nsCOMPtr
<
nsISelectionController
>
selCon
;
if
(
mEditableNode
-
>
IsContent
(
)
)
{
nsIFrame
*
frame
=
mEditableNode
-
>
AsContent
(
)
-
>
GetPrimaryFrame
(
)
;
if
(
NS_WARN_IF
(
!
frame
)
)
{
return
false
;
}
frame
-
>
GetSelectionController
(
&
aPresContext
getter_AddRefs
(
selCon
)
)
;
}
else
{
selCon
=
presShell
;
}
if
(
NS_WARN_IF
(
!
selCon
)
)
{
return
false
;
}
mSelection
=
selCon
-
>
GetSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
NS_WARN_IF
(
!
mSelection
)
)
{
return
false
;
}
if
(
mEditorBase
-
>
IsTextEditor
(
)
)
{
mRootElement
=
mEditorBase
-
>
GetRoot
(
)
;
MOZ_ASSERT
(
mRootElement
)
;
MOZ_ASSERT
(
mRootElement
-
>
GetFirstChild
(
)
)
;
if
(
auto
*
text
=
Text
:
:
FromNodeOrNull
(
mRootElement
?
mRootElement
-
>
GetFirstChild
(
)
:
nullptr
)
)
{
mTextControlValueLength
=
ContentEventHandler
:
:
GetNativeTextLength
(
*
text
)
;
}
mIsTextControl
=
true
;
}
else
if
(
const
nsRange
*
selRange
=
mSelection
-
>
GetRangeAt
(
0
)
)
{
MOZ_ASSERT
(
!
mIsTextControl
)
;
if
(
NS_WARN_IF
(
!
selRange
-
>
GetStartContainer
(
)
)
)
{
return
false
;
}
nsCOMPtr
<
nsINode
>
startContainer
=
selRange
-
>
GetStartContainer
(
)
;
mRootElement
=
Element
:
:
FromNodeOrNull
(
startContainer
-
>
GetSelectionRootContent
(
presShell
)
)
;
}
else
{
MOZ_ASSERT
(
!
mIsTextControl
)
;
nsCOMPtr
<
nsINode
>
editableNode
=
mEditableNode
;
mRootElement
=
Element
:
:
FromNodeOrNull
(
editableNode
-
>
GetSelectionRootContent
(
presShell
)
)
;
}
if
(
!
mRootElement
&
&
mEditableNode
-
>
IsDocument
(
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
mRootElement
)
)
{
return
false
;
}
mDocShell
=
aPresContext
.
GetDocShell
(
)
;
if
(
NS_WARN_IF
(
!
mDocShell
)
)
{
return
false
;
}
mDocumentObserver
=
new
DocumentObserver
(
*
this
)
;
return
true
;
}
void
IMEContentObserver
:
:
Clear
(
)
{
mEditorBase
=
nullptr
;
mSelection
=
nullptr
;
mEditableNode
=
nullptr
;
mRootElement
=
nullptr
;
mDocShell
=
nullptr
;
mDocumentObserver
=
nullptr
;
}
void
IMEContentObserver
:
:
ObserveEditableNode
(
)
{
MOZ_RELEASE_ASSERT
(
mSelection
)
;
MOZ_RELEASE_ASSERT
(
mRootElement
)
;
MOZ_RELEASE_ASSERT
(
GetState
(
)
!
=
eState_Observing
)
;
if
(
!
mIMEHasFocus
)
{
MOZ_ASSERT
(
!
mWidget
|
|
mNeedsToNotifyIMEOfFocusSet
|
|
mSendingNotification
=
=
NOTIFY_IME_OF_FOCUS
"
Wow
OnIMEReceivedFocus
(
)
won
'
t
be
called
?
"
)
;
return
;
}
mIsObserving
=
true
;
if
(
mEditorBase
)
{
mEditorBase
-
>
SetIMEContentObserver
(
this
)
;
}
mRootElement
-
>
AddMutationObserver
(
this
)
;
Document
*
doc
=
mRootElement
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
RefPtr
<
DocumentObserver
>
documentObserver
=
mDocumentObserver
;
documentObserver
-
>
Observe
(
doc
)
;
}
if
(
mDocShell
)
{
mDocShell
-
>
AddWeakScrollObserver
(
this
)
;
mDocShell
-
>
AddWeakReflowObserver
(
this
)
;
}
}
void
IMEContentObserver
:
:
NotifyIMEOfBlur
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
;
mWidget
.
swap
(
widget
)
;
mIMENotificationRequests
=
nullptr
;
if
(
!
mIMEHasFocus
)
{
return
;
}
MOZ_RELEASE_ASSERT
(
widget
)
;
RefPtr
<
IMEContentObserver
>
kungFuDeathGrip
(
this
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
NotifyIMEOfBlur
(
)
sending
NOTIFY_IME_OF_BLUR
"
this
)
)
;
mIMEHasFocus
=
false
;
IMEStateManager
:
:
NotifyIME
(
IMENotification
(
NOTIFY_IME_OF_BLUR
)
widget
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
NotifyIMEOfBlur
(
)
sent
NOTIFY_IME_OF_BLUR
"
this
)
)
;
}
void
IMEContentObserver
:
:
UnregisterObservers
(
)
{
if
(
!
mIsObserving
)
{
return
;
}
mIsObserving
=
false
;
if
(
mEditorBase
)
{
mEditorBase
-
>
SetIMEContentObserver
(
nullptr
)
;
}
if
(
mSelection
)
{
mSelectionData
.
Clear
(
)
;
mFocusedWidget
=
nullptr
;
}
if
(
mRootElement
)
{
mRootElement
-
>
RemoveMutationObserver
(
this
)
;
}
if
(
mDocumentObserver
)
{
RefPtr
<
DocumentObserver
>
documentObserver
=
mDocumentObserver
;
documentObserver
-
>
StopObserving
(
)
;
}
if
(
mDocShell
)
{
mDocShell
-
>
RemoveWeakScrollObserver
(
this
)
;
mDocShell
-
>
RemoveWeakReflowObserver
(
this
)
;
}
}
nsPresContext
*
IMEContentObserver
:
:
GetPresContext
(
)
const
{
return
mESM
?
mESM
-
>
GetPresContext
(
)
:
nullptr
;
}
void
IMEContentObserver
:
:
Destroy
(
)
{
NotifyIMEOfBlur
(
)
;
UnregisterObservers
(
)
;
Clear
(
)
;
mWidget
=
nullptr
;
mIMENotificationRequests
=
nullptr
;
if
(
mESM
)
{
mESM
-
>
OnStopObservingContent
(
this
)
;
mESM
=
nullptr
;
}
}
bool
IMEContentObserver
:
:
Destroyed
(
)
const
{
return
!
mWidget
;
}
void
IMEContentObserver
:
:
DisconnectFromEventStateManager
(
)
{
mESM
=
nullptr
;
}
bool
IMEContentObserver
:
:
MaybeReinitialize
(
nsIWidget
&
aWidget
nsPresContext
&
aPresContext
Element
*
aElement
EditorBase
&
aEditorBase
)
{
if
(
!
IsObservingContent
(
aPresContext
aElement
)
)
{
return
false
;
}
if
(
GetState
(
)
=
=
eState_StoppedObserving
)
{
Init
(
aWidget
aPresContext
aElement
aEditorBase
)
;
}
return
IsObserving
(
aPresContext
aElement
)
;
}
bool
IMEContentObserver
:
:
IsObserving
(
const
nsPresContext
&
aPresContext
const
Element
*
aElement
)
const
{
if
(
GetState
(
)
!
=
eState_Observing
)
{
return
false
;
}
if
(
!
aElement
|
|
!
aElement
-
>
IsTextControlElement
(
)
|
|
!
static_cast
<
const
TextControlElement
*
>
(
aElement
)
-
>
IsSingleLineTextControlOrTextArea
(
)
)
{
if
(
mIsTextControl
)
{
return
false
;
}
}
else
if
(
!
mIsTextControl
)
{
return
false
;
}
return
IsObservingContent
(
aPresContext
aElement
)
;
}
bool
IMEContentObserver
:
:
IsBeingInitializedFor
(
const
nsPresContext
&
aPresContext
const
Element
*
aElement
const
EditorBase
&
aEditorBase
)
const
{
return
GetState
(
)
=
=
eState_Initializing
&
&
mEditorBase
=
=
&
aEditorBase
&
&
IsObservingContent
(
aPresContext
aElement
)
;
}
bool
IMEContentObserver
:
:
IsObserving
(
const
TextComposition
&
aTextComposition
)
const
{
if
(
GetState
(
)
!
=
eState_Observing
)
{
return
false
;
}
nsPresContext
*
const
presContext
=
aTextComposition
.
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
false
;
}
if
(
presContext
!
=
GetPresContext
(
)
)
{
return
false
;
}
auto
*
const
elementHavingComposition
=
Element
:
:
FromNodeOrNull
(
aTextComposition
.
GetEventTargetNode
(
)
)
;
bool
isObserving
=
IsObservingContent
(
*
presContext
elementHavingComposition
)
;
#
ifdef
DEBUG
if
(
isObserving
)
{
if
(
mIsTextControl
)
{
MOZ_ASSERT
(
elementHavingComposition
)
;
MOZ_ASSERT
(
elementHavingComposition
-
>
IsTextControlElement
(
)
"
Should
'
ve
never
started
to
observe
non
-
text
-
control
element
"
)
;
NS_ASSERTION
(
static_cast
<
TextControlElement
*
>
(
elementHavingComposition
)
-
>
IsSingleLineTextControlOrTextArea
(
)
"
Should
'
ve
stopped
observing
when
the
type
is
changed
"
)
;
NS_ASSERTION
(
!
elementHavingComposition
-
>
IsInDesignMode
(
)
"
Should
'
ve
stopped
observing
when
the
design
mode
started
"
)
;
}
else
if
(
elementHavingComposition
)
{
NS_ASSERTION
(
!
elementHavingComposition
-
>
IsTextControlElement
(
)
|
|
!
static_cast
<
TextControlElement
*
>
(
elementHavingComposition
)
-
>
IsSingleLineTextControlOrTextArea
(
)
"
Should
'
ve
never
started
to
observe
text
-
control
element
or
"
"
stopped
observing
it
when
the
type
is
changed
"
)
;
}
else
{
MOZ_ASSERT
(
presContext
-
>
GetPresShell
(
)
)
;
MOZ_ASSERT
(
presContext
-
>
GetPresShell
(
)
-
>
GetDocument
(
)
)
;
NS_ASSERTION
(
presContext
-
>
GetPresShell
(
)
-
>
GetDocument
(
)
-
>
IsInDesignMode
(
)
"
Should
be
observing
entire
the
document
only
in
the
design
mode
"
)
;
}
}
#
endif
return
isObserving
;
}
IMEContentObserver
:
:
State
IMEContentObserver
:
:
GetState
(
)
const
{
if
(
!
mSelection
|
|
!
mRootElement
|
|
!
mEditableNode
)
{
return
eState_NotObserving
;
}
if
(
!
mRootElement
-
>
IsInComposedDoc
(
)
)
{
return
eState_StoppedObserving
;
}
return
mIsObserving
?
eState_Observing
:
eState_Initializing
;
}
bool
IMEContentObserver
:
:
IsObservingContent
(
const
nsPresContext
&
aPresContext
const
Element
*
aElement
)
const
{
return
mEditableNode
=
=
IMEStateManager
:
:
GetRootEditableNode
(
aPresContext
aElement
)
;
}
bool
IMEContentObserver
:
:
IsEditorHandlingEventForComposition
(
)
const
{
if
(
!
mWidget
)
{
return
false
;
}
RefPtr
<
TextComposition
>
composition
=
IMEStateManager
:
:
GetTextCompositionFor
(
mWidget
)
;
if
(
!
composition
)
{
return
false
;
}
return
composition
-
>
EditorIsHandlingLatestChange
(
)
;
}
bool
IMEContentObserver
:
:
IsEditorComposing
(
)
const
{
if
(
NS_WARN_IF
(
!
mEditorBase
)
)
{
return
false
;
}
return
mEditorBase
-
>
IsIMEComposing
(
)
;
}
nsresult
IMEContentObserver
:
:
GetSelectionAndRoot
(
Selection
*
*
aSelection
Element
*
*
aRootElement
)
const
{
if
(
!
mEditableNode
|
|
!
mSelection
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_ASSERTION
(
mSelection
&
&
mRootElement
"
uninitialized
content
observer
"
)
;
NS_ADDREF
(
*
aSelection
=
mSelection
)
;
NS_ADDREF
(
*
aRootElement
=
mRootElement
)
;
return
NS_OK
;
}
void
IMEContentObserver
:
:
OnSelectionChange
(
Selection
&
aSelection
)
{
if
(
!
mIsObserving
)
{
return
;
}
if
(
mWidget
)
{
bool
causedByComposition
=
IsEditorHandlingEventForComposition
(
)
;
bool
causedBySelectionEvent
=
TextComposition
:
:
IsHandlingSelectionEvent
(
)
;
bool
duringComposition
=
IsEditorComposing
(
)
;
MaybeNotifyIMEOfSelectionChange
(
causedByComposition
causedBySelectionEvent
duringComposition
)
;
}
}
void
IMEContentObserver
:
:
ScrollPositionChanged
(
)
{
if
(
!
NeedsPositionChangeNotification
(
)
)
{
return
;
}
MaybeNotifyIMEOfPositionChange
(
)
;
}
NS_IMETHODIMP
IMEContentObserver
:
:
Reflow
(
DOMHighResTimeStamp
aStart
DOMHighResTimeStamp
aEnd
)
{
if
(
!
NeedsPositionChangeNotification
(
)
)
{
return
NS_OK
;
}
MaybeNotifyIMEOfPositionChange
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
IMEContentObserver
:
:
ReflowInterruptible
(
DOMHighResTimeStamp
aStart
DOMHighResTimeStamp
aEnd
)
{
if
(
!
NeedsPositionChangeNotification
(
)
)
{
return
NS_OK
;
}
MaybeNotifyIMEOfPositionChange
(
)
;
return
NS_OK
;
}
nsresult
IMEContentObserver
:
:
HandleQueryContentEvent
(
WidgetQueryContentEvent
*
aEvent
)
{
const
bool
isSelectionCacheAvailable
=
aEvent
-
>
mUseNativeLineBreak
&
&
mSelectionData
.
IsInitialized
(
)
&
&
!
mNeedsToNotifyIMEOfSelectionChange
;
if
(
isSelectionCacheAvailable
&
&
aEvent
-
>
mMessage
=
=
eQuerySelectedText
&
&
aEvent
-
>
mInput
.
mSelectionType
=
=
SelectionType
:
:
eNormal
)
{
aEvent
-
>
EmplaceReply
(
)
;
if
(
mSelectionData
.
HasRange
(
)
)
{
aEvent
-
>
mReply
-
>
mOffsetAndData
.
emplace
(
mSelectionData
.
mOffset
mSelectionData
.
String
(
)
OffsetAndDataFor
:
:
SelectedString
)
;
aEvent
-
>
mReply
-
>
mReversed
=
mSelectionData
.
mReversed
;
}
aEvent
-
>
mReply
-
>
mContentsRoot
=
mRootElement
;
aEvent
-
>
mReply
-
>
mWritingMode
=
mSelectionData
.
GetWritingMode
(
)
;
aEvent
-
>
mReply
-
>
mIsEditableContent
=
true
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
HandleQueryContentEvent
(
aEvent
=
{
"
"
mMessage
=
%
s
mReply
=
%
s
}
)
"
this
ToChar
(
aEvent
-
>
mMessage
)
ToString
(
aEvent
-
>
mReply
)
.
c_str
(
)
)
)
;
return
NS_OK
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
HandleQueryContentEvent
(
aEvent
=
{
mMessage
=
%
s
}
)
"
this
ToChar
(
aEvent
-
>
mMessage
)
)
)
;
if
(
aEvent
-
>
mInput
.
mRelativeToInsertionPoint
&
&
aEvent
-
>
mInput
.
IsValidEventMessage
(
aEvent
-
>
mMessage
)
)
{
RefPtr
<
TextComposition
>
composition
=
IMEStateManager
:
:
GetTextCompositionFor
(
aEvent
-
>
mWidget
)
;
if
(
composition
)
{
uint32_t
compositionStart
=
composition
-
>
NativeOffsetOfStartComposition
(
)
;
if
(
NS_WARN_IF
(
!
aEvent
-
>
mInput
.
MakeOffsetAbsolute
(
compositionStart
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
else
if
(
isSelectionCacheAvailable
&
&
mSelectionData
.
HasRange
(
)
)
{
const
uint32_t
selectionStart
=
mSelectionData
.
mOffset
;
if
(
NS_WARN_IF
(
!
aEvent
-
>
mInput
.
MakeOffsetAbsolute
(
selectionStart
)
)
)
{
return
NS_ERROR_FAILURE
;
}
}
}
AutoRestore
<
bool
>
handling
(
mIsHandlingQueryContentEvent
)
;
mIsHandlingQueryContentEvent
=
true
;
ContentEventHandler
handler
(
GetPresContext
(
)
)
;
nsresult
rv
=
handler
.
HandleQueryContentEvent
(
aEvent
)
;
if
(
NS_WARN_IF
(
Destroyed
(
)
)
)
{
aEvent
-
>
mReply
.
reset
(
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
HandleQueryContentEvent
(
)
WARNING
"
"
IMEContentObserver
has
been
destroyed
during
the
query
"
"
making
the
query
fail
"
this
)
)
;
return
rv
;
}
if
(
aEvent
-
>
Succeeded
(
)
&
&
NS_WARN_IF
(
aEvent
-
>
mReply
-
>
mContentsRoot
!
=
mRootElement
)
)
{
aEvent
-
>
mReply
.
reset
(
)
;
}
return
rv
;
}
nsresult
IMEContentObserver
:
:
MaybeHandleSelectionEvent
(
nsPresContext
*
aPresContext
WidgetSelectionEvent
*
aEvent
)
{
MOZ_ASSERT
(
aEvent
)
;
MOZ_ASSERT
(
aEvent
-
>
mMessage
=
=
eSetSelection
)
;
NS_ASSERTION
(
!
mNeedsToNotifyIMEOfSelectionChange
"
Selection
cache
has
not
been
updated
yet
"
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
MaybeHandleSelectionEvent
(
aEvent
=
{
"
"
mMessage
=
%
s
mOffset
=
%
u
mLength
=
%
u
mReversed
=
%
s
"
"
mExpandToClusterBoundary
=
%
s
mUseNativeLineBreak
=
%
s
}
)
"
"
mSelectionData
=
%
s
"
this
ToChar
(
aEvent
-
>
mMessage
)
aEvent
-
>
mOffset
aEvent
-
>
mLength
ToChar
(
aEvent
-
>
mReversed
)
ToChar
(
aEvent
-
>
mExpandToClusterBoundary
)
ToChar
(
aEvent
-
>
mUseNativeLineBreak
)
ToString
(
mSelectionData
)
.
c_str
(
)
)
)
;
if
(
!
mNeedsToNotifyIMEOfSelectionChange
&
&
aEvent
-
>
mUseNativeLineBreak
&
&
mSelectionData
.
IsInitialized
(
)
&
&
mSelectionData
.
HasRange
(
)
&
&
mSelectionData
.
StartOffset
(
)
=
=
aEvent
-
>
mOffset
&
&
mSelectionData
.
Length
(
)
=
=
aEvent
-
>
mLength
)
{
if
(
RefPtr
<
Selection
>
selection
=
mSelection
)
{
selection
-
>
ScrollIntoView
(
nsISelectionController
:
:
SELECTION_FOCUS_REGION
ScrollAxis
(
)
ScrollAxis
(
)
0
)
;
}
aEvent
-
>
mSucceeded
=
true
;
return
NS_OK
;
}
ContentEventHandler
handler
(
aPresContext
)
;
return
handler
.
OnSelectionEvent
(
aEvent
)
;
}
bool
IMEContentObserver
:
:
OnMouseButtonEvent
(
nsPresContext
&
aPresContext
WidgetMouseEvent
&
aMouseEvent
)
{
if
(
!
mIMENotificationRequests
|
|
!
mIMENotificationRequests
-
>
WantMouseButtonEventOnChar
(
)
)
{
return
false
;
}
if
(
!
aMouseEvent
.
IsTrusted
(
)
|
|
aMouseEvent
.
DefaultPrevented
(
)
|
|
!
aMouseEvent
.
mWidget
)
{
return
false
;
}
switch
(
aMouseEvent
.
mMessage
)
{
case
eMouseUp
:
case
eMouseDown
:
break
;
default
:
return
false
;
}
if
(
NS_WARN_IF
(
!
mWidget
)
|
|
NS_WARN_IF
(
mWidget
-
>
Destroyed
(
)
)
)
{
return
false
;
}
WidgetQueryContentEvent
queryCharAtPointEvent
(
true
eQueryCharacterAtPoint
aMouseEvent
.
mWidget
)
;
queryCharAtPointEvent
.
mRefPoint
=
aMouseEvent
.
mRefPoint
;
ContentEventHandler
handler
(
&
aPresContext
)
;
handler
.
OnQueryCharacterAtPoint
(
&
queryCharAtPointEvent
)
;
if
(
NS_WARN_IF
(
queryCharAtPointEvent
.
Failed
(
)
)
|
|
queryCharAtPointEvent
.
DidNotFindChar
(
)
)
{
return
false
;
}
if
(
!
mWidget
|
|
NS_WARN_IF
(
mWidget
-
>
Destroyed
(
)
)
)
{
return
false
;
}
nsIWidget
*
topLevelWidget
=
mWidget
-
>
GetTopLevelWidget
(
)
;
if
(
topLevelWidget
&
&
topLevelWidget
!
=
mWidget
)
{
queryCharAtPointEvent
.
mReply
-
>
mRect
.
MoveBy
(
topLevelWidget
-
>
WidgetToScreenOffset
(
)
-
mWidget
-
>
WidgetToScreenOffset
(
)
)
;
}
if
(
aMouseEvent
.
mWidget
!
=
mWidget
)
{
queryCharAtPointEvent
.
mRefPoint
+
=
aMouseEvent
.
mWidget
-
>
WidgetToScreenOffset
(
)
-
mWidget
-
>
WidgetToScreenOffset
(
)
;
}
IMENotification
notification
(
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
)
;
notification
.
mMouseButtonEventData
.
mEventMessage
=
aMouseEvent
.
mMessage
;
notification
.
mMouseButtonEventData
.
mOffset
=
queryCharAtPointEvent
.
mReply
-
>
StartOffset
(
)
;
notification
.
mMouseButtonEventData
.
mCursorPos
=
queryCharAtPointEvent
.
mRefPoint
;
notification
.
mMouseButtonEventData
.
mCharRect
=
queryCharAtPointEvent
.
mReply
-
>
mRect
;
notification
.
mMouseButtonEventData
.
mButton
=
aMouseEvent
.
mButton
;
notification
.
mMouseButtonEventData
.
mButtons
=
aMouseEvent
.
mButtons
;
notification
.
mMouseButtonEventData
.
mModifiers
=
aMouseEvent
.
mModifiers
;
nsresult
rv
=
IMEStateManager
:
:
NotifyIME
(
notification
mWidget
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
bool
consumed
=
(
rv
=
=
NS_SUCCESS_EVENT_CONSUMED
)
;
if
(
consumed
)
{
aMouseEvent
.
PreventDefault
(
)
;
}
return
consumed
;
}
void
IMEContentObserver
:
:
CharacterDataWillChange
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
aInfo
)
{
if
(
!
aContent
-
>
IsText
(
)
)
{
return
;
}
MOZ_ASSERT
(
mPreCharacterDataChangeLength
<
0
"
CharacterDataChanged
(
)
should
'
ve
reset
"
"
mPreCharacterDataChangeLength
"
)
;
if
(
!
NeedsTextChangeNotification
(
)
|
|
!
nsContentUtils
:
:
IsInSameAnonymousTree
(
mRootElement
aContent
)
)
{
return
;
}
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
if
(
HasAddedNodesDuringDocumentChange
(
)
)
{
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
__FUNCTION__
)
;
}
mPreCharacterDataChangeLength
=
ContentEventHandler
:
:
GetNativeTextLength
(
*
aContent
-
>
AsText
(
)
aInfo
.
mChangeStart
aInfo
.
mChangeEnd
)
;
MOZ_ASSERT
(
mPreCharacterDataChangeLength
>
=
aInfo
.
mChangeEnd
-
aInfo
.
mChangeStart
"
The
computed
length
must
be
same
as
or
larger
than
XP
length
"
)
;
}
void
IMEContentObserver
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
aInfo
)
{
if
(
!
aContent
-
>
IsText
(
)
)
{
return
;
}
if
(
mWidget
&
&
!
IsEditorHandlingEventForComposition
(
)
)
{
if
(
RefPtr
<
TextComposition
>
composition
=
IMEStateManager
:
:
GetTextCompositionFor
(
mWidget
)
)
{
composition
-
>
OnCharacterDataChanged
(
*
aContent
-
>
AsText
(
)
aInfo
)
;
}
}
if
(
!
NeedsTextChangeNotification
(
)
|
|
!
nsContentUtils
:
:
IsInSameAnonymousTree
(
mRootElement
aContent
)
)
{
return
;
}
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
MOZ_ASSERT
(
!
HasAddedNodesDuringDocumentChange
(
)
"
The
stored
range
should
be
flushed
before
actually
the
data
is
changed
"
)
;
int64_t
removedLength
=
mPreCharacterDataChangeLength
;
mPreCharacterDataChangeLength
=
-
1
;
MOZ_ASSERT
(
removedLength
>
=
0
"
mPreCharacterDataChangeLength
should
'
ve
been
set
by
"
"
CharacterDataWillChange
(
)
"
)
;
uint32_t
offset
=
0
;
if
(
mIsTextControl
)
{
MOZ_ASSERT
(
mRootElement
-
>
GetFirstChild
(
)
=
=
aContent
)
;
if
(
aInfo
.
mChangeStart
)
{
offset
=
ContentEventHandler
:
:
GetNativeTextLength
(
*
aContent
-
>
AsText
(
)
0
aInfo
.
mChangeStart
)
;
}
}
else
{
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
BeforeFirstContentOf
(
*
mRootElement
)
RawNodePosition
(
aContent
aInfo
.
mChangeStart
)
mRootElement
&
offset
LINE_BREAK_TYPE_NATIVE
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
}
uint32_t
newLength
=
ContentEventHandler
:
:
GetNativeTextLength
(
*
aContent
-
>
AsText
(
)
aInfo
.
mChangeStart
aInfo
.
mChangeStart
+
aInfo
.
mReplaceLength
)
;
uint32_t
oldEnd
=
offset
+
static_cast
<
uint32_t
>
(
removedLength
)
;
uint32_t
newEnd
=
offset
+
newLength
;
TextChangeData
data
(
offset
oldEnd
newEnd
IsEditorHandlingEventForComposition
(
)
IsEditorComposing
(
)
)
;
MaybeNotifyIMEOfTextChange
(
data
)
;
}
void
IMEContentObserver
:
:
NotifyContentAdded
(
nsINode
*
aContainer
nsIContent
*
aFirstContent
nsIContent
*
aLastContent
)
{
if
(
!
NeedsTextChangeNotification
(
)
|
|
!
nsContentUtils
:
:
IsInSameAnonymousTree
(
mRootElement
aFirstContent
)
)
{
return
;
}
MOZ_ASSERT_IF
(
aFirstContent
aFirstContent
-
>
GetParentNode
(
)
=
=
aContainer
)
;
MOZ_ASSERT_IF
(
aLastContent
aLastContent
-
>
GetParentNode
(
)
=
=
aContainer
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
if
(
IsInDocumentChange
(
)
)
{
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
if
(
!
HasAddedNodesDuringDocumentChange
(
)
)
{
mFirstAddedContainer
=
mLastAddedContainer
=
aContainer
;
mFirstAddedContent
=
aFirstContent
;
mLastAddedContent
=
aLastContent
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
NotifyContentAdded
(
)
starts
to
store
consecutive
added
"
"
nodes
"
this
)
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
NotifyContentAdded
:
called
during
a
document
change
"
"
(
aFirstContent
=
%
s
aLastContent
=
%
s
)
"
ToString
(
RefPtr
<
nsINode
>
(
aFirstContent
)
)
.
c_str
(
)
ToString
(
RefPtr
<
nsINode
>
(
aLastContent
)
)
.
c_str
(
)
)
)
;
return
;
}
if
(
NS_WARN_IF
(
!
IsNextNodeOfLastAddedNode
(
aContainer
aFirstContent
)
)
)
{
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
NotifyContentAdded
:
called
during
a
document
change
flushed
"
"
previous
added
nodes
(
aFirstContent
=
%
s
aLastContent
=
%
s
)
"
ToString
(
RefPtr
<
nsINode
>
(
aFirstContent
)
)
.
c_str
(
)
ToString
(
RefPtr
<
nsINode
>
(
aLastContent
)
)
.
c_str
(
)
)
)
;
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
__FUNCTION__
)
;
mFirstAddedContainer
=
aContainer
;
mFirstAddedContent
=
aFirstContent
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
NotifyContentAdded
(
)
starts
to
store
consecutive
added
"
"
nodes
"
this
)
)
;
}
mLastAddedContainer
=
aContainer
;
mLastAddedContent
=
aLastContent
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
NotifyContentAdded
:
called
during
a
"
"
document
change
and
updated
(
aFirstContent
=
%
s
aLastContent
=
%
s
)
"
ToString
(
RefPtr
<
nsINode
>
(
aFirstContent
)
)
.
c_str
(
)
ToString
(
RefPtr
<
nsINode
>
(
aLastContent
)
)
.
c_str
(
)
)
)
;
return
;
}
MOZ_ASSERT
(
!
HasAddedNodesDuringDocumentChange
(
)
"
The
cache
should
be
cleared
when
document
change
finished
"
)
;
Maybe
<
uint32_t
>
offset
=
mEndOfAddedTextCache
.
GetFlatTextOffsetOnInsertion
(
*
aFirstContent
*
aLastContent
mRootElement
)
;
if
(
offset
.
isNothing
(
)
)
{
Result
<
uint32_t
nsresult
>
textLengthBeforeFirstContentOrError
=
FlatTextCache
:
:
ComputeTextLengthBeforeContent
(
*
aFirstContent
mRootElement
)
;
if
(
NS_WARN_IF
(
textLengthBeforeFirstContentOrError
.
isErr
(
)
)
)
{
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Error
(
"
NotifyContentAdded
:
failed
to
compute
text
length
before
"
"
aFirstContent
(
%
s
)
"
ToString
(
RefPtr
<
nsINode
>
(
aFirstContent
)
)
.
c_str
(
)
)
)
;
return
;
}
offset
=
Some
(
textLengthBeforeFirstContentOrError
.
unwrap
(
)
)
;
}
Result
<
uint32_t
nsresult
>
addingLengthOrError
=
FlatTextCache
:
:
ComputeTextLengthStartOfContentToEndOfContent
(
*
aFirstContent
*
aLastContent
mRootElement
)
;
if
(
NS_WARN_IF
(
addingLengthOrError
.
isErr
(
)
)
)
{
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Error
(
"
NotifyContentAdded
:
failed
to
compute
text
length
of
added
nodes
"
"
(
aFirstContent
=
%
s
aLastContent
=
%
s
)
"
ToString
(
RefPtr
<
nsINode
>
(
aFirstContent
)
)
.
c_str
(
)
ToString
(
RefPtr
<
nsINode
>
(
aLastContent
)
)
.
c_str
(
)
)
)
;
return
;
}
mEndOfAddedTextCache
.
CacheFlatTextLengthBeforeEndOfContent
(
__FUNCTION__
*
aLastContent
*
offset
+
addingLengthOrError
.
inspect
(
)
mRootElement
)
;
if
(
!
addingLengthOrError
.
inspect
(
)
)
{
return
;
}
TextChangeData
data
(
*
offset
*
offset
*
offset
+
addingLengthOrError
.
inspect
(
)
IsEditorHandlingEventForComposition
(
)
IsEditorComposing
(
)
)
;
MaybeNotifyIMEOfTextChange
(
data
)
;
}
void
IMEContentObserver
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
nsIContent
*
parent
=
aFirstNewContent
-
>
GetParent
(
)
;
MOZ_ASSERT
(
parent
)
;
NotifyContentAdded
(
parent
aFirstNewContent
parent
-
>
GetLastChild
(
)
)
;
}
void
IMEContentObserver
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
MOZ_ASSERT
(
aChild
)
;
NotifyContentAdded
(
aChild
-
>
GetParentNode
(
)
aChild
aChild
)
;
}
void
IMEContentObserver
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
if
(
!
NeedsTextChangeNotification
(
)
|
|
!
nsContentUtils
:
:
IsInSameAnonymousTree
(
mRootElement
aChild
)
)
{
return
;
}
if
(
HasAddedNodesDuringDocumentChange
(
)
)
{
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
__FUNCTION__
)
;
}
nsINode
*
containerNode
=
aChild
-
>
GetParentNode
(
)
;
MOZ_ASSERT
(
containerNode
)
;
Result
<
uint32_t
nsresult
>
textLengthOrError
=
FlatTextCache
:
:
ComputeTextLengthOfContent
(
*
aChild
mRootElement
)
;
if
(
NS_WARN_IF
(
textLengthOrError
.
isErr
(
)
)
)
{
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
return
;
}
mEndOfAddedTextCache
.
ContentRemoved
(
*
aChild
aPreviousSibling
textLengthOrError
.
inspect
(
)
mRootElement
)
;
Maybe
<
uint32_t
>
offset
=
mStartOfRemovingTextRangeCache
.
GetFlatTextLengthBeforeContent
(
*
aChild
aPreviousSibling
mRootElement
)
;
if
(
offset
.
isSome
(
)
)
{
if
(
aPreviousSibling
)
{
mStartOfRemovingTextRangeCache
.
CacheFlatTextLengthBeforeEndOfContent
(
__FUNCTION__
*
aPreviousSibling
*
offset
mRootElement
)
;
}
else
{
mStartOfRemovingTextRangeCache
.
CacheFlatTextLengthBeforeFirstContent
(
__FUNCTION__
*
containerNode
*
offset
mRootElement
)
;
}
}
else
{
if
(
aPreviousSibling
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
mStartOfRemovingTextRangeCache
.
ComputeAndCacheFlatTextLengthBeforeEndOfContent
(
__FUNCTION__
*
aPreviousSibling
mRootElement
)
)
)
)
{
return
;
}
}
else
{
if
(
NS_WARN_IF
(
NS_FAILED
(
mStartOfRemovingTextRangeCache
.
ComputeAndCacheFlatTextLengthBeforeFirstContent
(
__FUNCTION__
*
containerNode
mRootElement
)
)
)
)
{
return
;
}
}
offset
=
Some
(
mStartOfRemovingTextRangeCache
.
GetFlatTextLength
(
)
)
;
}
if
(
textLengthOrError
.
inspect
(
)
=
=
0u
)
{
return
;
}
TextChangeData
data
(
*
offset
*
offset
+
textLengthOrError
.
inspect
(
)
*
offset
IsEditorHandlingEventForComposition
(
)
IsEditorComposing
(
)
)
;
MaybeNotifyIMEOfTextChange
(
data
)
;
}
void
IMEContentObserver
:
:
ClearAddedNodesDuringDocumentChange
(
)
{
mFirstAddedContainer
=
mLastAddedContainer
=
nullptr
;
mFirstAddedContent
=
mLastAddedContent
=
nullptr
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
ClearAddedNodesDuringDocumentChange
(
)
finished
storing
"
"
consecutive
nodes
"
this
)
)
;
}
bool
IMEContentObserver
:
:
IsNextNodeOfLastAddedNode
(
nsINode
*
aParent
nsIContent
*
aChild
)
const
{
MOZ_ASSERT
(
aParent
)
;
MOZ_ASSERT
(
aChild
&
&
aChild
-
>
GetParentNode
(
)
=
=
aParent
)
;
MOZ_ASSERT
(
mRootElement
)
;
MOZ_ASSERT
(
HasAddedNodesDuringDocumentChange
(
)
)
;
if
(
aParent
=
=
mLastAddedContainer
)
{
return
!
NS_WARN_IF
(
mLastAddedContent
-
>
GetNextSibling
(
)
!
=
aChild
)
;
}
if
(
NS_WARN_IF
(
mLastAddedContent
-
>
GetNextSibling
(
)
)
)
{
return
false
;
}
if
(
mLastAddedContainer
=
=
aParent
-
>
GetParent
(
)
)
{
return
!
NS_WARN_IF
(
aChild
-
>
GetPreviousSibling
(
)
)
;
}
nsIContent
*
nextContentOfLastAddedContent
=
mLastAddedContent
-
>
GetNextNode
(
mRootElement
-
>
GetParentNode
(
)
)
;
if
(
NS_WARN_IF
(
!
nextContentOfLastAddedContent
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
nextContentOfLastAddedContent
!
=
aChild
)
)
{
return
false
;
}
return
true
;
}
void
IMEContentObserver
:
:
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
const
char
*
aCallerName
)
{
MOZ_ASSERT
(
HasAddedNodesDuringDocumentChange
(
)
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
"
"
IMEContentObserver
:
:
MaybeNotifyIMEOfAddedTextDuringDocumentChange
(
)
"
"
flushing
stored
consecutive
nodes
"
this
)
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
:
called
"
"
by
%
s
(
mFirstAddedContent
=
%
s
mLastAddedContent
=
%
s
)
"
aCallerName
ToString
(
mFirstAddedContent
)
.
c_str
(
)
ToString
(
mLastAddedContent
)
.
c_str
(
)
)
)
;
Result
<
uint32_t
nsresult
>
offsetOrError
=
FlatTextCache
:
:
ComputeTextLengthBeforeContent
(
*
mFirstAddedContent
mRootElement
)
;
if
(
NS_WARN_IF
(
offsetOrError
.
isErr
(
)
)
)
{
ClearAddedNodesDuringDocumentChange
(
)
;
return
;
}
Result
<
uint32_t
nsresult
>
lengthOrError
=
FlatTextCache
:
:
ComputeTextLengthStartOfContentToEndOfContent
(
*
mFirstAddedContent
*
mLastAddedContent
mRootElement
)
;
if
(
NS_WARN_IF
(
lengthOrError
.
isErr
(
)
)
)
{
ClearAddedNodesDuringDocumentChange
(
)
;
return
;
}
TextChangeData
data
(
offsetOrError
.
inspect
(
)
offsetOrError
.
inspect
(
)
offsetOrError
.
inspect
(
)
+
lengthOrError
.
inspect
(
)
IsEditorHandlingEventForComposition
(
)
IsEditorComposing
(
)
)
;
MaybeNotifyIMEOfTextChange
(
data
)
;
ClearAddedNodesDuringDocumentChange
(
)
;
}
void
IMEContentObserver
:
:
OnTextControlValueChangedWhileNotObservable
(
const
nsAString
&
aNewValue
)
{
MOZ_ASSERT
(
mEditorBase
)
;
MOZ_ASSERT
(
mEditorBase
-
>
IsTextEditor
(
)
)
;
if
(
!
mTextControlValueLength
&
&
aNewValue
.
IsEmpty
(
)
)
{
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
OnTextControlValueChangedWhileNotObservable
(
)
"
this
)
)
;
uint32_t
newLength
=
ContentEventHandler
:
:
GetNativeTextLength
(
aNewValue
)
;
TextChangeData
data
(
0
mTextControlValueLength
newLength
false
false
)
;
MaybeNotifyIMEOfTextChange
(
data
)
;
}
void
IMEContentObserver
:
:
BeginDocumentUpdate
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
BeginDocumentUpdate
(
)
HasAddedNodesDuringDocumentChange
(
)
=
%
s
"
this
ToChar
(
HasAddedNodesDuringDocumentChange
(
)
)
)
)
;
if
(
HasAddedNodesDuringDocumentChange
(
)
)
{
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
__FUNCTION__
)
;
}
}
void
IMEContentObserver
:
:
EndDocumentUpdate
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
EndDocumentUpdate
(
)
HasAddedNodesDuringDocumentChange
(
)
=
%
s
"
this
ToChar
(
HasAddedNodesDuringDocumentChange
(
)
)
)
)
;
if
(
HasAddedNodesDuringDocumentChange
(
)
)
{
NotifyIMEOfAddedContentTextLengthDuringDocumentChange
(
__FUNCTION__
)
;
}
}
void
IMEContentObserver
:
:
SuppressNotifyingIME
(
)
{
mSuppressNotifications
+
+
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
SuppressNotifyingIME
(
)
mSuppressNotifications
=
%
u
"
this
mSuppressNotifications
)
)
;
}
void
IMEContentObserver
:
:
UnsuppressNotifyingIME
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
UnsuppressNotifyingIME
(
)
mSuppressNotifications
=
%
u
"
this
mSuppressNotifications
)
)
;
if
(
!
mSuppressNotifications
|
|
-
-
mSuppressNotifications
)
{
return
;
}
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
OnEditActionHandled
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
EditAction
(
)
"
this
)
)
;
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
BeforeEditAction
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
BeforeEditAction
(
)
"
this
)
)
;
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
}
void
IMEContentObserver
:
:
CancelEditAction
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
CancelEditAction
(
)
"
this
)
)
;
mEndOfAddedTextCache
.
Clear
(
__FUNCTION__
)
;
mStartOfRemovingTextRangeCache
.
Clear
(
__FUNCTION__
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
PostFocusSetNotification
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
PostFocusSetNotification
(
)
"
this
)
)
;
mNeedsToNotifyIMEOfFocusSet
=
true
;
}
void
IMEContentObserver
:
:
PostTextChangeNotification
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
PostTextChangeNotification
(
mTextChangeData
=
%
s
)
"
this
ToString
(
mTextChangeData
)
.
c_str
(
)
)
)
;
MOZ_ASSERT
(
mTextChangeData
.
IsValid
(
)
"
mTextChangeData
must
have
text
change
data
"
)
;
mNeedsToNotifyIMEOfTextChange
=
true
;
mNeedsToNotifyIMEOfSelectionChange
=
true
;
}
void
IMEContentObserver
:
:
PostSelectionChangeNotification
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
PostSelectionChangeNotification
(
)
mSelectionData
=
{
"
"
mCausedByComposition
=
%
s
mCausedBySelectionEvent
=
%
s
}
"
this
ToChar
(
mSelectionData
.
mCausedByComposition
)
ToChar
(
mSelectionData
.
mCausedBySelectionEvent
)
)
)
;
mNeedsToNotifyIMEOfSelectionChange
=
true
;
}
void
IMEContentObserver
:
:
MaybeNotifyIMEOfFocusSet
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
MaybeNotifyIMEOfFocusSet
(
)
"
this
)
)
;
PostFocusSetNotification
(
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
MaybeNotifyIMEOfTextChange
(
const
TextChangeDataBase
&
aTextChangeData
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
MaybeNotifyIMEOfTextChange
(
aTextChangeData
=
%
s
)
"
this
ToString
(
aTextChangeData
)
.
c_str
(
)
)
)
;
if
(
mEditorBase
&
&
mEditorBase
-
>
IsTextEditor
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
static_cast
<
int64_t
>
(
mTextControlValueLength
)
+
aTextChangeData
.
Difference
(
)
>
=
0
)
;
mTextControlValueLength
+
=
aTextChangeData
.
Difference
(
)
;
}
mTextChangeData
+
=
aTextChangeData
;
PostTextChangeNotification
(
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
CancelNotifyingIMEOfTextChange
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
CancelNotifyingIMEOfTextChange
(
)
"
this
)
)
;
mTextChangeData
.
Clear
(
)
;
mNeedsToNotifyIMEOfTextChange
=
false
;
}
void
IMEContentObserver
:
:
MaybeNotifyIMEOfSelectionChange
(
bool
aCausedByComposition
bool
aCausedBySelectionEvent
bool
aOccurredDuringComposition
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
MaybeNotifyIMEOfSelectionChange
(
aCausedByComposition
=
%
s
"
"
aCausedBySelectionEvent
=
%
s
aOccurredDuringComposition
)
"
this
ToChar
(
aCausedByComposition
)
ToChar
(
aCausedBySelectionEvent
)
)
)
;
mSelectionData
.
AssignReason
(
aCausedByComposition
aCausedBySelectionEvent
aOccurredDuringComposition
)
;
PostSelectionChangeNotification
(
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
MaybeNotifyIMEOfPositionChange
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Verbose
(
"
0x
%
p
MaybeNotifyIMEOfPositionChange
(
)
"
this
)
)
;
if
(
mIsHandlingQueryContentEvent
&
&
mSendingNotification
=
=
NOTIFY_IME_OF_POSITION_CHANGE
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Verbose
(
"
0x
%
p
MaybeNotifyIMEOfPositionChange
(
)
ignored
since
caused
by
"
"
ContentEventHandler
during
sending
NOTIFY_IME_OF_POSITION_CHANGE
"
this
)
)
;
return
;
}
PostPositionChangeNotification
(
)
;
FlushMergeableNotifications
(
)
;
}
void
IMEContentObserver
:
:
CancelNotifyingIMEOfPositionChange
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
CancelNotifyIMEOfPositionChange
(
)
"
this
)
)
;
mNeedsToNotifyIMEOfPositionChange
=
false
;
}
void
IMEContentObserver
:
:
MaybeNotifyCompositionEventHandled
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
MaybeNotifyCompositionEventHandled
(
)
"
this
)
)
;
PostCompositionEventHandledNotification
(
)
;
FlushMergeableNotifications
(
)
;
}
bool
IMEContentObserver
:
:
UpdateSelectionCache
(
bool
aRequireFlush
)
{
MOZ_ASSERT
(
IsSafeToNotifyIME
(
)
)
;
mSelectionData
.
ClearSelectionData
(
)
;
WidgetQueryContentEvent
querySelectedTextEvent
(
true
eQuerySelectedText
mWidget
)
;
querySelectedTextEvent
.
mNeedsToFlushLayout
=
aRequireFlush
;
ContentEventHandler
handler
(
GetPresContext
(
)
)
;
handler
.
OnQuerySelectedText
(
&
querySelectedTextEvent
)
;
if
(
NS_WARN_IF
(
querySelectedTextEvent
.
Failed
(
)
)
|
|
NS_WARN_IF
(
querySelectedTextEvent
.
mReply
-
>
mContentsRoot
!
=
mRootElement
)
)
{
return
false
;
}
mFocusedWidget
=
querySelectedTextEvent
.
mReply
-
>
mFocusedWidget
;
mSelectionData
.
Assign
(
querySelectedTextEvent
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
UpdateSelectionCache
(
)
mSelectionData
=
%
s
"
this
ToString
(
mSelectionData
)
.
c_str
(
)
)
)
;
return
true
;
}
void
IMEContentObserver
:
:
PostPositionChangeNotification
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
PostPositionChangeNotification
(
)
"
this
)
)
;
mNeedsToNotifyIMEOfPositionChange
=
true
;
}
void
IMEContentObserver
:
:
PostCompositionEventHandledNotification
(
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
PostCompositionEventHandledNotification
(
)
"
this
)
)
;
mNeedsToNotifyIMEOfCompositionEventHandled
=
true
;
}
bool
IMEContentObserver
:
:
IsReflowLocked
(
)
const
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
false
;
}
PresShell
*
presShell
=
presContext
-
>
GetPresShell
(
)
;
if
(
NS_WARN_IF
(
!
presShell
)
)
{
return
false
;
}
return
presShell
-
>
IsReflowLocked
(
)
;
}
bool
IMEContentObserver
:
:
IsSafeToNotifyIME
(
)
const
{
if
(
!
mWidget
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IsSafeToNotifyIME
(
)
it
'
s
not
safe
because
of
no
widget
"
this
)
)
;
return
false
;
}
if
(
mSuppressNotifications
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IsSafeToNotifyIME
(
)
it
'
s
not
safe
because
of
no
widget
"
this
)
)
;
return
false
;
}
if
(
!
mESM
|
|
NS_WARN_IF
(
!
GetPresContext
(
)
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IsSafeToNotifyIME
(
)
it
'
s
not
safe
because
of
no
"
"
EventStateManager
and
/
or
PresContext
"
this
)
)
;
return
false
;
}
if
(
IsReflowLocked
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IsSafeToNotifyIME
(
)
it
'
s
not
safe
because
of
reflow
locked
"
this
)
)
;
return
false
;
}
if
(
mEditorBase
&
&
mEditorBase
-
>
IsInEditSubAction
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IsSafeToNotifyIME
(
)
it
'
s
not
safe
because
of
focused
"
"
editor
handling
somethings
"
this
)
)
;
return
false
;
}
return
true
;
}
void
IMEContentObserver
:
:
FlushMergeableNotifications
(
)
{
if
(
!
IsSafeToNotifyIME
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
FlushMergeableNotifications
(
)
Warning
do
nothing
due
to
"
"
unsafe
to
notify
IME
"
this
)
)
;
return
;
}
if
(
mQueuedSender
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
FlushMergeableNotifications
(
)
Warning
do
nothing
due
to
"
"
already
flushing
pending
notifications
"
this
)
)
;
return
;
}
if
(
mNeedsToNotifyIMEOfTextChange
&
&
!
NeedsTextChangeNotification
(
)
)
{
CancelNotifyingIMEOfTextChange
(
)
;
}
if
(
mNeedsToNotifyIMEOfPositionChange
&
&
!
NeedsPositionChangeNotification
(
)
)
{
CancelNotifyingIMEOfPositionChange
(
)
;
}
if
(
!
NeedsToNotifyIMEOfSomething
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
FlushMergeableNotifications
(
)
Warning
due
to
no
pending
"
"
notifications
"
this
)
)
;
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
FlushMergeableNotifications
(
)
creating
IMENotificationSender
.
.
.
"
this
)
)
;
mQueuedSender
=
new
IMENotificationSender
(
this
)
;
mQueuedSender
-
>
Dispatch
(
mDocShell
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
FlushMergeableNotifications
(
)
finished
"
this
)
)
;
}
void
IMEContentObserver
:
:
TryToFlushPendingNotifications
(
bool
aAllowAsync
)
{
if
(
mSendingNotification
!
=
NOTIFY_IME_OF_NOTHING
)
{
return
;
}
if
(
mQueuedSender
&
&
XRE_IsContentProcess
(
)
&
&
aAllowAsync
)
{
return
;
}
if
(
!
mQueuedSender
)
{
if
(
!
NeedsToNotifyIMEOfSomething
(
)
)
{
return
;
}
mQueuedSender
=
new
IMENotificationSender
(
this
)
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
TryToFlushPendingNotifications
(
)
performing
queued
"
"
IMENotificationSender
forcibly
"
this
)
)
;
RefPtr
<
IMENotificationSender
>
queuedSender
=
mQueuedSender
;
queuedSender
-
>
Run
(
)
;
}
bool
IMEContentObserver
:
:
AChangeEvent
:
:
CanNotifyIME
(
ChangeEventType
aChangeEventType
)
const
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
NS_WARN_IF
(
!
observer
)
)
{
return
false
;
}
const
LogLevel
debugOrVerbose
=
aChangeEventType
=
=
ChangeEventType
:
:
eChangeEventType_Position
?
LogLevel
:
:
Verbose
:
LogLevel
:
:
Debug
;
if
(
aChangeEventType
=
=
eChangeEventType_CompositionEventHandled
)
{
if
(
observer
-
>
mWidget
)
{
return
true
;
}
MOZ_LOG
(
sIMECOLog
debugOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
CanNotifyIME
(
)
Cannot
notify
IME
of
"
"
composition
event
handled
because
of
no
widget
"
this
)
)
;
return
false
;
}
State
state
=
observer
-
>
GetState
(
)
;
if
(
state
=
=
eState_NotObserving
)
{
MOZ_LOG
(
sIMECOLog
debugOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
CanNotifyIME
(
)
Cannot
notify
IME
because
"
"
of
not
observing
"
this
)
)
;
return
false
;
}
if
(
aChangeEventType
=
=
eChangeEventType_Focus
)
{
if
(
!
observer
-
>
mIMEHasFocus
)
{
return
true
;
}
MOZ_LOG
(
sIMECOLog
debugOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
CanNotifyIME
(
)
Cannot
notify
IME
of
focus
"
"
change
because
of
already
focused
"
this
)
)
;
NS_WARNING
(
"
IME
already
has
focus
"
)
;
return
false
;
}
if
(
!
observer
-
>
mIMEHasFocus
)
{
MOZ_LOG
(
sIMECOLog
debugOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
CanNotifyIME
(
)
Cannot
notify
IME
because
"
"
of
not
focused
"
this
)
)
;
return
false
;
}
MOZ_ASSERT
(
observer
-
>
mWidget
)
;
return
true
;
}
bool
IMEContentObserver
:
:
AChangeEvent
:
:
IsSafeToNotifyIME
(
ChangeEventType
aChangeEventType
)
const
{
const
LogLevel
warningOrVerbose
=
aChangeEventType
=
=
ChangeEventType
:
:
eChangeEventType_Position
?
LogLevel
:
:
Verbose
:
LogLevel
:
:
Warning
;
if
(
NS_WARN_IF
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
)
{
MOZ_LOG
(
sIMECOLog
warningOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
IsSafeToNotifyIME
(
)
Warning
Cannot
notify
"
"
IME
because
of
not
safe
to
run
script
"
this
)
)
;
return
false
;
}
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
MOZ_LOG
(
sIMECOLog
warningOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
IsSafeToNotifyIME
(
)
Warning
Cannot
notify
"
"
IME
because
of
no
observer
"
this
)
)
;
return
false
;
}
if
(
observer
-
>
mSendingNotification
!
=
NOTIFY_IME_OF_NOTHING
)
{
MOZ_LOG
(
sIMECOLog
warningOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
IsSafeToNotifyIME
(
)
Warning
Cannot
notify
"
"
IME
because
of
the
observer
sending
another
notification
"
this
)
)
;
return
false
;
}
State
state
=
observer
-
>
GetState
(
)
;
if
(
aChangeEventType
=
=
eChangeEventType_Focus
)
{
if
(
NS_WARN_IF
(
state
!
=
eState_Initializing
&
&
state
!
=
eState_Observing
)
)
{
MOZ_LOG
(
sIMECOLog
warningOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
IsSafeToNotifyIME
(
)
Warning
Cannot
"
"
notify
IME
of
focus
because
of
not
observing
"
this
)
)
;
return
false
;
}
}
else
if
(
aChangeEventType
=
=
eChangeEventType_CompositionEventHandled
)
{
}
else
if
(
state
!
=
eState_Observing
)
{
MOZ_LOG
(
sIMECOLog
warningOrVerbose
(
"
0x
%
p
AChangeEvent
:
:
IsSafeToNotifyIME
(
)
Warning
Cannot
notify
"
"
IME
because
of
not
observing
"
this
)
)
;
return
false
;
}
return
observer
-
>
IsSafeToNotifyIME
(
)
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
Dispatch
(
nsIDocShell
*
aDocShell
)
{
if
(
XRE_IsContentProcess
(
)
&
&
aDocShell
)
{
if
(
RefPtr
<
nsPresContext
>
presContext
=
aDocShell
-
>
GetPresContext
(
)
)
{
if
(
nsRefreshDriver
*
refreshDriver
=
presContext
-
>
RefreshDriver
(
)
)
{
refreshDriver
-
>
AddEarlyRunner
(
this
)
;
return
;
}
}
}
NS_DispatchToCurrentThread
(
this
)
;
}
NS_IMETHODIMP
IMEContentObserver
:
:
IMENotificationSender
:
:
Run
(
)
{
if
(
NS_WARN_IF
(
mIsRunning
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Error
(
"
0x
%
p
IMENotificationSender
:
:
Run
(
)
FAILED
due
to
called
recursively
"
this
)
)
;
return
NS_OK
;
}
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
NS_OK
;
}
AutoRestore
<
bool
>
running
(
mIsRunning
)
;
mIsRunning
=
true
;
if
(
observer
-
>
mQueuedSender
!
=
this
)
{
return
NS_OK
;
}
if
(
observer
-
>
mNeedsToNotifyIMEOfFocusSet
)
{
observer
-
>
mNeedsToNotifyIMEOfFocusSet
=
false
;
SendFocusSet
(
)
;
observer
-
>
mQueuedSender
=
nullptr
;
if
(
observer
-
>
mNeedsToNotifyIMEOfFocusSet
)
{
MOZ_ASSERT
(
!
observer
-
>
mIMEHasFocus
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
Run
(
)
posting
"
"
IMENotificationSender
to
current
thread
"
this
)
)
;
observer
-
>
mQueuedSender
=
new
IMENotificationSender
(
observer
)
;
observer
-
>
mQueuedSender
-
>
Dispatch
(
observer
-
>
mDocShell
)
;
return
NS_OK
;
}
observer
-
>
ClearPendingNotifications
(
)
;
return
NS_OK
;
}
if
(
observer
-
>
mNeedsToNotifyIMEOfTextChange
)
{
observer
-
>
mNeedsToNotifyIMEOfTextChange
=
false
;
SendTextChange
(
)
;
}
if
(
!
observer
-
>
mNeedsToNotifyIMEOfTextChange
)
{
if
(
observer
-
>
mNeedsToNotifyIMEOfSelectionChange
)
{
observer
-
>
mNeedsToNotifyIMEOfSelectionChange
=
false
;
SendSelectionChange
(
)
;
}
}
if
(
!
observer
-
>
mNeedsToNotifyIMEOfTextChange
&
&
!
observer
-
>
mNeedsToNotifyIMEOfSelectionChange
)
{
if
(
observer
-
>
mNeedsToNotifyIMEOfPositionChange
)
{
observer
-
>
mNeedsToNotifyIMEOfPositionChange
=
false
;
SendPositionChange
(
)
;
}
}
if
(
!
observer
-
>
mNeedsToNotifyIMEOfTextChange
&
&
!
observer
-
>
mNeedsToNotifyIMEOfSelectionChange
&
&
!
observer
-
>
mNeedsToNotifyIMEOfPositionChange
)
{
if
(
observer
-
>
mNeedsToNotifyIMEOfCompositionEventHandled
)
{
observer
-
>
mNeedsToNotifyIMEOfCompositionEventHandled
=
false
;
SendCompositionEventHandled
(
)
;
}
}
observer
-
>
mQueuedSender
=
nullptr
;
if
(
observer
-
>
NeedsToNotifyIMEOfSomething
(
)
)
{
if
(
observer
-
>
GetState
(
)
=
=
eState_StoppedObserving
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
Run
(
)
waiting
"
"
IMENotificationSender
to
be
reinitialized
"
this
)
)
;
}
else
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
Run
(
)
posting
"
"
IMENotificationSender
to
current
thread
"
this
)
)
;
observer
-
>
mQueuedSender
=
new
IMENotificationSender
(
observer
)
;
observer
-
>
mQueuedSender
-
>
Dispatch
(
observer
-
>
mDocShell
)
;
}
}
return
NS_OK
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
SendFocusSet
(
)
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_Focus
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendFocusSet
(
)
Warning
does
not
"
"
send
notification
due
to
impossible
to
notify
IME
of
focus
"
this
)
)
;
observer
-
>
ClearPendingNotifications
(
)
;
return
;
}
if
(
!
IsSafeToNotifyIME
(
eChangeEventType_Focus
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendFocusSet
(
)
Warning
does
not
send
"
"
notification
due
to
unsafe
retrying
to
send
NOTIFY_IME_OF_FOCUS
.
.
.
"
this
)
)
;
observer
-
>
PostFocusSetNotification
(
)
;
return
;
}
observer
-
>
mIMEHasFocus
=
true
;
#
ifdef
XP_MACOSX
observer
-
>
UpdateSelectionCache
(
true
)
;
#
else
observer
-
>
UpdateSelectionCache
(
false
)
;
#
endif
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
IMENotificationSender
:
:
SendFocusSet
(
)
sending
"
"
NOTIFY_IME_OF_FOCUS
.
.
.
"
this
)
)
;
MOZ_RELEASE_ASSERT
(
observer
-
>
mSendingNotification
=
=
NOTIFY_IME_OF_NOTHING
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_FOCUS
;
IMEStateManager
:
:
NotifyIME
(
IMENotification
(
NOTIFY_IME_OF_FOCUS
)
observer
-
>
mWidget
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_NOTHING
;
observer
-
>
OnIMEReceivedFocus
(
)
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendFocusSet
(
)
sent
NOTIFY_IME_OF_FOCUS
"
this
)
)
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
SendSelectionChange
(
)
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_Selection
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
Warning
"
"
does
not
send
notification
due
to
impossible
to
notify
IME
of
"
"
selection
change
"
this
)
)
;
return
;
}
if
(
!
IsSafeToNotifyIME
(
eChangeEventType_Selection
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
Warning
"
"
does
not
send
notification
due
to
unsafe
retrying
to
send
"
"
NOTIFY_IME_OF_SELECTION_CHANGE
.
.
.
"
this
)
)
;
observer
-
>
PostSelectionChangeNotification
(
)
;
return
;
}
SelectionChangeData
lastSelChangeData
=
observer
-
>
mSelectionData
;
if
(
NS_WARN_IF
(
!
observer
-
>
UpdateSelectionCache
(
)
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Error
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
FAILED
due
"
"
to
UpdateSelectionCache
(
)
failure
"
this
)
)
;
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_Selection
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Error
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
FAILED
due
"
"
to
flushing
layout
having
changed
something
"
this
)
)
;
return
;
}
SelectionChangeData
&
newSelChangeData
=
observer
-
>
mSelectionData
;
if
(
lastSelChangeData
.
IsInitialized
(
)
&
&
lastSelChangeData
.
EqualsRangeAndDirectionAndWritingMode
(
newSelChangeData
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
not
notifying
IME
"
"
of
NOTIFY_IME_OF_SELECTION_CHANGE
due
to
not
changed
actually
"
this
)
)
;
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
sending
"
"
NOTIFY_IME_OF_SELECTION_CHANGE
.
.
.
newSelChangeData
=
%
s
"
this
ToString
(
newSelChangeData
)
.
c_str
(
)
)
)
;
IMENotification
notification
(
NOTIFY_IME_OF_SELECTION_CHANGE
)
;
notification
.
SetData
(
observer
-
>
mSelectionData
)
;
MOZ_RELEASE_ASSERT
(
observer
-
>
mSendingNotification
=
=
NOTIFY_IME_OF_NOTHING
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_SELECTION_CHANGE
;
IMEStateManager
:
:
NotifyIME
(
notification
observer
-
>
mWidget
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_NOTHING
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendSelectionChange
(
)
sent
"
"
NOTIFY_IME_OF_SELECTION_CHANGE
"
this
)
)
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
SendTextChange
(
)
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_Text
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendTextChange
(
)
Warning
does
not
"
"
send
notification
due
to
impossible
to
notify
IME
of
text
change
"
this
)
)
;
return
;
}
if
(
!
IsSafeToNotifyIME
(
eChangeEventType_Text
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendTextChange
(
)
Warning
does
"
"
not
send
notification
due
to
unsafe
retrying
to
send
"
"
NOTIFY_IME_OF_TEXT_CHANGE
.
.
.
"
this
)
)
;
observer
-
>
PostTextChangeNotification
(
)
;
return
;
}
if
(
!
observer
-
>
NeedsTextChangeNotification
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendTextChange
(
)
Warning
"
"
canceling
sending
NOTIFY_IME_OF_TEXT_CHANGE
"
this
)
)
;
observer
-
>
CancelNotifyingIMEOfTextChange
(
)
;
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
IMENotificationSender
:
:
SendTextChange
(
)
sending
"
"
NOTIFY_IME_OF_TEXT_CHANGE
.
.
.
mIMEContentObserver
=
{
"
"
mTextChangeData
=
%
s
}
"
this
ToString
(
observer
-
>
mTextChangeData
)
.
c_str
(
)
)
)
;
IMENotification
notification
(
NOTIFY_IME_OF_TEXT_CHANGE
)
;
notification
.
SetData
(
observer
-
>
mTextChangeData
)
;
observer
-
>
mTextChangeData
.
Clear
(
)
;
MOZ_RELEASE_ASSERT
(
observer
-
>
mSendingNotification
=
=
NOTIFY_IME_OF_NOTHING
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_TEXT_CHANGE
;
IMEStateManager
:
:
NotifyIME
(
notification
observer
-
>
mWidget
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_NOTHING
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendTextChange
(
)
sent
"
"
NOTIFY_IME_OF_TEXT_CHANGE
"
this
)
)
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
SendPositionChange
(
)
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_Position
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Verbose
(
"
0x
%
p
IMENotificationSender
:
:
SendPositionChange
(
)
Warning
"
"
does
not
send
notification
due
to
impossible
to
notify
IME
of
"
"
position
change
"
this
)
)
;
return
;
}
if
(
!
IsSafeToNotifyIME
(
eChangeEventType_Position
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Verbose
(
"
0x
%
p
IMENotificationSender
:
:
SendPositionChange
(
)
Warning
"
"
does
not
send
notification
due
to
unsafe
retrying
to
send
"
"
NOTIFY_IME_OF_POSITION_CHANGE
.
.
.
"
this
)
)
;
observer
-
>
PostPositionChangeNotification
(
)
;
return
;
}
if
(
!
observer
-
>
NeedsPositionChangeNotification
(
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Verbose
(
"
0x
%
p
IMENotificationSender
:
:
SendPositionChange
(
)
Warning
"
"
canceling
sending
NOTIFY_IME_OF_POSITION_CHANGE
"
this
)
)
;
observer
-
>
CancelNotifyingIMEOfPositionChange
(
)
;
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
IMENotificationSender
:
:
SendPositionChange
(
)
sending
"
"
NOTIFY_IME_OF_POSITION_CHANGE
.
.
.
"
this
)
)
;
MOZ_RELEASE_ASSERT
(
observer
-
>
mSendingNotification
=
=
NOTIFY_IME_OF_NOTHING
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_POSITION_CHANGE
;
IMEStateManager
:
:
NotifyIME
(
IMENotification
(
NOTIFY_IME_OF_POSITION_CHANGE
)
observer
-
>
mWidget
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_NOTHING
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendPositionChange
(
)
sent
"
"
NOTIFY_IME_OF_POSITION_CHANGE
"
this
)
)
;
}
void
IMEContentObserver
:
:
IMENotificationSender
:
:
SendCompositionEventHandled
(
)
{
RefPtr
<
IMEContentObserver
>
observer
=
GetObserver
(
)
;
if
(
!
observer
)
{
return
;
}
if
(
!
CanNotifyIME
(
eChangeEventType_CompositionEventHandled
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendCompositionEventHandled
(
)
"
"
Warning
does
not
send
notification
due
to
impossible
to
notify
"
"
IME
of
composition
event
handled
"
this
)
)
;
return
;
}
if
(
!
IsSafeToNotifyIME
(
eChangeEventType_CompositionEventHandled
)
)
{
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Warning
(
"
0x
%
p
IMENotificationSender
:
:
SendCompositionEventHandled
(
)
"
"
Warning
does
not
send
notification
due
to
unsafe
retrying
to
"
"
send
NOTIFY_IME_OF_POSITION_CHANGE
.
.
.
"
this
)
)
;
observer
-
>
PostCompositionEventHandledNotification
(
)
;
return
;
}
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Info
(
"
0x
%
p
IMENotificationSender
:
:
SendCompositionEventHandled
(
)
sending
"
"
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
.
.
.
"
this
)
)
;
MOZ_RELEASE_ASSERT
(
observer
-
>
mSendingNotification
=
=
NOTIFY_IME_OF_NOTHING
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
;
IMEStateManager
:
:
NotifyIME
(
IMENotification
(
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
)
observer
-
>
mWidget
)
;
observer
-
>
mSendingNotification
=
NOTIFY_IME_OF_NOTHING
;
MOZ_LOG
(
sIMECOLog
LogLevel
:
:
Debug
(
"
0x
%
p
IMENotificationSender
:
:
SendCompositionEventHandled
(
)
sent
"
"
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
"
this
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
IMEContentObserver
:
:
DocumentObserver
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
IMEContentObserver
:
:
DocumentObserver
)
tmp
-
>
StopObserving
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
IMEContentObserver
:
:
DocumentObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mIMEContentObserver
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
IMEContentObserver
:
:
DocumentObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIDocumentObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIMutationObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
IMEContentObserver
:
:
DocumentObserver
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
IMEContentObserver
:
:
DocumentObserver
)
void
IMEContentObserver
:
:
DocumentObserver
:
:
Observe
(
Document
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
RefPtr
<
Document
>
newDocument
=
aDocument
;
StopObserving
(
)
;
mDocument
=
std
:
:
move
(
newDocument
)
;
mDocument
-
>
AddObserver
(
this
)
;
}
void
IMEContentObserver
:
:
DocumentObserver
:
:
StopObserving
(
)
{
if
(
!
IsObserving
(
)
)
{
return
;
}
RefPtr
<
IMEContentObserver
>
observer
=
std
:
:
move
(
mIMEContentObserver
)
;
RefPtr
<
Document
>
document
=
std
:
:
move
(
mDocument
)
;
document
-
>
RemoveObserver
(
this
)
;
for
(
;
IsUpdating
(
)
;
-
-
mDocumentUpdating
)
{
observer
-
>
EndDocumentUpdate
(
)
;
}
}
void
IMEContentObserver
:
:
DocumentObserver
:
:
Destroy
(
)
{
StopObserving
(
)
;
mIMEContentObserver
=
nullptr
;
}
void
IMEContentObserver
:
:
DocumentObserver
:
:
BeginUpdate
(
Document
*
aDocument
)
{
if
(
NS_WARN_IF
(
Destroyed
(
)
)
|
|
NS_WARN_IF
(
!
IsObserving
(
)
)
)
{
return
;
}
mDocumentUpdating
+
+
;
mIMEContentObserver
-
>
BeginDocumentUpdate
(
)
;
}
void
IMEContentObserver
:
:
DocumentObserver
:
:
EndUpdate
(
Document
*
aDocument
)
{
if
(
NS_WARN_IF
(
Destroyed
(
)
)
|
|
NS_WARN_IF
(
!
IsObserving
(
)
)
|
|
NS_WARN_IF
(
!
IsUpdating
(
)
)
)
{
return
;
}
mDocumentUpdating
-
-
;
mIMEContentObserver
-
>
EndDocumentUpdate
(
)
;
}
void
IMEContentObserver
:
:
FlatTextCache
:
:
Clear
(
const
char
*
aCallerName
)
{
if
(
!
HasCache
(
)
)
{
return
;
}
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
%
s
.
Clear
:
called
by
%
s
"
mInstanceName
aCallerName
)
)
;
mContainerNode
=
nullptr
;
mContent
=
nullptr
;
mFlatTextLength
=
0
;
}
nsresult
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeAndCacheFlatTextLengthBeforeEndOfContent
(
const
char
*
aCallerName
const
nsIContent
&
aContent
const
Element
*
aRootElement
)
{
MOZ_ASSERT
(
aRootElement
)
;
MOZ_ASSERT
(
aContent
.
GetParentNode
(
)
)
;
uint32_t
length
=
0
;
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
BeforeFirstContentOf
(
*
aRootElement
)
RawNodePosition
:
:
After
(
aContent
)
aRootElement
&
length
LineBreakType
:
:
LINE_BREAK_TYPE_NATIVE
)
;
if
(
NS_FAILED
(
rv
)
)
{
Clear
(
aCallerName
)
;
return
rv
;
}
CacheFlatTextLengthBeforeEndOfContent
(
aCallerName
aContent
length
aRootElement
)
;
return
NS_OK
;
}
void
IMEContentObserver
:
:
FlatTextCache
:
:
CacheFlatTextLengthBeforeEndOfContent
(
const
char
*
aCallerName
const
nsIContent
&
aContent
uint32_t
aFlatTextLength
const
dom
:
:
Element
*
aRootElement
)
{
mContainerNode
=
aContent
.
GetParentNode
(
)
;
mContent
=
const_cast
<
nsIContent
*
>
(
&
aContent
)
;
mFlatTextLength
=
aFlatTextLength
;
MOZ_ASSERT
(
IsCachingToEndOfContent
(
)
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
%
s
.
%
s
:
called
by
%
s
-
>
%
s
"
mInstanceName
__FUNCTION__
aCallerName
ToString
(
*
this
)
.
c_str
(
)
)
)
;
AssertValidCache
(
aRootElement
)
;
}
nsresult
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeAndCacheFlatTextLengthBeforeFirstContent
(
const
char
*
aCallerName
const
nsINode
&
aContainer
const
Element
*
aRootElement
)
{
MOZ_ASSERT
(
aRootElement
)
;
const
Result
<
uint32_t
nsresult
>
lengthIncludingLineBreakCausedByOpenTagOfContainer
=
FlatTextCache
:
:
ComputeTextLengthBeforeFirstContentOf
(
aContainer
aRootElement
)
;
if
(
MOZ_UNLIKELY
(
lengthIncludingLineBreakCausedByOpenTagOfContainer
.
isErr
(
)
)
)
{
Clear
(
__FUNCTION__
)
;
return
lengthIncludingLineBreakCausedByOpenTagOfContainer
.
inspectErr
(
)
;
}
CacheFlatTextLengthBeforeFirstContent
(
aCallerName
aContainer
lengthIncludingLineBreakCausedByOpenTagOfContainer
.
inspect
(
)
aRootElement
)
;
return
NS_OK
;
}
void
IMEContentObserver
:
:
FlatTextCache
:
:
CacheFlatTextLengthBeforeFirstContent
(
const
char
*
aCallerName
const
nsINode
&
aContainer
uint32_t
aFlatTextLength
const
dom
:
:
Element
*
aRootElement
)
{
mContainerNode
=
const_cast
<
nsINode
*
>
(
&
aContainer
)
;
mContent
=
nullptr
;
mFlatTextLength
=
aFlatTextLength
;
MOZ_ASSERT
(
IsCachingToStartOfContainer
(
)
)
;
MOZ_LOG
(
sCacheLog
LogLevel
:
:
Info
(
"
%
s
.
%
s
:
called
by
%
s
-
>
%
s
"
mInstanceName
__FUNCTION__
aCallerName
ToString
(
*
this
)
.
c_str
(
)
)
)
;
AssertValidCache
(
aRootElement
)
;
}
Maybe
<
uint32_t
>
IMEContentObserver
:
:
FlatTextCache
:
:
GetFlatTextLengthBeforeContent
(
const
nsIContent
&
aContent
const
nsIContent
*
aPreviousSibling
const
dom
:
:
Element
*
aRootElement
)
const
{
MOZ_ASSERT
(
aRootElement
)
;
MOZ_ASSERT
(
aContent
.
IsBeingRemoved
(
)
)
;
if
(
!
mContainerNode
)
{
return
Nothing
(
)
;
}
if
(
IsCachingToStartOfContainer
(
)
)
{
MOZ_ASSERT
(
!
mContent
)
;
if
(
!
aPreviousSibling
&
&
mContainerNode
=
=
aContent
.
GetParentNode
(
)
)
{
return
Some
(
mFlatTextLength
)
;
}
return
Nothing
(
)
;
}
MOZ_ASSERT
(
IsCachingToEndOfContent
(
)
)
;
MOZ_ASSERT
(
mContent
)
;
if
(
mContent
=
=
aPreviousSibling
)
{
return
Some
(
mFlatTextLength
)
;
}
if
(
mContent
=
=
&
aContent
)
{
const
Result
<
uint32_t
nsresult
>
textLength
=
FlatTextCache
:
:
ComputeTextLengthOfContent
(
aContent
aRootElement
)
;
if
(
NS_WARN_IF
(
textLength
.
isErr
(
)
)
|
|
NS_WARN_IF
(
mFlatTextLength
<
textLength
.
inspect
(
)
)
)
{
return
Nothing
(
)
;
}
return
Some
(
mFlatTextLength
-
textLength
.
inspect
(
)
)
;
}
return
Nothing
(
)
;
}
Maybe
<
uint32_t
>
IMEContentObserver
:
:
FlatTextCache
:
:
GetFlatTextOffsetOnInsertion
(
const
nsIContent
&
aFirstContent
const
nsIContent
&
aLastContent
const
dom
:
:
Element
*
aRootElement
)
const
{
MOZ_ASSERT
(
aRootElement
)
;
MOZ_ASSERT
(
aFirstContent
.
GetParentNode
(
)
=
=
aLastContent
.
GetParentNode
(
)
)
;
MOZ_ASSERT
(
!
aFirstContent
.
IsBeingRemoved
(
)
)
;
MOZ_ASSERT
(
!
aLastContent
.
IsBeingRemoved
(
)
)
;
if
(
!
mContainerNode
|
|
mContainerNode
!
=
aFirstContent
.
GetParentNode
(
)
)
{
return
Nothing
(
)
;
}
if
(
IsCachingToStartOfContainer
(
)
)
{
MOZ_ASSERT
(
!
mContent
)
;
if
(
mContainerNode
-
>
GetFirstChild
(
)
=
=
&
aFirstContent
)
{
return
Some
(
mFlatTextLength
)
;
}
return
Nothing
(
)
;
}
MOZ_ASSERT
(
IsCachingToEndOfContent
(
)
)
;
MOZ_ASSERT
(
mContent
)
;
MOZ_ASSERT
(
mContent
!
=
&
aFirstContent
)
;
MOZ_ASSERT
(
mContent
!
=
&
aLastContent
)
;
if
(
mContent
=
=
aFirstContent
.
GetPreviousSibling
(
)
)
{
return
Some
(
mFlatTextLength
)
;
}
if
(
mContent
=
=
aLastContent
.
GetNextSibling
(
)
|
|
aLastContent
.
ComputeIndexInParentNode
(
)
.
valueOr
(
UINT32_MAX
)
<
mContent
-
>
ComputeIndexInParentNode
(
)
.
valueOr
(
0u
)
)
{
Result
<
uint32_t
nsresult
>
previouslyInsertedTextLengthOrError
=
FlatTextCache
:
:
ComputeTextLengthStartOfContentToEndOfContent
(
*
aLastContent
.
GetNextSibling
(
)
*
mContent
aRootElement
)
;
if
(
NS_WARN_IF
(
previouslyInsertedTextLengthOrError
.
isErr
(
)
)
|
|
NS_WARN_IF
(
mFlatTextLength
<
previouslyInsertedTextLengthOrError
.
inspect
(
)
)
)
{
return
Nothing
(
)
;
}
return
Some
(
mFlatTextLength
-
previouslyInsertedTextLengthOrError
.
unwrap
(
)
)
;
}
return
Nothing
(
)
;
}
Result
<
uint32_t
nsresult
>
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeTextLengthOfContent
(
const
nsIContent
&
aContent
const
dom
:
:
Element
*
aRootElement
)
{
MOZ_ASSERT
(
aRootElement
)
;
if
(
const
Text
*
textNode
=
Text
:
:
FromNode
(
&
aContent
)
)
{
return
ContentEventHandler
:
:
GetNativeTextLength
(
*
textNode
)
;
}
if
(
aContent
.
IsBeingRemoved
(
)
)
{
uint32_t
textLength
=
0
;
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
Before
(
aContent
)
RawNodePosition
:
:
AtEndOf
(
aContent
)
aRootElement
&
textLength
LineBreakType
:
:
LINE_BREAK_TYPE_NATIVE
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
return
textLength
;
}
return
ComputeTextLengthStartOfContentToEndOfContent
(
aContent
aContent
aRootElement
)
;
}
Result
<
uint32_t
nsresult
>
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeTextLengthBeforeContent
(
const
nsIContent
&
aContent
const
dom
:
:
Element
*
aRootElement
)
{
uint32_t
textLengthBeforeContent
=
0
;
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
BeforeFirstContentOf
(
*
aRootElement
)
RawNodePosition
:
:
Before
(
aContent
)
aRootElement
&
textLengthBeforeContent
LineBreakType
:
:
LINE_BREAK_TYPE_NATIVE
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
return
textLengthBeforeContent
;
}
Result
<
uint32_t
nsresult
>
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeTextLengthStartOfContentToEndOfContent
(
const
nsIContent
&
aStartContent
const
nsIContent
&
aEndContent
const
dom
:
:
Element
*
aRootElement
)
{
uint32_t
textLength
=
0
;
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
Before
(
aStartContent
)
RawNodePosition
:
:
After
(
aEndContent
)
aRootElement
&
textLength
LineBreakType
:
:
LINE_BREAK_TYPE_NATIVE
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
return
textLength
;
}
Result
<
uint32_t
nsresult
>
IMEContentObserver
:
:
FlatTextCache
:
:
ComputeTextLengthBeforeFirstContentOf
(
const
nsINode
&
aContainer
const
dom
:
:
Element
*
aRootElement
)
{
uint32_t
lengthIncludingLineBreakCausedByOpenTagOfContent
=
0
;
nsresult
rv
=
ContentEventHandler
:
:
GetFlatTextLengthInRange
(
RawNodePosition
:
:
BeforeFirstContentOf
(
*
aRootElement
)
RawNodePosition
(
const_cast
<
nsINode
*
>
(
&
aContainer
)
nullptr
)
aRootElement
&
lengthIncludingLineBreakCausedByOpenTagOfContent
LineBreakType
:
:
LINE_BREAK_TYPE_NATIVE
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
return
lengthIncludingLineBreakCausedByOpenTagOfContent
;
}
void
IMEContentObserver
:
:
FlatTextCache
:
:
AssertValidCache
(
const
Element
*
aRootElement
)
const
{
#
ifdef
DEBUG
if
(
MOZ_LIKELY
(
!
StaticPrefs
:
:
test_ime_content_observer_assert_valid_cache
(
)
)
)
{
return
;
}
MOZ_ASSERT
(
aRootElement
)
;
if
(
!
mContainerNode
)
{
return
;
}
MOZ_ASSERT
(
mContainerNode
-
>
IsInclusiveDescendantOf
(
aRootElement
)
)
;
MOZ_ASSERT_IF
(
mContent
mContent
-
>
IsInclusiveDescendantOf
(
aRootElement
)
)
;
if
(
IsCachingToEndOfContent
(
)
)
{
MOZ_ASSERT
(
mContent
)
;
Result
<
uint32_t
nsresult
>
offset
=
FlatTextCache
:
:
ComputeTextLengthBeforeContent
(
*
mContent
aRootElement
)
;
MOZ_ASSERT
(
offset
.
isOk
(
)
)
;
Result
<
uint32_t
nsresult
>
length
=
FlatTextCache
:
:
ComputeTextLengthStartOfContentToEndOfContent
(
*
mContent
*
mContent
aRootElement
)
;
MOZ_ASSERT
(
length
.
isOk
(
)
)
;
if
(
mFlatTextLength
!
=
offset
.
inspect
(
)
+
length
.
inspect
(
)
)
{
nsAutoString
innerHTMLOfEditable
;
const_cast
<
Element
*
>
(
aRootElement
)
-
>
GetInnerHTML
(
innerHTMLOfEditable
IgnoreErrors
(
)
)
;
NS_WARNING
(
nsPrintfCString
(
"
mFlatTextLength
=
%
u
offset
:
%
u
length
:
%
u
mContainerNode
:
%
s
"
"
mContent
=
%
s
(
%
s
)
"
mFlatTextLength
offset
.
inspect
(
)
length
.
inspect
(
)
ToString
(
mContainerNode
)
.
c_str
(
)
ToString
(
*
mContent
)
.
c_str
(
)
NS_ConvertUTF16toUTF8
(
innerHTMLOfEditable
)
.
get
(
)
)
.
get
(
)
)
;
}
MOZ_ASSERT
(
mFlatTextLength
=
=
offset
.
inspect
(
)
+
length
.
inspect
(
)
)
;
return
;
}
MOZ_ASSERT
(
!
mContent
)
;
MOZ_ASSERT
(
mContainerNode
-
>
IsContent
(
)
)
;
Result
<
uint32_t
nsresult
>
offset
=
ComputeTextLengthBeforeFirstContentOf
(
*
mContainerNode
aRootElement
)
;
MOZ_ASSERT
(
offset
.
isOk
(
)
)
;
if
(
mFlatTextLength
!
=
offset
.
inspect
(
)
)
{
nsAutoString
innerHTMLOfEditable
;
const_cast
<
Element
*
>
(
aRootElement
)
-
>
GetInnerHTML
(
innerHTMLOfEditable
IgnoreErrors
(
)
)
;
NS_WARNING
(
nsPrintfCString
(
"
mFlatTextLength
=
%
u
offset
:
%
u
mContainerNode
:
%
s
(
%
s
)
"
mFlatTextLength
offset
.
inspect
(
)
ToString
(
mContainerNode
)
.
c_str
(
)
NS_ConvertUTF16toUTF8
(
innerHTMLOfEditable
)
.
get
(
)
)
.
get
(
)
)
;
}
MOZ_ASSERT
(
mFlatTextLength
=
=
offset
.
inspect
(
)
)
;
#
endif
}
void
IMEContentObserver
:
:
FlatTextCache
:
:
ContentRemoved
(
const
nsIContent
&
aContent
const
nsIContent
*
aPreviousSibling
uint32_t
aFlatTextLengthOfContent
const
Element
*
aRootElement
)
{
if
(
!
mContainerNode
)
{
return
;
}
MOZ_ASSERT_IF
(
aPreviousSibling
aContent
.
GetPreviousSibling
(
)
!
=
aPreviousSibling
)
;
MOZ_ASSERT_IF
(
aPreviousSibling
aPreviousSibling
-
>
GetNextSibling
(
)
!
=
&
aContent
)
;
if
(
mContent
&
&
mContent
=
=
aPreviousSibling
)
{
return
;
}
if
(
IsCachingToStartOfContainer
(
)
)
{
MOZ_ASSERT
(
!
mContent
)
;
if
(
mContainerNode
=
=
aContent
.
GetParentNode
(
)
)
{
AssertValidCache
(
aRootElement
)
;
return
;
}
Clear
(
"
FlatTextCache
:
:
ContentRemoved
"
)
;
return
;
}
MOZ_ASSERT
(
IsCachingToEndOfContent
(
)
)
;
if
(
&
aContent
=
=
mContent
)
{
MOZ_ASSERT
(
mFlatTextLength
>
=
aFlatTextLengthOfContent
)
;
if
(
NS_WARN_IF
(
mFlatTextLength
<
aFlatTextLengthOfContent
)
)
{
Clear
(
"
FlatTextCache
:
:
ContentRemoved
"
)
;
return
;
}
if
(
aPreviousSibling
)
{
CacheFlatTextLengthBeforeEndOfContent
(
"
FlatTextCache
:
:
ContentRemoved
"
*
aPreviousSibling
mFlatTextLength
-
aFlatTextLengthOfContent
aRootElement
)
;
return
;
}
CacheFlatTextLengthBeforeFirstContent
(
"
FlatTextCache
:
:
ContentRemoved
"
*
mContainerNode
mFlatTextLength
-
aFlatTextLengthOfContent
aRootElement
)
;
return
;
}
Clear
(
"
FlatTextCache
:
:
ContentRemoved
"
)
;
}
}
