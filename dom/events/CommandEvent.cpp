#
include
"
mozilla
/
dom
/
CommandEvent
.
h
"
#
include
"
mozilla
/
MiscEvents
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
CommandEvent
:
:
CommandEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCommandEvent
*
aEvent
)
:
Event
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
WidgetCommandEvent
(
false
nullptr
nullptr
nullptr
)
)
{
mEvent
-
>
mTime
=
PR_Now
(
)
;
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
}
}
NS_INTERFACE_MAP_BEGIN
(
CommandEvent
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMCommandEvent
)
NS_INTERFACE_MAP_END_INHERITING
(
Event
)
NS_IMPL_ADDREF_INHERITED
(
CommandEvent
Event
)
NS_IMPL_RELEASE_INHERITED
(
CommandEvent
Event
)
NS_IMETHODIMP
CommandEvent
:
:
GetCommand
(
nsAString
&
aCommand
)
{
nsIAtom
*
command
=
mEvent
-
>
AsCommandEvent
(
)
-
>
command
;
if
(
command
)
{
command
-
>
ToString
(
aCommand
)
;
}
else
{
aCommand
.
Truncate
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
CommandEvent
:
:
InitCommandEvent
(
const
nsAString
&
aTypeArg
bool
aCanBubbleArg
bool
aCancelableArg
const
nsAString
&
aCommand
)
{
Event
:
:
InitEvent
(
aTypeArg
aCanBubbleArg
aCancelableArg
)
;
mEvent
-
>
AsCommandEvent
(
)
-
>
command
=
NS_Atomize
(
aCommand
)
;
return
NS_OK
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
CommandEvent
>
NS_NewDOMCommandEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCommandEvent
*
aEvent
)
{
RefPtr
<
CommandEvent
>
it
=
new
CommandEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
