#
ifndef
mozilla_dom_InputEvent_h_
#
define
mozilla_dom_InputEvent_h_
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
#
include
"
mozilla
/
dom
/
InputEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
StaticRange
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
dom
{
class
DataTransfer
;
class
InputEvent
:
public
UIEvent
{
public
:
InputEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalEditorInputEvent
*
aEvent
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
InputEvent
UIEvent
)
static
already_AddRefed
<
InputEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
InputEventInit
&
aParam
)
;
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
InputEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
GetInputType
(
nsAString
&
aInputType
)
;
void
GetData
(
nsAString
&
aData
CallerType
aCallerType
=
CallerType
:
:
System
)
;
already_AddRefed
<
DataTransfer
>
GetDataTransfer
(
CallerType
aCallerType
=
CallerType
:
:
System
)
;
void
GetTargetRanges
(
nsTArray
<
RefPtr
<
StaticRange
>
>
&
aTargetRanges
)
;
bool
IsComposing
(
)
;
protected
:
~
InputEvent
(
)
=
default
;
nsString
mInputTypeValue
;
}
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
InputEvent
>
NS_NewDOMInputEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
InternalEditorInputEvent
*
aEvent
)
;
#
endif
