#
ifndef
mozilla_dom_CommandEvent_h_
#
define
mozilla_dom_CommandEvent_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
dom
/
CommandEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
namespace
mozilla
:
:
dom
{
class
CommandEvent
:
public
Event
{
public
:
CommandEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCommandEvent
*
aEvent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
CommandEvent
Event
)
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
CommandEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
already_AddRefed
<
CommandEvent
>
Constructor
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
CommandEventInit
&
aEventInitDict
)
;
static
already_AddRefed
<
CommandEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
CommandEventInit
&
aEventInitDict
)
;
void
GetCommand
(
nsAString
&
aCommand
)
const
;
Element
*
GetSource
(
)
;
static
bool
IsCallerChromeOrCommandForEnabled
(
JSContext
*
JSObject
*
)
;
protected
:
~
CommandEvent
(
)
=
default
;
private
:
RefPtr
<
Element
>
mSource
;
}
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
CommandEvent
>
NS_NewDOMCommandEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
WidgetCommandEvent
*
aEvent
)
;
#
endif
