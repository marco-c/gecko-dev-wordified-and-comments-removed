#
ifndef
mozilla_ContentEventHandler_h_
#
define
mozilla_ContentEventHandler_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsRange
.
h
"
class
nsPresContext
;
struct
nsRect
;
namespace
mozilla
{
enum
LineBreakType
{
LINE_BREAK_TYPE_NATIVE
LINE_BREAK_TYPE_XP
}
;
class
MOZ_STACK_CLASS
ContentEventHandler
{
public
:
typedef
dom
:
:
Selection
Selection
;
explicit
ContentEventHandler
(
nsPresContext
*
aPresContext
)
;
nsresult
HandleQueryContentEvent
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQuerySelectedText
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryTextContent
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryCaretRect
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryTextRect
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryEditorRect
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryContentState
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQuerySelectionAsTransferable
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryCharacterAtPoint
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnQueryDOMWidgetHittest
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
OnSelectionEvent
(
WidgetSelectionEvent
*
aEvent
)
;
protected
:
nsPresContext
*
mPresContext
;
nsCOMPtr
<
nsIPresShell
>
mPresShell
;
RefPtr
<
Selection
>
mSelection
;
RefPtr
<
nsRange
>
mFirstSelectedRange
;
nsCOMPtr
<
nsIContent
>
mRootContent
;
nsresult
Init
(
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
Init
(
WidgetSelectionEvent
*
aEvent
)
;
nsresult
InitBasic
(
)
;
nsresult
InitCommon
(
)
;
public
:
struct
NodePosition
final
{
nsCOMPtr
<
nsINode
>
mNode
;
int32_t
mOffset
;
NodePosition
(
)
:
mOffset
(
-
1
)
{
}
NodePosition
(
nsINode
*
aNode
int32_t
aOffset
)
:
mNode
(
aNode
)
mOffset
(
aOffset
)
{
}
explicit
NodePosition
(
const
nsIFrame
:
:
ContentOffsets
&
aContentOffsets
)
:
mNode
(
aContentOffsets
.
content
)
mOffset
(
aContentOffsets
.
offset
)
{
}
bool
IsValid
(
)
const
{
return
mNode
&
&
mOffset
>
=
0
;
}
bool
OffsetIsValid
(
)
const
{
return
IsValid
(
)
&
&
static_cast
<
uint32_t
>
(
mOffset
)
<
=
mNode
-
>
Length
(
)
;
}
nsresult
SetToRangeStart
(
nsRange
*
aRange
)
const
{
nsCOMPtr
<
nsIDOMNode
>
domNode
(
do_QueryInterface
(
mNode
)
)
;
return
aRange
-
>
SetStart
(
domNode
mOffset
)
;
}
nsresult
SetToRangeEnd
(
nsRange
*
aRange
)
const
{
nsCOMPtr
<
nsIDOMNode
>
domNode
(
do_QueryInterface
(
mNode
)
)
;
return
aRange
-
>
SetEnd
(
domNode
mOffset
)
;
}
nsresult
SetToRangeEndAfter
(
nsRange
*
aRange
)
const
{
nsCOMPtr
<
nsIDOMNode
>
domNode
(
do_QueryInterface
(
mNode
)
)
;
return
aRange
-
>
SetEndAfter
(
domNode
)
;
}
}
;
static
nsresult
GetFlatTextLengthInRange
(
const
NodePosition
&
aStartPosition
const
NodePosition
&
aEndPosition
nsIContent
*
aRootContent
uint32_t
*
aLength
LineBreakType
aLineBreakType
bool
aIsRemovingNode
=
false
)
;
static
uint32_t
GetNativeTextLength
(
nsIContent
*
aContent
uint32_t
aStartOffset
uint32_t
aEndOffset
)
;
static
uint32_t
GetNativeTextLength
(
nsIContent
*
aContent
uint32_t
aMaxLength
=
UINT32_MAX
)
;
static
uint32_t
GetNativeTextLengthBefore
(
nsIContent
*
aContent
)
;
protected
:
static
uint32_t
GetTextLength
(
nsIContent
*
aContent
LineBreakType
aLineBreakType
uint32_t
aMaxLength
=
UINT32_MAX
)
;
static
uint32_t
GetTextLengthInRange
(
nsIContent
*
aContent
uint32_t
aXPStartOffset
uint32_t
aXPEndOffset
LineBreakType
aLineBreakType
)
;
nsresult
GenerateFlatTextContent
(
nsRange
*
aRange
nsAFlatString
&
aString
LineBreakType
aLineBreakType
)
;
nsresult
GetFlatTextLengthBefore
(
nsRange
*
aRange
uint32_t
*
aOffset
LineBreakType
aLineBreakType
)
;
static
inline
uint32_t
GetBRLength
(
LineBreakType
aLineBreakType
)
;
static
LineBreakType
GetLineBreakType
(
WidgetQueryContentEvent
*
aEvent
)
;
static
LineBreakType
GetLineBreakType
(
WidgetSelectionEvent
*
aEvent
)
;
static
LineBreakType
GetLineBreakType
(
bool
aUseNativeLineBreak
)
;
nsIContent
*
GetFocusedContent
(
)
;
bool
IsPlugin
(
nsIContent
*
aContent
)
;
nsresult
QueryContentRect
(
nsIContent
*
aContent
WidgetQueryContentEvent
*
aEvent
)
;
nsresult
SetRangeFromFlatTextOffset
(
nsRange
*
aRange
uint32_t
aOffset
uint32_t
aLength
LineBreakType
aLineBreakType
bool
aExpandToClusterBoundaries
uint32_t
*
aNewOffset
=
nullptr
)
;
nsresult
AdjustCollapsedRangeMaybeIntoTextNode
(
nsRange
*
aCollapsedRange
)
;
nsresult
GetStartFrameAndOffset
(
const
nsRange
*
aRange
nsIFrame
*
&
aFrame
int32_t
&
aOffsetInFrame
)
;
nsresult
ConvertToRootRelativeOffset
(
nsIFrame
*
aFrame
nsRect
&
aRect
)
;
nsresult
ExpandToClusterBoundary
(
nsIContent
*
aContent
bool
aForward
uint32_t
*
aXPOffset
)
;
typedef
nsTArray
<
mozilla
:
:
FontRange
>
FontRangeArray
;
static
void
AppendFontRanges
(
FontRangeArray
&
aFontRanges
nsIContent
*
aContent
int32_t
aBaseOffset
int32_t
aXPStartOffset
int32_t
aXPEndOffset
LineBreakType
aLineBreakType
)
;
static
nsresult
GenerateFlatFontRanges
(
nsRange
*
aRange
FontRangeArray
&
aFontRanges
uint32_t
&
aLength
LineBreakType
aLineBreakType
)
;
}
;
}
#
endif
