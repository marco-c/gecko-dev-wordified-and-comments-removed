#
ifndef
mozilla_IMEStateManager_h_
#
define
mozilla_IMEStateManager_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
nsIWidget
.
h
"
class
nsIContent
;
class
nsINode
;
class
nsPresContext
;
namespace
mozilla
{
class
EditorBase
;
class
EventDispatchingCallback
;
class
IMEContentObserver
;
class
TextCompositionArray
;
class
TextComposition
;
namespace
dom
{
class
Selection
;
}
class
IMEStateManager
{
typedef
dom
:
:
BrowserParent
BrowserParent
;
typedef
widget
:
:
IMEMessage
IMEMessage
;
typedef
widget
:
:
IMENotification
IMENotification
;
typedef
widget
:
:
IMEState
IMEState
;
typedef
widget
:
:
InputContext
InputContext
;
typedef
widget
:
:
InputContextAction
InputContextAction
;
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
BrowserParent
*
GetActiveBrowserParent
(
)
{
if
(
sInstalledMenuKeyboardListener
)
{
return
nullptr
;
}
if
(
sFocusedIMEBrowserParent
)
{
return
sFocusedIMEBrowserParent
;
}
return
BrowserParent
:
:
GetFocused
(
)
;
}
static
bool
DoesBrowserParentHaveIMEFocus
(
const
BrowserParent
*
aBrowserParent
)
{
MOZ_ASSERT
(
aBrowserParent
)
;
return
sFocusedIMEBrowserParent
=
=
aBrowserParent
;
}
static
bool
CanSendNotificationToWidget
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
return
true
;
#
else
return
!
sCleaningUpForStoppingIMEStateManagement
;
#
endif
}
static
void
OnFocusMovedBetweenBrowsers
(
BrowserParent
*
aBlur
BrowserParent
*
aFocus
)
;
static
void
WidgetDestroyed
(
nsIWidget
*
aWidget
)
;
static
void
WidgetOnQuit
(
nsIWidget
*
aWidget
)
;
static
nsIWidget
*
GetWidgetForActiveInputContext
(
)
{
return
sActiveInputContextWidget
;
}
static
void
SetInputContextForChildProcess
(
BrowserParent
*
aBrowserParent
const
InputContext
&
aInputContext
const
InputContextAction
&
aAction
)
;
static
void
StopIMEStateManagement
(
)
;
static
void
MaybeStartOffsetUpdatedInChild
(
nsIWidget
*
aWidget
uint32_t
aStartOffset
)
;
static
nsresult
OnDestroyPresContext
(
nsPresContext
*
aPresContext
)
;
static
nsresult
OnRemoveContent
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
)
;
static
nsresult
OnChangeFocus
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
InputContextAction
:
:
Cause
aCause
)
;
static
void
OnInstalledMenuKeyboardListener
(
bool
aInstalling
)
;
static
nsresult
GetFocusSelectionAndRoot
(
dom
:
:
Selection
*
*
aSel
nsIContent
*
*
aRoot
)
;
enum
class
UpdateIMEStateOption
{
ForceUpdate
DontCommitComposition
}
;
using
UpdateIMEStateOptions
=
EnumSet
<
UpdateIMEStateOption
uint32_t
>
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
void
UpdateIMEState
(
const
IMEState
&
aNewIMEState
nsIContent
*
aContent
EditorBase
&
aEditorBase
const
UpdateIMEStateOptions
&
aOptions
=
{
}
)
;
MOZ_CAN_RUN_SCRIPT
static
bool
OnMouseButtonEventInEditor
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
WidgetMouseEvent
*
aMouseEvent
)
;
static
void
OnClickInEditor
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
const
WidgetMouseEvent
*
aMouseEvent
)
;
static
void
OnFocusInEditor
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
EditorBase
&
aEditorBase
)
;
static
void
OnEditorInitialized
(
EditorBase
&
aEditorBase
)
;
static
void
OnEditorDestroying
(
EditorBase
&
aEditorBase
)
;
static
void
OnReFocus
(
nsPresContext
*
aPresContext
nsIContent
&
aContent
)
;
MOZ_CAN_RUN_SCRIPT
static
void
DispatchCompositionEvent
(
nsINode
*
aEventTargetNode
nsPresContext
*
aPresContext
BrowserParent
*
aBrowserParent
WidgetCompositionEvent
*
aCompositionEvent
nsEventStatus
*
aStatus
EventDispatchingCallback
*
aCallBack
bool
aIsSynthesized
=
false
)
;
MOZ_CAN_RUN_SCRIPT
static
void
HandleSelectionEvent
(
nsPresContext
*
aPresContext
nsIContent
*
aEventTargetContent
WidgetSelectionEvent
*
aSelectionEvent
)
;
static
void
OnCompositionEventDiscarded
(
WidgetCompositionEvent
*
aCompositionEvent
)
;
static
already_AddRefed
<
TextComposition
>
GetTextCompositionFor
(
nsIWidget
*
aWidget
)
;
static
already_AddRefed
<
TextComposition
>
GetTextCompositionFor
(
const
WidgetCompositionEvent
*
aCompositionEvent
)
;
static
already_AddRefed
<
TextComposition
>
GetTextCompositionFor
(
nsPresContext
*
aPresContext
)
;
static
nsresult
NotifyIME
(
const
IMENotification
&
aNotification
nsIWidget
*
aWidget
BrowserParent
*
aBrowserParent
=
nullptr
)
;
static
nsresult
NotifyIME
(
IMEMessage
aMessage
nsIWidget
*
aWidget
BrowserParent
*
aBrowserParent
=
nullptr
)
;
static
nsresult
NotifyIME
(
IMEMessage
aMessage
nsPresContext
*
aPresContext
BrowserParent
*
aBrowserParent
=
nullptr
)
;
static
nsINode
*
GetRootEditableNode
(
const
nsPresContext
*
aPresContext
const
nsIContent
*
aContent
)
;
static
IMEContentObserver
*
GetActiveContentObserver
(
)
;
protected
:
static
nsresult
OnChangeFocusInternal
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
InputContextAction
aAction
)
;
static
void
SetIMEState
(
const
IMEState
&
aState
nsPresContext
*
aPresContext
nsIContent
*
aContent
nsIWidget
*
aWidget
InputContextAction
aAction
InputContext
:
:
Origin
aOrigin
)
;
static
void
SetInputContext
(
nsIWidget
*
aWidget
const
InputContext
&
aInputContext
const
InputContextAction
&
aAction
)
;
static
IMEState
GetNewIMEState
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
)
;
static
void
EnsureTextCompositionArray
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
void
CreateIMEContentObserver
(
EditorBase
&
aEditorBase
nsIContent
*
aFocusedContent
)
;
static
bool
IsFocusedContent
(
const
nsPresContext
*
aPresContext
const
nsIContent
*
aFocusedContent
)
;
static
void
DestroyIMEContentObserver
(
)
;
static
bool
IsEditable
(
nsINode
*
node
)
;
static
bool
IsIMEObserverNeeded
(
const
IMEState
&
aState
)
;
static
nsIContent
*
GetRootContent
(
nsPresContext
*
aPresContext
)
;
static
bool
CanHandleWith
(
nsPresContext
*
aPresContext
)
;
static
void
ResetActiveChildInputContext
(
)
;
static
bool
HasActiveChildSetInputContext
(
)
;
static
StaticRefPtr
<
nsIContent
>
sContent
;
static
StaticRefPtr
<
nsPresContext
>
sPresContext
;
static
nsIWidget
*
sWidget
;
static
nsIWidget
*
sFocusedIMEWidget
;
static
StaticRefPtr
<
BrowserParent
>
sFocusedIMEBrowserParent
;
static
nsIWidget
*
sActiveInputContextWidget
;
static
StaticRefPtr
<
IMEContentObserver
>
sActiveIMEContentObserver
;
static
TextCompositionArray
*
sTextCompositions
;
static
InputContext
:
:
Origin
sOrigin
;
static
InputContext
sActiveChildInputContext
;
static
bool
sInstalledMenuKeyboardListener
;
static
bool
sIsGettingNewIMEState
;
static
bool
sCheckForIMEUnawareWebApps
;
static
bool
sCleaningUpForStoppingIMEStateManagement
;
static
bool
sIsActive
;
struct
PendingFocusedBrowserSwitchingData
final
{
RefPtr
<
BrowserParent
>
mBrowserParentBlurred
;
RefPtr
<
BrowserParent
>
mBrowserParentFocused
;
PendingFocusedBrowserSwitchingData
(
)
=
delete
;
explicit
PendingFocusedBrowserSwitchingData
(
BrowserParent
*
aBlur
BrowserParent
*
aFocus
)
:
mBrowserParentBlurred
(
aBlur
)
mBrowserParentFocused
(
aFocus
)
{
}
}
;
static
Maybe
<
PendingFocusedBrowserSwitchingData
>
sPendingFocusedBrowserSwitchingData
;
class
MOZ_STACK_CLASS
GettingNewIMEStateBlocker
final
{
public
:
GettingNewIMEStateBlocker
(
)
:
mOldValue
(
IMEStateManager
:
:
sIsGettingNewIMEState
)
{
IMEStateManager
:
:
sIsGettingNewIMEState
=
true
;
}
~
GettingNewIMEStateBlocker
(
)
{
IMEStateManager
:
:
sIsGettingNewIMEState
=
mOldValue
;
}
private
:
bool
mOldValue
;
}
;
}
;
}
#
endif
