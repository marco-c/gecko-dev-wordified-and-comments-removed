#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
MiscEvents
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
DragEvent
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
FrameLoaderBinding
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
#
include
"
mozilla
/
dom
/
UIEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
WheelEventBinding
.
h
"
#
include
"
ContentEventHandler
.
h
"
#
include
"
IMEContentObserver
.
h
"
#
include
"
WheelHandlingHelper
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsIComboboxControlFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsIDOMXULControlElement
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsISelection
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
nsITabChild
.
h
"
#
include
"
nsPluginFrame
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
nsIProperties
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsIDragSession
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
nsContentAreaDragDrop
.
h
"
#
ifdef
MOZ_XUL
#
include
"
nsTreeBodyFrame
.
h
"
#
endif
#
include
"
nsIController
.
h
"
#
include
"
nsICommandParams
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
HTMLLabelElement
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsIObjectLoadingContent
.
h
"
#
ifdef
XP_MACOSX
#
import
<
ApplicationServices
/
ApplicationServices
.
h
>
#
endif
namespace
mozilla
{
using
namespace
dom
;
static
const
LayoutDeviceIntPoint
kInvalidRefPoint
=
LayoutDeviceIntPoint
(
-
1
-
1
)
;
static
uint32_t
gMouseOrKeyboardEventCounter
=
0
;
static
nsITimer
*
gUserInteractionTimer
=
nullptr
;
static
nsITimerCallback
*
gUserInteractionTimerCallback
=
nullptr
;
static
const
double
kCursorLoadingTimeout
=
1000
;
static
AutoWeakFrame
gLastCursorSourceFrame
;
static
TimeStamp
gLastCursorUpdateTime
;
static
inline
int32_t
RoundDown
(
double
aDouble
)
{
return
(
aDouble
>
0
)
?
static_cast
<
int32_t
>
(
floor
(
aDouble
)
)
:
static_cast
<
int32_t
>
(
ceil
(
aDouble
)
)
;
}
#
ifdef
DEBUG_DOCSHELL_FOCUS
static
void
PrintDocTree
(
nsIDocShellTreeItem
*
aParentItem
int
aLevel
)
{
for
(
int32_t
i
=
0
;
i
<
aLevel
;
i
+
+
)
printf
(
"
"
)
;
int32_t
childWebshellCount
;
aParentItem
-
>
GetChildCount
(
&
childWebshellCount
)
;
nsCOMPtr
<
nsIDocShell
>
parentAsDocShell
(
do_QueryInterface
(
aParentItem
)
)
;
int32_t
type
=
aParentItem
-
>
ItemType
(
)
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
parentAsDocShell
-
>
GetPresShell
(
)
;
RefPtr
<
nsPresContext
>
presContext
;
parentAsDocShell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
nsCOMPtr
<
nsIContentViewer
>
cv
;
parentAsDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
;
if
(
cv
)
cv
-
>
GetDOMDocument
(
getter_AddRefs
(
domDoc
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
domDoc
)
;
nsCOMPtr
<
nsIDOMWindow
>
domwin
=
doc
?
doc
-
>
GetWindow
(
)
:
nullptr
;
nsIURI
*
uri
=
doc
?
doc
-
>
GetDocumentURI
(
)
:
nullptr
;
printf
(
"
DS
%
p
Type
%
s
Cnt
%
d
Doc
%
p
DW
%
p
EM
%
p
%
c
"
static_cast
<
void
*
>
(
parentAsDocShell
.
get
(
)
)
type
=
=
nsIDocShellTreeItem
:
:
typeChrome
?
"
Chrome
"
:
"
Content
"
childWebshellCount
static_cast
<
void
*
>
(
doc
.
get
(
)
)
static_cast
<
void
*
>
(
domwin
.
get
(
)
)
static_cast
<
void
*
>
(
presContext
?
presContext
-
>
EventStateManager
(
)
:
nullptr
)
uri
?
'
'
:
'
\
n
'
)
;
if
(
uri
)
{
nsAutoCString
spec
;
uri
-
>
GetSpec
(
spec
)
;
printf
(
"
\
"
%
s
\
"
\
n
"
spec
.
get
(
)
)
;
}
if
(
childWebshellCount
>
0
)
{
for
(
int32_t
i
=
0
;
i
<
childWebshellCount
;
i
+
+
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
child
;
aParentItem
-
>
GetChildAt
(
i
getter_AddRefs
(
child
)
)
;
PrintDocTree
(
child
aLevel
+
1
)
;
}
}
}
static
void
PrintDocTreeAll
(
nsIDocShellTreeItem
*
aItem
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
item
=
aItem
;
for
(
;
;
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
parent
;
item
-
>
GetParent
(
getter_AddRefs
(
parent
)
)
;
if
(
!
parent
)
break
;
item
=
parent
;
}
PrintDocTree
(
item
0
)
;
}
#
endif
class
UITimerCallback
final
:
public
nsITimerCallback
public
nsINamed
{
public
:
UITimerCallback
(
)
:
mPreviousCount
(
0
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
private
:
~
UITimerCallback
(
)
=
default
;
uint32_t
mPreviousCount
;
}
;
NS_IMPL_ISUPPORTS
(
UITimerCallback
nsITimerCallback
nsINamed
)
NS_IMETHODIMP
UITimerCallback
:
:
Notify
(
nsITimer
*
aTimer
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
obs
)
return
NS_ERROR_FAILURE
;
if
(
(
gMouseOrKeyboardEventCounter
=
=
mPreviousCount
)
|
|
!
aTimer
)
{
gMouseOrKeyboardEventCounter
=
0
;
obs
-
>
NotifyObservers
(
nullptr
"
user
-
interaction
-
inactive
"
nullptr
)
;
if
(
gUserInteractionTimer
)
{
gUserInteractionTimer
-
>
Cancel
(
)
;
NS_RELEASE
(
gUserInteractionTimer
)
;
}
}
else
{
obs
-
>
NotifyObservers
(
nullptr
"
user
-
interaction
-
active
"
nullptr
)
;
EventStateManager
:
:
UpdateUserActivityTimer
(
)
;
}
mPreviousCount
=
gMouseOrKeyboardEventCounter
;
return
NS_OK
;
}
NS_IMETHODIMP
UITimerCallback
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
AssignASCII
(
"
UITimerCallback_timer
"
)
;
return
NS_OK
;
}
OverOutElementsWrapper
:
:
OverOutElementsWrapper
(
)
:
mLastOverFrame
(
nullptr
)
{
}
OverOutElementsWrapper
:
:
~
OverOutElementsWrapper
(
)
=
default
;
NS_IMPL_CYCLE_COLLECTION
(
OverOutElementsWrapper
mLastOverElement
mFirstOverEventElement
mFirstOutEventElement
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
OverOutElementsWrapper
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
OverOutElementsWrapper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
OverOutElementsWrapper
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
static
uint32_t
sESMInstanceCount
=
0
;
uint64_t
EventStateManager
:
:
sUserInputCounter
=
0
;
int32_t
EventStateManager
:
:
sUserInputEventDepth
=
0
;
int32_t
EventStateManager
:
:
sUserKeyboardEventDepth
=
0
;
bool
EventStateManager
:
:
sNormalLMouseEventInProcess
=
false
;
EventStateManager
*
EventStateManager
:
:
sActiveESM
=
nullptr
;
nsIDocument
*
EventStateManager
:
:
sMouseOverDocument
=
nullptr
;
AutoWeakFrame
EventStateManager
:
:
sLastDragOverFrame
=
nullptr
;
LayoutDeviceIntPoint
EventStateManager
:
:
sPreLockPoint
=
LayoutDeviceIntPoint
(
0
0
)
;
LayoutDeviceIntPoint
EventStateManager
:
:
sLastRefPoint
=
kInvalidRefPoint
;
CSSIntPoint
EventStateManager
:
:
sLastScreenPoint
=
CSSIntPoint
(
0
0
)
;
LayoutDeviceIntPoint
EventStateManager
:
:
sSynthCenteringPoint
=
kInvalidRefPoint
;
CSSIntPoint
EventStateManager
:
:
sLastClientPoint
=
CSSIntPoint
(
0
0
)
;
bool
EventStateManager
:
:
sIsPointerLocked
=
false
;
nsWeakPtr
EventStateManager
:
:
sPointerLockedElement
;
nsWeakPtr
EventStateManager
:
:
sPointerLockedDoc
;
nsCOMPtr
<
nsIContent
>
EventStateManager
:
:
sDragOverContent
=
nullptr
;
TimeStamp
EventStateManager
:
:
sLatestUserInputStart
;
TimeStamp
EventStateManager
:
:
sHandlingInputStart
;
EventStateManager
:
:
WheelPrefs
*
EventStateManager
:
:
WheelPrefs
:
:
sInstance
=
nullptr
;
bool
EventStateManager
:
:
WheelPrefs
:
:
sWheelEventsEnabledOnPlugins
=
true
;
bool
EventStateManager
:
:
WheelPrefs
:
:
sIsAutoDirEnabled
=
false
;
bool
EventStateManager
:
:
WheelPrefs
:
:
sHonoursRootForAutoDir
=
false
;
EventStateManager
:
:
DeltaAccumulator
*
EventStateManager
:
:
DeltaAccumulator
:
:
sInstance
=
nullptr
;
EventStateManager
:
:
EventStateManager
(
)
:
mLockCursor
(
0
)
mLastFrameConsumedSetCursor
(
false
)
mCurrentTarget
(
nullptr
)
mGestureDownPoint
(
0
0
)
mPresContext
(
nullptr
)
mLClickCount
(
0
)
mMClickCount
(
0
)
mRClickCount
(
0
)
mInTouchDrag
(
false
)
m_haveShutdown
(
false
)
{
if
(
sESMInstanceCount
=
=
0
)
{
gUserInteractionTimerCallback
=
new
UITimerCallback
(
)
;
if
(
gUserInteractionTimerCallback
)
NS_ADDREF
(
gUserInteractionTimerCallback
)
;
UpdateUserActivityTimer
(
)
;
}
+
+
sESMInstanceCount
;
WheelTransaction
:
:
InitializeStatics
(
)
;
}
nsresult
EventStateManager
:
:
UpdateUserActivityTimer
(
)
{
if
(
!
gUserInteractionTimerCallback
)
return
NS_OK
;
if
(
!
gUserInteractionTimer
)
{
gUserInteractionTimer
=
NS_NewTimer
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
.
take
(
)
;
}
if
(
gUserInteractionTimer
)
{
gUserInteractionTimer
-
>
InitWithCallback
(
gUserInteractionTimerCallback
NS_USER_INTERACTION_INTERVAL
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
return
NS_OK
;
}
nsresult
EventStateManager
:
:
Init
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
observerService
)
return
NS_ERROR_FAILURE
;
observerService
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
true
)
;
if
(
sESMInstanceCount
=
=
1
)
{
Prefs
:
:
Init
(
)
;
}
return
NS_OK
;
}
EventStateManager
:
:
~
EventStateManager
(
)
{
ReleaseCurrentIMEContentObserver
(
)
;
if
(
sActiveESM
=
=
this
)
{
sActiveESM
=
nullptr
;
}
if
(
Prefs
:
:
ClickHoldContextMenu
(
)
)
KillClickHoldTimer
(
)
;
if
(
mDocument
=
=
sMouseOverDocument
)
sMouseOverDocument
=
nullptr
;
-
-
sESMInstanceCount
;
if
(
sESMInstanceCount
=
=
0
)
{
WheelTransaction
:
:
Shutdown
(
)
;
if
(
gUserInteractionTimerCallback
)
{
gUserInteractionTimerCallback
-
>
Notify
(
nullptr
)
;
NS_RELEASE
(
gUserInteractionTimerCallback
)
;
}
if
(
gUserInteractionTimer
)
{
gUserInteractionTimer
-
>
Cancel
(
)
;
NS_RELEASE
(
gUserInteractionTimer
)
;
}
Prefs
:
:
Shutdown
(
)
;
WheelPrefs
:
:
Shutdown
(
)
;
DeltaAccumulator
:
:
Shutdown
(
)
;
}
if
(
sDragOverContent
&
&
sDragOverContent
-
>
OwnerDoc
(
)
=
=
mDocument
)
{
sDragOverContent
=
nullptr
;
}
if
(
!
m_haveShutdown
)
{
Shutdown
(
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
;
}
}
}
nsresult
EventStateManager
:
:
Shutdown
(
)
{
m_haveShutdown
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
EventStateManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
someData
)
{
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
Shutdown
(
)
;
}
return
NS_OK
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
EventStateManager
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
EventStateManager
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
EventStateManager
)
NS_IMPL_CYCLE_COLLECTION
(
EventStateManager
mCurrentTargetContent
mGestureDownContent
mGestureDownFrameOwner
mLastLeftMouseDownContent
mLastLeftMouseDownContentParent
mLastMiddleMouseDownContent
mLastMiddleMouseDownContentParent
mLastRightMouseDownContent
mLastRightMouseDownContentParent
mActiveContent
mHoverContent
mURLTargetContent
mMouseEnterLeaveHelper
mPointersEnterLeaveHelper
mDocument
mIMEContentObserver
mAccessKeys
)
void
EventStateManager
:
:
ReleaseCurrentIMEContentObserver
(
)
{
if
(
mIMEContentObserver
)
{
mIMEContentObserver
-
>
DisconnectFromEventStateManager
(
)
;
}
mIMEContentObserver
=
nullptr
;
}
void
EventStateManager
:
:
OnStartToObserveContent
(
IMEContentObserver
*
aIMEContentObserver
)
{
if
(
mIMEContentObserver
=
=
aIMEContentObserver
)
{
return
;
}
ReleaseCurrentIMEContentObserver
(
)
;
mIMEContentObserver
=
aIMEContentObserver
;
}
void
EventStateManager
:
:
OnStopObservingContent
(
IMEContentObserver
*
aIMEContentObserver
)
{
aIMEContentObserver
-
>
DisconnectFromEventStateManager
(
)
;
NS_ENSURE_TRUE_VOID
(
mIMEContentObserver
=
=
aIMEContentObserver
)
;
mIMEContentObserver
=
nullptr
;
}
void
EventStateManager
:
:
TryToFlushPendingNotificationsToIME
(
)
{
if
(
mIMEContentObserver
)
{
mIMEContentObserver
-
>
TryToFlushPendingNotifications
(
true
)
;
}
}
static
bool
IsMessageMouseUserActivity
(
EventMessage
aMessage
)
{
return
aMessage
=
=
eMouseMove
|
|
aMessage
=
=
eMouseUp
|
|
aMessage
=
=
eMouseDown
|
|
aMessage
=
=
eMouseAuxClick
|
|
aMessage
=
=
eMouseDoubleClick
|
|
aMessage
=
=
eMouseClick
|
|
aMessage
=
=
eMouseActivate
|
|
aMessage
=
=
eMouseLongTap
;
}
static
bool
IsMessageGamepadUserActivity
(
EventMessage
aMessage
)
{
return
aMessage
=
=
eGamepadButtonDown
|
|
aMessage
=
=
eGamepadButtonUp
|
|
aMessage
=
=
eGamepadAxisMove
;
}
nsresult
EventStateManager
:
:
PreHandleEvent
(
nsPresContext
*
aPresContext
WidgetEvent
*
aEvent
nsIFrame
*
aTargetFrame
nsIContent
*
aTargetContent
nsEventStatus
*
aStatus
nsIContent
*
aOverrideClickTarget
)
{
NS_ENSURE_ARG_POINTER
(
aStatus
)
;
NS_ENSURE_ARG
(
aPresContext
)
;
if
(
!
aEvent
)
{
NS_ERROR
(
"
aEvent
is
null
.
This
should
never
happen
.
"
)
;
return
NS_ERROR_NULL_POINTER
;
}
NS_WARNING_ASSERTION
(
!
aTargetFrame
|
|
!
aTargetFrame
-
>
GetContent
(
)
|
|
aTargetFrame
-
>
GetContent
(
)
=
=
aTargetContent
|
|
aTargetFrame
-
>
GetContent
(
)
-
>
GetFlattenedTreeParent
(
)
=
=
aTargetContent
|
|
aTargetFrame
-
>
IsGeneratedContentFrame
(
)
"
aTargetFrame
should
be
related
with
aTargetContent
"
)
;
#
if
DEBUG
if
(
aTargetFrame
&
&
aTargetFrame
-
>
IsGeneratedContentFrame
(
)
)
{
nsCOMPtr
<
nsIContent
>
targetContent
;
aTargetFrame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetContent
)
)
;
MOZ_ASSERT
(
aTargetContent
=
=
targetContent
"
Unexpected
target
for
generated
content
frame
!
"
)
;
}
#
endif
mCurrentTarget
=
aTargetFrame
;
mCurrentTargetContent
=
nullptr
;
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
aEvent
-
>
IsTrusted
(
)
&
&
(
(
mouseEvent
&
&
mouseEvent
-
>
IsReal
(
)
&
&
IsMessageMouseUserActivity
(
mouseEvent
-
>
mMessage
)
)
|
|
aEvent
-
>
mClass
=
=
eWheelEventClass
|
|
aEvent
-
>
mClass
=
=
ePointerEventClass
|
|
aEvent
-
>
mClass
=
=
eTouchEventClass
|
|
aEvent
-
>
mClass
=
=
eKeyboardEventClass
|
|
IsMessageGamepadUserActivity
(
aEvent
-
>
mMessage
)
)
)
{
if
(
gMouseOrKeyboardEventCounter
=
=
0
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
"
user
-
interaction
-
active
"
nullptr
)
;
UpdateUserActivityTimer
(
)
;
}
}
+
+
gMouseOrKeyboardEventCounter
;
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aTargetContent
)
;
if
(
node
&
&
(
aEvent
-
>
mMessage
=
=
eKeyUp
|
|
aEvent
-
>
mMessage
=
=
eMouseUp
|
|
aEvent
-
>
mMessage
=
=
eWheel
|
|
aEvent
-
>
mMessage
=
=
eTouchEnd
|
|
aEvent
-
>
mMessage
=
=
ePointerUp
)
)
{
nsIDocument
*
doc
=
node
-
>
OwnerDoc
(
)
;
while
(
doc
&
&
!
doc
-
>
UserHasInteracted
(
)
)
{
doc
-
>
SetUserHasInteracted
(
true
)
;
doc
=
nsContentUtils
:
:
IsChildOfSameType
(
doc
)
?
doc
-
>
GetParentDocument
(
)
:
nullptr
;
}
}
}
WheelTransaction
:
:
OnEvent
(
aEvent
)
;
if
(
!
mCurrentTarget
&
&
!
aTargetContent
)
{
NS_ERROR
(
"
mCurrentTarget
and
aTargetContent
are
null
"
)
;
return
NS_ERROR_NULL_POINTER
;
}
#
ifdef
DEBUG
if
(
aEvent
-
>
HasDragEventMessage
(
)
&
&
sIsPointerLocked
)
{
NS_ASSERTION
(
sIsPointerLocked
"
sIsPointerLocked
is
true
.
Drag
events
should
be
suppressed
when
"
"
the
pointer
is
locked
.
"
)
;
}
#
endif
if
(
aEvent
-
>
IsTrusted
(
)
&
&
(
(
mouseEvent
&
&
mouseEvent
-
>
IsReal
(
)
)
|
|
aEvent
-
>
mClass
=
=
eWheelEventClass
)
&
&
!
sIsPointerLocked
)
{
sLastScreenPoint
=
Event
:
:
GetScreenCoords
(
aPresContext
aEvent
aEvent
-
>
mRefPoint
)
;
sLastClientPoint
=
Event
:
:
GetClientCoords
(
aPresContext
aEvent
aEvent
-
>
mRefPoint
CSSIntPoint
(
0
0
)
)
;
}
*
aStatus
=
nsEventStatus_eIgnore
;
if
(
aEvent
-
>
mClass
=
=
eQueryContentEventClass
)
{
HandleQueryContentEvent
(
aEvent
-
>
AsQueryContentEvent
(
)
)
;
return
NS_OK
;
}
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
if
(
touchEvent
&
&
mInTouchDrag
)
{
if
(
touchEvent
-
>
mMessage
=
=
eTouchMove
)
{
GenerateDragGesture
(
aPresContext
touchEvent
)
;
}
else
{
mInTouchDrag
=
false
;
StopTrackingDragGesture
(
)
;
}
}
PointerEventHandler
:
:
UpdateActivePointerState
(
mouseEvent
)
;
switch
(
aEvent
-
>
mMessage
)
{
case
eContextMenu
:
if
(
sIsPointerLocked
)
{
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
break
;
case
eMouseTouchDrag
:
mInTouchDrag
=
true
;
BeginTrackingDragGesture
(
aPresContext
mouseEvent
aTargetFrame
)
;
break
;
case
eMouseDown
:
{
switch
(
mouseEvent
-
>
button
)
{
case
WidgetMouseEvent
:
:
eLeftButton
:
BeginTrackingDragGesture
(
aPresContext
mouseEvent
aTargetFrame
)
;
mLClickCount
=
mouseEvent
-
>
mClickCount
;
SetClickCount
(
mouseEvent
aStatus
)
;
sNormalLMouseEventInProcess
=
true
;
break
;
case
WidgetMouseEvent
:
:
eMiddleButton
:
mMClickCount
=
mouseEvent
-
>
mClickCount
;
SetClickCount
(
mouseEvent
aStatus
)
;
break
;
case
WidgetMouseEvent
:
:
eRightButton
:
mRClickCount
=
mouseEvent
-
>
mClickCount
;
SetClickCount
(
mouseEvent
aStatus
)
;
break
;
}
NotifyTargetUserActivation
(
aEvent
aTargetContent
)
;
break
;
}
case
eMouseUp
:
{
switch
(
mouseEvent
-
>
button
)
{
case
WidgetMouseEvent
:
:
eLeftButton
:
if
(
Prefs
:
:
ClickHoldContextMenu
(
)
)
{
KillClickHoldTimer
(
)
;
}
StopTrackingDragGesture
(
)
;
sNormalLMouseEventInProcess
=
false
;
MOZ_FALLTHROUGH
;
case
WidgetMouseEvent
:
:
eRightButton
:
case
WidgetMouseEvent
:
:
eMiddleButton
:
RefPtr
<
EventStateManager
>
esm
=
ESMFromContentOrThis
(
aOverrideClickTarget
)
;
esm
-
>
SetClickCount
(
mouseEvent
aStatus
aOverrideClickTarget
)
;
break
;
}
break
;
}
case
eMouseEnterIntoWidget
:
aEvent
-
>
StopCrossProcessForwarding
(
)
;
break
;
case
eMouseExitFromWidget
:
if
(
XRE_IsContentProcess
(
)
)
{
ClearCachedWidgetCursor
(
mCurrentTarget
)
;
}
aEvent
-
>
StopCrossProcessForwarding
(
)
;
if
(
mouseEvent
-
>
mExitFrom
!
=
WidgetMouseEvent
:
:
eTopLevel
)
{
mouseEvent
-
>
mMessage
=
eMouseMove
;
mouseEvent
-
>
mReason
=
WidgetMouseEvent
:
:
eSynthesized
;
}
else
{
GeneratePointerEnterExit
(
ePointerLeave
mouseEvent
)
;
GenerateMouseEnterExit
(
mouseEvent
)
;
aEvent
-
>
mMessage
=
eVoidEvent
;
break
;
}
MOZ_FALLTHROUGH
;
case
eMouseMove
:
case
ePointerDown
:
if
(
aEvent
-
>
mMessage
=
=
ePointerDown
)
{
PointerEventHandler
:
:
ImplicitlyCapturePointer
(
aTargetFrame
aEvent
)
;
#
ifndef
MOZ_WIDGET_ANDROID
NotifyTargetUserActivation
(
aEvent
aTargetContent
)
;
#
endif
}
MOZ_FALLTHROUGH
;
case
ePointerMove
:
{
if
(
!
mInTouchDrag
)
{
GenerateDragGesture
(
aPresContext
mouseEvent
)
;
}
UpdateCursor
(
aPresContext
aEvent
mCurrentTarget
aStatus
)
;
UpdateLastRefPointOfMouseEvent
(
mouseEvent
)
;
if
(
sIsPointerLocked
)
{
ResetPointerToWindowCenterWhilePointerLocked
(
mouseEvent
)
;
}
UpdateLastPointerPosition
(
mouseEvent
)
;
GenerateMouseEnterExit
(
mouseEvent
)
;
FlushPendingEvents
(
aPresContext
)
;
break
;
}
case
ePointerGotCapture
:
GenerateMouseEnterExit
(
mouseEvent
)
;
break
;
case
eDragStart
:
if
(
Prefs
:
:
ClickHoldContextMenu
(
)
)
{
KillClickHoldTimer
(
)
;
}
break
;
case
eDragOver
:
GenerateDragDropEnterExit
(
aPresContext
aEvent
-
>
AsDragEvent
(
)
)
;
break
;
case
eKeyPress
:
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
keyEvent
-
>
ModifiersMatchWithAccessKey
(
AccessKeyType
:
:
eChrome
)
|
|
keyEvent
-
>
ModifiersMatchWithAccessKey
(
AccessKeyType
:
:
eContent
)
)
{
if
(
IsRemoteTarget
(
GetFocusedContent
(
)
)
)
{
if
(
CheckIfEventMatchesAccessKey
(
keyEvent
aPresContext
)
)
{
keyEvent
-
>
StopPropagation
(
)
;
keyEvent
-
>
MarkAsWaitingReplyFromRemoteProcess
(
)
;
}
}
else
{
AutoTArray
<
uint32_t
10
>
accessCharCodes
;
keyEvent
-
>
GetAccessKeyCandidates
(
accessCharCodes
)
;
if
(
HandleAccessKey
(
keyEvent
aPresContext
accessCharCodes
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
}
}
MOZ_FALLTHROUGH
;
case
eKeyDown
:
if
(
aEvent
-
>
mMessage
=
=
eKeyDown
)
{
NotifyTargetUserActivation
(
aEvent
aTargetContent
)
;
}
MOZ_FALLTHROUGH
;
case
eKeyUp
:
{
nsIContent
*
content
=
GetFocusedContent
(
)
;
if
(
content
)
mCurrentTargetContent
=
content
;
RefPtr
<
TextComposition
>
composition
=
IMEStateManager
:
:
GetTextCompositionFor
(
aPresContext
)
;
aEvent
-
>
AsKeyboardEvent
(
)
-
>
mIsComposing
=
!
!
composition
;
if
(
aEvent
-
>
IsWaitingReplyFromRemoteProcess
(
)
&
&
!
aEvent
-
>
PropagationStopped
(
)
&
&
!
IsRemoteTarget
(
content
)
)
{
aEvent
-
>
ResetWaitingReplyFromRemoteProcessState
(
)
;
}
}
break
;
case
eWheel
:
case
eWheelOperationStart
:
case
eWheelOperationEnd
:
{
NS_ASSERTION
(
aEvent
-
>
IsTrusted
(
)
"
Untrusted
wheel
event
shouldn
'
t
be
here
"
)
;
nsIContent
*
content
=
GetFocusedContent
(
)
;
if
(
content
)
{
mCurrentTargetContent
=
content
;
}
if
(
aEvent
-
>
mMessage
!
=
eWheel
)
{
break
;
}
WidgetWheelEvent
*
wheelEvent
=
aEvent
-
>
AsWheelEvent
(
)
;
WheelPrefs
:
:
GetInstance
(
)
-
>
ApplyUserPrefsToDelta
(
wheelEvent
)
;
if
(
!
wheelEvent
-
>
IsAllowedToDispatchDOMEvent
(
)
)
{
break
;
}
DeltaAccumulator
:
:
GetInstance
(
)
-
>
InitLineOrPageDelta
(
aTargetFrame
this
wheelEvent
)
;
}
break
;
case
eSetSelection
:
IMEStateManager
:
:
HandleSelectionEvent
(
aPresContext
GetFocusedContent
(
)
aEvent
-
>
AsSelectionEvent
(
)
)
;
break
;
case
eContentCommandCut
:
case
eContentCommandCopy
:
case
eContentCommandPaste
:
case
eContentCommandDelete
:
case
eContentCommandUndo
:
case
eContentCommandRedo
:
case
eContentCommandPasteTransferable
:
case
eContentCommandLookUpDictionary
:
DoContentCommandEvent
(
aEvent
-
>
AsContentCommandEvent
(
)
)
;
break
;
case
eContentCommandScroll
:
DoContentCommandScrollEvent
(
aEvent
-
>
AsContentCommandEvent
(
)
)
;
break
;
case
eCompositionStart
:
if
(
aEvent
-
>
IsTrusted
(
)
)
{
WidgetCompositionEvent
*
compositionEvent
=
aEvent
-
>
AsCompositionEvent
(
)
;
WidgetQueryContentEvent
selectedText
(
true
eQuerySelectedText
compositionEvent
-
>
mWidget
)
;
HandleQueryContentEvent
(
&
selectedText
)
;
NS_ASSERTION
(
selectedText
.
mSucceeded
"
Failed
to
get
selected
text
"
)
;
compositionEvent
-
>
mData
=
selectedText
.
mReply
.
mString
;
}
break
;
case
eTouchEnd
:
NotifyTargetUserActivation
(
aEvent
aTargetContent
)
;
break
;
default
:
break
;
}
return
NS_OK
;
}
void
EventStateManager
:
:
NotifyTargetUserActivation
(
WidgetEvent
*
aEvent
nsIContent
*
aTargetContent
)
{
if
(
!
aEvent
-
>
IsTrusted
(
)
)
{
return
;
}
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
&
&
!
mouseEvent
-
>
IsReal
(
)
)
{
return
;
}
nsCOMPtr
<
nsINode
>
node
=
do_QueryInterface
(
aTargetContent
)
;
if
(
!
node
)
{
return
;
}
nsIDocument
*
doc
=
node
-
>
OwnerDoc
(
)
;
if
(
!
doc
|
|
doc
-
>
HasBeenUserActivated
(
)
)
{
return
;
}
MOZ_ASSERT
(
aEvent
-
>
mMessage
=
=
eKeyDown
|
|
aEvent
-
>
mMessage
=
=
eMouseDown
|
|
#
ifndef
MOZ_WIDGET_ANDROID
aEvent
-
>
mMessage
=
=
ePointerDown
|
|
#
endif
aEvent
-
>
mMessage
=
=
eTouchEnd
)
;
doc
-
>
NotifyUserActivation
(
)
;
}
already_AddRefed
<
EventStateManager
>
EventStateManager
:
:
ESMFromContentOrThis
(
nsIContent
*
aContent
)
{
if
(
aContent
)
{
nsIPresShell
*
shell
=
aContent
-
>
OwnerDoc
(
)
-
>
GetShell
(
)
;
if
(
shell
)
{
nsPresContext
*
prescontext
=
shell
-
>
GetPresContext
(
)
;
if
(
prescontext
)
{
RefPtr
<
EventStateManager
>
esm
=
prescontext
-
>
EventStateManager
(
)
;
if
(
esm
)
{
return
esm
.
forget
(
)
;
}
}
}
}
RefPtr
<
EventStateManager
>
esm
=
this
;
return
esm
.
forget
(
)
;
}
void
EventStateManager
:
:
HandleQueryContentEvent
(
WidgetQueryContentEvent
*
aEvent
)
{
switch
(
aEvent
-
>
mMessage
)
{
case
eQuerySelectedText
:
case
eQueryTextContent
:
case
eQueryCaretRect
:
case
eQueryTextRect
:
case
eQueryEditorRect
:
if
(
!
IsTargetCrossProcess
(
aEvent
)
)
{
break
;
}
GetCrossProcessTarget
(
)
-
>
HandleQueryContentEvent
(
*
aEvent
)
;
return
;
case
eQueryContentState
:
case
eQuerySelectionAsTransferable
:
case
eQueryCharacterAtPoint
:
case
eQueryDOMWidgetHittest
:
case
eQueryTextRectArray
:
break
;
default
:
return
;
}
if
(
mIMEContentObserver
)
{
RefPtr
<
IMEContentObserver
>
contentObserver
=
mIMEContentObserver
;
contentObserver
-
>
HandleQueryContentEvent
(
aEvent
)
;
return
;
}
ContentEventHandler
handler
(
mPresContext
)
;
handler
.
HandleQueryContentEvent
(
aEvent
)
;
}
static
AccessKeyType
GetAccessKeyTypeFor
(
nsISupports
*
aDocShell
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
treeItem
(
do_QueryInterface
(
aDocShell
)
)
;
if
(
!
treeItem
)
{
return
AccessKeyType
:
:
eNone
;
}
switch
(
treeItem
-
>
ItemType
(
)
)
{
case
nsIDocShellTreeItem
:
:
typeChrome
:
return
AccessKeyType
:
:
eChrome
;
case
nsIDocShellTreeItem
:
:
typeContent
:
return
AccessKeyType
:
:
eContent
;
default
:
return
AccessKeyType
:
:
eNone
;
}
}
static
bool
IsAccessKeyTarget
(
nsIContent
*
aContent
nsIFrame
*
aFrame
nsAString
&
aKey
)
{
nsString
contentKey
;
if
(
!
aContent
-
>
IsElement
(
)
|
|
!
aContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
accesskey
contentKey
)
|
|
!
contentKey
.
Equals
(
aKey
nsCaseInsensitiveStringComparator
(
)
)
)
return
false
;
if
(
!
aContent
-
>
OwnerDoc
(
)
-
>
IsXULDocument
(
)
&
&
!
aContent
-
>
IsXULElement
(
)
)
return
true
;
if
(
!
aFrame
)
return
false
;
if
(
aFrame
-
>
IsFocusable
(
)
)
return
true
;
if
(
!
aFrame
-
>
IsVisibleConsideringAncestors
(
)
)
return
false
;
nsCOMPtr
<
nsIDOMXULControlElement
>
control
(
do_QueryInterface
(
aContent
)
)
;
if
(
control
)
return
true
;
if
(
aContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
area
nsGkAtoms
:
:
label
nsGkAtoms
:
:
legend
)
)
{
return
true
;
}
if
(
aContent
-
>
IsXULElement
(
nsGkAtoms
:
:
label
)
)
{
return
true
;
}
return
false
;
}
bool
EventStateManager
:
:
CheckIfEventMatchesAccessKey
(
WidgetKeyboardEvent
*
aEvent
nsPresContext
*
aPresContext
)
{
AutoTArray
<
uint32_t
10
>
accessCharCodes
;
aEvent
-
>
GetAccessKeyCandidates
(
accessCharCodes
)
;
return
WalkESMTreeToHandleAccessKey
(
const_cast
<
WidgetKeyboardEvent
*
>
(
aEvent
)
aPresContext
accessCharCodes
nullptr
eAccessKeyProcessingNormal
false
)
;
}
bool
EventStateManager
:
:
LookForAccessKeyAndExecute
(
nsTArray
<
uint32_t
>
&
aAccessCharCodes
bool
aIsTrustedEvent
bool
aExecute
)
{
int32_t
count
start
=
-
1
;
nsIContent
*
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
)
{
start
=
mAccessKeys
.
IndexOf
(
focusedContent
)
;
if
(
start
=
=
-
1
&
&
focusedContent
-
>
GetBindingParent
(
)
)
start
=
mAccessKeys
.
IndexOf
(
focusedContent
-
>
GetBindingParent
(
)
)
;
}
nsIContent
*
content
;
nsIFrame
*
frame
;
int32_t
length
=
mAccessKeys
.
Count
(
)
;
for
(
uint32_t
i
=
0
;
i
<
aAccessCharCodes
.
Length
(
)
;
+
+
i
)
{
uint32_t
ch
=
aAccessCharCodes
[
i
]
;
nsAutoString
accessKey
;
AppendUCS4ToUTF16
(
ch
accessKey
)
;
for
(
count
=
1
;
count
<
=
length
;
+
+
count
)
{
content
=
mAccessKeys
[
(
start
+
count
)
%
length
]
;
frame
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
IsAccessKeyTarget
(
content
frame
accessKey
)
)
{
if
(
!
aExecute
)
{
return
true
;
}
bool
shouldActivate
=
Prefs
:
:
KeyCausesActivation
(
)
;
while
(
shouldActivate
&
&
+
+
count
<
=
length
)
{
nsIContent
*
oc
=
mAccessKeys
[
(
start
+
count
)
%
length
]
;
nsIFrame
*
of
=
oc
-
>
GetPrimaryFrame
(
)
;
if
(
IsAccessKeyTarget
(
oc
of
accessKey
)
)
shouldActivate
=
false
;
}
bool
focusChanged
=
false
;
if
(
shouldActivate
)
{
focusChanged
=
content
-
>
PerformAccesskey
(
shouldActivate
aIsTrustedEvent
)
;
}
else
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
nsCOMPtr
<
nsIDOMElement
>
element
=
do_QueryInterface
(
content
)
;
fm
-
>
SetFocus
(
element
nsIFocusManager
:
:
FLAG_BYKEY
)
;
focusChanged
=
true
;
}
}
if
(
focusChanged
&
&
aIsTrustedEvent
)
{
nsIDocShell
*
docShell
=
mPresContext
-
>
GetDocShell
(
)
;
nsCOMPtr
<
nsITabChild
>
child
=
docShell
?
docShell
-
>
GetTabChild
(
)
:
nullptr
;
if
(
child
)
{
child
-
>
SendRequestFocus
(
false
)
;
}
}
return
true
;
}
}
}
return
false
;
}
void
EventStateManager
:
:
GetAccessKeyLabelPrefix
(
Element
*
aElement
nsAString
&
aPrefix
)
{
aPrefix
.
Truncate
(
)
;
nsAutoString
separator
modifierText
;
nsContentUtils
:
:
GetModifierSeparatorText
(
separator
)
;
AccessKeyType
accessKeyType
=
GetAccessKeyTypeFor
(
aElement
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
)
;
if
(
accessKeyType
=
=
AccessKeyType
:
:
eNone
)
{
return
;
}
Modifiers
modifiers
=
WidgetKeyboardEvent
:
:
AccessKeyModifiers
(
accessKeyType
)
;
if
(
modifiers
=
=
MODIFIER_NONE
)
{
return
;
}
if
(
modifiers
&
MODIFIER_CONTROL
)
{
nsContentUtils
:
:
GetControlText
(
modifierText
)
;
aPrefix
.
Append
(
modifierText
+
separator
)
;
}
if
(
modifiers
&
MODIFIER_META
)
{
nsContentUtils
:
:
GetMetaText
(
modifierText
)
;
aPrefix
.
Append
(
modifierText
+
separator
)
;
}
if
(
modifiers
&
MODIFIER_OS
)
{
nsContentUtils
:
:
GetOSText
(
modifierText
)
;
aPrefix
.
Append
(
modifierText
+
separator
)
;
}
if
(
modifiers
&
MODIFIER_ALT
)
{
nsContentUtils
:
:
GetAltText
(
modifierText
)
;
aPrefix
.
Append
(
modifierText
+
separator
)
;
}
if
(
modifiers
&
MODIFIER_SHIFT
)
{
nsContentUtils
:
:
GetShiftText
(
modifierText
)
;
aPrefix
.
Append
(
modifierText
+
separator
)
;
}
}
struct
MOZ_STACK_CLASS
AccessKeyInfo
{
WidgetKeyboardEvent
*
event
;
nsTArray
<
uint32_t
>
&
charCodes
;
AccessKeyInfo
(
WidgetKeyboardEvent
*
aEvent
nsTArray
<
uint32_t
>
&
aCharCodes
)
:
event
(
aEvent
)
charCodes
(
aCharCodes
)
{
}
}
;
static
bool
HandleAccessKeyInRemoteChild
(
TabParent
*
aTabParent
void
*
aArg
)
{
AccessKeyInfo
*
accessKeyInfo
=
static_cast
<
AccessKeyInfo
*
>
(
aArg
)
;
bool
active
;
aTabParent
-
>
GetDocShellIsActive
(
&
active
)
;
if
(
active
)
{
accessKeyInfo
-
>
event
-
>
StopPropagation
(
)
;
accessKeyInfo
-
>
event
-
>
MarkAsWaitingReplyFromRemoteProcess
(
)
;
aTabParent
-
>
HandleAccessKey
(
*
accessKeyInfo
-
>
event
accessKeyInfo
-
>
charCodes
)
;
return
true
;
}
return
false
;
}
bool
EventStateManager
:
:
WalkESMTreeToHandleAccessKey
(
WidgetKeyboardEvent
*
aEvent
nsPresContext
*
aPresContext
nsTArray
<
uint32_t
>
&
aAccessCharCodes
nsIDocShellTreeItem
*
aBubbledFrom
ProcessingAccessKeyState
aAccessKeyState
bool
aExecute
)
{
EnsureDocument
(
mPresContext
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
aPresContext
-
>
GetDocShell
(
)
;
if
(
NS_WARN_IF
(
!
docShell
)
|
|
NS_WARN_IF
(
!
mDocument
)
)
{
return
false
;
}
AccessKeyType
accessKeyType
=
GetAccessKeyTypeFor
(
docShell
)
;
if
(
accessKeyType
=
=
AccessKeyType
:
:
eNone
)
{
return
false
;
}
if
(
mAccessKeys
.
Count
(
)
>
0
&
&
aEvent
-
>
ModifiersMatchWithAccessKey
(
accessKeyType
)
)
{
if
(
LookForAccessKeyAndExecute
(
aAccessCharCodes
aEvent
-
>
IsTrusted
(
)
aExecute
)
)
{
return
true
;
}
}
int32_t
childCount
;
docShell
-
>
GetChildCount
(
&
childCount
)
;
for
(
int32_t
counter
=
0
;
counter
<
childCount
;
counter
+
+
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
subShellItem
;
docShell
-
>
GetChildAt
(
counter
getter_AddRefs
(
subShellItem
)
)
;
if
(
aAccessKeyState
=
=
eAccessKeyProcessingUp
&
&
subShellItem
=
=
aBubbledFrom
)
{
continue
;
}
nsCOMPtr
<
nsIDocShell
>
subDS
=
do_QueryInterface
(
subShellItem
)
;
if
(
subDS
&
&
IsShellVisible
(
subDS
)
)
{
nsCOMPtr
<
nsIPresShell
>
subPS
=
subDS
-
>
GetPresShell
(
)
;
if
(
!
subPS
)
{
continue
;
}
nsPresContext
*
subPC
=
subPS
-
>
GetPresContext
(
)
;
EventStateManager
*
esm
=
static_cast
<
EventStateManager
*
>
(
subPC
-
>
EventStateManager
(
)
)
;
if
(
esm
&
&
esm
-
>
WalkESMTreeToHandleAccessKey
(
aEvent
subPC
aAccessCharCodes
nullptr
eAccessKeyProcessingDown
aExecute
)
)
{
return
true
;
}
}
}
if
(
eAccessKeyProcessingDown
!
=
aAccessKeyState
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
parentShellItem
;
docShell
-
>
GetParent
(
getter_AddRefs
(
parentShellItem
)
)
;
nsCOMPtr
<
nsIDocShell
>
parentDS
=
do_QueryInterface
(
parentShellItem
)
;
if
(
parentDS
)
{
nsCOMPtr
<
nsIPresShell
>
parentPS
=
parentDS
-
>
GetPresShell
(
)
;
NS_ASSERTION
(
parentPS
"
Our
PresShell
exists
but
the
parent
'
s
does
not
?
"
)
;
nsPresContext
*
parentPC
=
parentPS
-
>
GetPresContext
(
)
;
NS_ASSERTION
(
parentPC
"
PresShell
without
PresContext
"
)
;
EventStateManager
*
esm
=
static_cast
<
EventStateManager
*
>
(
parentPC
-
>
EventStateManager
(
)
)
;
if
(
esm
&
&
esm
-
>
WalkESMTreeToHandleAccessKey
(
aEvent
parentPC
aAccessCharCodes
docShell
eAccessKeyProcessingDown
aExecute
)
)
{
return
true
;
}
}
}
if
(
aExecute
&
&
aEvent
-
>
ModifiersMatchWithAccessKey
(
AccessKeyType
:
:
eContent
)
&
&
mDocument
&
&
mDocument
-
>
GetWindow
(
)
)
{
if
(
TabParent
:
:
GetFrom
(
GetFocusedContent
(
)
)
)
{
MOZ_ASSERT
(
aEvent
-
>
IsHandledInRemoteProcess
(
)
|
|
!
aEvent
-
>
IsWaitingReplyFromRemoteProcess
(
)
)
;
}
else
if
(
!
aEvent
-
>
IsHandledInRemoteProcess
(
)
)
{
AccessKeyInfo
accessKeyInfo
(
aEvent
aAccessCharCodes
)
;
nsContentUtils
:
:
CallOnAllRemoteChildren
(
mDocument
-
>
GetWindow
(
)
HandleAccessKeyInRemoteChild
&
accessKeyInfo
)
;
}
}
return
false
;
}
void
EventStateManager
:
:
DispatchCrossProcessEvent
(
WidgetEvent
*
aEvent
nsFrameLoader
*
aFrameLoader
nsEventStatus
*
aStatus
)
{
TabParent
*
remote
=
TabParent
:
:
GetFrom
(
aFrameLoader
)
;
if
(
!
remote
)
{
return
;
}
switch
(
aEvent
-
>
mClass
)
{
case
eMouseEventClass
:
{
remote
-
>
SendRealMouseEvent
(
*
aEvent
-
>
AsMouseEvent
(
)
)
;
return
;
}
case
eKeyboardEventClass
:
{
remote
-
>
SendRealKeyEvent
(
*
aEvent
-
>
AsKeyboardEvent
(
)
)
;
return
;
}
case
eWheelEventClass
:
{
remote
-
>
SendMouseWheelEvent
(
*
aEvent
-
>
AsWheelEvent
(
)
)
;
return
;
}
case
eTouchEventClass
:
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
remote
-
>
SendRealTouchEvent
(
*
aEvent
-
>
AsTouchEvent
(
)
)
;
return
;
}
case
eDragEventClass
:
{
RefPtr
<
TabParent
>
tabParent
=
remote
;
if
(
tabParent
-
>
Manager
(
)
-
>
IsContentParent
(
)
)
{
tabParent
-
>
Manager
(
)
-
>
AsContentParent
(
)
-
>
MaybeInvokeDragSession
(
tabParent
)
;
}
nsCOMPtr
<
nsIDragSession
>
dragSession
=
nsContentUtils
:
:
GetDragSession
(
)
;
uint32_t
dropEffect
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
;
uint32_t
action
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
;
nsCString
principalURISpec
;
if
(
dragSession
)
{
dragSession
-
>
DragEventDispatchedToChildProcess
(
)
;
dragSession
-
>
GetDragAction
(
&
action
)
;
dragSession
-
>
GetTriggeringPrincipalURISpec
(
principalURISpec
)
;
RefPtr
<
DataTransfer
>
initialDataTransfer
=
dragSession
-
>
GetDataTransfer
(
)
;
if
(
initialDataTransfer
)
{
dropEffect
=
initialDataTransfer
-
>
DropEffectInt
(
)
;
}
}
tabParent
-
>
SendRealDragEvent
(
*
aEvent
-
>
AsDragEvent
(
)
action
dropEffect
principalURISpec
)
;
return
;
}
case
ePluginEventClass
:
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
remote
-
>
SendPluginEvent
(
*
aEvent
-
>
AsPluginEvent
(
)
)
;
return
;
}
default
:
{
MOZ_CRASH
(
"
Attempt
to
send
non
-
whitelisted
event
?
"
)
;
}
}
}
bool
EventStateManager
:
:
IsRemoteTarget
(
nsIContent
*
target
)
{
return
!
!
TabParent
:
:
GetFrom
(
target
)
;
}
bool
EventStateManager
:
:
HandleCrossProcessEvent
(
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
)
{
if
(
*
aStatus
=
=
nsEventStatus_eConsumeNoDefault
|
|
!
aEvent
-
>
CanBeSentToRemoteProcess
(
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
aEvent
-
>
HasBeenPostedToRemoteProcess
(
)
"
Why
do
we
need
to
post
same
event
to
remote
processes
again
?
"
)
;
AutoTArray
<
nsCOMPtr
<
nsIContent
>
1
>
targets
;
if
(
aEvent
-
>
mClass
!
=
eTouchEventClass
|
|
aEvent
-
>
mMessage
=
=
eTouchStart
)
{
nsIFrame
*
frame
=
aEvent
-
>
mMessage
=
=
eDragExit
?
sLastDragOverFrame
.
GetFrame
(
)
:
GetEventTarget
(
)
;
nsIContent
*
target
=
frame
?
frame
-
>
GetContent
(
)
:
nullptr
;
if
(
IsRemoteTarget
(
target
)
)
{
targets
.
AppendElement
(
target
)
;
}
}
else
{
const
WidgetTouchEvent
:
:
TouchArray
&
touches
=
aEvent
-
>
AsTouchEvent
(
)
-
>
mTouches
;
for
(
uint32_t
i
=
0
;
i
<
touches
.
Length
(
)
;
+
+
i
)
{
Touch
*
touch
=
touches
[
i
]
;
if
(
!
touch
|
|
!
touch
-
>
mChanged
)
{
continue
;
}
nsCOMPtr
<
EventTarget
>
targetPtr
=
touch
-
>
mTarget
;
if
(
!
targetPtr
)
{
continue
;
}
nsCOMPtr
<
nsIContent
>
target
=
do_QueryInterface
(
targetPtr
)
;
if
(
IsRemoteTarget
(
target
)
&
&
!
targets
.
Contains
(
target
)
)
{
targets
.
AppendElement
(
target
)
;
}
}
}
if
(
targets
.
Length
(
)
=
=
0
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
targets
.
Length
(
)
;
+
+
i
)
{
nsIContent
*
target
=
targets
[
i
]
;
nsCOMPtr
<
nsIFrameLoaderOwner
>
loaderOwner
=
do_QueryInterface
(
target
)
;
if
(
!
loaderOwner
)
{
continue
;
}
RefPtr
<
nsFrameLoader
>
frameLoader
=
loaderOwner
-
>
GetFrameLoader
(
)
;
if
(
!
frameLoader
)
{
continue
;
}
DispatchCrossProcessEvent
(
aEvent
frameLoader
aStatus
)
;
}
return
aEvent
-
>
HasBeenPostedToRemoteProcess
(
)
;
}
void
EventStateManager
:
:
CreateClickHoldTimer
(
nsPresContext
*
inPresContext
nsIFrame
*
inDownFrame
WidgetGUIEvent
*
inMouseDownEvent
)
{
if
(
!
inMouseDownEvent
-
>
IsTrusted
(
)
|
|
IsRemoteTarget
(
mGestureDownContent
)
|
|
sIsPointerLocked
)
{
return
;
}
if
(
mClickHoldTimer
)
{
mClickHoldTimer
-
>
Cancel
(
)
;
mClickHoldTimer
=
nullptr
;
}
if
(
mGestureDownContent
)
{
if
(
nsContentUtils
:
:
HasNonEmptyAttr
(
mGestureDownContent
kNameSpaceID_None
nsGkAtoms
:
:
popup
)
)
return
;
if
(
mGestureDownContent
-
>
IsXULElement
(
nsGkAtoms
:
:
menubutton
)
)
return
;
}
int32_t
clickHoldDelay
=
Preferences
:
:
GetInt
(
"
ui
.
click_hold_context_menus
.
delay
"
500
)
;
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mClickHoldTimer
)
sClickHoldCallback
this
clickHoldDelay
nsITimer
:
:
TYPE_ONE_SHOT
"
EventStateManager
:
:
CreateClickHoldTimer
"
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
void
EventStateManager
:
:
KillClickHoldTimer
(
)
{
if
(
mClickHoldTimer
)
{
mClickHoldTimer
-
>
Cancel
(
)
;
mClickHoldTimer
=
nullptr
;
}
}
void
EventStateManager
:
:
sClickHoldCallback
(
nsITimer
*
aTimer
void
*
aESM
)
{
RefPtr
<
EventStateManager
>
self
=
static_cast
<
EventStateManager
*
>
(
aESM
)
;
if
(
self
)
{
self
-
>
FireContextClick
(
)
;
}
}
void
EventStateManager
:
:
FireContextClick
(
)
{
if
(
!
mGestureDownContent
|
|
!
mPresContext
|
|
sIsPointerLocked
)
{
return
;
}
#
ifdef
XP_MACOSX
if
(
!
CGEventSourceButtonState
(
kCGEventSourceStateCombinedSessionState
kCGMouseButtonLeft
)
)
return
;
#
endif
nsEventStatus
status
=
nsEventStatus_eIgnore
;
mCurrentTarget
=
mPresContext
-
>
GetPrimaryFrameFor
(
mGestureDownContent
)
;
nsCOMPtr
<
nsIWidget
>
targetWidget
;
if
(
mCurrentTarget
&
&
(
targetWidget
=
mCurrentTarget
-
>
GetNearestWidget
(
)
)
)
{
NS_ASSERTION
(
mPresContext
=
=
mCurrentTarget
-
>
PresContext
(
)
"
a
prescontext
returned
a
primary
frame
that
didn
'
t
belong
to
it
?
"
)
;
bool
allowedToDispatch
=
true
;
if
(
mGestureDownContent
-
>
IsAnyOfXULElements
(
nsGkAtoms
:
:
scrollbar
nsGkAtoms
:
:
scrollbarbutton
nsGkAtoms
:
:
button
)
)
{
allowedToDispatch
=
false
;
}
else
if
(
mGestureDownContent
-
>
IsXULElement
(
nsGkAtoms
:
:
toolbarbutton
)
)
{
if
(
nsContentUtils
:
:
HasNonEmptyAttr
(
mGestureDownContent
kNameSpaceID_None
nsGkAtoms
:
:
container
)
)
{
allowedToDispatch
=
false
;
}
else
{
if
(
mGestureDownContent
-
>
IsElement
(
)
&
&
mGestureDownContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
open
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
allowedToDispatch
=
false
;
}
}
}
else
if
(
mGestureDownContent
-
>
IsHTMLElement
(
)
)
{
nsCOMPtr
<
nsIFormControl
>
formCtrl
(
do_QueryInterface
(
mGestureDownContent
)
)
;
if
(
formCtrl
)
{
allowedToDispatch
=
formCtrl
-
>
IsTextOrNumberControl
(
false
)
|
|
formCtrl
-
>
ControlType
(
)
=
=
NS_FORM_INPUT_FILE
;
}
else
if
(
mGestureDownContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
embed
nsGkAtoms
:
:
object
nsGkAtoms
:
:
label
)
)
{
allowedToDispatch
=
false
;
}
}
if
(
allowedToDispatch
)
{
WidgetMouseEvent
event
(
true
eContextMenu
targetWidget
WidgetMouseEvent
:
:
eReal
)
;
event
.
mClickCount
=
1
;
FillInEventFromGestureDown
(
&
event
)
;
if
(
mCurrentTarget
)
{
RefPtr
<
nsFrameSelection
>
frameSel
=
mCurrentTarget
-
>
GetFrameSelection
(
)
;
if
(
frameSel
&
&
frameSel
-
>
GetDragState
(
)
)
{
frameSel
-
>
SetDragState
(
false
)
;
}
}
nsIDocument
*
doc
=
mGestureDownContent
-
>
GetComposedDoc
(
)
;
AutoHandlingUserInputStatePusher
userInpStatePusher
(
true
&
event
doc
)
;
EventDispatcher
:
:
Dispatch
(
mGestureDownContent
mPresContext
&
event
nullptr
&
status
)
;
}
}
if
(
status
=
=
nsEventStatus_eConsumeNoDefault
)
{
StopTrackingDragGesture
(
)
;
}
KillClickHoldTimer
(
)
;
}
void
EventStateManager
:
:
BeginTrackingDragGesture
(
nsPresContext
*
aPresContext
WidgetMouseEvent
*
inDownEvent
nsIFrame
*
inDownFrame
)
{
if
(
!
inDownEvent
-
>
mWidget
)
{
return
;
}
mGestureDownPoint
=
inDownEvent
-
>
mRefPoint
+
inDownEvent
-
>
mWidget
-
>
WidgetToScreenOffset
(
)
;
if
(
inDownFrame
)
{
inDownFrame
-
>
GetContentForEvent
(
inDownEvent
getter_AddRefs
(
mGestureDownContent
)
)
;
mGestureDownFrameOwner
=
inDownFrame
-
>
GetContent
(
)
;
if
(
!
mGestureDownFrameOwner
)
{
mGestureDownFrameOwner
=
mGestureDownContent
;
}
}
mGestureModifiers
=
inDownEvent
-
>
mModifiers
;
mGestureDownButtons
=
inDownEvent
-
>
buttons
;
if
(
inDownEvent
-
>
mMessage
!
=
eMouseTouchDrag
&
&
Prefs
:
:
ClickHoldContextMenu
(
)
)
{
CreateClickHoldTimer
(
aPresContext
inDownFrame
inDownEvent
)
;
}
}
void
EventStateManager
:
:
BeginTrackingRemoteDragGesture
(
nsIContent
*
aContent
)
{
mGestureDownContent
=
aContent
;
mGestureDownFrameOwner
=
aContent
;
}
void
EventStateManager
:
:
StopTrackingDragGesture
(
)
{
mGestureDownContent
=
nullptr
;
mGestureDownFrameOwner
=
nullptr
;
}
void
EventStateManager
:
:
FillInEventFromGestureDown
(
WidgetMouseEvent
*
aEvent
)
{
NS_ASSERTION
(
aEvent
-
>
mWidget
=
=
mCurrentTarget
-
>
GetNearestWidget
(
)
"
Incorrect
widget
in
event
"
)
;
aEvent
-
>
mRefPoint
=
mGestureDownPoint
-
aEvent
-
>
mWidget
-
>
WidgetToScreenOffset
(
)
;
aEvent
-
>
mModifiers
=
mGestureModifiers
;
aEvent
-
>
buttons
=
mGestureDownButtons
;
}
void
EventStateManager
:
:
MaybeFirePointerCancel
(
WidgetInputEvent
*
aEvent
)
{
nsCOMPtr
<
nsIPresShell
>
shell
=
mPresContext
-
>
GetPresShell
(
)
;
AutoWeakFrame
targetFrame
=
mCurrentTarget
;
if
(
!
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
|
|
!
shell
|
|
!
targetFrame
)
{
return
;
}
nsCOMPtr
<
nsIContent
>
content
;
targetFrame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
content
)
)
;
if
(
!
content
)
{
return
;
}
nsEventStatus
status
=
nsEventStatus_eIgnore
;
if
(
WidgetMouseEvent
*
aMouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
)
{
WidgetPointerEvent
event
(
*
aMouseEvent
)
;
PointerEventHandler
:
:
InitPointerEventFromMouse
(
&
event
aMouseEvent
ePointerCancel
)
;
event
.
convertToPointer
=
false
;
shell
-
>
HandleEventWithTarget
(
&
event
targetFrame
content
&
status
)
;
}
else
if
(
WidgetTouchEvent
*
aTouchEvent
=
aEvent
-
>
AsTouchEvent
(
)
)
{
WidgetPointerEvent
event
(
aTouchEvent
-
>
IsTrusted
(
)
ePointerCancel
aTouchEvent
-
>
mWidget
)
;
PointerEventHandler
:
:
InitPointerEventFromTouch
(
&
event
aTouchEvent
aTouchEvent
-
>
mTouches
[
0
]
true
)
;
event
.
convertToPointer
=
false
;
shell
-
>
HandleEventWithTarget
(
&
event
targetFrame
content
&
status
)
;
}
else
{
MOZ_ASSERT
(
false
)
;
}
mCurrentTarget
=
targetFrame
;
}
void
EventStateManager
:
:
GenerateDragGesture
(
nsPresContext
*
aPresContext
WidgetInputEvent
*
aEvent
)
{
NS_ASSERTION
(
aPresContext
"
This
shouldn
'
t
happen
.
"
)
;
if
(
IsTrackingDragGesture
(
)
)
{
mCurrentTarget
=
mGestureDownFrameOwner
-
>
GetPrimaryFrame
(
)
;
if
(
!
mCurrentTarget
|
|
!
mCurrentTarget
-
>
GetNearestWidget
(
)
)
{
StopTrackingDragGesture
(
)
;
return
;
}
if
(
mCurrentTarget
)
{
RefPtr
<
nsFrameSelection
>
frameSel
=
mCurrentTarget
-
>
GetFrameSelection
(
)
;
if
(
frameSel
&
&
frameSel
-
>
GetDragState
(
)
)
{
StopTrackingDragGesture
(
)
;
return
;
}
}
if
(
nsIPresShell
:
:
IsMouseCapturePreventingDrag
(
)
)
{
StopTrackingDragGesture
(
)
;
return
;
}
static
int32_t
pixelThresholdX
=
0
;
static
int32_t
pixelThresholdY
=
0
;
if
(
!
pixelThresholdX
)
{
pixelThresholdX
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_DragThresholdX
0
)
;
pixelThresholdY
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_DragThresholdY
0
)
;
if
(
!
pixelThresholdX
)
pixelThresholdX
=
5
;
if
(
!
pixelThresholdY
)
pixelThresholdY
=
5
;
}
LayoutDeviceIntPoint
pt
=
aEvent
-
>
mWidget
-
>
WidgetToScreenOffset
(
)
+
(
aEvent
-
>
AsTouchEvent
(
)
?
aEvent
-
>
AsTouchEvent
(
)
-
>
mTouches
[
0
]
-
>
mRefPoint
:
aEvent
-
>
mRefPoint
)
;
LayoutDeviceIntPoint
distance
=
pt
-
mGestureDownPoint
;
if
(
Abs
(
distance
.
x
)
>
AssertedCast
<
uint32_t
>
(
pixelThresholdX
)
|
|
Abs
(
distance
.
y
)
>
AssertedCast
<
uint32_t
>
(
pixelThresholdY
)
)
{
if
(
Prefs
:
:
ClickHoldContextMenu
(
)
)
{
KillClickHoldTimer
(
)
;
}
nsCOMPtr
<
nsIDocShell
>
docshell
=
aPresContext
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
{
return
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
docshell
-
>
GetWindow
(
)
;
if
(
!
window
)
return
;
RefPtr
<
DataTransfer
>
dataTransfer
=
new
DataTransfer
(
window
eDragStart
false
-
1
)
;
auto
protectDataTransfer
=
MakeScopeExit
(
[
&
]
{
if
(
dataTransfer
)
{
dataTransfer
-
>
Disconnect
(
)
;
}
}
)
;
nsCOMPtr
<
nsISelection
>
selection
;
nsCOMPtr
<
nsIContent
>
eventContent
targetContent
;
nsCString
principalURISpec
;
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
eventContent
)
)
;
if
(
eventContent
)
DetermineDragTargetAndDefaultData
(
window
eventContent
dataTransfer
getter_AddRefs
(
selection
)
getter_AddRefs
(
targetContent
)
principalURISpec
)
;
StopTrackingDragGesture
(
)
;
if
(
!
targetContent
)
return
;
dataTransfer
-
>
SetParentObject
(
targetContent
)
;
sLastDragOverFrame
=
nullptr
;
nsCOMPtr
<
nsIWidget
>
widget
=
mCurrentTarget
-
>
GetNearestWidget
(
)
;
WidgetDragEvent
startEvent
(
aEvent
-
>
IsTrusted
(
)
eDragStart
widget
)
;
FillInEventFromGestureDown
(
&
startEvent
)
;
startEvent
.
mDataTransfer
=
dataTransfer
;
if
(
aEvent
-
>
AsMouseEvent
(
)
)
{
startEvent
.
inputSource
=
aEvent
-
>
AsMouseEvent
(
)
-
>
inputSource
;
}
else
if
(
aEvent
-
>
AsTouchEvent
(
)
)
{
startEvent
.
inputSource
=
MouseEventBinding
:
:
MOZ_SOURCE_TOUCH
;
}
else
{
MOZ_ASSERT
(
false
)
;
}
nsCOMPtr
<
nsIContent
>
targetBeforeEvent
=
mCurrentTargetContent
;
mCurrentTargetContent
=
targetContent
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
EventDispatcher
:
:
Dispatch
(
targetContent
aPresContext
&
startEvent
nullptr
&
status
)
;
WidgetDragEvent
*
event
=
&
startEvent
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
dataTransfer
"
on
-
datatransfer
-
available
"
nullptr
)
;
}
if
(
status
!
=
nsEventStatus_eConsumeNoDefault
)
{
bool
dragStarted
=
DoDefaultDragStart
(
aPresContext
event
dataTransfer
targetContent
selection
principalURISpec
)
;
if
(
dragStarted
)
{
sActiveESM
=
nullptr
;
MaybeFirePointerCancel
(
aEvent
)
;
aEvent
-
>
StopPropagation
(
)
;
}
}
mCurrentTargetContent
=
targetBeforeEvent
;
}
FlushPendingEvents
(
aPresContext
)
;
}
}
void
EventStateManager
:
:
DetermineDragTargetAndDefaultData
(
nsPIDOMWindowOuter
*
aWindow
nsIContent
*
aSelectionTarget
DataTransfer
*
aDataTransfer
nsISelection
*
*
aSelection
nsIContent
*
*
aTargetNode
nsACString
&
aPrincipalURISpec
)
{
*
aTargetNode
=
nullptr
;
bool
canDrag
;
nsCOMPtr
<
nsIContent
>
dragDataNode
;
bool
wasAlt
=
(
mGestureModifiers
&
MODIFIER_ALT
)
!
=
0
;
nsresult
rv
=
nsContentAreaDragDrop
:
:
GetDragData
(
aWindow
mGestureDownContent
aSelectionTarget
wasAlt
aDataTransfer
&
canDrag
aSelection
getter_AddRefs
(
dragDataNode
)
aPrincipalURISpec
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
canDrag
)
return
;
nsIContent
*
dragContent
=
mGestureDownContent
;
if
(
dragDataNode
)
dragContent
=
dragDataNode
;
else
if
(
*
aSelection
)
dragContent
=
aSelectionTarget
;
nsIContent
*
originalDragContent
=
dragContent
;
if
(
!
*
aSelection
)
{
while
(
dragContent
)
{
if
(
auto
htmlElement
=
nsGenericHTMLElement
:
:
FromNode
(
dragContent
)
)
{
if
(
htmlElement
-
>
Draggable
(
)
)
{
break
;
}
}
else
{
if
(
dragContent
-
>
IsXULElement
(
)
)
{
dragContent
=
mGestureDownContent
;
break
;
}
}
dragContent
=
dragContent
-
>
GetParent
(
)
;
}
}
if
(
!
dragContent
&
&
dragDataNode
)
dragContent
=
dragDataNode
;
if
(
dragContent
)
{
if
(
dragContent
!
=
originalDragContent
)
aDataTransfer
-
>
ClearAll
(
)
;
*
aTargetNode
=
dragContent
;
NS_ADDREF
(
*
aTargetNode
)
;
}
}
bool
EventStateManager
:
:
DoDefaultDragStart
(
nsPresContext
*
aPresContext
WidgetDragEvent
*
aDragEvent
DataTransfer
*
aDataTransfer
nsIContent
*
aDragTarget
nsISelection
*
aSelection
const
nsACString
&
aPrincipalURISpec
)
{
nsCOMPtr
<
nsIDragService
>
dragService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
!
dragService
)
return
false
;
nsCOMPtr
<
nsIDragSession
>
dragSession
;
dragService
-
>
GetCurrentSession
(
getter_AddRefs
(
dragSession
)
)
;
if
(
dragSession
)
return
true
;
uint32_t
count
=
0
;
if
(
aDataTransfer
)
{
count
=
aDataTransfer
-
>
MozItemCount
(
)
;
}
if
(
!
count
)
{
return
false
;
}
nsCOMPtr
<
nsIContent
>
dragTarget
=
aDataTransfer
-
>
GetDragTarget
(
)
;
if
(
!
dragTarget
)
{
dragTarget
=
aDragTarget
;
if
(
!
dragTarget
)
return
false
;
}
uint32_t
action
=
aDataTransfer
-
>
EffectAllowedInt
(
)
;
if
(
action
=
=
nsIDragService
:
:
DRAGDROP_ACTION_UNINITIALIZED
)
action
=
nsIDragService
:
:
DRAGDROP_ACTION_COPY
|
nsIDragService
:
:
DRAGDROP_ACTION_MOVE
|
nsIDragService
:
:
DRAGDROP_ACTION_LINK
;
int32_t
imageX
imageY
;
Element
*
dragImage
=
aDataTransfer
-
>
GetDragImage
(
&
imageX
&
imageY
)
;
nsCOMPtr
<
nsIArray
>
transArray
=
aDataTransfer
-
>
GetTransferables
(
dragTarget
-
>
AsDOMNode
(
)
)
;
if
(
!
transArray
)
return
false
;
RefPtr
<
DataTransfer
>
dataTransfer
;
aDataTransfer
-
>
Clone
(
aDragTarget
eDrop
aDataTransfer
-
>
MozUserCancelled
(
)
false
getter_AddRefs
(
dataTransfer
)
)
;
dataTransfer
-
>
SetDropEffectInt
(
aDataTransfer
-
>
DropEffectInt
(
)
)
;
RefPtr
<
DragEvent
>
event
=
NS_NewDOMDragEvent
(
dragTarget
aPresContext
aDragEvent
)
;
if
(
!
dragImage
&
&
aSelection
)
{
dragService
-
>
InvokeDragSessionWithSelection
(
aSelection
aPrincipalURISpec
transArray
action
event
dataTransfer
)
;
}
else
{
nsCOMPtr
<
nsIScriptableRegion
>
region
;
#
ifdef
MOZ_XUL
if
(
dragTarget
&
&
!
dragImage
)
{
if
(
dragTarget
-
>
NodeInfo
(
)
-
>
Equals
(
nsGkAtoms
:
:
treechildren
kNameSpaceID_XUL
)
)
{
nsTreeBodyFrame
*
treeBody
=
do_QueryFrame
(
dragTarget
-
>
GetPrimaryFrame
(
)
)
;
if
(
treeBody
)
{
treeBody
-
>
GetSelectionRegion
(
getter_AddRefs
(
region
)
)
;
}
}
}
#
endif
dragService
-
>
InvokeDragSessionWithImage
(
dragTarget
-
>
AsDOMNode
(
)
aPrincipalURISpec
transArray
region
action
dragImage
?
dragImage
-
>
AsDOMNode
(
)
:
nullptr
imageX
imageY
event
dataTransfer
)
;
}
return
true
;
}
nsresult
EventStateManager
:
:
GetContentViewer
(
nsIContentViewer
*
*
aCv
)
{
*
aCv
=
nullptr
;
nsPIDOMWindowOuter
*
window
=
mDocument
-
>
GetWindow
(
)
;
if
(
!
window
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWindow
=
window
-
>
GetPrivateRoot
(
)
;
if
(
!
rootWindow
)
return
NS_ERROR_FAILURE
;
TabChild
*
tabChild
=
TabChild
:
:
GetFrom
(
rootWindow
)
;
if
(
!
tabChild
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
mozIDOMWindowProxy
>
activeWindow
;
fm
-
>
GetActiveWindow
(
getter_AddRefs
(
activeWindow
)
)
;
if
(
rootWindow
!
=
activeWindow
)
return
NS_OK
;
}
else
{
if
(
!
tabChild
-
>
ParentIsActive
(
)
)
return
NS_OK
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
contentWindow
=
nsGlobalWindowOuter
:
:
Cast
(
rootWindow
)
-
>
GetContent
(
)
;
if
(
!
contentWindow
)
return
NS_ERROR_FAILURE
;
nsIDocument
*
doc
=
contentWindow
-
>
GetDoc
(
)
;
if
(
!
doc
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsISupports
>
container
=
doc
-
>
GetContainer
(
)
;
if
(
!
container
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIDocShell
>
docshell
=
do_QueryInterface
(
container
)
;
docshell
-
>
GetContentViewer
(
aCv
)
;
if
(
!
*
aCv
)
return
NS_ERROR_FAILURE
;
return
NS_OK
;
}
nsresult
EventStateManager
:
:
ChangeTextSize
(
int32_t
change
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
;
nsresult
rv
=
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cv
)
{
float
textzoom
;
float
zoomMin
=
(
(
float
)
Preferences
:
:
GetInt
(
"
zoom
.
minPercent
"
50
)
)
/
100
;
float
zoomMax
=
(
(
float
)
Preferences
:
:
GetInt
(
"
zoom
.
maxPercent
"
300
)
)
/
100
;
cv
-
>
GetTextZoom
(
&
textzoom
)
;
textzoom
+
=
(
(
float
)
change
)
/
10
;
if
(
textzoom
<
zoomMin
)
textzoom
=
zoomMin
;
else
if
(
textzoom
>
zoomMax
)
textzoom
=
zoomMax
;
cv
-
>
SetTextZoom
(
textzoom
)
;
}
return
NS_OK
;
}
nsresult
EventStateManager
:
:
ChangeFullZoom
(
int32_t
change
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
;
nsresult
rv
=
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
cv
)
{
float
fullzoom
;
float
zoomMin
=
(
(
float
)
Preferences
:
:
GetInt
(
"
zoom
.
minPercent
"
50
)
)
/
100
;
float
zoomMax
=
(
(
float
)
Preferences
:
:
GetInt
(
"
zoom
.
maxPercent
"
300
)
)
/
100
;
cv
-
>
GetFullZoom
(
&
fullzoom
)
;
fullzoom
+
=
(
(
float
)
change
)
/
10
;
if
(
fullzoom
<
zoomMin
)
fullzoom
=
zoomMin
;
else
if
(
fullzoom
>
zoomMax
)
fullzoom
=
zoomMax
;
cv
-
>
SetFullZoom
(
fullzoom
)
;
}
return
NS_OK
;
}
void
EventStateManager
:
:
DoScrollHistory
(
int32_t
direction
)
{
nsCOMPtr
<
nsISupports
>
pcContainer
(
mPresContext
-
>
GetContainerWeak
(
)
)
;
if
(
pcContainer
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
pcContainer
)
)
;
if
(
webNav
)
{
if
(
direction
>
0
)
webNav
-
>
GoBack
(
)
;
else
webNav
-
>
GoForward
(
)
;
}
}
}
void
EventStateManager
:
:
DoScrollZoom
(
nsIFrame
*
aTargetFrame
int32_t
adjustment
)
{
nsIContent
*
content
=
aTargetFrame
-
>
GetContent
(
)
;
if
(
content
&
&
!
content
-
>
IsNodeOfType
(
nsINode
:
:
eHTML_FORM_CONTROL
)
&
&
!
nsContentUtils
:
:
IsInChromeDocshell
(
content
-
>
OwnerDoc
(
)
)
)
{
int32_t
change
=
(
adjustment
>
0
)
?
-
1
:
1
;
EnsureDocument
(
mPresContext
)
;
if
(
Preferences
:
:
GetBool
(
"
browser
.
zoom
.
full
"
)
|
|
content
-
>
OwnerDoc
(
)
-
>
IsSyntheticDocument
(
)
)
{
ChangeFullZoom
(
change
)
;
}
else
{
ChangeTextSize
(
change
)
;
}
nsContentUtils
:
:
DispatchChromeEvent
(
mDocument
static_cast
<
nsIDocument
*
>
(
mDocument
)
NS_LITERAL_STRING
(
"
ZoomChangeUsingMouseWheel
"
)
true
true
)
;
}
}
static
nsIFrame
*
GetParentFrameToScroll
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
)
return
nullptr
;
if
(
aFrame
-
>
StyleDisplay
(
)
-
>
mPosition
=
=
NS_STYLE_POSITION_FIXED
&
&
nsLayoutUtils
:
:
IsReallyFixedPos
(
aFrame
)
)
return
aFrame
-
>
PresContext
(
)
-
>
GetPresShell
(
)
-
>
GetRootScrollFrame
(
)
;
return
aFrame
-
>
GetParent
(
)
;
}
void
EventStateManager
:
:
DispatchLegacyMouseScrollEvents
(
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
nsEventStatus
*
aStatus
)
{
MOZ_ASSERT
(
aEvent
)
;
MOZ_ASSERT
(
aStatus
)
;
if
(
!
aTargetFrame
|
|
*
aStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
;
}
nsIFrame
*
scrollFrame
=
ComputeScrollTargetAndMayAdjustWheelEvent
(
aTargetFrame
aEvent
COMPUTE_LEGACY_MOUSE_SCROLL_EVENT_TARGET
)
;
nsIScrollableFrame
*
scrollTarget
=
do_QueryFrame
(
scrollFrame
)
;
nsPresContext
*
pc
=
scrollFrame
?
scrollFrame
-
>
PresContext
(
)
:
aTargetFrame
-
>
PresContext
(
)
;
nsSize
scrollAmount
=
GetScrollAmount
(
pc
aEvent
scrollTarget
)
;
nsIntSize
scrollAmountInCSSPixels
(
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
scrollAmount
.
width
)
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
scrollAmount
.
height
)
)
;
int32_t
scrollDeltaX
scrollDeltaY
pixelDeltaX
pixelDeltaY
;
switch
(
aEvent
-
>
mDeltaMode
)
{
case
WheelEventBinding
:
:
DOM_DELTA_PAGE
:
scrollDeltaX
=
!
aEvent
-
>
mLineOrPageDeltaX
?
0
:
(
aEvent
-
>
mLineOrPageDeltaX
>
0
?
UIEventBinding
:
:
SCROLL_PAGE_DOWN
:
UIEventBinding
:
:
SCROLL_PAGE_UP
)
;
scrollDeltaY
=
!
aEvent
-
>
mLineOrPageDeltaY
?
0
:
(
aEvent
-
>
mLineOrPageDeltaY
>
0
?
UIEventBinding
:
:
SCROLL_PAGE_DOWN
:
UIEventBinding
:
:
SCROLL_PAGE_UP
)
;
pixelDeltaX
=
RoundDown
(
aEvent
-
>
mDeltaX
*
scrollAmountInCSSPixels
.
width
)
;
pixelDeltaY
=
RoundDown
(
aEvent
-
>
mDeltaY
*
scrollAmountInCSSPixels
.
height
)
;
break
;
case
WheelEventBinding
:
:
DOM_DELTA_LINE
:
scrollDeltaX
=
aEvent
-
>
mLineOrPageDeltaX
;
scrollDeltaY
=
aEvent
-
>
mLineOrPageDeltaY
;
pixelDeltaX
=
RoundDown
(
aEvent
-
>
mDeltaX
*
scrollAmountInCSSPixels
.
width
)
;
pixelDeltaY
=
RoundDown
(
aEvent
-
>
mDeltaY
*
scrollAmountInCSSPixels
.
height
)
;
break
;
case
WheelEventBinding
:
:
DOM_DELTA_PIXEL
:
scrollDeltaX
=
aEvent
-
>
mLineOrPageDeltaX
;
scrollDeltaY
=
aEvent
-
>
mLineOrPageDeltaY
;
pixelDeltaX
=
RoundDown
(
aEvent
-
>
mDeltaX
)
;
pixelDeltaY
=
RoundDown
(
aEvent
-
>
mDeltaY
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
deltaMode
value
comes
"
)
;
}
AutoWeakFrame
targetFrame
(
aTargetFrame
)
;
MOZ_ASSERT
(
*
aStatus
!
=
nsEventStatus_eConsumeNoDefault
&
&
!
aEvent
-
>
DefaultPrevented
(
)
"
If
you
make
legacy
events
dispatched
for
default
prevented
wheel
"
"
event
you
need
to
initialize
stateX
and
stateY
"
)
;
EventState
stateX
stateY
;
if
(
scrollDeltaY
)
{
SendLineScrollEvent
(
aTargetFrame
aEvent
stateY
scrollDeltaY
DELTA_DIRECTION_Y
)
;
if
(
!
targetFrame
.
IsAlive
(
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
if
(
pixelDeltaY
)
{
SendPixelScrollEvent
(
aTargetFrame
aEvent
stateY
pixelDeltaY
DELTA_DIRECTION_Y
)
;
if
(
!
targetFrame
.
IsAlive
(
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
if
(
scrollDeltaX
)
{
SendLineScrollEvent
(
aTargetFrame
aEvent
stateX
scrollDeltaX
DELTA_DIRECTION_X
)
;
if
(
!
targetFrame
.
IsAlive
(
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
if
(
pixelDeltaX
)
{
SendPixelScrollEvent
(
aTargetFrame
aEvent
stateX
pixelDeltaX
DELTA_DIRECTION_X
)
;
if
(
!
targetFrame
.
IsAlive
(
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
if
(
stateY
.
mDefaultPrevented
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
aEvent
-
>
PreventDefault
(
!
stateY
.
mDefaultPreventedByContent
)
;
}
if
(
stateX
.
mDefaultPrevented
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
aEvent
-
>
PreventDefault
(
!
stateX
.
mDefaultPreventedByContent
)
;
}
}
void
EventStateManager
:
:
SendLineScrollEvent
(
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
EventState
&
aState
int32_t
aDelta
DeltaDirection
aDeltaDirection
)
{
nsCOMPtr
<
nsIContent
>
targetContent
=
aTargetFrame
-
>
GetContent
(
)
;
if
(
!
targetContent
)
targetContent
=
GetFocusedContent
(
)
;
if
(
!
targetContent
)
return
;
while
(
targetContent
-
>
IsText
(
)
)
{
targetContent
=
targetContent
-
>
GetParent
(
)
;
}
WidgetMouseScrollEvent
event
(
aEvent
-
>
IsTrusted
(
)
eLegacyMouseLineOrPageScroll
aEvent
-
>
mWidget
)
;
event
.
mFlags
.
mDefaultPrevented
=
aState
.
mDefaultPrevented
;
event
.
mFlags
.
mDefaultPreventedByContent
=
aState
.
mDefaultPreventedByContent
;
event
.
mRefPoint
=
aEvent
-
>
mRefPoint
;
event
.
mTime
=
aEvent
-
>
mTime
;
event
.
mTimeStamp
=
aEvent
-
>
mTimeStamp
;
event
.
mModifiers
=
aEvent
-
>
mModifiers
;
event
.
buttons
=
aEvent
-
>
buttons
;
event
.
mIsHorizontal
=
(
aDeltaDirection
=
=
DELTA_DIRECTION_X
)
;
event
.
mDelta
=
aDelta
;
event
.
inputSource
=
aEvent
-
>
inputSource
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
EventDispatcher
:
:
Dispatch
(
targetContent
aTargetFrame
-
>
PresContext
(
)
&
event
nullptr
&
status
)
;
aState
.
mDefaultPrevented
=
event
.
DefaultPrevented
(
)
|
|
status
=
=
nsEventStatus_eConsumeNoDefault
;
aState
.
mDefaultPreventedByContent
=
event
.
DefaultPreventedByContent
(
)
;
}
void
EventStateManager
:
:
SendPixelScrollEvent
(
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
EventState
&
aState
int32_t
aPixelDelta
DeltaDirection
aDeltaDirection
)
{
nsCOMPtr
<
nsIContent
>
targetContent
=
aTargetFrame
-
>
GetContent
(
)
;
if
(
!
targetContent
)
{
targetContent
=
GetFocusedContent
(
)
;
if
(
!
targetContent
)
return
;
}
while
(
targetContent
-
>
IsText
(
)
)
{
targetContent
=
targetContent
-
>
GetParent
(
)
;
}
WidgetMouseScrollEvent
event
(
aEvent
-
>
IsTrusted
(
)
eLegacyMousePixelScroll
aEvent
-
>
mWidget
)
;
event
.
mFlags
.
mDefaultPrevented
=
aState
.
mDefaultPrevented
;
event
.
mFlags
.
mDefaultPreventedByContent
=
aState
.
mDefaultPreventedByContent
;
event
.
mRefPoint
=
aEvent
-
>
mRefPoint
;
event
.
mTime
=
aEvent
-
>
mTime
;
event
.
mTimeStamp
=
aEvent
-
>
mTimeStamp
;
event
.
mModifiers
=
aEvent
-
>
mModifiers
;
event
.
buttons
=
aEvent
-
>
buttons
;
event
.
mIsHorizontal
=
(
aDeltaDirection
=
=
DELTA_DIRECTION_X
)
;
event
.
mDelta
=
aPixelDelta
;
event
.
inputSource
=
aEvent
-
>
inputSource
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
EventDispatcher
:
:
Dispatch
(
targetContent
aTargetFrame
-
>
PresContext
(
)
&
event
nullptr
&
status
)
;
aState
.
mDefaultPrevented
=
event
.
DefaultPrevented
(
)
|
|
status
=
=
nsEventStatus_eConsumeNoDefault
;
aState
.
mDefaultPreventedByContent
=
event
.
DefaultPreventedByContent
(
)
;
}
nsIFrame
*
EventStateManager
:
:
ComputeScrollTargetAndMayAdjustWheelEvent
(
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
ComputeScrollTargetOptions
aOptions
)
{
return
ComputeScrollTargetAndMayAdjustWheelEvent
(
aTargetFrame
aEvent
-
>
mDeltaX
aEvent
-
>
mDeltaY
aEvent
aOptions
)
;
}
nsIFrame
*
EventStateManager
:
:
ComputeScrollTargetAndMayAdjustWheelEvent
(
nsIFrame
*
aTargetFrame
double
aDirectionX
double
aDirectionY
WidgetWheelEvent
*
aEvent
ComputeScrollTargetOptions
aOptions
)
{
if
(
(
aOptions
&
INCLUDE_PLUGIN_AS_TARGET
)
&
&
!
WheelPrefs
:
:
WheelEventsEnabledOnPlugins
(
)
)
{
aOptions
=
RemovePluginFromTarget
(
aOptions
)
;
}
bool
isAutoDir
=
false
;
bool
honoursRoot
=
false
;
if
(
MAY_BE_ADJUSTED_BY_AUTO_DIR
&
aOptions
)
{
MOZ_ASSERT
(
aDirectionX
=
=
aEvent
-
>
mDeltaX
&
&
aDirectionY
=
=
aEvent
-
>
mDeltaY
)
;
WheelDeltaAdjustmentStrategy
strategy
=
GetWheelDeltaAdjustmentStrategy
(
*
aEvent
)
;
switch
(
strategy
)
{
case
WheelDeltaAdjustmentStrategy
:
:
eAutoDir
:
isAutoDir
=
true
;
honoursRoot
=
false
;
break
;
case
WheelDeltaAdjustmentStrategy
:
:
eAutoDirWithRootHonour
:
isAutoDir
=
true
;
honoursRoot
=
true
;
break
;
default
:
break
;
}
}
if
(
aOptions
&
PREFER_MOUSE_WHEEL_TRANSACTION
)
{
nsIFrame
*
lastScrollFrame
=
WheelTransaction
:
:
GetTargetFrame
(
)
;
if
(
lastScrollFrame
)
{
if
(
aOptions
&
INCLUDE_PLUGIN_AS_TARGET
)
{
nsPluginFrame
*
pluginFrame
=
do_QueryFrame
(
lastScrollFrame
)
;
if
(
pluginFrame
&
&
pluginFrame
-
>
WantsToHandleWheelEventAsDefaultAction
(
)
)
{
return
lastScrollFrame
;
}
}
nsIScrollableFrame
*
scrollableFrame
=
lastScrollFrame
-
>
GetScrollTargetFrame
(
)
;
if
(
scrollableFrame
)
{
nsIFrame
*
frameToScroll
=
do_QueryFrame
(
scrollableFrame
)
;
MOZ_ASSERT
(
frameToScroll
)
;
if
(
isAutoDir
)
{
ESMAutoDirWheelDeltaAdjuster
adjuster
(
*
aEvent
*
lastScrollFrame
honoursRoot
)
;
adjuster
.
Adjust
(
)
;
}
return
frameToScroll
;
}
}
}
if
(
!
aDirectionX
&
&
!
aDirectionY
)
{
return
nullptr
;
}
bool
checkIfScrollableX
;
bool
checkIfScrollableY
;
if
(
isAutoDir
)
{
checkIfScrollableX
=
true
;
checkIfScrollableY
=
true
;
}
else
{
checkIfScrollableX
=
aDirectionX
&
&
(
aOptions
&
PREFER_ACTUAL_SCROLLABLE_TARGET_ALONG_X_AXIS
)
;
checkIfScrollableY
=
aDirectionY
&
&
(
aOptions
&
PREFER_ACTUAL_SCROLLABLE_TARGET_ALONG_Y_AXIS
)
;
}
nsIFrame
*
scrollFrame
=
!
(
aOptions
&
START_FROM_PARENT
)
?
aTargetFrame
:
GetParentFrameToScroll
(
aTargetFrame
)
;
for
(
;
scrollFrame
;
scrollFrame
=
GetParentFrameToScroll
(
scrollFrame
)
)
{
nsIScrollableFrame
*
scrollableFrame
=
scrollFrame
-
>
GetScrollTargetFrame
(
)
;
if
(
!
scrollableFrame
)
{
if
(
aOptions
&
INCLUDE_PLUGIN_AS_TARGET
)
{
nsPluginFrame
*
pluginFrame
=
do_QueryFrame
(
scrollFrame
)
;
if
(
pluginFrame
&
&
pluginFrame
-
>
WantsToHandleWheelEventAsDefaultAction
(
)
)
{
return
scrollFrame
;
}
}
nsMenuPopupFrame
*
menuPopupFrame
=
do_QueryFrame
(
scrollFrame
)
;
if
(
menuPopupFrame
)
{
return
nullptr
;
}
continue
;
}
nsIFrame
*
frameToScroll
=
do_QueryFrame
(
scrollableFrame
)
;
MOZ_ASSERT
(
frameToScroll
)
;
if
(
!
checkIfScrollableX
&
&
!
checkIfScrollableY
)
{
return
frameToScroll
;
}
Maybe
<
layers
:
:
ScrollDirection
>
disregardedDirection
=
WheelHandlingUtils
:
:
GetDisregardedWheelScrollDirection
(
scrollFrame
)
;
if
(
disregardedDirection
)
{
switch
(
disregardedDirection
.
ref
(
)
)
{
case
layers
:
:
ScrollDirection
:
:
eHorizontal
:
if
(
checkIfScrollableX
)
{
continue
;
}
break
;
case
layers
:
:
ScrollDirection
:
:
eVertical
:
if
(
checkIfScrollableY
)
{
continue
;
}
break
;
}
}
ScrollbarStyles
ss
=
scrollableFrame
-
>
GetScrollbarStyles
(
)
;
bool
hiddenForV
=
(
NS_STYLE_OVERFLOW_HIDDEN
=
=
ss
.
mVertical
)
;
bool
hiddenForH
=
(
NS_STYLE_OVERFLOW_HIDDEN
=
=
ss
.
mHorizontal
)
;
if
(
(
hiddenForV
&
&
hiddenForH
)
|
|
(
checkIfScrollableY
&
&
!
checkIfScrollableX
&
&
hiddenForV
)
|
|
(
checkIfScrollableX
&
&
!
checkIfScrollableY
&
&
hiddenForH
)
)
{
continue
;
}
bool
canScroll
=
false
;
if
(
isAutoDir
)
{
ESMAutoDirWheelDeltaAdjuster
adjuster
(
*
aEvent
*
scrollFrame
honoursRoot
)
;
if
(
adjuster
.
ShouldBeAdjusted
(
)
)
{
adjuster
.
Adjust
(
)
;
canScroll
=
true
;
}
else
if
(
WheelHandlingUtils
:
:
CanScrollOn
(
scrollableFrame
aDirectionX
aDirectionY
)
)
{
canScroll
=
true
;
}
}
else
if
(
WheelHandlingUtils
:
:
CanScrollOn
(
scrollableFrame
aDirectionX
aDirectionY
)
)
{
canScroll
=
true
;
}
nsIComboboxControlFrame
*
comboBox
=
do_QueryFrame
(
scrollFrame
)
;
if
(
comboBox
)
{
if
(
comboBox
-
>
IsDroppedDown
(
)
)
{
return
canScroll
?
frameToScroll
:
nullptr
;
}
continue
;
}
if
(
canScroll
)
{
return
frameToScroll
;
}
}
nsIFrame
*
newFrame
=
nsLayoutUtils
:
:
GetCrossDocParentFrame
(
aTargetFrame
-
>
PresShell
(
)
-
>
GetRootFrame
(
)
)
;
aOptions
=
static_cast
<
ComputeScrollTargetOptions
>
(
aOptions
&
~
START_FROM_PARENT
)
;
if
(
!
newFrame
)
{
return
nullptr
;
}
return
ComputeScrollTargetAndMayAdjustWheelEvent
(
newFrame
aEvent
aOptions
)
;
}
nsSize
EventStateManager
:
:
GetScrollAmount
(
nsPresContext
*
aPresContext
WidgetWheelEvent
*
aEvent
nsIScrollableFrame
*
aScrollableFrame
)
{
MOZ_ASSERT
(
aPresContext
)
;
MOZ_ASSERT
(
aEvent
)
;
bool
isPage
=
(
aEvent
-
>
mDeltaMode
=
=
WheelEventBinding
:
:
DOM_DELTA_PAGE
)
;
if
(
aScrollableFrame
)
{
return
isPage
?
aScrollableFrame
-
>
GetPageScrollAmount
(
)
:
aScrollableFrame
-
>
GetLineScrollAmount
(
)
;
}
if
(
isPage
)
{
return
aPresContext
-
>
GetVisibleArea
(
)
.
Size
(
)
;
}
nsIFrame
*
rootFrame
=
aPresContext
-
>
PresShell
(
)
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
nsSize
(
0
0
)
;
}
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetInflatedFontMetricsForFrame
(
rootFrame
)
;
NS_ENSURE_TRUE
(
fm
nsSize
(
0
0
)
)
;
return
nsSize
(
fm
-
>
AveCharWidth
(
)
fm
-
>
MaxHeight
(
)
)
;
}
void
EventStateManager
:
:
DoScrollText
(
nsIScrollableFrame
*
aScrollableFrame
WidgetWheelEvent
*
aEvent
)
{
MOZ_ASSERT
(
aScrollableFrame
)
;
MOZ_ASSERT
(
aEvent
)
;
nsIFrame
*
scrollFrame
=
do_QueryFrame
(
aScrollableFrame
)
;
MOZ_ASSERT
(
scrollFrame
)
;
AutoWeakFrame
scrollFrameWeak
(
scrollFrame
)
;
if
(
!
WheelTransaction
:
:
WillHandleDefaultAction
(
aEvent
scrollFrameWeak
)
)
{
return
;
}
nsPresContext
*
pc
=
scrollFrame
-
>
PresContext
(
)
;
nsSize
scrollAmount
=
GetScrollAmount
(
pc
aEvent
aScrollableFrame
)
;
nsIntSize
scrollAmountInDevPixels
(
pc
-
>
AppUnitsToDevPixels
(
scrollAmount
.
width
)
pc
-
>
AppUnitsToDevPixels
(
scrollAmount
.
height
)
)
;
nsIntPoint
actualDevPixelScrollAmount
=
DeltaAccumulator
:
:
GetInstance
(
)
-
>
ComputeScrollAmountForDefaultAction
(
aEvent
scrollAmountInDevPixels
)
;
ScrollbarStyles
overflowStyle
=
aScrollableFrame
-
>
GetScrollbarStyles
(
)
;
if
(
overflowStyle
.
mHorizontal
=
=
NS_STYLE_OVERFLOW_HIDDEN
)
{
actualDevPixelScrollAmount
.
x
=
0
;
}
if
(
overflowStyle
.
mVertical
=
=
NS_STYLE_OVERFLOW_HIDDEN
)
{
actualDevPixelScrollAmount
.
y
=
0
;
}
nsIScrollbarMediator
:
:
ScrollSnapMode
snapMode
=
nsIScrollbarMediator
:
:
DISABLE_SNAP
;
nsAtom
*
origin
=
nullptr
;
switch
(
aEvent
-
>
mDeltaMode
)
{
case
WheelEventBinding
:
:
DOM_DELTA_LINE
:
origin
=
nsGkAtoms
:
:
mouseWheel
;
snapMode
=
nsIScrollableFrame
:
:
ENABLE_SNAP
;
break
;
case
WheelEventBinding
:
:
DOM_DELTA_PAGE
:
origin
=
nsGkAtoms
:
:
pages
;
snapMode
=
nsIScrollableFrame
:
:
ENABLE_SNAP
;
break
;
case
WheelEventBinding
:
:
DOM_DELTA_PIXEL
:
origin
=
nsGkAtoms
:
:
pixels
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
deltaMode
value
comes
"
)
;
}
nsSize
pageSize
=
aScrollableFrame
-
>
GetPageScrollAmount
(
)
;
nsIntSize
devPixelPageSize
(
pc
-
>
AppUnitsToDevPixels
(
pageSize
.
width
)
pc
-
>
AppUnitsToDevPixels
(
pageSize
.
height
)
)
;
if
(
!
WheelPrefs
:
:
GetInstance
(
)
-
>
IsOverOnePageScrollAllowedX
(
aEvent
)
&
&
DeprecatedAbs
(
actualDevPixelScrollAmount
.
x
)
>
devPixelPageSize
.
width
)
{
actualDevPixelScrollAmount
.
x
=
(
actualDevPixelScrollAmount
.
x
>
=
0
)
?
devPixelPageSize
.
width
:
-
devPixelPageSize
.
width
;
}
if
(
!
WheelPrefs
:
:
GetInstance
(
)
-
>
IsOverOnePageScrollAllowedY
(
aEvent
)
&
&
DeprecatedAbs
(
actualDevPixelScrollAmount
.
y
)
>
devPixelPageSize
.
height
)
{
actualDevPixelScrollAmount
.
y
=
(
actualDevPixelScrollAmount
.
y
>
=
0
)
?
devPixelPageSize
.
height
:
-
devPixelPageSize
.
height
;
}
bool
isDeltaModePixel
=
(
aEvent
-
>
mDeltaMode
=
=
WheelEventBinding
:
:
DOM_DELTA_PIXEL
)
;
nsIScrollableFrame
:
:
ScrollMode
mode
;
switch
(
aEvent
-
>
mScrollType
)
{
case
WidgetWheelEvent
:
:
SCROLL_DEFAULT
:
if
(
isDeltaModePixel
)
{
mode
=
nsIScrollableFrame
:
:
NORMAL
;
}
else
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
mode
=
nsIScrollableFrame
:
:
SMOOTH_MSD
;
}
else
{
mode
=
nsIScrollableFrame
:
:
SMOOTH
;
}
break
;
case
WidgetWheelEvent
:
:
SCROLL_SYNCHRONOUSLY
:
mode
=
nsIScrollableFrame
:
:
INSTANT
;
break
;
case
WidgetWheelEvent
:
:
SCROLL_ASYNCHRONOUSELY
:
mode
=
nsIScrollableFrame
:
:
NORMAL
;
break
;
case
WidgetWheelEvent
:
:
SCROLL_SMOOTHLY
:
mode
=
nsIScrollableFrame
:
:
SMOOTH
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
mScrollType
value
comes
"
)
;
}
nsIScrollableFrame
:
:
ScrollMomentum
momentum
=
aEvent
-
>
mIsMomentum
?
nsIScrollableFrame
:
:
SYNTHESIZED_MOMENTUM_EVENT
:
nsIScrollableFrame
:
:
NOT_MOMENTUM
;
nsIntPoint
overflow
;
aScrollableFrame
-
>
ScrollBy
(
actualDevPixelScrollAmount
nsIScrollableFrame
:
:
DEVICE_PIXELS
mode
&
overflow
origin
momentum
snapMode
)
;
if
(
!
scrollFrameWeak
.
IsAlive
(
)
)
{
aEvent
-
>
mOverflowDeltaX
=
aEvent
-
>
mOverflowDeltaY
=
0
;
}
else
if
(
isDeltaModePixel
)
{
aEvent
-
>
mOverflowDeltaX
=
overflow
.
x
;
aEvent
-
>
mOverflowDeltaY
=
overflow
.
y
;
}
else
{
aEvent
-
>
mOverflowDeltaX
=
static_cast
<
double
>
(
overflow
.
x
)
/
scrollAmountInDevPixels
.
width
;
aEvent
-
>
mOverflowDeltaY
=
static_cast
<
double
>
(
overflow
.
y
)
/
scrollAmountInDevPixels
.
height
;
}
if
(
scrollFrameWeak
.
IsAlive
(
)
)
{
if
(
aEvent
-
>
mDeltaX
&
&
overflowStyle
.
mHorizontal
=
=
NS_STYLE_OVERFLOW_HIDDEN
&
&
!
ComputeScrollTargetAndMayAdjustWheelEvent
(
scrollFrame
aEvent
COMPUTE_SCROLLABLE_ANCESTOR_ALONG_X_AXIS_WITH_AUTO_DIR
)
)
{
aEvent
-
>
mOverflowDeltaX
=
aEvent
-
>
mDeltaX
;
}
if
(
aEvent
-
>
mDeltaY
&
&
overflowStyle
.
mVertical
=
=
NS_STYLE_OVERFLOW_HIDDEN
&
&
!
ComputeScrollTargetAndMayAdjustWheelEvent
(
scrollFrame
aEvent
COMPUTE_SCROLLABLE_ANCESTOR_ALONG_Y_AXIS_WITH_AUTO_DIR
)
)
{
aEvent
-
>
mOverflowDeltaY
=
aEvent
-
>
mDeltaY
;
}
}
NS_ASSERTION
(
aEvent
-
>
mOverflowDeltaX
=
=
0
|
|
(
aEvent
-
>
mOverflowDeltaX
>
0
)
=
=
(
aEvent
-
>
mDeltaX
>
0
)
"
The
sign
of
mOverflowDeltaX
is
different
from
the
scroll
direction
"
)
;
NS_ASSERTION
(
aEvent
-
>
mOverflowDeltaY
=
=
0
|
|
(
aEvent
-
>
mOverflowDeltaY
>
0
)
=
=
(
aEvent
-
>
mDeltaY
>
0
)
"
The
sign
of
mOverflowDeltaY
is
different
from
the
scroll
direction
"
)
;
WheelPrefs
:
:
GetInstance
(
)
-
>
CancelApplyingUserPrefsFromOverflowDelta
(
aEvent
)
;
}
void
EventStateManager
:
:
DecideGestureEvent
(
WidgetGestureNotifyEvent
*
aEvent
nsIFrame
*
targetFrame
)
{
NS_ASSERTION
(
aEvent
-
>
mMessage
=
=
eGestureNotify
"
DecideGestureEvent
called
with
a
non
-
gesture
event
"
)
;
WidgetGestureNotifyEvent
:
:
PanDirection
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanNone
;
bool
displayPanFeedback
=
false
;
for
(
nsIFrame
*
current
=
targetFrame
;
current
;
current
=
nsLayoutUtils
:
:
GetCrossDocParentFrame
(
current
)
)
{
if
(
current
&
&
IsRemoteTarget
(
current
-
>
GetContent
(
)
)
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanBoth
;
displayPanFeedback
=
false
;
break
;
}
LayoutFrameType
currentFrameType
=
current
-
>
Type
(
)
;
if
(
currentFrameType
=
=
LayoutFrameType
:
:
Scrollbar
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanNone
;
break
;
}
#
ifdef
MOZ_XUL
nsTreeBodyFrame
*
treeFrame
=
do_QueryFrame
(
current
)
;
if
(
treeFrame
)
{
if
(
treeFrame
-
>
GetHorizontalOverflow
(
)
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanHorizontal
;
}
if
(
treeFrame
-
>
GetVerticalOverflow
(
)
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanVertical
;
}
break
;
}
#
endif
nsIScrollableFrame
*
scrollableFrame
=
do_QueryFrame
(
current
)
;
if
(
scrollableFrame
)
{
if
(
current
-
>
IsFrameOfType
(
nsIFrame
:
:
eXULBox
)
)
{
displayPanFeedback
=
true
;
nsRect
scrollRange
=
scrollableFrame
-
>
GetScrollRange
(
)
;
bool
canScrollHorizontally
=
scrollRange
.
width
>
0
;
if
(
targetFrame
-
>
IsMenuFrame
(
)
)
{
canScrollHorizontally
=
false
;
displayPanFeedback
=
false
;
}
if
(
scrollRange
.
height
>
0
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanVertical
;
break
;
}
if
(
canScrollHorizontally
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanHorizontal
;
displayPanFeedback
=
false
;
}
}
else
{
uint32_t
scrollbarVisibility
=
scrollableFrame
-
>
GetScrollbarVisibility
(
)
;
if
(
scrollbarVisibility
&
nsIScrollableFrame
:
:
VERTICAL
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanVertical
;
displayPanFeedback
=
true
;
break
;
}
if
(
scrollbarVisibility
&
nsIScrollableFrame
:
:
HORIZONTAL
)
{
panDirection
=
WidgetGestureNotifyEvent
:
:
ePanHorizontal
;
displayPanFeedback
=
true
;
}
}
}
}
aEvent
-
>
mDisplayPanFeedback
=
displayPanFeedback
;
aEvent
-
>
mPanDirection
=
panDirection
;
}
#
ifdef
XP_MACOSX
static
bool
NodeAllowsClickThrough
(
nsINode
*
aNode
)
{
while
(
aNode
)
{
if
(
aNode
-
>
IsXULElement
(
)
)
{
mozilla
:
:
dom
:
:
Element
*
element
=
aNode
-
>
AsElement
(
)
;
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
&
nsGkAtoms
:
:
always
&
nsGkAtoms
:
:
never
nullptr
}
;
switch
(
element
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
clickthrough
strings
eCaseMatters
)
)
{
case
0
:
return
true
;
case
1
:
return
false
;
}
}
aNode
=
nsContentUtils
:
:
GetCrossDocParentNode
(
aNode
)
;
}
return
true
;
}
#
endif
void
EventStateManager
:
:
PostHandleKeyboardEvent
(
WidgetKeyboardEvent
*
aKeyboardEvent
nsIFrame
*
aTargetFrame
nsEventStatus
&
aStatus
)
{
if
(
aStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
;
}
if
(
!
aKeyboardEvent
-
>
HasBeenPostedToRemoteProcess
(
)
)
{
if
(
aKeyboardEvent
-
>
IsWaitingReplyFromRemoteProcess
(
)
)
{
RefPtr
<
TabParent
>
remote
=
aTargetFrame
?
TabParent
:
:
GetFrom
(
aTargetFrame
-
>
GetContent
(
)
)
:
nullptr
;
if
(
remote
&
&
!
remote
-
>
IsReadyToHandleInputEvents
(
)
)
{
WidgetKeyboardEvent
keyEvent
(
*
aKeyboardEvent
)
;
aKeyboardEvent
-
>
MarkAsHandledInRemoteProcess
(
)
;
EventDispatcher
:
:
Dispatch
(
remote
-
>
GetOwnerElement
(
)
mPresContext
&
keyEvent
)
;
if
(
keyEvent
.
DefaultPrevented
(
)
)
{
aKeyboardEvent
-
>
PreventDefault
(
!
keyEvent
.
DefaultPreventedByContent
(
)
)
;
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
}
if
(
aKeyboardEvent
-
>
mWidget
)
{
aKeyboardEvent
-
>
mWidget
-
>
PostHandleKeyEvent
(
aKeyboardEvent
)
;
}
if
(
aKeyboardEvent
-
>
DefaultPrevented
(
)
)
{
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
}
switch
(
aKeyboardEvent
-
>
mKeyCode
)
{
case
NS_VK_TAB
:
case
NS_VK_F6
:
if
(
!
aKeyboardEvent
-
>
IsAlt
(
)
)
{
aStatus
=
nsEventStatus_eConsumeNoDefault
;
if
(
aKeyboardEvent
-
>
HasBeenPostedToRemoteProcess
(
)
)
{
break
;
}
EnsureDocument
(
mPresContext
)
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
mDocument
)
{
bool
isDocMove
=
aKeyboardEvent
-
>
IsControl
(
)
|
|
aKeyboardEvent
-
>
mKeyCode
=
=
NS_VK_F6
;
uint32_t
dir
=
aKeyboardEvent
-
>
IsShift
(
)
?
(
isDocMove
?
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_BACKWARDDOC
)
:
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_BACKWARD
)
)
:
(
isDocMove
?
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_FORWARDDOC
)
:
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_FORWARD
)
)
;
nsCOMPtr
<
nsIDOMElement
>
result
;
fm
-
>
MoveFocus
(
mDocument
-
>
GetWindow
(
)
nullptr
dir
nsIFocusManager
:
:
FLAG_BYKEY
getter_AddRefs
(
result
)
)
;
}
}
return
;
case
0
:
break
;
default
:
return
;
}
switch
(
aKeyboardEvent
-
>
mKeyNameIndex
)
{
case
KEY_NAME_INDEX_ZoomIn
:
case
KEY_NAME_INDEX_ZoomOut
:
ChangeFullZoom
(
aKeyboardEvent
-
>
mKeyNameIndex
=
=
KEY_NAME_INDEX_ZoomIn
?
1
:
-
1
)
;
aStatus
=
nsEventStatus_eConsumeNoDefault
;
break
;
default
:
break
;
}
}
nsresult
EventStateManager
:
:
PostHandleEvent
(
nsPresContext
*
aPresContext
WidgetEvent
*
aEvent
nsIFrame
*
aTargetFrame
nsEventStatus
*
aStatus
nsIContent
*
aOverrideClickTarget
)
{
NS_ENSURE_ARG
(
aPresContext
)
;
NS_ENSURE_ARG_POINTER
(
aStatus
)
;
mCurrentTarget
=
aTargetFrame
;
mCurrentTargetContent
=
nullptr
;
HandleCrossProcessEvent
(
aEvent
aStatus
)
;
aTargetFrame
=
nullptr
;
if
(
!
mCurrentTarget
&
&
aEvent
-
>
mMessage
!
=
eMouseUp
&
&
aEvent
-
>
mMessage
!
=
eMouseDown
)
{
return
NS_OK
;
}
RefPtr
<
nsPresContext
>
presContext
=
aPresContext
;
nsresult
ret
=
NS_OK
;
switch
(
aEvent
-
>
mMessage
)
{
case
eMouseDown
:
{
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
-
>
button
=
=
WidgetMouseEvent
:
:
eLeftButton
&
&
!
sNormalLMouseEventInProcess
)
{
nsIPresShell
:
:
SetCapturingContent
(
nullptr
0
)
;
break
;
}
if
(
aEvent
-
>
HasBeenPostedToRemoteProcess
(
)
&
&
!
nsIPresShell
:
:
GetCapturingContent
(
)
)
{
nsIContent
*
content
=
mCurrentTarget
?
mCurrentTarget
-
>
GetContent
(
)
:
nullptr
;
nsIPresShell
:
:
SetCapturingContent
(
content
0
)
;
}
nsCOMPtr
<
nsIContent
>
activeContent
;
if
(
nsEventStatus_eConsumeNoDefault
!
=
*
aStatus
&
&
!
aEvent
-
>
DefaultPrevented
(
)
)
{
nsCOMPtr
<
nsIContent
>
newFocus
;
bool
suppressBlur
=
false
;
if
(
mCurrentTarget
)
{
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
newFocus
)
)
;
const
nsStyleUserInterface
*
ui
=
mCurrentTarget
-
>
StyleUserInterface
(
)
;
activeContent
=
mCurrentTarget
-
>
GetContent
(
)
;
suppressBlur
=
(
ui
-
>
mUserFocus
=
=
StyleUserFocus
:
:
Ignore
)
;
if
(
!
suppressBlur
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
aEvent
-
>
mTarget
)
;
suppressBlur
=
element
&
&
element
-
>
State
(
)
.
HasState
(
NS_EVENT_STATE_DISABLED
)
;
}
if
(
!
suppressBlur
)
{
nsCOMPtr
<
nsIDOMXULControlElement
>
xulControl
=
do_QueryInterface
(
aEvent
-
>
mTarget
)
;
if
(
xulControl
)
{
bool
disabled
;
xulControl
-
>
GetDisabled
(
&
disabled
)
;
suppressBlur
=
disabled
;
}
}
}
if
(
!
suppressBlur
)
{
suppressBlur
=
nsContentUtils
:
:
IsUserFocusIgnored
(
activeContent
)
;
}
if
(
newFocus
&
&
!
newFocus
-
>
IsEditable
(
)
)
{
nsIDocument
*
doc
=
newFocus
-
>
GetComposedDoc
(
)
;
if
(
doc
&
&
newFocus
=
=
doc
-
>
GetRootElement
(
)
)
{
nsIContent
*
bodyContent
=
nsLayoutUtils
:
:
GetEditableRootContentByContentEditable
(
doc
)
;
if
(
bodyContent
&
&
bodyContent
-
>
GetPrimaryFrame
(
)
)
{
newFocus
=
bodyContent
;
}
}
}
for
(
;
newFocus
;
newFocus
=
newFocus
-
>
GetFlattenedTreeParent
(
)
)
{
if
(
!
newFocus
-
>
IsElement
(
)
)
{
continue
;
}
nsIFrame
*
frame
=
newFocus
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
continue
;
}
if
(
frame
-
>
StyleDisplay
(
)
-
>
mDisplay
=
=
StyleDisplay
:
:
MozPopup
)
{
newFocus
=
nullptr
;
break
;
}
int32_t
tabIndexUnused
;
if
(
frame
-
>
IsFocusable
(
&
tabIndexUnused
true
)
)
{
break
;
}
}
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
if
(
newFocus
)
{
uint32_t
flags
=
nsIFocusManager
:
:
FLAG_BYMOUSE
|
nsIFocusManager
:
:
FLAG_NOSCROLL
;
if
(
mouseEvent
-
>
inputSource
=
=
MouseEventBinding
:
:
MOZ_SOURCE_TOUCH
)
{
flags
|
=
nsIFocusManager
:
:
FLAG_BYTOUCH
;
}
nsCOMPtr
<
nsIDOMElement
>
newFocusElement
=
do_QueryInterface
(
newFocus
)
;
fm
-
>
SetFocus
(
newFocusElement
flags
)
;
}
else
if
(
!
suppressBlur
)
{
EnsureDocument
(
mPresContext
)
;
if
(
mDocument
)
{
#
ifdef
XP_MACOSX
if
(
!
activeContent
|
|
!
activeContent
-
>
IsXULElement
(
)
)
#
endif
fm
-
>
ClearFocus
(
mDocument
-
>
GetWindow
(
)
)
;
fm
-
>
SetFocusedWindow
(
mDocument
-
>
GetWindow
(
)
)
;
}
}
}
if
(
mouseEvent
-
>
button
!
=
WidgetMouseEvent
:
:
eLeftButton
)
{
break
;
}
if
(
activeContent
)
{
nsCOMPtr
<
nsIDOMElement
>
elt
(
do_QueryInterface
(
activeContent
)
)
;
if
(
!
elt
)
{
nsIContent
*
par
=
activeContent
-
>
GetParent
(
)
;
if
(
par
)
activeContent
=
par
;
}
}
}
else
{
StopTrackingDragGesture
(
)
;
EnsureDocument
(
mPresContext
)
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
mDocument
&
&
fm
)
{
nsCOMPtr
<
mozIDOMWindowProxy
>
window
;
fm
-
>
GetFocusedWindow
(
getter_AddRefs
(
window
)
)
;
auto
*
currentWindow
=
nsPIDOMWindowOuter
:
:
From
(
window
)
;
if
(
currentWindow
&
&
mDocument
-
>
GetWindow
(
)
&
&
currentWindow
!
=
mDocument
-
>
GetWindow
(
)
&
&
!
nsContentUtils
:
:
IsChromeDoc
(
mDocument
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
currentTop
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
newTop
;
currentTop
=
currentWindow
-
>
GetTop
(
)
;
newTop
=
mDocument
-
>
GetWindow
(
)
-
>
GetTop
(
)
;
nsCOMPtr
<
nsIDocument
>
currentDoc
=
currentWindow
-
>
GetExtantDoc
(
)
;
if
(
nsContentUtils
:
:
IsChromeDoc
(
currentDoc
)
|
|
(
currentTop
&
&
newTop
&
&
currentTop
!
=
newTop
)
)
{
fm
-
>
SetFocusedWindow
(
mDocument
-
>
GetWindow
(
)
)
;
}
}
}
}
SetActiveManager
(
this
activeContent
)
;
}
break
;
case
ePointerCancel
:
case
ePointerUp
:
{
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
;
MOZ_ASSERT
(
pointerEvent
)
;
PointerEventHandler
:
:
ImplicitlyReleasePointerCapture
(
pointerEvent
)
;
if
(
pointerEvent
-
>
mMessage
=
=
ePointerCancel
|
|
pointerEvent
-
>
inputSource
=
=
MouseEventBinding
:
:
MOZ_SOURCE_TOUCH
)
{
GenerateMouseEnterExit
(
pointerEvent
)
;
mPointersEnterLeaveHelper
.
Remove
(
pointerEvent
-
>
pointerId
)
;
}
break
;
}
case
eMouseUp
:
{
ClearGlobalActiveContent
(
this
)
;
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
&
&
mouseEvent
-
>
IsReal
(
)
)
{
if
(
!
mCurrentTarget
)
{
GetEventTarget
(
)
;
}
RefPtr
<
EventStateManager
>
esm
=
ESMFromContentOrThis
(
aOverrideClickTarget
)
;
ret
=
esm
-
>
CheckForAndDispatchClick
(
mouseEvent
aStatus
aOverrideClickTarget
)
;
}
nsIPresShell
*
shell
=
presContext
-
>
GetPresShell
(
)
;
if
(
shell
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
shell
-
>
FrameSelection
(
)
;
frameSelection
-
>
SetDragState
(
false
)
;
}
}
break
;
case
eWheelOperationEnd
:
{
MOZ_ASSERT
(
aEvent
-
>
IsTrusted
(
)
)
;
ScrollbarsForWheel
:
:
MayInactivate
(
)
;
WidgetWheelEvent
*
wheelEvent
=
aEvent
-
>
AsWheelEvent
(
)
;
nsIScrollableFrame
*
scrollTarget
=
do_QueryFrame
(
ComputeScrollTargetAndMayAdjustWheelEvent
(
mCurrentTarget
wheelEvent
COMPUTE_DEFAULT_ACTION_TARGET_WITH_AUTO_DIR
)
)
;
if
(
scrollTarget
)
{
scrollTarget
-
>
ScrollSnap
(
)
;
}
}
break
;
case
eWheel
:
case
eWheelOperationStart
:
{
MOZ_ASSERT
(
aEvent
-
>
IsTrusted
(
)
)
;
if
(
*
aStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
ScrollbarsForWheel
:
:
Inactivate
(
)
;
break
;
}
WidgetWheelEvent
*
wheelEvent
=
aEvent
-
>
AsWheelEvent
(
)
;
MOZ_ASSERT
(
wheelEvent
)
;
WheelPrefs
:
:
Action
action
=
wheelEvent
-
>
mFlags
.
mHandledByAPZ
?
WheelPrefs
:
:
ACTION_NONE
:
WheelPrefs
:
:
GetInstance
(
)
-
>
ComputeActionFor
(
wheelEvent
)
;
WheelDeltaAdjustmentStrategy
strategy
=
GetWheelDeltaAdjustmentStrategy
(
*
wheelEvent
)
;
WheelDeltaHorizontalizer
horizontalizer
(
*
wheelEvent
)
;
if
(
WheelDeltaAdjustmentStrategy
:
:
eHorizontalize
=
=
strategy
)
{
horizontalizer
.
Horizontalize
(
)
;
}
ESMAutoDirWheelDeltaRestorer
restorer
(
*
wheelEvent
)
;
nsIFrame
*
frameToScroll
=
ComputeScrollTargetAndMayAdjustWheelEvent
(
mCurrentTarget
wheelEvent
COMPUTE_DEFAULT_ACTION_TARGET_WITH_AUTO_DIR
)
;
nsPluginFrame
*
pluginFrame
=
do_QueryFrame
(
frameToScroll
)
;
if
(
pluginFrame
)
{
MOZ_ASSERT
(
pluginFrame
-
>
WantsToHandleWheelEventAsDefaultAction
(
)
)
;
horizontalizer
.
CancelHorizontalization
(
)
;
action
=
WheelPrefs
:
:
ACTION_SEND_TO_PLUGIN
;
}
switch
(
action
)
{
case
WheelPrefs
:
:
ACTION_SCROLL
:
case
WheelPrefs
:
:
ACTION_HORIZONTALIZED_SCROLL
:
{
ScrollbarsForWheel
:
:
PrepareToScrollText
(
this
mCurrentTarget
wheelEvent
)
;
if
(
aEvent
-
>
mMessage
!
=
eWheel
|
|
(
!
wheelEvent
-
>
mDeltaX
&
&
!
wheelEvent
-
>
mDeltaY
)
)
{
break
;
}
nsIScrollableFrame
*
scrollTarget
=
do_QueryFrame
(
frameToScroll
)
;
ScrollbarsForWheel
:
:
SetActiveScrollTarget
(
scrollTarget
)
;
nsIFrame
*
rootScrollFrame
=
!
mCurrentTarget
?
nullptr
:
mCurrentTarget
-
>
PresShell
(
)
-
>
GetRootScrollFrame
(
)
;
nsIScrollableFrame
*
rootScrollableFrame
=
nullptr
;
if
(
rootScrollFrame
)
{
rootScrollableFrame
=
do_QueryFrame
(
rootScrollFrame
)
;
}
if
(
!
scrollTarget
|
|
scrollTarget
=
=
rootScrollableFrame
)
{
wheelEvent
-
>
mViewPortIsOverscrolled
=
true
;
}
wheelEvent
-
>
mOverflowDeltaX
=
wheelEvent
-
>
mDeltaX
;
wheelEvent
-
>
mOverflowDeltaY
=
wheelEvent
-
>
mDeltaY
;
WheelPrefs
:
:
GetInstance
(
)
-
>
CancelApplyingUserPrefsFromOverflowDelta
(
wheelEvent
)
;
if
(
scrollTarget
)
{
DoScrollText
(
scrollTarget
wheelEvent
)
;
}
else
{
WheelTransaction
:
:
EndTransaction
(
)
;
ScrollbarsForWheel
:
:
Inactivate
(
)
;
}
break
;
}
case
WheelPrefs
:
:
ACTION_HISTORY
:
{
int32_t
intDelta
=
wheelEvent
-
>
GetPreferredIntDelta
(
)
;
if
(
!
intDelta
)
{
break
;
}
DoScrollHistory
(
intDelta
)
;
break
;
}
case
WheelPrefs
:
:
ACTION_ZOOM
:
{
int32_t
intDelta
=
wheelEvent
-
>
GetPreferredIntDelta
(
)
;
if
(
!
intDelta
)
{
break
;
}
DoScrollZoom
(
mCurrentTarget
intDelta
)
;
break
;
}
case
WheelPrefs
:
:
ACTION_SEND_TO_PLUGIN
:
MOZ_ASSERT
(
pluginFrame
)
;
if
(
wheelEvent
-
>
mMessage
!
=
eWheel
|
|
(
!
wheelEvent
-
>
mDeltaX
&
&
!
wheelEvent
-
>
mDeltaY
)
)
{
break
;
}
MOZ_ASSERT
(
static_cast
<
void
*
>
(
frameToScroll
)
=
=
static_cast
<
void
*
>
(
pluginFrame
)
)
;
if
(
!
WheelTransaction
:
:
WillHandleDefaultAction
(
wheelEvent
frameToScroll
)
)
{
break
;
}
pluginFrame
-
>
HandleWheelEventAsDefaultAction
(
wheelEvent
)
;
break
;
case
WheelPrefs
:
:
ACTION_NONE
:
default
:
bool
allDeltaOverflown
=
false
;
if
(
wheelEvent
-
>
mFlags
.
mHandledByAPZ
)
{
if
(
wheelEvent
-
>
mCanTriggerSwipe
)
{
allDeltaOverflown
=
!
ComputeScrollTarget
(
mCurrentTarget
wheelEvent
COMPUTE_DEFAULT_ACTION_TARGET
)
;
}
}
else
{
allDeltaOverflown
=
true
;
}
if
(
!
allDeltaOverflown
)
{
break
;
}
wheelEvent
-
>
mOverflowDeltaX
=
wheelEvent
-
>
mDeltaX
;
wheelEvent
-
>
mOverflowDeltaY
=
wheelEvent
-
>
mDeltaY
;
WheelPrefs
:
:
GetInstance
(
)
-
>
CancelApplyingUserPrefsFromOverflowDelta
(
wheelEvent
)
;
wheelEvent
-
>
mViewPortIsOverscrolled
=
true
;
break
;
}
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
}
break
;
case
eGestureNotify
:
{
if
(
nsEventStatus_eConsumeNoDefault
!
=
*
aStatus
)
{
DecideGestureEvent
(
aEvent
-
>
AsGestureNotifyEvent
(
)
mCurrentTarget
)
;
}
}
break
;
case
eDragEnter
:
case
eDragOver
:
{
NS_ASSERTION
(
aEvent
-
>
mClass
=
=
eDragEventClass
"
Expected
a
drag
event
"
)
;
if
(
mCurrentTarget
&
&
aEvent
-
>
mMessage
=
=
eDragOver
)
{
nsIFrame
*
checkFrame
=
mCurrentTarget
;
while
(
checkFrame
)
{
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
checkFrame
)
;
if
(
scrollFrame
&
&
scrollFrame
-
>
DragScroll
(
aEvent
)
)
{
break
;
}
checkFrame
=
checkFrame
-
>
GetParent
(
)
;
}
}
nsCOMPtr
<
nsIDragSession
>
dragSession
=
nsContentUtils
:
:
GetDragSession
(
)
;
if
(
!
dragSession
)
break
;
dragSession
-
>
SetOnlyChromeDrop
(
false
)
;
if
(
mPresContext
)
{
EnsureDocument
(
mPresContext
)
;
}
bool
isChromeDoc
=
nsContentUtils
:
:
IsChromeDoc
(
mDocument
)
;
RefPtr
<
DataTransfer
>
dataTransfer
;
RefPtr
<
DataTransfer
>
initialDataTransfer
=
dragSession
-
>
GetDataTransfer
(
)
;
WidgetDragEvent
*
dragEvent
=
aEvent
-
>
AsDragEvent
(
)
;
UpdateDragDataTransfer
(
dragEvent
)
;
uint32_t
dropEffect
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
;
uint32_t
action
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aStatus
)
{
if
(
dragEvent
-
>
mDataTransfer
)
{
dataTransfer
=
dragEvent
-
>
mDataTransfer
;
dropEffect
=
dataTransfer
-
>
DropEffectInt
(
)
;
}
else
{
dataTransfer
=
initialDataTransfer
;
dragSession
-
>
GetDragAction
(
&
action
)
;
dropEffect
=
nsContentUtils
:
:
FilterDropEffect
(
action
nsIDragService
:
:
DRAGDROP_ACTION_UNINITIALIZED
)
;
}
uint32_t
effectAllowed
=
nsIDragService
:
:
DRAGDROP_ACTION_UNINITIALIZED
;
if
(
dataTransfer
)
{
effectAllowed
=
dataTransfer
-
>
EffectAllowedInt
(
)
;
}
if
(
effectAllowed
=
=
nsIDragService
:
:
DRAGDROP_ACTION_UNINITIALIZED
|
|
dropEffect
&
effectAllowed
)
action
=
dropEffect
;
if
(
action
=
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
)
dropEffect
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
;
dragSession
-
>
SetDragAction
(
action
)
;
dragSession
-
>
SetCanDrop
(
action
!
=
nsIDragService
:
:
DRAGDROP_ACTION_NONE
)
;
if
(
aEvent
-
>
mMessage
=
=
eDragOver
&
&
!
isChromeDoc
)
{
dragSession
-
>
SetOnlyChromeDrop
(
!
dragEvent
-
>
mDefaultPreventedOnContent
)
;
}
}
else
if
(
aEvent
-
>
mMessage
=
=
eDragOver
&
&
!
isChromeDoc
)
{
dragSession
-
>
SetOnlyChromeDrop
(
true
)
;
}
if
(
ContentChild
*
child
=
ContentChild
:
:
GetSingleton
(
)
)
{
child
-
>
SendUpdateDropEffect
(
action
dropEffect
)
;
}
if
(
aEvent
-
>
HasBeenPostedToRemoteProcess
(
)
)
{
dragSession
-
>
SetCanDrop
(
true
)
;
}
else
if
(
initialDataTransfer
)
{
initialDataTransfer
-
>
SetDropEffectInt
(
dropEffect
)
;
}
}
break
;
case
eDrop
:
{
sLastDragOverFrame
=
nullptr
;
ClearGlobalActiveContent
(
this
)
;
break
;
}
case
eDragExit
:
GenerateDragDropEnterExit
(
presContext
aEvent
-
>
AsDragEvent
(
)
)
;
if
(
ContentChild
*
child
=
ContentChild
:
:
GetSingleton
(
)
)
{
child
-
>
SendUpdateDropEffect
(
nsIDragService
:
:
DRAGDROP_ACTION_NONE
nsIDragService
:
:
DRAGDROP_ACTION_NONE
)
;
}
break
;
case
eKeyUp
:
break
;
case
eKeyPress
:
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
PostHandleKeyboardEvent
(
keyEvent
mCurrentTarget
*
aStatus
)
;
}
break
;
case
eMouseEnterIntoWidget
:
if
(
mCurrentTarget
)
{
nsCOMPtr
<
nsIContent
>
targetContent
;
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetContent
)
)
;
SetContentState
(
targetContent
NS_EVENT_STATE_HOVER
)
;
}
break
;
#
ifdef
XP_MACOSX
case
eMouseActivate
:
if
(
mCurrentTarget
)
{
nsCOMPtr
<
nsIContent
>
targetContent
;
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetContent
)
)
;
if
(
!
NodeAllowsClickThrough
(
targetContent
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
break
;
#
endif
default
:
break
;
}
mCurrentTarget
=
nullptr
;
mCurrentTargetContent
=
nullptr
;
return
ret
;
}
TabParent
*
EventStateManager
:
:
GetCrossProcessTarget
(
)
{
return
IMEStateManager
:
:
GetActiveTabParent
(
)
;
}
bool
EventStateManager
:
:
IsTargetCrossProcess
(
WidgetGUIEvent
*
aEvent
)
{
nsIContent
*
focusedContent
=
GetFocusedContent
(
)
;
if
(
focusedContent
&
&
focusedContent
-
>
IsEditable
(
)
)
return
false
;
return
IMEStateManager
:
:
GetActiveTabParent
(
)
!
=
nullptr
;
}
void
EventStateManager
:
:
NotifyDestroyPresContext
(
nsPresContext
*
aPresContext
)
{
IMEStateManager
:
:
OnDestroyPresContext
(
aPresContext
)
;
if
(
mHoverContent
)
{
SetContentState
(
nullptr
NS_EVENT_STATE_HOVER
)
;
}
mPointersEnterLeaveHelper
.
Clear
(
)
;
}
void
EventStateManager
:
:
SetPresContext
(
nsPresContext
*
aPresContext
)
{
mPresContext
=
aPresContext
;
}
void
EventStateManager
:
:
ClearFrameRefs
(
nsIFrame
*
aFrame
)
{
if
(
aFrame
&
&
aFrame
=
=
mCurrentTarget
)
{
mCurrentTargetContent
=
aFrame
-
>
GetContent
(
)
;
}
}
void
EventStateManager
:
:
UpdateCursor
(
nsPresContext
*
aPresContext
WidgetEvent
*
aEvent
nsIFrame
*
aTargetFrame
nsEventStatus
*
aStatus
)
{
if
(
aTargetFrame
&
&
IsRemoteTarget
(
aTargetFrame
-
>
GetContent
(
)
)
)
{
return
;
}
int32_t
cursor
=
NS_STYLE_CURSOR_DEFAULT
;
imgIContainer
*
container
=
nullptr
;
bool
haveHotspot
=
false
;
float
hotspotX
=
0
.
0f
hotspotY
=
0
.
0f
;
if
(
mLockCursor
)
{
cursor
=
mLockCursor
;
}
else
if
(
aTargetFrame
)
{
nsIFrame
:
:
Cursor
framecursor
;
nsPoint
pt
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
aTargetFrame
)
;
if
(
NS_FAILED
(
aTargetFrame
-
>
GetCursor
(
pt
framecursor
)
)
)
{
if
(
XRE_IsContentProcess
(
)
)
{
mLastFrameConsumedSetCursor
=
true
;
}
return
;
}
if
(
mLastFrameConsumedSetCursor
)
{
ClearCachedWidgetCursor
(
aTargetFrame
)
;
mLastFrameConsumedSetCursor
=
false
;
}
if
(
framecursor
.
mLoading
&
&
gLastCursorSourceFrame
=
=
aTargetFrame
&
&
TimeStamp
:
:
NowLoRes
(
)
-
gLastCursorUpdateTime
<
TimeDuration
:
:
FromMilliseconds
(
kCursorLoadingTimeout
)
)
{
return
;
}
cursor
=
framecursor
.
mCursor
;
container
=
framecursor
.
mContainer
;
haveHotspot
=
framecursor
.
mHaveHotspot
;
hotspotX
=
framecursor
.
mHotspotX
;
hotspotY
=
framecursor
.
mHotspotY
;
}
if
(
nsContentUtils
:
:
UseActivityCursor
(
)
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
aPresContext
-
>
GetDocShell
(
)
)
;
if
(
!
docShell
)
return
;
uint32_t
busyFlags
=
nsIDocShell
:
:
BUSY_FLAGS_NONE
;
docShell
-
>
GetBusyFlags
(
&
busyFlags
)
;
if
(
busyFlags
&
nsIDocShell
:
:
BUSY_FLAGS_BUSY
&
&
(
cursor
=
=
NS_STYLE_CURSOR_AUTO
|
|
cursor
=
=
NS_STYLE_CURSOR_DEFAULT
)
)
{
cursor
=
NS_STYLE_CURSOR_SPINNING
;
container
=
nullptr
;
}
}
if
(
aTargetFrame
)
{
SetCursor
(
cursor
container
haveHotspot
hotspotX
hotspotY
aTargetFrame
-
>
GetNearestWidget
(
)
false
)
;
gLastCursorSourceFrame
=
aTargetFrame
;
gLastCursorUpdateTime
=
TimeStamp
:
:
NowLoRes
(
)
;
}
if
(
mLockCursor
|
|
NS_STYLE_CURSOR_AUTO
!
=
cursor
)
{
*
aStatus
=
nsEventStatus_eConsumeDoDefault
;
}
}
void
EventStateManager
:
:
ClearCachedWidgetCursor
(
nsIFrame
*
aTargetFrame
)
{
if
(
!
aTargetFrame
)
{
return
;
}
nsIWidget
*
aWidget
=
aTargetFrame
-
>
GetNearestWidget
(
)
;
if
(
!
aWidget
)
{
return
;
}
aWidget
-
>
ClearCachedCursor
(
)
;
}
nsresult
EventStateManager
:
:
SetCursor
(
int32_t
aCursor
imgIContainer
*
aContainer
bool
aHaveHotspot
float
aHotspotX
float
aHotspotY
nsIWidget
*
aWidget
bool
aLockCursor
)
{
EnsureDocument
(
mPresContext
)
;
NS_ENSURE_TRUE
(
mDocument
NS_ERROR_FAILURE
)
;
sMouseOverDocument
=
mDocument
.
get
(
)
;
nsCursor
c
;
NS_ENSURE_TRUE
(
aWidget
NS_ERROR_FAILURE
)
;
if
(
aLockCursor
)
{
if
(
NS_STYLE_CURSOR_AUTO
!
=
aCursor
)
{
mLockCursor
=
aCursor
;
}
else
{
mLockCursor
=
0
;
}
}
switch
(
aCursor
)
{
default
:
case
NS_STYLE_CURSOR_AUTO
:
case
NS_STYLE_CURSOR_DEFAULT
:
c
=
eCursor_standard
;
break
;
case
NS_STYLE_CURSOR_POINTER
:
c
=
eCursor_hyperlink
;
break
;
case
NS_STYLE_CURSOR_CROSSHAIR
:
c
=
eCursor_crosshair
;
break
;
case
NS_STYLE_CURSOR_MOVE
:
c
=
eCursor_move
;
break
;
case
NS_STYLE_CURSOR_TEXT
:
c
=
eCursor_select
;
break
;
case
NS_STYLE_CURSOR_WAIT
:
c
=
eCursor_wait
;
break
;
case
NS_STYLE_CURSOR_HELP
:
c
=
eCursor_help
;
break
;
case
NS_STYLE_CURSOR_N_RESIZE
:
c
=
eCursor_n_resize
;
break
;
case
NS_STYLE_CURSOR_S_RESIZE
:
c
=
eCursor_s_resize
;
break
;
case
NS_STYLE_CURSOR_W_RESIZE
:
c
=
eCursor_w_resize
;
break
;
case
NS_STYLE_CURSOR_E_RESIZE
:
c
=
eCursor_e_resize
;
break
;
case
NS_STYLE_CURSOR_NW_RESIZE
:
c
=
eCursor_nw_resize
;
break
;
case
NS_STYLE_CURSOR_SE_RESIZE
:
c
=
eCursor_se_resize
;
break
;
case
NS_STYLE_CURSOR_NE_RESIZE
:
c
=
eCursor_ne_resize
;
break
;
case
NS_STYLE_CURSOR_SW_RESIZE
:
c
=
eCursor_sw_resize
;
break
;
case
NS_STYLE_CURSOR_COPY
:
c
=
eCursor_copy
;
break
;
case
NS_STYLE_CURSOR_ALIAS
:
c
=
eCursor_alias
;
break
;
case
NS_STYLE_CURSOR_CONTEXT_MENU
:
c
=
eCursor_context_menu
;
break
;
case
NS_STYLE_CURSOR_CELL
:
c
=
eCursor_cell
;
break
;
case
NS_STYLE_CURSOR_GRAB
:
c
=
eCursor_grab
;
break
;
case
NS_STYLE_CURSOR_GRABBING
:
c
=
eCursor_grabbing
;
break
;
case
NS_STYLE_CURSOR_SPINNING
:
c
=
eCursor_spinning
;
break
;
case
NS_STYLE_CURSOR_ZOOM_IN
:
c
=
eCursor_zoom_in
;
break
;
case
NS_STYLE_CURSOR_ZOOM_OUT
:
c
=
eCursor_zoom_out
;
break
;
case
NS_STYLE_CURSOR_NOT_ALLOWED
:
c
=
eCursor_not_allowed
;
break
;
case
NS_STYLE_CURSOR_COL_RESIZE
:
c
=
eCursor_col_resize
;
break
;
case
NS_STYLE_CURSOR_ROW_RESIZE
:
c
=
eCursor_row_resize
;
break
;
case
NS_STYLE_CURSOR_NO_DROP
:
c
=
eCursor_no_drop
;
break
;
case
NS_STYLE_CURSOR_VERTICAL_TEXT
:
c
=
eCursor_vertical_text
;
break
;
case
NS_STYLE_CURSOR_ALL_SCROLL
:
c
=
eCursor_all_scroll
;
break
;
case
NS_STYLE_CURSOR_NESW_RESIZE
:
c
=
eCursor_nesw_resize
;
break
;
case
NS_STYLE_CURSOR_NWSE_RESIZE
:
c
=
eCursor_nwse_resize
;
break
;
case
NS_STYLE_CURSOR_NS_RESIZE
:
c
=
eCursor_ns_resize
;
break
;
case
NS_STYLE_CURSOR_EW_RESIZE
:
c
=
eCursor_ew_resize
;
break
;
case
NS_STYLE_CURSOR_NONE
:
c
=
eCursor_none
;
break
;
}
nsresult
rv
=
NS_ERROR_FAILURE
;
if
(
aContainer
)
{
uint32_t
hotspotX
hotspotY
;
if
(
aHaveHotspot
)
{
int32_t
imgWidth
imgHeight
;
aContainer
-
>
GetWidth
(
&
imgWidth
)
;
aContainer
-
>
GetHeight
(
&
imgHeight
)
;
hotspotX
=
aHotspotX
>
0
.
0f
?
uint32_t
(
aHotspotX
+
0
.
5f
)
:
uint32_t
(
0
)
;
if
(
hotspotX
>
=
uint32_t
(
imgWidth
)
)
hotspotX
=
imgWidth
-
1
;
hotspotY
=
aHotspotY
>
0
.
0f
?
uint32_t
(
aHotspotY
+
0
.
5f
)
:
uint32_t
(
0
)
;
if
(
hotspotY
>
=
uint32_t
(
imgHeight
)
)
hotspotY
=
imgHeight
-
1
;
}
else
{
hotspotX
=
0
;
hotspotY
=
0
;
nsCOMPtr
<
nsIProperties
>
props
(
do_QueryInterface
(
aContainer
)
)
;
if
(
props
)
{
nsCOMPtr
<
nsISupportsPRUint32
>
hotspotXWrap
hotspotYWrap
;
props
-
>
Get
(
"
hotspotX
"
NS_GET_IID
(
nsISupportsPRUint32
)
getter_AddRefs
(
hotspotXWrap
)
)
;
props
-
>
Get
(
"
hotspotY
"
NS_GET_IID
(
nsISupportsPRUint32
)
getter_AddRefs
(
hotspotYWrap
)
)
;
if
(
hotspotXWrap
)
hotspotXWrap
-
>
GetData
(
&
hotspotX
)
;
if
(
hotspotYWrap
)
hotspotYWrap
-
>
GetData
(
&
hotspotY
)
;
}
}
rv
=
aWidget
-
>
SetCursor
(
aContainer
hotspotX
hotspotY
)
;
}
if
(
NS_FAILED
(
rv
)
)
aWidget
-
>
SetCursor
(
c
)
;
return
NS_OK
;
}
class
MOZ_STACK_CLASS
ESMEventCB
:
public
EventDispatchingCallback
{
public
:
explicit
ESMEventCB
(
nsIContent
*
aTarget
)
:
mTarget
(
aTarget
)
{
}
void
HandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
{
if
(
aVisitor
.
mPresContext
)
{
nsIFrame
*
frame
=
aVisitor
.
mPresContext
-
>
GetPrimaryFrameFor
(
mTarget
)
;
if
(
frame
)
{
frame
-
>
HandleEvent
(
aVisitor
.
mPresContext
aVisitor
.
mEvent
-
>
AsGUIEvent
(
)
&
aVisitor
.
mEventStatus
)
;
}
}
}
nsCOMPtr
<
nsIContent
>
mTarget
;
}
;
bool
EventStateManager
:
:
IsHandlingUserInput
(
)
{
return
sUserInputEventDepth
>
0
;
}
bool
EventStateManager
:
:
IsHandlingKeyboardInput
(
)
{
return
sUserKeyboardEventDepth
>
0
;
}
void
EventStateManager
:
:
StartHandlingUserInput
(
EventMessage
aMessage
)
{
+
+
sUserInputEventDepth
;
+
+
sUserInputCounter
;
if
(
sUserInputEventDepth
=
=
1
)
{
sLatestUserInputStart
=
sHandlingInputStart
=
TimeStamp
:
:
Now
(
)
;
}
if
(
WidgetEvent
:
:
IsKeyEventMessage
(
aMessage
)
)
{
+
+
sUserKeyboardEventDepth
;
}
}
void
EventStateManager
:
:
StopHandlingUserInput
(
EventMessage
aMessage
)
{
-
-
sUserInputEventDepth
;
if
(
sUserInputEventDepth
=
=
0
)
{
sHandlingInputStart
=
TimeStamp
(
)
;
}
if
(
WidgetEvent
:
:
IsKeyEventMessage
(
aMessage
)
)
{
-
-
sUserKeyboardEventDepth
;
}
}
static
void
CreateMouseOrPointerWidgetEvent
(
WidgetMouseEvent
*
aMouseEvent
EventMessage
aMessage
nsIContent
*
aRelatedContent
nsAutoPtr
<
WidgetMouseEvent
>
&
aNewEvent
)
{
WidgetPointerEvent
*
sourcePointer
=
aMouseEvent
-
>
AsPointerEvent
(
)
;
if
(
sourcePointer
)
{
AUTO_PROFILER_LABEL
(
"
CreateMouseOrPointerWidgetEvent
"
EVENTS
)
;
nsAutoPtr
<
WidgetPointerEvent
>
newPointerEvent
;
newPointerEvent
=
new
WidgetPointerEvent
(
aMouseEvent
-
>
IsTrusted
(
)
aMessage
aMouseEvent
-
>
mWidget
)
;
newPointerEvent
-
>
mIsPrimary
=
sourcePointer
-
>
mIsPrimary
;
newPointerEvent
-
>
mWidth
=
sourcePointer
-
>
mWidth
;
newPointerEvent
-
>
mHeight
=
sourcePointer
-
>
mHeight
;
newPointerEvent
-
>
inputSource
=
sourcePointer
-
>
inputSource
;
newPointerEvent
-
>
mRelatedTarget
=
aRelatedContent
;
aNewEvent
=
newPointerEvent
.
forget
(
)
;
}
else
{
aNewEvent
=
new
WidgetMouseEvent
(
aMouseEvent
-
>
IsTrusted
(
)
aMessage
aMouseEvent
-
>
mWidget
WidgetMouseEvent
:
:
eReal
)
;
aNewEvent
-
>
mRelatedTarget
=
aRelatedContent
;
}
aNewEvent
-
>
mRefPoint
=
aMouseEvent
-
>
mRefPoint
;
aNewEvent
-
>
mModifiers
=
aMouseEvent
-
>
mModifiers
;
aNewEvent
-
>
button
=
aMouseEvent
-
>
button
;
aNewEvent
-
>
buttons
=
aMouseEvent
-
>
buttons
;
aNewEvent
-
>
pressure
=
aMouseEvent
-
>
pressure
;
aNewEvent
-
>
mPluginEvent
=
aMouseEvent
-
>
mPluginEvent
;
aNewEvent
-
>
inputSource
=
aMouseEvent
-
>
inputSource
;
aNewEvent
-
>
pointerId
=
aMouseEvent
-
>
pointerId
;
}
nsIFrame
*
EventStateManager
:
:
DispatchMouseOrPointerEvent
(
WidgetMouseEvent
*
aMouseEvent
EventMessage
aMessage
nsIContent
*
aTargetContent
nsIContent
*
aRelatedContent
)
{
if
(
sIsPointerLocked
&
&
(
aMessage
=
=
eMouseLeave
|
|
aMessage
=
=
eMouseEnter
|
|
aMessage
=
=
eMouseOver
|
|
aMessage
=
=
eMouseOut
)
)
{
mCurrentTargetContent
=
nullptr
;
nsCOMPtr
<
Element
>
pointerLockedElement
=
do_QueryReferent
(
EventStateManager
:
:
sPointerLockedElement
)
;
if
(
!
pointerLockedElement
)
{
NS_WARNING
(
"
Should
have
pointer
locked
element
but
didn
'
t
.
"
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
pointerLockedElement
)
;
return
mPresContext
-
>
GetPrimaryFrameFor
(
content
)
;
}
mCurrentTargetContent
=
nullptr
;
if
(
!
aTargetContent
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIContent
>
targetContent
=
aTargetContent
;
nsCOMPtr
<
nsIContent
>
relatedContent
=
aRelatedContent
;
nsAutoPtr
<
WidgetMouseEvent
>
dispatchEvent
;
CreateMouseOrPointerWidgetEvent
(
aMouseEvent
aMessage
relatedContent
dispatchEvent
)
;
AutoWeakFrame
previousTarget
=
mCurrentTarget
;
mCurrentTargetContent
=
targetContent
;
nsIFrame
*
targetFrame
=
nullptr
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
ESMEventCB
callback
(
targetContent
)
;
EventDispatcher
:
:
Dispatch
(
targetContent
mPresContext
dispatchEvent
nullptr
&
status
&
callback
)
;
if
(
mPresContext
)
{
targetFrame
=
mPresContext
-
>
GetPrimaryFrameFor
(
targetContent
)
;
if
(
IsRemoteTarget
(
targetContent
)
)
{
if
(
aMessage
=
=
eMouseOut
)
{
nsAutoPtr
<
WidgetMouseEvent
>
remoteEvent
;
CreateMouseOrPointerWidgetEvent
(
aMouseEvent
eMouseExitFromWidget
relatedContent
remoteEvent
)
;
remoteEvent
-
>
mExitFrom
=
WidgetMouseEvent
:
:
eTopLevel
;
mCurrentTarget
=
targetFrame
;
HandleCrossProcessEvent
(
remoteEvent
&
status
)
;
}
else
if
(
aMessage
=
=
eMouseOver
)
{
nsAutoPtr
<
WidgetMouseEvent
>
remoteEvent
;
CreateMouseOrPointerWidgetEvent
(
aMouseEvent
eMouseEnterIntoWidget
relatedContent
remoteEvent
)
;
HandleCrossProcessEvent
(
remoteEvent
&
status
)
;
}
}
}
mCurrentTargetContent
=
nullptr
;
mCurrentTarget
=
previousTarget
;
return
targetFrame
;
}
class
EnterLeaveDispatcher
{
public
:
EnterLeaveDispatcher
(
EventStateManager
*
aESM
nsIContent
*
aTarget
nsIContent
*
aRelatedTarget
WidgetMouseEvent
*
aMouseEvent
EventMessage
aEventMessage
)
:
mESM
(
aESM
)
mMouseEvent
(
aMouseEvent
)
mEventMessage
(
aEventMessage
)
{
nsPIDOMWindowInner
*
win
=
aTarget
?
aTarget
-
>
OwnerDoc
(
)
-
>
GetInnerWindow
(
)
:
nullptr
;
if
(
aMouseEvent
-
>
AsPointerEvent
(
)
?
win
&
&
win
-
>
HasPointerEnterLeaveEventListeners
(
)
:
win
&
&
win
-
>
HasMouseEnterLeaveEventListeners
(
)
)
{
mRelatedTarget
=
aRelatedTarget
?
aRelatedTarget
-
>
FindFirstNonChromeOnlyAccessContent
(
)
:
nullptr
;
nsINode
*
commonParent
=
nullptr
;
if
(
aTarget
&
&
aRelatedTarget
)
{
commonParent
=
nsContentUtils
:
:
GetCommonAncestor
(
aTarget
aRelatedTarget
)
;
}
nsIContent
*
current
=
aTarget
;
while
(
current
&
&
current
!
=
commonParent
)
{
if
(
!
current
-
>
ChromeOnlyAccess
(
)
)
{
mTargets
.
AppendObject
(
current
)
;
}
current
=
current
-
>
GetParent
(
)
;
}
}
}
void
Dispatch
(
)
{
if
(
mEventMessage
=
=
eMouseEnter
|
|
mEventMessage
=
=
ePointerEnter
)
{
for
(
int32_t
i
=
mTargets
.
Count
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
mESM
-
>
DispatchMouseOrPointerEvent
(
mMouseEvent
mEventMessage
mTargets
[
i
]
mRelatedTarget
)
;
}
}
else
{
for
(
int32_t
i
=
0
;
i
<
mTargets
.
Count
(
)
;
+
+
i
)
{
mESM
-
>
DispatchMouseOrPointerEvent
(
mMouseEvent
mEventMessage
mTargets
[
i
]
mRelatedTarget
)
;
}
}
}
EventStateManager
*
mESM
;
nsCOMArray
<
nsIContent
>
mTargets
;
nsCOMPtr
<
nsIContent
>
mRelatedTarget
;
WidgetMouseEvent
*
mMouseEvent
;
EventMessage
mEventMessage
;
}
;
void
EventStateManager
:
:
NotifyMouseOut
(
WidgetMouseEvent
*
aMouseEvent
nsIContent
*
aMovingInto
)
{
RefPtr
<
OverOutElementsWrapper
>
wrapper
=
GetWrapperByEventID
(
aMouseEvent
)
;
if
(
!
wrapper
|
|
!
wrapper
-
>
mLastOverElement
)
return
;
if
(
wrapper
-
>
mLastOverElement
=
=
wrapper
-
>
mFirstOutEventElement
)
return
;
if
(
wrapper
-
>
mLastOverFrame
)
{
nsSubDocumentFrame
*
subdocFrame
=
do_QueryFrame
(
wrapper
-
>
mLastOverFrame
.
GetFrame
(
)
)
;
if
(
subdocFrame
)
{
nsIDocShell
*
docshell
=
subdocFrame
-
>
GetDocShell
(
)
;
if
(
docshell
)
{
RefPtr
<
nsPresContext
>
presContext
;
docshell
-
>
GetPresContext
(
getter_AddRefs
(
presContext
)
)
;
if
(
presContext
)
{
EventStateManager
*
kidESM
=
presContext
-
>
EventStateManager
(
)
;
kidESM
-
>
NotifyMouseOut
(
aMouseEvent
nullptr
)
;
}
}
}
}
if
(
!
wrapper
-
>
mLastOverElement
)
return
;
wrapper
-
>
mFirstOutEventElement
=
wrapper
-
>
mLastOverElement
;
bool
isPointer
=
aMouseEvent
-
>
mClass
=
=
ePointerEventClass
;
if
(
!
aMovingInto
&
&
!
isPointer
)
{
SetContentState
(
nullptr
NS_EVENT_STATE_HOVER
)
;
}
EnterLeaveDispatcher
leaveDispatcher
(
this
wrapper
-
>
mLastOverElement
aMovingInto
aMouseEvent
isPointer
?
ePointerLeave
:
eMouseLeave
)
;
DispatchMouseOrPointerEvent
(
aMouseEvent
isPointer
?
ePointerOut
:
eMouseOut
wrapper
-
>
mLastOverElement
aMovingInto
)
;
leaveDispatcher
.
Dispatch
(
)
;
wrapper
-
>
mLastOverFrame
=
nullptr
;
wrapper
-
>
mLastOverElement
=
nullptr
;
wrapper
-
>
mFirstOutEventElement
=
nullptr
;
}
void
EventStateManager
:
:
NotifyMouseOver
(
WidgetMouseEvent
*
aMouseEvent
nsIContent
*
aContent
)
{
NS_ASSERTION
(
aContent
"
Mouse
must
be
over
something
"
)
;
RefPtr
<
OverOutElementsWrapper
>
wrapper
=
GetWrapperByEventID
(
aMouseEvent
)
;
if
(
!
wrapper
|
|
wrapper
-
>
mLastOverElement
=
=
aContent
)
return
;
if
(
aContent
=
=
wrapper
-
>
mFirstOverEventElement
)
return
;
EnsureDocument
(
mPresContext
)
;
if
(
nsIDocument
*
parentDoc
=
mDocument
-
>
GetParentDocument
(
)
)
{
if
(
nsCOMPtr
<
nsIContent
>
docContent
=
parentDoc
-
>
FindContentForSubDocument
(
mDocument
)
)
{
if
(
nsIPresShell
*
parentShell
=
parentDoc
-
>
GetShell
(
)
)
{
RefPtr
<
EventStateManager
>
parentESM
=
parentShell
-
>
GetPresContext
(
)
-
>
EventStateManager
(
)
;
parentESM
-
>
NotifyMouseOver
(
aMouseEvent
docContent
)
;
}
}
}
if
(
wrapper
-
>
mLastOverElement
=
=
aContent
)
return
;
nsCOMPtr
<
nsIContent
>
lastOverElement
=
wrapper
-
>
mLastOverElement
;
bool
isPointer
=
aMouseEvent
-
>
mClass
=
=
ePointerEventClass
;
EnterLeaveDispatcher
enterDispatcher
(
this
aContent
lastOverElement
aMouseEvent
isPointer
?
ePointerEnter
:
eMouseEnter
)
;
if
(
!
isPointer
)
{
SetContentState
(
aContent
NS_EVENT_STATE_HOVER
)
;
}
NotifyMouseOut
(
aMouseEvent
aContent
)
;
wrapper
-
>
mFirstOverEventElement
=
aContent
;
wrapper
-
>
mLastOverFrame
=
DispatchMouseOrPointerEvent
(
aMouseEvent
isPointer
?
ePointerOver
:
eMouseOver
aContent
lastOverElement
)
;
enterDispatcher
.
Dispatch
(
)
;
wrapper
-
>
mLastOverElement
=
aContent
;
wrapper
-
>
mFirstOverEventElement
=
nullptr
;
}
static
LayoutDeviceIntPoint
GetWindowClientRectCenter
(
nsIWidget
*
aWidget
)
{
NS_ENSURE_TRUE
(
aWidget
LayoutDeviceIntPoint
(
0
0
)
)
;
LayoutDeviceIntRect
rect
=
aWidget
-
>
GetClientBounds
(
)
;
LayoutDeviceIntPoint
point
(
rect
.
x
+
rect
.
width
/
2
rect
.
y
+
rect
.
height
/
2
)
;
int32_t
round
=
aWidget
-
>
RoundsWidgetCoordinatesTo
(
)
;
point
.
x
=
point
.
x
/
round
*
round
;
point
.
y
=
point
.
y
/
round
*
round
;
return
point
-
aWidget
-
>
WidgetToScreenOffset
(
)
;
}
void
EventStateManager
:
:
GeneratePointerEnterExit
(
EventMessage
aMessage
WidgetMouseEvent
*
aEvent
)
{
if
(
!
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
)
{
return
;
}
WidgetPointerEvent
pointerEvent
(
*
aEvent
)
;
pointerEvent
.
mMessage
=
aMessage
;
GenerateMouseEnterExit
(
&
pointerEvent
)
;
}
void
EventStateManager
:
:
UpdateLastRefPointOfMouseEvent
(
WidgetMouseEvent
*
aMouseEvent
)
{
if
(
aMouseEvent
-
>
mMessage
!
=
eMouseMove
&
&
aMouseEvent
-
>
mMessage
!
=
ePointerMove
)
{
return
;
}
if
(
sIsPointerLocked
&
&
aMouseEvent
-
>
mWidget
)
{
aMouseEvent
-
>
mLastRefPoint
=
GetWindowClientRectCenter
(
aMouseEvent
-
>
mWidget
)
;
}
else
if
(
sLastRefPoint
=
=
kInvalidRefPoint
)
{
aMouseEvent
-
>
mLastRefPoint
=
aMouseEvent
-
>
mRefPoint
;
}
else
{
aMouseEvent
-
>
mLastRefPoint
=
sLastRefPoint
;
}
}
void
EventStateManager
:
:
ResetPointerToWindowCenterWhilePointerLocked
(
WidgetMouseEvent
*
aMouseEvent
)
{
MOZ_ASSERT
(
sIsPointerLocked
)
;
if
(
(
aMouseEvent
-
>
mMessage
!
=
eMouseMove
&
&
aMouseEvent
-
>
mMessage
!
=
ePointerMove
)
|
|
!
aMouseEvent
-
>
mWidget
)
{
return
;
}
bool
updateSynthCenteringPoint
=
aMouseEvent
-
>
mMessage
=
=
eMouseMove
;
LayoutDeviceIntPoint
center
=
GetWindowClientRectCenter
(
aMouseEvent
-
>
mWidget
)
;
if
(
aMouseEvent
-
>
mRefPoint
!
=
center
&
&
updateSynthCenteringPoint
)
{
sSynthCenteringPoint
=
center
;
aMouseEvent
-
>
mWidget
-
>
SynthesizeNativeMouseMove
(
center
+
aMouseEvent
-
>
mWidget
-
>
WidgetToScreenOffset
(
)
nullptr
)
;
}
else
if
(
aMouseEvent
-
>
mRefPoint
=
=
sSynthCenteringPoint
)
{
aMouseEvent
-
>
StopPropagation
(
)
;
if
(
updateSynthCenteringPoint
)
{
sSynthCenteringPoint
=
kInvalidRefPoint
;
}
}
}
void
EventStateManager
:
:
UpdateLastPointerPosition
(
WidgetMouseEvent
*
aMouseEvent
)
{
if
(
aMouseEvent
-
>
mMessage
!
=
eMouseMove
)
{
return
;
}
sLastRefPoint
=
aMouseEvent
-
>
mRefPoint
;
}
void
EventStateManager
:
:
GenerateMouseEnterExit
(
WidgetMouseEvent
*
aMouseEvent
)
{
EnsureDocument
(
mPresContext
)
;
if
(
!
mDocument
)
return
;
nsCOMPtr
<
nsIContent
>
targetBeforeEvent
=
mCurrentTargetContent
;
switch
(
aMouseEvent
-
>
mMessage
)
{
case
eMouseMove
:
case
ePointerMove
:
case
ePointerDown
:
case
ePointerGotCapture
:
{
nsCOMPtr
<
nsIContent
>
targetElement
=
GetEventTargetContent
(
aMouseEvent
)
;
if
(
!
targetElement
)
{
targetElement
=
mDocument
-
>
GetRootElement
(
)
;
}
if
(
targetElement
)
{
NotifyMouseOver
(
aMouseEvent
targetElement
)
;
}
}
break
;
case
ePointerUp
:
{
nsCOMPtr
<
nsIContent
>
targetElement
=
GetEventTargetContent
(
aMouseEvent
)
;
if
(
!
targetElement
)
{
targetElement
=
mDocument
-
>
GetRootElement
(
)
;
}
if
(
targetElement
)
{
RefPtr
<
OverOutElementsWrapper
>
helper
=
GetWrapperByEventID
(
aMouseEvent
)
;
if
(
helper
)
{
helper
-
>
mLastOverElement
=
targetElement
;
}
NotifyMouseOut
(
aMouseEvent
nullptr
)
;
}
}
break
;
case
ePointerLeave
:
case
ePointerCancel
:
case
eMouseExitFromWidget
:
{
RefPtr
<
OverOutElementsWrapper
>
helper
=
GetWrapperByEventID
(
aMouseEvent
)
;
if
(
helper
&
&
helper
-
>
mLastOverFrame
&
&
nsContentUtils
:
:
GetTopLevelWidget
(
aMouseEvent
-
>
mWidget
)
!
=
nsContentUtils
:
:
GetTopLevelWidget
(
helper
-
>
mLastOverFrame
-
>
GetNearestWidget
(
)
)
)
{
break
;
}
sLastRefPoint
=
kInvalidRefPoint
;
NotifyMouseOut
(
aMouseEvent
nullptr
)
;
}
break
;
default
:
break
;
}
mCurrentTargetContent
=
targetBeforeEvent
;
}
OverOutElementsWrapper
*
EventStateManager
:
:
GetWrapperByEventID
(
WidgetMouseEvent
*
aEvent
)
{
WidgetPointerEvent
*
pointer
=
aEvent
-
>
AsPointerEvent
(
)
;
if
(
!
pointer
)
{
MOZ_ASSERT
(
aEvent
-
>
AsMouseEvent
(
)
!
=
nullptr
)
;
if
(
!
mMouseEnterLeaveHelper
)
{
mMouseEnterLeaveHelper
=
new
OverOutElementsWrapper
(
)
;
}
return
mMouseEnterLeaveHelper
;
}
return
mPointersEnterLeaveHelper
.
LookupForAdd
(
pointer
-
>
pointerId
)
.
OrInsert
(
[
]
(
)
{
return
new
OverOutElementsWrapper
(
)
;
}
)
;
}
void
EventStateManager
:
:
SetPointerLock
(
nsIWidget
*
aWidget
nsIContent
*
aElement
)
{
sIsPointerLocked
=
!
!
aElement
;
WheelTransaction
:
:
EndTransaction
(
)
;
nsCOMPtr
<
nsIDragService
>
dragService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
sIsPointerLocked
)
{
MOZ_ASSERT
(
aWidget
"
Locking
pointer
requires
a
widget
"
)
;
PointerEventHandler
:
:
ReleaseAllPointerCapture
(
)
;
sPreLockPoint
=
sLastRefPoint
;
sLastRefPoint
=
GetWindowClientRectCenter
(
aWidget
)
;
aWidget
-
>
SynthesizeNativeMouseMove
(
sLastRefPoint
+
aWidget
-
>
WidgetToScreenOffset
(
)
nullptr
)
;
if
(
dragService
)
{
dragService
-
>
Suppress
(
)
;
}
}
else
{
sLastRefPoint
=
sPreLockPoint
;
sSynthCenteringPoint
=
kInvalidRefPoint
;
if
(
aWidget
)
{
aWidget
-
>
SynthesizeNativeMouseMove
(
sPreLockPoint
+
aWidget
-
>
WidgetToScreenOffset
(
)
nullptr
)
;
}
if
(
dragService
)
{
dragService
-
>
Unsuppress
(
)
;
}
}
}
void
EventStateManager
:
:
GenerateDragDropEnterExit
(
nsPresContext
*
aPresContext
WidgetDragEvent
*
aDragEvent
)
{
nsCOMPtr
<
nsIContent
>
targetBeforeEvent
=
mCurrentTargetContent
;
switch
(
aDragEvent
-
>
mMessage
)
{
case
eDragOver
:
{
if
(
sLastDragOverFrame
!
=
mCurrentTarget
)
{
nsCOMPtr
<
nsIContent
>
lastContent
;
nsCOMPtr
<
nsIContent
>
targetContent
;
mCurrentTarget
-
>
GetContentForEvent
(
aDragEvent
getter_AddRefs
(
targetContent
)
)
;
if
(
sLastDragOverFrame
)
{
sLastDragOverFrame
-
>
GetContentForEvent
(
aDragEvent
getter_AddRefs
(
lastContent
)
)
;
FireDragEnterOrExit
(
sLastDragOverFrame
-
>
PresContext
(
)
aDragEvent
eDragExit
targetContent
lastContent
sLastDragOverFrame
)
;
nsIContent
*
target
=
sLastDragOverFrame
?
sLastDragOverFrame
.
GetFrame
(
)
-
>
GetContent
(
)
:
nullptr
;
if
(
IsRemoteTarget
(
target
)
)
{
WidgetDragEvent
remoteEvent
(
aDragEvent
-
>
IsTrusted
(
)
eDragExit
aDragEvent
-
>
mWidget
)
;
remoteEvent
.
AssignDragEventData
(
*
aDragEvent
true
)
;
nsEventStatus
remoteStatus
=
nsEventStatus_eIgnore
;
HandleCrossProcessEvent
(
&
remoteEvent
&
remoteStatus
)
;
}
}
AutoWeakFrame
currentTraget
=
mCurrentTarget
;
FireDragEnterOrExit
(
aPresContext
aDragEvent
eDragEnter
lastContent
targetContent
currentTraget
)
;
if
(
sLastDragOverFrame
)
{
FireDragEnterOrExit
(
sLastDragOverFrame
-
>
PresContext
(
)
aDragEvent
eDragLeave
targetContent
lastContent
sLastDragOverFrame
)
;
}
sLastDragOverFrame
=
mCurrentTarget
;
}
}
break
;
case
eDragExit
:
{
if
(
sLastDragOverFrame
)
{
nsCOMPtr
<
nsIContent
>
lastContent
;
sLastDragOverFrame
-
>
GetContentForEvent
(
aDragEvent
getter_AddRefs
(
lastContent
)
)
;
RefPtr
<
nsPresContext
>
lastDragOverFramePresContext
=
sLastDragOverFrame
-
>
PresContext
(
)
;
FireDragEnterOrExit
(
lastDragOverFramePresContext
aDragEvent
eDragExit
nullptr
lastContent
sLastDragOverFrame
)
;
FireDragEnterOrExit
(
lastDragOverFramePresContext
aDragEvent
eDragLeave
nullptr
lastContent
sLastDragOverFrame
)
;
sLastDragOverFrame
=
nullptr
;
}
}
break
;
default
:
break
;
}
mCurrentTargetContent
=
targetBeforeEvent
;
FlushPendingEvents
(
aPresContext
)
;
}
void
EventStateManager
:
:
FireDragEnterOrExit
(
nsPresContext
*
aPresContext
WidgetDragEvent
*
aDragEvent
EventMessage
aMessage
nsIContent
*
aRelatedTarget
nsIContent
*
aTargetContent
AutoWeakFrame
&
aTargetFrame
)
{
MOZ_ASSERT
(
aMessage
=
=
eDragLeave
|
|
aMessage
=
=
eDragExit
|
|
aMessage
=
=
eDragEnter
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetDragEvent
event
(
aDragEvent
-
>
IsTrusted
(
)
aMessage
aDragEvent
-
>
mWidget
)
;
event
.
AssignDragEventData
(
*
aDragEvent
false
)
;
event
.
mRelatedTarget
=
aRelatedTarget
;
mCurrentTargetContent
=
aTargetContent
;
if
(
aTargetContent
!
=
aRelatedTarget
)
{
if
(
aTargetContent
)
{
EventDispatcher
:
:
Dispatch
(
aTargetContent
aPresContext
&
event
nullptr
&
status
)
;
}
if
(
status
=
=
nsEventStatus_eConsumeNoDefault
|
|
aMessage
=
=
eDragExit
)
{
SetContentState
(
(
aMessage
=
=
eDragEnter
)
?
aTargetContent
:
nullptr
NS_EVENT_STATE_DRAGOVER
)
;
}
UpdateDragDataTransfer
(
&
event
)
;
}
if
(
aTargetFrame
)
aTargetFrame
-
>
HandleEvent
(
aPresContext
&
event
&
status
)
;
}
void
EventStateManager
:
:
UpdateDragDataTransfer
(
WidgetDragEvent
*
dragEvent
)
{
NS_ASSERTION
(
dragEvent
"
drag
event
is
null
in
UpdateDragDataTransfer
!
"
)
;
if
(
!
dragEvent
-
>
mDataTransfer
)
{
return
;
}
nsCOMPtr
<
nsIDragSession
>
dragSession
=
nsContentUtils
:
:
GetDragSession
(
)
;
if
(
dragSession
)
{
RefPtr
<
DataTransfer
>
initialDataTransfer
=
dragSession
-
>
GetDataTransfer
(
)
;
if
(
initialDataTransfer
)
{
nsAutoString
mozCursor
;
dragEvent
-
>
mDataTransfer
-
>
GetMozCursor
(
mozCursor
)
;
initialDataTransfer
-
>
SetMozCursor
(
mozCursor
)
;
}
}
}
nsresult
EventStateManager
:
:
SetClickCount
(
WidgetMouseEvent
*
aEvent
nsEventStatus
*
aStatus
nsIContent
*
aOverrideClickTarget
)
{
nsCOMPtr
<
nsIContent
>
mouseContent
=
aOverrideClickTarget
;
nsIContent
*
mouseContentParent
=
nullptr
;
if
(
!
mouseContent
&
&
mCurrentTarget
)
{
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
mouseContent
)
)
;
}
if
(
mouseContent
)
{
if
(
mouseContent
-
>
IsText
(
)
)
{
mouseContent
=
mouseContent
-
>
GetParent
(
)
;
}
if
(
mouseContent
&
&
mouseContent
-
>
IsRootOfNativeAnonymousSubtree
(
)
)
{
mouseContentParent
=
mouseContent
-
>
GetParent
(
)
;
}
}
switch
(
aEvent
-
>
button
)
{
case
WidgetMouseEvent
:
:
eLeftButton
:
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
mLastLeftMouseDownContent
=
mouseContent
;
mLastLeftMouseDownContentParent
=
mouseContentParent
;
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseUp
)
{
if
(
mLastLeftMouseDownContent
=
=
mouseContent
|
|
mLastLeftMouseDownContentParent
=
=
mouseContent
|
|
mLastLeftMouseDownContent
=
=
mouseContentParent
)
{
aEvent
-
>
mClickCount
=
mLClickCount
;
mLClickCount
=
0
;
}
else
{
aEvent
-
>
mClickCount
=
0
;
}
mLastLeftMouseDownContent
=
nullptr
;
mLastLeftMouseDownContentParent
=
nullptr
;
}
break
;
case
WidgetMouseEvent
:
:
eMiddleButton
:
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
mLastMiddleMouseDownContent
=
mouseContent
;
mLastMiddleMouseDownContentParent
=
mouseContentParent
;
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseUp
)
{
if
(
mLastMiddleMouseDownContent
=
=
mouseContent
|
|
mLastMiddleMouseDownContentParent
=
=
mouseContent
|
|
mLastMiddleMouseDownContent
=
=
mouseContentParent
)
{
aEvent
-
>
mClickCount
=
mMClickCount
;
mMClickCount
=
0
;
}
else
{
aEvent
-
>
mClickCount
=
0
;
}
mLastMiddleMouseDownContent
=
nullptr
;
mLastMiddleMouseDownContentParent
=
nullptr
;
}
break
;
case
WidgetMouseEvent
:
:
eRightButton
:
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
mLastRightMouseDownContent
=
mouseContent
;
mLastRightMouseDownContentParent
=
mouseContentParent
;
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseUp
)
{
if
(
mLastRightMouseDownContent
=
=
mouseContent
|
|
mLastRightMouseDownContentParent
=
=
mouseContent
|
|
mLastRightMouseDownContent
=
=
mouseContentParent
)
{
aEvent
-
>
mClickCount
=
mRClickCount
;
mRClickCount
=
0
;
}
else
{
aEvent
-
>
mClickCount
=
0
;
}
mLastRightMouseDownContent
=
nullptr
;
mLastRightMouseDownContentParent
=
nullptr
;
}
break
;
}
return
NS_OK
;
}
nsresult
EventStateManager
:
:
InitAndDispatchClickEvent
(
WidgetMouseEvent
*
aEvent
nsEventStatus
*
aStatus
EventMessage
aMessage
nsIPresShell
*
aPresShell
nsIContent
*
aMouseTarget
AutoWeakFrame
aCurrentTarget
bool
aNoContentDispatch
nsIContent
*
aOverrideClickTarget
)
{
WidgetMouseEvent
event
(
aEvent
-
>
IsTrusted
(
)
aMessage
aEvent
-
>
mWidget
WidgetMouseEvent
:
:
eReal
)
;
event
.
mRefPoint
=
aEvent
-
>
mRefPoint
;
event
.
mClickCount
=
aEvent
-
>
mClickCount
;
event
.
mModifiers
=
aEvent
-
>
mModifiers
;
event
.
buttons
=
aEvent
-
>
buttons
;
event
.
mTime
=
aEvent
-
>
mTime
;
event
.
mTimeStamp
=
aEvent
-
>
mTimeStamp
;
event
.
mFlags
.
mNoContentDispatch
=
aNoContentDispatch
;
event
.
button
=
aEvent
-
>
button
;
event
.
pointerId
=
aEvent
-
>
pointerId
;
event
.
inputSource
=
aEvent
-
>
inputSource
;
nsIContent
*
target
=
aMouseTarget
;
nsIFrame
*
targetFrame
=
aCurrentTarget
;
if
(
aOverrideClickTarget
)
{
target
=
aOverrideClickTarget
;
targetFrame
=
aOverrideClickTarget
-
>
GetPrimaryFrame
(
)
;
}
return
aPresShell
-
>
HandleEventWithTarget
(
&
event
targetFrame
target
aStatus
)
;
}
nsresult
EventStateManager
:
:
CheckForAndDispatchClick
(
WidgetMouseEvent
*
aEvent
nsEventStatus
*
aStatus
nsIContent
*
aOverrideClickTarget
)
{
nsresult
ret
=
NS_OK
;
if
(
aEvent
-
>
mClickCount
)
{
if
(
aEvent
-
>
mWidget
&
&
!
aEvent
-
>
mWidget
-
>
IsEnabled
(
)
)
{
return
ret
;
}
bool
notDispatchToContents
=
(
aEvent
-
>
button
=
=
WidgetMouseEvent
:
:
eMiddleButton
|
|
aEvent
-
>
button
=
=
WidgetMouseEvent
:
:
eRightButton
)
;
bool
fireAuxClick
=
notDispatchToContents
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
mPresContext
-
>
GetPresShell
(
)
;
if
(
presShell
)
{
nsCOMPtr
<
nsIContent
>
mouseContent
=
GetEventTargetContent
(
aEvent
)
;
while
(
mouseContent
&
&
!
mouseContent
-
>
IsElement
(
)
)
{
mouseContent
=
mouseContent
-
>
GetParent
(
)
;
}
if
(
!
mouseContent
&
&
!
mCurrentTarget
&
&
!
aOverrideClickTarget
)
{
return
NS_OK
;
}
AutoWeakFrame
currentTarget
=
mCurrentTarget
;
ret
=
InitAndDispatchClickEvent
(
aEvent
aStatus
eMouseClick
presShell
mouseContent
currentTarget
notDispatchToContents
aOverrideClickTarget
)
;
if
(
NS_SUCCEEDED
(
ret
)
&
&
aEvent
-
>
mClickCount
=
=
2
&
&
mouseContent
&
&
mouseContent
-
>
IsInComposedDoc
(
)
)
{
ret
=
InitAndDispatchClickEvent
(
aEvent
aStatus
eMouseDoubleClick
presShell
mouseContent
currentTarget
notDispatchToContents
aOverrideClickTarget
)
;
}
if
(
NS_SUCCEEDED
(
ret
)
&
&
mouseContent
&
&
fireAuxClick
&
&
mouseContent
-
>
IsInComposedDoc
(
)
)
{
ret
=
InitAndDispatchClickEvent
(
aEvent
aStatus
eMouseAuxClick
presShell
mouseContent
currentTarget
false
aOverrideClickTarget
)
;
}
}
}
return
ret
;
}
nsIFrame
*
EventStateManager
:
:
GetEventTarget
(
)
{
nsIPresShell
*
shell
;
if
(
mCurrentTarget
|
|
!
mPresContext
|
|
!
(
shell
=
mPresContext
-
>
GetPresShell
(
)
)
)
{
return
mCurrentTarget
;
}
if
(
mCurrentTargetContent
)
{
mCurrentTarget
=
mPresContext
-
>
GetPrimaryFrameFor
(
mCurrentTargetContent
)
;
if
(
mCurrentTarget
)
{
return
mCurrentTarget
;
}
}
nsIFrame
*
frame
=
shell
-
>
GetEventTargetFrame
(
)
;
return
(
mCurrentTarget
=
frame
)
;
}
already_AddRefed
<
nsIContent
>
EventStateManager
:
:
GetEventTargetContent
(
WidgetEvent
*
aEvent
)
{
if
(
aEvent
&
&
(
aEvent
-
>
mMessage
=
=
eFocus
|
|
aEvent
-
>
mMessage
=
=
eBlur
)
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetFocusedContent
(
)
;
return
content
.
forget
(
)
;
}
if
(
mCurrentTargetContent
)
{
nsCOMPtr
<
nsIContent
>
content
=
mCurrentTargetContent
;
return
content
.
forget
(
)
;
}
nsCOMPtr
<
nsIContent
>
content
;
nsIPresShell
*
presShell
=
mPresContext
-
>
GetPresShell
(
)
;
if
(
presShell
)
{
content
=
presShell
-
>
GetEventTargetContent
(
aEvent
)
;
}
if
(
!
content
&
&
mCurrentTarget
)
{
mCurrentTarget
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
content
)
)
;
}
return
content
.
forget
(
)
;
}
static
Element
*
GetLabelTarget
(
nsIContent
*
aPossibleLabel
)
{
mozilla
:
:
dom
:
:
HTMLLabelElement
*
label
=
mozilla
:
:
dom
:
:
HTMLLabelElement
:
:
FromNode
(
aPossibleLabel
)
;
if
(
!
label
)
return
nullptr
;
return
label
-
>
GetLabeledElement
(
)
;
}
static
nsIContent
*
FindCommonAncestor
(
nsIContent
*
aNode1
nsIContent
*
aNode2
)
{
if
(
!
aNode1
|
|
!
aNode2
)
{
return
nullptr
;
}
return
nsContentUtils
:
:
GetCommonFlattenedTreeAncestor
(
aNode1
aNode2
)
;
}
void
EventStateManager
:
:
SetFullScreenState
(
Element
*
aElement
bool
aIsFullScreen
)
{
DoStateChange
(
aElement
NS_EVENT_STATE_FULL_SCREEN
aIsFullScreen
)
;
}
inline
void
EventStateManager
:
:
DoStateChange
(
Element
*
aElement
EventStates
aState
bool
aAddState
)
{
if
(
aAddState
)
{
aElement
-
>
AddStates
(
aState
)
;
}
else
{
aElement
-
>
RemoveStates
(
aState
)
;
}
}
inline
void
EventStateManager
:
:
DoStateChange
(
nsIContent
*
aContent
EventStates
aState
bool
aStateAdded
)
{
if
(
aContent
-
>
IsElement
(
)
)
{
DoStateChange
(
aContent
-
>
AsElement
(
)
aState
aStateAdded
)
;
}
}
void
EventStateManager
:
:
UpdateAncestorState
(
nsIContent
*
aStartNode
nsIContent
*
aStopBefore
EventStates
aState
bool
aAddState
)
{
for
(
;
aStartNode
&
&
aStartNode
!
=
aStopBefore
;
aStartNode
=
aStartNode
-
>
GetFlattenedTreeParent
(
)
)
{
if
(
!
aStartNode
-
>
IsElement
(
)
)
{
continue
;
}
Element
*
element
=
aStartNode
-
>
AsElement
(
)
;
DoStateChange
(
element
aState
aAddState
)
;
Element
*
labelTarget
=
GetLabelTarget
(
element
)
;
if
(
labelTarget
)
{
DoStateChange
(
labelTarget
aState
aAddState
)
;
}
}
if
(
aAddState
)
{
for
(
;
aStartNode
;
aStartNode
=
aStartNode
-
>
GetFlattenedTreeParent
(
)
)
{
if
(
!
aStartNode
-
>
IsElement
(
)
)
{
continue
;
}
Element
*
labelTarget
=
GetLabelTarget
(
aStartNode
-
>
AsElement
(
)
)
;
if
(
labelTarget
&
&
!
labelTarget
-
>
State
(
)
.
HasState
(
aState
)
)
{
DoStateChange
(
labelTarget
aState
true
)
;
}
}
}
}
bool
EventStateManager
:
:
SetContentState
(
nsIContent
*
aContent
EventStates
aState
)
{
NS_PRECONDITION
(
aState
=
=
NS_EVENT_STATE_ACTIVE
|
|
aState
=
=
NS_EVENT_STATE_HOVER
|
|
aState
=
=
NS_EVENT_STATE_DRAGOVER
|
|
aState
=
=
NS_EVENT_STATE_URLTARGET
"
Unexpected
state
"
)
;
nsCOMPtr
<
nsIContent
>
notifyContent1
;
nsCOMPtr
<
nsIContent
>
notifyContent2
;
bool
updateAncestors
;
if
(
aState
=
=
NS_EVENT_STATE_HOVER
|
|
aState
=
=
NS_EVENT_STATE_ACTIVE
)
{
updateAncestors
=
true
;
if
(
mCurrentTarget
)
{
const
nsStyleUserInterface
*
ui
=
mCurrentTarget
-
>
StyleUserInterface
(
)
;
if
(
ui
-
>
mUserInput
=
=
StyleUserInput
:
:
None
)
{
return
false
;
}
}
if
(
aState
=
=
NS_EVENT_STATE_ACTIVE
)
{
if
(
aContent
&
&
aContent
-
>
IsEditable
(
)
&
&
!
aContent
-
>
IsInNativeAnonymousSubtree
(
)
)
{
aContent
=
nullptr
;
}
if
(
aContent
!
=
mActiveContent
)
{
notifyContent1
=
aContent
;
notifyContent2
=
mActiveContent
;
mActiveContent
=
aContent
;
}
}
else
{
NS_ASSERTION
(
aState
=
=
NS_EVENT_STATE_HOVER
"
How
did
that
happen
?
"
)
;
nsIContent
*
newHover
;
if
(
mPresContext
-
>
IsDynamic
(
)
)
{
newHover
=
aContent
;
}
else
{
NS_ASSERTION
(
!
aContent
|
|
aContent
-
>
GetComposedDoc
(
)
=
=
mPresContext
-
>
PresShell
(
)
-
>
GetDocument
(
)
"
Unexpected
document
"
)
;
nsIFrame
*
frame
=
aContent
?
aContent
-
>
GetPrimaryFrame
(
)
:
nullptr
;
if
(
frame
&
&
nsLayoutUtils
:
:
IsViewportScrollbarFrame
(
frame
)
)
{
newHover
=
aContent
;
}
else
{
newHover
=
nullptr
;
}
}
if
(
newHover
!
=
mHoverContent
)
{
notifyContent1
=
newHover
;
notifyContent2
=
mHoverContent
;
mHoverContent
=
newHover
;
}
}
}
else
{
updateAncestors
=
false
;
if
(
aState
=
=
NS_EVENT_STATE_DRAGOVER
)
{
if
(
aContent
!
=
sDragOverContent
)
{
notifyContent1
=
aContent
;
notifyContent2
=
sDragOverContent
;
sDragOverContent
=
aContent
;
}
}
else
if
(
aState
=
=
NS_EVENT_STATE_URLTARGET
)
{
if
(
aContent
!
=
mURLTargetContent
)
{
notifyContent1
=
aContent
;
notifyContent2
=
mURLTargetContent
;
mURLTargetContent
=
aContent
;
}
}
}
bool
content1StateSet
=
true
;
if
(
!
notifyContent1
)
{
notifyContent1
=
notifyContent2
;
notifyContent2
=
nullptr
;
content1StateSet
=
false
;
}
if
(
notifyContent1
&
&
mPresContext
)
{
EnsureDocument
(
mPresContext
)
;
if
(
mDocument
)
{
nsAutoScriptBlocker
scriptBlocker
;
if
(
updateAncestors
)
{
nsCOMPtr
<
nsIContent
>
commonAncestor
=
FindCommonAncestor
(
notifyContent1
notifyContent2
)
;
if
(
notifyContent2
)
{
UpdateAncestorState
(
notifyContent2
commonAncestor
aState
false
)
;
}
UpdateAncestorState
(
notifyContent1
commonAncestor
aState
content1StateSet
)
;
}
else
{
if
(
notifyContent2
)
{
DoStateChange
(
notifyContent2
aState
false
)
;
}
DoStateChange
(
notifyContent1
aState
content1StateSet
)
;
}
}
}
return
true
;
}
void
EventStateManager
:
:
ResetLastOverForContent
(
const
uint32_t
&
aIdx
RefPtr
<
OverOutElementsWrapper
>
&
aElemWrapper
nsIContent
*
aContent
)
{
if
(
aElemWrapper
&
&
aElemWrapper
-
>
mLastOverElement
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
aElemWrapper
-
>
mLastOverElement
aContent
)
)
{
aElemWrapper
-
>
mLastOverElement
=
nullptr
;
}
}
void
EventStateManager
:
:
ContentRemoved
(
nsIDocument
*
aDocument
nsIContent
*
aMaybeContainer
nsIContent
*
aContent
)
{
if
(
aContent
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
a
nsGkAtoms
:
:
area
)
&
&
(
aContent
-
>
AsElement
(
)
-
>
State
(
)
.
HasAtLeastOneOfStates
(
NS_EVENT_STATE_FOCUS
|
NS_EVENT_STATE_HOVER
)
)
)
{
nsGenericHTMLElement
*
element
=
static_cast
<
nsGenericHTMLElement
*
>
(
aContent
)
;
element
-
>
LeaveLink
(
element
-
>
GetPresContext
(
nsGenericHTMLElement
:
:
eForComposedDoc
)
)
;
}
IMEStateManager
:
:
OnRemoveContent
(
mPresContext
aContent
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
fm
-
>
ContentRemoved
(
aDocument
aContent
)
;
if
(
mHoverContent
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
mHoverContent
aContent
)
)
{
SetContentState
(
aContent
-
>
GetParent
(
)
NS_EVENT_STATE_HOVER
)
;
}
if
(
mActiveContent
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
mActiveContent
aContent
)
)
{
SetContentState
(
aContent
-
>
GetParent
(
)
NS_EVENT_STATE_ACTIVE
)
;
}
if
(
sDragOverContent
&
&
sDragOverContent
-
>
OwnerDoc
(
)
=
=
aContent
-
>
OwnerDoc
(
)
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
sDragOverContent
aContent
)
)
{
sDragOverContent
=
nullptr
;
}
PointerEventHandler
:
:
ReleaseIfCaptureByDescendant
(
aContent
)
;
ResetLastOverForContent
(
0
mMouseEnterLeaveHelper
aContent
)
;
for
(
auto
iter
=
mPointersEnterLeaveHelper
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
ResetLastOverForContent
(
iter
.
Key
(
)
iter
.
Data
(
)
aContent
)
;
}
}
bool
EventStateManager
:
:
EventStatusOK
(
WidgetGUIEvent
*
aEvent
)
{
return
!
(
aEvent
-
>
mMessage
=
=
eMouseDown
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
button
=
=
WidgetMouseEvent
:
:
eLeftButton
&
&
!
sNormalLMouseEventInProcess
)
;
}
void
EventStateManager
:
:
RegisterAccessKey
(
Element
*
aElement
uint32_t
aKey
)
{
if
(
aElement
&
&
mAccessKeys
.
IndexOf
(
aElement
)
=
=
-
1
)
mAccessKeys
.
AppendObject
(
aElement
)
;
}
void
EventStateManager
:
:
UnregisterAccessKey
(
Element
*
aElement
uint32_t
aKey
)
{
if
(
aElement
)
mAccessKeys
.
RemoveObject
(
aElement
)
;
}
uint32_t
EventStateManager
:
:
GetRegisteredAccessKey
(
Element
*
aElement
)
{
MOZ_ASSERT
(
aElement
)
;
if
(
mAccessKeys
.
IndexOf
(
aElement
)
=
=
-
1
)
return
0
;
nsAutoString
accessKey
;
aElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
accesskey
accessKey
)
;
return
accessKey
.
First
(
)
;
}
void
EventStateManager
:
:
EnsureDocument
(
nsPresContext
*
aPresContext
)
{
if
(
!
mDocument
)
mDocument
=
aPresContext
-
>
Document
(
)
;
}
void
EventStateManager
:
:
FlushPendingEvents
(
nsPresContext
*
aPresContext
)
{
NS_PRECONDITION
(
nullptr
!
=
aPresContext
"
nullptr
ptr
"
)
;
nsIPresShell
*
shell
=
aPresContext
-
>
GetPresShell
(
)
;
if
(
shell
)
{
shell
-
>
FlushPendingNotifications
(
FlushType
:
:
InterruptibleLayout
)
;
}
}
nsIContent
*
EventStateManager
:
:
GetFocusedContent
(
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
EnsureDocument
(
mPresContext
)
;
if
(
!
fm
|
|
!
mDocument
)
return
nullptr
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
return
nsFocusManager
:
:
GetFocusedDescendant
(
mDocument
-
>
GetWindow
(
)
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
}
bool
EventStateManager
:
:
IsShellVisible
(
nsIDocShell
*
aShell
)
{
NS_ASSERTION
(
aShell
"
docshell
is
null
"
)
;
nsCOMPtr
<
nsIBaseWindow
>
basewin
=
do_QueryInterface
(
aShell
)
;
if
(
!
basewin
)
return
true
;
bool
isVisible
=
true
;
basewin
-
>
GetVisibility
(
&
isVisible
)
;
return
isVisible
;
}
nsresult
EventStateManager
:
:
DoContentCommandEvent
(
WidgetContentCommandEvent
*
aEvent
)
{
EnsureDocument
(
mPresContext
)
;
NS_ENSURE_TRUE
(
mDocument
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
(
mDocument
-
>
GetWindow
(
)
)
;
NS_ENSURE_TRUE
(
window
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsPIWindowRoot
>
root
=
window
-
>
GetTopWindowRoot
(
)
;
NS_ENSURE_TRUE
(
root
NS_ERROR_FAILURE
)
;
const
char
*
cmd
;
switch
(
aEvent
-
>
mMessage
)
{
case
eContentCommandCut
:
cmd
=
"
cmd_cut
"
;
break
;
case
eContentCommandCopy
:
cmd
=
"
cmd_copy
"
;
break
;
case
eContentCommandPaste
:
cmd
=
"
cmd_paste
"
;
break
;
case
eContentCommandDelete
:
cmd
=
"
cmd_delete
"
;
break
;
case
eContentCommandUndo
:
cmd
=
"
cmd_undo
"
;
break
;
case
eContentCommandRedo
:
cmd
=
"
cmd_redo
"
;
break
;
case
eContentCommandPasteTransferable
:
cmd
=
"
cmd_pasteTransferable
"
;
break
;
case
eContentCommandLookUpDictionary
:
cmd
=
"
cmd_lookUpDictionary
"
;
break
;
default
:
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCOMPtr
<
nsIController
>
controller
;
nsresult
rv
=
root
-
>
GetControllerForCommand
(
cmd
true
getter_AddRefs
(
controller
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
controller
)
{
aEvent
-
>
mIsEnabled
=
false
;
}
else
{
bool
canDoIt
;
rv
=
controller
-
>
IsCommandEnabled
(
cmd
&
canDoIt
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aEvent
-
>
mIsEnabled
=
canDoIt
;
if
(
canDoIt
&
&
!
aEvent
-
>
mOnlyEnabledCheck
)
{
switch
(
aEvent
-
>
mMessage
)
{
case
eContentCommandPasteTransferable
:
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
nsIContent
*
focusedContent
=
fm
?
fm
-
>
GetFocusedContent
(
)
:
nullptr
;
RefPtr
<
TabParent
>
remote
=
TabParent
:
:
GetFrom
(
focusedContent
)
;
if
(
remote
)
{
NS_ENSURE_TRUE
(
remote
-
>
Manager
(
)
-
>
IsContentParent
(
)
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsITransferable
>
transferable
=
aEvent
-
>
mTransferable
;
IPCDataTransfer
ipcDataTransfer
;
ContentParent
*
cp
=
remote
-
>
Manager
(
)
-
>
AsContentParent
(
)
;
nsContentUtils
:
:
TransferableToIPCTransferable
(
transferable
&
ipcDataTransfer
false
nullptr
cp
)
;
bool
isPrivateData
=
false
;
transferable
-
>
GetIsPrivateData
(
&
isPrivateData
)
;
nsCOMPtr
<
nsIPrincipal
>
requestingPrincipal
;
transferable
-
>
GetRequestingPrincipal
(
getter_AddRefs
(
requestingPrincipal
)
)
;
nsContentPolicyType
contentPolicyType
=
nsIContentPolicy
:
:
TYPE_OTHER
;
transferable
-
>
GetContentPolicyType
(
&
contentPolicyType
)
;
remote
-
>
SendPasteTransferable
(
ipcDataTransfer
isPrivateData
IPC
:
:
Principal
(
requestingPrincipal
)
contentPolicyType
)
;
rv
=
NS_OK
;
}
else
{
nsCOMPtr
<
nsICommandController
>
commandController
=
do_QueryInterface
(
controller
)
;
NS_ENSURE_STATE
(
commandController
)
;
nsCOMPtr
<
nsICommandParams
>
params
=
do_CreateInstance
(
"
mozilla
.
org
/
embedcomp
/
command
-
params
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
params
-
>
SetISupportsValue
(
"
transferable
"
aEvent
-
>
mTransferable
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
commandController
-
>
DoCommandWithParams
(
cmd
params
)
;
}
break
;
}
case
eContentCommandLookUpDictionary
:
{
nsCOMPtr
<
nsICommandController
>
commandController
=
do_QueryInterface
(
controller
)
;
if
(
NS_WARN_IF
(
!
commandController
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsICommandParams
>
params
=
do_CreateInstance
(
"
mozilla
.
org
/
embedcomp
/
command
-
params
;
1
"
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
params
-
>
SetLongValue
(
"
x
"
aEvent
-
>
mRefPoint
.
x
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
params
-
>
SetLongValue
(
"
y
"
aEvent
-
>
mRefPoint
.
y
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
commandController
-
>
DoCommandWithParams
(
cmd
params
)
;
break
;
}
default
:
rv
=
controller
-
>
DoCommand
(
cmd
)
;
break
;
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
aEvent
-
>
mSucceeded
=
true
;
return
NS_OK
;
}
nsresult
EventStateManager
:
:
DoContentCommandScrollEvent
(
WidgetContentCommandEvent
*
aEvent
)
{
NS_ENSURE_TRUE
(
mPresContext
NS_ERROR_NOT_AVAILABLE
)
;
nsIPresShell
*
ps
=
mPresContext
-
>
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
ps
NS_ERROR_NOT_AVAILABLE
)
;
NS_ENSURE_TRUE
(
aEvent
-
>
mScroll
.
mAmount
!
=
0
NS_ERROR_INVALID_ARG
)
;
nsIScrollableFrame
:
:
ScrollUnit
scrollUnit
;
switch
(
aEvent
-
>
mScroll
.
mUnit
)
{
case
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Line
:
scrollUnit
=
nsIScrollableFrame
:
:
LINES
;
break
;
case
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Page
:
scrollUnit
=
nsIScrollableFrame
:
:
PAGES
;
break
;
case
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Whole
:
scrollUnit
=
nsIScrollableFrame
:
:
WHOLE
;
break
;
default
:
return
NS_ERROR_INVALID_ARG
;
}
aEvent
-
>
mSucceeded
=
true
;
nsIScrollableFrame
*
sf
=
ps
-
>
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eEither
)
;
aEvent
-
>
mIsEnabled
=
sf
?
(
aEvent
-
>
mScroll
.
mIsHorizontal
?
WheelHandlingUtils
:
:
CanScrollOn
(
sf
aEvent
-
>
mScroll
.
mAmount
0
)
:
WheelHandlingUtils
:
:
CanScrollOn
(
sf
0
aEvent
-
>
mScroll
.
mAmount
)
)
:
false
;
if
(
!
aEvent
-
>
mIsEnabled
|
|
aEvent
-
>
mOnlyEnabledCheck
)
{
return
NS_OK
;
}
nsIntPoint
pt
(
0
0
)
;
if
(
aEvent
-
>
mScroll
.
mIsHorizontal
)
{
pt
.
x
=
aEvent
-
>
mScroll
.
mAmount
;
}
else
{
pt
.
y
=
aEvent
-
>
mScroll
.
mAmount
;
}
sf
-
>
ScrollBy
(
pt
scrollUnit
nsIScrollableFrame
:
:
INSTANT
)
;
return
NS_OK
;
}
void
EventStateManager
:
:
SetActiveManager
(
EventStateManager
*
aNewESM
nsIContent
*
aContent
)
{
if
(
sActiveESM
&
&
aNewESM
!
=
sActiveESM
)
{
sActiveESM
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_ACTIVE
)
;
}
sActiveESM
=
aNewESM
;
if
(
sActiveESM
&
&
aContent
)
{
sActiveESM
-
>
SetContentState
(
aContent
NS_EVENT_STATE_ACTIVE
)
;
}
}
void
EventStateManager
:
:
ClearGlobalActiveContent
(
EventStateManager
*
aClearer
)
{
if
(
aClearer
)
{
aClearer
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_ACTIVE
)
;
if
(
sDragOverContent
)
{
aClearer
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_DRAGOVER
)
;
}
}
if
(
sActiveESM
&
&
aClearer
!
=
sActiveESM
)
{
sActiveESM
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_ACTIVE
)
;
}
sActiveESM
=
nullptr
;
}
void
EventStateManager
:
:
DeltaAccumulator
:
:
InitLineOrPageDelta
(
nsIFrame
*
aTargetFrame
EventStateManager
*
aESM
WidgetWheelEvent
*
aEvent
)
{
MOZ_ASSERT
(
aESM
)
;
MOZ_ASSERT
(
aEvent
)
;
if
(
!
mLastTime
.
IsNull
(
)
)
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mLastTime
;
if
(
duration
.
ToMilliseconds
(
)
>
WheelTransaction
:
:
GetTimeoutTime
(
)
)
{
Reset
(
)
;
}
}
if
(
IsInTransaction
(
)
)
{
if
(
mHandlingDeltaMode
!
=
aEvent
-
>
mDeltaMode
|
|
mIsNoLineOrPageDeltaDevice
!
=
aEvent
-
>
mIsNoLineOrPageDelta
)
{
Reset
(
)
;
}
else
{
if
(
mX
&
&
aEvent
-
>
mDeltaX
&
&
(
(
aEvent
-
>
mDeltaX
>
0
.
0
)
!
=
(
mX
>
0
.
0
)
)
)
{
mX
=
mPendingScrollAmountX
=
0
.
0
;
}
if
(
mY
&
&
aEvent
-
>
mDeltaY
&
&
(
(
aEvent
-
>
mDeltaY
>
0
.
0
)
!
=
(
mY
>
0
.
0
)
)
)
{
mY
=
mPendingScrollAmountY
=
0
.
0
;
}
}
}
mHandlingDeltaMode
=
aEvent
-
>
mDeltaMode
;
mIsNoLineOrPageDeltaDevice
=
aEvent
-
>
mIsNoLineOrPageDelta
;
if
(
!
mIsNoLineOrPageDeltaDevice
&
&
!
EventStateManager
:
:
WheelPrefs
:
:
GetInstance
(
)
-
>
NeedToComputeLineOrPageDelta
(
aEvent
)
)
{
if
(
aEvent
-
>
mDeltaX
)
{
mX
=
aEvent
-
>
mDeltaX
;
}
if
(
aEvent
-
>
mDeltaY
)
{
mY
=
aEvent
-
>
mDeltaY
;
}
mLastTime
=
TimeStamp
:
:
Now
(
)
;
return
;
}
mX
+
=
aEvent
-
>
mDeltaX
;
mY
+
=
aEvent
-
>
mDeltaY
;
if
(
mHandlingDeltaMode
=
=
WheelEventBinding
:
:
DOM_DELTA_PIXEL
)
{
nsIFrame
*
frame
=
aESM
-
>
ComputeScrollTarget
(
aTargetFrame
aEvent
COMPUTE_LEGACY_MOUSE_SCROLL_EVENT_TARGET
)
;
nsPresContext
*
pc
=
frame
?
frame
-
>
PresContext
(
)
:
aTargetFrame
-
>
PresContext
(
)
;
nsIScrollableFrame
*
scrollTarget
=
do_QueryFrame
(
frame
)
;
nsSize
scrollAmount
=
aESM
-
>
GetScrollAmount
(
pc
aEvent
scrollTarget
)
;
nsIntSize
scrollAmountInCSSPixels
(
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
scrollAmount
.
width
)
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
scrollAmount
.
height
)
)
;
aEvent
-
>
mLineOrPageDeltaX
=
RoundDown
(
mX
)
/
scrollAmountInCSSPixels
.
width
;
aEvent
-
>
mLineOrPageDeltaY
=
RoundDown
(
mY
)
/
scrollAmountInCSSPixels
.
height
;
mX
-
=
aEvent
-
>
mLineOrPageDeltaX
*
scrollAmountInCSSPixels
.
width
;
mY
-
=
aEvent
-
>
mLineOrPageDeltaY
*
scrollAmountInCSSPixels
.
height
;
}
else
{
aEvent
-
>
mLineOrPageDeltaX
=
RoundDown
(
mX
)
;
aEvent
-
>
mLineOrPageDeltaY
=
RoundDown
(
mY
)
;
mX
-
=
aEvent
-
>
mLineOrPageDeltaX
;
mY
-
=
aEvent
-
>
mLineOrPageDeltaY
;
}
mLastTime
=
TimeStamp
:
:
Now
(
)
;
}
void
EventStateManager
:
:
DeltaAccumulator
:
:
Reset
(
)
{
mX
=
mY
=
0
.
0
;
mPendingScrollAmountX
=
mPendingScrollAmountY
=
0
.
0
;
mHandlingDeltaMode
=
UINT32_MAX
;
mIsNoLineOrPageDeltaDevice
=
false
;
}
nsIntPoint
EventStateManager
:
:
DeltaAccumulator
:
:
ComputeScrollAmountForDefaultAction
(
WidgetWheelEvent
*
aEvent
const
nsIntSize
&
aScrollAmountInDevPixels
)
{
MOZ_ASSERT
(
aEvent
)
;
bool
allowScrollSpeedOverride
=
(
!
aEvent
-
>
mCustomizedByUserPrefs
&
&
aEvent
-
>
mDeltaMode
=
=
WheelEventBinding
:
:
DOM_DELTA_LINE
)
;
DeltaValues
acceleratedDelta
=
WheelTransaction
:
:
AccelerateWheelDelta
(
aEvent
allowScrollSpeedOverride
)
;
nsIntPoint
result
(
0
0
)
;
if
(
aEvent
-
>
mDeltaMode
=
=
WheelEventBinding
:
:
DOM_DELTA_PIXEL
)
{
mPendingScrollAmountX
+
=
acceleratedDelta
.
deltaX
;
mPendingScrollAmountY
+
=
acceleratedDelta
.
deltaY
;
}
else
{
mPendingScrollAmountX
+
=
aScrollAmountInDevPixels
.
width
*
acceleratedDelta
.
deltaX
;
mPendingScrollAmountY
+
=
aScrollAmountInDevPixels
.
height
*
acceleratedDelta
.
deltaY
;
}
result
.
x
=
RoundDown
(
mPendingScrollAmountX
)
;
result
.
y
=
RoundDown
(
mPendingScrollAmountY
)
;
mPendingScrollAmountX
-
=
result
.
x
;
mPendingScrollAmountY
-
=
result
.
y
;
return
result
;
}
EventStateManager
:
:
WheelPrefs
*
EventStateManager
:
:
WheelPrefs
:
:
GetInstance
(
)
{
if
(
!
sInstance
)
{
sInstance
=
new
WheelPrefs
(
)
;
}
return
sInstance
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
Shutdown
(
)
{
delete
sInstance
;
sInstance
=
nullptr
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
OnPrefChanged
(
const
char
*
aPrefName
void
*
aClosure
)
{
sInstance
-
>
Reset
(
)
;
DeltaAccumulator
:
:
GetInstance
(
)
-
>
Reset
(
)
;
}
EventStateManager
:
:
WheelPrefs
:
:
WheelPrefs
(
)
{
Reset
(
)
;
Preferences
:
:
RegisterPrefixCallback
(
OnPrefChanged
"
mousewheel
.
"
)
;
Preferences
:
:
AddBoolVarCache
(
&
sWheelEventsEnabledOnPlugins
"
plugin
.
mousewheel
.
enabled
"
true
)
;
Preferences
:
:
AddBoolVarCache
(
&
sIsAutoDirEnabled
"
mousewheel
.
autodir
.
enabled
"
true
)
;
Preferences
:
:
AddBoolVarCache
(
&
sHonoursRootForAutoDir
"
mousewheel
.
autodir
.
honourroot
"
false
)
;
}
EventStateManager
:
:
WheelPrefs
:
:
~
WheelPrefs
(
)
{
Preferences
:
:
UnregisterPrefixCallback
(
OnPrefChanged
"
mousewheel
.
"
)
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
Reset
(
)
{
memset
(
mInit
0
sizeof
(
mInit
)
)
;
}
EventStateManager
:
:
WheelPrefs
:
:
Index
EventStateManager
:
:
WheelPrefs
:
:
GetIndexFor
(
const
WidgetWheelEvent
*
aEvent
)
{
if
(
!
aEvent
)
{
return
INDEX_DEFAULT
;
}
Modifiers
modifiers
=
(
aEvent
-
>
mModifiers
&
(
MODIFIER_ALT
|
MODIFIER_CONTROL
|
MODIFIER_META
|
MODIFIER_SHIFT
|
MODIFIER_OS
)
)
;
switch
(
modifiers
)
{
case
MODIFIER_ALT
:
return
INDEX_ALT
;
case
MODIFIER_CONTROL
:
return
INDEX_CONTROL
;
case
MODIFIER_META
:
return
INDEX_META
;
case
MODIFIER_SHIFT
:
return
INDEX_SHIFT
;
case
MODIFIER_OS
:
return
INDEX_OS
;
default
:
return
INDEX_DEFAULT
;
}
}
void
EventStateManager
:
:
WheelPrefs
:
:
GetBasePrefName
(
EventStateManager
:
:
WheelPrefs
:
:
Index
aIndex
nsACString
&
aBasePrefName
)
{
aBasePrefName
.
AssignLiteral
(
"
mousewheel
.
"
)
;
switch
(
aIndex
)
{
case
INDEX_ALT
:
aBasePrefName
.
AppendLiteral
(
"
with_alt
.
"
)
;
break
;
case
INDEX_CONTROL
:
aBasePrefName
.
AppendLiteral
(
"
with_control
.
"
)
;
break
;
case
INDEX_META
:
aBasePrefName
.
AppendLiteral
(
"
with_meta
.
"
)
;
break
;
case
INDEX_SHIFT
:
aBasePrefName
.
AppendLiteral
(
"
with_shift
.
"
)
;
break
;
case
INDEX_OS
:
aBasePrefName
.
AppendLiteral
(
"
with_win
.
"
)
;
break
;
case
INDEX_DEFAULT
:
default
:
aBasePrefName
.
AppendLiteral
(
"
default
.
"
)
;
break
;
}
}
void
EventStateManager
:
:
WheelPrefs
:
:
Init
(
EventStateManager
:
:
WheelPrefs
:
:
Index
aIndex
)
{
if
(
mInit
[
aIndex
]
)
{
return
;
}
mInit
[
aIndex
]
=
true
;
nsAutoCString
basePrefName
;
GetBasePrefName
(
aIndex
basePrefName
)
;
nsAutoCString
prefNameX
(
basePrefName
)
;
prefNameX
.
AppendLiteral
(
"
delta_multiplier_x
"
)
;
mMultiplierX
[
aIndex
]
=
static_cast
<
double
>
(
Preferences
:
:
GetInt
(
prefNameX
.
get
(
)
100
)
)
/
100
;
nsAutoCString
prefNameY
(
basePrefName
)
;
prefNameY
.
AppendLiteral
(
"
delta_multiplier_y
"
)
;
mMultiplierY
[
aIndex
]
=
static_cast
<
double
>
(
Preferences
:
:
GetInt
(
prefNameY
.
get
(
)
100
)
)
/
100
;
nsAutoCString
prefNameZ
(
basePrefName
)
;
prefNameZ
.
AppendLiteral
(
"
delta_multiplier_z
"
)
;
mMultiplierZ
[
aIndex
]
=
static_cast
<
double
>
(
Preferences
:
:
GetInt
(
prefNameZ
.
get
(
)
100
)
)
/
100
;
nsAutoCString
prefNameAction
(
basePrefName
)
;
prefNameAction
.
AppendLiteral
(
"
action
"
)
;
int32_t
action
=
Preferences
:
:
GetInt
(
prefNameAction
.
get
(
)
ACTION_SCROLL
)
;
if
(
action
<
int32_t
(
ACTION_NONE
)
|
|
action
>
int32_t
(
ACTION_LAST
)
)
{
NS_WARNING
(
"
Unsupported
action
pref
value
replaced
with
'
Scroll
'
.
"
)
;
action
=
ACTION_SCROLL
;
}
mActions
[
aIndex
]
=
static_cast
<
Action
>
(
action
)
;
prefNameAction
.
AppendLiteral
(
"
.
override_x
"
)
;
int32_t
actionOverrideX
=
Preferences
:
:
GetInt
(
prefNameAction
.
get
(
)
-
1
)
;
if
(
actionOverrideX
<
-
1
|
|
actionOverrideX
>
int32_t
(
ACTION_LAST
)
|
|
actionOverrideX
=
=
ACTION_HORIZONTALIZED_SCROLL
)
{
NS_WARNING
(
"
Unsupported
action
override
pref
value
didn
'
t
override
.
"
)
;
actionOverrideX
=
-
1
;
}
mOverriddenActionsX
[
aIndex
]
=
(
actionOverrideX
=
=
-
1
)
?
static_cast
<
Action
>
(
action
)
:
static_cast
<
Action
>
(
actionOverrideX
)
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
GetMultiplierForDeltaXAndY
(
const
WidgetWheelEvent
*
aEvent
Index
aIndex
double
*
aMultiplierForDeltaX
double
*
aMultiplierForDeltaY
)
{
*
aMultiplierForDeltaX
=
mMultiplierX
[
aIndex
]
;
*
aMultiplierForDeltaY
=
mMultiplierY
[
aIndex
]
;
if
(
aEvent
-
>
mDeltaValuesHorizontalizedForDefaultHandler
&
&
ComputeActionFor
(
aEvent
)
=
=
ACTION_HORIZONTALIZED_SCROLL
)
{
std
:
:
swap
(
*
aMultiplierForDeltaX
*
aMultiplierForDeltaY
)
;
}
}
void
EventStateManager
:
:
WheelPrefs
:
:
ApplyUserPrefsToDelta
(
WidgetWheelEvent
*
aEvent
)
{
if
(
aEvent
-
>
mCustomizedByUserPrefs
)
{
return
;
}
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
double
multiplierForDeltaX
=
1
.
0
multiplierForDeltaY
=
1
.
0
;
GetMultiplierForDeltaXAndY
(
aEvent
index
&
multiplierForDeltaX
&
multiplierForDeltaY
)
;
aEvent
-
>
mDeltaX
*
=
multiplierForDeltaX
;
aEvent
-
>
mDeltaY
*
=
multiplierForDeltaY
;
aEvent
-
>
mDeltaZ
*
=
mMultiplierZ
[
index
]
;
if
(
!
NeedToComputeLineOrPageDelta
(
aEvent
)
)
{
aEvent
-
>
mLineOrPageDeltaX
*
=
static_cast
<
int32_t
>
(
multiplierForDeltaX
)
;
aEvent
-
>
mLineOrPageDeltaY
*
=
static_cast
<
int32_t
>
(
multiplierForDeltaY
)
;
}
else
{
aEvent
-
>
mLineOrPageDeltaX
=
0
;
aEvent
-
>
mLineOrPageDeltaY
=
0
;
}
aEvent
-
>
mCustomizedByUserPrefs
=
(
(
mMultiplierX
[
index
]
!
=
1
.
0
)
|
|
(
mMultiplierY
[
index
]
!
=
1
.
0
)
|
|
(
mMultiplierZ
[
index
]
!
=
1
.
0
)
)
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
CancelApplyingUserPrefsFromOverflowDelta
(
WidgetWheelEvent
*
aEvent
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
double
multiplierForDeltaX
=
1
.
0
multiplierForDeltaY
=
1
.
0
;
GetMultiplierForDeltaXAndY
(
aEvent
index
&
multiplierForDeltaX
&
multiplierForDeltaY
)
;
if
(
multiplierForDeltaX
)
{
aEvent
-
>
mOverflowDeltaX
/
=
multiplierForDeltaX
;
}
if
(
multiplierForDeltaY
)
{
aEvent
-
>
mOverflowDeltaY
/
=
multiplierForDeltaY
;
}
}
EventStateManager
:
:
WheelPrefs
:
:
Action
EventStateManager
:
:
WheelPrefs
:
:
ComputeActionFor
(
const
WidgetWheelEvent
*
aEvent
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
bool
deltaXPreferred
=
(
Abs
(
aEvent
-
>
mDeltaX
)
>
Abs
(
aEvent
-
>
mDeltaY
)
&
&
Abs
(
aEvent
-
>
mDeltaX
)
>
Abs
(
aEvent
-
>
mDeltaZ
)
)
;
Action
*
actions
=
deltaXPreferred
?
mOverriddenActionsX
:
mActions
;
if
(
actions
[
index
]
=
=
ACTION_NONE
|
|
actions
[
index
]
=
=
ACTION_SCROLL
|
|
actions
[
index
]
=
=
ACTION_HORIZONTALIZED_SCROLL
)
{
return
actions
[
index
]
;
}
if
(
aEvent
-
>
mIsMomentum
)
{
Init
(
INDEX_DEFAULT
)
;
if
(
actions
[
INDEX_DEFAULT
]
=
=
ACTION_SCROLL
|
|
actions
[
INDEX_DEFAULT
]
=
=
ACTION_HORIZONTALIZED_SCROLL
)
{
return
actions
[
INDEX_DEFAULT
]
;
}
return
ACTION_NONE
;
}
return
actions
[
index
]
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
NeedToComputeLineOrPageDelta
(
const
WidgetWheelEvent
*
aEvent
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
return
(
mMultiplierX
[
index
]
!
=
1
.
0
&
&
mMultiplierX
[
index
]
!
=
-
1
.
0
)
|
|
(
mMultiplierY
[
index
]
!
=
1
.
0
&
&
mMultiplierY
[
index
]
!
=
-
1
.
0
)
;
}
void
EventStateManager
:
:
WheelPrefs
:
:
GetUserPrefsForEvent
(
const
WidgetWheelEvent
*
aEvent
double
*
aOutMultiplierX
double
*
aOutMultiplierY
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
double
multiplierForDeltaX
=
1
.
0
multiplierForDeltaY
=
1
.
0
;
GetMultiplierForDeltaXAndY
(
aEvent
index
&
multiplierForDeltaX
&
multiplierForDeltaY
)
;
*
aOutMultiplierX
=
multiplierForDeltaX
;
*
aOutMultiplierY
=
multiplierForDeltaY
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
WheelEventsEnabledOnPlugins
(
)
{
if
(
!
sInstance
)
{
GetInstance
(
)
;
}
return
sWheelEventsEnabledOnPlugins
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
IsAutoDirEnabled
(
)
{
if
(
!
sInstance
)
{
GetInstance
(
)
;
}
return
sIsAutoDirEnabled
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
HonoursRootForAutoDir
(
)
{
if
(
!
sInstance
)
{
GetInstance
(
)
;
}
return
sHonoursRootForAutoDir
;
}
bool
EventStateManager
:
:
WheelEventIsScrollAction
(
const
WidgetWheelEvent
*
aEvent
)
{
if
(
aEvent
-
>
mMessage
!
=
eWheel
)
{
return
false
;
}
WheelPrefs
:
:
Action
action
=
WheelPrefs
:
:
GetInstance
(
)
-
>
ComputeActionFor
(
aEvent
)
;
return
action
=
=
WheelPrefs
:
:
ACTION_SCROLL
|
|
action
=
=
WheelPrefs
:
:
ACTION_HORIZONTALIZED_SCROLL
;
}
WheelDeltaAdjustmentStrategy
EventStateManager
:
:
GetWheelDeltaAdjustmentStrategy
(
const
WidgetWheelEvent
&
aEvent
)
{
if
(
aEvent
.
mMessage
!
=
eWheel
)
{
return
WheelDeltaAdjustmentStrategy
:
:
eNone
;
}
switch
(
WheelPrefs
:
:
GetInstance
(
)
-
>
ComputeActionFor
(
&
aEvent
)
)
{
case
WheelPrefs
:
:
ACTION_SCROLL
:
if
(
WheelPrefs
:
:
IsAutoDirEnabled
(
)
&
&
0
=
=
aEvent
.
mDeltaZ
)
{
if
(
WheelPrefs
:
:
HonoursRootForAutoDir
(
)
)
{
return
WheelDeltaAdjustmentStrategy
:
:
eAutoDirWithRootHonour
;
}
return
WheelDeltaAdjustmentStrategy
:
:
eAutoDir
;
}
return
WheelDeltaAdjustmentStrategy
:
:
eNone
;
case
WheelPrefs
:
:
ACTION_HORIZONTALIZED_SCROLL
:
return
WheelDeltaAdjustmentStrategy
:
:
eHorizontalize
;
default
:
break
;
}
return
WheelDeltaAdjustmentStrategy
:
:
eNone
;
}
void
EventStateManager
:
:
GetUserPrefsForWheelEvent
(
const
WidgetWheelEvent
*
aEvent
double
*
aOutMultiplierX
double
*
aOutMultiplierY
)
{
WheelPrefs
:
:
GetInstance
(
)
-
>
GetUserPrefsForEvent
(
aEvent
aOutMultiplierX
aOutMultiplierY
)
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
IsOverOnePageScrollAllowedX
(
const
WidgetWheelEvent
*
aEvent
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
return
Abs
(
mMultiplierX
[
index
]
)
>
=
MIN_MULTIPLIER_VALUE_ALLOWING_OVER_ONE_PAGE_SCROLL
;
}
bool
EventStateManager
:
:
WheelPrefs
:
:
IsOverOnePageScrollAllowedY
(
const
WidgetWheelEvent
*
aEvent
)
{
Index
index
=
GetIndexFor
(
aEvent
)
;
Init
(
index
)
;
return
Abs
(
mMultiplierY
[
index
]
)
>
=
MIN_MULTIPLIER_VALUE_ALLOWING_OVER_ONE_PAGE_SCROLL
;
}
bool
EventStateManager
:
:
Prefs
:
:
sKeyCausesActivation
=
true
;
bool
EventStateManager
:
:
Prefs
:
:
sClickHoldContextMenu
=
false
;
void
EventStateManager
:
:
Prefs
:
:
Init
(
)
{
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
RegisterCallback
(
OnChange
"
dom
.
popup_allowed_events
"
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
observe
\
"
dom
.
popup_allowed_events
\
"
"
)
;
static
bool
sPrefsAlreadyCached
=
false
;
if
(
sPrefsAlreadyCached
)
{
return
;
}
rv
=
Preferences
:
:
AddBoolVarCache
(
&
sKeyCausesActivation
"
accessibility
.
accesskeycausesactivation
"
sKeyCausesActivation
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
observe
\
"
accessibility
.
accesskeycausesactivation
\
"
"
)
;
rv
=
Preferences
:
:
AddBoolVarCache
(
&
sClickHoldContextMenu
"
ui
.
click_hold_context_menus
"
sClickHoldContextMenu
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
observe
\
"
ui
.
click_hold_context_menus
\
"
"
)
;
sPrefsAlreadyCached
=
true
;
}
void
EventStateManager
:
:
Prefs
:
:
OnChange
(
const
char
*
aPrefName
void
*
)
{
nsDependentCString
prefName
(
aPrefName
)
;
if
(
prefName
.
EqualsLiteral
(
"
dom
.
popup_allowed_events
"
)
)
{
Event
:
:
PopupAllowedEventsChanged
(
)
;
}
}
void
EventStateManager
:
:
Prefs
:
:
Shutdown
(
)
{
Preferences
:
:
UnregisterCallback
(
OnChange
"
dom
.
popup_allowed_events
"
)
;
}
AutoHandlingUserInputStatePusher
:
:
AutoHandlingUserInputStatePusher
(
bool
aIsHandlingUserInput
WidgetEvent
*
aEvent
nsIDocument
*
aDocument
)
:
mMessage
(
aEvent
?
aEvent
-
>
mMessage
:
eVoidEvent
)
mIsHandlingUserInput
(
aIsHandlingUserInput
)
{
if
(
!
aIsHandlingUserInput
)
{
return
;
}
EventStateManager
:
:
StartHandlingUserInput
(
mMessage
)
;
if
(
mMessage
=
=
eMouseDown
)
{
nsIPresShell
:
:
SetCapturingContent
(
nullptr
0
)
;
nsIPresShell
:
:
AllowMouseCapture
(
true
)
;
}
if
(
!
aDocument
|
|
!
aEvent
|
|
!
aEvent
-
>
IsTrusted
(
)
)
{
return
;
}
if
(
NeedsToResetFocusManagerMouseButtonHandlingState
(
)
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE_VOID
(
fm
)
;
mMouseButtonEventHandlingDocument
=
fm
-
>
SetMouseButtonHandlingDocument
(
aDocument
)
;
}
}
AutoHandlingUserInputStatePusher
:
:
~
AutoHandlingUserInputStatePusher
(
)
{
if
(
!
mIsHandlingUserInput
)
{
return
;
}
EventStateManager
:
:
StopHandlingUserInput
(
mMessage
)
;
if
(
mMessage
=
=
eMouseDown
)
{
nsIPresShell
:
:
AllowMouseCapture
(
false
)
;
}
if
(
NeedsToResetFocusManagerMouseButtonHandlingState
(
)
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE_VOID
(
fm
)
;
nsCOMPtr
<
nsIDocument
>
handlingDocument
=
fm
-
>
SetMouseButtonHandlingDocument
(
mMouseButtonEventHandlingDocument
)
;
}
}
}
