#
include
"
mozilla
/
dom
/
BeforeAfterKeyboardEvent
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
BeforeAfterKeyboardEvent
:
:
BeforeAfterKeyboardEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalBeforeAfterKeyboardEvent
*
aEvent
)
:
KeyboardEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
InternalBeforeAfterKeyboardEvent
(
false
eVoidEvent
nullptr
)
)
{
MOZ_ASSERT
(
mEvent
-
>
mClass
=
=
eBeforeAfterKeyboardEventClass
"
event
type
mismatch
eBeforeAfterKeyboardEventClass
"
)
;
if
(
!
aEvent
)
{
mEventIsInternal
=
true
;
mEvent
-
>
mTime
=
PR_Now
(
)
;
}
}
already_AddRefed
<
BeforeAfterKeyboardEvent
>
BeforeAfterKeyboardEvent
:
:
Constructor
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
BeforeAfterKeyboardEventInit
&
aParam
)
{
RefPtr
<
BeforeAfterKeyboardEvent
>
event
=
new
BeforeAfterKeyboardEvent
(
aOwner
nullptr
nullptr
)
;
ErrorResult
rv
;
event
-
>
InitWithKeyboardEventInit
(
aOwner
aType
aParam
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
}
event
-
>
mEvent
-
>
AsBeforeAfterKeyboardEvent
(
)
-
>
mEmbeddedCancelled
=
aParam
.
mEmbeddedCancelled
;
return
event
.
forget
(
)
;
}
already_AddRefed
<
BeforeAfterKeyboardEvent
>
BeforeAfterKeyboardEvent
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
BeforeAfterKeyboardEventInit
&
aParam
ErrorResult
&
aRv
)
{
nsCOMPtr
<
EventTarget
>
owner
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
return
Constructor
(
owner
aType
aParam
)
;
}
Nullable
<
bool
>
BeforeAfterKeyboardEvent
:
:
GetEmbeddedCancelled
(
)
{
return
Nullable
<
bool
>
(
)
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
BeforeAfterKeyboardEvent
>
NS_NewDOMBeforeAfterKeyboardEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalBeforeAfterKeyboardEvent
*
aEvent
)
{
RefPtr
<
BeforeAfterKeyboardEvent
>
it
=
new
BeforeAfterKeyboardEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
