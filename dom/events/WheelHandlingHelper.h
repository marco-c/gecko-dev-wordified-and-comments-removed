#
ifndef
mozilla_WheelHandlingHelper_h_
#
define
mozilla_WheelHandlingHelper_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsPoint
.
h
"
class
nsIScrollableFrame
;
class
nsITimer
;
namespace
mozilla
{
class
EventStateManager
;
struct
DeltaValues
{
DeltaValues
(
)
:
deltaX
(
0
.
0
)
deltaY
(
0
.
0
)
{
}
DeltaValues
(
double
aDeltaX
double
aDeltaY
)
:
deltaX
(
aDeltaX
)
deltaY
(
aDeltaY
)
{
}
explicit
DeltaValues
(
WidgetWheelEvent
*
aEvent
)
;
double
deltaX
;
double
deltaY
;
}
;
class
WheelHandlingUtils
{
public
:
static
bool
CanScrollOn
(
nsIFrame
*
aFrame
double
aDirectionX
double
aDirectionY
)
;
static
bool
CanScrollOn
(
nsIScrollableFrame
*
aScrollFrame
double
aDirectionX
double
aDirectionY
)
;
static
Maybe
<
layers
:
:
ScrollDirection
>
GetDisregardedWheelScrollDirection
(
const
nsIFrame
*
aFrame
)
;
private
:
static
bool
CanScrollInRange
(
nscoord
aMin
nscoord
aValue
nscoord
aMax
double
aDirection
)
;
}
;
class
ScrollbarsForWheel
{
public
:
static
void
PrepareToScrollText
(
EventStateManager
*
aESM
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
)
;
static
void
SetActiveScrollTarget
(
nsIScrollableFrame
*
aScrollTarget
)
;
static
void
MayInactivate
(
)
;
static
void
Inactivate
(
)
;
static
bool
IsActive
(
)
;
static
void
OwnWheelTransaction
(
bool
aOwn
)
;
protected
:
static
const
size_t
kNumberOfTargets
=
4
;
static
const
DeltaValues
directions
[
kNumberOfTargets
]
;
static
AutoWeakFrame
sActiveOwner
;
static
AutoWeakFrame
sActivatedScrollTargets
[
kNumberOfTargets
]
;
static
bool
sHadWheelStart
;
static
bool
sOwnWheelTransaction
;
static
void
TemporarilyActivateAllPossibleScrollTargets
(
EventStateManager
*
aESM
nsIFrame
*
aTargetFrame
WidgetWheelEvent
*
aEvent
)
;
static
void
DeactivateAllTemporarilyActivatedScrollTargets
(
)
;
}
;
class
WheelTransaction
{
public
:
static
nsIFrame
*
GetTargetFrame
(
)
{
return
sTargetFrame
;
}
static
void
EndTransaction
(
)
;
static
bool
WillHandleDefaultAction
(
WidgetWheelEvent
*
aWheelEvent
AutoWeakFrame
&
aTargetWeakFrame
)
;
static
bool
WillHandleDefaultAction
(
WidgetWheelEvent
*
aWheelEvent
nsIFrame
*
aTargetFrame
)
{
AutoWeakFrame
targetWeakFrame
(
aTargetFrame
)
;
return
WillHandleDefaultAction
(
aWheelEvent
targetWeakFrame
)
;
}
static
void
OnEvent
(
WidgetEvent
*
aEvent
)
;
static
void
Shutdown
(
)
;
static
uint32_t
GetTimeoutTime
(
)
{
return
Prefs
:
:
sMouseWheelTransactionTimeout
;
}
static
void
OwnScrollbars
(
bool
aOwn
)
;
static
DeltaValues
AccelerateWheelDelta
(
WidgetWheelEvent
*
aEvent
bool
aAllowScrollSpeedOverride
)
;
static
void
InitializeStatics
(
)
{
Prefs
:
:
InitializeStatics
(
)
;
}
protected
:
static
void
BeginTransaction
(
nsIFrame
*
aTargetFrame
const
WidgetWheelEvent
*
aEvent
)
;
static
bool
UpdateTransaction
(
const
WidgetWheelEvent
*
aEvent
)
;
static
void
MayEndTransaction
(
)
;
static
LayoutDeviceIntPoint
GetScreenPoint
(
WidgetGUIEvent
*
aEvent
)
;
static
void
OnFailToScrollTarget
(
)
;
static
void
OnTimeout
(
nsITimer
*
aTimer
void
*
aClosure
)
;
static
void
SetTimeout
(
)
;
static
uint32_t
GetIgnoreMoveDelayTime
(
)
{
return
Prefs
:
:
sMouseWheelTransactionIgnoreMoveDelay
;
}
static
int32_t
GetAccelerationStart
(
)
{
return
Prefs
:
:
sMouseWheelAccelerationStart
;
}
static
int32_t
GetAccelerationFactor
(
)
{
return
Prefs
:
:
sMouseWheelAccelerationFactor
;
}
static
DeltaValues
OverrideSystemScrollSpeed
(
WidgetWheelEvent
*
aEvent
)
;
static
double
ComputeAcceleratedWheelDelta
(
double
aDelta
int32_t
aFactor
)
;
static
bool
OutOfTime
(
uint32_t
aBaseTime
uint32_t
aThreshold
)
;
static
AutoWeakFrame
sTargetFrame
;
static
uint32_t
sTime
;
static
uint32_t
sMouseMoved
;
static
nsITimer
*
sTimer
;
static
int32_t
sScrollSeriesCounter
;
static
bool
sOwnScrollbars
;
class
Prefs
{
public
:
static
void
InitializeStatics
(
)
;
static
int32_t
sMouseWheelAccelerationStart
;
static
int32_t
sMouseWheelAccelerationFactor
;
static
uint32_t
sMouseWheelTransactionTimeout
;
static
uint32_t
sMouseWheelTransactionIgnoreMoveDelay
;
static
bool
sTestMouseScroll
;
}
;
}
;
enum
class
WheelDeltaAdjustmentStrategy
:
uint8_t
{
eNone
eHorizontalize
eAutoDir
eAutoDirWithRootHonour
eSentinel
}
;
class
MOZ_STACK_CLASS
WheelDeltaHorizontalizer
final
{
public
:
explicit
WheelDeltaHorizontalizer
(
WidgetWheelEvent
&
aWheelEvent
)
:
mWheelEvent
(
aWheelEvent
)
mHorizontalized
(
false
)
{
}
void
Horizontalize
(
)
;
~
WheelDeltaHorizontalizer
(
)
;
void
CancelHorizontalization
(
)
;
private
:
WidgetWheelEvent
&
mWheelEvent
;
double
mOldDeltaX
;
double
mOldDeltaZ
;
double
mOldOverflowDeltaX
;
int32_t
mOldLineOrPageDeltaX
;
bool
mHorizontalized
;
}
;
class
MOZ_STACK_CLASS
AutoDirWheelDeltaAdjuster
{
protected
:
AutoDirWheelDeltaAdjuster
(
double
&
aDeltaX
double
&
aDeltaY
)
:
mDeltaX
(
aDeltaX
)
mDeltaY
(
aDeltaY
)
mCheckedIfShouldBeAdjusted
(
false
)
mShouldBeAdjusted
(
false
)
{
}
public
:
bool
ShouldBeAdjusted
(
)
;
void
Adjust
(
)
;
private
:
virtual
void
OnAdjusted
(
)
{
}
virtual
bool
CanScrollAlongXAxis
(
)
const
=
0
;
virtual
bool
CanScrollAlongYAxis
(
)
const
=
0
;
virtual
bool
CanScrollUpwards
(
)
const
=
0
;
virtual
bool
CanScrollDownwards
(
)
const
=
0
;
virtual
bool
CanScrollLeftwards
(
)
const
=
0
;
virtual
bool
CanScrollRightwards
(
)
const
=
0
;
virtual
bool
IsHorizontalContentRightToLeft
(
)
const
=
0
;
protected
:
double
&
mDeltaX
;
double
&
mDeltaY
;
private
:
bool
mCheckedIfShouldBeAdjusted
;
bool
mShouldBeAdjusted
;
}
;
class
MOZ_STACK_CLASS
ESMAutoDirWheelDeltaAdjuster
final
:
public
AutoDirWheelDeltaAdjuster
{
public
:
ESMAutoDirWheelDeltaAdjuster
(
WidgetWheelEvent
&
aEvent
nsIFrame
&
aScrollFrame
bool
aHonoursRoot
)
;
private
:
virtual
void
OnAdjusted
(
)
override
;
virtual
bool
CanScrollAlongXAxis
(
)
const
override
;
virtual
bool
CanScrollAlongYAxis
(
)
const
override
;
virtual
bool
CanScrollUpwards
(
)
const
override
;
virtual
bool
CanScrollDownwards
(
)
const
override
;
virtual
bool
CanScrollLeftwards
(
)
const
override
;
virtual
bool
CanScrollRightwards
(
)
const
override
;
virtual
bool
IsHorizontalContentRightToLeft
(
)
const
override
;
nsIScrollableFrame
*
mScrollTargetFrame
;
bool
mIsHorizontalContentRightToLeft
;
int32_t
&
mLineOrPageDeltaX
;
int32_t
&
mLineOrPageDeltaY
;
double
&
mOverflowDeltaX
;
double
&
mOverflowDeltaY
;
}
;
class
MOZ_STACK_CLASS
ESMAutoDirWheelDeltaRestorer
final
{
public
:
explicit
ESMAutoDirWheelDeltaRestorer
(
WidgetWheelEvent
&
aEvent
)
;
~
ESMAutoDirWheelDeltaRestorer
(
)
;
private
:
WidgetWheelEvent
&
mEvent
;
double
mOldDeltaX
;
double
mOldDeltaY
;
int32_t
mOldLineOrPageDeltaX
;
int32_t
mOldLineOrPageDeltaY
;
double
mOldOverflowDeltaX
;
double
mOldOverflowDeltaY
;
}
;
}
#
endif
