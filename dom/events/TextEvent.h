#
ifndef
mozilla_dom_TextEvent_h
#
define
mozilla_dom_TextEvent_h
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
#
include
"
mozilla
/
dom
/
TextEventBinding
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
class
nsIPrincipal
;
namespace
mozilla
:
:
dom
{
class
TextEvent
:
public
UIEvent
{
public
:
TextEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalLegacyTextEvent
*
aEvent
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
TextEvent
UIEvent
)
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
TextEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
GetData
(
nsAString
&
aData
nsIPrincipal
&
aSubjectPrincipal
)
const
;
void
InitTextEvent
(
const
nsAString
&
typeArg
bool
canBubbleArg
bool
cancelableArg
nsGlobalWindowInner
*
viewArg
const
nsAString
&
dataArg
)
;
protected
:
~
TextEvent
(
)
=
default
;
}
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
TextEvent
>
NS_NewDOMTextEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
InternalLegacyTextEvent
*
aEvent
)
;
#
endif
