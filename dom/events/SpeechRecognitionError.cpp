#
include
"
SpeechRecognitionError
.
h
"
namespace
mozilla
:
:
dom
{
SpeechRecognitionError
:
:
SpeechRecognitionError
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetEvent
*
aEvent
)
:
Event
(
aOwner
aPresContext
aEvent
)
mError
(
)
{
}
SpeechRecognitionError
:
:
~
SpeechRecognitionError
(
)
=
default
;
already_AddRefed
<
SpeechRecognitionError
>
SpeechRecognitionError
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
SpeechRecognitionErrorInit
&
aParam
)
{
nsCOMPtr
<
mozilla
:
:
dom
:
:
EventTarget
>
t
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
SpeechRecognitionError
>
e
=
new
SpeechRecognitionError
(
t
nullptr
nullptr
)
;
bool
trusted
=
e
-
>
Init
(
t
)
;
e
-
>
InitSpeechRecognitionError
(
aType
aParam
.
mBubbles
aParam
.
mCancelable
aParam
.
mError
NS_ConvertUTF16toUTF8
(
aParam
.
mMessage
)
)
;
e
-
>
SetTrusted
(
trusted
)
;
e
-
>
SetComposed
(
aParam
.
mComposed
)
;
return
e
.
forget
(
)
;
}
void
SpeechRecognitionError
:
:
GetMessage
(
nsAString
&
aString
)
{
CopyUTF8toUTF16
(
mMessage
aString
)
;
}
void
SpeechRecognitionError
:
:
InitSpeechRecognitionError
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
SpeechRecognitionErrorCode
aError
const
nsACString
&
aMessage
)
{
Event
:
:
InitEvent
(
aType
aCanBubble
aCancelable
)
;
mError
=
aError
;
mMessage
=
aMessage
;
}
}
