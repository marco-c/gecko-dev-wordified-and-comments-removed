#
ifndef
mozilla_PendingFullscreenEvent_h_
#
define
mozilla_PendingFullscreenEvent_h_
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
enum
class
FullscreenEventType
{
Change
Error
}
;
class
PendingFullscreenEvent
{
public
:
PendingFullscreenEvent
(
FullscreenEventType
aType
dom
:
:
Document
*
aDocument
nsINode
*
aTarget
)
:
mDocument
(
aDocument
)
mTarget
(
aTarget
)
mType
(
aType
)
{
MOZ_ASSERT
(
aDocument
)
;
MOZ_ASSERT
(
aTarget
)
;
}
dom
:
:
Document
*
Document
(
)
const
{
return
mDocument
;
}
void
Dispatch
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mDispatched
)
;
mDispatched
=
true
;
#
endif
nsString
name
;
switch
(
mType
)
{
case
FullscreenEventType
:
:
Change
:
name
=
u
"
fullscreenchange
"
_ns
;
break
;
case
FullscreenEventType
:
:
Error
:
name
=
u
"
fullscreenerror
"
_ns
;
break
;
}
nsINode
*
target
=
mTarget
-
>
GetComposedDoc
(
)
=
=
mDocument
?
mTarget
.
get
(
)
:
mDocument
.
get
(
)
;
Unused
<
<
nsContentUtils
:
:
DispatchTrustedEvent
(
mDocument
target
name
CanBubble
:
:
eYes
Cancelable
:
:
eNo
Composed
:
:
eYes
)
;
}
private
:
RefPtr
<
dom
:
:
Document
>
mDocument
;
nsCOMPtr
<
nsINode
>
mTarget
;
FullscreenEventType
mType
;
#
ifdef
DEBUG
bool
mDispatched
=
false
;
#
endif
}
;
}
#
endif
