#
ifndef
mozilla_dom_PointerEvent_h_
#
define
mozilla_dom_PointerEvent_h_
#
include
"
mozilla
/
dom
/
MouseEvent
.
h
"
#
include
"
mozilla
/
dom
/
PointerEventBinding
.
h
"
class
nsPresContext
;
namespace
mozilla
{
namespace
dom
{
struct
PointerEventInit
;
class
PointerEvent
:
public
MouseEvent
{
public
:
PointerEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetPointerEvent
*
aEvent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
PointerEvent
MouseEvent
)
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
PointerEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
PointerEventInit
&
aParam
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
PointerEvent
>
Constructor
(
EventTarget
*
aOwner
const
nsAString
&
aType
const
PointerEventInit
&
aParam
)
;
int32_t
PointerId
(
)
;
int32_t
Width
(
CallerType
aCallerType
)
;
int32_t
Height
(
CallerType
aCallerType
)
;
float
Pressure
(
CallerType
aCallerType
)
;
float
TangentialPressure
(
CallerType
aCallerType
)
;
int32_t
TiltX
(
CallerType
aCallerType
)
;
int32_t
TiltY
(
CallerType
aCallerType
)
;
int32_t
Twist
(
CallerType
aCallerType
)
;
bool
IsPrimary
(
)
;
void
GetPointerType
(
nsAString
&
aPointerType
CallerType
aCallerType
)
;
void
GetCoalescedEvents
(
nsTArray
<
RefPtr
<
PointerEvent
>
>
&
aPointerEvents
)
;
protected
:
~
PointerEvent
(
)
{
}
private
:
bool
ShouldResistFingerprinting
(
CallerType
aCallerType
)
;
nsTArray
<
RefPtr
<
PointerEvent
>
>
mCoalescedEvents
;
}
;
void
ConvertPointerTypeToString
(
uint16_t
aPointerTypeSrc
nsAString
&
aPointerTypeDest
)
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
PointerEvent
>
NS_NewDOMPointerEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
WidgetPointerEvent
*
aEvent
)
;
#
endif
