#
include
"
nsContentAreaDragDrop
.
h
"
#
include
"
RemoteDragStartData
.
h
"
#
include
"
nsICookieJarSettings
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
#
include
"
ProtocolUtils
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
dom
{
RemoteDragStartData
:
:
~
RemoteDragStartData
(
)
=
default
;
RemoteDragStartData
:
:
RemoteDragStartData
(
BrowserParent
*
aBrowserParent
nsTArray
<
IPCDataTransfer
>
&
&
aDataTransfer
const
LayoutDeviceIntRect
&
aRect
nsIPrincipal
*
aPrincipal
nsIContentSecurityPolicy
*
aCsp
nsICookieJarSettings
*
aCookieJarSettings
)
:
mBrowserParent
(
aBrowserParent
)
mDataTransfer
(
std
:
:
move
(
aDataTransfer
)
)
mRect
(
aRect
)
mPrincipal
(
aPrincipal
)
mCsp
(
aCsp
)
mCookieJarSettings
(
aCookieJarSettings
)
{
}
void
RemoteDragStartData
:
:
AddInitialDnDDataTo
(
DataTransfer
*
aDataTransfer
nsIPrincipal
*
*
aPrincipal
nsIContentSecurityPolicy
*
*
aCsp
nsICookieJarSettings
*
*
aCookieJarSettings
)
{
NS_IF_ADDREF
(
*
aPrincipal
=
mPrincipal
)
;
NS_IF_ADDREF
(
*
aCsp
=
mCsp
)
;
NS_IF_ADDREF
(
*
aCookieJarSettings
=
mCookieJarSettings
)
;
for
(
uint32_t
i
=
0
;
i
<
mDataTransfer
.
Length
(
)
;
+
+
i
)
{
nsTArray
<
IPCDataTransferItem
>
&
itemArray
=
mDataTransfer
[
i
]
.
items
(
)
;
for
(
auto
&
item
:
itemArray
)
{
RefPtr
<
nsVariantCC
>
variant
=
new
nsVariantCC
(
)
;
if
(
item
.
flavor
(
)
.
EqualsLiteral
(
kFilePromiseMime
)
)
{
RefPtr
<
nsISupports
>
flavorDataProvider
=
new
nsContentAreaDragDropDataProvider
(
)
;
variant
-
>
SetAsISupports
(
flavorDataProvider
)
;
}
else
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TnsString
)
{
variant
-
>
SetAsAString
(
item
.
data
(
)
.
get_nsString
(
)
)
;
}
else
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TIPCBlob
)
{
RefPtr
<
BlobImpl
>
impl
=
IPCBlobUtils
:
:
Deserialize
(
item
.
data
(
)
.
get_IPCBlob
(
)
)
;
variant
-
>
SetAsISupports
(
impl
)
;
}
else
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TShmem
)
{
if
(
nsContentUtils
:
:
IsFlavorImage
(
item
.
flavor
(
)
)
)
{
nsCOMPtr
<
imgIContainer
>
imageContainer
;
nsresult
rv
=
nsContentUtils
:
:
DataTransferItemToImage
(
item
getter_AddRefs
(
imageContainer
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
continue
;
}
variant
-
>
SetAsISupports
(
imageContainer
)
;
}
else
{
Shmem
data
=
item
.
data
(
)
.
get_Shmem
(
)
;
variant
-
>
SetAsACString
(
nsDependentCSubstring
(
data
.
get
<
char
>
(
)
data
.
Size
<
char
>
(
)
)
)
;
}
mozilla
:
:
Unused
<
<
mBrowserParent
-
>
DeallocShmem
(
item
.
data
(
)
.
get_Shmem
(
)
)
;
}
aDataTransfer
-
>
SetDataWithPrincipalFromOtherProcess
(
NS_ConvertUTF8toUTF16
(
item
.
flavor
(
)
)
variant
i
mPrincipal
false
)
;
}
}
mDataTransfer
.
Clear
(
)
;
mPrincipal
=
nullptr
;
}
}
