#
include
"
nsContentAreaDragDrop
.
h
"
#
include
"
RemoteDragStartData
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICookieJarSettings
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
dom
/
BlobImpl
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
dom
{
RemoteDragStartData
:
:
~
RemoteDragStartData
(
)
=
default
;
RemoteDragStartData
:
:
RemoteDragStartData
(
BrowserParent
*
aBrowserParent
nsTArray
<
IPCTransferableData
>
&
&
aTransferableData
const
LayoutDeviceIntRect
&
aRect
nsIPrincipal
*
aPrincipal
nsIContentSecurityPolicy
*
aCsp
nsICookieJarSettings
*
aCookieJarSettings
WindowContext
*
aSourceWindowContext
WindowContext
*
aSourceTopWindowContext
)
:
mBrowserParent
(
aBrowserParent
)
mTransferableData
(
std
:
:
move
(
aTransferableData
)
)
mRect
(
aRect
)
mPrincipal
(
aPrincipal
)
mCsp
(
aCsp
)
mCookieJarSettings
(
aCookieJarSettings
)
mSourceWindowContext
(
aSourceWindowContext
)
mSourceTopWindowContext
(
aSourceTopWindowContext
)
{
}
void
RemoteDragStartData
:
:
AddInitialDnDDataTo
(
DataTransfer
*
aDataTransfer
nsIPrincipal
*
*
aPrincipal
nsIContentSecurityPolicy
*
*
aCsp
nsICookieJarSettings
*
*
aCookieJarSettings
)
{
NS_IF_ADDREF
(
*
aPrincipal
=
mPrincipal
)
;
NS_IF_ADDREF
(
*
aCsp
=
mCsp
)
;
NS_IF_ADDREF
(
*
aCookieJarSettings
=
mCookieJarSettings
)
;
for
(
uint32_t
i
=
0
;
i
<
mTransferableData
.
Length
(
)
;
+
+
i
)
{
nsTArray
<
IPCTransferableDataItem
>
&
itemArray
=
mTransferableData
[
i
]
.
items
(
)
;
for
(
auto
&
item
:
itemArray
)
{
if
(
!
nsContentUtils
:
:
IPCTransferableDataItemHasKnownFlavor
(
item
)
)
{
NS_WARNING
(
"
Ignoring
unknown
flavor
in
"
"
RemoteDragStartData
:
:
AddInitialDnDDataTo
"
)
;
continue
;
}
RefPtr
<
nsVariantCC
>
variant
=
new
nsVariantCC
(
)
;
if
(
item
.
flavor
(
)
.
EqualsLiteral
(
kFilePromiseMime
)
)
{
RefPtr
<
nsISupports
>
flavorDataProvider
=
new
nsContentAreaDragDropDataProvider
(
)
;
variant
-
>
SetAsISupports
(
flavorDataProvider
)
;
}
else
{
nsresult
rv
=
nsContentUtils
:
:
IPCTransferableDataItemToVariant
(
item
variant
)
;
if
(
NS_FAILED
(
rv
)
)
{
continue
;
}
}
aDataTransfer
-
>
SetDataWithPrincipalFromOtherProcess
(
NS_ConvertUTF8toUTF16
(
item
.
flavor
(
)
)
variant
i
mPrincipal
false
)
;
}
}
mTransferableData
.
Clear
(
)
;
mPrincipal
=
nullptr
;
}
}
