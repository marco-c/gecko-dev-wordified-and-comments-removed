#
ifndef
mozilla_dom_MessageEvent_h_
#
define
mozilla_dom_MessageEvent_h_
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
MessagePortList
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
MessageEventInit
;
class
MessagePort
;
class
MessagePortList
;
class
OwningWindowProxyOrMessagePort
;
class
WindowProxyOrMessagePort
;
class
MessageEvent
final
:
public
Event
{
public
:
MessageEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetEvent
*
aEvent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
MessageEvent
Event
)
NS_FORWARD_TO_EVENT
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetData
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aData
ErrorResult
&
aRv
)
;
void
GetOrigin
(
nsAString
&
)
const
;
void
GetLastEventId
(
nsAString
&
)
const
;
void
GetSource
(
Nullable
<
OwningWindowProxyOrMessagePort
>
&
aValue
)
const
;
MessagePortList
*
GetPorts
(
)
{
return
mPorts
;
}
void
SetPorts
(
MessagePortList
*
aPorts
)
;
void
SetSource
(
mozilla
:
:
dom
:
:
MessagePort
*
aPort
)
;
void
SetSource
(
nsPIDOMWindowInner
*
aWindow
)
{
mWindowSource
=
aWindow
;
}
static
already_AddRefed
<
MessageEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
MessageEventInit
&
aEventInit
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
MessageEvent
>
Constructor
(
EventTarget
*
aEventTarget
const
nsAString
&
aType
const
MessageEventInit
&
aEventInit
ErrorResult
&
aRv
)
;
void
InitMessageEvent
(
JSContext
*
aCx
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
JS
:
:
Handle
<
JS
:
:
Value
>
aData
const
nsAString
&
aOrigin
const
nsAString
&
aLastEventId
const
Nullable
<
WindowProxyOrMessagePort
>
&
aSource
const
Nullable
<
Sequence
<
OwningNonNull
<
MessagePort
>
>
>
&
aPorts
)
;
protected
:
~
MessageEvent
(
)
;
private
:
JS
:
:
Heap
<
JS
:
:
Value
>
mData
;
nsString
mOrigin
;
nsString
mLastEventId
;
RefPtr
<
nsPIDOMWindowInner
>
mWindowSource
;
RefPtr
<
MessagePort
>
mPortSource
;
RefPtr
<
MessagePortList
>
mPorts
;
}
;
}
}
#
endif
