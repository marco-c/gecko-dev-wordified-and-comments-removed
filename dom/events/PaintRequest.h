#
ifndef
mozilla_dom_PaintRequest_h_
#
define
mozilla_dom_PaintRequest_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
class
DOMRect
;
class
PaintRequest
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
PaintRequest
(
Event
*
aParent
)
:
mParent
(
aParent
)
{
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
PaintRequest
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
Event
*
GetParentObject
(
)
const
{
return
mParent
;
}
already_AddRefed
<
DOMRect
>
ClientRect
(
)
;
void
GetReason
(
nsAString
&
aResult
)
const
{
aResult
.
AssignLiteral
(
"
repaint
"
)
;
}
void
SetRequest
(
const
nsRect
&
aRequest
)
{
mRequest
=
aRequest
;
}
private
:
~
PaintRequest
(
)
=
default
;
RefPtr
<
Event
>
mParent
;
nsRect
mRequest
;
}
;
class
PaintRequestList
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
PaintRequestList
(
Event
*
aParent
)
:
mParent
(
aParent
)
{
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
PaintRequestList
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsISupports
*
GetParentObject
(
)
{
return
mParent
;
}
void
Append
(
RefPtr
<
PaintRequest
>
&
&
aElement
)
{
mArray
.
AppendElement
(
std
:
:
move
(
aElement
)
)
;
}
uint32_t
Length
(
)
{
return
mArray
.
Length
(
)
;
}
PaintRequest
*
Item
(
uint32_t
aIndex
)
{
return
mArray
.
SafeElementAt
(
aIndex
)
;
}
PaintRequest
*
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
{
aFound
=
aIndex
<
mArray
.
Length
(
)
;
if
(
!
aFound
)
{
return
nullptr
;
}
return
mArray
.
ElementAt
(
aIndex
)
;
}
private
:
~
PaintRequestList
(
)
=
default
;
nsTArray
<
RefPtr
<
PaintRequest
>
>
mArray
;
RefPtr
<
Event
>
mParent
;
}
;
}
#
endif
