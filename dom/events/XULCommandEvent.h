#
ifndef
mozilla_dom_XULCommandEvent_h_
#
define
mozilla_dom_XULCommandEvent_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
#
include
"
mozilla
/
dom
/
XULCommandEventBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
class
XULCommandEvent
:
public
UIEvent
{
public
:
XULCommandEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetInputEvent
*
aEvent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XULCommandEvent
UIEvent
)
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
XULCommandEventBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
virtual
XULCommandEvent
*
AsXULCommandEvent
(
)
override
{
return
this
;
}
bool
AltKey
(
)
;
bool
CtrlKey
(
)
;
bool
ShiftKey
(
)
;
bool
MetaKey
(
)
;
uint16_t
InputSource
(
)
;
already_AddRefed
<
Event
>
GetSourceEvent
(
)
{
RefPtr
<
Event
>
e
=
mSourceEvent
;
return
e
.
forget
(
)
;
}
void
InitCommandEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
Event
*
aSourceEvent
uint16_t
aInputSource
ErrorResult
&
aRv
)
;
protected
:
~
XULCommandEvent
(
)
{
}
RefPtr
<
Event
>
mSourceEvent
;
uint16_t
mInputSource
;
}
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
XULCommandEvent
>
NS_NewDOMXULCommandEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
WidgetInputEvent
*
aEvent
)
;
#
endif
