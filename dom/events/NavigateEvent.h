#
ifndef
mozilla_dom_NavigateEvent_h___
#
define
mozilla_dom_NavigateEvent_h___
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
NavigateEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
NavigationBinding
.
h
"
namespace
mozilla
:
:
dom
{
class
AbortSignal
;
class
FormData
;
class
NavigationDestination
;
struct
NavigationInterceptOptions
;
class
NavigateEvent
final
:
public
Event
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
NavigateEvent
Event
)
static
already_AddRefed
<
NavigateEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
NavigateEventInit
&
aEventInitDict
)
;
NavigationType
NavigationType
(
)
const
{
return
{
}
;
}
already_AddRefed
<
NavigationDestination
>
Destination
(
)
const
{
return
{
}
;
}
bool
CanIntercept
(
)
const
{
return
{
}
;
}
bool
UserInitiated
(
)
const
{
return
{
}
;
}
bool
HashChange
(
)
const
{
return
{
}
;
}
already_AddRefed
<
AbortSignal
>
Signal
(
)
const
{
return
{
}
;
}
already_AddRefed
<
FormData
>
GetFormData
(
)
const
{
return
{
}
;
}
void
GetDownloadRequest
(
nsString
&
aRetVal
)
const
{
}
void
GetInfo
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
)
const
{
}
bool
HasUAVisualTransition
(
)
const
{
return
{
}
;
}
void
Intercept
(
const
NavigationInterceptOptions
&
aOptions
ErrorResult
&
aRv
)
{
}
void
Scroll
(
ErrorResult
&
aRv
)
{
}
bool
IsTrusted
(
)
const
{
return
{
}
;
}
private
:
~
NavigateEvent
(
)
=
default
;
}
;
}
#
endif
