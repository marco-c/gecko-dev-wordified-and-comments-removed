#
include
"
mozilla
/
dom
/
FocusEvent
.
h
"
#
include
"
mozilla
/
ContentEvents
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS_INHERITED
(
FocusEvent
UIEvent
nsIDOMFocusEvent
)
FocusEvent
:
:
FocusEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalFocusEvent
*
aEvent
)
:
UIEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
InternalFocusEvent
(
false
eFocus
)
)
{
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
mEvent
-
>
mTime
=
PR_Now
(
)
;
}
}
NS_IMETHODIMP
FocusEvent
:
:
GetRelatedTarget
(
nsIDOMEventTarget
*
*
aRelatedTarget
)
{
NS_ENSURE_ARG_POINTER
(
aRelatedTarget
)
;
*
aRelatedTarget
=
GetRelatedTarget
(
)
.
take
(
)
;
return
NS_OK
;
}
already_AddRefed
<
EventTarget
>
FocusEvent
:
:
GetRelatedTarget
(
)
{
return
EnsureWebAccessibleRelatedTarget
(
mEvent
-
>
AsFocusEvent
(
)
-
>
mRelatedTarget
)
;
}
void
FocusEvent
:
:
InitFocusEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindow
*
aView
int32_t
aDetail
EventTarget
*
aRelatedTarget
)
{
MOZ_ASSERT
(
!
mEvent
-
>
mFlags
.
mIsBeingDispatched
)
;
UIEvent
:
:
InitUIEvent
(
aType
aCanBubble
aCancelable
aView
aDetail
)
;
mEvent
-
>
AsFocusEvent
(
)
-
>
mRelatedTarget
=
aRelatedTarget
;
}
already_AddRefed
<
FocusEvent
>
FocusEvent
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
FocusEventInit
&
aParam
ErrorResult
&
aRv
)
{
nsCOMPtr
<
EventTarget
>
t
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
FocusEvent
>
e
=
new
FocusEvent
(
t
nullptr
nullptr
)
;
bool
trusted
=
e
-
>
Init
(
t
)
;
e
-
>
InitFocusEvent
(
aType
aParam
.
mBubbles
aParam
.
mCancelable
aParam
.
mView
aParam
.
mDetail
aParam
.
mRelatedTarget
)
;
e
-
>
SetTrusted
(
trusted
)
;
e
-
>
SetComposed
(
aParam
.
mComposed
)
;
return
e
.
forget
(
)
;
}
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
already_AddRefed
<
FocusEvent
>
NS_NewDOMFocusEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
InternalFocusEvent
*
aEvent
)
{
RefPtr
<
FocusEvent
>
it
=
new
FocusEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
