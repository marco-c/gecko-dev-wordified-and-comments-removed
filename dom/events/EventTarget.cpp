#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
EventTargetBinding
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
void
EventTarget
:
:
RemoveEventListener
(
const
nsAString
&
aType
EventListener
*
aListener
const
EventListenerOptionsOrBoolean
&
aOptions
ErrorResult
&
aRv
)
{
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
if
(
elm
)
{
elm
-
>
RemoveEventListener
(
aType
aListener
aOptions
)
;
}
}
EventHandlerNonNull
*
EventTarget
:
:
GetEventHandler
(
nsIAtom
*
aType
const
nsAString
&
aTypeString
)
{
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
return
elm
?
elm
-
>
GetEventHandler
(
aType
aTypeString
)
:
nullptr
;
}
void
EventTarget
:
:
SetEventHandler
(
const
nsAString
&
aType
EventHandlerNonNull
*
aHandler
ErrorResult
&
aRv
)
{
if
(
!
StringBeginsWith
(
aType
NS_LITERAL_STRING
(
"
on
"
)
)
)
{
aRv
.
Throw
(
NS_ERROR_INVALID_ARG
)
;
return
;
}
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIAtom
>
type
=
NS_Atomize
(
aType
)
;
SetEventHandler
(
type
EmptyString
(
)
aHandler
)
;
return
;
}
SetEventHandler
(
nullptr
Substring
(
aType
2
)
aHandler
)
;
}
void
EventTarget
:
:
SetEventHandler
(
nsIAtom
*
aType
const
nsAString
&
aTypeString
EventHandlerNonNull
*
aHandler
)
{
GetOrCreateListenerManager
(
)
-
>
SetEventHandler
(
aType
aTypeString
aHandler
)
;
}
bool
EventTarget
:
:
HasNonSystemGroupListenersForUntrustedKeyEvents
(
)
const
{
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
return
elm
&
&
elm
-
>
HasNonSystemGroupListenersForUntrustedKeyEvents
(
)
;
}
bool
EventTarget
:
:
HasNonPassiveNonSystemGroupListenersForUntrustedKeyEvents
(
)
const
{
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
return
elm
&
&
elm
-
>
HasNonPassiveNonSystemGroupListenersForUntrustedKeyEvents
(
)
;
}
bool
EventTarget
:
:
IsApzAware
(
)
const
{
EventListenerManager
*
elm
=
GetExistingListenerManager
(
)
;
return
elm
&
&
elm
-
>
HasApzAwareListeners
(
)
;
}
bool
EventTarget
:
:
DispatchEvent
(
Event
&
aEvent
CallerType
aCallerType
ErrorResult
&
aRv
)
{
bool
result
=
false
;
aRv
=
DispatchEvent
(
&
aEvent
&
result
)
;
return
!
aEvent
.
DefaultPrevented
(
aCallerType
)
;
}
}
}
