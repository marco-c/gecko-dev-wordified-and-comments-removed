#
ifndef
mozilla_dom_CompositionEvent_h_
#
define
mozilla_dom_CompositionEvent_h_
#
include
"
mozilla
/
dom
/
CompositionEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
TextClause
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
namespace
mozilla
{
namespace
dom
{
typedef
nsTArray
<
RefPtr
<
TextClause
>
>
TextClauseArray
;
class
CompositionEvent
:
public
UIEvent
{
public
:
CompositionEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetCompositionEvent
*
aEvent
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
CompositionEvent
UIEvent
)
static
already_AddRefed
<
CompositionEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
CompositionEventInit
&
aParam
)
;
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
CompositionEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
InitCompositionEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
const
nsAString
&
aData
const
nsAString
&
aLocale
)
;
void
GetData
(
nsAString
&
)
const
;
void
GetLocale
(
nsAString
&
)
const
;
void
GetRanges
(
TextClauseArray
&
aRanges
)
;
protected
:
~
CompositionEvent
(
)
{
}
nsString
mData
;
nsString
mLocale
;
TextClauseArray
mRanges
;
}
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
CompositionEvent
>
NS_NewDOMCompositionEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
WidgetCompositionEvent
*
aEvent
)
;
#
endif
