#
include
"
ContentEventHandler
.
h
"
#
include
"
IMEContentObserver
.
h
"
#
include
"
IMEStateManager
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIEditor
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
MiscEvents
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
TextComposition
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
ifdef
XP_MACOSX
#
define
TextRange
_TextRange
#
define
TextRangeArray
_TextRangeArray
#
define
Comment
_Comment
#
endif
#
include
"
nsPluginInstanceOwner
.
h
"
#
ifdef
XP_MACOSX
#
undef
TextRange
#
undef
TextRangeArray
#
undef
Comment
#
endif
using
namespace
mozilla
:
:
widget
;
namespace
mozilla
{
#
define
IDEOGRAPHIC_SPACE
(
NS_LITERAL_STRING
(
"
\
x3000
"
)
)
bool
TextComposition
:
:
sHandlingSelectionEvent
=
false
;
TextComposition
:
:
TextComposition
(
nsPresContext
*
aPresContext
nsINode
*
aNode
TabParent
*
aTabParent
WidgetCompositionEvent
*
aCompositionEvent
)
:
mPresContext
(
aPresContext
)
mNode
(
aNode
)
mTabParent
(
aTabParent
)
mNativeContext
(
aCompositionEvent
-
>
mNativeIMEContext
)
mCompositionStartOffset
(
0
)
mTargetClauseOffsetInComposition
(
0
)
mIsSynthesizedForTests
(
aCompositionEvent
-
>
mFlags
.
mIsSynthesizedForTests
)
mIsComposing
(
false
)
mIsEditorHandlingEvent
(
false
)
mIsRequestingCommit
(
false
)
mIsRequestingCancel
(
false
)
mRequestedToCommitOrCancel
(
false
)
mWasNativeCompositionEndEventDiscarded
(
false
)
mAllowControlCharacters
(
Preferences
:
:
GetBool
(
"
dom
.
compositionevent
.
allow_control_characters
"
false
)
)
mWasCompositionStringEmpty
(
true
)
{
MOZ_ASSERT
(
aCompositionEvent
-
>
mNativeIMEContext
.
IsValid
(
)
)
;
}
void
TextComposition
:
:
Destroy
(
)
{
mPresContext
=
nullptr
;
mNode
=
nullptr
;
mTabParent
=
nullptr
;
}
bool
TextComposition
:
:
IsValidStateForComposition
(
nsIWidget
*
aWidget
)
const
{
return
!
Destroyed
(
)
&
&
aWidget
&
&
!
aWidget
-
>
Destroyed
(
)
&
&
mPresContext
-
>
GetPresShell
(
)
&
&
!
mPresContext
-
>
GetPresShell
(
)
-
>
IsDestroying
(
)
;
}
bool
TextComposition
:
:
MaybeDispatchCompositionUpdate
(
const
WidgetCompositionEvent
*
aCompositionEvent
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
if
(
!
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
)
{
return
false
;
}
if
(
mLastData
=
=
aCompositionEvent
-
>
mData
)
{
return
true
;
}
CloneAndDispatchAs
(
aCompositionEvent
eCompositionUpdate
)
;
return
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
;
}
BaseEventFlags
TextComposition
:
:
CloneAndDispatchAs
(
const
WidgetCompositionEvent
*
aCompositionEvent
EventMessage
aMessage
nsEventStatus
*
aStatus
EventDispatchingCallback
*
aCallBack
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
MOZ_ASSERT
(
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
"
Should
be
called
only
when
it
'
s
safe
to
dispatch
an
event
"
)
;
WidgetCompositionEvent
compositionEvent
(
aCompositionEvent
-
>
IsTrusted
(
)
aMessage
aCompositionEvent
-
>
mWidget
)
;
compositionEvent
.
mTime
=
aCompositionEvent
-
>
mTime
;
compositionEvent
.
mTimeStamp
=
aCompositionEvent
-
>
mTimeStamp
;
compositionEvent
.
mData
=
aCompositionEvent
-
>
mData
;
compositionEvent
.
mNativeIMEContext
=
aCompositionEvent
-
>
mNativeIMEContext
;
compositionEvent
.
mOriginalMessage
=
aCompositionEvent
-
>
mMessage
;
compositionEvent
.
mFlags
.
mIsSynthesizedForTests
=
aCompositionEvent
-
>
mFlags
.
mIsSynthesizedForTests
;
nsEventStatus
dummyStatus
=
nsEventStatus_eConsumeNoDefault
;
nsEventStatus
*
status
=
aStatus
?
aStatus
:
&
dummyStatus
;
if
(
aMessage
=
=
eCompositionUpdate
)
{
mLastData
=
compositionEvent
.
mData
;
mLastRanges
=
aCompositionEvent
-
>
mRanges
;
}
DispatchEvent
(
&
compositionEvent
status
aCallBack
aCompositionEvent
)
;
return
compositionEvent
.
mFlags
;
}
void
TextComposition
:
:
DispatchEvent
(
WidgetCompositionEvent
*
aDispatchEvent
nsEventStatus
*
aStatus
EventDispatchingCallback
*
aCallBack
const
WidgetCompositionEvent
*
aOriginalEvent
)
{
nsPluginInstanceOwner
:
:
GeneratePluginEvent
(
aOriginalEvent
aDispatchEvent
)
;
EventDispatcher
:
:
Dispatch
(
mNode
mPresContext
aDispatchEvent
nullptr
aStatus
aCallBack
)
;
OnCompositionEventDispatched
(
aDispatchEvent
)
;
}
void
TextComposition
:
:
OnCompositionEventDiscarded
(
WidgetCompositionEvent
*
aCompositionEvent
)
{
MOZ_ASSERT
(
aCompositionEvent
-
>
IsTrusted
(
)
"
Shouldn
'
t
be
called
with
untrusted
event
"
)
;
if
(
mTabParent
)
{
Unused
<
<
mTabParent
-
>
SendCompositionEvent
(
*
aCompositionEvent
)
;
}
if
(
!
aCompositionEvent
-
>
CausesDOMCompositionEndEvent
(
)
)
{
return
;
}
mWasNativeCompositionEndEventDiscarded
=
true
;
}
static
inline
bool
IsControlChar
(
uint32_t
aCharCode
)
{
return
aCharCode
<
'
'
|
|
aCharCode
=
=
0x7F
;
}
static
size_t
FindFirstControlCharacter
(
const
nsAString
&
aStr
)
{
const
char16_t
*
sourceBegin
=
aStr
.
BeginReading
(
)
;
const
char16_t
*
sourceEnd
=
aStr
.
EndReading
(
)
;
for
(
const
char16_t
*
source
=
sourceBegin
;
source
<
sourceEnd
;
+
+
source
)
{
if
(
*
source
!
=
'
\
t
'
&
&
IsControlChar
(
*
source
)
)
{
return
source
-
sourceBegin
;
}
}
return
-
1
;
}
static
void
RemoveControlCharactersFrom
(
nsAString
&
aStr
TextRangeArray
*
aRanges
)
{
size_t
firstControlCharOffset
=
FindFirstControlCharacter
(
aStr
)
;
if
(
firstControlCharOffset
=
=
(
size_t
)
-
1
)
{
return
;
}
nsAutoString
copy
(
aStr
)
;
const
char16_t
*
sourceBegin
=
copy
.
BeginReading
(
)
;
const
char16_t
*
sourceEnd
=
copy
.
EndReading
(
)
;
char16_t
*
dest
=
aStr
.
BeginWriting
(
)
;
if
(
NS_WARN_IF
(
!
dest
)
)
{
return
;
}
char16_t
*
curDest
=
dest
+
firstControlCharOffset
;
size_t
i
=
firstControlCharOffset
;
for
(
const
char16_t
*
source
=
sourceBegin
+
firstControlCharOffset
;
source
<
sourceEnd
;
+
+
source
)
{
if
(
*
source
=
=
'
\
t
'
|
|
!
IsControlChar
(
*
source
)
)
{
*
curDest
=
*
source
;
+
+
curDest
;
+
+
i
;
}
else
if
(
aRanges
)
{
aRanges
-
>
RemoveCharacter
(
i
)
;
}
}
aStr
.
SetLength
(
curDest
-
dest
)
;
}
void
TextComposition
:
:
DispatchCompositionEvent
(
WidgetCompositionEvent
*
aCompositionEvent
nsEventStatus
*
aStatus
EventDispatchingCallback
*
aCallBack
bool
aIsSynthesized
)
{
mWasCompositionStringEmpty
=
mString
.
IsEmpty
(
)
;
if
(
mTabParent
)
{
Unused
<
<
mTabParent
-
>
SendCompositionEvent
(
*
aCompositionEvent
)
;
aCompositionEvent
-
>
StopPropagation
(
)
;
if
(
aCompositionEvent
-
>
CausesDOMTextEvent
(
)
)
{
mLastData
=
aCompositionEvent
-
>
mData
;
mLastRanges
=
aCompositionEvent
-
>
mRanges
;
EditorWillHandleCompositionChangeEvent
(
aCompositionEvent
)
;
EditorDidHandleCompositionChangeEvent
(
)
;
}
return
;
}
if
(
!
mAllowControlCharacters
)
{
RemoveControlCharactersFrom
(
aCompositionEvent
-
>
mData
aCompositionEvent
-
>
mRanges
)
;
}
if
(
aCompositionEvent
-
>
mMessage
=
=
eCompositionCommitAsIs
)
{
NS_ASSERTION
(
!
aCompositionEvent
-
>
mRanges
"
mRanges
of
eCompositionCommitAsIs
should
be
null
"
)
;
aCompositionEvent
-
>
mRanges
=
nullptr
;
NS_ASSERTION
(
aCompositionEvent
-
>
mData
.
IsEmpty
(
)
"
mData
of
eCompositionCommitAsIs
should
be
empty
string
"
)
;
bool
removePlaceholderCharacter
=
Preferences
:
:
GetBool
(
"
intl
.
ime
.
remove_placeholder_character_at_commit
"
false
)
;
if
(
removePlaceholderCharacter
&
&
mLastData
=
=
IDEOGRAPHIC_SPACE
)
{
aCompositionEvent
-
>
mData
.
Truncate
(
)
;
}
else
{
aCompositionEvent
-
>
mData
=
mLastData
;
}
}
else
if
(
aCompositionEvent
-
>
mMessage
=
=
eCompositionCommit
)
{
NS_ASSERTION
(
!
aCompositionEvent
-
>
mRanges
"
mRanges
of
eCompositionCommit
should
be
null
"
)
;
aCompositionEvent
-
>
mRanges
=
nullptr
;
}
if
(
!
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
if
(
mRequestedToCommitOrCancel
&
&
!
aIsSynthesized
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
return
;
}
if
(
!
aIsSynthesized
&
&
(
mIsRequestingCommit
|
|
mIsRequestingCancel
)
)
{
nsString
*
committingData
=
nullptr
;
switch
(
aCompositionEvent
-
>
mMessage
)
{
case
eCompositionEnd
:
case
eCompositionChange
:
case
eCompositionCommitAsIs
:
case
eCompositionCommit
:
committingData
=
&
aCompositionEvent
-
>
mData
;
break
;
default
:
NS_WARNING
(
"
Unexpected
event
comes
during
committing
or
"
"
canceling
composition
"
)
;
break
;
}
if
(
committingData
)
{
if
(
mIsRequestingCommit
&
&
committingData
-
>
IsEmpty
(
)
&
&
mLastData
!
=
IDEOGRAPHIC_SPACE
)
{
committingData
-
>
Assign
(
mLastData
)
;
}
else
if
(
mIsRequestingCancel
&
&
!
committingData
-
>
IsEmpty
(
)
)
{
committingData
-
>
Truncate
(
)
;
}
}
}
bool
dispatchEvent
=
true
;
bool
dispatchDOMTextEvent
=
aCompositionEvent
-
>
CausesDOMTextEvent
(
)
;
if
(
dispatchDOMTextEvent
&
&
aCompositionEvent
-
>
mMessage
!
=
eCompositionChange
&
&
!
mIsComposing
&
&
mLastData
=
=
aCompositionEvent
-
>
mData
)
{
dispatchEvent
=
dispatchDOMTextEvent
=
false
;
}
if
(
dispatchDOMTextEvent
&
&
aCompositionEvent
-
>
mMessage
=
=
eCompositionChange
&
&
mLastData
=
=
aCompositionEvent
-
>
mData
&
&
mRanges
&
&
aCompositionEvent
-
>
mRanges
&
&
mRanges
-
>
Equals
(
*
aCompositionEvent
-
>
mRanges
)
)
{
dispatchEvent
=
dispatchDOMTextEvent
=
false
;
}
if
(
dispatchDOMTextEvent
)
{
if
(
!
MaybeDispatchCompositionUpdate
(
aCompositionEvent
)
)
{
return
;
}
}
if
(
dispatchEvent
)
{
if
(
dispatchDOMTextEvent
&
&
aCompositionEvent
-
>
mMessage
!
=
eCompositionChange
)
{
aCompositionEvent
-
>
mFlags
=
CloneAndDispatchAs
(
aCompositionEvent
eCompositionChange
aStatus
aCallBack
)
;
}
else
{
DispatchEvent
(
aCompositionEvent
aStatus
aCallBack
)
;
}
}
else
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
}
if
(
!
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
)
{
return
;
}
if
(
dispatchDOMTextEvent
&
&
!
HasEditor
(
)
)
{
EditorWillHandleCompositionChangeEvent
(
aCompositionEvent
)
;
EditorDidHandleCompositionChangeEvent
(
)
;
}
if
(
aCompositionEvent
-
>
CausesDOMCompositionEndEvent
(
)
)
{
if
(
aCompositionEvent
-
>
mMessage
!
=
eCompositionEnd
)
{
CloneAndDispatchAs
(
aCompositionEvent
eCompositionEnd
)
;
}
MOZ_ASSERT
(
!
mIsComposing
"
Why
is
the
editor
still
composing
?
"
)
;
MOZ_ASSERT
(
!
HasEditor
(
)
"
Why
does
the
editor
still
keep
to
hold
this
?
"
)
;
}
MaybeNotifyIMEOfCompositionEventHandled
(
aCompositionEvent
)
;
}
void
TextComposition
:
:
HandleSelectionEvent
(
nsPresContext
*
aPresContext
TabParent
*
aTabParent
WidgetSelectionEvent
*
aSelectionEvent
)
{
if
(
aTabParent
)
{
Unused
<
<
aTabParent
-
>
SendSelectionEvent
(
*
aSelectionEvent
)
;
aSelectionEvent
-
>
StopPropagation
(
)
;
return
;
}
ContentEventHandler
handler
(
aPresContext
)
;
AutoRestore
<
bool
>
saveHandlingSelectionEvent
(
sHandlingSelectionEvent
)
;
sHandlingSelectionEvent
=
true
;
handler
.
OnSelectionEvent
(
aSelectionEvent
)
;
}
void
TextComposition
:
:
OnCompositionEventDispatched
(
const
WidgetCompositionEvent
*
aCompositionEvent
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
if
(
!
IsValidStateForComposition
(
aCompositionEvent
-
>
mWidget
)
)
{
return
;
}
MOZ_ASSERT
(
aCompositionEvent
-
>
mMessage
!
=
eCompositionStart
|
|
mWasCompositionStringEmpty
"
mWasCompositionStringEmpty
should
be
true
if
the
dispatched
"
"
event
is
eCompositionStart
"
)
;
if
(
mWasCompositionStringEmpty
&
&
!
aCompositionEvent
-
>
CausesDOMCompositionEndEvent
(
)
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
mPresContext
-
>
GetRootWidget
(
)
;
WidgetQueryContentEvent
selectedTextEvent
(
true
eQuerySelectedText
widget
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
if
(
mString
.
IsEmpty
(
)
)
{
widget
-
>
DispatchEvent
(
&
selectedTextEvent
status
)
;
}
else
{
MOZ_ASSERT
(
aCompositionEvent
-
>
mMessage
=
=
eCompositionChange
)
;
}
if
(
NS_WARN_IF
(
!
selectedTextEvent
.
mSucceeded
)
)
{
mCompositionStartOffset
=
0
;
}
else
{
mCompositionStartOffset
=
selectedTextEvent
.
mReply
.
mOffset
;
}
mTargetClauseOffsetInComposition
=
0
;
}
if
(
aCompositionEvent
-
>
CausesDOMTextEvent
(
)
)
{
mTargetClauseOffsetInComposition
=
aCompositionEvent
-
>
TargetClauseOffset
(
)
;
}
}
void
TextComposition
:
:
MaybeNotifyIMEOfCompositionEventHandled
(
const
WidgetCompositionEvent
*
aCompositionEvent
)
{
if
(
aCompositionEvent
-
>
mMessage
!
=
eCompositionStart
&
&
!
aCompositionEvent
-
>
CausesDOMTextEvent
(
)
)
{
return
;
}
RefPtr
<
IMEContentObserver
>
contentObserver
=
IMEStateManager
:
:
GetActiveContentObserver
(
)
;
if
(
contentObserver
&
&
contentObserver
-
>
IsManaging
(
this
)
)
{
contentObserver
-
>
MaybeNotifyCompositionEventHandled
(
)
;
return
;
}
NotifyIME
(
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
)
;
}
void
TextComposition
:
:
DispatchCompositionEventRunnable
(
EventMessage
aEventMessage
const
nsAString
&
aData
bool
aIsSynthesizingCommit
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
CompositionEventDispatcher
(
this
mNode
aEventMessage
aData
aIsSynthesizingCommit
)
)
;
}
nsresult
TextComposition
:
:
RequestToCommit
(
nsIWidget
*
aWidget
bool
aDiscard
)
{
if
(
mRequestedToCommitOrCancel
)
{
return
NS_OK
;
}
RefPtr
<
TextComposition
>
kungFuDeathGrip
(
this
)
;
const
nsAutoString
lastData
(
mLastData
)
;
{
AutoRestore
<
bool
>
saveRequestingCancel
(
mIsRequestingCancel
)
;
AutoRestore
<
bool
>
saveRequestingCommit
(
mIsRequestingCommit
)
;
if
(
aDiscard
)
{
mIsRequestingCancel
=
true
;
mIsRequestingCommit
=
false
;
}
else
{
mIsRequestingCancel
=
false
;
mIsRequestingCommit
=
true
;
}
nsresult
rv
=
aWidget
-
>
NotifyIME
(
IMENotification
(
aDiscard
?
REQUEST_TO_CANCEL_COMPOSITION
:
REQUEST_TO_COMMIT_COMPOSITION
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
}
mRequestedToCommitOrCancel
=
true
;
if
(
Destroyed
(
)
)
{
return
NS_OK
;
}
nsAutoString
data
(
aDiscard
?
EmptyString
(
)
:
lastData
)
;
if
(
data
=
=
mLastData
)
{
DispatchCompositionEventRunnable
(
eCompositionCommitAsIs
EmptyString
(
)
true
)
;
}
else
{
DispatchCompositionEventRunnable
(
eCompositionCommit
data
true
)
;
}
return
NS_OK
;
}
nsresult
TextComposition
:
:
NotifyIME
(
IMEMessage
aMessage
)
{
NS_ENSURE_TRUE
(
mPresContext
NS_ERROR_NOT_AVAILABLE
)
;
return
IMEStateManager
:
:
NotifyIME
(
aMessage
mPresContext
)
;
}
void
TextComposition
:
:
EditorWillHandleCompositionChangeEvent
(
const
WidgetCompositionEvent
*
aCompositionChangeEvent
)
{
mIsComposing
=
aCompositionChangeEvent
-
>
IsComposing
(
)
;
mRanges
=
aCompositionChangeEvent
-
>
mRanges
;
mIsEditorHandlingEvent
=
true
;
MOZ_ASSERT
(
mLastData
=
=
aCompositionChangeEvent
-
>
mData
"
The
text
of
a
compositionchange
event
must
be
same
as
previous
data
"
"
attribute
value
of
the
latest
compositionupdate
event
"
)
;
}
void
TextComposition
:
:
OnEditorDestroyed
(
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
MOZ_ASSERT
(
!
mIsEditorHandlingEvent
"
The
editor
should
have
stopped
listening
events
"
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
GetWidget
(
)
;
if
(
NS_WARN_IF
(
!
widget
)
)
{
return
;
}
RequestToCommit
(
widget
true
)
;
}
void
TextComposition
:
:
EditorDidHandleCompositionChangeEvent
(
)
{
mString
=
mLastData
;
mIsEditorHandlingEvent
=
false
;
}
void
TextComposition
:
:
StartHandlingComposition
(
nsIEditor
*
aEditor
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
MOZ_ASSERT
(
!
HasEditor
(
)
"
There
is
a
handling
editor
already
"
)
;
mEditorWeak
=
do_GetWeakReference
(
aEditor
)
;
}
void
TextComposition
:
:
EndHandlingComposition
(
nsIEditor
*
aEditor
)
{
MOZ_RELEASE_ASSERT
(
!
mTabParent
)
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIEditor
>
editor
=
GetEditor
(
)
;
MOZ_ASSERT
(
editor
=
=
aEditor
"
Another
editor
handled
the
composition
?
"
)
;
#
endif
mEditorWeak
=
nullptr
;
}
already_AddRefed
<
nsIEditor
>
TextComposition
:
:
GetEditor
(
)
const
{
nsCOMPtr
<
nsIEditor
>
editor
=
do_QueryReferent
(
mEditorWeak
)
;
return
editor
.
forget
(
)
;
}
bool
TextComposition
:
:
HasEditor
(
)
const
{
nsCOMPtr
<
nsIEditor
>
editor
=
GetEditor
(
)
;
return
!
!
editor
;
}
TextComposition
:
:
CompositionEventDispatcher
:
:
CompositionEventDispatcher
(
TextComposition
*
aComposition
nsINode
*
aEventTarget
EventMessage
aEventMessage
const
nsAString
&
aData
bool
aIsSynthesizedEvent
)
:
mTextComposition
(
aComposition
)
mEventTarget
(
aEventTarget
)
mData
(
aData
)
mEventMessage
(
aEventMessage
)
mIsSynthesizedEvent
(
aIsSynthesizedEvent
)
{
}
NS_IMETHODIMP
TextComposition
:
:
CompositionEventDispatcher
:
:
Run
(
)
{
nsCOMPtr
<
nsIWidget
>
widget
(
mTextComposition
-
>
GetWidget
(
)
)
;
if
(
!
mTextComposition
-
>
IsValidStateForComposition
(
widget
)
)
{
return
NS_OK
;
}
RefPtr
<
nsPresContext
>
presContext
=
mTextComposition
-
>
mPresContext
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
switch
(
mEventMessage
)
{
case
eCompositionStart
:
{
WidgetCompositionEvent
compStart
(
true
eCompositionStart
widget
)
;
compStart
.
mNativeIMEContext
=
mTextComposition
-
>
mNativeContext
;
WidgetQueryContentEvent
selectedText
(
true
eQuerySelectedText
widget
)
;
ContentEventHandler
handler
(
presContext
)
;
handler
.
OnQuerySelectedText
(
&
selectedText
)
;
NS_ASSERTION
(
selectedText
.
mSucceeded
"
Failed
to
get
selected
text
"
)
;
compStart
.
mData
=
selectedText
.
mReply
.
mString
;
compStart
.
mFlags
.
mIsSynthesizedForTests
=
mTextComposition
-
>
IsSynthesizedForTests
(
)
;
IMEStateManager
:
:
DispatchCompositionEvent
(
mEventTarget
presContext
&
compStart
&
status
nullptr
mIsSynthesizedEvent
)
;
break
;
}
case
eCompositionChange
:
case
eCompositionCommitAsIs
:
case
eCompositionCommit
:
{
WidgetCompositionEvent
compEvent
(
true
mEventMessage
widget
)
;
compEvent
.
mNativeIMEContext
=
mTextComposition
-
>
mNativeContext
;
if
(
mEventMessage
!
=
eCompositionCommitAsIs
)
{
compEvent
.
mData
=
mData
;
}
compEvent
.
mFlags
.
mIsSynthesizedForTests
=
mTextComposition
-
>
IsSynthesizedForTests
(
)
;
IMEStateManager
:
:
DispatchCompositionEvent
(
mEventTarget
presContext
&
compEvent
&
status
nullptr
mIsSynthesizedEvent
)
;
break
;
}
default
:
MOZ_CRASH
(
"
Unsupported
event
"
)
;
}
return
NS_OK
;
}
TextCompositionArray
:
:
index_type
TextCompositionArray
:
:
IndexOf
(
const
NativeIMEContext
&
aNativeIMEContext
)
{
if
(
!
aNativeIMEContext
.
IsValid
(
)
)
{
return
NoIndex
;
}
for
(
index_type
i
=
Length
(
)
;
i
>
0
;
-
-
i
)
{
if
(
ElementAt
(
i
-
1
)
-
>
GetNativeIMEContext
(
)
=
=
aNativeIMEContext
)
{
return
i
-
1
;
}
}
return
NoIndex
;
}
TextCompositionArray
:
:
index_type
TextCompositionArray
:
:
IndexOf
(
nsIWidget
*
aWidget
)
{
return
IndexOf
(
aWidget
-
>
GetNativeIMEContext
(
)
)
;
}
TextCompositionArray
:
:
index_type
TextCompositionArray
:
:
IndexOf
(
nsPresContext
*
aPresContext
)
{
for
(
index_type
i
=
Length
(
)
;
i
>
0
;
-
-
i
)
{
if
(
ElementAt
(
i
-
1
)
-
>
GetPresContext
(
)
=
=
aPresContext
)
{
return
i
-
1
;
}
}
return
NoIndex
;
}
TextCompositionArray
:
:
index_type
TextCompositionArray
:
:
IndexOf
(
nsPresContext
*
aPresContext
nsINode
*
aNode
)
{
index_type
index
=
IndexOf
(
aPresContext
)
;
if
(
index
=
=
NoIndex
)
{
return
NoIndex
;
}
nsINode
*
node
=
ElementAt
(
index
)
-
>
GetEventTargetNode
(
)
;
return
node
=
=
aNode
?
index
:
NoIndex
;
}
TextComposition
*
TextCompositionArray
:
:
GetCompositionFor
(
nsIWidget
*
aWidget
)
{
index_type
i
=
IndexOf
(
aWidget
)
;
if
(
i
=
=
NoIndex
)
{
return
nullptr
;
}
return
ElementAt
(
i
)
;
}
TextComposition
*
TextCompositionArray
:
:
GetCompositionFor
(
const
WidgetCompositionEvent
*
aCompositionEvent
)
{
index_type
i
=
IndexOf
(
aCompositionEvent
-
>
mNativeIMEContext
)
;
if
(
i
=
=
NoIndex
)
{
return
nullptr
;
}
return
ElementAt
(
i
)
;
}
TextComposition
*
TextCompositionArray
:
:
GetCompositionFor
(
nsPresContext
*
aPresContext
)
{
index_type
i
=
IndexOf
(
aPresContext
)
;
if
(
i
=
=
NoIndex
)
{
return
nullptr
;
}
return
ElementAt
(
i
)
;
}
TextComposition
*
TextCompositionArray
:
:
GetCompositionFor
(
nsPresContext
*
aPresContext
nsINode
*
aNode
)
{
index_type
i
=
IndexOf
(
aPresContext
aNode
)
;
if
(
i
=
=
NoIndex
)
{
return
nullptr
;
}
return
ElementAt
(
i
)
;
}
TextComposition
*
TextCompositionArray
:
:
GetCompositionInContent
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
)
{
for
(
index_type
i
=
Length
(
)
;
i
>
0
;
-
-
i
)
{
nsINode
*
node
=
ElementAt
(
i
-
1
)
-
>
GetEventTargetNode
(
)
;
if
(
node
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
node
aContent
)
)
{
return
ElementAt
(
i
-
1
)
;
}
}
return
nullptr
;
}
}
