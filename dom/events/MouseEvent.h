#
ifndef
mozilla_dom_MouseEvent_h_
#
define
mozilla_dom_MouseEvent_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
UIEvent
.
h
"
namespace
mozilla
:
:
dom
{
class
MouseEvent
:
public
UIEvent
{
public
:
MouseEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetMouseEventBase
*
aEvent
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
MouseEvent
UIEvent
)
virtual
JSObject
*
WrapObjectInternal
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
MouseEvent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
virtual
MouseEvent
*
AsMouseEvent
(
)
override
{
return
this
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
DuplicatePrivateData
(
)
override
;
virtual
uint32_t
Which
(
CallerType
aCallerType
)
override
{
return
Button
(
)
+
1
;
}
already_AddRefed
<
nsIScreen
>
GetScreen
(
)
;
CSSDoublePoint
ScreenPoint
(
CallerType
)
const
;
double
ScreenX
(
CallerType
aCallerType
)
const
{
return
ScreenPoint
(
aCallerType
)
.
x
;
}
double
ScreenY
(
CallerType
aCallerType
)
const
{
return
ScreenPoint
(
aCallerType
)
.
y
;
}
LayoutDeviceIntPoint
ScreenPointLayoutDevicePix
(
)
const
;
DesktopIntPoint
ScreenPointDesktopPix
(
)
const
;
CSSDoublePoint
PagePoint
(
)
const
;
double
PageX
(
)
const
{
return
PagePoint
(
)
.
x
;
}
double
PageY
(
)
const
{
return
PagePoint
(
)
.
y
;
}
CSSDoublePoint
ClientPoint
(
)
const
;
double
ClientX
(
)
const
{
return
ClientPoint
(
)
.
x
;
}
double
ClientY
(
)
const
{
return
ClientPoint
(
)
.
y
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
CSSDoublePoint
OffsetPoint
(
)
const
;
double
OffsetX
(
)
const
{
return
OffsetPoint
(
)
.
x
;
}
double
OffsetY
(
)
const
{
return
OffsetPoint
(
)
.
y
;
}
bool
CtrlKey
(
)
;
bool
ShiftKey
(
)
;
bool
AltKey
(
)
;
bool
MetaKey
(
)
;
int16_t
Button
(
)
;
uint16_t
Buttons
(
)
const
;
already_AddRefed
<
EventTarget
>
GetRelatedTarget
(
)
;
void
InitMouseEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
int32_t
aScreenX
int32_t
aScreenY
int32_t
aClientX
int32_t
aClientY
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
uint16_t
aButton
EventTarget
*
aRelatedTarget
)
{
InitMouseEventInternal
(
aType
aCanBubble
aCancelable
aView
aDetail
aScreenX
aScreenY
aClientX
aClientY
aCtrlKey
aAltKey
aShiftKey
aMetaKey
aButton
aRelatedTarget
)
;
}
void
InitializeExtraMouseEventDictionaryMembers
(
const
MouseEventInit
&
aParam
)
;
bool
GetModifierState
(
const
nsAString
&
aKeyArg
)
{
return
GetModifierStateInternal
(
aKeyArg
)
;
}
static
already_AddRefed
<
MouseEvent
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
const
MouseEventInit
&
aParam
)
;
int32_t
MovementX
(
)
{
return
GetMovementPoint
(
)
.
x
;
}
int32_t
MovementY
(
)
{
return
GetMovementPoint
(
)
.
y
;
}
float
MozPressure
(
CallerType
)
const
;
uint16_t
InputSource
(
CallerType
)
const
;
void
InitNSMouseEvent
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
int32_t
aScreenX
int32_t
aScreenY
int32_t
aClientX
int32_t
aClientY
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
uint16_t
aButton
EventTarget
*
aRelatedTarget
float
aPressure
uint16_t
aInputSource
)
;
void
PreventClickEvent
(
)
;
bool
ClickEventPrevented
(
)
;
already_AddRefed
<
Event
>
GetTriggerEvent
(
)
const
;
protected
:
~
MouseEvent
(
)
=
default
;
nsIntPoint
GetMovementPoint
(
)
const
;
void
InitMouseEventInternal
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
double
aScreenX
double
aScreenY
double
aClientX
double
aClientY
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
uint16_t
aButton
EventTarget
*
aRelatedTarget
)
;
void
InitMouseEventInternal
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
double
aScreenX
double
aScreenY
double
aClientX
double
aClientY
int16_t
aButton
EventTarget
*
aRelatedTarget
const
nsAString
&
aModifiersList
)
;
LayoutDeviceDoublePoint
mWidgetOrScreenRelativePoint
;
CSSDoublePoint
mDefaultClientPoint
;
CSSDoublePoint
mPagePoint
;
nsIntPoint
mMovementPoint
;
bool
mUseFractionalCoords
=
false
;
}
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
MouseEvent
>
NS_NewDOMMouseEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aOwner
nsPresContext
*
aPresContext
mozilla
:
:
WidgetMouseEvent
*
aEvent
)
;
#
endif
