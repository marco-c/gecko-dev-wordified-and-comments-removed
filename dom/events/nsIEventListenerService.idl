#
include
"
nsISupports
.
idl
"
webidl
EventTarget
;
interface
nsIArray
;
[
scriptable
uuid
(
07222b02
-
da12
-
4cf4
-
b2f7
-
761da007a8d8
)
]
interface
nsIEventListenerChange
:
nsISupports
{
readonly
attribute
EventTarget
target
;
[
noscript
]
readonly
attribute
uint32_t
countOfEventListenerChangesAffectingAccessibility
;
}
;
[
scriptable
function
uuid
(
aa7c95f6
-
d3b5
-
44b3
-
9597
-
1d9f19b9c5f2
)
]
interface
nsIListenerChangeListener
:
nsISupports
{
void
listenersChanged
(
in
nsIArray
aEventListenerChanges
)
;
}
;
[
scriptable
uuid
(
11ba5fd7
-
8db2
-
4b1a
-
9f67
-
342cfa11afad
)
]
interface
nsIEventListenerInfo
:
nsISupports
{
readonly
attribute
AString
type
;
readonly
attribute
boolean
capturing
;
readonly
attribute
boolean
allowsUntrusted
;
readonly
attribute
boolean
inSystemEventGroup
;
attribute
boolean
enabled
;
[
implicit_jscontext
]
readonly
attribute
jsval
listenerObject
;
AString
toSource
(
)
;
}
;
[
scriptable
uuid
(
77aab5f7
-
213d
-
4db4
-
9f22
-
e46dfb774f15
)
]
interface
nsIEventListenerService
:
nsISupports
{
Array
<
nsIEventListenerInfo
>
getListenerInfoFor
(
in
EventTarget
aEventTarget
)
;
[
can_run_script
]
Array
<
EventTarget
>
getEventTargetChainFor
(
in
EventTarget
aEventTarget
in
boolean
composed
)
;
boolean
hasListenersFor
(
in
EventTarget
aEventTarget
in
AString
aType
)
;
[
implicit_jscontext
]
void
addListenerForAllEvents
(
in
EventTarget
target
in
jsval
listener
[
optional
]
in
boolean
aUseCapture
[
optional
]
in
boolean
aWantsUntrusted
[
optional
]
in
boolean
aSystemEventGroup
)
;
[
implicit_jscontext
]
void
removeListenerForAllEvents
(
in
EventTarget
target
in
jsval
listener
[
optional
]
in
boolean
aUseCapture
[
optional
]
in
boolean
aSystemEventGroup
)
;
void
addListenerChangeListener
(
in
nsIListenerChangeListener
aListener
)
;
void
removeListenerChangeListener
(
in
nsIListenerChangeListener
aListener
)
;
}
;
