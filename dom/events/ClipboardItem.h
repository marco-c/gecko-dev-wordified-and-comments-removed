#
ifndef
mozilla_dom_ClipboardItem_h_
#
define
mozilla_dom_ClipboardItem_h_
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
dom
/
ClipboardBinding
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
struct
ClipboardItemOptions
;
template
<
typename
KeyType
typename
ValueType
>
class
Record
;
class
Promise
;
class
ClipboardItem
final
:
public
nsWrapperCache
{
public
:
struct
ItemEntry
{
nsString
mType
;
OwningStringOrBlob
mData
;
}
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ClipboardItem
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
ClipboardItem
)
ClipboardItem
(
nsISupports
*
aOwner
dom
:
:
PresentationStyle
aPresentationStyle
nsTArray
<
ItemEntry
>
&
&
aItems
)
;
static
already_AddRefed
<
ClipboardItem
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Record
<
nsString
OwningStringOrBlob
>
&
aItems
const
ClipboardItemOptions
&
aOptions
ErrorResult
&
aRv
)
;
dom
:
:
PresentationStyle
PresentationStyle
(
)
const
{
return
mPresentationStyle
;
}
;
void
GetTypes
(
nsTArray
<
nsString
>
&
aTypes
)
const
;
already_AddRefed
<
Promise
>
GetType
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mOwner
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
const
nsTArray
<
ItemEntry
>
&
Entries
(
)
const
{
return
mItems
;
}
private
:
~
ClipboardItem
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mOwner
;
dom
:
:
PresentationStyle
mPresentationStyle
;
nsTArray
<
ItemEntry
>
mItems
;
}
;
}
#
endif
