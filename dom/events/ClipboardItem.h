#
ifndef
mozilla_dom_ClipboardItem_h_
#
define
mozilla_dom_ClipboardItem_h_
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
dom
/
ClipboardBinding
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsITransferable
;
namespace
mozilla
:
:
dom
{
struct
ClipboardItemOptions
;
template
<
typename
KeyType
typename
ValueType
>
class
Record
;
class
Promise
;
class
ClipboardItem
final
:
public
nsWrapperCache
{
public
:
class
ItemEntry
final
:
public
PromiseNativeHandler
{
public
:
using
GetDataPromise
=
MozPromise
<
OwningStringOrBlob
nsresult
true
>
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ItemEntry
)
explicit
ItemEntry
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aType
)
:
mGlobal
(
aGlobal
)
mType
(
aType
)
{
MOZ_ASSERT
(
mGlobal
)
;
}
ItemEntry
(
nsIGlobalObject
*
aGlobal
const
nsAString
&
aType
const
nsAString
&
aData
)
:
ItemEntry
(
aGlobal
aType
)
{
mLoadResult
.
emplace
(
NS_OK
)
;
mData
.
SetAsString
(
)
=
aData
;
}
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
const
nsString
&
Type
(
)
const
{
return
mType
;
}
RefPtr
<
GetDataPromise
>
GetData
(
)
;
void
LoadDataFromSystemClipboard
(
nsITransferable
&
aTransferable
)
;
void
LoadDataFromDataPromise
(
Promise
&
aDataPromise
)
;
void
ReactGetTypePromise
(
Promise
&
aPromise
)
;
private
:
~
ItemEntry
(
)
{
mLoadingPromise
.
DisconnectIfExists
(
)
;
if
(
!
mPendingGetDataRequests
.
IsEmpty
(
)
)
{
RejectPendingPromises
(
NS_ERROR_FAILURE
)
;
}
}
;
void
MaybeResolveGetTypePromise
(
const
OwningStringOrBlob
&
aData
Promise
&
aPromise
)
;
void
MaybeResolvePendingPromises
(
OwningStringOrBlob
&
&
aData
)
;
void
RejectPendingPromises
(
nsresult
rv
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsString
mType
;
OwningStringOrBlob
mData
;
Maybe
<
nsresult
>
mLoadResult
;
bool
mIsLoadingData
=
false
;
MozPromiseRequestHolder
<
GenericPromise
>
mLoadingPromise
;
nsTArray
<
MozPromiseHolder
<
GetDataPromise
>
>
mPendingGetDataRequests
;
nsTArray
<
RefPtr
<
Promise
>
>
mPendingGetTypeRequests
;
}
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ClipboardItem
)
NS_DECL_CYCLE_COLLECTION_NATIVE_WRAPPERCACHE_CLASS
(
ClipboardItem
)
ClipboardItem
(
nsISupports
*
aOwner
dom
:
:
PresentationStyle
aPresentationStyle
nsTArray
<
RefPtr
<
ItemEntry
>
>
&
&
aItems
)
;
static
already_AddRefed
<
ClipboardItem
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Record
<
nsString
OwningNonNull
<
Promise
>
>
&
aItems
const
ClipboardItemOptions
&
aOptions
ErrorResult
&
aRv
)
;
dom
:
:
PresentationStyle
PresentationStyle
(
)
const
{
return
mPresentationStyle
;
}
;
void
GetTypes
(
nsTArray
<
nsString
>
&
aTypes
)
const
;
already_AddRefed
<
Promise
>
GetType
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mOwner
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
const
nsTArray
<
RefPtr
<
ItemEntry
>
>
&
Entries
(
)
const
{
return
mItems
;
}
private
:
~
ClipboardItem
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mOwner
;
dom
:
:
PresentationStyle
mPresentationStyle
;
nsTArray
<
RefPtr
<
ItemEntry
>
>
mItems
;
}
;
}
#
endif
