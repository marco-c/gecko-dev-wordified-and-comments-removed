#
include
"
MouseScrollEvent
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
namespace
mozilla
:
:
dom
{
MouseScrollEvent
:
:
MouseScrollEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetMouseScrollEvent
*
aEvent
)
:
MouseEvent
(
aOwner
aPresContext
aEvent
?
aEvent
:
new
WidgetMouseScrollEvent
(
false
eVoidEvent
nullptr
)
)
{
if
(
aEvent
)
{
mEventIsInternal
=
false
;
}
else
{
mEventIsInternal
=
true
;
mEvent
-
>
mRefPoint
=
LayoutDeviceIntPoint
(
0
0
)
;
static_cast
<
WidgetMouseEventBase
*
>
(
mEvent
)
-
>
mInputSource
=
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
;
}
mDetail
=
mEvent
-
>
AsMouseScrollEvent
(
)
-
>
mDelta
;
}
void
MouseScrollEvent
:
:
InitMouseScrollEventInternal
(
const
nsAString
&
aType
bool
aCanBubble
bool
aCancelable
nsGlobalWindowInner
*
aView
int32_t
aDetail
double
aScreenX
double
aScreenY
double
aClientX
double
aClientY
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
uint16_t
aButton
EventTarget
*
aRelatedTarget
int32_t
aAxis
)
{
NS_ENSURE_TRUE_VOID
(
!
mEvent
-
>
mFlags
.
mIsBeingDispatched
)
;
MouseEvent
:
:
InitMouseEventInternal
(
aType
aCanBubble
aCancelable
aView
aDetail
aScreenX
aScreenY
aClientX
aClientY
aCtrlKey
aAltKey
aShiftKey
aMetaKey
aButton
aRelatedTarget
)
;
mEvent
-
>
AsMouseScrollEvent
(
)
-
>
mIsHorizontal
=
(
aAxis
=
=
MouseScrollEvent_Binding
:
:
HORIZONTAL_AXIS
)
;
}
int32_t
MouseScrollEvent
:
:
Axis
(
)
{
return
mEvent
-
>
AsMouseScrollEvent
(
)
-
>
mIsHorizontal
?
MouseScrollEvent_Binding
:
:
HORIZONTAL_AXIS
:
MouseScrollEvent_Binding
:
:
VERTICAL_AXIS
;
}
}
using
namespace
mozilla
;
using
namespace
dom
;
already_AddRefed
<
MouseScrollEvent
>
NS_NewDOMMouseScrollEvent
(
EventTarget
*
aOwner
nsPresContext
*
aPresContext
WidgetMouseScrollEvent
*
aEvent
)
{
RefPtr
<
MouseScrollEvent
>
it
=
new
MouseScrollEvent
(
aOwner
aPresContext
aEvent
)
;
return
it
.
forget
(
)
;
}
