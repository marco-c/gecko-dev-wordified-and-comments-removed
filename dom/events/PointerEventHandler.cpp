#
include
"
PointerEventHandler
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
PointerEvent
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
namespace
mozilla
{
using
namespace
dom
;
static
bool
sPointerEventEnabled
=
true
;
static
bool
sPointerEventImplicitCapture
=
false
;
Maybe
<
int32_t
>
PointerEventHandler
:
:
sSpoofedPointerId
;
class
PointerInfo
final
{
public
:
uint16_t
mPointerType
;
bool
mActiveState
;
bool
mPrimaryState
;
bool
mPreventMouseEventByContent
;
explicit
PointerInfo
(
bool
aActiveState
uint16_t
aPointerType
bool
aPrimaryState
)
:
mPointerType
(
aPointerType
)
mActiveState
(
aActiveState
)
mPrimaryState
(
aPrimaryState
)
mPreventMouseEventByContent
(
false
)
{
}
}
;
static
nsClassHashtable
<
nsUint32HashKey
PointerCaptureInfo
>
*
sPointerCaptureList
;
static
nsClassHashtable
<
nsUint32HashKey
PointerInfo
>
*
sActivePointersIds
;
void
PointerEventHandler
:
:
Initialize
(
)
{
static
bool
initialized
=
false
;
if
(
initialized
)
{
return
;
}
initialized
=
true
;
Preferences
:
:
AddBoolVarCache
(
&
sPointerEventEnabled
"
dom
.
w3c_pointer_events
.
enabled
"
true
)
;
Preferences
:
:
AddBoolVarCache
(
&
sPointerEventImplicitCapture
"
dom
.
w3c_pointer_events
.
implicit_capture
"
true
)
;
}
void
PointerEventHandler
:
:
InitializeStatics
(
)
{
MOZ_ASSERT
(
!
sPointerCaptureList
"
InitializeStatics
called
multiple
times
!
"
)
;
sPointerCaptureList
=
new
nsClassHashtable
<
nsUint32HashKey
PointerCaptureInfo
>
;
sActivePointersIds
=
new
nsClassHashtable
<
nsUint32HashKey
PointerInfo
>
;
}
void
PointerEventHandler
:
:
ReleaseStatics
(
)
{
MOZ_ASSERT
(
sPointerCaptureList
"
ReleaseStatics
called
without
Initialize
!
"
)
;
delete
sPointerCaptureList
;
sPointerCaptureList
=
nullptr
;
delete
sActivePointersIds
;
sActivePointersIds
=
nullptr
;
}
bool
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
{
return
sPointerEventEnabled
;
}
bool
PointerEventHandler
:
:
IsPointerEventImplicitCaptureForTouchEnabled
(
)
{
return
sPointerEventEnabled
&
&
sPointerEventImplicitCapture
;
}
void
PointerEventHandler
:
:
UpdateActivePointerState
(
WidgetMouseEvent
*
aEvent
)
{
if
(
!
IsPointerEventEnabled
(
)
|
|
!
aEvent
)
{
return
;
}
switch
(
aEvent
-
>
mMessage
)
{
case
eMouseEnterIntoWidget
:
sActivePointersIds
-
>
Put
(
aEvent
-
>
pointerId
new
PointerInfo
(
false
aEvent
-
>
inputSource
true
)
)
;
MaybeCacheSpoofedPointerID
(
aEvent
-
>
inputSource
aEvent
-
>
pointerId
)
;
break
;
case
ePointerDown
:
if
(
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
)
{
sActivePointersIds
-
>
Put
(
pointerEvent
-
>
pointerId
new
PointerInfo
(
true
pointerEvent
-
>
inputSource
pointerEvent
-
>
mIsPrimary
)
)
;
MaybeCacheSpoofedPointerID
(
pointerEvent
-
>
inputSource
pointerEvent
-
>
pointerId
)
;
}
break
;
case
ePointerCancel
:
case
ePointerUp
:
if
(
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
)
{
if
(
pointerEvent
-
>
inputSource
!
=
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
)
{
sActivePointersIds
-
>
Put
(
pointerEvent
-
>
pointerId
new
PointerInfo
(
false
pointerEvent
-
>
inputSource
pointerEvent
-
>
mIsPrimary
)
)
;
}
else
{
sActivePointersIds
-
>
Remove
(
pointerEvent
-
>
pointerId
)
;
}
}
break
;
case
eMouseExitFromWidget
:
sActivePointersIds
-
>
Remove
(
aEvent
-
>
pointerId
)
;
break
;
default
:
break
;
}
}
void
PointerEventHandler
:
:
SetPointerCaptureById
(
uint32_t
aPointerId
nsIContent
*
aContent
)
{
MOZ_ASSERT
(
aContent
)
;
if
(
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
=
=
GetPointerType
(
aPointerId
)
)
{
nsIPresShell
:
:
SetCapturingContent
(
aContent
CAPTURE_PREVENTDRAG
)
;
}
PointerCaptureInfo
*
pointerCaptureInfo
=
GetPointerCaptureInfo
(
aPointerId
)
;
if
(
pointerCaptureInfo
)
{
pointerCaptureInfo
-
>
mPendingContent
=
aContent
;
}
else
{
sPointerCaptureList
-
>
Put
(
aPointerId
new
PointerCaptureInfo
(
aContent
)
)
;
}
}
PointerCaptureInfo
*
PointerEventHandler
:
:
GetPointerCaptureInfo
(
uint32_t
aPointerId
)
{
PointerCaptureInfo
*
pointerCaptureInfo
=
nullptr
;
sPointerCaptureList
-
>
Get
(
aPointerId
&
pointerCaptureInfo
)
;
return
pointerCaptureInfo
;
}
void
PointerEventHandler
:
:
ReleasePointerCaptureById
(
uint32_t
aPointerId
)
{
PointerCaptureInfo
*
pointerCaptureInfo
=
GetPointerCaptureInfo
(
aPointerId
)
;
if
(
pointerCaptureInfo
&
&
pointerCaptureInfo
-
>
mPendingContent
)
{
if
(
MouseEvent_Binding
:
:
MOZ_SOURCE_MOUSE
=
=
GetPointerType
(
aPointerId
)
)
{
nsIPresShell
:
:
SetCapturingContent
(
nullptr
CAPTURE_PREVENTDRAG
)
;
}
pointerCaptureInfo
-
>
mPendingContent
=
nullptr
;
}
}
void
PointerEventHandler
:
:
ReleaseAllPointerCapture
(
)
{
for
(
auto
iter
=
sPointerCaptureList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
PointerCaptureInfo
*
data
=
iter
.
UserData
(
)
;
if
(
data
&
&
data
-
>
mPendingContent
)
{
ReleasePointerCaptureById
(
iter
.
Key
(
)
)
;
}
}
}
bool
PointerEventHandler
:
:
GetPointerInfo
(
uint32_t
aPointerId
bool
&
aActiveState
)
{
PointerInfo
*
pointerInfo
=
nullptr
;
if
(
sActivePointersIds
-
>
Get
(
aPointerId
&
pointerInfo
)
&
&
pointerInfo
)
{
aActiveState
=
pointerInfo
-
>
mActiveState
;
return
true
;
}
return
false
;
}
void
PointerEventHandler
:
:
MaybeProcessPointerCapture
(
WidgetGUIEvent
*
aEvent
)
{
switch
(
aEvent
-
>
mClass
)
{
case
eMouseEventClass
:
ProcessPointerCaptureForMouse
(
aEvent
-
>
AsMouseEvent
(
)
)
;
break
;
case
eTouchEventClass
:
ProcessPointerCaptureForTouch
(
aEvent
-
>
AsTouchEvent
(
)
)
;
break
;
default
:
break
;
}
}
void
PointerEventHandler
:
:
ProcessPointerCaptureForMouse
(
WidgetMouseEvent
*
aEvent
)
{
if
(
!
ShouldGeneratePointerEventFromMouse
(
aEvent
)
)
{
return
;
}
PointerCaptureInfo
*
info
=
GetPointerCaptureInfo
(
aEvent
-
>
pointerId
)
;
if
(
!
info
|
|
info
-
>
mPendingContent
=
=
info
-
>
mOverrideContent
)
{
return
;
}
WidgetPointerEvent
localEvent
(
*
aEvent
)
;
InitPointerEventFromMouse
(
&
localEvent
aEvent
eVoidEvent
)
;
CheckPointerCaptureState
(
&
localEvent
)
;
}
void
PointerEventHandler
:
:
ProcessPointerCaptureForTouch
(
WidgetTouchEvent
*
aEvent
)
{
if
(
!
ShouldGeneratePointerEventFromTouch
(
aEvent
)
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
aEvent
-
>
mTouches
.
Length
(
)
;
+
+
i
)
{
Touch
*
touch
=
aEvent
-
>
mTouches
[
i
]
;
if
(
!
TouchManager
:
:
ShouldConvertTouchToPointer
(
touch
aEvent
)
)
{
continue
;
}
PointerCaptureInfo
*
info
=
GetPointerCaptureInfo
(
touch
-
>
Identifier
(
)
)
;
if
(
!
info
|
|
info
-
>
mPendingContent
=
=
info
-
>
mOverrideContent
)
{
continue
;
}
WidgetPointerEvent
event
(
aEvent
-
>
IsTrusted
(
)
eVoidEvent
aEvent
-
>
mWidget
)
;
InitPointerEventFromTouch
(
&
event
aEvent
touch
i
=
=
0
)
;
CheckPointerCaptureState
(
&
event
)
;
}
}
void
PointerEventHandler
:
:
CheckPointerCaptureState
(
WidgetPointerEvent
*
aEvent
)
{
if
(
!
aEvent
)
{
return
;
}
MOZ_ASSERT
(
IsPointerEventEnabled
(
)
)
;
MOZ_ASSERT
(
aEvent
-
>
mClass
=
=
ePointerEventClass
)
;
PointerCaptureInfo
*
captureInfo
=
GetPointerCaptureInfo
(
aEvent
-
>
pointerId
)
;
if
(
!
captureInfo
|
|
captureInfo
-
>
mPendingContent
=
=
captureInfo
-
>
mOverrideContent
)
{
return
;
}
nsIContent
*
pendingContent
=
captureInfo
-
>
mPendingContent
.
get
(
)
;
if
(
captureInfo
-
>
mOverrideContent
)
{
DispatchGotOrLostPointerCaptureEvent
(
false
aEvent
captureInfo
-
>
mOverrideContent
)
;
}
if
(
pendingContent
)
{
DispatchGotOrLostPointerCaptureEvent
(
true
aEvent
pendingContent
)
;
}
captureInfo
-
>
mOverrideContent
=
pendingContent
;
if
(
captureInfo
-
>
Empty
(
)
)
{
sPointerCaptureList
-
>
Remove
(
aEvent
-
>
pointerId
)
;
}
}
void
PointerEventHandler
:
:
ImplicitlyCapturePointer
(
nsIFrame
*
aFrame
WidgetEvent
*
aEvent
)
{
MOZ_ASSERT
(
aEvent
-
>
mMessage
=
=
ePointerDown
)
;
if
(
!
aFrame
|
|
!
IsPointerEventEnabled
(
)
|
|
!
IsPointerEventImplicitCaptureForTouchEnabled
(
)
)
{
return
;
}
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
;
NS_WARNING_ASSERTION
(
pointerEvent
"
Call
ImplicitlyCapturePointer
with
non
-
pointer
event
"
)
;
if
(
pointerEvent
-
>
inputSource
!
=
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
)
{
return
;
}
nsCOMPtr
<
nsIContent
>
target
;
aFrame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
target
)
)
;
while
(
target
&
&
!
target
-
>
IsElement
(
)
)
{
target
=
target
-
>
GetParent
(
)
;
}
if
(
NS_WARN_IF
(
!
target
)
)
{
return
;
}
SetPointerCaptureById
(
pointerEvent
-
>
pointerId
target
)
;
}
void
PointerEventHandler
:
:
ImplicitlyReleasePointerCapture
(
WidgetEvent
*
aEvent
)
{
MOZ_ASSERT
(
aEvent
)
;
if
(
aEvent
-
>
mMessage
!
=
ePointerUp
&
&
aEvent
-
>
mMessage
!
=
ePointerCancel
)
{
return
;
}
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
;
ReleasePointerCaptureById
(
pointerEvent
-
>
pointerId
)
;
CheckPointerCaptureState
(
pointerEvent
)
;
}
nsIContent
*
PointerEventHandler
:
:
GetPointerCapturingContent
(
uint32_t
aPointerId
)
{
PointerCaptureInfo
*
pointerCaptureInfo
=
GetPointerCaptureInfo
(
aPointerId
)
;
if
(
pointerCaptureInfo
)
{
return
pointerCaptureInfo
-
>
mOverrideContent
;
}
return
nullptr
;
}
nsIContent
*
PointerEventHandler
:
:
GetPointerCapturingContent
(
WidgetGUIEvent
*
aEvent
)
{
if
(
!
IsPointerEventEnabled
(
)
|
|
(
aEvent
-
>
mClass
!
=
ePointerEventClass
&
&
aEvent
-
>
mClass
!
=
eMouseEventClass
)
|
|
aEvent
-
>
mMessage
=
=
ePointerDown
|
|
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
return
nullptr
;
}
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
!
mouseEvent
)
{
return
nullptr
;
}
return
GetPointerCapturingContent
(
mouseEvent
-
>
pointerId
)
;
}
void
PointerEventHandler
:
:
ReleaseIfCaptureByDescendant
(
nsIContent
*
aContent
)
{
for
(
auto
iter
=
sPointerCaptureList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
PointerCaptureInfo
*
data
=
iter
.
UserData
(
)
;
if
(
data
&
&
data
-
>
mPendingContent
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
data
-
>
mPendingContent
aContent
)
)
{
ReleasePointerCaptureById
(
iter
.
Key
(
)
)
;
}
}
}
void
PointerEventHandler
:
:
PreHandlePointerEventsPreventDefault
(
WidgetPointerEvent
*
aPointerEvent
WidgetGUIEvent
*
aMouseOrTouchEvent
)
{
if
(
!
aPointerEvent
-
>
mIsPrimary
|
|
aPointerEvent
-
>
mMessage
=
=
ePointerDown
)
{
return
;
}
PointerInfo
*
pointerInfo
=
nullptr
;
if
(
!
sActivePointersIds
-
>
Get
(
aPointerEvent
-
>
pointerId
&
pointerInfo
)
|
|
!
pointerInfo
)
{
return
;
}
if
(
!
pointerInfo
-
>
mPreventMouseEventByContent
)
{
return
;
}
aMouseOrTouchEvent
-
>
PreventDefault
(
false
)
;
aMouseOrTouchEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
if
(
aPointerEvent
-
>
mMessage
=
=
ePointerUp
)
{
pointerInfo
-
>
mPreventMouseEventByContent
=
false
;
}
}
void
PointerEventHandler
:
:
PostHandlePointerEventsPreventDefault
(
WidgetPointerEvent
*
aPointerEvent
WidgetGUIEvent
*
aMouseOrTouchEvent
)
{
if
(
!
aPointerEvent
-
>
mIsPrimary
|
|
aPointerEvent
-
>
mMessage
!
=
ePointerDown
|
|
!
aPointerEvent
-
>
DefaultPreventedByContent
(
)
)
{
return
;
}
PointerInfo
*
pointerInfo
=
nullptr
;
if
(
!
sActivePointersIds
-
>
Get
(
aPointerEvent
-
>
pointerId
&
pointerInfo
)
|
|
!
pointerInfo
)
{
#
ifdef
DEBUG
MOZ_CRASH
(
"
Got
ePointerDown
w
/
o
active
pointer
info
!
!
"
)
;
#
endif
return
;
}
if
(
!
pointerInfo
-
>
mActiveState
)
{
return
;
}
aMouseOrTouchEvent
-
>
PreventDefault
(
false
)
;
aMouseOrTouchEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
pointerInfo
-
>
mPreventMouseEventByContent
=
true
;
}
void
PointerEventHandler
:
:
InitPointerEventFromMouse
(
WidgetPointerEvent
*
aPointerEvent
WidgetMouseEvent
*
aMouseEvent
EventMessage
aMessage
)
{
MOZ_ASSERT
(
aPointerEvent
)
;
MOZ_ASSERT
(
aMouseEvent
)
;
aPointerEvent
-
>
pointerId
=
aMouseEvent
-
>
pointerId
;
aPointerEvent
-
>
inputSource
=
aMouseEvent
-
>
inputSource
;
aPointerEvent
-
>
mMessage
=
aMessage
;
aPointerEvent
-
>
button
=
aMouseEvent
-
>
mMessage
=
=
eMouseMove
?
WidgetMouseEvent
:
:
eNoButton
:
aMouseEvent
-
>
button
;
aPointerEvent
-
>
buttons
=
aMouseEvent
-
>
buttons
;
aPointerEvent
-
>
pressure
=
aPointerEvent
-
>
buttons
?
aMouseEvent
-
>
pressure
?
aMouseEvent
-
>
pressure
:
0
.
5f
:
0
.
0f
;
}
void
PointerEventHandler
:
:
InitPointerEventFromTouch
(
WidgetPointerEvent
*
aPointerEvent
WidgetTouchEvent
*
aTouchEvent
mozilla
:
:
dom
:
:
Touch
*
aTouch
bool
aIsPrimary
)
{
MOZ_ASSERT
(
aPointerEvent
)
;
MOZ_ASSERT
(
aTouchEvent
)
;
int16_t
button
=
aTouchEvent
-
>
mMessage
=
=
eTouchMove
?
WidgetMouseEvent
:
:
eNoButton
:
WidgetMouseEvent
:
:
eLeftButton
;
int16_t
buttons
=
aTouchEvent
-
>
mMessage
=
=
eTouchEnd
?
WidgetMouseEvent
:
:
eNoButtonFlag
:
WidgetMouseEvent
:
:
eLeftButtonFlag
;
aPointerEvent
-
>
mIsPrimary
=
aIsPrimary
;
aPointerEvent
-
>
pointerId
=
aTouch
-
>
Identifier
(
)
;
aPointerEvent
-
>
mRefPoint
=
aTouch
-
>
mRefPoint
;
aPointerEvent
-
>
mModifiers
=
aTouchEvent
-
>
mModifiers
;
aPointerEvent
-
>
mWidth
=
aTouch
-
>
RadiusX
(
CallerType
:
:
System
)
;
aPointerEvent
-
>
mHeight
=
aTouch
-
>
RadiusY
(
CallerType
:
:
System
)
;
aPointerEvent
-
>
tiltX
=
aTouch
-
>
tiltX
;
aPointerEvent
-
>
tiltY
=
aTouch
-
>
tiltY
;
aPointerEvent
-
>
mTime
=
aTouchEvent
-
>
mTime
;
aPointerEvent
-
>
mTimeStamp
=
aTouchEvent
-
>
mTimeStamp
;
aPointerEvent
-
>
mFlags
=
aTouchEvent
-
>
mFlags
;
aPointerEvent
-
>
button
=
button
;
aPointerEvent
-
>
buttons
=
buttons
;
aPointerEvent
-
>
inputSource
=
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
;
}
void
PointerEventHandler
:
:
DispatchPointerFromMouseOrTouch
(
PresShell
*
aShell
nsIFrame
*
aFrame
nsIContent
*
aContent
WidgetGUIEvent
*
aEvent
bool
aDontRetargetEvents
nsEventStatus
*
aStatus
nsIContent
*
*
aTargetContent
)
{
MOZ_ASSERT
(
IsPointerEventEnabled
(
)
)
;
MOZ_ASSERT
(
aFrame
|
|
aContent
)
;
MOZ_ASSERT
(
aEvent
)
;
EventMessage
pointerMessage
=
eVoidEvent
;
if
(
aEvent
-
>
mClass
=
=
eMouseEventClass
)
{
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
!
mouseEvent
-
>
convertToPointer
|
|
!
aEvent
-
>
IsAllowedToDispatchDOMEvent
(
)
)
{
return
;
}
int16_t
button
=
mouseEvent
-
>
button
;
switch
(
mouseEvent
-
>
mMessage
)
{
case
eMouseMove
:
button
=
WidgetMouseEvent
:
:
eNoButton
;
pointerMessage
=
ePointerMove
;
break
;
case
eMouseUp
:
pointerMessage
=
mouseEvent
-
>
buttons
?
ePointerMove
:
ePointerUp
;
break
;
case
eMouseDown
:
pointerMessage
=
mouseEvent
-
>
buttons
&
~
nsContentUtils
:
:
GetButtonsFlagForButton
(
button
)
?
ePointerMove
:
ePointerDown
;
break
;
default
:
return
;
}
WidgetPointerEvent
event
(
*
mouseEvent
)
;
InitPointerEventFromMouse
(
&
event
mouseEvent
pointerMessage
)
;
event
.
convertToPointer
=
mouseEvent
-
>
convertToPointer
=
false
;
RefPtr
<
PresShell
>
shell
(
aShell
)
;
if
(
!
aFrame
)
{
shell
=
PresShell
:
:
GetShellForEventTarget
(
nullptr
aContent
)
;
if
(
!
shell
)
{
return
;
}
}
PreHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
shell
-
>
HandleEventWithTarget
(
&
event
aFrame
aContent
aStatus
true
aTargetContent
)
;
PostHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
}
else
if
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
{
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
switch
(
touchEvent
-
>
mMessage
)
{
case
eTouchMove
:
pointerMessage
=
ePointerMove
;
break
;
case
eTouchEnd
:
pointerMessage
=
ePointerUp
;
break
;
case
eTouchStart
:
pointerMessage
=
ePointerDown
;
break
;
case
eTouchCancel
:
case
eTouchPointerCancel
:
pointerMessage
=
ePointerCancel
;
break
;
default
:
return
;
}
RefPtr
<
PresShell
>
shell
(
aShell
)
;
for
(
uint32_t
i
=
0
;
i
<
touchEvent
-
>
mTouches
.
Length
(
)
;
+
+
i
)
{
Touch
*
touch
=
touchEvent
-
>
mTouches
[
i
]
;
if
(
!
TouchManager
:
:
ShouldConvertTouchToPointer
(
touch
touchEvent
)
)
{
continue
;
}
WidgetPointerEvent
event
(
touchEvent
-
>
IsTrusted
(
)
pointerMessage
touchEvent
-
>
mWidget
)
;
InitPointerEventFromTouch
(
&
event
touchEvent
touch
i
=
=
0
)
;
event
.
convertToPointer
=
touch
-
>
convertToPointer
=
false
;
if
(
aEvent
-
>
mMessage
=
=
eTouchStart
)
{
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
touch
-
>
mTarget
)
;
if
(
!
content
)
{
continue
;
}
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
shell
=
PresShell
:
:
GetShellForEventTarget
(
frame
content
)
;
if
(
!
shell
)
{
continue
;
}
PreHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
shell
-
>
HandleEventWithTarget
(
&
event
frame
content
aStatus
true
nullptr
)
;
PostHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
}
else
{
PreHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
shell
-
>
HandleEvent
(
aFrame
&
event
aDontRetargetEvents
aStatus
)
;
PostHandlePointerEventsPreventDefault
(
&
event
aEvent
)
;
}
}
}
}
uint16_t
PointerEventHandler
:
:
GetPointerType
(
uint32_t
aPointerId
)
{
PointerInfo
*
pointerInfo
=
nullptr
;
if
(
sActivePointersIds
-
>
Get
(
aPointerId
&
pointerInfo
)
&
&
pointerInfo
)
{
return
pointerInfo
-
>
mPointerType
;
}
return
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
;
}
bool
PointerEventHandler
:
:
GetPointerPrimaryState
(
uint32_t
aPointerId
)
{
PointerInfo
*
pointerInfo
=
nullptr
;
if
(
sActivePointersIds
-
>
Get
(
aPointerId
&
pointerInfo
)
&
&
pointerInfo
)
{
return
pointerInfo
-
>
mPrimaryState
;
}
return
false
;
}
void
PointerEventHandler
:
:
DispatchGotOrLostPointerCaptureEvent
(
bool
aIsGotCapture
const
WidgetPointerEvent
*
aPointerEvent
nsIContent
*
aCaptureTarget
)
{
nsIDocument
*
targetDoc
=
aCaptureTarget
-
>
OwnerDoc
(
)
;
nsCOMPtr
<
nsIPresShell
>
shell
=
targetDoc
-
>
GetShell
(
)
;
if
(
NS_WARN_IF
(
!
shell
)
)
{
return
;
}
if
(
!
aIsGotCapture
&
&
!
aCaptureTarget
-
>
IsInComposedDoc
(
)
)
{
PointerEventInit
init
;
init
.
mPointerId
=
aPointerEvent
-
>
pointerId
;
init
.
mBubbles
=
true
;
init
.
mComposed
=
true
;
ConvertPointerTypeToString
(
aPointerEvent
-
>
inputSource
init
.
mPointerType
)
;
init
.
mIsPrimary
=
aPointerEvent
-
>
mIsPrimary
;
RefPtr
<
PointerEvent
>
event
;
event
=
PointerEvent
:
:
Constructor
(
aCaptureTarget
NS_LITERAL_STRING
(
"
lostpointercapture
"
)
init
)
;
targetDoc
-
>
DispatchEvent
(
*
event
)
;
return
;
}
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetPointerEvent
localEvent
(
aPointerEvent
-
>
IsTrusted
(
)
aIsGotCapture
?
ePointerGotCapture
:
ePointerLostCapture
aPointerEvent
-
>
mWidget
)
;
localEvent
.
AssignPointerEventData
(
*
aPointerEvent
true
)
;
DebugOnly
<
nsresult
>
rv
=
shell
-
>
HandleEventWithTarget
(
&
localEvent
aCaptureTarget
-
>
GetPrimaryFrame
(
)
aCaptureTarget
&
status
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
DispatchGotOrLostPointerCaptureEvent
failed
"
)
;
}
void
PointerEventHandler
:
:
MaybeCacheSpoofedPointerID
(
uint16_t
aInputSource
uint32_t
aPointerId
)
{
if
(
sSpoofedPointerId
.
isSome
(
)
|
|
aInputSource
!
=
SPOOFED_POINTER_INTERFACE
)
{
return
;
}
sSpoofedPointerId
.
emplace
(
aPointerId
)
;
}
}
