#
ifndef
mozilla_dom_PerformanceWorker_h
#
define
mozilla_dom_PerformanceWorker_h
#
include
"
Performance
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WorkerPrivate
;
class
PerformanceWorker
final
:
public
Performance
{
public
:
explicit
PerformanceWorker
(
WorkerPrivate
*
aWorkerPrivate
)
;
PerformanceStorage
*
AsPerformanceStorage
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
return
nullptr
;
}
virtual
PerformanceTiming
*
Timing
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
return
nullptr
;
}
virtual
PerformanceNavigation
*
Navigation
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
return
nullptr
;
}
virtual
void
SetFCPTimingEntry
(
PerformancePaintTiming
*
aEntry
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
TimeStamp
CreationTimeStamp
(
)
const
override
;
DOMHighResTimeStamp
CreationTime
(
)
const
override
;
virtual
void
GetMozMemory
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
virtual
nsDOMNavigationTiming
*
GetDOMTiming
(
)
const
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
return
nullptr
;
}
virtual
uint64_t
GetRandomTimelineSeed
(
)
override
;
virtual
nsITimedChannel
*
GetChannel
(
)
const
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
return
nullptr
;
}
void
QueueNavigationTimingEntry
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
void
UpdateNavigationTimingEntry
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
void
InsertEventTimingEntry
(
PerformanceEventTiming
*
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
void
BufferEventTimingEntryIfNeeded
(
PerformanceEventTiming
*
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
.
"
)
;
}
void
DispatchPendingEventTimingEntries
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workders
.
"
)
;
}
class
EventCounts
*
EventCounts
(
)
override
{
MOZ_CRASH
(
"
This
should
not
be
called
on
workers
"
)
;
}
bool
CrossOriginIsolated
(
)
const
override
;
protected
:
~
PerformanceWorker
(
)
;
void
InsertUserEntry
(
PerformanceEntry
*
aEntry
)
override
;
void
DispatchBufferFullEvent
(
)
override
{
}
private
:
WorkerPrivate
*
mWorkerPrivate
;
}
;
}
}
#
endif
