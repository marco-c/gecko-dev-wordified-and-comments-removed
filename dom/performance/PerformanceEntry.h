#
ifndef
mozilla_dom_PerformanceEntry_h___
#
define
mozilla_dom_PerformanceEntry_h___
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsAtom
.
h
"
class
nsISupports
;
namespace
mozilla
{
namespace
dom
{
class
PerformanceResourceTiming
;
class
PerformanceEntry
:
public
nsISupports
public
nsWrapperCache
{
protected
:
virtual
~
PerformanceEntry
(
)
;
public
:
PerformanceEntry
(
nsISupports
*
aParent
const
nsAString
&
aName
const
nsAString
&
aEntryType
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
PerformanceEntry
)
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
void
GetName
(
nsAString
&
aName
)
const
{
if
(
mName
)
{
mName
-
>
ToString
(
aName
)
;
}
}
const
nsAtom
*
GetName
(
)
const
{
return
mName
;
}
void
GetEntryType
(
nsAString
&
aEntryType
)
const
{
if
(
mEntryType
)
{
mEntryType
-
>
ToString
(
aEntryType
)
;
}
}
const
nsAtom
*
GetEntryType
(
)
{
return
mEntryType
;
}
void
SetEntryType
(
const
nsAString
&
aEntryType
)
{
mEntryType
=
NS_Atomize
(
aEntryType
)
;
}
virtual
DOMHighResTimeStamp
StartTime
(
)
const
{
return
0
;
}
virtual
DOMHighResTimeStamp
Duration
(
)
const
{
return
0
;
}
virtual
const
PerformanceResourceTiming
*
ToResourceTiming
(
)
const
{
return
nullptr
;
}
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
protected
:
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
nsAtom
>
mName
;
RefPtr
<
nsAtom
>
mEntryType
;
}
;
class
MOZ_STACK_CLASS
PerformanceEntryComparator
final
{
public
:
bool
Equals
(
const
PerformanceEntry
*
aElem1
const
PerformanceEntry
*
aElem2
)
const
{
MOZ_ASSERT
(
aElem1
&
&
aElem2
"
Trying
to
compare
null
performance
entries
"
)
;
return
aElem1
-
>
StartTime
(
)
=
=
aElem2
-
>
StartTime
(
)
;
}
bool
LessThan
(
const
PerformanceEntry
*
aElem1
const
PerformanceEntry
*
aElem2
)
const
{
MOZ_ASSERT
(
aElem1
&
&
aElem2
"
Trying
to
compare
null
performance
entries
"
)
;
return
aElem1
-
>
StartTime
(
)
<
aElem2
-
>
StartTime
(
)
;
}
}
;
}
}
#
endif
