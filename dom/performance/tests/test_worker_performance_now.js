function
ok
(
a
msg
)
{
dump
(
"
OK
:
"
+
!
!
a
+
"
=
>
"
+
a
+
"
:
"
+
msg
+
"
\
n
"
)
;
postMessage
(
{
type
:
'
status
'
status
:
!
!
a
msg
:
a
+
"
:
"
+
msg
}
)
;
}
function
workerTestDone
(
)
{
postMessage
(
{
type
:
'
finish
'
}
)
;
}
ok
(
self
.
performance
"
Performance
object
should
exist
.
"
)
;
ok
(
typeof
self
.
performance
.
now
=
=
'
function
'
"
Performance
object
should
have
a
'
now
'
method
.
"
)
;
var
n
=
self
.
performance
.
now
(
)
d
=
Date
.
now
(
)
;
ok
(
n
>
=
0
"
The
value
of
now
(
)
should
be
equal
to
or
greater
than
0
.
"
)
;
ok
(
self
.
performance
.
now
(
)
>
=
n
"
The
value
of
now
(
)
should
monotonically
increase
.
"
)
;
setTimeout
(
checkAfterTimeout
1
)
;
var
checks
=
0
;
function
checkAfterTimeout
(
)
{
checks
+
+
;
var
d2
=
Date
.
now
(
)
;
var
n2
=
self
.
performance
.
now
(
)
;
let
elapsedTime
=
d2
-
d
;
let
elapsedPerf
=
n2
-
n
;
if
(
elapsedPerf
=
=
0
&
&
elapsedTime
<
2
&
&
checks
<
50
)
{
setTimeout
(
checkAfterTimeout
1
)
;
return
;
}
ok
(
elapsedPerf
>
0
Loose
-
the
value
of
now
(
)
should
increase
after
2ms
.
+
delta
now
(
)
:
{
elapsedPerf
}
ms
)
;
ok
(
checks
=
=
1
Strict
-
the
value
of
now
(
)
should
increase
after
one
setTimeout
.
+
iters
:
{
checks
}
dt
:
{
elapsedTime
}
now
(
)
:
{
n2
}
)
;
workerTestDone
(
)
;
}
;
