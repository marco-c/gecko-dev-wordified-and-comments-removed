#
include
"
PerformanceWorker
.
h
"
#
include
"
WorkerPrivate
.
h
"
namespace
mozilla
{
namespace
dom
{
using
namespace
workers
;
PerformanceWorker
:
:
PerformanceWorker
(
WorkerPrivate
*
aWorkerPrivate
)
:
mWorkerPrivate
(
aWorkerPrivate
)
{
mWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
PerformanceWorker
:
:
~
PerformanceWorker
(
)
{
mWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
DOMHighResTimeStamp
PerformanceWorker
:
:
Now
(
)
const
{
TimeDuration
duration
=
TimeStamp
:
:
Now
(
)
-
mWorkerPrivate
-
>
NowBaseTimeStamp
(
)
;
return
RoundTime
(
duration
.
ToMilliseconds
(
)
)
;
}
bool
PerformanceWorker
:
:
IsPerformanceTimingAttribute
(
const
nsAString
&
aName
)
{
return
aName
.
EqualsASCII
(
"
navigationStart
"
)
;
}
DOMHighResTimeStamp
PerformanceWorker
:
:
GetPerformanceTimingFromString
(
const
nsAString
&
aProperty
)
{
if
(
!
IsPerformanceTimingAttribute
(
aProperty
)
)
{
return
0
;
}
if
(
aProperty
.
EqualsLiteral
(
"
navigationStart
"
)
)
{
return
mWorkerPrivate
-
>
NowBaseTime
(
)
;
}
MOZ_CRASH
(
"
IsPerformanceTimingAttribute
and
GetPerformanceTimingFromString
are
out
of
sync
"
)
;
return
0
;
}
void
PerformanceWorker
:
:
InsertUserEntry
(
PerformanceEntry
*
aEntry
)
{
if
(
mWorkerPrivate
-
>
PerformanceLoggingEnabled
(
)
)
{
nsAutoCString
uri
;
nsCOMPtr
<
nsIURI
>
scriptURI
=
mWorkerPrivate
-
>
GetResolvedScriptURI
(
)
;
if
(
!
scriptURI
|
|
NS_FAILED
(
scriptURI
-
>
GetHost
(
uri
)
)
)
{
uri
.
AssignLiteral
(
"
none
"
)
;
}
Performance
:
:
LogEntry
(
aEntry
uri
)
;
}
Performance
:
:
InsertUserEntry
(
aEntry
)
;
}
TimeStamp
PerformanceWorker
:
:
CreationTimeStamp
(
)
const
{
return
mWorkerPrivate
-
>
NowBaseTimeStamp
(
)
;
}
DOMHighResTimeStamp
PerformanceWorker
:
:
CreationTime
(
)
const
{
return
mWorkerPrivate
-
>
NowBaseTime
(
)
;
}
}
}
