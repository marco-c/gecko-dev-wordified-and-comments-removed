#
include
"
PerformanceWorker
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
namespace
mozilla
:
:
dom
{
PerformanceWorker
:
:
PerformanceWorker
(
WorkerGlobalScope
*
aGlobalScope
)
:
Performance
(
aGlobalScope
)
{
MOZ_ASSERT
(
aGlobalScope
)
;
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
PerformanceWorker
:
:
~
PerformanceWorker
(
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
if
(
workerPrivate
)
{
workerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
}
}
void
PerformanceWorker
:
:
InsertUserEntry
(
PerformanceEntry
*
aEntry
)
{
if
(
StaticPrefs
:
:
dom_performance_enable_user_timing_logging
(
)
)
{
nsAutoCString
uri
;
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
nsCOMPtr
<
nsIURI
>
scriptURI
=
workerPrivate
-
>
GetResolvedScriptURI
(
)
;
if
(
!
scriptURI
|
|
NS_FAILED
(
scriptURI
-
>
GetHost
(
uri
)
)
)
{
uri
.
AssignLiteral
(
"
none
"
)
;
}
Performance
:
:
LogEntry
(
aEntry
uri
)
;
}
Performance
:
:
InsertUserEntry
(
aEntry
)
;
}
TimeStamp
PerformanceWorker
:
:
CreationTimeStamp
(
)
const
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
return
workerPrivate
-
>
CreationTimeStamp
(
)
;
}
DOMHighResTimeStamp
PerformanceWorker
:
:
CreationTime
(
)
const
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
return
workerPrivate
-
>
CreationTime
(
)
;
}
uint64_t
PerformanceWorker
:
:
GetRandomTimelineSeed
(
)
{
WorkerPrivate
*
workerPrivate
=
GetCurrentThreadWorkerPrivate
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
workerPrivate
)
;
return
workerPrivate
-
>
GetRandomTimelineSeed
(
)
;
}
}
