#
ifndef
mozilla_dom_PerformanceNavigationTiming_h___
#
define
mozilla_dom_PerformanceNavigationTiming_h___
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsITimedChannel
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceResourceTiming
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceNavigationTimingBinding
.
h
"
#
include
"
nsIHttpChannel
.
h
"
namespace
mozilla
{
namespace
dom
{
class
PerformanceNavigationTiming
final
:
public
PerformanceResourceTiming
{
public
:
NS_DECL_ISUPPORTS_INHERITED
PerformanceNavigationTiming
(
UniquePtr
<
PerformanceTimingData
>
&
&
aPerformanceTiming
Performance
*
aPerformance
const
nsAString
&
aName
)
:
PerformanceResourceTiming
(
std
:
:
move
(
aPerformanceTiming
)
aPerformance
aName
)
{
SetEntryType
(
NS_LITERAL_STRING
(
"
navigation
"
)
)
;
SetInitiatorType
(
NS_LITERAL_STRING
(
"
navigation
"
)
)
;
}
DOMHighResTimeStamp
Duration
(
)
const
override
{
return
LoadEventEnd
(
)
-
StartTime
(
)
;
}
DOMHighResTimeStamp
StartTime
(
)
const
override
{
return
0
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
DOMHighResTimeStamp
UnloadEventStart
(
)
const
;
DOMHighResTimeStamp
UnloadEventEnd
(
)
const
;
DOMHighResTimeStamp
DomInteractive
(
)
const
;
DOMHighResTimeStamp
DomContentLoadedEventStart
(
)
const
;
DOMHighResTimeStamp
DomContentLoadedEventEnd
(
)
const
;
DOMHighResTimeStamp
DomComplete
(
)
const
;
DOMHighResTimeStamp
LoadEventStart
(
)
const
;
DOMHighResTimeStamp
LoadEventEnd
(
)
const
;
NavigationType
Type
(
)
const
;
uint16_t
RedirectCount
(
)
const
;
void
UpdatePropertiesFromHttpChannel
(
nsIHttpChannel
*
aHttpChannel
nsITimedChannel
*
aChannel
)
;
static
bool
Enabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
private
:
~
PerformanceNavigationTiming
(
)
=
default
;
}
;
}
}
#
endif
