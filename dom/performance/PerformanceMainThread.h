#
ifndef
mozilla_dom_PerformanceMainThread_h
#
define
mozilla_dom_PerformanceMainThread_h
#
include
"
Performance
.
h
"
namespace
mozilla
{
namespace
dom
{
class
PerformanceMainThread
final
:
public
Performance
{
public
:
PerformanceMainThread
(
nsPIDOMWindowInner
*
aWindow
nsDOMNavigationTiming
*
aDOMTiming
nsITimedChannel
*
aChannel
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
PerformanceMainThread
Performance
)
DOMHighResTimeStamp
Now
(
)
const
override
;
virtual
PerformanceTiming
*
Timing
(
)
override
;
virtual
PerformanceNavigation
*
Navigation
(
)
override
;
virtual
void
AddEntry
(
nsIHttpChannel
*
channel
nsITimedChannel
*
timedChannel
)
override
;
TimeStamp
CreationTimeStamp
(
)
const
override
;
DOMHighResTimeStamp
CreationTime
(
)
const
override
;
virtual
void
GetMozMemory
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
override
;
virtual
nsDOMNavigationTiming
*
GetDOMTiming
(
)
const
override
{
return
mDOMTiming
;
}
virtual
nsITimedChannel
*
GetChannel
(
)
const
override
{
return
mChannel
;
}
protected
:
~
PerformanceMainThread
(
)
;
nsISupports
*
GetAsISupports
(
)
override
{
return
this
;
}
void
InsertUserEntry
(
PerformanceEntry
*
aEntry
)
override
;
bool
IsPerformanceTimingAttribute
(
const
nsAString
&
aName
)
override
;
DOMHighResTimeStamp
GetPerformanceTimingFromString
(
const
nsAString
&
aTimingName
)
override
;
void
DispatchBufferFullEvent
(
)
override
;
RefPtr
<
nsDOMNavigationTiming
>
mDOMTiming
;
nsCOMPtr
<
nsITimedChannel
>
mChannel
;
RefPtr
<
PerformanceTiming
>
mTiming
;
RefPtr
<
PerformanceNavigation
>
mNavigation
;
JS
:
:
Heap
<
JSObject
*
>
mMozMemory
;
}
;
}
}
#
endif
