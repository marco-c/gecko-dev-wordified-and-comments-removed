#
ifndef
mozilla_dom_PerformanceTiming_h
#
define
mozilla_dom_PerformanceTiming_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
Performance
.
h
"
#
include
"
nsITimedChannel
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceTimingTypes
.
h
"
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
ipc
/
IPCMessageUtilsSpecializations
.
h
"
#
include
"
mozilla
/
net
/
nsServerTiming
.
h
"
class
nsIHttpChannel
;
namespace
mozilla
:
:
dom
{
class
PerformanceTiming
;
enum
class
RenderBlockingStatusType
:
uint8_t
;
class
PerformanceTimingData
final
{
friend
class
PerformanceTiming
;
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
mozilla
:
:
dom
:
:
PerformanceTimingData
>
;
public
:
PerformanceTimingData
(
)
=
default
;
static
PerformanceTimingData
*
Create
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
nsAString
&
aInitiatorType
nsAString
&
aEntryName
)
;
PerformanceTimingData
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
;
explicit
PerformanceTimingData
(
const
IPCPerformanceTimingData
&
aIPCData
)
;
IPCPerformanceTimingData
ToIPC
(
)
;
void
SetPropertiesFromHttpChannel
(
nsIHttpChannel
*
aHttpChannel
nsITimedChannel
*
aChannel
)
;
bool
IsInitialized
(
)
const
{
return
mInitialized
;
}
const
nsString
&
NextHopProtocol
(
)
const
{
return
mNextHopProtocol
;
}
uint64_t
TransferSize
(
)
const
{
return
mTransferSize
;
}
uint64_t
EncodedBodySize
(
)
const
{
return
mEncodedBodySize
;
}
uint64_t
DecodedBodySize
(
)
const
{
return
mDecodedBodySize
;
}
const
nsString
&
ContentType
(
)
const
{
return
mContentType
;
}
inline
DOMHighResTimeStamp
TimeStampToReducedDOMHighResOrFetchStart
(
Performance
*
aPerformance
TimeStamp
aStamp
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
aStamp
.
IsNull
(
)
)
{
return
FetchStartHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawTimestamp
=
TimeStampToDOMHighRes
(
aPerformance
aStamp
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawTimestamp
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
inline
DOMHighResTimeStamp
TimeStampToDOMHighRes
(
Performance
*
aPerformance
TimeStamp
aStamp
)
const
{
MOZ_ASSERT
(
aPerformance
)
;
MOZ_ASSERT
(
!
aStamp
.
IsNull
(
)
)
;
TimeDuration
duration
=
aStamp
-
aPerformance
-
>
CreationTimeStamp
(
)
;
return
duration
.
ToMilliseconds
(
)
+
mZeroTime
;
}
DOMHighResTimeStamp
AsyncOpenHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
WorkerStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
FetchStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RedirectStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RedirectEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
DomainLookupStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
DomainLookupEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ConnectStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
SecureConnectionStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ConnectEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RequestStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ResponseStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ResponseEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ZeroTime
(
)
const
{
return
mZeroTime
;
}
uint8_t
RedirectCountReal
(
)
const
{
return
mRedirectCount
;
}
uint8_t
GetRedirectCount
(
)
const
;
bool
AllRedirectsSameOrigin
(
)
const
{
return
mAllRedirectsSameOrigin
;
}
bool
ShouldReportCrossOriginRedirect
(
bool
aEnsureSameOriginAndIgnoreTAO
)
const
;
nsITimedChannel
:
:
BodyInfoAccess
BodyInfoAccessAllowed
(
)
const
{
return
mBodyInfoAccessAllowed
;
}
bool
TimingAllowed
(
)
const
{
return
mTimingAllowed
;
}
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
GetServerTiming
(
)
;
RenderBlockingStatusType
RenderBlockingStatus
(
)
const
{
return
mRenderBlockingStatus
;
}
private
:
nsITimedChannel
:
:
BodyInfoAccess
CheckBodyInfoAccessAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
;
bool
CheckTimingAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
;
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
mServerTiming
;
nsString
mNextHopProtocol
;
TimeStamp
mAsyncOpen
;
TimeStamp
mRedirectStart
;
TimeStamp
mRedirectEnd
;
TimeStamp
mDomainLookupStart
;
TimeStamp
mDomainLookupEnd
;
TimeStamp
mConnectStart
;
TimeStamp
mSecureConnectionStart
;
TimeStamp
mConnectEnd
;
TimeStamp
mRequestStart
;
TimeStamp
mResponseStart
;
TimeStamp
mCacheReadStart
;
TimeStamp
mResponseEnd
;
TimeStamp
mCacheReadEnd
;
TimeStamp
mWorkerStart
;
TimeStamp
mWorkerRequestStart
;
TimeStamp
mWorkerResponseEnd
;
DOMHighResTimeStamp
mZeroTime
=
0
;
DOMHighResTimeStamp
mFetchStart
=
0
;
uint64_t
mEncodedBodySize
=
0
;
uint64_t
mTransferSize
=
0
;
uint64_t
mDecodedBodySize
=
0
;
uint8_t
mRedirectCount
=
0
;
RenderBlockingStatusType
mRenderBlockingStatus
;
nsString
mContentType
;
bool
mAllRedirectsSameOrigin
=
false
;
bool
mAllRedirectsPassTAO
=
false
;
bool
mSecureConnection
=
false
;
nsITimedChannel
:
:
BodyInfoAccess
mBodyInfoAccessAllowed
=
nsITimedChannel
:
:
BodyInfoAccess
:
:
DISALLOWED
;
bool
mTimingAllowed
=
false
;
bool
mInitialized
=
false
;
}
;
class
PerformanceTiming
final
:
public
nsWrapperCache
{
public
:
PerformanceTiming
(
Performance
*
aPerformance
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
PerformanceTiming
)
NS_DECL_CYCLE_COLLECTION_NATIVE_WRAPPERCACHE_CLASS
(
PerformanceTiming
)
nsDOMNavigationTiming
*
GetDOMTiming
(
)
const
{
return
mPerformance
-
>
GetDOMTiming
(
)
;
}
Performance
*
GetParentObject
(
)
const
{
return
mPerformance
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
DOMTimeMilliSec
NavigationStart
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetNavigationStart
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
UnloadEventStart
(
)
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetUnloadEventStart
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
UnloadEventEnd
(
)
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetUnloadEventEnd
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
FetchStart
(
)
;
DOMTimeMilliSec
RedirectStart
(
)
;
DOMTimeMilliSec
RedirectEnd
(
)
;
DOMTimeMilliSec
DomainLookupStart
(
)
;
DOMTimeMilliSec
DomainLookupEnd
(
)
;
DOMTimeMilliSec
ConnectStart
(
)
;
DOMTimeMilliSec
SecureConnectionStart
(
)
;
DOMTimeMilliSec
ConnectEnd
(
)
;
DOMTimeMilliSec
RequestStart
(
)
;
DOMTimeMilliSec
ResponseStart
(
)
;
DOMTimeMilliSec
ResponseEnd
(
)
;
DOMTimeMilliSec
DomLoading
(
)
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomLoading
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
DomInteractive
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomInteractive
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
DomContentLoadedEventStart
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventStart
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
DomContentLoadedEventEnd
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventEnd
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
DomComplete
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomComplete
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
LoadEventStart
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetLoadEventStart
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
LoadEventEnd
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetLoadEventEnd
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
TimeToNonBlankPaint
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetTimeToNonBlankPaint
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
TimeToContentfulPaint
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetTimeToContentfulComposite
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
TimeToDOMContentFlushed
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetTimeToDOMContentFlushed
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
TimeToFirstInteractive
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetTimeToTTFI
(
)
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
PerformanceTimingData
*
Data
(
)
const
{
return
mTimingData
.
get
(
)
;
}
private
:
~
PerformanceTiming
(
)
;
bool
IsTopLevelContentDocument
(
)
const
;
RefPtr
<
Performance
>
mPerformance
;
UniquePtr
<
PerformanceTimingData
>
mTimingData
;
}
;
}
namespace
mozilla
:
:
ipc
{
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
dom
:
:
PerformanceTimingData
>
{
using
paramType
=
mozilla
:
:
dom
:
:
PerformanceTimingData
;
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
aParam
.
mServerTiming
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mNextHopProtocol
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mAsyncOpen
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mRedirectStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mRedirectEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mDomainLookupStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mDomainLookupEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mConnectStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mSecureConnectionStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mConnectEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mRequestStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mResponseStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mCacheReadStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mResponseEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mCacheReadEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mWorkerStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mWorkerRequestStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mWorkerResponseEnd
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mZeroTime
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mFetchStart
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mEncodedBodySize
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mTransferSize
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mDecodedBodySize
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mRedirectCount
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mContentType
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mAllRedirectsSameOrigin
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mAllRedirectsPassTAO
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mSecureConnection
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mBodyInfoAccessAllowed
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mTimingAllowed
)
;
WriteIPDLParam
(
aWriter
aActor
aParam
.
mInitialized
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
paramType
*
aResult
)
{
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mServerTiming
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mNextHopProtocol
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mAsyncOpen
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mRedirectStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mRedirectEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mDomainLookupStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mDomainLookupEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mConnectStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mSecureConnectionStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mConnectEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mRequestStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mResponseStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mCacheReadStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mResponseEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mCacheReadEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mWorkerStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mWorkerRequestStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mWorkerResponseEnd
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mZeroTime
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mFetchStart
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mEncodedBodySize
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mTransferSize
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mDecodedBodySize
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mRedirectCount
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mContentType
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mAllRedirectsSameOrigin
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mAllRedirectsPassTAO
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mSecureConnection
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mBodyInfoAccessAllowed
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mTimingAllowed
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mInitialized
)
)
{
return
false
;
}
return
true
;
}
}
;
template
<
>
struct
IPDLParamTraits
<
nsIServerTiming
*
>
{
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
nsIServerTiming
*
aParam
)
{
nsAutoCString
name
;
Unused
<
<
aParam
-
>
GetName
(
name
)
;
double
duration
=
0
;
Unused
<
<
aParam
-
>
GetDuration
(
&
duration
)
;
nsAutoCString
description
;
Unused
<
<
aParam
-
>
GetDescription
(
description
)
;
WriteIPDLParam
(
aWriter
aActor
name
)
;
WriteIPDLParam
(
aWriter
aActor
duration
)
;
WriteIPDLParam
(
aWriter
aActor
description
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
RefPtr
<
nsIServerTiming
>
*
aResult
)
{
nsAutoCString
name
;
double
duration
;
nsAutoCString
description
;
if
(
!
ReadIPDLParam
(
aReader
aActor
&
name
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
duration
)
)
{
return
false
;
}
if
(
!
ReadIPDLParam
(
aReader
aActor
&
description
)
)
{
return
false
;
}
RefPtr
<
nsServerTiming
>
timing
=
new
nsServerTiming
(
)
;
timing
-
>
SetName
(
name
)
;
timing
-
>
SetDuration
(
duration
)
;
timing
-
>
SetDescription
(
description
)
;
*
aResult
=
timing
.
forget
(
)
;
return
true
;
}
}
;
}
#
endif
