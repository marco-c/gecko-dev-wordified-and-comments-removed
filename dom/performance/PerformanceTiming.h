#
ifndef
mozilla_dom_PerformanceTiming_h
#
define
mozilla_dom_PerformanceTiming_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
Performance
.
h
"
class
nsIHttpChannel
;
class
nsITimedChannel
;
namespace
mozilla
{
namespace
dom
{
class
PerformanceTiming
;
class
PerformanceTimingData
final
{
friend
class
PerformanceTiming
;
public
:
static
PerformanceTimingData
*
Create
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
nsAString
&
aInitiatorType
nsAString
&
aEntryName
)
;
PerformanceTimingData
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
;
void
SetPropertiesFromHttpChannel
(
nsIHttpChannel
*
aHttpChannel
)
;
bool
IsInitialized
(
)
const
{
return
mInitialized
;
}
const
nsString
&
NextHopProtocol
(
)
const
{
return
mNextHopProtocol
;
}
uint64_t
TransferSize
(
)
const
{
return
mTimingAllowed
?
mTransferSize
:
0
;
}
uint64_t
EncodedBodySize
(
)
const
{
return
mTimingAllowed
?
mEncodedBodySize
:
0
;
}
uint64_t
DecodedBodySize
(
)
const
{
return
mTimingAllowed
?
mDecodedBodySize
:
0
;
}
inline
DOMHighResTimeStamp
TimeStampToReducedDOMHighResOrFetchStart
(
Performance
*
aPerformance
TimeStamp
aStamp
)
{
MOZ_ASSERT
(
aPerformance
)
;
return
(
!
aStamp
.
IsNull
(
)
)
?
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
TimeStampToDOMHighRes
(
aPerformance
aStamp
)
)
:
FetchStartHighRes
(
aPerformance
)
;
}
inline
DOMHighResTimeStamp
TimeStampToDOMHighRes
(
Performance
*
aPerformance
TimeStamp
aStamp
)
const
{
MOZ_ASSERT
(
aPerformance
)
;
MOZ_ASSERT
(
!
aStamp
.
IsNull
(
)
)
;
TimeDuration
duration
=
aStamp
-
aPerformance
-
>
CreationTimeStamp
(
)
;
return
duration
.
ToMilliseconds
(
)
+
mZeroTime
;
}
DOMHighResTimeStamp
AsyncOpenHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
WorkerStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
FetchStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RedirectStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RedirectEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
DomainLookupStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
DomainLookupEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ConnectStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
SecureConnectionStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ConnectEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
RequestStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ResponseStartHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ResponseEndHighRes
(
Performance
*
aPerformance
)
;
DOMHighResTimeStamp
ZeroTime
(
)
const
{
return
mZeroTime
;
}
uint8_t
RedirectCountReal
(
)
const
{
return
mRedirectCount
;
}
uint8_t
GetRedirectCount
(
)
const
;
bool
AllRedirectsSameOrigin
(
)
const
{
return
mAllRedirectsSameOrigin
;
}
bool
ShouldReportCrossOriginRedirect
(
)
const
;
bool
TimingAllowed
(
)
const
{
return
mTimingAllowed
;
}
private
:
bool
CheckAllowedOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
;
nsString
mNextHopProtocol
;
TimeStamp
mAsyncOpen
;
TimeStamp
mRedirectStart
;
TimeStamp
mRedirectEnd
;
TimeStamp
mDomainLookupStart
;
TimeStamp
mDomainLookupEnd
;
TimeStamp
mConnectStart
;
TimeStamp
mSecureConnectionStart
;
TimeStamp
mConnectEnd
;
TimeStamp
mRequestStart
;
TimeStamp
mResponseStart
;
TimeStamp
mCacheReadStart
;
TimeStamp
mResponseEnd
;
TimeStamp
mCacheReadEnd
;
TimeStamp
mWorkerStart
;
TimeStamp
mWorkerRequestStart
;
TimeStamp
mWorkerResponseEnd
;
DOMHighResTimeStamp
mZeroTime
;
DOMHighResTimeStamp
mFetchStart
;
uint64_t
mEncodedBodySize
;
uint64_t
mTransferSize
;
uint64_t
mDecodedBodySize
;
uint8_t
mRedirectCount
;
bool
mAllRedirectsSameOrigin
;
bool
mReportCrossOriginRedirect
;
bool
mSecureConnection
;
bool
mTimingAllowed
;
bool
mInitialized
;
}
;
class
PerformanceTiming
final
:
public
nsWrapperCache
{
public
:
PerformanceTiming
(
Performance
*
aPerformance
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
PerformanceTiming
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
PerformanceTiming
)
nsDOMNavigationTiming
*
GetDOMTiming
(
)
const
{
return
mPerformance
-
>
GetDOMTiming
(
)
;
}
Performance
*
GetParentObject
(
)
const
{
return
mPerformance
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
DOMTimeMilliSec
NavigationStart
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetNavigationStart
(
)
)
;
}
DOMTimeMilliSec
UnloadEventStart
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetUnloadEventStart
(
)
)
;
}
DOMTimeMilliSec
UnloadEventEnd
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetUnloadEventEnd
(
)
)
;
}
DOMTimeMilliSec
FetchStart
(
)
;
DOMTimeMilliSec
RedirectStart
(
)
;
DOMTimeMilliSec
RedirectEnd
(
)
;
DOMTimeMilliSec
DomainLookupStart
(
)
;
DOMTimeMilliSec
DomainLookupEnd
(
)
;
DOMTimeMilliSec
ConnectStart
(
)
;
DOMTimeMilliSec
SecureConnectionStart
(
)
;
DOMTimeMilliSec
ConnectEnd
(
)
;
DOMTimeMilliSec
RequestStart
(
)
;
DOMTimeMilliSec
ResponseStart
(
)
;
DOMTimeMilliSec
ResponseEnd
(
)
;
DOMTimeMilliSec
DomLoading
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomLoading
(
)
)
;
}
DOMTimeMilliSec
DomInteractive
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomInteractive
(
)
)
;
}
DOMTimeMilliSec
DomContentLoadedEventStart
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventStart
(
)
)
;
}
DOMTimeMilliSec
DomContentLoadedEventEnd
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventEnd
(
)
)
;
}
DOMTimeMilliSec
DomComplete
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetDomComplete
(
)
)
;
}
DOMTimeMilliSec
LoadEventStart
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetLoadEventStart
(
)
)
;
}
DOMTimeMilliSec
LoadEventEnd
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetLoadEventEnd
(
)
)
;
}
DOMTimeMilliSec
TimeToNonBlankPaint
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
return
0
;
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
GetDOMTiming
(
)
-
>
GetTimeToNonBlankPaint
(
)
)
;
}
PerformanceTimingData
*
Data
(
)
const
{
return
mTimingData
.
get
(
)
;
}
private
:
~
PerformanceTiming
(
)
;
bool
IsTopLevelContentDocument
(
)
const
;
RefPtr
<
Performance
>
mPerformance
;
UniquePtr
<
PerformanceTimingData
>
mTimingData
;
}
;
}
}
#
endif
