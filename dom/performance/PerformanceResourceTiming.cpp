#
include
"
PerformanceResourceTiming
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceResourceTimingBinding
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsArrayUtils
.
h
"
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PerformanceResourceTiming
)
NS_INTERFACE_MAP_END_INHERITING
(
PerformanceEntry
)
NS_IMPL_ADDREF_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
NS_IMPL_RELEASE_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
PerformanceResourceTiming
:
:
PerformanceResourceTiming
(
UniquePtr
<
PerformanceTimingData
>
&
&
aPerformanceTiming
Performance
*
aPerformance
const
nsAString
&
aName
)
:
PerformanceEntry
(
aPerformance
-
>
GetParentObject
(
)
aName
u
"
resource
"
_ns
)
mTimingData
(
std
:
:
move
(
aPerformanceTiming
)
)
mPerformance
(
aPerformance
)
{
MOZ_RELEASE_ASSERT
(
mTimingData
)
;
MOZ_ASSERT
(
aPerformance
"
Parent
performance
object
should
be
provided
"
)
;
if
(
NS_IsMainThread
(
)
)
{
NS_NewURI
(
getter_AddRefs
(
mOriginalURI
)
aName
)
;
}
}
PerformanceResourceTiming
:
:
~
PerformanceResourceTiming
(
)
=
default
;
DOMHighResTimeStamp
PerformanceResourceTiming
:
:
StartTime
(
)
const
{
if
(
mCachedStartTime
.
isNothing
(
)
)
{
DOMHighResTimeStamp
redirect
=
mTimingData
-
>
RedirectStartHighRes
(
mPerformance
)
;
redirect
=
redirect
?
redirect
:
DBL_MAX
;
DOMHighResTimeStamp
worker
=
mTimingData
-
>
WorkerStartHighRes
(
mPerformance
)
;
worker
=
worker
?
worker
:
DBL_MAX
;
DOMHighResTimeStamp
asyncOpen
=
mTimingData
-
>
AsyncOpenHighRes
(
mPerformance
)
;
mCachedStartTime
.
emplace
(
std
:
:
min
(
asyncOpen
std
:
:
min
(
redirect
worker
)
)
)
;
}
return
mCachedStartTime
.
value
(
)
;
}
JSObject
*
PerformanceResourceTiming
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PerformanceResourceTiming_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
size_t
PerformanceResourceTiming
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
PerformanceResourceTiming
:
:
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
PerformanceEntry
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
+
mInitiatorType
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
+
mTimingData
-
>
NextHopProtocol
(
)
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
}
void
PerformanceResourceTiming
:
:
GetServerTiming
(
nsTArray
<
RefPtr
<
PerformanceServerTiming
>
>
&
aRetval
Maybe
<
nsIPrincipal
*
>
&
aSubjectPrincipal
)
{
aRetval
.
Clear
(
)
;
if
(
!
TimingAllowedForCaller
(
aSubjectPrincipal
)
)
{
return
;
}
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
serverTimingArray
=
mTimingData
-
>
GetServerTiming
(
)
;
uint32_t
length
=
serverTimingArray
.
Length
(
)
;
for
(
uint32_t
index
=
0
;
index
<
length
;
+
+
index
)
{
nsCOMPtr
<
nsIServerTiming
>
serverTiming
=
serverTimingArray
.
ElementAt
(
index
)
;
MOZ_ASSERT
(
serverTiming
)
;
aRetval
.
AppendElement
(
new
PerformanceServerTiming
(
GetParentObject
(
)
serverTiming
)
)
;
}
}
bool
PerformanceResourceTiming
:
:
TimingAllowedForCaller
(
Maybe
<
nsIPrincipal
*
>
&
aCaller
)
const
{
if
(
mTimingData
-
>
TimingAllowed
(
)
)
{
return
true
;
}
return
mOriginalURI
&
&
aCaller
.
isSome
(
)
&
&
BasePrincipal
:
:
Cast
(
aCaller
.
value
(
)
)
-
>
AddonAllowsLoad
(
mOriginalURI
)
;
}
bool
PerformanceResourceTiming
:
:
ReportRedirectForCaller
(
Maybe
<
nsIPrincipal
*
>
&
aCaller
bool
aEnsureSameOriginAndIgnoreTAO
)
const
{
if
(
mTimingData
-
>
ShouldReportCrossOriginRedirect
(
aEnsureSameOriginAndIgnoreTAO
)
)
{
return
true
;
}
return
aCaller
.
isSome
(
)
&
&
BasePrincipal
:
:
Cast
(
aCaller
.
value
(
)
)
-
>
AddonHasPermission
(
nsGkAtoms
:
:
all_urlsPermission
)
;
}
