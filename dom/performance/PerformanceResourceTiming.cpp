#
include
"
PerformanceResourceTiming
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceResourceTimingBinding
.
h
"
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PerformanceResourceTiming
)
NS_INTERFACE_MAP_END_INHERITING
(
PerformanceEntry
)
NS_IMPL_ADDREF_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
NS_IMPL_RELEASE_INHERITED
(
PerformanceResourceTiming
PerformanceEntry
)
PerformanceResourceTiming
:
:
PerformanceResourceTiming
(
UniquePtr
<
PerformanceTimingData
>
&
&
aPerformanceTiming
Performance
*
aPerformance
const
nsAString
&
aName
)
:
PerformanceEntry
(
aPerformance
-
>
GetParentObject
(
)
aName
NS_LITERAL_STRING
(
"
resource
"
)
)
mTimingData
(
Move
(
aPerformanceTiming
)
)
mPerformance
(
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
"
Parent
performance
object
should
be
provided
"
)
;
}
PerformanceResourceTiming
:
:
~
PerformanceResourceTiming
(
)
{
}
DOMHighResTimeStamp
PerformanceResourceTiming
:
:
StartTime
(
)
const
{
DOMHighResTimeStamp
redirect
=
mTimingData
-
>
RedirectStartHighRes
(
mPerformance
)
;
redirect
=
redirect
?
redirect
:
DBL_MAX
;
DOMHighResTimeStamp
worker
=
mTimingData
-
>
WorkerStartHighRes
(
mPerformance
)
;
worker
=
worker
?
worker
:
DBL_MAX
;
DOMHighResTimeStamp
asyncOpen
=
mTimingData
-
>
AsyncOpenHighRes
(
mPerformance
)
;
return
std
:
:
min
(
asyncOpen
std
:
:
min
(
redirect
worker
)
)
;
}
JSObject
*
PerformanceResourceTiming
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PerformanceResourceTimingBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
size_t
PerformanceResourceTiming
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
PerformanceResourceTiming
:
:
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
PerformanceEntry
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
+
mInitiatorType
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
+
(
mTimingData
?
mTimingData
-
>
NextHopProtocol
(
)
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
:
0
)
;
}
