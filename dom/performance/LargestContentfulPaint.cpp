#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
"
Performance
.
h
"
#
include
"
imgRequest
.
h
"
#
include
"
PerformanceMainThread
.
h
"
#
include
"
LargestContentfulPaint
.
h
"
#
include
"
mozilla
/
dom
/
DOMIntersectionObserver
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
nsVideoFrame
.
h
"
namespace
mozilla
:
:
dom
{
static
LazyLogModule
gLCPLogging
(
"
LargestContentfulPaint
"
)
;
#
define
LOG
(
.
.
.
)
MOZ_LOG
(
gLCPLogging
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
LargestContentfulPaint
PerformanceEntry
mPerformance
mURI
mElement
mLCPImageEntryKey
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
LargestContentfulPaint
)
NS_INTERFACE_MAP_END_INHERITING
(
PerformanceEntry
)
NS_IMPL_ADDREF_INHERITED
(
LargestContentfulPaint
PerformanceEntry
)
NS_IMPL_RELEASE_INHERITED
(
LargestContentfulPaint
PerformanceEntry
)
static
double
GetAreaInDoublePixelsFromAppUnits
(
const
nsSize
&
aSize
)
{
return
NSAppUnitsToDoublePixels
(
aSize
.
Width
(
)
AppUnitsPerCSSPixel
(
)
)
*
NSAppUnitsToDoublePixels
(
aSize
.
Height
(
)
AppUnitsPerCSSPixel
(
)
)
;
}
static
double
GetAreaInDoublePixelsFromAppUnits
(
const
nsRect
&
aRect
)
{
return
NSAppUnitsToDoublePixels
(
aRect
.
Width
(
)
AppUnitsPerCSSPixel
(
)
)
*
NSAppUnitsToDoublePixels
(
aRect
.
Height
(
)
AppUnitsPerCSSPixel
(
)
)
;
}
ImagePendingRendering
:
:
ImagePendingRendering
(
const
LCPImageEntryKey
&
aLCPImageEntryKey
DOMHighResTimeStamp
aLoadTime
)
:
mLCPImageEntryKey
(
aLCPImageEntryKey
)
mLoadTime
(
aLoadTime
)
{
}
LargestContentfulPaint
:
:
LargestContentfulPaint
(
PerformanceMainThread
*
aPerformance
const
DOMHighResTimeStamp
aRenderTime
const
DOMHighResTimeStamp
aLoadTime
const
unsigned
long
aSize
nsIURI
*
aURI
Element
*
aElement
const
Maybe
<
const
LCPImageEntryKey
>
&
aLCPImageEntryKey
)
:
PerformanceEntry
(
aPerformance
-
>
GetParentObject
(
)
u
"
"
_ns
kLargestContentfulPaintName
)
mPerformance
(
aPerformance
)
mRenderTime
(
aRenderTime
)
mLoadTime
(
aLoadTime
)
mSize
(
aSize
)
mURI
(
aURI
)
mElement
(
aElement
)
mLCPImageEntryKey
(
aLCPImageEntryKey
)
{
MOZ_ASSERT
(
mPerformance
)
;
MOZ_ASSERT
(
mElement
)
;
if
(
mElement
-
>
ChromeOnlyAccess
(
)
)
{
mElement
=
Element
:
:
FromNodeOrNull
(
aElement
-
>
FindFirstNonChromeOnlyAccessContent
(
)
)
;
}
if
(
const
Element
*
element
=
GetElement
(
)
)
{
mId
=
element
-
>
GetID
(
)
;
}
}
JSObject
*
LargestContentfulPaint
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
LargestContentfulPaint_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
Element
*
LargestContentfulPaint
:
:
GetElement
(
)
const
{
return
mElement
?
nsContentUtils
:
:
GetAnElementForTiming
(
mElement
mElement
-
>
GetComposedDoc
(
)
nullptr
)
:
nullptr
;
}
void
LargestContentfulPaint
:
:
BufferEntryIfNeeded
(
)
{
mPerformance
-
>
BufferLargestContentfulPaintEntryIfNeeded
(
this
)
;
}
bool
LCPHelpers
:
:
IsQualifiedImageRequest
(
imgRequest
*
aRequest
Element
*
aContainingElement
)
{
MOZ_ASSERT
(
aContainingElement
)
;
if
(
!
aRequest
)
{
return
false
;
}
if
(
aRequest
-
>
IsChrome
(
)
)
{
return
false
;
}
if
(
!
aContainingElement
-
>
ChromeOnlyAccess
(
)
)
{
return
true
;
}
if
(
nsIContent
*
parent
=
aContainingElement
-
>
GetParent
(
)
)
{
nsVideoFrame
*
videoFrame
=
do_QueryFrame
(
parent
-
>
GetPrimaryFrame
(
)
)
;
if
(
videoFrame
&
&
videoFrame
-
>
GetPosterImage
(
)
=
=
aContainingElement
)
{
return
true
;
}
}
if
(
aContainingElement
-
>
IsInNativeAnonymousSubtree
(
)
)
{
if
(
nsINode
*
rootParentOrHost
=
aContainingElement
-
>
GetClosestNativeAnonymousSubtreeRootParentOrHost
(
)
)
{
if
(
!
rootParentOrHost
-
>
ChromeOnlyAccess
(
)
)
{
return
true
;
}
}
}
return
false
;
}
void
LargestContentfulPaint
:
:
MaybeProcessImageForElementTiming
(
imgRequestProxy
*
aRequest
Element
*
aElement
)
{
if
(
!
StaticPrefs
:
:
dom_enable_largest_contentful_paint
(
)
)
{
return
;
}
MOZ_ASSERT
(
aRequest
)
;
imgRequest
*
request
=
aRequest
-
>
GetOwner
(
)
;
if
(
!
LCPHelpers
:
:
IsQualifiedImageRequest
(
request
aElement
)
)
{
return
;
}
Document
*
document
=
aElement
-
>
GetComposedDoc
(
)
;
if
(
!
document
)
{
return
;
}
nsPresContext
*
pc
=
aElement
-
>
GetPresContext
(
Element
:
:
PresContextFor
:
:
eForComposedDoc
)
;
if
(
!
pc
)
{
return
;
}
PerformanceMainThread
*
performance
=
pc
-
>
GetPerformanceMainThread
(
)
;
if
(
!
performance
)
{
return
;
}
if
(
MOZ_UNLIKELY
(
MOZ_LOG_TEST
(
gLCPLogging
LogLevel
:
:
Debug
)
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aRequest
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
LOG
(
"
MaybeProcessImageForElementTiming
Element
=
%
p
URI
=
%
s
"
"
performance
=
%
p
"
aElement
uri
?
uri
-
>
GetSpecOrDefault
(
)
.
get
(
)
:
"
"
performance
)
;
}
const
LCPImageEntryKey
entryKey
=
LCPImageEntryKey
(
aElement
aRequest
)
;
if
(
!
document
-
>
ContentIdentifiersForLCP
(
)
.
EnsureInserted
(
entryKey
)
)
{
LOG
(
"
The
content
identifier
existed
for
element
=
%
p
and
request
=
%
p
"
"
return
.
"
aElement
aRequest
)
;
return
;
}
#
ifdef
DEBUG
uint32_t
status
=
imgIRequest
:
:
STATUS_NONE
;
aRequest
-
>
GetImageStatus
(
&
status
)
;
MOZ_ASSERT
(
status
&
imgIRequest
:
:
STATUS_LOAD_COMPLETE
)
;
#
endif
DOMHighResTimeStamp
nowTime
=
performance
-
>
TimeStampToDOMHighResForRendering
(
TimeStamp
:
:
Now
(
)
)
;
if
(
!
request
-
>
IsData
(
)
&
&
!
request
-
>
ShouldReportRenderTimeForLCP
(
)
)
{
LOG
(
"
Added
a
pending
image
rendering
(
TAO
FAILED
)
"
)
;
LCPHelpers
:
:
CreateLCPEntryForImage
(
performance
aElement
aRequest
nowTime
0
entryKey
)
;
return
;
}
LOG
(
"
Added
a
pending
image
rendering
(
TAO
PASSED
)
"
)
;
performance
-
>
AddImagesPendingRendering
(
ImagePendingRendering
{
entryKey
nowTime
}
)
;
}
bool
LCPHelpers
:
:
CanFinalizeLCPEntry
(
const
nsIFrame
*
aFrame
)
{
if
(
!
StaticPrefs
:
:
dom_enable_largest_contentful_paint
(
)
)
{
return
false
;
}
if
(
!
aFrame
)
{
return
false
;
}
nsPresContext
*
presContext
=
aFrame
-
>
PresContext
(
)
;
return
!
presContext
-
>
HasStoppedGeneratingLCP
(
)
&
&
presContext
-
>
GetPerformanceMainThread
(
)
;
}
void
LCPHelpers
:
:
FinalizeLCPEntryForImage
(
Element
*
aContainingBlock
imgRequestProxy
*
aImgRequestProxy
const
nsRect
&
aTargetRectRelativeToSelf
)
{
LOG
(
"
FinalizeLCPEntryForImage
element
=
%
p
"
aContainingBlock
)
;
if
(
!
aImgRequestProxy
)
{
return
;
}
if
(
!
IsQualifiedImageRequest
(
aImgRequestProxy
-
>
GetOwner
(
)
aContainingBlock
)
)
{
return
;
}
nsIFrame
*
frame
=
aContainingBlock
-
>
GetPrimaryFrame
(
)
;
if
(
!
CanFinalizeLCPEntry
(
frame
)
)
{
return
;
}
PerformanceMainThread
*
performance
=
frame
-
>
PresContext
(
)
-
>
GetPerformanceMainThread
(
)
;
MOZ_ASSERT
(
performance
)
;
RefPtr
<
LargestContentfulPaint
>
entry
=
performance
-
>
GetImageLCPEntry
(
aContainingBlock
aImgRequestProxy
)
;
if
(
!
entry
)
{
LOG
(
"
No
Image
Entry
"
)
;
return
;
}
entry
-
>
UpdateSize
(
aContainingBlock
aTargetRectRelativeToSelf
performance
true
)
;
if
(
!
performance
-
>
UpdateLargestContentfulPaintSize
(
entry
-
>
Size
(
)
)
)
{
LOG
(
"
This
paint
(
%
lu
)
is
not
greater
than
the
largest
paint
(
%
lf
)
that
"
"
we
'
ve
"
"
reported
so
far
return
"
entry
-
>
Size
(
)
performance
-
>
GetLargestContentfulPaintSize
(
)
)
;
return
;
}
entry
-
>
QueueEntry
(
)
;
}
DOMHighResTimeStamp
LargestContentfulPaint
:
:
RenderTime
(
)
const
{
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
mRenderTime
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMHighResTimeStamp
LargestContentfulPaint
:
:
LoadTime
(
)
const
{
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
mLoadTime
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMHighResTimeStamp
LargestContentfulPaint
:
:
StartTime
(
)
const
{
DOMHighResTimeStamp
startTime
=
!
mRenderTime
?
mLoadTime
:
mRenderTime
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
startTime
mPerformance
-
>
GetRandomTimelineSeed
(
)
mPerformance
-
>
GetRTPCallerType
(
)
)
;
}
Element
*
LargestContentfulPaint
:
:
GetContainingBlockForTextFrame
(
const
nsTextFrame
*
aTextFrame
)
{
nsIFrame
*
containingFrame
=
aTextFrame
-
>
GetContainingBlock
(
)
;
MOZ_ASSERT
(
containingFrame
)
;
return
Element
:
:
FromNodeOrNull
(
containingFrame
-
>
GetContent
(
)
)
;
}
void
LargestContentfulPaint
:
:
QueueEntry
(
)
{
LOG
(
"
QueueEntry
entry
=
%
p
"
this
)
;
mPerformance
-
>
QueueLargestContentfulPaintEntry
(
this
)
;
}
void
LargestContentfulPaint
:
:
GetUrl
(
nsAString
&
aUrl
)
{
if
(
mURI
)
{
CopyUTF8toUTF16
(
mURI
-
>
GetSpecOrDefault
(
)
aUrl
)
;
}
}
void
LargestContentfulPaint
:
:
UpdateSize
(
const
Element
*
aContainingBlock
const
nsRect
&
aTargetRectRelativeToSelf
const
PerformanceMainThread
*
aPerformance
bool
aIsImage
)
{
nsIFrame
*
frame
=
aContainingBlock
-
>
GetPrimaryFrame
(
)
;
MOZ_ASSERT
(
frame
)
;
nsIFrame
*
rootFrame
=
frame
-
>
PresShell
(
)
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
;
}
if
(
frame
-
>
Style
(
)
-
>
IsInOpacityZeroSubtree
(
)
)
{
LOG
(
"
Opacity
:
0
return
"
)
;
return
;
}
const
nsRect
&
visibleDimensions
=
aTargetRectRelativeToSelf
;
nsRect
clientContentRect
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
frame
visibleDimensions
rootFrame
)
;
IntersectionInput
input
=
DOMIntersectionObserver
:
:
ComputeInput
(
*
frame
-
>
PresContext
(
)
-
>
Document
(
)
rootFrame
-
>
GetContent
(
)
nullptr
)
;
const
IntersectionOutput
output
=
DOMIntersectionObserver
:
:
Intersect
(
input
*
aContainingBlock
)
;
Maybe
<
nsRect
>
intersectionRect
=
output
.
mIntersectionRect
;
if
(
intersectionRect
.
isNothing
(
)
)
{
LOG
(
"
The
intersectionRect
is
nothing
for
Element
=
%
p
.
return
.
"
aContainingBlock
)
;
return
;
}
Maybe
<
nsRect
>
intersectionWithContentRect
=
clientContentRect
.
EdgeInclusiveIntersection
(
intersectionRect
.
value
(
)
)
;
if
(
intersectionWithContentRect
.
isNothing
(
)
)
{
LOG
(
"
The
intersectionWithContentRect
is
nothing
for
Element
=
%
p
.
return
.
"
aContainingBlock
)
;
return
;
}
nsRect
renderedRect
=
intersectionWithContentRect
.
value
(
)
;
double
area
=
GetAreaInDoublePixelsFromAppUnits
(
renderedRect
)
;
double
viewport
=
GetAreaInDoublePixelsFromAppUnits
(
input
.
mRootRect
)
;
LOG
(
"
Viewport
=
%
f
RenderRect
=
%
f
.
"
viewport
area
)
;
if
(
area
>
=
viewport
)
{
LOG
(
"
The
renderedRect
is
at
least
same
as
the
area
of
the
"
"
viewport
for
Element
=
%
p
return
.
"
aContainingBlock
)
;
return
;
}
Maybe
<
nsSize
>
intrinsicSize
=
frame
-
>
GetIntrinsicSize
(
)
.
ToSize
(
)
;
const
bool
hasIntrinsicSize
=
intrinsicSize
&
&
!
intrinsicSize
-
>
IsEmpty
(
)
;
if
(
aIsImage
&
&
hasIntrinsicSize
)
{
double
naturalArea
=
GetAreaInDoublePixelsFromAppUnits
(
intrinsicSize
.
value
(
)
)
;
LOG
(
"
naturalArea
=
%
f
"
naturalArea
)
;
double
boundingClientArea
=
NSAppUnitsToDoublePixels
(
clientContentRect
.
Width
(
)
AppUnitsPerCSSPixel
(
)
)
*
NSAppUnitsToDoublePixels
(
clientContentRect
.
Height
(
)
AppUnitsPerCSSPixel
(
)
)
;
LOG
(
"
boundingClientArea
=
%
f
"
boundingClientArea
)
;
double
scaleFactor
=
boundingClientArea
/
naturalArea
;
LOG
(
"
scaleFactor
=
%
f
"
scaleFactor
)
;
if
(
scaleFactor
>
1
)
{
LOG
(
"
area
before
sacled
doown
%
f
"
area
)
;
area
=
area
/
scaleFactor
;
}
}
MOZ_ASSERT
(
!
mSize
)
;
mSize
=
area
;
}
void
LCPTextFrameHelper
:
:
MaybeUnionTextFrame
(
nsTextFrame
*
aTextFrame
const
nsRect
&
aRelativeToSelfRect
)
{
if
(
!
StaticPrefs
:
:
dom_enable_largest_contentful_paint
(
)
|
|
aTextFrame
-
>
PresContext
(
)
-
>
HasStoppedGeneratingLCP
(
)
)
{
return
;
}
Element
*
containingBlock
=
LargestContentfulPaint
:
:
GetContainingBlockForTextFrame
(
aTextFrame
)
;
if
(
!
containingBlock
|
|
containingBlock
-
>
HasFlag
(
ELEMENT_PROCESSED_BY_LCP_FOR_TEXT
)
|
|
containingBlock
-
>
ChromeOnlyAccess
(
)
)
{
return
;
}
MOZ_ASSERT
(
containingBlock
-
>
GetPrimaryFrame
(
)
)
;
PerformanceMainThread
*
perf
=
aTextFrame
-
>
PresContext
(
)
-
>
GetPerformanceMainThread
(
)
;
if
(
!
perf
)
{
return
;
}
auto
&
unionRect
=
perf
-
>
GetTextFrameUnions
(
)
.
LookupOrInsert
(
containingBlock
)
;
unionRect
=
unionRect
.
Union
(
aRelativeToSelfRect
)
;
}
void
LCPHelpers
:
:
CreateLCPEntryForImage
(
PerformanceMainThread
*
aPerformance
Element
*
aElement
imgRequestProxy
*
aRequestProxy
const
DOMHighResTimeStamp
aLoadTime
const
DOMHighResTimeStamp
aRenderTime
const
LCPImageEntryKey
&
aImageEntryKey
)
{
MOZ_ASSERT
(
StaticPrefs
:
:
dom_enable_largest_contentful_paint
(
)
)
;
MOZ_ASSERT
(
aRequestProxy
)
;
if
(
MOZ_UNLIKELY
(
MOZ_LOG_TEST
(
gLCPLogging
LogLevel
:
:
Debug
)
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aRequestProxy
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
LOG
(
"
CreateLCPEntryForImage
"
"
Element
=
%
p
aRequestProxy
=
%
p
URI
=
%
s
loadTime
=
%
f
"
"
aRenderTime
=
%
f
\
n
"
aElement
aRequestProxy
uri
-
>
GetSpecOrDefault
(
)
.
get
(
)
aLoadTime
aRenderTime
)
;
}
MOZ_ASSERT
(
aPerformance
)
;
MOZ_ASSERT_IF
(
aRenderTime
<
aLoadTime
aRenderTime
=
=
0
)
;
if
(
aPerformance
-
>
HasDispatchedInputEvent
(
)
|
|
aPerformance
-
>
HasDispatchedScrollEvent
(
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
requestURI
;
aRequestProxy
-
>
GetURI
(
getter_AddRefs
(
requestURI
)
)
;
RefPtr
<
LargestContentfulPaint
>
entry
=
new
LargestContentfulPaint
(
aPerformance
aRenderTime
aLoadTime
0
requestURI
aElement
Some
(
aImageEntryKey
)
)
;
LOG
(
"
Upsert
a
LargestContentfulPaint
entry
=
%
p
to
LCPEntryMap
.
"
entry
.
get
(
)
)
;
aPerformance
-
>
StoreImageLCPEntry
(
aElement
aRequestProxy
entry
)
;
}
void
LCPHelpers
:
:
FinalizeLCPEntryForText
(
PerformanceMainThread
*
aPerformance
const
DOMHighResTimeStamp
aRenderTime
Element
*
aContainingBlock
const
nsRect
&
aTargetRectRelativeToSelf
const
nsPresContext
*
aPresContext
)
{
MOZ_ASSERT
(
aPerformance
)
;
LOG
(
"
FinalizeLCPEntryForText
element
=
%
p
"
aContainingBlock
)
;
if
(
!
aContainingBlock
-
>
GetPrimaryFrame
(
)
)
{
return
;
}
MOZ_ASSERT
(
CanFinalizeLCPEntry
(
aContainingBlock
-
>
GetPrimaryFrame
(
)
)
)
;
MOZ_ASSERT
(
!
aContainingBlock
-
>
HasFlag
(
ELEMENT_PROCESSED_BY_LCP_FOR_TEXT
)
)
;
MOZ_ASSERT
(
!
aContainingBlock
-
>
ChromeOnlyAccess
(
)
)
;
aContainingBlock
-
>
SetFlags
(
ELEMENT_PROCESSED_BY_LCP_FOR_TEXT
)
;
RefPtr
<
LargestContentfulPaint
>
entry
=
new
LargestContentfulPaint
(
aPerformance
aRenderTime
0
0
nullptr
aContainingBlock
Nothing
(
)
)
;
entry
-
>
UpdateSize
(
aContainingBlock
aTargetRectRelativeToSelf
aPerformance
false
)
;
if
(
!
aPerformance
-
>
UpdateLargestContentfulPaintSize
(
entry
-
>
Size
(
)
)
)
{
LOG
(
"
This
paint
(
%
lu
)
is
not
greater
than
the
largest
paint
(
%
lf
)
that
"
"
we
'
ve
"
"
reported
so
far
return
"
entry
-
>
Size
(
)
aPerformance
-
>
GetLargestContentfulPaintSize
(
)
)
;
return
;
}
entry
-
>
QueueEntry
(
)
;
}
}
