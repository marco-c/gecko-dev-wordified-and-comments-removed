#
ifndef
mozilla_dom_PerformanceObserverEntryList_h__
#
define
mozilla_dom_PerformanceObserverEntryList_h__
#
include
"
mozilla
/
dom
/
PerformanceEntryBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
struct
PerformanceEntryFilterOptions
;
class
PerformanceEntry
;
template
<
typename
T
>
class
Optional
;
class
PerformanceObserverEntryList
final
:
public
nsISupports
public
nsWrapperCache
{
~
PerformanceObserverEntryList
(
)
;
public
:
PerformanceObserverEntryList
(
nsISupports
*
aOwner
const
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aEntries
)
:
mOwner
(
aOwner
)
mEntries
(
aEntries
.
Clone
(
)
)
{
}
nsISupports
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
PerformanceObserverEntryList
)
void
GetEntries
(
const
PerformanceEntryFilterOptions
&
aFilter
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
;
void
GetEntriesByType
(
const
nsAString
&
aEntryType
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
;
void
GetEntriesByName
(
const
nsAString
&
aName
const
Optional
<
nsAString
>
&
aEntryType
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
;
private
:
nsCOMPtr
<
nsISupports
>
mOwner
;
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
mEntries
;
}
;
}
#
endif
