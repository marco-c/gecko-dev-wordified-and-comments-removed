#
ifndef
mozilla_dom_LargestContentfulPaint_h___
#
define
mozilla_dom_LargestContentfulPaint_h___
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceEntry
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceLargestContentfulPaintBinding
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
class
nsTextFrame
;
namespace
mozilla
:
:
dom
{
static
constexpr
nsLiteralString
kLargestContentfulPaintName
=
u
"
largest
-
contentful
-
paint
"
_ns
;
class
Performance
;
class
PerformanceMainThread
;
class
LargestContentfulPaint
final
:
public
PerformanceEntry
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
LargestContentfulPaint
PerformanceEntry
)
LargestContentfulPaint
(
Performance
*
aPerformance
DOMHighResTimeStamp
aRenderTime
DOMHighResTimeStamp
aLoadTime
unsigned
long
aSize
nsIURI
*
aURI
Element
*
aElement
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
DOMHighResTimeStamp
RenderTime
(
)
const
;
DOMHighResTimeStamp
LoadTime
(
)
const
;
DOMHighResTimeStamp
StartTime
(
)
const
override
;
unsigned
long
Size
(
)
const
{
return
mSize
;
}
void
GetId
(
nsAString
&
aId
)
const
{
if
(
mId
)
{
mId
-
>
ToString
(
aId
)
;
}
}
void
GetUrl
(
nsAString
&
aUrl
)
;
Element
*
GetElement
(
)
const
;
private
:
~
LargestContentfulPaint
(
)
=
default
;
RefPtr
<
PerformanceMainThread
>
mPerformance
;
DOMHighResTimeStamp
mRenderTime
;
DOMHighResTimeStamp
mLoadTime
;
unsigned
long
mSize
;
nsCOMPtr
<
nsIURI
>
mURI
;
RefPtr
<
Element
>
mElement
;
RefPtr
<
nsAtom
>
mId
;
}
;
}
#
endif
