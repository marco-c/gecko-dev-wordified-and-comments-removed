#
include
"
PerformanceInteractionMetrics
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
RandomNum
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
constexpr
uint32_t
kInteractionIdIncrement
=
7
;
constexpr
uint32_t
kMinFirstInteractionID
=
100
;
constexpr
uint32_t
kMaxFirstInteractionID
=
10000
;
constexpr
uint32_t
kNonPointerId
=
-
1
;
namespace
mozilla
:
:
dom
{
PerformanceInteractionMetrics
:
:
PerformanceInteractionMetrics
(
)
{
uint64_t
randVal
=
RandomUint64
(
)
.
valueOr
(
kMinFirstInteractionID
)
;
mCurrentInteractionValue
=
kMinFirstInteractionID
+
(
randVal
%
(
kMaxFirstInteractionID
-
kMinFirstInteractionID
+
1
)
)
;
}
uint64_t
PerformanceInteractionMetrics
:
:
IncreaseInteractionValueAndCount
(
)
{
mCurrentInteractionValue
+
=
kInteractionIdIncrement
;
mInteractionCount
+
+
;
return
mCurrentInteractionValue
;
}
Maybe
<
uint64_t
>
PerformanceInteractionMetrics
:
:
ComputeInteractionId
(
PerformanceEventTiming
*
aEventTiming
const
WidgetEvent
*
aEvent
)
{
if
(
!
aEvent
-
>
IsTrusted
(
)
)
{
return
Some
(
0
)
;
}
const
EventMessage
eventType
=
aEvent
-
>
mMessage
;
switch
(
eventType
)
{
case
eKeyDown
:
case
eKeyUp
:
case
eCompositionStart
:
case
eEditorInput
:
case
ePointerCancel
:
case
ePointerDown
:
case
ePointerUp
:
case
ePointerClick
:
break
;
default
:
return
Some
(
0
)
;
}
if
(
eventType
=
=
ePointerDown
)
{
uint32_t
pointerId
=
aEvent
-
>
AsPointerEvent
(
)
-
>
pointerId
;
mPendingPointerDowns
.
InsertOrUpdate
(
pointerId
aEventTiming
)
;
return
Nothing
(
)
;
}
if
(
eventType
=
=
eKeyDown
)
{
const
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
keyEvent
-
>
mIsComposing
)
{
return
Some
(
0
)
;
}
auto
code
=
keyEvent
-
>
mKeyCode
;
auto
entry
=
mPendingKeyDowns
.
MaybeGet
(
code
)
;
if
(
entry
)
{
if
(
code
!
=
229
)
{
uint64_t
interactionId
=
IncreaseInteractionValueAndCount
(
)
;
(
*
entry
)
-
>
SetInteractionId
(
interactionId
)
;
}
}
mPendingKeyDowns
.
InsertOrUpdate
(
code
aEventTiming
)
;
return
Nothing
(
)
;
}
if
(
eventType
=
=
eKeyUp
)
{
const
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
keyEvent
-
>
mIsComposing
)
{
return
Some
(
0
)
;
}
const
uint32_t
code
=
keyEvent
-
>
mKeyCode
;
auto
entry
=
mPendingKeyDowns
.
MaybeGet
(
code
)
;
if
(
!
entry
)
{
return
Some
(
0
)
;
}
uint64_t
interactionId
=
IncreaseInteractionValueAndCount
(
)
;
(
*
entry
)
-
>
SetInteractionId
(
interactionId
)
;
mPendingKeyDowns
.
Remove
(
code
)
;
mLastKeydownInteractionValue
=
Some
(
interactionId
)
;
return
Some
(
interactionId
)
;
}
if
(
eventType
=
=
eCompositionStart
)
{
for
(
auto
iter
=
mPendingKeyDowns
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
PerformanceEventTiming
*
entry
=
iter
.
Data
(
)
;
entry
-
>
SetInteractionId
(
0
)
;
}
mPendingKeyDowns
.
Clear
(
)
;
return
Some
(
0
)
;
}
if
(
eventType
=
=
eEditorInput
)
{
const
auto
*
inputEvent
=
aEvent
-
>
AsEditorInputEvent
(
)
;
if
(
!
inputEvent
)
{
return
Some
(
0
)
;
}
if
(
!
inputEvent
-
>
mIsComposing
)
{
return
Some
(
0
)
;
}
mLastKeydownInteractionValue
=
Nothing
(
)
;
return
Some
(
IncreaseInteractionValueAndCount
(
)
)
;
}
MOZ_ASSERT
(
eventType
=
=
ePointerCancel
|
|
eventType
=
=
ePointerUp
|
|
eventType
=
=
ePointerClick
"
Unexpected
event
type
"
)
;
const
auto
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
auto
pointerId
=
mouseEvent
-
>
pointerId
;
if
(
eventType
=
=
ePointerClick
)
{
if
(
pointerId
=
=
kNonPointerId
)
{
return
Some
(
mLastKeydownInteractionValue
.
valueOr
(
0
)
)
;
}
auto
value
=
mPointerInteractionValueMap
.
MaybeGet
(
pointerId
)
;
if
(
!
value
)
{
return
Some
(
0
)
;
}
mPointerInteractionValueMap
.
Remove
(
pointerId
)
;
return
Some
(
*
value
)
;
}
MOZ_RELEASE_ASSERT
(
eventType
=
=
ePointerUp
|
|
eventType
=
=
ePointerCancel
)
;
auto
entry
=
mPendingPointerDowns
.
MaybeGet
(
pointerId
)
;
if
(
!
entry
)
{
return
Some
(
0
)
;
}
if
(
eventType
=
=
ePointerUp
)
{
uint64_t
interactionId
=
IncreaseInteractionValueAndCount
(
)
;
mPointerInteractionValueMap
.
InsertOrUpdate
(
pointerId
interactionId
)
;
(
*
entry
)
-
>
SetInteractionId
(
interactionId
)
;
}
else
{
(
*
entry
)
-
>
SetInteractionId
(
0
)
;
}
mPendingPointerDowns
.
Remove
(
pointerId
)
;
if
(
eventType
=
=
ePointerCancel
)
{
return
Some
(
0
)
;
}
return
Some
(
mPointerInteractionValueMap
.
Get
(
pointerId
)
)
;
}
}
