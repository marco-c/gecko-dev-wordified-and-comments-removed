#
include
"
PerformanceTiming
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceTimingBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
PerformanceTiming
mPerformance
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
PerformanceTiming
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
PerformanceTiming
Release
)
PerformanceTiming
:
:
PerformanceTiming
(
Performance
*
aPerformance
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
:
mPerformance
(
aPerformance
)
mFetchStart
(
0
.
0
)
mZeroTime
(
aZeroTime
)
mRedirectCount
(
0
)
mTimingAllowed
(
true
)
mAllRedirectsSameOrigin
(
true
)
mInitialized
(
!
!
aChannel
)
mReportCrossOriginRedirect
(
true
)
{
MOZ_ASSERT
(
aPerformance
"
Parent
performance
object
should
be
provided
"
)
;
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
)
{
mZeroTime
=
0
;
}
if
(
aHttpChannel
)
{
mTimingAllowed
=
CheckAllowedOrigin
(
aHttpChannel
aChannel
)
;
bool
redirectsPassCheck
=
false
;
aChannel
-
>
GetAllRedirectsPassTimingAllowCheck
(
&
redirectsPassCheck
)
;
mReportCrossOriginRedirect
=
mTimingAllowed
&
&
redirectsPassCheck
;
}
InitializeTimingInfo
(
aChannel
)
;
}
void
PerformanceTiming
:
:
InitializeTimingInfo
(
nsITimedChannel
*
aChannel
)
{
if
(
aChannel
)
{
aChannel
-
>
GetAsyncOpen
(
&
mAsyncOpen
)
;
aChannel
-
>
GetAllRedirectsSameOrigin
(
&
mAllRedirectsSameOrigin
)
;
aChannel
-
>
GetRedirectCount
(
&
mRedirectCount
)
;
aChannel
-
>
GetRedirectStart
(
&
mRedirectStart
)
;
aChannel
-
>
GetRedirectEnd
(
&
mRedirectEnd
)
;
aChannel
-
>
GetDomainLookupStart
(
&
mDomainLookupStart
)
;
aChannel
-
>
GetDomainLookupEnd
(
&
mDomainLookupEnd
)
;
aChannel
-
>
GetConnectStart
(
&
mConnectStart
)
;
aChannel
-
>
GetConnectEnd
(
&
mConnectEnd
)
;
aChannel
-
>
GetRequestStart
(
&
mRequestStart
)
;
aChannel
-
>
GetResponseStart
(
&
mResponseStart
)
;
aChannel
-
>
GetCacheReadStart
(
&
mCacheReadStart
)
;
aChannel
-
>
GetResponseEnd
(
&
mResponseEnd
)
;
aChannel
-
>
GetCacheReadEnd
(
&
mCacheReadEnd
)
;
}
}
PerformanceTiming
:
:
~
PerformanceTiming
(
)
{
}
DOMHighResTimeStamp
PerformanceTiming
:
:
FetchStartHighRes
(
)
{
if
(
!
mFetchStart
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
MOZ_ASSERT
(
!
mAsyncOpen
.
IsNull
(
)
"
The
fetch
start
time
stamp
should
always
be
"
"
valid
if
the
performance
timing
is
enabled
"
)
;
mFetchStart
=
(
!
mAsyncOpen
.
IsNull
(
)
)
?
TimeStampToDOMHighRes
(
mAsyncOpen
)
:
0
.
0
;
}
return
mFetchStart
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
FetchStart
(
)
{
return
static_cast
<
int64_t
>
(
FetchStartHighRes
(
)
)
;
}
bool
PerformanceTiming
:
:
CheckAllowedOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
{
if
(
!
IsInitialized
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
aResourceChannel
-
>
GetLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
;
if
(
!
loadInfo
)
{
return
false
;
}
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
loadInfo
-
>
LoadingPrincipal
(
)
;
return
aChannel
-
>
TimingAllowCheck
(
principal
)
;
}
bool
PerformanceTiming
:
:
TimingAllowed
(
)
const
{
return
mTimingAllowed
;
}
uint16_t
PerformanceTiming
:
:
GetRedirectCount
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
0
;
}
if
(
!
mAllRedirectsSameOrigin
)
{
return
0
;
}
return
mRedirectCount
;
}
bool
PerformanceTiming
:
:
ShouldReportCrossOriginRedirect
(
)
const
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
false
;
}
return
(
mRedirectCount
!
=
0
)
&
&
mReportCrossOriginRedirect
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
RedirectStartHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToDOMHighResOrFetchStart
(
mRedirectStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RedirectStart
(
)
{
if
(
!
IsInitialized
(
)
)
{
return
0
;
}
if
(
mAllRedirectsSameOrigin
&
&
mRedirectCount
)
{
return
static_cast
<
int64_t
>
(
RedirectStartHighRes
(
)
)
;
}
return
0
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
RedirectEndHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToDOMHighResOrFetchStart
(
mRedirectEnd
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RedirectEnd
(
)
{
if
(
!
IsInitialized
(
)
)
{
return
0
;
}
if
(
mAllRedirectsSameOrigin
&
&
mRedirectCount
)
{
return
static_cast
<
int64_t
>
(
RedirectEndHighRes
(
)
)
;
}
return
0
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
DomainLookupStartHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToDOMHighResOrFetchStart
(
mDomainLookupStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
DomainLookupStart
(
)
{
return
static_cast
<
int64_t
>
(
DomainLookupStartHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
DomainLookupEndHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
mDomainLookupEnd
.
IsNull
(
)
?
DomainLookupStartHighRes
(
)
:
TimeStampToDOMHighRes
(
mDomainLookupEnd
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
DomainLookupEnd
(
)
{
return
static_cast
<
int64_t
>
(
DomainLookupEndHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
ConnectStartHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
mConnectStart
.
IsNull
(
)
?
DomainLookupEndHighRes
(
)
:
TimeStampToDOMHighRes
(
mConnectStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ConnectStart
(
)
{
return
static_cast
<
int64_t
>
(
ConnectStartHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
ConnectEndHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
mConnectEnd
.
IsNull
(
)
?
ConnectStartHighRes
(
)
:
TimeStampToDOMHighRes
(
mConnectEnd
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ConnectEnd
(
)
{
return
static_cast
<
int64_t
>
(
ConnectEndHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
RequestStartHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToDOMHighResOrFetchStart
(
mRequestStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RequestStart
(
)
{
return
static_cast
<
int64_t
>
(
RequestStartHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
ResponseStartHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mResponseStart
.
IsNull
(
)
|
|
(
!
mCacheReadStart
.
IsNull
(
)
&
&
mCacheReadStart
<
mResponseStart
)
)
{
mResponseStart
=
mCacheReadStart
;
}
if
(
mResponseStart
.
IsNull
(
)
|
|
(
!
mRequestStart
.
IsNull
(
)
&
&
mResponseStart
<
mRequestStart
)
)
{
mResponseStart
=
mRequestStart
;
}
return
TimeStampToDOMHighResOrFetchStart
(
mResponseStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ResponseStart
(
)
{
return
static_cast
<
int64_t
>
(
ResponseStartHighRes
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTiming
:
:
ResponseEndHighRes
(
)
{
if
(
!
nsContentUtils
:
:
IsPerformanceTimingEnabled
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mResponseEnd
.
IsNull
(
)
|
|
(
!
mCacheReadEnd
.
IsNull
(
)
&
&
mCacheReadEnd
<
mResponseEnd
)
)
{
mResponseEnd
=
mCacheReadEnd
;
}
return
mResponseEnd
.
IsNull
(
)
?
ResponseStartHighRes
(
)
:
TimeStampToDOMHighRes
(
mResponseEnd
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ResponseEnd
(
)
{
return
static_cast
<
int64_t
>
(
ResponseEndHighRes
(
)
)
;
}
bool
PerformanceTiming
:
:
IsInitialized
(
)
const
{
return
mInitialized
;
}
JSObject
*
PerformanceTiming
:
:
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PerformanceTimingBinding
:
:
Wrap
(
cx
this
aGivenProto
)
;
}
}
}
