#
include
"
PerformanceTiming
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceResourceTimingBinding
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceTimingBinding
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsITimedChannel
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
PerformanceTiming
mPerformance
)
PerformanceTimingData
*
PerformanceTimingData
:
:
Create
(
nsITimedChannel
*
aTimedChannel
nsIHttpChannel
*
aChannel
DOMHighResTimeStamp
aZeroTime
nsAString
&
aInitiatorType
nsAString
&
aEntryName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
StaticPrefs
:
:
dom_enable_resource_timing
(
)
)
{
return
nullptr
;
}
if
(
!
aChannel
|
|
!
aTimedChannel
)
{
return
nullptr
;
}
bool
reportTiming
=
true
;
aTimedChannel
-
>
GetReportResourceTiming
(
&
reportTiming
)
;
if
(
!
reportTiming
)
{
return
nullptr
;
}
aTimedChannel
-
>
GetInitiatorType
(
aInitiatorType
)
;
if
(
aInitiatorType
.
IsEmpty
(
)
)
{
aInitiatorType
=
u
"
other
"
_ns
;
}
nsCOMPtr
<
nsIURI
>
originalURI
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
;
nsAutoCString
name
;
originalURI
-
>
GetSpec
(
name
)
;
CopyUTF8toUTF16
(
name
aEntryName
)
;
return
new
PerformanceTimingData
(
aTimedChannel
aChannel
0
)
;
}
PerformanceTiming
:
:
PerformanceTiming
(
Performance
*
aPerformance
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
:
mPerformance
(
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
"
Parent
performance
object
should
be
provided
"
)
;
mTimingData
.
reset
(
new
PerformanceTimingData
(
aChannel
aHttpChannel
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
aZeroTime
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
)
)
;
if
(
!
aHttpChannel
&
&
StaticPrefs
:
:
dom_enable_performance
(
)
&
&
IsTopLevelContentDocument
(
)
)
{
glean
:
:
performance_time
:
:
response_start
.
AccumulateRawDuration
(
TimeDuration
:
:
FromMilliseconds
(
mTimingData
-
>
ResponseStartHighRes
(
aPerformance
)
-
mTimingData
-
>
ZeroTime
(
)
)
)
;
}
}
PerformanceTimingData
:
:
PerformanceTimingData
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
DOMHighResTimeStamp
aZeroTime
)
:
mZeroTime
(
0
.
0
)
mFetchStart
(
0
.
0
)
mEncodedBodySize
(
0
)
mTransferSize
(
0
)
mDecodedBodySize
(
0
)
mRedirectCount
(
0
)
mAllRedirectsSameOrigin
(
true
)
mAllRedirectsPassTAO
(
true
)
mSecureConnection
(
false
)
mTimingAllowed
(
true
)
mInitialized
(
false
)
{
mInitialized
=
!
!
aChannel
;
mZeroTime
=
aZeroTime
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
)
{
mZeroTime
=
0
;
}
nsCOMPtr
<
nsIURI
>
uri
;
if
(
aHttpChannel
)
{
aHttpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
}
else
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
httpChannel
)
{
httpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
}
}
if
(
uri
)
{
mSecureConnection
=
uri
-
>
SchemeIs
(
"
https
"
)
;
}
if
(
aChannel
)
{
aChannel
-
>
GetAsyncOpen
(
&
mAsyncOpen
)
;
aChannel
-
>
GetAllRedirectsSameOrigin
(
&
mAllRedirectsSameOrigin
)
;
aChannel
-
>
GetAllRedirectsPassTimingAllowCheck
(
&
mAllRedirectsPassTAO
)
;
aChannel
-
>
GetRedirectCount
(
&
mRedirectCount
)
;
aChannel
-
>
GetRedirectStart
(
&
mRedirectStart
)
;
aChannel
-
>
GetRedirectEnd
(
&
mRedirectEnd
)
;
aChannel
-
>
GetDomainLookupStart
(
&
mDomainLookupStart
)
;
aChannel
-
>
GetDomainLookupEnd
(
&
mDomainLookupEnd
)
;
aChannel
-
>
GetConnectStart
(
&
mConnectStart
)
;
aChannel
-
>
GetSecureConnectionStart
(
&
mSecureConnectionStart
)
;
aChannel
-
>
GetConnectEnd
(
&
mConnectEnd
)
;
aChannel
-
>
GetRequestStart
(
&
mRequestStart
)
;
aChannel
-
>
GetResponseStart
(
&
mResponseStart
)
;
aChannel
-
>
GetCacheReadStart
(
&
mCacheReadStart
)
;
aChannel
-
>
GetResponseEnd
(
&
mResponseEnd
)
;
aChannel
-
>
GetCacheReadEnd
(
&
mCacheReadEnd
)
;
aChannel
-
>
GetDispatchFetchEventStart
(
&
mWorkerStart
)
;
aChannel
-
>
GetHandleFetchEventStart
(
&
mWorkerRequestStart
)
;
aChannel
-
>
GetHandleFetchEventEnd
(
&
mWorkerResponseEnd
)
;
if
(
!
mAsyncOpen
.
IsNull
(
)
)
{
const
TimeStamp
*
clampTime
=
&
mAsyncOpen
;
if
(
!
mWorkerStart
.
IsNull
(
)
&
&
mWorkerStart
>
mAsyncOpen
)
{
clampTime
=
&
mWorkerStart
;
}
if
(
!
mDomainLookupStart
.
IsNull
(
)
&
&
mDomainLookupStart
<
*
clampTime
)
{
mDomainLookupStart
=
*
clampTime
;
}
if
(
!
mDomainLookupEnd
.
IsNull
(
)
&
&
mDomainLookupEnd
<
*
clampTime
)
{
mDomainLookupEnd
=
*
clampTime
;
}
if
(
!
mConnectStart
.
IsNull
(
)
&
&
mConnectStart
<
*
clampTime
)
{
mConnectStart
=
*
clampTime
;
}
if
(
mSecureConnection
&
&
!
mSecureConnectionStart
.
IsNull
(
)
&
&
mSecureConnectionStart
<
*
clampTime
)
{
mSecureConnectionStart
=
*
clampTime
;
}
if
(
!
mConnectEnd
.
IsNull
(
)
&
&
mConnectEnd
<
*
clampTime
)
{
mConnectEnd
=
*
clampTime
;
}
}
}
if
(
aHttpChannel
)
{
SetPropertiesFromHttpChannel
(
aHttpChannel
aChannel
)
;
}
bool
renderBlocking
=
false
;
if
(
aChannel
)
{
aChannel
-
>
GetRenderBlocking
(
&
renderBlocking
)
;
}
mRenderBlockingStatus
=
renderBlocking
?
RenderBlockingStatusType
:
:
Blocking
:
RenderBlockingStatusType
:
:
Non_blocking
;
}
PerformanceTimingData
:
:
PerformanceTimingData
(
const
IPCPerformanceTimingData
&
aIPCData
)
:
mNextHopProtocol
(
aIPCData
.
nextHopProtocol
(
)
)
mAsyncOpen
(
aIPCData
.
asyncOpen
(
)
)
mRedirectStart
(
aIPCData
.
redirectStart
(
)
)
mRedirectEnd
(
aIPCData
.
redirectEnd
(
)
)
mDomainLookupStart
(
aIPCData
.
domainLookupStart
(
)
)
mDomainLookupEnd
(
aIPCData
.
domainLookupEnd
(
)
)
mConnectStart
(
aIPCData
.
connectStart
(
)
)
mSecureConnectionStart
(
aIPCData
.
secureConnectionStart
(
)
)
mConnectEnd
(
aIPCData
.
connectEnd
(
)
)
mRequestStart
(
aIPCData
.
requestStart
(
)
)
mResponseStart
(
aIPCData
.
responseStart
(
)
)
mCacheReadStart
(
aIPCData
.
cacheReadStart
(
)
)
mResponseEnd
(
aIPCData
.
responseEnd
(
)
)
mCacheReadEnd
(
aIPCData
.
cacheReadEnd
(
)
)
mWorkerStart
(
aIPCData
.
workerStart
(
)
)
mWorkerRequestStart
(
aIPCData
.
workerRequestStart
(
)
)
mWorkerResponseEnd
(
aIPCData
.
workerResponseEnd
(
)
)
mZeroTime
(
aIPCData
.
zeroTime
(
)
)
mFetchStart
(
aIPCData
.
fetchStart
(
)
)
mEncodedBodySize
(
aIPCData
.
encodedBodySize
(
)
)
mTransferSize
(
aIPCData
.
transferSize
(
)
)
mDecodedBodySize
(
aIPCData
.
decodedBodySize
(
)
)
mRedirectCount
(
aIPCData
.
redirectCount
(
)
)
mRenderBlockingStatus
(
aIPCData
.
renderBlocking
(
)
?
RenderBlockingStatusType
:
:
Blocking
:
RenderBlockingStatusType
:
:
Non_blocking
)
mContentType
(
aIPCData
.
contentType
(
)
)
mAllRedirectsSameOrigin
(
aIPCData
.
allRedirectsSameOrigin
(
)
)
mAllRedirectsPassTAO
(
aIPCData
.
allRedirectsPassTAO
(
)
)
mSecureConnection
(
aIPCData
.
secureConnection
(
)
)
mBodyInfoAccessAllowed
(
aIPCData
.
bodyInfoAccessAllowed
(
)
)
mTimingAllowed
(
aIPCData
.
timingAllowed
(
)
)
mInitialized
(
aIPCData
.
initialized
(
)
)
{
for
(
const
auto
&
serverTimingData
:
aIPCData
.
serverTiming
(
)
)
{
RefPtr
<
nsServerTiming
>
timing
=
new
nsServerTiming
(
)
;
timing
-
>
SetName
(
serverTimingData
.
name
(
)
)
;
timing
-
>
SetDuration
(
serverTimingData
.
duration
(
)
)
;
timing
-
>
SetDescription
(
serverTimingData
.
description
(
)
)
;
mServerTiming
.
AppendElement
(
timing
)
;
}
}
IPCPerformanceTimingData
PerformanceTimingData
:
:
ToIPC
(
)
{
nsTArray
<
IPCServerTiming
>
ipcServerTiming
;
for
(
auto
&
serverTimingData
:
mServerTiming
)
{
nsAutoCString
name
;
Unused
<
<
serverTimingData
-
>
GetName
(
name
)
;
double
duration
=
0
;
Unused
<
<
serverTimingData
-
>
GetDuration
(
&
duration
)
;
nsAutoCString
description
;
Unused
<
<
serverTimingData
-
>
GetDescription
(
description
)
;
ipcServerTiming
.
AppendElement
(
IPCServerTiming
(
name
duration
description
)
)
;
}
bool
renderBlocking
=
mRenderBlockingStatus
=
=
RenderBlockingStatusType
:
:
Blocking
;
return
IPCPerformanceTimingData
(
ipcServerTiming
mNextHopProtocol
mAsyncOpen
mRedirectStart
mRedirectEnd
mDomainLookupStart
mDomainLookupEnd
mConnectStart
mSecureConnectionStart
mConnectEnd
mRequestStart
mResponseStart
mCacheReadStart
mResponseEnd
mCacheReadEnd
mWorkerStart
mWorkerRequestStart
mWorkerResponseEnd
mZeroTime
mFetchStart
mEncodedBodySize
mTransferSize
mDecodedBodySize
mRedirectCount
renderBlocking
mContentType
mAllRedirectsSameOrigin
mAllRedirectsPassTAO
mSecureConnection
mBodyInfoAccessAllowed
mTimingAllowed
mInitialized
)
;
}
void
PerformanceTimingData
:
:
SetPropertiesFromHttpChannel
(
nsIHttpChannel
*
aHttpChannel
nsITimedChannel
*
aChannel
)
{
MOZ_ASSERT
(
aHttpChannel
)
;
nsAutoCString
protocol
;
Unused
<
<
aHttpChannel
-
>
GetProtocolVersion
(
protocol
)
;
CopyUTF8toUTF16
(
protocol
mNextHopProtocol
)
;
Unused
<
<
aHttpChannel
-
>
GetEncodedBodySize
(
&
mEncodedBodySize
)
;
Unused
<
<
aHttpChannel
-
>
GetTransferSize
(
&
mTransferSize
)
;
Unused
<
<
aHttpChannel
-
>
GetDecodedBodySize
(
&
mDecodedBodySize
)
;
if
(
mDecodedBodySize
=
=
0
)
{
mDecodedBodySize
=
mEncodedBodySize
;
}
nsAutoCString
contentType
;
Unused
<
<
aHttpChannel
-
>
GetContentType
(
contentType
)
;
CopyUTF8toUTF16
(
contentType
mContentType
)
;
mBodyInfoAccessAllowed
=
CheckBodyInfoAccessAllowedForOrigin
(
aHttpChannel
aChannel
)
;
mTimingAllowed
=
CheckTimingAllowedForOrigin
(
aHttpChannel
aChannel
)
;
aChannel
-
>
GetAllRedirectsPassTimingAllowCheck
(
&
mAllRedirectsPassTAO
)
;
aChannel
-
>
GetNativeServerTiming
(
mServerTiming
)
;
}
PerformanceTiming
:
:
~
PerformanceTiming
(
)
=
default
;
DOMHighResTimeStamp
PerformanceTimingData
:
:
FetchStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
mFetchStart
)
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
MOZ_ASSERT
(
!
mAsyncOpen
.
IsNull
(
)
"
The
fetch
start
time
stamp
should
always
be
"
"
valid
if
the
performance
timing
is
enabled
"
)
;
if
(
!
mAsyncOpen
.
IsNull
(
)
)
{
if
(
!
mWorkerRequestStart
.
IsNull
(
)
&
&
mWorkerRequestStart
>
mAsyncOpen
)
{
mFetchStart
=
TimeStampToDOMHighRes
(
aPerformance
mWorkerRequestStart
)
;
}
else
{
mFetchStart
=
TimeStampToDOMHighRes
(
aPerformance
mAsyncOpen
)
;
}
}
}
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
mFetchStart
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
FetchStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
FetchStartHighRes
(
mPerformance
)
)
;
}
nsIPrincipal
*
PerformanceTimingData
:
:
GetLoadingPrincipalForResourceChannel
(
nsIHttpChannel
*
aResourceChannel
)
const
{
if
(
!
IsInitialized
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aResourceChannel
-
>
LoadInfo
(
)
;
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
nullptr
;
}
return
loadInfo
-
>
GetLoadingPrincipal
(
)
;
}
nsITimedChannel
:
:
BodyInfoAccess
PerformanceTimingData
:
:
CheckBodyInfoAccessAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
{
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
GetLoadingPrincipalForResourceChannel
(
aResourceChannel
)
;
if
(
!
principal
)
{
return
nsITimedChannel
:
:
BodyInfoAccess
:
:
DISALLOWED
;
}
return
aChannel
-
>
BodyInfoAccessAllowedCheck
(
principal
)
;
}
bool
PerformanceTimingData
:
:
CheckTimingAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
{
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
GetLoadingPrincipalForResourceChannel
(
aResourceChannel
)
;
return
principal
&
&
aChannel
-
>
TimingAllowCheck
(
principal
)
;
}
uint8_t
PerformanceTimingData
:
:
GetRedirectCount
(
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
0
;
}
if
(
!
mAllRedirectsSameOrigin
)
{
return
0
;
}
return
mRedirectCount
;
}
bool
PerformanceTimingData
:
:
ShouldReportCrossOriginRedirect
(
bool
aEnsureSameOriginAndIgnoreTAO
)
const
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
false
;
}
if
(
!
mTimingAllowed
|
|
mRedirectCount
=
=
0
)
{
return
false
;
}
return
aEnsureSameOriginAndIgnoreTAO
?
mAllRedirectsSameOrigin
:
mAllRedirectsPassTAO
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
AsyncOpenHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
|
|
mAsyncOpen
.
IsNull
(
)
)
{
return
mZeroTime
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mAsyncOpen
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
WorkerStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
|
|
mWorkerStart
.
IsNull
(
)
)
{
return
mZeroTime
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mWorkerStart
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
RedirectStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToReducedDOMHighResOrFetchStart
(
aPerformance
mRedirectStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RedirectStart
(
)
{
if
(
!
mTimingData
-
>
IsInitialized
(
)
)
{
return
0
;
}
if
(
mTimingData
-
>
AllRedirectsSameOrigin
(
)
&
&
mTimingData
-
>
RedirectCountReal
(
)
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
RedirectStartHighRes
(
mPerformance
)
)
;
}
return
0
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
RedirectEndHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
return
TimeStampToReducedDOMHighResOrFetchStart
(
aPerformance
mRedirectEnd
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RedirectEnd
(
)
{
if
(
!
mTimingData
-
>
IsInitialized
(
)
)
{
return
0
;
}
if
(
mTimingData
-
>
AllRedirectsSameOrigin
(
)
&
&
mTimingData
-
>
RedirectCountReal
(
)
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
RedirectEndHighRes
(
mPerformance
)
)
;
}
return
0
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
DomainLookupStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
aPerformance
-
>
ShouldResistFingerprinting
(
)
)
{
return
FetchStartHighRes
(
aPerformance
)
;
}
return
TimeStampToReducedDOMHighResOrFetchStart
(
aPerformance
mDomainLookupStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
DomainLookupStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
DomainLookupStartHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
DomainLookupEndHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
aPerformance
-
>
ShouldResistFingerprinting
(
)
)
{
return
FetchStartHighRes
(
aPerformance
)
;
}
if
(
mDomainLookupEnd
.
IsNull
(
)
)
{
return
DomainLookupStartHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mDomainLookupEnd
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
DomainLookupEnd
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
DomainLookupEndHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
ConnectStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mConnectStart
.
IsNull
(
)
)
{
return
DomainLookupEndHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mConnectStart
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ConnectStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
ConnectStartHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
SecureConnectionStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
!
mSecureConnection
)
{
return
0
;
}
if
(
mSecureConnectionStart
.
IsNull
(
)
)
{
return
ConnectStartHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mSecureConnectionStart
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
SecureConnectionStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
SecureConnectionStartHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
ConnectEndHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mConnectEnd
.
IsNull
(
)
)
{
return
ConnectStartHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mConnectEnd
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ConnectEnd
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
ConnectEndHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
RequestStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mRequestStart
.
IsNull
(
)
)
{
mRequestStart
=
mWorkerRequestStart
;
}
return
TimeStampToReducedDOMHighResOrFetchStart
(
aPerformance
mRequestStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
RequestStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
RequestStartHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
ResponseStartHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mResponseStart
.
IsNull
(
)
|
|
(
!
mCacheReadStart
.
IsNull
(
)
&
&
mCacheReadStart
<
mResponseStart
)
)
{
mResponseStart
=
mCacheReadStart
;
}
if
(
mResponseStart
.
IsNull
(
)
|
|
(
!
mRequestStart
.
IsNull
(
)
&
&
mResponseStart
<
mRequestStart
)
)
{
mResponseStart
=
mRequestStart
;
}
return
TimeStampToReducedDOMHighResOrFetchStart
(
aPerformance
mResponseStart
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ResponseStart
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
ResponseStartHighRes
(
mPerformance
)
)
;
}
DOMHighResTimeStamp
PerformanceTimingData
:
:
ResponseEndHighRes
(
Performance
*
aPerformance
)
{
MOZ_ASSERT
(
aPerformance
)
;
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
)
{
return
mZeroTime
;
}
if
(
mResponseEnd
.
IsNull
(
)
|
|
(
!
mCacheReadEnd
.
IsNull
(
)
&
&
mCacheReadEnd
<
mResponseEnd
)
)
{
mResponseEnd
=
mCacheReadEnd
;
}
if
(
mResponseEnd
.
IsNull
(
)
)
{
mResponseEnd
=
mWorkerResponseEnd
;
}
if
(
mResponseEnd
.
IsNull
(
)
)
{
return
ResponseStartHighRes
(
aPerformance
)
;
}
DOMHighResTimeStamp
rawValue
=
TimeStampToDOMHighRes
(
aPerformance
mResponseEnd
)
;
return
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
rawValue
aPerformance
-
>
GetRandomTimelineSeed
(
)
aPerformance
-
>
GetRTPCallerType
(
)
)
;
}
DOMTimeMilliSec
PerformanceTiming
:
:
ResponseEnd
(
)
{
return
static_cast
<
int64_t
>
(
mTimingData
-
>
ResponseEndHighRes
(
mPerformance
)
)
;
}
JSObject
*
PerformanceTiming
:
:
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PerformanceTiming_Binding
:
:
Wrap
(
cx
this
aGivenProto
)
;
}
bool
PerformanceTiming
:
:
IsTopLevelContentDocument
(
)
const
{
nsCOMPtr
<
Document
>
document
=
mPerformance
-
>
GetDocumentIfCurrent
(
)
;
if
(
!
document
)
{
return
false
;
}
if
(
BrowsingContext
*
bc
=
document
-
>
GetBrowsingContext
(
)
)
{
return
bc
-
>
IsTopContent
(
)
;
}
return
false
;
}
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
PerformanceTimingData
:
:
GetServerTiming
(
)
{
if
(
!
StaticPrefs
:
:
dom_enable_performance
(
)
|
|
!
IsInitialized
(
)
|
|
!
TimingAllowed
(
)
)
{
return
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
(
)
;
}
return
mServerTiming
.
Clone
(
)
;
}
}
