#
ifndef
mozilla_dom_CacheablePerformanceTimingData_h
#
define
mozilla_dom_CacheablePerformanceTimingData_h
#
include
<
stdint
.
h
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsITimedChannel
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIHttpChannel
;
namespace
mozilla
:
:
dom
{
class
IPCPerformanceTimingData
;
class
CacheablePerformanceTimingData
{
public
:
CacheablePerformanceTimingData
(
)
=
default
;
CacheablePerformanceTimingData
(
nsITimedChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
)
;
protected
:
explicit
CacheablePerformanceTimingData
(
const
CacheablePerformanceTimingData
&
aOther
)
;
explicit
CacheablePerformanceTimingData
(
const
IPCPerformanceTimingData
&
aIPCData
)
;
public
:
bool
IsInitialized
(
)
const
{
return
mInitialized
;
}
const
nsString
&
NextHopProtocol
(
)
const
{
return
mNextHopProtocol
;
}
uint64_t
EncodedBodySize
(
)
const
{
return
mEncodedBodySize
;
}
uint64_t
DecodedBodySize
(
)
const
{
return
mDecodedBodySize
;
}
uint16_t
ResponseStatus
(
)
const
{
return
mResponseStatus
;
}
const
nsString
&
ContentType
(
)
const
{
return
mContentType
;
}
uint8_t
RedirectCountReal
(
)
const
{
return
mRedirectCount
;
}
uint8_t
GetRedirectCount
(
)
const
;
bool
AllRedirectsSameOrigin
(
)
const
{
return
mAllRedirectsSameOrigin
;
}
nsITimedChannel
:
:
BodyInfoAccess
BodyInfoAccessAllowed
(
)
const
{
return
mBodyInfoAccessAllowed
;
}
bool
TimingAllowed
(
)
const
{
return
mTimingAllowed
;
}
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
GetServerTiming
(
)
;
protected
:
void
SetCacheablePropertiesFromHttpChannel
(
nsIHttpChannel
*
aHttpChannel
nsITimedChannel
*
aChannel
)
;
private
:
nsITimedChannel
:
:
BodyInfoAccess
CheckBodyInfoAccessAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
;
bool
CheckTimingAllowedForOrigin
(
nsIHttpChannel
*
aResourceChannel
nsITimedChannel
*
aChannel
)
;
protected
:
uint64_t
mEncodedBodySize
=
0
;
uint64_t
mDecodedBodySize
=
0
;
uint16_t
mResponseStatus
=
0
;
uint8_t
mRedirectCount
=
0
;
nsITimedChannel
:
:
BodyInfoAccess
mBodyInfoAccessAllowed
=
nsITimedChannel
:
:
BodyInfoAccess
:
:
DISALLOWED
;
bool
mAllRedirectsSameOrigin
=
false
;
bool
mAllRedirectsPassTAO
=
false
;
bool
mSecureConnection
=
false
;
bool
mTimingAllowed
=
false
;
bool
mInitialized
=
false
;
nsString
mNextHopProtocol
;
nsString
mContentType
;
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
mServerTiming
;
}
;
}
#
endif
