#
ifndef
mozilla_dom_PerformanceInteractionMetrics_h__
#
define
mozilla_dom_PerformanceInteractionMetrics_h__
#
include
"
PerformanceEventTiming
.
h
"
#
include
"
nsHashtablesFwd
.
h
"
namespace
mozilla
:
:
dom
{
class
PerformanceInteractionMetrics
final
{
public
:
PerformanceInteractionMetrics
(
)
;
PerformanceInteractionMetrics
(
const
PerformanceInteractionMetrics
&
aCopy
)
=
delete
;
PerformanceInteractionMetrics
&
operator
=
(
const
PerformanceInteractionMetrics
&
aCopy
)
=
delete
;
Maybe
<
uint64_t
>
ComputeInteractionId
(
PerformanceEventTiming
*
aEventTiming
const
WidgetEvent
*
aEvent
)
;
nsTHashMap
<
uint32_t
RefPtr
<
PerformanceEventTiming
>
>
&
PendingKeyDowns
(
)
{
return
mPendingKeyDowns
;
}
nsTHashMap
<
uint32_t
RefPtr
<
PerformanceEventTiming
>
>
&
PendingPointerDowns
(
)
{
return
mPendingPointerDowns
;
}
uint64_t
InteractionCount
(
)
{
return
mInteractionCount
;
}
uint64_t
IncreaseInteractionValueAndCount
(
)
;
virtual
~
PerformanceInteractionMetrics
(
)
=
default
;
private
:
nsTHashMap
<
uint32_t
RefPtr
<
PerformanceEventTiming
>
>
mPendingKeyDowns
;
nsTHashMap
<
uint32_t
RefPtr
<
PerformanceEventTiming
>
>
mPendingPointerDowns
;
nsTHashMap
<
uint32_t
uint32_t
>
mPointerInteractionValueMap
;
uint64_t
mInteractionCount
=
0
;
uint64_t
mCurrentInteractionValue
;
Maybe
<
uint64_t
>
mLastKeydownInteractionValue
;
bool
mContextMenuTriggered
=
false
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
PerformanceInteractionMetrics
&
aMetrics
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
aMetrics
.
PendingKeyDowns
(
)
aName
aFlags
)
;
ImplCycleCollectionTraverse
(
aCallback
aMetrics
.
PendingPointerDowns
(
)
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
PerformanceInteractionMetrics
&
aMetrics
)
{
aMetrics
.
PendingKeyDowns
(
)
.
Clear
(
)
;
aMetrics
.
PendingPointerDowns
(
)
.
Clear
(
)
;
}
}
#
endif
