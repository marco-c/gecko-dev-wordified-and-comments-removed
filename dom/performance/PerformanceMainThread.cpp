#
include
"
PerformanceMainThread
.
h
"
#
include
"
PerformanceNavigation
.
h
"
#
include
"
nsICacheInfoChannel
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
PerformanceMainThread
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
PerformanceMainThread
Performance
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTiming
mNavigation
mDocEntry
)
tmp
-
>
mMozMemory
=
nullptr
;
mozilla
:
:
DropJSObjects
(
this
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
PerformanceMainThread
Performance
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTiming
mNavigation
mDocEntry
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
PerformanceMainThread
Performance
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mMozMemory
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_ADDREF_INHERITED
(
PerformanceMainThread
Performance
)
NS_IMPL_RELEASE_INHERITED
(
PerformanceMainThread
Performance
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PerformanceMainThread
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END_INHERITING
(
Performance
)
PerformanceMainThread
:
:
PerformanceMainThread
(
nsPIDOMWindowInner
*
aWindow
nsDOMNavigationTiming
*
aDOMTiming
nsITimedChannel
*
aChannel
)
:
Performance
(
aWindow
)
mDOMTiming
(
aDOMTiming
)
mChannel
(
aChannel
)
{
MOZ_ASSERT
(
aWindow
"
Parent
window
object
should
be
provided
"
)
;
}
PerformanceMainThread
:
:
~
PerformanceMainThread
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
void
PerformanceMainThread
:
:
GetMozMemory
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aObj
)
{
if
(
!
mMozMemory
)
{
mMozMemory
=
js
:
:
gc
:
:
NewMemoryInfoObject
(
aCx
)
;
if
(
mMozMemory
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
}
aObj
.
set
(
mMozMemory
)
;
}
PerformanceTiming
*
PerformanceMainThread
:
:
Timing
(
)
{
if
(
!
mTiming
)
{
mTiming
=
new
PerformanceTiming
(
this
mChannel
nullptr
mDOMTiming
-
>
GetNavigationStart
(
)
)
;
}
return
mTiming
;
}
void
PerformanceMainThread
:
:
DispatchBufferFullEvent
(
)
{
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
this
nullptr
nullptr
)
;
event
-
>
InitEvent
(
NS_LITERAL_STRING
(
"
resourcetimingbufferfull
"
)
true
false
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
DispatchEvent
(
event
&
dummy
)
;
}
PerformanceNavigation
*
PerformanceMainThread
:
:
Navigation
(
)
{
if
(
!
mNavigation
)
{
mNavigation
=
new
PerformanceNavigation
(
this
)
;
}
return
mNavigation
;
}
void
PerformanceMainThread
:
:
AddEntry
(
nsIHttpChannel
*
channel
nsITimedChannel
*
timedChannel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
nsContentUtils
:
:
IsResourceTimingEnabled
(
)
)
{
return
;
}
if
(
IsResourceEntryLimitReached
(
)
)
{
return
;
}
if
(
channel
&
&
timedChannel
)
{
nsAutoCString
name
;
nsAutoString
initiatorType
;
nsCOMPtr
<
nsIURI
>
originalURI
;
timedChannel
-
>
GetInitiatorType
(
initiatorType
)
;
channel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
;
originalURI
-
>
GetSpec
(
name
)
;
NS_ConvertUTF8toUTF16
entryName
(
name
)
;
RefPtr
<
PerformanceTiming
>
performanceTiming
=
new
PerformanceTiming
(
this
timedChannel
channel
0
)
;
RefPtr
<
PerformanceResourceTiming
>
performanceEntry
=
new
PerformanceResourceTiming
(
performanceTiming
this
entryName
channel
)
;
if
(
initiatorType
.
IsEmpty
(
)
)
{
initiatorType
=
NS_LITERAL_STRING
(
"
other
"
)
;
}
performanceEntry
-
>
SetInitiatorType
(
initiatorType
)
;
InsertResourceEntry
(
performanceEntry
)
;
}
}
bool
PerformanceMainThread
:
:
IsPerformanceTimingAttribute
(
const
nsAString
&
aName
)
{
static
const
char
*
attributes
[
]
=
{
"
navigationStart
"
"
unloadEventStart
"
"
unloadEventEnd
"
"
redirectStart
"
"
redirectEnd
"
"
fetchStart
"
"
domainLookupStart
"
"
domainLookupEnd
"
"
connectStart
"
"
secureConnectionStart
"
"
connectEnd
"
"
requestStart
"
"
responseStart
"
"
responseEnd
"
"
domLoading
"
"
domInteractive
"
"
domContentLoadedEventStart
"
"
domContentLoadedEventEnd
"
"
domComplete
"
"
loadEventStart
"
"
loadEventEnd
"
nullptr
}
;
for
(
uint32_t
i
=
0
;
attributes
[
i
]
;
+
+
i
)
{
if
(
aName
.
EqualsASCII
(
attributes
[
i
]
)
)
{
return
true
;
}
}
return
false
;
}
DOMHighResTimeStamp
PerformanceMainThread
:
:
GetPerformanceTimingFromString
(
const
nsAString
&
aProperty
)
{
if
(
!
IsPerformanceTimingAttribute
(
aProperty
)
)
{
return
0
;
}
if
(
aProperty
.
EqualsLiteral
(
"
navigationStart
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetNavigationStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
unloadEventStart
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetUnloadEventStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
unloadEventEnd
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetUnloadEventEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
redirectStart
"
)
)
{
return
Timing
(
)
-
>
RedirectStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
redirectEnd
"
)
)
{
return
Timing
(
)
-
>
RedirectEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
fetchStart
"
)
)
{
return
Timing
(
)
-
>
FetchStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domainLookupStart
"
)
)
{
return
Timing
(
)
-
>
DomainLookupStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domainLookupEnd
"
)
)
{
return
Timing
(
)
-
>
DomainLookupEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
connectStart
"
)
)
{
return
Timing
(
)
-
>
ConnectStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
secureConnectionStart
"
)
)
{
return
Timing
(
)
-
>
SecureConnectionStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
connectEnd
"
)
)
{
return
Timing
(
)
-
>
ConnectEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
requestStart
"
)
)
{
return
Timing
(
)
-
>
RequestStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
responseStart
"
)
)
{
return
Timing
(
)
-
>
ResponseStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
responseEnd
"
)
)
{
return
Timing
(
)
-
>
ResponseEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domLoading
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetDomLoading
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domInteractive
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetDomInteractive
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domContentLoadedEventStart
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domContentLoadedEventEnd
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetDomContentLoadedEventEnd
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
domComplete
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetDomComplete
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
loadEventStart
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetLoadEventStart
(
)
;
}
if
(
aProperty
.
EqualsLiteral
(
"
loadEventEnd
"
)
)
{
return
GetDOMTiming
(
)
-
>
GetLoadEventEnd
(
)
;
}
MOZ_CRASH
(
"
IsPerformanceTimingAttribute
and
GetPerformanceTimingFromString
are
out
of
sync
"
)
;
return
0
;
}
void
PerformanceMainThread
:
:
InsertUserEntry
(
PerformanceEntry
*
aEntry
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoCString
uri
;
uint64_t
markCreationEpoch
=
0
;
if
(
nsContentUtils
:
:
IsUserTimingLoggingEnabled
(
)
|
|
nsContentUtils
:
:
SendPerformanceTimingNotifications
(
)
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsPIDOMWindowInner
>
owner
=
GetOwner
(
)
;
if
(
owner
&
&
owner
-
>
GetDocumentURI
(
)
)
{
rv
=
owner
-
>
GetDocumentURI
(
)
-
>
GetHost
(
uri
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
uri
.
AssignLiteral
(
"
none
"
)
;
}
markCreationEpoch
=
static_cast
<
uint64_t
>
(
PR_Now
(
)
/
PR_USEC_PER_MSEC
)
;
if
(
nsContentUtils
:
:
IsUserTimingLoggingEnabled
(
)
)
{
Performance
:
:
LogEntry
(
aEntry
uri
)
;
}
}
if
(
nsContentUtils
:
:
SendPerformanceTimingNotifications
(
)
)
{
TimingNotification
(
aEntry
uri
markCreationEpoch
)
;
}
Performance
:
:
InsertUserEntry
(
aEntry
)
;
}
TimeStamp
PerformanceMainThread
:
:
CreationTimeStamp
(
)
const
{
return
GetDOMTiming
(
)
-
>
GetNavigationStartTimeStamp
(
)
;
}
DOMHighResTimeStamp
PerformanceMainThread
:
:
CreationTime
(
)
const
{
return
GetDOMTiming
(
)
-
>
GetNavigationStart
(
)
;
}
void
PerformanceMainThread
:
:
EnsureDocEntry
(
)
{
if
(
!
mDocEntry
&
&
nsContentUtils
:
:
IsPerformanceNavigationTimingEnabled
(
)
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
mChannel
)
;
RefPtr
<
PerformanceTiming
>
timing
=
new
PerformanceTiming
(
this
mChannel
nullptr
0
)
;
mDocEntry
=
new
PerformanceNavigationTiming
(
timing
this
httpChannel
)
;
}
}
void
PerformanceMainThread
:
:
GetEntries
(
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
aRetval
.
Clear
(
)
;
return
;
}
aRetval
=
mResourceEntries
;
aRetval
.
AppendElements
(
mUserEntries
)
;
EnsureDocEntry
(
)
;
if
(
mDocEntry
)
{
aRetval
.
AppendElement
(
mDocEntry
)
;
}
aRetval
.
Sort
(
PerformanceEntryComparator
(
)
)
;
}
void
PerformanceMainThread
:
:
GetEntriesByType
(
const
nsAString
&
aEntryType
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
aRetval
.
Clear
(
)
;
return
;
}
if
(
aEntryType
.
EqualsLiteral
(
"
navigation
"
)
)
{
aRetval
.
Clear
(
)
;
EnsureDocEntry
(
)
;
if
(
mDocEntry
)
{
aRetval
.
AppendElement
(
mDocEntry
)
;
}
return
;
}
Performance
:
:
GetEntriesByType
(
aEntryType
aRetval
)
;
}
void
PerformanceMainThread
:
:
GetEntriesByName
(
const
nsAString
&
aName
const
Optional
<
nsAString
>
&
aEntryType
nsTArray
<
RefPtr
<
PerformanceEntry
>
>
&
aRetval
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
)
)
{
aRetval
.
Clear
(
)
;
return
;
}
if
(
aName
.
EqualsLiteral
(
"
document
"
)
)
{
aRetval
.
Clear
(
)
;
EnsureDocEntry
(
)
;
if
(
mDocEntry
)
{
aRetval
.
AppendElement
(
mDocEntry
)
;
}
return
;
}
Performance
:
:
GetEntriesByName
(
aName
aEntryType
aRetval
)
;
}
}
}
