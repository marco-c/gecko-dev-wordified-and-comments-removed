#
include
"
XMLHttpRequest
.
h
"
#
include
"
XMLHttpRequestMainThread
.
h
"
#
include
"
XMLHttpRequestWorker
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
mozilla
:
:
LazyLogModule
gXMLHttpRequestLog
(
"
XMLHttpRequest
"
)
;
namespace
mozilla
:
:
dom
{
already_AddRefed
<
XMLHttpRequest
>
XMLHttpRequest
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
MozXMLHttpRequestParameters
&
aParams
ErrorResult
&
aRv
)
{
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
nsCOMPtr
<
nsIScriptObjectPrincipal
>
scriptPrincipal
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
global
|
|
!
scriptPrincipal
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
global
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
scriptPrincipal
-
>
GetPrincipal
(
)
;
if
(
window
)
{
Document
*
document
=
window
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
document
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
cookieJarSettings
=
document
-
>
CookieJarSettings
(
)
;
}
else
{
cookieJarSettings
=
net
:
:
CookieJarSettings
:
:
Create
(
principal
)
;
}
RefPtr
<
XMLHttpRequestMainThread
>
req
=
new
XMLHttpRequestMainThread
(
global
)
;
req
-
>
Construct
(
principal
cookieJarSettings
false
)
;
bool
isAnon
=
false
;
if
(
aParams
.
mMozAnon
.
WasPassed
(
)
)
{
isAnon
=
aParams
.
mMozAnon
.
Value
(
)
;
}
else
{
isAnon
=
StaticPrefs
:
:
network_fetch_systemDefaultsToOmittingCredentials
(
)
&
&
(
aParams
.
mMozSystem
|
|
principal
-
>
IsSystemPrincipal
(
)
)
;
}
req
-
>
InitParameters
(
isAnon
aParams
.
mMozSystem
)
;
return
req
.
forget
(
)
;
}
return
XMLHttpRequestWorker
:
:
Construct
(
aGlobal
aParams
aRv
)
;
}
}
