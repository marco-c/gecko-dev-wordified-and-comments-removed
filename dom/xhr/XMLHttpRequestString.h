#
ifndef
mozilla_dom_XMLHttpRequestString_h
#
define
mozilla_dom_XMLHttpRequestString_h
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsString
.
h
"
struct
JSContext
;
class
JSString
;
namespace
mozilla
:
:
dom
{
class
ArrayBufferBuilder
;
class
BlobImpl
;
class
DOMString
;
class
XMLHttpRequestStringBuffer
;
class
XMLHttpRequestStringSnapshot
;
class
XMLHttpRequestStringWriterHelper
;
class
XMLHttpRequestString
final
{
friend
class
XMLHttpRequestStringWriterHelper
;
public
:
XMLHttpRequestString
(
)
;
~
XMLHttpRequestString
(
)
;
void
Truncate
(
)
;
uint32_t
Length
(
)
const
;
void
Append
(
const
nsAString
&
aString
)
;
[
[
nodiscard
]
]
bool
GetAsString
(
nsAString
&
aString
)
const
;
size_t
SizeOfThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
const
char16_t
*
Data
(
)
const
;
bool
IsEmpty
(
)
const
;
void
CreateSnapshot
(
XMLHttpRequestStringSnapshot
&
aSnapshot
)
;
private
:
XMLHttpRequestString
(
const
XMLHttpRequestString
&
)
=
delete
;
XMLHttpRequestString
&
operator
=
(
const
XMLHttpRequestString
&
)
=
delete
;
XMLHttpRequestString
&
operator
=
(
const
XMLHttpRequestString
&
&
)
=
delete
;
RefPtr
<
XMLHttpRequestStringBuffer
>
mBuffer
;
}
;
class
MOZ_STACK_CLASS
XMLHttpRequestStringWriterHelper
final
{
public
:
explicit
XMLHttpRequestStringWriterHelper
(
XMLHttpRequestString
&
aString
)
;
~
XMLHttpRequestStringWriterHelper
(
)
;
uint32_t
Length
(
)
const
;
mozilla
:
:
Result
<
mozilla
:
:
BulkWriteHandle
<
char16_t
>
nsresult
>
BulkWrite
(
uint32_t
aCapacity
)
;
private
:
XMLHttpRequestStringWriterHelper
(
const
XMLHttpRequestStringWriterHelper
&
)
=
delete
;
XMLHttpRequestStringWriterHelper
&
operator
=
(
const
XMLHttpRequestStringWriterHelper
&
)
=
delete
;
XMLHttpRequestStringWriterHelper
&
operator
=
(
const
XMLHttpRequestStringWriterHelper
&
&
)
=
delete
;
RefPtr
<
XMLHttpRequestStringBuffer
>
mBuffer
;
MutexAutoLock
mLock
;
}
;
class
XMLHttpRequestStringSnapshot
final
{
friend
class
XMLHttpRequestStringBuffer
;
public
:
XMLHttpRequestStringSnapshot
(
)
;
~
XMLHttpRequestStringSnapshot
(
)
;
XMLHttpRequestStringSnapshot
&
operator
=
(
const
XMLHttpRequestStringSnapshot
&
)
=
delete
;
void
Reset
(
)
{
ResetInternal
(
false
)
;
}
void
SetVoid
(
)
{
ResetInternal
(
true
)
;
}
bool
IsVoid
(
)
const
{
return
mVoid
;
}
bool
IsEmpty
(
)
const
{
return
!
mLength
;
}
[
[
nodiscard
]
]
bool
GetAsString
(
DOMString
&
aString
)
const
;
JSString
*
GetAsJSStringCopy
(
JSContext
*
aCx
)
const
;
private
:
XMLHttpRequestStringSnapshot
(
const
XMLHttpRequestStringSnapshot
&
)
=
delete
;
XMLHttpRequestStringSnapshot
&
operator
=
(
const
XMLHttpRequestStringSnapshot
&
&
)
=
delete
;
void
Set
(
XMLHttpRequestStringBuffer
*
aBuffer
uint32_t
aLength
)
;
void
ResetInternal
(
bool
aIsVoid
)
;
RefPtr
<
XMLHttpRequestStringBuffer
>
mBuffer
;
uint32_t
mLength
;
bool
mVoid
;
}
;
}
#
endif
