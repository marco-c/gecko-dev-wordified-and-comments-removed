const
kIsWin
=
navigator
.
platform
.
indexOf
(
"
Win
"
)
=
=
0
;
const
kKeyDown
=
0x01
;
const
kKeyPress
=
0x02
;
const
kKeyUp
=
0x04
;
const
kEventCode
=
{
'
keydown
'
:
kKeyDown
'
keypress
'
:
kKeyPress
'
keyup
'
:
kKeyUp
}
;
var
gCurrentTest
;
var
gInputMethod
;
function
addKeyEventListeners
(
eventTarget
handler
)
{
Object
.
keys
(
kEventCode
)
.
forEach
(
function
(
type
)
{
eventTarget
.
addEventListener
(
type
handler
)
;
}
)
;
}
function
eventToCode
(
type
)
{
return
kEventCode
[
type
]
;
}
function
guessNativeKeyCode
(
key
)
{
let
nativeCodeName
=
(
kIsWin
)
?
'
WIN_VK_
'
:
'
MAC_VK_ANSI_
'
;
if
(
/
^
[
A
-
Z
]
/
.
test
(
key
)
)
{
nativeCodeName
+
=
key
;
}
else
if
(
/
^
[
a
-
z
]
/
.
test
(
key
)
)
{
nativeCodeName
+
=
key
.
toUpperCase
(
)
;
}
else
if
(
/
^
[
0
-
9
]
/
.
test
(
key
)
)
{
nativeCodeName
+
=
key
.
toString
(
)
;
}
else
{
return
0
;
}
return
eval
(
nativeCodeName
)
;
}
function
frameScript
(
)
{
function
handler
(
e
)
{
sendAsyncMessage
(
"
forwardevent
"
{
type
:
e
.
type
key
:
e
.
key
}
)
;
}
function
notifyFinish
(
e
)
{
if
(
e
.
type
!
=
'
keyup
'
)
return
;
sendAsyncMessage
(
"
finish
"
)
;
}
let
input
=
content
.
document
.
getElementById
(
'
test
-
input
'
)
;
input
.
addEventListener
(
'
keydown
'
handler
)
;
input
.
addEventListener
(
'
keypress
'
handler
)
;
input
.
addEventListener
(
'
keyup
'
handler
)
;
input
.
addEventListener
(
'
keyup
'
notifyFinish
)
;
}
function
loadTestFrame
(
goNext
)
{
let
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
src
=
'
file_test_empty_app
.
html
'
;
iframe
.
setAttribute
(
'
mozbrowser
'
true
)
;
iframe
.
addEventListener
(
"
mozbrowserloadend
"
function
onloadend
(
)
{
iframe
.
removeEventListener
(
"
mozbrowserloadend
"
onloadend
)
;
iframe
.
focus
(
)
;
var
mm
=
SpecialPowers
.
getBrowserFrameMessageManager
(
iframe
)
;
mm
.
addMessageListener
(
"
forwardevent
"
function
(
msg
)
{
inputtextEventReceiver
(
msg
.
json
)
;
}
)
;
mm
.
addMessageListener
(
"
finish
"
function
(
msg
)
{
if
(
goNext
)
{
goNext
(
)
;
}
}
)
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frameScript
.
toString
(
)
+
"
)
(
)
;
"
false
)
;
return
;
}
)
;
document
.
body
.
appendChild
(
iframe
)
;
}
function
fireEvent
(
callback
)
{
let
key
=
gCurrentTest
.
key
;
synthesizeNativeKey
(
KEYBOARD_LAYOUT_EN_US
guessNativeKeyCode
(
key
)
{
}
key
key
(
callback
)
?
callback
:
null
)
;
}
function
hardwareEventReceiver
(
evt
)
{
if
(
!
gCurrentTest
)
{
return
;
}
gCurrentTest
.
hardwareinput
.
receivedEvents
|
=
eventToCode
(
evt
.
type
)
;
gCurrentTest
.
hardwareinput
.
receivedKeys
+
=
evt
.
key
;
}
function
inputtextEventReceiver
(
evt
)
{
if
(
!
gCurrentTest
)
{
return
;
}
gCurrentTest
.
inputtext
.
receivedEvents
|
=
eventToCode
(
evt
.
type
)
;
gCurrentTest
.
inputtext
.
receivedKeys
+
=
evt
.
key
;
}
function
verifyResults
(
test
)
{
is
(
test
.
hardwareinput
.
receivedEvents
test
.
hardwareinput
.
expectedEvents
"
received
events
from
inputcontent
.
hardwareinput
are
wrong
"
)
;
is
(
test
.
hardwareinput
.
receivedKeys
test
.
hardwareinput
.
expectedKeys
"
received
keys
from
inputcontent
.
hardwareinput
are
wrong
"
)
;
is
(
test
.
inputtext
.
receivedEvents
test
.
inputtext
.
expectedEvents
"
received
events
from
input
text
are
wrong
"
)
;
is
(
test
.
inputtext
.
receivedKeys
test
.
inputtext
.
expectedKeys
"
received
keys
from
input
text
are
wrong
"
)
;
}
function
areEventsSame
(
test
)
{
return
(
test
.
hardwareinput
.
receivedEvents
=
=
test
.
hardwareinput
.
expectedEvents
)
&
&
(
test
.
inputtext
.
receivedEvents
=
=
test
.
inputtext
.
expectedEvents
)
;
}
function
InputMethod
(
inputContext
)
{
this
.
_inputContext
=
inputContext
;
this
.
init
(
)
;
}
InputMethod
.
prototype
=
{
init
:
function
im_init
(
)
{
this
.
_setKepMap
(
)
;
}
handler
:
function
im_handler
(
evt
)
{
if
(
evt
.
defaultPrevented
)
{
return
;
}
if
(
!
this
.
_inputContext
)
{
return
;
}
let
keyDict
=
this
.
_generateKeyDict
(
evt
)
;
if
(
!
keyDict
)
{
return
;
}
evt
.
preventDefault
(
)
;
this
.
_inputContext
[
evt
.
type
]
(
keyDict
)
;
}
mapKey
:
function
im_keymapping
(
key
)
{
if
(
!
this
.
_mappingTable
)
{
return
;
}
return
this
.
_mappingTable
[
key
]
;
}
_setKepMap
:
function
im_setKeyMap
(
)
{
this
.
_mappingTable
=
{
}
;
let
rotation
=
1
;
for
(
let
i
=
0
;
i
<
26
;
i
+
+
)
{
this
.
_mappingTable
[
String
.
fromCharCode
(
i
+
'
A
'
.
charCodeAt
(
0
)
)
]
=
String
.
fromCharCode
(
(
i
+
rotation
)
%
26
+
'
A
'
.
charCodeAt
(
0
)
)
;
this
.
_mappingTable
[
String
.
fromCharCode
(
i
+
'
a
'
.
charCodeAt
(
0
)
)
]
=
String
.
fromCharCode
(
(
i
+
rotation
)
%
26
+
'
a
'
.
charCodeAt
(
0
)
)
;
}
}
_generateKeyDict
:
function
im_generateKeyDict
(
evt
)
{
let
mappedKey
=
this
.
mapKey
(
evt
.
key
)
;
if
(
!
mappedKey
)
{
return
;
}
let
keyDict
=
{
key
:
mappedKey
code
:
this
.
_guessCodeFromKey
(
mappedKey
)
repeat
:
evt
.
repeat
}
;
return
keyDict
;
}
_guessCodeFromKey
:
function
im_guessCodeFromKey
(
key
)
{
if
(
/
^
[
A
-
Z
]
/
.
test
(
key
)
)
{
return
"
Key
"
+
key
;
}
else
if
(
/
^
[
a
-
z
]
/
.
test
(
key
)
)
{
return
"
Key
"
+
key
.
toUpperCase
(
)
;
}
else
if
(
/
^
[
0
-
9
]
/
.
test
(
key
)
)
{
return
"
Digit
"
+
key
.
toString
(
)
;
}
else
{
return
0
;
}
}
}
;
