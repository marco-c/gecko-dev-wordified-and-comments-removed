"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
function
arrivingHereIsBad
(
aResult
)
{
ok
(
false
"
Bad
result
!
Received
a
:
"
+
aResult
)
;
}
function
expectNotAllowedError
(
aResult
)
{
let
expected
=
"
NotAllowedError
"
;
is
(
aResult
.
slice
(
0
expected
.
length
)
expected
Expecting
a
{
expected
}
)
;
}
function
promiseMakeCredential
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
const
cose_alg_ECDSA_w_SHA256
=
-
7
;
let
publicKey
=
{
rp
:
{
id
:
content
.
document
.
domain
name
:
"
none
"
icon
:
"
none
"
}
user
:
{
id
:
new
Uint8Array
(
)
name
:
"
none
"
icon
:
"
none
"
displayName
:
"
none
"
}
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
pubKeyCredParams
:
[
{
type
:
"
public
-
key
"
alg
:
cose_alg_ECDSA_w_SHA256
}
]
}
;
return
content
.
navigator
.
credentials
.
create
(
{
publicKey
}
)
;
}
)
;
}
function
promiseGetAssertion
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
let
newCredential
=
{
type
:
"
public
-
key
"
id
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
transports
:
[
"
usb
"
]
}
;
let
publicKey
=
{
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
rpId
:
content
.
document
.
domain
allowCredentials
:
[
newCredential
]
}
;
return
content
.
navigator
.
credentials
.
get
(
{
publicKey
}
)
;
}
)
;
}
add_task
(
async
function
test_setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
webauth
.
webauthn
"
true
]
[
"
security
.
webauth
.
webauthn_enable_softtoken
"
true
]
[
"
security
.
webauth
.
webauthn_enable_usbtoken
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
test_background_tab
(
)
{
let
tab_bg
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
tab_fg
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
promiseMakeCredential
(
tab_bg
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
promiseGetAssertion
(
tab_bg
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
BrowserTestUtils
.
removeTab
(
tab_bg
)
;
await
BrowserTestUtils
.
removeTab
(
tab_fg
)
;
}
)
;
add_task
(
async
function
test_background_window
(
)
{
let
tab_bg
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
waitForFocus
(
resolve
win
)
)
;
await
promiseMakeCredential
(
tab_bg
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
promiseGetAssertion
(
tab_bg
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
BrowserTestUtils
.
removeTab
(
tab_bg
)
;
}
)
;
add_task
(
async
function
test_minimized
(
)
{
if
(
Services
.
env
.
get
(
"
MOZ_HEADLESS
"
)
)
{
return
;
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
window
.
minimize
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
tab
.
linkedBrowser
.
docShellIsActive
)
;
await
promiseMakeCredential
(
tab
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
promiseGetAssertion
(
tab
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
waitForFocus
(
resolve
window
)
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
