#
include
"
mozilla
/
dom
/
CredentialsContainer
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManager
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIDocShell
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CredentialsContainer
mParent
mManager
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CredentialsContainer
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CredentialsContainer
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CredentialsContainer
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
already_AddRefed
<
Promise
>
CreateAndReject
(
nsPIDOMWindowInner
*
aParent
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aParent
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
return
promise
.
forget
(
)
;
}
static
bool
IsInActiveTab
(
nsPIDOMWindowInner
*
aParent
)
{
MOZ_ASSERT
(
aParent
)
;
RefPtr
<
Document
>
doc
=
aParent
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
false
;
}
return
IsInActiveTab
(
doc
)
;
}
static
bool
IsSameOriginWithAncestors
(
nsPIDOMWindowInner
*
aParent
)
{
MOZ_ASSERT
(
aParent
)
;
WindowGlobalChild
*
wgc
=
aParent
-
>
GetWindowGlobalChild
(
)
;
if
(
!
wgc
)
{
return
false
;
}
for
(
WindowContext
*
parentContext
=
wgc
-
>
WindowContext
(
)
-
>
GetParentWindowContext
(
)
;
parentContext
;
parentContext
=
parentContext
-
>
GetParentWindowContext
(
)
)
{
if
(
!
wgc
-
>
IsSameOriginWith
(
parentContext
)
)
{
return
false
;
}
}
return
true
;
}
CredentialsContainer
:
:
CredentialsContainer
(
nsPIDOMWindowInner
*
aParent
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
aParent
)
;
}
CredentialsContainer
:
:
~
CredentialsContainer
(
)
=
default
;
void
CredentialsContainer
:
:
EnsureWebAuthnManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mManager
)
{
mManager
=
new
WebAuthnManager
(
mParent
)
;
}
}
JSObject
*
CredentialsContainer
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CredentialsContainer_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
CredentialsContainer
:
:
Get
(
const
CredentialRequestOptions
&
aOptions
ErrorResult
&
aRv
)
{
if
(
!
IsSameOriginWithAncestors
(
mParent
)
|
|
!
IsInActiveTab
(
mParent
)
)
{
return
CreateAndReject
(
mParent
aRv
)
;
}
EnsureWebAuthnManager
(
)
;
return
mManager
-
>
GetAssertion
(
aOptions
.
mPublicKey
aOptions
.
mSignal
aRv
)
;
}
already_AddRefed
<
Promise
>
CredentialsContainer
:
:
Create
(
const
CredentialCreationOptions
&
aOptions
ErrorResult
&
aRv
)
{
if
(
!
IsSameOriginWithAncestors
(
mParent
)
|
|
!
IsInActiveTab
(
mParent
)
)
{
return
CreateAndReject
(
mParent
aRv
)
;
}
EnsureWebAuthnManager
(
)
;
return
mManager
-
>
MakeCredential
(
aOptions
.
mPublicKey
aOptions
.
mSignal
aRv
)
;
}
already_AddRefed
<
Promise
>
CredentialsContainer
:
:
Store
(
const
Credential
&
aCredential
ErrorResult
&
aRv
)
{
if
(
!
IsSameOriginWithAncestors
(
mParent
)
|
|
!
IsInActiveTab
(
mParent
)
)
{
return
CreateAndReject
(
mParent
aRv
)
;
}
EnsureWebAuthnManager
(
)
;
return
mManager
-
>
Store
(
aCredential
aRv
)
;
}
already_AddRefed
<
Promise
>
CredentialsContainer
:
:
PreventSilentAccess
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
promise
-
>
MaybeResolveWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
}
