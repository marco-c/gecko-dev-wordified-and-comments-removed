"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
add_task
(
async
function
test_concurrent_identity_credential
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
requestCredential
=
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
let
promise
=
content
.
navigator
.
credentials
.
get
(
{
identity
:
{
mode
:
"
active
"
providers
:
[
{
configURL
:
"
https
:
/
/
example
.
net
/
browser
/
dom
/
credentialmanagement
/
identity
/
tests
/
browser
/
server_manifest
.
json
"
clientId
:
"
browser
"
nonce
:
"
nonce
"
}
]
}
}
)
;
try
{
return
await
promise
;
}
catch
(
err
)
{
return
err
;
}
}
;
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
requestCredential
)
;
let
secondRequest
=
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
requestCredential
)
;
let
concurrentResponse
=
await
secondRequest
;
ok
(
concurrentResponse
"
expect
a
result
from
the
second
request
.
"
)
;
ok
(
concurrentResponse
.
name
"
expect
a
DOMException
which
must
have
a
name
.
"
)
;
is
(
concurrentResponse
.
name
"
NotAllowedError
"
"
Expected
'
NotAllowedError
'
but
got
'
"
+
concurrentResponse
.
name
+
"
'
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
