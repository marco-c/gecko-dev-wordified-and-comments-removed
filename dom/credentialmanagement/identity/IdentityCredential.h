#
ifndef
mozilla_dom_IdentityCredential_h
#
define
mozilla_dom_IdentityCredential_h
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Credential
.
h
"
#
include
"
mozilla
/
dom
/
IPCIdentityCredential
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
dom
{
class
IdentityCredential
final
:
public
Credential
{
public
:
typedef
MozPromise
<
RefPtr
<
IdentityCredential
>
nsresult
true
>
GetIdentityCredentialPromise
;
typedef
MozPromise
<
IPCIdentityCredential
nsresult
true
>
GetIPCIdentityCredentialPromise
;
typedef
MozPromise
<
IdentityProviderConfig
nsresult
true
>
GetIdentityProviderConfigPromise
;
typedef
MozPromise
<
bool
nsresult
true
>
ValidationPromise
;
typedef
MozPromise
<
IdentityProviderAPIConfig
nsresult
true
>
GetManifestPromise
;
typedef
std
:
:
tuple
<
IdentityProviderConfig
IdentityProviderAPIConfig
>
IdentityProviderConfigWithManifest
;
typedef
MozPromise
<
IdentityProviderConfigWithManifest
nsresult
true
>
GetIdentityProviderConfigWithManifestPromise
;
typedef
MozPromise
<
std
:
:
tuple
<
IdentityProviderAPIConfig
IdentityProviderAccountList
>
nsresult
true
>
GetAccountListPromise
;
typedef
MozPromise
<
std
:
:
tuple
<
IdentityProviderToken
IdentityProviderAccount
>
nsresult
true
>
GetTokenPromise
;
typedef
MozPromise
<
std
:
:
tuple
<
IdentityProviderAPIConfig
IdentityProviderAccount
>
nsresult
true
>
GetAccountPromise
;
typedef
MozPromise
<
IdentityProviderClientMetadata
nsresult
true
>
GetMetadataPromise
;
explicit
IdentityCredential
(
nsPIDOMWindowInner
*
aParent
)
;
protected
:
~
IdentityCredential
(
)
override
;
public
:
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
CopyValuesFrom
(
const
IPCIdentityCredential
&
aOther
)
;
IPCIdentityCredential
MakeIPCIdentityCredential
(
)
;
void
GetToken
(
nsAString
&
aToken
)
const
;
void
SetToken
(
const
nsAString
&
aToken
)
;
static
already_AddRefed
<
Promise
>
LogoutRPs
(
GlobalObject
&
aGlobal
const
Sequence
<
IdentityCredentialLogoutRPsRequest
>
&
aLogoutRequests
ErrorResult
&
aRv
)
;
static
RefPtr
<
GetIdentityCredentialPromise
>
DiscoverFromExternalSource
(
nsPIDOMWindowInner
*
aParent
const
CredentialRequestOptions
&
aOptions
bool
aSameOriginWithAncestors
)
;
static
RefPtr
<
GetIPCIdentityCredentialPromise
>
DiscoverFromExternalSourceInMainProcess
(
nsIPrincipal
*
aPrincipal
CanonicalBrowsingContext
*
aBrowsingContext
const
IdentityCredentialRequestOptions
&
aOptions
)
;
static
RefPtr
<
GetIPCIdentityCredentialPromise
>
CreateCredential
(
nsIPrincipal
*
aPrincipal
BrowsingContext
*
aBrowsingContext
const
IdentityProviderConfig
&
aProvider
const
IdentityProviderAPIConfig
&
aManifest
)
;
static
RefPtr
<
ValidationPromise
>
CheckRootManifest
(
nsIPrincipal
*
aPrincipal
const
IdentityProviderConfig
&
aProvider
)
;
static
RefPtr
<
GetManifestPromise
>
FetchInternalManifest
(
nsIPrincipal
*
aPrincipal
const
IdentityProviderConfig
&
aProvider
)
;
static
RefPtr
<
GetAccountListPromise
>
FetchAccountList
(
nsIPrincipal
*
aPrincipal
const
IdentityProviderConfig
&
aProvider
const
IdentityProviderAPIConfig
&
aManifest
)
;
static
RefPtr
<
GetTokenPromise
>
FetchToken
(
nsIPrincipal
*
aPrincipal
const
IdentityProviderConfig
&
aProvider
const
IdentityProviderAPIConfig
&
aManifest
const
IdentityProviderAccount
&
aAccount
)
;
static
RefPtr
<
GetMetadataPromise
>
FetchMetadata
(
nsIPrincipal
*
aPrincipal
const
IdentityProviderConfig
&
aProvider
const
IdentityProviderAPIConfig
&
aManifest
)
;
static
RefPtr
<
GetIdentityProviderConfigWithManifestPromise
>
PromptUserToSelectProvider
(
BrowsingContext
*
aBrowsingContext
const
Sequence
<
IdentityProviderConfig
>
&
aProviders
const
Sequence
<
GetManifestPromise
:
:
ResolveOrRejectValue
>
&
aManifests
)
;
static
RefPtr
<
GetAccountPromise
>
PromptUserToSelectAccount
(
BrowsingContext
*
aBrowsingContext
const
IdentityProviderAccountList
&
aAccounts
const
IdentityProviderConfig
&
aProvider
const
IdentityProviderAPIConfig
&
aManifest
)
;
static
RefPtr
<
GetAccountPromise
>
PromptUserWithPolicy
(
BrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aPrincipal
const
IdentityProviderAccount
&
aAccount
const
IdentityProviderAPIConfig
&
aManifest
const
IdentityProviderConfig
&
aProvider
)
;
static
void
CloseUserInterface
(
BrowsingContext
*
aBrowsingContext
)
;
private
:
nsAutoString
mToken
;
}
;
}
#
endif
