#
ifndef
mozilla_dom_IdentityNetworkHelpers_h
#
define
mozilla_dom_IdentityNetworkHelpers_h
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
Promise
-
inl
.
h
"
#
include
"
mozilla
/
dom
/
Request
.
h
"
#
include
"
mozilla
/
dom
/
Response
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
dom
{
template
<
typename
T
typename
TPromise
=
MozPromise
<
T
nsresult
true
>
>
RefPtr
<
TPromise
>
FetchJSONStructure
(
Request
*
aRequest
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
RefPtr
<
typename
TPromise
:
:
Private
>
resultPromise
=
new
typename
TPromise
:
:
Private
(
__func__
)
;
RequestOrUTF8String
fetchInput
;
fetchInput
.
SetAsRequest
(
)
=
aRequest
;
RootedDictionary
<
RequestInit
>
requestInit
(
RootingCx
(
)
)
;
IgnoredErrorResult
error
;
RefPtr
<
Promise
>
fetchPromise
=
FetchRequest
(
aRequest
-
>
GetParentObject
(
)
fetchInput
requestInit
CallerType
:
:
System
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
resultPromise
;
}
RefPtr
<
PromiseNativeHandler
>
reject
=
new
MozPromiseRejectOnDestruction
{
resultPromise
__func__
}
;
fetchPromise
-
>
AddCallbacksWithCycleCollectedArgs
(
[
resultPromise
reject
]
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
)
{
if
(
NS_WARN_IF
(
!
aValue
.
isObject
(
)
)
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
&
aValue
.
toObject
(
)
)
;
MOZ_ASSERT
(
obj
)
;
Response
*
response
=
nullptr
;
if
(
NS_WARN_IF
(
NS_FAILED
(
UNWRAP_OBJECT
(
Response
&
obj
response
)
)
)
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
if
(
!
response
-
>
Ok
(
)
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
IgnoredErrorResult
error
;
RefPtr
<
Promise
>
jsonPromise
=
response
-
>
ConsumeBody
(
aCx
BodyConsumer
:
:
ConsumeType
:
:
Blob
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
jsonPromise
-
>
AddCallbacksWithCycleCollectedArgs
(
[
resultPromise
]
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
)
{
T
result
;
bool
success
=
result
.
Init
(
aCx
aValue
)
;
if
(
!
success
)
{
resultPromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
resultPromise
-
>
Resolve
(
result
__func__
)
;
}
[
resultPromise
]
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
)
{
resultPromise
-
>
Reject
(
Promise
:
:
TryExtractNSResultFromRejectionValue
(
aValue
)
__func__
)
;
}
)
;
jsonPromise
-
>
AppendNativeHandler
(
reject
)
;
}
[
resultPromise
]
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
)
{
resultPromise
-
>
Reject
(
Promise
:
:
TryExtractNSResultFromRejectionValue
(
aValue
)
__func__
)
;
}
)
;
fetchPromise
-
>
AppendNativeHandler
(
reject
)
;
return
resultPromise
;
}
}
#
endif
