#
include
"
mozilla
/
dom
/
WebIdentityChild
.
h
"
#
include
"
mozilla
/
dom
/
WebIdentityHandler
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
namespace
mozilla
:
:
dom
{
void
WebIdentityChild
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
if
(
mHandler
)
{
mHandler
-
>
ActorDestroyed
(
)
;
mHandler
=
nullptr
;
}
}
void
WebIdentityChild
:
:
SetHandler
(
WebIdentityHandler
*
aHandler
)
{
mHandler
=
aHandler
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebIdentityChild
:
:
RecvOpenContinuationWindow
(
nsIURI
*
aContinueURI
const
OpenContinuationWindowResolver
&
aResolver
)
{
MOZ_ASSERT
(
mHandler
)
;
nsPIDOMWindowInner
*
window
=
mHandler
-
>
GetWindow
(
)
;
MOZ_ASSERT
(
window
)
;
MOZ_ASSERT
(
window
-
>
GetWindowContext
(
)
)
;
nsGlobalWindowOuter
*
outer
=
nsGlobalWindowOuter
:
:
GetOuterWindowWithId
(
window
-
>
GetWindowContext
(
)
-
>
OuterWindowId
(
)
)
;
RefPtr
<
BrowsingContext
>
newBC
;
nsresult
rv
=
outer
-
>
OpenJS
(
aContinueURI
-
>
GetSpecOrDefault
(
)
u
"
_blank
"
_ns
u
"
popup
"
_ns
getter_AddRefs
(
newBC
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
rv
)
;
}
else
if
(
!
newBC
)
{
aResolver
(
NS_ERROR_UNEXPECTED
)
;
}
else
{
aResolver
(
newBC
-
>
Id
(
)
)
;
}
return
IPC_OK
(
)
;
}
}
