#
include
"
NotificationChild
.
h
"
#
include
"
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
Notification
.
h
"
#
include
"
nsFocusManager
.
h
"
namespace
mozilla
:
:
dom
:
:
notification
{
using
IPCResult
=
mozilla
:
:
ipc
:
:
IPCResult
;
NotificationChild
:
:
NotificationChild
(
Notification
*
aNonPersistentNotification
WindowGlobalChild
*
aWindow
)
:
mNonPersistentNotification
(
aNonPersistentNotification
)
mWindow
(
aWindow
)
{
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
IPCResult
NotificationChild
:
:
RecvNotifyClick
(
)
{
bool
intoFocus
=
true
;
if
(
mNonPersistentNotification
)
{
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
mNonPersistentNotification
nullptr
nullptr
)
;
event
-
>
InitEvent
(
u
"
click
"
_ns
false
true
)
;
event
-
>
SetTrusted
(
true
)
;
WantsPopupControlCheck
popupControlCheck
(
event
)
;
intoFocus
=
mNonPersistentNotification
-
>
DispatchEvent
(
*
event
CallerType
:
:
System
IgnoreErrors
(
)
)
;
}
if
(
!
intoFocus
)
{
return
IPC_OK
(
)
;
}
if
(
mWindow
)
{
if
(
RefPtr
<
nsGlobalWindowInner
>
inner
=
mWindow
-
>
GetWindowGlobal
(
)
)
{
if
(
inner
-
>
IsCurrentInnerWindow
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
inner
-
>
GetOuterWindow
(
)
;
nsFocusManager
:
:
FocusWindow
(
outer
CallerType
:
:
System
)
;
}
}
}
return
IPC_OK
(
)
;
}
void
NotificationChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
RefPtr
<
Notification
>
notification
=
mNonPersistentNotification
.
get
(
)
)
{
notification
-
>
MaybeNotifyClose
(
)
;
}
}
}
