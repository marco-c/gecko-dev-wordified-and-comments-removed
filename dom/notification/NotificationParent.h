#
ifndef
DOM_NOTIFICATION_NOTIFICATIONPARENT_H_
#
define
DOM_NOTIFICATION_NOTIFICATIONPARENT_H_
#
include
"
mozilla
/
dom
/
notification
/
PNotificationParent
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
mozilla
/
dom
/
DOMTypes
.
h
"
namespace
mozilla
:
:
dom
:
:
notification
{
enum
class
CloseMode
;
enum
class
AlertTopic
:
uint8_t
{
Disable
Settings
Click
Show
Finished
}
;
class
NotificationParent
final
:
public
PNotificationParent
public
nsISupports
public
SupportsWeakPtr
{
using
IPCResult
=
mozilla
:
:
ipc
:
:
IPCResult
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NotificationParent
(
NotNull
<
nsIPrincipal
*
>
aPrincipal
NotNull
<
nsIPrincipal
*
>
aEffectiveStoragePrincipal
bool
aIsSecureContext
const
nsAString
&
aScope
const
IPCNotification
&
aNotification
)
:
mPrincipal
(
aPrincipal
)
mEffectiveStoragePrincipal
(
aEffectiveStoragePrincipal
)
mIsSecureContext
(
aIsSecureContext
)
mId
(
aNotification
.
id
(
)
)
mScope
(
aScope
)
mOptions
(
aNotification
.
options
(
)
)
{
}
;
nsresult
HandleAlertTopic
(
AlertTopic
aTopic
)
;
IPCResult
RecvShow
(
ShowResolver
&
&
aResolver
)
;
IPCResult
RecvClose
(
)
;
nsresult
BindToMainThread
(
Endpoint
<
PNotificationParent
>
&
&
aParentEndpoint
PBackgroundParent
:
:
CreateNotificationParentResolver
&
&
aResolver
)
;
private
:
~
NotificationParent
(
)
=
default
;
nsresult
Show
(
)
;
nsresult
FireClickEvent
(
)
;
void
Unregister
(
)
;
Maybe
<
NotificationParent
:
:
ShowResolver
>
mResolver
;
NotNull
<
nsCOMPtr
<
nsIPrincipal
>
>
mPrincipal
;
NotNull
<
nsCOMPtr
<
nsIPrincipal
>
>
mEffectiveStoragePrincipal
;
bool
mIsSecureContext
;
nsString
mId
;
nsString
mScope
;
const
IPCNotificationOptions
mOptions
;
nsString
mAlertName
;
bool
mDangling
=
false
;
}
;
}
#
endif
