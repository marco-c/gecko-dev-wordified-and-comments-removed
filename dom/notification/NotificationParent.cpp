#
include
"
NotificationParent
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
NotificationUtils
.
h
"
#
include
"
mozilla
/
AlertNotification
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
ClientOpenWindowUtils
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIAlertsService
.
h
"
#
include
"
nsIServiceWorkerManager
.
h
"
namespace
mozilla
:
:
dom
:
:
notification
{
NS_IMPL_ISUPPORTS0
(
NotificationParent
)
class
NotificationObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NotificationObserver
(
const
nsAString
&
aScope
nsIPrincipal
*
aPrincipal
IPCNotification
aNotification
NotificationParent
&
aParent
)
:
mScope
(
aScope
)
mPrincipal
(
aPrincipal
)
mNotification
(
std
:
:
move
(
aNotification
)
)
mActor
(
&
aParent
)
{
}
NS_IMETHODIMP
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
{
AlertTopic
topic
=
ToAlertTopic
(
aTopic
)
;
if
(
topic
=
=
AlertTopic
:
:
Disable
)
{
return
RemovePermission
(
mPrincipal
)
;
}
if
(
topic
=
=
AlertTopic
:
:
Settings
)
{
return
OpenSettings
(
mPrincipal
)
;
}
RefPtr
<
NotificationParent
>
actor
=
mActor
.
get
(
)
;
if
(
actor
&
&
actor
-
>
CanSend
(
)
)
{
actor
-
>
HandleAlertTopic
(
topic
)
;
if
(
mScope
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
}
else
if
(
mScope
.
IsEmpty
(
)
)
{
if
(
topic
=
=
AlertTopic
:
:
Click
)
{
return
OpenWindow
(
)
;
}
return
NS_OK
;
}
MOZ_ASSERT
(
!
mScope
.
IsEmpty
(
)
)
;
if
(
topic
=
=
AlertTopic
:
:
Show
)
{
(
void
)
NS_WARN_IF
(
NS_FAILED
(
AdjustPushQuota
(
mPrincipal
NotificationStatusChange
:
:
Shown
)
)
)
;
nsresult
rv
=
PersistNotification
(
mPrincipal
mNotification
mScope
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Could
not
persist
Notification
"
)
;
}
return
NS_OK
;
}
MOZ_ASSERT
(
topic
=
=
AlertTopic
:
:
Click
|
|
topic
=
=
AlertTopic
:
:
Finished
)
;
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
!
swm
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
originSuffix
;
MOZ_TRY
(
mPrincipal
-
>
GetOriginSuffix
(
originSuffix
)
)
;
if
(
topic
=
=
AlertTopic
:
:
Click
)
{
nsresult
rv
=
swm
-
>
SendNotificationClickEvent
(
originSuffix
mScope
mNotification
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
OpenWindow
(
)
;
}
return
NS_OK
;
}
MOZ_ASSERT
(
topic
=
=
AlertTopic
:
:
Finished
)
;
(
void
)
NS_WARN_IF
(
NS_FAILED
(
AdjustPushQuota
(
mPrincipal
NotificationStatusChange
:
:
Closed
)
)
)
;
(
void
)
NS_WARN_IF
(
NS_FAILED
(
UnpersistNotification
(
mPrincipal
mNotification
.
id
(
)
)
)
)
;
(
void
)
swm
-
>
SendNotificationCloseEvent
(
originSuffix
mScope
mNotification
)
;
return
NS_OK
;
}
private
:
virtual
~
NotificationObserver
(
)
=
default
;
static
AlertTopic
ToAlertTopic
(
const
char
*
aTopic
)
{
if
(
!
strcmp
(
"
alertdisablecallback
"
aTopic
)
)
{
return
AlertTopic
:
:
Disable
;
}
if
(
!
strcmp
(
"
alertsettingscallback
"
aTopic
)
)
{
return
AlertTopic
:
:
Settings
;
}
if
(
!
strcmp
(
"
alertclickcallback
"
aTopic
)
)
{
return
AlertTopic
:
:
Click
;
}
if
(
!
strcmp
(
"
alertshow
"
aTopic
)
)
{
return
AlertTopic
:
:
Show
;
}
if
(
!
strcmp
(
"
alertfinished
"
aTopic
)
)
{
return
AlertTopic
:
:
Finished
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
alert
topic
"
)
;
return
AlertTopic
:
:
Finished
;
}
nsresult
OpenWindow
(
)
{
nsAutoCString
origin
;
MOZ_TRY
(
mPrincipal
-
>
GetOrigin
(
origin
)
)
;
mozilla
:
:
ipc
:
:
PrincipalInfo
info
{
}
;
MOZ_TRY
(
PrincipalToPrincipalInfo
(
mPrincipal
&
info
)
)
;
(
void
)
ClientOpenWindow
(
nullptr
ClientOpenWindowArgs
(
info
Nothing
(
)
"
"
_ns
origin
)
)
;
return
NS_OK
;
}
nsString
mScope
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
IPCNotification
mNotification
;
WeakPtr
<
NotificationParent
>
mActor
;
}
;
NS_IMPL_ISUPPORTS
(
NotificationObserver
nsIObserver
)
nsresult
NotificationParent
:
:
HandleAlertTopic
(
AlertTopic
aTopic
)
{
if
(
aTopic
=
=
AlertTopic
:
:
Click
)
{
return
FireClickEvent
(
)
;
}
if
(
aTopic
=
=
AlertTopic
:
:
Show
)
{
if
(
!
mResolver
)
{
#
ifdef
ANDROID
return
NS_OK
;
#
else
MOZ_ASSERT_UNREACHABLE
(
"
Are
we
getting
double
show
events
?
"
)
;
return
NS_ERROR_FAILURE
;
#
endif
}
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
)
)
;
return
NS_OK
;
}
if
(
aTopic
=
=
AlertTopic
:
:
Finished
)
{
if
(
mResolver
)
{
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
NS_ERROR_FAILURE
)
)
;
}
mDangling
=
true
;
Close
(
)
;
return
NS_OK
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
notification
topic
"
)
;
return
NS_OK
;
}
nsresult
NotificationParent
:
:
FireClickEvent
(
)
{
if
(
!
mScope
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
if
(
SendNotifyClick
(
)
)
{
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
mozilla
:
:
ipc
:
:
IPCResult
NotificationParent
:
:
RecvShow
(
ShowResolver
&
&
aResolver
)
{
MOZ_ASSERT
(
mId
.
IsEmpty
(
)
"
ID
should
not
be
given
for
a
new
notification
"
)
;
mResolver
.
emplace
(
std
:
:
move
(
aResolver
)
)
;
NotificationPermission
permission
=
GetNotificationPermission
(
mPrincipal
mEffectiveStoragePrincipal
mIsSecureContext
PermissionCheckPurpose
:
:
NotificationShow
)
;
if
(
permission
!
=
NotificationPermission
:
:
Granted
)
{
CopyableErrorResult
rv
;
rv
.
ThrowTypeError
(
"
Permission
to
show
Notification
denied
.
"
)
;
mResolver
.
take
(
)
.
value
(
)
(
rv
)
;
mDangling
=
true
;
return
IPC_OK
(
)
;
}
nsresult
rv
=
Show
(
)
;
if
(
NS_FAILED
(
rv
)
&
&
mResolver
)
{
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
rv
)
)
;
}
return
IPC_OK
(
)
;
}
nsresult
NotificationParent
:
:
Show
(
)
{
nsString
obsoleteCookie
=
u
"
notification
:
"
_ns
;
bool
requireInteraction
=
mOptions
.
requireInteraction
(
)
;
if
(
!
StaticPrefs
:
:
dom_webnotifications_requireinteraction_enabled
(
)
)
{
requireInteraction
=
false
;
}
nsCOMPtr
<
nsIAlertNotification
>
alert
=
do_CreateInstance
(
ALERT_NOTIFICATION_CONTRACTID
)
;
if
(
!
alert
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MOZ_TRY
(
alert
-
>
Init
(
mOptions
.
tag
(
)
mOptions
.
icon
(
)
mOptions
.
title
(
)
mOptions
.
body
(
)
true
obsoleteCookie
NS_ConvertASCIItoUTF16
(
GetEnumString
(
mOptions
.
dir
(
)
)
)
mOptions
.
lang
(
)
mOptions
.
dataSerialized
(
)
mPrincipal
mPrincipal
-
>
GetIsInPrivateBrowsing
(
)
requireInteraction
mOptions
.
silent
(
)
mOptions
.
vibrate
(
)
)
)
;
nsTArray
<
RefPtr
<
nsIAlertAction
>
>
actions
;
MOZ_ASSERT
(
mOptions
.
actions
(
)
.
Length
(
)
<
=
kMaxActions
)
;
for
(
const
auto
&
action
:
mOptions
.
actions
(
)
)
{
actions
.
AppendElement
(
new
AlertAction
(
action
.
name
(
)
action
.
title
(
)
)
)
;
}
alert
-
>
SetActions
(
actions
)
;
MOZ_TRY
(
alert
-
>
GetId
(
mId
)
)
;
nsCOMPtr
<
nsIAlertsService
>
alertService
=
components
:
:
Alerts
:
:
Service
(
)
;
RefPtr
<
NotificationObserver
>
observer
=
new
NotificationObserver
(
mScope
mPrincipal
IPCNotification
(
mId
mOptions
)
*
this
)
;
MOZ_TRY
(
alertService
-
>
ShowAlert
(
alert
observer
)
)
;
#
ifdef
ANDROID
observer
-
>
Observe
(
nullptr
"
alertshow
"
nullptr
)
;
#
endif
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
NotificationParent
:
:
RecvClose
(
)
{
Unregister
(
)
;
Close
(
)
;
return
IPC_OK
(
)
;
}
void
NotificationParent
:
:
Unregister
(
)
{
if
(
mDangling
)
{
return
;
}
mDangling
=
true
;
UnregisterNotification
(
mPrincipal
mId
)
;
}
nsresult
NotificationParent
:
:
BindToMainThread
(
Endpoint
<
PNotificationParent
>
&
&
aParentEndpoint
PBackgroundParent
:
:
CreateNotificationParentResolver
&
&
aResolver
)
{
if
(
mOptions
.
actions
(
)
.
Length
(
)
>
kMaxActions
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsIThread
>
thread
=
NS_GetCurrentThread
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
NotificationParent
:
:
BindToMainThread
"
[
self
=
RefPtr
(
this
)
endpoint
=
std
:
:
move
(
aParentEndpoint
)
resolver
=
std
:
:
move
(
aResolver
)
thread
]
(
)
mutable
{
bool
result
=
endpoint
.
Bind
(
self
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
NotificationParent
:
:
BindToMainThreadResult
"
[
result
resolver
=
std
:
:
move
(
resolver
)
]
(
)
{
resolver
(
result
)
;
}
)
)
;
}
)
)
;
return
NS_OK
;
}
}
