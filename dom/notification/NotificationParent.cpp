#
include
"
NotificationParent
.
h
"
#
include
"
NotificationUtils
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIAlertsService
.
h
"
namespace
mozilla
:
:
dom
:
:
notification
{
NS_IMPL_ISUPPORTS
(
NotificationParent
nsIObserver
)
NS_IMETHODIMP
NotificationParent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
"
alertdisablecallback
"
aTopic
)
)
{
return
RemovePermission
(
mPrincipal
)
;
}
if
(
!
strcmp
(
"
alertsettingscallback
"
aTopic
)
)
{
return
OpenSettings
(
mPrincipal
)
;
}
if
(
!
strcmp
(
"
alertshow
"
aTopic
)
)
{
(
void
)
NS_WARN_IF
(
NS_FAILED
(
AdjustPushQuota
(
mPrincipal
NotificationStatusChange
:
:
Shown
)
)
)
;
if
(
!
mResolver
)
{
#
ifdef
ANDROID
return
NS_OK
;
#
else
MOZ_ASSERT_UNREACHABLE
(
"
Are
we
getting
double
show
events
?
"
)
;
return
NS_ERROR_FAILURE
;
#
endif
}
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
)
)
;
return
NS_OK
;
}
if
(
!
strcmp
(
"
alertfinished
"
aTopic
)
)
{
(
void
)
NS_WARN_IF
(
NS_FAILED
(
AdjustPushQuota
(
mPrincipal
NotificationStatusChange
:
:
Closed
)
)
)
;
if
(
mResolver
)
{
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
NS_ERROR_FAILURE
)
)
;
return
NS_OK
;
}
}
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
NotificationParent
:
:
RecvShow
(
ShowResolver
&
&
aResolver
)
{
mResolver
.
emplace
(
std
:
:
move
(
aResolver
)
)
;
nsresult
rv
=
Show
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
rv
)
)
;
}
return
IPC_OK
(
)
;
}
nsresult
NotificationParent
:
:
Show
(
)
{
nsAutoString
alertName
;
GetAlertName
(
alertName
)
;
nsresult
rv
=
PersistNotification
(
mPrincipal
mId
alertName
mOptions
mScope
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Could
not
persist
Notification
"
)
;
}
nsString
obsoleteCookie
=
u
"
notification
:
"
_ns
;
bool
requireInteraction
=
mOptions
.
requireInteraction
(
)
;
if
(
!
StaticPrefs
:
:
dom_webnotifications_requireinteraction_enabled
(
)
)
{
requireInteraction
=
false
;
}
nsCOMPtr
<
nsIAlertNotification
>
alert
=
do_CreateInstance
(
ALERT_NOTIFICATION_CONTRACTID
)
;
if
(
!
alert
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MOZ_TRY
(
alert
-
>
Init
(
alertName
mOptions
.
icon
(
)
mOptions
.
title
(
)
mOptions
.
body
(
)
true
obsoleteCookie
NS_ConvertASCIItoUTF16
(
GetEnumString
(
mOptions
.
dir
(
)
)
)
mOptions
.
lang
(
)
mOptions
.
dataSerialized
(
)
mPrincipal
mPrincipal
-
>
GetIsInPrivateBrowsing
(
)
requireInteraction
mOptions
.
silent
(
)
mOptions
.
vibrate
(
)
)
)
;
nsCOMPtr
<
nsIAlertsService
>
alertService
=
components
:
:
Alerts
:
:
Service
(
)
;
JSONStringWriteFunc
<
nsAutoCString
>
persistentData
;
JSONWriter
w
(
persistentData
)
;
w
.
Start
(
)
;
nsAutoString
origin
;
GetOrigin
(
mPrincipal
origin
)
;
w
.
StringProperty
(
"
origin
"
NS_ConvertUTF16toUTF8
(
origin
)
)
;
w
.
StringProperty
(
"
id
"
NS_ConvertUTF16toUTF8
(
mId
)
)
;
nsAutoCString
originSuffix
;
mPrincipal
-
>
GetOriginSuffix
(
originSuffix
)
;
w
.
StringProperty
(
"
originSuffix
"
originSuffix
)
;
w
.
End
(
)
;
MOZ_TRY
(
alertService
-
>
ShowPersistentNotification
(
NS_ConvertUTF8toUTF16
(
persistentData
.
StringCRef
(
)
)
alert
this
)
)
;
#
ifdef
ANDROID
mResolver
.
take
(
)
.
value
(
)
(
CopyableErrorResult
(
)
)
;
#
endif
return
NS_OK
;
}
nsresult
NotificationParent
:
:
BindToMainThread
(
Endpoint
<
PNotificationParent
>
&
&
aParentEndpoint
PBackgroundParent
:
:
CreateNotificationParentResolver
&
&
aResolver
)
{
nsCOMPtr
<
nsIThread
>
thread
=
NS_GetCurrentThread
(
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
NotificationParent
:
:
BindToMainThread
"
[
self
=
RefPtr
(
this
)
endpoint
=
std
:
:
move
(
aParentEndpoint
)
resolver
=
std
:
:
move
(
aResolver
)
thread
]
(
)
mutable
{
bool
result
=
endpoint
.
Bind
(
self
)
;
thread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
NotificationParent
:
:
BindToMainThreadResult
"
[
result
resolver
=
std
:
:
move
(
resolver
)
]
(
)
{
resolver
(
result
)
;
}
)
)
;
}
)
)
;
return
NS_OK
;
}
void
NotificationParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
nsAutoString
alertName
;
GetAlertName
(
alertName
)
;
UnregisterNotification
(
mPrincipal
mId
alertName
CloseMode
:
:
InactiveGlobal
)
;
}
void
NotificationParent
:
:
MaybeInitAlertName
(
)
{
if
(
!
mAlertName
.
IsEmpty
(
)
)
{
return
;
}
ComputeAlertName
(
mPrincipal
mOptions
.
tag
(
)
mId
mAlertName
)
;
}
}
