#
include
"
WakeLock
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
#
include
"
mozilla
/
HalWakeLock
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIPropertyBag2
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
using
namespace
mozilla
:
:
hal
;
namespace
mozilla
:
:
dom
{
NS_INTERFACE_MAP_BEGIN
(
WakeLock
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIDOMEventListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMEventListener
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY
(
nsIWakeLock
)
NS_INTERFACE_MAP_END
NS_IMPL_ADDREF
(
WakeLock
)
NS_IMPL_RELEASE
(
WakeLock
)
WakeLock
:
:
~
WakeLock
(
)
{
DoUnlock
(
)
;
DetachEventListener
(
)
;
}
nsresult
WakeLock
:
:
Init
(
const
nsAString
&
aTopic
nsPIDOMWindowInner
*
aWindow
)
{
MOZ_ASSERT
(
mTopic
.
IsEmpty
(
)
)
;
if
(
aTopic
.
IsEmpty
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
mTopic
.
Assign
(
aTopic
)
;
mWindow
=
do_GetWeakReference
(
aWindow
)
;
if
(
aWindow
)
{
nsCOMPtr
<
Document
>
doc
=
aWindow
-
>
GetExtantDoc
(
)
;
NS_ENSURE_STATE
(
doc
)
;
mHidden
=
doc
-
>
Hidden
(
)
;
}
AttachEventListener
(
)
;
DoLock
(
)
;
return
NS_OK
;
}
void
WakeLock
:
:
DoLock
(
)
{
if
(
!
mLocked
)
{
mLocked
=
true
;
hal
:
:
ModifyWakeLock
(
mTopic
hal
:
:
WAKE_LOCK_ADD_ONE
mHidden
?
hal
:
:
WAKE_LOCK_ADD_ONE
:
hal
:
:
WAKE_LOCK_NO_CHANGE
)
;
}
}
void
WakeLock
:
:
DoUnlock
(
)
{
if
(
mLocked
)
{
mLocked
=
false
;
hal
:
:
ModifyWakeLock
(
mTopic
hal
:
:
WAKE_LOCK_REMOVE_ONE
mHidden
?
hal
:
:
WAKE_LOCK_REMOVE_ONE
:
hal
:
:
WAKE_LOCK_NO_CHANGE
)
;
}
}
void
WakeLock
:
:
AttachEventListener
(
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryReferent
(
mWindow
)
)
{
nsCOMPtr
<
Document
>
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
doc
)
{
doc
-
>
AddSystemEventListener
(
u
"
visibilitychange
"
_ns
this
true
false
)
;
nsCOMPtr
<
EventTarget
>
target
=
do_QueryInterface
(
window
)
;
target
-
>
AddSystemEventListener
(
u
"
pagehide
"
_ns
this
true
false
)
;
target
-
>
AddSystemEventListener
(
u
"
pageshow
"
_ns
this
true
false
)
;
}
}
}
void
WakeLock
:
:
DetachEventListener
(
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryReferent
(
mWindow
)
)
{
nsCOMPtr
<
Document
>
doc
=
window
-
>
GetExtantDoc
(
)
;
if
(
doc
)
{
doc
-
>
RemoveSystemEventListener
(
u
"
visibilitychange
"
_ns
this
true
)
;
nsCOMPtr
<
EventTarget
>
target
=
do_QueryInterface
(
window
)
;
target
-
>
RemoveSystemEventListener
(
u
"
pagehide
"
_ns
this
true
)
;
target
-
>
RemoveSystemEventListener
(
u
"
pageshow
"
_ns
this
true
)
;
}
}
}
void
WakeLock
:
:
Unlock
(
ErrorResult
&
aRv
)
{
if
(
!
mLocked
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
DoUnlock
(
)
;
DetachEventListener
(
)
;
}
void
WakeLock
:
:
GetTopic
(
nsAString
&
aTopic
)
{
aTopic
.
Assign
(
mTopic
)
;
}
NS_IMETHODIMP
WakeLock
:
:
HandleEvent
(
Event
*
aEvent
)
{
nsAutoString
type
;
aEvent
-
>
GetType
(
type
)
;
if
(
type
.
EqualsLiteral
(
"
visibilitychange
"
)
)
{
nsCOMPtr
<
Document
>
doc
=
do_QueryInterface
(
aEvent
-
>
GetTarget
(
)
)
;
NS_ENSURE_STATE
(
doc
)
;
bool
oldHidden
=
mHidden
;
mHidden
=
doc
-
>
Hidden
(
)
;
if
(
mLocked
&
&
oldHidden
!
=
mHidden
)
{
hal
:
:
ModifyWakeLock
(
mTopic
hal
:
:
WAKE_LOCK_NO_CHANGE
mHidden
?
hal
:
:
WAKE_LOCK_ADD_ONE
:
hal
:
:
WAKE_LOCK_REMOVE_ONE
)
;
}
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
pagehide
"
)
)
{
DoUnlock
(
)
;
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
pageshow
"
)
)
{
DoLock
(
)
;
return
NS_OK
;
}
return
NS_OK
;
}
NS_IMETHODIMP
WakeLock
:
:
Unlock
(
)
{
ErrorResult
error
;
Unlock
(
error
)
;
return
error
.
StealNSResult
(
)
;
}
nsPIDOMWindowInner
*
WakeLock
:
:
GetParentObject
(
)
const
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mWindow
)
;
return
window
;
}
}
