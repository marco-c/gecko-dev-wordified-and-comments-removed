#
ifndef
DOM_WAKELOCKJS_H_
#
define
DOM_WAKELOCKJS_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
HalBatteryInformation
.
h
"
#
include
"
mozilla
/
dom
/
WakeLockBinding
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIDocumentActivity
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
:
:
dom
{
class
Promise
;
class
Document
;
class
WakeLockSentinel
;
}
namespace
mozilla
:
:
dom
{
class
WakeLockJS
final
:
public
nsIDOMEventListener
public
nsWrapperCache
public
hal
:
:
BatteryObserver
public
nsIDocumentActivity
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIDOCUMENTACTIVITY
NS_DECL_NSIOBSERVER
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS_AMBIGUOUS
(
WakeLockJS
nsIDOMEventListener
)
public
:
explicit
WakeLockJS
(
nsPIDOMWindowInner
*
aWindow
)
;
protected
:
~
WakeLockJS
(
)
;
public
:
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Notify
(
const
hal
:
:
BatteryInformation
&
aBatteryInfo
)
override
;
already_AddRefed
<
Promise
>
Request
(
WakeLockType
aType
ErrorResult
&
aRv
)
;
private
:
enum
class
RequestError
{
Success
DocInactive
DocHidden
PolicyDisallowed
PrefDisabled
InternalFailure
PermissionDenied
}
;
static
nsLiteralCString
GetRequestErrorMessage
(
RequestError
aRv
)
;
static
RequestError
WakeLockAllowedForDocument
(
Document
*
aDoc
)
;
void
AttachListeners
(
)
;
void
DetachListeners
(
)
;
Result
<
already_AddRefed
<
WakeLockSentinel
>
RequestError
>
Obtain
(
WakeLockType
aType
)
;
RefPtr
<
nsPIDOMWindowInner
>
mWindow
;
}
;
MOZ_CAN_RUN_SCRIPT
void
ReleaseWakeLock
(
Document
*
aDoc
WakeLockSentinel
*
aLock
WakeLockType
aType
)
;
}
#
endif
