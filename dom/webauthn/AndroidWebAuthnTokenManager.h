#
ifndef
mozilla_dom_AndroidWebAuthnTokenManager_h
#
define
mozilla_dom_AndroidWebAuthnTokenManager_h
#
include
"
mozilla
/
dom
/
U2FTokenTransport
.
h
"
#
include
"
mozilla
/
java
/
WebAuthnTokenManagerNatives
.
h
"
namespace
mozilla
{
namespace
dom
{
constexpr
auto
kSecurityError
=
u
"
SECURITY_ERR
"
_ns
;
constexpr
auto
kConstraintError
=
u
"
CONSTRAINT_ERR
"
_ns
;
constexpr
auto
kNotSupportedError
=
u
"
NOT_SUPPORTED_ERR
"
_ns
;
constexpr
auto
kInvalidStateError
=
u
"
INVALID_STATE_ERR
"
_ns
;
constexpr
auto
kNotAllowedError
=
u
"
NOT_ALLOWED_ERR
"
_ns
;
constexpr
auto
kAbortError
=
u
"
ABORT_ERR
"
_ns
;
constexpr
auto
kEncodingError
=
u
"
ENCODING_ERR
"
_ns
;
constexpr
auto
kDataError
=
u
"
DATA_ERR
"
_ns
;
constexpr
auto
kTimeoutError
=
u
"
TIMEOUT_ERR
"
_ns
;
constexpr
auto
kNetworkError
=
u
"
NETWORK_ERR
"
_ns
;
constexpr
auto
kUnknownError
=
u
"
UNKNOWN_ERR
"
_ns
;
class
AndroidWebAuthnResult
{
public
:
explicit
AndroidWebAuthnResult
(
const
nsAString
&
aErrorCode
)
:
mErrorCode
(
aErrorCode
)
{
}
explicit
AndroidWebAuthnResult
(
const
java
:
:
WebAuthnTokenManager
:
:
MakeCredentialResponse
:
:
LocalRef
&
aResponse
)
;
explicit
AndroidWebAuthnResult
(
const
java
:
:
WebAuthnTokenManager
:
:
GetAssertionResponse
:
:
LocalRef
&
aResponse
)
;
AndroidWebAuthnResult
(
)
=
delete
;
bool
IsError
(
)
const
{
return
NS_FAILED
(
GetError
(
)
)
;
}
nsresult
GetError
(
)
const
{
if
(
mErrorCode
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
else
if
(
mErrorCode
.
Equals
(
kSecurityError
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kConstraintError
)
)
{
return
NS_ERROR_DOM_INDEXEDDB_CONSTRAINT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNotSupportedError
)
)
{
return
NS_ERROR_DOM_NOT_SUPPORTED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kInvalidStateError
)
)
{
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNotAllowedError
)
)
{
return
NS_ERROR_DOM_NOT_ALLOWED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kEncodingError
)
)
{
return
NS_ERROR_DOM_ENCODING_NOT_SUPPORTED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kDataError
)
)
{
return
NS_ERROR_DOM_DATA_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kTimeoutError
)
)
{
return
NS_ERROR_DOM_TIMEOUT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNetworkError
)
)
{
return
NS_ERROR_DOM_NETWORK_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kAbortError
)
)
{
return
NS_ERROR_DOM_ABORT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kUnknownError
)
)
{
return
NS_ERROR_DOM_UNKNOWN_ERR
;
}
else
{
__android_log_print
(
ANDROID_LOG_ERROR
"
Gecko
"
"
RegisterAbort
unknown
code
:
%
s
"
NS_ConvertUTF16toUTF8
(
mErrorCode
)
.
get
(
)
)
;
return
NS_ERROR_DOM_UNKNOWN_ERR
;
}
}
AndroidWebAuthnResult
(
const
AndroidWebAuthnResult
&
)
=
delete
;
AndroidWebAuthnResult
(
AndroidWebAuthnResult
&
&
)
=
default
;
nsTArray
<
uint8_t
>
mAttObj
;
nsTArray
<
nsString
>
mTransports
;
nsTArray
<
uint8_t
>
mKeyHandle
;
nsCString
mClientDataJSON
;
nsTArray
<
uint8_t
>
mAuthData
;
nsTArray
<
uint8_t
>
mSignature
;
nsTArray
<
uint8_t
>
mUserHandle
;
private
:
const
nsString
mErrorCode
;
}
;
class
AndroidWebAuthnTokenManager
final
:
public
U2FTokenTransport
{
public
:
explicit
AndroidWebAuthnTokenManager
(
)
;
~
AndroidWebAuthnTokenManager
(
)
{
}
virtual
RefPtr
<
U2FRegisterPromise
>
Register
(
const
WebAuthnMakeCredentialInfo
&
aInfo
bool
aForceNoneAttestation
)
override
;
virtual
RefPtr
<
U2FSignPromise
>
Sign
(
const
WebAuthnGetAssertionInfo
&
aInfo
)
override
;
void
Cancel
(
)
override
;
void
Drop
(
)
override
;
static
AndroidWebAuthnTokenManager
*
GetInstance
(
)
;
private
:
void
HandleRegisterResult
(
AndroidWebAuthnResult
&
&
aResult
)
;
void
HandleSignResult
(
AndroidWebAuthnResult
&
&
aResult
)
;
void
ClearPromises
(
)
{
mRegisterPromise
.
RejectIfExists
(
NS_ERROR_DOM_UNKNOWN_ERR
__func__
)
;
mSignPromise
.
RejectIfExists
(
NS_ERROR_DOM_UNKNOWN_ERR
__func__
)
;
mRegisterCredPropsRk
=
Nothing
(
)
;
}
void
AssertIsOnOwningThread
(
)
const
;
MozPromiseHolder
<
U2FRegisterPromise
>
mRegisterPromise
;
MozPromiseHolder
<
U2FSignPromise
>
mSignPromise
;
Maybe
<
bool
>
mRegisterCredPropsRk
;
}
;
}
}
#
endif
