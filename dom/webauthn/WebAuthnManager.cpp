#
include
"
hasht
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
WebAuthnCoseIdentifiers
.
h
"
#
include
"
WebAuthnEnumStrings
.
h
"
#
include
"
WebAuthnTransportIdentifiers
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
glean
/
GleanMetrics
.
h
"
#
include
"
mozilla
/
dom
/
AuthenticatorAssertionResponse
.
h
"
#
include
"
mozilla
/
dom
/
AuthenticatorAttestationResponse
.
h
"
#
include
"
mozilla
/
dom
/
PublicKeyCredential
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransactionChild
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManager
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnTransactionChild
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnUtil
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
JSONStringWriteFuncs
.
h
"
#
include
"
mozilla
/
JSONWriter
.
h
"
#
ifdef
XP_WIN
#
include
"
WinWebAuthnService
.
h
"
#
endif
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
dom
{
namespace
{
static
mozilla
:
:
LazyLogModule
gWebAuthnManagerLog
(
"
webauthnmanager
"
)
;
}
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
WebAuthnManager
WebAuthnManagerBase
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
WebAuthnManager
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
WebAuthnManager
WebAuthnManagerBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mTransaction
)
tmp
-
>
mTransaction
.
reset
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
WebAuthnManager
WebAuthnManagerBase
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mTransaction
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
static
nsresult
AssembleClientData
(
const
nsAString
&
aOrigin
const
CryptoBuffer
&
aChallenge
const
nsACString
&
aType
const
AuthenticationExtensionsClientInputs
&
aExtensions
nsACString
&
aJsonOut
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoCString
challengeBase64
;
nsresult
rv
=
Base64URLEncode
(
aChallenge
.
Length
(
)
aChallenge
.
Elements
(
)
Base64URLEncodePaddingPolicy
:
:
Omit
challengeBase64
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_FAILURE
;
}
JSONStringRefWriteFunc
f
(
aJsonOut
)
;
JSONWriter
w
(
f
JSONWriter
:
:
CollectionStyle
:
:
SingleLineStyle
)
;
w
.
Start
(
)
;
w
.
StringProperty
(
"
type
"
aType
)
;
w
.
StringProperty
(
"
challenge
"
challengeBase64
)
;
w
.
StringProperty
(
"
origin
"
NS_ConvertUTF16toUTF8
(
aOrigin
)
)
;
w
.
End
(
)
;
return
NS_OK
;
}
static
uint8_t
SerializeTransports
(
const
mozilla
:
:
dom
:
:
Sequence
<
nsString
>
&
aTransports
)
{
uint8_t
transports
=
0
;
static_assert
(
MOZ_WEBAUTHN_ENUM_STRINGS_VERSION
=
=
3
)
;
for
(
const
nsAString
&
str
:
aTransports
)
{
if
(
str
.
EqualsLiteral
(
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_USB
)
)
{
transports
|
=
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_ID_USB
;
}
else
if
(
str
.
EqualsLiteral
(
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_NFC
)
)
{
transports
|
=
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_ID_NFC
;
}
else
if
(
str
.
EqualsLiteral
(
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_BLE
)
)
{
transports
|
=
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_ID_BLE
;
}
else
if
(
str
.
EqualsLiteral
(
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_INTERNAL
)
)
{
transports
|
=
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_ID_INTERNAL
;
}
else
if
(
str
.
EqualsLiteral
(
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_HYBRID
)
)
{
transports
|
=
MOZ_WEBAUTHN_AUTHENTICATOR_TRANSPORT_ID_HYBRID
;
}
}
return
transports
;
}
nsresult
GetOrigin
(
nsPIDOMWindowInner
*
aParent
nsAString
&
aOrigin
nsACString
&
aHost
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
Document
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
nsresult
rv
=
nsContentUtils
:
:
GetWebExposedOriginSerialization
(
principal
aOrigin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
|
|
NS_WARN_IF
(
aOrigin
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
principal
-
>
GetIsIpAddress
(
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
if
(
aOrigin
.
EqualsLiteral
(
"
null
"
)
)
{
MOZ_LOG
(
gWebAuthnManagerLog
LogLevel
:
:
Debug
(
"
Rejecting
due
to
opaque
origin
"
)
)
;
return
NS_ERROR_DOM_NOT_ALLOWED_ERR
;
}
nsCOMPtr
<
nsIURI
>
originUri
;
auto
*
basePrin
=
BasePrincipal
:
:
Cast
(
principal
)
;
if
(
NS_FAILED
(
basePrin
-
>
GetURI
(
getter_AddRefs
(
originUri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
originUri
-
>
GetAsciiHost
(
aHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
RelaxSameOrigin
(
nsPIDOMWindowInner
*
aParent
const
nsAString
&
aInputRpId
nsACString
&
aRelaxedRpId
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
Document
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
auto
*
basePrin
=
BasePrincipal
:
:
Cast
(
principal
)
;
nsCOMPtr
<
nsIURI
>
uri
;
if
(
NS_FAILED
(
basePrin
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
originHost
;
if
(
NS_FAILED
(
uri
-
>
GetAsciiHost
(
originHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
Document
>
document
=
aParent
-
>
GetDoc
(
)
;
if
(
!
document
|
|
!
document
-
>
IsHTMLOrXHTML
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsHTMLDocument
*
html
=
document
-
>
AsHTMLDocument
(
)
;
nsCOMPtr
<
nsIURI
>
inputRpIdURI
;
nsresult
rv
=
NS_MutateURI
(
uri
)
.
SetHost
(
NS_ConvertUTF16toUTF8
(
aInputRpId
)
)
.
Finalize
(
inputRpIdURI
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
nsAutoCString
inputRpId
;
if
(
NS_FAILED
(
inputRpIdURI
-
>
GetAsciiHost
(
inputRpId
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
html
-
>
IsRegistrableDomainSuffixOfOrEqualTo
(
NS_ConvertUTF8toUTF16
(
inputRpId
)
originHost
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
aRelaxedRpId
.
Assign
(
inputRpId
)
;
return
NS_OK
;
}
void
WebAuthnManager
:
:
ClearTransaction
(
)
{
mTransaction
.
reset
(
)
;
Unfollow
(
)
;
}
void
WebAuthnManager
:
:
CancelParent
(
)
{
if
(
!
NS_WARN_IF
(
!
mChild
|
|
mTransaction
.
isNothing
(
)
)
)
{
mChild
-
>
SendRequestCancel
(
mTransaction
.
ref
(
)
.
mId
)
;
}
}
WebAuthnManager
:
:
~
WebAuthnManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
)
{
ClearTransaction
(
)
;
}
if
(
mChild
)
{
RefPtr
<
WebAuthnTransactionChild
>
c
;
mChild
.
swap
(
c
)
;
c
-
>
Disconnect
(
)
;
}
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
MakeCredential
(
const
PublicKeyCredentialCreationOptions
&
aOptions
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
nsString
origin
;
nsCString
rpId
;
nsresult
rv
=
GetOrigin
(
mParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
userId
;
userId
.
Assign
(
aOptions
.
mUser
.
mId
)
;
if
(
userId
.
Length
(
)
>
64
)
{
promise
-
>
MaybeRejectWithTypeError
(
"
user
.
id
is
too
long
"
)
;
return
promise
.
forget
(
)
;
}
uint32_t
adjustedTimeout
=
30000
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15000u
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120000u
adjustedTimeout
)
;
}
if
(
aOptions
.
mRp
.
mId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
mParent
aOptions
.
mRp
.
mId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
if
(
aOptions
.
mExtensions
.
mAppid
.
WasPassed
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
CoseAlg
>
coseAlgos
;
if
(
aOptions
.
mPubKeyCredParams
.
IsEmpty
(
)
)
{
coseAlgos
.
AppendElement
(
static_cast
<
long
>
(
CoseAlgorithmIdentifier
:
:
ES256
)
)
;
coseAlgos
.
AppendElement
(
static_cast
<
long
>
(
CoseAlgorithmIdentifier
:
:
RS256
)
)
;
}
else
{
for
(
size_t
a
=
0
;
a
<
aOptions
.
mPubKeyCredParams
.
Length
(
)
;
+
+
a
)
{
if
(
!
aOptions
.
mPubKeyCredParams
[
a
]
.
mType
.
EqualsLiteral
(
MOZ_WEBAUTHN_PUBLIC_KEY_CREDENTIAL_TYPE_PUBLIC_KEY
)
)
{
continue
;
}
coseAlgos
.
AppendElement
(
aOptions
.
mPubKeyCredParams
[
a
]
.
mAlg
)
;
}
}
if
(
coseAlgos
.
IsEmpty
(
)
&
&
!
aOptions
.
mPubKeyCredParams
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
nsresult
srv
=
AssembleClientData
(
origin
challenge
"
webauthn
.
create
"
_ns
aOptions
.
mExtensions
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredential
>
excludeList
;
for
(
const
auto
&
s
:
aOptions
.
mExcludeCredentials
)
{
WebAuthnScopedCredential
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
if
(
s
.
mTransports
.
WasPassed
(
)
)
{
c
.
transports
(
)
=
SerializeTransports
(
s
.
mTransports
.
Value
(
)
)
;
}
excludeList
.
AppendElement
(
c
)
;
}
if
(
!
MaybeCreateBackgroundActor
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnExtension
>
extensions
;
if
(
aOptions
.
mExtensions
.
mHmacCreateSecret
.
WasPassed
(
)
)
{
bool
hmacCreateSecret
=
aOptions
.
mExtensions
.
mHmacCreateSecret
.
Value
(
)
;
if
(
hmacCreateSecret
)
{
extensions
.
AppendElement
(
WebAuthnExtensionHmacSecret
(
hmacCreateSecret
)
)
;
}
}
if
(
aOptions
.
mExtensions
.
mCredProps
.
WasPassed
(
)
)
{
bool
credProps
=
aOptions
.
mExtensions
.
mCredProps
.
Value
(
)
;
if
(
credProps
)
{
extensions
.
AppendElement
(
WebAuthnExtensionCredProps
(
credProps
)
)
;
}
}
if
(
aOptions
.
mExtensions
.
mMinPinLength
.
WasPassed
(
)
)
{
bool
minPinLength
=
aOptions
.
mExtensions
.
mMinPinLength
.
Value
(
)
;
if
(
minPinLength
)
{
extensions
.
AppendElement
(
WebAuthnExtensionMinPinLength
(
minPinLength
)
)
;
}
}
const
auto
&
selection
=
aOptions
.
mAuthenticatorSelection
;
const
auto
&
attachment
=
selection
.
mAuthenticatorAttachment
;
const
nsString
&
attestation
=
aOptions
.
mAttestation
;
Maybe
<
nsString
>
authenticatorAttachment
;
if
(
attachment
.
WasPassed
(
)
)
{
authenticatorAttachment
.
emplace
(
attachment
.
Value
(
)
)
;
}
static_assert
(
MOZ_WEBAUTHN_ENUM_STRINGS_VERSION
=
=
3
)
;
bool
useResidentKeyValue
=
selection
.
mResidentKey
.
WasPassed
(
)
&
&
(
selection
.
mResidentKey
.
Value
(
)
.
EqualsLiteral
(
MOZ_WEBAUTHN_RESIDENT_KEY_REQUIREMENT_REQUIRED
)
|
|
selection
.
mResidentKey
.
Value
(
)
.
EqualsLiteral
(
MOZ_WEBAUTHN_RESIDENT_KEY_REQUIREMENT_PREFERRED
)
|
|
selection
.
mResidentKey
.
Value
(
)
.
EqualsLiteral
(
MOZ_WEBAUTHN_RESIDENT_KEY_REQUIREMENT_DISCOURAGED
)
)
;
nsString
residentKey
;
if
(
useResidentKeyValue
)
{
residentKey
=
selection
.
mResidentKey
.
Value
(
)
;
}
else
{
if
(
selection
.
mRequireResidentKey
)
{
residentKey
.
AssignLiteral
(
MOZ_WEBAUTHN_RESIDENT_KEY_REQUIREMENT_REQUIRED
)
;
}
else
{
residentKey
.
AssignLiteral
(
MOZ_WEBAUTHN_RESIDENT_KEY_REQUIREMENT_DISCOURAGED
)
;
}
}
WebAuthnAuthenticatorSelection
authSelection
(
residentKey
selection
.
mUserVerification
authenticatorAttachment
)
;
WebAuthnMakeCredentialRpInfo
rpInfo
(
aOptions
.
mRp
.
mName
)
;
WebAuthnMakeCredentialUserInfo
userInfo
(
userId
aOptions
.
mUser
.
mName
aOptions
.
mUser
.
mDisplayName
)
;
BrowsingContext
*
context
=
mParent
-
>
GetBrowsingContext
(
)
;
if
(
!
context
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
aSignal
.
WasPassed
(
)
&
&
aSignal
.
Value
(
)
.
Aborted
(
)
)
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
global
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
promise
.
forget
(
)
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
reason
(
cx
)
;
aSignal
.
Value
(
)
.
GetReason
(
cx
&
reason
)
;
promise
-
>
MaybeReject
(
reason
)
;
return
promise
.
forget
(
)
;
}
WebAuthnMakeCredentialInfo
info
(
origin
NS_ConvertUTF8toUTF16
(
rpId
)
challenge
clientDataJSON
adjustedTimeout
excludeList
rpInfo
userInfo
coseAlgos
extensions
authSelection
attestation
context
-
>
Top
(
)
-
>
Id
(
)
)
;
AbortSignal
*
signal
=
nullptr
;
if
(
aSignal
.
WasPassed
(
)
)
{
signal
=
&
aSignal
.
Value
(
)
;
Follow
(
signal
)
;
}
MOZ_ASSERT
(
mTransaction
.
isNothing
(
)
)
;
mTransaction
=
Some
(
WebAuthnTransaction
(
promise
WebAuthnTransactionType
:
:
Create
)
)
;
mChild
-
>
SendRequestRegister
(
mTransaction
.
ref
(
)
.
mId
info
)
;
return
promise
.
forget
(
)
;
}
const
size_t
MAX_ALLOWED_CREDENTIALS
=
20
;
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
GetAssertion
(
const
PublicKeyCredentialRequestOptions
&
aOptions
const
bool
aConditionallyMediated
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
nsString
origin
;
nsCString
rpId
;
nsresult
rv
=
GetOrigin
(
mParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
uint32_t
adjustedTimeout
=
30000
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15000u
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120000u
adjustedTimeout
)
;
}
if
(
aOptions
.
mRpId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
mParent
aOptions
.
mRpId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
if
(
aOptions
.
mAllowCredentials
.
Length
(
)
>
MAX_ALLOWED_CREDENTIALS
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
rv
=
AssembleClientData
(
origin
challenge
"
webauthn
.
get
"
_ns
aOptions
.
mExtensions
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredential
>
allowList
;
for
(
const
auto
&
s
:
aOptions
.
mAllowCredentials
)
{
if
(
s
.
mType
.
EqualsLiteral
(
MOZ_WEBAUTHN_PUBLIC_KEY_CREDENTIAL_TYPE_PUBLIC_KEY
)
)
{
WebAuthnScopedCredential
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
if
(
s
.
mTransports
.
WasPassed
(
)
)
{
c
.
transports
(
)
=
SerializeTransports
(
s
.
mTransports
.
Value
(
)
)
;
}
allowList
.
AppendElement
(
c
)
;
}
}
if
(
allowList
.
Length
(
)
=
=
0
&
&
aOptions
.
mAllowCredentials
.
Length
(
)
!
=
0
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
!
MaybeCreateBackgroundActor
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnExtension
>
extensions
;
if
(
aOptions
.
mExtensions
.
mCredProps
.
WasPassed
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
aOptions
.
mExtensions
.
mMinPinLength
.
WasPassed
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
aOptions
.
mExtensions
.
mAppid
.
WasPassed
(
)
)
{
nsString
appId
(
aOptions
.
mExtensions
.
mAppid
.
Value
(
)
)
;
if
(
!
EvaluateAppID
(
mParent
origin
appId
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
extensions
.
AppendElement
(
WebAuthnExtensionAppId
(
appId
)
)
;
}
BrowsingContext
*
context
=
mParent
-
>
GetBrowsingContext
(
)
;
if
(
!
context
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
aSignal
.
WasPassed
(
)
&
&
aSignal
.
Value
(
)
.
Aborted
(
)
)
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
global
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
promise
.
forget
(
)
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
reason
(
cx
)
;
aSignal
.
Value
(
)
.
GetReason
(
cx
&
reason
)
;
promise
-
>
MaybeReject
(
reason
)
;
return
promise
.
forget
(
)
;
}
WebAuthnGetAssertionInfo
info
(
origin
NS_ConvertUTF8toUTF16
(
rpId
)
challenge
clientDataJSON
adjustedTimeout
allowList
extensions
aOptions
.
mUserVerification
aConditionallyMediated
context
-
>
Top
(
)
-
>
Id
(
)
)
;
AbortSignal
*
signal
=
nullptr
;
if
(
aSignal
.
WasPassed
(
)
)
{
signal
=
&
aSignal
.
Value
(
)
;
Follow
(
signal
)
;
}
MOZ_ASSERT
(
mTransaction
.
isNothing
(
)
)
;
mTransaction
=
Some
(
WebAuthnTransaction
(
promise
WebAuthnTransactionType
:
:
Get
)
)
;
mChild
-
>
SendRequestSign
(
mTransaction
.
ref
(
)
.
mId
info
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
Store
(
const
Credential
&
aCredential
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
IsUVPAA
(
GlobalObject
&
aGlobal
ErrorResult
&
aError
)
{
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
xpc
:
:
CurrentNativeGlobal
(
aGlobal
.
Context
(
)
)
aError
)
;
if
(
aError
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
MaybeCreateBackgroundActor
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
mChild
-
>
SendRequestIsUVPAA
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
promise
]
(
const
PWebAuthnTransactionChild
:
:
RequestIsUVPAAPromise
:
:
ResolveOrRejectValue
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
promise
-
>
MaybeResolve
(
aValue
.
ResolveValue
(
)
)
;
}
else
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
}
}
)
;
return
promise
.
forget
(
)
;
}
void
WebAuthnManager
:
:
FinishMakeCredential
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialResult
&
aResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isNothing
(
)
|
|
mTransaction
.
ref
(
)
.
mId
!
=
aTransactionId
)
{
return
;
}
nsAutoCString
keyHandleBase64Url
;
nsresult
rv
=
Base64URLEncode
(
aResult
.
KeyHandle
(
)
.
Length
(
)
aResult
.
KeyHandle
(
)
.
Elements
(
)
Base64URLEncodePaddingPolicy
:
:
Omit
keyHandleBase64Url
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
RefPtr
<
AuthenticatorAttestationResponse
>
attestation
=
new
AuthenticatorAttestationResponse
(
mParent
)
;
attestation
-
>
SetClientDataJSON
(
aResult
.
ClientDataJSON
(
)
)
;
attestation
-
>
SetAttestationObject
(
aResult
.
AttestationObject
(
)
)
;
attestation
-
>
SetTransports
(
aResult
.
Transports
(
)
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mParent
)
;
credential
-
>
SetId
(
NS_ConvertASCIItoUTF16
(
keyHandleBase64Url
)
)
;
credential
-
>
SetType
(
u
"
public
-
key
"
_ns
)
;
credential
-
>
SetRawId
(
aResult
.
KeyHandle
(
)
)
;
credential
-
>
SetAttestationResponse
(
attestation
)
;
if
(
aResult
.
AuthenticatorAttachment
(
)
.
isSome
(
)
)
{
credential
-
>
SetAuthenticatorAttachment
(
aResult
.
AuthenticatorAttachment
(
)
)
;
mozilla
:
:
glean
:
:
webauthn_create
:
:
authenticator_attachment
.
Get
(
NS_ConvertUTF16toUTF8
(
aResult
.
AuthenticatorAttachment
(
)
.
ref
(
)
)
)
.
Add
(
1
)
;
}
else
{
mozilla
:
:
glean
:
:
webauthn_get
:
:
authenticator_attachment
.
Get
(
"
unknown
"
_ns
)
.
Add
(
1
)
;
}
for
(
const
auto
&
ext
:
aResult
.
Extensions
(
)
)
{
if
(
ext
.
type
(
)
=
=
WebAuthnExtensionResult
:
:
TWebAuthnExtensionResultCredProps
)
{
bool
credPropsRk
=
ext
.
get_WebAuthnExtensionResultCredProps
(
)
.
rk
(
)
;
credential
-
>
SetClientExtensionResultCredPropsRk
(
credPropsRk
)
;
if
(
credPropsRk
)
{
mozilla
:
:
glean
:
:
webauthn_create
:
:
passkey
.
Add
(
1
)
;
}
}
if
(
ext
.
type
(
)
=
=
WebAuthnExtensionResult
:
:
TWebAuthnExtensionResultHmacSecret
)
{
bool
hmacCreateSecret
=
ext
.
get_WebAuthnExtensionResultHmacSecret
(
)
.
hmacCreateSecret
(
)
;
credential
-
>
SetClientExtensionResultHmacSecret
(
hmacCreateSecret
)
;
}
}
ResolveTransaction
(
credential
)
;
}
void
WebAuthnManager
:
:
FinishGetAssertion
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionResult
&
aResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isNothing
(
)
|
|
mTransaction
.
ref
(
)
.
mId
!
=
aTransactionId
)
{
return
;
}
nsAutoCString
keyHandleBase64Url
;
nsresult
rv
=
Base64URLEncode
(
aResult
.
KeyHandle
(
)
.
Length
(
)
aResult
.
KeyHandle
(
)
.
Elements
(
)
Base64URLEncodePaddingPolicy
:
:
Omit
keyHandleBase64Url
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
RefPtr
<
AuthenticatorAssertionResponse
>
assertion
=
new
AuthenticatorAssertionResponse
(
mParent
)
;
assertion
-
>
SetClientDataJSON
(
aResult
.
ClientDataJSON
(
)
)
;
assertion
-
>
SetAuthenticatorData
(
aResult
.
AuthenticatorData
(
)
)
;
assertion
-
>
SetSignature
(
aResult
.
Signature
(
)
)
;
assertion
-
>
SetUserHandle
(
aResult
.
UserHandle
(
)
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mParent
)
;
credential
-
>
SetId
(
NS_ConvertASCIItoUTF16
(
keyHandleBase64Url
)
)
;
credential
-
>
SetType
(
u
"
public
-
key
"
_ns
)
;
credential
-
>
SetRawId
(
aResult
.
KeyHandle
(
)
)
;
credential
-
>
SetAssertionResponse
(
assertion
)
;
if
(
aResult
.
AuthenticatorAttachment
(
)
.
isSome
(
)
)
{
credential
-
>
SetAuthenticatorAttachment
(
aResult
.
AuthenticatorAttachment
(
)
)
;
mozilla
:
:
glean
:
:
webauthn_get
:
:
authenticator_attachment
.
Get
(
NS_ConvertUTF16toUTF8
(
aResult
.
AuthenticatorAttachment
(
)
.
ref
(
)
)
)
.
Add
(
1
)
;
}
else
{
mozilla
:
:
glean
:
:
webauthn_get
:
:
authenticator_attachment
.
Get
(
"
unknown
"
_ns
)
.
Add
(
1
)
;
}
for
(
const
auto
&
ext
:
aResult
.
Extensions
(
)
)
{
if
(
ext
.
type
(
)
=
=
WebAuthnExtensionResult
:
:
TWebAuthnExtensionResultAppId
)
{
bool
appid
=
ext
.
get_WebAuthnExtensionResultAppId
(
)
.
AppId
(
)
;
credential
-
>
SetClientExtensionResultAppId
(
appid
)
;
}
}
nsIGlobalObject
*
global
=
mTransaction
.
ref
(
)
.
mPromise
-
>
GetGlobalObject
(
)
;
if
(
global
)
{
nsPIDOMWindowInner
*
window
=
global
-
>
GetAsInnerWindow
(
)
;
if
(
window
)
{
WindowGlobalChild
*
windowGlobalChild
=
window
-
>
GetWindowGlobalChild
(
)
;
windowGlobalChild
-
>
SendRecordUserActivationForBTP
(
)
;
}
}
ResolveTransaction
(
credential
)
;
}
void
WebAuthnManager
:
:
RequestAborted
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
&
&
mTransaction
.
ref
(
)
.
mId
=
=
aTransactionId
)
{
RejectTransaction
(
aError
)
;
}
}
void
WebAuthnManager
:
:
RunAbortAlgorithm
(
)
{
if
(
NS_WARN_IF
(
mTransaction
.
isNothing
(
)
)
)
{
return
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
global
)
)
{
CancelTransaction
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
reason
(
cx
)
;
Signal
(
)
-
>
GetReason
(
cx
&
reason
)
;
CancelTransaction
(
reason
)
;
}
void
WebAuthnManager
:
:
ResolveTransaction
(
const
RefPtr
<
PublicKeyCredential
>
&
aCredential
)
{
if
(
NS_WARN_IF
(
mTransaction
.
isNothing
(
)
)
)
{
ClearTransaction
(
)
;
return
;
}
switch
(
mTransaction
.
ref
(
)
.
mType
)
{
case
WebAuthnTransactionType
:
:
Create
:
mozilla
:
:
glean
:
:
webauthn_create
:
:
success
.
Add
(
1
)
;
break
;
case
WebAuthnTransactionType
:
:
Get
:
mozilla
:
:
glean
:
:
webauthn_get
:
:
success
.
Add
(
1
)
;
break
;
}
mTransaction
.
ref
(
)
.
mPromise
-
>
MaybeResolve
(
aCredential
)
;
ClearTransaction
(
)
;
}
template
<
typename
T
>
void
WebAuthnManager
:
:
RejectTransaction
(
const
T
&
aReason
)
{
if
(
NS_WARN_IF
(
mTransaction
.
isNothing
(
)
)
)
{
ClearTransaction
(
)
;
return
;
}
switch
(
mTransaction
.
ref
(
)
.
mType
)
{
case
WebAuthnTransactionType
:
:
Create
:
mozilla
:
:
glean
:
:
webauthn_create
:
:
failure
.
Add
(
1
)
;
break
;
case
WebAuthnTransactionType
:
:
Get
:
mozilla
:
:
glean
:
:
webauthn_get
:
:
failure
.
Add
(
1
)
;
break
;
}
mTransaction
.
ref
(
)
.
mPromise
-
>
MaybeReject
(
aReason
)
;
ClearTransaction
(
)
;
}
}
