#
include
"
hasht
.
h
"
#
include
"
nsICryptoHash
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
AuthenticatorAttestationResponse
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManager
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnUtil
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnTransactionChild
.
h
"
#
include
"
mozilla
/
dom
/
WebCryptoCommon
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
namespace
{
StaticRefPtr
<
WebAuthnManager
>
gWebAuthnManager
;
static
mozilla
:
:
LazyLogModule
gWebAuthnManagerLog
(
"
webauthnmanager
"
)
;
}
NS_IMPL_ISUPPORTS
(
WebAuthnManager
nsIIPCBackgroundChildCreateCallback
)
;
template
<
class
OOS
>
static
nsresult
GetAlgorithmName
(
const
OOS
&
aAlgorithm
nsString
&
aName
)
{
MOZ_ASSERT
(
aAlgorithm
.
IsString
(
)
)
;
if
(
aAlgorithm
.
IsString
(
)
)
{
aName
.
Assign
(
aAlgorithm
.
GetAsString
(
)
)
;
}
else
{
}
if
(
!
NormalizeToken
(
aName
aName
)
)
{
return
NS_ERROR_DOM_SYNTAX_ERR
;
}
return
NS_OK
;
}
static
nsresult
HashCString
(
nsICryptoHash
*
aHashService
const
nsACString
&
aIn
CryptoBuffer
&
aOut
)
{
MOZ_ASSERT
(
aHashService
)
;
nsresult
rv
=
aHashService
-
>
Init
(
nsICryptoHash
:
:
SHA256
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aHashService
-
>
Update
(
reinterpret_cast
<
const
uint8_t
*
>
(
aIn
.
BeginReading
(
)
)
aIn
.
Length
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsAutoCString
fullHash
;
rv
=
aHashService
-
>
Finish
(
false
fullHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
aOut
.
Assign
(
fullHash
)
;
return
rv
;
}
static
nsresult
AssembleClientData
(
const
nsAString
&
aOrigin
const
CryptoBuffer
&
aChallenge
nsACString
&
aJsonOut
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsString
challengeBase64
;
nsresult
rv
=
aChallenge
.
ToJwkBase64
(
challengeBase64
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_FAILURE
;
}
CollectedClientData
clientDataObject
;
clientDataObject
.
mChallenge
.
Assign
(
challengeBase64
)
;
clientDataObject
.
mOrigin
.
Assign
(
aOrigin
)
;
clientDataObject
.
mHashAlg
.
Assign
(
NS_LITERAL_STRING
(
"
S256
"
)
)
;
nsAutoString
temp
;
if
(
NS_WARN_IF
(
!
clientDataObject
.
ToJSON
(
temp
)
)
)
{
return
NS_ERROR_FAILURE
;
}
aJsonOut
.
Assign
(
NS_ConvertUTF16toUTF8
(
temp
)
)
;
return
NS_OK
;
}
nsresult
GetOrigin
(
nsPIDOMWindowInner
*
aParent
nsAString
&
aOrigin
nsACString
&
aHost
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
nsresult
rv
=
nsContentUtils
:
:
GetUTFOrigin
(
principal
aOrigin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
|
|
NS_WARN_IF
(
aOrigin
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aOrigin
.
EqualsLiteral
(
"
null
"
)
)
{
MOZ_LOG
(
gWebAuthnManagerLog
LogLevel
:
:
Debug
(
"
Rejecting
due
to
opaque
origin
"
)
)
;
return
NS_ERROR_DOM_NOT_ALLOWED_ERR
;
}
nsCOMPtr
<
nsIURI
>
originUri
;
if
(
NS_FAILED
(
principal
-
>
GetURI
(
getter_AddRefs
(
originUri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
originUri
-
>
GetAsciiHost
(
aHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
RelaxSameOrigin
(
nsPIDOMWindowInner
*
aParent
const
nsAString
&
aInputRpId
nsACString
&
aRelaxedRpId
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
if
(
NS_FAILED
(
principal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
originHost
;
if
(
NS_FAILED
(
uri
-
>
GetAsciiHost
(
originHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocument
>
document
=
aParent
-
>
GetDoc
(
)
;
if
(
!
document
|
|
!
document
-
>
IsHTMLDocument
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsHTMLDocument
*
html
=
document
-
>
AsHTMLDocument
(
)
;
if
(
NS_WARN_IF
(
!
html
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
html
-
>
IsRegistrableDomainSuffixOfOrEqualTo
(
aInputRpId
originHost
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
aRelaxedRpId
.
Assign
(
NS_ConvertUTF16toUTF8
(
aInputRpId
)
)
;
return
NS_OK
;
}
WebAuthnManager
:
:
WebAuthnManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
WebAuthnManager
:
:
MaybeClearTransaction
(
)
{
mClientData
.
reset
(
)
;
mInfo
.
reset
(
)
;
mTransactionPromise
=
nullptr
;
if
(
mChild
)
{
RefPtr
<
WebAuthnTransactionChild
>
c
;
mChild
.
swap
(
c
)
;
c
-
>
Send__delete__
(
c
)
;
}
}
WebAuthnManager
:
:
~
WebAuthnManager
(
)
{
MaybeClearTransaction
(
)
;
}
already_AddRefed
<
MozPromise
<
nsresult
nsresult
false
>
>
WebAuthnManager
:
:
GetOrCreateBackgroundActor
(
)
{
bool
ok
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
this
)
;
if
(
NS_WARN_IF
(
!
ok
)
)
{
ActorFailed
(
)
;
}
return
mPBackgroundCreationPromise
.
Ensure
(
__func__
)
;
}
WebAuthnManager
*
WebAuthnManager
:
:
GetOrCreate
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
gWebAuthnManager
)
{
return
gWebAuthnManager
;
}
gWebAuthnManager
=
new
WebAuthnManager
(
)
;
ClearOnShutdown
(
&
gWebAuthnManager
)
;
return
gWebAuthnManager
;
}
WebAuthnManager
*
WebAuthnManager
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
gWebAuthnManager
;
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
MakeCredential
(
nsPIDOMWindowInner
*
aParent
const
MakeCredentialOptions
&
aOptions
)
{
MOZ_ASSERT
(
aParent
)
;
MaybeClearTransaction
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aParent
)
;
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
nsString
origin
;
nsCString
rpId
;
rv
=
GetOrigin
(
aParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
double
adjustedTimeout
=
30
.
0
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15
.
0
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120
.
0
adjustedTimeout
)
;
}
if
(
aOptions
.
mRp
.
mId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
aParent
aOptions
.
mRp
.
mId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
CryptoBuffer
rpIdHash
;
if
(
!
rpIdHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
nsresult
srv
;
nsCOMPtr
<
nsICryptoHash
>
hashService
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
&
srv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
rpId
rpIdHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
PublicKeyCredentialParameters
>
normalizedParams
;
for
(
size_t
a
=
0
;
a
<
aOptions
.
mParameters
.
Length
(
)
;
+
+
a
)
{
if
(
aOptions
.
mParameters
[
a
]
.
mType
!
=
PublicKeyCredentialType
:
:
Public_key
)
{
continue
;
}
nsString
algName
;
if
(
NS_FAILED
(
GetAlgorithmName
(
aOptions
.
mParameters
[
a
]
.
mAlgorithm
algName
)
)
)
{
continue
;
}
PublicKeyCredentialParameters
normalizedObj
;
normalizedObj
.
mType
=
aOptions
.
mParameters
[
a
]
.
mType
;
normalizedObj
.
mAlgorithm
.
SetAsString
(
)
.
Assign
(
algName
)
;
if
(
!
normalizedParams
.
AppendElement
(
normalizedObj
mozilla
:
:
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
}
if
(
normalizedParams
.
IsEmpty
(
)
&
&
!
aOptions
.
mParameters
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
bool
isValidCombination
=
false
;
for
(
size_t
a
=
0
;
a
<
normalizedParams
.
Length
(
)
;
+
+
a
)
{
if
(
normalizedParams
[
a
]
.
mType
=
=
PublicKeyCredentialType
:
:
Public_key
&
&
normalizedParams
[
a
]
.
mAlgorithm
.
IsString
(
)
&
&
normalizedParams
[
a
]
.
mAlgorithm
.
GetAsString
(
)
.
EqualsLiteral
(
WEBCRYPTO_NAMED_CURVE_P256
)
)
{
isValidCombination
=
true
;
break
;
}
}
if
(
!
isValidCombination
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
srv
=
AssembleClientData
(
origin
challenge
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
clientDataHash
;
if
(
!
clientDataHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
clientDataJSON
clientDataHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
excludeList
;
if
(
aOptions
.
mExcludeList
.
WasPassed
(
)
)
{
for
(
const
auto
&
s
:
aOptions
.
mExcludeList
.
Value
(
)
)
{
WebAuthnScopedCredentialDescriptor
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
excludeList
.
AppendElement
(
c
)
;
}
}
nsTArray
<
WebAuthnExtension
>
extensions
;
WebAuthnTransactionInfo
info
(
rpIdHash
clientDataHash
adjustedTimeout
excludeList
extensions
)
;
RefPtr
<
MozPromise
<
nsresult
nsresult
false
>
>
p
=
GetOrCreateBackgroundActor
(
)
;
p
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
]
(
)
{
WebAuthnManager
*
mgr
=
WebAuthnManager
:
:
Get
(
)
;
if
(
!
mgr
)
{
return
;
}
mgr
-
>
StartRegister
(
)
;
}
[
]
(
)
{
}
)
;
mTransactionPromise
=
promise
;
mClientData
=
Some
(
clientDataJSON
)
;
mCurrentParent
=
aParent
;
mInfo
=
Some
(
info
)
;
return
promise
.
forget
(
)
;
}
void
WebAuthnManager
:
:
StartRegister
(
)
{
if
(
mChild
)
{
mChild
-
>
SendRequestRegister
(
mInfo
.
ref
(
)
)
;
}
}
void
WebAuthnManager
:
:
StartSign
(
)
{
if
(
mChild
)
{
mChild
-
>
SendRequestSign
(
mInfo
.
ref
(
)
)
;
}
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
GetAssertion
(
nsPIDOMWindowInner
*
aParent
const
PublicKeyCredentialRequestOptions
&
aOptions
)
{
MOZ_ASSERT
(
aParent
)
;
MaybeClearTransaction
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aParent
)
;
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
nsString
origin
;
nsCString
rpId
;
rv
=
GetOrigin
(
aParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
uint32_t
adjustedTimeout
=
30000
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15000u
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120000u
adjustedTimeout
)
;
}
if
(
aOptions
.
mRpId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
aParent
aOptions
.
mRpId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
CryptoBuffer
rpIdHash
;
if
(
!
rpIdHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
nsresult
srv
;
nsCOMPtr
<
nsICryptoHash
>
hashService
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
&
srv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
rpId
rpIdHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
srv
=
AssembleClientData
(
origin
challenge
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
clientDataHash
;
if
(
!
clientDataHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
clientDataJSON
clientDataHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
if
(
aOptions
.
mAllowList
.
Length
(
)
<
1
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
allowList
;
for
(
const
auto
&
s
:
aOptions
.
mAllowList
)
{
WebAuthnScopedCredentialDescriptor
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
allowList
.
AppendElement
(
c
)
;
}
nsTArray
<
WebAuthnExtension
>
extensions
;
WebAuthnTransactionInfo
info
(
rpIdHash
clientDataHash
adjustedTimeout
allowList
extensions
)
;
RefPtr
<
MozPromise
<
nsresult
nsresult
false
>
>
p
=
GetOrCreateBackgroundActor
(
)
;
p
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
]
(
)
{
WebAuthnManager
*
mgr
=
WebAuthnManager
:
:
Get
(
)
;
if
(
!
mgr
)
{
return
;
}
mgr
-
>
StartSign
(
)
;
}
[
]
(
)
{
}
)
;
mTransactionPromise
=
promise
;
mClientData
=
Some
(
clientDataJSON
)
;
mCurrentParent
=
aParent
;
mInfo
=
Some
(
info
)
;
return
promise
.
forget
(
)
;
}
void
WebAuthnManager
:
:
FinishMakeCredential
(
nsTArray
<
uint8_t
>
&
aRegBuffer
)
{
MOZ_ASSERT
(
mTransactionPromise
)
;
MOZ_ASSERT
(
mInfo
.
isSome
(
)
)
;
CryptoBuffer
regData
;
if
(
NS_WARN_IF
(
!
regData
.
Assign
(
aRegBuffer
.
Elements
(
)
aRegBuffer
.
Length
(
)
)
)
)
{
mTransactionPromise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
pubKeyBuf
;
CryptoBuffer
keyHandleBuf
;
CryptoBuffer
attestationCertBuf
;
CryptoBuffer
signatureBuf
;
nsresult
rv
=
U2FDecomposeRegistrationResponse
(
regData
pubKeyBuf
keyHandleBuf
attestationCertBuf
signatureBuf
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Cancel
(
rv
)
;
return
;
}
CryptoBuffer
clientDataBuf
;
if
(
!
clientDataBuf
.
Assign
(
mClientData
.
ref
(
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
rpIdHashBuf
;
if
(
!
rpIdHashBuf
.
Assign
(
mInfo
.
ref
(
)
.
RpIdHash
(
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
authenticatorDataBuf
;
rv
=
U2FAssembleAuthenticatorData
(
authenticatorDataBuf
rpIdHashBuf
signatureBuf
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
RefPtr
<
AuthenticatorAttestationResponse
>
attestation
=
new
AuthenticatorAttestationResponse
(
mCurrentParent
)
;
attestation
-
>
SetClientDataJSON
(
clientDataBuf
)
;
attestation
-
>
SetAttestationObject
(
regData
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mCurrentParent
)
;
credential
-
>
SetRawId
(
keyHandleBuf
)
;
credential
-
>
SetResponse
(
attestation
)
;
mTransactionPromise
-
>
MaybeResolve
(
credential
)
;
MaybeClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
FinishGetAssertion
(
nsTArray
<
uint8_t
>
&
aCredentialId
nsTArray
<
uint8_t
>
&
aSigBuffer
)
{
MOZ_ASSERT
(
mTransactionPromise
)
;
MOZ_ASSERT
(
mInfo
.
isSome
(
)
)
;
CryptoBuffer
signatureData
;
if
(
NS_WARN_IF
(
!
signatureData
.
Assign
(
aSigBuffer
.
Elements
(
)
aSigBuffer
.
Length
(
)
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
clientDataBuf
;
if
(
!
clientDataBuf
.
Assign
(
mClientData
.
ref
(
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
rpIdHashBuf
;
if
(
!
rpIdHashBuf
.
Assign
(
mInfo
.
ref
(
)
.
RpIdHash
(
)
)
)
{
Cancel
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
authenticatorDataBuf
;
nsresult
rv
=
U2FAssembleAuthenticatorData
(
authenticatorDataBuf
rpIdHashBuf
signatureData
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
Cancel
(
rv
)
;
return
;
}
CryptoBuffer
credentialBuf
;
if
(
!
credentialBuf
.
Assign
(
aCredentialId
)
)
{
Cancel
(
rv
)
;
return
;
}
RefPtr
<
AuthenticatorAssertionResponse
>
assertion
=
new
AuthenticatorAssertionResponse
(
mCurrentParent
)
;
assertion
-
>
SetClientDataJSON
(
clientDataBuf
)
;
assertion
-
>
SetAuthenticatorData
(
authenticatorDataBuf
)
;
assertion
-
>
SetSignature
(
signatureData
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mCurrentParent
)
;
credential
-
>
SetRawId
(
credentialBuf
)
;
credential
-
>
SetResponse
(
assertion
)
;
mTransactionPromise
-
>
MaybeResolve
(
credential
)
;
MaybeClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
Cancel
(
const
nsresult
&
aError
)
{
if
(
mTransactionPromise
)
{
mTransactionPromise
-
>
MaybeReject
(
aError
)
;
}
MaybeClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
ActorCreated
(
PBackgroundChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
RefPtr
<
WebAuthnTransactionChild
>
mgr
(
new
WebAuthnTransactionChild
(
)
)
;
PWebAuthnTransactionChild
*
constructedMgr
=
aActor
-
>
SendPWebAuthnTransactionConstructor
(
mgr
)
;
if
(
NS_WARN_IF
(
!
constructedMgr
)
)
{
ActorFailed
(
)
;
return
;
}
MOZ_ASSERT
(
constructedMgr
=
=
mgr
)
;
mChild
=
mgr
.
forget
(
)
;
mPBackgroundCreationPromise
.
Resolve
(
NS_OK
__func__
)
;
}
void
WebAuthnManager
:
:
ActorDestroyed
(
)
{
mChild
=
nullptr
;
}
void
WebAuthnManager
:
:
ActorFailed
(
)
{
MOZ_CRASH
(
"
We
shouldn
'
t
be
here
!
"
)
;
}
}
}
