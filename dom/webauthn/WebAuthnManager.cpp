#
include
"
hasht
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsICryptoHash
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
WebAuthnCoseIdentifiers
.
h
"
#
include
"
mozilla
/
dom
/
AuthenticatorAttestationResponse
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
dom
/
U2FUtil
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnCBORUtil
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManager
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnTransactionChild
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnUtil
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
const
uint8_t
FLAG_TUP
=
0x01
;
const
uint8_t
FLAG_AT
=
0x40
;
const
uint8_t
FLAG_UV
=
0x04
;
namespace
{
static
mozilla
:
:
LazyLogModule
gWebAuthnManagerLog
(
"
webauthnmanager
"
)
;
}
NS_IMPL_ISUPPORTS
(
WebAuthnManager
nsIDOMEventListener
)
;
static
nsresult
AssembleClientData
(
const
nsAString
&
aOrigin
const
CryptoBuffer
&
aChallenge
const
nsAString
&
aType
const
AuthenticationExtensionsClientInputs
&
aExtensions
nsACString
&
aJsonOut
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsString
challengeBase64
;
nsresult
rv
=
aChallenge
.
ToJwkBase64
(
challengeBase64
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_FAILURE
;
}
CollectedClientData
clientDataObject
;
clientDataObject
.
mType
.
Assign
(
aType
)
;
clientDataObject
.
mChallenge
.
Assign
(
challengeBase64
)
;
clientDataObject
.
mOrigin
.
Assign
(
aOrigin
)
;
clientDataObject
.
mHashAlgorithm
.
AssignLiteral
(
u
"
SHA
-
256
"
)
;
clientDataObject
.
mClientExtensions
=
aExtensions
;
nsAutoString
temp
;
if
(
NS_WARN_IF
(
!
clientDataObject
.
ToJSON
(
temp
)
)
)
{
return
NS_ERROR_FAILURE
;
}
aJsonOut
.
Assign
(
NS_ConvertUTF16toUTF8
(
temp
)
)
;
return
NS_OK
;
}
nsresult
GetOrigin
(
nsPIDOMWindowInner
*
aParent
nsAString
&
aOrigin
nsACString
&
aHost
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
nsresult
rv
=
nsContentUtils
:
:
GetUTFOrigin
(
principal
aOrigin
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
|
|
NS_WARN_IF
(
aOrigin
.
IsEmpty
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
aOrigin
.
EqualsLiteral
(
"
null
"
)
)
{
MOZ_LOG
(
gWebAuthnManagerLog
LogLevel
:
:
Debug
(
"
Rejecting
due
to
opaque
origin
"
)
)
;
return
NS_ERROR_DOM_NOT_ALLOWED_ERR
;
}
nsCOMPtr
<
nsIURI
>
originUri
;
if
(
NS_FAILED
(
principal
-
>
GetURI
(
getter_AddRefs
(
originUri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
originUri
-
>
GetAsciiHost
(
aHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
RelaxSameOrigin
(
nsPIDOMWindowInner
*
aParent
const
nsAString
&
aInputRpId
nsACString
&
aRelaxedRpId
)
{
MOZ_ASSERT
(
aParent
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
aParent
-
>
GetDoc
(
)
;
MOZ_ASSERT
(
doc
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
doc
-
>
NodePrincipal
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
if
(
NS_FAILED
(
principal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
originHost
;
if
(
NS_FAILED
(
uri
-
>
GetAsciiHost
(
originHost
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocument
>
document
=
aParent
-
>
GetDoc
(
)
;
if
(
!
document
|
|
!
document
-
>
IsHTMLDocument
(
)
)
{
return
NS_ERROR_FAILURE
;
}
nsHTMLDocument
*
html
=
document
-
>
AsHTMLDocument
(
)
;
if
(
!
html
-
>
IsRegistrableDomainSuffixOfOrEqualTo
(
aInputRpId
originHost
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
aRelaxedRpId
.
Assign
(
NS_ConvertUTF16toUTF8
(
aInputRpId
)
)
;
return
NS_OK
;
}
void
WebAuthnManager
:
:
ClearTransaction
(
)
{
if
(
!
NS_WARN_IF
(
mTransaction
.
isNothing
(
)
)
)
{
StopListeningForVisibilityEvents
(
)
;
}
mTransaction
.
reset
(
)
;
Unfollow
(
)
;
}
void
WebAuthnManager
:
:
RejectTransaction
(
const
nsresult
&
aError
)
{
if
(
!
NS_WARN_IF
(
mTransaction
.
isNothing
(
)
)
)
{
mTransaction
.
ref
(
)
.
mPromise
-
>
MaybeReject
(
aError
)
;
}
ClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
CancelTransaction
(
const
nsresult
&
aError
)
{
if
(
!
NS_WARN_IF
(
!
mChild
|
|
mTransaction
.
isNothing
(
)
)
)
{
mChild
-
>
SendRequestCancel
(
mTransaction
.
ref
(
)
.
mId
)
;
}
RejectTransaction
(
aError
)
;
}
WebAuthnManager
:
:
~
WebAuthnManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
)
{
RejectTransaction
(
NS_ERROR_ABORT
)
;
}
if
(
mChild
)
{
RefPtr
<
WebAuthnTransactionChild
>
c
;
mChild
.
swap
(
c
)
;
c
-
>
Disconnect
(
)
;
}
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
MakeCredential
(
const
PublicKeyCredentialCreationOptions
&
aOptions
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_ABORT
)
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
aSignal
.
WasPassed
(
)
&
&
aSignal
.
Value
(
)
.
Aborted
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
promise
.
forget
(
)
;
}
nsString
origin
;
nsCString
rpId
;
rv
=
GetOrigin
(
mParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
{
CryptoBuffer
userId
;
userId
.
Assign
(
aOptions
.
mUser
.
mId
)
;
if
(
userId
.
Length
(
)
>
64
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
)
;
return
promise
.
forget
(
)
;
}
}
uint32_t
adjustedTimeout
=
30000
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15000u
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120000u
adjustedTimeout
)
;
}
if
(
aOptions
.
mRp
.
mId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
mParent
aOptions
.
mRp
.
mId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
if
(
aOptions
.
mExtensions
.
mAppid
.
WasPassed
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
rpIdHash
;
if
(
!
rpIdHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
nsresult
srv
;
nsCOMPtr
<
nsICryptoHash
>
hashService
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
&
srv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
rpId
rpIdHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
PublicKeyCredentialParameters
>
acceptableParams
;
for
(
size_t
a
=
0
;
a
<
aOptions
.
mPubKeyCredParams
.
Length
(
)
;
+
+
a
)
{
if
(
aOptions
.
mPubKeyCredParams
[
a
]
.
mType
!
=
PublicKeyCredentialType
:
:
Public_key
)
{
continue
;
}
nsString
algName
;
if
(
NS_FAILED
(
CoseAlgorithmToWebCryptoId
(
aOptions
.
mPubKeyCredParams
[
a
]
.
mAlg
algName
)
)
)
{
continue
;
}
if
(
!
acceptableParams
.
AppendElement
(
aOptions
.
mPubKeyCredParams
[
a
]
mozilla
:
:
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
}
if
(
acceptableParams
.
IsEmpty
(
)
&
&
!
aOptions
.
mPubKeyCredParams
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
srv
=
AssembleClientData
(
origin
challenge
NS_LITERAL_STRING
(
"
webauthn
.
create
"
)
aOptions
.
mExtensions
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
clientDataHash
;
if
(
!
clientDataHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
clientDataJSON
clientDataHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredential
>
excludeList
;
for
(
const
auto
&
s
:
aOptions
.
mExcludeCredentials
)
{
WebAuthnScopedCredential
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
excludeList
.
AppendElement
(
c
)
;
}
if
(
!
MaybeCreateBackgroundActor
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnExtension
>
extensions
;
const
auto
&
selection
=
aOptions
.
mAuthenticatorSelection
;
const
auto
&
attachment
=
selection
.
mAuthenticatorAttachment
;
const
AttestationConveyancePreference
&
attestation
=
aOptions
.
mAttestation
;
bool
requirePlatformAttachment
=
attachment
.
WasPassed
(
)
&
&
attachment
.
Value
(
)
=
=
AuthenticatorAttachment
:
:
Platform
;
bool
requireUserVerification
=
selection
.
mUserVerification
=
=
UserVerificationRequirement
:
:
Required
;
bool
requestDirectAttestation
=
attestation
=
=
AttestationConveyancePreference
:
:
Direct
;
WebAuthnAuthenticatorSelection
authSelection
(
selection
.
mRequireResidentKey
requireUserVerification
requirePlatformAttachment
)
;
WebAuthnMakeCredentialInfo
info
(
origin
rpIdHash
clientDataHash
adjustedTimeout
excludeList
extensions
authSelection
requestDirectAttestation
)
;
ListenForVisibilityEvents
(
)
;
AbortSignal
*
signal
=
nullptr
;
if
(
aSignal
.
WasPassed
(
)
)
{
signal
=
&
aSignal
.
Value
(
)
;
Follow
(
signal
)
;
}
MOZ_ASSERT
(
mTransaction
.
isNothing
(
)
)
;
mTransaction
=
Some
(
WebAuthnTransaction
(
promise
rpIdHash
clientDataJSON
signal
)
)
;
mChild
-
>
SendRequestRegister
(
mTransaction
.
ref
(
)
.
mId
info
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
GetAssertion
(
const
PublicKeyCredentialRequestOptions
&
aOptions
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_ABORT
)
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
aSignal
.
WasPassed
(
)
&
&
aSignal
.
Value
(
)
.
Aborted
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_ABORT_ERR
)
;
return
promise
.
forget
(
)
;
}
nsString
origin
;
nsCString
rpId
;
rv
=
GetOrigin
(
mParent
origin
rpId
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
promise
-
>
MaybeReject
(
rv
)
;
return
promise
.
forget
(
)
;
}
uint32_t
adjustedTimeout
=
30000
;
if
(
aOptions
.
mTimeout
.
WasPassed
(
)
)
{
adjustedTimeout
=
aOptions
.
mTimeout
.
Value
(
)
;
adjustedTimeout
=
std
:
:
max
(
15000u
adjustedTimeout
)
;
adjustedTimeout
=
std
:
:
min
(
120000u
adjustedTimeout
)
;
}
if
(
aOptions
.
mRpId
.
WasPassed
(
)
)
{
if
(
NS_FAILED
(
RelaxSameOrigin
(
mParent
aOptions
.
mRpId
.
Value
(
)
rpId
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
}
CryptoBuffer
rpIdHash
;
if
(
!
rpIdHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
nsresult
srv
;
nsCOMPtr
<
nsICryptoHash
>
hashService
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
&
srv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
rpId
rpIdHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
challenge
;
if
(
!
challenge
.
Assign
(
aOptions
.
mChallenge
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
clientDataJSON
;
srv
=
AssembleClientData
(
origin
challenge
NS_LITERAL_STRING
(
"
webauthn
.
get
"
)
aOptions
.
mExtensions
clientDataJSON
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
clientDataHash
;
if
(
!
clientDataHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
srv
=
HashCString
(
hashService
clientDataJSON
clientDataHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
WebAuthnScopedCredential
>
allowList
;
for
(
const
auto
&
s
:
aOptions
.
mAllowCredentials
)
{
if
(
s
.
mType
=
=
PublicKeyCredentialType
:
:
Public_key
)
{
WebAuthnScopedCredential
c
;
CryptoBuffer
cb
;
cb
.
Assign
(
s
.
mId
)
;
c
.
id
(
)
=
cb
;
if
(
s
.
mTransports
.
WasPassed
(
)
)
{
uint8_t
transports
=
0
;
for
(
const
auto
&
t
:
s
.
mTransports
.
Value
(
)
)
{
if
(
t
=
=
AuthenticatorTransport
:
:
Usb
)
{
transports
|
=
U2F_AUTHENTICATOR_TRANSPORT_USB
;
}
if
(
t
=
=
AuthenticatorTransport
:
:
Nfc
)
{
transports
|
=
U2F_AUTHENTICATOR_TRANSPORT_NFC
;
}
if
(
t
=
=
AuthenticatorTransport
:
:
Ble
)
{
transports
|
=
U2F_AUTHENTICATOR_TRANSPORT_BLE
;
}
}
c
.
transports
(
)
=
transports
;
}
allowList
.
AppendElement
(
c
)
;
}
}
if
(
!
MaybeCreateBackgroundActor
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_OPERATION_ERR
)
;
return
promise
.
forget
(
)
;
}
bool
requireUserVerification
=
aOptions
.
mUserVerification
=
=
UserVerificationRequirement
:
:
Required
;
nsTArray
<
WebAuthnExtension
>
extensions
;
if
(
aOptions
.
mExtensions
.
mAppid
.
WasPassed
(
)
)
{
nsString
appId
(
aOptions
.
mExtensions
.
mAppid
.
Value
(
)
)
;
if
(
!
EvaluateAppID
(
mParent
origin
U2FOperation
:
:
Sign
appId
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
CryptoBuffer
appIdHash
;
if
(
!
appIdHash
.
SetLength
(
SHA256_LENGTH
fallible
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
promise
.
forget
(
)
;
}
nsresult
srv
=
HashCString
(
hashService
NS_ConvertUTF16toUTF8
(
appId
)
appIdHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
promise
.
forget
(
)
;
}
extensions
.
AppendElement
(
WebAuthnExtensionAppId
(
appIdHash
)
)
;
}
WebAuthnGetAssertionInfo
info
(
origin
rpIdHash
clientDataHash
adjustedTimeout
allowList
requireUserVerification
extensions
)
;
ListenForVisibilityEvents
(
)
;
AbortSignal
*
signal
=
nullptr
;
if
(
aSignal
.
WasPassed
(
)
)
{
signal
=
&
aSignal
.
Value
(
)
;
Follow
(
signal
)
;
}
MOZ_ASSERT
(
mTransaction
.
isNothing
(
)
)
;
mTransaction
=
Some
(
WebAuthnTransaction
(
promise
rpIdHash
clientDataJSON
signal
)
)
;
mChild
-
>
SendRequestSign
(
mTransaction
.
ref
(
)
.
mId
info
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
WebAuthnManager
:
:
Store
(
const
Credential
&
aCredential
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
)
{
CancelTransaction
(
NS_ERROR_ABORT
)
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mParent
)
;
ErrorResult
rv
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
;
return
promise
.
forget
(
)
;
}
void
WebAuthnManager
:
:
FinishMakeCredential
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialResult
&
aResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isNothing
(
)
|
|
mTransaction
.
ref
(
)
.
mId
!
=
aTransactionId
)
{
return
;
}
CryptoBuffer
regData
;
if
(
NS_WARN_IF
(
!
regData
.
Assign
(
aResult
.
RegBuffer
(
)
.
Elements
(
)
aResult
.
RegBuffer
(
)
.
Length
(
)
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
mozilla
:
:
dom
:
:
CryptoBuffer
aaguidBuf
;
if
(
NS_WARN_IF
(
!
aaguidBuf
.
SetCapacity
(
16
mozilla
:
:
fallible
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
for
(
int
i
=
0
;
i
<
16
;
i
+
+
)
{
aaguidBuf
.
AppendElement
(
0x00
mozilla
:
:
fallible
)
;
}
CryptoBuffer
pubKeyBuf
;
CryptoBuffer
keyHandleBuf
;
CryptoBuffer
attestationCertBuf
;
CryptoBuffer
signatureBuf
;
nsresult
rv
=
U2FDecomposeRegistrationResponse
(
regData
pubKeyBuf
keyHandleBuf
attestationCertBuf
signatureBuf
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
MOZ_ASSERT
(
keyHandleBuf
.
Length
(
)
<
=
0xFFFF
)
;
nsAutoString
keyHandleBase64Url
;
rv
=
keyHandleBuf
.
ToJwkBase64
(
keyHandleBase64Url
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
CryptoBuffer
clientDataBuf
;
if
(
!
clientDataBuf
.
Assign
(
mTransaction
.
ref
(
)
.
mClientData
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
rpIdHashBuf
;
if
(
!
rpIdHashBuf
.
Assign
(
mTransaction
.
ref
(
)
.
mRpIdHash
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
pubKeyObj
;
rv
=
CBOREncodePublicKeyObj
(
pubKeyBuf
pubKeyObj
)
;
if
(
NS_FAILED
(
rv
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
mozilla
:
:
dom
:
:
CryptoBuffer
counterBuf
;
if
(
NS_WARN_IF
(
!
counterBuf
.
SetCapacity
(
4
mozilla
:
:
fallible
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
counterBuf
.
AppendElement
(
0x00
mozilla
:
:
fallible
)
;
counterBuf
.
AppendElement
(
0x00
mozilla
:
:
fallible
)
;
counterBuf
.
AppendElement
(
0x00
mozilla
:
:
fallible
)
;
counterBuf
.
AppendElement
(
0x00
mozilla
:
:
fallible
)
;
CryptoBuffer
attDataBuf
;
rv
=
AssembleAttestationData
(
aaguidBuf
keyHandleBuf
pubKeyObj
attDataBuf
)
;
if
(
NS_FAILED
(
rv
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
mozilla
:
:
dom
:
:
CryptoBuffer
authDataBuf
;
const
uint8_t
flags
=
FLAG_TUP
|
FLAG_AT
;
rv
=
AssembleAuthenticatorData
(
rpIdHashBuf
flags
counterBuf
attDataBuf
authDataBuf
)
;
if
(
NS_FAILED
(
rv
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
CryptoBuffer
attObj
;
if
(
aResult
.
DirectAttestationPermitted
(
)
)
{
rv
=
CBOREncodeFidoU2FAttestationObj
(
authDataBuf
attestationCertBuf
signatureBuf
attObj
)
;
}
else
{
rv
=
CBOREncodeNoneAttestationObj
(
authDataBuf
attObj
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
RefPtr
<
AuthenticatorAttestationResponse
>
attestation
=
new
AuthenticatorAttestationResponse
(
mParent
)
;
attestation
-
>
SetClientDataJSON
(
clientDataBuf
)
;
attestation
-
>
SetAttestationObject
(
attObj
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mParent
)
;
credential
-
>
SetId
(
keyHandleBase64Url
)
;
credential
-
>
SetType
(
NS_LITERAL_STRING
(
"
public
-
key
"
)
)
;
credential
-
>
SetRawId
(
keyHandleBuf
)
;
credential
-
>
SetResponse
(
attestation
)
;
mTransaction
.
ref
(
)
.
mPromise
-
>
MaybeResolve
(
credential
)
;
ClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
FinishGetAssertion
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionResult
&
aResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isNothing
(
)
|
|
mTransaction
.
ref
(
)
.
mId
!
=
aTransactionId
)
{
return
;
}
CryptoBuffer
tokenSignatureData
;
if
(
NS_WARN_IF
(
!
tokenSignatureData
.
Assign
(
aResult
.
SigBuffer
(
)
.
Elements
(
)
aResult
.
SigBuffer
(
)
.
Length
(
)
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
clientDataBuf
;
if
(
!
clientDataBuf
.
Assign
(
mTransaction
.
ref
(
)
.
mClientData
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
rpIdHashBuf
;
if
(
!
rpIdHashBuf
.
Assign
(
aResult
.
RpIdHash
(
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
CryptoBuffer
signatureBuf
;
CryptoBuffer
counterBuf
;
uint8_t
flags
=
0
;
nsresult
rv
=
U2FDecomposeSignResponse
(
tokenSignatureData
flags
counterBuf
signatureBuf
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
flags
&
=
0b11
;
CryptoBuffer
attestationDataBuf
;
CryptoBuffer
authenticatorDataBuf
;
rv
=
AssembleAuthenticatorData
(
rpIdHashBuf
flags
counterBuf
attestationDataBuf
authenticatorDataBuf
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
CryptoBuffer
credentialBuf
;
if
(
!
credentialBuf
.
Assign
(
aResult
.
CredentialID
(
)
)
)
{
RejectTransaction
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
nsAutoString
credentialBase64Url
;
rv
=
credentialBuf
.
ToJwkBase64
(
credentialBase64Url
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
RejectTransaction
(
rv
)
;
return
;
}
RefPtr
<
AuthenticatorAssertionResponse
>
assertion
=
new
AuthenticatorAssertionResponse
(
mParent
)
;
assertion
-
>
SetClientDataJSON
(
clientDataBuf
)
;
assertion
-
>
SetAuthenticatorData
(
authenticatorDataBuf
)
;
assertion
-
>
SetSignature
(
signatureBuf
)
;
RefPtr
<
PublicKeyCredential
>
credential
=
new
PublicKeyCredential
(
mParent
)
;
credential
-
>
SetId
(
credentialBase64Url
)
;
credential
-
>
SetType
(
NS_LITERAL_STRING
(
"
public
-
key
"
)
)
;
credential
-
>
SetRawId
(
credentialBuf
)
;
credential
-
>
SetResponse
(
assertion
)
;
for
(
auto
&
ext
:
aResult
.
Extensions
(
)
)
{
if
(
ext
.
type
(
)
=
=
WebAuthnExtensionResult
:
:
TWebAuthnExtensionResultAppId
)
{
bool
appid
=
ext
.
get_WebAuthnExtensionResultAppId
(
)
.
AppId
(
)
;
credential
-
>
SetClientExtensionResultAppId
(
appid
)
;
}
}
mTransaction
.
ref
(
)
.
mPromise
-
>
MaybeResolve
(
credential
)
;
ClearTransaction
(
)
;
}
void
WebAuthnManager
:
:
RequestAborted
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTransaction
.
isSome
(
)
&
&
mTransaction
.
ref
(
)
.
mId
=
=
aTransactionId
)
{
RejectTransaction
(
aError
)
;
}
}
void
WebAuthnManager
:
:
Abort
(
)
{
CancelTransaction
(
NS_ERROR_DOM_ABORT_ERR
)
;
}
}
}
