#
include
"
hasht
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnUtil
.
h
"
#
include
"
mozpkix
/
pkixutil
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsICryptoHash
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsNetUtil
.
h
"
namespace
mozilla
:
:
dom
{
constexpr
auto
kGoogleAccountsAppId1
=
u
"
https
:
/
/
www
.
gstatic
.
com
/
securitykey
/
origins
.
json
"
_ns
;
constexpr
auto
kGoogleAccountsAppId2
=
u
"
https
:
/
/
www
.
gstatic
.
com
/
securitykey
/
a
/
google
.
com
/
origins
.
json
"
_ns
;
bool
EvaluateAppID
(
nsPIDOMWindowInner
*
aParent
const
nsCString
&
aOrigin
nsString
&
aAppId
)
{
nsCOMPtr
<
nsIURI
>
facetUri
;
if
(
NS_FAILED
(
NS_NewURI
(
getter_AddRefs
(
facetUri
)
aOrigin
)
)
)
{
return
false
;
}
if
(
!
facetUri
-
>
SchemeIs
(
"
https
"
)
)
{
return
false
;
}
if
(
aAppId
.
IsEmpty
(
)
|
|
aAppId
.
EqualsLiteral
(
"
null
"
)
)
{
aAppId
.
Assign
(
NS_ConvertUTF8toUTF16
(
aOrigin
)
)
;
return
true
;
}
nsAutoCString
appIdString
=
NS_ConvertUTF16toUTF8
(
aAppId
)
;
nsCOMPtr
<
nsIURI
>
appIdUri
;
if
(
NS_FAILED
(
NS_NewURI
(
getter_AddRefs
(
appIdUri
)
appIdString
)
)
)
{
return
false
;
}
if
(
!
appIdUri
-
>
SchemeIs
(
"
https
"
)
)
{
return
false
;
}
nsAutoCString
appIdHost
;
if
(
NS_FAILED
(
appIdUri
-
>
GetAsciiHost
(
appIdHost
)
)
)
{
return
false
;
}
if
(
appIdHost
.
EqualsLiteral
(
"
localhost
"
)
)
{
nsAutoCString
facetHost
;
if
(
NS_FAILED
(
facetUri
-
>
GetAsciiHost
(
facetHost
)
)
)
{
return
false
;
}
if
(
facetHost
.
EqualsLiteral
(
"
localhost
"
)
)
{
return
true
;
}
}
nsCOMPtr
<
Document
>
document
=
aParent
-
>
GetDoc
(
)
;
if
(
!
document
|
|
!
document
-
>
IsHTMLOrXHTML
(
)
)
{
return
false
;
}
nsHTMLDocument
*
html
=
document
-
>
AsHTMLDocument
(
)
;
nsCOMPtr
<
nsIEffectiveTLDService
>
tldService
=
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
)
;
if
(
!
tldService
)
{
return
false
;
}
nsAutoCString
lowestFacetHost
;
if
(
NS_FAILED
(
tldService
-
>
GetBaseDomain
(
facetUri
0
lowestFacetHost
)
)
)
{
return
false
;
}
if
(
html
-
>
IsRegistrableDomainSuffixOfOrEqualTo
(
NS_ConvertUTF8toUTF16
(
lowestFacetHost
)
appIdHost
)
)
{
return
true
;
}
if
(
lowestFacetHost
.
EqualsLiteral
(
"
google
.
com
"
)
&
&
(
aAppId
.
Equals
(
kGoogleAccountsAppId1
)
|
|
aAppId
.
Equals
(
kGoogleAccountsAppId2
)
)
)
{
return
true
;
}
return
false
;
}
nsresult
DefaultRpId
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aPrincipal
nsACString
&
aRpId
)
{
auto
*
basePrin
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
;
nsCOMPtr
<
nsIURI
>
uri
;
if
(
NS_FAILED
(
basePrin
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
uri
-
>
GetAsciiHost
(
aRpId
)
;
}
bool
IsWebAuthnAllowedInDocument
(
const
nsCOMPtr
<
Document
>
&
aDoc
)
{
MOZ_ASSERT
(
aDoc
)
;
return
aDoc
-
>
IsHTMLOrXHTML
(
)
;
}
bool
IsWebAuthnAllowedForPrincipal
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
if
(
aPrincipal
-
>
GetIsNullPrincipal
(
)
)
{
return
false
;
}
if
(
aPrincipal
-
>
GetIsIpAddress
(
)
)
{
return
false
;
}
if
(
!
aPrincipal
-
>
GetIsOriginPotentiallyTrustworthy
(
)
)
{
return
false
;
}
return
true
;
}
bool
IsValidRpId
(
const
nsCOMPtr
<
nsIPrincipal
>
&
aPrincipal
const
nsACString
&
aRpId
)
{
nsCString
normalizedRpId
;
nsresult
rv
=
NS_DomainToASCII
(
aRpId
normalizedRpId
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
if
(
normalizedRpId
!
=
aRpId
)
{
return
false
;
}
auto
*
basePrin
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
;
nsCOMPtr
<
nsIURI
>
currentURI
;
if
(
NS_FAILED
(
basePrin
-
>
GetURI
(
getter_AddRefs
(
currentURI
)
)
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
targetURI
;
rv
=
NS_MutateURI
(
currentURI
)
.
SetHost
(
aRpId
)
.
Finalize
(
targetURI
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
return
Document
:
:
IsValidDomain
(
currentURI
targetURI
)
;
}
static
nsresult
HashCString
(
nsICryptoHash
*
aHashService
const
nsACString
&
aIn
nsTArray
<
uint8_t
>
&
aOut
)
{
MOZ_ASSERT
(
aHashService
)
;
nsresult
rv
=
aHashService
-
>
Init
(
nsICryptoHash
:
:
SHA256
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
aHashService
-
>
Update
(
reinterpret_cast
<
const
uint8_t
*
>
(
aIn
.
BeginReading
(
)
)
aIn
.
Length
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsAutoCString
fullHash
;
rv
=
aHashService
-
>
Finish
(
false
fullHash
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
aOut
.
Clear
(
)
;
aOut
.
AppendElements
(
reinterpret_cast
<
uint8_t
const
*
>
(
fullHash
.
BeginReading
(
)
)
fullHash
.
Length
(
)
)
;
return
NS_OK
;
}
nsresult
HashCString
(
const
nsACString
&
aIn
nsTArray
<
uint8_t
>
&
aOut
)
{
nsresult
srv
;
nsCOMPtr
<
nsICryptoHash
>
hashService
=
do_CreateInstance
(
NS_CRYPTO_HASH_CONTRACTID
&
srv
)
;
if
(
NS_FAILED
(
srv
)
)
{
return
srv
;
}
srv
=
HashCString
(
hashService
aIn
aOut
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
srv
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
}
