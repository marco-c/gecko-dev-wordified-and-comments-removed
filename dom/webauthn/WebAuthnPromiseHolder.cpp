#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
WebAuthnPromiseHolder
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_ISUPPORTS
(
WebAuthnRegisterPromiseHolder
nsIWebAuthnRegisterPromise
)
;
already_AddRefed
<
WebAuthnRegisterPromise
>
WebAuthnRegisterPromiseHolder
:
:
Ensure
(
)
{
return
mRegisterPromise
.
Ensure
(
__func__
)
;
}
NS_IMETHODIMP
WebAuthnRegisterPromiseHolder
:
:
Resolve
(
nsICtapRegisterResult
*
aResult
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMShutdownThreads
)
)
{
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
RefPtr
<
nsICtapRegisterResult
>
result
(
aResult
)
;
mEventTarget
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
WebAuthnRegisterPromiseHolder
:
:
Resolve
"
[
self
=
RefPtr
{
this
}
result
]
(
)
{
self
-
>
mRegisterPromise
.
ResolveIfExists
(
result
__func__
)
;
}
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebAuthnRegisterPromiseHolder
:
:
Reject
(
nsresult
aResult
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMShutdownThreads
)
)
{
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
mEventTarget
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
WebAuthnRegisterPromiseHolder
:
:
Reject
"
[
self
=
RefPtr
{
this
}
aResult
]
(
)
{
self
-
>
mRegisterPromise
.
RejectIfExists
(
aResult
__func__
)
;
}
)
)
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
WebAuthnSignPromiseHolder
nsIWebAuthnSignPromise
)
;
already_AddRefed
<
WebAuthnSignPromise
>
WebAuthnSignPromiseHolder
:
:
Ensure
(
)
{
return
mSignPromise
.
Ensure
(
__func__
)
;
}
NS_IMETHODIMP
WebAuthnSignPromiseHolder
:
:
Resolve
(
nsICtapSignResult
*
aResult
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMShutdownThreads
)
)
{
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
RefPtr
<
nsICtapSignResult
>
result
(
aResult
)
;
mEventTarget
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
WebAuthnSignPromiseHolder
:
:
Resolve
"
[
self
=
RefPtr
{
this
}
result
]
(
)
{
self
-
>
mSignPromise
.
ResolveIfExists
(
result
__func__
)
;
}
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebAuthnSignPromiseHolder
:
:
Reject
(
nsresult
aResult
)
{
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMShutdownThreads
)
)
{
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
mEventTarget
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
WebAuthnSignPromiseHolder
:
:
Reject
"
[
self
=
RefPtr
{
this
}
aResult
]
(
)
{
self
-
>
mSignPromise
.
RejectIfExists
(
aResult
__func__
)
;
}
)
)
;
return
NS_OK
;
}
}
