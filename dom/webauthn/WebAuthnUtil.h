#
ifndef
mozilla_dom_WebAuthnUtil_h
#
define
mozilla_dom_WebAuthnUtil_h
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
dom
/
CryptoBuffer
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthenticationBinding
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
:
:
dom
{
enum
class
U2FOperation
{
Register
Sign
}
;
bool
EvaluateAppID
(
nsPIDOMWindowInner
*
aParent
const
nsString
&
aOrigin
nsString
&
aAppId
)
;
nsresult
AssembleAuthenticatorData
(
const
CryptoBuffer
&
rpIdHashBuf
const
uint8_t
flags
const
CryptoBuffer
&
counterBuf
const
CryptoBuffer
&
attestationDataBuf
CryptoBuffer
&
authDataBuf
)
;
nsresult
AssembleAttestationObject
(
const
CryptoBuffer
&
aRpIdHash
const
CryptoBuffer
&
aPubKeyBuf
const
CryptoBuffer
&
aKeyHandleBuf
const
CryptoBuffer
&
aAttestationCertBuf
const
CryptoBuffer
&
aSignatureBuf
bool
aForceNoneAttestation
CryptoBuffer
&
aAttestationObjBuf
)
;
nsresult
U2FDecomposeSignResponse
(
const
CryptoBuffer
&
aResponse
uint8_t
&
aFlags
CryptoBuffer
&
aCounterBuf
CryptoBuffer
&
aSignatureBuf
)
;
nsresult
U2FDecomposeRegistrationResponse
(
const
CryptoBuffer
&
aResponse
CryptoBuffer
&
aPubKeyBuf
CryptoBuffer
&
aKeyHandleBuf
CryptoBuffer
&
aAttestationCertBuf
CryptoBuffer
&
aSignatureBuf
)
;
nsresult
U2FDecomposeECKey
(
const
CryptoBuffer
&
aPubKeyBuf
CryptoBuffer
&
aXcoord
CryptoBuffer
&
aYcoord
)
;
nsresult
HashCString
(
const
nsACString
&
aIn
CryptoBuffer
&
aOut
)
;
nsresult
BuildTransactionHashes
(
const
nsCString
&
aRpId
const
nsCString
&
aClientDataJSON
CryptoBuffer
&
aRpIdHash
CryptoBuffer
&
aClientDataHash
)
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
UserVerificationRequirement
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
dom
:
:
UserVerificationRequirement
mozilla
:
:
dom
:
:
UserVerificationRequirement
:
:
Required
mozilla
:
:
dom
:
:
UserVerificationRequirement
:
:
EndGuard_
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
AttestationConveyancePreference
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
dom
:
:
AttestationConveyancePreference
mozilla
:
:
dom
:
:
AttestationConveyancePreference
:
:
None
mozilla
:
:
dom
:
:
AttestationConveyancePreference
:
:
EndGuard_
>
{
}
;
}
#
endif
