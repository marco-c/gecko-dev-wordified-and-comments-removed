#
include
"
cbor
-
cpp
/
src
/
cbor
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnCBORUtil
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnUtil
.
h
"
namespace
mozilla
{
namespace
dom
{
nsresult
CBOREncodePublicKeyObj
(
const
CryptoBuffer
&
aPubKeyBuf
CryptoBuffer
&
aPubKeyObj
)
{
mozilla
:
:
dom
:
:
CryptoBuffer
xBuf
yBuf
;
nsresult
rv
=
U2FDecomposeECKey
(
aPubKeyBuf
xBuf
yBuf
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
cbor
:
:
output_dynamic
cborPubKeyOut
;
cbor
:
:
encoder
encoder
(
cborPubKeyOut
)
;
encoder
.
write_map
(
5
)
;
{
encoder
.
write_int
(
1
)
;
encoder
.
write_int
(
2
)
;
encoder
.
write_int
(
3
)
;
encoder
.
write_int
(
-
7
)
;
encoder
.
write_int
(
-
1
)
;
encoder
.
write_int
(
1
)
;
encoder
.
write_int
(
-
2
)
;
encoder
.
write_bytes
(
xBuf
.
Elements
(
)
xBuf
.
Length
(
)
)
;
encoder
.
write_int
(
-
3
)
;
encoder
.
write_bytes
(
yBuf
.
Elements
(
)
yBuf
.
Length
(
)
)
;
}
if
(
!
aPubKeyObj
.
Assign
(
cborPubKeyOut
.
data
(
)
cborPubKeyOut
.
size
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
nsresult
CBOREncodeFidoU2FAttestationObj
(
const
CryptoBuffer
&
aAuthDataBuf
const
CryptoBuffer
&
aAttestationCertBuf
const
CryptoBuffer
&
aSignatureBuf
CryptoBuffer
&
aAttestationObj
)
{
cbor
:
:
output_dynamic
cborAttOut
;
cbor
:
:
encoder
encoder
(
cborAttOut
)
;
encoder
.
write_map
(
3
)
;
{
encoder
.
write_string
(
"
fmt
"
)
;
encoder
.
write_string
(
"
fido
-
u2f
"
)
;
encoder
.
write_string
(
"
attStmt
"
)
;
encoder
.
write_map
(
2
)
;
{
encoder
.
write_string
(
"
sig
"
)
;
encoder
.
write_bytes
(
aSignatureBuf
.
Elements
(
)
aSignatureBuf
.
Length
(
)
)
;
encoder
.
write_string
(
"
x5c
"
)
;
encoder
.
write_array
(
1
)
;
encoder
.
write_bytes
(
aAttestationCertBuf
.
Elements
(
)
aAttestationCertBuf
.
Length
(
)
)
;
}
encoder
.
write_string
(
"
authData
"
)
;
encoder
.
write_bytes
(
aAuthDataBuf
.
Elements
(
)
aAuthDataBuf
.
Length
(
)
)
;
}
if
(
!
aAttestationObj
.
Assign
(
cborAttOut
.
data
(
)
cborAttOut
.
size
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
nsresult
CBOREncodeNoneAttestationObj
(
const
CryptoBuffer
&
aAuthDataBuf
CryptoBuffer
&
aAttestationObj
)
{
cbor
:
:
output_dynamic
cborAttOut
;
cbor
:
:
encoder
encoder
(
cborAttOut
)
;
encoder
.
write_map
(
3
)
;
{
encoder
.
write_string
(
"
fmt
"
)
;
encoder
.
write_string
(
"
none
"
)
;
encoder
.
write_string
(
"
attStmt
"
)
;
encoder
.
write_map
(
0
)
;
encoder
.
write_string
(
"
authData
"
)
;
encoder
.
write_bytes
(
aAuthDataBuf
.
Elements
(
)
aAuthDataBuf
.
Length
(
)
)
;
}
if
(
!
aAttestationObj
.
Assign
(
cborAttOut
.
data
(
)
cborAttOut
.
size
(
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
}
}
