"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
webauthn
/
tests
/
browser
/
tab_webauthn_result
.
html
"
;
add_task
(
async
function
test_setup
(
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
webauth
.
webauthn_enable_softtoken
"
false
]
[
"
security
.
webauth
.
webauthn_enable_usbtoken
"
true
]
]
}
)
;
}
)
;
add_task
(
test_switch_tab
)
;
add_task
(
test_new_window_make
)
;
add_task
(
test_new_window_get
)
;
add_task
(
test_minimize_make
)
;
add_task
(
test_minimize_get
)
;
async
function
assertStatus
(
tab
expected
)
{
let
actual
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
info
(
"
visbility
state
:
"
+
content
.
document
.
visibilityState
)
;
info
(
"
active
:
"
+
content
.
browsingContext
.
isActive
)
;
return
content
.
document
.
getElementById
(
"
status
"
)
.
value
;
}
)
;
is
(
actual
expected
"
webauthn
request
"
+
expected
)
;
}
async
function
waitForStatus
(
tab
expected
)
{
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
[
expected
]
]
async
function
(
expected
)
{
return
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
info
(
"
expecting
"
+
expected
+
"
visbility
state
:
"
+
content
.
document
.
visibilityState
)
;
info
(
"
expecting
"
+
expected
+
"
active
:
"
+
content
.
browsingContext
.
isActive
)
;
return
content
.
document
.
getElementById
(
"
status
"
)
.
value
=
=
expected
;
}
)
;
}
)
;
await
assertStatus
(
tab
expected
)
;
}
function
startMakeCredentialRequest
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
const
cose_alg_ECDSA_w_SHA256
=
-
7
;
let
publicKey
=
{
rp
:
{
id
:
content
.
document
.
domain
name
:
"
none
"
icon
:
"
none
"
}
user
:
{
id
:
new
Uint8Array
(
)
name
:
"
none
"
icon
:
"
none
"
displayName
:
"
none
"
}
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
pubKeyCredParams
:
[
{
type
:
"
public
-
key
"
alg
:
cose_alg_ECDSA_w_SHA256
}
]
}
;
let
status
=
content
.
document
.
getElementById
(
"
status
"
)
;
info
(
"
Attempting
to
create
credential
for
origin
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
content
.
navigator
.
credentials
.
create
(
{
publicKey
}
)
.
then
(
(
)
=
>
{
status
.
value
=
"
completed
"
;
}
)
.
catch
(
(
)
=
>
{
status
.
value
=
"
aborted
"
;
}
)
;
status
.
value
=
"
pending
"
;
}
)
;
}
function
startGetAssertionRequest
(
tab
)
{
return
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
newCredential
=
{
type
:
"
public
-
key
"
id
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
transports
:
[
"
usb
"
]
}
;
let
publicKey
=
{
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
rpId
:
content
.
document
.
domain
allowCredentials
:
[
newCredential
]
}
;
let
status
=
content
.
document
.
getElementById
(
"
status
"
)
;
info
(
"
Attempting
to
get
credential
for
origin
:
"
+
content
.
document
.
nodePrincipal
.
origin
)
;
content
.
navigator
.
credentials
.
get
(
{
publicKey
}
)
.
then
(
(
)
=
>
{
status
.
value
=
"
completed
"
;
}
)
.
catch
(
ex
=
>
{
info
(
"
aborted
:
"
+
ex
)
;
status
.
value
=
"
aborted
"
;
}
)
;
status
.
value
=
"
pending
"
;
}
)
;
}
async
function
test_switch_tab
(
)
{
let
tab_create
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
startMakeCredentialRequest
(
tab_create
)
;
await
assertStatus
(
tab_create
"
pending
"
)
;
let
tab_get
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
assertStatus
(
tab_create
"
pending
"
)
;
await
startGetAssertionRequest
(
tab_get
)
;
await
waitForStatus
(
tab_create
"
aborted
"
)
;
await
assertStatus
(
tab_get
"
pending
"
)
;
await
startGetAssertionRequest
(
tab_get
)
;
await
waitForStatus
(
tab_get
"
aborted
"
)
;
BrowserTestUtils
.
removeTab
(
tab_create
)
;
BrowserTestUtils
.
removeTab
(
tab_get
)
;
}
function
waitForWindowActive
(
win
active
)
{
return
Promise
.
all
(
[
BrowserTestUtils
.
waitForEvent
(
win
active
?
"
focus
"
:
"
blur
"
)
BrowserTestUtils
.
waitForEvent
(
win
active
?
"
activate
"
:
"
deactivate
"
)
]
)
;
}
async
function
test_new_window_make
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
startMakeCredentialRequest
(
tab
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowGonePromise
=
waitForWindowActive
(
window
false
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
windowGonePromise
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowBackPromise
=
waitForWindowActive
(
window
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
windowBackPromise
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_new_window_get
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
startGetAssertionRequest
(
tab
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowGonePromise
=
waitForWindowActive
(
window
false
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
windowGonePromise
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowBackPromise
=
waitForWindowActive
(
window
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
windowBackPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_minimize_make
(
)
{
if
(
Services
.
env
.
get
(
"
MOZ_HEADLESS
"
)
)
{
return
;
}
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URL
)
;
await
startMakeCredentialRequest
(
tab
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowGonePromise
=
waitForWindowActive
(
win
false
)
;
win
.
minimize
(
)
;
await
assertStatus
(
tab
"
pending
"
)
;
await
windowGonePromise
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
waitForFocus
(
resolve
win
)
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowBackPromise
=
waitForWindowActive
(
window
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
windowBackPromise
;
}
async
function
test_minimize_get
(
)
{
if
(
Services
.
env
.
get
(
"
MOZ_HEADLESS
"
)
)
{
return
;
}
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
TEST_URL
)
;
await
startGetAssertionRequest
(
tab
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowGonePromise
=
waitForWindowActive
(
win
false
)
;
win
.
minimize
(
)
;
await
assertStatus
(
tab
"
pending
"
)
;
await
windowGonePromise
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
waitForFocus
(
resolve
win
)
)
;
await
assertStatus
(
tab
"
pending
"
)
;
let
windowBackPromise
=
waitForWindowActive
(
window
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
windowBackPromise
;
}
