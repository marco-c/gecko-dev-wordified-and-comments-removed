"
use
strict
"
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
FullScreen
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
fullScreenAndPointerLock
.
js
"
)
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
"
;
add_task
(
async
function
test_setup_usbtoken
(
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
webauth
.
webauthn_enable_softtoken
"
false
]
[
"
security
.
webauth
.
webauthn_enable_usbtoken
"
true
]
]
}
)
;
}
)
;
add_task
(
test_register
)
;
add_task
(
test_register_escape
)
;
add_task
(
test_register_direct_cancel
)
;
add_task
(
test_sign
)
;
add_task
(
test_sign_escape
)
;
add_task
(
test_tab_switching
)
;
add_task
(
test_window_switching
)
;
add_task
(
async
function
test_setup_fullscreen
(
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
fullscreen
.
autohide
"
true
]
[
"
full
-
screen
-
api
.
enabled
"
true
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
]
}
)
;
}
)
;
add_task
(
test_fullscreen_show_nav_toolbar
)
;
add_task
(
test_no_fullscreen_dom
)
;
add_task
(
async
function
test_setup_softtoken
(
)
{
add_virtual_authenticator
(
)
;
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
webauth
.
webauthn_enable_softtoken
"
true
]
[
"
security
.
webauth
.
webauthn_enable_usbtoken
"
false
]
]
}
)
;
}
)
;
add_task
(
test_register_direct_proceed
)
;
add_task
(
test_register_direct_proceed_anon
)
;
function
promiseNotification
(
id
)
{
return
new
Promise
(
resolve
=
>
{
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
function
shown
(
)
{
let
notification
=
PopupNotifications
.
getNotification
(
id
)
;
if
(
notification
)
{
ok
(
true
{
id
}
prompt
visible
)
;
PopupNotifications
.
panel
.
removeEventListener
(
"
popupshown
"
shown
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
function
promiseNavToolboxStatus
(
aExpectedStatus
)
{
let
navToolboxStatus
;
return
TestUtils
.
topicObserved
(
"
fullscreen
-
nav
-
toolbox
"
(
subject
data
)
=
>
{
navToolboxStatus
=
data
;
return
data
=
=
aExpectedStatus
;
}
)
.
then
(
(
)
=
>
ok
(
navToolboxStatus
=
=
aExpectedStatus
"
nav
toolbox
is
"
+
aExpectedStatus
)
)
;
}
function
promiseFullScreenPaint
(
aExpectedStatus
)
{
return
TestUtils
.
topicObserved
(
"
fullscreen
-
painted
"
)
;
}
function
triggerMainPopupCommand
(
popup
)
{
info
(
"
triggering
main
command
"
)
;
let
notifications
=
popup
.
childNodes
;
ok
(
notifications
.
length
"
at
least
one
notification
displayed
"
)
;
let
notification
=
notifications
[
0
]
;
info
(
"
triggering
command
:
"
+
notification
.
getAttribute
(
"
buttonlabel
"
)
)
;
return
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
button
{
}
)
;
}
let
expectNotAllowedError
=
expectError
(
"
NotAllowed
"
)
;
function
verifyAnonymizedCertificate
(
aResult
)
{
return
webAuthnDecodeCBORAttestation
(
aResult
.
attObj
)
.
then
(
(
{
fmt
attStmt
}
)
=
>
{
is
(
fmt
"
none
"
"
Is
a
None
Attestation
"
)
;
is
(
typeof
attStmt
"
object
"
"
attStmt
is
a
map
"
)
;
is
(
Object
.
keys
(
attStmt
)
.
length
0
"
attStmt
is
empty
"
)
;
}
)
;
}
async
function
verifyDirectCertificate
(
aResult
)
{
let
clientDataHash
=
await
crypto
.
subtle
.
digest
(
"
SHA
-
256
"
aResult
.
clientDataJSON
)
.
then
(
digest
=
>
new
Uint8Array
(
digest
)
)
;
let
{
fmt
attStmt
authData
authDataObj
}
=
await
webAuthnDecodeCBORAttestation
(
aResult
.
attObj
)
;
is
(
fmt
"
packed
"
"
Is
a
Packed
Attestation
"
)
;
let
signedData
=
new
Uint8Array
(
authData
.
length
+
clientDataHash
.
length
)
;
signedData
.
set
(
authData
)
;
signedData
.
set
(
clientDataHash
authData
.
length
)
;
let
valid
=
await
verifySignature
(
authDataObj
.
publicKeyHandle
signedData
new
Uint8Array
(
attStmt
.
sig
)
)
;
ok
(
valid
"
Signature
is
valid
.
"
)
;
}
async
function
test_register
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnMakeCredential
(
tab
"
none
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
await
request
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_register_escape
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnMakeCredential
(
tab
"
none
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
request
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_sign
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnGetAssertion
(
tab
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
await
request
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_sign_escape
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnGetAssertion
(
tab
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
request
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_register_direct_cancel
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
promise
=
promiseWebAuthnMakeCredential
(
tab
"
direct
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
register
-
direct
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
secondaryButton
.
click
(
)
;
await
promise
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_tab_switching
(
)
{
let
tab_one
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnMakeCredential
(
tab_one
"
none
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
is
(
PopupNotifications
.
panel
.
state
"
open
"
"
Doorhanger
is
visible
"
)
;
let
tab_two
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
org
/
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PopupNotifications
.
panel
.
state
=
=
"
closed
"
)
;
is
(
PopupNotifications
.
panel
.
state
"
closed
"
"
Doorhanger
is
hidden
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab_two
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PopupNotifications
.
panel
.
state
=
=
"
open
"
)
;
is
(
PopupNotifications
.
panel
.
state
"
open
"
"
Doorhanger
is
visible
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
await
triggerMainPopupCommand
(
PopupNotifications
.
panel
)
;
await
request
;
ok
(
!
active
"
request
should
be
stopped
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab_one
)
;
}
async
function
test_window_switching
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
active
=
true
;
let
request
=
promiseWebAuthnMakeCredential
(
tab
"
none
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
presence
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PopupNotifications
.
panel
.
state
=
=
"
open
"
)
;
is
(
PopupNotifications
.
panel
.
state
"
open
"
"
Doorhanger
is
visible
"
)
;
let
new_window
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
new_window
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
new_window
.
PopupNotifications
.
panel
.
state
=
=
"
closed
"
)
;
is
(
new_window
.
PopupNotifications
.
panel
.
state
"
closed
"
"
Doorhanger
is
hidden
"
)
;
await
BrowserTestUtils
.
closeWindow
(
new_window
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
PopupNotifications
.
panel
.
state
=
=
"
open
"
)
;
is
(
PopupNotifications
.
panel
.
state
"
open
"
"
Doorhanger
is
still
visible
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
await
triggerMainPopupCommand
(
PopupNotifications
.
panel
)
;
await
request
;
ok
(
!
active
"
request
should
be
stopped
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_register_direct_proceed
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
request
=
promiseWebAuthnMakeCredential
(
tab
"
direct
"
{
}
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
register
-
direct
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
await
request
.
then
(
verifyDirectCertificate
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_register_direct_proceed_anon
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
request
=
promiseWebAuthnMakeCredential
(
tab
"
direct
"
{
}
)
;
await
promiseNotification
(
"
webauthn
-
prompt
-
register
-
direct
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
checkbox
.
checked
=
true
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
await
request
.
then
(
verifyAnonymizedCertificate
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_fullscreen_show_nav_toolbar
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
fullscreenState
=
window
.
fullScreen
;
let
navToolboxHiddenPromise
=
promiseNavToolboxStatus
(
"
hidden
"
)
;
window
.
fullScreen
=
true
;
FullScreen
.
hideNavToolbox
(
false
)
;
await
navToolboxHiddenPromise
;
let
promptPromise
=
promiseNotification
(
"
webauthn
-
prompt
-
register
-
direct
"
)
;
let
navToolboxShownPromise
=
promiseNavToolboxStatus
(
"
shown
"
)
;
let
active
=
true
;
let
requestPromise
=
promiseWebAuthnMakeCredential
(
tab
"
direct
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
Promise
.
all
(
[
promptPromise
navToolboxShownPromise
]
)
;
ok
(
active
"
request
is
active
"
)
;
ok
(
window
.
fullScreen
"
window
is
fullscreen
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
secondaryButton
.
click
(
)
;
await
requestPromise
;
window
.
fullScreen
=
fullscreenState
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
async
function
test_no_fullscreen_dom
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
fullScreenPaintPromise
=
promiseFullScreenPaint
(
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
[
]
(
)
=
>
{
return
content
.
document
.
body
.
requestFullscreen
(
)
;
}
)
;
await
fullScreenPaintPromise
;
ok
(
!
!
document
.
fullscreenElement
"
a
DOM
element
is
fullscreen
"
)
;
let
promptPromise
=
promiseNotification
(
"
webauthn
-
prompt
-
register
-
direct
"
)
;
fullScreenPaintPromise
=
promiseFullScreenPaint
(
)
;
let
active
=
true
;
let
requestPromise
=
promiseWebAuthnMakeCredential
(
tab
"
direct
"
{
}
)
.
then
(
arrivingHereIsBad
)
.
catch
(
expectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
Promise
.
all
(
[
promptPromise
fullScreenPaintPromise
]
)
;
ok
(
active
"
request
is
active
"
)
;
ok
(
!
document
.
fullscreenElement
"
no
DOM
element
is
fullscreen
"
)
;
PopupNotifications
.
panel
.
firstElementChild
.
secondaryButton
.
click
(
)
;
await
requestPromise
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
