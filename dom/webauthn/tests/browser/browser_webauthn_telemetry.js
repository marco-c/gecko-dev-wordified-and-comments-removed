"
use
strict
"
;
function
getParentProcessScalars
(
aChannel
aKeyed
=
false
aClear
=
false
)
{
const
scalars
=
aKeyed
?
Services
.
telemetry
.
snapshotKeyedScalars
(
aChannel
aClear
)
[
"
parent
"
]
:
Services
.
telemetry
.
snapshotScalars
(
aChannel
aClear
)
[
"
parent
"
]
;
return
scalars
|
|
{
}
;
}
function
getTelemetryForScalar
(
aName
)
{
let
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTOUT
true
)
;
return
scalars
[
aName
]
|
|
0
;
}
function
cleanupTelemetry
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
Services
.
telemetry
.
getHistogramById
(
"
WEBAUTHN_CREATE_CREDENTIAL_MS
"
)
.
clear
(
)
;
Services
.
telemetry
.
getHistogramById
(
"
WEBAUTHN_GET_ASSERTION_MS
"
)
.
clear
(
)
;
}
function
validateHistogramEntryCount
(
aHistogramName
aExpectedCount
)
{
let
hist
=
Services
.
telemetry
.
getHistogramById
(
aHistogramName
)
;
let
resultIndexes
=
hist
.
snapshot
(
)
;
let
entriesSeen
=
0
;
for
(
let
i
=
0
;
i
<
resultIndexes
.
counts
.
length
;
i
+
+
)
{
entriesSeen
+
=
resultIndexes
.
counts
[
i
]
;
}
is
(
entriesSeen
aExpectedCount
"
Expecting
"
+
aExpectedCount
+
"
histogram
entries
in
"
+
aHistogramName
)
;
}
async
function
executeTestPage
(
aUri
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
aUri
)
;
try
{
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
function
(
)
{
let
condition
=
(
)
=
>
content
.
document
.
getElementById
(
"
result
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
condition
"
Waited
too
long
for
operation
to
finish
on
"
+
content
.
document
.
location
)
;
}
)
;
}
catch
(
e
)
{
ok
(
false
"
Exception
thrown
executing
test
page
:
"
+
e
)
;
}
finally
{
return
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
}
add_task
(
async
function
test_loopback
(
)
{
const
testPage
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
webauthn
/
tests
/
browser
/
frame_webauthn_success
.
html
"
;
{
cleanupTelemetry
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
false
)
;
await
executeTestPage
(
testPage
)
;
let
webauthn_used
=
getTelemetryForScalar
(
"
security
.
webauthn_used
"
)
;
ok
(
webauthn_used
"
Scalar
keys
are
set
:
"
+
Object
.
keys
(
webauthn_used
)
.
join
(
"
"
)
)
;
is
(
webauthn_used
[
"
U2FRegisterFinish
"
]
1
"
webauthn_used
U2FRegisterFinish
scalar
should
be
1
"
)
;
is
(
webauthn_used
[
"
U2FSignFinish
"
]
1
"
webauthn_used
U2FSignFinish
scalar
should
be
1
"
)
;
is
(
webauthn_used
[
"
U2FSignAbort
"
]
undefined
"
webauthn_used
U2FSignAbort
scalar
must
be
unset
"
)
;
is
(
webauthn_used
[
"
U2FRegisterAbort
"
]
undefined
"
webauthn_used
U2FRegisterAbort
scalar
must
be
unset
"
)
;
validateHistogramEntryCount
(
"
WEBAUTHN_CREATE_CREDENTIAL_MS
"
1
)
;
validateHistogramEntryCount
(
"
WEBAUTHN_GET_ASSERTION_MS
"
1
)
;
}
{
cleanupTelemetry
(
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
true
)
;
await
executeTestPage
(
testPage
)
;
let
webauthn_used
=
getTelemetryForScalar
(
"
security
.
webauthn_used
"
)
;
ok
(
webauthn_used
"
Scalar
keys
are
set
:
"
+
Object
.
keys
(
webauthn_used
)
.
join
(
"
"
)
)
;
is
(
webauthn_used
[
"
U2FRegisterFinish
"
]
undefined
"
webauthn_used
U2FRegisterFinish
must
be
unset
"
)
;
is
(
webauthn_used
[
"
U2FSignFinish
"
]
undefined
"
webauthn_used
U2FSignFinish
scalar
must
be
unset
"
)
;
is
(
webauthn_used
[
"
U2FRegisterAbort
"
]
1
"
webauthn_used
U2FRegisterAbort
scalar
should
be
a
1
"
)
;
is
(
webauthn_used
[
"
U2FSignAbort
"
]
undefined
"
webauthn_used
U2FSignAbort
scalar
must
be
unset
"
)
;
validateHistogramEntryCount
(
"
WEBAUTHN_CREATE_CREDENTIAL_MS
"
0
)
;
validateHistogramEntryCount
(
"
WEBAUTHN_GET_ASSERTION_MS
"
0
)
;
}
}
)
;
