"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
webauthn
/
tests
/
browser
/
tab_webauthn_result
.
html
"
;
async
function
assertStatus
(
tab
expected
)
{
let
actual
=
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
return
content
.
document
.
getElementById
(
"
status
"
)
.
value
;
}
)
;
is
(
actual
expected
"
webauthn
request
"
+
expected
)
;
}
async
function
waitForStatus
(
tab
expected
)
{
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
[
expected
]
async
function
(
expected
)
{
return
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
content
.
document
.
getElementById
(
"
status
"
)
.
value
=
=
expected
;
}
)
;
}
)
;
await
assertStatus
(
tab
expected
)
;
}
function
startMakeCredentialRequest
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
const
cose_alg_ECDSA_w_SHA256
=
-
7
;
let
publicKey
=
{
rp
:
{
id
:
content
.
document
.
domain
name
:
"
none
"
icon
:
"
none
"
}
user
:
{
id
:
new
Uint8Array
(
)
name
:
"
none
"
icon
:
"
none
"
displayName
:
"
none
"
}
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
pubKeyCredParams
:
[
{
type
:
"
public
-
key
"
alg
:
cose_alg_ECDSA_w_SHA256
}
]
}
;
let
status
=
content
.
document
.
getElementById
(
"
status
"
)
;
content
.
navigator
.
credentials
.
create
(
{
publicKey
}
)
.
then
(
(
)
=
>
{
status
.
value
=
"
completed
"
;
}
)
.
catch
(
(
)
=
>
{
status
.
value
=
"
aborted
"
;
}
)
;
status
.
value
=
"
pending
"
;
}
)
;
}
function
startGetAssertionRequest
(
tab
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
null
async
function
(
)
{
let
newCredential
=
{
type
:
"
public
-
key
"
id
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
transports
:
[
"
usb
"
]
}
;
let
publicKey
=
{
challenge
:
content
.
crypto
.
getRandomValues
(
new
Uint8Array
(
16
)
)
timeout
:
5000
rpId
:
content
.
document
.
domain
allowCredentials
:
[
newCredential
]
}
;
let
status
=
content
.
document
.
getElementById
(
"
status
"
)
;
content
.
navigator
.
credentials
.
get
(
{
publicKey
}
)
.
then
(
(
)
=
>
{
status
.
value
=
"
completed
"
;
}
)
.
catch
(
(
)
=
>
{
status
.
value
=
"
aborted
"
;
}
)
;
status
.
value
=
"
pending
"
;
}
)
;
}
add_task
(
async
function
test_abort
(
)
{
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
true
)
;
let
tab_create
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
startMakeCredentialRequest
(
tab_create
)
;
await
assertStatus
(
tab_create
"
pending
"
)
;
let
tab_get
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
await
waitForStatus
(
tab_create
"
aborted
"
)
;
await
startGetAssertionRequest
(
tab_get
)
;
await
assertStatus
(
tab_get
"
pending
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab_create
)
;
await
waitForStatus
(
tab_get
"
aborted
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab_create
)
;
await
BrowserTestUtils
.
removeTab
(
tab_get
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
webauthn
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
webauthn_enable_softtoken
"
)
;
Services
.
prefs
.
clearUserPref
(
"
security
.
webauth
.
webauthn_enable_usbtoken
"
)
;
}
)
;
