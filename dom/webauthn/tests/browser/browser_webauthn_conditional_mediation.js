"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
"
;
let
gAuthenticatorId
=
add_virtual_authenticator
(
)
;
let
gExpectNotAllowedError
=
expectError
(
"
NotAllowed
"
)
;
let
gPendingConditionalGetSubject
=
"
webauthn
:
conditional
-
get
-
pending
"
;
let
gWebAuthnService
=
Cc
[
"
mozilla
.
org
/
webauthn
/
service
;
1
"
]
.
getService
(
Ci
.
nsIWebAuthnService
)
;
add_task
(
async
function
test_webauthn_resume_conditional_get
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
browser
=
tab
.
linkedBrowser
.
browsingContext
.
embedderElement
;
let
browsingContextId
=
browser
.
browsingContext
.
id
;
let
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
browsingContextId
TEST_URL
)
;
ok
(
transactionId
=
=
0
"
should
not
have
a
pending
conditional
get
"
)
;
let
requestStarted
=
TestUtils
.
topicObserved
(
gPendingConditionalGetSubject
)
;
let
active
=
true
;
let
promise
=
promiseWebAuthnGetAssertionDiscoverable
(
tab
"
conditional
"
)
.
then
(
arrivingHereIsBad
)
.
catch
(
gExpectNotAllowedError
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
requestStarted
;
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
0
TEST_URL
)
;
ok
(
transactionId
=
=
0
"
hasPendingConditionalGet
should
check
the
browsing
context
id
"
)
;
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
browsingContextId
"
https
:
/
/
example
.
org
"
)
;
ok
(
transactionId
=
=
0
"
hasPendingConditionalGet
should
check
the
origin
"
)
;
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
browsingContextId
TEST_URL
)
;
ok
(
transactionId
!
=
0
"
should
have
a
pending
conditional
get
"
)
;
ok
(
active
"
request
should
still
be
active
"
)
;
gWebAuthnService
.
resumeConditionalGet
(
transactionId
)
;
await
promise
;
ok
(
!
active
"
request
should
not
be
active
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_webauthn_select_autofill_entry
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URL
)
;
let
cred1
=
await
addCredential
(
gAuthenticatorId
"
example
.
com
"
)
;
let
cred2
=
await
addCredential
(
gAuthenticatorId
"
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
.
browsingContext
.
embedderElement
;
let
browsingContextId
=
browser
.
browsingContext
.
id
;
let
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
browsingContextId
TEST_URL
)
;
ok
(
transactionId
=
=
0
"
should
not
have
a
pending
conditional
get
"
)
;
let
requestStarted
=
TestUtils
.
topicObserved
(
gPendingConditionalGetSubject
)
;
let
active
=
true
;
let
promise
=
promiseWebAuthnGetAssertionDiscoverable
(
tab
"
conditional
"
)
.
catch
(
arrivingHereIsBad
)
.
then
(
(
)
=
>
(
active
=
false
)
)
;
await
requestStarted
;
transactionId
=
gWebAuthnService
.
hasPendingConditionalGet
(
browsingContextId
TEST_URL
)
;
ok
(
transactionId
!
=
0
"
should
have
a
pending
conditional
get
"
)
;
let
autoFillEntries
=
gWebAuthnService
.
getAutoFillEntries
(
transactionId
)
;
ok
(
autoFillEntries
.
length
=
=
2
&
&
autoFillEntries
[
0
]
.
rpId
=
=
"
example
.
com
"
&
&
autoFillEntries
[
1
]
.
rpId
=
=
"
example
.
com
"
"
should
have
two
autofill
entries
for
example
.
com
"
)
;
gWebAuthnService
.
selectAutoFillEntry
(
transactionId
autoFillEntries
[
0
]
.
credentialId
)
;
let
result
=
await
promise
;
ok
(
!
active
"
request
should
not
be
active
"
)
;
gWebAuthnService
.
removeCredential
(
gAuthenticatorId
cred1
)
;
gWebAuthnService
.
removeCredential
(
gAuthenticatorId
cred2
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
