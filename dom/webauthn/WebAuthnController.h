#
ifndef
mozilla_dom_WebAuthnController_h
#
define
mozilla_dom_WebAuthnController_h
#
include
"
nsIWebAuthnController
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
Tainting
.
h
"
namespace
mozilla
:
:
dom
{
class
WebAuthnController
final
:
public
nsIWebAuthnController
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBAUTHNCONTROLLER
static
void
Initialize
(
)
;
static
WebAuthnController
*
Get
(
)
;
void
Register
(
PWebAuthnTransactionParent
*
aTransactionParent
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialInfo
&
aInfo
)
;
void
Sign
(
PWebAuthnTransactionParent
*
aTransactionParent
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionInfo
&
aInfo
)
;
void
Cancel
(
PWebAuthnTransactionParent
*
aTransactionParent
const
Tainted
<
uint64_t
>
&
aTransactionId
)
;
void
MaybeClearTransaction
(
PWebAuthnTransactionParent
*
aParent
)
;
private
:
WebAuthnController
(
)
;
~
WebAuthnController
(
)
=
default
;
nsCOMPtr
<
nsIWebAuthnTransport
>
GetTransportImpl
(
)
;
nsCOMPtr
<
nsIWebAuthnTransport
>
mTransportImpl
;
void
AbortTransaction
(
const
nsresult
&
aError
)
;
void
ClearTransaction
(
)
;
void
RunCancel
(
uint64_t
aTransactionId
)
;
void
RunFinishRegister
(
uint64_t
aTransactionId
const
RefPtr
<
nsICtapRegisterResult
>
&
aResult
)
;
void
RunFinishSign
(
uint64_t
aTransactionId
const
RefPtr
<
nsICtapSignResult
>
&
aResult
)
;
PWebAuthnTransactionParent
*
mTransactionParent
;
Maybe
<
uint64_t
>
mTransactionId
;
Maybe
<
nsCString
>
mPendingClientData
;
}
;
}
#
endif
