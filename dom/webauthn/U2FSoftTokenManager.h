#
ifndef
mozilla_dom_U2FSoftTokenManager_h
#
define
mozilla_dom_U2FSoftTokenManager_h
#
include
"
mozilla
/
dom
/
U2FTokenTransport
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
nsNSSShutDown
.
h
"
namespace
mozilla
{
namespace
dom
{
class
U2FSoftTokenManager
final
:
public
U2FTokenTransport
public
nsNSSShutDownObject
{
public
:
explicit
U2FSoftTokenManager
(
uint32_t
aCounter
)
;
virtual
RefPtr
<
U2FRegisterPromise
>
Register
(
const
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
&
aDescriptors
const
nsTArray
<
uint8_t
>
&
aApplication
const
nsTArray
<
uint8_t
>
&
aChallenge
uint32_t
aTimeoutMS
)
override
;
virtual
RefPtr
<
U2FSignPromise
>
Sign
(
const
nsTArray
<
WebAuthnScopedCredentialDescriptor
>
&
aDescriptors
const
nsTArray
<
uint8_t
>
&
aApplication
const
nsTArray
<
uint8_t
>
&
aChallenge
uint32_t
aTimeoutMS
)
override
;
virtual
void
Cancel
(
)
override
;
virtual
void
virtualDestroyNSSReference
(
)
override
;
void
destructorSafeDestroyNSSReference
(
)
;
private
:
~
U2FSoftTokenManager
(
)
;
nsresult
Init
(
)
;
bool
IsCompatibleVersion
(
const
nsAString
&
aVersion
)
;
nsresult
IsRegistered
(
const
nsTArray
<
uint8_t
>
&
aKeyHandle
const
nsTArray
<
uint8_t
>
&
aAppParam
bool
&
aResult
)
;
bool
mInitialized
;
mozilla
:
:
UniquePK11SymKey
mWrappingKey
;
static
const
nsCString
mSecretNickname
;
static
const
nsString
mVersion
;
nsresult
GetOrCreateWrappingKey
(
const
mozilla
:
:
UniquePK11SlotInfo
&
aSlot
const
nsNSSShutDownPreventionLock
&
)
;
uint32_t
mCounter
;
}
;
}
}
#
endif
