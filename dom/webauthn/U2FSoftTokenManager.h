#
ifndef
mozilla_dom_U2FSoftTokenManager_h
#
define
mozilla_dom_U2FSoftTokenManager_h
#
include
"
mozilla
/
dom
/
U2FTokenTransport
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
namespace
mozilla
:
:
dom
{
class
U2FSoftTokenManager
final
:
public
U2FTokenTransport
{
public
:
explicit
U2FSoftTokenManager
(
uint32_t
aCounter
)
;
RefPtr
<
U2FRegisterPromise
>
Register
(
const
WebAuthnMakeCredentialInfo
&
aInfo
bool
aForceNoneAttestation
void
_ctap2_status_callback
(
rust_ctap2_status_update_res
*
status
)
)
override
;
RefPtr
<
U2FSignPromise
>
Sign
(
const
WebAuthnGetAssertionInfo
&
aInfo
void
_ctap2_status_callback
(
rust_ctap2_status_update_res
*
status
)
)
override
;
void
Cancel
(
)
override
;
private
:
~
U2FSoftTokenManager
(
)
=
default
;
nsresult
Init
(
)
;
nsresult
IsRegistered
(
const
nsTArray
<
uint8_t
>
&
aKeyHandle
const
nsTArray
<
uint8_t
>
&
aAppParam
bool
&
aResult
)
;
bool
FindRegisteredKeyHandle
(
const
nsTArray
<
nsTArray
<
uint8_t
>
>
&
aAppIds
const
nsTArray
<
WebAuthnScopedCredential
>
&
aCredentials
nsTArray
<
uint8_t
>
&
aKeyHandle
nsTArray
<
uint8_t
>
&
aAppId
)
;
bool
mInitialized
;
mozilla
:
:
UniquePK11SymKey
mWrappingKey
;
static
const
nsCString
mSecretNickname
;
nsresult
GetOrCreateWrappingKey
(
const
mozilla
:
:
UniquePK11SlotInfo
&
aSlot
)
;
uint32_t
mCounter
;
}
;
}
#
endif
