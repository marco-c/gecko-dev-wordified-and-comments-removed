#
ifndef
mozilla_dom_WebAuthnTransactionParent_h
#
define
mozilla_dom_WebAuthnTransactionParent_h
#
include
"
mozilla
/
dom
/
PWebAuthnTransactionParent
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnPromiseHolder
.
h
"
#
include
"
nsIWebAuthnService
.
h
"
namespace
mozilla
:
:
dom
{
class
WebAuthnRegisterPromiseHolder
;
class
WebAuthnSignPromiseHolder
;
class
WebAuthnTransactionParent
final
:
public
PWebAuthnTransactionParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
WebAuthnTransactionParent
)
;
WebAuthnTransactionParent
(
)
=
default
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestRegister
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialInfo
&
aTransactionInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestSign
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionInfo
&
aTransactionInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestCancel
(
const
Tainted
<
uint64_t
>
&
aTransactionId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestIsUVPAA
(
RequestIsUVPAAResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDestroyMe
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
WebAuthnTransactionParent
(
)
=
default
;
void
CompleteTransaction
(
)
;
void
DisconnectTransaction
(
)
;
nsCOMPtr
<
nsIWebAuthnService
>
mWebAuthnService
;
Maybe
<
uint64_t
>
mTransactionId
;
MozPromiseRequestHolder
<
WebAuthnRegisterPromise
>
mRegisterPromiseRequest
;
MozPromiseRequestHolder
<
WebAuthnSignPromise
>
mSignPromiseRequest
;
}
;
}
#
endif
