#
ifndef
mozilla_dom_U2FTokenManager_h
#
define
mozilla_dom_U2FTokenManager_h
#
include
"
mozilla
/
dom
/
U2FTokenTransport
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
Tainting
.
h
"
namespace
mozilla
:
:
dom
{
class
U2FSoftTokenManager
;
class
WebAuthnTransactionParent
;
class
U2FTokenManager
final
{
public
:
static
U2FTokenManager
*
Get
(
)
;
void
Register
(
PWebAuthnTransactionParent
*
aTransactionParent
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialInfo
&
aTransactionInfo
)
;
void
Sign
(
PWebAuthnTransactionParent
*
aTransactionParent
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionInfo
&
aTransactionInfo
)
;
void
Cancel
(
PWebAuthnTransactionParent
*
aTransactionParent
const
Tainted
<
uint64_t
>
&
aTransactionId
)
;
void
MaybeClearTransaction
(
PWebAuthnTransactionParent
*
aParent
)
;
static
void
Initialize
(
)
;
U2FTokenManager
(
)
;
~
U2FTokenManager
(
)
=
default
;
private
:
RefPtr
<
U2FTokenTransport
>
GetTokenManagerImpl
(
)
;
void
AbortTransaction
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
;
void
AbortOngoingTransaction
(
)
;
void
ClearTransaction
(
)
;
void
MaybeConfirmRegister
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialResult
&
aResult
)
;
void
MaybeAbortRegister
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
;
void
MaybeConfirmSign
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionResult
&
aResult
)
;
void
MaybeAbortSign
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
;
PWebAuthnTransactionParent
*
mTransactionParent
;
RefPtr
<
U2FTokenTransport
>
mTokenManagerImpl
;
MozPromiseRequestHolder
<
U2FRegisterPromise
>
mRegisterPromise
;
MozPromiseRequestHolder
<
U2FSignPromise
>
mSignPromise
;
uint64_t
mLastTransactionId
;
}
;
}
#
endif
