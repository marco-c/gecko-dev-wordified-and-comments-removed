#
ifndef
mozilla_dom_U2FTokenManager_h
#
define
mozilla_dom_U2FTokenManager_h
#
include
"
mozilla
/
dom
/
U2FTokenTransport
.
h
"
namespace
mozilla
{
namespace
dom
{
class
U2FSoftTokenManager
;
class
WebAuthnTransactionParent
;
class
U2FTokenManager
final
{
public
:
enum
TransactionType
{
RegisterTransaction
=
0
SignTransaction
NumTransactionTypes
}
;
NS_INLINE_DECL_REFCOUNTING
(
U2FTokenManager
)
static
U2FTokenManager
*
Get
(
)
;
void
Register
(
WebAuthnTransactionParent
*
aTransactionParent
const
WebAuthnTransactionInfo
&
aTransactionInfo
)
;
void
Sign
(
WebAuthnTransactionParent
*
aTransactionParent
const
WebAuthnTransactionInfo
&
aTransactionInfo
)
;
void
Cancel
(
WebAuthnTransactionParent
*
aTransactionParent
)
;
void
MaybeClearTransaction
(
WebAuthnTransactionParent
*
aParent
)
;
static
void
Initialize
(
)
;
private
:
U2FTokenManager
(
)
;
~
U2FTokenManager
(
)
;
RefPtr
<
U2FTokenTransport
>
GetTokenManagerImpl
(
)
;
void
AbortTransaction
(
const
nsresult
&
aError
)
;
void
ClearTransaction
(
)
;
void
MaybeConfirmRegister
(
uint64_t
aTransactionId
U2FRegisterResult
&
aResult
)
;
void
MaybeAbortRegister
(
uint64_t
aTransactionId
const
nsresult
&
aError
)
;
void
MaybeConfirmSign
(
uint64_t
aTransactionId
U2FSignResult
&
aResult
)
;
void
MaybeAbortSign
(
uint64_t
aTransactionId
const
nsresult
&
aError
)
;
WebAuthnTransactionParent
*
mTransactionParent
;
RefPtr
<
U2FTokenTransport
>
mTokenManagerImpl
;
MozPromiseRequestHolder
<
U2FRegisterPromise
>
mRegisterPromise
;
MozPromiseRequestHolder
<
U2FSignPromise
>
mSignPromise
;
uint64_t
mTransactionId
;
}
;
}
}
#
endif
