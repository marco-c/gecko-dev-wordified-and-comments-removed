use
platform
:
:
monitor
:
:
Monitor
;
use
runloop
:
:
RunLoop
;
use
std
:
:
ffi
:
:
OsString
;
use
std
:
:
io
;
use
util
:
:
{
io_err
OnceCallback
}
;
pub
struct
Transaction
{
thread
:
Option
<
RunLoop
>
}
impl
Transaction
{
pub
fn
new
<
F
T
>
(
timeout
:
u64
callback
:
OnceCallback
<
T
>
new_device_cb
:
F
)
-
>
io
:
:
Result
<
Self
>
where
F
:
Fn
(
OsString
&
Fn
(
)
-
>
bool
)
+
Sync
+
Send
+
'
static
T
:
'
static
{
let
thread
=
RunLoop
:
:
new_with_timeout
(
move
|
alive
|
{
let
mut
monitor
=
Monitor
:
:
new
(
new_device_cb
)
;
try_or
!
(
monitor
.
run
(
alive
)
|
e
|
callback
.
call
(
Err
(
e
)
)
)
;
callback
.
call
(
Err
(
io_err
(
"
aborted
or
timed
out
"
)
)
)
;
}
timeout
)
?
;
Ok
(
Self
{
thread
:
Some
(
thread
)
}
)
}
pub
fn
cancel
(
&
mut
self
)
{
self
.
thread
.
take
(
)
.
unwrap
(
)
.
cancel
(
)
;
}
}
