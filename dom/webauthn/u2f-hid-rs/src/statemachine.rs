use
consts
:
:
PARAMETER_SIZE
;
use
platform
:
:
device
:
:
Device
;
use
platform
:
:
transaction
:
:
Transaction
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
Duration
;
use
util
:
:
{
io_err
OnceCallback
}
;
use
u2fprotocol
:
:
{
u2f_init_device
u2f_is_keyhandle_valid
u2f_register
u2f_sign
}
;
fn
is_valid_transport
(
transports
:
:
:
AuthenticatorTransports
)
-
>
bool
{
transports
.
is_empty
(
)
|
|
transports
.
contains
(
:
:
AuthenticatorTransports
:
:
USB
)
}
#
[
derive
(
Default
)
]
pub
struct
StateMachine
{
transaction
:
Option
<
Transaction
>
}
impl
StateMachine
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
pub
fn
register
(
&
mut
self
flags
:
:
:
RegisterFlags
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
key_handles
:
Vec
<
:
:
KeyHandle
>
callback
:
OnceCallback
<
Vec
<
u8
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
move
|
info
alive
|
{
let
dev
=
&
mut
match
Device
:
:
new
(
info
)
{
Ok
(
dev
)
=
>
dev
_
=
>
return
}
;
if
!
dev
.
is_u2f
(
)
|
|
!
u2f_init_device
(
dev
)
{
return
;
}
if
!
flags
.
is_empty
(
)
{
return
;
}
if
key_handles
.
iter
(
)
.
any
(
|
key_handle
|
{
is_valid_transport
(
key_handle
.
transports
)
&
&
u2f_is_keyhandle_valid
(
dev
&
challenge
&
application
&
key_handle
.
credential
)
.
unwrap_or
(
false
)
}
)
{
return
;
}
while
alive
(
)
{
if
let
Ok
(
bytes
)
=
u2f_register
(
dev
&
challenge
&
application
)
{
callback
.
call
(
Ok
(
bytes
)
)
;
break
;
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
_
|
{
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
transaction
"
)
)
)
}
)
)
;
}
pub
fn
sign
(
&
mut
self
flags
:
:
:
SignFlags
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
key_handles
:
Vec
<
:
:
KeyHandle
>
callback
:
OnceCallback
<
(
Vec
<
u8
>
Vec
<
u8
>
)
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
move
|
info
alive
|
{
let
dev
=
&
mut
match
Device
:
:
new
(
info
)
{
Ok
(
dev
)
=
>
dev
_
=
>
return
}
;
if
!
dev
.
is_u2f
(
)
|
|
!
u2f_init_device
(
dev
)
{
return
;
}
if
!
flags
.
is_empty
(
)
{
return
;
}
let
key_handles
=
key_handles
.
iter
(
)
.
filter
(
|
key_handle
|
{
u2f_is_keyhandle_valid
(
dev
&
challenge
&
application
&
key_handle
.
credential
)
.
unwrap_or
(
false
)
}
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
let
transports
=
key_handles
.
iter
(
)
.
fold
(
:
:
AuthenticatorTransports
:
:
empty
(
)
|
t
k
|
t
|
k
.
transports
)
;
if
!
is_valid_transport
(
transports
)
{
return
;
}
while
alive
(
)
{
if
key_handles
.
is_empty
(
)
{
let
blank
=
vec
!
[
0u8
;
PARAMETER_SIZE
]
;
if
let
Ok
(
_
)
=
u2f_register
(
dev
&
blank
&
blank
)
{
callback
.
call
(
Err
(
io_err
(
"
invalid
key
"
)
)
)
;
break
;
}
}
else
{
for
key_handle
in
&
key_handles
{
if
let
Ok
(
bytes
)
=
u2f_sign
(
dev
&
challenge
&
application
&
key_handle
.
credential
)
{
callback
.
call
(
Ok
(
(
key_handle
.
credential
.
clone
(
)
bytes
)
)
)
;
break
;
}
}
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
_
|
{
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
transaction
"
)
)
)
}
)
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
if
let
Some
(
mut
transaction
)
=
self
.
transaction
.
take
(
)
{
transaction
.
cancel
(
)
;
}
}
}
