use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
use
std
:
:
collections
:
:
hash_map
:
:
IterMut
;
use
std
:
:
hash
:
:
Hash
;
pub
struct
KeyHandleMatcher
<
'
a
K
>
{
key_handles
:
&
'
a
Vec
<
Vec
<
u8
>
>
map
:
HashMap
<
K
Vec
<
&
'
a
Vec
<
u8
>
>
>
}
impl
<
'
a
K
>
KeyHandleMatcher
<
'
a
K
>
where
K
:
Clone
+
Eq
+
Hash
{
pub
fn
new
(
key_handles
:
&
'
a
Vec
<
Vec
<
u8
>
>
)
-
>
Self
{
Self
{
key_handles
map
:
HashMap
:
:
new
(
)
}
}
pub
fn
update
<
F
V
>
(
&
mut
self
devices
:
IterMut
<
K
V
>
is_match
:
F
)
where
F
:
Fn
(
&
mut
V
&
Vec
<
u8
>
)
-
>
bool
{
let
mut
to_remove
:
HashSet
<
K
>
=
self
.
map
.
keys
(
)
.
cloned
(
)
.
collect
(
)
;
for
(
dev_ref
device
)
in
devices
{
to_remove
.
remove
(
dev_ref
)
;
if
self
.
map
.
contains_key
(
dev_ref
)
{
continue
;
}
let
mut
matches
=
vec
!
[
]
;
for
key_handle
in
self
.
key_handles
{
if
is_match
(
device
key_handle
)
{
matches
.
push
(
key_handle
)
;
}
}
self
.
map
.
insert
(
(
*
dev_ref
)
.
clone
(
)
matches
)
;
}
for
dev_ref
in
to_remove
{
self
.
map
.
remove
(
&
dev_ref
)
;
}
}
pub
fn
get
(
&
self
dev_ref
:
&
K
)
-
>
&
Vec
<
&
'
a
Vec
<
u8
>
>
{
self
.
map
.
get
(
dev_ref
)
.
expect
(
"
unknown
device
"
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
KeyHandleMatcher
;
use
std
:
:
collections
:
:
HashMap
;
#
[
test
]
fn
test
(
)
{
let
khs
=
vec
!
[
vec
!
[
0x01
0x02
0x03
0x04
]
vec
!
[
0x02
0x03
0x04
0x05
]
vec
!
[
0x03
0x04
0x05
0x06
]
]
;
let
mut
map
=
HashMap
:
:
new
(
)
;
map
.
insert
(
"
device1
"
1
)
;
map
.
insert
(
"
device2
"
2
)
;
map
.
insert
(
"
device3
"
3
)
;
let
mut
khm
=
KeyHandleMatcher
:
:
new
(
&
khs
)
;
khm
.
update
(
map
.
iter_mut
(
)
|
device
key_handle
|
*
device
>
key_handle
[
0
]
)
;
assert
!
(
khm
.
get
(
&
"
device1
"
)
.
is_empty
(
)
)
;
assert_eq
!
(
*
khm
.
get
(
&
"
device2
"
)
vec
!
[
&
vec
!
[
0x01
0x02
0x03
0x04
]
]
)
;
assert_eq
!
(
*
khm
.
get
(
&
"
device3
"
)
vec
!
[
&
vec
!
[
0x01
0x02
0x03
0x04
]
&
vec
!
[
0x02
0x03
0x04
0x05
]
]
)
;
map
.
insert
(
"
device4
"
4
)
;
khm
.
update
(
map
.
iter_mut
(
)
|
device
key_handle
|
{
assert_eq
!
(
*
device
4
)
;
key_handle
[
0
]
&
1
=
=
1
}
)
;
assert_eq
!
(
*
khm
.
get
(
&
"
device4
"
)
vec
!
[
&
vec
!
[
0x01
0x02
0x03
0x04
]
&
vec
!
[
0x03
0x04
0x05
0x06
]
]
)
;
map
.
remove
(
"
device2
"
)
;
khm
.
update
(
map
.
iter_mut
(
)
|
_
_
|
{
assert
!
(
false
)
;
false
}
)
;
map
.
insert
(
"
device2
"
2
)
;
khm
.
update
(
map
.
iter_mut
(
)
|
device
_
|
{
assert_eq
!
(
*
device
2
)
;
true
}
)
;
assert_eq
!
(
*
khm
.
get
(
&
"
device2
"
)
vec
!
[
&
vec
!
[
0x01
0x02
0x03
0x04
]
&
vec
!
[
0x02
0x03
0x04
0x05
]
&
vec
!
[
0x03
0x04
0x05
0x06
]
]
)
;
}
}
