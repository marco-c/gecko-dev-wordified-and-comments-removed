extern
crate
log
;
mod
device
;
mod
iokit
;
mod
monitor
;
mod
transaction
;
use
consts
:
:
PARAMETER_SIZE
;
use
platform
:
:
device
:
:
Device
;
use
platform
:
:
transaction
:
:
Transaction
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
Duration
;
use
u2fprotocol
:
:
{
u2f_init_device
u2f_register
u2f_sign
u2f_is_keyhandle_valid
}
;
use
util
:
:
{
io_err
OnceCallback
}
;
#
[
derive
(
Default
)
]
pub
struct
PlatformManager
{
transaction
:
Option
<
Transaction
>
}
impl
PlatformManager
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
pub
fn
register
(
&
mut
self
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
key_handles
:
Vec
<
Vec
<
u8
>
>
callback
:
OnceCallback
<
Vec
<
u8
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
move
|
device_ref
rx
alive
|
{
let
dev
=
&
mut
Device
:
:
new
(
device_ref
rx
)
;
if
!
u2f_init_device
(
dev
)
{
return
;
}
if
key_handles
.
iter
(
)
.
any
(
|
key_handle
|
{
u2f_is_keyhandle_valid
(
dev
&
challenge
&
application
key_handle
)
.
unwrap_or
(
false
)
}
)
{
return
;
}
while
alive
(
)
{
if
let
Ok
(
bytes
)
=
u2f_register
(
dev
&
challenge
&
application
)
{
callback
.
call
(
Ok
(
bytes
)
)
;
break
;
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
_
|
{
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
transaction
"
)
)
)
}
)
)
;
}
pub
fn
sign
(
&
mut
self
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
key_handles
:
Vec
<
Vec
<
u8
>
>
callback
:
OnceCallback
<
(
Vec
<
u8
>
Vec
<
u8
>
)
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
move
|
device_ref
rx
alive
|
{
let
dev
=
&
mut
Device
:
:
new
(
device_ref
rx
)
;
if
!
u2f_init_device
(
dev
)
{
return
;
}
let
key_handles
=
key_handles
.
iter
(
)
.
filter
(
|
key_handle
|
{
u2f_is_keyhandle_valid
(
dev
&
challenge
&
application
key_handle
)
.
unwrap_or
(
false
)
}
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
while
alive
(
)
{
if
key_handles
.
is_empty
(
)
{
let
blank
=
vec
!
[
0u8
;
PARAMETER_SIZE
]
;
if
let
Ok
(
_
)
=
u2f_register
(
dev
&
blank
&
blank
)
{
callback
.
call
(
Err
(
io_err
(
"
invalid
key
"
)
)
)
;
break
;
}
}
else
{
for
key_handle
in
&
key_handles
{
if
let
Ok
(
bytes
)
=
u2f_sign
(
dev
&
challenge
&
application
key_handle
)
{
callback
.
call
(
Ok
(
(
key_handle
.
to_vec
(
)
bytes
)
)
)
;
break
;
}
}
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
_
|
{
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
transaction
"
)
)
)
}
)
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
if
let
Some
(
mut
transaction
)
=
self
.
transaction
.
take
(
)
{
transaction
.
cancel
(
)
;
}
}
}
