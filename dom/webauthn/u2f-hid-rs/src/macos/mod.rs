extern
crate
log
;
extern
crate
libc
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
Duration
;
mod
device
;
mod
devicemap
;
mod
iokit
;
mod
iohid
;
mod
monitor
;
use
self
:
:
devicemap
:
:
DeviceMap
;
use
self
:
:
monitor
:
:
Monitor
;
use
consts
:
:
PARAMETER_SIZE
;
use
runloop
:
:
RunLoop
;
use
util
:
:
{
io_err
OnceCallback
}
;
use
u2fprotocol
:
:
{
u2f_register
u2f_sign
u2f_is_keyhandle_valid
}
;
#
[
derive
(
Default
)
]
pub
struct
PlatformManager
{
thread
:
Option
<
RunLoop
>
}
impl
PlatformManager
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
pub
fn
register
(
&
mut
self
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
callback
:
OnceCallback
<
Vec
<
u8
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
thread
=
RunLoop
:
:
new
(
move
|
alive
|
{
let
mut
devices
=
DeviceMap
:
:
new
(
)
;
let
monitor
=
try_or
!
(
Monitor
:
:
new
(
)
|
e
|
{
callback
.
call
(
Err
(
e
)
)
;
}
)
;
'
top
:
while
alive
(
)
&
&
monitor
.
alive
(
)
{
for
event
in
monitor
.
events
(
)
{
devices
.
process_event
(
event
)
;
}
for
device
in
devices
.
values_mut
(
)
{
if
let
Ok
(
bytes
)
=
u2f_register
(
device
&
challenge
&
application
)
{
callback
.
call
(
Ok
(
bytes
)
)
;
return
;
}
if
monitor
.
events
(
)
.
size_hint
(
)
.
0
>
0
{
debug
!
(
"
Hotplug
event
;
restarting
loop
"
)
;
continue
'
top
;
}
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
callback
.
call
(
Err
(
io_err
(
"
aborted
or
timed
out
"
)
)
)
;
}
timeout
)
;
self
.
thread
=
Some
(
try_or
!
(
thread
|
_
|
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
runloop
"
)
)
)
)
)
;
}
pub
fn
sign
(
&
mut
self
timeout
:
u64
challenge
:
Vec
<
u8
>
application
:
Vec
<
u8
>
key_handles
:
Vec
<
Vec
<
u8
>
>
callback
:
OnceCallback
<
(
Vec
<
u8
>
Vec
<
u8
>
)
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
thread
=
RunLoop
:
:
new
(
move
|
alive
|
{
let
mut
devices
=
DeviceMap
:
:
new
(
)
;
let
monitor
=
try_or
!
(
Monitor
:
:
new
(
)
|
e
|
{
callback
.
call
(
Err
(
e
)
)
;
}
)
;
'
top
:
while
alive
(
)
&
&
monitor
.
alive
(
)
{
for
event
in
monitor
.
events
(
)
{
devices
.
process_event
(
event
)
;
}
for
key_handle
in
&
key_handles
{
for
device
in
devices
.
values_mut
(
)
{
let
is_valid
=
match
u2f_is_keyhandle_valid
(
device
&
challenge
&
application
key_handle
)
{
Ok
(
result
)
=
>
result
Err
(
_
)
=
>
continue
}
;
if
is_valid
{
if
let
Ok
(
bytes
)
=
u2f_sign
(
device
&
challenge
&
application
key_handle
)
{
callback
.
call
(
Ok
(
(
key_handle
.
clone
(
)
bytes
)
)
)
;
return
;
}
}
else
{
let
blank
=
vec
!
[
0u8
;
PARAMETER_SIZE
]
;
if
u2f_register
(
device
&
blank
&
blank
)
.
is_ok
(
)
{
callback
.
call
(
Err
(
io_err
(
"
invalid
key
"
)
)
)
;
return
;
}
}
if
monitor
.
events
(
)
.
size_hint
(
)
.
0
>
0
{
debug
!
(
"
Hotplug
event
;
restarting
loop
"
)
;
continue
'
top
;
}
}
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
callback
.
call
(
Err
(
io_err
(
"
aborted
or
timed
out
"
)
)
)
;
}
timeout
)
;
self
.
thread
=
Some
(
try_or
!
(
thread
|
_
|
cbc
.
call
(
Err
(
io_err
(
"
couldn
'
t
create
runloop
"
)
)
)
)
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
if
let
Some
(
thread
)
=
self
.
thread
.
take
(
)
{
thread
.
cancel
(
)
;
}
}
}
impl
Drop
for
PlatformManager
{
fn
drop
(
&
mut
self
)
{
debug
!
(
"
OSX
PlatformManager
dropped
"
)
;
self
.
cancel
(
)
;
}
}
