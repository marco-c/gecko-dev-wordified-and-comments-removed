extern
crate
libc
;
use
core_foundation_sys
:
:
runloop
:
:
*
;
use
libc
:
:
c_void
;
use
platform
:
:
iokit
:
:
{
CFRunLoopEntryObserver
IOHIDDeviceRef
SendableRunLoop
}
;
use
platform
:
:
monitor
:
:
Monitor
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
Receiver
Sender
}
;
use
std
:
:
thread
;
use
util
:
:
OnceCallback
;
pub
struct
Transaction
{
runloop
:
Option
<
SendableRunLoop
>
thread
:
Option
<
thread
:
:
JoinHandle
<
(
)
>
>
}
impl
Transaction
{
pub
fn
new
<
F
T
>
(
timeout
:
u64
callback
:
OnceCallback
<
T
>
new_device_cb
:
F
)
-
>
Result
<
Self
:
:
Error
>
where
F
:
Fn
(
(
IOHIDDeviceRef
Receiver
<
Vec
<
u8
>
>
)
&
Fn
(
)
-
>
bool
)
+
Sync
+
Send
+
'
static
T
:
'
static
{
let
(
tx
rx
)
=
channel
(
)
;
let
timeout
=
(
timeout
as
f64
)
/
1000
.
0
;
let
builder
=
thread
:
:
Builder
:
:
new
(
)
;
let
thread
=
builder
.
spawn
(
move
|
|
{
let
context
=
&
tx
as
*
const
_
as
*
mut
c_void
;
let
obs
=
CFRunLoopEntryObserver
:
:
new
(
Transaction
:
:
observe
context
)
;
obs
.
add_to_current_runloop
(
)
;
let
mut
monitor
=
Monitor
:
:
new
(
new_device_cb
)
;
try_or
!
(
monitor
.
start
(
)
|
_
|
callback
.
call
(
Err
(
:
:
Error
:
:
Unknown
)
)
)
;
unsafe
{
CFRunLoopRunInMode
(
kCFRunLoopDefaultMode
timeout
0
)
}
;
monitor
.
stop
(
)
;
callback
.
call
(
Err
(
:
:
Error
:
:
NotAllowed
)
)
;
}
)
.
map_err
(
|
_
|
:
:
Error
:
:
Unknown
)
?
;
let
runloop
=
rx
.
recv
(
)
.
map_err
(
|
_
|
:
:
Error
:
:
Unknown
)
?
;
Ok
(
Self
{
runloop
:
Some
(
runloop
)
thread
:
Some
(
thread
)
}
)
}
extern
"
C
"
fn
observe
(
_
:
CFRunLoopObserverRef
_
:
CFRunLoopActivity
context
:
*
mut
c_void
)
{
let
tx
:
&
Sender
<
SendableRunLoop
>
=
unsafe
{
&
*
(
context
as
*
mut
_
)
}
;
let
_
=
tx
.
send
(
SendableRunLoop
:
:
new
(
unsafe
{
CFRunLoopGetCurrent
(
)
}
)
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
unsafe
{
CFRunLoopStop
(
*
self
.
runloop
.
take
(
)
.
unwrap
(
)
)
}
;
let
_
=
self
.
thread
.
take
(
)
.
unwrap
(
)
.
join
(
)
;
}
}
