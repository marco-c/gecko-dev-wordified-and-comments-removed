#
ifndef
mozilla_dom_WebAuthnPromiseHolder_h
#
define
mozilla_dom_WebAuthnPromiseHolder_h
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsIWebAuthnResult
.
h
"
#
include
"
nsIWebAuthnPromise
.
h
"
#
include
"
nsIThread
.
h
"
namespace
mozilla
:
:
dom
{
using
WebAuthnRegisterPromise
=
MozPromise
<
RefPtr
<
nsIWebAuthnRegisterResult
>
nsresult
true
>
;
using
WebAuthnSignPromise
=
MozPromise
<
RefPtr
<
nsIWebAuthnSignResult
>
nsresult
true
>
;
class
WebAuthnRegisterPromiseHolder
final
:
public
nsIWebAuthnRegisterPromise
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBAUTHNREGISTERPROMISE
explicit
WebAuthnRegisterPromiseHolder
(
nsISerialEventTarget
*
aEventTarget
)
:
mEventTarget
(
aEventTarget
)
{
}
already_AddRefed
<
WebAuthnRegisterPromise
>
Ensure
(
)
;
private
:
~
WebAuthnRegisterPromiseHolder
(
)
=
default
;
nsCOMPtr
<
nsISerialEventTarget
>
mEventTarget
;
MozPromiseHolder
<
WebAuthnRegisterPromise
>
mRegisterPromise
;
}
;
class
WebAuthnSignPromiseHolder
final
:
public
nsIWebAuthnSignPromise
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBAUTHNSIGNPROMISE
explicit
WebAuthnSignPromiseHolder
(
nsISerialEventTarget
*
aEventTarget
)
:
mEventTarget
(
aEventTarget
)
{
}
already_AddRefed
<
WebAuthnSignPromise
>
Ensure
(
)
;
private
:
~
WebAuthnSignPromiseHolder
(
)
=
default
;
nsCOMPtr
<
nsISerialEventTarget
>
mEventTarget
;
MozPromiseHolder
<
WebAuthnSignPromise
>
mSignPromise
;
}
;
}
#
endif
