#
ifndef
mozilla_dom_WebAuthnManager_h
#
define
mozilla_dom_WebAuthnManager_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnManagerBase
.
h
"
namespace
mozilla
{
namespace
dom
{
class
WebAuthnTransaction
{
public
:
explicit
WebAuthnTransaction
(
const
RefPtr
<
Promise
>
&
aPromise
)
:
mPromise
(
aPromise
)
mId
(
NextId
(
)
)
mVisibilityChanged
(
false
)
{
MOZ_ASSERT
(
mId
>
0
)
;
}
RefPtr
<
Promise
>
mPromise
;
uint64_t
mId
;
bool
mVisibilityChanged
;
private
:
static
uint64_t
NextId
(
)
{
static
uint64_t
id
=
0
;
return
+
+
id
;
}
}
;
class
WebAuthnManager
final
:
public
WebAuthnManagerBase
public
AbortFollower
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
WebAuthnManager
WebAuthnManagerBase
)
explicit
WebAuthnManager
(
nsPIDOMWindowInner
*
aParent
)
:
WebAuthnManagerBase
(
aParent
)
{
}
already_AddRefed
<
Promise
>
MakeCredential
(
const
PublicKeyCredentialCreationOptions
&
aOptions
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
)
;
already_AddRefed
<
Promise
>
GetAssertion
(
const
PublicKeyCredentialRequestOptions
&
aOptions
const
Optional
<
OwningNonNull
<
AbortSignal
>
>
&
aSignal
)
;
already_AddRefed
<
Promise
>
Store
(
const
Credential
&
aCredential
)
;
void
FinishMakeCredential
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialResult
&
aResult
)
override
;
void
FinishGetAssertion
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionResult
&
aResult
)
override
;
void
RequestAborted
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
override
;
void
Abort
(
)
override
;
protected
:
void
CancelTransaction
(
const
nsresult
&
aError
)
;
void
HandleVisibilityChange
(
)
override
;
private
:
virtual
~
WebAuthnManager
(
)
;
void
RejectTransaction
(
const
nsresult
&
aError
)
;
void
ClearTransaction
(
)
;
Maybe
<
WebAuthnTransaction
>
mTransaction
;
}
;
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
WebAuthnTransaction
&
aTransaction
const
char
*
aName
uint32_t
aFlags
=
0
)
{
ImplCycleCollectionTraverse
(
aCallback
aTransaction
.
mPromise
aName
aFlags
)
;
}
inline
void
ImplCycleCollectionUnlink
(
WebAuthnTransaction
&
aTransaction
)
{
ImplCycleCollectionUnlink
(
aTransaction
.
mPromise
)
;
}
}
}
#
endif
