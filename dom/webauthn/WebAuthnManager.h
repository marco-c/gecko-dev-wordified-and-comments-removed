#
ifndef
mozilla_dom_WebAuthnManager_h
#
define
mozilla_dom_WebAuthnManager_h
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
class
nsHTMLDocument
{
public
:
bool
IsRegistrableDomainSuffixOfOrEqualTo
(
const
nsAString
&
aHostSuffixString
const
nsACString
&
aOrigHost
)
;
}
;
namespace
mozilla
{
namespace
dom
{
struct
Account
;
class
ArrayBufferViewOrArrayBuffer
;
struct
AssertionOptions
;
class
OwningArrayBufferViewOrArrayBuffer
;
struct
MakePublicKeyCredentialOptions
;
class
Promise
;
class
WebAuthnTransactionChild
;
class
WebAuthnTransactionInfo
;
class
WebAuthnManager
final
:
public
nsIIPCBackgroundChildCreateCallback
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
static
WebAuthnManager
*
GetOrCreate
(
)
;
static
WebAuthnManager
*
Get
(
)
;
already_AddRefed
<
Promise
>
MakeCredential
(
nsPIDOMWindowInner
*
aParent
const
MakePublicKeyCredentialOptions
&
aOptions
)
;
already_AddRefed
<
Promise
>
GetAssertion
(
nsPIDOMWindowInner
*
aParent
const
PublicKeyCredentialRequestOptions
&
aOptions
)
;
already_AddRefed
<
Promise
>
Store
(
nsPIDOMWindowInner
*
aParent
const
Credential
&
aCredential
)
;
void
FinishMakeCredential
(
nsTArray
<
uint8_t
>
&
aRegBuffer
)
;
void
FinishGetAssertion
(
nsTArray
<
uint8_t
>
&
aCredentialId
nsTArray
<
uint8_t
>
&
aSigBuffer
)
;
void
RequestAborted
(
const
nsresult
&
aError
)
;
void
ActorDestroyed
(
)
;
private
:
WebAuthnManager
(
)
;
virtual
~
WebAuthnManager
(
)
;
void
StartRegister
(
)
;
void
StartSign
(
)
;
void
StartCancel
(
)
;
void
Cancel
(
const
nsresult
&
aError
)
;
void
MaybeClearTransaction
(
)
;
typedef
MozPromise
<
nsresult
nsresult
false
>
BackgroundActorPromise
;
RefPtr
<
BackgroundActorPromise
>
GetOrCreateBackgroundActor
(
)
;
RefPtr
<
Promise
>
mTransactionPromise
;
RefPtr
<
WebAuthnTransactionChild
>
mChild
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mCurrentParent
;
Maybe
<
nsCString
>
mClientData
;
Maybe
<
WebAuthnTransactionInfo
>
mInfo
;
MozPromiseHolder
<
BackgroundActorPromise
>
mPBackgroundCreationPromise
;
}
;
}
}
#
endif
