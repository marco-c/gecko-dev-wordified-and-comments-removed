#
ifndef
mozilla_dom_WebAuthnManager_h
#
define
mozilla_dom_WebAuthnManager_h
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
PWebAuthnTransaction
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
class
nsHTMLDocument
{
public
:
bool
IsRegistrableDomainSuffixOfOrEqualTo
(
const
nsAString
&
aHostSuffixString
const
nsACString
&
aOrigHost
)
;
}
;
namespace
mozilla
{
namespace
dom
{
struct
Account
;
class
ArrayBufferViewOrArrayBuffer
;
struct
AssertionOptions
;
class
OwningArrayBufferViewOrArrayBuffer
;
struct
MakePublicKeyCredentialOptions
;
class
Promise
;
class
WebAuthnTransactionChild
;
class
WebAuthnTransaction
{
public
:
WebAuthnTransaction
(
nsPIDOMWindowInner
*
aParent
const
RefPtr
<
Promise
>
&
aPromise
const
WebAuthnTransactionInfo
&
&
aInfo
const
nsAutoCString
&
&
aClientData
)
:
mParent
(
aParent
)
mPromise
(
aPromise
)
mInfo
(
aInfo
)
mClientData
(
aClientData
)
mId
(
NextId
(
)
)
{
MOZ_ASSERT
(
mId
>
0
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
RefPtr
<
Promise
>
mPromise
;
WebAuthnTransactionInfo
mInfo
;
nsCString
mClientData
;
uint64_t
mId
;
private
:
static
uint64_t
NextId
(
)
{
static
uint64_t
id
=
0
;
return
+
+
id
;
}
}
;
class
WebAuthnManager
final
:
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
static
WebAuthnManager
*
GetOrCreate
(
)
;
static
WebAuthnManager
*
Get
(
)
;
already_AddRefed
<
Promise
>
MakeCredential
(
nsPIDOMWindowInner
*
aParent
const
MakePublicKeyCredentialOptions
&
aOptions
)
;
already_AddRefed
<
Promise
>
GetAssertion
(
nsPIDOMWindowInner
*
aParent
const
PublicKeyCredentialRequestOptions
&
aOptions
)
;
already_AddRefed
<
Promise
>
Store
(
nsPIDOMWindowInner
*
aParent
const
Credential
&
aCredential
)
;
void
FinishMakeCredential
(
const
uint64_t
&
aTransactionId
nsTArray
<
uint8_t
>
&
aRegBuffer
)
;
void
FinishGetAssertion
(
const
uint64_t
&
aTransactionId
nsTArray
<
uint8_t
>
&
aCredentialId
nsTArray
<
uint8_t
>
&
aSigBuffer
)
;
void
RequestAborted
(
const
uint64_t
&
aTransactionId
const
nsresult
&
aError
)
;
void
ActorDestroyed
(
)
;
private
:
WebAuthnManager
(
)
;
virtual
~
WebAuthnManager
(
)
;
void
ClearTransaction
(
)
;
void
RejectTransaction
(
const
nsresult
&
aError
)
;
void
CancelTransaction
(
const
nsresult
&
aError
)
;
bool
MaybeCreateBackgroundActor
(
)
;
RefPtr
<
WebAuthnTransactionChild
>
mChild
;
Maybe
<
WebAuthnTransaction
>
mTransaction
;
}
;
}
}
#
endif
