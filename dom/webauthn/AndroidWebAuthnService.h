#
ifndef
mozilla_dom_AndroidWebAuthnService_h_
#
define
mozilla_dom_AndroidWebAuthnService_h_
#
include
"
mozilla
/
java
/
WebAuthnTokenManagerNatives
.
h
"
#
include
"
nsIWebAuthnService
.
h
"
namespace
mozilla
{
namespace
dom
{
constexpr
auto
kSecurityError
=
u
"
SECURITY_ERR
"
_ns
;
constexpr
auto
kConstraintError
=
u
"
CONSTRAINT_ERR
"
_ns
;
constexpr
auto
kNotSupportedError
=
u
"
NOT_SUPPORTED_ERR
"
_ns
;
constexpr
auto
kInvalidStateError
=
u
"
INVALID_STATE_ERR
"
_ns
;
constexpr
auto
kNotAllowedError
=
u
"
NOT_ALLOWED_ERR
"
_ns
;
constexpr
auto
kAbortError
=
u
"
ABORT_ERR
"
_ns
;
constexpr
auto
kEncodingError
=
u
"
ENCODING_ERR
"
_ns
;
constexpr
auto
kDataError
=
u
"
DATA_ERR
"
_ns
;
constexpr
auto
kTimeoutError
=
u
"
TIMEOUT_ERR
"
_ns
;
constexpr
auto
kNetworkError
=
u
"
NETWORK_ERR
"
_ns
;
constexpr
auto
kUnknownError
=
u
"
UNKNOWN_ERR
"
_ns
;
class
AndroidWebAuthnError
{
public
:
explicit
AndroidWebAuthnError
(
const
nsAString
&
aErrorCode
)
:
mErrorCode
(
aErrorCode
)
{
}
nsresult
GetError
(
)
const
{
if
(
mErrorCode
.
Equals
(
kSecurityError
)
)
{
return
NS_ERROR_DOM_SECURITY_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kConstraintError
)
)
{
return
NS_ERROR_DOM_INDEXEDDB_CONSTRAINT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNotSupportedError
)
)
{
return
NS_ERROR_DOM_NOT_SUPPORTED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kInvalidStateError
)
)
{
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNotAllowedError
)
)
{
return
NS_ERROR_DOM_NOT_ALLOWED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kEncodingError
)
)
{
return
NS_ERROR_DOM_ENCODING_NOT_SUPPORTED_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kDataError
)
)
{
return
NS_ERROR_DOM_DATA_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kTimeoutError
)
)
{
return
NS_ERROR_DOM_TIMEOUT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kNetworkError
)
)
{
return
NS_ERROR_DOM_NETWORK_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kAbortError
)
)
{
return
NS_ERROR_DOM_ABORT_ERR
;
}
else
if
(
mErrorCode
.
Equals
(
kUnknownError
)
)
{
return
NS_ERROR_DOM_UNKNOWN_ERR
;
}
else
{
__android_log_print
(
ANDROID_LOG_ERROR
"
Gecko
"
"
RegisterAbort
unknown
code
:
%
s
"
NS_ConvertUTF16toUTF8
(
mErrorCode
)
.
get
(
)
)
;
return
NS_ERROR_DOM_UNKNOWN_ERR
;
}
}
private
:
const
nsString
mErrorCode
;
}
;
class
AndroidWebAuthnService
final
:
public
nsIWebAuthnService
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBAUTHNSERVICE
AndroidWebAuthnService
(
)
=
default
;
private
:
~
AndroidWebAuthnService
(
)
=
default
;
Maybe
<
bool
>
mRegisterCredPropsRk
;
}
;
}
}
#
endif
