#
include
"
mozilla
/
dom
/
WebAuthnManagerBase
.
h
"
#
include
"
mozilla
/
dom
/
WebAuthnTransactionChild
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_NAMED_LITERAL_STRING
(
kVisibilityChange
"
visibilitychange
"
)
;
WebAuthnManagerBase
:
:
WebAuthnManagerBase
(
nsPIDOMWindowInner
*
aParent
)
:
mParent
(
aParent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aParent
)
;
}
WebAuthnManagerBase
:
:
~
WebAuthnManagerBase
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
bool
WebAuthnManagerBase
:
:
MaybeCreateBackgroundActor
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mChild
)
{
return
true
;
}
PBackgroundChild
*
actorChild
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actorChild
)
)
{
return
false
;
}
RefPtr
<
WebAuthnTransactionChild
>
mgr
(
new
WebAuthnTransactionChild
(
this
)
)
;
PWebAuthnTransactionChild
*
constructedMgr
=
actorChild
-
>
SendPWebAuthnTransactionConstructor
(
mgr
)
;
if
(
NS_WARN_IF
(
!
constructedMgr
)
)
{
return
false
;
}
MOZ_ASSERT
(
constructedMgr
=
=
mgr
)
;
mChild
=
mgr
.
forget
(
)
;
return
true
;
}
void
WebAuthnManagerBase
:
:
ActorDestroyed
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mChild
=
nullptr
;
}
void
WebAuthnManagerBase
:
:
ListenForVisibilityEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
mParent
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
;
}
nsresult
rv
=
doc
-
>
AddSystemEventListener
(
kVisibilityChange
this
true
false
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
void
WebAuthnManagerBase
:
:
StopListeningForVisibilityEvents
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
mParent
-
>
GetExtantDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
;
}
nsresult
rv
=
doc
-
>
RemoveSystemEventListener
(
kVisibilityChange
this
true
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
NS_IMETHODIMP
WebAuthnManagerBase
:
:
HandleEvent
(
nsIDOMEvent
*
aEvent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aEvent
)
;
nsAutoString
type
;
aEvent
-
>
GetType
(
type
)
;
if
(
!
type
.
Equals
(
kVisibilityChange
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
aEvent
-
>
InternalDOMEvent
(
)
-
>
GetTarget
(
)
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
doc
-
>
Hidden
(
)
)
{
CancelTransaction
(
NS_ERROR_ABORT
)
;
}
return
NS_OK
;
}
}
}
