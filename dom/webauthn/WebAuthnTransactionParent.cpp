#
include
"
mozilla
/
dom
/
WebAuthnTransactionParent
.
h
"
#
include
"
mozilla
/
dom
/
U2FTokenManager
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
namespace
mozilla
{
namespace
dom
{
mozilla
:
:
ipc
:
:
IPCResult
WebAuthnTransactionParent
:
:
RecvRequestRegister
(
const
uint64_t
&
aTransactionId
const
WebAuthnMakeCredentialInfo
&
aTransactionInfo
)
{
AssertIsOnBackgroundThread
(
)
;
U2FTokenManager
*
mgr
=
U2FTokenManager
:
:
Get
(
)
;
mgr
-
>
Register
(
this
aTransactionId
aTransactionInfo
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebAuthnTransactionParent
:
:
RecvRequestSign
(
const
uint64_t
&
aTransactionId
const
WebAuthnGetAssertionInfo
&
aTransactionInfo
)
{
AssertIsOnBackgroundThread
(
)
;
U2FTokenManager
*
mgr
=
U2FTokenManager
:
:
Get
(
)
;
mgr
-
>
Sign
(
this
aTransactionId
aTransactionInfo
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebAuthnTransactionParent
:
:
RecvRequestCancel
(
const
uint64_t
&
aTransactionId
)
{
AssertIsOnBackgroundThread
(
)
;
U2FTokenManager
*
mgr
=
U2FTokenManager
:
:
Get
(
)
;
mgr
-
>
Cancel
(
this
aTransactionId
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebAuthnTransactionParent
:
:
RecvDestroyMe
(
)
{
AssertIsOnBackgroundThread
(
)
;
IProtocol
*
mgr
=
Manager
(
)
;
if
(
!
Send__delete__
(
this
)
)
{
return
IPC_FAIL_NO_REASON
(
mgr
)
;
}
return
IPC_OK
(
)
;
}
void
WebAuthnTransactionParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
AssertIsOnBackgroundThread
(
)
;
U2FTokenManager
*
mgr
=
U2FTokenManager
:
:
Get
(
)
;
if
(
mgr
)
{
mgr
-
>
MaybeClearTransaction
(
this
)
;
}
}
}
}
