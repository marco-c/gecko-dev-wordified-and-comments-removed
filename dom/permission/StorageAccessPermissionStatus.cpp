#
include
"
mozilla
/
dom
/
StorageAccessPermissionStatus
.
h
"
#
include
"
mozilla
/
AntiTrackingUtils
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
#
include
"
mozilla
/
dom
/
PermissionStatus
.
h
"
#
include
"
mozilla
/
dom
/
PermissionStatusBinding
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIPermissionManager
.
h
"
namespace
mozilla
:
:
dom
{
StorageAccessPermissionStatus
:
:
StorageAccessPermissionStatus
(
nsPIDOMWindowInner
*
aWindow
)
:
PermissionStatus
(
aWindow
PermissionName
:
:
Storage_access
)
{
}
RefPtr
<
PermissionStatus
:
:
SimplePromise
>
StorageAccessPermissionStatus
:
:
UpdateState
(
)
{
nsGlobalWindowInner
*
window
=
GetOwnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
return
SimplePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
WindowGlobalChild
*
wgc
=
window
-
>
GetWindowGlobalChild
(
)
;
if
(
NS_WARN_IF
(
!
wgc
)
)
{
return
SimplePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
window
-
>
GetExtantDoc
(
)
u
"
storage
-
access
"
_ns
)
)
{
mState
=
PermissionState
:
:
Prompt
;
return
SimplePromise
:
:
CreateAndResolve
(
NS_OK
__func__
)
;
}
RefPtr
<
StorageAccessPermissionStatus
>
self
(
this
)
;
return
wgc
-
>
SendGetStorageAccessPermission
(
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
self
]
(
uint32_t
aAction
)
{
if
(
aAction
=
=
nsIPermissionManager
:
:
ALLOW_ACTION
)
{
self
-
>
mState
=
PermissionState
:
:
Granted
;
}
else
{
self
-
>
mState
=
PermissionState
:
:
Prompt
;
}
return
SimplePromise
:
:
CreateAndResolve
(
NS_OK
__func__
)
;
}
[
]
(
mozilla
:
:
ipc
:
:
ResponseRejectReason
aError
)
{
return
SimplePromise
:
:
CreateAndResolve
(
NS_ERROR_FAILURE
__func__
)
;
}
)
;
}
bool
StorageAccessPermissionStatus
:
:
MaybeUpdatedBy
(
nsIPermission
*
aPermission
)
const
{
return
false
;
}
bool
StorageAccessPermissionStatus
:
:
MaybeUpdatedByNotifyOnly
(
nsPIDOMWindowInner
*
aInnerWindow
)
const
{
nsPIDOMWindowInner
*
owner
=
GetOwnerWindow
(
)
;
NS_ENSURE_TRUE
(
owner
false
)
;
NS_ENSURE_TRUE
(
aInnerWindow
false
)
;
return
owner
-
>
WindowID
(
)
=
=
aInnerWindow
-
>
WindowID
(
)
;
}
}
