#
ifndef
mozilla_dom_PermissionStatus_h_
#
define
mozilla_dom_PermissionStatus_h_
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
PermissionStatusBinding
.
h
"
#
include
"
mozilla
/
dom
/
PermissionsBinding
.
h
"
namespace
mozilla
:
:
dom
{
class
PermissionStatusSink
;
class
PermissionStatus
:
public
DOMEventTargetHelper
{
friend
class
PermissionStatusSink
;
public
:
using
SimplePromise
=
MozPromise
<
nsresult
nsresult
true
>
;
PermissionStatus
(
nsIGlobalObject
*
aGlobal
PermissionName
aName
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
PermissionState
State
(
)
const
{
return
mState
;
}
void
SetState
(
PermissionState
aState
)
{
mState
=
aState
;
}
IMPL_EVENT_HANDLER
(
change
)
void
DisconnectFromOwner
(
)
override
;
PermissionName
Name
(
)
const
{
return
mName
;
}
void
GetType
(
nsACString
&
aName
)
const
;
RefPtr
<
SimplePromise
>
Init
(
)
;
protected
:
~
PermissionStatus
(
)
;
virtual
nsLiteralCString
GetPermissionType
(
)
const
;
private
:
virtual
already_AddRefed
<
PermissionStatusSink
>
CreateSink
(
)
;
void
PermissionChanged
(
uint32_t
aAction
)
;
PermissionState
ComputeStateFromAction
(
uint32_t
aAction
)
;
PermissionName
mName
;
RefPtr
<
PermissionStatusSink
>
mSink
;
protected
:
PermissionState
mState
;
}
;
}
#
endif
