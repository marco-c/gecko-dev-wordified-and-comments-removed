#
ifndef
mozilla_dom_PermissionStatusSink_h
#
define
mozilla_dom_PermissionStatusSink_h
#
include
"
mozilla
/
dom
/
PermissionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
PermissionStatusBinding
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIPermission
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
:
:
dom
{
class
PermissionObserver
;
class
PermissionStatus
;
class
WeakWorkerRef
;
class
PermissionStatusSink
{
public
:
using
PermissionStatePromise
=
MozPromise
<
uint32_t
nsresult
true
>
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PermissionStatusSink
)
PermissionStatusSink
(
PermissionStatus
*
aPermissionStatus
PermissionName
aPermissionName
const
nsACString
&
aPermissionType
)
;
RefPtr
<
PermissionStatePromise
>
Init
(
)
;
virtual
bool
MaybeUpdatedByOnMainThread
(
nsIPermission
*
aPermission
)
;
virtual
bool
MaybeUpdatedByNotifyOnlyOnMainThread
(
nsPIDOMWindowInner
*
aInnerWindow
)
;
void
PermissionChangedOnMainThread
(
)
;
PermissionName
Name
(
)
const
{
return
mPermissionName
;
}
void
Disentangle
(
)
;
protected
:
virtual
~
PermissionStatusSink
(
)
;
virtual
RefPtr
<
PermissionStatePromise
>
ComputeStateOnMainThread
(
)
;
RefPtr
<
PermissionStatePromise
>
ComputeStateOnMainThreadInternal
(
nsPIDOMWindowInner
*
aWindow
)
;
nsCOMPtr
<
nsISerialEventTarget
>
mSerialEventTarget
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipalForPermission
;
RefPtr
<
PermissionObserver
>
mObserver
;
RefPtr
<
PermissionStatus
>
mPermissionStatus
;
Mutex
mMutex
;
RefPtr
<
WeakWorkerRef
>
mWorkerRef
MOZ_GUARDED_BY
(
mMutex
)
;
PermissionName
mPermissionName
;
nsCString
mPermissionType
;
}
;
}
#
endif
