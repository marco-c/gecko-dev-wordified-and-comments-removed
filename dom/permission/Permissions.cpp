#
include
"
mozilla
/
dom
/
Permissions
.
h
"
#
include
"
mozilla
/
dom
/
PermissionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsIPermissionManager
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Permissions
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Permissions
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Permissions
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Permissions
mWindow
)
Permissions
:
:
Permissions
(
nsPIDOMWindow
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
Permissions
:
:
~
Permissions
(
)
{
}
JSObject
*
Permissions
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PermissionsBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Promise
>
Permissions
:
:
Query
(
const
PermissionDescriptor
&
aPermission
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
mWindow
)
;
if
(
!
global
)
{
return
nullptr
;
}
ErrorResult
aRv
;
nsRefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
promise
-
>
MaybeReject
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
promise
.
forget
(
)
;
}
}
}
