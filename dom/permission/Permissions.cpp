#
include
"
mozilla
/
dom
/
Permissions
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
MidiPermissionStatus
.
h
"
#
include
"
mozilla
/
dom
/
PermissionSetParametersBinding
.
h
"
#
include
"
mozilla
/
dom
/
PermissionStatus
.
h
"
#
include
"
mozilla
/
dom
/
PermissionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
StorageAccessPermissionStatus
.
h
"
#
include
"
PermissionUtils
.
h
"
namespace
mozilla
:
:
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Permissions
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Permissions
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Permissions
)
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Permissions
mWindow
)
Permissions
:
:
Permissions
(
nsPIDOMWindowInner
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
Permissions
:
:
~
Permissions
(
)
=
default
;
JSObject
*
Permissions
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Permissions_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
namespace
{
RefPtr
<
PermissionStatus
>
CreatePermissionStatus
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aPermissionDesc
nsPIDOMWindowInner
*
aWindow
ErrorResult
&
aRv
)
{
PermissionDescriptor
rootDesc
;
JS
:
:
Rooted
<
JS
:
:
Value
>
permissionDescValue
(
aCx
JS
:
:
ObjectOrNullValue
(
aPermissionDesc
)
)
;
if
(
NS_WARN_IF
(
!
rootDesc
.
Init
(
aCx
permissionDescValue
)
)
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
return
nullptr
;
}
switch
(
rootDesc
.
mName
)
{
case
PermissionName
:
:
Midi
:
{
MidiPermissionDescriptor
midiPerm
;
if
(
NS_WARN_IF
(
!
midiPerm
.
Init
(
aCx
permissionDescValue
)
)
)
{
aRv
.
NoteJSContextException
(
aCx
)
;
return
nullptr
;
}
return
new
MidiPermissionStatus
(
aWindow
midiPerm
.
mSysex
)
;
}
case
PermissionName
:
:
Storage_access
:
return
new
StorageAccessPermissionStatus
(
aWindow
)
;
case
PermissionName
:
:
Geolocation
:
case
PermissionName
:
:
Notifications
:
case
PermissionName
:
:
Push
:
case
PermissionName
:
:
Persistent_storage
:
case
PermissionName
:
:
Screen_wake_lock
:
return
new
PermissionStatus
(
aWindow
rootDesc
.
mName
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unhandled
type
"
)
;
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
}
}
already_AddRefed
<
Promise
>
Permissions
:
:
Query
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aPermission
ErrorResult
&
aRv
)
{
if
(
!
mWindow
|
|
!
mWindow
-
>
IsFullyActive
(
)
)
{
aRv
.
ThrowInvalidStateError
(
"
The
document
is
not
fully
active
.
"
)
;
return
nullptr
;
}
RefPtr
<
PermissionStatus
>
status
=
CreatePermissionStatus
(
aCx
aPermission
mWindow
aRv
)
;
if
(
!
status
)
{
return
nullptr
;
}
RefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
mWindow
-
>
AsGlobal
(
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
status
-
>
Init
(
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
status
promise
]
(
)
{
promise
-
>
MaybeResolve
(
status
)
;
return
;
}
[
promise
]
(
nsresult
aError
)
{
MOZ_ASSERT
(
NS_FAILED
(
aError
)
)
;
NS_WARNING
(
"
Failed
PermissionStatus
creation
"
)
;
promise
-
>
MaybeReject
(
aError
)
;
return
;
}
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
PermissionStatus
>
Permissions
:
:
ParseSetParameters
(
JSContext
*
aCx
const
PermissionSetParameters
&
aParameters
ErrorResult
&
aRv
)
{
JS
:
:
Rooted
<
JSObject
*
>
rootDesc
(
aCx
aParameters
.
mDescriptor
)
;
RefPtr
<
PermissionStatus
>
status
=
CreatePermissionStatus
(
aCx
rootDesc
nullptr
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
status
-
>
SetState
(
aParameters
.
mState
)
;
return
status
.
forget
(
)
;
}
}
