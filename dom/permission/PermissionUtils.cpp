#
include
"
PermissionUtils
.
h
"
#
include
"
nsIPermissionManager
.
h
"
namespace
mozilla
:
:
dom
{
static
const
nsLiteralCString
kPermissionTypes
[
]
=
{
"
geo
"
_ns
"
desktop
-
notification
"
_ns
"
desktop
-
notification
"
_ns
"
persistent
-
storage
"
_ns
"
midi
"
_ns
"
storage
-
access
"
_ns
"
screen
-
wake
-
lock
"
_ns
"
camera
"
_ns
"
microphone
"
_ns
}
;
const
size_t
kPermissionNameCount
=
ContiguousEnumSize
<
PermissionName
>
:
:
value
;
static_assert
(
MOZ_ARRAY_LENGTH
(
kPermissionTypes
)
=
=
kPermissionNameCount
"
kPermissionTypes
and
PermissionName
count
should
match
"
)
;
const
nsLiteralCString
&
PermissionNameToType
(
PermissionName
aName
)
{
MOZ_ASSERT
(
(
size_t
)
aName
<
ArrayLength
(
kPermissionTypes
)
)
;
return
kPermissionTypes
[
static_cast
<
size_t
>
(
aName
)
]
;
}
Maybe
<
PermissionName
>
TypeToPermissionName
(
const
nsACString
&
aType
)
{
if
(
aType
.
Equals
(
"
midi
-
sysex
"
_ns
)
)
{
return
Some
(
PermissionName
:
:
Midi
)
;
}
if
(
StringBeginsWith
(
aType
"
3rdPartyStorage
^
"
_ns
)
|
|
StringBeginsWith
(
aType
"
3rdPartyFrameStorage
^
"
_ns
)
)
{
return
Some
(
PermissionName
:
:
Storage_access
)
;
}
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
kPermissionTypes
)
;
+
+
i
)
{
if
(
kPermissionTypes
[
i
]
.
Equals
(
aType
)
)
{
return
Some
(
static_cast
<
PermissionName
>
(
i
)
)
;
}
}
return
Nothing
(
)
;
}
PermissionState
ActionToPermissionState
(
uint32_t
aAction
PermissionName
aName
)
{
switch
(
aAction
)
{
case
nsIPermissionManager
:
:
ALLOW_ACTION
:
return
PermissionState
:
:
Granted
;
case
nsIPermissionManager
:
:
DENY_ACTION
:
return
PermissionState
:
:
Denied
;
case
nsIPermissionManager
:
:
PROMPT_ACTION
:
if
(
aName
=
=
PermissionName
:
:
Camera
|
|
aName
=
=
PermissionName
:
:
Microphone
)
{
return
PermissionState
:
:
Granted
;
}
return
PermissionState
:
:
Prompt
;
default
:
return
PermissionState
:
:
Prompt
;
}
}
}
