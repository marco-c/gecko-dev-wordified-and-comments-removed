#
ifndef
mozilla_dom_PromiseNativeHandler_h
#
define
mozilla_dom_PromiseNativeHandler_h
#
include
<
functional
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PromiseNativeHandler
:
public
nsISupports
{
protected
:
virtual
~
PromiseNativeHandler
(
)
=
default
;
public
:
MOZ_CAN_RUN_SCRIPT
virtual
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
=
0
;
}
;
class
DomPromiseListener
final
:
public
PromiseNativeHandler
{
NS_DECL_ISUPPORTS
public
:
using
CallbackType
=
std
:
:
function
<
void
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
)
>
;
explicit
DomPromiseListener
(
Promise
*
aDOMPromise
)
;
DomPromiseListener
(
Promise
*
aDOMPromise
CallbackType
&
&
aResolve
CallbackType
&
&
aReject
)
;
void
SetResolvers
(
CallbackType
&
&
aResolve
CallbackType
&
&
aReject
)
;
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
private
:
~
DomPromiseListener
(
)
=
default
;
Maybe
<
CallbackType
>
mResolve
;
Maybe
<
CallbackType
>
mReject
;
}
;
}
}
#
endif
