function
createSandbox
(
)
{
const
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
return
new
Cu
.
Sandbox
(
principal
{
}
)
;
}
add_task
(
async
function
testReactionJob
(
)
{
const
sandbox
=
createSandbox
(
)
;
sandbox
.
eval
(
var
testPromise
=
Promise
.
resolve
(
10
)
;
)
;
const
p
=
new
Promise
(
resolve
=
>
{
sandbox
.
resolve
=
resolve
;
sandbox
.
eval
(
testPromise
.
then
(
resolve
)
;
)
;
}
)
;
const
result
=
await
p
;
equal
(
result
10
)
;
}
)
;
add_task
(
async
function
testReactionJobNuked
(
)
{
const
sandbox
=
createSandbox
(
)
;
sandbox
.
eval
(
var
testPromise
=
Promise
.
resolve
(
10
)
;
)
;
const
p1
=
new
Promise
(
resolve
=
>
{
sandbox
.
resolve
=
resolve
;
sandbox
.
eval
(
testPromise
.
then
(
resolve
)
;
)
;
Cu
.
nukeSandbox
(
sandbox
)
;
}
)
;
const
p2
=
Promise
.
resolve
(
11
)
;
const
result
=
await
Promise
.
race
(
[
p1
p2
]
)
;
equal
(
result
11
)
;
}
)
;
add_task
(
async
function
testReactionJobWithXray
(
)
{
const
sandbox
=
createSandbox
(
)
;
sandbox
.
eval
(
var
testPromise
=
Promise
.
resolve
(
10
)
;
)
;
const
result
=
await
new
Promise
(
resolve
=
>
{
sandbox
.
testPromise
.
then
(
resolve
)
;
Cu
.
nukeSandbox
(
sandbox
)
;
}
)
;
equal
(
result
10
)
;
}
)
;
add_task
(
async
function
testBoundReactionJob
(
)
{
const
sandbox
=
createSandbox
(
)
;
sandbox
.
eval
(
var
resolve
=
undefined
;
var
callbackPromise
=
new
Promise
(
r
=
>
{
resolve
=
r
;
}
)
;
var
callback
=
function
(
v
)
{
resolve
(
v
+
1
)
;
}
;
)
;
sandbox
.
bound_callback
=
Function
.
prototype
.
bind
.
call
(
sandbox
.
callback
sandbox
)
;
sandbox
.
eval
(
Promise
.
resolve
(
10
)
.
then
(
bound_callback
)
;
)
;
const
result
=
await
sandbox
.
callbackPromise
;
equal
(
result
11
)
;
}
)
;
add_task
(
async
function
testThenableJob
(
)
{
const
sandbox
=
createSandbox
(
)
;
const
p
=
new
Promise
(
resolve
=
>
{
sandbox
.
then
=
function
(
onFulfilled
onRejected
)
{
resolve
(
10
)
;
}
;
}
)
;
sandbox
.
eval
(
var
thenable
=
{
then
:
then
}
;
Promise
.
resolve
(
thenable
)
;
)
;
const
result
=
await
p
;
equal
(
result
10
)
;
}
)
;
add_task
(
async
function
testThenableJobNuked
(
)
{
const
sandbox
=
createSandbox
(
)
;
let
called
=
false
;
sandbox
.
then
=
function
(
onFulfilled
onRejected
)
{
called
=
true
;
}
;
sandbox
.
eval
(
var
thenable
=
{
then
:
then
}
;
Promise
.
resolve
(
thenable
)
;
)
;
Cu
.
nukeSandbox
(
sandbox
)
;
await
Promise
.
resolve
(
10
)
;
equal
(
Services
.
console
.
getMessageArray
(
)
.
find
(
x
=
>
{
return
x
.
toString
(
)
.
includes
(
"
can
'
t
access
dead
object
"
)
;
}
)
!
=
=
undefined
true
)
;
equal
(
called
false
)
;
}
)
;
add_task
(
async
function
testThenableJobAccessError
(
)
{
const
sandbox
=
createSandbox
(
)
;
let
accessed
=
false
;
sandbox
.
thenable
=
{
get
then
(
)
{
accessed
=
true
;
return
undefined
;
}
}
;
sandbox
.
eval
(
var
x
=
typeof
thenable
.
then
;
Promise
.
resolve
(
thenable
)
;
)
;
equal
(
accessed
false
)
;
}
)
;
add_task
(
async
function
testBoundThenableJob
(
)
{
const
sandbox
=
createSandbox
(
)
;
sandbox
.
eval
(
var
resolve
=
undefined
;
var
callbackPromise
=
new
Promise
(
r
=
>
{
resolve
=
r
;
}
)
;
var
callback
=
function
(
v
)
{
resolve
(
v
+
1
)
;
}
;
var
then
=
function
(
onFulfilled
onRejected
)
{
onFulfilled
(
10
)
;
}
;
)
;
sandbox
.
bound_then
=
Function
.
prototype
.
bind
.
call
(
sandbox
.
then
sandbox
)
;
sandbox
.
eval
(
var
thenable
=
{
then
:
bound_then
}
;
Promise
.
resolve
(
thenable
)
.
then
(
callback
)
;
)
;
const
result
=
await
sandbox
.
callbackPromise
;
equal
(
result
11
)
;
}
)
;
