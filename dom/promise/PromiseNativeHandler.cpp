#
include
"
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS0
(
DomPromiseListener
)
DomPromiseListener
:
:
DomPromiseListener
(
dom
:
:
Promise
*
aDOMPromise
)
{
aDOMPromise
-
>
AppendNativeHandler
(
this
)
;
}
DomPromiseListener
:
:
DomPromiseListener
(
dom
:
:
Promise
*
aDOMPromise
CallbackType
&
&
aResolve
CallbackType
&
&
aReject
)
:
mResolve
(
Some
(
std
:
:
move
(
aResolve
)
)
)
mReject
(
Some
(
std
:
:
move
(
aReject
)
)
)
{
aDOMPromise
-
>
AppendNativeHandler
(
this
)
;
}
void
DomPromiseListener
:
:
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
if
(
mResolve
)
{
(
*
mResolve
)
(
aCx
aValue
)
;
}
mResolve
.
reset
(
)
;
mReject
.
reset
(
)
;
}
void
DomPromiseListener
:
:
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
if
(
mReject
)
{
(
*
mReject
)
(
aCx
aValue
)
;
}
mResolve
.
reset
(
)
;
mReject
.
reset
(
)
;
}
void
DomPromiseListener
:
:
SetResolvers
(
CallbackType
&
&
aResolve
CallbackType
&
&
aReject
)
{
mResolve
=
Some
(
std
:
:
move
(
aResolve
)
)
;
mReject
=
Some
(
std
:
:
move
(
aReject
)
)
;
}
}
}
