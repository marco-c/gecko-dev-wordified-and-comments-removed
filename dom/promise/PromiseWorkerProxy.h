#
ifndef
mozilla_dom_PromiseWorkerProxy_h
#
define
mozilla_dom_PromiseWorkerProxy_h
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
workers
/
bindings
/
WorkerHolder
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
WorkerRunnable
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
namespace
workers
{
class
WorkerPrivate
;
}
class
PromiseWorkerProxy
:
public
PromiseNativeHandler
public
StructuredCloneHolderBase
{
friend
class
PromiseWorkerProxyRunnable
;
NS_DECL_THREADSAFE_ISUPPORTS
public
:
typedef
JSObject
*
(
*
ReadCallbackOp
)
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
const
PromiseWorkerProxy
*
aProxy
uint32_t
aTag
uint32_t
aData
)
;
typedef
bool
(
*
WriteCallbackOp
)
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWorker
PromiseWorkerProxy
*
aProxy
JS
:
:
HandleObject
aObj
)
;
struct
PromiseWorkerProxyStructuredCloneCallbacks
{
ReadCallbackOp
Read
;
WriteCallbackOp
Write
;
}
;
static
already_AddRefed
<
PromiseWorkerProxy
>
Create
(
workers
:
:
WorkerPrivate
*
aWorkerPrivate
Promise
*
aWorkerPromise
const
PromiseWorkerProxyStructuredCloneCallbacks
*
aCallbacks
=
nullptr
)
;
workers
:
:
WorkerPrivate
*
GetWorkerPrivate
(
)
const
;
Promise
*
WorkerPromise
(
)
const
;
void
CleanUp
(
)
;
Mutex
&
Lock
(
)
{
return
mCleanUpLock
;
}
bool
CleanedUp
(
)
const
{
mCleanUpLock
.
AssertCurrentThreadOwns
(
)
;
return
mCleanedUp
;
}
JSObject
*
CustomReadHandler
(
JSContext
*
aCx
JSStructuredCloneReader
*
aReader
uint32_t
aTag
uint32_t
aIndex
)
override
;
bool
CustomWriteHandler
(
JSContext
*
aCx
JSStructuredCloneWriter
*
aWriter
JS
:
:
Handle
<
JSObject
*
>
aObj
)
override
;
protected
:
virtual
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
virtual
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
private
:
PromiseWorkerProxy
(
workers
:
:
WorkerPrivate
*
aWorkerPrivate
Promise
*
aWorkerPromise
const
PromiseWorkerProxyStructuredCloneCallbacks
*
aCallbacks
=
nullptr
)
;
virtual
~
PromiseWorkerProxy
(
)
;
bool
AddRefObject
(
)
;
void
CleanProperties
(
)
;
typedef
void
(
Promise
:
:
*
RunCallbackFunc
)
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
)
;
void
RunCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
RunCallbackFunc
aFunc
)
;
workers
:
:
WorkerPrivate
*
mWorkerPrivate
;
RefPtr
<
Promise
>
mWorkerPromise
;
bool
mCleanedUp
;
const
PromiseWorkerProxyStructuredCloneCallbacks
*
mCallbacks
;
Mutex
mCleanUpLock
;
UniquePtr
<
workers
:
:
WorkerHolder
>
mWorkerHolder
;
}
;
}
}
#
endif
