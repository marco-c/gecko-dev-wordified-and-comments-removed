#
include
"
mozilla
/
dom
/
NavigationHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
NavigationHistoryEntryBinding
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
extern
mozilla
:
:
LazyLogModule
gNavigationLog
;
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
NavigationHistoryEntry
DOMEventTargetHelper
)
;
NS_IMPL_ADDREF_INHERITED
(
NavigationHistoryEntry
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
NavigationHistoryEntry
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
NavigationHistoryEntry
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NavigationHistoryEntry
:
:
NavigationHistoryEntry
(
nsIGlobalObject
*
aGlobal
const
class
SessionHistoryInfo
*
aSHInfo
int64_t
aIndex
)
:
DOMEventTargetHelper
(
aGlobal
)
mSHInfo
(
MakeUnique
<
class
SessionHistoryInfo
>
(
*
aSHInfo
)
)
mIndex
(
aIndex
)
{
}
NavigationHistoryEntry
:
:
~
NavigationHistoryEntry
(
)
=
default
;
void
NavigationHistoryEntry
:
:
GetUrl
(
nsAString
&
aResult
)
const
{
if
(
!
HasActiveDocument
(
)
)
{
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
GetAssociatedDocument
(
)
)
;
if
(
!
SameDocument
(
)
)
{
auto
referrerPolicy
=
GetAssociatedDocument
(
)
-
>
ReferrerPolicy
(
)
;
if
(
referrerPolicy
=
=
ReferrerPolicy
:
:
No_referrer
|
|
referrerPolicy
=
=
ReferrerPolicy
:
:
Origin
)
{
return
;
}
}
MOZ_ASSERT
(
mSHInfo
)
;
nsCOMPtr
<
nsIURI
>
uri
=
mSHInfo
-
>
GetURI
(
)
;
MOZ_ASSERT
(
uri
)
;
nsCString
uriSpec
;
uri
-
>
GetSpec
(
uriSpec
)
;
CopyUTF8toUTF16
(
uriSpec
aResult
)
;
}
void
NavigationHistoryEntry
:
:
GetKey
(
nsAString
&
aResult
)
const
{
if
(
!
HasActiveDocument
(
)
)
{
return
;
}
nsIDToCString
keyString
(
mSHInfo
-
>
NavigationKey
(
)
)
;
CopyUTF8toUTF16
(
Substring
(
keyString
.
get
(
)
+
1
NSID_LENGTH
-
3
)
aResult
)
;
}
void
NavigationHistoryEntry
:
:
GetId
(
nsAString
&
aResult
)
const
{
if
(
!
HasActiveDocument
(
)
)
{
return
;
}
nsIDToCString
idString
(
mSHInfo
-
>
NavigationId
(
)
)
;
CopyUTF8toUTF16
(
Substring
(
idString
.
get
(
)
+
1
NSID_LENGTH
-
3
)
aResult
)
;
}
int64_t
NavigationHistoryEntry
:
:
Index
(
)
const
{
MOZ_ASSERT
(
mSHInfo
)
;
if
(
!
HasActiveDocument
(
)
)
{
return
-
1
;
}
return
mIndex
;
}
bool
NavigationHistoryEntry
:
:
SameDocument
(
)
const
{
if
(
!
HasActiveDocument
(
)
)
{
return
false
;
}
MOZ_DIAGNOSTIC_ASSERT
(
GetAssociatedDocument
(
)
)
;
MOZ_ASSERT
(
mSHInfo
)
;
auto
*
docShell
=
nsDocShell
:
:
Cast
(
GetAssociatedDocument
(
)
-
>
GetDocShell
(
)
)
;
return
docShell
&
&
docShell
-
>
IsSameDocumentAsActiveEntry
(
*
mSHInfo
)
;
}
void
NavigationHistoryEntry
:
:
GetState
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
ErrorResult
&
aRv
)
const
{
if
(
!
mSHInfo
)
{
return
;
}
RefPtr
<
nsStructuredCloneContainer
>
state
=
mSHInfo
-
>
GetNavigationState
(
)
;
if
(
!
state
)
{
aResult
.
setUndefined
(
)
;
return
;
}
nsresult
rv
=
state
-
>
DeserializeToJsval
(
aCx
aResult
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
}
}
void
NavigationHistoryEntry
:
:
SetState
(
nsStructuredCloneContainer
*
aState
)
{
mSHInfo
-
>
SetNavigationState
(
aState
)
;
}
bool
NavigationHistoryEntry
:
:
IsSameEntry
(
const
class
SessionHistoryInfo
*
aSHInfo
)
const
{
return
mSHInfo
-
>
NavigationId
(
)
=
=
aSHInfo
-
>
NavigationId
(
)
;
}
bool
NavigationHistoryEntry
:
:
SharesDocumentWith
(
const
class
SessionHistoryInfo
&
aSHInfo
)
const
{
return
mSHInfo
-
>
SharesDocumentWith
(
aSHInfo
)
;
}
JSObject
*
NavigationHistoryEntry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
NavigationHistoryEntry_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
Document
*
NavigationHistoryEntry
:
:
GetAssociatedDocument
(
)
const
{
nsGlobalWindowInner
*
window
=
GetOwnerWindow
(
)
;
return
window
?
window
-
>
GetDocument
(
)
:
nullptr
;
}
bool
NavigationHistoryEntry
:
:
HasActiveDocument
(
)
const
{
if
(
auto
*
document
=
GetAssociatedDocument
(
)
)
{
return
document
-
>
IsCurrentActiveDocument
(
)
;
}
return
false
;
}
const
nsID
&
NavigationHistoryEntry
:
:
Key
(
)
const
{
return
mSHInfo
-
>
NavigationKey
(
)
;
}
nsStructuredCloneContainer
*
NavigationHistoryEntry
:
:
GetNavigationState
(
)
const
{
if
(
!
mSHInfo
)
{
return
nullptr
;
}
return
mSHInfo
-
>
GetNavigationState
(
)
;
}
void
NavigationHistoryEntry
:
:
ResetIndexForDisposal
(
)
{
mIndex
=
-
1
;
}
}
