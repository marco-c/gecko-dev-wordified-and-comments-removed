#
ifndef
mozilla_dom_Navigation_h___
#
define
mozilla_dom_Navigation_h___
#
include
"
nsHashtablesFwd
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStructuredCloneContainer
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
NavigateEvent
.
h
"
#
include
"
mozilla
/
dom
/
NavigationBinding
.
h
"
class
nsIDHashKey
;
namespace
mozilla
:
:
dom
{
class
FormData
;
class
NavigationActivation
;
class
NavigationDestination
;
class
NavigationHistoryEntry
;
struct
NavigationNavigateOptions
;
struct
NavigationOptions
;
class
NavigationTransition
;
struct
NavigationUpdateCurrentEntryOptions
;
struct
NavigationReloadOptions
;
struct
NavigationResult
;
class
SessionHistoryInfo
;
struct
NavigationAPIMethodTracker
;
class
Navigation
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
Navigation
DOMEventTargetHelper
)
explicit
Navigation
(
nsPIDOMWindowInner
*
aWindow
)
;
void
Entries
(
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
aResult
)
const
;
already_AddRefed
<
NavigationHistoryEntry
>
GetCurrentEntry
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
UpdateCurrentEntry
(
JSContext
*
aCx
const
NavigationUpdateCurrentEntryOptions
&
aOptions
ErrorResult
&
aRv
)
;
NavigationTransition
*
GetTransition
(
)
const
;
NavigationActivation
*
GetActivation
(
)
const
;
bool
CanGoBack
(
)
{
return
!
HasEntriesAndEventsDisabled
(
)
&
&
mCurrentEntryIndex
&
&
*
mCurrentEntryIndex
!
=
0
;
}
bool
CanGoForward
(
)
{
return
!
HasEntriesAndEventsDisabled
(
)
&
&
mCurrentEntryIndex
&
&
*
mCurrentEntryIndex
!
=
mEntries
.
Length
(
)
-
1
;
}
void
Navigate
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
NavigationNavigateOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Reload
(
JSContext
*
aCx
const
NavigationReloadOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
TraverseTo
(
JSContext
*
aCx
const
nsAString
&
aKey
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Back
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Forward
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
IMPL_EVENT_HANDLER
(
navigate
)
;
IMPL_EVENT_HANDLER
(
navigatesuccess
)
;
IMPL_EVENT_HANDLER
(
navigateerror
)
;
IMPL_EVENT_HANDLER
(
currententrychange
)
;
void
InitializeHistoryEntries
(
mozilla
:
:
Span
<
const
SessionHistoryInfo
>
aNewSHInfos
const
SessionHistoryInfo
*
aInitialSHInfo
)
;
MOZ_CAN_RUN_SCRIPT
void
UpdateForReactivation
(
SessionHistoryInfo
*
aReactivatedEntry
)
;
void
UpdateEntriesForSameDocumentNavigation
(
SessionHistoryInfo
*
aDestinationSHE
NavigationType
aNavigationType
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
bool
IsAPIEnabled
(
JSContext
*
=
nullptr
JSObject
*
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
bool
FireTraverseNavigateEvent
(
SessionHistoryInfo
*
aDestinationSessionHistoryInfo
Maybe
<
UserNavigationInvolvement
>
aUserInvolvement
)
;
MOZ_CAN_RUN_SCRIPT
bool
FirePushReplaceReloadNavigateEvent
(
NavigationType
aNavigationType
nsIURI
*
aDestinationURL
bool
aIsSameDocument
Maybe
<
UserNavigationInvolvement
>
aUserInvolvement
Element
*
aSourceElement
Maybe
<
const
FormData
&
>
aFormDataEntryList
nsIStructuredCloneContainer
*
aNavigationAPIState
nsIStructuredCloneContainer
*
aClassicHistoryAPIState
)
;
MOZ_CAN_RUN_SCRIPT
bool
FireDownloadRequestNavigateEvent
(
nsIURI
*
aDestinationURL
UserNavigationInvolvement
aUserInvolvement
Element
*
aSourceElement
const
nsAString
&
aFilename
)
;
bool
FocusedChangedDuringOngoingNavigation
(
)
const
;
void
SetFocusedChangedDuringOngoingNavigation
(
bool
aFocusChangedDUringOngoingNavigation
)
;
private
:
using
UpcomingTraverseAPIMethodTrackers
=
nsTHashMap
<
nsIDHashKey
UniquePtr
<
NavigationAPIMethodTracker
>
>
;
~
Navigation
(
)
;
bool
HasEntriesAndEventsDisabled
(
)
const
;
void
ScheduleEventsFromNavigation
(
NavigationType
aType
const
RefPtr
<
NavigationHistoryEntry
>
&
aPreviousEntry
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
&
aDisposedEntries
)
;
nsresult
FireEvent
(
const
nsAString
&
aName
)
;
MOZ_CAN_RUN_SCRIPT
bool
InnerFireNavigateEvent
(
NavigationType
aNavigationType
NavigationDestination
*
aDestination
UserNavigationInvolvement
aUserInvolvement
Element
*
aSourceElement
Maybe
<
const
FormData
&
>
aFormDataEntryList
nsIStructuredCloneContainer
*
aClassicHistoryAPIState
const
nsAString
&
aDownloadRequestFilename
)
;
NavigationHistoryEntry
*
FindNavigationHistoryEntry
(
SessionHistoryInfo
*
aSessionHistoryInfo
)
const
;
void
PromoteUpcomingAPIMethodTrackerToOngoing
(
Maybe
<
nsID
>
&
&
aDestinationKey
)
;
static
void
CleanUp
(
NavigationAPIMethodTracker
*
aNavigationAPIMethodTracker
)
;
void
AbortOngoingNavigation
(
)
;
void
LogHistory
(
)
const
;
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
mEntries
;
Maybe
<
uint64_t
>
mCurrentEntryIndex
;
RefPtr
<
NavigateEvent
>
mOngoingNavigateEvent
;
bool
mFocusChangedDUringOngoingNavigation
=
false
;
bool
mSuppressNormalScrollRestorationDuringOngoingNavigation
=
false
;
UniquePtr
<
NavigationAPIMethodTracker
>
mOngoingAPIMethodTracker
;
UniquePtr
<
NavigationAPIMethodTracker
>
mUpcomingNonTraverseAPIMethodTracker
;
UpcomingTraverseAPIMethodTrackers
mUpcomingTraverseAPIMethodTrackers
;
RefPtr
<
NavigationTransition
>
mTransition
;
RefPtr
<
NavigationActivation
>
mActivation
;
}
;
}
#
endif
