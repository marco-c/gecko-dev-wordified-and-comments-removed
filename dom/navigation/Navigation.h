#
ifndef
mozilla_dom_Navigation_h___
#
define
mozilla_dom_Navigation_h___
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
NavigationBinding
.
h
"
namespace
mozilla
:
:
dom
{
class
NavigationActivation
;
class
NavigationHistoryEntry
;
struct
NavigationNavigateOptions
;
struct
NavigationOptions
;
class
NavigationTransition
;
struct
NavigationUpdateCurrentEntryOptions
;
struct
NavigationReloadOptions
;
struct
NavigationResult
;
class
SessionHistoryInfo
;
class
Navigation
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
Navigation
DOMEventTargetHelper
)
explicit
Navigation
(
nsPIDOMWindowInner
*
aWindow
)
;
void
Entries
(
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
aResult
)
const
;
already_AddRefed
<
NavigationHistoryEntry
>
GetCurrentEntry
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
UpdateCurrentEntry
(
JSContext
*
aCx
const
NavigationUpdateCurrentEntryOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
NavigationTransition
>
GetTransition
(
)
{
return
{
}
;
}
already_AddRefed
<
NavigationActivation
>
GetActivation
(
)
{
return
{
}
;
}
bool
CanGoBack
(
)
{
return
!
HasEntriesAndEventsDisabled
(
)
&
&
mCurrentEntryIndex
&
&
*
mCurrentEntryIndex
!
=
0
;
}
bool
CanGoForward
(
)
{
return
!
HasEntriesAndEventsDisabled
(
)
&
&
mCurrentEntryIndex
&
&
*
mCurrentEntryIndex
!
=
mEntries
.
Length
(
)
-
1
;
}
void
Navigate
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
NavigationNavigateOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Reload
(
JSContext
*
aCx
const
NavigationReloadOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
TraverseTo
(
JSContext
*
aCx
const
nsAString
&
aKey
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Back
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Forward
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
IMPL_EVENT_HANDLER
(
navigate
)
;
IMPL_EVENT_HANDLER
(
navigatesuccess
)
;
IMPL_EVENT_HANDLER
(
navigateerror
)
;
IMPL_EVENT_HANDLER
(
currententrychange
)
;
void
InitializeHistoryEntries
(
mozilla
:
:
Span
<
const
SessionHistoryInfo
>
aNewSHInfos
const
SessionHistoryInfo
*
aInitialSHInfo
)
;
MOZ_CAN_RUN_SCRIPT
void
UpdateForReactivation
(
SessionHistoryInfo
*
aReactivatedEntry
)
;
void
UpdateEntriesForSameDocumentNavigation
(
SessionHistoryInfo
*
aDestinationSHE
NavigationType
aNavigationType
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
bool
IsAPIEnabled
(
JSContext
*
=
nullptr
JSObject
*
=
nullptr
)
;
private
:
~
Navigation
(
)
=
default
;
bool
HasEntriesAndEventsDisabled
(
)
const
;
void
ScheduleEventsFromNavigation
(
NavigationType
aType
const
RefPtr
<
NavigationHistoryEntry
>
&
aPreviousEntry
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
&
aDisposedEntries
)
;
void
LogHistory
(
)
const
;
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
mEntries
;
Maybe
<
uint64_t
>
mCurrentEntryIndex
;
}
;
}
#
endif
