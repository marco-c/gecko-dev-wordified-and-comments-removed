#
ifndef
mozilla_dom_Navigation_h___
#
define
mozilla_dom_Navigation_h___
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
namespace
mozilla
:
:
dom
{
class
NavigationActivation
;
class
NavigationHistoryEntry
;
struct
NavigationNavigateOptions
;
struct
NavigationOptions
;
class
NavigationTransition
;
struct
NavigationUpdateCurrentEntryOptions
;
struct
NavigationReloadOptions
;
struct
NavigationResult
;
class
Navigation
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
Navigation
DOMEventTargetHelper
)
void
Entries
(
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
aResult
)
{
}
already_AddRefed
<
NavigationHistoryEntry
>
GetCurrentEntry
(
)
{
return
{
}
;
}
void
UpdateCurrentEntry
(
JSContext
*
aCx
const
NavigationUpdateCurrentEntryOptions
&
aOptions
ErrorResult
&
aRv
)
{
}
already_AddRefed
<
NavigationTransition
>
GetTransition
(
)
{
return
{
}
;
}
already_AddRefed
<
NavigationActivation
>
GetActivation
(
)
{
return
{
}
;
}
bool
CanGoBack
(
)
{
return
{
}
;
}
bool
CanGoForward
(
)
{
return
{
}
;
}
void
Navigate
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
NavigationNavigateOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Reload
(
JSContext
*
aCx
const
NavigationReloadOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
TraverseTo
(
JSContext
*
aCx
const
nsAString
&
aKey
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Back
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
void
Forward
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
}
IMPL_EVENT_HANDLER
(
navigate
)
;
IMPL_EVENT_HANDLER
(
navigatesuccess
)
;
IMPL_EVENT_HANDLER
(
navigateerror
)
;
IMPL_EVENT_HANDLER
(
currententrychange
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
bool
IsAPIEnabled
(
JSContext
*
JSObject
*
)
;
private
:
~
Navigation
(
)
=
default
;
}
;
}
#
endif
