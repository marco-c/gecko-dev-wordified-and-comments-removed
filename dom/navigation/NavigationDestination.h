#
ifndef
mozilla_dom_NavigationDestination_h___
#
define
mozilla_dom_NavigationDestination_h___
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStructuredCloneContainer
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
class
nsIURI
;
namespace
mozilla
{
class
ErrorResult
;
}
namespace
mozilla
:
:
dom
{
class
NavigationHistoryEntry
;
class
NavigationDestination
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
NavigationDestination
)
NavigationDestination
(
nsIGlobalObject
*
aGlobal
nsIURI
*
aURI
NavigationHistoryEntry
*
aEntry
nsStructuredCloneContainer
*
aState
bool
aIsSameDocument
)
;
void
GetUrl
(
nsString
&
aURL
)
const
;
void
GetKey
(
nsString
&
aKey
)
const
;
void
GetId
(
nsString
&
aId
)
const
;
int64_t
Index
(
)
const
;
bool
SameDocument
(
)
const
;
void
GetState
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
;
NavigationHistoryEntry
*
GetEntry
(
)
const
;
nsIURI
*
GetURL
(
)
const
;
private
:
~
NavigationDestination
(
)
=
default
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsIURI
>
mURL
;
RefPtr
<
NavigationHistoryEntry
>
mEntry
;
RefPtr
<
nsStructuredCloneContainer
>
mState
;
bool
mIsSameDocument
=
false
;
}
;
}
#
endif
