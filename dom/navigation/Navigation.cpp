#
include
"
mozilla
/
dom
/
Navigation
.
h
"
#
include
"
fmt
/
format
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
CycleCollectedUniquePtr
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
DOMException
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
ErrorEvent
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicy
.
h
"
#
include
"
mozilla
/
dom
/
NavigationActivation
.
h
"
#
include
"
mozilla
/
dom
/
NavigationBinding
.
h
"
#
include
"
mozilla
/
dom
/
NavigationCurrentEntryChangeEvent
.
h
"
#
include
"
mozilla
/
dom
/
NavigationHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
NavigationTransition
.
h
"
#
include
"
mozilla
/
dom
/
NavigationUtils
.
h
"
#
include
"
mozilla
/
dom
/
Promise
-
inl
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsISHistory
.
h
"
#
include
"
nsIStructuredCloneContainer
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsTHashtable
.
h
"
mozilla
:
:
LazyLogModule
gNavigationAPILog
(
"
NavigationAPI
"
)
;
#
define
LOG_FMT
(
format
.
.
.
)
\
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
format
#
#
__VA_ARGS__
)
;
namespace
mozilla
:
:
dom
{
static
void
InitNavigationResult
(
NavigationResult
&
aResult
const
RefPtr
<
Promise
>
&
aCommitted
const
RefPtr
<
Promise
>
&
aFinished
)
{
if
(
aCommitted
)
{
aResult
.
mCommitted
.
Reset
(
)
;
aResult
.
mCommitted
.
Construct
(
*
aCommitted
)
;
}
if
(
aFinished
)
{
aResult
.
mFinished
.
Reset
(
)
;
aResult
.
mFinished
.
Construct
(
*
aFinished
)
;
}
}
struct
NavigationAPIMethodTracker
final
:
public
nsISupports
{
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
NavigationAPIMethodTracker
)
NavigationAPIMethodTracker
(
Navigation
*
aNavigationObject
const
Maybe
<
nsID
>
aKey
const
JS
:
:
Value
&
aInfo
nsIStructuredCloneContainer
*
aSerializedState
NavigationHistoryEntry
*
aCommittedToEntry
Promise
*
aCommittedPromise
Promise
*
aFinishedPromise
)
:
mNavigationObject
(
aNavigationObject
)
mKey
(
aKey
)
mInfo
(
aInfo
)
mSerializedState
(
aSerializedState
)
mCommittedToEntry
(
aCommittedToEntry
)
mCommittedPromise
(
aCommittedPromise
)
mFinishedPromise
(
aFinishedPromise
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
void
CleanUp
(
)
{
Navigation
:
:
CleanUp
(
this
)
;
}
void
NotifyAboutCommittedToEntry
(
NavigationHistoryEntry
*
aNHE
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mCommittedPromise
)
;
mCommittedToEntry
=
aNHE
;
if
(
mSerializedState
)
{
aNHE
-
>
SetState
(
static_cast
<
nsStructuredCloneContainer
*
>
(
mSerializedState
.
get
(
)
)
)
;
mSerializedState
=
nullptr
;
}
mCommittedPromise
-
>
MaybeResolve
(
aNHE
)
;
}
void
ResolveFinishedPromise
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mFinishedPromise
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mCommittedToEntry
)
;
mFinishedPromise
-
>
MaybeResolve
(
mCommittedToEntry
)
;
CleanUp
(
)
;
}
void
RejectFinishedPromise
(
JS
:
:
Handle
<
JS
:
:
Value
>
aException
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mFinishedPromise
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mCommittedPromise
)
;
mCommittedPromise
-
>
MaybeReject
(
aException
)
;
mFinishedPromise
-
>
MaybeReject
(
aException
)
;
CleanUp
(
)
;
}
void
CreateResult
(
NavigationResult
&
aResult
)
{
InitNavigationResult
(
aResult
mCommittedPromise
mFinishedPromise
)
;
}
Promise
*
CommittedPromise
(
)
{
return
mCommittedPromise
;
}
Promise
*
FinishedPromise
(
)
{
return
mFinishedPromise
;
}
RefPtr
<
Navigation
>
mNavigationObject
;
Maybe
<
nsID
>
mKey
;
JS
:
:
Heap
<
JS
:
:
Value
>
mInfo
;
private
:
~
NavigationAPIMethodTracker
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
;
RefPtr
<
nsIStructuredCloneContainer
>
mSerializedState
;
RefPtr
<
NavigationHistoryEntry
>
mCommittedToEntry
;
RefPtr
<
Promise
>
mCommittedPromise
;
RefPtr
<
Promise
>
mFinishedPromise
;
}
;
NS_IMPL_CYCLE_COLLECTION_WITH_JS_MEMBERS
(
NavigationAPIMethodTracker
(
mNavigationObject
mSerializedState
mCommittedToEntry
mCommittedPromise
mFinishedPromise
)
(
mInfo
)
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
NavigationAPIMethodTracker
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
NavigationAPIMethodTracker
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
NavigationAPIMethodTracker
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
Navigation
DOMEventTargetHelper
mEntries
mOngoingNavigateEvent
mTransition
mActivation
mOngoingAPIMethodTracker
mUpcomingNonTraverseAPIMethodTracker
mUpcomingTraverseAPIMethodTrackers
)
;
NS_IMPL_ADDREF_INHERITED
(
Navigation
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
Navigation
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Navigation
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
Navigation
:
:
Navigation
(
nsPIDOMWindowInner
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
{
MOZ_ASSERT
(
aWindow
)
;
}
JSObject
*
Navigation
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Navigation_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
Navigation
:
:
EventListenerAdded
(
nsAtom
*
aType
)
{
UpdateNeedsTraverse
(
)
;
EventTarget
:
:
EventListenerAdded
(
aType
)
;
}
void
Navigation
:
:
EventListenerRemoved
(
nsAtom
*
aType
)
{
UpdateNeedsTraverse
(
)
;
EventTarget
:
:
EventListenerRemoved
(
aType
)
;
}
bool
Navigation
:
:
IsAPIEnabled
(
JSContext
*
JSObject
*
)
{
return
SessionHistoryInParent
(
)
&
&
StaticPrefs
:
:
dom_navigation_webidl_enabled_DoNotUseDirectly
(
)
;
}
void
Navigation
:
:
Entries
(
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
&
aResult
)
const
{
aResult
=
mEntries
.
Clone
(
)
;
}
already_AddRefed
<
NavigationHistoryEntry
>
Navigation
:
:
GetCurrentEntry
(
)
const
{
if
(
HasEntriesAndEventsDisabled
(
)
)
{
return
nullptr
;
}
if
(
!
mCurrentEntryIndex
)
{
return
nullptr
;
}
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Current
Entry
:
%
d
;
Amount
of
Entries
:
%
d
"
int
(
*
mCurrentEntryIndex
)
int
(
mEntries
.
Length
(
)
)
)
)
;
MOZ_ASSERT
(
*
mCurrentEntryIndex
<
mEntries
.
Length
(
)
)
;
RefPtr
entry
{
mEntries
[
*
mCurrentEntryIndex
]
}
;
return
entry
.
forget
(
)
;
}
void
Navigation
:
:
UpdateCurrentEntry
(
JSContext
*
aCx
const
NavigationUpdateCurrentEntryOptions
&
aOptions
ErrorResult
&
aRv
)
{
RefPtr
currentEntry
(
GetCurrentEntry
(
)
)
;
if
(
!
currentEntry
)
{
aRv
.
ThrowInvalidStateError
(
"
Can
'
t
call
updateCurrentEntry
without
a
valid
entry
.
"
)
;
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
state
(
aCx
aOptions
.
mState
)
;
auto
serializedState
=
MakeRefPtr
<
nsStructuredCloneContainer
>
(
)
;
nsresult
rv
=
serializedState
-
>
InitFromJSVal
(
state
aCx
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
ThrowDataCloneError
(
"
Failed
to
serialize
value
for
updateCurrentEntry
.
"
)
;
return
;
}
currentEntry
-
>
SetState
(
serializedState
)
;
NavigationCurrentEntryChangeEventInit
init
;
init
.
mFrom
=
currentEntry
;
RefPtr
event
=
NavigationCurrentEntryChangeEvent
:
:
Constructor
(
this
u
"
currententrychange
"
_ns
init
)
;
event
-
>
SetTrusted
(
true
)
;
DispatchEvent
(
*
event
)
;
}
NavigationTransition
*
Navigation
:
:
GetTransition
(
)
const
{
return
mTransition
;
}
NavigationActivation
*
Navigation
:
:
GetActivation
(
)
const
{
return
mActivation
;
}
bool
Navigation
:
:
HasEntriesAndEventsDisabled
(
)
const
{
Document
*
doc
=
GetAssociatedDocument
(
)
;
return
!
doc
|
|
!
doc
-
>
IsCurrentActiveDocument
(
)
|
|
(
NS_IsAboutBlankAllowQueryAndFragment
(
doc
-
>
GetDocumentURI
(
)
)
&
&
doc
-
>
IsInitialDocument
(
)
)
|
|
doc
-
>
GetPrincipal
(
)
-
>
GetIsNullPrincipal
(
)
;
}
void
Navigation
:
:
InitializeHistoryEntries
(
mozilla
:
:
Span
<
const
SessionHistoryInfo
>
aNewSHInfos
const
SessionHistoryInfo
*
aInitialSHInfo
)
{
LOG_FMT
(
"
Attempting
to
initialize
history
entries
for
{
}
.
"
aInitialSHInfo
-
>
GetURI
(
)
?
aInitialSHInfo
-
>
GetURI
(
)
-
>
GetSpecOrDefault
(
)
:
"
<
no
uri
>
"
_ns
)
mEntries
.
Clear
(
)
;
mCurrentEntryIndex
.
reset
(
)
;
if
(
HasEntriesAndEventsDisabled
(
)
)
{
return
;
}
for
(
auto
i
=
0ul
;
i
<
aNewSHInfos
.
Length
(
)
;
i
+
+
)
{
mEntries
.
AppendElement
(
MakeRefPtr
<
NavigationHistoryEntry
>
(
GetOwnerGlobal
(
)
&
aNewSHInfos
[
i
]
i
)
)
;
if
(
aNewSHInfos
[
i
]
.
NavigationKey
(
)
=
=
aInitialSHInfo
-
>
NavigationKey
(
)
)
{
mCurrentEntryIndex
=
Some
(
i
)
;
}
}
LogHistory
(
)
;
nsID
key
=
aInitialSHInfo
-
>
NavigationKey
(
)
;
nsID
id
=
aInitialSHInfo
-
>
NavigationId
(
)
;
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
aInitialSHInfo
:
%
s
%
s
\
n
"
key
.
ToString
(
)
.
get
(
)
id
.
ToString
(
)
.
get
(
)
)
)
;
}
void
Navigation
:
:
UpdateEntriesForSameDocumentNavigation
(
SessionHistoryInfo
*
aDestinationSHE
NavigationType
aNavigationType
)
{
if
(
HasEntriesAndEventsDisabled
(
)
)
{
return
;
}
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Updating
entries
for
same
-
document
navigation
"
)
)
;
RefPtr
<
NavigationHistoryEntry
>
oldCurrentEntry
=
GetCurrentEntry
(
)
;
nsTArray
<
RefPtr
<
NavigationHistoryEntry
>
>
disposedEntries
;
switch
(
aNavigationType
)
{
case
NavigationType
:
:
Traverse
:
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Traverse
navigation
"
)
)
;
mCurrentEntryIndex
.
reset
(
)
;
for
(
auto
i
=
0ul
;
i
<
mEntries
.
Length
(
)
;
i
+
+
)
{
if
(
mEntries
[
i
]
-
>
IsSameEntry
(
aDestinationSHE
)
)
{
mCurrentEntryIndex
=
Some
(
i
)
;
break
;
}
}
MOZ_ASSERT
(
mCurrentEntryIndex
)
;
break
;
case
NavigationType
:
:
Push
:
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Push
navigation
"
)
)
;
mCurrentEntryIndex
=
Some
(
mCurrentEntryIndex
?
*
mCurrentEntryIndex
+
1
:
0
)
;
while
(
*
mCurrentEntryIndex
<
mEntries
.
Length
(
)
)
{
disposedEntries
.
AppendElement
(
mEntries
.
PopLastElement
(
)
)
;
}
mEntries
.
AppendElement
(
MakeRefPtr
<
NavigationHistoryEntry
>
(
GetOwnerGlobal
(
)
aDestinationSHE
*
mCurrentEntryIndex
)
)
;
break
;
case
NavigationType
:
:
Replace
:
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Replace
navigation
"
)
)
;
if
(
!
oldCurrentEntry
)
{
MOZ_ASSERT
(
false
"
FIXME
"
)
;
return
;
}
disposedEntries
.
AppendElement
(
oldCurrentEntry
)
;
aDestinationSHE
-
>
NavigationKey
(
)
=
oldCurrentEntry
-
>
Key
(
)
;
mEntries
[
*
mCurrentEntryIndex
]
=
MakeRefPtr
<
NavigationHistoryEntry
>
(
GetOwnerGlobal
(
)
aDestinationSHE
*
mCurrentEntryIndex
)
;
break
;
case
NavigationType
:
:
Reload
:
break
;
}
if
(
mOngoingAPIMethodTracker
)
{
RefPtr
<
NavigationHistoryEntry
>
currentEntry
=
GetCurrentEntry
(
)
;
mOngoingAPIMethodTracker
-
>
NotifyAboutCommittedToEntry
(
currentEntry
)
;
}
for
(
auto
&
entry
:
disposedEntries
)
{
entry
-
>
ResetIndexForDisposal
(
)
;
}
{
nsAutoMicroTask
mt
;
AutoEntryScript
aes
(
GetOwnerGlobal
(
)
"
UpdateEntriesForSameDocumentNavigation
"
)
;
NavigationCurrentEntryChangeEventInit
init
;
init
.
mFrom
=
oldCurrentEntry
;
init
.
mNavigationType
.
SetValue
(
aNavigationType
)
;
RefPtr
event
=
NavigationCurrentEntryChangeEvent
:
:
Constructor
(
this
u
"
currententrychange
"
_ns
init
)
;
event
-
>
SetTrusted
(
true
)
;
DispatchEvent
(
*
event
)
;
for
(
const
auto
&
entry
:
disposedEntries
)
{
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
entry
nullptr
nullptr
)
;
event
-
>
InitEvent
(
u
"
dispose
"
_ns
false
false
)
;
event
-
>
SetTrusted
(
true
)
;
event
-
>
SetTarget
(
entry
)
;
entry
-
>
DispatchEvent
(
*
event
)
;
}
}
}
void
Navigation
:
:
UpdateForReactivation
(
SessionHistoryInfo
*
aReactivatedEntry
)
{
}
void
Navigation
:
:
SetEarlyErrorResult
(
JSContext
*
aCx
NavigationResult
&
aResult
ErrorResult
&
&
aRv
)
const
{
MOZ_ASSERT
(
aRv
.
Failed
(
)
)
;
RefPtr
global
=
GetOwnerGlobal
(
)
;
if
(
!
global
)
{
aRv
.
SuppressException
(
)
;
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
rootedExceptionValue
(
aCx
)
;
MOZ_ALWAYS_TRUE
(
ToJSValue
(
aCx
std
:
:
move
(
aRv
)
&
rootedExceptionValue
)
)
;
InitNavigationResult
(
aResult
Promise
:
:
Reject
(
global
rootedExceptionValue
IgnoreErrors
(
)
)
Promise
:
:
Reject
(
global
rootedExceptionValue
IgnoreErrors
(
)
)
)
;
}
void
Navigation
:
:
SetEarlyStateErrorResult
(
JSContext
*
aCx
NavigationResult
&
aResult
const
nsACString
&
aMessage
)
const
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
aMessage
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
}
bool
Navigation
:
:
CheckIfDocumentIsFullyActiveAndMaybeSetEarlyErrorResult
(
JSContext
*
aCx
const
Document
*
aDocument
NavigationResult
&
aResult
)
const
{
if
(
!
aDocument
|
|
!
aDocument
-
>
IsFullyActive
(
)
)
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
"
Document
is
not
fully
active
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
false
;
}
return
true
;
}
bool
Navigation
:
:
CheckDocumentUnloadCounterAndMaybeSetEarlyErrorResult
(
JSContext
*
aCx
const
Document
*
aDocument
NavigationResult
&
aResult
)
const
{
if
(
!
aDocument
|
|
aDocument
-
>
ShouldIgnoreOpens
(
)
)
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
"
Document
is
unloading
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
false
;
}
return
true
;
}
already_AddRefed
<
nsIStructuredCloneContainer
>
Navigation
:
:
CreateSerializedStateAndMaybeSetEarlyErrorResult
(
JSContext
*
aCx
const
JS
:
:
Value
&
aState
NavigationResult
&
aResult
)
const
{
JS
:
:
Rooted
<
JS
:
:
Value
>
state
(
aCx
aState
)
;
RefPtr
global
=
GetOwnerGlobal
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
global
)
;
RefPtr
<
nsIStructuredCloneContainer
>
serializedState
=
new
nsStructuredCloneContainer
(
)
;
const
nsresult
rv
=
serializedState
-
>
InitFromJSVal
(
state
aCx
)
;
if
(
NS_FAILED
(
rv
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exception
(
aCx
)
;
if
(
JS_GetPendingException
(
aCx
&
exception
)
)
{
JS_ClearPendingException
(
aCx
)
;
InitNavigationResult
(
aResult
Promise
:
:
Reject
(
global
exception
IgnoreErrors
(
)
)
Promise
:
:
Reject
(
global
exception
IgnoreErrors
(
)
)
)
;
return
nullptr
;
}
SetEarlyErrorResult
(
aCx
aResult
ErrorResult
(
rv
)
)
;
return
nullptr
;
}
return
serializedState
.
forget
(
)
;
}
void
Navigation
:
:
Navigate
(
JSContext
*
aCx
const
nsAString
&
aUrl
const
NavigationNavigateOptions
&
aOptions
NavigationResult
&
aResult
)
{
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
"
Called
navigation
.
navigate
(
)
with
url
=
{
}
"
NS_ConvertUTF16toUTF8
(
aUrl
)
)
;
const
RefPtr
<
Document
>
document
=
GetAssociatedDocument
(
)
;
if
(
!
document
)
{
return
;
}
RefPtr
<
nsIURI
>
urlRecord
;
nsresult
res
=
NS_NewURI
(
getter_AddRefs
(
urlRecord
)
aUrl
nullptr
document
-
>
GetDocBaseURI
(
)
)
;
if
(
NS_FAILED
(
res
)
)
{
ErrorResult
rv
;
rv
.
ThrowSyntaxError
(
"
URL
given
to
navigate
(
)
is
invalid
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
if
(
urlRecord
-
>
SchemeIs
(
"
javascript
"
)
)
{
ErrorResult
rv
;
rv
.
ThrowNotSupportedError
(
"
The
javascript
:
protocol
is
not
supported
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
if
(
aOptions
.
mHistory
=
=
NavigationHistoryBehavior
:
:
Push
&
&
nsContentUtils
:
:
NavigationMustBeAReplace
(
*
urlRecord
*
document
)
)
{
ErrorResult
rv
;
rv
.
ThrowNotSupportedError
(
"
Navigation
must
be
a
replace
navigation
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
nsCOMPtr
<
nsIStructuredCloneContainer
>
serializedState
=
CreateSerializedStateAndMaybeSetEarlyErrorResult
(
aCx
aOptions
.
mState
aResult
)
;
if
(
!
serializedState
)
{
return
;
}
if
(
!
CheckIfDocumentIsFullyActiveAndMaybeSetEarlyErrorResult
(
aCx
document
aResult
)
)
{
return
;
}
if
(
!
CheckDocumentUnloadCounterAndMaybeSetEarlyErrorResult
(
aCx
document
aResult
)
)
{
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
info
(
aCx
aOptions
.
mInfo
)
;
RefPtr
<
NavigationAPIMethodTracker
>
apiMethodTracker
=
MaybeSetUpcomingNonTraverseAPIMethodTracker
(
info
serializedState
)
;
MOZ_ASSERT
(
apiMethodTracker
)
;
RefPtr
bc
=
document
-
>
GetBrowsingContext
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
bc
)
;
bc
-
>
Navigate
(
urlRecord
*
document
-
>
NodePrincipal
(
)
IgnoreErrors
(
)
aOptions
.
mHistory
true
)
;
if
(
mUpcomingNonTraverseAPIMethodTracker
=
=
apiMethodTracker
)
{
mUpcomingNonTraverseAPIMethodTracker
=
nullptr
;
ErrorResult
rv
;
rv
.
ThrowAbortError
(
"
Navigation
aborted
.
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
apiMethodTracker
-
>
CreateResult
(
aResult
)
;
}
void
Navigation
:
:
PerformNavigationTraversal
(
JSContext
*
aCx
const
nsID
&
aKey
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
LOG_FMT
(
"
traverse
navigation
to
{
}
"
aKey
.
ToString
(
)
.
get
(
)
)
;
const
Document
*
document
=
GetAssociatedDocument
(
)
;
if
(
!
document
|
|
!
document
-
>
IsFullyActive
(
)
)
{
SetEarlyStateErrorResult
(
aCx
aResult
"
Document
is
not
fully
active
"
_ns
)
;
return
;
}
if
(
document
-
>
ShouldIgnoreOpens
(
)
)
{
SetEarlyStateErrorResult
(
aCx
aResult
"
Document
is
unloading
"
_ns
)
;
return
;
}
RefPtr
<
NavigationHistoryEntry
>
current
=
GetCurrentEntry
(
)
;
if
(
!
current
)
{
SetEarlyStateErrorResult
(
aCx
aResult
"
No
current
navigation
history
entry
"
_ns
)
;
return
;
}
RefPtr
global
=
GetOwnerGlobal
(
)
;
if
(
!
global
)
{
return
;
}
if
(
current
-
>
Key
(
)
=
=
aKey
)
{
InitNavigationResult
(
aResult
Promise
:
:
Resolve
(
global
current
IgnoreErrors
(
)
)
Promise
:
:
Resolve
(
global
current
IgnoreErrors
(
)
)
)
;
return
;
}
if
(
auto
maybeTracker
=
mUpcomingTraverseAPIMethodTrackers
.
MaybeGet
(
aKey
)
.
valueOr
(
nullptr
)
)
{
maybeTracker
-
>
CreateResult
(
aResult
)
;
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
info
(
aCx
aOptions
.
mInfo
)
;
RefPtr
apiMethodTracker
=
AddUpcomingTraverseAPIMethodTracker
(
aKey
info
)
;
RefPtr
<
BrowsingContext
>
navigable
=
document
-
>
GetBrowsingContext
(
)
;
RefPtr
<
BrowsingContext
>
traversable
=
navigable
-
>
Top
(
)
;
apiMethodTracker
-
>
CreateResult
(
aResult
)
;
auto
*
childSHistory
=
traversable
-
>
GetChildSessionHistory
(
)
;
auto
performNavigationTraversalSteps
=
[
finished
=
RefPtr
(
apiMethodTracker
-
>
FinishedPromise
(
)
)
]
(
nsresult
aResult
)
{
switch
(
aResult
)
{
case
NS_ERROR_DOM_INVALID_STATE_ERR
:
finished
-
>
MaybeRejectWithInvalidStateError
(
"
No
such
entry
with
key
found
"
)
;
break
;
case
NS_ERROR_DOM_ABORT_ERR
:
finished
-
>
MaybeRejectWithAbortError
(
"
Navigation
was
canceled
"
)
;
break
;
case
NS_ERROR_DOM_SECURITY_ERR
:
finished
-
>
MaybeRejectWithSecurityError
(
"
Navigation
was
not
allowed
"
)
;
break
;
case
NS_OK
:
break
;
default
:
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Unexpected
result
"
)
;
break
;
}
}
;
childSHistory
-
>
AsyncGo
(
aKey
navigable
false
false
true
performNavigationTraversalSteps
)
;
}
void
Navigation
:
:
Reload
(
JSContext
*
aCx
const
NavigationReloadOptions
&
aOptions
NavigationResult
&
aResult
)
{
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Called
navigation
.
reload
(
)
"
)
)
;
const
RefPtr
<
Document
>
document
=
GetAssociatedDocument
(
)
;
if
(
!
document
)
{
return
;
}
RefPtr
<
nsIStructuredCloneContainer
>
serializedState
;
if
(
!
aOptions
.
mState
.
isUndefined
(
)
)
{
serializedState
=
CreateSerializedStateAndMaybeSetEarlyErrorResult
(
aCx
aOptions
.
mState
aResult
)
;
if
(
!
serializedState
)
{
return
;
}
}
else
{
if
(
RefPtr
<
NavigationHistoryEntry
>
current
=
GetCurrentEntry
(
)
)
{
serializedState
=
current
-
>
GetNavigationState
(
)
;
}
}
if
(
!
CheckIfDocumentIsFullyActiveAndMaybeSetEarlyErrorResult
(
aCx
document
aResult
)
)
{
return
;
}
if
(
!
CheckDocumentUnloadCounterAndMaybeSetEarlyErrorResult
(
aCx
document
aResult
)
)
{
return
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
info
(
aCx
aOptions
.
mInfo
)
;
RefPtr
<
NavigationAPIMethodTracker
>
apiMethodTracker
=
MaybeSetUpcomingNonTraverseAPIMethodTracker
(
info
serializedState
)
;
MOZ_ASSERT
(
apiMethodTracker
)
;
RefPtr
docShell
=
nsDocShell
:
:
Cast
(
document
-
>
GetDocShell
(
)
)
;
MOZ_ASSERT
(
docShell
)
;
docShell
-
>
ReloadNavigable
(
Some
(
WrapNotNullUnchecked
(
aCx
)
)
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
serializedState
)
;
apiMethodTracker
-
>
CreateResult
(
aResult
)
;
}
void
Navigation
:
:
TraverseTo
(
JSContext
*
aCx
const
nsAString
&
aKey
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
"
Called
navigation
.
traverseTo
(
)
with
key
=
{
}
"
NS_ConvertUTF16toUTF8
(
aKey
)
.
get
(
)
)
;
if
(
mCurrentEntryIndex
.
isNothing
(
)
)
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
"
Current
entry
index
is
unexpectedly
-
1
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
nsID
key
{
}
;
const
bool
foundKey
=
key
.
Parse
(
NS_ConvertUTF16toUTF8
(
aKey
)
.
Data
(
)
)
&
&
std
:
:
find_if
(
mEntries
.
begin
(
)
mEntries
.
end
(
)
[
&
]
(
const
auto
&
aEntry
)
{
return
aEntry
-
>
Key
(
)
=
=
key
;
}
)
!
=
mEntries
.
end
(
)
;
if
(
!
foundKey
)
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
"
Session
history
entry
key
does
not
exist
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
PerformNavigationTraversal
(
aCx
key
aOptions
aResult
)
;
}
void
Navigation
:
:
Back
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Called
navigation
.
back
(
)
"
)
)
;
if
(
mCurrentEntryIndex
.
isNothing
(
)
|
|
*
mCurrentEntryIndex
=
=
0
|
|
*
mCurrentEntryIndex
>
mEntries
.
Length
(
)
-
1
)
{
SetEarlyStateErrorResult
(
aCx
aResult
"
Current
entry
index
is
unexpectedly
-
1
or
0
"
_ns
)
;
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mEntries
[
*
mCurrentEntryIndex
-
1
]
)
;
const
nsID
key
=
mEntries
[
*
mCurrentEntryIndex
-
1
]
-
>
Key
(
)
;
PerformNavigationTraversal
(
aCx
key
aOptions
aResult
)
;
}
void
Navigation
:
:
Forward
(
JSContext
*
aCx
const
NavigationOptions
&
aOptions
NavigationResult
&
aResult
)
{
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Called
navigation
.
forward
(
)
"
)
)
;
if
(
mCurrentEntryIndex
.
isNothing
(
)
|
|
*
mCurrentEntryIndex
>
=
mEntries
.
Length
(
)
-
1
)
{
ErrorResult
rv
;
rv
.
ThrowInvalidStateError
(
"
Current
entry
index
is
unexpectedly
-
1
or
entry
list
'
s
size
-
1
"
)
;
SetEarlyErrorResult
(
aCx
aResult
std
:
:
move
(
rv
)
)
;
return
;
}
MOZ_ASSERT
(
mEntries
[
*
mCurrentEntryIndex
+
1
]
)
;
const
nsID
&
key
=
mEntries
[
*
mCurrentEntryIndex
+
1
]
-
>
Key
(
)
;
PerformNavigationTraversal
(
aCx
key
aOptions
aResult
)
;
}
namespace
{
void
LogEntry
(
NavigationHistoryEntry
*
aEntry
uint64_t
aIndex
uint64_t
aTotal
bool
aIsCurrent
)
{
if
(
!
aEntry
)
{
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
+
-
%
d
NHEntry
null
\
n
"
int
(
aIndex
)
)
)
;
return
;
}
nsString
key
id
;
aEntry
-
>
GetKey
(
key
)
;
aEntry
-
>
GetId
(
id
)
;
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
%
s
+
-
%
d
NHEntry
%
p
%
s
%
s
\
n
"
aIsCurrent
?
"
>
"
:
"
"
int
(
aIndex
)
aEntry
NS_ConvertUTF16toUTF8
(
key
)
.
get
(
)
NS_ConvertUTF16toUTF8
(
id
)
.
get
(
)
)
)
;
nsAutoString
url
;
aEntry
-
>
GetUrl
(
url
)
;
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
URL
=
%
s
\
n
"
NS_ConvertUTF16toUTF8
(
url
)
.
get
(
)
)
)
;
}
}
bool
Navigation
:
:
FireTraverseNavigateEvent
(
JSContext
*
aCx
const
SessionHistoryInfo
&
aDestinationSessionHistoryInfo
Maybe
<
UserNavigationInvolvement
>
aUserInvolvement
)
{
RefPtr
<
NavigationHistoryEntry
>
destinationNHE
=
FindNavigationHistoryEntry
(
aDestinationSessionHistoryInfo
)
;
RefPtr
<
nsStructuredCloneContainer
>
state
=
destinationNHE
?
destinationNHE
-
>
GetNavigationState
(
)
:
nullptr
;
bool
isSameDocument
=
ToMaybeRef
(
nsDocShell
:
:
Cast
(
nsContentUtils
:
:
GetDocShellForEventTarget
(
this
)
)
)
.
andThen
(
[
]
(
auto
&
aDocShell
)
{
return
ToMaybeRef
(
aDocShell
.
GetActiveSessionHistoryInfo
(
)
)
;
}
)
.
map
(
[
aDestinationSessionHistoryInfo
]
(
auto
&
aSessionHistoryInfo
)
{
return
aDestinationSessionHistoryInfo
.
SharesDocumentWith
(
aSessionHistoryInfo
)
;
}
)
.
valueOr
(
false
)
;
RefPtr
<
NavigationDestination
>
destination
=
MakeAndAddRef
<
NavigationDestination
>
(
GetOwnerGlobal
(
)
aDestinationSessionHistoryInfo
.
GetURI
(
)
destinationNHE
state
isSameDocument
)
;
return
InnerFireNavigateEvent
(
aCx
NavigationType
:
:
Traverse
destination
aUserInvolvement
.
valueOr
(
UserNavigationInvolvement
:
:
None
)
nullptr
nullptr
nullptr
VoidString
(
)
)
;
}
bool
Navigation
:
:
FirePushReplaceReloadNavigateEvent
(
JSContext
*
aCx
NavigationType
aNavigationType
nsIURI
*
aDestinationURL
bool
aIsSameDocument
Maybe
<
UserNavigationInvolvement
>
aUserInvolvement
Element
*
aSourceElement
already_AddRefed
<
FormData
>
aFormDataEntryList
nsIStructuredCloneContainer
*
aNavigationAPIState
nsIStructuredCloneContainer
*
aClassicHistoryAPIState
)
{
InnerInformAboutAbortingNavigation
(
aCx
)
;
RefPtr
<
NavigationDestination
>
destination
=
MakeAndAddRef
<
NavigationDestination
>
(
GetOwnerGlobal
(
)
aDestinationURL
nullptr
nullptr
aIsSameDocument
)
;
return
InnerFireNavigateEvent
(
aCx
aNavigationType
destination
aUserInvolvement
.
valueOr
(
UserNavigationInvolvement
:
:
None
)
aSourceElement
std
:
:
move
(
aFormDataEntryList
)
aClassicHistoryAPIState
VoidString
(
)
)
;
}
bool
Navigation
:
:
FireDownloadRequestNavigateEvent
(
JSContext
*
aCx
nsIURI
*
aDestinationURL
UserNavigationInvolvement
aUserInvolvement
Element
*
aSourceElement
const
nsAString
&
aFilename
)
{
RefPtr
<
NavigationDestination
>
destination
=
MakeAndAddRef
<
NavigationDestination
>
(
GetOwnerGlobal
(
)
aDestinationURL
nullptr
nullptr
false
)
;
return
InnerFireNavigateEvent
(
aCx
NavigationType
:
:
Push
destination
aUserInvolvement
aSourceElement
nullptr
nullptr
aFilename
)
;
}
static
bool
HasHistoryActionActivation
(
Maybe
<
nsGlobalWindowInner
&
>
aRelevantGlobalObject
)
{
return
aRelevantGlobalObject
.
map
(
[
]
(
auto
&
aRelevantGlobalObject
)
{
WindowContext
*
windowContext
=
aRelevantGlobalObject
.
GetWindowContext
(
)
;
return
windowContext
&
&
windowContext
-
>
HasValidHistoryActivation
(
)
;
}
)
.
valueOr
(
false
)
;
}
static
void
ConsumeHistoryActionUserActivation
(
Maybe
<
nsGlobalWindowInner
&
>
aRelevantGlobalObject
)
{
aRelevantGlobalObject
.
apply
(
[
]
(
auto
&
aRelevantGlobalObject
)
{
if
(
WindowContext
*
windowContext
=
aRelevantGlobalObject
.
GetWindowContext
(
)
)
{
windowContext
-
>
ConsumeHistoryActivation
(
)
;
}
}
)
;
}
static
bool
HasUAVisualTransition
(
Maybe
<
Document
&
>
)
{
return
false
;
}
static
bool
EqualsExceptRef
(
nsIURI
*
aURI
nsIURI
*
aOtherURI
)
{
bool
equalsExceptRef
=
false
;
return
aURI
&
&
aOtherURI
&
&
NS_SUCCEEDED
(
aURI
-
>
EqualsExceptRef
(
aOtherURI
&
equalsExceptRef
)
)
&
&
equalsExceptRef
;
}
static
bool
Equals
(
nsIURI
*
aURI
nsIURI
*
aOtherURI
)
{
bool
equals
=
false
;
return
aURI
&
&
aOtherURI
&
&
NS_SUCCEEDED
(
aURI
-
>
Equals
(
aOtherURI
&
equals
)
)
&
&
equals
;
}
static
bool
HasRef
(
nsIURI
*
aURI
)
{
bool
hasRef
=
false
;
aURI
-
>
GetHasRef
(
&
hasRef
)
;
return
hasRef
;
}
static
bool
HasIdenticalFragment
(
nsIURI
*
aURI
nsIURI
*
aOtherURI
)
{
nsAutoCString
ref
;
if
(
HasRef
(
aURI
)
!
=
HasRef
(
aOtherURI
)
)
{
return
false
;
}
if
(
NS_FAILED
(
aURI
-
>
GetRef
(
ref
)
)
)
{
return
false
;
}
nsAutoCString
otherRef
;
if
(
NS_FAILED
(
aOtherURI
-
>
GetRef
(
otherRef
)
)
)
{
return
false
;
}
return
ref
.
Equals
(
otherRef
)
;
}
static
void
LogEvent
(
Event
*
aEvent
NavigateEvent
*
aOngoingEvent
const
nsACString
&
aReason
)
{
if
(
!
MOZ_LOG_TEST
(
gNavigationAPILog
LogLevel
:
:
Debug
)
)
{
return
;
}
nsAutoString
eventType
;
aEvent
-
>
GetType
(
eventType
)
;
nsTArray
<
nsCString
>
log
=
{
nsCString
(
aReason
)
NS_ConvertUTF16toUTF8
(
eventType
)
}
;
if
(
aEvent
-
>
Cancelable
(
)
)
{
log
.
AppendElement
(
"
cancelable
"
)
;
}
if
(
aOngoingEvent
)
{
log
.
AppendElement
(
fmt
:
:
format
(
FMT_STRING
(
"
{
}
"
)
aOngoingEvent
-
>
NavigationType
(
)
)
)
;
if
(
RefPtr
<
NavigationDestination
>
destination
=
aOngoingEvent
-
>
Destination
(
)
)
{
log
.
AppendElement
(
destination
-
>
GetURL
(
)
-
>
GetSpecOrDefault
(
)
)
;
}
if
(
aOngoingEvent
-
>
HashChange
(
)
)
{
log
.
AppendElement
(
"
hashchange
"
_ns
)
;
}
}
LOG_FMT
(
"
{
}
"
fmt
:
:
join
(
log
.
begin
(
)
log
.
end
(
)
std
:
:
string_view
{
"
"
}
)
)
;
}
nsresult
Navigation
:
:
FireEvent
(
const
nsAString
&
aName
)
{
RefPtr
<
Event
>
event
=
NS_NewDOMEvent
(
this
nullptr
nullptr
)
;
event
-
>
InitEvent
(
aName
false
false
)
;
event
-
>
SetTrusted
(
true
)
;
ErrorResult
rv
;
LogEvent
(
event
mOngoingNavigateEvent
"
Fire
"
_ns
)
;
DispatchEvent
(
*
event
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
static
void
ExtractErrorInformation
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
ErrorEventInit
&
aErrorEventInitDict
)
{
nsContentUtils
:
:
ExtractErrorValues
(
aCx
aError
aErrorEventInitDict
.
mFilename
&
aErrorEventInitDict
.
mLineno
&
aErrorEventInitDict
.
mColno
aErrorEventInitDict
.
mMessage
)
;
aErrorEventInitDict
.
mError
=
aError
;
aErrorEventInitDict
.
mBubbles
=
false
;
aErrorEventInitDict
.
mCancelable
=
false
;
}
nsresult
Navigation
:
:
FireErrorEvent
(
const
nsAString
&
aName
const
ErrorEventInit
&
aEventInitDict
)
{
RefPtr
<
Event
>
event
=
ErrorEvent
:
:
Constructor
(
this
aName
aEventInitDict
)
;
ErrorResult
rv
;
LogEvent
(
event
mOngoingNavigateEvent
"
Fire
"
_ns
)
;
DispatchEvent
(
*
event
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
struct
NavigationWaitForAllScope
final
:
public
nsISupports
public
SupportsWeakPtr
{
NavigationWaitForAllScope
(
Navigation
*
aNavigation
NavigationAPIMethodTracker
*
aApiMethodTracker
NavigateEvent
*
aEvent
)
:
mNavigation
(
aNavigation
)
mAPIMethodTracker
(
aApiMethodTracker
)
mEvent
(
aEvent
)
{
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
NavigationWaitForAllScope
)
RefPtr
<
Navigation
>
mNavigation
;
RefPtr
<
NavigationAPIMethodTracker
>
mAPIMethodTracker
;
RefPtr
<
NavigateEvent
>
mEvent
;
private
:
~
NavigationWaitForAllScope
(
)
{
}
}
;
NS_IMPL_CYCLE_COLLECTION_WEAK_PTR
(
NavigationWaitForAllScope
mNavigation
mAPIMethodTracker
mEvent
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
NavigationWaitForAllScope
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
NavigationWaitForAllScope
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
NavigationWaitForAllScope
)
static
void
ResumeApplyTheHistoryStep
(
SessionHistoryInfo
*
aTarget
BrowsingContext
*
aTraversable
UserNavigationInvolvement
aUserInvolvement
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aTraversable
-
>
IsTop
(
)
)
;
auto
*
childSHistory
=
aTraversable
-
>
GetChildSessionHistory
(
)
;
childSHistory
-
>
AsyncGo
(
aTarget
-
>
NavigationKey
(
)
aTraversable
false
false
false
[
]
(
auto
)
{
}
)
;
}
bool
Navigation
:
:
InnerFireNavigateEvent
(
JSContext
*
aCx
NavigationType
aNavigationType
NavigationDestination
*
aDestination
UserNavigationInvolvement
aUserInvolvement
Element
*
aSourceElement
already_AddRefed
<
FormData
>
aFormDataEntryList
nsIStructuredCloneContainer
*
aClassicHistoryAPIState
const
nsAString
&
aDownloadRequestFilename
)
{
nsCOMPtr
<
nsIGlobalObject
>
globalObject
=
GetOwnerGlobal
(
)
;
if
(
HasEntriesAndEventsDisabled
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOngoingAPIMethodTracker
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mUpcomingNonTraverseAPIMethodTracker
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mUpcomingTraverseAPIMethodTrackers
.
IsEmpty
(
)
)
;
return
true
;
}
RootedDictionary
<
NavigateEventInit
>
init
(
RootingCx
(
)
)
;
Maybe
<
nsID
>
destinationKey
;
if
(
auto
*
entry
=
aDestination
-
>
GetEntry
(
)
)
{
destinationKey
.
emplace
(
entry
-
>
Key
(
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
destinationKey
|
|
!
destinationKey
-
>
Equals
(
nsID
{
}
)
)
;
PromoteUpcomingAPIMethodTrackerToOngoing
(
std
:
:
move
(
destinationKey
)
)
;
RefPtr
<
NavigationAPIMethodTracker
>
apiMethodTracker
=
mOngoingAPIMethodTracker
;
Maybe
<
BrowsingContext
&
>
navigable
=
ToMaybeRef
(
GetOwnerWindow
(
)
)
.
andThen
(
[
]
(
auto
&
aWindow
)
{
return
ToMaybeRef
(
aWindow
.
GetBrowsingContext
(
)
)
;
}
)
;
Document
*
document
=
navigable
.
map
(
[
]
(
auto
&
aNavigable
)
{
return
aNavigable
.
GetDocument
(
)
;
}
)
.
valueOr
(
nullptr
)
;
init
.
mCanIntercept
=
document
&
&
document
-
>
CanRewriteURL
(
aDestination
-
>
GetURL
(
)
)
&
&
(
aDestination
-
>
SameDocument
(
)
|
|
aNavigationType
!
=
NavigationType
:
:
Traverse
)
;
bool
traverseCanBeCanceled
=
navigable
-
>
IsTop
(
)
&
&
aDestination
-
>
SameDocument
(
)
&
&
(
aUserInvolvement
!
=
UserNavigationInvolvement
:
:
BrowserUI
|
|
HasHistoryActionActivation
(
ToMaybeRef
(
GetOwnerWindow
(
)
)
)
)
;
init
.
mCancelable
=
aNavigationType
!
=
NavigationType
:
:
Traverse
|
|
traverseCanBeCanceled
;
init
.
mNavigationType
=
aNavigationType
;
init
.
mDestination
=
aDestination
;
init
.
mDownloadRequest
=
aDownloadRequestFilename
;
if
(
apiMethodTracker
)
{
init
.
mInfo
=
apiMethodTracker
-
>
mInfo
;
}
init
.
mHasUAVisualTransition
=
HasUAVisualTransition
(
ToMaybeRef
(
GetAssociatedDocument
(
)
)
)
;
init
.
mSourceElement
=
aSourceElement
;
RefPtr
<
AbortController
>
abortController
=
new
AbortController
(
globalObject
)
;
init
.
mSignal
=
abortController
-
>
Signal
(
)
;
nsCOMPtr
<
nsIURI
>
currentURL
=
document
-
>
GetDocumentURI
(
)
;
init
.
mHashChange
=
!
aClassicHistoryAPIState
&
&
aDestination
-
>
SameDocument
(
)
&
&
EqualsExceptRef
(
aDestination
-
>
GetURL
(
)
currentURL
)
&
&
!
HasIdenticalFragment
(
aDestination
-
>
GetURL
(
)
currentURL
)
;
init
.
mUserInitiated
=
aUserInvolvement
!
=
UserNavigationInvolvement
:
:
None
;
init
.
mFormData
=
aFormDataEntryList
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mOngoingNavigateEvent
)
;
RefPtr
<
NavigateEvent
>
event
=
NavigateEvent
:
:
Constructor
(
this
u
"
navigate
"
_ns
init
aClassicHistoryAPIState
abortController
)
;
event
-
>
SetTrusted
(
true
)
;
mOngoingNavigateEvent
=
event
;
mFocusChangedDuringOngoingNavigation
=
false
;
mSuppressNormalScrollRestorationDuringOngoingNavigation
=
false
;
LogEvent
(
event
mOngoingNavigateEvent
"
Fire
"
_ns
)
;
if
(
!
DispatchEvent
(
*
event
CallerType
:
:
NonSystem
IgnoreErrors
(
)
)
)
{
if
(
aNavigationType
=
=
NavigationType
:
:
Traverse
)
{
ConsumeHistoryActionUserActivation
(
ToMaybeRef
(
GetOwnerWindow
(
)
)
)
;
}
if
(
!
abortController
-
>
Signal
(
)
-
>
Aborted
(
)
)
{
AbortOngoingNavigation
(
aCx
)
;
}
return
false
;
}
bool
endResultIsSameDocument
=
event
-
>
InterceptionState
(
)
!
=
NavigateEvent
:
:
InterceptionState
:
:
None
|
|
aDestination
-
>
SameDocument
(
)
;
nsAutoMicroTask
mt
;
if
(
event
-
>
InterceptionState
(
)
!
=
NavigateEvent
:
:
InterceptionState
:
:
None
)
{
event
-
>
SetInterceptionState
(
NavigateEvent
:
:
InterceptionState
:
:
Committed
)
;
RefPtr
<
NavigationHistoryEntry
>
fromNHE
=
GetCurrentEntry
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
fromNHE
)
;
RefPtr
<
Promise
>
promise
=
Promise
:
:
CreateInfallible
(
globalObject
)
;
mTransition
=
MakeAndAddRef
<
NavigationTransition
>
(
globalObject
aNavigationType
fromNHE
promise
)
;
MOZ_ALWAYS_TRUE
(
promise
-
>
SetAnyPromiseIsHandled
(
)
)
;
switch
(
aNavigationType
)
{
case
NavigationType
:
:
Traverse
:
mSuppressNormalScrollRestorationDuringOngoingNavigation
=
true
;
if
(
auto
*
entry
=
aDestination
-
>
GetEntry
(
)
)
{
UserNavigationInvolvement
userInvolvement
=
UserNavigationInvolvement
:
:
None
;
if
(
event
-
>
UserInitiated
(
)
)
{
userInvolvement
=
UserNavigationInvolvement
:
:
Activation
;
}
ResumeApplyTheHistoryStep
(
entry
-
>
SessionHistoryInfo
(
)
navigable
-
>
Top
(
)
userInvolvement
)
;
}
break
;
case
NavigationType
:
:
Push
:
case
NavigationType
:
:
Replace
:
if
(
nsDocShell
*
docShell
=
nsDocShell
:
:
Cast
(
document
-
>
GetDocShell
(
)
)
)
{
docShell
-
>
UpdateURLAndHistory
(
document
aDestination
-
>
GetURL
(
)
event
-
>
ClassicHistoryAPIState
(
)
*
NavigationUtils
:
:
NavigationHistoryBehavior
(
aNavigationType
)
document
-
>
GetDocumentURI
(
)
Equals
(
aDestination
-
>
GetURL
(
)
document
-
>
GetDocumentURI
(
)
)
)
;
}
break
;
case
NavigationType
:
:
Reload
:
if
(
nsDocShell
*
docShell
=
nsDocShell
:
:
Cast
(
document
-
>
GetDocShell
(
)
)
)
{
UpdateEntriesForSameDocumentNavigation
(
docShell
-
>
GetActiveSessionHistoryInfo
(
)
aNavigationType
)
;
}
break
;
default
:
break
;
}
}
if
(
endResultIsSameDocument
)
{
AutoTArray
<
RefPtr
<
Promise
>
16
>
promiseList
;
for
(
auto
&
handler
:
event
-
>
NavigationHandlerList
(
)
.
Clone
(
)
)
{
RefPtr
promise
=
MOZ_KnownLive
(
handler
)
-
>
Call
(
)
;
if
(
promise
)
{
promiseList
.
AppendElement
(
promise
)
;
}
}
if
(
promiseList
.
IsEmpty
(
)
)
{
RefPtr
promise
=
Promise
:
:
CreateResolvedWithUndefined
(
globalObject
IgnoredErrorResult
(
)
)
;
if
(
promise
)
{
promiseList
.
AppendElement
(
promise
)
;
}
}
RefPtr
scope
=
MakeRefPtr
<
NavigationWaitForAllScope
>
(
this
apiMethodTracker
event
)
;
auto
successSteps
=
[
weakScope
=
WeakPtr
(
scope
)
]
(
const
Span
<
JS
:
:
Heap
<
JS
:
:
Value
>
>
&
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY_LAMBDA
{
if
(
!
weakScope
)
{
return
;
}
RefPtr
event
=
weakScope
-
>
mEvent
;
RefPtr
self
=
weakScope
-
>
mNavigation
;
RefPtr
apiMethodTracker
=
weakScope
-
>
mAPIMethodTracker
;
LogEvent
(
event
event
"
Success
"
_ns
)
;
if
(
RefPtr
document
=
event
-
>
GetDocument
(
)
;
!
document
|
|
!
document
-
>
IsFullyActive
(
)
)
{
return
;
}
if
(
AbortSignal
*
signal
=
event
-
>
Signal
(
)
;
signal
-
>
Aborted
(
)
)
{
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
event
=
=
self
-
>
mOngoingNavigateEvent
)
;
self
-
>
mOngoingNavigateEvent
=
nullptr
;
event
-
>
Finish
(
true
)
;
self
-
>
FireEvent
(
u
"
navigatesuccess
"
_ns
)
;
if
(
apiMethodTracker
)
{
apiMethodTracker
-
>
ResolveFinishedPromise
(
)
;
}
if
(
self
-
>
mTransition
)
{
self
-
>
mTransition
-
>
Finished
(
)
-
>
MaybeResolveWithUndefined
(
)
;
}
self
-
>
mTransition
=
nullptr
;
}
;
auto
failureSteps
=
[
weakScope
=
WeakPtr
(
scope
)
]
(
JS
:
:
Handle
<
JS
:
:
Value
>
aRejectionReason
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY_LAMBDA
{
if
(
!
weakScope
)
{
return
;
}
RefPtr
event
=
weakScope
-
>
mEvent
;
RefPtr
self
=
weakScope
-
>
mNavigation
;
RefPtr
apiMethodTracker
=
weakScope
-
>
mAPIMethodTracker
;
LogEvent
(
event
event
"
Rejected
"
_ns
)
;
if
(
RefPtr
document
=
event
-
>
GetDocument
(
)
;
!
document
|
|
!
document
-
>
IsFullyActive
(
)
)
{
return
;
}
if
(
AbortSignal
*
signal
=
event
-
>
Signal
(
)
;
signal
-
>
Aborted
(
)
)
{
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
event
=
=
self
-
>
mOngoingNavigateEvent
)
;
self
-
>
mOngoingNavigateEvent
=
nullptr
;
event
-
>
Finish
(
false
)
;
if
(
AutoJSAPI
jsapi
;
!
NS_WARN_IF
(
!
jsapi
.
Init
(
event
-
>
GetParentObject
(
)
)
)
)
{
RootedDictionary
<
ErrorEventInit
>
init
(
jsapi
.
cx
(
)
)
;
ExtractErrorInformation
(
jsapi
.
cx
(
)
aRejectionReason
init
)
;
self
-
>
FireErrorEvent
(
u
"
navigateerror
"
_ns
init
)
;
}
if
(
apiMethodTracker
)
{
apiMethodTracker
-
>
RejectFinishedPromise
(
aRejectionReason
)
;
}
if
(
self
-
>
mTransition
)
{
self
-
>
mTransition
-
>
Finished
(
)
-
>
MaybeReject
(
aRejectionReason
)
;
}
self
-
>
mTransition
=
nullptr
;
}
;
if
(
apiMethodTracker
)
{
LOG_FMT
(
"
Waiting
for
committed
"
)
;
apiMethodTracker
-
>
CommittedPromise
(
)
-
>
AddCallbacksWithCycleCollectedArgs
(
[
successSteps
failureSteps
]
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
ErrorResult
&
nsIGlobalObject
*
aGlobalObject
const
Span
<
RefPtr
<
Promise
>
>
&
aPromiseList
const
RefPtr
<
NavigationWaitForAllScope
>
&
aScope
)
MOZ_CAN_RUN_SCRIPT_BOUNDARY_LAMBDA
{
Promise
:
:
WaitForAll
(
aGlobalObject
aPromiseList
successSteps
failureSteps
aScope
)
;
}
[
]
(
JSContext
*
JS
:
:
Handle
<
JS
:
:
Value
>
ErrorResult
&
nsIGlobalObject
*
const
Span
<
RefPtr
<
Promise
>
>
&
const
RefPtr
<
NavigationWaitForAllScope
>
&
)
{
}
nsCOMPtr
(
globalObject
)
nsTArray
<
RefPtr
<
Promise
>
>
(
std
:
:
move
(
promiseList
)
)
scope
)
;
}
else
{
LOG_FMT
(
"
No
API
method
tracker
not
waiting
for
committed
"
)
;
Promise
:
:
WaitForAll
(
globalObject
promiseList
successSteps
failureSteps
scope
)
;
}
}
else
if
(
apiMethodTracker
&
&
mOngoingAPIMethodTracker
)
{
MOZ_DIAGNOSTIC_ASSERT
(
apiMethodTracker
=
=
mOngoingAPIMethodTracker
)
;
apiMethodTracker
-
>
CleanUp
(
)
;
}
return
event
-
>
InterceptionState
(
)
=
=
NavigateEvent
:
:
InterceptionState
:
:
None
;
}
NavigationHistoryEntry
*
Navigation
:
:
FindNavigationHistoryEntry
(
const
SessionHistoryInfo
&
aSessionHistoryInfo
)
const
{
for
(
const
auto
&
navigationHistoryEntry
:
mEntries
)
{
if
(
navigationHistoryEntry
-
>
IsSameEntry
(
&
aSessionHistoryInfo
)
)
{
return
navigationHistoryEntry
;
}
}
return
nullptr
;
}
void
Navigation
:
:
PromoteUpcomingAPIMethodTrackerToOngoing
(
Maybe
<
nsID
>
&
&
aDestinationKey
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mOngoingAPIMethodTracker
)
;
if
(
aDestinationKey
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mUpcomingNonTraverseAPIMethodTracker
)
;
Maybe
<
NavigationAPIMethodTracker
&
>
tracker
(
NavigationAPIMethodTracker
)
;
if
(
auto
entry
=
mUpcomingTraverseAPIMethodTrackers
.
Extract
(
*
aDestinationKey
)
)
{
mOngoingAPIMethodTracker
=
std
:
:
move
(
*
entry
)
;
}
return
;
}
mOngoingAPIMethodTracker
=
std
:
:
move
(
mUpcomingNonTraverseAPIMethodTracker
)
;
}
void
Navigation
:
:
CleanUp
(
NavigationAPIMethodTracker
*
aNavigationAPIMethodTracker
)
{
RefPtr
<
Navigation
>
navigation
=
aNavigationAPIMethodTracker
-
>
mNavigationObject
;
auto
needsTraverse
=
MakeScopeExit
(
[
navigation
]
(
)
{
navigation
-
>
UpdateNeedsTraverse
(
)
;
}
)
;
if
(
navigation
-
>
mOngoingAPIMethodTracker
=
=
aNavigationAPIMethodTracker
)
{
navigation
-
>
mOngoingAPIMethodTracker
=
nullptr
;
return
;
}
Maybe
<
nsID
>
key
=
aNavigationAPIMethodTracker
-
>
mKey
;
MOZ_DIAGNOSTIC_ASSERT
(
key
)
;
MOZ_DIAGNOSTIC_ASSERT
(
navigation
-
>
mUpcomingTraverseAPIMethodTrackers
.
Contains
(
*
key
)
)
;
navigation
-
>
mUpcomingTraverseAPIMethodTrackers
.
Remove
(
*
key
)
;
}
void
Navigation
:
:
InnerInformAboutAbortingNavigation
(
JSContext
*
aCx
)
{
while
(
HasOngoingNavigateEvent
(
)
)
{
AbortOngoingNavigation
(
aCx
)
;
}
}
void
Navigation
:
:
AbortOngoingNavigation
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aError
)
{
RefPtr
<
NavigateEvent
>
event
=
mOngoingNavigateEvent
;
LogEvent
(
event
event
"
Abort
"
_ns
)
;
MOZ_DIAGNOSTIC_ASSERT
(
event
)
;
mFocusChangedDuringOngoingNavigation
=
false
;
mSuppressNormalScrollRestorationDuringOngoingNavigation
=
false
;
JS
:
:
Rooted
<
JS
:
:
Value
>
error
(
aCx
aError
)
;
if
(
aError
.
isUndefined
(
)
)
{
RefPtr
<
DOMException
>
exception
=
DOMException
:
:
Create
(
NS_ERROR_DOM_ABORT_ERR
)
;
GetOrCreateDOMReflector
(
aCx
exception
&
error
)
;
}
if
(
event
-
>
IsBeingDispatched
(
)
)
{
event
-
>
PreventDefault
(
aCx
CallerType
:
:
NonSystem
)
;
}
event
-
>
AbortController
(
)
-
>
Abort
(
aCx
error
)
;
mOngoingNavigateEvent
=
nullptr
;
RootedDictionary
<
ErrorEventInit
>
init
(
aCx
)
;
ExtractErrorInformation
(
aCx
error
init
)
;
FireErrorEvent
(
u
"
navigateerror
"
_ns
init
)
;
if
(
mOngoingAPIMethodTracker
)
{
mOngoingAPIMethodTracker
-
>
RejectFinishedPromise
(
error
)
;
}
if
(
mTransition
)
{
mTransition
-
>
Finished
(
)
-
>
MaybeReject
(
error
)
;
mTransition
=
nullptr
;
}
}
void
Navigation
:
:
InformAboutChildNavigableDestruction
(
JSContext
*
aCx
)
{
auto
traversalAPIMethodTrackers
=
mUpcomingTraverseAPIMethodTrackers
.
Clone
(
)
;
for
(
auto
&
apiMethodTracker
:
traversalAPIMethodTrackers
.
Values
(
)
)
{
ErrorResult
rv
;
rv
.
ThrowAbortError
(
"
Navigable
removed
"
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
rootedExceptionValue
(
aCx
)
;
MOZ_ALWAYS_TRUE
(
ToJSValue
(
aCx
std
:
:
move
(
rv
)
&
rootedExceptionValue
)
)
;
apiMethodTracker
-
>
RejectFinishedPromise
(
rootedExceptionValue
)
;
}
}
bool
Navigation
:
:
FocusedChangedDuringOngoingNavigation
(
)
const
{
return
mFocusChangedDuringOngoingNavigation
;
}
void
Navigation
:
:
SetFocusedChangedDuringOngoingNavigation
(
bool
aFocusChangedDUringOngoingNavigation
)
{
mFocusChangedDuringOngoingNavigation
=
aFocusChangedDUringOngoingNavigation
;
}
bool
Navigation
:
:
HasOngoingNavigateEvent
(
)
const
{
return
mOngoingNavigateEvent
;
}
Document
*
Navigation
:
:
GetAssociatedDocument
(
)
const
{
nsGlobalWindowInner
*
window
=
GetOwnerWindow
(
)
;
return
window
?
window
-
>
GetDocument
(
)
:
nullptr
;
}
void
Navigation
:
:
UpdateNeedsTraverse
(
)
{
nsGlobalWindowInner
*
innerWindow
=
GetOwnerWindow
(
)
;
if
(
!
innerWindow
)
{
return
;
}
WindowContext
*
windowContext
=
innerWindow
-
>
GetWindowContext
(
)
;
if
(
!
windowContext
)
{
return
;
}
if
(
BrowsingContext
*
browsingContext
=
innerWindow
-
>
GetBrowsingContext
(
)
;
!
browsingContext
|
|
!
browsingContext
-
>
IsTop
(
)
)
{
return
;
}
bool
needsTraverse
=
mOngoingAPIMethodTracker
|
|
mUpcomingNonTraverseAPIMethodTracker
|
|
!
mUpcomingTraverseAPIMethodTrackers
.
IsEmpty
(
)
;
if
(
EventListenerManager
*
eventListenerManager
=
GetExistingListenerManager
(
)
)
{
needsTraverse
=
needsTraverse
|
|
eventListenerManager
-
>
HasListeners
(
)
;
}
if
(
windowContext
-
>
GetNeedsTraverse
(
)
=
=
needsTraverse
)
{
return
;
}
(
void
)
windowContext
-
>
SetNeedsTraverse
(
needsTraverse
)
;
}
void
Navigation
:
:
LogHistory
(
)
const
{
if
(
!
MOZ_LOG_TEST
(
gNavigationAPILog
LogLevel
:
:
Debug
)
)
{
return
;
}
MOZ_LOG
(
gNavigationAPILog
LogLevel
:
:
Debug
(
"
Navigation
%
p
(
current
entry
index
:
%
d
)
\
n
"
this
mCurrentEntryIndex
?
int
(
*
mCurrentEntryIndex
)
:
-
1
)
)
;
auto
length
=
mEntries
.
Length
(
)
;
for
(
uint64_t
i
=
0
;
i
<
length
;
i
+
+
)
{
LogEntry
(
mEntries
[
i
]
i
length
mCurrentEntryIndex
&
&
i
=
=
*
mCurrentEntryIndex
)
;
}
}
RefPtr
<
NavigationAPIMethodTracker
>
Navigation
:
:
MaybeSetUpcomingNonTraverseAPIMethodTracker
(
JS
:
:
Handle
<
JS
:
:
Value
>
aInfo
nsIStructuredCloneContainer
*
aSerializedState
)
{
RefPtr
committedPromise
=
Promise
:
:
CreateInfallible
(
GetOwnerGlobal
(
)
)
;
RefPtr
finishedPromise
=
Promise
:
:
CreateInfallible
(
GetOwnerGlobal
(
)
)
;
MOZ_ALWAYS_TRUE
(
finishedPromise
-
>
SetAnyPromiseIsHandled
(
)
)
;
RefPtr
<
NavigationAPIMethodTracker
>
apiMethodTracker
=
MakeAndAddRef
<
NavigationAPIMethodTracker
>
(
this
Nothing
{
}
aInfo
aSerializedState
nullptr
committedPromise
finishedPromise
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mUpcomingNonTraverseAPIMethodTracker
)
;
if
(
!
HasEntriesAndEventsDisabled
(
)
)
{
mUpcomingNonTraverseAPIMethodTracker
=
apiMethodTracker
;
}
UpdateNeedsTraverse
(
)
;
return
apiMethodTracker
;
}
RefPtr
<
NavigationAPIMethodTracker
>
Navigation
:
:
AddUpcomingTraverseAPIMethodTracker
(
const
nsID
&
aKey
JS
:
:
Handle
<
JS
:
:
Value
>
aInfo
)
{
RefPtr
committedPromise
=
Promise
:
:
CreateInfallible
(
GetOwnerGlobal
(
)
)
;
RefPtr
finishedPromise
=
Promise
:
:
CreateInfallible
(
GetOwnerGlobal
(
)
)
;
MOZ_ALWAYS_TRUE
(
finishedPromise
-
>
SetAnyPromiseIsHandled
(
)
)
;
RefPtr
<
NavigationAPIMethodTracker
>
apiMethodTracker
=
MakeAndAddRef
<
NavigationAPIMethodTracker
>
(
this
Some
(
aKey
)
aInfo
nullptr
nullptr
committedPromise
finishedPromise
)
;
RefPtr
methodTracker
=
mUpcomingTraverseAPIMethodTrackers
.
InsertOrUpdate
(
aKey
apiMethodTracker
)
;
UpdateNeedsTraverse
(
)
;
return
methodTracker
;
}
void
Navigation
:
:
CreateNavigationActivationFrom
(
SessionHistoryInfo
*
aPreviousEntryForActivation
NavigationType
aNavigationType
)
{
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
"
Creating
NavigationActivation
for
from
=
{
}
type
=
{
}
"
fmt
:
:
ptr
(
aPreviousEntryForActivation
)
aNavigationType
)
;
RefPtr
currentEntry
=
GetCurrentEntry
(
)
;
if
(
!
currentEntry
)
{
return
;
}
auto
possiblePreviousEntry
=
std
:
:
find_if
(
mEntries
.
begin
(
)
mEntries
.
end
(
)
[
aPreviousEntryForActivation
]
(
const
auto
&
entry
)
{
return
entry
-
>
IsSameEntry
(
aPreviousEntryForActivation
)
;
}
)
;
RefPtr
<
NavigationHistoryEntry
>
oldEntry
;
if
(
possiblePreviousEntry
!
=
mEntries
.
end
(
)
)
{
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
"
Found
previous
entry
at
{
}
"
fmt
:
:
ptr
(
possiblePreviousEntry
-
>
get
(
)
)
)
;
oldEntry
=
*
possiblePreviousEntry
;
}
else
if
(
aNavigationType
=
=
NavigationType
:
:
Replace
&
&
!
aPreviousEntryForActivation
-
>
IsTransient
(
)
)
{
nsCOMPtr
previousURI
=
aPreviousEntryForActivation
-
>
GetURIOrInheritedForAboutBlank
(
)
;
nsCOMPtr
currentURI
=
currentEntry
-
>
SessionHistoryInfo
(
)
-
>
GetURIOrInheritedForAboutBlank
(
)
;
if
(
NS_SUCCEEDED
(
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
CheckSameOriginURI
(
currentURI
previousURI
false
false
)
)
)
{
oldEntry
=
MakeRefPtr
<
NavigationHistoryEntry
>
(
GetOwnerGlobal
(
)
aPreviousEntryForActivation
-
1
)
;
MOZ_LOG_FMT
(
gNavigationAPILog
LogLevel
:
:
Debug
"
Created
a
new
entry
at
{
}
"
fmt
:
:
ptr
(
oldEntry
.
get
(
)
)
)
;
}
}
mActivation
=
MakeRefPtr
<
NavigationActivation
>
(
GetOwnerGlobal
(
)
currentEntry
oldEntry
aNavigationType
)
;
}
}
