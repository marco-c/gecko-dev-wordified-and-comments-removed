#
include
"
mozilla
/
dom
/
NavigationDestination
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
NavigationDestinationBinding
.
h
"
#
include
"
mozilla
/
dom
/
NavigationHistoryEntry
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
NavigationDestination
mGlobal
mEntry
mState
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
NavigationDestination
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
NavigationDestination
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
NavigationDestination
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NavigationDestination
:
:
NavigationDestination
(
nsIGlobalObject
*
aGlobal
nsIURI
*
aURI
NavigationHistoryEntry
*
aEntry
nsStructuredCloneContainer
*
aState
bool
aIsSameDocument
)
:
mGlobal
(
aGlobal
)
mURL
(
aURI
)
mEntry
(
aEntry
)
mState
(
aState
)
mIsSameDocument
(
aIsSameDocument
)
{
}
void
NavigationDestination
:
:
GetUrl
(
nsString
&
aURL
)
const
{
nsAutoCString
uri
;
nsresult
rv
=
mURL
-
>
GetSpec
(
uri
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aURL
.
Truncate
(
)
;
return
;
}
CopyUTF8toUTF16
(
uri
aURL
)
;
}
void
NavigationDestination
:
:
GetKey
(
nsString
&
aKey
)
const
{
if
(
!
mEntry
)
{
aKey
.
Truncate
(
)
;
return
;
}
mEntry
-
>
GetKey
(
aKey
)
;
}
void
NavigationDestination
:
:
GetId
(
nsString
&
aId
)
const
{
if
(
!
mEntry
)
{
aId
.
Truncate
(
)
;
return
;
}
mEntry
-
>
GetId
(
aId
)
;
}
int64_t
NavigationDestination
:
:
Index
(
)
const
{
if
(
!
mEntry
)
{
return
-
1
;
}
return
mEntry
-
>
Index
(
)
;
}
bool
NavigationDestination
:
:
SameDocument
(
)
const
{
return
mIsSameDocument
;
}
void
NavigationDestination
:
:
GetState
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
const
{
nsresult
rv
=
mState
-
>
DeserializeToJsval
(
aCx
aRetVal
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
}
JSObject
*
NavigationDestination
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
NavigationDestination_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsIGlobalObject
*
NavigationDestination
:
:
GetParentObject
(
)
{
return
mGlobal
;
}
}
