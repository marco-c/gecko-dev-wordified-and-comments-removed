#
ifndef
mozilla_dom_PresentationRequest_h
#
define
mozilla_dom_PresentationRequest_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PresentationAvailability
;
class
PresentationConnection
;
class
PresentationRequest
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
static
already_AddRefed
<
PresentationRequest
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
PresentationRequest
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Sequence
<
nsString
>
&
aUrls
ErrorResult
&
aRv
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
Start
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
StartWithDevice
(
const
nsAString
&
aDeviceId
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Reconnect
(
const
nsAString
&
aPresentationId
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetAvailability
(
ErrorResult
&
aRv
)
;
IMPL_EVENT_HANDLER
(
connectionavailable
)
;
nsresult
DispatchConnectionAvailableEvent
(
PresentationConnection
*
aConnection
)
;
void
NotifyPromiseSettled
(
)
;
private
:
PresentationRequest
(
nsPIDOMWindowInner
*
aWindow
nsTArray
<
nsString
>
&
&
aUrls
)
;
~
PresentationRequest
(
)
;
bool
Init
(
)
;
void
FindOrCreatePresentationConnection
(
const
nsAString
&
aPresentationId
Promise
*
aPromise
)
;
void
FindOrCreatePresentationAvailability
(
RefPtr
<
Promise
>
&
aPromise
)
;
bool
IsProhibitMixedSecurityContexts
(
nsIDocument
*
aDocument
)
;
bool
IsPrioriAuthenticatedURL
(
const
nsAString
&
aUrl
)
;
bool
IsAllURLAuthenticated
(
)
;
nsTArray
<
nsString
>
mUrls
;
}
;
}
}
#
endif
