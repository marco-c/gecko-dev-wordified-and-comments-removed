#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
PresentationContentSessionInfo
.
h
"
#
include
"
PresentationIPCService
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
PresentationContentSessionInfo
nsIPresentationSessionTransportCallback
)
;
nsresult
PresentationContentSessionInfo
:
:
Init
(
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
mTransport
-
>
SetCallback
(
this
)
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
mTransport
-
>
EnableDataNotification
(
)
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
NS_OK
;
}
nsresult
PresentationContentSessionInfo
:
:
Send
(
const
nsAString
&
aData
)
{
if
(
!
mTransport
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
mTransport
-
>
Send
(
aData
)
;
}
nsresult
PresentationContentSessionInfo
:
:
Close
(
nsresult
aReason
)
{
if
(
!
mTransport
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
mTransport
-
>
Close
(
aReason
)
;
}
NS_IMETHODIMP
PresentationContentSessionInfo
:
:
NotifyTransportReady
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
PresentationContentSessionInfo
:
:
NotifyTransportClosed
(
nsresult
aReason
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mTransport
=
nullptr
;
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
static_cast
<
PresentationIPCService
*
>
(
service
.
get
(
)
)
-
>
NotifyTransportClosed
(
mSessionId
mRole
aReason
)
;
}
NS_IMETHODIMP
PresentationContentSessionInfo
:
:
NotifyData
(
const
nsACString
&
aData
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
return
static_cast
<
PresentationIPCService
*
>
(
service
.
get
(
)
)
-
>
NotifyMessage
(
mSessionId
aData
)
;
}
}
}
