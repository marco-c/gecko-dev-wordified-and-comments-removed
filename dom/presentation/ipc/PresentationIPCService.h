#
ifndef
mozilla_dom_PresentationIPCService_h
#
define
mozilla_dom_PresentationIPCService_h
#
include
"
mozilla
/
dom
/
PresentationServiceBase
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsIDocShell
;
namespace
mozilla
{
namespace
dom
{
class
PresentationIPCRequest
;
class
PresentationResponderLoadingCallback
;
class
PresentationIPCService
final
:
public
nsIPresentationService
public
PresentationServiceBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIPRESENTATIONSERVICE
PresentationIPCService
(
)
;
nsresult
NotifyAvailableChange
(
bool
aAvailable
)
;
nsresult
NotifySessionStateChange
(
const
nsAString
&
aSessionId
uint16_t
aState
nsresult
aReason
)
;
nsresult
NotifyMessage
(
const
nsAString
&
aSessionId
const
nsACString
&
aData
)
;
nsresult
NotifySessionConnect
(
uint64_t
aWindowId
const
nsAString
&
aSessionId
)
;
void
NotifyPresentationChildDestroyed
(
)
;
nsresult
MonitorResponderLoading
(
const
nsAString
&
aSessionId
nsIDocShell
*
aDocShell
)
;
private
:
virtual
~
PresentationIPCService
(
)
;
nsresult
SendRequest
(
nsIPresentationServiceCallback
*
aCallback
const
PresentationIPCRequest
&
aRequest
)
;
nsTObserverArray
<
nsCOMPtr
<
nsIPresentationAvailabilityListener
>
>
mAvailabilityListeners
;
nsRefPtrHashtable
<
nsStringHashKey
nsIPresentationSessionListener
>
mSessionListeners
;
RefPtr
<
PresentationResponderLoadingCallback
>
mCallback
;
}
;
}
}
#
endif
