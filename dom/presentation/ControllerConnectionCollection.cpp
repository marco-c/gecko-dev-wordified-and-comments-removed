#
include
"
ControllerConnectionCollection
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
PresentationConnection
.
h
"
namespace
mozilla
{
namespace
dom
{
StaticAutoPtr
<
ControllerConnectionCollection
>
ControllerConnectionCollection
:
:
sSingleton
;
ControllerConnectionCollection
*
ControllerConnectionCollection
:
:
GetSingleton
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sSingleton
)
{
sSingleton
=
new
ControllerConnectionCollection
(
)
;
ClearOnShutdown
(
&
sSingleton
)
;
}
return
sSingleton
;
}
ControllerConnectionCollection
:
:
ControllerConnectionCollection
(
)
{
MOZ_COUNT_CTOR
(
ControllerConnectionCollection
)
;
}
ControllerConnectionCollection
:
:
~
ControllerConnectionCollection
(
)
{
MOZ_COUNT_DTOR
(
ControllerConnectionCollection
)
;
}
void
ControllerConnectionCollection
:
:
AddConnection
(
PresentationConnection
*
aConnection
const
uint8_t
aRole
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aRole
!
=
nsIPresentationService
:
:
ROLE_CONTROLLER
)
{
MOZ_ASSERT
(
false
"
This
is
allowed
only
to
be
called
at
controller
side
.
"
)
;
return
;
}
if
(
!
aConnection
)
{
return
;
}
WeakPtr
<
PresentationConnection
>
connection
=
aConnection
;
if
(
mConnections
.
Contains
(
connection
)
)
{
return
;
}
mConnections
.
AppendElement
(
connection
)
;
}
void
ControllerConnectionCollection
:
:
RemoveConnection
(
PresentationConnection
*
aConnection
const
uint8_t
aRole
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aRole
!
=
nsIPresentationService
:
:
ROLE_CONTROLLER
)
{
MOZ_ASSERT
(
false
"
This
is
allowed
only
to
be
called
at
controller
side
.
"
)
;
return
;
}
if
(
!
aConnection
)
{
return
;
}
WeakPtr
<
PresentationConnection
>
connection
=
aConnection
;
mConnections
.
RemoveElement
(
connection
)
;
}
already_AddRefed
<
PresentationConnection
>
ControllerConnectionCollection
:
:
FindConnection
(
uint64_t
aWindowId
const
nsAString
&
aId
const
uint8_t
aRole
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aRole
!
=
nsIPresentationService
:
:
ROLE_CONTROLLER
)
{
MOZ_ASSERT
(
false
"
This
is
allowed
only
to
be
called
at
controller
side
.
"
)
;
return
nullptr
;
}
for
(
int
i
=
mConnections
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
WeakPtr
<
PresentationConnection
>
connection
=
mConnections
[
i
]
;
if
(
!
connection
)
{
mConnections
.
RemoveElementAt
(
i
)
;
continue
;
}
if
(
connection
-
>
Equals
(
aWindowId
aId
)
)
{
RefPtr
<
PresentationConnection
>
matchedConnection
=
connection
.
get
(
)
;
return
matchedConnection
.
forget
(
)
;
}
}
return
nullptr
;
}
}
}
