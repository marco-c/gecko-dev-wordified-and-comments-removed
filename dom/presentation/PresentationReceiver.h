#
ifndef
mozilla_dom_PresentationReceiver_h
#
define
mozilla_dom_PresentationReceiver_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
nsIPresentationListener
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
class
PresentationConnection
;
class
PresentationReceiver
final
:
public
DOMEventTargetHelper
public
nsIPresentationRespondingListener
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
PresentationReceiver
DOMEventTargetHelper
)
NS_DECL_NSIPRESENTATIONRESPONDINGLISTENER
static
already_AddRefed
<
PresentationReceiver
>
Create
(
nsPIDOMWindowInner
*
aWindow
)
;
virtual
void
DisconnectFromOwner
(
)
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
GetConnection
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetConnections
(
ErrorResult
&
aRv
)
const
;
IMPL_EVENT_HANDLER
(
connectionavailable
)
;
private
:
explicit
PresentationReceiver
(
nsPIDOMWindowInner
*
aWindow
)
;
~
PresentationReceiver
(
)
;
bool
Init
(
)
;
void
Shutdown
(
)
;
nsresult
DispatchConnectionAvailableEvent
(
)
;
uint64_t
mWindowId
;
nsTArray
<
RefPtr
<
PresentationConnection
>
>
mConnections
;
nsTArray
<
RefPtr
<
Promise
>
>
mPendingGetConnectionPromises
;
}
;
}
}
#
endif
