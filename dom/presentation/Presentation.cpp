#
include
"
mozilla
/
dom
/
PresentationBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
Presentation
.
h
"
#
include
"
PresentationReceiver
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
Presentation
DOMEventTargetHelper
mDefaultRequest
mReceiver
)
NS_IMPL_ADDREF_INHERITED
(
Presentation
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
Presentation
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
Presentation
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
already_AddRefed
<
Presentation
>
Presentation
:
:
Create
(
nsPIDOMWindow
*
aWindow
)
{
RefPtr
<
Presentation
>
presentation
=
new
Presentation
(
aWindow
)
;
return
NS_WARN_IF
(
!
presentation
-
>
Init
(
)
)
?
nullptr
:
presentation
.
forget
(
)
;
}
Presentation
:
:
Presentation
(
nsPIDOMWindow
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
{
}
Presentation
:
:
~
Presentation
(
)
{
}
bool
Presentation
:
:
Init
(
)
{
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
GetOwner
(
)
)
)
{
return
false
;
}
nsAutoString
sessionId
;
nsresult
rv
=
service
-
>
GetExistentSessionIdAtLaunch
(
GetOwner
(
)
-
>
WindowID
(
)
sessionId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
!
sessionId
.
IsEmpty
(
)
)
{
mReceiver
=
PresentationReceiver
:
:
Create
(
GetOwner
(
)
sessionId
)
;
if
(
NS_WARN_IF
(
!
mReceiver
)
)
{
return
false
;
}
}
return
true
;
}
JSObject
*
Presentation
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PresentationBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
Presentation
:
:
SetDefaultRequest
(
PresentationRequest
*
aRequest
)
{
mDefaultRequest
=
aRequest
;
}
already_AddRefed
<
PresentationRequest
>
Presentation
:
:
GetDefaultRequest
(
)
const
{
RefPtr
<
PresentationRequest
>
request
=
mDefaultRequest
;
return
request
.
forget
(
)
;
}
already_AddRefed
<
PresentationReceiver
>
Presentation
:
:
GetReceiver
(
)
const
{
RefPtr
<
PresentationReceiver
>
receiver
=
mReceiver
;
return
receiver
.
forget
(
)
;
}
