#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
dom
/
PresentationBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIPresentationDeviceManager
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
nsIUUIDGenerator
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
Presentation
.
h
"
#
include
"
PresentationCallbacks
.
h
"
#
include
"
PresentationSession
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
Presentation
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
Presentation
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDefaultRequest
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSessions
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPendingGetSessionPromises
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
Presentation
DOMEventTargetHelper
)
tmp
-
>
Shutdown
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDefaultRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSessions
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPendingGetSessionPromises
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_ADDREF_INHERITED
(
Presentation
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
Presentation
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
Presentation
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
already_AddRefed
<
Presentation
>
Presentation
:
:
Create
(
nsPIDOMWindow
*
aWindow
)
{
nsRefPtr
<
Presentation
>
presentation
=
new
Presentation
(
aWindow
)
;
return
NS_WARN_IF
(
!
presentation
-
>
Init
(
)
)
?
nullptr
:
presentation
.
forget
(
)
;
}
Presentation
:
:
Presentation
(
nsPIDOMWindow
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
{
}
Presentation
:
:
~
Presentation
(
)
{
Shutdown
(
)
;
}
bool
Presentation
:
:
Init
(
)
{
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
false
;
}
nsAutoString
sessionId
;
nsresult
rv
=
service
-
>
GetExistentSessionIdAtLaunch
(
GetOwner
(
)
-
>
WindowID
(
)
sessionId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
!
sessionId
.
IsEmpty
(
)
)
{
nsRefPtr
<
PresentationSession
>
session
=
PresentationSession
:
:
Create
(
GetOwner
(
)
sessionId
PresentationSessionState
:
:
Disconnected
)
;
if
(
NS_WARN_IF
(
!
session
)
)
{
return
false
;
}
mSessions
.
AppendElement
(
session
)
;
}
return
true
;
}
void
Presentation
:
:
Shutdown
(
)
{
mDefaultRequest
=
nullptr
;
mSessions
.
Clear
(
)
;
mPendingGetSessionPromises
.
Clear
(
)
;
}
JSObject
*
Presentation
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PresentationBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
Presentation
:
:
SetDefaultRequest
(
PresentationRequest
*
aRequest
)
{
mDefaultRequest
=
aRequest
;
}
already_AddRefed
<
PresentationRequest
>
Presentation
:
:
GetDefaultRequest
(
)
const
{
nsRefPtr
<
PresentationRequest
>
request
=
mDefaultRequest
;
return
request
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
Presentation
:
:
GetSession
(
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
GetOwner
(
)
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
nsRefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
if
(
!
mSessions
.
IsEmpty
(
)
)
{
promise
-
>
MaybeResolve
(
mSessions
[
0
]
)
;
}
else
{
mPendingGetSessionPromises
.
AppendElement
(
promise
)
;
}
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
Presentation
:
:
GetSessions
(
ErrorResult
&
aRv
)
const
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
GetOwner
(
)
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
nsRefPtr
<
Promise
>
promise
=
Promise
:
:
Create
(
global
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
promise
-
>
MaybeResolve
(
mSessions
)
;
return
promise
.
forget
(
)
;
}
