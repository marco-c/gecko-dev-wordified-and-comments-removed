#
ifndef
mozilla_dom_presentation_provider_DisplayDeviceProvider_h
#
define
mozilla_dom_presentation_provider_DisplayDeviceProvider_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIDisplayInfo
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPresentationDeviceProvider
.
h
"
#
include
"
nsIPresentationLocalDevice
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
presentation
{
enum
DisplayType
{
DISPLAY_PRIMARY
DISPLAY_EXTERNAL
DISPLAY_VIRTUAL
NUM_DISPLAY_TYPES
}
;
class
DisplayDeviceProvider
final
:
public
nsIObserver
public
nsIPresentationDeviceProvider
public
SupportsWeakPtr
<
DisplayDeviceProvider
>
{
private
:
class
HDMIDisplayDevice
final
:
public
nsIPresentationLocalDevice
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPRESENTATIONDEVICE
NS_DECL_NSIPRESENTATIONLOCALDEVICE
explicit
HDMIDisplayDevice
(
DisplayDeviceProvider
*
aProvider
)
:
mScreenId
(
DisplayType
:
:
DISPLAY_EXTERNAL
)
mName
(
"
HDMI
"
)
mType
(
"
external
"
)
mWindowId
(
"
hdmi
"
)
mProvider
(
aProvider
)
{
}
nsresult
OpenTopLevelWindow
(
)
;
nsresult
CloseTopLevelWindow
(
)
;
const
nsCString
&
Id
(
)
const
{
return
mWindowId
;
}
private
:
virtual
~
HDMIDisplayDevice
(
)
=
default
;
uint32_t
mScreenId
;
nsCString
mName
;
nsCString
mType
;
nsCString
mWindowId
;
nsCOMPtr
<
mozIDOMWindowProxy
>
mWindow
;
WeakPtr
<
DisplayDeviceProvider
>
mProvider
;
}
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIPRESENTATIONDEVICEPROVIDER
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
DisplayDeviceProvider
)
nsresult
RequestSession
(
HDMIDisplayDevice
*
aDevice
const
nsAString
&
aUrl
const
nsAString
&
aPresentationId
nsIPresentationControlChannel
*
*
aControlChannel
)
;
private
:
virtual
~
DisplayDeviceProvider
(
)
;
nsresult
Init
(
)
;
nsresult
Uninit
(
)
;
nsresult
AddExternalScreen
(
)
;
nsresult
RemoveExternalScreen
(
)
;
nsCOMPtr
<
nsIPresentationLocalDevice
>
mDevice
=
nullptr
;
nsWeakPtr
mDeviceListener
=
nullptr
;
bool
mInitialized
=
false
;
}
;
}
}
}
#
endif
