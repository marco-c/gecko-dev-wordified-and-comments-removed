#
ifndef
mozilla_dom_PresentationService_h
#
define
mozilla_dom_PresentationService_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
PresentationSessionInfo
.
h
"
class
nsIPresentationSessionRequest
;
class
nsIURI
;
namespace
mozilla
{
namespace
dom
{
class
PresentationRespondingInfo
;
class
PresentationService
final
:
public
nsIPresentationService
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIPRESENTATIONSERVICE
PresentationService
(
)
;
bool
Init
(
)
;
already_AddRefed
<
PresentationSessionInfo
>
GetSessionInfo
(
const
nsAString
&
aSessionId
const
uint8_t
aRole
)
{
MOZ_ASSERT
(
aRole
=
=
nsIPresentationService
:
:
ROLE_CONTROLLER
|
|
aRole
=
=
nsIPresentationService
:
:
ROLE_RECEIVER
)
;
RefPtr
<
PresentationSessionInfo
>
info
;
if
(
aRole
=
=
nsIPresentationService
:
:
ROLE_CONTROLLER
)
{
return
mSessionInfoAtController
.
Get
(
aSessionId
getter_AddRefs
(
info
)
)
?
info
.
forget
(
)
:
nullptr
;
}
else
{
return
mSessionInfoAtReceiver
.
Get
(
aSessionId
getter_AddRefs
(
info
)
)
?
info
.
forget
(
)
:
nullptr
;
}
}
bool
IsSessionAccessible
(
const
nsAString
&
aSessionId
const
uint8_t
aRole
base
:
:
ProcessId
aProcessId
)
;
private
:
~
PresentationService
(
)
;
void
HandleShutdown
(
)
;
nsresult
HandleDeviceChange
(
)
;
nsresult
HandleSessionRequest
(
nsIPresentationSessionRequest
*
aRequest
)
;
void
NotifyAvailableChange
(
bool
aIsAvailable
)
;
bool
IsAppInstalled
(
nsIURI
*
aUri
)
;
bool
mIsAvailable
;
nsTObserverArray
<
nsCOMPtr
<
nsIPresentationAvailabilityListener
>
>
mAvailabilityListeners
;
nsRefPtrHashtable
<
nsUint64HashKey
nsIPresentationRespondingListener
>
mRespondingListeners
;
nsRefPtrHashtable
<
nsStringHashKey
PresentationSessionInfo
>
mSessionInfoAtController
;
nsRefPtrHashtable
<
nsStringHashKey
PresentationSessionInfo
>
mSessionInfoAtReceiver
;
nsClassHashtable
<
nsUint64HashKey
nsString
>
mRespondingSessionIds
;
nsDataHashtable
<
nsStringHashKey
uint64_t
>
mRespondingWindowIds
;
}
;
}
}
#
endif
