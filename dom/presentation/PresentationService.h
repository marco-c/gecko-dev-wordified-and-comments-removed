#
ifndef
mozilla_dom_PresentationService_h
#
define
mozilla_dom_PresentationService_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
PresentationServiceBase
.
h
"
#
include
"
PresentationSessionInfo
.
h
"
class
nsIPresentationSessionRequest
;
class
nsIPresentationTerminateRequest
;
class
nsIURI
;
class
nsIPresentationSessionTransportBuilder
;
namespace
mozilla
{
namespace
dom
{
class
PresentationDeviceRequest
;
class
PresentationRespondingInfo
;
class
PresentationService
final
:
public
nsIPresentationService
public
nsIObserver
public
PresentationServiceBase
<
PresentationSessionInfo
>
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIPRESENTATIONSERVICE
PresentationService
(
)
;
bool
Init
(
)
;
bool
IsSessionAccessible
(
const
nsAString
&
aSessionId
const
uint8_t
aRole
base
:
:
ProcessId
aProcessId
)
;
private
:
friend
class
PresentationDeviceRequest
;
virtual
~
PresentationService
(
)
;
void
HandleShutdown
(
)
;
nsresult
HandleDeviceChange
(
)
;
nsresult
HandleSessionRequest
(
nsIPresentationSessionRequest
*
aRequest
)
;
nsresult
HandleTerminateRequest
(
nsIPresentationTerminateRequest
*
aRequest
)
;
nsresult
HandleReconnectRequest
(
nsIPresentationSessionRequest
*
aRequest
)
;
void
NotifyAvailableChange
(
bool
aIsAvailable
)
;
already_AddRefed
<
PresentationSessionInfo
>
CreateControllingSessionInfo
(
const
nsAString
&
aUrl
const
nsAString
&
aSessionId
uint64_t
aWindowId
)
;
bool
mIsAvailable
;
nsTObserverArray
<
nsCOMPtr
<
nsIPresentationAvailabilityListener
>
>
mAvailabilityListeners
;
}
;
}
}
#
endif
