#
ifndef
mozilla_dom_PresentationSessionTransport_h
#
define
mozilla_dom_PresentationSessionTransport_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIPresentationSessionTransport
.
h
"
#
include
"
nsIPresentationSessionTransportBuilder
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITransport
.
h
"
class
nsISocketTransport
;
class
nsIInputStreamPump
;
class
nsIScriptableInputStream
;
class
nsIMultiplexInputStream
;
class
nsIAsyncStreamCopier
;
class
nsIInputStream
;
namespace
mozilla
{
namespace
dom
{
class
PresentationTCPSessionTransport
final
:
public
nsIPresentationSessionTransport
public
nsIPresentationTCPSessionTransportBuilder
public
nsITransportEventSink
public
nsIInputStreamCallback
public
nsIStreamListener
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
PresentationTCPSessionTransport
nsIPresentationSessionTransport
)
NS_DECL_NSIPRESENTATIONSESSIONTRANSPORT
NS_DECL_NSIPRESENTATIONSESSIONTRANSPORTBUILDER
NS_DECL_NSIPRESENTATIONTCPSESSIONTRANSPORTBUILDER
NS_DECL_NSITRANSPORTEVENTSINK
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
PresentationTCPSessionTransport
(
)
;
void
NotifyCopyComplete
(
nsresult
aStatus
)
;
private
:
~
PresentationTCPSessionTransport
(
)
;
nsresult
CreateStream
(
)
;
nsresult
CreateInputStreamPump
(
)
;
nsresult
EnsureCopying
(
)
;
enum
class
ReadyState
{
CONNECTING
OPEN
CLOSING
CLOSED
}
;
void
SetReadyState
(
ReadyState
aReadyState
)
;
bool
IsReadyToNotifyData
(
)
{
return
mDataNotificationEnabled
&
&
mReadyState
=
=
ReadyState
:
:
OPEN
;
}
ReadyState
mReadyState
;
bool
mAsyncCopierActive
;
nsresult
mCloseStatus
;
bool
mDataNotificationEnabled
;
uint8_t
mRole
=
0
;
nsCOMPtr
<
nsISocketTransport
>
mTransport
;
nsCOMPtr
<
nsIInputStream
>
mSocketInputStream
;
nsCOMPtr
<
nsIOutputStream
>
mSocketOutputStream
;
nsCOMPtr
<
nsIInputStreamPump
>
mInputStreamPump
;
nsCOMPtr
<
nsIScriptableInputStream
>
mInputStreamScriptable
;
nsCOMPtr
<
nsIPresentationSessionTransportCallback
>
mCallback
;
nsCOMPtr
<
nsIPresentationSessionTransportBuilderListener
>
mListener
;
nsTArray
<
nsCOMPtr
<
nsIInputStream
>
>
mPendingData
;
}
;
}
}
#
endif
