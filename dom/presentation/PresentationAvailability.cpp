#
include
"
mozilla
/
dom
/
PresentationAvailabilityBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIPresentationDeviceManager
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
PresentationAvailability
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
PresentationAvailability
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
tmp
-
>
Shutdown
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_ADDREF_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
PresentationAvailability
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
already_AddRefed
<
PresentationAvailability
>
PresentationAvailability
:
:
Create
(
nsPIDOMWindow
*
aWindow
)
{
nsRefPtr
<
PresentationAvailability
>
availability
=
new
PresentationAvailability
(
aWindow
)
;
return
NS_WARN_IF
(
!
availability
-
>
Init
(
)
)
?
nullptr
:
availability
.
forget
(
)
;
}
PresentationAvailability
:
:
PresentationAvailability
(
nsPIDOMWindow
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
mIsAvailable
(
false
)
{
}
PresentationAvailability
:
:
~
PresentationAvailability
(
)
{
Shutdown
(
)
;
}
bool
PresentationAvailability
:
:
Init
(
)
{
nsCOMPtr
<
nsIPresentationDeviceManager
>
deviceManager
=
do_GetService
(
PRESENTATION_DEVICE_MANAGER_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
deviceManager
)
)
{
return
false
;
}
deviceManager
-
>
GetDeviceAvailable
(
&
mIsAvailable
)
;
return
true
;
}
void
PresentationAvailability
:
:
Shutdown
(
)
{
}
JSObject
*
PresentationAvailability
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PresentationAvailabilityBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
PresentationAvailability
:
:
Value
(
)
const
{
return
mIsAvailable
;
}
