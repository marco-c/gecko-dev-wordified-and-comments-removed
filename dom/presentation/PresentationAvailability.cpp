#
include
"
PresentationAvailability
.
h
"
#
include
"
mozilla
/
dom
/
PresentationAvailabilityBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIPresentationDeviceManager
.
h
"
#
include
"
nsIPresentationService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
PresentationAvailability
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mPromise
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mPromise
)
;
tmp
-
>
Shutdown
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_ADDREF_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
PresentationAvailability
DOMEventTargetHelper
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
PresentationAvailability
)
NS_INTERFACE_MAP_ENTRY
(
nsIPresentationAvailabilityListener
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
already_AddRefed
<
PresentationAvailability
>
PresentationAvailability
:
:
Create
(
nsPIDOMWindowInner
*
aWindow
RefPtr
<
Promise
>
&
aPromise
)
{
RefPtr
<
PresentationAvailability
>
availability
=
new
PresentationAvailability
(
aWindow
)
;
return
NS_WARN_IF
(
!
availability
-
>
Init
(
aPromise
)
)
?
nullptr
:
availability
.
forget
(
)
;
}
PresentationAvailability
:
:
PresentationAvailability
(
nsPIDOMWindowInner
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
mIsAvailable
(
false
)
{
}
PresentationAvailability
:
:
~
PresentationAvailability
(
)
{
Shutdown
(
)
;
}
bool
PresentationAvailability
:
:
Init
(
RefPtr
<
Promise
>
&
aPromise
)
{
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
false
;
}
nsresult
rv
=
service
-
>
RegisterAvailabilityListener
(
this
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mIsAvailable
=
false
;
aPromise
-
>
MaybeResolve
(
this
)
;
return
true
;
}
mPromise
=
aPromise
;
return
true
;
}
void
PresentationAvailability
:
:
Shutdown
(
)
{
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
service
)
)
{
return
;
}
nsresult
rv
=
service
-
>
UnregisterAvailabilityListener
(
this
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
void
PresentationAvailability
:
:
DisconnectFromOwner
(
)
{
Shutdown
(
)
;
DOMEventTargetHelper
:
:
DisconnectFromOwner
(
)
;
}
JSObject
*
PresentationAvailability
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
PresentationAvailabilityBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
PresentationAvailability
:
:
Value
(
)
const
{
return
mIsAvailable
;
}
NS_IMETHODIMP
PresentationAvailability
:
:
NotifyAvailableChange
(
bool
aIsAvailable
)
{
return
NS_DispatchToCurrentThread
(
NewRunnableMethod
<
bool
>
(
this
&
PresentationAvailability
:
:
UpdateAvailabilityAndDispatchEvent
aIsAvailable
)
)
;
}
void
PresentationAvailability
:
:
UpdateAvailabilityAndDispatchEvent
(
bool
aIsAvailable
)
{
bool
isChanged
=
(
aIsAvailable
!
=
mIsAvailable
)
;
mIsAvailable
=
aIsAvailable
;
if
(
mPromise
)
{
mPromise
-
>
MaybeResolve
(
this
)
;
mPromise
=
nullptr
;
return
;
}
if
(
isChanged
)
{
NS_WARN_IF
(
NS_FAILED
(
DispatchTrustedEvent
(
NS_LITERAL_STRING
(
"
change
"
)
)
)
)
;
}
}
