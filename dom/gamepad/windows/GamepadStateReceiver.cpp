#
include
"
mozilla
/
dom
/
GamepadStateReceiver
.
h
"
#
include
"
GamepadStateLayout
.
h
"
#
include
"
GamepadWindowsUtil
.
h
"
#
include
"
mozilla
/
dom
/
GamepadStateBroadcastReceiverInfo
.
h
"
#
include
"
mozilla
/
dom
/
GamepadEventTypes
.
h
"
#
include
"
mozilla
/
dom
/
SynchronizedSharedMemory
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
<
inttypes
.
h
>
#
include
<
windows
.
h
>
namespace
mozilla
:
:
dom
{
using
SharedState
=
SynchronizedSharedMemory
<
GamepadSystemState
>
;
class
GamepadStateReceiver
:
:
Impl
{
public
:
static
UniquePtr
<
Impl
>
Create
(
const
GamepadStateBroadcastReceiverInfo
&
aReceiverInfo
)
{
Maybe
<
SharedState
>
sharedState
=
SharedState
:
:
CreateFromRemoteInfo
(
aReceiverInfo
.
sharedMemoryInfo
(
)
)
;
UniqueHandle
<
NTEventHandleTraits
>
eventHandle
(
reinterpret_cast
<
HANDLE
>
(
aReceiverInfo
.
eventHandle
(
)
)
)
;
if
(
!
sharedState
|
|
!
eventHandle
)
{
return
nullptr
;
}
return
UniquePtr
<
Impl
>
(
new
Impl
(
std
:
:
move
(
*
sharedState
)
std
:
:
move
(
eventHandle
)
)
)
;
}
Impl
(
const
Impl
&
)
=
delete
;
Impl
&
operator
=
(
const
Impl
&
)
=
delete
;
Impl
(
Impl
&
&
)
=
delete
;
Impl
&
operator
=
(
Impl
&
&
)
=
delete
;
private
:
explicit
Impl
(
SharedState
aSharedState
UniqueHandle
<
NTEventHandleTraits
>
aEventHandle
)
:
mSharedState
(
std
:
:
move
(
aSharedState
)
)
mEventHandle
(
std
:
:
move
(
aEventHandle
)
)
{
}
SharedState
mSharedState
;
UniqueHandle
<
NTEventHandleTraits
>
mEventHandle
;
}
;
Maybe
<
GamepadStateReceiver
>
GamepadStateReceiver
:
:
Create
(
const
GamepadStateBroadcastReceiverInfo
&
aReceiverInfo
)
{
UniquePtr
<
Impl
>
impl
=
Impl
:
:
Create
(
aReceiverInfo
)
;
if
(
!
impl
)
{
return
Nothing
{
}
;
}
return
Some
(
GamepadStateReceiver
(
std
:
:
move
(
impl
)
)
)
;
}
GamepadStateReceiver
:
:
~
GamepadStateReceiver
(
)
=
default
;
GamepadStateReceiver
:
:
GamepadStateReceiver
(
GamepadStateReceiver
&
&
aOther
)
noexcept
=
default
;
GamepadStateReceiver
&
GamepadStateReceiver
:
:
operator
=
(
GamepadStateReceiver
&
&
aOther
)
noexcept
=
default
;
GamepadStateReceiver
:
:
GamepadStateReceiver
(
)
=
default
;
GamepadStateReceiver
:
:
GamepadStateReceiver
(
UniquePtr
<
Impl
>
aImpl
)
:
mImpl
(
std
:
:
move
(
aImpl
)
)
{
}
}
