#
ifndef
DOM_GAMEPAD_GAMEPADWINDOWSUTIL_H_
#
define
DOM_GAMEPAD_GAMEPADWINDOWSUTIL_H_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
utility
>
#
include
<
windows
.
h
>
namespace
mozilla
:
:
dom
{
template
<
typename
Traits
>
class
UniqueHandle
{
public
:
using
HandleType
=
typename
Traits
:
:
HandleType
;
UniqueHandle
(
)
:
mHandle
(
Traits
:
:
Invalid
(
)
)
{
MOZ_ASSERT
(
!
Traits
:
:
IsValid
(
mHandle
)
)
;
}
explicit
UniqueHandle
(
HandleType
t
)
:
mHandle
(
std
:
:
move
(
t
)
)
{
MOZ_ASSERT
(
!
Traits
:
:
IsValid
(
Traits
:
:
Invalid
(
)
)
)
;
}
UniqueHandle
(
UniqueHandle
&
&
other
)
:
UniqueHandle
(
)
{
swap
(
*
this
other
)
;
}
~
UniqueHandle
(
)
{
if
(
Traits
:
:
IsValid
(
mHandle
)
)
{
Traits
:
:
Close
(
mHandle
)
;
mHandle
=
Traits
:
:
Invalid
(
)
;
}
}
UniqueHandle
&
operator
=
(
UniqueHandle
&
&
other
)
{
UniqueHandle
temp
(
std
:
:
move
(
other
)
)
;
swap
(
*
this
temp
)
;
return
*
this
;
}
HandleType
Release
(
)
{
using
std
:
:
swap
;
HandleType
result
=
Traits
:
:
Invalid
(
)
;
swap
(
result
mHandle
)
;
return
result
;
}
explicit
operator
bool
(
)
const
{
return
Traits
:
:
IsValid
(
mHandle
)
;
}
HandleType
Get
(
)
const
{
return
mHandle
;
}
friend
void
swap
(
UniqueHandle
&
a
UniqueHandle
&
b
)
{
if
(
&
a
!
=
&
b
)
{
using
std
:
:
swap
;
swap
(
a
.
mHandle
b
.
mHandle
)
;
}
}
template
<
typename
=
decltype
(
Traits
:
:
IsEqual
(
Traits
:
:
Invalid
(
)
Traits
:
:
Invalid
(
)
)
)
>
friend
bool
operator
=
=
(
const
UniqueHandle
&
a
const
UniqueHandle
&
b
)
{
return
Traits
:
:
IsEqual
(
a
.
mHandle
b
.
mHandle
)
;
}
template
<
typename
=
decltype
(
Traits
:
:
IsEqual
(
Traits
:
:
Invalid
(
)
Traits
:
:
Invalid
(
)
)
)
>
friend
bool
operator
!
=
(
const
UniqueHandle
&
a
const
UniqueHandle
&
b
)
{
return
!
(
a
=
=
b
)
;
}
UniqueHandle
(
const
UniqueHandle
&
)
=
delete
;
UniqueHandle
&
operator
=
(
const
UniqueHandle
&
)
=
delete
;
private
:
HandleType
mHandle
;
}
;
template
<
typename
Tag
>
struct
NTKernelHandleTraits
{
using
HandleType
=
HANDLE
;
static
HandleType
Invalid
(
)
{
return
nullptr
;
}
static
bool
IsValid
(
HandleType
handle
)
{
return
!
!
handle
;
}
static
void
Close
(
HandleType
handle
)
{
MOZ_ALWAYS_TRUE
(
:
:
CloseHandle
(
handle
)
)
;
}
static
bool
IsEqual
(
const
HandleType
&
a
const
HandleType
&
b
)
{
return
a
=
=
b
;
}
}
;
struct
NTMutexHandleTag
{
}
;
struct
NTEventHandleTag
{
}
;
struct
NTFileMappingHandleTag
{
}
;
using
NTMutexHandleTraits
=
NTKernelHandleTraits
<
NTMutexHandleTag
>
;
using
NTEventHandleTraits
=
NTKernelHandleTraits
<
NTEventHandleTag
>
;
using
NTFileMappingHandleTraits
=
NTKernelHandleTraits
<
NTFileMappingHandleTag
>
;
struct
NTFileViewHandleTraits
{
using
HandleType
=
HANDLE
;
static
void
*
Invalid
(
)
{
return
nullptr
;
}
static
bool
IsValid
(
void
*
p
)
{
return
!
!
p
;
}
static
void
Close
(
void
*
p
)
{
MOZ_ALWAYS_TRUE
(
:
:
UnmapViewOfFile
(
p
)
)
;
}
static
bool
IsEqual
(
const
void
*
a
const
void
*
b
)
{
return
a
=
=
b
;
}
}
;
}
#
endif
