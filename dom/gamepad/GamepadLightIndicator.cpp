#
include
"
mozilla
/
dom
/
GamepadLightIndicator
.
h
"
#
include
"
mozilla
/
dom
/
GamepadManager
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
GamepadLightIndicator
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
GamepadLightIndicator
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
GamepadLightIndicator
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
GamepadLightIndicator
mParent
)
GamepadLightIndicator
:
:
GamepadLightIndicator
(
nsISupports
*
aParent
uint32_t
aGamepadId
uint32_t
aIndex
)
:
mParent
(
aParent
)
mType
(
DefaultType
(
)
)
mGamepadId
(
aGamepadId
)
mIndex
(
aIndex
)
{
}
GamepadLightIndicator
:
:
~
GamepadLightIndicator
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
GamepadLightIndicator
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
GamepadLightIndicator_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
GamepadLightIndicator
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
already_AddRefed
<
Promise
>
GamepadLightIndicator
:
:
SetColor
(
const
GamepadLightColor
&
color
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
GetParentObject
(
)
)
;
MOZ_ASSERT
(
global
)
;
RefPtr
<
GamepadManager
>
gamepadManager
(
GamepadManager
:
:
GetService
(
)
)
;
MOZ_ASSERT
(
gamepadManager
)
;
RefPtr
<
Promise
>
promise
=
gamepadManager
-
>
SetLightIndicatorColor
(
mGamepadId
mIndex
color
.
mRed
color
.
mGreen
color
.
mBlue
global
aRv
)
;
if
(
!
promise
)
{
return
nullptr
;
}
return
promise
.
forget
(
)
;
}
GamepadLightIndicatorType
GamepadLightIndicator
:
:
Type
(
)
const
{
return
mType
;
}
void
GamepadLightIndicator
:
:
Set
(
const
GamepadLightIndicator
*
aOther
)
{
MOZ_ASSERT
(
aOther
)
;
mGamepadId
=
aOther
-
>
mGamepadId
;
mType
=
aOther
-
>
mType
;
mIndex
=
aOther
-
>
mIndex
;
}
}
}
