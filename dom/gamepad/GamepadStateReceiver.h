#
ifndef
DOM_GAMEPAD_GAMEPADSTATERECEIVER_H_
#
define
DOM_GAMEPAD_GAMEPADSTATERECEIVER_H_
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
#
include
"
mozilla
/
dom
/
GamepadHandle
.
h
"
#
include
"
mozilla
/
dom
/
GamepadLightIndicatorBinding
.
h
"
#
include
"
mozilla
/
dom
/
GamepadPoseState
.
h
"
#
include
"
mozilla
/
dom
/
GamepadTouchState
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
namespace
mozilla
:
:
ipc
{
class
IProtocol
;
}
namespace
mozilla
:
:
dom
{
class
GamepadChangeEvent
;
class
GamepadTestHelper
;
class
GamepadStateBroadcastReceiverInfo
;
class
GamepadStateReceiver
{
public
:
static
Maybe
<
GamepadStateReceiver
>
Create
(
const
GamepadStateBroadcastReceiverInfo
&
aReceiverInfo
)
;
bool
StartMonitoringThread
(
const
std
:
:
function
<
void
(
const
GamepadChangeEvent
&
)
>
&
aFn
)
;
void
StopMonitoringThread
(
)
;
GamepadStateReceiver
(
GamepadStateReceiver
&
&
aOther
)
;
GamepadStateReceiver
&
operator
=
(
GamepadStateReceiver
&
&
aOther
)
;
GamepadStateReceiver
(
const
GamepadStateReceiver
&
)
=
delete
;
GamepadStateReceiver
&
operator
=
(
const
GamepadStateReceiver
&
)
=
delete
;
~
GamepadStateReceiver
(
)
;
private
:
class
Impl
;
GamepadStateReceiver
(
)
;
explicit
GamepadStateReceiver
(
UniquePtr
<
Impl
>
aImpl
)
;
UniquePtr
<
Impl
>
mImpl
;
friend
class
GamepadTestHelper
;
bool
StartMonitoringThreadForTesting
(
const
std
:
:
function
<
void
(
const
GamepadChangeEvent
&
)
>
&
aMonitorFn
const
std
:
:
function
<
void
(
uint32_t
)
>
&
aTestCommandFn
)
;
}
;
}
#
endif
