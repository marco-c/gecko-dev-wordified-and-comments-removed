#
ifndef
mozilla_dom_GamepadManager_h_
#
define
mozilla_dom_GamepadManager_h_
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
class
nsGlobalWindow
;
namespace
mozilla
{
namespace
dom
{
class
EventTarget
;
class
Gamepad
;
class
GamepadChangeEvent
;
class
GamepadEventChannelChild
;
class
GamepadManager
final
:
public
nsIObserver
public
nsIIPCBackgroundChildCreateCallback
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
static
bool
IsServiceRunning
(
)
;
static
already_AddRefed
<
GamepadManager
>
GetService
(
)
;
static
bool
IsAPIEnabled
(
)
;
void
BeginShutdown
(
)
;
void
StopMonitoring
(
)
;
void
AddListener
(
nsGlobalWindow
*
aWindow
)
;
void
RemoveListener
(
nsGlobalWindow
*
aWindow
)
;
void
AddGamepad
(
uint32_t
aIndex
const
nsAString
&
aID
GamepadMappingType
aMapping
uint32_t
aNumButtons
uint32_t
aNumAxes
)
;
void
RemoveGamepad
(
uint32_t
aIndex
)
;
void
NewButtonEvent
(
uint32_t
aIndex
uint32_t
aButton
bool
aPressed
double
aValue
)
;
void
NewAxisMoveEvent
(
uint32_t
aIndex
uint32_t
aAxis
double
aValue
)
;
void
SyncGamepadState
(
uint32_t
aIndex
Gamepad
*
aGamepad
)
;
already_AddRefed
<
Gamepad
>
GetGamepad
(
uint32_t
aIndex
)
const
;
void
Update
(
const
GamepadChangeEvent
&
aGamepadEvent
)
;
protected
:
GamepadManager
(
)
;
~
GamepadManager
(
)
{
}
;
void
NewConnectionEvent
(
uint32_t
aIndex
bool
aConnected
)
;
void
FireAxisMoveEvent
(
EventTarget
*
aTarget
Gamepad
*
aGamepad
uint32_t
axis
double
value
)
;
void
FireButtonEvent
(
EventTarget
*
aTarget
Gamepad
*
aGamepad
uint32_t
aButton
double
aValue
)
;
void
FireConnectionEvent
(
EventTarget
*
aTarget
Gamepad
*
aGamepad
bool
aConnected
)
;
bool
mEnabled
;
bool
mNonstandardEventsEnabled
;
bool
mShuttingDown
;
nsTArray
<
GamepadEventChannelChild
*
>
mChannelChildren
;
private
:
nsresult
Init
(
)
;
bool
MaybeWindowHasSeenGamepad
(
nsGlobalWindow
*
aWindow
uint32_t
aIndex
)
;
bool
WindowHasSeenGamepad
(
nsGlobalWindow
*
aWindow
uint32_t
aIndex
)
const
;
void
SetWindowHasSeenGamepad
(
nsGlobalWindow
*
aWindow
uint32_t
aIndex
bool
aHasSeen
=
true
)
;
nsRefPtrHashtable
<
nsUint32HashKey
Gamepad
>
mGamepads
;
nsTArray
<
RefPtr
<
nsGlobalWindow
>
>
mListeners
;
}
;
}
}
#
endif
