#
include
"
mozilla
/
dom
/
PGamepadEventChannelParent
.
h
"
#
ifndef
mozilla_dom_GamepadEventChannelParent_h_
#
define
mozilla_dom_GamepadEventChannelParent_h_
namespace
mozilla
{
namespace
dom
{
class
GamepadEventChannelParent
final
:
public
PGamepadEventChannelParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GamepadEventChannelParent
override
)
static
already_AddRefed
<
GamepadEventChannelParent
>
Create
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvVibrateHaptic
(
const
Tainted
<
GamepadHandle
>
&
aHandle
const
Tainted
<
uint32_t
>
&
aHapticIndex
const
Tainted
<
double
>
&
aIntensity
const
Tainted
<
double
>
&
aDuration
const
Tainted
<
uint32_t
>
&
aPromiseID
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStopVibrateHaptic
(
const
Tainted
<
GamepadHandle
>
&
aHandle
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLightIndicatorColor
(
const
Tainted
<
GamepadHandle
>
&
aHandle
const
Tainted
<
uint32_t
>
&
aLightColorIndex
const
Tainted
<
uint8_t
>
&
aRed
const
Tainted
<
uint8_t
>
&
aGreen
const
Tainted
<
uint8_t
>
&
aBlue
const
Tainted
<
uint32_t
>
&
aPromiseID
)
;
void
DispatchUpdateEvent
(
const
GamepadChangeEvent
&
aEvent
)
;
GamepadEventChannelParent
(
const
GamepadEventChannelParent
&
)
=
delete
;
GamepadEventChannelParent
(
GamepadEventChannelParent
&
&
)
=
delete
;
GamepadEventChannelParent
&
operator
=
(
const
GamepadEventChannelParent
&
)
=
delete
;
GamepadEventChannelParent
&
operator
=
(
GamepadEventChannelParent
&
&
)
=
delete
;
private
:
GamepadEventChannelParent
(
)
;
~
GamepadEventChannelParent
(
)
=
default
;
bool
mShutdown
{
false
}
;
nsCOMPtr
<
nsIEventTarget
>
mBackgroundEventTarget
;
}
;
}
}
#
endif
