#
include
"
GamepadEventChannelParent
.
h
"
#
include
"
GamepadPlatformService
.
h
"
#
include
"
mozilla
/
dom
/
GamepadMonitoring
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
mozilla
:
:
ipc
;
namespace
{
class
SendGamepadUpdateRunnable
final
:
public
Runnable
{
private
:
~
SendGamepadUpdateRunnable
(
)
=
default
;
RefPtr
<
GamepadEventChannelParent
>
mParent
;
GamepadChangeEvent
mEvent
;
public
:
SendGamepadUpdateRunnable
(
GamepadEventChannelParent
*
aParent
GamepadChangeEvent
aEvent
)
:
Runnable
(
"
dom
:
:
SendGamepadUpdateRunnable
"
)
mParent
(
aParent
)
mEvent
(
aEvent
)
{
MOZ_ASSERT
(
mParent
)
;
}
NS_IMETHOD
Run
(
)
override
{
AssertIsOnBackgroundThread
(
)
;
Unused
<
<
mParent
-
>
SendGamepadUpdate
(
mEvent
)
;
return
NS_OK
;
}
}
;
}
already_AddRefed
<
GamepadEventChannelParent
>
GamepadEventChannelParent
:
:
Create
(
)
{
return
RefPtr
<
GamepadEventChannelParent
>
(
new
GamepadEventChannelParent
(
)
)
.
forget
(
)
;
}
GamepadEventChannelParent
:
:
GamepadEventChannelParent
(
)
:
mIsShutdown
{
false
}
{
MOZ_DIAGNOSTIC_ASSERT
(
IsOnBackgroundThread
(
)
)
;
mBackgroundEventTarget
=
GetCurrentEventTarget
(
)
;
RefPtr
<
GamepadPlatformService
>
service
=
GamepadPlatformService
:
:
GetParentService
(
)
;
MOZ_ASSERT
(
service
)
;
service
-
>
AddChannelParent
(
this
)
;
}
void
GamepadEventChannelParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_DIAGNOSTIC_ASSERT
(
IsOnBackgroundThread
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsShutdown
)
;
mIsShutdown
=
true
;
RefPtr
<
GamepadPlatformService
>
service
=
GamepadPlatformService
:
:
GetParentService
(
)
;
MOZ_ASSERT
(
service
)
;
service
-
>
RemoveChannelParent
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GamepadEventChannelParent
:
:
RecvVibrateHaptic
(
const
Tainted
<
GamepadHandle
>
&
aHandle
const
Tainted
<
uint32_t
>
&
aHapticIndex
const
Tainted
<
double
>
&
aIntensity
const
Tainted
<
double
>
&
aDuration
const
uint32_t
&
aPromiseID
)
{
if
(
SendReplyGamepadPromise
(
aPromiseID
)
)
{
return
IPC_OK
(
)
;
}
return
IPC_FAIL
(
this
"
SendReplyGamepadPromise
fail
.
"
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GamepadEventChannelParent
:
:
RecvStopVibrateHaptic
(
const
Tainted
<
GamepadHandle
>
&
aHandle
)
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
GamepadEventChannelParent
:
:
RecvLightIndicatorColor
(
const
Tainted
<
GamepadHandle
>
&
aHandle
const
Tainted
<
uint32_t
>
&
aLightColorIndex
const
Tainted
<
uint8_t
>
&
aRed
const
Tainted
<
uint8_t
>
&
aGreen
const
Tainted
<
uint8_t
>
&
aBlue
const
uint32_t
&
aPromiseID
)
{
SetGamepadLightIndicatorColor
(
aHandle
aLightColorIndex
aRed
aGreen
aBlue
)
;
if
(
SendReplyGamepadPromise
(
aPromiseID
)
)
{
return
IPC_OK
(
)
;
}
return
IPC_FAIL
(
this
"
SendReplyGamepadPromise
fail
.
"
)
;
}
void
GamepadEventChannelParent
:
:
DispatchUpdateEvent
(
const
GamepadChangeEvent
&
aEvent
)
{
mBackgroundEventTarget
-
>
Dispatch
(
new
SendGamepadUpdateRunnable
(
this
aEvent
)
NS_DISPATCH_NORMAL
)
;
}
}
