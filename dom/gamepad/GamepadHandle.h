#
ifndef
mozilla_dom_gamepad_GamepadHandle_h
#
define
mozilla_dom_gamepad_GamepadHandle_h
#
include
"
PLDHashTable
.
h
"
#
include
<
type_traits
>
#
include
<
cinttypes
>
namespace
IPC
{
template
<
class
>
struct
ParamTraits
;
}
namespace
mozilla
:
:
gfx
{
class
VRDisplayClient
;
class
VRManager
;
}
namespace
mozilla
:
:
dom
{
class
GamepadPlatformService
;
class
GamepadServiceTest
;
class
XRInputSource
;
enum
class
GamepadHandleKind
:
uint8_t
{
GamepadPlatformManager
VR
}
;
class
GamepadHandle
{
public
:
GamepadHandle
(
)
=
default
;
GamepadHandle
(
const
GamepadHandle
&
)
=
default
;
GamepadHandle
&
operator
=
(
const
GamepadHandle
&
)
=
default
;
GamepadHandleKind
GetKind
(
)
const
;
friend
bool
operator
=
=
(
const
GamepadHandle
&
a
const
GamepadHandle
&
b
)
;
friend
bool
operator
!
=
(
const
GamepadHandle
&
a
const
GamepadHandle
&
b
)
;
friend
bool
operator
<
(
const
GamepadHandle
&
a
const
GamepadHandle
&
b
)
;
PLDHashNumber
Hash
(
)
const
;
private
:
explicit
GamepadHandle
(
uint32_t
aValue
GamepadHandleKind
aKind
)
;
uint32_t
GetValue
(
)
const
{
return
mValue
;
}
uint32_t
mValue
{
0
}
;
GamepadHandleKind
mKind
{
GamepadHandleKind
:
:
GamepadPlatformManager
}
;
friend
class
mozilla
:
:
dom
:
:
GamepadPlatformService
;
friend
class
mozilla
:
:
dom
:
:
GamepadServiceTest
;
friend
class
mozilla
:
:
dom
:
:
XRInputSource
;
friend
class
mozilla
:
:
gfx
:
:
VRDisplayClient
;
friend
class
mozilla
:
:
gfx
:
:
VRManager
;
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
dom
:
:
GamepadHandle
>
;
}
;
static_assert
(
std
:
:
is_trivially_copyable
<
GamepadHandle
>
:
:
value
"
GamepadHandle
must
be
trivially
copyable
"
)
;
}
#
endif
