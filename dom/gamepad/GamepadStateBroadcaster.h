#
ifndef
DOM_GAMEPAD_GAMEPADSTATEBROADCASTER_H_
#
define
DOM_GAMEPAD_GAMEPADSTATEBROADCASTER_H_
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
#
include
"
mozilla
/
dom
/
GamepadHandle
.
h
"
#
include
"
mozilla
/
dom
/
GamepadLightIndicatorBinding
.
h
"
#
include
"
mozilla
/
dom
/
GamepadPoseState
.
h
"
#
include
"
mozilla
/
dom
/
GamepadTouchState
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
ipc
{
class
IProtocol
;
}
namespace
mozilla
:
:
dom
{
class
GamepadChangeEvent
;
class
GamepadTestHelper
;
class
GamepadStateBroadcastReceiverInfo
;
class
GamepadStateBroadcaster
{
public
:
static
Maybe
<
GamepadStateBroadcaster
>
Create
(
)
;
bool
AddReceiverAndGenerateRemoteInfo
(
const
mozilla
:
:
ipc
:
:
IProtocol
*
aActor
GamepadStateBroadcastReceiverInfo
*
aOut
)
;
void
RemoveReceiver
(
const
mozilla
:
:
ipc
:
:
IProtocol
*
aActor
)
;
void
AddGamepad
(
GamepadHandle
aHandle
const
char
*
aID
GamepadMappingType
aMapping
GamepadHand
aHand
uint32_t
aNumButtons
uint32_t
aNumAxes
uint32_t
aNumHaptics
uint32_t
aNumLights
uint32_t
aNumTouches
)
;
void
RemoveGamepad
(
GamepadHandle
aHandle
)
;
void
NewAxisMoveEvent
(
GamepadHandle
aHandle
uint32_t
aAxis
double
aValue
)
;
void
NewButtonEvent
(
GamepadHandle
aHandle
uint32_t
aButton
bool
aPressed
bool
aTouched
double
aValue
)
;
void
NewLightIndicatorTypeEvent
(
GamepadHandle
aHandle
uint32_t
aLight
GamepadLightIndicatorType
aType
)
;
void
NewPoseEvent
(
GamepadHandle
aHandle
const
GamepadPoseState
&
aState
)
;
void
NewMultiTouchEvent
(
GamepadHandle
aHandle
uint32_t
aTouchArrayIndex
const
GamepadTouchState
&
aState
)
;
GamepadStateBroadcaster
(
GamepadStateBroadcaster
&
&
aOther
)
noexcept
;
GamepadStateBroadcaster
&
operator
=
(
GamepadStateBroadcaster
&
&
aOther
)
noexcept
;
GamepadStateBroadcaster
(
const
GamepadStateBroadcaster
&
)
=
delete
;
GamepadStateBroadcaster
&
operator
=
(
const
GamepadStateBroadcaster
&
)
=
delete
;
~
GamepadStateBroadcaster
(
)
;
private
:
class
Impl
;
GamepadStateBroadcaster
(
)
;
explicit
GamepadStateBroadcaster
(
UniquePtr
<
Impl
>
aImpl
)
;
UniquePtr
<
Impl
>
mImpl
;
friend
class
GamepadTestHelper
;
void
SendTestCommand
(
uint32_t
aCommandId
)
;
}
;
}
#
endif
