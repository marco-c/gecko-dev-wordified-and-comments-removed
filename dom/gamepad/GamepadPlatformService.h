#
ifndef
mozilla_dom_GamepadPlatformService_h_
#
define
mozilla_dom_GamepadPlatformService_h_
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
#
include
<
map
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
GamepadEventChannelParent
;
class
GamepadTestChannelParent
;
class
GamepadPlatformService
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GamepadPlatformService
)
public
:
class
MonitoringState
{
public
:
MonitoringState
(
)
=
default
;
~
MonitoringState
(
)
;
void
AddObserver
(
RefPtr
<
GamepadTestChannelParent
>
aParent
)
;
void
RemoveObserver
(
GamepadTestChannelParent
*
aParent
)
;
bool
IsMonitoring
(
)
const
;
MonitoringState
(
const
MonitoringState
&
)
=
delete
;
MonitoringState
(
MonitoringState
&
&
)
=
delete
;
MonitoringState
&
operator
=
(
const
MonitoringState
)
=
delete
;
MonitoringState
&
operator
=
(
MonitoringState
&
&
)
=
delete
;
private
:
void
Set
(
bool
aIsMonitoring
)
;
bool
mIsMonitoring
{
false
}
;
nsTArray
<
RefPtr
<
GamepadTestChannelParent
>
>
mObservers
;
friend
class
GamepadPlatformService
;
}
;
static
already_AddRefed
<
GamepadPlatformService
>
GetParentService
(
)
;
uint32_t
AddGamepad
(
const
char
*
aID
GamepadMappingType
aMapping
GamepadHand
aHand
uint32_t
aNumButtons
uint32_t
aNumAxes
uint32_t
aNumHaptics
uint32_t
aNumLightIndicator
uint32_t
aNumTouchEvents
)
;
void
RemoveGamepad
(
uint32_t
aIndex
)
;
void
NewButtonEvent
(
uint32_t
aIndex
uint32_t
aButton
bool
aPressed
bool
aTouched
double
aValue
)
;
void
NewButtonEvent
(
uint32_t
aIndex
uint32_t
aButton
bool
aPressed
)
;
void
NewButtonEvent
(
uint32_t
aIndex
uint32_t
aButton
bool
aPressed
bool
aTouched
)
;
void
NewButtonEvent
(
uint32_t
aIndex
uint32_t
aButton
bool
aPressed
double
aValue
)
;
void
NewAxisMoveEvent
(
uint32_t
aIndex
uint32_t
aAxis
double
aValue
)
;
void
NewPoseEvent
(
uint32_t
aIndex
const
GamepadPoseState
&
aState
)
;
void
NewLightIndicatorTypeEvent
(
uint32_t
aIndex
uint32_t
aLight
GamepadLightIndicatorType
aType
)
;
void
NewMultiTouchEvent
(
uint32_t
aIndex
uint32_t
aTouchArrayIndex
const
GamepadTouchState
&
aState
)
;
void
ResetGamepadIndexes
(
)
;
void
AddChannelParent
(
GamepadEventChannelParent
*
aParent
)
;
void
RemoveChannelParent
(
GamepadEventChannelParent
*
aParent
)
;
void
MaybeShutdown
(
)
;
MonitoringState
&
GetMonitoringState
(
)
{
return
mMonitoringState
;
}
private
:
GamepadPlatformService
(
)
;
~
GamepadPlatformService
(
)
;
template
<
class
T
>
void
NotifyGamepadChange
(
uint32_t
aIndex
const
T
&
aInfo
)
;
void
Cleanup
(
)
;
uint32_t
mGamepadIndex
;
nsTArray
<
RefPtr
<
GamepadEventChannelParent
>
>
mChannelParents
;
Mutex
mMutex
;
std
:
:
map
<
uint32_t
GamepadAdded
>
mGamepadAdded
;
MonitoringState
mMonitoringState
;
}
;
}
}
#
endif
