#
ifndef
mozilla_dom_GamepadPlatformService_h_
#
define
mozilla_dom_GamepadPlatformService_h_
#
include
"
mozilla
/
dom
/
GamepadBinding
.
h
"
#
include
<
map
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
GamepadAdded
;
class
GamepadEventChannelParent
;
enum
class
GamepadLightIndicatorType
:
uint8_t
;
struct
GamepadPoseState
;
class
GamepadTestChannelParent
;
struct
GamepadTouchState
;
class
GamepadPlatformService
;
class
GamepadMonitoringState
{
public
:
static
GamepadMonitoringState
&
GetSingleton
(
)
;
void
AddObserver
(
GamepadTestChannelParent
*
aParent
)
;
void
RemoveObserver
(
GamepadTestChannelParent
*
aParent
)
;
bool
IsMonitoring
(
)
const
;
GamepadMonitoringState
(
const
GamepadMonitoringState
&
)
=
delete
;
GamepadMonitoringState
(
GamepadMonitoringState
&
&
)
=
delete
;
GamepadMonitoringState
&
operator
=
(
const
GamepadMonitoringState
)
=
delete
;
GamepadMonitoringState
&
operator
=
(
GamepadMonitoringState
&
&
)
=
delete
;
private
:
GamepadMonitoringState
(
)
=
default
;
~
GamepadMonitoringState
(
)
=
default
;
void
Set
(
bool
aIsMonitoring
)
;
bool
mIsMonitoring
{
false
}
;
Vector
<
WeakPtr
<
GamepadTestChannelParent
>
>
mObservers
;
friend
class
mozilla
:
:
dom
:
:
GamepadPlatformService
;
}
;
class
GamepadPlatformService
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
GamepadPlatformService
)
public
:
static
already_AddRefed
<
GamepadPlatformService
>
GetParentService
(
)
;
uint32_t
AddGamepad
(
const
char
*
aID
GamepadMappingType
aMapping
GamepadHand
aHand
uint32_t
aNumButtons
uint32_t
aNumAxes
uint32_t
aNumHaptics
uint32_t
aNumLightIndicator
uint32_t
aNumTouchEvents
)
;
void
RemoveGamepad
(
uint32_t
aServiceId
)
;
void
NewButtonEvent
(
uint32_t
aServiceId
uint32_t
aButton
bool
aPressed
bool
aTouched
double
aValue
)
;
void
NewButtonEvent
(
uint32_t
aServiceId
uint32_t
aButton
bool
aPressed
)
;
void
NewButtonEvent
(
uint32_t
aServiceId
uint32_t
aButton
bool
aPressed
bool
aTouched
)
;
void
NewButtonEvent
(
uint32_t
aServiceId
uint32_t
aButton
bool
aPressed
double
aValue
)
;
void
NewAxisMoveEvent
(
uint32_t
aServiceId
uint32_t
aAxis
double
aValue
)
;
void
NewPoseEvent
(
uint32_t
aServiceId
const
GamepadPoseState
&
aState
)
;
void
NewLightIndicatorTypeEvent
(
uint32_t
aServiceId
uint32_t
aLight
GamepadLightIndicatorType
aType
)
;
void
NewMultiTouchEvent
(
uint32_t
aServiceId
uint32_t
aTouchArrayIndex
const
GamepadTouchState
&
aState
)
;
static
void
AddChannelParent
(
const
RefPtr
<
GamepadEventChannelParent
>
&
aParent
)
;
static
void
RemoveChannelParent
(
GamepadEventChannelParent
*
aParent
)
;
private
:
explicit
GamepadPlatformService
(
RefPtr
<
GamepadEventChannelParent
>
aParent
)
;
~
GamepadPlatformService
(
)
;
void
AddChannelParentInternal
(
const
RefPtr
<
GamepadEventChannelParent
>
&
aParent
)
;
bool
RemoveChannelParentInternal
(
GamepadEventChannelParent
*
aParent
)
;
template
<
class
T
>
void
NotifyGamepadChange
(
uint32_t
aServiceId
const
T
&
aInfo
const
MutexAutoLock
&
aProofOfLock
)
;
uint32_t
mNextGamepadServiceId
;
Mutex
mMutex
;
nsTArray
<
RefPtr
<
GamepadEventChannelParent
>
>
mChannelParents
;
std
:
:
map
<
uint32_t
GamepadAdded
>
mGamepadAdded
;
}
;
}
}
#
endif
