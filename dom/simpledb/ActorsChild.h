#
ifndef
mozilla_dom_simpledb_ActorsChild_h
#
define
mozilla_dom_simpledb_ActorsChild_h
#
include
<
cstdint
>
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PBackgroundSDBConnectionChild
.
h
"
#
include
"
mozilla
/
dom
/
PBackgroundSDBRequestChild
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
BackgroundChildImpl
;
}
namespace
dom
{
class
SDBConnection
;
class
SDBRequest
;
class
SDBConnectionChild
final
:
public
PBackgroundSDBConnectionChild
{
friend
class
mozilla
:
:
ipc
:
:
BackgroundChildImpl
;
friend
class
SDBConnection
;
SDBConnection
*
mConnection
;
NS_INLINE_DECL_REFCOUNTING
(
SDBConnectionChild
override
)
public
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
SDBConnectionChild
)
;
}
private
:
explicit
SDBConnectionChild
(
SDBConnection
*
aConnection
)
;
~
SDBConnectionChild
(
)
;
void
SendDeleteMeInternal
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
PBackgroundSDBRequestChild
*
AllocPBackgroundSDBRequestChild
(
const
SDBRequestParams
&
aParams
)
override
;
virtual
bool
DeallocPBackgroundSDBRequestChild
(
PBackgroundSDBRequestChild
*
aActor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAllowToClose
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvClosed
(
)
override
;
}
;
class
SDBRequestChild
final
:
public
PBackgroundSDBRequestChild
{
friend
class
SDBConnectionChild
;
friend
class
SDBConnection
;
RefPtr
<
SDBConnection
>
mConnection
;
RefPtr
<
SDBRequest
>
mRequest
;
public
:
void
AssertIsOnOwningThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
private
:
explicit
SDBRequestChild
(
SDBRequest
*
aRequest
)
;
~
SDBRequestChild
(
)
;
void
HandleResponse
(
nsresult
aResponse
)
;
void
HandleResponse
(
)
;
void
HandleResponse
(
const
nsCString
&
aResponse
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
SDBRequestResponse
&
aResponse
)
override
;
}
;
}
}
#
endif
