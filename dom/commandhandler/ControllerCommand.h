#
ifndef
mozilla_ControllerCommand_h_
#
define
mozilla_ControllerCommand_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsISupports
;
class
nsICommandParams
;
namespace
mozilla
{
class
ControllerCommand
{
NS_INLINE_DECL_REFCOUNTING
(
ControllerCommand
)
;
virtual
bool
IsCommandEnabled
(
const
nsACString
&
aCommandName
nsISupports
*
aCommandContext
)
=
0
;
virtual
void
GetCommandStateParams
(
const
nsACString
&
aCommandName
nsICommandParams
*
nsISupports
*
aCommandContext
)
=
0
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
DoCommand
(
const
nsACString
&
aCommandName
nsICommandParams
*
aParams
nsISupports
*
aCommandContext
)
=
0
;
protected
:
virtual
~
ControllerCommand
(
)
=
default
;
}
;
#
define
DECL_CONTROLLER_COMMAND
\
bool
IsCommandEnabled
(
const
nsACString
&
nsISupports
*
)
override
;
\
void
GetCommandStateParams
(
const
nsACString
&
nsICommandParams
*
\
nsISupports
*
)
override
;
\
MOZ_CAN_RUN_SCRIPT
\
nsresult
DoCommand
(
const
nsACString
&
nsICommandParams
*
nsISupports
*
)
\
override
;
#
define
DECL_CONTROLLER_COMMAND_NO_PARAMS
\
bool
IsCommandEnabled
(
const
nsACString
&
nsISupports
*
)
override
;
\
void
GetCommandStateParams
(
const
nsACString
&
nsICommandParams
*
\
nsISupports
*
)
override
{
}
\
MOZ_CAN_RUN_SCRIPT
\
nsresult
DoCommand
(
const
nsACString
&
nsICommandParams
*
nsISupports
*
)
\
override
;
}
#
endif
