#
ifndef
nsControllerCommandTable_h_
#
define
nsControllerCommandTable_h_
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
class
ControllerCommand
;
}
class
nsICommandParams
;
class
nsControllerCommandTable
final
{
public
:
nsControllerCommandTable
(
)
;
NS_INLINE_DECL_REFCOUNTING
(
nsControllerCommandTable
)
;
static
already_AddRefed
<
nsControllerCommandTable
>
CreateEditorCommandTable
(
)
;
static
already_AddRefed
<
nsControllerCommandTable
>
CreateEditingCommandTable
(
)
;
static
already_AddRefed
<
nsControllerCommandTable
>
CreateHTMLEditorCommandTable
(
)
;
static
already_AddRefed
<
nsControllerCommandTable
>
CreateHTMLEditorDocStateCommandTable
(
)
;
static
already_AddRefed
<
nsControllerCommandTable
>
CreateWindowCommandTable
(
)
;
void
RegisterCommand
(
const
nsACString
&
mozilla
:
:
ControllerCommand
*
)
;
void
UnregisterCommand
(
const
nsACString
&
mozilla
:
:
ControllerCommand
*
)
;
mozilla
:
:
ControllerCommand
*
FindCommandHandler
(
const
nsACString
&
)
const
;
bool
IsCommandEnabled
(
const
nsACString
&
nsISupports
*
aContext
)
const
;
bool
SupportsCommand
(
const
nsACString
&
aName
)
const
{
return
!
!
FindCommandHandler
(
aName
)
;
}
void
MakeImmutable
(
)
{
mMutable
=
false
;
}
void
GetSupportedCommands
(
nsTArray
<
nsCString
>
&
)
const
;
private
:
~
nsControllerCommandTable
(
)
;
nsRefPtrHashtable
<
nsCStringHashKey
mozilla
:
:
ControllerCommand
>
mCommandsTable
;
bool
mMutable
=
true
;
}
;
#
endif
