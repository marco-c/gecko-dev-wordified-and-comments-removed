#
ifndef
mozilla_dom_PathUtils__
#
define
mozilla_dom_PathUtils__
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
PathUtils
final
{
public
:
static
void
Filename
(
const
GlobalObject
&
const
nsAString
&
aPath
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
Parent
(
const
GlobalObject
&
const
nsAString
&
aPath
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
Join
(
const
GlobalObject
&
const
Sequence
<
nsString
>
&
aComponents
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
JoinRelative
(
const
GlobalObject
&
const
nsAString
&
aBasePath
const
nsAString
&
aRelativePath
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
CreateUniquePath
(
const
GlobalObject
&
const
nsAString
&
aPath
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
Normalize
(
const
GlobalObject
&
const
nsAString
&
aPath
nsString
&
aResult
ErrorResult
&
aErr
)
;
static
void
Split
(
const
GlobalObject
&
const
nsAString
&
aPath
nsTArray
<
nsString
>
&
aResult
ErrorResult
&
aErr
)
;
static
void
ToFileURI
(
const
GlobalObject
&
const
nsAString
&
aPath
nsCString
&
aResult
ErrorResult
&
aErr
)
;
static
already_AddRefed
<
Promise
>
GetProfileDir
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aErr
)
;
static
already_AddRefed
<
Promise
>
GetLocalProfileDir
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aErr
)
;
static
already_AddRefed
<
Promise
>
GetTempDir
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aErr
)
;
private
:
class
DirectoryCache
;
friend
class
DirectoryCache
;
static
StaticDataMutex
<
Maybe
<
DirectoryCache
>
>
sDirCache
;
}
;
class
PathUtils
:
:
DirectoryCache
final
{
public
:
enum
class
Directory
{
Profile
LocalProfile
Temp
}
;
DirectoryCache
(
)
;
DirectoryCache
(
const
DirectoryCache
&
)
=
delete
;
DirectoryCache
(
DirectoryCache
&
&
)
=
delete
;
DirectoryCache
&
operator
=
(
const
DirectoryCache
&
)
=
delete
;
DirectoryCache
&
operator
=
(
DirectoryCache
&
&
)
=
delete
;
static
DirectoryCache
&
Ensure
(
Maybe
<
DirectoryCache
>
&
aCache
)
;
already_AddRefed
<
Promise
>
GetDirectory
(
const
GlobalObject
&
aGlobalObject
ErrorResult
&
aErr
const
Directory
aRequestedDir
)
;
private
:
using
PopulateDirectoriesPromise
=
MozPromise
<
Ok
nsresult
false
>
;
already_AddRefed
<
PopulateDirectoriesPromise
>
PopulateDirectories
(
const
Directory
aRequestedDir
)
;
nsresult
PopulateDirectoriesImpl
(
const
Directory
aRequestedDir
)
;
void
ResolvePopulateDirectoriesPromise
(
nsresult
aRv
const
Directory
aRequestedDir
)
;
void
ResolveWithDirectory
(
Promise
*
aPromise
const
Directory
aRequestedDir
)
;
MozPromiseHolder
<
PopulateDirectoriesPromise
>
mProfileDirsPromise
;
nsString
mProfileDir
;
nsString
mLocalProfileDir
;
MozPromiseHolder
<
PopulateDirectoriesPromise
>
mAllDirsPromise
;
nsString
mTempDir
;
}
;
}
}
#
endif
