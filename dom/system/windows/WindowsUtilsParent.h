#
ifndef
mozilla_dom_WindowsUtilsParent_h__
#
define
mozilla_dom_WindowsUtilsParent_h__
#
include
"
mozilla
/
dom
/
PWindowsUtilsParent
.
h
"
#
include
"
mozilla
/
ProcInfo
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessParent
.
h
"
namespace
mozilla
:
:
dom
{
class
WindowsUtilsParent
final
:
public
PWindowsUtilsParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WindowsUtilsParent
override
)
;
nsresult
BindToUtilityProcess
(
RefPtr
<
mozilla
:
:
ipc
:
:
UtilityProcessParent
>
aUtilityParent
)
{
Endpoint
<
PWindowsUtilsParent
>
parentEnd
;
Endpoint
<
PWindowsUtilsChild
>
childEnd
;
nsresult
rv
=
PWindowsUtils
:
:
CreateEndpoints
(
base
:
:
GetCurrentProcId
(
)
aUtilityParent
-
>
OtherPid
(
)
&
parentEnd
&
childEnd
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_ASSERT
(
false
"
Protocol
endpoints
failure
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
aUtilityParent
-
>
SendStartWindowsUtilsService
(
std
:
:
move
(
childEnd
)
)
)
{
MOZ_ASSERT
(
false
"
SendStartWindowsUtilsService
failed
"
)
;
return
NS_ERROR_FAILURE
;
}
DebugOnly
<
bool
>
ok
=
parentEnd
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
return
NS_OK
;
}
UtilityActorName
GetActorName
(
)
{
return
UtilityActorName
:
:
WindowsUtils
;
}
protected
:
~
WindowsUtilsParent
(
)
=
default
;
}
;
}
#
endif
