#
ifndef
mozilla_dom_WindowsLocationProvider_h__
#
define
mozilla_dom_WindowsLocationProvider_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGeolocationProvider
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
MLSFallback
;
namespace
mozilla
:
:
dom
{
class
WindowsLocationParent
;
class
WindowsLocationProvider
final
:
public
nsIGeolocationProvider
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGEOLOCATIONPROVIDER
WindowsLocationProvider
(
)
;
private
:
friend
WindowsLocationParent
;
~
WindowsLocationProvider
(
)
;
nsresult
CreateAndWatchMLSProvider
(
nsIGeolocationUpdate
*
aCallback
)
;
void
CancelMLSProvider
(
)
;
void
MaybeCreateLocationActor
(
)
;
void
ReleaseUtilityProcess
(
)
;
bool
SendStartup
(
)
;
bool
SendRegisterForReport
(
nsIGeolocationUpdate
*
aCallback
)
;
bool
SendUnregisterForReport
(
)
;
bool
SendSetHighAccuracy
(
bool
aEnable
)
;
bool
Send__delete__
(
)
;
void
RecvUpdate
(
RefPtr
<
nsIDOMGeoPosition
>
aGeoPosition
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
RecvFailed
(
uint16_t
err
)
;
void
ActorStopped
(
)
;
template
<
typename
Fn
>
bool
WhenActorIsReady
(
Fn
&
&
fn
)
;
RefPtr
<
MLSFallback
>
mMLSProvider
;
nsCOMPtr
<
nsIGeolocationUpdate
>
mCallback
;
using
WindowsLocationPromise
=
MozPromise
<
RefPtr
<
WindowsLocationParent
>
bool
false
>
;
RefPtr
<
WindowsLocationPromise
>
mActorPromise
;
RefPtr
<
WindowsLocationParent
>
mActor
;
bool
mWatching
=
false
;
bool
mEverUpdated
=
false
;
}
;
}
#
endif
