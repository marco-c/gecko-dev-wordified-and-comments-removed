#
ifndef
mozilla_dom_IOUtils__
#
define
mozilla_dom_IOUtils__
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
IOUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nspr
/
prio
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
namespace
mozilla
{
class
PR_CloseDelete
{
public
:
constexpr
PR_CloseDelete
(
)
=
default
;
PR_CloseDelete
(
const
PR_CloseDelete
&
aOther
)
=
default
;
PR_CloseDelete
(
PR_CloseDelete
&
&
aOther
)
=
default
;
PR_CloseDelete
&
operator
=
(
const
PR_CloseDelete
&
aOther
)
=
default
;
PR_CloseDelete
&
operator
=
(
PR_CloseDelete
&
&
aOther
)
=
default
;
void
operator
(
)
(
PRFileDesc
*
aPtr
)
const
{
PR_Close
(
aPtr
)
;
}
}
;
namespace
dom
{
class
IOUtils
final
{
public
:
static
already_AddRefed
<
Promise
>
Read
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
Optional
<
uint32_t
>
&
aMaxBytes
)
;
static
already_AddRefed
<
Promise
>
WriteAtomic
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
Uint8Array
&
aData
const
WriteAtomicOptions
&
aOptions
)
;
private
:
~
IOUtils
(
)
=
default
;
friend
class
IOUtilsShutdownBlocker
;
static
StaticDataMutex
<
StaticRefPtr
<
nsISerialEventTarget
>
>
sBackgroundEventTarget
;
static
StaticRefPtr
<
nsIAsyncShutdownClient
>
sBarrier
;
static
Atomic
<
bool
>
sShutdownStarted
;
static
already_AddRefed
<
nsIAsyncShutdownClient
>
GetShutdownBarrier
(
)
;
static
already_AddRefed
<
nsISerialEventTarget
>
GetBackgroundEventTarget
(
)
;
static
void
SetShutdownHooks
(
)
;
static
already_AddRefed
<
Promise
>
CreateJSPromise
(
GlobalObject
&
aGlobal
)
;
static
UniquePtr
<
PRFileDesc
PR_CloseDelete
>
OpenExistingSync
(
const
char
*
aPath
int32_t
aFlags
)
;
static
UniquePtr
<
PRFileDesc
PR_CloseDelete
>
CreateFileSync
(
const
char
*
aPath
int32_t
aFlags
int32_t
aMode
=
0666
)
;
static
nsresult
ReadSync
(
PRFileDesc
*
aFd
const
uint32_t
aBufSize
nsTArray
<
uint8_t
>
&
aResult
)
;
static
nsresult
WriteSync
(
PRFileDesc
*
aFd
const
nsTArray
<
uint8_t
>
&
aBytes
uint32_t
&
aResult
)
;
using
IOReadMozPromise
=
mozilla
:
:
MozPromise
<
nsTArray
<
uint8_t
>
const
nsCString
true
>
;
using
IOWriteMozPromise
=
mozilla
:
:
MozPromise
<
uint32_t
const
nsCString
true
>
;
}
;
class
IOUtilsShutdownBlocker
:
public
nsIAsyncShutdownBlocker
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
private
:
virtual
~
IOUtilsShutdownBlocker
(
)
=
default
;
}
;
}
}
#
endif
