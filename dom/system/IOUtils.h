#
ifndef
mozilla_dom_IOUtils__
#
define
mozilla_dom_IOUtils__
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Buffer
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
IOUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsIAsyncShutdown
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
prio
.
h
"
namespace
mozilla
{
class
PR_CloseDelete
{
public
:
constexpr
PR_CloseDelete
(
)
=
default
;
PR_CloseDelete
(
const
PR_CloseDelete
&
aOther
)
=
default
;
PR_CloseDelete
(
PR_CloseDelete
&
&
aOther
)
=
default
;
PR_CloseDelete
&
operator
=
(
const
PR_CloseDelete
&
aOther
)
=
default
;
PR_CloseDelete
&
operator
=
(
PR_CloseDelete
&
&
aOther
)
=
default
;
void
operator
(
)
(
PRFileDesc
*
aPtr
)
const
{
PR_Close
(
aPtr
)
;
}
}
;
namespace
dom
{
class
IOUtils
final
{
public
:
class
IOError
;
static
already_AddRefed
<
Promise
>
Read
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
ReadOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
ReadUTF8
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
ReadUTF8Options
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
WriteAtomic
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
Uint8Array
&
aData
const
WriteAtomicOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
WriteAtomicUTF8
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
nsAString
&
aString
const
WriteAtomicOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
Move
(
GlobalObject
&
aGlobal
const
nsAString
&
aSourcePath
const
nsAString
&
aDestPath
const
MoveOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
Remove
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
RemoveOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
MakeDirectory
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
MakeDirectoryOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
Stat
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
)
;
static
already_AddRefed
<
Promise
>
Copy
(
GlobalObject
&
aGlobal
const
nsAString
&
aSourcePath
const
nsAString
&
aDestPath
const
CopyOptions
&
aOptions
)
;
static
already_AddRefed
<
Promise
>
Touch
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
Optional
<
int64_t
>
&
aModification
)
;
static
already_AddRefed
<
Promise
>
GetChildren
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
)
;
static
already_AddRefed
<
Promise
>
SetPermissions
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
const
uint32_t
aPermissions
)
;
static
already_AddRefed
<
Promise
>
Exists
(
GlobalObject
&
aGlobal
const
nsAString
&
aPath
)
;
private
:
~
IOUtils
(
)
=
default
;
friend
class
IOUtilsShutdownBlocker
;
struct
InternalFileInfo
;
struct
InternalWriteAtomicOpts
;
class
MozLZ4
;
static
StaticDataMutex
<
StaticRefPtr
<
nsISerialEventTarget
>
>
sBackgroundEventTarget
;
static
StaticRefPtr
<
nsIAsyncShutdownClient
>
sBarrier
;
static
Atomic
<
bool
>
sShutdownStarted
;
static
already_AddRefed
<
nsIAsyncShutdownClient
>
GetShutdownBarrier
(
)
;
static
already_AddRefed
<
nsISerialEventTarget
>
GetBackgroundEventTarget
(
)
;
static
void
SetShutdownHooks
(
)
;
template
<
typename
OkT
typename
Fn
>
static
void
RunOnBackgroundThread
(
Promise
*
aPromise
Fn
aFunc
)
;
static
already_AddRefed
<
Promise
>
CreateJSPromise
(
GlobalObject
&
aGlobal
)
;
friend
MOZ_MUST_USE
bool
ToJSValue
(
JSContext
*
aCx
const
InternalFileInfo
&
aInternalFileInfo
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
;
static
void
RejectJSPromise
(
const
RefPtr
<
Promise
>
&
aPromise
const
IOError
&
aError
)
;
static
Result
<
nsTArray
<
uint8_t
>
IOError
>
ReadSync
(
nsIFile
*
aFile
const
Maybe
<
uint32_t
>
&
aMaxBytes
const
bool
aDecompress
)
;
static
Result
<
nsString
IOError
>
ReadUTF8Sync
(
nsIFile
*
aFile
const
bool
aDecompress
)
;
static
Result
<
uint32_t
IOError
>
WriteAtomicSync
(
nsIFile
*
aFile
const
Span
<
const
uint8_t
>
&
aByteArray
const
InternalWriteAtomicOpts
&
aOptions
)
;
static
Result
<
uint32_t
IOError
>
WriteAtomicUTF8Sync
(
nsIFile
*
aFile
const
nsCString
&
aUTF8String
const
InternalWriteAtomicOpts
&
aOptions
)
;
static
Result
<
uint32_t
IOError
>
WriteSync
(
PRFileDesc
*
aFd
nsIFile
*
aFile
const
Span
<
const
uint8_t
>
&
aBytes
)
;
static
Result
<
Ok
IOError
>
MoveSync
(
nsIFile
*
aSourceFile
nsIFile
*
aDestFile
bool
aNoOverwrite
)
;
static
Result
<
Ok
IOError
>
CopySync
(
nsIFile
*
aSourceFile
nsIFile
*
aDestFile
bool
aNoOverWrite
bool
aRecursive
)
;
template
<
typename
CopyOrMoveFn
>
static
Result
<
Ok
IOError
>
CopyOrMoveSync
(
CopyOrMoveFn
aMethod
const
char
*
aMethodName
nsIFile
*
aSource
nsIFile
*
aDest
bool
aNoOverwrite
)
;
static
Result
<
Ok
IOError
>
RemoveSync
(
nsIFile
*
aFile
bool
aIgnoreAbsent
bool
aRecursive
)
;
static
Result
<
Ok
IOError
>
MakeDirectorySync
(
nsIFile
*
aFile
bool
aCreateAncestors
bool
aIgnoreExisting
int32_t
aMode
=
0777
)
;
static
Result
<
IOUtils
:
:
InternalFileInfo
IOError
>
StatSync
(
nsIFile
*
aFile
)
;
static
Result
<
int64_t
IOError
>
TouchSync
(
nsIFile
*
aFile
const
Maybe
<
int64_t
>
&
aNewModTime
)
;
static
Result
<
nsTArray
<
nsString
>
IOError
>
GetChildrenSync
(
nsIFile
*
aFile
)
;
static
Result
<
Ok
IOError
>
SetPermissionsSync
(
nsIFile
*
aFile
const
uint32_t
aPermissions
)
;
static
Result
<
bool
IOError
>
ExistsSync
(
nsIFile
*
aFile
)
;
}
;
class
IOUtils
:
:
IOError
{
public
:
MOZ_IMPLICIT
IOError
(
nsresult
aCode
)
:
mCode
(
aCode
)
mMessage
(
Nothing
(
)
)
{
}
template
<
typename
.
.
.
Args
>
IOError
WithMessage
(
const
char
*
const
aMessage
Args
.
.
.
aArgs
)
{
mMessage
.
emplace
(
nsPrintfCString
(
aMessage
aArgs
.
.
.
)
)
;
return
*
this
;
}
IOError
WithMessage
(
const
char
*
const
aMessage
)
{
mMessage
.
emplace
(
nsCString
(
aMessage
)
)
;
return
*
this
;
}
IOError
WithMessage
(
const
nsCString
&
aMessage
)
{
mMessage
.
emplace
(
aMessage
)
;
return
*
this
;
}
nsresult
Code
(
)
const
{
return
mCode
;
}
const
Maybe
<
nsCString
>
&
Message
(
)
const
{
return
mMessage
;
}
private
:
nsresult
mCode
;
Maybe
<
nsCString
>
mMessage
;
}
;
struct
IOUtils
:
:
InternalFileInfo
{
nsString
mPath
;
FileType
mType
;
uint64_t
mSize
;
uint64_t
mLastModified
;
Maybe
<
uint64_t
>
mCreationTime
;
uint32_t
mPermissions
;
}
;
struct
IOUtils
:
:
InternalWriteAtomicOpts
{
RefPtr
<
nsIFile
>
mBackupFile
;
bool
mFlush
;
bool
mNoOverwrite
;
RefPtr
<
nsIFile
>
mTmpFile
;
bool
mCompress
;
static
Result
<
InternalWriteAtomicOpts
IOUtils
:
:
IOError
>
FromBinding
(
const
WriteAtomicOptions
&
aOptions
)
;
}
;
class
IOUtils
:
:
MozLZ4
{
public
:
static
constexpr
std
:
:
array
<
uint8_t
8
>
MAGIC_NUMBER
{
{
'
m
'
'
o
'
'
z
'
'
L
'
'
z
'
'
4
'
'
0
'
'
\
0
'
}
}
;
static
const
uint32_t
HEADER_SIZE
=
8
+
sizeof
(
uint32_t
)
;
static
Result
<
nsTArray
<
uint8_t
>
IOError
>
Compress
(
Span
<
const
uint8_t
>
aUncompressed
)
;
static
Result
<
nsTArray
<
uint8_t
>
IOError
>
Decompress
(
Span
<
const
uint8_t
>
aFileContents
)
;
}
;
class
IOUtilsShutdownBlocker
:
public
nsIAsyncShutdownBlocker
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIASYNCSHUTDOWNBLOCKER
private
:
virtual
~
IOUtilsShutdownBlocker
(
)
=
default
;
}
;
}
}
#
endif
