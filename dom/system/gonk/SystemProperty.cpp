#
include
"
SystemProperty
.
h
"
#
include
<
dlfcn
.
h
>
#
include
<
string
.
h
>
#
include
"
nsDebug
.
h
"
#
include
"
prinit
.
h
"
namespace
mozilla
{
namespace
system
{
namespace
{
typedef
int
(
*
PropertyGet
)
(
const
char
*
char
*
const
char
*
)
;
typedef
int
(
*
PropertySet
)
(
const
char
*
const
char
*
)
;
static
void
*
sLibcUtils
;
static
PRCallOnceType
sInitLibcUtils
;
static
int
FakePropertyGet
(
const
char
*
key
char
*
value
const
char
*
default_value
)
{
if
(
!
default_value
)
{
value
[
0
]
=
'
\
0
'
;
return
0
;
}
int
len
=
strlen
(
default_value
)
;
if
(
len
>
=
Property
:
:
VALUE_MAX_LENGTH
)
{
len
=
Property
:
:
VALUE_MAX_LENGTH
-
1
;
}
memcpy
(
value
default_value
len
)
;
value
[
len
]
=
'
\
0
'
;
return
len
;
}
static
int
FakePropertySet
(
const
char
*
key
const
char
*
value
)
{
return
0
;
}
static
PRStatus
InitLibcUtils
(
)
{
sLibcUtils
=
dlopen
(
"
/
system
/
lib
/
libcutils
.
so
"
RTLD_LAZY
)
;
return
PR_SUCCESS
;
}
static
void
*
GetLibcUtils
(
)
{
PR_CallOnce
(
&
sInitLibcUtils
InitLibcUtils
)
;
return
sLibcUtils
;
}
}
int
Property
:
:
Get
(
const
char
*
key
char
*
value
const
char
*
default_value
)
{
void
*
libcutils
=
GetLibcUtils
(
)
;
if
(
libcutils
)
{
PropertyGet
getter
=
(
PropertyGet
)
dlsym
(
libcutils
"
property_get
"
)
;
if
(
getter
)
{
return
getter
(
key
value
default_value
)
;
}
NS_WARNING
(
"
Failed
to
get
property_get
(
)
from
libcutils
!
"
)
;
}
NS_WARNING
(
"
Fallback
to
the
FakePropertyGet
(
)
"
)
;
return
FakePropertyGet
(
key
value
default_value
)
;
}
int
Property
:
:
Set
(
const
char
*
key
const
char
*
value
)
{
void
*
libcutils
=
GetLibcUtils
(
)
;
if
(
libcutils
)
{
PropertySet
setter
=
(
PropertySet
)
dlsym
(
libcutils
"
property_set
"
)
;
if
(
setter
)
{
return
setter
(
key
value
)
;
}
NS_WARNING
(
"
Failed
to
get
property_set
(
)
from
libcutils
!
"
)
;
}
NS_WARNING
(
"
Fallback
to
the
FakePropertySet
(
)
"
)
;
return
FakePropertySet
(
key
value
)
;
}
}
}
