#
ifndef
GonkGPSGeolocationProvider_h
#
define
GonkGPSGeolocationProvider_h
#
include
<
hardware
/
gps
.
h
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGeolocationProvider
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIDOMGeoPosition
.
h
"
#
include
"
nsISettingsService
.
h
"
class
nsIThread
;
#
define
GONK_GPS_GEOLOCATION_PROVIDER_CID
\
{
0x48525ec5
0x5a7f
0x490a
{
0x92
0x77
0xba
0x66
0xe0
0xd2
0x2c
0x8b
}
}
#
define
GONK_GPS_GEOLOCATION_PROVIDER_CONTRACTID
\
"
mozilla
.
org
/
gonk
-
gps
-
geolocation
-
provider
;
1
"
class
GonkGPSGeolocationProvider
:
public
nsIGeolocationProvider
public
nsIObserver
public
nsISettingsServiceCallback
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIGEOLOCATIONPROVIDER
NS_DECL_NSIOBSERVER
NS_DECL_NSISETTINGSSERVICECALLBACK
static
already_AddRefed
<
GonkGPSGeolocationProvider
>
GetSingleton
(
)
;
private
:
GonkGPSGeolocationProvider
(
)
;
GonkGPSGeolocationProvider
(
const
GonkGPSGeolocationProvider
&
)
;
GonkGPSGeolocationProvider
&
operator
=
(
const
GonkGPSGeolocationProvider
&
)
;
virtual
~
GonkGPSGeolocationProvider
(
)
;
static
void
LocationCallback
(
GpsLocation
*
location
)
;
static
void
StatusCallback
(
GpsStatus
*
status
)
;
static
void
SvStatusCallback
(
GpsSvStatus
*
sv_info
)
;
static
void
NmeaCallback
(
GpsUtcTime
timestamp
const
char
*
nmea
int
length
)
;
static
void
SetCapabilitiesCallback
(
uint32_t
capabilities
)
;
static
void
AcquireWakelockCallback
(
)
;
static
void
ReleaseWakelockCallback
(
)
;
static
pthread_t
CreateThreadCallback
(
const
char
*
name
void
(
*
start
)
(
void
*
)
void
*
arg
)
;
static
void
RequestUtcTimeCallback
(
)
;
static
GpsCallbacks
mCallbacks
;
void
Init
(
)
;
void
StartGPS
(
)
;
void
ShutdownGPS
(
)
;
void
InjectLocation
(
double
latitude
double
longitude
float
accuracy
)
;
void
RequestSettingValue
(
const
char
*
aKey
)
;
const
GpsInterface
*
GetGPSInterface
(
)
;
static
GonkGPSGeolocationProvider
*
sSingleton
;
bool
mStarted
;
bool
mSupportsScheduling
;
bool
mObservingSettingsChange
;
bool
mSupportsSingleShot
;
bool
mSupportsTimeInjection
;
const
GpsInterface
*
mGpsInterface
;
nsCOMPtr
<
nsIGeolocationUpdate
>
mLocationCallback
;
nsCOMPtr
<
nsIThread
>
mInitThread
;
nsCOMPtr
<
nsIGeolocationProvider
>
mNetworkLocationProvider
;
nsCOMPtr
<
nsIDOMGeoPosition
>
mLastGPSPosition
;
class
NetworkLocationUpdate
:
public
nsIGeolocationUpdate
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIGEOLOCATIONUPDATE
NetworkLocationUpdate
(
)
{
}
private
:
virtual
~
NetworkLocationUpdate
(
)
{
}
}
;
}
;
#
endif
