#
ifndef
mozilla_dom_system_AudioChannelManager_h
#
define
mozilla_dom_system_AudioChannelManager_h
#
include
"
mozilla
/
dom
/
BrowserElementAudioChannel
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
#
include
"
mozilla
/
HalTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
AudioChannelService
.
h
"
namespace
mozilla
{
namespace
hal
{
class
SwitchEvent
;
typedef
Observer
<
SwitchEvent
>
SwitchObserver
;
}
namespace
dom
{
namespace
system
{
class
AudioChannelManager
final
:
public
DOMEventTargetHelper
public
hal
:
:
SwitchObserver
public
nsIDOMEventListener
{
public
:
AudioChannelManager
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIDOMEVENTLISTENER
void
Notify
(
const
hal
:
:
SwitchEvent
&
aEvent
)
;
void
Init
(
nsPIDOMWindow
*
aWindow
)
;
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
GetOwner
(
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
bool
Headphones
(
)
{
if
(
mState
.
isNothing
(
)
)
{
mState
=
Some
(
hal
:
:
GetCurrentSwitchState
(
hal
:
:
SWITCH_HEADPHONES
)
)
;
}
return
mState
.
value
(
)
!
=
hal
:
:
SWITCH_STATE_OFF
&
&
mState
.
value
(
)
!
=
hal
:
:
SWITCH_STATE_UNKNOWN
;
}
bool
SetVolumeControlChannel
(
const
nsAString
&
aChannel
)
;
bool
GetVolumeControlChannel
(
nsAString
&
aChannel
)
;
IMPL_EVENT_HANDLER
(
headphoneschange
)
void
GetAllowedAudioChannels
(
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
BrowserElementAudioChannel
>
>
&
aAudioChannels
mozilla
:
:
ErrorResult
&
aRv
)
;
protected
:
virtual
~
AudioChannelManager
(
)
;
private
:
void
NotifyVolumeControlChannelChanged
(
)
;
Maybe
<
hal
:
:
SwitchState
>
mState
;
int32_t
mVolumeChannel
;
}
;
}
}
}
#
endif
