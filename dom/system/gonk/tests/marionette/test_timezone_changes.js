MARIONETTE_TIMEOUT
=
60000
;
MARIONETTE_HEAD_JS
=
'
head
.
js
'
;
function
init
(
)
{
let
promises
=
[
]
;
promises
.
push
(
runEmulatorCmdSafe
(
'
gsm
timezone
0
'
)
)
;
promises
.
push
(
new
Promise
(
(
aResolve
aReject
)
=
>
{
waitFor
(
aResolve
(
)
=
>
{
return
new
Date
(
)
.
getTimezoneOffset
(
)
=
=
=
0
;
}
)
;
}
)
)
;
return
Promise
.
all
(
promises
)
;
}
function
paddingZeros
(
aNumber
aLength
)
{
let
str
=
'
'
+
aNumber
;
while
(
str
.
length
<
aLength
)
{
str
=
'
0
'
+
str
;
}
return
str
;
}
function
verifyDate
(
aTestDate
aUTCOffsetDate
)
{
is
(
aUTCOffsetDate
.
getUTCFullYear
(
)
aTestDate
.
getFullYear
(
)
'
year
'
)
;
is
(
aUTCOffsetDate
.
getUTCMonth
(
)
aTestDate
.
getMonth
(
)
'
month
'
)
;
is
(
aUTCOffsetDate
.
getUTCDate
(
)
aTestDate
.
getDate
(
)
'
date
'
)
;
is
(
aUTCOffsetDate
.
getUTCHours
(
)
aTestDate
.
getHours
(
)
'
hours
'
)
;
is
(
aUTCOffsetDate
.
getUTCMinutes
(
)
aTestDate
.
getMinutes
(
)
'
minutes
'
)
;
is
(
aUTCOffsetDate
.
getUTCMilliseconds
(
)
aTestDate
.
getMilliseconds
(
)
'
milliseconds
'
)
;
let
expectedDateString
=
paddingZeros
(
aUTCOffsetDate
.
getUTCMonth
(
)
+
1
2
)
+
'
/
'
+
paddingZeros
(
aUTCOffsetDate
.
getUTCDate
(
)
2
)
;
let
dateString
=
aTestDate
.
toLocaleString
(
'
en
-
US
'
{
month
:
'
2
-
digit
'
day
:
'
2
-
digit
'
}
)
;
let
expectedTimeString
=
paddingZeros
(
aUTCOffsetDate
.
getUTCHours
(
)
2
)
+
'
:
'
+
paddingZeros
(
aUTCOffsetDate
.
getUTCMinutes
(
)
2
)
;
let
timeString
=
aTestDate
.
toLocaleString
(
'
en
-
US
'
{
hour12
:
false
hour
:
'
2
-
digit
'
minute
:
'
2
-
digit
'
}
)
;
is
(
expectedDateString
dateString
'
dateString
'
)
;
is
(
expectedTimeString
timeString
'
timeString
'
)
;
}
function
waitForTimezoneUpdate
(
aTzOffset
aTestDateInMillis
=
86400000
aTransTzOffset
aTransTestDateInMillis
)
{
return
new
Promise
(
function
(
aResolve
aReject
)
{
window
.
addEventListener
(
'
moztimechange
'
function
onevent
(
aEvent
)
{
let
testDate
=
new
Date
(
aTestDateInMillis
)
;
if
(
testDate
.
getTimezoneOffset
(
)
=
=
=
aTzOffset
)
{
window
.
removeEventListener
(
'
moztimechange
'
onevent
)
;
let
offsetDate
=
new
Date
(
aTestDateInMillis
-
aTzOffset
*
60
*
1000
)
;
verifyDate
(
testDate
offsetDate
)
;
if
(
aTransTzOffset
!
=
=
undefined
)
{
testDate
=
new
Date
(
aTransTestDateInMillis
)
;
is
(
testDate
.
getTimezoneOffset
(
)
aTransTzOffset
)
;
offsetDate
=
new
Date
(
aTransTestDateInMillis
-
aTransTzOffset
*
60
*
1000
)
;
verifyDate
(
testDate
offsetDate
)
;
}
aResolve
(
aEvent
)
;
}
}
)
;
}
)
;
}
function
testChangeNitzTimezone
(
aTzDiff
)
{
let
promises
=
[
]
;
promises
.
push
(
waitForTimezoneUpdate
(
-
aTzDiff
*
15
)
)
;
promises
.
push
(
runEmulatorCmdSafe
(
'
gsm
timezone
'
+
aTzDiff
)
)
;
return
Promise
.
all
(
promises
)
;
}
function
testChangeOlsonTimezone
(
aOlsonTz
aTzOffset
aTestDateInMillis
aTransTzOffset
aTransTestDateInMillis
)
{
let
promises
=
[
]
;
promises
.
push
(
waitForTimezoneUpdate
(
aTzOffset
aTestDateInMillis
aTransTzOffset
aTransTestDateInMillis
)
)
;
promises
.
push
(
setSettings
(
'
time
.
timezone
'
aOlsonTz
)
)
;
return
Promise
.
all
(
promises
)
;
}
startTestBase
(
function
(
)
{
return
init
(
)
.
then
(
(
)
=
>
testChangeNitzTimezone
(
36
)
)
.
then
(
(
)
=
>
testChangeOlsonTimezone
(
'
America
/
New_York
'
300
1446357600000
240
1425798000000
)
)
.
then
(
(
)
=
>
testChangeNitzTimezone
(
-
22
)
)
.
then
(
(
)
=
>
testChangeNitzTimezone
(
51
)
)
.
then
(
(
)
=
>
testChangeOlsonTimezone
(
'
Australia
/
Adelaide
'
-
570
1428165000000
-
630
1443889800000
)
)
.
then
(
(
)
=
>
testChangeNitzTimezone
(
-
38
)
)
.
then
(
(
)
=
>
testChangeNitzTimezone
(
0
)
)
.
then
(
(
)
=
>
runEmulatorCmdSafe
(
'
gsm
timezone
auto
'
)
)
;
}
)
;
