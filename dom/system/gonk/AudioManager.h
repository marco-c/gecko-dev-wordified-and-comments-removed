#
ifndef
mozilla_dom_system_b2g_audiomanager_h__
#
define
mozilla_dom_system_b2g_audiomanager_h__
#
include
"
mozilla
/
HalTypes
.
h
"
#
include
"
mozilla
/
Observer
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIAudioManager
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
android_audio
/
AudioSystem
.
h
"
#
define
NS_AUDIOMANAGER_CID
{
0x94f6fd70
0x7615
0x4af9
\
{
0x89
0x10
0xf9
0x3c
0x55
0xe6
0x62
0xec
}
}
#
define
NS_AUDIOMANAGER_CONTRACTID
"
mozilla
.
org
/
telephony
/
audiomanager
;
1
"
class
nsISettingsServiceLock
;
namespace
mozilla
{
namespace
hal
{
class
SwitchEvent
;
typedef
Observer
<
SwitchEvent
>
SwitchObserver
;
}
namespace
dom
{
namespace
gonk
{
enum
AudioOutputProfiles
{
DEVICE_ERROR
=
-
1
DEVICE_PRIMARY
=
0
DEVICE_HEADSET
=
1
DEVICE_BLUETOOTH
=
2
DEVICE_TOTAL_NUMBER
=
3
}
;
class
VolumeInitCallback
;
class
AudioManager
final
:
public
nsIAudioManager
public
nsIObserver
{
public
:
static
already_AddRefed
<
AudioManager
>
GetInstance
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIAUDIOMANAGER
NS_DECL_NSIOBSERVER
nsresult
ValidateVolumeIndex
(
int32_t
aStream
uint32_t
aIndex
)
const
;
void
HandleAudioFlingerDied
(
)
;
void
HandleHeadphoneSwitchEvent
(
const
hal
:
:
SwitchEvent
&
aEvent
)
;
class
VolumeStreamState
{
public
:
explicit
VolumeStreamState
(
AudioManager
&
aManager
int32_t
aStreamType
)
;
int32_t
GetStreamType
(
)
{
return
mStreamType
;
}
bool
IsDevicesChanged
(
bool
aFromCache
=
true
)
;
void
ClearDevicesChanged
(
)
;
uint32_t
GetLastDevices
(
)
{
return
mLastDevices
;
}
bool
IsVolumeIndexesChanged
(
)
;
void
ClearVolumeIndexesChanged
(
)
;
void
InitStreamVolume
(
)
;
uint32_t
GetMaxIndex
(
)
;
uint32_t
GetDefaultIndex
(
)
;
uint32_t
GetVolumeIndex
(
)
;
uint32_t
GetVolumeIndex
(
uint32_t
aDevice
)
;
void
ClearCurrentVolumeUpdated
(
)
;
nsresult
SetVolumeIndexToActiveDevices
(
uint32_t
aIndex
)
;
nsresult
SetVolumeIndexToAliasStreams
(
uint32_t
aIndex
uint32_t
aDevice
)
;
nsresult
SetVolumeIndexToAliasDevices
(
uint32_t
aIndex
uint32_t
aDevice
)
;
nsresult
SetVolumeIndex
(
uint32_t
aIndex
uint32_t
aDevice
bool
aUpdateCache
=
true
)
;
void
RestoreVolumeIndexToAllDevices
(
)
;
private
:
AudioManager
&
mManager
;
const
int32_t
mStreamType
;
uint32_t
mLastDevices
;
bool
mIsDevicesChanged
;
bool
mIsVolumeIndexesChanged
;
nsDataHashtable
<
nsUint32HashKey
uint32_t
>
mVolumeIndexes
;
}
;
protected
:
int32_t
mPhoneState
;
bool
mIsVolumeInited
;
uint32_t
mAudioOutProfileUpdated
;
nsDataHashtable
<
nsUint32HashKey
nsCString
>
mConnectedDevices
;
bool
mSwitchDone
;
#
if
defined
(
MOZ_B2G_BT
)
|
|
ANDROID_VERSION
>
=
17
bool
mBluetoothA2dpEnabled
;
#
endif
#
ifdef
MOZ_B2G_BT
bool
mA2dpSwitchDone
;
#
endif
nsTArray
<
UniquePtr
<
VolumeStreamState
>
>
mStreamStates
;
uint32_t
mLastChannelVolume
[
AUDIO_STREAM_CNT
]
;
bool
IsFmOutConnected
(
)
;
nsresult
SetStreamVolumeForProfile
(
AudioOutputProfiles
aProfile
int32_t
aStream
uint32_t
aIndex
)
;
nsresult
SetStreamVolumeIndex
(
int32_t
aStream
uint32_t
aIndex
)
;
nsresult
GetStreamVolumeIndex
(
int32_t
aStream
uint32_t
*
aIndex
)
;
void
UpdateCachedActiveDevicesForStreams
(
)
;
uint32_t
GetDevicesForStream
(
int32_t
aStream
bool
aFromCache
=
true
)
;
uint32_t
GetDeviceForStream
(
int32_t
aStream
)
;
static
uint32_t
SelectDeviceFromDevices
(
uint32_t
aOutDevices
)
;
private
:
nsAutoPtr
<
mozilla
:
:
hal
:
:
SwitchObserver
>
mObserver
;
#
ifdef
MOZ_B2G_RIL
bool
mMuteCallToRIL
;
bool
mIsMicMuted
;
#
endif
void
HandleBluetoothStatusChanged
(
nsISupports
*
aSubject
const
char
*
aTopic
const
nsCString
aAddress
)
;
void
HandleAudioChannelProcessChanged
(
)
;
void
InitVolumeForProfile
(
AudioOutputProfiles
aProfile
int32_t
aStreamType
uint32_t
aIndex
)
;
nsAutoCString
AppendProfileToVolumeSetting
(
const
char
*
aName
AudioOutputProfiles
aProfile
)
;
void
InitVolumeFromDatabase
(
)
;
void
MaybeUpdateVolumeSettingToDatabase
(
bool
aForce
=
false
)
;
void
InitProfileVolumeSucceeded
(
)
;
void
InitProfileVolumeFailed
(
const
char
*
aError
)
;
void
AudioOutProfileUpdated
(
AudioOutputProfiles
aProfile
)
;
void
UpdateHeadsetConnectionState
(
hal
:
:
SwitchState
aState
)
;
void
UpdateDeviceConnectionState
(
bool
aIsConnected
uint32_t
aDevice
const
nsCString
&
aDeviceName
)
;
void
SetAllDeviceConnectionStates
(
)
;
AudioManager
(
)
;
~
AudioManager
(
)
;
friend
class
VolumeInitCallback
;
friend
class
VolumeStreamState
;
friend
class
GonkAudioPortCallback
;
}
;
}
}
}
#
endif
