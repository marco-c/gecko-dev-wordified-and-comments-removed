#
ifndef
nsDeviceSensors_h
#
define
nsDeviceSensors_h
#
include
"
nsIDeviceSensors
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
mozilla
/
dom
/
DeviceMotionEvent
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
HalSensor
.
h
"
#
include
"
nsDataHashtable
.
h
"
class
nsIDOMWindow
;
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
EventTarget
;
}
}
class
nsDeviceSensors
:
public
nsIDeviceSensors
public
mozilla
:
:
hal
:
:
ISensorObserver
{
typedef
mozilla
:
:
dom
:
:
DeviceAccelerationInit
DeviceAccelerationInit
;
typedef
mozilla
:
:
dom
:
:
DeviceRotationRateInit
DeviceRotationRateInit
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDEVICESENSORS
nsDeviceSensors
(
)
;
void
Notify
(
const
mozilla
:
:
hal
:
:
SensorData
&
aSensorData
)
override
;
private
:
virtual
~
nsDeviceSensors
(
)
;
nsTArray
<
nsTArray
<
nsIDOMWindow
*
>
*
>
mWindowListeners
;
void
FireDOMLightEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
double
value
)
;
void
FireDOMProximityEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
double
aValue
double
aMin
double
aMax
)
;
void
FireDOMUserProximityEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
bool
aNear
)
;
void
FireDOMOrientationEvent
(
mozilla
:
:
dom
:
:
EventTarget
*
target
double
aAlpha
double
aBeta
double
aGamma
bool
aIsAbsolute
)
;
void
FireDOMMotionEvent
(
nsIDocument
*
domDoc
mozilla
:
:
dom
:
:
EventTarget
*
target
uint32_t
type
PRTime
timestamp
double
x
double
y
double
z
)
;
inline
bool
IsSensorEnabled
(
uint32_t
aType
)
{
return
mWindowListeners
[
aType
]
-
>
Length
(
)
>
0
;
}
bool
IsSensorAllowedByPref
(
uint32_t
aType
nsIDOMWindow
*
aWindow
)
;
mozilla
:
:
TimeStamp
mLastDOMMotionEventTime
;
bool
mIsUserProximityNear
;
mozilla
:
:
Maybe
<
DeviceAccelerationInit
>
mLastAcceleration
;
mozilla
:
:
Maybe
<
DeviceAccelerationInit
>
mLastAccelerationIncludingGravity
;
mozilla
:
:
Maybe
<
DeviceRotationRateInit
>
mLastRotationRate
;
}
;
#
endif
