#
ifndef
mozilla_dom_XULDocument_h
#
define
mozilla_dom_XULDocument_h
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsXULPrototypeDocument
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
XMLDocument
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIStreamLoader
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoader
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
class
nsPIWindowRoot
;
class
nsXULPrototypeElement
;
#
if
0
class
nsIObjectInputStream
;
class
nsIObjectOutputStream
;
#
else
#
include
"
nsIObjectInputStream
.
h
"
#
include
"
nsIObjectOutputStream
.
h
"
#
include
"
nsXULElement
.
h
"
#
endif
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
nsresult
NS_NewXULDocument
(
mozilla
:
:
dom
:
:
Document
*
*
result
)
;
namespace
mozilla
{
namespace
dom
{
class
XULDocument
final
:
public
XMLDocument
{
public
:
XULDocument
(
)
;
NS_DECL_ISUPPORTS_INHERITED
virtual
void
Reset
(
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
)
override
;
virtual
void
ResetToURI
(
nsIURI
*
aURI
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
)
override
;
virtual
nsresult
StartDocumentLoad
(
const
char
*
aCommand
nsIChannel
*
channel
nsILoadGroup
*
aLoadGroup
nsISupports
*
aContainer
nsIStreamListener
*
*
aDocListener
bool
aReset
=
true
nsIContentSink
*
aSink
=
nullptr
)
override
;
virtual
void
EndLoad
(
)
override
;
virtual
void
SetContentType
(
const
nsAString
&
aContentType
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
virtual
bool
IsDocumentRightToLeft
(
)
override
;
void
ResetDocumentDirection
(
)
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XULDocument
XMLDocument
)
protected
:
virtual
~
XULDocument
(
)
;
friend
nsresult
(
:
:
NS_NewXULDocument
(
Document
*
*
aResult
)
)
;
nsresult
Init
(
void
)
override
;
static
void
DirectionChanged
(
const
char
*
aPrefName
XULDocument
*
aData
)
;
static
int32_t
gRefCnt
;
static
LazyLogModule
gXULLog
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
}
;
inline
XULDocument
*
Document
:
:
AsXULDocument
(
)
{
MOZ_ASSERT
(
IsXULDocument
(
)
)
;
return
static_cast
<
mozilla
:
:
dom
:
:
XULDocument
*
>
(
this
)
;
}
}
}
#
endif
