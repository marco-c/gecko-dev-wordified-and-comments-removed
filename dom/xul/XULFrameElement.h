#
ifndef
XULFrameElement_h__
#
define
XULFrameElement_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Nullable
.
h
"
#
include
"
mozilla
/
dom
/
WindowProxyHolder
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULElement
.
h
"
class
nsIWebNavigation
;
class
nsFrameLoader
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
XULFrameElement
final
:
public
nsXULElement
public
nsIFrameLoaderOwner
{
public
:
explicit
XULFrameElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsXULElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XULFrameElement
nsXULElement
)
nsDocShell
*
GetDocShell
(
)
;
already_AddRefed
<
nsIWebNavigation
>
GetWebNavigation
(
)
;
Nullable
<
WindowProxyHolder
>
GetContentWindow
(
)
;
Document
*
GetContentDocument
(
)
;
NS_IMETHOD_
(
already_AddRefed
<
nsFrameLoader
>
)
GetFrameLoader
(
)
override
{
return
do_AddRef
(
mFrameLoader
)
;
}
NS_IMETHOD_
(
void
)
InternalSetFrameLoader
(
nsFrameLoader
*
aFrameLoader
)
override
{
mFrameLoader
=
aFrameLoader
;
}
void
PresetOpenerWindow
(
const
Nullable
<
WindowProxyHolder
>
&
aWindow
ErrorResult
&
aRv
)
{
mOpener
=
aWindow
.
IsNull
(
)
?
nullptr
:
aWindow
.
Value
(
)
.
get
(
)
;
}
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
HTMLIFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
rv
)
;
void
SwapFrameLoaders
(
XULFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
rv
)
;
void
SwapFrameLoaders
(
nsIFrameLoaderOwner
*
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
rv
)
;
virtual
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
bool
aNullParent
)
override
;
virtual
void
DestroyContent
(
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
protected
:
virtual
~
XULFrameElement
(
)
{
}
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
RefPtr
<
BrowsingContext
>
mOpener
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
LoadSrc
(
)
;
}
;
}
}
#
endif
