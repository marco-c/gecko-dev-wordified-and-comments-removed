#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
XULTooltipElement
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
nsCTooltipTextProvider
.
h
"
namespace
mozilla
{
namespace
dom
{
nsXULElement
*
NS_NewXULTooltipElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
{
RefPtr
<
XULTooltipElement
>
tooltip
=
new
XULTooltipElement
(
std
:
:
move
(
aNodeInfo
)
)
;
NS_ENSURE_SUCCESS
(
tooltip
-
>
Init
(
)
nullptr
)
;
return
tooltip
;
}
nsresult
XULTooltipElement
:
:
Init
(
)
{
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
nodeInfo
;
nodeInfo
=
mNodeInfo
-
>
NodeInfoManager
(
)
-
>
GetNodeInfo
(
nsGkAtoms
:
:
label
nullptr
kNameSpaceID_XUL
nsINode
:
:
ELEMENT_NODE
)
;
nsCOMPtr
<
Element
>
label
;
nsresult
rv
=
NS_NewXULElement
(
getter_AddRefs
(
label
)
nodeInfo
.
forget
(
)
dom
:
:
NOT_FROM_PARSER
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
label
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_class
NS_LITERAL_STRING
(
"
tooltip
-
label
"
)
false
)
;
label
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
flex
NS_LITERAL_STRING
(
"
true
"
)
false
)
;
ErrorResult
error
;
AppendChild
(
*
label
error
)
;
return
error
.
StealNSResult
(
)
;
}
nsresult
XULTooltipElement
:
:
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aName
=
=
nsGkAtoms
:
:
label
)
{
nsCOMPtr
<
nsIContent
>
label
=
GetFirstChild
(
)
;
if
(
label
&
&
label
-
>
IsXULElement
(
nsGkAtoms
:
:
label
)
)
{
nsAutoString
value
;
if
(
aValue
)
{
aValue
-
>
ToString
(
value
)
;
}
nsContentUtils
:
:
AddScriptRunner
(
NS_NewRunnableFunction
(
"
XULTooltipElement
:
:
AfterSetAttr
"
[
label
value
]
(
)
{
Element
*
labelElement
=
label
-
>
AsElement
(
)
;
labelElement
-
>
SetTextContent
(
value
IgnoreErrors
(
)
)
;
}
)
)
;
}
}
return
nsXULElement
:
:
AfterSetAttr
(
aNameSpaceID
aName
aValue
aOldValue
aSubjectPrincipal
aNotify
)
;
}
nsresult
XULTooltipElement
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eXULPopupShowing
&
&
aVisitor
.
mEvent
-
>
IsTrusted
(
)
&
&
!
aVisitor
.
mEvent
-
>
DefaultPrevented
(
)
&
&
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
page
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
nsCOMPtr
<
nsITooltipTextProvider
>
textProvider
=
do_GetService
(
NS_DEFAULTTOOLTIPTEXTPROVIDER_CONTRACTID
)
;
nsString
text
;
nsString
direction
;
bool
shouldChange
=
false
;
textProvider
-
>
GetNodeText
(
GetTriggerNode
(
)
getter_Copies
(
text
)
getter_Copies
(
direction
)
&
shouldChange
)
;
if
(
shouldChange
)
{
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
label
text
true
)
;
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
direction
direction
true
)
;
}
else
{
aVisitor
.
mEventStatus
=
nsEventStatus_eConsumeNoDefault
;
aVisitor
.
mEvent
-
>
PreventDefault
(
)
;
}
}
return
NS_OK
;
}
}
}
