#
include
"
XULButtonElement
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIDOMXULButtonElement
.
h
"
namespace
mozilla
:
:
dom
{
nsChangeHint
XULButtonElement
:
:
GetAttributeChangeHint
(
const
nsAtom
*
aAttribute
int32_t
aModType
)
const
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
type
&
&
IsAnyOfXULElements
(
nsGkAtoms
:
:
button
nsGkAtoms
:
:
toolbarbutton
)
)
{
return
nsChangeHint_ReconstructFrame
;
}
return
nsXULElement
:
:
GetAttributeChangeHint
(
aAttribute
aModType
)
;
}
nsresult
XULButtonElement
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
if
(
aVisitor
.
mEventStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
nsXULElement
:
:
PostHandleEvent
(
aVisitor
)
;
}
if
(
GetPrimaryFrame
(
)
&
&
GetPrimaryFrame
(
)
-
>
IsMenuFrame
(
)
)
{
return
nsXULElement
:
:
PostHandleEvent
(
aVisitor
)
;
}
auto
*
event
=
aVisitor
.
mEvent
;
switch
(
event
-
>
mMessage
)
{
case
eBlur
:
{
Blurred
(
)
;
break
;
}
case
eKeyDown
:
{
WidgetKeyboardEvent
*
keyEvent
=
event
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
keyEvent
-
>
ShouldWorkAsSpaceKey
(
)
&
&
aVisitor
.
mPresContext
)
{
EventStateManager
*
esm
=
aVisitor
.
mPresContext
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
this
ElementState
:
:
HOVER
)
;
esm
-
>
SetContentState
(
this
ElementState
:
:
ACTIVE
)
;
mIsHandlingKeyEvent
=
true
;
}
break
;
}
#
ifndef
XP_MACOSX
case
eKeyPress
:
{
WidgetKeyboardEvent
*
keyEvent
=
event
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
NS_VK_RETURN
=
=
keyEvent
-
>
mKeyCode
)
{
if
(
RefPtr
<
nsIDOMXULButtonElement
>
button
=
AsXULButton
(
)
)
{
if
(
MouseClicked
(
*
keyEvent
)
)
{
aVisitor
.
mEventStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
}
break
;
}
#
endif
case
eKeyUp
:
{
WidgetKeyboardEvent
*
keyEvent
=
event
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
keyEvent
-
>
ShouldWorkAsSpaceKey
(
)
)
{
mIsHandlingKeyEvent
=
false
;
ElementState
buttonState
=
State
(
)
;
if
(
buttonState
.
HasAllStates
(
ElementState
:
:
ACTIVE
|
ElementState
:
:
HOVER
)
&
&
aVisitor
.
mPresContext
)
{
EventStateManager
*
esm
=
aVisitor
.
mPresContext
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
nullptr
ElementState
:
:
ACTIVE
)
;
esm
-
>
SetContentState
(
nullptr
ElementState
:
:
HOVER
)
;
if
(
MouseClicked
(
*
keyEvent
)
)
{
aVisitor
.
mEventStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
}
break
;
}
case
eMouseClick
:
{
WidgetMouseEvent
*
mouseEvent
=
event
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
-
>
IsLeftClickEvent
(
)
)
{
if
(
MouseClicked
(
*
mouseEvent
)
)
{
aVisitor
.
mEventStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
break
;
}
default
:
break
;
}
return
nsXULElement
:
:
PostHandleEvent
(
aVisitor
)
;
}
void
XULButtonElement
:
:
Blurred
(
)
{
ElementState
buttonState
=
State
(
)
;
if
(
mIsHandlingKeyEvent
&
&
buttonState
.
HasAllStates
(
ElementState
:
:
ACTIVE
|
ElementState
:
:
HOVER
)
)
{
if
(
nsPresContext
*
pc
=
OwnerDoc
(
)
-
>
GetPresContext
(
)
)
{
EventStateManager
*
esm
=
pc
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
nullptr
ElementState
:
:
ACTIVE
)
;
esm
-
>
SetContentState
(
nullptr
ElementState
:
:
HOVER
)
;
}
}
mIsHandlingKeyEvent
=
false
;
}
bool
XULButtonElement
:
:
MouseClicked
(
WidgetGUIEvent
&
aEvent
)
{
if
(
GetXULBoolAttr
(
nsGkAtoms
:
:
disabled
)
|
|
!
IsInComposedDoc
(
)
)
{
return
false
;
}
RefPtr
<
mozilla
:
:
PresShell
>
presShell
=
OwnerDoc
(
)
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
false
;
}
WidgetInputEvent
*
inputEvent
=
aEvent
.
AsInputEvent
(
)
;
WidgetMouseEventBase
*
mouseEvent
=
aEvent
.
AsMouseEventBase
(
)
;
WidgetKeyboardEvent
*
keyEvent
=
aEvent
.
AsKeyboardEvent
(
)
;
nsContentUtils
:
:
DispatchXULCommand
(
this
aEvent
.
IsTrusted
(
)
nullptr
presShell
inputEvent
-
>
IsControl
(
)
inputEvent
-
>
IsAlt
(
)
inputEvent
-
>
IsShift
(
)
inputEvent
-
>
IsMeta
(
)
mouseEvent
?
mouseEvent
-
>
mInputSource
:
(
keyEvent
?
MouseEvent_Binding
:
:
MOZ_SOURCE_KEYBOARD
:
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
)
mouseEvent
?
mouseEvent
-
>
mButton
:
0
)
;
return
true
;
}
}
