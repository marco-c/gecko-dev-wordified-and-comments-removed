#
include
"
XULMenuBarElement
.
h
"
#
include
"
MenuBarListener
.
h
"
#
include
"
XULButtonElement
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
XULMenuBarElement
XULMenuParentElement
mListener
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
XULMenuBarElement
XULMenuParentElement
)
XULMenuBarElement
:
:
XULMenuBarElement
(
already_AddRefed
<
class
NodeInfo
>
&
&
aNodeInfo
)
:
XULMenuParentElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
XULMenuBarElement
:
:
~
XULMenuBarElement
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
}
void
XULMenuBarElement
:
:
SetActive
(
bool
aActiveFlag
)
{
if
(
mIsActive
=
=
aActiveFlag
)
{
return
;
}
if
(
!
IsInComposedDoc
(
)
)
{
MOZ_ASSERT
(
!
mIsActive
"
How
?
"
)
;
return
;
}
if
(
!
aActiveFlag
)
{
if
(
auto
*
activeChild
=
GetActiveMenuChild
(
)
)
{
if
(
activeChild
-
>
IsMenuPopupOpen
(
)
)
{
return
;
}
}
}
mIsActive
=
aActiveFlag
;
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
SetActiveMenuBar
(
this
aActiveFlag
)
;
}
if
(
!
aActiveFlag
)
{
mActiveByKeyboard
=
false
;
SetActiveMenuChild
(
nullptr
)
;
}
RefPtr
dispatcher
=
new
AsyncEventDispatcher
(
this
aActiveFlag
?
u
"
DOMMenuBarActive
"
_ns
:
u
"
DOMMenuBarInactive
"
_ns
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eNo
)
;
DebugOnly
<
nsresult
>
rv
=
dispatcher
-
>
PostDOMEvent
(
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
AsyncEventDispatcher
failed
to
dispatch
"
)
;
}
nsresult
XULMenuBarElement
:
:
BindToTree
(
BindContext
&
aContext
nsINode
&
aParent
)
{
MOZ_TRY
(
XULMenuParentElement
:
:
BindToTree
(
aContext
aParent
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mListener
)
;
if
(
aContext
.
InComposedDoc
(
)
)
{
mListener
=
new
MenuBarListener
(
*
this
)
;
}
return
NS_OK
;
}
void
XULMenuBarElement
:
:
UnbindFromTree
(
bool
aNullParent
)
{
if
(
mListener
)
{
mListener
-
>
Detach
(
)
;
mListener
=
nullptr
;
}
if
(
NS_WARN_IF
(
mIsActive
)
)
{
mIsActive
=
false
;
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
SetActiveMenuBar
(
this
false
)
;
}
}
return
XULMenuParentElement
:
:
UnbindFromTree
(
aNullParent
)
;
}
}
