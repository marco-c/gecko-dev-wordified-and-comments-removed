#
ifndef
nsXULTemplateResultSetRDF_h
#
define
nsXULTemplateResultSetRDF_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIXULTemplateResult
.
h
"
#
include
"
nsIXULTemplateQueryProcessor
.
h
"
#
include
"
nsIXULSortService
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
enum
nsSortState_direction
{
nsSortState_descending
nsSortState_ascending
nsSortState_natural
}
;
struct
nsSortState
{
bool
initialized
;
MOZ_INIT_OUTSIDE_CTOR
bool
invertSort
;
MOZ_INIT_OUTSIDE_CTOR
bool
inbetweenSeparatorSort
;
MOZ_INIT_OUTSIDE_CTOR
bool
sortStaticsLast
;
MOZ_INIT_OUTSIDE_CTOR
bool
isContainerRDFSeq
;
uint32_t
sortHints
;
MOZ_INIT_OUTSIDE_CTOR
nsSortState_direction
direction
;
nsAutoString
sort
;
nsTArray
<
RefPtr
<
nsAtom
>
>
sortKeys
;
nsCOMPtr
<
nsIXULTemplateQueryProcessor
>
processor
;
nsCOMPtr
<
nsIContent
>
lastContainer
;
MOZ_INIT_OUTSIDE_CTOR
bool
lastWasFirst
lastWasLast
;
nsSortState
(
)
:
initialized
(
false
)
isContainerRDFSeq
(
false
)
sortHints
(
0
)
{
}
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
const
{
cb
.
NoteXPCOMChild
(
processor
)
;
cb
.
NoteXPCOMChild
(
lastContainer
)
;
}
}
;
struct
contentSortInfo
{
nsCOMPtr
<
nsIContent
>
content
;
nsCOMPtr
<
nsIContent
>
parent
;
nsCOMPtr
<
nsIXULTemplateResult
>
result
;
void
swap
(
contentSortInfo
&
other
)
{
content
.
swap
(
other
.
content
)
;
parent
.
swap
(
other
.
parent
)
;
result
.
swap
(
other
.
result
)
;
}
}
;
class
XULSortServiceImpl
:
public
nsIXULSortService
{
protected
:
XULSortServiceImpl
(
void
)
{
}
virtual
~
XULSortServiceImpl
(
void
)
{
}
friend
nsresult
NS_NewXULSortService
(
nsIXULSortService
*
*
mgr
)
;
private
:
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIXULSORTSERVICE
void
SetSortHints
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsSortState
*
aSortState
)
;
void
SetSortColumnHints
(
nsIContent
*
content
const
nsAString
&
sortResource
const
nsAString
&
sortDirection
)
;
nsresult
GetItemsToSort
(
nsIContent
*
aContainer
nsSortState
*
aSortState
nsTArray
<
contentSortInfo
>
&
aSortItems
)
;
nsresult
GetTemplateItemsToSort
(
nsIContent
*
aContainer
nsIXULTemplateBuilder
*
aBuilder
nsSortState
*
aSortState
nsTArray
<
contentSortInfo
>
&
aSortItems
)
;
nsresult
SortContainer
(
nsIContent
*
aContainer
nsSortState
*
aSortState
)
;
nsresult
InvertSortInfo
(
nsTArray
<
contentSortInfo
>
&
aData
int32_t
aStart
int32_t
aNumItems
)
;
static
nsresult
InitializeSortState
(
mozilla
:
:
dom
:
:
Element
*
aRootElement
mozilla
:
:
dom
:
:
Element
*
aContainer
const
nsAString
&
aSortKey
const
nsAString
&
aSortDirection
nsSortState
*
aSortState
)
;
static
int32_t
CompareValues
(
const
nsAString
&
aLeft
const
nsAString
&
aRight
uint32_t
aSortHints
)
;
}
;
#
endif
