#
include
"
ChromeObserver
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
MutationEventBinding
.
h
"
#
include
"
nsXULElement
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_ISUPPORTS
(
ChromeObserver
nsIMutationObserver
)
ChromeObserver
:
:
ChromeObserver
(
Document
*
aDocument
)
:
nsStubMutationObserver
(
)
mDocument
(
aDocument
)
{
}
ChromeObserver
:
:
~
ChromeObserver
(
)
=
default
;
void
ChromeObserver
:
:
Init
(
)
{
mDocument
-
>
AddMutationObserver
(
this
)
;
Element
*
rootElement
=
mDocument
-
>
GetRootElement
(
)
;
if
(
!
rootElement
)
{
return
;
}
nsAutoScriptBlocker
scriptBlocker
;
uint32_t
attributeCount
=
rootElement
-
>
GetAttrCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
attributeCount
;
i
+
+
)
{
BorrowedAttrInfo
info
=
rootElement
-
>
GetAttrInfoAt
(
i
)
;
const
nsAttrName
*
name
=
info
.
mName
;
if
(
name
-
>
LocalName
(
)
=
=
nsGkAtoms
:
:
customtitlebar
)
{
continue
;
}
AttributeChanged
(
rootElement
name
-
>
NamespaceID
(
)
name
-
>
LocalName
(
)
MutationEvent_Binding
:
:
ADDITION
nullptr
)
;
}
}
nsIWidget
*
ChromeObserver
:
:
GetWindowWidget
(
)
{
if
(
mDocument
&
&
mDocument
-
>
IsRootDisplayDocument
(
)
)
{
nsCOMPtr
<
nsISupports
>
container
=
mDocument
-
>
GetContainer
(
)
;
if
(
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
container
)
)
{
nsCOMPtr
<
nsIWidget
>
mainWidget
=
baseWindow
-
>
GetMainWidget
(
)
;
return
mainWidget
;
}
}
return
nullptr
;
}
void
ChromeObserver
:
:
SetDrawsTitle
(
bool
aState
)
{
nsIWidget
*
mainWidget
=
GetWindowWidget
(
)
;
if
(
mainWidget
)
{
mainWidget
-
>
SetDrawsTitle
(
aState
)
;
}
}
void
ChromeObserver
:
:
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNamespaceID
nsAtom
*
aName
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
if
(
!
mDocument
|
|
aElement
!
=
mDocument
-
>
GetRootElement
(
)
)
{
return
;
}
if
(
aModType
=
=
dom
:
:
MutationEvent_Binding
:
:
ADDITION
|
|
aModType
=
=
dom
:
:
MutationEvent_Binding
:
:
REMOVAL
)
{
const
bool
added
=
aModType
=
=
dom
:
:
MutationEvent_Binding
:
:
ADDITION
;
if
(
aName
=
=
nsGkAtoms
:
:
hidechrome
)
{
HideWindowChrome
(
added
)
;
}
else
if
(
aName
=
=
nsGkAtoms
:
:
customtitlebar
)
{
SetCustomTitlebar
(
added
)
;
}
else
if
(
aName
=
=
nsGkAtoms
:
:
drawtitle
)
{
SetDrawsTitle
(
added
)
;
}
else
if
(
aName
=
=
nsGkAtoms
:
:
windowsmica
)
{
SetMica
(
added
)
;
}
}
if
(
aName
=
=
nsGkAtoms
:
:
localedir
)
{
mDocument
-
>
ResetDocumentDirection
(
)
;
}
if
(
aName
=
=
nsGkAtoms
:
:
title
&
&
aModType
!
=
dom
:
:
MutationEvent_Binding
:
:
REMOVAL
)
{
mDocument
-
>
NotifyPossibleTitleChange
(
false
)
;
}
}
void
ChromeObserver
:
:
NodeWillBeDestroyed
(
nsINode
*
aNode
)
{
mDocument
=
nullptr
;
}
void
ChromeObserver
:
:
SetMica
(
bool
aEnable
)
{
if
(
nsIWidget
*
mainWidget
=
GetWindowWidget
(
)
)
{
mainWidget
-
>
SetMicaBackdrop
(
aEnable
)
;
}
}
void
ChromeObserver
:
:
SetCustomTitlebar
(
bool
aCustomTitlebar
)
{
if
(
nsIWidget
*
mainWidget
=
GetWindowWidget
(
)
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
<
bool
>
(
"
SetCustomTitlebar
"
mainWidget
&
nsIWidget
:
:
SetCustomTitlebar
aCustomTitlebar
)
)
;
}
}
nsresult
ChromeObserver
:
:
HideWindowChrome
(
bool
aShouldHide
)
{
if
(
!
mDocument
-
>
IsRootDisplayDocument
(
)
)
return
NS_OK
;
nsPresContext
*
presContext
=
mDocument
-
>
GetPresContext
(
)
;
if
(
presContext
&
&
presContext
-
>
IsChrome
(
)
)
{
nsIFrame
*
frame
=
mDocument
-
>
GetDocumentElement
(
)
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsView
*
view
=
frame
-
>
GetClosestView
(
)
;
if
(
view
)
{
nsIWidget
*
w
=
view
-
>
GetWidget
(
)
;
NS_ENSURE_STATE
(
w
)
;
w
-
>
HideWindowChrome
(
aShouldHide
)
;
}
}
}
return
NS_OK
;
}
}
