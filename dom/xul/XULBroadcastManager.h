#
ifndef
mozilla_dom_XULBroadcastManager_h
#
define
mozilla_dom_XULBroadcastManager_h
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsTArray
.
h
"
class
PLDHashTable
;
class
nsXULElement
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Document
;
class
Element
;
class
XULBroadcastManager
final
{
public
:
explicit
XULBroadcastManager
(
Document
*
aDocument
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
XULBroadcastManager
)
static
bool
MayNeedListener
(
const
Element
&
aElement
)
;
nsresult
AddListener
(
Element
*
aElement
)
;
nsresult
RemoveListener
(
Element
*
aElement
)
;
void
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
;
void
MaybeBroadcast
(
)
;
void
DropDocumentReference
(
)
;
protected
:
enum
HookupAction
{
eHookupAdd
=
0
eHookupRemove
}
;
nsresult
UpdateListenerHookup
(
Element
*
aElement
HookupAction
aAction
)
;
void
RemoveListenerFor
(
Element
&
aBroadcaster
Element
&
aListener
const
nsAString
&
aAttr
)
;
void
AddListenerFor
(
Element
&
aBroadcaster
Element
&
aListener
const
nsAString
&
aAttr
ErrorResult
&
aRv
)
;
nsresult
ExecuteOnBroadcastHandlerFor
(
Element
*
aBroadcaster
Element
*
aListener
nsAtom
*
aAttr
)
;
nsresult
FindBroadcaster
(
Element
*
aElement
Element
*
*
aListener
nsString
&
aBroadcasterID
nsString
&
aAttribute
Element
*
*
aBroadcaster
)
;
void
SynchronizeBroadcastListener
(
Element
*
aBroadcaster
Element
*
aListener
const
nsAString
&
aAttr
)
;
Document
*
MOZ_NON_OWNING_REF
mDocument
;
PLDHashTable
*
mBroadcasterMap
;
class
nsDelayedBroadcastUpdate
{
public
:
nsDelayedBroadcastUpdate
(
Element
*
aBroadcaster
Element
*
aListener
const
nsAString
&
aAttr
)
:
mBroadcaster
(
aBroadcaster
)
mListener
(
aListener
)
mAttr
(
aAttr
)
mSetAttr
(
false
)
mNeedsAttrChange
(
false
)
{
}
nsDelayedBroadcastUpdate
(
Element
*
aBroadcaster
Element
*
aListener
nsAtom
*
aAttrName
const
nsAString
&
aAttr
bool
aSetAttr
bool
aNeedsAttrChange
)
:
mBroadcaster
(
aBroadcaster
)
mListener
(
aListener
)
mAttr
(
aAttr
)
mAttrName
(
aAttrName
)
mSetAttr
(
aSetAttr
)
mNeedsAttrChange
(
aNeedsAttrChange
)
{
}
nsDelayedBroadcastUpdate
(
const
nsDelayedBroadcastUpdate
&
aOther
)
=
delete
;
nsDelayedBroadcastUpdate
(
nsDelayedBroadcastUpdate
&
&
aOther
)
=
default
;
nsCOMPtr
<
Element
>
mBroadcaster
;
nsCOMPtr
<
Element
>
mListener
;
nsString
mAttr
;
RefPtr
<
nsAtom
>
mAttrName
;
bool
mSetAttr
;
bool
mNeedsAttrChange
;
class
Comparator
{
public
:
static
bool
Equals
(
const
nsDelayedBroadcastUpdate
&
a
const
nsDelayedBroadcastUpdate
&
b
)
{
return
a
.
mBroadcaster
=
=
b
.
mBroadcaster
&
&
a
.
mListener
=
=
b
.
mListener
&
&
a
.
mAttrName
=
=
b
.
mAttrName
;
}
}
;
}
;
nsTArray
<
nsDelayedBroadcastUpdate
>
mDelayedBroadcasters
;
nsTArray
<
nsDelayedBroadcastUpdate
>
mDelayedAttrChangeBroadcasts
;
bool
mHandlingDelayedAttrChange
;
bool
mHandlingDelayedBroadcasters
;
private
:
~
XULBroadcastManager
(
)
;
}
;
}
}
#
endif
