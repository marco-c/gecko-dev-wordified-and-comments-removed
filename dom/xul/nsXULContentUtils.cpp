#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCollationCID
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsICollation
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsXULContentUtils
.
h
"
#
include
"
nsLayoutCID
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsGkAtoms
.
h
"
using
namespace
mozilla
;
nsICollation
*
nsXULContentUtils
:
:
gCollation
;
nsresult
nsXULContentUtils
:
:
Finish
(
)
{
NS_IF_RELEASE
(
gCollation
)
;
return
NS_OK
;
}
nsICollation
*
nsXULContentUtils
:
:
GetCollation
(
)
{
if
(
!
gCollation
)
{
nsCOMPtr
<
nsICollationFactory
>
colFactory
=
do_CreateInstance
(
NS_COLLATIONFACTORY_CONTRACTID
)
;
if
(
colFactory
)
{
DebugOnly
<
nsresult
>
rv
=
colFactory
-
>
CreateCollation
(
&
gCollation
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
couldn
'
t
create
collation
instance
"
)
;
}
else
NS_ERROR
(
"
couldn
'
t
create
instance
of
collation
factory
"
)
;
}
return
gCollation
;
}
nsresult
nsXULContentUtils
:
:
FindChildByTag
(
nsIContent
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aTag
Element
*
*
aResult
)
{
for
(
nsIContent
*
child
=
aElement
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
IsElement
(
)
&
&
child
-
>
NodeInfo
(
)
-
>
Equals
(
aTag
aNameSpaceID
)
)
{
NS_ADDREF
(
*
aResult
=
child
-
>
AsElement
(
)
)
;
return
NS_OK
;
}
}
*
aResult
=
nullptr
;
return
NS_RDF_NO_VALUE
;
}
