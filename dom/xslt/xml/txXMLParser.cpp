#
include
"
txXMLParser
.
h
"
#
include
"
txURIUtils
.
h
"
#
include
"
txXPathTreeWalker
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsSyncLoadService
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIURI
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
Result
<
txXPathNode
nsresult
>
txParseDocumentFromURI
(
const
nsAString
&
aHref
const
txXPathNode
&
aLoader
nsAString
&
aErrMsg
)
{
nsCOMPtr
<
nsIURI
>
documentURI
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
documentURI
)
aHref
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
rv
)
)
;
Document
*
loaderDocument
=
txXPathNativeNode
:
:
getDocument
(
aLoader
)
;
nsCOMPtr
<
nsILoadGroup
>
loadGroup
=
loaderDocument
-
>
GetDocumentLoadGroup
(
)
;
nsCOMPtr
<
Document
>
theDocument
;
nsAutoSyncOperation
sync
(
loaderDocument
SyncOperationBehavior
:
:
eSuspendInput
)
;
rv
=
nsSyncLoadService
:
:
LoadDocument
(
documentURI
nsIContentPolicy
:
:
TYPE_INTERNAL_XMLHTTPREQUEST_SYNC
loaderDocument
-
>
NodePrincipal
(
)
nsILoadInfo
:
:
SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT
loadGroup
loaderDocument
-
>
CookieJarSettings
(
)
true
loaderDocument
-
>
GetReferrerPolicy
(
)
getter_AddRefs
(
theDocument
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aErrMsg
.
AppendLiteral
(
"
Document
load
of
"
)
;
aErrMsg
.
Append
(
aHref
)
;
aErrMsg
.
AppendLiteral
(
"
failed
.
"
)
;
return
Err
(
rv
)
;
}
return
txXPathNode
(
theDocument
)
;
}
