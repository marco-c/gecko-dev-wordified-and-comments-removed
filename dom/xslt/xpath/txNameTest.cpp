#
include
"
nsAtom
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
txExpr
.
h
"
#
include
"
txIXPathContext
.
h
"
#
include
"
txXPathTreeWalker
.
h
"
txNameTest
:
:
txNameTest
(
nsAtom
*
aPrefix
nsAtom
*
aLocalName
int32_t
aNSID
uint16_t
aNodeType
)
:
mPrefix
(
aPrefix
)
mLocalName
(
aLocalName
)
mNamespace
(
aNSID
)
mNodeType
(
aNodeType
)
{
if
(
aPrefix
=
=
nsGkAtoms
:
:
_empty
)
mPrefix
=
nullptr
;
NS_ASSERTION
(
aLocalName
"
txNameTest
without
a
local
name
?
"
)
;
NS_ASSERTION
(
aNodeType
=
=
txXPathNodeType
:
:
DOCUMENT_NODE
|
|
aNodeType
=
=
txXPathNodeType
:
:
ELEMENT_NODE
|
|
aNodeType
=
=
txXPathNodeType
:
:
ATTRIBUTE_NODE
"
Go
fix
txNameTest
:
:
matches
"
)
;
}
nsresult
txNameTest
:
:
matches
(
const
txXPathNode
&
aNode
txIMatchContext
*
aContext
bool
&
aMatched
)
{
if
(
(
mNodeType
=
=
txXPathNodeType
:
:
ELEMENT_NODE
&
&
!
txXPathNodeUtils
:
:
isElement
(
aNode
)
)
|
|
(
mNodeType
=
=
txXPathNodeType
:
:
ATTRIBUTE_NODE
&
&
!
txXPathNodeUtils
:
:
isAttribute
(
aNode
)
)
|
|
(
mNodeType
=
=
txXPathNodeType
:
:
DOCUMENT_NODE
&
&
!
txXPathNodeUtils
:
:
isRoot
(
aNode
)
)
)
{
aMatched
=
false
;
return
NS_OK
;
}
if
(
mLocalName
=
=
nsGkAtoms
:
:
_asterisk
&
&
!
mPrefix
)
{
aMatched
=
true
;
return
NS_OK
;
}
if
(
mNamespace
!
=
txXPathNodeUtils
:
:
getNamespaceID
(
aNode
)
&
&
!
(
mNamespace
=
=
kNameSpaceID_None
&
&
txXPathNodeUtils
:
:
isHTMLElementInHTMLDocument
(
aNode
)
)
)
{
aMatched
=
false
;
return
NS_OK
;
}
if
(
mLocalName
=
=
nsGkAtoms
:
:
_asterisk
)
{
aMatched
=
true
;
return
NS_OK
;
}
aMatched
=
txXPathNodeUtils
:
:
localNameEquals
(
aNode
mLocalName
)
;
return
NS_OK
;
}
double
txNameTest
:
:
getDefaultPriority
(
)
{
if
(
mLocalName
=
=
nsGkAtoms
:
:
_asterisk
)
{
if
(
!
mPrefix
)
return
-
0
.
5
;
return
-
0
.
25
;
}
return
0
;
}
txNodeTest
:
:
NodeTestType
txNameTest
:
:
getType
(
)
{
return
NAME_TEST
;
}
bool
txNameTest
:
:
isSensitiveTo
(
Expr
:
:
ContextSensitivity
aContext
)
{
return
!
!
(
aContext
&
Expr
:
:
NODE_CONTEXT
)
;
}
#
ifdef
TX_TO_STRING
void
txNameTest
:
:
toString
(
nsAString
&
aDest
)
{
if
(
mPrefix
)
{
nsAutoString
prefix
;
mPrefix
-
>
ToString
(
prefix
)
;
aDest
.
Append
(
prefix
)
;
aDest
.
Append
(
char16_t
(
'
:
'
)
)
;
}
nsAutoString
localName
;
mLocalName
-
>
ToString
(
localName
)
;
aDest
.
Append
(
localName
)
;
}
#
endif
