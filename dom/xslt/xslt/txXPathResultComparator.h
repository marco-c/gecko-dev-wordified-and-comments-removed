#
ifndef
TRANSFRMX_XPATHRESULTCOMPARATOR_H
#
define
TRANSFRMX_XPATHRESULTCOMPARATOR_H
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
intl
/
Collator
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
txCore
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
class
Expr
;
class
txIEvalContext
;
class
txXPathResultComparator
{
public
:
virtual
~
txXPathResultComparator
(
)
=
default
;
virtual
int
compareValues
(
txObject
*
val1
txObject
*
val2
)
=
0
;
virtual
nsresult
createSortableValue
(
Expr
*
aExpr
txIEvalContext
*
aContext
txObject
*
&
aResult
)
=
0
;
}
;
class
txResultStringComparator
:
public
txXPathResultComparator
{
public
:
txResultStringComparator
(
bool
aAscending
bool
aUpperFirst
const
nsString
&
aLanguage
)
;
int
compareValues
(
txObject
*
aVal1
txObject
*
aVal2
)
override
;
nsresult
createSortableValue
(
Expr
*
aExpr
txIEvalContext
*
aContext
txObject
*
&
aResult
)
override
;
private
:
mozilla
:
:
UniquePtr
<
const
mozilla
:
:
intl
:
:
Collator
>
mCollator
;
nsresult
init
(
const
nsString
&
aLanguage
)
;
int
mSorting
;
class
StringValue
:
public
txObject
{
public
:
StringValue
(
)
;
~
StringValue
(
)
;
nsresult
initCaseKey
(
const
mozilla
:
:
intl
:
:
Collator
&
aCollator
)
;
nsTArray
<
uint8_t
>
mKey
;
mozilla
:
:
UniquePtr
<
nsString
>
mCaseKeyString
;
nsTArray
<
uint8_t
>
mCaseKey
;
}
;
}
;
class
txResultNumberComparator
:
public
txXPathResultComparator
{
public
:
explicit
txResultNumberComparator
(
bool
aAscending
)
;
int
compareValues
(
txObject
*
aVal1
txObject
*
aVal2
)
override
;
nsresult
createSortableValue
(
Expr
*
aExpr
txIEvalContext
*
aContext
txObject
*
&
aResult
)
override
;
private
:
int
mAscending
;
class
NumberValue
:
public
txObject
{
public
:
double
mVal
;
}
;
}
;
#
endif
