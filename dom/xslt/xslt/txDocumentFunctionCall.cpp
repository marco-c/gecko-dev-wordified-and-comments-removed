#
include
"
nsGkAtoms
.
h
"
#
include
"
txExecutionState
.
h
"
#
include
"
txIXPathContext
.
h
"
#
include
"
txURIUtils
.
h
"
#
include
"
txXSLTFunctions
.
h
"
DocumentFunctionCall
:
:
DocumentFunctionCall
(
const
nsAString
&
aBaseURI
)
:
mBaseURI
(
aBaseURI
)
{
}
static
void
retrieveNode
(
txExecutionState
*
aExecutionState
const
nsAString
&
aUri
const
nsAString
&
aBaseUri
txNodeSet
*
aNodeSet
)
{
nsAutoString
absUrl
;
URIUtils
:
:
resolveHref
(
aUri
aBaseUri
absUrl
)
;
int32_t
hash
=
absUrl
.
RFindChar
(
char16_t
(
'
#
'
)
)
;
uint32_t
urlEnd
fragStart
fragEnd
;
if
(
hash
=
=
kNotFound
)
{
urlEnd
=
absUrl
.
Length
(
)
;
fragStart
=
0
;
fragEnd
=
0
;
}
else
{
urlEnd
=
hash
;
fragStart
=
hash
+
1
;
fragEnd
=
absUrl
.
Length
(
)
;
}
nsDependentSubstring
docUrl
(
absUrl
0
urlEnd
)
;
nsDependentSubstring
frag
(
absUrl
fragStart
fragEnd
)
;
const
txXPathNode
*
loadNode
=
aExecutionState
-
>
retrieveDocument
(
docUrl
)
;
if
(
loadNode
)
{
if
(
frag
.
IsEmpty
(
)
)
{
aNodeSet
-
>
add
(
*
loadNode
)
;
}
else
{
txXPathTreeWalker
walker
(
*
loadNode
)
;
if
(
walker
.
moveToElementById
(
frag
)
)
{
aNodeSet
-
>
add
(
walker
.
getCurrentPosition
(
)
)
;
}
}
}
}
nsresult
DocumentFunctionCall
:
:
evaluate
(
txIEvalContext
*
aContext
txAExprResult
*
*
aResult
)
{
*
aResult
=
nullptr
;
txExecutionState
*
es
=
static_cast
<
txExecutionState
*
>
(
aContext
-
>
getPrivateContext
(
)
)
;
RefPtr
<
txNodeSet
>
nodeSet
;
nsresult
rv
=
aContext
-
>
recycler
(
)
-
>
getNodeSet
(
getter_AddRefs
(
nodeSet
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
requireParams
(
1
2
aContext
)
)
{
return
NS_ERROR_XPATH_BAD_ARGUMENT_COUNT
;
}
RefPtr
<
txAExprResult
>
exprResult1
;
rv
=
mParams
[
0
]
-
>
evaluate
(
aContext
getter_AddRefs
(
exprResult1
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
baseURI
;
bool
baseURISet
=
false
;
if
(
mParams
.
Length
(
)
=
=
2
)
{
RefPtr
<
txNodeSet
>
nodeSet2
;
rv
=
evaluateToNodeSet
(
mParams
[
1
]
aContext
getter_AddRefs
(
nodeSet2
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
baseURISet
=
true
;
if
(
!
nodeSet2
-
>
isEmpty
(
)
)
{
rv
=
txXPathNodeUtils
:
:
getBaseURI
(
nodeSet2
-
>
get
(
0
)
baseURI
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
if
(
exprResult1
-
>
getResultType
(
)
=
=
txAExprResult
:
:
NODESET
)
{
txNodeSet
*
nodeSet1
=
static_cast
<
txNodeSet
*
>
(
static_cast
<
txAExprResult
*
>
(
exprResult1
)
)
;
int32_t
i
;
for
(
i
=
0
;
i
<
nodeSet1
-
>
size
(
)
;
+
+
i
)
{
const
txXPathNode
&
node
=
nodeSet1
-
>
get
(
i
)
;
nsAutoString
uriStr
;
txXPathNodeUtils
:
:
appendNodeValue
(
node
uriStr
)
;
if
(
!
baseURISet
)
{
rv
=
txXPathNodeUtils
:
:
getBaseURI
(
node
baseURI
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
retrieveNode
(
es
uriStr
baseURI
nodeSet
)
;
}
NS_ADDREF
(
*
aResult
=
nodeSet
)
;
return
NS_OK
;
}
nsAutoString
uriStr
;
exprResult1
-
>
stringValue
(
uriStr
)
;
const
nsAString
*
base
=
baseURISet
?
&
baseURI
:
&
mBaseURI
;
retrieveNode
(
es
uriStr
*
base
nodeSet
)
;
NS_ADDREF
(
*
aResult
=
nodeSet
)
;
return
NS_OK
;
}
Expr
:
:
ResultType
DocumentFunctionCall
:
:
getReturnType
(
)
{
return
NODESET_RESULT
;
}
bool
DocumentFunctionCall
:
:
isSensitiveTo
(
ContextSensitivity
aContext
)
{
return
(
aContext
&
PRIVATE_CONTEXT
)
|
|
argsSensitiveTo
(
aContext
)
;
}
#
ifdef
TX_TO_STRING
void
DocumentFunctionCall
:
:
appendName
(
nsAString
&
aDest
)
{
aDest
.
Append
(
nsGkAtoms
:
:
document
-
>
GetUTF16String
(
)
)
;
}
#
endif
