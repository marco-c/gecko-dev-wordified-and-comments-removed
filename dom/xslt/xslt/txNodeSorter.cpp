#
include
"
txNodeSorter
.
h
"
#
include
"
txExecutionState
.
h
"
#
include
"
txXPathResultComparator
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
txNodeSetContext
.
h
"
#
include
"
txExpr
.
h
"
#
include
"
txStringUtils
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
using
mozilla
:
:
CheckedUint32
;
using
mozilla
:
:
MakeUnique
;
using
mozilla
:
:
MakeUniqueFallible
;
using
mozilla
:
:
UniquePtr
;
txNodeSorter
:
:
txNodeSorter
(
)
:
mNKeys
(
0
)
{
}
txNodeSorter
:
:
~
txNodeSorter
(
)
{
txListIterator
iter
(
&
mSortKeys
)
;
while
(
iter
.
hasNext
(
)
)
{
SortKey
*
key
=
(
SortKey
*
)
iter
.
next
(
)
;
delete
key
-
>
mComparator
;
delete
key
;
}
}
nsresult
txNodeSorter
:
:
addSortElement
(
Expr
*
aSelectExpr
Expr
*
aLangExpr
Expr
*
aDataTypeExpr
Expr
*
aOrderExpr
Expr
*
aCaseOrderExpr
txIEvalContext
*
aContext
)
{
UniquePtr
<
SortKey
>
key
(
new
SortKey
)
;
nsresult
rv
=
NS_OK
;
key
-
>
mExpr
=
aSelectExpr
;
bool
ascending
=
true
;
if
(
aOrderExpr
)
{
nsAutoString
attrValue
;
rv
=
aOrderExpr
-
>
evaluateToString
(
aContext
attrValue
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
TX_StringEqualsAtom
(
attrValue
nsGkAtoms
:
:
descending
)
)
{
ascending
=
false
;
}
else
if
(
!
TX_StringEqualsAtom
(
attrValue
nsGkAtoms
:
:
ascending
)
)
{
return
NS_ERROR_XSLT_BAD_VALUE
;
}
}
nsAutoString
dataType
;
if
(
aDataTypeExpr
)
{
rv
=
aDataTypeExpr
-
>
evaluateToString
(
aContext
dataType
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
aDataTypeExpr
|
|
TX_StringEqualsAtom
(
dataType
nsGkAtoms
:
:
text
)
)
{
nsAutoString
lang
;
if
(
aLangExpr
)
{
rv
=
aLangExpr
-
>
evaluateToString
(
aContext
lang
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
bool
upperFirst
=
false
;
if
(
aCaseOrderExpr
)
{
nsAutoString
attrValue
;
rv
=
aCaseOrderExpr
-
>
evaluateToString
(
aContext
attrValue
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
TX_StringEqualsAtom
(
attrValue
nsGkAtoms
:
:
upperFirst
)
)
{
upperFirst
=
true
;
}
else
if
(
!
TX_StringEqualsAtom
(
attrValue
nsGkAtoms
:
:
lowerFirst
)
)
{
return
NS_ERROR_XSLT_BAD_VALUE
;
}
}
key
-
>
mComparator
=
new
txResultStringComparator
(
ascending
upperFirst
lang
)
;
}
else
if
(
TX_StringEqualsAtom
(
dataType
nsGkAtoms
:
:
number
)
)
{
key
-
>
mComparator
=
new
txResultNumberComparator
(
ascending
)
;
}
else
{
return
NS_ERROR_XSLT_BAD_VALUE
;
}
mSortKeys
.
add
(
key
.
release
(
)
)
;
mNKeys
+
+
;
return
NS_OK
;
}
nsresult
txNodeSorter
:
:
sortNodeSet
(
txNodeSet
*
aNodes
txExecutionState
*
aEs
txNodeSet
*
*
aResult
)
{
if
(
mNKeys
=
=
0
|
|
aNodes
-
>
isEmpty
(
)
)
{
RefPtr
<
txNodeSet
>
ref
(
aNodes
)
;
ref
.
forget
(
aResult
)
;
return
NS_OK
;
}
*
aResult
=
nullptr
;
RefPtr
<
txNodeSet
>
sortedNodes
;
nsresult
rv
=
aEs
-
>
recycler
(
)
-
>
getNodeSet
(
getter_AddRefs
(
sortedNodes
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
CheckedUint32
len
=
aNodes
-
>
size
(
)
;
CheckedUint32
numSortValues
=
len
*
mNKeys
;
CheckedUint32
sortValuesSize
=
numSortValues
*
sizeof
(
txObject
*
)
;
if
(
!
sortValuesSize
.
isValid
(
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
nsTArray
<
uint32_t
>
indexes
(
len
.
value
(
)
)
;
indexes
.
SetLengthAndRetainStorage
(
len
.
value
(
)
)
;
nsTArray
<
txObject
*
>
sortValues
(
numSortValues
.
value
(
)
)
;
sortValues
.
SetLengthAndRetainStorage
(
numSortValues
.
value
(
)
)
;
memset
(
sortValues
.
Elements
(
)
0
sortValuesSize
.
value
(
)
)
;
uint32_t
i
;
for
(
i
=
0
;
i
<
len
.
value
(
)
;
+
+
i
)
{
indexes
[
i
]
=
i
;
}
auto
nodeSetContext
=
MakeUnique
<
txNodeSetContext
>
(
aNodes
aEs
)
;
SortData
sortData
{
}
;
sortData
.
mNodeSorter
=
this
;
sortData
.
mContext
=
nodeSetContext
.
get
(
)
;
sortData
.
mSortValues
=
sortValues
.
Elements
(
)
;
sortData
.
mRv
=
NS_OK
;
aEs
-
>
pushEvalContext
(
nodeSetContext
.
release
(
)
)
;
indexes
.
StableSort
(
[
&
sortData
]
(
uint32_t
left
uint32_t
right
)
{
return
compareNodes
(
left
right
sortData
)
;
}
)
;
for
(
i
=
0
;
i
<
numSortValues
.
value
(
)
;
+
+
i
)
{
delete
sortValues
[
i
]
;
}
if
(
NS_FAILED
(
sortData
.
mRv
)
)
{
return
sortData
.
mRv
;
}
for
(
i
=
0
;
i
<
len
.
value
(
)
;
+
+
i
)
{
rv
=
sortedNodes
-
>
append
(
aNodes
-
>
get
(
indexes
[
i
]
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
delete
aEs
-
>
popEvalContext
(
)
;
sortedNodes
.
forget
(
aResult
)
;
return
NS_OK
;
}
int
txNodeSorter
:
:
compareNodes
(
uint32_t
aIndexA
uint32_t
aIndexB
SortData
&
aSortData
)
{
NS_ENSURE_SUCCESS
(
aSortData
.
mRv
-
1
)
;
txListIterator
iter
(
&
aSortData
.
mNodeSorter
-
>
mSortKeys
)
;
txObject
*
*
sortValuesA
=
aSortData
.
mSortValues
+
aIndexA
*
aSortData
.
mNodeSorter
-
>
mNKeys
;
txObject
*
*
sortValuesB
=
aSortData
.
mSortValues
+
aIndexB
*
aSortData
.
mNodeSorter
-
>
mNKeys
;
unsigned
int
i
;
for
(
i
=
0
;
i
<
aSortData
.
mNodeSorter
-
>
mNKeys
;
+
+
i
)
{
SortKey
*
key
=
(
SortKey
*
)
iter
.
next
(
)
;
if
(
!
sortValuesA
[
i
]
&
&
!
calcSortValue
(
sortValuesA
[
i
]
key
&
aSortData
aIndexA
)
)
{
return
-
1
;
}
if
(
!
sortValuesB
[
i
]
&
&
!
calcSortValue
(
sortValuesB
[
i
]
key
&
aSortData
aIndexB
)
)
{
return
1
;
}
int
compRes
=
key
-
>
mComparator
-
>
compareValues
(
sortValuesA
[
i
]
sortValuesB
[
i
]
)
;
if
(
compRes
!
=
0
)
return
compRes
;
}
return
0
;
}
bool
txNodeSorter
:
:
calcSortValue
(
txObject
*
&
aSortValue
SortKey
*
aKey
SortData
*
aSortData
uint32_t
aNodeIndex
)
{
aSortData
-
>
mContext
-
>
setPosition
(
aNodeIndex
+
1
)
;
nsresult
rv
=
aKey
-
>
mComparator
-
>
createSortableValue
(
aKey
-
>
mExpr
aSortData
-
>
mContext
aSortValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
aSortData
-
>
mRv
=
rv
;
return
false
;
}
return
true
;
}
