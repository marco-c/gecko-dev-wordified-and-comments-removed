#
ifndef
TRANSFRMX_MOZILLA_XML_OUTPUT_H
#
define
TRANSFRMX_MOZILLA_XML_OUTPUT_H
#
include
"
txXMLEventHandler
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIScriptLoaderObserver
.
h
"
#
include
"
txOutputFormat
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
txStack
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
class
nsIContent
;
class
nsAtom
;
class
nsITransformObserver
;
class
nsNodeInfoManager
;
class
nsINode
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
DocumentFragment
;
}
}
class
txTransformNotifier
final
:
public
nsIScriptLoaderObserver
public
nsICSSLoaderObserver
{
public
:
txTransformNotifier
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISCRIPTLOADEROBSERVER
NS_IMETHOD
StyleSheetLoaded
(
mozilla
:
:
StyleSheet
*
aSheet
bool
aWasDeferred
nsresult
aStatus
)
override
;
void
Init
(
nsITransformObserver
*
aObserver
)
;
nsresult
AddScriptElement
(
nsIScriptElement
*
aElement
)
;
void
AddPendingStylesheet
(
)
;
void
OnTransformEnd
(
nsresult
aResult
=
NS_OK
)
;
void
OnTransformStart
(
)
;
nsresult
SetOutputDocument
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
private
:
~
txTransformNotifier
(
)
;
void
SignalTransformEnd
(
nsresult
aResult
=
NS_OK
)
;
nsCOMPtr
<
mozilla
:
:
dom
:
:
Document
>
mDocument
;
nsCOMPtr
<
nsITransformObserver
>
mObserver
;
nsCOMArray
<
nsIScriptElement
>
mScriptElements
;
uint32_t
mPendingStylesheetCount
;
bool
mInTransform
;
}
;
class
txMozillaXMLOutput
:
public
txAOutputXMLEventHandler
{
public
:
txMozillaXMLOutput
(
txOutputFormat
*
aFormat
nsITransformObserver
*
aObserver
)
;
txMozillaXMLOutput
(
txOutputFormat
*
aFormat
mozilla
:
:
dom
:
:
DocumentFragment
*
aFragment
bool
aNoFixup
)
;
~
txMozillaXMLOutput
(
)
;
TX_DECL_TXAXMLEVENTHANDLER
TX_DECL_TXAOUTPUTXMLEVENTHANDLER
nsresult
closePrevious
(
bool
aFlushText
)
;
nsresult
createResultDocument
(
const
nsAString
&
aName
int32_t
aNsID
mozilla
:
:
dom
:
:
Document
*
aSourceDocument
bool
aLoadedAsData
)
;
private
:
nsresult
createTxWrapper
(
)
;
nsresult
startHTMLElement
(
nsIContent
*
aElement
bool
aXHTML
)
;
nsresult
endHTMLElement
(
nsIContent
*
aElement
)
;
void
processHTTPEquiv
(
nsAtom
*
aHeader
const
nsString
&
aValue
)
;
nsresult
createHTMLElement
(
nsAtom
*
aName
mozilla
:
:
dom
:
:
Element
*
*
aResult
)
;
nsresult
attributeInternal
(
nsAtom
*
aPrefix
nsAtom
*
aLocalName
int32_t
aNsID
const
nsString
&
aValue
)
;
nsresult
startElementInternal
(
nsAtom
*
aPrefix
nsAtom
*
aLocalName
int32_t
aNsID
)
;
RefPtr
<
mozilla
:
:
dom
:
:
Document
>
mDocument
;
nsCOMPtr
<
nsINode
>
mCurrentNode
;
nsCOMPtr
<
mozilla
:
:
dom
:
:
Element
>
mOpenedElement
;
RefPtr
<
nsNodeInfoManager
>
mNodeInfoManager
;
nsCOMArray
<
nsINode
>
mCurrentNodeStack
;
nsCOMPtr
<
nsIContent
>
mNonAddedNode
;
RefPtr
<
txTransformNotifier
>
mNotifier
;
uint32_t
mTreeDepth
mBadChildLevel
;
nsCString
mRefreshString
;
txStack
mTableStateStack
;
enum
TableState
{
NORMAL
TABLE
ADDED_TBODY
}
;
TableState
mTableState
;
nsAutoString
mText
;
txOutputFormat
mOutputFormat
;
bool
mCreatingNewDocument
;
bool
mOpenedElementIsHTML
;
bool
mRootContentCreated
;
bool
mNoFixup
;
enum
txAction
{
eCloseElement
=
1
eFlushText
=
2
}
;
}
;
#
endif
