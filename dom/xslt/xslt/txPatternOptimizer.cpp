#
include
"
txPatternOptimizer
.
h
"
#
include
"
txXSLTPatterns
.
h
"
void
txPatternOptimizer
:
:
optimize
(
txPattern
*
aInPattern
txPattern
*
*
aOutPattern
)
{
*
aOutPattern
=
nullptr
;
uint32_t
i
=
0
;
Expr
*
subExpr
;
while
(
(
subExpr
=
aInPattern
-
>
getSubExprAt
(
i
)
)
)
{
Expr
*
newExpr
=
nullptr
;
mXPathOptimizer
.
optimize
(
subExpr
&
newExpr
)
;
if
(
newExpr
)
{
delete
subExpr
;
aInPattern
-
>
setSubExprAt
(
i
newExpr
)
;
}
+
+
i
;
}
txPattern
*
subPattern
;
i
=
0
;
while
(
(
subPattern
=
aInPattern
-
>
getSubPatternAt
(
i
)
)
)
{
txPattern
*
newPattern
=
nullptr
;
optimize
(
subPattern
&
newPattern
)
;
if
(
newPattern
)
{
delete
subPattern
;
aInPattern
-
>
setSubPatternAt
(
i
newPattern
)
;
}
+
+
i
;
}
switch
(
aInPattern
-
>
getType
(
)
)
{
case
txPattern
:
:
STEP_PATTERN
:
optimizeStep
(
aInPattern
aOutPattern
)
;
return
;
default
:
break
;
}
}
void
txPatternOptimizer
:
:
optimizeStep
(
txPattern
*
aInPattern
txPattern
*
*
aOutPattern
)
{
txStepPattern
*
step
=
static_cast
<
txStepPattern
*
>
(
aInPattern
)
;
Expr
*
pred
;
while
(
(
pred
=
step
-
>
getSubExprAt
(
0
)
)
&
&
!
pred
-
>
canReturnType
(
Expr
:
:
NUMBER_RESULT
)
&
&
!
pred
-
>
isSensitiveTo
(
Expr
:
:
NODESET_CONTEXT
)
)
{
txNodeTest
*
predTest
=
new
txPredicatedNodeTest
(
step
-
>
getNodeTest
(
)
pred
)
;
step
-
>
dropFirst
(
)
;
step
-
>
setNodeTest
(
predTest
)
;
}
}
