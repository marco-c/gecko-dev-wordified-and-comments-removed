#
include
"
txURIUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPContext
.
h
"
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
net
:
:
LoadInfo
;
void
URIUtils
:
:
resolveHref
(
const
nsAString
&
href
const
nsAString
&
base
nsAString
&
dest
)
{
if
(
base
.
IsEmpty
(
)
)
{
dest
.
Append
(
href
)
;
return
;
}
if
(
href
.
IsEmpty
(
)
)
{
dest
.
Append
(
base
)
;
return
;
}
nsCOMPtr
<
nsIURI
>
pURL
;
nsAutoString
resultHref
;
nsresult
result
=
NS_NewURI
(
getter_AddRefs
(
pURL
)
base
)
;
if
(
NS_SUCCEEDED
(
result
)
)
{
NS_MakeAbsoluteURI
(
resultHref
href
pURL
)
;
dest
.
Append
(
resultHref
)
;
}
}
void
URIUtils
:
:
ResetWithSource
(
Document
*
aNewDoc
nsINode
*
aSourceNode
)
{
nsCOMPtr
<
Document
>
sourceDoc
=
aSourceNode
-
>
OwnerDoc
(
)
;
nsIPrincipal
*
sourcePrincipal
=
sourceDoc
-
>
NodePrincipal
(
)
;
nsIPrincipal
*
sourcePartitionedPrincipal
=
sourceDoc
-
>
PartitionedPrincipal
(
)
;
nsCOMPtr
<
nsILoadGroup
>
loadGroup
=
sourceDoc
-
>
GetDocumentLoadGroup
(
)
;
nsCOMPtr
<
nsIChannel
>
channel
=
sourceDoc
-
>
GetChannel
(
)
;
if
(
!
channel
)
{
nsresult
rv
=
NS_NewChannel
(
getter_AddRefs
(
channel
)
sourceDoc
-
>
GetDocumentURI
(
)
sourceDoc
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
nsIContentPolicy
:
:
TYPE_OTHER
nullptr
loadGroup
nullptr
nsIChannel
:
:
LOAD_BYPASS_SERVICE_WORKER
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
aNewDoc
-
>
Reset
(
channel
loadGroup
)
;
aNewDoc
-
>
SetPrincipals
(
sourcePrincipal
sourcePartitionedPrincipal
)
;
aNewDoc
-
>
SetBaseURI
(
sourceDoc
-
>
GetDocBaseURI
(
)
)
;
aNewDoc
-
>
SetSandboxFlags
(
sourceDoc
-
>
GetSandboxFlags
(
)
)
;
aNewDoc
-
>
SetReferrerInfo
(
sourceDoc
-
>
GetReferrerInfo
(
)
)
;
aNewDoc
-
>
SetEmbedderPolicy
(
sourceDoc
-
>
GetEmbedderPolicy
(
)
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
sourceDoc
-
>
GetCsp
(
)
;
if
(
csp
)
{
RefPtr
<
nsCSPContext
>
cspToInherit
=
new
nsCSPContext
(
)
;
cspToInherit
-
>
InitFromOther
(
static_cast
<
nsCSPContext
*
>
(
csp
.
get
(
)
)
)
;
aNewDoc
-
>
SetCsp
(
cspToInherit
)
;
}
aNewDoc
-
>
SetDocumentCharacterSetSource
(
sourceDoc
-
>
GetDocumentCharacterSetSource
(
)
)
;
aNewDoc
-
>
SetDocumentCharacterSet
(
sourceDoc
-
>
GetDocumentCharacterSet
(
)
)
;
}
