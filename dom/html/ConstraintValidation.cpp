#
include
"
ConstraintValidation
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsAString
.
h
"
namespace
mozilla
:
:
dom
{
void
ConstraintValidation
:
:
GetValidationMessage
(
nsAString
&
aValidationMessage
ErrorResult
&
aError
)
{
aValidationMessage
.
Truncate
(
)
;
if
(
IsCandidateForConstraintValidation
(
)
&
&
!
IsValid
(
)
)
{
if
(
GetValidityState
(
VALIDITY_STATE_CUSTOM_ERROR
)
)
{
aValidationMessage
.
Assign
(
mCustomValidity
)
;
if
(
aValidationMessage
.
Length
(
)
>
sContentSpecifiedMaxLengthMessage
)
{
aValidationMessage
.
Truncate
(
sContentSpecifiedMaxLengthMessage
)
;
}
}
else
if
(
GetValidityState
(
VALIDITY_STATE_TOO_LONG
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_TOO_LONG
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_TOO_SHORT
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_TOO_SHORT
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_VALUE_MISSING
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_VALUE_MISSING
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_TYPE_MISMATCH
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_TYPE_MISMATCH
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_PATTERN_MISMATCH
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_PATTERN_MISMATCH
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_RANGE_OVERFLOW
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_RANGE_OVERFLOW
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_RANGE_UNDERFLOW
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_RANGE_UNDERFLOW
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_STEP_MISMATCH
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_STEP_MISMATCH
)
;
}
else
if
(
GetValidityState
(
VALIDITY_STATE_BAD_INPUT
)
)
{
GetValidationMessage
(
aValidationMessage
VALIDITY_STATE_BAD_INPUT
)
;
}
else
{
aError
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
}
else
{
aValidationMessage
.
Truncate
(
)
;
}
}
ConstraintValidation
:
:
ConstraintValidation
(
)
:
nsIConstraintValidation
(
)
{
}
void
ConstraintValidation
:
:
SetCustomValidity
(
const
nsAString
&
aError
)
{
mCustomValidity
.
Assign
(
aError
)
;
SetValidityState
(
VALIDITY_STATE_CUSTOM_ERROR
!
mCustomValidity
.
IsEmpty
(
)
)
;
}
}
