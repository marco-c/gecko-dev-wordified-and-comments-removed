#
include
"
mozilla
/
AutoplayPermissionManager
.
h
"
#
include
"
mozilla
/
AutoplayPermissionRequest
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsContentPermissionHelper
.
h
"
extern
mozilla
:
:
LazyLogModule
gAutoplayPermissionLog
;
#
define
PLAY_REQUEST_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gAutoplayPermissionLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
RefPtr
<
GenericNonExclusivePromise
>
AutoplayPermissionManager
:
:
RequestWithPrompt
(
)
{
if
(
mRequestDispatched
)
{
PLAY_REQUEST_LOG
(
"
AutoplayPermissionManager
%
p
RequestWithPrompt
(
)
request
"
"
already
dispatched
"
this
)
;
return
mPromiseHolder
.
Ensure
(
__func__
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryReferent
(
mWindow
)
;
if
(
!
window
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_NOT_ALLOWED_ERR
__func__
)
;
}
RefPtr
<
AutoplayPermissionRequest
>
request
=
AutoplayPermissionRequest
:
:
Create
(
nsGlobalWindowInner
:
:
Cast
(
window
)
this
)
;
if
(
!
request
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_NOT_ALLOWED_ERR
__func__
)
;
}
request
-
>
RequestDelayedTask
(
window
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
AutoplayPermissionRequest
:
:
DelayedTaskType
:
:
Request
)
;
mRequestDispatched
=
true
;
return
mPromiseHolder
.
Ensure
(
__func__
)
;
}
AutoplayPermissionManager
:
:
AutoplayPermissionManager
(
nsGlobalWindowInner
*
aWindow
)
:
mWindow
(
do_GetWeakReference
(
aWindow
)
)
{
PLAY_REQUEST_LOG
(
"
AutoplayPermissionManager
%
p
Create
(
)
"
this
)
;
}
AutoplayPermissionManager
:
:
~
AutoplayPermissionManager
(
)
{
MOZ_ASSERT
(
!
mRequestDispatched
)
;
}
void
AutoplayPermissionManager
:
:
DenyPlayRequestIfExists
(
)
{
if
(
mRequestDispatched
)
{
PLAY_REQUEST_LOG
(
"
AutoplayPermissionManager
%
p
DenyPlayRequest
(
)
"
this
)
;
mRequestDispatched
=
false
;
mPromiseHolder
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_NOT_ALLOWED_ERR
__func__
)
;
}
}
void
AutoplayPermissionManager
:
:
ApprovePlayRequestIfExists
(
)
{
if
(
mRequestDispatched
)
{
PLAY_REQUEST_LOG
(
"
AutoplayPermissionManager
%
p
ApprovePlayRequest
(
)
"
this
)
;
mRequestDispatched
=
false
;
mPromiseHolder
.
ResolveIfExists
(
true
__func__
)
;
}
}
}
