#
ifndef
mozilla_dom_HTMLStyleElement_h
#
define
mozilla_dom_HTMLStyleElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIDOMHTMLStyleElement
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsStyleLinkElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
HTMLStyleElement
final
:
public
nsGenericHTMLElement
public
nsIDOMHTMLStyleElement
public
nsStyleLinkElement
public
nsStubMutationObserver
{
public
:
explicit
HTMLStyleElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLStyleElement
nsGenericHTMLElement
)
NS_IMETHOD
GetInnerHTML
(
nsAString
&
aInnerHTML
)
override
;
using
nsGenericHTMLElement
:
:
SetInnerHTML
;
virtual
void
SetInnerHTML
(
const
nsAString
&
aInnerHTML
mozilla
:
:
ErrorResult
&
aError
)
override
;
NS_DECL_NSIDOMHTMLSTYLEELEMENT
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsIAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
bool
aNotify
)
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
bool
Disabled
(
)
;
void
SetDisabled
(
bool
aDisabled
)
;
void
SetMedia
(
const
nsAString
&
aMedia
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
media
aMedia
aError
)
;
}
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aType
aError
)
;
}
bool
Scoped
(
)
{
return
GetBoolAttr
(
nsGkAtoms
:
:
scoped
)
;
}
void
SetScoped
(
bool
aScoped
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
scoped
aScoped
aError
)
;
}
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
HTMLStyleElement
(
)
;
already_AddRefed
<
nsIURI
>
GetStyleSheetURL
(
bool
*
aIsInline
)
override
;
void
GetStyleSheetInfo
(
nsAString
&
aTitle
nsAString
&
aType
nsAString
&
aMedia
bool
*
aIsScoped
bool
*
aIsAlternate
)
override
;
void
ContentChanged
(
nsIContent
*
aContent
)
;
}
;
}
}
#
endif
