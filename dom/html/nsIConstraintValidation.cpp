#
include
"
nsIConstraintValidation
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFieldSetElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
mozilla
/
dom
/
ValidityState
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsContentUtils
.
h
"
const
uint16_t
nsIConstraintValidation
:
:
sContentSpecifiedMaxLengthMessage
=
256
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsIConstraintValidation
:
:
nsIConstraintValidation
(
)
:
mValidityBitField
(
0
)
mBarredFromConstraintValidation
(
false
)
{
}
nsIConstraintValidation
:
:
~
nsIConstraintValidation
(
)
=
default
;
mozilla
:
:
dom
:
:
ValidityState
*
nsIConstraintValidation
:
:
Validity
(
)
{
if
(
!
mValidity
)
{
mValidity
=
new
mozilla
:
:
dom
:
:
ValidityState
(
this
)
;
}
return
mValidity
;
}
bool
nsIConstraintValidation
:
:
CheckValidity
(
nsIContent
&
aEventTarget
bool
*
aEventDefaultAction
)
const
{
if
(
!
IsCandidateForConstraintValidation
(
)
|
|
IsValid
(
)
)
{
return
true
;
}
nsContentUtils
:
:
DispatchTrustedEvent
(
aEventTarget
.
OwnerDoc
(
)
&
aEventTarget
u
"
invalid
"
_ns
CanBubble
:
:
eNo
Cancelable
:
:
eYes
Composed
:
:
eDefault
aEventDefaultAction
)
;
return
false
;
}
bool
nsIConstraintValidation
:
:
ReportValidity
(
)
{
nsCOMPtr
<
Element
>
element
=
do_QueryInterface
(
this
)
;
MOZ_ASSERT
(
element
"
This
class
should
be
inherited
by
HTML
elements
only
!
"
)
;
bool
defaultAction
=
true
;
if
(
CheckValidity
(
*
element
&
defaultAction
)
)
{
return
true
;
}
if
(
!
defaultAction
)
{
return
false
;
}
AutoTArray
<
RefPtr
<
Element
>
1
>
invalidElements
;
invalidElements
.
AppendElement
(
element
)
;
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
element
-
>
GetOwnerGlobal
(
)
)
)
{
return
false
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
detail
(
jsapi
.
cx
(
)
)
;
if
(
!
ToJSValue
(
jsapi
.
cx
(
)
invalidElements
&
detail
)
)
{
return
false
;
}
RefPtr
<
CustomEvent
>
event
=
NS_NewDOMCustomEvent
(
element
-
>
OwnerDoc
(
)
nullptr
nullptr
)
;
event
-
>
InitCustomEvent
(
jsapi
.
cx
(
)
u
"
MozInvalidForm
"
_ns
true
true
detail
)
;
event
-
>
SetTrusted
(
true
)
;
event
-
>
WidgetEventPtr
(
)
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
element
-
>
DispatchEvent
(
*
event
)
;
auto
*
inputElement
=
HTMLInputElement
:
:
FromNode
(
element
)
;
if
(
inputElement
&
&
inputElement
-
>
State
(
)
.
HasState
(
ElementState
:
:
FOCUS
)
)
{
inputElement
-
>
UpdateValidityUIBits
(
true
)
;
}
element
-
>
UpdateState
(
true
)
;
return
false
;
}
void
nsIConstraintValidation
:
:
SetValidityState
(
ValidityStateType
aState
bool
aValue
)
{
bool
previousValidity
=
IsValid
(
)
;
if
(
aValue
)
{
mValidityBitField
|
=
aState
;
}
else
{
mValidityBitField
&
=
~
aState
;
}
if
(
previousValidity
!
=
IsValid
(
)
&
&
IsCandidateForConstraintValidation
(
)
)
{
nsCOMPtr
<
nsIFormControl
>
formCtrl
=
do_QueryInterface
(
this
)
;
NS_ASSERTION
(
formCtrl
"
This
interface
should
be
used
by
form
elements
!
"
)
;
if
(
HTMLFormElement
*
form
=
formCtrl
-
>
GetForm
(
)
)
{
form
-
>
UpdateValidity
(
IsValid
(
)
)
;
}
HTMLFieldSetElement
*
fieldSet
=
formCtrl
-
>
GetFieldSet
(
)
;
if
(
fieldSet
)
{
fieldSet
-
>
UpdateValidity
(
IsValid
(
)
)
;
}
}
}
void
nsIConstraintValidation
:
:
SetBarredFromConstraintValidation
(
bool
aBarred
)
{
bool
previousBarred
=
mBarredFromConstraintValidation
;
mBarredFromConstraintValidation
=
aBarred
;
if
(
!
IsValid
(
)
&
&
previousBarred
!
=
mBarredFromConstraintValidation
)
{
nsCOMPtr
<
nsIFormControl
>
formCtrl
=
do_QueryInterface
(
this
)
;
NS_ASSERTION
(
formCtrl
"
This
interface
should
be
used
by
form
elements
!
"
)
;
if
(
HTMLFormElement
*
form
=
formCtrl
-
>
GetForm
(
)
)
{
form
-
>
UpdateValidity
(
aBarred
)
;
}
HTMLFieldSetElement
*
fieldSet
=
formCtrl
-
>
GetFieldSet
(
)
;
if
(
fieldSet
)
{
fieldSet
-
>
UpdateValidity
(
aBarred
)
;
}
}
}
