#
include
"
mozilla
/
dom
/
HTMLDetailsElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDetailsElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
HTMLUnknownElement
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
nsGenericHTMLElement
*
NS_NewHTMLDetailsElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
{
if
(
!
mozilla
:
:
dom
:
:
HTMLDetailsElement
:
:
IsDetailsEnabled
(
)
)
{
return
new
mozilla
:
:
dom
:
:
HTMLUnknownElement
(
aNodeInfo
)
;
}
return
new
mozilla
:
:
dom
:
:
HTMLDetailsElement
(
aNodeInfo
)
;
}
namespace
mozilla
{
namespace
dom
{
bool
HTMLDetailsElement
:
:
IsDetailsEnabled
(
)
{
static
bool
isDetailsEnabled
=
false
;
static
bool
added
=
false
;
if
(
!
added
)
{
Preferences
:
:
AddBoolVarCache
(
&
isDetailsEnabled
"
dom
.
details_element
.
enabled
"
)
;
added
=
true
;
}
return
isDetailsEnabled
;
}
HTMLDetailsElement
:
:
~
HTMLDetailsElement
(
)
{
}
NS_IMPL_ELEMENT_CLONE
(
HTMLDetailsElement
)
nsIContent
*
HTMLDetailsElement
:
:
GetFirstSummary
(
)
const
{
for
(
nsIContent
*
child
=
nsINode
:
:
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
summary
)
)
{
return
child
;
}
}
return
nullptr
;
}
nsChangeHint
HTMLDetailsElement
:
:
GetAttributeChangeHint
(
const
nsIAtom
*
aAttribute
int32_t
aModType
)
const
{
nsChangeHint
hint
=
nsGenericHTMLElement
:
:
GetAttributeChangeHint
(
aAttribute
aModType
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
open
)
{
NS_UpdateHint
(
hint
nsChangeHint_ReconstructFrame
)
;
}
return
hint
;
}
JSObject
*
HTMLDetailsElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLDetailsElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
