#
include
"
mozilla
/
dom
/
HTMLIFrameElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLIFrameElementBinding
.
h
"
#
include
"
mozilla
/
GenericSpecifiedValuesInlines
.
h
"
#
include
"
nsMappedAttributes
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsSandboxFlags
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER
(
IFrame
)
namespace
mozilla
{
namespace
dom
{
const
DOMTokenListSupportedToken
HTMLIFrameElement
:
:
sSupportedSandboxTokens
[
]
=
{
#
define
SANDBOX_KEYWORD
(
string
atom
flags
)
string
#
include
"
IframeSandboxKeywordList
.
h
"
#
undef
SANDBOX_KEYWORD
nullptr
}
;
HTMLIFrameElement
:
:
HTMLIFrameElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
FromParser
aFromParser
)
:
nsGenericHTMLFrameElement
(
aNodeInfo
aFromParser
)
{
}
HTMLIFrameElement
:
:
~
HTMLIFrameElement
(
)
{
}
NS_IMPL_ISUPPORTS_INHERITED
(
HTMLIFrameElement
nsGenericHTMLFrameElement
nsIDOMHTMLIFrameElement
)
NS_IMPL_ELEMENT_CLONE
(
HTMLIFrameElement
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Align
align
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
FrameBorder
frameborder
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Height
height
)
NS_IMPL_URI_ATTR
(
HTMLIFrameElement
LongDesc
longdesc
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
MarginHeight
marginheight
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
MarginWidth
marginwidth
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Name
name
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Scrolling
scrolling
)
NS_IMPL_URI_ATTR
(
HTMLIFrameElement
Src
src
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Width
width
)
NS_IMPL_BOOL_ATTR
(
HTMLIFrameElement
AllowFullscreen
allowfullscreen
)
NS_IMPL_STRING_ATTR
(
HTMLIFrameElement
Srcdoc
srcdoc
)
NS_IMETHODIMP
HTMLIFrameElement
:
:
GetContentDocument
(
nsIDOMDocument
*
*
aContentDocument
)
{
return
nsGenericHTMLFrameElement
:
:
GetContentDocument
(
aContentDocument
)
;
}
bool
HTMLIFrameElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsIAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
marginwidth
)
{
return
aResult
.
ParseSpecialIntValue
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
marginheight
)
{
return
aResult
.
ParseSpecialIntValue
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
)
{
return
aResult
.
ParseSpecialIntValue
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
height
)
{
return
aResult
.
ParseSpecialIntValue
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
frameborder
)
{
return
ParseFrameborderValue
(
aValue
aResult
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
scrolling
)
{
return
ParseScrollingValue
(
aValue
aResult
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
align
)
{
return
ParseAlignValue
(
aValue
aResult
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
sandbox
)
{
aResult
.
ParseAtomArray
(
aValue
)
;
return
true
;
}
}
return
nsGenericHTMLFrameElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aResult
)
;
}
void
HTMLIFrameElement
:
:
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
GenericSpecifiedValues
*
aData
)
{
if
(
aData
-
>
ShouldComputeStyleStruct
(
NS_STYLE_INHERIT_BIT
(
Border
)
)
)
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
frameborder
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eEnum
)
{
int32_t
frameborder
=
value
-
>
GetEnumValue
(
)
;
if
(
NS_STYLE_FRAME_0
=
=
frameborder
|
|
NS_STYLE_FRAME_NO
=
=
frameborder
|
|
NS_STYLE_FRAME_OFF
=
=
frameborder
)
{
aData
-
>
SetPixelValueIfUnset
(
eCSSProperty_border_top_width
0
.
0f
)
;
aData
-
>
SetPixelValueIfUnset
(
eCSSProperty_border_right_width
0
.
0f
)
;
aData
-
>
SetPixelValueIfUnset
(
eCSSProperty_border_bottom_width
0
.
0f
)
;
aData
-
>
SetPixelValueIfUnset
(
eCSSProperty_border_left_width
0
.
0f
)
;
}
}
}
nsGenericHTMLElement
:
:
MapImageSizeAttributesInto
(
aAttributes
aData
)
;
nsGenericHTMLElement
:
:
MapImageAlignAttributeInto
(
aAttributes
aData
)
;
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aAttributes
aData
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLIFrameElement
:
:
IsAttributeMapped
(
const
nsIAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
attributes
[
]
=
{
{
&
nsGkAtoms
:
:
width
}
{
&
nsGkAtoms
:
:
height
}
{
&
nsGkAtoms
:
:
frameborder
}
{
nullptr
}
}
;
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
attributes
sImageAlignAttributeMap
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLIFrameElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
nsresult
HTMLIFrameElement
:
:
SetAttr
(
int32_t
aNameSpaceID
nsIAtom
*
aName
nsIAtom
*
aPrefix
const
nsAString
&
aValue
bool
aNotify
)
{
nsresult
rv
=
nsGenericHTMLFrameElement
:
:
SetAttr
(
aNameSpaceID
aName
aPrefix
aValue
aNotify
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aName
=
=
nsGkAtoms
:
:
srcdoc
)
{
LoadSrc
(
)
;
}
return
NS_OK
;
}
nsresult
HTMLIFrameElement
:
:
AfterSetAttr
(
int32_t
aNameSpaceID
nsIAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
bool
aNotify
)
{
if
(
aName
=
=
nsGkAtoms
:
:
sandbox
&
&
aNameSpaceID
=
=
kNameSpaceID_None
&
&
mFrameLoader
)
{
mFrameLoader
-
>
ApplySandboxFlags
(
GetSandboxFlags
(
)
)
;
}
return
nsGenericHTMLFrameElement
:
:
AfterSetAttr
(
aNameSpaceID
aName
aValue
aOldValue
aNotify
)
;
}
nsresult
HTMLIFrameElement
:
:
UnsetAttr
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
bool
aNotify
)
{
nsresult
rv
=
nsGenericHTMLFrameElement
:
:
UnsetAttr
(
aNameSpaceID
aAttribute
aNotify
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
srcdoc
)
{
LoadSrc
(
)
;
}
return
NS_OK
;
}
uint32_t
HTMLIFrameElement
:
:
GetSandboxFlags
(
)
{
const
nsAttrValue
*
sandboxAttr
=
GetParsedAttr
(
nsGkAtoms
:
:
sandbox
)
;
if
(
!
sandboxAttr
)
{
return
SANDBOXED_NONE
;
}
return
nsContentUtils
:
:
ParseSandboxAttributeToFlags
(
sandboxAttr
)
;
}
JSObject
*
HTMLIFrameElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLIFrameElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
