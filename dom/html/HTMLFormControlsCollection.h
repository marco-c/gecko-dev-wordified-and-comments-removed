#
ifndef
mozilla_dom_HTMLFormControlsCollection_h
#
define
mozilla_dom_HTMLFormControlsCollection_h
#
include
"
nsIHTMLCollection
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsGenericHTMLFormElement
;
class
nsIContent
;
class
nsIFormControl
;
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
:
:
dom
{
class
Element
;
class
HTMLFormElement
;
class
HTMLImageElement
;
class
OwningRadioNodeListOrElement
;
template
<
typename
>
struct
Nullable
;
class
HTMLFormControlsCollection
final
:
public
nsIHTMLCollection
public
nsWrapperCache
{
public
:
explicit
HTMLFormControlsCollection
(
HTMLFormElement
*
aForm
)
;
void
DropFormReference
(
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
virtual
uint32_t
Length
(
)
override
;
virtual
Element
*
GetElementAt
(
uint32_t
index
)
override
;
virtual
nsINode
*
GetParentObject
(
)
override
;
virtual
Element
*
GetFirstNamedElement
(
const
nsAString
&
aName
bool
&
aFound
)
override
;
void
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
Nullable
<
OwningRadioNodeListOrElement
>
&
aResult
)
;
void
NamedItem
(
const
nsAString
&
aName
Nullable
<
OwningRadioNodeListOrElement
>
&
aResult
)
{
bool
dummy
;
NamedGetter
(
aName
dummy
aResult
)
;
}
virtual
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
override
;
nsresult
AddElementToTable
(
nsGenericHTMLFormElement
*
aChild
const
nsAString
&
aName
)
;
nsresult
AddImageElementToTable
(
HTMLImageElement
*
aChild
const
nsAString
&
aName
)
;
nsresult
RemoveElementFromTable
(
nsGenericHTMLFormElement
*
aChild
const
nsAString
&
aName
)
;
nsresult
IndexOfContent
(
nsIContent
*
aContent
int32_t
*
aIndex
)
;
nsISupports
*
NamedItemInternal
(
const
nsAString
&
aName
)
;
nsresult
GetSortedControls
(
nsTArray
<
RefPtr
<
nsGenericHTMLFormElement
>
>
&
aControls
)
const
;
using
nsWrapperCache
:
:
GetWrapper
;
using
nsWrapperCache
:
:
GetWrapperPreserveColor
;
using
nsWrapperCache
:
:
PreserveWrapper
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
HTMLFormControlsCollection
(
)
;
virtual
JSObject
*
GetWrapperPreserveColorInternal
(
)
override
{
return
nsWrapperCache
:
:
GetWrapperPreserveColor
(
)
;
}
virtual
void
PreserveWrapperInternal
(
nsISupports
*
aScriptObjectHolder
)
override
{
nsWrapperCache
:
:
PreserveWrapper
(
aScriptObjectHolder
)
;
}
public
:
static
bool
ShouldBeInElements
(
nsIFormControl
*
aFormControl
)
;
HTMLFormElement
*
mForm
;
nsTArray
<
nsGenericHTMLFormElement
*
>
mElements
;
nsTArray
<
nsGenericHTMLFormElement
*
>
mNotInElements
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
HTMLFormControlsCollection
)
protected
:
void
Clear
(
)
;
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
mNameLookupTable
;
}
;
}
#
endif
