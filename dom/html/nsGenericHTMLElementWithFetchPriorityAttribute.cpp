#
include
"
mozilla
/
nsGenericHTMLElementWithFetchPriorityAttribute
.
h
"
#
include
"
mozilla
/
dom
/
FetchPriority
.
h
"
namespace
mozilla
{
using
dom
:
:
FetchPriority
;
using
dom
:
:
kFetchPriorityAttributeValueAuto
;
using
dom
:
:
kFetchPriorityAttributeValueHigh
;
using
dom
:
:
kFetchPriorityAttributeValueLow
;
bool
nsGenericHTMLElementWithFetchPriorityAttribute
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
fetchpriority
)
{
ParseFetchPriority
(
aValue
aResult
)
;
return
true
;
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
nsGenericHTMLElementWithFetchPriorityAttribute
:
:
GetFetchPriority
(
nsAString
&
aFetchPriority
)
const
{
GetEnumAttr
(
nsGkAtoms
:
:
fetchpriority
kFetchPriorityAttributeValueAuto
aFetchPriority
)
;
}
dom
:
:
FetchPriority
nsGenericHTMLElementWithFetchPriorityAttribute
:
:
ToFetchPriority
(
const
nsAString
&
aValue
)
{
nsAttrValue
attrValue
;
ParseFetchPriority
(
aValue
attrValue
)
;
MOZ_ASSERT
(
attrValue
.
Type
(
)
=
=
nsAttrValue
:
:
eEnum
)
;
return
FetchPriority
(
attrValue
.
GetEnumValue
(
)
)
;
}
namespace
{
static
const
nsAttrValue
:
:
EnumTable
kFetchPriorityEnumTable
[
]
=
{
{
kFetchPriorityAttributeValueHigh
FetchPriority
:
:
High
}
{
kFetchPriorityAttributeValueLow
FetchPriority
:
:
Low
}
{
kFetchPriorityAttributeValueAuto
FetchPriority
:
:
Auto
}
{
nullptr
0
}
}
;
static
const
nsAttrValue
:
:
EnumTable
*
kFetchPriorityEnumTableInvalidValueDefault
=
&
kFetchPriorityEnumTable
[
2
]
;
}
void
nsGenericHTMLElementWithFetchPriorityAttribute
:
:
ParseFetchPriority
(
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
{
aResult
.
ParseEnumValue
(
aValue
kFetchPriorityEnumTable
false
kFetchPriorityEnumTableInvalidValueDefault
)
;
}
}
