#
ifndef
nsDOMStringMap_h
#
define
nsDOMStringMap_h
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
js
/
friend
/
DOMProxy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DOMString
;
class
DocGroup
;
}
}
class
nsDOMStringMap
:
public
nsStubMutationObserver
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
nsDOMStringMap
)
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
nsINode
*
GetParentObject
(
)
{
return
mElement
;
}
mozilla
:
:
dom
:
:
DocGroup
*
GetDocGroup
(
)
const
;
explicit
nsDOMStringMap
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
NamedGetter
(
const
nsAString
&
aProp
bool
&
found
mozilla
:
:
dom
:
:
DOMString
&
aResult
)
const
;
void
NamedSetter
(
const
nsAString
&
aProp
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
rv
)
;
void
NamedDeleter
(
const
nsAString
&
aProp
bool
&
found
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
;
JS
:
:
ExpandoAndGeneration
mExpandoAndGeneration
;
private
:
virtual
~
nsDOMStringMap
(
)
;
protected
:
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mElement
;
bool
mRemovingProp
;
static
bool
DataPropToAttr
(
const
nsAString
&
aProp
nsAutoString
&
aResult
)
;
static
bool
AttrToDataProp
(
const
nsAString
&
aAttr
nsAutoString
&
aResult
)
;
}
;
#
endif
