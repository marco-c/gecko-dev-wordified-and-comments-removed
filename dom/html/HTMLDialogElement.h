#
ifndef
HTMLDialogElement_h
#
define
HTMLDialogElement_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLDialogElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLDialogElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
mPreviouslyFocusedElement
(
nullptr
)
{
}
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLDialogElement
dialog
)
nsresult
Clone
(
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
)
const
override
;
static
bool
IsDialogEnabled
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
)
;
bool
Open
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
open
)
;
}
void
SetOpen
(
bool
aOpen
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
open
aOpen
aError
)
;
}
void
GetReturnValue
(
nsAString
&
aReturnValue
)
{
aReturnValue
=
mReturnValue
;
}
void
SetReturnValue
(
const
nsAString
&
aReturnValue
)
{
mReturnValue
=
aReturnValue
;
}
void
UnbindFromTree
(
bool
aNullParent
=
true
)
override
;
void
Close
(
const
mozilla
:
:
dom
:
:
Optional
<
nsAString
>
&
aReturnValue
)
;
void
Show
(
)
;
void
ShowModal
(
ErrorResult
&
aError
)
;
bool
IsInTopLayer
(
)
const
;
void
QueueCancelDialog
(
)
;
void
RunCancelDialogSteps
(
)
;
nsString
mReturnValue
;
protected
:
virtual
~
HTMLDialogElement
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
FocusDialog
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
void
AddToTopLayerIfNeeded
(
)
;
void
RemoveFromTopLayerIfNeeded
(
)
;
void
StorePreviouslyFocusedElement
(
)
;
nsWeakPtr
mPreviouslyFocusedElement
;
}
;
}
#
endif
