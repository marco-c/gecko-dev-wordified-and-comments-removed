#
ifndef
HTMLLabelElement_h
#
define
HTMLLabelElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
{
class
EventChainPostVisitor
;
namespace
dom
{
class
HTMLLabelElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLLabelElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
mHandlingEvent
(
false
)
{
}
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLLabelElement
label
)
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLLabelElement
nsGenericHTMLElement
)
virtual
bool
IsInteractiveHTMLContent
(
bool
aIgnoreTabindex
)
const
override
{
return
true
;
}
HTMLFormElement
*
GetForm
(
)
const
;
void
GetHtmlFor
(
nsString
&
aHtmlFor
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
_for
aHtmlFor
)
;
}
void
SetHtmlFor
(
const
nsAString
&
aHtmlFor
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
_for
aHtmlFor
)
;
}
nsGenericHTMLElement
*
GetControl
(
)
const
{
return
GetLabeledElement
(
)
;
}
using
nsGenericHTMLElement
:
:
Focus
;
virtual
void
Focus
(
const
FocusOptions
&
aOptions
ErrorResult
&
aError
)
override
;
virtual
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
bool
PerformAccesskey
(
bool
aKeyCausesActivation
bool
aIsTrustedEvent
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsGenericHTMLElement
*
GetLabeledElement
(
)
const
;
protected
:
virtual
~
HTMLLabelElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsGenericHTMLElement
*
GetFirstLabelableDescendant
(
)
const
;
bool
mHandlingEvent
;
}
;
}
}
#
endif
