#
ifndef
mozilla_dom_HTMLDetailsElement_h
#
define
mozilla_dom_HTMLDetailsElement_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLDetailsElement
final
:
public
nsGenericHTMLElement
{
public
:
using
NodeInfo
=
mozilla
:
:
dom
:
:
NodeInfo
;
static
bool
IsDetailsEnabled
(
)
;
explicit
HTMLDetailsElement
(
already_AddRefed
<
NodeInfo
>
&
aNodeInfo
)
:
nsGenericHTMLElement
(
aNodeInfo
)
{
}
NS_IMPL_FROMCONTENT_HTML_WITH_TAG
(
HTMLDetailsElement
details
)
nsIContent
*
GetFirstSummary
(
)
const
;
nsresult
Clone
(
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
)
const
override
;
nsChangeHint
GetAttributeChangeHint
(
const
nsIAtom
*
aAttribute
int32_t
aModType
)
const
override
;
nsresult
BeforeSetAttr
(
int32_t
aNameSpaceID
nsIAtom
*
aName
nsAttrValueOrString
*
aValue
bool
aNotify
)
override
;
bool
Open
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
open
)
;
}
void
SetOpen
(
bool
aOpen
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
open
aOpen
aError
)
;
}
void
ToggleOpen
(
)
{
ErrorResult
rv
;
SetOpen
(
!
Open
(
)
rv
)
;
rv
.
SuppressException
(
)
;
}
protected
:
virtual
~
HTMLDetailsElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
class
ToggleEventDispatcher
final
:
public
AsyncEventDispatcher
{
public
:
explicit
ToggleEventDispatcher
(
nsINode
*
aTarget
)
:
AsyncEventDispatcher
(
aTarget
NS_LITERAL_STRING
(
"
toggle
"
)
false
)
{
}
NS_IMETHOD
Run
(
)
override
{
auto
*
details
=
static_cast
<
HTMLDetailsElement
*
>
(
mTarget
.
get
(
)
)
;
details
-
>
mToggleEventDispatcher
=
nullptr
;
return
AsyncEventDispatcher
:
:
Run
(
)
;
}
}
;
RefPtr
<
ToggleEventDispatcher
>
mToggleEventDispatcher
;
}
;
}
}
#
endif
