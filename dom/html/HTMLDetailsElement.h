#
ifndef
mozilla_dom_HTMLDetailsElement_h
#
define
mozilla_dom_HTMLDetailsElement_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLSummaryElement
;
class
HTMLDetailsElement
final
:
public
nsGenericHTMLElement
{
public
:
using
NodeInfo
=
mozilla
:
:
dom
:
:
NodeInfo
;
explicit
HTMLDetailsElement
(
already_AddRefed
<
NodeInfo
>
&
&
aNodeInfo
)
;
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLDetailsElement
details
)
HTMLSummaryElement
*
GetFirstSummary
(
)
const
;
nsresult
Clone
(
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
)
const
override
;
void
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
bool
IsInteractiveHTMLContent
(
)
const
override
{
return
true
;
}
void
SetName
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aName
aRv
)
;
}
void
GetName
(
nsAString
&
aName
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aName
)
;
}
bool
Open
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
open
)
;
}
void
SetOpen
(
bool
aOpen
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
open
aOpen
aError
)
;
}
void
ToggleOpen
(
)
{
SetOpen
(
!
Open
(
)
IgnoreErrors
(
)
)
;
}
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
override
;
bool
IsValidInvokeAction
(
InvokeAction
aAction
)
const
override
;
MOZ_CAN_RUN_SCRIPT
bool
HandleInvokeInternal
(
Element
*
invoker
InvokeAction
aAction
ErrorResult
&
aRv
)
override
;
protected
:
virtual
~
HTMLDetailsElement
(
)
;
void
SetupShadowTree
(
)
;
void
CloseElementIfNeeded
(
)
;
void
CloseOtherElementsIfNeeded
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
RefPtr
<
AsyncEventDispatcher
>
mToggleEventDispatcher
;
}
;
}
#
endif
