#
include
"
mozilla
/
dom
/
HTMLHRElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLHRElementBinding
.
h
"
#
include
"
nsCSSProps
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
HR
)
namespace
mozilla
{
namespace
dom
{
HTMLHRElement
:
:
HTMLHRElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
HTMLHRElement
:
:
~
HTMLHRElement
(
)
{
}
NS_IMPL_ELEMENT_CLONE
(
HTMLHRElement
)
bool
HTMLHRElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
static
const
nsAttrValue
:
:
EnumTable
kAlignTable
[
]
=
{
{
"
left
"
NS_STYLE_TEXT_ALIGN_LEFT
}
{
"
right
"
NS_STYLE_TEXT_ALIGN_RIGHT
}
{
"
center
"
NS_STYLE_TEXT_ALIGN_CENTER
}
{
nullptr
0
}
}
;
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
)
{
return
aResult
.
ParseSpecialIntValue
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
size
)
{
return
aResult
.
ParseIntWithBounds
(
aValue
1
1000
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
align
)
{
return
aResult
.
ParseEnumValue
(
aValue
kAlignTable
false
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
color
)
{
return
aResult
.
ParseColor
(
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLHRElement
:
:
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
MappedDeclarations
&
aDecls
)
{
bool
noshade
=
false
;
const
nsAttrValue
*
colorValue
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
color
)
;
nscolor
color
;
bool
colorIsSet
=
colorValue
&
&
colorValue
-
>
GetColorValue
(
color
)
;
if
(
colorIsSet
)
{
noshade
=
true
;
}
else
{
noshade
=
!
!
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
noshade
)
;
}
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
align
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eEnum
)
{
switch
(
value
-
>
GetEnumValue
(
)
)
{
case
NS_STYLE_TEXT_ALIGN_LEFT
:
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_margin_left
0
.
0f
)
;
aDecls
.
SetAutoValueIfUnset
(
eCSSProperty_margin_right
)
;
break
;
case
NS_STYLE_TEXT_ALIGN_RIGHT
:
aDecls
.
SetAutoValueIfUnset
(
eCSSProperty_margin_left
)
;
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_margin_right
0
.
0f
)
;
break
;
case
NS_STYLE_TEXT_ALIGN_CENTER
:
aDecls
.
SetAutoValueIfUnset
(
eCSSProperty_margin_left
)
;
aDecls
.
SetAutoValueIfUnset
(
eCSSProperty_margin_right
)
;
break
;
}
}
if
(
!
aDecls
.
PropertyIsSet
(
eCSSProperty_height
)
)
{
if
(
noshade
)
{
aDecls
.
SetAutoValue
(
eCSSProperty_height
)
;
}
else
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
size
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
aDecls
.
SetPixelValue
(
eCSSProperty_height
(
float
)
value
-
>
GetIntegerValue
(
)
)
;
}
}
}
if
(
noshade
)
{
float
sizePerSide
;
bool
allSides
=
true
;
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
size
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
sizePerSide
=
(
float
)
value
-
>
GetIntegerValue
(
)
/
2
.
0f
;
if
(
sizePerSide
<
1
.
0f
)
{
sizePerSide
=
1
.
0f
;
allSides
=
false
;
}
}
else
{
sizePerSide
=
1
.
0f
;
}
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_border_top_width
sizePerSide
)
;
if
(
allSides
)
{
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_border_right_width
sizePerSide
)
;
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_border_bottom_width
sizePerSide
)
;
aDecls
.
SetPixelValueIfUnset
(
eCSSProperty_border_left_width
sizePerSide
)
;
}
if
(
!
aDecls
.
PropertyIsSet
(
eCSSProperty_border_top_style
)
)
aDecls
.
SetKeywordValue
(
eCSSProperty_border_top_style
StyleBorderStyle
:
:
Solid
)
;
if
(
allSides
)
{
aDecls
.
SetKeywordValueIfUnset
(
eCSSProperty_border_right_style
StyleBorderStyle
:
:
Solid
)
;
aDecls
.
SetKeywordValueIfUnset
(
eCSSProperty_border_bottom_style
StyleBorderStyle
:
:
Solid
)
;
aDecls
.
SetKeywordValueIfUnset
(
eCSSProperty_border_left_style
StyleBorderStyle
:
:
Solid
)
;
for
(
const
nsCSSPropertyID
*
props
=
nsCSSProps
:
:
SubpropertyEntryFor
(
eCSSProperty_border_radius
)
;
*
props
!
=
eCSSProperty_UNKNOWN
;
+
+
props
)
{
aDecls
.
SetPixelValueIfUnset
(
*
props
10000
.
0f
)
;
}
}
}
if
(
colorIsSet
)
{
aDecls
.
SetColorValueIfUnset
(
eCSSProperty_color
color
)
;
}
nsGenericHTMLElement
:
:
MapWidthAttributeInto
(
aAttributes
aDecls
)
;
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aAttributes
aDecls
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLHRElement
:
:
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
attributes
[
]
=
{
{
nsGkAtoms
:
:
align
}
{
nsGkAtoms
:
:
width
}
{
nsGkAtoms
:
:
size
}
{
nsGkAtoms
:
:
color
}
{
nsGkAtoms
:
:
noshade
}
{
nullptr
}
}
;
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
attributes
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLHRElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
JSObject
*
HTMLHRElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLHRElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
