#
ifndef
nsGenericHTMLFrameElement_h
#
define
nsGenericHTMLFrameElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
nsBrowserElement
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowserParent
;
template
<
typename
>
struct
Nullable
;
class
WindowProxyHolder
;
class
XULFrameElement
;
}
}
#
define
NS_GENERICHTMLFRAMEELEMENT_IID
\
{
\
0x8190db72
0xdab0
0x4d72
{
\
0x94
0x26
0x87
0x5f
0x5a
0x8a
0x2a
0xe5
\
}
\
}
class
nsGenericHTMLFrameElement
:
public
nsGenericHTMLElement
public
nsFrameLoaderOwner
public
mozilla
:
:
nsBrowserElement
public
nsIMozBrowserFrame
{
public
:
nsGenericHTMLFrameElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
nsBrowserElement
(
)
mSrcLoadHappened
(
false
)
mNetworkCreated
(
aFromParser
=
=
mozilla
:
:
dom
:
:
FROM_PARSER_NETWORK
)
mBrowserFrameListenersRegistered
(
false
)
mFrameLoaderCreationDisallowed
(
false
)
mReallyIsBrowser
(
false
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIDOMMOZBROWSERFRAME
NS_DECL_NSIMOZBROWSERFRAME
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_GENERICHTMLFRAMEELEMENT_IID
)
virtual
bool
IsHTMLFocusable
(
bool
aWithMouse
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
override
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
=
true
)
override
;
virtual
void
DestroyContent
(
)
override
;
nsresult
CopyInnerTo
(
mozilla
:
:
dom
:
:
Element
*
aDest
)
;
virtual
int32_t
TabIndexDefault
(
)
override
;
virtual
nsIMozBrowserFrame
*
GetAsMozBrowserFrame
(
)
override
{
return
this
;
}
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
nsGenericHTMLFrameElement
nsGenericHTMLElement
)
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
HTMLIFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aError
)
;
void
SwapFrameLoaders
(
mozilla
:
:
dom
:
:
XULFrameElement
&
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
aError
)
;
void
SwapFrameLoaders
(
nsFrameLoaderOwner
*
aOtherLoaderOwner
mozilla
:
:
ErrorResult
&
rv
)
;
void
PresetOpenerWindow
(
const
mozilla
:
:
dom
:
:
Nullable
<
mozilla
:
:
dom
:
:
WindowProxyHolder
>
&
aOpenerWindow
mozilla
:
:
ErrorResult
&
aRv
)
;
void
DisallowCreateFrameLoader
(
)
;
void
AllowCreateFrameLoader
(
)
;
void
CreateRemoteFrameLoader
(
mozilla
:
:
dom
:
:
BrowserParent
*
aBrowserParent
)
;
static
int32_t
MapScrollingAttribute
(
const
nsAttrValue
*
aValue
)
;
nsIPrincipal
*
GetSrcTriggeringPrincipal
(
)
const
{
return
mSrcTriggeringPrincipal
;
}
already_AddRefed
<
nsFrameLoader
>
GetFrameLoader
(
)
override
{
return
nsFrameLoaderOwner
:
:
GetFrameLoader
(
)
;
}
protected
:
virtual
~
nsGenericHTMLFrameElement
(
)
;
void
EnsureFrameLoader
(
)
;
void
LoadSrc
(
)
;
Document
*
GetContentDocument
(
nsIPrincipal
&
aSubjectPrincipal
)
;
mozilla
:
:
dom
:
:
Nullable
<
mozilla
:
:
dom
:
:
WindowProxyHolder
>
GetContentWindow
(
)
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
virtual
nsresult
OnAttrSetButNotChanged
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValueOrString
&
aValue
bool
aNotify
)
override
;
RefPtr
<
mozilla
:
:
dom
:
:
BrowsingContext
>
mOpenerWindow
;
nsCOMPtr
<
nsIPrincipal
>
mSrcTriggeringPrincipal
;
bool
mSrcLoadHappened
;
bool
mNetworkCreated
;
bool
mBrowserFrameListenersRegistered
;
bool
mFrameLoaderCreationDisallowed
;
bool
mReallyIsBrowser
;
bool
mFullscreenFlag
=
false
;
private
:
void
GetManifestURL
(
nsAString
&
aOut
)
;
void
AfterMaybeChangeAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValueOrString
*
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
;
mozilla
:
:
dom
:
:
BrowsingContext
*
GetContentWindowInternal
(
)
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsGenericHTMLFrameElement
NS_GENERICHTMLFRAMEELEMENT_IID
)
#
endif
