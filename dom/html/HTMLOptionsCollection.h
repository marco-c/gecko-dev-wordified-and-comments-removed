#
ifndef
mozilla_dom_HTMLOptionsCollection_h
#
define
mozilla_dom_HTMLOptionsCollection_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIHTMLCollection
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
HTMLOptionElement
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DocGroup
;
class
HTMLElementOrLong
;
class
HTMLOptionElementOrHTMLOptGroupElement
;
class
HTMLSelectElement
;
class
HTMLOptionsCollection
final
:
public
nsIHTMLCollection
public
nsWrapperCache
{
typedef
HTMLOptionElementOrHTMLOptGroupElement
HTMLOptionOrOptGroupElement
;
public
:
explicit
HTMLOptionsCollection
(
HTMLSelectElement
*
aSelect
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
using
nsWrapperCache
:
:
GetWrapper
;
using
nsWrapperCache
:
:
GetWrapperPreserveColor
;
using
nsWrapperCache
:
:
PreserveWrapper
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
HTMLOptionsCollection
(
)
=
default
;
virtual
JSObject
*
GetWrapperPreserveColorInternal
(
)
override
{
return
nsWrapperCache
:
:
GetWrapperPreserveColor
(
)
;
}
virtual
void
PreserveWrapperInternal
(
nsISupports
*
aScriptObjectHolder
)
override
{
nsWrapperCache
:
:
PreserveWrapper
(
aScriptObjectHolder
)
;
}
public
:
virtual
uint32_t
Length
(
)
override
;
virtual
Element
*
GetElementAt
(
uint32_t
aIndex
)
override
;
virtual
nsINode
*
GetParentObject
(
)
override
;
DocGroup
*
GetDocGroup
(
)
const
;
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
HTMLOptionsCollection
nsIHTMLCollection
)
void
InsertOptionAt
(
mozilla
:
:
dom
:
:
HTMLOptionElement
*
aOption
uint32_t
aIndex
)
{
mElements
.
InsertElementAt
(
aIndex
aOption
)
;
}
void
RemoveOptionAt
(
uint32_t
aIndex
)
{
mElements
.
RemoveElementAt
(
aIndex
)
;
}
mozilla
:
:
dom
:
:
HTMLOptionElement
*
ItemAsOption
(
uint32_t
aIndex
)
{
return
mElements
.
SafeElementAt
(
aIndex
nullptr
)
;
}
void
Clear
(
)
{
mElements
.
Clear
(
)
;
}
void
AppendOption
(
mozilla
:
:
dom
:
:
HTMLOptionElement
*
aOption
)
{
mElements
.
AppendElement
(
aOption
)
;
}
nsresult
GetOptionIndex
(
Element
*
aOption
int32_t
aStartIndex
bool
aForward
int32_t
*
aIndex
)
;
HTMLOptionElement
*
GetNamedItem
(
const
nsAString
&
aName
)
{
bool
dummy
;
return
NamedGetter
(
aName
dummy
)
;
}
HTMLOptionElement
*
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
virtual
Element
*
GetFirstNamedElement
(
const
nsAString
&
aName
bool
&
aFound
)
override
{
return
NamedGetter
(
aName
aFound
)
;
}
void
Add
(
const
HTMLOptionOrOptGroupElement
&
aElement
const
Nullable
<
HTMLElementOrLong
>
&
aBefore
ErrorResult
&
aError
)
;
void
Remove
(
int32_t
aIndex
)
;
int32_t
SelectedIndex
(
)
;
void
SetSelectedIndex
(
int32_t
aSelectedIndex
)
;
void
IndexedSetter
(
uint32_t
aIndex
HTMLOptionElement
*
aOption
ErrorResult
&
aError
)
;
virtual
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
override
;
void
SetLength
(
uint32_t
aLength
ErrorResult
&
aError
)
;
private
:
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
HTMLOptionElement
>
>
mElements
;
RefPtr
<
HTMLSelectElement
>
mSelect
;
}
;
}
}
#
endif
