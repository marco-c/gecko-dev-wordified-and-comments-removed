#
ifndef
mozilla_dom_HTMLScriptElement_h
#
define
mozilla_dom_HTMLScriptElement_h
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ScriptElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLScriptElement
final
:
public
nsGenericHTMLElement
public
ScriptElement
{
public
:
using
Element
:
:
GetText
;
HTMLScriptElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
;
NS_DECL_ISUPPORTS_INHERITED
void
GetInnerHTML
(
nsAString
&
aInnerHTML
OOMReporter
&
aError
)
override
;
virtual
void
SetInnerHTML
(
const
nsAString
&
aInnerHTML
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
aError
)
override
;
virtual
void
GetScriptText
(
nsAString
&
text
)
const
override
;
virtual
void
GetScriptCharset
(
nsAString
&
charset
)
override
;
virtual
void
FreezeExecutionAttrs
(
const
Document
*
aOwnerDoc
)
override
;
virtual
CORSMode
GetCORSMode
(
)
const
override
;
virtual
mozilla
:
:
dom
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
override
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
virtual
void
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
void
GetText
(
nsAString
&
aValue
ErrorResult
&
aRv
)
const
;
void
SetText
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
;
void
GetCharset
(
nsAString
&
aCharset
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
charset
aCharset
)
;
}
void
SetCharset
(
const
nsAString
&
aCharset
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
charset
aCharset
aRv
)
;
}
bool
Defer
(
)
{
return
GetBoolAttr
(
nsGkAtoms
:
:
defer
)
;
}
void
SetDefer
(
bool
aDefer
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
defer
aDefer
aRv
)
;
}
void
GetSrc
(
nsAString
&
aSrc
)
{
GetURIAttr
(
nsGkAtoms
:
:
src
nullptr
aSrc
)
;
}
void
SetSrc
(
const
nsAString
&
aSrc
nsIPrincipal
*
aTriggeringPrincipal
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
src
aSrc
aTriggeringPrincipal
aRv
)
;
}
void
GetType
(
nsAString
&
aType
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
type
aType
)
;
}
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aType
aRv
)
;
}
void
GetHtmlFor
(
nsAString
&
aHtmlFor
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
_for
aHtmlFor
)
;
}
void
SetHtmlFor
(
const
nsAString
&
aHtmlFor
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
_for
aHtmlFor
aRv
)
;
}
void
GetEvent
(
nsAString
&
aEvent
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
event
aEvent
)
;
}
void
SetEvent
(
const
nsAString
&
aEvent
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
event
aEvent
aRv
)
;
}
bool
Async
(
)
{
return
mForceAsync
|
|
GetBoolAttr
(
nsGkAtoms
:
:
async
)
;
}
void
SetAsync
(
bool
aValue
ErrorResult
&
aRv
)
{
mForceAsync
=
false
;
SetHTMLBoolAttr
(
nsGkAtoms
:
:
async
aValue
aRv
)
;
}
bool
NoModule
(
)
{
return
GetBoolAttr
(
nsGkAtoms
:
:
nomodule
)
;
}
void
SetNoModule
(
bool
aValue
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
nomodule
aValue
aRv
)
;
}
void
GetCrossOrigin
(
nsAString
&
aResult
)
{
GetEnumAttr
(
nsGkAtoms
:
:
crossorigin
nullptr
aResult
)
;
}
void
SetCrossOrigin
(
const
nsAString
&
aCrossOrigin
ErrorResult
&
aError
)
{
SetOrRemoveNullableStringAttr
(
nsGkAtoms
:
:
crossorigin
aCrossOrigin
aError
)
;
}
void
GetIntegrity
(
nsAString
&
aIntegrity
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
integrity
aIntegrity
)
;
}
void
SetIntegrity
(
const
nsAString
&
aIntegrity
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
integrity
aIntegrity
aRv
)
;
}
void
SetReferrerPolicy
(
const
nsAString
&
aReferrerPolicy
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
referrerpolicy
aReferrerPolicy
aError
)
;
}
void
GetReferrerPolicy
(
nsAString
&
aReferrerPolicy
)
{
GetEnumAttr
(
nsGkAtoms
:
:
referrerpolicy
"
"
aReferrerPolicy
)
;
}
void
GetFetchPriority
(
nsAString
&
aFetchPriority
)
{
}
void
SetFetchPriority
(
const
nsAString
&
aFetchPriority
)
{
}
[
[
nodiscard
]
]
static
bool
Supports
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aType
)
;
protected
:
virtual
~
HTMLScriptElement
(
)
;
virtual
bool
GetAsyncState
(
)
override
{
return
Async
(
)
;
}
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIContent
*
GetAsContent
(
)
override
{
return
this
;
}
virtual
bool
HasScriptContent
(
)
override
;
}
;
}
#
endif
