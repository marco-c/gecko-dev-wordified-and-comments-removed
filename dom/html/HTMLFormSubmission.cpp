#
include
"
HTMLFormSubmission
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIForm
.
h
"
#
include
"
nsILinkHandler
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsIDOMHTMLFormElement
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsISaveAsCharset
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsLinebreakConverter
.
h
"
#
include
"
nsEscape
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsIMultiplexInputStream
.
h
"
#
include
"
nsIMIMEInputStream
.
h
"
#
include
"
nsIMIMEService
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsCExternalHandlerService
.
h
"
#
include
"
nsIFileStreams
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Directory
.
h
"
#
include
"
mozilla
/
dom
/
EncodingUtils
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
void
SendJSWarning
(
nsIDocument
*
aDocument
const
char
*
aWarningName
const
char16_t
*
*
aWarningArgs
uint32_t
aWarningArgsLen
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
HTML
"
)
aDocument
nsContentUtils
:
:
eFORMS_PROPERTIES
aWarningName
aWarningArgs
aWarningArgsLen
)
;
}
void
RetrieveFileName
(
Blob
*
aBlob
nsAString
&
aFilename
)
{
if
(
!
aBlob
)
{
return
;
}
RefPtr
<
File
>
file
=
aBlob
-
>
ToFile
(
)
;
if
(
file
)
{
file
-
>
GetName
(
aFilename
)
;
}
}
void
RetrieveDirectoryName
(
Directory
*
aDirectory
nsAString
&
aDirname
)
{
MOZ_ASSERT
(
aDirectory
)
;
ErrorResult
rv
;
aDirectory
-
>
GetName
(
aDirname
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
aDirname
.
Truncate
(
)
;
}
}
class
FSURLEncoded
:
public
EncodingFormSubmission
{
public
:
FSURLEncoded
(
const
nsACString
&
aCharset
int32_t
aMethod
nsIDocument
*
aDocument
nsIContent
*
aOriginatingElement
)
:
EncodingFormSubmission
(
aCharset
aOriginatingElement
)
mMethod
(
aMethod
)
mDocument
(
aDocument
)
mWarnedFileControl
(
false
)
{
}
virtual
nsresult
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
override
;
virtual
nsresult
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
override
;
virtual
nsresult
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
override
;
virtual
nsresult
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
override
;
virtual
bool
SupportsIsindexSubmission
(
)
override
{
return
true
;
}
virtual
nsresult
AddIsindex
(
const
nsAString
&
aValue
)
override
;
protected
:
nsresult
URLEncode
(
const
nsAString
&
aStr
nsACString
&
aEncoded
)
;
private
:
int32_t
mMethod
;
nsCString
mQueryString
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
bool
mWarnedFileControl
;
}
;
nsresult
FSURLEncoded
:
:
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
{
nsCString
convValue
;
nsresult
rv
=
URLEncode
(
aValue
convValue
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
convName
;
rv
=
URLEncode
(
aName
convName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
mQueryString
.
IsEmpty
(
)
)
{
mQueryString
+
=
convName
+
NS_LITERAL_CSTRING
(
"
=
"
)
+
convValue
;
}
else
{
mQueryString
+
=
NS_LITERAL_CSTRING
(
"
&
"
)
+
convName
+
NS_LITERAL_CSTRING
(
"
=
"
)
+
convValue
;
}
return
NS_OK
;
}
nsresult
FSURLEncoded
:
:
AddIsindex
(
const
nsAString
&
aValue
)
{
nsCString
convValue
;
nsresult
rv
=
URLEncode
(
aValue
convValue
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
mQueryString
.
IsEmpty
(
)
)
{
mQueryString
.
Assign
(
convValue
)
;
}
else
{
mQueryString
+
=
NS_LITERAL_CSTRING
(
"
&
isindex
=
"
)
+
convValue
;
}
return
NS_OK
;
}
nsresult
FSURLEncoded
:
:
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
{
if
(
!
mWarnedFileControl
)
{
SendJSWarning
(
mDocument
"
ForgotFileEnctypeWarning
"
nullptr
0
)
;
mWarnedFileControl
=
true
;
}
nsAutoString
filename
;
RetrieveFileName
(
aBlob
filename
)
;
return
AddNameValuePair
(
aName
filename
)
;
}
nsresult
FSURLEncoded
:
:
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
{
nsAutoString
dirname
;
RetrieveDirectoryName
(
aDirectory
dirname
)
;
return
AddNameValuePair
(
aName
dirname
)
;
}
void
HandleMailtoSubject
(
nsCString
&
aPath
)
{
bool
hasSubject
=
false
;
bool
hasParams
=
false
;
int32_t
paramSep
=
aPath
.
FindChar
(
'
?
'
)
;
while
(
paramSep
!
=
kNotFound
&
&
paramSep
<
(
int32_t
)
aPath
.
Length
(
)
)
{
hasParams
=
true
;
int32_t
nameEnd
=
aPath
.
FindChar
(
'
=
'
paramSep
+
1
)
;
int32_t
nextParamSep
=
aPath
.
FindChar
(
'
&
'
paramSep
+
1
)
;
if
(
nextParamSep
=
=
kNotFound
)
{
nextParamSep
=
aPath
.
Length
(
)
;
}
if
(
nameEnd
=
=
kNotFound
|
|
nextParamSep
<
nameEnd
)
{
nameEnd
=
nextParamSep
;
}
if
(
nameEnd
!
=
kNotFound
)
{
if
(
Substring
(
aPath
paramSep
+
1
nameEnd
-
(
paramSep
+
1
)
)
.
LowerCaseEqualsLiteral
(
"
subject
"
)
)
{
hasSubject
=
true
;
break
;
}
}
paramSep
=
nextParamSep
;
}
if
(
!
hasSubject
)
{
if
(
hasParams
)
{
aPath
.
Append
(
'
&
'
)
;
}
else
{
aPath
.
Append
(
'
?
'
)
;
}
nsXPIDLString
brandName
;
nsresult
rv
=
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eBRAND_PROPERTIES
"
brandShortName
"
brandName
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
const
char16_t
*
formatStrings
[
]
=
{
brandName
.
get
(
)
}
;
nsXPIDLString
subjectStr
;
rv
=
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eFORMS_PROPERTIES
"
DefaultFormSubject
"
formatStrings
subjectStr
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
aPath
.
AppendLiteral
(
"
subject
=
"
)
;
nsCString
subjectStrEscaped
;
rv
=
NS_EscapeURL
(
NS_ConvertUTF16toUTF8
(
subjectStr
)
esc_Query
subjectStrEscaped
mozilla
:
:
fallible
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
aPath
.
Append
(
subjectStrEscaped
)
;
}
}
nsresult
FSURLEncoded
:
:
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
{
nsresult
rv
=
NS_OK
;
*
aPostDataStream
=
nullptr
;
if
(
mMethod
=
=
NS_FORM_METHOD_POST
)
{
bool
isMailto
=
false
;
aURI
-
>
SchemeIs
(
"
mailto
"
&
isMailto
)
;
if
(
isMailto
)
{
nsAutoCString
path
;
rv
=
aURI
-
>
GetPath
(
path
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
HandleMailtoSubject
(
path
)
;
nsAutoCString
escapedBody
;
if
(
NS_WARN_IF
(
!
NS_Escape
(
mQueryString
escapedBody
url_XAlphas
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
path
+
=
NS_LITERAL_CSTRING
(
"
&
force
-
plain
-
text
=
Y
&
body
=
"
)
+
escapedBody
;
rv
=
aURI
-
>
SetPath
(
path
)
;
}
else
{
nsCOMPtr
<
nsIInputStream
>
dataStream
;
rv
=
NS_NewCStringInputStream
(
getter_AddRefs
(
dataStream
)
mQueryString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIMIMEInputStream
>
mimeStream
(
do_CreateInstance
(
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
#
ifdef
SPECIFY_CHARSET_IN_CONTENT_TYPE
mimeStream
-
>
AddHeader
(
"
Content
-
Type
"
PromiseFlatString
(
"
application
/
x
-
www
-
form
-
urlencoded
;
charset
=
"
+
mCharset
)
.
get
(
)
)
;
#
else
mimeStream
-
>
AddHeader
(
"
Content
-
Type
"
"
application
/
x
-
www
-
form
-
urlencoded
"
)
;
#
endif
mimeStream
-
>
SetAddContentLength
(
true
)
;
mimeStream
-
>
SetData
(
dataStream
)
;
*
aPostDataStream
=
mimeStream
;
NS_ADDREF
(
*
aPostDataStream
)
;
}
}
else
{
bool
schemeIsJavaScript
;
rv
=
aURI
-
>
SchemeIs
(
"
javascript
"
&
schemeIsJavaScript
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
schemeIsJavaScript
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIURL
>
url
=
do_QueryInterface
(
aURI
)
;
if
(
url
)
{
url
-
>
SetQuery
(
mQueryString
)
;
}
else
{
nsAutoCString
path
;
rv
=
aURI
-
>
GetPath
(
path
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
int32_t
namedAnchorPos
=
path
.
FindChar
(
'
#
'
)
;
nsAutoCString
namedAnchor
;
if
(
kNotFound
!
=
namedAnchorPos
)
{
path
.
Right
(
namedAnchor
(
path
.
Length
(
)
-
namedAnchorPos
)
)
;
path
.
Truncate
(
namedAnchorPos
)
;
}
int32_t
queryStart
=
path
.
FindChar
(
'
?
'
)
;
if
(
kNotFound
!
=
queryStart
)
{
path
.
Truncate
(
queryStart
)
;
}
path
.
Append
(
'
?
'
)
;
path
.
Append
(
mQueryString
+
namedAnchor
)
;
aURI
-
>
SetPath
(
path
)
;
}
}
return
rv
;
}
nsresult
FSURLEncoded
:
:
URLEncode
(
const
nsAString
&
aStr
nsACString
&
aEncoded
)
{
int32_t
convertedBufLength
=
0
;
char16_t
*
convertedBuf
=
nsLinebreakConverter
:
:
ConvertUnicharLineBreaks
(
aStr
.
BeginReading
(
)
nsLinebreakConverter
:
:
eLinebreakAny
nsLinebreakConverter
:
:
eLinebreakNet
aStr
.
Length
(
)
&
convertedBufLength
)
;
NS_ENSURE_TRUE
(
convertedBuf
NS_ERROR_OUT_OF_MEMORY
)
;
nsAutoString
convertedString
;
convertedString
.
Adopt
(
convertedBuf
convertedBufLength
)
;
nsAutoCString
encodedBuf
;
nsresult
rv
=
EncodeVal
(
convertedString
encodedBuf
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
NS_WARN_IF
(
!
NS_Escape
(
encodedBuf
aEncoded
url_XPAlphas
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
}
FSMultipartFormData
:
:
FSMultipartFormData
(
const
nsACString
&
aCharset
nsIContent
*
aOriginatingElement
)
:
EncodingFormSubmission
(
aCharset
aOriginatingElement
)
{
mPostDataStream
=
do_CreateInstance
(
"
mozilla
.
org
/
io
/
multiplex
-
input
-
stream
;
1
"
)
;
mTotalLength
=
0
;
mBoundary
.
AssignLiteral
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
"
)
;
mBoundary
.
AppendInt
(
rand
(
)
)
;
mBoundary
.
AppendInt
(
rand
(
)
)
;
mBoundary
.
AppendInt
(
rand
(
)
)
;
}
FSMultipartFormData
:
:
~
FSMultipartFormData
(
)
{
NS_ASSERTION
(
mPostDataChunk
.
IsEmpty
(
)
"
Left
unsubmitted
data
"
)
;
}
nsIInputStream
*
FSMultipartFormData
:
:
GetSubmissionBody
(
uint64_t
*
aContentLength
)
{
mPostDataChunk
+
=
NS_LITERAL_CSTRING
(
"
-
-
"
)
+
mBoundary
+
NS_LITERAL_CSTRING
(
"
-
-
"
CRLF
)
;
AddPostDataStream
(
)
;
*
aContentLength
=
mTotalLength
;
return
mPostDataStream
;
}
nsresult
FSMultipartFormData
:
:
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
{
nsCString
valueStr
;
nsAutoCString
encodedVal
;
nsresult
rv
=
EncodeVal
(
aValue
encodedVal
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
valueStr
.
Adopt
(
nsLinebreakConverter
:
:
ConvertLineBreaks
(
encodedVal
.
get
(
)
nsLinebreakConverter
:
:
eLinebreakAny
nsLinebreakConverter
:
:
eLinebreakNet
)
)
;
nsAutoCString
nameStr
;
rv
=
EncodeVal
(
aName
nameStr
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mPostDataChunk
+
=
NS_LITERAL_CSTRING
(
"
-
-
"
)
+
mBoundary
+
NS_LITERAL_CSTRING
(
CRLF
)
+
NS_LITERAL_CSTRING
(
"
Content
-
Disposition
:
form
-
data
;
name
=
\
"
"
)
+
nameStr
+
NS_LITERAL_CSTRING
(
"
\
"
"
CRLF
CRLF
)
+
valueStr
+
NS_LITERAL_CSTRING
(
CRLF
)
;
return
NS_OK
;
}
nsresult
FSMultipartFormData
:
:
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
{
nsAutoCString
nameStr
;
nsresult
rv
=
EncodeVal
(
aName
nameStr
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ErrorResult
error
;
uint64_t
size
=
0
;
nsAutoCString
filename
;
nsAutoCString
contentType
;
nsCOMPtr
<
nsIInputStream
>
fileStream
;
if
(
aBlob
)
{
nsAutoString
filename16
;
RefPtr
<
File
>
file
=
aBlob
-
>
ToFile
(
)
;
if
(
file
)
{
nsAutoString
path
;
file
-
>
GetPath
(
path
)
;
if
(
Directory
:
:
WebkitBlinkDirectoryPickerEnabled
(
nullptr
nullptr
)
&
&
!
path
.
IsEmpty
(
)
)
{
filename16
=
path
;
}
if
(
filename16
.
IsEmpty
(
)
)
{
RetrieveFileName
(
aBlob
filename16
)
;
}
}
rv
=
EncodeVal
(
filename16
filename
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
contentType16
;
aBlob
-
>
GetType
(
contentType16
)
;
if
(
contentType16
.
IsEmpty
(
)
)
{
contentType16
.
AssignLiteral
(
"
application
/
octet
-
stream
"
)
;
}
contentType
.
Adopt
(
nsLinebreakConverter
:
:
ConvertLineBreaks
(
NS_ConvertUTF16toUTF8
(
contentType16
)
.
get
(
)
nsLinebreakConverter
:
:
eLinebreakAny
nsLinebreakConverter
:
:
eLinebreakSpace
)
)
;
aBlob
-
>
GetInternalStream
(
getter_AddRefs
(
fileStream
)
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
return
error
.
StealNSResult
(
)
;
}
size
=
aBlob
-
>
GetSize
(
error
)
;
if
(
error
.
Failed
(
)
)
{
error
.
SuppressException
(
)
;
fileStream
=
nullptr
;
}
if
(
fileStream
)
{
nsCOMPtr
<
nsIInputStream
>
bufferedStream
;
rv
=
NS_NewBufferedInputStream
(
getter_AddRefs
(
bufferedStream
)
fileStream
8192
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
fileStream
=
bufferedStream
;
}
}
else
{
contentType
.
AssignLiteral
(
"
application
/
octet
-
stream
"
)
;
}
AddDataChunk
(
nameStr
filename
contentType
fileStream
size
)
;
return
NS_OK
;
}
nsresult
FSMultipartFormData
:
:
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
{
if
(
!
Directory
:
:
WebkitBlinkDirectoryPickerEnabled
(
nullptr
nullptr
)
)
{
return
NS_OK
;
}
nsAutoCString
nameStr
;
nsresult
rv
=
EncodeVal
(
aName
nameStr
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
dirname
;
nsAutoString
dirname16
;
ErrorResult
error
;
nsAutoString
path
;
aDirectory
-
>
GetPath
(
path
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
error
.
SuppressException
(
)
;
}
else
{
dirname16
=
path
;
}
if
(
dirname16
.
IsEmpty
(
)
)
{
RetrieveDirectoryName
(
aDirectory
dirname16
)
;
}
rv
=
EncodeVal
(
dirname16
dirname
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
AddDataChunk
(
nameStr
dirname
NS_LITERAL_CSTRING
(
"
application
/
octet
-
stream
"
)
nullptr
0
)
;
return
NS_OK
;
}
void
FSMultipartFormData
:
:
AddDataChunk
(
const
nsACString
&
aName
const
nsACString
&
aFilename
const
nsACString
&
aContentType
nsIInputStream
*
aInputStream
uint64_t
aInputStreamSize
)
{
mPostDataChunk
+
=
NS_LITERAL_CSTRING
(
"
-
-
"
)
+
mBoundary
+
NS_LITERAL_CSTRING
(
CRLF
)
;
mPostDataChunk
+
=
NS_LITERAL_CSTRING
(
"
Content
-
Disposition
:
form
-
data
;
name
=
\
"
"
)
+
aName
+
NS_LITERAL_CSTRING
(
"
\
"
;
filename
=
\
"
"
)
+
aFilename
+
NS_LITERAL_CSTRING
(
"
\
"
"
CRLF
)
+
NS_LITERAL_CSTRING
(
"
Content
-
Type
:
"
)
+
aContentType
+
NS_LITERAL_CSTRING
(
CRLF
CRLF
)
;
if
(
aInputStream
)
{
AddPostDataStream
(
)
;
mPostDataStream
-
>
AppendStream
(
aInputStream
)
;
mTotalLength
+
=
aInputStreamSize
;
}
mPostDataChunk
.
AppendLiteral
(
CRLF
)
;
}
nsresult
FSMultipartFormData
:
:
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
{
nsresult
rv
;
nsCOMPtr
<
nsIMIMEInputStream
>
mimeStream
=
do_CreateInstance
(
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
contentType
;
GetContentType
(
contentType
)
;
mimeStream
-
>
AddHeader
(
"
Content
-
Type
"
contentType
.
get
(
)
)
;
mimeStream
-
>
SetAddContentLength
(
true
)
;
uint64_t
unused
;
mimeStream
-
>
SetData
(
GetSubmissionBody
(
&
unused
)
)
;
mimeStream
.
forget
(
aPostDataStream
)
;
return
NS_OK
;
}
nsresult
FSMultipartFormData
:
:
AddPostDataStream
(
)
{
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIInputStream
>
postDataChunkStream
;
rv
=
NS_NewCStringInputStream
(
getter_AddRefs
(
postDataChunkStream
)
mPostDataChunk
)
;
NS_ASSERTION
(
postDataChunkStream
"
Could
not
open
a
stream
for
POST
!
"
)
;
if
(
postDataChunkStream
)
{
mPostDataStream
-
>
AppendStream
(
postDataChunkStream
)
;
mTotalLength
+
=
mPostDataChunk
.
Length
(
)
;
}
mPostDataChunk
.
Truncate
(
)
;
return
rv
;
}
namespace
{
class
FSTextPlain
:
public
EncodingFormSubmission
{
public
:
FSTextPlain
(
const
nsACString
&
aCharset
nsIContent
*
aOriginatingElement
)
:
EncodingFormSubmission
(
aCharset
aOriginatingElement
)
{
}
virtual
nsresult
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
override
;
virtual
nsresult
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
override
;
virtual
nsresult
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
override
;
virtual
nsresult
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
override
;
private
:
nsString
mBody
;
}
;
nsresult
FSTextPlain
:
:
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
{
mBody
.
Append
(
aName
+
NS_LITERAL_STRING
(
"
=
"
)
+
aValue
+
NS_LITERAL_STRING
(
CRLF
)
)
;
return
NS_OK
;
}
nsresult
FSTextPlain
:
:
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
{
nsAutoString
filename
;
RetrieveFileName
(
aBlob
filename
)
;
AddNameValuePair
(
aName
filename
)
;
return
NS_OK
;
}
nsresult
FSTextPlain
:
:
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
{
nsAutoString
dirname
;
RetrieveDirectoryName
(
aDirectory
dirname
)
;
AddNameValuePair
(
aName
dirname
)
;
return
NS_OK
;
}
nsresult
FSTextPlain
:
:
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
{
nsresult
rv
=
NS_OK
;
bool
isMailto
=
false
;
aURI
-
>
SchemeIs
(
"
mailto
"
&
isMailto
)
;
if
(
isMailto
)
{
nsAutoCString
path
;
rv
=
aURI
-
>
GetPath
(
path
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
HandleMailtoSubject
(
path
)
;
nsAutoCString
escapedBody
;
if
(
NS_WARN_IF
(
!
NS_Escape
(
NS_ConvertUTF16toUTF8
(
mBody
)
escapedBody
url_XAlphas
)
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
path
+
=
NS_LITERAL_CSTRING
(
"
&
force
-
plain
-
text
=
Y
&
body
=
"
)
+
escapedBody
;
rv
=
aURI
-
>
SetPath
(
path
)
;
}
else
{
nsCString
cbody
;
EncodeVal
(
mBody
cbody
false
)
;
cbody
.
Adopt
(
nsLinebreakConverter
:
:
ConvertLineBreaks
(
cbody
.
get
(
)
nsLinebreakConverter
:
:
eLinebreakAny
nsLinebreakConverter
:
:
eLinebreakNet
)
)
;
nsCOMPtr
<
nsIInputStream
>
bodyStream
;
rv
=
NS_NewCStringInputStream
(
getter_AddRefs
(
bodyStream
)
cbody
)
;
if
(
!
bodyStream
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
nsCOMPtr
<
nsIMIMEInputStream
>
mimeStream
=
do_CreateInstance
(
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mimeStream
-
>
AddHeader
(
"
Content
-
Type
"
"
text
/
plain
"
)
;
mimeStream
-
>
SetAddContentLength
(
true
)
;
mimeStream
-
>
SetData
(
bodyStream
)
;
CallQueryInterface
(
mimeStream
aPostDataStream
)
;
}
return
rv
;
}
}
EncodingFormSubmission
:
:
EncodingFormSubmission
(
const
nsACString
&
aCharset
nsIContent
*
aOriginatingElement
)
:
HTMLFormSubmission
(
aCharset
aOriginatingElement
)
mEncoder
(
aCharset
)
{
if
(
!
(
aCharset
.
EqualsLiteral
(
"
UTF
-
8
"
)
|
|
aCharset
.
EqualsLiteral
(
"
gb18030
"
)
)
)
{
NS_ConvertUTF8toUTF16
charsetUtf16
(
aCharset
)
;
const
char16_t
*
charsetPtr
=
charsetUtf16
.
get
(
)
;
SendJSWarning
(
aOriginatingElement
?
aOriginatingElement
-
>
GetOwnerDocument
(
)
:
nullptr
"
CannotEncodeAllUnicode
"
&
charsetPtr
1
)
;
}
}
EncodingFormSubmission
:
:
~
EncodingFormSubmission
(
)
{
}
nsresult
EncodingFormSubmission
:
:
EncodeVal
(
const
nsAString
&
aStr
nsCString
&
aOut
bool
aHeaderEncode
)
{
if
(
!
mEncoder
.
Encode
(
aStr
aOut
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
aHeaderEncode
)
{
aOut
.
Adopt
(
nsLinebreakConverter
:
:
ConvertLineBreaks
(
aOut
.
get
(
)
nsLinebreakConverter
:
:
eLinebreakAny
nsLinebreakConverter
:
:
eLinebreakSpace
)
)
;
aOut
.
ReplaceSubstring
(
NS_LITERAL_CSTRING
(
"
\
"
"
)
NS_LITERAL_CSTRING
(
"
\
\
\
"
"
)
)
;
}
return
NS_OK
;
}
namespace
{
void
GetSubmitCharset
(
nsGenericHTMLElement
*
aForm
nsACString
&
oCharset
)
{
oCharset
.
AssignLiteral
(
"
UTF
-
8
"
)
;
nsAutoString
acceptCharsetValue
;
aForm
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
acceptcharset
acceptCharsetValue
)
;
int32_t
charsetLen
=
acceptCharsetValue
.
Length
(
)
;
if
(
charsetLen
>
0
)
{
int32_t
offset
=
0
;
int32_t
spPos
=
0
;
do
{
spPos
=
acceptCharsetValue
.
FindChar
(
char16_t
(
'
'
)
offset
)
;
int32_t
cnt
=
(
(
-
1
=
=
spPos
)
?
(
charsetLen
-
offset
)
:
(
spPos
-
offset
)
)
;
if
(
cnt
>
0
)
{
nsAutoString
uCharset
;
acceptCharsetValue
.
Mid
(
uCharset
offset
cnt
)
;
if
(
EncodingUtils
:
:
FindEncodingForLabelNoReplacement
(
uCharset
oCharset
)
)
return
;
}
offset
=
spPos
+
1
;
}
while
(
spPos
!
=
-
1
)
;
}
nsIDocument
*
doc
=
aForm
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
oCharset
=
doc
-
>
GetDocumentCharacterSet
(
)
;
}
}
void
GetEnumAttr
(
nsGenericHTMLElement
*
aContent
nsIAtom
*
atom
int32_t
*
aValue
)
{
const
nsAttrValue
*
value
=
aContent
-
>
GetParsedAttr
(
atom
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eEnum
)
{
*
aValue
=
value
-
>
GetEnumValue
(
)
;
}
}
}
nsresult
HTMLFormSubmission
:
:
GetFromForm
(
nsGenericHTMLElement
*
aForm
nsGenericHTMLElement
*
aOriginatingElement
HTMLFormSubmission
*
*
aFormSubmission
)
{
NS_ASSERTION
(
aForm
-
>
GetComposedDoc
(
)
"
Should
have
doc
if
we
'
re
building
submission
!
"
)
;
int32_t
enctype
=
NS_FORM_ENCTYPE_URLENCODED
;
if
(
aOriginatingElement
&
&
aOriginatingElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
formenctype
)
)
{
GetEnumAttr
(
aOriginatingElement
nsGkAtoms
:
:
formenctype
&
enctype
)
;
}
else
{
GetEnumAttr
(
aForm
nsGkAtoms
:
:
enctype
&
enctype
)
;
}
int32_t
method
=
NS_FORM_METHOD_GET
;
if
(
aOriginatingElement
&
&
aOriginatingElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
formmethod
)
)
{
GetEnumAttr
(
aOriginatingElement
nsGkAtoms
:
:
formmethod
&
method
)
;
}
else
{
GetEnumAttr
(
aForm
nsGkAtoms
:
:
method
&
method
)
;
}
nsAutoCString
charset
;
GetSubmitCharset
(
aForm
charset
)
;
if
(
StringBeginsWith
(
charset
NS_LITERAL_CSTRING
(
"
UTF
-
16
"
)
)
)
{
charset
.
AssignLiteral
(
"
UTF
-
8
"
)
;
}
if
(
method
=
=
NS_FORM_METHOD_POST
&
&
enctype
=
=
NS_FORM_ENCTYPE_MULTIPART
)
{
*
aFormSubmission
=
new
FSMultipartFormData
(
charset
aOriginatingElement
)
;
}
else
if
(
method
=
=
NS_FORM_METHOD_POST
&
&
enctype
=
=
NS_FORM_ENCTYPE_TEXTPLAIN
)
{
*
aFormSubmission
=
new
FSTextPlain
(
charset
aOriginatingElement
)
;
}
else
{
nsIDocument
*
doc
=
aForm
-
>
OwnerDoc
(
)
;
if
(
enctype
=
=
NS_FORM_ENCTYPE_MULTIPART
|
|
enctype
=
=
NS_FORM_ENCTYPE_TEXTPLAIN
)
{
nsAutoString
enctypeStr
;
if
(
aOriginatingElement
&
&
aOriginatingElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
formenctype
)
)
{
aOriginatingElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
formenctype
enctypeStr
)
;
}
else
{
aForm
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
enctype
enctypeStr
)
;
}
const
char16_t
*
enctypeStrPtr
=
enctypeStr
.
get
(
)
;
SendJSWarning
(
doc
"
ForgotPostWarning
"
&
enctypeStrPtr
1
)
;
}
*
aFormSubmission
=
new
FSURLEncoded
(
charset
method
doc
aOriginatingElement
)
;
}
return
NS_OK
;
}
}
}
