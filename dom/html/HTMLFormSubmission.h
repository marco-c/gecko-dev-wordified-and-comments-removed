#
ifndef
mozilla_dom_HTMLFormSubmission_h
#
define
mozilla_dom_HTMLFormSubmission_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
nsString
.
h
"
class
nsIURI
;
class
nsIInputStream
;
class
nsGenericHTMLElement
;
class
nsIMultiplexInputStream
;
namespace
mozilla
{
namespace
dom
{
class
Blob
;
class
Directory
;
class
HTMLFormSubmission
{
public
:
static
nsresult
GetFromForm
(
nsGenericHTMLElement
*
aForm
nsGenericHTMLElement
*
aOriginatingElement
HTMLFormSubmission
*
*
aFormSubmission
)
;
virtual
~
HTMLFormSubmission
(
)
{
MOZ_COUNT_DTOR
(
HTMLFormSubmission
)
;
}
virtual
nsresult
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
=
0
;
virtual
nsresult
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
=
0
;
virtual
nsresult
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
=
0
;
virtual
nsresult
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
=
0
;
void
GetCharset
(
nsACString
&
aCharset
)
{
mEncoding
-
>
Name
(
aCharset
)
;
}
nsIContent
*
GetOriginatingElement
(
)
const
{
return
mOriginatingElement
.
get
(
)
;
}
protected
:
HTMLFormSubmission
(
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
aEncoding
nsIContent
*
aOriginatingElement
)
:
mEncoding
(
aEncoding
)
mOriginatingElement
(
aOriginatingElement
)
{
MOZ_COUNT_CTOR
(
HTMLFormSubmission
)
;
}
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
mEncoding
;
nsCOMPtr
<
nsIContent
>
mOriginatingElement
;
}
;
class
EncodingFormSubmission
:
public
HTMLFormSubmission
{
public
:
EncodingFormSubmission
(
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
aEncoding
nsIContent
*
aOriginatingElement
)
;
virtual
~
EncodingFormSubmission
(
)
;
nsresult
EncodeVal
(
const
nsAString
&
aStr
nsCString
&
aResult
bool
aHeaderEncode
)
;
}
;
class
FSMultipartFormData
:
public
EncodingFormSubmission
{
public
:
FSMultipartFormData
(
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
aEncoding
nsIContent
*
aOriginatingElement
)
;
~
FSMultipartFormData
(
)
;
virtual
nsresult
AddNameValuePair
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
override
;
virtual
nsresult
AddNameBlobOrNullPair
(
const
nsAString
&
aName
Blob
*
aBlob
)
override
;
virtual
nsresult
AddNameDirectoryPair
(
const
nsAString
&
aName
Directory
*
aDirectory
)
override
;
virtual
nsresult
GetEncodedSubmission
(
nsIURI
*
aURI
nsIInputStream
*
*
aPostDataStream
)
override
;
void
GetContentType
(
nsACString
&
aContentType
)
{
aContentType
=
NS_LITERAL_CSTRING
(
"
multipart
/
form
-
data
;
boundary
=
"
)
+
mBoundary
;
}
nsIInputStream
*
GetSubmissionBody
(
uint64_t
*
aContentLength
)
;
protected
:
nsresult
AddPostDataStream
(
)
;
private
:
void
AddDataChunk
(
const
nsACString
&
aName
const
nsACString
&
aFilename
const
nsACString
&
aContentType
nsIInputStream
*
aInputStream
uint64_t
aInputStreamSize
)
;
nsCOMPtr
<
nsIMultiplexInputStream
>
mPostDataStream
;
nsCString
mPostDataChunk
;
nsCString
mBoundary
;
uint64_t
mTotalLength
;
}
;
}
}
#
endif
