#
ifndef
mozilla_dom_HTMLSelectElement_h
#
define
mozilla_dom_HTMLSelectElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ConstraintValidation
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
#
include
"
mozilla
/
dom
/
HTMLOptionsCollection
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
nsCheapSets
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
#
include
"
nsContentUtils
.
h
"
class
nsContentList
;
class
nsIDOMHTMLOptionElement
;
class
nsIHTMLCollection
;
class
nsISelectControlFrame
;
namespace
mozilla
{
class
ErrorResult
;
class
EventChainPostVisitor
;
class
EventChainPreVisitor
;
class
SelectContentData
;
class
PresState
;
namespace
dom
{
class
FormData
;
class
HTMLSelectElement
;
class
MOZ_STACK_CLASS
SafeOptionListMutation
{
public
:
SafeOptionListMutation
(
nsIContent
*
aSelect
nsIContent
*
aParent
nsIContent
*
aKid
uint32_t
aIndex
bool
aNotify
)
;
~
SafeOptionListMutation
(
)
;
void
MutationFailed
(
)
{
mNeedsRebuild
=
true
;
}
private
:
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
{
return
0
;
}
static
void
operator
delete
(
void
*
size_t
)
{
}
RefPtr
<
HTMLSelectElement
>
mSelect
;
bool
mTopLevelMutation
;
bool
mNeedsRebuild
;
const
bool
mNotify
;
RefPtr
<
HTMLOptionElement
>
mInitialSelectedOption
;
nsMutationGuard
mGuard
;
}
;
class
HTMLSelectElement
final
:
public
nsGenericHTMLFormControlElementWithState
public
ConstraintValidation
{
public
:
enum
class
OptionFlag
:
uint8_t
{
IsSelected
ClearAll
SetDisabled
Notify
NoReselect
InsertingOptions
}
;
using
OptionFlags
=
EnumSet
<
OptionFlag
>
;
using
ConstraintValidation
:
:
GetValidationMessage
;
explicit
HTMLSelectElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
=
NOT_FROM_PARSER
)
;
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLSelectElement
select
)
NS_DECL_ISUPPORTS_INHERITED
virtual
int32_t
TabIndexDefault
(
)
override
;
virtual
bool
IsInteractiveHTMLContent
(
)
const
override
{
return
true
;
}
void
GetAutocomplete
(
DOMString
&
aValue
)
;
void
SetAutocomplete
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
autocomplete
aValue
aRv
)
;
}
void
GetAutocompleteInfo
(
AutocompleteInfo
&
aInfo
)
;
bool
Disabled
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
disabled
)
;
}
void
SetDisabled
(
bool
aVal
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
disabled
aVal
aRv
)
;
}
bool
Multiple
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
multiple
)
;
}
void
SetMultiple
(
bool
aVal
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
multiple
aVal
aRv
)
;
}
void
GetName
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
)
;
}
void
SetName
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aName
aRv
)
;
}
bool
Required
(
)
const
{
return
State
(
)
.
HasState
(
ElementState
:
:
REQUIRED
)
;
}
void
SetRequired
(
bool
aVal
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
required
aVal
aRv
)
;
}
uint32_t
Size
(
)
const
{
return
GetUnsignedIntAttr
(
nsGkAtoms
:
:
size
0
)
;
}
void
SetSize
(
uint32_t
aSize
ErrorResult
&
aRv
)
{
SetUnsignedIntAttr
(
nsGkAtoms
:
:
size
aSize
0
aRv
)
;
}
void
GetType
(
nsAString
&
aValue
)
;
HTMLOptionsCollection
*
Options
(
)
const
{
return
mOptions
;
}
uint32_t
Length
(
)
const
{
return
mOptions
-
>
Length
(
)
;
}
void
SetLength
(
uint32_t
aLength
ErrorResult
&
aRv
)
;
Element
*
IndexedGetter
(
uint32_t
aIdx
bool
&
aFound
)
const
{
return
mOptions
-
>
IndexedGetter
(
aIdx
aFound
)
;
}
HTMLOptionElement
*
Item
(
uint32_t
aIdx
)
const
{
return
mOptions
-
>
ItemAsOption
(
aIdx
)
;
}
HTMLOptionElement
*
NamedItem
(
const
nsAString
&
aName
)
const
{
return
mOptions
-
>
GetNamedItem
(
aName
)
;
}
void
Add
(
const
HTMLOptionElementOrHTMLOptGroupElement
&
aElement
const
Nullable
<
HTMLElementOrLong
>
&
aBefore
ErrorResult
&
aRv
)
;
void
Remove
(
int32_t
aIndex
)
const
;
void
IndexedSetter
(
uint32_t
aIndex
HTMLOptionElement
*
aOption
ErrorResult
&
aRv
)
{
mOptions
-
>
IndexedSetter
(
aIndex
aOption
aRv
)
;
}
static
bool
MatchSelectedOptions
(
Element
*
aElement
int32_t
nsAtom
*
void
*
)
;
nsIHTMLCollection
*
SelectedOptions
(
)
;
int32_t
SelectedIndex
(
)
const
{
return
mSelectedIndex
;
}
void
SetSelectedIndex
(
int32_t
aIdx
)
{
SetSelectedIndexInternal
(
aIdx
true
)
;
}
void
GetValue
(
DOMString
&
aValue
)
const
;
void
SetValue
(
const
nsAString
&
aValue
)
;
void
SetCustomValidity
(
const
nsAString
&
aError
)
;
using
nsINode
:
:
Remove
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
MOZ_CAN_RUN_SCRIPT
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
bool
IsHTMLFocusable
(
bool
aWithMouse
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
override
;
virtual
void
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
ErrorResult
&
aRv
)
override
;
virtual
void
RemoveChildNode
(
nsIContent
*
aKid
bool
aNotify
)
override
;
virtual
bool
IsDisabledForEvents
(
WidgetEvent
*
aEvent
)
override
;
void
SaveState
(
)
override
;
bool
RestoreState
(
PresState
*
aState
)
override
;
NS_IMETHOD
Reset
(
)
override
;
NS_IMETHOD
SubmitNamesValues
(
FormData
*
aFormData
)
override
;
virtual
void
FieldSetDisabledChanged
(
bool
aNotify
)
override
;
ElementState
IntrinsicState
(
)
const
override
;
NS_IMETHOD
WillAddOptions
(
nsIContent
*
aOptions
nsIContent
*
aParent
int32_t
aContentIndex
bool
aNotify
)
;
NS_IMETHOD
WillRemoveOptions
(
nsIContent
*
aParent
int32_t
aContentIndex
bool
aNotify
)
;
NS_IMETHOD
IsOptionDisabled
(
int32_t
aIndex
bool
*
aIsDisabled
)
;
bool
IsOptionDisabled
(
HTMLOptionElement
*
aOption
)
const
;
bool
SetOptionsSelectedByIndex
(
int32_t
aStartIndex
int32_t
aEndIndex
OptionFlags
aOptionsMask
)
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
)
override
;
virtual
void
BeforeSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValueOrString
*
aValue
bool
aNotify
)
override
;
virtual
void
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
virtual
void
DoneAddingChildren
(
bool
aHaveNotified
)
override
;
virtual
bool
IsDoneAddingChildren
(
)
override
{
return
mIsDoneAddingChildren
;
}
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
virtual
nsChangeHint
GetAttributeChangeHint
(
const
nsAtom
*
aAttribute
int32_t
aModType
)
const
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLSelectElement
nsGenericHTMLFormControlElementWithState
)
HTMLOptionsCollection
*
GetOptions
(
)
{
return
mOptions
;
}
nsresult
GetValidationMessage
(
nsAString
&
aValidationMessage
ValidityStateType
aType
)
override
;
void
UpdateValueMissingValidityState
(
)
;
void
Add
(
nsGenericHTMLElement
&
aElement
nsGenericHTMLElement
*
aBefore
ErrorResult
&
aError
)
;
void
Add
(
nsGenericHTMLElement
&
aElement
int32_t
aIndex
ErrorResult
&
aError
)
{
nsIContent
*
beforeContent
=
mOptions
-
>
GetElementAt
(
aIndex
)
;
return
Add
(
aElement
nsGenericHTMLElement
:
:
FromNodeOrNull
(
beforeContent
)
aError
)
;
}
bool
IsCombobox
(
)
const
{
return
!
Multiple
(
)
&
&
Size
(
)
<
=
1
;
}
bool
OpenInParentProcess
(
)
const
{
return
mIsOpenInParentProcess
;
}
void
SetOpenInParentProcess
(
bool
aVal
)
{
mIsOpenInParentProcess
=
aVal
;
}
void
GetPreviewValue
(
nsAString
&
aValue
)
{
aValue
=
mPreviewValue
;
}
void
SetPreviewValue
(
const
nsAString
&
aValue
)
;
protected
:
virtual
~
HTMLSelectElement
(
)
=
default
;
friend
class
SafeOptionListMutation
;
bool
IsOptionSelectedByIndex
(
int32_t
aIndex
)
const
;
void
FindSelectedIndex
(
int32_t
aStartIndex
bool
aNotify
)
;
bool
SelectSomething
(
bool
aNotify
)
;
bool
CheckSelectSomething
(
bool
aNotify
)
;
void
OnOptionSelected
(
nsISelectControlFrame
*
aSelectFrame
int32_t
aIndex
bool
aSelected
bool
aChangeOptionState
bool
aNotify
)
;
void
RestoreStateTo
(
const
SelectContentData
&
aNewSelected
)
;
void
InsertOptionsIntoList
(
nsIContent
*
aOptions
int32_t
aListIndex
int32_t
aDepth
bool
aNotify
)
;
nsresult
RemoveOptionsFromList
(
nsIContent
*
aOptions
int32_t
aListIndex
int32_t
aDepth
bool
aNotify
)
;
void
UpdateBarredFromConstraintValidation
(
)
;
bool
IsValueMissing
(
)
const
;
int32_t
GetOptionIndexAt
(
nsIContent
*
aOptions
)
;
int32_t
GetOptionIndexAfter
(
nsIContent
*
aOptions
)
;
int32_t
GetFirstOptionIndex
(
nsIContent
*
aOptions
)
;
int32_t
GetFirstChildOptionIndex
(
nsIContent
*
aOptions
int32_t
aStartIndex
int32_t
aEndIndex
)
;
nsISelectControlFrame
*
GetSelectFrame
(
)
;
void
DispatchContentReset
(
)
;
void
RebuildOptionsArray
(
bool
aNotify
)
;
#
ifdef
DEBUG
void
VerifyOptionsArray
(
)
;
#
endif
void
SetSelectedIndexInternal
(
int32_t
aIndex
bool
aNotify
)
;
void
SetSelectionChanged
(
bool
aValue
bool
aNotify
)
;
void
UpdateSelectedOptions
(
)
;
bool
ShouldShowValidityUI
(
)
const
{
if
(
mForm
&
&
mForm
-
>
HasEverTriedInvalidSubmit
(
)
)
{
return
true
;
}
return
mSelectionHasChanged
;
}
RefPtr
<
HTMLOptionsCollection
>
mOptions
;
nsContentUtils
:
:
AutocompleteAttrState
mAutocompleteAttrState
;
nsContentUtils
:
:
AutocompleteAttrState
mAutocompleteInfoState
;
bool
mIsDoneAddingChildren
:
1
;
bool
mDisabledChanged
:
1
;
bool
mMutating
:
1
;
bool
mInhibitStateRestoration
:
1
;
bool
mSelectionHasChanged
:
1
;
bool
mDefaultSelectionSet
:
1
;
bool
mCanShowInvalidUI
:
1
;
bool
mCanShowValidUI
:
1
;
bool
mIsOpenInParentProcess
:
1
;
uint32_t
mNonOptionChildren
;
uint32_t
mOptGroupCount
;
int32_t
mSelectedIndex
;
UniquePtr
<
SelectContentData
>
mRestoreState
;
RefPtr
<
nsContentList
>
mSelectedOptions
;
nsString
mPreviewValue
;
private
:
static
void
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
MappedDeclarations
&
)
;
}
;
}
}
#
endif
