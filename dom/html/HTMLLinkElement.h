#
ifndef
mozilla_dom_HTMLLinkElement_h
#
define
mozilla_dom_HTMLLinkElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIDOMHTMLLinkElement
.
h
"
#
include
"
nsStyleLinkElement
.
h
"
namespace
mozilla
{
class
EventChainPostVisitor
;
class
EventChainPreVisitor
;
namespace
dom
{
class
HTMLLinkElement
final
:
public
nsGenericHTMLElement
public
nsIDOMHTMLLinkElement
public
nsStyleLinkElement
public
Link
{
public
:
explicit
HTMLLinkElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLLinkElement
nsGenericHTMLElement
)
NS_DECL_NSIDOMHTMLLINKELEMENT
NS_IMPL_FROMCONTENT_HTML_WITH_TAG
(
HTMLLinkElement
link
)
;
NS_DECL_ADDSIZEOFEXCLUDINGTHIS
void
LinkAdded
(
)
;
void
LinkRemoved
(
)
;
virtual
nsresult
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
nsresult
BeforeSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValueOrString
*
aValue
bool
aNotify
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
bool
aNotify
)
override
;
virtual
bool
IsLink
(
nsIURI
*
*
aURI
)
const
override
;
virtual
already_AddRefed
<
nsIURI
>
GetHrefURI
(
)
const
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
override
;
virtual
void
GetLinkTarget
(
nsAString
&
aTarget
)
override
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
void
CreateAndDispatchEvent
(
nsIDocument
*
aDoc
const
nsAString
&
aEventName
)
;
virtual
void
OnDNSPrefetchDeferred
(
)
override
;
virtual
void
OnDNSPrefetchRequested
(
)
override
;
virtual
bool
HasDeferredDNSPrefetchRequest
(
)
override
;
bool
Disabled
(
)
;
void
SetDisabled
(
bool
aDisabled
)
;
void
SetHref
(
const
nsAString
&
aHref
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
href
aHref
aRv
)
;
}
void
GetCrossOrigin
(
nsAString
&
aResult
)
{
GetEnumAttr
(
nsGkAtoms
:
:
crossorigin
nullptr
aResult
)
;
}
void
SetCrossOrigin
(
const
nsAString
&
aCrossOrigin
ErrorResult
&
aError
)
{
SetOrRemoveNullableStringAttr
(
nsGkAtoms
:
:
crossorigin
aCrossOrigin
aError
)
;
}
void
SetRel
(
const
nsAString
&
aRel
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
rel
aRel
aRv
)
;
}
nsDOMTokenList
*
RelList
(
)
;
void
SetMedia
(
const
nsAString
&
aMedia
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
media
aMedia
aRv
)
;
}
void
SetHreflang
(
const
nsAString
&
aHreflang
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
hreflang
aHreflang
aRv
)
;
}
void
GetAs
(
nsAString
&
aResult
)
;
void
SetAs
(
const
nsAString
&
aAs
ErrorResult
&
aRv
)
{
SetAttr
(
nsGkAtoms
:
:
as
aAs
aRv
)
;
}
nsDOMTokenList
*
Sizes
(
)
{
return
GetTokenList
(
nsGkAtoms
:
:
sizes
)
;
}
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aType
aRv
)
;
}
void
SetCharset
(
const
nsAString
&
aCharset
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
charset
aCharset
aRv
)
;
}
void
SetRev
(
const
nsAString
&
aRev
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
rev
aRev
aRv
)
;
}
void
SetTarget
(
const
nsAString
&
aTarget
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
target
aTarget
aRv
)
;
}
void
GetIntegrity
(
nsAString
&
aIntegrity
)
const
{
GetHTMLAttr
(
nsGkAtoms
:
:
integrity
aIntegrity
)
;
}
void
SetIntegrity
(
const
nsAString
&
aIntegrity
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
integrity
aIntegrity
aRv
)
;
}
void
SetReferrerPolicy
(
const
nsAString
&
aReferrer
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
referrerpolicy
aReferrer
aError
)
;
}
void
GetReferrerPolicy
(
nsAString
&
aReferrer
)
{
GetEnumAttr
(
nsGkAtoms
:
:
referrerpolicy
EmptyCString
(
)
.
get
(
)
aReferrer
)
;
}
mozilla
:
:
net
:
:
ReferrerPolicy
GetLinkReferrerPolicy
(
)
override
{
return
GetReferrerPolicyAsEnum
(
)
;
}
virtual
CORSMode
GetCORSMode
(
)
const
override
;
virtual
void
NodeInfoChanged
(
nsIDocument
*
aOldDoc
)
final
override
{
ClearHasPendingLinkUpdate
(
)
;
nsGenericHTMLElement
:
:
NodeInfoChanged
(
aOldDoc
)
;
}
protected
:
virtual
~
HTMLLinkElement
(
)
;
virtual
already_AddRefed
<
nsIURI
>
GetStyleSheetURL
(
bool
*
aIsInline
)
override
;
virtual
void
GetStyleSheetInfo
(
nsAString
&
aTitle
nsAString
&
aType
nsAString
&
aMedia
bool
*
aIsScoped
bool
*
aIsAlternate
)
override
;
protected
:
RefPtr
<
nsDOMTokenList
>
mRelList
;
}
;
}
}
#
endif
