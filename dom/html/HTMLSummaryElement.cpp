#
include
"
mozilla
/
dom
/
HTMLSummaryElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDetailsElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLElementBinding
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Summary
)
namespace
mozilla
{
namespace
dom
{
HTMLSummaryElement
:
:
~
HTMLSummaryElement
(
)
{
}
NS_IMPL_ELEMENT_CLONE
(
HTMLSummaryElement
)
nsresult
HTMLSummaryElement
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
nsresult
rv
=
NS_OK
;
if
(
!
aVisitor
.
mPresContext
)
{
return
rv
;
}
if
(
aVisitor
.
mEventStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
rv
;
}
auto
toggleDetails
=
false
;
auto
*
event
=
aVisitor
.
mEvent
;
if
(
event
-
>
HasMouseEventMessage
(
)
)
{
auto
*
mouseEvent
=
event
-
>
AsMouseEvent
(
)
;
toggleDetails
=
mouseEvent
-
>
IsLeftClickEvent
(
)
;
}
if
(
!
toggleDetails
|
|
!
IsMainSummary
(
)
)
{
return
rv
;
}
auto
*
details
=
GetDetails
(
)
;
MOZ_ASSERT
(
details
"
Expected
to
find
details
since
this
is
the
main
summary
!
"
)
;
if
(
details
-
>
GetPrimaryFrame
(
)
)
{
details
-
>
ToggleOpen
(
)
;
aVisitor
.
mEventStatus
=
nsEventStatus_eConsumeNoDefault
;
}
return
rv
;
}
bool
HTMLSummaryElement
:
:
IsMainSummary
(
)
const
{
HTMLDetailsElement
*
details
=
GetDetails
(
)
;
if
(
!
details
)
{
return
false
;
}
return
details
-
>
GetFirstSummary
(
)
=
=
this
|
|
IsRootOfNativeAnonymousSubtree
(
)
;
}
HTMLDetailsElement
*
HTMLSummaryElement
:
:
GetDetails
(
)
const
{
return
HTMLDetailsElement
:
:
FromContentOrNull
(
GetParent
(
)
)
;
}
JSObject
*
HTMLSummaryElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
