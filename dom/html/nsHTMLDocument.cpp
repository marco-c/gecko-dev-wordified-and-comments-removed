#
include
"
nsHTMLDocument
.
h
"
#
include
"
nsIContentPolicy
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
HTMLAllCollection
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIDocumentLoader
.
h
"
#
include
"
nsIHTMLContentSink
.
h
"
#
include
"
nsIXMLContentSink
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsHTMLStyleSheet
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIPrivateBrowsingChannel
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsDocShellLoadTypes
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsNodeUtils
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsParserCIID
.
h
"
#
include
"
mozilla
/
parser
/
PrototypeDocumentParser
.
h
"
#
include
"
mozilla
/
dom
/
PrototypeDocumentContentSink
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
DocumentInlines
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIScriptElement
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsBidiUtils
.
h
"
#
include
"
mozilla
/
dom
/
FallbackEncoding
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
IdentifierMapEntry
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
nsIEditingSession
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsIPlaintextEditor
.
h
"
#
include
"
nsIEditorStyleSheets
.
h
"
#
include
"
nsIInlineSpellChecker
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsCCUncollectableMarker
.
h
"
#
include
"
nsHtml5Module
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsHtml5TreeOpExecutor
.
h
"
#
include
"
nsHtml5Parser
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
nsIImageDocument
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDocumentBinding
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
ShadowIncludingTreeIterator
.
h
"
#
include
"
nsCharsetSource
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIStructuredCloneContainer
.
h
"
#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCommandParams
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
#
define
NS_MAX_DOCUMENT_WRITE_DEPTH
20
#
include
"
prtime
.
h
"
static
NS_DEFINE_CID
(
kCParserCID
NS_PARSER_CID
)
;
static
bool
ConvertToMidasInternalCommand
(
const
nsAString
&
inCommandID
const
nsAString
&
inParam
nsACString
&
outCommandID
nsACString
&
outParam
bool
&
isBoolean
bool
&
boolValue
)
;
static
bool
ConvertToMidasInternalCommand
(
const
nsAString
&
inCommandID
nsACString
&
outCommandID
)
;
static
bool
IsAsciiCompatible
(
const
Encoding
*
aEncoding
)
{
return
aEncoding
-
>
IsAsciiCompatible
(
)
|
|
aEncoding
=
=
ISO_2022_JP_ENCODING
;
}
nsresult
NS_NewHTMLDocument
(
Document
*
*
aInstancePtrResult
bool
aLoadedAsData
)
{
RefPtr
<
nsHTMLDocument
>
doc
=
new
nsHTMLDocument
(
)
;
nsresult
rv
=
doc
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aInstancePtrResult
=
nullptr
;
return
rv
;
}
doc
-
>
SetLoadedAsData
(
aLoadedAsData
)
;
doc
.
forget
(
aInstancePtrResult
)
;
return
NS_OK
;
}
nsHTMLDocument
:
:
nsHTMLDocument
(
)
:
Document
(
"
text
/
html
"
)
mContentListHolder
(
nullptr
)
mNumForms
(
0
)
mWriteLevel
(
0
)
mLoadFlags
(
0
)
mTooDeepWriteRecursion
(
false
)
mDisableDocWrite
(
false
)
mWarnedWidthHeight
(
false
)
mContentEditableCount
(
0
)
mEditingState
(
EditingState
:
:
eOff
)
mDisableCookieAccess
(
false
)
mPendingMaybeEditingStateChanged
(
false
)
mHasBeenEditable
(
false
)
mIsPlainText
(
false
)
{
mType
=
eHTML
;
mDefaultElementType
=
kNameSpaceID_XHTML
;
mCompatMode
=
eCompatibility_NavQuirks
;
}
nsHTMLDocument
:
:
~
nsHTMLDocument
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
nsHTMLDocument
Document
mAll
mMidasCommandManager
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
nsHTMLDocument
Document
nsIHTMLDocument
)
JSObject
*
nsHTMLDocument
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLDocument_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsresult
nsHTMLDocument
:
:
Init
(
)
{
nsresult
rv
=
Document
:
:
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
CSSLoader
(
)
-
>
SetCompatibilityMode
(
mCompatMode
)
;
return
NS_OK
;
}
void
nsHTMLDocument
:
:
Reset
(
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
)
{
Document
:
:
Reset
(
aChannel
aLoadGroup
)
;
if
(
aChannel
)
{
aChannel
-
>
GetLoadFlags
(
&
mLoadFlags
)
;
}
}
void
nsHTMLDocument
:
:
ResetToURI
(
nsIURI
*
aURI
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
)
{
mLoadFlags
=
nsIRequest
:
:
LOAD_NORMAL
;
Document
:
:
ResetToURI
(
aURI
aLoadGroup
aPrincipal
)
;
mImages
=
nullptr
;
mApplets
=
nullptr
;
mEmbeds
=
nullptr
;
mLinks
=
nullptr
;
mAnchors
=
nullptr
;
mScripts
=
nullptr
;
mForms
=
nullptr
;
SetContentTypeInternal
(
nsDependentCString
(
"
text
/
html
"
)
)
;
}
void
nsHTMLDocument
:
:
TryHintCharset
(
nsIContentViewer
*
aCv
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
aCv
)
{
int32_t
requestCharsetSource
;
nsresult
rv
=
aCv
-
>
GetHintCharacterSetSource
(
&
requestCharsetSource
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
kCharsetUninitialized
!
=
requestCharsetSource
)
{
auto
requestCharset
=
aCv
-
>
GetHintCharset
(
)
;
aCv
-
>
SetHintCharacterSetSource
(
(
int32_t
)
(
kCharsetUninitialized
)
)
;
if
(
requestCharsetSource
<
=
aCharsetSource
)
return
;
if
(
requestCharset
&
&
IsAsciiCompatible
(
requestCharset
)
)
{
aCharsetSource
=
requestCharsetSource
;
aEncoding
=
WrapNotNull
(
requestCharset
)
;
}
}
}
}
void
nsHTMLDocument
:
:
TryUserForcedCharset
(
nsIContentViewer
*
aCv
nsIDocShell
*
aDocShell
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
kCharsetFromUserForced
<
=
aCharsetSource
)
return
;
if
(
WillIgnoreCharsetOverride
(
)
|
|
!
IsAsciiCompatible
(
aEncoding
)
)
{
return
;
}
const
Encoding
*
forceCharsetFromDocShell
=
nullptr
;
if
(
aCv
)
{
forceCharsetFromDocShell
=
aCv
-
>
GetForceCharset
(
)
;
}
if
(
forceCharsetFromDocShell
&
&
IsAsciiCompatible
(
forceCharsetFromDocShell
)
)
{
aEncoding
=
WrapNotNull
(
forceCharsetFromDocShell
)
;
aCharsetSource
=
kCharsetFromUserForced
;
return
;
}
if
(
aDocShell
)
{
auto
encoding
=
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetForcedCharset
(
)
;
if
(
encoding
)
{
if
(
!
IsAsciiCompatible
(
encoding
)
)
{
return
;
}
aEncoding
=
WrapNotNull
(
encoding
)
;
aCharsetSource
=
kCharsetFromUserForced
;
aDocShell
-
>
SetForcedCharset
(
NS_LITERAL_CSTRING
(
"
"
)
)
;
}
}
}
void
nsHTMLDocument
:
:
TryCacheCharset
(
nsICachingChannel
*
aCachingChannel
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
nsresult
rv
;
if
(
kCharsetFromCache
<
=
aCharsetSource
)
{
return
;
}
nsCString
cachedCharset
;
rv
=
aCachingChannel
-
>
GetCacheTokenCachedCharset
(
cachedCharset
)
;
if
(
NS_FAILED
(
rv
)
|
|
cachedCharset
.
IsEmpty
(
)
)
{
return
;
}
const
Encoding
*
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
cachedCharset
)
;
if
(
!
encoding
)
{
return
;
}
if
(
!
encoding
-
>
IsAsciiCompatible
(
)
&
&
encoding
!
=
ISO_2022_JP_ENCODING
)
{
return
;
}
aEncoding
=
WrapNotNull
(
encoding
)
;
aCharsetSource
=
kCharsetFromCache
;
}
void
nsHTMLDocument
:
:
TryParentCharset
(
nsIDocShell
*
aDocShell
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
!
aDocShell
)
{
return
;
}
if
(
aCharsetSource
>
=
kCharsetFromParentForced
)
{
return
;
}
int32_t
parentSource
;
const
Encoding
*
parentCharset
;
nsCOMPtr
<
nsIPrincipal
>
parentPrincipal
;
aDocShell
-
>
GetParentCharset
(
parentCharset
&
parentSource
getter_AddRefs
(
parentPrincipal
)
)
;
if
(
!
parentCharset
)
{
return
;
}
if
(
kCharsetFromParentForced
=
=
parentSource
|
|
kCharsetFromUserForced
=
=
parentSource
)
{
if
(
WillIgnoreCharsetOverride
(
)
|
|
!
IsAsciiCompatible
(
aEncoding
)
|
|
!
IsAsciiCompatible
(
parentCharset
)
)
{
return
;
}
aEncoding
=
WrapNotNull
(
parentCharset
)
;
aCharsetSource
=
kCharsetFromParentForced
;
return
;
}
if
(
aCharsetSource
>
=
kCharsetFromParentFrame
)
{
return
;
}
if
(
kCharsetFromCache
<
=
parentSource
)
{
if
(
!
NodePrincipal
(
)
-
>
Equals
(
parentPrincipal
)
|
|
!
IsAsciiCompatible
(
parentCharset
)
)
{
return
;
}
aEncoding
=
WrapNotNull
(
parentCharset
)
;
aCharsetSource
=
kCharsetFromParentFrame
;
}
}
void
nsHTMLDocument
:
:
TryTLD
(
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
aCharsetSource
>
=
kCharsetFromTopLevelDomain
)
{
return
;
}
if
(
!
FallbackEncoding
:
:
sGuessFallbackFromTopLevelDomain
)
{
return
;
}
if
(
!
mDocumentURI
)
{
return
;
}
nsAutoCString
host
;
mDocumentURI
-
>
GetAsciiHost
(
host
)
;
if
(
host
.
IsEmpty
(
)
)
{
return
;
}
if
(
host
.
Last
(
)
=
=
'
.
'
)
{
host
.
SetLength
(
host
.
Length
(
)
-
1
)
;
if
(
host
.
IsEmpty
(
)
)
{
return
;
}
}
if
(
host
.
Last
(
)
=
=
'
.
'
)
{
return
;
}
int32_t
index
=
host
.
RFindChar
(
'
.
'
)
;
if
(
index
=
=
kNotFound
)
{
return
;
}
nsAutoCString
tld
;
ToLowerCase
(
Substring
(
host
index
+
1
host
.
Length
(
)
-
(
index
+
1
)
)
tld
)
;
if
(
!
FallbackEncoding
:
:
IsParticipatingTopLevelDomain
(
tld
)
)
{
return
;
}
bool
seenNonDigit
=
false
;
for
(
size_t
i
=
0
;
i
<
tld
.
Length
(
)
;
+
+
i
)
{
char
c
=
tld
.
CharAt
(
i
)
;
if
(
c
<
'
0
'
|
|
c
>
'
9
'
)
{
seenNonDigit
=
true
;
break
;
}
}
if
(
!
seenNonDigit
)
{
return
;
}
aCharsetSource
=
kCharsetFromTopLevelDomain
;
aEncoding
=
FallbackEncoding
:
:
FromTopLevelDomain
(
tld
)
;
}
void
nsHTMLDocument
:
:
TryFallback
(
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
kCharsetFromFallback
<
=
aCharsetSource
)
return
;
aCharsetSource
=
kCharsetFromFallback
;
aEncoding
=
FallbackEncoding
:
:
FromLocale
(
)
;
}
bool
ShouldUsePrototypeDocument
(
nsIChannel
*
aChannel
nsIDocShell
*
aDocShell
)
{
if
(
!
aChannel
|
|
!
aDocShell
|
|
!
StaticPrefs
:
:
dom_prototype_document_cache_enabled
(
)
)
{
return
false
;
}
if
(
aDocShell
-
>
ItemType
(
)
!
=
nsIDocShellTreeItem
:
:
typeChrome
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
originalURI
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
;
return
IsChromeURI
(
originalURI
)
&
&
originalURI
-
>
GetSpecOrDefault
(
)
.
EqualsLiteral
(
BROWSER_CHROME_URL_QUOTED
)
;
}
nsresult
nsHTMLDocument
:
:
StartDocumentLoad
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsISupports
*
aContainer
nsIStreamListener
*
*
aDocListener
bool
aReset
nsIContentSink
*
aSink
)
{
if
(
!
aCommand
)
{
MOZ_ASSERT
(
false
"
Command
is
mandatory
"
)
;
return
NS_ERROR_INVALID_POINTER
;
}
if
(
aSink
)
{
MOZ_ASSERT
(
false
"
Got
a
sink
override
.
Should
not
happen
for
HTML
doc
.
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
if
(
mType
!
=
eHTML
)
{
MOZ_ASSERT
(
mType
=
=
eXHTML
)
;
MOZ_ASSERT
(
false
"
Must
not
set
HTML
doc
to
XHTML
mode
before
load
start
.
"
)
;
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
nsAutoCString
contentType
;
aChannel
-
>
GetContentType
(
contentType
)
;
bool
view
=
!
strcmp
(
aCommand
"
view
"
)
|
|
!
strcmp
(
aCommand
"
external
-
resource
"
)
;
bool
viewSource
=
!
strcmp
(
aCommand
"
view
-
source
"
)
;
bool
asData
=
!
strcmp
(
aCommand
kLoadAsData
)
;
if
(
!
(
view
|
|
viewSource
|
|
asData
)
)
{
MOZ_ASSERT
(
false
"
Bad
parser
command
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
bool
html
=
contentType
.
EqualsLiteral
(
TEXT_HTML
)
;
bool
xhtml
=
!
html
&
&
(
contentType
.
EqualsLiteral
(
APPLICATION_XHTML_XML
)
|
|
contentType
.
EqualsLiteral
(
APPLICATION_WAPXHTML_XML
)
)
;
mIsPlainText
=
!
html
&
&
!
xhtml
&
&
nsContentUtils
:
:
IsPlainTextType
(
contentType
)
;
if
(
!
(
html
|
|
xhtml
|
|
mIsPlainText
|
|
viewSource
)
)
{
MOZ_ASSERT
(
false
"
Channel
with
bad
content
type
.
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
bool
forceUtf8
=
mIsPlainText
&
&
nsContentUtils
:
:
IsUtf8OnlyPlainTextType
(
contentType
)
;
bool
loadAsHtml5
=
true
;
if
(
!
viewSource
&
&
xhtml
)
{
mType
=
eXHTML
;
SetCompatibilityMode
(
eCompatibility_FullStandards
)
;
loadAsHtml5
=
false
;
}
if
(
loadAsHtml5
&
&
view
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
uri
)
)
;
bool
isAbout
=
false
;
if
(
uri
&
&
NS_SUCCEEDED
(
uri
-
>
SchemeIs
(
"
about
"
&
isAbout
)
)
&
&
isAbout
)
{
if
(
uri
-
>
GetSpecOrDefault
(
)
.
EqualsLiteral
(
"
about
:
blank
"
)
)
{
loadAsHtml5
=
false
;
}
}
}
nsresult
rv
=
Document
:
:
StartDocumentLoad
(
aCommand
aChannel
aLoadGroup
aContainer
aDocListener
aReset
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
aChannel
-
>
GetSecurityInfo
(
getter_AddRefs
(
mSecurityInfo
)
)
;
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsICachingChannel
>
cachingChan
=
do_QueryInterface
(
aChannel
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
(
do_QueryInterface
(
aContainer
)
)
;
bool
loadWithPrototype
=
false
;
if
(
loadAsHtml5
)
{
mParser
=
nsHtml5Module
:
:
NewHtml5Parser
(
)
;
if
(
mIsPlainText
)
{
if
(
viewSource
)
{
mParser
-
>
MarkAsNotScriptCreated
(
"
view
-
source
-
plain
"
)
;
}
else
{
mParser
-
>
MarkAsNotScriptCreated
(
"
plain
-
text
"
)
;
}
}
else
if
(
viewSource
&
&
!
html
)
{
mParser
-
>
MarkAsNotScriptCreated
(
"
view
-
source
-
xml
"
)
;
}
else
{
mParser
-
>
MarkAsNotScriptCreated
(
aCommand
)
;
}
}
else
if
(
ShouldUsePrototypeDocument
(
aChannel
docShell
)
)
{
loadWithPrototype
=
true
;
nsCOMPtr
<
nsIURI
>
originalURI
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
;
mParser
=
new
mozilla
:
:
parser
:
:
PrototypeDocumentParser
(
originalURI
this
)
;
}
else
{
mParser
=
do_CreateInstance
(
kCParserCID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentAsItem
;
if
(
docShell
)
{
docShell
-
>
GetSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
}
nsCOMPtr
<
nsIDocShell
>
parent
(
do_QueryInterface
(
parentAsItem
)
)
;
nsCOMPtr
<
nsIContentViewer
>
parentContentViewer
;
if
(
parent
)
{
rv
=
parent
-
>
GetContentViewer
(
getter_AddRefs
(
parentContentViewer
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIContentViewer
>
cv
;
if
(
docShell
)
{
docShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
}
if
(
!
cv
)
{
cv
=
parentContentViewer
.
forget
(
)
;
}
nsAutoCString
urlSpec
;
uri
-
>
GetSpec
(
urlSpec
)
;
#
ifdef
DEBUG_charset
printf
(
"
Determining
charset
for
%
s
\
n
"
urlSpec
.
get
(
)
)
;
#
endif
int32_t
charsetSource
;
auto
encoding
=
UTF_8_ENCODING
;
nsHtml5TreeOpExecutor
*
executor
=
nullptr
;
if
(
loadAsHtml5
)
{
executor
=
static_cast
<
nsHtml5TreeOpExecutor
*
>
(
mParser
-
>
GetContentSink
(
)
)
;
if
(
mReferrerPolicySet
)
{
executor
-
>
SetSpeculationReferrerPolicy
(
static_cast
<
ReferrerPolicy
>
(
mReferrerPolicy
)
)
;
}
}
if
(
forceUtf8
)
{
charsetSource
=
kCharsetFromUtf8OnlyMime
;
}
else
if
(
!
IsHTMLDocument
(
)
|
|
!
docShell
)
{
charsetSource
=
IsHTMLDocument
(
)
?
kCharsetFromFallback
:
kCharsetFromDocTypeDefault
;
TryChannelCharset
(
aChannel
charsetSource
encoding
executor
)
;
}
else
{
NS_ASSERTION
(
docShell
"
Unexpected
null
value
"
)
;
charsetSource
=
kCharsetUninitialized
;
TryChannelCharset
(
aChannel
charsetSource
encoding
executor
)
;
TryUserForcedCharset
(
cv
docShell
charsetSource
encoding
)
;
TryHintCharset
(
cv
charsetSource
encoding
)
;
TryParentCharset
(
docShell
charsetSource
encoding
)
;
if
(
cachingChan
&
&
!
urlSpec
.
IsEmpty
(
)
)
{
TryCacheCharset
(
cachingChan
charsetSource
encoding
)
;
}
TryTLD
(
charsetSource
encoding
)
;
TryFallback
(
charsetSource
encoding
)
;
}
SetDocumentCharacterSetSource
(
charsetSource
)
;
SetDocumentCharacterSet
(
encoding
)
;
if
(
cachingChan
)
{
nsAutoCString
charset
;
encoding
-
>
Name
(
charset
)
;
rv
=
cachingChan
-
>
SetCacheTokenCachedCharset
(
charset
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
cannot
SetMetaDataElement
"
)
;
rv
=
NS_OK
;
}
rv
=
NS_OK
;
nsCOMPtr
<
nsIStreamListener
>
listener
=
mParser
-
>
GetStreamListener
(
)
;
listener
.
forget
(
aDocListener
)
;
#
ifdef
DEBUG_charset
printf
(
"
charset
=
%
s
source
%
d
\
n
"
charset
.
get
(
)
charsetSource
)
;
#
endif
mParser
-
>
SetDocumentCharset
(
encoding
charsetSource
)
;
mParser
-
>
SetCommand
(
aCommand
)
;
if
(
!
IsHTMLDocument
(
)
)
{
MOZ_ASSERT
(
!
loadAsHtml5
)
;
if
(
loadWithPrototype
)
{
nsCOMPtr
<
nsIContentSink
>
sink
;
NS_NewPrototypeDocumentContentSink
(
getter_AddRefs
(
sink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
sink
)
;
}
else
{
nsCOMPtr
<
nsIXMLContentSink
>
xmlsink
;
NS_NewXMLContentSink
(
getter_AddRefs
(
xmlsink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
xmlsink
)
;
}
}
else
{
if
(
loadAsHtml5
)
{
nsHtml5Module
:
:
Initialize
(
mParser
this
uri
docShell
aChannel
)
;
}
else
{
nsCOMPtr
<
nsIHTMLContentSink
>
htmlsink
;
NS_NewHTMLContentSink
(
getter_AddRefs
(
htmlsink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
htmlsink
)
;
}
}
if
(
mIsPlainText
&
&
!
nsContentUtils
:
:
IsChildOfSameType
(
this
)
&
&
Preferences
:
:
GetBool
(
"
plain_text
.
wrap_long_lines
"
)
)
{
nsCOMPtr
<
nsIStringBundleService
>
bundleService
=
do_GetService
(
NS_STRINGBUNDLE_CONTRACTID
&
rv
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
&
&
bundleService
"
The
bundle
service
could
not
be
loaded
"
)
;
nsCOMPtr
<
nsIStringBundle
>
bundle
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
global
/
locale
/
browser
.
properties
"
getter_AddRefs
(
bundle
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
&
&
bundle
"
chrome
:
/
/
global
/
locale
/
browser
.
properties
could
not
be
loaded
"
)
;
nsAutoString
title
;
if
(
bundle
)
{
bundle
-
>
GetStringFromName
(
"
plainText
.
wordWrap
"
title
)
;
}
SetSelectedStyleSheetSet
(
title
)
;
}
mParser
-
>
Parse
(
uri
nullptr
(
void
*
)
this
)
;
return
rv
;
}
void
nsHTMLDocument
:
:
BeginLoad
(
)
{
if
(
IsEditingOn
(
)
)
{
TurnEditingOff
(
)
;
EditingStateChanged
(
)
;
}
Document
:
:
BeginLoad
(
)
;
}
void
nsHTMLDocument
:
:
EndLoad
(
)
{
bool
turnOnEditing
=
mParser
&
&
(
HasFlag
(
NODE_IS_EDITABLE
)
|
|
mContentEditableCount
>
0
)
;
Document
:
:
EndLoad
(
)
;
if
(
turnOnEditing
)
{
EditingStateChanged
(
)
;
}
if
(
!
GetWindow
(
)
)
{
SetReadyStateInternal
(
Document
:
:
READYSTATE_COMPLETE
false
)
;
mSkipLoadEventAfterClose
=
false
;
}
}
void
nsHTMLDocument
:
:
SetCompatibilityMode
(
nsCompatibility
aMode
)
{
NS_ASSERTION
(
IsHTMLDocument
(
)
|
|
aMode
=
=
eCompatibility_FullStandards
"
Bad
compat
mode
for
XHTML
document
!
"
)
;
if
(
mCompatMode
=
=
aMode
)
{
return
;
}
mCompatMode
=
aMode
;
CompatibilityModeChanged
(
)
;
}
bool
nsHTMLDocument
:
:
UseWidthDeviceWidthFallbackViewport
(
)
const
{
if
(
mIsPlainText
)
{
return
true
;
}
return
Document
:
:
UseWidthDeviceWidthFallbackViewport
(
)
;
}
Element
*
nsHTMLDocument
:
:
GetUnfocusedKeyEventTarget
(
)
{
if
(
nsGenericHTMLElement
*
body
=
GetBody
(
)
)
{
return
body
;
}
return
Document
:
:
GetUnfocusedKeyEventTarget
(
)
;
}
already_AddRefed
<
nsIURI
>
nsHTMLDocument
:
:
GetDomainURI
(
)
{
nsIPrincipal
*
principal
=
NodePrincipal
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
principal
-
>
GetDomain
(
getter_AddRefs
(
uri
)
)
;
if
(
uri
)
{
return
uri
.
forget
(
)
;
}
principal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
return
uri
.
forget
(
)
;
}
void
nsHTMLDocument
:
:
GetDomain
(
nsAString
&
aDomain
)
{
nsCOMPtr
<
nsIURI
>
uri
=
GetDomainURI
(
)
;
if
(
!
uri
)
{
aDomain
.
Truncate
(
)
;
return
;
}
nsAutoCString
hostName
;
nsresult
rv
=
nsContentUtils
:
:
GetHostOrIPv6WithBrackets
(
uri
hostName
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF8toUTF16
(
hostName
aDomain
)
;
}
else
{
aDomain
.
Truncate
(
)
;
}
}
already_AddRefed
<
nsIURI
>
nsHTMLDocument
:
:
CreateInheritingURIForHost
(
const
nsACString
&
aHostString
)
{
if
(
aHostString
.
IsEmpty
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uri
=
GetDomainURI
(
)
;
if
(
!
uri
)
{
return
nullptr
;
}
nsresult
rv
;
rv
=
NS_MutateURI
(
uri
)
.
SetUserPass
(
EmptyCString
(
)
)
.
SetPort
(
-
1
)
.
SetHostPort
(
aHostString
)
.
Finalize
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
uri
.
forget
(
)
;
}
already_AddRefed
<
nsIURI
>
nsHTMLDocument
:
:
RegistrableDomainSuffixOfInternal
(
const
nsAString
&
aNewDomain
nsIURI
*
aOrigHost
)
{
if
(
NS_WARN_IF
(
!
aOrigHost
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
newURI
=
CreateInheritingURIForHost
(
NS_ConvertUTF16toUTF8
(
aNewDomain
)
)
;
if
(
!
newURI
)
{
return
nullptr
;
}
nsAutoCString
current
;
nsAutoCString
domain
;
if
(
NS_FAILED
(
aOrigHost
-
>
GetAsciiHost
(
current
)
)
)
{
current
.
Truncate
(
)
;
}
if
(
NS_FAILED
(
newURI
-
>
GetAsciiHost
(
domain
)
)
)
{
domain
.
Truncate
(
)
;
}
bool
ok
=
current
.
Equals
(
domain
)
;
if
(
current
.
Length
(
)
>
domain
.
Length
(
)
&
&
StringEndsWith
(
current
domain
)
&
&
current
.
CharAt
(
current
.
Length
(
)
-
domain
.
Length
(
)
-
1
)
=
=
'
.
'
)
{
nsCOMPtr
<
nsIEffectiveTLDService
>
tldService
=
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
)
;
if
(
!
tldService
)
{
return
nullptr
;
}
nsAutoCString
currentBaseDomain
;
ok
=
NS_SUCCEEDED
(
tldService
-
>
GetBaseDomain
(
aOrigHost
0
currentBaseDomain
)
)
;
NS_ASSERTION
(
StringEndsWith
(
domain
currentBaseDomain
)
=
=
(
domain
.
Length
(
)
>
=
currentBaseDomain
.
Length
(
)
)
"
uh
-
oh
!
slight
optimization
wasn
'
t
valid
somehow
!
"
)
;
ok
=
ok
&
&
domain
.
Length
(
)
>
=
currentBaseDomain
.
Length
(
)
;
}
if
(
!
ok
)
{
return
nullptr
;
}
return
CreateInheritingURIForHost
(
domain
)
;
}
bool
nsHTMLDocument
:
:
IsRegistrableDomainSuffixOfOrEqualTo
(
const
nsAString
&
aHostSuffixString
const
nsACString
&
aOrigHost
)
{
if
(
aHostSuffixString
.
IsEmpty
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
origURI
=
CreateInheritingURIForHost
(
aOrigHost
)
;
if
(
!
origURI
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
newURI
=
RegistrableDomainSuffixOfInternal
(
aHostSuffixString
origURI
)
;
if
(
!
newURI
)
{
return
false
;
}
return
true
;
}
void
nsHTMLDocument
:
:
SetDomain
(
const
nsAString
&
aDomain
ErrorResult
&
rv
)
{
if
(
mSandboxFlags
&
SANDBOXED_DOMAIN
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
this
NS_LITERAL_STRING
(
"
document
-
domain
"
)
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
aDomain
.
IsEmpty
(
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
nsCOMPtr
<
nsIURI
>
uri
=
GetDomainURI
(
)
;
if
(
!
uri
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsIURI
>
newURI
=
RegistrableDomainSuffixOfInternal
(
aDomain
uri
)
;
if
(
!
newURI
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
rv
=
NodePrincipal
(
)
-
>
SetDomain
(
newURI
)
;
}
already_AddRefed
<
nsIChannel
>
nsHTMLDocument
:
:
CreateDummyChannelForCookies
(
nsIURI
*
aCodebaseURI
)
{
MOZ_ASSERT
(
!
mChannel
)
;
nsCOMPtr
<
nsIChannel
>
channel
;
NS_NewChannel
(
getter_AddRefs
(
channel
)
aCodebaseURI
this
nsILoadInfo
:
:
SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED
nsIContentPolicy
:
:
TYPE_INVALID
)
;
nsCOMPtr
<
nsIPrivateBrowsingChannel
>
pbChannel
=
do_QueryInterface
(
channel
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
(
mDocumentContainer
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
docShell
)
;
if
(
!
pbChannel
|
|
!
loadContext
)
{
return
nullptr
;
}
pbChannel
-
>
SetPrivate
(
loadContext
-
>
UsePrivateBrowsing
(
)
)
;
nsCOMPtr
<
nsIHttpChannel
>
docHTTPChannel
=
do_QueryInterface
(
GetChannel
(
)
)
;
if
(
docHTTPChannel
)
{
bool
isTracking
=
docHTTPChannel
-
>
IsTrackingResource
(
)
;
if
(
isTracking
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
channel
)
;
MOZ_ASSERT
(
httpChannel
"
How
come
we
'
re
coming
from
an
HTTP
doc
but
"
"
we
don
'
t
have
an
HTTP
channel
here
?
"
)
;
if
(
httpChannel
)
{
httpChannel
-
>
OverrideTrackingFlagsForDocumentCookieAccessor
(
docHTTPChannel
)
;
}
}
}
return
channel
.
forget
(
)
;
}
void
nsHTMLDocument
:
:
GetCookie
(
nsAString
&
aCookie
ErrorResult
&
rv
)
{
aCookie
.
Truncate
(
)
;
if
(
mDisableCookieAccess
)
{
return
;
}
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
nsContentUtils
:
:
StorageDisabledByAntiTracking
(
this
nullptr
)
)
{
return
;
}
if
(
IsCookieAverse
(
)
)
{
return
;
}
nsCOMPtr
<
nsICookieService
>
service
=
do_GetService
(
NS_COOKIESERVICE_CONTRACTID
)
;
if
(
service
)
{
nsCOMPtr
<
nsIURI
>
codebaseURI
;
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
codebaseURI
)
)
;
if
(
!
codebaseURI
)
{
return
;
}
nsCOMPtr
<
nsIChannel
>
channel
(
mChannel
)
;
if
(
!
channel
)
{
channel
=
CreateDummyChannelForCookies
(
codebaseURI
)
;
if
(
!
channel
)
{
return
;
}
}
nsCString
cookie
;
service
-
>
GetCookieString
(
codebaseURI
channel
getter_Copies
(
cookie
)
)
;
UTF_8_ENCODING
-
>
DecodeWithoutBOMHandling
(
cookie
aCookie
)
;
}
}
void
nsHTMLDocument
:
:
SetCookie
(
const
nsAString
&
aCookie
ErrorResult
&
rv
)
{
if
(
mDisableCookieAccess
)
{
return
;
}
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
rv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
nsContentUtils
:
:
StorageDisabledByAntiTracking
(
this
nullptr
)
)
{
return
;
}
if
(
IsCookieAverse
(
)
)
{
return
;
}
nsCOMPtr
<
nsICookieService
>
service
=
do_GetService
(
NS_COOKIESERVICE_CONTRACTID
)
;
if
(
service
&
&
mDocumentURI
)
{
nsCOMPtr
<
nsIURI
>
codebaseURI
;
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
codebaseURI
)
)
;
if
(
!
codebaseURI
)
{
return
;
}
nsCOMPtr
<
nsIChannel
>
channel
(
mChannel
)
;
if
(
!
channel
)
{
channel
=
CreateDummyChannelForCookies
(
codebaseURI
)
;
if
(
!
channel
)
{
return
;
}
}
NS_ConvertUTF16toUTF8
cookie
(
aCookie
)
;
service
-
>
SetCookieString
(
codebaseURI
nullptr
cookie
.
get
(
)
channel
)
;
}
}
mozilla
:
:
dom
:
:
Nullable
<
mozilla
:
:
dom
:
:
WindowProxyHolder
>
nsHTMLDocument
:
:
Open
(
const
nsAString
&
aURL
const
nsAString
&
aName
const
nsAString
&
aFeatures
bool
aReplace
ErrorResult
&
rv
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
CanCallerAccess
(
this
)
"
XOW
should
have
caught
this
!
"
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
GetInnerWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_DOM_INVALID_ACCESS_ERR
)
;
return
nullptr
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
nsPIDOMWindowOuter
:
:
GetFromCurrentInner
(
window
)
;
if
(
!
outer
)
{
rv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
nullptr
;
}
RefPtr
<
nsGlobalWindowOuter
>
win
=
nsGlobalWindowOuter
:
:
Cast
(
outer
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
newWindow
;
rv
=
win
-
>
OpenJS
(
aURL
aName
aFeatures
getter_AddRefs
(
newWindow
)
)
;
if
(
!
newWindow
)
{
return
nullptr
;
}
return
WindowProxyHolder
(
newWindow
-
>
GetBrowsingContext
(
)
)
;
}
Document
*
nsHTMLDocument
:
:
Open
(
const
Optional
<
nsAString
>
&
const
nsAString
&
ErrorResult
&
aError
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
CanCallerAccess
(
this
)
"
XOW
should
have
caught
this
!
"
)
;
if
(
!
IsHTMLDocument
(
)
|
|
mDisableDocWrite
)
{
aError
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
nullptr
;
}
if
(
ShouldThrowOnDynamicMarkupInsertion
(
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
nullptr
;
}
nsCOMPtr
<
Document
>
callerDoc
=
GetEntryDocument
(
)
;
if
(
!
callerDoc
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
nullptr
;
}
if
(
!
callerDoc
-
>
NodePrincipal
(
)
-
>
Equals
(
NodePrincipal
(
)
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
nullptr
;
}
if
(
mParser
|
|
mParserAborted
)
{
return
this
;
}
if
(
ShouldIgnoreOpens
(
)
)
{
return
this
;
}
nsCOMPtr
<
nsIDocShell
>
shell
(
mDocumentContainer
)
;
if
(
shell
)
{
bool
inUnload
;
shell
-
>
GetIsInUnload
(
&
inUnload
)
;
if
(
inUnload
)
{
return
this
;
}
}
SetDocumentAndPageUseCounter
(
eUseCounter_custom_DocumentOpen
)
;
if
(
shell
&
&
IsCurrentActiveDocument
(
)
&
&
shell
-
>
GetIsAttemptingToNavigate
(
)
)
{
nsCOMPtr
<
nsIWebNavigation
>
webnav
(
do_QueryInterface
(
shell
)
)
;
webnav
-
>
Stop
(
nsIWebNavigation
:
:
STOP_NETWORK
)
;
EnsureOnloadBlocker
(
)
;
}
for
(
nsINode
*
node
:
ShadowIncludingTreeIterator
(
*
this
)
)
{
if
(
EventListenerManager
*
elm
=
node
-
>
GetExistingListenerManager
(
)
)
{
elm
-
>
RemoveAllListeners
(
)
;
}
}
if
(
nsPIDOMWindowInner
*
win
=
GetInnerWindow
(
)
)
{
if
(
win
-
>
GetExtantDoc
(
)
=
=
this
)
{
if
(
EventListenerManager
*
elm
=
nsGlobalWindowInner
:
:
Cast
(
win
)
-
>
GetExistingListenerManager
(
)
)
{
elm
-
>
RemoveAllListeners
(
)
;
}
}
}
DisconnectNodeTree
(
)
;
if
(
shell
&
&
IsCurrentActiveDocument
(
)
)
{
nsCOMPtr
<
nsIURI
>
newURI
=
callerDoc
-
>
GetDocumentURI
(
)
;
if
(
callerDoc
!
=
this
)
{
nsCOMPtr
<
nsIURI
>
noFragmentURI
;
nsresult
rv
=
NS_GetURIWithoutRef
(
newURI
getter_AddRefs
(
noFragmentURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
newURI
=
noFragmentURI
.
forget
(
)
;
}
nsCOMPtr
<
nsIURI
>
currentURI
=
GetDocumentURI
(
)
;
bool
equalURIs
;
nsresult
rv
=
currentURI
-
>
Equals
(
newURI
&
equalURIs
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIStructuredCloneContainer
>
stateContainer
(
mStateObjectContainer
)
;
rv
=
shell
-
>
UpdateURLAndHistory
(
this
newURI
stateContainer
EmptyString
(
)
true
currentURI
equalURIs
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aError
.
Throw
(
rv
)
;
return
nullptr
;
}
mSecurityInfo
=
callerDoc
-
>
GetSecurityInfo
(
)
;
SetIsInitialDocument
(
false
)
;
nsDocShell
:
:
Cast
(
shell
)
-
>
SetDocumentOpenedButNotLoaded
(
)
;
}
mSkipLoadEventAfterClose
=
mLoadEventFiring
;
SetReadyStateInternal
(
READYSTATE_UNINITIALIZED
false
)
;
SetCompatibilityMode
(
eCompatibility_FullStandards
)
;
mParserAborted
=
false
;
mParser
=
nsHtml5Module
:
:
NewHtml5Parser
(
)
;
nsHtml5Module
:
:
Initialize
(
mParser
this
GetDocumentURI
(
)
shell
nullptr
)
;
if
(
mReferrerPolicySet
)
{
nsHtml5TreeOpExecutor
*
executor
=
nullptr
;
executor
=
static_cast
<
nsHtml5TreeOpExecutor
*
>
(
mParser
-
>
GetContentSink
(
)
)
;
if
(
executor
&
&
mReferrerPolicySet
)
{
executor
-
>
SetSpeculationReferrerPolicy
(
static_cast
<
ReferrerPolicy
>
(
mReferrerPolicy
)
)
;
}
}
mContentTypeForWriteCalls
.
AssignLiteral
(
"
text
/
html
"
)
;
if
(
shell
)
{
shell
-
>
PrepareForNewContentModel
(
)
;
nsCOMPtr
<
nsIContentViewer
>
cv
;
shell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
if
(
cv
)
{
cv
-
>
LoadStart
(
this
)
;
}
}
SetReadyStateInternal
(
Document
:
:
READYSTATE_LOADING
false
)
;
return
this
;
}
void
nsHTMLDocument
:
:
Close
(
ErrorResult
&
rv
)
{
if
(
!
IsHTMLDocument
(
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
if
(
ShouldThrowOnDynamicMarkupInsertion
(
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
if
(
!
mParser
|
|
!
mParser
-
>
IsScriptCreated
(
)
)
{
return
;
}
+
+
mWriteLevel
;
rv
=
(
static_cast
<
nsHtml5Parser
*
>
(
mParser
.
get
(
)
)
)
-
>
Parse
(
EmptyString
(
)
nullptr
mContentTypeForWriteCalls
true
)
;
-
-
mWriteLevel
;
if
(
GetPresShell
(
)
)
{
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
}
void
nsHTMLDocument
:
:
WriteCommon
(
const
Sequence
<
nsString
>
&
aText
bool
aNewlineTerminate
mozilla
:
:
ErrorResult
&
rv
)
{
if
(
aText
.
Length
(
)
=
=
1
)
{
WriteCommon
(
aText
[
0
]
aNewlineTerminate
rv
)
;
}
else
{
nsString
text
;
for
(
uint32_t
i
=
0
;
i
<
aText
.
Length
(
)
;
+
+
i
)
{
text
.
Append
(
aText
[
i
]
)
;
}
WriteCommon
(
text
aNewlineTerminate
rv
)
;
}
}
void
nsHTMLDocument
:
:
WriteCommon
(
const
nsAString
&
aText
bool
aNewlineTerminate
ErrorResult
&
aRv
)
{
mTooDeepWriteRecursion
=
(
mWriteLevel
>
NS_MAX_DOCUMENT_WRITE_DEPTH
|
|
mTooDeepWriteRecursion
)
;
if
(
NS_WARN_IF
(
mTooDeepWriteRecursion
)
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
if
(
!
IsHTMLDocument
(
)
|
|
mDisableDocWrite
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
if
(
ShouldThrowOnDynamicMarkupInsertion
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
if
(
mParserAborted
)
{
return
;
}
if
(
ShouldIgnoreOpens
(
)
)
{
return
;
}
void
*
key
=
GenerateParserKey
(
)
;
if
(
mParser
&
&
!
mParser
-
>
IsInsertionPointDefined
(
)
)
{
if
(
mIgnoreDestructiveWritesCounter
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
DOM
Events
"
)
this
nsContentUtils
:
:
eDOM_PROPERTIES
"
DocumentWriteIgnored
"
nullptr
0
mDocumentURI
)
;
return
;
}
IgnoreOpensDuringUnload
ignoreOpenGuard
(
this
)
;
mParser
-
>
Terminate
(
)
;
MOZ_RELEASE_ASSERT
(
!
mParser
"
mParser
should
have
been
null
'
d
out
"
)
;
}
if
(
!
mParser
)
{
if
(
mIgnoreDestructiveWritesCounter
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
DOM
Events
"
)
this
nsContentUtils
:
:
eDOM_PROPERTIES
"
DocumentWriteIgnored
"
nullptr
0
mDocumentURI
)
;
return
;
}
Open
(
Optional
<
nsAString
>
(
)
EmptyString
(
)
aRv
)
;
if
(
aRv
.
Failed
(
)
|
|
!
mParser
)
{
return
;
}
}
static
NS_NAMED_LITERAL_STRING
(
new_line
"
\
n
"
)
;
+
+
mWriteLevel
;
if
(
aNewlineTerminate
)
{
aRv
=
(
static_cast
<
nsHtml5Parser
*
>
(
mParser
.
get
(
)
)
)
-
>
Parse
(
aText
+
new_line
key
mContentTypeForWriteCalls
false
)
;
}
else
{
aRv
=
(
static_cast
<
nsHtml5Parser
*
>
(
mParser
.
get
(
)
)
)
-
>
Parse
(
aText
key
mContentTypeForWriteCalls
false
)
;
}
-
-
mWriteLevel
;
mTooDeepWriteRecursion
=
(
mWriteLevel
!
=
0
&
&
mTooDeepWriteRecursion
)
;
}
void
nsHTMLDocument
:
:
Write
(
const
Sequence
<
nsString
>
&
aText
ErrorResult
&
rv
)
{
WriteCommon
(
aText
false
rv
)
;
}
void
nsHTMLDocument
:
:
Writeln
(
const
Sequence
<
nsString
>
&
aText
ErrorResult
&
rv
)
{
WriteCommon
(
aText
true
rv
)
;
}
void
nsHTMLDocument
:
:
AddedForm
(
)
{
+
+
mNumForms
;
}
void
nsHTMLDocument
:
:
RemovedForm
(
)
{
-
-
mNumForms
;
}
int32_t
nsHTMLDocument
:
:
GetNumFormsSynchronous
(
)
{
return
mNumForms
;
}
void
nsHTMLDocument
:
:
GetAlinkColor
(
nsAString
&
aAlinkColor
)
{
aAlinkColor
.
Truncate
(
)
;
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
GetALink
(
aAlinkColor
)
;
}
}
void
nsHTMLDocument
:
:
SetAlinkColor
(
const
nsAString
&
aAlinkColor
)
{
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
SetALink
(
aAlinkColor
)
;
}
}
void
nsHTMLDocument
:
:
GetLinkColor
(
nsAString
&
aLinkColor
)
{
aLinkColor
.
Truncate
(
)
;
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
GetLink
(
aLinkColor
)
;
}
}
void
nsHTMLDocument
:
:
SetLinkColor
(
const
nsAString
&
aLinkColor
)
{
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
SetLink
(
aLinkColor
)
;
}
}
void
nsHTMLDocument
:
:
GetVlinkColor
(
nsAString
&
aVlinkColor
)
{
aVlinkColor
.
Truncate
(
)
;
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
GetVLink
(
aVlinkColor
)
;
}
}
void
nsHTMLDocument
:
:
SetVlinkColor
(
const
nsAString
&
aVlinkColor
)
{
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
SetVLink
(
aVlinkColor
)
;
}
}
void
nsHTMLDocument
:
:
GetBgColor
(
nsAString
&
aBgColor
)
{
aBgColor
.
Truncate
(
)
;
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
GetBgColor
(
aBgColor
)
;
}
}
void
nsHTMLDocument
:
:
SetBgColor
(
const
nsAString
&
aBgColor
)
{
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
SetBgColor
(
aBgColor
)
;
}
}
void
nsHTMLDocument
:
:
GetFgColor
(
nsAString
&
aFgColor
)
{
aFgColor
.
Truncate
(
)
;
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
GetText
(
aFgColor
)
;
}
}
void
nsHTMLDocument
:
:
SetFgColor
(
const
nsAString
&
aFgColor
)
{
HTMLBodyElement
*
body
=
GetBodyElement
(
)
;
if
(
body
)
{
body
-
>
SetText
(
aFgColor
)
;
}
}
void
nsHTMLDocument
:
:
CaptureEvents
(
)
{
WarnOnceAbout
(
Document
:
:
eUseOfCaptureEvents
)
;
}
void
nsHTMLDocument
:
:
ReleaseEvents
(
)
{
WarnOnceAbout
(
Document
:
:
eUseOfReleaseEvents
)
;
}
bool
nsHTMLDocument
:
:
ResolveName
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aError
)
{
IdentifierMapEntry
*
entry
=
mIdentifierMap
.
GetEntry
(
aName
)
;
if
(
!
entry
)
{
return
false
;
}
nsBaseContentList
*
list
=
entry
-
>
GetNameContentList
(
)
;
uint32_t
length
=
list
?
list
-
>
Length
(
)
:
0
;
nsIContent
*
node
;
if
(
length
>
0
)
{
if
(
length
>
1
)
{
if
(
!
ToJSValue
(
aCx
list
aRetval
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
return
false
;
}
return
true
;
}
node
=
list
-
>
Item
(
0
)
;
}
else
{
Element
*
e
=
entry
-
>
GetIdElement
(
)
;
if
(
!
e
|
|
!
nsGenericHTMLElement
:
:
ShouldExposeIdAsHTMLDocumentProperty
(
e
)
)
{
return
false
;
}
node
=
e
;
}
if
(
!
ToJSValue
(
aCx
node
aRetval
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
return
false
;
}
return
true
;
}
void
nsHTMLDocument
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
{
for
(
auto
iter
=
mIdentifierMap
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
IdentifierMapEntry
*
entry
=
iter
.
Get
(
)
;
if
(
entry
-
>
HasNameElement
(
)
|
|
entry
-
>
HasIdElementExposedAsHTMLDocumentProperty
(
)
)
{
aNames
.
AppendElement
(
entry
-
>
GetKeyAsString
(
)
)
;
}
}
}
bool
nsHTMLDocument
:
:
MatchFormControls
(
Element
*
aElement
int32_t
aNamespaceID
nsAtom
*
aAtom
void
*
aData
)
{
return
aElement
-
>
IsNodeOfType
(
nsIContent
:
:
eHTML_FORM_CONTROL
)
;
}
void
*
nsHTMLDocument
:
:
GenerateParserKey
(
void
)
{
if
(
!
mScriptLoader
)
{
return
nullptr
;
}
nsIScriptElement
*
script
=
mScriptLoader
-
>
GetCurrentParserInsertedScript
(
)
;
if
(
script
&
&
mParser
&
&
mParser
-
>
IsScriptCreated
(
)
)
{
nsCOMPtr
<
nsIParser
>
creatorParser
=
script
-
>
GetCreatorParser
(
)
;
if
(
creatorParser
!
=
mParser
)
{
return
nullptr
;
}
}
return
script
;
}
void
nsHTMLDocument
:
:
GetDesignMode
(
nsAString
&
aDesignMode
)
{
if
(
HasFlag
(
NODE_IS_EDITABLE
)
)
{
aDesignMode
.
AssignLiteral
(
"
on
"
)
;
}
else
{
aDesignMode
.
AssignLiteral
(
"
off
"
)
;
}
}
void
nsHTMLDocument
:
:
MaybeEditingStateChanged
(
)
{
if
(
!
mPendingMaybeEditingStateChanged
&
&
mMayStartLayout
&
&
mUpdateNestLevel
=
=
0
&
&
(
mContentEditableCount
>
0
)
!
=
IsEditingOn
(
)
)
{
if
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
{
EditingStateChanged
(
)
;
}
else
if
(
!
mInDestructor
)
{
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsHTMLDocument
:
:
MaybeEditingStateChanged
"
this
&
nsHTMLDocument
:
:
MaybeEditingStateChanged
)
)
;
}
}
}
void
nsHTMLDocument
:
:
EndUpdate
(
)
{
const
bool
reset
=
!
mPendingMaybeEditingStateChanged
;
mPendingMaybeEditingStateChanged
=
true
;
Document
:
:
EndUpdate
(
)
;
if
(
reset
)
{
mPendingMaybeEditingStateChanged
=
false
;
}
MaybeEditingStateChanged
(
)
;
}
void
nsHTMLDocument
:
:
SetMayStartLayout
(
bool
aMayStartLayout
)
{
Document
:
:
SetMayStartLayout
(
aMayStartLayout
)
;
MaybeEditingStateChanged
(
)
;
}
class
DeferredContentEditableCountChangeEvent
:
public
Runnable
{
public
:
DeferredContentEditableCountChangeEvent
(
nsHTMLDocument
*
aDoc
nsIContent
*
aElement
)
:
mozilla
:
:
Runnable
(
"
DeferredContentEditableCountChangeEvent
"
)
mDoc
(
aDoc
)
mElement
(
aElement
)
{
}
NS_IMETHOD
Run
(
)
override
{
if
(
mElement
&
&
mElement
-
>
OwnerDoc
(
)
=
=
mDoc
)
{
mDoc
-
>
DeferredContentEditableCountChange
(
mElement
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
nsHTMLDocument
>
mDoc
;
nsCOMPtr
<
nsIContent
>
mElement
;
}
;
nsresult
nsHTMLDocument
:
:
ChangeContentEditableCount
(
nsIContent
*
aElement
int32_t
aChange
)
{
NS_ASSERTION
(
int32_t
(
mContentEditableCount
)
+
aChange
>
=
0
"
Trying
to
decrement
too
much
.
"
)
;
mContentEditableCount
+
=
aChange
;
nsContentUtils
:
:
AddScriptRunner
(
new
DeferredContentEditableCountChangeEvent
(
this
aElement
)
)
;
return
NS_OK
;
}
void
nsHTMLDocument
:
:
DeferredContentEditableCountChange
(
nsIContent
*
aElement
)
{
if
(
mParser
|
|
(
mUpdateNestLevel
>
0
&
&
(
mContentEditableCount
>
0
)
!
=
IsEditingOn
(
)
)
)
{
return
;
}
EditingState
oldState
=
mEditingState
;
nsresult
rv
=
EditingStateChanged
(
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
if
(
oldState
=
=
mEditingState
&
&
mEditingState
=
=
eContentEditable
)
{
if
(
aElement
)
{
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
return
;
nsIDocShell
*
docshell
=
window
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
return
;
RefPtr
<
HTMLEditor
>
htmlEditor
=
docshell
-
>
GetHTMLEditor
(
)
;
if
(
htmlEditor
)
{
RefPtr
<
nsRange
>
range
=
new
nsRange
(
aElement
)
;
IgnoredErrorResult
res
;
range
-
>
SelectNode
(
*
aElement
res
)
;
if
(
res
.
Failed
(
)
)
{
return
;
}
nsCOMPtr
<
nsIInlineSpellChecker
>
spellChecker
;
rv
=
htmlEditor
-
>
GetInlineSpellChecker
(
false
getter_AddRefs
(
spellChecker
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
if
(
spellChecker
)
{
rv
=
spellChecker
-
>
SpellCheckRange
(
range
)
;
}
}
}
}
}
HTMLAllCollection
*
nsHTMLDocument
:
:
All
(
)
{
if
(
!
mAll
)
{
mAll
=
new
HTMLAllCollection
(
this
)
;
}
return
mAll
;
}
static
void
NotifyEditableStateChange
(
nsINode
*
aNode
Document
*
aDocument
)
{
for
(
nsIContent
*
child
=
aNode
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
IsElement
(
)
)
{
child
-
>
AsElement
(
)
-
>
UpdateState
(
true
)
;
}
NotifyEditableStateChange
(
child
aDocument
)
;
}
}
void
nsHTMLDocument
:
:
TearingDownEditor
(
)
{
if
(
IsEditingOn
(
)
)
{
EditingState
oldState
=
mEditingState
;
mEditingState
=
eTearingDown
;
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
nsTArray
<
RefPtr
<
StyleSheet
>
>
agentSheets
;
presShell
-
>
GetAgentStyleSheets
(
agentSheets
)
;
auto
cache
=
nsLayoutStylesheetCache
:
:
Singleton
(
)
;
agentSheets
.
RemoveElement
(
cache
-
>
ContentEditableSheet
(
)
)
;
if
(
oldState
=
=
eDesignMode
)
agentSheets
.
RemoveElement
(
cache
-
>
DesignModeSheet
(
)
)
;
presShell
-
>
SetAgentStyleSheets
(
agentSheets
)
;
presShell
-
>
ApplicableStylesChanged
(
)
;
}
}
nsresult
nsHTMLDocument
:
:
TurnEditingOff
(
)
{
NS_ASSERTION
(
mEditingState
!
=
eOff
"
Editing
is
already
off
.
"
)
;
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
return
NS_ERROR_FAILURE
;
nsIDocShell
*
docshell
=
window
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIEditingSession
>
editSession
;
nsresult
rv
=
docshell
-
>
GetEditingSession
(
getter_AddRefs
(
editSession
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
editSession
-
>
TearDownEditorOnWindow
(
window
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mEditingState
=
eOff
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
Element
*
element
=
fm
-
>
GetFocusedElement
(
)
;
nsCOMPtr
<
nsITextControlElement
>
txtCtrl
=
do_QueryInterface
(
element
)
;
if
(
txtCtrl
)
{
RefPtr
<
TextEditor
>
textEditor
=
txtCtrl
-
>
GetTextEditor
(
)
;
if
(
textEditor
)
{
textEditor
-
>
ReinitializeSelection
(
*
element
)
;
}
}
}
return
NS_OK
;
}
static
bool
HasPresShell
(
nsPIDOMWindowOuter
*
aWindow
)
{
nsIDocShell
*
docShell
=
aWindow
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
return
false
;
return
docShell
-
>
GetPresShell
(
)
!
=
nullptr
;
}
nsresult
nsHTMLDocument
:
:
SetEditingState
(
EditingState
aState
)
{
mEditingState
=
aState
;
return
NS_OK
;
}
nsresult
nsHTMLDocument
:
:
EditingStateChanged
(
)
{
if
(
mRemovedFromDocShell
)
{
return
NS_OK
;
}
if
(
mEditingState
=
=
eSettingUp
|
|
mEditingState
=
=
eTearingDown
)
{
return
NS_OK
;
}
bool
designMode
=
HasFlag
(
NODE_IS_EDITABLE
)
;
EditingState
newState
=
designMode
?
eDesignMode
:
(
mContentEditableCount
>
0
?
eContentEditable
:
eOff
)
;
if
(
mEditingState
=
=
newState
)
{
return
NS_OK
;
}
if
(
newState
=
=
eOff
)
{
nsAutoScriptBlocker
scriptBlocker
;
NotifyEditableStateChange
(
this
this
)
;
return
TurnEditingOff
(
)
;
}
if
(
mParentDocument
)
{
mParentDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Style
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetWindow
(
)
;
if
(
!
window
)
return
NS_ERROR_FAILURE
;
nsIDocShell
*
docshell
=
window
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
return
NS_ERROR_FAILURE
;
bool
isBeingDestroyed
=
false
;
docshell
-
>
IsBeingDestroyed
(
&
isBeingDestroyed
)
;
if
(
isBeingDestroyed
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIEditingSession
>
editSession
;
nsresult
rv
=
docshell
-
>
GetEditingSession
(
getter_AddRefs
(
editSession
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
HTMLEditor
>
htmlEditor
=
editSession
-
>
GetHTMLEditorForWindow
(
window
)
;
if
(
htmlEditor
)
{
uint32_t
flags
=
0
;
htmlEditor
-
>
GetFlags
(
&
flags
)
;
if
(
flags
&
nsIPlaintextEditor
:
:
eEditorMailMask
)
{
return
NS_OK
;
}
}
if
(
!
HasPresShell
(
window
)
)
{
return
NS_OK
;
}
bool
makeWindowEditable
=
mEditingState
=
=
eOff
;
bool
updateState
=
false
;
bool
spellRecheckAll
=
false
;
bool
putOffToRemoveScriptBlockerUntilModifyingEditingState
=
false
;
htmlEditor
=
nullptr
;
{
EditingState
oldState
=
mEditingState
;
nsAutoEditingState
push
(
this
eSettingUp
)
;
RefPtr
<
PresShell
>
presShell
=
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
presShell
NS_ERROR_FAILURE
)
;
nsTArray
<
RefPtr
<
StyleSheet
>
>
agentSheets
;
rv
=
presShell
-
>
GetAgentStyleSheets
(
agentSheets
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
auto
cache
=
nsLayoutStylesheetCache
:
:
Singleton
(
)
;
StyleSheet
*
contentEditableSheet
=
cache
-
>
ContentEditableSheet
(
)
;
if
(
!
agentSheets
.
Contains
(
contentEditableSheet
)
)
{
agentSheets
.
AppendElement
(
contentEditableSheet
)
;
}
if
(
designMode
)
{
StyleSheet
*
designModeSheet
=
cache
-
>
DesignModeSheet
(
)
;
if
(
!
agentSheets
.
Contains
(
designModeSheet
)
)
{
agentSheets
.
AppendElement
(
designModeSheet
)
;
}
updateState
=
true
;
spellRecheckAll
=
oldState
=
=
eContentEditable
;
}
else
if
(
oldState
=
=
eDesignMode
)
{
agentSheets
.
RemoveElement
(
cache
-
>
DesignModeSheet
(
)
)
;
updateState
=
true
;
}
rv
=
presShell
-
>
SetAgentStyleSheets
(
agentSheets
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
presShell
-
>
ApplicableStylesChanged
(
)
;
nsAutoScriptBlocker
scriptBlocker
;
if
(
designMode
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsIContent
*
focusedContent
=
nsFocusManager
:
:
GetFocusedDescendant
(
window
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
if
(
focusedContent
)
{
nsIFrame
*
focusedFrame
=
focusedContent
-
>
GetPrimaryFrame
(
)
;
bool
clearFocus
=
focusedFrame
?
!
focusedFrame
-
>
IsFocusable
(
)
:
!
focusedContent
-
>
IsFocusable
(
)
;
if
(
clearFocus
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
ClearFocus
(
window
)
;
putOffToRemoveScriptBlockerUntilModifyingEditingState
=
true
;
}
}
}
}
if
(
makeWindowEditable
)
{
rv
=
editSession
-
>
MakeWindowEditable
(
window
"
html
"
false
false
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
htmlEditor
=
docshell
-
>
GetHTMLEditor
(
)
;
if
(
!
htmlEditor
)
{
return
NS_ERROR_FAILURE
;
}
if
(
designMode
&
&
oldState
=
=
eOff
)
{
htmlEditor
-
>
BeginningOfDocument
(
)
;
}
if
(
putOffToRemoveScriptBlockerUntilModifyingEditingState
)
{
nsContentUtils
:
:
AddScriptBlocker
(
)
;
}
}
mEditingState
=
newState
;
if
(
putOffToRemoveScriptBlockerUntilModifyingEditingState
)
{
nsContentUtils
:
:
RemoveScriptBlocker
(
)
;
if
(
mEditingState
=
=
eOff
)
{
return
NS_OK
;
}
}
if
(
makeWindowEditable
)
{
ErrorResult
errorResult
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
NodePrincipal
(
)
;
Unused
<
<
ExecCommand
(
NS_LITERAL_STRING
(
"
insertBrOnReturn
"
)
false
NS_LITERAL_STRING
(
"
false
"
)
*
principal
errorResult
)
;
if
(
errorResult
.
Failed
(
)
)
{
editSession
-
>
TearDownEditorOnWindow
(
window
)
;
mEditingState
=
eOff
;
return
errorResult
.
StealNSResult
(
)
;
}
}
if
(
updateState
)
{
nsAutoScriptBlocker
scriptBlocker
;
NotifyEditableStateChange
(
this
this
)
;
}
if
(
spellRecheckAll
)
{
nsCOMPtr
<
nsISelectionController
>
selectionController
=
htmlEditor
-
>
GetSelectionController
(
)
;
if
(
NS_WARN_IF
(
!
selectionController
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
Selection
>
spellCheckSelection
=
selectionController
-
>
GetSelection
(
nsISelectionController
:
:
SELECTION_SPELLCHECK
)
;
if
(
spellCheckSelection
)
{
spellCheckSelection
-
>
RemoveAllRanges
(
IgnoreErrors
(
)
)
;
}
}
htmlEditor
-
>
SyncRealTimeSpell
(
)
;
MaybeDispatchCheckKeyPressEventModelEvent
(
)
;
return
NS_OK
;
}
void
nsHTMLDocument
:
:
MaybeDispatchCheckKeyPressEventModelEvent
(
)
{
if
(
mEditingState
!
=
eContentEditable
)
{
return
;
}
if
(
mHasBeenEditable
)
{
return
;
}
mHasBeenEditable
=
true
;
WidgetEvent
checkEvent
(
true
eUnidentifiedEvent
)
;
checkEvent
.
mSpecifiedEventType
=
nsGkAtoms
:
:
onCheckKeyPressEventModel
;
checkEvent
.
mFlags
.
mCancelable
=
false
;
checkEvent
.
mFlags
.
mBubbles
=
false
;
checkEvent
.
mFlags
.
mOnlySystemGroupDispatch
=
true
;
(
new
AsyncEventDispatcher
(
this
checkEvent
)
)
-
>
PostDOMEvent
(
)
;
}
void
nsHTMLDocument
:
:
SetKeyPressEventModel
(
uint16_t
aKeyPressEventModel
)
{
PresShell
*
presShell
=
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
presShell
-
>
SetKeyPressEventModel
(
aKeyPressEventModel
)
;
}
void
nsHTMLDocument
:
:
SetDesignMode
(
const
nsAString
&
aDesignMode
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
rv
)
{
SetDesignMode
(
aDesignMode
Some
(
&
aSubjectPrincipal
)
rv
)
;
}
void
nsHTMLDocument
:
:
SetDesignMode
(
const
nsAString
&
aDesignMode
const
Maybe
<
nsIPrincipal
*
>
&
aSubjectPrincipal
ErrorResult
&
rv
)
{
if
(
aSubjectPrincipal
.
isSome
(
)
&
&
!
aSubjectPrincipal
.
value
(
)
-
>
Subsumes
(
NodePrincipal
(
)
)
)
{
rv
.
Throw
(
NS_ERROR_DOM_PROP_ACCESS_DENIED
)
;
return
;
}
bool
editableMode
=
HasFlag
(
NODE_IS_EDITABLE
)
;
if
(
aDesignMode
.
LowerCaseEqualsASCII
(
editableMode
?
"
off
"
:
"
on
"
)
)
{
SetEditableFlag
(
!
editableMode
)
;
rv
=
EditingStateChanged
(
)
;
}
}
nsresult
nsHTMLDocument
:
:
GetMidasCommandManager
(
nsICommandManager
*
*
aCmdMgr
)
{
NS_ENSURE_ARG_POINTER
(
aCmdMgr
)
;
if
(
mMidasCommandManager
)
{
NS_ADDREF
(
*
aCmdMgr
=
mMidasCommandManager
)
;
return
NS_OK
;
}
*
aCmdMgr
=
nullptr
;
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
return
NS_ERROR_FAILURE
;
nsIDocShell
*
docshell
=
window
-
>
GetDocShell
(
)
;
if
(
!
docshell
)
return
NS_ERROR_FAILURE
;
mMidasCommandManager
=
docshell
-
>
GetCommandManager
(
)
;
if
(
!
mMidasCommandManager
)
return
NS_ERROR_FAILURE
;
NS_ADDREF
(
*
aCmdMgr
=
mMidasCommandManager
)
;
return
NS_OK
;
}
struct
MidasCommand
{
const
char
*
incomingCommandString
;
const
char
*
internalCommandString
;
const
char
*
internalParamString
;
bool
useNewParam
;
bool
convertToBoolean
;
}
;
static
const
struct
MidasCommand
gMidasCommandTable
[
]
=
{
{
"
bold
"
"
cmd_bold
"
"
"
true
false
}
{
"
italic
"
"
cmd_italic
"
"
"
true
false
}
{
"
underline
"
"
cmd_underline
"
"
"
true
false
}
{
"
strikethrough
"
"
cmd_strikethrough
"
"
"
true
false
}
{
"
subscript
"
"
cmd_subscript
"
"
"
true
false
}
{
"
superscript
"
"
cmd_superscript
"
"
"
true
false
}
{
"
cut
"
"
cmd_cut
"
"
"
true
false
}
{
"
copy
"
"
cmd_copy
"
"
"
true
false
}
{
"
paste
"
"
cmd_paste
"
"
"
true
false
}
{
"
delete
"
"
cmd_deleteCharBackward
"
"
"
true
false
}
{
"
forwarddelete
"
"
cmd_deleteCharForward
"
"
"
true
false
}
{
"
selectall
"
"
cmd_selectAll
"
"
"
true
false
}
{
"
undo
"
"
cmd_undo
"
"
"
true
false
}
{
"
redo
"
"
cmd_redo
"
"
"
true
false
}
{
"
indent
"
"
cmd_indent
"
"
"
true
false
}
{
"
outdent
"
"
cmd_outdent
"
"
"
true
false
}
{
"
backcolor
"
"
cmd_highlight
"
"
"
false
false
}
{
"
forecolor
"
"
cmd_fontColor
"
"
"
false
false
}
{
"
hilitecolor
"
"
cmd_highlight
"
"
"
false
false
}
{
"
fontname
"
"
cmd_fontFace
"
"
"
false
false
}
{
"
fontsize
"
"
cmd_fontSize
"
"
"
false
false
}
{
"
increasefontsize
"
"
cmd_increaseFont
"
"
"
false
false
}
{
"
decreasefontsize
"
"
cmd_decreaseFont
"
"
"
false
false
}
{
"
inserthorizontalrule
"
"
cmd_insertHR
"
"
"
true
false
}
{
"
createlink
"
"
cmd_insertLinkNoUI
"
"
"
false
false
}
{
"
insertimage
"
"
cmd_insertImageNoUI
"
"
"
false
false
}
{
"
inserthtml
"
"
cmd_insertHTML
"
"
"
false
false
}
{
"
inserttext
"
"
cmd_insertText
"
"
"
false
false
}
{
"
gethtml
"
"
cmd_getContents
"
"
"
false
false
}
{
"
justifyleft
"
"
cmd_align
"
"
left
"
true
false
}
{
"
justifyright
"
"
cmd_align
"
"
right
"
true
false
}
{
"
justifycenter
"
"
cmd_align
"
"
center
"
true
false
}
{
"
justifyfull
"
"
cmd_align
"
"
justify
"
true
false
}
{
"
removeformat
"
"
cmd_removeStyles
"
"
"
true
false
}
{
"
unlink
"
"
cmd_removeLinks
"
"
"
true
false
}
{
"
insertorderedlist
"
"
cmd_ol
"
"
"
true
false
}
{
"
insertunorderedlist
"
"
cmd_ul
"
"
"
true
false
}
{
"
insertparagraph
"
"
cmd_insertParagraph
"
"
"
true
false
}
{
"
insertlinebreak
"
"
cmd_insertLineBreak
"
"
"
true
false
}
{
"
formatblock
"
"
cmd_paragraphState
"
"
"
false
false
}
{
"
heading
"
"
cmd_paragraphState
"
"
"
false
false
}
{
"
styleWithCSS
"
"
cmd_setDocumentUseCSS
"
"
"
false
true
}
{
"
contentReadOnly
"
"
cmd_setDocumentReadOnly
"
"
"
false
true
}
{
"
insertBrOnReturn
"
"
cmd_insertBrOnReturn
"
"
"
false
true
}
{
"
defaultParagraphSeparator
"
"
cmd_defaultParagraphSeparator
"
"
"
false
false
}
{
"
enableObjectResizing
"
"
cmd_enableObjectResizing
"
"
"
false
true
}
{
"
enableInlineTableEditing
"
"
cmd_enableInlineTableEditing
"
"
"
false
true
}
{
"
enableAbsolutePositionEditing
"
"
cmd_enableAbsolutePositionEditing
"
"
"
false
true
}
#
if
0
{
"
justifynone
"
"
cmd_align
"
"
"
true
false
}
{
"
saveas
"
"
cmd_saveAs
"
"
"
true
false
}
{
"
print
"
"
cmd_print
"
"
"
true
false
}
#
endif
{
nullptr
nullptr
nullptr
false
false
}
}
;
#
define
MidasCommandCount
\
(
(
sizeof
(
gMidasCommandTable
)
/
sizeof
(
struct
MidasCommand
)
)
-
1
)
static
const
char
*
const
gBlocks
[
]
=
{
"
ADDRESS
"
"
BLOCKQUOTE
"
"
DD
"
"
DIV
"
"
DL
"
"
DT
"
"
H1
"
"
H2
"
"
H3
"
"
H4
"
"
H5
"
"
H6
"
"
P
"
"
PRE
"
}
;
static
bool
ConvertToMidasInternalCommandInner
(
const
nsAString
&
inCommandID
const
nsAString
&
inParam
nsACString
&
outCommandID
nsACString
&
outParam
bool
&
outIsBoolean
bool
&
outBooleanValue
bool
aIgnoreParams
)
{
NS_ConvertUTF16toUTF8
convertedCommandID
(
inCommandID
)
;
bool
invertBool
=
false
;
if
(
convertedCommandID
.
LowerCaseEqualsLiteral
(
"
usecss
"
)
)
{
convertedCommandID
.
AssignLiteral
(
"
styleWithCSS
"
)
;
invertBool
=
true
;
}
else
if
(
convertedCommandID
.
LowerCaseEqualsLiteral
(
"
readonly
"
)
)
{
convertedCommandID
.
AssignLiteral
(
"
contentReadOnly
"
)
;
invertBool
=
true
;
}
uint32_t
i
;
bool
found
=
false
;
for
(
i
=
0
;
i
<
MidasCommandCount
;
+
+
i
)
{
if
(
convertedCommandID
.
Equals
(
gMidasCommandTable
[
i
]
.
incomingCommandString
nsCaseInsensitiveCStringComparator
(
)
)
)
{
found
=
true
;
break
;
}
}
if
(
!
found
)
{
outCommandID
.
SetLength
(
0
)
;
outParam
.
SetLength
(
0
)
;
outIsBoolean
=
false
;
return
false
;
}
outCommandID
.
Assign
(
gMidasCommandTable
[
i
]
.
internalCommandString
)
;
outIsBoolean
=
gMidasCommandTable
[
i
]
.
convertToBoolean
;
if
(
aIgnoreParams
)
{
return
true
;
}
if
(
gMidasCommandTable
[
i
]
.
useNewParam
)
{
outParam
.
Assign
(
gMidasCommandTable
[
i
]
.
internalParamString
)
;
return
true
;
}
if
(
outIsBoolean
)
{
if
(
invertBool
)
{
outBooleanValue
=
inParam
.
LowerCaseEqualsLiteral
(
"
false
"
)
;
}
else
{
outBooleanValue
=
!
inParam
.
LowerCaseEqualsLiteral
(
"
false
"
)
;
}
outParam
.
Truncate
(
)
;
return
true
;
}
if
(
outCommandID
.
EqualsLiteral
(
"
cmd_paragraphState
"
)
)
{
const
char16_t
*
start
=
inParam
.
BeginReading
(
)
;
const
char16_t
*
end
=
inParam
.
EndReading
(
)
;
if
(
start
!
=
end
&
&
*
start
=
=
'
<
'
&
&
*
(
end
-
1
)
=
=
'
>
'
)
{
+
+
start
;
-
-
end
;
}
NS_ConvertUTF16toUTF8
convertedParam
(
Substring
(
start
end
)
)
;
uint32_t
j
;
for
(
j
=
0
;
j
<
ArrayLength
(
gBlocks
)
;
+
+
j
)
{
if
(
convertedParam
.
Equals
(
gBlocks
[
j
]
nsCaseInsensitiveCStringComparator
(
)
)
)
{
outParam
.
Assign
(
gBlocks
[
j
]
)
;
break
;
}
}
if
(
j
=
=
ArrayLength
(
gBlocks
)
)
{
outParam
.
Truncate
(
)
;
}
}
else
if
(
outCommandID
.
EqualsLiteral
(
"
cmd_fontSize
"
)
)
{
outParam
.
Truncate
(
)
;
int32_t
size
=
nsContentUtils
:
:
ParseLegacyFontSize
(
inParam
)
;
if
(
size
)
{
outParam
.
AppendInt
(
size
)
;
}
}
else
{
CopyUTF16toUTF8
(
inParam
outParam
)
;
}
return
true
;
}
static
bool
ConvertToMidasInternalCommand
(
const
nsAString
&
inCommandID
const
nsAString
&
inParam
nsACString
&
outCommandID
nsACString
&
outParam
bool
&
outIsBoolean
bool
&
outBooleanValue
)
{
return
ConvertToMidasInternalCommandInner
(
inCommandID
inParam
outCommandID
outParam
outIsBoolean
outBooleanValue
false
)
;
}
static
bool
ConvertToMidasInternalCommand
(
const
nsAString
&
inCommandID
nsACString
&
outCommandID
)
{
nsAutoCString
dummyCString
;
nsAutoString
dummyString
;
bool
dummyBool
;
return
ConvertToMidasInternalCommandInner
(
inCommandID
dummyString
outCommandID
dummyCString
dummyBool
dummyBool
true
)
;
}
bool
nsHTMLDocument
:
:
ExecCommand
(
const
nsAString
&
commandID
bool
doShowUI
const
nsAString
&
value
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
rv
)
{
nsAutoCString
cmdToDispatch
paramStr
;
bool
isBool
boolVal
;
if
(
!
ConvertToMidasInternalCommand
(
commandID
value
cmdToDispatch
paramStr
isBool
boolVal
)
)
{
return
false
;
}
bool
isCutCopy
=
(
commandID
.
LowerCaseEqualsLiteral
(
"
cut
"
)
|
|
commandID
.
LowerCaseEqualsLiteral
(
"
copy
"
)
)
;
bool
isPaste
=
commandID
.
LowerCaseEqualsLiteral
(
"
paste
"
)
;
if
(
!
isCutCopy
&
&
!
isPaste
&
&
!
IsEditingOnAfterFlush
(
)
)
{
return
false
;
}
if
(
doShowUI
)
{
return
false
;
}
if
(
isCutCopy
)
{
if
(
!
nsContentUtils
:
:
IsCutCopyAllowed
(
&
aSubjectPrincipal
)
)
{
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
DOM
"
)
this
nsContentUtils
:
:
eDOM_PROPERTIES
"
ExecCommandCutCopyDeniedNotInputDriven
"
)
;
return
false
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
(
mDocumentContainer
)
;
if
(
docShell
)
{
nsresult
res
=
docShell
-
>
DoCommand
(
cmdToDispatch
.
get
(
)
)
;
if
(
res
=
=
NS_SUCCESS_DOM_NO_OPERATION
)
{
return
false
;
}
return
NS_SUCCEEDED
(
res
)
;
}
return
false
;
}
if
(
commandID
.
LowerCaseEqualsLiteral
(
"
gethtml
"
)
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
if
(
isPaste
&
&
!
nsContentUtils
:
:
PrincipalHasPermission
(
&
aSubjectPrincipal
nsGkAtoms
:
:
clipboardRead
)
)
{
return
false
;
}
nsCOMPtr
<
nsICommandManager
>
cmdMgr
;
GetMidasCommandManager
(
getter_AddRefs
(
cmdMgr
)
)
;
if
(
!
cmdMgr
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
if
(
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_fontSize
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertImageNoUI
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertLinkNoUI
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_paragraphState
"
)
)
&
&
paramStr
.
IsEmpty
(
)
)
{
return
false
;
}
if
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_defaultParagraphSeparator
"
)
&
&
!
paramStr
.
LowerCaseEqualsLiteral
(
"
div
"
)
&
&
!
paramStr
.
LowerCaseEqualsLiteral
(
"
p
"
)
&
&
!
paramStr
.
LowerCaseEqualsLiteral
(
"
br
"
)
)
{
return
false
;
}
bool
enabled
=
false
;
cmdMgr
-
>
IsCommandEnabled
(
cmdToDispatch
.
get
(
)
window
&
enabled
)
;
if
(
!
enabled
)
{
return
false
;
}
if
(
!
isBool
&
&
paramStr
.
IsEmpty
(
)
)
{
rv
=
cmdMgr
-
>
DoCommand
(
cmdToDispatch
.
get
(
)
nullptr
window
)
;
}
else
{
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
if
(
isBool
)
{
rv
=
params
-
>
SetBool
(
"
state_attribute
"
boolVal
)
;
}
else
if
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_fontFace
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertImageNoUI
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertLinkNoUI
"
)
)
{
rv
=
params
-
>
SetString
(
"
state_attribute
"
value
)
;
}
else
if
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertHTML
"
)
|
|
cmdToDispatch
.
EqualsLiteral
(
"
cmd_insertText
"
)
)
{
rv
=
params
-
>
SetString
(
"
state_data
"
value
)
;
}
else
{
rv
=
params
-
>
SetCString
(
"
state_attribute
"
paramStr
)
;
}
if
(
rv
.
Failed
(
)
)
{
return
false
;
}
rv
=
cmdMgr
-
>
DoCommand
(
cmdToDispatch
.
get
(
)
params
window
)
;
}
return
!
rv
.
Failed
(
)
;
}
bool
nsHTMLDocument
:
:
QueryCommandEnabled
(
const
nsAString
&
commandID
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
rv
)
{
nsAutoCString
cmdToDispatch
;
if
(
!
ConvertToMidasInternalCommand
(
commandID
cmdToDispatch
)
)
{
return
false
;
}
bool
isCutCopy
=
commandID
.
LowerCaseEqualsLiteral
(
"
cut
"
)
|
|
commandID
.
LowerCaseEqualsLiteral
(
"
copy
"
)
;
if
(
isCutCopy
)
{
return
nsContentUtils
:
:
IsCutCopyAllowed
(
&
aSubjectPrincipal
)
;
}
bool
restricted
=
commandID
.
LowerCaseEqualsLiteral
(
"
paste
"
)
;
if
(
restricted
&
&
!
nsContentUtils
:
:
IsSystemPrincipal
(
&
aSubjectPrincipal
)
)
{
return
false
;
}
if
(
!
IsEditingOnAfterFlush
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsICommandManager
>
cmdMgr
;
GetMidasCommandManager
(
getter_AddRefs
(
cmdMgr
)
)
;
if
(
!
cmdMgr
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
bool
retval
;
rv
=
cmdMgr
-
>
IsCommandEnabled
(
cmdToDispatch
.
get
(
)
window
&
retval
)
;
return
retval
;
}
bool
nsHTMLDocument
:
:
QueryCommandIndeterm
(
const
nsAString
&
commandID
ErrorResult
&
rv
)
{
nsAutoCString
cmdToDispatch
;
if
(
!
ConvertToMidasInternalCommand
(
commandID
cmdToDispatch
)
)
{
return
false
;
}
if
(
!
IsEditingOnAfterFlush
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsICommandManager
>
cmdMgr
;
GetMidasCommandManager
(
getter_AddRefs
(
cmdMgr
)
)
;
if
(
!
cmdMgr
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
rv
=
cmdMgr
-
>
GetCommandState
(
cmdToDispatch
.
get
(
)
window
params
)
;
if
(
rv
.
Failed
(
)
)
{
return
false
;
}
return
params
-
>
GetBool
(
"
state_mixed
"
)
;
}
bool
nsHTMLDocument
:
:
QueryCommandState
(
const
nsAString
&
commandID
ErrorResult
&
rv
)
{
nsAutoCString
cmdToDispatch
paramToCheck
;
bool
dummy
dummy2
;
if
(
!
ConvertToMidasInternalCommand
(
commandID
commandID
cmdToDispatch
paramToCheck
dummy
dummy2
)
)
{
return
false
;
}
if
(
!
IsEditingOnAfterFlush
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsICommandManager
>
cmdMgr
;
GetMidasCommandManager
(
getter_AddRefs
(
cmdMgr
)
)
;
if
(
!
cmdMgr
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
nsPIDOMWindowOuter
*
window
=
GetWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
false
;
}
if
(
commandID
.
LowerCaseEqualsLiteral
(
"
usecss
"
)
)
{
return
false
;
}
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
rv
=
cmdMgr
-
>
GetCommandState
(
cmdToDispatch
.
get
(
)
window
params
)
;
if
(
rv
.
Failed
(
)
)
{
return
false
;
}
if
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_align
"
)
)
{
nsAutoCString
actualAlignmentType
;
rv
=
params
-
>
GetCString
(
"
state_attribute
"
actualAlignmentType
)
;
return
!
rv
.
Failed
(
)
&
&
!
actualAlignmentType
.
IsEmpty
(
)
&
&
paramToCheck
=
=
actualAlignmentType
;
}
return
params
-
>
GetBool
(
"
state_all
"
)
;
}
bool
nsHTMLDocument
:
:
QueryCommandSupported
(
const
nsAString
&
commandID
CallerType
aCallerType
)
{
if
(
aCallerType
!
=
CallerType
:
:
System
)
{
if
(
commandID
.
LowerCaseEqualsLiteral
(
"
paste
"
)
)
{
return
false
;
}
if
(
nsContentUtils
:
:
IsCutCopyRestricted
(
)
)
{
if
(
commandID
.
LowerCaseEqualsLiteral
(
"
cut
"
)
|
|
commandID
.
LowerCaseEqualsLiteral
(
"
copy
"
)
)
{
return
false
;
}
}
}
nsAutoCString
cmdToDispatch
;
return
ConvertToMidasInternalCommand
(
commandID
cmdToDispatch
)
;
}
void
nsHTMLDocument
:
:
QueryCommandValue
(
const
nsAString
&
commandID
nsAString
&
aValue
ErrorResult
&
rv
)
{
aValue
.
Truncate
(
)
;
nsAutoCString
cmdToDispatch
paramStr
;
if
(
!
ConvertToMidasInternalCommand
(
commandID
cmdToDispatch
)
)
{
return
;
}
if
(
!
IsEditingOnAfterFlush
(
)
)
{
return
;
}
nsCOMPtr
<
nsICommandManager
>
cmdMgr
;
GetMidasCommandManager
(
getter_AddRefs
(
cmdMgr
)
)
;
if
(
!
cmdMgr
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetWindow
(
)
;
if
(
!
window
)
{
rv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
RefPtr
<
nsCommandParams
>
params
=
new
nsCommandParams
(
)
;
if
(
cmdToDispatch
.
EqualsLiteral
(
"
cmd_getContents
"
)
)
{
rv
=
params
-
>
SetBool
(
"
selection_only
"
true
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
rv
=
params
-
>
SetCString
(
"
format
"
NS_LITERAL_CSTRING
(
"
text
/
html
"
)
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
rv
=
cmdMgr
-
>
DoCommand
(
cmdToDispatch
.
get
(
)
params
window
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
params
-
>
GetString
(
"
result
"
aValue
)
;
return
;
}
rv
=
params
-
>
SetCString
(
"
state_attribute
"
paramStr
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
rv
=
cmdMgr
-
>
GetCommandState
(
cmdToDispatch
.
get
(
)
window
params
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
nsAutoCString
result
;
params
-
>
GetCString
(
"
state_attribute
"
result
)
;
CopyUTF8toUTF16
(
result
aValue
)
;
}
nsresult
nsHTMLDocument
:
:
Clone
(
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
)
const
{
NS_ASSERTION
(
aNodeInfo
-
>
NodeInfoManager
(
)
=
=
mNodeInfoManager
"
Can
'
t
import
this
document
into
another
document
!
"
)
;
RefPtr
<
nsHTMLDocument
>
clone
=
new
nsHTMLDocument
(
)
;
nsresult
rv
=
CloneDocHelper
(
clone
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
clone
-
>
mLoadFlags
=
mLoadFlags
;
clone
.
forget
(
aResult
)
;
return
NS_OK
;
}
bool
nsHTMLDocument
:
:
IsEditingOnAfterFlush
(
)
{
Document
*
doc
=
GetParentDocument
(
)
;
if
(
doc
)
{
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
return
IsEditingOn
(
)
;
}
void
nsHTMLDocument
:
:
RemovedFromDocShell
(
)
{
mEditingState
=
eOff
;
Document
:
:
RemovedFromDocShell
(
)
;
}
void
nsHTMLDocument
:
:
DocAddSizeOfExcludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
{
Document
:
:
DocAddSizeOfExcludingThis
(
aWindowSizes
)
;
}
bool
nsHTMLDocument
:
:
WillIgnoreCharsetOverride
(
)
{
if
(
mEncodingMenuDisabled
)
{
return
true
;
}
if
(
mType
!
=
eHTML
)
{
MOZ_ASSERT
(
mType
=
=
eXHTML
)
;
return
true
;
}
if
(
mCharacterSetSource
>
=
kCharsetFromByteOrderMark
)
{
return
true
;
}
if
(
!
mCharacterSet
-
>
IsAsciiCompatible
(
)
&
&
mCharacterSet
!
=
ISO_2022_JP_ENCODING
)
{
return
true
;
}
nsIURI
*
uri
=
GetOriginalURI
(
)
;
if
(
uri
)
{
bool
schemeIs
=
false
;
uri
-
>
SchemeIs
(
"
about
"
&
schemeIs
)
;
if
(
schemeIs
)
{
return
true
;
}
bool
isResource
;
nsresult
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_IS_UI_RESOURCE
&
isResource
)
;
if
(
NS_FAILED
(
rv
)
|
|
isResource
)
{
return
true
;
}
}
return
false
;
}
void
nsHTMLDocument
:
:
GetFormsAndFormControls
(
nsContentList
*
*
aFormList
nsContentList
*
*
aFormControlList
)
{
RefPtr
<
ContentListHolder
>
holder
=
mContentListHolder
;
if
(
!
holder
)
{
FlushPendingNotifications
(
FlushType
:
:
Content
)
;
RefPtr
<
nsContentList
>
htmlForms
=
GetExistingForms
(
)
;
if
(
!
htmlForms
)
{
htmlForms
=
new
nsContentList
(
this
kNameSpaceID_XHTML
nsGkAtoms
:
:
form
nsGkAtoms
:
:
form
true
true
)
;
}
RefPtr
<
nsContentList
>
htmlFormControls
=
new
nsContentList
(
this
nsHTMLDocument
:
:
MatchFormControls
nullptr
nullptr
true
nullptr
kNameSpaceID_None
true
true
)
;
holder
=
new
ContentListHolder
(
this
htmlForms
htmlFormControls
)
;
RefPtr
<
ContentListHolder
>
runnable
=
holder
;
if
(
NS_SUCCEEDED
(
Dispatch
(
TaskCategory
:
:
GarbageCollection
runnable
.
forget
(
)
)
)
)
{
mContentListHolder
=
holder
;
}
}
NS_ADDREF
(
*
aFormList
=
holder
-
>
mFormList
)
;
NS_ADDREF
(
*
aFormControlList
=
holder
-
>
mFormControlList
)
;
}
void
nsHTMLDocument
:
:
UserInteractionForTesting
(
)
{
SetUserHasInteracted
(
)
;
}
