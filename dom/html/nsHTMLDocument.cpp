#
include
"
nsHTMLDocument
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_intl
.
h
"
#
include
"
nsCommandManager
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsIHTMLContentSink
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsIXMLContentSink
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsHTMLStyleSheet
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsDocShellLoadTypes
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsJSPrincipals
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsParserCIID
.
h
"
#
include
"
mozilla
/
parser
/
PrototypeDocumentParser
.
h
"
#
include
"
mozilla
/
dom
/
PrototypeDocumentContentSink
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
DocumentInlines
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIScriptElement
.
h
"
#
include
"
nsArrayUtils
.
h
"
#
include
"
nsBidiUtils
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
EventListenerManager
.
h
"
#
include
"
mozilla
/
IdentifierMapEntry
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsCCUncollectableMarker
.
h
"
#
include
"
nsHtml5Module
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsHtml5TreeOpExecutor
.
h
"
#
include
"
nsHtml5Parser
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDocumentBinding
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPContext
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
ShadowIncludingTreeIterator
.
h
"
#
include
"
nsCharsetSource
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
#
include
"
prtime
.
h
"
static
NS_DEFINE_CID
(
kCParserCID
NS_PARSER_CID
)
;
static
bool
IsAsciiCompatible
(
const
Encoding
*
aEncoding
)
{
return
aEncoding
-
>
IsAsciiCompatible
(
)
|
|
aEncoding
=
=
ISO_2022_JP_ENCODING
;
}
nsresult
NS_NewHTMLDocument
(
Document
*
*
aInstancePtrResult
bool
aLoadedAsData
)
{
RefPtr
<
nsHTMLDocument
>
doc
=
new
nsHTMLDocument
(
)
;
nsresult
rv
=
doc
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aInstancePtrResult
=
nullptr
;
return
rv
;
}
doc
-
>
SetLoadedAsData
(
aLoadedAsData
true
)
;
doc
.
forget
(
aInstancePtrResult
)
;
return
NS_OK
;
}
nsHTMLDocument
:
:
nsHTMLDocument
(
)
:
Document
(
"
text
/
html
"
)
mContentListHolder
(
nullptr
)
mNumForms
(
0
)
mLoadFlags
(
0
)
mWarnedWidthHeight
(
false
)
mIsPlainText
(
false
)
mViewSource
(
false
)
{
mType
=
eHTML
;
mDefaultElementType
=
kNameSpaceID_XHTML
;
mCompatMode
=
eCompatibility_NavQuirks
;
}
nsHTMLDocument
:
:
~
nsHTMLDocument
(
)
=
default
;
JSObject
*
nsHTMLDocument
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLDocument_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsresult
nsHTMLDocument
:
:
Init
(
)
{
nsresult
rv
=
Document
:
:
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
CSSLoader
(
)
-
>
SetCompatibilityMode
(
mCompatMode
)
;
return
NS_OK
;
}
void
nsHTMLDocument
:
:
Reset
(
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
)
{
Document
:
:
Reset
(
aChannel
aLoadGroup
)
;
if
(
aChannel
)
{
aChannel
-
>
GetLoadFlags
(
&
mLoadFlags
)
;
}
}
void
nsHTMLDocument
:
:
ResetToURI
(
nsIURI
*
aURI
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aPartitionedPrincipal
)
{
mLoadFlags
=
nsIRequest
:
:
LOAD_NORMAL
;
Document
:
:
ResetToURI
(
aURI
aLoadGroup
aPrincipal
aPartitionedPrincipal
)
;
mImages
=
nullptr
;
mApplets
=
nullptr
;
mEmbeds
=
nullptr
;
mLinks
=
nullptr
;
mAnchors
=
nullptr
;
mScripts
=
nullptr
;
mForms
=
nullptr
;
SetContentType
(
nsDependentCString
(
"
text
/
html
"
)
)
;
}
void
nsHTMLDocument
:
:
TryReloadCharset
(
nsIContentViewer
*
aCv
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
)
{
if
(
aCv
)
{
int32_t
reloadEncodingSource
;
const
auto
reloadEncoding
=
aCv
-
>
GetReloadEncodingAndSource
(
&
reloadEncodingSource
)
;
if
(
kCharsetUninitialized
!
=
reloadEncodingSource
)
{
aCv
-
>
ForgetReloadEncoding
(
)
;
if
(
reloadEncodingSource
<
=
aCharsetSource
|
|
!
IsAsciiCompatible
(
aEncoding
)
)
{
return
;
}
if
(
reloadEncoding
&
&
IsAsciiCompatible
(
reloadEncoding
)
)
{
aCharsetSource
=
reloadEncodingSource
;
aEncoding
=
WrapNotNull
(
reloadEncoding
)
;
}
}
}
}
void
nsHTMLDocument
:
:
TryUserForcedCharset
(
nsIContentViewer
*
aCv
nsIDocShell
*
aDocShell
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
bool
&
aForceAutoDetection
)
{
auto
resetForce
=
MakeScopeExit
(
[
&
]
{
if
(
aDocShell
)
{
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
ResetForcedAutodetection
(
)
;
}
}
)
;
if
(
aCharsetSource
>
=
kCharsetFromOtherComponent
)
{
return
;
}
if
(
WillIgnoreCharsetOverride
(
)
|
|
!
IsAsciiCompatible
(
aEncoding
)
)
{
return
;
}
if
(
aDocShell
&
&
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetForcedAutodetection
(
)
)
{
aForceAutoDetection
=
true
;
}
}
void
nsHTMLDocument
:
:
TryParentCharset
(
nsIDocShell
*
aDocShell
int32_t
&
aCharsetSource
NotNull
<
const
Encoding
*
>
&
aEncoding
bool
&
aForceAutoDetection
)
{
if
(
!
aDocShell
)
{
return
;
}
if
(
aCharsetSource
>
=
kCharsetFromOtherComponent
)
{
return
;
}
int32_t
parentSource
;
const
Encoding
*
parentCharset
;
nsCOMPtr
<
nsIPrincipal
>
parentPrincipal
;
aDocShell
-
>
GetParentCharset
(
parentCharset
&
parentSource
getter_AddRefs
(
parentPrincipal
)
)
;
if
(
!
parentCharset
)
{
return
;
}
if
(
kCharsetFromInitialUserForcedAutoDetection
=
=
parentSource
|
|
kCharsetFromFinalUserForcedAutoDetection
=
=
parentSource
)
{
if
(
WillIgnoreCharsetOverride
(
)
|
|
!
IsAsciiCompatible
(
aEncoding
)
|
|
!
IsAsciiCompatible
(
parentCharset
)
)
{
return
;
}
aEncoding
=
WrapNotNull
(
parentCharset
)
;
aCharsetSource
=
kCharsetFromParentFrame
;
aForceAutoDetection
=
true
;
return
;
}
if
(
aCharsetSource
>
=
kCharsetFromParentFrame
)
{
return
;
}
if
(
kCharsetFromInitialAutoDetectionASCII
<
=
parentSource
)
{
if
(
!
NodePrincipal
(
)
-
>
Equals
(
parentPrincipal
)
|
|
!
IsAsciiCompatible
(
parentCharset
)
)
{
return
;
}
aEncoding
=
WrapNotNull
(
parentCharset
)
;
aCharsetSource
=
kCharsetFromParentFrame
;
}
}
bool
ShouldUsePrototypeDocument
(
nsIChannel
*
aChannel
Document
*
aDoc
)
{
if
(
!
aChannel
|
|
!
aDoc
|
|
!
StaticPrefs
:
:
dom_prototype_document_cache_enabled
(
)
)
{
return
false
;
}
return
nsContentUtils
:
:
IsChromeDoc
(
aDoc
)
;
}
nsresult
nsHTMLDocument
:
:
StartDocumentLoad
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsISupports
*
aContainer
nsIStreamListener
*
*
aDocListener
bool
aReset
nsIContentSink
*
aSink
)
{
if
(
!
aCommand
)
{
MOZ_ASSERT
(
false
"
Command
is
mandatory
"
)
;
return
NS_ERROR_INVALID_POINTER
;
}
if
(
aSink
)
{
MOZ_ASSERT
(
false
"
Got
a
sink
override
.
Should
not
happen
for
HTML
doc
.
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
if
(
mType
!
=
eHTML
)
{
MOZ_ASSERT
(
mType
=
=
eXHTML
)
;
MOZ_ASSERT
(
false
"
Must
not
set
HTML
doc
to
XHTML
mode
before
load
start
.
"
)
;
return
NS_ERROR_DOM_INVALID_STATE_ERR
;
}
nsAutoCString
contentType
;
aChannel
-
>
GetContentType
(
contentType
)
;
bool
view
=
!
strcmp
(
aCommand
"
view
"
)
|
|
!
strcmp
(
aCommand
"
external
-
resource
"
)
;
mViewSource
=
!
strcmp
(
aCommand
"
view
-
source
"
)
;
bool
asData
=
!
strcmp
(
aCommand
kLoadAsData
)
;
if
(
!
(
view
|
|
mViewSource
|
|
asData
)
)
{
MOZ_ASSERT
(
false
"
Bad
parser
command
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
bool
html
=
contentType
.
EqualsLiteral
(
TEXT_HTML
)
;
bool
xhtml
=
!
html
&
&
(
contentType
.
EqualsLiteral
(
APPLICATION_XHTML_XML
)
|
|
contentType
.
EqualsLiteral
(
APPLICATION_WAPXHTML_XML
)
)
;
mIsPlainText
=
!
html
&
&
!
xhtml
&
&
nsContentUtils
:
:
IsPlainTextType
(
contentType
)
;
if
(
!
(
html
|
|
xhtml
|
|
mIsPlainText
|
|
mViewSource
)
)
{
MOZ_ASSERT
(
false
"
Channel
with
bad
content
type
.
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
bool
forceUtf8
=
mIsPlainText
&
&
nsContentUtils
:
:
IsUtf8OnlyPlainTextType
(
contentType
)
;
bool
loadAsHtml5
=
true
;
if
(
!
mViewSource
&
&
xhtml
)
{
mType
=
eXHTML
;
SetCompatibilityMode
(
eCompatibility_FullStandards
)
;
loadAsHtml5
=
false
;
}
if
(
loadAsHtml5
&
&
view
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
uri
)
)
;
if
(
uri
&
&
uri
-
>
SchemeIs
(
"
about
"
)
)
{
if
(
uri
-
>
GetSpecOrDefault
(
)
.
EqualsLiteral
(
"
about
:
blank
"
)
)
{
loadAsHtml5
=
false
;
}
}
}
nsresult
rv
=
Document
:
:
StartDocumentLoad
(
aCommand
aChannel
aLoadGroup
aContainer
aDocListener
aReset
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
(
do_QueryInterface
(
aContainer
)
)
;
bool
loadWithPrototype
=
false
;
RefPtr
<
nsHtml5Parser
>
html5Parser
;
if
(
loadAsHtml5
)
{
html5Parser
=
nsHtml5Module
:
:
NewHtml5Parser
(
)
;
mParser
=
html5Parser
;
if
(
mIsPlainText
)
{
if
(
mViewSource
)
{
html5Parser
-
>
MarkAsNotScriptCreated
(
"
view
-
source
-
plain
"
)
;
}
else
{
html5Parser
-
>
MarkAsNotScriptCreated
(
"
plain
-
text
"
)
;
}
}
else
if
(
mViewSource
&
&
!
html
)
{
html5Parser
-
>
MarkAsNotScriptCreated
(
"
view
-
source
-
xml
"
)
;
}
else
{
html5Parser
-
>
MarkAsNotScriptCreated
(
aCommand
)
;
}
}
else
if
(
xhtml
&
&
ShouldUsePrototypeDocument
(
aChannel
this
)
)
{
loadWithPrototype
=
true
;
nsCOMPtr
<
nsIURI
>
originalURI
;
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalURI
)
)
;
mParser
=
new
mozilla
:
:
parser
:
:
PrototypeDocumentParser
(
originalURI
this
)
;
}
else
{
mParser
=
do_CreateInstance
(
kCParserCID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
parentAsItem
;
if
(
docShell
)
{
docShell
-
>
GetInProcessSameTypeParent
(
getter_AddRefs
(
parentAsItem
)
)
;
}
nsCOMPtr
<
nsIDocShell
>
parent
(
do_QueryInterface
(
parentAsItem
)
)
;
nsCOMPtr
<
nsIContentViewer
>
parentContentViewer
;
if
(
parent
)
{
rv
=
parent
-
>
GetContentViewer
(
getter_AddRefs
(
parentContentViewer
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsCOMPtr
<
nsIContentViewer
>
cv
;
if
(
docShell
)
{
docShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
}
if
(
!
cv
)
{
cv
=
std
:
:
move
(
parentContentViewer
)
;
}
nsAutoCString
urlSpec
;
uri
-
>
GetSpec
(
urlSpec
)
;
#
ifdef
DEBUG_charset
printf
(
"
Determining
charset
for
%
s
\
n
"
urlSpec
.
get
(
)
)
;
#
endif
bool
forceAutoDetection
=
false
;
int32_t
charsetSource
=
kCharsetUninitialized
;
auto
encoding
=
UTF_8_ENCODING
;
nsHtml5TreeOpExecutor
*
executor
=
nullptr
;
if
(
loadAsHtml5
)
{
executor
=
static_cast
<
nsHtml5TreeOpExecutor
*
>
(
mParser
-
>
GetContentSink
(
)
)
;
}
if
(
forceUtf8
)
{
charsetSource
=
kCharsetFromUtf8OnlyMime
;
}
else
if
(
!
IsHTMLDocument
(
)
|
|
!
docShell
)
{
charsetSource
=
IsHTMLDocument
(
)
?
kCharsetFromFallback
:
kCharsetFromDocTypeDefault
;
TryChannelCharset
(
aChannel
charsetSource
encoding
executor
)
;
}
else
{
NS_ASSERTION
(
docShell
"
Unexpected
null
value
"
)
;
TryChannelCharset
(
aChannel
charsetSource
encoding
executor
)
;
TryUserForcedCharset
(
cv
docShell
charsetSource
encoding
forceAutoDetection
)
;
TryReloadCharset
(
cv
charsetSource
encoding
)
;
TryParentCharset
(
docShell
charsetSource
encoding
forceAutoDetection
)
;
}
SetDocumentCharacterSetSource
(
charsetSource
)
;
SetDocumentCharacterSet
(
encoding
)
;
rv
=
NS_OK
;
nsCOMPtr
<
nsIStreamListener
>
listener
=
mParser
-
>
GetStreamListener
(
)
;
listener
.
forget
(
aDocListener
)
;
#
ifdef
DEBUG_charset
printf
(
"
charset
=
%
s
source
%
d
\
n
"
charset
.
get
(
)
charsetSource
)
;
#
endif
mParser
-
>
SetDocumentCharset
(
encoding
charsetSource
forceAutoDetection
)
;
mParser
-
>
SetCommand
(
aCommand
)
;
if
(
!
IsHTMLDocument
(
)
)
{
MOZ_ASSERT
(
!
loadAsHtml5
)
;
if
(
loadWithPrototype
)
{
nsCOMPtr
<
nsIContentSink
>
sink
;
NS_NewPrototypeDocumentContentSink
(
getter_AddRefs
(
sink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
sink
)
;
}
else
{
nsCOMPtr
<
nsIXMLContentSink
>
xmlsink
;
NS_NewXMLContentSink
(
getter_AddRefs
(
xmlsink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
xmlsink
)
;
}
}
else
{
if
(
loadAsHtml5
)
{
html5Parser
-
>
Initialize
(
this
uri
docShell
aChannel
)
;
}
else
{
nsCOMPtr
<
nsIHTMLContentSink
>
htmlsink
;
NS_NewHTMLContentSink
(
getter_AddRefs
(
htmlsink
)
this
uri
docShell
aChannel
)
;
mParser
-
>
SetContentSink
(
htmlsink
)
;
}
}
mParser
-
>
Parse
(
uri
this
)
;
return
rv
;
}
bool
nsHTMLDocument
:
:
UseWidthDeviceWidthFallbackViewport
(
)
const
{
if
(
mIsPlainText
)
{
return
true
;
}
return
Document
:
:
UseWidthDeviceWidthFallbackViewport
(
)
;
}
Element
*
nsHTMLDocument
:
:
GetUnfocusedKeyEventTarget
(
)
{
if
(
nsGenericHTMLElement
*
body
=
GetBody
(
)
)
{
return
body
;
}
return
Document
:
:
GetUnfocusedKeyEventTarget
(
)
;
}
bool
nsHTMLDocument
:
:
IsRegistrableDomainSuffixOfOrEqualTo
(
const
nsAString
&
aHostSuffixString
const
nsACString
&
aOrigHost
)
{
if
(
aHostSuffixString
.
IsEmpty
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
origURI
=
CreateInheritingURIForHost
(
aOrigHost
)
;
if
(
!
origURI
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
newURI
=
RegistrableDomainSuffixOfInternal
(
aHostSuffixString
origURI
)
;
if
(
!
newURI
)
{
return
false
;
}
return
true
;
}
void
nsHTMLDocument
:
:
AddedForm
(
)
{
+
+
mNumForms
;
}
void
nsHTMLDocument
:
:
RemovedForm
(
)
{
-
-
mNumForms
;
}
int32_t
nsHTMLDocument
:
:
GetNumFormsSynchronous
(
)
{
return
mNumForms
;
}
bool
nsHTMLDocument
:
:
ResolveName
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetval
ErrorResult
&
aError
)
{
IdentifierMapEntry
*
entry
=
mIdentifierMap
.
GetEntry
(
aName
)
;
if
(
!
entry
)
{
return
false
;
}
nsBaseContentList
*
list
=
entry
-
>
GetNameContentList
(
)
;
uint32_t
length
=
list
?
list
-
>
Length
(
)
:
0
;
nsIContent
*
node
;
if
(
length
>
0
)
{
if
(
length
>
1
)
{
if
(
!
ToJSValue
(
aCx
list
aRetval
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
return
false
;
}
return
true
;
}
node
=
list
-
>
Item
(
0
)
;
}
else
{
Element
*
e
=
entry
-
>
GetIdElement
(
)
;
if
(
!
e
|
|
!
nsGenericHTMLElement
:
:
ShouldExposeIdAsHTMLDocumentProperty
(
e
)
)
{
return
false
;
}
node
=
e
;
}
if
(
!
ToJSValue
(
aCx
node
aRetval
)
)
{
aError
.
NoteJSContextException
(
aCx
)
;
return
false
;
}
return
true
;
}
void
nsHTMLDocument
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
{
for
(
const
auto
&
entry
:
mIdentifierMap
)
{
if
(
entry
.
HasNameElement
(
)
|
|
entry
.
HasIdElementExposedAsHTMLDocumentProperty
(
)
)
{
aNames
.
AppendElement
(
entry
.
GetKeyAsString
(
)
)
;
}
}
}
bool
nsHTMLDocument
:
:
MatchFormControls
(
Element
*
aElement
int32_t
aNamespaceID
nsAtom
*
aAtom
void
*
aData
)
{
return
aElement
-
>
IsNodeOfType
(
nsIContent
:
:
eHTML_FORM_CONTROL
)
;
}
nsresult
nsHTMLDocument
:
:
Clone
(
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
)
const
{
NS_ASSERTION
(
aNodeInfo
-
>
NodeInfoManager
(
)
=
=
mNodeInfoManager
"
Can
'
t
import
this
document
into
another
document
!
"
)
;
RefPtr
<
nsHTMLDocument
>
clone
=
new
nsHTMLDocument
(
)
;
nsresult
rv
=
CloneDocHelper
(
clone
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
clone
-
>
mLoadFlags
=
mLoadFlags
;
clone
.
forget
(
aResult
)
;
return
NS_OK
;
}
void
nsHTMLDocument
:
:
DocAddSizeOfExcludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
{
Document
:
:
DocAddSizeOfExcludingThis
(
aWindowSizes
)
;
}
bool
nsHTMLDocument
:
:
WillIgnoreCharsetOverride
(
)
{
if
(
mEncodingMenuDisabled
)
{
return
true
;
}
if
(
mType
!
=
eHTML
)
{
MOZ_ASSERT
(
mType
=
=
eXHTML
)
;
return
true
;
}
if
(
mCharacterSetSource
>
=
kCharsetFromByteOrderMark
)
{
return
true
;
}
if
(
!
mCharacterSet
-
>
IsAsciiCompatible
(
)
&
&
mCharacterSet
!
=
ISO_2022_JP_ENCODING
)
{
return
true
;
}
nsIURI
*
uri
=
GetOriginalURI
(
)
;
if
(
uri
)
{
if
(
uri
-
>
SchemeIs
(
"
about
"
)
)
{
return
true
;
}
bool
isResource
;
nsresult
rv
=
NS_URIChainHasFlags
(
uri
nsIProtocolHandler
:
:
URI_IS_UI_RESOURCE
&
isResource
)
;
if
(
NS_FAILED
(
rv
)
|
|
isResource
)
{
return
true
;
}
}
switch
(
mCharacterSetSource
)
{
case
kCharsetUninitialized
:
case
kCharsetFromFallback
:
case
kCharsetFromDocTypeDefault
:
case
kCharsetFromInitialAutoDetectionWouldHaveBeenUTF8
:
case
kCharsetFromInitialAutoDetectionWouldNotHaveBeenUTF8DependedOnTLD
:
case
kCharsetFromFinalAutoDetectionWouldHaveBeenUTF8
:
case
kCharsetFromFinalAutoDetectionWouldNotHaveBeenUTF8DependedOnTLD
:
case
kCharsetFromParentFrame
:
case
kCharsetFromXmlDeclaration
:
case
kCharsetFromMetaTag
:
case
kCharsetFromChannel
:
return
false
;
}
bool
potentialEffect
=
false
;
nsIPrincipal
*
parentPrincipal
=
NodePrincipal
(
)
;
auto
subDoc
=
[
&
potentialEffect
parentPrincipal
]
(
Document
&
aSubDoc
)
{
if
(
parentPrincipal
-
>
Equals
(
aSubDoc
.
NodePrincipal
(
)
)
&
&
!
aSubDoc
.
WillIgnoreCharsetOverride
(
)
)
{
potentialEffect
=
true
;
return
CallState
:
:
Stop
;
}
return
CallState
:
:
Continue
;
}
;
EnumerateSubDocuments
(
subDoc
)
;
return
!
potentialEffect
;
}
void
nsHTMLDocument
:
:
GetFormsAndFormControls
(
nsContentList
*
*
aFormList
nsContentList
*
*
aFormControlList
)
{
RefPtr
<
ContentListHolder
>
holder
=
mContentListHolder
;
if
(
!
holder
)
{
FlushPendingNotifications
(
FlushType
:
:
Content
)
;
RefPtr
<
nsContentList
>
htmlForms
=
GetExistingForms
(
)
;
if
(
!
htmlForms
)
{
htmlForms
=
new
nsContentList
(
this
kNameSpaceID_XHTML
nsGkAtoms
:
:
form
nsGkAtoms
:
:
form
true
true
)
;
}
RefPtr
<
nsContentList
>
htmlFormControls
=
new
nsContentList
(
this
nsHTMLDocument
:
:
MatchFormControls
nullptr
nullptr
true
nullptr
kNameSpaceID_None
true
true
)
;
holder
=
new
ContentListHolder
(
this
htmlForms
htmlFormControls
)
;
RefPtr
<
ContentListHolder
>
runnable
=
holder
;
if
(
NS_SUCCEEDED
(
Dispatch
(
TaskCategory
:
:
GarbageCollection
runnable
.
forget
(
)
)
)
)
{
mContentListHolder
=
holder
;
}
}
NS_ADDREF
(
*
aFormList
=
holder
-
>
mFormList
)
;
NS_ADDREF
(
*
aFormControlList
=
holder
-
>
mFormControlList
)
;
}
