#
ifndef
mozilla_dom_HTMLEmbedElement_h
#
define
mozilla_dom_HTMLEmbedElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsObjectLoadingContent
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsError
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLEmbedElement
final
:
public
nsGenericHTMLElement
public
nsObjectLoadingContent
{
public
:
explicit
HTMLEmbedElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
=
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLEmbedElement
embed
)
bool
AllowFullscreen
(
)
const
{
return
IsRewrittenYoutubeEmbed
(
)
&
&
GetBoolAttr
(
nsGkAtoms
:
:
allowfullscreen
)
;
}
virtual
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
override
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
=
true
)
override
;
virtual
bool
IsHTMLFocusable
(
bool
aWithMouse
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
virtual
void
DestroyContent
(
)
override
;
virtual
uint32_t
GetCapabilities
(
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsresult
CopyInnerTo
(
HTMLEmbedElement
*
aDest
)
;
void
StartObjectLoad
(
)
{
StartObjectLoad
(
true
false
)
;
}
virtual
bool
IsInteractiveHTMLContent
(
)
const
override
{
return
true
;
}
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLEmbedElement
nsGenericHTMLElement
)
void
GetAlign
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
align
aValue
)
;
}
void
SetAlign
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
align
aValue
aRv
)
;
}
void
GetHeight
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
height
aValue
)
;
}
void
SetHeight
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
height
aValue
aRv
)
;
}
void
GetName
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
)
;
}
void
SetName
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
aRv
)
;
}
void
GetWidth
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
width
aValue
)
;
}
void
SetWidth
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
width
aValue
aRv
)
;
}
void
GetSrc
(
DOMString
&
aValue
)
{
GetURIAttr
(
nsGkAtoms
:
:
src
nullptr
aValue
)
;
}
void
SetSrc
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
src
aValue
aRv
)
;
}
void
GetType
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
type
aValue
)
;
}
void
SetType
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aValue
aRv
)
;
}
Document
*
GetSVGDocument
(
nsIPrincipal
&
aSubjectPrincipal
)
{
return
GetContentDocument
(
aSubjectPrincipal
)
;
}
void
StartObjectLoad
(
bool
aNotify
bool
aForceLoad
)
;
protected
:
nsIContent
*
AsContent
(
)
override
{
return
this
;
}
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
virtual
nsresult
OnAttrSetButNotChanged
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValueOrString
&
aValue
bool
aNotify
)
override
;
private
:
~
HTMLEmbedElement
(
)
;
nsContentPolicyType
GetContentPolicyType
(
)
const
override
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
void
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
MappedDeclarations
&
)
;
nsresult
AfterMaybeChangeAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
bool
aNotify
)
;
}
;
}
}
#
endif
