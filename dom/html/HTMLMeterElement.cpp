#
include
"
HTMLMeterElement
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMeterElementBinding
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Meter
)
namespace
mozilla
:
:
dom
{
const
double
HTMLMeterElement
:
:
kDefaultValue
=
0
.
0
;
const
double
HTMLMeterElement
:
:
kDefaultMin
=
0
.
0
;
const
double
HTMLMeterElement
:
:
kDefaultMax
=
1
.
0
;
HTMLMeterElement
:
:
HTMLMeterElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
HTMLMeterElement
:
:
~
HTMLMeterElement
(
)
=
default
;
NS_IMPL_ELEMENT_CLONE
(
HTMLMeterElement
)
EventStates
HTMLMeterElement
:
:
IntrinsicState
(
)
const
{
EventStates
state
=
nsGenericHTMLElement
:
:
IntrinsicState
(
)
;
state
|
=
GetOptimumState
(
)
;
return
state
;
}
bool
HTMLMeterElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
value
|
|
aAttribute
=
=
nsGkAtoms
:
:
max
|
|
aAttribute
=
=
nsGkAtoms
:
:
min
|
|
aAttribute
=
=
nsGkAtoms
:
:
low
|
|
aAttribute
=
=
nsGkAtoms
:
:
high
|
|
aAttribute
=
=
nsGkAtoms
:
:
optimum
)
{
return
aResult
.
ParseDoubleValue
(
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
double
HTMLMeterElement
:
:
Min
(
)
const
{
const
nsAttrValue
*
attrMin
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
min
)
;
if
(
attrMin
&
&
attrMin
-
>
Type
(
)
=
=
nsAttrValue
:
:
eDoubleValue
)
{
return
attrMin
-
>
GetDoubleValue
(
)
;
}
return
kDefaultMin
;
}
double
HTMLMeterElement
:
:
Max
(
)
const
{
double
max
;
const
nsAttrValue
*
attrMax
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
max
)
;
if
(
attrMax
&
&
attrMax
-
>
Type
(
)
=
=
nsAttrValue
:
:
eDoubleValue
)
{
max
=
attrMax
-
>
GetDoubleValue
(
)
;
}
else
{
max
=
kDefaultMax
;
}
return
std
:
:
max
(
max
Min
(
)
)
;
}
double
HTMLMeterElement
:
:
Value
(
)
const
{
double
value
;
const
nsAttrValue
*
attrValue
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
value
)
;
if
(
attrValue
&
&
attrValue
-
>
Type
(
)
=
=
nsAttrValue
:
:
eDoubleValue
)
{
value
=
attrValue
-
>
GetDoubleValue
(
)
;
}
else
{
value
=
kDefaultValue
;
}
double
min
=
Min
(
)
;
if
(
value
<
=
min
)
{
return
min
;
}
return
std
:
:
min
(
value
Max
(
)
)
;
}
double
HTMLMeterElement
:
:
Position
(
)
const
{
const
double
max
=
Max
(
)
;
const
double
min
=
Min
(
)
;
const
double
value
=
Value
(
)
;
double
range
=
max
-
min
;
return
range
!
=
0
.
0
?
(
value
-
min
)
/
range
:
1
.
0
;
}
double
HTMLMeterElement
:
:
Low
(
)
const
{
double
min
=
Min
(
)
;
const
nsAttrValue
*
attrLow
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
low
)
;
if
(
!
attrLow
|
|
attrLow
-
>
Type
(
)
!
=
nsAttrValue
:
:
eDoubleValue
)
{
return
min
;
}
double
low
=
attrLow
-
>
GetDoubleValue
(
)
;
if
(
low
<
=
min
)
{
return
min
;
}
return
std
:
:
min
(
low
Max
(
)
)
;
}
double
HTMLMeterElement
:
:
High
(
)
const
{
double
max
=
Max
(
)
;
const
nsAttrValue
*
attrHigh
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
high
)
;
if
(
!
attrHigh
|
|
attrHigh
-
>
Type
(
)
!
=
nsAttrValue
:
:
eDoubleValue
)
{
return
max
;
}
double
high
=
attrHigh
-
>
GetDoubleValue
(
)
;
if
(
high
>
=
max
)
{
return
max
;
}
return
std
:
:
max
(
high
Low
(
)
)
;
}
double
HTMLMeterElement
:
:
Optimum
(
)
const
{
double
max
=
Max
(
)
;
double
min
=
Min
(
)
;
const
nsAttrValue
*
attrOptimum
=
mAttrs
.
GetAttr
(
nsGkAtoms
:
:
optimum
)
;
if
(
!
attrOptimum
|
|
attrOptimum
-
>
Type
(
)
!
=
nsAttrValue
:
:
eDoubleValue
)
{
return
(
min
+
max
)
/
2
.
0
;
}
double
optimum
=
attrOptimum
-
>
GetDoubleValue
(
)
;
if
(
optimum
<
=
min
)
{
return
min
;
}
return
std
:
:
min
(
optimum
max
)
;
}
EventStates
HTMLMeterElement
:
:
GetOptimumState
(
)
const
{
double
value
=
Value
(
)
;
double
low
=
Low
(
)
;
double
high
=
High
(
)
;
double
optimum
=
Optimum
(
)
;
if
(
optimum
<
low
)
{
if
(
value
<
low
)
{
return
NS_EVENT_STATE_OPTIMUM
;
}
if
(
value
<
=
high
)
{
return
NS_EVENT_STATE_SUB_OPTIMUM
;
}
return
NS_EVENT_STATE_SUB_SUB_OPTIMUM
;
}
if
(
optimum
>
high
)
{
if
(
value
>
high
)
{
return
NS_EVENT_STATE_OPTIMUM
;
}
if
(
value
>
=
low
)
{
return
NS_EVENT_STATE_SUB_OPTIMUM
;
}
return
NS_EVENT_STATE_SUB_SUB_OPTIMUM
;
}
if
(
value
>
=
low
&
&
value
<
=
high
)
{
return
NS_EVENT_STATE_OPTIMUM
;
}
return
NS_EVENT_STATE_SUB_OPTIMUM
;
}
JSObject
*
HTMLMeterElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLMeterElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
