#
include
"
HTMLFontElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFontElementBinding
.
h
"
#
include
"
mozilla
/
GenericSpecifiedValuesInlines
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsMappedAttributes
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSParser
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Font
)
namespace
mozilla
{
namespace
dom
{
HTMLFontElement
:
:
~
HTMLFontElement
(
)
{
}
JSObject
*
HTMLFontElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLFontElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_IMPL_ELEMENT_CLONE
(
HTMLFontElement
)
bool
HTMLFontElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsIAtom
*
aAttribute
const
nsAString
&
aValue
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
size
)
{
int32_t
size
=
nsContentUtils
:
:
ParseLegacyFontSize
(
aValue
)
;
if
(
size
)
{
aResult
.
SetTo
(
size
&
aValue
)
;
return
true
;
}
return
false
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
color
)
{
return
aResult
.
ParseColor
(
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aResult
)
;
}
void
HTMLFontElement
:
:
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
GenericSpecifiedValues
*
aData
)
{
if
(
aData
-
>
ShouldComputeStyleStruct
(
NS_STYLE_INHERIT_BIT
(
Font
)
)
)
{
if
(
!
aData
-
>
PropertyIsSet
(
eCSSProperty_font_family
)
)
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
face
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eString
&
&
!
value
-
>
IsEmptyString
(
)
)
{
aData
-
>
SetFontFamily
(
value
-
>
GetStringValue
(
)
)
;
}
}
if
(
!
aData
-
>
PropertyIsSet
(
eCSSProperty_font_size
)
)
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
size
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
aData
-
>
SetKeywordValue
(
eCSSProperty_font_size
value
-
>
GetIntegerValue
(
)
)
;
}
}
if
(
aData
-
>
ShouldComputeStyleStruct
(
NS_STYLE_INHERIT_BIT
(
Color
)
)
)
{
if
(
!
aData
-
>
PropertyIsSet
(
eCSSProperty_color
)
&
&
aData
-
>
PresContext
(
)
-
>
UseDocumentColors
(
)
)
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
color
)
;
nscolor
color
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
aData
-
>
SetColorValue
(
eCSSProperty_color
color
)
;
}
}
}
if
(
aData
-
>
ShouldComputeStyleStruct
(
NS_STYLE_INHERIT_BIT
(
TextReset
)
)
&
&
aData
-
>
PresContext
(
)
-
>
CompatibilityMode
(
)
=
=
eCompatibility_NavQuirks
)
{
const
nsAttrValue
*
value
=
aAttributes
-
>
GetAttr
(
nsGkAtoms
:
:
color
)
;
nscolor
color
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
aData
-
>
SetTextDecorationColorOverride
(
)
;
}
}
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aAttributes
aData
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLFontElement
:
:
IsAttributeMapped
(
const
nsIAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
attributes
[
]
=
{
{
&
nsGkAtoms
:
:
face
}
{
&
nsGkAtoms
:
:
size
}
{
&
nsGkAtoms
:
:
color
}
{
nullptr
}
}
;
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
attributes
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLFontElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
}
}
