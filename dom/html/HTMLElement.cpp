#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLElementBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
virtual
~
HTMLElement
(
)
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
protected
:
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
}
;
HTMLElement
:
:
HTMLElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
if
(
NodeInfo
(
)
-
>
Equals
(
nsGkAtoms
:
:
bdi
)
)
{
AddStatesSilently
(
NS_EVENT_STATE_DIR_ATTR_LIKE_AUTO
)
;
}
}
HTMLElement
:
:
~
HTMLElement
(
)
=
default
;
NS_IMPL_ELEMENT_CLONE
(
HTMLElement
)
JSObject
*
HTMLElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
HTMLElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
nsGenericHTMLElement
*
NS_NewHTMLElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
{
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
nodeInfo
(
aNodeInfo
)
;
auto
*
nim
=
nodeInfo
-
>
NodeInfoManager
(
)
;
return
new
(
nim
)
mozilla
:
:
dom
:
:
HTMLElement
(
nodeInfo
.
forget
(
)
)
;
}
nsGenericHTMLElement
*
NS_NewCustomElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
{
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
nodeInfo
(
aNodeInfo
)
;
auto
*
nim
=
nodeInfo
-
>
NodeInfoManager
(
)
;
return
new
(
nim
)
mozilla
:
:
dom
:
:
HTMLElement
(
nodeInfo
.
forget
(
)
)
;
}
