#
include
"
mozilla
/
dom
/
HTMLHeadingElement
.
h
"
#
include
"
mozilla
/
MappedDeclarationsBuilder
.
h
"
#
include
"
mozilla
/
dom
/
HTMLHeadingElementBinding
.
h
"
#
include
"
nsGkAtoms
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Heading
)
namespace
mozilla
:
:
dom
{
HTMLHeadingElement
:
:
~
HTMLHeadingElement
(
)
=
default
;
NS_IMPL_ELEMENT_CLONE
(
HTMLHeadingElement
)
JSObject
*
HTMLHeadingElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLHeadingElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
HTMLHeadingElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
align
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
{
return
ParseDivAlignValue
(
aValue
aResult
)
;
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLHeadingElement
:
:
UpdateLevel
(
bool
aNotify
)
{
AutoStateChangeNotifier
notifier
(
*
this
aNotify
)
;
RemoveStatesSilently
(
ElementState
:
:
HEADING_LEVEL_BITS
)
;
uint64_t
level
=
ComputedLevel
(
)
;
MOZ_ASSERT
(
level
>
0
&
&
level
<
16
"
ComputedLevel
(
)
must
fit
into
4
bits
!
"
)
;
uint64_t
bits
=
(
level
<
<
HEADING_LEVEL_OFFSET
)
;
MOZ_ASSERT
(
(
bits
&
ElementState
:
:
HEADING_LEVEL_BITS
.
bits
)
=
=
bits
)
;
AddStatesSilently
(
ElementState
(
bits
)
)
;
}
void
HTMLHeadingElement
:
:
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
aBuilder
)
{
nsGenericHTMLElement
:
:
MapDivAlignAttributeInto
(
aBuilder
)
;
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aBuilder
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLHeadingElement
:
:
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
sDivAlignAttributeMap
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLHeadingElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
}
