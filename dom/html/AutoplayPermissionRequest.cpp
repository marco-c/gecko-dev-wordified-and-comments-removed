#
include
"
mozilla
/
AutoplayPermissionRequest
.
h
"
#
include
"
mozilla
/
AutoplayPermissionManager
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
extern
mozilla
:
:
LazyLogModule
gAutoplayPermissionLog
;
#
define
PLAY_REQUEST_LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gAutoplayPermissionLog
LogLevel
:
:
Debug
(
msg
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
AutoplayPermissionRequest
ContentPermissionRequestBase
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
AutoplayPermissionRequest
ContentPermissionRequestBase
)
AutoplayPermissionRequest
:
:
AutoplayPermissionRequest
(
AutoplayPermissionManager
*
aManager
nsGlobalWindowInner
*
aWindow
nsIPrincipal
*
aNodePrincipal
nsIEventTarget
*
aMainThreadTarget
)
:
ContentPermissionRequestBase
(
aNodePrincipal
false
aWindow
NS_LITERAL_CSTRING
(
"
"
)
NS_LITERAL_CSTRING
(
"
autoplay
-
media
"
)
)
mManager
(
aManager
)
mMainThreadTarget
(
aMainThreadTarget
)
{
}
AutoplayPermissionRequest
:
:
~
AutoplayPermissionRequest
(
)
{
Cancel
(
)
;
}
NS_IMETHODIMP
AutoplayPermissionRequest
:
:
Cancel
(
)
{
if
(
mManager
)
{
mManager
-
>
DenyPlayRequestIfExists
(
)
;
mManager
=
nullptr
;
}
return
NS_OK
;
}
NS_IMETHODIMP
AutoplayPermissionRequest
:
:
Allow
(
JS
:
:
HandleValue
aChoices
)
{
if
(
mManager
)
{
mManager
-
>
ApprovePlayRequestIfExists
(
)
;
mManager
=
nullptr
;
}
return
NS_OK
;
}
already_AddRefed
<
AutoplayPermissionRequest
>
AutoplayPermissionRequest
:
:
Create
(
nsGlobalWindowInner
*
aWindow
AutoplayPermissionManager
*
aManager
)
{
if
(
!
aWindow
|
|
!
aWindow
-
>
GetPrincipal
(
)
|
|
!
aWindow
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
{
return
nullptr
;
}
RefPtr
<
AutoplayPermissionRequest
>
request
=
new
AutoplayPermissionRequest
(
aManager
aWindow
aWindow
-
>
GetPrincipal
(
)
aWindow
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
PLAY_REQUEST_LOG
(
"
AutoplayPermissionRequest
%
p
Create
(
)
"
request
.
get
(
)
)
;
return
request
.
forget
(
)
;
}
}
