#
ifndef
mozilla_dom_HTMLElement_h
#
define
mozilla_dom_HTMLElement_h
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLElement
final
:
public
nsGenericHTMLFormElement
{
public
:
explicit
HTMLElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
=
NOT_FROM_PARSER
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLElement
nsGenericHTMLFormElement
)
[
[
nodiscard
]
]
nsIFormControl
*
GetAsFormControl
(
)
final
;
[
[
nodiscard
]
]
const
nsIFormControl
*
GetAsFormControl
(
)
const
final
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsINode
*
GetScopeChainParent
(
)
const
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
UnbindFromTree
(
UnbindContext
&
)
override
;
void
DoneCreatingElement
(
)
override
;
void
SetCustomElementDefinition
(
CustomElementDefinition
*
aDefinition
)
override
;
bool
IsLabelable
(
)
const
override
{
return
IsFormAssociatedElement
(
)
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
ElementInternals
>
AttachInternals
(
ErrorResult
&
aRv
)
override
;
bool
IsDisabledForEvents
(
WidgetEvent
*
aEvent
)
override
;
bool
IsFormAssociatedElement
(
)
const
override
;
void
AfterClearForm
(
bool
aUnbindOrDelete
)
override
;
void
FieldSetDisabledChanged
(
bool
aNotify
)
override
;
void
SaveState
(
)
override
;
void
UpdateValidityElementStates
(
bool
aNotify
)
;
void
UpdateFormOwner
(
)
;
void
MaybeRestoreFormAssociatedCustomElementState
(
)
;
void
InhibitRestoration
(
bool
aShouldInhibit
)
;
protected
:
virtual
~
HTMLElement
(
)
=
default
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
void
SetFormInternal
(
HTMLFormElement
*
aForm
bool
aBindToTree
)
override
;
HTMLFormElement
*
GetFormInternal
(
)
const
override
;
void
SetFieldSetInternal
(
HTMLFieldSetElement
*
aFieldset
)
override
;
HTMLFieldSetElement
*
GetFieldSetInternal
(
)
const
override
;
bool
CanBeDisabled
(
)
const
override
;
void
UpdateDisabledState
(
bool
aNotify
)
override
;
void
UpdateFormOwner
(
bool
aBindToTree
Element
*
aFormIdElement
)
override
;
void
UpdateBarredFromConstraintValidation
(
)
;
ElementInternals
*
GetElementInternals
(
)
const
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
RestoreFormAssociatedCustomElementState
(
)
;
}
;
}
#
endif
