#
ifndef
mozilla_dom_HTMLObjectElement_h
#
define
mozilla_dom_HTMLObjectElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ConstraintValidation
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsObjectLoadingContent
.
h
"
namespace
mozilla
:
:
dom
{
class
FormData
;
template
<
typename
T
>
struct
Nullable
;
class
WindowProxyHolder
;
class
HTMLObjectElement
final
:
public
nsGenericHTMLFormControlElement
public
nsObjectLoadingContent
public
ConstraintValidation
{
public
:
explicit
HTMLObjectElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
=
NOT_FROM_PARSER
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLObjectElement
object
)
int32_t
TabIndexDefault
(
)
override
;
const
Element
*
AsElement
(
)
const
final
{
return
this
;
}
bool
IsInteractiveHTMLContent
(
)
const
override
;
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
UnbindFromTree
(
UnbindContext
&
)
override
;
bool
IsHTMLFocusable
(
IsFocusableFlags
bool
*
aIsFocusable
int32_t
*
aTabIndex
)
override
;
NS_IMETHOD
Reset
(
)
override
{
return
NS_OK
;
}
NS_IMETHOD
SubmitNamesValues
(
FormData
*
aFormData
)
override
{
return
NS_OK
;
}
void
DoneAddingChildren
(
bool
aHaveNotified
)
override
;
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
void
DestroyContent
(
)
override
;
uint32_t
GetCapabilities
(
)
const
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
nsresult
CopyInnerTo
(
Element
*
aDest
)
;
void
StartObjectLoad
(
)
{
StartObjectLoad
(
true
false
)
;
}
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLObjectElement
nsGenericHTMLFormControlElement
)
void
GetData
(
DOMString
&
aValue
)
{
GetURIAttr
(
nsGkAtoms
:
:
data
nsGkAtoms
:
:
codebase
aValue
)
;
}
void
SetData
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
data
aValue
aRv
)
;
}
void
GetType
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
type
aValue
)
;
}
void
SetType
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aValue
aRv
)
;
}
void
GetName
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
)
;
}
void
SetName
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
aRv
)
;
}
void
GetUseMap
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
usemap
aValue
)
;
}
void
SetUseMap
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
usemap
aValue
aRv
)
;
}
void
GetWidth
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
width
aValue
)
;
}
void
SetWidth
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
width
aValue
aRv
)
;
}
void
GetHeight
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
height
aValue
)
;
}
void
SetHeight
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
height
aValue
aRv
)
;
}
using
nsObjectLoadingContent
:
:
GetContentDocument
;
Nullable
<
WindowProxyHolder
>
GetContentWindow
(
nsIPrincipal
&
aSubjectPrincipal
)
;
using
ConstraintValidation
:
:
GetValidationMessage
;
using
ConstraintValidation
:
:
SetCustomValidity
;
void
GetAlign
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
align
aValue
)
;
}
void
SetAlign
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
align
aValue
aRv
)
;
}
void
GetArchive
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
archive
aValue
)
;
}
void
SetArchive
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
archive
aValue
aRv
)
;
}
void
GetCode
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
code
aValue
)
;
}
void
SetCode
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
code
aValue
aRv
)
;
}
bool
Declare
(
)
{
return
GetBoolAttr
(
nsGkAtoms
:
:
declare
)
;
}
void
SetDeclare
(
bool
aValue
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
declare
aValue
aRv
)
;
}
uint32_t
Hspace
(
)
{
return
GetDimensionAttrAsUnsignedInt
(
nsGkAtoms
:
:
hspace
0
)
;
}
void
SetHspace
(
uint32_t
aValue
ErrorResult
&
aRv
)
{
SetUnsignedIntAttr
(
nsGkAtoms
:
:
hspace
aValue
0
aRv
)
;
}
void
GetStandby
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
standby
aValue
)
;
}
void
SetStandby
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
standby
aValue
aRv
)
;
}
uint32_t
Vspace
(
)
{
return
GetDimensionAttrAsUnsignedInt
(
nsGkAtoms
:
:
vspace
0
)
;
}
void
SetVspace
(
uint32_t
aValue
ErrorResult
&
aRv
)
{
SetUnsignedIntAttr
(
nsGkAtoms
:
:
vspace
aValue
0
aRv
)
;
}
void
GetCodeBase
(
DOMString
&
aValue
)
{
GetURIAttr
(
nsGkAtoms
:
:
codebase
nullptr
aValue
)
;
}
void
SetCodeBase
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
codebase
aValue
aRv
)
;
}
void
GetCodeType
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
codetype
aValue
)
;
}
void
SetCodeType
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
codetype
aValue
aRv
)
;
}
void
GetBorder
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
border
aValue
)
;
}
void
SetBorder
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
border
aValue
aRv
)
;
}
Document
*
GetSVGDocument
(
nsIPrincipal
&
aSubjectPrincipal
)
{
return
GetContentDocument
(
aSubjectPrincipal
)
;
}
void
StartObjectLoad
(
bool
aNotify
bool
aForceLoad
)
;
protected
:
void
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
void
OnAttrSetButNotChanged
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValueOrString
&
aValue
bool
aNotify
)
override
;
private
:
nsContentPolicyType
GetContentPolicyType
(
)
const
override
{
return
nsIContentPolicy
:
:
TYPE_INTERNAL_OBJECT
;
}
virtual
~
HTMLObjectElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
void
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
)
;
void
AfterMaybeChangeAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
bool
aNotify
)
;
bool
mIsDoneAddingChildren
;
}
;
}
#
endif
