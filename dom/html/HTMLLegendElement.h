#
ifndef
mozilla_dom_HTMLLegendElement_h
#
define
mozilla_dom_HTMLLegendElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLLegendElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLLegendElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
:
nsGenericHTMLElement
(
aNodeInfo
)
{
}
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLLegendElement
legend
)
using
nsGenericHTMLElement
:
:
Focus
;
virtual
void
Focus
(
ErrorResult
&
aError
)
override
;
virtual
bool
PerformAccesskey
(
bool
aKeyCausesActivation
bool
aIsTrustedEvent
)
override
;
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
nsChangeHint
GetAttributeChangeHint
(
const
nsAtom
*
aAttribute
int32_t
aModType
)
const
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
Element
*
GetFormElement
(
)
const
{
nsCOMPtr
<
nsIFormControl
>
fieldsetControl
=
do_QueryInterface
(
GetFieldSet
(
)
)
;
return
fieldsetControl
?
fieldsetControl
-
>
GetFormElement
(
)
:
nullptr
;
}
already_AddRefed
<
HTMLFormElement
>
GetForm
(
)
;
void
GetAlign
(
DOMString
&
aAlign
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
align
aAlign
)
;
}
void
SetAlign
(
const
nsAString
&
aAlign
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
align
aAlign
aError
)
;
}
nsINode
*
GetScopeChainParent
(
)
const
override
{
Element
*
form
=
GetFormElement
(
)
;
return
form
?
form
:
nsGenericHTMLElement
:
:
GetScopeChainParent
(
)
;
}
protected
:
virtual
~
HTMLLegendElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIContent
*
GetFieldSet
(
)
const
;
}
;
}
}
#
endif
