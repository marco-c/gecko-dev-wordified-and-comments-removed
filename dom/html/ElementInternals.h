#
ifndef
mozilla_dom_ElementInternals_h
#
define
mozilla_dom_ElementInternals_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
ElementInternalsBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIConstraintValidation
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsINodeList
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
HTMLElement
;
class
HTMLFieldSetElement
;
class
HTMLFormElement
;
class
ShadowRoot
;
class
ElementInternals
final
:
public
nsIFormControl
public
nsIConstraintValidation
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
ElementInternals
nsIFormControl
)
explicit
ElementInternals
(
HTMLElement
*
aTarget
)
;
nsISupports
*
GetParentObject
(
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
ShadowRoot
*
GetShadowRoot
(
)
const
;
void
SetFormValue
(
const
Nullable
<
FileOrUSVStringOrFormData
>
&
aValue
const
Optional
<
Nullable
<
FileOrUSVStringOrFormData
>
>
&
aState
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
HTMLFormElement
*
GetForm
(
ErrorResult
&
aRv
)
const
;
bool
GetWillValidate
(
ErrorResult
&
aRv
)
const
;
already_AddRefed
<
nsINodeList
>
GetLabels
(
ErrorResult
&
aRv
)
const
;
mozilla
:
:
dom
:
:
HTMLFieldSetElement
*
GetFieldSet
(
)
override
{
return
mFieldSet
;
}
mozilla
:
:
dom
:
:
HTMLFormElement
*
GetForm
(
)
const
override
{
return
mForm
;
}
void
SetForm
(
mozilla
:
:
dom
:
:
HTMLFormElement
*
aForm
)
override
;
void
ClearForm
(
bool
aRemoveFromForm
bool
aUnbindOrDelete
)
override
;
NS_IMETHOD
Reset
(
)
override
;
NS_IMETHOD
SubmitNamesValues
(
mozilla
:
:
dom
:
:
FormData
*
aFormData
)
override
;
bool
AllowDrop
(
)
override
{
return
true
;
}
void
SetFieldSet
(
mozilla
:
:
dom
:
:
HTMLFieldSetElement
*
aFieldSet
)
{
mFieldSet
=
aFieldSet
;
}
void
UpdateFormOwner
(
)
;
void
UpdateBarredFromConstraintValidation
(
)
;
void
Unlink
(
)
;
private
:
~
ElementInternals
(
)
=
default
;
HTMLElement
*
mTarget
;
HTMLFormElement
*
mForm
;
HTMLFieldSetElement
*
mFieldSet
;
Nullable
<
OwningFileOrUSVStringOrFormData
>
mSubmissionValue
;
Nullable
<
OwningFileOrUSVStringOrFormData
>
mState
;
}
;
}
}
#
endif
