#
include
"
mozilla
/
dom
/
HTMLPreElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLPreElementBinding
.
h
"
#
include
"
mozilla
/
MappedDeclarationsBuilder
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsStyleConsts
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Pre
)
namespace
mozilla
:
:
dom
{
HTMLPreElement
:
:
~
HTMLPreElement
(
)
=
default
;
NS_IMPL_ELEMENT_CLONE
(
HTMLPreElement
)
bool
HTMLPreElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
width
)
{
return
aResult
.
ParseIntValue
(
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLPreElement
:
:
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
aBuilder
)
{
if
(
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
wrap
)
)
{
aBuilder
.
SetKeywordValue
(
eCSSProperty_white_space
StyleWhiteSpace
:
:
PreWrap
)
;
}
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aBuilder
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLPreElement
:
:
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
{
if
(
!
mNodeInfo
-
>
Equals
(
nsGkAtoms
:
:
pre
)
)
{
return
nsGenericHTMLElement
:
:
IsAttributeMapped
(
aAttribute
)
;
}
static
const
MappedAttributeEntry
attributes
[
]
=
{
{
nsGkAtoms
:
:
wrap
}
{
nullptr
}
}
;
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
attributes
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLPreElement
:
:
GetAttributeMappingFunction
(
)
const
{
if
(
!
mNodeInfo
-
>
Equals
(
nsGkAtoms
:
:
pre
)
)
{
return
nsGenericHTMLElement
:
:
GetAttributeMappingFunction
(
)
;
}
return
&
MapAttributesIntoRule
;
}
JSObject
*
HTMLPreElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLPreElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
