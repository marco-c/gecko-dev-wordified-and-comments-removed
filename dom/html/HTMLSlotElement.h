#
ifndef
mozilla_dom_HTMLSlotElement_h
#
define
mozilla_dom_HTMLSlotElement_h
#
include
"
nsIDOMHTMLElement
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
AssignedNodesOptions
;
class
HTMLSlotElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLSlotElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_IMPL_FROMCONTENT_HTML_WITH_TAG
(
HTMLSlotElement
slot
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLSlotElement
nsGenericHTMLElement
)
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
void
SetName
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aName
aRv
)
;
}
void
GetName
(
nsAString
&
aName
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aName
)
;
}
void
AssignedNodes
(
const
AssignedNodesOptions
&
aOptions
nsTArray
<
RefPtr
<
nsINode
>
>
&
aNodes
)
;
protected
:
virtual
~
HTMLSlotElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsTArray
<
RefPtr
<
nsINode
>
>
mAssignedNodes
;
}
;
}
}
#
endif
