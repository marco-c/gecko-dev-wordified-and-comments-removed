#
include
"
mozilla
/
dom
/
HTMLAreaElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
#
include
"
mozilla
/
dom
/
HTMLAnchorElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLAreaElementBinding
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsWindowSizes
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Area
)
namespace
mozilla
{
namespace
dom
{
HTMLAreaElement
:
:
HTMLAreaElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
Link
(
this
)
{
}
HTMLAreaElement
:
:
~
HTMLAreaElement
(
)
=
default
;
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
HTMLAreaElement
nsGenericHTMLElement
Link
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
HTMLAreaElement
nsGenericHTMLElement
mRelList
)
NS_IMPL_ELEMENT_CLONE
(
HTMLAreaElement
)
int32_t
HTMLAreaElement
:
:
TabIndexDefault
(
)
{
return
0
;
}
void
HTMLAreaElement
:
:
GetTarget
(
DOMString
&
aValue
)
{
if
(
!
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
target
aValue
)
)
{
GetBaseTarget
(
aValue
)
;
}
}
void
HTMLAreaElement
:
:
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
{
GetEventTargetParentForAnchors
(
aVisitor
)
;
}
nsresult
HTMLAreaElement
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
return
PostHandleEventForAnchors
(
aVisitor
)
;
}
bool
HTMLAreaElement
:
:
IsLink
(
nsIURI
*
*
aURI
)
const
{
return
IsHTMLLink
(
aURI
)
;
}
void
HTMLAreaElement
:
:
GetLinkTarget
(
nsAString
&
aTarget
)
{
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
target
aTarget
)
;
if
(
aTarget
.
IsEmpty
(
)
)
{
GetBaseTarget
(
aTarget
)
;
}
}
nsDOMTokenList
*
HTMLAreaElement
:
:
RelList
(
)
{
if
(
!
mRelList
)
{
mRelList
=
new
nsDOMTokenList
(
this
nsGkAtoms
:
:
rel
HTMLAnchorElement
:
:
sSupportedRelValues
)
;
}
return
mRelList
;
}
nsresult
HTMLAreaElement
:
:
BindToTree
(
BindContext
&
aContext
nsINode
&
aParent
)
{
Link
:
:
ResetLinkState
(
false
Link
:
:
ElementHasHref
(
)
)
;
nsresult
rv
=
nsGenericHTMLElement
:
:
BindToTree
(
aContext
aParent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
IsInComposedDoc
(
)
)
{
aContext
.
OwnerDoc
(
)
.
RegisterPendingLinkUpdate
(
this
)
;
}
return
rv
;
}
void
HTMLAreaElement
:
:
UnbindFromTree
(
bool
aNullParent
)
{
Link
:
:
ResetLinkState
(
false
Link
:
:
ElementHasHref
(
)
)
;
nsGenericHTMLElement
:
:
UnbindFromTree
(
aNullParent
)
;
}
nsresult
HTMLAreaElement
:
:
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aName
=
=
nsGkAtoms
:
:
href
)
{
Link
:
:
ResetLinkState
(
aNotify
!
!
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
AfterSetAttr
(
aNamespaceID
aName
aValue
aOldValue
aSubjectPrincipal
aNotify
)
;
}
void
HTMLAreaElement
:
:
ToString
(
nsAString
&
aSource
)
{
GetHref
(
aSource
)
;
}
already_AddRefed
<
nsIURI
>
HTMLAreaElement
:
:
GetHrefURI
(
)
const
{
return
GetHrefURIForAnchors
(
)
;
}
EventStates
HTMLAreaElement
:
:
IntrinsicState
(
)
const
{
return
Link
:
:
LinkState
(
)
|
nsGenericHTMLElement
:
:
IntrinsicState
(
)
;
}
void
HTMLAreaElement
:
:
AddSizeOfExcludingThis
(
nsWindowSizes
&
aSizes
size_t
*
aNodeSize
)
const
{
nsGenericHTMLElement
:
:
AddSizeOfExcludingThis
(
aSizes
aNodeSize
)
;
*
aNodeSize
+
=
Link
:
:
SizeOfExcludingThis
(
aSizes
.
mState
)
;
}
JSObject
*
HTMLAreaElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLAreaElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
