#
include
"
HTMLBodyElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLBodyElementBinding
.
h
"
#
include
"
mozilla
/
AttributeStyles
.
h
"
#
include
"
mozilla
/
EditorBase
.
h
"
#
include
"
mozilla
/
HTMLEditor
.
h
"
#
include
"
mozilla
/
MappedDeclarationsBuilder
.
h
"
#
include
"
mozilla
/
TextEditor
.
h
"
#
include
"
mozilla
/
dom
/
BindContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
DocumentInlines
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsGlobalWindow
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Body
)
namespace
mozilla
:
:
dom
{
HTMLBodyElement
:
:
~
HTMLBodyElement
(
)
=
default
;
JSObject
*
HTMLBodyElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLBodyElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
NS_IMPL_ELEMENT_CLONE
(
HTMLBodyElement
)
bool
HTMLBodyElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
bgcolor
|
|
aAttribute
=
=
nsGkAtoms
:
:
text
|
|
aAttribute
=
=
nsGkAtoms
:
:
link
|
|
aAttribute
=
=
nsGkAtoms
:
:
alink
|
|
aAttribute
=
=
nsGkAtoms
:
:
vlink
)
{
return
aResult
.
ParseColor
(
aValue
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
marginwidth
|
|
aAttribute
=
=
nsGkAtoms
:
:
marginheight
|
|
aAttribute
=
=
nsGkAtoms
:
:
topmargin
|
|
aAttribute
=
=
nsGkAtoms
:
:
bottommargin
|
|
aAttribute
=
=
nsGkAtoms
:
:
leftmargin
|
|
aAttribute
=
=
nsGkAtoms
:
:
rightmargin
)
{
return
aResult
.
ParseNonNegativeIntValue
(
aValue
)
;
}
}
return
nsGenericHTMLElement
:
:
ParseBackgroundAttribute
(
aNamespaceID
aAttribute
aValue
aResult
)
|
|
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLBodyElement
:
:
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
aBuilder
)
{
int32_t
bodyMarginWidth
=
-
1
;
int32_t
bodyMarginHeight
=
-
1
;
int32_t
bodyTopMargin
=
-
1
;
int32_t
bodyBottomMargin
=
-
1
;
int32_t
bodyLeftMargin
=
-
1
;
int32_t
bodyRightMargin
=
-
1
;
const
nsAttrValue
*
value
;
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
marginwidth
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyMarginWidth
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyMarginWidth
<
0
)
{
bodyMarginWidth
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_left
(
float
)
bodyMarginWidth
)
;
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_right
(
float
)
bodyMarginWidth
)
;
}
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
marginheight
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyMarginHeight
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyMarginHeight
<
0
)
{
bodyMarginHeight
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_top
(
float
)
bodyMarginHeight
)
;
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_bottom
(
float
)
bodyMarginHeight
)
;
}
if
(
bodyMarginHeight
=
=
-
1
)
{
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
topmargin
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyTopMargin
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyTopMargin
<
0
)
{
bodyTopMargin
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_top
(
float
)
bodyTopMargin
)
;
}
}
if
(
bodyMarginHeight
=
=
-
1
)
{
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
bottommargin
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyBottomMargin
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyBottomMargin
<
0
)
{
bodyBottomMargin
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_bottom
(
float
)
bodyBottomMargin
)
;
}
}
if
(
bodyMarginWidth
=
=
-
1
)
{
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
leftmargin
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyLeftMargin
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyLeftMargin
<
0
)
{
bodyLeftMargin
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_left
(
float
)
bodyLeftMargin
)
;
}
}
if
(
bodyMarginWidth
=
=
-
1
)
{
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
rightmargin
)
;
if
(
value
&
&
value
-
>
Type
(
)
=
=
nsAttrValue
:
:
eInteger
)
{
bodyRightMargin
=
value
-
>
GetIntegerValue
(
)
;
if
(
bodyRightMargin
<
0
)
{
bodyRightMargin
=
0
;
}
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_right
(
float
)
bodyRightMargin
)
;
}
}
if
(
bodyMarginWidth
=
=
-
1
|
|
bodyMarginHeight
=
=
-
1
)
{
if
(
nsDocShell
*
ds
=
nsDocShell
:
:
Cast
(
aBuilder
.
Document
(
)
.
GetDocShell
(
)
)
)
{
CSSIntSize
margins
=
ds
-
>
GetFrameMargins
(
)
;
int32_t
frameMarginWidth
=
margins
.
width
;
int32_t
frameMarginHeight
=
margins
.
height
;
if
(
bodyMarginWidth
=
=
-
1
&
&
frameMarginWidth
>
=
0
)
{
if
(
bodyLeftMargin
=
=
-
1
)
{
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_left
(
float
)
frameMarginWidth
)
;
}
if
(
bodyRightMargin
=
=
-
1
)
{
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_right
(
float
)
frameMarginWidth
)
;
}
}
if
(
bodyMarginHeight
=
=
-
1
&
&
frameMarginHeight
>
=
0
)
{
if
(
bodyTopMargin
=
=
-
1
)
{
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_top
(
float
)
frameMarginHeight
)
;
}
if
(
bodyBottomMargin
=
=
-
1
)
{
aBuilder
.
SetPixelValueIfUnset
(
eCSSProperty_margin_bottom
(
float
)
frameMarginHeight
)
;
}
}
}
}
if
(
AttributeStyles
*
attrStyles
=
aBuilder
.
Document
(
)
.
GetAttributeStyles
(
)
)
{
nscolor
color
;
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
link
)
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
attrStyles
-
>
SetLinkColor
(
color
)
;
}
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
alink
)
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
attrStyles
-
>
SetActiveLinkColor
(
color
)
;
}
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
vlink
)
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
attrStyles
-
>
SetVisitedLinkColor
(
color
)
;
}
}
if
(
!
aBuilder
.
PropertyIsSet
(
eCSSProperty_color
)
)
{
nscolor
color
;
value
=
aBuilder
.
GetAttr
(
nsGkAtoms
:
:
text
)
;
if
(
value
&
&
value
-
>
GetColorValue
(
color
)
)
{
aBuilder
.
SetColorValue
(
eCSSProperty_color
color
)
;
}
}
nsGenericHTMLElement
:
:
MapBackgroundAttributesInto
(
aBuilder
)
;
nsGenericHTMLElement
:
:
MapCommonAttributesInto
(
aBuilder
)
;
}
nsMapRuleToAttributesFunc
HTMLBodyElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
NS_IMETHODIMP_
(
bool
)
HTMLBodyElement
:
:
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
attributes
[
]
=
{
{
nsGkAtoms
:
:
link
}
{
nsGkAtoms
:
:
vlink
}
{
nsGkAtoms
:
:
alink
}
{
nsGkAtoms
:
:
text
}
{
nsGkAtoms
:
:
marginwidth
}
{
nsGkAtoms
:
:
marginheight
}
{
nsGkAtoms
:
:
topmargin
}
{
nsGkAtoms
:
:
rightmargin
}
{
nsGkAtoms
:
:
bottommargin
}
{
nsGkAtoms
:
:
leftmargin
}
{
nullptr
}
}
;
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
attributes
sCommonAttributeMap
sBackgroundAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
already_AddRefed
<
EditorBase
>
HTMLBodyElement
:
:
GetAssociatedEditor
(
)
{
MOZ_ASSERT
(
!
GetTextEditorInternal
(
)
)
;
if
(
this
!
=
OwnerDoc
(
)
-
>
GetBodyElement
(
)
)
{
return
nullptr
;
}
nsPresContext
*
presContext
=
GetPresContext
(
eForComposedDoc
)
;
if
(
!
presContext
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
presContext
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
nullptr
;
}
RefPtr
<
HTMLEditor
>
htmlEditor
=
docShell
-
>
GetHTMLEditor
(
)
;
return
htmlEditor
.
forget
(
)
;
}
bool
HTMLBodyElement
:
:
IsEventAttributeNameInternal
(
nsAtom
*
aName
)
{
return
nsContentUtils
:
:
IsEventAttributeName
(
aName
EventNameType_HTML
|
EventNameType_HTMLBodyOrFramesetOnly
)
;
}
nsresult
HTMLBodyElement
:
:
BindToTree
(
BindContext
&
aContext
nsINode
&
aParent
)
{
mAttrs
.
MarkAsPendingPresAttributeEvaluation
(
)
;
return
nsGenericHTMLElement
:
:
BindToTree
(
aContext
aParent
)
;
}
void
HTMLBodyElement
:
:
FrameMarginsChanged
(
)
{
MOZ_ASSERT
(
IsInComposedDoc
(
)
)
;
if
(
IsPendingMappedAttributeEvaluation
(
)
)
{
return
;
}
if
(
mAttrs
.
MarkAsPendingPresAttributeEvaluation
(
)
)
{
OwnerDoc
(
)
-
>
ScheduleForPresAttrEvaluation
(
this
)
;
}
}
#
define
EVENT
(
name_
id_
type_
\
struct_
)
#
define
WINDOW_EVENT_HELPER
(
name_
type_
)
\
type_
*
HTMLBodyElement
:
:
GetOn
#
#
name_
(
)
{
\
if
(
nsPIDOMWindowInner
*
win
=
OwnerDoc
(
)
-
>
GetInnerWindow
(
)
)
{
\
nsGlobalWindowInner
*
globalWin
=
nsGlobalWindowInner
:
:
Cast
(
win
)
;
\
return
globalWin
-
>
GetOn
#
#
name_
(
)
;
\
}
\
return
nullptr
;
\
}
\
void
HTMLBodyElement
:
:
SetOn
#
#
name_
(
type_
*
handler
)
{
\
nsPIDOMWindowInner
*
win
=
OwnerDoc
(
)
-
>
GetInnerWindow
(
)
;
\
if
(
!
win
)
{
\
return
;
\
}
\
\
nsGlobalWindowInner
*
globalWin
=
nsGlobalWindowInner
:
:
Cast
(
win
)
;
\
return
globalWin
-
>
SetOn
#
#
name_
(
handler
)
;
\
}
#
define
WINDOW_EVENT
(
name_
id_
type_
struct_
)
\
WINDOW_EVENT_HELPER
(
name_
EventHandlerNonNull
)
#
define
BEFOREUNLOAD_EVENT
(
name_
id_
type_
struct_
)
\
WINDOW_EVENT_HELPER
(
name_
OnBeforeUnloadEventHandlerNonNull
)
#
include
"
mozilla
/
EventNameList
.
h
"
#
undef
BEFOREUNLOAD_EVENT
#
undef
WINDOW_EVENT
#
undef
WINDOW_EVENT_HELPER
#
undef
EVENT
}
