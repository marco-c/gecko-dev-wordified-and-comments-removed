#
ifndef
mozilla_dom_HTMLProgressElement_h
#
define
mozilla_dom_HTMLProgressElement_h
#
include
<
algorithm
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLProgressElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLProgressElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
void
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
double
Value
(
)
const
;
void
SetValue
(
double
aValue
ErrorResult
&
aRv
)
{
SetDoubleAttr
(
nsGkAtoms
:
:
value
aValue
aRv
)
;
}
double
Max
(
)
const
;
void
SetMax
(
double
aValue
ErrorResult
&
aRv
)
{
SetDoubleAttr
<
Reflection
:
:
OnlyPositive
>
(
nsGkAtoms
:
:
max
aValue
aRv
)
;
}
double
Position
(
)
const
;
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLProgressElement
progress
)
;
protected
:
virtual
~
HTMLProgressElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
}
;
}
#
endif
