#
ifndef
mozilla_dom_HTMLFormElement_h
#
define
mozilla_dom_HTMLFormElement_h
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormSubmission
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIForm
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsIRadioGroupContainer
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
jsfriendapi
.
h
"
class
nsIMutableArray
;
class
nsIURI
;
namespace
mozilla
{
class
EventChainPostVisitor
;
class
EventChainPreVisitor
;
namespace
dom
{
class
HTMLFormControlsCollection
;
class
HTMLImageElement
;
class
HTMLFormElement
final
:
public
nsGenericHTMLElement
public
nsIWebProgressListener
public
nsIForm
public
nsIRadioGroupContainer
{
friend
class
HTMLFormControlsCollection
;
public
:
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLFormElement
form
)
explicit
HTMLFormElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
;
enum
{
FORM_CONTROL_LIST_HASHTABLE_LENGTH
=
8
}
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIWEBPROGRESSLISTENER
NS_IMETHOD_
(
nsIFormControl
*
)
GetElementAt
(
int32_t
aIndex
)
const
override
;
NS_IMETHOD_
(
uint32_t
)
GetElementCount
(
)
const
override
;
NS_IMETHOD_
(
int32_t
)
IndexOfControl
(
nsIFormControl
*
aControl
)
override
;
NS_IMETHOD_
(
nsIFormControl
*
)
GetDefaultSubmitElement
(
)
const
override
;
void
SetCurrentRadioButton
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
override
;
HTMLInputElement
*
GetCurrentRadioButton
(
const
nsAString
&
aName
)
override
;
NS_IMETHOD
GetNextRadioButton
(
const
nsAString
&
aName
const
bool
aPrevious
HTMLInputElement
*
aFocusedRadio
HTMLInputElement
*
*
aRadioOut
)
override
;
NS_IMETHOD
WalkRadioGroup
(
const
nsAString
&
aName
nsIRadioVisitor
*
aVisitor
bool
aFlushContent
)
override
;
void
AddToRadioGroup
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
override
;
void
RemoveFromRadioGroup
(
const
nsAString
&
aName
HTMLInputElement
*
aRadio
)
override
;
virtual
uint32_t
GetRequiredRadioCount
(
const
nsAString
&
aName
)
const
override
;
virtual
void
RadioRequiredWillChange
(
const
nsAString
&
aName
bool
aRequiredAdded
)
override
;
virtual
bool
GetValueMissingState
(
const
nsAString
&
aName
)
const
override
;
virtual
void
SetValueMissingState
(
const
nsAString
&
aName
bool
aValue
)
override
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
virtual
void
AsyncEventRunning
(
AsyncEventDispatcher
*
aEvent
)
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
void
WillHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aNullParent
=
true
)
override
;
virtual
nsresult
BeforeSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValueOrString
*
aValue
bool
aNotify
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
void
ForgetCurrentSubmission
(
)
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLFormElement
nsGenericHTMLElement
)
nsresult
RemoveElement
(
nsGenericHTMLFormElement
*
aElement
bool
aUpdateValidity
)
;
nsresult
RemoveElementFromTable
(
nsGenericHTMLFormElement
*
aElement
const
nsAString
&
aName
)
;
nsresult
AddElement
(
nsGenericHTMLFormElement
*
aElement
bool
aUpdateValidity
bool
aNotify
)
;
nsresult
AddElementToTable
(
nsGenericHTMLFormElement
*
aChild
const
nsAString
&
aName
)
;
nsresult
RemoveImageElement
(
HTMLImageElement
*
aElement
)
;
nsresult
RemoveImageElementFromTable
(
HTMLImageElement
*
aElement
const
nsAString
&
aName
)
;
nsresult
AddImageElement
(
HTMLImageElement
*
aElement
)
;
nsresult
AddImageElementToTable
(
HTMLImageElement
*
aChild
const
nsAString
&
aName
)
;
bool
ImplicitSubmissionIsDisabled
(
)
const
;
bool
IsLastActiveElement
(
const
nsIFormControl
*
aControl
)
const
;
bool
IsDefaultSubmitElement
(
const
nsIFormControl
*
aControl
)
const
;
void
OnSubmitClickBegin
(
Element
*
aOriginatingElement
)
;
void
OnSubmitClickEnd
(
)
;
void
UpdateValidity
(
bool
aElementValidityState
)
;
bool
GetValidity
(
)
const
{
return
!
mInvalidElementsCount
;
}
bool
CheckValidFormSubmission
(
)
;
bool
SubmissionCanProceed
(
Element
*
aSubmitter
)
;
nsresult
WalkFormElements
(
HTMLFormSubmission
*
aFormSubmission
)
;
bool
HasEverTriedInvalidSubmit
(
)
const
{
return
mEverTriedInvalidSubmit
;
}
already_AddRefed
<
nsISupports
>
FindNamedItem
(
const
nsAString
&
aName
nsWrapperCache
*
*
aCache
)
;
void
GetAcceptCharset
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
acceptcharset
aValue
)
;
}
void
SetAcceptCharset
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
acceptcharset
aValue
aRv
)
;
}
void
GetAction
(
nsString
&
aValue
)
;
void
SetAction
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
action
aValue
aRv
)
;
}
void
GetAutocomplete
(
nsAString
&
aValue
)
;
void
SetAutocomplete
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
autocomplete
aValue
aRv
)
;
}
void
GetEnctype
(
nsAString
&
aValue
)
;
void
SetEnctype
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
enctype
aValue
aRv
)
;
}
void
GetEncoding
(
nsAString
&
aValue
)
{
GetEnctype
(
aValue
)
;
}
void
SetEncoding
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetEnctype
(
aValue
aRv
)
;
}
void
GetMethod
(
nsAString
&
aValue
)
;
void
SetMethod
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
method
aValue
aRv
)
;
}
void
GetName
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
)
;
}
void
SetName
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
aRv
)
;
}
bool
NoValidate
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
novalidate
)
;
}
void
SetNoValidate
(
bool
aValue
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
novalidate
aValue
aRv
)
;
}
void
GetTarget
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
target
aValue
)
;
}
void
SetTarget
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
target
aValue
aRv
)
;
}
nsIHTMLCollection
*
Elements
(
)
;
int32_t
Length
(
)
;
void
Submit
(
ErrorResult
&
aRv
)
;
void
Reset
(
)
;
bool
CheckValidity
(
)
{
return
CheckFormValidity
(
nullptr
)
;
}
bool
ReportValidity
(
)
{
return
CheckValidFormSubmission
(
)
;
}
Element
*
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
)
;
already_AddRefed
<
nsISupports
>
NamedGetter
(
const
nsAString
&
aName
bool
&
aFound
)
;
void
GetSupportedNames
(
nsTArray
<
nsString
>
&
aRetval
)
;
static
int32_t
CompareFormControlPosition
(
Element
*
aElement1
Element
*
aElement2
const
nsIContent
*
aForm
)
;
#
ifdef
DEBUG
static
void
AssertDocumentOrder
(
const
nsTArray
<
nsGenericHTMLFormElement
*
>
&
aControls
nsIContent
*
aForm
)
;
static
void
AssertDocumentOrder
(
const
nsTArray
<
RefPtr
<
nsGenericHTMLFormElement
>
>
&
aControls
nsIContent
*
aForm
)
;
#
endif
js
:
:
ExpandoAndGeneration
mExpandoAndGeneration
;
protected
:
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
PostPasswordEvent
(
)
;
RefPtr
<
AsyncEventDispatcher
>
mFormPasswordEventDispatcher
;
class
RemoveElementRunnable
;
friend
class
RemoveElementRunnable
;
class
RemoveElementRunnable
:
public
Runnable
{
public
:
explicit
RemoveElementRunnable
(
HTMLFormElement
*
aForm
)
:
Runnable
(
"
dom
:
:
HTMLFormElement
:
:
RemoveElementRunnable
"
)
mForm
(
aForm
)
{
}
NS_IMETHOD
Run
(
)
override
{
mForm
-
>
HandleDefaultSubmitRemoval
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
HTMLFormElement
>
mForm
;
}
;
nsresult
DoSubmitOrReset
(
WidgetEvent
*
aEvent
EventMessage
aMessage
)
;
nsresult
DoReset
(
)
;
void
HandleDefaultSubmitRemoval
(
)
;
nsresult
DoSubmit
(
WidgetEvent
*
aEvent
)
;
nsresult
BuildSubmission
(
HTMLFormSubmission
*
*
aFormSubmission
WidgetEvent
*
aEvent
)
;
nsresult
SubmitSubmission
(
HTMLFormSubmission
*
aFormSubmission
)
;
nsresult
NotifySubmitObservers
(
nsIURI
*
aActionURL
bool
*
aCancelSubmit
bool
aEarlyNotify
)
;
nsresult
DoSecureToInsecureSubmitCheck
(
nsIURI
*
aActionURL
bool
*
aCancelSubmit
)
;
already_AddRefed
<
nsISupports
>
DoResolveName
(
const
nsAString
&
aName
bool
aFlushContent
)
;
bool
CheckFormValidity
(
nsTArray
<
RefPtr
<
Element
>
>
*
aInvalidElements
)
const
;
void
Clear
(
)
;
void
AddToPastNamesMap
(
const
nsAString
&
aName
nsISupports
*
aChild
)
;
void
RemoveElementFromPastNamesMap
(
Element
*
aElement
)
;
nsresult
AddElementToTableInternal
(
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
&
aTable
nsIContent
*
aChild
const
nsAString
&
aName
)
;
nsresult
RemoveElementFromTableInternal
(
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
&
aTable
nsIContent
*
aChild
const
nsAString
&
aName
)
;
public
:
void
FlushPendingSubmission
(
)
;
nsresult
GetActionURL
(
nsIURI
*
*
aActionURL
Element
*
aOriginatingElement
)
;
protected
:
RefPtr
<
HTMLFormControlsCollection
>
mControls
;
nsRefPtrHashtable
<
nsStringHashKey
HTMLInputElement
>
mSelectedRadioButtons
;
nsDataHashtable
<
nsStringCaseInsensitiveHashKey
uint32_t
>
mRequiredRadioButtonCounts
;
nsDataHashtable
<
nsStringCaseInsensitiveHashKey
bool
>
mValueMissingRadioGroups
;
nsAutoPtr
<
HTMLFormSubmission
>
mPendingSubmission
;
nsCOMPtr
<
nsIRequest
>
mSubmittingRequest
;
nsWeakPtr
mWebProgress
;
nsGenericHTMLFormElement
*
mDefaultSubmitElement
;
nsGenericHTMLFormElement
*
mFirstSubmitInElements
;
nsGenericHTMLFormElement
*
mFirstSubmitNotInElements
;
nsTArray
<
HTMLImageElement
*
>
mImageElements
;
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
mImageNameLookupTable
;
nsInterfaceHashtable
<
nsStringHashKey
nsISupports
>
mPastNameLookupTable
;
PopupBlocker
:
:
PopupControlState
mSubmitPopupState
;
int32_t
mInvalidElementsCount
;
bool
mGeneratingSubmit
;
bool
mGeneratingReset
;
bool
mIsSubmitting
;
bool
mDeferSubmission
;
bool
mNotifiedObservers
;
bool
mNotifiedObserversResult
;
bool
mEverTriedInvalidSubmit
;
private
:
~
HTMLFormElement
(
)
;
}
;
}
}
#
endif
