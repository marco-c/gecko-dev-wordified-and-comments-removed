#
include
"
mozilla
/
dom
/
HTMLOutputElement
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLOutputElementBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMTokenList
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER
(
Output
)
namespace
mozilla
:
:
dom
{
HTMLOutputElement
:
:
HTMLOutputElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
)
:
nsGenericHTMLFormControlElement
(
std
:
:
move
(
aNodeInfo
)
FormControlType
:
:
Output
)
mValueModeFlag
(
eModeDefault
)
mIsDoneAddingChildren
(
!
aFromParser
)
{
AddMutationObserver
(
this
)
;
SetBarredFromConstraintValidation
(
true
)
;
}
HTMLOutputElement
:
:
~
HTMLOutputElement
(
)
=
default
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
HTMLOutputElement
nsGenericHTMLFormControlElement
mValidity
mTokenList
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
HTMLOutputElement
nsGenericHTMLFormControlElement
nsIMutationObserver
nsIConstraintValidation
)
NS_IMPL_ELEMENT_CLONE
(
HTMLOutputElement
)
void
HTMLOutputElement
:
:
SetCustomValidity
(
const
nsAString
&
aError
)
{
ConstraintValidation
:
:
SetCustomValidity
(
aError
)
;
UpdateState
(
true
)
;
}
NS_IMETHODIMP
HTMLOutputElement
:
:
Reset
(
)
{
mValueModeFlag
=
eModeDefault
;
const
nsAutoString
currentDefaultValue
(
mDefaultValue
)
;
return
nsContentUtils
:
:
SetNodeTextContent
(
this
currentDefaultValue
true
)
;
}
bool
HTMLOutputElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
_for
)
{
aResult
.
ParseAtomArray
(
aValue
)
;
return
true
;
}
}
return
nsGenericHTMLFormControlElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLOutputElement
:
:
DoneAddingChildren
(
bool
aHaveNotified
)
{
mIsDoneAddingChildren
=
true
;
DescendantsChanged
(
)
;
}
nsresult
HTMLOutputElement
:
:
BindToTree
(
BindContext
&
aContext
nsINode
&
aParent
)
{
nsresult
rv
=
nsGenericHTMLFormControlElement
:
:
BindToTree
(
aContext
aParent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
UpdateState
(
false
)
;
return
rv
;
}
void
HTMLOutputElement
:
:
GetValue
(
nsAString
&
aValue
)
{
nsContentUtils
:
:
GetNodeTextContent
(
this
true
aValue
)
;
}
void
HTMLOutputElement
:
:
SetValue
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
mValueModeFlag
=
eModeValue
;
aRv
=
nsContentUtils
:
:
SetNodeTextContent
(
this
aValue
true
)
;
}
void
HTMLOutputElement
:
:
SetDefaultValue
(
const
nsAString
&
aDefaultValue
ErrorResult
&
aRv
)
{
mDefaultValue
=
aDefaultValue
;
if
(
mValueModeFlag
=
=
eModeDefault
)
{
aRv
=
nsContentUtils
:
:
SetNodeTextContent
(
this
aDefaultValue
true
)
;
}
}
nsDOMTokenList
*
HTMLOutputElement
:
:
HtmlFor
(
)
{
if
(
!
mTokenList
)
{
mTokenList
=
new
nsDOMTokenList
(
this
nsGkAtoms
:
:
_for
)
;
}
return
mTokenList
;
}
void
HTMLOutputElement
:
:
DescendantsChanged
(
)
{
if
(
mIsDoneAddingChildren
&
&
mValueModeFlag
=
=
eModeDefault
)
{
nsContentUtils
:
:
GetNodeTextContent
(
this
true
mDefaultValue
)
;
}
}
void
HTMLOutputElement
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
DescendantsChanged
(
)
;
}
JSObject
*
HTMLOutputElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLOutputElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
