#
include
"
mozilla
/
dom
/
HTMLOutputElement
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormSubmission
.
h
"
#
include
"
mozilla
/
dom
/
HTMLOutputElementBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDOMTokenList
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER
(
Output
)
namespace
mozilla
{
namespace
dom
{
HTMLOutputElement
:
:
HTMLOutputElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
FromParser
aFromParser
)
:
nsGenericHTMLFormElement
(
aNodeInfo
NS_FORM_OUTPUT
)
mValueModeFlag
(
eModeDefault
)
mIsDoneAddingChildren
(
!
aFromParser
)
{
AddMutationObserver
(
this
)
;
AddStatesSilently
(
NS_EVENT_STATE_VALID
|
NS_EVENT_STATE_MOZ_UI_VALID
)
;
}
HTMLOutputElement
:
:
~
HTMLOutputElement
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
HTMLOutputElement
nsGenericHTMLFormElement
mValidity
mTokenList
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
HTMLOutputElement
nsGenericHTMLFormElement
nsIMutationObserver
nsIConstraintValidation
)
NS_IMPL_ELEMENT_CLONE
(
HTMLOutputElement
)
void
HTMLOutputElement
:
:
SetCustomValidity
(
const
nsAString
&
aError
)
{
nsIConstraintValidation
:
:
SetCustomValidity
(
aError
)
;
UpdateState
(
true
)
;
}
NS_IMETHODIMP
HTMLOutputElement
:
:
Reset
(
)
{
mValueModeFlag
=
eModeDefault
;
return
nsContentUtils
:
:
SetNodeTextContent
(
this
mDefaultValue
true
)
;
}
NS_IMETHODIMP
HTMLOutputElement
:
:
SubmitNamesValues
(
HTMLFormSubmission
*
aFormSubmission
)
{
return
NS_OK
;
}
bool
HTMLOutputElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
_for
)
{
aResult
.
ParseAtomArray
(
aValue
)
;
return
true
;
}
}
return
nsGenericHTMLFormElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLOutputElement
:
:
DoneAddingChildren
(
bool
aHaveNotified
)
{
mIsDoneAddingChildren
=
true
;
}
EventStates
HTMLOutputElement
:
:
IntrinsicState
(
)
const
{
EventStates
states
=
nsGenericHTMLFormElement
:
:
IntrinsicState
(
)
;
if
(
IsValid
(
)
)
{
states
|
=
NS_EVENT_STATE_VALID
;
if
(
!
mForm
|
|
!
mForm
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
novalidate
)
)
{
states
|
=
NS_EVENT_STATE_MOZ_UI_VALID
;
}
}
else
{
states
|
=
NS_EVENT_STATE_INVALID
;
if
(
!
mForm
|
|
!
mForm
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
novalidate
)
)
{
states
|
=
NS_EVENT_STATE_MOZ_UI_INVALID
;
}
}
return
states
;
}
nsresult
HTMLOutputElement
:
:
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
{
nsresult
rv
=
nsGenericHTMLFormElement
:
:
BindToTree
(
aDocument
aParent
aBindingParent
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
UpdateState
(
false
)
;
return
rv
;
}
void
HTMLOutputElement
:
:
GetValue
(
nsAString
&
aValue
)
{
nsContentUtils
:
:
GetNodeTextContent
(
this
true
aValue
)
;
}
void
HTMLOutputElement
:
:
SetValue
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
mValueModeFlag
=
eModeValue
;
aRv
=
nsContentUtils
:
:
SetNodeTextContent
(
this
aValue
true
)
;
}
void
HTMLOutputElement
:
:
SetDefaultValue
(
const
nsAString
&
aDefaultValue
ErrorResult
&
aRv
)
{
mDefaultValue
=
aDefaultValue
;
if
(
mValueModeFlag
=
=
eModeDefault
)
{
aRv
=
nsContentUtils
:
:
SetNodeTextContent
(
this
aDefaultValue
true
)
;
}
}
nsDOMTokenList
*
HTMLOutputElement
:
:
HtmlFor
(
)
{
if
(
!
mTokenList
)
{
mTokenList
=
new
nsDOMTokenList
(
this
nsGkAtoms
:
:
_for
)
;
}
return
mTokenList
;
}
void
HTMLOutputElement
:
:
DescendantsChanged
(
)
{
if
(
mIsDoneAddingChildren
&
&
mValueModeFlag
=
=
eModeDefault
)
{
nsContentUtils
:
:
GetNodeTextContent
(
this
true
mDefaultValue
)
;
}
}
void
HTMLOutputElement
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
DescendantsChanged
(
)
;
}
void
HTMLOutputElement
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
DescendantsChanged
(
)
;
}
JSObject
*
HTMLOutputElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLOutputElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
