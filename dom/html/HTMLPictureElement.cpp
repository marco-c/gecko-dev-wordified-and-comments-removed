#
include
"
mozilla
/
dom
/
HTMLPictureElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLPictureElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
HTMLImageElement
.
h
"
nsGenericHTMLElement
*
NS_NewHTMLPictureElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
mozilla
:
:
dom
:
:
FromParser
aFromParser
)
{
return
new
mozilla
:
:
dom
:
:
HTMLPictureElement
(
aNodeInfo
)
;
}
namespace
mozilla
{
namespace
dom
{
HTMLPictureElement
:
:
HTMLPictureElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
:
nsGenericHTMLElement
(
aNodeInfo
)
{
}
HTMLPictureElement
:
:
~
HTMLPictureElement
(
)
{
}
NS_IMPL_ISUPPORTS_INHERITED
(
HTMLPictureElement
nsGenericHTMLElement
nsIDOMHTMLPictureElement
)
NS_IMPL_ELEMENT_CLONE
(
HTMLPictureElement
)
void
HTMLPictureElement
:
:
RemoveChildAt
(
uint32_t
aIndex
bool
aNotify
)
{
nsCOMPtr
<
nsIContent
>
child
=
GetChildAt
(
aIndex
)
;
if
(
child
&
&
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
img
)
)
{
HTMLImageElement
*
img
=
HTMLImageElement
:
:
FromContent
(
child
)
;
if
(
img
)
{
img
-
>
PictureSourceRemoved
(
child
-
>
AsContent
(
)
)
;
}
}
else
if
(
child
&
&
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
source
)
)
{
nsCOMPtr
<
nsIContent
>
nextSibling
=
child
-
>
GetNextSibling
(
)
;
if
(
nextSibling
&
&
nextSibling
-
>
GetParentNode
(
)
=
=
this
)
{
do
{
HTMLImageElement
*
img
=
HTMLImageElement
:
:
FromContent
(
nextSibling
)
;
if
(
img
)
{
img
-
>
PictureSourceRemoved
(
child
-
>
AsContent
(
)
)
;
}
}
while
(
(
nextSibling
=
nextSibling
-
>
GetNextSibling
(
)
)
)
;
}
}
nsGenericHTMLElement
:
:
RemoveChildAt
(
aIndex
aNotify
)
;
}
nsresult
HTMLPictureElement
:
:
InsertChildAt
(
nsIContent
*
aKid
uint32_t
aIndex
bool
aNotify
)
{
nsresult
rv
=
nsGenericHTMLElement
:
:
InsertChildAt
(
aKid
aIndex
aNotify
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
aKid
rv
)
;
if
(
aKid
-
>
IsHTMLElement
(
nsGkAtoms
:
:
img
)
)
{
HTMLImageElement
*
img
=
HTMLImageElement
:
:
FromContent
(
aKid
)
;
if
(
img
)
{
img
-
>
PictureSourceAdded
(
aKid
-
>
AsContent
(
)
)
;
}
}
else
if
(
aKid
-
>
IsHTMLElement
(
nsGkAtoms
:
:
source
)
)
{
nsCOMPtr
<
nsIContent
>
nextSibling
=
aKid
-
>
GetNextSibling
(
)
;
if
(
nextSibling
&
&
nextSibling
-
>
GetParentNode
(
)
=
=
this
)
{
do
{
HTMLImageElement
*
img
=
HTMLImageElement
:
:
FromContent
(
nextSibling
)
;
if
(
img
)
{
img
-
>
PictureSourceAdded
(
aKid
-
>
AsContent
(
)
)
;
}
}
while
(
(
nextSibling
=
nextSibling
-
>
GetNextSibling
(
)
)
)
;
}
}
return
rv
;
}
JSObject
*
HTMLPictureElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLPictureElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
