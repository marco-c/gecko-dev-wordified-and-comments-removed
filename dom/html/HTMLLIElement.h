#
ifndef
mozilla_dom_HTMLLIElement_h
#
define
mozilla_dom_HTMLLIElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLLIElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLLIElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLLIElement
nsGenericHTMLElement
)
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
GetType
(
DOMString
&
aType
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
type
aType
)
;
}
void
SetType
(
const
nsAString
&
aType
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aType
rv
)
;
}
int32_t
Value
(
)
const
{
return
GetIntAttr
(
nsGkAtoms
:
:
value
0
)
;
}
void
SetValue
(
int32_t
aValue
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLIntAttr
(
nsGkAtoms
:
:
value
aValue
rv
)
;
}
static
const
nsAttrValue
:
:
EnumTableEntry
kULTypeTable
[
4
]
;
static
const
nsAttrValue
:
:
EnumTableEntry
kOLTypeTable
[
5
]
;
protected
:
virtual
~
HTMLLIElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
static
void
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
)
;
}
;
}
#
endif
