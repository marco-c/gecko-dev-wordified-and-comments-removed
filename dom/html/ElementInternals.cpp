#
include
"
mozilla
/
dom
/
ElementInternals
.
h
"
#
include
"
mozilla
/
dom
/
ElementInternalsBinding
.
h
"
#
include
"
mozilla
/
dom
/
HTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFieldSetElement
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
ElementInternals
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ElementInternals
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ElementInternals
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ElementInternals
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsIFormControl
)
NS_INTERFACE_MAP_END
ElementInternals
:
:
ElementInternals
(
HTMLElement
*
aTarget
)
:
nsIFormControl
(
FormControlType
:
:
FormAssociatedCustomElement
)
mTarget
(
aTarget
)
mForm
(
nullptr
)
mFieldSet
(
nullptr
)
{
}
nsISupports
*
ElementInternals
:
:
GetParentObject
(
)
{
return
ToSupports
(
mTarget
)
;
}
JSObject
*
ElementInternals
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
ElementInternals_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
ShadowRoot
*
ElementInternals
:
:
GetShadowRoot
(
)
const
{
MOZ_ASSERT
(
mTarget
)
;
ShadowRoot
*
shadowRoot
=
mTarget
-
>
GetShadowRoot
(
)
;
if
(
shadowRoot
&
&
!
shadowRoot
-
>
IsAvailableToElementInternals
(
)
)
{
return
nullptr
;
}
return
shadowRoot
;
}
void
ElementInternals
:
:
SetForm
(
HTMLFormElement
*
aForm
)
{
mForm
=
aForm
;
}
void
ElementInternals
:
:
ClearForm
(
bool
aRemoveFromForm
bool
aUnbindOrDelete
)
{
if
(
mTarget
)
{
mTarget
-
>
ClearForm
(
aRemoveFromForm
aUnbindOrDelete
)
;
}
}
NS_IMETHODIMP
ElementInternals
:
:
SubmitNamesValues
(
FormData
*
aFormData
)
{
return
NS_OK
;
}
void
ElementInternals
:
:
UpdateFormOwner
(
)
{
if
(
mTarget
)
{
mTarget
-
>
UpdateFormOwner
(
)
;
}
}
void
ElementInternals
:
:
Unlink
(
)
{
if
(
mForm
)
{
ClearForm
(
true
true
)
;
}
if
(
mFieldSet
)
{
mFieldSet
-
>
RemoveElement
(
mTarget
)
;
}
mTarget
=
nullptr
;
}
}
