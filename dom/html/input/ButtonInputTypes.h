#
ifndef
mozilla_dom_ButtonInputTypes_h__
#
define
mozilla_dom_ButtonInputTypes_h__
#
include
"
mozilla
/
dom
/
InputType
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ButtonInputTypeBase
:
public
InputType
{
public
:
~
ButtonInputTypeBase
(
)
override
=
default
;
protected
:
explicit
ButtonInputTypeBase
(
HTMLInputElement
*
aInputElement
)
:
InputType
(
aInputElement
)
{
}
}
;
class
ButtonInputType
:
public
ButtonInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
ButtonInputType
(
aInputElement
)
;
}
private
:
explicit
ButtonInputType
(
HTMLInputElement
*
aInputElement
)
:
ButtonInputTypeBase
(
aInputElement
)
{
}
}
;
class
ImageInputType
:
public
ButtonInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
ImageInputType
(
aInputElement
)
;
}
private
:
explicit
ImageInputType
(
HTMLInputElement
*
aInputElement
)
:
ButtonInputTypeBase
(
aInputElement
)
{
}
}
;
class
ResetInputType
:
public
ButtonInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
ResetInputType
(
aInputElement
)
;
}
private
:
explicit
ResetInputType
(
HTMLInputElement
*
aInputElement
)
:
ButtonInputTypeBase
(
aInputElement
)
{
}
}
;
class
SubmitInputType
:
public
ButtonInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
SubmitInputType
(
aInputElement
)
;
}
private
:
explicit
SubmitInputType
(
HTMLInputElement
*
aInputElement
)
:
ButtonInputTypeBase
(
aInputElement
)
{
}
}
;
}
}
#
endif
