#
ifndef
mozilla_dom_NumericInputTypes_h__
#
define
mozilla_dom_NumericInputTypes_h__
#
include
"
mozilla
/
dom
/
InputType
.
h
"
namespace
mozilla
:
:
dom
{
class
NumericInputTypeBase
:
public
InputType
{
public
:
~
NumericInputTypeBase
(
)
override
=
default
;
bool
IsRangeOverflow
(
)
const
override
;
bool
IsRangeUnderflow
(
)
const
override
;
bool
HasStepMismatch
(
bool
aUseZeroIfValueNaN
)
const
override
;
nsresult
GetRangeOverflowMessage
(
nsAString
&
aMessage
)
override
;
nsresult
GetRangeUnderflowMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
protected
:
explicit
NumericInputTypeBase
(
HTMLInputElement
*
aInputElement
)
:
InputType
(
aInputElement
)
{
}
}
;
class
NumberInputType
final
:
public
NumericInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
NumberInputType
(
aInputElement
)
;
}
bool
IsValueMissing
(
)
const
override
;
bool
HasBadInput
(
)
const
override
;
nsresult
GetValueMissingMessage
(
nsAString
&
aMessage
)
override
;
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
protected
:
bool
IsMutable
(
)
const
override
;
private
:
explicit
NumberInputType
(
HTMLInputElement
*
aInputElement
)
:
NumericInputTypeBase
(
aInputElement
)
{
}
}
;
class
RangeInputType
:
public
NumericInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
RangeInputType
(
aInputElement
)
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
MinMaxStepAttrChanged
(
)
override
;
private
:
explicit
RangeInputType
(
HTMLInputElement
*
aInputElement
)
:
NumericInputTypeBase
(
aInputElement
)
{
}
}
;
}
#
endif
