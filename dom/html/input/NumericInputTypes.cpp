#
include
"
mozilla
/
dom
/
NumericInputTypes
.
h
"
#
include
"
mozilla
/
TextControlState
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
ICUUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
bool
NumericInputTypeBase
:
:
IsRangeOverflow
(
)
const
{
Decimal
maximum
=
mInputElement
-
>
GetMaximum
(
)
;
if
(
maximum
.
isNaN
(
)
)
{
return
false
;
}
Decimal
value
=
mInputElement
-
>
GetValueAsDecimal
(
)
;
if
(
value
.
isNaN
(
)
)
{
return
false
;
}
return
value
>
maximum
;
}
bool
NumericInputTypeBase
:
:
IsRangeUnderflow
(
)
const
{
Decimal
minimum
=
mInputElement
-
>
GetMinimum
(
)
;
if
(
minimum
.
isNaN
(
)
)
{
return
false
;
}
Decimal
value
=
mInputElement
-
>
GetValueAsDecimal
(
)
;
if
(
value
.
isNaN
(
)
)
{
return
false
;
}
return
value
<
minimum
;
}
bool
NumericInputTypeBase
:
:
HasStepMismatch
(
bool
aUseZeroIfValueNaN
)
const
{
Decimal
value
=
mInputElement
-
>
GetValueAsDecimal
(
)
;
if
(
value
.
isNaN
(
)
)
{
if
(
aUseZeroIfValueNaN
)
{
value
=
Decimal
(
0
)
;
}
else
{
return
false
;
}
}
Decimal
step
=
mInputElement
-
>
GetStep
(
)
;
if
(
step
=
=
kStepAny
)
{
return
false
;
}
return
NS_floorModulo
(
value
-
GetStepBase
(
)
step
)
!
=
Decimal
(
0
)
;
}
nsresult
NumericInputTypeBase
:
:
GetRangeOverflowMessage
(
nsAString
&
aMessage
)
{
Decimal
maximum
=
mInputElement
-
>
GetMaximum
(
)
;
MOZ_ASSERT
(
!
maximum
.
isNaN
(
)
)
;
nsAutoString
maxStr
;
char
buf
[
32
]
;
DebugOnly
<
bool
>
ok
=
maximum
.
toString
(
buf
ArrayLength
(
buf
)
)
;
maxStr
.
AssignASCII
(
buf
)
;
MOZ_ASSERT
(
ok
"
buf
not
big
enough
"
)
;
return
nsContentUtils
:
:
FormatMaybeLocalizedString
(
aMessage
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationNumberRangeOverflow
"
mInputElement
-
>
OwnerDoc
(
)
maxStr
)
;
}
nsresult
NumericInputTypeBase
:
:
GetRangeUnderflowMessage
(
nsAString
&
aMessage
)
{
Decimal
minimum
=
mInputElement
-
>
GetMinimum
(
)
;
MOZ_ASSERT
(
!
minimum
.
isNaN
(
)
)
;
nsAutoString
minStr
;
char
buf
[
32
]
;
DebugOnly
<
bool
>
ok
=
minimum
.
toString
(
buf
ArrayLength
(
buf
)
)
;
minStr
.
AssignASCII
(
buf
)
;
MOZ_ASSERT
(
ok
"
buf
not
big
enough
"
)
;
return
nsContentUtils
:
:
FormatMaybeLocalizedString
(
aMessage
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationNumberRangeUnderflow
"
mInputElement
-
>
OwnerDoc
(
)
minStr
)
;
}
bool
NumericInputTypeBase
:
:
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
{
ICUUtils
:
:
LanguageTagIterForContent
langTagIter
(
mInputElement
)
;
aResultValue
=
Decimal
:
:
fromDouble
(
ICUUtils
:
:
ParseNumber
(
aValue
langTagIter
)
)
;
if
(
!
aResultValue
.
isFinite
(
)
)
{
aResultValue
=
HTMLInputElement
:
:
StringToDecimal
(
aValue
)
;
}
return
aResultValue
.
isFinite
(
)
;
}
bool
NumericInputTypeBase
:
:
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
{
MOZ_ASSERT
(
aValue
.
isFinite
(
)
"
aValue
must
be
a
valid
non
-
Infinite
number
.
"
)
;
aResultString
.
Truncate
(
)
;
char
buf
[
32
]
;
bool
ok
=
aValue
.
toString
(
buf
ArrayLength
(
buf
)
)
;
aResultString
.
AssignASCII
(
buf
)
;
MOZ_ASSERT
(
ok
"
buf
not
big
enough
"
)
;
return
ok
;
}
bool
NumberInputType
:
:
IsValueMissing
(
)
const
{
if
(
!
mInputElement
-
>
IsRequired
(
)
)
{
return
false
;
}
if
(
!
IsMutable
(
)
)
{
return
false
;
}
return
IsValueEmpty
(
)
;
}
bool
NumberInputType
:
:
HasBadInput
(
)
const
{
nsAutoString
value
;
GetNonFileValueInternal
(
value
)
;
return
!
value
.
IsEmpty
(
)
&
&
mInputElement
-
>
GetValueAsDecimal
(
)
.
isNaN
(
)
;
}
bool
NumberInputType
:
:
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
{
MOZ_ASSERT
(
aValue
.
isFinite
(
)
"
aValue
must
be
a
valid
non
-
Infinite
number
.
"
)
;
aResultString
.
Truncate
(
)
;
ICUUtils
:
:
LanguageTagIterForContent
langTagIter
(
mInputElement
)
;
ICUUtils
:
:
LocalizeNumber
(
aValue
.
toDouble
(
)
langTagIter
aResultString
)
;
return
true
;
}
nsresult
NumberInputType
:
:
GetValueMissingMessage
(
nsAString
&
aMessage
)
{
return
nsContentUtils
:
:
GetMaybeLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationBadInputNumber
"
mInputElement
-
>
OwnerDoc
(
)
aMessage
)
;
}
nsresult
NumberInputType
:
:
GetBadInputMessage
(
nsAString
&
aMessage
)
{
return
nsContentUtils
:
:
GetMaybeLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationBadInputNumber
"
mInputElement
-
>
OwnerDoc
(
)
aMessage
)
;
}
bool
NumberInputType
:
:
IsMutable
(
)
const
{
return
!
mInputElement
-
>
IsDisabled
(
)
&
&
!
mInputElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
readonly
)
;
}
nsresult
RangeInputType
:
:
MinMaxStepAttrChanged
(
)
{
nsAutoString
value
;
GetNonFileValueInternal
(
value
)
;
return
SetValueInternal
(
value
TextControlState
:
:
eSetValue_Internal
)
;
}
