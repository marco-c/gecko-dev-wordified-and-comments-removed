#
ifndef
SingleLineTextInputTypes_h__
#
define
SingleLineTextInputTypes_h__
#
include
"
InputType
.
h
"
class
SingleLineTextInputTypeBase
:
public
:
:
InputType
{
public
:
~
SingleLineTextInputTypeBase
(
)
override
{
}
bool
IsTooLong
(
)
const
override
;
bool
IsTooShort
(
)
const
override
;
bool
IsValueMissing
(
)
const
override
;
Maybe
<
bool
>
HasPatternMismatch
(
)
const
override
;
protected
:
explicit
SingleLineTextInputTypeBase
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
InputType
(
aInputElement
)
{
}
bool
IsMutable
(
)
const
override
;
}
;
class
TextInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
TextInputType
(
aInputElement
)
;
}
private
:
explicit
TextInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
}
;
class
SearchInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
SearchInputType
(
aInputElement
)
;
}
private
:
explicit
SearchInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
}
;
class
TelInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
TelInputType
(
aInputElement
)
;
}
private
:
explicit
TelInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
}
;
class
URLInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
URLInputType
(
aInputElement
)
;
}
bool
HasTypeMismatch
(
)
const
override
;
nsresult
GetTypeMismatchMessage
(
nsAString
&
aMessage
)
override
;
private
:
explicit
URLInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
}
;
class
EmailInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
EmailInputType
(
aInputElement
)
;
}
bool
HasTypeMismatch
(
)
const
override
;
bool
HasBadInput
(
)
const
override
;
nsresult
GetTypeMismatchMessage
(
nsAString
&
aMessage
)
override
;
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
private
:
explicit
EmailInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
static
bool
IsValidEmailAddress
(
const
nsAString
&
aValue
)
;
static
bool
IsValidEmailAddressList
(
const
nsAString
&
aValue
)
;
static
bool
PunycodeEncodeEmailAddress
(
const
nsAString
&
aEmail
nsAutoCString
&
aEncodedEmail
uint32_t
*
aIndexOfAt
)
;
}
;
class
PasswordInputType
:
public
SingleLineTextInputTypeBase
{
public
:
static
InputType
*
Create
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
PasswordInputType
(
aInputElement
)
;
}
private
:
explicit
PasswordInputType
(
mozilla
:
:
dom
:
:
HTMLInputElement
*
aInputElement
)
:
SingleLineTextInputTypeBase
(
aInputElement
)
{
}
}
;
#
endif
