#
include
"
SingleLineTextInputTypes
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
bool
SingleLineTextInputTypeBase
:
:
IsMutable
(
)
const
{
return
!
mInputElement
-
>
IsDisabled
(
)
&
&
!
mInputElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
readonly
)
;
}
bool
SingleLineTextInputTypeBase
:
:
IsTooLong
(
)
const
{
int32_t
maxLength
=
mInputElement
-
>
MaxLength
(
)
;
if
(
maxLength
=
=
-
1
)
{
return
false
;
}
int32_t
textLength
=
mInputElement
-
>
InputTextLength
(
mozilla
:
:
dom
:
:
CallerType
:
:
System
)
;
return
textLength
>
maxLength
;
}
bool
SingleLineTextInputTypeBase
:
:
IsTooShort
(
)
const
{
int32_t
minLength
=
mInputElement
-
>
MinLength
(
)
;
if
(
minLength
=
=
-
1
)
{
return
false
;
}
int32_t
textLength
=
mInputElement
-
>
InputTextLength
(
mozilla
:
:
dom
:
:
CallerType
:
:
System
)
;
return
textLength
&
&
textLength
<
minLength
;
}
bool
SingleLineTextInputTypeBase
:
:
IsValueMissing
(
)
const
{
if
(
!
mInputElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
required
)
)
{
return
false
;
}
if
(
!
IsMutable
(
)
)
{
return
false
;
}
return
IsValueEmpty
(
)
;
}
