#
include
"
mozilla
/
dom
/
SingleLineTextInputTypes
.
h
"
#
include
"
HTMLSplitOnSpacesTokenizer
.
h
"
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsNetUtil
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
bool
SingleLineTextInputTypeBase
:
:
IsMutable
(
)
const
{
return
!
mInputElement
-
>
IsDisabledOrReadOnly
(
)
;
}
bool
SingleLineTextInputTypeBase
:
:
IsTooLong
(
)
const
{
int32_t
maxLength
=
mInputElement
-
>
MaxLength
(
)
;
if
(
maxLength
=
=
-
1
)
{
return
false
;
}
int32_t
textLength
=
mInputElement
-
>
InputTextLength
(
CallerType
:
:
System
)
;
return
textLength
>
maxLength
;
}
bool
SingleLineTextInputTypeBase
:
:
IsTooShort
(
)
const
{
int32_t
minLength
=
mInputElement
-
>
MinLength
(
)
;
if
(
minLength
=
=
-
1
)
{
return
false
;
}
int32_t
textLength
=
mInputElement
-
>
InputTextLength
(
CallerType
:
:
System
)
;
return
textLength
&
&
textLength
<
minLength
;
}
bool
SingleLineTextInputTypeBase
:
:
IsValueMissing
(
)
const
{
if
(
!
mInputElement
-
>
IsRequired
(
)
)
{
return
false
;
}
if
(
!
IsMutable
(
)
)
{
return
false
;
}
return
IsValueEmpty
(
)
;
}
Maybe
<
bool
>
SingleLineTextInputTypeBase
:
:
HasPatternMismatch
(
)
const
{
if
(
!
mInputElement
-
>
HasPatternAttribute
(
)
)
{
return
Some
(
false
)
;
}
nsAutoString
pattern
;
if
(
!
mInputElement
-
>
GetAttr
(
nsGkAtoms
:
:
pattern
pattern
)
)
{
return
Some
(
false
)
;
}
nsAutoString
value
;
GetNonFileValueInternal
(
value
)
;
if
(
value
.
IsEmpty
(
)
)
{
return
Some
(
false
)
;
}
Document
*
doc
=
mInputElement
-
>
OwnerDoc
(
)
;
Maybe
<
bool
>
result
=
nsContentUtils
:
:
IsPatternMatching
(
value
std
:
:
move
(
pattern
)
doc
mInputElement
-
>
HasAttr
(
nsGkAtoms
:
:
multiple
)
)
;
return
result
?
Some
(
!
*
result
)
:
Nothing
(
)
;
}
bool
URLInputType
:
:
HasTypeMismatch
(
)
const
{
nsAutoString
value
;
GetNonFileValueInternal
(
value
)
;
if
(
value
.
IsEmpty
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIIOService
>
ioService
=
do_GetIOService
(
)
;
nsCOMPtr
<
nsIURI
>
uri
;
return
!
NS_SUCCEEDED
(
ioService
-
>
NewURI
(
NS_ConvertUTF16toUTF8
(
value
)
nullptr
nullptr
getter_AddRefs
(
uri
)
)
)
;
}
nsresult
URLInputType
:
:
GetTypeMismatchMessage
(
nsAString
&
aMessage
)
{
return
nsContentUtils
:
:
GetMaybeLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationInvalidURL
"
mInputElement
-
>
OwnerDoc
(
)
aMessage
)
;
}
bool
EmailInputType
:
:
HasTypeMismatch
(
)
const
{
nsAutoString
value
;
GetNonFileValueInternal
(
value
)
;
if
(
value
.
IsEmpty
(
)
)
{
return
false
;
}
return
mInputElement
-
>
HasAttr
(
nsGkAtoms
:
:
multiple
)
?
!
IsValidEmailAddressList
(
value
)
:
!
IsValidEmailAddress
(
value
)
;
}
bool
EmailInputType
:
:
HasBadInput
(
)
const
{
nsAutoString
value
;
nsAutoCString
unused
;
uint32_t
unused2
;
GetNonFileValueInternal
(
value
)
;
HTMLSplitOnSpacesTokenizer
tokenizer
(
value
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
!
PunycodeEncodeEmailAddress
(
tokenizer
.
nextToken
(
)
unused
&
unused2
)
)
{
return
true
;
}
}
return
false
;
}
nsresult
EmailInputType
:
:
GetTypeMismatchMessage
(
nsAString
&
aMessage
)
{
return
nsContentUtils
:
:
GetMaybeLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationInvalidEmail
"
mInputElement
-
>
OwnerDoc
(
)
aMessage
)
;
}
nsresult
EmailInputType
:
:
GetBadInputMessage
(
nsAString
&
aMessage
)
{
return
nsContentUtils
:
:
GetMaybeLocalizedString
(
nsContentUtils
:
:
eDOM_PROPERTIES
"
FormValidationInvalidEmail
"
mInputElement
-
>
OwnerDoc
(
)
aMessage
)
;
}
bool
EmailInputType
:
:
IsValidEmailAddressList
(
const
nsAString
&
aValue
)
{
HTMLSplitOnSpacesTokenizer
tokenizer
(
aValue
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
!
IsValidEmailAddress
(
tokenizer
.
nextToken
(
)
)
)
{
return
false
;
}
}
return
!
tokenizer
.
separatorAfterCurrentToken
(
)
;
}
bool
EmailInputType
:
:
IsValidEmailAddress
(
const
nsAString
&
aValue
)
{
if
(
aValue
.
IsEmpty
(
)
|
|
aValue
.
Last
(
)
=
=
'
.
'
|
|
aValue
.
Last
(
)
=
=
'
-
'
)
{
return
false
;
}
uint32_t
atPos
;
nsAutoCString
value
;
if
(
!
PunycodeEncodeEmailAddress
(
aValue
value
&
atPos
)
|
|
atPos
=
=
(
uint32_t
)
kNotFound
|
|
atPos
=
=
0
|
|
atPos
=
=
value
.
Length
(
)
-
1
)
{
return
false
;
}
uint32_t
length
=
value
.
Length
(
)
;
uint32_t
i
=
0
;
for
(
;
i
<
atPos
;
+
+
i
)
{
char16_t
c
=
value
[
i
]
;
if
(
!
(
IsAsciiAlpha
(
c
)
|
|
IsAsciiDigit
(
c
)
|
|
c
=
=
'
.
'
|
|
c
=
=
'
!
'
|
|
c
=
=
'
#
'
|
|
c
=
=
'
'
|
|
c
=
=
'
%
'
|
|
c
=
=
'
&
'
|
|
c
=
=
'
\
'
'
|
|
c
=
=
'
*
'
|
|
c
=
=
'
+
'
|
|
c
=
=
'
-
'
|
|
c
=
=
'
/
'
|
|
c
=
=
'
=
'
|
|
c
=
=
'
?
'
|
|
c
=
=
'
^
'
|
|
c
=
=
'
_
'
|
|
c
=
=
'
'
|
|
c
=
=
'
{
'
|
|
c
=
=
'
|
'
|
|
c
=
=
'
}
'
|
|
c
=
=
'
~
'
)
)
{
return
false
;
}
}
+
+
i
;
if
(
value
[
i
]
=
=
'
.
'
|
|
value
[
i
]
=
=
'
-
'
)
{
return
false
;
}
for
(
;
i
<
length
;
+
+
i
)
{
char16_t
c
=
value
[
i
]
;
if
(
c
=
=
'
.
'
)
{
if
(
value
[
i
-
1
]
=
=
'
.
'
|
|
value
[
i
-
1
]
=
=
'
-
'
)
{
return
false
;
}
}
else
if
(
c
=
=
'
-
'
)
{
if
(
value
[
i
-
1
]
=
=
'
.
'
)
{
return
false
;
}
}
else
if
(
!
(
IsAsciiAlpha
(
c
)
|
|
IsAsciiDigit
(
c
)
|
|
c
=
=
'
-
'
)
)
{
return
false
;
}
}
return
true
;
}
bool
EmailInputType
:
:
PunycodeEncodeEmailAddress
(
const
nsAString
&
aEmail
nsAutoCString
&
aEncodedEmail
uint32_t
*
aIndexOfAt
)
{
nsAutoCString
value
=
NS_ConvertUTF16toUTF8
(
aEmail
)
;
*
aIndexOfAt
=
(
uint32_t
)
value
.
FindChar
(
'
'
)
;
if
(
*
aIndexOfAt
=
=
(
uint32_t
)
kNotFound
|
|
*
aIndexOfAt
=
=
value
.
Length
(
)
-
1
)
{
aEncodedEmail
=
value
;
return
true
;
}
uint32_t
indexOfDomain
=
*
aIndexOfAt
+
1
;
const
nsDependentCSubstring
domain
=
Substring
(
value
indexOfDomain
)
;
nsAutoCString
domainACE
;
NS_DomainToASCII
(
domain
domainACE
)
;
nsCCharSeparatedTokenizer
tokenizer
(
domainACE
'
.
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
tokenizer
.
nextToken
(
)
.
Length
(
)
>
63
)
{
return
false
;
}
}
value
.
Replace
(
indexOfDomain
domain
.
Length
(
)
domainACE
)
;
aEncodedEmail
=
value
;
return
true
;
}
