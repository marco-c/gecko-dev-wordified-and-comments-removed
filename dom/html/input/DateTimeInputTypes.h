#
ifndef
mozilla_dom_DateTimeInputTypes_h__
#
define
mozilla_dom_DateTimeInputTypes_h__
#
include
"
mozilla
/
dom
/
InputType
.
h
"
namespace
mozilla
:
:
dom
{
class
DateTimeInputTypeBase
:
public
InputType
{
public
:
~
DateTimeInputTypeBase
(
)
override
=
default
;
bool
IsValueMissing
(
)
const
override
;
bool
IsRangeOverflow
(
)
const
override
;
bool
IsRangeUnderflow
(
)
const
override
;
bool
HasStepMismatch
(
)
const
override
;
bool
HasBadInput
(
)
const
override
;
nsresult
GetRangeOverflowMessage
(
nsAString
&
aMessage
)
override
;
nsresult
GetRangeUnderflowMessage
(
nsAString
&
aMessage
)
override
;
void
MinMaxStepAttrChanged
(
)
override
;
protected
:
explicit
DateTimeInputTypeBase
(
HTMLInputElement
*
aInputElement
)
:
InputType
(
aInputElement
)
{
}
bool
IsMutable
(
)
const
override
;
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
=
0
;
bool
GetTimeFromMs
(
double
aValue
uint16_t
*
aHours
uint16_t
*
aMinutes
uint16_t
*
aSeconds
uint16_t
*
aMilliseconds
)
const
;
static
const
double
kMinimumYear
;
static
const
double
kMaximumYear
;
static
const
double
kMaximumMonthInMaximumYear
;
static
const
double
kMaximumWeekInMaximumYear
;
static
const
double
kMsPerDay
;
}
;
class
DateInputType
:
public
DateTimeInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
DateInputType
(
aInputElement
)
;
}
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
private
:
explicit
DateInputType
(
HTMLInputElement
*
aInputElement
)
:
DateTimeInputTypeBase
(
aInputElement
)
{
}
}
;
class
TimeInputType
:
public
DateTimeInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
TimeInputType
(
aInputElement
)
;
}
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
bool
IsRangeOverflow
(
)
const
override
;
bool
IsRangeUnderflow
(
)
const
override
;
nsresult
GetRangeOverflowMessage
(
nsAString
&
aMessage
)
override
;
nsresult
GetRangeUnderflowMessage
(
nsAString
&
aMessage
)
override
;
private
:
explicit
TimeInputType
(
HTMLInputElement
*
aInputElement
)
:
DateTimeInputTypeBase
(
aInputElement
)
{
}
bool
HasReversedRange
(
)
const
;
bool
IsReversedRangeUnderflowAndOverflow
(
)
const
;
nsresult
GetReversedRangeUnderflowAndOverflowMessage
(
nsAString
&
aMessage
)
;
}
;
class
WeekInputType
:
public
DateTimeInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
WeekInputType
(
aInputElement
)
;
}
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
private
:
explicit
WeekInputType
(
HTMLInputElement
*
aInputElement
)
:
DateTimeInputTypeBase
(
aInputElement
)
{
}
}
;
class
MonthInputType
:
public
DateTimeInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
MonthInputType
(
aInputElement
)
;
}
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
private
:
explicit
MonthInputType
(
HTMLInputElement
*
aInputElement
)
:
DateTimeInputTypeBase
(
aInputElement
)
{
}
}
;
class
DateTimeLocalInputType
:
public
DateTimeInputTypeBase
{
public
:
static
InputType
*
Create
(
HTMLInputElement
*
aInputElement
void
*
aMemory
)
{
return
new
(
aMemory
)
DateTimeLocalInputType
(
aInputElement
)
;
}
nsresult
GetBadInputMessage
(
nsAString
&
aMessage
)
override
;
bool
ConvertStringToNumber
(
nsAString
&
aValue
Decimal
&
aResultValue
)
const
override
;
bool
ConvertNumberToString
(
Decimal
aValue
nsAString
&
aResultString
)
const
override
;
private
:
explicit
DateTimeLocalInputType
(
HTMLInputElement
*
aInputElement
)
:
DateTimeInputTypeBase
(
aInputElement
)
{
}
}
;
}
#
endif
