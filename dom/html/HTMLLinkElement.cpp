#
include
"
mozilla
/
dom
/
HTMLLinkElement
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
HTMLLinkElementBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsDOMTokenList
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIStyleSheetLinkingElement
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleLinkElement
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsWindowSizes
.
h
"
#
define
LINK_ELEMENT_FLAG_BIT
(
n_
)
\
NODE_FLAG_BIT
(
ELEMENT_TYPE_SPECIFIC_BITS_OFFSET
+
(
n_
)
)
enum
{
HTML_LINK_DNS_PREFETCH_REQUESTED
=
LINK_ELEMENT_FLAG_BIT
(
0
)
HTML_LINK_DNS_PREFETCH_DEFERRED
=
LINK_ELEMENT_FLAG_BIT
(
1
)
}
;
#
undef
LINK_ELEMENT_FLAG_BIT
ASSERT_NODE_FLAGS_SPACE
(
ELEMENT_TYPE_SPECIFIC_BITS_OFFSET
+
2
)
;
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Link
)
namespace
mozilla
{
namespace
dom
{
HTMLLinkElement
:
:
HTMLLinkElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
:
nsGenericHTMLElement
(
aNodeInfo
)
Link
(
this
)
{
}
HTMLLinkElement
:
:
~
HTMLLinkElement
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_CLASS
(
HTMLLinkElement
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
HTMLLinkElement
nsGenericHTMLElement
)
tmp
-
>
nsStyleLinkElement
:
:
Traverse
(
cb
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRelList
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
HTMLLinkElement
nsGenericHTMLElement
)
tmp
-
>
nsStyleLinkElement
:
:
Unlink
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mRelList
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED
(
HTMLLinkElement
nsGenericHTMLElement
nsIStyleSheetLinkingElement
Link
)
NS_IMPL_ELEMENT_CLONE
(
HTMLLinkElement
)
bool
HTMLLinkElement
:
:
Disabled
(
)
{
StyleSheet
*
ss
=
GetSheet
(
)
;
return
ss
&
&
ss
-
>
Disabled
(
)
;
}
void
HTMLLinkElement
:
:
SetDisabled
(
bool
aDisabled
)
{
if
(
StyleSheet
*
ss
=
GetSheet
(
)
)
{
ss
-
>
SetDisabled
(
aDisabled
)
;
}
}
void
HTMLLinkElement
:
:
OnDNSPrefetchRequested
(
)
{
UnsetFlags
(
HTML_LINK_DNS_PREFETCH_DEFERRED
)
;
SetFlags
(
HTML_LINK_DNS_PREFETCH_REQUESTED
)
;
}
void
HTMLLinkElement
:
:
OnDNSPrefetchDeferred
(
)
{
UnsetFlags
(
HTML_LINK_DNS_PREFETCH_REQUESTED
)
;
SetFlags
(
HTML_LINK_DNS_PREFETCH_DEFERRED
)
;
}
bool
HTMLLinkElement
:
:
HasDeferredDNSPrefetchRequest
(
)
{
return
HasFlag
(
HTML_LINK_DNS_PREFETCH_DEFERRED
)
;
}
nsresult
HTMLLinkElement
:
:
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
{
Link
:
:
ResetLinkState
(
false
Link
:
:
ElementHasHref
(
)
)
;
nsresult
rv
=
nsGenericHTMLElement
:
:
BindToTree
(
aDocument
aParent
aBindingParent
aCompileEventHandlers
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aDocument
&
&
!
GetContainingShadow
(
)
)
{
aDocument
-
>
RegisterPendingLinkUpdate
(
this
)
;
}
if
(
IsInComposedDoc
(
)
)
{
TryDNSPrefetchOrPreconnectOrPrefetchOrPreloadOrPrerender
(
)
;
}
void
(
HTMLLinkElement
:
:
*
update
)
(
)
=
&
HTMLLinkElement
:
:
UpdateStyleSheetInternal
;
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
dom
:
:
HTMLLinkElement
:
:
BindToTree
"
this
update
)
)
;
CreateAndDispatchEvent
(
aDocument
NS_LITERAL_STRING
(
"
DOMLinkAdded
"
)
)
;
return
rv
;
}
void
HTMLLinkElement
:
:
LinkAdded
(
)
{
CreateAndDispatchEvent
(
OwnerDoc
(
)
NS_LITERAL_STRING
(
"
DOMLinkAdded
"
)
)
;
}
void
HTMLLinkElement
:
:
LinkRemoved
(
)
{
CreateAndDispatchEvent
(
OwnerDoc
(
)
NS_LITERAL_STRING
(
"
DOMLinkRemoved
"
)
)
;
}
void
HTMLLinkElement
:
:
UnbindFromTree
(
bool
aDeep
bool
aNullParent
)
{
CancelDNSPrefetch
(
HTML_LINK_DNS_PREFETCH_DEFERRED
HTML_LINK_DNS_PREFETCH_REQUESTED
)
;
CancelPrefetchOrPreload
(
)
;
Link
:
:
ResetLinkState
(
false
Link
:
:
ElementHasHref
(
)
)
;
nsCOMPtr
<
nsIDocument
>
oldDoc
=
GetUncomposedDoc
(
)
;
ShadowRoot
*
oldShadowRoot
=
GetBindingParent
(
)
?
GetBindingParent
(
)
-
>
GetShadowRoot
(
)
:
nullptr
;
CreateAndDispatchEvent
(
oldDoc
NS_LITERAL_STRING
(
"
DOMLinkRemoved
"
)
)
;
nsGenericHTMLElement
:
:
UnbindFromTree
(
aDeep
aNullParent
)
;
UpdateStyleSheetInternal
(
oldDoc
oldShadowRoot
)
;
}
bool
HTMLLinkElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
crossorigin
)
{
ParseCORSValue
(
aValue
aResult
)
;
return
true
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
as
)
{
ParseAsValue
(
aValue
aResult
)
;
return
true
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
sizes
)
{
aResult
.
ParseAtomArray
(
aValue
)
;
return
true
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
integrity
)
{
aResult
.
ParseStringOrAtom
(
aValue
)
;
return
true
;
}
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLLinkElement
:
:
CreateAndDispatchEvent
(
nsIDocument
*
aDoc
const
nsAString
&
aEventName
)
{
if
(
!
aDoc
)
return
;
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
&
nsGkAtoms
:
:
_empty
&
nsGkAtoms
:
:
stylesheet
nullptr
}
;
if
(
!
nsContentUtils
:
:
HasNonEmptyAttr
(
this
kNameSpaceID_None
nsGkAtoms
:
:
rev
)
&
&
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
rel
strings
eIgnoreCase
)
!
=
ATTR_VALUE_NO_MATCH
)
return
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
aEventName
true
true
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
nsresult
HTMLLinkElement
:
:
BeforeSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValueOrString
*
aValue
bool
aNotify
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aName
=
=
nsGkAtoms
:
:
href
|
|
aName
=
=
nsGkAtoms
:
:
rel
)
)
{
CancelDNSPrefetch
(
HTML_LINK_DNS_PREFETCH_DEFERRED
HTML_LINK_DNS_PREFETCH_REQUESTED
)
;
CancelPrefetchOrPreload
(
)
;
}
return
nsGenericHTMLElement
:
:
BeforeSetAttr
(
aNameSpaceID
aName
aValue
aNotify
)
;
}
nsresult
HTMLLinkElement
:
:
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
{
if
(
aName
=
=
nsGkAtoms
:
:
href
&
&
kNameSpaceID_None
=
=
aNameSpaceID
)
{
bool
hasHref
=
aValue
;
Link
:
:
ResetLinkState
(
!
!
aNotify
hasHref
)
;
if
(
IsInUncomposedDoc
(
)
)
{
CreateAndDispatchEvent
(
OwnerDoc
(
)
NS_LITERAL_STRING
(
"
DOMLinkChanged
"
)
)
;
}
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aName
=
=
nsGkAtoms
:
:
href
)
{
mTriggeringPrincipal
=
nsContentUtils
:
:
GetAttrTriggeringPrincipal
(
this
aValue
?
aValue
-
>
GetStringValue
(
)
:
EmptyString
(
)
aSubjectPrincipal
)
;
}
if
(
aValue
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aName
=
=
nsGkAtoms
:
:
href
|
|
aName
=
=
nsGkAtoms
:
:
rel
|
|
aName
=
=
nsGkAtoms
:
:
title
|
|
aName
=
=
nsGkAtoms
:
:
media
|
|
aName
=
=
nsGkAtoms
:
:
type
|
|
aName
=
=
nsGkAtoms
:
:
as
|
|
aName
=
=
nsGkAtoms
:
:
crossorigin
)
)
{
bool
dropSheet
=
false
;
if
(
aName
=
=
nsGkAtoms
:
:
rel
)
{
nsAutoString
value
;
aValue
-
>
ToString
(
value
)
;
uint32_t
linkTypes
=
nsStyleLinkElement
:
:
ParseLinkTypes
(
value
)
;
if
(
GetSheet
(
)
)
{
dropSheet
=
!
(
linkTypes
&
nsStyleLinkElement
:
:
eSTYLESHEET
)
;
}
}
if
(
(
aName
=
=
nsGkAtoms
:
:
rel
|
|
aName
=
=
nsGkAtoms
:
:
href
)
&
&
IsInComposedDoc
(
)
)
{
TryDNSPrefetchOrPreconnectOrPrefetchOrPreloadOrPrerender
(
)
;
}
if
(
(
aName
=
=
nsGkAtoms
:
:
as
|
|
aName
=
=
nsGkAtoms
:
:
type
|
|
aName
=
=
nsGkAtoms
:
:
crossorigin
|
|
aName
=
=
nsGkAtoms
:
:
media
)
&
&
IsInComposedDoc
(
)
)
{
UpdatePreload
(
aName
aValue
aOldValue
)
;
}
UpdateStyleSheetInternal
(
nullptr
nullptr
dropSheet
|
|
(
aName
=
=
nsGkAtoms
:
:
title
|
|
aName
=
=
nsGkAtoms
:
:
media
|
|
aName
=
=
nsGkAtoms
:
:
type
)
)
;
}
}
else
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
)
{
if
(
aName
=
=
nsGkAtoms
:
:
href
|
|
aName
=
=
nsGkAtoms
:
:
rel
|
|
aName
=
=
nsGkAtoms
:
:
title
|
|
aName
=
=
nsGkAtoms
:
:
media
|
|
aName
=
=
nsGkAtoms
:
:
type
)
{
UpdateStyleSheetInternal
(
nullptr
nullptr
true
)
;
}
if
(
(
aName
=
=
nsGkAtoms
:
:
as
|
|
aName
=
=
nsGkAtoms
:
:
type
|
|
aName
=
=
nsGkAtoms
:
:
crossorigin
|
|
aName
=
=
nsGkAtoms
:
:
media
)
&
&
IsInComposedDoc
(
)
)
{
UpdatePreload
(
aName
aValue
aOldValue
)
;
}
}
}
return
nsGenericHTMLElement
:
:
AfterSetAttr
(
aNameSpaceID
aName
aValue
aOldValue
aSubjectPrincipal
aNotify
)
;
}
void
HTMLLinkElement
:
:
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
{
GetEventTargetParentForAnchors
(
aVisitor
)
;
}
nsresult
HTMLLinkElement
:
:
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
{
return
PostHandleEventForAnchors
(
aVisitor
)
;
}
bool
HTMLLinkElement
:
:
IsLink
(
nsIURI
*
*
aURI
)
const
{
return
IsHTMLLink
(
aURI
)
;
}
void
HTMLLinkElement
:
:
GetLinkTarget
(
nsAString
&
aTarget
)
{
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
target
aTarget
)
;
if
(
aTarget
.
IsEmpty
(
)
)
{
GetBaseTarget
(
aTarget
)
;
}
}
static
const
DOMTokenListSupportedToken
sSupportedRelValues
[
]
=
{
"
preload
"
"
prefetch
"
"
dns
-
prefetch
"
"
stylesheet
"
"
next
"
"
alternate
"
"
preconnect
"
"
icon
"
"
search
"
nullptr
}
;
nsDOMTokenList
*
HTMLLinkElement
:
:
RelList
(
)
{
if
(
!
mRelList
)
{
if
(
Preferences
:
:
GetBool
(
"
network
.
preload
"
)
)
{
mRelList
=
new
nsDOMTokenList
(
this
nsGkAtoms
:
:
rel
sSupportedRelValues
)
;
}
else
{
mRelList
=
new
nsDOMTokenList
(
this
nsGkAtoms
:
:
rel
&
sSupportedRelValues
[
1
]
)
;
}
}
return
mRelList
;
}
already_AddRefed
<
nsIURI
>
HTMLLinkElement
:
:
GetHrefURI
(
)
const
{
return
GetHrefURIForAnchors
(
)
;
}
already_AddRefed
<
nsIURI
>
HTMLLinkElement
:
:
GetStyleSheetURL
(
bool
*
aIsInline
nsIPrincipal
*
*
aTriggeringPrincipal
)
{
*
aIsInline
=
false
;
*
aTriggeringPrincipal
=
nullptr
;
nsAutoString
href
;
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
href
href
)
;
if
(
href
.
IsEmpty
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPrincipal
>
prin
=
mTriggeringPrincipal
;
prin
.
forget
(
aTriggeringPrincipal
)
;
nsCOMPtr
<
nsIURI
>
uri
=
Link
:
:
GetURI
(
)
;
return
uri
.
forget
(
)
;
}
void
HTMLLinkElement
:
:
GetStyleSheetInfo
(
nsAString
&
aTitle
nsAString
&
aType
nsAString
&
aMedia
bool
*
aIsAlternate
)
{
aTitle
.
Truncate
(
)
;
aType
.
Truncate
(
)
;
aMedia
.
Truncate
(
)
;
*
aIsAlternate
=
false
;
nsAutoString
rel
;
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
rel
rel
)
;
uint32_t
linkTypes
=
nsStyleLinkElement
:
:
ParseLinkTypes
(
rel
)
;
if
(
!
(
linkTypes
&
nsStyleLinkElement
:
:
eSTYLESHEET
)
)
{
return
;
}
nsAutoString
title
;
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
title
title
)
;
title
.
CompressWhitespace
(
)
;
aTitle
.
Assign
(
title
)
;
if
(
linkTypes
&
nsStyleLinkElement
:
:
eALTERNATE
)
{
if
(
aTitle
.
IsEmpty
(
)
)
{
return
;
}
else
{
*
aIsAlternate
=
true
;
}
}
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
media
aMedia
)
;
nsContentUtils
:
:
ASCIIToLower
(
aMedia
)
;
nsAutoString
mimeType
;
nsAutoString
notUsed
;
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
type
aType
)
;
nsContentUtils
:
:
SplitMimeType
(
aType
mimeType
notUsed
)
;
if
(
!
mimeType
.
IsEmpty
(
)
&
&
!
mimeType
.
LowerCaseEqualsLiteral
(
"
text
/
css
"
)
)
{
return
;
}
aType
.
AssignLiteral
(
"
text
/
css
"
)
;
}
CORSMode
HTMLLinkElement
:
:
GetCORSMode
(
)
const
{
return
AttrValueToCORSMode
(
GetParsedAttr
(
nsGkAtoms
:
:
crossorigin
)
)
;
}
EventStates
HTMLLinkElement
:
:
IntrinsicState
(
)
const
{
return
Link
:
:
LinkState
(
)
|
nsGenericHTMLElement
:
:
IntrinsicState
(
)
;
}
void
HTMLLinkElement
:
:
AddSizeOfExcludingThis
(
nsWindowSizes
&
aSizes
size_t
*
aNodeSize
)
const
{
nsGenericHTMLElement
:
:
AddSizeOfExcludingThis
(
aSizes
aNodeSize
)
;
*
aNodeSize
+
=
Link
:
:
SizeOfExcludingThis
(
aSizes
.
mState
)
;
}
JSObject
*
HTMLLinkElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLLinkElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
HTMLLinkElement
:
:
GetAs
(
nsAString
&
aResult
)
{
GetEnumAttr
(
nsGkAtoms
:
:
as
EmptyCString
(
)
.
get
(
)
aResult
)
;
}
}
}
