#
ifndef
mozilla_dom_HTMLHeadingElement_h
#
define
mozilla_dom_HTMLHeadingElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLHeadingElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLHeadingElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
MOZ_ASSERT
(
IsHTMLHeadingElement
(
)
)
;
}
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
void
SetAlign
(
const
nsAString
&
aAlign
ErrorResult
&
aError
)
{
return
SetHTMLAttr
(
nsGkAtoms
:
:
align
aAlign
aError
)
;
}
void
GetAlign
(
DOMString
&
aAlign
)
const
{
return
GetHTMLAttr
(
nsGkAtoms
:
:
align
aAlign
)
;
}
NS_IMPL_FROMNODE_HELPER
(
HTMLHeadingElement
IsHTMLHeadingElement
(
)
)
protected
:
virtual
~
HTMLHeadingElement
(
)
;
JSObject
*
WrapNode
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
static
void
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
MappedDeclarations
&
)
;
}
;
}
}
#
endif
