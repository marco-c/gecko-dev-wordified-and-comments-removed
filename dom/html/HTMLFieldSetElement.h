#
ifndef
mozilla_dom_HTMLFieldSetElement_h
#
define
mozilla_dom_HTMLFieldSetElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIConstraintValidation
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFormElement
.
h
"
#
include
"
mozilla
/
dom
/
ValidityState
.
h
"
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
HTMLFieldSetElement
final
:
public
nsGenericHTMLFormElement
public
nsIConstraintValidation
{
public
:
using
nsGenericHTMLFormElement
:
:
GetForm
;
using
nsIConstraintValidation
:
:
GetValidationMessage
;
using
nsIConstraintValidation
:
:
SetCustomValidity
;
explicit
HTMLFieldSetElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_IMPL_FROMCONTENT_HTML_WITH_TAG
(
HTMLFieldSetElement
fieldset
)
NS_DECL_ISUPPORTS_INHERITED
virtual
nsresult
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
virtual
nsresult
InsertChildAt
(
nsIContent
*
aChild
uint32_t
aIndex
bool
aNotify
)
override
;
virtual
void
RemoveChildAt_Deprecated
(
uint32_t
aIndex
bool
aNotify
)
override
;
NS_IMETHOD
Reset
(
)
override
;
NS_IMETHOD
SubmitNamesValues
(
HTMLFormSubmission
*
aFormSubmission
)
override
;
virtual
bool
IsDisabledForEvents
(
EventMessage
aMessage
)
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
const
nsIContent
*
GetFirstLegend
(
)
const
{
return
mFirstLegend
;
}
void
AddElement
(
nsGenericHTMLFormElement
*
aElement
)
;
void
RemoveElement
(
nsGenericHTMLFormElement
*
aElement
)
;
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLFieldSetElement
nsGenericHTMLFormElement
)
bool
Disabled
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
disabled
)
;
}
void
SetDisabled
(
bool
aValue
ErrorResult
&
aRv
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
disabled
aValue
aRv
)
;
}
void
GetName
(
nsAString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
)
;
}
void
SetName
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aValue
aRv
)
;
}
NS_IMETHOD
GetType
(
nsAString
&
aType
)
;
nsIHTMLCollection
*
Elements
(
)
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
void
UpdateValidity
(
bool
aElementValidityState
)
;
protected
:
virtual
~
HTMLFieldSetElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
void
NotifyElementsForFirstLegendChange
(
bool
aNotify
)
;
static
bool
MatchListedElements
(
Element
*
aElement
int32_t
aNamespaceID
nsAtom
*
aAtom
void
*
aData
)
;
RefPtr
<
nsContentList
>
mElements
;
nsTArray
<
nsGenericHTMLFormElement
*
>
mDependentElements
;
nsIContent
*
mFirstLegend
;
int32_t
mInvalidElementsCount
;
}
;
}
}
#
endif
