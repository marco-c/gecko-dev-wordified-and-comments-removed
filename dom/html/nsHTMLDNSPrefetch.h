#
ifndef
nsHTMLDNSPrefetch_h___
#
define
nsHTMLDNSPrefetch_h___
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsITimer
;
namespace
mozilla
{
class
OriginAttributes
;
namespace
dom
{
class
Document
;
class
Link
;
}
namespace
net
{
class
NeckoParent
;
}
}
class
nsHTMLDNSPrefetch
{
public
:
static
bool
IsAllowed
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
static
nsresult
Initialize
(
)
;
static
nsresult
Shutdown
(
)
;
enum
class
Priority
{
Low
Medium
High
}
;
static
nsresult
Prefetch
(
mozilla
:
:
dom
:
:
Link
*
aElement
Priority
)
;
static
nsresult
Prefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
Priority
)
;
static
nsresult
CancelPrefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
Priority
nsresult
aReason
)
;
static
nsresult
CancelPrefetch
(
mozilla
:
:
dom
:
:
Link
*
aElement
Priority
nsresult
aReason
)
;
static
void
LinkDestroyed
(
mozilla
:
:
dom
:
:
Link
*
aLink
)
;
private
:
static
uint32_t
PriorityToDNSServiceFlags
(
Priority
)
;
static
nsresult
Prefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
uint32_t
flags
)
;
static
nsresult
CancelPrefetch
(
const
nsAString
&
hostname
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
uint32_t
flags
nsresult
aReason
)
;
public
:
class
nsListener
final
:
public
nsIDNSListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDNSLISTENER
nsListener
(
)
=
default
;
private
:
~
nsListener
(
)
=
default
;
}
;
class
nsDeferrals
final
:
public
nsIWebProgressListener
public
nsSupportsWeakReference
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSIOBSERVER
nsDeferrals
(
)
;
void
Activate
(
)
;
nsresult
Add
(
uint32_t
flags
mozilla
:
:
dom
:
:
Link
*
aElement
)
;
void
RemoveUnboundLinks
(
)
;
private
:
~
nsDeferrals
(
)
;
void
Flush
(
)
;
void
SubmitQueue
(
)
;
uint16_t
mHead
;
uint16_t
mTail
;
uint32_t
mActiveLoaderCount
;
nsCOMPtr
<
nsITimer
>
mTimer
;
bool
mTimerArmed
;
static
void
Tick
(
nsITimer
*
aTimer
void
*
aClosure
)
;
static
const
int
sMaxDeferred
=
512
;
static
const
int
sMaxDeferredMask
=
(
sMaxDeferred
-
1
)
;
struct
deferred_entry
{
uint32_t
mFlags
;
mozilla
:
:
dom
:
:
Link
*
mElement
;
}
mEntries
[
sMaxDeferred
]
;
}
;
friend
class
mozilla
:
:
net
:
:
NeckoParent
;
}
;
#
endif
