#
ifndef
nsHTMLDNSPrefetch_h___
#
define
nsHTMLDNSPrefetch_h___
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsITimer
;
namespace
mozilla
{
class
OriginAttributes
;
namespace
dom
{
class
Document
;
class
Link
;
}
namespace
net
{
class
NeckoParent
;
}
}
class
nsHTMLDNSPrefetch
{
public
:
static
bool
IsAllowed
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
static
nsresult
Initialize
(
)
;
static
nsresult
Shutdown
(
)
;
enum
class
Priority
{
Low
Medium
High
}
;
static
nsresult
Prefetch
(
mozilla
:
:
dom
:
:
Link
*
aElement
Priority
)
;
static
nsresult
Prefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
Priority
)
;
static
nsresult
CancelPrefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
Priority
nsresult
aReason
)
;
static
nsresult
CancelPrefetch
(
mozilla
:
:
dom
:
:
Link
*
aElement
Priority
nsresult
aReason
)
;
static
void
LinkDestroyed
(
mozilla
:
:
dom
:
:
Link
*
aLink
)
;
private
:
static
uint32_t
PriorityToDNSServiceFlags
(
Priority
)
;
static
nsresult
Prefetch
(
const
nsAString
&
host
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
uint32_t
flags
)
;
static
nsresult
CancelPrefetch
(
const
nsAString
&
hostname
bool
isHttps
const
mozilla
:
:
OriginAttributes
&
aPartitionedPrincipalOriginAttributes
uint32_t
flags
nsresult
aReason
)
;
friend
class
mozilla
:
:
net
:
:
NeckoParent
;
}
;
#
endif
