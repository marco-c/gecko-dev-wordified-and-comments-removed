#
include
"
HTMLDivElement
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDivElementBinding
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Div
)
namespace
mozilla
:
:
dom
{
HTMLDivElement
:
:
~
HTMLDivElement
(
)
=
default
;
NS_IMPL_ELEMENT_CLONE
(
HTMLDivElement
)
JSObject
*
HTMLDivElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
HTMLDivElement_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
HTMLDivElement
:
:
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
align
)
{
return
ParseDivAlignValue
(
aValue
aResult
)
;
}
return
nsGenericHTMLElement
:
:
ParseAttribute
(
aNamespaceID
aAttribute
aValue
aMaybeScriptedPrincipal
aResult
)
;
}
void
HTMLDivElement
:
:
MapAttributesIntoRule
(
MappedDeclarationsBuilder
&
aBuilder
)
{
MapDivAlignAttributeInto
(
aBuilder
)
;
MapCommonAttributesInto
(
aBuilder
)
;
}
NS_IMETHODIMP_
(
bool
)
HTMLDivElement
:
:
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
{
static
const
MappedAttributeEntry
*
const
map
[
]
=
{
sDivAlignAttributeMap
sCommonAttributeMap
}
;
return
FindAttributeDependence
(
aAttribute
map
)
;
}
nsMapRuleToAttributesFunc
HTMLDivElement
:
:
GetAttributeMappingFunction
(
)
const
{
return
&
MapAttributesIntoRule
;
}
}
