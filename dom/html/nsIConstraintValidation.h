#
ifndef
nsIConstraintValidition_h___
#
define
nsIConstraintValidition_h___
#
include
"
nsISupports
.
h
"
namespace
mozilla
:
:
dom
{
class
ValidityState
;
}
#
define
NS_ICONSTRAINTVALIDATION_IID
\
{
\
0x983829da
0x1aaf
0x449c
{
\
0xa3
0x06
0x85
0xd4
0xf0
0x31
0x1c
0xf6
\
}
\
}
class
nsIConstraintValidation
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ICONSTRAINTVALIDATION_IID
)
;
friend
class
mozilla
:
:
dom
:
:
ValidityState
;
static
const
uint16_t
sContentSpecifiedMaxLengthMessage
;
virtual
~
nsIConstraintValidation
(
)
;
bool
IsValid
(
)
const
{
return
mValidityBitField
=
=
0
;
}
bool
IsCandidateForConstraintValidation
(
)
const
{
return
!
mBarredFromConstraintValidation
;
}
enum
ValidityStateType
{
VALIDITY_STATE_VALUE_MISSING
=
0x1
<
<
0
VALIDITY_STATE_TYPE_MISMATCH
=
0x1
<
<
1
VALIDITY_STATE_PATTERN_MISMATCH
=
0x1
<
<
2
VALIDITY_STATE_TOO_LONG
=
0x1
<
<
3
VALIDITY_STATE_TOO_SHORT
=
0x1
<
<
4
VALIDITY_STATE_RANGE_UNDERFLOW
=
0x1
<
<
5
VALIDITY_STATE_RANGE_OVERFLOW
=
0x1
<
<
6
VALIDITY_STATE_STEP_MISMATCH
=
0x1
<
<
7
VALIDITY_STATE_BAD_INPUT
=
0x1
<
<
8
VALIDITY_STATE_CUSTOM_ERROR
=
0x1
<
<
9
}
;
void
SetValidityState
(
ValidityStateType
aState
bool
aValue
)
;
bool
WillValidate
(
)
const
{
return
IsCandidateForConstraintValidation
(
)
;
}
mozilla
:
:
dom
:
:
ValidityState
*
Validity
(
)
;
bool
CheckValidity
(
)
;
bool
ReportValidity
(
)
;
protected
:
nsIConstraintValidation
(
)
;
bool
GetValidityState
(
ValidityStateType
aState
)
const
{
return
mValidityBitField
&
aState
;
}
void
SetBarredFromConstraintValidation
(
bool
aBarred
)
;
RefPtr
<
mozilla
:
:
dom
:
:
ValidityState
>
mValidity
;
private
:
int16_t
mValidityBitField
;
bool
mBarredFromConstraintValidation
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIConstraintValidation
NS_ICONSTRAINTVALIDATION_IID
)
#
endif
