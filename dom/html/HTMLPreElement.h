#
ifndef
mozilla_dom_HTMLPreElement_h
#
define
mozilla_dom_HTMLPreElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
:
:
dom
{
class
HTMLPreElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLPreElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
:
nsGenericHTMLElement
(
std
:
:
move
(
aNodeInfo
)
)
{
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLPreElement
nsGenericHTMLElement
)
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
NS_IMETHOD_
(
bool
)
IsAttributeMapped
(
const
nsAtom
*
aAttribute
)
const
override
;
virtual
nsMapRuleToAttributesFunc
GetAttributeMappingFunction
(
)
const
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
int32_t
Width
(
)
const
{
return
GetIntAttr
(
nsGkAtoms
:
:
width
0
)
;
}
void
SetWidth
(
int32_t
aWidth
mozilla
:
:
ErrorResult
&
rv
)
{
rv
=
SetIntAttr
(
nsGkAtoms
:
:
width
aWidth
)
;
}
protected
:
virtual
~
HTMLPreElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
static
void
MapAttributesIntoRule
(
const
nsMappedAttributes
*
aAttributes
MappedDeclarations
&
)
;
}
;
}
#
endif
