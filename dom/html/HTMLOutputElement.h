#
ifndef
mozilla_dom_HTMLOutputElement_h
#
define
mozilla_dom_HTMLOutputElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ConstraintValidation
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
namespace
mozilla
:
:
dom
{
class
FormData
;
class
HTMLOutputElement
final
:
public
nsGenericHTMLFormControlElement
public
nsStubMutationObserver
public
ConstraintValidation
{
public
:
using
ConstraintValidation
:
:
GetValidationMessage
;
explicit
HTMLOutputElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
FromParser
aFromParser
=
NOT_FROM_PARSER
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHOD
Reset
(
)
override
;
NS_IMETHOD
SubmitNamesValues
(
FormData
*
aFormData
)
override
{
return
NS_OK
;
}
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
virtual
bool
ParseAttribute
(
int32_t
aNamespaceID
nsAtom
*
aAttribute
const
nsAString
&
aValue
nsIPrincipal
*
aMaybeScriptedPrincipal
nsAttrValue
&
aResult
)
override
;
virtual
void
DoneAddingChildren
(
bool
aHaveNotified
)
override
;
virtual
nsresult
BindToTree
(
BindContext
&
nsINode
&
aParent
)
override
;
void
DescendantsChanged
(
)
;
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLOutputElement
nsGenericHTMLFormControlElement
)
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsDOMTokenList
*
HtmlFor
(
)
;
void
GetName
(
nsAString
&
aName
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
name
aName
)
;
}
void
SetName
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
name
aName
aRv
)
;
}
void
GetType
(
nsAString
&
aType
)
{
aType
.
AssignLiteral
(
"
output
"
)
;
}
void
GetDefaultValue
(
nsAString
&
aDefaultValue
)
{
aDefaultValue
=
mDefaultValue
;
}
void
SetDefaultValue
(
const
nsAString
&
aDefaultValue
ErrorResult
&
aRv
)
;
void
GetValue
(
nsAString
&
aValue
)
const
;
void
SetValue
(
const
nsAString
&
aValue
ErrorResult
&
aRv
)
;
void
SetCustomValidity
(
const
nsAString
&
aError
)
;
protected
:
virtual
~
HTMLOutputElement
(
)
;
enum
ValueModeFlag
{
eModeDefault
eModeValue
}
;
ValueModeFlag
mValueModeFlag
;
bool
mIsDoneAddingChildren
;
nsString
mDefaultValue
;
RefPtr
<
nsDOMTokenList
>
mTokenList
;
}
;
}
#
endif
