#
ifndef
mozilla_dom_HTMLOptGroupElement_h
#
define
mozilla_dom_HTMLOptGroupElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
class
HTMLOptGroupElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLOptGroupElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLOptGroupElement
optgroup
)
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
HTMLOptGroupElement
nsGenericHTMLElement
)
virtual
nsresult
InsertChildBefore
(
nsIContent
*
aKid
nsIContent
*
aBeforeThis
bool
aNotify
)
override
;
virtual
void
RemoveChildNode
(
nsIContent
*
aKid
bool
aNotify
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
bool
Disabled
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
disabled
)
;
}
void
SetDisabled
(
bool
aValue
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
disabled
aValue
aError
)
;
}
void
GetLabel
(
nsAString
&
aValue
)
const
{
GetHTMLAttr
(
nsGkAtoms
:
:
label
aValue
)
;
}
void
SetLabel
(
const
nsAString
&
aLabel
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
label
aLabel
aError
)
;
}
protected
:
virtual
~
HTMLOptGroupElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
Element
*
GetSelect
(
)
;
}
;
}
}
#
endif
