#
ifndef
mozilla_dom_HTMLSourceElement_h
#
define
mozilla_dom_HTMLSourceElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
class
nsAttrValue
;
namespace
mozilla
{
namespace
dom
{
class
MediaList
;
class
HTMLSourceElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLSourceElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLSourceElement
nsGenericHTMLElement
)
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLSourceElement
source
)
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
override
;
bool
MatchesCurrentMedia
(
)
;
static
bool
WouldMatchMediaForDocument
(
const
nsAString
&
aMediaStr
const
nsIDocument
*
aDocument
)
;
MediaSource
*
GetSrcMediaSource
(
)
{
return
mSrcMediaSource
;
}
;
void
GetSrc
(
nsString
&
aSrc
)
{
GetURIAttr
(
nsGkAtoms
:
:
src
nullptr
aSrc
)
;
}
void
SetSrc
(
const
nsAString
&
aSrc
nsIPrincipal
*
aTriggeringPrincipal
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
src
aSrc
aTriggeringPrincipal
rv
)
;
}
nsIPrincipal
*
GetSrcTriggeringPrincipal
(
)
const
{
return
mSrcTriggeringPrincipal
;
}
nsIPrincipal
*
GetSrcsetTriggeringPrincipal
(
)
const
{
return
mSrcsetTriggeringPrincipal
;
}
void
GetType
(
DOMString
&
aType
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
type
aType
)
;
}
void
SetType
(
const
nsAString
&
aType
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
type
aType
rv
)
;
}
void
GetSrcset
(
DOMString
&
aSrcset
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
srcset
aSrcset
)
;
}
void
SetSrcset
(
const
nsAString
&
aSrcset
nsIPrincipal
*
aTriggeringPrincipal
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
srcset
aSrcset
aTriggeringPrincipal
rv
)
;
}
void
GetSizes
(
DOMString
&
aSizes
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
sizes
aSizes
)
;
}
void
SetSizes
(
const
nsAString
&
aSizes
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
sizes
aSizes
rv
)
;
}
void
GetMedia
(
DOMString
&
aMedia
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
media
aMedia
)
;
}
void
SetMedia
(
const
nsAString
&
aMedia
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
media
aMedia
rv
)
;
}
protected
:
virtual
~
HTMLSourceElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
nsresult
AfterSetAttr
(
int32_t
aNameSpaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aMaybeScriptedPrincipal
bool
aNotify
)
override
;
private
:
RefPtr
<
MediaList
>
mMediaList
;
RefPtr
<
MediaSource
>
mSrcMediaSource
;
nsCOMPtr
<
nsIPrincipal
>
mSrcTriggeringPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mSrcsetTriggeringPrincipal
;
void
UpdateMediaList
(
const
nsAttrValue
*
aValue
)
;
}
;
}
}
#
endif
