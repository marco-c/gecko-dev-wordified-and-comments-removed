#
ifndef
mozilla_dom_HTMLAreaElement_h
#
define
mozilla_dom_HTMLAreaElement_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
Link
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIURL
.
h
"
class
nsIDocument
;
namespace
mozilla
{
class
EventChainPostVisitor
;
class
EventChainPreVisitor
;
namespace
dom
{
class
HTMLAreaElement
final
:
public
nsGenericHTMLElement
public
Link
{
public
:
explicit
HTMLAreaElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLAreaElement
nsGenericHTMLElement
)
NS_DECL_ADDSIZEOFEXCLUDINGTHIS
NS_IMPL_FROMNODE_HTML_WITH_TAG
(
HTMLAreaElement
area
)
virtual
int32_t
TabIndexDefault
(
)
override
;
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
nsresult
PostHandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
;
virtual
bool
IsLink
(
nsIURI
*
*
aURI
)
const
override
;
virtual
void
GetLinkTarget
(
nsAString
&
aTarget
)
override
;
virtual
already_AddRefed
<
nsIURI
>
GetHrefURI
(
)
const
override
;
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
nsresult
Clone
(
dom
:
:
NodeInfo
*
nsINode
*
*
aResult
)
const
override
;
virtual
EventStates
IntrinsicState
(
)
const
override
;
void
GetAlt
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
alt
aValue
)
;
}
void
SetAlt
(
const
nsAString
&
aAlt
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
alt
aAlt
aError
)
;
}
void
GetCoords
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
coords
aValue
)
;
}
void
SetCoords
(
const
nsAString
&
aCoords
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
coords
aCoords
aError
)
;
}
void
GetShape
(
nsAString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
shape
aValue
)
;
}
void
SetShape
(
const
nsAString
&
aShape
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
shape
aShape
aError
)
;
}
void
GetHref
(
nsAString
&
aValue
)
{
GetURIAttr
(
nsGkAtoms
:
:
href
nullptr
aValue
)
;
}
void
SetHref
(
const
nsAString
&
aHref
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
href
aHref
aError
)
;
}
void
GetTarget
(
DOMString
&
aValue
)
;
void
SetTarget
(
const
nsAString
&
aTarget
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
target
aTarget
aError
)
;
}
void
GetDownload
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
download
aValue
)
;
}
void
SetDownload
(
const
nsAString
&
aDownload
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
download
aDownload
aError
)
;
}
void
GetPing
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
ping
aValue
)
;
}
void
SetPing
(
const
nsAString
&
aPing
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
ping
aPing
aError
)
;
}
void
GetRel
(
DOMString
&
aValue
)
{
GetHTMLAttr
(
nsGkAtoms
:
:
rel
aValue
)
;
}
void
SetRel
(
const
nsAString
&
aRel
ErrorResult
&
aError
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
rel
aRel
aError
)
;
}
nsDOMTokenList
*
RelList
(
)
;
void
SetReferrerPolicy
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
rv
)
{
SetHTMLAttr
(
nsGkAtoms
:
:
referrerpolicy
aValue
rv
)
;
}
void
GetReferrerPolicy
(
nsAString
&
aReferrer
)
{
GetEnumAttr
(
nsGkAtoms
:
:
referrerpolicy
EmptyCString
(
)
.
get
(
)
aReferrer
)
;
}
bool
NoHref
(
)
const
{
return
GetBoolAttr
(
nsGkAtoms
:
:
nohref
)
;
}
void
SetNoHref
(
bool
aValue
ErrorResult
&
aError
)
{
SetHTMLBoolAttr
(
nsGkAtoms
:
:
nohref
aValue
aError
)
;
}
void
ToString
(
nsAString
&
aSource
)
;
void
Stringify
(
nsAString
&
aResult
)
{
GetHref
(
aResult
)
;
}
void
NodeInfoChanged
(
nsIDocument
*
aOldDoc
)
final
{
ClearHasPendingLinkUpdate
(
)
;
nsGenericHTMLElement
:
:
NodeInfoChanged
(
aOldDoc
)
;
}
protected
:
virtual
~
HTMLAreaElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
RefPtr
<
nsDOMTokenList
>
mRelList
;
}
;
}
}
#
endif
