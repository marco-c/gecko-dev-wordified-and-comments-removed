#
include
"
mozilla
/
dom
/
HTMLDialogElement
.
h
"
#
include
"
mozilla
/
dom
/
HTMLDialogElementBinding
.
h
"
NS_IMPL_NS_NEW_HTML_ELEMENT
(
Dialog
)
namespace
mozilla
{
namespace
dom
{
HTMLDialogElement
:
:
~
HTMLDialogElement
(
)
{
}
NS_IMPL_ELEMENT_CLONE
(
HTMLDialogElement
)
void
HTMLDialogElement
:
:
Close
(
const
mozilla
:
:
dom
:
:
Optional
<
nsAString
>
&
aReturnValue
)
{
if
(
!
Open
(
)
)
{
return
;
}
if
(
aReturnValue
.
WasPassed
(
)
)
{
SetReturnValue
(
aReturnValue
.
Value
(
)
)
;
}
ErrorResult
ignored
;
SetOpen
(
false
ignored
)
;
ignored
.
SuppressException
(
)
;
RefPtr
<
AsyncEventDispatcher
>
eventDispatcher
=
new
AsyncEventDispatcher
(
this
NS_LITERAL_STRING
(
"
close
"
)
false
)
;
eventDispatcher
-
>
PostDOMEvent
(
)
;
}
void
HTMLDialogElement
:
:
Show
(
)
{
if
(
Open
(
)
)
{
return
;
}
ErrorResult
ignored
;
SetOpen
(
true
ignored
)
;
ignored
.
SuppressException
(
)
;
}
void
HTMLDialogElement
:
:
ShowModal
(
ErrorResult
&
aError
)
{
if
(
!
IsInComposedDoc
(
)
|
|
Open
(
)
)
{
aError
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
SetOpen
(
true
aError
)
;
aError
.
SuppressException
(
)
;
}
JSObject
*
HTMLDialogElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
HTMLDialogElementBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
