#
ifndef
mozilla_dom_HTMLContentElement_h__
#
define
mozilla_dom_HTMLContentElement_h__
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsINodeList
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
struct
nsCSSSelectorList
;
namespace
mozilla
{
namespace
dom
{
class
DistributedContentList
;
class
HTMLContentElement
final
:
public
nsGenericHTMLElement
{
public
:
explicit
HTMLContentElement
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
aNodeInfo
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
HTMLContentElement
nsGenericHTMLElement
)
static
HTMLContentElement
*
FromContent
(
nsIContent
*
aContent
)
{
if
(
aContent
-
>
IsHTMLContentElement
(
)
)
{
return
static_cast
<
HTMLContentElement
*
>
(
aContent
)
;
}
return
nullptr
;
}
virtual
bool
IsHTMLContentElement
(
)
const
override
{
return
true
;
}
virtual
nsresult
Clone
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
nsINode
*
*
aResult
bool
aPreallocateChildren
)
const
override
;
virtual
nsIDOMNode
*
AsDOMNode
(
)
override
{
return
this
;
}
virtual
nsresult
BindToTree
(
nsIDocument
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
bool
aCompileEventHandlers
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
bool
Match
(
nsIContent
*
aContent
)
;
bool
IsInsertionPoint
(
)
const
{
return
mIsInsertionPoint
;
}
nsCOMArray
<
nsIContent
>
&
MatchedNodes
(
)
{
return
mMatchedNodes
;
}
void
AppendMatchedNode
(
nsIContent
*
aContent
)
;
void
RemoveMatchedNode
(
nsIContent
*
aContent
)
;
void
InsertMatchedNode
(
uint32_t
aIndex
nsIContent
*
aContent
)
;
void
ClearMatchedNodes
(
)
;
already_AddRefed
<
DistributedContentList
>
GetDistributedNodes
(
)
;
void
GetSelect
(
nsAString
&
aSelect
)
{
Element
:
:
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
select
aSelect
)
;
}
void
SetSelect
(
const
nsAString
&
aSelect
)
{
Element
:
:
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
select
aSelect
true
)
;
}
protected
:
virtual
~
HTMLContentElement
(
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
UpdateFallbackDistribution
(
)
;
virtual
nsresult
AfterSetAttr
(
int32_t
aNamespaceID
nsAtom
*
aName
const
nsAttrValue
*
aValue
const
nsAttrValue
*
aOldValue
nsIPrincipal
*
aSubjectPrincipal
bool
aNotify
)
override
;
nsCOMArray
<
nsIContent
>
mMatchedNodes
;
nsAutoPtr
<
nsCSSSelectorList
>
mSelectorList
;
bool
mValidSelector
;
bool
mIsInsertionPoint
;
}
;
class
DistributedContentList
:
public
nsINodeList
{
public
:
explicit
DistributedContentList
(
HTMLContentElement
*
aHostElement
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
DistributedContentList
)
NS_DECL_NSIDOMNODELIST
virtual
nsIContent
*
Item
(
uint32_t
aIndex
)
override
;
virtual
int32_t
IndexOf
(
nsIContent
*
aContent
)
override
;
virtual
nsINode
*
GetParentObject
(
)
override
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
DistributedContentList
(
)
;
RefPtr
<
HTMLContentElement
>
mParent
;
nsCOMArray
<
nsIContent
>
mDistributedNodes
;
}
;
}
}
#
endif
