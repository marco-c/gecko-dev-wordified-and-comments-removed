"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ManifestMessagesChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ManifestObtainer
"
"
resource
:
/
/
gre
/
modules
/
ManifestObtainer
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ManifestFinder
"
"
resource
:
/
/
gre
/
modules
/
ManifestFinder
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ManifestIcons
"
"
resource
:
/
/
gre
/
modules
/
ManifestIcons
.
jsm
"
)
;
class
ManifestMessagesChild
extends
ActorChild
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
DOM
:
WebManifest
:
hasManifestLink
"
:
return
this
.
hasManifestLink
(
message
)
;
case
"
DOM
:
ManifestObtainer
:
Obtain
"
:
return
this
.
obtainManifest
(
message
)
;
case
"
DOM
:
Manifest
:
FireAppInstalledEvent
"
:
return
this
.
fireAppInstalledEvent
(
message
)
;
case
"
DOM
:
WebManifest
:
fetchIcon
"
:
return
this
.
fetchIcon
(
message
)
;
}
return
undefined
;
}
hasManifestLink
(
{
data
:
{
id
}
}
)
{
const
response
=
makeMsgResponse
(
id
)
;
response
.
result
=
ManifestFinder
.
contentHasManifestLink
(
this
.
mm
.
content
)
;
response
.
success
=
true
;
this
.
mm
.
sendAsyncMessage
(
"
DOM
:
WebManifest
:
hasManifestLink
"
response
)
;
}
async
obtainManifest
(
{
data
:
{
id
}
}
)
{
const
response
=
makeMsgResponse
(
id
)
;
try
{
response
.
result
=
await
ManifestObtainer
.
contentObtainManifest
(
this
.
mm
.
content
)
;
response
.
success
=
true
;
}
catch
(
err
)
{
response
.
result
=
serializeError
(
err
)
;
}
this
.
mm
.
sendAsyncMessage
(
"
DOM
:
ManifestObtainer
:
Obtain
"
response
)
;
}
fireAppInstalledEvent
(
{
data
:
{
id
}
}
)
{
const
ev
=
new
Event
(
"
appinstalled
"
)
;
const
response
=
makeMsgResponse
(
id
)
;
if
(
!
this
.
mm
.
content
|
|
this
.
mm
.
content
.
top
!
=
=
this
.
mm
.
content
)
{
const
msg
=
"
Can
only
dispatch
install
event
on
top
-
level
browsing
contexts
.
"
;
response
.
result
=
serializeError
(
new
Error
(
msg
)
)
;
}
else
{
response
.
success
=
true
;
this
.
mm
.
content
.
dispatchEvent
(
ev
)
;
}
this
.
mm
.
sendAsyncMessage
(
"
DOM
:
Manifest
:
FireAppInstalledEvent
"
response
)
;
}
async
fetchIcon
(
{
data
:
{
id
manifest
iconSize
}
}
)
{
const
response
=
makeMsgResponse
(
id
)
;
try
{
response
.
result
=
await
ManifestIcons
.
contentFetchIcon
(
this
.
mm
.
content
manifest
iconSize
)
;
response
.
success
=
true
;
}
catch
(
err
)
{
response
.
result
=
serializeError
(
err
)
;
}
this
.
mm
.
sendAsyncMessage
(
"
DOM
:
WebManifest
:
fetchIcon
"
response
)
;
}
}
function
serializeError
(
aError
)
{
const
clone
=
{
fileName
:
aError
.
fileName
lineNumber
:
aError
.
lineNumber
columnNumber
:
aError
.
columnNumber
stack
:
aError
.
stack
message
:
aError
.
message
name
:
aError
.
name
}
;
return
clone
;
}
function
makeMsgResponse
(
aId
)
{
return
{
id
:
aId
success
:
false
result
:
undefined
}
;
}
