#
include
"
mozilla
/
dom
/
RemoteFrameParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessManager
.
h
"
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
layout
;
namespace
mozilla
{
namespace
dom
{
RemoteFrameParent
:
:
RemoteFrameParent
(
)
:
mIPCOpen
(
false
)
{
}
RemoteFrameParent
:
:
~
RemoteFrameParent
(
)
{
}
nsresult
RemoteFrameParent
:
:
Init
(
const
nsString
&
aPresentationURL
const
nsString
&
aRemoteType
)
{
mIPCOpen
=
true
;
OriginAttributes
attrs
;
attrs
.
mInIsolatedMozBrowser
=
false
;
attrs
.
mAppId
=
nsIScriptSecurityManager
:
:
NO_APP_ID
;
attrs
.
SyncAttributesWithPrivateBrowsing
(
false
)
;
MutableTabContext
tabContext
;
tabContext
.
SetTabContext
(
false
0
UIStateChangeType_Set
UIStateChangeType_Set
attrs
aPresentationURL
)
;
ProcessPriority
initialPriority
=
PROCESS_PRIORITY_FOREGROUND
;
RefPtr
<
nsIContentParent
>
constructorSender
=
ContentParent
:
:
GetNewOrUsedBrowserProcess
(
nullptr
aRemoteType
initialPriority
nullptr
false
)
;
if
(
NS_WARN_IF
(
!
constructorSender
)
)
{
MOZ_ASSERT
(
false
"
Unable
to
allocate
content
process
!
"
)
;
return
NS_ERROR_FAILURE
;
}
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
TabId
tabId
(
nsContentUtils
:
:
GenerateTabId
(
)
)
;
cpm
-
>
RegisterRemoteFrame
(
tabId
ContentParentId
(
0
)
TabId
(
0
)
tabContext
.
AsIPCTabContext
(
)
constructorSender
-
>
ChildID
(
)
)
;
uint32_t
chromeFlags
=
0
;
RefPtr
<
TabParent
>
tabParent
(
new
TabParent
(
constructorSender
tabId
tabContext
chromeFlags
)
)
;
PBrowserParent
*
browser
=
constructorSender
-
>
SendPBrowserConstructor
(
tabParent
.
forget
(
)
.
take
(
)
tabId
TabId
(
0
)
tabContext
.
AsIPCTabContext
(
)
chromeFlags
constructorSender
-
>
ChildID
(
)
constructorSender
-
>
IsForBrowser
(
)
)
;
if
(
NS_WARN_IF
(
!
browser
)
)
{
MOZ_ASSERT
(
false
"
Browser
Constructor
Failed
"
)
;
return
NS_ERROR_FAILURE
;
}
mTabParent
=
TabParent
:
:
GetFrom
(
browser
)
;
mTabParent
-
>
SetOwnerElement
(
Manager
(
)
-
>
GetOwnerElement
(
)
)
;
mTabParent
-
>
InitRendering
(
)
;
return
NS_OK
;
}
void
RemoteFrameParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
}
}
