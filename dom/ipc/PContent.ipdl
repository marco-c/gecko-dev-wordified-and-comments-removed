include
protocol
PBackground
;
include
protocol
PBrowser
;
include
protocol
PCompositorManager
;
include
protocol
PContentPermissionRequest
;
include
protocol
PCycleCollectWithLogs
;
include
protocol
PExternalHelperApp
;
include
protocol
PHandlerService
;
include
protocol
PFileDescriptorSet
;
include
protocol
PHal
;
include
protocol
PHeapSnapshotTempFileHelper
;
include
protocol
PProcessHangMonitor
;
include
protocol
PImageBridge
;
include
protocol
PIPCBlobInputStream
;
include
protocol
PLoginReputation
;
include
protocol
PMedia
;
include
protocol
PNecko
;
include
protocol
PStreamFilter
;
include
protocol
PGMPContent
;
include
protocol
PGMPService
;
include
protocol
PPluginModule
;
include
protocol
PGMP
;
include
protocol
PPrinting
;
include
protocol
PChildToParentStream
;
include
protocol
PParentToChildStream
;
include
protocol
POfflineCacheUpdate
;
#
ifdef
MOZ_WEBSPEECH
include
protocol
PSpeechSynthesis
;
#
endif
include
protocol
PTestShell
;
include
protocol
PRemoteSpellcheckEngine
;
include
protocol
PWebBrowserPersistDocument
;
include
protocol
PWebrtcGlobal
;
include
protocol
PWindowGlobal
;
include
protocol
PPresentation
;
include
protocol
PURLClassifier
;
include
protocol
PURLClassifierLocal
;
include
protocol
PVRManager
;
include
protocol
PRemoteDecoderManager
;
include
protocol
PProfiler
;
include
protocol
PScriptCache
;
include
protocol
PSessionStorageObserver
;
include
protocol
PBenchmarkStorage
;
include
DOMTypes
;
include
WindowGlobalTypes
;
include
IPCBlob
;
include
IPCStream
;
include
PTabContext
;
include
PluginTypes
;
include
ProtocolTypes
;
include
PBackgroundSharedTypes
;
include
PContentPermission
;
include
ServiceWorkerConfiguration
;
include
GraphicsMessages
;
include
MemoryReportTypes
;
include
ClientIPCTypes
;
include
HangTypes
;
include
PrefsTypes
;
include
NeckoChannelParams
;
include
PSMIPCTypes
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
include
protocol
PSandboxTesting
;
#
endif
using
refcounted
class
nsIDOMGeoPosition
from
"
nsGeoPositionIPCSerialiser
.
h
"
;
using
refcounted
class
nsIAlertNotification
from
"
mozilla
/
AlertNotificationIPCSerializer
.
h
"
;
using
struct
ChromePackage
from
"
mozilla
/
chrome
/
RegistryMessageUtils
.
h
"
;
using
struct
SubstitutionMapping
from
"
mozilla
/
chrome
/
RegistryMessageUtils
.
h
"
;
using
struct
OverrideMapping
from
"
mozilla
/
chrome
/
RegistryMessageUtils
.
h
"
;
using
base
:
:
ProcessId
from
"
base
/
process
.
h
"
;
using
struct
IPC
:
:
Permission
from
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
;
using
class
IPC
:
:
Principal
from
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
;
using
mozilla
:
:
a11y
:
:
IHandlerControlHolder
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
dom
:
:
NativeThreadId
from
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
using
mozilla
:
:
hal
:
:
ProcessPriority
from
"
mozilla
/
HalTypes
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntSize
from
"
mozilla
/
gfx
/
2D
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
dom
:
:
ContentParentId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntPoint
from
"
Units
.
h
"
;
using
struct
LookAndFeelInt
from
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
;
using
class
mozilla
:
:
dom
:
:
MessagePort
from
"
mozilla
/
dom
/
MessagePort
.
h
"
;
using
class
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
from
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
;
using
mozilla
:
:
OriginAttributes
from
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
TextureFactoryIdentifier
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositorOptions
from
"
mozilla
/
layers
/
CompositorOptions
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
HistogramAccumulation
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
KeyedHistogramAccumulation
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
ScalarAction
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
KeyedScalarAction
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
DynamicScalarDefinition
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
ChildEventData
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
moveonly
mozilla
:
:
UntrustedModulesData
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
using
moveonly
mozilla
:
:
ModulePaths
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
using
moveonly
mozilla
:
:
ModulesMapResult
from
"
mozilla
/
UntrustedModulesData
.
h
"
;
using
mozilla
:
:
Telemetry
:
:
DiscardedData
from
"
mozilla
/
TelemetryComms
.
h
"
;
using
mozilla
:
:
CrossProcessMutexHandle
from
"
mozilla
/
ipc
/
CrossProcessMutex
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeDiscardedBrowsingContext
from
"
mozilla
/
dom
/
BrowsingContext
.
h
"
;
using
mozilla
:
:
dom
:
:
BrowsingContextTransaction
from
"
mozilla
/
dom
/
BrowsingContext
.
h
"
;
using
mozilla
:
:
dom
:
:
BrowsingContextInitializer
from
"
mozilla
/
dom
/
BrowsingContext
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeDiscardedWindowContext
from
"
mozilla
/
dom
/
WindowContext
.
h
"
;
using
mozilla
:
:
dom
:
:
WindowContextTransaction
from
"
mozilla
/
dom
/
WindowContext
.
h
"
;
using
base
:
:
SharedMemoryHandle
from
"
base
/
shared_memory
.
h
"
;
using
mozilla
:
:
ipc
:
:
SharedMemoryBasic
:
:
Handle
from
"
mozilla
/
ipc
/
SharedMemoryBasic
.
h
"
;
using
mozilla
:
:
fontlist
:
:
Pointer
from
"
SharedFontList
.
h
"
;
using
gfxSparseBitSet
from
"
gfxFontUtils
.
h
"
;
using
FontVisibility
from
"
gfxFontEntry
.
h
"
;
using
mozilla
:
:
dom
:
:
MediaControlKeysEvent
from
"
ipc
/
MediaControlIPC
.
h
"
;
using
mozilla
:
:
dom
:
:
MediaPlaybackState
from
"
ipc
/
MediaControlIPC
.
h
"
;
using
mozilla
:
:
dom
:
:
MediaAudibleState
from
"
ipc
/
MediaControlIPC
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeMediaMetadataBase
from
"
mozilla
/
dom
/
MediaSessionIPCUtils
.
h
"
;
using
mozilla
:
:
dom
:
:
MediaSessionPlaybackState
from
"
mozilla
/
dom
/
MediaSessionBinding
.
h
"
;
using
refcounted
class
nsDocShellLoadState
from
"
nsDocShellLoadState
.
h
"
;
using
mozilla
:
:
dom
:
:
ServiceWorkerShutdownState
:
:
Progress
from
"
mozilla
/
dom
/
ServiceWorkerShutdownState
.
h
"
;
using
mozilla
:
:
ContentBlockingNotifier
:
:
StorageAccessGrantedReason
from
"
mozilla
/
ContentBlockingNotifier
.
h
"
;
using
mozilla
:
:
ContentBlockingNotifier
:
:
BlockingDecision
from
"
mozilla
/
ContentBlockingNotifier
.
h
"
;
using
mozilla
:
:
ContentBlocking
:
:
StorageAccessPromptChoices
from
"
mozilla
/
ContentBlocking
.
h
"
;
using
JSActorMessageKind
from
"
mozilla
/
dom
/
JSActor
.
h
"
;
using
JSActorMessageMeta
from
"
mozilla
/
dom
/
PWindowGlobal
.
h
"
;
union
ChromeRegistryItem
{
ChromePackage
;
OverrideMapping
;
SubstitutionMapping
;
}
;
namespace
mozilla
{
namespace
dom
{
#
if
defined
(
ANDROID
)
struct
SystemFontListEntry
{
nsCString
familyName
;
nsCString
faceName
;
nsCString
filepath
;
uint32_t
weightRange
;
uint32_t
stretchRange
;
uint32_t
styleRange
;
uint8_t
index
;
FontVisibility
visibility
;
}
;
#
elif
defined
(
XP_MACOSX
)
struct
SystemFontListEntry
{
nsCString
familyName
;
FontVisibility
visibility
;
uint8_t
entryType
;
}
;
#
else
struct
SystemFontListEntry
{
nsCString
pattern
;
bool
appFontFamily
;
}
;
#
endif
struct
ClipboardCapabilities
{
bool
supportsSelectionClipboard
;
bool
supportsFindClipboard
;
}
;
union
FileDescOrError
{
FileDescriptor
;
nsresult
;
}
;
struct
DomainPolicyClone
{
bool
active
;
nsIURI
[
]
blocklist
;
nsIURI
[
]
allowlist
;
nsIURI
[
]
superBlocklist
;
nsIURI
[
]
superAllowlist
;
}
;
struct
AndroidSystemInfo
{
nsString
device
;
nsString
manufacturer
;
nsString
release_version
;
nsString
hardware
;
uint32_t
sdk_version
;
bool
isTablet
;
}
;
struct
GetFilesResponseSuccess
{
IPCBlob
[
]
blobs
;
}
;
struct
GetFilesResponseFailure
{
nsresult
errorCode
;
}
;
union
GetFilesResponseResult
{
GetFilesResponseSuccess
;
GetFilesResponseFailure
;
}
;
struct
BlobURLRegistrationData
{
nsCString
url
;
IPCBlob
blob
;
nsIPrincipal
principal
;
bool
revoked
;
}
;
struct
JSWindowActorEventDecl
{
nsString
name
;
bool
capture
;
bool
systemGroup
;
bool
allowUntrusted
;
bool
?
passive
;
}
;
struct
JSWindowActorInfo
{
nsCString
name
;
bool
allFrames
;
nsCString
?
url
;
JSWindowActorEventDecl
[
]
events
;
nsCString
[
]
observers
;
nsString
[
]
matches
;
nsString
[
]
remoteTypes
;
nsString
[
]
messageManagerGroups
;
}
;
struct
JSProcessActorInfo
{
nsCString
name
;
nsCString
?
url
;
nsCString
[
]
observers
;
nsString
[
]
remoteTypes
;
}
;
struct
GMPAPITags
{
nsCString
api
;
nsCString
[
]
tags
;
}
;
struct
GMPCapabilityData
{
nsCString
name
;
nsCString
version
;
GMPAPITags
[
]
capabilities
;
}
;
struct
GfxInfoFeatureStatus
{
int32_t
feature
;
int32_t
status
;
nsCString
failureId
;
}
;
struct
XPCOMInitData
{
bool
isOffline
;
bool
isConnected
;
int32_t
captivePortalState
;
bool
isLangRTL
;
bool
haveBidiKeyboards
;
nsString
[
]
dictionaries
;
ClipboardCapabilities
clipboardCaps
;
DomainPolicyClone
domainPolicy
;
nsIURI
userContentSheetURL
;
GfxVarUpdate
[
]
gfxNonDefaultVarUpdates
;
ContentDeviceData
contentDeviceData
;
GfxInfoFeatureStatus
[
]
gfxFeatureStatus
;
DataStorageEntry
[
]
dataStorage
;
nsCString
[
]
appLocales
;
nsCString
[
]
requestedLocales
;
DynamicScalarDefinition
[
]
dynamicScalarDefs
;
}
;
struct
VisitedQueryResult
{
nsIURI
uri
;
bool
visited
;
}
;
struct
StringBundleDescriptor
{
nsCString
bundleURL
;
FileDescriptor
mapFile
;
uint32_t
mapSize
;
}
;
struct
IPCURLClassifierFeature
{
nsCString
featureName
;
nsCString
[
]
tables
;
nsCString
skipHostList
;
}
;
struct
NotificationEventData
{
nsCString
originSuffix
;
nsCString
scope
;
nsString
ID
;
nsString
title
;
nsString
dir
;
nsString
lang
;
nsString
body
;
nsString
tag
;
nsString
icon
;
nsString
data
;
nsString
behavior
;
}
;
struct
PostMessageData
{
MaybeDiscardedBrowsingContext
source
;
nsString
origin
;
nsString
targetOrigin
;
nsIURI
targetOriginURI
;
nsIPrincipal
callerPrincipal
;
nsIPrincipal
subjectPrincipal
;
nsIURI
callerURI
;
bool
isFromPrivateWindow
;
nsCString
scriptLocation
;
uint64_t
innerWindowId
;
}
;
struct
KeyValuePair
{
nsString
key
;
nsString
value
;
}
;
union
SyncedContextInitializer
{
BrowsingContextInitializer
;
WindowContextInitializer
;
}
;
nested
(
upto
inside_cpow
)
sync
protocol
PContent
{
manages
PBrowser
;
manages
PContentPermissionRequest
;
manages
PCycleCollectWithLogs
;
manages
PExternalHelperApp
;
manages
PFileDescriptorSet
;
manages
PHal
;
manages
PHandlerService
;
manages
PHeapSnapshotTempFileHelper
;
manages
PIPCBlobInputStream
;
manages
PMedia
;
manages
PNecko
;
manages
POfflineCacheUpdate
;
manages
PPrinting
;
manages
PChildToParentStream
;
manages
PParentToChildStream
;
#
ifdef
MOZ_WEBSPEECH
manages
PSpeechSynthesis
;
#
endif
manages
PTestShell
;
manages
PRemoteSpellcheckEngine
;
manages
PWebBrowserPersistDocument
;
manages
PWebrtcGlobal
;
manages
PPresentation
;
manages
PURLClassifier
;
manages
PURLClassifierLocal
;
manages
PScriptCache
;
manages
PLoginReputation
;
manages
PSessionStorageObserver
;
manages
PBenchmarkStorage
;
parent
:
async
ConstructPopupBrowser
(
ManagedEndpoint
<
PBrowserParent
>
browserEp
ManagedEndpoint
<
PWindowGlobalParent
>
windowEp
TabId
tabId
IPCTabContext
context
WindowGlobalInit
windowInit
uint32_t
chromeFlags
)
;
child
:
async
ConstructBrowser
(
ManagedEndpoint
<
PBrowserChild
>
browserEp
ManagedEndpoint
<
PWindowGlobalChild
>
windowEp
TabId
tabId
IPCTabContext
context
WindowGlobalInit
windowInit
uint32_t
chromeFlags
ContentParentId
cpId
bool
isForBrowser
bool
isTopLevel
)
;
both
:
async
PFileDescriptorSet
(
FileDescriptor
fd
)
;
async
PWebBrowserPersistDocument
(
nullable
PBrowser
aBrowser
MaybeDiscardedBrowsingContext
aContext
)
;
async
RawMessage
(
JSActorMessageMeta
aMetadata
ClonedMessageData
aData
ClonedMessageData
aStack
)
;
child
:
async
InitGMPService
(
Endpoint
<
PGMPServiceChild
>
service
)
;
async
InitProcessHangMonitor
(
Endpoint
<
PProcessHangMonitorChild
>
hangMonitor
)
;
async
InitProfiler
(
Endpoint
<
PProfilerChild
>
aEndpoint
)
;
async
InitRendering
(
Endpoint
<
PCompositorManagerChild
>
compositor
Endpoint
<
PImageBridgeChild
>
imageBridge
Endpoint
<
PVRManagerChild
>
vr
Endpoint
<
PRemoteDecoderManagerChild
>
video
uint32_t
[
]
namespaces
)
;
async
ReinitRendering
(
Endpoint
<
PCompositorManagerChild
>
compositor
Endpoint
<
PImageBridgeChild
>
bridge
Endpoint
<
PVRManagerChild
>
vr
Endpoint
<
PRemoteDecoderManagerChild
>
video
uint32_t
[
]
namespaces
)
;
async
AudioDefaultDeviceChange
(
)
;
async
NetworkLinkTypeChange
(
uint32_t
type
)
;
async
ReinitRenderingForDeviceReset
(
)
;
async
SetProcessSandbox
(
FileDescriptor
?
aBroker
)
;
async
RequestMemoryReport
(
uint32_t
generation
bool
anonymize
bool
minimizeMemoryUsage
FileDescriptor
?
DMDFile
)
;
async
RequestPerformanceMetrics
(
nsID
aID
)
;
async
GetUntrustedModulesData
(
)
returns
(
UntrustedModulesData
?
data
)
;
async
BidiKeyboardNotify
(
bool
isLangRTL
bool
haveBidiKeyboards
)
;
async
PCycleCollectWithLogs
(
bool
dumpAllTraces
FileDescriptor
gcLog
FileDescriptor
ccLog
)
;
async
PTestShell
(
)
;
async
PScriptCache
(
FileDescOrError
cacheFile
bool
wantCacheData
)
;
async
RegisterChrome
(
ChromePackage
[
]
packages
SubstitutionMapping
[
]
substitutions
OverrideMapping
[
]
overrides
nsCString
locale
bool
reset
)
;
async
RegisterChromeItem
(
ChromeRegistryItem
item
)
;
async
ClearImageCache
(
bool
privateLoader
bool
chrome
)
;
async
SetOffline
(
bool
offline
)
;
async
SetConnectivity
(
bool
connectivity
)
;
async
SetCaptivePortalState
(
int32_t
aState
)
;
async
NotifyVisited
(
VisitedQueryResult
[
]
uri
)
;
async
ThemeChanged
(
LookAndFeelInt
[
]
lookAndFeelIntCache
)
;
async
PreferenceUpdate
(
Pref
pref
)
;
async
VarUpdate
(
GfxVarUpdate
var
)
;
async
UpdatePerfStatsCollectionMask
(
uint64_t
aMask
)
;
async
CollectPerfStatsJSON
(
)
returns
(
nsCString
aStats
)
;
async
DataStoragePut
(
nsString
aFilename
DataStorageItem
aItem
)
;
async
DataStorageRemove
(
nsString
aFilename
nsCString
aKey
DataStorageType
aType
)
;
async
DataStorageClear
(
nsString
aFilename
)
;
async
NotifyAlertsObserver
(
nsCString
topic
nsString
data
)
;
async
GeolocationUpdate
(
nsIDOMGeoPosition
aPosition
)
;
async
GeolocationError
(
uint16_t
errorCode
)
;
async
UpdateDictionaryList
(
nsString
[
]
dictionaries
)
;
async
UpdateFontList
(
SystemFontListEntry
[
]
fontList
)
;
async
RebuildFontList
(
)
;
async
FontListChanged
(
)
;
async
UpdateAppLocales
(
nsCString
[
]
appLocales
)
;
async
UpdateRequestedLocales
(
nsCString
[
]
requestedLocales
)
;
async
RegisterStringBundles
(
StringBundleDescriptor
[
]
stringBundles
)
;
async
UpdateSharedData
(
FileDescriptor
mapFile
uint32_t
aSize
IPCBlob
[
]
blobs
nsCString
[
]
changedKeys
)
;
async
AddPermission
(
Permission
permission
)
;
async
RemoveAllPermissions
(
)
;
async
FlushMemory
(
nsString
reason
)
;
async
GarbageCollect
(
)
;
async
CycleCollect
(
)
;
async
UnlinkGhosts
(
)
;
async
ActivateA11y
(
uint32_t
aMainChromeTid
uint32_t
aMsaaID
)
;
async
ShutdownA11y
(
)
;
async
AppInfo
(
nsCString
version
nsCString
buildID
nsCString
name
nsCString
UAName
nsCString
ID
nsCString
vendor
nsCString
sourceURL
nsCString
updateURL
)
;
async
RemoteType
(
nsString
aRemoteType
)
;
async
InitServiceWorkers
(
ServiceWorkerConfiguration
aConfig
)
;
async
InitBlobURLs
(
BlobURLRegistrationData
[
]
registrations
)
;
async
InitJSActorInfos
(
JSProcessActorInfo
[
]
aContentInfos
JSWindowActorInfo
[
]
aWindowInfos
)
;
async
UnregisterJSWindowActor
(
nsCString
name
)
;
async
UnregisterJSProcessActor
(
nsCString
name
)
;
async
SetXPCOMProcessAttributes
(
XPCOMInitData
xpcomInit
StructuredCloneData
initialData
LookAndFeelInt
[
]
lookAndFeelIntCache
SystemFontListEntry
[
]
systemFontList
SharedMemoryHandle
?
sharedUASheetHandle
uintptr_t
sharedUASheetAddress
SharedMemoryHandle
[
]
sharedFontListBlocks
)
;
async
LastPrivateDocShellDestroyed
(
)
;
async
NotifyProcessPriorityChanged
(
ProcessPriority
priority
)
;
async
MinimizeMemoryUsage
(
)
;
async
LoadAndRegisterSheet
(
nsIURI
uri
uint32_t
type
)
;
async
UnregisterSheet
(
nsIURI
uri
uint32_t
type
)
;
async
NotifyIdleObserver
(
uint64_t
observerId
nsCString
topic
nsString
str
)
;
async
InvokeDragSession
(
IPCDataTransfer
[
]
transfers
uint32_t
action
)
;
async
EndDragSession
(
bool
aDoneDrag
bool
aUserCancelled
LayoutDeviceIntPoint
aDragEndPoint
uint32_t
aKeyModifiers
)
;
async
DomainSetChanged
(
uint32_t
aSetType
uint32_t
aChangeType
nsIURI
aDomain
)
;
async
Shutdown
(
)
;
async
LoadProcessScript
(
nsString
url
)
;
async
UpdateWindow
(
uintptr_t
aChildId
)
;
async
NotifyPresentationReceiverLaunched
(
PBrowser
aIframe
nsString
aSessionId
)
;
async
NotifyPresentationReceiverCleanUp
(
nsString
aSessionId
)
;
async
NotifyEmptyHTTPCache
(
)
;
async
Push
(
nsCString
scope
Principal
principal
nsString
messageId
)
;
async
PushWithData
(
nsCString
scope
Principal
principal
nsString
messageId
uint8_t
[
]
data
)
;
async
PushSubscriptionChange
(
nsCString
scope
Principal
principal
)
;
async
GetFilesResponse
(
nsID
aID
GetFilesResponseResult
aResult
)
;
async
BlobURLRegistration
(
nsCString
aURI
IPCBlob
aBlob
Principal
aPrincipal
)
;
async
BlobURLUnregistration
(
nsCString
aURI
)
;
async
GMPsChanged
(
GMPCapabilityData
[
]
capabilities
)
;
async
Activate
(
PBrowser
aTab
)
;
async
Deactivate
(
PBrowser
aTab
)
;
async
PParentToChildStream
(
)
;
async
ProvideAnonymousTemporaryFile
(
uint64_t
aID
FileDescOrError
aFD
)
;
async
SetPermissionsWithKey
(
nsCString
aPermissionKey
Permission
[
]
aPermissions
)
;
async
RefreshScreens
(
ScreenDetails
[
]
aScreens
)
;
async
PIPCBlobInputStream
(
nsID
aID
uint64_t
aSize
)
;
async
SetPluginList
(
uint32_t
pluginEpoch
PluginTag
[
]
plugins
FakePluginTag
[
]
fakePlugins
)
;
async
ShareCodeCoverageMutex
(
CrossProcessMutexHandle
handle
)
;
async
FlushCodeCoverageCounters
(
)
returns
(
bool
unused
)
;
async
GetMemoryUniqueSetSize
(
)
returns
(
int64_t
uss
)
;
async
SetInputEventQueueEnabled
(
)
;
async
FlushInputEventQueue
(
)
;
async
ResumeInputEventQueue
(
)
;
prio
(
input
)
async
SuspendInputEventQueue
(
)
;
async
AddDynamicScalars
(
DynamicScalarDefinition
[
]
definitions
)
;
async
CrossProcessRedirect
(
RedirectToRealChannelArgs
args
Endpoint
<
PStreamFilterParent
>
[
]
aEndpoint
)
returns
(
nsresult
rv
)
;
async
StartDelayedAutoplayMediaComponents
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
UpdateMediaControlKeysEvent
(
MaybeDiscardedBrowsingContext
aContext
MediaControlKeysEvent
aEvent
)
;
async
RegisterBrowsingContextGroup
(
uint64_t
aGroupId
SyncedContextInitializer
[
]
aInits
)
;
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
async
InitSandboxTesting
(
Endpoint
<
PSandboxTestingChild
>
aEndpoint
)
;
#
endif
async
LoadURI
(
MaybeDiscardedBrowsingContext
aContext
nsDocShellLoadState
aLoadState
bool
aSetNavigating
)
returns
(
bool
aSuccess
)
;
async
InternalLoad
(
MaybeDiscardedBrowsingContext
aContext
nsDocShellLoadState
aLoadState
bool
aTakeFocus
)
;
async
DisplayLoadError
(
MaybeDiscardedBrowsingContext
aContext
nsString
aURI
)
;
async
OnAllowAccessFor
(
MaybeDiscardedBrowsingContext
aParentContext
nsCString
aTrackingOrigin
uint32_t
aCookieBehavior
StorageAccessGrantedReason
aReason
)
;
async
OnContentBlockingDecision
(
MaybeDiscardedBrowsingContext
aContext
BlockingDecision
aReason
uint32_t
aRejectedReason
)
;
async
AbortOrientationPendingPromises
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
HistoryCommitLength
(
MaybeDiscardedBrowsingContext
aContext
uint32_t
aLength
)
;
parent
:
async
InitBackground
(
Endpoint
<
PBackgroundParent
>
aEndpoint
)
;
async
CreateGMPService
(
)
;
async
InitStreamFilter
(
uint64_t
channelId
nsString
addonId
)
returns
(
Endpoint
<
PStreamFilterChild
>
aEndpoint
)
;
sync
LoadPlugin
(
uint32_t
aPluginId
)
returns
(
nsresult
aResult
uint32_t
aRunID
Endpoint
<
PPluginModuleParent
>
aEndpoint
)
;
sync
ConnectPluginBridge
(
uint32_t
aPluginId
)
returns
(
nsresult
rv
Endpoint
<
PPluginModuleParent
>
aEndpoint
)
;
sync
LaunchRDDProcess
(
)
returns
(
nsresult
rv
Endpoint
<
PRemoteDecoderManagerChild
>
aEndpoint
)
;
async
PRemoteSpellcheckEngine
(
)
;
async
InitCrashReporter
(
NativeThreadId
tid
)
;
sync
IsSecureURI
(
uint32_t
aType
nsIURI
aURI
uint32_t
aFlags
OriginAttributes
aOriginAttributes
)
returns
(
bool
isSecureURI
)
;
async
AccumulateMixedContentHSTS
(
nsIURI
aURI
bool
aActive
OriginAttributes
aOriginAttributes
)
;
nested
(
inside_cpow
)
async
PHal
(
)
;
async
PHeapSnapshotTempFileHelper
(
)
;
async
PNecko
(
)
;
async
PPrinting
(
)
;
async
PChildToParentStream
(
)
;
#
ifdef
MOZ_WEBSPEECH
async
PSpeechSynthesis
(
)
;
#
endif
async
PMedia
(
)
;
async
PWebrtcGlobal
(
)
;
async
PPresentation
(
)
;
async
CreateAudioIPCConnection
(
)
returns
(
FileDescOrError
fd
)
;
sync
PURLClassifier
(
Principal
principal
)
returns
(
bool
success
)
;
async
PURLClassifierLocal
(
nsIURI
uri
IPCURLClassifierFeature
[
]
features
)
;
async
PLoginReputation
(
nsIURI
formURI
)
;
async
PSessionStorageObserver
(
)
;
async
PBenchmarkStorage
(
)
;
async
StartVisitedQueries
(
nsIURI
[
]
uri
)
;
async
SetURITitle
(
nsIURI
uri
nsString
title
)
;
async
LoadURIExternal
(
nsIURI
uri
nsIPrincipal
triggeringPrincipal
MaybeDiscardedBrowsingContext
browsingContext
)
;
async
ExtProtocolChannelConnectParent
(
uint32_t
registrarId
)
;
sync
GetGfxVars
(
)
returns
(
GfxVarUpdate
[
]
vars
)
;
sync
SyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
returns
(
StructuredCloneData
[
]
retval
)
;
async
ShowAlert
(
nsIAlertNotification
alert
)
;
async
CloseAlert
(
nsString
name
Principal
principal
)
;
async
DisableNotifications
(
Principal
principal
)
;
async
OpenNotificationSettings
(
Principal
principal
)
;
async
AddMixedContentSecurityState
(
MaybeDiscardedWindowContext
aContext
uint32_t
aStateFlags
)
;
async
NotificationEvent
(
nsString
type
NotificationEventData
data
)
;
async
PExternalHelperApp
(
nsIURI
uri
LoadInfoArgs
?
loadInfoArgs
nsCString
aMimeContentType
nsCString
aContentDisposition
uint32_t
aContentDispositionHint
nsString
aContentDispositionFilename
bool
aForceSave
int64_t
aContentLength
bool
aWasFileChannel
nsIURI
aReferrer
MaybeDiscardedBrowsingContext
aContext
bool
aShouldCloseWindow
)
;
async
PHandlerService
(
)
;
async
AddGeolocationListener
(
Principal
principal
bool
highAccuracy
)
;
async
RemoveGeolocationListener
(
)
;
async
SetGeolocationHigherAccuracy
(
bool
enable
)
;
async
ConsoleMessage
(
nsString
message
)
;
async
ScriptErrorWithStack
(
nsString
message
nsString
sourceName
nsString
sourceLine
uint32_t
lineNumber
uint32_t
colNumber
uint32_t
flags
nsCString
category
bool
privateWindow
bool
fromChromeContext
ClonedMessageData
stack
)
;
async
SetClipboard
(
IPCDataTransfer
aDataTransfer
bool
aIsPrivateData
Principal
aRequestingPrincipal
uint32_t
aContentPolicyType
int32_t
aWhichClipboard
)
;
sync
GetClipboard
(
nsCString
[
]
aTypes
int32_t
aWhichClipboard
)
returns
(
IPCDataTransfer
dataTransfer
)
;
sync
GetExternalClipboardFormats
(
int32_t
aWhichClipboard
bool
aPlainTextOnly
)
returns
(
nsCString
[
]
aTypes
)
;
async
EmptyClipboard
(
int32_t
aWhichClipboard
)
;
sync
ClipboardHasType
(
nsCString
[
]
aTypes
int32_t
aWhichClipboard
)
returns
(
bool
hasType
)
;
async
PlaySound
(
nsIURI
aURL
)
compress
;
async
Beep
(
)
compress
;
async
PlayEventSound
(
uint32_t
aEventId
)
compress
;
sync
GetIconForExtension
(
nsCString
aFileExt
uint32_t
aIconSize
)
returns
(
uint8_t
[
]
bits
)
;
async
PrivateDocShellsExist
(
bool
aExist
)
;
async
FirstIdle
(
)
;
async
DeviceReset
(
)
;
sync
KeywordToURI
(
nsCString
keyword
bool
isPrivateContext
)
returns
(
nsString
providerName
nsIInputStream
postData
nsIURI
uri
)
;
sync
GetFixupURIInfo
(
nsCString
uriString
uint32_t
fixupflags
)
returns
(
nsString
providerName
nsIInputStream
postData
nsIURI
fixedURI
nsIURI
preferredURI
)
;
sync
NotifyKeywordSearchLoading
(
nsString
providerName
nsString
keyword
)
;
async
CopyFavicon
(
nsIURI
oldURI
nsIURI
newURI
Principal
aLoadingPrincipal
bool
isPrivate
)
;
async
RecordingDeviceEvents
(
nsString
recordingStatus
nsString
pageURL
bool
isAudio
bool
isVideo
)
;
async
GraphicsError
(
nsCString
aError
)
;
sync
BeginDriverCrashGuard
(
uint32_t
aGuardType
)
returns
(
bool
crashDetected
)
;
sync
EndDriverCrashGuard
(
uint32_t
aGuardType
)
;
async
AddIdleObserver
(
uint64_t
observerId
uint32_t
idleTimeInS
)
;
async
RemoveIdleObserver
(
uint64_t
observerId
uint32_t
idleTimeInS
)
;
async
BackUpXResources
(
FileDescriptor
aXSocketFd
)
;
async
RequestAnonymousTemporaryFile
(
uint64_t
aID
)
;
async
POfflineCacheUpdate
(
nsIURI
manifestURI
nsIURI
documentURI
PrincipalInfo
loadingPrincipal
bool
stickDocument
CookieJarSettingsArgs
cookieJarSettings
)
;
async
SetOfflinePermission
(
Principal
principal
)
;
async
FinishShutdown
(
)
;
async
UpdateDropEffect
(
uint32_t
aDragAction
uint32_t
aDropEffect
)
;
async
PContentPermissionRequest
(
PermissionRequest
[
]
aRequests
Principal
aPrincipal
Principal
aTopLevelPrincipal
bool
aIsHandlingUserInput
bool
aMaybeUnsafePermissionDelegate
TabId
tabId
)
;
async
ShutdownProfile
(
nsCString
aProfile
)
;
sync
GetGraphicsDeviceInitData
(
)
returns
(
ContentDeviceData
aData
)
;
sync
GetOutputColorProfileData
(
)
returns
(
uint8_t
[
]
aOutputColorProfileData
)
;
sync
GetFontListShmBlock
(
uint32_t
aGeneration
uint32_t
aIndex
)
returns
(
SharedMemoryHandle
aHandle
)
;
sync
InitializeFamily
(
uint32_t
aGeneration
uint32_t
aFamilyIndex
)
;
async
SetCharacterMap
(
uint32_t
aGeneration
Pointer
aFacePtr
gfxSparseBitSet
aMap
)
;
async
SetupFamilyCharMap
(
uint32_t
aGeneration
Pointer
aFamilyPtr
)
;
sync
InitOtherFamilyNames
(
uint32_t
aGeneration
bool
aDefer
)
returns
(
bool
aLoaded
)
;
sync
GetHyphDict
(
nsIURI
aURI
)
returns
(
Handle
aHandle
uint32_t
aSize
)
;
async
CreateWindow
(
PBrowser
aThisTab
MaybeDiscardedBrowsingContext
aParent
PBrowser
aNewTab
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aWidthSpecified
nsIURI
aURIToLoad
nsCString
aFeatures
float
aFullZoom
Principal
aTriggeringPrincipal
nsIContentSecurityPolicy
aCsp
nsIReferrerInfo
aReferrerInfo
OriginAttributes
aOriginAttributes
)
returns
(
CreatedWindowInfo
window
)
;
async
CreateWindowInDifferentProcess
(
PBrowser
aThisTab
MaybeDiscardedBrowsingContext
aParent
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aWidthSpecified
nsIURI
aURIToLoad
nsCString
aFeatures
float
aFullZoom
nsString
aName
nsIPrincipal
aTriggeringPrincipal
nsIContentSecurityPolicy
aCsp
nsIReferrerInfo
aReferrerInfo
OriginAttributes
aOriginAttributes
)
;
sync
UngrabPointer
(
uint32_t
time
)
;
sync
RemovePermission
(
Principal
principal
nsCString
permissionType
)
returns
(
nsresult
rv
)
;
async
NotifyBenchmarkResult
(
nsString
aCodecName
uint32_t
aDecodeFPS
)
;
async
NotifyPushObservers
(
nsCString
scope
Principal
principal
nsString
messageId
)
;
async
NotifyPushObserversWithData
(
nsCString
scope
Principal
principal
nsString
messageId
uint8_t
[
]
data
)
;
async
NotifyPushSubscriptionChangeObservers
(
nsCString
scope
Principal
principal
)
;
async
GetFilesRequest
(
nsID
aID
nsString
aDirectory
bool
aRecursiveFlag
)
;
async
DeleteGetFilesRequest
(
nsID
aID
)
;
async
StoreAndBroadcastBlobURLRegistration
(
nsCString
url
IPCBlob
blob
Principal
principal
)
;
async
UnstoreAndBroadcastBlobURLUnregistration
(
nsCString
url
Principal
principal
)
;
async
AccumulateChildHistograms
(
HistogramAccumulation
[
]
accumulations
)
;
async
AccumulateChildKeyedHistograms
(
KeyedHistogramAccumulation
[
]
accumulations
)
;
async
UpdateChildScalars
(
ScalarAction
[
]
updates
)
;
async
UpdateChildKeyedScalars
(
KeyedScalarAction
[
]
updates
)
;
async
RecordChildEvents
(
ChildEventData
[
]
events
)
;
async
RecordDiscardedData
(
DiscardedData
data
)
;
sync
GetA11yContentId
(
)
returns
(
uint32_t
aContentId
)
;
async
A11yHandlerControl
(
uint32_t
aPid
IHandlerControlHolder
aHandlerControl
)
;
async
AddMemoryReport
(
MemoryReport
aReport
)
;
async
FinishMemoryReport
(
uint32_t
aGeneration
)
;
async
MaybeReloadPlugins
(
)
;
async
BHRThreadHang
(
HangDetails
aHangDetails
)
;
async
AddPerformanceMetrics
(
nsID
aID
PerformanceInfo
[
]
aMetrics
)
;
async
AddCertException
(
nsCString
aSerializedCert
uint32_t
aFlags
nsCString
aHostName
int32_t
aPort
bool
aIsTemporary
)
returns
(
nsresult
success
)
;
async
AutomaticStorageAccessCanBeGranted
(
Principal
aPrincipal
)
returns
(
bool
success
)
;
async
FirstPartyStorageAccessGrantedForOrigin
(
uint64_t
aTopLevelWindowId
MaybeDiscardedBrowsingContext
aParentContext
Principal
aTrackingPrincipal
nsCString
aTrackingOrigin
int
aAllowMode
)
returns
(
bool
unused
)
;
async
CompleteAllowAccessFor
(
MaybeDiscardedBrowsingContext
aParentContext
uint64_t
aTopLevelWindowId
Principal
aTrackingPrincipal
nsCString
aTrackingOrigin
uint32_t
aCookieBehavior
StorageAccessGrantedReason
aReason
)
returns
(
StorageAccessPromptChoices
?
choice
)
;
async
StoreUserInteractionAsPermission
(
Principal
aPrincipal
)
;
async
NotifyMediaPlaybackChanged
(
MaybeDiscardedBrowsingContext
aContext
MediaPlaybackState
aState
)
;
async
NotifyMediaAudibleChanged
(
MaybeDiscardedBrowsingContext
aContext
MediaAudibleState
aState
)
;
async
NotifyPictureInPictureModeChanged
(
MaybeDiscardedBrowsingContext
aContext
bool
aEnabled
)
;
async
NotifyMediaSessionUpdated
(
MaybeDiscardedBrowsingContext
aContext
bool
aIsCreated
)
;
async
NotifyUpdateMediaMetadata
(
MaybeDiscardedBrowsingContext
aContext
MaybeMediaMetadataBase
aMetadata
)
;
async
NotifyMediaSessionPlaybackStateChanged
(
MaybeDiscardedBrowsingContext
aContext
MediaSessionPlaybackState
aMetadata
)
;
async
GetModulesTrust
(
ModulePaths
aModPaths
bool
aRunAtNormalPriority
)
returns
(
ModulesMapResult
?
modMapResult
)
;
async
ReportServiceWorkerShutdownProgress
(
uint32_t
aShutdownStateId
Progress
aProgress
)
;
async
AbortOtherOrientationPendingPromises
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
HistoryCommit
(
MaybeDiscardedBrowsingContext
aContext
uint64_t
aSessionHistoryEntryID
)
;
async
HistoryGo
(
MaybeDiscardedBrowsingContext
aContext
int32_t
aOffset
)
returns
(
int32_t
requestedIndex
)
;
both
:
async
ScriptError
(
nsString
message
nsString
sourceName
nsString
sourceLine
uint32_t
lineNumber
uint32_t
colNumber
uint32_t
flags
nsCString
category
bool
privateWindow
uint64_t
innerWindowId
bool
fromChromeContext
)
;
async
CommitBrowsingContextTransaction
(
MaybeDiscardedBrowsingContext
aContext
BrowsingContextTransaction
aTransaction
uint64_t
aEpoch
)
;
async
AsyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
;
async
NotifyPushSubscriptionModifiedObservers
(
nsCString
scope
Principal
principal
)
;
async
PushError
(
nsCString
scope
Principal
principal
nsString
message
uint32_t
flags
)
;
async
CreateBrowsingContext
(
uint64_t
aGroupId
BrowsingContextInitializer
aInit
)
;
async
DiscardBrowsingContext
(
MaybeDiscardedBrowsingContext
aContext
)
returns
(
bool
unused
)
;
async
AdjustWindowFocus
(
MaybeDiscardedBrowsingContext
aContext
bool
aCheckPermission
bool
aIsVisible
)
;
async
WindowClose
(
MaybeDiscardedBrowsingContext
aContext
bool
aTrustedCaller
)
;
async
WindowFocus
(
MaybeDiscardedBrowsingContext
aContext
CallerType
aCallerType
)
;
async
WindowBlur
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
RaiseWindow
(
MaybeDiscardedBrowsingContext
aContext
CallerType
aCallerType
)
;
async
ClearFocus
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
SetFocusedBrowsingContext
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
SetActiveBrowsingContext
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
UnsetActiveBrowsingContext
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
SetFocusedElement
(
MaybeDiscardedBrowsingContext
aContext
bool
aNeedsFocus
)
;
parent
:
async
BlurToParent
(
MaybeDiscardedBrowsingContext
aFocusedBrowsingContext
MaybeDiscardedBrowsingContext
aBrowsingContextToClear
MaybeDiscardedBrowsingContext
aAncestorBrowsingContextToFocus
bool
aIsLeavingDocument
bool
aAdjustWidget
bool
aBrowsingContextToClearHandled
bool
aAncestorBrowsingContextToFocusHandled
)
;
child
:
async
BlurToChild
(
MaybeDiscardedBrowsingContext
aFocusedBrowsingContext
MaybeDiscardedBrowsingContext
aBrowsingContextToClear
MaybeDiscardedBrowsingContext
aAncestorBrowsingContextToFocus
bool
aIsLeavingDocument
bool
aAdjustWidget
)
;
async
SetupFocusedAndActive
(
MaybeDiscardedBrowsingContext
aFocusedBrowsingContext
MaybeDiscardedBrowsingContext
aActiveBrowsingContext
)
;
both
:
async
MaybeExitFullscreen
(
MaybeDiscardedBrowsingContext
aContext
)
;
async
WindowPostMessage
(
MaybeDiscardedBrowsingContext
aContext
ClonedOrErrorMessageData
aMessage
PostMessageData
aData
)
;
async
SessionStorageData
(
uint64_t
aTopContextId
nsCString
aOriginAttrs
nsCString
aOriginKey
KeyValuePair
[
]
aDefaultData
KeyValuePair
[
]
aSessionData
)
;
async
CommitWindowContextTransaction
(
MaybeDiscardedWindowContext
aContext
WindowContextTransaction
aTransaction
uint64_t
aEpoch
)
;
child
:
async
CreateWindowContext
(
WindowContextInitializer
aInit
)
;
async
DiscardWindowContext
(
uint64_t
aContextId
)
returns
(
bool
unused
)
;
}
;
}
}
