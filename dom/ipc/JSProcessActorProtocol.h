#
ifndef
mozilla_dom_JSProcessActorProtocol_h
#
define
mozilla_dom_JSProcessActorProtocol_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIObserver
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
ProcessActorOptions
;
class
JSProcessActorInfo
;
class
EventTarget
;
class
JSProcessActorProtocol
final
:
public
nsIObserver
{
public
:
NS_DECL_NSIOBSERVER
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
JSProcessActorProtocol
nsIObserver
)
static
already_AddRefed
<
JSProcessActorProtocol
>
FromIPC
(
const
JSProcessActorInfo
&
aInfo
)
;
JSProcessActorInfo
ToIPC
(
)
;
static
already_AddRefed
<
JSProcessActorProtocol
>
FromWebIDLOptions
(
const
nsACString
&
aName
const
ProcessActorOptions
&
aOptions
ErrorResult
&
aRv
)
;
struct
Sided
{
Maybe
<
nsCString
>
mModuleURI
;
}
;
struct
ParentSide
:
public
Sided
{
}
;
struct
ChildSide
:
public
Sided
{
nsTArray
<
nsCString
>
mObservers
;
}
;
const
ParentSide
&
Parent
(
)
const
{
return
mParent
;
}
const
ChildSide
&
Child
(
)
const
{
return
mChild
;
}
void
AddObservers
(
)
;
void
RemoveObservers
(
)
;
bool
Matches
(
const
nsAString
&
aRemoteType
)
;
private
:
explicit
JSProcessActorProtocol
(
const
nsACString
&
aName
)
:
mName
(
aName
)
{
}
bool
RemoteTypePrefixMatches
(
const
nsDependentSubstring
&
aRemoteType
)
;
~
JSProcessActorProtocol
(
)
=
default
;
nsCString
mName
;
nsTArray
<
nsString
>
mRemoteTypes
;
ParentSide
mParent
;
ChildSide
mChild
;
}
;
}
}
#
endif
