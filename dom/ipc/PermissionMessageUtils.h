#
ifndef
mozilla_dom_permission_message_utils_h__
#
define
mozilla_dom_permission_message_utils_h__
#
include
"
mozilla
/
ipc
/
IPDLParamTraits
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIPrincipal
.
h
"
namespace
IPC
{
class
Principal
{
friend
struct
mozilla
:
:
ipc
:
:
IPDLParamTraits
<
Principal
>
;
public
:
Principal
(
)
=
default
;
explicit
Principal
(
nsIPrincipal
*
aPrincipal
)
:
mPrincipal
(
aPrincipal
)
{
}
operator
nsIPrincipal
*
(
)
const
{
return
mPrincipal
.
get
(
)
;
}
Principal
&
operator
=
(
const
Principal
&
aOther
)
=
delete
;
private
:
RefPtr
<
nsIPrincipal
>
mPrincipal
;
}
;
}
namespace
mozilla
{
namespace
ipc
{
template
<
>
struct
IPDLParamTraits
<
nsIPrincipal
*
>
{
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
nsIPrincipal
*
aParam
)
;
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
RefPtr
<
nsIPrincipal
>
*
aResult
)
;
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
nsCOMPtr
<
nsIPrincipal
>
*
aResult
)
{
RefPtr
<
nsIPrincipal
>
result
;
if
(
!
Read
(
aReader
aActor
&
result
)
)
{
return
false
;
}
*
aResult
=
std
:
:
move
(
result
)
;
return
true
;
}
}
;
template
<
>
struct
IPDLParamTraits
<
IPC
:
:
Principal
>
{
typedef
IPC
:
:
Principal
paramType
;
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
const
paramType
&
aParam
)
{
WriteIPDLParam
(
aWriter
aActor
aParam
.
mPrincipal
)
;
}
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
paramType
*
aResult
)
{
return
ReadIPDLParam
(
aReader
aActor
&
aResult
-
>
mPrincipal
)
;
}
}
;
}
}
#
endif
