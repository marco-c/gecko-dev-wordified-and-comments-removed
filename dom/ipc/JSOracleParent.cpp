#
include
"
mozilla
/
dom
/
JSOracleParent
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PJSOracle
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessManager
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
static
StaticRefPtr
<
JSOracleParent
>
sOracleSingleton
;
void
JSOracleParent
:
:
WithJSOracle
(
const
std
:
:
function
<
void
(
JSOracleParent
*
aParent
)
>
&
aCallback
)
{
GetSingleton
(
)
-
>
StartJSOracle
(
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
aCallback
]
(
const
JSOraclePromise
:
:
ResolveOrRejectValue
&
aResult
)
{
aCallback
(
aResult
.
IsReject
(
)
|
|
!
aResult
.
ResolveValue
(
)
?
nullptr
:
GetSingleton
(
)
)
;
}
)
;
}
void
JSOracleParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
}
JSOracleParent
*
JSOracleParent
:
:
GetSingleton
(
)
{
if
(
!
sOracleSingleton
)
{
sOracleSingleton
=
new
JSOracleParent
(
)
;
ClearOnShutdown
(
&
sOracleSingleton
)
;
}
return
sOracleSingleton
;
}
RefPtr
<
JSOracleParent
:
:
JSOraclePromise
>
JSOracleParent
:
:
StartJSOracle
(
)
{
using
namespace
mozilla
:
:
ipc
;
RefPtr
<
JSOracleParent
>
parent
=
JSOracleParent
:
:
GetSingleton
(
)
;
return
UtilityProcessManager
:
:
GetSingleton
(
)
-
>
StartJSOracle
(
parent
)
;
}
nsresult
JSOracleParent
:
:
BindToUtilityProcess
(
const
RefPtr
<
mozilla
:
:
ipc
:
:
UtilityProcessParent
>
&
aUtilityParent
)
{
Endpoint
<
PJSOracleParent
>
parentEnd
;
Endpoint
<
PJSOracleChild
>
childEnd
;
MOZ_ASSERT
(
aUtilityParent
)
;
if
(
NS_FAILED
(
PJSOracle
:
:
CreateEndpoints
(
base
:
:
GetCurrentProcId
(
)
aUtilityParent
-
>
OtherPid
(
)
&
parentEnd
&
childEnd
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
aUtilityParent
-
>
SendStartJSOracleService
(
std
:
:
move
(
childEnd
)
)
)
{
return
NS_ERROR_FAILURE
;
}
Bind
(
std
:
:
move
(
parentEnd
)
)
;
return
NS_OK
;
}
void
JSOracleParent
:
:
Bind
(
Endpoint
<
PJSOracleParent
>
&
&
aEndpoint
)
{
DebugOnly
<
bool
>
ok
=
aEndpoint
.
Bind
(
this
)
;
MOZ_ASSERT
(
ok
)
;
}
