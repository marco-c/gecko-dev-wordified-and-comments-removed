#
include
"
mozilla
/
dom
/
ContentBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
BlobChild
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
mozilla
/
ipc
/
InputStreamUtils
.
h
"
#
include
"
base
/
task
.
h
"
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
jsipc
;
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
ContentBridgeChild
nsIContentChild
)
ContentBridgeChild
:
:
ContentBridgeChild
(
Transport
*
aTransport
)
:
mTransport
(
aTransport
)
{
}
ContentBridgeChild
:
:
~
ContentBridgeChild
(
)
{
RefPtr
<
DeleteTask
<
Transport
>
>
task
=
new
DeleteTask
<
Transport
>
(
mTransport
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
task
.
forget
(
)
)
;
}
void
ContentBridgeChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
ContentBridgeChild
:
:
DeferredDestroy
)
)
;
}
ContentBridgeChild
*
ContentBridgeChild
:
:
Create
(
Transport
*
aTransport
ProcessId
aOtherPid
)
{
RefPtr
<
ContentBridgeChild
>
bridge
=
new
ContentBridgeChild
(
aTransport
)
;
bridge
-
>
mSelfRef
=
bridge
;
DebugOnly
<
bool
>
ok
=
bridge
-
>
Open
(
aTransport
aOtherPid
XRE_GetIOMessageLoop
(
)
)
;
MOZ_ASSERT
(
ok
)
;
return
bridge
;
}
void
ContentBridgeChild
:
:
DeferredDestroy
(
)
{
mSelfRef
=
nullptr
;
}
bool
ContentBridgeChild
:
:
RecvAsyncMessage
(
const
nsString
&
aMsg
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
{
return
nsIContentChild
:
:
RecvAsyncMessage
(
aMsg
Move
(
aCpows
)
aPrincipal
aData
)
;
}
PBlobChild
*
ContentBridgeChild
:
:
SendPBlobConstructor
(
PBlobChild
*
actor
const
BlobConstructorParams
&
params
)
{
return
PContentBridgeChild
:
:
SendPBlobConstructor
(
actor
params
)
;
}
bool
ContentBridgeChild
:
:
SendPBrowserConstructor
(
PBrowserChild
*
aActor
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForApp
const
bool
&
aIsForBrowser
)
{
return
PContentBridgeChild
:
:
SendPBrowserConstructor
(
aActor
aTabId
aContext
aChromeFlags
aCpID
aIsForApp
aIsForBrowser
)
;
}
jsipc
:
:
CPOWManager
*
ContentBridgeChild
:
:
GetCPOWManager
(
)
{
if
(
PJavaScriptChild
*
c
=
LoneManagedOrNullAsserts
(
ManagedPJavaScriptChild
(
)
)
)
{
return
CPOWManagerFor
(
c
)
;
}
return
CPOWManagerFor
(
SendPJavaScriptConstructor
(
)
)
;
}
mozilla
:
:
jsipc
:
:
PJavaScriptChild
*
ContentBridgeChild
:
:
AllocPJavaScriptChild
(
)
{
return
nsIContentChild
:
:
AllocPJavaScriptChild
(
)
;
}
bool
ContentBridgeChild
:
:
DeallocPJavaScriptChild
(
PJavaScriptChild
*
child
)
{
return
nsIContentChild
:
:
DeallocPJavaScriptChild
(
child
)
;
}
PBrowserChild
*
ContentBridgeChild
:
:
AllocPBrowserChild
(
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForApp
const
bool
&
aIsForBrowser
)
{
return
nsIContentChild
:
:
AllocPBrowserChild
(
aTabId
aContext
aChromeFlags
aCpID
aIsForApp
aIsForBrowser
)
;
}
bool
ContentBridgeChild
:
:
DeallocPBrowserChild
(
PBrowserChild
*
aChild
)
{
return
nsIContentChild
:
:
DeallocPBrowserChild
(
aChild
)
;
}
bool
ContentBridgeChild
:
:
RecvPBrowserConstructor
(
PBrowserChild
*
aActor
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForApp
const
bool
&
aIsForBrowser
)
{
return
ContentChild
:
:
GetSingleton
(
)
-
>
RecvPBrowserConstructor
(
aActor
aTabId
aContext
aChromeFlags
aCpID
aIsForApp
aIsForBrowser
)
;
}
PBlobChild
*
ContentBridgeChild
:
:
AllocPBlobChild
(
const
BlobConstructorParams
&
aParams
)
{
return
nsIContentChild
:
:
AllocPBlobChild
(
aParams
)
;
}
bool
ContentBridgeChild
:
:
DeallocPBlobChild
(
PBlobChild
*
aActor
)
{
return
nsIContentChild
:
:
DeallocPBlobChild
(
aActor
)
;
}
}
}
