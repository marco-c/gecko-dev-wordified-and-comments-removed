#
include
"
VsyncWorkerChild
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRef
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
namespace
mozilla
:
:
dom
{
VsyncWorkerChild
:
:
VsyncWorkerChild
(
)
=
default
;
VsyncWorkerChild
:
:
~
VsyncWorkerChild
(
)
=
default
;
bool
VsyncWorkerChild
:
:
Initialize
(
WorkerPrivate
*
aWorkerPrivate
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
MOZ_ASSERT
(
!
mWorkerRef
)
;
mWorkerRef
=
IPCWorkerRef
:
:
Create
(
aWorkerPrivate
"
VsyncWorkerChild
"
[
self
=
RefPtr
{
this
}
]
(
)
{
self
-
>
Destroy
(
)
;
}
)
;
return
!
!
mWorkerRef
;
}
void
VsyncWorkerChild
:
:
Destroy
(
)
{
MOZ_ASSERT_IF
(
!
CanSend
(
)
!
mWorkerRef
)
;
MOZ_ASSERT_IF
(
!
CanSend
(
)
!
mObserving
)
;
Send__delete__
(
this
)
;
MOZ_ASSERT
(
!
mWorkerRef
)
;
MOZ_ASSERT
(
!
mObserving
)
;
}
void
VsyncWorkerChild
:
:
TryObserve
(
)
{
if
(
CanSend
(
)
&
&
!
mObserving
)
{
mObserving
=
SendObserve
(
)
;
}
}
void
VsyncWorkerChild
:
:
TryUnobserve
(
)
{
if
(
CanSend
(
)
&
&
mObserving
)
{
mObserving
=
!
SendUnobserve
(
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
VsyncWorkerChild
:
:
RecvNotify
(
const
VsyncEvent
&
aVsync
const
float
&
aVsyncRate
)
{
WorkerPrivate
*
workerPrivate
=
mWorkerRef
-
>
Private
(
)
;
WorkerGlobalScope
*
scope
=
workerPrivate
-
>
GlobalScope
(
)
;
if
(
scope
)
{
scope
-
>
OnVsync
(
aVsync
)
;
}
return
IPC_OK
(
)
;
}
void
VsyncWorkerChild
:
:
ActorDestroy
(
ActorDestroyReason
aActorDestroyReason
)
{
mWorkerRef
=
nullptr
;
mObserving
=
false
;
}
}
