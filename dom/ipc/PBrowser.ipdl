include
protocol
PColorPicker
;
include
protocol
PContent
;
#
ifdef
ACCESSIBILITY
include
protocol
PDocAccessible
;
#
endif
include
protocol
PFilePicker
;
include
protocol
PRemotePrintJob
;
include
protocol
PChildToParentStream
;
include
protocol
PParentToChildStream
;
include
protocol
PFileDescriptorSet
;
include
protocol
PRemoteLazyInputStream
;
include
protocol
PPaymentRequest
;
include
protocol
PWindowGlobal
;
include
protocol
PBrowserBridge
;
include
protocol
PVsync
;
include
DOMTypes
;
include
NeckoChannelParams
;
include
WindowGlobalTypes
;
include
IPCBlob
;
include
IPCStream
;
include
URIParams
;
include
PPrintingTypes
;
include
PTabContext
;
include
PBackgroundSharedTypes
;
include
"
mozilla
/
AntiTrackingIPCUtils
.
h
"
;
include
"
mozilla
/
dom
/
BindingIPCUtils
.
h
"
;
include
"
mozilla
/
dom
/
CSPMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
DocShellMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
include
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
LayoutMessageUtils
.
h
"
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
include
"
mozilla
/
ipc
/
TransportSecurityInfoUtils
.
h
"
;
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
;
using
mozilla
:
:
gfx
:
:
Matrix4x4
from
"
mozilla
/
gfx
/
Matrix
.
h
"
;
using
mozilla
:
:
gfx
:
:
SurfaceFormat
from
"
mozilla
/
gfx
/
Types
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntPoint
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDevicePoint
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntCoord
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntMargin
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntPoint
from
"
Units
.
h
"
;
using
ScreenRect
from
"
Units
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ScrollableLayerGuid
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ZoomConstraints
from
"
mozilla
/
layers
/
ZoomConstraints
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersObserverEpoch
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
GeckoContentController_TapType
from
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
;
using
ScrollableLayerGuid
:
:
ViewID
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
struct
mozilla
:
:
void_t
from
"
mozilla
/
ipc
/
IPCCore
.
h
"
;
using
mozilla
:
:
WindowsHandle
from
"
mozilla
/
ipc
/
IPCTypes
.
h
"
;
using
class
mozilla
:
:
WidgetCompositionEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMENotification
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMENotificationRequests
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMEState
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
InputContext
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
InputContextAction
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntSize
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntPoint
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
class
mozilla
:
:
ContentCache
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetKeyboardEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetMouseEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetWheelEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetDragEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
nsRect
from
"
nsRect
.
h
"
;
using
class
mozilla
:
:
WidgetSelectionEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetTouchEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
mozilla
:
:
dom
:
:
RemoteDOMEvent
from
"
mozilla
/
dom
/
TabMessageTypes
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
TextureFactoryIdentifier
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositorOptions
from
"
mozilla
/
layers
/
CompositorOptions
.
h
"
;
using
mozilla
:
:
CSSToScreenScale
from
"
Units
.
h
"
;
using
mozilla
:
:
CommandInt
from
"
mozilla
/
EventForwards
.
h
"
;
using
nsIWidget
:
:
TouchPointerState
from
"
nsIWidget
.
h
"
;
using
nsIWidget
:
:
TouchpadGesturePhase
from
"
nsIWidget
.
h
"
;
using
nsCursor
from
"
nsIWidget
.
h
"
;
using
struct
LookAndFeelInt
from
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
;
using
class
mozilla
:
:
dom
:
:
MessagePort
from
"
mozilla
/
dom
/
MessagePort
.
h
"
;
using
class
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
from
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeDiscardedWindowContext
from
"
mozilla
/
dom
/
WindowContext
.
h
"
;
using
mozilla
:
:
EventMessage
from
"
mozilla
/
EventForwards
.
h
"
;
using
nsEventStatus
from
"
mozilla
/
EventForwards
.
h
"
;
using
mozilla
:
:
Modifiers
from
"
mozilla
/
EventForwards
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
CandidateWindowPosition
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
NativeEventData
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
mozilla
:
:
FontRange
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
mozilla
:
:
a11y
:
:
IAccessibleHolder
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
OriginAttributes
from
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
;
using
mozilla
:
:
dom
:
:
EffectsInfo
from
"
mozilla
/
dom
/
EffectsInfo
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
ScrollAxis
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
mozilla
:
:
ScrollFlags
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
struct
InputFormData
from
"
mozilla
/
dom
/
SessionStoreMessageUtils
.
h
"
;
using
struct
CollectedInputDataValue
from
"
mozilla
/
dom
/
SessionStoreMessageUtils
.
h
"
;
using
mozilla
:
:
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
from
"
mozilla
/
ContentBlockingNotifier
.
h
"
;
using
CallerType
from
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
;
using
mozilla
:
:
dom
:
:
EmbedderElementEventType
from
"
mozilla
/
dom
/
TabMessageTypes
.
h
"
;
[
RefCounted
]
using
class
nsDocShellLoadState
from
"
nsDocShellLoadState
.
h
"
;
using
mozilla
:
:
IntrinsicSize
from
"
nsIFrame
.
h
"
;
using
mozilla
:
:
AspectRatio
from
"
mozilla
/
AspectRatio
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
WebProgressData
{
MaybeDiscardedBrowsingContext
browsingContext
;
uint32_t
loadType
;
}
;
struct
RequestData
{
nsIURI
requestURI
;
nsIURI
originalRequestURI
;
nsCString
matchedList
;
}
;
struct
WebProgressStateChangeData
{
bool
isNavigating
;
bool
mayEnableCharacterEncodingMenu
;
nsString
contentType
;
nsString
charset
;
nsIURI
documentURI
;
}
;
struct
WebProgressLocationChangeData
{
bool
isNavigating
;
bool
isSyntheticDocument
;
bool
mayEnableCharacterEncodingMenu
;
nsString
contentType
;
nsString
title
;
nsString
charset
;
nsIURI
documentURI
;
nsIPrincipal
contentPrincipal
;
nsIPrincipal
contentPartitionedPrincipal
;
nsIContentSecurityPolicy
csp
;
nsIReferrerInfo
referrerInfo
;
uint64_t
?
requestContextID
;
}
;
struct
PrintPreviewResultInfo
{
uint32_t
sheetCount
;
uint32_t
totalPageCount
;
bool
isEmpty
;
bool
hasSelection
;
bool
hasSelfSelection
;
bool
?
printLandscape
;
}
;
[
NestedUpTo
=
inside_cpow
]
sync
protocol
PBrowser
{
manager
PContent
;
manages
PColorPicker
;
#
ifdef
ACCESSIBILITY
manages
PDocAccessible
;
#
endif
manages
PFilePicker
;
manages
PPaymentRequest
;
manages
PWindowGlobal
;
manages
PBrowserBridge
;
manages
PVsync
;
both
:
async
AsyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
;
parent
:
#
ifdef
ACCESSIBILITY
async
PDocAccessible
(
nullable
PDocAccessible
aParentDoc
uint64_t
aParentAcc
uint32_t
aMsaaID
IAccessibleHolder
aDocCOMProxy
)
;
#
endif
async
PPaymentRequest
(
)
;
async
PVsync
(
)
;
sync
DispatchFocusToTopLevelWindow
(
)
;
[
Priority
=
control
]
async
DidUnsuppressPainting
(
)
;
async
DidUnsuppressPaintingNormalPriority
(
)
;
async
MoveFocus
(
bool
forward
bool
forDocumentNavigation
)
;
async
SizeShellTo
(
uint32_t
aFlag
int32_t
aWidth
int32_t
aHeight
int32_t
aShellItemWidth
int32_t
aShellItemHeight
)
;
async
DropLinks
(
nsString
[
]
aLinks
)
;
async
Event
(
RemoteDOMEvent
aEvent
)
;
sync
SyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
returns
(
StructuredCloneData
[
]
retval
)
;
[
Nested
=
inside_cpow
]
async
NotifyIMEFocus
(
ContentCache
contentCache
IMENotification
notification
)
returns
(
IMENotificationRequests
requests
)
;
[
Nested
=
inside_cpow
]
async
NotifyIMETextChange
(
ContentCache
contentCache
IMENotification
notification
)
;
[
Nested
=
inside_cpow
]
async
NotifyIMECompositionUpdate
(
ContentCache
contentCache
IMENotification
notification
)
;
[
Nested
=
inside_cpow
]
async
NotifyIMESelection
(
ContentCache
contentCache
IMENotification
notification
)
;
[
Nested
=
inside_cpow
]
async
UpdateContentCache
(
ContentCache
contentCache
)
;
[
Nested
=
inside_cpow
]
sync
NotifyIMEMouseButtonEvent
(
IMENotification
notification
)
returns
(
bool
consumedByIME
)
;
[
Nested
=
inside_cpow
]
async
NotifyIMEPositionChange
(
ContentCache
contentCache
IMENotification
notification
)
;
[
Nested
=
inside_cpow
]
sync
RequestIMEToCommitComposition
(
bool
cancel
)
returns
(
bool
isCommitted
nsString
committedString
)
;
[
Nested
=
inside_cpow
]
async
OnEventNeedingAckHandled
(
EventMessage
message
)
;
async
RequestFocus
(
bool
canRaise
CallerType
aCallerType
)
;
async
WheelZoomChange
(
bool
increase
)
;
async
EnableDisableCommands
(
MaybeDiscardedBrowsingContext
bc
nsString
action
nsCString
[
]
enabledCommands
nsCString
[
]
disabledCommands
)
;
[
Nested
=
inside_cpow
]
sync
GetInputContext
(
)
returns
(
IMEState
state
)
;
[
Nested
=
inside_cpow
]
async
SetInputContext
(
InputContext
context
InputContextAction
action
)
;
async
SetCursor
(
nsCursor
value
bool
hasCustomCursor
nsCString
customCursorData
uint32_t
width
uint32_t
height
float
resolutionX
float
resolutionY
uint32_t
stride
SurfaceFormat
format
uint32_t
hotspotX
uint32_t
hotspotY
bool
force
)
;
async
SetLinkStatus
(
nsString
status
)
;
async
ShowTooltip
(
uint32_t
x
uint32_t
y
nsString
tooltip
nsString
direction
)
;
async
HideTooltip
(
)
;
async
PColorPicker
(
nsString
title
nsString
initialColor
)
;
async
PFilePicker
(
nsString
aTitle
int16_t
aMode
)
;
async
IndexedDBPermissionRequest
(
nsIPrincipal
aPrincipal
)
returns
(
uint32_t
permission
)
;
async
RespondStartSwipeEvent
(
uint64_t
aInputBlockId
bool
aStartSwipe
)
;
async
LookUpDictionary
(
nsString
aText
FontRange
[
]
aFontRangeArray
bool
aIsVertical
LayoutDeviceIntPoint
aPoint
)
;
async
__delete__
(
)
;
async
ReplyKeyEvent
(
WidgetKeyboardEvent
event
)
;
sync
RequestNativeKeyBindings
(
uint32_t
aType
WidgetKeyboardEvent
aEvent
)
returns
(
CommandInt
[
]
commands
)
;
async
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
nsString
aCharacters
nsString
aUnmodifiedCharacters
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
int16_t
aButton
uint32_t
aModifierFlags
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
uint64_t
aObserverId
)
;
async
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
uint64_t
aObserverId
)
;
async
SynthesizeNativeTouchPadPinch
(
TouchpadGesturePhase
aEventPhase
float
aScale
LayoutDeviceIntPoint
aPoint
int32_t
aModifierFlags
)
;
async
SynthesizeNativeTouchTap
(
LayoutDeviceIntPoint
aPoint
bool
aLongTap
uint64_t
aObserverId
)
;
async
ClearNativeTouchSequence
(
uint64_t
aObserverId
)
;
async
SynthesizeNativePenInput
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPressure
uint32_t
aRotation
int32_t
aTiltX
int32_t
aTiltY
int32_t
aButton
uint64_t
aObserverId
)
;
async
SynthesizeNativeTouchpadDoubleTap
(
LayoutDeviceIntPoint
aPoint
uint32_t
aModifierFlags
)
;
async
SynthesizeNativeTouchpadPan
(
TouchpadGesturePhase
aEventPhase
LayoutDeviceIntPoint
aPoint
double
aDeltaX
double
aDeltaY
int32_t
aModifierFlags
)
;
async
LockNativePointer
(
)
;
async
UnlockNativePointer
(
)
;
async
AccessKeyNotHandled
(
WidgetKeyboardEvent
event
)
;
async
RegisterProtocolHandler
(
nsString
scheme
nsIURI
handlerURI
nsString
title
nsIURI
documentURI
)
;
async
OnStateChange
(
WebProgressData
aWebProgressData
RequestData
aRequestData
uint32_t
aStateFlags
nsresult
aStatus
WebProgressStateChangeData
?
aStateChangeData
)
;
async
OnLocationChange
(
WebProgressData
aWebProgressData
RequestData
aRequestData
nsIURI
aLocation
uint32_t
aFlags
bool
aCanGoBack
bool
aCanGoForward
WebProgressLocationChangeData
?
aLocationChangeData
)
;
async
OnProgressChange
(
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
;
async
OnStatusChange
(
nsString
aMessage
)
;
async
NotifyContentBlockingEvent
(
uint32_t
aEvent
RequestData
aRequestData
bool
aBlocked
nsCString
aTrackingOrigin
nsCString
[
]
aTrackingFullHashes
StorageAccessPermissionGrantedReason
?
aReason
)
;
async
NavigationFinished
(
)
;
async
SessionStoreUpdate
(
nsCString
?
aDocShellCaps
bool
?
aPrivatedMode
bool
aNeedCollectSHistory
uint32_t
aEpoch
)
;
async
IntrinsicSizeOrRatioChanged
(
IntrinsicSize
?
aIntrinsicSize
AspectRatio
?
aIntrinsicRatio
)
;
async
RequestPointerLock
(
)
returns
(
nsCString
error
)
;
async
ReleasePointerLock
(
)
;
async
RequestPointerCapture
(
uint32_t
aPointerId
)
returns
(
bool
aSuccess
)
;
async
ReleasePointerCapture
(
uint32_t
aPointerId
)
;
child
:
async
NativeSynthesisResponse
(
uint64_t
aObserverId
nsCString
aResponse
)
;
async
UpdateEpoch
(
uint32_t
aEpoch
)
;
async
UpdateSHistory
(
)
;
async
CloneDocumentTreeIntoSelf
(
MaybeDiscardedBrowsingContext
aBc
PrintData
aPrintData
)
returns
(
bool
aSuccess
)
;
async
UpdateRemotePrintSettings
(
PrintData
aPrintData
)
;
[
Priority
=
input
]
async
ReleaseAllPointerCapture
(
)
;
parent
:
async
RemoteIsReadyToHandleInputEvents
(
)
;
async
PaintWhileInterruptingJSNoOp
(
LayersObserverEpoch
aEpoch
)
;
child
:
async
UpdateEffects
(
EffectsInfo
aEffects
)
;
parent
:
async
SetDimensions
(
uint32_t
aFlags
int32_t
aX
int32_t
aY
int32_t
aCx
int32_t
aCy
double
aScale
)
;
[
Nested
=
inside_sync
]
sync
DispatchWheelEvent
(
WidgetWheelEvent
event
)
;
[
Nested
=
inside_sync
]
sync
DispatchMouseEvent
(
WidgetMouseEvent
event
)
;
[
Nested
=
inside_sync
]
sync
DispatchKeyboardEvent
(
WidgetKeyboardEvent
event
)
;
[
Nested
=
inside_sync
]
sync
DispatchTouchEvent
(
WidgetTouchEvent
event
)
;
async
InvokeDragSession
(
IPCDataTransfer
[
]
transfers
uint32_t
action
Shmem
?
visualData
uint32_t
stride
SurfaceFormat
format
LayoutDeviceIntRect
dragRect
nsIPrincipal
principal
nsIContentSecurityPolicy
csp
CookieJarSettingsArgs
cookieJarSettings
MaybeDiscardedWindowContext
sourceWindowContext
)
;
sync
EnsureLayersConnected
(
)
returns
(
CompositorOptions
compositorOptions
)
;
async
ShowCanvasPermissionPrompt
(
nsCString
aOrigin
bool
aHideDoorHanger
)
;
sync
SetSystemFont
(
nsCString
aFontName
)
;
sync
GetSystemFont
(
)
returns
(
nsCString
retval
)
;
async
MaybeFireEmbedderLoadEvents
(
EmbedderElementEventType
aFireEventAtEmbeddingElement
)
;
async
ScrollRectIntoView
(
nsRect
aRect
ScrollAxis
aVertical
ScrollAxis
aHorizontal
ScrollFlags
aScrollFlags
int32_t
aAppUnitsPerDevPixel
)
;
async
SetAllowDeprecatedTls
(
bool
value
)
;
async
ShowDynamicToolbar
(
)
;
child
:
async
Show
(
ParentShowInfo
parentInfo
OwnerShowInfo
childInfo
)
;
async
Activate
(
uint64_t
aActionId
)
;
async
Deactivate
(
uint64_t
aActionId
)
;
async
ScrollbarPreferenceChanged
(
ScrollbarPreference
pref
)
;
async
InitRendering
(
TextureFactoryIdentifier
textureFactoryIdentifier
LayersId
layersId
CompositorOptions
compositorOptions
bool
layersConnected
)
;
async
CompositorOptionsChanged
(
CompositorOptions
newOptions
)
;
async
LoadURL
(
nsDocShellLoadState
loadState
ParentShowInfo
info
)
;
async
CreateAboutBlankContentViewer
(
nsIPrincipal
principal
nsIPrincipal
partitionedPrincipal
)
;
async
ResumeLoad
(
uint64_t
pendingSwitchID
ParentShowInfo
info
)
;
[
Compress
=
all
]
async
UpdateDimensions
(
DimensionInfo
dimensions
)
;
async
SizeModeChanged
(
nsSizeMode
sizeMode
)
;
async
ChildToParentMatrix
(
Matrix4x4
?
aMatrix
ScreenRect
aRemoteDocumentRect
)
;
async
SetIsUnderHiddenEmbedderElement
(
bool
aIsUnderHiddenEmbedderElement
)
;
async
DynamicToolbarMaxHeightChanged
(
ScreenIntCoord
height
)
;
async
DynamicToolbarOffsetChanged
(
ScreenIntCoord
height
)
;
async
SetKeyboardIndicators
(
UIStateChangeType
showFocusRings
)
;
async
StopIMEStateManagement
(
)
;
[
Compress
Priority
=
input
]
async
RealMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Compress
]
async
NormalPriorityRealMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
RealMouseMoveEventForTests
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityRealMouseMoveEventForTests
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
SynthMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPrioritySynthMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
RealMouseButtonEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityRealMouseButtonEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
RealMouseEnterExitWidgetEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityRealMouseEnterExitWidgetEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
RealKeyEvent
(
WidgetKeyboardEvent
event
)
;
async
NormalPriorityRealKeyEvent
(
WidgetKeyboardEvent
event
)
;
[
Priority
=
input
]
async
MouseWheelEvent
(
WidgetWheelEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityMouseWheelEvent
(
WidgetWheelEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Priority
=
input
]
async
RealTouchEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
async
NormalPriorityRealTouchEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
[
Priority
=
input
]
async
HandleTap
(
GeckoContentController_TapType
aType
LayoutDevicePoint
point
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityHandleTap
(
GeckoContentController_TapType
aType
LayoutDevicePoint
point
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
[
Compress
Priority
=
input
]
async
RealTouchMoveEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
[
Compress
]
async
NormalPriorityRealTouchMoveEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
[
Compress
Priority
=
input
]
async
RealTouchMoveEvent2
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
[
Compress
]
async
NormalPriorityRealTouchMoveEvent2
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
async
RealDragEvent
(
WidgetDragEvent
aEvent
uint32_t
aDragAction
uint32_t
aDropEffect
nsIPrincipal
aPrincipal
nsIContentSecurityPolicy
csp
)
;
[
Priority
=
input
]
async
CompositionEvent
(
WidgetCompositionEvent
event
)
;
async
NormalPriorityCompositionEvent
(
WidgetCompositionEvent
event
)
;
[
Priority
=
input
]
async
SelectionEvent
(
WidgetSelectionEvent
event
)
;
async
NormalPrioritySelectionEvent
(
WidgetSelectionEvent
event
)
;
[
Priority
=
input
]
async
InsertText
(
nsString
aStringToInsert
)
;
async
NormalPriorityInsertText
(
nsString
aStringToInsert
)
;
async
PasteTransferable
(
IPCDataTransfer
aDataTransfer
bool
aIsPrivateData
nsIPrincipal
aRequestingPrincipal
nsContentPolicyType
aContentPolicyType
)
;
async
ActivateFrameEvent
(
nsString
aType
bool
capture
)
;
async
LoadRemoteScript
(
nsString
aURL
bool
aRunInGlobalScope
)
;
async
Destroy
(
)
;
async
RenderLayers
(
bool
aEnabled
LayersObserverEpoch
aEpoch
)
;
async
PreserveLayers
(
bool
aPreserve
)
;
child
:
async
SuppressDisplayport
(
bool
aEnabled
)
;
async
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
;
async
UIResolutionChanged
(
float
dpi
int32_t
rounding
double
scale
)
;
async
SafeAreaInsetsChanged
(
ScreenIntMargin
aSafeAreaInsets
)
;
async
SwappedWithOtherRemoteLoader
(
IPCTabContext
context
)
;
async
HandleAccessKey
(
WidgetKeyboardEvent
event
uint32_t
[
]
charCodes
)
;
async
PrintPreview
(
PrintData
aPrintData
MaybeDiscardedBrowsingContext
aSourceBrowsingContext
)
returns
(
PrintPreviewResultInfo
aInfo
)
;
async
ExitPrintPreview
(
)
;
async
Print
(
MaybeDiscardedBrowsingContext
aBC
PrintData
aPrintData
)
;
async
UpdateNativeWindowHandle
(
uintptr_t
aNewHandle
)
;
async
AllowScriptsToClose
(
)
;
async
WillChangeProcess
(
)
;
parent
:
async
IsWindowSupportingProtectedMedia
(
uint64_t
aOuterWindowID
)
returns
(
bool
isSupported
)
;
async
IsWindowSupportingWebVR
(
uint64_t
aOuterWindowID
)
returns
(
bool
isSupported
)
;
async
VisitURI
(
nsIURI
aURI
nsIURI
aLastVisitedURI
uint32_t
aFlags
)
;
async
QueryVisitedState
(
nsIURI
[
]
aURIs
)
;
async
NewWindowGlobal
(
ManagedEndpoint
<
PWindowGlobalParent
>
aEndpoint
WindowGlobalInit
aInit
)
;
}
;
}
}
