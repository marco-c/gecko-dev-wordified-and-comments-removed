include
protocol
PColorPicker
;
include
protocol
PContent
;
#
ifdef
ACCESSIBILITY
include
protocol
PDocAccessible
;
#
endif
include
protocol
PFilePicker
;
include
protocol
PPluginWidget
;
include
protocol
PRemotePrintJob
;
include
protocol
PChildToParentStream
;
include
protocol
PParentToChildStream
;
include
protocol
PFileDescriptorSet
;
include
protocol
PIPCBlobInputStream
;
include
protocol
PPaymentRequest
;
include
protocol
PWindowGlobal
;
include
protocol
PBrowserBridge
;
include
DOMTypes
;
include
WindowGlobalTypes
;
include
IPCBlob
;
include
IPCStream
;
include
URIParams
;
include
PPrintingTypes
;
include
PTabContext
;
include
PBackgroundSharedTypes
;
include
"
mozilla
/
AntiTrackingIPCUtils
.
h
"
;
include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
include
"
mozilla
/
ipc
/
TransportSecurityInfoUtils
.
h
"
;
using
mozilla
:
:
gfx
:
:
Matrix4x4
from
"
mozilla
/
gfx
/
Matrix
.
h
"
;
using
mozilla
:
:
gfx
:
:
MaybeMatrix4x4
from
"
mozilla
/
gfx
/
Matrix
.
h
"
;
using
mozilla
:
:
gfx
:
:
SurfaceFormat
from
"
mozilla
/
gfx
/
Types
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntPoint
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDevicePoint
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntCoord
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntMargin
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntPoint
from
"
Units
.
h
"
;
using
ScreenRect
from
"
Units
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ScrollableLayerGuid
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ZoomConstraints
from
"
mozilla
/
layers
/
ZoomConstraints
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersObserverEpoch
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
MaybeZoomConstraints
from
"
mozilla
/
layers
/
ZoomConstraints
.
h
"
;
using
mozilla
:
:
layers
:
:
GeckoContentController_TapType
from
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
;
using
ScrollableLayerGuid
:
:
ViewID
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
struct
mozilla
:
:
void_t
from
"
ipc
/
IPCMessageUtils
.
h
"
;
using
mozilla
:
:
WindowsHandle
from
"
ipc
/
IPCMessageUtils
.
h
"
;
using
class
mozilla
:
:
WidgetCompositionEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMENotification
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMENotificationRequests
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
IMEState
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
InputContext
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
struct
mozilla
:
:
widget
:
:
InputContextAction
from
"
mozilla
/
widget
/
IMEData
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntSize
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntPoint
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
class
mozilla
:
:
ContentCache
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetKeyboardEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetMouseEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetWheelEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetDragEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
nsRect
from
"
nsRect
.
h
"
;
using
class
mozilla
:
:
WidgetSelectionEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetTouchEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
WidgetPluginEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
struct
mozilla
:
:
dom
:
:
RemoteDOMEvent
from
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
TextureFactoryIdentifier
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositorOptions
from
"
mozilla
/
layers
/
CompositorOptions
.
h
"
;
using
mozilla
:
:
CSSToScreenScale
from
"
Units
.
h
"
;
using
mozilla
:
:
CommandInt
from
"
mozilla
/
EventForwards
.
h
"
;
using
nsIWidget
:
:
TouchPointerState
from
"
nsIWidget
.
h
"
;
using
nsCursor
from
"
nsIWidget
.
h
"
;
using
struct
LookAndFeelInt
from
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
;
using
class
mozilla
:
:
dom
:
:
MessagePort
from
"
mozilla
/
dom
/
MessagePort
.
h
"
;
using
class
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
from
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
;
using
mozilla
:
:
EventMessage
from
"
mozilla
/
EventForwards
.
h
"
;
using
nsEventStatus
from
"
mozilla
/
EventForwards
.
h
"
;
using
mozilla
:
:
Modifiers
from
"
mozilla
/
EventForwards
.
h
"
;
using
mozilla
:
:
widget
:
:
CandidateWindowPosition
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
class
mozilla
:
:
NativeEventData
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
mozilla
:
:
FontRange
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
mozilla
:
:
a11y
:
:
IAccessibleHolder
from
"
mozilla
/
a11y
/
IPCTypes
.
h
"
;
using
mozilla
:
:
OriginAttributes
from
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
;
using
mozilla
:
:
dom
:
:
EffectsInfo
from
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
ScrollAxis
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
mozilla
:
:
ScrollFlags
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
struct
InputFormData
from
"
mozilla
/
dom
/
SessionStoreMessageUtils
.
h
"
;
using
struct
CollectedInputDataValue
from
"
mozilla
/
dom
/
SessionStoreMessageUtils
.
h
"
;
using
refcounted
class
nsITransportSecurityInfo
from
"
nsITransportSecurityInfo
.
h
"
;
using
mozilla
:
:
ContentBlockingNotifier
:
:
StorageAccessGrantedReason
from
"
mozilla
/
ContentBlockingNotifier
.
h
"
;
using
CallerType
from
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
;
using
mozilla
:
:
dom
:
:
EmbedderElementEventType
from
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
WebProgressData
{
bool
isTopLevel
;
bool
isLoadingDocument
;
uint32_t
loadType
;
uint64_t
outerDOMWindowID
;
uint64_t
innerDOMWindowID
;
}
;
struct
RequestData
{
nsIURI
requestURI
;
nsIURI
originalRequestURI
;
nsCString
matchedList
;
uint64_t
?
elapsedLoadTimeMS
;
}
;
struct
WebProgressStateChangeData
{
bool
isNavigating
;
bool
mayEnableCharacterEncodingMenu
;
bool
charsetAutodetected
;
nsString
contentType
;
nsString
charset
;
nsIURI
documentURI
;
}
;
struct
WebProgressLocationChangeData
{
bool
isNavigating
;
bool
isSyntheticDocument
;
bool
mayEnableCharacterEncodingMenu
;
bool
charsetAutodetected
;
nsString
contentType
;
nsString
title
;
nsString
charset
;
nsIURI
documentURI
;
nsIPrincipal
contentPrincipal
;
nsIPrincipal
contentStoragePrincipal
;
nsIContentSecurityPolicy
csp
;
nsIReferrerInfo
referrerInfo
;
uint64_t
?
requestContextID
;
}
;
struct
WebProgressSecurityChangeData
{
nsITransportSecurityInfo
securityInfo
;
bool
isSecureContext
;
}
;
nested
(
upto
inside_cpow
)
sync
refcounted
protocol
PBrowser
{
manager
PContent
;
manages
PColorPicker
;
#
ifdef
ACCESSIBILITY
manages
PDocAccessible
;
#
endif
manages
PFilePicker
;
manages
PPluginWidget
;
manages
PPaymentRequest
;
manages
PWindowGlobal
;
manages
PBrowserBridge
;
both
:
async
AsyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
;
parent
:
#
ifdef
ACCESSIBILITY
async
PDocAccessible
(
nullable
PDocAccessible
aParentDoc
uint64_t
aParentAcc
uint32_t
aMsaaID
IAccessibleHolder
aDocCOMProxy
)
;
#
endif
sync
PPluginWidget
(
)
;
async
PPaymentRequest
(
)
;
async
SetNativeChildOfShareableWindow
(
uintptr_t
childWindow
)
;
sync
DispatchFocusToTopLevelWindow
(
)
;
parent
:
async
MoveFocus
(
bool
forward
bool
forDocumentNavigation
)
;
async
SizeShellTo
(
uint32_t
aFlag
int32_t
aWidth
int32_t
aHeight
int32_t
aShellItemWidth
int32_t
aShellItemHeight
)
;
async
DropLinks
(
nsString
[
]
aLinks
)
;
async
Event
(
RemoteDOMEvent
aEvent
)
;
sync
SyncMessage
(
nsString
aMessage
ClonedMessageData
aData
)
returns
(
StructuredCloneData
[
]
retval
)
;
nested
(
inside_cpow
)
async
NotifyIMEFocus
(
ContentCache
contentCache
IMENotification
notification
)
returns
(
IMENotificationRequests
requests
)
;
nested
(
inside_cpow
)
async
NotifyIMETextChange
(
ContentCache
contentCache
IMENotification
notification
)
;
nested
(
inside_cpow
)
async
NotifyIMECompositionUpdate
(
ContentCache
contentCache
IMENotification
notification
)
;
nested
(
inside_cpow
)
async
NotifyIMESelection
(
ContentCache
contentCache
IMENotification
notification
)
;
nested
(
inside_cpow
)
async
UpdateContentCache
(
ContentCache
contentCache
)
;
nested
(
inside_cpow
)
sync
NotifyIMEMouseButtonEvent
(
IMENotification
notification
)
returns
(
bool
consumedByIME
)
;
nested
(
inside_cpow
)
async
NotifyIMEPositionChange
(
ContentCache
contentCache
IMENotification
notification
)
;
nested
(
inside_cpow
)
sync
RequestIMEToCommitComposition
(
bool
cancel
)
returns
(
bool
isCommitted
nsString
committedString
)
;
nested
(
inside_cpow
)
async
OnEventNeedingAckHandled
(
EventMessage
message
)
;
nested
(
inside_cpow
)
sync
StartPluginIME
(
WidgetKeyboardEvent
aKeyboardEvent
int32_t
panelX
int32_t
panelY
)
returns
(
nsString
aCommitted
)
;
nested
(
inside_cpow
)
async
SetPluginFocused
(
bool
aFocused
)
;
async
SetCandidateWindowForPlugin
(
CandidateWindowPosition
aPosition
)
;
async
EnableIMEForPlugin
(
bool
aEnable
)
;
nested
(
inside_cpow
)
async
OnWindowedPluginKeyEvent
(
NativeEventData
aKeyEventData
)
;
async
DefaultProcOfPluginEvent
(
WidgetPluginEvent
aEvent
)
;
async
RequestFocus
(
bool
canRaise
CallerType
aCallerType
)
;
async
WheelZoomChange
(
bool
increase
)
;
async
EnableDisableCommands
(
MaybeDiscardedBrowsingContext
bc
nsString
action
nsCString
[
]
enabledCommands
nsCString
[
]
disabledCommands
)
;
nested
(
inside_cpow
)
sync
GetInputContext
(
)
returns
(
IMEState
state
)
;
nested
(
inside_cpow
)
async
SetInputContext
(
InputContext
context
InputContextAction
action
)
;
async
SetCursor
(
nsCursor
value
bool
hasCustomCursor
nsCString
customCursorData
uint32_t
width
uint32_t
height
uint32_t
stride
SurfaceFormat
format
uint32_t
hotspotX
uint32_t
hotspotY
bool
force
)
;
async
SetLinkStatus
(
nsString
status
)
;
async
ShowTooltip
(
uint32_t
x
uint32_t
y
nsString
tooltip
nsString
direction
)
;
async
HideTooltip
(
)
;
async
PColorPicker
(
nsString
title
nsString
initialColor
)
;
async
PFilePicker
(
nsString
aTitle
int16_t
aMode
)
;
async
IndexedDBPermissionRequest
(
nsIPrincipal
aPrincipal
)
returns
(
uint32_t
permission
)
;
async
RespondStartSwipeEvent
(
uint64_t
aInputBlockId
bool
aStartSwipe
)
;
async
AsyncAuthPrompt
(
nsCString
uri
nsString
realm
uint64_t
aCallbackId
)
;
async
LookUpDictionary
(
nsString
aText
FontRange
[
]
aFontRangeArray
bool
aIsVertical
LayoutDeviceIntPoint
aPoint
)
;
async
__delete__
(
)
;
async
ReplyKeyEvent
(
WidgetKeyboardEvent
event
)
;
sync
RequestNativeKeyBindings
(
uint32_t
aType
WidgetKeyboardEvent
aEvent
)
returns
(
CommandInt
[
]
commands
)
;
async
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
nsString
aCharacters
nsString
aUnmodifiedCharacters
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
uint32_t
aModifierFlags
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
uint64_t
aObserverId
)
;
async
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
uint64_t
aObserverId
)
;
async
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
uint64_t
aObserverId
)
;
async
SynthesizeNativeTouchTap
(
LayoutDeviceIntPoint
aPoint
bool
aLongTap
uint64_t
aObserverId
)
;
async
ClearNativeTouchSequence
(
uint64_t
aObserverId
)
;
async
AccessKeyNotHandled
(
WidgetKeyboardEvent
event
)
;
async
RegisterProtocolHandler
(
nsString
scheme
nsIURI
handlerURI
nsString
title
nsIURI
documentURI
)
;
async
OnStateChange
(
WebProgressData
?
aWebProgressData
RequestData
aRequestData
uint32_t
aStateFlags
nsresult
aStatus
WebProgressStateChangeData
?
aStateChangeData
)
;
async
OnProgressChange
(
WebProgressData
?
aWebProgressData
RequestData
aRequestData
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
;
async
OnLocationChange
(
WebProgressData
?
aWebProgressData
RequestData
aRequestData
nsIURI
aLocation
uint32_t
aFlags
bool
aCanGoBack
bool
aCanGoForward
WebProgressLocationChangeData
?
aLocationChangeData
)
;
async
OnStatusChange
(
WebProgressData
?
aWebProgressData
RequestData
aRequestData
nsresult
aStatus
nsString
aMessage
)
;
async
OnSecurityChange
(
WebProgressData
?
aWebProgressData
RequestData
aRequestData
uint32_t
aState
WebProgressSecurityChangeData
?
aSecurityChangeData
)
;
async
NotifyContentBlockingEvent
(
uint32_t
aEvent
RequestData
aRequestData
bool
aBlocked
nsCString
aTrackingOrigin
nsCString
[
]
aTrackingFullHashes
StorageAccessGrantedReason
?
aReason
)
;
async
NavigationFinished
(
)
;
async
SessionStoreUpdate
(
nsCString
?
aDocShellCaps
bool
?
aPrivatedMode
nsCString
[
]
aPositions
int32_t
[
]
aPositionDescendants
InputFormData
[
]
aInputs
CollectedInputDataValue
[
]
aIdVals
CollectedInputDataValue
[
]
aXPathVals
nsCString
[
]
aOrigins
nsString
[
]
aKeys
nsString
[
]
aValues
bool
aIsFullStorage
bool
aNeedCollectSHistory
uint32_t
aFlushId
bool
aIsFinal
uint32_t
aEpoch
)
;
child
:
async
NativeSynthesisResponse
(
uint64_t
aObserverId
nsCString
aResponse
)
;
async
FlushTabState
(
uint32_t
aFlushId
bool
aIsFinal
)
;
async
UpdateEpoch
(
uint32_t
aEpoch
)
;
async
UpdateSHistory
(
bool
aImmediately
)
;
parent
:
async
RemotePaintIsReady
(
)
;
async
NotifyCompositorTransaction
(
)
;
async
RemoteIsReadyToHandleInputEvents
(
)
;
async
PaintWhileInterruptingJSNoOp
(
LayersObserverEpoch
aEpoch
)
;
child
:
async
UpdateEffects
(
EffectsInfo
aEffects
)
;
parent
:
async
SetDimensions
(
uint32_t
aFlags
int32_t
aX
int32_t
aY
int32_t
aCx
int32_t
aCy
double
aScale
)
;
nested
(
inside_sync
)
sync
DispatchWheelEvent
(
WidgetWheelEvent
event
)
;
nested
(
inside_sync
)
sync
DispatchMouseEvent
(
WidgetMouseEvent
event
)
;
nested
(
inside_sync
)
sync
DispatchKeyboardEvent
(
WidgetKeyboardEvent
event
)
;
async
InvokeDragSession
(
IPCDataTransfer
[
]
transfers
uint32_t
action
Shmem
?
visualData
uint32_t
stride
SurfaceFormat
format
LayoutDeviceIntRect
dragRect
nsIPrincipal
principal
nsIContentSecurityPolicy
csp
)
;
sync
EnsureLayersConnected
(
)
returns
(
CompositorOptions
compositorOptions
)
;
async
ShowCanvasPermissionPrompt
(
nsCString
aOrigin
bool
aHideDoorHanger
)
;
sync
SetSystemFont
(
nsCString
aFontName
)
;
sync
GetSystemFont
(
)
returns
(
nsCString
retval
)
;
async
MaybeFireEmbedderLoadEvents
(
EmbedderElementEventType
aFireEventAtEmbeddingElement
)
;
async
ScrollRectIntoView
(
nsRect
aRect
ScrollAxis
aVertical
ScrollAxis
aHorizontal
ScrollFlags
aScrollFlags
int32_t
aAppUnitsPerDevPixel
)
;
async
ReportBlockedEmbedderNodeByClassifier
(
)
;
child
:
async
Show
(
ParentShowInfo
parentInfo
OwnerShowInfo
childInfo
)
;
async
ScrollbarPreferenceChanged
(
ScrollbarPreference
pref
)
;
async
InitRendering
(
TextureFactoryIdentifier
textureFactoryIdentifier
LayersId
layersId
CompositorOptions
compositorOptions
bool
layersConnected
)
;
async
CompositorOptionsChanged
(
CompositorOptions
newOptions
)
;
async
LoadURL
(
nsCString
uri
nsIPrincipal
triggeringPrincipal
ParentShowInfo
info
)
;
async
ResumeLoad
(
uint64_t
pendingSwitchID
ParentShowInfo
info
)
;
async
UpdateDimensions
(
DimensionInfo
dimensions
)
compressall
;
async
SizeModeChanged
(
nsSizeMode
sizeMode
)
;
async
ChildToParentMatrix
(
MaybeMatrix4x4
aMatrix
ScreenRect
aRemoteDocumentRect
)
;
async
SetIsUnderHiddenEmbedderElement
(
bool
aIsUnderHiddenEmbedderElement
)
;
async
DynamicToolbarMaxHeightChanged
(
ScreenIntCoord
height
)
;
async
DynamicToolbarOffsetChanged
(
ScreenIntCoord
height
)
;
async
ParentActivated
(
bool
aActivated
)
;
async
SetKeyboardIndicators
(
UIStateChangeType
showFocusRings
)
;
async
StopIMEStateManagement
(
)
;
async
MouseEvent
(
nsString
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
)
;
prio
(
input
)
async
RealMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
compress
;
async
NormalPriorityRealMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
compress
;
prio
(
input
)
async
SynthMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPrioritySynthMouseMoveEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
prio
(
input
)
async
RealMouseButtonEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityRealMouseButtonEvent
(
WidgetMouseEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
prio
(
input
)
async
RealKeyEvent
(
WidgetKeyboardEvent
event
)
;
async
NormalPriorityRealKeyEvent
(
WidgetKeyboardEvent
event
)
;
prio
(
input
)
async
MouseWheelEvent
(
WidgetWheelEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityMouseWheelEvent
(
WidgetWheelEvent
event
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
prio
(
input
)
async
RealTouchEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
async
NormalPriorityRealTouchEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
;
prio
(
input
)
async
HandleTap
(
GeckoContentController_TapType
aType
LayoutDevicePoint
point
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
async
NormalPriorityHandleTap
(
GeckoContentController_TapType
aType
LayoutDevicePoint
point
Modifiers
aModifiers
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
)
;
prio
(
input
)
async
RealTouchMoveEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
compress
;
async
NormalPriorityRealTouchMoveEvent
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
compress
;
prio
(
input
)
async
RealTouchMoveEvent2
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
compress
;
async
NormalPriorityRealTouchMoveEvent2
(
WidgetTouchEvent
aEvent
ScrollableLayerGuid
aGuid
uint64_t
aInputBlockId
nsEventStatus
aApzResponse
)
compress
;
async
RealDragEvent
(
WidgetDragEvent
aEvent
uint32_t
aDragAction
uint32_t
aDropEffect
nsIPrincipal
aPrincipal
nsIContentSecurityPolicy
csp
)
;
async
PluginEvent
(
WidgetPluginEvent
aEvent
)
;
prio
(
input
)
async
CompositionEvent
(
WidgetCompositionEvent
event
)
;
async
NormalPriorityCompositionEvent
(
WidgetCompositionEvent
event
)
;
prio
(
input
)
async
SelectionEvent
(
WidgetSelectionEvent
event
)
;
async
NormalPrioritySelectionEvent
(
WidgetSelectionEvent
event
)
;
async
PasteTransferable
(
IPCDataTransfer
aDataTransfer
bool
aIsPrivateData
nsIPrincipal
aRequestingPrincipal
uint32_t
aContentPolicyType
)
;
async
ActivateFrameEvent
(
nsString
aType
bool
capture
)
;
async
LoadRemoteScript
(
nsString
aURL
bool
aRunInGlobalScope
)
;
async
Destroy
(
)
;
async
SetDocShellIsActive
(
bool
aIsActive
)
;
async
SetSuspendMediaWhenInactive
(
bool
aSuspendMediaWhenInactive
)
;
async
RenderLayers
(
bool
aEnabled
LayersObserverEpoch
aEpoch
)
;
child
:
async
SuppressDisplayport
(
bool
aEnabled
)
;
async
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
;
async
RequestNotifyAfterRemotePaint
(
)
;
async
UIResolutionChanged
(
float
dpi
int32_t
rounding
double
scale
)
;
async
SafeAreaInsetsChanged
(
ScreenIntMargin
aSafeAreaInsets
)
;
async
SwappedWithOtherRemoteLoader
(
IPCTabContext
context
)
;
async
HandleAccessKey
(
WidgetKeyboardEvent
event
uint32_t
[
]
charCodes
)
;
async
HandledWindowedPluginKeyEvent
(
NativeEventData
aKeyEventData
bool
aIsConsumed
)
;
async
Print
(
uint64_t
aOuterWindowID
PrintData
aPrintData
)
;
async
UpdateNativeWindowHandle
(
uintptr_t
aNewHandle
)
;
async
AwaitLargeAlloc
(
)
;
async
AllowScriptsToClose
(
)
;
async
SetWidgetNativeData
(
WindowsHandle
aHandle
)
;
async
WillChangeProcess
(
)
returns
(
bool
success
)
;
parent
:
async
IsWindowSupportingProtectedMedia
(
uint64_t
aOuterWindowID
)
returns
(
bool
isSupported
)
;
async
IsWindowSupportingWebVR
(
uint64_t
aOuterWindowID
)
returns
(
bool
isSupported
)
;
async
VisitURI
(
nsIURI
aURI
nsIURI
aLastVisitedURI
uint32_t
aFlags
)
;
async
QueryVisitedState
(
nsIURI
[
]
aURIs
)
;
async
NewWindowGlobal
(
ManagedEndpoint
<
PWindowGlobalParent
>
aEndpoint
WindowGlobalInit
aInit
)
;
}
;
}
}
