#
ifndef
mozilla_dom_BrowserParent_h
#
define
mozilla_dom_BrowserParent_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
LiveResizeListener
.
h
"
#
include
"
mozilla
/
ContentCache
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
dom
/
PBrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
PContent
.
h
"
#
include
"
mozilla
/
dom
/
PFilePickerParent
.
h
"
#
include
"
mozilla
/
dom
/
TabContext
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
gfx
/
CrossProcessPaint
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layout
/
RenderFrame
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAuthPromptProvider
.
h
"
#
include
"
nsIBrowserDOMWindow
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIKeyEventInPluginCallback
.
h
"
#
include
"
nsIRemoteTab
.
h
"
#
include
"
nsIXULBrowserWindow
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsIWidget
.
h
"
class
nsFrameLoader
;
class
nsIContent
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsILoadContext
;
class
nsIDocShell
;
class
nsIWebBrowserPersistDocumentReceiver
;
namespace
mozilla
{
namespace
a11y
{
class
DocAccessibleParent
;
}
namespace
jsipc
{
class
CpowHolder
;
}
namespace
layers
{
struct
TextureFactoryIdentifier
;
}
namespace
widget
{
struct
IMENotification
;
}
namespace
gfx
{
class
SourceSurface
;
class
DataSourceSurface
;
}
namespace
dom
{
class
CanonicalBrowsingContext
;
class
ClonedMessageData
;
class
ContentParent
;
class
Element
;
class
DataTransfer
;
class
BrowserBridgeParent
;
namespace
ipc
{
class
StructuredCloneData
;
}
class
BrowserParent
final
:
public
PBrowserParent
public
nsIDOMEventListener
public
nsIRemoteTab
public
nsIAuthPromptProvider
public
nsIKeyEventInPluginCallback
public
nsSupportsWeakReference
public
TabContext
public
LiveResizeListener
{
typedef
mozilla
:
:
dom
:
:
ClonedMessageData
ClonedMessageData
;
friend
class
PBrowserParent
;
friend
class
BrowserBridgeParent
;
virtual
~
BrowserParent
(
)
;
public
:
struct
AutoUseNewTab
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIAUTHPROMPTPROVIDER
NS_DECL_NSIREMOTETAB
NS_DECL_NSIDOMEVENTLISTENER
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
BrowserParent
nsIRemoteTab
)
BrowserParent
(
ContentParent
*
aManager
const
TabId
&
aTabId
const
TabContext
&
aContext
CanonicalBrowsingContext
*
aBrowsingContext
uint32_t
aChromeFlags
BrowserBridgeParent
*
aBrowserBridgeParent
=
nullptr
)
;
static
void
InitializeStatics
(
)
;
static
BrowserParent
*
GetFocused
(
)
;
static
BrowserParent
*
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
;
static
BrowserParent
*
GetFrom
(
nsIRemoteTab
*
aBrowserParent
)
;
static
BrowserParent
*
GetFrom
(
PBrowserParent
*
aBrowserParent
)
;
static
BrowserParent
*
GetFrom
(
nsIContent
*
aContent
)
;
static
BrowserParent
*
GetBrowserParentFromLayersId
(
layers
:
:
LayersId
aLayersId
)
;
static
TabId
GetTabIdFrom
(
nsIDocShell
*
docshell
)
;
static
bool
AreRecordReplayTabsActive
(
)
{
return
gNumActiveRecordReplayTabs
!
=
0
;
}
Element
*
GetOwnerElement
(
)
const
{
return
mFrameElement
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
GetParentWindowOuter
(
)
;
void
SetOwnerElement
(
Element
*
aElement
)
;
void
CacheFrameLoader
(
nsFrameLoader
*
aFrameLoader
)
;
nsIBrowserDOMWindow
*
GetBrowserDOMWindow
(
)
const
{
return
mBrowserDOMWindow
;
}
void
SetBrowserDOMWindow
(
nsIBrowserDOMWindow
*
aBrowserDOMWindow
)
{
mBrowserDOMWindow
=
aBrowserDOMWindow
;
}
void
SetHasContentOpener
(
bool
aHasContentOpener
)
;
void
SwapFrameScriptsFrom
(
nsTArray
<
FrameScriptInfo
>
&
aFrameScripts
)
{
aFrameScripts
.
SwapElements
(
mDelayedFrameScripts
)
;
}
already_AddRefed
<
nsILoadContext
>
GetLoadContext
(
)
;
already_AddRefed
<
nsIWidget
>
GetTopLevelWidget
(
)
;
nsIXULBrowserWindow
*
GetXULBrowserWindow
(
)
;
CanonicalBrowsingContext
*
GetBrowsingContext
(
)
{
return
mBrowsingContext
;
}
void
Destroy
(
)
;
void
RemoveWindowListeners
(
)
;
void
AddWindowListeners
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMoveFocus
(
const
bool
&
aForward
const
bool
&
aForDocumentNavigation
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSizeShellTo
(
const
uint32_t
&
aFlags
const
int32_t
&
aWidth
const
int32_t
&
aHeight
const
int32_t
&
aShellItemWidth
const
int32_t
&
aShellItemHeight
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDropLinks
(
nsTArray
<
nsString
>
&
&
aLinks
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEvent
(
const
RemoteDOMEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReplyKeyEvent
(
const
WidgetKeyboardEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAccessKeyNotHandled
(
const
WidgetKeyboardEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetHasBeforeUnload
(
const
bool
&
aHasBeforeUnload
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRegisterProtocolHandler
(
const
nsString
&
aScheme
nsIURI
*
aHandlerURI
const
nsString
&
aTitle
nsIURI
*
aDocURI
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnProgressChange
(
const
Maybe
<
WebProgressData
>
&
aWebProgressData
const
RequestData
&
aRequestData
const
int32_t
aCurSelfProgress
const
int32_t
aMaxSelfProgress
const
int32_t
aCurTotalProgres
const
int32_t
aMaxTotalProgress
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnStatusChange
(
const
Maybe
<
WebProgressData
>
&
aWebProgressData
const
RequestData
&
aRequestData
const
nsresult
aStatus
const
nsString
&
aMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnContentBlockingEvent
(
const
Maybe
<
WebProgressData
>
&
aWebProgressData
const
RequestData
&
aRequestData
const
uint32_t
&
aEvent
)
;
void
ReconstructWebProgressAndRequest
(
nsIWebProgress
*
aManager
const
Maybe
<
WebProgressData
>
&
aWebProgressData
const
RequestData
&
aRequestData
nsCOMPtr
<
nsIWebProgress
>
&
aOutWebProgress
nsCOMPtr
<
nsIRequest
>
&
aOutRequest
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSessionStoreUpdate
(
const
Maybe
<
nsCString
>
&
aDocShellCaps
const
Maybe
<
bool
>
&
aPrivatedMode
const
nsTArray
<
nsCString
>
&
aPositions
const
nsTArray
<
int32_t
>
&
aPositionDescendants
const
uint32_t
&
aFlushId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBrowserFrameOpenWindow
(
PBrowserParent
*
aOpener
const
nsString
&
aURL
const
nsString
&
aName
bool
aForceNoReferrer
const
nsString
&
aFeatures
BrowserFrameOpenWindowResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSyncMessage
(
const
nsString
&
aMessage
const
ClonedMessageData
&
aData
InfallibleTArray
<
CpowEntry
>
&
&
aCpows
nsIPrincipal
*
aPrincipal
nsTArray
<
ipc
:
:
StructuredCloneData
>
*
aRetVal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRpcMessage
(
const
nsString
&
aMessage
const
ClonedMessageData
&
aData
InfallibleTArray
<
CpowEntry
>
&
&
aCpows
nsIPrincipal
*
aPrincipal
nsTArray
<
ipc
:
:
StructuredCloneData
>
*
aRetVal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncMessage
(
const
nsString
&
aMessage
InfallibleTArray
<
CpowEntry
>
&
&
aCpows
nsIPrincipal
*
aPrincipal
const
ClonedMessageData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMEFocus
(
const
ContentCache
&
aContentCache
const
widget
:
:
IMENotification
&
aEventMessage
NotifyIMEFocusResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMETextChange
(
const
ContentCache
&
aContentCache
const
widget
:
:
IMENotification
&
aEventMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMECompositionUpdate
(
const
ContentCache
&
aContentCache
const
widget
:
:
IMENotification
&
aEventMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMESelection
(
const
ContentCache
&
aContentCache
const
widget
:
:
IMENotification
&
aEventMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateContentCache
(
const
ContentCache
&
aContentCache
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMEMouseButtonEvent
(
const
widget
:
:
IMENotification
&
aEventMessage
bool
*
aConsumedByIME
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIMEPositionChange
(
const
ContentCache
&
aContentCache
const
widget
:
:
IMENotification
&
aEventMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnEventNeedingAckHandled
(
const
EventMessage
&
aMessage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestIMEToCommitComposition
(
const
bool
&
aCancel
bool
*
aIsCommitted
nsString
*
aCommittedString
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStartPluginIME
(
const
WidgetKeyboardEvent
&
aKeyboardEvent
const
int32_t
&
aPanelX
const
int32_t
&
aPanelY
nsString
*
aCommitted
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPluginFocused
(
const
bool
&
aFocused
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetCandidateWindowForPlugin
(
const
widget
:
:
CandidateWindowPosition
&
aPosition
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnableIMEForPlugin
(
const
bool
&
aEnable
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDefaultProcOfPluginEvent
(
const
WidgetPluginEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetInputContext
(
widget
:
:
IMEState
*
aIMEState
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetInputContext
(
const
widget
:
:
InputContext
&
aContext
const
widget
:
:
InputContextAction
&
aAction
)
;
virtual
void
HandledWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
bool
aIsConsumed
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestFocus
(
const
bool
&
aCanRaise
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLookUpDictionary
(
const
nsString
&
aText
nsTArray
<
mozilla
:
:
FontRange
>
&
&
aFontRangeArray
const
bool
&
aIsVertical
const
LayoutDeviceIntPoint
&
aPoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnableDisableCommands
(
const
nsString
&
aAction
nsTArray
<
nsCString
>
&
&
aEnabledCommands
nsTArray
<
nsCString
>
&
&
aDisabledCommands
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetCursor
(
const
nsCursor
&
aValue
const
bool
&
aHasCustomCursor
const
nsCString
&
aUri
const
uint32_t
&
aWidth
const
uint32_t
&
aHeight
const
uint32_t
&
aStride
const
gfx
:
:
SurfaceFormat
&
aFormat
const
uint32_t
&
aHotspotX
const
uint32_t
&
aHotspotY
const
bool
&
aForce
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetStatus
(
const
uint32_t
&
aType
const
nsString
&
aStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShowTooltip
(
const
uint32_t
&
aX
const
uint32_t
&
aY
const
nsString
&
aTooltip
const
nsString
&
aDirection
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvHideTooltip
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetNativeChildOfShareableWindow
(
const
uintptr_t
&
childWindow
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDispatchFocusToTopLevelWindow
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRespondStartSwipeEvent
(
const
uint64_t
&
aInputBlockId
const
bool
&
aStartSwipe
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDispatchWheelEvent
(
const
mozilla
:
:
WidgetWheelEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDispatchMouseEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDispatchKeyboardEvent
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
;
PColorPickerParent
*
AllocPColorPickerParent
(
const
nsString
&
aTitle
const
nsString
&
aInitialColor
)
;
bool
DeallocPColorPickerParent
(
PColorPickerParent
*
aColorPicker
)
;
PDocAccessibleParent
*
AllocPDocAccessibleParent
(
PDocAccessibleParent
*
const
uint64_t
&
const
uint32_t
&
const
IAccessibleHolder
&
)
;
bool
DeallocPDocAccessibleParent
(
PDocAccessibleParent
*
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPDocAccessibleConstructor
(
PDocAccessibleParent
*
aDoc
PDocAccessibleParent
*
aParentDoc
const
uint64_t
&
aParentID
const
uint32_t
&
aMsaaID
const
IAccessibleHolder
&
aDocCOMProxy
)
override
;
a11y
:
:
DocAccessibleParent
*
GetTopLevelDocAccessible
(
)
const
;
PWindowGlobalParent
*
AllocPWindowGlobalParent
(
const
WindowGlobalInit
&
aInit
)
;
bool
DeallocPWindowGlobalParent
(
PWindowGlobalParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPWindowGlobalConstructor
(
PWindowGlobalParent
*
aActor
const
WindowGlobalInit
&
aInit
)
override
;
PBrowserBridgeParent
*
AllocPBrowserBridgeParent
(
const
nsString
&
aPresentationURL
const
nsString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
const
uint32_t
&
aChromeFlags
)
;
bool
DeallocPBrowserBridgeParent
(
PBrowserBridgeParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPBrowserBridgeConstructor
(
PBrowserBridgeParent
*
aActor
const
nsString
&
aPresentationURL
const
nsString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
const
uint32_t
&
aChromeFlags
)
override
;
void
LoadURL
(
nsIURI
*
aURI
)
;
void
ResumeLoad
(
uint64_t
aPendingSwitchID
)
;
void
InitRendering
(
)
;
void
MaybeShowFrame
(
)
;
void
Show
(
const
ScreenIntSize
&
aSize
bool
aParentIsActive
)
;
void
UpdateDimensions
(
const
nsIntRect
&
aRect
const
ScreenIntSize
&
aSize
)
;
DimensionInfo
GetDimensionInfo
(
)
;
nsresult
UpdatePosition
(
)
;
void
SizeModeChanged
(
const
nsSizeMode
&
aSizeMode
)
;
void
UIResolutionChanged
(
)
;
void
ThemeChanged
(
)
;
void
HandleAccessKey
(
const
WidgetKeyboardEvent
&
aEvent
nsTArray
<
uint32_t
>
&
aCharCodes
)
;
void
Activate
(
)
;
void
Deactivate
(
)
;
bool
MapEventCoordinatesForChildProcess
(
mozilla
:
:
WidgetEvent
*
aEvent
)
;
void
MapEventCoordinatesForChildProcess
(
const
LayoutDeviceIntPoint
&
aOffset
mozilla
:
:
WidgetEvent
*
aEvent
)
;
LayoutDeviceToCSSScale
GetLayoutDeviceToCSSScale
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestNativeKeyBindings
(
const
uint32_t
&
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
*
aCommands
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeKeyEvent
(
const
int32_t
&
aNativeKeyboardLayout
const
int32_t
&
aNativeKeyCode
const
uint32_t
&
aModifierFlags
const
nsString
&
aCharacters
const
nsString
&
aUnmodifiedCharacters
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeMouseEvent
(
const
LayoutDeviceIntPoint
&
aPoint
const
uint32_t
&
aNativeMessage
const
uint32_t
&
aModifierFlags
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeMouseMove
(
const
LayoutDeviceIntPoint
&
aPoint
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeMouseScrollEvent
(
const
LayoutDeviceIntPoint
&
aPoint
const
uint32_t
&
aNativeMessage
const
double
&
aDeltaX
const
double
&
aDeltaY
const
double
&
aDeltaZ
const
uint32_t
&
aModifierFlags
const
uint32_t
&
aAdditionalFlags
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeTouchPoint
(
const
uint32_t
&
aPointerId
const
TouchPointerState
&
aPointerState
const
LayoutDeviceIntPoint
&
aPoint
const
double
&
aPointerPressure
const
uint32_t
&
aPointerOrientation
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthesizeNativeTouchTap
(
const
LayoutDeviceIntPoint
&
aPoint
const
bool
&
aLongTap
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClearNativeTouchSequence
(
const
uint64_t
&
aObserverId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPrefersReducedMotionOverrideForTest
(
const
bool
&
aValue
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResetPrefersReducedMotionOverrideForTest
(
)
;
void
SendMouseEvent
(
const
nsAString
&
aType
float
aX
float
aY
int32_t
aButton
int32_t
aClickCount
int32_t
aModifiers
bool
aIgnoreRootScrollFrame
)
;
void
SendRealMouseEvent
(
WidgetMouseEvent
&
aEvent
)
;
void
SendRealDragEvent
(
WidgetDragEvent
&
aEvent
uint32_t
aDragAction
uint32_t
aDropEffect
nsIPrincipal
*
aPrincipal
)
;
void
SendMouseWheelEvent
(
WidgetWheelEvent
&
aEvent
)
;
void
SendRealKeyEvent
(
WidgetKeyboardEvent
&
aEvent
)
;
void
SendRealTouchEvent
(
WidgetTouchEvent
&
aEvent
)
;
void
SendPluginEvent
(
WidgetPluginEvent
&
aEvent
)
;
bool
SendCompositionEvent
(
mozilla
:
:
WidgetCompositionEvent
&
aEvent
)
;
bool
SendSelectionEvent
(
mozilla
:
:
WidgetSelectionEvent
&
aEvent
)
;
bool
SendHandleTap
(
TapType
aType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
;
PFilePickerParent
*
AllocPFilePickerParent
(
const
nsString
&
aTitle
const
int16_t
&
aMode
)
;
bool
DeallocPFilePickerParent
(
PFilePickerParent
*
actor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvIndexedDBPermissionRequest
(
nsIPrincipal
*
aPrincipal
IndexedDBPermissionRequestResolver
&
&
aResolve
)
;
bool
GetGlobalJSObject
(
JSContext
*
cx
JSObject
*
*
globalp
)
;
void
StartPersistence
(
uint64_t
aOuterWindowID
nsIWebBrowserPersistDocumentReceiver
*
aRecv
ErrorResult
&
aRv
)
;
bool
HandleQueryContentEvent
(
mozilla
:
:
WidgetQueryContentEvent
&
aEvent
)
;
bool
SendPasteTransferable
(
const
IPCDataTransfer
&
aDataTransfer
const
bool
&
aIsPrivateData
nsIPrincipal
*
aRequestingPrincipal
const
uint32_t
&
aContentPolicyType
)
;
ContentParent
*
Manager
(
)
const
{
return
mManager
;
}
bool
IsDestroyed
(
)
const
{
return
mIsDestroyed
;
}
already_AddRefed
<
nsIWidget
>
GetWidget
(
)
const
;
already_AddRefed
<
nsIWidget
>
GetDocWidget
(
)
const
;
const
TabId
GetTabId
(
)
const
{
return
mTabId
;
}
LayoutDeviceIntPoint
TransformPoint
(
const
LayoutDeviceIntPoint
&
aPoint
const
LayoutDeviceToLayoutDeviceMatrix4x4
&
aMatrix
)
;
LayoutDevicePoint
TransformPoint
(
const
LayoutDevicePoint
&
aPoint
const
LayoutDeviceToLayoutDeviceMatrix4x4
&
aMatrix
)
;
LayoutDeviceIntPoint
TransformParentToChild
(
const
LayoutDeviceIntPoint
&
aPoint
)
;
LayoutDevicePoint
TransformParentToChild
(
const
LayoutDevicePoint
&
aPoint
)
;
LayoutDeviceIntPoint
TransformChildToParent
(
const
LayoutDeviceIntPoint
&
aPoint
)
;
LayoutDevicePoint
TransformChildToParent
(
const
LayoutDevicePoint
&
aPoint
)
;
LayoutDeviceIntRect
TransformChildToParent
(
const
LayoutDeviceIntRect
&
aRect
)
;
LayoutDeviceToLayoutDeviceMatrix4x4
GetChildToParentConversionMatrix
(
)
;
void
SetChildToParentConversionMatrix
(
const
LayoutDeviceToLayoutDeviceMatrix4x4
&
aMatrix
)
;
LayoutDeviceIntPoint
GetChildProcessOffset
(
)
;
LayoutDeviceIntPoint
GetClientOffset
(
)
;
void
StopIMEStateManagement
(
)
;
PPluginWidgetParent
*
AllocPPluginWidgetParent
(
)
;
bool
DeallocPPluginWidgetParent
(
PPluginWidgetParent
*
aActor
)
;
PPaymentRequestParent
*
AllocPPaymentRequestParent
(
)
;
bool
DeallocPPaymentRequestParent
(
PPaymentRequestParent
*
aActor
)
;
bool
SendLoadRemoteScript
(
const
nsString
&
aURL
const
bool
&
aRunInGlobalScope
)
;
void
LayerTreeUpdate
(
const
LayersObserverEpoch
&
aEpoch
bool
aActive
)
;
void
RequestRootPaint
(
gfx
:
:
CrossProcessPaint
*
aPaint
IntRect
aRect
float
aScale
nscolor
aBackgroundColor
)
;
void
RequestSubPaint
(
gfx
:
:
CrossProcessPaint
*
aPaint
float
aScale
nscolor
aBackgroundColor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInvokeDragSession
(
nsTArray
<
IPCDataTransfer
>
&
&
aTransfers
const
uint32_t
&
aAction
Maybe
<
Shmem
>
&
&
aVisualDnDData
const
uint32_t
&
aStride
const
gfx
:
:
SurfaceFormat
&
aFormat
const
LayoutDeviceIntRect
&
aDragRect
nsIPrincipal
*
aPrincipal
)
;
void
AddInitialDnDDataTo
(
DataTransfer
*
aDataTransfer
nsIPrincipal
*
*
aPrincipal
)
;
bool
TakeDragVisualization
(
RefPtr
<
mozilla
:
:
gfx
:
:
SourceSurface
>
&
aSurface
LayoutDeviceIntRect
*
aDragRect
)
;
layout
:
:
RenderFrame
*
GetRenderFrame
(
)
;
BrowserBridgeParent
*
GetBrowserBridgeParent
(
)
const
;
mozilla
:
:
ipc
:
:
IPCResult
RecvEnsureLayersConnected
(
CompositorOptions
*
aCompositorOptions
)
;
void
LiveResizeStarted
(
)
override
;
void
LiveResizeStopped
(
)
override
;
void
SetReadyToHandleInputEvents
(
)
{
mIsReadyToHandleInputEvents
=
true
;
}
bool
IsReadyToHandleInputEvents
(
)
{
return
mIsReadyToHandleInputEvents
;
}
void
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
;
ShowInfo
GetShowInfo
(
)
;
protected
:
bool
ReceiveMessage
(
const
nsString
&
aMessage
bool
aSync
ipc
:
:
StructuredCloneData
*
aData
mozilla
:
:
jsipc
:
:
CpowHolder
*
aCpows
nsIPrincipal
*
aPrincipal
nsTArray
<
ipc
:
:
StructuredCloneData
>
*
aJSONRetVal
=
nullptr
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncAuthPrompt
(
const
nsCString
&
aUri
const
nsString
&
aRealm
const
uint64_t
&
aCallbackId
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemotePaintIsReady
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyCompositorTransaction
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoteIsReadyToHandleInputEvents
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPaintWhileInterruptingJSNoOp
(
const
LayersObserverEpoch
&
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDimensions
(
const
uint32_t
&
aFlags
const
int32_t
&
aX
const
int32_t
&
aY
const
int32_t
&
aCx
const
int32_t
&
aCy
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShowCanvasPermissionPrompt
(
const
nsCString
&
aFirstPartyURI
const
bool
&
aHideDoorHanger
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetSystemFont
(
const
nsCString
&
aFontName
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetSystemFont
(
nsCString
*
aFontName
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvVisitURI
(
const
URIParams
&
aURI
const
Maybe
<
URIParams
>
&
aLastVisitedURI
const
uint32_t
&
aFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvQueryVisitedState
(
InfallibleTArray
<
URIParams
>
&
&
aURIs
)
;
private
:
void
SuppressDisplayport
(
bool
aEnabled
)
;
void
DestroyInternal
(
)
;
void
SetRenderLayersInternal
(
bool
aEnabled
bool
aForceRepaint
)
;
already_AddRefed
<
nsFrameLoader
>
GetFrameLoader
(
bool
aUseCachedFrameLoaderAfterDestroy
=
false
)
const
;
void
TryCacheDPIAndScale
(
)
;
bool
AsyncPanZoomEnabled
(
)
const
;
void
ApzAwareEventRoutingToChild
(
ScrollableLayerGuid
*
aOutTargetGuid
uint64_t
*
aOutInputBlockId
nsEventStatus
*
aOutApzResponse
)
;
bool
QueryDropLinksForVerification
(
)
;
private
:
typedef
nsDataHashtable
<
nsUint64HashKey
BrowserParent
*
>
LayerToBrowserParentTable
;
static
LayerToBrowserParentTable
*
sLayerToBrowserParentTable
;
static
void
AddBrowserParentToTable
(
layers
:
:
LayersId
aLayersId
BrowserParent
*
aBrowserParent
)
;
static
void
RemoveBrowserParentFromTable
(
layers
:
:
LayersId
aLayersId
)
;
static
StaticAutoPtr
<
nsTArray
<
BrowserParent
*
>
>
sFocusStack
;
static
void
PushFocus
(
BrowserParent
*
aBrowserParent
)
;
static
void
PopFocus
(
BrowserParent
*
aBrowserParent
)
;
TabId
mTabId
;
RefPtr
<
ContentParent
>
mManager
;
RefPtr
<
CanonicalBrowsingContext
>
mBrowsingContext
;
nsCOMPtr
<
nsILoadContext
>
mLoadContext
;
nsCOMPtr
<
Element
>
mFrameElement
;
nsCOMPtr
<
nsIBrowserDOMWindow
>
mBrowserDOMWindow
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
uint32_t
mChromeFlags
;
BrowserBridgeParent
*
mBrowserBridgeParent
;
ContentCacheInParent
mContentCache
;
layout
:
:
RenderFrame
mRenderFrame
;
LayersObserverEpoch
mLayerTreeEpoch
;
Maybe
<
LayoutDeviceToLayoutDeviceMatrix4x4
>
mChildToParentConversionMatrix
;
nsIntRect
mRect
;
ScreenIntSize
mDimensions
;
hal
:
:
ScreenOrientation
mOrientation
;
float
mDPI
;
int32_t
mRounding
;
CSSToLayoutDeviceScale
mDefaultScale
;
bool
mUpdatedDimensions
;
nsSizeMode
mSizeMode
;
LayoutDeviceIntPoint
mClientOffset
;
LayoutDeviceIntPoint
mChromeOffset
;
nsTArray
<
nsTArray
<
IPCDataTransferItem
>
>
mInitialDataTransferItems
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mDnDVisualization
;
bool
mDragValid
;
LayoutDeviceIntRect
mDragRect
;
nsCOMPtr
<
nsIPrincipal
>
mDragPrincipal
;
bool
mCreatingWindow
;
nsCString
mDelayedURL
;
nsTArray
<
FrameScriptInfo
>
mDelayedFrameScripts
;
nsCursor
mCursor
;
nsCOMPtr
<
imgIContainer
>
mCustomCursor
;
uint32_t
mCustomCursorHotspotX
mCustomCursorHotspotY
;
nsTArray
<
nsString
>
mVerifyDropLinks
;
#
ifdef
DEBUG
int32_t
mActiveSupressDisplayportCount
=
0
;
#
endif
bool
mDocShellIsActive
;
bool
mMarkedDestroying
;
bool
mIsDestroyed
;
bool
mTabSetsCursor
;
bool
mHasContentOpener
;
bool
mPreserveLayers
;
bool
mRenderLayers
;
bool
mActiveInPriorityManager
;
bool
mHasLayers
;
bool
mHasPresented
;
bool
mHasBeforeUnload
;
bool
mIsReadyToHandleInputEvents
;
bool
mIsMouseEnterIntoWidgetEventSuppressed
;
static
size_t
gNumActiveRecordReplayTabs
;
bool
mIsActiveRecordReplayTab
;
void
SetIsActiveRecordReplayTab
(
bool
aIsActive
)
;
}
;
struct
MOZ_STACK_CLASS
BrowserParent
:
:
AutoUseNewTab
final
{
public
:
AutoUseNewTab
(
BrowserParent
*
aNewTab
nsCString
*
aURLToLoad
)
:
mNewTab
(
aNewTab
)
mURLToLoad
(
aURLToLoad
)
{
MOZ_ASSERT
(
!
aNewTab
-
>
mCreatingWindow
)
;
aNewTab
-
>
mCreatingWindow
=
true
;
aNewTab
-
>
mDelayedURL
.
Truncate
(
)
;
}
~
AutoUseNewTab
(
)
{
mNewTab
-
>
mCreatingWindow
=
false
;
*
mURLToLoad
=
mNewTab
-
>
mDelayedURL
;
}
private
:
BrowserParent
*
mNewTab
;
nsCString
*
mURLToLoad
;
}
;
}
}
#
endif
