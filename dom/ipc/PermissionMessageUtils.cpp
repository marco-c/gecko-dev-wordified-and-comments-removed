#
include
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
#
include
"
nsISerializable
.
h
"
#
include
"
nsSerializationHelper
.
h
"
namespace
IPC
{
void
ParamTraits
<
nsIPrincipal
>
:
:
Write
(
Message
*
aMsg
nsIPrincipal
*
aParam
)
{
bool
isNull
=
!
aParam
;
WriteParam
(
aMsg
isNull
)
;
if
(
isNull
)
{
return
;
}
nsCString
principalString
;
nsresult
rv
=
NS_SerializeToString
(
aParam
principalString
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Unable
to
serialize
principal
.
"
)
;
return
;
}
WriteParam
(
aMsg
principalString
)
;
}
bool
ParamTraits
<
nsIPrincipal
>
:
:
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
RefPtr
<
nsIPrincipal
>
*
aResult
)
{
bool
isNull
;
if
(
!
ReadParam
(
aMsg
aIter
&
isNull
)
)
{
return
false
;
}
if
(
isNull
)
{
*
aResult
=
nullptr
;
return
true
;
}
nsCString
principalString
;
if
(
!
ReadParam
(
aMsg
aIter
&
principalString
)
)
{
return
false
;
}
nsCOMPtr
<
nsISupports
>
iSupports
;
nsresult
rv
=
NS_DeserializeObject
(
principalString
getter_AddRefs
(
iSupports
)
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
do_QueryInterface
(
iSupports
)
;
NS_ENSURE_TRUE
(
principal
false
)
;
*
aResult
=
principal
.
forget
(
)
;
return
true
;
}
}
