#
include
"
mozilla
/
dom
/
JSValidatorChild
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
using
namespace
mozilla
:
:
dom
;
mozilla
:
:
ipc
:
:
IPCResult
JSValidatorChild
:
:
RecvIsOpaqueResponseAllowed
(
IsOpaqueResponseAllowedResolver
&
&
aResolver
)
{
mResolver
.
emplace
(
aResolver
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
JSValidatorChild
:
:
RecvOnDataAvailable
(
Shmem
&
&
aData
)
{
MOZ_ASSERT
(
mResolver
)
;
if
(
!
mSourceBytes
.
Append
(
Span
(
aData
.
get
<
char
>
(
)
aData
.
Size
<
char
>
(
)
)
mozilla
:
:
fallible
)
)
{
Resolve
(
false
)
;
}
DeallocShmem
(
aData
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
JSValidatorChild
:
:
RecvOnStopRequest
(
const
nsresult
&
aReason
)
{
if
(
!
mResolver
)
{
return
IPC_OK
(
)
;
}
if
(
NS_FAILED
(
aReason
)
)
{
Resolve
(
false
)
;
}
else
{
Resolve
(
ShouldAllowJS
(
)
)
;
}
return
IPC_OK
(
)
;
}
void
JSValidatorChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mResolver
)
{
Resolve
(
false
)
;
}
}
;
void
JSValidatorChild
:
:
Resolve
(
bool
aAllow
)
{
MOZ_ASSERT
(
mResolver
)
;
Maybe
<
Shmem
>
data
=
Nothing
(
)
;
if
(
aAllow
)
{
if
(
!
mSourceBytes
.
IsEmpty
(
)
)
{
Shmem
sharedData
;
nsresult
rv
=
JSValidatorUtils
:
:
CopyCStringToShmem
(
this
mSourceBytes
sharedData
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
data
=
Some
(
std
:
:
move
(
sharedData
)
)
;
}
}
}
mResolver
.
ref
(
)
(
Tuple
<
const
bool
&
mozilla
:
:
Maybe
<
Shmem
>
&
&
>
(
aAllow
std
:
:
move
(
data
)
)
)
;
mResolver
=
Nothing
(
)
;
}
bool
JSValidatorChild
:
:
ShouldAllowJS
(
)
const
{
return
!
mSourceBytes
.
IsEmpty
(
)
?
!
StringBeginsWith
(
NS_ConvertUTF8toUTF16
(
mSourceBytes
)
u
"
{
"
_ns
)
:
true
;
}
