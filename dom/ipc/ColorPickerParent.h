#
ifndef
mozilla_dom_ColorPickerParent_h
#
define
mozilla_dom_ColorPickerParent_h
#
include
"
mozilla
/
dom
/
PColorPickerParent
.
h
"
#
include
"
nsIColorPicker
.
h
"
namespace
mozilla
:
:
dom
{
class
ColorPickerParent
:
public
PColorPickerParent
{
public
:
ColorPickerParent
(
const
nsString
&
aTitle
const
nsString
&
aInitialColor
const
nsTArray
<
nsString
>
&
aDefaultColors
)
:
mTitle
(
aTitle
)
mInitialColor
(
aInitialColor
)
mDefaultColors
(
aDefaultColors
.
Clone
(
)
)
{
}
NS_INLINE_DECL_REFCOUNTING
(
ColorPickerParent
final
)
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvOpen
(
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
class
ColorPickerShownCallback
final
:
public
nsIColorPickerShownCallback
{
public
:
explicit
ColorPickerShownCallback
(
ColorPickerParent
*
aColorPickerParnet
)
:
mColorPickerParent
(
aColorPickerParnet
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSICOLORPICKERSHOWNCALLBACK
void
Destroy
(
)
;
private
:
~
ColorPickerShownCallback
(
)
=
default
;
RefPtr
<
ColorPickerParent
>
mColorPickerParent
;
}
;
private
:
virtual
~
ColorPickerParent
(
)
=
default
;
bool
CreateColorPicker
(
)
;
RefPtr
<
ColorPickerShownCallback
>
mCallback
;
nsCOMPtr
<
nsIColorPicker
>
mPicker
;
nsString
mTitle
;
nsString
mInitialColor
;
nsTArray
<
nsString
>
mDefaultColors
;
}
;
}
#
endif
