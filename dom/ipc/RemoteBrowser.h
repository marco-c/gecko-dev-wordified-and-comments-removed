#
ifndef
mozilla_dom_ipc_RemoteBrowser_h
#
define
mozilla_dom_ipc_RemoteBrowser_h
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
dom
/
EffectsInfo
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowserHost
;
class
BrowserBridgeHost
;
class
OwnerShowInfo
;
class
RemoteBrowser
:
public
nsISupports
{
public
:
typedef
mozilla
:
:
layers
:
:
LayersId
LayersId
;
static
RemoteBrowser
*
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
;
static
RemoteBrowser
*
GetFrom
(
nsIContent
*
aContent
)
;
virtual
BrowserHost
*
AsBrowserHost
(
)
=
0
;
virtual
BrowserBridgeHost
*
AsBrowserBridgeHost
(
)
=
0
;
virtual
TabId
GetTabId
(
)
const
=
0
;
virtual
LayersId
GetLayersId
(
)
const
=
0
;
virtual
BrowsingContext
*
GetBrowsingContext
(
)
const
=
0
;
virtual
nsILoadContext
*
GetLoadContext
(
)
const
=
0
;
virtual
void
LoadURL
(
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
)
=
0
;
virtual
void
ResumeLoad
(
uint64_t
aPendingSwitchId
)
=
0
;
virtual
void
DestroyStart
(
)
=
0
;
virtual
void
DestroyComplete
(
)
=
0
;
virtual
bool
Show
(
const
OwnerShowInfo
&
)
=
0
;
virtual
void
UpdateDimensions
(
const
nsIntRect
&
aRect
const
ScreenIntSize
&
aSize
)
=
0
;
virtual
void
UpdateEffects
(
EffectsInfo
aInfo
)
=
0
;
}
;
}
}
#
endif
