#
include
"
mozilla
/
dom
/
JSProcessActorBinding
.
h
"
#
include
"
mozilla
/
dom
/
JSProcessActorParent
.
h
"
#
include
"
mozilla
/
dom
/
InProcessChild
.
h
"
#
include
"
mozilla
/
dom
/
InProcessParent
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
JSProcessActorParent
JSActor
mManager
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
JSProcessActorParent
)
NS_INTERFACE_MAP_END_INHERITING
(
JSActor
)
NS_IMPL_ADDREF_INHERITED
(
JSProcessActorParent
JSActor
)
NS_IMPL_RELEASE_INHERITED
(
JSProcessActorParent
JSActor
)
JSObject
*
JSProcessActorParent
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
JSProcessActorParent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
JSProcessActorParent
:
:
Init
(
const
nsACString
&
aName
nsIDOMProcessParent
*
aManager
)
{
MOZ_ASSERT
(
!
mManager
"
Cannot
Init
(
)
a
JSProcessActorParent
twice
!
"
)
;
mManager
=
aManager
;
JSActor
:
:
Init
(
aName
)
;
}
JSProcessActorParent
:
:
~
JSProcessActorParent
(
)
{
MOZ_ASSERT
(
!
mManager
)
;
}
void
JSProcessActorParent
:
:
SendRawMessage
(
const
JSActorMessageMeta
&
aMeta
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aStack
ErrorResult
&
aRv
)
{
if
(
NS_WARN_IF
(
!
CanSend
(
)
|
|
!
mManager
|
|
!
mManager
-
>
GetCanSend
(
)
)
)
{
aRv
.
ThrowInvalidStateError
(
nsPrintfCString
(
"
Actor
'
%
s
'
cannot
send
message
'
%
s
'
during
shutdown
.
"
PromiseFlatCString
(
aMeta
.
actorName
(
)
)
.
get
(
)
NS_ConvertUTF16toUTF8
(
aMeta
.
messageName
(
)
)
.
get
(
)
)
)
;
return
;
}
ContentParent
*
contentParent
=
mManager
-
>
AsContentParent
(
)
;
if
(
!
contentParent
)
{
SendRawMessageInProcess
(
aMeta
std
:
:
move
(
aData
)
std
:
:
move
(
aStack
)
[
]
(
)
{
return
do_AddRef
(
InProcessChild
:
:
Singleton
(
)
)
;
}
)
;
return
;
}
Maybe
<
ClonedMessageData
>
msgData
;
if
(
aData
)
{
msgData
.
emplace
(
)
;
if
(
NS_WARN_IF
(
!
aData
-
>
BuildClonedMessageData
(
*
msgData
)
)
)
{
aRv
.
ThrowDataCloneError
(
nsPrintfCString
(
"
Actor
'
%
s
'
cannot
send
message
'
%
s
'
:
cannot
clone
.
"
PromiseFlatCString
(
aMeta
.
actorName
(
)
)
.
get
(
)
NS_ConvertUTF16toUTF8
(
aMeta
.
messageName
(
)
)
.
get
(
)
)
)
;
return
;
}
}
Maybe
<
ClonedMessageData
>
stackData
;
if
(
aStack
)
{
stackData
.
emplace
(
)
;
if
(
!
aStack
-
>
BuildClonedMessageData
(
*
stackData
)
)
{
stackData
.
reset
(
)
;
}
}
if
(
NS_WARN_IF
(
!
contentParent
-
>
SendRawMessage
(
aMeta
msgData
stackData
)
)
)
{
aRv
.
ThrowOperationError
(
nsPrintfCString
(
"
JSProcessActorParent
send
error
in
actor
'
%
s
'
"
PromiseFlatCString
(
aMeta
.
actorName
(
)
)
.
get
(
)
)
)
;
return
;
}
}
void
JSProcessActorParent
:
:
ClearManager
(
)
{
mManager
=
nullptr
;
}
}
