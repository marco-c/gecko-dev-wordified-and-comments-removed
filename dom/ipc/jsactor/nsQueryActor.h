#
ifndef
nsQueryActor_h
#
define
nsQueryActor_h
#
include
<
type_traits
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
JSActor
.
h
"
#
include
"
mozilla
/
dom
/
JSActorManager
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
class
MOZ_STACK_CLASS
nsQueryJSActor
final
:
public
nsCOMPtr_helper
{
public
:
nsQueryJSActor
(
const
nsLiteralCString
aActorName
mozilla
:
:
dom
:
:
JSActorManager
*
aManager
)
:
mActorName
(
aActorName
)
mManager
(
aManager
)
{
}
nsresult
NS_FASTCALL
operator
(
)
(
const
nsIID
&
aIID
void
*
*
aResult
)
const
override
{
if
(
!
mManager
)
{
return
NS_ERROR_NO_INTERFACE
;
}
mozilla
:
:
dom
:
:
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
RefPtr
<
mozilla
:
:
dom
:
:
JSActor
>
actor
=
mManager
-
>
GetActor
(
jsapi
.
cx
(
)
mActorName
mozilla
:
:
IgnoreErrors
(
)
)
;
if
(
!
actor
)
{
return
NS_ERROR_NO_INTERFACE
;
}
return
actor
-
>
QueryInterfaceActor
(
aIID
aResult
)
;
}
private
:
const
nsLiteralCString
mActorName
;
mozilla
:
:
dom
:
:
JSActorManager
*
mManager
;
}
;
template
<
size_t
length
>
inline
nsQueryJSActor
do_QueryActor
(
const
char
(
&
aActorName
)
[
length
]
mozilla
:
:
dom
:
:
JSActorManager
*
aManager
)
{
return
nsQueryJSActor
(
nsLiteralCString
(
aActorName
)
aManager
)
;
}
template
<
size_t
length
>
inline
nsQueryJSActor
do_QueryActor
(
const
char
(
&
aActorName
)
[
length
]
nsPIDOMWindowInner
*
aWindow
)
{
return
nsQueryJSActor
(
nsLiteralCString
(
aActorName
)
aWindow
?
aWindow
-
>
GetWindowGlobalChild
(
)
:
nullptr
)
;
}
template
<
size_t
length
>
inline
nsQueryJSActor
do_QueryActor
(
const
char
(
&
aActorName
)
[
length
]
mozilla
:
:
dom
:
:
Document
*
aDoc
)
{
return
nsQueryJSActor
(
nsLiteralCString
(
aActorName
)
aDoc
?
aDoc
-
>
GetWindowGlobalChild
(
)
:
nullptr
)
;
}
template
<
size_t
length
typename
T
typename
=
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
T
nsIDOMProcessParent
>
|
|
std
:
:
is_same_v
<
T
nsIDOMProcessChild
>
>
>
inline
nsQueryJSActor
do_QueryActor
(
const
char
(
&
aActorName
)
[
length
]
T
*
aManager
)
{
return
nsQueryJSActor
(
nsLiteralCString
(
aActorName
)
aManager
?
aManager
-
>
AsJSActorManager
(
)
:
nullptr
)
;
}
#
endif
