#
ifndef
mozilla_dom_JSActorProtocolUtils_h
#
define
mozilla_dom_JSActorProtocolUtils_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
namespace
mozilla
{
namespace
dom
{
class
JSActorProtocolUtils
{
public
:
template
<
typename
ProtoT
typename
ActorInfoT
>
static
void
FromIPCShared
(
ProtoT
&
aProto
const
ActorInfoT
&
aInfo
)
{
aProto
-
>
mRemoteTypes
=
aInfo
.
remoteTypes
(
)
.
Clone
(
)
;
aProto
-
>
mChild
.
mESModuleURI
=
aInfo
.
url
(
)
;
aProto
-
>
mLoadInDevToolsLoader
=
aInfo
.
loadInDevToolsLoader
(
)
;
aProto
-
>
mChild
.
mObservers
=
aInfo
.
observers
(
)
.
Clone
(
)
;
}
template
<
typename
ProtoT
typename
ActorInfoT
>
static
void
ToIPCShared
(
ActorInfoT
&
aInfo
const
ProtoT
&
aProto
)
{
aInfo
.
name
(
)
=
aProto
-
>
mName
;
aInfo
.
remoteTypes
(
)
=
aProto
-
>
mRemoteTypes
.
Clone
(
)
;
aInfo
.
url
(
)
=
aProto
-
>
mChild
.
mESModuleURI
;
aInfo
.
loadInDevToolsLoader
(
)
=
aProto
-
>
mLoadInDevToolsLoader
;
aInfo
.
observers
(
)
=
aProto
-
>
mChild
.
mObservers
.
Clone
(
)
;
}
template
<
typename
ProtoT
typename
ActorOptionsT
>
static
bool
FromWebIDLOptionsShared
(
ProtoT
&
aProto
const
ActorOptionsT
&
aOptions
ErrorResult
&
aRv
)
{
if
(
aOptions
.
mRemoteTypes
.
WasPassed
(
)
)
{
MOZ_ASSERT
(
aOptions
.
mRemoteTypes
.
Value
(
)
.
Length
(
)
)
;
aProto
-
>
mRemoteTypes
=
aOptions
.
mRemoteTypes
.
Value
(
)
;
}
if
(
aOptions
.
mParent
.
WasPassed
(
)
)
{
const
auto
&
parentOptions
=
aOptions
.
mParent
.
Value
(
)
;
if
(
parentOptions
.
mEsModuleURI
.
WasPassed
(
)
)
{
aProto
-
>
mParent
.
mESModuleURI
.
emplace
(
parentOptions
.
mEsModuleURI
.
Value
(
)
)
;
}
else
{
aRv
.
ThrowNotSupportedError
(
"
Either
moduleURI
or
esModuleURI
is
required
.
"
)
;
return
false
;
}
}
if
(
aOptions
.
mChild
.
WasPassed
(
)
)
{
const
auto
&
childOptions
=
aOptions
.
mChild
.
Value
(
)
;
if
(
childOptions
.
mEsModuleURI
.
WasPassed
(
)
)
{
aProto
-
>
mChild
.
mESModuleURI
.
emplace
(
childOptions
.
mEsModuleURI
.
Value
(
)
)
;
}
else
{
aRv
.
ThrowNotSupportedError
(
"
Either
moduleURI
or
esModuleURI
is
required
.
"
)
;
return
false
;
}
}
if
(
!
aOptions
.
mChild
.
WasPassed
(
)
&
&
!
aOptions
.
mParent
.
WasPassed
(
)
)
{
aRv
.
ThrowNotSupportedError
(
"
No
point
registering
an
actor
with
neither
child
nor
parent
"
"
specifications
.
"
)
;
return
false
;
}
if
(
aOptions
.
mChild
.
WasPassed
(
)
&
&
aOptions
.
mChild
.
Value
(
)
.
mObservers
.
WasPassed
(
)
)
{
aProto
-
>
mChild
.
mObservers
=
aOptions
.
mChild
.
Value
(
)
.
mObservers
.
Value
(
)
;
}
return
true
;
}
}
;
}
}
#
endif
