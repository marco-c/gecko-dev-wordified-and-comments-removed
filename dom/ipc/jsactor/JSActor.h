#
ifndef
mozilla_dom_JSActor_h
#
define
mozilla_dom_JSActor_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
class
nsQueryJSActor
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
namespace
ipc
{
class
StructuredCloneData
;
}
class
JSActorManager
;
class
JSActorMessageMeta
;
class
QueryPromiseHandler
;
enum
class
JSActorMessageKind
{
Message
Query
QueryResolve
QueryReject
EndGuard_
}
;
class
JSActor
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
JSActor
)
explicit
JSActor
(
nsISupports
*
aGlobal
=
nullptr
)
;
const
nsCString
&
Name
(
)
const
{
return
mName
;
}
void
GetName
(
nsCString
&
aName
)
{
aName
=
Name
(
)
;
}
void
SendAsyncMessage
(
JSContext
*
aCx
const
nsAString
&
aMessageName
JS
:
:
Handle
<
JS
:
:
Value
>
aObj
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
SendQuery
(
JSContext
*
aCx
const
nsAString
&
aMessageName
JS
:
:
Handle
<
JS
:
:
Value
>
aObj
ErrorResult
&
aRv
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
;
protected
:
virtual
void
SendRawMessage
(
const
JSActorMessageMeta
&
aMetadata
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aStack
ErrorResult
&
aRv
)
=
0
;
using
OtherSideCallback
=
std
:
:
function
<
already_AddRefed
<
JSActorManager
>
(
)
>
;
static
void
SendRawMessageInProcess
(
const
JSActorMessageMeta
&
aMeta
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aStack
OtherSideCallback
&
&
aGetOtherSide
)
;
virtual
~
JSActor
(
)
=
default
;
void
SetName
(
const
nsACString
&
aName
)
;
bool
CanSend
(
)
const
{
return
mCanSend
;
}
void
ThrowStateErrorForGetter
(
const
char
*
aName
ErrorResult
&
aRv
)
const
;
void
StartDestroy
(
)
;
void
AfterDestroy
(
)
;
enum
class
CallbackFunction
{
DidDestroy
ActorCreated
}
;
void
InvokeCallback
(
CallbackFunction
callback
)
;
virtual
void
ClearManager
(
)
=
0
;
private
:
friend
class
JSActorManager
;
friend
class
:
:
nsQueryJSActor
;
nsresult
QueryInterfaceActor
(
const
nsIID
&
aIID
void
*
*
aPtr
)
;
void
ReceiveMessage
(
JSContext
*
aCx
const
JSActorMessageMeta
&
aMetadata
JS
:
:
Handle
<
JS
:
:
Value
>
aData
ErrorResult
&
aRv
)
;
void
ReceiveQuery
(
JSContext
*
aCx
const
JSActorMessageMeta
&
aMetadata
JS
:
:
Handle
<
JS
:
:
Value
>
aData
ErrorResult
&
aRv
)
;
void
ReceiveQueryReply
(
JSContext
*
aCx
const
JSActorMessageMeta
&
aMetadata
JS
:
:
Handle
<
JS
:
:
Value
>
aData
ErrorResult
&
aRv
)
;
void
CallReceiveMessage
(
JSContext
*
aCx
const
JSActorMessageMeta
&
aMetadata
JS
:
:
Handle
<
JS
:
:
Value
>
aData
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRetVal
ErrorResult
&
aRv
)
;
class
QueryHandler
final
:
public
PromiseNativeHandler
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
QueryHandler
)
QueryHandler
(
JSActor
*
aActor
const
JSActorMessageMeta
&
aMetadata
Promise
*
aPromise
)
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
private
:
~
QueryHandler
(
)
=
default
;
void
SendReply
(
JSContext
*
aCx
JSActorMessageKind
aKind
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
)
;
RefPtr
<
JSActor
>
mActor
;
RefPtr
<
Promise
>
mPromise
;
nsString
mMessageName
;
uint64_t
mQueryId
;
}
;
struct
PendingQuery
{
RefPtr
<
Promise
>
mPromise
;
nsString
mMessageName
;
}
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsCOMPtr
<
nsISupports
>
mWrappedJS
;
nsCString
mName
;
nsTHashMap
<
nsUint64HashKey
PendingQuery
>
mPendingQueries
;
uint64_t
mNextQueryId
=
0
;
bool
mCanSend
=
true
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
JSActorMessageKind
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
dom
:
:
JSActorMessageKind
mozilla
:
:
dom
:
:
JSActorMessageKind
:
:
Message
mozilla
:
:
dom
:
:
JSActorMessageKind
:
:
EndGuard_
>
{
}
;
}
#
endif
