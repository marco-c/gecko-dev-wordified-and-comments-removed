#
ifndef
mozilla_dom_JSProcessActorParent_h
#
define
mozilla_dom_JSProcessActorParent_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
JSActor
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIDOMProcessParent
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
JSProcessActorParent
final
:
public
JSActor
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
JSProcessActorParent
JSActor
)
explicit
JSProcessActorParent
(
nsISupports
*
aGlobal
=
nullptr
)
:
JSActor
(
aGlobal
)
{
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
JSProcessActorParent
>
Constructor
(
GlobalObject
&
aGlobal
)
{
return
MakeAndAddRef
<
JSProcessActorParent
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
nsIDOMProcessParent
*
Manager
(
)
const
{
return
mManager
;
}
void
Init
(
const
nsACString
&
aName
nsIDOMProcessParent
*
aManager
)
;
void
ClearManager
(
)
override
;
protected
:
virtual
void
SendRawMessage
(
const
JSActorMessageMeta
&
aMetadata
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aStack
ErrorResult
&
aRv
)
override
;
private
:
~
JSProcessActorParent
(
)
;
nsCOMPtr
<
nsIDOMProcessParent
>
mManager
;
}
;
}
}
#
endif
