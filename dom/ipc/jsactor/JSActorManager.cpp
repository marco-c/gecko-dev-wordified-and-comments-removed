#
include
"
mozilla
/
dom
/
JSActorManager
.
h
"
#
include
"
mozilla
/
dom
/
JSActorService
.
h
"
#
include
"
mozJSComponentLoader
.
h
"
#
include
"
jsapi
.
h
"
namespace
mozilla
{
namespace
dom
{
already_AddRefed
<
JSActor
>
JSActorManager
:
:
GetActor
(
const
nsACString
&
aName
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
mozilla
:
:
ipc
:
:
IProtocol
*
nativeActor
=
AsNativeActor
(
)
;
if
(
!
nativeActor
-
>
CanSend
(
)
)
{
aRv
.
ThrowInvalidStateError
(
nsPrintfCString
(
"
Cannot
get
actor
'
%
s
'
.
Native
'
%
s
'
actor
is
destroyed
.
"
PromiseFlatCString
(
aName
)
.
get
(
)
nativeActor
-
>
GetProtocolName
(
)
)
)
;
return
nullptr
;
}
if
(
RefPtr
<
JSActor
>
actor
=
mJSActors
.
Get
(
aName
)
)
{
return
actor
.
forget
(
)
;
}
RefPtr
<
JSActorService
>
actorSvc
=
JSActorService
:
:
GetSingleton
(
)
;
if
(
!
actorSvc
)
{
aRv
.
ThrowInvalidStateError
(
"
JSActorService
hasn
'
t
been
initialized
"
)
;
return
nullptr
;
}
RefPtr
<
JSActorProtocol
>
protocol
=
MatchingJSActorProtocol
(
actorSvc
aName
aRv
)
;
if
(
!
protocol
)
{
return
nullptr
;
}
bool
isParent
=
nativeActor
-
>
GetSide
(
)
=
=
mozilla
:
:
ipc
:
:
ParentSide
;
auto
&
side
=
isParent
?
protocol
-
>
Parent
(
)
:
protocol
-
>
Child
(
)
;
AutoEntryScript
aes
(
xpc
:
:
PrivilegedJunkScope
(
)
"
JSActor
construction
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
RefPtr
<
mozJSComponentLoader
>
loader
=
mozJSComponentLoader
:
:
Get
(
)
;
MOZ_ASSERT
(
loader
)
;
JS
:
:
RootedObject
actorObj
(
cx
)
;
if
(
side
.
mModuleURI
)
{
JS
:
:
RootedObject
global
(
cx
)
;
JS
:
:
RootedObject
exports
(
cx
)
;
aRv
=
loader
-
>
Import
(
cx
side
.
mModuleURI
.
ref
(
)
&
global
&
exports
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
exports
"
null
exports
!
"
)
;
JS
:
:
RootedValue
ctor
(
cx
)
;
nsAutoCString
ctorName
(
aName
)
;
ctorName
.
Append
(
isParent
?
"
Parent
"
_ns
:
"
Child
"
_ns
)
;
if
(
!
JS_GetProperty
(
cx
exports
ctorName
.
get
(
)
&
ctor
)
)
{
aRv
.
NoteJSContextException
(
cx
)
;
return
nullptr
;
}
if
(
NS_WARN_IF
(
!
ctor
.
isObject
(
)
)
)
{
aRv
.
ThrowNotFoundError
(
nsPrintfCString
(
"
Could
not
find
actor
constructor
'
%
s
'
"
PromiseFlatCString
(
ctorName
)
.
get
(
)
)
)
;
return
nullptr
;
}
if
(
!
JS
:
:
Construct
(
cx
ctor
JS
:
:
HandleValueArray
:
:
empty
(
)
&
actorObj
)
)
{
aRv
.
NoteJSContextException
(
cx
)
;
return
nullptr
;
}
}
RefPtr
<
JSActor
>
actor
=
InitJSActor
(
actorObj
aName
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
mJSActors
.
Put
(
aName
RefPtr
{
actor
}
)
;
return
actor
.
forget
(
)
;
}
void
JSActorManager
:
:
JSActorWillDestroy
(
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
nsTArray
<
RefPtr
<
JSActor
>
>
actors
(
mJSActors
.
Count
(
)
)
;
for
(
auto
&
entry
:
mJSActors
)
{
actors
.
AppendElement
(
entry
.
GetData
(
)
)
;
}
for
(
auto
&
actor
:
actors
)
{
actor
-
>
StartDestroy
(
)
;
}
}
void
JSActorManager
:
:
JSActorDidDestroy
(
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
nsRefPtrHashtable
<
nsCStringHashKey
JSActor
>
actors
;
mJSActors
.
SwapElements
(
actors
)
;
for
(
auto
&
entry
:
actors
)
{
entry
.
GetData
(
)
-
>
AfterDestroy
(
)
;
}
}
}
}
