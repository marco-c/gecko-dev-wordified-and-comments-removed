#
ifndef
mozilla_dom_JSActorManager_h
#
define
mozilla_dom_JSActorManager_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
JSActor
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
IProtocol
;
}
namespace
dom
{
class
JSActorProtocol
;
class
JSActorService
;
class
JSActorManager
:
public
nsISupports
{
public
:
already_AddRefed
<
JSActor
>
GetActor
(
const
nsACString
&
aName
ErrorResult
&
aRv
)
;
void
ReceiveRawMessage
(
const
JSActorMessageMeta
&
aMetadata
ipc
:
:
StructuredCloneData
&
&
aData
ipc
:
:
StructuredCloneData
&
&
aStack
)
;
protected
:
void
JSActorWillDestroy
(
)
;
void
JSActorDidDestroy
(
)
;
virtual
already_AddRefed
<
JSActorProtocol
>
MatchingJSActorProtocol
(
JSActorService
*
aActorSvc
const
nsACString
&
aName
ErrorResult
&
aRv
)
=
0
;
virtual
already_AddRefed
<
JSActor
>
InitJSActor
(
JS
:
:
HandleObject
aMaybeActor
const
nsACString
&
aName
ErrorResult
&
aRv
)
=
0
;
virtual
mozilla
:
:
ipc
:
:
IProtocol
*
AsNativeActor
(
)
=
0
;
private
:
friend
class
JSActorService
;
void
JSActorUnregister
(
const
nsACString
&
aName
)
;
nsRefPtrHashtable
<
nsCStringHashKey
JSActor
>
mJSActors
;
}
;
}
}
#
endif
