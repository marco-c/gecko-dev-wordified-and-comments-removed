#
ifndef
mozilla_dom_JSWindowActorParent_h
#
define
mozilla_dom_JSWindowActorParent_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
JSActor
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
WindowGlobalParent
;
}
}
namespace
mozilla
:
:
dom
{
class
JSWindowActorParent
final
:
public
JSActor
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
JSWindowActorParent
JSActor
)
explicit
JSWindowActorParent
(
nsISupports
*
aGlobal
=
nullptr
)
:
JSActor
(
aGlobal
)
{
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
JSWindowActorParent
>
Constructor
(
GlobalObject
&
aGlobal
)
{
return
MakeAndAddRef
<
JSWindowActorParent
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
WindowGlobalParent
*
GetManager
(
)
const
;
WindowContext
*
GetWindowContext
(
)
const
;
void
Init
(
const
nsACString
&
aName
WindowGlobalParent
*
aManager
)
;
void
ClearManager
(
)
override
;
CanonicalBrowsingContext
*
GetBrowsingContext
(
ErrorResult
&
aRv
)
;
protected
:
void
SendRawMessage
(
const
JSActorMessageMeta
&
aMeta
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aData
Maybe
<
ipc
:
:
StructuredCloneData
>
&
&
aStack
ErrorResult
&
aRv
)
override
;
private
:
~
JSWindowActorParent
(
)
;
RefPtr
<
WindowGlobalParent
>
mManager
;
}
;
}
#
endif
