#
ifndef
TABMESSAGE_UTILS_H
#
define
TABMESSAGE_UTILS_H
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
nsIDOMEvent
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
namespace
mozilla
{
namespace
dom
{
struct
RemoteDOMEvent
{
nsCOMPtr
<
nsIDOMEvent
>
mEvent
;
}
;
bool
ReadRemoteEvent
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
mozilla
:
:
dom
:
:
RemoteDOMEvent
*
aResult
)
;
#
ifdef
MOZ_CRASHREPORTER
typedef
CrashReporter
:
:
ThreadId
NativeThreadId
;
#
else
typedef
int32_t
NativeThreadId
;
#
endif
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
RemoteDOMEvent
>
{
typedef
mozilla
:
:
dom
:
:
RemoteDOMEvent
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aParam
.
mEvent
-
>
Serialize
(
aMsg
true
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
mozilla
:
:
dom
:
:
ReadRemoteEvent
(
aMsg
aIter
aResult
)
;
}
static
void
Log
(
const
paramType
&
aParam
std
:
:
wstring
*
aLog
)
{
}
}
;
template
<
>
struct
ParamTraits
<
nsEventStatus
>
:
public
ContiguousEnumSerializer
<
nsEventStatus
nsEventStatus_eIgnore
nsEventStatus_eSentinel
>
{
}
;
template
<
>
struct
ParamTraits
<
nsSizeMode
>
:
public
ContiguousEnumSerializer
<
nsSizeMode
nsSizeMode_Normal
nsSizeMode_Invalid
>
{
}
;
template
<
>
struct
ParamTraits
<
UIStateChangeType
>
:
public
ContiguousEnumSerializer
<
UIStateChangeType
UIStateChangeType_NoChange
UIStateChangeType_Invalid
>
{
}
;
}
#
endif
