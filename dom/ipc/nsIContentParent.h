#
ifndef
mozilla_dom_nsIContentParent_h
#
define
mozilla_dom_nsIContentParent_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
dom
/
CPOWManagerGetter
.
h
"
#
define
NS_ICONTENTPARENT_IID
\
{
0xeeec9ebf
0x8ecf
0x4e38
\
{
0x81
0xda
0xb7
0x34
0x13
0x7e
0xac
0xf3
}
}
namespace
IPC
{
class
Principal
;
}
namespace
mozilla
{
namespace
jsipc
{
class
PJavaScriptParent
;
class
CpowEntry
;
}
namespace
ipc
{
class
PFileDescriptorSetParent
;
class
PSendStreamParent
;
}
namespace
dom
{
class
Blob
;
class
BlobConstructorParams
;
class
BlobImpl
;
class
BlobParent
;
class
ContentParent
;
class
ContentBridgeParent
;
class
IPCTabContext
;
class
PBlobParent
;
class
PBrowserParent
;
class
nsIContentParent
:
public
nsISupports
public
mozilla
:
:
dom
:
:
ipc
:
:
MessageManagerCallback
public
CPOWManagerGetter
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ICONTENTPARENT_IID
)
nsIContentParent
(
)
;
BlobParent
*
GetOrCreateActorForBlob
(
Blob
*
aBlob
)
;
BlobParent
*
GetOrCreateActorForBlobImpl
(
BlobImpl
*
aImpl
)
;
virtual
ContentParentId
ChildID
(
)
const
=
0
;
virtual
bool
IsForBrowser
(
)
const
=
0
;
MOZ_MUST_USE
virtual
PBlobParent
*
SendPBlobConstructor
(
PBlobParent
*
aActor
const
BlobConstructorParams
&
aParams
)
=
0
;
MOZ_MUST_USE
virtual
PBrowserParent
*
SendPBrowserConstructor
(
PBrowserParent
*
actor
const
TabId
&
aTabId
const
IPCTabContext
&
context
const
uint32_t
&
chromeFlags
const
ContentParentId
&
aCpId
const
bool
&
aIsForBrowser
)
=
0
;
virtual
bool
IsContentParent
(
)
const
{
return
false
;
}
ContentParent
*
AsContentParent
(
)
;
virtual
bool
IsContentBridgeParent
(
)
const
{
return
false
;
}
ContentBridgeParent
*
AsContentBridgeParent
(
)
;
nsFrameMessageManager
*
GetMessageManager
(
)
const
{
return
mMessageManager
;
}
virtual
int32_t
Pid
(
)
const
=
0
;
protected
:
bool
CanOpenBrowser
(
const
IPCTabContext
&
aContext
)
;
protected
:
virtual
mozilla
:
:
jsipc
:
:
PJavaScriptParent
*
AllocPJavaScriptParent
(
)
;
virtual
bool
DeallocPJavaScriptParent
(
mozilla
:
:
jsipc
:
:
PJavaScriptParent
*
)
;
virtual
PBrowserParent
*
AllocPBrowserParent
(
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpId
const
bool
&
aIsForBrowser
)
;
virtual
bool
DeallocPBrowserParent
(
PBrowserParent
*
frame
)
;
virtual
PBlobParent
*
AllocPBlobParent
(
const
BlobConstructorParams
&
aParams
)
;
virtual
bool
DeallocPBlobParent
(
PBlobParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
PFileDescriptorSetParent
*
AllocPFileDescriptorSetParent
(
const
mozilla
:
:
ipc
:
:
FileDescriptor
&
aFD
)
;
virtual
bool
DeallocPFileDescriptorSetParent
(
mozilla
:
:
ipc
:
:
PFileDescriptorSetParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
PSendStreamParent
*
AllocPSendStreamParent
(
)
;
virtual
bool
DeallocPSendStreamParent
(
mozilla
:
:
ipc
:
:
PSendStreamParent
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSyncMessage
(
const
nsString
&
aMsg
const
ClonedMessageData
&
aData
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
nsTArray
<
ipc
:
:
StructuredCloneData
>
*
aRetvals
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvRpcMessage
(
const
nsString
&
aMsg
const
ClonedMessageData
&
aData
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
nsTArray
<
ipc
:
:
StructuredCloneData
>
*
aRetvals
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncMessage
(
const
nsString
&
aMsg
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
;
protected
:
RefPtr
<
nsFrameMessageManager
>
mMessageManager
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIContentParent
NS_ICONTENTPARENT_IID
)
}
}
#
endif
