#
include
"
mozilla
/
dom
/
BrowserBridgeChild
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsQueryObject
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
BrowserBridgeChild
:
:
BrowserBridgeChild
(
nsFrameLoader
*
aFrameLoader
)
:
mLayersId
{
0
}
mIPCOpen
(
true
)
mFrameLoader
(
aFrameLoader
)
{
}
BrowserBridgeChild
:
:
~
BrowserBridgeChild
(
)
{
}
already_AddRefed
<
BrowserBridgeChild
>
BrowserBridgeChild
:
:
Create
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
RefPtr
<
Element
>
owner
=
aFrameLoader
-
>
GetOwnerContent
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
owner
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_GetInterface
(
owner
-
>
GetOwnerGlobal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
docShell
)
;
RefPtr
<
TabChild
>
tabChild
=
TabChild
:
:
GetFrom
(
docShell
)
;
MOZ_DIAGNOSTIC_ASSERT
(
tabChild
)
;
RefPtr
<
BrowserBridgeChild
>
browserBridge
=
new
BrowserBridgeChild
(
aFrameLoader
)
;
tabChild
-
>
SendPBrowserBridgeConstructor
(
do_AddRef
(
browserBridge
)
.
take
(
)
PromiseFlatString
(
aContext
.
PresentationURL
(
)
)
aRemoteType
)
;
browserBridge
-
>
mIPCOpen
=
true
;
return
browserBridge
.
forget
(
)
;
}
void
BrowserBridgeChild
:
:
UpdateDimensions
(
const
nsIntRect
&
aRect
const
mozilla
:
:
ScreenIntSize
&
aSize
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mIPCOpen
)
;
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsContentUtils
:
:
WidgetForContent
(
owner
)
;
if
(
!
widget
)
{
widget
=
nsContentUtils
:
:
WidgetForDocument
(
owner
-
>
OwnerDoc
(
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
widget
)
;
CSSToLayoutDeviceScale
widgetScale
=
widget
-
>
GetDefaultScale
(
)
;
LayoutDeviceIntRect
devicePixelRect
=
ViewAs
<
LayoutDevicePixel
>
(
aRect
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntSize
devicePixelSize
=
ViewAs
<
LayoutDevicePixel
>
(
aSize
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntPoint
clientOffset
;
LayoutDeviceIntPoint
chromeOffset
;
CSSRect
unscaledRect
=
devicePixelRect
/
widgetScale
;
CSSSize
unscaledSize
=
devicePixelSize
/
widgetScale
;
hal
:
:
ScreenOrientation
orientation
=
hal
:
:
eScreenOrientation_Default
;
DimensionInfo
di
(
unscaledRect
unscaledSize
orientation
clientOffset
chromeOffset
)
;
Unused
<
<
SendUpdateDimensions
(
di
)
;
}
void
BrowserBridgeChild
:
:
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
{
Unused
<
<
SendNavigateByKey
(
aForward
aForDocumentNavigation
)
;
}
void
BrowserBridgeChild
:
:
Activate
(
)
{
Unused
<
<
SendActivate
(
)
;
}
void
BrowserBridgeChild
:
:
Deactivate
(
)
{
Unused
<
<
SendDeactivate
(
)
;
}
BrowserBridgeChild
*
BrowserBridgeChild
:
:
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
{
if
(
!
aFrameLoader
)
{
return
nullptr
;
}
return
aFrameLoader
-
>
GetBrowserBridgeChild
(
)
;
}
BrowserBridgeChild
*
BrowserBridgeChild
:
:
GetFrom
(
nsIContent
*
aContent
)
{
RefPtr
<
nsFrameLoaderOwner
>
loaderOwner
=
do_QueryObject
(
aContent
)
;
if
(
!
loaderOwner
)
{
return
nullptr
;
}
RefPtr
<
nsFrameLoader
>
frameLoader
=
loaderOwner
-
>
GetFrameLoader
(
)
;
return
GetFrom
(
frameLoader
)
;
}
IPCResult
BrowserBridgeChild
:
:
RecvSetLayersId
(
const
mozilla
:
:
layers
:
:
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
!
mLayersId
.
IsValid
(
)
&
&
aLayersId
.
IsValid
(
)
)
;
mLayersId
=
aLayersId
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BrowserBridgeChild
:
:
RecvRequestFocus
(
const
bool
&
aCanRaise
)
{
nsCOMPtr
<
nsIFocusManager
>
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
if
(
!
owner
|
|
!
owner
-
>
OwnerDoc
(
)
)
{
return
IPC_OK
(
)
;
}
uint32_t
flags
=
nsIFocusManager
:
:
FLAG_NOSCROLL
;
if
(
aCanRaise
)
{
flags
|
=
nsIFocusManager
:
:
FLAG_RAISE
;
}
fm
-
>
SetFocus
(
owner
flags
)
;
return
IPC_OK
(
)
;
}
void
BrowserBridgeChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
}
}
