#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
XP_WIN
)
#
include
"
mozilla
/
a11y
/
ProxyAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
ProxyWrappers
.
h
"
#
endif
#
include
"
mozilla
/
dom
/
BrowserBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
BrowserBridgeChild
:
:
BrowserBridgeChild
(
nsFrameLoader
*
aFrameLoader
BrowsingContext
*
aBrowsingContext
TabId
aId
)
:
mId
{
aId
}
mLayersId
{
0
}
mIPCOpen
(
true
)
mFrameLoader
(
aFrameLoader
)
mBrowsingContext
(
aBrowsingContext
)
{
}
BrowserBridgeChild
:
:
~
BrowserBridgeChild
(
)
{
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
XP_WIN
)
if
(
mEmbeddedDocAccessible
)
{
mEmbeddedDocAccessible
-
>
Shutdown
(
)
;
}
#
endif
}
void
BrowserBridgeChild
:
:
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
{
Unused
<
<
SendNavigateByKey
(
aForward
aForDocumentNavigation
)
;
}
void
BrowserBridgeChild
:
:
Activate
(
)
{
Unused
<
<
SendActivate
(
)
;
}
void
BrowserBridgeChild
:
:
Deactivate
(
)
{
Unused
<
<
SendDeactivate
(
)
;
}
void
BrowserBridgeChild
:
:
SetIsUnderHiddenEmbedderElement
(
bool
aIsUnderHiddenEmbedderElement
)
{
Unused
<
<
SendSetIsUnderHiddenEmbedderElement
(
aIsUnderHiddenEmbedderElement
)
;
}
BrowserBridgeChild
*
BrowserBridgeChild
:
:
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
{
if
(
!
aFrameLoader
)
{
return
nullptr
;
}
return
aFrameLoader
-
>
GetBrowserBridgeChild
(
)
;
}
BrowserBridgeChild
*
BrowserBridgeChild
:
:
GetFrom
(
nsIContent
*
aContent
)
{
RefPtr
<
nsFrameLoaderOwner
>
loaderOwner
=
do_QueryObject
(
aContent
)
;
if
(
!
loaderOwner
)
{
return
nullptr
;
}
RefPtr
<
nsFrameLoader
>
frameLoader
=
loaderOwner
-
>
GetFrameLoader
(
)
;
return
GetFrom
(
frameLoader
)
;
}
IPCResult
BrowserBridgeChild
:
:
RecvSetLayersId
(
const
mozilla
:
:
layers
:
:
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
!
mLayersId
.
IsValid
(
)
&
&
aLayersId
.
IsValid
(
)
)
;
mLayersId
=
aLayersId
;
if
(
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
)
{
if
(
nsIFrame
*
frame
=
owner
-
>
GetPrimaryFrame
(
)
)
{
frame
-
>
InvalidateFrame
(
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BrowserBridgeChild
:
:
RecvRequestFocus
(
const
bool
&
aCanRaise
)
{
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
if
(
!
owner
)
{
return
IPC_OK
(
)
;
}
nsContentUtils
:
:
RequestFrameFocus
(
*
owner
aCanRaise
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BrowserBridgeChild
:
:
RecvMoveFocus
(
const
bool
&
aForward
const
bool
&
aForDocumentNavigation
)
{
nsCOMPtr
<
nsIFocusManager
>
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
if
(
!
owner
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
Element
>
dummy
;
uint32_t
type
=
aForward
?
(
aForDocumentNavigation
?
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_FORWARDDOC
)
:
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_FORWARD
)
)
:
(
aForDocumentNavigation
?
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_BACKWARDDOC
)
:
static_cast
<
uint32_t
>
(
nsIFocusManager
:
:
MOVEFOCUS_BACKWARD
)
)
;
fm
-
>
MoveFocus
(
nullptr
owner
type
nsIFocusManager
:
:
FLAG_BYKEY
getter_AddRefs
(
dummy
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BrowserBridgeChild
:
:
RecvSetEmbeddedDocAccessibleCOMProxy
(
const
a11y
:
:
IDispatchHolder
&
aCOMProxy
)
{
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
XP_WIN
)
MOZ_ASSERT
(
!
aCOMProxy
.
IsNull
(
)
)
;
if
(
mEmbeddedDocAccessible
)
{
mEmbeddedDocAccessible
-
>
Shutdown
(
)
;
}
RefPtr
<
IDispatch
>
comProxy
(
aCOMProxy
.
Get
(
)
)
;
mEmbeddedDocAccessible
=
new
a11y
:
:
RemoteIframeDocProxyAccessibleWrap
(
comProxy
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
BrowserBridgeChild
:
:
RecvFireFrameLoadEvent
(
bool
aIsTrusted
)
{
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
if
(
!
owner
)
{
return
IPC_OK
(
)
;
}
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetEvent
event
(
aIsTrusted
eLoad
)
;
event
.
mFlags
.
mBubbles
=
false
;
event
.
mFlags
.
mCancelable
=
false
;
EventDispatcher
:
:
Dispatch
(
owner
nullptr
&
event
nullptr
&
status
)
;
return
IPC_OK
(
)
;
}
void
BrowserBridgeChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
}
}
