include
protocol
PBrowser
;
#
ifdef
ACCESSIBILITY
include
protocol
PDocAccessible
;
#
endif
include
DOMTypes
;
include
PPrintingTypes
;
include
"
mozilla
/
LayoutMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
BindingIPCUtils
.
h
"
;
include
"
mozilla
/
dom
/
DocShellMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
using
class
mozilla
:
:
WidgetMouseEvent
from
"
ipc
/
nsGUIEventIPC
.
h
"
;
using
mozilla
:
:
dom
:
:
EffectsInfo
from
"
mozilla
/
dom
/
EffectsInfo
.
h
"
;
using
mozilla
:
:
ScrollAxis
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
mozilla
:
:
ScrollFlags
from
"
mozilla
/
PresShellForwards
.
h
"
;
using
struct
nsRect
from
"
nsRect
.
h
"
;
using
mozilla
:
:
dom
:
:
CallerType
from
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
;
using
nsIntRect
from
"
nsRect
.
h
"
;
using
mozilla
:
:
dom
:
:
EmbedderElementEventType
from
"
mozilla
/
dom
/
TabMessageTypes
.
h
"
;
[
RefCounted
]
using
class
nsDocShellLoadState
from
"
nsDocShellLoadState
.
h
"
;
using
mozilla
:
:
IntrinsicSize
from
"
nsIFrame
.
h
"
;
using
mozilla
:
:
AspectRatio
from
"
mozilla
/
AspectRatio
.
h
"
;
using
mozilla
:
:
StyleImageRendering
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
namespace
mozilla
{
namespace
dom
{
async
protocol
PBrowserBridge
{
manager
PBrowser
;
child
:
async
RequestFocus
(
bool
canRaise
CallerType
aCallerType
)
;
async
MoveFocus
(
bool
forward
bool
forDocumentNavigation
)
;
async
MaybeFireEmbedderLoadEvents
(
EmbedderElementEventType
aFireEventAtEmbeddingElement
)
;
async
ScrollRectIntoView
(
nsRect
aRect
ScrollAxis
aVertical
ScrollAxis
aHorizontal
ScrollFlags
aScrollFlags
int32_t
aAppUnitsPerDevPixel
)
;
async
SubFrameCrashed
(
)
;
async
IntrinsicSizeOrRatioChanged
(
IntrinsicSize
?
aIntrinsicSize
AspectRatio
?
aIntrinsicRatio
)
;
async
ImageLoadComplete
(
nsresult
aResult
)
;
both
:
async
__delete__
(
)
;
parent
:
async
BeginDestroy
(
)
;
async
LoadURL
(
nsDocShellLoadState
aLoadState
)
;
async
ResumeLoad
(
uint64_t
aPendingSwitchID
)
;
async
Show
(
OwnerShowInfo
info
)
;
async
ScrollbarPreferenceChanged
(
ScrollbarPreference
pref
)
;
[
Compress
=
all
]
async
UpdateDimensions
(
nsIntRect
rect
ScreenIntSize
size
)
;
async
RenderLayers
(
bool
aEnabled
)
;
async
UpdateEffects
(
EffectsInfo
aEffects
)
;
async
UpdateRemotePrintSettings
(
PrintData
aPrintData
)
;
async
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
;
async
DispatchSynthesizedMouseEvent
(
WidgetMouseEvent
event
)
;
async
Activate
(
uint64_t
aActionId
)
;
async
Deactivate
(
bool
aWindowLowering
uint64_t
aActionId
)
;
async
UpdateRemoteStyle
(
StyleImageRendering
aImageRendering
)
;
async
WillChangeProcess
(
)
;
#
ifdef
ACCESSIBILITY
async
SetEmbedderAccessible
(
nullable
PDocAccessible
aDoc
uint64_t
aID
)
;
#
endif
}
;
}
}
