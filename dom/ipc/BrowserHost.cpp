#
include
"
mozilla
/
dom
/
BrowserHost
.
h
"
#
include
"
mozilla
/
dom
/
CancelContentJSOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
BrowserHost
nsIRemoteTab
)
BrowserHost
:
:
BrowserHost
(
BrowserParent
*
aParent
)
:
mRoot
(
aParent
)
{
mRoot
-
>
SetBrowserHost
(
this
)
;
}
BrowserHost
*
BrowserHost
:
:
GetFrom
(
nsIRemoteTab
*
aRemoteTab
)
{
return
static_cast
<
BrowserHost
*
>
(
aRemoteTab
)
;
}
mozilla
:
:
layers
:
:
LayersId
BrowserHost
:
:
GetLayersId
(
)
const
{
return
mRoot
-
>
GetRenderFrame
(
)
-
>
GetLayersId
(
)
;
}
BrowsingContext
*
BrowserHost
:
:
GetBrowsingContext
(
)
const
{
return
mRoot
-
>
GetBrowsingContext
(
)
;
}
nsILoadContext
*
BrowserHost
:
:
GetLoadContext
(
)
const
{
RefPtr
<
nsILoadContext
>
loadContext
=
mRoot
-
>
GetLoadContext
(
)
;
return
loadContext
;
}
a11y
:
:
DocAccessibleParent
*
BrowserHost
:
:
GetTopLevelDocAccessible
(
)
const
{
return
mRoot
-
>
GetTopLevelDocAccessible
(
)
;
}
void
BrowserHost
:
:
LoadURL
(
nsIURI
*
aURI
)
{
mRoot
-
>
LoadURL
(
aURI
)
;
}
void
BrowserHost
:
:
ResumeLoad
(
uint64_t
aPendingSwitchId
)
{
mRoot
-
>
ResumeLoad
(
aPendingSwitchId
)
;
}
void
BrowserHost
:
:
DestroyStart
(
)
{
mRoot
-
>
Destroy
(
)
;
}
void
BrowserHost
:
:
DestroyComplete
(
)
{
if
(
!
mRoot
)
{
return
;
}
mRoot
-
>
SetOwnerElement
(
nullptr
)
;
mRoot
-
>
Destroy
(
)
;
mRoot
=
nullptr
;
}
bool
BrowserHost
:
:
Show
(
const
ScreenIntSize
&
aSize
bool
aParentIsActive
)
{
return
mRoot
-
>
Show
(
aSize
aParentIsActive
)
;
}
void
BrowserHost
:
:
UpdateDimensions
(
const
nsIntRect
&
aRect
const
ScreenIntSize
&
aSize
)
{
mRoot
-
>
UpdateDimensions
(
aRect
aSize
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetDocShellIsActive
(
bool
*
aDocShellIsActive
)
{
return
mRoot
-
>
GetDocShellIsActive
(
aDocShellIsActive
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
SetDocShellIsActive
(
bool
aDocShellIsActive
)
{
return
mRoot
-
>
SetDocShellIsActive
(
aDocShellIsActive
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetRenderLayers
(
bool
*
aRenderLayers
)
{
return
mRoot
-
>
GetRenderLayers
(
aRenderLayers
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
SetRenderLayers
(
bool
aRenderLayers
)
{
return
mRoot
-
>
SetRenderLayers
(
aRenderLayers
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasLayers
(
bool
*
aHasLayers
)
{
return
mRoot
-
>
GetHasLayers
(
aHasLayers
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
ForceRepaint
(
void
)
{
return
mRoot
-
>
ForceRepaint
(
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
NotifyResolutionChanged
(
void
)
{
return
mRoot
-
>
NotifyResolutionChanged
(
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
Deprioritize
(
void
)
{
return
mRoot
-
>
Deprioritize
(
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
PreserveLayers
(
bool
aPreserveLayers
)
{
return
mRoot
-
>
PreserveLayers
(
aPreserveLayers
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetTabId
(
uint64_t
*
aTabId
)
{
return
mRoot
-
>
GetTabId
(
aTabId
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetContentProcessId
(
uint64_t
*
aContentProcessId
)
{
return
mRoot
-
>
GetContentProcessId
(
aContentProcessId
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetOsPid
(
int32_t
*
aOsPid
)
{
return
mRoot
-
>
GetOsPid
(
aOsPid
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasContentOpener
(
bool
*
aHasContentOpener
)
{
return
mRoot
-
>
GetHasContentOpener
(
aHasContentOpener
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasPresented
(
bool
*
aHasPresented
)
{
return
mRoot
-
>
GetHasPresented
(
aHasPresented
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetWindowGlobalParents
(
nsTArray
<
RefPtr
<
WindowGlobalParent
>
>
&
aWindowGlobalParents
)
{
return
mRoot
-
>
GetWindowGlobalParents
(
aWindowGlobalParents
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
TransmitPermissionsForPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
return
mRoot
-
>
TransmitPermissionsForPrincipal
(
aPrincipal
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasBeforeUnload
(
bool
*
aHasBeforeUnload
)
{
return
mRoot
-
>
GetHasBeforeUnload
(
aHasBeforeUnload
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetOwnerElement
(
mozilla
:
:
dom
:
:
Element
*
*
aOwnerElement
)
{
*
aOwnerElement
=
mRoot
-
>
GetOwnerElement
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
StartApzAutoscroll
(
float
aAnchorX
float
aAnchorY
nsViewID
aScrollId
uint32_t
aPresShellId
bool
*
_retval
)
{
return
mRoot
-
>
StartApzAutoscroll
(
aAnchorX
aAnchorY
aScrollId
aPresShellId
_retval
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
StopApzAutoscroll
(
nsViewID
aScrollId
uint32_t
aPresShellId
)
{
return
mRoot
-
>
StopApzAutoscroll
(
aScrollId
aPresShellId
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
SaveRecording
(
const
nsAString
&
aFileName
bool
*
_retval
)
{
return
mRoot
-
>
SaveRecording
(
aFileName
_retval
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetContentBlockingLog
(
:
:
mozilla
:
:
dom
:
:
Promise
*
*
_retval
)
{
return
mRoot
-
>
GetContentBlockingLog
(
_retval
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
MaybeCancelContentJSExecutionFromScript
(
nsIRemoteTab
:
:
NavigationType
aNavigationType
JS
:
:
Handle
<
JS
:
:
Value
>
aCancelContentJSOptions
JSContext
*
aCx
)
{
return
mRoot
-
>
MaybeCancelContentJSExecutionFromScript
(
aNavigationType
aCancelContentJSOptions
aCx
)
;
}
}
}
