#
include
"
mozilla
/
dom
/
BrowserHost
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
CancelContentJSOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
ProcessPriorityManager
.
h
"
#
include
"
nsIObserverService
.
h
"
namespace
mozilla
:
:
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
BrowserHost
)
NS_INTERFACE_MAP_ENTRY
(
nsIRemoteTab
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
RemoteBrowser
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_WEAK
(
BrowserHost
mRoot
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
BrowserHost
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
BrowserHost
)
BrowserHost
:
:
BrowserHost
(
BrowserParent
*
aParent
)
:
mId
(
aParent
-
>
GetTabId
(
)
)
mRoot
(
aParent
)
mEffectsInfo
{
EffectsInfo
:
:
FullyHidden
(
)
}
{
mRoot
-
>
SetBrowserHost
(
this
)
;
}
BrowserHost
*
BrowserHost
:
:
GetFrom
(
nsIRemoteTab
*
aRemoteTab
)
{
return
static_cast
<
BrowserHost
*
>
(
aRemoteTab
)
;
}
TabId
BrowserHost
:
:
GetTabId
(
)
const
{
return
mId
;
}
mozilla
:
:
layers
:
:
LayersId
BrowserHost
:
:
GetLayersId
(
)
const
{
return
mRoot
-
>
GetLayersId
(
)
;
}
BrowsingContext
*
BrowserHost
:
:
GetBrowsingContext
(
)
const
{
return
mRoot
-
>
GetBrowsingContext
(
)
;
}
nsILoadContext
*
BrowserHost
:
:
GetLoadContext
(
)
const
{
RefPtr
<
nsILoadContext
>
loadContext
=
mRoot
-
>
GetLoadContext
(
)
;
return
loadContext
;
}
bool
BrowserHost
:
:
CanRecv
(
)
const
{
return
mRoot
&
&
mRoot
-
>
CanRecv
(
)
;
}
a11y
:
:
DocAccessibleParent
*
BrowserHost
:
:
GetTopLevelDocAccessible
(
)
const
{
return
mRoot
?
mRoot
-
>
GetTopLevelDocAccessible
(
)
:
nullptr
;
}
void
BrowserHost
:
:
LoadURL
(
nsDocShellLoadState
*
aLoadState
)
{
MOZ_ASSERT
(
aLoadState
)
;
mRoot
-
>
LoadURL
(
aLoadState
)
;
}
void
BrowserHost
:
:
ResumeLoad
(
uint64_t
aPendingSwitchId
)
{
mRoot
-
>
ResumeLoad
(
aPendingSwitchId
)
;
}
void
BrowserHost
:
:
DestroyStart
(
)
{
mRoot
-
>
Destroy
(
)
;
}
void
BrowserHost
:
:
DestroyComplete
(
)
{
if
(
!
mRoot
)
{
return
;
}
mRoot
-
>
SetOwnerElement
(
nullptr
)
;
mRoot
-
>
Destroy
(
)
;
mRoot
-
>
SetBrowserHost
(
nullptr
)
;
mRoot
=
nullptr
;
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
NS_ISUPPORTS_CAST
(
nsIRemoteTab
*
this
)
"
ipc
:
browser
-
destroyed
"
nullptr
)
;
}
}
bool
BrowserHost
:
:
Show
(
const
OwnerShowInfo
&
aShowInfo
)
{
return
mRoot
-
>
Show
(
aShowInfo
)
;
}
void
BrowserHost
:
:
UpdateDimensions
(
const
LayoutDeviceIntRect
&
aRect
const
LayoutDeviceIntSize
&
aSize
)
{
mRoot
-
>
UpdateDimensions
(
aRect
aSize
)
;
}
void
BrowserHost
:
:
UpdateEffects
(
EffectsInfo
aEffects
)
{
if
(
!
mRoot
|
|
mEffectsInfo
=
=
aEffects
)
{
return
;
}
mEffectsInfo
=
aEffects
;
Unused
<
<
mRoot
-
>
SendUpdateEffects
(
mEffectsInfo
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetRenderLayers
(
bool
*
aRenderLayers
)
{
if
(
!
mRoot
)
{
*
aRenderLayers
=
false
;
return
NS_OK
;
}
*
aRenderLayers
=
mRoot
-
>
GetRenderLayers
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
SetRenderLayers
(
bool
aRenderLayers
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
mRoot
-
>
SetRenderLayers
(
aRenderLayers
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasLayers
(
bool
*
aHasLayers
)
{
*
aHasLayers
=
mRoot
&
&
mRoot
-
>
GetHasLayers
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
SetPriorityHint
(
bool
aPriorityHint
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
mRoot
-
>
SetPriorityHint
(
aPriorityHint
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetPriorityHint
(
bool
*
aPriorityHint
)
{
*
aPriorityHint
=
mRoot
&
&
mRoot
-
>
GetPriorityHint
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
NotifyResolutionChanged
(
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
VisitAll
(
[
]
(
BrowserParent
*
aBrowserParent
)
{
aBrowserParent
-
>
NotifyResolutionChanged
(
)
;
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
Deprioritize
(
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
auto
*
bc
=
GetBrowsingContext
(
)
-
>
Canonical
(
)
;
ProcessPriorityManager
:
:
BrowserPriorityChanged
(
bc
false
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
PreserveLayers
(
bool
aPreserveLayers
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
VisitAll
(
[
&
]
(
BrowserParent
*
aBrowserParent
)
{
aBrowserParent
-
>
PreserveLayers
(
aPreserveLayers
)
;
}
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetTabId
(
uint64_t
*
aTabId
)
{
*
aTabId
=
mId
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetContentProcessId
(
uint64_t
*
aContentProcessId
)
{
if
(
!
mRoot
)
{
*
aContentProcessId
=
0
;
return
NS_OK
;
}
*
aContentProcessId
=
GetContentParent
(
)
-
>
ChildID
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetOsPid
(
int32_t
*
aOsPid
)
{
if
(
!
mRoot
)
{
*
aOsPid
=
0
;
return
NS_OK
;
}
*
aOsPid
=
GetContentParent
(
)
-
>
Pid
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetBrowsingContext
(
BrowsingContext
*
*
aBc
)
{
if
(
!
mRoot
)
{
*
aBc
=
nullptr
;
return
NS_OK
;
}
RefPtr
<
BrowsingContext
>
bc
=
mRoot
-
>
GetBrowsingContext
(
)
;
bc
.
forget
(
aBc
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
GetHasPresented
(
bool
*
aHasPresented
)
{
if
(
!
mRoot
)
{
*
aHasPresented
=
false
;
return
NS_OK
;
}
*
aHasPresented
=
mRoot
-
>
GetHasPresented
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
TransmitPermissionsForPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
return
GetContentParent
(
)
-
>
TransmitPermissionsForPrincipal
(
aPrincipal
)
;
}
NS_IMETHODIMP
BrowserHost
:
:
CreateAboutBlankDocumentViewer
(
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aPartitionedPrincipal
)
{
if
(
!
mRoot
)
{
return
NS_OK
;
}
nsresult
rv
=
GetContentParent
(
)
-
>
TransmitPermissionsForPrincipal
(
aPrincipal
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
mRoot
-
>
GetBrowsingContext
(
)
-
>
Group
(
)
-
>
EnsureUsesOriginAgentClusterInitialized
(
aPrincipal
)
;
Unused
<
<
mRoot
-
>
SendCreateAboutBlankDocumentViewer
(
aPrincipal
aPartitionedPrincipal
)
;
return
NS_OK
;
}
NS_IMETHODIMP
BrowserHost
:
:
MaybeCancelContentJSExecutionFromScript
(
nsIRemoteTab
:
:
NavigationType
aNavigationType
JS
:
:
Handle
<
JS
:
:
Value
>
aCancelContentJSOptions
JSContext
*
aCx
)
{
if
(
!
mRoot
|
|
mRoot
-
>
CreatingWindow
(
)
)
{
return
NS_OK
;
}
dom
:
:
CancelContentJSOptions
cancelContentJSOptions
;
if
(
!
cancelContentJSOptions
.
Init
(
aCx
aCancelContentJSOptions
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
GetContentParent
(
)
-
>
CancelContentJSExecutionIfRunning
(
mRoot
aNavigationType
cancelContentJSOptions
)
;
return
NS_OK
;
}
}
