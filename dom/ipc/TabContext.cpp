#
include
"
mozilla
/
dom
/
TabContext
.
h
"
#
include
"
mozilla
/
dom
/
PTabContext
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
nsIAppsService
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
define
NO_APP_ID
(
nsIScriptSecurityManager
:
:
NO_APP_ID
)
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
namespace
mozilla
:
:
layout
;
namespace
mozilla
{
namespace
dom
{
TabContext
:
:
TabContext
(
)
:
mIsPrerendered
(
false
)
mInitialized
(
false
)
mIsMozBrowserElement
(
false
)
mContainingAppId
(
NO_APP_ID
)
mOriginAttributes
(
)
mShowAccelerators
(
UIStateChangeType_NoChange
)
mShowFocusRings
(
UIStateChangeType_NoChange
)
{
}
bool
TabContext
:
:
IsMozBrowserElement
(
)
const
{
return
mIsMozBrowserElement
;
}
bool
TabContext
:
:
IsIsolatedMozBrowserElement
(
)
const
{
return
mOriginAttributes
.
mInIsolatedMozBrowser
;
}
bool
TabContext
:
:
IsMozBrowserOrApp
(
)
const
{
return
HasOwnApp
(
)
|
|
IsMozBrowserElement
(
)
;
}
uint32_t
TabContext
:
:
OwnAppId
(
)
const
{
return
mOriginAttributes
.
mAppId
;
}
already_AddRefed
<
mozIApplication
>
TabContext
:
:
GetOwnApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownApp
=
mOwnApp
;
return
ownApp
.
forget
(
)
;
}
bool
TabContext
:
:
HasOwnApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownApp
=
GetOwnApp
(
)
;
return
!
!
ownApp
;
}
uint32_t
TabContext
:
:
BrowserOwnerAppId
(
)
const
{
if
(
IsMozBrowserElement
(
)
)
{
return
mContainingAppId
;
}
return
NO_APP_ID
;
}
already_AddRefed
<
mozIApplication
>
TabContext
:
:
GetBrowserOwnerApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownerApp
;
if
(
IsMozBrowserElement
(
)
)
{
ownerApp
=
mContainingApp
;
}
return
ownerApp
.
forget
(
)
;
}
bool
TabContext
:
:
HasBrowserOwnerApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownerApp
=
GetBrowserOwnerApp
(
)
;
return
!
!
ownerApp
;
}
uint32_t
TabContext
:
:
AppOwnerAppId
(
)
const
{
if
(
HasOwnApp
(
)
)
{
return
mContainingAppId
;
}
return
NO_APP_ID
;
}
already_AddRefed
<
mozIApplication
>
TabContext
:
:
GetAppOwnerApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownerApp
;
if
(
HasOwnApp
(
)
)
{
ownerApp
=
mContainingApp
;
}
return
ownerApp
.
forget
(
)
;
}
bool
TabContext
:
:
HasAppOwnerApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownerApp
=
GetAppOwnerApp
(
)
;
return
!
!
ownerApp
;
}
uint32_t
TabContext
:
:
OwnOrContainingAppId
(
)
const
{
if
(
HasOwnApp
(
)
)
{
return
mOriginAttributes
.
mAppId
;
}
return
mContainingAppId
;
}
already_AddRefed
<
mozIApplication
>
TabContext
:
:
GetOwnOrContainingApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownOrContainingApp
;
if
(
HasOwnApp
(
)
)
{
ownOrContainingApp
=
mOwnApp
;
}
else
{
ownOrContainingApp
=
mContainingApp
;
}
return
ownOrContainingApp
.
forget
(
)
;
}
bool
TabContext
:
:
HasOwnOrContainingApp
(
)
const
{
nsCOMPtr
<
mozIApplication
>
ownOrContainingApp
=
GetOwnOrContainingApp
(
)
;
return
!
!
ownOrContainingApp
;
}
bool
TabContext
:
:
SetTabContext
(
const
TabContext
&
aContext
)
{
NS_ENSURE_FALSE
(
mInitialized
false
)
;
*
this
=
aContext
;
mInitialized
=
true
;
return
true
;
}
void
TabContext
:
:
SetPrivateBrowsingAttributes
(
bool
aIsPrivateBrowsing
)
{
mOriginAttributes
.
SyncAttributesWithPrivateBrowsing
(
aIsPrivateBrowsing
)
;
}
bool
TabContext
:
:
UpdateTabContextAfterSwap
(
const
TabContext
&
aContext
)
{
MOZ_ASSERT
(
mInitialized
)
;
if
(
aContext
.
OwnAppId
(
)
!
=
OwnAppId
(
)
|
|
aContext
.
mContainingAppId
!
=
mContainingAppId
|
|
aContext
.
mOriginAttributes
!
=
mOriginAttributes
|
|
aContext
.
mSignedPkgOriginNoSuffix
!
=
mSignedPkgOriginNoSuffix
)
{
return
false
;
}
mIsMozBrowserElement
=
aContext
.
mIsMozBrowserElement
;
return
true
;
}
const
DocShellOriginAttributes
&
TabContext
:
:
OriginAttributesRef
(
)
const
{
return
mOriginAttributes
;
}
const
nsACString
&
TabContext
:
:
SignedPkgOriginNoSuffix
(
)
const
{
return
mSignedPkgOriginNoSuffix
;
}
const
nsAString
&
TabContext
:
:
PresentationURL
(
)
const
{
return
mPresentationURL
;
}
UIStateChangeType
TabContext
:
:
ShowAccelerators
(
)
const
{
return
mShowAccelerators
;
}
UIStateChangeType
TabContext
:
:
ShowFocusRings
(
)
const
{
return
mShowFocusRings
;
}
bool
TabContext
:
:
SetTabContext
(
bool
aIsMozBrowserElement
bool
aIsPrerendered
mozIApplication
*
aOwnApp
mozIApplication
*
aAppFrameOwnerApp
UIStateChangeType
aShowAccelerators
UIStateChangeType
aShowFocusRings
const
DocShellOriginAttributes
&
aOriginAttributes
const
nsACString
&
aSignedPkgOriginNoSuffix
const
nsAString
&
aPresentationURL
)
{
NS_ENSURE_FALSE
(
mInitialized
false
)
;
uint32_t
ownAppId
=
NO_APP_ID
;
if
(
aOwnApp
)
{
nsresult
rv
=
aOwnApp
-
>
GetLocalId
(
&
ownAppId
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
NS_ENSURE_TRUE
(
ownAppId
!
=
NO_APP_ID
false
)
;
}
uint32_t
containingAppId
=
NO_APP_ID
;
if
(
aAppFrameOwnerApp
)
{
nsresult
rv
=
aAppFrameOwnerApp
-
>
GetLocalId
(
&
containingAppId
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
NS_ENSURE_TRUE
(
containingAppId
!
=
NO_APP_ID
false
)
;
}
MOZ_RELEASE_ASSERT
(
(
aOwnApp
&
&
aOriginAttributes
.
mAppId
=
=
ownAppId
)
|
|
(
aAppFrameOwnerApp
&
&
aOriginAttributes
.
mAppId
=
=
containingAppId
)
|
|
aOriginAttributes
.
mAppId
=
=
NO_APP_ID
)
;
mInitialized
=
true
;
mIsMozBrowserElement
=
aIsMozBrowserElement
;
mIsPrerendered
=
aIsPrerendered
;
mOriginAttributes
=
aOriginAttributes
;
mContainingAppId
=
containingAppId
;
mOwnApp
=
aOwnApp
;
mContainingApp
=
aAppFrameOwnerApp
;
mSignedPkgOriginNoSuffix
=
aSignedPkgOriginNoSuffix
;
mPresentationURL
=
aPresentationURL
;
mShowAccelerators
=
aShowAccelerators
;
mShowFocusRings
=
aShowFocusRings
;
return
true
;
}
IPCTabContext
TabContext
:
:
AsIPCTabContext
(
)
const
{
nsAutoCString
originSuffix
;
mOriginAttributes
.
CreateSuffix
(
originSuffix
)
;
return
IPCTabContext
(
FrameIPCTabContext
(
originSuffix
mContainingAppId
mSignedPkgOriginNoSuffix
mIsMozBrowserElement
mIsPrerendered
mPresentationURL
mShowAccelerators
mShowFocusRings
)
)
;
}
static
already_AddRefed
<
mozIApplication
>
GetAppForId
(
uint32_t
aAppId
)
{
nsCOMPtr
<
nsIAppsService
>
appsService
=
do_GetService
(
APPS_SERVICE_CONTRACTID
)
;
NS_ENSURE_TRUE
(
appsService
nullptr
)
;
nsCOMPtr
<
mozIApplication
>
app
;
appsService
-
>
GetAppByLocalId
(
aAppId
getter_AddRefs
(
app
)
)
;
return
app
.
forget
(
)
;
}
MaybeInvalidTabContext
:
:
MaybeInvalidTabContext
(
const
IPCTabContext
&
aParams
)
:
mInvalidReason
(
nullptr
)
{
bool
isMozBrowserElement
=
false
;
bool
isPrerendered
=
false
;
uint32_t
containingAppId
=
NO_APP_ID
;
DocShellOriginAttributes
originAttributes
;
nsAutoCString
originSuffix
;
nsAutoCString
signedPkgOriginNoSuffix
;
nsAutoString
presentationURL
;
UIStateChangeType
showAccelerators
;
UIStateChangeType
showFocusRings
;
switch
(
aParams
.
type
(
)
)
{
case
IPCTabContext
:
:
TPopupIPCTabContext
:
{
const
PopupIPCTabContext
&
ipcContext
=
aParams
.
get_PopupIPCTabContext
(
)
;
TabContext
*
context
;
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TPBrowserParent
)
{
context
=
TabParent
:
:
GetFrom
(
ipcContext
.
opener
(
)
.
get_PBrowserParent
(
)
)
;
if
(
!
context
)
{
mInvalidReason
=
"
Child
is
-
browser
process
tried
to
"
"
open
a
null
tab
.
"
;
return
;
}
if
(
context
-
>
IsMozBrowserElement
(
)
&
&
!
ipcContext
.
isMozBrowserElement
(
)
)
{
mInvalidReason
=
"
Child
is
-
browser
process
tried
to
"
"
open
a
non
-
browser
tab
.
"
;
return
;
}
}
else
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TPBrowserChild
)
{
context
=
static_cast
<
TabChild
*
>
(
ipcContext
.
opener
(
)
.
get_PBrowserChild
(
)
)
;
}
else
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TTabId
)
{
mInvalidReason
=
"
Child
process
tried
to
open
an
tab
without
the
opener
information
.
"
;
return
;
}
else
{
mInvalidReason
=
"
PopupIPCTabContext
:
:
opener
was
null
(
?
!
)
.
"
;
return
;
}
isMozBrowserElement
=
ipcContext
.
isMozBrowserElement
(
)
;
originAttributes
=
context
-
>
mOriginAttributes
;
if
(
isMozBrowserElement
)
{
containingAppId
=
context
-
>
OwnOrContainingAppId
(
)
;
}
else
{
containingAppId
=
context
-
>
mContainingAppId
;
}
break
;
}
case
IPCTabContext
:
:
TFrameIPCTabContext
:
{
const
FrameIPCTabContext
&
ipcContext
=
aParams
.
get_FrameIPCTabContext
(
)
;
isMozBrowserElement
=
ipcContext
.
isMozBrowserElement
(
)
;
isPrerendered
=
ipcContext
.
isPrerendered
(
)
;
containingAppId
=
ipcContext
.
frameOwnerAppId
(
)
;
signedPkgOriginNoSuffix
=
ipcContext
.
signedPkgOriginNoSuffix
(
)
;
presentationURL
=
ipcContext
.
presentationURL
(
)
;
showAccelerators
=
ipcContext
.
showAccelerators
(
)
;
showFocusRings
=
ipcContext
.
showFocusRings
(
)
;
originSuffix
=
ipcContext
.
originSuffix
(
)
;
originAttributes
.
PopulateFromSuffix
(
originSuffix
)
;
break
;
}
case
IPCTabContext
:
:
TUnsafeIPCTabContext
:
{
#
ifdef
MOZ_B2G
mInvalidReason
=
"
ServiceWorkerClients
:
:
OpenWindow
is
not
supported
.
"
;
return
;
#
endif
if
(
!
Preferences
:
:
GetBool
(
"
dom
.
serviceWorkers
.
enabled
"
false
)
)
{
mInvalidReason
=
"
ServiceWorkers
should
be
enabled
.
"
;
return
;
}
containingAppId
=
NO_APP_ID
;
break
;
}
default
:
{
MOZ_CRASH
(
)
;
}
}
nsCOMPtr
<
mozIApplication
>
ownApp
;
if
(
!
isMozBrowserElement
)
{
ownApp
=
GetAppForId
(
originAttributes
.
mAppId
)
;
if
(
(
ownApp
=
=
nullptr
)
!
=
(
originAttributes
.
mAppId
=
=
NO_APP_ID
)
)
{
mInvalidReason
=
"
Got
an
ownAppId
that
didn
'
t
correspond
to
an
app
.
"
;
return
;
}
}
nsCOMPtr
<
mozIApplication
>
containingApp
=
GetAppForId
(
containingAppId
)
;
if
(
(
containingApp
=
=
nullptr
)
!
=
(
containingAppId
=
=
NO_APP_ID
)
)
{
mInvalidReason
=
"
Got
a
containingAppId
that
didn
'
t
correspond
to
an
app
.
"
;
return
;
}
bool
rv
;
rv
=
mTabContext
.
SetTabContext
(
isMozBrowserElement
isPrerendered
ownApp
containingApp
showAccelerators
showFocusRings
originAttributes
signedPkgOriginNoSuffix
presentationURL
)
;
if
(
!
rv
)
{
mInvalidReason
=
"
Couldn
'
t
initialize
TabContext
.
"
;
}
}
bool
MaybeInvalidTabContext
:
:
IsValid
(
)
{
return
mInvalidReason
=
=
nullptr
;
}
const
char
*
MaybeInvalidTabContext
:
:
GetInvalidReason
(
)
{
return
mInvalidReason
;
}
const
TabContext
&
MaybeInvalidTabContext
:
:
GetTabContext
(
)
{
if
(
!
IsValid
(
)
)
{
MOZ_CRASH
(
"
Can
'
t
GetTabContext
(
)
if
!
IsValid
(
)
.
"
)
;
}
return
mTabContext
;
}
}
}
