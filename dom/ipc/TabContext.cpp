#
include
"
mozilla
/
dom
/
TabContext
.
h
"
#
include
"
mozilla
/
dom
/
PTabContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
namespace
mozilla
:
:
layout
;
namespace
mozilla
{
namespace
dom
{
TabContext
:
:
TabContext
(
)
:
mInitialized
(
false
)
mIsMozBrowserElement
(
false
)
mChromeOuterWindowID
(
0
)
mJSPluginID
(
-
1
)
mShowFocusRings
(
UIStateChangeType_NoChange
)
{
}
bool
TabContext
:
:
IsMozBrowserElement
(
)
const
{
return
mIsMozBrowserElement
;
}
bool
TabContext
:
:
IsIsolatedMozBrowserElement
(
)
const
{
return
mOriginAttributes
.
mInIsolatedMozBrowser
;
}
bool
TabContext
:
:
IsMozBrowser
(
)
const
{
return
IsMozBrowserElement
(
)
;
}
bool
TabContext
:
:
IsJSPlugin
(
)
const
{
return
mJSPluginID
>
=
0
;
}
int32_t
TabContext
:
:
JSPluginId
(
)
const
{
return
mJSPluginID
;
}
uint64_t
TabContext
:
:
ChromeOuterWindowID
(
)
const
{
return
mChromeOuterWindowID
;
}
bool
TabContext
:
:
SetTabContext
(
const
TabContext
&
aContext
)
{
NS_ENSURE_FALSE
(
mInitialized
false
)
;
*
this
=
aContext
;
mInitialized
=
true
;
return
true
;
}
void
TabContext
:
:
SetPrivateBrowsingAttributes
(
bool
aIsPrivateBrowsing
)
{
mOriginAttributes
.
SyncAttributesWithPrivateBrowsing
(
aIsPrivateBrowsing
)
;
}
bool
TabContext
:
:
UpdateTabContextAfterSwap
(
const
TabContext
&
aContext
)
{
MOZ_ASSERT
(
mInitialized
)
;
if
(
aContext
.
mOriginAttributes
!
=
mOriginAttributes
)
{
return
false
;
}
mChromeOuterWindowID
=
aContext
.
mChromeOuterWindowID
;
mIsMozBrowserElement
=
aContext
.
mIsMozBrowserElement
;
return
true
;
}
const
OriginAttributes
&
TabContext
:
:
OriginAttributesRef
(
)
const
{
return
mOriginAttributes
;
}
const
nsAString
&
TabContext
:
:
PresentationURL
(
)
const
{
return
mPresentationURL
;
}
UIStateChangeType
TabContext
:
:
ShowFocusRings
(
)
const
{
return
mShowFocusRings
;
}
bool
TabContext
:
:
SetTabContext
(
bool
aIsMozBrowserElement
uint64_t
aChromeOuterWindowID
UIStateChangeType
aShowFocusRings
const
OriginAttributes
&
aOriginAttributes
const
nsAString
&
aPresentationURL
)
{
NS_ENSURE_FALSE
(
mInitialized
false
)
;
mInitialized
=
true
;
mIsMozBrowserElement
=
aIsMozBrowserElement
;
mChromeOuterWindowID
=
aChromeOuterWindowID
;
mOriginAttributes
=
aOriginAttributes
;
mPresentationURL
=
aPresentationURL
;
mShowFocusRings
=
aShowFocusRings
;
return
true
;
}
bool
TabContext
:
:
SetTabContextForJSPluginFrame
(
int32_t
aJSPluginID
)
{
NS_ENSURE_FALSE
(
mInitialized
false
)
;
mInitialized
=
true
;
mJSPluginID
=
aJSPluginID
;
return
true
;
}
IPCTabContext
TabContext
:
:
AsIPCTabContext
(
)
const
{
if
(
IsJSPlugin
(
)
)
{
return
IPCTabContext
(
JSPluginFrameIPCTabContext
(
mJSPluginID
)
)
;
}
return
IPCTabContext
(
FrameIPCTabContext
(
mOriginAttributes
mIsMozBrowserElement
mChromeOuterWindowID
mPresentationURL
mShowFocusRings
)
)
;
}
MaybeInvalidTabContext
:
:
MaybeInvalidTabContext
(
const
IPCTabContext
&
aParams
)
:
mInvalidReason
(
nullptr
)
{
bool
isMozBrowserElement
=
false
;
uint64_t
chromeOuterWindowID
=
0
;
int32_t
jsPluginId
=
-
1
;
OriginAttributes
originAttributes
;
nsAutoString
presentationURL
;
UIStateChangeType
showFocusRings
=
UIStateChangeType_NoChange
;
switch
(
aParams
.
type
(
)
)
{
case
IPCTabContext
:
:
TPopupIPCTabContext
:
{
const
PopupIPCTabContext
&
ipcContext
=
aParams
.
get_PopupIPCTabContext
(
)
;
TabContext
*
context
;
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TPBrowserParent
)
{
context
=
BrowserParent
:
:
GetFrom
(
ipcContext
.
opener
(
)
.
get_PBrowserParent
(
)
)
;
if
(
!
context
)
{
mInvalidReason
=
"
Child
is
-
browser
process
tried
to
"
"
open
a
null
tab
.
"
;
return
;
}
if
(
context
-
>
IsMozBrowserElement
(
)
&
&
!
ipcContext
.
isMozBrowserElement
(
)
)
{
mInvalidReason
=
"
Child
is
-
browser
process
tried
to
"
"
open
a
non
-
browser
tab
.
"
;
return
;
}
}
else
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TPBrowserChild
)
{
context
=
static_cast
<
BrowserChild
*
>
(
ipcContext
.
opener
(
)
.
get_PBrowserChild
(
)
)
;
}
else
if
(
ipcContext
.
opener
(
)
.
type
(
)
=
=
PBrowserOrId
:
:
TTabId
)
{
mInvalidReason
=
"
Child
process
tried
to
open
an
tab
without
the
opener
"
"
information
.
"
;
return
;
}
else
{
mInvalidReason
=
"
PopupIPCTabContext
:
:
opener
was
null
(
?
!
)
.
"
;
return
;
}
isMozBrowserElement
=
ipcContext
.
isMozBrowserElement
(
)
;
originAttributes
=
context
-
>
mOriginAttributes
;
chromeOuterWindowID
=
ipcContext
.
chromeOuterWindowID
(
)
;
break
;
}
case
IPCTabContext
:
:
TJSPluginFrameIPCTabContext
:
{
const
JSPluginFrameIPCTabContext
&
ipcContext
=
aParams
.
get_JSPluginFrameIPCTabContext
(
)
;
jsPluginId
=
ipcContext
.
jsPluginId
(
)
;
break
;
}
case
IPCTabContext
:
:
TFrameIPCTabContext
:
{
const
FrameIPCTabContext
&
ipcContext
=
aParams
.
get_FrameIPCTabContext
(
)
;
isMozBrowserElement
=
ipcContext
.
isMozBrowserElement
(
)
;
chromeOuterWindowID
=
ipcContext
.
chromeOuterWindowID
(
)
;
presentationURL
=
ipcContext
.
presentationURL
(
)
;
showFocusRings
=
ipcContext
.
showFocusRings
(
)
;
originAttributes
=
ipcContext
.
originAttributes
(
)
;
break
;
}
case
IPCTabContext
:
:
TUnsafeIPCTabContext
:
{
if
(
!
StaticPrefs
:
:
dom_serviceWorkers_enabled
(
)
)
{
mInvalidReason
=
"
ServiceWorkers
should
be
enabled
.
"
;
return
;
}
break
;
}
default
:
{
MOZ_CRASH
(
)
;
}
}
bool
rv
;
if
(
jsPluginId
>
=
0
)
{
rv
=
mTabContext
.
SetTabContextForJSPluginFrame
(
jsPluginId
)
;
}
else
{
rv
=
mTabContext
.
SetTabContext
(
isMozBrowserElement
chromeOuterWindowID
showFocusRings
originAttributes
presentationURL
)
;
}
if
(
!
rv
)
{
mInvalidReason
=
"
Couldn
'
t
initialize
TabContext
.
"
;
}
}
bool
MaybeInvalidTabContext
:
:
IsValid
(
)
{
return
mInvalidReason
=
=
nullptr
;
}
const
char
*
MaybeInvalidTabContext
:
:
GetInvalidReason
(
)
{
return
mInvalidReason
;
}
const
TabContext
&
MaybeInvalidTabContext
:
:
GetTabContext
(
)
{
if
(
!
IsValid
(
)
)
{
MOZ_CRASH
(
"
Can
'
t
GetTabContext
(
)
if
!
IsValid
(
)
.
"
)
;
}
return
mTabContext
;
}
}
}
