#
include
"
mozilla
/
dom
/
BrowserBridgeHost
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
BrowserBridgeHost
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION
(
BrowserBridgeHost
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
BrowserBridgeHost
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
BrowserBridgeHost
)
BrowserBridgeHost
:
:
BrowserBridgeHost
(
BrowserBridgeChild
*
aChild
)
:
mBridge
(
aChild
)
{
}
mozilla
:
:
layers
:
:
LayersId
BrowserBridgeHost
:
:
GetLayersId
(
)
const
{
return
mBridge
-
>
GetLayersId
(
)
;
}
BrowsingContext
*
BrowserBridgeHost
:
:
GetBrowsingContext
(
)
const
{
return
mBridge
-
>
GetBrowsingContext
(
)
;
}
nsILoadContext
*
BrowserBridgeHost
:
:
GetLoadContext
(
)
const
{
return
mBridge
-
>
GetLoadContext
(
)
;
}
void
BrowserBridgeHost
:
:
LoadURL
(
nsIURI
*
aURI
)
{
nsAutoCString
spec
;
aURI
-
>
GetSpec
(
spec
)
;
Unused
<
<
mBridge
-
>
SendLoadURL
(
spec
)
;
}
void
BrowserBridgeHost
:
:
ResumeLoad
(
uint64_t
aPendingSwitchId
)
{
Unused
<
<
mBridge
-
>
SendResumeLoad
(
aPendingSwitchId
)
;
}
void
BrowserBridgeHost
:
:
DestroyStart
(
)
{
DestroyComplete
(
)
;
}
void
BrowserBridgeHost
:
:
DestroyComplete
(
)
{
if
(
!
mBridge
)
{
return
;
}
Unused
<
<
mBridge
-
>
Send__delete__
(
mBridge
)
;
mBridge
=
nullptr
;
}
bool
BrowserBridgeHost
:
:
Show
(
const
ScreenIntSize
&
aSize
bool
aParentIsActive
)
{
RefPtr
<
Element
>
owner
=
mBridge
-
>
GetFrameLoader
(
)
-
>
GetOwnerContent
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsContentUtils
:
:
WidgetForContent
(
owner
)
;
if
(
!
widget
)
{
widget
=
nsContentUtils
:
:
WidgetForDocument
(
owner
-
>
OwnerDoc
(
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
widget
)
;
nsSizeMode
sizeMode
=
widget
?
widget
-
>
SizeMode
(
)
:
nsSizeMode_Normal
;
Unused
<
<
mBridge
-
>
SendShow
(
aSize
aParentIsActive
sizeMode
)
;
return
true
;
}
void
BrowserBridgeHost
:
:
UpdateDimensions
(
const
nsIntRect
&
aRect
const
ScreenIntSize
&
aSize
)
{
RefPtr
<
Element
>
owner
=
mBridge
-
>
GetFrameLoader
(
)
-
>
GetOwnerContent
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsContentUtils
:
:
WidgetForContent
(
owner
)
;
if
(
!
widget
)
{
widget
=
nsContentUtils
:
:
WidgetForDocument
(
owner
-
>
OwnerDoc
(
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
widget
)
;
CSSToLayoutDeviceScale
widgetScale
=
widget
-
>
GetDefaultScale
(
)
;
LayoutDeviceIntRect
devicePixelRect
=
ViewAs
<
LayoutDevicePixel
>
(
aRect
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntSize
devicePixelSize
=
ViewAs
<
LayoutDevicePixel
>
(
aSize
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntPoint
clientOffset
;
LayoutDeviceIntPoint
chromeOffset
;
CSSRect
unscaledRect
=
devicePixelRect
/
widgetScale
;
CSSSize
unscaledSize
=
devicePixelSize
/
widgetScale
;
hal
:
:
ScreenOrientation
orientation
=
hal
:
:
eScreenOrientation_Default
;
DimensionInfo
di
(
unscaledRect
unscaledSize
orientation
clientOffset
chromeOffset
)
;
Unused
<
<
mBridge
-
>
SendUpdateDimensions
(
di
)
;
}
}
}
