#
ifndef
mozilla_dom_BrowserChild_h
#
define
mozilla_dom_BrowserChild_h
#
include
"
mozilla
/
dom
/
ContentFrameMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
PBrowserChild
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIEmbeddingSiteWindow
.
h
"
#
include
"
nsIWebBrowserChromeFocus
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIWindowProvider
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsIBrowserChild
.
h
"
#
include
"
nsITooltipListener
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsIWebProgressListener2
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
TabContext
.
h
"
#
include
"
mozilla
/
dom
/
CoalescedMouseData
.
h
"
#
include
"
mozilla
/
dom
/
CoalescedWheelData
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOptions
.
h
"
#
include
"
mozilla
/
layers
/
GeckoContentControllerTypes
.
h
"
#
include
"
nsIWebBrowserChrome3
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
AudioChannelService
.
h
"
#
include
"
PuppetWidget
.
h
"
#
include
"
nsDeque
.
h
"
class
nsBrowserStatusFilter
;
class
nsIDOMWindow
;
class
nsIHttpChannel
;
class
nsIRequest
;
class
nsISerialEventTarget
;
class
nsIWebProgress
;
class
nsWebBrowser
;
template
<
typename
T
>
class
nsTHashtable
;
template
<
typename
T
>
class
nsPtrHashKey
;
namespace
mozilla
{
class
AbstractThread
;
class
PresShell
;
namespace
layers
{
class
APZChild
;
class
APZEventState
;
class
AsyncDragMetrics
;
class
IAPZCTreeManager
;
class
ImageCompositeNotification
;
class
PCompositorBridgeChild
;
}
namespace
widget
{
struct
AutoCacheNativeKeyCommands
;
}
namespace
dom
{
class
BrowserChild
;
class
BrowsingContext
;
class
TabGroup
;
class
ClonedMessageData
;
class
CoalescedMouseData
;
class
CoalescedWheelData
;
class
ContentSessionStore
;
class
TabListener
;
class
RequestData
;
class
WebProgressData
;
class
BrowserChildMessageManager
:
public
ContentFrameMessageManager
public
nsIMessageSender
public
DispatcherTrait
public
nsSupportsWeakReference
{
public
:
explicit
BrowserChildMessageManager
(
BrowserChild
*
aBrowserChild
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BrowserChildMessageManager
DOMEventTargetHelper
)
void
MarkForCC
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
Nullable
<
WindowProxyHolder
>
GetContent
(
ErrorResult
&
aError
)
override
;
virtual
already_AddRefed
<
nsIDocShell
>
GetDocShell
(
ErrorResult
&
aError
)
override
;
virtual
already_AddRefed
<
nsIEventTarget
>
GetTabEventTarget
(
)
override
;
virtual
uint64_t
ChromeOuterWindowID
(
)
override
;
NS_FORWARD_SAFE_NSIMESSAGESENDER
(
mMessageManager
)
void
GetEventTargetParent
(
EventChainPreVisitor
&
aVisitor
)
override
{
aVisitor
.
mForceContentDispatch
=
true
;
}
virtual
nsresult
Dispatch
(
mozilla
:
:
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
override
;
virtual
nsISerialEventTarget
*
EventTargetFor
(
mozilla
:
:
TaskCategory
aCategory
)
const
override
;
virtual
AbstractThread
*
AbstractMainThreadFor
(
mozilla
:
:
TaskCategory
aCategory
)
override
;
RefPtr
<
BrowserChild
>
mBrowserChild
;
protected
:
~
BrowserChildMessageManager
(
)
;
}
;
class
ContentListener
final
:
public
nsIDOMEventListener
{
public
:
explicit
ContentListener
(
BrowserChild
*
aBrowserChild
)
:
mBrowserChild
(
aBrowserChild
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
protected
:
~
ContentListener
(
)
=
default
;
BrowserChild
*
mBrowserChild
;
}
;
class
BrowserChild
final
:
public
nsMessageManagerScriptExecutor
public
ipc
:
:
MessageManagerCallback
public
PBrowserChild
public
nsIWebBrowserChrome
public
nsIEmbeddingSiteWindow
public
nsIWebBrowserChromeFocus
public
nsIInterfaceRequestor
public
nsIWindowProvider
public
nsSupportsWeakReference
public
nsIBrowserChild
public
nsIObserver
public
nsIWebProgressListener2
public
TabContext
public
nsITooltipListener
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
typedef
mozilla
:
:
widget
:
:
PuppetWidget
PuppetWidget
;
typedef
mozilla
:
:
dom
:
:
ClonedMessageData
ClonedMessageData
;
typedef
mozilla
:
:
dom
:
:
CoalescedMouseData
CoalescedMouseData
;
typedef
mozilla
:
:
dom
:
:
CoalescedWheelData
CoalescedWheelData
;
typedef
mozilla
:
:
layers
:
:
APZEventState
APZEventState
;
typedef
mozilla
:
:
layers
:
:
SetAllowedTouchBehaviorCallback
SetAllowedTouchBehaviorCallback
;
typedef
mozilla
:
:
layers
:
:
TouchBehaviorFlags
TouchBehaviorFlags
;
friend
class
PBrowserChild
;
public
:
static
already_AddRefed
<
BrowserChild
>
FindBrowserChild
(
const
TabId
&
aTabId
)
;
static
nsTArray
<
RefPtr
<
BrowserChild
>
>
GetAll
(
)
;
public
:
BrowserChild
(
ContentChild
*
aManager
const
TabId
&
aTabId
const
TabContext
&
aContext
dom
:
:
BrowsingContext
*
aBrowsingContext
uint32_t
aChromeFlags
bool
aIsTopLevel
)
;
nsresult
Init
(
mozIDOMWindowProxy
*
aParent
WindowGlobalChild
*
aInitialWindowChild
)
;
static
already_AddRefed
<
BrowserChild
>
Create
(
ContentChild
*
aManager
const
TabId
&
aTabId
const
TabContext
&
aContext
BrowsingContext
*
aBrowsingContext
uint32_t
aChromeFlags
bool
aIsTopLevel
)
;
bool
IsDestroyed
(
)
const
{
return
mDestroyed
;
}
const
TabId
GetTabId
(
)
const
{
MOZ_ASSERT
(
mUniqueId
!
=
0
)
;
return
mUniqueId
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_NSIWEBBROWSERCHROME
NS_DECL_NSIEMBEDDINGSITEWINDOW
NS_DECL_NSIWEBBROWSERCHROMEFOCUS
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIWINDOWPROVIDER
NS_DECL_NSIBROWSERCHILD
NS_DECL_NSIOBSERVER
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSIWEBPROGRESSLISTENER2
NS_DECL_NSITOOLTIPLISTENER
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
BrowserChild
nsIBrowserChild
)
FORWARD_SHMEM_ALLOCATOR_TO
(
PBrowserChild
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
mBrowserChildMessageManager
-
>
WrapObject
(
aCx
aGivenProto
)
;
}
already_AddRefed
<
Document
>
GetTopLevelDocument
(
)
const
;
PresShell
*
GetTopLevelPresShell
(
)
const
;
BrowserChildMessageManager
*
GetMessageManager
(
)
{
return
mBrowserChildMessageManager
;
}
bool
IsTopLevel
(
)
const
{
return
mIsTopLevel
;
}
virtual
bool
DoSendBlockingMessage
(
const
nsAString
&
aMessage
StructuredCloneData
&
aData
nsTArray
<
StructuredCloneData
>
*
aRetVal
)
override
;
virtual
nsresult
DoSendAsyncMessage
(
const
nsAString
&
aMessage
StructuredCloneData
&
aData
)
override
;
bool
DoUpdateZoomConstraints
(
const
uint32_t
&
aPresShellId
const
ViewID
&
aViewId
const
Maybe
<
ZoomConstraints
>
&
aConstraints
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURL
(
const
nsCString
&
aURI
nsIPrincipal
*
aTriggeringPrincipal
const
ParentShowInfo
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResumeLoad
(
const
uint64_t
&
aPendingSwitchID
const
ParentShowInfo
&
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvShow
(
const
ParentShowInfo
&
const
OwnerShowInfo
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitRendering
(
const
TextureFactoryIdentifier
&
aTextureFactoryIdentifier
const
layers
:
:
LayersId
&
aLayersId
const
mozilla
:
:
layers
:
:
CompositorOptions
&
aCompositorOptions
const
bool
&
aLayersConnected
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCompositorOptionsChanged
(
const
mozilla
:
:
layers
:
:
CompositorOptions
&
aNewOptions
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDimensions
(
const
mozilla
:
:
dom
:
:
DimensionInfo
&
aDimensionInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSizeModeChanged
(
const
nsSizeMode
&
aSizeMode
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvChildToParentMatrix
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
gfx
:
:
Matrix4x4
>
&
aMatrix
const
mozilla
:
:
ScreenRect
&
aTopLevelViewportVisibleRectInBrowserCoords
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvDynamicToolbarMaxHeightChanged
(
const
mozilla
:
:
ScreenIntCoord
&
aHeight
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDynamicToolbarOffsetChanged
(
const
mozilla
:
:
ScreenIntCoord
&
aOffset
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvActivate
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeactivate
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvMouseEvent
(
const
nsString
&
aType
const
float
&
aX
const
float
&
aY
const
int32_t
&
aButton
const
int32_t
&
aClickCount
const
int32_t
&
aModifiers
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealMouseMoveEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealMouseMoveEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSynthMouseMoveEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPrioritySynthMouseMoveEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealMouseButtonEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealMouseButtonEvent
(
const
mozilla
:
:
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvRealDragEvent
(
const
WidgetDragEvent
&
aEvent
const
uint32_t
&
aDragAction
const
uint32_t
&
aDropEffect
nsIPrincipal
*
aPrincipal
nsIContentSecurityPolicy
*
aCsp
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealKeyEvent
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealKeyEvent
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMouseWheelEvent
(
const
mozilla
:
:
WidgetWheelEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityMouseWheelEvent
(
const
mozilla
:
:
WidgetWheelEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealTouchEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealTouchEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealTouchMoveEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealTouchMoveEvent
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRealTouchMoveEvent2
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
{
return
RecvRealTouchMoveEvent
(
aEvent
aGuid
aInputBlockId
aApzResponse
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityRealTouchMoveEvent2
(
const
WidgetTouchEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsEventStatus
&
aApzResponse
)
{
return
RecvNormalPriorityRealTouchMoveEvent
(
aEvent
aGuid
aInputBlockId
aApzResponse
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushTabState
(
const
uint32_t
&
aFlushId
const
bool
&
aIsFinal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateEpoch
(
const
uint32_t
&
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateSHistory
(
const
bool
&
aImmediately
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNativeSynthesisResponse
(
const
uint64_t
&
aObserverId
const
nsCString
&
aResponse
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPluginEvent
(
const
WidgetPluginEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCompositionEvent
(
const
mozilla
:
:
WidgetCompositionEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityCompositionEvent
(
const
mozilla
:
:
WidgetCompositionEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSelectionEvent
(
const
mozilla
:
:
WidgetSelectionEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPrioritySelectionEvent
(
const
mozilla
:
:
WidgetSelectionEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetIsUnderHiddenEmbedderElement
(
const
bool
&
aIsUnderHiddenEmbedderElement
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvPasteTransferable
(
const
IPCDataTransfer
&
aDataTransfer
const
bool
&
aIsPrivateData
nsIPrincipal
*
aRequestingPrincipal
const
uint32_t
&
aContentPolicyType
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvActivateFrameEvent
(
const
nsString
&
aType
const
bool
&
aCapture
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadRemoteScript
(
const
nsString
&
aURL
const
bool
&
aRunInGlobalScope
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncMessage
(
const
nsString
&
aMessage
const
ClonedMessageData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSwappedWithOtherRemoteLoader
(
const
IPCTabContext
&
aContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSafeAreaInsetsChanged
(
const
mozilla
:
:
ScreenIntMargin
&
aSafeAreaInsets
)
;
#
ifdef
ACCESSIBILITY
PDocAccessibleChild
*
AllocPDocAccessibleChild
(
PDocAccessibleChild
*
const
uint64_t
&
const
uint32_t
&
const
IAccessibleHolder
&
)
;
bool
DeallocPDocAccessibleChild
(
PDocAccessibleChild
*
)
;
#
endif
PColorPickerChild
*
AllocPColorPickerChild
(
const
nsString
&
aTitle
const
nsString
&
aInitialColor
)
;
bool
DeallocPColorPickerChild
(
PColorPickerChild
*
aActor
)
;
PFilePickerChild
*
AllocPFilePickerChild
(
const
nsString
&
aTitle
const
int16_t
&
aMode
)
;
bool
DeallocPFilePickerChild
(
PFilePickerChild
*
aActor
)
;
nsIWebNavigation
*
WebNavigation
(
)
const
{
return
mWebNav
;
}
PuppetWidget
*
WebWidget
(
)
{
return
mPuppetWidget
;
}
bool
IsTransparent
(
)
const
{
return
mIsTransparent
;
}
const
EffectsInfo
&
GetEffectsInfo
(
)
const
{
return
mEffectsInfo
;
}
hal
:
:
ScreenOrientation
GetOrientation
(
)
const
{
return
mOrientation
;
}
void
SetBackgroundColor
(
const
nscolor
&
aColor
)
;
void
NotifyPainted
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateEffects
(
const
EffectsInfo
&
aEffects
)
;
void
RequestEditCommands
(
nsIWidget
:
:
NativeKeyBindingsType
aType
const
WidgetKeyboardEvent
&
aEvent
nsTArray
<
CommandInt
>
&
aCommands
)
;
bool
IsVisible
(
)
;
MOZ_CAN_RUN_SCRIPT
void
UpdateVisibility
(
)
;
MOZ_CAN_RUN_SCRIPT
void
MakeVisible
(
)
;
void
MakeHidden
(
)
;
ContentChild
*
Manager
(
)
const
{
return
mManager
;
}
static
inline
BrowserChild
*
GetFrom
(
nsIDocShell
*
aDocShell
)
{
if
(
!
aDocShell
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIBrowserChild
>
tc
=
aDocShell
-
>
GetBrowserChild
(
)
;
return
static_cast
<
BrowserChild
*
>
(
tc
.
get
(
)
)
;
}
static
inline
BrowserChild
*
GetFrom
(
mozIDOMWindow
*
aWindow
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
=
do_GetInterface
(
aWindow
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryInterface
(
webNav
)
;
return
GetFrom
(
docShell
)
;
}
static
inline
BrowserChild
*
GetFrom
(
mozIDOMWindowProxy
*
aWindow
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
=
do_GetInterface
(
aWindow
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryInterface
(
webNav
)
;
return
GetFrom
(
docShell
)
;
}
static
BrowserChild
*
GetFrom
(
PresShell
*
aPresShell
)
;
static
BrowserChild
*
GetFrom
(
layers
:
:
LayersId
aLayersId
)
;
layers
:
:
LayersId
GetLayersId
(
)
{
return
mLayersId
;
}
Maybe
<
bool
>
IsLayersConnected
(
)
{
return
mLayersConnected
;
}
void
DidComposite
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
const
TimeStamp
&
aCompositeStart
const
TimeStamp
&
aCompositeEnd
)
;
void
DidRequestComposite
(
const
TimeStamp
&
aCompositeReqStart
const
TimeStamp
&
aCompositeReqEnd
)
;
void
ClearCachedResources
(
)
;
void
InvalidateLayers
(
)
;
void
SchedulePaint
(
)
;
void
ReinitRendering
(
)
;
void
ReinitRenderingForDeviceReset
(
)
;
static
inline
BrowserChild
*
GetFrom
(
nsIDOMWindow
*
aWindow
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
=
do_GetInterface
(
aWindow
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryInterface
(
webNav
)
;
return
GetFrom
(
docShell
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvUIResolutionChanged
(
const
float
&
aDpi
const
int32_t
&
aRounding
const
double
&
aScale
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvHandleAccessKey
(
const
WidgetKeyboardEvent
&
aEvent
nsTArray
<
uint32_t
>
&
&
aCharCodes
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvHandledWindowedPluginKeyEvent
(
const
mozilla
:
:
NativeEventData
&
aKeyEventData
const
bool
&
aIsConsumed
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPrint
(
const
uint64_t
&
aOuterWindowID
const
PrintData
&
aPrintData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateNativeWindowHandle
(
const
uintptr_t
&
aNewHandle
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvWillChangeProcess
(
WillChangeProcessResolver
&
&
aResolve
)
;
PPluginWidgetChild
*
AllocPPluginWidgetChild
(
)
;
bool
DeallocPPluginWidgetChild
(
PPluginWidgetChild
*
aActor
)
;
#
ifdef
XP_WIN
nsresult
CreatePluginWidget
(
nsIWidget
*
aParent
nsIWidget
*
*
aOut
)
;
#
endif
PPaymentRequestChild
*
AllocPPaymentRequestChild
(
)
;
bool
DeallocPPaymentRequestChild
(
PPaymentRequestChild
*
aActor
)
;
LayoutDeviceIntPoint
GetClientOffset
(
)
const
{
return
mClientOffset
;
}
LayoutDeviceIntPoint
GetChromeOffset
(
)
const
{
return
mChromeOffset
;
}
;
ScreenIntCoord
GetDynamicToolbarMaxHeight
(
)
const
{
return
mDynamicToolbarMaxHeight
;
}
;
bool
IPCOpen
(
)
const
{
return
mIPCOpen
;
}
bool
ParentIsActive
(
)
const
{
return
mParentIsActive
;
}
const
mozilla
:
:
layers
:
:
CompositorOptions
&
GetCompositorOptions
(
)
const
;
bool
AsyncPanZoomEnabled
(
)
const
;
ScreenIntSize
GetInnerSize
(
)
;
CSSSize
GetUnscaledInnerSize
(
)
{
return
mUnscaledInnerSize
;
}
Maybe
<
LayoutDeviceIntRect
>
GetVisibleRect
(
)
const
;
void
DoFakeShow
(
const
ParentShowInfo
&
)
;
void
ContentReceivedInputBlock
(
uint64_t
aInputBlockId
bool
aPreventDefault
)
const
;
void
SetTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
layers
:
:
ScrollableLayerGuid
>
&
aTargets
)
const
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvHandleTap
(
const
layers
:
:
GeckoContentController_TapType
&
aType
const
LayoutDevicePoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvNormalPriorityHandleTap
(
const
layers
:
:
GeckoContentController_TapType
&
aType
const
LayoutDevicePoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
void
SetAllowedTouchBehavior
(
uint64_t
aInputBlockId
const
nsTArray
<
TouchBehaviorFlags
>
&
aFlags
)
const
;
bool
UpdateFrame
(
const
layers
:
:
RepaintRequest
&
aRequest
)
;
bool
NotifyAPZStateChange
(
const
ViewID
&
aViewId
const
layers
:
:
GeckoContentController_APZStateChange
&
aChange
const
int
&
aArg
)
;
void
StartScrollbarDrag
(
const
layers
:
:
AsyncDragMetrics
&
aDragMetrics
)
;
void
ZoomToRect
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
CSSRect
&
aRect
const
uint32_t
&
aFlags
)
;
void
PaintWhileInterruptingJS
(
const
layers
:
:
LayersObserverEpoch
&
aEpoch
)
;
nsresult
CanCancelContentJS
(
nsIRemoteTab
:
:
NavigationType
aNavigationType
int32_t
aNavigationIndex
nsIURI
*
aNavigationURI
int32_t
aEpoch
bool
*
aCanCancel
)
;
layers
:
:
LayersObserverEpoch
LayersObserverEpoch
(
)
const
{
return
mLayersObserverEpoch
;
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
uintptr_t
GetNativeWindowHandle
(
)
const
{
return
mNativeWindowHandle
;
}
#
endif
bool
StopAwaitingLargeAlloc
(
)
;
bool
IsAwaitingLargeAlloc
(
)
;
BrowsingContext
*
GetBrowsingContext
(
)
const
{
return
mBrowsingContext
;
}
#
if
defined
(
ACCESSIBILITY
)
void
SetTopLevelDocAccessibleChild
(
PDocAccessibleChild
*
aTopLevelChild
)
{
mTopLevelDocAccessibleChild
=
aTopLevelChild
;
}
PDocAccessibleChild
*
GetTopLevelDocAccessibleChild
(
)
{
return
mTopLevelDocAccessibleChild
;
}
#
endif
void
AddPendingDocShellBlocker
(
)
;
void
RemovePendingDocShellBlocker
(
)
;
WindowsHandle
WidgetNativeData
(
)
{
return
mWidgetNativeData
;
}
mozilla
:
:
LayoutDeviceToLayoutDeviceMatrix4x4
GetChildToParentConversionMatrix
(
)
const
;
mozilla
:
:
ScreenRect
GetTopLevelViewportVisibleRectInBrowserCoords
(
)
const
;
Maybe
<
LayoutDeviceRect
>
GetTopLevelViewportVisibleRectInSelfCoords
(
)
const
;
void
FlushAllCoalescedMouseData
(
)
;
void
ProcessPendingCoalescedMouseDataAndDispatchEvents
(
)
;
void
HandleRealMouseButtonEvent
(
const
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
void
SetCancelContentJSEpoch
(
int32_t
aEpoch
)
{
mCancelContentJSEpoch
=
aEpoch
;
}
static
bool
HasVisibleTabs
(
)
{
return
sVisibleTabs
&
&
!
sVisibleTabs
-
>
IsEmpty
(
)
;
}
static
const
nsTHashtable
<
nsPtrHashKey
<
BrowserChild
>
>
&
GetVisibleTabs
(
)
{
MOZ_ASSERT
(
HasVisibleTabs
(
)
)
;
return
*
sVisibleTabs
;
}
bool
UpdateSessionStore
(
uint32_t
aFlushId
bool
aIsFinal
=
false
)
;
#
ifdef
XP_WIN
RefPtr
<
IsWindowSupportingProtectedMediaPromise
>
DoesWindowSupportProtectedMedia
(
)
;
#
endif
void
NotifyContentBlockingEvent
(
uint32_t
aEvent
nsIChannel
*
aChannel
bool
aBlocked
const
nsACString
&
aTrackingOrigin
const
nsTArray
<
nsCString
>
&
aTrackingFullHashes
const
Maybe
<
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
>
&
aReason
)
;
protected
:
virtual
~
BrowserChild
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDestroy
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDocShellIsActive
(
const
bool
&
aIsActive
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetSuspendMediaWhenInactive
(
const
bool
&
aSuspendMediaWhenInactive
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvRenderLayers
(
const
bool
&
aEnabled
const
layers
:
:
LayersObserverEpoch
&
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNavigateByKey
(
const
bool
&
aForward
const
bool
&
aForDocumentNavigation
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestNotifyAfterRemotePaint
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSuppressDisplayport
(
const
bool
&
aEnabled
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvParentActivated
(
const
bool
&
aActivated
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvScrollbarPreferenceChanged
(
ScrollbarPreference
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetKeyboardIndicators
(
const
UIStateChangeType
&
aShowFocusRings
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStopIMEStateManagement
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAwaitLargeAlloc
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAllowScriptsToClose
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetWidgetNativeData
(
const
WindowsHandle
&
aWidgetNativeData
)
;
private
:
void
DispatchMessageManagerMessage
(
const
nsAString
&
aMessageName
const
nsAString
&
aJSONData
)
;
void
ProcessUpdateFrame
(
const
mozilla
:
:
layers
:
:
RepaintRequest
&
aRequest
)
;
bool
UpdateFrameHandler
(
const
mozilla
:
:
layers
:
:
RepaintRequest
&
aRequest
)
;
void
HandleDoubleTap
(
const
CSSPoint
&
aPoint
const
Modifiers
&
aModifiers
const
ScrollableLayerGuid
&
aGuid
)
;
void
NotifyTabContextUpdated
(
)
;
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
bool
InitBrowserChildMessageManager
(
)
;
void
InitRenderingState
(
const
TextureFactoryIdentifier
&
aTextureFactoryIdentifier
const
layers
:
:
LayersId
&
aLayersId
const
mozilla
:
:
layers
:
:
CompositorOptions
&
aCompositorOptions
)
;
void
InitAPZState
(
)
;
void
DestroyWindow
(
)
;
void
ApplyParentShowInfo
(
const
ParentShowInfo
&
)
;
bool
HasValidInnerSize
(
)
;
void
SetTabId
(
const
TabId
&
aTabId
)
;
ScreenIntRect
GetOuterRect
(
)
;
void
SetUnscaledInnerSize
(
const
CSSSize
&
aSize
)
{
mUnscaledInnerSize
=
aSize
;
}
bool
SkipRepeatedKeyEvent
(
const
WidgetKeyboardEvent
&
aEvent
)
;
void
UpdateRepeatedKeyEventEndTime
(
const
WidgetKeyboardEvent
&
aEvent
)
;
bool
MaybeCoalesceWheelEvent
(
const
WidgetWheelEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
bool
*
aIsNextWheelEvent
)
;
void
MaybeDispatchCoalescedWheelEvent
(
)
;
nsEventStatus
DispatchWidgetEventViaAPZ
(
WidgetGUIEvent
&
aEvent
)
;
void
DispatchWheelEvent
(
const
WidgetWheelEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
;
void
InternalSetDocShellIsActive
(
bool
aIsActive
)
;
void
InternalSetSuspendMediaWhenInactive
(
bool
aSuspendMediaWhenInactive
)
;
bool
CreateRemoteLayerManager
(
mozilla
:
:
layers
:
:
PCompositorBridgeChild
*
aCompositorChild
)
;
nsresult
PrepareProgressListenerData
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
Maybe
<
WebProgressData
>
&
aWebProgressData
RequestData
&
aRequestData
)
;
already_AddRefed
<
nsIWebBrowserChrome3
>
GetWebBrowserChromeActor
(
)
;
class
DelayedDeleteRunnable
;
RefPtr
<
BrowserChildMessageManager
>
mBrowserChildMessageManager
;
nsCOMPtr
<
nsIWebBrowserChrome3
>
mWebBrowserChrome
;
TextureFactoryIdentifier
mTextureFactoryIdentifier
;
RefPtr
<
nsWebBrowser
>
mWebBrowser
;
nsCOMPtr
<
nsIWebNavigation
>
mWebNav
;
RefPtr
<
PuppetWidget
>
mPuppetWidget
;
nsCOMPtr
<
nsIURI
>
mLastURI
;
RefPtr
<
ContentChild
>
mManager
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
RefPtr
<
nsBrowserStatusFilter
>
mStatusFilter
;
uint32_t
mChromeFlags
;
uint32_t
mMaxTouchPoints
;
layers
:
:
LayersId
mLayersId
;
CSSRect
mUnscaledOuterRect
;
Maybe
<
bool
>
mLayersConnected
;
EffectsInfo
mEffectsInfo
;
bool
mDidFakeShow
;
bool
mNotified
;
bool
mTriedBrowserInit
;
hal
:
:
ScreenOrientation
mOrientation
;
bool
mIgnoreKeyPressEvent
;
RefPtr
<
APZEventState
>
mAPZEventState
;
SetAllowedTouchBehaviorCallback
mSetAllowedTouchBehaviorCallback
;
bool
mHasValidInnerSize
;
bool
mDestroyed
;
LayoutDeviceIntPoint
mClientOffset
;
LayoutDeviceIntPoint
mChromeOffset
;
ScreenIntCoord
mDynamicToolbarMaxHeight
;
TabId
mUniqueId
;
bool
mIsTopLevel
;
bool
mHasSiblings
;
Maybe
<
mozilla
:
:
layers
:
:
CompositorOptions
>
mCompositorOptions
;
friend
class
ContentChild
;
bool
mIsTransparent
;
bool
mIPCOpen
;
bool
mParentIsActive
;
CSSSize
mUnscaledInnerSize
;
bool
mDidSetRealShowInfo
;
bool
mDidLoadURLInit
;
bool
mAwaitingLA
;
bool
mSkipKeyPress
;
mozilla
:
:
TimeStamp
mRepeatedKeyEventTime
;
mozilla
:
:
TimeStamp
mLastWheelProcessedTimeFromParent
;
mozilla
:
:
TimeDuration
mLastWheelProcessingDuration
;
nsClassHashtable
<
nsUint32HashKey
CoalescedMouseData
>
mCoalescedMouseData
;
nsDeque
mToBeDispatchedMouseData
;
CoalescedWheelData
mCoalescedWheelData
;
RefPtr
<
CoalescedMouseMoveFlusher
>
mCoalescedMouseEventFlusher
;
RefPtr
<
layers
:
:
IAPZCTreeManager
>
mApzcTreeManager
;
RefPtr
<
TabListener
>
mSessionStoreListener
;
layers
:
:
LayersObserverEpoch
mLayersObserverEpoch
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
uintptr_t
mNativeWindowHandle
;
#
endif
#
if
defined
(
ACCESSIBILITY
)
PDocAccessibleChild
*
mTopLevelDocAccessibleChild
;
#
endif
bool
mCoalesceMouseMoveEvents
;
bool
mShouldSendWebProgressEventsToParent
;
bool
mRenderLayers
;
bool
mPendingDocShellIsActive
;
bool
mPendingSuspendMediaWhenInactive
;
bool
mPendingDocShellReceivedMessage
;
bool
mPendingRenderLayers
;
bool
mPendingRenderLayersReceivedMessage
;
layers
:
:
LayersObserverEpoch
mPendingLayersObserverEpoch
;
uint32_t
mPendingDocShellBlockers
;
int32_t
mCancelContentJSEpoch
;
WindowsHandle
mWidgetNativeData
;
Maybe
<
LayoutDeviceToLayoutDeviceMatrix4x4
>
mChildToParentConversionMatrix
;
ScreenRect
mTopLevelViewportVisibleRectInBrowserCoords
;
#
ifdef
XP_WIN
Maybe
<
bool
>
mWindowSupportsProtectedMedia
;
#
endif
static
nsTHashtable
<
nsPtrHashKey
<
BrowserChild
>
>
*
sVisibleTabs
;
DISALLOW_EVIL_CONSTRUCTORS
(
BrowserChild
)
;
}
;
}
}
#
endif
