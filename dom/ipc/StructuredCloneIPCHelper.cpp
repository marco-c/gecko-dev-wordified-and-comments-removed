#
include
"
StructuredCloneIPCHelper
.
h
"
#
include
"
nsIDOMDOMException
.
h
"
#
include
"
nsIMutable
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
BlobBinding
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
StructuredCloneTags
.
h
"
#
include
"
jsapi
.
h
"
namespace
mozilla
{
namespace
dom
{
bool
StructuredCloneIPCHelper
:
:
Copy
(
const
StructuredCloneIPCHelper
&
aHelper
)
{
if
(
!
aHelper
.
mData
)
{
return
true
;
}
uint64_t
*
data
=
static_cast
<
uint64_t
*
>
(
malloc
(
aHelper
.
mDataLength
)
)
;
if
(
!
data
)
{
return
false
;
}
memcpy
(
data
aHelper
.
mData
aHelper
.
mDataLength
)
;
mData
=
data
;
mDataLength
=
aHelper
.
mDataLength
;
mDataOwned
=
eAllocated
;
MOZ_ASSERT
(
BlobImpls
(
)
.
IsEmpty
(
)
)
;
BlobImpls
(
)
.
AppendElements
(
aHelper
.
BlobImpls
(
)
)
;
MOZ_ASSERT
(
GetImages
(
)
.
IsEmpty
(
)
)
;
return
true
;
}
void
StructuredCloneIPCHelper
:
:
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
mData
)
;
nsIGlobalObject
*
global
=
xpc
:
:
NativeGlobal
(
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
MOZ_ASSERT
(
global
)
;
ReadFromBuffer
(
global
aCx
mData
mDataLength
aValue
aRv
)
;
}
void
StructuredCloneIPCHelper
:
:
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
mData
)
;
StructuredCloneHelper
:
:
Write
(
aCx
aValue
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
mBuffer
-
>
steal
(
&
mData
&
mDataLength
)
;
mBuffer
=
nullptr
;
mDataOwned
=
eJSAllocated
;
}
void
StructuredCloneIPCHelper
:
:
WriteIPCParams
(
Message
*
aMsg
)
const
{
WriteParam
(
aMsg
mDataLength
)
;
if
(
mDataLength
)
{
aMsg
-
>
WriteBytes
(
mData
mDataLength
sizeof
(
uint64_t
)
)
;
}
}
bool
StructuredCloneIPCHelper
:
:
ReadIPCParams
(
const
IPC
:
:
Message
*
aMsg
void
*
*
aIter
)
{
MOZ_ASSERT
(
!
mData
)
;
if
(
!
ReadParam
(
aMsg
aIter
&
mDataLength
)
)
{
return
false
;
}
if
(
!
mDataLength
)
{
return
true
;
}
const
char
*
*
buffer
=
const_cast
<
const
char
*
*
>
(
reinterpret_cast
<
char
*
*
>
(
&
mData
)
)
;
if
(
!
aMsg
-
>
ReadBytes
(
aIter
buffer
mDataLength
sizeof
(
uint64_t
)
)
)
{
return
false
;
}
uint64_t
*
data
=
static_cast
<
uint64_t
*
>
(
js_malloc
(
mDataLength
)
)
;
if
(
!
data
)
{
return
false
;
}
memcpy
(
data
mData
mDataLength
)
;
mData
=
data
;
mDataOwned
=
eJSAllocated
;
return
true
;
}
}
}
