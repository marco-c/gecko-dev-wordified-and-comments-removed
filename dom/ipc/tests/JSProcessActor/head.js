const
URL
=
"
about
:
blank
"
;
const
TEST_URL
=
"
http
:
/
/
test2
.
example
.
org
/
"
;
let
processActorOptions
=
{
parent
:
{
esModuleURI
:
"
resource
:
/
/
testing
-
common
/
TestProcessActorParent
.
sys
.
mjs
"
}
child
:
{
esModuleURI
:
"
resource
:
/
/
testing
-
common
/
TestProcessActorChild
.
sys
.
mjs
"
observers
:
[
"
test
-
js
-
content
-
actor
-
child
-
observer
"
]
}
}
;
function
promiseNotification
(
aNotification
)
{
let
notificationResolve
;
let
notificationObserver
=
function
observer
(
)
{
notificationResolve
(
)
;
Services
.
obs
.
removeObserver
(
notificationObserver
aNotification
)
;
}
;
return
new
Promise
(
resolve
=
>
{
notificationResolve
=
resolve
;
Services
.
obs
.
addObserver
(
notificationObserver
aNotification
)
;
}
)
;
}
function
declTest
(
name
cfg
)
{
let
{
url
=
"
about
:
blank
"
includeParent
=
false
remoteTypes
loadInDevToolsLoader
=
false
test
}
=
cfg
;
let
actorOptions
=
{
parent
:
Object
.
assign
(
{
}
processActorOptions
.
parent
)
child
:
Object
.
assign
(
{
}
processActorOptions
.
child
)
}
;
actorOptions
.
includeParent
=
includeParent
;
if
(
remoteTypes
!
=
=
undefined
)
{
actorOptions
.
remoteTypes
=
remoteTypes
;
}
if
(
loadInDevToolsLoader
)
{
actorOptions
.
loadInDevToolsLoader
=
true
;
}
add_task
(
async
function
(
)
{
info
(
"
Entering
test
:
"
+
name
)
;
ChromeUtils
.
registerProcessActor
(
"
TestProcessActor
"
actorOptions
)
;
try
{
await
BrowserTestUtils
.
withNewTab
(
url
async
browser
=
>
{
info
(
"
browser
ready
"
)
;
await
Promise
.
resolve
(
test
(
browser
window
)
)
;
}
)
;
}
finally
{
ChromeUtils
.
unregisterProcessActor
(
"
TestProcessActor
"
)
;
info
(
"
Exiting
test
:
"
+
name
)
;
}
}
)
;
}
