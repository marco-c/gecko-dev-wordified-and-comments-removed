"
use
strict
"
;
const
PRIORITY_SET_TOPIC
=
"
process
-
priority
-
manager
:
TEST
-
ONLY
:
process
-
priority
-
set
"
;
const
PROCESS_PRIORITY_FOREGROUND
=
"
FOREGROUND
"
;
const
PROCESS_PRIORITY_BACKGROUND_PERCEIVABLE
=
"
BACKGROUND_PERCEIVABLE
"
;
const
PROCESS_PRIORITY_BACKGROUND
=
"
BACKGROUND
"
;
const
WAIT_FOR_CHANGE_TIME_MS
=
2000
;
function
browsingContextChildID
(
bc
)
{
return
bc
.
currentWindowGlobal
?
.
domProcess
.
childID
;
}
class
TabPriorityWatcher
{
constructor
(
tabbrowser
)
{
this
.
tabbrowser
=
tabbrowser
;
Assert
.
equal
(
tabbrowser
.
tabs
.
length
1
"
TabPriorityWatcher
must
be
constructed
in
a
window
"
+
"
with
a
single
tab
to
start
.
"
)
;
this
.
priorityMap
=
new
Map
(
)
;
this
.
noChangeChildIDs
=
new
Map
(
)
;
Services
.
obs
.
addObserver
(
this
PRIORITY_SET_TOPIC
)
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
PRIORITY_SET_TOPIC
)
;
}
async
waitForPriorityChange
(
childID
expectedPriority
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
currentPriority
=
this
.
priorityMap
.
get
(
childID
)
;
if
(
currentPriority
=
=
expectedPriority
)
{
Assert
.
ok
(
true
Process
with
child
ID
{
childID
}
reached
expected
+
priority
:
{
currentPriority
}
)
;
return
true
;
}
return
false
;
}
Waiting
for
process
with
child
ID
{
childID
}
to
reach
priority
{
expectedPriority
}
)
;
}
async
ensureNoPriorityChange
(
childID
)
{
this
.
noChangeChildIDs
.
set
(
childID
null
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
WAIT_FOR_CHANGE_TIME_MS
)
)
;
let
priority
=
this
.
noChangeChildIDs
.
get
(
childID
)
;
Assert
.
equal
(
priority
null
Should
have
seen
no
process
priority
change
for
child
ID
{
childID
}
)
;
this
.
noChangeChildIDs
.
delete
(
childID
)
;
}
async
waitForBrowserTreePriority
(
browser
expectedPriority
)
{
let
childIDs
=
new
Set
(
browser
.
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
.
map
(
browsingContextChildID
)
)
;
let
promises
=
[
]
;
for
(
let
childID
of
childIDs
)
{
let
currentPriority
=
this
.
priorityMap
.
get
(
childID
)
;
promises
.
push
(
currentPriority
=
=
expectedPriority
?
this
.
ensureNoPriorityChange
(
childID
)
:
this
.
waitForPriorityChange
(
childID
expectedPriority
)
)
;
}
await
Promise
.
all
(
promises
)
;
}
currentPriority
(
childID
)
{
return
this
.
priorityMap
.
get
(
childID
)
;
}
parsePPMData
(
ppmDataString
)
{
let
[
childIDStr
priority
]
=
ppmDataString
.
split
(
"
:
"
)
;
return
{
childID
:
parseInt
(
childIDStr
10
)
priority
}
;
}
observe
(
subject
topic
data
)
{
if
(
topic
!
=
PRIORITY_SET_TOPIC
)
{
Assert
.
ok
(
false
"
TabPriorityWatcher
is
observing
the
wrong
topic
"
)
;
return
;
}
let
{
childID
priority
}
=
this
.
parsePPMData
(
data
)
;
if
(
this
.
noChangeChildIDs
.
has
(
childID
)
)
{
this
.
noChangeChildIDs
.
set
(
childID
priority
)
;
}
this
.
priorityMap
.
set
(
childID
priority
)
;
}
}
let
gTabPriorityWatcher
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processPriorityManager
.
testMode
"
true
]
[
"
dom
.
ipc
.
processPriorityManager
.
enabled
"
true
]
]
}
)
;
gTabPriorityWatcher
=
new
TabPriorityWatcher
(
gBrowser
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
gTabPriorityWatcher
.
destroy
(
)
;
gTabPriorityWatcher
=
null
;
}
)
;
async
function
assertPriorityChangeOnBackground
(
{
fromTab
toTab
fromTabExpectedPriority
}
)
{
let
fromBrowser
=
fromTab
.
linkedBrowser
;
let
toBrowser
=
toTab
.
linkedBrowser
;
Assert
.
notEqual
(
toBrowser
.
frameLoader
.
remoteTab
.
osPid
fromBrowser
.
frameLoader
.
remoteTab
.
osPid
"
Tabs
should
be
running
in
separate
processes
.
"
)
;
let
fromPromise
=
gTabPriorityWatcher
.
waitForBrowserTreePriority
(
fromBrowser
fromTabExpectedPriority
)
;
let
toPromise
=
gTabPriorityWatcher
.
waitForBrowserTreePriority
(
toBrowser
PROCESS_PRIORITY_FOREGROUND
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
toTab
)
;
await
Promise
.
all
(
[
fromPromise
toPromise
]
)
;
}
add_task
(
async
function
test_normal_background_tab
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
/
browser
/
dom
/
ipc
/
tests
/
file_cross_frame
.
html
"
async
browser
=
>
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
}
)
;
}
)
;
async
function
loadKeepAliveTab
(
host
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
host
+
"
/
browser
/
dom
/
ipc
/
tests
/
file_dummy
.
html
"
)
;
let
childID
=
browsingContextChildID
(
gBrowser
.
selectedBrowser
.
browsingContext
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
childID
)
PROCESS_PRIORITY_FOREGROUND
"
Loading
a
new
tab
should
make
it
prioritized
"
)
;
if
(
SpecialPowers
.
useRemoteSubframes
)
{
let
remoteType
=
gBrowser
.
selectedBrowser
.
remoteType
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
ChromeUtils
.
getAllDOMProcesses
(
)
.
filter
(
process
=
>
process
.
remoteType
=
=
remoteType
)
.
length
=
=
1
)
;
}
Waiting
for
there
to
be
only
one
process
with
remote
type
{
remoteType
}
)
;
}
return
{
tab
childID
}
;
}
add_task
(
async
function
test_iframe_navigate
(
)
{
let
topHost
=
"
https
:
/
/
example
.
com
"
;
let
iframe1Host
=
"
https
:
/
/
example
.
org
"
;
let
iframe2Host
=
"
https
:
/
/
example
.
net
"
;
let
{
tab
:
iframe1Tab
childID
:
iframe1TabChildID
}
=
await
loadKeepAliveTab
(
iframe1Host
)
;
let
{
tab
:
iframe2Tab
childID
:
iframe2TabChildID
}
=
await
loadKeepAliveTab
(
iframe2Host
)
;
await
BrowserTestUtils
.
withNewTab
(
topHost
+
"
/
browser
/
dom
/
ipc
/
tests
/
file_cross_frame
.
html
"
async
browser
=
>
{
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
iframe2TabChildID
)
PROCESS_PRIORITY_BACKGROUND
"
Switching
to
another
new
tab
should
deprioritize
the
old
one
"
)
;
let
topChildID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
let
iframe
=
browser
.
browsingContext
.
children
[
0
]
;
let
iframe1ChildID
=
browsingContextChildID
(
iframe
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
topChildID
)
PROCESS_PRIORITY_FOREGROUND
"
The
top
level
page
in
the
new
tab
should
be
prioritized
"
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
iframe1ChildID
)
PROCESS_PRIORITY_FOREGROUND
"
The
iframe
in
the
new
tab
should
be
prioritized
"
)
;
if
(
SpecialPowers
.
useRemoteSubframes
)
{
Assert
.
notEqual
(
topChildID
iframe1ChildID
"
file_cross_frame
.
html
should
be
loaded
into
a
different
process
"
+
"
than
its
initial
iframe
"
)
;
Assert
.
notEqual
(
topChildID
iframe2TabChildID
"
file_cross_frame
.
html
should
be
loaded
into
a
different
process
"
+
"
than
the
tab
containing
iframe2Host
"
)
;
Assert
.
notEqual
(
iframe1ChildID
iframe2TabChildID
"
The
initial
iframe
loaded
by
file_cross_frame
.
html
should
be
"
+
"
loaded
into
a
different
process
than
the
tab
containing
"
+
"
iframe2Host
"
)
;
Assert
.
equal
(
iframe1TabChildID
iframe1ChildID
"
Both
pages
loaded
in
iframe1Host
should
be
in
the
same
process
"
)
;
}
let
iframe2URI
=
iframe2Host
+
"
/
browser
/
dom
/
ipc
/
tests
/
file_dummy
.
html
"
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
true
iframe2URI
)
;
await
SpecialPowers
.
spawn
(
iframe
[
iframe2URI
]
async
function
(
_iframe2URI
)
{
content
.
location
=
_iframe2URI
;
}
)
;
await
loaded
;
let
iframe2ChildID
=
browsingContextChildID
(
iframe
)
;
let
iframe1Priority
=
gTabPriorityWatcher
.
currentPriority
(
iframe1ChildID
)
;
let
iframe2Priority
=
gTabPriorityWatcher
.
currentPriority
(
iframe2ChildID
)
;
if
(
SpecialPowers
.
useRemoteSubframes
)
{
Assert
.
equal
(
iframe2TabChildID
iframe2ChildID
"
Both
pages
loaded
in
iframe2Host
should
be
in
the
same
process
"
)
;
Assert
.
equal
(
iframe1Priority
PROCESS_PRIORITY_BACKGROUND
"
The
old
iframe
process
should
have
been
deprioritized
"
)
;
}
else
{
Assert
.
equal
(
iframe1ChildID
iframe2ChildID
"
Navigation
should
not
have
switched
processes
"
)
;
}
Assert
.
equal
(
iframe2Priority
PROCESS_PRIORITY_FOREGROUND
"
The
new
iframe
process
should
be
prioritized
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
iframe2Tab
)
;
await
BrowserTestUtils
.
removeTab
(
iframe1Tab
)
;
}
)
;
add_task
(
async
function
test_cross_group_navigate
(
)
{
let
coopPage
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
tests
/
browser
/
file_coop_coep
.
html
"
;
let
backgroundTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
coopPage
)
;
let
backgroundTabChildID
=
browsingContextChildID
(
gBrowser
.
selectedBrowser
.
browsingContext
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
backgroundTabChildID
)
PROCESS_PRIORITY_FOREGROUND
"
Loading
a
new
tab
should
make
it
prioritized
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
org
/
browser
/
dom
/
ipc
/
tests
/
file_cross_frame
.
html
"
async
browser
=
>
{
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
backgroundTabChildID
)
PROCESS_PRIORITY_BACKGROUND
"
Switching
to
a
new
tab
should
deprioritize
the
old
one
"
)
;
let
dotOrgChildID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
BrowserTestUtils
.
loadURI
(
browser
coopPage
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
coopChildID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
let
coopPriority
=
gTabPriorityWatcher
.
currentPriority
(
coopChildID
)
;
let
dotOrgPriority
=
gTabPriorityWatcher
.
currentPriority
(
dotOrgChildID
)
;
Assert
.
equal
(
backgroundTabChildID
coopChildID
"
The
same
site
should
get
loaded
into
the
same
process
"
)
;
Assert
.
notEqual
(
dotOrgChildID
coopChildID
"
Navigation
should
have
switched
processes
"
)
;
Assert
.
equal
(
dotOrgPriority
PROCESS_PRIORITY_BACKGROUND
"
The
old
page
process
should
have
been
deprioritized
"
)
;
Assert
.
equal
(
coopPriority
PROCESS_PRIORITY_FOREGROUND
"
The
new
page
process
should
be
prioritized
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
backgroundTab
)
;
}
)
;
add_task
(
async
function
test_video_background_tab
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
createElement
(
"
video
"
)
;
video
.
src
=
"
https
:
/
/
example
.
net
/
browser
/
dom
/
ipc
/
tests
/
short
.
mp4
"
;
video
.
muted
=
true
;
content
.
document
.
body
.
appendChild
(
video
)
;
video
.
loop
=
true
;
await
video
.
play
(
)
;
}
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND_PERCEIVABLE
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
video
=
content
.
document
.
querySelector
(
"
video
"
)
;
video
.
muted
=
false
;
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_FOREGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_audio_background_tab
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
audio
=
content
.
document
.
createElement
(
"
audio
"
)
;
audio
.
src
=
"
https
:
/
/
example
.
net
/
browser
/
dom
/
ipc
/
tests
/
owl
.
mp3
"
;
audio
.
muted
=
true
;
content
.
document
.
body
.
appendChild
(
audio
)
;
audio
.
loop
=
true
;
await
audio
.
play
(
)
;
}
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
audio
=
content
.
document
.
querySelector
(
"
audio
"
)
;
let
seeked
=
ContentTaskUtils
.
waitForEvent
(
audio
"
seeked
"
)
;
audio
.
muted
=
false
;
audio
.
playbackRate
=
0
.
25
;
audio
.
currentTime
=
0
;
await
seeked
;
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_FOREGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_web_audio_background_tab
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
browser
=
>
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
audioCtx
=
new
content
.
AudioContext
(
)
;
let
oscillator
=
audioCtx
.
createOscillator
(
)
;
oscillator
.
type
=
"
square
"
;
oscillator
.
frequency
.
setValueAtTime
(
440
audioCtx
.
currentTime
)
;
oscillator
.
connect
(
audioCtx
.
destination
)
;
oscillator
.
start
(
)
;
while
(
audioCtx
.
state
!
=
"
running
"
)
{
info
(
wait
until
AudioContext
starts
running
)
;
await
new
Promise
(
r
=
>
(
audioCtx
.
onstatechange
=
r
)
)
;
}
content
.
audioCtx
=
audioCtx
;
}
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_FOREGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
audioCtx
.
suspend
(
)
;
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
tab
toTab
:
originalTab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
await
assertPriorityChangeOnBackground
(
{
fromTab
:
originalTab
toTab
:
tab
fromTabExpectedPriority
:
PROCESS_PRIORITY_BACKGROUND
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_audio_background_tab
(
)
{
let
page1
=
"
https
:
/
/
example
.
com
"
;
let
page2
=
page1
+
"
/
?
2
"
;
await
BrowserTestUtils
.
withNewTab
(
page1
async
browser
=
>
{
let
childID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
childID
)
PROCESS_PRIORITY_FOREGROUND
"
Loading
a
new
tab
should
make
it
prioritized
.
"
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
page2
)
;
BrowserTestUtils
.
loadURI
(
browser
page2
)
;
await
loaded
;
childID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
childID
)
PROCESS_PRIORITY_FOREGROUND
"
Loading
a
new
page
should
keep
the
tab
prioritized
.
"
)
;
let
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
browser
.
goBack
(
)
;
await
pageShowPromise
;
childID
=
browsingContextChildID
(
browser
.
browsingContext
)
;
Assert
.
equal
(
gTabPriorityWatcher
.
currentPriority
(
childID
)
PROCESS_PRIORITY_FOREGROUND
"
Loading
a
page
from
the
bfcache
should
keep
the
tab
prioritized
.
"
)
;
}
)
;
}
)
;
