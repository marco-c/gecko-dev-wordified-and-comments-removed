"
use
strict
"
;
const
EMPTY_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_dummy
.
html
"
;
const
HANG_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_endless_js
.
html
"
;
function
pushPref
(
name
val
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
name
val
]
]
}
)
;
}
async
function
createAndShutdownContentProcess
(
url
)
{
info
(
"
Create
and
shutdown
a
content
process
for
"
+
url
)
;
let
oldChildCount
=
Services
.
ppmm
.
childCount
;
info
(
"
Old
process
count
:
"
+
oldChildCount
)
;
let
tabpromise
=
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
url
waitForLoad
:
true
forceNewProcess
:
true
}
)
;
let
tab
=
await
tabpromise
;
Services
.
tm
.
spinEventLoopUntil
(
"
browser_content_shutdown_with_endless_js
"
(
)
=
>
Services
.
ppmm
.
childCount
>
oldChildCount
)
;
let
newChildCount
=
Services
.
ppmm
.
childCount
;
info
(
"
New
process
count
:
"
+
newChildCount
)
;
ok
(
newChildCount
>
oldChildCount
"
Process
created
.
"
)
;
let
tabClosed
=
BrowserTestUtils
.
waitForTabClosing
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
ok
(
true
"
removeTab
"
)
;
Services
.
tm
.
spinEventLoopUntil
(
"
browser_content_shutdown_with_endless_js
"
(
)
=
>
Services
.
ppmm
.
childCount
<
newChildCount
)
;
info
(
"
New
count
:
"
+
Services
.
ppmm
.
childCount
)
;
await
tabClosed
;
ok
(
Services
.
ppmm
.
childCount
<
newChildCount
"
Shutdown
of
content
process
complete
.
"
)
;
}
add_task
(
async
(
)
=
>
{
if
(
!
gMultiProcessBrowser
)
{
ok
(
true
"
We
are
not
in
multiprocess
mode
skipping
test
.
"
)
;
return
;
}
await
pushPref
(
"
dom
.
abort_script_on_child_shutdown
"
true
)
;
pushPref
(
"
dom
.
ipc
.
processPreload
.
enabled
"
false
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
createAndShutdownContentProcess
(
EMPTY_PAGE
)
;
await
createAndShutdownContentProcess
(
HANG_PAGE
)
;
}
)
;
