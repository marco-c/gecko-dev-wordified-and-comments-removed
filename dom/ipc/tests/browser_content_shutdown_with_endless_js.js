"
use
strict
"
;
const
EMPTY_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_dummy
.
html
"
;
const
HANG_PAGE
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
ipc
/
tests
/
file_endless_js
.
html
"
;
function
pushPref
(
name
val
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
name
val
]
]
}
)
;
}
async
function
createAndShutdownContentProcess
(
url
)
{
info
(
"
Create
and
shutdown
a
content
process
for
"
+
url
)
;
let
browserDestroyed
=
Promise
.
withResolvers
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
opening
:
url
waitForLoad
:
true
forceNewProcess
:
true
}
async
function
(
otherBrowser
)
{
let
remoteTab
=
otherBrowser
.
frameLoader
.
remoteTab
;
ok
(
true
"
Content
process
created
.
"
)
;
browserDestroyed
.
resolve
(
TestUtils
.
topicObserved
(
"
ipc
:
browser
-
destroyed
"
subject
=
>
subject
=
=
=
remoteTab
)
)
;
await
SpecialPowers
.
spawn
(
otherBrowser
[
]
function
(
)
{
content
.
postMessage
(
"
LoadedMessage
"
"
*
"
)
;
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
50
)
)
;
}
)
;
await
browserDestroyed
.
promise
;
ok
(
true
"
Shutdown
of
content
process
.
"
)
;
}
add_task
(
async
(
)
=
>
{
if
(
!
gMultiProcessBrowser
)
{
ok
(
true
"
We
are
not
in
multiprocess
mode
skipping
test
.
"
)
;
return
;
}
await
pushPref
(
"
dom
.
abort_script_on_child_shutdown
"
true
)
;
pushPref
(
"
dom
.
ipc
.
processPreload
.
enabled
"
false
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
createAndShutdownContentProcess
(
EMPTY_PAGE
)
;
await
createAndShutdownContentProcess
(
HANG_PAGE
)
;
}
)
;
