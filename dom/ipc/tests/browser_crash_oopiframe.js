"
use
strict
"
;
add_task
(
async
function
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
fission
:
true
}
)
;
let
url
=
"
about
:
blank
"
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
let
rootBC
=
browser
.
browsingContext
;
let
iframeID
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
setAttribute
(
"
fission
"
"
true
"
)
;
iframe
.
setAttribute
(
"
src
"
"
http
:
/
/
example
.
com
"
)
;
const
{
ContentTaskUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
)
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
await
ContentTaskUtils
.
waitForEvent
(
iframe
"
load
"
)
;
let
iframeBC
=
iframe
.
frameLoader
.
browsingContext
;
return
iframeBC
.
id
;
}
)
;
let
iframeBC
=
BrowsingContext
.
get
(
iframeID
)
;
is
(
iframeBC
.
parent
rootBC
"
oop
frame
has
root
as
parent
"
)
;
BrowserTestUtils
.
crashFrame
(
browser
true
true
iframeBC
)
;
let
eventFiredPromise
=
BrowserTestUtils
.
waitForEvent
(
browser
"
oop
-
browser
-
crashed
"
)
;
info
(
"
Waiting
for
oop
-
browser
-
crashed
event
.
"
)
;
await
eventFiredPromise
.
then
(
event
=
>
{
isnot
(
event
.
browsingContextId
rootBC
"
top
frame
browsing
context
id
not
expected
.
"
)
;
is
(
event
.
browsingContextId
iframeBC
.
id
"
oop
frame
browsing
context
id
expected
.
"
)
;
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
iframeBC
.
currentWindowGlobal
;
}
)
;
let
newIframeURI
=
await
SpecialPowers
.
spawn
(
iframeBC
[
]
(
)
=
>
content
.
document
.
documentURI
)
;
ok
(
newIframeURI
.
startsWith
(
"
about
:
framecrashed
"
)
"
The
iframe
is
now
pointing
at
about
:
framecrashed
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
