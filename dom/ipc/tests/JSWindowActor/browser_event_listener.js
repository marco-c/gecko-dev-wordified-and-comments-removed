"
use
strict
"
;
declTest
(
"
test
event
triggering
actor
creation
"
{
async
test
(
browser
)
{
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
content
.
document
.
body
.
innerHTML
+
=
<
select
id
=
"
testSelect
"
>
<
option
>
A
<
/
option
>
<
option
>
B
<
/
option
>
<
/
select
>
;
}
)
;
let
observePromise
=
new
Promise
(
resolve
=
>
{
const
TOPIC
=
"
test
-
js
-
window
-
actor
-
parent
-
event
"
;
Services
.
obs
.
addObserver
(
function
obs
(
subject
topic
data
)
{
is
(
topic
TOPIC
"
topic
matches
"
)
;
Services
.
obs
.
removeObserver
(
obs
TOPIC
)
;
resolve
(
{
subject
data
}
)
;
}
TOPIC
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
testSelect
"
{
}
browser
)
;
let
{
subject
data
}
=
await
observePromise
;
is
(
data
"
mozshowdropdown
"
)
;
let
parent
=
browser
.
browsingContext
.
currentWindowGlobal
;
let
actorParent
=
parent
.
getActor
(
"
Test
"
)
;
ok
(
actorParent
"
JSWindowActorParent
should
have
value
.
"
)
;
is
(
subject
.
wrappedJSObject
actorParent
"
Should
have
been
recieved
on
the
right
actor
"
)
;
}
}
)
;
