const
URL
=
"
about
:
blank
"
;
const
TEST_URL
=
"
http
:
/
/
test2
.
example
.
org
/
"
;
let
windowActorOptions
=
{
parent
:
{
moduleURI
:
"
resource
:
/
/
testing
-
common
/
TestWindowParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
testing
-
common
/
TestWindowChild
.
jsm
"
events
:
{
mozshowdropdown
:
{
}
}
observers
:
[
"
test
-
js
-
window
-
actor
-
child
-
observer
"
"
audio
-
playback
"
]
}
}
;
function
declTest
(
name
cfg
)
{
let
{
url
=
"
about
:
blank
"
allFrames
=
false
includeChrome
=
false
matches
remoteTypes
messageManagerGroups
test
}
=
cfg
;
let
actorOptions
=
{
parent
:
Object
.
assign
(
{
}
windowActorOptions
.
parent
)
child
:
Object
.
assign
(
{
}
windowActorOptions
.
child
)
}
;
actorOptions
.
allFrames
=
allFrames
;
actorOptions
.
includeChrome
=
includeChrome
;
if
(
matches
!
=
=
undefined
)
{
actorOptions
.
matches
=
matches
;
}
if
(
remoteTypes
!
=
=
undefined
)
{
actorOptions
.
remoteTypes
=
remoteTypes
;
}
if
(
messageManagerGroups
!
=
=
undefined
)
{
actorOptions
.
messageManagerGroups
=
messageManagerGroups
;
}
add_task
(
async
function
(
)
{
info
(
"
Entering
test
:
"
+
name
)
;
ChromeUtils
.
registerWindowActor
(
"
TestWindow
"
actorOptions
)
;
try
{
await
BrowserTestUtils
.
withNewTab
(
url
async
browser
=
>
{
info
(
"
browser
ready
"
)
;
await
Promise
.
resolve
(
test
(
browser
window
)
)
;
}
)
;
}
finally
{
ChromeUtils
.
unregisterWindowActor
(
"
TestWindow
"
)
;
info
(
"
Exiting
test
:
"
+
name
)
;
}
}
)
;
}
