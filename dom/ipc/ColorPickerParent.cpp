#
include
"
ColorPickerParent
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
using
mozilla
:
:
Unused
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
ColorPickerParent
:
:
ColorPickerShownCallback
nsIColorPickerShownCallback
)
;
NS_IMETHODIMP
ColorPickerParent
:
:
ColorPickerShownCallback
:
:
Update
(
const
nsAString
&
aColor
)
{
if
(
mColorPickerParent
)
{
Unused
<
<
mColorPickerParent
-
>
SendUpdate
(
aColor
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ColorPickerParent
:
:
ColorPickerShownCallback
:
:
Done
(
const
nsAString
&
aColor
)
{
if
(
mColorPickerParent
)
{
Unused
<
<
ColorPickerParent
:
:
Send__delete__
(
mColorPickerParent
aColor
)
;
}
return
NS_OK
;
}
void
ColorPickerParent
:
:
ColorPickerShownCallback
:
:
Destroy
(
)
{
mColorPickerParent
=
nullptr
;
}
bool
ColorPickerParent
:
:
CreateColorPicker
(
)
{
mPicker
=
do_CreateInstance
(
"
mozilla
.
org
/
colorpicker
;
1
"
)
;
if
(
!
mPicker
)
{
return
false
;
}
Element
*
ownerElement
=
BrowserParent
:
:
GetFrom
(
Manager
(
)
)
-
>
GetOwnerElement
(
)
;
if
(
!
ownerElement
)
{
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
ownerElement
-
>
OwnerDoc
(
)
-
>
GetWindow
(
)
;
if
(
!
window
)
{
return
false
;
}
return
NS_SUCCEEDED
(
mPicker
-
>
Init
(
window
mTitle
mInitialColor
mDefaultColors
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ColorPickerParent
:
:
RecvOpen
(
)
{
if
(
!
CreateColorPicker
(
)
)
{
Unused
<
<
Send__delete__
(
this
mInitialColor
)
;
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
!
mCallback
)
;
mCallback
=
new
ColorPickerShownCallback
(
this
)
;
mPicker
-
>
Open
(
mCallback
)
;
return
IPC_OK
(
)
;
}
;
void
ColorPickerParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mCallback
)
{
mCallback
-
>
Destroy
(
)
;
}
}
