#
include
"
mozilla
/
dom
/
UniqueContentParentKeepAlive
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
namespace
mozilla
:
:
dom
{
void
ContentParentKeepAliveDeleter
:
:
operator
(
)
(
ContentParent
*
aProcess
)
{
AssertIsOnMainThread
(
)
;
if
(
RefPtr
<
ContentParent
>
process
=
dont_AddRef
(
aProcess
)
)
{
process
-
>
RemoveKeepAlive
(
mBrowserId
)
;
}
}
void
ContentParentKeepAliveDeleter
:
:
operator
(
)
(
ThreadsafeContentParentHandle
*
aHandle
)
{
if
(
RefPtr
<
ThreadsafeContentParentHandle
>
handle
=
dont_AddRef
(
aHandle
)
)
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
ThreadsafeContentParentKeepAliveDeleter
"
[
handle
=
std
:
:
move
(
handle
)
browserId
=
mBrowserId
]
(
)
{
AssertIsOnMainThread
(
)
;
if
(
RefPtr
<
ContentParent
>
process
=
handle
-
>
GetContentParent
(
)
)
{
process
-
>
RemoveKeepAlive
(
browserId
)
;
}
}
)
)
;
}
}
UniqueContentParentKeepAlive
UniqueContentParentKeepAliveFromThreadsafe
(
UniqueThreadsafeContentParentKeepAlive
aKeepAlive
)
{
AssertIsOnMainThread
(
)
;
if
(
aKeepAlive
)
{
uint64_t
browserId
=
aKeepAlive
.
get_deleter
(
)
.
mBrowserId
;
RefPtr
<
ThreadsafeContentParentHandle
>
handle
=
dont_AddRef
(
aKeepAlive
.
release
(
)
)
;
RefPtr
<
ContentParent
>
process
=
handle
-
>
GetContentParent
(
)
;
return
UniqueContentParentKeepAlive
{
process
.
forget
(
)
.
take
(
)
{
.
mBrowserId
=
browserId
}
}
;
}
return
nullptr
;
}
UniqueThreadsafeContentParentKeepAlive
UniqueContentParentKeepAliveToThreadsafe
(
UniqueContentParentKeepAlive
aKeepAlive
)
{
AssertIsOnMainThread
(
)
;
if
(
aKeepAlive
)
{
uint64_t
browserId
=
aKeepAlive
.
get_deleter
(
)
.
mBrowserId
;
RefPtr
<
ContentParent
>
process
=
dont_AddRef
(
aKeepAlive
.
release
(
)
)
;
RefPtr
<
ThreadsafeContentParentHandle
>
handle
=
process
-
>
ThreadsafeHandle
(
)
;
return
UniqueThreadsafeContentParentKeepAlive
{
handle
.
forget
(
)
.
take
(
)
{
.
mBrowserId
=
browserId
}
}
;
}
return
nullptr
;
}
}
