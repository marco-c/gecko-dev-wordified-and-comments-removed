#
ifndef
mozilla_dom_CrashReporterParent_h
#
define
mozilla_dom_CrashReporterParent_h
#
include
"
mozilla
/
dom
/
PCrashReporterParent
.
h
"
#
include
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
#
include
"
nsIFile
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
endif
namespace
mozilla
{
namespace
dom
{
class
CrashReporterParent
:
public
PCrashReporterParent
{
#
ifdef
MOZ_CRASHREPORTER
typedef
CrashReporter
:
:
AnnotationTable
AnnotationTable
;
#
endif
public
:
CrashReporterParent
(
)
;
virtual
~
CrashReporterParent
(
)
;
#
ifdef
MOZ_CRASHREPORTER
template
<
class
Toplevel
>
bool
GenerateCrashReport
(
Toplevel
*
t
const
AnnotationTable
*
processNotes
)
;
bool
GenerateChildData
(
const
AnnotationTable
*
processNotes
)
;
void
FinalizeChildData
(
)
;
template
<
class
Toplevel
>
bool
GenerateCompleteMinidump
(
Toplevel
*
t
)
;
bool
GenerateCrashReportForMinidump
(
nsIFile
*
minidump
const
AnnotationTable
*
processNotes
)
;
#
endif
void
SetChildData
(
const
NativeThreadId
&
id
const
uint32_t
&
processType
)
;
const
nsString
&
ChildDumpID
(
)
const
{
return
mChildDumpID
;
}
void
AnnotateCrashReport
(
const
nsCString
&
aKey
const
nsCString
&
aData
)
;
protected
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAnnotateCrashReport
(
const
nsCString
&
aKey
const
nsCString
&
aData
)
override
{
AnnotateCrashReport
(
aKey
aData
)
;
return
IPC_OK
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvAppendAppNotes
(
const
nsCString
&
aData
)
override
;
#
ifdef
MOZ_CRASHREPORTER
void
NotifyCrashService
(
)
;
#
endif
#
ifdef
MOZ_CRASHREPORTER
AnnotationTable
mNotes
;
#
endif
nsCString
mAppNotes
;
nsString
mChildDumpID
;
NativeThreadId
mMainThread
;
time_t
mStartTime
;
GeckoProcessType
mProcessType
;
bool
mInitialized
;
}
;
#
ifdef
MOZ_CRASHREPORTER
template
<
class
Toplevel
>
inline
bool
CrashReporterParent
:
:
GenerateCrashReport
(
Toplevel
*
t
const
AnnotationTable
*
processNotes
)
{
nsCOMPtr
<
nsIFile
>
crashDump
;
if
(
t
-
>
TakeMinidump
(
getter_AddRefs
(
crashDump
)
nullptr
)
&
&
CrashReporter
:
:
GetIDFromMinidump
(
crashDump
mChildDumpID
)
)
{
bool
result
=
GenerateChildData
(
processNotes
)
;
FinalizeChildData
(
)
;
return
result
;
}
return
false
;
}
template
<
class
Toplevel
>
inline
bool
CrashReporterParent
:
:
GenerateCompleteMinidump
(
Toplevel
*
t
)
{
mozilla
:
:
ipc
:
:
ScopedProcessHandle
child
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_WARNING
(
"
GenerateCompleteMinidump
can
'
t
be
called
on
non
-
main
thread
.
"
)
;
return
false
;
}
#
ifdef
XP_MACOSX
child
=
t
-
>
Process
(
)
-
>
GetChildTask
(
)
;
#
else
if
(
!
base
:
:
OpenPrivilegedProcessHandle
(
t
-
>
OtherPid
(
)
&
child
.
rwget
(
)
)
)
{
NS_WARNING
(
"
Failed
to
open
child
process
handle
.
"
)
;
return
false
;
}
#
endif
nsCOMPtr
<
nsIFile
>
childDump
;
if
(
CrashReporter
:
:
CreateMinidumpsAndPair
(
child
mMainThread
NS_LITERAL_CSTRING
(
"
browser
"
)
nullptr
getter_AddRefs
(
childDump
)
)
&
&
CrashReporter
:
:
GetIDFromMinidump
(
childDump
mChildDumpID
)
)
{
bool
result
=
GenerateChildData
(
nullptr
)
;
FinalizeChildData
(
)
;
return
result
;
}
return
false
;
}
#
endif
}
}
#
endif
