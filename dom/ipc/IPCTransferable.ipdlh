include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
;
include
IPCBlob
;
include
NeckoChannelParams
;
using
mozilla
:
:
gfx
:
:
SurfaceFormat
from
"
mozilla
/
gfx
/
Types
.
h
"
;
[
RefCounted
]
using
class
nsIPrincipal
from
"
nsIPrincipal
.
h
"
;
[
RefCounted
]
using
class
nsIReferrerInfo
from
"
nsIReferrerInfo
.
h
"
;
[
MoveOnly
]
using
class
mozilla
:
:
ipc
:
:
BigBuffer
from
"
mozilla
/
ipc
/
BigBuffer
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
IPCTransferableDataString
{
BigBuffer
data
;
}
;
struct
IPCTransferableDataCString
{
BigBuffer
data
;
}
;
struct
IPCTransferableDataInputStream
{
BigBuffer
data
;
}
;
struct
IPCTransferableDataImageContainer
{
BigBuffer
data
;
uint32_t
width
;
uint32_t
height
;
uint32_t
stride
;
SurfaceFormat
format
;
}
;
struct
IPCTransferableDataBlob
{
IPCBlob
blob
;
}
;
union
IPCTransferableDataType
{
IPCTransferableDataString
;
IPCTransferableDataCString
;
IPCTransferableDataInputStream
;
IPCTransferableDataImageContainer
;
IPCTransferableDataBlob
;
}
;
struct
IPCTransferableDataItem
{
nsCString
flavor
;
IPCTransferableDataType
data
;
}
;
struct
IPCTransferableData
{
IPCTransferableDataItem
[
]
items
;
}
;
union
IPCTransferableDataOrError
{
IPCTransferableData
;
nsresult
;
}
;
struct
IPCTransferable
{
IPCTransferableData
data
;
bool
isPrivateData
;
nullable
nsIPrincipal
requestingPrincipal
;
CookieJarSettingsArgs
?
cookieJarSettings
;
nsContentPolicyType
contentPolicyType
;
nullable
nsIReferrerInfo
referrerInfo
;
}
;
}
}
