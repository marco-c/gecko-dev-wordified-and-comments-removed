#
include
"
mozilla
/
dom
/
ContentBridgeParent
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
base
/
task
.
h
"
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
jsipc
;
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
ContentBridgeParent
nsIContentParent
nsIObserver
)
ContentBridgeParent
:
:
ContentBridgeParent
(
Transport
*
aTransport
)
:
mTransport
(
aTransport
)
{
}
ContentBridgeParent
:
:
~
ContentBridgeParent
(
)
{
}
void
ContentBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
RemoveObserver
(
this
"
content
-
child
-
shutdown
"
)
;
}
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
ContentBridgeParent
:
:
DeferredDestroy
)
)
;
}
ContentBridgeParent
*
ContentBridgeParent
:
:
Create
(
Transport
*
aTransport
ProcessId
aOtherPid
)
{
RefPtr
<
ContentBridgeParent
>
bridge
=
new
ContentBridgeParent
(
aTransport
)
;
bridge
-
>
mSelfRef
=
bridge
;
DebugOnly
<
bool
>
ok
=
bridge
-
>
Open
(
aTransport
aOtherPid
XRE_GetIOMessageLoop
(
)
)
;
MOZ_ASSERT
(
ok
)
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
AddObserver
(
bridge
"
content
-
child
-
shutdown
"
false
)
;
}
bridge
-
>
mMessageManager
-
>
InitWithCallback
(
bridge
)
;
return
bridge
.
get
(
)
;
}
void
ContentBridgeParent
:
:
DeferredDestroy
(
)
{
mSelfRef
=
nullptr
;
}
bool
ContentBridgeParent
:
:
RecvSyncMessage
(
const
nsString
&
aMsg
const
ClonedMessageData
&
aData
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
nsTArray
<
StructuredCloneData
>
*
aRetvals
)
{
return
nsIContentParent
:
:
RecvSyncMessage
(
aMsg
aData
Move
(
aCpows
)
aPrincipal
aRetvals
)
;
}
bool
ContentBridgeParent
:
:
RecvAsyncMessage
(
const
nsString
&
aMsg
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
{
return
nsIContentParent
:
:
RecvAsyncMessage
(
aMsg
Move
(
aCpows
)
aPrincipal
aData
)
;
}
PBlobParent
*
ContentBridgeParent
:
:
SendPBlobConstructor
(
PBlobParent
*
actor
const
BlobConstructorParams
&
params
)
{
return
PContentBridgeParent
:
:
SendPBlobConstructor
(
actor
params
)
;
}
PBrowserParent
*
ContentBridgeParent
:
:
SendPBrowserConstructor
(
PBrowserParent
*
aActor
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForBrowser
)
{
return
PContentBridgeParent
:
:
SendPBrowserConstructor
(
aActor
aTabId
aContext
aChromeFlags
aCpID
aIsForBrowser
)
;
}
PBlobParent
*
ContentBridgeParent
:
:
AllocPBlobParent
(
const
BlobConstructorParams
&
aParams
)
{
return
nsIContentParent
:
:
AllocPBlobParent
(
aParams
)
;
}
bool
ContentBridgeParent
:
:
DeallocPBlobParent
(
PBlobParent
*
aActor
)
{
return
nsIContentParent
:
:
DeallocPBlobParent
(
aActor
)
;
}
mozilla
:
:
jsipc
:
:
PJavaScriptParent
*
ContentBridgeParent
:
:
AllocPJavaScriptParent
(
)
{
return
nsIContentParent
:
:
AllocPJavaScriptParent
(
)
;
}
bool
ContentBridgeParent
:
:
DeallocPJavaScriptParent
(
PJavaScriptParent
*
parent
)
{
return
nsIContentParent
:
:
DeallocPJavaScriptParent
(
parent
)
;
}
PBrowserParent
*
ContentBridgeParent
:
:
AllocPBrowserParent
(
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForBrowser
)
{
return
nsIContentParent
:
:
AllocPBrowserParent
(
aTabId
aContext
aChromeFlags
aCpID
aIsForBrowser
)
;
}
bool
ContentBridgeParent
:
:
DeallocPBrowserParent
(
PBrowserParent
*
aParent
)
{
return
nsIContentParent
:
:
DeallocPBrowserParent
(
aParent
)
;
}
void
ContentBridgeParent
:
:
NotifyTabDestroyed
(
)
{
int32_t
numLiveTabs
=
ManagedPBrowserParent
(
)
.
Count
(
)
;
if
(
numLiveTabs
=
=
1
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
this
&
ContentBridgeParent
:
:
Close
)
)
;
}
}
jsipc
:
:
CPOWManager
*
ContentBridgeParent
:
:
GetCPOWManager
(
)
{
if
(
PJavaScriptParent
*
p
=
LoneManagedOrNullAsserts
(
ManagedPJavaScriptParent
(
)
)
)
{
return
CPOWManagerFor
(
p
)
;
}
return
nullptr
;
}
NS_IMETHODIMP
ContentBridgeParent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
"
content
-
child
-
shutdown
"
)
)
{
Close
(
)
;
}
return
NS_OK
;
}
PFileDescriptorSetParent
*
ContentBridgeParent
:
:
AllocPFileDescriptorSetParent
(
const
FileDescriptor
&
aFD
)
{
return
nsIContentParent
:
:
AllocPFileDescriptorSetParent
(
aFD
)
;
}
bool
ContentBridgeParent
:
:
DeallocPFileDescriptorSetParent
(
PFileDescriptorSetParent
*
aActor
)
{
return
nsIContentParent
:
:
DeallocPFileDescriptorSetParent
(
aActor
)
;
}
PSendStreamParent
*
ContentBridgeParent
:
:
AllocPSendStreamParent
(
)
{
return
nsIContentParent
:
:
AllocPSendStreamParent
(
)
;
}
bool
ContentBridgeParent
:
:
DeallocPSendStreamParent
(
PSendStreamParent
*
aActor
)
{
return
nsIContentParent
:
:
DeallocPSendStreamParent
(
aActor
)
;
}
}
}
