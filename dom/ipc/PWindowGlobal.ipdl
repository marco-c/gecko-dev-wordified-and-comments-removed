include
"
mozilla
/
dom
/
DocShellMessageUtils
.
h
"
;
include
protocol
PBrowser
;
include
protocol
PInProcess
;
include
protocol
PBrowserBridge
;
include
DOMTypes
;
include
ClientIPCTypes
;
using
JSWindowActorMessageKind
from
"
mozilla
/
dom
/
JSWindowActor
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntRect
from
"
mozilla
/
gfx
/
Rect
.
h
"
;
using
moveonly
mozilla
:
:
gfx
:
:
PaintFragment
from
"
mozilla
/
gfx
/
CrossProcessPaint
.
h
"
;
using
nscolor
from
"
nsColor
.
h
"
;
using
refcounted
class
nsDocShellLoadState
from
"
nsDocShellLoadState
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
JSWindowActorMessageMeta
{
nsString
actorName
;
nsString
messageName
;
uint64_t
queryId
;
JSWindowActorMessageKind
kind
;
}
;
struct
IPCWebShareData
{
nsCString
title
;
nsCString
text
;
nsIURI
url
;
}
;
async
refcounted
protocol
PWindowGlobal
{
manager
PBrowser
or
PInProcess
;
child
:
async
__delete__
(
)
;
async
MakeFrameLocal
(
MaybeDiscardedBrowsingContext
aFrameContext
uint64_t
aSwitchId
)
;
async
MakeFrameRemote
(
MaybeDiscardedBrowsingContext
aFrameContext
ManagedEndpoint
<
PBrowserBridgeChild
>
aEndpoint
TabId
aTabId
)
returns
(
bool
success
)
;
async
DrawSnapshot
(
IntRect
?
aRect
float
aScale
nscolor
aBackgroundColor
uint32_t
aFlags
)
returns
(
PaintFragment
retval
)
;
async
GetSecurityInfo
(
)
returns
(
nsCString
?
serializedSecInfo
)
;
both
:
async
RawMessage
(
JSWindowActorMessageMeta
aMetadata
ClonedMessageData
aData
ClonedMessageData
aStack
)
;
parent
:
async
LoadURI
(
MaybeDiscardedBrowsingContext
aTargetBC
nsDocShellLoadState
aLoadState
bool
aSetNavigating
)
;
async
InternalLoad
(
MaybeDiscardedBrowsingContext
aTargetBC
nsDocShellLoadState
aLoadState
)
;
async
UpdateDocumentURI
(
nsIURI
aUri
)
;
async
UpdateDocumentTitle
(
nsString
aTitle
)
;
async
SetIsInitialDocument
(
bool
aIsInitialDocument
)
;
async
SetHasBeforeUnload
(
bool
aHasBeforeUnload
)
;
async
Share
(
IPCWebShareData
aData
)
returns
(
nsresult
rv
)
;
async
GetContentBlockingEvents
(
)
returns
(
uint32_t
events
)
;
async
SetClientInfo
(
IPCClientInfo
aClientInfo
)
;
async
Destroy
(
)
;
}
;
}
}
