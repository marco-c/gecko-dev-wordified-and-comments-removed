include
"
mozilla
/
dom
/
DocShellMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
;
include
"
mozilla
/
dom
/
IdentityCredentialSerializationHelpers
.
h
"
;
include
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
SessionStoreMessageUtils
.
h
"
;
include
"
mozilla
/
ipc
/
TransportSecurityInfoUtils
.
h
"
;
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
;
include
protocol
PBrowser
;
include
protocol
PInProcess
;
include
protocol
PBrowserBridge
;
include
DOMTypes
;
include
ClientIPCTypes
;
include
IPCIdentityCredential
;
include
NeckoChannelParams
;
include
SessionStoreTypes
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
using
mozilla
:
:
dom
:
:
JSActorMessageKind
from
"
mozilla
/
dom
/
JSActor
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntRect
from
"
mozilla
/
gfx
/
Rect
.
h
"
;
[
MoveOnly
]
using
mozilla
:
:
gfx
:
:
PaintFragment
from
"
mozilla
/
gfx
/
CrossProcessPaint
.
h
"
;
using
nscolor
from
"
nsColor
.
h
"
;
using
mozilla
:
:
dom
:
:
XPCOMPermitUnloadAction
from
"
nsIDocumentViewer
.
h
"
;
using
mozilla
:
:
dom
:
:
TabId
from
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
[
RefCounted
]
using
class
nsITransportSecurityInfo
from
"
nsITransportSecurityInfo
.
h
"
;
using
mozilla
:
:
UseCounters
from
"
mozilla
/
UseCounter
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeDiscardedWindowContext
from
"
mozilla
/
dom
/
WindowContext
.
h
"
;
[
RefCounted
]
using
mozilla
:
:
dom
:
:
FeaturePolicy
from
"
mozilla
/
dom
/
FeaturePolicy
.
h
"
;
[
RefCounted
]
using
mozilla
:
:
dom
:
:
SessionStoreRestoreData
from
"
mozilla
/
dom
/
SessionStoreRestoreData
.
h
"
;
using
mozilla
:
:
dom
:
:
IdentityCredentialRequestOptions
from
"
mozilla
/
dom
/
IdentityCredentialBinding
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
JSActorMessageMeta
{
nsCString
actorName
;
nsString
messageName
;
uint64_t
queryId
;
JSActorMessageKind
kind
;
}
;
struct
IPCWebShareData
{
nsCString
title
;
nsCString
text
;
nullable
nsIURI
url
;
}
;
async
protocol
PWindowGlobal
{
manager
PBrowser
or
PInProcess
;
child
:
async
__delete__
(
)
;
async
MakeFrameLocal
(
MaybeDiscardedBrowsingContext
aFrameContext
uint64_t
aSwitchId
)
;
async
MakeFrameRemote
(
MaybeDiscardedBrowsingContext
aFrameContext
ManagedEndpoint
<
PBrowserBridgeChild
>
aEndpoint
TabId
aTabId
LayersId
aLayersId
)
returns
(
bool
success
)
;
async
DrawSnapshot
(
IntRect
?
aRect
float
aScale
nscolor
aBackgroundColor
uint32_t
aFlags
)
returns
(
PaintFragment
retval
)
;
async
DispatchSecurityPolicyViolation
(
nsString
aViolationEventJSON
)
;
async
SaveStorageAccessPermissionGranted
(
)
;
async
AddBlockedFrameNodeByClassifier
(
MaybeDiscardedBrowsingContext
aNode
)
;
async
ResetScalingZoom
(
)
;
async
SetContainerFeaturePolicy
(
nullable
FeaturePolicy
aContainerFeaturePolicy
)
;
async
RestoreDocShellState
(
DocShellRestoreState
aState
)
returns
(
bool
success
)
;
async
RestoreTabContent
(
nullable
SessionStoreRestoreData
aData
)
returns
(
bool
success
)
;
both
:
async
RawMessage
(
JSActorMessageMeta
aMetadata
ClonedMessageData
?
aData
ClonedMessageData
?
aStack
)
;
parent
:
async
LoadURI
(
MaybeDiscardedBrowsingContext
aTargetBC
nsDocShellLoadState
aLoadState
bool
aSetNavigating
)
;
async
InternalLoad
(
nsDocShellLoadState
aLoadState
)
;
[
LazySend
]
async
UpdateDocumentURI
(
nullable
nsIURI
aUri
)
;
[
LazySend
]
async
UpdateDocumentPrincipal
(
nullable
nsIPrincipal
aPrincipal
nullable
nsIPrincipal
aStoragePrincipal
)
;
[
LazySend
]
async
UpdateDocumentHasLoaded
(
bool
aDocumentHasLoaded
)
;
[
LazySend
]
async
UpdateDocumentHasUserInteracted
(
bool
aDocumentHasUserInteracted
)
;
[
LazySend
]
async
UpdateSandboxFlags
(
uint32_t
aSandboxFlags
)
;
[
LazySend
]
async
UpdateDocumentCspSettings
(
bool
aBlockAllMixedContent
bool
aUpgradeInsecureRequests
)
;
[
LazySend
]
async
UpdateCookieJarSettings
(
CookieJarSettingsArgs
cookieJarSettings
)
;
[
LazySend
]
async
UpdateDocumentTitle
(
nsString
aTitle
)
;
[
LazySend
]
async
UpdateDocumentSecurityInfo
(
nullable
nsITransportSecurityInfo
aSecurityInfo
)
;
[
LazySend
]
async
UpdateHttpsOnlyStatus
(
uint32_t
aHttpsOnlyStatus
)
;
[
LazySend
]
async
SetIsInitialDocument
(
bool
aIsInitialDocument
)
;
async
Share
(
IPCWebShareData
aData
)
returns
(
nsresult
rv
)
;
async
GetContentBlockingEvents
(
)
returns
(
uint32_t
events
)
;
[
LazySend
]
async
SetClientInfo
(
IPCClientInfo
aClientInfo
)
;
async
CheckPermitUnload
(
bool
aHasInProcessBlocker
XPCOMPermitUnloadAction
aAction
)
returns
(
bool
permitUnload
)
;
async
ExpectPageUseCounters
(
MaybeDiscardedWindowContext
aTop
)
;
async
AccumulatePageUseCounters
(
UseCounters
aUseCounters
)
;
async
RequestRestoreTabContent
(
)
;
async
UpdateBFCacheStatus
(
uint32_t
aOnFlags
uint32_t
aOffFlags
)
;
async
UpdateActivePeerConnectionStatus
(
bool
aIsAdded
)
;
async
SetSingleChannelId
(
uint64_t
?
singleChannelId
)
;
async
SetDocumentDomain
(
nullable
nsIURI
aDomain
)
;
async
Destroy
(
)
;
async
ReloadWithHttpsOnlyException
(
)
;
async
DiscoverIdentityCredentialFromExternalSource
(
IdentityCredentialRequestOptions
aOptions
)
returns
(
IPCIdentityCredential
?
identityCredential
)
;
async
GetStorageAccessPermission
(
)
returns
(
uint32_t
permission_action
)
;
async
SetCookies
(
nsCString
baseDomain
OriginAttributes
attrs
nullable
nsIURI
host
bool
fromHttp
CookieStruct
[
]
cookies
)
;
child
:
async
NotifyPermissionChange
(
nsCString
type
uint32_t
permission
)
;
}
;
}
}
