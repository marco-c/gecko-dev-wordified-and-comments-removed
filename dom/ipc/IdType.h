#
ifndef
mozilla_dom_IdType_h
#
define
mozilla_dom_IdType_h
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
ContentParent
;
class
BrowserParent
;
template
<
typename
T
>
class
IdType
{
friend
struct
IPC
:
:
ParamTraits
<
IdType
<
T
>
>
;
public
:
IdType
(
)
:
mId
(
0
)
{
}
explicit
IdType
(
uint64_t
aId
)
:
mId
(
aId
)
{
}
operator
uint64_t
(
)
const
{
return
mId
;
}
IdType
&
operator
=
(
uint64_t
aId
)
{
mId
=
aId
;
return
*
this
;
}
bool
operator
<
(
const
IdType
&
rhs
)
{
return
mId
<
rhs
.
mId
;
}
private
:
uint64_t
mId
;
}
;
using
TabId
=
IdType
<
BrowserParent
>
;
using
ContentParentId
=
IdType
<
ContentParent
>
;
}
}
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
IdType
<
T
>
>
{
using
paramType
=
mozilla
:
:
dom
:
:
IdType
<
T
>
;
static
void
Write
(
MessageWriter
*
aWriter
const
paramType
&
aParam
)
{
WriteParam
(
aWriter
aParam
.
mId
)
;
}
static
bool
Read
(
MessageReader
*
aReader
paramType
*
aResult
)
{
return
ReadParam
(
aReader
&
aResult
-
>
mId
)
;
}
}
;
}
#
endif
