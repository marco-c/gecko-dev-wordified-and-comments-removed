#
include
"
mozilla
/
dom
/
JSOracleChild
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
JSValidatorChild
.
h
"
#
include
"
mozilla
/
dom
/
PJSValidatorChild
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
using
namespace
mozilla
:
:
dom
;
static
mozilla
:
:
StaticRefPtr
<
JSOracleChild
>
sOracleSingletonChild
;
static
mozilla
:
:
StaticAutoPtr
<
JSFrontendContextHolder
>
sJSFrontendContextHolder
;
void
JSFrontendContextHolder
:
:
MaybeInit
(
)
{
if
(
!
sJSFrontendContextHolder
)
{
sJSFrontendContextHolder
=
new
JSFrontendContextHolder
(
)
;
ClearOnShutdown
(
&
sJSFrontendContextHolder
)
;
}
}
JS
:
:
FrontendContext
*
JSOracleChild
:
:
JSFrontendContext
(
)
{
MOZ_ASSERT
(
sJSFrontendContextHolder
)
;
return
sJSFrontendContextHolder
-
>
mFc
;
}
JSOracleChild
*
JSOracleChild
:
:
GetSingleton
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sOracleSingletonChild
)
{
sOracleSingletonChild
=
new
JSOracleChild
(
)
;
ClearOnShutdown
(
&
sOracleSingletonChild
)
;
}
return
sOracleSingletonChild
;
}
already_AddRefed
<
PJSValidatorChild
>
JSOracleChild
:
:
AllocPJSValidatorChild
(
)
{
return
MakeAndAddRef
<
JSValidatorChild
>
(
)
;
}
void
JSOracleChild
:
:
Start
(
Endpoint
<
PJSOracleChild
>
&
&
aEndpoint
)
{
DebugOnly
<
bool
>
ok
=
std
:
:
move
(
aEndpoint
)
.
Bind
(
this
)
;
JSFrontendContextHolder
:
:
MaybeInit
(
)
;
MOZ_ASSERT
(
ok
)
;
}
