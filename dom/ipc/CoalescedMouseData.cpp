#
include
"
base
/
basictypes
.
h
"
#
include
"
CoalescedMouseData
.
h
"
#
include
"
TabChild
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
void
CoalescedMouseData
:
:
Coalesce
(
const
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
{
if
(
IsEmpty
(
)
)
{
mCoalescedInputEvent
=
MakeUnique
<
WidgetMouseEvent
>
(
aEvent
)
;
mGuid
=
aGuid
;
mInputBlockId
=
aInputBlockId
;
MOZ_ASSERT
(
!
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
)
;
}
else
{
MOZ_ASSERT
(
mGuid
=
=
aGuid
)
;
MOZ_ASSERT
(
mInputBlockId
=
=
aInputBlockId
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mModifiers
=
=
aEvent
.
mModifiers
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mReason
=
=
aEvent
.
mReason
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
inputSource
=
=
aEvent
.
inputSource
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mButton
=
=
aEvent
.
mButton
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mButtons
=
=
aEvent
.
mButtons
)
;
mCoalescedInputEvent
-
>
mTimeStamp
=
aEvent
.
mTimeStamp
;
mCoalescedInputEvent
-
>
mRefPoint
=
aEvent
.
mRefPoint
;
mCoalescedInputEvent
-
>
mPressure
=
aEvent
.
mPressure
;
mCoalescedInputEvent
-
>
AssignPointerHelperData
(
aEvent
)
;
}
if
(
aEvent
.
mMessage
=
=
eMouseMove
&
&
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
)
{
if
(
!
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
)
{
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
=
new
WidgetPointerEventHolder
(
)
;
}
WidgetPointerEvent
*
event
=
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
-
>
mEvents
.
AppendElement
(
aEvent
)
;
event
-
>
mFlags
.
mBubbles
=
false
;
event
-
>
mFlags
.
mCancelable
=
false
;
}
}
bool
CoalescedMouseData
:
:
CanCoalesce
(
const
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
{
MOZ_ASSERT
(
aEvent
.
mMessage
=
=
eMouseMove
)
;
return
!
mCoalescedInputEvent
|
|
(
mCoalescedInputEvent
-
>
mModifiers
=
=
aEvent
.
mModifiers
&
&
mCoalescedInputEvent
-
>
inputSource
=
=
aEvent
.
inputSource
&
&
mCoalescedInputEvent
-
>
pointerId
=
=
aEvent
.
pointerId
&
&
mCoalescedInputEvent
-
>
mButton
=
=
aEvent
.
mButton
&
&
mCoalescedInputEvent
-
>
mButtons
=
=
aEvent
.
mButtons
&
&
mGuid
=
=
aGuid
&
&
mInputBlockId
=
=
aInputBlockId
)
;
}
void
CoalescedMouseMoveFlusher
:
:
WillRefresh
(
mozilla
:
:
TimeStamp
aTime
)
{
MOZ_ASSERT
(
mRefreshDriver
)
;
mTabChild
-
>
FlushAllCoalescedMouseData
(
)
;
mTabChild
-
>
ProcessPendingCoalescedMouseDataAndDispatchEvents
(
)
;
}
void
CoalescedMouseMoveFlusher
:
:
StartObserver
(
)
{
nsRefreshDriver
*
refreshDriver
=
GetRefreshDriver
(
)
;
if
(
mRefreshDriver
&
&
mRefreshDriver
=
=
refreshDriver
)
{
return
;
}
RemoveObserver
(
)
;
if
(
refreshDriver
)
{
mRefreshDriver
=
refreshDriver
;
mRefreshDriver
-
>
AddRefreshObserver
(
this
FlushType
:
:
Event
)
;
}
}
void
CoalescedMouseMoveFlusher
:
:
RemoveObserver
(
)
{
if
(
mRefreshDriver
)
{
mRefreshDriver
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Event
)
;
mRefreshDriver
=
nullptr
;
}
}
nsRefreshDriver
*
CoalescedMouseMoveFlusher
:
:
GetRefreshDriver
(
)
{
PresShell
*
presShell
=
mTabChild
-
>
GetTopLevelPresShell
(
)
;
if
(
!
presShell
|
|
!
presShell
-
>
GetPresContext
(
)
|
|
!
presShell
-
>
GetPresContext
(
)
-
>
RefreshDriver
(
)
)
{
return
nullptr
;
}
return
presShell
-
>
GetPresContext
(
)
-
>
RefreshDriver
(
)
;
}
