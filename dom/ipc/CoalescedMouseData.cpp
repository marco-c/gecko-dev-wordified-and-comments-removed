#
include
"
base
/
basictypes
.
h
"
#
include
"
CoalescedMouseData
.
h
"
#
include
"
BrowserChild
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsRefreshDriver
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
void
CoalescedMouseData
:
:
Coalesce
(
const
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
)
{
if
(
IsEmpty
(
)
)
{
mCoalescedInputEvent
=
MakeUnique
<
WidgetMouseEvent
>
(
aEvent
)
;
mGuid
=
aGuid
;
mInputBlockId
=
aInputBlockId
;
MOZ_ASSERT
(
!
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
)
;
}
else
{
MOZ_ASSERT
(
mGuid
=
=
aGuid
)
;
MOZ_ASSERT
(
mInputBlockId
=
=
aInputBlockId
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mModifiers
=
=
aEvent
.
mModifiers
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mReason
=
=
aEvent
.
mReason
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mInputSource
=
=
aEvent
.
mInputSource
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mButton
=
=
aEvent
.
mButton
)
;
MOZ_ASSERT
(
mCoalescedInputEvent
-
>
mButtons
=
=
aEvent
.
mButtons
)
;
mCoalescedInputEvent
-
>
mTimeStamp
=
aEvent
.
mTimeStamp
;
mCoalescedInputEvent
-
>
mRefPoint
=
aEvent
.
mRefPoint
;
mCoalescedInputEvent
-
>
mPressure
=
aEvent
.
mPressure
;
mCoalescedInputEvent
-
>
AssignPointerHelperData
(
aEvent
)
;
}
if
(
aEvent
.
mMessage
=
=
eMouseMove
)
{
if
(
!
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
)
{
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
=
new
WidgetPointerEventHolder
(
)
;
}
WidgetPointerEvent
*
event
=
mCoalescedInputEvent
-
>
mCoalescedWidgetEvents
-
>
mEvents
.
AppendElement
(
aEvent
)
;
event
-
>
mMessage
=
ePointerMove
;
event
-
>
mButton
=
MouseButton
:
:
eNotPressed
;
event
-
>
mPressure
=
aEvent
.
ComputeMouseButtonPressure
(
)
;
event
-
>
mFlags
.
mBubbles
=
false
;
event
-
>
mFlags
.
mCancelable
=
false
;
}
}
bool
CoalescedMouseData
:
:
CanCoalesce
(
const
WidgetMouseEvent
&
aEvent
const
ScrollableLayerGuid
&
aGuid
const
uint64_t
&
aInputBlockId
const
nsRefreshDriver
*
aRefreshDriver
)
{
MOZ_ASSERT
(
aEvent
.
mMessage
=
=
eMouseMove
)
;
if
(
!
mCoalescedInputEvent
)
{
return
true
;
}
if
(
mCoalescedInputEvent
-
>
mFlags
.
mIsSynthesizedForTests
!
=
aEvent
.
mFlags
.
mIsSynthesizedForTests
|
|
mCoalescedInputEvent
-
>
mModifiers
!
=
aEvent
.
mModifiers
|
|
mCoalescedInputEvent
-
>
mInputSource
!
=
aEvent
.
mInputSource
|
|
mCoalescedInputEvent
-
>
pointerId
!
=
aEvent
.
pointerId
|
|
mCoalescedInputEvent
-
>
mButton
!
=
aEvent
.
mButton
|
|
mCoalescedInputEvent
-
>
mButtons
!
=
aEvent
.
mButtons
|
|
mGuid
!
=
aGuid
|
|
mInputBlockId
!
=
aInputBlockId
)
{
return
false
;
}
if
(
!
aEvent
.
mFlags
.
mIsSynthesizedForTests
)
{
return
true
;
}
return
aRefreshDriver
&
&
aRefreshDriver
-
>
IsTestControllingRefreshesEnabled
(
)
;
}
CoalescedMouseMoveFlusher
:
:
CoalescedMouseMoveFlusher
(
BrowserChild
*
aBrowserChild
)
:
CoalescedInputFlusher
(
aBrowserChild
)
{
}
void
CoalescedMouseMoveFlusher
:
:
WillRefresh
(
mozilla
:
:
TimeStamp
aTime
)
{
MOZ_ASSERT
(
mRefreshDriver
)
;
mBrowserChild
-
>
FlushAllCoalescedMouseData
(
)
;
mBrowserChild
-
>
ProcessPendingCoalescedMouseDataAndDispatchEvents
(
)
;
}
CoalescedMouseMoveFlusher
:
:
~
CoalescedMouseMoveFlusher
(
)
{
RemoveObserver
(
)
;
}
