#
ifdef
MOZ_WIDGET_GTK
#
include
<
gtk
/
gtk
.
h
>
#
include
<
gdk
/
gdkx
.
h
>
#
endif
#
include
"
ContentChild
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
BrowserChild
.
h
"
#
include
"
HandlerServiceChild
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
mozilla
/
BenchmarkStorageChild
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
MemoryTelemetry
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
PerfStats
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ProcessHangMonitorIPC
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
TelemetryIPC
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerChild
.
h
"
#
include
"
mozilla
/
devtools
/
HeapSnapshotTempFileHelperChild
.
h
"
#
include
"
mozilla
/
docshell
/
OfflineCacheUpdateChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeHost
.
h
"
#
include
"
mozilla
/
dom
/
ClientManager
.
h
"
#
include
"
mozilla
/
dom
/
ClientOpenWindowOpActors
.
h
"
#
include
"
mozilla
/
dom
/
ChildProcessMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
#
include
"
mozilla
/
dom
/
ExternalHelperAppChild
.
h
"
#
include
"
mozilla
/
dom
/
GetFilesHelper
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobInputStreamChild
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
#
include
"
mozilla
/
dom
/
JSWindowActorService
.
h
"
#
include
"
mozilla
/
dom
/
LSObject
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
dom
/
PLoginReputationChild
.
h
"
#
include
"
mozilla
/
dom
/
PSessionStorageObserverChild
.
h
"
#
include
"
mozilla
/
dom
/
PostMessageEvent
.
h
"
#
include
"
mozilla
/
dom
/
PushNotifier
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerService
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
dom
/
TabGroup
.
h
"
#
include
"
mozilla
/
dom
/
URLClassifierChild
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalChild
.
h
"
#
include
"
mozilla
/
dom
/
WorkerDebugger
.
h
"
#
include
"
mozilla
/
dom
/
WorkerDebuggerManager
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
SharedMap
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
psm
/
PSMContentListener
.
h
"
#
include
"
mozilla
/
hal_sandbox
/
PHalChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptorSetChild
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptorUtils
.
h
"
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
include
"
mozilla
/
ipc
/
PChildToParentStreamChild
.
h
"
#
include
"
mozilla
/
ipc
/
PParentToChildStreamChild
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
mozilla
/
ipc
/
TestShellChild
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
mozilla
/
jsipc
/
PJavaScript
.
h
"
#
include
"
mozilla
/
layers
/
APZChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
ContentProcessController
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
include
"
mozilla
/
loader
/
ScriptCacheActors
.
h
"
#
include
"
mozilla
/
net
/
NeckoChild
.
h
"
#
include
"
mozilla
/
net
/
CookieServiceChild
.
h
"
#
include
"
mozilla
/
net
/
CaptivePortalService
.
h
"
#
include
"
mozilla
/
PerformanceMetricsCollector
.
h
"
#
include
"
mozilla
/
PerformanceUtils
.
h
"
#
include
"
mozilla
/
plugins
/
PluginInstanceParent
.
h
"
#
include
"
mozilla
/
plugins
/
PluginModuleParent
.
h
"
#
include
"
mozilla
/
recordreplay
/
ParentIPC
.
h
"
#
include
"
mozilla
/
widget
/
ScreenManager
.
h
"
#
include
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
#
include
"
nsBaseDragService
.
h
"
#
include
"
mozilla
/
media
/
MediaChild
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
WebBrowserPersistDocumentChild
.
h
"
#
include
"
mozilla
/
HangDetails
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
nsIChildProcessChannelListener
.
h
"
#
include
"
mozilla
/
net
/
HttpChannelChild
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
imgLoader
.
h
"
#
include
"
GMPServiceChild
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsIWorkerDebuggerManager
.
h
"
#
include
"
nsGeolocation
.
h
"
#
include
"
audio_thread_priority
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
if
!
defined
(
XP_WIN
)
#
include
"
mozilla
/
Omnijar
.
h
"
#
endif
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ChildProfilerController
.
h
"
#
endif
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
elif
defined
(
XP_LINUX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
include
"
mozilla
/
SandboxInfo
.
h
"
#
include
"
CubebUtils
.
h
"
#
elif
defined
(
XP_MACOSX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
elif
defined
(
__OpenBSD__
)
#
include
<
unistd
.
h
>
#
endif
#
endif
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozInlineSpellChecker
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsDocShellLoadState
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIConsoleListener
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsICycleCollectorListener
.
h
"
#
include
"
nsIIdlePeriod
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIMemoryInfoDumper
.
h
"
#
include
"
nsIMutable
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsMemoryInfoDumper
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsStyleSheetService
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
SandboxHal
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
nsAnonymousTemporaryFile
.
h
"
#
include
"
nsClipboardProxy
.
h
"
#
include
"
nsDirectoryService
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsContentPermissionHelper
.
h
"
#
include
"
nsPluginHost
.
h
"
#
ifdef
NS_PRINTING
#
include
"
nsPrintingProxy
.
h
"
#
endif
#
include
"
nsWindowMemoryReporter
.
h
"
#
include
"
ReferrerInfo
.
h
"
#
include
"
IHistory
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
process_util
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
nsChromeRegistryContent
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
nsIGeolocationProvider
.
h
"
#
include
"
mozilla
/
dom
/
PCycleCollectWithLogsChild
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
ifdef
MOZ_WEBRTC
#
include
"
signaling
/
src
/
peerconnection
/
WebrtcGlobalChild
.
h
"
#
endif
#
include
"
nsPermission
.
h
"
#
include
"
nsPermissionManager
.
h
"
#
include
"
PermissionMessageUtils
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
APKOpen
.
h
"
#
endif
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
include
"
mozilla
/
widget
/
AudioSession
.
h
"
#
include
"
mozilla
/
audio
/
AudioNotificationReceiver
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
#
include
"
nsMacUtilsImpl
.
h
"
#
endif
#
ifdef
MOZ_X11
#
include
"
mozilla
/
X11Util
.
h
"
#
endif
#
ifdef
ACCESSIBILITY
#
include
"
nsAccessibilityService
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
a11y
/
AccessibleWrap
.
h
"
#
endif
#
include
"
mozilla
/
a11y
/
DocAccessible
.
h
"
#
include
"
mozilla
/
a11y
/
DocManager
.
h
"
#
include
"
mozilla
/
a11y
/
OuterDocAccessible
.
h
"
#
endif
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
MediaController
.
h
"
#
include
"
mozilla
/
dom
/
PPresentationChild
.
h
"
#
include
"
mozilla
/
dom
/
PresentationIPCService
.
h
"
#
include
"
mozilla
/
ipc
/
InputStreamUtils
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamAlloc
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamDestination
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamSource
.
h
"
#
ifdef
MOZ_WEBSPEECH
#
include
"
mozilla
/
dom
/
PSpeechSynthesisChild
.
h
"
#
endif
#
include
"
ClearOnShutdown
.
h
"
#
include
"
ProcessUtils
.
h
"
#
include
"
URIUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
DomainPolicy
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
dom
/
TabContext
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterClient
.
h
"
#
include
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
#
include
"
mozilla
/
widget
/
PuppetBidiKeyboard
.
h
"
#
include
"
mozilla
/
RemoteSpellCheckEngineChild
.
h
"
#
include
"
GMPServiceChild
.
h
"
#
include
"
GfxInfoBase
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
nscore
.
h
"
#
include
"
VRManagerChild
.
h
"
#
include
"
private
/
pprio
.
h
"
#
include
"
nsString
.
h
"
#
include
"
MMPrinter
.
h
"
#
ifdef
MOZ_WIDGET_GTK
#
include
"
nsAppRunner
.
h
"
#
endif
#
ifdef
MOZ_CODE_COVERAGE
#
include
"
mozilla
/
CodeCoverageHandler
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
docshell
;
using
namespace
mozilla
:
:
dom
:
:
ipc
;
using
namespace
mozilla
:
:
media
;
using
namespace
mozilla
:
:
embedding
;
using
namespace
mozilla
:
:
gmp
;
using
namespace
mozilla
:
:
hal_sandbox
;
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
intl
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
layout
;
using
namespace
mozilla
:
:
net
;
using
namespace
mozilla
:
:
jsipc
;
using
namespace
mozilla
:
:
psm
;
using
namespace
mozilla
:
:
widget
;
using
mozilla
:
:
loader
:
:
PScriptCacheChild
;
namespace
mozilla
{
namespace
dom
{
class
CycleCollectWithLogsChild
final
:
public
PCycleCollectWithLogsChild
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
CycleCollectWithLogsChild
)
class
Sink
final
:
public
nsICycleCollectorLogSink
{
NS_DECL_ISUPPORTS
Sink
(
CycleCollectWithLogsChild
*
aActor
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
{
mActor
=
aActor
;
mGCLog
=
FileDescriptorToFILE
(
aGCLog
"
w
"
)
;
mCCLog
=
FileDescriptorToFILE
(
aCCLog
"
w
"
)
;
}
NS_IMETHOD
Open
(
FILE
*
*
aGCLog
FILE
*
*
aCCLog
)
override
{
if
(
NS_WARN_IF
(
!
mGCLog
)
|
|
NS_WARN_IF
(
!
mCCLog
)
)
{
return
NS_ERROR_FAILURE
;
}
*
aGCLog
=
mGCLog
;
*
aCCLog
=
mCCLog
;
return
NS_OK
;
}
NS_IMETHOD
CloseGCLog
(
)
override
{
MOZ_ASSERT
(
mGCLog
)
;
fclose
(
mGCLog
)
;
mGCLog
=
nullptr
;
mActor
-
>
SendCloseGCLog
(
)
;
return
NS_OK
;
}
NS_IMETHOD
CloseCCLog
(
)
override
{
MOZ_ASSERT
(
mCCLog
)
;
fclose
(
mCCLog
)
;
mCCLog
=
nullptr
;
mActor
-
>
SendCloseCCLog
(
)
;
return
NS_OK
;
}
NS_IMETHOD
GetFilenameIdentifier
(
nsAString
&
aIdentifier
)
override
{
return
UnimplementedProperty
(
)
;
}
NS_IMETHOD
SetFilenameIdentifier
(
const
nsAString
&
aIdentifier
)
override
{
return
UnimplementedProperty
(
)
;
}
NS_IMETHOD
GetProcessIdentifier
(
int32_t
*
aIdentifier
)
override
{
return
UnimplementedProperty
(
)
;
}
NS_IMETHOD
SetProcessIdentifier
(
int32_t
aIdentifier
)
override
{
return
UnimplementedProperty
(
)
;
}
NS_IMETHOD
GetGcLog
(
nsIFile
*
*
aPath
)
override
{
return
UnimplementedProperty
(
)
;
}
NS_IMETHOD
GetCcLog
(
nsIFile
*
*
aPath
)
override
{
return
UnimplementedProperty
(
)
;
}
private
:
~
Sink
(
)
{
if
(
mGCLog
)
{
fclose
(
mGCLog
)
;
mGCLog
=
nullptr
;
}
if
(
mCCLog
)
{
fclose
(
mCCLog
)
;
mCCLog
=
nullptr
;
}
Unused
<
<
mActor
-
>
Send__delete__
(
mActor
)
;
}
nsresult
UnimplementedProperty
(
)
{
MOZ_ASSERT
(
false
"
This
object
is
a
remote
GC
/
CC
logger
;
"
"
this
property
isn
'
t
meaningful
.
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
CycleCollectWithLogsChild
>
mActor
;
FILE
*
mGCLog
;
FILE
*
mCCLog
;
}
;
private
:
~
CycleCollectWithLogsChild
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
CycleCollectWithLogsChild
:
:
Sink
nsICycleCollectorLogSink
)
;
class
AlertObserver
{
public
:
AlertObserver
(
nsIObserver
*
aObserver
const
nsString
&
aData
)
:
mObserver
(
aObserver
)
mData
(
aData
)
{
}
~
AlertObserver
(
)
=
default
;
bool
ShouldRemoveFrom
(
nsIObserver
*
aObserver
const
nsString
&
aData
)
const
{
return
(
mObserver
=
=
aObserver
&
&
mData
=
=
aData
)
;
}
bool
Observes
(
const
nsString
&
aData
)
const
{
return
mData
.
Equals
(
aData
)
;
}
bool
Notify
(
const
nsCString
&
aType
)
const
{
mObserver
-
>
Observe
(
nullptr
aType
.
get
(
)
mData
.
get
(
)
)
;
return
true
;
}
private
:
nsCOMPtr
<
nsIObserver
>
mObserver
;
nsString
mData
;
}
;
class
ConsoleListener
final
:
public
nsIConsoleListener
{
public
:
explicit
ConsoleListener
(
ContentChild
*
aChild
)
:
mChild
(
aChild
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSICONSOLELISTENER
private
:
~
ConsoleListener
(
)
=
default
;
ContentChild
*
mChild
;
friend
class
ContentChild
;
}
;
NS_IMPL_ISUPPORTS
(
ConsoleListener
nsIConsoleListener
)
static
void
TruncateString
(
nsAString
&
aString
)
{
if
(
aString
.
Length
(
)
>
1000
)
{
aString
.
Truncate
(
1000
)
;
}
}
NS_IMETHODIMP
ConsoleListener
:
:
Observe
(
nsIConsoleMessage
*
aMessage
)
{
if
(
!
mChild
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIScriptError
>
scriptError
=
do_QueryInterface
(
aMessage
)
;
if
(
scriptError
)
{
nsAutoString
msg
sourceName
sourceLine
;
nsCString
category
;
uint32_t
lineNum
colNum
flags
;
bool
fromPrivateWindow
fromChromeContext
;
nsresult
rv
=
scriptError
-
>
GetErrorMessage
(
msg
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
TruncateString
(
msg
)
;
rv
=
scriptError
-
>
GetSourceName
(
sourceName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
TruncateString
(
sourceName
)
;
rv
=
scriptError
-
>
GetSourceLine
(
sourceLine
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
TruncateString
(
sourceLine
)
;
rv
=
scriptError
-
>
GetCategory
(
getter_Copies
(
category
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
scriptError
-
>
GetLineNumber
(
&
lineNum
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
scriptError
-
>
GetColumnNumber
(
&
colNum
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
scriptError
-
>
GetFlags
(
&
flags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
scriptError
-
>
GetIsFromPrivateWindow
(
&
fromPrivateWindow
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
scriptError
-
>
GetIsFromChromeContext
(
&
fromChromeContext
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
{
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
RootedValue
stack
(
cx
)
;
rv
=
scriptError
-
>
GetStack
(
&
stack
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
stack
.
isObject
(
)
)
{
JS
:
:
RootedValue
stackGlobal
(
cx
)
;
rv
=
scriptError
-
>
GetStackGlobal
(
&
stackGlobal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
JSAutoRealm
ar
(
cx
&
stackGlobal
.
toObject
(
)
)
;
StructuredCloneData
data
;
ErrorResult
err
;
data
.
Write
(
cx
stack
err
)
;
if
(
err
.
Failed
(
)
)
{
return
err
.
StealNSResult
(
)
;
}
ClonedMessageData
cloned
;
if
(
!
data
.
BuildClonedMessageDataForChild
(
mChild
cloned
)
)
{
return
NS_ERROR_FAILURE
;
}
mChild
-
>
SendScriptErrorWithStack
(
msg
sourceName
sourceLine
lineNum
colNum
flags
category
fromPrivateWindow
fromChromeContext
cloned
)
;
return
NS_OK
;
}
}
mChild
-
>
SendScriptError
(
msg
sourceName
sourceLine
lineNum
colNum
flags
category
fromPrivateWindow
0
fromChromeContext
)
;
return
NS_OK
;
}
nsString
msg
;
nsresult
rv
=
aMessage
-
>
GetMessageMoz
(
msg
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mChild
-
>
SendConsoleMessage
(
msg
)
;
return
NS_OK
;
}
#
ifdef
NIGHTLY_BUILD
class
PendingInputEventHangAnnotator
final
:
public
BackgroundHangAnnotator
{
public
:
virtual
void
AnnotateHang
(
BackgroundHangAnnotations
&
aAnnotations
)
override
{
int32_t
pending
=
ContentChild
:
:
GetSingleton
(
)
-
>
GetPendingInputEvents
(
)
;
if
(
pending
>
0
)
{
aAnnotations
.
AddAnnotation
(
NS_LITERAL_STRING
(
"
PendingInput
"
)
pending
)
;
}
}
static
PendingInputEventHangAnnotator
sSingleton
;
}
;
PendingInputEventHangAnnotator
PendingInputEventHangAnnotator
:
:
sSingleton
;
#
endif
class
ContentChild
:
:
ShutdownCanary
final
{
}
;
ContentChild
*
ContentChild
:
:
sSingleton
;
StaticAutoPtr
<
ContentChild
:
:
ShutdownCanary
>
ContentChild
:
:
sShutdownCanary
;
ContentChild
:
:
ContentChild
(
)
:
mID
(
uint64_t
(
-
1
)
)
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
mMainChromeTid
(
0
)
mMsaaID
(
0
)
#
endif
mIsForBrowser
(
false
)
mIsAlive
(
true
)
mShuttingDown
(
false
)
{
nsDebugImpl
:
:
SetMultiprocessMode
(
"
Child
"
)
;
if
(
!
sShutdownCanary
)
{
sShutdownCanary
=
new
ShutdownCanary
(
)
;
ClearOnShutdown
(
&
sShutdownCanary
ShutdownPhase
:
:
Shutdown
)
;
}
}
#
ifdef
_MSC_VER
#
pragma
warning
(
push
)
#
pragma
warning
(
\
disable
:
4722
)
/
*
Silence
"
destructor
never
returns
"
warning
\
*
/
#
endif
ContentChild
:
:
~
ContentChild
(
)
{
#
ifndef
NS_FREE_PERMANENT_DATA
MOZ_CRASH
(
"
Content
Child
shouldn
'
t
be
destroyed
.
"
)
;
#
endif
}
#
ifdef
_MSC_VER
#
pragma
warning
(
pop
)
#
endif
NS_INTERFACE_MAP_BEGIN
(
ContentChild
)
NS_INTERFACE_MAP_ENTRY
(
nsIWindowProvider
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetXPCOMProcessAttributes
(
const
XPCOMInitData
&
aXPCOMInit
const
StructuredCloneData
&
aInitialData
nsTArray
<
LookAndFeelInt
>
&
&
aLookAndFeelIntCache
nsTArray
<
SystemFontListEntry
>
&
&
aFontList
const
Maybe
<
SharedMemoryHandle
>
&
aSharedUASheetHandle
const
uintptr_t
&
aSharedUASheetAddress
)
{
if
(
!
sShutdownCanary
)
{
return
IPC_OK
(
)
;
}
mLookAndFeelCache
=
std
:
:
move
(
aLookAndFeelIntCache
)
;
mFontList
=
std
:
:
move
(
aFontList
)
;
gfx
:
:
gfxVars
:
:
SetValuesForInitialize
(
aXPCOMInit
.
gfxNonDefaultVarUpdates
(
)
)
;
InitSharedUASheets
(
aSharedUASheetHandle
aSharedUASheetAddress
)
;
InitXPCOM
(
aXPCOMInit
aInitialData
)
;
InitGraphicsDeviceData
(
aXPCOMInit
.
contentDeviceData
(
)
)
;
return
IPC_OK
(
)
;
}
bool
ContentChild
:
:
Init
(
MessageLoop
*
aIOLoop
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
IPC
:
:
Channel
*
aChannel
uint64_t
aChildID
bool
aIsForBrowser
)
{
#
ifdef
MOZ_WIDGET_GTK
if
(
!
gfxPlatform
:
:
IsHeadless
(
)
)
{
const
char
*
display_name
=
PR_GetEnv
(
"
MOZ_GDK_DISPLAY
"
)
;
if
(
!
display_name
)
{
bool
waylandDisabled
=
true
;
#
ifdef
MOZ_WAYLAND
waylandDisabled
=
IsWaylandDisabled
(
)
;
#
endif
if
(
waylandDisabled
)
{
display_name
=
PR_GetEnv
(
"
DISPLAY
"
)
;
}
}
if
(
display_name
)
{
int
argc
=
3
;
char
option_name
[
]
=
"
-
-
display
"
;
char
*
argv
[
]
=
{
nullptr
option_name
const_cast
<
char
*
>
(
display_name
)
nullptr
}
;
char
*
*
argvp
=
argv
;
gtk_init
(
&
argc
&
argvp
)
;
}
else
{
gtk_init
(
nullptr
nullptr
)
;
}
}
#
endif
#
ifdef
MOZ_X11
if
(
!
gfxPlatform
:
:
IsHeadless
(
)
)
{
XRE_InstallX11ErrorHandler
(
)
;
}
#
endif
NS_ASSERTION
(
!
sSingleton
"
only
one
ContentChild
per
child
"
)
;
nsresult
rv
=
nsThreadManager
:
:
get
(
)
.
Init
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
recordreplay
:
:
IsMiddleman
(
)
)
{
SetMiddlemanIPCChannel
(
recordreplay
:
:
parent
:
:
ChannelToUIProcess
(
)
)
;
ActorConnected
(
)
;
}
if
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
{
return
false
;
}
sSingleton
=
this
;
GetIPCChannel
(
)
-
>
SetAbortOnError
(
true
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
GetIPCChannel
(
)
-
>
SetChannelFlags
(
MessageChannel
:
:
REQUIRE_A11Y_REENTRY
)
;
#
endif
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
if
(
channel
&
&
!
channel
-
>
SendBuildIDsMatchMessage
(
aParentBuildID
)
)
{
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifdef
MOZ_X11
#
ifdef
MOZ_WIDGET_GTK
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
&
&
!
gfxPlatform
:
:
IsHeadless
(
)
)
{
int
xSocketFd
=
ConnectionNumber
(
DefaultXDisplay
(
)
)
;
SendBackUpXResources
(
FileDescriptor
(
xSocketFd
)
)
;
}
#
endif
#
endif
CrashReporterClient
:
:
InitSingleton
(
this
)
;
mID
=
aChildID
;
mIsForBrowser
=
aIsForBrowser
;
#
ifdef
NS_PRINTING
RefPtr
<
nsPrintingProxy
>
printingProxy
=
nsPrintingProxy
:
:
GetInstance
(
)
;
#
endif
SetProcessName
(
NS_LITERAL_STRING
(
"
Web
Content
"
)
)
;
#
ifdef
NIGHTLY_BUILD
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
RegisterPendingInputEventHangAnnotator
"
[
]
{
BackgroundHangMonitor
:
:
RegisterAnnotator
(
PendingInputEventHangAnnotator
:
:
sSingleton
)
;
}
)
)
;
#
endif
return
true
;
}
void
ContentChild
:
:
SetProcessName
(
const
nsAString
&
aName
)
{
char
*
name
;
if
(
(
name
=
PR_GetEnv
(
"
MOZ_DEBUG_APP_PROCESS
"
)
)
&
&
aName
.
EqualsASCII
(
name
)
)
{
#
ifdef
OS_POSIX
printf_stderr
(
"
\
n
\
nCHILDCHILDCHILDCHILD
\
n
[
%
s
]
debug
me
%
d
\
n
\
n
"
name
getpid
(
)
)
;
sleep
(
30
)
;
#
elif
defined
(
OS_WIN
)
NS_DebugBreak
(
NS_DEBUG_BREAK
"
Invoking
NS_DebugBreak
(
)
to
debug
child
process
"
nullptr
__FILE__
__LINE__
)
;
#
endif
}
mProcessName
=
aName
;
NS_LossyConvertUTF16toASCII
asciiName
(
aName
)
;
mozilla
:
:
ipc
:
:
SetThisProcessName
(
asciiName
.
get
(
)
)
;
#
ifdef
MOZ_GECKO_PROFILER
profiler_set_process_name
(
asciiName
)
;
#
endif
}
NS_IMETHODIMP
ContentChild
:
:
ProvideWindow
(
mozIDOMWindowProxy
*
aParent
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aPositionSpecified
bool
aSizeSpecified
nsIURI
*
aURI
const
nsAString
&
aName
const
nsACString
&
aFeatures
bool
aForceNoOpener
bool
aForceNoReferrer
nsDocShellLoadState
*
aLoadState
bool
*
aWindowIsNew
BrowsingContext
*
*
aReturn
)
{
return
ProvideWindowCommon
(
nullptr
aParent
false
aChromeFlags
aCalledFromJS
aPositionSpecified
aSizeSpecified
aURI
aName
aFeatures
aForceNoOpener
aForceNoReferrer
aLoadState
aWindowIsNew
aReturn
)
;
}
static
nsresult
GetCreateWindowParams
(
mozIDOMWindowProxy
*
aParent
nsDocShellLoadState
*
aLoadState
bool
aForceNoReferrer
float
*
aFullZoom
nsIReferrerInfo
*
*
aReferrerInfo
nsIPrincipal
*
*
aTriggeringPrincipal
nsIContentSecurityPolicy
*
*
aCsp
)
{
*
aFullZoom
=
1
.
0f
;
if
(
!
aTriggeringPrincipal
|
|
!
aCsp
)
{
NS_ERROR
(
"
aTriggeringPrincipal
|
|
aCsp
is
null
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
aReferrerInfo
)
{
NS_ERROR
(
"
aReferrerInfo
is
null
"
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
;
if
(
aForceNoReferrer
)
{
referrerInfo
=
new
ReferrerInfo
(
nullptr
ReferrerPolicy
:
:
_empty
false
)
;
}
if
(
aLoadState
&
&
!
referrerInfo
)
{
referrerInfo
=
aLoadState
-
>
GetReferrerInfo
(
)
;
}
auto
*
opener
=
nsPIDOMWindowOuter
:
:
From
(
aParent
)
;
if
(
!
opener
)
{
nsCOMPtr
<
nsIPrincipal
>
nullPrincipal
=
NullPrincipal
:
:
CreateWithoutOriginAttributes
(
)
;
if
(
!
referrerInfo
)
{
referrerInfo
=
new
ReferrerInfo
(
nullptr
ReferrerPolicy
:
:
_empty
)
;
}
referrerInfo
.
swap
(
*
aReferrerInfo
)
;
NS_ADDREF
(
*
aTriggeringPrincipal
=
nullPrincipal
)
;
return
NS_OK
;
}
nsCOMPtr
<
Document
>
doc
=
opener
-
>
GetDoc
(
)
;
NS_ADDREF
(
*
aTriggeringPrincipal
=
doc
-
>
NodePrincipal
(
)
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
doc
-
>
GetCsp
(
)
;
if
(
csp
)
{
csp
.
forget
(
aCsp
)
;
}
nsCOMPtr
<
nsIURI
>
baseURI
=
doc
-
>
GetDocBaseURI
(
)
;
if
(
!
baseURI
)
{
NS_ERROR
(
"
Document
didn
'
t
return
a
base
URI
"
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
referrerInfo
)
{
referrerInfo
=
new
ReferrerInfo
(
)
;
referrerInfo
-
>
InitWithDocument
(
doc
)
;
}
referrerInfo
.
swap
(
*
aReferrerInfo
)
;
RefPtr
<
nsDocShell
>
openerDocShell
=
static_cast
<
nsDocShell
*
>
(
opener
-
>
GetDocShell
(
)
)
;
if
(
!
openerDocShell
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIContentViewer
>
cv
;
nsresult
rv
=
openerDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
cv
)
{
cv
-
>
GetFullZoom
(
aFullZoom
)
;
}
return
NS_OK
;
}
nsresult
ContentChild
:
:
ProvideWindowCommon
(
BrowserChild
*
aTabOpener
mozIDOMWindowProxy
*
aParent
bool
aIframeMoz
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aPositionSpecified
bool
aSizeSpecified
nsIURI
*
aURI
const
nsAString
&
aName
const
nsACString
&
aFeatures
bool
aForceNoOpener
bool
aForceNoReferrer
nsDocShellLoadState
*
aLoadState
bool
*
aWindowIsNew
BrowsingContext
*
*
aReturn
)
{
*
aReturn
=
nullptr
;
nsAutoPtr
<
IPCTabContext
>
ipcContext
;
TabId
openerTabId
=
TabId
(
0
)
;
nsAutoCString
features
(
aFeatures
)
;
nsAutoString
name
(
aName
)
;
nsresult
rv
;
MOZ_ASSERT
(
!
aParent
|
|
aTabOpener
"
If
aParent
is
non
-
null
we
should
have
an
aTabOpener
"
)
;
static
bool
sNoopenerNewProcess
=
false
;
static
bool
sNoopenerNewProcessInited
=
false
;
if
(
!
sNoopenerNewProcessInited
)
{
Preferences
:
:
AddBoolVarCache
(
&
sNoopenerNewProcess
"
dom
.
noopener
.
newprocess
.
enabled
"
)
;
sNoopenerNewProcessInited
=
true
;
}
bool
useRemoteSubframes
=
aChromeFlags
&
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
;
bool
loadInDifferentProcess
=
aForceNoOpener
&
&
sNoopenerNewProcess
&
&
!
useRemoteSubframes
;
if
(
aTabOpener
&
&
!
loadInDifferentProcess
&
&
aURI
)
{
nsCOMPtr
<
nsILoadContext
>
context
;
if
(
aParent
)
{
context
=
do_GetInterface
(
aTabOpener
-
>
WebNavigation
(
)
)
;
}
if
(
!
(
context
&
&
context
-
>
UseRemoteSubframes
(
)
)
)
{
nsCOMPtr
<
nsIWebBrowserChrome3
>
browserChrome3
;
rv
=
aTabOpener
-
>
GetWebBrowserChrome
(
getter_AddRefs
(
browserChrome3
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
browserChrome3
)
{
bool
shouldLoad
;
rv
=
browserChrome3
-
>
ShouldLoadURIInThisProcess
(
aURI
&
shouldLoad
)
;
loadInDifferentProcess
=
NS_SUCCEEDED
(
rv
)
&
&
!
shouldLoad
;
}
}
}
if
(
loadInDifferentProcess
)
{
float
fullZoom
;
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
;
rv
=
GetCreateWindowParams
(
aParent
aLoadState
aForceNoReferrer
&
fullZoom
getter_AddRefs
(
referrerInfo
)
getter_AddRefs
(
triggeringPrincipal
)
getter_AddRefs
(
csp
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
Maybe
<
URIParams
>
uriToLoad
;
SerializeURI
(
aURI
uriToLoad
)
;
if
(
name
.
LowerCaseEqualsLiteral
(
"
_blank
"
)
)
{
name
=
EmptyString
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
nsContentUtils
:
:
IsSpecialName
(
name
)
)
;
Unused
<
<
SendCreateWindowInDifferentProcess
(
aTabOpener
aChromeFlags
aCalledFromJS
aPositionSpecified
aSizeSpecified
uriToLoad
features
fullZoom
name
triggeringPrincipal
csp
referrerInfo
)
;
return
NS_ERROR_ABORT
;
}
if
(
aTabOpener
)
{
PopupIPCTabContext
context
;
openerTabId
=
aTabOpener
-
>
GetTabId
(
)
;
context
.
opener
(
)
=
openerTabId
;
context
.
isMozBrowserElement
(
)
=
aTabOpener
-
>
IsMozBrowserElement
(
)
;
ipcContext
=
new
IPCTabContext
(
context
)
;
}
else
{
UnsafeIPCTabContext
unsafeTabContext
;
ipcContext
=
new
IPCTabContext
(
unsafeTabContext
)
;
}
MOZ_ASSERT
(
ipcContext
)
;
TabId
tabId
(
nsContentUtils
:
:
GenerateTabId
(
)
)
;
RefPtr
<
TabGroup
>
tabGroup
;
RefPtr
<
BrowsingContext
>
openerBC
;
if
(
aTabOpener
&
&
!
aForceNoOpener
)
{
tabGroup
=
aTabOpener
-
>
TabGroup
(
)
;
if
(
aParent
)
{
openerBC
=
nsPIDOMWindowOuter
:
:
From
(
aParent
)
-
>
GetBrowsingContext
(
)
;
}
}
else
{
tabGroup
=
new
TabGroup
(
)
;
}
RefPtr
<
BrowsingContext
>
browsingContext
=
BrowsingContext
:
:
Create
(
nullptr
openerBC
aName
BrowsingContext
:
:
Type
:
:
Content
)
;
TabContext
newTabContext
=
aTabOpener
?
*
aTabOpener
:
TabContext
(
)
;
nsCOMPtr
<
nsIPrincipal
>
initialPrincipal
=
NullPrincipal
:
:
Create
(
newTabContext
.
OriginAttributesRef
(
)
)
;
WindowGlobalInit
windowInit
=
WindowGlobalActor
:
:
AboutBlankInitializer
(
browsingContext
initialPrincipal
)
;
auto
windowChild
=
MakeRefPtr
<
WindowGlobalChild
>
(
windowInit
nullptr
)
;
auto
newChild
=
MakeRefPtr
<
BrowserChild
>
(
this
tabId
tabGroup
newTabContext
browsingContext
aChromeFlags
true
)
;
if
(
aTabOpener
)
{
MOZ_ASSERT
(
ipcContext
-
>
type
(
)
=
=
IPCTabContext
:
:
TPopupIPCTabContext
)
;
ipcContext
-
>
get_PopupIPCTabContext
(
)
.
opener
(
)
=
aTabOpener
;
}
nsCOMPtr
<
nsIEventTarget
>
target
=
tabGroup
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
SetEventTargetForActor
(
newChild
target
)
;
if
(
IsShuttingDown
(
)
)
{
return
NS_ERROR_ABORT
;
}
ManagedEndpoint
<
PBrowserParent
>
parentEp
=
OpenPBrowserEndpoint
(
newChild
)
;
if
(
NS_WARN_IF
(
!
parentEp
.
IsValid
(
)
)
)
{
return
NS_ERROR_ABORT
;
}
ManagedEndpoint
<
PWindowGlobalParent
>
windowParentEp
=
newChild
-
>
OpenPWindowGlobalEndpoint
(
windowChild
)
;
if
(
NS_WARN_IF
(
!
windowParentEp
.
IsValid
(
)
)
)
{
return
NS_ERROR_ABORT
;
}
if
(
NS_WARN_IF
(
!
SendConstructPopupBrowser
(
std
:
:
move
(
parentEp
)
std
:
:
move
(
windowParentEp
)
tabId
*
ipcContext
windowInit
aChromeFlags
)
)
)
{
return
NS_ERROR_ABORT
;
}
windowChild
-
>
Init
(
)
;
if
(
NS_FAILED
(
newChild
-
>
Init
(
aParent
windowChild
)
)
)
{
return
NS_ERROR_ABORT
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
parentTopInnerWindow
;
if
(
aParent
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
parentTopWindow
=
nsPIDOMWindowOuter
:
:
From
(
aParent
)
-
>
GetInProcessTop
(
)
;
if
(
parentTopWindow
)
{
parentTopInnerWindow
=
parentTopWindow
-
>
GetCurrentInnerWindow
(
)
;
}
}
bool
ready
=
false
;
auto
resolve
=
[
&
]
(
const
CreatedWindowInfo
&
info
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
rv
=
info
.
rv
(
)
;
*
aWindowIsNew
=
info
.
windowOpened
(
)
;
nsTArray
<
FrameScriptInfo
>
frameScripts
(
info
.
frameScripts
(
)
)
;
nsCString
urlToLoad
=
info
.
urlToLoad
(
)
;
uint32_t
maxTouchPoints
=
info
.
maxTouchPoints
(
)
;
DimensionInfo
dimensionInfo
=
info
.
dimensions
(
)
;
bool
hasSiblings
=
info
.
hasSiblings
(
)
;
ready
=
true
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
!
*
aWindowIsNew
)
{
rv
=
NS_ERROR_ABORT
;
return
;
}
if
(
NS_WARN_IF
(
!
newChild
-
>
IPCOpen
(
)
|
|
newChild
-
>
IsDestroyed
(
)
)
)
{
rv
=
NS_ERROR_ABORT
;
return
;
}
ShowInfo
showInfo
(
EmptyString
(
)
false
false
true
false
0
0
0
)
;
auto
*
opener
=
nsPIDOMWindowOuter
:
:
From
(
aParent
)
;
nsIDocShell
*
openerShell
;
if
(
opener
&
&
(
openerShell
=
opener
-
>
GetDocShell
(
)
)
)
{
nsCOMPtr
<
nsILoadContext
>
context
=
do_QueryInterface
(
openerShell
)
;
showInfo
=
ShowInfo
(
EmptyString
(
)
false
context
-
>
UsePrivateBrowsing
(
)
true
false
aTabOpener
-
>
WebWidget
(
)
-
>
GetDPI
(
)
aTabOpener
-
>
WebWidget
(
)
-
>
RoundsWidgetCoordinatesTo
(
)
aTabOpener
-
>
WebWidget
(
)
-
>
GetDefaultScale
(
)
.
scale
)
;
}
newChild
-
>
SetMaxTouchPoints
(
maxTouchPoints
)
;
newChild
-
>
SetHasSiblings
(
hasSiblings
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
do_GetInterface
(
newChild
-
>
WebNavigation
(
)
)
)
{
BrowsingContext
*
bc
=
outer
-
>
GetBrowsingContext
(
)
;
auto
parentBC
=
aParent
?
nsPIDOMWindowOuter
:
:
From
(
aParent
)
-
>
GetBrowsingContext
(
)
-
>
Id
(
)
:
0
;
if
(
aForceNoOpener
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
*
aWindowIsNew
|
|
!
bc
-
>
HadOriginalOpener
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
bc
-
>
GetOpenerId
(
)
=
=
0
)
;
}
else
{
MOZ_DIAGNOSTIC_ASSERT
(
!
*
aWindowIsNew
|
|
bc
-
>
HadOriginalOpener
(
)
=
=
!
!
parentBC
)
;
MOZ_DIAGNOSTIC_ASSERT
(
bc
-
>
GetOpenerId
(
)
=
=
parentBC
)
;
}
}
#
endif
newChild
-
>
DoFakeShow
(
showInfo
)
;
newChild
-
>
RecvUpdateDimensions
(
dimensionInfo
)
;
for
(
size_t
i
=
0
;
i
<
frameScripts
.
Length
(
)
;
i
+
+
)
{
FrameScriptInfo
&
info
=
frameScripts
[
i
]
;
if
(
!
newChild
-
>
RecvLoadRemoteScript
(
info
.
url
(
)
info
.
runInGlobalScope
(
)
)
)
{
MOZ_CRASH
(
)
;
}
}
if
(
xpc
:
:
IsInAutomation
(
)
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
outer
=
do_GetInterface
(
newChild
-
>
WebNavigation
(
)
)
)
{
nsCOMPtr
<
nsIObserverService
>
obs
(
services
:
:
GetObserverService
(
)
)
;
obs
-
>
NotifyObservers
(
outer
"
dangerous
:
test
-
only
:
new
-
browser
-
child
-
ready
"
nullptr
)
;
}
}
browsingContext
.
forget
(
aReturn
)
;
}
;
auto
reject
=
[
&
]
(
ResponseRejectReason
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_WARNING
(
"
windowCreated
promise
rejected
"
)
;
rv
=
NS_ERROR_NOT_AVAILABLE
;
ready
=
true
;
}
;
if
(
aIframeMoz
)
{
MOZ_ASSERT
(
aTabOpener
)
;
nsAutoCString
url
;
if
(
aURI
)
{
aURI
-
>
GetSpec
(
url
)
;
}
else
{
url
.
SetIsVoid
(
true
)
;
}
newChild
-
>
SendBrowserFrameOpenWindow
(
aTabOpener
NS_ConvertUTF8toUTF16
(
url
)
name
aForceNoReferrer
NS_ConvertUTF8toUTF16
(
features
)
std
:
:
move
(
resolve
)
std
:
:
move
(
reject
)
)
;
}
else
{
float
fullZoom
;
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
;
rv
=
GetCreateWindowParams
(
aParent
aLoadState
aForceNoReferrer
&
fullZoom
getter_AddRefs
(
referrerInfo
)
getter_AddRefs
(
triggeringPrincipal
)
getter_AddRefs
(
csp
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
Maybe
<
URIParams
>
uriToLoad
;
if
(
aURI
)
{
SerializeURI
(
aURI
uriToLoad
)
;
}
SendCreateWindow
(
aTabOpener
newChild
aChromeFlags
aCalledFromJS
aPositionSpecified
aSizeSpecified
uriToLoad
features
fullZoom
Principal
(
triggeringPrincipal
)
csp
referrerInfo
std
:
:
move
(
resolve
)
std
:
:
move
(
reject
)
)
;
}
newChild
-
>
AddPendingDocShellBlocker
(
)
;
auto
removePendingDocShellBlocker
=
MakeScopeExit
(
[
&
]
{
if
(
newChild
)
{
newChild
-
>
RemovePendingDocShellBlocker
(
)
;
}
}
)
;
if
(
parentTopInnerWindow
)
{
parentTopInnerWindow
-
>
Suspend
(
)
;
}
{
AutoNoJSAPI
nojsapi
;
SpinEventLoopUntil
(
[
&
]
(
)
{
return
ready
;
}
)
;
MOZ_RELEASE_ASSERT
(
ready
"
We
are
on
the
main
thread
so
we
should
not
exit
this
"
"
loop
without
ready
being
true
.
"
)
;
}
if
(
parentTopInnerWindow
)
{
parentTopInnerWindow
-
>
Resume
(
)
;
}
if
(
*
aReturn
&
&
(
*
aReturn
)
-
>
IsDiscarded
(
)
)
{
NS_RELEASE
(
*
aReturn
)
;
return
NS_ERROR_ABORT
;
}
MOZ_ASSERT_IF
(
NS_SUCCEEDED
(
rv
)
*
aReturn
)
;
return
rv
;
}
void
ContentChild
:
:
GetProcessName
(
nsAString
&
aName
)
const
{
aName
.
Assign
(
mProcessName
)
;
}
void
ContentChild
:
:
LaunchRDDProcess
(
)
{
SynchronousTask
task
(
"
LaunchRDDProcess
"
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
LaunchRDDProcess
"
[
&
task
this
]
{
AutoCompleteTask
complete
(
&
task
)
;
nsresult
rv
;
Endpoint
<
PRemoteDecoderManagerChild
>
endpoint
;
Unused
<
<
SendLaunchRDDProcess
(
&
rv
&
endpoint
)
;
if
(
rv
=
=
NS_OK
)
{
RemoteDecoderManagerChild
:
:
InitForRDDProcess
(
std
:
:
move
(
endpoint
)
)
;
}
}
)
)
;
task
.
Wait
(
)
;
}
bool
ContentChild
:
:
IsAlive
(
)
const
{
return
mIsAlive
;
}
bool
ContentChild
:
:
IsShuttingDown
(
)
const
{
return
mShuttingDown
;
}
void
ContentChild
:
:
GetProcessName
(
nsACString
&
aName
)
const
{
aName
.
Assign
(
NS_ConvertUTF16toUTF8
(
mProcessName
)
)
;
}
void
ContentChild
:
:
AppendProcessId
(
nsACString
&
aName
)
{
if
(
!
aName
.
IsEmpty
(
)
)
{
aName
.
Append
(
'
'
)
;
}
unsigned
pid
=
getpid
(
)
;
aName
.
Append
(
nsPrintfCString
(
"
(
pid
%
u
)
"
pid
)
)
;
}
void
ContentChild
:
:
InitGraphicsDeviceData
(
const
ContentDeviceData
&
aData
)
{
gfxPlatform
:
:
InitChild
(
aData
)
;
}
void
ContentChild
:
:
InitSharedUASheets
(
const
Maybe
<
SharedMemoryHandle
>
&
aHandle
uintptr_t
aAddress
)
{
MOZ_ASSERT_IF
(
!
aHandle
!
aAddress
)
;
if
(
!
aAddress
)
{
return
;
}
nsLayoutStylesheetCache
:
:
SetSharedMemory
(
*
aHandle
aAddress
)
;
}
void
ContentChild
:
:
InitXPCOM
(
const
XPCOMInitData
&
aXPCOMInit
const
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
&
aInitialData
)
{
BackgroundChild
:
:
Startup
(
)
;
PBackgroundChild
*
actorChild
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actorChild
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
PBackground
init
can
'
t
fail
at
this
point
"
)
;
return
;
}
LSObject
:
:
Initialize
(
)
;
ClientManager
:
:
Startup
(
)
;
RemoteWorkerService
:
:
Initialize
(
)
;
nsCOMPtr
<
nsIConsoleService
>
svc
(
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
)
;
if
(
!
svc
)
{
NS_WARNING
(
"
Couldn
'
t
acquire
console
service
"
)
;
return
;
}
mConsoleListener
=
new
ConsoleListener
(
this
)
;
if
(
NS_FAILED
(
svc
-
>
RegisterListener
(
mConsoleListener
)
)
)
NS_WARNING
(
"
Couldn
'
t
register
console
listener
for
child
process
"
)
;
mAvailableDictionaries
=
aXPCOMInit
.
dictionaries
(
)
;
RecvSetOffline
(
aXPCOMInit
.
isOffline
(
)
)
;
RecvSetConnectivity
(
aXPCOMInit
.
isConnected
(
)
)
;
LocaleService
:
:
GetInstance
(
)
-
>
AssignAppLocales
(
aXPCOMInit
.
appLocales
(
)
)
;
LocaleService
:
:
GetInstance
(
)
-
>
AssignRequestedLocales
(
aXPCOMInit
.
requestedLocales
(
)
)
;
RecvSetCaptivePortalState
(
aXPCOMInit
.
captivePortalState
(
)
)
;
RecvBidiKeyboardNotify
(
aXPCOMInit
.
isLangRTL
(
)
aXPCOMInit
.
haveBidiKeyboards
(
)
)
;
if
(
!
recordreplay
:
:
IsMiddleman
(
)
)
{
SendPJavaScriptConstructor
(
)
;
}
if
(
aXPCOMInit
.
domainPolicy
(
)
.
active
(
)
)
{
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
MOZ_ASSERT
(
ssm
)
;
ssm
-
>
ActivateDomainPolicyInternal
(
getter_AddRefs
(
mPolicy
)
)
;
if
(
!
mPolicy
)
{
MOZ_CRASH
(
"
Failed
to
activate
domain
policy
.
"
)
;
}
mPolicy
-
>
ApplyClone
(
&
aXPCOMInit
.
domainPolicy
(
)
)
;
}
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
"
mozilla
.
org
/
widget
/
clipboard
;
1
"
)
)
;
if
(
nsCOMPtr
<
nsIClipboardProxy
>
clipboardProxy
=
do_QueryInterface
(
clipboard
)
)
{
clipboardProxy
-
>
SetCapabilities
(
aXPCOMInit
.
clipboardCaps
(
)
)
;
}
{
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
)
)
{
MOZ_CRASH
(
)
;
}
ErrorResult
rv
;
JS
:
:
RootedValue
data
(
jsapi
.
cx
(
)
)
;
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
id
;
id
.
Copy
(
aInitialData
)
;
id
.
Read
(
jsapi
.
cx
(
)
&
data
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
MOZ_CRASH
(
)
;
}
auto
*
global
=
ContentProcessMessageManager
:
:
Get
(
)
;
global
-
>
SetInitialProcessData
(
data
)
;
}
nsCOMPtr
<
nsIURI
>
ucsURL
=
DeserializeURI
(
aXPCOMInit
.
userContentSheetURL
(
)
)
;
nsLayoutStylesheetCache
:
:
SetUserContentCSSURL
(
ucsURL
)
;
GfxInfoBase
:
:
SetFeatureStatus
(
aXPCOMInit
.
gfxFeatureStatus
(
)
)
;
DataStorage
:
:
SetCachedStorageEntries
(
aXPCOMInit
.
dataStorage
(
)
)
;
TelemetryIPC
:
:
AddDynamicScalarDefinitions
(
aXPCOMInit
.
dynamicScalarDefs
(
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
mozilla
:
:
ipc
:
:
FileDescriptor
>
&
aDMDFile
)
{
nsCString
process
;
GetProcessName
(
process
)
;
AppendProcessId
(
process
)
;
MemoryReportRequestClient
:
:
Start
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
process
[
&
]
(
const
MemoryReport
&
aReport
)
{
Unused
<
<
GetSingleton
(
)
-
>
SendAddMemoryReport
(
aReport
)
;
}
[
&
]
(
const
uint32_t
&
aGeneration
)
{
return
GetSingleton
(
)
-
>
SendFinishMemoryReport
(
aGeneration
)
;
}
)
;
return
IPC_OK
(
)
;
}
PCycleCollectWithLogsChild
*
ContentChild
:
:
AllocPCycleCollectWithLogsChild
(
const
bool
&
aDumpAllTraces
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
{
return
do_AddRef
(
new
CycleCollectWithLogsChild
(
)
)
.
take
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPCycleCollectWithLogsConstructor
(
PCycleCollectWithLogsChild
*
aActor
const
bool
&
aDumpAllTraces
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
{
auto
*
actor
=
static_cast
<
CycleCollectWithLogsChild
*
>
(
aActor
)
;
RefPtr
<
CycleCollectWithLogsChild
:
:
Sink
>
sink
=
new
CycleCollectWithLogsChild
:
:
Sink
(
actor
aGCLog
aCCLog
)
;
nsCOMPtr
<
nsIMemoryInfoDumper
>
dumper
=
do_GetService
(
"
mozilla
.
org
/
memory
-
info
-
dumper
;
1
"
)
;
dumper
-
>
DumpGCAndCCLogsToSink
(
aDumpAllTraces
sink
)
;
return
IPC_OK
(
)
;
}
bool
ContentChild
:
:
DeallocPCycleCollectWithLogsChild
(
PCycleCollectWithLogsChild
*
aActor
)
{
RefPtr
<
CycleCollectWithLogsChild
>
actor
=
dont_AddRef
(
static_cast
<
CycleCollectWithLogsChild
*
>
(
aActor
)
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitGMPService
(
Endpoint
<
PGMPServiceChild
>
&
&
aGMPService
)
{
if
(
!
GMPServiceChild
:
:
Create
(
std
:
:
move
(
aGMPService
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
#
ifdef
MOZ_GECKO_PROFILER
mProfilerController
=
ChildProfilerController
:
:
Create
(
std
:
:
move
(
aEndpoint
)
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGMPsChanged
(
nsTArray
<
GMPCapabilityData
>
&
&
capabilities
)
{
GeckoMediaPluginServiceChild
:
:
UpdateGMPCapabilities
(
std
:
:
move
(
capabilities
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitProcessHangMonitor
(
Endpoint
<
PProcessHangMonitorChild
>
&
&
aHangMonitor
)
{
CreateHangMonitorChild
(
std
:
:
move
(
aHangMonitor
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
GetResultForRenderingInitFailure
(
base
:
:
ProcessId
aOtherPid
)
{
if
(
aOtherPid
=
=
base
:
:
GetCurrentProcId
(
)
|
|
aOtherPid
=
=
OtherPid
(
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
gfxCriticalNote
<
<
"
Could
not
initialize
rendering
with
GPU
process
"
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRequestPerformanceMetrics
(
const
nsID
&
aID
)
{
RefPtr
<
ContentChild
>
self
=
this
;
RefPtr
<
AbstractThread
>
mainThread
=
SystemGroup
:
:
AbstractMainThreadFor
(
TaskCategory
:
:
Performance
)
;
nsTArray
<
RefPtr
<
PerformanceInfoPromise
>
>
promises
=
CollectPerformanceInfo
(
)
;
PerformanceInfoPromise
:
:
All
(
mainThread
promises
)
-
>
Then
(
mainThread
__func__
[
self
aID
]
(
const
nsTArray
<
mozilla
:
:
dom
:
:
PerformanceInfo
>
&
aResult
)
{
self
-
>
SendAddPerformanceMetrics
(
aID
aResult
)
;
}
[
]
(
)
{
}
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
XP_MACOSX
)
extern
"
C
"
{
void
CGSShutdownServerConnections
(
)
;
}
;
#
endif
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitRendering
(
Endpoint
<
PCompositorManagerChild
>
&
&
aCompositor
Endpoint
<
PImageBridgeChild
>
&
&
aImageBridge
Endpoint
<
PVRManagerChild
>
&
&
aVRBridge
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
nsTArray
<
uint32_t
>
&
&
namespaces
)
{
MOZ_ASSERT
(
namespaces
.
Length
(
)
=
=
3
)
;
if
(
!
CompositorManagerChild
:
:
Init
(
std
:
:
move
(
aCompositor
)
namespaces
[
0
]
)
)
{
return
GetResultForRenderingInitFailure
(
aCompositor
.
OtherPid
(
)
)
;
}
if
(
!
CompositorManagerChild
:
:
CreateContentCompositorBridge
(
namespaces
[
1
]
)
)
{
return
GetResultForRenderingInitFailure
(
aCompositor
.
OtherPid
(
)
)
;
}
if
(
!
ImageBridgeChild
:
:
InitForContent
(
std
:
:
move
(
aImageBridge
)
namespaces
[
2
]
)
)
{
return
GetResultForRenderingInitFailure
(
aImageBridge
.
OtherPid
(
)
)
;
}
if
(
!
gfx
:
:
VRManagerChild
:
:
InitForContent
(
std
:
:
move
(
aVRBridge
)
)
)
{
return
GetResultForRenderingInitFailure
(
aVRBridge
.
OtherPid
(
)
)
;
}
RemoteDecoderManagerChild
:
:
InitForGPUProcess
(
std
:
:
move
(
aVideoManager
)
)
;
#
if
defined
(
XP_MACOSX
)
&
&
!
defined
(
MOZ_SANDBOX
)
CGSShutdownServerConnections
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvReinitRendering
(
Endpoint
<
PCompositorManagerChild
>
&
&
aCompositor
Endpoint
<
PImageBridgeChild
>
&
&
aImageBridge
Endpoint
<
PVRManagerChild
>
&
&
aVRBridge
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
nsTArray
<
uint32_t
>
&
&
namespaces
)
{
MOZ_ASSERT
(
namespaces
.
Length
(
)
=
=
3
)
;
nsTArray
<
RefPtr
<
BrowserChild
>
>
tabs
=
BrowserChild
:
:
GetAll
(
)
;
for
(
const
auto
&
browserChild
:
tabs
)
{
if
(
browserChild
-
>
GetLayersId
(
)
.
IsValid
(
)
)
{
browserChild
-
>
InvalidateLayers
(
)
;
}
}
if
(
!
CompositorManagerChild
:
:
Init
(
std
:
:
move
(
aCompositor
)
namespaces
[
0
]
)
)
{
return
GetResultForRenderingInitFailure
(
aCompositor
.
OtherPid
(
)
)
;
}
if
(
!
CompositorManagerChild
:
:
CreateContentCompositorBridge
(
namespaces
[
1
]
)
)
{
return
GetResultForRenderingInitFailure
(
aCompositor
.
OtherPid
(
)
)
;
}
if
(
!
ImageBridgeChild
:
:
ReinitForContent
(
std
:
:
move
(
aImageBridge
)
namespaces
[
2
]
)
)
{
return
GetResultForRenderingInitFailure
(
aImageBridge
.
OtherPid
(
)
)
;
}
if
(
!
gfx
:
:
VRManagerChild
:
:
ReinitForContent
(
std
:
:
move
(
aVRBridge
)
)
)
{
return
GetResultForRenderingInitFailure
(
aVRBridge
.
OtherPid
(
)
)
;
}
gfxPlatform
:
:
GetPlatform
(
)
-
>
CompositorUpdated
(
)
;
for
(
const
auto
&
browserChild
:
tabs
)
{
if
(
browserChild
-
>
GetLayersId
(
)
.
IsValid
(
)
)
{
browserChild
-
>
ReinitRendering
(
)
;
}
}
RemoteDecoderManagerChild
:
:
InitForGPUProcess
(
std
:
:
move
(
aVideoManager
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAudioDefaultDeviceChange
(
)
{
#
ifdef
XP_WIN
audio
:
:
AudioNotificationReceiver
:
:
NotifyDefaultDeviceChanged
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvReinitRenderingForDeviceReset
(
)
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
CompositorUpdated
(
)
;
nsTArray
<
RefPtr
<
BrowserChild
>
>
tabs
=
BrowserChild
:
:
GetAll
(
)
;
for
(
const
auto
&
browserChild
:
tabs
)
{
if
(
browserChild
-
>
GetLayersId
(
)
.
IsValid
(
)
)
{
browserChild
-
>
ReinitRenderingForDeviceReset
(
)
;
}
}
return
IPC_OK
(
)
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
extern
"
C
"
{
CGError
CGSSetDenyWindowServerConnections
(
bool
)
;
}
;
static
bool
StartMacOSContentSandbox
(
)
{
CGSShutdownServerConnections
(
)
;
int
sandboxLevel
=
GetEffectiveContentSandboxLevel
(
)
;
if
(
sandboxLevel
<
1
)
{
return
false
;
}
if
(
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
content
.
mac
.
disconnect
-
windowserver
"
)
)
{
CGError
result
=
CGSSetDenyWindowServerConnections
(
true
)
;
MOZ_DIAGNOSTIC_ASSERT
(
result
=
=
kCGErrorSuccess
)
;
#
if
!
MOZ_DIAGNOSTIC_ASSERT_ENABLED
Unused
<
<
result
;
#
endif
}
if
(
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
content
.
mac
.
earlyinit
"
)
&
&
!
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
return
true
;
}
nsAutoCString
appPath
;
if
(
!
nsMacUtilsImpl
:
:
GetAppPath
(
appPath
)
)
{
MOZ_CRASH
(
"
Error
resolving
child
process
app
path
"
)
;
}
ContentChild
*
cc
=
ContentChild
:
:
GetSingleton
(
)
;
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
profileDir
;
cc
-
>
GetProfileDir
(
getter_AddRefs
(
profileDir
)
)
;
nsCString
profileDirPath
;
if
(
profileDir
)
{
profileDir
-
>
Normalize
(
)
;
rv
=
profileDir
-
>
GetNativePath
(
profileDirPath
)
;
if
(
NS_FAILED
(
rv
)
|
|
profileDirPath
.
IsEmpty
(
)
)
{
MOZ_CRASH
(
"
Failed
to
get
profile
path
"
)
;
}
}
bool
isFileProcess
=
cc
-
>
GetRemoteType
(
)
.
EqualsLiteral
(
FILE_REMOTE_TYPE
)
;
MacSandboxInfo
info
;
info
.
type
=
MacSandboxType_Content
;
info
.
level
=
sandboxLevel
;
info
.
hasFilePrivileges
=
isFileProcess
;
info
.
shouldLog
=
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
|
|
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
;
info
.
appPath
.
assign
(
appPath
.
get
(
)
)
;
info
.
hasAudio
=
!
Preferences
:
:
GetBool
(
"
media
.
cubeb
.
sandbox
"
)
;
info
.
hasWindowServer
=
!
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
content
.
mac
.
disconnect
-
windowserver
"
)
;
nsAutoCString
testingReadPath1
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
mac
.
testing_read_path1
"
testingReadPath1
)
;
if
(
!
testingReadPath1
.
IsEmpty
(
)
)
{
info
.
testingReadPath1
.
assign
(
testingReadPath1
.
get
(
)
)
;
}
nsAutoCString
testingReadPath2
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
mac
.
testing_read_path2
"
testingReadPath2
)
;
if
(
!
testingReadPath2
.
IsEmpty
(
)
)
{
info
.
testingReadPath2
.
assign
(
testingReadPath2
.
get
(
)
)
;
}
if
(
mozilla
:
:
IsDevelopmentBuild
(
)
)
{
nsCOMPtr
<
nsIFile
>
repoDir
;
rv
=
nsMacUtilsImpl
:
:
GetRepoDir
(
getter_AddRefs
(
repoDir
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Failed
to
get
path
to
repo
dir
"
)
;
}
nsCString
repoDirPath
;
Unused
<
<
repoDir
-
>
GetNativePath
(
repoDirPath
)
;
info
.
testingReadPath3
.
assign
(
repoDirPath
.
get
(
)
)
;
nsCOMPtr
<
nsIFile
>
objDir
;
rv
=
nsMacUtilsImpl
:
:
GetObjDir
(
getter_AddRefs
(
objDir
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Failed
to
get
path
to
build
object
dir
"
)
;
}
nsCString
objDirPath
;
Unused
<
<
objDir
-
>
GetNativePath
(
objDirPath
)
;
info
.
testingReadPath4
.
assign
(
objDirPath
.
get
(
)
)
;
}
if
(
profileDir
)
{
info
.
hasSandboxedProfile
=
true
;
info
.
profileDir
.
assign
(
profileDirPath
.
get
(
)
)
;
}
else
{
info
.
hasSandboxedProfile
=
false
;
}
#
ifdef
DEBUG
nsAutoCString
bloatLogDirPath
;
if
(
NS_SUCCEEDED
(
nsMacUtilsImpl
:
:
GetBloatLogDir
(
bloatLogDirPath
)
)
)
{
info
.
debugWriteDir
=
bloatLogDirPath
.
get
(
)
;
}
#
endif
std
:
:
string
err
;
if
(
!
mozilla
:
:
StartMacSandbox
(
info
err
)
)
{
NS_WARNING
(
err
.
c_str
(
)
)
;
MOZ_CRASH
(
"
sandbox_init
(
)
failed
"
)
;
}
return
true
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetProcessSandbox
(
const
Maybe
<
mozilla
:
:
ipc
:
:
FileDescriptor
>
&
aBroker
)
{
#
if
defined
(
MOZ_SANDBOX
)
bool
sandboxEnabled
=
true
;
#
if
defined
(
XP_LINUX
)
if
(
!
SandboxInfo
:
:
Get
(
)
.
CanSandboxContent
(
)
)
{
sandboxEnabled
=
false
;
}
else
{
if
(
!
Preferences
:
:
GetBool
(
"
media
.
cubeb
.
sandbox
"
)
)
{
Unused
<
<
CubebUtils
:
:
GetCubebContext
(
)
;
}
#
if
defined
(
XP_LINUX
)
else
{
CubebUtils
:
:
InitAudioThreads
(
)
;
}
#
endif
}
if
(
sandboxEnabled
)
{
sandboxEnabled
=
SetContentProcessSandbox
(
ContentProcessSandboxParams
:
:
ForThisProcess
(
aBroker
)
)
;
}
#
elif
defined
(
XP_WIN
)
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
elif
defined
(
XP_MACOSX
)
sandboxEnabled
=
StartMacOSContentSandbox
(
)
;
#
elif
defined
(
__OpenBSD__
)
sandboxEnabled
=
StartOpenBSDSandbox
(
GeckoProcessType_Content
)
;
if
(
!
PR_GetEnv
(
"
DBUS_SESSION_BUS_ADDRESS
"
)
)
{
static
LazyLogModule
sPledgeLog
(
"
SandboxPledge
"
)
;
MOZ_LOG
(
sPledgeLog
LogLevel
:
:
Debug
(
"
no
session
dbus
found
faking
one
\
n
"
)
)
;
PR_SetEnv
(
"
DBUS_SESSION_BUS_ADDRESS
=
"
)
;
}
#
endif
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
ContentSandboxEnabled
sandboxEnabled
)
;
#
if
defined
(
XP_LINUX
)
&
&
!
defined
(
OS_ANDROID
)
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
ContentSandboxCapabilities
static_cast
<
int
>
(
SandboxInfo
:
:
Get
(
)
.
AsInteger
(
)
)
)
;
#
endif
auto
remoteTypePrefix
=
RemoteTypePrefix
(
GetRemoteType
(
)
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
RemoteType
NS_ConvertUTF16toUTF8
(
remoteTypePrefix
)
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvBidiKeyboardNotify
(
const
bool
&
aIsLangRTL
const
bool
&
aHaveBidiKeyboards
)
{
PuppetBidiKeyboard
*
bidi
=
static_cast
<
PuppetBidiKeyboard
*
>
(
nsContentUtils
:
:
GetBidiKeyboard
(
)
)
;
if
(
bidi
)
{
bidi
-
>
SetBidiKeyboardInfo
(
aIsLangRTL
aHaveBidiKeyboards
)
;
}
return
IPC_OK
(
)
;
}
static
StaticRefPtr
<
CancelableRunnable
>
gFirstIdleTask
;
static
void
FirstIdle
(
void
)
{
MOZ_ASSERT
(
gFirstIdleTask
)
;
gFirstIdleTask
=
nullptr
;
if
(
!
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendFirstIdle
(
)
;
}
}
mozilla
:
:
jsipc
:
:
PJavaScriptChild
*
ContentChild
:
:
AllocPJavaScriptChild
(
)
{
MOZ_ASSERT
(
ManagedPJavaScriptChild
(
)
.
IsEmpty
(
)
)
;
return
NewJavaScriptChild
(
)
;
}
bool
ContentChild
:
:
DeallocPJavaScriptChild
(
PJavaScriptChild
*
aChild
)
{
ReleaseJavaScriptChild
(
aChild
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvConstructBrowser
(
ManagedEndpoint
<
PBrowserChild
>
&
&
aBrowserEp
ManagedEndpoint
<
PWindowGlobalChild
>
&
&
aWindowEp
const
TabId
&
aTabId
const
TabId
&
aSameTabGroupAs
const
IPCTabContext
&
aContext
const
WindowGlobalInit
&
aWindowInit
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForBrowser
const
bool
&
aIsTopLevel
)
{
MOZ_ASSERT
(
!
IsShuttingDown
(
)
)
;
static
bool
hasRunOnce
=
false
;
if
(
!
hasRunOnce
)
{
hasRunOnce
=
true
;
MOZ_ASSERT
(
!
gFirstIdleTask
)
;
RefPtr
<
CancelableRunnable
>
firstIdleTask
=
NewCancelableRunnableFunction
(
"
FirstIdleRunnable
"
FirstIdle
)
;
gFirstIdleTask
=
firstIdleTask
;
if
(
NS_FAILED
(
NS_DispatchToCurrentThreadQueue
(
firstIdleTask
.
forget
(
)
EventQueuePriority
:
:
Idle
)
)
)
{
gFirstIdleTask
=
nullptr
;
hasRunOnce
=
false
;
}
}
MaybeInvalidTabContext
tc
(
aContext
)
;
if
(
!
tc
.
IsValid
(
)
)
{
NS_ERROR
(
nsPrintfCString
(
"
Received
an
invalid
TabContext
from
"
"
the
parent
process
.
(
%
s
)
Crashing
.
.
.
"
tc
.
GetInvalidReason
(
)
)
.
get
(
)
)
;
MOZ_CRASH
(
"
Invalid
TabContext
received
from
the
parent
process
.
"
)
;
}
auto
windowChild
=
MakeRefPtr
<
WindowGlobalChild
>
(
aWindowInit
nullptr
)
;
RefPtr
<
BrowserChild
>
browserChild
=
BrowserChild
:
:
Create
(
this
aTabId
aSameTabGroupAs
tc
.
GetTabContext
(
)
aWindowInit
.
browsingContext
(
)
aChromeFlags
aIsTopLevel
)
;
if
(
NS_WARN_IF
(
!
BindPBrowserEndpoint
(
std
:
:
move
(
aBrowserEp
)
browserChild
)
)
)
{
return
IPC_FAIL
(
this
"
BindPBrowserEndpoint
failed
"
)
;
}
if
(
NS_WARN_IF
(
!
browserChild
-
>
BindPWindowGlobalEndpoint
(
std
:
:
move
(
aWindowEp
)
windowChild
)
)
)
{
return
IPC_FAIL
(
this
"
BindPWindowGlobalEndpoint
failed
"
)
;
}
windowChild
-
>
Init
(
)
;
if
(
!
browserChild
-
>
mTabGroup
)
{
browserChild
-
>
mTabGroup
=
TabGroup
:
:
GetFromActor
(
browserChild
)
;
if
(
!
browserChild
-
>
mTabGroup
)
{
browserChild
-
>
mTabGroup
=
new
TabGroup
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aSameTabGroupAs
!
=
0
)
;
}
}
if
(
NS_WARN_IF
(
NS_FAILED
(
browserChild
-
>
Init
(
nullptr
windowChild
)
)
)
)
{
return
IPC_FAIL
(
browserChild
"
BrowserChild
:
:
Init
failed
"
)
;
}
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
static_cast
<
nsIBrowserChild
*
>
(
browserChild
)
"
tab
-
child
-
created
"
nullptr
)
;
}
browserChild
-
>
SendRemoteIsReadyToHandleInputEvents
(
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
GetAvailableDictionaries
(
nsTArray
<
nsString
>
&
aDictionaries
)
{
aDictionaries
=
mAvailableDictionaries
;
}
PFileDescriptorSetChild
*
ContentChild
:
:
SendPFileDescriptorSetConstructor
(
const
FileDescriptor
&
aFD
)
{
if
(
IsShuttingDown
(
)
)
{
return
nullptr
;
}
return
PContentChild
:
:
SendPFileDescriptorSetConstructor
(
aFD
)
;
}
PFileDescriptorSetChild
*
ContentChild
:
:
AllocPFileDescriptorSetChild
(
const
FileDescriptor
&
aFD
)
{
return
new
FileDescriptorSetChild
(
aFD
)
;
}
bool
ContentChild
:
:
DeallocPFileDescriptorSetChild
(
PFileDescriptorSetChild
*
aActor
)
{
delete
static_cast
<
FileDescriptorSetChild
*
>
(
aActor
)
;
return
true
;
}
already_AddRefed
<
PIPCBlobInputStreamChild
>
ContentChild
:
:
AllocPIPCBlobInputStreamChild
(
const
nsID
&
aID
const
uint64_t
&
aSize
)
{
RefPtr
<
IPCBlobInputStreamChild
>
actor
=
new
IPCBlobInputStreamChild
(
aID
aSize
)
;
return
actor
.
forget
(
)
;
}
mozilla
:
:
PRemoteSpellcheckEngineChild
*
ContentChild
:
:
AllocPRemoteSpellcheckEngineChild
(
)
{
MOZ_CRASH
(
"
Default
Constructor
for
PRemoteSpellcheckEngineChild
should
never
be
"
"
called
"
)
;
return
nullptr
;
}
bool
ContentChild
:
:
DeallocPRemoteSpellcheckEngineChild
(
PRemoteSpellcheckEngineChild
*
child
)
{
delete
child
;
return
true
;
}
PPresentationChild
*
ContentChild
:
:
AllocPPresentationChild
(
)
{
MOZ_CRASH
(
"
We
should
never
be
manually
allocating
PPresentationChild
actors
"
)
;
return
nullptr
;
}
bool
ContentChild
:
:
DeallocPPresentationChild
(
PPresentationChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyPresentationReceiverLaunched
(
PBrowserChild
*
aIframe
const
nsString
&
aSessionId
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_GetInterface
(
static_cast
<
BrowserChild
*
>
(
aIframe
)
-
>
WebNavigation
(
)
)
;
NS_WARNING_ASSERTION
(
docShell
"
WebNavigation
failed
"
)
;
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
NS_WARNING_ASSERTION
(
service
"
presentation
service
is
missing
"
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
static_cast
<
PresentationIPCService
*
>
(
service
.
get
(
)
)
-
>
MonitorResponderLoading
(
aSessionId
docShell
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyPresentationReceiverCleanUp
(
const
nsString
&
aSessionId
)
{
nsCOMPtr
<
nsIPresentationService
>
service
=
do_GetService
(
PRESENTATION_SERVICE_CONTRACTID
)
;
NS_WARNING_ASSERTION
(
service
"
presentation
service
is
missing
"
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
service
-
>
UntrackSessionInfo
(
aSessionId
nsIPresentationService
:
:
ROLE_RECEIVER
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyEmptyHTTPCache
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
nullptr
"
cacheservice
:
empty
-
cache
"
nullptr
)
;
return
IPC_OK
(
)
;
}
PHalChild
*
ContentChild
:
:
AllocPHalChild
(
)
{
return
CreateHalChild
(
)
;
}
bool
ContentChild
:
:
DeallocPHalChild
(
PHalChild
*
aHal
)
{
delete
aHal
;
return
true
;
}
devtools
:
:
PHeapSnapshotTempFileHelperChild
*
ContentChild
:
:
AllocPHeapSnapshotTempFileHelperChild
(
)
{
return
devtools
:
:
HeapSnapshotTempFileHelperChild
:
:
Create
(
)
;
}
bool
ContentChild
:
:
DeallocPHeapSnapshotTempFileHelperChild
(
devtools
:
:
PHeapSnapshotTempFileHelperChild
*
aHeapSnapshotHelper
)
{
delete
aHeapSnapshotHelper
;
return
true
;
}
PTestShellChild
*
ContentChild
:
:
AllocPTestShellChild
(
)
{
return
new
TestShellChild
(
)
;
}
bool
ContentChild
:
:
DeallocPTestShellChild
(
PTestShellChild
*
shell
)
{
delete
shell
;
return
true
;
}
jsipc
:
:
CPOWManager
*
ContentChild
:
:
GetCPOWManager
(
)
{
if
(
PJavaScriptChild
*
c
=
LoneManagedOrNullAsserts
(
ManagedPJavaScriptChild
(
)
)
)
{
return
CPOWManagerFor
(
c
)
;
}
if
(
recordreplay
:
:
IsMiddleman
(
)
)
{
return
nullptr
;
}
return
CPOWManagerFor
(
SendPJavaScriptConstructor
(
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPTestShellConstructor
(
PTestShellChild
*
actor
)
{
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
UpdateCookieStatus
(
nsIChannel
*
aChannel
)
{
RefPtr
<
CookieServiceChild
>
csChild
=
CookieServiceChild
:
:
GetSingleton
(
)
;
NS_ASSERTION
(
csChild
"
Couldn
'
t
get
CookieServiceChild
"
)
;
csChild
-
>
TrackCookieLoad
(
aChannel
)
;
}
already_AddRefed
<
RemoteBrowser
>
ContentChild
:
:
CreateBrowser
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
RefPtr
<
Element
>
owner
=
aFrameLoader
-
>
GetOwnerContent
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
owner
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_GetInterface
(
owner
-
>
GetOwnerGlobal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
docShell
)
;
RefPtr
<
BrowserChild
>
browserChild
=
BrowserChild
:
:
GetFrom
(
docShell
)
;
MOZ_DIAGNOSTIC_ASSERT
(
browserChild
)
;
uint32_t
chromeFlags
=
0
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
if
(
docShell
)
{
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
}
if
(
treeOwner
)
{
nsCOMPtr
<
nsIWebBrowserChrome
>
wbc
=
do_GetInterface
(
treeOwner
)
;
if
(
wbc
)
{
wbc
-
>
GetChromeFlags
(
&
chromeFlags
)
;
}
}
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
docShell
)
;
if
(
loadContext
&
&
loadContext
-
>
UsePrivateBrowsing
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_WINDOW
;
}
if
(
loadContext
&
&
loadContext
-
>
UseRemoteTabs
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
;
}
if
(
loadContext
&
&
loadContext
-
>
UseRemoteSubframes
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
;
}
if
(
docShell
-
>
GetAffectPrivateSessionLifetime
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_LIFETIME
;
}
TabId
tabId
(
nsContentUtils
:
:
GenerateTabId
(
)
)
;
RefPtr
<
BrowserBridgeChild
>
browserBridge
=
new
BrowserBridgeChild
(
aFrameLoader
aBrowsingContext
tabId
)
;
nsDocShell
:
:
Cast
(
docShell
)
-
>
OOPChildLoadStarted
(
browserBridge
)
;
browserChild
-
>
SendPBrowserBridgeConstructor
(
browserBridge
PromiseFlatString
(
aContext
.
PresentationURL
(
)
)
aRemoteType
aBrowsingContext
chromeFlags
tabId
)
;
browserBridge
-
>
mIPCOpen
=
true
;
#
if
defined
(
ACCESSIBILITY
)
a11y
:
:
DocAccessible
*
docAcc
=
a11y
:
:
GetExistingDocAccessible
(
owner
-
>
OwnerDoc
(
)
)
;
if
(
docAcc
)
{
a11y
:
:
Accessible
*
ownerAcc
=
docAcc
-
>
GetAccessible
(
owner
)
;
if
(
ownerAcc
)
{
a11y
:
:
OuterDocAccessible
*
outerAcc
=
ownerAcc
-
>
AsOuterDoc
(
)
;
if
(
outerAcc
)
{
outerAcc
-
>
SendEmbedderAccessible
(
browserBridge
)
;
}
}
}
#
endif
RefPtr
<
BrowserBridgeHost
>
browserBridgeHost
=
new
BrowserBridgeHost
(
browserBridge
)
;
return
browserBridgeHost
.
forget
(
)
;
}
PScriptCacheChild
*
ContentChild
:
:
AllocPScriptCacheChild
(
const
FileDescOrError
&
cacheFile
const
bool
&
wantCacheData
)
{
return
new
loader
:
:
ScriptCacheChild
(
)
;
}
bool
ContentChild
:
:
DeallocPScriptCacheChild
(
PScriptCacheChild
*
cache
)
{
delete
static_cast
<
loader
:
:
ScriptCacheChild
*
>
(
cache
)
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPScriptCacheConstructor
(
PScriptCacheChild
*
actor
const
FileDescOrError
&
cacheFile
const
bool
&
wantCacheData
)
{
Maybe
<
FileDescriptor
>
fd
;
if
(
cacheFile
.
type
(
)
=
=
cacheFile
.
TFileDescriptor
)
{
fd
.
emplace
(
cacheFile
.
get_FileDescriptor
(
)
)
;
}
static_cast
<
loader
:
:
ScriptCacheChild
*
>
(
actor
)
-
>
Init
(
fd
wantCacheData
)
;
return
IPC_OK
(
)
;
}
PNeckoChild
*
ContentChild
:
:
AllocPNeckoChild
(
)
{
return
new
NeckoChild
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNetworkLinkTypeChange
(
const
uint32_t
&
aType
)
{
mNetworkLinkType
=
aType
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
"
contentchild
:
network
-
link
-
type
-
changed
"
nullptr
)
;
}
return
IPC_OK
(
)
;
}
bool
ContentChild
:
:
DeallocPNeckoChild
(
PNeckoChild
*
necko
)
{
delete
necko
;
return
true
;
}
PPrintingChild
*
ContentChild
:
:
AllocPPrintingChild
(
)
{
MOZ_CRASH
(
"
Should
never
get
here
!
"
)
;
return
nullptr
;
}
bool
ContentChild
:
:
DeallocPPrintingChild
(
PPrintingChild
*
printing
)
{
return
true
;
}
PChildToParentStreamChild
*
ContentChild
:
:
SendPChildToParentStreamConstructor
(
PChildToParentStreamChild
*
aActor
)
{
if
(
IsShuttingDown
(
)
)
{
return
nullptr
;
}
return
PContentChild
:
:
SendPChildToParentStreamConstructor
(
aActor
)
;
}
PChildToParentStreamChild
*
ContentChild
:
:
AllocPChildToParentStreamChild
(
)
{
MOZ_CRASH
(
"
PChildToParentStreamChild
actors
should
be
manually
constructed
!
"
)
;
}
bool
ContentChild
:
:
DeallocPChildToParentStreamChild
(
PChildToParentStreamChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
PParentToChildStreamChild
*
ContentChild
:
:
AllocPParentToChildStreamChild
(
)
{
return
mozilla
:
:
ipc
:
:
AllocPParentToChildStreamChild
(
)
;
}
bool
ContentChild
:
:
DeallocPParentToChildStreamChild
(
PParentToChildStreamChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
PPSMContentDownloaderChild
*
ContentChild
:
:
AllocPPSMContentDownloaderChild
(
const
uint32_t
&
aCertType
)
{
RefPtr
<
PSMContentDownloaderChild
>
child
=
new
PSMContentDownloaderChild
(
)
;
return
child
.
forget
(
)
.
take
(
)
;
}
bool
ContentChild
:
:
DeallocPPSMContentDownloaderChild
(
PPSMContentDownloaderChild
*
aListener
)
{
auto
*
listener
=
static_cast
<
PSMContentDownloaderChild
*
>
(
aListener
)
;
RefPtr
<
PSMContentDownloaderChild
>
child
=
dont_AddRef
(
listener
)
;
return
true
;
}
media
:
:
PMediaChild
*
ContentChild
:
:
AllocPMediaChild
(
)
{
return
media
:
:
AllocPMediaChild
(
)
;
}
bool
ContentChild
:
:
DeallocPMediaChild
(
media
:
:
PMediaChild
*
aActor
)
{
return
media
:
:
DeallocPMediaChild
(
aActor
)
;
}
PBenchmarkStorageChild
*
ContentChild
:
:
AllocPBenchmarkStorageChild
(
)
{
return
BenchmarkStorageChild
:
:
Instance
(
)
;
}
bool
ContentChild
:
:
DeallocPBenchmarkStorageChild
(
PBenchmarkStorageChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
PSpeechSynthesisChild
*
ContentChild
:
:
AllocPSpeechSynthesisChild
(
)
{
#
ifdef
MOZ_WEBSPEECH
MOZ_CRASH
(
"
No
one
should
be
allocating
PSpeechSynthesisChild
actors
"
)
;
#
else
return
nullptr
;
#
endif
}
bool
ContentChild
:
:
DeallocPSpeechSynthesisChild
(
PSpeechSynthesisChild
*
aActor
)
{
#
ifdef
MOZ_WEBSPEECH
delete
aActor
;
return
true
;
#
else
return
false
;
#
endif
}
PWebrtcGlobalChild
*
ContentChild
:
:
AllocPWebrtcGlobalChild
(
)
{
#
ifdef
MOZ_WEBRTC
auto
*
child
=
new
WebrtcGlobalChild
(
)
;
return
child
;
#
else
return
nullptr
;
#
endif
}
bool
ContentChild
:
:
DeallocPWebrtcGlobalChild
(
PWebrtcGlobalChild
*
aActor
)
{
#
ifdef
MOZ_WEBRTC
delete
static_cast
<
WebrtcGlobalChild
*
>
(
aActor
)
;
return
true
;
#
else
return
false
;
#
endif
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRegisterChrome
(
nsTArray
<
ChromePackage
>
&
&
packages
nsTArray
<
SubstitutionMapping
>
&
&
resources
nsTArray
<
OverrideMapping
>
&
&
overrides
const
nsCString
&
locale
const
bool
&
reset
)
{
nsCOMPtr
<
nsIChromeRegistry
>
registrySvc
=
nsChromeRegistry
:
:
GetService
(
)
;
nsChromeRegistryContent
*
chromeRegistry
=
static_cast
<
nsChromeRegistryContent
*
>
(
registrySvc
.
get
(
)
)
;
if
(
!
chromeRegistry
)
{
return
IPC_FAIL
(
this
"
ChromeRegistryContent
is
null
!
"
)
;
}
chromeRegistry
-
>
RegisterRemoteChrome
(
packages
resources
overrides
locale
reset
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRegisterChromeItem
(
const
ChromeRegistryItem
&
item
)
{
nsCOMPtr
<
nsIChromeRegistry
>
registrySvc
=
nsChromeRegistry
:
:
GetService
(
)
;
nsChromeRegistryContent
*
chromeRegistry
=
static_cast
<
nsChromeRegistryContent
*
>
(
registrySvc
.
get
(
)
)
;
if
(
!
chromeRegistry
)
{
return
IPC_FAIL
(
this
"
ChromeRegistryContent
is
null
!
"
)
;
}
switch
(
item
.
type
(
)
)
{
case
ChromeRegistryItem
:
:
TChromePackage
:
chromeRegistry
-
>
RegisterPackage
(
item
.
get_ChromePackage
(
)
)
;
break
;
case
ChromeRegistryItem
:
:
TOverrideMapping
:
chromeRegistry
-
>
RegisterOverride
(
item
.
get_OverrideMapping
(
)
)
;
break
;
case
ChromeRegistryItem
:
:
TSubstitutionMapping
:
chromeRegistry
-
>
RegisterSubstitution
(
item
.
get_SubstitutionMapping
(
)
)
;
break
;
default
:
MOZ_ASSERT
(
false
"
bad
chrome
item
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvClearImageCache
(
const
bool
&
privateLoader
const
bool
&
chrome
)
{
imgLoader
*
loader
=
privateLoader
?
imgLoader
:
:
PrivateBrowsingLoader
(
)
:
imgLoader
:
:
NormalLoader
(
)
;
loader
-
>
ClearCache
(
chrome
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetOffline
(
const
bool
&
offline
)
{
nsCOMPtr
<
nsIIOService
>
io
(
do_GetIOService
(
)
)
;
NS_ASSERTION
(
io
"
IO
Service
can
not
be
null
"
)
;
io
-
>
SetOffline
(
offline
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetConnectivity
(
const
bool
&
connectivity
)
{
nsCOMPtr
<
nsIIOService
>
io
(
do_GetIOService
(
)
)
;
nsCOMPtr
<
nsIIOServiceInternal
>
ioInternal
(
do_QueryInterface
(
io
)
)
;
NS_ASSERTION
(
ioInternal
"
IO
Service
can
not
be
null
"
)
;
ioInternal
-
>
SetConnectivity
(
connectivity
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetCaptivePortalState
(
const
int32_t
&
aState
)
{
nsCOMPtr
<
nsICaptivePortalService
>
cps
=
do_GetService
(
NS_CAPTIVEPORTAL_CID
)
;
if
(
!
cps
)
{
return
IPC_OK
(
)
;
}
mozilla
:
:
net
:
:
CaptivePortalService
*
portal
=
static_cast
<
mozilla
:
:
net
:
:
CaptivePortalService
*
>
(
cps
.
get
(
)
)
;
portal
-
>
SetStateInChild
(
aState
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
if
(
mForceKillTimer
)
{
mForceKillTimer
-
>
Cancel
(
)
;
mForceKillTimer
=
nullptr
;
}
if
(
AbnormalShutdown
=
=
why
)
{
NS_WARNING
(
"
shutting
down
early
because
of
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
else
if
(
gFirstIdleTask
)
{
gFirstIdleTask
-
>
Cancel
(
)
;
gFirstIdleTask
=
nullptr
;
}
BlobURLProtocolHandler
:
:
RemoveDataEntries
(
)
;
mSharedData
=
nullptr
;
mAlertObservers
.
Clear
(
)
;
mIdleObservers
.
Clear
(
)
;
mBrowsingContextGroupHolder
.
Clear
(
)
;
nsCOMPtr
<
nsIConsoleService
>
svc
(
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
)
;
if
(
svc
)
{
svc
-
>
UnregisterListener
(
mConsoleListener
)
;
mConsoleListener
-
>
mChild
=
nullptr
;
}
mIsAlive
=
false
;
CrashReporterClient
:
:
DestroySingleton
(
)
;
XRE_ShutdownChildProcess
(
)
;
#
endif
}
void
ContentChild
:
:
ProcessingError
(
Result
aCode
const
char
*
aReason
)
{
switch
(
aCode
)
{
case
MsgDropped
:
NS_WARNING
(
"
MsgDropped
in
ContentChild
"
)
;
return
;
case
MsgNotKnown
:
case
MsgNotAllowed
:
case
MsgPayloadError
:
case
MsgProcessingError
:
case
MsgRouteError
:
case
MsgValueError
:
break
;
default
:
MOZ_CRASH
(
"
not
reached
"
)
;
}
nsDependentCString
reason
(
aReason
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
ipc_channel_error
reason
)
;
MOZ_CRASH
(
"
Content
child
abort
due
to
IPC
error
"
)
;
}
nsresult
ContentChild
:
:
AddRemoteAlertObserver
(
const
nsString
&
aData
nsIObserver
*
aObserver
)
{
NS_ASSERTION
(
aObserver
"
Adding
a
null
observer
?
"
)
;
mAlertObservers
.
AppendElement
(
new
AlertObserver
(
aObserver
aData
)
)
;
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
{
Preferences
:
:
SetPreference
(
aPref
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvVarUpdate
(
const
GfxVarUpdate
&
aVar
)
{
gfx
:
:
gfxVars
:
:
ApplyUpdate
(
aVar
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdatePerfStatsCollectionMask
(
const
uint64_t
&
aMask
)
{
PerfStats
:
:
SetCollectionMask
(
static_cast
<
PerfStats
:
:
MetricMask
>
(
aMask
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvCollectPerfStatsJSON
(
CollectPerfStatsJSONResolver
&
&
aResolver
)
{
aResolver
(
PerfStats
:
:
CollectLocalPerfStatsJSON
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDataStoragePut
(
const
nsString
&
aFilename
const
DataStorageItem
&
aItem
)
{
RefPtr
<
DataStorage
>
storage
=
DataStorage
:
:
GetFromRawFileName
(
aFilename
)
;
if
(
storage
)
{
storage
-
>
Put
(
aItem
.
key
(
)
aItem
.
value
(
)
aItem
.
type
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDataStorageRemove
(
const
nsString
&
aFilename
const
nsCString
&
aKey
const
DataStorageType
&
aType
)
{
RefPtr
<
DataStorage
>
storage
=
DataStorage
:
:
GetFromRawFileName
(
aFilename
)
;
if
(
storage
)
{
storage
-
>
Remove
(
aKey
aType
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDataStorageClear
(
const
nsString
&
aFilename
)
{
RefPtr
<
DataStorage
>
storage
=
DataStorage
:
:
GetFromRawFileName
(
aFilename
)
;
if
(
storage
)
{
storage
-
>
Clear
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyAlertsObserver
(
const
nsCString
&
aType
const
nsString
&
aData
)
{
for
(
uint32_t
i
=
0
;
i
<
mAlertObservers
.
Length
(
)
;
)
{
AlertObserver
*
observer
=
mAlertObservers
[
i
]
;
if
(
observer
-
>
Observes
(
aData
)
&
&
observer
-
>
Notify
(
aType
)
)
{
if
(
aType
.
Equals
(
nsDependentCString
(
"
alertfinished
"
)
)
)
{
mAlertObservers
.
RemoveElementAt
(
i
)
;
continue
;
}
}
+
+
i
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyVisited
(
nsTArray
<
URIParams
>
&
&
aURIs
)
{
for
(
const
URIParams
&
uri
:
aURIs
)
{
nsCOMPtr
<
nsIURI
>
newURI
=
DeserializeURI
(
uri
)
;
if
(
!
newURI
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsCOMPtr
<
IHistory
>
history
=
services
:
:
GetHistoryService
(
)
;
if
(
history
)
{
history
-
>
NotifyVisited
(
newURI
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvLoadProcessScript
(
const
nsString
&
aURL
)
{
auto
*
global
=
ContentProcessMessageManager
:
:
Get
(
)
;
global
-
>
LoadScript
(
aURL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAsyncMessage
(
const
nsString
&
aMsg
nsTArray
<
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
{
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
"
ContentChild
:
:
RecvAsyncMessage
"
OTHER
aMsg
)
;
MMPrinter
:
:
Print
(
"
ContentChild
:
:
RecvAsyncMessage
"
aMsg
aData
)
;
CrossProcessCpowHolder
cpows
(
this
aCpows
)
;
RefPtr
<
nsFrameMessageManager
>
cpm
=
nsFrameMessageManager
:
:
GetChildProcessManager
(
)
;
if
(
cpm
)
{
StructuredCloneData
data
;
ipc
:
:
UnpackClonedMessageDataForChild
(
aData
data
)
;
cpm
-
>
ReceiveMessage
(
cpm
nullptr
aMsg
false
&
data
&
cpows
aPrincipal
nullptr
IgnoreErrors
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRegisterStringBundles
(
nsTArray
<
mozilla
:
:
dom
:
:
StringBundleDescriptor
>
&
&
aDescriptors
)
{
nsCOMPtr
<
nsIStringBundleService
>
stringBundleService
=
services
:
:
GetStringBundleService
(
)
;
for
(
auto
&
descriptor
:
aDescriptors
)
{
stringBundleService
-
>
RegisterContentBundle
(
descriptor
.
bundleURL
(
)
descriptor
.
mapFile
(
)
descriptor
.
mapSize
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateSharedData
(
const
FileDescriptor
&
aMapFile
const
uint32_t
&
aMapSize
nsTArray
<
IPCBlob
>
&
&
aBlobs
nsTArray
<
nsCString
>
&
&
aChangedKeys
)
{
nsTArray
<
RefPtr
<
BlobImpl
>
>
blobImpls
(
aBlobs
.
Length
(
)
)
;
for
(
auto
&
ipcBlob
:
aBlobs
)
{
blobImpls
.
AppendElement
(
IPCBlobUtils
:
:
Deserialize
(
ipcBlob
)
)
;
}
if
(
mSharedData
)
{
mSharedData
-
>
Update
(
aMapFile
aMapSize
std
:
:
move
(
blobImpls
)
std
:
:
move
(
aChangedKeys
)
)
;
}
else
{
mSharedData
=
new
SharedMap
(
ContentProcessMessageManager
:
:
Get
(
)
-
>
GetParentObject
(
)
aMapFile
aMapSize
std
:
:
move
(
blobImpls
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvFontListChanged
(
)
{
gfxPlatformFontList
:
:
PlatformFontList
(
)
-
>
FontListChanged
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGeolocationUpdate
(
nsIDOMGeoPosition
*
aPosition
)
{
RefPtr
<
nsGeolocationService
>
gs
=
nsGeolocationService
:
:
GetGeolocationService
(
)
;
if
(
!
gs
)
{
return
IPC_OK
(
)
;
}
gs
-
>
Update
(
aPosition
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGeolocationError
(
const
uint16_t
&
errorCode
)
{
RefPtr
<
nsGeolocationService
>
gs
=
nsGeolocationService
:
:
GetGeolocationService
(
)
;
if
(
!
gs
)
{
return
IPC_OK
(
)
;
}
gs
-
>
NotifyError
(
errorCode
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateDictionaryList
(
nsTArray
<
nsString
>
&
&
aDictionaries
)
{
mAvailableDictionaries
=
aDictionaries
;
mozInlineSpellChecker
:
:
UpdateCanEnableInlineSpellChecking
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateFontList
(
nsTArray
<
SystemFontListEntry
>
&
&
aFontList
)
{
mFontList
=
std
:
:
move
(
aFontList
)
;
gfxPlatform
:
:
GetPlatform
(
)
-
>
UpdateFontList
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRebuildFontList
(
)
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
UpdateFontList
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateAppLocales
(
nsTArray
<
nsCString
>
&
&
aAppLocales
)
{
LocaleService
:
:
GetInstance
(
)
-
>
AssignAppLocales
(
aAppLocales
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateRequestedLocales
(
nsTArray
<
nsCString
>
&
&
aRequestedLocales
)
{
LocaleService
:
:
GetInstance
(
)
-
>
AssignRequestedLocales
(
aRequestedLocales
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAddPermission
(
const
IPC
:
:
Permission
&
permission
)
{
nsCOMPtr
<
nsIPermissionManager
>
permissionManagerIface
=
services
:
:
GetPermissionManager
(
)
;
nsPermissionManager
*
permissionManager
=
static_cast
<
nsPermissionManager
*
>
(
permissionManagerIface
.
get
(
)
)
;
MOZ_ASSERT
(
permissionManager
"
We
have
no
permissionManager
in
the
Content
process
!
"
)
;
nsAutoCString
originNoSuffix
;
OriginAttributes
attrs
;
bool
success
=
attrs
.
PopulateFromOrigin
(
permission
.
origin
originNoSuffix
)
;
NS_ENSURE_TRUE
(
success
IPC_FAIL_NO_REASON
(
this
)
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
originNoSuffix
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mozilla
:
:
BasePrincipal
:
:
CreateContentPrincipal
(
uri
attrs
)
;
int64_t
modificationTime
=
0
;
permissionManager
-
>
AddInternal
(
principal
nsCString
(
permission
.
type
)
permission
.
capability
0
permission
.
expireType
permission
.
expireTime
modificationTime
nsPermissionManager
:
:
eNotify
nsPermissionManager
:
:
eNoDBOperation
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRemoveAllPermissions
(
)
{
nsCOMPtr
<
nsIPermissionManager
>
permissionManagerIface
=
services
:
:
GetPermissionManager
(
)
;
nsPermissionManager
*
permissionManager
=
static_cast
<
nsPermissionManager
*
>
(
permissionManagerIface
.
get
(
)
)
;
MOZ_ASSERT
(
permissionManager
"
We
have
no
permissionManager
in
the
Content
process
!
"
)
;
permissionManager
-
>
RemoveAllFromIPC
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvFlushMemory
(
const
nsString
&
reason
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
nullptr
"
memory
-
pressure
"
reason
.
get
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvActivateA11y
(
const
uint32_t
&
aMainChromeTid
const
uint32_t
&
aMsaaID
)
{
#
ifdef
ACCESSIBILITY
#
ifdef
XP_WIN
MOZ_ASSERT
(
aMainChromeTid
!
=
0
)
;
mMainChromeTid
=
aMainChromeTid
;
MOZ_ASSERT
(
aMsaaID
!
=
0
)
;
mMsaaID
=
aMsaaID
;
#
endif
GetOrCreateAccService
(
nsAccessibilityService
:
:
eMainProcess
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvShutdownA11y
(
)
{
#
ifdef
ACCESSIBILITY
MaybeShutdownAccService
(
nsAccessibilityService
:
:
eMainProcess
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGarbageCollect
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
"
child
-
gc
-
request
"
nullptr
)
;
}
nsJSContext
:
:
GarbageCollectNow
(
JS
:
:
GCReason
:
:
DOM_IPC
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvCycleCollect
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
"
child
-
cc
-
request
"
nullptr
)
;
}
nsJSContext
:
:
CycleCollectNow
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUnlinkGhosts
(
)
{
#
ifdef
DEBUG
nsWindowMemoryReporter
:
:
UnlinkGhostWindows
(
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAppInfo
(
const
nsCString
&
version
const
nsCString
&
buildID
const
nsCString
&
name
const
nsCString
&
UAName
const
nsCString
&
ID
const
nsCString
&
vendor
const
nsCString
&
sourceURL
)
{
mAppInfo
.
version
.
Assign
(
version
)
;
mAppInfo
.
buildID
.
Assign
(
buildID
)
;
mAppInfo
.
name
.
Assign
(
name
)
;
mAppInfo
.
UAName
.
Assign
(
UAName
)
;
mAppInfo
.
ID
.
Assign
(
ID
)
;
mAppInfo
.
vendor
.
Assign
(
vendor
)
;
mAppInfo
.
sourceURL
.
Assign
(
sourceURL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRemoteType
(
const
nsString
&
aRemoteType
)
{
MOZ_ASSERT
(
DOMStringIsNull
(
mRemoteType
)
)
;
mRemoteType
.
Assign
(
aRemoteType
)
;
if
(
aRemoteType
.
EqualsLiteral
(
FILE_REMOTE_TYPE
)
)
{
SetProcessName
(
NS_LITERAL_STRING
(
"
file
:
/
/
Content
"
)
)
;
}
else
if
(
aRemoteType
.
EqualsLiteral
(
EXTENSION_REMOTE_TYPE
)
)
{
SetProcessName
(
NS_LITERAL_STRING
(
"
WebExtensions
"
)
)
;
}
else
if
(
aRemoteType
.
EqualsLiteral
(
PRIVILEGEDABOUT_REMOTE_TYPE
)
)
{
SetProcessName
(
NS_LITERAL_STRING
(
"
Privileged
Content
"
)
)
;
}
else
if
(
aRemoteType
.
EqualsLiteral
(
LARGE_ALLOCATION_REMOTE_TYPE
)
)
{
SetProcessName
(
NS_LITERAL_STRING
(
"
Large
Allocation
Web
Content
"
)
)
;
}
return
IPC_OK
(
)
;
}
const
nsAString
&
ContentChild
:
:
GetRemoteType
(
)
const
{
return
mRemoteType
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitServiceWorkers
(
const
ServiceWorkerConfiguration
&
aConfig
)
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
if
(
!
swm
)
{
return
IPC_OK
(
)
;
}
swm
-
>
LoadRegistrations
(
aConfig
.
serviceWorkerRegistrations
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitBlobURLs
(
nsTArray
<
BlobURLRegistrationData
>
&
&
aRegistrations
)
{
for
(
uint32_t
i
=
0
;
i
<
aRegistrations
.
Length
(
)
;
+
+
i
)
{
BlobURLRegistrationData
&
registration
=
aRegistrations
[
i
]
;
RefPtr
<
BlobImpl
>
blobImpl
=
IPCBlobUtils
:
:
Deserialize
(
registration
.
blob
(
)
)
;
MOZ_ASSERT
(
blobImpl
)
;
BlobURLProtocolHandler
:
:
AddDataEntry
(
registration
.
url
(
)
registration
.
principal
(
)
blobImpl
)
;
if
(
registration
.
revoked
(
)
)
{
BlobURLProtocolHandler
:
:
RemoveDataEntry
(
registration
.
url
(
)
false
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInitJSWindowActorInfos
(
nsTArray
<
JSWindowActorInfo
>
&
&
aInfos
)
{
RefPtr
<
JSWindowActorService
>
actSvc
=
JSWindowActorService
:
:
GetSingleton
(
)
;
actSvc
-
>
LoadJSWindowActorInfos
(
aInfos
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUnregisterJSWindowActor
(
const
nsString
&
aName
)
{
RefPtr
<
JSWindowActorService
>
actSvc
=
JSWindowActorService
:
:
GetSingleton
(
)
;
actSvc
-
>
UnregisterWindowActor
(
aName
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvLastPrivateDocShellDestroyed
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
nullptr
"
last
-
pb
-
context
-
exited
"
nullptr
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyProcessPriorityChanged
(
const
hal
:
:
ProcessPriority
&
aPriority
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
NS_ENSURE_TRUE
(
os
IPC_OK
(
)
)
;
RefPtr
<
nsHashPropertyBag
>
props
=
new
nsHashPropertyBag
(
)
;
props
-
>
SetPropertyAsInt32
(
NS_LITERAL_STRING
(
"
priority
"
)
static_cast
<
int32_t
>
(
aPriority
)
)
;
os
-
>
NotifyObservers
(
static_cast
<
nsIPropertyBag2
*
>
(
props
)
"
ipc
:
process
-
priority
-
changed
"
nullptr
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvMinimizeMemoryUsage
(
)
{
nsCOMPtr
<
nsIMemoryReporterManager
>
mgr
=
do_GetService
(
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
)
;
NS_ENSURE_TRUE
(
mgr
IPC_OK
(
)
)
;
Unused
<
<
mgr
-
>
MinimizeMemoryUsage
(
nullptr
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
AddIdleObserver
(
nsIObserver
*
aObserver
uint32_t
aIdleTimeInS
)
{
MOZ_ASSERT
(
aObserver
"
null
idle
observer
"
)
;
aObserver
-
>
AddRef
(
)
;
SendAddIdleObserver
(
reinterpret_cast
<
uint64_t
>
(
aObserver
)
aIdleTimeInS
)
;
mIdleObservers
.
PutEntry
(
aObserver
)
;
}
void
ContentChild
:
:
RemoveIdleObserver
(
nsIObserver
*
aObserver
uint32_t
aIdleTimeInS
)
{
MOZ_ASSERT
(
aObserver
"
null
idle
observer
"
)
;
SendRemoveIdleObserver
(
reinterpret_cast
<
uint64_t
>
(
aObserver
)
aIdleTimeInS
)
;
aObserver
-
>
Release
(
)
;
mIdleObservers
.
RemoveEntry
(
aObserver
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyIdleObserver
(
const
uint64_t
&
aObserver
const
nsCString
&
aTopic
const
nsString
&
aTimeStr
)
{
nsIObserver
*
observer
=
reinterpret_cast
<
nsIObserver
*
>
(
aObserver
)
;
if
(
mIdleObservers
.
Contains
(
observer
)
)
{
observer
-
>
Observe
(
nullptr
aTopic
.
get
(
)
aTimeStr
.
get
(
)
)
;
}
else
{
NS_WARNING
(
"
Received
notification
for
an
idle
observer
that
was
removed
.
"
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvLoadAndRegisterSheet
(
const
URIParams
&
aURI
const
uint32_t
&
aType
)
{
nsCOMPtr
<
nsIURI
>
uri
=
DeserializeURI
(
aURI
)
;
if
(
!
uri
)
{
return
IPC_OK
(
)
;
}
nsStyleSheetService
*
sheetService
=
nsStyleSheetService
:
:
GetInstance
(
)
;
if
(
sheetService
)
{
sheetService
-
>
LoadAndRegisterSheet
(
uri
aType
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUnregisterSheet
(
const
URIParams
&
aURI
const
uint32_t
&
aType
)
{
nsCOMPtr
<
nsIURI
>
uri
=
DeserializeURI
(
aURI
)
;
if
(
!
uri
)
{
return
IPC_OK
(
)
;
}
nsStyleSheetService
*
sheetService
=
nsStyleSheetService
:
:
GetInstance
(
)
;
if
(
sheetService
)
{
sheetService
-
>
UnregisterSheet
(
uri
aType
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDomainSetChanged
(
const
uint32_t
&
aSetType
const
uint32_t
&
aChangeType
const
Maybe
<
URIParams
>
&
aDomain
)
{
if
(
aChangeType
=
=
ACTIVATE_POLICY
)
{
if
(
mPolicy
)
{
return
IPC_OK
(
)
;
}
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
MOZ_ASSERT
(
ssm
)
;
ssm
-
>
ActivateDomainPolicyInternal
(
getter_AddRefs
(
mPolicy
)
)
;
if
(
!
mPolicy
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
if
(
!
mPolicy
)
{
MOZ_ASSERT_UNREACHABLE
(
"
If
the
domain
policy
is
not
active
yet
"
"
the
first
message
should
be
ACTIVATE_POLICY
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
NS_ENSURE_TRUE
(
mPolicy
IPC_FAIL_NO_REASON
(
this
)
)
;
if
(
aChangeType
=
=
DEACTIVATE_POLICY
)
{
mPolicy
-
>
Deactivate
(
)
;
mPolicy
=
nullptr
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIDomainSet
>
set
;
switch
(
aSetType
)
{
case
BLOCKLIST
:
mPolicy
-
>
GetBlocklist
(
getter_AddRefs
(
set
)
)
;
break
;
case
SUPER_BLOCKLIST
:
mPolicy
-
>
GetSuperBlocklist
(
getter_AddRefs
(
set
)
)
;
break
;
case
ALLOWLIST
:
mPolicy
-
>
GetAllowlist
(
getter_AddRefs
(
set
)
)
;
break
;
case
SUPER_ALLOWLIST
:
mPolicy
-
>
GetSuperAllowlist
(
getter_AddRefs
(
set
)
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
setType
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
MOZ_ASSERT
(
set
)
;
nsCOMPtr
<
nsIURI
>
uri
=
DeserializeURI
(
aDomain
)
;
switch
(
aChangeType
)
{
case
ADD_DOMAIN
:
NS_ENSURE_TRUE
(
uri
IPC_FAIL_NO_REASON
(
this
)
)
;
set
-
>
Add
(
uri
)
;
break
;
case
REMOVE_DOMAIN
:
NS_ENSURE_TRUE
(
uri
IPC_FAIL_NO_REASON
(
this
)
)
;
set
-
>
Remove
(
uri
)
;
break
;
case
CLEAR_DOMAINS
:
set
-
>
Clear
(
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
changeType
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
StartForceKillTimer
(
)
{
if
(
mForceKillTimer
)
{
return
;
}
int32_t
timeoutSecs
=
StaticPrefs
:
:
dom_ipc_tabs_shutdownTimeoutSecs
(
)
;
if
(
timeoutSecs
>
0
)
{
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mForceKillTimer
)
ContentChild
:
:
ForceKillTimerCallback
this
timeoutSecs
*
1000
nsITimer
:
:
TYPE_ONE_SHOT
"
dom
:
:
ContentChild
:
:
StartForceKillTimer
"
)
;
MOZ_ASSERT
(
mForceKillTimer
)
;
}
}
void
ContentChild
:
:
ForceKillTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
ProcessChild
:
:
QuickExit
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvShutdown
(
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
this
"
content
-
child
-
will
-
shutdown
"
nullptr
)
;
}
ShutdownInternal
(
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
ShutdownInternal
(
)
{
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
IPCShutdownState
NS_LITERAL_CSTRING
(
"
RecvShutdown
"
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
nsThread
>
mainThread
=
nsThreadManager
:
:
get
(
)
.
GetCurrentThread
(
)
;
if
(
mainThread
&
&
mainThread
-
>
RecursionDepth
(
)
>
1
)
{
MessageLoop
:
:
current
(
)
-
>
PostDelayedTask
(
NewRunnableMethod
(
"
dom
:
:
ContentChild
:
:
RecvShutdown
"
this
&
ContentChild
:
:
ShutdownInternal
)
100
)
;
return
;
}
mShuttingDown
=
true
;
#
ifdef
NIGHTLY_BUILD
BackgroundHangMonitor
:
:
UnregisterAnnotator
(
PendingInputEventHangAnnotator
:
:
sSingleton
)
;
#
endif
if
(
mPolicy
)
{
mPolicy
-
>
Deactivate
(
)
;
mPolicy
=
nullptr
;
}
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
NotifyObservers
(
this
"
content
-
child
-
shutdown
"
nullptr
)
;
}
#
if
defined
(
XP_WIN
)
mozilla
:
:
widget
:
:
StopAudioSession
(
)
;
#
endif
GetIPCChannel
(
)
-
>
SetAbortOnError
(
false
)
;
#
ifdef
MOZ_GECKO_PROFILER
if
(
mProfilerController
)
{
nsCString
shutdownProfile
=
mProfilerController
-
>
GrabShutdownProfileAndShutdown
(
)
;
mProfilerController
=
nullptr
;
Unused
<
<
SendShutdownProfile
(
shutdownProfile
)
;
}
#
endif
StartForceKillTimer
(
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
IPCShutdownState
NS_LITERAL_CSTRING
(
"
SendFinishShutdown
(
sending
)
"
)
)
;
bool
sent
=
SendFinishShutdown
(
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
IPCShutdownState
sent
?
NS_LITERAL_CSTRING
(
"
SendFinishShutdown
(
sent
)
"
)
:
NS_LITERAL_CSTRING
(
"
SendFinishShutdown
(
failed
)
"
)
)
;
}
PBrowserOrId
ContentChild
:
:
GetBrowserOrId
(
BrowserChild
*
aBrowserChild
)
{
if
(
!
aBrowserChild
|
|
this
=
=
aBrowserChild
-
>
Manager
(
)
)
{
return
PBrowserOrId
(
aBrowserChild
)
;
}
return
PBrowserOrId
(
aBrowserChild
-
>
GetTabId
(
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateWindow
(
const
uintptr_t
&
aChildId
)
{
#
if
defined
(
XP_WIN
)
NS_ASSERTION
(
aChildId
"
Expected
child
hwnd
value
for
remote
plugin
instance
.
"
)
;
mozilla
:
:
plugins
:
:
PluginInstanceParent
*
parentInstance
=
mozilla
:
:
plugins
:
:
PluginInstanceParent
:
:
LookupPluginInstanceByID
(
aChildId
)
;
if
(
parentInstance
)
{
if
(
!
parentInstance
-
>
CallUpdateWindow
(
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
}
return
IPC_OK
(
)
;
#
else
MOZ_ASSERT
(
false
"
ContentChild
:
:
RecvUpdateWindow
calls
unexpected
on
this
platform
.
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
#
endif
}
PContentPermissionRequestChild
*
ContentChild
:
:
AllocPContentPermissionRequestChild
(
const
nsTArray
<
PermissionRequest
>
&
aRequests
const
IPC
:
:
Principal
&
aPrincipal
const
IPC
:
:
Principal
&
aTopLevelPrincipal
const
bool
&
aIsHandlingUserInput
const
bool
&
aDocumentHasUserInput
const
DOMTimeStamp
aPageLoadTimestamp
const
TabId
&
aTabId
)
{
MOZ_CRASH
(
"
unused
"
)
;
return
nullptr
;
}
bool
ContentChild
:
:
DeallocPContentPermissionRequestChild
(
PContentPermissionRequestChild
*
actor
)
{
nsContentPermissionUtils
:
:
NotifyRemoveContentPermissionRequestChild
(
actor
)
;
auto
child
=
static_cast
<
RemotePermissionRequest
*
>
(
actor
)
;
child
-
>
IPDLRelease
(
)
;
return
true
;
}
PWebBrowserPersistDocumentChild
*
ContentChild
:
:
AllocPWebBrowserPersistDocumentChild
(
PBrowserChild
*
aBrowser
const
uint64_t
&
aOuterWindowID
)
{
return
new
WebBrowserPersistDocumentChild
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPWebBrowserPersistDocumentConstructor
(
PWebBrowserPersistDocumentChild
*
aActor
PBrowserChild
*
aBrowser
const
uint64_t
&
aOuterWindowID
)
{
if
(
NS_WARN_IF
(
!
aBrowser
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
nsCOMPtr
<
Document
>
rootDoc
=
static_cast
<
BrowserChild
*
>
(
aBrowser
)
-
>
GetTopLevelDocument
(
)
;
nsCOMPtr
<
Document
>
foundDoc
;
if
(
aOuterWindowID
)
{
foundDoc
=
nsContentUtils
:
:
GetSubdocumentWithOuterWindowId
(
rootDoc
aOuterWindowID
)
;
}
else
{
foundDoc
=
rootDoc
;
}
if
(
!
foundDoc
)
{
aActor
-
>
SendInitFailure
(
NS_ERROR_NO_CONTENT
)
;
}
else
{
static_cast
<
WebBrowserPersistDocumentChild
*
>
(
aActor
)
-
>
Start
(
foundDoc
)
;
}
return
IPC_OK
(
)
;
}
bool
ContentChild
:
:
DeallocPWebBrowserPersistDocumentChild
(
PWebBrowserPersistDocumentChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetAudioSessionData
(
const
nsID
&
aId
const
nsString
&
aDisplayName
const
nsString
&
aIconPath
)
{
#
if
defined
(
XP_WIN
)
if
(
NS_FAILED
(
mozilla
:
:
widget
:
:
RecvAudioSessionData
(
aId
aDisplayName
aIconPath
)
)
)
{
return
IPC_OK
(
)
;
}
mozilla
:
:
widget
:
:
StartAudioSession
(
)
;
return
IPC_OK
(
)
;
#
else
MOZ_CRASH
(
"
Not
Reached
!
"
)
;
#
endif
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvInvokeDragSession
(
nsTArray
<
IPCDataTransfer
>
&
&
aTransfers
const
uint32_t
&
aAction
)
{
nsCOMPtr
<
nsIDragService
>
dragService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
dragService
)
{
dragService
-
>
StartDragSession
(
)
;
nsCOMPtr
<
nsIDragSession
>
session
;
dragService
-
>
GetCurrentSession
(
getter_AddRefs
(
session
)
)
;
if
(
session
)
{
session
-
>
SetDragAction
(
aAction
)
;
bool
hasFiles
=
false
;
for
(
uint32_t
i
=
0
;
i
<
aTransfers
.
Length
(
)
&
&
!
hasFiles
;
+
+
i
)
{
auto
&
items
=
aTransfers
[
i
]
.
items
(
)
;
for
(
uint32_t
j
=
0
;
j
<
items
.
Length
(
)
&
&
!
hasFiles
;
+
+
j
)
{
if
(
items
[
j
]
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TIPCBlob
)
{
hasFiles
=
true
;
}
}
}
nsCOMPtr
<
DataTransfer
>
dataTransfer
=
new
DataTransfer
(
nullptr
eDragStart
false
-
1
)
;
for
(
uint32_t
i
=
0
;
i
<
aTransfers
.
Length
(
)
;
+
+
i
)
{
auto
&
items
=
aTransfers
[
i
]
.
items
(
)
;
for
(
uint32_t
j
=
0
;
j
<
items
.
Length
(
)
;
+
+
j
)
{
const
IPCDataTransferItem
&
item
=
items
[
j
]
;
RefPtr
<
nsVariantCC
>
variant
=
new
nsVariantCC
(
)
;
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TnsString
)
{
const
nsString
&
data
=
item
.
data
(
)
.
get_nsString
(
)
;
variant
-
>
SetAsAString
(
data
)
;
}
else
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TShmem
)
{
Shmem
data
=
item
.
data
(
)
.
get_Shmem
(
)
;
variant
-
>
SetAsACString
(
nsDependentCSubstring
(
data
.
get
<
char
>
(
)
data
.
Size
<
char
>
(
)
)
)
;
Unused
<
<
DeallocShmem
(
data
)
;
}
else
if
(
item
.
data
(
)
.
type
(
)
=
=
IPCDataTransferData
:
:
TIPCBlob
)
{
RefPtr
<
BlobImpl
>
blobImpl
=
IPCBlobUtils
:
:
Deserialize
(
item
.
data
(
)
.
get_IPCBlob
(
)
)
;
variant
-
>
SetAsISupports
(
blobImpl
)
;
}
else
{
continue
;
}
bool
hidden
=
hasFiles
&
&
item
.
data
(
)
.
type
(
)
!
=
IPCDataTransferData
:
:
TIPCBlob
;
dataTransfer
-
>
SetDataWithPrincipalFromOtherProcess
(
NS_ConvertUTF8toUTF16
(
item
.
flavor
(
)
)
variant
i
nsContentUtils
:
:
GetSystemPrincipal
(
)
hidden
)
;
}
}
session
-
>
SetDataTransfer
(
dataTransfer
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvEndDragSession
(
const
bool
&
aDoneDrag
const
bool
&
aUserCancelled
const
LayoutDeviceIntPoint
&
aDragEndPoint
const
uint32_t
&
aKeyModifiers
)
{
nsCOMPtr
<
nsIDragService
>
dragService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
if
(
dragService
)
{
if
(
aUserCancelled
)
{
nsCOMPtr
<
nsIDragSession
>
dragSession
=
nsContentUtils
:
:
GetDragSession
(
)
;
if
(
dragSession
)
{
dragSession
-
>
UserCancelled
(
)
;
}
}
static_cast
<
nsBaseDragService
*
>
(
dragService
.
get
(
)
)
-
>
SetDragEndPoint
(
aDragEndPoint
)
;
dragService
-
>
EndDragSession
(
aDoneDrag
aKeyModifiers
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPush
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessageId
)
{
PushMessageDispatcher
dispatcher
(
aScope
aPrincipal
aMessageId
Nothing
(
)
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPushWithData
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessageId
nsTArray
<
uint8_t
>
&
&
aData
)
{
PushMessageDispatcher
dispatcher
(
aScope
aPrincipal
aMessageId
Some
(
aData
)
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPushSubscriptionChange
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
)
{
PushSubscriptionChangeDispatcher
dispatcher
(
aScope
aPrincipal
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvPushError
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessage
const
uint32_t
&
aFlags
)
{
PushErrorDispatcher
dispatcher
(
aScope
aPrincipal
aMessage
aFlags
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvNotifyPushSubscriptionModifiedObservers
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
)
{
PushSubscriptionModifiedDispatcher
dispatcher
(
aScope
aPrincipal
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObservers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvBlobURLRegistration
(
const
nsCString
&
aURI
const
IPCBlob
&
aBlob
const
IPC
:
:
Principal
&
aPrincipal
)
{
RefPtr
<
BlobImpl
>
blobImpl
=
IPCBlobUtils
:
:
Deserialize
(
aBlob
)
;
MOZ_ASSERT
(
blobImpl
)
;
BlobURLProtocolHandler
:
:
AddDataEntry
(
aURI
aPrincipal
blobImpl
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvBlobURLUnregistration
(
const
nsCString
&
aURI
)
{
BlobURLProtocolHandler
:
:
RemoveDataEntry
(
aURI
false
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
bool
ContentChild
:
:
SendGetA11yContentId
(
)
{
return
PContentChild
:
:
SendGetA11yContentId
(
&
mMsaaID
)
;
}
#
endif
void
ContentChild
:
:
CreateGetFilesRequest
(
const
nsAString
&
aDirectoryPath
bool
aRecursiveFlag
nsID
&
aUUID
GetFilesHelperChild
*
aChild
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
!
mGetFilesPendingRequests
.
GetWeak
(
aUUID
)
)
;
Unused
<
<
SendGetFilesRequest
(
aUUID
nsString
(
aDirectoryPath
)
aRecursiveFlag
)
;
mGetFilesPendingRequests
.
Put
(
aUUID
aChild
)
;
}
void
ContentChild
:
:
DeleteGetFilesRequest
(
nsID
&
aUUID
GetFilesHelperChild
*
aChild
)
{
MOZ_ASSERT
(
aChild
)
;
MOZ_ASSERT
(
mGetFilesPendingRequests
.
GetWeak
(
aUUID
)
)
;
Unused
<
<
SendDeleteGetFilesRequest
(
aUUID
)
;
mGetFilesPendingRequests
.
Remove
(
aUUID
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGetFilesResponse
(
const
nsID
&
aUUID
const
GetFilesResponseResult
&
aResult
)
{
GetFilesHelperChild
*
child
=
mGetFilesPendingRequests
.
GetWeak
(
aUUID
)
;
if
(
!
child
)
{
return
IPC_OK
(
)
;
}
if
(
aResult
.
type
(
)
=
=
GetFilesResponseResult
:
:
TGetFilesResponseFailure
)
{
child
-
>
Finished
(
aResult
.
get_GetFilesResponseFailure
(
)
.
errorCode
(
)
)
;
}
else
{
MOZ_ASSERT
(
aResult
.
type
(
)
=
=
GetFilesResponseResult
:
:
TGetFilesResponseSuccess
)
;
const
nsTArray
<
IPCBlob
>
&
ipcBlobs
=
aResult
.
get_GetFilesResponseSuccess
(
)
.
blobs
(
)
;
bool
succeeded
=
true
;
for
(
uint32_t
i
=
0
;
succeeded
&
&
i
<
ipcBlobs
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
BlobImpl
>
impl
=
IPCBlobUtils
:
:
Deserialize
(
ipcBlobs
[
i
]
)
;
succeeded
=
child
-
>
AppendBlobImpl
(
impl
)
;
}
child
-
>
Finished
(
succeeded
?
NS_OK
:
NS_ERROR_OUT_OF_MEMORY
)
;
}
mGetFilesPendingRequests
.
Remove
(
aUUID
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
const
char
*
const
aErrorMsg
base
:
:
ProcessId
aOtherPid
)
{
if
(
aOtherPid
=
=
base
:
:
GetCurrentProcId
(
)
|
|
(
GetSingleton
(
)
&
&
GetSingleton
(
)
-
>
OtherPid
(
)
=
=
aOtherPid
)
)
{
mozilla
:
:
ipc
:
:
FatalError
(
aErrorMsg
false
)
;
}
else
{
nsAutoCString
formattedMessage
(
"
IPDL
error
:
\
"
"
)
;
formattedMessage
.
AppendASCII
(
aErrorMsg
)
;
formattedMessage
.
AppendLiteral
(
R
"
(
"
.
)
"
)
;
NS_WARNING
(
formattedMessage
.
get
(
)
)
;
}
}
PURLClassifierChild
*
ContentChild
:
:
AllocPURLClassifierChild
(
const
Principal
&
aPrincipal
bool
*
aSuccess
)
{
*
aSuccess
=
true
;
return
new
URLClassifierChild
(
)
;
}
bool
ContentChild
:
:
DeallocPURLClassifierChild
(
PURLClassifierChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
delete
aActor
;
return
true
;
}
PURLClassifierLocalChild
*
ContentChild
:
:
AllocPURLClassifierLocalChild
(
const
URIParams
&
aUri
const
nsTArray
<
IPCURLClassifierFeature
>
&
aFeatures
)
{
return
new
URLClassifierLocalChild
(
)
;
}
bool
ContentChild
:
:
DeallocPURLClassifierLocalChild
(
PURLClassifierLocalChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
delete
aActor
;
return
true
;
}
PLoginReputationChild
*
ContentChild
:
:
AllocPLoginReputationChild
(
const
URIParams
&
aUri
)
{
return
new
PLoginReputationChild
(
)
;
}
bool
ContentChild
:
:
DeallocPLoginReputationChild
(
PLoginReputationChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
delete
aActor
;
return
true
;
}
PSessionStorageObserverChild
*
ContentChild
:
:
AllocPSessionStorageObserverChild
(
)
{
MOZ_CRASH
(
"
PSessionStorageObserverChild
actors
should
be
manually
constructed
!
"
)
;
}
bool
ContentChild
:
:
DeallocPSessionStorageObserverChild
(
PSessionStorageObserverChild
*
aActor
)
{
MOZ_ASSERT
(
aActor
)
;
delete
aActor
;
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvActivate
(
PBrowserChild
*
aTab
)
{
BrowserChild
*
tab
=
static_cast
<
BrowserChild
*
>
(
aTab
)
;
return
tab
-
>
RecvActivate
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDeactivate
(
PBrowserChild
*
aTab
)
{
BrowserChild
*
tab
=
static_cast
<
BrowserChild
*
>
(
aTab
)
;
return
tab
-
>
RecvDeactivate
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvProvideAnonymousTemporaryFile
(
const
uint64_t
&
aID
const
FileDescOrError
&
aFDOrError
)
{
nsAutoPtr
<
AnonymousTemporaryFileCallback
>
callback
;
mPendingAnonymousTemporaryFiles
.
Remove
(
aID
&
callback
)
;
MOZ_ASSERT
(
callback
)
;
PRFileDesc
*
prfile
=
nullptr
;
if
(
aFDOrError
.
type
(
)
=
=
FileDescOrError
:
:
Tnsresult
)
{
DebugOnly
<
nsresult
>
rv
=
aFDOrError
.
get_nsresult
(
)
;
MOZ_ASSERT
(
NS_FAILED
(
rv
)
)
;
}
else
{
auto
rawFD
=
aFDOrError
.
get_FileDescriptor
(
)
.
ClonePlatformHandle
(
)
;
prfile
=
PR_ImportFile
(
PROsfd
(
rawFD
.
release
(
)
)
)
;
}
(
*
callback
)
(
prfile
)
;
return
IPC_OK
(
)
;
}
nsresult
ContentChild
:
:
AsyncOpenAnonymousTemporaryFile
(
const
AnonymousTemporaryFileCallback
&
aCallback
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
static
uint64_t
id
=
0
;
auto
newID
=
id
+
+
;
if
(
!
SendRequestAnonymousTemporaryFile
(
newID
)
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
!
mPendingAnonymousTemporaryFiles
.
Get
(
newID
)
)
;
mPendingAnonymousTemporaryFiles
.
LookupOrAdd
(
newID
aCallback
)
;
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetPermissionsWithKey
(
const
nsCString
&
aPermissionKey
nsTArray
<
IPC
:
:
Permission
>
&
&
aPerms
)
{
nsCOMPtr
<
nsIPermissionManager
>
permissionManager
=
services
:
:
GetPermissionManager
(
)
;
permissionManager
-
>
SetPermissionsWithKey
(
aPermissionKey
aPerms
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRefreshScreens
(
nsTArray
<
ScreenDetails
>
&
&
aScreens
)
{
ScreenManager
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screenManager
.
Refresh
(
std
:
:
move
(
aScreens
)
)
;
return
IPC_OK
(
)
;
}
already_AddRefed
<
nsIEventTarget
>
ContentChild
:
:
GetEventTargetFor
(
BrowserChild
*
aBrowserChild
)
{
return
IToplevelProtocol
:
:
GetActorEventTarget
(
aBrowserChild
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetPluginList
(
const
uint32_t
&
aPluginEpoch
nsTArray
<
plugins
:
:
PluginTag
>
&
&
aPluginTags
nsTArray
<
plugins
:
:
FakePluginTag
>
&
&
aFakePluginTags
)
{
RefPtr
<
nsPluginHost
>
host
=
nsPluginHost
:
:
GetInst
(
)
;
host
-
>
SetPluginsInContent
(
aPluginEpoch
aPluginTags
aFakePluginTags
)
;
return
IPC_OK
(
)
;
}
PClientOpenWindowOpChild
*
ContentChild
:
:
AllocPClientOpenWindowOpChild
(
const
ClientOpenWindowArgs
&
aArgs
)
{
return
AllocClientOpenWindowOpChild
(
)
;
}
IPCResult
ContentChild
:
:
RecvPClientOpenWindowOpConstructor
(
PClientOpenWindowOpChild
*
aActor
const
ClientOpenWindowArgs
&
aArgs
)
{
InitClientOpenWindowOpChild
(
aActor
aArgs
)
;
return
IPC_OK
(
)
;
}
bool
ContentChild
:
:
DeallocPClientOpenWindowOpChild
(
PClientOpenWindowOpChild
*
aActor
)
{
return
DeallocClientOpenWindowOpChild
(
aActor
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvShareCodeCoverageMutex
(
const
CrossProcessMutexHandle
&
aHandle
)
{
#
ifdef
MOZ_CODE_COVERAGE
CodeCoverageHandler
:
:
Init
(
aHandle
)
;
return
IPC_OK
(
)
;
#
else
MOZ_CRASH
(
"
Shouldn
'
t
receive
this
message
in
non
-
code
coverage
builds
!
"
)
;
#
endif
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvFlushCodeCoverageCounters
(
FlushCodeCoverageCountersResolver
&
&
aResolver
)
{
#
ifdef
MOZ_CODE_COVERAGE
CodeCoverageHandler
:
:
FlushCounters
(
)
;
aResolver
(
true
)
;
return
IPC_OK
(
)
;
#
else
MOZ_CRASH
(
"
Shouldn
'
t
receive
this
message
in
non
-
code
coverage
builds
!
"
)
;
#
endif
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvGetMemoryUniqueSetSize
(
GetMemoryUniqueSetSizeResolver
&
&
aResolver
)
{
MemoryTelemetry
:
:
Get
(
)
.
GetUniqueSetSize
(
std
:
:
move
(
aResolver
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSetInputEventQueueEnabled
(
)
{
nsThreadManager
:
:
get
(
)
.
EnableMainThreadEventPrioritization
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvFlushInputEventQueue
(
)
{
nsThreadManager
:
:
get
(
)
.
FlushInputEventPrioritization
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSuspendInputEventQueue
(
)
{
nsThreadManager
:
:
get
(
)
.
SuspendInputEventPrioritization
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvResumeInputEventQueue
(
)
{
nsThreadManager
:
:
get
(
)
.
ResumeInputEventPrioritization
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAddDynamicScalars
(
nsTArray
<
DynamicScalarDefinition
>
&
&
aDefs
)
{
TelemetryIPC
:
:
AddDynamicScalarDefinitions
(
aDefs
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvSaveRecording
(
const
FileDescriptor
&
aFile
)
{
recordreplay
:
:
parent
:
:
SaveRecording
(
aFile
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvCrossProcessRedirect
(
const
uint32_t
&
aRegistrarId
nsIURI
*
aURI
const
ReplacementChannelConfigInit
&
aConfig
const
Maybe
<
LoadInfoArgs
>
&
aLoadInfo
const
uint64_t
&
aChannelId
nsIURI
*
aOriginalURI
const
uint64_t
&
aIdentifier
const
uint32_t
&
aRedirectMode
CrossProcessRedirectResolver
&
&
aResolve
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
nsresult
rv
=
mozilla
:
:
ipc
:
:
LoadInfoArgsToLoadInfo
(
aLoadInfo
getter_AddRefs
(
loadInfo
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
LoadInfoArgsToLoadInfo
failed
"
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIChannel
>
newChannel
;
rv
=
NS_NewChannelInternal
(
getter_AddRefs
(
newChannel
)
aURI
loadInfo
)
;
RefPtr
<
HttpChannelChild
>
httpChild
=
do_QueryObject
(
newChannel
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
httpChild
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
NS_NewChannelInternal
failed
"
)
;
return
IPC_OK
(
)
;
}
auto
scopeExit
=
MakeScopeExit
(
[
&
]
(
)
{
rv
=
httpChild
-
>
CrossProcessRedirectFinished
(
rv
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
;
MOZ_ALWAYS_SUCCEEDS
(
newChannel
-
>
GetLoadInfo
(
getter_AddRefs
(
loadInfo
)
)
)
;
Maybe
<
LoadInfoArgs
>
loadInfoArgs
;
MOZ_ALWAYS_SUCCEEDS
(
mozilla
:
:
ipc
:
:
LoadInfoToLoadInfoArgs
(
loadInfo
&
loadInfoArgs
)
)
;
aResolve
(
Tuple
<
const
nsresult
&
const
Maybe
<
LoadInfoArgs
>
&
>
(
rv
loadInfoArgs
)
)
;
}
)
;
rv
=
httpChild
-
>
SetChannelId
(
aChannelId
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
rv
=
httpChild
-
>
SetOriginalURI
(
aOriginalURI
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
rv
=
httpChild
-
>
SetRedirectMode
(
aRedirectMode
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
HttpBaseChannel
:
:
ReplacementChannelConfig
config
(
aConfig
)
;
HttpBaseChannel
:
:
ConfigureReplacementChannel
(
newChannel
config
HttpBaseChannel
:
:
ConfigureReason
:
:
DocumentChannelReplacement
)
;
rv
=
httpChild
-
>
ConnectParent
(
aRegistrarId
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIChildProcessChannelListener
>
processListener
=
do_GetService
(
"
mozilla
.
org
/
network
/
childProcessChannelListener
;
1
"
)
;
rv
=
processListener
-
>
OnChannelReady
(
httpChild
aIdentifier
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvStartDelayedAutoplayMediaComponents
(
BrowsingContext
*
aContext
)
{
MOZ_ASSERT
(
aContext
)
;
aContext
-
>
StartDelayedAutoplayMediaComponents
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvUpdateMediaAction
(
BrowsingContext
*
aContext
MediaControlActions
aAction
)
{
MOZ_ASSERT
(
aContext
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aContext
-
>
GetDOMWindow
(
)
;
if
(
window
)
{
window
-
>
UpdateMediaAction
(
aAction
)
;
}
return
IPC_OK
(
)
;
}
already_AddRefed
<
nsIEventTarget
>
ContentChild
:
:
GetSpecificMessageEventTarget
(
const
Message
&
aMsg
)
{
switch
(
aMsg
.
type
(
)
)
{
case
PJavaScript
:
:
Msg_DropTemporaryStrongReferences__ID
:
case
PJavaScript
:
:
Msg_DropObject__ID
:
case
PContent
:
:
Msg_NotifyVisited__ID
:
case
PContent
:
:
Msg_DataStoragePut__ID
:
case
PContent
:
:
Msg_DataStorageRemove__ID
:
case
PContent
:
:
Msg_DataStorageClear__ID
:
case
PContent
:
:
Msg_BlobURLRegistration__ID
:
case
PContent
:
:
Msg_BlobURLUnregistration__ID
:
case
PContent
:
:
Msg_InitBlobURLs__ID
:
case
PContent
:
:
Msg_PIPCBlobInputStreamConstructor__ID
:
case
PContent
:
:
Msg_StoreAndBroadcastBlobURLRegistration__ID
:
return
do_AddRef
(
SystemGroup
:
:
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
case
PContent
:
:
Msg_ConstructBrowser__ID
:
{
ManagedEndpoint
<
PBrowserChild
>
endpoint
;
ManagedEndpoint
<
PWindowGlobalChild
>
windowGlobalEndpoint
;
TabId
tabId
sameTabGroupAs
;
PickleIterator
iter
(
aMsg
)
;
if
(
NS_WARN_IF
(
!
IPC
:
:
ReadParam
(
&
aMsg
&
iter
&
endpoint
)
)
)
{
return
nullptr
;
}
aMsg
.
IgnoreSentinel
(
&
iter
)
;
if
(
NS_WARN_IF
(
!
IPC
:
:
ReadParam
(
&
aMsg
&
iter
&
windowGlobalEndpoint
)
)
)
{
return
nullptr
;
}
aMsg
.
IgnoreSentinel
(
&
iter
)
;
if
(
NS_WARN_IF
(
!
IPC
:
:
ReadParam
(
&
aMsg
&
iter
&
tabId
)
)
)
{
return
nullptr
;
}
aMsg
.
IgnoreSentinel
(
&
iter
)
;
if
(
NS_WARN_IF
(
!
IPC
:
:
ReadParam
(
&
aMsg
&
iter
&
sameTabGroupAs
)
)
)
{
return
nullptr
;
}
if
(
sameTabGroupAs
)
{
return
nullptr
;
}
if
(
NS_WARN_IF
(
!
endpoint
.
IsValid
(
)
)
)
{
return
nullptr
;
}
RefPtr
<
TabGroup
>
tabGroup
=
new
TabGroup
(
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
tabGroup
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
SetEventTargetForRoute
(
*
endpoint
.
ActorId
(
)
target
)
;
return
target
.
forget
(
)
;
}
default
:
return
nullptr
;
}
}
void
ContentChild
:
:
OnChannelReceivedMessage
(
const
Message
&
aMsg
)
{
if
(
aMsg
.
is_sync
(
)
&
&
!
aMsg
.
is_reply
(
)
)
{
LSObject
:
:
OnSyncMessageReceived
(
)
;
}
#
ifdef
NIGHTLY_BUILD
if
(
nsContentUtils
:
:
IsMessageInputEvent
(
aMsg
)
)
{
mPendingInputEvents
+
+
;
}
#
endif
}
#
ifdef
NIGHTLY_BUILD
PContentChild
:
:
Result
ContentChild
:
:
OnMessageReceived
(
const
Message
&
aMsg
)
{
if
(
nsContentUtils
:
:
IsMessageInputEvent
(
aMsg
)
)
{
DebugOnly
<
uint32_t
>
prevEvts
=
mPendingInputEvents
-
-
;
MOZ_ASSERT
(
prevEvts
>
0
)
;
}
return
PContentChild
:
:
OnMessageReceived
(
aMsg
)
;
}
#
endif
PContentChild
:
:
Result
ContentChild
:
:
OnMessageReceived
(
const
Message
&
aMsg
Message
*
&
aReply
)
{
Result
result
=
PContentChild
:
:
OnMessageReceived
(
aMsg
aReply
)
;
if
(
aMsg
.
is_sync
(
)
)
{
MOZ_ASSERT
(
!
aMsg
.
is_reply
(
)
)
;
LSObject
:
:
OnSyncMessageHandled
(
)
;
}
return
result
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvAttachBrowsingContext
(
BrowsingContext
:
:
IPCInitializer
&
&
aInit
)
{
RefPtr
<
BrowsingContext
>
child
=
BrowsingContext
:
:
Get
(
aInit
.
mId
)
;
MOZ_RELEASE_ASSERT
(
!
child
|
|
child
-
>
IsCached
(
)
)
;
if
(
!
child
)
{
RefPtr
<
BrowsingContextGroup
>
group
=
BrowsingContextGroup
:
:
Select
(
aInit
.
mParentId
aInit
.
mOpenerId
)
;
child
=
BrowsingContext
:
:
CreateFromIPC
(
std
:
:
move
(
aInit
)
group
nullptr
)
;
}
child
-
>
Attach
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvDetachBrowsingContext
(
uint64_t
aContextId
DetachBrowsingContextResolver
&
&
aResolve
)
{
aResolve
(
true
)
;
RefPtr
<
BrowsingContext
>
context
=
BrowsingContext
:
:
Get
(
aContextId
)
;
if
(
context
)
{
context
-
>
Detach
(
true
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvCacheBrowsingContextChildren
(
BrowsingContext
*
aContext
)
{
MOZ_RELEASE_ASSERT
(
aContext
)
;
aContext
-
>
CacheChildren
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRestoreBrowsingContextChildren
(
BrowsingContext
*
aContext
BrowsingContext
:
:
Children
&
&
aChildren
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aContext
)
;
aContext
-
>
RestoreChildren
(
std
:
:
move
(
aChildren
)
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvRegisterBrowsingContextGroup
(
nsTArray
<
BrowsingContext
:
:
IPCInitializer
>
&
&
aInits
)
{
RefPtr
<
BrowsingContextGroup
>
group
=
new
BrowsingContextGroup
(
)
;
for
(
auto
&
init
:
aInits
)
{
#
ifdef
DEBUG
RefPtr
<
BrowsingContext
>
existing
=
BrowsingContext
:
:
Get
(
init
.
mId
)
;
MOZ_ASSERT
(
!
existing
"
BrowsingContext
must
not
exist
yet
!
"
)
;
RefPtr
<
BrowsingContext
>
parent
=
init
.
GetParent
(
)
;
MOZ_ASSERT_IF
(
parent
parent
-
>
Group
(
)
=
=
group
)
;
#
endif
bool
cached
=
init
.
mCached
;
RefPtr
<
BrowsingContext
>
ctxt
=
BrowsingContext
:
:
CreateFromIPC
(
std
:
:
move
(
init
)
group
nullptr
)
;
if
(
cached
)
{
ctxt
-
>
Group
(
)
-
>
CacheContext
(
ctxt
)
;
}
else
{
ctxt
-
>
Attach
(
true
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvWindowClose
(
BrowsingContext
*
aContext
bool
aTrustedCaller
)
{
if
(
!
aContext
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aContext
-
>
GetDOMWindow
(
)
;
if
(
!
window
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
a
context
without
a
window
"
)
)
;
return
IPC_OK
(
)
;
}
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
CloseOuter
(
aTrustedCaller
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvWindowFocus
(
BrowsingContext
*
aContext
)
{
if
(
!
aContext
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aContext
-
>
GetDOMWindow
(
)
;
if
(
!
window
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
a
context
without
a
window
"
)
)
;
return
IPC_OK
(
)
;
}
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
FocusOuter
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvWindowBlur
(
BrowsingContext
*
aContext
)
{
if
(
!
aContext
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aContext
-
>
GetDOMWindow
(
)
;
if
(
!
window
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
a
context
without
a
window
"
)
)
;
return
IPC_OK
(
)
;
}
nsGlobalWindowOuter
:
:
Cast
(
window
)
-
>
BlurOuter
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvWindowPostMessage
(
BrowsingContext
*
aContext
const
ClonedMessageData
&
aMessage
const
PostMessageData
&
aData
)
{
if
(
!
aContext
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
nsGlobalWindowOuter
>
window
=
nsGlobalWindowOuter
:
:
Cast
(
aContext
-
>
GetDOMWindow
(
)
)
;
if
(
!
window
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
a
context
without
a
window
"
)
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIPrincipal
>
providedPrincipal
;
if
(
!
window
-
>
GetPrincipalForPostMessage
(
aData
.
targetOrigin
(
)
aData
.
targetOriginURI
(
)
aData
.
callerPrincipal
(
)
*
aData
.
subjectPrincipal
(
)
getter_AddRefs
(
providedPrincipal
)
)
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
BrowsingContext
>
sourceBc
=
aData
.
source
(
)
;
RefPtr
<
PostMessageEvent
>
event
=
new
PostMessageEvent
(
sourceBc
aData
.
origin
(
)
window
providedPrincipal
aData
.
callerDocumentURI
(
)
aData
.
isFromPrivateWindow
(
)
)
;
event
-
>
UnpackFrom
(
aMessage
)
;
window
-
>
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvCommitBrowsingContextTransaction
(
BrowsingContext
*
aContext
BrowsingContext
:
:
Transaction
&
&
aTransaction
uint64_t
aEpoch
)
{
if
(
!
aContext
|
|
aContext
-
>
IsDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ChildIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
if
(
!
aTransaction
.
ValidateEpochs
(
aContext
aEpoch
)
)
{
return
IPC_FAIL
(
this
"
Invalid
BrowsingContext
transaction
from
Parent
"
)
;
}
aTransaction
.
Apply
(
aContext
)
;
return
IPC_OK
(
)
;
}
void
ContentChild
:
:
HoldBrowsingContextGroup
(
BrowsingContextGroup
*
aBCG
)
{
mBrowsingContextGroupHolder
.
AppendElement
(
aBCG
)
;
}
void
ContentChild
:
:
ReleaseBrowsingContextGroup
(
BrowsingContextGroup
*
aBCG
)
{
mBrowsingContextGroupHolder
.
RemoveElement
(
aBCG
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentChild
:
:
RecvScriptError
(
const
nsString
&
aMessage
const
nsString
&
aSourceName
const
nsString
&
aSourceLine
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColNumber
const
uint32_t
&
aFlags
const
nsCString
&
aCategory
const
bool
&
aFromPrivateWindow
const
uint64_t
&
aInnerWindowId
const
bool
&
aFromChromeContext
)
{
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIConsoleService
>
consoleService
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_FAIL
(
this
"
Failed
to
get
console
service
"
)
)
;
nsCOMPtr
<
nsIScriptError
>
scriptError
(
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
)
;
NS_ENSURE_TRUE
(
scriptError
IPC_FAIL
(
this
"
Failed
to
construct
nsIScriptError
"
)
)
;
scriptError
-
>
InitWithWindowID
(
aMessage
aSourceName
aSourceLine
aLineNumber
aColNumber
aFlags
aCategory
aInnerWindowId
aFromChromeContext
)
;
rv
=
consoleService
-
>
LogMessage
(
scriptError
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_FAIL
(
this
"
Failed
to
log
script
error
"
)
)
;
return
IPC_OK
(
)
;
}
}
#
if
defined
(
__OpenBSD__
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
<
unistd
.
h
>
static
LazyLogModule
sPledgeLog
(
"
SandboxPledge
"
)
;
bool
StartOpenBSDSandbox
(
GeckoProcessType
type
)
{
nsAutoCString
promisesString
;
nsAutoCString
processTypeString
;
switch
(
type
)
{
case
GeckoProcessType_Default
:
processTypeString
=
"
main
"
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
pledge
.
main
"
promisesString
)
;
break
;
case
GeckoProcessType_Content
:
processTypeString
=
"
content
"
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
pledge
.
content
"
promisesString
)
;
break
;
default
:
MOZ_ASSERT
(
false
"
unknown
process
type
"
)
;
return
false
;
}
;
if
(
pledge
(
promisesString
.
get
(
)
NULL
)
=
=
-
1
)
{
if
(
errno
=
=
EINVAL
)
{
MOZ_LOG
(
sPledgeLog
LogLevel
:
:
Error
(
"
pledge
promises
for
%
s
process
is
a
malformed
string
:
'
%
s
'
\
n
"
processTypeString
.
get
(
)
promisesString
.
get
(
)
)
)
;
}
else
if
(
errno
=
=
EPERM
)
{
MOZ_LOG
(
sPledgeLog
LogLevel
:
:
Error
(
"
pledge
promises
for
%
s
process
can
'
t
elevate
privileges
:
'
%
s
'
\
n
"
processTypeString
.
get
(
)
promisesString
.
get
(
)
)
)
;
}
return
false
;
}
else
{
MOZ_LOG
(
sPledgeLog
LogLevel
:
:
Debug
(
"
pledged
%
s
process
with
promises
:
'
%
s
'
\
n
"
processTypeString
.
get
(
)
promisesString
.
get
(
)
)
)
;
}
return
true
;
}
#
endif
#
if
!
defined
(
XP_WIN
)
bool
IsDevelopmentBuild
(
)
{
nsCOMPtr
<
nsIFile
>
path
=
mozilla
:
:
Omnijar
:
:
GetPath
(
mozilla
:
:
Omnijar
:
:
GRE
)
;
return
path
=
=
nullptr
;
}
#
endif
}
