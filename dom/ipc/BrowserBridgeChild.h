#
ifndef
mozilla_dom_BrowserBridgeChild_h
#
define
mozilla_dom_BrowserBridgeChild_h
#
include
"
mozilla
/
dom
/
PBrowserBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
RemoteIframeDocProxyAccessibleWrap
;
}
namespace
dom
{
class
BrowsingContext
;
class
ContentChild
;
class
BrowserBridgeChild
:
public
PBrowserBridgeChild
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
BrowserBridgeChild
)
;
BrowserChild
*
Manager
(
)
{
MOZ_ASSERT
(
mIPCOpen
)
;
return
static_cast
<
BrowserChild
*
>
(
PBrowserBridgeChild
:
:
Manager
(
)
)
;
}
mozilla
:
:
layers
:
:
LayersId
GetLayersId
(
)
{
return
mLayersId
;
}
nsFrameLoader
*
GetFrameLoader
(
)
const
{
return
mFrameLoader
;
}
BrowsingContext
*
GetBrowsingContext
(
)
{
return
mBrowsingContext
;
}
nsILoadContext
*
GetLoadContext
(
)
{
return
nullptr
;
}
void
NavigateByKey
(
bool
aForward
bool
aForDocumentNavigation
)
;
void
Activate
(
)
;
void
Deactivate
(
)
;
void
SetIsUnderHiddenEmbedderElement
(
bool
aIsUnderHiddenEmbedderElement
)
;
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
XP_WIN
)
a11y
:
:
RemoteIframeDocProxyAccessibleWrap
*
GetEmbeddedDocAccessible
(
)
{
return
mEmbeddedDocAccessible
;
}
#
endif
static
BrowserBridgeChild
*
GetFrom
(
nsFrameLoader
*
aFrameLoader
)
;
static
BrowserBridgeChild
*
GetFrom
(
nsIContent
*
aContent
)
;
protected
:
friend
class
ContentChild
;
friend
class
PBrowserBridgeChild
;
BrowserBridgeChild
(
nsFrameLoader
*
aFrameLoader
BrowsingContext
*
aBrowsingContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLayersId
(
const
mozilla
:
:
layers
:
:
LayersId
&
aLayersId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestFocus
(
const
bool
&
aCanRaise
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMoveFocus
(
const
bool
&
aForward
const
bool
&
aForDocumentNavigation
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetEmbeddedDocAccessibleCOMProxy
(
const
IDispatchHolder
&
aCOMProxy
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
BrowserBridgeChild
(
)
;
mozilla
:
:
layers
:
:
LayersId
mLayersId
;
bool
mIPCOpen
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
#
if
defined
(
ACCESSIBILITY
)
&
&
defined
(
XP_WIN
)
RefPtr
<
a11y
:
:
RemoteIframeDocProxyAccessibleWrap
>
mEmbeddedDocAccessible
;
#
endif
}
;
}
}
#
endif
