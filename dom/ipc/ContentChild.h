#
ifndef
mozilla_dom_ContentChild_h
#
define
mozilla_dom_ContentChild_h
#
include
"
base
/
shared_memory
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BrowserBridgeChild
.
h
"
#
include
"
mozilla
/
dom
/
PBrowserOrId
.
h
"
#
include
"
mozilla
/
dom
/
PContentChild
.
h
"
#
include
"
mozilla
/
dom
/
RemoteBrowser
.
h
"
#
include
"
mozilla
/
dom
/
CPOWManagerGetter
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
mozilla
/
jsipc
/
CrossProcessObjectWrappers
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsIWindowProvider
.
h
"
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
nsIFile
.
h
"
#
endif
struct
ChromePackage
;
class
nsIObserver
;
struct
SubstitutionMapping
;
struct
OverrideMapping
;
class
nsIDomainPolicy
;
class
nsIURIClassifierCallback
;
struct
LookAndFeelInt
;
class
nsDocShellLoadState
;
class
nsFrameLoader
;
namespace
mozilla
{
class
RemoteSpellcheckEngineChild
;
class
ChildProfilerController
;
class
BenchmarkStorageChild
;
using
mozilla
:
:
loader
:
:
PScriptCacheChild
;
#
if
!
defined
(
XP_WIN
)
bool
IsDevelopmentBuild
(
)
;
#
endif
namespace
ipc
{
class
URIParams
;
}
namespace
dom
{
namespace
ipc
{
class
SharedMap
;
}
class
AlertObserver
;
class
ConsoleListener
;
class
ClonedMessageData
;
class
BrowserChild
;
class
GetFilesHelperChild
;
class
TabContext
;
enum
class
MediaControlActions
:
uint32_t
;
class
ContentChild
final
:
public
PContentChild
public
nsIWindowProvider
public
CPOWManagerGetter
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
typedef
mozilla
:
:
dom
:
:
ClonedMessageData
ClonedMessageData
;
typedef
mozilla
:
:
ipc
:
:
FileDescriptor
FileDescriptor
;
typedef
mozilla
:
:
ipc
:
:
PFileDescriptorSetChild
PFileDescriptorSetChild
;
typedef
mozilla
:
:
ipc
:
:
URIParams
URIParams
;
friend
class
PContentChild
;
public
:
NS_DECL_NSIWINDOWPROVIDER
ContentChild
(
)
;
virtual
~
ContentChild
(
)
;
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
override
{
return
1
;
}
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
override
{
return
1
;
}
struct
AppInfo
{
nsCString
version
;
nsCString
buildID
;
nsCString
name
;
nsCString
UAName
;
nsCString
ID
;
nsCString
vendor
;
nsCString
sourceURL
;
}
;
nsresult
ProvideWindowCommon
(
BrowserChild
*
aTabOpener
mozIDOMWindowProxy
*
aParent
bool
aIframeMoz
uint32_t
aChromeFlags
bool
aCalledFromJS
bool
aPositionSpecified
bool
aSizeSpecified
nsIURI
*
aURI
const
nsAString
&
aName
const
nsACString
&
aFeatures
bool
aForceNoOpener
bool
aForceNoReferrer
nsDocShellLoadState
*
aLoadState
bool
*
aWindowIsNew
BrowsingContext
*
*
aReturn
)
;
bool
Init
(
MessageLoop
*
aIOLoop
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
IPC
:
:
Channel
*
aChannel
uint64_t
aChildID
bool
aIsForBrowser
)
;
void
InitXPCOM
(
const
XPCOMInitData
&
aXPCOMInit
const
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
&
aInitialData
)
;
void
InitSharedUASheets
(
const
Maybe
<
base
:
:
SharedMemoryHandle
>
&
aHandle
uintptr_t
aAddress
)
;
void
InitGraphicsDeviceData
(
const
ContentDeviceData
&
aData
)
;
static
ContentChild
*
GetSingleton
(
)
{
return
sSingleton
;
}
const
AppInfo
&
GetAppInfo
(
)
{
return
mAppInfo
;
}
void
SetProcessName
(
const
nsAString
&
aName
)
;
void
GetProcessName
(
nsAString
&
aName
)
const
;
void
GetProcessName
(
nsACString
&
aName
)
const
;
void
LaunchRDDProcess
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
void
GetProfileDir
(
nsIFile
*
*
aProfileDir
)
const
{
*
aProfileDir
=
mProfileDir
;
NS_IF_ADDREF
(
*
aProfileDir
)
;
}
void
SetProfileDir
(
nsIFile
*
aProfileDir
)
{
mProfileDir
=
aProfileDir
;
}
#
endif
bool
IsAlive
(
)
const
;
bool
IsShuttingDown
(
)
const
;
ipc
:
:
SharedMap
*
SharedData
(
)
{
return
mSharedData
;
}
;
static
void
AppendProcessId
(
nsACString
&
aName
)
;
static
void
UpdateCookieStatus
(
nsIChannel
*
aChannel
)
;
static
already_AddRefed
<
RemoteBrowser
>
CreateBrowser
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitGMPService
(
Endpoint
<
PGMPServiceChild
>
&
&
aGMPService
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGMPsChanged
(
nsTArray
<
GMPCapabilityData
>
&
&
capabilities
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitProcessHangMonitor
(
Endpoint
<
PProcessHangMonitorChild
>
&
&
aHangMonitor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitRendering
(
Endpoint
<
PCompositorManagerChild
>
&
&
aCompositor
Endpoint
<
PImageBridgeChild
>
&
&
aImageBridge
Endpoint
<
PVRManagerChild
>
&
&
aVRBridge
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
nsTArray
<
uint32_t
>
&
&
namespaces
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestPerformanceMetrics
(
const
nsID
&
aID
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReinitRendering
(
Endpoint
<
PCompositorManagerChild
>
&
&
aCompositor
Endpoint
<
PImageBridgeChild
>
&
&
aImageBridge
Endpoint
<
PVRManagerChild
>
&
&
aVRBridge
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
nsTArray
<
uint32_t
>
&
&
namespaces
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAudioDefaultDeviceChange
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReinitRenderingForDeviceReset
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetProcessSandbox
(
const
Maybe
<
FileDescriptor
>
&
aBroker
)
;
already_AddRefed
<
PIPCBlobInputStreamChild
>
AllocPIPCBlobInputStreamChild
(
const
nsID
&
aID
const
uint64_t
&
aSize
)
;
PHalChild
*
AllocPHalChild
(
)
;
bool
DeallocPHalChild
(
PHalChild
*
)
;
PHeapSnapshotTempFileHelperChild
*
AllocPHeapSnapshotTempFileHelperChild
(
)
;
bool
DeallocPHeapSnapshotTempFileHelperChild
(
PHeapSnapshotTempFileHelperChild
*
)
;
PCycleCollectWithLogsChild
*
AllocPCycleCollectWithLogsChild
(
const
bool
&
aDumpAllTraces
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
;
bool
DeallocPCycleCollectWithLogsChild
(
PCycleCollectWithLogsChild
*
aActor
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPCycleCollectWithLogsConstructor
(
PCycleCollectWithLogsChild
*
aChild
const
bool
&
aDumpAllTraces
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
override
;
PWebBrowserPersistDocumentChild
*
AllocPWebBrowserPersistDocumentChild
(
PBrowserChild
*
aBrowser
const
uint64_t
&
aOuterWindowID
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPWebBrowserPersistDocumentConstructor
(
PWebBrowserPersistDocumentChild
*
aActor
PBrowserChild
*
aBrowser
const
uint64_t
&
aOuterWindowID
)
override
;
bool
DeallocPWebBrowserPersistDocumentChild
(
PWebBrowserPersistDocumentChild
*
aActor
)
;
PTestShellChild
*
AllocPTestShellChild
(
)
;
bool
DeallocPTestShellChild
(
PTestShellChild
*
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPTestShellConstructor
(
PTestShellChild
*
)
override
;
PScriptCacheChild
*
AllocPScriptCacheChild
(
const
FileDescOrError
&
cacheFile
const
bool
&
wantCacheData
)
;
bool
DeallocPScriptCacheChild
(
PScriptCacheChild
*
)
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvPScriptCacheConstructor
(
PScriptCacheChild
*
const
FileDescOrError
&
cacheFile
const
bool
&
wantCacheData
)
override
;
jsipc
:
:
CPOWManager
*
GetCPOWManager
(
)
override
;
PNeckoChild
*
AllocPNeckoChild
(
)
;
bool
DeallocPNeckoChild
(
PNeckoChild
*
)
;
PPrintingChild
*
AllocPPrintingChild
(
)
;
bool
DeallocPPrintingChild
(
PPrintingChild
*
)
;
PChildToParentStreamChild
*
SendPChildToParentStreamConstructor
(
PChildToParentStreamChild
*
)
;
PChildToParentStreamChild
*
AllocPChildToParentStreamChild
(
)
;
bool
DeallocPChildToParentStreamChild
(
PChildToParentStreamChild
*
)
;
PParentToChildStreamChild
*
AllocPParentToChildStreamChild
(
)
;
bool
DeallocPParentToChildStreamChild
(
PParentToChildStreamChild
*
)
;
PPSMContentDownloaderChild
*
AllocPPSMContentDownloaderChild
(
const
uint32_t
&
aCertType
)
;
bool
DeallocPPSMContentDownloaderChild
(
PPSMContentDownloaderChild
*
aDownloader
)
;
PMediaChild
*
AllocPMediaChild
(
)
;
bool
DeallocPMediaChild
(
PMediaChild
*
aActor
)
;
PBenchmarkStorageChild
*
AllocPBenchmarkStorageChild
(
)
;
bool
DeallocPBenchmarkStorageChild
(
PBenchmarkStorageChild
*
aActor
)
;
PPresentationChild
*
AllocPPresentationChild
(
)
;
bool
DeallocPPresentationChild
(
PPresentationChild
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyPresentationReceiverLaunched
(
PBrowserChild
*
aIframe
const
nsString
&
aSessionId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyPresentationReceiverCleanUp
(
const
nsString
&
aSessionId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyEmptyHTTPCache
(
)
;
PSpeechSynthesisChild
*
AllocPSpeechSynthesisChild
(
)
;
bool
DeallocPSpeechSynthesisChild
(
PSpeechSynthesisChild
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRegisterChrome
(
nsTArray
<
ChromePackage
>
&
&
packages
nsTArray
<
SubstitutionMapping
>
&
&
resources
nsTArray
<
OverrideMapping
>
&
&
overrides
const
nsCString
&
locale
const
bool
&
reset
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRegisterChromeItem
(
const
ChromeRegistryItem
&
item
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvClearImageCache
(
const
bool
&
privateLoader
const
bool
&
chrome
)
;
mozilla
:
:
jsipc
:
:
PJavaScriptChild
*
AllocPJavaScriptChild
(
)
;
bool
DeallocPJavaScriptChild
(
mozilla
:
:
jsipc
:
:
PJavaScriptChild
*
)
;
PRemoteSpellcheckEngineChild
*
AllocPRemoteSpellcheckEngineChild
(
)
;
bool
DeallocPRemoteSpellcheckEngineChild
(
PRemoteSpellcheckEngineChild
*
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetOffline
(
const
bool
&
offline
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetConnectivity
(
const
bool
&
connectivity
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetCaptivePortalState
(
const
int32_t
&
state
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBidiKeyboardNotify
(
const
bool
&
isLangRTL
const
bool
&
haveBidiKeyboards
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyVisited
(
nsTArray
<
URIParams
>
&
&
aURIs
)
;
nsresult
AddRemoteAlertObserver
(
const
nsString
&
aData
nsIObserver
*
aObserver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreferenceUpdate
(
const
Pref
&
aPref
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvVarUpdate
(
const
GfxVarUpdate
&
pref
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdatePerfStatsCollectionMask
(
const
uint64_t
&
aMask
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCollectPerfStatsJSON
(
CollectPerfStatsJSONResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDataStoragePut
(
const
nsString
&
aFilename
const
DataStorageItem
&
aItem
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDataStorageRemove
(
const
nsString
&
aFilename
const
nsCString
&
aKey
const
DataStorageType
&
aType
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDataStorageClear
(
const
nsString
&
aFilename
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyAlertsObserver
(
const
nsCString
&
aType
const
nsString
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadProcessScript
(
const
nsString
&
aURL
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAsyncMessage
(
const
nsString
&
aMsg
nsTArray
<
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRegisterStringBundles
(
nsTArray
<
StringBundleDescriptor
>
&
&
stringBundles
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateSharedData
(
const
FileDescriptor
&
aMapFile
const
uint32_t
&
aMapSize
nsTArray
<
IPCBlob
>
&
&
aBlobs
nsTArray
<
nsCString
>
&
&
aChangedKeys
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFontListChanged
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGeolocationUpdate
(
nsIDOMGeoPosition
*
aPosition
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvGeolocationError
(
const
uint16_t
&
errorCode
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDictionaryList
(
nsTArray
<
nsString
>
&
&
aDictionaries
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateFontList
(
nsTArray
<
SystemFontListEntry
>
&
&
aFontList
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRebuildFontList
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateAppLocales
(
nsTArray
<
nsCString
>
&
&
aAppLocales
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateRequestedLocales
(
nsTArray
<
nsCString
>
&
&
aRequestedLocales
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddPermission
(
const
IPC
:
:
Permission
&
permission
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoveAllPermissions
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushMemory
(
const
nsString
&
reason
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvActivateA11y
(
const
uint32_t
&
aMainChromeTid
const
uint32_t
&
aMsaaID
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdownA11y
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGarbageCollect
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCycleCollect
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUnlinkGhosts
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAppInfo
(
const
nsCString
&
version
const
nsCString
&
buildID
const
nsCString
&
name
const
nsCString
&
UAName
const
nsCString
&
ID
const
nsCString
&
vendor
const
nsCString
&
sourceURL
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoteType
(
const
nsString
&
aRemoteType
)
;
const
nsAString
&
GetRemoteType
(
)
const
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitServiceWorkers
(
const
ServiceWorkerConfiguration
&
aConfig
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitBlobURLs
(
nsTArray
<
BlobURLRegistrationData
>
&
&
aRegistations
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitJSWindowActorInfos
(
nsTArray
<
JSWindowActorInfo
>
&
&
aInfos
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUnregisterJSWindowActor
(
const
nsString
&
aName
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLastPrivateDocShellDestroyed
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyProcessPriorityChanged
(
const
hal
:
:
ProcessPriority
&
aPriority
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMinimizeMemoryUsage
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadAndRegisterSheet
(
const
URIParams
&
aURI
const
uint32_t
&
aType
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUnregisterSheet
(
const
URIParams
&
aURI
const
uint32_t
&
aType
)
;
void
AddIdleObserver
(
nsIObserver
*
aObserver
uint32_t
aIdleTimeInS
)
;
void
RemoveIdleObserver
(
nsIObserver
*
aObserver
uint32_t
aIdleTimeInS
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyIdleObserver
(
const
uint64_t
&
aObserver
const
nsCString
&
aTopic
const
nsString
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateWindow
(
const
uintptr_t
&
aChildId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDomainSetChanged
(
const
uint32_t
&
aSetType
const
uint32_t
&
aChangeType
const
Maybe
<
URIParams
>
&
aDomain
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInvokeDragSession
(
nsTArray
<
IPCDataTransfer
>
&
&
aTransfers
const
uint32_t
&
aAction
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
mozilla
:
:
ipc
:
:
IPCResult
RecvEndDragSession
(
const
bool
&
aDoneDrag
const
bool
&
aUserCancelled
const
mozilla
:
:
LayoutDeviceIntPoint
&
aEndDragPoint
const
uint32_t
&
aKeyModifiers
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPush
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessageId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPushWithData
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessageId
nsTArray
<
uint8_t
>
&
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPushSubscriptionChange
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPushError
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
const
nsString
&
aMessage
const
uint32_t
&
aFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyPushSubscriptionModifiedObservers
(
const
nsCString
&
aScope
const
IPC
:
:
Principal
&
aPrincipal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvActivate
(
PBrowserChild
*
aTab
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeactivate
(
PBrowserChild
*
aTab
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRefreshScreens
(
nsTArray
<
ScreenDetails
>
&
&
aScreens
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNetworkLinkTypeChange
(
const
uint32_t
&
aType
)
;
uint32_t
NetworkLinkType
(
)
const
{
return
mNetworkLinkType
;
}
nsString
&
GetIndexedDBPath
(
)
;
ContentParentId
GetID
(
)
const
{
return
mID
;
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
uint32_t
GetChromeMainThreadId
(
)
const
{
return
mMainChromeTid
;
}
uint32_t
GetMsaaID
(
)
const
{
return
mMsaaID
;
}
#
endif
bool
IsForBrowser
(
)
const
{
return
mIsForBrowser
;
}
PFileDescriptorSetChild
*
SendPFileDescriptorSetConstructor
(
const
FileDescriptor
&
)
;
PFileDescriptorSetChild
*
AllocPFileDescriptorSetChild
(
const
FileDescriptor
&
)
;
bool
DeallocPFileDescriptorSetChild
(
PFileDescriptorSetChild
*
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvConstructBrowser
(
ManagedEndpoint
<
PBrowserChild
>
&
&
aBrowserEp
ManagedEndpoint
<
PWindowGlobalChild
>
&
&
aWindowEp
const
TabId
&
aTabId
const
TabId
&
aSameTabGroupAs
const
IPCTabContext
&
aContext
const
WindowGlobalInit
&
aWindowInit
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForBrowser
const
bool
&
aIsTopLevel
)
;
FORWARD_SHMEM_ALLOCATOR_TO
(
PContentChild
)
void
GetAvailableDictionaries
(
nsTArray
<
nsString
>
&
aDictionaries
)
;
PBrowserOrId
GetBrowserOrId
(
BrowserChild
*
aBrowserChild
)
;
PWebrtcGlobalChild
*
AllocPWebrtcGlobalChild
(
)
;
bool
DeallocPWebrtcGlobalChild
(
PWebrtcGlobalChild
*
aActor
)
;
PContentPermissionRequestChild
*
AllocPContentPermissionRequestChild
(
const
nsTArray
<
PermissionRequest
>
&
aRequests
const
IPC
:
:
Principal
&
aPrincipal
const
IPC
:
:
Principal
&
aTopLevelPrincipal
const
bool
&
aIsHandlingUserInput
const
bool
&
aDocumentHasUserInput
const
DOMTimeStamp
aPageLoadTimestamp
const
TabId
&
aTabId
)
;
bool
DeallocPContentPermissionRequestChild
(
PContentPermissionRequestChild
*
actor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetAudioSessionData
(
const
nsID
&
aId
const
nsString
&
aDisplayName
const
nsString
&
aIconPath
)
;
void
CreateGetFilesRequest
(
const
nsAString
&
aDirectoryPath
bool
aRecursiveFlag
nsID
&
aUUID
GetFilesHelperChild
*
aChild
)
;
void
DeleteGetFilesRequest
(
nsID
&
aUUID
GetFilesHelperChild
*
aChild
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetFilesResponse
(
const
nsID
&
aUUID
const
GetFilesResponseResult
&
aResult
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBlobURLRegistration
(
const
nsCString
&
aURI
const
IPCBlob
&
aBlob
const
IPC
:
:
Principal
&
aPrincipal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBlobURLUnregistration
(
const
nsCString
&
aURI
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestMemoryReport
(
const
uint32_t
&
generation
const
bool
&
anonymize
const
bool
&
minimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
DMDFile
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetXPCOMProcessAttributes
(
const
XPCOMInitData
&
aXPCOMInit
const
StructuredCloneData
&
aInitialData
nsTArray
<
LookAndFeelInt
>
&
&
aLookAndFeelIntCache
nsTArray
<
SystemFontListEntry
>
&
&
aFontList
const
Maybe
<
base
:
:
SharedMemoryHandle
>
&
aSharedUASheetHandle
const
uintptr_t
&
aSharedUASheetAddress
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvProvideAnonymousTemporaryFile
(
const
uint64_t
&
aID
const
FileDescOrError
&
aFD
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPermissionsWithKey
(
const
nsCString
&
aPermissionKey
nsTArray
<
IPC
:
:
Permission
>
&
&
aPerms
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShareCodeCoverageMutex
(
const
CrossProcessMutexHandle
&
aHandle
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushCodeCoverageCounters
(
FlushCodeCoverageCountersResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetMemoryUniqueSetSize
(
GetMemoryUniqueSetSizeResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetInputEventQueueEnabled
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFlushInputEventQueue
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSuspendInputEventQueue
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResumeInputEventQueue
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddDynamicScalars
(
nsTArray
<
DynamicScalarDefinition
>
&
&
aDefs
)
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
bool
SendGetA11yContentId
(
)
;
#
endif
nsTArray
<
mozilla
:
:
dom
:
:
SystemFontListEntry
>
&
SystemFontList
(
)
{
return
mFontList
;
}
PURLClassifierChild
*
AllocPURLClassifierChild
(
const
Principal
&
aPrincipal
bool
*
aSuccess
)
;
bool
DeallocPURLClassifierChild
(
PURLClassifierChild
*
aActor
)
;
PURLClassifierLocalChild
*
AllocPURLClassifierLocalChild
(
const
URIParams
&
aUri
const
nsTArray
<
IPCURLClassifierFeature
>
&
aFeatures
)
;
bool
DeallocPURLClassifierLocalChild
(
PURLClassifierLocalChild
*
aActor
)
;
PLoginReputationChild
*
AllocPLoginReputationChild
(
const
URIParams
&
aUri
)
;
bool
DeallocPLoginReputationChild
(
PLoginReputationChild
*
aActor
)
;
PSessionStorageObserverChild
*
AllocPSessionStorageObserverChild
(
)
;
bool
DeallocPSessionStorageObserverChild
(
PSessionStorageObserverChild
*
aActor
)
;
nsTArray
<
LookAndFeelInt
>
&
LookAndFeelCache
(
)
{
return
mLookAndFeelCache
;
}
static
void
FatalErrorIfNotUsingGPUProcess
(
const
char
*
const
aErrorMsg
base
:
:
ProcessId
aOtherPid
)
;
typedef
std
:
:
function
<
void
(
PRFileDesc
*
)
>
AnonymousTemporaryFileCallback
;
nsresult
AsyncOpenAnonymousTemporaryFile
(
const
AnonymousTemporaryFileCallback
&
aCallback
)
;
already_AddRefed
<
nsIEventTarget
>
GetEventTargetFor
(
BrowserChild
*
aBrowserChild
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPluginList
(
const
uint32_t
&
aPluginEpoch
nsTArray
<
PluginTag
>
&
&
aPluginTags
nsTArray
<
FakePluginTag
>
&
&
aFakePluginTags
)
;
PClientOpenWindowOpChild
*
AllocPClientOpenWindowOpChild
(
const
ClientOpenWindowArgs
&
aArgs
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPClientOpenWindowOpConstructor
(
PClientOpenWindowOpChild
*
aActor
const
ClientOpenWindowArgs
&
aArgs
)
override
;
bool
DeallocPClientOpenWindowOpChild
(
PClientOpenWindowOpChild
*
aActor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSaveRecording
(
const
FileDescriptor
&
aFile
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCrossProcessRedirect
(
const
uint32_t
&
aRegistrarId
nsIURI
*
aURI
const
ReplacementChannelConfigInit
&
aConfig
const
Maybe
<
LoadInfoArgs
>
&
aLoadInfoForwarder
const
uint64_t
&
aChannelId
nsIURI
*
aOriginalURI
const
uint64_t
&
aIdentifier
const
uint32_t
&
aRedirectMode
CrossProcessRedirectResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvStartDelayedAutoplayMediaComponents
(
BrowsingContext
*
aContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateMediaAction
(
BrowsingContext
*
aContext
MediaControlActions
aAction
)
;
void
HoldBrowsingContextGroup
(
BrowsingContextGroup
*
aBCG
)
;
void
ReleaseBrowsingContextGroup
(
BrowsingContextGroup
*
aBCG
)
;
uint64_t
GetBrowsingContextFieldEpoch
(
)
const
{
return
mBrowsingContextFieldEpoch
;
}
uint64_t
NextBrowsingContextFieldEpoch
(
)
{
mBrowsingContextFieldEpoch
+
+
;
return
mBrowsingContextFieldEpoch
;
}
#
ifdef
NIGHTLY_BUILD
uint32_t
GetPendingInputEvents
(
)
{
return
mPendingInputEvents
;
}
#
endif
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
MOZ_DEBUG
)
&
&
defined
(
ENABLE_TESTS
)
mozilla
:
:
ipc
:
:
IPCResult
RecvInitSandboxTesting
(
Endpoint
<
PSandboxTestingChild
>
&
&
aEndpoint
)
;
#
endif
private
:
static
void
ForceKillTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
StartForceKillTimer
(
)
;
void
ShutdownInternal
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
GetResultForRenderingInitFailure
(
base
:
:
ProcessId
aOtherPid
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
virtual
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
virtual
already_AddRefed
<
nsIEventTarget
>
GetSpecificMessageEventTarget
(
const
Message
&
aMsg
)
override
;
virtual
void
OnChannelReceivedMessage
(
const
Message
&
aMsg
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAttachBrowsingContext
(
BrowsingContext
:
:
IPCInitializer
&
&
aInit
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDetachBrowsingContext
(
uint64_t
aContextId
DetachBrowsingContextResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCacheBrowsingContextChildren
(
BrowsingContext
*
aContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRestoreBrowsingContextChildren
(
BrowsingContext
*
aContext
BrowsingContext
:
:
Children
&
&
aChildren
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRegisterBrowsingContextGroup
(
nsTArray
<
BrowsingContext
:
:
IPCInitializer
>
&
&
aInits
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvWindowClose
(
BrowsingContext
*
aContext
bool
aTrustedCaller
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvWindowFocus
(
BrowsingContext
*
aContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvWindowBlur
(
BrowsingContext
*
aContext
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvWindowPostMessage
(
BrowsingContext
*
aContext
const
ClonedMessageData
&
aMessage
const
PostMessageData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCommitBrowsingContextTransaction
(
BrowsingContext
*
aContext
BrowsingContext
:
:
Transaction
&
&
aTransaction
uint64_t
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvScriptError
(
const
nsString
&
aMessage
const
nsString
&
aSourceName
const
nsString
&
aSourceLine
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColNumber
const
uint32_t
&
aFlags
const
nsCString
&
aCategory
const
bool
&
aFromPrivateWindow
const
uint64_t
&
aInnerWindowId
const
bool
&
aFromChromeContext
)
;
#
ifdef
NIGHTLY_BUILD
virtual
PContentChild
:
:
Result
OnMessageReceived
(
const
Message
&
aMsg
)
override
;
#
else
using
PContentChild
:
:
OnMessageReceived
;
#
endif
virtual
PContentChild
:
:
Result
OnMessageReceived
(
const
Message
&
aMsg
Message
*
&
aReply
)
override
;
nsTArray
<
nsAutoPtr
<
AlertObserver
>
>
mAlertObservers
;
RefPtr
<
ConsoleListener
>
mConsoleListener
;
nsTHashtable
<
nsPtrHashKey
<
nsIObserver
>
>
mIdleObservers
;
nsTArray
<
nsString
>
mAvailableDictionaries
;
nsTArray
<
mozilla
:
:
dom
:
:
SystemFontListEntry
>
mFontList
;
nsTArray
<
LookAndFeelInt
>
mLookAndFeelCache
;
ContentParentId
mID
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
ACCESSIBILITY
)
uint32_t
mMainChromeTid
;
uint32_t
mMsaaID
;
#
endif
AppInfo
mAppInfo
;
bool
mIsForBrowser
;
nsString
mRemoteType
=
VoidString
(
)
;
bool
mIsAlive
;
nsString
mProcessName
;
static
ContentChild
*
sSingleton
;
class
ShutdownCanary
;
static
StaticAutoPtr
<
ShutdownCanary
>
sShutdownCanary
;
nsCOMPtr
<
nsIDomainPolicy
>
mPolicy
;
nsCOMPtr
<
nsITimer
>
mForceKillTimer
;
RefPtr
<
ipc
:
:
SharedMap
>
mSharedData
;
#
ifdef
MOZ_GECKO_PROFILER
RefPtr
<
ChildProfilerController
>
mProfilerController
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
nsCOMPtr
<
nsIFile
>
mProfileDir
;
#
endif
nsRefPtrHashtable
<
nsIDHashKey
GetFilesHelperChild
>
mGetFilesPendingRequests
;
nsClassHashtable
<
nsUint64HashKey
AnonymousTemporaryFileCallback
>
mPendingAnonymousTemporaryFiles
;
mozilla
:
:
Atomic
<
bool
>
mShuttingDown
;
#
ifdef
NIGHTLY_BUILD
mozilla
:
:
Atomic
<
uint32_t
>
mPendingInputEvents
;
#
endif
uint32_t
mNetworkLinkType
=
0
;
nsTArray
<
RefPtr
<
BrowsingContextGroup
>
>
mBrowsingContextGroupHolder
;
uint64_t
mBrowsingContextFieldEpoch
=
0
;
DISALLOW_EVIL_CONSTRUCTORS
(
ContentChild
)
;
}
;
}
}
#
endif
