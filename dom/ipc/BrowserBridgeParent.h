#
ifndef
mozilla_dom_BrowserBridgeParent_h
#
define
mozilla_dom_BrowserBridgeParent_h
#
include
"
mozilla
/
dom
/
PBrowserBridgeParent
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
namespace
mozilla
{
namespace
a11y
{
class
DocAccessibleParent
;
}
namespace
dom
{
class
BrowserParent
;
class
BrowserBridgeParent
:
public
PBrowserBridgeParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
BrowserBridgeParent
final
)
;
BrowserBridgeParent
(
)
;
nsresult
Init
(
const
nsString
&
aPresentationURL
const
nsString
&
aRemoteType
const
WindowGlobalInit
&
aWindowInit
uint32_t
aChromeFlags
TabId
aTabId
)
;
nsresult
InitWithProcess
(
ContentParent
*
aContentParent
const
nsString
&
aPresentationURL
const
WindowGlobalInit
&
aWindowInit
uint32_t
aChromeFlags
TabId
aTabId
)
;
BrowserParent
*
GetBrowserParent
(
)
{
return
mBrowserParent
;
}
CanonicalBrowsingContext
*
GetBrowsingContext
(
)
;
BrowserParent
*
Manager
(
)
;
#
if
defined
(
ACCESSIBILITY
)
Tuple
<
a11y
:
:
DocAccessibleParent
*
uint64_t
>
GetEmbedderAccessible
(
)
{
return
Tuple
<
a11y
:
:
DocAccessibleParent
*
uint64_t
>
(
mEmbedderAccessibleDoc
mEmbedderAccessibleID
)
;
}
#
endif
void
Destroy
(
)
;
protected
:
friend
class
PBrowserBridgeParent
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShow
(
const
ScreenIntSize
&
aSize
const
bool
&
aParentIsActive
const
nsSizeMode
&
aSizeMode
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURL
(
const
nsCString
&
aUrl
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvResumeLoad
(
uint64_t
aPendingSwitchID
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDimensions
(
const
DimensionInfo
&
aDimensions
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateEffects
(
const
EffectsInfo
&
aEffects
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRenderLayers
(
const
bool
&
aEnabled
const
LayersObserverEpoch
&
aEpoch
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNavigateByKey
(
const
bool
&
aForward
const
bool
&
aForDocumentNavigation
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDispatchSynthesizedMouseEvent
(
const
WidgetMouseEvent
&
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSkipBrowsingContextDetach
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvActivate
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeactivate
(
const
bool
&
aWindowLowering
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetIsUnderHiddenEmbedderElement
(
const
bool
&
aIsUnderHiddenEmbedderElement
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetEmbedderAccessible
(
PDocAccessibleParent
*
aDoc
uint64_t
aID
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
BrowserBridgeParent
(
)
;
RefPtr
<
BrowserParent
>
mBrowserParent
;
#
if
defined
(
ACCESSIBILITY
)
RefPtr
<
a11y
:
:
DocAccessibleParent
>
mEmbedderAccessibleDoc
;
uint64_t
mEmbedderAccessibleID
=
0
;
#
endif
}
;
}
}
#
endif
