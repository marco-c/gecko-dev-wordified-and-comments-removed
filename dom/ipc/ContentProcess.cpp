#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
ContentProcess
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
#
include
<
stdlib
.
h
>
#
endif
#
if
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryService
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
endif
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
namespace
mozilla
{
namespace
dom
{
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
static
bool
IsSandboxTempDirRequired
(
)
{
return
(
IsVistaOrLater
(
)
&
&
(
Preferences
:
:
GetInt
(
"
security
.
sandbox
.
content
.
level
"
)
>
=
1
)
)
;
}
static
void
SetTmpEnvironmentVariable
(
nsIFile
*
aValue
)
{
nsAutoString
fullTmpPath
;
nsresult
rv
=
aValue
-
>
GetPath
(
fullTmpPath
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
Unused
<
<
NS_WARN_IF
(
!
SetEnvironmentVariableW
(
L
"
TMP
"
fullTmpPath
.
get
(
)
)
)
;
Unused
<
<
NS_WARN_IF
(
!
SetEnvironmentVariableW
(
L
"
TEMP
"
fullTmpPath
.
get
(
)
)
)
;
}
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
static
bool
IsSandboxTempDirRequired
(
)
{
return
(
Preferences
:
:
GetInt
(
"
security
.
sandbox
.
content
.
level
"
)
>
=
1
)
;
}
static
void
SetTmpEnvironmentVariable
(
nsIFile
*
aValue
)
{
nsAutoCString
fullTmpPath
;
nsresult
rv
=
aValue
-
>
GetNativePath
(
fullTmpPath
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
Unused
<
<
NS_WARN_IF
(
setenv
(
"
TMPDIR
"
fullTmpPath
.
get
(
)
1
)
!
=
0
)
;
}
#
endif
#
if
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
static
void
SetUpSandboxEnvironment
(
)
{
MOZ_ASSERT
(
nsDirectoryService
:
:
gService
"
SetUpSandboxEnvironment
relies
on
nsDirectoryService
being
initialized
"
)
;
if
(
!
IsSandboxTempDirRequired
(
)
)
{
return
;
}
nsCOMPtr
<
nsIFile
>
sandboxedContentTemp
;
nsresult
rv
=
nsDirectoryService
:
:
gService
-
>
Get
(
NS_APP_CONTENT_PROCESS_TEMP_DIR
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
sandboxedContentTemp
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
Unused
<
<
nsDirectoryService
:
:
gService
-
>
Undefine
(
NS_OS_TEMP_DIR
)
;
rv
=
nsDirectoryService
:
:
gService
-
>
Set
(
NS_OS_TEMP_DIR
sandboxedContentTemp
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
SetTmpEnvironmentVariable
(
sandboxedContentTemp
)
;
}
#
endif
void
ContentProcess
:
:
SetAppDir
(
const
nsACString
&
aPath
)
{
mXREEmbed
.
SetAppDir
(
aPath
)
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
void
ContentProcess
:
:
SetProfile
(
const
nsACString
&
aProfile
)
{
bool
flag
;
nsresult
rv
=
XRE_GetFileFromPath
(
aProfile
.
BeginReading
(
)
getter_AddRefs
(
mProfileDir
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
NS_FAILED
(
mProfileDir
-
>
Exists
(
&
flag
)
)
|
|
!
flag
)
{
NS_WARNING
(
"
Invalid
profile
directory
passed
to
content
process
.
"
)
;
mProfileDir
=
nullptr
;
}
}
#
endif
bool
ContentProcess
:
:
Init
(
)
{
mContent
.
Init
(
IOThreadChild
:
:
message_loop
(
)
ParentPid
(
)
IOThreadChild
:
:
channel
(
)
)
;
mXREEmbed
.
Start
(
)
;
mContent
.
InitXPCOM
(
)
;
mContent
.
InitGraphicsDeviceData
(
)
;
#
if
(
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
mContent
.
SetProfileDir
(
mProfileDir
)
;
#
endif
#
if
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
SetUpSandboxEnvironment
(
)
;
#
endif
return
true
;
}
void
ContentProcess
:
:
CleanUp
(
)
{
mXREEmbed
.
Stop
(
)
;
}
}
}
