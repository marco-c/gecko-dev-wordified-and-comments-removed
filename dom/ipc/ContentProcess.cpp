#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
ContentProcess
.
h
"
#
include
"
base
/
shared_memory
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Scheduler
.
h
"
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
#
include
<
stdlib
.
h
>
#
endif
#
if
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryService
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
endif
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
namespace
mozilla
{
namespace
dom
{
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
static
void
SetTmpEnvironmentVariable
(
nsIFile
*
aValue
)
{
nsAutoString
fullTmpPath
;
nsresult
rv
=
aValue
-
>
GetPath
(
fullTmpPath
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
Unused
<
<
NS_WARN_IF
(
!
SetEnvironmentVariableW
(
L
"
TMP
"
fullTmpPath
.
get
(
)
)
)
;
Unused
<
<
NS_WARN_IF
(
!
SetEnvironmentVariableW
(
L
"
TEMP
"
fullTmpPath
.
get
(
)
)
)
;
}
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
static
void
SetUpSandboxEnvironment
(
)
{
MOZ_ASSERT
(
nsDirectoryService
:
:
gService
"
SetUpSandboxEnvironment
relies
on
nsDirectoryService
being
initialized
"
)
;
if
(
!
IsContentSandboxEnabled
(
)
)
{
return
;
}
nsCOMPtr
<
nsIFile
>
sandboxedContentTemp
;
nsresult
rv
=
nsDirectoryService
:
:
gService
-
>
Get
(
NS_APP_CONTENT_PROCESS_TEMP_DIR
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
sandboxedContentTemp
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
Unused
<
<
nsDirectoryService
:
:
gService
-
>
Undefine
(
NS_OS_TEMP_DIR
)
;
rv
=
nsDirectoryService
:
:
gService
-
>
Set
(
NS_OS_TEMP_DIR
sandboxedContentTemp
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
SetTmpEnvironmentVariable
(
sandboxedContentTemp
)
;
}
#
endif
#
ifdef
ANDROID
static
int
gPrefsFd
=
-
1
;
void
SetPrefsFd
(
int
aFd
)
{
gPrefsFd
=
aFd
;
}
#
endif
bool
ContentProcess
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
Maybe
<
uint64_t
>
childID
;
Maybe
<
bool
>
isForBrowser
;
Maybe
<
base
:
:
SharedMemoryHandle
>
prefsHandle
;
Maybe
<
size_t
>
prefsLen
;
Maybe
<
const
char
*
>
schedulerPrefs
;
Maybe
<
const
char
*
>
parentBuildID
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
nsCOMPtr
<
nsIFile
>
profileDir
;
#
endif
for
(
int
i
=
1
;
i
<
aArgc
;
i
+
+
)
{
if
(
!
aArgv
[
i
]
)
{
continue
;
}
if
(
strcmp
(
aArgv
[
i
]
"
-
appdir
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
nsDependentCString
appDir
(
aArgv
[
i
]
)
;
mXREEmbed
.
SetAppDir
(
appDir
)
;
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
childID
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
char
*
str
=
aArgv
[
i
]
;
childID
=
Some
(
strtoull
(
str
&
str
10
)
)
;
if
(
str
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
isForBrowser
"
)
=
=
0
)
{
isForBrowser
=
Some
(
true
)
;
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
notForBrowser
"
)
=
=
0
)
{
isForBrowser
=
Some
(
false
)
;
#
ifdef
XP_WIN
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
prefsHandle
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
char
*
str
=
aArgv
[
i
]
;
prefsHandle
=
Some
(
reinterpret_cast
<
HANDLE
>
(
strtoull
(
str
&
str
10
)
)
)
;
if
(
str
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
#
endif
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
prefsLen
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
char
*
str
=
aArgv
[
i
]
;
prefsLen
=
Some
(
strtoull
(
str
&
str
10
)
)
;
if
(
str
[
0
]
!
=
'
\
0
'
)
{
return
false
;
}
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
schedulerPrefs
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
schedulerPrefs
=
Some
(
aArgv
[
i
]
)
;
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
safeMode
"
)
=
=
0
)
{
gSafeMode
=
true
;
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
parentBuildID
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
parentBuildID
=
Some
(
aArgv
[
i
]
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
}
else
if
(
strcmp
(
aArgv
[
i
]
"
-
profile
"
)
=
=
0
)
{
if
(
+
+
i
=
=
aArgc
)
{
return
false
;
}
bool
flag
;
nsresult
rv
=
XRE_GetFileFromPath
(
aArgv
[
i
]
getter_AddRefs
(
profileDir
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
NS_FAILED
(
profileDir
-
>
Exists
(
&
flag
)
)
|
|
!
flag
)
{
NS_WARNING
(
"
Invalid
profile
directory
passed
to
content
process
.
"
)
;
profileDir
=
nullptr
;
}
#
endif
}
}
#
ifdef
ANDROID
MOZ_RELEASE_ASSERT
(
gPrefsFd
!
=
-
1
)
;
prefsHandle
=
Some
(
base
:
:
FileDescriptor
(
gPrefsFd
true
)
)
;
#
elif
XP_UNIX
prefsHandle
=
Some
(
base
:
:
FileDescriptor
(
kPrefsFileDescriptor
true
)
)
;
#
endif
if
(
childID
.
isNothing
(
)
|
|
isForBrowser
.
isNothing
(
)
|
|
prefsHandle
.
isNothing
(
)
|
|
prefsLen
.
isNothing
(
)
|
|
schedulerPrefs
.
isNothing
(
)
|
|
parentBuildID
.
isNothing
(
)
)
{
return
false
;
}
base
:
:
SharedMemory
shm
;
if
(
!
shm
.
SetHandle
(
*
prefsHandle
true
)
)
{
NS_ERROR
(
"
failed
to
open
shared
memory
in
the
child
"
)
;
return
false
;
}
if
(
!
shm
.
Map
(
*
prefsLen
)
)
{
NS_ERROR
(
"
failed
to
map
shared
memory
in
the
child
"
)
;
return
false
;
}
Preferences
:
:
DeserializePreferences
(
static_cast
<
char
*
>
(
shm
.
memory
(
)
)
*
prefsLen
)
;
Scheduler
:
:
SetPrefs
(
*
schedulerPrefs
)
;
mContent
.
Init
(
IOThreadChild
:
:
message_loop
(
)
ParentPid
(
)
*
parentBuildID
IOThreadChild
:
:
channel
(
)
*
childID
*
isForBrowser
)
;
mXREEmbed
.
Start
(
)
;
#
if
(
defined
(
XP_MACOSX
)
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
mContent
.
SetProfileDir
(
profileDir
)
;
#
endif
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_CONTENT_SANDBOX
)
SetUpSandboxEnvironment
(
)
;
#
endif
return
true
;
}
void
ContentProcess
:
:
CleanUp
(
)
{
mContent
.
ClearSharedData
(
)
;
mXREEmbed
.
Stop
(
)
;
}
}
}
