#
ifndef
mozilla_dom_StructuredCloneIPCHelper_h
#
define
mozilla_dom_StructuredCloneIPCHelper_h
#
include
"
mozilla
/
dom
/
StructuredCloneHelper
.
h
"
namespace
IPC
{
class
Message
;
}
namespace
mozilla
{
namespace
dom
{
class
StructuredCloneIPCHelper
:
public
StructuredCloneHelper
{
public
:
StructuredCloneIPCHelper
(
)
:
StructuredCloneHelper
(
StructuredCloneHelper
:
:
CloningSupported
StructuredCloneHelper
:
:
TransferringNotSupported
StructuredCloneHelper
:
:
DifferentProcess
)
mData
(
nullptr
)
mDataLength
(
0
)
mDataOwned
(
eNone
)
{
}
StructuredCloneIPCHelper
(
const
StructuredCloneIPCHelper
&
)
=
delete
;
~
StructuredCloneIPCHelper
(
)
{
if
(
mDataOwned
=
=
eJSAllocated
)
{
js_free
(
mData
)
;
}
}
StructuredCloneIPCHelper
&
operator
=
(
const
StructuredCloneIPCHelper
&
aOther
)
=
delete
;
const
nsTArray
<
nsRefPtr
<
BlobImpl
>
>
&
BlobImpls
(
)
const
{
return
mBlobImplArray
;
}
nsTArray
<
nsRefPtr
<
BlobImpl
>
>
&
BlobImpls
(
)
{
return
mBlobImplArray
;
}
bool
Copy
(
const
StructuredCloneIPCHelper
&
aHelper
)
;
void
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
Write
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
;
void
UseExternalData
(
uint64_t
*
aData
size_t
aDataLength
)
{
MOZ_ASSERT
(
!
mData
)
;
mData
=
aData
;
mDataLength
=
aDataLength
;
MOZ_ASSERT
(
mDataOwned
=
=
eNone
)
;
}
bool
CopyExternalData
(
const
void
*
aData
size_t
aDataLength
)
;
uint64_t
*
Data
(
)
const
{
return
mData
;
}
size_t
DataLength
(
)
const
{
return
mDataLength
;
}
void
WriteIPCParams
(
IPC
:
:
Message
*
aMessage
)
const
;
bool
ReadIPCParams
(
const
IPC
:
:
Message
*
aMessage
void
*
*
aIter
)
;
private
:
uint64_t
*
mData
;
size_t
mDataLength
;
enum
{
eNone
eJSAllocated
}
mDataOwned
;
}
;
}
}
#
endif
