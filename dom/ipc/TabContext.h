#
ifndef
mozilla_dom_TabContext_h
#
define
mozilla_dom_TabContext_h
#
include
"
mozIApplication
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPCTabContext
;
class
TabContext
{
public
:
TabContext
(
)
;
IPCTabContext
AsIPCTabContext
(
)
const
;
bool
IsBrowserElement
(
)
const
;
bool
IsBrowserOrApp
(
)
const
;
uint32_t
OwnAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetOwnApp
(
)
const
;
bool
HasOwnApp
(
)
const
;
uint32_t
BrowserOwnerAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetBrowserOwnerApp
(
)
const
;
bool
HasBrowserOwnerApp
(
)
const
;
uint32_t
AppOwnerAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetAppOwnerApp
(
)
const
;
bool
HasAppOwnerApp
(
)
const
;
uint32_t
OwnOrContainingAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetOwnOrContainingApp
(
)
const
;
bool
HasOwnOrContainingApp
(
)
const
;
const
OriginAttributes
&
OriginAttributesRef
(
)
const
;
const
nsACString
&
SignedPkgOriginNoSuffix
(
)
const
;
protected
:
friend
class
MaybeInvalidTabContext
;
bool
SetTabContext
(
const
TabContext
&
aContext
)
;
bool
SetTabContext
(
mozIApplication
*
aOwnApp
mozIApplication
*
aAppFrameOwnerApp
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aSignedPkgOriginNoSuffix
)
;
private
:
bool
mInitialized
;
nsCOMPtr
<
mozIApplication
>
mOwnApp
;
nsCOMPtr
<
mozIApplication
>
mContainingApp
;
uint32_t
mContainingAppId
;
OriginAttributes
mOriginAttributes
;
nsCString
mSignedPkgOriginNoSuffix
;
}
;
class
MutableTabContext
:
public
TabContext
{
public
:
bool
SetTabContext
(
const
TabContext
&
aContext
)
{
return
TabContext
:
:
SetTabContext
(
aContext
)
;
}
bool
SetTabContext
(
mozIApplication
*
aOwnApp
mozIApplication
*
aAppFrameOwnerApp
const
OriginAttributes
&
aOriginAttributes
const
nsACString
&
aSignedPkgOriginNoSuffix
=
EmptyCString
(
)
)
{
return
TabContext
:
:
SetTabContext
(
aOwnApp
aAppFrameOwnerApp
aOriginAttributes
aSignedPkgOriginNoSuffix
)
;
}
}
;
class
MaybeInvalidTabContext
{
public
:
explicit
MaybeInvalidTabContext
(
const
IPCTabContext
&
aContext
)
;
bool
IsValid
(
)
;
const
char
*
GetInvalidReason
(
)
;
const
TabContext
&
GetTabContext
(
)
;
private
:
MaybeInvalidTabContext
(
const
MaybeInvalidTabContext
&
)
=
delete
;
MaybeInvalidTabContext
&
operator
=
(
const
MaybeInvalidTabContext
&
)
=
delete
;
const
char
*
mInvalidReason
;
MutableTabContext
mTabContext
;
}
;
}
}
#
endif
