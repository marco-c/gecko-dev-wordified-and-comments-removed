#
ifndef
mozilla_dom_TabContext_h
#
define
mozilla_dom_TabContext_h
#
include
"
mozIApplication
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
namespace
mozilla
{
namespace
dom
{
class
IPCTabContext
;
class
TabContext
{
public
:
TabContext
(
)
;
IPCTabContext
AsIPCTabContext
(
)
const
;
bool
IsMozBrowserElement
(
)
const
;
bool
IsIsolatedMozBrowserElement
(
)
const
;
bool
IsMozBrowserOrApp
(
)
const
;
uint32_t
OwnAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetOwnApp
(
)
const
;
bool
HasOwnApp
(
)
const
;
uint32_t
BrowserOwnerAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetBrowserOwnerApp
(
)
const
;
bool
HasBrowserOwnerApp
(
)
const
;
uint32_t
AppOwnerAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetAppOwnerApp
(
)
const
;
bool
HasAppOwnerApp
(
)
const
;
uint32_t
OwnOrContainingAppId
(
)
const
;
already_AddRefed
<
mozIApplication
>
GetOwnOrContainingApp
(
)
const
;
bool
HasOwnOrContainingApp
(
)
const
;
const
DocShellOriginAttributes
&
OriginAttributesRef
(
)
const
;
const
nsACString
&
SignedPkgOriginNoSuffix
(
)
const
;
const
nsAString
&
PresentationURL
(
)
const
;
UIStateChangeType
ShowAccelerators
(
)
const
;
UIStateChangeType
ShowFocusRings
(
)
const
;
protected
:
friend
class
MaybeInvalidTabContext
;
bool
SetTabContext
(
const
TabContext
&
aContext
)
;
void
SetPrivateBrowsingAttributes
(
bool
aIsPrivateBrowsing
)
;
bool
SetTabContext
(
bool
aIsMozBrowserElement
bool
aIsPrerendered
mozIApplication
*
aOwnApp
mozIApplication
*
aAppFrameOwnerApp
UIStateChangeType
aShowAccelerators
UIStateChangeType
aShowFocusRings
const
DocShellOriginAttributes
&
aOriginAttributes
const
nsACString
&
aSignedPkgOriginNoSuffix
const
nsAString
&
aPresentationURL
)
;
bool
UpdateTabContextAfterSwap
(
const
TabContext
&
aContext
)
;
bool
mIsPrerendered
;
private
:
bool
mInitialized
;
bool
mIsMozBrowserElement
;
nsCOMPtr
<
mozIApplication
>
mOwnApp
;
nsCOMPtr
<
mozIApplication
>
mContainingApp
;
uint32_t
mContainingAppId
;
DocShellOriginAttributes
mOriginAttributes
;
nsCString
mSignedPkgOriginNoSuffix
;
nsString
mPresentationURL
;
UIStateChangeType
mShowAccelerators
;
UIStateChangeType
mShowFocusRings
;
}
;
class
MutableTabContext
:
public
TabContext
{
public
:
bool
SetTabContext
(
const
TabContext
&
aContext
)
{
return
TabContext
:
:
SetTabContext
(
aContext
)
;
}
bool
SetTabContext
(
bool
aIsMozBrowserElement
bool
aIsPrerendered
mozIApplication
*
aOwnApp
mozIApplication
*
aAppFrameOwnerApp
UIStateChangeType
aShowAccelerators
UIStateChangeType
aShowFocusRings
const
DocShellOriginAttributes
&
aOriginAttributes
const
nsACString
&
aSignedPkgOriginNoSuffix
=
EmptyCString
(
)
const
nsAString
&
aPresentationURL
=
EmptyString
(
)
)
{
return
TabContext
:
:
SetTabContext
(
aIsMozBrowserElement
aIsPrerendered
aOwnApp
aAppFrameOwnerApp
aShowAccelerators
aShowFocusRings
aOriginAttributes
aSignedPkgOriginNoSuffix
aPresentationURL
)
;
}
}
;
class
MaybeInvalidTabContext
{
public
:
explicit
MaybeInvalidTabContext
(
const
IPCTabContext
&
aContext
)
;
bool
IsValid
(
)
;
const
char
*
GetInvalidReason
(
)
;
const
TabContext
&
GetTabContext
(
)
;
private
:
MaybeInvalidTabContext
(
const
MaybeInvalidTabContext
&
)
=
delete
;
MaybeInvalidTabContext
&
operator
=
(
const
MaybeInvalidTabContext
&
)
=
delete
;
const
char
*
mInvalidReason
;
MutableTabContext
mTabContext
;
}
;
}
}
#
endif
