#
ifndef
mozilla_dom_URLClassifierChild_h
#
define
mozilla_dom_URLClassifierChild_h
#
include
"
mozilla
/
dom
/
PURLClassifierChild
.
h
"
#
include
"
mozilla
/
dom
/
PURLClassifierLocalChild
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierFeatureResult
.
h
"
#
include
"
nsIURIClassifier
.
h
"
#
include
"
nsIUrlClassifierFeature
.
h
"
namespace
mozilla
{
namespace
dom
{
class
URLClassifierChild
:
public
PURLClassifierChild
{
public
:
void
SetCallback
(
nsIURIClassifierCallback
*
aCallback
)
{
mCallback
=
aCallback
;
}
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
MaybeInfo
&
aInfo
const
nsresult
&
aResult
)
override
{
MOZ_ASSERT
(
mCallback
)
;
if
(
aInfo
.
type
(
)
=
=
MaybeInfo
:
:
TClassifierInfo
)
{
mCallback
-
>
OnClassifyComplete
(
aResult
aInfo
.
get_ClassifierInfo
(
)
.
list
(
)
aInfo
.
get_ClassifierInfo
(
)
.
provider
(
)
aInfo
.
get_ClassifierInfo
(
)
.
fullhash
(
)
)
;
}
return
IPC_OK
(
)
;
}
private
:
nsCOMPtr
<
nsIURIClassifierCallback
>
mCallback
;
}
;
class
URLClassifierLocalChild
:
public
PURLClassifierLocalChild
{
public
:
void
SetFeaturesAndCallback
(
const
nsTArray
<
RefPtr
<
nsIUrlClassifierFeature
>
>
&
aFeatures
nsIUrlClassifierFeatureCallback
*
aCallback
)
{
mCallback
=
aCallback
;
mFeatures
=
aFeatures
;
}
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
nsTArray
<
URLClassifierLocalResult
>
&
&
aResults
)
override
{
nsTArray
<
RefPtr
<
nsIUrlClassifierFeatureResult
>
>
finalResults
;
nsTArray
<
URLClassifierLocalResult
>
results
=
std
:
:
move
(
aResults
)
;
for
(
URLClassifierLocalResult
&
result
:
results
)
{
for
(
nsIUrlClassifierFeature
*
feature
:
mFeatures
)
{
nsAutoCString
name
;
nsresult
rv
=
feature
-
>
GetName
(
name
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
continue
;
}
if
(
result
.
featureName
(
)
!
=
name
)
{
continue
;
}
RefPtr
<
net
:
:
UrlClassifierFeatureResult
>
r
=
new
net
:
:
UrlClassifierFeatureResult
(
feature
result
.
matchingList
(
)
)
;
finalResults
.
AppendElement
(
r
)
;
break
;
}
}
mCallback
-
>
OnClassifyComplete
(
finalResults
)
;
return
IPC_OK
(
)
;
}
private
:
nsCOMPtr
<
nsIUrlClassifierFeatureCallback
>
mCallback
;
nsTArray
<
RefPtr
<
nsIUrlClassifierFeature
>
>
mFeatures
;
}
;
}
}
#
endif
