#
include
"
MMPrinter
.
h
"
namespace
mozilla
{
namespace
dom
{
LazyLogModule
MMPrinter
:
:
sMMLog
(
"
MessageManager
"
)
;
void
MMPrinter
:
:
PrintImpl
(
char
const
*
aLocation
const
nsAString
&
aMsg
ClonedMessageData
const
&
aData
)
{
NS_ConvertUTF16toUTF8
charMsg
(
aMsg
)
;
char
*
mmSkipLog
=
PR_GetEnv
(
"
MOZ_LOG_MESSAGEMANAGER_SKIP
"
)
;
if
(
mmSkipLog
&
&
strstr
(
mmSkipLog
charMsg
.
get
(
)
)
)
{
return
;
}
MOZ_LOG
(
MMPrinter
:
:
sMMLog
LogLevel
:
:
Debug
(
"
%
s
Message
:
%
s
in
process
type
:
%
s
"
aLocation
charMsg
.
get
(
)
XRE_ChildProcessTypeToString
(
XRE_GetProcessType
(
)
)
)
)
;
if
(
!
MOZ_LOG_TEST
(
sMMLog
LogLevel
:
:
Verbose
)
)
{
return
;
}
ErrorResult
rv
;
AutoJSAPI
jsapi
;
MOZ_ALWAYS_TRUE
(
jsapi
.
Init
(
xpc
:
:
UnprivilegedJunkScope
(
)
)
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
ipc
:
:
StructuredCloneData
data
;
ipc
:
:
UnpackClonedMessageDataForChild
(
aData
data
)
;
JS
:
:
RootedValue
scdContent
(
cx
)
;
data
.
Read
(
cx
&
scdContent
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
return
;
}
JS
:
:
RootedString
unevalObj
(
cx
JS_ValueToSource
(
cx
scdContent
)
)
;
nsAutoJSString
srcString
;
if
(
!
srcString
.
init
(
cx
unevalObj
)
)
return
;
MOZ_LOG
(
MMPrinter
:
:
sMMLog
LogLevel
:
:
Verbose
(
"
%
s
"
NS_ConvertUTF16toUTF8
(
srcString
)
.
get
(
)
)
)
;
return
;
}
}
}
