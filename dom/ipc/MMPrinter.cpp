#
include
"
MMPrinter
.
h
"
#
include
"
Logging
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
Bootstrap
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RandomNum
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
prenv
.
h
"
namespace
mozilla
:
:
dom
{
LazyLogModule
MMPrinter
:
:
sMMLog
(
"
MessageManager
"
)
;
Maybe
<
uint64_t
>
MMPrinter
:
:
PrintHeader
(
char
const
*
aLocation
const
nsAString
&
aMsg
)
{
NS_ConvertUTF16toUTF8
charMsg
(
aMsg
)
;
char
*
mmSkipLog
=
PR_GetEnv
(
"
MOZ_LOG_MESSAGEMANAGER_SKIP
"
)
;
if
(
mmSkipLog
&
&
strstr
(
mmSkipLog
charMsg
.
get
(
)
)
)
{
return
Nothing
(
)
;
}
uint64_t
aMsgId
=
RandomUint64OrDie
(
)
;
MOZ_LOG
(
MMPrinter
:
:
sMMLog
LogLevel
:
:
Debug
(
"
%
"
PRIu64
"
%
s
Message
:
%
s
in
process
type
:
%
s
"
aMsgId
aLocation
charMsg
.
get
(
)
XRE_GetProcessTypeString
(
)
)
)
;
return
Some
(
aMsgId
)
;
}
void
MMPrinter
:
:
PrintNoData
(
uint64_t
aMsgId
)
{
if
(
!
MOZ_LOG_TEST
(
sMMLog
LogLevel
:
:
Verbose
)
)
{
return
;
}
MOZ_LOG
(
MMPrinter
:
:
sMMLog
LogLevel
:
:
Verbose
(
"
%
"
PRIu64
"
(
No
Data
)
"
aMsgId
)
)
;
}
void
MMPrinter
:
:
PrintData
(
uint64_t
aMsgId
ClonedMessageData
const
&
aData
)
{
if
(
!
MOZ_LOG_TEST
(
sMMLog
LogLevel
:
:
Verbose
)
)
{
return
;
}
ErrorResult
rv
;
AutoJSAPI
jsapi
;
MOZ_ALWAYS_TRUE
(
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
ipc
:
:
StructuredCloneData
data
;
ipc
:
:
UnpackClonedMessageData
(
aData
data
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
scdContent
(
cx
)
;
data
.
Read
(
cx
&
scdContent
rv
)
;
if
(
rv
.
Failed
(
)
)
{
MMPrinter
:
:
PrintNoData
(
aMsgId
)
;
rv
.
SuppressException
(
)
;
return
;
}
JS
:
:
Rooted
<
JSString
*
>
unevalObj
(
cx
JS_ValueToSource
(
cx
scdContent
)
)
;
nsAutoJSString
srcString
;
if
(
!
srcString
.
init
(
cx
unevalObj
)
)
return
;
MOZ_LOG
(
MMPrinter
:
:
sMMLog
LogLevel
:
:
Verbose
(
"
%
"
PRIu64
"
%
s
"
aMsgId
NS_ConvertUTF16toUTF8
(
srcString
)
.
get
(
)
)
)
;
}
}
