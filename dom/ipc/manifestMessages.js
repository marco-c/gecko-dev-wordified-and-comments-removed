"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ManifestObtainer
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ManifestFinder
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
MessageHandler
=
{
registerListeners
(
)
{
addMessageListener
(
"
DOM
:
WebManifest
:
hasManifestLink
"
this
.
hasManifestLink
.
bind
(
this
)
)
;
addMessageListener
(
"
DOM
:
ManifestObtainer
:
Obtain
"
this
.
obtainManifest
.
bind
(
this
)
)
;
addMessageListener
(
"
DOM
:
Manifest
:
FireInstallEvent
"
this
.
fireInstallEvent
.
bind
(
this
)
)
;
}
hasManifestLink
(
{
data
:
{
id
}
}
)
{
const
response
=
makeMsgResponse
(
id
)
;
response
.
result
=
ManifestFinder
.
contentHasManifestLink
(
content
)
;
response
.
success
=
true
;
sendAsyncMessage
(
"
DOM
:
WebManifest
:
hasManifestLink
"
response
)
;
}
obtainManifest
:
Task
.
async
(
function
*
(
{
data
:
{
id
}
}
)
{
const
response
=
makeMsgResponse
(
id
)
;
try
{
response
.
result
=
yield
ManifestObtainer
.
contentObtainManifest
(
content
)
;
response
.
success
=
true
;
}
catch
(
err
)
{
response
.
result
=
serializeError
(
err
)
;
}
sendAsyncMessage
(
"
DOM
:
ManifestObtainer
:
Obtain
"
response
)
;
}
)
fireInstallEvent
(
{
data
:
{
id
}
}
)
{
const
ev
=
new
Event
(
"
install
"
)
;
const
response
=
makeMsgResponse
(
id
)
;
if
(
!
content
|
|
content
.
top
!
=
=
content
)
{
const
msg
=
"
Can
only
dispatch
install
event
on
top
-
level
browsing
contexts
.
"
;
response
.
result
=
serializeError
(
new
Error
(
msg
)
)
;
}
else
{
response
.
success
=
true
;
content
.
dispatchEvent
(
ev
)
;
}
sendAsyncMessage
(
"
DOM
:
Manifest
:
FireInstallEvent
"
response
)
;
}
}
;
function
serializeError
(
aError
)
{
const
clone
=
{
"
fileName
"
:
aError
.
fileName
"
lineNumber
"
:
aError
.
lineNumber
"
columnNumber
"
:
aError
.
columnNumber
"
stack
"
:
aError
.
stack
"
message
"
:
aError
.
message
"
name
"
:
aError
.
name
}
;
return
clone
;
}
function
makeMsgResponse
(
aId
)
{
return
{
id
:
aId
success
:
false
result
:
undefined
}
;
}
MessageHandler
.
registerListeners
(
)
;
