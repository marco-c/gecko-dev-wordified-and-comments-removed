#
include
"
VsyncParent
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
VsyncSource
.
h
"
#
include
"
nsIThread
.
h
"
namespace
mozilla
:
:
dom
{
VsyncParent
:
:
VsyncParent
(
)
:
mObservingVsync
(
false
)
mDestroyed
(
false
)
mInitialThread
(
NS_GetCurrentThread
(
)
)
{
}
void
VsyncParent
:
:
UpdateVsyncSource
(
const
RefPtr
<
gfx
:
:
VsyncSource
>
&
aVsyncSource
)
{
mVsyncSource
=
aVsyncSource
;
if
(
!
mVsyncSource
)
{
mVsyncSource
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
GetHardwareVsync
(
)
;
}
if
(
mObservingVsync
&
&
mVsyncDispatcher
)
{
mVsyncDispatcher
-
>
RemoveVsyncObserver
(
this
)
;
}
mVsyncDispatcher
=
mVsyncSource
-
>
GetRefreshTimerVsyncDispatcher
(
)
;
if
(
mObservingVsync
)
{
mVsyncDispatcher
-
>
AddVsyncObserver
(
this
)
;
}
}
bool
VsyncParent
:
:
NotifyVsync
(
const
VsyncEvent
&
aVsync
)
{
if
(
IsOnInitialThread
(
)
)
{
DispatchVsyncEvent
(
aVsync
)
;
return
true
;
}
nsCOMPtr
<
nsIRunnable
>
vsyncEvent
=
NewRunnableMethod
<
VsyncEvent
>
(
"
dom
:
:
VsyncParent
:
:
DispatchVsyncEvent
"
this
&
VsyncParent
:
:
DispatchVsyncEvent
aVsync
)
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToThreadQueue
(
vsyncEvent
.
forget
(
)
mInitialThread
EventQueuePriority
:
:
Vsync
)
)
;
return
true
;
}
void
VsyncParent
:
:
DispatchVsyncEvent
(
const
VsyncEvent
&
aVsync
)
{
AssertIsOnInitialThread
(
)
;
if
(
mObservingVsync
&
&
!
mDestroyed
)
{
TimeDuration
vsyncRate
=
mVsyncSource
-
>
GetVsyncRate
(
)
;
Unused
<
<
SendNotify
(
aVsync
vsyncRate
.
ToMilliseconds
(
)
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
VsyncParent
:
:
RecvObserve
(
)
{
AssertIsOnInitialThread
(
)
;
if
(
!
mObservingVsync
)
{
if
(
mVsyncDispatcher
)
{
mVsyncDispatcher
-
>
AddVsyncObserver
(
this
)
;
}
mObservingVsync
=
true
;
return
IPC_OK
(
)
;
}
return
IPC_FAIL_NO_REASON
(
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
VsyncParent
:
:
RecvUnobserve
(
)
{
AssertIsOnInitialThread
(
)
;
if
(
mObservingVsync
)
{
if
(
mVsyncDispatcher
)
{
mVsyncDispatcher
-
>
RemoveVsyncObserver
(
this
)
;
}
mObservingVsync
=
false
;
return
IPC_OK
(
)
;
}
return
IPC_FAIL_NO_REASON
(
this
)
;
}
void
VsyncParent
:
:
ActorDestroy
(
ActorDestroyReason
aActorDestroyReason
)
{
MOZ_ASSERT
(
!
mDestroyed
)
;
AssertIsOnInitialThread
(
)
;
if
(
mObservingVsync
&
&
mVsyncDispatcher
)
{
mVsyncDispatcher
-
>
RemoveVsyncObserver
(
this
)
;
}
mVsyncDispatcher
=
nullptr
;
mDestroyed
=
true
;
}
bool
VsyncParent
:
:
IsOnInitialThread
(
)
{
return
NS_GetCurrentThread
(
)
=
=
mInitialThread
;
}
void
VsyncParent
:
:
AssertIsOnInitialThread
(
)
{
MOZ_ASSERT
(
IsOnInitialThread
(
)
)
;
}
}
