#
ifndef
mozilla_dom_RemoteFrameChild_h
#
define
mozilla_dom_RemoteFrameChild_h
#
include
"
mozilla
/
dom
/
PRemoteFrameChild
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
RemoteFrameChild
:
public
PRemoteFrameChild
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteFrameChild
)
;
TabChild
*
Manager
(
)
{
MOZ_ASSERT
(
mIPCOpen
)
;
return
static_cast
<
TabChild
*
>
(
PRemoteFrameChild
:
:
Manager
(
)
)
;
}
mozilla
:
:
layers
:
:
LayersId
GetLayersId
(
)
{
return
mLayersId
;
}
BrowsingContext
*
GetBrowsingContext
(
)
{
return
mBrowsingContext
;
}
nsILoadContext
*
GetLoadContext
(
)
{
return
nullptr
;
}
static
already_AddRefed
<
RemoteFrameChild
>
Create
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
)
;
void
UpdateDimensions
(
const
nsIntRect
&
aRect
const
mozilla
:
:
ScreenIntSize
&
aSize
)
;
protected
:
friend
class
PRemoteFrameChild
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLayersId
(
const
mozilla
:
:
layers
:
:
LayersId
&
aLayersId
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
explicit
RemoteFrameChild
(
nsFrameLoader
*
aFrameLoader
BrowsingContext
*
aBrowsingContext
)
;
~
RemoteFrameChild
(
)
;
mozilla
:
:
layers
:
:
LayersId
mLayersId
;
bool
mIPCOpen
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
RefPtr
<
BrowsingContext
>
mBrowsingContext
;
}
;
}
}
#
endif
