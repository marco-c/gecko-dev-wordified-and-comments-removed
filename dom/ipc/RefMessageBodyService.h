#
ifndef
mozilla_dom_RefMessageBodyService_h
#
define
mozilla_dom_RefMessageBodyService_h
#
include
<
cstdint
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
JS
{
class
CloneDataPolicy
;
}
namespace
mozilla
{
class
ErrorResult
;
template
<
class
T
>
class
OwningNonNull
;
namespace
dom
{
class
MessagePort
;
template
<
typename
T
>
class
Sequence
;
namespace
ipc
{
class
StructuredCloneData
;
}
class
RefMessageBody
final
{
friend
class
RefMessageBodyService
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefMessageBody
)
RefMessageBody
(
const
nsID
&
aPortID
UniquePtr
<
ipc
:
:
StructuredCloneData
>
&
&
aCloneData
)
;
const
nsID
&
PortID
(
)
const
{
return
mPortID
;
}
void
Read
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
const
JS
:
:
CloneDataPolicy
&
aCloneDataPolicy
ErrorResult
&
aRv
)
;
bool
TakeTransferredPortsAsSequence
(
Sequence
<
OwningNonNull
<
mozilla
:
:
dom
:
:
MessagePort
>
>
&
aPorts
)
;
private
:
~
RefMessageBody
(
)
;
const
nsID
mPortID
;
Mutex
mMutex
;
UniquePtr
<
ipc
:
:
StructuredCloneData
>
mCloneData
;
Maybe
<
uint32_t
>
mMaxCount
;
uint32_t
mCount
;
}
;
class
RefMessageBodyService
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefMessageBodyService
)
static
already_AddRefed
<
RefMessageBodyService
>
GetOrCreate
(
)
;
void
ForgetPort
(
const
nsID
&
aPortID
)
;
const
nsID
Register
(
already_AddRefed
<
RefMessageBody
>
aBody
ErrorResult
&
aRv
)
;
already_AddRefed
<
RefMessageBody
>
Steal
(
const
nsID
&
aID
)
;
already_AddRefed
<
RefMessageBody
>
GetAndCount
(
const
nsID
&
aID
)
;
void
SetMaxCount
(
const
nsID
&
aID
uint32_t
aMaxCount
)
;
private
:
RefMessageBodyService
(
)
;
~
RefMessageBodyService
(
)
;
static
RefMessageBodyService
*
GetOrCreateInternal
(
const
StaticMutexAutoLock
&
aProofOfLock
)
;
nsRefPtrHashtable
<
nsIDHashKey
RefMessageBody
>
mMessages
;
}
;
}
}
#
endif
