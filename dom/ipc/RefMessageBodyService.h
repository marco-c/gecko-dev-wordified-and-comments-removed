#
ifndef
mozilla_dom_RefMessageBodyService_h
#
define
mozilla_dom_RefMessageBodyService_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RefMessageBody
final
{
friend
class
RefMessageBodyService
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefMessageBody
)
RefMessageBody
(
const
nsID
&
aPortID
UniquePtr
<
ipc
:
:
StructuredCloneData
>
&
&
aCloneData
)
:
mPortID
(
aPortID
)
mCloneData
(
std
:
:
move
(
aCloneData
)
)
mMaxCount
(
Nothing
(
)
)
mCount
(
0
)
{
}
const
nsID
&
PortID
(
)
const
{
return
mPortID
;
}
ipc
:
:
StructuredCloneData
*
CloneData
(
)
{
return
mCloneData
.
get
(
)
;
}
private
:
~
RefMessageBody
(
)
=
default
;
const
nsID
mPortID
;
UniquePtr
<
ipc
:
:
StructuredCloneData
>
mCloneData
;
Maybe
<
uint32_t
>
mMaxCount
;
uint32_t
mCount
;
}
;
class
RefMessageBodyService
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RefMessageBodyService
)
static
already_AddRefed
<
RefMessageBodyService
>
GetOrCreate
(
)
;
void
ForgetPort
(
const
nsID
&
aPortID
)
;
const
nsID
Register
(
already_AddRefed
<
RefMessageBody
>
aBody
ErrorResult
&
aRv
)
;
already_AddRefed
<
RefMessageBody
>
Steal
(
const
nsID
&
aID
)
;
already_AddRefed
<
RefMessageBody
>
GetAndCount
(
const
nsID
&
aID
)
;
void
SetMaxCount
(
const
nsID
&
aID
uint32_t
aMaxCount
)
;
private
:
RefMessageBodyService
(
)
;
~
RefMessageBodyService
(
)
;
static
RefMessageBodyService
*
GetOrCreateInternal
(
const
StaticMutexAutoLock
&
aProofOfLock
)
;
nsRefPtrHashtable
<
nsIDHashKey
RefMessageBody
>
mMessages
;
}
;
}
}
#
endif
