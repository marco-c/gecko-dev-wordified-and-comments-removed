#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
ipc
/
InProcessParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
WindowGlobalParent
:
:
WindowGlobalParent
(
const
WindowGlobalInit
&
aInit
bool
aInProcess
)
:
mBrowsingContextId
(
aInit
.
browsingContextId
(
)
)
mDocumentPrincipal
(
aInit
.
principal
(
)
)
mInProcess
(
aInProcess
)
mIPCClosed
(
false
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
Parent
process
only
"
)
;
MOZ_RELEASE_ASSERT
(
mDocumentPrincipal
"
Must
have
a
valid
principal
"
)
;
MOZ_RELEASE_ASSERT
(
mBrowsingContextId
!
=
0
"
Must
be
made
in
BrowsingContext
"
)
;
}
void
WindowGlobalParent
:
:
Init
(
)
{
MOZ_ASSERT
(
Manager
(
)
"
Should
have
a
manager
!
"
)
;
MOZ_ASSERT
(
!
mFrameLoader
"
Cannot
Init
(
)
a
WindowGlobalParent
twice
!
"
)
;
RefPtr
<
Element
>
frameElement
;
if
(
mInProcess
)
{
MOZ_ASSERT
(
Manager
(
)
-
>
GetProtocolTypeId
(
)
=
=
PInProcessMsgStart
)
;
RefPtr
<
WindowGlobalChild
>
otherSide
=
GetOtherSide
(
)
;
if
(
otherSide
&
&
otherSide
-
>
WindowGlobal
(
)
)
{
RefPtr
<
nsDocShell
>
docShell
=
nsDocShell
:
:
Cast
(
otherSide
-
>
WindowGlobal
(
)
-
>
GetDocShell
(
)
)
;
if
(
docShell
)
{
docShell
-
>
GetTopFrameElement
(
getter_AddRefs
(
frameElement
)
)
;
}
}
}
else
{
MOZ_ASSERT
(
Manager
(
)
-
>
GetProtocolTypeId
(
)
=
=
PBrowserMsgStart
)
;
frameElement
=
static_cast
<
TabParent
*
>
(
Manager
(
)
)
-
>
GetOwnerElement
(
)
;
}
nsCOMPtr
<
nsIFrameLoaderOwner
>
flOwner
=
do_QueryInterface
(
frameElement
)
;
if
(
flOwner
)
{
mFrameLoader
=
flOwner
-
>
GetFrameLoader
(
)
;
}
}
already_AddRefed
<
dom
:
:
BrowsingContext
>
WindowGlobalParent
:
:
BrowsingContext
(
)
{
return
dom
:
:
BrowsingContext
:
:
Get
(
mBrowsingContextId
)
;
}
already_AddRefed
<
WindowGlobalChild
>
WindowGlobalParent
:
:
GetOtherSide
(
)
{
if
(
mIPCClosed
)
{
return
nullptr
;
}
IProtocol
*
otherSide
=
InProcessParent
:
:
ChildActorFor
(
this
)
;
return
do_AddRef
(
static_cast
<
WindowGlobalChild
*
>
(
otherSide
)
)
;
}
IPCResult
WindowGlobalParent
:
:
RecvUpdateDocumentURI
(
nsIURI
*
aURI
)
{
mDocumentURI
=
aURI
;
return
IPC_OK
(
)
;
}
void
WindowGlobalParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCClosed
=
true
;
}
WindowGlobalParent
:
:
~
WindowGlobalParent
(
)
{
}
NS_IMPL_CYCLE_COLLECTION
(
WindowGlobalParent
mFrameLoader
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
WindowGlobalParent
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
WindowGlobalParent
Release
)
}
}
