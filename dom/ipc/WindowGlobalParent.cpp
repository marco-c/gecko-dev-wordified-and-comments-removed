#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
ipc
/
InProcessParent
.
h
"
#
include
"
mozilla
/
dom
/
ChromeBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActorsBinding
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
typedef
nsRefPtrHashtable
<
nsUint64HashKey
WindowGlobalParent
>
WGPByIdMap
;
static
StaticAutoPtr
<
WGPByIdMap
>
gWindowGlobalParentsById
;
WindowGlobalParent
:
:
WindowGlobalParent
(
const
WindowGlobalInit
&
aInit
bool
aInProcess
)
:
mDocumentPrincipal
(
aInit
.
principal
(
)
)
mInnerWindowId
(
aInit
.
innerWindowId
(
)
)
mOuterWindowId
(
aInit
.
outerWindowId
(
)
)
mInProcess
(
aInProcess
)
mIPCClosed
(
true
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsParentProcess
(
)
"
Parent
process
only
"
)
;
MOZ_RELEASE_ASSERT
(
mDocumentPrincipal
"
Must
have
a
valid
principal
"
)
;
MOZ_RELEASE_ASSERT
(
aInit
.
browsingContextId
(
)
!
=
0
"
Must
be
made
in
BrowsingContext
"
)
;
}
void
WindowGlobalParent
:
:
Init
(
const
WindowGlobalInit
&
aInit
)
{
MOZ_ASSERT
(
Manager
(
)
"
Should
have
a
manager
!
"
)
;
MOZ_ASSERT
(
!
mFrameLoader
"
Cannot
Init
(
)
a
WindowGlobalParent
twice
!
"
)
;
MOZ_ASSERT
(
mIPCClosed
"
IPC
shouldn
'
t
be
open
yet
"
)
;
mIPCClosed
=
false
;
if
(
!
gWindowGlobalParentsById
)
{
gWindowGlobalParentsById
=
new
WGPByIdMap
(
)
;
ClearOnShutdown
(
&
gWindowGlobalParentsById
)
;
}
auto
entry
=
gWindowGlobalParentsById
-
>
LookupForAdd
(
mInnerWindowId
)
;
MOZ_RELEASE_ASSERT
(
!
entry
"
Duplicate
WindowGlobalParent
entry
for
ID
!
"
)
;
entry
.
OrInsert
(
[
&
]
{
return
this
;
}
)
;
ContentParentId
processId
(
0
)
;
if
(
!
mInProcess
)
{
processId
=
static_cast
<
ContentParent
*
>
(
Manager
(
)
-
>
Manager
(
)
)
-
>
ChildID
(
)
;
}
mBrowsingContext
=
ChromeBrowsingContext
:
:
Get
(
aInit
.
browsingContextId
(
)
)
;
MOZ_ASSERT
(
mBrowsingContext
)
;
MOZ_ASSERT
(
mBrowsingContext
-
>
IsOwnedByProcess
(
processId
)
)
;
mBrowsingContext
-
>
RegisterWindowGlobal
(
this
)
;
RefPtr
<
Element
>
frameElement
;
if
(
mInProcess
)
{
MOZ_ASSERT
(
Manager
(
)
-
>
GetProtocolTypeId
(
)
=
=
PInProcessMsgStart
)
;
RefPtr
<
WindowGlobalChild
>
otherSide
=
GetChildActor
(
)
;
if
(
otherSide
&
&
otherSide
-
>
WindowGlobal
(
)
)
{
RefPtr
<
nsDocShell
>
docShell
=
nsDocShell
:
:
Cast
(
otherSide
-
>
WindowGlobal
(
)
-
>
GetDocShell
(
)
)
;
if
(
docShell
)
{
docShell
-
>
GetTopFrameElement
(
getter_AddRefs
(
frameElement
)
)
;
}
}
}
else
{
MOZ_ASSERT
(
Manager
(
)
-
>
GetProtocolTypeId
(
)
=
=
PBrowserMsgStart
)
;
frameElement
=
static_cast
<
TabParent
*
>
(
Manager
(
)
)
-
>
GetOwnerElement
(
)
;
}
nsCOMPtr
<
nsIFrameLoaderOwner
>
flOwner
=
do_QueryInterface
(
frameElement
)
;
if
(
flOwner
)
{
mFrameLoader
=
flOwner
-
>
GetFrameLoader
(
)
;
}
}
already_AddRefed
<
WindowGlobalParent
>
WindowGlobalParent
:
:
GetByInnerWindowId
(
uint64_t
aInnerWindowId
)
{
if
(
!
gWindowGlobalParentsById
)
{
return
nullptr
;
}
return
gWindowGlobalParentsById
-
>
Get
(
aInnerWindowId
)
;
}
already_AddRefed
<
WindowGlobalChild
>
WindowGlobalParent
:
:
GetChildActor
(
)
{
if
(
mIPCClosed
)
{
return
nullptr
;
}
IProtocol
*
otherSide
=
InProcessParent
:
:
ChildActorFor
(
this
)
;
return
do_AddRef
(
static_cast
<
WindowGlobalChild
*
>
(
otherSide
)
)
;
}
IPCResult
WindowGlobalParent
:
:
RecvUpdateDocumentURI
(
nsIURI
*
aURI
)
{
mDocumentURI
=
aURI
;
return
IPC_OK
(
)
;
}
IPCResult
WindowGlobalParent
:
:
RecvBecomeCurrentWindowGlobal
(
)
{
mBrowsingContext
-
>
SetCurrentWindowGlobal
(
this
)
;
return
IPC_OK
(
)
;
}
bool
WindowGlobalParent
:
:
IsCurrentGlobal
(
)
{
return
!
mIPCClosed
&
&
mBrowsingContext
-
>
GetCurrentWindowGlobal
(
)
=
=
this
;
}
void
WindowGlobalParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCClosed
=
true
;
gWindowGlobalParentsById
-
>
Remove
(
mInnerWindowId
)
;
mBrowsingContext
-
>
UnregisterWindowGlobal
(
this
)
;
}
WindowGlobalParent
:
:
~
WindowGlobalParent
(
)
{
MOZ_ASSERT
(
!
gWindowGlobalParentsById
|
|
!
gWindowGlobalParentsById
-
>
Contains
(
mInnerWindowId
)
)
;
}
JSObject
*
WindowGlobalParent
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
WindowGlobalParent_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
nsISupports
*
WindowGlobalParent
:
:
GetParentObject
(
)
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
WindowGlobalParent
mFrameLoader
mBrowsingContext
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
WindowGlobalParent
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
WindowGlobalParent
Release
)
}
}
