#
ifndef
mozilla_dom_JSProcessActorChild_h
#
define
mozilla_dom_JSProcessActorChild_h
#
include
"
mozilla
/
dom
/
JSActor
.
h
"
#
include
"
nsIDOMProcessChild
.
h
"
namespace
mozilla
{
namespace
dom
{
class
JSProcessActorChild
final
:
public
JSActor
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
JSProcessActorChild
JSActor
)
nsIGlobalObject
*
GetParentObject
(
)
const
override
{
return
xpc
:
:
NativeGlobal
(
xpc
:
:
PrivilegedJunkScope
(
)
)
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
JSProcessActorChild
>
Constructor
(
GlobalObject
&
aGlobal
)
{
return
MakeAndAddRef
<
JSProcessActorChild
>
(
)
;
}
nsIDOMProcessChild
*
Manager
(
)
const
{
return
mManager
;
}
void
Init
(
const
nsACString
&
aName
nsIDOMProcessChild
*
aManager
)
;
void
AfterDestroy
(
)
;
protected
:
virtual
void
SendRawMessage
(
const
JSActorMessageMeta
&
aMetadata
ipc
:
:
StructuredCloneData
&
&
aData
ipc
:
:
StructuredCloneData
&
&
aStack
ErrorResult
&
aRv
)
override
;
private
:
~
JSProcessActorChild
(
)
{
MOZ_ASSERT
(
!
mManager
)
;
}
bool
mCanSend
=
true
;
nsCOMPtr
<
nsIDOMProcessChild
>
mManager
;
}
;
}
}
#
endif
