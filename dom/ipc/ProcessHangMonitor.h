#
ifndef
mozilla_ProcessHangMonitor_h
#
define
mozilla_ProcessHangMonitor_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsIRunnable
;
class
nsITabChild
;
class
nsIThread
;
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
class
TabParent
;
}
class
PProcessHangMonitorParent
;
class
ProcessHangMonitor
final
:
public
nsIObserver
{
private
:
ProcessHangMonitor
(
)
;
virtual
~
ProcessHangMonitor
(
)
;
public
:
static
ProcessHangMonitor
*
Get
(
)
{
return
sInstance
;
}
static
ProcessHangMonitor
*
GetOrCreate
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
PProcessHangMonitorParent
*
AddProcess
(
dom
:
:
ContentParent
*
aContentParent
)
;
static
void
RemoveProcess
(
PProcessHangMonitorParent
*
aParent
)
;
static
void
ClearHang
(
)
;
static
void
PaintWhileInterruptingJS
(
PProcessHangMonitorParent
*
aParent
dom
:
:
TabParent
*
aTab
bool
aForceRepaint
uint64_t
aLayerObserverEpoch
)
;
static
void
ClearPaintWhileInterruptingJS
(
uint64_t
aLayerObserverEpoch
)
;
static
void
MaybeStartPaintWhileInterruptingJS
(
)
;
enum
SlowScriptAction
{
Continue
Terminate
StartDebugger
TerminateGlobal
}
;
SlowScriptAction
NotifySlowScript
(
nsITabChild
*
aTabChild
const
char
*
aFileName
const
nsString
&
aAddonId
)
;
void
NotifyPluginHang
(
uint32_t
aPluginId
)
;
bool
IsDebuggerStartupComplete
(
)
;
void
InitiateCPOWTimeout
(
)
;
bool
ShouldTimeOutCPOWs
(
)
;
void
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
bool
IsOnThread
(
)
;
private
:
static
ProcessHangMonitor
*
sInstance
;
Atomic
<
bool
>
mCPOWTimeout
;
nsCOMPtr
<
nsIThread
>
mThread
;
}
;
}
#
endif
