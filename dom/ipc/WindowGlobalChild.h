#
ifndef
mozilla_dom_WindowGlobalChild_h
#
define
mozilla_dom_WindowGlobalChild_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PWindowGlobalChild
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActor
.
h
"
class
nsGlobalWindowInner
;
class
nsDocShell
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
WindowGlobalParent
;
class
JSWindowActorChild
;
class
JSWindowActorMessageMeta
;
class
BrowserChild
;
class
WindowGlobalChild
final
:
public
WindowGlobalActor
public
PWindowGlobalChild
{
friend
class
PWindowGlobalChild
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
WindowGlobalChild
WindowGlobalActor
)
static
already_AddRefed
<
WindowGlobalChild
>
GetByInnerWindowId
(
uint64_t
aInnerWindowId
)
;
static
already_AddRefed
<
WindowGlobalChild
>
GetByInnerWindowId
(
const
GlobalObject
&
aGlobal
uint64_t
aInnerWindowId
)
{
return
GetByInnerWindowId
(
aInnerWindowId
)
;
}
dom
:
:
BrowsingContext
*
BrowsingContext
(
)
override
{
return
mBrowsingContext
;
}
nsGlobalWindowInner
*
WindowGlobal
(
)
{
return
mWindowGlobal
;
}
bool
IsClosed
(
)
{
return
!
CanSend
(
)
;
}
void
Destroy
(
)
;
bool
IsInProcess
(
)
{
return
XRE_IsParentProcess
(
)
;
}
nsIURI
*
GetDocumentURI
(
)
override
{
return
mDocumentURI
;
}
void
SetDocumentURI
(
nsIURI
*
aDocumentURI
)
;
nsIPrincipal
*
DocumentPrincipal
(
)
{
return
mDocumentPrincipal
;
}
uint64_t
InnerWindowId
(
)
{
return
mInnerWindowId
;
}
uint64_t
OuterWindowId
(
)
{
return
mOuterWindowId
;
}
uint64_t
ContentParentId
(
)
;
int64_t
BeforeUnloadListeners
(
)
{
return
mBeforeUnloadListeners
;
}
void
BeforeUnloadAdded
(
)
;
void
BeforeUnloadRemoved
(
)
;
bool
IsCurrentGlobal
(
)
;
bool
IsProcessRoot
(
)
;
already_AddRefed
<
WindowGlobalParent
>
GetParentActor
(
)
;
already_AddRefed
<
BrowserChild
>
GetBrowserChild
(
)
;
void
ReceiveRawMessage
(
const
JSWindowActorMessageMeta
&
aMeta
ipc
:
:
StructuredCloneData
&
&
aData
)
;
already_AddRefed
<
JSWindowActorChild
>
GetActor
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
WindowGlobalChild
>
Create
(
nsGlobalWindowInner
*
aWindow
)
;
WindowGlobalChild
(
const
WindowGlobalInit
&
aInit
nsGlobalWindowInner
*
aWindow
)
;
void
Init
(
)
;
void
InitWindowGlobal
(
nsGlobalWindowInner
*
aWindow
)
;
nsISupports
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
const
nsAString
&
GetRemoteType
(
)
override
;
JSWindowActor
:
:
Type
GetSide
(
)
override
{
return
JSWindowActor
:
:
Type
:
:
Child
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvRawMessage
(
const
JSWindowActorMessageMeta
&
aMeta
const
ClonedMessageData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURIInChild
(
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInternalLoadInChild
(
nsDocShellLoadState
*
aLoadState
bool
aTakeFocus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDisplayLoadError
(
const
nsAString
&
aURI
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMakeFrameLocal
(
dom
:
:
BrowsingContext
*
aFrameContext
uint64_t
aPendingSwitchId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvMakeFrameRemote
(
dom
:
:
BrowsingContext
*
aFrameContext
ManagedEndpoint
<
PBrowserBridgeChild
>
&
&
aEndpoint
const
TabId
&
aTabId
MakeFrameRemoteResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDrawSnapshot
(
const
Maybe
<
IntRect
>
&
aRect
const
float
&
aScale
const
nscolor
&
aBackgroundColor
const
uint32_t
&
aFlags
DrawSnapshotResolver
&
&
aResolve
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetSecurityInfo
(
GetSecurityInfoResolver
&
&
aResolve
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
WindowGlobalChild
(
)
;
RefPtr
<
nsGlobalWindowInner
>
mWindowGlobal
;
RefPtr
<
dom
:
:
BrowsingContext
>
mBrowsingContext
;
nsRefPtrHashtable
<
nsStringHashKey
JSWindowActorChild
>
mWindowActors
;
nsCOMPtr
<
nsIPrincipal
>
mDocumentPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
uint64_t
mInnerWindowId
;
uint64_t
mOuterWindowId
;
int64_t
mBeforeUnloadListeners
;
}
;
}
}
#
endif
