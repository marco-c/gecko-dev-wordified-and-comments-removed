#
ifndef
mozilla_dom_WindowGlobalChild_h
#
define
mozilla_dom_WindowGlobalChild_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PWindowGlobalChild
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsGlobalWindowInner
;
class
nsDocShell
;
namespace
mozilla
{
namespace
dom
{
class
BrowsingContext
;
class
WindowGlobalParent
;
class
WindowGlobalChild
:
public
nsWrapperCache
public
PWindowGlobalChild
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
WindowGlobalChild
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
WindowGlobalChild
)
static
already_AddRefed
<
WindowGlobalChild
>
GetByInnerWindowId
(
uint64_t
aInnerWindowId
)
;
static
already_AddRefed
<
WindowGlobalChild
>
GetByInnerWindowId
(
const
GlobalObject
&
aGlobal
uint64_t
aInnerWindowId
)
{
return
GetByInnerWindowId
(
aInnerWindowId
)
;
}
dom
:
:
BrowsingContext
*
BrowsingContext
(
)
{
return
mBrowsingContext
;
}
nsGlobalWindowInner
*
WindowGlobal
(
)
{
return
mWindowGlobal
;
}
bool
IsClosed
(
)
{
return
mIPCClosed
;
}
bool
IsInProcess
(
)
{
return
XRE_IsParentProcess
(
)
;
}
uint64_t
InnerWindowId
(
)
{
return
mInnerWindowId
;
}
uint64_t
OuterWindowId
(
)
{
return
mOuterWindowId
;
}
already_AddRefed
<
WindowGlobalParent
>
GetParentActor
(
)
;
static
already_AddRefed
<
WindowGlobalChild
>
Create
(
nsGlobalWindowInner
*
aWindow
)
;
nsISupports
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
WindowGlobalChild
(
nsGlobalWindowInner
*
aWindow
dom
:
:
BrowsingContext
*
aBc
)
;
~
WindowGlobalChild
(
)
;
RefPtr
<
nsGlobalWindowInner
>
mWindowGlobal
;
RefPtr
<
dom
:
:
BrowsingContext
>
mBrowsingContext
;
uint64_t
mInnerWindowId
;
uint64_t
mOuterWindowId
;
bool
mIPCClosed
;
}
;
}
}
#
endif
