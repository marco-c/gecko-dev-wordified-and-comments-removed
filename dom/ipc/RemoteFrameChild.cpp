#
include
"
mozilla
/
dom
/
RemoteFrameChild
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
RemoteFrameChild
:
:
RemoteFrameChild
(
nsFrameLoader
*
aFrameLoader
)
:
mLayersId
{
0
}
mIPCOpen
(
true
)
mFrameLoader
(
aFrameLoader
)
{
}
RemoteFrameChild
:
:
~
RemoteFrameChild
(
)
{
}
already_AddRefed
<
RemoteFrameChild
>
RemoteFrameChild
:
:
Create
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
RefPtr
<
Element
>
owner
=
aFrameLoader
-
>
GetOwnerContent
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
owner
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_GetInterface
(
owner
-
>
GetOwnerGlobal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
docShell
)
;
RefPtr
<
TabChild
>
tabChild
=
TabChild
:
:
GetFrom
(
docShell
)
;
MOZ_DIAGNOSTIC_ASSERT
(
tabChild
)
;
RefPtr
<
RemoteFrameChild
>
remoteFrame
=
new
RemoteFrameChild
(
aFrameLoader
)
;
tabChild
-
>
SendPRemoteFrameConstructor
(
do_AddRef
(
remoteFrame
)
.
take
(
)
PromiseFlatString
(
aContext
.
PresentationURL
(
)
)
aRemoteType
)
;
remoteFrame
-
>
mIPCOpen
=
true
;
return
remoteFrame
.
forget
(
)
;
}
void
RemoteFrameChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
}
}
