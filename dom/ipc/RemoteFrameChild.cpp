#
include
"
mozilla
/
dom
/
RemoteFrameChild
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
RemoteFrameChild
:
:
RemoteFrameChild
(
nsFrameLoader
*
aFrameLoader
)
:
mLayersId
{
0
}
mIPCOpen
(
true
)
mFrameLoader
(
aFrameLoader
)
{
}
RemoteFrameChild
:
:
~
RemoteFrameChild
(
)
{
}
already_AddRefed
<
RemoteFrameChild
>
RemoteFrameChild
:
:
Create
(
nsFrameLoader
*
aFrameLoader
const
TabContext
&
aContext
const
nsString
&
aRemoteType
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
RefPtr
<
Element
>
owner
=
aFrameLoader
-
>
GetOwnerContent
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
owner
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_GetInterface
(
owner
-
>
GetOwnerGlobal
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
docShell
)
;
RefPtr
<
TabChild
>
tabChild
=
TabChild
:
:
GetFrom
(
docShell
)
;
MOZ_DIAGNOSTIC_ASSERT
(
tabChild
)
;
RefPtr
<
RemoteFrameChild
>
remoteFrame
=
new
RemoteFrameChild
(
aFrameLoader
)
;
tabChild
-
>
SendPRemoteFrameConstructor
(
do_AddRef
(
remoteFrame
)
.
take
(
)
PromiseFlatString
(
aContext
.
PresentationURL
(
)
)
aRemoteType
)
;
remoteFrame
-
>
mIPCOpen
=
true
;
return
remoteFrame
.
forget
(
)
;
}
void
RemoteFrameChild
:
:
UpdateDimensions
(
const
nsIntRect
&
aRect
const
mozilla
:
:
ScreenIntSize
&
aSize
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mIPCOpen
)
;
RefPtr
<
Element
>
owner
=
mFrameLoader
-
>
GetOwnerContent
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsContentUtils
:
:
WidgetForContent
(
owner
)
;
if
(
!
widget
)
{
widget
=
nsContentUtils
:
:
WidgetForDocument
(
owner
-
>
OwnerDoc
(
)
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
widget
)
;
CSSToLayoutDeviceScale
widgetScale
=
widget
-
>
GetDefaultScale
(
)
;
LayoutDeviceIntRect
devicePixelRect
=
ViewAs
<
LayoutDevicePixel
>
(
aRect
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntSize
devicePixelSize
=
ViewAs
<
LayoutDevicePixel
>
(
aSize
PixelCastJustification
:
:
LayoutDeviceIsScreenForTabDims
)
;
LayoutDeviceIntPoint
clientOffset
;
LayoutDeviceIntPoint
chromeOffset
;
CSSRect
unscaledRect
=
devicePixelRect
/
widgetScale
;
CSSSize
unscaledSize
=
devicePixelSize
/
widgetScale
;
hal
:
:
ScreenOrientation
orientation
=
hal
:
:
eScreenOrientation_Default
;
DimensionInfo
di
(
unscaledRect
unscaledSize
orientation
clientOffset
chromeOffset
)
;
Unused
<
<
SendUpdateDimensions
(
di
)
;
}
IPCResult
RemoteFrameChild
:
:
RecvSetLayersId
(
const
mozilla
:
:
layers
:
:
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
!
mLayersId
.
IsValid
(
)
&
&
aLayersId
.
IsValid
(
)
)
;
mLayersId
=
aLayersId
;
return
IPC_OK
(
)
;
}
void
RemoteFrameChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCOpen
=
false
;
}
}
}
