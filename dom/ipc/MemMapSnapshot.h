#
ifndef
dom_ipc_MemMapSnapshot_h
#
define
dom_ipc_MemMapSnapshot_h
#
include
"
mozilla
/
AutoMemMap
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RangedPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
endif
namespace
mozilla
{
namespace
ipc
{
class
MOZ_RAII
MemMapSnapshot
{
public
:
Result
<
Ok
nsresult
>
Init
(
size_t
aSize
)
;
Result
<
Ok
nsresult
>
Finalize
(
loader
:
:
AutoMemMap
&
aMap
)
;
template
<
typename
T
=
void
>
RangedPtr
<
T
>
Get
(
)
{
MOZ_ASSERT
(
mInitialized
)
;
return
mMem
.
get
<
T
>
(
)
;
}
private
:
Result
<
Ok
nsresult
>
Create
(
size_t
aSize
)
;
Result
<
Ok
nsresult
>
Freeze
(
loader
:
:
AutoMemMap
&
aMem
)
;
loader
:
:
AutoMemMap
mMem
;
bool
mInitialized
=
false
;
#
ifdef
XP_WIN
Maybe
<
FileDescriptor
>
mFile
;
#
else
nsCString
mPath
;
#
endif
}
;
}
}
#
endif
