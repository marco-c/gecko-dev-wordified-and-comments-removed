#
ifndef
mozilla_dom_WindowGlobalParent_h
#
define
mozilla_dom_WindowGlobalParent_h
#
include
"
mozilla
/
ContentBlockingLog
.
h
"
#
include
"
mozilla
/
ContentBlockingNotifier
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
dom
/
DOMRect
.
h
"
#
include
"
mozilla
/
dom
/
PWindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActorsBinding
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIDOMProcessParent
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActor
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
class
nsIPrincipal
;
class
nsIURI
;
class
nsFrameLoader
;
namespace
mozilla
{
namespace
gfx
{
class
CrossProcessPaint
;
}
namespace
dom
{
class
BrowserParent
;
class
WindowGlobalChild
;
class
JSWindowActorParent
;
class
JSActorMessageMeta
;
struct
PageUseCounters
;
class
WindowSessionStoreState
;
struct
WindowSessionStoreUpdate
;
class
SSCacheQueryResult
;
class
WindowGlobalParent
final
:
public
WindowContext
public
WindowGlobalActor
public
PWindowGlobalParent
{
friend
class
gfx
:
:
CrossProcessPaint
;
friend
class
PWindowGlobalParent
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
WindowGlobalParent
WindowContext
)
static
already_AddRefed
<
WindowGlobalParent
>
GetByInnerWindowId
(
uint64_t
aInnerWindowId
)
;
static
already_AddRefed
<
WindowGlobalParent
>
GetByInnerWindowId
(
const
GlobalObject
&
aGlobal
uint64_t
aInnerWindowId
)
{
return
GetByInnerWindowId
(
aInnerWindowId
)
;
}
WindowGlobalParent
*
GetParentWindowContext
(
)
{
return
static_cast
<
WindowGlobalParent
*
>
(
WindowContext
:
:
GetParentWindowContext
(
)
)
;
}
WindowGlobalParent
*
TopWindowContext
(
)
{
return
static_cast
<
WindowGlobalParent
*
>
(
WindowContext
:
:
TopWindowContext
(
)
)
;
}
CanonicalBrowsingContext
*
GetBrowsingContext
(
)
const
{
return
CanonicalBrowsingContext
:
:
Cast
(
WindowContext
:
:
GetBrowsingContext
(
)
)
;
}
Element
*
GetRootOwnerElement
(
)
;
bool
IsClosed
(
)
{
return
!
CanSend
(
)
;
}
already_AddRefed
<
WindowGlobalChild
>
GetChildActor
(
)
;
already_AddRefed
<
JSWindowActorParent
>
GetActor
(
JSContext
*
aCx
const
nsACString
&
aName
ErrorResult
&
aRv
)
;
already_AddRefed
<
JSWindowActorParent
>
GetExistingActor
(
const
nsACString
&
aName
)
;
BrowserParent
*
GetBrowserParent
(
)
;
ContentParent
*
GetContentParent
(
)
;
nsIPrincipal
*
DocumentPrincipal
(
)
{
return
mDocumentPrincipal
;
}
nsIPrincipal
*
DocumentStoragePrincipal
(
)
{
return
mDocumentStoragePrincipal
;
}
CanonicalBrowsingContext
*
BrowsingContext
(
)
override
{
return
GetBrowsingContext
(
)
;
}
already_AddRefed
<
nsFrameLoader
>
GetRootFrameLoader
(
)
;
nsIURI
*
GetDocumentURI
(
)
override
{
return
mDocumentURI
;
}
void
GetDocumentTitle
(
nsAString
&
aTitle
)
const
{
aTitle
=
mDocumentTitle
.
valueOr
(
nsString
(
)
)
;
}
nsIPrincipal
*
GetContentBlockingAllowListPrincipal
(
)
const
{
return
mDocContentBlockingAllowListPrincipal
;
}
Maybe
<
ClientInfo
>
GetClientInfo
(
)
{
return
mClientInfo
;
}
uint64_t
ContentParentId
(
)
;
int32_t
OsPid
(
)
;
bool
IsCurrentGlobal
(
)
;
bool
IsProcessRoot
(
)
;
uint32_t
ContentBlockingEvents
(
)
;
void
GetContentBlockingLog
(
nsAString
&
aLog
)
;
bool
IsInitialDocument
(
)
{
return
mIsInitialDocument
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
PermitUnload
(
PermitUnloadAction
aAction
uint32_t
aTimeout
mozilla
:
:
ErrorResult
&
aRv
)
;
void
PermitUnload
(
std
:
:
function
<
void
(
bool
)
>
&
&
aResolver
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
DrawSnapshot
(
const
DOMRect
*
aRect
double
aScale
const
nsACString
&
aBackgroundColor
bool
aResetScrollPosition
mozilla
:
:
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetSecurityInfo
(
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
WindowGlobalParent
>
CreateDisconnected
(
const
WindowGlobalInit
&
aInit
)
;
void
Init
(
)
final
;
nsIGlobalObject
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
NotifyContentBlockingEvent
(
uint32_t
aEvent
nsIRequest
*
aRequest
bool
aBlocked
const
nsACString
&
aTrackingOrigin
const
nsTArray
<
nsCString
>
&
aTrackingFullHashes
const
Maybe
<
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
>
&
aReason
=
Nothing
(
)
)
;
ContentBlockingLog
*
GetContentBlockingLog
(
)
{
return
&
mContentBlockingLog
;
}
nsIDOMProcessParent
*
GetDomProcess
(
)
;
nsICookieJarSettings
*
CookieJarSettings
(
)
{
return
mCookieJarSettings
;
}
nsICookieJarSettings
*
GetCookieJarSettings
(
)
const
{
return
mCookieJarSettings
;
}
bool
DocumentHasLoaded
(
)
{
return
mDocumentHasLoaded
;
}
bool
DocumentHasUserInteracted
(
)
{
return
mDocumentHasUserInteracted
;
}
uint32_t
SandboxFlags
(
)
{
return
mSandboxFlags
;
}
bool
GetDocumentBlockAllMixedContent
(
)
{
return
mBlockAllMixedContent
;
}
bool
GetDocumentUpgradeInsecureRequests
(
)
{
return
mUpgradeInsecureRequests
;
}
void
DidBecomeCurrentWindowGlobal
(
bool
aCurrent
)
;
uint32_t
HttpsOnlyStatus
(
)
{
return
mHttpsOnlyStatus
;
}
void
AddSecurityState
(
uint32_t
aStateFlags
)
;
uint32_t
GetSecurityFlags
(
)
{
return
mSecurityState
;
}
nsITransportSecurityInfo
*
GetSecurityInfo
(
)
{
return
mSecurityInfo
;
}
const
nsACString
&
GetRemoteType
(
)
override
;
void
NotifySessionStoreUpdatesComplete
(
Element
*
aEmbedder
)
;
Maybe
<
uint64_t
>
GetSingleChannelId
(
)
{
return
mSingleChannelId
;
}
uint32_t
GetBFCacheStatus
(
)
{
return
mBFCacheStatus
;
}
bool
HasActivePeerConnections
(
)
;
protected
:
already_AddRefed
<
JSActor
>
InitJSActor
(
JS
:
:
Handle
<
JSObject
*
>
aMaybeActor
const
nsACString
&
aName
ErrorResult
&
aRv
)
override
;
mozilla
:
:
ipc
:
:
IProtocol
*
AsNativeActor
(
)
override
{
return
this
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURI
(
const
MaybeDiscarded
<
dom
:
:
BrowsingContext
>
&
aTargetBC
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInternalLoad
(
nsDocShellLoadState
*
aLoadState
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentURI
(
nsIURI
*
aURI
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentPrincipal
(
nsIPrincipal
*
aNewDocumentPrincipal
nsIPrincipal
*
aNewDocumentStoragePrincipal
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentHasLoaded
(
bool
aDocumentHasLoaded
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentHasUserInteracted
(
bool
aDocumentHasUserInteracted
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateSandboxFlags
(
uint32_t
aSandboxFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentCspSettings
(
bool
aBlockAllMixedContent
bool
aUpgradeInsecureRequests
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentTitle
(
const
nsString
&
aTitle
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateHttpsOnlyStatus
(
uint32_t
aHttpsOnlyStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetIsInitialDocument
(
bool
aIsInitialDocument
)
{
mIsInitialDocument
=
aIsInitialDocument
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentSecurityInfo
(
nsITransportSecurityInfo
*
aSecurityInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetClientInfo
(
const
IPCClientInfo
&
aIPCClientInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDestroy
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRawMessage
(
const
JSActorMessageMeta
&
aMeta
const
Maybe
<
ClonedMessageData
>
&
aData
const
Maybe
<
ClonedMessageData
>
&
aStack
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetContentBlockingEvents
(
GetContentBlockingEventsResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateCookieJarSettings
(
const
CookieJarSettingsArgs
&
aCookieJarSettingsArgs
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DrawSnapshotInternal
(
gfx
:
:
CrossProcessPaint
*
aPaint
const
Maybe
<
IntRect
>
&
aRect
float
aScale
nscolor
aBackgroundColor
uint32_t
aFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShare
(
IPCWebShareData
&
&
aData
ShareResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvCheckPermitUnload
(
bool
aHasInProcessBlocker
XPCOMPermitUnloadAction
aAction
CheckPermitUnloadResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvExpectPageUseCounters
(
const
MaybeDiscarded
<
dom
:
:
WindowContext
>
&
aTop
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAccumulatePageUseCounters
(
const
UseCounters
&
aUseCounters
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestRestoreTabContent
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateBFCacheStatus
(
const
uint32_t
&
aOnFlags
const
uint32_t
&
aOffFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateActivePeerConnectionStatus
(
bool
aIsAdded
)
;
public
:
mozilla
:
:
ipc
:
:
IPCResult
RecvSetSingleChannelId
(
const
Maybe
<
uint64_t
>
&
aSingleChannelId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetDocumentDomain
(
nsIURI
*
aDomain
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReloadWithHttpsOnlyException
(
)
;
private
:
WindowGlobalParent
(
CanonicalBrowsingContext
*
aBrowsingContext
uint64_t
aInnerWindowId
uint64_t
aOuterWindowId
FieldValues
&
&
aInit
)
;
~
WindowGlobalParent
(
)
;
bool
ShouldTrackSiteOriginTelemetry
(
)
;
void
FinishAccumulatingPageUseCounters
(
)
;
nsresult
SetDocumentStoragePrincipal
(
nsIPrincipal
*
aNewDocumentStoragePrincipal
)
;
nsCOMPtr
<
nsIPrincipal
>
mDocumentPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mDocumentStoragePrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mDocContentBlockingAllowListPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
Maybe
<
nsString
>
mDocumentTitle
;
bool
mIsInitialDocument
;
bool
mHasBeforeUnload
;
ContentBlockingLog
mContentBlockingLog
;
uint32_t
mSecurityState
=
0
;
Maybe
<
ClientInfo
>
mClientInfo
;
nsCOMPtr
<
nsICookieJarSettings
>
mCookieJarSettings
;
nsCOMPtr
<
nsITransportSecurityInfo
>
mSecurityInfo
;
uint32_t
mSandboxFlags
;
struct
OriginCounter
{
void
UpdateSiteOriginsFrom
(
WindowGlobalParent
*
aParent
bool
aIncrease
)
;
void
Accumulate
(
)
;
nsTHashMap
<
nsCStringHashKey
int32_t
>
mOriginMap
;
uint32_t
mMaxOrigins
=
0
;
}
;
Maybe
<
OriginCounter
>
mOriginCounter
;
bool
mDocumentHasLoaded
;
bool
mDocumentHasUserInteracted
;
bool
mDocumentTreeWouldPreloadResources
=
false
;
bool
mBlockAllMixedContent
;
bool
mUpgradeInsecureRequests
;
uint32_t
mHttpsOnlyStatus
;
RefPtr
<
WindowGlobalParent
>
mPageUseCountersWindow
;
UniquePtr
<
PageUseCounters
>
mPageUseCounters
;
bool
mSentPageUseCounters
=
false
;
uint32_t
mBFCacheStatus
=
0
;
uint32_t
mNumOfProcessesWithActivePeerConnections
=
0
;
Maybe
<
uint64_t
>
mSingleChannelId
;
}
;
}
}
inline
nsISupports
*
ToSupports
(
mozilla
:
:
dom
:
:
WindowGlobalParent
*
aWindowGlobal
)
{
return
static_cast
<
mozilla
:
:
dom
:
:
WindowContext
*
>
(
aWindowGlobal
)
;
}
#
endif
