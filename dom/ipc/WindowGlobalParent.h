#
ifndef
mozilla_dom_WindowGlobalParent_h
#
define
mozilla_dom_WindowGlobalParent_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PWindowGlobalParent
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIPrincipal
;
class
nsIURI
;
class
nsFrameLoader
;
namespace
mozilla
{
namespace
dom
{
class
ChromeBrowsingContext
;
class
WindowGlobalChild
;
class
WindowGlobalParent
final
:
public
nsWrapperCache
public
PWindowGlobalParent
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
WindowGlobalParent
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
WindowGlobalParent
)
bool
IsClosed
(
)
{
return
mIPCClosed
;
}
bool
IsInProcess
(
)
{
return
mInProcess
;
}
already_AddRefed
<
WindowGlobalChild
>
GetChildActor
(
)
;
nsIPrincipal
*
DocumentPrincipal
(
)
{
return
mDocumentPrincipal
;
}
ChromeBrowsingContext
*
BrowsingContext
(
)
{
return
mBrowsingContext
;
}
nsFrameLoader
*
GetRootFrameLoader
(
)
{
return
mFrameLoader
;
}
nsIURI
*
GetDocumentURI
(
)
{
return
mDocumentURI
;
}
WindowGlobalParent
(
const
WindowGlobalInit
&
aInit
bool
aInProcess
)
;
void
Init
(
const
WindowGlobalInit
&
aInit
)
;
nsISupports
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentURI
(
nsIURI
*
aURI
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
WindowGlobalParent
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mDocumentPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
RefPtr
<
nsFrameLoader
>
mFrameLoader
;
RefPtr
<
ChromeBrowsingContext
>
mBrowsingContext
;
bool
mInProcess
;
bool
mIPCClosed
;
}
;
}
}
#
endif
