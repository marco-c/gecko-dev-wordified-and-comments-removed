#
ifndef
mozilla_dom_WindowGlobalParent_h
#
define
mozilla_dom_WindowGlobalParent_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
DOMRect
.
h
"
#
include
"
mozilla
/
dom
/
PWindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalActor
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
class
nsIPrincipal
;
class
nsIURI
;
class
nsFrameLoader
;
namespace
mozilla
{
namespace
gfx
{
class
CrossProcessPaint
;
}
namespace
dom
{
class
WindowGlobalChild
;
class
JSWindowActorParent
;
class
JSWindowActorMessageMeta
;
class
WindowGlobalParent
final
:
public
WindowGlobalActor
public
PWindowGlobalParent
{
friend
class
gfx
:
:
CrossProcessPaint
;
friend
class
PWindowGlobalParent
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
WindowGlobalParent
WindowGlobalActor
)
static
already_AddRefed
<
WindowGlobalParent
>
GetByInnerWindowId
(
uint64_t
aInnerWindowId
)
;
static
already_AddRefed
<
WindowGlobalParent
>
GetByInnerWindowId
(
const
GlobalObject
&
aGlobal
uint64_t
aInnerWindowId
)
{
return
GetByInnerWindowId
(
aInnerWindowId
)
;
}
bool
IsClosed
(
)
{
return
!
CanSend
(
)
;
}
bool
IsInProcess
(
)
{
return
mInProcess
;
}
already_AddRefed
<
WindowGlobalChild
>
GetChildActor
(
)
;
already_AddRefed
<
JSWindowActorParent
>
GetActor
(
const
nsAString
&
aName
ErrorResult
&
aRv
)
;
already_AddRefed
<
BrowserParent
>
GetBrowserParent
(
)
;
void
ReceiveRawMessage
(
const
JSWindowActorMessageMeta
&
aMeta
ipc
:
:
StructuredCloneData
&
&
aData
ipc
:
:
StructuredCloneData
&
&
aStack
)
;
nsIPrincipal
*
DocumentPrincipal
(
)
{
return
mDocumentPrincipal
;
}
CanonicalBrowsingContext
*
BrowsingContext
(
)
override
{
return
mBrowsingContext
;
}
already_AddRefed
<
nsFrameLoader
>
GetRootFrameLoader
(
)
;
nsIURI
*
GetDocumentURI
(
)
override
{
return
mDocumentURI
;
}
uint64_t
OuterWindowId
(
)
{
return
mOuterWindowId
;
}
uint64_t
InnerWindowId
(
)
{
return
mInnerWindowId
;
}
uint64_t
ContentParentId
(
)
;
int32_t
OsPid
(
)
;
bool
IsCurrentGlobal
(
)
;
bool
IsProcessRoot
(
)
;
bool
IsInitialDocument
(
)
{
return
mIsInitialDocument
;
}
bool
HasBeforeUnload
(
)
{
return
mHasBeforeUnload
;
}
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
DrawSnapshot
(
const
DOMRect
*
aRect
double
aScale
const
nsACString
&
aBackgroundColor
mozilla
:
:
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
GetSecurityInfo
(
ErrorResult
&
aRv
)
;
WindowGlobalParent
(
const
WindowGlobalInit
&
aInit
bool
aInProcess
)
;
void
Init
(
const
WindowGlobalInit
&
aInit
)
;
nsIGlobalObject
*
GetParentObject
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
const
nsAString
&
GetRemoteType
(
)
override
;
JSWindowActor
:
:
Type
GetSide
(
)
override
{
return
JSWindowActor
:
:
Type
:
:
Parent
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURI
(
dom
:
:
BrowsingContext
*
aTargetBC
nsDocShellLoadState
*
aLoadState
bool
aSetNavigating
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInternalLoad
(
dom
:
:
BrowsingContext
*
aTargetBC
nsDocShellLoadState
*
aLoadState
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDocumentURI
(
nsIURI
*
aURI
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetIsInitialDocument
(
bool
aIsInitialDocument
)
{
mIsInitialDocument
=
aIsInitialDocument
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvSetHasBeforeUnload
(
bool
aHasBeforeUnload
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvBecomeCurrentWindowGlobal
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDestroy
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRawMessage
(
const
JSWindowActorMessageMeta
&
aMeta
const
ClonedMessageData
&
aData
const
ClonedMessageData
&
aStack
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DrawSnapshotInternal
(
gfx
:
:
CrossProcessPaint
*
aPaint
const
Maybe
<
IntRect
>
&
aRect
float
aScale
nscolor
aBackgroundColor
uint32_t
aFlags
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShare
(
IPCWebShareData
&
&
aData
ShareResolver
&
&
aResolver
)
;
private
:
~
WindowGlobalParent
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mDocumentPrincipal
;
nsCOMPtr
<
nsIURI
>
mDocumentURI
;
RefPtr
<
CanonicalBrowsingContext
>
mBrowsingContext
;
nsRefPtrHashtable
<
nsStringHashKey
JSWindowActorParent
>
mWindowActors
;
uint64_t
mInnerWindowId
;
uint64_t
mOuterWindowId
;
bool
mInProcess
;
bool
mIsInitialDocument
;
bool
mHasBeforeUnload
;
}
;
}
}
#
endif
