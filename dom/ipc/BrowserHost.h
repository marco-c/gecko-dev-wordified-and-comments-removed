#
ifndef
mozilla_dom_BrowserHost_h
#
define
mozilla_dom_BrowserHost_h
#
include
"
nsIRemoteTab
.
h
"
#
include
"
mozilla
/
dom
/
RemoteBrowser
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
a11y
{
class
DocAccessibleParent
;
}
namespace
dom
{
class
Element
;
class
BrowserHost
:
public
RemoteBrowser
public
nsIRemoteTab
{
public
:
typedef
mozilla
:
:
layers
:
:
LayersId
LayersId
;
explicit
BrowserHost
(
BrowserParent
*
aParent
)
;
static
BrowserHost
*
GetFrom
(
nsIRemoteTab
*
aRemoteTab
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIREMOTETAB
BrowserParent
*
GetActor
(
)
{
return
mRoot
;
}
ContentParent
*
GetContentParent
(
)
const
{
return
mRoot
-
>
Manager
(
)
;
}
BrowserHost
*
AsBrowserHost
(
)
override
{
return
this
;
}
BrowserBridgeHost
*
AsBrowserBridgeHost
(
)
override
{
return
nullptr
;
}
LayersId
GetLayersId
(
)
const
override
;
BrowsingContext
*
GetBrowsingContext
(
)
const
override
;
nsILoadContext
*
GetLoadContext
(
)
const
override
;
Element
*
GetOwnerElement
(
)
const
{
return
mRoot
-
>
GetOwnerElement
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
GetParentWindowOuter
(
)
const
{
return
mRoot
-
>
GetParentWindowOuter
(
)
;
}
a11y
:
:
DocAccessibleParent
*
GetTopLevelDocAccessible
(
)
const
;
template
<
typename
Callback
>
void
VisitAll
(
Callback
aCallback
)
{
if
(
!
mRoot
)
{
return
;
}
mRoot
-
>
VisitAll
(
aCallback
)
;
}
void
LoadURL
(
nsIURI
*
aURI
)
override
;
void
ResumeLoad
(
uint64_t
aPendingSwitchId
)
override
;
void
DestroyStart
(
)
override
;
void
DestroyComplete
(
)
override
;
bool
Show
(
const
ScreenIntSize
&
aSize
bool
aParentIsActive
)
override
;
void
UpdateDimensions
(
const
nsIntRect
&
aRect
const
ScreenIntSize
&
aSize
)
override
;
private
:
virtual
~
BrowserHost
(
)
=
default
;
RefPtr
<
BrowserParent
>
mRoot
;
}
;
}
}
#
endif
