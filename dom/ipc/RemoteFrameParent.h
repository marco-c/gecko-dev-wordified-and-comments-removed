#
ifndef
mozilla_dom_RemoteFrameParent_h
#
define
mozilla_dom_RemoteFrameParent_h
#
include
"
mozilla
/
dom
/
PRemoteFrameParent
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
namespace
mozilla
{
namespace
dom
{
class
RemoteFrameParent
:
public
PRemoteFrameParent
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
RemoteFrameParent
)
;
RemoteFrameParent
(
)
;
nsresult
Init
(
const
nsString
&
aPresentationURL
const
nsString
&
aRemoteType
CanonicalBrowsingContext
*
aBrowsingContext
)
;
TabParent
*
GetTabParent
(
)
{
return
mTabParent
;
}
CanonicalBrowsingContext
*
GetBrowsingContext
(
)
{
return
mTabParent
-
>
GetBrowsingContext
(
)
;
}
TabParent
*
Manager
(
)
{
MOZ_ASSERT
(
mIPCOpen
)
;
return
static_cast
<
TabParent
*
>
(
PRemoteFrameParent
:
:
Manager
(
)
)
;
}
protected
:
friend
class
PRemoteFrameParent
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShow
(
const
ScreenIntSize
&
aSize
const
bool
&
aParentIsActive
const
nsSizeMode
&
aSizeMode
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvLoadURL
(
const
nsCString
&
aUrl
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateDimensions
(
const
DimensionInfo
&
aDimensions
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRenderLayers
(
const
bool
&
aEnabled
const
bool
&
aForceRepaint
const
LayersObserverEpoch
&
aEpoch
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
~
RemoteFrameParent
(
)
;
RefPtr
<
TabParent
>
mTabParent
;
bool
mIPCOpen
;
}
;
}
}
#
endif
