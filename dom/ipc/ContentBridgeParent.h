#
ifndef
mozilla_dom_ContentBridgeParent_h
#
define
mozilla_dom_ContentBridgeParent_h
#
include
"
mozilla
/
dom
/
PContentBridgeParent
.
h
"
#
include
"
mozilla
/
dom
/
nsIContentParent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
nsIObserver
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ContentBridgeParent
:
public
PContentBridgeParent
public
nsIContentParent
public
nsIObserver
{
public
:
explicit
ContentBridgeParent
(
Transport
*
aTransport
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DeferredDestroy
(
)
;
virtual
bool
IsContentBridgeParent
(
)
const
override
{
return
true
;
}
void
NotifyTabDestroyed
(
)
;
static
ContentBridgeParent
*
Create
(
Transport
*
aTransport
ProcessId
aOtherProcess
)
;
virtual
PBlobParent
*
SendPBlobConstructor
(
PBlobParent
*
actor
const
BlobConstructorParams
&
params
)
override
;
virtual
PBrowserParent
*
SendPBrowserConstructor
(
PBrowserParent
*
aActor
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForApp
const
bool
&
aIsForBrowser
)
override
;
FORWARD_SHMEM_ALLOCATOR_TO
(
PContentBridgeParent
)
jsipc
:
:
CPOWManager
*
GetCPOWManager
(
)
override
;
virtual
ContentParentId
ChildID
(
)
const
override
{
return
mChildID
;
}
virtual
bool
IsForApp
(
)
const
override
{
return
mIsForApp
;
}
virtual
bool
IsForBrowser
(
)
const
override
{
return
mIsForBrowser
;
}
virtual
int32_t
Pid
(
)
const
override
{
return
-
1
;
}
protected
:
virtual
~
ContentBridgeParent
(
)
;
void
SetChildID
(
ContentParentId
aId
)
{
mChildID
=
aId
;
}
void
SetIsForApp
(
bool
aIsForApp
)
{
mIsForApp
=
aIsForApp
;
}
void
SetIsForBrowser
(
bool
aIsForBrowser
)
{
mIsForBrowser
=
aIsForBrowser
;
}
void
Close
(
)
{
PContentBridgeParent
:
:
Close
(
)
;
}
protected
:
virtual
bool
RecvSyncMessage
(
const
nsString
&
aMsg
const
ClonedMessageData
&
aData
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
nsTArray
<
StructuredCloneData
>
*
aRetvals
)
override
;
virtual
bool
RecvAsyncMessage
(
const
nsString
&
aMsg
InfallibleTArray
<
jsipc
:
:
CpowEntry
>
&
&
aCpows
const
IPC
:
:
Principal
&
aPrincipal
const
ClonedMessageData
&
aData
)
override
;
virtual
jsipc
:
:
PJavaScriptParent
*
AllocPJavaScriptParent
(
)
override
;
virtual
bool
DeallocPJavaScriptParent
(
jsipc
:
:
PJavaScriptParent
*
)
override
;
virtual
PBrowserParent
*
AllocPBrowserParent
(
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
uint32_t
&
aChromeFlags
const
ContentParentId
&
aCpID
const
bool
&
aIsForApp
const
bool
&
aIsForBrowser
)
override
;
virtual
bool
DeallocPBrowserParent
(
PBrowserParent
*
)
override
;
virtual
PBlobParent
*
AllocPBlobParent
(
const
BlobConstructorParams
&
aParams
)
override
;
virtual
bool
DeallocPBlobParent
(
PBlobParent
*
)
override
;
DISALLOW_EVIL_CONSTRUCTORS
(
ContentBridgeParent
)
;
protected
:
RefPtr
<
ContentBridgeParent
>
mSelfRef
;
Transport
*
mTransport
;
ContentParentId
mChildID
;
bool
mIsForApp
;
bool
mIsForBrowser
;
private
:
friend
class
ContentParent
;
}
;
}
}
#
endif
