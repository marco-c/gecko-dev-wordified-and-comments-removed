#
ifndef
mozilla_dom_ProcessIsolation_h
#
define
mozilla_dom_ProcessIsolation_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
RemoteType
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
namespace
mozilla
:
:
dom
{
class
CanonicalBrowsingContext
;
class
WindowGlobalParent
;
extern
mozilla
:
:
LazyLogModule
gProcessIsolationLog
;
constexpr
nsLiteralCString
kHighValueCOOPPermission
=
"
highValueCOOP
"
_ns
;
constexpr
nsLiteralCString
kHighValueHasSavedLoginPermission
=
"
highValueHasSavedLogin
"
_ns
;
constexpr
nsLiteralCString
kHighValueIsLoggedInPermission
=
"
highValueIsLoggedIn
"
_ns
;
struct
NavigationIsolationOptions
{
nsCString
mRemoteType
;
bool
mReplaceBrowsingContext
=
false
;
uint64_t
mSpecificGroupId
=
0
;
bool
mTryUseBFCache
=
false
;
RefPtr
<
SessionHistoryEntry
>
mActiveSessionHistoryEntry
;
}
;
Result
<
NavigationIsolationOptions
nsresult
>
IsolationOptionsForNavigation
(
CanonicalBrowsingContext
*
aTopBC
WindowGlobalParent
*
aParentWindow
nsIURI
*
aChannelCreationURI
nsIChannel
*
aChannel
const
nsACString
&
aCurrentRemoteType
bool
aHasCOOPMismatch
bool
aForNewTab
uint32_t
aLoadStateLoadType
const
Maybe
<
uint64_t
>
&
aChannelId
const
Maybe
<
nsCString
>
&
aRemoteTypeOverride
)
;
void
AddHighValuePermission
(
nsIPrincipal
*
aResultPrincipal
const
nsACString
&
aPermissionType
)
;
void
AddHighValuePermission
(
const
nsACString
&
aOrigin
const
nsACString
&
aPermissionType
)
;
bool
IsIsolateHighValueSiteEnabled
(
)
;
}
#
endif
