#
include
"
LoginDetectionService
.
h
"
#
include
"
nsILoginInfo
.
h
"
#
include
"
nsILoginManager
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPrefs_fission
.
h
"
#
include
"
mozilla
/
dom
/
ProcessIsolation
.
h
"
namespace
mozilla
:
:
dom
{
static
StaticRefPtr
<
LoginDetectionService
>
gLoginDetectionService
;
namespace
{
void
OnFissionPrefsChange
(
const
char
*
aPrefName
void
*
aData
)
{
MOZ_ASSERT
(
gLoginDetectionService
)
;
gLoginDetectionService
-
>
MaybeStartMonitoring
(
)
;
}
}
NS_IMPL_ISUPPORTS
(
LoginDetectionService
nsILoginDetectionService
nsISupportsWeakReference
nsILoginSearchCallback
nsIObserver
)
already_AddRefed
<
LoginDetectionService
>
LoginDetectionService
:
:
GetSingleton
(
)
{
if
(
gLoginDetectionService
)
{
return
do_AddRef
(
gLoginDetectionService
)
;
}
gLoginDetectionService
=
new
LoginDetectionService
(
)
;
ClearOnShutdown
(
&
gLoginDetectionService
)
;
return
do_AddRef
(
gLoginDetectionService
)
;
}
LoginDetectionService
:
:
~
LoginDetectionService
(
)
{
UnregisterObserver
(
)
;
}
void
LoginDetectionService
:
:
MaybeStartMonitoring
(
)
{
if
(
IsIsolateHighValueSiteEnabled
(
)
)
{
FetchLogins
(
)
;
}
if
(
IsIsolateHighValueSiteEnabled
(
)
|
|
StaticPrefs
:
:
fission_highValue_login_monitor
(
)
)
{
if
(
!
mObs
)
{
mObs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
mObs
-
>
AddObserver
(
this
"
passwordmgr
-
form
-
submission
-
detected
"
false
)
;
}
}
else
{
UnregisterObserver
(
)
;
}
}
void
LoginDetectionService
:
:
FetchLogins
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsILoginManager
>
loginManager
=
do_GetService
(
NS_LOGINMANAGER_CONTRACTID
&
rv
)
;
if
(
NS_WARN_IF
(
!
loginManager
)
)
{
return
;
}
Unused
<
<
loginManager
-
>
GetAllLoginsWithCallbackAsync
(
this
)
;
}
void
LoginDetectionService
:
:
UnregisterObserver
(
)
{
if
(
mObs
)
{
mObs
-
>
RemoveObserver
(
this
"
passwordmgr
-
form
-
submission
-
detected
"
)
;
mObs
=
nullptr
;
}
}
NS_IMETHODIMP
LoginDetectionService
:
:
Init
(
)
{
if
(
XRE_IsContentProcess
(
)
)
{
return
NS_OK
;
}
Preferences
:
:
RegisterCallback
(
OnFissionPrefsChange
"
fission
.
autostart
"
)
;
Preferences
:
:
RegisterCallback
(
OnFissionPrefsChange
"
fission
.
webContentIsolationStrategy
"
)
;
MaybeStartMonitoring
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoginDetectionService
:
:
OnSearchComplete
(
const
nsTArray
<
RefPtr
<
nsILoginInfo
>
>
&
aLogins
)
{
for
(
const
auto
&
login
:
aLogins
)
{
nsString
origin
;
login
-
>
GetOrigin
(
origin
)
;
AddHighValuePermission
(
NS_ConvertUTF16toUTF8
(
origin
)
mozilla
:
:
dom
:
:
kHighValueHasSavedLoginPermission
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
LoginDetectionService
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
"
passwordmgr
-
form
-
submission
-
detected
"
_ns
.
Equals
(
aTopic
)
)
{
nsDependentString
origin
(
aData
)
;
AddHighValuePermission
(
NS_ConvertUTF16toUTF8
(
origin
)
mozilla
:
:
dom
:
:
kHighValueIsLoggedInPermission
)
;
}
return
NS_OK
;
}
}
