include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
CSPMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
DocShellMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
PermissionMessageUtils
.
h
"
;
include
"
mozilla
/
dom
/
PropertyBagUtils
.
h
"
;
include
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
include
"
mozilla
/
dom
/
TabMessageUtils
.
h
"
;
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
;
include
"
mozilla
/
layers
/
LayersMessageUtils
.
h
"
;
include
"
mozilla
/
net
/
ClassOfService
.
h
"
;
include
IPCBlob
;
include
IPCStream
;
include
ProtocolTypes
;
using
struct
mozilla
:
:
void_t
from
"
mozilla
/
ipc
/
IPCCore
.
h
"
;
[
MoveOnly
=
data
]
using
struct
mozilla
:
:
SerializedStructuredCloneBuffer
from
"
mozilla
/
ipc
/
SerializedStructuredCloneBuffer
.
h
"
;
using
struct
mozilla
:
:
dom
:
:
LoadingSessionHistoryInfo
from
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
;
using
mozilla
:
:
net
:
:
ClassOfService
from
"
mozilla
/
net
/
ClassOfService
.
h
"
;
using
mozilla
:
:
hal
:
:
ScreenOrientation
from
"
mozilla
/
HalIPCUtils
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntRect
from
"
Units
.
h
"
;
using
mozilla
:
:
DesktopIntRect
from
"
Units
.
h
"
;
using
mozilla
:
:
DesktopToLayoutDeviceScale
from
"
Units
.
h
"
;
using
mozilla
:
:
CSSToLayoutDeviceScale
from
"
Units
.
h
"
;
using
mozilla
:
:
CSSRect
from
"
Units
.
h
"
;
using
mozilla
:
:
CSSSize
from
"
Units
.
h
"
;
using
mozilla
:
:
ScreenIntSize
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntPoint
from
"
Units
.
h
"
;
using
nsSizeMode
from
"
nsIWidgetListener
.
h
"
;
using
mozilla
:
:
ScrollbarPreference
from
"
mozilla
/
ScrollbarPreferences
.
h
"
;
using
mozilla
:
:
gfx
:
:
SurfaceFormat
from
"
mozilla
/
gfx
/
Types
.
h
"
;
[
RefCounted
]
using
class
nsIPrincipal
from
"
nsIPrincipal
.
h
"
;
using
mozilla
:
:
dom
:
:
MaybeDiscardedBrowsingContext
from
"
mozilla
/
dom
/
BrowsingContext
.
h
"
;
[
RefCounted
]
using
class
nsIURI
from
"
nsIURI
.
h
"
;
[
RefCounted
]
using
class
nsIContentSecurityPolicy
from
"
nsIContentSecurityPolicy
.
h
"
;
[
RefCounted
]
using
class
nsIInputStream
from
"
mozilla
/
ipc
/
IPCStreamUtils
.
h
"
;
[
RefCounted
]
using
class
nsIReferrerInfo
from
"
nsIReferrerInfo
.
h
"
;
[
RefCounted
]
using
class
nsIVariant
from
"
nsIVariant
.
h
"
;
using
mozilla
:
:
TimeStamp
from
"
mozilla
/
TimeStamp
.
h
"
;
[
RefCounted
]
using
class
mozilla
:
:
RemoteLazyInputStream
from
"
mozilla
/
RemoteLazyInputStream
.
h
"
;
[
MoveOnly
]
using
class
mozilla
:
:
ipc
:
:
BigBuffer
from
"
mozilla
/
ipc
/
BigBuffer
.
h
"
;
namespace
mozilla
{
namespace
dom
{
struct
MessagePortIdentifier
{
nsID
uuid
;
nsID
destinationUuid
;
uint32_t
sequenceId
;
bool
neutered
;
}
;
struct
ClonedMessageData
{
SerializedStructuredCloneBuffer
data
;
IPCBlob
[
]
blobs
;
IPCStream
[
]
inputStreams
;
MessagePortIdentifier
[
]
identifiers
;
}
;
struct
ErrorMessageData
{
}
;
union
ClonedOrErrorMessageData
{
ClonedMessageData
;
ErrorMessageData
;
}
;
struct
RefMessageData
{
nsID
uuid
;
}
;
union
MessageDataType
{
ClonedMessageData
;
RefMessageData
;
}
;
struct
MessageData
{
nsID
?
agentClusterId
;
MessageDataType
data
;
}
;
struct
ScreenDetails
{
LayoutDeviceIntRect
rect
;
DesktopIntRect
rectDisplayPix
;
LayoutDeviceIntRect
availRect
;
DesktopIntRect
availRectDisplayPix
;
int32_t
pixelDepth
;
int32_t
colorDepth
;
uint32_t
refreshRate
;
DesktopToLayoutDeviceScale
contentsScaleFactor
;
CSSToLayoutDeviceScale
defaultCSSScaleFactor
;
float
dpi
;
ScreenOrientation
orientation
;
uint16_t
orientationAngle
;
bool
isPseudoDisplay
;
bool
isHDR
;
}
;
struct
DimensionInfo
{
CSSRect
rect
;
CSSSize
size
;
LayoutDeviceIntPoint
clientOffset
;
LayoutDeviceIntPoint
chromeOffset
;
}
;
struct
FrameScriptInfo
{
nsString
url
;
bool
runInGlobalScope
;
}
;
struct
FeaturePolicyInfo
{
nsString
[
]
inheritedDeniedFeatureNames
;
nsString
[
]
attributeEnabledFeatureNames
;
nsString
declaredString
;
nullable
nsIPrincipal
defaultOrigin
;
nullable
nsIPrincipal
selfOrigin
;
nullable
nsIPrincipal
srcOrigin
;
}
;
struct
CreatedWindowInfo
{
nsresult
rv
;
bool
windowOpened
;
FrameScriptInfo
[
]
frameScripts
;
uint32_t
maxTouchPoints
;
DimensionInfo
dimensions
;
}
;
struct
DocShellLoadStateInit
{
nullable
nsIURI
URI
;
nullable
nsIURI
OriginalURI
;
nullable
nsIURI
ResultPrincipalURI
;
nullable
nsIPrincipal
TriggeringPrincipal
;
nullable
nsIReferrerInfo
ReferrerInfo
;
nullable
nsIPrincipal
PrincipalToInherit
;
nullable
nsIPrincipal
PartitionedPrincipalToInherit
;
nullable
nsIURI
BaseURI
;
nullable
nsIContentSecurityPolicy
Csp
;
nullable
nsIInputStream
PostDataStream
;
nullable
nsIInputStream
HeadersStream
;
nullable
nsIURI
UnstrippedURI
;
uint64_t
LoadIdentifier
;
nsString
Target
;
nsCString
TypeHint
;
nsString
FileName
;
MaybeDiscardedBrowsingContext
SourceBrowsingContext
;
MaybeDiscardedBrowsingContext
TargetBrowsingContext
;
nsCString
TriggeringRemoteType
;
nsString
SrcdocData
;
nsCString
?
OriginalURIString
;
nsCString
?
RemoteTypeOverride
;
LoadingSessionHistoryInfo
?
loadingSessionHistoryInfo
;
uint32_t
LoadType
;
uint32_t
LoadFlags
;
uint32_t
InternalLoadFlags
;
uint32_t
TriggeringSandboxFlags
;
uint64_t
TriggeringWindowId
;
bool
TriggeringStorageAccess
;
int32_t
?
CancelContentJSEpoch
;
bool
ResultPrincipalURIIsSome
;
bool
KeepResultPrincipalURIIfSet
;
bool
LoadReplace
;
bool
InheritPrincipal
;
bool
PrincipalIsExplicit
;
bool
ForceAllowDataURI
;
bool
IsExemptFromHTTPSFirstMode
;
bool
OriginalFrameSrc
;
bool
IsFormSubmission
;
bool
FirstParty
;
bool
HasValidUserGestureActivation
;
bool
AllowFocusMove
;
bool
IsFromProcessingFrameAttributes
;
bool
WasSchemelessInput
;
bool
ChannelInitialized
;
bool
TryToReplaceWithSessionHistoryLoad
;
bool
IsMetaRefresh
;
}
;
struct
TimedChannelInfo
{
bool
timingEnabled
;
int8_t
redirectCount
;
int8_t
internalRedirectCount
;
TimeStamp
asyncOpen
;
TimeStamp
channelCreation
;
TimeStamp
redirectStart
;
TimeStamp
redirectEnd
;
nsString
initiatorType
;
bool
allRedirectsSameOrigin
;
bool
allRedirectsPassTimingAllowCheck
;
bool
?
timingAllowCheckForPrincipal
;
TimeStamp
launchServiceWorkerStart
;
TimeStamp
launchServiceWorkerEnd
;
TimeStamp
dispatchFetchEventStart
;
TimeStamp
dispatchFetchEventEnd
;
TimeStamp
handleFetchEventStart
;
TimeStamp
handleFetchEventEnd
;
TimeStamp
responseStart
;
TimeStamp
responseEnd
;
}
;
struct
ReplacementChannelConfigInit
{
uint32_t
redirectFlags
;
ClassOfService
classOfService
;
bool
?
privateBrowsing
;
nsCString
?
method
;
nullable
nsIReferrerInfo
referrerInfo
;
TimedChannelInfo
?
timedChannelInfo
;
nullable
RemoteLazyInputStream
uploadStream
;
uint64_t
uploadStreamLength
;
bool
uploadStreamHasHeaders
;
nsCString
?
contentType
;
nsCString
?
contentLength
;
}
;
union
IPDLVariantValue
{
bool
;
uint8_t
;
int16_t
;
uint16_t
;
int32_t
;
uint32_t
;
float
;
double
;
nsID
;
nsString
;
nsCString
;
nullable
nsIURI
;
nullable
nsIPrincipal
;
}
;
struct
IDPLVariant
{
uint32_t
type
;
IPDLVariantValue
data
;
}
;
struct
IPDLProperty
{
nsString
name
;
nullable
nsIVariant
value
;
}
;
struct
ParentShowInfo
{
nsString
name
;
bool
fakeShowInfo
;
bool
isTransparent
;
float
dpi
;
int32_t
widgetRounding
;
double
defaultScale
;
}
;
struct
OwnerShowInfo
{
ScreenIntSize
size
;
ScrollbarPreference
scrollbarPreference
;
nsSizeMode
sizeMode
;
}
;
}
}
