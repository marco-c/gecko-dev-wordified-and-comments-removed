#
include
"
ContentParent
.
h
"
#
include
<
map
>
#
include
<
utility
>
#
include
"
BrowserParent
.
h
"
#
include
"
ContentProcessManager
.
h
"
#
include
"
GMPServiceParent
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
Geolocation
.
h
"
#
include
"
GfxInfoBase
.
h
"
#
include
"
HandlerServiceParent
.
h
"
#
include
"
IHistory
.
h
"
#
include
"
MMPrinter
.
h
"
#
include
"
PreallocatedProcessManager
.
h
"
#
include
"
ProcessPriorityManager
.
h
"
#
include
"
ProfilerParent
.
h
"
#
include
"
SandboxHal
.
h
"
#
include
"
SourceSurfaceRawData
.
h
"
#
include
"
base
/
basictypes
.
h
"
#
include
"
chrome
/
common
/
process_watcher
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
gfxPlatformFontList
.
h
"
#
include
"
mozilla
/
AntiTrackingUtils
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
ClipboardContentAnalysisParent
.
h
"
#
include
"
mozilla
/
ClipboardReadRequestParent
.
h
"
#
include
"
mozilla
/
ClipboardWriteRequestParent
.
h
"
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
ContentBlockingUserInteraction
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
FOGIPC
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
include
"
mozilla
/
GlobalStyleSheetCache
.
h
"
#
include
"
mozilla
/
HangDetails
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
PageloadEvent
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
ProcessHangMonitor
.
h
"
#
include
"
mozilla
/
ProcessHangMonitorIPC
.
h
"
#
include
"
mozilla
/
ProfilerLabels
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
mozilla
/
RDDProcessManager
.
h
"
#
include
"
mozilla
/
RecursiveMutex
.
h
"
#
include
"
mozilla
/
RemoteLazyInputStreamParent
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
ScriptPreloader
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StaticPrefs_fission
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
StaticPrefs_threads
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
mozilla
/
StorageAccessAPIHelper
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
TaskController
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TelemetryComms
.
h
"
#
include
"
mozilla
/
TelemetryIPC
.
h
"
#
include
"
mozilla
/
ThreadSafety
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WebBrowserPersistDocumentParent
.
h
"
#
include
"
mozilla
/
XREAppData
.
h
"
#
include
"
mozilla
/
devtools
/
HeapSnapshotTempFileHelperParent
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
include
"
mozilla
/
dom
/
BrowserHost
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextGroup
.
h
"
#
include
"
mozilla
/
dom
/
CancelContentJSOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ClientManager
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ExternalHelperAppParent
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemSecurity
.
h
"
#
include
"
mozilla
/
dom
/
GeolocationBinding
.
h
"
#
include
"
mozilla
/
dom
/
GeolocationPositionError
.
h
"
#
include
"
mozilla
/
dom
/
GeolocationSystem
.
h
"
#
include
"
mozilla
/
dom
/
GetFilesHelper
.
h
"
#
include
"
mozilla
/
dom
/
IPCBlobUtils
.
h
"
#
include
"
mozilla
/
dom
/
JSActorService
.
h
"
#
include
"
mozilla
/
dom
/
JSProcessActorBinding
.
h
"
#
include
"
mozilla
/
dom
/
LocalStorageCommon
.
h
"
#
include
"
mozilla
/
dom
/
MediaController
.
h
"
#
include
"
mozilla
/
dom
/
MediaStatusManager
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
dom
/
PContentPermissionRequestParent
.
h
"
#
include
"
mozilla
/
dom
/
PCycleCollectWithLogsParent
.
h
"
#
include
"
mozilla
/
dom
/
ParentProcessMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
Permissions
.
h
"
#
include
"
mozilla
/
dom
/
ProcessMessageManager
.
h
"
#
include
"
mozilla
/
dom
/
PushNotifier
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerDebuggerManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
RemoteWorkerServiceParent
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerRegistrar
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerUtils
.
h
"
#
include
"
mozilla
/
dom
/
SessionHistoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
SessionStorageManager
.
h
"
#
include
"
mozilla
/
dom
/
StorageIPC
.
h
"
#
include
"
mozilla
/
dom
/
URLClassifierParent
.
h
"
#
include
"
mozilla
/
dom
/
UserActivation
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
SharedMap
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
dom
/
notification
/
NotificationUtils
.
h
"
#
include
"
mozilla
/
dom
/
nsMixedContentBlocker
.
h
"
#
include
"
mozilla
/
dom
/
power
/
PowerManagerService
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaManagerService
.
h
"
#
include
"
mozilla
/
extensions
/
ExtensionsParent
.
h
"
#
include
"
mozilla
/
extensions
/
StreamFilterParent
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
glean
/
DomMetrics
.
h
"
#
include
"
mozilla
/
glean
/
GleanPings
.
h
"
#
include
"
mozilla
/
glean
/
IpcMetrics
.
h
"
#
include
"
mozilla
/
hal_sandbox
/
PHalParent
.
h
"
#
include
"
mozilla
/
intl
/
L10nRegistry
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
ipc
/
ByteBuf
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterHost
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
ipc
/
FileDescriptorUtils
.
h
"
#
include
"
mozilla
/
ipc
/
IPCStreamUtils
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessUtils
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemoryHandle
.
h
"
#
include
"
mozilla
/
ipc
/
TestShellParent
.
h
"
#
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerTreeOwnerTracker
.
h
"
#
include
"
mozilla
/
layers
/
PAPZParent
.
h
"
#
include
"
mozilla
/
loader
/
ScriptCacheActors
.
h
"
#
include
"
mozilla
/
media
/
MediaParent
.
h
"
#
include
"
mozilla
/
mozSpellChecker
.
h
"
#
include
"
mozilla
/
net
/
CookieKey
.
h
"
#
include
"
mozilla
/
net
/
CookieServiceParent
.
h
"
#
include
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
#
include
"
mozilla
/
net
/
NeckoParent
.
h
"
#
include
"
mozilla
/
net
/
PCookieServiceParent
.
h
"
#
include
"
mozilla
/
net
/
TRRService
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierFeatureFactory
.
h
"
#
include
"
mozilla
/
widget
/
RemoteLookAndFeel
.
h
"
#
include
"
mozilla
/
widget
/
ScreenManager
.
h
"
#
include
"
mozilla
/
widget
/
TextRecognition
.
h
"
#
include
"
nsAnonymousTemporaryFile
.
h
"
#
include
"
nsAppRunner
.
h
"
#
include
"
nsCExternalHandlerService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsChromeRegistryChrome
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsConsoleMessage
.
h
"
#
include
"
nsConsoleService
.
h
"
#
include
"
nsContentPermissionHelper
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDNSService2
.
h
"
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsEmbedCID
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameMessageManager
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
nsHyphenationManager
.
h
"
#
include
"
nsIAppShell
.
h
"
#
include
"
nsIAppWindow
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIBidiKeyboard
.
h
"
#
include
"
nsIBrowserDOMWindow
.
h
"
#
include
"
nsICaptivePortalService
.
h
"
#
include
"
nsICertOverrideService
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIContentAnalysis
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsICookie
.
h
"
#
include
"
nsICookieNotification
.
h
"
#
include
"
nsICrashService
.
h
"
#
include
"
nsICycleCollectorListener
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsIExternalProtocolService
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsILocalStorageManager
.
h
"
#
include
"
nsIMemoryInfoDumper
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsINetworkLinkService
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIPrivateAttributionService
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsIServiceWorkerManager
.
h
"
#
include
"
nsISiteSecurityService
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIUserIdleService
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIX509Cert
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsPIDNSService
.
h
"
#
if
defined
(
MOZ_WIDGET_GTK
)
|
|
defined
(
XP_WIN
)
#
include
"
nsIconChannel
.
h
"
#
endif
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsMemoryInfoDumper
.
h
"
#
include
"
nsMemoryReporterManager
.
h
"
#
include
"
nsOpenURIInFrameParams
.
h
"
#
include
"
nsOpenWindowInfo
.
h
"
#
include
"
nsPIWindowWatcher
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsSHistory
.
h
"
#
include
"
nsScriptError
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsStreamUtils
.
h
"
#
include
"
nsStyleSheetService
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsWindowWatcher
.
h
"
#
include
"
prenv
.
h
"
#
include
"
prio
.
h
"
#
include
"
private
/
pprio
.
h
"
#
include
"
xpcpublic
.
h
"
#
ifdef
MOZ_WEBRTC
#
include
"
jsapi
/
WebrtcGlobalParent
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
#
include
"
mozilla
/
AvailableMemoryWatcher
.
h
"
#
include
"
nsMacUtilsImpl
.
h
"
#
endif
#
if
defined
(
ANDROID
)
|
|
defined
(
LINUX
)
#
include
"
nsSystemInfo
.
h
"
#
endif
#
if
defined
(
XP_LINUX
)
#
include
"
mozilla
/
Hal
.
h
"
#
endif
#
ifdef
ANDROID
#
include
"
gfxAndroidPlatform
.
h
"
#
endif
#
include
"
mozilla
/
PermissionManager
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
AndroidBridge
.
h
"
#
include
"
mozilla
/
java
/
GeckoProcessManagerWrappers
.
h
"
#
include
"
mozilla
/
java
/
GeckoProcessTypeWrappers
.
h
"
#
endif
#
ifdef
MOZ_WIDGET_GTK
#
include
<
gdk
/
gdk
.
h
>
#
include
"
mozilla
/
WidgetUtilsGtk
.
h
"
#
endif
#
include
"
Crypto
.
h
"
#
include
"
mozilla
/
RemoteSpellCheckEngineParent
.
h
"
#
ifdef
MOZ_WEBSPEECH
#
include
"
mozilla
/
dom
/
SpeechSynthesisParent
.
h
"
#
endif
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
if
defined
(
XP_LINUX
)
#
include
"
mozilla
/
SandboxBroker
.
h
"
#
include
"
mozilla
/
SandboxBrokerPolicyFactory
.
h
"
#
include
"
mozilla
/
SandboxInfo
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
endif
#
endif
#
ifdef
XP_WIN
#
include
"
mozilla
/
WinDllServices
.
h
"
#
endif
#
ifdef
MOZ_CODE_COVERAGE
#
include
"
mozilla
/
CodeCoverageHandler
.
h
"
#
endif
#
ifdef
FUZZING_SNAPSHOT
#
include
"
mozilla
/
fuzzing
/
IPCFuzzController
.
h
"
#
endif
#
ifdef
ENABLE_WEBDRIVER
#
include
"
nsIMarionette
.
h
"
#
include
"
nsIRemoteAgent
.
h
"
#
endif
#
include
"
mozilla
/
RemoteDecodeUtils
.
h
"
#
include
"
nsIToolkitProfile
.
h
"
#
include
"
nsIToolkitProfileService
.
h
"
#
ifdef
MOZ_WMF_CDM
#
include
"
mozilla
/
EMEUtils
.
h
"
#
include
"
nsIWindowsMediaFoundationCDMOriginsListService
.
h
"
namespace
mozilla
{
class
OriginsListLoadCallback
final
:
public
nsIOriginsListLoadCallback
{
public
:
explicit
OriginsListLoadCallback
(
ContentParent
*
aContentParent
)
:
mContentParent
(
aContentParent
)
{
MOZ_ASSERT
(
mContentParent
)
;
}
NS_DECL_ISUPPORTS
NS_IMETHODIMP
OnOriginsListLoaded
(
nsIArray
*
aEntries
)
{
if
(
NS_WARN_IF
(
!
mContentParent
)
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
length
=
0
;
nsresult
rv
=
aEntries
-
>
GetLength
(
&
length
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsTArray
<
dom
:
:
IPCOriginStatusEntry
>
ipcEntries
;
for
(
uint32_t
i
=
0
;
i
<
length
;
+
+
i
)
{
nsCOMPtr
<
nsIOriginStatusEntry
>
entry
;
aEntries
-
>
QueryElementAt
(
i
NS_GET_IID
(
nsIOriginStatusEntry
)
getter_AddRefs
(
entry
)
)
;
if
(
!
entry
)
{
NS_WARNING
(
"
OriginsListLoadCallback
skip
bad
entry
?
"
)
;
continue
;
}
nsAutoCString
origin
;
int32_t
status
=
0
;
entry
-
>
GetOrigin
(
origin
)
;
entry
-
>
GetStatus
(
&
status
)
;
dom
:
:
IPCOriginStatusEntry
ipcEntry
(
origin
status
)
;
ipcEntries
.
AppendElement
(
ipcEntry
)
;
}
Unused
<
<
mContentParent
-
>
SendUpdateMFCDMOriginEntries
(
ipcEntries
)
;
return
NS_OK
;
}
private
:
~
OriginsListLoadCallback
(
)
=
default
;
RefPtr
<
ContentParent
>
mContentParent
;
}
;
NS_IMPL_ISUPPORTS
(
OriginsListLoadCallback
nsIOriginsListLoadCallback
)
}
#
endif
static
NS_DEFINE_CID
(
kCClipboardCID
NS_CLIPBOARD_CID
)
;
using
base
:
:
KillProcess
;
using
namespace
CrashReporter
;
using
namespace
mozilla
:
:
dom
:
:
power
;
using
namespace
mozilla
:
:
media
;
using
namespace
mozilla
:
:
embedding
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
gmp
;
using
namespace
mozilla
:
:
hal
;
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
intl
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
layout
;
using
namespace
mozilla
:
:
net
;
using
namespace
mozilla
:
:
psm
;
using
namespace
mozilla
:
:
widget
;
using
namespace
mozilla
:
:
Telemetry
;
using
mozilla
:
:
loader
:
:
PScriptCacheParent
;
using
mozilla
:
:
Telemetry
:
:
ProcessID
;
extern
mozilla
:
:
LazyLogModule
gFocusLog
;
#
define
LOGFOCUS
(
args
)
MOZ_LOG
(
gFocusLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
extern
mozilla
:
:
LazyLogModule
sPDMLog
;
#
define
LOGPDM
(
.
.
.
)
MOZ_LOG
(
sPDMLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
namespace
mozilla
{
namespace
CubebUtils
{
extern
FileDescriptor
CreateAudioIPCConnection
(
)
;
}
namespace
dom
{
LazyLogModule
gProcessLog
(
"
Process
"
)
;
MOZ_RUNINIT
static
std
:
:
map
<
RemoteMediaIn
media
:
:
MediaCodecsSupported
>
sCodecsSupported
;
uint32_t
ContentParent
:
:
sMaxContentProcesses
=
0
;
LogModule
*
ContentParent
:
:
GetLog
(
)
{
return
gProcessLog
;
}
uint32_t
ContentParent
:
:
sPageLoadEventCounter
=
0
;
#
define
NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC
"
ipc
:
network
:
set
-
offline
"
#
define
NS_IPC_IOSERVICE_SET_CONNECTIVITY_TOPIC
"
ipc
:
network
:
set
-
connectivity
"
class
CycleCollectWithLogsParent
final
:
public
PCycleCollectWithLogsParent
{
public
:
MOZ_COUNTED_DTOR
(
CycleCollectWithLogsParent
)
static
bool
AllocAndSendConstructor
(
ContentParent
*
aManager
bool
aDumpAllTraces
nsICycleCollectorLogSink
*
aSink
nsIDumpGCAndCCLogsCallback
*
aCallback
)
{
CycleCollectWithLogsParent
*
actor
;
FILE
*
gcLog
;
FILE
*
ccLog
;
nsresult
rv
;
actor
=
new
CycleCollectWithLogsParent
(
aSink
aCallback
)
;
rv
=
actor
-
>
mSink
-
>
Open
(
&
gcLog
&
ccLog
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
delete
actor
;
return
false
;
}
return
aManager
-
>
SendPCycleCollectWithLogsConstructor
(
actor
aDumpAllTraces
FILEToFileDescriptor
(
gcLog
)
FILEToFileDescriptor
(
ccLog
)
)
;
}
private
:
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCloseGCLog
(
)
override
{
Unused
<
<
mSink
-
>
CloseGCLog
(
)
;
return
IPC_OK
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCloseCCLog
(
)
override
{
Unused
<
<
mSink
-
>
CloseCCLog
(
)
;
return
IPC_OK
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
)
override
{
nsCOMPtr
<
nsIFile
>
gcLog
ccLog
;
mSink
-
>
GetGcLog
(
getter_AddRefs
(
gcLog
)
)
;
mSink
-
>
GetCcLog
(
getter_AddRefs
(
ccLog
)
)
;
Unused
<
<
mCallback
-
>
OnDump
(
gcLog
ccLog
false
)
;
return
IPC_OK
(
)
;
}
virtual
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
{
}
CycleCollectWithLogsParent
(
nsICycleCollectorLogSink
*
aSink
nsIDumpGCAndCCLogsCallback
*
aCallback
)
:
mSink
(
aSink
)
mCallback
(
aCallback
)
{
MOZ_COUNT_CTOR
(
CycleCollectWithLogsParent
)
;
}
nsCOMPtr
<
nsICycleCollectorLogSink
>
mSink
;
nsCOMPtr
<
nsIDumpGCAndCCLogsCallback
>
mCallback
;
}
;
class
ContentParentsMemoryReporter
final
:
public
nsIMemoryReporter
{
~
ContentParentsMemoryReporter
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
}
;
NS_IMPL_ISUPPORTS
(
ContentParentsMemoryReporter
nsIMemoryReporter
)
NS_IMETHODIMP
ContentParentsMemoryReporter
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
AutoTArray
<
ContentParent
*
16
>
cps
;
ContentParent
:
:
GetAllEvenIfDead
(
cps
)
;
for
(
uint32_t
i
=
0
;
i
<
cps
.
Length
(
)
;
i
+
+
)
{
ContentParent
*
cp
=
cps
[
i
]
;
MessageChannel
*
channel
=
cp
-
>
GetIPCChannel
(
)
;
nsString
friendlyName
;
cp
-
>
FriendlyName
(
friendlyName
aAnonymize
)
;
cp
-
>
AddRef
(
)
;
nsrefcnt
refcnt
=
cp
-
>
Release
(
)
;
const
char
*
channelStr
=
"
no
channel
"
;
uint32_t
numQueuedMessages
=
0
;
if
(
channel
)
{
if
(
channel
-
>
IsClosed
(
)
)
{
channelStr
=
"
closed
channel
"
;
}
else
{
channelStr
=
"
open
channel
"
;
}
numQueuedMessages
=
0
;
}
nsPrintfCString
path
(
"
queued
-
ipc
-
messages
/
content
-
parent
"
"
(
%
s
pid
=
%
d
%
s
0x
%
p
refcnt
=
%
"
PRIuPTR
"
)
"
NS_ConvertUTF16toUTF8
(
friendlyName
)
.
get
(
)
cp
-
>
Pid
(
)
channelStr
static_cast
<
nsIObserver
*
>
(
cp
)
refcnt
)
;
constexpr
auto
desc
=
"
The
number
of
unset
IPC
messages
held
in
this
ContentParent
'
s
"
"
channel
.
A
large
value
here
might
indicate
that
we
'
re
leaking
"
"
messages
.
Similarly
a
ContentParent
object
for
a
process
that
'
s
no
"
"
longer
running
could
indicate
that
we
'
re
leaking
ContentParents
.
"
_ns
;
aHandleReport
-
>
Callback
(
"
"
_ns
path
KIND_OTHER
UNITS_COUNT
numQueuedMessages
desc
aData
)
;
}
return
NS_OK
;
}
nsClassHashtable
<
nsCStringHashKey
nsTArray
<
ContentParent
*
>
>
*
ContentParent
:
:
sBrowserContentParents
;
namespace
{
uint64_t
ComputeLoadedOriginHash
(
nsIPrincipal
*
aPrincipal
)
{
uint32_t
originNoSuffix
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
-
>
GetOriginNoSuffixHash
(
)
;
uint32_t
originSuffix
=
BasePrincipal
:
:
Cast
(
aPrincipal
)
-
>
GetOriginSuffixHash
(
)
;
return
(
(
uint64_t
)
originNoSuffix
)
<
<
32
|
originSuffix
;
}
ProcessID
GetTelemetryProcessID
(
const
nsACString
&
remoteType
)
{
return
remoteType
=
=
EXTENSION_REMOTE_TYPE
?
ProcessID
:
:
Extension
:
ProcessID
:
:
Content
;
}
}
StaticAutoPtr
<
LinkedList
<
ContentParent
>
>
ContentParent
:
:
sContentParents
;
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
StaticAutoPtr
<
SandboxBrokerPolicyFactory
>
ContentParent
:
:
sSandboxBrokerPolicyFactory
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
StaticAutoPtr
<
std
:
:
vector
<
std
:
:
string
>
>
ContentParent
:
:
sMacSandboxParams
;
#
endif
static
bool
sCreatedFirstContentProcess
=
false
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
static
bool
sInProcessSelector
=
false
;
#
endif
static
const
char
*
sObserverTopics
[
]
=
{
NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC
NS_IPC_IOSERVICE_SET_CONNECTIVITY_TOPIC
NS_IPC_CAPTIVE_PORTAL_SET_STATE
"
application
-
background
"
"
application
-
foreground
"
"
memory
-
pressure
"
"
child
-
gc
-
request
"
"
child
-
cc
-
request
"
"
child
-
mmu
-
request
"
"
child
-
ghost
-
request
"
"
last
-
pb
-
context
-
exited
"
"
file
-
watcher
-
update
"
#
ifdef
ACCESSIBILITY
"
a11y
-
init
-
or
-
shutdown
"
#
endif
"
cacheservice
:
empty
-
cache
"
"
intl
:
app
-
locales
-
changed
"
"
intl
:
requested
-
locales
-
changed
"
"
cookie
-
changed
"
"
private
-
cookie
-
changed
"
NS_NETWORK_LINK_TYPE_TOPIC
NS_NETWORK_TRR_MODE_CHANGED_TOPIC
"
network
:
socket
-
process
-
crashed
"
DEFAULT_TIMEZONE_CHANGED_OBSERVER_TOPIC
}
;
void
ContentParent_NotifyUpdatedDictionaries
(
)
{
ContentParent
:
:
NotifyUpdatedDictionaries
(
)
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
MakePreallocProcess
(
)
{
RefPtr
<
ContentParent
>
process
=
new
ContentParent
(
PREALLOC_REMOTE_TYPE
)
;
if
(
NS_WARN_IF
(
!
process
-
>
BeginSubprocessLaunch
(
PROCESS_PRIORITY_PREALLOC
)
)
)
{
process
-
>
LaunchSubprocessReject
(
)
;
return
nullptr
;
}
return
process
-
>
AddKeepAlive
(
0
)
;
}
void
ContentParent
:
:
StartUp
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
nsDebugImpl
:
:
SetMultiprocessMode
(
"
Parent
"
)
;
RegisterStrongMemoryReporter
(
new
ContentParentsMemoryReporter
(
)
)
;
BackgroundChild
:
:
Startup
(
)
;
ClientManager
:
:
Startup
(
)
;
Preferences
:
:
RegisterCallbackAndCall
(
&
OnFissionBlocklistPrefChange
kFissionEnforceBlockList
)
;
Preferences
:
:
RegisterCallbackAndCall
(
&
OnFissionBlocklistPrefChange
kFissionOmitBlockListValues
)
;
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
sSandboxBrokerPolicyFactory
=
new
SandboxBrokerPolicyFactory
(
)
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
sMacSandboxParams
=
new
std
:
:
vector
<
std
:
:
string
>
(
)
;
#
endif
}
void
ContentParent
:
:
ShutDown
(
)
{
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
sSandboxBrokerPolicyFactory
=
nullptr
;
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
sMacSandboxParams
=
nullptr
;
#
endif
}
uint32_t
ContentParent
:
:
GetPoolSize
(
const
nsACString
&
aContentProcessType
)
{
if
(
!
sBrowserContentParents
)
{
return
0
;
}
nsTArray
<
ContentParent
*
>
*
parents
=
sBrowserContentParents
-
>
Get
(
aContentProcessType
)
;
return
parents
?
parents
-
>
Length
(
)
:
0
;
}
nsTArray
<
ContentParent
*
>
&
ContentParent
:
:
GetOrCreatePool
(
const
nsACString
&
aContentProcessType
)
{
if
(
!
sBrowserContentParents
)
{
sBrowserContentParents
=
new
nsClassHashtable
<
nsCStringHashKey
nsTArray
<
ContentParent
*
>
>
;
}
return
*
sBrowserContentParents
-
>
GetOrInsertNew
(
aContentProcessType
)
;
}
nsDependentCSubstring
RemoteTypePrefix
(
const
nsACString
&
aContentProcessType
)
{
int32_t
equalIdx
=
aContentProcessType
.
FindChar
(
L
'
=
'
)
;
if
(
equalIdx
=
=
kNotFound
)
{
equalIdx
=
aContentProcessType
.
Length
(
)
;
}
return
StringHead
(
aContentProcessType
equalIdx
)
;
}
bool
IsWebRemoteType
(
const
nsACString
&
aContentProcessType
)
{
return
StringBeginsWith
(
aContentProcessType
DEFAULT_REMOTE_TYPE
)
;
}
bool
IsWebCoopCoepRemoteType
(
const
nsACString
&
aContentProcessType
)
{
return
StringBeginsWith
(
aContentProcessType
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
)
;
}
bool
IsExtensionRemoteType
(
const
nsACString
&
aContentProcessType
)
{
return
aContentProcessType
=
=
EXTENSION_REMOTE_TYPE
;
}
uint32_t
ContentParent
:
:
GetMaxProcessCount
(
const
nsACString
&
aContentProcessType
)
{
const
nsDependentCSubstring
processTypePrefix
=
RemoteTypePrefix
(
aContentProcessType
)
;
if
(
processTypePrefix
=
=
DEFAULT_REMOTE_TYPE
)
{
return
GetMaxWebProcessCount
(
)
;
}
nsAutoCString
processCountPref
(
"
dom
.
ipc
.
processCount
.
"
)
;
processCountPref
.
Append
(
processTypePrefix
)
;
int32_t
maxContentParents
=
Preferences
:
:
GetInt
(
processCountPref
.
get
(
)
1
)
;
if
(
maxContentParents
<
1
)
{
maxContentParents
=
1
;
}
return
static_cast
<
uint32_t
>
(
maxContentParents
)
;
}
bool
ContentParent
:
:
IsMaxProcessCountReached
(
const
nsACString
&
aContentProcessType
)
{
return
GetPoolSize
(
aContentProcessType
)
>
=
GetMaxProcessCount
(
aContentProcessType
)
;
}
void
ContentParent
:
:
ReleaseCachedProcesses
(
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ReleaseCachedProcesses
:
"
)
)
;
if
(
!
sBrowserContentParents
)
{
return
;
}
#
ifdef
DEBUG
for
(
const
auto
&
cps
:
*
sBrowserContentParents
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
%
s
:
%
zu
processes
"
PromiseFlatCString
(
cps
.
GetKey
(
)
)
.
get
(
)
cps
.
GetData
(
)
-
>
Length
(
)
)
)
;
}
#
endif
AutoTArray
<
RefPtr
<
ContentParent
>
32
>
fixArray
;
for
(
const
auto
&
contentParents
:
sBrowserContentParents
-
>
Values
(
)
)
{
for
(
auto
*
cp
:
*
contentParents
)
{
fixArray
.
AppendElement
(
cp
)
;
}
}
for
(
const
auto
&
cp
:
fixArray
)
{
cp
-
>
MaybeBeginShutDown
(
true
true
)
;
if
(
cp
-
>
IsDead
(
)
)
{
cp
-
>
ShutDownMessageManager
(
)
;
}
}
}
already_AddRefed
<
ContentParent
>
ContentParent
:
:
MinTabSelect
(
const
nsTArray
<
ContentParent
*
>
&
aContentParents
int32_t
aMaxContentParents
uint64_t
aBrowserId
)
{
uint32_t
maxSelectable
=
std
:
:
min
(
static_cast
<
uint32_t
>
(
aContentParents
.
Length
(
)
)
static_cast
<
uint32_t
>
(
aMaxContentParents
)
)
;
uint32_t
min
=
INT_MAX
;
RefPtr
<
ContentParent
>
candidate
;
for
(
uint32_t
i
=
0
;
i
<
maxSelectable
;
i
+
+
)
{
ContentParent
*
p
=
aContentParents
[
i
]
;
MOZ_DIAGNOSTIC_ASSERT
(
!
p
-
>
IsDead
(
)
)
;
if
(
p
-
>
IsShuttingDown
(
)
)
{
continue
;
}
ThreadsafeContentParentHandle
*
handle
=
p
-
>
ThreadsafeHandle
(
)
;
RecursiveMutexAutoLock
lock
(
handle
-
>
mMutex
)
;
uint32_t
keepAliveCount
=
handle
-
>
mKeepAlivesPerBrowserId
.
Count
(
)
;
if
(
handle
-
>
mKeepAlivesPerBrowserId
.
Contains
(
0
)
)
{
-
-
keepAliveCount
;
}
if
(
aBrowserId
!
=
0
&
&
handle
-
>
mKeepAlivesPerBrowserId
.
Contains
(
aBrowserId
)
)
{
-
-
keepAliveCount
;
}
if
(
keepAliveCount
<
min
)
{
candidate
=
p
;
min
=
keepAliveCount
;
}
}
if
(
min
>
0
&
&
aContentParents
.
Length
(
)
<
static_cast
<
uint32_t
>
(
aMaxContentParents
)
)
{
return
nullptr
;
}
return
candidate
.
forget
(
)
;
}
already_AddRefed
<
nsIPrincipal
>
ContentParent
:
:
CreateRemoteTypeIsolationPrincipal
(
const
nsACString
&
aRemoteType
)
{
if
(
(
RemoteTypePrefix
(
aRemoteType
)
!
=
FISSION_WEB_REMOTE_TYPE
)
&
&
!
StringBeginsWith
(
aRemoteType
WITH_COOP_COEP_REMOTE_TYPE_PREFIX
)
)
{
return
nullptr
;
}
int32_t
offset
=
aRemoteType
.
FindChar
(
'
=
'
)
+
1
;
MOZ_ASSERT
(
offset
>
1
"
can
not
extract
origin
from
that
remote
type
"
)
;
nsAutoCString
origin
(
Substring
(
aRemoteType
offset
aRemoteType
.
Length
(
)
-
offset
)
)
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
ssm
-
>
CreateContentPrincipalFromOrigin
(
origin
getter_AddRefs
(
principal
)
)
;
return
principal
.
forget
(
)
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
GetUsedBrowserProcess
(
const
nsACString
&
aRemoteType
nsTArray
<
ContentParent
*
>
&
aContentParents
uint32_t
aMaxContentParents
bool
aPreferUsed
ProcessPriority
aPriority
uint64_t
aBrowserId
)
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
AutoRestore
ar
(
sInProcessSelector
)
;
sInProcessSelector
=
true
;
#
endif
uint32_t
numberOfParents
=
aContentParents
.
Length
(
)
;
if
(
aPreferUsed
&
&
numberOfParents
)
{
aMaxContentParents
=
numberOfParents
;
}
RefPtr
<
ContentParent
>
selected
;
if
(
!
StaticPrefs
:
:
dom_ipc_disableContentProcessReuse
(
)
&
&
(
selected
=
MinTabSelect
(
aContentParents
aMaxContentParents
aBrowserId
)
)
)
{
if
(
profiler_thread_is_being_profiled_for_markers
(
)
)
{
nsPrintfCString
marker
(
"
Reused
process
%
u
"
(
unsigned
int
)
selected
-
>
ChildID
(
)
)
;
PROFILER_MARKER_TEXT
(
"
Process
"
DOM
{
}
marker
)
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
GetUsedProcess
:
Reused
process
id
=
%
p
childID
=
%
"
PRIu64
"
for
%
s
"
selected
.
get
(
)
(
uint64_t
)
selected
-
>
ChildID
(
)
PromiseFlatCString
(
aRemoteType
)
.
get
(
)
)
)
;
selected
-
>
AssertAlive
(
)
;
return
selected
-
>
AddKeepAlive
(
aBrowserId
)
;
}
UniqueContentParentKeepAlive
preallocated
;
if
(
aRemoteType
!
=
FILE_REMOTE_TYPE
&
&
aRemoteType
!
=
PRIVILEGEDABOUT_REMOTE_TYPE
&
&
aRemoteType
!
=
EXTENSION_REMOTE_TYPE
&
&
(
preallocated
=
PreallocatedProcessManager
:
:
Take
(
aRemoteType
)
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
preallocated
-
>
GetRemoteType
(
)
=
=
PREALLOC_REMOTE_TYPE
)
;
preallocated
-
>
AssertAlive
(
)
;
if
(
profiler_thread_is_being_profiled_for_markers
(
)
)
{
nsPrintfCString
marker
(
"
Assigned
preallocated
process
%
u
%
s
"
(
unsigned
int
)
preallocated
-
>
ChildID
(
)
preallocated
-
>
IsLaunching
(
)
?
"
(
still
launching
)
"
:
"
"
)
;
PROFILER_MARKER_TEXT
(
"
Process
"
DOM
{
}
marker
)
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
Adopted
preallocated
process
id
=
%
p
childID
=
%
"
PRIu64
"
for
type
%
s
%
s
"
preallocated
.
get
(
)
(
uint64_t
)
preallocated
-
>
ChildID
(
)
PromiseFlatCString
(
aRemoteType
)
.
get
(
)
preallocated
-
>
IsLaunching
(
)
?
"
(
still
launching
)
"
:
"
"
)
)
;
preallocated
-
>
mRemoteType
.
Assign
(
aRemoteType
)
;
{
RecursiveMutexAutoLock
lock
(
preallocated
-
>
mThreadsafeHandle
-
>
mMutex
)
;
preallocated
-
>
mThreadsafeHandle
-
>
mRemoteType
=
preallocated
-
>
mRemoteType
;
}
preallocated
-
>
mRemoteTypeIsolationPrincipal
=
CreateRemoteTypeIsolationPrincipal
(
aRemoteType
)
;
preallocated
-
>
AddToPool
(
aContentParents
)
;
if
(
!
preallocated
-
>
IsLaunching
(
)
)
{
Unused
<
<
preallocated
-
>
SendRemoteType
(
preallocated
-
>
mRemoteType
preallocated
-
>
mProfile
)
;
preallocated
-
>
StartRemoteWorkerService
(
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
nsAutoString
cpId
;
cpId
.
AppendInt
(
static_cast
<
uint64_t
>
(
preallocated
-
>
ChildID
(
)
)
)
;
obs
-
>
NotifyObservers
(
static_cast
<
nsIObserver
*
>
(
preallocated
.
get
(
)
)
"
process
-
type
-
set
"
cpId
.
get
(
)
)
;
preallocated
-
>
AssertAlive
(
)
;
}
}
return
preallocated
-
>
AddKeepAlive
(
aBrowserId
)
;
}
return
nullptr
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
GetNewOrUsedLaunchingBrowserProcess
(
const
nsACString
&
aRemoteType
BrowsingContextGroup
*
aGroup
ProcessPriority
aPriority
bool
aPreferUsed
uint64_t
aBrowserId
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
GetNewOrUsedProcess
for
type
%
s
"
PromiseFlatCString
(
aRemoteType
)
.
get
(
)
)
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
nullptr
;
}
UniqueContentParentKeepAlive
contentParent
;
if
(
aGroup
)
{
if
(
RefPtr
<
ContentParent
>
candidate
=
aGroup
-
>
GetHostProcess
(
aRemoteType
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
candidate
-
>
IsShuttingDown
(
)
)
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
GetNewOrUsedProcess
:
Existing
host
process
id
=
%
p
childID
=
%
"
PRIu64
"
(
launching
%
d
)
"
candidate
.
get
(
)
(
uint64_t
)
candidate
-
>
ChildID
(
)
candidate
-
>
IsLaunching
(
)
)
)
;
contentParent
=
candidate
-
>
TryAddKeepAlive
(
aBrowserId
)
;
}
}
nsTArray
<
ContentParent
*
>
&
contentParents
=
GetOrCreatePool
(
aRemoteType
)
;
if
(
!
contentParent
)
{
uint32_t
maxContentParents
=
GetMaxProcessCount
(
aRemoteType
)
;
contentParent
=
GetUsedBrowserProcess
(
aRemoteType
contentParents
maxContentParents
aPreferUsed
aPriority
aBrowserId
)
;
MOZ_DIAGNOSTIC_ASSERT_IF
(
contentParent
!
contentParent
-
>
IsShuttingDown
(
)
)
;
}
if
(
!
contentParent
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
Launching
new
process
immediately
for
type
%
s
"
PromiseFlatCString
(
aRemoteType
)
.
get
(
)
)
)
;
RefPtr
<
ContentParent
>
newCp
=
new
ContentParent
(
aRemoteType
)
;
if
(
NS_WARN_IF
(
!
newCp
-
>
BeginSubprocessLaunch
(
aPriority
)
)
)
{
newCp
-
>
LaunchSubprocessReject
(
)
;
return
nullptr
;
}
contentParent
=
newCp
-
>
AddKeepAlive
(
aBrowserId
)
;
contentParent
-
>
mIsAPreallocBlocker
=
true
;
PreallocatedProcessManager
:
:
AddBlocker
(
aRemoteType
contentParent
.
get
(
)
)
;
contentParent
-
>
AddToPool
(
contentParents
)
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
GetNewOrUsedProcess
:
new
immediate
process
id
=
%
p
childID
=
%
"
PRIu64
contentParent
.
get
(
)
(
uint64_t
)
contentParent
-
>
ChildID
(
)
)
)
;
}
contentParent
-
>
AssertAlive
(
)
;
if
(
aGroup
)
{
aGroup
-
>
EnsureHostProcess
(
contentParent
.
get
(
)
)
;
}
return
contentParent
;
}
RefPtr
<
ContentParent
:
:
LaunchPromise
>
ContentParent
:
:
GetNewOrUsedBrowserProcessAsync
(
const
nsACString
&
aRemoteType
BrowsingContextGroup
*
aGroup
ProcessPriority
aPriority
bool
aPreferUsed
uint64_t
aBrowserId
)
{
UniqueContentParentKeepAlive
contentParent
=
GetNewOrUsedLaunchingBrowserProcess
(
aRemoteType
aGroup
aPriority
aPreferUsed
aBrowserId
)
;
if
(
!
contentParent
)
{
return
LaunchPromise
:
:
CreateAndReject
(
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
__func__
)
;
}
return
contentParent
-
>
WaitForLaunchAsync
(
aPriority
aBrowserId
)
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
GetNewOrUsedBrowserProcess
(
const
nsACString
&
aRemoteType
BrowsingContextGroup
*
aGroup
ProcessPriority
aPriority
bool
aPreferUsed
uint64_t
aBrowserId
)
{
UniqueContentParentKeepAlive
contentParent
=
GetNewOrUsedLaunchingBrowserProcess
(
aRemoteType
aGroup
aPriority
aPreferUsed
aBrowserId
)
;
if
(
!
contentParent
|
|
!
contentParent
-
>
WaitForLaunchSync
(
aPriority
)
)
{
return
nullptr
;
}
return
contentParent
;
}
RefPtr
<
ContentParent
:
:
LaunchPromise
>
ContentParent
:
:
WaitForLaunchAsync
(
ProcessPriority
aPriority
uint64_t
aBrowserId
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
IsDead
(
)
)
;
UniqueContentParentKeepAlive
self
=
AddKeepAlive
(
aBrowserId
)
;
if
(
!
IsLaunching
(
)
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
WaitForLaunchAsync
:
launched
"
)
)
;
return
LaunchPromise
:
:
CreateAndResolve
(
std
:
:
move
(
self
)
__func__
)
;
}
glean
:
:
dom_contentprocess
:
:
launch_is_sync
.
EnumGet
(
glean
:
:
dom_contentprocess
:
:
LaunchIsSyncLabel
:
:
eFalse
)
.
Add
(
)
;
return
mSubprocess
-
>
WhenProcessHandleReady
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
self
=
std
:
:
move
(
self
)
aPriority
]
(
const
ProcessHandlePromise
:
:
ResolveOrRejectValue
&
aValue
)
mutable
{
if
(
aValue
.
IsResolve
(
)
&
&
self
-
>
LaunchSubprocessResolve
(
false
aPriority
)
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
WaitForLaunchAsync
:
async
now
launched
process
id
=
%
p
"
"
childID
=
%
"
PRIu64
self
.
get
(
)
(
uint64_t
)
self
-
>
ChildID
(
)
)
)
;
return
LaunchPromise
:
:
CreateAndResolve
(
std
:
:
move
(
self
)
__func__
)
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
WaitForLaunchAsync
:
async
rejected
"
)
)
;
self
-
>
LaunchSubprocessReject
(
)
;
return
LaunchPromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
)
;
}
bool
ContentParent
:
:
WaitForLaunchSync
(
ProcessPriority
aPriority
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
IsDead
(
)
)
;
if
(
!
IsLaunching
(
)
)
{
return
true
;
}
glean
:
:
dom_contentprocess
:
:
launch_is_sync
.
EnumGet
(
glean
:
:
dom_contentprocess
:
:
LaunchIsSyncLabel
:
:
eTrue
)
.
Add
(
)
;
bool
launchSuccess
=
mSubprocess
-
>
WaitForProcessHandle
(
)
;
if
(
launchSuccess
&
&
LaunchSubprocessResolve
(
true
aPriority
)
)
{
return
true
;
}
LaunchSubprocessReject
(
)
;
return
false
;
}
static
nsIDocShell
*
GetOpenerDocShellHelper
(
Element
*
aFrameElement
)
{
MOZ_ASSERT
(
aFrameElement
)
;
nsPIDOMWindowOuter
*
win
=
aFrameElement
-
>
OwnerDoc
(
)
-
>
GetWindow
(
)
;
if
(
!
win
)
{
NS_WARNING
(
"
Remote
frame
has
no
window
"
)
;
return
nullptr
;
}
nsIDocShell
*
docShell
=
win
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
NS_WARNING
(
"
Remote
frame
has
no
docshell
"
)
;
return
nullptr
;
}
return
docShell
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateClipboardContentAnalysis
(
Endpoint
<
PClipboardContentAnalysisParent
>
&
&
aParentEndpoint
)
{
if
(
mClipboardContentAnalysisCreated
)
{
return
IPC_FAIL
(
this
"
ClipboardContentAnalysisParent
already
created
"
)
;
}
mClipboardContentAnalysisCreated
=
true
;
if
(
!
mClipboardContentAnalysisThread
)
{
nsresult
rv
=
NS_NewNamedThread
(
"
BkgrndClipboard
"
getter_AddRefs
(
mClipboardContentAnalysisThread
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
IPC_FAIL
(
this
"
NS_NewNamedThread
failed
"
)
;
}
}
mClipboardContentAnalysisThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
Create
ClipboardContentAnalysisParent
"
[
threadsafeHandle
=
RefPtr
{
ThreadsafeHandle
(
)
}
parentEndpoint
=
std
:
:
move
(
aParentEndpoint
)
]
(
)
mutable
{
RefPtr
<
ClipboardContentAnalysisParent
>
actor
=
new
ClipboardContentAnalysisParent
(
std
:
:
move
(
threadsafeHandle
)
)
;
parentEndpoint
.
Bind
(
actor
)
;
}
)
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateGMPService
(
)
{
Endpoint
<
PGMPServiceParent
>
parent
;
Endpoint
<
PGMPServiceChild
>
child
;
if
(
mGMPCreated
)
{
return
IPC_FAIL
(
this
"
GMP
Service
already
created
"
)
;
}
nsresult
rv
;
rv
=
PGMPService
:
:
CreateEndpoints
(
EndpointProcInfo
:
:
Current
(
)
OtherEndpointProcInfo
(
)
&
parent
&
child
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_FAIL
(
this
"
CreateEndpoints
failed
"
)
;
}
if
(
!
GMPServiceParent
:
:
Create
(
std
:
:
move
(
parent
)
)
)
{
return
IPC_FAIL
(
this
"
GMPServiceParent
:
:
Create
failed
"
)
;
}
if
(
!
SendInitGMPService
(
std
:
:
move
(
child
)
)
)
{
return
IPC_FAIL
(
this
"
SendInitGMPService
failed
"
)
;
}
mGMPCreated
=
true
;
return
IPC_OK
(
)
;
}
IPCResult
ContentParent
:
:
RecvAttributionEvent
(
const
nsACString
&
aHost
PrivateAttributionImpressionType
aType
uint32_t
aIndex
const
nsAString
&
aAd
const
nsACString
&
aTargetHost
)
{
nsCOMPtr
<
nsIPrivateAttributionService
>
pa
=
components
:
:
PrivateAttribution
:
:
Service
(
)
;
if
(
NS_WARN_IF
(
!
pa
)
)
{
return
IPC_OK
(
)
;
}
pa
-
>
OnAttributionEvent
(
aHost
GetEnumString
(
aType
)
aIndex
aAd
aTargetHost
)
;
return
IPC_OK
(
)
;
}
IPCResult
ContentParent
:
:
RecvAttributionConversion
(
const
nsACString
&
aHost
const
nsAString
&
aTask
uint32_t
aHistogramSize
const
Maybe
<
uint32_t
>
&
aLookbackDays
const
Maybe
<
PrivateAttributionImpressionType
>
&
aImpressionType
const
nsTArray
<
nsString
>
&
aAds
const
nsTArray
<
nsCString
>
&
aSourceHosts
)
{
nsCOMPtr
<
nsIPrivateAttributionService
>
pa
=
components
:
:
PrivateAttribution
:
:
Service
(
)
;
if
(
NS_WARN_IF
(
!
pa
)
)
{
return
IPC_OK
(
)
;
}
pa
-
>
OnAttributionConversion
(
aHost
aTask
aHistogramSize
aLookbackDays
.
valueOr
(
0
)
aImpressionType
?
GetEnumString
(
*
aImpressionType
)
:
EmptyCString
(
)
aAds
aSourceHosts
)
;
return
IPC_OK
(
)
;
}
void
ContentParent
:
:
LogAndAssertFailedPrincipalValidationInfo
(
nsIPrincipal
*
aPrincipal
const
char
*
aMethod
)
{
nsAutoCString
principalScheme
principalType
spec
;
mozilla
:
:
glean
:
:
security
:
:
FissionPrincipalsExtra
extra
=
{
}
;
if
(
!
aPrincipal
)
{
principalType
.
AssignLiteral
(
"
NullPtr
"
)
;
}
else
if
(
aPrincipal
-
>
IsSystemPrincipal
(
)
)
{
principalType
.
AssignLiteral
(
"
SystemPrincipal
"
)
;
}
else
if
(
aPrincipal
-
>
GetIsExpandedPrincipal
(
)
)
{
principalType
.
AssignLiteral
(
"
ExpandedPrincipal
"
)
;
}
else
if
(
aPrincipal
-
>
GetIsContentPrincipal
(
)
)
{
principalType
.
AssignLiteral
(
"
ContentPrincipal
"
)
;
aPrincipal
-
>
GetSpec
(
spec
)
;
aPrincipal
-
>
GetScheme
(
principalScheme
)
;
extra
.
scheme
=
Some
(
principalScheme
)
;
}
else
{
principalType
.
AssignLiteral
(
"
Unknown
"
)
;
}
extra
.
principaltype
=
Some
(
principalType
)
;
extra
.
value
=
Some
(
aMethod
)
;
bool
isChromeDebuggingEnabled
=
Preferences
:
:
GetBool
(
"
devtools
.
chrome
.
enabled
"
false
)
;
if
(
!
isChromeDebuggingEnabled
)
{
glean
:
:
security
:
:
fission_principals
.
Record
(
mozilla
:
:
Some
(
extra
)
)
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Error
(
"
Receiving
unexpected
Principal
(
%
s
)
within
%
s
"
aPrincipal
&
&
aPrincipal
-
>
GetIsContentPrincipal
(
)
?
spec
.
get
(
)
:
principalType
.
get
(
)
aMethod
)
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
false
"
Receiving
unexpected
Principal
"
)
;
#
endif
}
bool
ContentParent
:
:
ValidatePrincipal
(
nsIPrincipal
*
aPrincipal
const
EnumSet
<
ValidatePrincipalOptions
>
&
aOptions
)
{
return
ValidatePrincipalCouldPotentiallyBeLoadedBy
(
aPrincipal
mRemoteType
aOptions
)
;
}
already_AddRefed
<
RemoteBrowser
>
ContentParent
:
:
CreateBrowser
(
const
TabContext
&
aContext
Element
*
aFrameElement
const
nsACString
&
aRemoteType
BrowsingContext
*
aBrowsingContext
ContentParent
*
aOpenerContentParent
)
{
AUTO_PROFILER_LABEL
(
"
ContentParent
:
:
CreateBrowser
"
OTHER
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
aBrowsingContext
-
>
Canonical
(
)
-
>
GetBrowserParent
(
)
"
BrowsingContext
must
not
have
BrowserParent
or
have
previous
"
"
BrowserParent
cleared
"
)
;
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
NS_WARNING
(
"
Ignoring
remote
browser
creation
request
during
shutdown
"
)
;
return
nullptr
;
}
nsAutoCString
remoteType
(
aRemoteType
)
;
if
(
remoteType
.
IsEmpty
(
)
)
{
remoteType
=
DEFAULT_REMOTE_TYPE
;
}
TabId
tabId
(
nsContentUtils
:
:
GenerateTabId
(
)
)
;
nsIDocShell
*
docShell
=
GetOpenerDocShellHelper
(
aFrameElement
)
;
TabId
openerTabId
;
if
(
docShell
)
{
openerTabId
=
BrowserParent
:
:
GetTabIdFrom
(
docShell
)
;
}
UniqueContentParentKeepAlive
constructorSender
;
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
"
Cannot
allocate
BrowserParent
in
content
process
"
)
;
if
(
aOpenerContentParent
&
&
!
aOpenerContentParent
-
>
IsShuttingDown
(
)
)
{
constructorSender
=
aOpenerContentParent
-
>
AddKeepAlive
(
aBrowsingContext
-
>
BrowserId
(
)
)
;
}
else
{
constructorSender
=
GetNewOrUsedBrowserProcess
(
remoteType
aBrowsingContext
-
>
Group
(
)
PROCESS_PRIORITY_FOREGROUND
false
aBrowsingContext
-
>
BrowserId
(
)
)
;
if
(
!
constructorSender
)
{
return
nullptr
;
}
}
aBrowsingContext
-
>
SetEmbedderElement
(
aFrameElement
)
;
aBrowsingContext
-
>
Group
(
)
-
>
EnsureHostProcess
(
constructorSender
.
get
(
)
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
if
(
!
treeOwner
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIWebBrowserChrome
>
wbc
=
do_GetInterface
(
treeOwner
)
;
if
(
!
wbc
)
{
return
nullptr
;
}
uint32_t
chromeFlags
=
0
;
wbc
-
>
GetChromeFlags
(
&
chromeFlags
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
=
do_QueryInterface
(
docShell
)
;
if
(
loadContext
&
&
loadContext
-
>
UsePrivateBrowsing
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_WINDOW
;
}
if
(
loadContext
&
&
loadContext
-
>
UseRemoteTabs
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
;
}
if
(
loadContext
&
&
loadContext
-
>
UseRemoteSubframes
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
;
}
if
(
tabId
=
=
0
)
{
return
nullptr
;
}
aBrowsingContext
-
>
Canonical
(
)
-
>
SetOwnerProcessId
(
constructorSender
-
>
ChildID
(
)
)
;
RefPtr
<
BrowserParent
>
browserParent
=
new
BrowserParent
(
constructorSender
.
get
(
)
tabId
aContext
aBrowsingContext
-
>
Canonical
(
)
chromeFlags
)
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
NS_WARN_IF
(
!
cpm
)
)
{
return
nullptr
;
}
cpm
-
>
RegisterRemoteFrame
(
browserParent
)
;
ManagedEndpoint
<
PBrowserChild
>
childEp
=
constructorSender
-
>
OpenPBrowserEndpoint
(
browserParent
)
;
if
(
NS_WARN_IF
(
!
childEp
.
IsValid
(
)
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIPrincipal
>
initialPrincipal
=
NullPrincipal
:
:
Create
(
aBrowsingContext
-
>
OriginAttributesRef
(
)
)
;
WindowGlobalInit
windowInit
=
WindowGlobalActor
:
:
AboutBlankInitializer
(
aBrowsingContext
initialPrincipal
)
;
RefPtr
<
WindowGlobalParent
>
windowParent
=
WindowGlobalParent
:
:
CreateDisconnected
(
windowInit
)
;
if
(
NS_WARN_IF
(
!
windowParent
)
)
{
return
nullptr
;
}
ManagedEndpoint
<
PWindowGlobalChild
>
windowEp
=
browserParent
-
>
OpenPWindowGlobalEndpoint
(
windowParent
)
;
if
(
NS_WARN_IF
(
!
windowEp
.
IsValid
(
)
)
)
{
return
nullptr
;
}
bool
ok
=
constructorSender
-
>
SendConstructBrowser
(
std
:
:
move
(
childEp
)
std
:
:
move
(
windowEp
)
tabId
aContext
.
AsIPCTabContext
(
)
windowInit
chromeFlags
constructorSender
-
>
ChildID
(
)
constructorSender
-
>
IsForBrowser
(
)
true
)
;
if
(
NS_WARN_IF
(
!
ok
)
)
{
return
nullptr
;
}
aBrowsingContext
-
>
Canonical
(
)
-
>
SetCurrentBrowserParent
(
browserParent
)
;
windowParent
-
>
Init
(
)
;
RefPtr
<
BrowserHost
>
browserHost
=
new
BrowserHost
(
browserParent
)
;
browserParent
-
>
SetOwnerElement
(
aFrameElement
)
;
return
browserHost
.
forget
(
)
;
}
void
ContentParent
:
:
GetAll
(
nsTArray
<
ContentParent
*
>
&
aArray
)
{
aArray
.
Clear
(
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
aArray
.
AppendElement
(
cp
)
;
}
}
void
ContentParent
:
:
GetAllEvenIfDead
(
nsTArray
<
ContentParent
*
>
&
aArray
)
{
aArray
.
Clear
(
)
;
for
(
auto
*
cp
:
AllProcesses
(
eAll
)
)
{
aArray
.
AppendElement
(
cp
)
;
}
}
void
ContentParent
:
:
BroadcastStringBundle
(
const
StringBundleDescriptor
&
aBundle
)
{
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
AutoTArray
<
StringBundleDescriptor
1
>
array
;
array
.
AppendElement
(
StringBundleDescriptor
(
aBundle
.
bundleURL
(
)
aBundle
.
mapHandle
(
)
.
Clone
(
)
)
)
;
Unused
<
<
cp
-
>
SendRegisterStringBundles
(
std
:
:
move
(
array
)
)
;
}
}
void
ContentParent
:
:
BroadcastShmBlockAdded
(
uint32_t
aGeneration
uint32_t
aIndex
)
{
auto
*
pfl
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
ReadOnlySharedMemoryHandle
handle
=
pfl
-
>
ShareShmBlockToProcess
(
aIndex
cp
-
>
Pid
(
)
)
;
if
(
!
handle
.
IsValid
(
)
)
{
continue
;
}
Unused
<
<
cp
-
>
SendFontListShmBlockAdded
(
aGeneration
aIndex
std
:
:
move
(
handle
)
)
;
}
}
void
ContentParent
:
:
BroadcastThemeUpdate
(
widget
:
:
ThemeChangeKind
aKind
)
{
const
FullLookAndFeel
&
lnf
=
*
RemoteLookAndFeel
:
:
ExtractData
(
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
Unused
<
<
cp
-
>
SendThemeChanged
(
lnf
aKind
)
;
}
}
void
ContentParent
:
:
BroadcastMediaCodecsSupportedUpdate
(
RemoteMediaIn
aLocation
const
media
:
:
MediaCodecsSupported
&
aSupported
)
{
sCodecsSupported
[
aLocation
]
=
aSupported
;
for
(
auto
*
cp
:
AllProcesses
(
eAll
)
)
{
Unused
<
<
cp
-
>
SendUpdateMediaCodecsSupported
(
aLocation
aSupported
)
;
}
nsCString
supportString
;
media
:
:
MCSInfo
:
:
GetMediaCodecsSupportedString
(
supportString
aSupported
)
;
LOGPDM
(
"
Broadcast
support
from
'
%
s
'
support
=
%
s
"
RemoteMediaInToStr
(
aLocation
)
supportString
.
get
(
)
)
;
media
:
:
MCSInfo
:
:
AddSupport
(
aSupported
)
;
auto
fullSupport
=
media
:
:
MCSInfo
:
:
GetSupport
(
)
;
supportString
.
Truncate
(
)
;
media
:
:
MCSInfo
:
:
GetMediaCodecsSupportedString
(
supportString
fullSupport
)
;
if
(
nsCOMPtr
<
nsIGfxInfo
>
gfxInfo
=
components
:
:
GfxInfo
:
:
Service
(
)
)
{
gfxInfo
-
>
SetCodecSupportInfo
(
supportString
)
;
}
}
const
nsACString
&
ContentParent
:
:
GetRemoteType
(
)
const
{
return
mRemoteType
;
}
static
StaticRefPtr
<
nsIAsyncShutdownClient
>
sXPCOMShutdownClient
;
static
StaticRefPtr
<
nsIAsyncShutdownClient
>
sProfileBeforeChangeClient
;
static
StaticRefPtr
<
nsIAsyncShutdownClient
>
sAppShutdownConfirmedClient
;
void
ContentParent
:
:
Init
(
)
{
MOZ_ASSERT
(
sXPCOMShutdownClient
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
size_t
length
=
std
:
:
size
(
sObserverTopics
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
obs
-
>
AddObserver
(
this
sObserverTopics
[
i
]
false
)
;
}
}
if
(
obs
)
{
nsAutoString
cpId
;
cpId
.
AppendInt
(
static_cast
<
uint64_t
>
(
this
-
>
ChildID
(
)
)
)
;
obs
-
>
NotifyObservers
(
static_cast
<
nsIObserver
*
>
(
this
)
"
ipc
:
content
-
created
"
cpId
.
get
(
)
)
;
}
#
ifdef
ACCESSIBILITY
if
(
GetAccService
(
)
)
{
Unused
<
<
SendActivateA11y
(
nsAccessibilityService
:
:
GetActiveCacheDomains
(
)
)
;
}
#
endif
Unused
<
<
SendInitProfiler
(
ProfilerParent
:
:
CreateForProcess
(
OtherPid
(
)
)
)
;
RefPtr
<
GeckoMediaPluginServiceParent
>
gmps
(
GeckoMediaPluginServiceParent
:
:
GetSingleton
(
)
)
;
if
(
gmps
)
{
gmps
-
>
UpdateContentProcessGMPCapabilities
(
this
)
;
}
for
(
const
Pref
&
pref
:
mQueuedPrefs
)
{
Unused
<
<
NS_WARN_IF
(
!
SendPreferenceUpdate
(
pref
)
)
;
}
mQueuedPrefs
.
Clear
(
)
;
Unused
<
<
SendInitNextGenLocalStorageEnabled
(
NextGenLocalStorageEnabled
(
)
)
;
nsCOMPtr
<
nsIIOService
>
io
(
do_GetIOService
(
)
)
;
MOZ_ASSERT
(
io
"
No
IO
service
for
SimpleURI
scheme
broadcast
to
content
"
)
;
nsTArray
<
nsCString
>
remoteSchemes
;
MOZ_ALWAYS_SUCCEEDS
(
io
-
>
GetSimpleURIUnknownRemoteSchemes
(
remoteSchemes
)
)
;
Unused
<
<
SendSimpleURIUnknownRemoteSchemes
(
std
:
:
move
(
remoteSchemes
)
)
;
}
void
ContentParent
:
:
AsyncSendShutDownMessage
(
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
AsyncSendShutDownMessage
id
=
%
p
childID
=
%
"
PRIu64
this
(
uint64_t
)
this
-
>
ChildID
(
)
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
IsDead
(
)
)
;
if
(
mShutdownPending
|
|
!
CanSend
(
)
)
{
return
;
}
GetCurrentSerialEventTarget
(
)
-
>
Dispatch
(
NewRunnableMethod
<
ShutDownMethod
>
(
"
dom
:
:
ContentParent
:
:
ShutDownProcess
"
this
&
ContentParent
:
:
ShutDownProcess
SEND_SHUTDOWN_MESSAGE
)
)
;
}
void
MaybeLogBlockShutdownDiagnostics
(
ContentParent
*
aSelf
const
char
*
aMsg
const
char
*
aFile
int32_t
aLine
)
{
#
if
defined
(
MOZ_DIAGNOSTIC_ASSERT_ENABLED
)
if
(
aSelf
-
>
IsBlockingShutdown
(
)
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Info
(
"
ContentParent
:
id
=
%
p
childID
=
%
"
PRIu64
"
pid
=
%
d
-
%
s
at
%
s
(
%
d
)
"
aSelf
(
uint64_t
)
aSelf
-
>
ChildID
(
)
aSelf
-
>
Pid
(
)
aMsg
aFile
aLine
)
)
;
}
#
else
Unused
<
<
aSelf
;
Unused
<
<
aMsg
;
Unused
<
<
aFile
;
Unused
<
<
aLine
;
#
endif
}
bool
ContentParent
:
:
ShutDownProcess
(
ShutDownMethod
aMethod
)
{
bool
result
=
false
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ShutDownProcess
:
id
=
%
p
childID
=
%
"
PRIu64
this
(
uint64_t
)
this
-
>
ChildID
(
)
)
)
;
MarkAsDead
(
)
;
if
(
aMethod
=
=
SEND_SHUTDOWN_MESSAGE
)
{
if
(
!
mShutdownPending
)
{
if
(
CanSend
(
)
)
{
SetInputPriorityEventEnabled
(
false
)
;
SignalImpendingShutdownToContentJS
(
)
;
if
(
StaticPrefs
:
:
threads_use_low_power_enabled
(
)
&
&
StaticPrefs
:
:
threads_lower_mainthread_priority_in_background_enabled
(
)
)
{
SetMainThreadQoSPriority
(
nsIThread
:
:
QOS_PRIORITY_NORMAL
)
;
}
if
(
SendShutdown
(
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
ShutDownProcess
:
Sent
shutdown
message
.
"
__FILE__
__LINE__
)
;
mShutdownPending
=
true
;
StartForceKillTimer
(
)
;
result
=
true
;
}
else
{
MaybeLogBlockShutdownDiagnostics
(
this
"
ShutDownProcess
:
!
!
!
Send
shutdown
message
failed
!
!
!
!
"
__FILE__
__LINE__
)
;
}
}
else
{
MaybeLogBlockShutdownDiagnostics
(
this
"
ShutDownProcess
:
!
!
!
!
CanSend
!
!
!
"
__FILE__
__LINE__
)
;
}
}
else
{
MaybeLogBlockShutdownDiagnostics
(
this
"
ShutDownProcess
:
Shutdown
already
pending
.
"
__FILE__
__LINE__
)
;
result
=
true
;
}
return
result
;
}
using
mozilla
:
:
dom
:
:
quota
:
:
QuotaManagerService
;
if
(
QuotaManagerService
*
qms
=
QuotaManagerService
:
:
GetOrCreate
(
)
)
{
qms
-
>
AbortOperationsForProcess
(
mChildID
)
;
}
if
(
aMethod
=
=
CLOSE_CHANNEL
)
{
if
(
!
mCalledClose
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
ShutDownProcess
:
Closing
channel
.
"
__FILE__
__LINE__
)
;
mCalledClose
=
true
;
Close
(
)
;
}
result
=
true
;
}
ShutDownMessageManager
(
)
;
return
result
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyShutdownSuccess
(
)
{
if
(
!
mShutdownPending
)
{
return
IPC_FAIL
(
this
"
RecvNotifyShutdownSuccess
without
mShutdownPending
"
)
;
}
mIsNotifiedShutdownSuccess
=
true
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvFinishShutdown
(
)
{
if
(
!
mShutdownPending
)
{
return
IPC_FAIL
(
this
"
RecvFinishShutdown
without
mShutdownPending
"
)
;
}
if
(
mCalledClose
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
RecvFinishShutdown
:
Channel
already
closed
.
"
__FILE__
__LINE__
)
;
}
ShutDownProcess
(
CLOSE_CHANNEL
)
;
return
IPC_OK
(
)
;
}
void
ContentParent
:
:
ShutDownMessageManager
(
)
{
if
(
!
mMessageManager
)
{
return
;
}
mMessageManager
-
>
SetOsPid
(
-
1
)
;
mMessageManager
-
>
Disconnect
(
)
;
mMessageManager
=
nullptr
;
}
void
ContentParent
:
:
AddToPool
(
nsTArray
<
ContentParent
*
>
&
aPool
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsInPool
)
;
AssertAlive
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mCalledKillHard
)
;
aPool
.
AppendElement
(
this
)
;
mIsInPool
=
true
;
}
void
ContentParent
:
:
RemoveFromPool
(
nsTArray
<
ContentParent
*
>
&
aPool
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mIsInPool
)
;
aPool
.
RemoveElement
(
this
)
;
mIsInPool
=
false
;
}
void
ContentParent
:
:
AssertNotInPool
(
)
{
MOZ_RELEASE_ASSERT
(
!
mIsInPool
)
;
MOZ_RELEASE_ASSERT
(
!
sBrowserContentParents
|
|
!
sBrowserContentParents
-
>
Contains
(
mRemoteType
)
|
|
!
sBrowserContentParents
-
>
Get
(
mRemoteType
)
-
>
Contains
(
this
)
)
;
for
(
const
auto
&
group
:
mGroups
)
{
MOZ_RELEASE_ASSERT
(
group
-
>
GetHostProcess
(
mRemoteType
)
!
=
this
"
still
a
host
process
for
one
of
our
groups
?
"
)
;
}
}
void
ContentParent
:
:
AssertAlive
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsSignaledImpendingShutdown
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
IsDead
(
)
)
;
}
void
ContentParent
:
:
RemoveFromList
(
)
{
if
(
!
mIsInPool
)
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
AssertNotInPool
(
)
;
#
endif
return
;
}
for
(
const
auto
&
group
:
mGroups
)
{
group
-
>
RemoveHostProcess
(
this
)
;
}
if
(
sBrowserContentParents
)
{
if
(
auto
entry
=
sBrowserContentParents
-
>
Lookup
(
mRemoteType
)
)
{
const
auto
&
contentParents
=
entry
.
Data
(
)
;
RemoveFromPool
(
*
contentParents
)
;
if
(
contentParents
-
>
IsEmpty
(
)
)
{
entry
.
Remove
(
)
;
}
}
if
(
sBrowserContentParents
-
>
IsEmpty
(
)
)
{
delete
sBrowserContentParents
;
sBrowserContentParents
=
nullptr
;
}
}
}
void
ContentParent
:
:
MarkAsDead
(
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
Marking
ContentProcess
id
=
%
p
childID
=
%
"
PRIu64
"
as
dead
"
this
(
uint64_t
)
this
-
>
ChildID
(
)
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
sInProcessSelector
)
;
RemoveFromList
(
)
;
{
RecursiveMutexAutoLock
lock
(
mThreadsafeHandle
-
>
mMutex
)
;
mThreadsafeHandle
-
>
mShutdownStarted
=
true
;
}
PreallocatedProcessManager
:
:
Erase
(
this
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
&
&
!
defined
(
MOZ_PROFILE_GENERATE
)
if
(
IsAlive
(
)
)
{
nsCOMPtr
<
nsIEventTarget
>
launcherThread
(
GetIPCLauncher
(
)
)
;
MOZ_ASSERT
(
launcherThread
)
;
auto
procType
=
java
:
:
GeckoProcessType
:
:
CONTENT
(
)
;
auto
selector
=
java
:
:
GeckoProcessManager
:
:
Selector
:
:
New
(
procType
OtherPid
(
)
)
;
launcherThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
ContentParent
:
:
MarkAsDead
"
[
selector
=
java
:
:
GeckoProcessManager
:
:
Selector
:
:
GlobalRef
(
selector
)
]
(
)
{
java
:
:
GeckoProcessManager
:
:
ShutdownProcess
(
selector
)
;
}
)
)
;
}
#
endif
mLifecycleState
=
LifecycleState
:
:
DEAD
;
}
void
ContentParent
:
:
ProcessingError
(
Result
aCode
const
char
*
aReason
)
{
if
(
MsgDropped
=
=
aCode
)
{
return
;
}
#
ifndef
FUZZING
KillHard
(
aReason
)
;
#
endif
if
(
CanSend
(
)
)
{
GetIPCChannel
(
)
-
>
InduceConnectionError
(
)
;
}
}
void
ContentParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
#
ifdef
FUZZING_SNAPSHOT
MOZ_FUZZING_IPC_DROP_PEER
(
"
ContentParent
:
:
ActorDestroy
"
)
;
#
endif
if
(
mSendShutdownTimer
)
{
mSendShutdownTimer
-
>
Cancel
(
)
;
mSendShutdownTimer
=
nullptr
;
}
if
(
mForceKillTimer
)
{
mForceKillTimer
-
>
Cancel
(
)
;
mForceKillTimer
=
nullptr
;
}
RemoveShutdownBlockers
(
)
;
if
(
mHangMonitorActor
)
{
ProcessHangMonitor
:
:
RemoveProcess
(
mHangMonitorActor
)
;
mHangMonitorActor
=
nullptr
;
}
RefPtr
<
FileSystemSecurity
>
fss
=
FileSystemSecurity
:
:
Get
(
)
;
if
(
fss
)
{
fss
-
>
Forget
(
ChildID
(
)
)
;
}
if
(
why
=
=
NormalShutdown
&
&
!
mCalledClose
)
{
mCalledClose
=
true
;
}
ShutDownProcess
(
CLOSE_CHANNEL
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
size_t
length
=
std
:
:
size
(
sObserverTopics
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
obs
-
>
RemoveObserver
(
static_cast
<
nsIObserver
*
>
(
this
)
sObserverTopics
[
i
]
)
;
}
}
Preferences
:
:
RemoveObserver
(
this
"
"
)
;
gfxVars
:
:
RemoveReceiver
(
this
)
;
if
(
GPUProcessManager
*
gpu
=
GPUProcessManager
:
:
Get
(
)
)
{
gpu
-
>
RemoveListener
(
this
)
;
}
RecvRemoveGeolocationListener
(
)
;
#
ifdef
MOZ_WMF_CDM
if
(
mOriginsListCallback
)
{
nsCOMPtr
<
nsIWindowsMediaFoundationCDMOriginsListService
>
rsService
=
do_GetService
(
"
mozilla
.
org
/
media
/
wmfcdm
-
origins
-
list
;
1
"
)
;
if
(
rsService
)
{
rsService
-
>
RemoveCallback
(
mOriginsListCallback
)
;
}
mOriginsListCallback
=
nullptr
;
}
#
endif
JSActorDidDestroy
(
)
;
if
(
obs
)
{
RefPtr
<
nsHashPropertyBag
>
props
=
new
nsHashPropertyBag
(
)
;
props
-
>
SetPropertyAsUint64
(
u
"
childID
"
_ns
mChildID
)
;
if
(
AbnormalShutdown
=
=
why
)
{
glean
:
:
subprocess
:
:
abnormal_abort
.
Get
(
"
content
"
_ns
)
.
Add
(
1
)
;
props
-
>
SetPropertyAsBool
(
u
"
abnormal
"
_ns
true
)
;
nsAutoString
dumpID
;
nsAutoCString
processType
;
if
(
mCrashReporter
)
{
if
(
!
mCreatedPairedMinidumps
)
{
#
if
defined
(
XP_MACOSX
)
RefPtr
<
nsAvailableMemoryWatcherBase
>
memWatcher
;
memWatcher
=
nsAvailableMemoryWatcherBase
:
:
GetSingleton
(
)
;
memWatcher
-
>
AddChildAnnotations
(
mCrashReporter
)
;
#
endif
mCrashReporter
-
>
GenerateCrashReport
(
)
;
}
if
(
mCrashReporter
-
>
HasMinidump
(
)
)
{
dumpID
=
mCrashReporter
-
>
MinidumpID
(
)
;
}
processType
=
mCrashReporter
-
>
ProcessType
(
)
;
}
else
{
HandleOrphanedMinidump
(
&
dumpID
)
;
processType
=
XRE_GeckoProcessTypeToString
(
GeckoProcessType_Content
)
;
}
if
(
!
dumpID
.
IsEmpty
(
)
)
{
props
-
>
SetPropertyAsAString
(
u
"
dumpID
"
_ns
dumpID
)
;
}
if
(
!
processType
.
IsEmpty
(
)
)
{
props
-
>
SetPropertyAsACString
(
u
"
processType
"
_ns
processType
)
;
}
}
nsAutoString
cpId
;
cpId
.
AppendInt
(
static_cast
<
uint64_t
>
(
this
-
>
ChildID
(
)
)
)
;
obs
-
>
NotifyObservers
(
(
nsIPropertyBag2
*
)
props
"
ipc
:
content
-
shutdown
"
cpId
.
get
(
)
)
;
}
if
(
mIdleListeners
.
Length
(
)
>
0
)
{
nsCOMPtr
<
nsIUserIdleService
>
idleService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
)
;
if
(
idleService
)
{
RefPtr
<
ParentIdleListener
>
listener
;
for
(
const
auto
&
lentry
:
mIdleListeners
)
{
listener
=
static_cast
<
ParentIdleListener
*
>
(
lentry
.
get
(
)
)
;
idleService
-
>
RemoveIdleObserver
(
listener
listener
-
>
mTime
)
;
}
}
mIdleListeners
.
Clear
(
)
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
destroying
Subprocess
in
ActorDestroy
:
ContentParent
id
=
%
p
"
"
mSubprocess
id
=
%
p
handle
%
"
PRIuPTR
this
mSubprocess
mSubprocess
?
(
uintptr_t
)
mSubprocess
-
>
GetChildProcessHandle
(
)
:
-
1
)
)
;
if
(
GetCurrentSerialEventTarget
(
)
)
{
GetCurrentSerialEventTarget
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
DelayedDeleteSubprocessRunnable
"
[
subprocess
=
mSubprocess
]
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
destroyed
Subprocess
in
ActorDestroy
:
Subprocess
id
=
%
p
handle
"
"
%
"
PRIuPTR
subprocess
subprocess
?
(
uintptr_t
)
subprocess
-
>
GetChildProcessHandle
(
)
:
-
1
)
)
;
subprocess
-
>
Destroy
(
)
;
}
)
)
;
}
mSubprocess
=
nullptr
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
cpm
)
{
cpm
-
>
RemoveContentProcess
(
this
-
>
ChildID
(
)
)
;
}
if
(
mDriverCrashGuard
)
{
mDriverCrashGuard
-
>
NotifyCrashed
(
)
;
}
BlobURLProtocolHandler
:
:
RemoveDataEntriesPerContentParent
(
ChildID
(
)
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
AssertNotInPool
(
)
;
#
endif
BrowsingContext
:
:
DiscardFromContentParent
(
this
)
;
const
nsTHashSet
<
RefPtr
<
BrowsingContextGroup
>
>
groups
=
std
:
:
move
(
mGroups
)
;
for
(
const
auto
&
group
:
groups
)
{
group
-
>
Unsubscribe
(
this
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mGroups
.
IsEmpty
(
)
)
;
mPendingLoadStates
.
Clear
(
)
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
TryAddKeepAlive
(
uint64_t
aBrowserId
)
{
UniqueContentParentKeepAlive
keepAlive
=
UniqueContentParentKeepAliveFromThreadsafe
(
mThreadsafeHandle
-
>
TryAddKeepAlive
(
aBrowserId
)
)
;
if
(
keepAlive
&
&
mMaybeBeginShutdownRunner
)
{
mMaybeBeginShutdownRunner
-
>
Cancel
(
)
;
mMaybeBeginShutdownRunner
=
nullptr
;
}
return
keepAlive
;
}
UniqueContentParentKeepAlive
ContentParent
:
:
AddKeepAlive
(
uint64_t
aBrowserId
)
{
UniqueContentParentKeepAlive
keepAlive
=
TryAddKeepAlive
(
aBrowserId
)
;
MOZ_DIAGNOSTIC_ASSERT
(
keepAlive
"
ContentParent
is
already
dead
"
)
;
return
keepAlive
;
}
void
ContentParent
:
:
RemoveKeepAlive
(
uint64_t
aBrowserId
)
{
AssertIsOnMainThread
(
)
;
{
RecursiveMutexAutoLock
lock
(
mThreadsafeHandle
-
>
mMutex
)
;
auto
entry
=
mThreadsafeHandle
-
>
mKeepAlivesPerBrowserId
.
Lookup
(
aBrowserId
)
;
MOZ_RELEASE_ASSERT
(
entry
"
No
KeepAlive
for
this
BrowserId
"
)
;
if
(
!
-
-
entry
.
Data
(
)
)
{
entry
.
Remove
(
)
;
}
}
MaybeBeginShutDown
(
)
;
}
void
ContentParent
:
:
MaybeBeginShutDown
(
bool
aImmediate
bool
aIgnoreKeepAlivePref
)
{
AssertIsOnMainThread
(
)
;
MOZ_ASSERT
(
!
aIgnoreKeepAlivePref
|
|
aImmediate
"
aIgnoreKeepAlivePref
requires
aImmediate
"
)
;
bool
immediate
=
aImmediate
|
|
IsDead
(
)
|
|
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
|
|
StaticPrefs
:
:
dom_ipc_processReuse_unusedGraceMs
(
)
=
=
0
;
auto
cancelIdleTask
=
MakeScopeExit
(
[
&
]
{
if
(
mMaybeBeginShutdownRunner
)
{
mMaybeBeginShutdownRunner
-
>
Cancel
(
)
;
mMaybeBeginShutdownRunner
=
nullptr
;
}
}
)
;
{
RecursiveMutexAutoLock
lock
(
mThreadsafeHandle
-
>
mMutex
)
;
if
(
IsLaunching
(
)
|
|
!
mThreadsafeHandle
-
>
mKeepAlivesPerBrowserId
.
IsEmpty
(
)
)
{
return
;
}
if
(
!
aIgnoreKeepAlivePref
&
&
mIsInPool
&
&
!
mRemoteType
.
Contains
(
'
=
'
)
&
&
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
auto
*
contentParents
=
sBrowserContentParents
-
>
Get
(
mRemoteType
)
;
MOZ_RELEASE_ASSERT
(
contentParents
"
mIsInPool
yet
no
entry
for
mRemoteType
in
sBrowserContentParents
?
"
)
;
nsAutoCString
keepAlivePref
(
"
dom
.
ipc
.
keepProcessesAlive
.
"
)
;
keepAlivePref
.
Append
(
mRemoteType
)
;
int32_t
processesToKeepAlive
=
0
;
if
(
NS_SUCCEEDED
(
Preferences
:
:
GetInt
(
keepAlivePref
.
get
(
)
&
processesToKeepAlive
)
)
&
&
contentParents
-
>
Length
(
)
<
=
static_cast
<
size_t
>
(
processesToKeepAlive
)
)
{
return
;
}
}
if
(
immediate
)
{
mThreadsafeHandle
-
>
mShutdownStarted
=
true
;
}
}
if
(
!
immediate
)
{
cancelIdleTask
.
release
(
)
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
MaybeBeginShutDown
(
%
d
)
would
begin
shutdown
%
s
"
OtherChildID
(
)
mMaybeBeginShutdownRunner
?
"
already
delayed
"
:
"
delaying
"
)
)
;
if
(
!
mMaybeBeginShutdownRunner
)
{
TimeDuration
startDelay
=
TimeDuration
:
:
FromMilliseconds
(
StaticPrefs
:
:
dom_ipc_processReuse_unusedGraceMs
(
)
)
;
TimeDuration
maxDelay
=
startDelay
+
TimeDuration
:
:
FromSeconds
(
1
)
;
mMaybeBeginShutdownRunner
=
IdleTaskRunner
:
:
Create
(
[
self
=
RefPtr
{
this
}
]
(
TimeStamp
)
-
>
bool
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
MaybeBeginShutDown
(
%
d
)
resuming
after
delay
"
self
-
>
OtherChildID
(
)
)
)
;
self
-
>
MaybeBeginShutDown
(
true
)
;
return
true
;
}
"
ContentParent
:
:
IdleMaybeBeginShutdown
"
_ns
startDelay
maxDelay
TimeDuration
:
:
FromMilliseconds
(
3
)
false
[
]
{
return
false
;
}
)
;
}
return
;
}
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
MaybeBeginShutDown
(
%
d
)
shutdown
starting
(
%
u
bps
)
"
OtherChildID
(
)
ManagedPBrowserParent
(
)
.
Count
(
)
)
)
;
MarkAsDead
(
)
;
SignalImpendingShutdownToContentJS
(
)
;
if
(
ManagedPBrowserParent
(
)
.
Count
(
)
>
0
)
{
StartSendShutdownTimer
(
)
;
}
else
{
AsyncSendShutDownMessage
(
)
;
}
}
void
ContentParent
:
:
StartSendShutdownTimer
(
)
{
if
(
mSendShutdownTimer
|
|
!
CanSend
(
)
)
{
return
;
}
uint32_t
timeoutSecs
=
StaticPrefs
:
:
dom_ipc_tabs_shutdownTimeoutSecs
(
)
;
if
(
timeoutSecs
>
0
)
{
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mSendShutdownTimer
)
ContentParent
:
:
SendShutdownTimerCallback
this
timeoutSecs
*
1000
nsITimer
:
:
TYPE_ONE_SHOT
"
dom
:
:
ContentParent
:
:
StartSendShutdownTimer
"
_ns
)
;
MOZ_ASSERT
(
mSendShutdownTimer
)
;
}
}
void
ContentParent
:
:
StartForceKillTimer
(
)
{
if
(
mForceKillTimer
|
|
!
CanSend
(
)
)
{
return
;
}
uint32_t
timeoutSecs
=
StaticPrefs
:
:
dom_ipc_tabs_shutdownTimeoutSecs
(
)
;
if
(
timeoutSecs
>
0
)
{
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mForceKillTimer
)
ContentParent
:
:
ForceKillTimerCallback
this
timeoutSecs
*
1000
nsITimer
:
:
TYPE_ONE_SHOT
"
dom
:
:
ContentParent
:
:
StartForceKillTimer
"
_ns
)
;
MOZ_ASSERT
(
mForceKillTimer
)
;
}
}
TestShellParent
*
ContentParent
:
:
CreateTestShell
(
)
{
RefPtr
<
TestShellParent
>
actor
=
new
TestShellParent
(
)
;
if
(
!
SendPTestShellConstructor
(
actor
)
)
{
return
nullptr
;
}
return
actor
;
}
bool
ContentParent
:
:
DestroyTestShell
(
TestShellParent
*
aTestShell
)
{
return
PTestShellParent
:
:
Send__delete__
(
aTestShell
)
;
}
TestShellParent
*
ContentParent
:
:
GetTestShellSingleton
(
)
{
PTestShellParent
*
p
=
LoneManagedOrNullAsserts
(
ManagedPTestShellParent
(
)
)
;
return
static_cast
<
TestShellParent
*
>
(
p
)
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
void
ContentParent
:
:
AppendDynamicSandboxParams
(
std
:
:
vector
<
std
:
:
string
>
&
aArgs
)
{
if
(
GetRemoteType
(
)
=
=
FILE_REMOTE_TYPE
)
{
MacSandboxInfo
:
:
AppendFileAccessParam
(
aArgs
true
)
;
}
}
static
void
CacheSandboxParams
(
std
:
:
vector
<
std
:
:
string
>
&
aCachedParams
)
{
MOZ_ASSERT
(
aCachedParams
.
empty
(
)
)
;
MacSandboxInfo
info
;
info
.
type
=
MacSandboxType_Content
;
info
.
level
=
GetEffectiveContentSandboxLevel
(
)
;
if
(
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
|
|
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
)
{
info
.
shouldLog
=
true
;
}
if
(
!
StaticPrefs
:
:
media_cubeb_sandbox
(
)
)
{
info
.
hasAudio
=
true
;
}
if
(
!
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
content
.
mac
.
disconnect
-
windowserver
"
)
|
|
!
Preferences
:
:
GetBool
(
"
webgl
.
out
-
of
-
process
"
)
)
{
info
.
hasWindowServer
=
true
;
}
nsAutoCString
appPath
;
if
(
!
nsMacUtilsImpl
:
:
GetAppPath
(
appPath
)
)
{
MOZ_CRASH
(
"
Failed
to
get
app
dir
paths
"
)
;
}
info
.
appPath
=
appPath
.
get
(
)
;
nsAutoCString
testingReadPath1
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
mac
.
testing_read_path1
"
testingReadPath1
)
;
if
(
!
testingReadPath1
.
IsEmpty
(
)
)
{
info
.
testingReadPath1
=
testingReadPath1
.
get
(
)
;
}
nsAutoCString
testingReadPath2
;
Preferences
:
:
GetCString
(
"
security
.
sandbox
.
content
.
mac
.
testing_read_path2
"
testingReadPath2
)
;
if
(
!
testingReadPath2
.
IsEmpty
(
)
)
{
info
.
testingReadPath2
=
testingReadPath2
.
get
(
)
;
}
nsresult
rv
;
if
(
!
mozilla
:
:
IsPackagedBuild
(
)
)
{
nsCOMPtr
<
nsIFile
>
repoDir
;
rv
=
nsMacUtilsImpl
:
:
GetRepoDir
(
getter_AddRefs
(
repoDir
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Failed
to
get
path
to
repo
dir
"
)
;
}
nsCString
repoDirPath
;
Unused
<
<
repoDir
-
>
GetNativePath
(
repoDirPath
)
;
info
.
testingReadPath3
=
repoDirPath
.
get
(
)
;
nsCOMPtr
<
nsIFile
>
objDir
;
rv
=
nsMacUtilsImpl
:
:
GetObjDir
(
getter_AddRefs
(
objDir
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
MOZ_CRASH
(
"
Failed
to
get
path
to
build
object
dir
"
)
;
}
nsCString
objDirPath
;
Unused
<
<
objDir
-
>
GetNativePath
(
objDirPath
)
;
info
.
testingReadPath4
=
objDirPath
.
get
(
)
;
}
#
ifdef
DEBUG
nsAutoCString
bloatLogDirPath
;
if
(
NS_SUCCEEDED
(
nsMacUtilsImpl
:
:
GetBloatLogDir
(
bloatLogDirPath
)
)
)
{
info
.
debugWriteDir
=
bloatLogDirPath
.
get
(
)
;
}
#
endif
info
.
AppendAsParams
(
aCachedParams
)
;
}
void
ContentParent
:
:
AppendSandboxParams
(
std
:
:
vector
<
std
:
:
string
>
&
aArgs
)
{
MOZ_ASSERT
(
sMacSandboxParams
!
=
nullptr
)
;
if
(
sMacSandboxParams
-
>
empty
(
)
)
{
CacheSandboxParams
(
*
sMacSandboxParams
)
;
MOZ_ASSERT
(
!
sMacSandboxParams
-
>
empty
(
)
)
;
}
aArgs
.
insert
(
aArgs
.
end
(
)
sMacSandboxParams
-
>
begin
(
)
sMacSandboxParams
-
>
end
(
)
)
;
AppendDynamicSandboxParams
(
aArgs
)
;
}
#
endif
bool
ContentParent
:
:
BeginSubprocessLaunch
(
ProcessPriority
aPriority
)
{
AUTO_PROFILER_LABEL
(
"
ContentParent
:
:
LaunchSubprocess
"
OTHER
)
;
AddShutdownBlockers
(
)
;
if
(
!
ContentProcessManager
:
:
GetSingleton
(
)
)
{
MOZ_ASSERT
(
false
"
Unable
to
acquire
ContentProcessManager
singleton
!
"
)
;
return
false
;
}
geckoargs
:
:
ChildProcessArgs
extraArgs
;
geckoargs
:
:
sIsForBrowser
.
Put
(
IsForBrowser
(
)
extraArgs
)
;
geckoargs
:
:
sNotForBrowser
.
Put
(
!
IsForBrowser
(
)
extraArgs
)
;
mPrefSerializer
=
MakeUnique
<
mozilla
:
:
ipc
:
:
SharedPreferenceSerializer
>
(
)
;
if
(
!
mPrefSerializer
-
>
SerializeToSharedMemory
(
GeckoProcessType_Content
GetRemoteType
(
)
)
)
{
NS_WARNING
(
"
SharedPreferenceSerializer
:
:
SerializeToSharedMemory
failed
"
)
;
MarkAsDead
(
)
;
return
false
;
}
mPrefSerializer
-
>
AddSharedPrefCmdLineArgs
(
*
mSubprocess
extraArgs
)
;
:
:
mozilla
:
:
ipc
:
:
ExportSharedJSInit
(
*
mSubprocess
extraArgs
)
;
Preferences
:
:
AddStrongObserver
(
this
"
"
)
;
geckoargs
:
:
sSafeMode
.
Put
(
gSafeMode
extraArgs
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
IsContentSandboxEnabled
(
)
)
{
AppendSandboxParams
(
extraArgs
.
mArgs
)
;
mSubprocess
-
>
DisableOSActivityMode
(
)
;
}
#
endif
nsCString
parentBuildID
(
mozilla
:
:
PlatformBuildID
(
)
)
;
geckoargs
:
:
sParentBuildID
.
Put
(
parentBuildID
.
get
(
)
extraArgs
)
;
#
ifdef
MOZ_WIDGET_GTK
if
(
StaticPrefs
:
:
dom_ipc_avoid_gtk
(
)
&
&
widget
:
:
GdkIsX11Display
(
)
)
{
mSubprocess
-
>
SetEnv
(
"
MOZ_HEADLESS
"
"
1
"
)
;
}
#
endif
mLaunchYieldTS
=
TimeStamp
:
:
Now
(
)
;
return
mSubprocess
-
>
AsyncLaunch
(
std
:
:
move
(
extraArgs
)
)
;
}
void
ContentParent
:
:
LaunchSubprocessReject
(
)
{
NS_WARNING
(
"
failed
to
launch
child
in
the
parent
"
)
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
failed
to
launch
child
in
the
parent
"
)
)
;
mPrefSerializer
=
nullptr
;
if
(
mIsAPreallocBlocker
)
{
PreallocatedProcessManager
:
:
RemoveBlocker
(
mRemoteType
this
)
;
mIsAPreallocBlocker
=
false
;
}
MarkAsDead
(
)
;
RemoveShutdownBlockers
(
)
;
}
bool
ContentParent
:
:
LaunchSubprocessResolve
(
bool
aIsSync
ProcessPriority
aPriority
)
{
AUTO_PROFILER_LABEL
(
"
ContentParent
:
:
LaunchSubprocess
:
:
resolve
"
OTHER
)
;
if
(
mLaunchResolved
)
{
MOZ_ASSERT
(
sCreatedFirstContentProcess
)
;
MOZ_ASSERT
(
!
mPrefSerializer
)
;
MOZ_ASSERT
(
mLifecycleState
!
=
LifecycleState
:
:
LAUNCHING
)
;
return
mLaunchResolvedOk
;
}
mLaunchResolved
=
true
;
mPrefSerializer
=
nullptr
;
const
auto
launchResumeTS
=
TimeStamp
:
:
Now
(
)
;
if
(
profiler_thread_is_being_profiled_for_markers
(
)
)
{
nsPrintfCString
marker
(
"
Process
start
%
s
for
%
u
"
mIsAPreallocBlocker
?
"
(
immediate
)
"
:
"
"
(
unsigned
int
)
ChildID
(
)
)
;
PROFILER_MARKER_TEXT
(
mIsAPreallocBlocker
?
ProfilerString8View
(
"
Process
Immediate
Launch
"
)
:
ProfilerString8View
(
"
Process
Launch
"
)
DOM
MarkerTiming
:
:
Interval
(
mLaunchTS
launchResumeTS
)
marker
)
;
}
if
(
!
sCreatedFirstContentProcess
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
obs
-
>
NotifyObservers
(
nullptr
"
ipc
:
first
-
content
-
process
-
created
"
nullptr
)
;
sCreatedFirstContentProcess
=
true
;
}
mSubprocess
-
>
TakeInitialEndpoint
(
)
.
Bind
(
this
)
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
!
cpm
)
{
NS_WARNING
(
"
immediately
shutting
-
down
caused
by
our
shutdown
"
)
;
ShutDownProcess
(
SEND_SHUTDOWN_MESSAGE
)
;
return
false
;
}
cpm
-
>
AddContentProcess
(
this
)
;
#
ifdef
MOZ_CODE_COVERAGE
Unused
<
<
SendShareCodeCoverageMutex
(
CodeCoverageHandler
:
:
Get
(
)
-
>
GetMutexHandle
(
)
)
;
#
endif
if
(
IsDead
(
)
)
{
NS_WARNING
(
"
immediately
shutting
-
down
already
-
dead
process
"
)
;
ShutDownProcess
(
SEND_SHUTDOWN_MESSAGE
)
;
return
false
;
}
MOZ_ASSERT
(
mLifecycleState
=
=
LifecycleState
:
:
LAUNCHING
)
;
mLifecycleState
=
LifecycleState
:
:
ALIVE
;
if
(
!
InitInternal
(
aPriority
)
)
{
NS_WARNING
(
"
failed
to
initialize
child
in
the
parent
"
)
;
ShutDownProcess
(
SEND_SHUTDOWN_MESSAGE
)
;
return
false
;
}
mHangMonitorActor
=
ProcessHangMonitor
:
:
AddProcess
(
this
)
;
SetReplyTimeoutMs
(
StaticPrefs
:
:
dom_ipc_cpow_timeout
(
)
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
nsAutoString
cpId
;
cpId
.
AppendInt
(
static_cast
<
uint64_t
>
(
this
-
>
ChildID
(
)
)
)
;
obs
-
>
NotifyObservers
(
static_cast
<
nsIObserver
*
>
(
this
)
"
ipc
:
content
-
initializing
"
cpId
.
get
(
)
)
;
}
Init
(
)
;
mLifecycleState
=
LifecycleState
:
:
INITIALIZED
;
if
(
aIsSync
)
{
glean
:
:
dom_contentprocess
:
:
sync_launch
.
AccumulateRawDuration
(
TimeStamp
:
:
Now
(
)
-
mLaunchTS
)
;
}
else
{
glean
:
:
dom_contentprocess
:
:
launch_total
.
AccumulateRawDuration
(
TimeStamp
:
:
Now
(
)
-
mLaunchTS
)
;
glean
:
:
dom_contentprocess
:
:
launch_mainthread
.
AccumulateRawDuration
(
(
mLaunchYieldTS
-
mLaunchTS
)
+
(
TimeStamp
:
:
Now
(
)
-
launchResumeTS
)
)
;
}
mLaunchResolvedOk
=
true
;
return
true
;
}
static
bool
IsFileContent
(
const
nsACString
&
aRemoteType
)
{
return
aRemoteType
=
=
FILE_REMOTE_TYPE
;
}
ContentParent
:
:
ContentParent
(
const
nsACString
&
aRemoteType
)
:
mSubprocess
(
new
GeckoChildProcessHost
(
GeckoProcessType_Content
IsFileContent
(
aRemoteType
)
)
)
mLaunchTS
(
TimeStamp
:
:
Now
(
)
)
mLaunchYieldTS
(
mLaunchTS
)
mIsAPreallocBlocker
(
false
)
mRemoteType
(
aRemoteType
)
mChildID
(
mSubprocess
-
>
GetChildID
(
)
)
mGeolocationWatchID
(
-
1
)
mThreadsafeHandle
(
new
ThreadsafeContentParentHandle
(
this
mChildID
mRemoteType
)
)
mLifecycleState
(
LifecycleState
:
:
LAUNCHING
)
mIsForBrowser
(
!
mRemoteType
.
IsEmpty
(
)
)
mCalledClose
(
false
)
mCalledKillHard
(
false
)
mCreatedPairedMinidumps
(
false
)
mShutdownPending
(
false
)
mLaunchResolved
(
false
)
mLaunchResolvedOk
(
false
)
mIsRemoteInputEventQueueEnabled
(
false
)
mIsInputPriorityEventEnabled
(
false
)
mIsInPool
(
false
)
mGMPCreated
(
false
)
mClipboardContentAnalysisCreated
(
false
)
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
mBlockShutdownCalled
(
false
)
#
endif
mHangMonitorActor
(
nullptr
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Wrong
thread
!
"
)
;
mRemoteTypeIsolationPrincipal
=
CreateRemoteTypeIsolationPrincipal
(
aRemoteType
)
;
if
(
!
sContentParents
)
{
sContentParents
=
new
LinkedList
<
ContentParent
>
(
)
;
}
sContentParents
-
>
insertBack
(
this
)
;
mMessageManager
=
nsFrameMessageManager
:
:
NewProcessMessageManager
(
true
)
;
#
if
defined
(
XP_WIN
)
GetIPCChannel
(
)
-
>
SetChannelFlags
(
MessageChannel
:
:
REQUIRE_DEFERRED_MESSAGE_PROTECTION
)
;
#
endif
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
CreateSubprocess
:
ContentParent
id
=
%
p
mSubprocess
id
=
%
p
childID
=
%
d
"
this
mSubprocess
mSubprocess
-
>
GetChildID
(
)
)
)
;
}
ContentParent
:
:
~
ContentParent
(
)
{
if
(
mSendShutdownTimer
)
{
mSendShutdownTimer
-
>
Cancel
(
)
;
}
if
(
mForceKillTimer
)
{
mForceKillTimer
-
>
Cancel
(
)
;
}
AssertIsOnMainThread
(
)
;
mThreadsafeHandle
-
>
mWeakActor
=
nullptr
;
if
(
mIsAPreallocBlocker
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
Removing
blocker
on
ContentProcess
id
=
%
p
childID
=
%
"
PRIu64
"
destruction
"
this
(
uint64_t
)
this
-
>
ChildID
(
)
)
)
;
PreallocatedProcessManager
:
:
RemoveBlocker
(
mRemoteType
this
)
;
mIsAPreallocBlocker
=
false
;
}
AssertNotInPool
(
)
;
if
(
mSubprocess
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
DestroySubprocess
:
ContentParent
id
=
%
p
childID
=
%
"
PRIu64
"
mSubprocess
id
=
%
p
handle
"
"
%
"
PRIuPTR
this
(
uint64_t
)
this
-
>
ChildID
(
)
mSubprocess
mSubprocess
?
(
uintptr_t
)
mSubprocess
-
>
GetChildProcessHandle
(
)
:
-
1
)
)
;
mSubprocess
-
>
Destroy
(
)
;
}
}
bool
ContentParent
:
:
InitInternal
(
ProcessPriority
aInitialPriority
)
{
if
(
PastShutdownPhase
(
ShutdownPhase
:
:
XPCOMShutdown
)
)
{
return
false
;
}
XPCOMInitData
xpcomInit
;
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ContentParent
:
:
InitInternal
:
id
=
%
p
childID
=
%
"
PRIu64
(
void
*
)
this
(
uint64_t
)
this
-
>
ChildID
(
)
)
)
;
nsCOMPtr
<
nsIIOService
>
io
(
do_GetIOService
(
)
)
;
MOZ_ASSERT
(
io
"
No
IO
service
?
"
)
;
DebugOnly
<
nsresult
>
rv
=
io
-
>
GetOffline
(
&
xpcomInit
.
isOffline
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
getting
offline
?
"
)
;
rv
=
io
-
>
GetConnectivity
(
&
xpcomInit
.
isConnected
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
getting
connectivity
?
"
)
;
xpcomInit
.
captivePortalState
(
)
=
nsICaptivePortalService
:
:
UNKNOWN
;
nsCOMPtr
<
nsICaptivePortalService
>
cps
=
do_GetService
(
NS_CAPTIVEPORTAL_CONTRACTID
)
;
if
(
cps
)
{
cps
-
>
GetState
(
&
xpcomInit
.
captivePortalState
(
)
)
;
}
if
(
StaticPrefs
:
:
fission_processProfileName
(
)
)
{
nsCOMPtr
<
nsIToolkitProfileService
>
profileSvc
=
do_GetService
(
NS_PROFILESERVICE_CONTRACTID
)
;
if
(
profileSvc
)
{
nsCOMPtr
<
nsIToolkitProfile
>
currentProfile
;
nsresult
rv
=
profileSvc
-
>
GetCurrentProfile
(
getter_AddRefs
(
currentProfile
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
currentProfile
)
{
currentProfile
-
>
GetName
(
mProfile
)
;
}
}
}
nsIBidiKeyboard
*
bidi
=
nsContentUtils
:
:
GetBidiKeyboard
(
)
;
xpcomInit
.
isLangRTL
(
)
=
false
;
xpcomInit
.
haveBidiKeyboards
(
)
=
false
;
if
(
bidi
)
{
bidi
-
>
IsLangRTL
(
&
xpcomInit
.
isLangRTL
(
)
)
;
bidi
-
>
GetHaveBidiKeyboards
(
&
xpcomInit
.
haveBidiKeyboards
(
)
)
;
}
RefPtr
<
mozSpellChecker
>
spellChecker
(
mozSpellChecker
:
:
Create
(
)
)
;
MOZ_ASSERT
(
spellChecker
"
No
spell
checker
?
"
)
;
spellChecker
-
>
GetDictionaryList
(
&
xpcomInit
.
dictionaries
(
)
)
;
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocalesAsBCP47
(
xpcomInit
.
appLocales
(
)
)
;
LocaleService
:
:
GetInstance
(
)
-
>
GetRequestedLocales
(
xpcomInit
.
requestedLocales
(
)
)
;
L10nRegistry
:
:
GetParentProcessFileSourceDescriptors
(
xpcomInit
.
l10nFileSources
(
)
)
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
"
mozilla
.
org
/
widget
/
clipboard
;
1
"
)
)
;
MOZ_ASSERT
(
clipboard
"
No
clipboard
?
"
)
;
MOZ_ASSERT
(
clipboard
-
>
IsClipboardTypeSupported
(
nsIClipboard
:
:
kGlobalClipboard
)
"
We
should
always
support
the
global
clipboard
.
"
)
;
xpcomInit
.
clipboardCaps
(
)
.
supportsSelectionClipboard
(
)
=
clipboard
-
>
IsClipboardTypeSupported
(
nsIClipboard
:
:
kSelectionClipboard
)
;
xpcomInit
.
clipboardCaps
(
)
.
supportsFindClipboard
(
)
=
clipboard
-
>
IsClipboardTypeSupported
(
nsIClipboard
:
:
kFindClipboard
)
;
xpcomInit
.
clipboardCaps
(
)
.
supportsSelectionCache
(
)
=
clipboard
-
>
IsClipboardTypeSupported
(
nsIClipboard
:
:
kSelectionCache
)
;
auto
initialData
=
MakeUnique
<
StructuredCloneData
>
(
)
;
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
if
(
ssm
)
{
ssm
-
>
CloneDomainPolicy
(
&
xpcomInit
.
domainPolicy
(
)
)
;
if
(
ParentProcessMessageManager
*
mm
=
nsFrameMessageManager
:
:
sParentProcessManager
)
{
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
)
)
{
MOZ_CRASH
(
)
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
init
(
jsapi
.
cx
(
)
)
;
IgnoredErrorResult
rv
;
mm
-
>
GetInitialProcessData
(
jsapi
.
cx
(
)
&
init
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
MOZ_CRASH
(
)
;
}
initialData
-
>
Write
(
jsapi
.
cx
(
)
init
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
MOZ_CRASH
(
)
;
}
}
}
SystemFontList
fontList
;
gfxPlatform
:
:
GetPlatform
(
)
-
>
ReadSystemFontList
(
&
fontList
)
;
const
FullLookAndFeel
&
lnf
=
*
RemoteLookAndFeel
:
:
ExtractData
(
)
;
nsTArray
<
ReadOnlySharedMemoryHandle
>
sharedFontListBlocks
;
gfxPlatformFontList
:
:
PlatformFontList
(
)
-
>
ShareFontListToProcess
(
&
sharedFontListBlocks
OtherPid
(
)
)
;
auto
*
sheetCache
=
GlobalStyleSheetCache
:
:
Singleton
(
)
;
if
(
StyleSheet
*
ucs
=
sheetCache
-
>
GetUserContentSheet
(
)
)
{
xpcomInit
.
userContentSheetURL
(
)
=
ucs
-
>
GetSheetURI
(
)
;
}
else
{
xpcomInit
.
userContentSheetURL
(
)
=
nullptr
;
}
gfxPlatform
:
:
GetPlatform
(
)
-
>
BuildContentDeviceData
(
&
xpcomInit
.
contentDeviceData
(
)
)
;
xpcomInit
.
gfxNonDefaultVarUpdates
(
)
=
gfxVars
:
:
FetchNonDefaultVars
(
)
;
gfxVars
:
:
AddReceiver
(
this
)
;
nsCOMPtr
<
nsIGfxInfo
>
gfxInfo
=
components
:
:
GfxInfo
:
:
Service
(
)
;
if
(
gfxInfo
)
{
GfxInfoBase
*
gfxInfoRaw
=
static_cast
<
GfxInfoBase
*
>
(
gfxInfo
.
get
(
)
)
;
xpcomInit
.
gfxFeatureStatus
(
)
=
gfxInfoRaw
-
>
GetAllFeatures
(
)
;
}
TelemetryIPC
:
:
GetDynamicScalarDefinitions
(
xpcomInit
.
dynamicScalarDefs
(
)
)
;
for
(
auto
const
&
[
location
supported
]
:
sCodecsSupported
)
{
Unused
<
<
SendUpdateMediaCodecsSupported
(
location
supported
)
;
}
ScreenManager
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screenManager
.
CopyScreensToRemote
(
this
)
;
Maybe
<
ReadOnlySharedMemoryHandle
>
sharedUASheetHandle
;
uintptr_t
sharedUASheetAddress
=
sheetCache
-
>
GetSharedMemoryAddress
(
)
;
if
(
ReadOnlySharedMemoryHandle
handle
=
sheetCache
-
>
CloneHandle
(
)
)
{
sharedUASheetHandle
.
emplace
(
std
:
:
move
(
handle
)
)
;
}
else
{
sharedUASheetAddress
=
0
;
}
bool
isReadyForBackgroundProcessing
=
false
;
#
if
defined
(
XP_WIN
)
RefPtr
<
DllServices
>
dllSvc
(
DllServices
:
:
Get
(
)
)
;
isReadyForBackgroundProcessing
=
dllSvc
-
>
IsReadyForBackgroundProcessing
(
)
;
#
endif
xpcomInit
.
perfStatsMask
(
)
=
PerfStats
:
:
GetCollectionMask
(
)
;
nsCOMPtr
<
nsIDNSService
>
dns
=
do_GetService
(
NS_DNSSERVICE_CONTRACTID
)
;
dns
-
>
GetTrrDomain
(
xpcomInit
.
trrDomain
(
)
)
;
nsIDNSService
:
:
ResolverMode
mode
;
dns
-
>
GetCurrentTrrMode
(
&
mode
)
;
xpcomInit
.
trrMode
(
)
=
mode
;
xpcomInit
.
trrModeFromPref
(
)
=
static_cast
<
nsIDNSService
:
:
ResolverMode
>
(
StaticPrefs
:
:
network_trr_mode
(
)
)
;
Unused
<
<
SendSetXPCOMProcessAttributes
(
xpcomInit
initialData
lnf
fontList
std
:
:
move
(
sharedUASheetHandle
)
sharedUASheetAddress
std
:
:
move
(
sharedFontListBlocks
)
isReadyForBackgroundProcessing
)
;
ipc
:
:
WritableSharedMap
*
sharedData
=
nsFrameMessageManager
:
:
sParentProcessManager
-
>
SharedData
(
)
;
sharedData
-
>
Flush
(
)
;
sharedData
-
>
SendTo
(
this
)
;
nsCOMPtr
<
nsIChromeRegistry
>
registrySvc
=
nsChromeRegistry
:
:
GetService
(
)
;
nsChromeRegistryChrome
*
chromeRegistry
=
static_cast
<
nsChromeRegistryChrome
*
>
(
registrySvc
.
get
(
)
)
;
chromeRegistry
-
>
SendRegisteredChrome
(
this
)
;
nsCOMPtr
<
nsIStringBundleService
>
stringBundleService
=
components
:
:
StringBundle
:
:
Service
(
)
;
stringBundleService
-
>
SendContentBundles
(
this
)
;
if
(
gAppData
)
{
nsCString
version
(
gAppData
-
>
version
)
;
nsCString
buildID
(
gAppData
-
>
buildID
)
;
nsCString
name
(
gAppData
-
>
name
)
;
nsCString
UAName
(
gAppData
-
>
UAName
)
;
nsCString
ID
(
gAppData
-
>
ID
)
;
nsCString
vendor
(
gAppData
-
>
vendor
)
;
nsCString
sourceURL
(
gAppData
-
>
sourceURL
)
;
nsCString
updateURL
(
gAppData
-
>
updateURL
)
;
Unused
<
<
SendAppInfo
(
version
buildID
name
UAName
ID
vendor
sourceURL
updateURL
)
;
}
Unused
<
<
SendRemoteType
(
mRemoteType
mProfile
)
;
if
(
mRemoteType
!
=
PREALLOC_REMOTE_TYPE
)
{
StartRemoteWorkerService
(
)
;
}
ScriptPreloader
:
:
InitContentChild
(
*
this
)
;
mMessageManager
-
>
InitWithCallback
(
this
)
;
mMessageManager
-
>
SetOsPid
(
Pid
(
)
)
;
ProcessPriorityManager
:
:
SetProcessPriority
(
this
aInitialPriority
)
;
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
;
Endpoint
<
PCompositorManagerChild
>
compositor
;
Endpoint
<
PImageBridgeChild
>
imageBridge
;
Endpoint
<
PVRManagerChild
>
vrBridge
;
Endpoint
<
PRemoteMediaManagerChild
>
videoManager
;
AutoTArray
<
uint32_t
3
>
namespaces
;
if
(
!
gpm
-
>
CreateContentBridges
(
OtherEndpointProcInfo
(
)
&
compositor
&
imageBridge
&
vrBridge
&
videoManager
mChildID
&
namespaces
)
)
{
MOZ_ASSERT
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
;
return
false
;
}
Unused
<
<
SendInitRendering
(
std
:
:
move
(
compositor
)
std
:
:
move
(
imageBridge
)
std
:
:
move
(
vrBridge
)
std
:
:
move
(
videoManager
)
namespaces
)
;
gpm
-
>
AddListener
(
this
)
;
if
(
StaticPrefs
:
:
media_rdd_process_enabled
(
)
)
{
RDDProcessManager
*
rdd
=
RDDProcessManager
:
:
Get
(
)
;
rdd
-
>
LaunchRDDProcess
(
)
;
}
nsStyleSheetService
*
sheetService
=
nsStyleSheetService
:
:
GetInstance
(
)
;
if
(
sheetService
)
{
for
(
StyleSheet
*
sheet
:
*
sheetService
-
>
AgentStyleSheets
(
)
)
{
Unused
<
<
SendLoadAndRegisterSheet
(
sheet
-
>
GetSheetURI
(
)
nsIStyleSheetService
:
:
AGENT_SHEET
)
;
}
for
(
StyleSheet
*
sheet
:
*
sheetService
-
>
UserStyleSheets
(
)
)
{
Unused
<
<
SendLoadAndRegisterSheet
(
sheet
-
>
GetSheetURI
(
)
nsIStyleSheetService
:
:
USER_SHEET
)
;
}
for
(
StyleSheet
*
sheet
:
*
sheetService
-
>
AuthorStyleSheets
(
)
)
{
Unused
<
<
SendLoadAndRegisterSheet
(
sheet
-
>
GetSheetURI
(
)
nsIStyleSheetService
:
:
AUTHOR_SHEET
)
;
}
}
#
ifdef
MOZ_WMF_CDM
if
(
!
mOriginsListCallback
&
&
IsMediaFoundationCDMPlaybackEnabled
(
)
)
{
mOriginsListCallback
=
new
OriginsListLoadCallback
(
this
)
;
nsCOMPtr
<
nsIWindowsMediaFoundationCDMOriginsListService
>
rsService
=
do_GetService
(
"
mozilla
.
org
/
media
/
wmfcdm
-
origins
-
list
;
1
"
)
;
if
(
rsService
)
{
rsService
-
>
SetCallback
(
mOriginsListCallback
)
;
}
}
#
endif
#
ifdef
MOZ_SANDBOX
bool
shouldSandbox
=
true
;
Maybe
<
FileDescriptor
>
brokerFd
;
#
if
!
defined
(
XP_MACOSX
)
shouldSandbox
=
IsContentSandboxEnabled
(
)
;
#
endif
#
ifdef
XP_LINUX
if
(
shouldSandbox
)
{
MOZ_ASSERT
(
!
mSandboxBroker
)
;
bool
isFileProcess
=
mRemoteType
=
=
FILE_REMOTE_TYPE
;
UniquePtr
<
SandboxBroker
:
:
Policy
>
policy
=
sSandboxBrokerPolicyFactory
-
>
GetContentPolicy
(
Pid
(
)
isFileProcess
)
;
if
(
policy
)
{
brokerFd
=
Some
(
FileDescriptor
(
)
)
;
mSandboxBroker
=
SandboxBroker
:
:
Create
(
std
:
:
move
(
policy
)
Pid
(
)
brokerFd
.
ref
(
)
)
;
if
(
!
mSandboxBroker
)
{
KillHard
(
"
SandboxBroker
:
:
Create
failed
"
)
;
return
false
;
}
MOZ_ASSERT
(
brokerFd
.
ref
(
)
.
IsValid
(
)
)
;
}
}
#
endif
if
(
shouldSandbox
&
&
!
SendSetProcessSandbox
(
brokerFd
)
)
{
KillHard
(
"
SandboxInitFailed
"
)
;
}
#
endif
EnsurePermissionsByKey
(
"
"
_ns
"
"
_ns
)
;
{
nsTArray
<
BlobURLRegistrationData
>
registrations
;
BlobURLProtocolHandler
:
:
ForEachBlobURL
(
[
&
]
(
BlobImpl
*
aBlobImpl
nsIPrincipal
*
aPrincipal
const
nsCString
&
aPartitionKey
const
nsACString
&
aURI
bool
aRevoked
)
{
if
(
!
BlobURLProtocolHandler
:
:
IsBlobURLBroadcastPrincipal
(
aPrincipal
)
)
{
return
true
;
}
IPCBlob
ipcBlob
;
nsresult
rv
=
IPCBlobUtils
:
:
Serialize
(
aBlobImpl
ipcBlob
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
registrations
.
AppendElement
(
BlobURLRegistrationData
(
nsCString
(
aURI
)
ipcBlob
WrapNotNull
(
aPrincipal
)
nsCString
(
aPartitionKey
)
aRevoked
)
)
;
rv
=
TransmitPermissionsForPrincipal
(
aPrincipal
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
return
true
;
}
)
;
if
(
!
registrations
.
IsEmpty
(
)
)
{
Unused
<
<
SendInitBlobURLs
(
registrations
)
;
}
}
RefPtr
<
JSActorService
>
actorSvc
=
JSActorService
:
:
GetSingleton
(
)
;
if
(
actorSvc
)
{
nsTArray
<
JSProcessActorInfo
>
contentInfos
;
actorSvc
-
>
GetJSProcessActorInfos
(
contentInfos
)
;
nsTArray
<
JSWindowActorInfo
>
windowInfos
;
actorSvc
-
>
GetJSWindowActorInfos
(
windowInfos
)
;
Unused
<
<
SendInitJSActorInfos
(
contentInfos
windowInfos
)
;
}
for
(
const
auto
&
group
:
mGroups
)
{
group
-
>
Subscribe
(
this
)
;
}
MaybeEnableRemoteInputEventQueue
(
)
;
return
true
;
}
bool
ContentParent
:
:
IsAlive
(
)
const
{
return
mLifecycleState
=
=
LifecycleState
:
:
ALIVE
|
|
mLifecycleState
=
=
LifecycleState
:
:
INITIALIZED
;
}
bool
ContentParent
:
:
IsInitialized
(
)
const
{
return
mLifecycleState
=
=
LifecycleState
:
:
INITIALIZED
;
}
int32_t
ContentParent
:
:
Pid
(
)
const
{
if
(
!
mSubprocess
)
{
return
-
1
;
}
auto
pid
=
mSubprocess
-
>
GetChildProcessId
(
)
;
if
(
pid
=
=
0
)
{
return
-
1
;
}
return
ReleaseAssertedCast
<
int32_t
>
(
pid
)
;
}
void
ContentParent
:
:
OnCompositorUnexpectedShutdown
(
)
{
GPUProcessManager
*
gpm
=
GPUProcessManager
:
:
Get
(
)
;
Endpoint
<
PCompositorManagerChild
>
compositor
;
Endpoint
<
PImageBridgeChild
>
imageBridge
;
Endpoint
<
PVRManagerChild
>
vrBridge
;
Endpoint
<
PRemoteMediaManagerChild
>
videoManager
;
AutoTArray
<
uint32_t
3
>
namespaces
;
if
(
!
gpm
-
>
CreateContentBridges
(
OtherEndpointProcInfo
(
)
&
compositor
&
imageBridge
&
vrBridge
&
videoManager
mChildID
&
namespaces
)
)
{
MOZ_ASSERT
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
;
return
;
}
Unused
<
<
SendReinitRendering
(
std
:
:
move
(
compositor
)
std
:
:
move
(
imageBridge
)
std
:
:
move
(
vrBridge
)
std
:
:
move
(
videoManager
)
namespaces
)
;
}
void
ContentParent
:
:
OnCompositorDeviceReset
(
)
{
Unused
<
<
SendReinitRenderingForDeviceReset
(
)
;
}
void
ContentParent
:
:
MaybeEnableRemoteInputEventQueue
(
)
{
MOZ_ASSERT
(
!
mIsRemoteInputEventQueueEnabled
)
;
mIsRemoteInputEventQueueEnabled
=
true
;
Unused
<
<
SendSetInputEventQueueEnabled
(
)
;
SetInputPriorityEventEnabled
(
true
)
;
}
void
ContentParent
:
:
SetInputPriorityEventEnabled
(
bool
aEnabled
)
{
if
(
!
mIsRemoteInputEventQueueEnabled
|
|
mIsInputPriorityEventEnabled
=
=
aEnabled
)
{
return
;
}
mIsInputPriorityEventEnabled
=
aEnabled
;
Unused
<
<
SendSuspendInputEventQueue
(
)
;
Unused
<
<
SendFlushInputEventQueue
(
)
;
Unused
<
<
SendResumeInputEventQueue
(
)
;
}
void
ContentParent
:
:
OnVarChanged
(
const
nsTArray
<
GfxVarUpdate
>
&
aVar
)
{
if
(
!
CanSend
(
)
)
{
return
;
}
Unused
<
<
SendVarUpdate
(
aVar
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetClipboard
(
const
IPCTransferable
&
aTransferable
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
const
MaybeDiscarded
<
WindowContext
>
&
aRequestingWindowContext
)
{
if
(
!
ValidatePrincipal
(
aTransferable
.
dataPrincipal
(
)
{
ValidatePrincipalOptions
:
:
AllowNullPtr
ValidatePrincipalOptions
:
:
AllowExpanded
ValidatePrincipalOptions
:
:
AllowSystem
}
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aTransferable
.
dataPrincipal
(
)
__func__
)
;
}
nsresult
rv
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
nsCOMPtr
<
nsITransferable
>
trans
=
do_CreateInstance
(
"
mozilla
.
org
/
widget
/
transferable
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
trans
-
>
Init
(
nullptr
)
;
rv
=
nsContentUtils
:
:
IPCTransferableToTransferable
(
aTransferable
true
trans
true
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
RefPtr
<
WindowGlobalParent
>
window
;
if
(
!
aRequestingWindowContext
.
IsDiscarded
(
)
)
{
window
=
aRequestingWindowContext
.
get_canonical
(
)
;
}
clipboard
-
>
SetData
(
trans
nullptr
aWhichClipboard
window
)
;
return
IPC_OK
(
)
;
}
Result
<
nsCOMPtr
<
nsITransferable
>
nsresult
>
ContentParent
:
:
CreateClipboardTransferable
(
const
nsTArray
<
nsCString
>
&
aTypes
)
{
nsresult
rv
;
nsCOMPtr
<
nsITransferable
>
trans
=
do_CreateInstance
(
"
mozilla
.
org
/
widget
/
transferable
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
MOZ_TRY
(
trans
-
>
Init
(
nullptr
)
)
;
trans
-
>
SetIsPrivateData
(
true
)
;
for
(
uint32_t
t
=
0
;
t
<
aTypes
.
Length
(
)
;
t
+
+
)
{
MOZ_TRY
(
trans
-
>
AddDataFlavor
(
aTypes
[
t
]
.
get
(
)
)
)
;
}
return
std
:
:
move
(
trans
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetClipboard
(
nsTArray
<
nsCString
>
&
&
aTypes
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
const
MaybeDiscarded
<
WindowContext
>
&
aRequestingWindowContext
IPCTransferableDataOrError
*
aTransferableDataOrError
)
{
nsresult
rv
;
if
(
aRequestingWindowContext
.
IsDiscarded
(
)
)
{
NS_WARNING
(
"
discarded
window
passed
to
RecvGetClipboard
(
)
;
returning
no
clipboard
"
"
content
"
)
;
*
aTransferableDataOrError
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
if
(
aRequestingWindowContext
.
IsNull
(
)
)
{
return
IPC_FAIL
(
this
"
passed
null
window
to
RecvGetClipboard
(
)
"
)
;
}
RefPtr
<
WindowGlobalParent
>
window
=
aRequestingWindowContext
.
get_canonical
(
)
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aTransferableDataOrError
=
rv
;
return
IPC_OK
(
)
;
}
auto
result
=
CreateClipboardTransferable
(
aTypes
)
;
if
(
result
.
isErr
(
)
)
{
*
aTransferableDataOrError
=
result
.
unwrapErr
(
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsITransferable
>
trans
=
result
.
unwrap
(
)
;
rv
=
clipboard
-
>
GetData
(
trans
aWhichClipboard
window
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aTransferableDataOrError
=
rv
;
return
IPC_OK
(
)
;
}
IPCTransferableData
transferableData
;
nsContentUtils
:
:
TransferableToIPCTransferableData
(
trans
&
transferableData
true
this
)
;
*
aTransferableDataOrError
=
std
:
:
move
(
transferableData
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvEmptyClipboard
(
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
)
{
nsresult
rv
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
clipboard
-
>
EmptyClipboard
(
aWhichClipboard
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvClipboardHasType
(
nsTArray
<
nsCString
>
&
&
aTypes
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
bool
*
aHasType
)
{
nsresult
rv
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
clipboard
-
>
HasDataMatchingFlavors
(
aTypes
aWhichClipboard
aHasType
)
;
return
IPC_OK
(
)
;
}
namespace
{
static
Result
<
ClipboardReadRequest
nsresult
>
CreateClipboardReadRequest
(
ContentParent
&
aContentParent
nsIClipboardDataSnapshot
&
aClipboardDataSnapshot
)
{
nsTArray
<
nsCString
>
flavors
;
nsresult
rv
=
aClipboardDataSnapshot
.
GetFlavorList
(
flavors
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
rv
)
;
}
auto
requestParent
=
MakeNotNull
<
RefPtr
<
ClipboardReadRequestParent
>
>
(
&
aContentParent
&
aClipboardDataSnapshot
)
;
ManagedEndpoint
<
PClipboardReadRequestChild
>
childEndpoint
=
aContentParent
.
OpenPClipboardReadRequestEndpoint
(
requestParent
)
;
if
(
NS_WARN_IF
(
!
childEndpoint
.
IsValid
(
)
)
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
return
ClipboardReadRequest
(
std
:
:
move
(
childEndpoint
)
std
:
:
move
(
flavors
)
)
;
}
class
ClipboardGetCallback
final
:
public
nsIClipboardGetDataSnapshotCallback
{
public
:
ClipboardGetCallback
(
ContentParent
*
aContentParent
ContentParent
:
:
GetClipboardDataSnapshotResolver
&
&
aResolver
)
:
mContentParent
(
aContentParent
)
mResolver
(
std
:
:
move
(
aResolver
)
)
{
}
NS_DECL_ISUPPORTS
NS_IMETHOD
OnSuccess
(
nsIClipboardDataSnapshot
*
aClipboardDataSnapshot
)
override
{
MOZ_ASSERT
(
mContentParent
)
;
MOZ_ASSERT
(
aClipboardDataSnapshot
)
;
auto
result
=
CreateClipboardReadRequest
(
*
mContentParent
*
aClipboardDataSnapshot
)
;
if
(
result
.
isErr
(
)
)
{
return
OnError
(
result
.
unwrapErr
(
)
)
;
}
mResolver
(
result
.
unwrap
(
)
)
;
return
NS_OK
;
}
NS_IMETHOD
OnError
(
nsresult
aResult
)
override
{
mResolver
(
aResult
)
;
return
NS_OK
;
}
protected
:
~
ClipboardGetCallback
(
)
=
default
;
RefPtr
<
ContentParent
>
mContentParent
;
ContentParent
:
:
GetClipboardDataSnapshotResolver
mResolver
;
}
;
NS_IMPL_ISUPPORTS
(
ClipboardGetCallback
nsIClipboardGetDataSnapshotCallback
)
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetClipboardDataSnapshot
(
nsTArray
<
nsCString
>
&
&
aTypes
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
const
MaybeDiscarded
<
WindowContext
>
&
aRequestingWindowContext
mozilla
:
:
NotNull
<
nsIPrincipal
*
>
aRequestingPrincipal
GetClipboardDataSnapshotResolver
&
&
aResolver
)
{
if
(
!
ValidatePrincipal
(
aRequestingPrincipal
{
ValidatePrincipalOptions
:
:
AllowSystem
ValidatePrincipalOptions
:
:
AllowExpanded
}
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aRequestingPrincipal
__func__
)
;
}
if
(
aRequestingWindowContext
.
IsDiscarded
(
)
)
{
aResolver
(
NS_ERROR_NOT_AVAILABLE
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
WindowGlobalParent
>
requestingWindow
=
aRequestingWindowContext
.
get_canonical
(
)
;
if
(
requestingWindow
&
&
requestingWindow
-
>
GetContentParent
(
)
!
=
this
)
{
return
IPC_FAIL
(
this
"
attempt
to
paste
into
WindowContext
loaded
in
another
process
"
)
;
}
nsresult
rv
;
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
rv
)
;
return
IPC_OK
(
)
;
}
auto
callback
=
MakeRefPtr
<
ClipboardGetCallback
>
(
this
std
:
:
move
(
aResolver
)
)
;
rv
=
clipboard
-
>
GetDataSnapshot
(
aTypes
aWhichClipboard
requestingWindow
aRequestingPrincipal
callback
)
;
if
(
NS_FAILED
(
rv
)
)
{
callback
-
>
OnError
(
rv
)
;
return
IPC_OK
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetClipboardDataSnapshotSync
(
nsTArray
<
nsCString
>
&
&
aTypes
const
nsIClipboard
:
:
ClipboardType
&
aWhichClipboard
const
MaybeDiscarded
<
WindowContext
>
&
aRequestingWindowContext
ClipboardReadRequestOrError
*
aRequestOrError
)
{
if
(
aRequestingWindowContext
.
IsDiscarded
(
)
)
{
*
aRequestOrError
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
RefPtr
<
WindowGlobalParent
>
requestingWindow
=
aRequestingWindowContext
.
get_canonical
(
)
;
if
(
requestingWindow
&
&
requestingWindow
-
>
GetContentParent
(
)
!
=
this
)
{
return
IPC_FAIL
(
this
"
attempt
to
paste
into
WindowContext
loaded
in
another
process
"
)
;
}
nsCOMPtr
<
nsIClipboard
>
clipboard
(
do_GetService
(
kCClipboardCID
)
)
;
if
(
!
clipboard
)
{
*
aRequestOrError
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIClipboardDataSnapshot
>
clipboardDataSnapshot
;
nsresult
rv
=
clipboard
-
>
GetDataSnapshotSync
(
aTypes
aWhichClipboard
requestingWindow
getter_AddRefs
(
clipboardDataSnapshot
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
*
aRequestOrError
=
rv
;
return
IPC_OK
(
)
;
}
auto
result
=
CreateClipboardReadRequest
(
*
this
*
clipboardDataSnapshot
)
;
if
(
result
.
isErr
(
)
)
{
*
aRequestOrError
=
result
.
unwrapErr
(
)
;
return
IPC_OK
(
)
;
}
*
aRequestOrError
=
result
.
unwrap
(
)
;
return
IPC_OK
(
)
;
}
already_AddRefed
<
PClipboardWriteRequestParent
>
ContentParent
:
:
AllocPClipboardWriteRequestParent
(
const
nsIClipboard
:
:
ClipboardType
&
aClipboardType
const
MaybeDiscarded
<
WindowContext
>
&
aSettingWindowContext
)
{
WindowContext
*
settingWindowContext
=
nullptr
;
if
(
!
aSettingWindowContext
.
IsDiscarded
(
)
)
{
settingWindowContext
=
aSettingWindowContext
.
get
(
)
;
}
RefPtr
<
ClipboardWriteRequestParent
>
request
=
MakeAndAddRef
<
ClipboardWriteRequestParent
>
(
this
)
;
request
-
>
Init
(
aClipboardType
settingWindowContext
)
;
return
request
.
forget
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetIconForExtension
(
const
nsACString
&
aFileExt
const
uint32_t
&
aIconSize
nsTArray
<
uint8_t
>
*
bits
)
{
#
ifdef
MOZ_WIDGET_ANDROID
NS_ASSERTION
(
AndroidBridge
:
:
Bridge
(
)
!
=
nullptr
"
AndroidBridge
is
not
available
"
)
;
if
(
AndroidBridge
:
:
Bridge
(
)
=
=
nullptr
)
{
return
IPC_OK
(
)
;
}
bits
-
>
AppendElements
(
aIconSize
*
aIconSize
*
4
)
;
AndroidBridge
:
:
Bridge
(
)
-
>
GetIconForExtension
(
aFileExt
aIconSize
bits
-
>
Elements
(
)
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvFirstIdle
(
)
{
if
(
mIsAPreallocBlocker
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
RecvFirstIdle
id
=
%
p
childID
=
%
"
PRIu64
"
:
Removing
Blocker
for
%
s
"
this
(
uint64_t
)
this
-
>
ChildID
(
)
mRemoteType
.
get
(
)
)
)
;
PreallocatedProcessManager
:
:
RemoveBlocker
(
mRemoteType
this
)
;
mIsAPreallocBlocker
=
false
;
}
return
IPC_OK
(
)
;
}
already_AddRefed
<
nsDocShellLoadState
>
ContentParent
:
:
TakePendingLoadStateForId
(
uint64_t
aLoadIdentifier
)
{
return
mPendingLoadStates
.
Extract
(
aLoadIdentifier
)
.
valueOr
(
nullptr
)
.
forget
(
)
;
}
void
ContentParent
:
:
StorePendingLoadState
(
nsDocShellLoadState
*
aLoadState
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mPendingLoadStates
.
Contains
(
aLoadState
-
>
GetLoadIdentifier
(
)
)
"
The
same
nsDocShellLoadState
was
sent
to
the
same
content
process
"
"
twice
?
This
will
mess
with
cross
-
process
tracking
of
loads
"
)
;
mPendingLoadStates
.
InsertOrUpdate
(
aLoadState
-
>
GetLoadIdentifier
(
)
aLoadState
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCleanupPendingLoadState
(
uint64_t
aLoadIdentifier
)
{
mPendingLoadStates
.
Remove
(
aLoadIdentifier
)
;
return
IPC_OK
(
)
;
}
NS_IMPL_CYCLE_COLLECTION_0
(
ContentParent
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
ContentParent
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
ContentParent
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ContentParent
)
NS_INTERFACE_MAP_ENTRY_CONCRETE
(
ContentParent
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMProcessParent
)
NS_INTERFACE_MAP_ENTRY
(
nsIObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMGeoPositionCallback
)
NS_INTERFACE_MAP_ENTRY
(
nsIDOMGeoPositionErrorCallback
)
NS_INTERFACE_MAP_ENTRY
(
nsIAsyncShutdownBlocker
)
NS_INTERFACE_MAP_ENTRY
(
nsIInterfaceRequestor
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIDOMProcessParent
)
NS_INTERFACE_MAP_END
class
RequestContentJSInterruptRunnable
final
:
public
Runnable
{
public
:
explicit
RequestContentJSInterruptRunnable
(
PProcessHangMonitorParent
*
aActor
)
:
Runnable
(
"
dom
:
:
RequestContentJSInterruptRunnable
"
)
mHangMonitorActor
(
aActor
)
{
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
mHangMonitorActor
)
;
Unused
<
<
mHangMonitorActor
-
>
SendRequestContentJSInterrupt
(
)
;
return
NS_OK
;
}
private
:
RefPtr
<
PProcessHangMonitorParent
>
mHangMonitorActor
;
}
;
void
ContentParent
:
:
SignalImpendingShutdownToContentJS
(
)
{
if
(
!
mIsSignaledImpendingShutdown
&
&
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
NotifyImpendingShutdown
.
"
__FILE__
__LINE__
)
;
NotifyImpendingShutdown
(
)
;
mIsSignaledImpendingShutdown
=
true
;
if
(
mHangMonitorActor
&
&
StaticPrefs
:
:
dom_abort_script_on_child_shutdown
(
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
RequestContentJSInterrupt
.
"
__FILE__
__LINE__
)
;
RefPtr
<
RequestContentJSInterruptRunnable
>
r
=
new
RequestContentJSInterruptRunnable
(
mHangMonitorActor
)
;
ProcessHangMonitor
:
:
Get
(
)
-
>
Dispatch
(
r
.
forget
(
)
)
;
}
}
}
NS_IMETHODIMP
ContentParent
:
:
BlockShutdown
(
nsIAsyncShutdownClient
*
aClient
)
{
if
(
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
mBlockShutdownCalled
=
true
;
#
endif
PreallocatedProcessManager
:
:
Erase
(
this
)
;
{
RecursiveMutexAutoLock
lock
(
mThreadsafeHandle
-
>
mMutex
)
;
mThreadsafeHandle
-
>
mShutdownStarted
=
true
;
}
SignalImpendingShutdownToContentJS
(
)
;
if
(
sAppShutdownConfirmedClient
)
{
Unused
<
<
sAppShutdownConfirmedClient
-
>
RemoveBlocker
(
this
)
;
}
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
mBlockShutdownCalled
=
false
;
#
endif
return
NS_OK
;
}
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
MOZ_ASSERT
(
!
mBlockShutdownCalled
)
;
mBlockShutdownCalled
=
true
;
#
endif
if
(
CanSend
(
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
CanSend
.
"
__FILE__
__LINE__
)
;
ProcessPriorityManager
:
:
SetProcessPriority
(
this
PROCESS_PRIORITY_FOREGROUND
)
;
if
(
!
ShutDownProcess
(
SEND_SHUTDOWN_MESSAGE
)
)
{
KillHard
(
"
Failed
to
send
Shutdown
message
.
Destroying
the
process
.
.
.
"
)
;
return
NS_OK
;
}
}
else
if
(
IsLaunching
(
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
!
CanSend
&
&
IsLaunching
.
"
__FILE__
__LINE__
)
;
MarkAsDead
(
)
;
}
else
{
MOZ_ASSERT
(
IsDead
(
)
)
;
if
(
!
IsDead
(
)
)
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
!
!
!
!
CanSend
&
&
!
IsLaunching
&
&
!
IsDead
!
!
!
"
__FILE__
__LINE__
)
;
}
else
{
MaybeLogBlockShutdownDiagnostics
(
this
"
BlockShutdown
:
!
CanSend
&
&
!
IsLaunching
&
&
IsDead
.
"
__FILE__
__LINE__
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
GetName
(
nsAString
&
aName
)
{
aName
.
AssignLiteral
(
"
ContentParent
:
"
)
;
aName
.
AppendPrintf
(
"
id
=
%
p
"
this
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
GetState
(
nsIPropertyBag
*
*
aResult
)
{
auto
props
=
MakeRefPtr
<
nsHashPropertyBag
>
(
)
;
props
-
>
SetPropertyAsACString
(
u
"
remoteTypePrefix
"
_ns
RemoteTypePrefix
(
mRemoteType
)
)
;
*
aResult
=
props
.
forget
(
)
.
downcast
<
nsIWritablePropertyBag
>
(
)
.
take
(
)
;
return
NS_OK
;
}
static
void
InitShutdownClients
(
)
{
if
(
!
sXPCOMShutdownClient
)
{
nsresult
rv
;
nsCOMPtr
<
nsIAsyncShutdownService
>
svc
=
services
:
:
GetAsyncShutdownService
(
)
;
if
(
!
svc
)
{
return
;
}
nsCOMPtr
<
nsIAsyncShutdownClient
>
client
;
if
(
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMWillShutdown
)
)
{
rv
=
svc
-
>
GetXpcomWillShutdown
(
getter_AddRefs
(
client
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
sXPCOMShutdownClient
=
client
.
forget
(
)
;
ClearOnShutdown
(
&
sXPCOMShutdownClient
)
;
}
}
if
(
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdown
)
)
{
rv
=
svc
-
>
GetProfileBeforeChange
(
getter_AddRefs
(
client
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
sProfileBeforeChangeClient
=
client
.
forget
(
)
;
ClearOnShutdown
(
&
sProfileBeforeChangeClient
)
;
}
}
if
(
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
rv
=
svc
-
>
GetAppShutdownConfirmed
(
getter_AddRefs
(
client
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
sAppShutdownConfirmedClient
=
client
.
forget
(
)
;
ClearOnShutdown
(
&
sAppShutdownConfirmedClient
)
;
}
}
}
}
void
ContentParent
:
:
AddShutdownBlockers
(
)
{
InitShutdownClients
(
)
;
MOZ_ASSERT
(
sXPCOMShutdownClient
)
;
MOZ_ASSERT
(
sProfileBeforeChangeClient
)
;
if
(
sXPCOMShutdownClient
)
{
sXPCOMShutdownClient
-
>
AddBlocker
(
this
NS_LITERAL_STRING_FROM_CSTRING
(
__FILE__
)
__LINE__
u
"
"
_ns
)
;
}
if
(
sProfileBeforeChangeClient
)
{
sProfileBeforeChangeClient
-
>
AddBlocker
(
this
NS_LITERAL_STRING_FROM_CSTRING
(
__FILE__
)
__LINE__
u
"
"
_ns
)
;
}
if
(
sAppShutdownConfirmedClient
)
{
sAppShutdownConfirmedClient
-
>
AddBlocker
(
this
NS_LITERAL_STRING_FROM_CSTRING
(
__FILE__
)
__LINE__
u
"
"
_ns
)
;
}
}
void
ContentParent
:
:
RemoveShutdownBlockers
(
)
{
MOZ_ASSERT
(
sXPCOMShutdownClient
)
;
MOZ_ASSERT
(
sProfileBeforeChangeClient
)
;
MaybeLogBlockShutdownDiagnostics
(
this
"
RemoveShutdownBlockers
"
__FILE__
__LINE__
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
mBlockShutdownCalled
=
false
;
#
endif
if
(
sXPCOMShutdownClient
)
{
Unused
<
<
sXPCOMShutdownClient
-
>
RemoveBlocker
(
this
)
;
}
if
(
sProfileBeforeChangeClient
)
{
Unused
<
<
sProfileBeforeChangeClient
-
>
RemoveBlocker
(
this
)
;
}
if
(
sAppShutdownConfirmedClient
)
{
Unused
<
<
sAppShutdownConfirmedClient
-
>
RemoveBlocker
(
this
)
;
}
}
NS_IMETHODIMP
ContentParent
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
IsDead
(
)
|
|
!
mSubprocess
)
{
return
NS_OK
;
}
if
(
!
strcmp
(
aTopic
"
nsPref
:
changed
"
)
)
{
NS_LossyConvertUTF16toASCII
strData
(
aData
)
;
Pref
pref
(
strData
false
false
Nothing
(
)
Nothing
(
)
)
;
Preferences
:
:
GetPreference
(
&
pref
GeckoProcessType_Content
GetRemoteType
(
)
)
;
if
(
pref
.
isSanitized
(
)
)
{
return
NS_OK
;
}
if
(
IsInitialized
(
)
)
{
MOZ_ASSERT
(
mQueuedPrefs
.
IsEmpty
(
)
)
;
if
(
!
SendPreferenceUpdate
(
pref
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
}
else
{
MOZ_ASSERT
(
!
IsDead
(
)
)
;
mQueuedPrefs
.
AppendElement
(
pref
)
;
}
return
NS_OK
;
}
if
(
!
IsAlive
(
)
)
{
return
NS_OK
;
}
if
(
!
strcmp
(
aTopic
"
memory
-
pressure
"
)
)
{
Unused
<
<
SendFlushMemory
(
nsDependentString
(
aData
)
)
;
}
else
if
(
!
strcmp
(
aTopic
"
application
-
background
"
)
)
{
Unused
<
<
SendApplicationBackground
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
application
-
foreground
"
)
)
{
Unused
<
<
SendApplicationForeground
(
)
;
}
else
if
(
!
strcmp
(
aTopic
NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC
)
)
{
NS_ConvertUTF16toUTF8
dataStr
(
aData
)
;
const
char
*
offline
=
dataStr
.
get
(
)
;
if
(
!
SendSetOffline
(
!
strcmp
(
offline
"
true
"
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
}
else
if
(
!
strcmp
(
aTopic
NS_IPC_IOSERVICE_SET_CONNECTIVITY_TOPIC
)
)
{
if
(
!
SendSetConnectivity
(
u
"
true
"
_ns
.
Equals
(
aData
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
}
else
if
(
!
strcmp
(
aTopic
NS_IPC_CAPTIVE_PORTAL_SET_STATE
)
)
{
nsCOMPtr
<
nsICaptivePortalService
>
cps
=
do_QueryInterface
(
aSubject
)
;
MOZ_ASSERT
(
cps
"
Should
QI
to
a
captive
portal
service
"
)
;
if
(
!
cps
)
{
return
NS_ERROR_FAILURE
;
}
int32_t
state
;
cps
-
>
GetState
(
&
state
)
;
if
(
!
SendSetCaptivePortalState
(
state
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
}
else
if
(
!
strcmp
(
aTopic
"
child
-
gc
-
request
"
)
)
{
Unused
<
<
SendGarbageCollect
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
child
-
cc
-
request
"
)
)
{
Unused
<
<
SendCycleCollect
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
child
-
mmu
-
request
"
)
)
{
Unused
<
<
SendMinimizeMemoryUsage
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
child
-
ghost
-
request
"
)
)
{
Unused
<
<
SendUnlinkGhosts
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
last
-
pb
-
context
-
exited
"
)
)
{
Unused
<
<
SendLastPrivateDocShellDestroyed
(
)
;
}
#
ifdef
ACCESSIBILITY
else
if
(
aData
&
&
!
strcmp
(
aTopic
"
a11y
-
init
-
or
-
shutdown
"
)
)
{
if
(
*
aData
=
=
'
1
'
)
{
Unused
<
<
SendActivateA11y
(
nsAccessibilityService
:
:
GetActiveCacheDomains
(
)
)
;
}
else
{
Unused
<
<
SendShutdownA11y
(
)
;
}
}
#
endif
else
if
(
!
strcmp
(
aTopic
"
cacheservice
:
empty
-
cache
"
)
)
{
Unused
<
<
SendNotifyEmptyHTTPCache
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
intl
:
app
-
locales
-
changed
"
)
)
{
nsTArray
<
nsCString
>
appLocales
;
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocalesAsBCP47
(
appLocales
)
;
Unused
<
<
SendUpdateAppLocales
(
appLocales
)
;
}
else
if
(
!
strcmp
(
aTopic
"
intl
:
requested
-
locales
-
changed
"
)
)
{
nsTArray
<
nsCString
>
requestedLocales
;
LocaleService
:
:
GetInstance
(
)
-
>
GetRequestedLocales
(
requestedLocales
)
;
Unused
<
<
SendUpdateRequestedLocales
(
requestedLocales
)
;
}
else
if
(
!
strcmp
(
aTopic
"
cookie
-
changed
"
)
|
|
!
strcmp
(
aTopic
"
private
-
cookie
-
changed
"
)
)
{
MOZ_ASSERT
(
aSubject
"
cookie
changed
notification
must
have
subject
.
"
)
;
nsCOMPtr
<
nsICookieNotification
>
notification
=
do_QueryInterface
(
aSubject
)
;
MOZ_ASSERT
(
notification
"
cookie
changed
notification
must
have
nsICookieNotification
.
"
)
;
nsICookieNotification
:
:
Action
action
=
notification
-
>
GetAction
(
)
;
PNeckoParent
*
neckoParent
=
LoneManagedOrNullAsserts
(
ManagedPNeckoParent
(
)
)
;
if
(
!
neckoParent
)
{
return
NS_OK
;
}
PCookieServiceParent
*
csParent
=
LoneManagedOrNullAsserts
(
neckoParent
-
>
ManagedPCookieServiceParent
(
)
)
;
if
(
!
csParent
)
{
return
NS_OK
;
}
auto
*
cs
=
static_cast
<
CookieServiceParent
*
>
(
csParent
)
;
MOZ_ASSERT
(
mCookieInContentListCache
.
IsEmpty
(
)
)
;
if
(
action
=
=
nsICookieNotification
:
:
COOKIES_BATCH_DELETED
)
{
nsCOMPtr
<
nsIArray
>
cookieList
;
DebugOnly
<
nsresult
>
rv
=
notification
-
>
GetBatchDeletedCookies
(
getter_AddRefs
(
cookieList
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
&
&
cookieList
"
couldn
'
t
get
cookie
list
"
)
;
cs
-
>
RemoveBatchDeletedCookies
(
cookieList
)
;
return
NS_OK
;
}
if
(
action
=
=
nsICookieNotification
:
:
ALL_COOKIES_CLEARED
)
{
cs
-
>
RemoveAll
(
)
;
return
NS_OK
;
}
if
(
cs
-
>
ProcessingCookie
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsICookie
>
xpcCookie
;
nsresult
rv
=
notification
-
>
GetCookie
(
getter_AddRefs
(
xpcCookie
)
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
&
&
xpcCookie
"
couldn
'
t
get
cookie
"
)
;
const
Cookie
&
cookie
=
xpcCookie
-
>
AsCookie
(
)
;
if
(
!
cs
-
>
ContentProcessHasCookie
(
cookie
)
)
{
return
NS_OK
;
}
nsID
*
operationID
=
nullptr
;
rv
=
notification
-
>
GetOperationID
(
&
operationID
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_OK
;
}
if
(
action
=
=
nsICookieNotification
:
:
COOKIE_DELETED
)
{
cs
-
>
RemoveCookie
(
cookie
operationID
)
;
}
else
if
(
action
=
=
nsICookieNotification
:
:
COOKIE_ADDED
|
|
action
=
=
nsICookieNotification
:
:
COOKIE_CHANGED
)
{
cs
-
>
AddCookie
(
cookie
operationID
)
;
}
}
else
if
(
!
strcmp
(
aTopic
NS_NETWORK_LINK_TYPE_TOPIC
)
)
{
UpdateNetworkLinkType
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
network
:
socket
-
process
-
crashed
"
)
)
{
Unused
<
<
SendSocketProcessCrashed
(
)
;
}
else
if
(
!
strcmp
(
aTopic
DEFAULT_TIMEZONE_CHANGED_OBSERVER_TOPIC
)
)
{
Unused
<
<
SendSystemTimezoneChanged
(
)
;
}
else
if
(
!
strcmp
(
aTopic
NS_NETWORK_TRR_MODE_CHANGED_TOPIC
)
)
{
nsCOMPtr
<
nsIDNSService
>
dns
=
do_GetService
(
NS_DNSSERVICE_CONTRACTID
)
;
nsIDNSService
:
:
ResolverMode
mode
;
dns
-
>
GetCurrentTrrMode
(
&
mode
)
;
nsIDNSService
:
:
ResolverMode
modeFromPref
=
static_cast
<
nsIDNSService
:
:
ResolverMode
>
(
StaticPrefs
:
:
network_trr_mode
(
)
)
;
if
(
modeFromPref
>
nsIDNSService
:
:
MODE_TRROFF
)
{
modeFromPref
=
nsIDNSService
:
:
MODE_TRROFF
;
}
Unused
<
<
SendSetTRRMode
(
mode
modeFromPref
)
;
}
return
NS_OK
;
}
uint32_t
ContentParent
:
:
UpdateNetworkLinkType
(
)
{
uint32_t
linkType
=
nsINetworkLinkService
:
:
LINK_TYPE_UNKNOWN
;
nsresult
rv
;
nsCOMPtr
<
nsINetworkLinkService
>
nls
=
do_GetService
(
NS_NETWORK_LINK_SERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
nls
-
>
GetLinkType
(
&
linkType
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
Unused
<
<
SendNetworkLinkTypeChange
(
linkType
)
;
}
}
return
linkType
;
}
NS_IMETHODIMP
ContentParent
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIMessageSender
)
)
)
{
nsCOMPtr
<
nsIMessageSender
>
mm
=
GetMessageManager
(
)
;
mm
.
forget
(
aResult
)
;
return
NS_OK
;
}
return
NS_NOINTERFACE
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInitBackground
(
Endpoint
<
PBackgroundStarterParent
>
&
&
aEndpoint
)
{
if
(
!
BackgroundParent
:
:
AllocStarter
(
this
std
:
:
move
(
aEndpoint
)
)
)
{
NS_WARNING
(
"
BackgroundParent
:
:
Alloc
failed
"
)
;
}
return
IPC_OK
(
)
;
}
bool
ContentParent
:
:
CanOpenBrowser
(
const
IPCTabContext
&
aContext
)
{
if
(
aContext
.
type
(
)
!
=
IPCTabContext
:
:
TPopupIPCTabContext
)
{
MOZ_CRASH_UNLESS_FUZZING
(
"
Unexpected
IPCTabContext
type
.
Aborting
AllocPBrowserParent
.
"
)
;
return
false
;
}
if
(
aContext
.
type
(
)
=
=
IPCTabContext
:
:
TPopupIPCTabContext
)
{
const
PopupIPCTabContext
&
popupContext
=
aContext
.
get_PopupIPCTabContext
(
)
;
auto
*
opener
=
BrowserParent
:
:
GetFrom
(
popupContext
.
opener
(
)
.
AsParent
(
)
)
;
if
(
!
opener
)
{
MOZ_CRASH_UNLESS_FUZZING
(
"
Got
null
opener
from
child
;
aborting
AllocPBrowserParent
.
"
)
;
return
false
;
}
}
MaybeInvalidTabContext
tc
(
aContext
)
;
if
(
!
tc
.
IsValid
(
)
)
{
NS_ERROR
(
nsPrintfCString
(
"
Child
passed
us
an
invalid
TabContext
.
(
%
s
)
"
"
Aborting
AllocPBrowserParent
.
"
tc
.
GetInvalidReason
(
)
)
.
get
(
)
)
;
return
false
;
}
return
true
;
}
static
bool
CloneIsLegal
(
ContentParent
*
aCp
CanonicalBrowsingContext
&
aSource
CanonicalBrowsingContext
&
aTarget
)
{
if
(
NS_WARN_IF
(
aSource
.
Group
(
)
!
=
aTarget
.
Group
(
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
aSource
.
Top
(
)
=
=
aTarget
.
Top
(
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
aSource
.
IsTop
(
)
)
|
|
NS_WARN_IF
(
aTarget
.
IsTop
(
)
)
)
{
return
false
;
}
auto
*
sourceEmbedder
=
aSource
.
GetParentWindowContext
(
)
;
if
(
NS_WARN_IF
(
!
sourceEmbedder
)
|
|
NS_WARN_IF
(
sourceEmbedder
-
>
GetContentParent
(
)
!
=
aCp
)
)
{
return
false
;
}
auto
*
targetEmbedder
=
aTarget
.
GetParentWindowContext
(
)
;
if
(
NS_WARN_IF
(
!
targetEmbedder
)
|
|
NS_WARN_IF
(
targetEmbedder
-
>
GetContentParent
(
)
!
=
aCp
)
)
{
return
false
;
}
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCloneDocumentTreeInto
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aSource
const
MaybeDiscarded
<
BrowsingContext
>
&
aTarget
PrintData
&
&
aPrintData
)
{
if
(
aSource
.
IsNullOrDiscarded
(
)
|
|
aTarget
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
IPC_OK
(
)
;
}
RefPtr
source
=
aSource
.
get_canonical
(
)
;
RefPtr
target
=
aTarget
.
get_canonical
(
)
;
if
(
!
CloneIsLegal
(
this
*
source
*
target
)
)
{
return
IPC_FAIL
(
this
"
Illegal
subframe
clone
"
)
;
}
ContentParent
*
cp
=
source
-
>
GetContentParent
(
)
;
if
(
NS_WARN_IF
(
!
cp
)
)
{
return
IPC_OK
(
)
;
}
if
(
NS_WARN_IF
(
cp
-
>
GetRemoteType
(
)
=
=
GetRemoteType
(
)
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
cp
=
=
this
)
;
return
IPC_OK
(
)
;
}
target
-
>
CloneDocumentTreeInto
(
source
cp
-
>
GetRemoteType
(
)
std
:
:
move
(
aPrintData
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvUpdateRemotePrintSettings
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aTarget
PrintData
&
&
aPrintData
)
{
if
(
aTarget
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
auto
*
target
=
aTarget
.
get_canonical
(
)
;
auto
*
bp
=
target
-
>
GetBrowserParent
(
)
;
if
(
NS_WARN_IF
(
!
bp
)
)
{
return
IPC_OK
(
)
;
}
Unused
<
<
bp
-
>
SendUpdateRemotePrintSettings
(
aPrintData
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvConstructPopupBrowser
(
ManagedEndpoint
<
PBrowserParent
>
&
&
aBrowserEp
ManagedEndpoint
<
PWindowGlobalParent
>
&
&
aWindowEp
const
TabId
&
aTabId
const
IPCTabContext
&
aContext
const
WindowGlobalInit
&
aInitialWindowInit
const
uint32_t
&
aChromeFlags
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
!
CanOpenBrowser
(
aContext
)
)
{
return
IPC_FAIL
(
this
"
CanOpenBrowser
Failed
"
)
;
}
RefPtr
<
CanonicalBrowsingContext
>
browsingContext
=
CanonicalBrowsingContext
:
:
Get
(
aInitialWindowInit
.
context
(
)
.
mBrowsingContextId
)
;
if
(
!
browsingContext
|
|
browsingContext
-
>
IsDiscarded
(
)
)
{
return
IPC_FAIL
(
this
"
Null
or
discarded
initial
BrowsingContext
"
)
;
}
if
(
!
aInitialWindowInit
.
principal
(
)
)
{
return
IPC_FAIL
(
this
"
Cannot
create
without
valid
initial
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aInitialWindowInit
.
principal
(
)
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aInitialWindowInit
.
principal
(
)
__func__
)
;
}
if
(
browsingContext
-
>
GetBrowserParent
(
)
)
{
return
IPC_FAIL
(
this
"
BrowsingContext
already
has
a
BrowserParent
"
)
;
}
uint32_t
chromeFlags
=
aChromeFlags
;
TabId
openerTabId
(
0
)
;
ContentParentId
openerCpId
(
0
)
;
if
(
aContext
.
type
(
)
=
=
IPCTabContext
:
:
TPopupIPCTabContext
)
{
const
PopupIPCTabContext
&
popupContext
=
aContext
.
get_PopupIPCTabContext
(
)
;
auto
*
opener
=
BrowserParent
:
:
GetFrom
(
popupContext
.
opener
(
)
.
AsParent
(
)
)
;
openerTabId
=
opener
-
>
GetTabId
(
)
;
openerCpId
=
opener
-
>
Manager
(
)
-
>
ChildID
(
)
;
nsCOMPtr
<
nsILoadContext
>
loadContext
=
opener
-
>
GetLoadContext
(
)
;
if
(
!
loadContext
)
{
return
IPC_FAIL
(
this
"
Missing
Opener
LoadContext
"
)
;
}
if
(
loadContext
-
>
UsePrivateBrowsing
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_WINDOW
;
}
if
(
loadContext
-
>
UseRemoteSubframes
(
)
)
{
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
;
}
}
chromeFlags
|
=
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
;
if
(
NS_WARN_IF
(
!
browsingContext
-
>
IsOwnedByProcess
(
ChildID
(
)
)
)
)
{
return
IPC_FAIL
(
this
"
BrowsingContext
Owned
by
Incorrect
Process
!
"
)
;
}
MaybeInvalidTabContext
tc
(
aContext
)
;
MOZ_ASSERT
(
tc
.
IsValid
(
)
)
;
RefPtr
<
WindowGlobalParent
>
initialWindow
=
WindowGlobalParent
:
:
CreateDisconnected
(
aInitialWindowInit
)
;
if
(
!
initialWindow
)
{
return
IPC_FAIL
(
this
"
Failed
to
create
WindowGlobalParent
"
)
;
}
auto
parent
=
MakeRefPtr
<
BrowserParent
>
(
this
aTabId
tc
.
GetTabContext
(
)
browsingContext
chromeFlags
)
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
!
cpm
|
|
!
cpm
-
>
RegisterRemoteFrame
(
parent
)
)
{
return
IPC_FAIL
(
this
"
RegisterRemoteFrame
Failed
"
)
;
}
if
(
NS_WARN_IF
(
!
BindPBrowserEndpoint
(
std
:
:
move
(
aBrowserEp
)
parent
)
)
)
{
return
IPC_FAIL
(
this
"
BindPBrowserEndpoint
failed
"
)
;
}
if
(
NS_WARN_IF
(
!
parent
-
>
BindPWindowGlobalEndpoint
(
std
:
:
move
(
aWindowEp
)
initialWindow
)
)
)
{
return
IPC_FAIL
(
this
"
BindPWindowGlobalEndpoint
failed
"
)
;
}
browsingContext
-
>
SetCurrentBrowserParent
(
parent
)
;
initialWindow
-
>
Init
(
)
;
parent
-
>
SetReadyToHandleInputEvents
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
PRemoteSpellcheckEngineParent
*
ContentParent
:
:
AllocPRemoteSpellcheckEngineParent
(
)
{
mozilla
:
:
RemoteSpellcheckEngineParent
*
parent
=
new
mozilla
:
:
RemoteSpellcheckEngineParent
(
)
;
return
parent
;
}
bool
ContentParent
:
:
DeallocPRemoteSpellcheckEngineParent
(
PRemoteSpellcheckEngineParent
*
parent
)
{
delete
parent
;
return
true
;
}
void
ContentParent
:
:
SendShutdownTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
auto
*
self
=
static_cast
<
ContentParent
*
>
(
aClosure
)
;
self
-
>
AsyncSendShutDownMessage
(
)
;
}
void
ContentParent
:
:
ForceKillTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
if
(
PR_GetEnv
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
)
{
return
;
}
auto
*
self
=
static_cast
<
ContentParent
*
>
(
aClosure
)
;
self
-
>
KillHard
(
"
ShutDownKill
"
)
;
}
void
ContentParent
:
:
GeneratePairedMinidump
(
const
char
*
aReason
)
{
if
(
mCrashReporter
&
&
!
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
&
&
StaticPrefs
:
:
dom_ipc_tabs_createKillHardCrashReports_AtStartup
(
)
)
{
nsAutoCString
additionalDumps
(
"
browser
"
)
;
mCrashReporter
-
>
AddAnnotationNSCString
(
CrashReporter
:
:
Annotation
:
:
additional_minidumps
additionalDumps
)
;
nsDependentCString
reason
(
aReason
)
;
mCrashReporter
-
>
AddAnnotationNSCString
(
CrashReporter
:
:
Annotation
:
:
ipc_channel_error
reason
)
;
if
(
mCrashReporter
-
>
GenerateMinidumpAndPair
(
mSubprocess
"
browser
"
_ns
)
)
{
mCrashReporter
-
>
FinalizeCrashReport
(
)
;
mCreatedPairedMinidumps
=
true
;
}
}
}
void
ContentParent
:
:
HandleOrphanedMinidump
(
nsString
*
aDumpId
)
{
if
(
CrashReporter
:
:
FinalizeOrphanedMinidump
(
OtherPid
(
)
GeckoProcessType_Content
aDumpId
)
)
{
CrashReporterHost
:
:
RecordCrash
(
GeckoProcessType_Content
nsICrashService
:
:
CRASH_TYPE_CRASH
*
aDumpId
)
;
}
else
{
NS_WARNING
(
nsPrintfCString
(
"
content
process
childID
=
%
d
pid
=
%
"
PRIPID
"
crashed
without
leaving
a
minidump
behind
"
OtherChildID
(
)
OtherPid
(
)
)
.
get
(
)
)
;
}
}
void
ContentParent
:
:
KillHard
(
const
char
*
aReason
)
{
AUTO_PROFILER_LABEL
(
"
ContentParent
:
:
KillHard
"
OTHER
)
;
if
(
mCalledKillHard
)
{
return
;
}
mCalledKillHard
=
true
;
if
(
mSendShutdownTimer
)
{
mSendShutdownTimer
-
>
Cancel
(
)
;
mSendShutdownTimer
=
nullptr
;
}
if
(
mForceKillTimer
)
{
mForceKillTimer
-
>
Cancel
(
)
;
mForceKillTimer
=
nullptr
;
}
RemoveShutdownBlockers
(
)
;
nsCString
reason
=
nsDependentCString
(
aReason
)
;
if
(
!
mIsNotifiedShutdownSuccess
)
{
GeneratePairedMinidump
(
aReason
)
;
}
else
{
reason
=
nsDependentCString
(
"
KillHard
after
IsNotifiedShutdownSuccess
.
"
)
;
}
glean
:
:
subprocess
:
:
kill_hard
.
Get
(
reason
)
.
Add
(
1
)
;
ProcessHandle
otherProcessHandle
;
if
(
!
base
:
:
OpenProcessHandle
(
OtherPid
(
)
&
otherProcessHandle
)
)
{
NS_ERROR
(
"
Failed
to
open
child
process
when
attempting
kill
.
"
)
;
if
(
CanSend
(
)
)
{
GetIPCChannel
(
)
-
>
InduceConnectionError
(
)
;
}
return
;
}
if
(
!
KillProcess
(
otherProcessHandle
base
:
:
PROCESS_END_KILLED_BY_USER
)
)
{
if
(
mCrashReporter
)
{
mCrashReporter
-
>
DeleteCrashReport
(
)
;
}
NS_WARNING
(
"
failed
to
kill
subprocess
!
"
)
;
}
if
(
mSubprocess
)
{
MOZ_LOG
(
ContentParent
:
:
GetLog
(
)
LogLevel
:
:
Verbose
(
"
KillHard
Subprocess
(
%
s
)
:
ContentParent
id
=
%
p
mSubprocess
id
=
%
p
"
"
handle
"
"
%
"
PRIuPTR
aReason
this
mSubprocess
mSubprocess
?
(
uintptr_t
)
mSubprocess
-
>
GetChildProcessHandle
(
)
:
-
1
)
)
;
mSubprocess
-
>
SetAlreadyDead
(
)
;
}
if
(
CanSend
(
)
)
{
GetIPCChannel
(
)
-
>
InduceConnectionError
(
)
;
}
XRE_GetAsyncIOEventTarget
(
)
-
>
Dispatch
(
NewRunnableFunction
(
"
EnsureProcessTerminatedRunnable
"
&
ProcessWatcher
:
:
EnsureProcessTerminated
otherProcessHandle
true
)
)
;
}
void
ContentParent
:
:
FriendlyName
(
nsAString
&
aName
bool
aAnonymize
)
{
aName
.
Truncate
(
)
;
if
(
mIsForBrowser
)
{
aName
.
AssignLiteral
(
"
Browser
"
)
;
}
else
if
(
aAnonymize
)
{
aName
.
AssignLiteral
(
"
<
anonymized
-
name
>
"
)
;
}
else
{
aName
.
AssignLiteral
(
"
?
?
?
"
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInitCrashReporter
(
const
CrashReporter
:
:
CrashReporterInitArgs
&
aInitArgs
)
{
mCrashReporter
=
MakeUnique
<
CrashReporterHost
>
(
GeckoProcessType_Content
OtherPid
(
)
aInitArgs
)
;
return
IPC_OK
(
)
;
}
hal_sandbox
:
:
PHalParent
*
ContentParent
:
:
AllocPHalParent
(
)
{
return
hal_sandbox
:
:
CreateHalParent
(
)
;
}
bool
ContentParent
:
:
DeallocPHalParent
(
hal_sandbox
:
:
PHalParent
*
aHal
)
{
delete
aHal
;
return
true
;
}
devtools
:
:
PHeapSnapshotTempFileHelperParent
*
ContentParent
:
:
AllocPHeapSnapshotTempFileHelperParent
(
)
{
return
devtools
:
:
HeapSnapshotTempFileHelperParent
:
:
Create
(
)
;
}
bool
ContentParent
:
:
DeallocPHeapSnapshotTempFileHelperParent
(
devtools
:
:
PHeapSnapshotTempFileHelperParent
*
aHeapSnapshotHelper
)
{
delete
aHeapSnapshotHelper
;
return
true
;
}
bool
ContentParent
:
:
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
aDMDFile
)
{
mMemoryReportRequest
=
MakeUnique
<
MemoryReportRequestHost
>
(
aGeneration
)
;
RefPtr
<
ContentParent
>
self
(
this
)
;
PContentParent
:
:
SendRequestMemoryReport
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
[
&
self
]
(
const
uint32_t
&
aGeneration2
)
{
if
(
self
-
>
mMemoryReportRequest
)
{
self
-
>
mMemoryReportRequest
-
>
Finish
(
aGeneration2
)
;
self
-
>
mMemoryReportRequest
=
nullptr
;
}
}
[
&
self
]
(
mozilla
:
:
ipc
:
:
ResponseRejectReason
)
{
self
-
>
mMemoryReportRequest
=
nullptr
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
{
if
(
mMemoryReportRequest
)
{
mMemoryReportRequest
-
>
RecvReport
(
aReport
)
;
}
return
IPC_OK
(
)
;
}
PCycleCollectWithLogsParent
*
ContentParent
:
:
AllocPCycleCollectWithLogsParent
(
const
bool
&
aDumpAllTraces
const
FileDescriptor
&
aGCLog
const
FileDescriptor
&
aCCLog
)
{
MOZ_CRASH
(
"
Don
'
t
call
this
;
use
ContentParent
:
:
CycleCollectWithLogs
"
)
;
}
bool
ContentParent
:
:
DeallocPCycleCollectWithLogsParent
(
PCycleCollectWithLogsParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
bool
ContentParent
:
:
CycleCollectWithLogs
(
bool
aDumpAllTraces
nsICycleCollectorLogSink
*
aSink
nsIDumpGCAndCCLogsCallback
*
aCallback
)
{
return
CycleCollectWithLogsParent
:
:
AllocAndSendConstructor
(
this
aDumpAllTraces
aSink
aCallback
)
;
}
PScriptCacheParent
*
ContentParent
:
:
AllocPScriptCacheParent
(
const
FileDescOrError
&
cacheFile
const
bool
&
wantCacheData
)
{
return
new
loader
:
:
ScriptCacheParent
(
wantCacheData
)
;
}
bool
ContentParent
:
:
DeallocPScriptCacheParent
(
PScriptCacheParent
*
cache
)
{
delete
static_cast
<
loader
:
:
ScriptCacheParent
*
>
(
cache
)
;
return
true
;
}
already_AddRefed
<
PNeckoParent
>
ContentParent
:
:
AllocPNeckoParent
(
)
{
RefPtr
<
NeckoParent
>
actor
=
new
NeckoParent
(
)
;
return
actor
.
forget
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInitStreamFilter
(
const
uint64_t
&
aChannelId
const
nsAString
&
aAddonId
InitStreamFilterResolver
&
&
aResolver
)
{
extensions
:
:
StreamFilterParent
:
:
Create
(
this
aChannelId
aAddonId
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
]
(
mozilla
:
:
ipc
:
:
Endpoint
<
PStreamFilterChild
>
&
&
aEndpoint
)
{
aResolver
(
std
:
:
move
(
aEndpoint
)
)
;
}
[
aResolver
]
(
bool
aDummy
)
{
aResolver
(
mozilla
:
:
ipc
:
:
Endpoint
<
PStreamFilterChild
>
(
)
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddSecurityState
(
const
MaybeDiscarded
<
WindowContext
>
&
aContext
uint32_t
aStateFlags
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
aContext
.
get
(
)
-
>
AddSecurityState
(
aStateFlags
)
;
return
IPC_OK
(
)
;
}
already_AddRefed
<
PExternalHelperAppParent
>
ContentParent
:
:
AllocPExternalHelperAppParent
(
nsIURI
*
uri
const
mozilla
:
:
net
:
:
LoadInfoArgs
&
aLoadInfoArgs
const
nsACString
&
aMimeContentType
const
nsACString
&
aContentDisposition
const
uint32_t
&
aContentDispositionHint
const
nsAString
&
aContentDispositionFilename
const
bool
&
aForceSave
const
int64_t
&
aContentLength
const
bool
&
aWasFileChannel
nsIURI
*
aReferrer
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
RefPtr
<
ExternalHelperAppParent
>
parent
=
new
ExternalHelperAppParent
(
uri
aContentLength
aWasFileChannel
aContentDisposition
aContentDispositionHint
aContentDispositionFilename
)
;
return
parent
.
forget
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPExternalHelperAppConstructor
(
PExternalHelperAppParent
*
actor
nsIURI
*
uri
const
LoadInfoArgs
&
loadInfoArgs
const
nsACString
&
aMimeContentType
const
nsACString
&
aContentDisposition
const
uint32_t
&
aContentDispositionHint
const
nsAString
&
aContentDispositionFilename
const
bool
&
aForceSave
const
int64_t
&
aContentLength
const
bool
&
aWasFileChannel
nsIURI
*
aReferrer
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
BrowsingContext
*
context
=
aContext
.
IsDiscarded
(
)
?
nullptr
:
aContext
.
get
(
)
;
if
(
!
static_cast
<
ExternalHelperAppParent
*
>
(
actor
)
-
>
Init
(
loadInfoArgs
aMimeContentType
aForceSave
aReferrer
context
)
)
{
return
IPC_FAIL
(
this
"
Init
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
already_AddRefed
<
PHandlerServiceParent
>
ContentParent
:
:
AllocPHandlerServiceParent
(
)
{
RefPtr
<
HandlerServiceParent
>
actor
=
new
HandlerServiceParent
(
)
;
return
actor
.
forget
(
)
;
}
media
:
:
PMediaParent
*
ContentParent
:
:
AllocPMediaParent
(
)
{
return
media
:
:
AllocPMediaParent
(
)
;
}
bool
ContentParent
:
:
DeallocPMediaParent
(
media
:
:
PMediaParent
*
aActor
)
{
return
media
:
:
DeallocPMediaParent
(
aActor
)
;
}
#
ifdef
MOZ_WEBSPEECH
already_AddRefed
<
PSpeechSynthesisParent
>
ContentParent
:
:
AllocPSpeechSynthesisParent
(
)
{
if
(
!
StaticPrefs
:
:
media_webspeech_synth_enabled
(
)
)
{
return
nullptr
;
}
RefPtr
<
SpeechSynthesisParent
>
actor
=
new
SpeechSynthesisParent
(
)
;
return
actor
.
forget
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPSpeechSynthesisConstructor
(
PSpeechSynthesisParent
*
aActor
)
{
if
(
!
static_cast
<
SpeechSynthesisParent
*
>
(
aActor
)
-
>
SendInit
(
)
)
{
return
IPC_FAIL
(
this
"
SpeechSynthesisParent
:
:
SendInit
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvStartVisitedQueries
(
const
nsTArray
<
RefPtr
<
nsIURI
>
>
&
aUris
)
{
nsCOMPtr
<
IHistory
>
history
=
components
:
:
History
:
:
Service
(
)
;
if
(
!
history
)
{
return
IPC_OK
(
)
;
}
for
(
const
auto
&
uri
:
aUris
)
{
if
(
NS_WARN_IF
(
!
uri
)
)
{
continue
;
}
history
-
>
ScheduleVisitedQuery
(
uri
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetURITitle
(
nsIURI
*
uri
const
nsAString
&
title
)
{
if
(
!
uri
)
{
return
IPC_FAIL
(
this
"
uri
must
not
be
null
.
"
)
;
}
nsCOMPtr
<
IHistory
>
history
=
components
:
:
History
:
:
Service
(
)
;
if
(
history
)
{
history
-
>
SetURITitle
(
uri
title
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvIsSecureURI
(
nsIURI
*
aURI
const
OriginAttributes
&
aOriginAttributes
bool
*
aIsSecureURI
)
{
nsCOMPtr
<
nsISiteSecurityService
>
sss
(
do_GetService
(
NS_SSSERVICE_CONTRACTID
)
)
;
if
(
!
sss
)
{
return
IPC_FAIL
(
this
"
Failed
to
get
nsISiteSecurityService
.
"
)
;
}
if
(
!
aURI
)
{
return
IPC_FAIL
(
this
"
aURI
must
not
be
null
.
"
)
;
}
nsresult
rv
=
sss
-
>
IsSecureURI
(
aURI
aOriginAttributes
aIsSecureURI
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_FAIL
(
this
"
IsSecureURI
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAccumulateMixedContentHSTS
(
nsIURI
*
aURI
const
bool
&
aActive
const
OriginAttributes
&
aOriginAttributes
)
{
if
(
!
aURI
)
{
return
IPC_FAIL
(
this
"
aURI
must
not
be
null
.
"
)
;
}
nsMixedContentBlocker
:
:
AccumulateMixedContentHSTS
(
aURI
aActive
aOriginAttributes
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvLoadURIExternal
(
nsIURI
*
uri
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aRedirectPrincipal
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aWasExternallyTriggered
bool
aHasValidUserGestureActivation
bool
aNewWindowTarget
)
{
if
(
aContext
.
IsDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIExternalProtocolService
>
extProtService
(
do_GetService
(
NS_EXTERNALPROTOCOLSERVICE_CONTRACTID
)
)
;
if
(
!
extProtService
)
{
return
IPC_OK
(
)
;
}
if
(
!
uri
)
{
return
IPC_FAIL
(
this
"
uri
must
not
be
null
.
"
)
;
}
BrowsingContext
*
bc
=
aContext
.
get
(
)
;
extProtService
-
>
LoadURI
(
uri
aTriggeringPrincipal
aRedirectPrincipal
bc
aWasExternallyTriggered
aHasValidUserGestureActivation
aNewWindowTarget
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvExtProtocolChannelConnectParent
(
const
uint64_t
&
registrarId
)
{
nsresult
rv
;
nsCOMPtr
<
nsIChannel
>
channel
;
rv
=
NS_LinkRedirectChannels
(
registrarId
nullptr
getter_AddRefs
(
channel
)
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
nsCOMPtr
<
nsIParentChannel
>
parent
=
do_QueryInterface
(
channel
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
rv
=
NS_LinkRedirectChannels
(
registrarId
parent
getter_AddRefs
(
channel
)
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_OK
(
)
)
;
parent
-
>
SetParentListener
(
nullptr
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSyncMessage
(
const
nsAString
&
aMsg
const
ClonedMessageData
&
aData
nsTArray
<
UniquePtr
<
StructuredCloneData
>
>
*
aRetvals
)
{
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
"
ContentParent
:
:
RecvSyncMessage
"
OTHER
aMsg
)
;
MMPrinter
:
:
Print
(
"
ContentParent
:
:
RecvSyncMessage
"
aMsg
aData
)
;
RefPtr
<
nsFrameMessageManager
>
ppm
=
mMessageManager
;
if
(
ppm
)
{
ipc
:
:
StructuredCloneData
data
;
ipc
:
:
UnpackClonedMessageData
(
aData
data
)
;
ppm
-
>
ReceiveMessage
(
ppm
nullptr
aMsg
true
&
data
aRetvals
IgnoreErrors
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAsyncMessage
(
const
nsAString
&
aMsg
const
ClonedMessageData
&
aData
)
{
AUTO_PROFILER_LABEL_DYNAMIC_LOSSY_NSSTRING
(
"
ContentParent
:
:
RecvAsyncMessage
"
OTHER
aMsg
)
;
MMPrinter
:
:
Print
(
"
ContentParent
:
:
RecvAsyncMessage
"
aMsg
aData
)
;
RefPtr
<
nsFrameMessageManager
>
ppm
=
mMessageManager
;
if
(
ppm
)
{
ipc
:
:
StructuredCloneData
data
;
ipc
:
:
UnpackClonedMessageData
(
aData
data
)
;
ppm
-
>
ReceiveMessage
(
ppm
nullptr
aMsg
false
&
data
nullptr
IgnoreErrors
(
)
)
;
}
return
IPC_OK
(
)
;
}
MOZ_CAN_RUN_SCRIPT
static
int32_t
AddGeolocationListener
(
nsIDOMGeoPositionCallback
*
watcher
nsIDOMGeoPositionErrorCallback
*
errorCallBack
bool
highAccuracy
)
{
RefPtr
<
Geolocation
>
geo
=
Geolocation
:
:
NonWindowSingleton
(
)
;
UniquePtr
<
PositionOptions
>
options
=
MakeUnique
<
PositionOptions
>
(
)
;
options
-
>
mTimeout
=
0
;
options
-
>
mMaximumAge
=
0
;
options
-
>
mEnableHighAccuracy
=
highAccuracy
;
return
geo
-
>
WatchPosition
(
watcher
errorCallBack
std
:
:
move
(
options
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddGeolocationListener
(
const
bool
&
aHighAccuracy
)
{
RecvRemoveGeolocationListener
(
)
;
mGeolocationWatchID
=
AddGeolocationListener
(
this
this
aHighAccuracy
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRemoveGeolocationListener
(
)
{
if
(
mGeolocationWatchID
!
=
-
1
)
{
RefPtr
<
Geolocation
>
geo
=
Geolocation
:
:
NonWindowSingleton
(
)
;
if
(
geo
)
{
geo
-
>
ClearWatch
(
mGeolocationWatchID
)
;
}
mGeolocationWatchID
=
-
1
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetGeolocationHigherAccuracy
(
const
bool
&
aEnable
)
{
if
(
mGeolocationWatchID
!
=
-
1
)
{
RecvRemoveGeolocationListener
(
)
;
mGeolocationWatchID
=
AddGeolocationListener
(
this
this
aEnable
)
;
}
return
IPC_OK
(
)
;
}
NS_IMETHODIMP
ContentParent
:
:
HandleEvent
(
nsIDOMGeoPosition
*
postion
)
{
Unused
<
<
SendGeolocationUpdate
(
postion
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
HandleEvent
(
GeolocationPositionError
*
positionError
)
{
Unused
<
<
SendGeolocationError
(
positionError
-
>
Code
(
)
)
;
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvConsoleMessage
(
const
nsAString
&
aMessage
)
{
nsresult
rv
;
nsCOMPtr
<
nsIConsoleService
>
consoleService
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
RefPtr
<
nsConsoleMessage
>
msg
(
new
nsConsoleMessage
(
aMessage
)
)
;
msg
-
>
SetIsForwardedFromContentProcess
(
true
)
;
consoleService
-
>
LogMessageWithMode
(
msg
nsIConsoleService
:
:
SuppressLog
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvReportFrameTimingData
(
const
LoadInfoArgs
&
loadInfoArgs
const
nsAString
&
entryName
const
nsAString
&
initiatorType
UniquePtr
<
PerformanceTimingData
>
&
&
aData
)
{
if
(
!
aData
)
{
return
IPC_FAIL
(
this
"
aData
should
not
be
null
"
)
;
}
RefPtr
<
WindowGlobalParent
>
parent
=
WindowGlobalParent
:
:
GetByInnerWindowId
(
loadInfoArgs
.
innerWindowID
(
)
)
;
if
(
!
parent
|
|
!
parent
-
>
GetContentParent
(
)
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
parent
-
>
GetContentParent
(
)
!
=
this
"
No
need
to
bounce
around
if
in
the
same
process
"
)
;
Unused
<
<
parent
-
>
GetContentParent
(
)
-
>
SendReportFrameTimingData
(
loadInfoArgs
entryName
initiatorType
aData
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvScriptError
(
const
nsAString
&
aMessage
const
nsACString
&
aSourceName
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColNumber
const
uint32_t
&
aFlags
const
nsACString
&
aCategory
const
bool
&
aIsFromPrivateWindow
const
uint64_t
&
aInnerWindowId
const
bool
&
aIsFromChromeContext
)
{
return
RecvScriptErrorInternal
(
aMessage
aSourceName
aLineNumber
aColNumber
aFlags
aCategory
aIsFromPrivateWindow
aIsFromChromeContext
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvScriptErrorWithStack
(
const
nsAString
&
aMessage
const
nsACString
&
aSourceName
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColNumber
const
uint32_t
&
aFlags
const
nsACString
&
aCategory
const
bool
&
aIsFromPrivateWindow
const
bool
&
aIsFromChromeContext
const
ClonedMessageData
&
aStack
)
{
return
RecvScriptErrorInternal
(
aMessage
aSourceName
aLineNumber
aColNumber
aFlags
aCategory
aIsFromPrivateWindow
aIsFromChromeContext
&
aStack
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvScriptErrorInternal
(
const
nsAString
&
aMessage
const
nsACString
&
aSourceName
const
uint32_t
&
aLineNumber
const
uint32_t
&
aColNumber
const
uint32_t
&
aFlags
const
nsACString
&
aCategory
const
bool
&
aIsFromPrivateWindow
const
bool
&
aIsFromChromeContext
const
ClonedMessageData
*
aStack
)
{
nsresult
rv
;
nsCOMPtr
<
nsIConsoleService
>
consoleService
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIScriptError
>
msg
;
if
(
aStack
)
{
StructuredCloneData
data
;
UnpackClonedMessageData
(
*
aStack
data
)
;
AutoJSAPI
jsapi
;
if
(
NS_WARN_IF
(
!
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
)
)
{
MOZ_CRASH
(
)
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
stack
(
cx
)
;
ErrorResult
rv
;
data
.
Read
(
cx
&
stack
rv
)
;
if
(
rv
.
Failed
(
)
|
|
!
stack
.
isObject
(
)
)
{
rv
.
SuppressException
(
)
;
return
IPC_OK
(
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
stackObj
(
cx
&
stack
.
toObject
(
)
)
;
if
(
!
JS
:
:
IsUnwrappedSavedFrame
(
stackObj
)
)
{
return
IPC_FAIL
(
this
"
Unexpected
object
"
)
;
}
JS
:
:
Rooted
<
JSObject
*
>
stackGlobal
(
cx
JS
:
:
GetNonCCWObjectGlobal
(
stackObj
)
)
;
msg
=
new
nsScriptErrorWithStack
(
JS
:
:
NothingHandleValue
stackObj
stackGlobal
)
;
}
else
{
msg
=
new
nsScriptError
(
)
;
}
rv
=
msg
-
>
Init
(
aMessage
aSourceName
aLineNumber
aColNumber
aFlags
aCategory
aIsFromPrivateWindow
aIsFromChromeContext
)
;
if
(
NS_FAILED
(
rv
)
)
return
IPC_OK
(
)
;
msg
-
>
SetIsForwardedFromContentProcess
(
true
)
;
consoleService
-
>
LogMessageWithMode
(
msg
nsIConsoleService
:
:
SuppressLog
)
;
return
IPC_OK
(
)
;
}
bool
ContentParent
:
:
DoLoadMessageManagerScript
(
const
nsAString
&
aURL
bool
aRunInGlobalScope
)
{
MOZ_ASSERT
(
!
aRunInGlobalScope
)
;
return
SendLoadProcessScript
(
aURL
)
;
}
nsresult
ContentParent
:
:
DoSendAsyncMessage
(
const
nsAString
&
aMessage
StructuredCloneData
&
aData
)
{
ClonedMessageData
data
;
if
(
!
BuildClonedMessageData
(
aData
data
)
)
{
return
NS_ERROR_DOM_DATA_CLONE_ERR
;
}
if
(
!
SendAsyncMessage
(
aMessage
data
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
NS_OK
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCopyFavicon
(
nsIURI
*
aOldURI
nsIURI
*
aNewURI
const
bool
&
aInPrivateBrowsing
)
{
if
(
!
aOldURI
)
{
return
IPC_FAIL
(
this
"
aOldURI
should
not
be
null
"
)
;
}
if
(
!
aNewURI
)
{
return
IPC_FAIL
(
this
"
aNewURI
should
not
be
null
"
)
;
}
nsDocShell
:
:
CopyFavicon
(
aOldURI
aNewURI
aInPrivateBrowsing
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvFindImageText
(
IPCImage
&
&
aImage
nsTArray
<
nsCString
>
&
&
aLanguages
FindImageTextResolver
&
&
aResolver
)
{
if
(
!
TextRecognition
:
:
IsSupported
(
)
|
|
!
Preferences
:
:
GetBool
(
"
dom
.
text
-
recognition
.
enabled
"
)
)
{
return
IPC_FAIL
(
this
"
Text
recognition
not
available
.
"
)
;
}
RefPtr
<
DataSourceSurface
>
surf
=
nsContentUtils
:
:
IPCImageToSurface
(
aImage
)
;
if
(
!
surf
)
{
aResolver
(
TextRecognitionResultOrError
(
"
Failed
to
read
image
"
_ns
)
)
;
return
IPC_OK
(
)
;
}
TextRecognition
:
:
FindText
(
*
surf
aLanguages
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
resolver
=
std
:
:
move
(
aResolver
)
]
(
TextRecognition
:
:
NativePromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
if
(
aValue
.
IsResolve
(
)
)
{
resolver
(
TextRecognitionResultOrError
(
aValue
.
ResolveValue
(
)
)
)
;
}
else
{
resolver
(
TextRecognitionResultOrError
(
aValue
.
RejectValue
(
)
)
)
;
}
}
)
;
return
IPC_OK
(
)
;
}
bool
ContentParent
:
:
ShouldContinueFromReplyTimeout
(
)
{
RefPtr
<
ProcessHangMonitor
>
monitor
=
ProcessHangMonitor
:
:
Get
(
)
;
return
!
monitor
|
|
!
monitor
-
>
ShouldTimeOutCPOWs
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddIdleObserver
(
const
uint64_t
&
aObserverId
const
uint32_t
&
aIdleTimeInS
)
{
nsresult
rv
;
nsCOMPtr
<
nsIUserIdleService
>
idleService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_FAIL
(
this
"
Failed
to
get
UserIdleService
.
"
)
)
;
RefPtr
<
ParentIdleListener
>
listener
=
new
ParentIdleListener
(
this
aObserverId
aIdleTimeInS
)
;
rv
=
idleService
-
>
AddIdleObserver
(
listener
aIdleTimeInS
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_FAIL
(
this
"
AddIdleObserver
failed
.
"
)
)
;
mIdleListeners
.
AppendElement
(
listener
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRemoveIdleObserver
(
const
uint64_t
&
aObserverId
const
uint32_t
&
aIdleTimeInS
)
{
RefPtr
<
ParentIdleListener
>
listener
;
for
(
int32_t
i
=
mIdleListeners
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
listener
=
static_cast
<
ParentIdleListener
*
>
(
mIdleListeners
[
i
]
.
get
(
)
)
;
if
(
listener
-
>
mObserver
=
=
aObserverId
&
&
listener
-
>
mTime
=
=
aIdleTimeInS
)
{
nsresult
rv
;
nsCOMPtr
<
nsIUserIdleService
>
idleService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
useridleservice
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
IPC_FAIL
(
this
"
Failed
to
get
UserIdleService
.
"
)
)
;
idleService
-
>
RemoveIdleObserver
(
listener
aIdleTimeInS
)
;
mIdleListeners
.
RemoveElementAt
(
i
)
;
break
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvBackUpXResources
(
const
FileDescriptor
&
aXSocketFd
)
{
#
ifndef
MOZ_X11
MOZ_CRASH
(
"
This
message
only
makes
sense
on
X11
platforms
"
)
;
#
else
MOZ_ASSERT
(
!
mChildXSocketFdDup
"
Already
backed
up
X
resources
?
?
"
)
;
if
(
aXSocketFd
.
IsValid
(
)
)
{
mChildXSocketFdDup
=
aXSocketFd
.
ClonePlatformHandle
(
)
;
}
#
endif
return
IPC_OK
(
)
;
}
class
AnonymousTemporaryFileRequestor
final
:
public
Runnable
{
public
:
AnonymousTemporaryFileRequestor
(
ContentParent
*
aCP
const
uint64_t
&
aID
)
:
Runnable
(
"
dom
:
:
AnonymousTemporaryFileRequestor
"
)
mCP
(
aCP
)
mID
(
aID
)
mRv
(
NS_OK
)
mPRFD
(
nullptr
)
{
}
NS_IMETHOD
Run
(
)
override
{
if
(
NS_IsMainThread
(
)
)
{
FileDescOrError
result
;
if
(
NS_WARN_IF
(
NS_FAILED
(
mRv
)
)
)
{
result
=
mRv
;
}
else
{
result
=
FileDescriptor
(
FileDescriptor
:
:
PlatformHandleType
(
PR_FileDesc2NativeHandle
(
mPRFD
)
)
)
;
PR_Close
(
mPRFD
)
;
}
Unused
<
<
mCP
-
>
SendProvideAnonymousTemporaryFile
(
mID
result
)
;
mCP
=
nullptr
;
}
else
{
mRv
=
NS_OpenAnonymousTemporaryFile
(
&
mPRFD
)
;
NS_DispatchToMainThread
(
this
)
;
}
return
NS_OK
;
}
private
:
RefPtr
<
ContentParent
>
mCP
;
uint64_t
mID
;
nsresult
mRv
;
PRFileDesc
*
mPRFD
;
}
;
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRequestAnonymousTemporaryFile
(
const
uint64_t
&
aID
)
{
nsresult
rv
=
NS_OK
;
RefPtr
<
ContentParent
>
self
(
this
)
;
auto
autoNotifyChildOnError
=
MakeScopeExit
(
[
&
self
]
(
)
{
if
(
NS_FAILED
(
rv
)
)
{
FileDescOrError
result
(
rv
)
;
Unused
<
<
self
-
>
SendProvideAnonymousTemporaryFile
(
aID
result
)
;
}
}
)
;
nsCOMPtr
<
nsIEventTarget
>
target
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
if
(
!
target
)
{
return
IPC_OK
(
)
;
}
rv
=
target
-
>
Dispatch
(
new
AnonymousTemporaryFileRequestor
(
this
aID
)
NS_DISPATCH_NORMAL
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
IPC_OK
(
)
;
}
rv
=
NS_OK
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateAudioIPCConnection
(
CreateAudioIPCConnectionResolver
&
&
aResolver
)
{
FileDescriptor
fd
=
CubebUtils
:
:
CreateAudioIPCConnection
(
)
;
FileDescOrError
result
;
if
(
fd
.
IsValid
(
)
)
{
result
=
fd
;
}
else
{
result
=
NS_ERROR_FAILURE
;
}
aResolver
(
result
)
;
return
IPC_OK
(
)
;
}
already_AddRefed
<
extensions
:
:
PExtensionsParent
>
ContentParent
:
:
AllocPExtensionsParent
(
)
{
return
MakeAndAddRef
<
extensions
:
:
ExtensionsParent
>
(
)
;
}
void
ContentParent
:
:
NotifyUpdatedDictionaries
(
)
{
RefPtr
<
mozSpellChecker
>
spellChecker
(
mozSpellChecker
:
:
Create
(
)
)
;
MOZ_ASSERT
(
spellChecker
"
No
spell
checker
?
"
)
;
nsTArray
<
nsCString
>
dictionaries
;
spellChecker
-
>
GetDictionaryList
(
&
dictionaries
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
Unused
<
<
cp
-
>
SendUpdateDictionaryList
(
dictionaries
)
;
}
}
void
ContentParent
:
:
NotifyUpdatedFonts
(
bool
aFullRebuild
)
{
if
(
gfxPlatformFontList
:
:
PlatformFontList
(
)
-
>
SharedFontList
(
)
)
{
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
Unused
<
<
cp
-
>
SendRebuildFontList
(
aFullRebuild
)
;
}
return
;
}
SystemFontList
fontList
;
gfxPlatform
:
:
GetPlatform
(
)
-
>
ReadSystemFontList
(
&
fontList
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
Unused
<
<
cp
-
>
SendUpdateFontList
(
fontList
)
;
}
}
#
ifdef
MOZ_WEBRTC
PWebrtcGlobalParent
*
ContentParent
:
:
AllocPWebrtcGlobalParent
(
)
{
return
WebrtcGlobalParent
:
:
Alloc
(
)
;
}
bool
ContentParent
:
:
DeallocPWebrtcGlobalParent
(
PWebrtcGlobalParent
*
aActor
)
{
WebrtcGlobalParent
:
:
Dealloc
(
static_cast
<
WebrtcGlobalParent
*
>
(
aActor
)
)
;
return
true
;
}
#
endif
PContentPermissionRequestParent
*
ContentParent
:
:
AllocPContentPermissionRequestParent
(
const
nsTArray
<
PermissionRequest
>
&
aRequests
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aTopLevelPrincipal
const
bool
&
aIsHandlingUserInput
const
bool
&
aMaybeUnsafePermissionDelegate
const
TabId
&
aTabId
)
{
RefPtr
<
BrowserParent
>
tp
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
cpm
)
{
tp
=
cpm
-
>
GetTopLevelBrowserParentByProcessAndTabId
(
this
-
>
ChildID
(
)
aTabId
)
;
}
if
(
!
tp
)
{
return
nullptr
;
}
nsIPrincipal
*
topPrincipal
=
aTopLevelPrincipal
;
if
(
!
topPrincipal
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
=
tp
-
>
GetContentPrincipal
(
)
;
topPrincipal
=
principal
;
}
return
nsContentPermissionUtils
:
:
CreateContentPermissionRequestParent
(
aRequests
tp
-
>
GetOwnerElement
(
)
aPrincipal
topPrincipal
aIsHandlingUserInput
aMaybeUnsafePermissionDelegate
aTabId
)
;
}
bool
ContentParent
:
:
DeallocPContentPermissionRequestParent
(
PContentPermissionRequestParent
*
actor
)
{
nsContentPermissionUtils
:
:
NotifyRemoveContentPermissionRequestParent
(
actor
)
;
delete
actor
;
return
true
;
}
already_AddRefed
<
PWebBrowserPersistDocumentParent
>
ContentParent
:
:
AllocPWebBrowserPersistDocumentParent
(
PBrowserParent
*
aBrowser
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
return
MakeAndAddRef
<
WebBrowserPersistDocumentParent
>
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
CommonCreateWindow
(
PBrowserParent
*
aThisTab
BrowsingContext
&
aParent
bool
aSetOpener
const
uint32_t
&
aChromeFlags
const
bool
&
aCalledFromJS
const
bool
&
aForPrinting
const
bool
&
aForWindowDotPrint
const
bool
&
aIsTopLevelCreatedByWebContent
nsIURI
*
aURIToLoad
const
nsACString
&
aFeatures
const
UserActivation
:
:
Modifiers
&
aModifiers
BrowserParent
*
aNextRemoteBrowser
const
nsAString
&
aName
nsresult
&
aResult
nsCOMPtr
<
nsIRemoteTab
>
&
aNewRemoteTab
bool
*
aWindowIsNew
int32_t
&
aOpenLocation
nsIPrincipal
*
aTriggeringPrincipal
nsIReferrerInfo
*
aReferrerInfo
bool
aLoadURI
nsIPolicyContainer
*
aPolicyContainer
const
OriginAttributes
&
aOriginAttributes
bool
aUserActivation
bool
aTextDirectiveUserActivation
)
{
const
uint32_t
badFlags
=
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_WINDOW
|
nsIWebBrowserChrome
:
:
CHROME_NON_PRIVATE_WINDOW
|
nsIWebBrowserChrome
:
:
CHROME_PRIVATE_LIFETIME
;
if
(
!
!
(
aChromeFlags
&
badFlags
)
)
{
return
IPC_FAIL
(
this
"
Forbidden
aChromeFlags
passed
"
)
;
}
RefPtr
<
nsOpenWindowInfo
>
openInfo
=
new
nsOpenWindowInfo
(
)
;
openInfo
-
>
mForceNoOpener
=
!
aSetOpener
;
openInfo
-
>
mParent
=
&
aParent
;
openInfo
-
>
mIsRemote
=
true
;
openInfo
-
>
mIsForPrinting
=
aForPrinting
;
openInfo
-
>
mIsForWindowDotPrint
=
aForWindowDotPrint
;
openInfo
-
>
mNextRemoteBrowser
=
aNextRemoteBrowser
;
openInfo
-
>
mOriginAttributes
=
aOriginAttributes
;
openInfo
-
>
mIsTopLevelCreatedByWebContent
=
aIsTopLevelCreatedByWebContent
;
openInfo
-
>
mHasValidUserGestureActivation
=
aUserActivation
;
openInfo
-
>
mTextDirectiveUserActivation
=
aTextDirectiveUserActivation
;
MOZ_ASSERT_IF
(
aForWindowDotPrint
aForPrinting
)
;
RefPtr
<
BrowserParent
>
topParent
=
BrowserParent
:
:
GetFrom
(
aThisTab
)
;
while
(
topParent
&
&
topParent
-
>
GetBrowserBridgeParent
(
)
)
{
topParent
=
topParent
-
>
GetBrowserBridgeParent
(
)
-
>
Manager
(
)
;
}
RefPtr
<
BrowserHost
>
thisBrowserHost
=
topParent
?
topParent
-
>
GetBrowserHost
(
)
:
nullptr
;
MOZ_ASSERT_IF
(
topParent
thisBrowserHost
)
;
RefPtr
<
BrowsingContext
>
topBC
=
topParent
?
topParent
-
>
GetBrowsingContext
(
)
:
nullptr
;
MOZ_ASSERT_IF
(
topParent
topBC
)
;
if
(
topBC
)
{
if
(
(
!
!
(
aChromeFlags
&
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
)
!
=
topBC
-
>
UseRemoteTabs
(
)
)
|
|
(
!
!
(
aChromeFlags
&
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
)
!
=
topBC
-
>
UseRemoteSubframes
(
)
)
)
{
return
IPC_FAIL
(
this
"
Unexpected
aChromeFlags
passed
"
)
;
}
if
(
!
aOriginAttributes
.
EqualsIgnoringFPD
(
topBC
-
>
OriginAttributesRef
(
)
)
)
{
return
IPC_FAIL
(
this
"
Passed
-
in
OriginAttributes
does
not
match
opener
"
)
;
}
}
nsCOMPtr
<
nsIContent
>
frame
;
if
(
topParent
)
{
frame
=
topParent
-
>
GetOwnerElement
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
outerWin
;
if
(
frame
)
{
outerWin
=
frame
-
>
OwnerDoc
(
)
-
>
GetWindow
(
)
;
if
(
outerWin
&
&
outerWin
-
>
Closed
(
)
)
{
outerWin
=
nullptr
;
}
}
nsCOMPtr
<
nsIBrowserDOMWindow
>
browserDOMWin
;
if
(
topParent
)
{
browserDOMWin
=
topParent
-
>
GetBrowserDOMWindow
(
)
;
}
if
(
!
outerWin
)
{
if
(
aOriginAttributes
.
mPrivateBrowsingId
!
=
nsIScriptSecurityManager
:
:
DEFAULT_PRIVATE_BROWSING_ID
)
{
aResult
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
outerWin
=
nsContentUtils
:
:
GetMostRecentNonPBWindow
(
)
;
if
(
NS_WARN_IF
(
!
outerWin
)
)
{
aResult
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
if
(
nsGlobalWindowOuter
:
:
Cast
(
outerWin
)
-
>
IsChromeWindow
(
)
)
{
browserDOMWin
=
nsGlobalWindowOuter
:
:
Cast
(
outerWin
)
-
>
GetBrowserDOMWindow
(
)
;
}
}
aOpenLocation
=
nsWindowWatcher
:
:
GetWindowOpenLocation
(
outerWin
aChromeFlags
aModifiers
aCalledFromJS
aForPrinting
)
;
MOZ_ASSERT
(
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_BACKGROUND
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_FOREGROUND
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_PRINT_BROWSER
)
;
if
(
NS_WARN_IF
(
!
browserDOMWin
)
)
{
#
ifdef
MOZ_GECKOVIEW
aResult
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
#
else
aOpenLocation
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
;
#
endif
}
if
(
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_BACKGROUND
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_FOREGROUND
|
|
aOpenLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_PRINT_BROWSER
)
{
RefPtr
<
Element
>
openerElement
=
do_QueryObject
(
frame
)
;
nsCOMPtr
<
nsIOpenURIInFrameParams
>
params
=
new
nsOpenURIInFrameParams
(
openInfo
openerElement
)
;
params
-
>
SetReferrerInfo
(
aReferrerInfo
)
;
MOZ_ASSERT
(
aTriggeringPrincipal
"
need
a
valid
triggeringPrincipal
"
)
;
params
-
>
SetTriggeringPrincipal
(
aTriggeringPrincipal
)
;
params
-
>
SetPolicyContainer
(
aPolicyContainer
)
;
RefPtr
<
Element
>
el
;
if
(
aLoadURI
)
{
aResult
=
browserDOMWin
-
>
OpenURIInFrame
(
aURIToLoad
params
aOpenLocation
nsIBrowserDOMWindow
:
:
OPEN_NEW
aName
getter_AddRefs
(
el
)
)
;
}
else
{
aResult
=
browserDOMWin
-
>
CreateContentWindowInFrame
(
aURIToLoad
params
aOpenLocation
nsIBrowserDOMWindow
:
:
OPEN_NEW
aName
getter_AddRefs
(
el
)
)
;
}
RefPtr
<
nsFrameLoaderOwner
>
frameLoaderOwner
=
do_QueryObject
(
el
)
;
if
(
NS_SUCCEEDED
(
aResult
)
&
&
frameLoaderOwner
)
{
RefPtr
<
nsFrameLoader
>
frameLoader
=
frameLoaderOwner
-
>
GetFrameLoader
(
)
;
if
(
frameLoader
)
{
aNewRemoteTab
=
frameLoader
-
>
GetRemoteTab
(
)
;
frameLoader
-
>
ForceLayoutIfNecessary
(
)
;
}
}
else
if
(
NS_SUCCEEDED
(
aResult
)
&
&
!
frameLoaderOwner
)
{
aOpenLocation
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
;
}
else
{
*
aWindowIsNew
=
false
;
}
if
(
aOpenLocation
!
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
)
{
return
IPC_OK
(
)
;
}
}
nsCOMPtr
<
nsPIWindowWatcher
>
pwwatch
=
do_GetService
(
NS_WINDOWWATCHER_CONTRACTID
&
aResult
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
aResult
)
)
)
{
return
IPC_OK
(
)
;
}
WindowFeatures
features
;
features
.
Tokenize
(
aFeatures
)
;
aResult
=
pwwatch
-
>
OpenWindowWithRemoteTab
(
thisBrowserHost
features
aModifiers
aCalledFromJS
aParent
.
FullZoom
(
)
openInfo
getter_AddRefs
(
aNewRemoteTab
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
aResult
)
)
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
aNewRemoteTab
)
;
RefPtr
<
BrowserHost
>
newBrowserHost
=
BrowserHost
:
:
GetFrom
(
aNewRemoteTab
)
;
RefPtr
<
BrowserParent
>
newBrowserParent
=
newBrowserHost
-
>
GetActor
(
)
;
nsCOMPtr
<
Element
>
frameElement
=
newBrowserHost
-
>
GetOwnerElement
(
)
;
MOZ_ASSERT
(
frameElement
)
;
if
(
nsWindowWatcher
:
:
HaveSpecifiedSize
(
features
)
)
{
RefPtr
<
Document
>
chromeDoc
=
frameElement
-
>
OwnerDoc
(
)
;
MOZ_ASSERT
(
chromeDoc
)
;
chromeDoc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
else
{
RefPtr
<
nsFrameLoaderOwner
>
frameLoaderOwner
=
do_QueryObject
(
frameElement
)
;
MOZ_ASSERT
(
frameLoaderOwner
)
;
RefPtr
<
nsFrameLoader
>
frameLoader
=
frameLoaderOwner
-
>
GetFrameLoader
(
)
;
MOZ_ASSERT
(
frameLoader
)
;
frameLoader
-
>
ForceLayoutIfNecessary
(
)
;
}
if
(
nsContentUtils
:
:
IsOverridingWindowName
(
aName
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
newBrowserHost
-
>
GetBrowsingContext
(
)
-
>
SetName
(
aName
)
)
;
}
MOZ_ASSERT
(
newBrowserHost
-
>
GetBrowsingContext
(
)
-
>
OriginAttributesRef
(
)
=
=
aOriginAttributes
)
;
if
(
aURIToLoad
&
&
aLoadURI
)
{
nsCOMPtr
<
mozIDOMWindowProxy
>
openerWindow
;
if
(
aSetOpener
&
&
topParent
)
{
openerWindow
=
topParent
-
>
GetParentWindowOuter
(
)
;
}
nsCOMPtr
<
nsIBrowserDOMWindow
>
newBrowserDOMWin
=
newBrowserParent
-
>
GetBrowserDOMWindow
(
)
;
if
(
NS_WARN_IF
(
!
newBrowserDOMWin
)
)
{
aResult
=
NS_ERROR_ABORT
;
return
IPC_OK
(
)
;
}
RefPtr
<
BrowsingContext
>
bc
;
aResult
=
newBrowserDOMWin
-
>
OpenURI
(
aURIToLoad
openInfo
nsIBrowserDOMWindow
:
:
OPEN_CURRENTWINDOW
nsIBrowserDOMWindow
:
:
OPEN_NEW
aTriggeringPrincipal
aPolicyContainer
getter_AddRefs
(
bc
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateWindow
(
PBrowserParent
*
aThisTab
const
MaybeDiscarded
<
BrowsingContext
>
&
aParent
PBrowserParent
*
aNewTab
const
uint32_t
&
aChromeFlags
const
bool
&
aCalledFromJS
const
bool
&
aForPrinting
const
bool
&
aForWindowDotPrint
const
bool
&
aIsTopLevelCreatedByWebContent
nsIURI
*
aURIToLoad
const
nsACString
&
aFeatures
const
UserActivation
:
:
Modifiers
&
aModifiers
nsIPrincipal
*
aTriggeringPrincipal
nsIPolicyContainer
*
aPolicyContainer
nsIReferrerInfo
*
aReferrerInfo
const
OriginAttributes
&
aOriginAttributes
bool
aUserActivation
bool
aTextDirectiveUserActivation
CreateWindowResolver
&
&
aResolve
)
{
if
(
!
aTriggeringPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aTriggeringPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aTriggeringPrincipal
__func__
)
;
}
nsresult
rv
=
NS_OK
;
CreatedWindowInfo
cwi
;
cwi
.
windowOpened
(
)
=
true
;
cwi
.
maxTouchPoints
(
)
=
0
;
auto
resolveOnExit
=
MakeScopeExit
(
[
&
]
{
cwi
.
rv
(
)
=
rv
;
aResolve
(
cwi
)
;
}
)
;
RefPtr
<
BrowserParent
>
thisTab
=
BrowserParent
:
:
GetFrom
(
aThisTab
)
;
RefPtr
<
BrowserParent
>
newTab
=
BrowserParent
:
:
GetFrom
(
aNewTab
)
;
MOZ_ASSERT
(
newTab
)
;
auto
destroyNewTabOnError
=
MakeScopeExit
(
[
&
]
{
if
(
!
cwi
.
windowOpened
(
)
|
|
NS_FAILED
(
rv
)
)
{
if
(
newTab
)
{
newTab
-
>
Destroy
(
)
;
}
}
}
)
;
RefPtr
<
BrowsingContext
>
parent
=
aParent
.
GetMaybeDiscarded
(
)
;
if
(
NS_WARN_IF
(
!
parent
)
)
{
rv
=
NS_ERROR_FAILURE
;
return
IPC_OK
(
)
;
}
RefPtr
<
BrowsingContext
>
newBC
=
newTab
-
>
GetBrowsingContext
(
)
;
if
(
!
newBC
)
{
return
IPC_FAIL
(
this
"
Missing
BrowsingContext
for
new
tab
"
)
;
}
uint64_t
newBCOpenerId
=
newBC
-
>
GetOpenerId
(
)
;
if
(
newBCOpenerId
!
=
0
&
&
parent
-
>
Id
(
)
!
=
newBCOpenerId
)
{
return
IPC_FAIL
(
this
"
Invalid
opener
BrowsingContext
for
new
tab
"
)
;
}
if
(
newBC
-
>
GetParent
(
)
!
=
nullptr
)
{
return
IPC_FAIL
(
this
"
Unexpected
non
-
toplevel
BrowsingContext
for
new
tab
"
)
;
}
if
(
!
!
(
aChromeFlags
&
nsIWebBrowserChrome
:
:
CHROME_REMOTE_WINDOW
)
!
=
newBC
-
>
UseRemoteTabs
(
)
|
|
!
!
(
aChromeFlags
&
nsIWebBrowserChrome
:
:
CHROME_FISSION_WINDOW
)
!
=
newBC
-
>
UseRemoteSubframes
(
)
)
{
return
IPC_FAIL
(
this
"
Unexpected
aChromeFlags
passed
"
)
;
}
if
(
!
aOriginAttributes
.
EqualsIgnoringFPD
(
newBC
-
>
OriginAttributesRef
(
)
)
)
{
return
IPC_FAIL
(
this
"
Opened
tab
has
mismatched
OriginAttributes
"
)
;
}
if
(
thisTab
&
&
BrowserParent
:
:
GetFrom
(
thisTab
)
-
>
GetBrowsingContext
(
)
)
{
BrowsingContext
*
thisTabBC
=
thisTab
-
>
GetBrowsingContext
(
)
;
if
(
thisTabBC
-
>
UseRemoteTabs
(
)
!
=
newBC
-
>
UseRemoteTabs
(
)
|
|
thisTabBC
-
>
UseRemoteSubframes
(
)
!
=
newBC
-
>
UseRemoteSubframes
(
)
|
|
thisTabBC
-
>
UsePrivateBrowsing
(
)
!
=
newBC
-
>
UsePrivateBrowsing
(
)
)
{
return
IPC_FAIL
(
this
"
New
BrowsingContext
has
mismatched
LoadContext
"
)
;
}
}
BrowserParent
:
:
AutoUseNewTab
aunt
(
newTab
)
;
nsCOMPtr
<
nsIRemoteTab
>
newRemoteTab
;
int32_t
openLocation
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
;
mozilla
:
:
ipc
:
:
IPCResult
ipcResult
=
CommonCreateWindow
(
aThisTab
*
parent
newBCOpenerId
!
=
0
aChromeFlags
aCalledFromJS
aForPrinting
aForWindowDotPrint
aIsTopLevelCreatedByWebContent
aURIToLoad
aFeatures
aModifiers
newTab
VoidString
(
)
rv
newRemoteTab
&
cwi
.
windowOpened
(
)
openLocation
aTriggeringPrincipal
aReferrerInfo
false
aPolicyContainer
aOriginAttributes
aUserActivation
aTextDirectiveUserActivation
)
;
if
(
!
ipcResult
)
{
return
ipcResult
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
|
|
!
newRemoteTab
)
{
return
IPC_OK
(
)
;
}
MOZ_ASSERT
(
BrowserHost
:
:
GetFrom
(
newRemoteTab
.
get
(
)
)
=
=
newTab
-
>
GetBrowserHost
(
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
newBC
-
>
SetHasSiblings
(
openLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB
|
|
openLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_BACKGROUND
|
|
openLocation
=
=
nsIBrowserDOMWindow
:
:
OPEN_NEWTAB_FOREGROUND
)
)
;
newTab
-
>
SwapFrameScriptsFrom
(
cwi
.
frameScripts
(
)
)
;
newTab
-
>
MaybeShowFrame
(
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
newTab
-
>
GetWidget
(
)
;
if
(
widget
)
{
cwi
.
dimensions
(
)
=
newTab
-
>
GetDimensionInfo
(
)
;
}
cwi
.
maxTouchPoints
(
)
=
newTab
-
>
GetMaxTouchPoints
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateWindowInDifferentProcess
(
PBrowserParent
*
aThisTab
const
MaybeDiscarded
<
BrowsingContext
>
&
aParent
const
uint32_t
&
aChromeFlags
const
bool
&
aCalledFromJS
const
bool
&
aIsTopLevelCreatedByWebContent
nsIURI
*
aURIToLoad
const
nsACString
&
aFeatures
const
UserActivation
:
:
Modifiers
&
aModifiers
const
nsAString
&
aName
nsIPrincipal
*
aTriggeringPrincipal
nsIPolicyContainer
*
aPolicyContainer
nsIReferrerInfo
*
aReferrerInfo
const
OriginAttributes
&
aOriginAttributes
bool
aUserActivation
bool
aTextDirectiveUserActivation
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
nsContentUtils
:
:
IsSpecialName
(
aName
)
)
;
RefPtr
<
BrowsingContext
>
parent
=
aParent
.
GetMaybeDiscarded
(
)
;
if
(
NS_WARN_IF
(
!
parent
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIRemoteTab
>
newRemoteTab
;
bool
windowIsNew
;
int32_t
openLocation
=
nsIBrowserDOMWindow
:
:
OPEN_NEWWINDOW
;
if
(
aURIToLoad
&
&
aURIToLoad
-
>
SchemeIs
(
"
file
"
)
&
&
GetRemoteType
(
)
!
=
FILE_REMOTE_TYPE
&
&
Preferences
:
:
GetBool
(
"
browser
.
tabs
.
remote
.
enforceRemoteTypeRestrictions
"
false
)
)
{
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
#
ifdef
DEBUG
nsAutoCString
uriToLoadStr
;
nsAutoCString
triggeringUriStr
;
aURIToLoad
-
>
GetAsciiSpec
(
uriToLoadStr
)
;
aTriggeringPrincipal
-
>
GetAsciiSpec
(
triggeringUriStr
)
;
NS_WARNING
(
nsPrintfCString
(
"
RecvCreateWindowInDifferentProcess
blocked
loading
file
"
"
scheme
from
non
-
file
remotetype
:
%
s
tried
to
load
%
s
"
triggeringUriStr
.
get
(
)
uriToLoadStr
.
get
(
)
)
.
get
(
)
)
;
#
endif
MOZ_CRASH
(
"
RecvCreateWindowInDifferentProcess
blocked
loading
improper
scheme
"
)
;
#
endif
return
IPC_OK
(
)
;
}
nsresult
rv
;
mozilla
:
:
ipc
:
:
IPCResult
ipcResult
=
CommonCreateWindow
(
aThisTab
*
parent
false
aChromeFlags
aCalledFromJS
false
false
aIsTopLevelCreatedByWebContent
aURIToLoad
aFeatures
aModifiers
nullptr
aName
rv
newRemoteTab
&
windowIsNew
openLocation
aTriggeringPrincipal
aReferrerInfo
true
aPolicyContainer
aOriginAttributes
aUserActivation
aTextDirectiveUserActivation
)
;
if
(
!
ipcResult
)
{
return
ipcResult
;
}
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Call
to
CommonCreateWindow
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvShutdownProfile
(
const
nsACString
&
aProfile
)
{
profiler_received_exit_profile
(
aProfile
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvShutdownPerfStats
(
const
nsACString
&
aPerfStats
)
{
PerfStats
:
:
StorePerfStats
(
this
aPerfStats
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetFontListShmBlock
(
const
uint32_t
&
aGeneration
const
uint32_t
&
aIndex
ReadOnlySharedMemoryHandle
*
aOut
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
fontList
-
>
ShareFontListShmBlockToProcess
(
aGeneration
aIndex
Pid
(
)
aOut
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInitializeFamily
(
const
uint32_t
&
aGeneration
const
uint32_t
&
aFamilyIndex
const
bool
&
aLoadCmaps
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
fontList
-
>
InitializeFamily
(
aGeneration
aFamilyIndex
aLoadCmaps
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetCharacterMap
(
const
uint32_t
&
aGeneration
const
uint32_t
&
aFamilyIndex
const
bool
&
aAlias
const
uint32_t
&
aFaceIndex
const
gfxSparseBitSet
&
aMap
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
fontList
-
>
SetCharacterMap
(
aGeneration
aFamilyIndex
aAlias
aFaceIndex
aMap
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInitOtherFamilyNames
(
const
uint32_t
&
aGeneration
const
bool
&
aDefer
bool
*
aLoaded
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
*
aLoaded
=
fontList
-
>
InitOtherFamilyNames
(
aGeneration
aDefer
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetupFamilyCharMap
(
const
uint32_t
&
aGeneration
const
uint32_t
&
aIndex
const
bool
&
aAlias
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
fontList
-
>
SetupFamilyCharMap
(
aGeneration
aIndex
aAlias
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvStartCmapLoading
(
const
uint32_t
&
aGeneration
const
uint32_t
&
aStartIndex
)
{
auto
*
fontList
=
gfxPlatformFontList
:
:
PlatformFontList
(
)
;
MOZ_RELEASE_ASSERT
(
fontList
"
gfxPlatformFontList
not
initialized
?
"
)
;
fontList
-
>
StartCmapLoading
(
aGeneration
aStartIndex
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetHyphDict
(
nsIURI
*
aURI
ReadOnlySharedMemoryHandle
*
aOutHandle
)
{
if
(
!
aURI
)
{
return
IPC_FAIL
(
this
"
aURI
must
not
be
null
.
"
)
;
}
nsHyphenationManager
:
:
Instance
(
)
-
>
ShareHyphDictToProcess
(
aURI
Pid
(
)
aOutHandle
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGraphicsError
(
const
nsACString
&
aError
)
{
if
(
gfx
:
:
LogForwarder
*
lf
=
gfx
:
:
Factory
:
:
GetLogForwarder
(
)
)
{
std
:
:
stringstream
message
;
message
<
<
"
CP
+
"
<
<
aError
;
lf
-
>
UpdateStringsVector
(
message
.
str
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvBeginDriverCrashGuard
(
const
uint32_t
&
aGuardType
bool
*
aOutCrashed
)
{
MOZ_ASSERT
(
!
mDriverCrashGuard
)
;
UniquePtr
<
gfx
:
:
DriverCrashGuard
>
guard
;
switch
(
gfx
:
:
CrashGuardType
(
aGuardType
)
)
{
case
gfx
:
:
CrashGuardType
:
:
D3D11Layers
:
guard
=
MakeUnique
<
gfx
:
:
D3D11LayersCrashGuard
>
(
this
)
;
break
;
case
gfx
:
:
CrashGuardType
:
:
GLContext
:
guard
=
MakeUnique
<
gfx
:
:
GLContextCrashGuard
>
(
this
)
;
break
;
case
gfx
:
:
CrashGuardType
:
:
WMFVPXVideo
:
guard
=
MakeUnique
<
gfx
:
:
WMFVPXVideoCrashGuard
>
(
this
)
;
break
;
default
:
return
IPC_FAIL
(
this
"
unknown
crash
guard
type
"
)
;
}
if
(
guard
-
>
Crashed
(
)
)
{
*
aOutCrashed
=
true
;
return
IPC_OK
(
)
;
}
*
aOutCrashed
=
false
;
mDriverCrashGuard
=
std
:
:
move
(
guard
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvEndDriverCrashGuard
(
const
uint32_t
&
aGuardType
)
{
mDriverCrashGuard
=
nullptr
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyPushObservers
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
const
nsAString
&
aMessageId
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
PushMessageDispatcher
dispatcher
(
aScope
aPrincipal
aMessageId
Nothing
(
)
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyPushObserversWithData
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
const
nsAString
&
aMessageId
nsTArray
<
uint8_t
>
&
&
aData
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
PushMessageDispatcher
dispatcher
(
aScope
aPrincipal
aMessageId
Some
(
std
:
:
move
(
aData
)
)
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPushError
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
const
nsAString
&
aMessage
const
uint32_t
&
aFlags
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
PushErrorDispatcher
dispatcher
(
aScope
aPrincipal
aMessage
aFlags
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObserversAndWorkers
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyPushSubscriptionModifiedObservers
(
const
nsACString
&
aScope
nsIPrincipal
*
aPrincipal
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
PushSubscriptionModifiedDispatcher
dispatcher
(
aScope
aPrincipal
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
dispatcher
.
NotifyObservers
(
)
)
)
;
return
IPC_OK
(
)
;
}
void
ContentParent
:
:
BroadcastBlobURLRegistration
(
const
nsACString
&
aURI
BlobImpl
*
aBlobImpl
nsIPrincipal
*
aPrincipal
const
nsCString
&
aPartitionKey
ContentParent
*
aIgnoreThisCP
)
{
uint64_t
originHash
=
ComputeLoadedOriginHash
(
aPrincipal
)
;
bool
toBeSent
=
BlobURLProtocolHandler
:
:
IsBlobURLBroadcastPrincipal
(
aPrincipal
)
;
nsCString
uri
(
aURI
)
;
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
if
(
cp
!
=
aIgnoreThisCP
)
{
if
(
!
toBeSent
&
&
!
cp
-
>
mLoadedOriginHashes
.
Contains
(
originHash
)
)
{
continue
;
}
nsresult
rv
=
cp
-
>
TransmitPermissionsForPrincipal
(
aPrincipal
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
break
;
}
IPCBlob
ipcBlob
;
rv
=
IPCBlobUtils
:
:
Serialize
(
aBlobImpl
ipcBlob
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
break
;
}
Unused
<
<
cp
-
>
SendBlobURLRegistration
(
uri
ipcBlob
aPrincipal
aPartitionKey
)
;
}
}
}
void
ContentParent
:
:
BroadcastBlobURLUnregistration
(
const
nsTArray
<
BroadcastBlobURLUnregistrationRequest
>
&
aRequests
ContentParent
*
aIgnoreThisCP
)
{
struct
DataRequest
{
const
BroadcastBlobURLUnregistrationRequest
&
mRequest
;
uint64_t
mOriginHash
;
bool
mToBeSent
;
}
;
nsTArray
<
DataRequest
>
dataRequests
(
aRequests
.
Length
(
)
)
;
for
(
const
BroadcastBlobURLUnregistrationRequest
&
request
:
aRequests
)
{
uint64_t
originHash
=
ComputeLoadedOriginHash
(
request
.
principal
(
)
)
;
bool
toBeSent
=
BlobURLProtocolHandler
:
:
IsBlobURLBroadcastPrincipal
(
request
.
principal
(
)
)
;
dataRequests
.
AppendElement
(
DataRequest
{
request
originHash
toBeSent
}
)
;
}
for
(
auto
*
cp
:
AllProcesses
(
eLive
)
)
{
if
(
cp
=
=
aIgnoreThisCP
)
{
continue
;
}
nsTArray
<
nsCString
>
urls
;
for
(
const
DataRequest
&
data
:
dataRequests
)
{
if
(
data
.
mToBeSent
|
|
cp
-
>
mLoadedOriginHashes
.
Contains
(
data
.
mOriginHash
)
)
{
urls
.
AppendElement
(
data
.
mRequest
.
url
(
)
)
;
}
}
if
(
!
urls
.
IsEmpty
(
)
)
{
Unused
<
<
cp
-
>
SendBlobURLUnregistration
(
urls
)
;
}
}
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvStoreAndBroadcastBlobURLRegistration
(
const
nsACString
&
aURI
const
IPCBlob
&
aBlob
nsIPrincipal
*
aPrincipal
const
nsCString
&
aPartitionKey
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
{
ValidatePrincipalOptions
:
:
AllowSystem
}
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
RefPtr
<
BlobImpl
>
blobImpl
=
IPCBlobUtils
:
:
Deserialize
(
aBlob
)
;
if
(
NS_WARN_IF
(
!
blobImpl
)
)
{
return
IPC_FAIL
(
this
"
Blob
deserialization
failed
.
"
)
;
}
BlobURLProtocolHandler
:
:
AddDataEntry
(
aURI
aPrincipal
aPartitionKey
blobImpl
Some
(
ChildID
(
)
)
)
;
BroadcastBlobURLRegistration
(
aURI
blobImpl
aPrincipal
aPartitionKey
this
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvUnstoreAndBroadcastBlobURLUnregistration
(
const
nsTArray
<
BroadcastBlobURLUnregistrationRequest
>
&
aRequests
)
{
nsTArray
<
nsCString
>
uris
;
for
(
const
BroadcastBlobURLUnregistrationRequest
&
request
:
aRequests
)
{
if
(
!
ValidatePrincipal
(
request
.
principal
(
)
{
ValidatePrincipalOptions
:
:
AllowSystem
}
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
request
.
principal
(
)
__func__
)
;
}
uris
.
AppendElement
(
request
.
url
(
)
)
;
}
BroadcastBlobURLUnregistration
(
aRequests
this
)
;
BlobURLProtocolHandler
:
:
RemoveDataEntries
(
uris
false
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetFilesRequest
(
const
nsID
&
aID
nsTArray
<
nsString
>
&
&
aDirectoryPaths
const
bool
&
aRecursiveFlag
)
{
MOZ_ASSERT
(
!
mGetFilesPendingRequests
.
GetWeak
(
aID
)
)
;
if
(
!
mozilla
:
:
Preferences
:
:
GetBool
(
"
dom
.
filesystem
.
pathcheck
.
disabled
"
false
)
)
{
RefPtr
<
FileSystemSecurity
>
fss
=
FileSystemSecurity
:
:
Get
(
)
;
if
(
!
fss
)
{
return
IPC_FAIL
(
this
"
Failed
to
get
FileSystemSecurity
.
"
)
;
}
for
(
const
auto
&
directoryPath
:
aDirectoryPaths
)
{
if
(
!
fss
-
>
ContentProcessHasAccessTo
(
ChildID
(
)
directoryPath
)
)
{
return
IPC_FAIL
(
this
"
ContentProcessHasAccessTo
failed
.
"
)
;
}
}
}
ErrorResult
rv
;
RefPtr
<
GetFilesHelper
>
helper
=
GetFilesHelperParent
:
:
Create
(
aID
std
:
:
move
(
aDirectoryPaths
)
aRecursiveFlag
this
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
if
(
!
SendGetFilesResponse
(
aID
GetFilesResponseFailure
(
rv
.
StealNSResult
(
)
)
)
)
{
return
IPC_FAIL
(
this
"
SendGetFilesResponse
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
mGetFilesPendingRequests
.
InsertOrUpdate
(
aID
std
:
:
move
(
helper
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvDeleteGetFilesRequest
(
const
nsID
&
aID
)
{
mGetFilesPendingRequests
.
Remove
(
aID
)
;
return
IPC_OK
(
)
;
}
void
ContentParent
:
:
SendGetFilesResponseAndForget
(
const
nsID
&
aID
const
GetFilesResponseResult
&
aResult
)
{
if
(
mGetFilesPendingRequests
.
Remove
(
aID
)
)
{
Unused
<
<
SendGetFilesResponse
(
aID
aResult
)
;
}
}
void
ContentParent
:
:
PaintTabWhileInterruptingJS
(
BrowserParent
*
aBrowserParent
)
{
if
(
!
mHangMonitorActor
)
{
return
;
}
ProcessHangMonitor
:
:
PaintWhileInterruptingJS
(
mHangMonitorActor
aBrowserParent
)
;
}
void
ContentParent
:
:
UnloadLayersWhileInterruptingJS
(
BrowserParent
*
aBrowserParent
)
{
if
(
!
mHangMonitorActor
)
{
return
;
}
ProcessHangMonitor
:
:
UnloadLayersWhileInterruptingJS
(
mHangMonitorActor
aBrowserParent
)
;
}
void
ContentParent
:
:
CancelContentJSExecutionIfRunning
(
BrowserParent
*
aBrowserParent
nsIRemoteTab
:
:
NavigationType
aNavigationType
const
CancelContentJSOptions
&
aCancelContentJSOptions
)
{
if
(
!
mHangMonitorActor
)
{
return
;
}
ProcessHangMonitor
:
:
CancelContentJSExecutionIfRunning
(
mHangMonitorActor
aBrowserParent
aNavigationType
aCancelContentJSOptions
)
;
}
void
ContentParent
:
:
SetMainThreadQoSPriority
(
nsIThread
:
:
QoSPriority
aQoSPriority
)
{
if
(
!
mHangMonitorActor
)
{
return
;
}
ProcessHangMonitor
:
:
SetMainThreadQoSPriority
(
mHangMonitorActor
aQoSPriority
)
;
}
void
ContentParent
:
:
UpdateCookieStatus
(
nsIChannel
*
aChannel
)
{
PNeckoParent
*
neckoParent
=
LoneManagedOrNullAsserts
(
ManagedPNeckoParent
(
)
)
;
PCookieServiceParent
*
csParent
=
LoneManagedOrNullAsserts
(
neckoParent
-
>
ManagedPCookieServiceParent
(
)
)
;
if
(
csParent
)
{
auto
*
cs
=
static_cast
<
CookieServiceParent
*
>
(
csParent
)
;
cs
-
>
TrackCookieLoad
(
aChannel
)
;
}
}
nsresult
ContentParent
:
:
AboutToLoadHttpDocumentForChild
(
nsIChannel
*
aChannel
bool
*
aShouldWaitForPermissionCookieUpdate
)
{
MOZ_ASSERT
(
aChannel
)
;
if
(
aShouldWaitForPermissionCookieUpdate
)
{
*
aShouldWaitForPermissionCookieUpdate
=
false
;
}
nsresult
rv
;
bool
isDocument
=
aChannel
-
>
IsDocument
(
)
;
if
(
!
isDocument
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
httpChannel
)
{
rv
=
httpChannel
-
>
GetIsMainDocumentChannel
(
&
isDocument
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
}
if
(
!
isDocument
)
{
return
NS_OK
;
}
nsIScriptSecurityManager
*
ssm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
if
(
NS_WARN_IF
(
!
ssm
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsCOMPtr
<
nsIPrincipal
>
partitionedPrincipal
;
rv
=
ssm
-
>
GetChannelResultPrincipals
(
aChannel
getter_AddRefs
(
principal
)
getter_AddRefs
(
partitionedPrincipal
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
aShouldWaitForPermissionCookieUpdate
)
{
*
aShouldWaitForPermissionCookieUpdate
=
true
;
}
TransmitBlobURLsForPrincipal
(
principal
)
;
rv
=
TransmitPermissionsForPrincipal
(
principal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
TransmitPermissionsForPrincipal
(
partitionedPrincipal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsLoadFlags
newLoadFlags
;
aChannel
-
>
GetLoadFlags
(
&
newLoadFlags
)
;
if
(
newLoadFlags
&
nsIRequest
:
:
LOAD_DOCUMENT_NEEDS_COOKIE
)
{
UpdateCookieStatus
(
aChannel
)
;
}
RefPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
RefPtr
<
BrowsingContext
>
browsingContext
;
rv
=
loadInfo
-
>
GetTargetBrowsingContext
(
getter_AddRefs
(
browsingContext
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
NextGenLocalStorageEnabled
(
)
)
{
return
NS_OK
;
}
if
(
principal
-
>
GetIsContentPrincipal
(
)
)
{
nsCOMPtr
<
nsILocalStorageManager
>
lsm
=
do_GetService
(
"
mozilla
.
org
/
dom
/
localStorage
-
manager
;
1
"
)
;
if
(
NS_WARN_IF
(
!
lsm
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIPrincipal
>
storagePrincipal
;
rv
=
ssm
-
>
GetChannelResultStoragePrincipal
(
aChannel
getter_AddRefs
(
storagePrincipal
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Promise
>
dummy
;
rv
=
lsm
-
>
Preload
(
storagePrincipal
nullptr
getter_AddRefs
(
dummy
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
preload
local
storage
!
"
)
;
}
}
return
NS_OK
;
}
nsresult
ContentParent
:
:
TransmitPermissionsForPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
nsTArray
<
std
:
:
pair
<
nsCString
nsCString
>
>
pairs
=
PermissionManager
:
:
GetAllKeysForPrincipal
(
aPrincipal
)
;
MOZ_ASSERT
(
pairs
.
Length
(
)
>
=
1
)
;
for
(
auto
&
pair
:
pairs
)
{
EnsurePermissionsByKey
(
pair
.
first
pair
.
second
)
;
}
nsAutoCString
siteKey
;
nsresult
rv
=
PermissionManager
:
:
GetKeyForPrincipal
(
aPrincipal
false
true
siteKey
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
siteKey
.
IsEmpty
(
)
)
{
mActiveSecondaryPermissionKeys
.
EnsureInserted
(
siteKey
)
;
}
return
NS_OK
;
}
void
ContentParent
:
:
AddPrincipalToCookieInProcessCache
(
nsIPrincipal
*
aPrincipal
)
{
MOZ_ASSERT
(
aPrincipal
)
;
mCookieInContentListCache
.
AppendElement
(
aPrincipal
)
;
}
void
ContentParent
:
:
TakeCookieInProcessCache
(
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aList
)
{
aList
.
SwapElements
(
mCookieInContentListCache
)
;
}
void
ContentParent
:
:
TransmitBlobURLsForPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
if
(
BlobURLProtocolHandler
:
:
IsBlobURLBroadcastPrincipal
(
aPrincipal
)
)
{
return
;
}
if
(
nsCOMPtr
<
nsIExpandedPrincipal
>
ep
=
do_QueryInterface
(
aPrincipal
)
)
{
for
(
const
auto
&
prin
:
ep
-
>
AllowList
(
)
)
{
TransmitBlobURLsForPrincipal
(
prin
)
;
}
return
;
}
uint64_t
originHash
=
ComputeLoadedOriginHash
(
aPrincipal
)
;
if
(
!
mLoadedOriginHashes
.
Contains
(
originHash
)
)
{
mLoadedOriginHashes
.
AppendElement
(
originHash
)
;
nsTArray
<
BlobURLRegistrationData
>
registrations
;
BlobURLProtocolHandler
:
:
ForEachBlobURL
(
[
&
]
(
BlobImpl
*
aBlobImpl
nsIPrincipal
*
aBlobPrincipal
const
nsCString
&
aPartitionKey
const
nsACString
&
aURI
bool
aRevoked
)
{
if
(
originHash
!
=
ComputeLoadedOriginHash
(
aBlobPrincipal
)
)
{
return
true
;
}
IPCBlob
ipcBlob
;
nsresult
rv
=
IPCBlobUtils
:
:
Serialize
(
aBlobImpl
ipcBlob
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
registrations
.
AppendElement
(
BlobURLRegistrationData
(
nsCString
(
aURI
)
ipcBlob
WrapNotNull
(
aPrincipal
)
nsCString
(
aPartitionKey
)
aRevoked
)
)
;
rv
=
TransmitPermissionsForPrincipal
(
aBlobPrincipal
)
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
return
true
;
}
)
;
if
(
!
registrations
.
IsEmpty
(
)
)
{
Unused
<
<
SendInitBlobURLs
(
registrations
)
;
}
}
}
void
ContentParent
:
:
TransmitBlobDataIfBlobURL
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
aURI
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
if
(
BlobURLProtocolHandler
:
:
GetBlobURLPrincipal
(
aURI
getter_AddRefs
(
principal
)
)
)
{
TransmitBlobURLsForPrincipal
(
principal
)
;
}
}
void
ContentParent
:
:
EnsurePermissionsByKey
(
const
nsACString
&
aKey
const
nsACString
&
aOrigin
)
{
RefPtr
<
PermissionManager
>
permManager
=
PermissionManager
:
:
GetInstance
(
)
;
if
(
!
permManager
)
{
return
;
}
if
(
!
mActivePermissionKeys
.
EnsureInserted
(
aKey
)
)
{
return
;
}
nsTArray
<
IPC
:
:
Permission
>
perms
;
if
(
permManager
-
>
GetPermissionsFromOriginOrKey
(
aOrigin
aKey
perms
)
)
{
Unused
<
<
SendSetPermissionsWithKey
(
aKey
perms
)
;
}
}
bool
ContentParent
:
:
NeedsPermissionsUpdate
(
const
nsACString
&
aPermissionKey
)
const
{
return
mActivePermissionKeys
.
Contains
(
aPermissionKey
)
;
}
bool
ContentParent
:
:
NeedsSecondaryKeyPermissionsUpdate
(
const
nsACString
&
aPermissionKey
)
const
{
return
mActiveSecondaryPermissionKeys
.
Contains
(
aPermissionKey
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAccumulateChildHistograms
(
nsTArray
<
HistogramAccumulation
>
&
&
aAccumulations
)
{
TelemetryIPC
:
:
AccumulateChildHistograms
(
GetTelemetryProcessID
(
mRemoteType
)
aAccumulations
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAccumulateChildKeyedHistograms
(
nsTArray
<
KeyedHistogramAccumulation
>
&
&
aAccumulations
)
{
TelemetryIPC
:
:
AccumulateChildKeyedHistograms
(
GetTelemetryProcessID
(
mRemoteType
)
aAccumulations
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvUpdateChildScalars
(
nsTArray
<
ScalarAction
>
&
&
aScalarActions
)
{
TelemetryIPC
:
:
UpdateChildScalars
(
GetTelemetryProcessID
(
mRemoteType
)
aScalarActions
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvUpdateChildKeyedScalars
(
nsTArray
<
KeyedScalarAction
>
&
&
aScalarActions
)
{
TelemetryIPC
:
:
UpdateChildKeyedScalars
(
GetTelemetryProcessID
(
mRemoteType
)
aScalarActions
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRecordChildEvents
(
nsTArray
<
mozilla
:
:
Telemetry
:
:
ChildEventData
>
&
&
aEvents
)
{
TelemetryIPC
:
:
RecordChildEvents
(
GetTelemetryProcessID
(
mRemoteType
)
aEvents
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRecordDiscardedData
(
const
mozilla
:
:
Telemetry
:
:
DiscardedData
&
aDiscardedData
)
{
TelemetryIPC
:
:
RecordDiscardedData
(
GetTelemetryProcessID
(
mRemoteType
)
aDiscardedData
)
;
return
IPC_OK
(
)
;
}
static
bool
WebdriverRunning
(
)
{
#
ifdef
ENABLE_WEBDRIVER
nsCOMPtr
<
nsIMarionette
>
marionette
=
do_GetService
(
NS_MARIONETTE_CONTRACTID
)
;
if
(
marionette
)
{
bool
marionetteRunning
=
false
;
marionette
-
>
GetRunning
(
&
marionetteRunning
)
;
if
(
marionetteRunning
)
{
return
true
;
}
}
nsCOMPtr
<
nsIRemoteAgent
>
agent
=
do_GetService
(
NS_REMOTEAGENT_CONTRACTID
)
;
if
(
agent
)
{
bool
remoteAgentRunning
=
false
;
agent
-
>
GetRunning
(
&
remoteAgentRunning
)
;
if
(
remoteAgentRunning
)
{
return
true
;
}
}
#
endif
return
false
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRecordPageLoadEvent
(
mozilla
:
:
performance
:
:
pageload_event
:
:
PageloadEventData
&
&
aPageloadEventData
)
{
aPageloadEventData
.
set_usingWebdriver
(
WebdriverRunning
(
)
)
;
#
if
defined
(
ANDROID
)
aPageloadEventData
.
set_networkType
(
UpdateNetworkLinkType
(
)
)
;
#
endif
#
if
defined
(
XP_WIN
)
nsresult
rv
;
nsCOMPtr
<
nsIPropertyBag2
>
infoService
=
mozilla
:
:
components
:
:
SystemInfo
:
:
Service
(
)
;
bool
hasSSD
;
rv
=
infoService
-
>
GetPropertyAsBool
(
u
"
hasSSD
"
_ns
&
hasSSD
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aPageloadEventData
.
set_hasSsd
(
hasSSD
)
;
}
#
endif
if
(
aPageloadEventData
.
HasDomain
(
)
)
{
mozilla
:
:
glean
:
:
perf
:
:
PageLoadDomainExtra
extra
=
aPageloadEventData
.
ToPageLoadDomainExtra
(
)
;
mozilla
:
:
glean
:
:
perf
:
:
page_load_domain
.
Record
(
mozilla
:
:
Some
(
extra
)
)
;
NS_SUCCEEDED
(
NS_DispatchToMainThreadQueue
(
NS_NewRunnableFunction
(
"
PageloadBaseDomainPingIdleTask
"
[
]
{
mozilla
:
:
glean_pings
:
:
PageloadBaseDomain
.
Submit
(
"
pageload
"
_ns
)
;
}
)
EventQueuePriority
:
:
Idle
)
)
;
}
else
{
mozilla
:
:
glean
:
:
perf
:
:
PageLoadExtra
extra
=
aPageloadEventData
.
ToPageLoadExtra
(
)
;
mozilla
:
:
glean
:
:
perf
:
:
page_load
.
Record
(
mozilla
:
:
Some
(
extra
)
)
;
if
(
+
+
sPageLoadEventCounter
>
=
10
)
{
NS_SUCCEEDED
(
NS_DispatchToMainThreadQueue
(
NS_NewRunnableFunction
(
"
PageLoadPingIdleTask
"
[
]
{
mozilla
:
:
glean_pings
:
:
Pageload
.
Submit
(
"
threshold
"
_ns
)
;
}
)
EventQueuePriority
:
:
Idle
)
)
;
sPageLoadEventCounter
=
0
;
}
}
return
IPC_OK
(
)
;
}
PURLClassifierParent
*
ContentParent
:
:
AllocPURLClassifierParent
(
nsIPrincipal
*
aPrincipal
bool
*
aSuccess
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
*
aSuccess
=
true
;
RefPtr
<
URLClassifierParent
>
actor
=
new
URLClassifierParent
(
)
;
return
actor
.
forget
(
)
.
take
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPURLClassifierConstructor
(
PURLClassifierParent
*
aActor
nsIPrincipal
*
aPrincipal
bool
*
aSuccess
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
*
aSuccess
=
false
;
auto
*
actor
=
static_cast
<
URLClassifierParent
*
>
(
aActor
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
(
aPrincipal
)
;
if
(
!
principal
)
{
actor
-
>
ClassificationFailed
(
)
;
return
IPC_OK
(
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
return
actor
-
>
StartClassify
(
principal
aSuccess
)
;
}
bool
ContentParent
:
:
DeallocPURLClassifierParent
(
PURLClassifierParent
*
aActor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
RefPtr
<
URLClassifierParent
>
actor
=
dont_AddRef
(
static_cast
<
URLClassifierParent
*
>
(
aActor
)
)
;
return
true
;
}
PURLClassifierLocalParent
*
ContentParent
:
:
AllocPURLClassifierLocalParent
(
nsIURI
*
aURI
const
nsTArray
<
IPCURLClassifierFeature
>
&
aFeatures
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
URLClassifierLocalParent
>
actor
=
new
URLClassifierLocalParent
(
)
;
return
actor
.
forget
(
)
.
take
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPURLClassifierLocalConstructor
(
PURLClassifierLocalParent
*
aActor
nsIURI
*
aURI
nsTArray
<
IPCURLClassifierFeature
>
&
&
aFeatures
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
nsTArray
<
IPCURLClassifierFeature
>
features
=
std
:
:
move
(
aFeatures
)
;
if
(
!
aURI
)
{
return
IPC_FAIL
(
this
"
aURI
should
not
be
null
"
)
;
}
auto
*
actor
=
static_cast
<
URLClassifierLocalParent
*
>
(
aActor
)
;
return
actor
-
>
StartClassify
(
aURI
features
)
;
}
bool
ContentParent
:
:
DeallocPURLClassifierLocalParent
(
PURLClassifierLocalParent
*
aActor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
RefPtr
<
URLClassifierLocalParent
>
actor
=
dont_AddRef
(
static_cast
<
URLClassifierLocalParent
*
>
(
aActor
)
)
;
return
true
;
}
PURLClassifierLocalByNameParent
*
ContentParent
:
:
AllocPURLClassifierLocalByNameParent
(
nsIURI
*
aURI
const
nsTArray
<
nsCString
>
&
aFeatures
const
nsIUrlClassifierFeature
:
:
listType
&
aListType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
URLClassifierLocalByNameParent
>
actor
=
new
URLClassifierLocalByNameParent
(
)
;
return
actor
.
forget
(
)
.
take
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPURLClassifierLocalByNameConstructor
(
PURLClassifierLocalByNameParent
*
aActor
nsIURI
*
aURI
nsTArray
<
nsCString
>
&
&
aFeatureNames
const
nsIUrlClassifierFeature
:
:
listType
&
aListType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
!
aURI
)
{
return
IPC_FAIL
(
this
"
aURI
should
not
be
null
"
)
;
}
nsTArray
<
IPCURLClassifierFeature
>
ipcFeatures
;
for
(
nsCString
&
featureName
:
aFeatureNames
)
{
RefPtr
<
nsIUrlClassifierFeature
>
feature
=
UrlClassifierFeatureFactory
:
:
GetFeatureByName
(
featureName
)
;
nsAutoCString
name
;
nsresult
rv
=
feature
-
>
GetName
(
name
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
continue
;
}
nsTArray
<
nsCString
>
tables
;
rv
=
feature
-
>
GetTables
(
aListType
tables
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
continue
;
}
ipcFeatures
.
AppendElement
(
IPCURLClassifierFeature
(
name
tables
)
)
;
}
auto
*
actor
=
static_cast
<
URLClassifierLocalByNameParent
*
>
(
aActor
)
;
return
actor
-
>
StartClassify
(
aURI
ipcFeatures
aListType
)
;
}
bool
ContentParent
:
:
DeallocPURLClassifierLocalByNameParent
(
PURLClassifierLocalByNameParent
*
aActor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
RefPtr
<
URLClassifierLocalByNameParent
>
actor
=
dont_AddRef
(
static_cast
<
URLClassifierLocalByNameParent
*
>
(
aActor
)
)
;
return
true
;
}
PSessionStorageObserverParent
*
ContentParent
:
:
AllocPSessionStorageObserverParent
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mozilla
:
:
dom
:
:
AllocPSessionStorageObserverParent
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvPSessionStorageObserverConstructor
(
PSessionStorageObserverParent
*
aActor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
if
(
!
mozilla
:
:
dom
:
:
RecvPSessionStorageObserverConstructor
(
aActor
)
)
{
return
IPC_FAIL
(
this
"
RecvPSessionStorageObserverConstructor
failed
.
"
)
;
}
return
IPC_OK
(
)
;
}
bool
ContentParent
:
:
DeallocPSessionStorageObserverParent
(
PSessionStorageObserverParent
*
aActor
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aActor
)
;
return
mozilla
:
:
dom
:
:
DeallocPSessionStorageObserverParent
(
aActor
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvBHRThreadHang
(
const
HangDetails
&
aHangDetails
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
nsCOMPtr
<
nsIHangDetails
>
hangDetails
=
new
nsHangDetails
(
HangDetails
(
aHangDetails
)
PersistedToDisk
:
:
No
)
;
obs
-
>
NotifyObservers
(
hangDetails
"
bhr
-
thread
-
hang
"
nullptr
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddCertException
(
nsIX509Cert
*
aCert
const
nsACString
&
aHostName
int32_t
aPort
const
OriginAttributes
&
aOriginAttributes
bool
aIsTemporary
AddCertExceptionResolver
&
&
aResolver
)
{
nsCOMPtr
<
nsICertOverrideService
>
overrideService
=
do_GetService
(
NS_CERTOVERRIDE_CONTRACTID
)
;
if
(
!
overrideService
)
{
aResolver
(
NS_ERROR_FAILURE
)
;
return
IPC_OK
(
)
;
}
nsresult
rv
=
overrideService
-
>
RememberValidityOverride
(
aHostName
aPort
aOriginAttributes
aCert
aIsTemporary
)
;
aResolver
(
rv
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAutomaticStorageAccessPermissionCanBeGranted
(
nsIPrincipal
*
aPrincipal
AutomaticStorageAccessPermissionCanBeGrantedResolver
&
&
aResolver
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
aResolver
(
Document
:
:
AutomaticStorageAccessPermissionCanBeGranted
(
aPrincipal
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvStorageAccessPermissionGrantedForOrigin
(
uint64_t
aTopLevelWindowId
const
MaybeDiscarded
<
BrowsingContext
>
&
aParentContext
nsIPrincipal
*
aTrackingPrincipal
const
nsACString
&
aTrackingOrigin
const
int
&
aAllowMode
const
Maybe
<
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
>
&
aReason
const
bool
&
aFrameOnly
StorageAccessPermissionGrantedForOriginResolver
&
&
aResolver
)
{
if
(
aParentContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
!
aTrackingPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
aReason
)
{
ContentBlockingNotifier
:
:
ReportUnblockingToConsole
(
aParentContext
.
get_canonical
(
)
NS_ConvertUTF8toUTF16
(
aTrackingOrigin
)
aReason
.
value
(
)
)
;
}
StorageAccessAPIHelper
:
:
SaveAccessForOriginOnParentProcess
(
aTopLevelWindowId
aParentContext
.
get_canonical
(
)
aTrackingPrincipal
aAllowMode
aFrameOnly
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
=
std
:
:
move
(
aResolver
)
]
(
StorageAccessAPIHelper
:
:
ParentAccessGrantPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
bool
success
=
aValue
.
IsResolve
(
)
&
&
NS_SUCCEEDED
(
aValue
.
ResolveValue
(
)
)
;
aResolver
(
success
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCompleteAllowAccessFor
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aParentContext
uint64_t
aTopLevelWindowId
nsIPrincipal
*
aTrackingPrincipal
const
nsACString
&
aTrackingOrigin
uint32_t
aCookieBehavior
const
ContentBlockingNotifier
:
:
StorageAccessPermissionGrantedReason
&
aReason
CompleteAllowAccessForResolver
&
&
aResolver
)
{
if
(
aParentContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
StorageAccessAPIHelper
:
:
CompleteAllowAccessForOnParentProcess
(
aParentContext
.
get_canonical
(
)
aTopLevelWindowId
aTrackingPrincipal
aTrackingOrigin
aCookieBehavior
aReason
nullptr
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
=
std
:
:
move
(
aResolver
)
]
(
StorageAccessAPIHelper
:
:
StorageAccessPermissionGrantPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
Maybe
<
StorageAccessPromptChoices
>
choice
;
if
(
aValue
.
IsResolve
(
)
)
{
choice
.
emplace
(
static_cast
<
StorageAccessPromptChoices
>
(
aValue
.
ResolveValue
(
)
)
)
;
}
aResolver
(
choice
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetAllowStorageAccessRequestFlag
(
nsIPrincipal
*
aEmbeddedPrincipal
nsIURI
*
aEmbeddingOrigin
SetAllowStorageAccessRequestFlagResolver
&
&
aResolver
)
{
MOZ_ASSERT
(
aEmbeddedPrincipal
)
;
MOZ_ASSERT
(
aEmbeddingOrigin
)
;
if
(
!
aEmbeddedPrincipal
|
|
!
aEmbeddingOrigin
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
PermissionManager
>
permManager
=
PermissionManager
:
:
GetInstance
(
)
;
if
(
!
permManager
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsIURI
>
embeddedURI
=
aEmbeddedPrincipal
-
>
GetURI
(
)
;
nsCString
permissionKey
;
bool
success
=
AntiTrackingUtils
:
:
CreateStorageRequestPermissionKey
(
embeddedURI
permissionKey
)
;
if
(
!
success
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
int64_t
when
=
(
PR_Now
(
)
/
PR_USEC_PER_MSEC
)
+
StaticPrefs
:
:
dom_storage_access_forward_declared_lifetime
(
)
*
PR_MSEC_PER_SEC
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
BasePrincipal
:
:
CreateContentPrincipal
(
aEmbeddingOrigin
aEmbeddedPrincipal
-
>
OriginAttributesRef
(
)
)
;
nsresult
rv
=
permManager
-
>
AddFromPrincipal
(
principal
permissionKey
nsIPermissionManager
:
:
ALLOW_ACTION
nsIPermissionManager
:
:
EXPIRE_TIME
when
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
aResolver
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvTestAllowStorageAccessRequestFlag
(
nsIPrincipal
*
aEmbeddingPrincipal
nsIURI
*
aEmbeddedOrigin
TestAllowStorageAccessRequestFlagResolver
&
&
aResolver
)
{
MOZ_ASSERT
(
aEmbeddingPrincipal
)
;
MOZ_ASSERT
(
aEmbeddedOrigin
)
;
RefPtr
<
PermissionManager
>
permManager
=
PermissionManager
:
:
GetInstance
(
)
;
if
(
!
permManager
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
nsCString
requestPermissionKey
;
bool
success
=
AntiTrackingUtils
:
:
CreateStorageRequestPermissionKey
(
aEmbeddedOrigin
requestPermissionKey
)
;
if
(
!
success
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
uint32_t
access
=
nsIPermissionManager
:
:
UNKNOWN_ACTION
;
nsresult
rv
=
permManager
-
>
TestPermissionFromPrincipal
(
aEmbeddingPrincipal
requestPermissionKey
&
access
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
if
(
access
!
=
nsIPermissionManager
:
:
ALLOW_ACTION
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
rv
=
permManager
-
>
RemoveFromPrincipal
(
aEmbeddingPrincipal
requestPermissionKey
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
false
)
;
return
IPC_OK
(
)
;
}
aResolver
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvStoreUserInteractionAsPermission
(
nsIPrincipal
*
aPrincipal
)
{
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
if
(
!
ValidatePrincipal
(
aPrincipal
)
)
{
LogAndAssertFailedPrincipalValidationInfo
(
aPrincipal
__func__
)
;
}
ContentBlockingUserInteraction
:
:
Observe
(
aPrincipal
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvTestCookiePermissionDecided
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
nsIPrincipal
*
aPrincipal
const
TestCookiePermissionDecidedResolver
&
&
aResolver
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
!
aPrincipal
)
{
return
IPC_FAIL
(
this
"
No
principal
"
)
;
}
RefPtr
<
WindowGlobalParent
>
wgp
=
aContext
.
get_canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
nsCOMPtr
<
nsICookieJarSettings
>
cjs
=
wgp
-
>
CookieJarSettings
(
)
;
Maybe
<
bool
>
result
=
StorageAccessAPIHelper
:
:
CheckCookiesPermittedDecidesStorageAccessAPI
(
cjs
aPrincipal
)
;
aResolver
(
result
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvTestStorageAccessPermission
(
nsIPrincipal
*
aEmbeddingPrincipal
const
nsCString
&
aEmbeddedOrigin
const
TestStorageAccessPermissionResolver
&
&
aResolver
)
{
RefPtr
<
PermissionManager
>
permManager
=
PermissionManager
:
:
GetInstance
(
)
;
if
(
!
permManager
)
{
aResolver
(
Nothing
(
)
)
;
return
IPC_OK
(
)
;
}
nsCString
requestPermissionKey
;
AntiTrackingUtils
:
:
CreateStoragePermissionKey
(
aEmbeddedOrigin
requestPermissionKey
)
;
uint32_t
access
=
nsIPermissionManager
:
:
UNKNOWN_ACTION
;
nsresult
rv
=
permManager
-
>
TestPermissionFromPrincipal
(
aEmbeddingPrincipal
requestPermissionKey
&
access
)
;
if
(
NS_FAILED
(
rv
)
)
{
aResolver
(
Nothing
(
)
)
;
return
IPC_OK
(
)
;
}
if
(
access
=
=
nsIPermissionManager
:
:
ALLOW_ACTION
)
{
aResolver
(
Some
(
true
)
)
;
}
else
if
(
access
=
=
nsIPermissionManager
:
:
DENY_ACTION
)
{
aResolver
(
Some
(
false
)
)
;
}
else
{
aResolver
(
Nothing
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaPlaybackChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
MediaPlaybackState
aState
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
NotifyMediaPlaybackChanged
(
aContext
.
ContextId
(
)
aState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaAudibleChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
MediaAudibleState
aState
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
NotifyMediaAudibleChanged
(
aContext
.
ContextId
(
)
aState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyPictureInPictureModeChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aEnabled
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
MediaController
>
controller
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
controller
-
>
SetIsInPictureInPictureMode
(
aContext
.
ContextId
(
)
aEnabled
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAbortOtherOrientationPendingPromises
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
context
-
>
Group
(
)
-
>
EachOtherParent
(
this
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendAbortOrientationPendingPromises
(
context
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaSessionUpdated
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aIsCreated
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
;
if
(
!
updater
)
{
return
IPC_OK
(
)
;
}
if
(
aIsCreated
)
{
updater
-
>
NotifySessionCreated
(
aContext
-
>
Id
(
)
)
;
}
else
{
updater
-
>
NotifySessionDestroyed
(
aContext
-
>
Id
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyUpdateMediaMetadata
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
Maybe
<
MediaMetadataBase
>
&
aMetadata
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
UpdateMetadata
(
aContext
.
ContextId
(
)
aMetadata
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaSessionPlaybackStateChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
MediaSessionPlaybackState
aPlaybackState
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
SetDeclaredPlaybackState
(
aContext
.
ContextId
(
)
aPlaybackState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaSessionSupportedActionChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
MediaSessionAction
aAction
bool
aEnabled
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
;
if
(
!
updater
)
{
return
IPC_OK
(
)
;
}
if
(
aEnabled
)
{
updater
-
>
EnableAction
(
aContext
.
ContextId
(
)
aAction
)
;
}
else
{
updater
-
>
DisableAction
(
aContext
.
ContextId
(
)
aAction
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyMediaFullScreenState
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aIsInFullScreen
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
NotifyMediaFullScreenState
(
aContext
.
ContextId
(
)
aIsInFullScreen
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyPositionStateChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
Maybe
<
PositionState
>
&
aState
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
UpdatePositionState
(
aContext
.
ContextId
(
)
aState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyGuessedPositionStateChanged
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
nsID
&
aMediaId
const
Maybe
<
PositionState
>
&
aState
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
RefPtr
<
IMediaInfoUpdater
>
updater
=
aContext
.
get_canonical
(
)
-
>
GetMediaController
(
)
)
{
updater
-
>
UpdateGuessedPositionState
(
aContext
.
ContextId
(
)
aMediaId
aState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAddOrRemovePageAwakeRequest
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
bool
&
aShouldAddCount
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
if
(
aShouldAddCount
)
{
aContext
.
get_canonical
(
)
-
>
AddPageAwakeRequest
(
)
;
}
else
{
aContext
.
get_canonical
(
)
-
>
RemovePageAwakeRequest
(
)
;
}
return
IPC_OK
(
)
;
}
#
if
defined
(
XP_WIN
)
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetModulesTrust
(
ModulePaths
&
&
aModPaths
bool
aRunAtNormalPriority
GetModulesTrustResolver
&
&
aResolver
)
{
RefPtr
<
DllServices
>
dllSvc
(
DllServices
:
:
Get
(
)
)
;
dllSvc
-
>
GetModulesTrust
(
std
:
:
move
(
aModPaths
)
aRunAtNormalPriority
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
aResolver
]
(
ModulesMapResult
&
&
aResult
)
{
aResolver
(
Some
(
ModulesMapResult
(
std
:
:
move
(
aResult
)
)
)
)
;
}
[
aResolver
]
(
nsresult
aRv
)
{
aResolver
(
Nothing
(
)
)
;
}
)
;
return
IPC_OK
(
)
;
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCreateBrowsingContext
(
uint64_t
aGroupId
BrowsingContext
:
:
IPCInitializer
&
&
aInit
)
{
RefPtr
<
WindowGlobalParent
>
parent
;
if
(
aInit
.
mParentId
!
=
0
)
{
parent
=
WindowGlobalParent
:
:
GetByInnerWindowId
(
aInit
.
mParentId
)
;
if
(
!
parent
)
{
return
IPC_FAIL
(
this
"
Parent
doesn
'
t
exist
in
parent
process
"
)
;
}
}
if
(
parent
&
&
parent
-
>
GetContentParent
(
)
!
=
this
)
{
return
IPC_FAIL
(
this
"
Must
create
BrowsingContext
from
the
parent
'
s
process
"
)
;
}
RefPtr
<
BrowsingContext
>
opener
;
if
(
aInit
.
GetOpenerId
(
)
!
=
0
)
{
opener
=
BrowsingContext
:
:
Get
(
aInit
.
GetOpenerId
(
)
)
;
if
(
!
opener
)
{
return
IPC_FAIL
(
this
"
Opener
doesn
'
t
exist
in
parent
process
"
)
;
}
}
RefPtr
<
BrowsingContext
>
child
=
BrowsingContext
:
:
Get
(
aInit
.
mId
)
;
if
(
child
)
{
return
IPC_FAIL
(
this
"
A
BrowsingContext
with
this
ID
already
exists
"
)
;
}
RefPtr
<
BrowsingContextGroup
>
group
=
BrowsingContextGroup
:
:
GetOrCreate
(
aGroupId
)
;
if
(
parent
)
{
if
(
parent
-
>
Group
(
)
-
>
Id
(
)
!
=
aGroupId
)
{
return
IPC_FAIL
(
this
"
Parent
has
different
group
ID
"
)
;
}
if
(
parent
-
>
IsDiscarded
(
)
)
{
return
IPC_FAIL
(
this
"
Parent
is
discarded
"
)
;
}
if
(
parent
-
>
Group
(
)
!
=
group
)
{
return
IPC_FAIL
(
this
"
Parent
has
different
group
object
"
)
;
}
}
if
(
opener
&
&
opener
-
>
Group
(
)
!
=
group
)
{
if
(
opener
-
>
Group
(
)
-
>
Id
(
)
!
=
aGroupId
)
{
return
IPC_FAIL
(
this
"
Opener
has
different
group
ID
"
)
;
}
return
IPC_FAIL
(
this
"
Opener
has
different
group
object
"
)
;
}
if
(
!
parent
&
&
!
opener
&
&
!
group
-
>
Toplevels
(
)
.
IsEmpty
(
)
)
{
return
IPC_FAIL
(
this
"
Unrelated
context
from
child
in
stale
group
"
)
;
}
return
BrowsingContext
:
:
CreateFromIPC
(
std
:
:
move
(
aInit
)
group
this
)
;
}
bool
ContentParent
:
:
CheckBrowsingContextEmbedder
(
CanonicalBrowsingContext
*
aBC
const
char
*
aOperation
)
const
{
if
(
!
aBC
-
>
IsEmbeddedInProcess
(
ChildID
(
)
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Warning
(
"
ParentIPC
:
Trying
to
%
s
out
of
process
context
0x
%
08
"
PRIx64
aOperation
aBC
-
>
Id
(
)
)
)
;
return
false
;
}
return
true
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvDiscardBrowsingContext
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aDoDiscard
DiscardBrowsingContextResolver
&
&
aResolve
)
{
if
(
CanonicalBrowsingContext
*
context
=
CanonicalBrowsingContext
:
:
Cast
(
aContext
.
GetMaybeDiscarded
(
)
)
)
{
if
(
aDoDiscard
&
&
!
context
-
>
IsDiscarded
(
)
)
{
if
(
!
CheckBrowsingContextEmbedder
(
context
"
discard
"
)
)
{
return
IPC_FAIL
(
this
"
Illegal
Discard
attempt
"
)
;
}
context
-
>
Detach
(
true
)
;
}
context
-
>
AddFinalDiscardListener
(
aResolve
)
;
return
IPC_OK
(
)
;
}
aResolve
(
true
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvWindowClose
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aTrustedCaller
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowClose
(
context
aTrustedCaller
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvWindowFocus
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
CallerType
aCallerType
uint64_t
aActionId
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvWindowFocus
actionid
:
%
"
PRIu64
aActionId
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowFocus
(
context
aCallerType
aActionId
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvWindowBlur
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
CallerType
aCallerType
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendWindowBlur
(
context
aCallerType
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRaiseWindow
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
CallerType
aCallerType
uint64_t
aActionId
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvRaiseWindow
actionid
:
%
"
PRIu64
aActionId
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendRaiseWindow
(
context
aCallerType
aActionId
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvAdjustWindowFocus
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aIsVisible
uint64_t
aActionId
bool
aShouldClearFocus
const
MaybeDiscarded
<
BrowsingContext
>
&
aAncestorBrowsingContextToFocus
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvAdjustWindowFocus
isVisible
%
d
actionid
:
%
"
PRIu64
aIsVisible
aActionId
)
)
;
nsTHashMap
<
nsPtrHashKey
<
ContentParent
>
bool
>
processes
(
2
)
;
processes
.
InsertOrUpdate
(
this
true
)
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
cpm
)
{
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
while
(
context
)
{
BrowsingContext
*
parent
=
context
-
>
GetParent
(
)
;
if
(
!
parent
)
{
break
;
}
CanonicalBrowsingContext
*
canonicalParent
=
parent
-
>
Canonical
(
)
;
ContentParent
*
cp
=
cpm
-
>
GetContentProcessById
(
ContentParentId
(
canonicalParent
-
>
OwnerProcessId
(
)
)
)
;
if
(
cp
&
&
!
processes
.
Get
(
cp
)
)
{
Unused
<
<
cp
-
>
SendAdjustWindowFocus
(
context
aIsVisible
aActionId
aShouldClearFocus
aAncestorBrowsingContextToFocus
)
;
processes
.
InsertOrUpdate
(
cp
true
)
;
}
context
=
canonicalParent
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvClearFocus
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendClearFocus
(
context
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetFocusedBrowsingContext
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
uint64_t
aActionId
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvSetFocusedBrowsingContext
actionid
:
%
"
PRIu64
aActionId
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
IPC_OK
(
)
;
}
if
(
!
fm
-
>
SetFocusedBrowsingContextInChrome
(
context
aActionId
)
)
{
LOGFOCUS
(
(
"
Ignoring
out
-
of
-
sequence
attempt
[
%
p
]
to
set
focused
browsing
context
"
"
in
parent
.
"
context
)
)
;
Unused
<
<
SendReviseFocusedBrowsingContext
(
aActionId
fm
-
>
GetFocusedBrowsingContextInChrome
(
)
fm
-
>
GetActionIdForFocusedBrowsingContextInChrome
(
)
)
;
return
IPC_OK
(
)
;
}
BrowserParent
:
:
UpdateFocusFromBrowsingContext
(
)
;
context
-
>
Group
(
)
-
>
EachOtherParent
(
this
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendSetFocusedBrowsingContext
(
context
aActionId
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetActiveBrowsingContext
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
uint64_t
aActionId
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvSetActiveBrowsingContext
actionid
:
%
"
PRIu64
aActionId
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
IPC_OK
(
)
;
}
if
(
!
fm
-
>
SetActiveBrowsingContextInChrome
(
context
aActionId
)
)
{
LOGFOCUS
(
(
"
Ignoring
out
-
of
-
sequence
attempt
[
%
p
]
to
set
active
browsing
context
"
"
in
parent
.
"
context
)
)
;
Unused
<
<
SendReviseActiveBrowsingContext
(
aActionId
fm
-
>
GetActiveBrowsingContextInChrome
(
)
fm
-
>
GetActionIdForActiveBrowsingContextInChrome
(
)
)
;
return
IPC_OK
(
)
;
}
context
-
>
Group
(
)
-
>
EachOtherParent
(
this
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendSetActiveBrowsingContext
(
context
aActionId
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvUnsetActiveBrowsingContext
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
uint64_t
aActionId
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvUnsetActiveBrowsingContext
actionid
:
%
"
PRIu64
aActionId
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
!
fm
)
{
return
IPC_OK
(
)
;
}
if
(
!
fm
-
>
SetActiveBrowsingContextInChrome
(
nullptr
aActionId
)
)
{
LOGFOCUS
(
(
"
Ignoring
out
-
of
-
sequence
attempt
to
unset
active
browsing
context
in
"
"
parent
[
%
p
]
.
"
context
)
)
;
Unused
<
<
SendReviseActiveBrowsingContext
(
aActionId
fm
-
>
GetActiveBrowsingContextInChrome
(
)
fm
-
>
GetActionIdForActiveBrowsingContextInChrome
(
)
)
;
return
IPC_OK
(
)
;
}
context
-
>
Group
(
)
-
>
EachOtherParent
(
this
[
&
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendUnsetActiveBrowsingContext
(
context
aActionId
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetFocusedElement
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aNeedsFocus
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvSetFocusedElement
"
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendSetFocusedElement
(
context
aNeedsFocus
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvFinalizeFocusOuter
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
bool
aCanFocus
CallerType
aCallerType
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvFinalizeFocusOuter
"
)
)
;
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
ContentProcessManager
*
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
if
(
cpm
)
{
ContentParent
*
cp
=
cpm
-
>
GetContentProcessById
(
ContentParentId
(
context
-
>
EmbedderProcessId
(
)
)
)
;
if
(
cp
)
{
Unused
<
<
cp
-
>
SendFinalizeFocusOuter
(
context
aCanFocus
aCallerType
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvInsertNewFocusActionId
(
uint64_t
aActionId
)
{
LOGFOCUS
(
(
"
ContentParent
:
:
RecvInsertNewFocusActionId
actionid
:
%
"
PRIu64
aActionId
)
)
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
InsertNewFocusActionId
(
aActionId
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvBlurToParent
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aFocusedBrowsingContext
const
MaybeDiscarded
<
BrowsingContext
>
&
aBrowsingContextToClear
const
MaybeDiscarded
<
BrowsingContext
>
&
aAncestorBrowsingContextToFocus
bool
aIsLeavingDocument
bool
aAdjustWidget
bool
aBrowsingContextToClearHandled
bool
aAncestorBrowsingContextToFocusHandled
uint64_t
aActionId
)
{
if
(
aFocusedBrowsingContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
LOGFOCUS
(
(
"
ContentParent
:
:
RecvBlurToParent
isLeavingDocument
%
d
adjustWidget
%
d
"
"
browsingContextToClearHandled
%
d
ancestorBrowsingContextToFocusHandled
"
"
%
d
actionid
:
%
"
PRIu64
aIsLeavingDocument
aAdjustWidget
aBrowsingContextToClearHandled
aAncestorBrowsingContextToFocusHandled
aActionId
)
)
;
CanonicalBrowsingContext
*
focusedBrowsingContext
=
aFocusedBrowsingContext
.
get_canonical
(
)
;
bool
ancestorDifferent
=
(
!
aAncestorBrowsingContextToFocusHandled
&
&
!
aAncestorBrowsingContextToFocus
.
IsNullOrDiscarded
(
)
&
&
(
focusedBrowsingContext
-
>
OwnerProcessId
(
)
!
=
aAncestorBrowsingContextToFocus
.
get_canonical
(
)
-
>
OwnerProcessId
(
)
)
)
;
if
(
!
aBrowsingContextToClearHandled
&
&
!
aBrowsingContextToClear
.
IsNullOrDiscarded
(
)
&
&
(
focusedBrowsingContext
-
>
OwnerProcessId
(
)
!
=
aBrowsingContextToClear
.
get_canonical
(
)
-
>
OwnerProcessId
(
)
)
)
{
MOZ_RELEASE_ASSERT
(
!
ancestorDifferent
"
This
combination
is
not
supposed
to
happen
.
"
)
;
if
(
ContentParent
*
cp
=
aBrowsingContextToClear
.
get_canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendSetFocusedElement
(
aBrowsingContextToClear
false
)
;
}
}
else
if
(
ancestorDifferent
)
{
if
(
ContentParent
*
cp
=
aAncestorBrowsingContextToFocus
.
get_canonical
(
)
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendSetFocusedElement
(
aAncestorBrowsingContextToFocus
true
)
;
}
}
if
(
ContentParent
*
cp
=
focusedBrowsingContext
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendBlurToChild
(
aFocusedBrowsingContext
aBrowsingContextToClear
aAncestorBrowsingContextToFocus
aIsLeavingDocument
aAdjustWidget
aActionId
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvMaybeExitFullscreen
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
ContentParent
*
cp
=
context
-
>
GetContentParent
(
)
)
{
Unused
<
<
cp
-
>
SendMaybeExitFullscreen
(
context
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvWindowPostMessage
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
ClonedOrErrorMessageData
&
aMessage
const
PostMessageData
&
aData
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
to
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
CanonicalBrowsingContext
*
context
=
aContext
.
get_canonical
(
)
;
if
(
aData
.
source
(
)
.
IsDiscarded
(
)
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
a
message
from
dead
or
detached
context
"
)
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
ContentParent
>
cp
=
context
-
>
GetContentParent
(
)
;
if
(
!
cp
)
{
MOZ_LOG
(
BrowsingContext
:
:
GetLog
(
)
LogLevel
:
:
Debug
(
"
ParentIPC
:
Trying
to
send
PostMessage
to
dead
content
process
"
)
)
;
return
IPC_OK
(
)
;
}
ClonedOrErrorMessageData
message
;
StructuredCloneData
messageFromChild
;
if
(
aMessage
.
type
(
)
=
=
ClonedOrErrorMessageData
:
:
TClonedMessageData
)
{
UnpackClonedMessageData
(
aMessage
messageFromChild
)
;
ClonedMessageData
clonedMessageData
;
if
(
BuildClonedMessageData
(
messageFromChild
clonedMessageData
)
)
{
message
=
std
:
:
move
(
clonedMessageData
)
;
}
else
{
message
=
ErrorMessageData
(
)
;
}
}
else
{
MOZ_ASSERT
(
aMessage
.
type
(
)
=
=
ClonedOrErrorMessageData
:
:
TErrorMessageData
)
;
message
=
ErrorMessageData
(
)
;
}
Unused
<
<
cp
-
>
SendWindowPostMessage
(
context
message
aData
)
;
return
IPC_OK
(
)
;
}
void
ContentParent
:
:
AddBrowsingContextGroup
(
BrowsingContextGroup
*
aGroup
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aGroup
)
;
if
(
mGroups
.
EnsureInserted
(
aGroup
)
&
&
!
IsLaunching
(
)
)
{
aGroup
-
>
Subscribe
(
this
)
;
}
}
void
ContentParent
:
:
RemoveBrowsingContextGroup
(
BrowsingContextGroup
*
aGroup
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aGroup
)
;
if
(
mGroups
.
EnsureRemoved
(
aGroup
)
&
&
CanSend
(
)
)
{
Unused
<
<
SendDestroyBrowsingContextGroup
(
aGroup
-
>
Id
(
)
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCommitBrowsingContextTransaction
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
BrowsingContext
:
:
BaseTransaction
&
&
aTransaction
uint64_t
aEpoch
)
{
MOZ_ASSERT
(
aEpoch
=
=
mBrowsingContextFieldEpoch
+
1
"
Child
process
skipped
an
epoch
?
"
)
;
mBrowsingContextFieldEpoch
=
aEpoch
;
return
aTransaction
.
CommitFromIPC
(
aContext
this
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvBlobURLDataRequest
(
const
nsACString
&
aBlobURL
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aLoadingPrincipal
const
OriginAttributes
&
aOriginAttributes
uint64_t
aInnerWindowId
const
nsCString
&
aPartitionKey
BlobURLDataRequestResolver
&
&
aResolver
)
{
RefPtr
<
BlobImpl
>
blobImpl
;
if
(
!
BlobURLProtocolHandler
:
:
GetDataEntry
(
aBlobURL
getter_AddRefs
(
blobImpl
)
aLoadingPrincipal
aTriggeringPrincipal
aOriginAttributes
aInnerWindowId
aPartitionKey
true
)
)
{
aResolver
(
NS_ERROR_DOM_BAD_URI
)
;
return
IPC_OK
(
)
;
}
IPCBlob
ipcBlob
;
nsresult
rv
=
IPCBlobUtils
:
:
Serialize
(
blobImpl
ipcBlob
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aResolver
(
rv
)
;
return
IPC_OK
(
)
;
}
aResolver
(
ipcBlob
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvReportServiceWorkerShutdownProgress
(
uint32_t
aShutdownStateId
ServiceWorkerShutdownState
:
:
Progress
aProgress
)
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
MOZ_RELEASE_ASSERT
(
swm
"
ServiceWorkers
should
shutdown
before
SWM
.
"
)
;
swm
-
>
ReportServiceWorkerShutdownProgress
(
aShutdownStateId
aProgress
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvNotifyOnHistoryReload
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
bool
&
aForceReload
NotifyOnHistoryReloadResolver
&
&
aResolver
)
{
bool
canReload
=
false
;
Maybe
<
NotNull
<
RefPtr
<
nsDocShellLoadState
>
>
>
loadState
;
Maybe
<
bool
>
reloadActiveEntry
;
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
aContext
.
get_canonical
(
)
-
>
NotifyOnHistoryReload
(
aForceReload
canReload
loadState
reloadActiveEntry
)
;
}
aResolver
(
std
:
:
tuple
<
const
bool
&
const
Maybe
<
NotNull
<
RefPtr
<
nsDocShellLoadState
>
>
>
&
const
Maybe
<
bool
>
&
>
(
canReload
loadState
reloadActiveEntry
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvHistoryCommit
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
uint64_t
&
aLoadID
const
nsID
&
aChangeID
const
uint32_t
&
aLoadType
const
bool
&
aCloneEntryChildren
const
bool
&
aChannelExpired
const
uint32_t
&
aCacheKey
)
{
if
(
!
aContext
.
IsDiscarded
(
)
)
{
CanonicalBrowsingContext
*
canonical
=
aContext
.
get_canonical
(
)
;
if
(
!
canonical
)
{
return
IPC_FAIL
(
this
"
Could
not
get
canonical
.
aContext
.
get_canonical
(
)
fails
.
"
)
;
}
canonical
-
>
SessionHistoryCommit
(
aLoadID
aChangeID
aLoadType
aCloneEntryChildren
aChannelExpired
aCacheKey
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvHistoryGo
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
int32_t
aOffset
uint64_t
aHistoryEpoch
bool
aRequireUserInteraction
bool
aUserActivation
HistoryGoResolver
&
&
aResolveRequestedIndex
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
RefPtr
<
CanonicalBrowsingContext
>
canonical
=
aContext
.
get_canonical
(
)
;
aResolveRequestedIndex
(
canonical
-
>
HistoryGo
(
aOffset
aHistoryEpoch
aRequireUserInteraction
aUserActivation
Some
(
ChildID
(
)
)
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSynchronizeLayoutHistoryState
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
nsILayoutHistoryState
*
aState
)
{
if
(
aContext
.
IsNull
(
)
)
{
return
IPC_OK
(
)
;
}
BrowsingContext
*
bc
=
aContext
.
GetMaybeDiscarded
(
)
;
if
(
!
bc
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
bc
-
>
Canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetLayoutHistoryState
(
aState
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryTitle
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
nsAString
&
aTitle
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
aContext
.
get_canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetTitle
(
aTitle
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryScrollRestorationIsManual
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
bool
&
aIsManual
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
aContext
.
get_canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetScrollRestorationIsManual
(
aIsManual
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryScrollPosition
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
int32_t
&
aX
const
int32_t
&
aY
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
aContext
.
get_canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetScrollPosition
(
aX
aY
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryStoreWindowNameInContiguousEntries
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
nsAString
&
aName
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
aContext
.
get_canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
nsSHistory
:
:
WalkContiguousEntries
(
entry
[
&
]
(
nsISHEntry
*
aEntry
)
{
aEntry
-
>
SetName
(
aName
)
;
}
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryCacheKey
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
uint32_t
&
aCacheKey
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
aContext
.
get_canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetCacheKey
(
aCacheKey
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSessionHistoryEntryWireframe
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
Wireframe
&
aWireframe
)
{
if
(
aContext
.
IsNull
(
)
)
{
return
IPC_OK
(
)
;
}
BrowsingContext
*
bc
=
aContext
.
GetMaybeDiscarded
(
)
;
if
(
!
bc
)
{
return
IPC_OK
(
)
;
}
SessionHistoryEntry
*
entry
=
bc
-
>
Canonical
(
)
-
>
GetActiveSessionHistoryEntry
(
)
;
if
(
entry
)
{
entry
-
>
SetWireframe
(
Some
(
aWireframe
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvGetLoadingSessionHistoryInfoFromParent
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
GetLoadingSessionHistoryInfoFromParentResolver
&
&
aResolver
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
Maybe
<
LoadingSessionHistoryInfo
>
info
;
aContext
.
get_canonical
(
)
-
>
GetLoadingSessionHistoryInfoFromParent
(
info
)
;
aResolver
(
info
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRemoveFromBFCache
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
if
(
aContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsFrameLoaderOwner
>
owner
=
do_QueryInterface
(
aContext
.
get_canonical
(
)
-
>
GetEmbedderElement
(
)
)
;
if
(
!
owner
)
{
return
IPC_OK
(
)
;
}
RefPtr
<
nsFrameLoader
>
frameLoader
=
owner
-
>
GetFrameLoader
(
)
;
if
(
!
frameLoader
|
|
!
frameLoader
-
>
GetMaybePendingBrowsingContext
(
)
)
{
return
IPC_OK
(
)
;
}
nsCOMPtr
<
nsISHistory
>
shistory
=
frameLoader
-
>
GetMaybePendingBrowsingContext
(
)
-
>
Canonical
(
)
-
>
GetSessionHistory
(
)
;
if
(
!
shistory
)
{
return
IPC_OK
(
)
;
}
uint32_t
count
=
shistory
-
>
GetCount
(
)
;
for
(
uint32_t
i
=
0
;
i
<
count
;
+
+
i
)
{
nsCOMPtr
<
nsISHEntry
>
entry
;
shistory
-
>
GetEntryAtIndex
(
i
getter_AddRefs
(
entry
)
)
;
nsCOMPtr
<
SessionHistoryEntry
>
she
=
do_QueryInterface
(
entry
)
;
if
(
she
)
{
if
(
RefPtr
<
nsFrameLoader
>
frameLoader
=
she
-
>
GetFrameLoader
(
)
)
{
if
(
frameLoader
-
>
GetMaybePendingBrowsingContext
(
)
=
=
aContext
.
get
(
)
)
{
she
-
>
SetFrameLoader
(
nullptr
)
;
frameLoader
-
>
Destroy
(
)
;
break
;
}
}
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetActiveSessionHistoryEntry
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
Maybe
<
nsPoint
>
&
aPreviousScrollPos
SessionHistoryInfo
&
&
aInfo
uint32_t
aLoadType
uint32_t
aUpdatedCacheKey
const
nsID
&
aChangeID
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
aContext
.
get_canonical
(
)
-
>
SetActiveSessionHistoryEntry
(
aPreviousScrollPos
&
aInfo
aLoadType
aUpdatedCacheKey
aChangeID
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvReplaceActiveSessionHistoryEntry
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
SessionHistoryInfo
&
&
aInfo
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
aContext
.
get_canonical
(
)
-
>
ReplaceActiveSessionHistoryEntry
(
&
aInfo
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRemoveDynEntriesFromActiveSessionHistoryEntry
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
aContext
.
get_canonical
(
)
-
>
RemoveDynEntriesFromActiveSessionHistoryEntry
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvRemoveFromSessionHistory
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
nsID
&
aChangeID
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
aContext
.
get_canonical
(
)
-
>
RemoveFromSessionHistory
(
aChangeID
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvHistoryReload
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aContext
const
uint32_t
aReloadFlags
)
{
if
(
!
aContext
.
IsNullOrDiscarded
(
)
)
{
nsCOMPtr
<
nsISHistory
>
shistory
=
aContext
.
get_canonical
(
)
-
>
GetSessionHistory
(
)
;
if
(
shistory
)
{
shistory
-
>
Reload
(
aReloadFlags
)
;
}
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvConsumeHistoryActivation
(
const
MaybeDiscarded
<
BrowsingContext
>
&
aTop
)
{
if
(
aTop
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
aTop
-
>
Group
(
)
-
>
EachOtherParent
(
this
[
aTop
]
(
ContentParent
*
aParent
)
{
Unused
<
<
aParent
-
>
SendConsumeHistoryActivation
(
aTop
)
;
}
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvCommitWindowContextTransaction
(
const
MaybeDiscarded
<
WindowContext
>
&
aContext
WindowContext
:
:
BaseTransaction
&
&
aTransaction
uint64_t
aEpoch
)
{
MOZ_ASSERT
(
aEpoch
=
=
mBrowsingContextFieldEpoch
+
1
"
Child
process
skipped
an
epoch
?
"
)
;
mBrowsingContextFieldEpoch
=
aEpoch
;
return
aTransaction
.
CommitFromIPC
(
aContext
this
)
;
}
NS_IMETHODIMP
ContentParent
:
:
GetChildID
(
uint64_t
*
aOut
)
{
*
aOut
=
this
-
>
ChildID
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
GetOsPid
(
int32_t
*
aOut
)
{
*
aOut
=
Pid
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
GetRemoteType
(
nsACString
&
aRemoteType
)
{
aRemoteType
=
GetRemoteType
(
)
;
return
NS_OK
;
}
void
ContentParent
:
:
StartRemoteWorkerService
(
)
{
MOZ_ASSERT
(
!
mRemoteWorkerServiceActor
)
;
MOZ_ASSERT
(
mRemoteType
!
=
PREALLOC_REMOTE_TYPE
)
;
Endpoint
<
PRemoteWorkerServiceChild
>
childEp
;
mRemoteWorkerServiceActor
=
RemoteWorkerServiceParent
:
:
CreateForProcess
(
this
&
childEp
)
;
Endpoint
<
PRemoteWorkerDebuggerManagerChild
>
remoteDebuggerChildEp
;
mRemoteWorkerDebuggerManagerActor
=
RemoteWorkerDebuggerManagerParent
:
:
CreateForProcess
(
&
remoteDebuggerChildEp
)
;
if
(
mRemoteWorkerServiceActor
)
{
Unused
<
<
SendInitRemoteWorkerService
(
std
:
:
move
(
childEp
)
std
:
:
move
(
remoteDebuggerChildEp
)
)
;
}
}
IPCResult
ContentParent
:
:
RecvRawMessage
(
const
JSActorMessageMeta
&
aMeta
const
UniquePtr
<
ClonedMessageData
>
&
aData
const
UniquePtr
<
ClonedMessageData
>
&
aStack
)
{
UniquePtr
<
StructuredCloneData
>
data
;
if
(
aData
)
{
data
=
MakeUnique
<
StructuredCloneData
>
(
)
;
data
-
>
BorrowFromClonedMessageData
(
*
aData
)
;
}
UniquePtr
<
StructuredCloneData
>
stack
;
if
(
aStack
)
{
stack
=
MakeUnique
<
StructuredCloneData
>
(
)
;
stack
-
>
BorrowFromClonedMessageData
(
*
aStack
)
;
}
MMPrinter
:
:
Print
(
"
ContentParent
:
:
RecvRawMessage
"
aMeta
.
actorName
(
)
aMeta
.
messageName
(
)
aData
)
;
ReceiveRawMessage
(
aMeta
std
:
:
move
(
data
)
std
:
:
move
(
stack
)
)
;
return
IPC_OK
(
)
;
}
NS_IMETHODIMP
ContentParent
:
:
GetActor
(
const
nsACString
&
aName
JSContext
*
aCx
JSProcessActorParent
*
*
retval
)
{
ErrorResult
error
;
RefPtr
<
JSProcessActorParent
>
actor
=
JSActorManager
:
:
GetActor
(
aCx
aName
error
)
.
downcast
<
JSProcessActorParent
>
(
)
;
if
(
error
.
MaybeSetPendingException
(
aCx
)
)
{
return
NS_ERROR_FAILURE
;
}
actor
.
forget
(
retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ContentParent
:
:
GetExistingActor
(
const
nsACString
&
aName
JSProcessActorParent
*
*
retval
)
{
RefPtr
<
JSProcessActorParent
>
actor
=
JSActorManager
:
:
GetExistingActor
(
aName
)
.
downcast
<
JSProcessActorParent
>
(
)
;
actor
.
forget
(
retval
)
;
return
NS_OK
;
}
already_AddRefed
<
JSActor
>
ContentParent
:
:
InitJSActor
(
JS
:
:
Handle
<
JSObject
*
>
aMaybeActor
const
nsACString
&
aName
ErrorResult
&
aRv
)
{
RefPtr
<
JSProcessActorParent
>
actor
;
if
(
aMaybeActor
.
get
(
)
)
{
aRv
=
UNWRAP_OBJECT
(
JSProcessActorParent
aMaybeActor
.
get
(
)
actor
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
}
else
{
actor
=
new
JSProcessActorParent
(
)
;
}
MOZ_RELEASE_ASSERT
(
!
actor
-
>
Manager
(
)
"
mManager
was
already
initialized
once
!
"
)
;
actor
-
>
Init
(
aName
this
)
;
return
actor
.
forget
(
)
;
}
IPCResult
ContentParent
:
:
RecvFOGData
(
ByteBuf
&
&
buf
)
{
glean
:
:
FOGData
(
std
:
:
move
(
buf
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ContentParent
:
:
RecvSetContainerFeaturePolicy
(
const
MaybeDiscardedBrowsingContext
&
aContainerContext
MaybeFeaturePolicyInfo
&
&
aContainerFeaturePolicyInfo
)
{
if
(
aContainerContext
.
IsNullOrDiscarded
(
)
)
{
return
IPC_OK
(
)
;
}
auto
*
context
=
aContainerContext
.
get_canonical
(
)
;
context
-
>
SetContainerFeaturePolicy
(
std
:
:
move
(
aContainerFeaturePolicyInfo
)
)
;
return
IPC_OK
(
)
;
}
NS_IMETHODIMP
ContentParent
:
:
GetCanSend
(
bool
*
aCanSend
)
{
*
aCanSend
=
CanSend
(
)
;
return
NS_OK
;
}
ContentParent
*
ContentParent
:
:
AsContentParent
(
)
{
return
this
;
}
JSActorManager
*
ContentParent
:
:
AsJSActorManager
(
)
{
return
this
;
}
IPCResult
ContentParent
:
:
RecvGetSystemIcon
(
nsIURI
*
aURI
GetSystemIconResolver
&
&
aResolver
)
{
using
ResolverArgs
=
std
:
:
tuple
<
const
nsresult
&
mozilla
:
:
Maybe
<
ByteBuf
>
&
&
>
;
if
(
!
aURI
)
{
Maybe
<
ByteBuf
>
bytebuf
=
Nothing
(
)
;
aResolver
(
ResolverArgs
(
NS_ERROR_NULL_POINTER
std
:
:
move
(
bytebuf
)
)
)
;
return
IPC_OK
(
)
;
}
#
if
defined
(
MOZ_WIDGET_GTK
)
Maybe
<
ByteBuf
>
bytebuf
=
Some
(
ByteBuf
{
}
)
;
nsresult
rv
=
nsIconChannel
:
:
GetIcon
(
aURI
bytebuf
.
ptr
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
bytebuf
=
Nothing
(
)
;
}
aResolver
(
ResolverArgs
(
rv
std
:
:
move
(
bytebuf
)
)
)
;
return
IPC_OK
(
)
;
#
elif
defined
(
XP_WIN
)
nsIconChannel
:
:
GetIconAsync
(
aURI
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
aResolver
]
(
ByteBuf
&
&
aByteBuf
)
{
Maybe
<
ByteBuf
>
bytebuf
=
Some
(
std
:
:
move
(
aByteBuf
)
)
;
aResolver
(
ResolverArgs
(
NS_OK
std
:
:
move
(
bytebuf
)
)
)
;
}
[
aResolver
]
(
nsresult
aErr
)
{
Maybe
<
ByteBuf
>
bytebuf
=
Nothing
(
)
;
aResolver
(
ResolverArgs
(
aErr
std
:
:
move
(
bytebuf
)
)
)
;
}
)
;
return
IPC_OK
(
)
;
#
else
MOZ_CRASH
(
"
This
message
is
currently
implemented
only
on
GTK
and
Windows
"
"
platforms
"
)
;
#
endif
}
IPCResult
ContentParent
:
:
RecvGetSystemGeolocationPermissionBehavior
(
GetSystemGeolocationPermissionBehaviorResolver
&
&
aResolver
)
{
aResolver
(
Geolocation
:
:
GetLocationOSPermission
(
)
)
;
return
IPC_OK
(
)
;
}
IPCResult
ContentParent
:
:
RecvRequestGeolocationPermissionFromUser
(
const
MaybeDiscardedBrowsingContext
&
aBrowsingContext
RequestGeolocationPermissionFromUserResolver
&
&
aResolver
)
{
if
(
MOZ_UNLIKELY
(
aBrowsingContext
.
IsNullOrDiscarded
(
)
)
)
{
aResolver
(
GeolocationPermissionStatus
:
:
Error
)
;
return
IPC_OK
(
)
;
}
RefPtr
<
BrowsingContext
>
browsingContext
=
aBrowsingContext
.
get
(
)
;
Geolocation
:
:
ReallowWithSystemPermissionOrCancel
(
browsingContext
std
:
:
move
(
aResolver
)
)
;
return
IPC_OK
(
)
;
}
#
ifdef
FUZZING_SNAPSHOT
IPCResult
ContentParent
:
:
RecvSignalFuzzingReady
(
)
{
return
IPC_OK
(
)
;
}
#
endif
nsCString
ThreadsafeContentParentHandle
:
:
GetRemoteType
(
)
{
RecursiveMutexAutoLock
lock
(
mMutex
)
;
return
mRemoteType
;
}
UniqueThreadsafeContentParentKeepAlive
ThreadsafeContentParentHandle
:
:
TryAddKeepAlive
(
uint64_t
aBrowserId
)
{
RecursiveMutexAutoLock
lock
(
mMutex
)
;
if
(
mShutdownStarted
)
{
return
nullptr
;
}
+
+
mKeepAlivesPerBrowserId
.
LookupOrInsert
(
aBrowserId
0
)
;
return
UniqueThreadsafeContentParentKeepAlive
{
do_AddRef
(
this
)
.
take
(
)
{
.
mBrowserId
=
aBrowserId
}
}
;
}
}
}
NS_IMPL_ISUPPORTS
(
ParentIdleListener
nsIObserver
)
NS_IMETHODIMP
ParentIdleListener
:
:
Observe
(
nsISupports
*
const
char
*
aTopic
const
char16_t
*
aData
)
{
mozilla
:
:
Unused
<
<
mParent
-
>
SendNotifyIdleObserver
(
mObserver
nsDependentCString
(
aTopic
)
nsDependentString
(
aData
)
)
;
return
NS_OK
;
}
#
undef
LOGPDM
