#
ifndef
mozilla_dom_NuwaParent_h
#
define
mozilla_dom_NuwaParent_h
#
include
"
base
/
message_loop
.
h
"
#
include
"
mozilla
/
dom
/
PNuwaParent
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
class
NuwaParent
:
public
mozilla
:
:
dom
:
:
PNuwaParent
{
public
:
explicit
NuwaParent
(
)
;
bool
ForkNewProcess
(
uint32_t
&
aPid
UniquePtr
<
nsTArray
<
ProtocolFdMapping
>
>
&
&
aFds
bool
aBlocking
)
;
bool
ActorConstructed
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
NuwaParent
)
static
NuwaParent
*
Alloc
(
)
;
static
bool
ActorConstructed
(
mozilla
:
:
dom
:
:
PNuwaParent
*
aActor
)
;
static
bool
Dealloc
(
mozilla
:
:
dom
:
:
PNuwaParent
*
aActor
)
;
protected
:
virtual
~
NuwaParent
(
)
;
virtual
bool
RecvNotifyReady
(
)
override
;
virtual
bool
RecvAddNewProcess
(
const
uint32_t
&
aPid
nsTArray
<
ProtocolFdMapping
>
&
&
aFds
)
override
;
virtual
mozilla
:
:
ipc
:
:
IProtocol
*
CloneProtocol
(
Channel
*
aChannel
ProtocolCloneContext
*
aCtx
)
override
;
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
void
AssertIsOnWorkerThread
(
)
;
bool
mBlocked
;
mozilla
:
:
Monitor
mMonitor
;
NuwaParent
*
mClonedActor
;
nsCOMPtr
<
nsIThread
>
mWorkerThread
;
uint32_t
mNewProcessPid
;
UniquePtr
<
nsTArray
<
ProtocolFdMapping
>
>
mNewProcessFds
;
nsRefPtr
<
ContentParent
>
mContentParent
;
}
;
}
}
#
endif
