#
include
"
DOMMobileMessageError
.
h
"
#
include
"
mozilla
/
dom
/
DOMMobileMessageErrorBinding
.
h
"
#
include
"
MmsMessage
.
h
"
#
include
"
SmsMessage
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
DOMMobileMessageError
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
DOMMobileMessageError
DOMError
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mSms
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mMms
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
DOMMobileMessageError
DOMError
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mSms
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMms
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
DOMMobileMessageError
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMError
)
NS_IMPL_ADDREF_INHERITED
(
DOMMobileMessageError
DOMError
)
NS_IMPL_RELEASE_INHERITED
(
DOMMobileMessageError
DOMError
)
DOMMobileMessageError
:
:
DOMMobileMessageError
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
SmsMessage
*
aSms
)
:
DOMError
(
aWindow
aName
)
mSms
(
aSms
)
mMms
(
nullptr
)
{
}
DOMMobileMessageError
:
:
DOMMobileMessageError
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aName
MmsMessage
*
aMms
)
:
DOMError
(
aWindow
aName
)
mSms
(
nullptr
)
mMms
(
aMms
)
{
}
void
DOMMobileMessageError
:
:
GetData
(
OwningSmsMessageOrMmsMessage
&
aRetVal
)
const
{
if
(
mSms
)
{
aRetVal
.
SetAsSmsMessage
(
)
=
mSms
;
return
;
}
if
(
mMms
)
{
aRetVal
.
SetAsMmsMessage
(
)
=
mMms
;
return
;
}
MOZ_CRASH
(
"
Bad
object
with
invalid
mSms
and
mMms
.
"
)
;
}
JSObject
*
DOMMobileMessageError
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
DOMMobileMessageErrorBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
