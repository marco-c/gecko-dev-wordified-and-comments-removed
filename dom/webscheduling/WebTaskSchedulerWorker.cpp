#
include
"
WebTaskSchedulerWorker
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
#
include
"
mozilla
/
dom
/
TimeoutManager
.
h
"
namespace
mozilla
:
:
dom
{
WebTaskWorkerRunnable
:
:
WebTaskWorkerRunnable
(
WorkerPrivate
*
aWorkerPrivate
WebTaskSchedulerWorker
*
aSchedulerWorker
)
:
WorkerSameThreadRunnable
(
aWorkerPrivate
)
mSchedulerWorker
(
aSchedulerWorker
)
{
MOZ_ASSERT
(
mSchedulerWorker
)
;
}
WebTaskSchedulerWorker
:
:
WebTaskSchedulerWorker
(
WorkerPrivate
*
aWorkerPrivate
)
:
WebTaskScheduler
(
aWorkerPrivate
-
>
GlobalScope
(
)
)
mWorkerPrivate
(
aWorkerPrivate
)
{
}
bool
WebTaskWorkerRunnable
:
:
WorkerRun
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
)
{
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
if
(
mSchedulerWorker
)
{
RefPtr
<
WebTask
>
task
=
mSchedulerWorker
-
>
GetNextTask
(
)
;
if
(
task
)
{
task
-
>
Run
(
)
;
}
}
return
true
;
}
nsresult
WebTaskSchedulerWorker
:
:
SetTimeoutForDelayedTask
(
WebTask
*
aTask
uint64_t
aDelay
)
{
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
!
cx
)
{
return
NS_ERROR_UNEXPECTED
;
}
RefPtr
<
DelayedWebTaskHandler
>
handler
=
new
DelayedWebTaskHandler
(
cx
this
aTask
)
;
ErrorResult
rv
;
int32_t
delay
=
aDelay
>
INT32_MAX
?
INT32_MAX
:
(
int32_t
)
aDelay
;
mWorkerPrivate
-
>
SetTimeout
(
cx
handler
delay
false
Timeout
:
:
Reason
:
:
eDelayedWebTaskTimeout
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
bool
WebTaskSchedulerWorker
:
:
DispatchEventLoopRunnable
(
)
{
RefPtr
<
WebTaskWorkerRunnable
>
runnable
=
new
WebTaskWorkerRunnable
(
mWorkerPrivate
this
)
;
return
runnable
-
>
Dispatch
(
)
;
}
}
