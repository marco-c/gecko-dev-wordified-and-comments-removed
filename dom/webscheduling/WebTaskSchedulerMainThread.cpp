#
include
"
mozilla
/
dom
/
TimeoutManager
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
WebTaskSchedulerMainThread
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMETHODIMP
WebTaskMainThreadRunnable
:
:
Run
(
)
{
if
(
mScheduler
)
{
RefPtr
<
WebTask
>
task
=
mScheduler
-
>
GetNextTask
(
)
;
if
(
task
)
{
task
-
>
Run
(
)
;
}
}
return
NS_OK
;
}
nsresult
WebTaskSchedulerMainThread
:
:
SetTimeoutForDelayedTask
(
WebTask
*
aTask
uint64_t
aDelay
EventQueuePriority
aPriority
)
{
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
!
cx
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsIGlobalObject
*
global
=
GetParentObject
(
)
;
MOZ_ASSERT
(
global
)
;
RefPtr
<
DelayedWebTaskHandler
>
handler
=
new
DelayedWebTaskHandler
(
cx
this
aTask
aPriority
)
;
int32_t
delay
=
aDelay
>
INT32_MAX
?
INT32_MAX
:
(
int32_t
)
aDelay
;
int32_t
handle
;
return
nsGlobalWindowInner
:
:
Cast
(
global
-
>
GetAsInnerWindow
(
)
)
-
>
GetTimeoutManager
(
)
-
>
SetTimeout
(
handler
delay
false
Timeout
:
:
Reason
:
:
eDelayedWebTaskTimeout
&
handle
)
;
}
bool
WebTaskSchedulerMainThread
:
:
DispatchEventLoopRunnable
(
EventQueuePriority
aPriority
)
{
RefPtr
<
WebTaskMainThreadRunnable
>
runnable
=
new
WebTaskMainThreadRunnable
(
this
)
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThreadQueue
(
runnable
.
forget
(
)
aPriority
)
)
;
return
true
;
}
}
