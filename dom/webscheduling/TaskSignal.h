#
ifndef
mozilla_dom_TaskSignal_h
#
define
mozilla_dom_TaskSignal_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
AbortSignal
.
h
"
#
include
"
mozilla
/
dom
/
WebTaskSchedulingBinding
.
h
"
namespace
mozilla
:
:
dom
{
class
TaskSignal
final
:
public
AbortSignal
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
TaskSignal
AbortSignal
)
IMPL_EVENT_HANDLER
(
prioritychange
)
;
static
already_AddRefed
<
TaskSignal
>
Create
(
nsIGlobalObject
*
aGlobalObject
TaskPriority
aPriority
)
;
static
already_AddRefed
<
TaskSignal
>
Any
(
GlobalObject
&
aGlobal
const
Sequence
<
OwningNonNull
<
AbortSignal
>
>
&
aSignals
const
TaskSignalAnyInit
&
aInit
)
;
TaskPriority
Priority
(
)
const
{
return
mPriority
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
TaskSignal_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
SetPriority
(
TaskPriority
aPriority
)
{
mPriority
=
aPriority
;
}
bool
IsTaskSignal
(
)
const
override
{
return
true
;
}
bool
PriorityChanging
(
)
const
{
return
mPriorityChanging
;
}
void
SetPriorityChanging
(
bool
aPriorityChanging
)
{
mPriorityChanging
=
aPriorityChanging
;
}
void
RunPriorityChangeAlgorithms
(
)
;
void
SetWebTaskScheduler
(
WebTaskScheduler
*
aScheduler
)
;
bool
HasFixedPriority
(
)
const
{
return
mDependent
&
&
!
mSourceTaskSignal
;
}
nsTArray
<
RefPtr
<
TaskSignal
>
>
&
DependentTaskSignals
(
)
{
return
mDependentTaskSignals
;
}
private
:
TaskSignal
(
nsIGlobalObject
*
aGlobal
TaskPriority
aPriority
)
:
AbortSignal
(
aGlobal
SignalAborted
:
:
No
JS
:
:
UndefinedHandleValue
)
mPriority
(
aPriority
)
mPriorityChanging
(
false
)
{
AbortSignal
:
:
Init
(
)
;
}
TaskPriority
mPriority
;
bool
mPriorityChanging
;
nsTArray
<
WeakPtr
<
WebTaskScheduler
>
>
mSchedulers
;
WeakPtr
<
TaskSignal
>
mSourceTaskSignal
;
nsTArray
<
RefPtr
<
TaskSignal
>
>
mDependentTaskSignals
;
~
TaskSignal
(
)
=
default
;
}
;
}
#
endif
