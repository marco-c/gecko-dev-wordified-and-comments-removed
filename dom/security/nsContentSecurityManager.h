#
ifndef
nsContentSecurityManager_h___
#
define
nsContentSecurityManager_h___
#
include
"
nsIContentSecurityManager
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
class
nsIStreamListener
;
#
define
NS_CONTENTSECURITYMANAGER_CONTRACTID
\
"
mozilla
.
org
/
contentsecuritymanager
;
1
"
#
define
NS_CONTENTSECURITYMANAGER_CID
\
{
\
0xcdcc1ab8
0x3cea
0x4e6c
{
\
0xa2
0x94
0xa6
0x51
0xfa
0x35
0x22
0x7f
\
}
\
}
class
nsContentSecurityManager
:
public
nsIContentSecurityManager
public
nsIChannelEventSink
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTSECURITYMANAGER
NS_DECL_NSICHANNELEVENTSINK
nsContentSecurityManager
(
)
=
default
;
static
nsresult
doContentSecurityCheck
(
nsIChannel
*
aChannel
nsCOMPtr
<
nsIStreamListener
>
&
aInAndOutListener
)
;
static
bool
AllowTopLevelNavigationToDataURI
(
nsIChannel
*
aChannel
)
;
static
bool
AllowInsecureRedirectToDataURI
(
nsIChannel
*
aNewChannel
)
;
static
void
MeasureUnexpectedPrivilegedLoads
(
nsIURI
*
aFinalURI
nsContentPolicyType
aContentPolicyType
const
nsAString
&
aRemoteType
)
;
private
:
static
nsresult
CheckChannel
(
nsIChannel
*
aChannel
)
;
static
nsresult
CheckFTPSubresourceLoad
(
nsIChannel
*
aChannel
)
;
static
nsresult
CheckAllowLoadInSystemPrivilegedContext
(
nsIChannel
*
aChannel
)
;
static
nsresult
CheckChannelHasProtocolSecurityFlag
(
nsIChannel
*
aChannel
)
;
virtual
~
nsContentSecurityManager
(
)
=
default
;
}
;
#
endif
