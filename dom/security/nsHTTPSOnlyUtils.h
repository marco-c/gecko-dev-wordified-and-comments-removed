#
ifndef
nsHTTPSOnlyUtils_h___
#
define
nsHTTPSOnlyUtils_h___
#
include
"
nsIScriptError
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
net
/
DocumentLoadListener
.
h
"
class
nsHTTPSOnlyUtils
{
public
:
static
bool
IsHttpsOnlyModeEnabled
(
bool
aFromPrivateWindow
)
;
static
void
PotentiallyFireHttpRequestToShortenTimout
(
mozilla
:
:
net
:
:
DocumentLoadListener
*
aDocumentLoadListener
)
;
static
bool
ShouldUpgradeRequest
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
;
static
bool
ShouldUpgradeWebSocket
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
;
static
bool
CouldBeHttpsOnlyError
(
nsIChannel
*
aChannel
nsresult
aError
)
;
static
void
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
nsILoadInfo
*
aLoadInfo
nsIURI
*
aURI
=
nullptr
)
;
static
void
TestSitePermissionAndPotentiallyAddExemption
(
nsIChannel
*
aChannel
)
;
static
bool
IsSafeToAcceptCORSOrMixedContent
(
nsILoadInfo
*
aLoadInfo
)
;
private
:
static
void
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
nsILoadInfo
*
aLoadInfo
nsIURI
*
aURI
=
nullptr
)
;
static
bool
OnionException
(
nsIURI
*
aURI
)
;
static
bool
LoopbackOrLocalException
(
nsIURI
*
aURI
)
;
}
;
class
TestHTTPAnswerRunnable
final
:
public
mozilla
:
:
Runnable
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsITimerCallback
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSITIMERCALLBACK
explicit
TestHTTPAnswerRunnable
(
nsIURI
*
aURI
mozilla
:
:
net
:
:
DocumentLoadListener
*
aDocumentLoadListener
)
;
protected
:
~
TestHTTPAnswerRunnable
(
)
=
default
;
private
:
RefPtr
<
nsIURI
>
mURI
;
RefPtr
<
mozilla
:
:
net
:
:
DocumentLoadListener
>
mDocumentLoadListener
;
RefPtr
<
nsITimer
>
mTimer
;
}
;
#
endif
