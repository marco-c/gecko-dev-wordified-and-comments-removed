#
ifndef
nsContentSecurityUtils_h___
#
define
nsContentSecurityUtils_h___
class
nsIChannel
;
class
nsIHttpChannel
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
}
typedef
std
:
:
pair
<
nsCString
mozilla
:
:
Maybe
<
nsString
>
>
FilenameTypeAndDetails
;
class
nsContentSecurityUtils
{
public
:
static
bool
IsConsideredSameOriginForUIR
(
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aResultPrincipal
)
;
static
FilenameTypeAndDetails
FilenameToFilenameType
(
const
nsString
&
fileName
bool
collectAdditionalExtensionData
)
;
static
bool
IsEvalAllowed
(
JSContext
*
cx
bool
aIsSystemPrincipal
const
nsAString
&
aScript
)
;
static
void
NotifyEvalUsage
(
bool
aIsSystemPrincipal
NS_ConvertUTF8toUTF16
&
aFileNameA
uint64_t
aWindowID
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
static
nsresult
GetHttpChannelFromPotentialMultiPart
(
nsIChannel
*
aChannel
nsIHttpChannel
*
*
aHttpChannel
)
;
static
void
PerformCSPFrameAncestorAndXFOCheck
(
nsIChannel
*
aChannel
)
;
static
bool
IsDownloadAllowed
(
nsIChannel
*
aChannel
const
nsAutoCString
&
aMimeTypeGuess
)
;
#
if
defined
(
DEBUG
)
static
void
AssertAboutPageHasCSP
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
#
endif
static
bool
ValidateScriptFilename
(
const
char
*
aFilename
bool
aIsSystemRealm
)
;
static
bool
IsDownloadAllowed
(
nsIChannel
*
aChannel
)
;
static
void
LogMessageToConsole
(
nsIHttpChannel
*
aChannel
const
char
*
aMsg
)
;
}
;
#
endif
