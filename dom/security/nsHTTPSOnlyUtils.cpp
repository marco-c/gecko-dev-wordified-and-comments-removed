#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHTTPSOnlyUtils
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIScriptError
.
h
"
bool
nsHTTPSOnlyUtils
:
:
ShouldUpgradeRequest
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
{
if
(
!
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode
(
)
)
{
return
false
;
}
if
(
aLoadInfo
-
>
GetHttpsOnlyNoUpgrade
(
)
)
{
uint32_t
innerWindowId
=
aLoadInfo
-
>
GetInnerWindowID
(
)
;
AutoTArray
<
nsString
2
>
params
=
{
NS_ConvertUTF8toUTF16
(
aURI
-
>
GetSpecOrDefault
(
)
)
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyNoUpgrade
"
params
nsIScriptError
:
:
infoFlag
innerWindowId
!
!
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
aURI
)
;
return
false
;
}
nsAutoCString
scheme
;
aURI
-
>
GetScheme
(
scheme
)
;
scheme
.
AppendLiteral
(
"
s
"
)
;
NS_ConvertUTF8toUTF16
reportSpec
(
aURI
-
>
GetSpecOrDefault
(
)
)
;
NS_ConvertUTF8toUTF16
reportScheme
(
scheme
)
;
uint32_t
innerWindowId
=
aLoadInfo
-
>
GetInnerWindowID
(
)
;
AutoTArray
<
nsString
2
>
params
=
{
reportSpec
reportScheme
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyUpgradeRequest
"
params
nsIScriptError
:
:
warningFlag
innerWindowId
!
!
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
aURI
)
;
return
true
;
}
void
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
nsIURI
*
aURI
)
{
nsAutoString
logMsg
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eSECURITY_PROPERTIES
aName
aParams
logMsg
)
;
LogMessage
(
logMsg
aFlags
aInnerWindowID
aFromPrivateWindow
aURI
)
;
}
void
nsHTTPSOnlyUtils
:
:
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
nsIURI
*
aURI
)
{
nsString
message
;
message
.
AppendLiteral
(
u
"
HTTPS
-
Only
Mode
:
"
)
;
message
.
Append
(
aMessage
)
;
nsCString
category
(
"
HTTPSOnly
"
)
;
if
(
aInnerWindowID
>
0
)
{
nsContentUtils
:
:
ReportToConsoleByWindowID
(
message
aFlags
category
aInnerWindowID
aURI
)
;
}
else
{
LogSimpleConsoleError
(
message
category
.
get
(
)
aFromPrivateWindow
true
aFlags
)
;
}
}
void
nsHTTPSOnlyUtils
:
:
LogSimpleConsoleError
(
const
nsAString
&
aErrorText
const
char
*
aCategory
bool
aFromPrivateWindow
bool
aFromChromeContext
uint32_t
aErrorFlags
)
{
nsCOMPtr
<
nsIScriptError
>
scriptError
=
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
;
if
(
!
scriptError
)
{
return
;
}
nsCOMPtr
<
nsIConsoleService
>
console
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
;
if
(
!
console
)
{
return
;
}
nsresult
rv
=
scriptError
-
>
Init
(
aErrorText
EmptyString
(
)
EmptyString
(
)
0
0
aErrorFlags
aCategory
aFromPrivateWindow
aFromChromeContext
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
console
-
>
LogMessage
(
scriptError
)
;
}
