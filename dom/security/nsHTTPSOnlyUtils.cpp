#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
net
/
DNS
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHTTPSOnlyUtils
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIHttpsOnlyModePermission
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIRedirectHistoryEntry
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
prnetdb
.
h
"
#
define
FIRE_HTTP_REQUEST_BACKGROUND_TIMER_MS
3000
bool
nsHTTPSOnlyUtils
:
:
IsHttpsOnlyModeEnabled
(
bool
aFromPrivateWindow
)
{
if
(
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode
(
)
)
{
return
true
;
}
if
(
aFromPrivateWindow
&
&
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode_pbm
(
)
)
{
return
true
;
}
return
false
;
}
bool
nsHTTPSOnlyUtils
:
:
IsHttpsFirstModeEnabled
(
bool
aFromPrivateWindow
)
{
if
(
mozilla
:
:
StaticPrefs
:
:
dom_security_https_first
(
)
)
{
return
true
;
}
if
(
aFromPrivateWindow
&
&
mozilla
:
:
StaticPrefs
:
:
dom_security_https_first_pbm
(
)
)
{
return
true
;
}
return
false
;
}
void
nsHTTPSOnlyUtils
:
:
PotentiallyFireHttpRequestToShortenTimout
(
mozilla
:
:
net
:
:
DocumentLoadListener
*
aDocumentLoadListener
)
{
if
(
!
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode_send_http_background_request
(
)
)
{
return
;
}
nsCOMPtr
<
nsIChannel
>
channel
=
aDocumentLoadListener
-
>
GetChannel
(
)
;
if
(
!
channel
)
{
return
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
channel
-
>
LoadInfo
(
)
;
bool
isPrivateWin
=
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
&
&
!
IsHttpsFirstModeEnabled
(
isPrivateWin
)
)
{
return
;
}
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
;
}
uint32_t
httpsOnlyStatus
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
return
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
(
do_QueryInterface
(
channel
)
)
;
if
(
!
httpChannel
)
{
return
;
}
nsAutoCString
method
;
mozilla
:
:
Unused
<
<
httpChannel
-
>
GetRequestMethod
(
method
)
;
if
(
!
method
.
EqualsLiteral
(
"
GET
"
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
channelURI
;
channel
-
>
GetURI
(
getter_AddRefs
(
channelURI
)
)
;
if
(
!
channelURI
-
>
SchemeIs
(
"
http
"
)
)
{
return
;
}
if
(
OnionException
(
channelURI
)
|
|
LoopbackOrLocalException
(
channelURI
)
)
{
return
;
}
RefPtr
<
nsIRunnable
>
task
=
new
TestHTTPAnswerRunnable
(
channelURI
aDocumentLoadListener
)
;
NS_DispatchToMainThread
(
task
.
forget
(
)
)
;
}
bool
nsHTTPSOnlyUtils
:
:
ShouldUpgradeRequest
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
{
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
if
(
OnionException
(
aURI
)
|
|
LoopbackOrLocalException
(
aURI
)
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
AutoTArray
<
nsString
1
>
params
=
{
NS_ConvertUTF8toUTF16
(
aURI
-
>
GetSpecOrDefault
(
)
)
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyNoUpgradeException
"
params
nsIScriptError
:
:
infoFlag
aLoadInfo
aURI
)
;
return
false
;
}
if
(
aLoadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
if
(
!
aLoadInfo
-
>
TriggeringPrincipal
(
)
-
>
IsSystemPrincipal
(
)
&
&
TestIfPrincipalIsExempt
(
aLoadInfo
-
>
TriggeringPrincipal
(
)
)
)
{
return
false
;
}
}
nsAutoCString
scheme
;
aURI
-
>
GetScheme
(
scheme
)
;
scheme
.
AppendLiteral
(
"
s
"
)
;
NS_ConvertUTF8toUTF16
reportSpec
(
aURI
-
>
GetSpecOrDefault
(
)
)
;
NS_ConvertUTF8toUTF16
reportScheme
(
scheme
)
;
AutoTArray
<
nsString
2
>
params
=
{
reportSpec
reportScheme
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyUpgradeRequest
"
params
nsIScriptError
:
:
warningFlag
aLoadInfo
aURI
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_UNINITIALIZED
)
{
httpsOnlyStatus
^
=
nsILoadInfo
:
:
HTTPS_ONLY_UNINITIALIZED
;
httpsOnlyStatus
|
=
nsILoadInfo
:
:
HTTPS_ONLY_UPGRADED_LISTENER_NOT_REGISTERED
;
aLoadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
)
;
}
return
true
;
}
bool
nsHTTPSOnlyUtils
:
:
ShouldUpgradeWebSocket
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
{
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
if
(
OnionException
(
aURI
)
|
|
LoopbackOrLocalException
(
aURI
)
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
AutoTArray
<
nsString
1
>
params
=
{
NS_ConvertUTF8toUTF16
(
aURI
-
>
GetSpecOrDefault
(
)
)
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyNoUpgradeException
"
params
nsIScriptError
:
:
infoFlag
aLoadInfo
aURI
)
;
return
false
;
}
nsAutoCString
scheme
;
aURI
-
>
GetScheme
(
scheme
)
;
scheme
.
AppendLiteral
(
"
s
"
)
;
NS_ConvertUTF8toUTF16
reportSpec
(
aURI
-
>
GetSpecOrDefault
(
)
)
;
NS_ConvertUTF8toUTF16
reportScheme
(
scheme
)
;
AutoTArray
<
nsString
2
>
params
=
{
reportSpec
reportScheme
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyUpgradeRequest
"
params
nsIScriptError
:
:
warningFlag
aLoadInfo
aURI
)
;
return
true
;
}
bool
nsHTTPSOnlyUtils
:
:
IsUpgradeDowngradeEndlessLoop
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
{
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
&
&
!
IsHttpsFirstModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
if
(
!
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode_break_upgrade_downgrade_endless_loop
(
)
)
{
return
false
;
}
if
(
aLoadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
return
false
;
}
if
(
aLoadInfo
-
>
GetHasValidUserGestureActivation
(
)
)
{
return
false
;
}
if
(
!
aURI
-
>
SchemeIs
(
"
http
"
)
)
{
return
false
;
}
nsAutoCString
uriHost
;
aURI
-
>
GetAsciiHost
(
uriHost
)
;
if
(
!
aLoadInfo
-
>
RedirectChain
(
)
.
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIPrincipal
>
redirectPrincipal
;
for
(
nsIRedirectHistoryEntry
*
entry
:
aLoadInfo
-
>
RedirectChain
(
)
)
{
entry
-
>
GetPrincipal
(
getter_AddRefs
(
redirectPrincipal
)
)
;
if
(
redirectPrincipal
&
&
redirectPrincipal
-
>
SchemeIs
(
"
https
"
)
)
{
nsAutoCString
redirectHost
;
redirectPrincipal
-
>
GetAsciiHost
(
redirectHost
)
;
if
(
uriHost
.
Equals
(
redirectHost
)
)
{
return
true
;
}
}
}
}
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
aLoadInfo
-
>
TriggeringPrincipal
(
)
;
if
(
!
triggeringPrincipal
-
>
SchemeIs
(
"
https
"
)
)
{
return
false
;
}
nsAutoCString
triggeringHost
;
triggeringPrincipal
-
>
GetAsciiHost
(
triggeringHost
)
;
return
uriHost
.
Equals
(
triggeringHost
)
;
}
bool
nsHTTPSOnlyUtils
:
:
ShouldUpgradeHttpsFirstRequest
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
{
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsFirstModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
if
(
aLoadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_UPGRADED_HTTPS_FIRST
|
|
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
return
false
;
}
MOZ_ASSERT
(
aURI
-
>
SchemeIs
(
"
http
"
)
"
how
come
the
request
is
not
'
http
'
?
"
)
;
nsAutoCString
scheme
;
aURI
-
>
GetScheme
(
scheme
)
;
scheme
.
AppendLiteral
(
"
s
"
)
;
NS_ConvertUTF8toUTF16
reportSpec
(
aURI
-
>
GetSpecOrDefault
(
)
)
;
NS_ConvertUTF8toUTF16
reportScheme
(
scheme
)
;
AutoTArray
<
nsString
2
>
params
=
{
reportSpec
reportScheme
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyUpgradeRequest
"
params
nsIScriptError
:
:
warningFlag
aLoadInfo
aURI
true
)
;
httpsOnlyStatus
|
=
nsILoadInfo
:
:
HTTPS_ONLY_UPGRADED_HTTPS_FIRST
;
aLoadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
)
;
return
true
;
}
already_AddRefed
<
nsIURI
>
nsHTTPSOnlyUtils
:
:
PotentiallyDowngradeHttpsFirstRequest
(
nsIChannel
*
aChannel
nsresult
aError
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
uint32_t
httpsOnlyStatus
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
!
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_UPGRADED_HTTPS_FIRST
)
)
{
return
nullptr
;
}
loadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
|
nsILoadInfo
:
:
HTTPS_ONLY_TOP_LEVEL_LOAD_IN_PROGRESS
)
;
if
(
HttpsUpgradeUnrelatedErrorCode
(
aError
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
if
(
!
uri
-
>
SchemeIs
(
"
https
"
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
newURI
;
mozilla
:
:
Unused
<
<
NS_MutateURI
(
uri
)
.
SetScheme
(
"
http
"
_ns
)
.
Finalize
(
getter_AddRefs
(
newURI
)
)
;
NS_ConvertUTF8toUTF16
reportSpec
(
uri
-
>
GetSpecOrDefault
(
)
)
;
AutoTArray
<
nsString
1
>
params
=
{
reportSpec
}
;
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
"
HTTPSOnlyFailedDowngradeAgain
"
params
nsIScriptError
:
:
warningFlag
loadInfo
uri
true
)
;
return
newURI
.
forget
(
)
;
}
bool
nsHTTPSOnlyUtils
:
:
CouldBeHttpsOnlyError
(
nsIChannel
*
aChannel
nsresult
aError
)
{
if
(
!
aChannel
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
bool
isPrivateWin
=
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
|
|
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_UNINITIALIZED
)
{
return
false
;
}
return
!
HttpsUpgradeUnrelatedErrorCode
(
aError
)
;
}
bool
nsHTTPSOnlyUtils
:
:
TestIfPrincipalIsExempt
(
nsIPrincipal
*
aPrincipal
)
{
static
nsCOMPtr
<
nsIPermissionManager
>
sPermMgr
;
if
(
!
sPermMgr
)
{
sPermMgr
=
mozilla
:
:
components
:
:
PermissionManager
:
:
Service
(
)
;
mozilla
:
:
ClearOnShutdown
(
&
sPermMgr
)
;
}
NS_ENSURE_TRUE
(
sPermMgr
false
)
;
uint32_t
perm
;
nsresult
rv
=
sPermMgr
-
>
TestExactPermissionFromPrincipal
(
aPrincipal
"
https
-
only
-
load
-
insecure
"
_ns
&
perm
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
return
perm
=
=
nsIHttpsOnlyModePermission
:
:
LOAD_INSECURE_ALLOW
|
|
perm
=
=
nsIHttpsOnlyModePermission
:
:
LOAD_INSECURE_ALLOW_SESSION
;
}
void
nsHTTPSOnlyUtils
:
:
TestSitePermissionAndPotentiallyAddExemption
(
nsIChannel
*
aChannel
)
{
NS_ENSURE_TRUE_VOID
(
aChannel
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
bool
isPrivateWin
=
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
)
{
return
;
}
ExtContentPolicyType
type
=
loadInfo
-
>
GetExternalContentPolicyType
(
)
;
if
(
type
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
return
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsresult
rv
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
aChannel
getter_AddRefs
(
principal
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
uint32_t
httpsOnlyStatus
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
TestIfPrincipalIsExempt
(
principal
)
)
{
httpsOnlyStatus
|
=
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
;
}
else
{
httpsOnlyStatus
&
=
~
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
;
}
loadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
)
;
}
bool
nsHTTPSOnlyUtils
:
:
IsSafeToAcceptCORSOrMixedContent
(
nsILoadInfo
*
aLoadInfo
)
{
if
(
(
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
)
{
return
false
;
}
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
return
nsHTTPSOnlyUtils
:
:
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
;
}
bool
nsHTTPSOnlyUtils
:
:
HttpsUpgradeUnrelatedErrorCode
(
nsresult
aError
)
{
return
NS_ERROR_UNKNOWN_PROTOCOL
=
=
aError
|
|
NS_ERROR_FILE_NOT_FOUND
=
=
aError
|
|
NS_ERROR_FILE_ACCESS_DENIED
=
=
aError
|
|
NS_ERROR_UNKNOWN_HOST
=
=
aError
|
|
NS_ERROR_PHISHING_URI
=
=
aError
|
|
NS_ERROR_MALWARE_URI
=
=
aError
|
|
NS_ERROR_UNWANTED_URI
=
=
aError
|
|
NS_ERROR_HARMFUL_URI
=
=
aError
|
|
NS_ERROR_CONTENT_CRASHED
=
=
aError
|
|
NS_ERROR_FRAME_CRASHED
=
=
aError
;
}
void
nsHTTPSOnlyUtils
:
:
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
nsILoadInfo
*
aLoadInfo
nsIURI
*
aURI
bool
aUseHttpsFirst
)
{
nsAutoString
logMsg
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eSECURITY_PROPERTIES
aName
aParams
logMsg
)
;
LogMessage
(
logMsg
aFlags
aLoadInfo
aURI
aUseHttpsFirst
)
;
}
void
nsHTTPSOnlyUtils
:
:
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
nsILoadInfo
*
aLoadInfo
nsIURI
*
aURI
bool
aUseHttpsFirst
)
{
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_DO_NOT_LOG_TO_CONSOLE
)
{
return
;
}
nsString
message
;
message
.
Append
(
aUseHttpsFirst
?
u
"
HTTPS
-
First
Mode
:
"
_ns
:
u
"
HTTPS
-
Only
Mode
:
"
_ns
)
;
message
.
Append
(
aMessage
)
;
nsCString
category
(
aUseHttpsFirst
?
"
HTTPSFirst
"
:
"
HTTPSOnly
"
)
;
uint32_t
innerWindowId
=
aLoadInfo
-
>
GetInnerWindowID
(
)
;
if
(
innerWindowId
>
0
)
{
nsContentUtils
:
:
ReportToConsoleByWindowID
(
message
aFlags
category
innerWindowId
aURI
)
;
}
else
{
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
nsContentUtils
:
:
LogSimpleConsoleError
(
message
category
.
get
(
)
isPrivateWin
true
aFlags
)
;
}
}
bool
nsHTTPSOnlyUtils
:
:
OnionException
(
nsIURI
*
aURI
)
{
if
(
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode_upgrade_onion
(
)
)
{
return
false
;
}
nsAutoCString
host
;
aURI
-
>
GetHost
(
host
)
;
return
StringEndsWith
(
host
"
.
onion
"
_ns
)
;
}
bool
nsHTTPSOnlyUtils
:
:
LoopbackOrLocalException
(
nsIURI
*
aURI
)
{
nsAutoCString
asciiHost
;
nsresult
rv
=
aURI
-
>
GetAsciiHost
(
asciiHost
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
asciiHost
.
EqualsLiteral
(
"
localhost
"
)
|
|
asciiHost
.
EqualsLiteral
(
"
:
:
1
"
)
)
{
return
true
;
}
PRNetAddr
tempAddr
;
memset
(
&
tempAddr
0
sizeof
(
PRNetAddr
)
)
;
if
(
PR_StringToNetAddr
(
asciiHost
.
get
(
)
&
tempAddr
)
!
=
PR_SUCCESS
)
{
return
false
;
}
mozilla
:
:
net
:
:
NetAddr
addr
(
&
tempAddr
)
;
if
(
addr
.
IsLoopbackAddr
(
)
)
{
return
true
;
}
bool
upgradeLocal
=
mozilla
:
:
StaticPrefs
:
:
dom_security_https_only_mode_upgrade_local
(
)
;
return
(
!
upgradeLocal
&
&
addr
.
IsIPAddrLocal
(
)
)
;
}
bool
nsHTTPSOnlyUtils
:
:
IsEqualURIExceptSchemeAndRef
(
nsIURI
*
aHTTPSSchemeURI
nsIURI
*
aOtherURI
nsILoadInfo
*
aLoadInfo
)
{
if
(
!
aHTTPSSchemeURI
|
|
!
aOtherURI
|
|
!
aLoadInfo
)
{
return
false
;
}
if
(
!
mozilla
:
:
net
:
:
SchemeIsHTTP
(
aOtherURI
)
)
{
return
false
;
}
bool
isPrivateWin
=
aLoadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
>
0
;
if
(
!
IsHttpsOnlyModeEnabled
(
isPrivateWin
)
&
&
!
IsHttpsFirstModeEnabled
(
isPrivateWin
)
)
{
return
false
;
}
uint32_t
httpsOnlyStatus
=
aLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
httpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
)
{
return
false
;
}
int32_t
port
=
0
;
nsresult
rv
=
aOtherURI
-
>
GetPort
(
&
port
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
port
=
=
-
1
)
{
port
=
NS_GetDefaultPort
(
"
https
"
)
;
}
nsCOMPtr
<
nsIURI
>
newHTTPSchemeURI
;
rv
=
NS_MutateURI
(
aOtherURI
)
.
SetScheme
(
"
https
"
_ns
)
.
SetPort
(
port
)
.
Finalize
(
newHTTPSchemeURI
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
bool
uriEquals
=
false
;
if
(
NS_FAILED
(
aHTTPSSchemeURI
-
>
EqualsExceptRef
(
newHTTPSchemeURI
&
uriEquals
)
)
)
{
return
false
;
}
return
uriEquals
;
}
NS_IMPL_ISUPPORTS_INHERITED
(
TestHTTPAnswerRunnable
mozilla
:
:
Runnable
nsIStreamListener
nsIInterfaceRequestor
nsITimerCallback
)
TestHTTPAnswerRunnable
:
:
TestHTTPAnswerRunnable
(
nsIURI
*
aURI
mozilla
:
:
net
:
:
DocumentLoadListener
*
aDocumentLoadListener
)
:
mozilla
:
:
Runnable
(
"
TestHTTPAnswerRunnable
"
)
mURI
(
aURI
)
mDocumentLoadListener
(
aDocumentLoadListener
)
{
}
bool
TestHTTPAnswerRunnable
:
:
IsBackgroundRequestRedirected
(
nsIHttpChannel
*
aChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadinfo
=
aChannel
-
>
LoadInfo
(
)
;
if
(
loadinfo
-
>
RedirectChain
(
)
.
IsEmpty
(
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
finalURI
;
nsresult
rv
=
NS_GetFinalChannelURI
(
aChannel
getter_AddRefs
(
finalURI
)
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
!
finalURI
-
>
SchemeIs
(
"
https
"
)
)
{
return
false
;
}
nsCOMPtr
<
nsIPrincipal
>
firstURIPrincipal
;
loadinfo
-
>
RedirectChain
(
)
[
0
]
-
>
GetPrincipal
(
getter_AddRefs
(
firstURIPrincipal
)
)
;
if
(
!
firstURIPrincipal
|
|
!
firstURIPrincipal
-
>
SchemeIs
(
"
http
"
)
)
{
return
false
;
}
nsAutoCString
redirectHost
;
nsAutoCString
finalHost
;
firstURIPrincipal
-
>
GetAsciiHost
(
redirectHost
)
;
finalURI
-
>
GetAsciiHost
(
finalHost
)
;
return
finalHost
.
Equals
(
redirectHost
)
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
OnStartRequest
(
nsIRequest
*
aRequest
)
{
nsresult
requestStatus
;
aRequest
-
>
GetStatus
(
&
requestStatus
)
;
if
(
requestStatus
!
=
NS_OK
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIChannel
>
docChannel
=
mDocumentLoadListener
-
>
GetChannel
(
)
;
nsCOMPtr
<
nsIHttpChannel
>
httpsOnlyChannel
=
do_QueryInterface
(
docChannel
)
;
if
(
httpsOnlyChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
httpsOnlyChannel
-
>
LoadInfo
(
)
;
uint32_t
topLevelLoadInProgress
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
&
nsILoadInfo
:
:
HTTPS_ONLY_TOP_LEVEL_LOAD_IN_PROGRESS
;
nsCOMPtr
<
nsIHttpChannelInternal
>
httpChannelInternal
=
do_QueryInterface
(
httpsOnlyChannel
)
;
bool
isAuthChannel
=
false
;
mozilla
:
:
Unused
<
<
httpChannelInternal
-
>
GetIsAuthChannel
(
&
isAuthChannel
)
;
if
(
!
topLevelLoadInProgress
)
{
nsCOMPtr
<
nsIHttpChannel
>
backgroundHttpChannel
=
do_QueryInterface
(
aRequest
)
;
topLevelLoadInProgress
=
IsBackgroundRequestRedirected
(
backgroundHttpChannel
)
;
}
if
(
!
topLevelLoadInProgress
&
&
!
isAuthChannel
)
{
nsresult
httpsOnlyChannelStatus
;
httpsOnlyChannel
-
>
GetStatus
(
&
httpsOnlyChannelStatus
)
;
if
(
httpsOnlyChannelStatus
=
=
NS_OK
)
{
httpsOnlyChannel
-
>
Cancel
(
NS_ERROR_NET_TIMEOUT_EXTERNAL
)
;
}
}
}
aRequest
-
>
Cancel
(
NS_ERROR_ABORT
)
;
return
NS_ERROR_ABORT
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsIInputStream
*
aStream
uint64_t
aOffset
uint32_t
aCount
)
{
MOZ_ASSERT
(
false
"
how
come
we
get
to
:
:
OnDataAvailable
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatusCode
)
{
return
NS_OK
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
return
QueryInterface
(
aIID
aResult
)
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
Run
(
)
{
return
NS_NewTimerWithCallback
(
getter_AddRefs
(
mTimer
)
this
FIRE_HTTP_REQUEST_BACKGROUND_TIMER_MS
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
NS_IMETHODIMP
TestHTTPAnswerRunnable
:
:
Notify
(
nsITimer
*
aTimer
)
{
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
nsCOMPtr
<
nsIChannel
>
origChannel
=
mDocumentLoadListener
-
>
GetChannel
(
)
;
nsCOMPtr
<
nsILoadInfo
>
origLoadInfo
=
origChannel
-
>
LoadInfo
(
)
;
uint32_t
origHttpsOnlyStatus
=
origLoadInfo
-
>
GetHttpsOnlyStatus
(
)
;
if
(
(
origHttpsOnlyStatus
&
nsILoadInfo
:
:
HTTPS_ONLY_TOP_LEVEL_LOAD_IN_PROGRESS
)
)
{
return
NS_OK
;
}
mozilla
:
:
OriginAttributes
attrs
=
origLoadInfo
-
>
GetOriginAttributes
(
)
;
RefPtr
<
nsIPrincipal
>
nullPrincipal
=
mozilla
:
:
NullPrincipal
:
:
CreateWithInheritedAttributes
(
attrs
)
;
uint32_t
loadFlags
=
nsIRequest
:
:
LOAD_ANONYMOUS
|
nsIRequest
:
:
INHIBIT_CACHING
|
nsIRequest
:
:
INHIBIT_PERSISTENT_CACHING
|
nsIRequest
:
:
LOAD_BYPASS_CACHE
|
nsIChannel
:
:
LOAD_BYPASS_SERVICE_WORKER
;
nsCOMPtr
<
nsIURI
>
backgroundChannelURI
;
nsAutoCString
prePathStr
;
nsresult
rv
=
mURI
-
>
GetPrePath
(
prePathStr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
NS_NewURI
(
getter_AddRefs
(
backgroundChannelURI
)
prePathStr
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIChannel
>
testHTTPChannel
;
rv
=
NS_NewChannel
(
getter_AddRefs
(
testHTTPChannel
)
backgroundChannelURI
nullPrincipal
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
nsIContentPolicy
:
:
TYPE_OTHER
nullptr
nullptr
nullptr
nullptr
loadFlags
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
testHTTPChannel
-
>
LoadInfo
(
)
;
uint32_t
httpsOnlyStatus
=
loadInfo
-
>
GetHttpsOnlyStatus
(
)
;
httpsOnlyStatus
|
=
nsILoadInfo
:
:
HTTPS_ONLY_EXEMPT
|
nsILoadInfo
:
:
HTTPS_ONLY_DO_NOT_LOG_TO_CONSOLE
;
loadInfo
-
>
SetHttpsOnlyStatus
(
httpsOnlyStatus
)
;
testHTTPChannel
-
>
SetNotificationCallbacks
(
this
)
;
testHTTPChannel
-
>
AsyncOpen
(
this
)
;
return
NS_OK
;
}
