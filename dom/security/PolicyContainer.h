#
ifndef
PolicyContainer_h___
#
define
PolicyContainer_h___
#
include
"
nsIPolicyContainer
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
:
:
ipc
{
class
PolicyContainerArgs
;
}
namespace
mozilla
:
:
dom
{
class
Document
;
}
#
define
NS_POLICYCONTAINER_CONTRACTID
"
mozilla
.
org
/
policycontainer
;
1
"
class
nsIContentSecurityPolicy
;
class
nsIIntegrityPolicy
;
class
PolicyContainer
:
public
nsIPolicyContainer
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISERIALIZABLE
PolicyContainer
(
)
=
default
;
static
void
ToArgs
(
const
PolicyContainer
*
aPolicy
mozilla
:
:
ipc
:
:
PolicyContainerArgs
&
aArgs
)
;
static
void
FromArgs
(
const
mozilla
:
:
ipc
:
:
PolicyContainerArgs
&
aArgs
mozilla
:
:
dom
:
:
Document
*
aRequestingDocument
PolicyContainer
*
*
aPolicy
)
;
static
const
PolicyContainer
*
Cast
(
const
nsIPolicyContainer
*
aPolicyContainer
)
{
return
static_cast
<
const
PolicyContainer
*
>
(
aPolicyContainer
)
;
}
static
PolicyContainer
*
Cast
(
nsIPolicyContainer
*
aPolicyContainer
)
{
return
static_cast
<
PolicyContainer
*
>
(
aPolicyContainer
)
;
}
nsIContentSecurityPolicy
*
CSP
(
)
const
;
void
SetCSP
(
nsIContentSecurityPolicy
*
aPolicy
)
;
static
nsIContentSecurityPolicy
*
GetCSP
(
const
nsIPolicyContainer
*
aPolicyContainer
)
;
nsIIntegrityPolicy
*
IntegrityPolicy
(
)
const
;
void
SetIntegrityPolicy
(
nsIIntegrityPolicy
*
aPolicy
)
;
static
nsIIntegrityPolicy
*
GetIntegrityPolicy
(
const
nsIPolicyContainer
*
aPolicyContainer
)
;
private
:
nsCOMPtr
<
nsIContentSecurityPolicy
>
mCSP
;
nsCOMPtr
<
nsIIntegrityPolicy
>
mIntegrityPolicy
;
protected
:
virtual
~
PolicyContainer
(
)
;
}
;
#
endif
