#
ifndef
mozilla_dom_ContentVerifier_h
#
define
mozilla_dom_ContentVerifier_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsNSSShutDown
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
class
ContentVerifier
:
public
nsIStreamListener
public
nsNSSShutDownObject
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
explicit
ContentVerifier
(
nsIStreamListener
*
aMediatedListener
nsISupports
*
aMediatedContext
)
:
mNextListener
(
aMediatedListener
)
mContext
(
aMediatedContext
)
mCx
(
nullptr
)
{
}
nsresult
Init
(
const
nsAString
&
aContentSignatureHeader
)
;
virtual
void
virtualDestroyNSSReference
(
)
override
{
destructorSafeDestroyNSSReference
(
)
;
}
protected
:
virtual
~
ContentVerifier
(
)
{
nsNSSShutDownPreventionLock
locker
;
if
(
isAlreadyShutDown
(
)
)
{
return
;
}
destructorSafeDestroyNSSReference
(
)
;
shutdown
(
calledFromObject
)
;
}
void
destructorSafeDestroyNSSReference
(
)
{
mCx
=
nullptr
;
}
private
:
nsresult
ParseContentSignatureHeader
(
const
nsAString
&
aContentSignatureHeader
)
;
nsresult
GetVerificationKey
(
const
nsAString
&
aKeyId
)
;
nsresult
ParseInput
(
mozilla
:
:
ScopedSECKEYPublicKey
&
aPublicKeyOut
mozilla
:
:
ScopedSECItem
&
aSignatureItemOut
SECOidTag
&
aOidOut
const
nsNSSShutDownPreventionLock
&
)
;
nsresult
CreateContext
(
)
;
nsresult
Update
(
const
nsACString
&
aData
)
;
nsresult
End
(
bool
*
_retval
)
;
nsCOMPtr
<
nsIStreamListener
>
mNextListener
;
nsCOMPtr
<
nsISupports
>
mContext
;
mozilla
:
:
UniqueVFYContext
mCx
;
FallibleTArray
<
nsCString
>
mContent
;
nsCString
mSignature
;
nsCString
mKey
;
nsString
mVks
;
}
;
#
endif
