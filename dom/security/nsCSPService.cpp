#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsCSPService
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsAsyncRedirectVerifyHelper
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsContentPolicyUtils
.
h
"
using
namespace
mozilla
;
bool
CSPService
:
:
sCSPEnabled
=
true
;
static
LazyLogModule
gCspPRLog
(
"
CSP
"
)
;
CSPService
:
:
CSPService
(
)
{
Preferences
:
:
AddBoolVarCache
(
&
sCSPEnabled
"
security
.
csp
.
enable
"
)
;
}
CSPService
:
:
~
CSPService
(
)
{
mAppStatusCache
.
Clear
(
)
;
}
NS_IMPL_ISUPPORTS
(
CSPService
nsIContentPolicy
nsIChannelEventSink
)
bool
subjectToCSP
(
nsIURI
*
aURI
nsContentPolicyType
aContentType
)
{
nsContentPolicyType
contentType
=
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
aContentType
)
;
if
(
contentType
=
=
nsIContentPolicy
:
:
TYPE_CSP_REPORT
|
|
contentType
=
=
nsIContentPolicy
:
:
TYPE_REFRESH
|
|
contentType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
return
false
;
}
bool
match
=
false
;
nsresult
rv
=
aURI
-
>
SchemeIs
(
"
data
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
true
;
}
rv
=
aURI
-
>
SchemeIs
(
"
blob
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
true
;
}
rv
=
aURI
-
>
SchemeIs
(
"
filesystem
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
true
;
}
rv
=
aURI
-
>
SchemeIs
(
"
about
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
false
;
}
rv
=
aURI
-
>
SchemeIs
(
"
javascript
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
false
;
}
bool
isImgOrStyle
=
contentType
=
=
nsIContentPolicy
:
:
TYPE_IMAGE
|
|
contentType
=
=
nsIContentPolicy
:
:
TYPE_STYLESHEET
;
rv
=
aURI
-
>
SchemeIs
(
"
resource
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
&
&
!
isImgOrStyle
)
{
return
true
;
}
rv
=
aURI
-
>
SchemeIs
(
"
chrome
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
&
&
!
isImgOrStyle
)
{
return
true
;
}
rv
=
aURI
-
>
SchemeIs
(
"
moz
-
icon
"
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
true
;
}
rv
=
NS_URIChainHasFlags
(
aURI
nsIProtocolHandler
:
:
URI_IS_LOCAL_RESOURCE
&
match
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
match
)
{
return
false
;
}
return
true
;
}
NS_IMETHODIMP
CSPService
:
:
ShouldLoad
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
const
nsACString
&
aMimeTypeGuess
int16_t
*
aDecision
)
{
if
(
!
aContentLocation
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
aContentType
=
aLoadInfo
-
>
InternalContentPolicyType
(
)
;
nsCOMPtr
<
nsISupports
>
aRequestContext
=
aLoadInfo
-
>
GetLoadingContext
(
)
;
nsCOMPtr
<
nsIPrincipal
>
aRequestPrincipal
=
aLoadInfo
-
>
TriggeringPrincipal
(
)
;
nsCOMPtr
<
nsIURI
>
aRequestOrigin
;
nsCOMPtr
<
nsIPrincipal
>
loadingPrincipal
=
aLoadInfo
-
>
LoadingPrincipal
(
)
;
if
(
loadingPrincipal
)
{
loadingPrincipal
-
>
GetURI
(
getter_AddRefs
(
aRequestOrigin
)
)
;
}
if
(
MOZ_LOG_TEST
(
gCspPRLog
LogLevel
:
:
Debug
)
)
{
MOZ_LOG
(
gCspPRLog
LogLevel
:
:
Debug
(
"
CSPService
:
:
ShouldLoad
called
for
%
s
"
aContentLocation
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
)
;
}
*
aDecision
=
nsIContentPolicy
:
:
ACCEPT
;
if
(
!
sCSPEnabled
|
|
!
subjectToCSP
(
aContentLocation
aContentType
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsINode
>
node
(
do_QueryInterface
(
aRequestContext
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
if
(
!
node
|
|
(
aRequestPrincipal
&
&
BasePrincipal
:
:
Cast
(
aRequestPrincipal
)
-
>
OverridesCSP
(
node
-
>
NodePrincipal
(
)
)
)
)
{
principal
=
aRequestPrincipal
;
}
else
{
principal
=
node
-
>
NodePrincipal
(
)
;
}
if
(
!
principal
)
{
return
NS_OK
;
}
nsresult
rv
=
NS_OK
;
bool
isPreload
=
nsContentUtils
:
:
IsPreloadType
(
aContentType
)
;
if
(
isPreload
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
preloadCsp
;
rv
=
principal
-
>
GetPreloadCsp
(
getter_AddRefs
(
preloadCsp
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
preloadCsp
)
{
rv
=
preloadCsp
-
>
ShouldLoad
(
aContentType
aContentLocation
aRequestOrigin
aRequestContext
aMimeTypeGuess
nullptr
aDecision
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
NS_CP_REJECTED
(
*
aDecision
)
)
{
return
NS_OK
;
}
}
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
rv
=
principal
-
>
GetCsp
(
getter_AddRefs
(
csp
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
csp
)
{
rv
=
csp
-
>
ShouldLoad
(
aContentType
aContentLocation
aRequestOrigin
aRequestContext
aMimeTypeGuess
nullptr
aDecision
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
CSPService
:
:
ShouldProcess
(
nsIURI
*
aContentLocation
nsILoadInfo
*
aLoadInfo
const
nsACString
&
aMimeTypeGuess
int16_t
*
aDecision
)
{
if
(
!
aContentLocation
)
{
return
NS_ERROR_FAILURE
;
}
uint32_t
aContentType
=
aLoadInfo
-
>
InternalContentPolicyType
(
)
;
if
(
MOZ_LOG_TEST
(
gCspPRLog
LogLevel
:
:
Debug
)
)
{
MOZ_LOG
(
gCspPRLog
LogLevel
:
:
Debug
(
"
CSPService
:
:
ShouldProcess
called
for
%
s
"
aContentLocation
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
)
;
}
uint32_t
policyType
=
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
aContentType
)
;
if
(
policyType
!
=
nsIContentPolicy
:
:
TYPE_OBJECT
)
{
*
aDecision
=
nsIContentPolicy
:
:
ACCEPT
;
return
NS_OK
;
}
return
ShouldLoad
(
aContentLocation
aLoadInfo
aMimeTypeGuess
aDecision
)
;
}
NS_IMETHODIMP
CSPService
:
:
AsyncOnChannelRedirect
(
nsIChannel
*
oldChannel
nsIChannel
*
newChannel
uint32_t
flags
nsIAsyncVerifyRedirectCallback
*
callback
)
{
net
:
:
nsAsyncRedirectAutoCallback
autoCallback
(
callback
)
;
nsCOMPtr
<
nsIURI
>
newUri
;
nsresult
rv
=
newChannel
-
>
GetURI
(
getter_AddRefs
(
newUri
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
oldChannel
-
>
GetLoadInfo
(
)
;
if
(
!
loadInfo
)
{
return
NS_OK
;
}
nsContentPolicyType
policyType
=
loadInfo
-
>
InternalContentPolicyType
(
)
;
if
(
!
sCSPEnabled
|
|
!
subjectToCSP
(
newUri
policyType
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIURI
>
originalUri
;
rv
=
oldChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
originalUri
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
autoCallback
.
DontCallback
(
)
;
oldChannel
-
>
Cancel
(
NS_ERROR_DOM_BAD_URI
)
;
return
rv
;
}
bool
isPreload
=
nsContentUtils
:
:
IsPreloadType
(
policyType
)
;
policyType
=
nsContentUtils
:
:
InternalContentPolicyTypeToExternalOrWorker
(
policyType
)
;
int16_t
aDecision
=
nsIContentPolicy
:
:
ACCEPT
;
if
(
isPreload
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
preloadCsp
;
loadInfo
-
>
LoadingPrincipal
(
)
-
>
GetPreloadCsp
(
getter_AddRefs
(
preloadCsp
)
)
;
if
(
preloadCsp
)
{
preloadCsp
-
>
ShouldLoad
(
policyType
newUri
nullptr
nullptr
EmptyCString
(
)
originalUri
&
aDecision
)
;
if
(
NS_CP_REJECTED
(
aDecision
)
)
{
autoCallback
.
DontCallback
(
)
;
oldChannel
-
>
Cancel
(
NS_ERROR_DOM_BAD_URI
)
;
return
NS_BINDING_FAILED
;
}
}
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
loadInfo
-
>
LoadingPrincipal
(
)
-
>
GetCsp
(
getter_AddRefs
(
csp
)
)
;
if
(
csp
)
{
csp
-
>
ShouldLoad
(
policyType
newUri
nullptr
nullptr
EmptyCString
(
)
originalUri
&
aDecision
)
;
}
if
(
!
NS_CP_ACCEPTED
(
aDecision
)
)
{
autoCallback
.
DontCallback
(
)
;
oldChannel
-
>
Cancel
(
NS_ERROR_DOM_BAD_URI
)
;
return
NS_BINDING_FAILED
;
}
return
NS_OK
;
}
