#
include
"
nsContentSecurityUtils
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIMultiPartChannel
.
h
"
#
include
"
nsIURI
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
WinUtils
.
h
"
#
include
<
wininet
.
h
>
#
endif
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
StaticPrefs_extensions
.
h
"
nsresult
RegexEval
(
const
nsAString
&
aPattern
const
nsAString
&
aString
bool
aOnlyMatch
bool
&
aMatchResult
nsTArray
<
nsString
>
*
aRegexResults
=
nullptr
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
aMatchResult
=
false
;
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
AutoDisableJSInterruptCallback
disabler
(
cx
)
;
JSAutoRealm
ar
(
cx
xpc
:
:
UnprivilegedJunkScope
(
)
)
;
JS
:
:
RootedObject
regexp
(
cx
JS
:
:
NewUCRegExpObject
(
cx
aPattern
.
BeginReading
(
)
aPattern
.
Length
(
)
JS
:
:
RegExpFlag
:
:
Unicode
)
)
;
if
(
!
regexp
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
JS
:
:
RootedValue
regexResult
(
cx
JS
:
:
NullValue
(
)
)
;
size_t
index
=
0
;
if
(
!
JS
:
:
ExecuteRegExpNoStatics
(
cx
regexp
aString
.
BeginReading
(
)
aString
.
Length
(
)
&
index
aOnlyMatch
&
regexResult
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
regexResult
.
isNull
(
)
)
{
return
NS_OK
;
}
if
(
aOnlyMatch
)
{
MOZ_ASSERT
(
regexResult
.
isBoolean
(
)
&
&
regexResult
.
toBoolean
(
)
)
;
aMatchResult
=
true
;
return
NS_OK
;
}
if
(
aRegexResults
=
=
nullptr
)
{
return
NS_ERROR_INVALID_ARG
;
}
uint32_t
length
;
JS
:
:
RootedObject
regexResultObj
(
cx
&
regexResult
.
toObject
(
)
)
;
if
(
!
JS_GetArrayLength
(
cx
regexResultObj
&
length
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Verbose
(
"
Regex
Matched
%
i
strings
"
length
)
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
i
+
+
)
{
JS
:
:
RootedValue
element
(
cx
)
;
if
(
!
JS_GetElement
(
cx
regexResultObj
i
&
element
)
)
{
return
NS_ERROR_NO_CONTENT
;
}
nsAutoJSString
value
;
if
(
!
value
.
init
(
cx
element
)
)
{
return
NS_ERROR_NO_CONTENT
;
}
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Verbose
(
"
Regex
Matching
:
%
i
:
%
s
"
i
NS_ConvertUTF16toUTF8
(
value
)
.
get
(
)
)
)
;
aRegexResults
-
>
AppendElement
(
value
)
;
}
aMatchResult
=
true
;
return
NS_OK
;
}
nsString
OptimizeFileName
(
const
nsAString
&
aFileName
)
{
nsString
optimizedName
(
aFileName
)
;
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Verbose
(
"
Optimizing
FileName
:
%
s
"
NS_ConvertUTF16toUTF8
(
optimizedName
)
.
get
(
)
)
)
;
optimizedName
.
ReplaceSubstring
(
NS_LITERAL_STRING
(
"
.
xpi
!
"
)
NS_LITERAL_STRING
(
"
!
"
)
)
;
optimizedName
.
ReplaceSubstring
(
NS_LITERAL_STRING
(
"
shield
.
mozilla
.
org
!
"
)
NS_LITERAL_STRING
(
"
s
!
"
)
)
;
optimizedName
.
ReplaceSubstring
(
NS_LITERAL_STRING
(
"
mozilla
.
org
!
"
)
NS_LITERAL_STRING
(
"
m
!
"
)
)
;
if
(
optimizedName
.
Length
(
)
>
80
)
{
optimizedName
.
Truncate
(
80
)
;
}
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Verbose
(
"
Optimized
FileName
:
%
s
"
NS_ConvertUTF16toUTF8
(
optimizedName
)
.
get
(
)
)
)
;
return
optimizedName
;
}
FilenameTypeAndDetails
nsContentSecurityUtils
:
:
FilenameToFilenameType
(
const
nsString
&
fileName
)
{
static
NS_NAMED_LITERAL_CSTRING
(
kChromeURI
"
chromeuri
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kResourceURI
"
resourceuri
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kBlobUri
"
bloburi
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kDataUri
"
dataurl
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kSingleString
"
singlestring
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kMozillaExtension
"
mozillaextension
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kOtherExtension
"
otherextension
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kSuspectedUserChromeJS
"
suspectedUserChromeJS
"
)
;
#
if
defined
(
XP_WIN
)
static
NS_NAMED_LITERAL_CSTRING
(
kSanitizedWindowsURL
"
sanitizedWindowsURL
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kSanitizedWindowsPath
"
sanitizedWindowsPath
"
)
;
#
endif
static
NS_NAMED_LITERAL_CSTRING
(
kOther
"
other
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kOtherWorker
"
other
-
on
-
worker
"
)
;
static
NS_NAMED_LITERAL_CSTRING
(
kRegexFailure
"
regexfailure
"
)
;
static
NS_NAMED_LITERAL_STRING
(
kUCJSRegex
"
(
.
+
)
.
uc
.
js
\
\
?
*
[
0
-
9
]
*
"
)
;
static
NS_NAMED_LITERAL_STRING
(
kExtensionRegex
"
extensions
/
(
.
+
)
(
.
+
)
!
(
.
+
)
"
)
;
static
NS_NAMED_LITERAL_STRING
(
kSingleFileRegex
"
^
[
a
-
zA
-
Z0
-
9
.
?
]
+
"
)
;
if
(
StringBeginsWith
(
fileName
NS_LITERAL_STRING
(
"
chrome
:
/
/
"
)
)
)
{
return
FilenameTypeAndDetails
(
kChromeURI
Some
(
fileName
)
)
;
}
if
(
StringBeginsWith
(
fileName
NS_LITERAL_STRING
(
"
resource
:
/
/
"
)
)
)
{
return
FilenameTypeAndDetails
(
kResourceURI
Some
(
fileName
)
)
;
}
if
(
StringBeginsWith
(
fileName
NS_LITERAL_STRING
(
"
blob
:
"
)
)
)
{
return
FilenameTypeAndDetails
(
kBlobUri
Nothing
(
)
)
;
}
if
(
StringBeginsWith
(
fileName
NS_LITERAL_STRING
(
"
data
:
"
)
)
)
{
return
FilenameTypeAndDetails
(
kDataUri
Nothing
(
)
)
;
}
if
(
!
NS_IsMainThread
(
)
)
{
return
FilenameTypeAndDetails
(
kOtherWorker
Nothing
(
)
)
;
}
bool
regexMatch
;
nsTArray
<
nsString
>
regexResults
;
nsresult
rv
=
RegexEval
(
kExtensionRegex
fileName
false
regexMatch
&
regexResults
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
FilenameTypeAndDetails
(
kRegexFailure
Nothing
(
)
)
;
}
if
(
regexMatch
)
{
nsCString
type
=
StringEndsWith
(
regexResults
[
2
]
NS_LITERAL_STRING
(
"
mozilla
.
org
.
xpi
"
)
)
?
kMozillaExtension
:
kOtherExtension
;
auto
&
extensionNameAndPath
=
Substring
(
regexResults
[
0
]
ArrayLength
(
"
extensions
/
"
)
-
1
)
;
return
FilenameTypeAndDetails
(
type
Some
(
OptimizeFileName
(
extensionNameAndPath
)
)
)
;
}
rv
=
RegexEval
(
kSingleFileRegex
fileName
true
regexMatch
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
FilenameTypeAndDetails
(
kRegexFailure
Nothing
(
)
)
;
}
if
(
regexMatch
)
{
return
FilenameTypeAndDetails
(
kSingleString
Some
(
fileName
)
)
;
}
rv
=
RegexEval
(
kUCJSRegex
fileName
true
regexMatch
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
FilenameTypeAndDetails
(
kRegexFailure
Nothing
(
)
)
;
}
if
(
regexMatch
)
{
return
FilenameTypeAndDetails
(
kSuspectedUserChromeJS
Nothing
(
)
)
;
}
#
if
defined
(
XP_WIN
)
auto
flags
=
mozilla
:
:
widget
:
:
WinUtils
:
:
PathTransformFlags
:
:
Default
|
mozilla
:
:
widget
:
:
WinUtils
:
:
PathTransformFlags
:
:
RequireFilePath
;
nsAutoString
strSanitizedPath
(
fileName
)
;
if
(
widget
:
:
WinUtils
:
:
PreparePathForTelemetry
(
strSanitizedPath
flags
)
)
{
DWORD
cchDecodedUrl
=
INTERNET_MAX_URL_LENGTH
;
WCHAR
szOut
[
INTERNET_MAX_URL_LENGTH
]
;
HRESULT
hr
=
:
:
CoInternetParseUrl
(
fileName
.
get
(
)
PARSE_SCHEMA
0
szOut
INTERNET_MAX_URL_LENGTH
&
cchDecodedUrl
0
)
;
if
(
hr
=
=
S_OK
&
&
cchDecodedUrl
)
{
nsAutoString
sanitizedPathAndScheme
;
sanitizedPathAndScheme
.
Append
(
szOut
)
;
if
(
sanitizedPathAndScheme
=
=
NS_LITERAL_STRING
(
"
file
"
)
)
{
sanitizedPathAndScheme
.
Append
(
NS_LITERAL_STRING
(
"
:
/
/
.
.
.
/
"
)
)
;
sanitizedPathAndScheme
.
Append
(
strSanitizedPath
)
;
}
return
FilenameTypeAndDetails
(
kSanitizedWindowsURL
Some
(
sanitizedPathAndScheme
)
)
;
}
else
{
return
FilenameTypeAndDetails
(
kSanitizedWindowsPath
Some
(
strSanitizedPath
)
)
;
}
}
#
endif
return
FilenameTypeAndDetails
(
kOther
Nothing
(
)
)
;
}
class
EvalUsageNotificationRunnable
final
:
public
Runnable
{
public
:
EvalUsageNotificationRunnable
(
bool
aIsSystemPrincipal
NS_ConvertUTF8toUTF16
&
aFileNameA
uint64_t
aWindowID
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
Runnable
(
"
EvalUsageNotificationRunnable
"
)
mIsSystemPrincipal
(
aIsSystemPrincipal
)
mFileNameA
(
aFileNameA
)
mWindowID
(
aWindowID
)
mLineNumber
(
aLineNumber
)
mColumnNumber
(
aColumnNumber
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsContentSecurityUtils
:
:
NotifyEvalUsage
(
mIsSystemPrincipal
mFileNameA
mWindowID
mLineNumber
mColumnNumber
)
;
return
NS_OK
;
}
void
Revoke
(
)
{
}
private
:
bool
mIsSystemPrincipal
;
NS_ConvertUTF8toUTF16
mFileNameA
;
uint64_t
mWindowID
;
uint32_t
mLineNumber
;
uint32_t
mColumnNumber
;
}
;
bool
nsContentSecurityUtils
:
:
IsEvalAllowed
(
JSContext
*
cx
bool
aIsSystemPrincipal
const
nsAString
&
aScript
)
{
static
nsLiteralCString
evalAllowlist
[
]
=
{
NS_LITERAL_CSTRING
(
"
resource
:
/
/
testing
-
common
/
sinon
-
7
.
2
.
7
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
testing
-
common
/
ajv
-
4
.
1
.
1
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
testing
-
common
/
content
-
task
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
/
modules
/
translation
/
cld
-
worker
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
)
NS_LITERAL_CSTRING
(
"
debugger
"
)
}
;
static
NS_NAMED_LITERAL_STRING
(
sAllowedEval1
"
this
"
)
;
static
NS_NAMED_LITERAL_STRING
(
sAllowedEval2
"
function
anonymous
(
\
n
)
{
\
nreturn
this
\
n
}
"
)
;
if
(
MOZ_LIKELY
(
!
aIsSystemPrincipal
&
&
!
XRE_IsE10sParentProcess
(
)
)
)
{
return
true
;
}
if
(
aIsSystemPrincipal
&
&
StaticPrefs
:
:
security_allow_eval_with_system_principal
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
with
System
Principal
because
allowing
pref
is
"
"
enabled
"
)
)
;
return
true
;
}
if
(
XRE_IsE10sParentProcess
(
)
&
&
StaticPrefs
:
:
security_allow_eval_in_parent_process
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
in
parent
process
because
allowing
pref
is
"
"
enabled
"
)
)
;
return
true
;
}
if
(
NS_IsMainThread
(
)
)
{
nsAutoString
jsConfigPref
;
Preferences
:
:
GetString
(
"
general
.
config
.
filename
"
jsConfigPref
)
;
if
(
!
jsConfigPref
.
IsEmpty
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
%
s
because
of
"
"
general
.
config
.
filename
"
(
aIsSystemPrincipal
?
"
with
System
Principal
"
:
"
in
parent
process
"
)
)
)
;
return
true
;
}
}
if
(
XRE_IsE10sParentProcess
(
)
&
&
!
StaticPrefs
:
:
extensions_webextensions_remote
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
in
parent
process
because
the
web
extension
"
"
process
is
disabled
"
)
)
;
return
true
;
}
if
(
!
aScript
.
IsEmpty
(
)
&
&
(
aScript
=
=
sAllowedEval1
|
|
aScript
=
=
sAllowedEval2
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
%
s
because
a
key
string
is
"
"
provided
"
(
aIsSystemPrincipal
?
"
with
System
Principal
"
:
"
in
parent
process
"
)
)
)
;
return
true
;
}
nsAutoCString
fileName
;
uint32_t
lineNumber
=
0
columnNumber
=
0
;
JS
:
:
AutoFilename
rawScriptFilename
;
if
(
JS
:
:
DescribeScriptedCaller
(
cx
&
rawScriptFilename
&
lineNumber
&
columnNumber
)
)
{
nsDependentCSubstring
fileName_
(
rawScriptFilename
.
get
(
)
strlen
(
rawScriptFilename
.
get
(
)
)
)
;
ToLowerCase
(
fileName_
)
;
int32_t
fileNameIndex
=
fileName_
.
FindChar
(
'
'
)
;
if
(
fileNameIndex
!
=
-
1
)
{
fileName_
.
SetLength
(
fileNameIndex
)
;
}
fileName
=
std
:
:
move
(
fileName_
)
;
}
else
{
fileName
=
NS_LITERAL_CSTRING
(
"
unknown
-
file
"
)
;
}
NS_ConvertUTF8toUTF16
fileNameA
(
fileName
)
;
for
(
const
nsLiteralCString
&
allowlistEntry
:
evalAllowlist
)
{
if
(
fileName
.
Equals
(
allowlistEntry
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
eval
(
)
%
s
because
the
containing
"
"
file
is
in
the
allowlist
"
(
aIsSystemPrincipal
?
"
with
System
Principal
"
:
"
in
parent
process
"
)
)
)
;
return
true
;
}
}
uint64_t
windowID
=
nsJSUtils
:
:
GetCurrentlyRunningCodeInnerWindowID
(
cx
)
;
if
(
NS_IsMainThread
(
)
)
{
nsContentSecurityUtils
:
:
NotifyEvalUsage
(
aIsSystemPrincipal
fileNameA
windowID
lineNumber
columnNumber
)
;
}
else
{
auto
runnable
=
new
EvalUsageNotificationRunnable
(
aIsSystemPrincipal
fileNameA
windowID
lineNumber
columnNumber
)
;
NS_DispatchToMainThread
(
runnable
)
;
}
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Warning
(
"
Blocking
eval
(
)
%
s
from
file
%
s
and
script
"
"
provided
%
s
"
(
aIsSystemPrincipal
?
"
with
System
Principal
"
:
"
in
parent
process
"
)
fileName
.
get
(
)
NS_ConvertUTF16toUTF8
(
aScript
)
.
get
(
)
)
)
;
#
ifdef
DEBUG
MOZ_CRASH_UNSAFE_PRINTF
(
"
Blocking
eval
(
)
%
s
from
file
%
s
and
script
provided
"
"
%
s
"
(
aIsSystemPrincipal
?
"
with
System
Principal
"
:
"
in
parent
process
"
)
fileName
.
get
(
)
NS_ConvertUTF16toUTF8
(
aScript
)
.
get
(
)
)
;
#
endif
#
if
defined
(
RELEASE_OR_BETA
)
&
&
!
defined
(
EARLY_BETA_OR_EARLIER
)
return
false
;
#
else
return
true
;
#
endif
}
void
nsContentSecurityUtils
:
:
NotifyEvalUsage
(
bool
aIsSystemPrincipal
NS_ConvertUTF8toUTF16
&
aFileNameA
uint64_t
aWindowID
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
{
Telemetry
:
:
EventID
eventType
=
aIsSystemPrincipal
?
Telemetry
:
:
EventID
:
:
Security_Evalusage_Systemcontext
:
Telemetry
:
:
EventID
:
:
Security_Evalusage_Parentprocess
;
FilenameTypeAndDetails
fileNameTypeAndDetails
=
FilenameToFilenameType
(
aFileNameA
)
;
mozilla
:
:
Maybe
<
nsTArray
<
EventExtraEntry
>
>
extra
;
if
(
fileNameTypeAndDetails
.
second
(
)
.
isSome
(
)
)
{
extra
=
Some
<
nsTArray
<
EventExtraEntry
>
>
(
{
EventExtraEntry
{
NS_LITERAL_CSTRING
(
"
fileinfo
"
)
NS_ConvertUTF16toUTF8
(
fileNameTypeAndDetails
.
second
(
)
.
value
(
)
)
}
}
)
;
}
else
{
extra
=
Nothing
(
)
;
}
if
(
!
sTelemetryEventEnabled
.
exchange
(
true
)
)
{
sTelemetryEventEnabled
=
true
;
Telemetry
:
:
SetEventRecordingEnabled
(
NS_LITERAL_CSTRING
(
"
security
"
)
true
)
;
}
Telemetry
:
:
RecordEvent
(
eventType
mozilla
:
:
Some
(
fileNameTypeAndDetails
.
first
(
)
)
extra
)
;
nsCOMPtr
<
nsIConsoleService
>
console
(
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
)
;
if
(
!
console
)
{
return
;
}
nsCOMPtr
<
nsIScriptError
>
error
(
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
)
;
if
(
!
error
)
{
return
;
}
nsCOMPtr
<
nsIStringBundle
>
bundle
;
nsCOMPtr
<
nsIStringBundleService
>
stringService
=
mozilla
:
:
services
:
:
GetStringBundleService
(
)
;
if
(
!
stringService
)
{
return
;
}
stringService
-
>
CreateBundle
(
"
chrome
:
/
/
global
/
locale
/
security
/
security
.
properties
"
getter_AddRefs
(
bundle
)
)
;
if
(
!
bundle
)
{
return
;
}
nsAutoString
message
;
AutoTArray
<
nsString
1
>
formatStrings
=
{
aFileNameA
}
;
nsresult
rv
=
bundle
-
>
FormatStringFromName
(
"
RestrictBrowserEvalUsage
"
formatStrings
message
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
rv
=
error
-
>
InitWithWindowID
(
message
aFileNameA
EmptyString
(
)
aLineNumber
aColumnNumber
nsIScriptError
:
:
errorFlag
"
BrowserEvalUsage
"
aWindowID
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
console
-
>
LogMessage
(
error
)
;
}
nsresult
nsContentSecurityUtils
:
:
GetHttpChannelFromPotentialMultiPart
(
nsIChannel
*
aChannel
nsIHttpChannel
*
*
aHttpChannel
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
httpChannel
)
{
httpChannel
.
forget
(
aHttpChannel
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIMultiPartChannel
>
multipart
=
do_QueryInterface
(
aChannel
)
;
if
(
!
multipart
)
{
*
aHttpChannel
=
nullptr
;
return
NS_OK
;
}
nsCOMPtr
<
nsIChannel
>
baseChannel
;
nsresult
rv
=
multipart
-
>
GetBaseChannel
(
getter_AddRefs
(
baseChannel
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
httpChannel
=
do_QueryInterface
(
baseChannel
)
;
httpChannel
.
forget
(
aHttpChannel
)
;
return
NS_OK
;
}
#
if
defined
(
DEBUG
)
void
nsContentSecurityUtils
:
:
AssertAboutPageHasCSP
(
Document
*
aDocument
)
{
if
(
Preferences
:
:
GetBool
(
"
csp
.
skip_about_page_has_csp_assert
"
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
documentURI
=
aDocument
-
>
GetDocumentURI
(
)
;
if
(
!
documentURI
-
>
SchemeIs
(
"
about
"
)
)
{
return
;
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
aDocument
-
>
GetCsp
(
)
;
bool
foundDefaultSrc
=
false
;
bool
foundObjectSrc
=
false
;
bool
foundUnsafeEval
=
false
;
bool
foundUnsafeInline
=
false
;
if
(
csp
)
{
uint32_t
policyCount
=
0
;
csp
-
>
GetPolicyCount
(
&
policyCount
)
;
nsAutoString
parsedPolicyStr
;
for
(
uint32_t
i
=
0
;
i
<
policyCount
;
+
+
i
)
{
csp
-
>
GetPolicyString
(
i
parsedPolicyStr
)
;
if
(
parsedPolicyStr
.
Find
(
"
default
-
src
"
)
>
=
0
)
{
foundDefaultSrc
=
true
;
}
if
(
parsedPolicyStr
.
Find
(
"
object
-
src
'
none
'
"
)
>
=
0
)
{
foundObjectSrc
=
true
;
}
if
(
parsedPolicyStr
.
Find
(
"
'
unsafe
-
eval
'
"
)
>
=
0
)
{
foundUnsafeEval
=
true
;
}
if
(
parsedPolicyStr
.
Find
(
"
'
unsafe
-
inline
'
"
)
>
=
0
)
{
foundUnsafeInline
=
true
;
}
}
}
if
(
Preferences
:
:
GetBool
(
"
csp
.
skip_about_page_csp_allowlist_and_assert
"
)
)
{
NS_ASSERTION
(
foundDefaultSrc
"
about
:
page
must
have
a
CSP
"
)
;
return
;
}
nsAutoCString
aboutSpec
;
documentURI
-
>
GetSpec
(
aboutSpec
)
;
ToLowerCase
(
aboutSpec
)
;
static
nsLiteralCString
sAllowedAboutPagesWithNoCSP
[
]
=
{
NS_LITERAL_CSTRING
(
"
about
:
blank
"
)
NS_LITERAL_CSTRING
(
"
about
:
srcdoc
"
)
NS_LITERAL_CSTRING
(
"
about
:
sync
-
log
"
)
NS_LITERAL_CSTRING
(
"
about
:
printpreview
"
)
NS_LITERAL_CSTRING
(
"
about
:
logo
"
)
#
if
defined
(
ANDROID
)
NS_LITERAL_CSTRING
(
"
about
:
config
"
)
#
endif
}
;
for
(
const
nsLiteralCString
&
allowlistEntry
:
sAllowedAboutPagesWithNoCSP
)
{
if
(
StringBeginsWith
(
aboutSpec
allowlistEntry
)
)
{
return
;
}
}
MOZ_ASSERT
(
foundDefaultSrc
"
about
:
page
must
contain
a
CSP
including
default
-
src
"
)
;
MOZ_ASSERT
(
foundObjectSrc
"
about
:
page
must
contain
a
CSP
denying
object
-
src
"
)
;
if
(
aDocument
-
>
IsExtensionPage
(
)
)
{
return
;
}
MOZ_ASSERT
(
!
foundUnsafeEval
"
about
:
page
must
not
contain
a
CSP
including
'
unsafe
-
eval
'
"
)
;
static
nsLiteralCString
sLegacyUnsafeInlineAllowList
[
]
=
{
NS_LITERAL_CSTRING
(
"
about
:
preferences
"
)
NS_LITERAL_CSTRING
(
"
about
:
addons
"
)
NS_LITERAL_CSTRING
(
"
about
:
newtab
"
)
NS_LITERAL_CSTRING
(
"
about
:
welcome
"
)
NS_LITERAL_CSTRING
(
"
about
:
home
"
)
}
;
for
(
const
nsLiteralCString
&
aUnsafeInlineEntry
:
sLegacyUnsafeInlineAllowList
)
{
if
(
StringBeginsWith
(
aboutSpec
aUnsafeInlineEntry
)
)
{
return
;
}
}
MOZ_ASSERT
(
!
foundUnsafeInline
"
about
:
page
must
not
contain
a
CSP
including
'
unsafe
-
inline
'
"
)
;
}
#
endif
bool
nsContentSecurityUtils
:
:
ValidateScriptFilename
(
const
char
*
aFilename
bool
aIsSystemRealm
)
{
if
(
StaticPrefs
:
:
security_allow_parent_unrestricted_js_loads
(
)
)
{
return
true
;
}
if
(
!
XRE_IsE10sParentProcess
(
)
)
{
return
true
;
}
if
(
NS_IsMainThread
(
)
)
{
nsAutoString
jsConfigPref
;
Preferences
:
:
GetString
(
"
general
.
config
.
filename
"
jsConfigPref
)
;
if
(
!
jsConfigPref
.
IsEmpty
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
a
javascript
load
of
%
s
because
"
"
general
.
config
.
filename
is
set
"
aFilename
)
)
;
return
true
;
}
}
if
(
XRE_IsE10sParentProcess
(
)
&
&
!
StaticPrefs
:
:
extensions_webextensions_remote
(
)
)
{
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Debug
(
"
Allowing
a
javascript
load
of
%
s
because
the
web
extension
"
"
process
is
disabled
.
"
aFilename
)
)
;
return
true
;
}
NS_ConvertUTF8toUTF16
filenameU
(
aFilename
)
;
if
(
StringBeginsWith
(
filenameU
NS_LITERAL_STRING
(
"
chrome
:
/
/
"
)
)
)
{
return
true
;
}
if
(
StringBeginsWith
(
filenameU
NS_LITERAL_STRING
(
"
resource
:
/
/
"
)
)
)
{
return
true
;
}
if
(
StringBeginsWith
(
filenameU
NS_LITERAL_STRING
(
"
file
:
/
/
"
)
)
)
{
return
true
;
}
if
(
StringBeginsWith
(
filenameU
NS_LITERAL_STRING
(
"
jar
:
file
:
/
/
"
)
)
)
{
return
true
;
}
MOZ_LOG
(
sCSMLog
LogLevel
:
:
Info
(
"
ValidateScriptFilename
System
:
%
i
%
s
\
n
"
(
aIsSystemRealm
?
1
:
0
)
aFilename
)
)
;
FilenameTypeAndDetails
fileNameTypeAndDetails
=
FilenameToFilenameType
(
filenameU
)
;
Telemetry
:
:
EventID
eventType
=
Telemetry
:
:
EventID
:
:
Security_Javascriptload_Parentprocess
;
mozilla
:
:
Maybe
<
nsTArray
<
EventExtraEntry
>
>
extra
;
if
(
fileNameTypeAndDetails
.
second
(
)
.
isSome
(
)
)
{
extra
=
Some
<
nsTArray
<
EventExtraEntry
>
>
(
{
EventExtraEntry
{
NS_LITERAL_CSTRING
(
"
fileinfo
"
)
NS_ConvertUTF16toUTF8
(
fileNameTypeAndDetails
.
second
(
)
.
value
(
)
)
}
}
)
;
}
else
{
extra
=
Nothing
(
)
;
}
if
(
!
sTelemetryEventEnabled
.
exchange
(
true
)
)
{
sTelemetryEventEnabled
=
true
;
Telemetry
:
:
SetEventRecordingEnabled
(
NS_LITERAL_CSTRING
(
"
security
"
)
true
)
;
}
Telemetry
:
:
RecordEvent
(
eventType
mozilla
:
:
Some
(
fileNameTypeAndDetails
.
first
(
)
)
extra
)
;
return
true
;
}
