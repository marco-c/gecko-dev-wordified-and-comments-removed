#
include
"
nsContentSecurityUtils
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
if
defined
(
DEBUG
)
&
&
!
defined
(
ANDROID
)
void
nsContentSecurityUtils
:
:
AssertAboutPageHasCSP
(
Document
*
aDocument
)
{
nsCOMPtr
<
nsIURI
>
documentURI
=
aDocument
-
>
GetDocumentURI
(
)
;
if
(
!
documentURI
-
>
SchemeIs
(
"
about
"
)
|
|
Preferences
:
:
GetBool
(
"
csp
.
skip_about_page_has_csp_assert
"
)
)
{
return
;
}
static
StaticAutoPtr
<
nsTArray
<
nsCString
>
>
sLegacyAboutPagesWithNoCSP
;
if
(
!
sLegacyAboutPagesWithNoCSP
|
|
Preferences
:
:
GetBool
(
"
csp
.
overrule_about_uris_without_csp_whitelist
"
)
)
{
sLegacyAboutPagesWithNoCSP
=
new
nsTArray
<
nsCString
>
(
)
;
nsAutoCString
legacyAboutPages
;
Preferences
:
:
GetCString
(
"
csp
.
about_uris_without_csp
"
legacyAboutPages
)
;
for
(
const
nsACString
&
hostString
:
legacyAboutPages
.
Split
(
'
'
)
)
{
nsCString
aboutURI
;
aboutURI
.
AppendLiteral
(
"
about
:
"
)
;
aboutURI
.
Append
(
hostString
)
;
sLegacyAboutPagesWithNoCSP
-
>
AppendElement
(
aboutURI
)
;
}
ClearOnShutdown
(
&
sLegacyAboutPagesWithNoCSP
)
;
}
nsAutoCString
aboutSpec
;
documentURI
-
>
GetSpec
(
aboutSpec
)
;
ToLowerCase
(
aboutSpec
)
;
for
(
auto
&
legacyPageEntry
:
*
sLegacyAboutPagesWithNoCSP
)
{
if
(
aboutSpec
.
Find
(
legacyPageEntry
)
=
=
0
)
{
return
;
}
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
aDocument
-
>
GetCsp
(
)
;
bool
foundDefaultSrc
=
false
;
if
(
csp
)
{
uint32_t
policyCount
=
0
;
csp
-
>
GetPolicyCount
(
&
policyCount
)
;
nsAutoString
parsedPolicyStr
;
for
(
uint32_t
i
=
0
;
i
<
policyCount
;
+
+
i
)
{
csp
-
>
GetPolicyString
(
i
parsedPolicyStr
)
;
if
(
parsedPolicyStr
.
Find
(
"
default
-
src
"
)
>
=
0
)
{
foundDefaultSrc
=
true
;
break
;
}
}
}
if
(
Preferences
:
:
GetBool
(
"
csp
.
overrule_about_uris_without_csp_whitelist
"
)
)
{
NS_ASSERTION
(
foundDefaultSrc
"
about
:
page
must
have
a
CSP
"
)
;
return
;
}
MOZ_ASSERT
(
foundDefaultSrc
"
about
:
page
must
contain
a
CSP
including
default
-
src
"
)
;
}
#
endif
