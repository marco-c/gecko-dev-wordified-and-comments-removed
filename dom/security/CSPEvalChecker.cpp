#
include
"
mozilla
/
dom
/
CSPEvalChecker
.
h
"
#
include
"
mozilla
/
dom
/
WorkerPrivate
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRunnable
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsContentSecurityUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsJSUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
namespace
{
nsresult
CheckInternal
(
nsIContentSecurityPolicy
*
aCSP
nsICSPEventListener
*
aCSPEventListener
nsIPrincipal
*
aSubjectPrincipal
const
nsAString
&
aExpression
const
nsAString
&
aFileNameString
uint32_t
aLineNum
uint32_t
aColumnNum
bool
*
aAllowed
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aAllowed
)
;
*
aAllowed
=
false
;
#
if
!
defined
(
ANDROID
)
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
!
nsContentSecurityUtils
:
:
IsEvalAllowed
(
cx
aSubjectPrincipal
-
>
IsSystemPrincipal
(
)
aExpression
)
)
{
*
aAllowed
=
false
;
return
NS_OK
;
}
#
endif
if
(
!
aCSP
)
{
*
aAllowed
=
true
;
return
NS_OK
;
}
bool
reportViolation
=
false
;
nsresult
rv
=
aCSP
-
>
GetAllowsEval
(
&
reportViolation
aAllowed
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
*
aAllowed
=
false
;
return
rv
;
}
if
(
reportViolation
)
{
aCSP
-
>
LogViolationDetails
(
nsIContentSecurityPolicy
:
:
VIOLATION_TYPE_EVAL
nullptr
aCSPEventListener
aFileNameString
aExpression
aLineNum
aColumnNum
EmptyString
(
)
EmptyString
(
)
)
;
}
return
NS_OK
;
}
class
WorkerCSPCheckRunnable
final
:
public
WorkerMainThreadRunnable
{
public
:
WorkerCSPCheckRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsAString
&
aExpression
const
nsAString
&
aFileNameString
uint32_t
aLineNum
uint32_t
aColumnNum
)
:
WorkerMainThreadRunnable
(
aWorkerPrivate
NS_LITERAL_CSTRING
(
"
CSP
Eval
Check
"
)
)
mExpression
(
aExpression
)
mFileNameString
(
aFileNameString
)
mLineNum
(
aLineNum
)
mColumnNum
(
aColumnNum
)
mEvalAllowed
(
false
)
{
}
bool
MainThreadRun
(
)
override
{
mResult
=
CheckInternal
(
mWorkerPrivate
-
>
GetCSP
(
)
mWorkerPrivate
-
>
CSPEventListener
(
)
mWorkerPrivate
-
>
GetLoadingPrincipal
(
)
mExpression
mFileNameString
mLineNum
mColumnNum
&
mEvalAllowed
)
;
return
true
;
}
nsresult
GetResult
(
bool
*
aAllowed
)
{
MOZ_ASSERT
(
aAllowed
)
;
*
aAllowed
=
mEvalAllowed
;
return
mResult
;
}
private
:
const
nsString
mExpression
;
const
nsString
mFileNameString
;
const
uint32_t
mLineNum
;
const
uint32_t
mColumnNum
;
bool
mEvalAllowed
;
nsresult
mResult
;
}
;
}
nsresult
CSPEvalChecker
:
:
CheckForWindow
(
JSContext
*
aCx
nsGlobalWindowInner
*
aWindow
const
nsAString
&
aExpression
bool
*
aAllowEval
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aAllowEval
)
;
*
aAllowEval
=
false
;
nsCOMPtr
<
Document
>
doc
=
aWindow
-
>
GetExtantDoc
(
)
;
if
(
!
doc
)
{
*
aAllowEval
=
true
;
return
NS_OK
;
}
nsresult
rv
=
NS_OK
;
uint32_t
lineNum
=
0
;
uint32_t
columnNum
=
0
;
nsAutoString
fileNameString
;
if
(
!
nsJSUtils
:
:
GetCallingLocation
(
aCx
fileNameString
&
lineNum
&
columnNum
)
)
{
fileNameString
.
AssignLiteral
(
"
unknown
"
)
;
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
=
doc
-
>
GetCsp
(
)
;
rv
=
CheckInternal
(
csp
nullptr
doc
-
>
NodePrincipal
(
)
aExpression
fileNameString
lineNum
columnNum
aAllowEval
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
*
aAllowEval
=
false
;
return
rv
;
}
return
NS_OK
;
}
nsresult
CSPEvalChecker
:
:
CheckForWorker
(
JSContext
*
aCx
WorkerPrivate
*
aWorkerPrivate
const
nsAString
&
aExpression
bool
*
aAllowEval
)
{
MOZ_ASSERT
(
aWorkerPrivate
)
;
aWorkerPrivate
-
>
AssertIsOnWorkerThread
(
)
;
MOZ_ASSERT
(
aAllowEval
)
;
*
aAllowEval
=
false
;
uint32_t
lineNum
=
0
;
uint32_t
columnNum
=
0
;
nsAutoString
fileNameString
;
if
(
!
nsJSUtils
:
:
GetCallingLocation
(
aCx
fileNameString
&
lineNum
&
columnNum
)
)
{
fileNameString
.
AssignLiteral
(
"
unknown
"
)
;
}
RefPtr
<
WorkerCSPCheckRunnable
>
r
=
new
WorkerCSPCheckRunnable
(
aWorkerPrivate
aExpression
fileNameString
lineNum
columnNum
)
;
ErrorResult
error
;
r
-
>
Dispatch
(
Canceling
error
)
;
if
(
NS_WARN_IF
(
error
.
Failed
(
)
)
)
{
*
aAllowEval
=
false
;
return
error
.
StealNSResult
(
)
;
}
nsresult
rv
=
r
-
>
GetResult
(
aAllowEval
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
*
aAllowEval
=
false
;
return
rv
;
}
return
NS_OK
;
}
