#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
Feature
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyParser
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsTArray
.
h
"
using
namespace
mozilla
:
:
dom
;
#
define
URL_SELF
NS_LITERAL_STRING
(
"
https
:
/
/
example
.
com
"
)
#
define
URL_EXAMPLE_COM
NS_LITERAL_STRING
(
"
http
:
/
/
example
.
com
"
)
#
define
URL_EXAMPLE_NET
NS_LITERAL_STRING
(
"
http
:
/
/
example
.
net
"
)
void
CheckParser
(
const
nsAString
&
aInput
bool
aExpectedResults
uint32_t
aExpectedFeatures
nsTArray
<
Feature
>
&
aParsedFeatures
)
{
nsTArray
<
Feature
>
parsedFeatures
;
ASSERT_TRUE
(
FeaturePolicyParser
:
:
ParseString
(
aInput
nullptr
URL_SELF
EmptyString
(
)
true
parsedFeatures
)
=
=
aExpectedResults
)
;
ASSERT_TRUE
(
parsedFeatures
.
Length
(
)
=
=
aExpectedFeatures
)
;
parsedFeatures
.
SwapElements
(
aParsedFeatures
)
;
}
TEST
(
FeaturePolicyParser
Basic
)
{
nsTArray
<
Feature
>
parsedFeatures
;
CheckParser
(
EmptyString
(
)
true
0
parsedFeatures
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
"
)
true
0
parsedFeatures
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
non
-
existing
-
feature
"
)
true
0
parsedFeatures
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
non
-
existing
-
feature
;
another
-
feature
"
)
true
0
parsedFeatures
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
;
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
;
camera
;
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
;
microphone
"
)
true
2
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
microphone
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
;
microphone
"
)
true
2
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
microphone
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
;
microphone
;
foobar
"
)
true
2
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
microphone
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
1
]
.
IsWhiteList
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
self
'
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
self
'
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
self
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
IsWhiteList
(
)
)
;
ASSERT_TRUE
(
!
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
selF
'
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
*
'
self
'
none
'
a
.
com
123
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
AllowsAll
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
none
'
a
.
com
b
.
org
c
.
net
d
.
co
.
uk
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
AllowsNone
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
*
a
.
com
b
.
org
c
.
net
d
.
co
.
uk
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
AllowsAll
(
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
'
self
'
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
http
:
/
/
example
.
com
http
:
/
/
example
.
net
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
!
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_EXAMPLE_COM
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_EXAMPLE_NET
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
http
:
/
/
example
.
com
'
self
'
http
:
/
/
example
.
net
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_SELF
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_EXAMPLE_COM
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
WhiteListContains
(
URL_EXAMPLE_NET
)
)
;
CheckParser
(
NS_LITERAL_STRING
(
"
camera
http
:
/
/
example
.
com
'
self
'
http
:
/
/
example
.
net
*
"
)
true
1
parsedFeatures
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
Name
(
)
.
Equals
(
NS_LITERAL_STRING
(
"
camera
"
)
)
)
;
ASSERT_TRUE
(
parsedFeatures
[
0
]
.
AllowsAll
(
)
)
;
}
