#
include
"
FeaturePolicyUtils
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicy
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyViolationReportBody
.
h
"
#
include
"
mozilla
/
dom
/
ReportingUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIURIFixup
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
FeatureMap
{
const
char
*
mFeatureName
;
FeaturePolicyUtils
:
:
FeaturePolicyValue
mDefaultAllowList
;
}
;
static
FeatureMap
sSupportedFeatures
[
]
=
{
{
"
autoplay
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
camera
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eSelf
}
{
"
encrypted
-
media
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
fullscreen
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
geolocation
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
microphone
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eSelf
}
{
"
midi
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eSelf
}
{
"
payment
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
document
-
domain
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
{
"
display
-
capture
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eSelf
}
{
"
speaker
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eSelf
}
{
"
vr
"
FeaturePolicyUtils
:
:
FeaturePolicyValue
:
:
eAll
}
}
;
bool
FeaturePolicyUtils
:
:
IsSupportedFeature
(
const
nsAString
&
aFeatureName
)
{
uint32_t
numFeatures
=
(
sizeof
(
sSupportedFeatures
)
/
sizeof
(
sSupportedFeatures
[
0
]
)
)
;
for
(
uint32_t
i
=
0
;
i
<
numFeatures
;
+
+
i
)
{
if
(
aFeatureName
.
LowerCaseEqualsASCII
(
sSupportedFeatures
[
i
]
.
mFeatureName
)
)
{
return
true
;
}
}
return
false
;
}
void
FeaturePolicyUtils
:
:
ForEachFeature
(
const
std
:
:
function
<
void
(
const
char
*
)
>
&
aCallback
)
{
uint32_t
numFeatures
=
(
sizeof
(
sSupportedFeatures
)
/
sizeof
(
sSupportedFeatures
[
0
]
)
)
;
for
(
uint32_t
i
=
0
;
i
<
numFeatures
;
+
+
i
)
{
aCallback
(
sSupportedFeatures
[
i
]
.
mFeatureName
)
;
}
}
FeaturePolicyUtils
:
:
FeaturePolicyValue
FeaturePolicyUtils
:
:
DefaultAllowListFeature
(
const
nsAString
&
aFeatureName
)
{
uint32_t
numFeatures
=
(
sizeof
(
sSupportedFeatures
)
/
sizeof
(
sSupportedFeatures
[
0
]
)
)
;
for
(
uint32_t
i
=
0
;
i
<
numFeatures
;
+
+
i
)
{
if
(
aFeatureName
.
LowerCaseEqualsASCII
(
sSupportedFeatures
[
i
]
.
mFeatureName
)
)
{
return
sSupportedFeatures
[
i
]
.
mDefaultAllowList
;
}
}
return
FeaturePolicyValue
:
:
eNone
;
}
bool
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
Document
*
aDocument
const
nsAString
&
aFeatureName
)
{
MOZ_ASSERT
(
aDocument
)
;
if
(
!
StaticPrefs
:
:
dom_security_featurePolicy_enabled
(
)
)
{
return
true
;
}
if
(
!
aDocument
-
>
IsHTMLDocument
(
)
)
{
return
true
;
}
FeaturePolicy
*
policy
=
aDocument
-
>
FeaturePolicy
(
)
;
MOZ_ASSERT
(
policy
)
;
if
(
policy
-
>
AllowsFeatureInternal
(
aFeatureName
policy
-
>
DefaultOrigin
(
)
)
)
{
return
true
;
}
ReportViolation
(
aDocument
aFeatureName
)
;
return
false
;
}
void
FeaturePolicyUtils
:
:
ReportViolation
(
Document
*
aDocument
const
nsAString
&
aFeatureName
)
{
MOZ_ASSERT
(
aDocument
)
;
nsCOMPtr
<
nsIURI
>
uri
=
aDocument
-
>
GetDocumentURI
(
)
;
if
(
NS_WARN_IF
(
!
uri
)
)
{
return
;
}
nsCOMPtr
<
nsIURIFixup
>
urifixup
=
services
:
:
GetURIFixup
(
)
;
if
(
NS_WARN_IF
(
!
urifixup
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
exposableURI
;
nsresult
rv
=
urifixup
-
>
CreateExposableURI
(
uri
getter_AddRefs
(
exposableURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
nsAutoCString
spec
;
rv
=
exposableURI
-
>
GetSpec
(
spec
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
NS_WARN_IF
(
!
cx
)
)
{
return
;
}
nsAutoCString
fileName
;
Nullable
<
int32_t
>
lineNumber
;
Nullable
<
int32_t
>
columnNumber
;
uint32_t
line
=
0
;
uint32_t
column
=
0
;
if
(
nsJSUtils
:
:
GetCallingLocation
(
cx
fileName
&
line
&
column
)
)
{
lineNumber
.
SetValue
(
static_cast
<
int32_t
>
(
line
)
)
;
columnNumber
.
SetValue
(
static_cast
<
int32_t
>
(
column
)
)
;
}
nsPIDOMWindowInner
*
window
=
aDocument
-
>
GetInnerWindow
(
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
return
;
}
RefPtr
<
FeaturePolicyViolationReportBody
>
body
=
new
FeaturePolicyViolationReportBody
(
window
aFeatureName
NS_ConvertUTF8toUTF16
(
fileName
)
lineNumber
columnNumber
NS_LITERAL_STRING
(
"
enforce
"
)
)
;
ReportingUtils
:
:
Report
(
window
nsGkAtoms
:
:
featurePolicyViolation
NS_LITERAL_STRING
(
"
default
"
)
NS_ConvertUTF8toUTF16
(
spec
)
body
)
;
}
}
}
