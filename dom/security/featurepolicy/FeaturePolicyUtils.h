#
ifndef
mozilla_dom_FeaturePolicyUtils_h
#
define
mozilla_dom_FeaturePolicyUtils_h
#
include
"
nsString
.
h
"
#
include
<
functional
>
#
include
"
mozilla
/
dom
/
FeaturePolicy
.
h
"
class
PickleIterator
;
namespace
IPC
{
class
Message
;
class
MessageReader
;
class
MessageWriter
;
}
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
FeaturePolicyUtils
final
{
public
:
enum
FeaturePolicyValue
{
eAll
eSelf
eNone
}
;
static
bool
IsFeatureAllowed
(
Document
*
aDocument
const
nsAString
&
aFeatureName
)
;
static
bool
IsSupportedFeature
(
const
nsAString
&
aFeatureName
)
;
static
bool
IsExperimentalFeature
(
const
nsAString
&
aFeatureName
)
;
static
void
ForEachFeature
(
const
std
:
:
function
<
void
(
const
char
*
)
>
&
aCallback
)
;
static
FeaturePolicyValue
DefaultAllowListFeature
(
const
nsAString
&
aFeatureName
)
;
static
bool
IsFeatureUnsafeAllowedAll
(
Document
*
aDocument
const
nsAString
&
aFeatureName
)
;
private
:
static
void
ReportViolation
(
Document
*
aDocument
const
nsAString
&
aFeatureName
)
;
}
;
}
namespace
ipc
{
class
IProtocol
;
template
<
typename
T
>
struct
IPDLParamTraits
;
template
<
>
struct
IPDLParamTraits
<
mozilla
:
:
dom
:
:
FeaturePolicy
*
>
{
static
void
Write
(
IPC
:
:
MessageWriter
*
aWriter
IProtocol
*
aActor
mozilla
:
:
dom
:
:
FeaturePolicy
*
aParam
)
;
static
bool
Read
(
IPC
:
:
MessageReader
*
aReader
IProtocol
*
aActor
RefPtr
<
mozilla
:
:
dom
:
:
FeaturePolicy
>
*
aResult
)
;
}
;
}
}
#
endif
