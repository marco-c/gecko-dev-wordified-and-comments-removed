#
ifndef
PolicyTokenizer_h___
#
define
PolicyTokenizer_h___
#
include
"
nsContentUtils
.
h
"
#
include
"
nsString
.
h
"
typedef
nsTArray
<
CopyableTArray
<
nsString
>
>
policyTokens
;
class
PolicyTokenizer
{
public
:
static
void
tokenizePolicy
(
const
nsAString
&
aPolicyString
policyTokens
&
outTokens
)
;
private
:
PolicyTokenizer
(
const
char16_t
*
aStart
const
char16_t
*
aEnd
)
;
~
PolicyTokenizer
(
)
;
inline
bool
atEnd
(
)
{
return
mCurChar
>
=
mEndChar
;
}
inline
void
skipWhiteSpace
(
)
{
while
(
mCurChar
<
mEndChar
&
&
nsContentUtils
:
:
IsHTMLWhitespace
(
*
mCurChar
)
)
{
mCurChar
+
+
;
}
mCurToken
.
Truncate
(
)
;
}
inline
void
skipWhiteSpaceAndSemicolon
(
)
{
while
(
mCurChar
<
mEndChar
&
&
(
*
mCurChar
=
=
'
;
'
|
|
nsContentUtils
:
:
IsHTMLWhitespace
(
*
mCurChar
)
)
)
{
mCurChar
+
+
;
}
mCurToken
.
Truncate
(
)
;
}
inline
bool
accept
(
char16_t
aChar
)
{
NS_ASSERTION
(
mCurChar
<
mEndChar
"
Trying
to
dereference
mEndChar
"
)
;
if
(
*
mCurChar
=
=
aChar
)
{
mCurToken
.
Append
(
*
mCurChar
+
+
)
;
return
true
;
}
return
false
;
}
void
generateNextToken
(
)
;
void
generateTokens
(
policyTokens
&
outTokens
)
;
const
char16_t
*
mCurChar
;
const
char16_t
*
mEndChar
;
nsString
mCurToken
;
}
;
#
endif
