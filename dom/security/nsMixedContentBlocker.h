#
ifndef
nsMixedContentBlocker_h___
#
define
nsMixedContentBlocker_h___
#
define
NS_MIXEDCONTENTBLOCKER_CONTRACTID
"
mozilla
.
org
/
mixedcontentblocker
;
1
"
#
define
NS_MIXEDCONTENTBLOCKER_CID
\
{
\
0xdaf1461b
0xbf29
0x4f88
{
\
0x8d
0x0e
0x4b
0xcd
0xf3
0x32
0xc8
0x62
\
}
\
}
enum
MixedContentTypes
{
eMixedScript
eMixedDisplay
}
;
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
imgRequest
.
h
"
using
mozilla
:
:
OriginAttributes
;
class
nsILoadInfo
;
class
nsMixedContentBlocker
:
public
nsIContentPolicy
public
nsIChannelEventSink
{
private
:
virtual
~
nsMixedContentBlocker
(
)
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTPOLICY
NS_DECL_NSICHANNELEVENTSINK
nsMixedContentBlocker
(
)
=
default
;
static
bool
IsPotentiallyTrustworthyLoopbackHost
(
const
nsACString
&
aAsciiHost
)
;
static
bool
IsPotentiallyTrustworthyLoopbackURL
(
nsIURI
*
aURL
)
;
static
bool
IsPotentiallyTrustworthyOnion
(
nsIURI
*
aURL
)
;
static
bool
IsPotentiallyTrustworthyOrigin
(
nsIURI
*
aURI
)
;
static
nsresult
ShouldLoad
(
bool
aHadInsecureImageRedirect
uint32_t
aContentType
nsIURI
*
aContentLocation
nsISupports
*
aRequestingContext
const
nsACString
&
aMimeGuess
nsIPrincipal
*
aRequestPrincipal
int16_t
*
aDecision
)
;
static
void
AccumulateMixedContentHSTS
(
nsIURI
*
aURI
bool
aActive
const
OriginAttributes
&
aOriginAttributes
)
;
static
bool
URISafeToBeLoadedInSecureContext
(
nsIURI
*
aURI
)
;
static
void
OnPrefChange
(
const
char
*
aPref
void
*
aClosure
)
;
static
void
GetSecureContextWhiteList
(
nsACString
&
aList
)
;
static
void
Shutdown
(
)
;
static
bool
sSecurecontextWhitelistCached
;
static
nsCString
*
sSecurecontextWhitelist
;
}
;
#
endif
