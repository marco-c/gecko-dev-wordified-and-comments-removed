#
include
"
DOMSecurityMonitor
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
void
DOMSecurityMonitor
:
:
AuditParsingOfHTMLXMLFragments
(
nsIPrincipal
*
aPrincipal
const
nsAString
&
aFragment
)
{
if
(
!
aPrincipal
-
>
IsSystemPrincipal
(
)
&
&
!
aPrincipal
-
>
SchemeIs
(
"
about
"
)
)
{
return
;
}
if
(
aFragment
.
IsEmpty
(
)
)
{
return
;
}
nsAutoString
filename
;
uint32_t
lineNum
=
0
;
uint32_t
columnNum
=
0
;
JSContext
*
cx
=
nsContentUtils
:
:
GetCurrentJSContext
(
)
;
if
(
!
nsJSUtils
:
:
GetCallingLocation
(
cx
filename
&
lineNum
&
columnNum
)
)
{
return
;
}
if
(
StaticPrefs
:
:
dom_security_skip_html_fragment_assertion
(
)
)
{
return
;
}
static
nsLiteralCString
htmlFragmentAllowlist
[
]
=
{
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
global
/
content
/
elements
/
marquee
.
js
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
pocket
/
content
/
panels
/
js
/
vendor
/
jquery
-
2
.
1
.
1
.
min
.
js
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
browser
/
content
/
aboutNetError
.
js
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
devtools
/
content
/
shared
/
sourceeditor
/
"
"
codemirror
/
codemirror
.
bundle
.
js
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
devtools
-
startup
/
content
/
aboutdevtools
/
aboutdevtools
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
activity
-
stream
.
bundle
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
debugger
/
src
/
components
/
"
"
Editor
/
Breakpoint
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
debugger
/
src
/
components
/
"
"
Editor
/
ColumnBreakpoint
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
fluent
-
react
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
shared
/
vendor
/
react
-
dom
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
FilterWidget
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
tooltip
/
"
"
inactive
-
css
-
tooltip
-
helper
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
devtools
/
client
/
shared
/
widgets
/
Spectrum
.
js
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
gre
/
modules
/
narrate
/
VoiceSelect
.
jsm
"
)
NS_LITERAL_CSTRING
(
"
resource
:
/
/
normandy
-
vendor
/
ReactDOM
.
js
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
mochikit
/
content
/
harness
.
xhtml
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
mochitests
/
content
/
"
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
reftest
/
content
/
"
)
}
;
for
(
const
nsLiteralCString
&
allowlistEntry
:
htmlFragmentAllowlist
)
{
if
(
StringBeginsWith
(
NS_ConvertUTF16toUTF8
(
filename
)
allowlistEntry
)
)
{
return
;
}
}
nsAutoCString
uriSpec
;
aPrincipal
-
>
GetAsciiSpec
(
uriSpec
)
;
fprintf
(
stderr
"
Do
not
call
the
fragment
parser
(
e
.
g
innerHTML
(
)
)
in
chrome
code
"
"
or
in
about
:
pages
(
uri
:
%
s
)
(
caller
:
%
s
line
:
%
d
col
:
%
d
)
"
"
(
fragment
:
%
s
)
"
uriSpec
.
get
(
)
NS_ConvertUTF16toUTF8
(
filename
)
.
get
(
)
lineNum
columnNum
NS_ConvertUTF16toUTF8
(
aFragment
)
.
get
(
)
)
;
MOZ_ASSERT
(
false
)
;
}
void
DOMSecurityMonitor
:
:
AuditUseOfJavaScriptURI
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsCOMPtr
<
nsIPrincipal
>
loadingPrincipal
=
loadInfo
-
>
LoadingPrincipal
(
)
;
if
(
!
loadingPrincipal
)
{
return
;
}
if
(
!
loadingPrincipal
-
>
IsSystemPrincipal
(
)
&
&
!
loadingPrincipal
-
>
SchemeIs
(
"
about
"
)
)
{
return
;
}
MOZ_ASSERT
(
false
"
Do
not
use
javascript
:
URIs
in
chrome
code
or
in
about
:
pages
"
)
;
}
