#
ifndef
mozilla_dom_Sanitizer_h
#
define
mozilla_dom_Sanitizer_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIParserUtils
.
h
"
#
include
"
nsTreeSanitizer
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
class
nsISupports
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
class
Sanitizer
final
:
public
nsISupports
public
nsWrapperCache
{
explicit
Sanitizer
(
nsIGlobalObject
*
aGlobal
nsTreeSanitizer
&
&
aTreeSanitizer
)
:
mGlobal
(
aGlobal
)
mTreeSanitizer
(
std
:
:
move
(
aTreeSanitizer
)
)
{
MOZ_ASSERT
(
aGlobal
)
;
}
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
Sanitizer
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
Sanitizer
>
New
(
nsIGlobalObject
*
aGlobal
const
SanitizerConfig
&
aOptions
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Sanitizer
>
Constructor
(
const
GlobalObject
&
aGlobal
const
SanitizerConfig
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
DocumentFragment
>
Sanitize
(
const
mozilla
:
:
dom
:
:
DocumentFragmentOrDocument
&
aInput
ErrorResult
&
aRv
)
;
RefPtr
<
DocumentFragment
>
SanitizeFragment
(
RefPtr
<
DocumentFragment
>
aFragment
ErrorResult
&
aRv
)
;
void
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
)
;
private
:
~
Sanitizer
(
)
=
default
;
already_AddRefed
<
DocumentFragment
>
InputToNewFragment
(
const
mozilla
:
:
dom
:
:
DocumentFragmentOrDocument
&
aInput
ErrorResult
&
aRv
)
;
static
void
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
)
;
RefPtr
<
nsIGlobalObject
>
mGlobal
;
nsTreeSanitizer
mTreeSanitizer
;
}
;
}
}
#
endif
