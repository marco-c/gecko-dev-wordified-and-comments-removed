#
include
"
SanitizerTypes
.
h
"
namespace
mozilla
:
:
dom
:
:
sanitizer
{
SanitizerAttributeNamespace
CanonicalName
:
:
ToSanitizerAttributeNamespace
(
)
const
{
SanitizerAttributeNamespace
result
;
mLocalName
-
>
ToString
(
result
.
mName
)
;
if
(
mNamespace
)
{
mNamespace
-
>
ToString
(
result
.
mNamespace
)
;
}
else
{
result
.
mNamespace
.
SetIsVoid
(
true
)
;
}
return
result
;
}
SanitizerElementNamespaceWithAttributes
CanonicalElementWithAttributes
:
:
ToSanitizerElementNamespaceWithAttributes
(
)
const
{
SanitizerElementNamespaceWithAttributes
result
;
mLocalName
-
>
ToString
(
result
.
mName
)
;
if
(
mNamespace
)
{
mNamespace
-
>
ToString
(
result
.
mNamespace
)
;
}
else
{
MOZ_ASSERT
(
false
"
An
element
namespace
should
never
be
null
"
)
;
}
if
(
mAttributes
)
{
result
.
mAttributes
.
Construct
(
ToSanitizerAttributes
(
*
mAttributes
)
)
;
}
if
(
mRemoveAttributes
)
{
result
.
mRemoveAttributes
.
Construct
(
ToSanitizerAttributes
(
*
mRemoveAttributes
)
)
;
}
return
result
;
}
SanitizerElementNamespace
CanonicalName
:
:
ToSanitizerElementNamespace
(
)
const
{
SanitizerElementNamespace
result
;
mLocalName
-
>
ToString
(
result
.
mName
)
;
if
(
mNamespace
)
{
mNamespace
-
>
ToString
(
result
.
mNamespace
)
;
}
else
{
MOZ_ASSERT
(
false
"
An
element
namespace
should
never
be
null
"
)
;
}
return
result
;
}
nsTArray
<
OwningStringOrSanitizerAttributeNamespace
>
ToSanitizerAttributes
(
const
ListSet
<
CanonicalName
>
&
aList
)
{
nsTArray
<
OwningStringOrSanitizerAttributeNamespace
>
attributes
;
for
(
const
CanonicalName
&
canonical
:
aList
.
Values
(
)
)
{
attributes
.
AppendElement
(
)
-
>
SetAsSanitizerAttributeNamespace
(
)
=
canonical
.
ToSanitizerAttributeNamespace
(
)
;
}
return
attributes
;
}
}
