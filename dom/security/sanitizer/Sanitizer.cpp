#
include
"
Sanitizer
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
HTMLTemplateElement
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerDefaultConfig
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
sanitizer
;
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Sanitizer
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Sanitizer
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Sanitizer
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Sanitizer
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
using
ElementsWithAttributes
=
nsTHashMap
<
const
nsStaticAtom
*
UniquePtr
<
StaticAtomSet
>
>
;
StaticAutoPtr
<
ElementsWithAttributes
>
sDefaultHTMLElements
;
StaticAutoPtr
<
ElementsWithAttributes
>
sDefaultMathMLElements
;
StaticAutoPtr
<
ElementsWithAttributes
>
sDefaultSVGElements
;
StaticAutoPtr
<
StaticAtomSet
>
sDefaultAttributes
;
JSObject
*
Sanitizer
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Sanitizer_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
GetInstance
(
nsIGlobalObject
*
aGlobal
const
OwningSanitizerOrSanitizerConfigOrSanitizerPresets
&
aOptions
bool
aSafe
ErrorResult
&
aRv
)
{
if
(
aOptions
.
IsSanitizerPresets
(
)
)
{
MOZ_ASSERT
(
aOptions
.
GetAsSanitizerPresets
(
)
=
=
SanitizerPresets
:
:
Default
)
;
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
aGlobal
)
;
sanitizer
-
>
SetDefaultConfig
(
)
;
return
sanitizer
.
forget
(
)
;
}
if
(
aOptions
.
IsSanitizerConfig
(
)
)
{
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
aGlobal
)
;
sanitizer
-
>
SetConfig
(
aOptions
.
GetAsSanitizerConfig
(
)
!
aSafe
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
sanitizer
.
forget
(
)
;
}
MOZ_ASSERT
(
aOptions
.
IsSanitizer
(
)
)
;
RefPtr
<
Sanitizer
>
sanitizer
=
aOptions
.
GetAsSanitizer
(
)
;
return
sanitizer
.
forget
(
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
SanitizerConfigOrSanitizerPresets
&
aConfig
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
global
)
;
if
(
aConfig
.
IsSanitizerPresets
(
)
)
{
MOZ_ASSERT
(
aConfig
.
GetAsSanitizerPresets
(
)
=
=
SanitizerPresets
:
:
Default
)
;
sanitizer
-
>
SetDefaultConfig
(
)
;
return
sanitizer
.
forget
(
)
;
}
sanitizer
-
>
SetConfig
(
aConfig
.
GetAsSanitizerConfig
(
)
true
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
sanitizer
.
forget
(
)
;
}
void
Sanitizer
:
:
SetDefaultConfig
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
AssertNoLists
(
)
;
MOZ_ASSERT
(
!
mComments
)
;
MOZ_ASSERT
(
mDataAttributes
.
isNothing
(
)
)
;
mIsDefaultConfig
=
true
;
mComments
=
false
;
mDataAttributes
=
Some
(
false
)
;
if
(
sDefaultHTMLElements
)
{
return
;
}
auto
createElements
=
[
]
(
mozilla
:
:
Span
<
nsStaticAtom
*
const
>
aElements
nsStaticAtom
*
const
*
aElementWithAttributes
)
{
auto
elements
=
new
ElementsWithAttributes
(
aElements
.
Length
(
)
)
;
size_t
i
=
0
;
for
(
nsStaticAtom
*
name
:
aElements
)
{
UniquePtr
<
StaticAtomSet
>
attributes
=
nullptr
;
if
(
name
=
=
aElementWithAttributes
[
i
]
)
{
attributes
=
MakeUnique
<
StaticAtomSet
>
(
)
;
while
(
aElementWithAttributes
[
+
+
i
]
)
{
attributes
-
>
Insert
(
aElementWithAttributes
[
i
]
)
;
}
i
+
+
;
}
elements
-
>
InsertOrUpdate
(
name
std
:
:
move
(
attributes
)
)
;
}
return
elements
;
}
;
sDefaultHTMLElements
=
createElements
(
Span
(
kDefaultHTMLElements
)
kHTMLElementWithAttributes
)
;
sDefaultMathMLElements
=
createElements
(
Span
(
kDefaultMathMLElements
)
kMathMLElementWithAttributes
)
;
sDefaultSVGElements
=
createElements
(
Span
(
kDefaultSVGElements
)
kSVGElementWithAttributes
)
;
sDefaultAttributes
=
new
StaticAtomSet
(
std
:
:
size
(
kDefaultAttributes
)
)
;
for
(
nsStaticAtom
*
name
:
kDefaultAttributes
)
{
sDefaultAttributes
-
>
Insert
(
name
)
;
}
ClearOnShutdown
(
&
sDefaultHTMLElements
)
;
ClearOnShutdown
(
&
sDefaultMathMLElements
)
;
ClearOnShutdown
(
&
sDefaultAttributes
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
StringOrSanitizerElementNamespace
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespace
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
OwningStringOrSanitizerElementNamespace
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespace
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
StringOrSanitizerElementNamespaceWithAttributes
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
OwningStringOrSanitizerElementNamespaceWithAttributes
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
}
template
<
typename
SanitizerElement
>
static
CanonicalName
CanonicalizeElement
(
const
SanitizerElement
&
aElement
)
{
if
(
aElement
.
IsString
(
)
)
{
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
aElement
.
GetAsString
(
)
)
;
return
CanonicalName
(
nameAtom
nsGkAtoms
:
:
nsuri_xhtml
)
;
}
const
auto
&
elem
=
GetAsSanitizerElementNamespace
(
aElement
)
;
MOZ_ASSERT
(
!
elem
.
mName
.
IsVoid
(
)
)
;
RefPtr
<
nsAtom
>
namespaceAtom
;
if
(
!
elem
.
mNamespace
.
IsEmpty
(
)
)
{
namespaceAtom
=
NS_AtomizeMainThread
(
elem
.
mNamespace
)
;
}
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
elem
.
mName
)
;
return
CanonicalName
(
nameAtom
namespaceAtom
)
;
}
template
<
typename
SanitizerAttribute
>
static
CanonicalName
CanonicalizeAttribute
(
const
SanitizerAttribute
&
aAttribute
)
{
if
(
aAttribute
.
IsString
(
)
)
{
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
aAttribute
.
GetAsString
(
)
)
;
return
CanonicalName
(
nameAtom
nullptr
)
;
}
const
auto
&
attr
=
aAttribute
.
GetAsSanitizerAttributeNamespace
(
)
;
MOZ_ASSERT
(
!
attr
.
mName
.
IsVoid
(
)
)
;
RefPtr
<
nsAtom
>
namespaceAtom
;
if
(
!
attr
.
mNamespace
.
IsEmpty
(
)
)
{
namespaceAtom
=
NS_AtomizeMainThread
(
attr
.
mNamespace
)
;
}
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
attr
.
mName
)
;
return
CanonicalName
(
nameAtom
namespaceAtom
)
;
}
template
<
typename
SanitizerElementWithAttributes
>
static
CanonicalElementWithAttributes
CanonicalizeElementWithAttributes
(
const
SanitizerElementWithAttributes
&
aElement
)
{
CanonicalElementWithAttributes
result
=
CanonicalElementWithAttributes
(
CanonicalizeElement
(
aElement
)
)
;
if
(
aElement
.
IsSanitizerElementNamespaceWithAttributes
(
)
)
{
auto
&
elem
=
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
if
(
elem
.
mAttributes
.
WasPassed
(
)
)
{
ListSet
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
elem
.
mAttributes
.
Value
(
)
)
{
attributes
.
Insert
(
CanonicalizeAttribute
(
attribute
)
)
;
}
result
.
mAttributes
=
Some
(
std
:
:
move
(
attributes
)
)
;
}
if
(
elem
.
mRemoveAttributes
.
WasPassed
(
)
)
{
ListSet
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
elem
.
mRemoveAttributes
.
Value
(
)
)
{
attributes
.
Insert
(
CanonicalizeAttribute
(
attribute
)
)
;
}
result
.
mRemoveAttributes
=
Some
(
std
:
:
move
(
attributes
)
)
;
}
}
if
(
!
result
.
mAttributes
&
&
!
result
.
mRemoveAttributes
)
{
result
.
mRemoveAttributes
=
Some
(
ListSet
<
CanonicalName
>
(
)
)
;
}
return
result
;
}
void
Sanitizer
:
:
CanonicalizeConfiguration
(
const
SanitizerConfig
&
aConfig
bool
aAllowCommentsAndDataAttributes
)
{
if
(
!
aConfig
.
mElements
.
WasPassed
(
)
&
&
!
aConfig
.
mRemoveElements
.
WasPassed
(
)
)
{
mRemoveElements
.
emplace
(
)
;
}
if
(
!
aConfig
.
mAttributes
.
WasPassed
(
)
&
&
!
aConfig
.
mRemoveAttributes
.
WasPassed
(
)
)
{
mRemoveAttributes
.
emplace
(
)
;
}
if
(
aConfig
.
mElements
.
WasPassed
(
)
)
{
nsTArray
<
CanonicalElementWithAttributes
>
elements
;
for
(
const
auto
&
element
:
aConfig
.
mElements
.
Value
(
)
)
{
elements
.
AppendElement
(
CanonicalizeElementWithAttributes
(
element
)
)
;
}
mElements
=
Some
(
ListSet
(
std
:
:
move
(
elements
)
)
)
;
}
if
(
aConfig
.
mRemoveElements
.
WasPassed
(
)
)
{
nsTArray
<
CanonicalName
>
elements
;
for
(
const
auto
&
element
:
aConfig
.
mRemoveElements
.
Value
(
)
)
{
elements
.
AppendElement
(
CanonicalizeElement
(
element
)
)
;
}
mRemoveElements
=
Some
(
ListSet
(
std
:
:
move
(
elements
)
)
)
;
}
if
(
aConfig
.
mReplaceWithChildrenElements
.
WasPassed
(
)
)
{
nsTArray
<
CanonicalName
>
elements
;
for
(
const
auto
&
element
:
aConfig
.
mReplaceWithChildrenElements
.
Value
(
)
)
{
elements
.
AppendElement
(
CanonicalizeElement
(
element
)
)
;
}
mReplaceWithChildrenElements
=
Some
(
ListSet
(
std
:
:
move
(
elements
)
)
)
;
}
if
(
aConfig
.
mAttributes
.
WasPassed
(
)
)
{
nsTArray
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
aConfig
.
mAttributes
.
Value
(
)
)
{
attributes
.
AppendElement
(
CanonicalizeAttribute
(
attribute
)
)
;
}
mAttributes
=
Some
(
ListSet
(
std
:
:
move
(
attributes
)
)
)
;
}
if
(
aConfig
.
mRemoveAttributes
.
WasPassed
(
)
)
{
nsTArray
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
aConfig
.
mRemoveAttributes
.
Value
(
)
)
{
attributes
.
AppendElement
(
CanonicalizeAttribute
(
attribute
)
)
;
}
mRemoveAttributes
=
Some
(
ListSet
(
std
:
:
move
(
attributes
)
)
)
;
}
if
(
aConfig
.
mComments
.
WasPassed
(
)
)
{
mComments
=
aConfig
.
mComments
.
Value
(
)
;
}
else
{
mComments
=
aAllowCommentsAndDataAttributes
;
}
if
(
aConfig
.
mDataAttributes
.
WasPassed
(
)
)
{
mDataAttributes
=
Some
(
aConfig
.
mDataAttributes
.
Value
(
)
)
;
}
else
if
(
aConfig
.
mAttributes
.
WasPassed
(
)
)
{
mDataAttributes
=
Some
(
aAllowCommentsAndDataAttributes
)
;
}
}
void
Sanitizer
:
:
IsValid
(
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
mElements
|
|
mRemoveElements
"
Must
have
either
due
to
CanonicalizeConfiguration
"
)
;
if
(
mElements
&
&
mRemoveElements
)
{
aRv
.
ThrowTypeError
(
"
'
elements
'
and
'
removeElements
'
are
not
allowed
at
the
same
time
"
)
;
return
;
}
MOZ_ASSERT
(
mAttributes
|
|
mRemoveAttributes
"
Must
have
either
due
to
CanonicalizeConfiguration
"
)
;
if
(
mAttributes
&
&
mRemoveAttributes
)
{
aRv
.
ThrowTypeError
(
"
'
attributes
'
and
'
removeAttributes
'
are
not
allowed
at
the
same
"
"
time
"
)
;
return
;
}
if
(
mElements
&
&
mElements
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
element
in
'
elements
'
"
)
;
return
;
}
if
(
mRemoveElements
&
&
mRemoveElements
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
element
in
'
removeElement
'
"
)
;
return
;
}
if
(
mReplaceWithChildrenElements
&
&
mReplaceWithChildrenElements
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
element
in
'
replaceWithChildrenElements
'
"
)
;
return
;
}
if
(
mAttributes
&
&
mAttributes
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
attribute
in
'
attributes
'
"
)
;
return
;
}
if
(
mRemoveAttributes
&
&
mRemoveAttributes
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
attribute
in
'
removeAttributes
'
"
)
;
return
;
}
if
(
mElements
&
&
mReplaceWithChildrenElements
)
{
for
(
const
CanonicalElementWithAttributes
&
name
:
mElements
-
>
Values
(
)
)
{
if
(
mReplaceWithChildrenElements
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Element
can
'
t
be
in
both
'
elements
'
and
"
"
'
replaceWithChildrenElements
'
"
)
;
return
;
}
}
}
if
(
mRemoveElements
&
&
mReplaceWithChildrenElements
)
{
for
(
const
CanonicalName
&
name
:
mRemoveElements
-
>
Values
(
)
)
{
if
(
mReplaceWithChildrenElements
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Element
can
'
t
be
in
both
'
removeElements
'
and
"
"
'
replaceWithChildrenElements
'
"
)
;
return
;
}
}
}
if
(
mAttributes
)
{
if
(
mElements
)
{
for
(
const
CanonicalElementWithAttributes
&
elem
:
mElements
-
>
Values
(
)
)
{
if
(
elem
.
mAttributes
&
&
elem
.
mAttributes
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
attribute
in
local
'
attributes
'
"
)
;
return
;
}
if
(
elem
.
mRemoveAttributes
&
&
elem
.
mRemoveAttributes
-
>
HasDuplicates
(
)
)
{
aRv
.
ThrowTypeError
(
"
Duplicate
attribute
in
local
'
removeAttributes
'
"
)
;
return
;
}
if
(
elem
.
mAttributes
)
{
for
(
const
CanonicalName
&
name
:
mAttributes
-
>
Values
(
)
)
{
if
(
elem
.
mAttributes
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Same
attribute
both
in
local
and
global
'
attributes
'
"
)
;
return
;
}
}
}
if
(
elem
.
mRemoveAttributes
)
{
for
(
const
CanonicalName
&
name
:
elem
.
mRemoveAttributes
-
>
Values
(
)
)
{
if
(
!
mAttributes
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Attribute
in
local
'
removeAttributes
'
but
not
in
global
"
"
'
attributes
'
"
)
;
return
;
}
}
}
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
exists
"
)
;
if
(
*
mDataAttributes
&
&
elem
.
mAttributes
)
{
for
(
const
CanonicalName
&
name
:
elem
.
mAttributes
-
>
Values
(
)
)
{
if
(
name
.
IsDataAttribute
(
)
)
{
aRv
.
ThrowTypeError
(
"
Local
'
attributes
'
contains
a
data
attribute
which
is
"
"
redundant
with
'
dataAttributes
'
being
true
"
)
;
return
;
}
}
}
}
}
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
exists
"
)
;
if
(
*
mDataAttributes
)
{
for
(
const
CanonicalName
&
name
:
mAttributes
-
>
Values
(
)
)
{
if
(
name
.
IsDataAttribute
(
)
)
{
aRv
.
ThrowTypeError
(
"
Global
'
attributes
'
contains
a
data
attribute
which
is
"
"
redundant
with
'
dataAttributes
'
being
true
"
)
;
return
;
}
}
}
}
if
(
mRemoveAttributes
)
{
if
(
mElements
)
{
for
(
const
CanonicalElementWithAttributes
&
elem
:
mElements
-
>
Values
(
)
)
{
if
(
elem
.
mAttributes
)
{
for
(
const
CanonicalName
&
name
:
elem
.
mAttributes
-
>
Values
(
)
)
{
if
(
mRemoveAttributes
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Same
attribute
both
in
local
'
attributes
'
and
global
"
"
'
removeAttributes
'
.
"
)
;
return
;
}
}
}
if
(
elem
.
mRemoveAttributes
)
{
for
(
const
CanonicalName
&
name
:
elem
.
mRemoveAttributes
-
>
Values
(
)
)
{
if
(
mRemoveAttributes
-
>
Contains
(
name
)
)
{
aRv
.
ThrowTypeError
(
"
Same
attribute
both
in
local
and
global
"
"
'
removeAttributes
'
.
"
)
;
return
;
}
}
}
}
}
if
(
mDataAttributes
)
{
aRv
.
ThrowTypeError
(
"
'
removeAttributes
'
and
'
dataAttributes
'
aren
'
t
allowed
at
the
"
"
same
time
"
)
;
}
}
}
void
Sanitizer
:
:
AssertIsValid
(
)
{
#
ifdef
DEBUG
IgnoredErrorResult
rv
;
IsValid
(
rv
)
;
MOZ_ASSERT
(
!
rv
.
Failed
(
)
)
;
#
endif
}
void
Sanitizer
:
:
SetConfig
(
const
SanitizerConfig
&
aConfig
bool
aAllowCommentsAndDataAttributes
ErrorResult
&
aRv
)
{
CanonicalizeConfiguration
(
aConfig
aAllowCommentsAndDataAttributes
)
;
IsValid
(
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
}
void
Sanitizer
:
:
MaybeMaterializeDefaultConfig
(
)
{
if
(
!
mIsDefaultConfig
)
{
AssertIsValid
(
)
;
return
;
}
AssertNoLists
(
)
;
nsTArray
<
CanonicalElementWithAttributes
>
elements
;
auto
insertElements
=
[
&
elements
]
(
mozilla
:
:
Span
<
nsStaticAtom
*
const
>
aElements
nsStaticAtom
*
aNamespace
nsStaticAtom
*
const
*
aElementWithAttributes
)
{
size_t
i
=
0
;
for
(
nsStaticAtom
*
name
:
aElements
)
{
CanonicalElementWithAttributes
element
(
CanonicalName
(
name
aNamespace
)
)
;
if
(
name
=
=
aElementWithAttributes
[
i
]
)
{
nsTArray
<
CanonicalName
>
attributes
;
while
(
aElementWithAttributes
[
+
+
i
]
)
{
attributes
.
AppendElement
(
CanonicalName
(
aElementWithAttributes
[
i
]
nullptr
)
)
;
}
i
+
+
;
element
.
mAttributes
=
Some
(
ListSet
(
std
:
:
move
(
attributes
)
)
)
;
}
elements
.
AppendElement
(
std
:
:
move
(
element
)
)
;
}
}
;
insertElements
(
Span
(
kDefaultHTMLElements
)
nsGkAtoms
:
:
nsuri_xhtml
kHTMLElementWithAttributes
)
;
insertElements
(
Span
(
kDefaultMathMLElements
)
nsGkAtoms
:
:
nsuri_mathml
kMathMLElementWithAttributes
)
;
insertElements
(
Span
(
kDefaultSVGElements
)
nsGkAtoms
:
:
nsuri_svg
kSVGElementWithAttributes
)
;
mElements
=
Some
(
ListSet
(
std
:
:
move
(
elements
)
)
)
;
nsTArray
<
CanonicalName
>
attributes
;
for
(
nsStaticAtom
*
name
:
kDefaultAttributes
)
{
attributes
.
AppendElement
(
CanonicalName
(
name
nullptr
)
)
;
}
mAttributes
=
Some
(
ListSet
(
std
:
:
move
(
attributes
)
)
)
;
mIsDefaultConfig
=
false
;
}
void
Sanitizer
:
:
Get
(
SanitizerConfig
&
aConfig
)
{
MaybeMaterializeDefaultConfig
(
)
;
if
(
mElements
)
{
nsTArray
<
OwningStringOrSanitizerElementNamespaceWithAttributes
>
elements
;
for
(
const
CanonicalElementWithAttributes
&
canonical
:
mElements
-
>
Values
(
)
)
{
elements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespaceWithAttributes
(
)
=
canonical
.
ToSanitizerElementNamespaceWithAttributes
(
)
;
}
aConfig
.
mElements
.
Construct
(
std
:
:
move
(
elements
)
)
;
}
else
{
nsTArray
<
OwningStringOrSanitizerElementNamespace
>
removeElements
;
for
(
const
CanonicalName
&
canonical
:
mRemoveElements
-
>
Values
(
)
)
{
removeElements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespace
(
)
=
canonical
.
ToSanitizerElementNamespace
(
)
;
}
aConfig
.
mRemoveElements
.
Construct
(
std
:
:
move
(
removeElements
)
)
;
}
if
(
mReplaceWithChildrenElements
)
{
nsTArray
<
OwningStringOrSanitizerElementNamespace
>
replaceWithChildrenElements
;
for
(
const
CanonicalName
&
canonical
:
mReplaceWithChildrenElements
-
>
Values
(
)
)
{
replaceWithChildrenElements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespace
(
)
=
canonical
.
ToSanitizerElementNamespace
(
)
;
}
aConfig
.
mReplaceWithChildrenElements
.
Construct
(
std
:
:
move
(
replaceWithChildrenElements
)
)
;
}
if
(
mAttributes
)
{
aConfig
.
mAttributes
.
Construct
(
ToSanitizerAttributes
(
*
mAttributes
)
)
;
}
else
{
aConfig
.
mRemoveAttributes
.
Construct
(
ToSanitizerAttributes
(
*
mRemoveAttributes
)
)
;
}
aConfig
.
mComments
.
Construct
(
mComments
)
;
if
(
mDataAttributes
)
{
aConfig
.
mDataAttributes
.
Construct
(
*
mDataAttributes
)
;
}
}
bool
Sanitizer
:
:
AllowElement
(
const
StringOrSanitizerElementNamespaceWithAttributes
&
aElement
)
{
MaybeMaterializeDefaultConfig
(
)
;
CanonicalElementWithAttributes
element
=
CanonicalizeElementWithAttributes
(
aElement
)
;
if
(
mElements
)
{
bool
modified
=
mReplaceWithChildrenElements
?
mReplaceWithChildrenElements
-
>
Remove
(
element
)
:
false
;
if
(
element
.
mAttributes
)
{
nsTArray
<
CanonicalName
>
attributes
;
for
(
const
CanonicalName
&
attr
:
element
.
mAttributes
-
>
Values
(
)
)
{
if
(
attributes
.
Contains
(
attr
)
)
{
continue
;
}
if
(
mAttributes
)
{
if
(
mAttributes
-
>
Contains
(
attr
)
)
{
continue
;
}
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
"
)
;
if
(
*
mDataAttributes
)
{
if
(
attr
.
IsDataAttribute
(
)
)
{
continue
;
}
}
}
if
(
mRemoveAttributes
)
{
if
(
mRemoveAttributes
-
>
Contains
(
attr
)
)
{
continue
;
}
}
attributes
.
AppendElement
(
attr
.
Clone
(
)
)
;
}
element
.
mAttributes
=
Some
(
ListSet
(
std
:
:
move
(
attributes
)
)
)
;
}
if
(
element
.
mRemoveAttributes
)
{
nsTArray
<
CanonicalName
>
removeAttributes
;
for
(
const
CanonicalName
&
attr
:
element
.
mRemoveAttributes
-
>
Values
(
)
)
{
if
(
removeAttributes
.
Contains
(
attr
)
)
{
continue
;
}
if
(
mAttributes
)
{
if
(
!
mAttributes
-
>
Contains
(
attr
)
)
{
continue
;
}
}
if
(
mRemoveAttributes
)
{
if
(
mRemoveAttributes
-
>
Contains
(
attr
)
)
{
continue
;
}
}
removeAttributes
.
AppendElement
(
attr
.
Clone
(
)
)
;
}
element
.
mRemoveAttributes
=
Some
(
ListSet
(
std
:
:
move
(
removeAttributes
)
)
)
;
}
CanonicalElementWithAttributes
*
existingElement
=
mElements
-
>
Get
(
element
)
;
if
(
!
existingElement
)
{
mElements
-
>
Insert
(
std
:
:
move
(
element
)
)
;
return
true
;
}
if
(
element
.
EqualAttributes
(
*
existingElement
)
)
{
return
modified
;
}
mElements
-
>
Remove
(
element
)
;
mElements
-
>
Insert
(
std
:
:
move
(
element
)
)
;
return
true
;
}
if
(
element
.
mAttributes
|
|
(
element
.
mRemoveAttributes
&
&
!
element
.
mRemoveAttributes
-
>
IsEmpty
(
)
)
)
{
LogLocalizedString
(
"
SanitizerAllowElementIgnored
"
{
}
nsIScriptError
:
:
warningFlag
)
;
return
false
;
}
bool
modified
=
mReplaceWithChildrenElements
?
mReplaceWithChildrenElements
-
>
Remove
(
element
)
:
false
;
if
(
!
mRemoveElements
-
>
Contains
(
element
)
)
{
return
modified
;
}
mRemoveElements
-
>
Remove
(
element
)
;
return
true
;
}
bool
Sanitizer
:
:
RemoveElement
(
const
StringOrSanitizerElementNamespace
&
aElement
)
{
MaybeMaterializeDefaultConfig
(
)
;
CanonicalName
element
=
CanonicalizeElement
(
aElement
)
;
return
RemoveElementCanonical
(
std
:
:
move
(
element
)
)
;
}
bool
Sanitizer
:
:
RemoveElementCanonical
(
CanonicalName
&
&
aElement
)
{
bool
modified
=
mReplaceWithChildrenElements
?
mReplaceWithChildrenElements
-
>
Remove
(
aElement
)
:
false
;
if
(
mElements
)
{
if
(
mElements
-
>
Contains
(
aElement
)
)
{
mElements
-
>
Remove
(
aElement
)
;
return
true
;
}
return
modified
;
}
if
(
mRemoveElements
-
>
Contains
(
aElement
)
)
{
return
modified
;
}
mRemoveElements
-
>
Insert
(
std
:
:
move
(
aElement
)
)
;
return
true
;
}
bool
Sanitizer
:
:
ReplaceElementWithChildren
(
const
StringOrSanitizerElementNamespace
&
aElement
)
{
MaybeMaterializeDefaultConfig
(
)
;
CanonicalName
element
=
CanonicalizeElement
(
aElement
)
;
if
(
mReplaceWithChildrenElements
&
&
mReplaceWithChildrenElements
-
>
Contains
(
element
)
)
{
return
false
;
}
if
(
mRemoveElements
)
{
mRemoveElements
-
>
Remove
(
element
)
;
}
else
{
mElements
-
>
Remove
(
element
)
;
}
if
(
!
mReplaceWithChildrenElements
)
{
mReplaceWithChildrenElements
.
emplace
(
)
;
}
mReplaceWithChildrenElements
-
>
Insert
(
std
:
:
move
(
element
)
)
;
return
true
;
}
bool
Sanitizer
:
:
AllowAttribute
(
const
StringOrSanitizerAttributeNamespace
&
aAttribute
)
{
MaybeMaterializeDefaultConfig
(
)
;
CanonicalName
attribute
=
CanonicalizeAttribute
(
aAttribute
)
;
if
(
mAttributes
)
{
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
exists
"
)
;
if
(
*
mDataAttributes
&
&
attribute
.
IsDataAttribute
(
)
)
{
return
false
;
}
if
(
mAttributes
-
>
Contains
(
attribute
)
)
{
return
false
;
}
if
(
mElements
)
{
for
(
CanonicalElementWithAttributes
&
element
:
mElements
-
>
Values
(
)
)
{
if
(
element
.
mAttributes
&
&
element
.
mAttributes
-
>
Contains
(
attribute
)
)
{
element
.
mAttributes
-
>
Remove
(
attribute
)
;
}
MOZ_ASSERT_IF
(
element
.
mRemoveAttributes
!
element
.
mRemoveAttributes
-
>
Contains
(
attribute
)
)
;
}
}
mAttributes
-
>
Insert
(
std
:
:
move
(
attribute
)
)
;
return
true
;
}
if
(
!
mRemoveAttributes
-
>
Contains
(
attribute
)
)
{
return
false
;
}
mRemoveAttributes
-
>
Remove
(
attribute
)
;
return
true
;
}
bool
Sanitizer
:
:
RemoveAttribute
(
const
StringOrSanitizerAttributeNamespace
&
aAttribute
)
{
MaybeMaterializeDefaultConfig
(
)
;
CanonicalName
attribute
=
CanonicalizeAttribute
(
aAttribute
)
;
return
RemoveAttributeCanonical
(
std
:
:
move
(
attribute
)
)
;
}
bool
Sanitizer
:
:
RemoveAttributeCanonical
(
CanonicalName
&
&
aAttribute
)
{
if
(
mAttributes
)
{
if
(
!
mAttributes
-
>
Contains
(
aAttribute
)
)
{
return
false
;
}
if
(
mElements
)
{
for
(
CanonicalElementWithAttributes
&
element
:
mElements
-
>
Values
(
)
)
{
if
(
element
.
mRemoveAttributes
&
&
element
.
mRemoveAttributes
-
>
Contains
(
aAttribute
)
)
{
element
.
mRemoveAttributes
-
>
Remove
(
aAttribute
)
;
}
}
}
mAttributes
-
>
Remove
(
aAttribute
)
;
return
true
;
}
if
(
mRemoveAttributes
-
>
Contains
(
aAttribute
)
)
{
return
false
;
}
if
(
mElements
)
{
for
(
CanonicalElementWithAttributes
&
element
:
mElements
-
>
Values
(
)
)
{
if
(
element
.
mAttributes
&
&
element
.
mAttributes
-
>
Contains
(
aAttribute
)
)
{
element
.
mAttributes
-
>
Remove
(
aAttribute
)
;
}
if
(
element
.
mRemoveAttributes
&
&
element
.
mRemoveAttributes
-
>
Contains
(
aAttribute
)
)
{
element
.
mRemoveAttributes
-
>
Remove
(
aAttribute
)
;
}
}
}
mRemoveAttributes
-
>
Insert
(
std
:
:
move
(
aAttribute
)
)
;
return
true
;
}
bool
Sanitizer
:
:
SetComments
(
bool
aAllow
)
{
if
(
mComments
=
=
aAllow
)
{
return
false
;
}
mComments
=
aAllow
;
return
true
;
}
bool
Sanitizer
:
:
SetDataAttributes
(
bool
aAllow
)
{
if
(
!
mIsDefaultConfig
&
&
!
mAttributes
)
{
return
false
;
}
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
exists
(
or
in
the
default
"
"
config
)
"
)
;
if
(
*
mDataAttributes
=
=
aAllow
)
{
return
false
;
}
if
(
!
mIsDefaultConfig
&
&
aAllow
)
{
mAttributes
-
>
Values
(
)
.
RemoveElementsBy
(
[
]
(
const
CanonicalName
&
aAttribute
)
{
return
aAttribute
.
IsDataAttribute
(
)
;
}
)
;
if
(
mElements
)
{
for
(
CanonicalElementWithAttributes
&
element
:
mElements
-
>
Values
(
)
)
{
if
(
element
.
mAttributes
)
{
element
.
mAttributes
-
>
Values
(
)
.
RemoveElementsBy
(
[
]
(
const
CanonicalName
&
aAttribute
)
{
return
aAttribute
.
IsDataAttribute
(
)
;
}
)
;
}
}
}
}
mDataAttributes
=
Some
(
aAllow
)
;
return
true
;
}
#
define
FOR_EACH_BASELINE_REMOVE_ELEMENT
(
ELEMENT
)
\
ELEMENT
(
XHTML
xhtml
script
)
\
ELEMENT
(
XHTML
xhtml
frame
)
\
ELEMENT
(
XHTML
xhtml
iframe
)
\
ELEMENT
(
XHTML
xhtml
object
)
\
ELEMENT
(
XHTML
xhtml
embed
)
\
ELEMENT
(
SVG
svg
script
)
\
ELEMENT
(
SVG
svg
use
)
bool
Sanitizer
:
:
RemoveUnsafe
(
)
{
MaybeMaterializeDefaultConfig
(
)
;
bool
result
=
false
;
#
define
ELEMENT
(
_
NSURI
LOCAL_NAME
)
\
if
(
RemoveElementCanonical
(
\
CanonicalName
(
nsGkAtoms
:
:
LOCAL_NAME
nsGkAtoms
:
:
nsuri_
#
#
NSURI
)
)
)
{
\
/
*
Step
3
.
2
.
If
the
call
returned
true
set
result
to
true
.
*
/
\
result
=
true
;
\
}
FOR_EACH_BASELINE_REMOVE_ELEMENT
(
ELEMENT
)
#
undef
ELEMENT
nsContentUtils
:
:
ForEachEventAttributeName
(
EventNameType_All
&
~
EventNameType_XUL
[
self
=
MOZ_KnownLive
(
this
)
&
result
]
(
nsAtom
*
aName
)
{
if
(
self
-
>
RemoveAttributeCanonical
(
CanonicalName
(
aName
nullptr
)
)
)
{
result
=
true
;
}
}
)
;
return
result
;
}
void
Sanitizer
:
:
Sanitize
(
nsINode
*
aNode
bool
aSafe
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
aNode
-
>
OwnerDoc
(
)
-
>
IsLoadedAsData
(
)
"
SanitizeChildren
relies
on
the
document
being
inert
to
be
safe
"
)
;
if
(
mIsDefaultConfig
)
{
AssertNoLists
(
)
;
SanitizeChildren
<
true
>
(
aNode
aSafe
)
;
}
else
{
AssertIsValid
(
)
;
SanitizeChildren
<
false
>
(
aNode
aSafe
)
;
}
}
static
RefPtr
<
nsAtom
>
ToNamespace
(
int32_t
aNamespaceID
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
return
nullptr
;
}
RefPtr
<
nsAtom
>
atom
=
nsNameSpaceManager
:
:
GetInstance
(
)
-
>
NameSpaceURIAtom
(
aNamespaceID
)
;
return
atom
;
}
static
bool
IsUnsafeElement
(
nsAtom
*
aLocalName
int32_t
aNamespaceID
)
{
#
define
ELEMENT
(
NSID
_
LOCAL_NAME
)
\
if
(
aNamespaceID
=
=
kNameSpaceID_
#
#
NSID
)
{
\
if
(
aLocalName
=
=
nsGkAtoms
:
:
LOCAL_NAME
)
{
\
return
true
;
\
}
\
}
FOR_EACH_BASELINE_REMOVE_ELEMENT
(
ELEMENT
)
#
undef
ELEMENT
return
false
;
}
template
<
bool
IsDefaultConfig
>
void
Sanitizer
:
:
SanitizeChildren
(
nsINode
*
aNode
bool
aSafe
)
{
nsCOMPtr
<
nsIContent
>
next
=
nullptr
;
for
(
nsCOMPtr
<
nsIContent
>
child
=
aNode
-
>
GetFirstChild
(
)
;
child
;
child
=
next
)
{
next
=
child
-
>
GetNextSibling
(
)
;
MOZ_ASSERT
(
child
-
>
IsText
(
)
|
|
child
-
>
IsComment
(
)
|
|
child
-
>
IsElement
(
)
|
|
child
-
>
NodeType
(
)
=
=
nsINode
:
:
DOCUMENT_TYPE_NODE
)
;
if
(
child
-
>
NodeType
(
)
=
=
nsINode
:
:
DOCUMENT_TYPE_NODE
)
{
continue
;
}
if
(
child
-
>
IsText
(
)
)
{
continue
;
}
if
(
child
-
>
IsComment
(
)
)
{
if
(
!
mComments
)
{
child
-
>
RemoveFromParent
(
)
;
}
continue
;
}
MOZ_ASSERT
(
child
-
>
IsElement
(
)
)
;
nsAtom
*
nameAtom
=
child
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
int32_t
namespaceID
=
child
-
>
NodeInfo
(
)
-
>
NamespaceID
(
)
;
Maybe
<
CanonicalName
>
elementName
;
[
[
maybe_unused
]
]
StaticAtomSet
*
elementAttributes
=
nullptr
;
if
constexpr
(
!
IsDefaultConfig
)
{
elementName
.
emplace
(
nameAtom
ToNamespace
(
namespaceID
)
)
;
if
(
aSafe
&
&
IsUnsafeElement
(
nameAtom
namespaceID
)
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
if
(
mReplaceWithChildrenElements
&
&
mReplaceWithChildrenElements
-
>
Contains
(
*
elementName
)
)
{
nsCOMPtr
<
nsIContent
>
parent
=
child
-
>
GetParent
(
)
;
nsCOMPtr
<
nsIContent
>
firstChild
=
child
-
>
GetFirstChild
(
)
;
nsCOMPtr
<
nsIContent
>
newChild
=
firstChild
;
for
(
;
newChild
;
newChild
=
child
-
>
GetFirstChild
(
)
)
{
ErrorResult
rv
;
parent
-
>
InsertBefore
(
*
newChild
child
rv
)
;
if
(
rv
.
Failed
(
)
)
{
break
;
}
}
child
-
>
RemoveFromParent
(
)
;
if
(
firstChild
)
{
next
=
firstChild
;
}
continue
;
}
if
(
mRemoveElements
)
{
if
(
mRemoveElements
-
>
Contains
(
*
elementName
)
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
}
if
(
mElements
)
{
if
(
!
mElements
-
>
Contains
(
*
elementName
)
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
}
}
else
{
bool
found
=
false
;
if
(
nameAtom
-
>
IsStatic
(
)
)
{
ElementsWithAttributes
*
elements
=
nullptr
;
if
(
namespaceID
=
=
kNameSpaceID_XHTML
)
{
elements
=
sDefaultHTMLElements
;
}
else
if
(
namespaceID
=
=
kNameSpaceID_MathML
)
{
elements
=
sDefaultMathMLElements
;
}
else
if
(
namespaceID
=
=
kNameSpaceID_SVG
)
{
elements
=
sDefaultSVGElements
;
}
if
(
elements
)
{
if
(
auto
lookup
=
elements
-
>
Lookup
(
nameAtom
-
>
AsStatic
(
)
)
)
{
found
=
true
;
elementAttributes
=
lookup
-
>
get
(
)
;
}
}
}
if
(
!
found
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
MOZ_ASSERT
(
!
IsUnsafeElement
(
nameAtom
namespaceID
)
"
The
default
config
has
no
unsafe
elements
"
)
;
}
if
(
auto
*
templateEl
=
HTMLTemplateElement
:
:
FromNode
(
child
)
)
{
RefPtr
<
DocumentFragment
>
frag
=
templateEl
-
>
Content
(
)
;
SanitizeChildren
<
IsDefaultConfig
>
(
frag
aSafe
)
;
}
if
(
RefPtr
<
ShadowRoot
>
shadow
=
child
-
>
GetShadowRoot
(
)
)
{
SanitizeChildren
<
IsDefaultConfig
>
(
shadow
aSafe
)
;
}
if
constexpr
(
!
IsDefaultConfig
)
{
SanitizeAttributes
(
child
-
>
AsElement
(
)
*
elementName
aSafe
)
;
}
else
{
SanitizeDefaultConfigAttributes
(
child
-
>
AsElement
(
)
elementAttributes
aSafe
)
;
}
SanitizeChildren
<
IsDefaultConfig
>
(
child
aSafe
)
;
}
}
static
inline
bool
IsDataAttribute
(
nsAtom
*
aName
int32_t
aNamespaceID
)
{
return
StringBeginsWith
(
nsDependentAtomString
(
aName
)
u
"
data
-
"
_ns
)
&
&
aNamespaceID
=
=
kNameSpaceID_None
;
}
static
bool
RemoveJavascriptNavigationURLAttribute
(
Element
*
aElement
nsAtom
*
aLocalName
int32_t
aNamespaceID
)
{
auto
containsJavascriptURL
=
[
&
]
(
)
{
nsAutoString
value
;
if
(
!
aElement
-
>
GetAttr
(
aNamespaceID
aLocalName
value
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
uri
;
if
(
NS_FAILED
(
NS_NewURI
(
getter_AddRefs
(
uri
)
value
)
)
)
{
return
false
;
}
return
uri
-
>
SchemeIs
(
"
javascript
"
)
;
}
;
if
(
(
aElement
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
a
nsGkAtoms
:
:
area
nsGkAtoms
:
:
base
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
href
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
|
|
(
aElement
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
button
nsGkAtoms
:
:
input
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
formaction
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
|
|
(
aElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
form
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
action
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
|
|
(
aElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
src
&
&
aNamespaceID
=
=
kNameSpaceID_None
)
|
|
(
aElement
-
>
IsSVGElement
(
nsGkAtoms
:
:
a
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
href
&
&
(
aNamespaceID
=
=
kNameSpaceID_None
|
|
aNamespaceID
=
=
kNameSpaceID_XLink
)
)
)
{
if
(
containsJavascriptURL
(
)
)
{
return
true
;
}
}
;
if
(
aElement
-
>
IsMathMLElement
(
)
&
&
aLocalName
=
=
nsGkAtoms
:
:
href
&
&
(
aNamespaceID
=
=
kNameSpaceID_None
|
|
aNamespaceID
=
=
kNameSpaceID_XLink
)
)
{
if
(
containsJavascriptURL
(
)
)
{
return
true
;
}
}
if
(
aLocalName
=
=
nsGkAtoms
:
:
attributeName
&
&
aNamespaceID
=
=
kNameSpaceID_None
&
&
aElement
-
>
IsAnyOfSVGElements
(
nsGkAtoms
:
:
animate
nsGkAtoms
:
:
animateMotion
nsGkAtoms
:
:
animateTransform
nsGkAtoms
:
:
set
)
)
{
nsAutoString
value
;
if
(
!
aElement
-
>
GetAttr
(
aNamespaceID
aLocalName
value
)
)
{
return
false
;
}
return
value
.
EqualsLiteral
(
"
href
"
)
|
|
value
.
EqualsLiteral
(
"
xlink
:
href
"
)
;
}
return
false
;
}
void
Sanitizer
:
:
SanitizeAttributes
(
Element
*
aChild
const
CanonicalName
&
aElementName
bool
aSafe
)
{
MOZ_ASSERT
(
!
mIsDefaultConfig
)
;
const
CanonicalElementWithAttributes
*
elementWithAttributes
=
mElements
?
mElements
-
>
Get
(
aElementName
)
:
nullptr
;
int32_t
count
=
int32_t
(
aChild
-
>
GetAttrCount
(
)
)
;
for
(
int32_t
i
=
count
-
1
;
i
>
=
0
;
-
-
i
)
{
const
nsAttrName
*
attr
=
aChild
-
>
GetAttrNameAt
(
i
)
;
RefPtr
<
nsAtom
>
attrLocalName
=
attr
-
>
LocalName
(
)
;
int32_t
attrNs
=
attr
-
>
NamespaceID
(
)
;
CanonicalName
attrName
(
attrLocalName
ToNamespace
(
attrNs
)
)
;
bool
remove
=
false
;
if
(
aSafe
&
&
attrNs
=
=
kNameSpaceID_None
&
&
nsContentUtils
:
:
IsEventAttributeName
(
attrLocalName
EventNameType_All
&
~
EventNameType_XUL
)
)
{
remove
=
true
;
}
else
if
(
elementWithAttributes
&
&
elementWithAttributes
-
>
mRemoveAttributes
&
&
elementWithAttributes
-
>
mRemoveAttributes
-
>
Contains
(
attrName
)
)
{
remove
=
true
;
}
else
if
(
mAttributes
)
{
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
exists
iff
mAttributes
exists
"
)
;
if
(
!
mAttributes
-
>
Contains
(
attrName
)
&
&
!
(
elementWithAttributes
&
&
elementWithAttributes
-
>
mAttributes
&
&
elementWithAttributes
-
>
mAttributes
-
>
Contains
(
attrName
)
)
&
&
!
(
*
mDataAttributes
&
&
IsDataAttribute
(
attrLocalName
attrNs
)
)
)
{
remove
=
true
;
}
}
else
{
if
(
elementWithAttributes
&
&
elementWithAttributes
-
>
mAttributes
&
&
!
elementWithAttributes
-
>
mAttributes
-
>
Contains
(
attrName
)
)
{
remove
=
true
;
}
else
if
(
mRemoveAttributes
-
>
Contains
(
attrName
)
)
{
remove
=
true
;
}
}
if
(
aSafe
&
&
!
remove
)
{
remove
=
RemoveJavascriptNavigationURLAttribute
(
aChild
attrLocalName
attrNs
)
;
}
if
(
remove
)
{
aChild
-
>
UnsetAttr
(
attr
-
>
NamespaceID
(
)
attr
-
>
LocalName
(
)
false
)
;
-
-
count
;
i
=
count
;
}
}
}
void
Sanitizer
:
:
SanitizeDefaultConfigAttributes
(
Element
*
aChild
StaticAtomSet
*
aElementAttributes
bool
aSafe
)
{
MOZ_ASSERT
(
mIsDefaultConfig
)
;
int32_t
count
=
int32_t
(
aChild
-
>
GetAttrCount
(
)
)
;
for
(
int32_t
i
=
count
-
1
;
i
>
=
0
;
-
-
i
)
{
const
nsAttrName
*
attr
=
aChild
-
>
GetAttrNameAt
(
i
)
;
RefPtr
<
nsAtom
>
attrLocalName
=
attr
-
>
LocalName
(
)
;
int32_t
attrNs
=
attr
-
>
NamespaceID
(
)
;
bool
remove
=
false
;
MOZ_ASSERT
(
mDataAttributes
.
isSome
(
)
"
mDataAttributes
always
exists
in
the
default
config
"
)
;
if
(
attrNs
!
=
kNameSpaceID_None
|
|
(
!
sDefaultAttributes
-
>
Contains
(
attrLocalName
)
&
&
!
(
aElementAttributes
&
&
aElementAttributes
-
>
Contains
(
attrLocalName
)
)
&
&
!
(
*
mDataAttributes
&
&
IsDataAttribute
(
attrLocalName
attrNs
)
)
)
)
{
remove
=
true
;
}
else
if
(
aSafe
)
{
remove
=
RemoveJavascriptNavigationURLAttribute
(
aChild
attrLocalName
attrNs
)
;
}
MOZ_ASSERT_IF
(
!
remove
!
nsContentUtils
:
:
IsEventAttributeName
(
attrLocalName
EventNameType_All
&
~
EventNameType_XUL
)
)
;
if
(
remove
)
{
aChild
-
>
UnsetAttr
(
attr
-
>
NamespaceID
(
)
attr
-
>
LocalName
(
)
false
)
;
-
-
count
;
i
=
count
;
}
}
}
void
Sanitizer
:
:
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
)
{
uint64_t
innerWindowID
=
0
;
bool
isPrivateBrowsing
=
true
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
window
&
&
window
-
>
GetDoc
(
)
)
{
auto
*
doc
=
window
-
>
GetDoc
(
)
;
innerWindowID
=
doc
-
>
InnerWindowID
(
)
;
isPrivateBrowsing
=
doc
-
>
IsInPrivateBrowsing
(
)
;
}
nsAutoString
logMsg
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eSECURITY_PROPERTIES
aName
aParams
logMsg
)
;
LogMessage
(
logMsg
aFlags
innerWindowID
isPrivateBrowsing
)
;
}
void
Sanitizer
:
:
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
)
{
nsString
message
;
message
.
AppendLiteral
(
u
"
Sanitizer
:
"
)
;
message
.
Append
(
aMessage
)
;
constexpr
auto
category
=
"
Sanitizer
"
_ns
;
if
(
aInnerWindowID
>
0
)
{
nsContentUtils
:
:
ReportToConsoleByWindowID
(
message
aFlags
category
aInnerWindowID
)
;
}
else
{
nsContentUtils
:
:
LogSimpleConsoleError
(
message
category
aFromPrivateWindow
true
aFlags
)
;
}
}
}
