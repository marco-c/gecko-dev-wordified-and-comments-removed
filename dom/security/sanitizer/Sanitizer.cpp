#
include
"
Sanitizer
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
HTMLTemplateElement
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
namespace
mozilla
:
:
dom
{
using
namespace
sanitizer
;
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Sanitizer
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Sanitizer
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Sanitizer
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Sanitizer
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
Sanitizer
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Sanitizer_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
New
(
nsIGlobalObject
*
aGlobal
const
SanitizerConfig
&
aConfig
ErrorResult
&
aRv
)
{
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
aGlobal
)
;
sanitizer
-
>
SetConfig
(
aConfig
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
return
sanitizer
.
forget
(
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
New
(
nsIGlobalObject
*
aGlobal
const
SanitizerPresets
aConfig
ErrorResult
&
aRv
)
{
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
aGlobal
)
;
return
sanitizer
.
forget
(
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
SanitizerConfigOrSanitizerPresets
&
aConfig
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
aConfig
.
IsSanitizerConfig
(
)
)
{
return
New
(
global
aConfig
.
GetAsSanitizerConfig
(
)
aRv
)
;
}
return
New
(
global
aConfig
.
GetAsSanitizerPresets
(
)
aRv
)
;
}
void
Sanitizer
:
:
SetConfig
(
const
SanitizerConfig
&
aConfig
ErrorResult
&
aRv
)
{
if
(
aConfig
.
mElements
.
WasPassed
(
)
)
{
for
(
const
auto
&
element
:
aConfig
.
mElements
.
Value
(
)
)
{
AllowElement
(
element
)
;
}
}
if
(
aConfig
.
mRemoveElements
.
WasPassed
(
)
)
{
for
(
const
auto
&
element
:
aConfig
.
mRemoveElements
.
Value
(
)
)
{
RemoveElement
(
element
)
;
}
}
if
(
aConfig
.
mReplaceWithChildrenElements
.
WasPassed
(
)
)
{
for
(
const
auto
&
element
:
aConfig
.
mReplaceWithChildrenElements
.
Value
(
)
)
{
ReplaceElementWithChildren
(
element
)
;
}
}
if
(
aConfig
.
mAttributes
.
WasPassed
(
)
)
{
for
(
const
auto
&
attribute
:
aConfig
.
mAttributes
.
Value
(
)
)
{
AllowAttribute
(
attribute
)
;
}
}
if
(
aConfig
.
mRemoveAttributes
.
WasPassed
(
)
)
{
for
(
const
auto
&
attribute
:
aConfig
.
mRemoveAttributes
.
Value
(
)
)
{
RemoveAttribute
(
attribute
)
;
}
}
if
(
aConfig
.
mComments
.
WasPassed
(
)
)
{
SetComments
(
aConfig
.
mComments
.
Value
(
)
)
;
}
if
(
aConfig
.
mDataAttributes
.
WasPassed
(
)
)
{
SetDataAttributes
(
aConfig
.
mDataAttributes
.
Value
(
)
)
;
}
auto
isSameSize
=
[
]
(
const
auto
&
aInputConfig
const
auto
&
aProcessedConfig
)
{
size_t
sizeInput
=
aInputConfig
.
WasPassed
(
)
?
aInputConfig
.
Value
(
)
.
Length
(
)
:
0
;
size_t
sizeProcessed
=
aProcessedConfig
.
Values
(
)
.
Length
(
)
;
return
sizeInput
=
=
sizeProcessed
;
}
;
if
(
!
isSameSize
(
aConfig
.
mElements
mElements
)
)
{
aRv
.
ThrowTypeError
(
"
'
elements
'
changed
"
)
;
return
;
}
if
(
!
isSameSize
(
aConfig
.
mRemoveElements
mRemoveElements
)
)
{
aRv
.
ThrowTypeError
(
"
'
removeElements
'
changed
"
)
;
return
;
}
if
(
!
isSameSize
(
aConfig
.
mReplaceWithChildrenElements
mReplaceWithChildrenElements
)
)
{
aRv
.
ThrowTypeError
(
"
'
replaceWithChildrenElements
'
changed
"
)
;
return
;
}
if
(
!
isSameSize
(
aConfig
.
mAttributes
mAttributes
)
)
{
aRv
.
ThrowTypeError
(
"
'
attributes
'
changed
"
)
;
return
;
}
if
(
!
isSameSize
(
aConfig
.
mRemoveAttributes
mRemoveAttributes
)
)
{
aRv
.
ThrowTypeError
(
"
'
removeAttributes
'
changed
"
)
;
return
;
}
if
(
aConfig
.
mElements
.
WasPassed
(
)
&
&
aConfig
.
mRemoveElements
.
WasPassed
(
)
)
{
aRv
.
ThrowTypeError
(
"
'
elements
'
and
'
removeElements
'
are
not
allowed
at
the
same
time
"
)
;
return
;
}
if
(
aConfig
.
mAttributes
.
WasPassed
(
)
&
&
aConfig
.
mRemoveAttributes
.
WasPassed
(
)
)
{
aRv
.
ThrowTypeError
(
"
'
attributes
'
and
'
removeAttributes
'
are
not
allowed
at
the
same
time
"
)
;
return
;
}
}
void
Sanitizer
:
:
Get
(
SanitizerConfig
&
aConfig
)
{
nsTArray
<
OwningStringOrSanitizerElementNamespaceWithAttributes
>
elements
;
for
(
const
CanonicalElementWithAttributes
&
canonical
:
mElements
.
Values
(
)
)
{
elements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespaceWithAttributes
(
)
=
canonical
.
ToSanitizerElementNamespaceWithAttributes
(
)
;
}
aConfig
.
mElements
.
Construct
(
std
:
:
move
(
elements
)
)
;
nsTArray
<
OwningStringOrSanitizerElementNamespace
>
removeElements
;
for
(
const
CanonicalName
&
canonical
:
mRemoveElements
.
Values
(
)
)
{
removeElements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespace
(
)
=
canonical
.
ToSanitizerElementNamespace
(
)
;
}
aConfig
.
mRemoveElements
.
Construct
(
std
:
:
move
(
removeElements
)
)
;
nsTArray
<
OwningStringOrSanitizerElementNamespace
>
replaceWithChildrenElements
;
for
(
const
CanonicalName
&
canonical
:
mReplaceWithChildrenElements
.
Values
(
)
)
{
replaceWithChildrenElements
.
AppendElement
(
)
-
>
SetAsSanitizerElementNamespace
(
)
=
canonical
.
ToSanitizerElementNamespace
(
)
;
}
aConfig
.
mReplaceWithChildrenElements
.
Construct
(
std
:
:
move
(
replaceWithChildrenElements
)
)
;
aConfig
.
mAttributes
.
Construct
(
ToSanitizerAttributes
(
mAttributes
)
)
;
aConfig
.
mRemoveAttributes
.
Construct
(
ToSanitizerAttributes
(
mRemoveAttributes
)
)
;
aConfig
.
mComments
.
Construct
(
mComments
)
;
aConfig
.
mDataAttributes
.
Construct
(
mDataAttributes
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
StringOrSanitizerElementNamespace
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespace
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
OwningStringOrSanitizerElementNamespace
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespace
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
StringOrSanitizerElementNamespaceWithAttributes
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
}
auto
&
GetAsSanitizerElementNamespace
(
const
OwningStringOrSanitizerElementNamespaceWithAttributes
&
aElement
)
{
return
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
}
template
<
typename
SanitizerElement
>
static
CanonicalName
CanonicalizeElement
(
const
SanitizerElement
&
aElement
)
{
if
(
aElement
.
IsString
(
)
)
{
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
aElement
.
GetAsString
(
)
)
;
return
CanonicalName
(
nameAtom
nsGkAtoms
:
:
nsuri_xhtml
)
;
}
const
auto
&
elem
=
GetAsSanitizerElementNamespace
(
aElement
)
;
MOZ_ASSERT
(
!
elem
.
mName
.
IsVoid
(
)
)
;
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
elem
.
mName
)
;
RefPtr
<
nsAtom
>
namespaceAtom
;
if
(
!
elem
.
mNamespace
.
IsVoid
(
)
)
{
namespaceAtom
=
NS_AtomizeMainThread
(
elem
.
mNamespace
)
;
}
else
{
namespaceAtom
=
nsGkAtoms
:
:
nsuri_xhtml
;
}
return
CanonicalName
(
nameAtom
namespaceAtom
)
;
}
template
<
typename
SanitizerAttribute
>
static
CanonicalName
CanonicalizeAttribute
(
const
SanitizerAttribute
&
aAttribute
)
{
if
(
aAttribute
.
IsString
(
)
)
{
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
aAttribute
.
GetAsString
(
)
)
;
return
CanonicalName
(
nameAtom
nullptr
)
;
}
const
auto
&
attr
=
aAttribute
.
GetAsSanitizerAttributeNamespace
(
)
;
MOZ_ASSERT
(
!
attr
.
mName
.
IsVoid
(
)
)
;
RefPtr
<
nsAtom
>
nameAtom
=
NS_AtomizeMainThread
(
attr
.
mName
)
;
RefPtr
<
nsAtom
>
namespaceAtom
=
nullptr
;
if
(
!
attr
.
mNamespace
.
IsVoid
(
)
)
{
namespaceAtom
=
NS_AtomizeMainThread
(
attr
.
mNamespace
)
;
}
return
CanonicalName
(
nameAtom
namespaceAtom
)
;
}
template
<
typename
SanitizerElementWithAttributes
>
static
CanonicalElementWithAttributes
CanonicalizeElementWithAttributes
(
const
SanitizerElementWithAttributes
&
aElement
)
{
CanonicalElementWithAttributes
result
=
CanonicalElementWithAttributes
(
CanonicalizeElement
(
aElement
)
)
;
if
(
aElement
.
IsSanitizerElementNamespaceWithAttributes
(
)
)
{
auto
&
elem
=
aElement
.
GetAsSanitizerElementNamespaceWithAttributes
(
)
;
if
(
elem
.
mAttributes
.
WasPassed
(
)
)
{
ListSet
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
elem
.
mAttributes
.
Value
(
)
)
{
attributes
.
Insert
(
CanonicalizeAttribute
(
attribute
)
)
;
}
result
.
mAttributes
=
Some
(
std
:
:
move
(
attributes
)
)
;
}
if
(
elem
.
mRemoveAttributes
.
WasPassed
(
)
)
{
ListSet
<
CanonicalName
>
attributes
;
for
(
const
auto
&
attribute
:
elem
.
mRemoveAttributes
.
Value
(
)
)
{
attributes
.
Insert
(
CanonicalizeAttribute
(
attribute
)
)
;
}
result
.
mRemoveAttributes
=
Some
(
std
:
:
move
(
attributes
)
)
;
}
}
return
result
;
}
template
<
typename
SanitizerElementWithAttributes
>
void
Sanitizer
:
:
AllowElement
(
const
SanitizerElementWithAttributes
&
aElement
)
{
CanonicalElementWithAttributes
element
=
CanonicalizeElementWithAttributes
(
aElement
)
;
mElements
.
Remove
(
element
)
;
mRemoveElements
.
Remove
(
element
)
;
mReplaceWithChildrenElements
.
Remove
(
element
)
;
mElements
.
Insert
(
std
:
:
move
(
element
)
)
;
}
template
void
Sanitizer
:
:
AllowElement
(
const
StringOrSanitizerElementNamespaceWithAttributes
&
)
;
template
<
typename
SanitizerElement
>
void
Sanitizer
:
:
RemoveElement
(
const
SanitizerElement
&
aElement
)
{
CanonicalName
element
=
CanonicalizeElement
(
aElement
)
;
mElements
.
Remove
(
element
)
;
mReplaceWithChildrenElements
.
Remove
(
element
)
;
mRemoveElements
.
Insert
(
std
:
:
move
(
element
)
)
;
}
template
void
Sanitizer
:
:
RemoveElement
(
const
StringOrSanitizerElementNamespace
&
)
;
template
<
typename
SanitizerElement
>
void
Sanitizer
:
:
ReplaceElementWithChildren
(
const
SanitizerElement
&
aElement
)
{
CanonicalName
element
=
CanonicalizeElement
(
aElement
)
;
mRemoveElements
.
Remove
(
element
)
;
mElements
.
Remove
(
element
)
;
mReplaceWithChildrenElements
.
Insert
(
std
:
:
move
(
element
)
)
;
}
template
void
Sanitizer
:
:
ReplaceElementWithChildren
(
const
StringOrSanitizerElementNamespace
&
)
;
template
<
typename
SanitizerAttribute
>
void
Sanitizer
:
:
AllowAttribute
(
const
SanitizerAttribute
&
aAttribute
)
{
CanonicalName
attribute
=
CanonicalizeAttribute
(
aAttribute
)
;
mRemoveAttributes
.
Remove
(
attribute
)
;
mAttributes
.
Insert
(
std
:
:
move
(
attribute
)
)
;
}
template
void
Sanitizer
:
:
AllowAttribute
(
const
StringOrSanitizerAttributeNamespace
&
)
;
template
<
typename
SanitizerAttribute
>
void
Sanitizer
:
:
RemoveAttribute
(
const
SanitizerAttribute
&
aAttribute
)
{
CanonicalName
attribute
=
CanonicalizeAttribute
(
aAttribute
)
;
mAttributes
.
Remove
(
attribute
)
;
mRemoveAttributes
.
Insert
(
std
:
:
move
(
attribute
)
)
;
}
template
void
Sanitizer
:
:
RemoveAttribute
(
const
StringOrSanitizerAttributeNamespace
&
)
;
void
Sanitizer
:
:
SetComments
(
bool
aAllow
)
{
mComments
=
aAllow
;
}
void
Sanitizer
:
:
SetDataAttributes
(
bool
aAllow
)
{
mDataAttributes
=
aAllow
;
}
void
Sanitizer
:
:
RemoveUnsafe
(
)
{
}
RefPtr
<
DocumentFragment
>
Sanitizer
:
:
SanitizeFragment
(
RefPtr
<
DocumentFragment
>
aFragment
bool
aSafe
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
SanitizeChildren
(
aFragment
aSafe
)
;
return
aFragment
.
forget
(
)
;
}
static
RefPtr
<
nsAtom
>
ToNamespace
(
int32_t
aNamespaceID
)
{
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
return
nullptr
;
}
RefPtr
<
nsAtom
>
atom
=
nsNameSpaceManager
:
:
GetInstance
(
)
-
>
NameSpaceURIAtom
(
aNamespaceID
)
;
return
atom
;
}
void
Sanitizer
:
:
SanitizeChildren
(
nsINode
*
aNode
bool
aSafe
)
{
nsCOMPtr
<
nsIContent
>
next
=
nullptr
;
for
(
nsCOMPtr
<
nsIContent
>
child
=
aNode
-
>
GetFirstChild
(
)
;
child
;
child
=
next
)
{
next
=
child
-
>
GetNextSibling
(
)
;
if
(
child
-
>
IsText
(
)
)
{
continue
;
}
if
(
child
-
>
IsComment
(
)
)
{
if
(
!
mComments
)
{
child
-
>
RemoveFromParent
(
)
;
}
continue
;
}
MOZ_ASSERT
(
child
-
>
IsElement
(
)
)
;
nsAtom
*
nameAtom
=
child
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
int32_t
namespaceID
=
child
-
>
NodeInfo
(
)
-
>
NamespaceID
(
)
;
CanonicalName
elementName
(
nameAtom
ToNamespace
(
namespaceID
)
)
;
if
(
aSafe
)
{
if
(
(
namespaceID
=
=
kNameSpaceID_XHTML
&
&
(
nameAtom
=
=
nsGkAtoms
:
:
script
|
|
nameAtom
=
=
nsGkAtoms
:
:
frame
|
|
nameAtom
=
=
nsGkAtoms
:
:
iframe
|
|
nameAtom
=
=
nsGkAtoms
:
:
object
|
|
nameAtom
=
=
nsGkAtoms
:
:
embed
)
)
|
|
(
namespaceID
=
=
kNameSpaceID_SVG
&
&
(
nameAtom
=
=
nsGkAtoms
:
:
script
|
|
nameAtom
=
=
nsGkAtoms
:
:
use
)
)
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
}
if
(
mRemoveElements
.
Contains
(
elementName
)
|
|
(
!
mElements
.
IsEmpty
(
)
&
&
!
mElements
.
Contains
(
elementName
)
)
)
{
child
-
>
RemoveFromParent
(
)
;
continue
;
}
if
(
mReplaceWithChildrenElements
.
Contains
(
elementName
)
)
{
nsCOMPtr
<
nsIContent
>
parent
=
child
-
>
GetParent
(
)
;
nsCOMPtr
<
nsIContent
>
firstChild
=
child
-
>
GetFirstChild
(
)
;
nsCOMPtr
<
nsIContent
>
newChild
=
firstChild
;
for
(
;
newChild
;
newChild
=
child
-
>
GetFirstChild
(
)
)
{
ErrorResult
rv
;
parent
-
>
InsertBefore
(
*
newChild
child
rv
)
;
if
(
rv
.
Failed
(
)
)
{
break
;
}
}
child
-
>
RemoveFromParent
(
)
;
if
(
firstChild
)
{
next
=
firstChild
;
}
continue
;
}
if
(
auto
*
templateEl
=
HTMLTemplateElement
:
:
FromNode
(
child
)
)
{
RefPtr
<
DocumentFragment
>
frag
=
templateEl
-
>
Content
(
)
;
SanitizeChildren
(
frag
aSafe
)
;
}
if
(
RefPtr
<
ShadowRoot
>
shadow
=
child
-
>
GetShadowRoot
(
)
)
{
SanitizeChildren
(
shadow
aSafe
)
;
}
SanitizeAttributes
(
child
-
>
AsElement
(
)
elementName
aSafe
)
;
SanitizeChildren
(
child
aSafe
)
;
}
}
void
Sanitizer
:
:
SanitizeAttributes
(
Element
*
aChild
const
CanonicalName
&
aElementName
bool
aSafe
)
{
const
CanonicalElementWithAttributes
*
elementWithAttributes
=
nullptr
;
if
(
auto
index
=
mElements
.
Values
(
)
.
IndexOf
(
aElementName
)
;
index
!
=
mElements
.
Values
(
)
.
NoIndex
)
{
elementWithAttributes
=
&
mElements
.
Values
(
)
[
index
]
;
}
int32_t
count
=
int32_t
(
aChild
-
>
GetAttrCount
(
)
)
;
for
(
int32_t
i
=
count
-
1
;
i
>
=
0
;
-
-
i
)
{
const
nsAttrName
*
attr
=
aChild
-
>
GetAttrNameAt
(
i
)
;
RefPtr
<
nsAtom
>
attrLocalName
=
attr
-
>
LocalName
(
)
;
int32_t
attrNs
=
attr
-
>
NamespaceID
(
)
;
CanonicalName
attrName
(
attrLocalName
ToNamespace
(
attrNs
)
)
;
bool
remove
=
false
;
if
(
aSafe
&
&
attrNs
=
=
kNameSpaceID_None
&
&
nsContentUtils
:
:
IsEventAttributeName
(
attrLocalName
EventNameType_All
&
~
EventNameType_XUL
)
)
{
remove
=
true
;
}
else
if
(
mRemoveAttributes
.
Contains
(
attrName
)
)
{
remove
=
true
;
}
else
if
(
elementWithAttributes
&
&
elementWithAttributes
-
>
mRemoveAttributes
&
&
elementWithAttributes
-
>
mRemoveAttributes
-
>
Contains
(
attrName
)
)
{
remove
=
true
;
}
else
if
(
(
!
mAttributes
.
IsEmpty
(
)
&
&
!
mAttributes
.
Contains
(
attrName
)
)
&
&
!
(
elementWithAttributes
&
&
elementWithAttributes
-
>
mAttributes
&
&
elementWithAttributes
-
>
mAttributes
-
>
Contains
(
attrName
)
)
&
&
!
(
StringBeginsWith
(
nsDependentAtomString
(
attrLocalName
)
u
"
data
-
"
_ns
)
&
&
attrNs
=
=
kNameSpaceID_None
&
&
mDataAttributes
)
)
{
remove
=
true
;
}
else
if
(
aSafe
)
{
}
if
(
remove
)
{
aChild
-
>
UnsetAttr
(
attr
-
>
NamespaceID
(
)
attr
-
>
LocalName
(
)
false
)
;
-
-
count
;
i
=
count
;
}
}
}
void
Sanitizer
:
:
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
)
{
uint64_t
innerWindowID
=
0
;
bool
isPrivateBrowsing
=
true
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
window
&
&
window
-
>
GetDoc
(
)
)
{
auto
*
doc
=
window
-
>
GetDoc
(
)
;
innerWindowID
=
doc
-
>
InnerWindowID
(
)
;
isPrivateBrowsing
=
doc
-
>
IsInPrivateBrowsing
(
)
;
}
nsAutoString
logMsg
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eSECURITY_PROPERTIES
aName
aParams
logMsg
)
;
LogMessage
(
logMsg
aFlags
innerWindowID
isPrivateBrowsing
)
;
}
void
Sanitizer
:
:
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
)
{
nsString
message
;
message
.
AppendLiteral
(
u
"
Sanitizer
:
"
)
;
message
.
Append
(
aMessage
)
;
constexpr
auto
category
=
"
Sanitizer
"
_ns
;
if
(
aInnerWindowID
>
0
)
{
nsContentUtils
:
:
ReportToConsoleByWindowID
(
message
aFlags
category
aInnerWindowID
)
;
}
else
{
nsContentUtils
:
:
LogSimpleConsoleError
(
message
category
aFromPrivateWindow
true
aFlags
)
;
}
}
}
