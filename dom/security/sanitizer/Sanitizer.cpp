#
include
"
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsTreeSanitizer
.
h
"
#
include
"
Sanitizer
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
Sanitizer
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
Sanitizer
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
Sanitizer
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
Sanitizer
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
JSObject
*
Sanitizer
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Sanitizer_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
Sanitizer
>
Sanitizer
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
SanitizerConfig
&
aOptions
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
RefPtr
<
Sanitizer
>
sanitizer
=
new
Sanitizer
(
global
aOptions
)
;
AutoTArray
<
nsString
1
>
params
=
{
}
;
sanitizer
-
>
LogLocalizedString
(
"
SanitizerOptionsDiscarded
"
params
nsIScriptError
:
:
infoFlag
)
;
return
sanitizer
.
forget
(
)
;
}
already_AddRefed
<
DocumentFragment
>
Sanitizer
:
:
InputToNewFragment
(
const
mozilla
:
:
dom
:
:
DocumentFragmentOrDocument
&
aInput
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
nsAutoString
innerHTML
;
if
(
aInput
.
IsDocumentFragment
(
)
)
{
RefPtr
<
DocumentFragment
>
inFragment
=
&
aInput
.
GetAsDocumentFragment
(
)
;
inFragment
-
>
GetInnerHTML
(
innerHTML
)
;
}
else
if
(
aInput
.
IsDocument
(
)
)
{
RefPtr
<
Document
>
doc
=
&
aInput
.
GetAsDocument
(
)
;
nsCOMPtr
<
Element
>
docElement
=
doc
-
>
GetDocumentElement
(
)
;
if
(
docElement
)
{
docElement
-
>
GetInnerHTML
(
innerHTML
IgnoreErrors
(
)
)
;
}
}
if
(
innerHTML
.
IsEmpty
(
)
)
{
AutoTArray
<
nsString
1
>
params
=
{
}
;
LogLocalizedString
(
"
SanitizerRcvdNoInput
"
params
nsIScriptError
:
:
warningFlag
)
;
RefPtr
<
DocumentFragment
>
emptyFragment
=
window
-
>
GetDoc
(
)
-
>
CreateDocumentFragment
(
)
;
return
emptyFragment
.
forget
(
)
;
}
RefPtr
<
Document
>
emptyDoc
=
nsContentUtils
:
:
CreateInertHTMLDocument
(
window
-
>
GetDoc
(
)
)
;
if
(
!
emptyDoc
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
info
=
emptyDoc
-
>
NodeInfoManager
(
)
-
>
GetNodeInfo
(
nsGkAtoms
:
:
body
nullptr
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
nsCOMPtr
<
nsINode
>
context
=
NS_NewHTMLBodyElement
(
info
.
forget
(
)
mozilla
:
:
dom
:
:
FromParser
:
:
FROM_PARSER_FRAGMENT
)
;
RefPtr
<
DocumentFragment
>
fragment
=
nsContentUtils
:
:
CreateContextualFragment
(
context
innerHTML
true
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
aRv
.
ThrowInvalidStateError
(
"
Could
not
parse
input
"
)
;
return
nullptr
;
}
return
fragment
.
forget
(
)
;
}
already_AddRefed
<
DocumentFragment
>
Sanitizer
:
:
Sanitize
(
const
mozilla
:
:
dom
:
:
DocumentFragmentOrDocument
&
aInput
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
RefPtr
<
DocumentFragment
>
fragment
=
Sanitizer
:
:
InputToNewFragment
(
aInput
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
mTreeSanitizer
.
Sanitize
(
fragment
)
;
return
fragment
.
forget
(
)
;
}
RefPtr
<
DocumentFragment
>
Sanitizer
:
:
SanitizeFragment
(
RefPtr
<
DocumentFragment
>
aFragment
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
!
window
|
|
!
window
-
>
GetDoc
(
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
mTreeSanitizer
.
Sanitize
(
aFragment
)
;
return
aFragment
.
forget
(
)
;
}
void
Sanitizer
:
:
LogLocalizedString
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
uint32_t
aFlags
)
{
uint64_t
innerWindowID
=
0
;
bool
isPrivateBrowsing
=
true
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
window
&
&
window
-
>
GetDoc
(
)
)
{
auto
*
doc
=
window
-
>
GetDoc
(
)
;
innerWindowID
=
doc
-
>
InnerWindowID
(
)
;
isPrivateBrowsing
=
nsContentUtils
:
:
IsInPrivateBrowsing
(
doc
)
;
}
nsAutoString
logMsg
;
nsContentUtils
:
:
FormatLocalizedString
(
nsContentUtils
:
:
eSECURITY_PROPERTIES
aName
aParams
logMsg
)
;
LogMessage
(
logMsg
aFlags
innerWindowID
isPrivateBrowsing
)
;
}
void
Sanitizer
:
:
LogMessage
(
const
nsAString
&
aMessage
uint32_t
aFlags
uint64_t
aInnerWindowID
bool
aFromPrivateWindow
)
{
nsString
message
;
message
.
AppendLiteral
(
u
"
Sanitizer
:
"
)
;
message
.
Append
(
aMessage
)
;
constexpr
auto
category
=
"
Sanitizer
"
_ns
;
if
(
aInnerWindowID
>
0
)
{
nsContentUtils
:
:
ReportToConsoleByWindowID
(
message
aFlags
category
aInnerWindowID
)
;
}
else
{
nsContentUtils
:
:
LogSimpleConsoleError
(
message
category
aFromPrivateWindow
true
aFlags
)
;
}
}
}
