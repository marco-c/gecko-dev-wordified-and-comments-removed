#
ifndef
mozilla_dom_SanitizerTypes_h
#
define
mozilla_dom_SanitizerTypes_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
dom
/
SanitizerBinding
.
h
"
namespace
mozilla
:
:
dom
:
:
sanitizer
{
class
CanonicalName
{
public
:
CanonicalName
(
CanonicalName
&
&
)
=
default
;
CanonicalName
(
RefPtr
<
nsAtom
>
aLocalName
RefPtr
<
nsAtom
>
aNamespace
)
:
mLocalName
(
std
:
:
move
(
aLocalName
)
)
mNamespace
(
std
:
:
move
(
aNamespace
)
)
{
}
CanonicalName
(
nsStaticAtom
*
aLocalName
nsStaticAtom
*
aNamespace
)
:
mLocalName
(
aLocalName
)
mNamespace
(
aNamespace
)
{
}
~
CanonicalName
(
)
=
default
;
bool
IsDataAttribute
(
)
const
;
bool
operator
=
=
(
const
CanonicalName
&
aOther
)
const
{
return
mLocalName
=
=
aOther
.
mLocalName
&
&
mNamespace
=
=
aOther
.
mNamespace
;
}
SanitizerElementNamespace
ToSanitizerElementNamespace
(
)
const
;
SanitizerAttributeNamespace
ToSanitizerAttributeNamespace
(
)
const
;
CanonicalName
Clone
(
)
const
{
return
CanonicalName
(
mLocalName
mNamespace
)
;
}
protected
:
RefPtr
<
nsAtom
>
mLocalName
;
RefPtr
<
nsAtom
>
mNamespace
;
}
;
template
<
typename
ValueType
>
class
ListSet
{
public
:
ListSet
(
)
=
default
;
explicit
ListSet
(
nsTArray
<
ValueType
>
&
&
aValues
)
:
mValues
(
std
:
:
move
(
aValues
)
)
{
}
void
Insert
(
ValueType
&
&
aValue
)
{
if
(
Contains
(
aValue
)
)
{
return
;
}
mValues
.
AppendElement
(
std
:
:
move
(
aValue
)
)
;
}
bool
Remove
(
const
CanonicalName
&
aValue
)
{
return
mValues
.
RemoveElement
(
aValue
)
;
}
bool
Contains
(
const
CanonicalName
&
aValue
)
const
{
return
mValues
.
Contains
(
aValue
)
;
}
bool
IsEmpty
(
)
const
{
return
mValues
.
IsEmpty
(
)
;
}
ValueType
*
Get
(
const
CanonicalName
&
aValue
)
{
auto
index
=
mValues
.
IndexOf
(
aValue
)
;
if
(
index
=
=
mValues
.
NoIndex
)
{
return
nullptr
;
}
return
&
mValues
[
index
]
;
}
const
nsTArray
<
ValueType
>
&
Values
(
)
const
{
return
mValues
;
}
nsTArray
<
ValueType
>
&
Values
(
)
{
return
mValues
;
}
bool
HasDuplicates
(
)
const
;
private
:
nsTArray
<
ValueType
>
mValues
;
}
;
class
CanonicalElementWithAttributes
:
public
CanonicalName
{
public
:
explicit
CanonicalElementWithAttributes
(
CanonicalName
&
&
aName
)
:
CanonicalName
(
std
:
:
move
(
aName
)
)
{
}
bool
EqualAttributes
(
const
CanonicalElementWithAttributes
&
aOther
)
const
;
SanitizerElementNamespaceWithAttributes
ToSanitizerElementNamespaceWithAttributes
(
)
const
;
CanonicalElementWithAttributes
Clone
(
)
const
;
Maybe
<
ListSet
<
CanonicalName
>
>
mAttributes
;
Maybe
<
ListSet
<
CanonicalName
>
>
mRemoveAttributes
;
}
;
nsTArray
<
OwningStringOrSanitizerAttributeNamespace
>
ToSanitizerAttributes
(
const
ListSet
<
CanonicalName
>
&
aList
)
;
}
#
endif
