"
use
strict
"
;
const
ReferrerInfo
=
Components
.
Constructor
(
"
mozilla
.
org
/
referrer
-
info
;
1
"
"
nsIReferrerInfo
"
"
init
"
)
;
async
function
runTest
(
setupFunc
expected
)
{
let
objectOutStream
=
Cc
[
"
mozilla
.
org
/
binaryoutputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIObjectOutputStream
)
;
let
pipe
=
Cc
[
"
mozilla
.
org
/
pipe
;
1
"
]
.
createInstance
(
Ci
.
nsIPipe
)
;
pipe
.
init
(
false
false
0
0
)
;
objectOutStream
.
setOutputStream
(
pipe
.
outputStream
)
;
setupFunc
(
objectOutStream
)
;
let
objectInStream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIObjectInputStream
)
;
objectInStream
.
setInputStream
(
pipe
.
inputStream
)
;
let
referrerInfo
=
new
ReferrerInfo
(
Ci
.
nsIReferrerInfo
.
EMPTY
)
;
try
{
referrerInfo
.
read
(
objectInStream
)
;
}
catch
(
e
)
{
Assert
.
ok
(
false
"
Shouldn
'
t
fail
when
deserializing
.
"
)
;
return
;
}
Assert
.
ok
(
true
"
Successfully
deserialize
the
referrerInfo
.
"
)
;
let
{
referrerPolicy
sendReferrer
computedReferrerSpec
}
=
expected
;
Assert
.
equal
(
referrerInfo
.
referrerPolicy
referrerPolicy
"
The
referrerInfo
has
the
expected
referrer
policy
.
"
)
;
Assert
.
equal
(
referrerInfo
.
sendReferrer
sendReferrer
"
The
referrerInfo
has
the
expected
sendReferrer
value
.
"
)
;
if
(
computedReferrerSpec
)
{
Assert
.
equal
(
referrerInfo
.
computedReferrerSpec
computedReferrerSpec
"
The
referrerInfo
has
the
expected
computedReferrerSpec
value
.
"
)
;
}
}
add_task
(
async
function
test_deserializeOldReferrerInfo
(
)
{
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
false
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
true
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
false
computedReferrerSpec
:
"
https
:
/
/
example
.
com
/
"
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
true
computedReferrerSpec
:
"
https
:
/
/
example
.
com
/
"
}
)
;
}
)
;
add_task
(
async
function
test_deserializeReferrerInfo
(
)
{
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
false
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
true
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
false
computedReferrerSpec
:
"
https
:
/
/
example
.
com
/
"
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
writeBoolean
(
true
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
STRICT_ORIGIN_WHEN_CROSS_ORIGIN
sendReferrer
:
true
computedReferrerSpec
:
"
https
:
/
/
example
.
com
/
"
}
)
;
await
runTest
(
stream
=
>
{
stream
.
writeBoolean
(
true
)
;
stream
.
writeStringZ
(
"
https
:
/
/
example
.
com
/
"
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
EMPTY
)
;
stream
.
write32
(
Ci
.
nsIReferrerInfo
.
EMPTY
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
false
)
;
stream
.
writeBoolean
(
false
)
;
}
{
referrerPolicy
:
Ci
.
nsIReferrerInfo
.
EMPTY
sendReferrer
:
false
}
)
;
}
)
;
