"
use
strict
"
;
add_setup
(
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
dom
.
security
.
trusted_types
.
enabled
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
security
.
trusted_types
.
enabled
"
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
const
untrusted_string
=
<
div
id
=
"
untrusted
"
>
Hello
World
!
<
/
div
>
;
const
html
=
new
DOMParser
(
)
.
parseFromString
(
untrusted_string
"
text
/
html
"
)
.
documentElement
;
let
div
=
html
.
querySelector
(
"
#
untrusted
"
)
;
Assert
.
equal
(
div
.
outerHTML
untrusted_string
)
;
div
.
innerHTML
=
"
<
p
>
<
/
p
>
"
;
Assert
.
equal
(
div
.
outerHTML
<
div
id
=
"
untrusted
"
>
<
p
>
<
/
p
>
<
/
div
>
)
;
div
.
insertAdjacentHTML
(
"
afterbegin
"
"
<
div
>
<
/
div
>
"
)
;
Assert
.
equal
(
div
.
outerHTML
<
div
id
=
"
untrusted
"
>
<
div
>
<
/
div
>
<
p
>
<
/
p
>
<
/
div
>
)
;
div
.
lastElementChild
.
outerHTML
=
"
"
;
Assert
.
equal
(
div
.
outerHTML
<
div
id
=
"
untrusted
"
>
<
div
>
<
/
div
>
<
/
div
>
)
;
div
.
setHTMLUnsafe
(
"
<
span
>
<
/
span
>
"
)
;
Assert
.
equal
(
div
.
outerHTML
<
div
id
=
"
untrusted
"
>
<
span
>
<
/
span
>
<
/
div
>
)
;
div
.
setAttribute
(
"
onclick
"
"
;
"
)
;
div
.
getAttribute
(
"
onclick
"
"
;
"
)
;
div
.
setAttributeNS
(
null
"
onclick
"
"
;
;
"
)
;
div
.
getAttribute
(
"
onclick
"
"
;
;
"
)
;
let
document
=
html
.
ownerDocument
;
document
.
execCommand
(
"
insertHTML
"
false
"
<
em
>
Hello
World
<
/
em
>
"
)
;
Assert
.
throws
(
_
=
>
document
.
parseHTMLUnsafe
(
"
<
div
>
<
/
div
>
"
)
/
not
a
function
/
)
;
Assert
.
throws
(
_
=
>
document
.
write
(
"
a
"
)
/
insecure
/
)
;
Assert
.
throws
(
_
=
>
document
.
writeln
(
"
b
"
)
/
insecure
/
)
;
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
srcdoc
=
"
<
span
>
<
/
span
>
"
;
Assert
.
equal
(
iframe
.
getAttribute
(
"
srcdoc
"
)
"
<
span
>
<
/
span
>
"
)
;
let
script
=
document
.
createElement
(
"
script
"
)
;
script
.
text
=
"
;
"
;
Assert
.
equal
(
script
.
innerHTML
"
;
"
)
;
script
.
textContent
=
"
;
;
"
;
Assert
.
equal
(
script
.
innerHTML
"
;
;
"
)
;
script
.
innerText
=
"
;
;
;
"
;
Assert
.
equal
(
script
.
innerHTML
"
;
;
;
"
)
;
script
.
src
=
"
about
:
blank
"
;
Assert
.
equal
(
script
.
getAttribute
(
"
src
"
)
"
about
:
blank
"
)
;
let
d
=
document
.
createElement
(
"
div
"
)
;
let
s
=
d
.
attachShadow
(
{
mode
:
"
open
"
}
)
;
s
.
innerHTML
=
"
<
i
>
<
/
i
>
"
;
Assert
.
equal
(
s
.
firstElementChild
.
tagName
"
I
"
)
;
var
range
=
document
.
createRange
(
)
;
range
.
selectNode
(
div
)
;
var
result
=
range
.
createContextualFragment
(
"
<
div
>
ABC
<
/
div
>
"
)
;
Assert
.
equal
(
result
.
textContent
"
ABC
"
)
;
}
)
;
add_task
(
async
function
(
)
{
Assert
.
equal
(
eval
(
"
1
+
2
"
)
3
)
;
Assert
.
equal
(
new
Function
(
"
a
"
"
b
"
"
return
a
+
b
;
"
)
(
1
2
)
3
)
;
}
)
;
