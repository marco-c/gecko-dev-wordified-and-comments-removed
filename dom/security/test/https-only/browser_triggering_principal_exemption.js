"
use
strict
"
;
const
TRIGGERING_PAGE
=
"
http
:
/
/
example
.
org
"
;
const
LOADED_RESOURCE
=
"
http
:
/
/
example
.
com
"
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
await
runTest
(
"
Request
with
not
exempt
triggering
principal
should
get
upgraded
.
"
"
https
:
/
/
"
)
;
await
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
https
-
only
-
load
-
insecure
"
allow
:
true
context
:
TRIGGERING_PAGE
}
]
)
;
await
runTest
(
"
Request
with
exempt
triggering
principal
should
not
get
upgraded
.
"
"
http
:
/
/
"
)
;
await
SpecialPowers
.
popPermissions
(
)
;
}
)
;
async
function
runTest
(
desc
startsWith
)
{
const
responseURL
=
await
new
Promise
(
resolve
=
>
{
let
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
GET
"
LOADED_RESOURCE
)
;
const
triggeringPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
TRIGGERING_PAGE
)
;
let
dummyURI
=
Services
.
io
.
newURI
(
LOADED_RESOURCE
)
;
let
dummyChannel
=
NetUtil
.
newChannel
(
{
uri
:
dummyURI
triggeringPrincipal
loadingPrincipal
:
xhr
.
channel
.
loadInfo
.
loadingPrincipal
securityFlags
:
xhr
.
channel
.
loadInfo
.
securityFlags
contentPolicyType
:
xhr
.
channel
.
loadInfo
.
externalContentPolicyType
}
)
;
xhr
.
channel
.
loadInfo
=
dummyChannel
.
loadInfo
;
xhr
.
onreadystatechange
=
(
)
=
>
{
if
(
xhr
.
readyState
!
=
=
XMLHttpRequest
.
OPENED
|
|
xhr
.
readyState
!
=
=
XMLHttpRequest
.
UNSENT
)
{
xhr
.
onreadystatechange
=
undefined
;
resolve
(
xhr
.
responseURL
)
;
}
}
;
xhr
.
send
(
)
;
}
)
;
ok
(
responseURL
.
startsWith
(
startsWith
)
desc
)
;
}
