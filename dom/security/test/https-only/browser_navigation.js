"
use
strict
"
;
const
FIRST_URL_SECURE
=
"
https
:
/
/
example
.
com
"
;
const
FIRST_URL_INSECURE_REDIRECT
=
"
http
:
/
/
example
.
com
/
browser
/
dom
/
security
/
test
/
https
-
only
/
file_redirect_to_insecure
.
sjs
"
;
const
FIRST_URL_INSECURE_NOCERT
=
"
http
:
/
/
nocert
.
example
.
com
"
;
const
SECOND_URL
=
"
https
:
/
/
example
.
org
"
;
function
waitForPage
(
)
{
return
new
Promise
(
resolve
=
>
{
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
.
then
(
resolve
)
;
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
.
then
(
resolve
)
;
}
)
;
}
async
function
verifyErrorPage
(
expectErrorPage
=
true
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
expectErrorPage
]
async
function
(
_expectErrorPage
)
{
let
doc
=
content
.
document
;
let
innerHTML
=
doc
.
body
.
innerHTML
;
let
errorPageL10nId
=
"
about
-
httpsonly
-
title
-
alert
"
;
is
(
innerHTML
.
includes
(
errorPageL10nId
)
&
&
doc
.
documentURI
.
startsWith
(
"
about
:
httpsonlyerror
"
)
_expectErrorPage
"
we
should
be
on
the
https
-
only
error
page
"
)
;
}
)
;
}
async
function
runTest
(
firstUrl
expectErrorPageOnFirstVisit
expectErrorPageOnSecondVisit
)
{
let
loaded
=
waitForPage
(
)
;
info
(
"
Loading
first
page
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
firstUrl
)
;
await
loaded
;
await
verifyErrorPage
(
expectErrorPageOnFirstVisit
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
info
(
"
Navigating
to
second
page
"
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
SECOND_URL
]
async
url
=
>
(
content
.
location
.
href
=
url
)
)
;
await
loaded
;
loaded
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
)
;
info
(
"
Clicking
back
button
"
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
backButton
.
click
(
)
;
await
loaded
;
await
verifyErrorPage
(
expectErrorPageOnSecondVisit
)
;
}
add_task
(
async
function
(
)
{
waitForExplicitFinish
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
await
runTest
(
FIRST_URL_SECURE
false
false
)
;
await
runTest
(
FIRST_URL_INSECURE_REDIRECT
true
true
)
;
await
runTest
(
FIRST_URL_INSECURE_NOCERT
true
false
)
;
finish
(
)
;
}
)
;
