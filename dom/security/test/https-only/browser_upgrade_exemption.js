"
use
strict
"
;
const
PAGE_WITHOUT_SCHEME
=
"
:
/
/
example
.
com
"
;
add_task
(
async
function
(
)
{
await
runTest
(
{
loadScheme
:
"
http
"
expectScheme
:
"
http
"
}
)
;
await
runTest
(
{
loadScheme
:
"
https
"
expectScheme
:
"
https
"
}
)
;
await
runTest
(
{
exempt
:
true
loadScheme
:
"
http
"
expectScheme
:
"
http
"
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
await
runTest
(
{
loadScheme
:
"
http
"
expectScheme
:
"
https
"
}
)
;
await
runTest
(
{
exempt
:
true
loadScheme
:
"
http
"
expectScheme
:
"
http
"
}
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
true
]
]
}
)
;
await
runTest
(
{
loadScheme
:
"
http
"
expectScheme
:
"
https
"
}
)
;
await
runTest
(
{
exempt
:
true
loadScheme
:
"
http
"
expectScheme
:
"
http
"
}
)
;
}
)
;
async
function
runTest
(
options
)
{
const
{
exempt
=
false
loadScheme
expectScheme
}
=
options
;
const
page
=
loadScheme
+
PAGE_WITHOUT_SCHEME
;
if
(
exempt
)
{
await
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
https
-
only
-
load
-
insecure
"
allow
:
true
context
:
page
}
]
)
;
}
await
BrowserTestUtils
.
withNewTab
(
page
async
function
(
browser
)
{
is
(
browser
.
currentURI
.
scheme
expectScheme
"
Unexpected
scheme
"
)
;
await
SpecialPowers
.
popPermissions
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
}
