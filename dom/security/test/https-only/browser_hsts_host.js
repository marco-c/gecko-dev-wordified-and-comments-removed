"
use
strict
"
;
let
tests
=
[
{
description
:
"
Top
-
Level
upgrade
shouldn
'
t
get
logged
"
}
]
;
let
readMessage
=
false
;
function
observer
(
subject
topic
state
)
{
info
(
"
observer
called
with
"
+
topic
)
;
if
(
topic
=
=
"
http
-
on
-
examine
-
response
"
)
{
onExamineResponse
(
subject
)
;
}
}
function
onExamineResponse
(
subject
)
{
let
channel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
info
(
"
onExamineResponse
with
"
+
channel
.
URI
.
spec
)
;
try
{
let
hsts
=
channel
.
getResponseHeader
(
"
Strict
-
Transport
-
Security
"
)
;
let
csp
=
channel
.
getResponseHeader
(
"
Content
-
Security
-
Policy
"
)
;
is
(
hsts
"
max
-
age
=
300
"
"
HSTS
header
is
set
"
)
;
is
(
csp
"
upgrade
-
insecure
-
requests
"
"
CSP
header
is
set
"
)
;
}
catch
(
e
)
{
ok
(
false
"
No
header
set
"
)
;
}
readMessage
=
true
;
}
add_task
(
async
function
see_hsts_header
(
)
{
let
setHstsUrl
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
hsts_headers
.
sjs
"
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
await
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
setHstsUrl
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
readMessage
)
;
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
}
)
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
Services
.
console
.
registerListener
(
on_new_message
)
;
const
RESOURCE_LINK
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
hsts_headers
.
sjs
"
;
await
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
RESOURCE_LINK
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
tests
.
length
=
=
=
0
)
;
Services
.
console
.
unregisterListener
(
on_new_message
)
;
}
)
;
function
on_new_message
(
msgObj
)
{
const
message
=
msgObj
.
message
;
if
(
message
.
includes
(
"
Upgrading
insecure
request
"
)
)
{
ok
(
false
tests
[
0
]
.
description
)
;
tests
.
splice
(
0
1
)
;
}
else
if
(
gBrowser
.
selectedBrowser
.
currentURI
.
scheme
=
=
=
"
https
"
)
{
ok
(
true
tests
[
0
]
.
description
)
;
tests
.
splice
(
0
1
)
;
}
}
