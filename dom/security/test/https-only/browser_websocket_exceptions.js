"
use
strict
"
;
const
TEST_PATH_HTTP
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
localhost
:
9898
"
)
;
let
WEBSOCKET_DOC_URL
=
{
TEST_PATH_HTTP
}
file_websocket_exceptions
.
html
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
[
"
network
.
proxy
.
allow_hijacking_localhost
"
true
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
WEBSOCKET_DOC_URL
)
;
await
loaded
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
myIframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
content
.
document
.
body
.
appendChild
(
myIframe
)
;
myIframe
.
src
=
"
http
:
/
/
localhost
:
9898
/
browser
/
dom
/
security
/
test
/
https
-
only
/
file_websocket_exceptions_iframe
.
html
"
;
myIframe
.
onload
=
async
function
(
)
{
await
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
https
-
only
-
load
-
insecure
"
allow
:
true
context
:
"
http
:
/
/
localhost
:
9898
"
}
]
)
;
myIframe
.
contentWindow
.
postMessage
(
{
myMessage
:
"
runWebSocket
"
}
"
*
"
)
;
}
;
const
promise
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
WebSocketEnded
"
resolve
{
once
:
true
}
)
;
}
)
;
const
{
detail
}
=
await
promise
;
is
(
detail
.
state
"
onopen
"
"
sanity
:
websocket
loaded
"
)
;
ok
(
detail
.
url
.
startsWith
(
"
ws
:
/
/
example
.
com
/
tests
"
)
"
exempt
websocket
should
not
be
upgraded
to
wss
:
/
/
"
)
;
}
)
;
}
)
;
await
SpecialPowers
.
popPermissions
(
)
;
}
)
;
