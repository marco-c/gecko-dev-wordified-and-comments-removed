"
use
strict
"
;
add_task
(
async
function
(
)
{
await
runTest
(
{
description
:
"
Load
site
with
HTTP
and
HOM
disabled
"
topLevelScheme
:
"
http
"
expectedSameOrigin
:
"
success
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
runTest
(
{
description
:
"
Load
site
with
HTTPS
and
HOM
disabled
"
topLevelScheme
:
"
https
"
expectedSameOrigin
:
"
error
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
mixed_content
.
block_active_content
"
false
]
]
}
)
;
await
runTest
(
{
description
:
"
Load
site
with
HTTPS
;
HOM
and
MixedContent
blocker
disabled
"
topLevelScheme
:
"
https
"
expectedSameOrigin
:
"
error
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
await
runTest
(
{
description
:
"
Load
site
with
HTTP
and
HOM
enabled
"
topLevelScheme
:
"
http
"
expectedSameOrigin
:
"
success
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
https
-
only
-
load
-
insecure
"
allow
:
true
context
:
"
http
:
/
/
example
.
com
"
}
]
)
;
await
runTest
(
{
description
:
"
Load
site
with
HTTP
HOM
enabled
but
site
exempt
"
topLevelScheme
:
"
http
"
expectedSameOrigin
:
"
success
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
SpecialPowers
.
popPermissions
(
)
;
await
SpecialPowers
.
pushPermissions
(
[
{
type
:
"
https
-
only
-
load
-
insecure
"
allow
:
true
context
:
"
https
:
/
/
example
.
com
"
}
]
)
;
await
runTest
(
{
description
:
"
Load
site
with
HTTPS
HOM
enabled
but
site
exempt
"
topLevelScheme
:
"
https
"
expectedSameOrigin
:
"
error
"
expectedCrossOrigin
:
"
error
"
}
)
;
await
SpecialPowers
.
popPermissions
(
)
;
}
)
;
const
SERVER_URL
=
scheme
=
>
{
scheme
}
:
/
/
example
.
com
/
browser
/
dom
/
security
/
test
/
https
-
only
/
file_cors_mixedcontent
.
html
;
async
function
runTest
(
test
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
SERVER_URL
(
test
.
topLevelScheme
)
)
;
await
loaded
;
await
SpecialPowers
.
spawn
(
browser
[
test
]
async
function
(
test
)
{
const
promise
=
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
FetchEnded
"
resolve
{
once
:
true
}
)
;
}
)
;
content
.
dispatchEvent
(
new
content
.
Event
(
"
StartFetch
"
)
)
;
const
{
detail
}
=
await
promise
;
is
(
detail
.
comResult
test
.
expectedSameOrigin
{
test
.
description
}
(
same
-
origin
)
)
;
is
(
detail
.
orgResult
test
.
expectedCrossOrigin
{
test
.
description
}
(
cross
-
origin
)
)
;
}
)
;
}
)
;
}
