"
use
strict
"
;
function
wait
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
async
function
verifyErrorPage
(
expectErrorPage
=
true
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
expectErrorPage
]
async
function
(
_expectErrorPage
)
{
let
doc
=
content
.
document
;
let
innerHTML
=
doc
.
body
.
innerHTML
;
let
errorPageL10nId
=
"
about
-
httpsonly
-
title
-
alert
"
;
is
(
innerHTML
.
includes
(
errorPageL10nId
)
&
&
doc
.
documentURI
.
startsWith
(
"
about
:
httpsonlyerror
"
)
_expectErrorPage
"
we
should
be
on
the
https
-
only
error
page
"
)
;
}
)
;
}
async
function
continueToInsecureSite
(
)
{
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
let
button
=
content
.
document
.
getElementById
(
"
openInsecure
"
)
;
ok
(
button
"
'
Continue
to
HTTP
Site
'
button
exist
"
)
;
info
(
"
Pressing
'
Continue
to
HTTP
Site
'
button
"
)
;
if
(
button
)
{
button
.
click
(
)
;
}
}
)
;
}
async
function
runTest
(
timeout
expectErrorPage
)
{
let
loaded
=
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
;
info
(
"
Loading
insecure
page
"
)
;
BrowserTestUtils
.
loadURIString
(
gBrowser
"
http
:
/
/
untrusted
.
example
.
com
:
80
"
)
;
await
loaded
;
await
verifyErrorPage
(
true
)
;
await
wait
(
timeout
)
;
await
continueToInsecureSite
(
)
;
await
wait
(
500
)
;
await
verifyErrorPage
(
expectErrorPage
)
;
}
add_task
(
async
function
(
)
{
waitForExplicitFinish
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
const
delay
=
Services
.
prefs
.
getIntPref
(
"
security
.
dialog_enable_delay
"
0
)
;
await
runTest
(
Math
.
max
(
100
delay
-
500
)
true
)
;
await
runTest
(
delay
+
500
false
)
;
finish
(
)
;
}
)
;
