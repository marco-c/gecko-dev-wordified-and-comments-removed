"
use
strict
"
;
let
tests
=
[
{
description
:
"
Top
-
Level
upgrade
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
HTTPS
-
Only
Mode
:
Upgrading
insecure
request
"
"
to
use
"
"
file_console_logging
.
html
"
]
}
{
description
:
"
iFrame
upgrade
failure
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
error
expectIncludes
:
[
"
HTTPS
-
Only
Mode
:
Upgrading
insecure
request
"
"
failed
"
"
file_console_logging
.
html
"
]
}
{
description
:
"
WebSocket
upgrade
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
HTTPS
-
Only
Mode
:
Upgrading
insecure
request
"
"
to
use
"
"
ws
:
/
/
does
.
not
.
exist
"
]
}
{
description
:
"
Sub
-
Resource
upgrade
for
file_1
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
Upgrading
insecure
"
"
request
"
"
file_1
.
jpg
"
]
}
{
description
:
"
Sub
-
Resource
upgrade
for
file_2
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
Upgrading
insecure
"
"
request
"
"
to
use
"
"
file_2
.
jpg
"
]
}
{
description
:
"
Exempt
request
for
file_exempt
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
info
expectIncludes
:
[
"
Not
upgrading
insecure
request
"
"
because
it
is
exempt
"
"
file_exempt
.
jpg
"
]
}
{
description
:
"
Sub
-
Resource
upgrade
failure
for
file_2
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
error
expectIncludes
:
[
"
Upgrading
insecure
request
"
"
failed
"
"
file_2
.
jpg
"
]
}
]
;
const
testPathUpgradeable
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
testPathNotUpgradeable
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
self
-
signed
.
example
.
com
"
)
;
const
kTestURISuccess
=
testPathUpgradeable
+
"
file_console_logging
.
html
"
;
const
kTestURIFail
=
testPathNotUpgradeable
+
"
file_console_logging
.
html
"
;
const
kTestURIExempt
=
testPathUpgradeable
+
"
file_exempt
.
jpg
"
;
const
UPGRADE_DISPLAY_CONTENT
=
"
security
.
mixed_content
.
upgrade_display_content
"
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
Services
.
console
.
registerListener
(
on_new_message
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
kTestURISuccess
)
;
let
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
GET
"
kTestURIExempt
true
)
;
xhr
.
channel
.
loadInfo
.
httpsOnlyStatus
|
=
Ci
.
nsILoadInfo
.
HTTPS_ONLY_EXEMPT
;
xhr
.
send
(
)
;
new
WebSocket
(
"
ws
:
/
/
does
.
not
.
exist
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
tests
.
length
=
=
=
0
)
;
Services
.
console
.
unregisterListener
(
on_new_message
)
;
}
)
;
function
on_new_message
(
msgObj
)
{
const
message
=
msgObj
.
message
;
const
logLevel
=
msgObj
.
logLevel
;
const
isMCL2Enabled
=
Services
.
prefs
.
getBoolPref
(
UPGRADE_DISPLAY_CONTENT
)
;
const
isHTTPSOnlyModeLog
=
message
.
includes
(
"
HTTPS
-
Only
Mode
:
"
)
;
const
isMCLog
=
message
.
includes
(
"
Mixed
Content
:
"
)
;
if
(
(
isHTTPSOnlyModeLog
&
&
!
isMCLog
)
|
|
(
isMCLog
&
&
isMCL2Enabled
&
&
!
isHTTPSOnlyModeLog
)
)
{
for
(
let
i
=
0
;
i
<
tests
.
length
;
i
+
+
)
{
const
testCase
=
tests
[
i
]
;
if
(
testCase
.
description
=
=
"
Sub
-
Resource
upgrade
failure
for
file_2
should
get
logged
"
&
&
isMCL2Enabled
)
{
tests
.
splice
(
i
1
)
;
continue
;
}
if
(
logLevel
!
=
=
testCase
.
expectLogLevel
)
{
continue
;
}
if
(
testCase
.
expectIncludes
.
some
(
str
=
>
!
message
.
includes
(
str
)
)
)
{
continue
;
}
ok
(
true
testCase
.
description
)
;
tests
.
splice
(
i
1
)
;
break
;
}
}
}
