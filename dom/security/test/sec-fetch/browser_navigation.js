"
use
strict
"
;
const
REQUEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
dom
/
security
/
test
/
sec
-
fetch
/
file_no_cache
.
sjs
"
;
let
gTestCounter
=
0
;
let
gExpectedHeader
=
{
}
;
async
function
setup
(
)
{
waitForExplicitFinish
(
)
;
}
function
checkSecFetchUser
(
subject
)
{
let
channel
=
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
if
(
!
channel
.
URI
.
spec
.
startsWith
(
"
https
:
/
/
example
.
com
/
"
)
)
{
return
;
}
info
(
testing
headers
for
load
of
{
channel
.
URI
.
spec
}
)
;
const
secFetchHeaders
=
[
"
sec
-
fetch
-
mode
"
"
sec
-
fetch
-
dest
"
"
sec
-
fetch
-
user
"
"
sec
-
fetch
-
site
"
]
;
secFetchHeaders
.
forEach
(
header
=
>
{
const
expectedValue
=
gExpectedHeader
[
header
]
;
try
{
is
(
channel
.
getRequestHeader
(
header
)
expectedValue
{
header
}
is
set
to
{
expectedValue
}
)
;
}
catch
(
e
)
{
if
(
expectedValue
)
{
ok
(
false
"
required
headers
are
set
"
)
;
}
else
{
ok
(
true
{
header
}
should
not
be
set
)
;
}
}
}
)
;
gTestCounter
+
+
;
}
async
function
testNavigations
(
)
{
gTestCounter
=
0
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
REQUEST_URL
+
"
?
test1
"
)
;
await
loaded
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
let
test2Button
=
content
.
document
.
getElementById
(
"
test2_button
"
)
;
test2Button
.
click
(
)
;
content
.
document
.
clearUserGestureActivation
(
)
;
}
)
;
await
loaded
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
let
test3Button
=
content
.
document
.
getElementById
(
"
test3_button
"
)
;
test3Button
.
click
(
)
;
content
.
document
.
clearUserGestureActivation
(
)
;
}
)
;
await
loaded
;
gExpectedHeader
=
{
"
sec
-
fetch
-
mode
"
:
"
navigate
"
"
sec
-
fetch
-
dest
"
:
"
document
"
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
"
sec
-
fetch
-
user
"
:
"
?
1
"
}
;
Services
.
obs
.
addObserver
(
checkSecFetchUser
"
http
-
on
-
stop
-
request
"
)
;
info
(
"
Clicking
back
button
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
document
.
notifyUserGestureActivation
(
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
backButton
.
click
(
)
;
document
.
clearUserGestureActivation
(
)
;
await
loaded
;
info
(
"
Clicking
reload
button
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
document
.
notifyUserGestureActivation
(
)
;
let
reloadButton
=
document
.
getElementById
(
"
reload
-
button
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
reloadButton
.
disabled
;
}
)
;
reloadButton
.
click
(
)
;
document
.
clearUserGestureActivation
(
)
;
await
loaded
;
info
(
"
Clicking
forward
button
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
document
.
notifyUserGestureActivation
(
)
;
let
forwardButton
=
document
.
getElementById
(
"
forward
-
button
"
)
;
forwardButton
.
click
(
)
;
document
.
clearUserGestureActivation
(
)
;
await
loaded
;
info
(
"
going
back
with
history
.
back
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
content
.
history
.
back
(
)
;
content
.
document
.
clearUserGestureActivation
(
)
;
}
)
;
await
loaded
;
info
(
"
going
forward
with
history
.
forward
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
content
.
history
.
forward
(
)
;
content
.
document
.
clearUserGestureActivation
(
)
;
}
)
;
await
loaded
;
gExpectedHeader
=
{
"
sec
-
fetch
-
mode
"
:
"
navigate
"
"
sec
-
fetch
-
dest
"
:
"
document
"
"
sec
-
fetch
-
site
"
:
"
same
-
origin
"
}
;
info
(
"
going
back
with
history
.
back
without
user
activation
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
history
.
back
(
)
;
}
)
;
await
loaded
;
info
(
"
going
forward
with
history
.
forward
without
user
activation
"
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
content
.
history
.
forward
(
)
;
}
)
;
await
loaded
;
Assert
.
strictEqual
(
gTestCounter
7
"
testing
that
all
five
actions
have
been
tested
.
"
)
;
Services
.
obs
.
removeObserver
(
checkSecFetchUser
"
http
-
on
-
stop
-
request
"
)
;
}
add_task
(
async
function
(
)
{
waitForExplicitFinish
(
)
;
await
testNavigations
(
)
;
if
(
SpecialPowers
.
getBoolPref
(
"
fission
.
autostart
"
)
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
fission
.
bfcacheInParent
"
true
]
]
}
)
;
await
testNavigations
(
)
;
}
finish
(
)
;
}
)
;
