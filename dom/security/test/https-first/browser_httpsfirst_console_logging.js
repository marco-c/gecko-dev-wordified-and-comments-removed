"
use
strict
"
;
let
tests
=
[
{
description
:
"
Top
-
Level
upgrade
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
Upgrading
insecure
request
"
"
to
use
"
"
httpsfirst
.
com
"
]
}
{
description
:
"
Top
-
Level
upgrade
failure
should
get
logged
"
expectLogLevel
:
Ci
.
nsIConsoleMessage
.
warn
expectIncludes
:
[
"
Upgrading
insecure
request
"
"
failed
"
"
httpsfirst
.
com
"
"
Downgrading
to
"
]
}
]
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
4
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
true
]
]
}
)
;
Services
.
console
.
registerListener
(
on_new_message
)
;
await
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
http
:
/
/
httpsfirst
.
com
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
tests
.
length
=
=
=
0
)
;
Services
.
console
.
unregisterListener
(
on_new_message
)
;
}
)
;
function
on_new_message
(
msgObj
)
{
const
message
=
msgObj
.
message
;
const
logLevel
=
msgObj
.
logLevel
;
if
(
message
.
includes
(
"
HTTPS
-
First
Mode
:
"
)
)
{
for
(
let
i
=
0
;
i
<
tests
.
length
;
i
+
+
)
{
const
testCase
=
tests
[
i
]
;
if
(
logLevel
!
=
=
testCase
.
expectLogLevel
)
{
continue
;
}
if
(
testCase
.
expectIncludes
.
some
(
str
=
>
!
message
.
includes
(
str
)
)
)
{
continue
;
}
ok
(
true
testCase
.
description
)
;
tests
.
splice
(
i
1
)
;
break
;
}
}
}
