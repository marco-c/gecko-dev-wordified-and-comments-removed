"
use
strict
"
;
const
{
PromptTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
)
;
const
TEST_PATH_HTTP
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
nocert
.
example
.
com
/
"
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
true
]
[
"
dom
.
require_user_interaction_for_beforeunload
"
true
]
]
}
)
;
}
)
;
const
TESTS
=
[
{
name
:
"
Normal
Reload
(
No
flag
)
"
reloadFlag
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
}
{
name
:
"
Bypass
Cache
Reload
"
reloadFlag
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
}
{
name
:
"
Bypass
Proxy
Reload
"
reloadFlag
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_PROXY
}
{
name
:
"
Bypass
Cache
and
Proxy
Reload
"
reloadFlag
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
|
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_PROXY
}
]
;
add_task
(
async
function
testReloadFlags
(
)
{
for
(
let
index
=
0
;
index
<
TESTS
.
length
;
index
+
+
)
{
const
testCase
=
TESTS
[
index
]
;
let
dialogPromise
=
PromptTestUtils
.
waitForPrompt
(
null
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_CONTENT
promptType
:
"
confirmEx
"
}
)
;
let
reloadPromise
=
loadPageAndReload
(
testCase
)
;
let
dialog
=
await
dialogPromise
;
Assert
.
ok
(
true
"
Showed
the
beforeunload
dialog
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
dialog
{
buttonNumClick
:
0
}
)
;
await
reloadPromise
;
}
}
)
;
add_task
(
async
function
testNavigation
(
)
{
let
dialogPromise
=
PromptTestUtils
.
waitForPrompt
(
null
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_CONTENT
promptType
:
"
confirmEx
"
}
)
;
let
openPagePromise
=
openPage
(
)
;
let
dialog
=
await
dialogPromise
;
Assert
.
ok
(
true
"
Showed
the
beforeunload
dialog
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
dialog
{
buttonNumClick
:
0
}
)
;
await
openPagePromise
;
}
)
;
add_task
(
async
function
testSessionHistoryNavigation
(
)
{
let
dialogPromise
=
PromptTestUtils
.
waitForPrompt
(
null
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_CONTENT
promptType
:
"
confirmEx
"
}
)
;
let
openPagePromise
=
loadPagesAndUseBackButton
(
)
;
let
dialog
=
await
dialogPromise
;
Assert
.
ok
(
true
"
Showed
the
beforeunload
dialog
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
dialog
{
buttonNumClick
:
0
}
)
;
await
openPagePromise
;
}
)
;
async
function
openPage
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
BrowserTestUtils
.
startLoadingURIString
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
2
2
{
}
browser
)
;
let
hasInteractedWith
=
await
SpecialPowers
.
spawn
(
browser
[
"
"
]
function
(
)
{
return
content
.
document
.
userHasInteracted
;
}
)
;
is
(
true
hasInteractedWith
"
Simulated
successfully
user
interaction
"
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
http
:
/
/
self
-
signed
.
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
Assert
.
ok
(
true
"
Navigated
successfully
.
"
)
;
}
)
;
}
async
function
loadPageAndReload
(
testCase
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
BrowserTestUtils
.
startLoadingURIString
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
2
2
{
}
browser
)
;
let
hasInteractedWith
=
await
SpecialPowers
.
spawn
(
browser
[
"
"
]
function
(
)
{
return
content
.
document
.
userHasInteracted
;
}
)
;
is
(
true
hasInteractedWith
"
Simulated
successfully
user
interaction
"
)
;
BrowserReloadWithFlags
(
testCase
.
reloadFlag
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
true
true
reload
with
flag
{
testCase
.
name
}
was
successful
)
;
}
)
;
}
async
function
loadPagesAndUseBackButton
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
BrowserTestUtils
.
startLoadingURIString
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
?
getASessionHistoryEntry
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
2
2
{
}
browser
)
;
let
hasInteractedWith
=
await
SpecialPowers
.
spawn
(
browser
[
"
"
]
function
(
)
{
return
content
.
document
.
userHasInteracted
;
}
)
;
is
(
true
hasInteractedWith
"
Simulated
successfully
user
interaction
"
)
;
info
(
"
Clicking
back
button
"
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
backButton
.
click
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
true
true
Got
back
successful
)
;
}
)
;
}
