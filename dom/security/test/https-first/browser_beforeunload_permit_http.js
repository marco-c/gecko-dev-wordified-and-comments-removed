"
use
strict
"
;
const
{
PromptTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
jsm
"
)
;
const
TEST_PATH_HTTP
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
nocert
.
example
.
com
/
"
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
true
]
[
"
dom
.
require_user_interaction_for_beforeunload
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testNavigation
(
)
{
let
dialogPromise
=
PromptTestUtils
.
waitForPrompt
(
null
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_CONTENT
promptType
:
"
confirmEx
"
}
)
;
let
openPagePromise
=
openPage
(
true
)
;
let
dialog
=
await
dialogPromise
;
Assert
.
ok
(
true
"
Showed
the
beforeunload
dialog
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
dialog
{
buttonNumClick
:
0
}
)
;
await
openPagePromise
;
}
)
;
add_task
(
async
function
testReload
(
)
{
let
dialogPromise
=
PromptTestUtils
.
waitForPrompt
(
null
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_CONTENT
promptType
:
"
confirmEx
"
}
)
;
let
reloadPromise
=
reloadPage
(
)
;
info
(
"
wait
for
dialog
"
)
;
let
dialog
=
await
dialogPromise
;
Assert
.
ok
(
true
"
Showed
the
beforeunload
dialog
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
dialog
{
buttonNumClick
:
0
}
)
;
await
reloadPromise
;
}
)
;
async
function
openPage
(
shouldClick
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
BrowserTestUtils
.
loadURI
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
if
(
shouldClick
)
{
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
2
2
{
}
browser
)
;
}
let
hasInteractedWith
=
await
SpecialPowers
.
spawn
(
browser
[
"
"
]
function
(
)
{
return
content
.
document
.
userHasInteracted
;
}
)
;
is
(
shouldClick
hasInteractedWith
"
Click
should
update
document
interactivity
state
"
)
;
BrowserTestUtils
.
loadURI
(
browser
"
http
:
/
/
self
-
signed
.
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
Assert
.
ok
(
true
"
Navigated
successfully
.
"
)
;
}
)
;
}
async
function
reloadPage
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
async
function
(
browser
)
{
BrowserTestUtils
.
loadURI
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
BrowserTestUtils
.
synthesizeMouse
(
"
body
"
2
2
{
}
browser
)
;
let
hasInteractedWith
=
await
SpecialPowers
.
spawn
(
browser
[
"
"
]
function
(
)
{
return
content
.
document
.
userHasInteracted
;
}
)
;
is
(
true
hasInteractedWith
"
Simulated
successfully
user
interaction
"
)
;
info
(
"
Reload
page
"
)
;
BrowserTestUtils
.
loadURI
(
browser
{
TEST_PATH_HTTP
}
file_beforeunload_permit_http
.
html
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
true
true
"
reload
was
successfull
"
)
;
}
)
;
}
