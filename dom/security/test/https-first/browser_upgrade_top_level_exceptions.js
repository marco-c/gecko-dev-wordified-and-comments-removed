"
use
strict
"
;
add_task
(
async
function
(
)
{
requestLongerTimeout
(
2
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode_https_first
"
true
]
[
"
dom
.
security
.
https_only_mode
"
false
]
]
}
)
;
await
runTest
(
"
Loopback
IP
addresses
should
always
be
exempt
from
upgrades
(
127
.
0
.
0
.
1
)
"
"
http
:
/
/
localhost
/
"
"
http
:
/
/
localhost
/
"
)
;
await
runTest
(
"
Loopback
IP
addresses
should
always
be
exempt
from
upgrades
(
127
.
0
.
0
.
1
)
"
"
http
:
/
/
127
.
0
.
0
.
1
/
"
"
http
:
/
/
127
.
0
.
0
.
1
/
"
)
;
await
runTest
(
"
Hosts
ending
with
.
onion
should
be
be
exempt
from
HTTPS
-
First
upgrades
by
default
"
"
http
:
/
/
grocery
.
shopping
.
for
.
one
.
onion
/
"
"
http
:
/
/
grocery
.
shopping
.
for
.
one
.
onion
/
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
.
upgrade_onion
"
true
]
]
}
)
;
await
runTest
(
"
Hosts
ending
with
.
onion
should
get
upgraded
when
'
dom
.
security
.
https_only_mode
.
upgrade_onion
'
is
set
to
true
"
"
http
:
/
/
grocery
.
shopping
.
for
.
one
.
onion
/
"
"
https
:
/
/
grocery
.
shopping
.
for
.
one
.
onion
/
"
)
;
}
)
;
async
function
runTest
(
desc
url
expectedURI
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
browser
)
{
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
null
true
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
await
loaded
;
await
SpecialPowers
.
spawn
(
browser
[
desc
expectedURI
]
async
function
(
desc
expectedURI
)
{
let
loadedURI
=
content
.
document
.
documentURI
;
if
(
loadedURI
.
startsWith
(
"
about
:
neterror
"
)
)
{
loadedURI
=
content
.
docShell
.
failedChannel
.
URI
.
spec
;
}
is
(
loadedURI
expectedURI
desc
)
;
}
)
;
}
)
;
}
