"
use
strict
"
;
const
{
ManifestObtainer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ManifestObtainer
.
jsm
"
)
;
const
path
=
"
/
tests
/
dom
/
security
/
test
/
csp
/
"
;
const
testFile
=
{
path
}
file_web_manifest
.
html
;
const
remoteFile
=
{
path
}
file_web_manifest_remote
.
html
;
const
httpsManifest
=
{
path
}
file_web_manifest_https
.
html
;
const
server
=
{
path
}
file_testserver
.
sjs
;
const
defaultURL
=
new
URL
(
http
:
/
/
example
.
org
{
server
}
)
;
const
secureURL
=
new
URL
(
https
:
/
/
example
.
com
:
443
{
server
}
)
;
const
tests
=
[
{
expected
:
"
default
-
src
'
none
'
blocks
fetching
manifest
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
'
none
'
"
)
;
return
url
.
href
;
}
run
(
topic
)
{
is
(
topic
"
csp
-
on
-
violate
-
policy
"
this
.
expected
)
;
}
}
{
expected
:
"
default
-
src
mochi
.
test
:
8888
blocks
manifest
fetching
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
mochi
.
test
:
8888
"
)
;
return
url
.
href
;
}
run
(
topic
)
{
is
(
topic
"
csp
-
on
-
violate
-
policy
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
default
-
src
'
self
'
allows
fetch
of
manifest
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
'
self
'
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
default
-
src
mochi
.
test
:
8888
allows
fetching
manifest
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
remoteFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
http
:
/
/
mochi
.
test
:
8888
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
"
default
-
src
'
none
'
blocks
mochi
.
test
:
8888
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
remoteFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
'
none
'
"
)
;
return
url
.
href
;
}
run
(
topic
)
{
is
(
topic
"
csp
-
on
-
violate
-
policy
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
manifest
-
src
allows
self
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
manifest
-
src
'
self
'
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
manifest
-
src
allows
http
:
/
/
example
.
org
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
manifest
-
src
http
:
/
/
example
.
org
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
manifest
-
src
allows
mochi
.
test
:
8888
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
remoteFile
)
;
url
.
searchParams
.
append
(
"
cors
"
"
*
"
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
*
;
manifest
-
src
http
:
/
/
mochi
.
test
:
8888
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
blocks
manifest
fetching
from
example
.
org
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
manifest
-
src
mochi
.
test
:
8888
"
)
;
return
url
.
href
;
}
run
(
topic
)
{
is
(
topic
"
csp
-
on
-
violate
-
policy
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
manifest
-
src
'
self
'
blocks
cross
-
origin
fetch
.
"
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
remoteFile
)
;
url
.
searchParams
.
append
(
"
csp
"
"
manifest
-
src
'
self
'
"
)
;
return
url
.
href
;
}
run
(
topic
)
{
is
(
topic
"
csp
-
on
-
violate
-
policy
"
this
.
expected
)
;
}
}
{
expected
:
"
CSP
manifest
-
src
allows
example
.
com
over
TLS
"
get
tabURL
(
)
{
const
url
=
new
URL
(
secureURL
)
;
url
.
searchParams
.
append
(
"
file
"
httpsManifest
)
;
url
.
searchParams
.
append
(
"
cors
"
"
*
"
)
;
url
.
searchParams
.
append
(
"
csp
"
"
manifest
-
src
https
:
/
/
example
.
com
:
443
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
]
;
add_task
(
async
function
(
)
{
const
testPromises
=
tests
.
map
(
test
=
>
{
const
tabOptions
=
{
gBrowser
url
:
test
.
tabURL
skipAnimation
:
true
}
;
return
BrowserTestUtils
.
withNewTab
(
tabOptions
browser
=
>
testObtainingManifest
(
browser
test
)
)
;
}
)
;
await
Promise
.
all
(
testPromises
)
;
}
)
;
async
function
testObtainingManifest
(
aBrowser
aTest
)
{
const
waitForObserver
=
waitForNetObserver
(
aBrowser
aTest
)
;
try
{
const
manifest
=
await
ManifestObtainer
.
browserObtainManifest
(
aBrowser
)
;
aTest
.
run
(
manifest
)
;
}
catch
(
e
)
{
const
wasBlocked
=
e
.
message
.
includes
(
"
NetworkError
when
attempting
to
fetch
resource
"
)
;
ok
(
wasBlocked
Expected
promise
rejection
obtaining
{
aTest
.
tabURL
}
:
{
e
.
message
}
)
;
}
finally
{
await
waitForObserver
;
}
}
function
waitForNetObserver
(
aBrowser
aTest
)
{
if
(
!
aTest
.
expected
.
includes
(
"
block
"
)
)
{
return
Promise
.
resolve
(
)
;
}
return
ContentTask
.
spawn
(
aBrowser
null
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
function
observe
(
subject
topic
)
{
Services
.
obs
.
removeObserver
(
observe
"
csp
-
on
-
violate
-
policy
"
)
;
resolve
(
)
;
}
Services
.
obs
.
addObserver
(
observe
"
csp
-
on
-
violate
-
policy
"
)
;
}
)
;
}
)
.
then
(
(
)
=
>
aTest
.
run
(
"
csp
-
on
-
violate
-
policy
"
)
)
;
}
