"
use
strict
"
;
const
{
ManifestObtainer
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ManifestObtainer
.
jsm
"
{
}
)
;
const
path
=
"
/
tests
/
dom
/
security
/
test
/
csp
/
"
;
const
testFile
=
{
path
}
file_web_manifest
.
html
;
const
mixedContentFile
=
{
path
}
file_web_manifest_mixed_content
.
html
;
const
server
=
{
path
}
file_testserver
.
sjs
;
const
defaultURL
=
new
URL
(
http
:
/
/
example
.
org
{
server
}
)
;
const
mixedURL
=
new
URL
(
http
:
/
/
mochi
.
test
:
8888
{
server
}
)
;
const
tests
=
[
{
expected
:
CSP
manifest
-
src
overrides
default
-
src
of
elsewhere
.
com
get
tabURL
(
)
{
const
url
=
new
URL
(
defaultURL
)
;
url
.
searchParams
.
append
(
"
file
"
testFile
)
;
url
.
searchParams
.
append
(
"
cors
"
"
*
"
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
http
:
/
/
elsewhere
.
com
;
manifest
-
src
http
:
/
/
example
.
org
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
{
expected
:
CSP
manifest
-
src
overrides
default
-
src
get
tabURL
(
)
{
const
url
=
new
URL
(
mixedURL
)
;
url
.
searchParams
.
append
(
"
file
"
mixedContentFile
)
;
url
.
searchParams
.
append
(
"
cors
"
"
http
:
/
/
test
:
80
"
)
;
url
.
searchParams
.
append
(
"
csp
"
"
default
-
src
'
self
'
;
manifest
-
src
http
:
/
/
test
:
80
"
)
;
return
url
.
href
;
}
run
(
manifest
)
{
is
(
manifest
.
name
"
loaded
"
this
.
expected
)
;
}
}
]
;
add_task
(
async
function
(
)
{
const
testPromises
=
tests
.
map
(
(
test
)
=
>
{
const
tabOptions
=
{
gBrowser
url
:
test
.
tabURL
skipAnimation
:
true
}
;
return
BrowserTestUtils
.
withNewTab
(
tabOptions
(
browser
)
=
>
testObtainingManifest
(
browser
test
)
)
;
}
)
;
await
Promise
.
all
(
testPromises
)
;
}
)
;
async
function
testObtainingManifest
(
aBrowser
aTest
)
{
const
expectsBlocked
=
aTest
.
expected
.
includes
(
"
block
"
)
;
const
observer
=
(
expectsBlocked
)
?
createNetObserver
(
aTest
)
:
null
;
try
{
const
manifest
=
await
ManifestObtainer
.
browserObtainManifest
(
aBrowser
)
;
aTest
.
run
(
manifest
)
;
}
catch
(
e
)
{
const
wasBlocked
=
e
.
message
.
includes
(
"
NetworkError
when
attempting
to
fetch
resource
"
)
;
ok
(
wasBlocked
Expected
promise
rejection
obtaining
{
aTest
.
tabURL
}
:
{
e
.
message
}
)
;
if
(
observer
)
{
await
observer
.
untilFinished
;
}
}
}
function
createNetObserver
(
test
)
{
let
finishedTest
;
let
success
=
false
;
const
finished
=
new
Promise
(
(
resolver
)
=
>
{
finishedTest
=
resolver
;
}
)
;
const
timeoutId
=
setTimeout
(
(
)
=
>
{
if
(
!
success
)
{
test
.
run
(
"
This
test
timed
out
.
"
)
;
finishedTest
(
)
;
}
}
1000
)
;
var
observer
=
{
get
untilFinished
(
)
{
return
finished
;
}
observe
(
subject
topic
)
{
SpecialPowers
.
removeObserver
(
observer
"
csp
-
on
-
violate
-
policy
"
)
;
test
.
run
(
topic
)
;
finishedTest
(
)
;
clearTimeout
(
timeoutId
)
;
success
=
true
;
}
}
;
SpecialPowers
.
addObserver
(
observer
"
csp
-
on
-
violate
-
policy
"
)
;
return
observer
;
}
