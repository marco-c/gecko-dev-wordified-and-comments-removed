"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
file_pdfjs_not_subject_to_csp
.
html
"
async
function
(
browser
)
{
let
pdfPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
documentloaded
"
false
null
true
)
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
let
pdfButton
=
content
.
document
.
getElementById
(
"
pdfButton
"
)
;
pdfButton
.
click
(
)
;
}
)
;
await
pdfPromise
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
let
pdfFrame
=
content
.
document
.
getElementById
(
"
pdfFrame
"
)
;
ok
(
pdfFrame
.
src
.
startsWith
(
"
blob
:
"
)
"
it
'
s
a
blob
URL
"
)
;
ok
(
pdfFrame
.
contentDocument
.
querySelector
(
"
div
#
viewer
"
)
"
document
content
has
viewer
UI
"
)
;
let
cspJSON
=
pdfFrame
.
contentDocument
.
cspJSON
;
ok
(
cspJSON
.
includes
(
"
script
-
src
"
)
"
found
script
-
src
directive
"
)
;
ok
(
cspJSON
.
includes
(
"
allowPDF
"
)
"
found
script
-
src
nonce
value
"
)
;
}
)
;
const
closePromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pagesdestroy
"
false
null
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
const
pdfFrame
=
content
.
document
.
getElementById
(
"
pdfFrame
"
)
;
const
viewer
=
pdfFrame
.
contentWindow
.
wrappedJSObject
.
PDFViewerApplication
;
viewer
.
unbindWindowEvents
(
)
;
await
viewer
.
close
(
)
;
}
)
;
await
closePromise
;
}
)
;
}
)
;
