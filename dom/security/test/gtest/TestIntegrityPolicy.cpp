#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
IntegrityPolicy
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
nsSerializationHelper
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
void
AssertSerializationForHeadersForIntegrityPolicy
(
const
nsCString
&
aEnforcementHeader
const
nsCString
&
aReportOnlyHeader
const
nsCString
&
aSerializedString
)
{
RefPtr
<
IntegrityPolicy
>
policy
;
IntegrityPolicy
:
:
ParseHeaders
(
aEnforcementHeader
aReportOnlyHeader
getter_AddRefs
(
policy
)
)
;
ASSERT_TRUE
(
policy
)
;
nsCOMPtr
<
nsISerializable
>
serializable
=
static_cast
<
nsISerializable
*
>
(
policy
.
get
(
)
)
;
nsCString
str
;
nsresult
rv
=
NS_SerializeToString
(
serializable
str
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
ASSERT_STREQ
(
str
.
get
(
)
aSerializedString
.
get
(
)
)
;
nsCOMPtr
<
nsISupports
>
deserialized
;
rv
=
NS_DeserializeObject
(
aSerializedString
getter_AddRefs
(
deserialized
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
ASSERT_TRUE
(
deserialized
)
;
nsCOMPtr
<
nsIIntegrityPolicy
>
deserializedPolicy
=
do_QueryInterface
(
deserialized
)
;
ASSERT_TRUE
(
deserializedPolicy
)
;
RefPtr
<
IntegrityPolicy
>
deserializedIntegrityPolicy
=
IntegrityPolicy
:
:
Cast
(
deserializedPolicy
)
;
ASSERT_TRUE
(
IntegrityPolicy
:
:
Equals
(
policy
deserializedIntegrityPolicy
)
)
;
}
TEST
(
IntegrityPolicy
Serialization
)
{
const
auto
*
prefKey
=
"
security
.
integrity_policy
.
enabled
"
;
bool
oldPref
=
Preferences
:
:
GetBool
(
prefKey
)
;
Preferences
:
:
SetBool
(
prefKey
true
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
"
_ns
"
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAAA
=
"
_ns
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
blocked
-
destinations
=
(
script
)
"
_ns
"
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAQAAAAEAAAABAAAAAAA
=
"
_ns
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
"
_ns
"
blocked
-
destinations
=
(
script
)
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAAEAAAABAAAAAQAAAAA
=
"
_ns
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
blocked
-
destinations
=
(
script
)
endpoints
=
(
endpoint1
endpoint2
)
"
_ns
"
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAQAAAAEAAAABAAAAAgAAAAllbmRwb2ludDEAAAAJZW5kcG9pbnQyAA
=
=
"
_ns
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
"
_ns
"
blocked
-
destinations
=
(
script
)
endpoints
=
(
endpoint1
endpoint2
)
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAAEAAAABAAAAAQAAAAIAAAAJZW5kcG9pbnQxAAAACWVuZHBvaW50Mg
=
=
"
_ns
)
;
AssertSerializationForHeadersForIntegrityPolicy
(
"
blocked
-
destinations
=
(
script
)
endpoints
=
(
endpoint1
endpoint2
)
"
_ns
"
blocked
-
destinations
=
(
script
)
endpoints
=
(
endpoint1
endpoint2
)
"
_ns
"
SBL
/
Mhv
/
QjuX
/
EClaW2tIgAAAAAAAAAAwAAAAAAAAEYAAAABAQAAAAEAAAABAAAAAgAAAAllbmRwb2ludDEAAAAJZW5kcG9pbnQyAQAAAAEAAAABAAAAAgAAAAllbmRwb2ludDEAAAAJZW5kcG9pbnQy
"
_ns
)
;
Preferences
:
:
SetBool
(
prefKey
oldPref
)
;
}
