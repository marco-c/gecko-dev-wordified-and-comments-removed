'
use
strict
'
;
var
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
function
scopedCuImport
(
path
)
{
const
scope
=
{
}
;
Cu
.
import
(
path
scope
)
;
return
scope
;
}
const
{
loader
require
}
=
scopedCuImport
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
const
{
Utils
:
WebConsoleUtils
}
=
require
(
"
devtools
/
client
/
webconsole
/
utils
"
)
;
let
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
loader
.
lazyGetter
(
this
"
HUDService
"
(
)
=
>
require
(
"
devtools
/
client
/
webconsole
/
webconsole
"
)
)
;
loader
.
lazyGetter
(
this
"
HUDService
"
(
)
=
>
require
(
"
devtools
/
client
/
webconsole
/
hudservice
"
)
)
;
let
promise
=
require
(
"
promise
"
)
;
var
openToolboxForTab
=
Task
.
async
(
function
*
(
tab
toolId
hostType
)
{
info
(
"
Opening
the
toolbox
"
)
;
let
toolbox
;
let
target
=
TargetFactory
.
forTab
(
tab
)
;
yield
target
.
makeRemote
(
)
;
toolbox
=
gDevTools
.
getToolbox
(
target
)
;
if
(
toolbox
)
{
if
(
!
toolId
|
|
(
toolId
&
&
toolbox
.
getPanel
(
toolId
)
)
)
{
info
(
"
Toolbox
is
already
opened
"
)
;
return
toolbox
;
}
}
toolbox
=
yield
gDevTools
.
showToolbox
(
target
toolId
hostType
)
;
yield
new
Promise
(
resolve
=
>
waitForFocus
(
resolve
toolbox
.
win
)
)
;
info
(
"
Toolbox
opened
and
focused
"
)
;
return
toolbox
;
}
)
;
function
findMessages
(
hud
text
selector
=
"
.
message
"
)
{
const
messages
=
hud
.
ui
.
experimentalOutputNode
.
querySelectorAll
(
selector
)
;
const
elements
=
Array
.
prototype
.
filter
.
call
(
messages
(
el
)
=
>
el
.
textContent
.
includes
(
text
)
)
;
return
elements
;
}
