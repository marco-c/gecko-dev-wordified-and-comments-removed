'
use
strict
'
;
function
console_observer
(
subject
topic
data
)
{
var
message
=
subject
.
wrappedJSObject
.
arguments
[
0
]
;
ok
(
false
message
)
;
}
;
var
webconsole
=
null
;
var
messages_seen
=
0
;
var
expected_messages
=
50
;
function
on_new_message
(
event
new_messages
)
{
for
(
let
message
of
new_messages
)
{
let
elem
=
message
.
node
;
let
text
=
elem
.
textContent
;
if
(
text
.
match
(
'
Cross
-
Origin
Request
Blocked
:
'
)
)
{
ok
(
true
"
message
is
:
"
+
text
)
;
messages_seen
+
+
;
}
}
}
function
*
do_cleanup
(
)
{
if
(
webconsole
)
{
webconsole
.
ui
.
off
(
"
new
-
messages
"
on_new_message
)
;
}
yield
unsetCookiePref
(
)
;
}
function
setCookiePref
(
)
{
return
new
Promise
(
resolve
=
>
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
cookieBehavior
"
0
]
]
}
resolve
)
)
;
}
function
unsetCookiePref
(
)
{
return
new
Promise
(
resolve
=
>
{
SpecialPowers
.
popPrefEnv
(
resolve
)
;
}
)
;
}
add_task
(
function
*
(
)
{
requestLongerTimeout
(
4
)
;
registerCleanupFunction
(
do_cleanup
)
;
yield
setCookiePref
(
)
;
let
test_uri
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
dom
/
security
/
test
/
cors
/
file_cors_logging_test
.
html
"
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
let
toolbox
=
yield
openToolboxForTab
(
tab
"
webconsole
"
)
;
ok
(
toolbox
"
Got
toolbox
"
)
;
let
hud
=
toolbox
.
getCurrentPanel
(
)
.
hud
;
ok
(
hud
"
Got
hud
"
)
;
if
(
!
webconsole
)
{
registerCleanupFunction
(
do_cleanup
)
;
hud
.
ui
.
on
(
"
new
-
messages
"
on_new_message
)
;
webconsole
=
hud
;
}
BrowserTestUtils
.
loadURI
(
gBrowser
test_uri
)
;
yield
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
test_uri
+
"
#
finished
"
)
;
ok
(
messages_seen
>
0
"
Saw
"
+
messages_seen
+
"
messages
.
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
