#
ifndef
nsCSPContext_h___
#
define
nsCSPContext_h___
#
include
"
mozilla
/
dom
/
nsCSPUtils
.
h
"
#
include
"
mozilla
/
dom
/
SecurityPolicyViolationEvent
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIClassInfo
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsISerializable
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsXPCOM
.
h
"
#
define
NS_CSPCONTEXT_CONTRACTID
"
mozilla
.
org
/
cspcontext
;
1
"
#
define
NS_CSPCONTEXT_CID
\
{
0x09d9ed1a
0xe5d4
0x4004
\
{
0xbf
0xe0
0x27
0xce
0xb9
0x23
0xd9
0xac
}
}
class
nsINetworkInterceptController
;
class
nsIEventTarget
;
struct
ConsoleMsgQueueElem
;
class
nsCSPContext
:
public
nsIContentSecurityPolicy
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTSECURITYPOLICY
NS_DECL_NSISERIALIZABLE
protected
:
virtual
~
nsCSPContext
(
)
;
public
:
nsCSPContext
(
)
;
void
flushConsoleMessages
(
)
;
void
logToConsole
(
const
char
*
aName
const
char16_t
*
*
aParams
uint32_t
aParamsLength
const
nsAString
&
aSourceName
const
nsAString
&
aSourceLine
uint32_t
aLineNumber
uint32_t
aColumnNumber
uint32_t
aSeverityFlag
)
;
nsresult
GatherSecurityPolicyViolationEventData
(
nsIURI
*
aBlockedURI
nsIURI
*
aOriginalURI
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
nsAString
&
aSourceFile
nsAString
&
aScriptSample
uint32_t
aLineNum
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
)
;
nsresult
SendReports
(
const
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
uint32_t
aViolatedPolicyIndex
)
;
nsresult
FireViolationEvent
(
const
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
)
;
nsresult
AsyncReportViolation
(
nsISupports
*
aBlockedContentSource
nsIURI
*
aOriginalURI
const
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
const
nsAString
&
aObserverSubject
const
nsAString
&
aSourceFile
const
nsAString
&
aScriptSample
uint32_t
aLineNum
)
;
void
clearLoadingPrincipal
(
)
{
mLoadingPrincipal
=
nullptr
;
}
nsWeakPtr
GetLoadingContext
(
)
{
return
mLoadingContext
;
}
private
:
bool
permitsInternal
(
CSPDirective
aDir
nsIURI
*
aContentLocation
nsIURI
*
aOriginalURI
const
nsAString
&
aNonce
bool
aWasRedirected
bool
aIsPreload
bool
aSpecific
bool
aSendViolationReports
bool
aSendContentLocationInViolationReports
bool
aParserCreated
)
;
void
reportInlineViolation
(
nsContentPolicyType
aContentType
const
nsAString
&
aNonce
const
nsAString
&
aContent
const
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
uint32_t
aLineNumber
)
;
static
int32_t
sScriptSampleMaxLength
;
static
uint32_t
ScriptSampleMaxLength
(
)
{
return
std
:
:
max
(
sScriptSampleMaxLength
0
)
;
}
static
bool
sViolationEventsEnabled
;
nsString
mReferrer
;
uint64_t
mInnerWindowID
;
nsTArray
<
nsCSPPolicy
*
>
mPolicies
;
nsCOMPtr
<
nsIURI
>
mSelfURI
;
nsDataHashtable
<
nsCStringHashKey
int16_t
>
mShouldLoadCache
;
nsCOMPtr
<
nsILoadGroup
>
mCallingChannelLoadGroup
;
nsWeakPtr
mLoadingContext
;
nsIPrincipal
*
mLoadingPrincipal
;
nsTArray
<
ConsoleMsgQueueElem
>
mConsoleMsgQueue
;
bool
mQueueUpMessages
;
nsCOMPtr
<
nsIEventTarget
>
mEventTarget
;
}
;
class
CSPViolationReportListener
:
public
nsIStreamListener
{
public
:
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_ISUPPORTS
public
:
CSPViolationReportListener
(
)
;
protected
:
virtual
~
CSPViolationReportListener
(
)
;
}
;
class
CSPReportRedirectSink
final
:
public
nsIChannelEventSink
public
nsIInterfaceRequestor
{
public
:
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_ISUPPORTS
public
:
CSPReportRedirectSink
(
)
;
void
SetInterceptController
(
nsINetworkInterceptController
*
aInterceptController
)
;
protected
:
virtual
~
CSPReportRedirectSink
(
)
;
private
:
nsCOMPtr
<
nsINetworkInterceptController
>
mInterceptController
;
}
;
#
endif
