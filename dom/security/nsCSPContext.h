#
ifndef
nsCSPContext_h___
#
define
nsCSPContext_h___
#
include
"
mozilla
/
dom
/
nsCSPUtils
.
h
"
#
include
"
mozilla
/
dom
/
SecurityPolicyViolationEvent
.
h
"
#
include
"
mozilla
/
StaticPrefs_security
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsXPCOM
.
h
"
#
define
NS_CSPCONTEXT_CONTRACTID
"
mozilla
.
org
/
cspcontext
;
1
"
#
define
NS_CSPCONTEXT_CID
\
{
\
0x09d9ed1a
0xe5d4
0x4004
{
\
0xbf
0xe0
0x27
0xce
0xb9
0x23
0xd9
0xac
\
}
\
}
class
nsINetworkInterceptController
;
class
nsIEventTarget
;
struct
ConsoleMsgQueueElem
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
namespace
ipc
{
class
ContentSecurityPolicy
;
}
}
class
nsCSPContext
:
public
nsIContentSecurityPolicy
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICONTENTSECURITYPOLICY
NS_DECL_NSISERIALIZABLE
protected
:
virtual
~
nsCSPContext
(
)
;
public
:
nsCSPContext
(
)
;
static
bool
Equals
(
nsIContentSecurityPolicy
*
aCSP
nsIContentSecurityPolicy
*
aOtherCSP
)
;
nsresult
InitFromOther
(
nsCSPContext
*
otherContext
)
;
void
flushConsoleMessages
(
)
;
void
logToConsole
(
const
char
*
aName
const
nsTArray
<
nsString
>
&
aParams
const
nsAString
&
aSourceName
const
nsAString
&
aSourceLine
uint32_t
aLineNumber
uint32_t
aColumnNumber
uint32_t
aSeverityFlag
)
;
nsresult
GatherSecurityPolicyViolationEventData
(
nsIURI
*
aBlockedURI
const
nsACString
&
aBlockedString
nsIURI
*
aOriginalURI
nsAString
&
aViolatedDirective
uint32_t
aViolatedPolicyIndex
nsAString
&
aSourceFile
nsAString
&
aScriptSample
uint32_t
aLineNum
uint32_t
aColumnNum
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
)
;
nsresult
SendReports
(
const
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
uint32_t
aViolatedPolicyIndex
)
;
nsresult
FireViolationEvent
(
mozilla
:
:
dom
:
:
Element
*
aTriggeringElement
nsICSPEventListener
*
aCSPEventListener
const
mozilla
:
:
dom
:
:
SecurityPolicyViolationEventInit
&
aViolationEventInit
)
;
enum
BlockedContentSource
{
eUnknown
eInline
eEval
eSelf
eWasmEval
}
;
nsresult
AsyncReportViolation
(
mozilla
:
:
dom
:
:
Element
*
aTriggeringElement
nsICSPEventListener
*
aCSPEventListener
nsIURI
*
aBlockedURI
BlockedContentSource
aBlockedContentSource
nsIURI
*
aOriginalURI
const
nsAString
&
aViolatedDirective
const
nsAString
&
aEffectiveDirective
uint32_t
aViolatedPolicyIndex
const
nsAString
&
aObserverSubject
const
nsAString
&
aSourceFile
const
nsAString
&
aScriptSample
uint32_t
aLineNum
uint32_t
aColumnNum
)
;
void
clearLoadingPrincipal
(
)
{
mLoadingPrincipal
=
nullptr
;
}
nsWeakPtr
GetLoadingContext
(
)
{
return
mLoadingContext
;
}
static
uint32_t
ScriptSampleMaxLength
(
)
{
return
std
:
:
max
(
mozilla
:
:
StaticPrefs
:
:
security_csp_reporting_script_sample_max_length
(
)
0
)
;
}
void
AddIPCPolicy
(
const
mozilla
:
:
ipc
:
:
ContentSecurityPolicy
&
aPolicy
)
;
void
SerializePolicies
(
nsTArray
<
mozilla
:
:
ipc
:
:
ContentSecurityPolicy
>
&
aPolicies
)
;
private
:
void
EnsureIPCPoliciesRead
(
)
;
bool
permitsInternal
(
CSPDirective
aDir
mozilla
:
:
dom
:
:
Element
*
aTriggeringElement
nsICSPEventListener
*
aCSPEventListener
nsIURI
*
aContentLocation
nsIURI
*
aOriginalURIIfRedirect
const
nsAString
&
aNonce
bool
aSpecific
bool
aSendViolationReports
bool
aSendContentLocationInViolationReports
bool
aParserCreated
)
;
void
reportInlineViolation
(
CSPDirective
aDirective
mozilla
:
:
dom
:
:
Element
*
aTriggeringElement
nsICSPEventListener
*
aCSPEventListener
const
nsAString
&
aNonce
const
nsAString
&
aContent
const
nsAString
&
aViolatedDirective
const
nsAString
&
aEffectiveDirective
uint32_t
aViolatedPolicyIndex
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
nsString
mReferrer
;
uint64_t
mInnerWindowID
;
bool
mSkipAllowInlineStyleCheck
;
nsTArray
<
mozilla
:
:
ipc
:
:
ContentSecurityPolicy
>
mIPCPolicies
;
nsTArray
<
nsCSPPolicy
*
>
mPolicies
;
nsCOMPtr
<
nsIURI
>
mSelfURI
;
nsCOMPtr
<
nsILoadGroup
>
mCallingChannelLoadGroup
;
nsWeakPtr
mLoadingContext
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsTArray
<
ConsoleMsgQueueElem
>
mConsoleMsgQueue
;
bool
mQueueUpMessages
;
nsCOMPtr
<
nsIEventTarget
>
mEventTarget
;
}
;
class
CSPViolationReportListener
:
public
nsIStreamListener
{
public
:
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_ISUPPORTS
public
:
CSPViolationReportListener
(
)
;
protected
:
virtual
~
CSPViolationReportListener
(
)
;
}
;
class
CSPReportRedirectSink
final
:
public
nsIChannelEventSink
public
nsIInterfaceRequestor
{
public
:
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_ISUPPORTS
public
:
CSPReportRedirectSink
(
)
;
void
SetInterceptController
(
nsINetworkInterceptController
*
aInterceptController
)
;
protected
:
virtual
~
CSPReportRedirectSink
(
)
;
private
:
nsCOMPtr
<
nsINetworkInterceptController
>
mInterceptController
;
}
;
#
endif
