#
ifndef
mozilla_dom_SRIMetadata_h
#
define
mozilla_dom_SRIMetadata_h
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
SRICheck
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SRIMetadata
final
{
friend
class
SRICheck
;
public
:
static
const
uint32_t
MAX_ALTERNATE_HASHES
=
256
;
static
const
int8_t
UNKNOWN_ALGORITHM
=
-
1
;
SRIMetadata
(
)
:
mAlgorithmType
(
UNKNOWN_ALGORITHM
)
mEmpty
(
true
)
{
}
explicit
SRIMetadata
(
const
nsACString
&
aToken
)
;
bool
operator
<
(
const
SRIMetadata
&
aOther
)
const
;
bool
operator
>
(
const
SRIMetadata
&
aOther
)
const
;
SRIMetadata
&
operator
+
=
(
const
SRIMetadata
&
aOther
)
;
bool
operator
=
=
(
const
SRIMetadata
&
aOther
)
const
;
bool
IsEmpty
(
)
const
{
return
mEmpty
;
}
bool
IsMalformed
(
)
const
{
return
mHashes
.
IsEmpty
(
)
|
|
mAlgorithm
.
IsEmpty
(
)
;
}
bool
IsAlgorithmSupported
(
)
const
{
return
mAlgorithmType
!
=
UNKNOWN_ALGORITHM
;
}
bool
IsValid
(
)
const
{
return
!
IsMalformed
(
)
&
&
IsAlgorithmSupported
(
)
;
}
uint32_t
HashCount
(
)
const
{
return
mHashes
.
Length
(
)
;
}
void
GetHash
(
uint32_t
aIndex
nsCString
*
outHash
)
const
;
void
GetAlgorithm
(
nsCString
*
outAlg
)
const
{
*
outAlg
=
mAlgorithm
;
}
void
GetHashType
(
int8_t
*
outType
uint32_t
*
outLength
)
const
;
const
nsString
&
GetIntegrityString
(
)
const
{
return
mIntegrityString
;
}
bool
CanTrustBeDelegatedTo
(
const
SRIMetadata
&
aOther
)
const
;
private
:
CopyableTArray
<
nsCString
>
mHashes
;
nsString
mIntegrityString
;
nsCString
mAlgorithm
;
int8_t
mAlgorithmType
;
bool
mEmpty
;
}
;
}
}
#
endif
