#
include
"
FramingChecker
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsCSPUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPUtils
.
h
"
#
include
"
mozilla
/
dom
/
LoadURIOptionsBinding
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
nsIStringBundle
.
h
"
using
namespace
mozilla
;
void
FramingChecker
:
:
ReportError
(
const
char
*
aMessageTag
nsIDocShellTreeItem
*
aParentDocShellItem
nsIURI
*
aChildURI
const
nsAString
&
aPolicy
)
{
MOZ_ASSERT
(
aParentDocShellItem
"
Need
a
parent
docshell
"
)
;
if
(
!
aChildURI
|
|
!
aParentDocShellItem
)
{
return
;
}
Document
*
parentDocument
=
aParentDocShellItem
-
>
GetDocument
(
)
;
nsCOMPtr
<
nsIURI
>
parentURI
;
parentDocument
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
parentURI
)
)
;
MOZ_ASSERT
(
!
parentDocument
-
>
NodePrincipal
(
)
-
>
IsSystemPrincipal
(
)
"
Should
not
get
system
principal
here
.
"
)
;
nsAutoCString
parentSpec
;
nsresult
rv
;
rv
=
parentURI
-
>
GetAsciiSpec
(
parentSpec
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsAutoCString
childSpec
;
rv
=
aChildURI
-
>
GetAsciiSpec
(
childSpec
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsCOMPtr
<
nsIStringBundleService
>
bundleService
=
mozilla
:
:
services
:
:
GetStringBundleService
(
)
;
nsCOMPtr
<
nsIStringBundle
>
bundle
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
global
/
locale
/
security
/
security
.
properties
"
getter_AddRefs
(
bundle
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
NS_WARN_IF
(
!
bundle
)
)
{
return
;
}
nsCOMPtr
<
nsIConsoleService
>
console
(
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
)
;
nsCOMPtr
<
nsIScriptError
>
error
(
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
)
;
if
(
!
console
|
|
!
error
)
{
return
;
}
nsAutoString
message
;
AutoTArray
<
nsString
3
>
formatStrings
;
formatStrings
.
AppendElement
(
aPolicy
)
;
CopyASCIItoUTF16
(
childSpec
*
formatStrings
.
AppendElement
(
)
)
;
CopyASCIItoUTF16
(
parentSpec
*
formatStrings
.
AppendElement
(
)
)
;
rv
=
bundle
-
>
FormatStringFromName
(
aMessageTag
formatStrings
message
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
rv
=
error
-
>
InitWithWindowID
(
message
EmptyString
(
)
EmptyString
(
)
0
0
nsIScriptError
:
:
errorFlag
"
X
-
Frame
-
Options
"
parentDocument
-
>
InnerWindowID
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
console
-
>
LogMessage
(
error
)
;
}
bool
FramingChecker
:
:
CheckOneFrameOptionsPolicy
(
nsIHttpChannel
*
aHttpChannel
const
nsAString
&
aPolicy
nsIDocShell
*
aDocShell
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDocShellTreeItem
>
thisDocShellItem
(
aDocShell
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
parentDocShellItem
;
nsCOMPtr
<
nsIDocShellTreeItem
>
curDocShellItem
=
thisDocShellItem
;
nsCOMPtr
<
Document
>
topDoc
;
nsCOMPtr
<
nsIScriptSecurityManager
>
ssm
=
do_GetService
(
NS_SCRIPTSECURITYMANAGER_CONTRACTID
&
rv
)
;
if
(
!
ssm
)
{
MOZ_CRASH
(
)
;
}
nsCOMPtr
<
nsIURI
>
uri
;
aHttpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
&
&
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
root
;
curDocShellItem
-
>
GetInProcessSameTypeRootTreeItem
(
getter_AddRefs
(
root
)
)
;
ReportError
(
"
XFOInvalid
"
root
uri
aPolicy
)
;
return
true
;
}
if
(
!
aDocShell
)
{
return
true
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
thisWindow
=
aDocShell
-
>
GetWindow
(
)
;
if
(
!
thisWindow
)
{
return
true
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
topWindow
=
thisWindow
-
>
GetInProcessScriptableTop
(
)
;
if
(
thisWindow
=
=
topWindow
)
{
return
true
;
}
bool
checkSameOrigin
=
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
;
nsCOMPtr
<
nsIURI
>
topUri
;
while
(
NS_SUCCEEDED
(
curDocShellItem
-
>
GetInProcessParent
(
getter_AddRefs
(
parentDocShellItem
)
)
)
&
&
parentDocShellItem
)
{
nsCOMPtr
<
nsIDocShell
>
curDocShell
=
do_QueryInterface
(
curDocShellItem
)
;
if
(
curDocShell
&
&
curDocShell
-
>
GetIsMozBrowser
(
)
)
{
break
;
}
topDoc
=
parentDocShellItem
-
>
GetDocument
(
)
;
if
(
topDoc
)
{
if
(
topDoc
-
>
NodePrincipal
(
)
-
>
IsSystemPrincipal
(
)
)
{
break
;
}
if
(
checkSameOrigin
)
{
topDoc
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
topUri
)
)
;
bool
isPrivateWin
=
topDoc
-
>
NodePrincipal
(
)
-
>
OriginAttributesRef
(
)
.
mPrivateBrowsingId
>
0
;
rv
=
ssm
-
>
CheckSameOriginURI
(
uri
topUri
true
isPrivateWin
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReportError
(
"
XFOSameOrigin
"
curDocShellItem
uri
aPolicy
)
;
return
false
;
}
}
}
else
{
return
false
;
}
curDocShellItem
=
parentDocShellItem
;
}
if
(
curDocShellItem
=
=
thisDocShellItem
)
{
return
true
;
}
if
(
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
)
{
ReportError
(
"
XFODeny
"
curDocShellItem
uri
aPolicy
)
;
return
false
;
}
return
true
;
}
static
bool
ShouldIgnoreFrameOptions
(
nsIChannel
*
aChannel
nsIContentSecurityPolicy
*
aCSP
)
{
NS_ENSURE_TRUE
(
aChannel
false
)
;
NS_ENSURE_TRUE
(
aCSP
false
)
;
bool
enforcesFrameAncestors
=
false
;
aCSP
-
>
GetEnforcesFrameAncestors
(
&
enforcesFrameAncestors
)
;
if
(
!
enforcesFrameAncestors
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
uint64_t
innerWindowID
=
loadInfo
-
>
GetInnerWindowID
(
)
;
bool
privateWindow
=
!
!
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
;
AutoTArray
<
nsString
2
>
params
=
{
NS_LITERAL_STRING
(
"
x
-
frame
-
options
"
)
NS_LITERAL_STRING
(
"
frame
-
ancestors
"
)
}
;
CSP_LogLocalizedStr
(
"
IgnoringSrcBecauseOfDirective
"
params
EmptyString
(
)
EmptyString
(
)
0
0
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
IgnoringSrcBecauseOfDirective
"
)
innerWindowID
privateWindow
)
;
return
true
;
}
bool
FramingChecker
:
:
CheckFrameOptions
(
nsIChannel
*
aChannel
nsIDocShell
*
aDocShell
nsIContentSecurityPolicy
*
aCsp
)
{
if
(
!
aChannel
|
|
!
aDocShell
)
{
return
true
;
}
if
(
ShouldIgnoreFrameOptions
(
aChannel
aCsp
)
)
{
return
true
;
}
nsresult
rv
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
rv
=
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetHttpChannel
(
aChannel
getter_AddRefs
(
httpChannel
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
}
if
(
!
httpChannel
)
{
return
true
;
}
nsAutoCString
xfoHeaderCValue
;
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
NS_LITERAL_CSTRING
(
"
X
-
Frame
-
Options
"
)
xfoHeaderCValue
)
;
NS_ConvertUTF8toUTF16
xfoHeaderValue
(
xfoHeaderCValue
)
;
if
(
xfoHeaderValue
.
IsEmpty
(
)
)
{
return
true
;
}
nsCharSeparatedTokenizer
tokenizer
(
xfoHeaderValue
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsAString
&
tok
=
tokenizer
.
nextToken
(
)
;
if
(
!
CheckOneFrameOptionsPolicy
(
httpChannel
tok
aDocShell
)
)
{
httpChannel
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
if
(
aDocShell
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryObject
(
aDocShell
)
)
;
if
(
webNav
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
httpChannel
-
>
LoadInfo
(
)
;
RefPtr
<
NullPrincipal
>
principal
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
loadInfo
-
>
TriggeringPrincipal
(
)
)
;
LoadURIOptions
loadURIOptions
;
loadURIOptions
.
mTriggeringPrincipal
=
principal
;
webNav
-
>
LoadURI
(
NS_LITERAL_STRING
(
"
about
:
blank
"
)
loadURIOptions
)
;
}
}
return
false
;
}
}
return
true
;
}
