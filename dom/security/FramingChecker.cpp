#
include
"
FramingChecker
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSPUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsHttpChannel
.
h
"
#
include
"
nsContentSecurityUtils
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIConsoleReportCollector
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPUtils
.
h
"
#
include
"
mozilla
/
dom
/
LoadURIOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
net
/
HttpBaseChannel
.
h
"
#
include
"
nsIObserverService
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
void
FramingChecker
:
:
ReportError
(
const
char
*
aMessageTag
nsIHttpChannel
*
aChannel
nsIURI
*
aURI
const
nsAString
&
aPolicy
)
{
MOZ_ASSERT
(
aChannel
)
;
MOZ_ASSERT
(
aURI
)
;
nsCOMPtr
<
net
:
:
HttpBaseChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
return
;
}
nsAutoCString
spec
;
nsresult
rv
=
aURI
-
>
GetAsciiSpec
(
spec
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsTArray
<
nsString
>
params
;
params
.
AppendElement
(
aPolicy
)
;
params
.
AppendElement
(
NS_ConvertUTF8toUTF16
(
spec
)
)
;
httpChannel
-
>
AddConsoleReport
(
nsIScriptError
:
:
errorFlag
"
X
-
Frame
-
Options
"
_ns
nsContentUtils
:
:
eSECURITY_PROPERTIES
spec
0
0
nsDependentCString
(
aMessageTag
)
params
)
;
}
bool
FramingChecker
:
:
CheckOneFrameOptionsPolicy
(
nsIHttpChannel
*
aHttpChannel
const
nsAString
&
aPolicy
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aHttpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
&
&
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
)
{
ReportError
(
"
XFrameOptionsInvalid
"
aHttpChannel
uri
aPolicy
)
;
return
true
;
}
bool
checkSameOrigin
=
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aHttpChannel
-
>
LoadInfo
(
)
;
RefPtr
<
mozilla
:
:
dom
:
:
BrowsingContext
>
ctx
;
loadInfo
-
>
GetBrowsingContext
(
getter_AddRefs
(
ctx
)
)
;
while
(
ctx
)
{
nsCOMPtr
<
nsIPrincipal
>
principal
;
if
(
XRE_IsParentProcess
(
)
)
{
WindowGlobalParent
*
window
=
ctx
-
>
Canonical
(
)
-
>
GetCurrentWindowGlobal
(
)
;
if
(
window
)
{
principal
=
window
-
>
DocumentPrincipal
(
)
;
}
}
else
if
(
nsPIDOMWindowOuter
*
windowOuter
=
ctx
-
>
GetDOMWindow
(
)
)
{
principal
=
nsGlobalWindowOuter
:
:
Cast
(
windowOuter
)
-
>
GetPrincipal
(
)
;
}
if
(
principal
&
&
principal
-
>
IsSystemPrincipal
(
)
)
{
return
true
;
}
if
(
checkSameOrigin
)
{
bool
isPrivateWin
=
false
;
bool
isSameOrigin
=
false
;
if
(
principal
)
{
isPrivateWin
=
principal
-
>
OriginAttributesRef
(
)
.
mPrivateBrowsingId
>
0
;
principal
-
>
IsSameOrigin
(
uri
isPrivateWin
&
isSameOrigin
)
;
}
if
(
!
isSameOrigin
)
{
ReportError
(
"
XFrameOptionsDeny
"
aHttpChannel
uri
aPolicy
)
;
return
false
;
}
}
ctx
=
ctx
-
>
GetParent
(
)
;
}
if
(
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
)
{
ReportError
(
"
XFrameOptionsDeny
"
aHttpChannel
uri
aPolicy
)
;
return
false
;
}
return
true
;
}
static
bool
ShouldIgnoreFrameOptions
(
nsIChannel
*
aChannel
nsIContentSecurityPolicy
*
aCSP
)
{
NS_ENSURE_TRUE
(
aChannel
false
)
;
if
(
!
aCSP
)
{
return
false
;
}
bool
enforcesFrameAncestors
=
false
;
aCSP
-
>
GetEnforcesFrameAncestors
(
&
enforcesFrameAncestors
)
;
if
(
!
enforcesFrameAncestors
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
uint64_t
innerWindowID
=
loadInfo
-
>
GetInnerWindowID
(
)
;
bool
privateWindow
=
!
!
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
;
AutoTArray
<
nsString
2
>
params
=
{
u
"
x
-
frame
-
options
"
_ns
u
"
frame
-
ancestors
"
_ns
}
;
CSP_LogLocalizedStr
(
"
IgnoringSrcBecauseOfDirective
"
params
u
"
"
_ns
u
"
"
_ns
0
0
nsIScriptError
:
:
warningFlag
"
IgnoringSrcBecauseOfDirective
"
_ns
innerWindowID
privateWindow
)
;
return
true
;
}
bool
FramingChecker
:
:
CheckFrameOptions
(
nsIChannel
*
aChannel
nsIContentSecurityPolicy
*
aCsp
)
{
if
(
!
aChannel
)
{
return
true
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
nsContentPolicyType
contentType
=
loadInfo
-
>
GetExternalContentPolicyType
(
)
;
if
(
contentType
!
=
nsIContentPolicy
:
:
TYPE_SUBDOCUMENT
&
&
contentType
!
=
nsIContentPolicy
:
:
TYPE_OBJECT
)
{
return
true
;
}
if
(
ShouldIgnoreFrameOptions
(
aChannel
aCsp
)
)
{
return
true
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
;
nsresult
rv
=
nsContentSecurityUtils
:
:
GetHttpChannelFromPotentialMultiPart
(
aChannel
getter_AddRefs
(
httpChannel
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
if
(
!
httpChannel
)
{
return
true
;
}
uint32_t
responseStatus
;
rv
=
httpChannel
-
>
GetResponseStatus
(
&
responseStatus
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
true
;
}
if
(
mozilla
:
:
net
:
:
nsHttpChannel
:
:
IsRedirectStatus
(
responseStatus
)
)
{
return
true
;
}
nsAutoCString
xfoHeaderCValue
;
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
"
X
-
Frame
-
Options
"
_ns
xfoHeaderCValue
)
;
NS_ConvertUTF8toUTF16
xfoHeaderValue
(
xfoHeaderCValue
)
;
if
(
xfoHeaderValue
.
IsEmpty
(
)
)
{
return
true
;
}
nsCharSeparatedTokenizer
tokenizer
(
xfoHeaderValue
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsAString
&
tok
=
tokenizer
.
nextToken
(
)
;
if
(
!
CheckOneFrameOptionsPolicy
(
httpChannel
tok
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
httpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
nsAutoString
policy
(
tok
)
;
observerService
-
>
NotifyObservers
(
uri
"
xfo
-
on
-
violate
-
policy
"
policy
.
get
(
)
)
;
return
false
;
}
}
return
true
;
}
