#
include
"
FramingChecker
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsCSPUtils
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPUtils
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
using
namespace
mozilla
;
bool
FramingChecker
:
:
CheckOneFrameOptionsPolicy
(
nsIHttpChannel
*
aHttpChannel
const
nsAString
&
aPolicy
nsIDocShell
*
aDocShell
)
{
static
const
char
allowFrom
[
]
=
"
allow
-
from
"
;
const
uint32_t
allowFromLen
=
ArrayLength
(
allowFrom
)
-
1
;
bool
isAllowFrom
=
StringHead
(
aPolicy
allowFromLen
)
.
LowerCaseEqualsLiteral
(
allowFrom
)
;
if
(
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
&
&
!
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
&
&
!
isAllowFrom
)
{
return
true
;
}
nsCOMPtr
<
nsIURI
>
uri
;
aHttpChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
if
(
!
aDocShell
)
{
return
true
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
thisWindow
=
aDocShell
-
>
GetWindow
(
)
;
if
(
!
thisWindow
)
{
return
true
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
topWindow
=
thisWindow
-
>
GetScriptableTop
(
)
;
if
(
thisWindow
=
=
topWindow
)
{
return
true
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
thisDocShellItem
(
do_QueryInterface
(
static_cast
<
nsIDocShell
*
>
(
aDocShell
)
)
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
parentDocShellItem
;
nsCOMPtr
<
nsIDocShellTreeItem
>
curDocShellItem
=
thisDocShellItem
;
nsCOMPtr
<
nsIDocument
>
topDoc
;
nsresult
rv
;
nsCOMPtr
<
nsIScriptSecurityManager
>
ssm
=
do_GetService
(
NS_SCRIPTSECURITYMANAGER_CONTRACTID
&
rv
)
;
if
(
!
ssm
)
{
MOZ_CRASH
(
)
;
}
bool
checkSameOrigin
=
aPolicy
.
LowerCaseEqualsLiteral
(
"
sameorigin
"
)
;
nsCOMPtr
<
nsIURI
>
topUri
;
while
(
NS_SUCCEEDED
(
curDocShellItem
-
>
GetParent
(
getter_AddRefs
(
parentDocShellItem
)
)
)
&
&
parentDocShellItem
)
{
nsCOMPtr
<
nsIDocShell
>
curDocShell
=
do_QueryInterface
(
curDocShellItem
)
;
if
(
curDocShell
&
&
curDocShell
-
>
GetIsMozBrowser
(
)
)
{
break
;
}
bool
system
=
false
;
topDoc
=
parentDocShellItem
-
>
GetDocument
(
)
;
if
(
topDoc
)
{
if
(
NS_SUCCEEDED
(
ssm
-
>
IsSystemPrincipal
(
topDoc
-
>
NodePrincipal
(
)
&
system
)
)
&
&
system
)
{
break
;
}
if
(
checkSameOrigin
)
{
topDoc
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
topUri
)
)
;
bool
isPrivateWin
=
topDoc
-
>
NodePrincipal
(
)
-
>
OriginAttributesRef
(
)
.
mPrivateBrowsingId
>
0
;
rv
=
ssm
-
>
CheckSameOriginURI
(
uri
topUri
true
isPrivateWin
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReportXFOViolation
(
curDocShellItem
uri
eSAMEORIGIN
)
;
return
false
;
}
}
}
else
{
return
false
;
}
curDocShellItem
=
parentDocShellItem
;
}
if
(
curDocShellItem
=
=
thisDocShellItem
)
{
return
true
;
}
if
(
aPolicy
.
LowerCaseEqualsLiteral
(
"
deny
"
)
)
{
ReportXFOViolation
(
curDocShellItem
uri
eDENY
)
;
return
false
;
}
topDoc
=
curDocShellItem
-
>
GetDocument
(
)
;
topDoc
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
topUri
)
)
;
if
(
isAllowFrom
)
{
if
(
aPolicy
.
Length
(
)
=
=
allowFromLen
|
|
(
aPolicy
[
allowFromLen
]
!
=
'
'
&
&
aPolicy
[
allowFromLen
]
!
=
'
\
t
'
)
)
{
ReportXFOViolation
(
curDocShellItem
uri
eALLOWFROM
)
;
return
false
;
}
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
Substring
(
aPolicy
allowFromLen
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
bool
isPrivateWin
=
topDoc
-
>
NodePrincipal
(
)
-
>
OriginAttributesRef
(
)
.
mPrivateBrowsingId
>
0
;
rv
=
ssm
-
>
CheckSameOriginURI
(
uri
topUri
true
isPrivateWin
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReportXFOViolation
(
curDocShellItem
uri
eALLOWFROM
)
;
return
false
;
}
}
return
true
;
}
static
bool
ShouldIgnoreFrameOptions
(
nsIChannel
*
aChannel
nsIPrincipal
*
aPrincipal
)
{
NS_ENSURE_TRUE
(
aChannel
false
)
;
NS_ENSURE_TRUE
(
aPrincipal
false
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
csp
;
aPrincipal
-
>
GetCsp
(
getter_AddRefs
(
csp
)
)
;
if
(
!
csp
)
{
return
false
;
}
bool
enforcesFrameAncestors
=
false
;
csp
-
>
GetEnforcesFrameAncestors
(
&
enforcesFrameAncestors
)
;
if
(
!
enforcesFrameAncestors
)
{
return
false
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
GetLoadInfo
(
)
;
uint64_t
innerWindowID
=
loadInfo
?
loadInfo
-
>
GetInnerWindowID
(
)
:
0
;
bool
privateWindow
=
loadInfo
?
!
!
loadInfo
-
>
GetOriginAttributes
(
)
.
mPrivateBrowsingId
:
false
;
const
char16_t
*
params
[
]
=
{
u
"
x
-
frame
-
options
"
u
"
frame
-
ancestors
"
}
;
CSP_LogLocalizedStr
(
"
IgnoringSrcBecauseOfDirective
"
params
ArrayLength
(
params
)
EmptyString
(
)
EmptyString
(
)
0
0
nsIScriptError
:
:
warningFlag
NS_LITERAL_CSTRING
(
"
IgnoringSrcBecauseOfDirective
"
)
innerWindowID
privateWindow
)
;
return
true
;
}
bool
FramingChecker
:
:
CheckFrameOptions
(
nsIChannel
*
aChannel
nsIDocShell
*
aDocShell
nsIPrincipal
*
aPrincipal
)
{
if
(
!
aChannel
|
|
!
aDocShell
)
{
return
true
;
}
if
(
ShouldIgnoreFrameOptions
(
aChannel
aPrincipal
)
)
{
return
true
;
}
nsresult
rv
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
httpChannel
)
{
rv
=
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetHttpChannel
(
aChannel
getter_AddRefs
(
httpChannel
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
}
if
(
!
httpChannel
)
{
return
true
;
}
nsAutoCString
xfoHeaderCValue
;
Unused
<
<
httpChannel
-
>
GetResponseHeader
(
NS_LITERAL_CSTRING
(
"
X
-
Frame
-
Options
"
)
xfoHeaderCValue
)
;
NS_ConvertUTF8toUTF16
xfoHeaderValue
(
xfoHeaderCValue
)
;
if
(
xfoHeaderValue
.
IsEmpty
(
)
)
{
return
true
;
}
nsCharSeparatedTokenizer
tokenizer
(
xfoHeaderValue
'
'
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsAString
&
tok
=
tokenizer
.
nextToken
(
)
;
if
(
!
CheckOneFrameOptionsPolicy
(
httpChannel
tok
aDocShell
)
)
{
httpChannel
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
if
(
aDocShell
)
{
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryObject
(
aDocShell
)
)
;
if
(
webNav
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
httpChannel
-
>
GetLoadInfo
(
)
;
MOZ_ASSERT
(
loadInfo
)
;
RefPtr
<
NullPrincipal
>
principal
=
NullPrincipal
:
:
CreateWithInheritedAttributes
(
loadInfo
-
>
TriggeringPrincipal
(
)
)
;
webNav
-
>
LoadURI
(
NS_LITERAL_STRING
(
"
about
:
blank
"
)
0
nullptr
nullptr
nullptr
principal
)
;
}
}
return
false
;
}
}
return
true
;
}
void
FramingChecker
:
:
ReportXFOViolation
(
nsIDocShellTreeItem
*
aTopDocShellItem
nsIURI
*
aThisURI
XFOHeader
aHeader
)
{
MOZ_ASSERT
(
aTopDocShellItem
"
Need
a
top
docshell
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
topOuterWindow
=
aTopDocShellItem
-
>
GetWindow
(
)
;
if
(
!
topOuterWindow
)
{
return
;
}
nsPIDOMWindowInner
*
topInnerWindow
=
topOuterWindow
-
>
GetCurrentInnerWindow
(
)
;
if
(
!
topInnerWindow
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
topURI
;
nsCOMPtr
<
nsIDocument
>
document
=
aTopDocShellItem
-
>
GetDocument
(
)
;
nsresult
rv
=
document
-
>
NodePrincipal
(
)
-
>
GetURI
(
getter_AddRefs
(
topURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
if
(
!
topURI
)
{
return
;
}
nsCString
topURIString
;
nsCString
thisURIString
;
rv
=
topURI
-
>
GetSpec
(
topURIString
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
rv
=
aThisURI
-
>
GetSpec
(
thisURIString
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsCOMPtr
<
nsIConsoleService
>
consoleService
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
;
nsCOMPtr
<
nsIScriptError
>
errorObject
=
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
;
if
(
!
consoleService
|
|
!
errorObject
)
{
return
;
}
nsString
msg
=
NS_LITERAL_STRING
(
"
Load
denied
by
X
-
Frame
-
Options
:
"
)
;
msg
.
Append
(
NS_ConvertUTF8toUTF16
(
thisURIString
)
)
;
switch
(
aHeader
)
{
case
eDENY
:
msg
.
AppendLiteral
(
"
does
not
permit
framing
.
"
)
;
break
;
case
eSAMEORIGIN
:
msg
.
AppendLiteral
(
"
does
not
permit
cross
-
origin
framing
.
"
)
;
break
;
case
eALLOWFROM
:
msg
.
AppendLiteral
(
"
does
not
permit
framing
by
"
)
;
msg
.
Append
(
NS_ConvertUTF8toUTF16
(
topURIString
)
)
;
msg
.
Append
(
'
.
'
)
;
break
;
}
rv
=
errorObject
-
>
InitWithSanitizedSource
(
msg
EmptyString
(
)
EmptyString
(
)
0
0
nsIScriptError
:
:
errorFlag
"
X
-
Frame
-
Options
"
topInnerWindow
-
>
WindowID
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
consoleService
-
>
LogMessage
(
errorObject
)
;
}
