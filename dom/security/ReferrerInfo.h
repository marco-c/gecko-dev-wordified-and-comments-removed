#
ifndef
mozilla_dom_ReferrerInfo_h
#
define
mozilla_dom_ReferrerInfo_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIReferrerInfo
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
dom
/
ReferrerPolicyBinding
.
h
"
#
define
REFERRERINFOF_CONTRACTID
"
mozilla
.
org
/
referrer
-
info
;
1
"
#
define
REFERRERINFO_CID
\
{
\
0x041a129f
0x10ce
0x4bda
{
\
0xa6
0x0d
0xe0
0x27
0xa2
0x6d
0x5e
0xd0
\
}
\
}
class
nsIURI
;
class
nsIChannel
;
class
nsILoadInfo
;
class
nsINode
;
class
nsIPrincipal
;
namespace
mozilla
{
class
StyleSheet
;
class
URLAndReferrerInfo
;
namespace
net
{
class
HttpBaseChannel
;
class
nsHttpChannel
;
}
}
using
mozilla
:
:
Maybe
;
namespace
mozilla
{
namespace
dom
{
class
ReferrerInfo
:
public
nsIReferrerInfo
{
public
:
typedef
enum
ReferrerPolicy
ReferrerPolicyEnum
;
ReferrerInfo
(
)
;
explicit
ReferrerInfo
(
nsIURI
*
aOriginalReferrer
ReferrerPolicyEnum
aPolicy
=
ReferrerPolicy
:
:
_empty
bool
aSendReferrer
=
true
const
Maybe
<
nsCString
>
&
aComputedReferrer
=
Maybe
<
nsCString
>
(
)
)
;
already_AddRefed
<
nsIReferrerInfo
>
Clone
(
)
const
;
already_AddRefed
<
nsIReferrerInfo
>
CloneWithNewPolicy
(
ReferrerPolicyEnum
aPolicy
)
const
;
already_AddRefed
<
nsIReferrerInfo
>
CloneWithNewSendReferrer
(
bool
aSendReferrer
)
const
;
already_AddRefed
<
nsIReferrerInfo
>
CloneWithNewOriginalReferrer
(
nsIURI
*
aOriginalReferrer
)
const
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateFromOtherAndPolicyOverride
(
nsIReferrerInfo
*
aOther
ReferrerPolicyEnum
aPolicyOverride
)
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateFromDocumentAndPolicyOverride
(
Document
*
aDoc
ReferrerPolicyEnum
aPolicyOverride
)
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateForFetch
(
nsIPrincipal
*
aPrincipal
Document
*
aDoc
)
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateForExternalCSSResources
(
StyleSheet
*
aExternalSheet
ReferrerPolicyEnum
aPolicy
=
ReferrerPolicy
:
:
_empty
)
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateForInternalCSSResources
(
Document
*
aDocument
)
;
static
already_AddRefed
<
nsIReferrerInfo
>
CreateForSVGResources
(
Document
*
aDocument
)
;
static
bool
IsReferrerSchemeAllowed
(
nsIURI
*
aReferrer
)
;
static
bool
ShouldResponseInheritReferrerInfo
(
nsIChannel
*
aChannel
)
;
static
nsresult
HandleSecureToInsecureReferral
(
nsIURI
*
aOriginalURI
nsIURI
*
aURI
ReferrerPolicyEnum
aPolicy
bool
&
aAllowed
)
;
static
bool
IsCrossOriginRequest
(
nsIHttpChannel
*
aChannel
)
;
static
bool
ShouldSetNullOriginHeader
(
net
:
:
HttpBaseChannel
*
aChannel
nsIURI
*
aOriginURI
)
;
static
uint32_t
GetUserReferrerSendingPolicy
(
)
;
static
uint32_t
GetUserXOriginSendingPolicy
(
)
;
static
uint32_t
GetUserTrimmingPolicy
(
)
;
static
uint32_t
GetUserXOriginTrimmingPolicy
(
)
;
static
ReferrerPolicyEnum
GetDefaultReferrerPolicy
(
nsIHttpChannel
*
aChannel
=
nullptr
nsIURI
*
aURI
=
nullptr
bool
privateBrowsing
=
false
)
;
static
ReferrerPolicyEnum
ReferrerPolicyFromMetaString
(
const
nsAString
&
aContent
)
;
static
ReferrerPolicyEnum
ReferrerPolicyAttributeFromString
(
const
nsAString
&
aContent
)
;
static
ReferrerPolicyEnum
ReferrerPolicyFromHeaderString
(
const
nsAString
&
aContent
)
;
static
const
char
*
ReferrerPolicyToString
(
ReferrerPolicyEnum
aPolicy
)
;
HashNumber
Hash
(
)
const
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIREFERRERINFO
NS_DECL_NSISERIALIZABLE
private
:
virtual
~
ReferrerInfo
(
)
{
}
ReferrerInfo
(
const
ReferrerInfo
&
rhs
)
;
enum
DefaultReferrerPolicy
:
uint32_t
{
eDefaultPolicyNoReferrer
=
0
eDefaultPolicySameOrgin
=
1
eDefaultPolicyStrictWhenXorigin
=
2
eDefaultPolicyNoReferrerWhenDownGrade
=
3
}
;
enum
TrimmingPolicy
:
uint32_t
{
ePolicyFullURI
=
0
ePolicySchemeHostPortPath
=
1
ePolicySchemeHostPort
=
2
}
;
enum
ReferrerSendingPolicy
:
uint32_t
{
ePolicyNotSend
=
0
ePolicySendWhenUserTrigger
=
1
ePolicySendInlineContent
=
2
}
;
enum
XOriginSendingPolicy
:
uint32_t
{
ePolicyAlwaysSend
=
0
ePolicySendWhenSameDomain
=
1
ePolicySendWhenSameHost
=
2
}
;
void
GetReferrerPolicyFromAtribute
(
nsINode
*
aNode
ReferrerPolicyEnum
&
aPolicy
)
const
;
bool
HasRelNoReferrer
(
nsINode
*
aNode
)
const
;
nsresult
HandleUserXOriginSendingPolicy
(
nsIURI
*
aURI
nsIURI
*
aReferrer
bool
&
aAllowed
)
const
;
nsresult
HandleUserReferrerSendingPolicy
(
nsIHttpChannel
*
aChannel
bool
&
aAllowed
)
const
;
TrimmingPolicy
ComputeTrimmingPolicy
(
nsIHttpChannel
*
aChannel
)
const
;
friend
class
mozilla
:
:
net
:
:
HttpBaseChannel
;
nsresult
ComputeReferrer
(
nsIHttpChannel
*
aChannel
)
;
bool
IsInitialized
(
)
{
return
mInitialized
;
}
friend
class
mozilla
:
:
net
:
:
nsHttpChannel
;
friend
class
mozilla
:
:
dom
:
:
Document
;
bool
IsPolicyOverrided
(
)
{
return
mOverridePolicyByDefault
;
}
nsresult
GetOriginFromReferrerURI
(
nsIURI
*
aReferrer
nsACString
&
aResult
)
const
;
nsresult
TrimReferrerWithPolicy
(
nsIURI
*
aReferrer
TrimmingPolicy
aTrimmingPolicy
nsACString
&
aResult
)
const
;
nsresult
LimitReferrerLength
(
nsIHttpChannel
*
aChannel
nsIURI
*
aReferrer
TrimmingPolicy
aTrimmingPolicy
nsACString
&
aInAndOutTrimmedReferrer
)
const
;
void
LogMessageToConsole
(
nsIHttpChannel
*
aChannel
const
char
*
aMsg
const
nsTArray
<
nsString
>
&
aParams
)
const
;
friend
class
mozilla
:
:
URLAndReferrerInfo
;
nsCOMPtr
<
nsIURI
>
mOriginalReferrer
;
ReferrerPolicyEnum
mPolicy
;
bool
mSendReferrer
;
bool
mInitialized
;
bool
mOverridePolicyByDefault
;
Maybe
<
nsCString
>
mComputedReferrer
;
}
;
}
}
#
endif
