#
ifndef
DOM_SECURITY_CSPVIOLATION_H_
#
define
DOM_SECURITY_CSPVIOLATION_H_
#
include
<
cstdint
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsString
.
h
"
class
nsIURI
;
namespace
mozilla
:
:
dom
{
class
Element
;
struct
CSPViolationData
{
enum
class
BlockedContentSource
{
Unknown
Inline
Eval
Self
WasmEval
TrustedTypesPolicy
TrustedTypesSink
}
;
using
Resource
=
mozilla
:
:
Variant
<
nsCOMPtr
<
nsIURI
>
BlockedContentSource
>
;
CSPViolationData
(
uint32_t
aViolatedPolicyIndex
Resource
&
&
aResource
const
CSPDirective
aEffectiveDirective
const
nsACString
&
aSourceFile
uint32_t
aLineNumber
uint32_t
aColumnNumber
Element
*
aElement
const
nsAString
&
aSample
const
nsACString
&
aHashSHA256
=
"
"
_ns
)
;
~
CSPViolationData
(
)
;
static
const
nsDependentSubstring
MaybeTruncateSample
(
const
nsAString
&
aSample
)
;
BlockedContentSource
BlockedContentSourceOrUnknown
(
)
const
;
const
uint32_t
mViolatedPolicyIndex
;
const
Resource
mResource
;
const
CSPDirective
mEffectiveDirective
;
const
nsCString
mSourceFile
;
const
uint32_t
mLineNumber
;
const
uint32_t
mColumnNumber
;
RefPtr
<
Element
>
mElement
;
const
nsString
mSample
;
const
nsCString
mHashSHA256
;
}
;
}
#
endif
