#
include
"
mozilla
/
dom
/
CSPViolationData
.
h
"
#
include
"
nsCharTraits
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
nsCSPContext
.
h
"
#
include
<
utility
>
namespace
mozilla
:
:
dom
{
static
nsString
MaybeTruncateSample
(
const
nsAString
&
aSample
)
{
nsString
sample
{
aSample
}
;
uint32_t
length
=
sample
.
Length
(
)
;
if
(
length
>
nsCSPContext
:
:
ScriptSampleMaxLength
(
)
)
{
uint32_t
desiredLength
=
nsCSPContext
:
:
ScriptSampleMaxLength
(
)
;
if
(
NS_IS_LOW_SURROGATE
(
sample
[
desiredLength
]
)
)
{
desiredLength
+
+
;
}
sample
.
Replace
(
nsCSPContext
:
:
ScriptSampleMaxLength
(
)
length
-
desiredLength
nsContentUtils
:
:
GetLocalizedEllipsis
(
)
)
;
}
return
sample
;
}
CSPViolationData
:
:
CSPViolationData
(
uint32_t
aViolatedPolicyIndex
Resource
&
&
aResource
uint32_t
aLineNumber
uint32_t
aColumnNumber
const
nsAString
&
aSample
)
:
mViolatedPolicyIndex
{
aViolatedPolicyIndex
}
mResource
{
std
:
:
move
(
aResource
)
}
mLineNumber
{
aLineNumber
}
mColumnNumber
{
aColumnNumber
}
mSample
{
MaybeTruncateSample
(
aSample
)
}
{
}
auto
CSPViolationData
:
:
BlockedContentSourceOrUnknown
(
)
const
-
>
BlockedContentSource
{
return
mResource
.
is
<
CSPViolationData
:
:
BlockedContentSource
>
(
)
?
mResource
.
as
<
CSPViolationData
:
:
BlockedContentSource
>
(
)
:
CSPViolationData
:
:
BlockedContentSource
:
:
Unknown
;
}
}
