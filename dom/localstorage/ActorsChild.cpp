#
include
"
ActorsChild
.
h
"
#
include
"
LSDatabase
.
h
"
namespace
mozilla
{
namespace
dom
{
LSDatabaseChild
:
:
LSDatabaseChild
(
LSDatabase
*
aDatabase
)
:
mDatabase
(
aDatabase
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
aDatabase
)
;
MOZ_COUNT_CTOR
(
LSDatabaseChild
)
;
}
LSDatabaseChild
:
:
~
LSDatabaseChild
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_COUNT_DTOR
(
LSDatabaseChild
)
;
}
void
LSDatabaseChild
:
:
SendDeleteMeInternal
(
)
{
AssertIsOnOwningThread
(
)
;
if
(
mDatabase
)
{
mDatabase
-
>
ClearActor
(
)
;
mDatabase
=
nullptr
;
MOZ_ALWAYS_TRUE
(
PBackgroundLSDatabaseChild
:
:
SendDeleteMe
(
)
)
;
}
}
void
LSDatabaseChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
AssertIsOnOwningThread
(
)
;
if
(
mDatabase
)
{
mDatabase
-
>
ClearActor
(
)
;
#
ifdef
DEBUG
mDatabase
=
nullptr
;
#
endif
}
}
mozilla
:
:
ipc
:
:
IPCResult
LSDatabaseChild
:
:
RecvRequestAllowToClose
(
)
{
AssertIsOnOwningThread
(
)
;
if
(
mDatabase
)
{
mDatabase
-
>
AllowToClose
(
)
;
}
return
IPC_OK
(
)
;
}
LSRequestChild
:
:
LSRequestChild
(
LSRequestChildCallback
*
aCallback
)
:
mCallback
(
aCallback
)
mFinishing
(
false
)
{
AssertIsOnOwningThread
(
)
;
MOZ_COUNT_CTOR
(
LSRequestChild
)
;
}
LSRequestChild
:
:
~
LSRequestChild
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_COUNT_DTOR
(
LSRequestChild
)
;
}
bool
LSRequestChild
:
:
Finishing
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mFinishing
;
}
void
LSRequestChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
AssertIsOnOwningThread
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
LSRequestChild
:
:
Recv__delete__
(
const
LSRequestResponse
&
aResponse
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mCallback
)
;
mCallback
-
>
OnResponse
(
aResponse
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
LSRequestChild
:
:
RecvReady
(
)
{
AssertIsOnOwningThread
(
)
;
mFinishing
=
true
;
SendFinish
(
)
;
return
IPC_OK
(
)
;
}
}
}
