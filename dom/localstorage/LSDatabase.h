#
ifndef
mozilla_dom_localstorage_LSDatabase_h
#
define
mozilla_dom_localstorage_LSDatabase_h
#
include
<
cstdint
>
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
namespace
mozilla
{
namespace
dom
{
class
LSDatabaseChild
;
class
LSNotifyInfo
;
class
LSObject
;
class
LSSnapshot
;
class
LSDatabase
final
{
class
Observer
;
LSDatabaseChild
*
mActor
;
LSSnapshot
*
mSnapshot
;
const
nsCString
mOrigin
;
bool
mAllowedToClose
;
bool
mRequestedAllowToClose
;
static
StaticRefPtr
<
Observer
>
sObserver
;
public
:
explicit
LSDatabase
(
const
nsACString
&
aOrigin
)
;
static
LSDatabase
*
Get
(
const
nsACString
&
aOrigin
)
;
NS_INLINE_DECL_REFCOUNTING
(
LSDatabase
)
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
LSDatabase
)
;
}
void
SetActor
(
LSDatabaseChild
*
aActor
)
;
void
ClearActor
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mActor
)
;
mActor
=
nullptr
;
}
bool
IsAllowedToClose
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mAllowedToClose
;
}
void
RequestAllowToClose
(
)
;
void
NoteFinishedSnapshot
(
LSSnapshot
*
aSnapshot
)
;
nsresult
GetLength
(
LSObject
*
aObject
uint32_t
*
aResult
)
;
nsresult
GetKey
(
LSObject
*
aObject
uint32_t
aIndex
nsAString
&
aResult
)
;
nsresult
GetItem
(
LSObject
*
aObject
const
nsAString
&
aKey
nsAString
&
aResult
)
;
nsresult
GetKeys
(
LSObject
*
aObject
nsTArray
<
nsString
>
&
aKeys
)
;
nsresult
SetItem
(
LSObject
*
aObject
const
nsAString
&
aKey
const
nsAString
&
aValue
LSNotifyInfo
&
aNotifyInfo
)
;
nsresult
RemoveItem
(
LSObject
*
aObject
const
nsAString
&
aKey
LSNotifyInfo
&
aNotifyInfo
)
;
nsresult
Clear
(
LSObject
*
aObject
LSNotifyInfo
&
aNotifyInfo
)
;
nsresult
BeginExplicitSnapshot
(
LSObject
*
aObject
)
;
nsresult
EndExplicitSnapshot
(
)
;
bool
HasSnapshot
(
)
const
;
int64_t
GetSnapshotUsage
(
)
const
;
private
:
~
LSDatabase
(
)
;
nsresult
EnsureSnapshot
(
LSObject
*
aObject
const
nsAString
&
aKey
bool
aExplicit
=
false
)
;
void
AllowToClose
(
)
;
}
;
}
}
#
endif
