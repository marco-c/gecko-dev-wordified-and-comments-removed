#
ifndef
mozilla_dom_localstorage_LSDatabase_h
#
define
mozilla_dom_localstorage_LSDatabase_h
namespace
mozilla
{
namespace
dom
{
class
LSDatabaseChild
;
class
LSWriteOpResponse
;
class
LSDatabase
final
{
LSDatabaseChild
*
mActor
;
const
nsCString
mOrigin
;
bool
mAllowedToClose
;
public
:
explicit
LSDatabase
(
const
nsACString
&
aOrigin
)
;
static
LSDatabase
*
Get
(
const
nsACString
&
aOrigin
)
;
NS_INLINE_DECL_REFCOUNTING
(
LSDatabase
)
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
LSDatabase
)
;
}
void
SetActor
(
LSDatabaseChild
*
aActor
)
;
void
ClearActor
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mActor
)
;
mActor
=
nullptr
;
}
void
AllowToClose
(
)
;
bool
IsAllowedToClose
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mAllowedToClose
;
}
nsresult
GetLength
(
uint32_t
*
aResult
)
;
nsresult
GetKey
(
uint32_t
aIndex
nsAString
&
aResult
)
;
nsresult
GetItem
(
const
nsAString
&
aKey
nsAString
&
aResult
)
;
nsresult
GetKeys
(
nsTArray
<
nsString
>
&
aKeys
)
;
nsresult
SetItem
(
const
nsAString
&
aDocumentURI
const
nsAString
&
aKey
const
nsAString
&
aValue
LSWriteOpResponse
&
aResponse
)
;
nsresult
RemoveItem
(
const
nsAString
&
aDocumentURI
const
nsAString
&
aKey
LSWriteOpResponse
&
aResponse
)
;
nsresult
Clear
(
const
nsAString
&
aDocumentURI
LSWriteOpResponse
&
aResponse
)
;
private
:
~
LSDatabase
(
)
;
}
;
}
}
#
endif
