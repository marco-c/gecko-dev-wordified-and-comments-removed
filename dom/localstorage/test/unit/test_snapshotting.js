async
function
testSteps
(
)
{
const
url
=
"
http
:
/
/
example
.
com
"
;
const
items
=
[
{
key
:
"
key1
"
value
:
"
value1
"
}
{
key
:
"
key2
"
value
:
"
value2
"
}
{
key
:
"
key3
"
value
:
"
value3
"
}
{
key
:
"
key4
"
value
:
"
value4
"
}
{
key
:
"
key5
"
value
:
"
value5
"
}
{
key
:
"
key6
"
value
:
"
value6
"
}
{
key
:
"
key7
"
value
:
"
value7
"
}
{
key
:
"
key8
"
value
:
"
value8
"
}
{
key
:
"
key9
"
value
:
"
value9
"
}
{
key
:
"
key10
"
value
:
"
value10
"
}
]
;
function
getPartialPrefill
(
)
{
let
size
=
0
;
for
(
let
i
=
0
;
i
<
items
.
length
/
2
;
i
+
+
)
{
let
item
=
items
[
i
]
;
size
+
=
item
.
key
.
length
+
item
.
value
.
length
;
}
return
size
;
}
const
prefillValues
=
[
0
getPartialPrefill
(
)
-
1
]
;
info
(
"
Setting
pref
"
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
storage
.
snapshot_reusing
"
false
)
;
for
(
let
prefillValue
of
prefillValues
)
{
info
(
"
Setting
prefill
value
"
)
;
Services
.
prefs
.
setIntPref
(
"
dom
.
storage
.
snapshot_prefill
"
prefillValue
)
;
info
(
"
Getting
storage
"
)
;
let
storage
=
getLocalStorage
(
getPrincipal
(
url
)
)
;
info
(
"
Adding
data
"
)
;
for
(
let
item
of
items
)
{
storage
.
setItem
(
item
.
key
item
.
value
)
;
}
info
(
"
Saving
key
order
"
)
;
let
savedKeys
=
Object
.
keys
(
storage
)
;
for
(
let
i
=
0
;
i
<
savedKeys
.
length
;
i
+
+
)
{
is
(
storage
.
key
(
i
)
savedKeys
[
i
]
"
Correct
key
"
)
;
}
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
info
(
"
Verifying
length
"
)
;
is
(
storage
.
length
items
.
length
"
Correct
length
"
)
;
info
(
"
Verifying
key
order
"
)
;
let
keys
=
Object
.
keys
(
storage
)
;
is
(
keys
.
length
savedKeys
.
length
)
;
for
(
let
i
=
0
;
i
<
keys
.
length
;
i
+
+
)
{
is
(
keys
[
i
]
savedKeys
[
i
]
"
Correct
key
"
)
;
}
info
(
"
Verifying
values
"
)
;
for
(
let
item
of
items
)
{
is
(
storage
.
getItem
(
item
.
key
)
item
.
value
"
Correct
value
"
)
;
}
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
storage
.
getItem
(
"
key2
"
)
;
storage
.
removeItem
(
"
key5
"
)
;
storage
.
setItem
(
"
key5
"
"
value5
"
)
;
storage
.
removeItem
(
"
key5
"
)
;
storage
.
setItem
(
"
key11
"
"
value11
"
)
;
storage
.
setItem
(
"
key5
"
"
value5
"
)
;
items
.
push
(
{
key
:
"
key11
"
value
:
"
value11
"
}
)
;
info
(
"
Verifying
length
"
)
;
is
(
storage
.
length
items
.
length
"
Correct
length
"
)
;
savedKeys
=
Object
.
keys
(
storage
)
;
info
(
"
Verifying
values
"
)
;
for
(
let
item
of
items
)
{
is
(
storage
.
getItem
(
item
.
key
)
item
.
value
"
Correct
value
"
)
;
}
storage
.
removeItem
(
"
key11
"
)
;
items
.
pop
(
)
;
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
info
(
"
Verifying
length
"
)
;
is
(
storage
.
length
items
.
length
"
Correct
length
"
)
;
info
(
"
Verifying
values
"
)
;
for
(
let
item
of
items
)
{
is
(
storage
.
getItem
(
item
.
key
)
item
.
value
"
Correct
value
"
)
;
}
is
(
storage
.
getItem
(
"
key11
"
)
null
"
Correct
value
"
)
;
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
info
(
"
Saving
key
order
"
)
;
savedKeys
=
Object
.
keys
(
storage
)
;
info
(
"
Verifying
length
"
)
;
is
(
storage
.
length
items
.
length
"
Correct
length
"
)
;
info
(
"
Verifying
values
"
)
;
for
(
let
item
of
items
)
{
is
(
storage
.
getItem
(
item
.
key
)
item
.
value
"
Correct
value
"
)
;
}
is
(
storage
.
getItem
(
"
key11
"
)
null
"
Correct
value
"
)
;
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
info
(
"
Verifying
unknown
item
"
)
;
is
(
storage
.
getItem
(
"
key11
"
)
null
"
Correct
value
"
)
;
info
(
"
Verifying
unknown
item
again
"
)
;
is
(
storage
.
getItem
(
"
key11
"
)
null
"
Correct
value
"
)
;
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
info
(
"
Saving
key
order
"
)
;
savedKeys
=
Object
.
keys
(
storage
)
;
await
returnToEventLoop
(
)
;
info
(
"
Getting
values
"
)
;
for
(
let
i
=
items
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
let
item
=
items
[
i
]
;
storage
.
getItem
(
item
.
key
)
;
}
info
(
"
Verifying
key
order
"
)
;
keys
=
Object
.
keys
(
storage
)
;
is
(
keys
.
length
savedKeys
.
length
)
;
for
(
let
i
=
0
;
i
<
keys
.
length
;
i
+
+
)
{
is
(
keys
[
i
]
savedKeys
[
i
]
"
Correct
key
"
)
;
}
await
returnToEventLoop
(
)
;
info
(
"
Clearing
"
)
;
storage
.
clear
(
)
;
info
(
"
Returning
to
event
loop
"
)
;
await
returnToEventLoop
(
)
;
}
}
