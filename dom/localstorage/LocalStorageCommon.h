#
ifndef
mozilla_dom_localstorage_LocalStorageCommon_h
#
define
mozilla_dom_localstorage_LocalStorageCommon_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
nsString
.
h
"
#
define
LS_TRY
(
.
.
.
)
QM_TRY_META
(
mozilla
:
:
dom
:
:
localstorage
#
#
__VA_ARGS__
)
#
define
LS_TRY_VAR
(
.
.
.
)
\
QM_TRY_VAR_META
(
mozilla
:
:
dom
:
:
localstorage
#
#
__VA_ARGS__
)
#
define
LS_FAIL
(
.
.
.
)
QM_FAIL_META
(
mozilla
:
:
dom
:
:
localstorage
#
#
__VA_ARGS__
)
namespace
mozilla
{
class
LogModule
;
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
extern
const
char16_t
*
kLocalStorageType
;
class
MOZ_STACK_CLASS
LSNotifyInfo
{
bool
mChanged
;
nsString
mOldValue
;
public
:
LSNotifyInfo
(
)
:
mChanged
(
false
)
{
}
bool
changed
(
)
const
{
return
mChanged
;
}
bool
&
changed
(
)
{
return
mChanged
;
}
const
nsString
&
oldValue
(
)
const
{
return
mOldValue
;
}
nsString
&
oldValue
(
)
{
return
mOldValue
;
}
}
;
bool
NextGenLocalStorageEnabled
(
)
;
bool
CachedNextGenLocalStorageEnabled
(
)
;
nsresult
GenerateOriginKey2
(
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
nsACString
&
aOriginAttrSuffix
nsACString
&
aOriginKey
)
;
LogModule
*
GetLocalStorageLogger
(
)
;
namespace
localstorage
{
void
HandleError
(
const
nsLiteralCString
&
aExpr
const
nsLiteralCString
&
aSourceFile
int32_t
aSourceLine
)
;
}
}
}
#
endif
