#
ifndef
mozilla_dom_localstorage_LSWriteOptimizerImpl_h
#
define
mozilla_dom_localstorage_LSWriteOptimizerImpl_h
#
include
"
LSWriteOptimizer
.
h
"
namespace
mozilla
{
namespace
dom
{
template
<
typename
T
typename
U
>
void
LSWriteOptimizer
<
T
U
>
:
:
InsertItem
(
const
nsAString
&
aKey
const
T
&
aValue
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
WriteInfo
*
existingWriteInfo
;
UniquePtr
<
WriteInfo
>
newWriteInfo
;
if
(
mWriteInfos
.
Get
(
aKey
&
existingWriteInfo
)
&
&
existingWriteInfo
-
>
GetType
(
)
=
=
WriteInfo
:
:
DeleteItem
)
{
newWriteInfo
=
MakeUnique
<
UpdateItemInfo
>
(
NextSerialNumber
(
)
aKey
aValue
true
)
;
}
else
{
newWriteInfo
=
MakeUnique
<
InsertItemInfo
>
(
NextSerialNumber
(
)
aKey
aValue
)
;
}
mWriteInfos
.
InsertOrUpdate
(
aKey
std
:
:
move
(
newWriteInfo
)
)
;
mTotalDelta
+
=
aDelta
;
}
template
<
typename
T
typename
U
>
void
LSWriteOptimizer
<
T
U
>
:
:
UpdateItem
(
const
nsAString
&
aKey
const
T
&
aValue
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
WriteInfo
*
existingWriteInfo
;
UniquePtr
<
WriteInfo
>
newWriteInfo
;
if
(
mWriteInfos
.
Get
(
aKey
&
existingWriteInfo
)
&
&
existingWriteInfo
-
>
GetType
(
)
=
=
WriteInfo
:
:
InsertItem
)
{
newWriteInfo
=
MakeUnique
<
InsertItemInfo
>
(
NextSerialNumber
(
)
aKey
aValue
)
;
}
else
{
newWriteInfo
=
MakeUnique
<
UpdateItemInfo
>
(
NextSerialNumber
(
)
aKey
aValue
false
)
;
}
mWriteInfos
.
InsertOrUpdate
(
aKey
std
:
:
move
(
newWriteInfo
)
)
;
mTotalDelta
+
=
aDelta
;
}
}
}
#
endif
