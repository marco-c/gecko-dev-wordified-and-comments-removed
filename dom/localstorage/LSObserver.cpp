#
include
"
LSObserver
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
typedef
nsDataHashtable
<
nsCStringHashKey
LSObserver
*
>
LSObserverHashtable
;
StaticAutoPtr
<
LSObserverHashtable
>
gLSObservers
;
}
LSObserver
:
:
LSObserver
(
const
nsACString
&
aOrigin
)
:
mActor
(
nullptr
)
mOrigin
(
aOrigin
)
{
AssertIsOnOwningThread
(
)
;
if
(
!
gLSObservers
)
{
gLSObservers
=
new
LSObserverHashtable
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
gLSObservers
-
>
Get
(
mOrigin
)
)
;
gLSObservers
-
>
Put
(
mOrigin
this
)
;
}
LSObserver
:
:
~
LSObserver
(
)
{
AssertIsOnOwningThread
(
)
;
if
(
mActor
)
{
mActor
-
>
SendDeleteMeInternal
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
"
SendDeleteMeInternal
should
have
cleared
!
"
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
gLSObservers
)
;
MOZ_DIAGNOSTIC_ASSERT
(
gLSObservers
-
>
Get
(
mOrigin
)
)
;
gLSObservers
-
>
Remove
(
mOrigin
)
;
if
(
!
gLSObservers
-
>
Count
(
)
)
{
gLSObservers
=
nullptr
;
}
}
LSObserver
*
LSObserver
:
:
Get
(
const
nsACString
&
aOrigin
)
{
return
gLSObservers
?
gLSObservers
-
>
Get
(
aOrigin
)
:
nullptr
;
}
void
LSObserver
:
:
SetActor
(
LSObserverChild
*
aActor
)
{
AssertIsOnOwningThread
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
)
;
mActor
=
aActor
;
}
}
}
