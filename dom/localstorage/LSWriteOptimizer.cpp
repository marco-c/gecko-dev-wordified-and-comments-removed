#
include
"
LSWriteOptimizer
.
h
"
namespace
mozilla
{
namespace
dom
{
class
LSWriteOptimizerBase
:
:
WriteInfoComparator
{
public
:
bool
Equals
(
const
WriteInfo
*
a
const
WriteInfo
*
b
)
const
{
MOZ_ASSERT
(
a
&
&
b
)
;
return
a
-
>
SerialNumber
(
)
=
=
b
-
>
SerialNumber
(
)
;
}
bool
LessThan
(
const
WriteInfo
*
a
const
WriteInfo
*
b
)
const
{
MOZ_ASSERT
(
a
&
&
b
)
;
return
a
-
>
SerialNumber
(
)
<
b
-
>
SerialNumber
(
)
;
}
}
;
void
LSWriteOptimizerBase
:
:
DeleteItem
(
const
nsAString
&
aKey
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
WriteInfo
*
existingWriteInfo
;
if
(
mWriteInfos
.
Get
(
aKey
&
existingWriteInfo
)
&
&
existingWriteInfo
-
>
GetType
(
)
=
=
WriteInfo
:
:
InsertItem
)
{
mWriteInfos
.
Remove
(
aKey
)
;
}
else
{
nsAutoPtr
<
WriteInfo
>
newWriteInfo
(
new
DeleteItemInfo
(
NextSerialNumber
(
)
aKey
)
)
;
mWriteInfos
.
Put
(
aKey
newWriteInfo
.
forget
(
)
)
;
}
mTotalDelta
+
=
aDelta
;
}
void
LSWriteOptimizerBase
:
:
Truncate
(
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
mWriteInfos
.
Clear
(
)
;
if
(
!
mTruncateInfo
)
{
mTruncateInfo
=
new
TruncateInfo
(
NextSerialNumber
(
)
)
;
}
mTotalDelta
+
=
aDelta
;
}
void
LSWriteOptimizerBase
:
:
GetSortedWriteInfos
(
nsTArray
<
WriteInfo
*
>
&
aWriteInfos
)
{
AssertIsOnOwningThread
(
)
;
if
(
mTruncateInfo
)
{
aWriteInfos
.
InsertElementSorted
(
mTruncateInfo
WriteInfoComparator
(
)
)
;
}
for
(
auto
iter
=
mWriteInfos
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
WriteInfo
*
writeInfo
=
iter
.
Data
(
)
;
aWriteInfos
.
InsertElementSorted
(
writeInfo
WriteInfoComparator
(
)
)
;
}
}
template
<
typename
T
typename
U
>
void
LSWriteOptimizer
<
T
U
>
:
:
InsertItem
(
const
nsAString
&
aKey
const
T
&
aValue
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
WriteInfo
*
existingWriteInfo
;
nsAutoPtr
<
WriteInfo
>
newWriteInfo
;
if
(
mWriteInfos
.
Get
(
aKey
&
existingWriteInfo
)
&
&
existingWriteInfo
-
>
GetType
(
)
=
=
WriteInfo
:
:
DeleteItem
)
{
newWriteInfo
=
new
UpdateItemInfo
(
NextSerialNumber
(
)
aKey
aValue
true
)
;
}
else
{
newWriteInfo
=
new
InsertItemInfo
(
NextSerialNumber
(
)
aKey
aValue
)
;
}
mWriteInfos
.
Put
(
aKey
newWriteInfo
.
forget
(
)
)
;
mTotalDelta
+
=
aDelta
;
}
template
<
typename
T
typename
U
>
void
LSWriteOptimizer
<
T
U
>
:
:
UpdateItem
(
const
nsAString
&
aKey
const
T
&
aValue
int64_t
aDelta
)
{
AssertIsOnOwningThread
(
)
;
WriteInfo
*
existingWriteInfo
;
nsAutoPtr
<
WriteInfo
>
newWriteInfo
;
if
(
mWriteInfos
.
Get
(
aKey
&
existingWriteInfo
)
&
&
existingWriteInfo
-
>
GetType
(
)
=
=
WriteInfo
:
:
InsertItem
)
{
newWriteInfo
=
new
InsertItemInfo
(
NextSerialNumber
(
)
aKey
aValue
)
;
}
else
{
newWriteInfo
=
new
UpdateItemInfo
(
NextSerialNumber
(
)
aKey
aValue
false
)
;
}
mWriteInfos
.
Put
(
aKey
newWriteInfo
.
forget
(
)
)
;
mTotalDelta
+
=
aDelta
;
}
}
}
