#
ifndef
mozilla_dom_CloseWatcher_h
#
define
mozilla_dom_CloseWatcher_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
CloseWatcherBinding
.
h
"
namespace
mozilla
:
:
dom
{
class
CloseWatcher
:
public
DOMEventTargetHelper
public
AbortFollower
{
public
:
NS_DECL_ISUPPORTS_INHERITED
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
GetOwnerGlobal
(
)
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
IMPL_EVENT_HANDLER
(
cancel
)
;
IMPL_EVENT_HANDLER
(
close
)
;
static
already_AddRefed
<
CloseWatcher
>
Constructor
(
const
GlobalObject
&
aGlobal
const
CloseWatcherOptions
&
aOptions
ErrorResult
&
aRv
)
;
explicit
CloseWatcher
(
nsPIDOMWindowInner
*
aWindow
)
:
DOMEventTargetHelper
(
aWindow
)
{
}
MOZ_CAN_RUN_SCRIPT
void
RequestClose
(
)
{
RequestToClose
(
false
)
;
}
MOZ_CAN_RUN_SCRIPT
bool
RequestToClose
(
bool
aRequireHistoryActionActivation
)
;
MOZ_CAN_RUN_SCRIPT
void
Close
(
)
;
void
Destroy
(
)
;
void
RunAbortAlgorithm
(
)
override
;
bool
IsActive
(
)
const
;
void
SetEnabled
(
bool
aEnabled
)
{
mEnabled
=
aEnabled
;
}
void
DisconnectFromOwner
(
)
override
{
Destroy
(
)
;
DOMEventTargetHelper
:
:
DisconnectFromOwner
(
)
;
}
protected
:
virtual
~
CloseWatcher
(
)
=
default
;
bool
mIsRunningCancelAction
=
false
;
bool
mEnabled
=
true
;
}
;
}
#
endif
