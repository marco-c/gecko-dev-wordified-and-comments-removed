#
ifndef
mozilla_dom_l10n_L10nOverlays_h__
#
define
mozilla_dom_l10n_L10nOverlays_h__
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
L10nOverlaysBinding
.
h
"
namespace
mozilla
{
namespace
dom
{
class
L10nOverlays
{
public
:
static
void
TranslateElement
(
const
GlobalObject
&
aGlobal
Element
&
aElement
const
L10nValue
&
aTranslation
Nullable
<
nsTArray
<
L10nOverlaysError
>
>
&
aErrors
)
;
static
void
TranslateElement
(
Element
&
aElement
const
L10nValue
&
aTranslation
nsTArray
<
L10nOverlaysError
>
&
aErrors
ErrorResult
&
aRv
)
;
private
:
static
bool
IsAttrNameLocalizable
(
const
nsAtom
*
nameAtom
Element
*
aElement
nsTArray
<
nsString
>
*
aExplicitlyAllowed
)
;
static
already_AddRefed
<
nsINode
>
CreateTextNodeFromTextContent
(
Element
*
aElement
ErrorResult
&
aRv
)
;
static
void
OverlayAttributes
(
const
Nullable
<
Sequence
<
AttributeNameValue
>
>
&
aTranslation
Element
*
aToElement
ErrorResult
&
aRv
)
;
static
void
OverlayAttributes
(
Element
*
aFromElement
Element
*
aToElement
ErrorResult
&
aRv
)
;
static
void
ShallowPopulateUsing
(
Element
*
aFromElement
Element
*
aToElement
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
nsINode
>
GetNodeForNamedElement
(
Element
*
aSourceElement
Element
*
aTranslatedChild
nsTArray
<
L10nOverlaysError
>
&
aErrors
ErrorResult
&
aRv
)
;
static
bool
IsElementAllowed
(
Element
*
aElement
)
;
static
already_AddRefed
<
Element
>
CreateSanitizedElement
(
Element
*
aElement
ErrorResult
&
aRv
)
;
static
void
OverlayChildNodes
(
DocumentFragment
*
aFromFragment
Element
*
aToElement
nsTArray
<
L10nOverlaysError
>
&
aErrors
ErrorResult
&
aRv
)
;
static
bool
ContainsMarkup
(
const
nsAString
&
aStr
)
;
}
;
}
}
#
endif
