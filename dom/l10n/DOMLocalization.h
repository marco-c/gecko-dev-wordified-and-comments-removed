#
ifndef
mozilla_dom_l10n_DOMLocalization_h
#
define
mozilla_dom_l10n_DOMLocalization_h
#
include
"
nsTHashSet
.
h
"
#
include
"
nsXULPrototypeDocument
.
h
"
#
include
"
mozilla
/
intl
/
Localization
.
h
"
#
include
"
mozilla
/
dom
/
DOMLocalizationBinding
.
h
"
#
include
"
mozilla
/
dom
/
L10nMutations
.
h
"
#
include
"
mozilla
/
dom
/
L10nOverlaysBinding
.
h
"
#
include
"
mozilla
/
dom
/
LocalizationBinding
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
mozilla
/
intl
/
L10nRegistry
.
h
"
#
include
"
nsINode
.
h
"
namespace
mozilla
:
:
dom
{
class
Element
;
class
L10nMutations
;
class
DOMLocalization
:
public
intl
:
:
Localization
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
DOMLocalization
Localization
)
void
Destroy
(
)
;
static
already_AddRefed
<
DOMLocalization
>
Constructor
(
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
Sequence
<
dom
:
:
OwningUTF8StringOrResourceId
>
&
aResourceIds
bool
aIsSync
const
dom
:
:
Optional
<
dom
:
:
NonNull
<
intl
:
:
L10nRegistry
>
>
&
aRegistry
const
dom
:
:
Optional
<
dom
:
:
Sequence
<
nsCString
>
>
&
aLocales
ErrorResult
&
aRv
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
ConnectRoot
(
nsINode
&
aNode
ErrorResult
&
aRv
)
;
void
DisconnectRoot
(
nsINode
&
aNode
ErrorResult
&
aRv
)
;
void
PauseObserving
(
ErrorResult
&
aRv
)
;
void
ResumeObserving
(
ErrorResult
&
aRv
)
;
void
SetAttributes
(
JSContext
*
aCx
Element
&
aElement
const
nsAString
&
aId
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aArgs
ErrorResult
&
aRv
)
;
void
GetAttributes
(
Element
&
aElement
L10nIdArgs
&
aResult
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateFragment
(
nsINode
&
aNode
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateElements
(
const
nsTArray
<
OwningNonNull
<
Element
>
>
&
aElements
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateElements
(
const
nsTArray
<
OwningNonNull
<
Element
>
>
&
aElements
nsXULPrototypeDocument
*
aProto
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateRoots
(
ErrorResult
&
aRv
)
;
static
void
GetTranslatables
(
nsINode
&
aNode
Sequence
<
OwningNonNull
<
Element
>
>
&
aElements
ErrorResult
&
aRv
)
;
static
void
SetRootInfo
(
Element
*
aElement
)
;
bool
ApplyTranslations
(
nsTArray
<
nsCOMPtr
<
Element
>
>
&
aElements
nsTArray
<
Nullable
<
L10nMessage
>
>
&
aTranslations
nsXULPrototypeDocument
*
aProto
ErrorResult
&
aRv
)
;
bool
SubtreeRootInRoots
(
nsINode
*
aSubtreeRoot
)
{
for
(
const
auto
*
key
:
mRoots
)
{
nsINode
*
subtreeRoot
=
key
-
>
SubtreeRoot
(
)
;
if
(
subtreeRoot
=
=
aSubtreeRoot
)
{
return
true
;
}
}
return
false
;
}
DOMLocalization
(
nsIGlobalObject
*
aGlobal
bool
aSync
)
;
DOMLocalization
(
nsIGlobalObject
*
aGlobal
bool
aIsSync
const
intl
:
:
ffi
:
:
LocalizationRc
*
aRaw
)
;
protected
:
virtual
~
DOMLocalization
(
)
;
void
OnChange
(
)
override
;
void
DisconnectMutations
(
)
;
void
DisconnectRoots
(
)
;
void
ReportL10nOverlaysErrors
(
nsTArray
<
L10nOverlaysError
>
&
aErrors
)
;
void
ConvertStringToL10nArgs
(
const
nsString
&
aInput
intl
:
:
L10nArgs
&
aRetVal
ErrorResult
&
aRv
)
;
RefPtr
<
L10nMutations
>
mMutations
;
nsTHashSet
<
RefPtr
<
nsINode
>
>
mRoots
;
}
;
}
#
endif
