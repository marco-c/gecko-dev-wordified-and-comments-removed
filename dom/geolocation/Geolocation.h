#
ifndef
mozilla_dom_Geolocation_h
#
define
mozilla_dom_Geolocation_h
#
undef
CreateEvent
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
GeolocationPosition
.
h
"
#
include
"
GeolocationCoordinates
.
h
"
#
include
"
nsIDOMGeoPosition
.
h
"
#
include
"
nsIDOMGeoPositionCallback
.
h
"
#
include
"
nsIDOMGeoPositionErrorCallback
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
GeolocationBinding
.
h
"
#
include
"
mozilla
/
dom
/
CallbackObject
.
h
"
#
include
"
nsIGeolocationProvider
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsGeolocationService
;
class
nsGeolocationRequest
;
namespace
mozilla
:
:
dom
{
class
Geolocation
;
using
GeoPositionCallback
=
CallbackObjectHolder
<
PositionCallback
nsIDOMGeoPositionCallback
>
;
using
GeoPositionErrorCallback
=
CallbackObjectHolder
<
PositionErrorCallback
nsIDOMGeoPositionErrorCallback
>
;
}
struct
CachedPositionAndAccuracy
{
nsCOMPtr
<
nsIDOMGeoPosition
>
position
;
bool
isHighAccuracy
;
}
;
class
nsGeolocationService
final
:
public
nsIGeolocationUpdate
public
nsIObserver
{
public
:
static
already_AddRefed
<
nsGeolocationService
>
GetGeolocationService
(
)
;
static
mozilla
:
:
StaticRefPtr
<
nsGeolocationService
>
sService
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIGEOLOCATIONUPDATE
NS_DECL_NSIOBSERVER
nsGeolocationService
(
)
=
default
;
nsresult
Init
(
)
;
void
AddLocator
(
mozilla
:
:
dom
:
:
Geolocation
*
locator
)
;
void
RemoveLocator
(
mozilla
:
:
dom
:
:
Geolocation
*
locator
)
;
void
SetCachedPosition
(
nsIDOMGeoPosition
*
aPosition
)
;
CachedPositionAndAccuracy
GetCachedPosition
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
StartDevice
(
)
;
void
StopDevice
(
)
;
void
SetDisconnectTimer
(
)
;
void
UpdateAccuracy
(
bool
aForceHigh
=
false
)
;
bool
HighAccuracyRequested
(
)
;
private
:
~
nsGeolocationService
(
)
;
nsCOMPtr
<
nsITimer
>
mDisconnectTimer
;
nsCOMPtr
<
nsIGeolocationProvider
>
mProvider
;
nsTArray
<
mozilla
:
:
dom
:
:
Geolocation
*
>
mGeolocators
;
CachedPositionAndAccuracy
mLastPosition
;
bool
mHigherAccuracy
=
false
;
}
;
namespace
mozilla
:
:
dom
{
class
Geolocation
final
:
public
nsIGeolocationUpdate
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
Geolocation
)
NS_DECL_NSIGEOLOCATIONUPDATE
Geolocation
(
)
;
nsresult
Init
(
nsPIDOMWindowInner
*
aContentDom
=
nullptr
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCtx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MOZ_CAN_RUN_SCRIPT
int32_t
WatchPosition
(
PositionCallback
&
aCallback
PositionErrorCallback
*
aErrorCallback
const
PositionOptions
&
aOptions
CallerType
aCallerType
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
void
GetCurrentPosition
(
PositionCallback
&
aCallback
PositionErrorCallback
*
aErrorCallback
const
PositionOptions
&
aOptions
CallerType
aCallerType
ErrorResult
&
aRv
)
;
void
ClearWatch
(
int32_t
aWatchId
)
;
MOZ_CAN_RUN_SCRIPT
int32_t
WatchPosition
(
nsIDOMGeoPositionCallback
*
aCallback
nsIDOMGeoPositionErrorCallback
*
aErrorCallback
UniquePtr
<
PositionOptions
>
&
&
aOptions
)
;
bool
HasActiveCallbacks
(
)
;
void
NotifyAllowedRequest
(
nsGeolocationRequest
*
aRequest
)
;
void
RemoveRequest
(
nsGeolocationRequest
*
request
)
;
bool
ClearPendingRequest
(
nsGeolocationRequest
*
aRequest
)
;
void
Shutdown
(
)
;
nsIPrincipal
*
GetPrincipal
(
)
{
return
mPrincipal
;
}
nsIWeakReference
*
GetOwner
(
)
{
return
mOwner
;
}
bool
WindowOwnerStillExists
(
)
;
bool
HighAccuracyRequested
(
)
;
static
already_AddRefed
<
Geolocation
>
NonWindowSingleton
(
)
;
private
:
~
Geolocation
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
GetCurrentPosition
(
GeoPositionCallback
aCallback
GeoPositionErrorCallback
aErrorCallback
UniquePtr
<
PositionOptions
>
&
&
aOptions
CallerType
aCallerType
)
;
MOZ_CAN_RUN_SCRIPT
int32_t
WatchPosition
(
GeoPositionCallback
aCallback
GeoPositionErrorCallback
aErrorCallback
UniquePtr
<
PositionOptions
>
&
&
aOptions
CallerType
aCallerType
ErrorResult
&
aRv
)
;
bool
RegisterRequestWithPrompt
(
nsGeolocationRequest
*
request
)
;
bool
IsAlreadyCleared
(
nsGeolocationRequest
*
aRequest
)
;
bool
ShouldBlockInsecureRequests
(
)
const
;
bool
IsFullyActiveOrChrome
(
)
;
nsTArray
<
RefPtr
<
nsGeolocationRequest
>
>
mPendingCallbacks
;
nsTArray
<
RefPtr
<
nsGeolocationRequest
>
>
mWatchingCallbacks
;
nsWeakPtr
mOwner
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
enum
class
ProtocolType
:
uint8_t
{
OTHER
HTTP
HTTPS
}
;
ProtocolType
mProtocolType
;
RefPtr
<
nsGeolocationService
>
mService
;
uint32_t
mLastWatchId
;
nsTArray
<
RefPtr
<
nsGeolocationRequest
>
>
mPendingRequests
;
nsTArray
<
int32_t
>
mClearedWatchIDs
;
static
mozilla
:
:
StaticRefPtr
<
Geolocation
>
sNonWindowSingleton
;
}
;
}
#
endif
