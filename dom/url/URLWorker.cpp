#
include
"
URLWorker
.
h
"
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
dom
/
BlobImpl
.
h
"
#
include
"
mozilla
/
dom
/
BlobURLProtocolHandler
.
h
"
#
include
"
mozilla
/
dom
/
WorkerRunnable
.
h
"
#
include
"
mozilla
/
dom
/
WorkerScope
.
h
"
namespace
mozilla
:
:
dom
{
class
CreateURLRunnable
:
public
WorkerMainThreadRunnable
{
private
:
BlobImpl
*
mBlobImpl
;
nsAString
&
mURL
;
public
:
CreateURLRunnable
(
WorkerPrivate
*
aWorkerPrivate
BlobImpl
*
aBlobImpl
nsAString
&
aURL
)
:
WorkerMainThreadRunnable
(
aWorkerPrivate
"
URL
:
:
CreateURL
"
_ns
)
mBlobImpl
(
aBlobImpl
)
mURL
(
aURL
)
{
MOZ_ASSERT
(
aBlobImpl
)
;
}
bool
MainThreadRun
(
)
override
{
using
namespace
mozilla
:
:
ipc
;
AssertIsOnMainThread
(
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mWorkerPrivate
-
>
GetPrincipal
(
)
;
nsAutoCString
url
;
nsresult
rv
=
BlobURLProtocolHandler
:
:
AddDataEntry
(
mBlobImpl
principal
Some
(
mWorkerPrivate
-
>
AgentClusterId
(
)
)
url
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
add
data
entry
for
the
blob
!
"
)
;
SetDOMStringToNull
(
mURL
)
;
return
false
;
}
CopyUTF8toUTF16
(
url
mURL
)
;
return
true
;
}
}
;
class
RevokeURLRunnable
:
public
WorkerMainThreadRunnable
{
private
:
const
nsString
mURL
;
public
:
RevokeURLRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsAString
&
aURL
)
:
WorkerMainThreadRunnable
(
aWorkerPrivate
"
URL
:
:
RevokeURL
"
_ns
)
mURL
(
aURL
)
{
}
bool
MainThreadRun
(
)
override
{
AssertIsOnMainThread
(
)
;
NS_ConvertUTF16toUTF8
url
(
mURL
)
;
BlobURLProtocolHandler
:
:
RemoveDataEntry
(
url
mWorkerPrivate
-
>
GetPrincipal
(
)
Some
(
mWorkerPrivate
-
>
AgentClusterId
(
)
)
)
;
return
true
;
}
}
;
class
IsValidURLRunnable
:
public
WorkerMainThreadRunnable
{
private
:
const
nsString
mURL
;
bool
mValid
;
public
:
IsValidURLRunnable
(
WorkerPrivate
*
aWorkerPrivate
const
nsAString
&
aURL
)
:
WorkerMainThreadRunnable
(
aWorkerPrivate
"
URL
:
:
IsValidURL
"
_ns
)
mURL
(
aURL
)
mValid
(
false
)
{
}
bool
MainThreadRun
(
)
override
{
AssertIsOnMainThread
(
)
;
NS_ConvertUTF16toUTF8
url
(
mURL
)
;
mValid
=
BlobURLProtocolHandler
:
:
HasDataEntry
(
url
)
;
return
true
;
}
bool
IsValidURL
(
)
const
{
return
mValid
;
}
}
;
void
URLWorker
:
:
CreateObjectURL
(
const
GlobalObject
&
aGlobal
Blob
&
aBlob
nsAString
&
aResult
mozilla
:
:
ErrorResult
&
aRv
)
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
cx
)
;
RefPtr
<
BlobImpl
>
blobImpl
=
aBlob
.
Impl
(
)
;
MOZ_ASSERT
(
blobImpl
)
;
RefPtr
<
CreateURLRunnable
>
runnable
=
new
CreateURLRunnable
(
workerPrivate
blobImpl
aResult
)
;
runnable
-
>
Dispatch
(
Canceling
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
WorkerGlobalScope
*
scope
=
workerPrivate
-
>
GlobalScope
(
)
;
MOZ_ASSERT
(
scope
)
;
scope
-
>
RegisterHostObjectURI
(
NS_ConvertUTF16toUTF8
(
aResult
)
)
;
}
void
URLWorker
:
:
RevokeObjectURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
ErrorResult
&
aRv
)
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
cx
)
;
RefPtr
<
RevokeURLRunnable
>
runnable
=
new
RevokeURLRunnable
(
workerPrivate
aUrl
)
;
runnable
-
>
Dispatch
(
Canceling
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
WorkerGlobalScope
*
scope
=
workerPrivate
-
>
GlobalScope
(
)
;
MOZ_ASSERT
(
scope
)
;
scope
-
>
UnregisterHostObjectURI
(
NS_ConvertUTF16toUTF8
(
aUrl
)
)
;
}
bool
URLWorker
:
:
IsValidURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aUrl
ErrorResult
&
aRv
)
{
JSContext
*
cx
=
aGlobal
.
Context
(
)
;
WorkerPrivate
*
workerPrivate
=
GetWorkerPrivateFromContext
(
cx
)
;
RefPtr
<
IsValidURLRunnable
>
runnable
=
new
IsValidURLRunnable
(
workerPrivate
aUrl
)
;
runnable
-
>
Dispatch
(
Canceling
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
false
;
}
return
runnable
-
>
IsValidURL
(
)
;
}
}
