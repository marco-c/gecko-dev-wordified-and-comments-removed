#
ifndef
mozilla_dom_URLMainThread_h
#
define
mozilla_dom_URLMainThread_h
#
include
"
URL
.
h
"
namespace
mozilla
{
namespace
dom
{
class
URLMainThread
final
:
public
URL
{
public
:
static
already_AddRefed
<
URLMainThread
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
const
Optional
<
nsAString
>
&
aBase
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
URLMainThread
>
Constructor
(
nsISupports
*
aParent
const
nsAString
&
aURL
const
nsAString
&
aBase
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
URLMainThread
>
Constructor
(
nsISupports
*
aParent
const
nsAString
&
aURL
nsIURI
*
aBase
ErrorResult
&
aRv
)
;
static
void
CreateObjectURL
(
const
GlobalObject
&
aGlobal
Blob
&
aBlob
nsAString
&
aResult
ErrorResult
&
aRv
)
;
static
void
CreateObjectURL
(
const
GlobalObject
&
aGlobal
DOMMediaStream
&
aStream
nsAString
&
aResult
ErrorResult
&
aRv
)
;
static
void
CreateObjectURL
(
const
GlobalObject
&
aGlobal
MediaSource
&
aSource
nsAString
&
aResult
ErrorResult
&
aRv
)
;
static
void
RevokeObjectURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
ErrorResult
&
aRv
)
;
static
bool
IsValidURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
ErrorResult
&
aRv
)
;
explicit
URLMainThread
(
nsISupports
*
aParent
)
;
virtual
void
SetHref
(
const
nsAString
&
aHref
ErrorResult
&
aRv
)
override
;
virtual
void
GetOrigin
(
nsAString
&
aOrigin
ErrorResult
&
aRv
)
const
override
;
virtual
void
SetProtocol
(
const
nsAString
&
aProtocol
ErrorResult
&
aRv
)
override
;
private
:
~
URLMainThread
(
)
;
}
;
}
}
#
endif
