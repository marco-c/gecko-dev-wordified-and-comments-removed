#
include
"
URLMainThread
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
mozilla
/
dom
/
Blob
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsHostObjectProtocolHandler
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsNetUtil
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
template
<
typename
T
>
void
CreateObjectURLInternal
(
const
GlobalObject
&
aGlobal
T
aObject
nsAString
&
aResult
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
NS_WARN_IF
(
!
global
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsContentUtils
:
:
ObjectPrincipal
(
aGlobal
.
Get
(
)
)
;
nsAutoCString
url
;
aRv
=
nsHostObjectProtocolHandler
:
:
AddDataEntry
(
aObject
principal
url
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
global
-
>
RegisterHostObjectURI
(
url
)
;
CopyASCIItoUTF16
(
url
aResult
)
;
}
}
already_AddRefed
<
URLMainThread
>
URLMainThread
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
const
Optional
<
nsAString
>
&
aBase
ErrorResult
&
aRv
)
{
if
(
aBase
.
WasPassed
(
)
)
{
return
Constructor
(
aGlobal
.
GetAsSupports
(
)
aURL
aBase
.
Value
(
)
aRv
)
;
}
return
Constructor
(
aGlobal
.
GetAsSupports
(
)
aURL
nullptr
aRv
)
;
}
already_AddRefed
<
URLMainThread
>
URLMainThread
:
:
Constructor
(
nsISupports
*
aParent
const
nsAString
&
aURL
const
nsAString
&
aBase
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIURI
>
baseUri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
baseUri
)
aBase
nullptr
nullptr
nsContentUtils
:
:
GetIOService
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_URL
>
(
aBase
)
;
return
nullptr
;
}
return
Constructor
(
aParent
aURL
baseUri
aRv
)
;
}
already_AddRefed
<
URLMainThread
>
URLMainThread
:
:
Constructor
(
nsISupports
*
aParent
const
nsAString
&
aURL
nsIURI
*
aBase
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIURI
>
uri
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
aURL
nullptr
aBase
nsContentUtils
:
:
GetIOService
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_URL
>
(
aURL
)
;
return
nullptr
;
}
RefPtr
<
URLMainThread
>
url
=
new
URLMainThread
(
aParent
)
;
url
-
>
SetURI
(
uri
.
forget
(
)
)
;
return
url
.
forget
(
)
;
}
void
URLMainThread
:
:
CreateObjectURL
(
const
GlobalObject
&
aGlobal
Blob
&
aBlob
nsAString
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CreateObjectURLInternal
(
aGlobal
aBlob
.
Impl
(
)
aResult
aRv
)
;
}
void
URLMainThread
:
:
CreateObjectURL
(
const
GlobalObject
&
aGlobal
DOMMediaStream
&
aStream
nsAString
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CreateObjectURLInternal
(
aGlobal
&
aStream
aResult
aRv
)
;
}
void
URLMainThread
:
:
CreateObjectURL
(
const
GlobalObject
&
aGlobal
MediaSource
&
aSource
nsAString
&
aResult
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsContentUtils
:
:
ObjectPrincipal
(
aGlobal
.
Get
(
)
)
;
nsAutoCString
url
;
aRv
=
nsHostObjectProtocolHandler
:
:
AddDataEntry
(
&
aSource
principal
url
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
nsCOMPtr
<
nsIRunnable
>
revocation
=
NS_NewRunnableFunction
(
"
dom
:
:
URLMainThread
:
:
CreateObjectURL
"
[
url
]
{
nsHostObjectProtocolHandler
:
:
RemoveDataEntry
(
url
)
;
}
)
;
nsContentUtils
:
:
RunInStableState
(
revocation
.
forget
(
)
)
;
CopyASCIItoUTF16
(
url
aResult
)
;
}
void
URLMainThread
:
:
RevokeObjectURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
global
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
nsIPrincipal
*
principal
=
nsContentUtils
:
:
ObjectPrincipal
(
aGlobal
.
Get
(
)
)
;
NS_LossyConvertUTF16toASCII
asciiurl
(
aURL
)
;
nsIPrincipal
*
urlPrincipal
=
nsHostObjectProtocolHandler
:
:
GetDataEntryPrincipal
(
asciiurl
)
;
if
(
urlPrincipal
&
&
principal
-
>
Subsumes
(
urlPrincipal
)
)
{
global
-
>
UnregisterHostObjectURI
(
asciiurl
)
;
nsHostObjectProtocolHandler
:
:
RemoveDataEntry
(
asciiurl
)
;
}
}
URLMainThread
:
:
URLMainThread
(
nsISupports
*
aParent
)
:
URL
(
aParent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
URLMainThread
:
:
~
URLMainThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
bool
URLMainThread
:
:
IsValidURL
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aURL
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_LossyConvertUTF16toASCII
asciiurl
(
aURL
)
;
return
nsHostObjectProtocolHandler
:
:
HasDataEntry
(
asciiurl
)
;
}
void
URLMainThread
:
:
SetHref
(
const
nsAString
&
aHref
ErrorResult
&
aRv
)
{
NS_ConvertUTF16toUTF8
href
(
aHref
)
;
nsresult
rv
;
nsCOMPtr
<
nsIIOService
>
ioService
(
do_GetService
(
NS_IOSERVICE_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
ioService
-
>
NewURI
(
href
nullptr
nullptr
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
ThrowTypeError
<
MSG_INVALID_URL
>
(
aHref
)
;
return
;
}
SetURI
(
uri
.
forget
(
)
)
;
UpdateURLSearchParams
(
)
;
}
void
URLMainThread
:
:
GetOrigin
(
nsAString
&
aOrigin
ErrorResult
&
aRv
)
const
{
nsContentUtils
:
:
GetUTFOrigin
(
GetURI
(
)
aOrigin
)
;
}
void
URLMainThread
:
:
SetProtocol
(
const
nsAString
&
aProtocol
ErrorResult
&
aRv
)
{
nsAString
:
:
const_iterator
start
end
;
aProtocol
.
BeginReading
(
start
)
;
aProtocol
.
EndReading
(
end
)
;
nsAString
:
:
const_iterator
iter
(
start
)
;
FindCharInReadable
(
'
:
'
iter
end
)
;
nsCOMPtr
<
nsIURI
>
clone
;
nsresult
rv
=
NS_MutateURI
(
GetURI
(
)
)
.
SetScheme
(
NS_ConvertUTF16toUTF8
(
Substring
(
start
iter
)
)
)
.
Finalize
(
clone
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
nsAutoCString
href
;
rv
=
clone
-
>
GetSpec
(
href
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri
)
href
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
SetURI
(
uri
.
forget
(
)
)
;
}
}
}
