const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
paymentSrv
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
request
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPaymentRequestService
)
;
const
defaultCard
=
{
cardholderName
:
"
"
cardNumber
:
"
4111111111111111
"
expiryMonth
:
"
"
expiryYear
:
"
"
cardSecurityCode
:
"
"
billingAddress
:
null
}
;
function
makeBillingAddress
(
)
{
const
billingAddress
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
address
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentAddress
)
;
const
addressLine
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
const
address
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
address
.
data
=
"
Easton
Ave
"
;
addressLine
.
appendElement
(
address
)
;
const
addressArgs
=
[
"
USA
"
addressLine
"
CA
"
"
San
Bruno
"
"
"
"
94066
"
"
123456
"
"
"
"
Bill
A
.
Pacheco
"
"
+
14344413879
"
]
;
billingAddress
.
init
(
.
.
.
addressArgs
)
;
return
billingAddress
;
}
function
makeBasicCardResponse
(
details
)
{
const
basicCardResponseData
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
basiccard
-
response
-
data
;
1
"
]
.
createInstance
(
Ci
.
nsIBasicCardResponseData
)
;
const
{
cardholderName
cardNumber
expiryMonth
expiryYear
cardSecurityCode
billingAddress
}
=
details
;
const
address
=
billingAddress
!
=
=
undefined
?
billingAddress
:
makeBillingAddress
(
)
;
basicCardResponseData
.
initData
(
cardholderName
cardNumber
expiryMonth
expiryYear
cardSecurityCode
address
)
;
return
basicCardResponseData
;
}
const
TestingUIService
=
{
showPayment
(
requestId
details
=
{
.
.
.
defaultCard
}
)
{
const
showResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
show
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentShowActionResponse
)
;
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
makeBasicCardResponse
(
details
)
"
Person
name
"
"
Person
email
"
"
Person
phone
"
)
;
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
updatePayment
(
requestId
)
{
const
request
=
paymentSrv
.
getPaymentRequestById
(
requestId
)
;
this
.
showPayment
(
requestId
request
.
paymentDetails
.
paymentMethod
)
;
}
completePayment
(
requestId
)
{
const
request
=
paymentSrv
.
getPaymentRequestById
(
requestId
)
;
const
completeResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
complete
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentCompleteActionResponse
)
;
completeResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
COMPLETE_SUCCEEDED
)
;
paymentSrv
.
respondPayment
(
completeResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPaymentUIService
]
)
;
}
}
;
paymentSrv
.
setTestingUIService
(
TestingUIService
.
QueryInterface
(
Ci
.
nsIPaymentUIService
)
)
;
addMessageListener
(
"
teardown
"
(
)
=
>
{
paymentSrv
.
setTestingUIService
(
null
)
;
sendAsyncMessage
(
"
teardown
-
complete
"
)
;
}
)
;
