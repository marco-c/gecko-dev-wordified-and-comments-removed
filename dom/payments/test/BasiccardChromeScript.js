"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
paymentSrv
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
request
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPaymentRequestService
)
;
function
emitTestFail
(
message
)
{
sendAsyncMessage
(
"
test
-
fail
"
message
)
;
}
const
billingAddress
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
address
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentAddress
)
;
const
addressLine
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
const
address
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
address
.
data
=
"
Easton
Ave
"
;
addressLine
.
appendElement
(
address
)
;
billingAddress
.
init
(
"
USA
"
addressLine
"
CA
"
"
CA
"
"
San
Bruno
"
"
"
"
94066
"
"
123456
"
"
"
"
Bill
A
.
Pacheco
"
"
+
14344413879
"
)
;
const
specialAddress
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
address
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentAddress
)
;
const
specialAddressLine
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
const
specialData
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
specialData
.
data
=
"
:
%
&
*
"
;
specialAddressLine
.
appendElement
(
specialData
)
;
specialAddress
.
init
(
"
USA
"
specialAddressLine
"
CA
"
"
CA
"
"
San
Bruno
"
"
"
"
94066
"
"
123456
"
"
"
"
Bill
A
.
Pacheco
"
"
+
14344413879
"
)
;
const
basiccardResponseData
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
basiccard
-
response
-
data
;
1
"
]
.
createInstance
(
Ci
.
nsIBasicCardResponseData
)
;
const
showResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
show
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentShowActionResponse
)
;
function
abortPaymentResponse
(
requestId
)
{
let
abortResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
abort
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentAbortActionResponse
)
;
abortResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
ABORT_SUCCEEDED
)
;
paymentSrv
.
respondPayment
(
abortResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
function
completePaymentResponse
(
requestId
)
{
let
completeResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
complete
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentCompleteActionResponse
)
;
completeResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
COMPLETE_SUCCEEDED
)
;
paymentSrv
.
respondPayment
(
completeResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
const
detailedResponseUI
=
{
showPayment
:
function
(
requestId
)
{
try
{
basiccardResponseData
.
initData
(
"
Bill
A
.
Pacheco
"
"
4916855166538720
"
"
01
"
"
2024
"
"
180
"
billingAddress
)
;
}
catch
(
e
)
{
emitTestFail
(
"
Fail
to
initialize
basic
card
response
data
.
"
)
;
}
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
basiccardResponseData
"
Bill
A
.
Pacheco
"
"
"
"
"
)
;
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
abortPayment
:
abortPaymentResponse
completePayment
:
completePaymentResponse
updatePayment
:
function
(
requestId
)
{
}
closePayment
:
function
(
requestId
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPaymentUIService
]
)
}
;
const
simpleResponseUI
=
{
showPayment
:
function
(
requestId
)
{
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
"
"
"
"
"
null
)
;
}
catch
(
e
)
{
emitTestFail
(
"
Fail
to
initialize
basic
card
response
data
.
"
)
;
}
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
basiccardResponseData
"
Bill
A
.
Pacheco
"
"
"
"
"
)
;
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
abortPayment
:
abortPaymentResponse
completePayment
:
completePaymentResponse
updatePayment
:
function
(
requestId
)
{
}
closePayment
:
function
(
requestId
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPaymentUIService
]
)
}
;
const
specialAddressUI
=
{
showPayment
:
function
(
requestId
)
{
try
{
basiccardResponseData
.
initData
(
"
Bill
A
.
Pacheco
"
"
4916855166538720
"
"
01
"
"
2024
"
"
180
"
specialAddress
)
;
}
catch
(
e
)
{
emitTestFail
(
"
Fail
to
initialize
basic
card
response
data
.
"
)
;
}
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
basiccardResponseData
"
Bill
A
.
Pacheco
"
"
"
"
"
)
;
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
abortPayment
:
abortPaymentResponse
completePayment
:
completePaymentResponse
updatePayment
:
function
(
requestId
)
{
}
closePayment
:
function
(
requestId
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPaymentUIService
]
)
}
;
addMessageListener
(
"
set
-
detailed
-
ui
-
service
"
function
(
)
{
paymentSrv
.
setTestingUIService
(
detailedResponseUI
.
QueryInterface
(
Ci
.
nsIPaymentUIService
)
)
;
}
)
;
addMessageListener
(
"
set
-
simple
-
ui
-
service
"
function
(
)
{
paymentSrv
.
setTestingUIService
(
simpleResponseUI
.
QueryInterface
(
Ci
.
nsIPaymentUIService
)
)
;
}
)
;
addMessageListener
(
"
set
-
special
-
address
-
ui
-
service
"
function
(
)
{
paymentSrv
.
setTestingUIService
(
specialAddressUI
.
QueryInterface
(
Ci
.
nsIPaymentUIService
)
)
;
}
)
;
addMessageListener
(
"
error
-
response
-
test
"
function
(
)
{
try
{
basiccardResponseData
.
initData
(
"
"
"
"
"
"
"
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
empty
cardNumber
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
Empty
cardNumber
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
123
"
"
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
invalid
expiryMonth
'
123
'
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
expiryMonth
123
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
99
"
"
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
invalid
expiryMonth
'
99
'
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
expiryMonth
99
xpected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
ab
"
"
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
invalid
expiryMonth
'
ab
'
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
expiryMonth
ab
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
"
"
abcd
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
invalid
expiryYear
'
abcd
'
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
expiryYear
abcd
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
try
{
basiccardResponseData
.
initData
(
"
"
"
4916855166538720
"
"
"
"
11111
"
"
"
null
)
;
emitTestFail
(
"
BasicCardResponse
should
not
be
initialized
with
invalid
expiryYear
'
11111
'
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
expiryYear
11111
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
const
responseData
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
general
-
response
-
data
;
1
"
]
.
createInstance
(
Ci
.
nsIGeneralResponseData
)
;
try
{
responseData
.
initData
(
{
}
)
;
}
catch
(
e
)
{
emitTestFail
(
"
Fail
to
initialize
response
data
with
empty
object
.
"
)
;
}
try
{
showResponse
.
init
(
"
testid
"
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
responseData
"
Bill
A
.
Pacheco
"
"
"
"
"
)
;
emitTestFail
(
"
nsIPaymentShowActionResponse
should
not
be
initialized
with
basic
-
card
method
and
nsIGeneralResponseData
.
"
)
;
}
catch
(
e
)
{
if
(
e
.
name
!
=
"
NS_ERROR_FAILURE
"
)
{
emitTestFail
(
"
ShowResponse
init
expected
'
NS_ERROR_FAILURE
'
but
got
"
+
e
.
name
+
"
.
"
)
;
}
}
sendAsyncMessage
(
"
error
-
response
-
complete
"
)
;
}
)
;
addMessageListener
(
"
teardown
"
function
(
)
{
paymentSrv
.
setTestingUIService
(
null
)
;
sendAsyncMessage
(
"
teardown
-
complete
"
)
;
}
)
;
