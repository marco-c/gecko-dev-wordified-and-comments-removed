"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
paymentSrv
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
request
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPaymentRequestService
)
;
function
emitTestFail
(
message
)
{
sendAsyncMessage
(
"
test
-
fail
"
message
)
;
}
function
emitTestPass
(
message
)
{
sendAsyncMessage
(
"
test
-
pass
"
message
)
;
}
const
billingAddress
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
address
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentAddress
)
;
const
addressLine
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
const
address
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
address
.
data
=
"
Easton
Ave
"
;
addressLine
.
appendElement
(
address
)
;
billingAddress
.
init
(
"
USA
"
addressLine
"
CA
"
"
CA
"
"
San
Bruno
"
"
"
"
94066
"
"
123456
"
"
"
"
Bill
A
.
Pacheco
"
"
+
14344413879
"
)
;
function
acceptPayment
(
requestId
mode
)
{
const
basiccardResponseData
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
basiccard
-
response
-
data
;
1
"
]
.
createInstance
(
Ci
.
nsIBasicCardResponseData
)
;
const
showResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
show
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentShowActionResponse
)
;
basiccardResponseData
.
initData
(
"
Bill
A
.
Pacheco
"
"
4916855166538720
"
"
01
"
"
2024
"
"
180
"
billingAddress
)
;
if
(
mode
=
=
=
"
show
"
)
{
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
basiccardResponseData
"
Bill
A
.
Pacheco
"
"
"
"
"
)
;
}
if
(
mode
=
=
"
retry
"
)
{
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_ACCEPTED
"
basic
-
card
"
basiccardResponseData
"
Bill
A
.
Pacheco
"
"
bpacheco
test
.
org
"
"
+
123456789
"
)
;
}
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
function
rejectPayment
(
requestId
)
{
const
responseData
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
general
-
response
-
data
;
1
"
]
.
createInstance
(
Ci
.
nsIGeneralResponseData
)
;
responseData
.
initData
(
{
}
)
;
const
showResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
show
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentShowActionResponse
)
;
showResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
PAYMENT_REJECTED
"
"
responseData
"
"
"
"
"
"
)
;
paymentSrv
.
respondPayment
(
showResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
function
checkAddressErrors
(
testName
errors
)
{
if
(
!
errors
)
{
emitTestFail
(
{
testName
}
:
Expect
non
-
null
shippingAddressErrors
but
got
null
.
)
;
return
;
}
for
(
const
[
key
msg
]
of
Object
.
entries
(
errors
)
)
{
const
expected
=
{
key
}
error
;
if
(
msg
!
=
=
expected
)
{
emitTestFail
(
{
testName
}
:
Expected
'
{
expected
}
'
on
shippingAddressErrors
.
{
key
}
but
got
'
{
msg
}
'
.
)
;
return
;
}
}
}
function
checkPayerErrors
(
testName
errors
)
{
if
(
!
errors
)
{
emitTestFail
(
{
testName
}
:
Expect
non
-
null
payerErrors
but
got
null
.
)
;
return
;
}
for
(
const
[
key
msg
]
of
Object
.
entries
(
errors
)
)
{
const
expected
=
{
key
}
error
;
if
(
msg
!
=
=
expected
)
{
emitTestFail
(
{
testName
}
:
Expected
'
{
expected
}
'
on
payerErrors
.
{
key
}
but
got
'
{
msg
}
'
.
)
;
return
;
}
}
}
function
checkPaymentMethodErrors
(
testName
errors
)
{
if
(
!
errors
)
{
emitTestFail
(
{
testName
}
:
Expect
non
-
null
paymentMethodErrors
but
got
null
.
)
;
return
;
}
for
(
const
[
key
msg
]
of
Object
.
entries
(
errors
)
)
{
const
expected
=
method
{
key
}
error
;
if
(
msg
!
=
=
expected
)
{
emitTestFail
(
{
testName
}
:
Expected
'
{
expected
}
'
on
paymentMethodErrors
.
{
key
}
but
got
'
{
msg
}
'
.
)
;
return
;
}
}
}
const
DummyUIService
=
{
testName
:
"
"
rejectRetry
:
false
showPayment
(
requestId
)
{
acceptPayment
(
requestId
"
show
"
)
;
}
abortPaymen
(
requestId
)
{
respondRequestId
=
requestId
;
}
completePayment
(
requestId
)
{
let
completeResponse
=
Cc
[
"
mozilla
.
org
/
dom
/
payments
/
payment
-
complete
-
action
-
response
;
1
"
]
.
createInstance
(
Ci
.
nsIPaymentCompleteActionResponse
)
;
completeResponse
.
init
(
requestId
Ci
.
nsIPaymentActionResponse
.
COMPLETE_SUCCEEDED
)
;
paymentSrv
.
respondPayment
(
completeResponse
.
QueryInterface
(
Ci
.
nsIPaymentActionResponse
)
)
;
}
updatePayment
(
requestId
)
{
const
payment
=
paymentSrv
.
getPaymentRequestById
(
requestId
)
;
if
(
payment
.
paymentDetails
.
error
!
=
=
"
error
"
)
{
emitTestFail
(
"
Expect
'
error
'
on
details
.
error
but
got
'
"
+
payment
.
paymentDetails
.
error
+
"
'
"
)
;
}
checkAddressErrors
(
this
.
testName
payment
.
paymentDetails
.
shippingAddressErrors
)
;
checkPayerErrors
(
this
.
testName
payment
.
paymentDetails
.
payerErrors
)
;
checkPaymentMethodErrors
(
this
.
testName
payment
.
paymentDetails
.
paymentMethodErrors
)
;
if
(
this
.
rejectRetry
)
{
rejectPayment
(
requestId
)
;
}
else
{
acceptPayment
(
requestId
"
retry
"
)
;
}
}
closePayment
:
requestId
=
>
{
respondRequestId
=
requestId
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPaymentUIService
"
]
)
}
;
paymentSrv
.
setTestingUIService
(
DummyUIService
.
QueryInterface
(
Ci
.
nsIPaymentUIService
)
)
;
addMessageListener
(
"
start
-
test
"
function
(
testName
)
{
DummyUIService
.
testName
=
testName
;
sendAsyncMessage
(
"
start
-
test
-
complete
"
)
;
}
)
;
addMessageListener
(
"
finish
-
test
"
function
(
)
{
DummyUIService
.
testName
=
"
"
;
sendAsyncMessage
(
"
finish
-
test
-
complete
"
)
;
}
)
;
addMessageListener
(
"
reject
-
retry
"
function
(
)
{
DummyUIService
.
rejectRetry
=
true
;
sendAsyncMessage
(
"
reject
-
retry
-
complete
"
)
;
}
)
;
addMessageListener
(
"
teardown
"
function
(
)
{
paymentSrv
.
setTestingUIService
(
null
)
;
sendAsyncMessage
(
"
teardown
-
complete
"
)
;
}
)
;
