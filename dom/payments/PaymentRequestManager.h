#
ifndef
mozilla_dom_PaymentRequestManager_h
#
define
mozilla_dom_PaymentRequestManager_h
#
include
"
nsISupports
.
h
"
#
include
"
PaymentRequest
.
h
"
#
include
"
mozilla
/
dom
/
PaymentRequestBinding
.
h
"
#
include
"
mozilla
/
dom
/
PaymentRequestUpdateEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
PaymentResponseBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
PaymentRequestChild
;
class
IPCPaymentActionRequest
;
class
PaymentRequestManager
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
PaymentRequestManager
)
static
already_AddRefed
<
PaymentRequestManager
>
GetSingleton
(
)
;
nsresult
CreatePayment
(
JSContext
*
aCx
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aTopLevelPrincipal
const
Sequence
<
PaymentMethodData
>
&
aMethodData
const
PaymentDetailsInit
&
aDetails
const
PaymentOptions
&
aOptions
PaymentRequest
*
*
aRequest
)
;
nsresult
CanMakePayment
(
PaymentRequest
*
aRequest
)
;
nsresult
ShowPayment
(
PaymentRequest
*
aRequest
)
;
nsresult
AbortPayment
(
PaymentRequest
*
aRequest
)
;
nsresult
CompletePayment
(
PaymentRequest
*
aRequest
const
PaymentComplete
&
aComplete
bool
aTimedOut
=
false
)
;
nsresult
UpdatePayment
(
JSContext
*
aCx
PaymentRequest
*
aRequest
const
PaymentDetailsUpdate
&
aDetails
bool
aRequestShipping
bool
aTimedout
=
false
bool
aNoHandler
=
false
)
;
nsresult
ClosePayment
(
PaymentRequest
*
aRequest
)
;
nsresult
RetryPayment
(
JSContext
*
aCx
PaymentRequest
*
aRequest
const
PaymentValidationErrors
&
aErrors
)
;
nsresult
RespondPayment
(
PaymentRequest
*
aRequest
const
IPCPaymentActionResponse
&
aResponse
)
;
nsresult
ChangeShippingAddress
(
PaymentRequest
*
aRequest
const
IPCPaymentAddress
&
aAddress
)
;
nsresult
ChangeShippingOption
(
PaymentRequest
*
aRequest
const
nsAString
&
aOption
)
;
nsresult
ChangePayerDetail
(
PaymentRequest
*
aRequest
const
nsAString
&
aPayerName
const
nsAString
&
aPayerEmail
const
nsAString
&
aPayerPhone
)
;
nsresult
ChangePaymentMethod
(
PaymentRequest
*
aRequest
const
nsAString
&
aMethodName
const
IPCMethodChangeDetails
&
aMethodDetails
)
;
bool
IsRegionSupported
(
const
nsAString
&
region
)
const
;
void
RequestIPCOver
(
PaymentRequest
*
aRequest
)
;
private
:
PaymentRequestManager
(
)
;
~
PaymentRequestManager
(
)
;
PaymentRequestChild
*
GetPaymentChild
(
PaymentRequest
*
aRequest
)
;
nsresult
SendRequestPayment
(
PaymentRequest
*
aRequest
const
IPCPaymentActionRequest
&
action
bool
aResponseExpected
=
true
)
;
void
NotifyRequestDone
(
PaymentRequest
*
aRequest
)
;
nsDataHashtable
<
nsRefPtrHashKey
<
PaymentRequest
>
uint32_t
>
mActivePayments
;
nsTArray
<
nsString
>
mSupportedRegions
;
}
;
}
}
#
endif
