#
ifndef
mozilla_dom_PaymentRequest_h
#
define
mozilla_dom_PaymentRequest_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
PaymentRequestBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
EventHandlerNonNull
;
class
PaymentAddress
;
class
PaymentResponse
;
class
PaymentRequest
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
PaymentRequest
DOMEventTargetHelper
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
PaymentRequest
>
CreatePaymentRequest
(
nsPIDOMWindowInner
*
aWindow
nsresult
&
aRv
)
;
static
bool
PrefEnabled
(
JSContext
*
aCx
JSObject
*
aObj
)
;
static
bool
IsValidMethodData
(
const
Sequence
<
PaymentMethodData
>
&
aMethodData
nsAString
&
aErrorMsg
)
;
static
bool
IsValidNumber
(
const
nsAString
&
aItem
const
nsAString
&
aStr
nsAString
&
aErrorMsg
)
;
static
bool
IsPositiveNumber
(
const
nsAString
&
aItem
const
nsAString
&
aStr
nsAString
&
aErrorMsg
)
;
static
bool
IsValidDetailsInit
(
const
PaymentDetailsInit
&
aDetails
nsAString
&
aErrorMsg
)
;
static
bool
IsValidDetailsBase
(
const
PaymentDetailsBase
&
aDetails
nsAString
&
aErrorMsg
)
;
static
already_AddRefed
<
PaymentRequest
>
Constructor
(
const
GlobalObject
&
aGlobal
const
Sequence
<
PaymentMethodData
>
&
aMethodData
const
PaymentDetailsInit
&
aDetails
const
PaymentOptions
&
aOptions
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
CanMakePayment
(
ErrorResult
&
aRv
)
;
void
RespondCanMakePayment
(
bool
aResult
)
;
already_AddRefed
<
Promise
>
Show
(
ErrorResult
&
aRv
)
;
void
RespondShowPayment
(
bool
aAccept
const
nsAString
&
aMethodName
const
nsAString
&
aDetails
const
nsAString
&
aPayerName
const
nsAString
&
aPayerEmail
const
nsAString
&
aPayerPhone
nsresult
aRv
=
NS_ERROR_DOM_ABORT_ERR
)
;
void
RejectShowPayment
(
nsresult
aRejectReason
)
;
void
RespondComplete
(
)
;
already_AddRefed
<
Promise
>
Abort
(
ErrorResult
&
aRv
)
;
void
RespondAbortPayment
(
bool
aResult
)
;
void
GetId
(
nsAString
&
aRetVal
)
const
;
void
GetInternalId
(
nsAString
&
aRetVal
)
;
void
SetId
(
const
nsAString
&
aId
)
;
bool
Equals
(
const
nsAString
&
aInternalId
)
const
;
bool
ReadyForUpdate
(
)
;
void
SetUpdating
(
bool
aUpdating
)
;
already_AddRefed
<
PaymentAddress
>
GetShippingAddress
(
)
const
;
void
GetShippingOption
(
nsAString
&
aRetVal
)
const
;
Nullable
<
PaymentShippingType
>
GetShippingType
(
)
const
;
IMPL_EVENT_HANDLER
(
shippingaddresschange
)
;
IMPL_EVENT_HANDLER
(
shippingoptionchange
)
;
protected
:
~
PaymentRequest
(
)
;
PaymentRequest
(
nsPIDOMWindowInner
*
aWindow
const
nsAString
&
aInternalId
)
;
nsString
mInternalId
;
nsString
mId
;
RefPtr
<
Promise
>
mResultPromise
;
RefPtr
<
Promise
>
mAcceptPromise
;
RefPtr
<
Promise
>
mAbortPromise
;
RefPtr
<
PaymentResponse
>
mResponse
;
RefPtr
<
PaymentAddress
>
mShippingAddress
;
nsString
mShippingOption
;
bool
mUpdating
;
enum
{
eUnknown
eCreated
eInteractive
eClosed
}
mState
;
}
;
}
}
#
endif
