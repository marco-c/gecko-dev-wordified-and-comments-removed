#
ifndef
mozilla_dom_PaymentResponse_h
#
define
mozilla_dom_PaymentResponse_h
#
include
"
mozilla
/
dom
/
PaymentResponseBinding
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
PaymentAddress
;
class
PaymentRequest
;
class
Promise
;
class
PaymentResponse
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
PaymentResponse
)
PaymentResponse
(
nsPIDOMWindowInner
*
aWindow
PaymentRequest
*
aRequest
const
nsAString
&
aRequestId
const
nsAString
&
aMethodName
const
nsAString
&
aShippingOption
RefPtr
<
PaymentAddress
>
aShippingAddress
const
nsAString
&
aDetails
const
nsAString
&
aPayerName
const
nsAString
&
aPayerEmail
const
nsAString
&
aPayerPhone
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetRequestId
(
nsString
&
aRetVal
)
const
;
void
GetMethodName
(
nsString
&
aRetVal
)
const
;
void
GetDetails
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetVal
)
const
;
already_AddRefed
<
PaymentAddress
>
GetShippingAddress
(
)
const
;
void
GetShippingOption
(
nsString
&
aRetVal
)
const
;
void
GetPayerName
(
nsString
&
aRetVal
)
const
;
void
GetPayerEmail
(
nsString
&
aRetVal
)
const
;
void
GetPayerPhone
(
nsString
&
aRetVal
)
const
;
already_AddRefed
<
Promise
>
Complete
(
PaymentComplete
result
ErrorResult
&
aRv
)
;
void
RespondComplete
(
)
;
protected
:
~
PaymentResponse
(
)
;
private
:
nsCOMPtr
<
nsPIDOMWindowInner
>
mOwner
;
bool
mCompleteCalled
;
PaymentRequest
*
mRequest
;
nsString
mRequestId
;
nsString
mMethodName
;
nsString
mDetails
;
nsString
mShippingOption
;
nsString
mPayerName
;
nsString
mPayerEmail
;
nsString
mPayerPhone
;
RefPtr
<
PaymentAddress
>
mShippingAddress
;
RefPtr
<
Promise
>
mPromise
;
}
;
}
}
#
endif
