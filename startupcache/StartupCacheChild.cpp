#
include
"
mozilla
/
scache
/
StartupCacheChild
.
h
"
#
include
"
mozilla
/
scache
/
StartupCache
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
namespace
mozilla
{
namespace
scache
{
void
StartupCacheChild
:
:
Init
(
)
{
auto
*
cache
=
StartupCache
:
:
GetSingleton
(
)
;
if
(
cache
)
{
Unused
<
<
cache
-
>
InitChild
(
this
)
;
}
else
{
Send__delete__
(
this
AutoTArray
<
EntryData
0
>
(
)
)
;
}
}
void
StartupCacheChild
:
:
SendEntriesAndFinalize
(
StartupCache
:
:
Table
&
entries
)
{
nsTArray
<
EntryData
>
dataArray
;
for
(
auto
iter
=
entries
.
iter
(
)
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
const
auto
&
key
=
iter
.
get
(
)
.
key
(
)
;
auto
&
value
=
iter
.
get
(
)
.
value
(
)
;
if
(
!
value
.
mData
|
|
value
.
mRequestedOrder
=
=
kStartupCacheEntryNotRequested
)
{
continue
;
}
auto
data
=
dataArray
.
AppendElement
(
)
;
MOZ_ASSERT
(
strnlen
(
key
.
get
(
)
kStartupCacheKeyLengthCap
)
<
kStartupCacheKeyLengthCap
"
StartupCache
key
over
the
size
limit
.
"
)
;
data
-
>
key
(
)
=
nsCString
(
key
.
get
(
)
)
;
if
(
value
.
mFlags
.
contains
(
StartupCacheEntryFlags
:
:
AddedThisSession
)
)
{
data
-
>
data
(
)
.
AppendElements
(
reinterpret_cast
<
const
uint8_t
*
>
(
value
.
mData
.
get
(
)
)
value
.
mUncompressedSize
)
;
}
}
Send__delete__
(
this
dataArray
)
;
for
(
auto
iter
=
entries
.
iter
(
)
;
!
iter
.
done
(
)
;
iter
.
next
(
)
)
{
auto
&
value
=
iter
.
get
(
)
.
value
(
)
;
if
(
!
value
.
mFlags
.
contains
(
StartupCacheEntryFlags
:
:
DoNotFree
)
)
{
value
.
mData
=
nullptr
;
}
}
}
void
StartupCacheChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
auto
*
cache
=
StartupCache
:
:
GetSingleton
(
)
;
if
(
cache
)
{
cache
-
>
mChildActor
=
nullptr
;
}
}
}
}
