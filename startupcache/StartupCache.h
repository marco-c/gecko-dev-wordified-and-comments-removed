#
ifndef
StartupCache_h_
#
define
StartupCache_h_
#
include
<
utility
>
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsTStringHasher
.
h
"
#
include
"
nsZipArchive
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObjectOutputStream
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
AutoMemMap
.
h
"
#
include
"
mozilla
/
Compression
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
scache
{
struct
StartupCacheEntry
{
UniquePtr
<
char
[
]
>
mData
;
uint32_t
mOffset
;
uint32_t
mCompressedSize
;
uint32_t
mUncompressedSize
;
int32_t
mHeaderOffsetInFile
;
int32_t
mRequestedOrder
;
bool
mRequested
;
MOZ_IMPLICIT
StartupCacheEntry
(
uint32_t
aOffset
uint32_t
aCompressedSize
uint32_t
aUncompressedSize
)
:
mData
(
nullptr
)
mOffset
(
aOffset
)
mCompressedSize
(
aCompressedSize
)
mUncompressedSize
(
aUncompressedSize
)
mHeaderOffsetInFile
(
0
)
mRequestedOrder
(
0
)
mRequested
(
false
)
{
}
StartupCacheEntry
(
UniquePtr
<
char
[
]
>
aData
size_t
aLength
int32_t
aRequestedOrder
)
:
mData
(
std
:
:
move
(
aData
)
)
mOffset
(
0
)
mCompressedSize
(
0
)
mUncompressedSize
(
aLength
)
mHeaderOffsetInFile
(
0
)
mRequestedOrder
(
0
)
mRequested
(
true
)
{
}
struct
Comparator
{
using
Value
=
std
:
:
pair
<
const
nsCString
*
StartupCacheEntry
*
>
;
bool
Equals
(
const
Value
&
a
const
Value
&
b
)
const
{
return
a
.
second
-
>
mRequestedOrder
=
=
b
.
second
-
>
mRequestedOrder
;
}
bool
LessThan
(
const
Value
&
a
const
Value
&
b
)
const
{
return
a
.
second
-
>
mRequestedOrder
<
b
.
second
-
>
mRequestedOrder
;
}
}
;
}
;
class
StartupCacheListener
final
:
public
nsIObserver
{
~
StartupCacheListener
(
)
=
default
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
}
;
class
StartupCache
:
public
nsIMemoryReporter
{
friend
class
StartupCacheListener
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
bool
HasEntry
(
const
char
*
id
)
;
nsresult
GetBuffer
(
const
char
*
id
const
char
*
*
outbuf
uint32_t
*
length
)
;
nsresult
PutBuffer
(
const
char
*
id
UniquePtr
<
char
[
]
>
&
&
inbuf
uint32_t
length
)
;
void
InvalidateCache
(
bool
memoryOnly
=
false
)
;
void
CountAllowedInvalidation
(
)
;
void
MaybeInitShutdownWrite
(
)
;
void
EnsureShutdownWriteComplete
(
)
;
static
void
IgnoreDiskCache
(
)
;
nsresult
GetDebugObjectOutputStream
(
nsIObjectOutputStream
*
aStream
nsIObjectOutputStream
*
*
outStream
)
;
static
StartupCache
*
GetSingletonNoInit
(
)
;
static
StartupCache
*
GetSingleton
(
)
;
static
void
DeleteSingleton
(
)
;
size_t
HeapSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
bool
ShouldCompactCache
(
)
;
nsresult
ResetStartupWriteTimerCheckingReadCount
(
)
;
nsresult
ResetStartupWriteTimer
(
)
;
bool
StartupWriteComplete
(
)
;
private
:
StartupCache
(
)
;
virtual
~
StartupCache
(
)
;
friend
class
StartupCacheInfo
;
Result
<
Ok
nsresult
>
LoadArchive
(
)
;
nsresult
Init
(
)
;
Result
<
nsCOMPtr
<
nsIFile
>
nsresult
>
GetCacheFile
(
const
nsAString
&
suffix
)
;
Result
<
Ok
nsresult
>
OpenCache
(
)
;
Result
<
Ok
nsresult
>
WriteToDisk
(
)
;
void
WaitOnPrefetchThread
(
)
;
void
StartPrefetchMemoryThread
(
)
;
static
nsresult
InitSingleton
(
)
;
static
void
WriteTimeout
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
MaybeWriteOffMainThread
(
)
;
static
void
ThreadedPrefetch
(
void
*
aClosure
)
;
HashMap
<
nsCString
StartupCacheEntry
>
mTable
;
nsTArray
<
decltype
(
mTable
)
>
mOldTables
;
size_t
mAllowedInvalidationsCount
;
nsCOMPtr
<
nsIFile
>
mFile
;
loader
:
:
AutoMemMap
mCacheData
;
Mutex
mTableLock
MOZ_UNANNOTATED
;
nsCOMPtr
<
nsIObserverService
>
mObserverService
;
RefPtr
<
StartupCacheListener
>
mListener
;
nsCOMPtr
<
nsITimer
>
mTimer
;
Atomic
<
bool
>
mDirty
;
Atomic
<
bool
>
mWrittenOnce
;
bool
mCurTableReferenced
;
uint32_t
mRequestedCount
;
size_t
mCacheEntriesBaseOffset
;
static
StaticRefPtr
<
StartupCache
>
gStartupCache
;
static
bool
gShutdownInitiated
;
static
bool
gIgnoreDiskCache
;
static
bool
gFoundDiskCacheOnInit
;
PRThread
*
mPrefetchThread
;
UniquePtr
<
Compression
:
:
LZ4FrameDecompressionContext
>
mDecompressionContext
;
#
ifdef
DEBUG
nsTHashSet
<
nsCOMPtr
<
nsISupports
>
>
mWriteObjectMap
;
#
endif
}
;
#
ifdef
DEBUG
class
StartupCacheDebugOutputStream
final
:
public
nsIObjectOutputStream
{
~
StartupCacheDebugOutputStream
(
)
=
default
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBJECTOUTPUTSTREAM
StartupCacheDebugOutputStream
(
nsIObjectOutputStream
*
binaryStream
nsTHashSet
<
nsCOMPtr
<
nsISupports
>
>
*
objectMap
)
:
mBinaryStream
(
binaryStream
)
mObjectMap
(
objectMap
)
{
}
NS_FORWARD_SAFE_NSIBINARYOUTPUTSTREAM
(
mBinaryStream
)
NS_FORWARD_SAFE_NSIOUTPUTSTREAM
(
mBinaryStream
)
bool
CheckReferences
(
nsISupports
*
aObject
)
;
nsCOMPtr
<
nsIObjectOutputStream
>
mBinaryStream
;
nsTHashSet
<
nsCOMPtr
<
nsISupports
>
>
*
mObjectMap
;
}
;
#
endif
}
}
#
endif
