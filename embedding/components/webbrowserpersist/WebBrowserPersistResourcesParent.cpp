#
include
"
WebBrowserPersistResourcesParent
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
WebBrowserPersistResourcesParent
nsIWebBrowserPersistDocumentReceiver
)
WebBrowserPersistResourcesParent
:
:
WebBrowserPersistResourcesParent
(
nsIWebBrowserPersistDocument
*
aDocument
nsIWebBrowserPersistResourceVisitor
*
aVisitor
)
:
mDocument
(
aDocument
)
mVisitor
(
aVisitor
)
{
MOZ_ASSERT
(
aDocument
)
;
MOZ_ASSERT
(
aVisitor
)
;
}
WebBrowserPersistResourcesParent
:
:
~
WebBrowserPersistResourcesParent
(
)
{
}
void
WebBrowserPersistResourcesParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
aWhy
!
=
Deletion
&
&
mVisitor
)
{
mVisitor
-
>
EndVisit
(
mDocument
NS_ERROR_FAILURE
)
;
}
mVisitor
=
nullptr
;
}
bool
WebBrowserPersistResourcesParent
:
:
Recv__delete__
(
const
nsresult
&
aStatus
)
{
mVisitor
-
>
EndVisit
(
mDocument
aStatus
)
;
mVisitor
=
nullptr
;
return
true
;
}
bool
WebBrowserPersistResourcesParent
:
:
RecvVisitResource
(
const
nsCString
&
aURI
)
{
mVisitor
-
>
VisitResource
(
mDocument
aURI
)
;
return
true
;
}
bool
WebBrowserPersistResourcesParent
:
:
RecvVisitDocument
(
PWebBrowserPersistDocumentParent
*
aSubDocument
)
{
static_cast
<
WebBrowserPersistDocumentParent
*
>
(
aSubDocument
)
-
>
SetOnReady
(
this
)
;
return
true
;
}
NS_IMETHODIMP
WebBrowserPersistResourcesParent
:
:
OnDocumentReady
(
nsIWebBrowserPersistDocument
*
aSubDocument
)
{
if
(
!
mVisitor
)
{
return
NS_ERROR_FAILURE
;
}
mVisitor
-
>
VisitDocument
(
mDocument
aSubDocument
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistResourcesParent
:
:
OnError
(
nsresult
aFailure
)
{
return
NS_OK
;
}
}
