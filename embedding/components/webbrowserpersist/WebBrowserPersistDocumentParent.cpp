#
include
"
WebBrowserPersistDocumentParent
.
h
"
#
include
"
mozilla
/
ipc
/
InputStreamUtils
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
WebBrowserPersistResourcesParent
.
h
"
#
include
"
WebBrowserPersistSerializeParent
.
h
"
#
include
"
WebBrowserPersistRemoteDocument
.
h
"
namespace
mozilla
{
WebBrowserPersistDocumentParent
:
:
WebBrowserPersistDocumentParent
(
)
:
mReflection
(
nullptr
)
{
}
void
WebBrowserPersistDocumentParent
:
:
SetOnReady
(
nsIWebBrowserPersistDocumentReceiver
*
aOnReady
)
{
MOZ_ASSERT
(
aOnReady
)
;
MOZ_ASSERT
(
!
mOnReady
)
;
MOZ_ASSERT
(
!
mReflection
)
;
mOnReady
=
aOnReady
;
}
void
WebBrowserPersistDocumentParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
mReflection
)
{
mReflection
-
>
ActorDestroy
(
)
;
mReflection
=
nullptr
;
}
if
(
mOnReady
)
{
mOnReady
-
>
OnError
(
NS_ERROR_FAILURE
)
;
mOnReady
=
nullptr
;
}
}
WebBrowserPersistDocumentParent
:
:
~
WebBrowserPersistDocumentParent
(
)
{
MOZ_RELEASE_ASSERT
(
!
mReflection
)
;
MOZ_ASSERT
(
!
mOnReady
)
;
}
bool
WebBrowserPersistDocumentParent
:
:
RecvAttributes
(
const
Attrs
&
aAttrs
const
OptionalInputStreamParams
&
aPostData
nsTArray
<
FileDescriptor
>
&
&
aPostFiles
)
{
nsCOMPtr
<
nsIInputStream
>
postData
=
ipc
:
:
DeserializeInputStream
(
aPostData
aPostFiles
)
;
if
(
!
mOnReady
|
|
mReflection
)
{
return
false
;
}
mReflection
=
new
WebBrowserPersistRemoteDocument
(
this
aAttrs
postData
)
;
nsRefPtr
<
WebBrowserPersistRemoteDocument
>
reflection
=
mReflection
;
mOnReady
-
>
OnDocumentReady
(
reflection
)
;
mOnReady
=
nullptr
;
return
true
;
}
bool
WebBrowserPersistDocumentParent
:
:
RecvInitFailure
(
const
nsresult
&
aFailure
)
{
if
(
!
mOnReady
|
|
mReflection
)
{
return
false
;
}
mOnReady
-
>
OnError
(
aFailure
)
;
mOnReady
=
nullptr
;
return
Send__delete__
(
this
)
;
}
PWebBrowserPersistResourcesParent
*
WebBrowserPersistDocumentParent
:
:
AllocPWebBrowserPersistResourcesParent
(
)
{
MOZ_CRASH
(
"
Don
'
t
use
this
;
construct
the
actor
directly
and
AddRef
.
"
)
;
return
nullptr
;
}
bool
WebBrowserPersistDocumentParent
:
:
DeallocPWebBrowserPersistResourcesParent
(
PWebBrowserPersistResourcesParent
*
aActor
)
{
nsRefPtr
<
WebBrowserPersistResourcesParent
>
actor
=
already_AddRefed
<
WebBrowserPersistResourcesParent
>
(
static_cast
<
WebBrowserPersistResourcesParent
*
>
(
aActor
)
)
;
return
true
;
}
PWebBrowserPersistSerializeParent
*
WebBrowserPersistDocumentParent
:
:
AllocPWebBrowserPersistSerializeParent
(
const
WebBrowserPersistURIMap
&
aMap
const
nsCString
&
aRequestedContentType
const
uint32_t
&
aEncoderFlags
const
uint32_t
&
aWrapColumn
)
{
MOZ_CRASH
(
"
Don
'
t
use
this
;
construct
the
actor
directly
.
"
)
;
return
nullptr
;
}
bool
WebBrowserPersistDocumentParent
:
:
DeallocPWebBrowserPersistSerializeParent
(
PWebBrowserPersistSerializeParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
}
