#
ifndef
IEHTMLNODE_H
#
define
IEHTMLNODE_H
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
ifndef
__IHTMLDOMNode_INTERFACE_DEFINED__
#
define
__IHTMLDOMNode_INTERFACE_DEFINED__
MIDL_INTERFACE
(
"
3050f5da
-
98b5
-
11cf
-
bb82
-
00aa00bdce0b
"
)
IHTMLDOMNode
:
public
IDispatch
{
public
:
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeType
(
long
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_parentNode
(
IHTMLDOMNode
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
hasChildNodes
(
VARIANT_BOOL
*
fChildren
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_childNodes
(
IDispatch
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_attributes
(
IDispatch
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
insertBefore
(
IHTMLDOMNode
*
newChild
VARIANT
refChild
IHTMLDOMNode
*
*
node
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
removeChild
(
IHTMLDOMNode
*
oldChild
IHTMLDOMNode
*
*
node
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
replaceChild
(
IHTMLDOMNode
*
newChild
IHTMLDOMNode
*
oldChild
IHTMLDOMNode
*
*
node
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
cloneNode
(
VARIANT_BOOL
fDeep
IHTMLDOMNode
*
*
clonedNode
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
removeNode
(
VARIANT_BOOL
fDeep
IHTMLDOMNode
*
*
removed
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
swapNode
(
IHTMLDOMNode
*
otherNode
IHTMLDOMNode
*
*
swappedNode
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
replaceNode
(
IHTMLDOMNode
*
replacement
IHTMLDOMNode
*
*
replaced
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
appendChild
(
IHTMLDOMNode
*
newChild
IHTMLDOMNode
*
*
node
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeName
(
BSTR
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
put_nodeValue
(
VARIANT
v
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeValue
(
VARIANT
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_firstChild
(
IHTMLDOMNode
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_lastChild
(
IHTMLDOMNode
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_previousSibling
(
IHTMLDOMNode
*
*
p
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nextSibling
(
IHTMLDOMNode
*
*
p
)
=
0
;
}
;
#
endif
class
CNode
:
public
CComObjectRootEx
<
CComMultiThreadModel
>
{
protected
:
CNode
(
)
;
virtual
~
CNode
(
)
;
public
:
CNode
*
mParent
;
nsCOMPtr
<
nsIDOMNode
>
mDOMNode
;
static
HRESULT
FindFromDOMNode
(
nsIDOMNode
*
pIDOMNode
CNode
*
*
pNode
)
;
virtual
HRESULT
SetParent
(
CNode
*
pParent
)
;
virtual
HRESULT
SetDOMNode
(
nsIDOMNode
*
pIDOMNode
)
;
}
;
class
CIEHtmlDomNode
:
public
CNode
public
IDispatchImpl
<
IHTMLDOMNode
&
__uuidof
(
IHTMLDOMNode
)
&
LIBID_MSHTML
>
{
public
:
DECLARE_AGGREGATABLE
(
CIEHtmlDomNode
)
CIEHtmlDomNode
(
)
;
static
HRESULT
FindFromDOMNode
(
nsIDOMNode
*
pIDOMNode
IUnknown
*
*
pNode
)
;
static
HRESULT
FindOrCreateFromDOMNode
(
nsIDOMNode
*
pIDOMNode
IUnknown
*
*
pNode
)
;
static
HRESULT
CreateFromDOMNode
(
nsIDOMNode
*
pIDOMNode
IUnknown
*
*
pNode
)
;
virtual
HRESULT
SetDOMNode
(
nsIDOMNode
*
pIDOMNode
)
;
DECLARE_GET_CONTROLLING_UNKNOWN
(
)
protected
:
virtual
~
CIEHtmlDomNode
(
)
;
public
:
BEGIN_COM_MAP
(
CIEHtmlDomNode
)
COM_INTERFACE_ENTRY
(
IDispatch
)
COM_INTERFACE_ENTRY
(
IHTMLDOMNode
)
END_COM_MAP
(
)
static
HRESULT
WINAPI
QueryInterfaceOnNode
(
void
*
pv
REFIID
riid
LPVOID
*
ppv
DWORD
dw
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeType
(
long
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_parentNode
(
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
hasChildNodes
(
VARIANT_BOOL
__RPC_FAR
*
fChildren
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_childNodes
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_attributes
(
IDispatch
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
insertBefore
(
IHTMLDOMNode
__RPC_FAR
*
newChild
VARIANT
refChild
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
node
)
;
virtual
HRESULT
STDMETHODCALLTYPE
removeChild
(
IHTMLDOMNode
__RPC_FAR
*
oldChild
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
node
)
;
virtual
HRESULT
STDMETHODCALLTYPE
replaceChild
(
IHTMLDOMNode
__RPC_FAR
*
newChild
IHTMLDOMNode
__RPC_FAR
*
oldChild
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
node
)
;
virtual
HRESULT
STDMETHODCALLTYPE
cloneNode
(
VARIANT_BOOL
fDeep
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
clonedNode
)
;
virtual
HRESULT
STDMETHODCALLTYPE
removeNode
(
VARIANT_BOOL
fDeep
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
removed
)
;
virtual
HRESULT
STDMETHODCALLTYPE
swapNode
(
IHTMLDOMNode
__RPC_FAR
*
otherNode
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
swappedNode
)
;
virtual
HRESULT
STDMETHODCALLTYPE
replaceNode
(
IHTMLDOMNode
__RPC_FAR
*
replacement
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
replaced
)
;
virtual
HRESULT
STDMETHODCALLTYPE
appendChild
(
IHTMLDOMNode
__RPC_FAR
*
newChild
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
node
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeName
(
BSTR
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
put_nodeValue
(
VARIANT
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nodeValue
(
VARIANT
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_firstChild
(
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_lastChild
(
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_previousSibling
(
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
p
)
;
virtual
HRESULT
STDMETHODCALLTYPE
get_nextSibling
(
IHTMLDOMNode
__RPC_FAR
*
__RPC_FAR
*
p
)
;
}
;
typedef
CComObject
<
CIEHtmlDomNode
>
CIEHtmlDomNodeInstance
;
#
endif
