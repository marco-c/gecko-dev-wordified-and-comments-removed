#
ifndef
__MACERRORHANDLING__
#
define
__MACERRORHANDLING__
#
include
<
Types
.
h
>
#
define
DEBUGOFF
0
#
define
DEBUGWARN
1
#
define
DEBUGMIN
2
#
define
DEBUGON
3
#
define
DEBUGFULL
4
#
define
DEBUGSYM
6
#
ifndef
DEBUGLEVEL
#
define
DEBUGLEVEL
DEBUGOFF
#
endif
DEBUGLEVEL
#
define
resumeLabel
(
exception
)
#
define
traceon
(
(
DEBUGLEVEL
>
DEBUGWARN
)
&
&
defined
(
TRACEON
)
)
#
define
debugon
(
DEBUGLEVEL
>
DEBUGWARN
)
#
define
__DEBUGSMALL
(
(
DEBUGLEVEL
=
=
DEBUGMIN
)
|
|
\
(
DEBUGLEVEL
=
=
DEBUGSYM
)
)
#
if
DEBUGLEVEL
=
=
DEBUGMIN
#
define
__DebuggerBreak
Debugger
(
)
#
elif
DEBUGLEVEL
=
=
DEBUGSYM
#
define
__DebuggerBreak
SysBreak
(
)
#
endif
#
if
__DEBUGSMALL
#
define
check
(
assertion
)
\
do
{
\
if
(
assertion
)
;
\
else
__DebuggerBreak
;
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
check
(
assertion
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
"
#
assertion
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
check
(
assertion
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__FILE__
__LINE__
)
;
\
}
\
}
while
(
false
)
#
else
#
define
check
(
assertion
)
#
endif
#
if
__DEBUGSMALL
#
define
ncheck
(
assertion
)
\
do
{
\
if
(
assertion
)
__DebuggerBreak
;
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
ncheck
(
assertion
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
"
\
#
assertion
__privateAssertion
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
ncheck
(
assertion
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__privateAssertion
__FILE__
__LINE__
)
;
\
}
\
}
while
(
false
)
#
else
#
define
ncheck
(
assertion
)
#
endif
#
if
__DEBUGSMALL
#
define
check_action
(
assertion
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
__DebuggerBreak
;
\
{
action
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
check_action
(
assertion
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
"
#
assertion
)
;
\
{
action
}
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
check_action
(
assertion
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__FILE__
__LINE__
)
;
\
{
action
}
\
}
\
}
while
(
false
)
#
else
#
define
check_action
(
assertion
action
)
#
endif
#
if
__DEBUGSMALL
#
define
ncheck_action
(
assertion
action
)
\
do
{
\
if
(
assertion
)
{
\
__DebuggerBreak
;
\
{
action
}
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
ncheck_action
(
assertion
action
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
"
\
#
assertion
__privateAssertion
)
;
\
{
action
}
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
ncheck_action
(
assertion
action
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__privateAssertion
__FILE__
__LINE__
)
;
\
{
action
}
\
}
\
}
while
(
false
)
#
else
#
define
ncheck_action
(
assertion
action
)
#
endif
#
if
__DEBUGSMALL
#
define
require
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
__DebuggerBreak
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
require
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
"
\
#
assertion
#
exception
)
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
require
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
#
exception
__FILE__
__LINE__
)
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
else
#
define
require
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
endif
#
if
__DEBUGSMALL
#
define
nrequire
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
{
\
DebugStr
(
)
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
nrequire
(
assertion
exception
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
"
\
#
assertion
__privateAssertion
#
exception
)
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
nrequire
(
assertion
exception
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__privateAssertion
#
exception
__FILE__
\
__LINE__
)
;
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
else
#
define
nrequire
(
assertion
exception
)
\
do
{
\
if
(
assertion
)
{
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
endif
#
if
__DEBUGSMALL
#
define
require_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
__DebuggerBreak
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
require_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
"
\
#
assertion
#
exception
)
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
require_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
dprintf
(
notrace
"
Assertion
\
"
%
s
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
#
exception
__FILE__
__LINE__
)
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
else
#
define
require_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
endif
#
if
__DEBUGSMALL
#
define
nrequire_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
{
\
__DebuggerBreak
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGON
#
define
nrequire_action
(
assertion
exception
action
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
"
\
#
assertion
__privateAssertion
#
exception
)
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
elif
DEBUGLEVEL
=
=
DEBUGFULL
#
define
nrequire_action
(
assertion
exception
action
)
\
do
{
\
void
*
__privateAssertion
=
(
void
*
)
(
assertion
)
;
\
\
if
(
__privateAssertion
)
{
\
dprintf
(
notrace
"
Assertion
\
"
!
(
%
s
[
=
%
#
08X
]
)
\
"
Failed
\
n
"
\
"
Exception
\
"
%
s
\
"
Raised
\
n
"
\
"
File
:
%
s
\
n
"
\
"
Line
:
%
d
"
\
#
assertion
__privateAssertion
#
exception
__FILE__
\
__LINE__
)
;
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
else
#
define
nrequire_action
(
assertion
exception
action
)
\
do
{
\
if
(
assertion
)
{
\
{
action
}
\
goto
exception
;
\
resumeLabel
(
exception
)
;
\
}
\
}
while
(
false
)
#
endif
#
define
resume
(
exception
)
\
do
{
\
goto
resume_
#
#
exception
;
\
}
while
(
false
)
#
endif
