#
ifndef
_NETDB_H_
#
define
_NETDB_H_
#
define
_PATH_HEQUIV
"
/
etc
/
hosts
.
equiv
"
#
define
_PATH_HOSTS
"
/
etc
/
hosts
"
#
define
_PATH_NETWORKS
"
/
etc
/
networks
"
#
define
_PATH_PROTOCOLS
"
/
etc
/
protocols
"
#
define
_PATH_SERVICES
"
/
etc
/
services
"
struct
hostent
{
char
*
h_name
;
char
*
*
h_aliases
;
int
h_addrtype
;
int
h_length
;
char
*
*
h_addr_list
;
#
define
h_addr
h_addr_list
[
0
]
/
*
address
for
backward
compatiblity
*
/
}
;
struct
servent
{
char
*
s_name
;
char
*
*
s_aliases
;
int
s_port
;
char
*
s_proto
;
}
;
struct
protoent
{
char
*
p_name
;
char
*
*
p_aliases
;
int
p_proto
;
}
;
extern
int
h_errno
;
#
define
HOST_NOT_FOUND
1
/
*
Authoritative
Answer
Host
not
found
*
/
#
define
TRY_AGAIN
2
/
*
Non
-
Authoritive
Host
not
found
or
SERVERFAIL
*
/
#
define
NO_RECOVERY
3
/
*
Non
recoverable
errors
FORMERR
REFUSED
NOTIMP
*
/
#
define
NO_DATA
4
/
*
Valid
name
no
data
record
of
requested
type
*
/
#
define
NO_ADDRESS
NO_DATA
/
*
no
address
look
for
MX
record
*
/
#
include
<
sys
/
cdefs
.
h
>
__BEGIN_DECLS
void
endhostent
__P
(
(
void
)
)
;
void
endprotoent
__P
(
(
void
)
)
;
void
endservent
__P
(
(
void
)
)
;
struct
hostent
*
gethostbyaddr
__P
(
(
const
void
*
size_t
int
)
)
;
struct
hostent
*
gethostbyname
__P
(
(
const
char
*
)
)
;
struct
hostent
*
gethostent
__P
(
(
void
)
)
;
struct
protoent
*
getprotobyname
__P
(
(
const
char
*
)
)
;
struct
protoent
*
getprotobynumber
__P
(
(
int
)
)
;
struct
protoent
*
getprotoent
__P
(
(
void
)
)
;
struct
servent
*
getservbyname
__P
(
(
const
char
*
const
char
*
)
)
;
struct
servent
*
getservbyport
__P
(
(
int
const
char
*
)
)
;
struct
servent
*
getservent
__P
(
(
void
)
)
;
void
herror
__P
(
(
const
char
*
)
)
;
char
*
hstrerror
__P
(
(
int
)
)
;
void
setprotoent
__P
(
(
int
)
)
;
void
setservent
__P
(
(
int
)
)
;
__END_DECLS
#
endif
