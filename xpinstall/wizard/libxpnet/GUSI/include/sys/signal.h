#
ifndef
_SYS_SIGNAL_H_
#
define
_SYS_SIGNAL_H_
#
include
<
sys
/
cdefs
.
h
>
#
define
NSIG
32
/
*
counting
0
;
could
be
33
(
mask
is
1
-
32
)
*
/
#
ifndef
_ANSI_SOURCE
#
include
<
machine
/
signal
.
h
>
#
endif
__BEGIN_DECLS
typedef
void
(
*
__sig_handler
)
(
int
)
;
__END_DECLS
#
define
SIGINT
2
/
*
interrupt
*
/
#
define
SIGQUIT
3
/
*
quit
*
/
#
define
SIGABRT
6
/
*
abort
(
)
*
/
#
define
SIGFPE
8
/
*
floating
point
exception
*
/
#
define
SIGKILL
9
/
*
kill
(
cannot
be
caught
or
ignored
)
*
/
#
define
SIGSEGV
11
/
*
segmentation
violation
*
/
#
define
SIGPIPE
13
/
*
write
on
a
pipe
with
no
one
to
read
it
*
/
#
define
SIGALRM
14
/
*
alarm
clock
*
/
#
define
SIGTERM
15
/
*
software
termination
signal
from
kill
*
/
#
ifndef
_POSIX_SOURCE
#
define
SIGURG
16
/
*
urgent
condition
on
IO
channel
*
/
#
endif
#
define
SIGSTOP
17
/
*
sendable
stop
signal
not
from
tty
*
/
#
define
SIGTSTP
18
/
*
stop
signal
from
tty
*
/
#
define
SIGCONT
19
/
*
continue
a
stopped
process
*
/
#
define
SIGCHLD
20
/
*
to
parent
on
child
stop
or
exit
*
/
#
define
SIGTTIN
21
/
*
to
readers
pgrp
upon
background
tty
read
*
/
#
define
SIGTTOU
22
/
*
like
TTIN
for
output
if
(
tp
-
>
t_local
&
LTOSTOP
)
*
/
#
define
SIGHUP
24
/
*
hangup
*
/
#
define
SIGILL
25
/
*
illegal
instruction
(
not
reset
when
caught
)
*
/
#
ifndef
_POSIX_SOURCE
#
define
SIGIO
23
/
*
input
/
output
possible
signal
*
/
#
define
SIGPROF
27
/
*
profiling
time
alarm
*
/
#
define
SIGWINCH
28
/
*
window
size
changes
*
/
#
endif
#
define
SIGUSR1
30
/
*
user
defined
signal
1
*
/
#
define
SIGUSR2
31
/
*
user
defined
signal
2
*
/
#
define
SIG_DFL
(
__sig_handler
)
0
#
define
SIG_IGN
(
__sig_handler
)
1
#
define
SIG_ERR
(
__sig_handler
)
-
1
#
ifndef
_ANSI_SOURCE
typedef
unsigned
int
sigset_t
;
struct
sigaction
{
__sig_handler
sa_handler
;
sigset_t
sa_mask
;
int
sa_flags
;
}
;
#
define
SA_NOCLDSTOP
0x0008
/
*
do
not
generate
SIGCHLD
on
child
stop
*
/
#
define
SA_RESETHAND
0x0001
/
*
emulate
ANSI
signals
*
/
#
define
SA_RESTART
0x0002
/
*
restart
slow
system
calls
*
/
#
define
SA_NODEFER
0x0004
/
*
don
'
t
block
current
signal
*
/
#
define
SIG_BLOCK
1
/
*
block
specified
signal
set
*
/
#
define
SIG_UNBLOCK
2
/
*
unblock
specified
signal
set
*
/
#
define
SIG_SETMASK
3
/
*
set
specified
signal
set
*
/
#
endif
__BEGIN_DECLS
__sig_handler
signal
__P
(
(
int
__sig_handler
)
)
;
__END_DECLS
#
endif
