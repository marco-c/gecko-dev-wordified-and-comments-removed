#
ifndef
_NSDEQUE
#
define
_NSDEQUE
#
include
"
nscore
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
class
nsDequeFunctor
{
public
:
virtual
void
*
operator
(
)
(
void
*
aObject
)
=
0
;
virtual
~
nsDequeFunctor
(
)
{
}
}
;
class
nsDequeIterator
;
class
nsDeque
{
typedef
mozilla
:
:
fallible_t
fallible_t
;
public
:
explicit
nsDeque
(
nsDequeFunctor
*
aDeallocator
=
nullptr
)
;
~
nsDeque
(
)
;
inline
int32_t
GetSize
(
)
const
{
return
mSize
;
}
void
Push
(
void
*
aItem
)
{
if
(
!
Push
(
aItem
mozilla
:
:
fallible
)
)
{
NS_ABORT_OOM
(
mSize
*
sizeof
(
void
*
)
)
;
}
}
MOZ_WARN_UNUSED_RESULT
bool
Push
(
void
*
aItem
const
fallible_t
&
)
;
void
PushFront
(
void
*
aItem
)
{
if
(
!
PushFront
(
aItem
mozilla
:
:
fallible
)
)
{
NS_ABORT_OOM
(
mSize
*
sizeof
(
void
*
)
)
;
}
}
MOZ_WARN_UNUSED_RESULT
bool
PushFront
(
void
*
aItem
const
fallible_t
&
)
;
void
*
Pop
(
)
;
void
*
PopFront
(
)
;
void
*
Peek
(
)
;
void
*
PeekFront
(
)
;
void
*
ObjectAt
(
int
aIndex
)
const
;
void
Empty
(
)
;
void
Erase
(
)
;
void
ForEach
(
nsDequeFunctor
&
aFunctor
)
const
;
void
SetDeallocator
(
nsDequeFunctor
*
aDeallocator
)
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
protected
:
int32_t
mSize
;
int32_t
mCapacity
;
int32_t
mOrigin
;
nsDequeFunctor
*
mDeallocator
;
void
*
mBuffer
[
8
]
;
void
*
*
mData
;
private
:
nsDeque
(
const
nsDeque
&
aOther
)
;
nsDeque
&
operator
=
(
const
nsDeque
&
aOther
)
;
bool
GrowCapacity
(
)
;
}
;
#
endif
