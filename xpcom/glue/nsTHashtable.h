#
ifndef
nsTHashtable_h__
#
define
nsTHashtable_h__
#
include
"
nscore
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
new
>
template
<
class
EntryType
>
class
MOZ_NEEDS_NO_VTABLE_TYPE
nsTHashtable
{
typedef
mozilla
:
:
fallible_t
fallible_t
;
static_assert
(
mozilla
:
:
IsPointer
<
typename
EntryType
:
:
KeyTypePointer
>
:
:
value
"
KeyTypePointer
should
be
a
pointer
"
)
;
public
:
nsTHashtable
(
)
:
mTable
(
Ops
(
)
sizeof
(
EntryType
)
PLDHashTable
:
:
kDefaultInitialLength
)
{
}
explicit
nsTHashtable
(
uint32_t
aInitLength
)
:
mTable
(
Ops
(
)
sizeof
(
EntryType
)
aInitLength
)
{
}
~
nsTHashtable
(
)
;
nsTHashtable
(
nsTHashtable
<
EntryType
>
&
&
aOther
)
;
uint32_t
GetGeneration
(
)
const
{
return
mTable
.
Generation
(
)
;
}
typedef
typename
EntryType
:
:
KeyType
KeyType
;
typedef
typename
EntryType
:
:
KeyTypePointer
KeyTypePointer
;
uint32_t
Count
(
)
const
{
return
mTable
.
EntryCount
(
)
;
}
bool
IsEmpty
(
)
const
{
return
Count
(
)
=
=
0
;
}
EntryType
*
GetEntry
(
KeyType
aKey
)
const
{
return
static_cast
<
EntryType
*
>
(
const_cast
<
PLDHashTable
*
>
(
&
mTable
)
-
>
Search
(
EntryType
:
:
KeyToPointer
(
aKey
)
)
)
;
}
bool
Contains
(
KeyType
aKey
)
const
{
return
!
!
GetEntry
(
aKey
)
;
}
EntryType
*
PutEntry
(
KeyType
aKey
)
{
return
static_cast
<
EntryType
*
>
(
mTable
.
Add
(
EntryType
:
:
KeyToPointer
(
aKey
)
)
)
;
}
MOZ_WARN_UNUSED_RESULT
EntryType
*
PutEntry
(
KeyType
aKey
const
fallible_t
&
)
{
return
static_cast
<
EntryType
*
>
(
mTable
.
Add
(
EntryType
:
:
KeyToPointer
(
aKey
)
mozilla
:
:
fallible
)
)
;
}
void
RemoveEntry
(
KeyType
aKey
)
{
mTable
.
Remove
(
EntryType
:
:
KeyToPointer
(
aKey
)
)
;
}
void
RemoveEntry
(
EntryType
*
aEntry
)
{
mTable
.
RemoveEntry
(
aEntry
)
;
}
void
RawRemoveEntry
(
EntryType
*
aEntry
)
{
mTable
.
RawRemove
(
aEntry
)
;
}
class
Iterator
:
public
PLDHashTable
:
:
Iterator
{
public
:
typedef
PLDHashTable
:
:
Iterator
Base
;
explicit
Iterator
(
nsTHashtable
*
aTable
)
:
Base
(
&
aTable
-
>
mTable
)
{
}
Iterator
(
Iterator
&
&
aOther
)
:
Base
(
aOther
.
mTable
)
{
}
~
Iterator
(
)
{
}
EntryType
*
Get
(
)
const
{
return
static_cast
<
EntryType
*
>
(
Base
:
:
Get
(
)
)
;
}
private
:
Iterator
(
)
=
delete
;
Iterator
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
)
=
delete
;
Iterator
&
operator
=
(
const
Iterator
&
&
)
=
delete
;
}
;
Iterator
Iter
(
)
{
return
Iterator
(
this
)
;
}
Iterator
ConstIter
(
)
const
{
return
Iterator
(
const_cast
<
nsTHashtable
*
>
(
this
)
)
;
}
void
Clear
(
)
{
mTable
.
Clear
(
)
;
}
size_t
ShallowSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mTable
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
ShallowSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
auto
iter
=
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
n
+
=
(
*
iter
.
Get
(
)
)
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
return
n
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
void
SwapElements
(
nsTHashtable
<
EntryType
>
&
aOther
)
{
MOZ_ASSERT_IF
(
this
-
>
mTable
.
Ops
(
)
&
&
aOther
.
mTable
.
Ops
(
)
this
-
>
mTable
.
Ops
(
)
=
=
aOther
.
mTable
.
Ops
(
)
)
;
mozilla
:
:
Swap
(
this
-
>
mTable
aOther
.
mTable
)
;
}
#
ifdef
DEBUG
void
MarkImmutable
(
)
{
mTable
.
MarkImmutable
(
)
;
}
#
endif
protected
:
PLDHashTable
mTable
;
static
const
void
*
s_GetKey
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
;
static
PLDHashNumber
s_HashKey
(
PLDHashTable
*
aTable
const
void
*
aKey
)
;
static
bool
s_MatchEntry
(
PLDHashTable
*
aTable
const
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
;
static
void
s_CopyEntry
(
PLDHashTable
*
aTable
const
PLDHashEntryHdr
*
aFrom
PLDHashEntryHdr
*
aTo
)
;
static
void
s_ClearEntry
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
;
static
void
s_InitEntry
(
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
;
private
:
nsTHashtable
(
nsTHashtable
<
EntryType
>
&
aToCopy
)
=
delete
;
static
const
PLDHashTableOps
*
Ops
(
)
;
nsTHashtable
<
EntryType
>
&
operator
=
(
nsTHashtable
<
EntryType
>
&
aToEqual
)
=
delete
;
}
;
template
<
class
EntryType
>
nsTHashtable
<
EntryType
>
:
:
nsTHashtable
(
nsTHashtable
<
EntryType
>
&
&
aOther
)
:
mTable
(
mozilla
:
:
Move
(
aOther
.
mTable
)
)
{
MOZ_MAKE_MEM_UNDEFINED
(
&
aOther
.
mTable
sizeof
(
aOther
.
mTable
)
)
;
}
template
<
class
EntryType
>
nsTHashtable
<
EntryType
>
:
:
~
nsTHashtable
(
)
{
}
template
<
class
EntryType
>
const
PLDHashTableOps
*
nsTHashtable
<
EntryType
>
:
:
Ops
(
)
{
static
const
PLDHashTableOps
sOps
=
{
s_HashKey
s_MatchEntry
EntryType
:
:
ALLOW_MEMMOVE
?
PLDHashTable
:
:
MoveEntryStub
:
s_CopyEntry
s_ClearEntry
s_InitEntry
}
;
return
&
sOps
;
}
template
<
class
EntryType
>
PLDHashNumber
nsTHashtable
<
EntryType
>
:
:
s_HashKey
(
PLDHashTable
*
aTable
const
void
*
aKey
)
{
return
EntryType
:
:
HashKey
(
static_cast
<
const
KeyTypePointer
>
(
aKey
)
)
;
}
template
<
class
EntryType
>
bool
nsTHashtable
<
EntryType
>
:
:
s_MatchEntry
(
PLDHashTable
*
aTable
const
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
{
return
(
(
const
EntryType
*
)
aEntry
)
-
>
KeyEquals
(
static_cast
<
const
KeyTypePointer
>
(
aKey
)
)
;
}
template
<
class
EntryType
>
void
nsTHashtable
<
EntryType
>
:
:
s_CopyEntry
(
PLDHashTable
*
aTable
const
PLDHashEntryHdr
*
aFrom
PLDHashEntryHdr
*
aTo
)
{
EntryType
*
fromEntry
=
const_cast
<
EntryType
*
>
(
static_cast
<
const
EntryType
*
>
(
aFrom
)
)
;
new
(
aTo
)
EntryType
(
mozilla
:
:
Move
(
*
fromEntry
)
)
;
fromEntry
-
>
~
EntryType
(
)
;
}
template
<
class
EntryType
>
void
nsTHashtable
<
EntryType
>
:
:
s_ClearEntry
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
{
static_cast
<
EntryType
*
>
(
aEntry
)
-
>
~
EntryType
(
)
;
}
template
<
class
EntryType
>
void
nsTHashtable
<
EntryType
>
:
:
s_InitEntry
(
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
{
new
(
aEntry
)
EntryType
(
static_cast
<
KeyTypePointer
>
(
aKey
)
)
;
}
class
nsCycleCollectionTraversalCallback
;
template
<
class
EntryType
>
inline
void
ImplCycleCollectionUnlink
(
nsTHashtable
<
EntryType
>
&
aField
)
{
aField
.
Clear
(
)
;
}
template
<
class
EntryType
>
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
nsTHashtable
<
EntryType
>
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
for
(
auto
iter
=
aField
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
EntryType
*
entry
=
iter
.
Get
(
)
;
ImplCycleCollectionTraverse
(
aCallback
*
entry
aName
aFlags
)
;
}
}
#
endif
