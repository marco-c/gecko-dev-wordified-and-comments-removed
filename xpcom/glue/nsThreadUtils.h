#
ifndef
nsThreadUtils_h__
#
define
nsThreadUtils_h__
#
include
"
prthread
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsIThreadManager
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsICancelableRunnable
.
h
"
#
include
"
nsStringGlue
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
IndexSequence
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
extern
void
NS_SetThreadName
(
nsIThread
*
aThread
const
nsACString
&
aName
)
;
template
<
size_t
LEN
>
inline
void
NS_SetThreadName
(
nsIThread
*
aThread
const
char
(
&
aName
)
[
LEN
]
)
{
static_assert
(
LEN
<
=
16
"
Thread
name
must
be
no
more
than
16
characters
"
)
;
NS_SetThreadName
(
aThread
nsDependentCString
(
aName
)
)
;
}
extern
NS_METHOD
NS_NewThread
(
nsIThread
*
*
aResult
nsIRunnable
*
aInitialEvent
=
nullptr
uint32_t
aStackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
;
template
<
size_t
LEN
>
inline
NS_METHOD
NS_NewNamedThread
(
const
char
(
&
aName
)
[
LEN
]
nsIThread
*
*
aResult
nsIRunnable
*
aInitialEvent
=
nullptr
uint32_t
aStackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
{
nsCOMPtr
<
nsIThread
>
thread
;
nsresult
rv
=
NS_NewThread
(
getter_AddRefs
(
thread
)
nullptr
aStackSize
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
NS_SetThreadName
<
LEN
>
(
thread
aName
)
;
if
(
aInitialEvent
)
{
rv
=
thread
-
>
Dispatch
(
aInitialEvent
NS_DISPATCH_NORMAL
)
;
NS_WARN_IF_FALSE
(
NS_SUCCEEDED
(
rv
)
"
Initial
event
dispatch
failed
"
)
;
}
*
aResult
=
nullptr
;
thread
.
swap
(
*
aResult
)
;
return
rv
;
}
extern
NS_METHOD
NS_GetCurrentThread
(
nsIThread
*
*
aResult
)
;
extern
NS_METHOD
NS_DispatchToCurrentThread
(
nsIRunnable
*
aEvent
)
;
extern
NS_METHOD
NS_DispatchToCurrentThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
)
;
extern
NS_METHOD
NS_DispatchToMainThread
(
nsIRunnable
*
aEvent
uint32_t
aDispatchFlags
=
NS_DISPATCH_NORMAL
)
;
extern
NS_METHOD
NS_DispatchToMainThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aDispatchFlags
=
NS_DISPATCH_NORMAL
)
;
#
ifndef
XPCOM_GLUE_AVOID_NSPR
extern
NS_METHOD
NS_ProcessPendingEvents
(
nsIThread
*
aThread
PRIntervalTime
aTimeout
=
PR_INTERVAL_NO_TIMEOUT
)
;
#
endif
extern
bool
NS_HasPendingEvents
(
nsIThread
*
aThread
=
nullptr
)
;
extern
bool
NS_ProcessNextEvent
(
nsIThread
*
aThread
=
nullptr
bool
aMayWait
=
true
)
;
inline
already_AddRefed
<
nsIThread
>
do_GetCurrentThread
(
)
{
nsIThread
*
thread
=
nullptr
;
NS_GetCurrentThread
(
&
thread
)
;
return
already_AddRefed
<
nsIThread
>
(
thread
)
;
}
inline
already_AddRefed
<
nsIThread
>
do_GetMainThread
(
)
{
nsIThread
*
thread
=
nullptr
;
NS_GetMainThread
(
&
thread
)
;
return
already_AddRefed
<
nsIThread
>
(
thread
)
;
}
#
ifdef
MOZILLA_INTERNAL_API
extern
nsIThread
*
NS_GetCurrentThread
(
)
;
#
endif
#
ifndef
XPCOM_GLUE_AVOID_NSPR
namespace
mozilla
{
class
Runnable
:
public
nsIRunnable
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIRUNNABLE
Runnable
(
)
{
}
protected
:
virtual
~
Runnable
(
)
{
}
private
:
Runnable
(
const
Runnable
&
)
=
delete
;
Runnable
&
operator
=
(
const
Runnable
&
)
=
delete
;
Runnable
&
operator
=
(
const
Runnable
&
&
)
=
delete
;
}
;
class
CancelableRunnable
:
public
Runnable
public
nsICancelableRunnable
{
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
nsresult
Cancel
(
)
override
;
CancelableRunnable
(
)
{
}
protected
:
virtual
~
CancelableRunnable
(
)
{
}
private
:
CancelableRunnable
(
const
CancelableRunnable
&
)
=
delete
;
CancelableRunnable
&
operator
=
(
const
CancelableRunnable
&
)
=
delete
;
CancelableRunnable
&
operator
=
(
const
CancelableRunnable
&
&
)
=
delete
;
}
;
namespace
detail
{
template
<
typename
StoredFunction
>
class
RunnableFunction
:
public
Runnable
{
public
:
template
<
typename
F
>
explicit
RunnableFunction
(
F
&
&
aFunction
)
:
mFunction
(
Forward
<
F
>
(
aFunction
)
)
{
}
NS_IMETHOD
Run
(
)
override
{
static_assert
(
IsVoid
<
decltype
(
mFunction
(
)
)
>
:
:
value
"
The
lambda
must
return
void
!
"
)
;
mFunction
(
)
;
return
NS_OK
;
}
private
:
StoredFunction
mFunction
;
}
;
}
}
template
<
typename
Function
>
already_AddRefed
<
mozilla
:
:
Runnable
>
NS_NewRunnableFunction
(
Function
&
&
aFunction
)
{
return
do_AddRef
(
new
mozilla
:
:
detail
:
:
RunnableFunction
<
typename
mozilla
:
:
RemoveReference
<
Function
>
:
:
Type
>
(
mozilla
:
:
Forward
<
Function
>
(
aFunction
)
)
)
;
}
template
<
class
ClassType
typename
ReturnType
=
void
bool
Owning
=
true
bool
Cancelable
=
false
>
class
nsRunnableMethod
:
public
mozilla
:
:
Conditional
<
!
Cancelable
mozilla
:
:
Runnable
mozilla
:
:
CancelableRunnable
>
:
:
Type
{
public
:
virtual
void
Revoke
(
)
=
0
;
template
<
typename
OtherReturnType
>
class
ReturnTypeEnforcer
{
public
:
typedef
int
ReturnTypeIsSafe
;
}
;
template
<
class
T
>
class
ReturnTypeEnforcer
<
already_AddRefed
<
T
>
>
{
}
;
typedef
typename
ReturnTypeEnforcer
<
ReturnType
>
:
:
ReturnTypeIsSafe
check
;
}
;
template
<
class
ClassType
bool
Owning
>
struct
nsRunnableMethodReceiver
{
RefPtr
<
ClassType
>
mObj
;
explicit
nsRunnableMethodReceiver
(
ClassType
*
aObj
)
:
mObj
(
aObj
)
{
}
~
nsRunnableMethodReceiver
(
)
{
Revoke
(
)
;
}
ClassType
*
Get
(
)
const
{
return
mObj
.
get
(
)
;
}
void
Revoke
(
)
{
mObj
=
nullptr
;
}
}
;
template
<
class
ClassType
>
struct
nsRunnableMethodReceiver
<
ClassType
false
>
{
ClassType
*
MOZ_NON_OWNING_REF
mObj
;
explicit
nsRunnableMethodReceiver
(
ClassType
*
aObj
)
:
mObj
(
aObj
)
{
}
ClassType
*
Get
(
)
const
{
return
mObj
;
}
void
Revoke
(
)
{
mObj
=
nullptr
;
}
}
;
template
<
typename
Method
bool
Owning
bool
Cancelable
>
struct
nsRunnableMethodTraits
;
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
R
(
C
:
:
*
)
(
As
.
.
.
)
Owning
Cancelable
>
{
typedef
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
R
(
C
:
:
*
)
(
As
.
.
.
)
const
Owning
Cancelable
>
{
typedef
const
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
#
ifdef
NS_HAVE_STDCALL
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
R
(
__stdcall
C
:
:
*
)
(
As
.
.
.
)
Owning
Cancelable
>
{
typedef
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
>
struct
nsRunnableMethodTraits
<
R
(
NS_STDCALL
C
:
:
*
)
(
)
Owning
Cancelable
>
{
typedef
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
R
(
__stdcall
C
:
:
*
)
(
As
.
.
.
)
const
Owning
Cancelable
>
{
typedef
const
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
template
<
class
C
typename
R
bool
Owning
bool
Cancelable
>
struct
nsRunnableMethodTraits
<
R
(
NS_STDCALL
C
:
:
*
)
(
)
const
Owning
Cancelable
>
{
typedef
const
C
class_type
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Cancelable
>
base_type
;
static
const
bool
can_cancel
=
Cancelable
;
}
;
#
endif
template
<
typename
T
>
struct
IsParameterStorageClass
:
public
mozilla
:
:
FalseType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByValue
{
typedef
T
stored_type
;
typedef
T
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByValue
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByValue
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByConstLRef
{
typedef
T
stored_type
;
typedef
const
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByConstLRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByConstLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByLRef
{
typedef
T
stored_type
;
typedef
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByLRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByRRef
{
typedef
T
stored_type
;
typedef
T
&
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByRRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
mozilla
:
:
Move
(
m
)
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByRRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreRefPassByLRef
{
typedef
T
&
stored_type
;
typedef
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreRefPassByLRef
(
A
&
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreRefPassByLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreConstRefPassByConstLRef
{
typedef
const
T
&
stored_type
;
typedef
const
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreConstRefPassByConstLRef
(
const
A
&
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreConstRefPassByConstLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StorensRefPtrPassByPtr
{
typedef
RefPtr
<
T
>
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StorensRefPtrPassByPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
.
get
(
)
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StorensRefPtrPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StorePtrPassByPtr
{
typedef
T
*
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StorePtrPassByPtr
(
A
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StorePtrPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreConstPtrPassByConstPtr
{
typedef
const
T
*
stored_type
;
typedef
const
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreConstPtrPassByConstPtr
(
A
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreConstPtrPassByConstPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByConstPtr
{
typedef
T
stored_type
;
typedef
const
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByConstPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
&
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByConstPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByPtr
{
typedef
T
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
&
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
namespace
detail
{
template
<
typename
TWithoutPointer
>
struct
NonnsISupportsPointerStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsConst
<
TWithoutPointer
>
:
:
value
StoreConstPtrPassByConstPtr
<
typename
mozilla
:
:
RemoveConst
<
TWithoutPointer
>
:
:
Type
>
StorePtrPassByPtr
<
TWithoutPointer
>
>
{
}
;
template
<
typename
>
struct
SFINAE1True
:
mozilla
:
:
TrueType
{
}
;
template
<
class
T
>
static
auto
HasRefCountMethodsTest
(
int
)
-
>
SFINAE1True
<
decltype
(
mozilla
:
:
DeclVal
<
T
>
(
)
.
AddRef
(
)
mozilla
:
:
DeclVal
<
T
>
(
)
.
Release
(
)
)
>
;
template
<
class
>
static
auto
HasRefCountMethodsTest
(
long
)
-
>
mozilla
:
:
FalseType
;
template
<
class
T
>
struct
HasRefCountMethods
:
decltype
(
HasRefCountMethodsTest
<
T
>
(
0
)
)
{
}
;
template
<
typename
T
>
struct
IsRefcountedSmartPointer
:
public
mozilla
:
:
FalseType
{
}
;
template
<
typename
T
>
struct
IsRefcountedSmartPointer
<
RefPtr
<
T
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
IsRefcountedSmartPointer
<
nsCOMPtr
<
T
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StripSmartPointer
{
typedef
void
Type
;
}
;
template
<
typename
T
>
struct
StripSmartPointer
<
RefPtr
<
T
>
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
struct
StripSmartPointer
<
nsCOMPtr
<
T
>
>
{
typedef
T
Type
;
}
;
template
<
typename
TWithoutPointer
>
struct
PointerStorageClass
:
mozilla
:
:
Conditional
<
HasRefCountMethods
<
TWithoutPointer
>
:
:
value
StorensRefPtrPassByPtr
<
TWithoutPointer
>
typename
NonnsISupportsPointerStorageClass
<
TWithoutPointer
>
:
:
Type
>
{
}
;
template
<
typename
TWithoutRef
>
struct
LValueReferenceStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsConst
<
TWithoutRef
>
:
:
value
StoreConstRefPassByConstLRef
<
typename
mozilla
:
:
RemoveConst
<
TWithoutRef
>
:
:
Type
>
StoreRefPassByLRef
<
TWithoutRef
>
>
{
}
;
template
<
typename
T
>
struct
SmartPointerStorageClass
:
mozilla
:
:
Conditional
<
IsRefcountedSmartPointer
<
T
>
:
:
value
StorensRefPtrPassByPtr
<
typename
StripSmartPointer
<
T
>
:
:
Type
>
StoreCopyPassByValue
<
T
>
>
{
}
;
template
<
typename
T
>
struct
NonLValueReferenceStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsRvalueReference
<
T
>
:
:
value
StoreCopyPassByRRef
<
typename
mozilla
:
:
RemoveReference
<
T
>
:
:
Type
>
typename
SmartPointerStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
NonPointerStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsLvalueReference
<
T
>
:
:
value
typename
LValueReferenceStorageClass
<
typename
mozilla
:
:
RemoveReference
<
T
>
:
:
Type
>
:
:
Type
typename
NonLValueReferenceStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
NonParameterStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsPointer
<
T
>
:
:
value
typename
PointerStorageClass
<
typename
mozilla
:
:
RemovePointer
<
T
>
:
:
Type
>
:
:
Type
typename
NonPointerStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
ParameterStorage
:
mozilla
:
:
Conditional
<
IsParameterStorageClass
<
T
>
:
:
value
T
typename
NonParameterStorageClass
<
T
>
:
:
Type
>
{
}
;
}
namespace
mozilla
{
namespace
detail
{
template
<
typename
.
.
.
Ts
>
struct
RunnableMethodArguments
final
{
Tuple
<
typename
:
:
detail
:
:
ParameterStorage
<
Ts
>
:
:
Type
.
.
.
>
mArguments
;
template
<
typename
.
.
.
As
>
explicit
RunnableMethodArguments
(
As
&
&
.
.
.
aArguments
)
:
mArguments
(
Forward
<
As
>
(
aArguments
)
.
.
.
)
{
}
template
<
typename
C
typename
M
typename
.
.
.
Args
size_t
.
.
.
Indices
>
static
auto
applyImpl
(
C
*
o
M
m
Tuple
<
Args
.
.
.
>
&
args
IndexSequence
<
Indices
.
.
.
>
)
-
>
decltype
(
(
(
*
o
)
.
*
m
)
(
Get
<
Indices
>
(
args
)
.
PassAsParameter
(
)
.
.
.
)
)
{
return
(
(
*
o
)
.
*
m
)
(
Get
<
Indices
>
(
args
)
.
PassAsParameter
(
)
.
.
.
)
;
}
template
<
class
C
typename
M
>
auto
apply
(
C
*
o
M
m
)
-
>
decltype
(
applyImpl
(
o
m
mArguments
typename
IndexSequenceFor
<
Ts
.
.
.
>
:
:
Type
(
)
)
)
{
return
applyImpl
(
o
m
mArguments
typename
IndexSequenceFor
<
Ts
.
.
.
>
:
:
Type
(
)
)
;
}
}
;
template
<
typename
Method
bool
Owning
bool
Cancelable
typename
.
.
.
Storages
>
class
RunnableMethodImpl
final
:
public
:
:
nsRunnableMethodTraits
<
Method
Owning
Cancelable
>
:
:
base_type
{
typedef
typename
:
:
nsRunnableMethodTraits
<
Method
Owning
Cancelable
>
:
:
class_type
ClassType
;
:
:
nsRunnableMethodReceiver
<
ClassType
Owning
>
mReceiver
;
Method
mMethod
;
RunnableMethodArguments
<
Storages
.
.
.
>
mArgs
;
private
:
virtual
~
RunnableMethodImpl
(
)
{
Revoke
(
)
;
}
;
public
:
template
<
typename
.
.
.
Args
>
explicit
RunnableMethodImpl
(
ClassType
*
aObj
Method
aMethod
Args
&
&
.
.
.
aArgs
)
:
mReceiver
(
aObj
)
mMethod
(
aMethod
)
mArgs
(
Forward
<
Args
>
(
aArgs
)
.
.
.
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
Storages
and
Args
should
have
equal
sizes
"
)
;
}
NS_IMETHOD
Run
(
)
{
if
(
MOZ_LIKELY
(
mReceiver
.
Get
(
)
)
)
{
mArgs
.
apply
(
mReceiver
.
Get
(
)
mMethod
)
;
}
return
NS_OK
;
}
nsresult
Cancel
(
)
{
static_assert
(
Cancelable
"
Don
'
t
use
me
!
"
)
;
Revoke
(
)
;
return
NS_OK
;
}
void
Revoke
(
)
{
mReceiver
.
Revoke
(
)
;
}
}
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
true
false
>
:
:
base_type
>
NewRunnableMethod
(
PtrType
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
true
false
>
(
aPtr
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
true
true
>
:
:
base_type
>
NewCancelableRunnableMethod
(
PtrType
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
true
true
>
(
aPtr
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
false
false
>
:
:
base_type
>
NewNonOwningRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
false
false
>
(
aPtr
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
false
true
>
:
:
base_type
>
NewNonOwningCancelableRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
false
true
>
(
aPtr
aMethod
)
)
;
}
template
<
typename
.
.
.
Storages
typename
Method
typename
PtrType
typename
.
.
.
Args
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
true
false
>
:
:
base_type
>
NewRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
true
false
Storages
.
.
.
>
(
aPtr
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
Method
typename
PtrType
typename
.
.
.
Args
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
false
false
>
:
:
base_type
>
NewNonOwningRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
false
false
Storages
.
.
.
>
(
aPtr
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
Method
typename
PtrType
typename
.
.
.
Args
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
true
true
>
:
:
base_type
>
NewCancelableRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
true
true
Storages
.
.
.
>
(
aPtr
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
Method
typename
PtrType
typename
.
.
.
Args
>
already_AddRefed
<
typename
:
:
nsRunnableMethodTraits
<
Method
false
true
>
:
:
base_type
>
NewNonOwningCancelableRunnableMethod
(
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
RunnableMethodImpl
<
Method
false
true
Storages
.
.
.
>
(
aPtr
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
}
#
endif
template
<
class
T
>
class
nsRevocableEventPtr
{
public
:
nsRevocableEventPtr
(
)
:
mEvent
(
nullptr
)
{
}
~
nsRevocableEventPtr
(
)
{
Revoke
(
)
;
}
const
nsRevocableEventPtr
&
operator
=
(
T
*
aEvent
)
{
if
(
mEvent
!
=
aEvent
)
{
Revoke
(
)
;
mEvent
=
aEvent
;
}
return
*
this
;
}
const
nsRevocableEventPtr
&
operator
=
(
already_AddRefed
<
T
>
aEvent
)
{
RefPtr
<
T
>
event
=
aEvent
;
if
(
mEvent
!
=
event
)
{
Revoke
(
)
;
mEvent
=
event
.
forget
(
)
;
}
return
*
this
;
}
void
Revoke
(
)
{
if
(
mEvent
)
{
mEvent
-
>
Revoke
(
)
;
mEvent
=
nullptr
;
}
}
void
Forget
(
)
{
mEvent
=
nullptr
;
}
bool
IsPending
(
)
{
return
mEvent
!
=
nullptr
;
}
T
*
get
(
)
{
return
mEvent
;
}
private
:
nsRevocableEventPtr
(
const
nsRevocableEventPtr
&
)
;
nsRevocableEventPtr
&
operator
=
(
const
nsRevocableEventPtr
&
)
;
RefPtr
<
T
>
mEvent
;
}
;
class
nsThreadPoolNaming
{
public
:
nsThreadPoolNaming
(
)
:
mCounter
(
0
)
{
}
void
SetThreadPoolName
(
const
nsACString
&
aPoolName
nsIThread
*
aThread
=
nullptr
)
;
private
:
mozilla
:
:
Atomic
<
uint32_t
>
mCounter
;
nsThreadPoolNaming
(
const
nsThreadPoolNaming
&
)
=
delete
;
void
operator
=
(
const
nsThreadPoolNaming
&
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
nsAutoLowPriorityIO
{
public
:
nsAutoLowPriorityIO
(
)
;
~
nsAutoLowPriorityIO
(
)
;
private
:
bool
lowIOPrioritySet
;
#
if
defined
(
XP_MACOSX
)
int
oldPriority
;
#
endif
}
;
void
NS_SetMainThread
(
)
;
#
endif
