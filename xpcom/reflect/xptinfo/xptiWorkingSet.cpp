#
include
"
mozilla
/
XPTInterfaceInfoManager
.
h
"
#
include
"
xptiprivate
.
h
"
#
include
"
nsString
.
h
"
using
namespace
mozilla
;
static
const
size_t
XPTI_ARENA8_BLOCK_SIZE
=
16
*
1024
;
static
const
size_t
XPTI_ARENA1_BLOCK_SIZE
=
8
*
1024
;
static
const
uint32_t
XPTI_HASHTABLE_LENGTH
=
1024
;
XPTInterfaceInfoManager
:
:
xptiWorkingSet
:
:
xptiWorkingSet
(
)
:
mTableReentrantMonitor
(
"
xptiWorkingSet
:
:
mTableReentrantMonitor
"
)
mIIDTable
(
XPTI_HASHTABLE_LENGTH
)
mNameTable
(
XPTI_HASHTABLE_LENGTH
)
{
MOZ_COUNT_CTOR
(
xptiWorkingSet
)
;
gXPTIStructArena
=
XPT_NewArena
(
XPTI_ARENA8_BLOCK_SIZE
XPTI_ARENA1_BLOCK_SIZE
)
;
}
void
XPTInterfaceInfoManager
:
:
xptiWorkingSet
:
:
InvalidateInterfaceInfos
(
)
{
ReentrantMonitorAutoEnter
monitor
(
mTableReentrantMonitor
)
;
for
(
auto
iter
=
mNameTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
xptiInterfaceEntry
*
entry
=
iter
.
UserData
(
)
;
entry
-
>
LockedInvalidateInterfaceInfo
(
)
;
}
}
XPTInterfaceInfoManager
:
:
xptiWorkingSet
:
:
~
xptiWorkingSet
(
)
{
MOZ_COUNT_DTOR
(
xptiWorkingSet
)
;
#
ifdef
NS_FREE_PERMANENT_DATA
XPT_DestroyArena
(
gXPTIStructArena
)
;
#
endif
}
XPTArena
*
gXPTIStructArena
;
