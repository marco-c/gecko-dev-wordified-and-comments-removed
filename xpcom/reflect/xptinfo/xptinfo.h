#
ifndef
xptinfo_h
#
define
xptinfo_h
#
include
<
stdint
.
h
>
#
include
"
nsID
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
NativePropertyHooks
;
}
}
struct
nsXPTInterfaceInfo
;
struct
nsXPTType
;
struct
nsXPTParamInfo
;
struct
nsXPTMethodInfo
;
struct
nsXPTDOMObjectInfo
;
namespace
xpt
{
namespace
detail
{
inline
const
nsXPTInterfaceInfo
*
GetInterface
(
uint16_t
aIndex
)
;
inline
const
nsXPTType
&
GetType
(
uint16_t
aIndex
)
;
inline
const
nsXPTParamInfo
&
GetParam
(
uint16_t
aIndex
)
;
inline
const
nsXPTMethodInfo
&
GetMethod
(
uint16_t
aIndex
)
;
inline
const
nsXPTDOMObjectInfo
&
GetDOMObjectInfo
(
uint16_t
aIndex
)
;
inline
const
char
*
GetString
(
uint32_t
aIndex
)
;
extern
const
uint16_t
sInterfacesSize
;
}
}
struct
nsXPTInterfaceInfo
{
static
const
nsXPTInterfaceInfo
*
ByIID
(
const
nsIID
&
aIID
)
;
static
const
nsXPTInterfaceInfo
*
ByName
(
const
char
*
aName
)
;
static
const
nsXPTInterfaceInfo
*
ByIndex
(
uint16_t
aIndex
)
{
return
xpt
:
:
detail
:
:
GetInterface
(
aIndex
+
1
)
;
}
static
uint16_t
InterfaceCount
(
)
{
return
xpt
:
:
detail
:
:
sInterfacesSize
;
}
bool
IsScriptable
(
)
const
{
return
true
;
}
bool
IsFunction
(
)
const
{
return
mFunction
;
}
bool
IsBuiltinClass
(
)
const
{
return
mBuiltinClass
;
}
bool
IsMainProcessScriptableOnly
(
)
const
{
return
mMainProcessScriptableOnly
;
}
const
char
*
Name
(
)
const
{
return
xpt
:
:
detail
:
:
GetString
(
mName
)
;
}
const
nsIID
&
IID
(
)
const
{
return
mIID
;
}
const
nsXPTInterfaceInfo
*
GetParent
(
)
const
{
return
xpt
:
:
detail
:
:
GetInterface
(
mParent
)
;
}
bool
HasAncestor
(
const
nsIID
&
aIID
)
const
;
uint16_t
ConstantCount
(
)
const
;
const
char
*
Constant
(
uint16_t
aIndex
JS
:
:
MutableHandleValue
aConst
)
const
;
uint16_t
MethodCount
(
)
const
{
return
mNumMethods
;
}
const
nsXPTMethodInfo
&
Method
(
uint16_t
aIndex
)
const
;
nsresult
GetName
(
char
*
*
aName
)
const
;
nsresult
IsScriptable
(
bool
*
aRes
)
const
;
nsresult
IsBuiltinClass
(
bool
*
aRes
)
const
;
nsresult
GetParent
(
const
nsXPTInterfaceInfo
*
*
aParent
)
const
;
nsresult
GetMethodCount
(
uint16_t
*
aMethodCount
)
const
;
nsresult
GetConstantCount
(
uint16_t
*
aConstantCount
)
const
;
nsresult
GetMethodInfo
(
uint16_t
aIndex
const
nsXPTMethodInfo
*
*
aInfo
)
const
;
nsresult
GetConstant
(
uint16_t
aIndex
JS
:
:
MutableHandleValue
constant
char
*
*
aName
)
const
;
nsresult
GetTypeForParam
(
uint16_t
aMethodIndex
const
nsXPTParamInfo
*
aParam
uint16_t
aDimension
nsXPTType
*
aRetval
)
const
;
nsresult
GetSizeIsArgNumberForParam
(
uint16_t
aMethodIndex
const
nsXPTParamInfo
*
aParam
uint16_t
aDimension
uint8_t
*
aRetval
)
const
;
nsresult
GetInterfaceIsArgNumberForParam
(
uint16_t
aMethodIndex
const
nsXPTParamInfo
*
aParam
uint8_t
*
aRetval
)
const
;
nsresult
IsIID
(
const
nsIID
*
aIID
bool
*
aIs
)
const
;
nsresult
GetNameShared
(
const
char
*
*
aName
)
const
;
nsresult
GetIIDShared
(
const
nsIID
*
*
aIID
)
const
;
nsresult
IsFunction
(
bool
*
aRetval
)
const
;
nsresult
HasAncestor
(
const
nsIID
*
aIID
bool
*
aRetval
)
const
;
nsresult
GetIIDForParamNoAlloc
(
uint16_t
aMethodIndex
const
nsXPTParamInfo
*
aParam
nsIID
*
aIID
)
const
;
nsresult
IsMainProcessScriptableOnly
(
bool
*
aRetval
)
const
;
bool
EnsureResolved
(
)
const
{
return
!
mIsShim
;
}
nsID
mIID
;
uint32_t
mName
;
uint16_t
mParent
:
14
;
uint16_t
mBuiltinClass
:
1
;
uint16_t
mMainProcessScriptableOnly
:
1
;
uint16_t
mMethods
;
uint16_t
mConsts
:
14
;
uint16_t
mIsShim
:
1
;
uint16_t
mFunction
:
1
;
uint8_t
mNumMethods
;
uint8_t
mNumConsts
;
}
;
static_assert
(
sizeof
(
nsXPTInterfaceInfo
)
=
=
28
"
wrong
size
?
"
)
;
enum
nsXPTTypeTag
:
uint8_t
{
TD_INT8
=
0
TD_INT16
=
1
TD_INT32
=
2
TD_INT64
=
3
TD_UINT8
=
4
TD_UINT16
=
5
TD_UINT32
=
6
TD_UINT64
=
7
TD_FLOAT
=
8
TD_DOUBLE
=
9
TD_BOOL
=
10
TD_CHAR
=
11
TD_WCHAR
=
12
TD_VOID
=
13
TD_PNSIID
=
14
TD_DOMSTRING
=
15
TD_PSTRING
=
16
TD_PWSTRING
=
17
TD_INTERFACE_TYPE
=
18
TD_INTERFACE_IS_TYPE
=
19
TD_ARRAY
=
20
TD_PSTRING_SIZE_IS
=
21
TD_PWSTRING_SIZE_IS
=
22
TD_UTF8STRING
=
23
TD_CSTRING
=
24
TD_ASTRING
=
25
TD_JSVAL
=
26
TD_DOMOBJECT
=
27
}
;
struct
nsXPTType
{
nsXPTTypeTag
Tag
(
)
const
{
return
static_cast
<
nsXPTTypeTag
>
(
mTag
)
;
}
uint8_t
ArgNum
(
)
const
{
MOZ_ASSERT
(
Tag
(
)
=
=
TD_INTERFACE_IS_TYPE
|
|
Tag
(
)
=
=
TD_PSTRING_SIZE_IS
|
|
Tag
(
)
=
=
TD_PWSTRING_SIZE_IS
|
|
Tag
(
)
=
=
TD_ARRAY
)
;
return
mData1
;
}
const
nsXPTType
&
ArrayElementType
(
)
const
{
MOZ_ASSERT
(
Tag
(
)
=
=
TD_ARRAY
)
;
return
xpt
:
:
detail
:
:
GetType
(
mData2
)
;
}
private
:
uint16_t
Data16
(
)
const
{
return
(
(
uint16_t
)
mData1
<
<
8
)
|
mData2
;
}
public
:
const
nsXPTInterfaceInfo
*
GetInterface
(
)
const
{
MOZ_ASSERT
(
Tag
(
)
=
=
TD_INTERFACE_TYPE
)
;
return
xpt
:
:
detail
:
:
GetInterface
(
Data16
(
)
)
;
}
const
nsXPTDOMObjectInfo
&
GetDOMObjectInfo
(
)
const
{
MOZ_ASSERT
(
Tag
(
)
=
=
TD_DOMOBJECT
)
;
return
xpt
:
:
detail
:
:
GetDOMObjectInfo
(
Data16
(
)
)
;
}
bool
IsArithmetic
(
)
const
{
return
Tag
(
)
<
=
TD_WCHAR
;
}
bool
deprecated_IsPointer
(
)
const
{
return
!
IsArithmetic
(
)
&
&
Tag
(
)
!
=
TD_JSVAL
;
}
bool
IsInterfacePointer
(
)
const
{
return
Tag
(
)
=
=
TD_INTERFACE_TYPE
|
|
Tag
(
)
=
=
TD_INTERFACE_IS_TYPE
;
}
bool
IsArray
(
)
const
{
return
Tag
(
)
=
=
TD_ARRAY
;
}
bool
IsDependent
(
)
const
{
return
Tag
(
)
=
=
TD_INTERFACE_IS_TYPE
|
|
Tag
(
)
=
=
TD_ARRAY
|
|
Tag
(
)
=
=
TD_PSTRING_SIZE_IS
|
|
Tag
(
)
=
=
TD_PWSTRING_SIZE_IS
;
}
bool
IsStringClass
(
)
const
{
return
Tag
(
)
=
=
TD_DOMSTRING
|
|
Tag
(
)
=
=
TD_ASTRING
|
|
Tag
(
)
=
=
TD_CSTRING
|
|
Tag
(
)
=
=
TD_UTF8STRING
;
}
nsXPTType
&
operator
=
(
uint8_t
aPrefix
)
{
mTag
=
aPrefix
;
return
*
this
;
}
operator
uint8_t
(
)
const
{
return
TagPart
(
)
;
}
;
uint8_t
TagPart
(
)
const
{
return
mTag
;
}
;
enum
{
T_I8
=
TD_INT8
T_I16
=
TD_INT16
T_I32
=
TD_INT32
T_I64
=
TD_INT64
T_U8
=
TD_UINT8
T_U16
=
TD_UINT16
T_U32
=
TD_UINT32
T_U64
=
TD_UINT64
T_FLOAT
=
TD_FLOAT
T_DOUBLE
=
TD_DOUBLE
T_BOOL
=
TD_BOOL
T_CHAR
=
TD_CHAR
T_WCHAR
=
TD_WCHAR
T_VOID
=
TD_VOID
T_IID
=
TD_PNSIID
T_DOMSTRING
=
TD_DOMSTRING
T_CHAR_STR
=
TD_PSTRING
T_WCHAR_STR
=
TD_PWSTRING
T_INTERFACE
=
TD_INTERFACE_TYPE
T_INTERFACE_IS
=
TD_INTERFACE_IS_TYPE
T_ARRAY
=
TD_ARRAY
T_PSTRING_SIZE_IS
=
TD_PSTRING_SIZE_IS
T_PWSTRING_SIZE_IS
=
TD_PWSTRING_SIZE_IS
T_UTF8STRING
=
TD_UTF8STRING
T_CSTRING
=
TD_CSTRING
T_ASTRING
=
TD_ASTRING
T_JSVAL
=
TD_JSVAL
T_DOMOBJECT
=
TD_DOMOBJECT
}
;
uint8_t
mTag
:
5
;
uint8_t
mInParam
:
1
;
uint8_t
mOutParam
:
1
;
uint8_t
mOptionalParam
:
1
;
uint8_t
mData1
;
uint8_t
mData2
;
}
;
static_assert
(
sizeof
(
nsXPTType
)
=
=
3
"
wrong
size
"
)
;
struct
nsXPTParamInfo
{
bool
IsIn
(
)
const
{
return
mType
.
mInParam
;
}
bool
IsOut
(
)
const
{
return
mType
.
mOutParam
&
&
!
IsDipper
(
)
;
}
bool
IsOptional
(
)
const
{
return
mType
.
mOptionalParam
;
}
bool
IsShared
(
)
const
{
return
false
;
}
const
nsXPTType
&
Type
(
)
const
{
return
mType
;
}
const
nsXPTType
&
GetType
(
)
const
{
return
Type
(
)
;
}
bool
IsDipper
(
)
const
{
return
mType
.
mOutParam
&
&
IsStringClass
(
)
;
}
bool
IsIndirect
(
)
const
{
return
IsOut
(
)
|
|
mType
.
Tag
(
)
=
=
TD_JSVAL
;
}
bool
IsStringClass
(
)
const
{
return
mType
.
IsStringClass
(
)
;
}
nsXPTType
mType
;
}
;
static_assert
(
sizeof
(
nsXPTParamInfo
)
=
=
3
"
wrong
size
"
)
;
struct
nsXPTMethodInfo
{
bool
IsGetter
(
)
const
{
return
mGetter
;
}
bool
IsSetter
(
)
const
{
return
mSetter
;
}
bool
IsNotXPCOM
(
)
const
{
return
mNotXPCOM
;
}
bool
IsHidden
(
)
const
{
return
mHidden
;
}
bool
WantsOptArgc
(
)
const
{
return
mOptArgc
;
}
bool
WantsContext
(
)
const
{
return
mContext
;
}
uint8_t
ParamCount
(
)
const
{
return
mNumParams
;
}
const
char
*
Name
(
)
const
{
return
xpt
:
:
detail
:
:
GetString
(
mName
)
;
}
const
nsXPTParamInfo
&
Param
(
uint8_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
<
mNumParams
)
;
return
xpt
:
:
detail
:
:
GetParam
(
mParams
+
aIndex
)
;
}
bool
HasRetval
(
)
const
{
return
mHasRetval
;
}
const
nsXPTParamInfo
*
GetRetval
(
)
const
{
return
mHasRetval
?
&
Param
(
mNumParams
-
1
)
:
nullptr
;
}
const
char
*
GetName
(
)
const
{
return
Name
(
)
;
}
uint8_t
GetParamCount
(
)
const
{
return
ParamCount
(
)
;
}
const
nsXPTParamInfo
&
GetParam
(
uint8_t
aIndex
)
const
{
return
Param
(
aIndex
)
;
}
uint32_t
mName
;
uint16_t
mParams
;
uint8_t
mNumParams
;
uint8_t
mGetter
:
1
;
uint8_t
mSetter
:
1
;
uint8_t
mNotXPCOM
:
1
;
uint8_t
mHidden
:
1
;
uint8_t
mOptArgc
:
1
;
uint8_t
mContext
:
1
;
uint8_t
mHasRetval
:
1
;
}
;
static_assert
(
sizeof
(
nsXPTMethodInfo
)
=
=
8
"
wrong
size
"
)
;
struct
nsXPTDOMObjectInfo
{
nsresult
Unwrap
(
JS
:
:
HandleValue
aHandle
void
*
*
aObj
)
const
{
return
mUnwrap
(
aHandle
aObj
)
;
}
bool
Wrap
(
JSContext
*
aCx
void
*
aObj
JS
:
:
MutableHandleValue
aHandle
)
const
{
return
mWrap
(
aCx
aObj
aHandle
)
;
}
void
Cleanup
(
void
*
aObj
)
const
{
return
mCleanup
(
aObj
)
;
}
nsresult
(
*
mUnwrap
)
(
JS
:
:
HandleValue
aHandle
void
*
*
aObj
)
;
bool
(
*
mWrap
)
(
JSContext
*
aCx
void
*
aObj
JS
:
:
MutableHandleValue
aHandle
)
;
void
(
*
mCleanup
)
(
void
*
aObj
)
;
}
;
namespace
xpt
{
namespace
detail
{
struct
ConstInfo
{
uint32_t
mName
:
31
;
uint32_t
mSigned
:
1
;
uint32_t
mValue
;
}
;
static_assert
(
sizeof
(
ConstInfo
)
=
=
8
"
wrong
size
"
)
;
extern
const
nsXPTInterfaceInfo
sInterfaces
[
]
;
extern
const
nsXPTType
sTypes
[
]
;
extern
const
nsXPTParamInfo
sParams
[
]
;
extern
const
nsXPTMethodInfo
sMethods
[
]
;
extern
const
nsXPTDOMObjectInfo
sDOMObjects
[
]
;
extern
const
char
sStrings
[
]
;
extern
const
ConstInfo
sConsts
[
]
;
extern
const
mozilla
:
:
dom
:
:
NativePropertyHooks
*
sPropHooks
[
]
;
static
const
uint16_t
kPHFSize
=
256
;
extern
const
uint32_t
sPHF_IIDs
[
]
;
extern
const
uint32_t
sPHF_Names
[
]
;
extern
const
uint16_t
sPHF_NamesIdxs
[
]
;
inline
const
nsXPTInterfaceInfo
*
GetInterface
(
uint16_t
aIndex
)
{
if
(
aIndex
>
0
&
&
aIndex
<
=
sInterfacesSize
)
{
return
&
sInterfaces
[
aIndex
-
1
]
;
}
return
nullptr
;
}
inline
const
nsXPTType
&
GetType
(
uint16_t
aIndex
)
{
return
sTypes
[
aIndex
]
;
}
inline
const
nsXPTParamInfo
&
GetParam
(
uint16_t
aIndex
)
{
return
sParams
[
aIndex
]
;
}
inline
const
nsXPTMethodInfo
&
GetMethod
(
uint16_t
aIndex
)
{
return
sMethods
[
aIndex
]
;
}
inline
const
nsXPTDOMObjectInfo
&
GetDOMObjectInfo
(
uint16_t
aIndex
)
{
return
sDOMObjects
[
aIndex
]
;
}
inline
const
char
*
GetString
(
uint32_t
aIndex
)
{
return
&
sStrings
[
aIndex
]
;
}
}
}
#
endif
