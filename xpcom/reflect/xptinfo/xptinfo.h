#
ifndef
xptiinfo_h___
#
define
xptiinfo_h___
#
include
"
nscore
.
h
"
#
include
"
xpt_struct
.
h
"
class
nsXPTType
:
public
XPTTypeDescriptorPrefix
{
public
:
nsXPTType
(
)
{
}
MOZ_IMPLICIT
nsXPTType
(
const
XPTTypeDescriptorPrefix
&
prefix
)
{
*
(
XPTTypeDescriptorPrefix
*
)
this
=
prefix
;
}
MOZ_IMPLICIT
nsXPTType
(
const
uint8_t
&
prefix
)
{
*
(
uint8_t
*
)
this
=
prefix
;
}
nsXPTType
&
operator
=
(
uint8_t
val
)
{
mFlags
=
val
;
return
*
this
;
}
nsXPTType
&
operator
=
(
const
nsXPTType
&
other
)
{
mFlags
=
other
.
mFlags
;
return
*
this
;
}
operator
uint8_t
(
)
const
{
return
mFlags
;
}
bool
IsArithmetic
(
)
const
{
return
mFlags
<
=
T_WCHAR
;
}
bool
deprecated_IsPointer
(
)
const
{
return
!
IsArithmetic
(
)
&
&
TagPart
(
)
!
=
T_JSVAL
;
}
bool
IsInterfacePointer
(
)
const
{
switch
(
TagPart
(
)
)
{
default
:
return
false
;
case
T_INTERFACE
:
case
T_INTERFACE_IS
:
return
true
;
}
}
bool
IsArray
(
)
const
{
return
TagPart
(
)
=
=
T_ARRAY
;
}
bool
IsDependent
(
)
const
{
switch
(
TagPart
(
)
)
{
default
:
return
false
;
case
T_INTERFACE_IS
:
case
TD_ARRAY
:
case
T_PSTRING_SIZE_IS
:
case
T_PWSTRING_SIZE_IS
:
return
true
;
}
}
enum
{
T_I8
=
TD_INT8
T_I16
=
TD_INT16
T_I32
=
TD_INT32
T_I64
=
TD_INT64
T_U8
=
TD_UINT8
T_U16
=
TD_UINT16
T_U32
=
TD_UINT32
T_U64
=
TD_UINT64
T_FLOAT
=
TD_FLOAT
T_DOUBLE
=
TD_DOUBLE
T_BOOL
=
TD_BOOL
T_CHAR
=
TD_CHAR
T_WCHAR
=
TD_WCHAR
T_VOID
=
TD_VOID
T_IID
=
TD_PNSIID
T_DOMSTRING
=
TD_DOMSTRING
T_CHAR_STR
=
TD_PSTRING
T_WCHAR_STR
=
TD_PWSTRING
T_INTERFACE
=
TD_INTERFACE_TYPE
T_INTERFACE_IS
=
TD_INTERFACE_IS_TYPE
T_ARRAY
=
TD_ARRAY
T_PSTRING_SIZE_IS
=
TD_PSTRING_SIZE_IS
T_PWSTRING_SIZE_IS
=
TD_PWSTRING_SIZE_IS
T_UTF8STRING
=
TD_UTF8STRING
T_CSTRING
=
TD_CSTRING
T_ASTRING
=
TD_ASTRING
T_JSVAL
=
TD_JSVAL
}
;
}
;
class
nsXPTParamInfo
:
public
XPTParamDescriptor
{
public
:
MOZ_IMPLICIT
nsXPTParamInfo
(
const
XPTParamDescriptor
&
aDesc
)
:
XPTParamDescriptor
(
aDesc
)
{
}
bool
IsIn
(
)
const
{
return
!
!
(
mFlags
&
kInMask
)
;
}
bool
IsOut
(
)
const
{
return
!
!
(
mFlags
&
kOutMask
)
;
}
bool
IsRetval
(
)
const
{
return
!
!
(
mFlags
&
kRetvalMask
)
;
}
bool
IsShared
(
)
const
{
return
!
!
(
mFlags
&
kSharedMask
)
;
}
bool
IsDipper
(
)
const
{
return
!
!
(
mFlags
&
kDipperMask
)
;
}
bool
IsOptional
(
)
const
{
return
!
!
(
mFlags
&
kOptionalMask
)
;
}
const
nsXPTType
GetType
(
)
const
{
return
mType
.
mPrefix
;
}
bool
IsStringClass
(
)
const
{
switch
(
GetType
(
)
.
TagPart
(
)
)
{
case
nsXPTType
:
:
T_ASTRING
:
case
nsXPTType
:
:
T_DOMSTRING
:
case
nsXPTType
:
:
T_UTF8STRING
:
case
nsXPTType
:
:
T_CSTRING
:
return
true
;
default
:
return
false
;
}
}
bool
IsIndirect
(
)
const
{
return
IsOut
(
)
|
|
GetType
(
)
.
TagPart
(
)
=
=
nsXPTType
:
:
T_JSVAL
;
}
private
:
static
const
uint8_t
kInMask
=
0x80
;
static
const
uint8_t
kOutMask
=
0x40
;
static
const
uint8_t
kRetvalMask
=
0x20
;
static
const
uint8_t
kSharedMask
=
0x10
;
static
const
uint8_t
kDipperMask
=
0x08
;
static
const
uint8_t
kOptionalMask
=
0x04
;
nsXPTParamInfo
(
)
=
delete
;
}
;
class
nsXPTMethodInfo
:
public
XPTMethodDescriptor
{
public
:
MOZ_IMPLICIT
nsXPTMethodInfo
(
const
XPTMethodDescriptor
&
aDesc
)
:
XPTMethodDescriptor
(
aDesc
)
{
}
bool
IsGetter
(
)
const
{
return
!
!
(
mFlags
&
kGetterMask
)
;
}
bool
IsSetter
(
)
const
{
return
!
!
(
mFlags
&
kSetterMask
)
;
}
bool
IsNotXPCOM
(
)
const
{
return
!
!
(
mFlags
&
kNotXPCOMMask
)
;
}
bool
IsHidden
(
)
const
{
return
!
!
(
mFlags
&
kHiddenMask
)
;
}
bool
WantsOptArgc
(
)
const
{
return
!
!
(
mFlags
&
kOptArgcMask
)
;
}
bool
WantsContext
(
)
const
{
return
!
!
(
mFlags
&
kContextMask
)
;
}
const
char
*
GetName
(
)
const
{
return
Name
(
)
;
}
uint8_t
GetParamCount
(
)
const
{
return
mNumArgs
;
}
const
nsXPTParamInfo
GetParam
(
uint8_t
idx
)
const
{
MOZ_ASSERT
(
idx
<
GetParamCount
(
)
"
bad
arg
"
)
;
return
Param
(
idx
)
;
}
private
:
static
const
uint8_t
kGetterMask
=
0x80
;
static
const
uint8_t
kSetterMask
=
0x40
;
static
const
uint8_t
kNotXPCOMMask
=
0x20
;
static
const
uint8_t
kHiddenMask
=
0x08
;
static
const
uint8_t
kOptArgcMask
=
0x04
;
static
const
uint8_t
kContextMask
=
0x02
;
nsXPTMethodInfo
(
)
=
delete
;
}
;
#
endif
