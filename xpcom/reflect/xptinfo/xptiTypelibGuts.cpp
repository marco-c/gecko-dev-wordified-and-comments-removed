#
include
"
xptiprivate
.
h
"
#
include
"
xpt_arena
.
h
"
#
include
"
mozilla
/
XPTInterfaceInfoManager
.
h
"
using
namespace
mozilla
;
template
<
class
T
>
class
MOZ_NEEDS_NO_VTABLE_TYPE
CheckNoVTable
{
}
;
CheckNoVTable
<
xptiTypelibGuts
>
gChecker
;
xptiTypelibGuts
*
xptiTypelibGuts
:
:
Create
(
)
{
size_t
n
=
sizeof
(
xptiTypelibGuts
)
+
sizeof
(
xptiInterfaceEntry
*
)
*
(
XPTHeader
:
:
kNumInterfaces
-
1
)
;
void
*
place
=
XPT_CALLOC8
(
gXPTIStructArena
n
)
;
if
(
!
place
)
return
nullptr
;
return
new
(
place
)
xptiTypelibGuts
(
)
;
}
xptiInterfaceEntry
*
xptiTypelibGuts
:
:
GetEntryAt
(
uint16_t
i
)
{
static
const
nsID
zeroIID
=
{
0x0
0x0
0x0
{
0x0
0x0
0x0
0x0
0x0
0x0
0x0
0x0
}
}
;
NS_ASSERTION
(
i
<
GetEntryCount
(
)
"
bad
index
"
)
;
xptiInterfaceEntry
*
r
=
mEntryArray
[
i
]
;
if
(
r
)
return
r
;
const
XPTInterfaceDirectoryEntry
*
iface
=
XPTHeader
:
:
kInterfaceDirectory
+
i
;
XPTInterfaceInfoManager
:
:
xptiWorkingSet
&
set
=
XPTInterfaceInfoManager
:
:
GetSingleton
(
)
-
>
mWorkingSet
;
{
ReentrantMonitorAutoEnter
monitor
(
set
.
mTableReentrantMonitor
)
;
if
(
iface
-
>
mIID
.
Equals
(
zeroIID
)
)
r
=
set
.
mNameTable
.
Get
(
iface
-
>
Name
(
)
)
;
else
r
=
set
.
mIIDTable
.
Get
(
iface
-
>
mIID
)
;
}
if
(
r
)
SetEntryAt
(
i
r
)
;
return
r
;
}
const
char
*
xptiTypelibGuts
:
:
GetEntryNameAt
(
uint16_t
i
)
{
NS_ASSERTION
(
i
<
GetEntryCount
(
)
"
bad
index
"
)
;
const
XPTInterfaceDirectoryEntry
*
iface
=
XPTHeader
:
:
kInterfaceDirectory
+
i
;
return
iface
-
>
Name
(
)
;
}
