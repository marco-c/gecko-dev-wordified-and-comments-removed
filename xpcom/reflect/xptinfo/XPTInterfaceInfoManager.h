#
ifndef
mozilla_XPTInterfaceInfoManager_h_
#
define
mozilla_XPTInterfaceInfoManager_h_
#
include
"
nsIInterfaceInfoManager
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
nsDataHashtable
.
h
"
template
<
typename
T
>
class
nsCOMArray
;
class
nsIMemoryReporter
;
struct
XPTInterfaceDescriptor
;
class
xptiInterfaceEntry
;
class
xptiInterfaceInfo
;
class
xptiTypelibGuts
;
namespace
mozilla
{
class
XPTInterfaceInfoManager
final
:
public
nsIInterfaceInfoManager
public
nsIMemoryReporter
{
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINTERFACEINFOMANAGER
NS_DECL_NSIMEMORYREPORTER
public
:
static
XPTInterfaceInfoManager
*
GetSingleton
(
)
;
static
void
FreeInterfaceInfoManager
(
)
;
void
GetScriptableInterfaces
(
nsCOMArray
<
nsIInterfaceInfo
>
&
aInterfaces
)
;
static
Mutex
&
GetResolveLock
(
)
{
return
GetSingleton
(
)
-
>
mResolveLock
;
}
xptiInterfaceEntry
*
GetInterfaceEntryForIID
(
const
nsIID
*
iid
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
private
:
XPTInterfaceInfoManager
(
)
;
~
XPTInterfaceInfoManager
(
)
;
void
InitMemoryReporter
(
)
;
void
VerifyAndAddEntryIfNew
(
const
XPTInterfaceDescriptor
*
iface
uint16_t
idx
xptiTypelibGuts
*
typelib
)
;
private
:
class
xptiWorkingSet
{
public
:
xptiWorkingSet
(
)
;
~
xptiWorkingSet
(
)
;
void
InvalidateInterfaceInfos
(
)
;
mozilla
:
:
ReentrantMonitor
mTableReentrantMonitor
;
nsDataHashtable
<
nsIDHashKey
xptiInterfaceEntry
*
>
mIIDTable
;
nsDataHashtable
<
nsDepCharHashKey
xptiInterfaceEntry
*
>
mNameTable
;
}
;
friend
class
:
:
xptiInterfaceInfo
;
friend
class
:
:
xptiInterfaceEntry
;
friend
class
:
:
xptiTypelibGuts
;
xptiWorkingSet
mWorkingSet
;
Mutex
mResolveLock
;
}
;
}
#
endif
