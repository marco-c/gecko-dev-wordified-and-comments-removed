#
ifndef
nsASCIIMask_h_
#
define
nsASCIIMask_h_
#
include
<
array
>
#
include
"
mozilla
/
IndexSequence
.
h
"
typedef
std
:
:
array
<
bool
128
>
ASCIIMaskArray
;
namespace
mozilla
{
class
ASCIIMask
{
public
:
static
const
ASCIIMaskArray
&
MaskCRLF
(
)
;
static
const
ASCIIMaskArray
&
Mask0to9
(
)
;
static
const
ASCIIMaskArray
&
MaskCRLFTab
(
)
;
static
const
ASCIIMaskArray
&
MaskWhitespace
(
)
;
static
MOZ_ALWAYS_INLINE
bool
IsMasked
(
const
ASCIIMaskArray
&
aMask
uint32_t
aChar
)
{
return
aChar
<
128
&
&
aMask
[
aChar
]
;
}
}
;
namespace
details
{
template
<
typename
F
size_t
.
.
.
Indices
>
constexpr
std
:
:
array
<
bool
128
>
CreateASCIIMask
(
F
fun
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
return
{
{
fun
(
Indices
)
.
.
.
}
}
;
}
}
template
<
typename
F
>
constexpr
std
:
:
array
<
bool
128
>
CreateASCIIMask
(
F
fun
)
{
return
details
:
:
CreateASCIIMask
(
fun
mozilla
:
:
MakeIndexSequence
<
128
>
:
:
Type
{
}
)
;
}
}
#
endif
