#
ifndef
nsTDependentString_h
#
define
nsTDependentString_h
#
include
"
nsTString
.
h
"
template
<
typename
T
>
class
nsTDependentString
:
public
nsTString
<
T
>
{
public
:
typedef
nsTDependentString
<
T
>
self_type
;
typedef
nsTString
<
T
>
base_string_type
;
typedef
typename
base_string_type
:
:
string_type
string_type
;
typedef
typename
base_string_type
:
:
fallible_t
fallible_t
;
typedef
typename
base_string_type
:
:
char_type
char_type
;
typedef
typename
base_string_type
:
:
char_traits
char_traits
;
typedef
typename
base_string_type
:
:
incompatible_char_type
incompatible_char_type
;
typedef
typename
base_string_type
:
:
substring_tuple_type
substring_tuple_type
;
typedef
typename
base_string_type
:
:
const_iterator
const_iterator
;
typedef
typename
base_string_type
:
:
iterator
iterator
;
typedef
typename
base_string_type
:
:
comparator_type
comparator_type
;
typedef
typename
base_string_type
:
:
const_char_iterator
const_char_iterator
;
typedef
typename
base_string_type
:
:
index_type
index_type
;
typedef
typename
base_string_type
:
:
size_type
size_type
;
typedef
typename
base_string_type
:
:
DataFlags
DataFlags
;
typedef
typename
base_string_type
:
:
ClassFlags
ClassFlags
;
public
:
nsTDependentString
(
const
char_type
*
aStart
const
char_type
*
aEnd
)
;
nsTDependentString
(
const
char_type
*
aData
uint32_t
aLength
)
:
string_type
(
const_cast
<
char_type
*
>
(
aData
)
aLength
DataFlags
:
:
TERMINATED
ClassFlags
(
0
)
)
{
this
-
>
AssertValidDependentString
(
)
;
}
#
if
defined
(
MOZ_USE_CHAR16_WRAPPER
)
template
<
typename
Q
=
T
typename
EnableIfChar16
=
mozilla
:
:
Char16OnlyT
<
Q
>
>
nsTDependentString
(
char16ptr_t
aData
uint32_t
aLength
)
:
nsTDependentString
(
static_cast
<
const
char16_t
*
>
(
aData
)
aLength
)
{
}
#
endif
explicit
nsTDependentString
(
const
char_type
*
aData
)
:
string_type
(
const_cast
<
char_type
*
>
(
aData
)
uint32_t
(
char_traits
:
:
length
(
aData
)
)
DataFlags
:
:
TERMINATED
ClassFlags
(
0
)
)
{
string_type
:
:
AssertValidDependentString
(
)
;
}
#
if
defined
(
MOZ_USE_CHAR16_WRAPPER
)
template
<
typename
Q
=
T
typename
EnableIfChar16
=
mozilla
:
:
Char16OnlyT
<
Q
>
>
explicit
nsTDependentString
(
char16ptr_t
aData
)
:
nsTDependentString
(
static_cast
<
const
char16_t
*
>
(
aData
)
)
{
}
#
endif
nsTDependentString
(
const
string_type
&
aStr
uint32_t
aStartPos
)
:
string_type
(
)
{
Rebind
(
aStr
aStartPos
)
;
}
nsTDependentString
(
)
:
string_type
(
)
{
}
nsTDependentString
(
self_type
&
&
aStr
)
:
string_type
(
)
{
Rebind
(
aStr
0
)
;
aStr
.
SetToEmptyBuffer
(
)
;
}
explicit
nsTDependentString
(
const
self_type
&
aStr
)
:
string_type
(
)
{
Rebind
(
aStr
0
)
;
}
using
nsTString
<
T
>
:
:
Rebind
;
void
Rebind
(
const
char_type
*
aData
)
{
Rebind
(
aData
uint32_t
(
char_traits
:
:
length
(
aData
)
)
)
;
}
void
Rebind
(
const
char_type
*
aStart
const
char_type
*
aEnd
)
;
void
Rebind
(
const
string_type
&
uint32_t
aStartPos
)
;
private
:
nsTDependentString
(
const
substring_tuple_type
&
)
=
delete
;
self_type
&
operator
=
(
const
self_type
&
aStr
)
=
delete
;
}
;
extern
template
class
nsTDependentString
<
char
>
;
extern
template
class
nsTDependentString
<
char16_t
>
;
#
endif
