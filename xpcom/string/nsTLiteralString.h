class
nsTLiteralString_CharT
:
public
mozilla
:
:
detail
:
:
nsTStringRepr_CharT
{
public
:
typedef
nsTLiteralString_CharT
self_type
;
public
:
template
<
size_type
N
>
explicit
constexpr
nsTLiteralString_CharT
(
const
char_type
(
&
aStr
)
[
N
]
)
:
base_string_type
(
const_cast
<
char_type
*
>
(
aStr
)
N
-
1
DataFlags
:
:
TERMINATED
|
DataFlags
:
:
LITERAL
ClassFlags
:
:
NULL_TERMINATED
)
{
}
const
nsTString_CharT
&
AsString
(
)
const
{
return
*
reinterpret_cast
<
const
nsTString_CharT
*
>
(
this
)
;
}
operator
const
nsTString_CharT
&
(
)
const
{
return
AsString
(
)
;
}
#
if
defined
(
CharT_is_PRUnichar
)
&
&
defined
(
MOZ_USE_CHAR16_WRAPPER
)
char16ptr_t
get
(
)
const
&
&
=
delete
;
char16ptr_t
get
(
)
const
&
#
else
const
char_type
*
get
(
)
const
&
&
=
delete
;
const
char_type
*
get
(
)
const
&
#
endif
{
return
mData
;
}
private
:
template
<
size_type
N
>
nsTLiteralString_CharT
(
char_type
(
&
aStr
)
[
N
]
)
=
delete
;
self_type
&
operator
=
(
const
self_type
&
)
=
delete
;
}
;
static_assert
(
sizeof
(
nsTLiteralString_CharT
)
=
=
sizeof
(
nsTString_CharT
)
"
nsTLiteralString_CharT
can
masquerade
as
nsTString_CharT
"
"
so
they
must
have
identical
layout
"
)
;
