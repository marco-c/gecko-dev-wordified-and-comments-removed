#
ifndef
nsReadableUtils_h___
#
define
nsReadableUtils_h___
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
extern
"
C
"
{
size_t
encoding_utf8_valid_up_to
(
uint8_t
const
*
buffer
size_t
buffer_len
)
;
size_t
encoding_ascii_valid_up_to
(
uint8_t
const
*
buffer
size_t
buffer_len
)
;
}
inline
size_t
Distance
(
const
nsReadingIterator
<
char16_t
>
&
aStart
const
nsReadingIterator
<
char16_t
>
&
aEnd
)
{
MOZ_ASSERT
(
aStart
.
get
(
)
<
=
aEnd
.
get
(
)
)
;
return
static_cast
<
size_t
>
(
aEnd
.
get
(
)
-
aStart
.
get
(
)
)
;
}
inline
size_t
Distance
(
const
nsReadingIterator
<
char
>
&
aStart
const
nsReadingIterator
<
char
>
&
aEnd
)
{
MOZ_ASSERT
(
aStart
.
get
(
)
<
=
aEnd
.
get
(
)
)
;
return
static_cast
<
size_t
>
(
aEnd
.
get
(
)
-
aStart
.
get
(
)
)
;
}
void
LossyCopyUTF16toASCII
(
const
nsAString
&
aSource
nsACString
&
aDest
)
;
void
CopyASCIItoUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
)
;
MOZ_MUST_USE
bool
CopyASCIItoUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
LossyCopyUTF16toASCII
(
const
char16ptr_t
aSource
nsACString
&
aDest
)
;
void
CopyASCIItoUTF16
(
const
char
*
aSource
nsAString
&
aDest
)
;
void
CopyUTF16toUTF8
(
const
nsAString
&
aSource
nsACString
&
aDest
)
;
MOZ_MUST_USE
bool
CopyUTF16toUTF8
(
const
nsAString
&
aSource
nsACString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
CopyUTF8toUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
)
;
void
CopyUTF16toUTF8
(
const
char16ptr_t
aSource
nsACString
&
aDest
)
;
void
CopyUTF8toUTF16
(
const
char
*
aSource
nsAString
&
aDest
)
;
void
LossyAppendUTF16toASCII
(
const
nsAString
&
aSource
nsACString
&
aDest
)
;
void
AppendASCIItoUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
)
;
MOZ_MUST_USE
bool
AppendASCIItoUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
LossyAppendUTF16toASCII
(
const
char16ptr_t
aSource
nsACString
&
aDest
)
;
MOZ_MUST_USE
bool
AppendASCIItoUTF16
(
const
char
*
aSource
nsAString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
AppendASCIItoUTF16
(
const
char
*
aSource
nsAString
&
aDest
)
;
void
AppendUTF16toUTF8
(
const
nsAString
&
aSource
nsACString
&
aDest
)
;
MOZ_MUST_USE
bool
AppendUTF16toUTF8
(
const
nsAString
&
aSource
nsACString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
AppendUTF8toUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
)
;
MOZ_MUST_USE
bool
AppendUTF8toUTF16
(
const
nsACString
&
aSource
nsAString
&
aDest
const
mozilla
:
:
fallible_t
&
)
;
void
AppendUTF16toUTF8
(
const
char16ptr_t
aSource
nsACString
&
aDest
)
;
void
AppendUTF8toUTF16
(
const
char
*
aSource
nsAString
&
aDest
)
;
char
*
ToNewCString
(
const
nsAString
&
aSource
)
;
char
*
ToNewCString
(
const
nsACString
&
aSource
)
;
char
*
ToNewUTF8String
(
const
nsAString
&
aSource
uint32_t
*
aUTF8Count
=
nullptr
)
;
char16_t
*
ToNewUnicode
(
const
nsAString
&
aSource
)
;
char16_t
*
ToNewUnicode
(
const
nsACString
&
aSource
)
;
uint32_t
CalcUTF8ToUnicodeLength
(
const
nsACString
&
aSource
)
;
char16_t
*
UTF8ToUnicodeBuffer
(
const
nsACString
&
aSource
char16_t
*
aBuffer
uint32_t
*
aUTF16Count
=
nullptr
)
;
char16_t
*
UTF8ToNewUnicode
(
const
nsACString
&
aSource
uint32_t
*
aUTF16Count
=
nullptr
)
;
char16_t
*
CopyUnicodeTo
(
const
nsAString
&
aSource
uint32_t
aSrcOffset
char16_t
*
aDest
uint32_t
aLength
)
;
void
CopyUnicodeTo
(
const
nsAString
:
:
const_iterator
&
aSrcStart
const
nsAString
:
:
const_iterator
&
aSrcEnd
nsAString
&
aDest
)
;
void
AppendUnicodeTo
(
const
nsAString
:
:
const_iterator
&
aSrcStart
const
nsAString
:
:
const_iterator
&
aSrcEnd
nsAString
&
aDest
)
;
bool
IsASCII
(
const
nsAString
&
aString
)
;
inline
bool
IsASCII
(
const
nsACString
&
aString
)
{
size_t
length
=
aString
.
Length
(
)
;
const
uint8_t
*
ptr
=
reinterpret_cast
<
const
uint8_t
*
>
(
aString
.
BeginReading
(
)
)
;
if
(
length
<
16
)
{
size_t
accu
=
0
;
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
accu
|
=
ptr
[
i
]
;
}
return
accu
<
0x80
;
}
return
length
=
=
encoding_ascii_valid_up_to
(
ptr
length
)
;
}
inline
bool
IsUTF8
(
const
nsACString
&
aString
)
{
size_t
length
=
aString
.
Length
(
)
;
const
uint8_t
*
ptr
=
reinterpret_cast
<
const
uint8_t
*
>
(
aString
.
BeginReading
(
)
)
;
if
(
length
<
16
)
{
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
if
(
ptr
[
i
]
>
=
0x80
)
{
ptr
+
=
i
;
length
-
=
i
;
goto
end
;
}
}
return
true
;
}
end
:
return
length
=
=
encoding_utf8_valid_up_to
(
ptr
length
)
;
}
bool
ParseString
(
const
nsACString
&
aAstring
char
aDelimiter
nsTArray
<
nsCString
>
&
aArray
)
;
void
ToUpperCase
(
nsACString
&
)
;
void
ToLowerCase
(
nsACString
&
)
;
void
ToUpperCase
(
nsACString
&
)
;
void
ToLowerCase
(
nsACString
&
)
;
void
ToUpperCase
(
const
nsACString
&
aSource
nsACString
&
aDest
)
;
void
ToLowerCase
(
const
nsACString
&
aSource
nsACString
&
aDest
)
;
bool
FindInReadable
(
const
nsAString
&
aPattern
nsAString
:
:
const_iterator
&
nsAString
:
:
const_iterator
&
const
nsStringComparator
&
=
nsDefaultStringComparator
(
)
)
;
bool
FindInReadable
(
const
nsACString
&
aPattern
nsACString
:
:
const_iterator
&
nsACString
:
:
const_iterator
&
const
nsCStringComparator
&
=
nsDefaultCStringComparator
(
)
)
;
inline
bool
FindInReadable
(
const
nsAString
&
aPattern
const
nsAString
&
aSource
const
nsStringComparator
&
aCompare
=
nsDefaultStringComparator
(
)
)
{
nsAString
:
:
const_iterator
start
end
;
aSource
.
BeginReading
(
start
)
;
aSource
.
EndReading
(
end
)
;
return
FindInReadable
(
aPattern
start
end
aCompare
)
;
}
inline
bool
FindInReadable
(
const
nsACString
&
aPattern
const
nsACString
&
aSource
const
nsCStringComparator
&
aCompare
=
nsDefaultCStringComparator
(
)
)
{
nsACString
:
:
const_iterator
start
end
;
aSource
.
BeginReading
(
start
)
;
aSource
.
EndReading
(
end
)
;
return
FindInReadable
(
aPattern
start
end
aCompare
)
;
}
bool
CaseInsensitiveFindInReadable
(
const
nsACString
&
aPattern
nsACString
:
:
const_iterator
&
nsACString
:
:
const_iterator
&
)
;
bool
RFindInReadable
(
const
nsAString
&
aPattern
nsAString
:
:
const_iterator
&
nsAString
:
:
const_iterator
&
const
nsStringComparator
&
=
nsDefaultStringComparator
(
)
)
;
bool
RFindInReadable
(
const
nsACString
&
aPattern
nsACString
:
:
const_iterator
&
nsACString
:
:
const_iterator
&
const
nsCStringComparator
&
=
nsDefaultCStringComparator
(
)
)
;
bool
FindCharInReadable
(
char16_t
aChar
nsAString
:
:
const_iterator
&
aSearchStart
const
nsAString
:
:
const_iterator
&
aSearchEnd
)
;
bool
FindCharInReadable
(
char
aChar
nsACString
:
:
const_iterator
&
aSearchStart
const
nsACString
:
:
const_iterator
&
aSearchEnd
)
;
uint32_t
CountCharInReadable
(
const
nsAString
&
aStr
char16_t
aChar
)
;
uint32_t
CountCharInReadable
(
const
nsACString
&
aStr
char
aChar
)
;
bool
StringBeginsWith
(
const
nsAString
&
aSource
const
nsAString
&
aSubstring
)
;
bool
StringBeginsWith
(
const
nsAString
&
aSource
const
nsAString
&
aSubstring
const
nsStringComparator
&
aComparator
)
;
bool
StringBeginsWith
(
const
nsACString
&
aSource
const
nsACString
&
aSubstring
)
;
bool
StringBeginsWith
(
const
nsACString
&
aSource
const
nsACString
&
aSubstring
const
nsCStringComparator
&
aComparator
)
;
bool
StringEndsWith
(
const
nsAString
&
aSource
const
nsAString
&
aSubstring
)
;
bool
StringEndsWith
(
const
nsAString
&
aSource
const
nsAString
&
aSubstring
const
nsStringComparator
&
aComparator
)
;
bool
StringEndsWith
(
const
nsACString
&
aSource
const
nsACString
&
aSubstring
)
;
bool
StringEndsWith
(
const
nsACString
&
aSource
const
nsACString
&
aSubstring
const
nsCStringComparator
&
aComparator
)
;
const
nsString
&
EmptyString
(
)
;
const
nsCString
&
EmptyCString
(
)
;
const
nsString
&
NullString
(
)
;
const
nsCString
&
NullCString
(
)
;
int32_t
CompareUTF8toUTF16
(
const
nsACString
&
aUTF8String
const
nsAString
&
aUTF16String
)
;
void
AppendUCS4ToUTF16
(
const
uint32_t
aSource
nsAString
&
aDest
)
;
template
<
class
T
>
inline
bool
EnsureStringLength
(
T
&
aStr
uint32_t
aLen
)
{
aStr
.
SetLength
(
aLen
)
;
return
(
aStr
.
Length
(
)
=
=
aLen
)
;
}
#
endif
