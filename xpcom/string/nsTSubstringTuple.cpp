#
include
"
mozilla
/
CheckedInt
.
h
"
template
<
typename
T
>
typename
nsTSubstringTuple
<
T
>
:
:
size_type
nsTSubstringTuple
<
T
>
:
:
Length
(
)
const
{
mozilla
:
:
CheckedInt
<
size_type
>
len
;
if
(
mHead
)
{
len
=
mHead
-
>
Length
(
)
;
}
else
{
len
=
mFragA
-
>
Length
(
)
;
}
len
+
=
mFragB
-
>
Length
(
)
;
MOZ_RELEASE_ASSERT
(
len
.
isValid
(
)
"
Substring
tuple
length
is
invalid
"
)
;
return
len
.
value
(
)
;
}
template
<
typename
T
>
void
nsTSubstringTuple
<
T
>
:
:
WriteTo
(
char_type
*
aBuf
uint32_t
aBufLen
)
const
{
MOZ_RELEASE_ASSERT
(
aBufLen
>
=
mFragB
-
>
Length
(
)
"
buffer
too
small
"
)
;
uint32_t
headLen
=
aBufLen
-
mFragB
-
>
Length
(
)
;
if
(
mHead
)
{
mHead
-
>
WriteTo
(
aBuf
headLen
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
mFragA
-
>
Length
(
)
=
=
headLen
"
buffer
incorrectly
sized
"
)
;
char_traits
:
:
copy
(
aBuf
mFragA
-
>
Data
(
)
mFragA
-
>
Length
(
)
)
;
}
char_traits
:
:
copy
(
aBuf
+
headLen
mFragB
-
>
Data
(
)
mFragB
-
>
Length
(
)
)
;
}
template
<
typename
T
>
bool
nsTSubstringTuple
<
T
>
:
:
IsDependentOn
(
const
char_type
*
aStart
const
char_type
*
aEnd
)
const
{
if
(
mFragB
-
>
IsDependentOn
(
aStart
aEnd
)
)
{
return
true
;
}
if
(
mHead
)
{
return
mHead
-
>
IsDependentOn
(
aStart
aEnd
)
;
}
return
mFragA
-
>
IsDependentOn
(
aStart
aEnd
)
;
}
