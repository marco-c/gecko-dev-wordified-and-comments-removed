#
include
<
stdint
.
h
>
namespace
mozilla
{
inline
bool
IsASCII
(
char16_t
aChar
)
{
return
(
aChar
&
0xFF80
)
=
=
0
;
}
inline
const
char16_t
*
aligned
(
const
char16_t
*
aPtr
const
uintptr_t
aMask
)
{
return
reinterpret_cast
<
const
char16_t
*
>
(
reinterpret_cast
<
const
uintptr_t
>
(
aPtr
)
&
~
aMask
)
;
}
template
<
size_t
size
>
struct
NonASCIIParameters
;
template
<
>
struct
NonASCIIParameters
<
4
>
{
static
inline
size_t
mask
(
)
{
return
0xff80ff80
;
}
static
inline
uintptr_t
alignMask
(
)
{
return
0x3
;
}
static
inline
size_t
numUnicharsPerWord
(
)
{
return
2
;
}
}
;
template
<
>
struct
NonASCIIParameters
<
8
>
{
static
inline
size_t
mask
(
)
{
static
const
uint64_t
maskAsUint64
=
UINT64_C
(
0xff80ff80ff80ff80
)
;
return
(
size_t
)
maskAsUint64
;
}
static
inline
uintptr_t
alignMask
(
)
{
return
0x7
;
}
static
inline
size_t
numUnicharsPerWord
(
)
{
return
4
;
}
}
;
namespace
SSE2
{
int32_t
FirstNonASCII
(
const
char16_t
*
aBegin
const
char16_t
*
aEnd
)
;
}
}
