#
ifndef
nsAString_h___
#
define
nsAString_h___
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStringIterator
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
<
string
.
h
>
#
include
<
stdarg
.
h
>
#
define
kNotFound
-
1
namespace
mozilla
{
namespace
detail
{
enum
class
StringDataFlags
:
uint16_t
{
TERMINATED
=
1
<
<
0
VOIDED
=
1
<
<
1
SHARED
=
1
<
<
2
OWNED
=
1
<
<
3
FIXED
=
1
<
<
4
LITERAL
=
1
<
<
5
}
;
enum
class
StringClassFlags
:
uint16_t
{
FIXED
=
1
<
<
0
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
StringDataFlags
)
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
StringClassFlags
)
}
}
#
include
"
string
-
template
-
def
-
unichar
.
h
"
#
include
"
nsTSubstring
.
h
"
#
include
"
string
-
template
-
undef
.
h
"
#
include
"
string
-
template
-
def
-
char
.
h
"
#
include
"
nsTSubstring
.
h
"
#
include
"
string
-
template
-
undef
.
h
"
class
nsCaseInsensitiveCStringComparator
:
public
nsCStringComparator
{
public
:
nsCaseInsensitiveCStringComparator
(
)
{
}
typedef
char
char_type
;
virtual
int
operator
(
)
(
const
char_type
*
const
char_type
*
uint32_t
uint32_t
)
const
override
;
}
;
class
nsCaseInsensitiveCStringArrayComparator
{
public
:
template
<
class
A
class
B
>
bool
Equals
(
const
A
&
aStrA
const
B
&
aStrB
)
const
{
return
aStrA
.
Equals
(
aStrB
nsCaseInsensitiveCStringComparator
(
)
)
;
}
}
;
#
ifndef
nsSubstringTuple_h___
#
include
"
nsSubstringTuple
.
h
"
#
endif
#
endif
