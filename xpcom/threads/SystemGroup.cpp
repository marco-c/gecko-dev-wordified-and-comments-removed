#
include
"
SystemGroup
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsINamed
.
h
"
using
namespace
mozilla
;
class
SystemGroupImpl
final
:
public
SchedulerGroup
{
public
:
SystemGroupImpl
(
)
;
~
SystemGroupImpl
(
)
{
}
static
void
InitStatic
(
)
;
static
void
ShutdownStatic
(
)
;
static
SystemGroupImpl
*
Get
(
)
;
static
bool
Initialized
(
)
{
return
!
!
sSingleton
;
}
NS_METHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
{
return
2
;
}
NS_METHOD_
(
MozExternalRefCountType
)
Release
(
void
)
{
return
1
;
}
private
:
static
UniquePtr
<
SystemGroupImpl
>
sSingleton
;
}
;
UniquePtr
<
SystemGroupImpl
>
SystemGroupImpl
:
:
sSingleton
;
SystemGroupImpl
:
:
SystemGroupImpl
(
)
{
CreateEventTargets
(
true
)
;
}
void
SystemGroupImpl
:
:
InitStatic
(
)
{
MOZ_ASSERT
(
!
sSingleton
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sSingleton
=
MakeUnique
<
SystemGroupImpl
>
(
)
;
}
void
SystemGroupImpl
:
:
ShutdownStatic
(
)
{
sSingleton
-
>
Shutdown
(
true
)
;
sSingleton
=
nullptr
;
}
SystemGroupImpl
*
SystemGroupImpl
:
:
Get
(
)
{
MOZ_ASSERT
(
sSingleton
)
;
return
sSingleton
.
get
(
)
;
}
void
SystemGroup
:
:
InitStatic
(
)
{
SystemGroupImpl
:
:
InitStatic
(
)
;
}
void
SystemGroup
:
:
Shutdown
(
)
{
SystemGroupImpl
:
:
ShutdownStatic
(
)
;
}
bool
SystemGroup
:
:
Initialized
(
)
{
return
SystemGroupImpl
:
:
Initialized
(
)
;
}
nsresult
SystemGroup
:
:
Dispatch
(
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
return
SystemGroupImpl
:
:
Get
(
)
-
>
Dispatch
(
aCategory
Move
(
aRunnable
)
)
;
}
nsISerialEventTarget
*
SystemGroup
:
:
EventTargetFor
(
TaskCategory
aCategory
)
{
return
SystemGroupImpl
:
:
Get
(
)
-
>
EventTargetFor
(
aCategory
)
;
}
AbstractThread
*
SystemGroup
:
:
AbstractMainThreadFor
(
TaskCategory
aCategory
)
{
return
SystemGroupImpl
:
:
Get
(
)
-
>
AbstractMainThreadFor
(
aCategory
)
;
}
