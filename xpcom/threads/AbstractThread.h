#
if
!
defined
(
AbstractThread_h_
)
#
define
AbstractThread_h_
#
include
"
nscore
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
namespace
mozilla
{
class
TaskQueue
;
class
TaskDispatcher
;
class
AbstractThread
{
public
:
static
AbstractThread
*
GetCurrent
(
)
{
return
sCurrentThreadTLS
.
get
(
)
;
}
AbstractThread
(
bool
aSupportsTailDispatch
)
:
mSupportsTailDispatch
(
aSupportsTailDispatch
)
{
}
static
already_AddRefed
<
AbstractThread
>
CreateXPCOMThreadWrapper
(
nsIThread
*
aThread
bool
aRequireTailDispatch
)
;
static
already_AddRefed
<
AbstractThread
>
CreateEventTargetWrapper
(
nsIEventTarget
*
aEventTarget
bool
aRequireTailDispatch
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AbstractThread
)
;
enum
DispatchFailureHandling
{
AssertDispatchSuccess
DontAssertDispatchSuccess
}
;
enum
DispatchReason
{
NormalDispatch
TailDispatch
}
;
virtual
void
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
DispatchFailureHandling
aHandling
=
AssertDispatchSuccess
DispatchReason
aReason
=
NormalDispatch
)
=
0
;
virtual
bool
IsCurrentThreadIn
(
)
=
0
;
virtual
bool
IsDispatchReliable
(
)
{
return
true
;
}
virtual
TaskDispatcher
&
TailDispatcher
(
)
=
0
;
virtual
bool
MightHaveTailTasks
(
)
{
return
true
;
}
void
TailDispatchTasksFor
(
AbstractThread
*
aThread
)
;
bool
HasTailTasksFor
(
AbstractThread
*
aThread
)
;
bool
SupportsTailDispatch
(
)
const
{
return
mSupportsTailDispatch
;
}
bool
RequiresTailDispatch
(
AbstractThread
*
aThread
)
const
;
bool
RequiresTailDispatchFromCurrentThread
(
)
const
;
virtual
TaskQueue
*
AsTaskQueue
(
)
{
MOZ_CRASH
(
"
Not
a
task
queue
!
"
)
;
}
virtual
nsIEventTarget
*
AsEventTarget
(
)
{
MOZ_CRASH
(
"
Not
an
event
target
!
"
)
;
}
static
AbstractThread
*
MainThread
(
)
;
static
void
InitStatics
(
)
;
void
DispatchStateChange
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
static
void
DispatchDirectTask
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
virtual
already_AddRefed
<
nsIRunnable
>
CreateDirectTaskDrainer
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
{
MOZ_CRASH
(
"
Not
support
!
"
)
;
}
protected
:
virtual
~
AbstractThread
(
)
{
}
static
MOZ_THREAD_LOCAL
(
AbstractThread
*
)
sCurrentThreadTLS
;
const
bool
mSupportsTailDispatch
;
}
;
}
#
endif
