#
include
"
DelayedRunnable
.
h
"
#
include
"
mozilla
/
ProfilerRunnable
.
h
"
namespace
mozilla
{
DelayedRunnable
:
:
DelayedRunnable
(
already_AddRefed
<
nsISerialEventTarget
>
aTarget
already_AddRefed
<
nsIRunnable
>
aRunnable
uint32_t
aDelay
)
:
mozilla
:
:
Runnable
(
"
DelayedRunnable
"
)
mTarget
(
aTarget
)
mObserver
(
do_QueryInterface
(
mTarget
)
)
mWrappedRunnable
(
aRunnable
)
mDelayedFrom
(
TimeStamp
:
:
NowLoRes
(
)
)
mDelay
(
aDelay
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mObserver
"
Target
must
implement
nsIDelayedRunnableObserver
"
)
;
}
nsresult
DelayedRunnable
:
:
Init
(
)
{
mObserver
-
>
OnDelayedRunnableCreated
(
this
)
;
return
NS_NewTimerWithCallback
(
getter_AddRefs
(
mTimer
)
this
mDelay
nsITimer
:
:
TYPE_ONE_SHOT
mTarget
)
;
}
void
DelayedRunnable
:
:
CancelTimer
(
)
{
MOZ_ASSERT
(
mTarget
-
>
IsOnCurrentThread
(
)
)
;
mTimer
-
>
Cancel
(
)
;
}
NS_IMETHODIMP
DelayedRunnable
:
:
Run
(
)
{
MOZ_ASSERT
(
mTimer
"
DelayedRunnable
without
Init
?
"
)
;
if
(
!
mWrappedRunnable
)
{
return
NS_OK
;
}
if
(
(
mozilla
:
:
TimeStamp
:
:
NowLoRes
(
)
-
mDelayedFrom
)
.
ToMilliseconds
(
)
<
mDelay
)
{
if
(
mObserver
)
{
mObserver
-
>
OnDelayedRunnableScheduled
(
this
)
;
}
return
NS_OK
;
}
mTimer
-
>
Cancel
(
)
;
return
DoRun
(
)
;
}
NS_IMETHODIMP
DelayedRunnable
:
:
Notify
(
nsITimer
*
aTimer
)
{
MOZ_ASSERT
(
mWrappedRunnable
)
;
if
(
mObserver
)
{
mObserver
-
>
OnDelayedRunnableRan
(
this
)
;
}
return
DoRun
(
)
;
}
nsresult
DelayedRunnable
:
:
DoRun
(
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
std
:
:
move
(
mWrappedRunnable
)
;
AUTO_PROFILE_FOLLOWING_RUNNABLE
(
r
)
;
return
r
-
>
Run
(
)
;
}
NS_IMPL_ISUPPORTS_INHERITED
(
DelayedRunnable
Runnable
nsITimerCallback
)
}
