#
ifndef
mozilla_lazyidlethread_h__
#
define
mozilla_lazyidlethread_h__
#
ifndef
MOZILLA_INTERNAL_API
#
error
"
This
header
is
only
usable
from
within
libxul
(
MOZILLA_INTERNAL_API
)
.
"
#
endif
#
include
"
nsINamed
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
define
IDLE_THREAD_TOPIC
"
thread
-
shutting
-
down
"
namespace
mozilla
{
class
LazyIdleThread
final
:
public
nsIThread
public
nsITimerCallback
public
nsIThreadObserver
public
nsIObserver
public
nsINamed
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIEVENTTARGET_FULL
NS_DECL_NSITHREAD
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSITHREADOBSERVER
NS_DECL_NSIOBSERVER
NS_DECL_NSINAMED
enum
ShutdownMethod
{
AutomaticShutdown
=
0
ManualShutdown
}
;
LazyIdleThread
(
uint32_t
aIdleTimeoutMS
const
nsACString
&
aName
ShutdownMethod
aShutdownMethod
=
AutomaticShutdown
nsIObserver
*
aIdleObserver
=
nullptr
)
;
void
SetWeakIdleObserver
(
nsIObserver
*
aObserver
)
;
void
DisableIdleTimeout
(
)
;
void
EnableIdleTimeout
(
)
;
private
:
~
LazyIdleThread
(
)
;
void
PreDispatch
(
)
;
nsresult
EnsureThread
(
)
;
void
InitThread
(
)
;
void
CleanupThread
(
)
;
void
ScheduleTimer
(
)
;
nsresult
ShutdownThread
(
)
;
void
SelfDestruct
(
)
;
bool
UseRunnableQueue
(
)
{
return
!
!
mQueuedRunnables
;
}
mozilla
:
:
Mutex
mMutex
;
nsCOMPtr
<
nsISerialEventTarget
>
mOwningEventTarget
;
nsCOMPtr
<
nsIThread
>
mThread
;
nsCOMPtr
<
nsITimer
>
mIdleTimer
;
nsIObserver
*
MOZ_UNSAFE_REF
(
"
See
the
documentation
for
SetWeakIdleObserver
for
"
"
how
the
owner
of
LazyIdleThread
should
manage
the
"
"
lifetime
information
of
this
field
"
)
mIdleObserver
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
*
mQueuedRunnables
;
const
uint32_t
mIdleTimeoutMS
;
uint32_t
mPendingEventCount
GUARDED_BY
(
mMutex
)
;
uint32_t
mIdleNotificationCount
GUARDED_BY
(
mMutex
)
;
ShutdownMethod
mShutdownMethod
;
bool
mShutdown
;
bool
mThreadIsShuttingDown
GUARDED_BY
(
mMutex
)
;
bool
mIdleTimeoutEnabled
;
nsCString
mName
;
}
;
}
#
endif
