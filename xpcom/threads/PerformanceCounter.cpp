#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
PerformanceCounter
.
h
"
using
mozilla
:
:
DispatchCategory
;
using
mozilla
:
:
DispatchCounter
;
using
mozilla
:
:
PerformanceCounter
;
static
mozilla
:
:
LazyLogModule
sPerformanceCounter
(
"
PerformanceCounter
"
)
;
#
ifdef
LOG
#
undef
LOG
#
endif
#
define
LOG
(
args
)
MOZ_LOG
(
sPerformanceCounter
mozilla
:
:
LogLevel
:
:
Debug
args
)
static
mozilla
:
:
Atomic
<
uint64_t
>
gNextCounterID
(
0
)
;
static
uint64_t
NextCounterID
(
)
{
return
+
+
gNextCounterID
;
}
const
DispatchCategory
DispatchCategory
:
:
Worker
=
DispatchCategory
(
(
uint32_t
)
TaskCategory
:
:
Count
)
;
PerformanceCounter
:
:
PerformanceCounter
(
const
nsACString
&
aName
)
:
mExecutionDuration
(
0
)
mTotalDispatchCount
(
0
)
mDispatchCounter
(
)
mName
(
aName
)
mID
(
NextCounterID
(
)
)
{
LOG
(
(
"
PerformanceCounter
created
with
ID
%
"
PRIu64
mID
)
)
;
}
void
PerformanceCounter
:
:
IncrementDispatchCounter
(
DispatchCategory
aCategory
)
{
mDispatchCounter
[
aCategory
.
GetValue
(
)
]
+
=
1
;
mTotalDispatchCount
+
=
1
;
LOG
(
(
"
[
%
s
]
[
%
"
PRIu64
"
]
Total
dispatch
%
"
PRIu64
mName
.
get
(
)
GetID
(
)
uint64_t
(
mTotalDispatchCount
)
)
)
;
}
void
PerformanceCounter
:
:
IncrementExecutionDuration
(
uint32_t
aMicroseconds
)
{
mExecutionDuration
+
=
aMicroseconds
;
LOG
(
(
"
[
%
s
]
[
%
"
PRIu64
"
]
Total
duration
%
"
PRIu64
mName
.
get
(
)
GetID
(
)
uint64_t
(
mExecutionDuration
)
)
)
;
}
const
DispatchCounter
&
PerformanceCounter
:
:
GetDispatchCounter
(
)
const
{
return
mDispatchCounter
;
}
uint64_t
PerformanceCounter
:
:
GetExecutionDuration
(
)
const
{
return
mExecutionDuration
;
}
uint64_t
PerformanceCounter
:
:
GetTotalDispatchCount
(
)
const
{
return
mTotalDispatchCount
;
}
uint32_t
PerformanceCounter
:
:
GetDispatchCount
(
DispatchCategory
aCategory
)
const
{
return
mDispatchCounter
[
aCategory
.
GetValue
(
)
]
;
}
uint64_t
PerformanceCounter
:
:
GetID
(
)
const
{
return
mID
;
}
