#
ifndef
IdleTaskRunner_h
#
define
IdleTaskRunner_h
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TaskCategory
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
<
functional
>
namespace
mozilla
{
class
IdleTaskRunner
final
:
public
IdleRunnable
{
public
:
using
CallbackType
=
std
:
:
function
<
bool
(
TimeStamp
aDeadline
)
>
;
using
MayStopProcessingCallbackType
=
std
:
:
function
<
bool
(
)
>
;
public
:
static
already_AddRefed
<
IdleTaskRunner
>
Create
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
uint32_t
aDelay
int64_t
aBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
;
NS_IMETHOD
Run
(
)
override
;
void
SetDeadline
(
mozilla
:
:
TimeStamp
aDeadline
)
override
;
void
SetTimer
(
uint32_t
aDelay
nsIEventTarget
*
aTarget
)
override
;
nsresult
Cancel
(
)
override
;
void
Schedule
(
bool
aAllowIdleDispatch
)
;
private
:
explicit
IdleTaskRunner
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
uint32_t
aDelay
int64_t
aBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
;
~
IdleTaskRunner
(
)
;
void
CancelTimer
(
)
;
void
SetTimerInternal
(
uint32_t
aDelay
)
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsCOMPtr
<
nsITimer
>
mScheduleTimer
;
CallbackType
mCallback
;
uint32_t
mDelay
;
TimeStamp
mDeadline
;
TimeDuration
mBudget
;
bool
mRepeating
;
bool
mTimerActive
;
MayStopProcessingCallbackType
mMayStopProcessing
;
const
char
*
mName
;
}
;
}
#
endif
