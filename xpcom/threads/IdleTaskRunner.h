#
ifndef
IdleTaskRunner_h
#
define
IdleTaskRunner_h
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
typedef
bool
(
*
IdleTaskRunnerCallback
)
(
TimeStamp
aDeadline
void
*
aData
)
;
class
IdleTaskRunner
final
:
public
IdleRunnable
{
public
:
static
already_AddRefed
<
IdleTaskRunner
>
Create
(
IdleTaskRunnerCallback
aCallback
uint32_t
aDelay
int64_t
aBudget
bool
aRepeating
void
*
aData
=
nullptr
)
;
NS_IMETHOD
Run
(
)
override
;
void
SetDeadline
(
mozilla
:
:
TimeStamp
aDeadline
)
override
;
void
SetTimer
(
uint32_t
aDelay
nsIEventTarget
*
aTarget
)
override
;
nsresult
Cancel
(
)
override
;
void
Schedule
(
bool
aAllowIdleDispatch
)
;
private
:
explicit
IdleTaskRunner
(
IdleTaskRunnerCallback
aCallback
uint32_t
aDelay
int64_t
aBudget
bool
aRepeating
void
*
aData
)
;
~
IdleTaskRunner
(
)
;
void
CancelTimer
(
)
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsCOMPtr
<
nsITimer
>
mScheduleTimer
;
nsCOMPtr
<
nsIEventTarget
>
mTarget
;
IdleTaskRunnerCallback
mCallback
;
uint32_t
mDelay
;
TimeStamp
mDeadline
;
TimeDuration
mBudget
;
bool
mRepeating
;
bool
mTimerActive
;
void
*
mData
;
}
;
}
#
endif
