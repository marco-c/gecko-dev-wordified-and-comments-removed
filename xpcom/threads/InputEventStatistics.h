#
if
!
defined
(
InputEventStatistics_h_
)
#
define
InputEventStatistics_h_
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
class
InputEventStatistics
{
static
const
uint16_t
sDefaultInputDuration
=
1
;
static
const
uint16_t
sInputCountForPrediction
=
9
;
static
const
uint16_t
sMaxReservedTimeForHandlingInput
=
8
;
static
const
uint16_t
sMinReservedTimeForHandlingInput
=
1
;
class
TimeDurationCircularBuffer
{
int16_t
mSize
;
int16_t
mCurrentIndex
;
nsTArray
<
TimeDuration
>
mBuffer
;
TimeDuration
mTotal
;
public
:
TimeDurationCircularBuffer
(
uint32_t
aSize
TimeDuration
&
aDefaultValue
)
:
mSize
(
aSize
)
mCurrentIndex
(
0
)
{
mSize
=
mSize
=
=
0
?
sInputCountForPrediction
:
mSize
;
for
(
int16_t
index
=
0
;
index
<
mSize
;
+
+
index
)
{
mBuffer
.
AppendElement
(
aDefaultValue
)
;
mTotal
+
=
aDefaultValue
;
}
}
void
Insert
(
TimeDuration
&
aDuration
)
{
mTotal
+
=
(
aDuration
-
mBuffer
[
mCurrentIndex
]
)
;
mBuffer
[
mCurrentIndex
+
+
]
=
aDuration
;
if
(
mCurrentIndex
=
=
mSize
)
{
mCurrentIndex
=
0
;
}
}
TimeDuration
GetMean
(
)
;
}
;
UniquePtr
<
TimeDurationCircularBuffer
>
mLastInputDurations
;
TimeDuration
mMaxInputDuration
;
TimeDuration
mMinInputDuration
;
bool
mEnable
;
struct
ConstructorCookie
{
}
;
public
:
explicit
InputEventStatistics
(
ConstructorCookie
&
&
)
;
~
InputEventStatistics
(
)
{
}
static
InputEventStatistics
&
Get
(
)
{
static
UniquePtr
<
InputEventStatistics
>
sInstance
;
if
(
!
sInstance
)
{
sInstance
=
MakeUnique
<
InputEventStatistics
>
(
ConstructorCookie
(
)
)
;
ClearOnShutdown
(
&
sInstance
)
;
}
return
*
sInstance
;
}
void
UpdateInputDuration
(
TimeDuration
aDuration
)
{
if
(
!
mEnable
)
{
return
;
}
mLastInputDurations
-
>
Insert
(
aDuration
)
;
}
TimeStamp
GetInputHandlingStartTime
(
uint32_t
aInputCount
)
;
void
SetEnable
(
bool
aEnable
)
{
mEnable
=
aEnable
;
}
}
;
class
MOZ_RAII
AutoTimeDurationHelper
final
{
public
:
AutoTimeDurationHelper
(
)
{
mStartTime
=
TimeStamp
:
:
Now
(
)
;
}
~
AutoTimeDurationHelper
(
)
{
InputEventStatistics
:
:
Get
(
)
.
UpdateInputDuration
(
TimeStamp
:
:
Now
(
)
-
mStartTime
)
;
}
private
:
TimeStamp
mStartTime
;
}
;
}
#
endif
