#
include
"
IdleTaskRunner
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
namespace
mozilla
{
already_AddRefed
<
IdleTaskRunner
>
IdleTaskRunner
:
:
Create
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
TimeDuration
aStartDelay
TimeDuration
aMaxDelay
TimeDuration
aMinimumUsefulBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
{
if
(
aMayStopProcessing
&
&
aMayStopProcessing
(
)
)
{
return
nullptr
;
}
RefPtr
<
IdleTaskRunner
>
runner
=
new
IdleTaskRunner
(
aCallback
aRunnableName
aStartDelay
aMaxDelay
aMinimumUsefulBudget
aRepeating
aMayStopProcessing
)
;
runner
-
>
Schedule
(
false
)
;
return
runner
.
forget
(
)
;
}
class
IdleTaskRunnerTask
:
public
Task
{
public
:
explicit
IdleTaskRunnerTask
(
IdleTaskRunner
*
aRunner
)
:
Task
(
true
EventQueuePriority
:
:
Idle
)
mRunner
(
aRunner
)
{
SetManager
(
TaskController
:
:
Get
(
)
-
>
GetIdleTaskManager
(
)
)
;
}
bool
Run
(
)
override
{
if
(
mRunner
)
{
RefPtr
<
IdleTaskRunner
>
runner
(
mRunner
)
;
runner
-
>
Run
(
)
;
}
return
true
;
}
void
SetIdleDeadline
(
TimeStamp
aDeadline
)
override
{
if
(
mRunner
)
{
mRunner
-
>
SetIdleDeadline
(
aDeadline
)
;
}
}
void
Cancel
(
)
{
mRunner
=
nullptr
;
}
bool
GetName
(
nsACString
&
aName
)
override
{
if
(
mRunner
)
{
aName
.
Assign
(
mRunner
-
>
GetName
(
)
)
;
}
else
{
aName
.
Assign
(
"
ExpiredIdleTaskRunner
"
)
;
}
return
true
;
}
private
:
IdleTaskRunner
*
mRunner
;
}
;
IdleTaskRunner
:
:
IdleTaskRunner
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
TimeDuration
aStartDelay
TimeDuration
aMaxDelay
TimeDuration
aMinimumUsefulBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
:
mCallback
(
aCallback
)
mStartTime
(
TimeStamp
:
:
Now
(
)
+
aStartDelay
)
mMaxDelay
(
aMaxDelay
)
mMinimumUsefulBudget
(
aMinimumUsefulBudget
)
mRepeating
(
aRepeating
)
mTimerActive
(
false
)
mMayStopProcessing
(
aMayStopProcessing
)
mName
(
aRunnableName
)
{
}
void
IdleTaskRunner
:
:
Run
(
)
{
if
(
!
mCallback
)
{
return
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
bool
overdueForIdle
=
mDeadline
.
IsNull
(
)
;
bool
didRun
=
false
;
bool
allowIdleDispatch
=
false
;
if
(
mTask
)
{
nsRefreshDriver
:
:
CancelIdleTask
(
mTask
)
;
mTask
-
>
Cancel
(
)
;
mTask
=
nullptr
;
}
if
(
overdueForIdle
|
|
(
(
now
+
mMinimumUsefulBudget
)
<
mDeadline
)
)
{
CancelTimer
(
)
;
didRun
=
mCallback
(
mDeadline
)
;
allowIdleDispatch
=
didRun
;
}
else
if
(
now
>
=
mDeadline
)
{
allowIdleDispatch
=
true
;
}
if
(
mCallback
&
&
(
mRepeating
|
|
!
didRun
)
)
{
Schedule
(
allowIdleDispatch
)
;
}
else
{
mCallback
=
nullptr
;
}
}
static
void
TimedOut
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
IdleTaskRunner
>
runner
=
static_cast
<
IdleTaskRunner
*
>
(
aClosure
)
;
runner
-
>
Run
(
)
;
}
void
IdleTaskRunner
:
:
SetIdleDeadline
(
mozilla
:
:
TimeStamp
aDeadline
)
{
mDeadline
=
aDeadline
;
}
void
IdleTaskRunner
:
:
SetMinimumUsefulBudget
(
int64_t
aMinimumUsefulBudget
)
{
mMinimumUsefulBudget
=
TimeDuration
:
:
FromMilliseconds
(
aMinimumUsefulBudget
)
;
}
void
IdleTaskRunner
:
:
SetTimer
(
TimeDuration
aDelay
nsIEventTarget
*
aTarget
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aTarget
-
>
IsOnCurrentThread
(
)
)
;
SetTimerInternal
(
aDelay
)
;
}
void
IdleTaskRunner
:
:
Cancel
(
)
{
CancelTimer
(
)
;
mTimer
=
nullptr
;
mScheduleTimer
=
nullptr
;
mCallback
=
nullptr
;
}
static
void
ScheduleTimedOut
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
IdleTaskRunner
>
runnable
=
static_cast
<
IdleTaskRunner
*
>
(
aClosure
)
;
runnable
-
>
Schedule
(
true
)
;
}
void
IdleTaskRunner
:
:
ScheduleAfterDelay
(
TimeDuration
aDelay
)
{
if
(
!
mScheduleTimer
)
{
mScheduleTimer
=
NS_NewTimer
(
)
;
if
(
!
mScheduleTimer
)
{
return
;
}
}
else
{
mScheduleTimer
-
>
Cancel
(
)
;
}
mScheduleTimer
-
>
InitWithNamedFuncCallback
(
ScheduleTimedOut
this
static_cast
<
unsigned
long
>
(
aDelay
.
ToMilliseconds
(
)
)
nsITimer
:
:
TYPE_ONE_SHOT_LOW_PRIORITY
mName
)
;
return
;
}
void
IdleTaskRunner
:
:
Schedule
(
bool
aAllowIdleDispatch
)
{
if
(
!
mCallback
)
{
return
;
}
if
(
mMayStopProcessing
&
&
mMayStopProcessing
(
)
)
{
Cancel
(
)
;
return
;
}
mDeadline
=
TimeStamp
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
now
<
mStartTime
)
{
ScheduleAfterDelay
(
mStartTime
-
now
+
TimeDuration
:
:
FromMilliseconds
(
1
)
)
;
return
;
}
if
(
nsRefreshDriver
:
:
IsRegularRateTimerTicking
(
)
)
{
if
(
!
mTask
)
{
mTask
=
new
IdleTaskRunnerTask
(
this
)
;
nsRefreshDriver
:
:
DispatchIdleTaskAfterTickUnlessExists
(
mTask
)
;
}
SetTimerInternal
(
mMaxDelay
)
;
return
;
}
if
(
!
aAllowIdleDispatch
)
{
ScheduleAfterDelay
(
TimeDuration
:
:
FromMilliseconds
(
16
)
)
;
return
;
}
SetTimerInternal
(
mMaxDelay
)
;
if
(
!
mTask
)
{
mTask
=
new
IdleTaskRunnerTask
(
this
)
;
RefPtr
<
Task
>
task
(
mTask
)
;
TaskController
:
:
Get
(
)
-
>
AddTask
(
task
.
forget
(
)
)
;
}
}
IdleTaskRunner
:
:
~
IdleTaskRunner
(
)
{
CancelTimer
(
)
;
}
void
IdleTaskRunner
:
:
CancelTimer
(
)
{
if
(
mTask
)
{
nsRefreshDriver
:
:
CancelIdleTask
(
mTask
)
;
mTask
-
>
Cancel
(
)
;
mTask
=
nullptr
;
}
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
}
if
(
mScheduleTimer
)
{
mScheduleTimer
-
>
Cancel
(
)
;
}
mTimerActive
=
false
;
}
void
IdleTaskRunner
:
:
SetTimerInternal
(
TimeDuration
aDelay
)
{
if
(
mTimerActive
)
{
return
;
}
if
(
!
mTimer
)
{
mTimer
=
NS_NewTimer
(
)
;
}
else
{
mTimer
-
>
Cancel
(
)
;
}
if
(
mTimer
)
{
mTimer
-
>
InitWithNamedFuncCallback
(
TimedOut
this
aDelay
.
ToMilliseconds
(
)
nsITimer
:
:
TYPE_ONE_SHOT
mName
)
;
mTimerActive
=
true
;
}
}
}
