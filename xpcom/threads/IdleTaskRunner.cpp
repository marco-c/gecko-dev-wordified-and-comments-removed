#
include
"
IdleTaskRunner
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
namespace
mozilla
{
already_AddRefed
<
IdleTaskRunner
>
IdleTaskRunner
:
:
Create
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
uint32_t
aStartDelay
uint32_t
aMaxDelay
int64_t
aMinimumUsefulBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
{
if
(
aMayStopProcessing
&
&
aMayStopProcessing
(
)
)
{
return
nullptr
;
}
RefPtr
<
IdleTaskRunner
>
runner
=
new
IdleTaskRunner
(
aCallback
aRunnableName
aStartDelay
aMaxDelay
aMinimumUsefulBudget
aRepeating
aMayStopProcessing
)
;
runner
-
>
Schedule
(
false
)
;
return
runner
.
forget
(
)
;
}
IdleTaskRunner
:
:
IdleTaskRunner
(
const
CallbackType
&
aCallback
const
char
*
aRunnableName
uint32_t
aStartDelay
uint32_t
aMaxDelay
int64_t
aMinimumUsefulBudget
bool
aRepeating
const
MayStopProcessingCallbackType
&
aMayStopProcessing
)
:
CancelableIdleRunnable
(
aRunnableName
)
mCallback
(
aCallback
)
mStartTime
(
TimeStamp
:
:
Now
(
)
+
TimeDuration
:
:
FromMilliseconds
(
aStartDelay
)
)
mMaxDelay
(
aMaxDelay
)
mMinimumUsefulBudget
(
TimeDuration
:
:
FromMilliseconds
(
aMinimumUsefulBudget
)
)
mRepeating
(
aRepeating
)
mTimerActive
(
false
)
mMayStopProcessing
(
aMayStopProcessing
)
mName
(
aRunnableName
)
{
}
NS_IMETHODIMP
IdleTaskRunner
:
:
Run
(
)
{
if
(
!
mCallback
)
{
return
NS_OK
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
bool
overdueForIdle
=
mDeadline
.
IsNull
(
)
;
bool
didRun
=
false
;
bool
allowIdleDispatch
=
false
;
if
(
overdueForIdle
|
|
(
(
now
+
mMinimumUsefulBudget
)
<
mDeadline
)
)
{
CancelTimer
(
)
;
didRun
=
mCallback
(
mDeadline
)
;
allowIdleDispatch
=
didRun
;
}
else
if
(
now
>
=
mDeadline
)
{
allowIdleDispatch
=
true
;
}
if
(
mCallback
&
&
(
mRepeating
|
|
!
didRun
)
)
{
Schedule
(
allowIdleDispatch
)
;
}
else
{
mCallback
=
nullptr
;
}
return
NS_OK
;
}
static
void
TimedOut
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
IdleTaskRunner
>
runnable
=
static_cast
<
IdleTaskRunner
*
>
(
aClosure
)
;
runnable
-
>
Run
(
)
;
}
void
IdleTaskRunner
:
:
SetDeadline
(
mozilla
:
:
TimeStamp
aDeadline
)
{
mDeadline
=
aDeadline
;
}
void
IdleTaskRunner
:
:
SetMinimumUsefulBudget
(
int64_t
aMinimumUsefulBudget
)
{
mMinimumUsefulBudget
=
TimeDuration
:
:
FromMilliseconds
(
aMinimumUsefulBudget
)
;
}
void
IdleTaskRunner
:
:
SetTimer
(
uint32_t
aDelay
nsIEventTarget
*
aTarget
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aTarget
-
>
IsOnCurrentThread
(
)
)
;
SetTimerInternal
(
aDelay
)
;
}
nsresult
IdleTaskRunner
:
:
Cancel
(
)
{
CancelTimer
(
)
;
mTimer
=
nullptr
;
mScheduleTimer
=
nullptr
;
mCallback
=
nullptr
;
return
NS_OK
;
}
static
void
ScheduleTimedOut
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
IdleTaskRunner
>
runnable
=
static_cast
<
IdleTaskRunner
*
>
(
aClosure
)
;
runnable
-
>
Schedule
(
true
)
;
}
void
IdleTaskRunner
:
:
Schedule
(
bool
aAllowIdleDispatch
)
{
if
(
!
mCallback
)
{
return
;
}
if
(
mMayStopProcessing
&
&
mMayStopProcessing
(
)
)
{
Cancel
(
)
;
return
;
}
mDeadline
=
TimeStamp
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
bool
useRefreshDriver
=
false
;
if
(
now
>
=
mStartTime
)
{
useRefreshDriver
=
(
nsRefreshDriver
:
:
GetIdleDeadlineHint
(
now
)
!
=
now
)
;
}
else
{
NS_WARNING_ASSERTION
(
!
aAllowIdleDispatch
"
early
callback
or
time
went
backwards
"
)
;
}
if
(
useRefreshDriver
)
{
nsRefreshDriver
:
:
DispatchIdleRunnableAfterTickUnlessExists
(
this
mMaxDelay
)
;
SetTimerInternal
(
mMaxDelay
)
;
}
else
{
if
(
aAllowIdleDispatch
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
this
;
SetTimerInternal
(
mMaxDelay
)
;
NS_DispatchToCurrentThreadQueue
(
runnable
.
forget
(
)
EventQueuePriority
:
:
Idle
)
;
}
else
{
if
(
!
mScheduleTimer
)
{
mScheduleTimer
=
NS_NewTimer
(
)
;
if
(
!
mScheduleTimer
)
{
return
;
}
}
else
{
mScheduleTimer
-
>
Cancel
(
)
;
}
uint32_t
waitToSchedule
=
16
;
if
(
now
<
mStartTime
)
{
waitToSchedule
=
(
mStartTime
-
now
)
.
ToMilliseconds
(
)
+
1
;
}
mScheduleTimer
-
>
InitWithNamedFuncCallback
(
ScheduleTimedOut
this
waitToSchedule
nsITimer
:
:
TYPE_ONE_SHOT_LOW_PRIORITY
mName
)
;
}
}
}
IdleTaskRunner
:
:
~
IdleTaskRunner
(
)
{
CancelTimer
(
)
;
}
void
IdleTaskRunner
:
:
CancelTimer
(
)
{
nsRefreshDriver
:
:
CancelIdleRunnable
(
this
)
;
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
}
if
(
mScheduleTimer
)
{
mScheduleTimer
-
>
Cancel
(
)
;
}
mTimerActive
=
false
;
}
void
IdleTaskRunner
:
:
SetTimerInternal
(
uint32_t
aDelay
)
{
if
(
mTimerActive
)
{
return
;
}
if
(
!
mTimer
)
{
mTimer
=
NS_NewTimer
(
)
;
}
else
{
mTimer
-
>
Cancel
(
)
;
}
if
(
mTimer
)
{
mTimer
-
>
InitWithNamedFuncCallback
(
TimedOut
this
aDelay
nsITimer
:
:
TYPE_ONE_SHOT
mName
)
;
mTimerActive
=
true
;
}
}
}
