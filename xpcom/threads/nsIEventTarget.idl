#
include
"
nsISupports
.
idl
"
#
include
"
nsIRunnable
.
idl
"
%
{
C
+
+
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
class
nsITargetShutdownTask
;
%
}
native
alreadyAddRefed_nsIRunnable
(
already_AddRefed
<
nsIRunnable
>
)
;
[
ptr
]
native
nsITargetShutdownTask
(
nsITargetShutdownTask
)
;
[
builtinclass
scriptable
rust_sync
uuid
(
a03b8b63
-
af8b
-
4164
-
b0e5
-
c41e8b2b7cfa
)
]
interface
nsIEventTarget
:
nsISupports
{
cenum
DispatchFlags
:
32
{
DISPATCH_NORMAL
=
0
DISPATCH_AT_END
=
1
<
<
1
DISPATCH_EVENT_MAY_BLOCK
=
1
<
<
2
DISPATCH_IGNORE_BLOCK_DISPATCH
=
1
<
<
3
DISPATCH_FALLIBLE
=
1
<
<
4
}
;
%
{
C
+
+
public
:
bool
IsOnCurrentThread
(
)
;
protected
:
mozilla
:
:
Atomic
<
PRThread
*
>
mThread
;
nsIEventTarget
(
)
:
mThread
(
nullptr
)
{
}
%
}
[
noscript
notxpcom
]
boolean
isOnCurrentThreadInfallible
(
)
;
%
{
C
+
+
public
:
%
}
boolean
isOnCurrentThread
(
)
;
%
{
C
+
+
nsresult
Dispatch
(
nsIRunnable
*
aEvent
DispatchFlags
aFlags
)
{
return
Dispatch
(
nsCOMPtr
<
nsIRunnable
>
(
aEvent
)
.
forget
(
)
aFlags
)
;
}
%
}
[
noscript
binaryname
(
Dispatch
)
]
void
dispatchFromC
(
in
alreadyAddRefed_nsIRunnable
event
[
default
(
DISPATCH_NORMAL
)
]
in
nsIEventTarget_DispatchFlags
flags
)
;
[
binaryname
(
DispatchFromScript
)
]
void
dispatch
(
in
nsIRunnable
event
in
nsIEventTarget_DispatchFlags
flags
)
;
[
noscript
]
void
delayedDispatch
(
in
alreadyAddRefed_nsIRunnable
event
in
unsigned
long
delay
)
;
[
noscript
]
void
registerShutdownTask
(
in
nsITargetShutdownTask
task
)
;
[
noscript
]
void
unregisterShutdownTask
(
in
nsITargetShutdownTask
task
)
;
}
;
%
{
C
+
+
#
define
NS_DISPATCH_NORMAL
nsIEventTarget
:
:
DISPATCH_NORMAL
#
define
NS_DISPATCH_AT_END
nsIEventTarget
:
:
DISPATCH_AT_END
#
define
NS_DISPATCH_EVENT_MAY_BLOCK
nsIEventTarget
:
:
DISPATCH_EVENT_MAY_BLOCK
#
define
NS_DISPATCH_IGNORE_BLOCK_DISPATCH
nsIEventTarget
:
:
DISPATCH_IGNORE_BLOCK_DISPATCH
#
define
NS_DISPATCH_FALLIBLE
nsIEventTarget
:
:
DISPATCH_FALLIBLE
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
nsIEventTarget
:
:
DispatchFlags
)
#
define
NS_DECL_NSIEVENTTARGET_FULL
\
NS_DECL_NSIEVENTTARGET
\
/
*
Avoid
hiding
these
methods
*
/
\
using
nsIEventTarget
:
:
Dispatch
;
\
using
nsIEventTarget
:
:
IsOnCurrentThread
;
%
}
