#
ifndef
nsThreadManager_h__
#
define
nsThreadManager_h__
#
include
"
nsIThreadManager
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
mozilla
/
ShutdownPhase
.
h
"
class
nsIRunnable
;
class
nsIThread
;
namespace
mozilla
{
class
IdleTaskManager
;
class
SynchronizedEventQueue
;
class
TaskQueue
;
template
<
typename
T
>
class
NeverDestroyed
;
}
class
BackgroundEventTarget
;
class
nsThreadManager
:
public
nsIThreadManager
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSITHREADMANAGER
static
nsThreadManager
&
get
(
)
;
nsresult
Init
(
)
;
void
ShutdownNonMainThreads
(
)
;
void
ShutdownMainThread
(
)
;
void
ReleaseMainThread
(
)
;
void
RegisterCurrentThread
(
nsThread
&
aThread
)
;
void
UnregisterCurrentThread
(
nsThread
&
aThread
)
;
nsThread
*
GetCurrentThread
(
)
;
bool
IsNSThread
(
)
const
;
nsThread
*
CreateCurrentThread
(
mozilla
:
:
SynchronizedEventQueue
*
aQueue
)
;
nsresult
DispatchToBackgroundThread
(
nsIRunnable
*
aEvent
uint32_t
aDispatchFlags
)
;
already_AddRefed
<
mozilla
:
:
TaskQueue
>
CreateBackgroundTaskQueue
(
const
char
*
aName
)
;
~
nsThreadManager
(
)
;
void
EnableMainThreadEventPrioritization
(
)
;
void
FlushInputEventPrioritization
(
)
;
void
SuspendInputEventPrioritization
(
)
;
void
ResumeInputEventPrioritization
(
)
;
static
bool
MainThreadHasPendingHighPriorityEvents
(
)
;
nsIThread
*
GetMainThreadWeak
(
)
{
return
mMainThread
;
}
mozilla
:
:
OffTheBooksMutex
&
ThreadListMutex
(
)
MOZ_RETURN_CAPABILITY
(
mMutex
)
{
return
mMutex
;
}
bool
AllowNewXPCOMThreads
(
)
MOZ_EXCLUDES
(
mMutex
)
;
bool
AllowNewXPCOMThreadsLocked
(
)
MOZ_REQUIRES
(
mMutex
)
{
return
mState
=
=
State
:
:
eActive
;
}
mozilla
:
:
LinkedList
<
nsThread
>
&
ThreadList
(
)
MOZ_REQUIRES
(
mMutex
)
{
return
mThreadList
;
}
private
:
friend
class
mozilla
:
:
NeverDestroyed
<
nsThreadManager
>
;
nsThreadManager
(
)
;
nsresult
SpinEventLoopUntilInternal
(
const
nsACString
&
aVeryGoodReasonToDoThis
nsINestedEventLoopCondition
*
aCondition
mozilla
:
:
ShutdownPhase
aShutdownPhaseToCheck
)
;
static
void
ReleaseThread
(
void
*
aData
)
;
enum
class
State
:
uint8_t
{
eUninit
eActive
eShutdown
}
;
unsigned
mCurThreadIndex
;
RefPtr
<
nsThread
>
mMainThread
;
mutable
mozilla
:
:
OffTheBooksMutex
mMutex
;
State
mState
MOZ_GUARDED_BY
(
mMutex
)
;
mozilla
:
:
LinkedList
<
nsThread
>
mThreadList
MOZ_GUARDED_BY
(
mMutex
)
;
RefPtr
<
BackgroundEventTarget
>
mBackgroundEventTarget
MOZ_GUARDED_BY
(
mMutex
)
;
}
;
#
define
NS_THREADMANAGER_CID
\
{
/
*
7a4204c6
-
e45a
-
4c37
-
8ebb
-
6709a22c917c
*
/
\
0x7a4204c6
0xe45a
0x4c37
{
\
0x8e
0xbb
0x67
0x09
0xa2
0x2c
0x91
0x7c
\
}
\
}
#
endif
