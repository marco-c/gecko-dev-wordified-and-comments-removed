#
ifndef
mozilla_ThreadStackHelper_h
#
define
mozilla_ThreadStackHelper_h
#
include
"
mozilla
/
ThreadHangStats
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
<
stddef
.
h
>
#
if
defined
(
XP_LINUX
)
#
include
<
signal
.
h
>
#
include
<
semaphore
.
h
>
#
include
<
sys
/
types
.
h
>
#
elif
defined
(
XP_WIN
)
#
include
<
windows
.
h
>
#
elif
defined
(
XP_MACOSX
)
#
include
<
mach
/
mach
.
h
>
#
endif
#
if
(
defined
(
XP_LINUX
)
&
&
defined
(
HAVE_64BIT_BUILD
)
)
|
|
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
#
ifdef
MOZ_GECKO_PROFILER
#
define
MOZ_THREADSTACKHELPER_PSEUDO
#
define
MOZ_THREADSTACKHELPER_NATIVE
#
endif
#
endif
#
if
defined
(
__ANDROID__
)
#
undef
MOZ_THREADSTACKHELPER_PSEUDO
#
undef
MOZ_THREADSTACKHELPER_NATIVE
#
endif
namespace
mozilla
{
class
ThreadStackHelper
{
public
:
typedef
Telemetry
:
:
HangStack
Stack
;
typedef
Telemetry
:
:
NativeHangStack
NativeStack
;
private
:
#
ifdef
MOZ_THREADSTACKHELPER_PSEUDO
Stack
*
mStackToFill
;
const
PseudoStack
*
const
mPseudoStack
;
size_t
mMaxStackSize
;
size_t
mMaxBufferSize
;
#
endif
#
ifdef
MOZ_THREADSTACKHELPER_NATIVE
NativeStack
*
mNativeStackToFill
;
#
endif
bool
PrepareStackBuffer
(
Stack
&
aStack
)
;
void
FillStackBuffer
(
)
;
#
ifdef
MOZ_THREADSTACKHELPER_PSEUDO
const
char
*
AppendJSEntry
(
const
js
:
:
ProfileEntry
*
aEntry
intptr_t
&
aAvailableBufferSize
const
char
*
aPrevLabel
)
;
#
endif
public
:
ThreadStackHelper
(
)
;
void
GetPseudoStack
(
Stack
&
aStack
nsACString
&
aRunnableName
)
;
void
GetNativeStack
(
NativeStack
&
aNativeStack
nsACString
&
aRunnableName
)
;
void
GetPseudoAndNativeStack
(
Stack
&
aStack
NativeStack
&
aNativeStack
nsACString
&
aRunnableName
)
;
private
:
void
GetStacksInternal
(
Stack
*
aStack
NativeStack
*
aNativeStack
nsACString
&
aRunnableName
)
;
int
mThreadId
;
}
;
}
#
endif
