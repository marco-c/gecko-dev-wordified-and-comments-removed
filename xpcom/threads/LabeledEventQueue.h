#
ifndef
mozilla_LabeledEventQueue_h
#
define
mozilla_LabeledEventQueue_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
AbstractEventQueue
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
Queue
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
namespace
mozilla
{
class
SchedulerGroup
;
class
LabeledEventQueue
final
:
public
AbstractEventQueue
{
public
:
explicit
LabeledEventQueue
(
EventPriority
aPriority
)
;
~
LabeledEventQueue
(
)
;
void
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventPriority
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
already_AddRefed
<
nsIRunnable
>
GetEvent
(
EventPriority
*
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
bool
IsEmpty
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
size_t
Count
(
const
MutexAutoLock
&
aProofOfLock
)
const
final
override
;
bool
HasReadyEvent
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
void
EnableInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
{
}
void
FlushInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
{
}
void
SuspendInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
{
}
void
ResumeInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
{
}
private
:
struct
Epoch
{
static
Epoch
First
(
bool
aIsLabeled
)
{
uintptr_t
number
=
aIsLabeled
?
1
:
0
;
return
Epoch
(
number
aIsLabeled
)
;
}
static
bool
EpochNumberIsLabeled
(
uintptr_t
aEpochNumber
)
{
return
(
aEpochNumber
&
1
)
?
true
:
false
;
}
uintptr_t
mEpochNumber
;
size_t
mNumEvents
;
Epoch
(
uintptr_t
aEpochNumber
bool
aIsLabeled
)
:
mEpochNumber
(
aEpochNumber
)
mNumEvents
(
0
)
{
MOZ_ASSERT
(
aIsLabeled
=
=
EpochNumberIsLabeled
(
aEpochNumber
)
)
;
}
bool
IsLabeled
(
)
const
{
return
EpochNumberIsLabeled
(
mEpochNumber
)
;
}
Epoch
NextEpoch
(
bool
aIsLabeled
)
const
{
MOZ_ASSERT
(
aIsLabeled
=
=
!
IsLabeled
(
)
)
;
return
Epoch
(
mEpochNumber
+
1
aIsLabeled
)
;
}
}
;
void
PopEpoch
(
)
;
static
SchedulerGroup
*
NextSchedulerGroup
(
SchedulerGroup
*
aGroup
)
;
using
RunnableEpochQueue
=
SchedulerGroup
:
:
RunnableEpochQueue
;
using
EpochQueue
=
Queue
<
Epoch
8
>
;
static
LinkedList
<
SchedulerGroup
>
*
sSchedulerGroups
;
static
size_t
sLabeledEventQueueCount
;
static
SchedulerGroup
*
sCurrentSchedulerGroup
;
RunnableEpochQueue
mUnlabeled
;
EpochQueue
mEpochs
;
size_t
mNumEvents
=
0
;
int64_t
mAvoidVisibleTabCount
=
0
;
EventPriority
mPriority
;
}
;
}
#
endif
