#
ifndef
mozilla_Mutex_h
#
define
mozilla_Mutex_h
#
include
"
mozilla
/
BlockingResourceBase
.
h
"
#
include
"
mozilla
/
ThreadSafety
.
h
"
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
include
"
nsISupports
.
h
"
namespace
mozilla
{
class
CAPABILITY
OffTheBooksMutex
:
public
detail
:
:
MutexImpl
BlockingResourceBase
{
public
:
explicit
OffTheBooksMutex
(
const
char
*
aName
)
:
BlockingResourceBase
(
aName
eMutex
)
#
ifdef
DEBUG
mOwningThread
(
nullptr
)
#
endif
{
}
~
OffTheBooksMutex
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mOwningThread
"
destroying
a
still
-
owned
lock
!
"
)
;
#
endif
}
#
ifndef
DEBUG
void
Lock
(
)
CAPABILITY_ACQUIRE
(
)
{
this
-
>
lock
(
)
;
}
[
[
nodiscard
]
]
bool
TryLock
(
)
TRY_ACQUIRE
(
true
)
{
return
this
-
>
tryLock
(
)
;
}
void
Unlock
(
)
CAPABILITY_RELEASE
(
)
{
this
-
>
unlock
(
)
;
}
void
AssertCurrentThreadOwns
(
)
const
ASSERT_CAPABILITY
(
this
)
{
}
void
AssertNotCurrentThreadOwns
(
)
const
ASSERT_CAPABILITY
(
!
this
)
{
}
#
else
void
Lock
(
)
CAPABILITY_ACQUIRE
(
)
;
[
[
nodiscard
]
]
bool
TryLock
(
)
TRY_ACQUIRE
(
true
)
;
void
Unlock
(
)
CAPABILITY_RELEASE
(
)
;
void
AssertCurrentThreadOwns
(
)
const
ASSERT_CAPABILITY
(
this
)
;
void
AssertNotCurrentThreadOwns
(
)
const
ASSERT_CAPABILITY
(
!
this
)
{
}
#
endif
private
:
OffTheBooksMutex
(
)
=
delete
;
OffTheBooksMutex
(
const
OffTheBooksMutex
&
)
=
delete
;
OffTheBooksMutex
&
operator
=
(
const
OffTheBooksMutex
&
)
=
delete
;
friend
class
OffTheBooksCondVar
;
#
ifdef
DEBUG
PRThread
*
mOwningThread
;
#
endif
}
;
class
Mutex
:
public
OffTheBooksMutex
{
public
:
explicit
Mutex
(
const
char
*
aName
)
:
OffTheBooksMutex
(
aName
)
{
MOZ_COUNT_CTOR
(
Mutex
)
;
}
MOZ_COUNTED_DTOR
(
Mutex
)
private
:
Mutex
(
)
=
delete
;
Mutex
(
const
Mutex
&
)
=
delete
;
Mutex
&
operator
=
(
const
Mutex
&
)
=
delete
;
}
;
class
SingleWriterLockOwner
{
public
:
SingleWriterLockOwner
(
)
=
default
;
~
SingleWriterLockOwner
(
)
=
default
;
virtual
bool
OnWritingThread
(
)
const
=
0
;
}
;
class
MutexSingleWriter
:
public
OffTheBooksMutex
{
public
:
explicit
MutexSingleWriter
(
const
char
*
aName
SingleWriterLockOwner
*
aOwner
)
:
OffTheBooksMutex
(
aName
)
#
ifdef
DEBUG
mOwner
(
aOwner
)
#
endif
{
MOZ_COUNT_CTOR
(
MutexSingleWriter
)
;
MOZ_ASSERT
(
mOwner
)
;
}
MOZ_COUNTED_DTOR
(
MutexSingleWriter
)
void
AssertOnWritingThread
(
)
const
ASSERT_CAPABILITY
(
this
)
{
MOZ_ASSERT
(
mOwner
-
>
OnWritingThread
(
)
)
;
}
void
AssertOnWritingThreadOrHeld
(
)
const
ASSERT_CAPABILITY
(
this
)
{
#
ifdef
DEBUG
if
(
!
mOwner
-
>
OnWritingThread
(
)
)
{
AssertCurrentThreadOwns
(
)
;
}
#
endif
}
private
:
#
ifdef
DEBUG
SingleWriterLockOwner
*
mOwner
MOZ_UNSAFE_REF
(
"
This
is
normally
the
object
that
contains
the
MonitorSingleWriter
so
"
"
we
don
'
t
want
to
hold
a
reference
to
ourselves
"
)
;
#
endif
MutexSingleWriter
(
)
=
delete
;
MutexSingleWriter
(
const
MutexSingleWriter
&
)
=
delete
;
MutexSingleWriter
&
operator
=
(
const
MutexSingleWriter
&
)
=
delete
;
}
;
namespace
detail
{
template
<
typename
T
>
class
MOZ_RAII
BaseAutoUnlock
;
template
<
typename
T
>
class
MOZ_RAII
SCOPED_CAPABILITY
BaseAutoLock
{
public
:
explicit
BaseAutoLock
(
T
aLock
)
CAPABILITY_ACQUIRE
(
aLock
)
:
mLock
(
aLock
)
{
mLock
.
Lock
(
)
;
}
~
BaseAutoLock
(
void
)
CAPABILITY_RELEASE
(
)
{
mLock
.
Unlock
(
)
;
}
void
AssertOwns
(
const
T
&
aMutex
)
const
ASSERT_CAPABILITY
(
aMutex
)
{
MOZ_ASSERT
(
&
aMutex
=
=
&
mLock
)
;
mLock
.
AssertCurrentThreadOwns
(
)
;
}
private
:
BaseAutoLock
(
)
=
delete
;
BaseAutoLock
(
BaseAutoLock
&
)
=
delete
;
BaseAutoLock
&
operator
=
(
BaseAutoLock
&
)
=
delete
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
friend
class
BaseAutoUnlock
<
T
>
;
T
mLock
;
}
;
template
<
typename
MutexType
>
BaseAutoLock
(
MutexType
&
)
-
>
BaseAutoLock
<
MutexType
&
>
;
}
typedef
detail
:
:
BaseAutoLock
<
Mutex
&
>
MutexAutoLock
;
typedef
detail
:
:
BaseAutoLock
<
MutexSingleWriter
&
>
MutexSingleWriterAutoLock
;
typedef
detail
:
:
BaseAutoLock
<
OffTheBooksMutex
&
>
OffTheBooksMutexAutoLock
;
#
define
MutexSingleWriterAutoLockOnThread
(
lock
mutex
)
\
PUSH_IGNORE_THREAD_SAFETY
\
MutexSingleWriterAutoLock
lock
(
mutex
)
;
\
POP_THREAD_SAFETY
namespace
detail
{
template
<
typename
T
>
class
MOZ_RAII
SCOPED_CAPABILITY
ReleaseableBaseAutoLock
{
public
:
explicit
ReleaseableBaseAutoLock
(
T
aLock
)
CAPABILITY_ACQUIRE
(
aLock
)
:
BaseAutoLock
<
T
>
(
aLock
)
{
mLock
.
Lock
(
)
;
mLocked
=
true
;
}
~
ReleaseableBaseAutoLock
(
void
)
CAPABILITY_RELEASE
(
)
{
if
(
!
mLocked
)
{
mLock
.
Unlock
(
)
;
}
}
void
AssertOwns
(
const
T
&
aMutex
)
const
ASSERT_CAPABILITY
(
mLock
)
{
MOZ_ASSERT
(
&
aMutex
=
=
&
mLock
)
;
mLock
.
AssertCurrentThreadOwns
(
)
;
}
void
Unlock
(
)
CAPABILITY_RELEASE
(
)
{
mLock
.
Unlock
(
)
;
mLocked
=
false
;
}
void
Lock
(
)
CAPABILITY_ACQUIRE
(
)
{
mLock
.
Lock
(
)
;
mLocked
=
true
;
}
private
:
ReleaseableBaseAutoLock
(
)
=
delete
;
ReleaseableBaseAutoLock
(
ReleaseableBaseAutoLock
&
)
=
delete
;
ReleaseableBaseAutoLock
&
operator
=
(
ReleaseableBaseAutoLock
&
)
=
delete
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
bool
mLocked
;
T
mLock
;
}
;
template
<
typename
MutexType
>
ReleaseableBaseAutoLock
(
MutexType
&
)
-
>
ReleaseableBaseAutoLock
<
MutexType
&
>
;
}
typedef
detail
:
:
ReleaseableBaseAutoLock
<
Mutex
&
>
ReleaseableMutexAutoLock
;
namespace
detail
{
template
<
typename
T
>
class
MOZ_RAII
SCOPED_CAPABILITY
BaseAutoUnlock
{
public
:
explicit
BaseAutoUnlock
(
T
aLock
)
SCOPED_UNLOCK_RELEASE
(
aLock
)
:
mLock
(
aLock
)
{
mLock
.
Unlock
(
)
;
}
explicit
BaseAutoUnlock
(
BaseAutoLock
<
T
>
&
aAutoLock
)
:
mLock
(
aAutoLock
.
mLock
)
{
NS_ASSERTION
(
mLock
"
null
lock
"
)
;
mLock
-
>
Unlock
(
)
;
}
~
BaseAutoUnlock
(
)
SCOPED_UNLOCK_REACQUIRE
(
)
{
mLock
.
Lock
(
)
;
}
private
:
BaseAutoUnlock
(
)
=
delete
;
BaseAutoUnlock
(
BaseAutoUnlock
&
)
=
delete
;
BaseAutoUnlock
&
operator
=
(
BaseAutoUnlock
&
)
=
delete
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
T
mLock
;
}
;
template
<
typename
MutexType
>
BaseAutoUnlock
(
MutexType
&
)
-
>
BaseAutoUnlock
<
MutexType
&
>
;
}
typedef
detail
:
:
BaseAutoUnlock
<
Mutex
&
>
MutexAutoUnlock
;
typedef
detail
:
:
BaseAutoUnlock
<
MutexSingleWriter
&
>
MutexSingleWriterAutoUnlock
;
typedef
detail
:
:
BaseAutoUnlock
<
OffTheBooksMutex
&
>
OffTheBooksMutexAutoUnlock
;
namespace
detail
{
template
<
typename
T
>
class
MOZ_RAII
SCOPED_CAPABILITY
BaseAutoTryLock
{
public
:
explicit
BaseAutoTryLock
(
T
&
aLock
)
CAPABILITY_ACQUIRE
(
aLock
)
:
mLock
(
aLock
.
TryLock
(
)
?
&
aLock
:
nullptr
)
{
}
~
BaseAutoTryLock
(
)
CAPABILITY_RELEASE
(
)
{
if
(
mLock
)
{
mLock
-
>
Unlock
(
)
;
mLock
=
nullptr
;
}
}
explicit
operator
bool
(
)
const
{
return
mLock
;
}
private
:
BaseAutoTryLock
(
BaseAutoTryLock
&
)
=
delete
;
BaseAutoTryLock
&
operator
=
(
BaseAutoTryLock
&
)
=
delete
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
T
*
mLock
;
}
;
}
typedef
detail
:
:
BaseAutoTryLock
<
Mutex
>
MutexAutoTryLock
;
typedef
detail
:
:
BaseAutoTryLock
<
OffTheBooksMutex
>
OffTheBooksMutexAutoTryLock
;
}
#
endif
