#
ifndef
mozilla_MainThreadQueue_h
#
define
mozilla_MainThreadQueue_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
PrioritizedEventQueue
.
h
"
namespace
mozilla
{
template
<
typename
SynchronizedQueueT
>
inline
already_AddRefed
<
nsThread
>
CreateMainThread
(
nsIIdlePeriod
*
aIdlePeriod
SynchronizedQueueT
*
*
aSynchronizedQueue
=
nullptr
)
{
using
MainThreadQueueT
=
PrioritizedEventQueue
;
auto
queue
=
MakeUnique
<
MainThreadQueueT
>
(
do_AddRef
(
aIdlePeriod
)
)
;
MainThreadQueueT
*
prioritized
=
queue
.
get
(
)
;
RefPtr
<
SynchronizedQueueT
>
synchronizedQueue
=
new
SynchronizedQueueT
(
std
:
:
move
(
queue
)
true
)
;
prioritized
-
>
SetMutexRef
(
synchronizedQueue
-
>
MutexRef
(
)
)
;
RefPtr
<
nsThread
>
mainThread
=
new
nsThread
(
WrapNotNull
(
synchronizedQueue
)
nsThread
:
:
MAIN_THREAD
0
)
;
if
(
aSynchronizedQueue
)
{
synchronizedQueue
.
forget
(
aSynchronizedQueue
)
;
}
return
mainThread
.
forget
(
)
;
}
}
#
endif
