#
ifndef
mozilla_Dispatcher_h
#
define
mozilla_Dispatcher_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
TaskCategory
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsIEventTarget
;
class
nsIRunnable
;
namespace
mozilla
{
class
AbstractThread
;
namespace
dom
{
class
TabGroup
;
}
class
ValidatingDispatcher
{
public
:
ValidatingDispatcher
(
)
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
class
MOZ_STACK_CLASS
AutoProcessEvent
final
{
public
:
AutoProcessEvent
(
)
;
~
AutoProcessEvent
(
)
;
private
:
ValidatingDispatcher
*
mPrevRunningDispatcher
;
}
;
void
ValidateAccess
(
)
const
{
MOZ_ASSERT
(
!
sRunningDispatcher
|
|
mAccessValid
)
;
}
class
Runnable
;
friend
class
Runnable
;
bool
*
GetValidAccessPtr
(
)
{
return
&
mAccessValid
;
}
virtual
nsresult
Dispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
virtual
nsIEventTarget
*
EventTargetFor
(
TaskCategory
aCategory
)
const
;
AbstractThread
*
AbstractMainThreadFor
(
TaskCategory
aCategory
)
;
virtual
dom
:
:
TabGroup
*
AsTabGroup
(
)
{
return
nullptr
;
}
static
nsresult
UnlabeledDispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
protected
:
virtual
AbstractThread
*
AbstractMainThreadForImpl
(
TaskCategory
aCategory
)
;
virtual
already_AddRefed
<
nsIEventTarget
>
CreateEventTargetFor
(
TaskCategory
aCategory
)
;
static
ValidatingDispatcher
*
FromEventTarget
(
nsIEventTarget
*
aEventTarget
)
;
nsresult
LabeledDispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
CreateEventTargets
(
bool
aNeedValidation
)
;
void
Shutdown
(
bool
aXPCOMShutdown
)
;
enum
ValidationType
{
StartValidation
EndValidation
}
;
void
SetValidatingAccess
(
ValidationType
aType
)
;
static
ValidatingDispatcher
*
sRunningDispatcher
;
bool
mAccessValid
;
nsCOMPtr
<
nsIEventTarget
>
mEventTargets
[
size_t
(
TaskCategory
:
:
Count
)
]
;
RefPtr
<
AbstractThread
>
mAbstractThreads
[
size_t
(
TaskCategory
:
:
Count
)
]
;
}
;
}
#
endif
