#
include
"
nsISerialEventTarget
.
idl
"
#
include
"
nsIThreadShutdown
.
idl
"
%
{
C
+
+
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
namespace
mozilla
{
class
TimeStamp
;
class
TimeDurationValueCalculator
;
template
<
typename
T
>
class
BaseTimeDuration
;
typedef
BaseTimeDuration
<
TimeDurationValueCalculator
>
TimeDuration
;
enum
class
EventQueuePriority
;
}
%
}
[
ptr
]
native
PRThread
(
PRThread
)
;
native
EventQueuePriority
(
mozilla
:
:
EventQueuePriority
)
;
native
nsIEventTargetPtr
(
nsIEventTarget
*
)
;
native
nsISerialEventTargetPtr
(
nsISerialEventTarget
*
)
;
native
TimeStamp
(
mozilla
:
:
TimeStamp
)
;
native
TimeDuration
(
mozilla
:
:
TimeDuration
)
;
[
builtinclass
scriptable
uuid
(
5801d193
-
29d1
-
4964
-
a6b7
-
70eb697ddf2b
)
]
interface
nsIThread
:
nsISerialEventTarget
{
[
noscript
]
readonly
attribute
PRThread
PRThread
;
[
noscript
]
attribute
boolean
CanInvokeJS
;
void
shutdown
(
)
;
boolean
hasPendingEvents
(
)
;
boolean
hasPendingHighPriorityEvents
(
)
;
boolean
processNextEvent
(
in
boolean
mayWait
)
;
void
asyncShutdown
(
)
;
nsIThreadShutdown
beginShutdown
(
)
;
[
noscript
]
void
dispatchToQueue
(
in
alreadyAddRefed_nsIRunnable
event
in
EventQueuePriority
queue
)
;
readonly
attribute
nsIEventTarget
eventTarget
;
[
noscript
notxpcom
]
nsIEventTargetPtr
EventTarget
(
)
;
[
noscript
notxpcom
]
nsISerialEventTargetPtr
SerialEventTarget
(
)
;
[
noscript
]
readonly
attribute
TimeStamp
lastLongTaskEnd
;
[
noscript
]
readonly
attribute
TimeStamp
lastLongNonIdleTaskEnd
;
[
noscript
]
void
getRunningEventDelay
(
out
TimeDuration
delay
out
TimeStamp
start
)
;
[
noscript
]
void
setRunningEventDelay
(
in
TimeDuration
delay
in
TimeStamp
start
)
;
[
noscript
]
void
setNameForWakeupTelemetry
(
in
ACString
name
)
;
}
;
