#
ifndef
nsThreadUtils_h__
#
define
nsThreadUtils_h__
#
include
"
prthread
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsICancelableRunnable
.
h
"
#
include
"
nsIIdlePeriod
.
h
"
#
include
"
nsIIdleRunnable
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThreadManager
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
IndexSequence
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
extern
nsresult
NS_NewThread
(
nsIThread
*
*
aResult
nsIRunnable
*
aInitialEvent
=
nullptr
uint32_t
aStackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
;
extern
nsresult
NS_NewNamedThread
(
const
nsACString
&
aName
nsIThread
*
*
aResult
nsIRunnable
*
aInitialEvent
=
nullptr
uint32_t
aStackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
;
template
<
size_t
LEN
>
inline
nsresult
NS_NewNamedThread
(
const
char
(
&
aName
)
[
LEN
]
nsIThread
*
*
aResult
nsIRunnable
*
aInitialEvent
=
nullptr
uint32_t
aStackSize
=
nsIThreadManager
:
:
DEFAULT_STACK_SIZE
)
{
static_assert
(
LEN
<
=
16
"
Thread
name
must
be
no
more
than
16
characters
"
)
;
return
NS_NewNamedThread
(
nsDependentCString
(
aName
LEN
-
1
)
aResult
aInitialEvent
aStackSize
)
;
}
extern
nsresult
NS_GetCurrentThread
(
nsIThread
*
*
aResult
)
;
extern
nsresult
NS_DispatchToCurrentThread
(
nsIRunnable
*
aEvent
)
;
extern
nsresult
NS_DispatchToCurrentThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
)
;
extern
nsresult
NS_DispatchToMainThread
(
nsIRunnable
*
aEvent
uint32_t
aDispatchFlags
=
NS_DISPATCH_NORMAL
)
;
extern
nsresult
NS_DispatchToMainThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aDispatchFlags
=
NS_DISPATCH_NORMAL
)
;
extern
nsresult
NS_DelayedDispatchToCurrentThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aDelayMs
)
;
extern
nsresult
NS_IdleDispatchToCurrentThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
)
;
extern
nsresult
NS_IdleDispatchToCurrentThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aTimeout
)
;
extern
nsresult
NS_IdleDispatchToThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
nsIThread
*
aThread
)
;
extern
nsresult
NS_IdleDispatchToThread
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aTimeout
nsIThread
*
aThread
)
;
#
ifndef
XPCOM_GLUE_AVOID_NSPR
extern
nsresult
NS_ProcessPendingEvents
(
nsIThread
*
aThread
PRIntervalTime
aTimeout
=
PR_INTERVAL_NO_TIMEOUT
)
;
#
endif
extern
bool
NS_HasPendingEvents
(
nsIThread
*
aThread
=
nullptr
)
;
extern
bool
NS_ProcessNextEvent
(
nsIThread
*
aThread
=
nullptr
bool
aMayWait
=
true
)
;
namespace
mozilla
{
enum
class
ProcessFailureBehavior
{
IgnoreAndContinue
ReportToCaller
}
;
template
<
ProcessFailureBehavior
Behavior
=
ProcessFailureBehavior
:
:
ReportToCaller
typename
Pred
>
bool
SpinEventLoopUntil
(
Pred
&
&
aPredicate
nsIThread
*
aThread
=
nullptr
)
{
nsIThread
*
thread
=
aThread
?
aThread
:
NS_GetCurrentThread
(
)
;
while
(
!
aPredicate
(
)
)
{
bool
didSomething
=
NS_ProcessNextEvent
(
thread
true
)
;
if
(
Behavior
=
=
ProcessFailureBehavior
:
:
IgnoreAndContinue
)
{
continue
;
}
else
if
(
!
didSomething
)
{
return
false
;
}
}
return
true
;
}
}
extern
bool
NS_IsInCompositorThread
(
)
;
extern
bool
NS_IsInVRThread
(
)
;
inline
already_AddRefed
<
nsIThread
>
do_GetCurrentThread
(
)
{
nsIThread
*
thread
=
nullptr
;
NS_GetCurrentThread
(
&
thread
)
;
return
already_AddRefed
<
nsIThread
>
(
thread
)
;
}
inline
already_AddRefed
<
nsIThread
>
do_GetMainThread
(
)
{
nsIThread
*
thread
=
nullptr
;
NS_GetMainThread
(
&
thread
)
;
return
already_AddRefed
<
nsIThread
>
(
thread
)
;
}
#
ifdef
MOZILLA_INTERNAL_API
extern
nsIThread
*
NS_GetCurrentThread
(
)
;
extern
nsIThread
*
NS_GetCurrentThreadNoCreate
(
)
;
extern
void
NS_SetCurrentThreadName
(
const
char
*
aName
)
;
#
endif
#
ifndef
XPCOM_GLUE_AVOID_NSPR
namespace
mozilla
{
class
IdlePeriod
:
public
nsIIdlePeriod
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIIDLEPERIOD
IdlePeriod
(
)
{
}
protected
:
virtual
~
IdlePeriod
(
)
{
}
private
:
IdlePeriod
(
const
IdlePeriod
&
)
=
delete
;
IdlePeriod
&
operator
=
(
const
IdlePeriod
&
)
=
delete
;
IdlePeriod
&
operator
=
(
const
IdlePeriod
&
&
)
=
delete
;
}
;
enum
RunnableKind
{
Standard
Cancelable
Idle
IdleWithTimer
}
;
class
Runnable
:
public
nsIRunnable
public
nsINamed
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIRUNNABLE
NS_DECL_NSINAMED
Runnable
(
)
=
delete
;
#
ifdef
RELEASE_OR_BETA
explicit
Runnable
(
const
char
*
aName
)
{
}
#
else
explicit
Runnable
(
const
char
*
aName
)
:
mName
(
aName
)
{
}
#
endif
protected
:
virtual
~
Runnable
(
)
{
}
#
ifndef
RELEASE_OR_BETA
const
char
*
mName
=
nullptr
;
#
endif
private
:
Runnable
(
const
Runnable
&
)
=
delete
;
Runnable
&
operator
=
(
const
Runnable
&
)
=
delete
;
Runnable
&
operator
=
(
const
Runnable
&
&
)
=
delete
;
}
;
class
CancelableRunnable
:
public
Runnable
public
nsICancelableRunnable
{
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
nsresult
Cancel
(
)
override
;
CancelableRunnable
(
)
=
delete
;
explicit
CancelableRunnable
(
const
char
*
aName
)
:
Runnable
(
aName
)
{
}
protected
:
virtual
~
CancelableRunnable
(
)
{
}
private
:
CancelableRunnable
(
const
CancelableRunnable
&
)
=
delete
;
CancelableRunnable
&
operator
=
(
const
CancelableRunnable
&
)
=
delete
;
CancelableRunnable
&
operator
=
(
const
CancelableRunnable
&
&
)
=
delete
;
}
;
class
IdleRunnable
:
public
CancelableRunnable
public
nsIIdleRunnable
{
public
:
NS_DECL_ISUPPORTS_INHERITED
IdleRunnable
(
)
:
CancelableRunnable
(
"
IdleRunnable
"
)
{
}
explicit
IdleRunnable
(
const
char
*
aName
)
:
CancelableRunnable
(
aName
)
{
}
protected
:
virtual
~
IdleRunnable
(
)
{
}
private
:
IdleRunnable
(
const
IdleRunnable
&
)
=
delete
;
IdleRunnable
&
operator
=
(
const
IdleRunnable
&
)
=
delete
;
IdleRunnable
&
operator
=
(
const
IdleRunnable
&
&
)
=
delete
;
}
;
class
PrioritizableRunnable
:
public
Runnable
public
nsIRunnablePriority
{
public
:
PrioritizableRunnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
uint32_t
aPriority
)
;
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
NS_DECL_NSIRUNNABLEPRIORITY
protected
:
virtual
~
PrioritizableRunnable
(
)
{
}
;
nsCOMPtr
<
nsIRunnable
>
mRunnable
;
uint32_t
mPriority
;
}
;
namespace
detail
{
template
<
typename
StoredFunction
>
class
RunnableFunction
:
public
Runnable
{
public
:
template
<
typename
F
>
explicit
RunnableFunction
(
const
char
*
aName
F
&
&
aFunction
)
:
Runnable
(
aName
)
mFunction
(
Forward
<
F
>
(
aFunction
)
)
{
}
NS_IMETHOD
Run
(
)
override
{
static_assert
(
IsVoid
<
decltype
(
mFunction
(
)
)
>
:
:
value
"
The
lambda
must
return
void
!
"
)
;
mFunction
(
)
;
return
NS_OK
;
}
private
:
StoredFunction
mFunction
;
}
;
template
<
typename
Function
>
using
RunnableFunctionImpl
=
typename
detail
:
:
RunnableFunction
<
typename
RemoveReference
<
Function
>
:
:
Type
>
;
}
namespace
detail
{
template
<
typename
CVRemoved
>
struct
IsRefcountedSmartPointerHelper
:
FalseType
{
}
;
template
<
typename
Pointee
>
struct
IsRefcountedSmartPointerHelper
<
RefPtr
<
Pointee
>
>
:
TrueType
{
}
;
template
<
typename
Pointee
>
struct
IsRefcountedSmartPointerHelper
<
nsCOMPtr
<
Pointee
>
>
:
TrueType
{
}
;
}
template
<
typename
T
>
struct
IsRefcountedSmartPointer
:
detail
:
:
IsRefcountedSmartPointerHelper
<
typename
RemoveCV
<
T
>
:
:
Type
>
{
}
;
namespace
detail
{
template
<
typename
T
typename
CVRemoved
>
struct
RemoveSmartPointerHelper
{
typedef
T
Type
;
}
;
template
<
typename
T
typename
Pointee
>
struct
RemoveSmartPointerHelper
<
T
RefPtr
<
Pointee
>
>
{
typedef
Pointee
Type
;
}
;
template
<
typename
T
typename
Pointee
>
struct
RemoveSmartPointerHelper
<
T
nsCOMPtr
<
Pointee
>
>
{
typedef
Pointee
Type
;
}
;
}
template
<
typename
T
>
struct
RemoveSmartPointer
:
detail
:
:
RemoveSmartPointerHelper
<
T
typename
RemoveCV
<
T
>
:
:
Type
>
{
}
;
namespace
detail
{
template
<
typename
T
typename
CVRemoved
>
struct
RemoveRawOrSmartPointerHelper
{
typedef
T
Type
;
}
;
template
<
typename
T
typename
Pointee
>
struct
RemoveRawOrSmartPointerHelper
<
T
Pointee
*
>
{
typedef
Pointee
Type
;
}
;
template
<
typename
T
typename
Pointee
>
struct
RemoveRawOrSmartPointerHelper
<
T
RefPtr
<
Pointee
>
>
{
typedef
Pointee
Type
;
}
;
template
<
typename
T
typename
Pointee
>
struct
RemoveRawOrSmartPointerHelper
<
T
nsCOMPtr
<
Pointee
>
>
{
typedef
Pointee
Type
;
}
;
}
template
<
typename
T
>
struct
RemoveRawOrSmartPointer
:
detail
:
:
RemoveRawOrSmartPointerHelper
<
T
typename
RemoveCV
<
T
>
:
:
Type
>
{
}
;
}
inline
nsISupports
*
ToSupports
(
mozilla
:
:
Runnable
*
p
)
{
return
static_cast
<
nsIRunnable
*
>
(
p
)
;
}
template
<
typename
Function
>
already_AddRefed
<
mozilla
:
:
Runnable
>
NS_NewRunnableFunction
(
const
char
*
aName
Function
&
&
aFunction
)
{
return
do_AddRef
(
new
mozilla
:
:
detail
:
:
RunnableFunctionImpl
<
Function
>
(
aName
mozilla
:
:
Forward
<
Function
>
(
aFunction
)
)
)
;
}
namespace
mozilla
{
namespace
detail
{
template
<
RunnableKind
Kind
>
class
TimerBehaviour
{
public
:
nsITimer
*
GetTimer
(
)
{
return
nullptr
;
}
void
CancelTimer
(
)
{
}
protected
:
~
TimerBehaviour
(
)
{
}
}
;
template
<
>
class
TimerBehaviour
<
IdleWithTimer
>
{
public
:
nsITimer
*
GetTimer
(
)
{
if
(
!
mTimer
)
{
mTimer
=
NS_NewTimer
(
)
;
}
return
mTimer
;
}
void
CancelTimer
(
)
{
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
}
}
protected
:
~
TimerBehaviour
(
)
{
CancelTimer
(
)
;
}
private
:
nsCOMPtr
<
nsITimer
>
mTimer
;
}
;
}
}
template
<
class
ClassType
typename
ReturnType
=
void
bool
Owning
=
true
mozilla
:
:
RunnableKind
Kind
=
mozilla
:
:
Standard
>
class
nsRunnableMethod
:
public
mozilla
:
:
Conditional
<
Kind
=
=
mozilla
:
:
Standard
mozilla
:
:
Runnable
typename
mozilla
:
:
Conditional
<
Kind
=
=
mozilla
:
:
Cancelable
mozilla
:
:
CancelableRunnable
mozilla
:
:
IdleRunnable
>
:
:
Type
>
:
:
Type
protected
mozilla
:
:
detail
:
:
TimerBehaviour
<
Kind
>
{
using
BaseType
=
typename
mozilla
:
:
Conditional
<
Kind
=
=
mozilla
:
:
Standard
mozilla
:
:
Runnable
typename
mozilla
:
:
Conditional
<
Kind
=
=
mozilla
:
:
Cancelable
mozilla
:
:
CancelableRunnable
mozilla
:
:
IdleRunnable
>
:
:
Type
>
:
:
Type
;
public
:
nsRunnableMethod
(
const
char
*
aName
)
:
BaseType
(
aName
)
{
}
virtual
void
Revoke
(
)
=
0
;
template
<
typename
OtherReturnType
>
class
ReturnTypeEnforcer
{
public
:
typedef
int
ReturnTypeIsSafe
;
}
;
template
<
class
T
>
class
ReturnTypeEnforcer
<
already_AddRefed
<
T
>
>
{
}
;
typedef
typename
ReturnTypeEnforcer
<
ReturnType
>
:
:
ReturnTypeIsSafe
check
;
}
;
template
<
class
ClassType
bool
Owning
>
struct
nsRunnableMethodReceiver
{
RefPtr
<
ClassType
>
mObj
;
explicit
nsRunnableMethodReceiver
(
ClassType
*
aObj
)
:
mObj
(
aObj
)
{
}
~
nsRunnableMethodReceiver
(
)
{
Revoke
(
)
;
}
ClassType
*
Get
(
)
const
{
return
mObj
.
get
(
)
;
}
void
Revoke
(
)
{
mObj
=
nullptr
;
}
}
;
template
<
class
ClassType
>
struct
nsRunnableMethodReceiver
<
ClassType
false
>
{
ClassType
*
MOZ_NON_OWNING_REF
mObj
;
explicit
nsRunnableMethodReceiver
(
ClassType
*
aObj
)
:
mObj
(
aObj
)
{
}
ClassType
*
Get
(
)
const
{
return
mObj
;
}
void
Revoke
(
)
{
mObj
=
nullptr
;
}
}
;
static
inline
constexpr
bool
IsIdle
(
mozilla
:
:
RunnableKind
aKind
)
{
return
aKind
=
=
mozilla
:
:
Idle
|
|
aKind
=
=
mozilla
:
:
IdleWithTimer
;
}
template
<
typename
PtrType
typename
Method
bool
Owning
mozilla
:
:
RunnableKind
Kind
>
struct
nsRunnableMethodTraits
;
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
C
:
:
*
)
(
As
.
.
.
)
Owning
Kind
>
{
typedef
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
C
:
:
*
)
(
As
.
.
.
)
const
Owning
Kind
>
{
typedef
const
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
#
ifdef
NS_HAVE_STDCALL
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
__stdcall
C
:
:
*
)
(
As
.
.
.
)
Owning
Kind
>
{
typedef
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
NS_STDCALL
C
:
:
*
)
(
)
Owning
Kind
>
{
typedef
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
typename
.
.
.
As
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
__stdcall
C
:
:
*
)
(
As
.
.
.
)
const
Owning
Kind
>
{
typedef
const
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
template
<
typename
PtrType
class
C
typename
R
bool
Owning
mozilla
:
:
RunnableKind
Kind
>
struct
nsRunnableMethodTraits
<
PtrType
R
(
NS_STDCALL
C
:
:
*
)
(
)
const
Owning
Kind
>
{
typedef
const
typename
mozilla
:
:
RemoveRawOrSmartPointer
<
PtrType
>
:
:
Type
class_type
;
static_assert
(
mozilla
:
:
IsBaseOf
<
C
class_type
>
:
:
value
"
Stored
class
must
inherit
from
method
'
s
class
"
)
;
typedef
R
return_type
;
typedef
nsRunnableMethod
<
C
R
Owning
Kind
>
base_type
;
static
const
bool
can_cancel
=
Kind
=
=
mozilla
:
:
Cancelable
;
}
;
#
endif
template
<
typename
T
>
struct
IsParameterStorageClass
:
public
mozilla
:
:
FalseType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByValue
{
typedef
typename
mozilla
:
:
Decay
<
T
>
:
:
Type
stored_type
;
typedef
stored_type
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByValue
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByValue
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByConstLRef
{
typedef
typename
mozilla
:
:
Decay
<
T
>
:
:
Type
stored_type
;
typedef
const
stored_type
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByConstLRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByConstLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByLRef
{
typedef
typename
mozilla
:
:
Decay
<
T
>
:
:
Type
stored_type
;
typedef
stored_type
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByLRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByRRef
{
typedef
typename
mozilla
:
:
Decay
<
T
>
:
:
Type
stored_type
;
typedef
stored_type
&
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByRRef
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
mozilla
:
:
Move
(
m
)
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByRRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreRefPassByLRef
{
typedef
T
&
stored_type
;
typedef
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreRefPassByLRef
(
A
&
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreRefPassByLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreConstRefPassByConstLRef
{
typedef
const
T
&
stored_type
;
typedef
const
T
&
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreConstRefPassByConstLRef
(
const
A
&
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreConstRefPassByConstLRef
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreRefPtrPassByPtr
{
typedef
RefPtr
<
T
>
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreRefPtrPassByPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
.
get
(
)
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreRefPtrPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StorePtrPassByPtr
{
typedef
T
*
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StorePtrPassByPtr
(
A
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StorePtrPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreConstPtrPassByConstPtr
{
typedef
const
T
*
stored_type
;
typedef
const
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreConstPtrPassByConstPtr
(
A
a
)
:
m
(
a
)
{
}
passed_type
PassAsParameter
(
)
{
return
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreConstPtrPassByConstPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByConstPtr
{
typedef
T
stored_type
;
typedef
const
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByConstPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
&
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByConstPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
template
<
typename
T
>
struct
StoreCopyPassByPtr
{
typedef
T
stored_type
;
typedef
T
*
passed_type
;
stored_type
m
;
template
<
typename
A
>
MOZ_IMPLICIT
StoreCopyPassByPtr
(
A
&
&
a
)
:
m
(
mozilla
:
:
Forward
<
A
>
(
a
)
)
{
}
passed_type
PassAsParameter
(
)
{
return
&
m
;
}
}
;
template
<
typename
S
>
struct
IsParameterStorageClass
<
StoreCopyPassByPtr
<
S
>
>
:
public
mozilla
:
:
TrueType
{
}
;
namespace
detail
{
template
<
typename
>
struct
SFINAE1True
:
mozilla
:
:
TrueType
{
}
;
template
<
class
T
>
static
auto
HasRefCountMethodsTest
(
int
)
-
>
SFINAE1True
<
decltype
(
mozilla
:
:
DeclVal
<
T
>
(
)
.
AddRef
(
)
mozilla
:
:
DeclVal
<
T
>
(
)
.
Release
(
)
)
>
;
template
<
class
>
static
auto
HasRefCountMethodsTest
(
long
)
-
>
mozilla
:
:
FalseType
;
template
<
class
T
>
struct
HasRefCountMethods
:
decltype
(
HasRefCountMethodsTest
<
T
>
(
0
)
)
{
}
;
template
<
typename
TWithoutPointer
>
struct
NonnsISupportsPointerStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsConst
<
TWithoutPointer
>
:
:
value
StoreConstPtrPassByConstPtr
<
typename
mozilla
:
:
RemoveConst
<
TWithoutPointer
>
:
:
Type
>
StorePtrPassByPtr
<
TWithoutPointer
>
>
{
}
;
template
<
typename
TWithoutPointer
>
struct
PointerStorageClass
:
mozilla
:
:
Conditional
<
HasRefCountMethods
<
TWithoutPointer
>
:
:
value
StoreRefPtrPassByPtr
<
TWithoutPointer
>
typename
NonnsISupportsPointerStorageClass
<
TWithoutPointer
>
:
:
Type
>
{
}
;
template
<
typename
TWithoutRef
>
struct
LValueReferenceStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsConst
<
TWithoutRef
>
:
:
value
StoreConstRefPassByConstLRef
<
typename
mozilla
:
:
RemoveConst
<
TWithoutRef
>
:
:
Type
>
StoreRefPassByLRef
<
TWithoutRef
>
>
{
}
;
template
<
typename
T
>
struct
SmartPointerStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsRefcountedSmartPointer
<
T
>
:
:
value
StoreRefPtrPassByPtr
<
typename
mozilla
:
:
RemoveSmartPointer
<
T
>
:
:
Type
>
StoreCopyPassByConstLRef
<
T
>
>
{
}
;
template
<
typename
T
>
struct
NonLValueReferenceStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsRvalueReference
<
T
>
:
:
value
StoreCopyPassByRRef
<
typename
mozilla
:
:
RemoveReference
<
T
>
:
:
Type
>
typename
SmartPointerStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
NonPointerStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsLvalueReference
<
T
>
:
:
value
typename
LValueReferenceStorageClass
<
typename
mozilla
:
:
RemoveReference
<
T
>
:
:
Type
>
:
:
Type
typename
NonLValueReferenceStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
NonParameterStorageClass
:
mozilla
:
:
Conditional
<
mozilla
:
:
IsPointer
<
T
>
:
:
value
typename
PointerStorageClass
<
typename
mozilla
:
:
RemovePointer
<
T
>
:
:
Type
>
:
:
Type
typename
NonPointerStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
typename
T
>
struct
ParameterStorage
:
mozilla
:
:
Conditional
<
IsParameterStorageClass
<
T
>
:
:
value
T
typename
NonParameterStorageClass
<
T
>
:
:
Type
>
{
}
;
template
<
class
T
>
static
auto
HasSetDeadlineTest
(
int
)
-
>
SFINAE1True
<
decltype
(
mozilla
:
:
DeclVal
<
T
>
(
)
.
SetDeadline
(
mozilla
:
:
DeclVal
<
mozilla
:
:
TimeStamp
>
(
)
)
)
>
;
template
<
class
T
>
static
auto
HasSetDeadlineTest
(
long
)
-
>
mozilla
:
:
FalseType
;
template
<
class
T
>
struct
HasSetDeadline
:
decltype
(
HasSetDeadlineTest
<
T
>
(
0
)
)
{
}
;
template
<
class
T
>
typename
mozilla
:
:
EnableIf
<
:
:
detail
:
:
HasSetDeadline
<
T
>
:
:
value
>
:
:
Type
SetDeadlineImpl
(
T
*
aObj
mozilla
:
:
TimeStamp
aTimeStamp
)
{
aObj
-
>
SetDeadline
(
aTimeStamp
)
;
}
template
<
class
T
>
typename
mozilla
:
:
EnableIf
<
!
:
:
detail
:
:
HasSetDeadline
<
T
>
:
:
value
>
:
:
Type
SetDeadlineImpl
(
T
*
aObj
mozilla
:
:
TimeStamp
aTimeStamp
)
{
}
}
namespace
mozilla
{
namespace
detail
{
template
<
typename
.
.
.
Ts
>
struct
RunnableMethodArguments
final
{
Tuple
<
typename
:
:
detail
:
:
ParameterStorage
<
Ts
>
:
:
Type
.
.
.
>
mArguments
;
template
<
typename
.
.
.
As
>
explicit
RunnableMethodArguments
(
As
&
&
.
.
.
aArguments
)
:
mArguments
(
Forward
<
As
>
(
aArguments
)
.
.
.
)
{
}
template
<
typename
C
typename
M
typename
.
.
.
Args
size_t
.
.
.
Indices
>
static
auto
applyImpl
(
C
*
o
M
m
Tuple
<
Args
.
.
.
>
&
args
IndexSequence
<
Indices
.
.
.
>
)
-
>
decltype
(
(
(
*
o
)
.
*
m
)
(
Get
<
Indices
>
(
args
)
.
PassAsParameter
(
)
.
.
.
)
)
{
return
(
(
*
o
)
.
*
m
)
(
Get
<
Indices
>
(
args
)
.
PassAsParameter
(
)
.
.
.
)
;
}
template
<
class
C
typename
M
>
auto
apply
(
C
*
o
M
m
)
-
>
decltype
(
applyImpl
(
o
m
mArguments
typename
IndexSequenceFor
<
Ts
.
.
.
>
:
:
Type
(
)
)
)
{
return
applyImpl
(
o
m
mArguments
typename
IndexSequenceFor
<
Ts
.
.
.
>
:
:
Type
(
)
)
;
}
}
;
template
<
typename
PtrType
typename
Method
bool
Owning
RunnableKind
Kind
typename
.
.
.
Storages
>
class
RunnableMethodImpl
final
:
public
:
:
nsRunnableMethodTraits
<
PtrType
Method
Owning
Kind
>
:
:
base_type
{
typedef
typename
:
:
nsRunnableMethodTraits
<
PtrType
Method
Owning
Kind
>
Traits
;
typedef
typename
Traits
:
:
class_type
ClassType
;
typedef
typename
Traits
:
:
base_type
BaseType
;
:
:
nsRunnableMethodReceiver
<
ClassType
Owning
>
mReceiver
;
Method
mMethod
;
RunnableMethodArguments
<
Storages
.
.
.
>
mArgs
;
using
BaseType
:
:
GetTimer
;
using
BaseType
:
:
CancelTimer
;
private
:
virtual
~
RunnableMethodImpl
(
)
{
Revoke
(
)
;
}
;
static
void
TimedOut
(
nsITimer
*
aTimer
void
*
aClosure
)
{
static_assert
(
IsIdle
(
Kind
)
"
Don
'
t
use
me
!
"
)
;
RefPtr
<
IdleRunnable
>
r
=
static_cast
<
IdleRunnable
*
>
(
aClosure
)
;
r
-
>
SetDeadline
(
TimeStamp
(
)
)
;
r
-
>
Run
(
)
;
r
-
>
Cancel
(
)
;
}
public
:
template
<
typename
ForwardedPtrType
typename
.
.
.
Args
>
explicit
RunnableMethodImpl
(
const
char
*
aName
ForwardedPtrType
&
&
aObj
Method
aMethod
Args
&
&
.
.
.
aArgs
)
:
BaseType
(
aName
)
mReceiver
(
Forward
<
ForwardedPtrType
>
(
aObj
)
)
mMethod
(
aMethod
)
mArgs
(
Forward
<
Args
>
(
aArgs
)
.
.
.
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
Storages
and
Args
should
have
equal
sizes
"
)
;
}
NS_IMETHOD
Run
(
)
{
CancelTimer
(
)
;
if
(
MOZ_LIKELY
(
mReceiver
.
Get
(
)
)
)
{
mArgs
.
apply
(
mReceiver
.
Get
(
)
mMethod
)
;
}
return
NS_OK
;
}
nsresult
Cancel
(
)
{
static_assert
(
Kind
>
=
Cancelable
"
Don
'
t
use
me
!
"
)
;
Revoke
(
)
;
return
NS_OK
;
}
void
Revoke
(
)
{
CancelTimer
(
)
;
mReceiver
.
Revoke
(
)
;
}
void
SetDeadline
(
TimeStamp
aDeadline
)
{
if
(
MOZ_LIKELY
(
mReceiver
.
Get
(
)
)
)
{
:
:
detail
:
:
SetDeadlineImpl
(
mReceiver
.
Get
(
)
aDeadline
)
;
}
}
void
SetTimer
(
uint32_t
aDelay
nsIEventTarget
*
aTarget
)
{
MOZ_ASSERT
(
aTarget
)
;
if
(
nsCOMPtr
<
nsITimer
>
timer
=
GetTimer
(
)
)
{
timer
-
>
Cancel
(
)
;
timer
-
>
SetTarget
(
aTarget
)
;
timer
-
>
InitWithNamedFuncCallback
(
TimedOut
this
aDelay
nsITimer
:
:
TYPE_ONE_SHOT
"
detail
:
:
RunnableMethodImpl
:
:
SetTimer
"
)
;
}
}
}
;
template
<
typename
PtrType
typename
Method
>
using
OwningRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Standard
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
OwningRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Standard
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
CancelableRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Cancelable
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
CancelableRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Cancelable
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
IdleRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Idle
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
IdleRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
Idle
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
IdleRunnableMethodWithTimer
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
IdleWithTimer
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
IdleRunnableMethodWithTimerImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
true
IdleWithTimer
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
NonOwningRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Standard
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
NonOwningRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Standard
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
NonOwningCancelableRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Cancelable
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
NonOwningCancelableRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Cancelable
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
NonOwningIdleRunnableMethod
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Idle
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
NonOwningIdleRunnableMethodImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
Idle
Storages
.
.
.
>
;
template
<
typename
PtrType
typename
Method
>
using
NonOwningIdleRunnableMethodWithTimer
=
typename
:
:
nsRunnableMethodTraits
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
IdleWithTimer
>
:
:
base_type
;
template
<
typename
PtrType
typename
Method
typename
.
.
.
Storages
>
using
NonOwningIdleRunnableMethodWithTimerImpl
=
RunnableMethodImpl
<
typename
RemoveReference
<
PtrType
>
:
:
Type
Method
false
IdleWithTimer
Storages
.
.
.
>
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
OwningRunnableMethod
<
PtrType
Method
>
>
NewRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
OwningRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
CancelableRunnableMethod
<
PtrType
Method
>
>
NewCancelableRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
CancelableRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
IdleRunnableMethod
<
PtrType
Method
>
>
NewIdleRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
IdleRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
IdleRunnableMethodWithTimer
<
PtrType
Method
>
>
NewIdleRunnableMethodWithTimer
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
IdleRunnableMethodWithTimerImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
NonOwningRunnableMethod
<
PtrType
Method
>
>
NewNonOwningRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
NonOwningRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
NonOwningCancelableRunnableMethod
<
PtrType
Method
>
>
NewNonOwningCancelableRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
NonOwningCancelableRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
NonOwningIdleRunnableMethod
<
PtrType
Method
>
>
NewNonOwningIdleRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
NonOwningIdleRunnableMethodImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
PtrType
typename
Method
>
already_AddRefed
<
detail
:
:
NonOwningIdleRunnableMethodWithTimer
<
PtrType
Method
>
>
NewNonOwningIdleRunnableMethodWithTimer
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
)
{
return
do_AddRef
(
new
detail
:
:
NonOwningIdleRunnableMethodWithTimerImpl
<
PtrType
Method
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
OwningRunnableMethod
<
PtrType
Method
>
>
NewRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
OwningRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
NonOwningRunnableMethod
<
PtrType
Method
>
>
NewNonOwningRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
NonOwningRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
CancelableRunnableMethod
<
PtrType
Method
>
>
NewCancelableRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
CancelableRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
NonOwningCancelableRunnableMethod
<
PtrType
Method
>
>
NewNonOwningCancelableRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
NonOwningCancelableRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
IdleRunnableMethod
<
PtrType
Method
>
>
NewIdleRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
IdleRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
.
.
.
Storages
typename
PtrType
typename
Method
typename
.
.
.
Args
>
already_AddRefed
<
detail
:
:
NonOwningIdleRunnableMethod
<
PtrType
Method
>
>
NewNonOwningIdleRunnableMethod
(
const
char
*
aName
PtrType
&
&
aPtr
Method
aMethod
Args
&
&
.
.
.
aArgs
)
{
static_assert
(
sizeof
.
.
.
(
Storages
)
=
=
sizeof
.
.
.
(
Args
)
"
<
Storages
.
.
.
>
size
should
be
equal
to
number
of
arguments
"
)
;
return
do_AddRef
(
new
detail
:
:
NonOwningIdleRunnableMethodImpl
<
PtrType
Method
Storages
.
.
.
>
(
aName
Forward
<
PtrType
>
(
aPtr
)
aMethod
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
}
#
endif
template
<
class
T
>
class
nsRevocableEventPtr
{
public
:
nsRevocableEventPtr
(
)
:
mEvent
(
nullptr
)
{
}
~
nsRevocableEventPtr
(
)
{
Revoke
(
)
;
}
const
nsRevocableEventPtr
&
operator
=
(
RefPtr
<
T
>
&
&
aEvent
)
{
if
(
mEvent
!
=
aEvent
)
{
Revoke
(
)
;
mEvent
=
Move
(
aEvent
)
;
}
return
*
this
;
}
void
Revoke
(
)
{
if
(
mEvent
)
{
mEvent
-
>
Revoke
(
)
;
mEvent
=
nullptr
;
}
}
void
Forget
(
)
{
mEvent
=
nullptr
;
}
bool
IsPending
(
)
{
return
mEvent
!
=
nullptr
;
}
T
*
get
(
)
{
return
mEvent
;
}
private
:
nsRevocableEventPtr
(
const
nsRevocableEventPtr
&
)
;
nsRevocableEventPtr
&
operator
=
(
const
nsRevocableEventPtr
&
)
;
RefPtr
<
T
>
mEvent
;
}
;
template
<
class
T
>
inline
already_AddRefed
<
T
>
do_AddRef
(
nsRevocableEventPtr
<
T
>
&
aObj
)
{
return
do_AddRef
(
aObj
.
get
(
)
)
;
}
class
nsThreadPoolNaming
{
public
:
nsThreadPoolNaming
(
)
:
mCounter
(
0
)
{
}
nsCString
GetNextThreadName
(
const
nsACString
&
aPoolName
)
;
template
<
size_t
LEN
>
nsCString
GetNextThreadName
(
const
char
(
&
aPoolName
)
[
LEN
]
)
{
return
GetNextThreadName
(
nsDependentCString
(
aPoolName
LEN
-
1
)
)
;
}
private
:
mozilla
:
:
Atomic
<
uint32_t
>
mCounter
;
nsThreadPoolNaming
(
const
nsThreadPoolNaming
&
)
=
delete
;
void
operator
=
(
const
nsThreadPoolNaming
&
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
nsAutoLowPriorityIO
{
public
:
nsAutoLowPriorityIO
(
)
;
~
nsAutoLowPriorityIO
(
)
;
private
:
bool
lowIOPrioritySet
;
#
if
defined
(
XP_MACOSX
)
int
oldPriority
;
#
endif
}
;
void
NS_SetMainThread
(
)
;
void
NS_SetMainThread
(
PRThread
*
aVirtualThread
)
;
void
NS_UnsetMainThread
(
)
;
extern
mozilla
:
:
TimeStamp
NS_GetTimerDeadlineHintOnCurrentThread
(
mozilla
:
:
TimeStamp
aDefault
uint32_t
aSearchBound
)
;
namespace
mozilla
{
PRThread
*
GetCurrentPhysicalThread
(
)
;
PRThread
*
GetCurrentVirtualThread
(
)
;
nsIEventTarget
*
GetCurrentThreadEventTarget
(
)
;
nsIEventTarget
*
GetMainThreadEventTarget
(
)
;
nsISerialEventTarget
*
GetCurrentThreadSerialEventTarget
(
)
;
nsISerialEventTarget
*
GetMainThreadSerialEventTarget
(
)
;
}
#
endif
