#
ifndef
mozilla_SchedulerGroup_h
#
define
mozilla_SchedulerGroup_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
TaskCategory
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsIEventTarget
;
class
nsIRunnable
;
namespace
mozilla
{
class
AbstractThread
;
namespace
dom
{
class
TabGroup
;
}
#
define
NS_SCHEDULERGROUPRUNNABLE_IID
\
{
0xd31b7420
0x872b
0x4cfb
\
{
0xa9
0xc6
0xae
0x4c
0x0f
0x06
0x36
0x74
}
}
class
SchedulerGroup
{
public
:
SchedulerGroup
(
)
;
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
bool
IsBackground
(
)
const
{
return
false
;
}
class
MOZ_STACK_CLASS
AutoProcessEvent
final
{
public
:
AutoProcessEvent
(
)
;
~
AutoProcessEvent
(
)
;
private
:
SchedulerGroup
*
mPrevRunningDispatcher
;
}
;
void
ValidateAccess
(
)
const
{
MOZ_ASSERT
(
!
sRunningDispatcher
|
|
mAccessValid
)
;
}
class
Runnable
final
:
public
mozilla
:
:
Runnable
{
public
:
Runnable
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
SchedulerGroup
*
aGroup
)
;
SchedulerGroup
*
Group
(
)
const
{
return
mGroup
;
}
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
;
bool
IsBackground
(
)
const
{
return
mGroup
-
>
IsBackground
(
)
;
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_SCHEDULERGROUPRUNNABLE_IID
)
;
private
:
~
Runnable
(
)
=
default
;
nsCOMPtr
<
nsIRunnable
>
mRunnable
;
RefPtr
<
SchedulerGroup
>
mGroup
;
}
;
friend
class
Runnable
;
bool
*
GetValidAccessPtr
(
)
{
return
&
mAccessValid
;
}
virtual
nsresult
Dispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
virtual
nsIEventTarget
*
EventTargetFor
(
TaskCategory
aCategory
)
const
;
AbstractThread
*
AbstractMainThreadFor
(
TaskCategory
aCategory
)
;
virtual
dom
:
:
TabGroup
*
AsTabGroup
(
)
{
return
nullptr
;
}
static
nsresult
UnlabeledDispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
static
void
MarkVsyncReceived
(
)
;
static
void
MarkVsyncRan
(
)
;
protected
:
virtual
AbstractThread
*
AbstractMainThreadForImpl
(
TaskCategory
aCategory
)
;
virtual
already_AddRefed
<
nsIEventTarget
>
CreateEventTargetFor
(
TaskCategory
aCategory
)
;
static
SchedulerGroup
*
FromEventTarget
(
nsIEventTarget
*
aEventTarget
)
;
nsresult
LabeledDispatch
(
const
char
*
aName
TaskCategory
aCategory
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
CreateEventTargets
(
bool
aNeedValidation
)
;
void
Shutdown
(
bool
aXPCOMShutdown
)
;
enum
ValidationType
{
StartValidation
EndValidation
}
;
void
SetValidatingAccess
(
ValidationType
aType
)
;
static
SchedulerGroup
*
sRunningDispatcher
;
bool
mAccessValid
;
nsCOMPtr
<
nsIEventTarget
>
mEventTargets
[
size_t
(
TaskCategory
:
:
Count
)
]
;
RefPtr
<
AbstractThread
>
mAbstractThreads
[
size_t
(
TaskCategory
:
:
Count
)
]
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
SchedulerGroup
:
:
Runnable
NS_SCHEDULERGROUPRUNNABLE_IID
)
;
}
#
endif
