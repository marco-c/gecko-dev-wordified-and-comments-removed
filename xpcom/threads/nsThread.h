#
ifndef
nsThread_h__
#
define
nsThread_h__
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIIdlePeriod
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsISupportsPriority
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
SynchronizedEventQueue
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
dom
/
DocGroup
.
h
"
namespace
mozilla
{
class
CycleCollectedJSContext
;
class
ThreadEventTarget
;
}
using
mozilla
:
:
NotNull
;
class
nsThread
:
public
nsIThreadInternal
public
nsISupportsPriority
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIEVENTTARGET_FULL
NS_DECL_NSITHREAD
NS_DECL_NSITHREADINTERNAL
NS_DECL_NSISUPPORTSPRIORITY
enum
MainThreadFlag
{
MAIN_THREAD
NOT_MAIN_THREAD
}
;
nsThread
(
NotNull
<
mozilla
:
:
SynchronizedEventQueue
*
>
aQueue
MainThreadFlag
aMainThread
uint32_t
aStackSize
)
;
nsresult
Init
(
const
nsACString
&
aName
=
NS_LITERAL_CSTRING
(
"
"
)
)
;
nsresult
InitCurrentThread
(
)
;
PRThread
*
GetPRThread
(
)
{
return
mThread
;
}
bool
ShutdownRequired
(
)
{
return
mShutdownRequired
;
}
void
ClearObservers
(
)
{
mEventObservers
.
Clear
(
)
;
}
void
SetScriptObserver
(
mozilla
:
:
CycleCollectedJSContext
*
aScriptObserver
)
;
uint32_t
RecursionDepth
(
)
const
;
void
ShutdownComplete
(
NotNull
<
struct
nsThreadShutdownContext
*
>
aContext
)
;
void
WaitForAllAsynchronousShutdowns
(
)
;
enum
class
ShouldSaveMemoryReport
{
kMaybeReport
kForceReport
}
;
static
bool
SaveMemoryReportNearOOM
(
ShouldSaveMemoryReport
aShouldSave
)
;
static
const
uint32_t
kRunnableNameBufSize
=
1000
;
static
mozilla
:
:
Array
<
char
kRunnableNameBufSize
>
sMainThreadRunnableName
;
void
EnableInputEventPrioritization
(
)
{
EventQueue
(
)
-
>
EnableInputEventPrioritization
(
)
;
}
void
FlushInputEventPrioritization
(
)
{
EventQueue
(
)
-
>
FlushInputEventPrioritization
(
)
;
}
void
SuspendInputEventPrioritization
(
)
{
EventQueue
(
)
-
>
SuspendInputEventPrioritization
(
)
;
}
void
ResumeInputEventPrioritization
(
)
{
EventQueue
(
)
-
>
ResumeInputEventPrioritization
(
)
;
}
#
ifndef
RELEASE_OR_BETA
mozilla
:
:
TimeStamp
&
NextIdleDeadlineRef
(
)
{
return
mNextIdleDeadline
;
}
#
endif
mozilla
:
:
SynchronizedEventQueue
*
EventQueue
(
)
{
return
mEvents
.
get
(
)
;
}
bool
ShuttingDown
(
)
{
return
mShutdownContext
!
=
nullptr
;
}
virtual
mozilla
:
:
PerformanceCounter
*
GetPerformanceCounter
(
nsIRunnable
*
aEvent
)
;
private
:
void
DoMainThreadSpecificProcessing
(
bool
aReallyWait
)
;
protected
:
friend
class
nsThreadShutdownEvent
;
virtual
~
nsThread
(
)
;
static
void
ThreadFunc
(
void
*
aArg
)
;
already_AddRefed
<
nsIThreadObserver
>
GetObserver
(
)
{
nsIThreadObserver
*
obs
;
nsThread
:
:
GetObserver
(
&
obs
)
;
return
already_AddRefed
<
nsIThreadObserver
>
(
obs
)
;
}
struct
nsThreadShutdownContext
*
ShutdownInternal
(
bool
aSync
)
;
RefPtr
<
mozilla
:
:
SynchronizedEventQueue
>
mEvents
;
RefPtr
<
mozilla
:
:
ThreadEventTarget
>
mEventTarget
;
mozilla
:
:
CycleCollectedJSContext
*
mScriptObserver
;
nsAutoTObserverArray
<
NotNull
<
nsCOMPtr
<
nsIThreadObserver
>
>
2
>
mEventObservers
;
int32_t
mPriority
;
PRThread
*
mThread
;
uint32_t
mNestedEventLoopDepth
;
uint32_t
mStackSize
;
struct
nsThreadShutdownContext
*
mShutdownContext
;
nsTArray
<
nsAutoPtr
<
struct
nsThreadShutdownContext
>
>
mRequestedShutdownContexts
;
mozilla
:
:
Atomic
<
bool
>
mShutdownRequired
;
MainThreadFlag
mIsMainThread
;
mozilla
:
:
TimeStamp
mLastUnlabeledRunnable
;
bool
mCanInvokeJS
;
bool
GetSchedulerLoggingEnabled
(
)
;
mozilla
:
:
TimeStamp
mNextIdleDeadline
;
nsCOMPtr
<
nsIRunnable
>
mCurrentEvent
;
mozilla
:
:
TimeStamp
mCurrentEventStart
;
uint32_t
mCurrentEventLoopDepth
;
RefPtr
<
mozilla
:
:
PerformanceCounter
>
mCurrentPerformanceCounter
;
}
;
#
if
defined
(
XP_UNIX
)
&
&
!
defined
(
ANDROID
)
&
&
!
defined
(
DEBUG
)
&
&
HAVE_UALARM
\
&
&
defined
(
_GNU_SOURCE
)
#
define
MOZ_CANARY
extern
int
sCanaryOutputFD
;
#
endif
#
endif
