#
ifndef
nsThread_h__
#
define
nsThread_h__
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsISupportsPriority
.
h
"
#
include
"
nsEventQueue
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
namespace
mozilla
{
class
CycleCollectedJSRuntime
;
}
class
nsThread
:
public
nsIThreadInternal
public
nsISupportsPriority
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIEVENTTARGET
NS_DECL_NSITHREAD
NS_DECL_NSITHREADINTERNAL
NS_DECL_NSISUPPORTSPRIORITY
nsresult
Dispatch
(
nsIRunnable
*
aEvent
uint32_t
aFlags
)
{
return
Dispatch
(
nsCOMPtr
<
nsIRunnable
>
(
aEvent
)
.
forget
(
)
aFlags
)
;
}
enum
MainThreadFlag
{
MAIN_THREAD
NOT_MAIN_THREAD
}
;
nsThread
(
MainThreadFlag
aMainThread
uint32_t
aStackSize
)
;
nsresult
Init
(
)
;
nsresult
InitCurrentThread
(
)
;
PRThread
*
GetPRThread
(
)
{
return
mThread
;
}
bool
ShutdownRequired
(
)
{
return
mShutdownRequired
;
}
void
ClearObservers
(
)
{
mEventObservers
.
Clear
(
)
;
}
void
SetScriptObserver
(
mozilla
:
:
CycleCollectedJSRuntime
*
aScriptObserver
)
;
uint32_t
RecursionDepth
(
)
const
;
void
ShutdownComplete
(
struct
nsThreadShutdownContext
*
aContext
)
;
protected
:
class
nsChainedEventQueue
;
class
nsNestedEventTarget
;
friend
class
nsNestedEventTarget
;
friend
class
nsThreadShutdownEvent
;
virtual
~
nsThread
(
)
;
bool
ShuttingDown
(
)
{
return
mShutdownContext
!
=
nullptr
;
}
static
void
ThreadFunc
(
void
*
aArg
)
;
already_AddRefed
<
nsIThreadObserver
>
GetObserver
(
)
{
nsIThreadObserver
*
obs
;
nsThread
:
:
GetObserver
(
&
obs
)
;
return
already_AddRefed
<
nsIThreadObserver
>
(
obs
)
;
}
nsresult
PutEvent
(
nsIRunnable
*
aEvent
nsNestedEventTarget
*
aTarget
)
;
nsresult
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
nsNestedEventTarget
*
aTarget
)
;
nsresult
DispatchInternal
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
uint32_t
aFlags
nsNestedEventTarget
*
aTarget
)
;
struct
nsThreadShutdownContext
*
ShutdownInternal
(
bool
aSync
)
;
class
nsChainedEventQueue
{
public
:
nsChainedEventQueue
(
)
:
mNext
(
nullptr
)
{
}
bool
GetEvent
(
bool
aMayWait
nsIRunnable
*
*
aEvent
)
{
return
mQueue
.
GetEvent
(
aMayWait
aEvent
)
;
}
void
PutEvent
(
nsIRunnable
*
aEvent
)
{
mQueue
.
PutEvent
(
aEvent
)
;
}
void
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
)
{
mQueue
.
PutEvent
(
mozilla
:
:
Move
(
aEvent
)
)
;
}
bool
HasPendingEvent
(
)
{
return
mQueue
.
HasPendingEvent
(
)
;
}
nsChainedEventQueue
*
mNext
;
nsRefPtr
<
nsNestedEventTarget
>
mEventTarget
;
private
:
nsEventQueue
mQueue
;
}
;
class
nsNestedEventTarget
final
:
public
nsIEventTarget
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIEVENTTARGET
nsNestedEventTarget
(
nsThread
*
aThread
nsChainedEventQueue
*
aQueue
)
:
mThread
(
aThread
)
mQueue
(
aQueue
)
{
}
nsRefPtr
<
nsThread
>
mThread
;
nsChainedEventQueue
*
mQueue
;
private
:
~
nsNestedEventTarget
(
)
{
}
}
;
mozilla
:
:
Mutex
mLock
;
nsCOMPtr
<
nsIThreadObserver
>
mObserver
;
mozilla
:
:
CycleCollectedJSRuntime
*
mScriptObserver
;
nsAutoTObserverArray
<
nsCOMPtr
<
nsIThreadObserver
>
2
>
mEventObservers
;
nsChainedEventQueue
*
mEvents
;
nsChainedEventQueue
mEventsRoot
;
int32_t
mPriority
;
PRThread
*
mThread
;
uint32_t
mNestedEventLoopDepth
;
uint32_t
mStackSize
;
struct
nsThreadShutdownContext
*
mShutdownContext
;
nsTArray
<
nsAutoPtr
<
struct
nsThreadShutdownContext
>
>
mRequestedShutdownContexts
;
bool
mShutdownRequired
;
bool
mEventsAreDoomed
;
MainThreadFlag
mIsMainThread
;
}
;
class
nsThreadSyncDispatch
:
public
nsRunnable
{
public
:
nsThreadSyncDispatch
(
nsIThread
*
aOrigin
already_AddRefed
<
nsIRunnable
>
&
&
aTask
)
:
mOrigin
(
aOrigin
)
mSyncTask
(
aTask
)
mResult
(
NS_ERROR_NOT_INITIALIZED
)
{
}
bool
IsPending
(
)
{
return
mSyncTask
!
=
nullptr
;
}
nsresult
Result
(
)
{
return
mResult
;
}
private
:
NS_DECL_NSIRUNNABLE
nsCOMPtr
<
nsIThread
>
mOrigin
;
nsCOMPtr
<
nsIRunnable
>
mSyncTask
;
nsresult
mResult
;
}
;
#
if
defined
(
XP_UNIX
)
&
&
!
defined
(
ANDROID
)
&
&
!
defined
(
DEBUG
)
&
&
HAVE_UALARM
\
&
&
defined
(
_GNU_SOURCE
)
#
define
MOZ_CANARY
extern
int
sCanaryOutputFD
;
#
endif
#
endif
