#
ifndef
mozilla_Monitor_h
#
define
mozilla_Monitor_h
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
class
Monitor
{
public
:
explicit
Monitor
(
const
char
*
aName
)
:
mMutex
(
aName
)
mCondVar
(
mMutex
"
[
Monitor
.
mCondVar
]
"
)
{
}
~
Monitor
(
)
=
default
;
void
Lock
(
)
{
mMutex
.
Lock
(
)
;
}
bool
TryLock
(
)
{
return
mMutex
.
TryLock
(
)
;
}
void
Unlock
(
)
{
mMutex
.
Unlock
(
)
;
}
void
Wait
(
)
{
mCondVar
.
Wait
(
)
;
}
CVStatus
Wait
(
TimeDuration
aDuration
)
{
return
mCondVar
.
Wait
(
aDuration
)
;
}
void
Notify
(
)
{
mCondVar
.
Notify
(
)
;
}
void
NotifyAll
(
)
{
mCondVar
.
NotifyAll
(
)
;
}
void
AssertCurrentThreadOwns
(
)
const
{
mMutex
.
AssertCurrentThreadOwns
(
)
;
}
void
AssertNotCurrentThreadOwns
(
)
const
{
mMutex
.
AssertNotCurrentThreadOwns
(
)
;
}
private
:
Monitor
(
)
;
Monitor
(
const
Monitor
&
)
;
Monitor
&
operator
=
(
const
Monitor
&
)
;
Mutex
mMutex
;
CondVar
mCondVar
;
}
;
class
MOZ_STACK_CLASS
MonitorAutoLock
{
public
:
explicit
MonitorAutoLock
(
Monitor
&
aMonitor
)
:
mMonitor
(
&
aMonitor
)
{
mMonitor
-
>
Lock
(
)
;
}
~
MonitorAutoLock
(
)
{
mMonitor
-
>
Unlock
(
)
;
}
void
Wait
(
)
{
mMonitor
-
>
Wait
(
)
;
}
CVStatus
Wait
(
TimeDuration
aDuration
)
{
return
mMonitor
-
>
Wait
(
aDuration
)
;
}
void
Notify
(
)
{
mMonitor
-
>
Notify
(
)
;
}
void
NotifyAll
(
)
{
mMonitor
-
>
NotifyAll
(
)
;
}
private
:
MonitorAutoLock
(
)
;
MonitorAutoLock
(
const
MonitorAutoLock
&
)
;
MonitorAutoLock
&
operator
=
(
const
MonitorAutoLock
&
)
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
friend
class
MonitorAutoUnlock
;
Monitor
*
mMonitor
;
}
;
class
MOZ_STACK_CLASS
MonitorAutoUnlock
{
public
:
explicit
MonitorAutoUnlock
(
Monitor
&
aMonitor
)
:
mMonitor
(
&
aMonitor
)
{
mMonitor
-
>
Unlock
(
)
;
}
explicit
MonitorAutoUnlock
(
MonitorAutoLock
&
aMonitorLock
)
:
mMonitor
(
aMonitorLock
.
mMonitor
)
{
mMonitor
-
>
Unlock
(
)
;
}
~
MonitorAutoUnlock
(
)
{
mMonitor
-
>
Lock
(
)
;
}
private
:
MonitorAutoUnlock
(
)
;
MonitorAutoUnlock
(
const
MonitorAutoUnlock
&
)
;
MonitorAutoUnlock
&
operator
=
(
const
MonitorAutoUnlock
&
)
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
Monitor
*
mMonitor
;
}
;
}
#
endif
