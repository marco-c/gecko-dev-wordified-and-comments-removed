#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
namespace
mozilla
{
TaskQueue
:
:
TaskQueue
(
already_AddRefed
<
SharedThreadPool
>
aPool
bool
aRequireTailDispatch
)
:
AbstractThread
(
aRequireTailDispatch
)
mPool
(
aPool
)
mQueueMonitor
(
"
TaskQueue
:
:
Queue
"
)
mTailDispatcher
(
nullptr
)
mIsRunning
(
false
)
mIsShutdown
(
false
)
mIsFlushing
(
false
)
{
MOZ_COUNT_CTOR
(
TaskQueue
)
;
}
TaskQueue
:
:
~
TaskQueue
(
)
{
MonitorAutoLock
mon
(
mQueueMonitor
)
;
MOZ_ASSERT
(
mIsShutdown
)
;
MOZ_COUNT_DTOR
(
TaskQueue
)
;
}
TaskDispatcher
&
TaskQueue
:
:
TailDispatcher
(
)
{
MOZ_ASSERT
(
IsCurrentThreadIn
(
)
)
;
MOZ_ASSERT
(
mTailDispatcher
)
;
return
*
mTailDispatcher
;
}
nsresult
TaskQueue
:
:
DispatchLocked
(
already_AddRefed
<
nsIRunnable
>
aRunnable
DispatchMode
aMode
DispatchFailureHandling
aFailureHandling
DispatchReason
aReason
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
aRunnable
;
AbstractThread
*
currentThread
;
if
(
aReason
!
=
TailDispatch
&
&
(
currentThread
=
GetCurrent
(
)
)
&
&
RequiresTailDispatch
(
currentThread
)
)
{
currentThread
-
>
TailDispatcher
(
)
.
AddTask
(
this
r
.
forget
(
)
aFailureHandling
)
;
return
NS_OK
;
}
mQueueMonitor
.
AssertCurrentThreadOwns
(
)
;
if
(
mIsFlushing
&
&
aMode
=
=
AbortIfFlushing
)
{
return
NS_ERROR_ABORT
;
}
if
(
mIsShutdown
)
{
return
NS_ERROR_FAILURE
;
}
mTasks
.
push
(
r
.
forget
(
)
)
;
if
(
mIsRunning
)
{
return
NS_OK
;
}
RefPtr
<
nsIRunnable
>
runner
(
new
Runner
(
this
)
)
;
nsresult
rv
=
mPool
-
>
Dispatch
(
runner
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Failed
to
dispatch
runnable
to
run
TaskQueue
"
)
;
return
rv
;
}
mIsRunning
=
true
;
return
NS_OK
;
}
void
TaskQueue
:
:
AwaitIdle
(
)
{
MonitorAutoLock
mon
(
mQueueMonitor
)
;
AwaitIdleLocked
(
)
;
}
void
TaskQueue
:
:
AwaitIdleLocked
(
)
{
MOZ_ASSERT_IF
(
AbstractThread
:
:
GetCurrent
(
)
!
AbstractThread
:
:
GetCurrent
(
)
-
>
TailDispatcher
(
)
.
HasTasksFor
(
this
)
)
;
mQueueMonitor
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mIsRunning
|
|
mTasks
.
empty
(
)
)
;
while
(
mIsRunning
)
{
mQueueMonitor
.
Wait
(
)
;
}
}
void
TaskQueue
:
:
AwaitShutdownAndIdle
(
)
{
MOZ_ASSERT_IF
(
AbstractThread
:
:
GetCurrent
(
)
!
AbstractThread
:
:
GetCurrent
(
)
-
>
TailDispatcher
(
)
.
HasTasksFor
(
this
)
)
;
MonitorAutoLock
mon
(
mQueueMonitor
)
;
while
(
!
mIsShutdown
)
{
mQueueMonitor
.
Wait
(
)
;
}
AwaitIdleLocked
(
)
;
}
RefPtr
<
ShutdownPromise
>
TaskQueue
:
:
BeginShutdown
(
)
{
if
(
AbstractThread
*
currentThread
=
AbstractThread
:
:
GetCurrent
(
)
)
{
currentThread
-
>
TailDispatcher
(
)
.
DispatchTasksFor
(
this
)
;
}
MonitorAutoLock
mon
(
mQueueMonitor
)
;
mIsShutdown
=
true
;
RefPtr
<
ShutdownPromise
>
p
=
mShutdownPromise
.
Ensure
(
__func__
)
;
MaybeResolveShutdown
(
)
;
mon
.
NotifyAll
(
)
;
return
p
;
}
bool
TaskQueue
:
:
IsEmpty
(
)
{
MonitorAutoLock
mon
(
mQueueMonitor
)
;
return
mTasks
.
empty
(
)
;
}
bool
TaskQueue
:
:
IsCurrentThreadIn
(
)
{
bool
in
=
NS_GetCurrentThread
(
)
=
=
mRunningThread
;
MOZ_ASSERT
(
in
=
=
(
GetCurrent
(
)
=
=
this
)
)
;
return
in
;
}
nsresult
TaskQueue
:
:
Runner
:
:
Run
(
)
{
RefPtr
<
nsIRunnable
>
event
;
{
MonitorAutoLock
mon
(
mQueue
-
>
mQueueMonitor
)
;
MOZ_ASSERT
(
mQueue
-
>
mIsRunning
)
;
if
(
mQueue
-
>
mTasks
.
size
(
)
=
=
0
)
{
mQueue
-
>
mIsRunning
=
false
;
mQueue
-
>
MaybeResolveShutdown
(
)
;
mon
.
NotifyAll
(
)
;
return
NS_OK
;
}
event
=
mQueue
-
>
mTasks
.
front
(
)
.
forget
(
)
;
mQueue
-
>
mTasks
.
pop
(
)
;
}
MOZ_ASSERT
(
event
)
;
{
AutoTaskGuard
g
(
mQueue
)
;
event
-
>
Run
(
)
;
}
event
=
nullptr
;
{
MonitorAutoLock
mon
(
mQueue
-
>
mQueueMonitor
)
;
if
(
mQueue
-
>
mTasks
.
size
(
)
=
=
0
)
{
mQueue
-
>
mIsRunning
=
false
;
mQueue
-
>
MaybeResolveShutdown
(
)
;
mon
.
NotifyAll
(
)
;
return
NS_OK
;
}
}
nsresult
rv
=
mQueue
-
>
mPool
-
>
TailDispatch
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
MonitorAutoLock
mon
(
mQueue
-
>
mQueueMonitor
)
;
mQueue
-
>
mIsRunning
=
false
;
mQueue
-
>
mIsShutdown
=
true
;
mQueue
-
>
MaybeResolveShutdown
(
)
;
mon
.
NotifyAll
(
)
;
}
return
NS_OK
;
}
}
