#
ifndef
mozilla_PrioritizedEventQueue_h
#
define
mozilla_PrioritizedEventQueue_h
#
include
"
mozilla
/
AbstractEventQueue
.
h
"
#
include
"
LabeledEventQueue
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIIdlePeriod
.
h
"
class
nsIRunnable
;
namespace
mozilla
{
template
<
class
InnerQueueT
>
class
PrioritizedEventQueue
final
:
public
AbstractEventQueue
{
public
:
PrioritizedEventQueue
(
UniquePtr
<
InnerQueueT
>
aHighQueue
UniquePtr
<
InnerQueueT
>
aInputQueue
UniquePtr
<
InnerQueueT
>
aNormalQueue
UniquePtr
<
InnerQueueT
>
aIdleQueue
already_AddRefed
<
nsIIdlePeriod
>
aIdlePeriod
)
;
void
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventPriority
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
already_AddRefed
<
nsIRunnable
>
GetEvent
(
EventPriority
*
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
bool
IsEmpty
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
size_t
Count
(
const
MutexAutoLock
&
aProofOfLock
)
const
final
override
;
bool
HasReadyEvent
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
void
SetMutexRef
(
Mutex
&
aMutex
)
{
mMutex
=
&
aMutex
;
}
#
ifndef
RELEASE_OR_BETA
void
SetNextIdleDeadlineRef
(
TimeStamp
&
aDeadline
)
{
mNextIdleDeadline
=
&
aDeadline
;
}
#
endif
void
EnableInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
void
FlushInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
void
SuspendInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
void
ResumeInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
override
;
private
:
EventPriority
SelectQueue
(
bool
aUpdateState
const
MutexAutoLock
&
aProofOfLock
)
;
mozilla
:
:
TimeStamp
GetIdleDeadline
(
)
;
UniquePtr
<
InnerQueueT
>
mHighQueue
;
UniquePtr
<
InnerQueueT
>
mInputQueue
;
UniquePtr
<
InnerQueueT
>
mNormalQueue
;
UniquePtr
<
InnerQueueT
>
mIdleQueue
;
Mutex
*
mMutex
=
nullptr
;
#
ifndef
RELEASE_OR_BETA
TimeStamp
*
mNextIdleDeadline
=
nullptr
;
#
endif
bool
mProcessHighPriorityQueue
=
false
;
nsCOMPtr
<
nsIIdlePeriod
>
mIdlePeriod
;
bool
mHasPendingEventsPromisedIdleEvent
=
false
;
TimeStamp
mInputHandlingStartTime
;
enum
InputEventQueueState
{
STATE_DISABLED
STATE_FLUSHING
STATE_SUSPEND
STATE_ENABLED
}
;
InputEventQueueState
mInputQueueState
=
STATE_DISABLED
;
}
;
class
EventQueue
;
extern
template
class
PrioritizedEventQueue
<
EventQueue
>
;
extern
template
class
PrioritizedEventQueue
<
LabeledEventQueue
>
;
}
#
endif
