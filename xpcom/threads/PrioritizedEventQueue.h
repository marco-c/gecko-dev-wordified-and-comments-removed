#
ifndef
mozilla_PrioritizedEventQueue_h
#
define
mozilla_PrioritizedEventQueue_h
#
include
"
mozilla
/
AbstractEventQueue
.
h
"
#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIIdlePeriod
.
h
"
class
nsIRunnable
;
namespace
mozilla
{
namespace
ipc
{
class
IdleSchedulerChild
;
}
class
PrioritizedEventQueue
final
:
public
AbstractEventQueue
{
public
:
static
const
bool
SupportsPrioritization
=
true
;
explicit
PrioritizedEventQueue
(
already_AddRefed
<
nsIIdlePeriod
>
aIdlePeriod
)
;
virtual
~
PrioritizedEventQueue
(
)
;
void
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventQueuePriority
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
;
already_AddRefed
<
nsIRunnable
>
GetEvent
(
EventQueuePriority
*
aPriority
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
DidRunEvent
(
const
MutexAutoLock
&
aProofOfLock
)
;
bool
IsEmpty
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
size_t
Count
(
const
MutexAutoLock
&
aProofOfLock
)
const
final
;
bool
HasReadyEvent
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
bool
HasPendingHighPriorityEvents
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
SetMutexRef
(
Mutex
&
aMutex
)
{
mMutex
=
&
aMutex
;
}
#
ifndef
RELEASE_OR_BETA
void
SetNextIdleDeadlineRef
(
TimeStamp
&
aDeadline
)
{
mNextIdleDeadline
=
&
aDeadline
;
}
#
endif
void
EnableInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
FlushInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
SuspendInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
ResumeInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
{
size_t
n
=
0
;
n
+
=
mHighQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
n
+
=
mInputQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
n
+
=
mMediumHighQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
n
+
=
mNormalQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
n
+
=
mDeferredTimersQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
n
+
=
mIdleQueue
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
if
(
mIdlePeriod
)
{
n
+
=
aMallocSizeOf
(
mIdlePeriod
)
;
}
return
n
;
}
void
SetIdleToken
(
uint64_t
aId
TimeDuration
aDuration
)
;
bool
IsActive
(
)
{
return
mActive
;
}
void
EnsureIsActive
(
)
{
if
(
!
mActive
)
{
SetActive
(
)
;
}
}
void
EnsureIsPaused
(
)
{
if
(
mActive
)
{
SetPaused
(
)
;
}
}
private
:
EventQueuePriority
SelectQueue
(
bool
aUpdateState
const
MutexAutoLock
&
aProofOfLock
)
;
mozilla
:
:
TimeStamp
GetLocalIdleDeadline
(
bool
&
aShuttingDown
)
;
void
SetActive
(
)
;
void
SetPaused
(
)
;
TimeStamp
GetIdleToken
(
TimeStamp
aLocalIdlePeriodHint
)
;
void
RequestIdleToken
(
TimeStamp
aLocalIdlePeriodHint
)
;
bool
HasIdleRequest
(
)
{
return
mIdleRequestId
!
=
0
;
}
void
ClearIdleToken
(
)
;
UniquePtr
<
EventQueue
>
mHighQueue
;
UniquePtr
<
EventQueue
>
mInputQueue
;
UniquePtr
<
EventQueue
>
mMediumHighQueue
;
UniquePtr
<
EventQueue
>
mNormalQueue
;
UniquePtr
<
EventQueue
>
mDeferredTimersQueue
;
UniquePtr
<
EventQueue
>
mIdleQueue
;
Mutex
*
mMutex
=
nullptr
;
#
ifndef
RELEASE_OR_BETA
TimeStamp
*
mNextIdleDeadline
=
nullptr
;
#
endif
bool
mProcessHighPriorityQueue
=
false
;
nsCOMPtr
<
nsIIdlePeriod
>
mIdlePeriod
;
bool
mHasPendingEventsPromisedIdleEvent
=
false
;
TimeStamp
mInputHandlingStartTime
;
enum
InputEventQueueState
{
STATE_DISABLED
STATE_FLUSHING
STATE_SUSPEND
STATE_ENABLED
}
;
InputEventQueueState
mInputQueueState
=
STATE_DISABLED
;
TimeStamp
mIdleToken
;
uint64_t
mIdleRequestId
=
0
;
RefPtr
<
ipc
:
:
IdleSchedulerChild
>
mIdleScheduler
;
bool
mIdleSchedulerInitialized
=
false
;
bool
mActive
=
true
;
}
;
}
#
endif
