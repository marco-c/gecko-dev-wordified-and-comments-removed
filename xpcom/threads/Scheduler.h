#
ifndef
mozilla_Scheduler_h
#
define
mozilla_Scheduler_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsILabelableRunnable
.
h
"
#
undef
Yield
class
nsIIdlePeriod
;
class
nsThread
;
namespace
mozilla
{
class
SchedulerGroup
;
class
SchedulerImpl
;
class
SynchronizedEventQueue
;
class
Scheduler
{
public
:
static
already_AddRefed
<
nsThread
>
Init
(
nsIIdlePeriod
*
aIdlePeriod
)
;
static
void
Start
(
)
;
static
void
Shutdown
(
)
;
static
nsCString
GetPrefs
(
)
;
static
void
SetPrefs
(
const
char
*
aPrefs
)
;
static
bool
IsSchedulerEnabled
(
)
;
static
bool
UseMultipleQueues
(
)
;
static
bool
IsCooperativeThread
(
)
;
static
void
Yield
(
)
;
static
bool
UnlabeledEventRunning
(
)
;
static
bool
AnyEventRunning
(
)
;
class
MOZ_RAII
EventLoopActivation
{
public
:
using
EventGroups
=
nsILabelableRunnable
:
:
SchedulerGroupSet
;
EventLoopActivation
(
)
;
~
EventLoopActivation
(
)
;
static
void
Init
(
)
;
bool
IsNested
(
)
const
{
return
!
!
mPrev
;
}
void
SetEvent
(
nsIRunnable
*
aEvent
EventPriority
aPriority
)
;
EventPriority
Priority
(
)
const
{
return
mPriority
;
}
bool
IsLabeled
(
)
{
return
mIsLabeled
;
}
EventGroups
&
EventGroupsAffected
(
)
{
return
mEventGroups
;
}
private
:
EventLoopActivation
*
mPrev
;
bool
mProcessingEvent
;
bool
mIsLabeled
;
EventGroups
mEventGroups
;
EventPriority
mPriority
;
static
MOZ_THREAD_LOCAL
(
EventLoopActivation
*
)
sTopActivation
;
}
;
private
:
friend
class
SchedulerImpl
;
static
UniquePtr
<
SchedulerImpl
>
sScheduler
;
}
;
}
#
endif
