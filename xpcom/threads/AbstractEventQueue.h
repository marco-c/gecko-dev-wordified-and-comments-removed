#
ifndef
mozilla_AbstractEventQueue_h
#
define
mozilla_AbstractEventQueue_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
class
nsIRunnable
;
namespace
mozilla
{
enum
class
EventPriority
{
High
Input
Normal
Idle
Count
}
;
class
AbstractEventQueue
{
public
:
virtual
void
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventPriority
aPriority
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
already_AddRefed
<
nsIRunnable
>
GetEvent
(
EventPriority
*
aPriority
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
bool
IsEmpty
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
bool
HasReadyEvent
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
size_t
Count
(
const
MutexAutoLock
&
aProofOfLock
)
const
=
0
;
virtual
void
EnableInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
void
FlushInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
void
SuspendInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
virtual
void
ResumeInputEventPrioritization
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
=
0
;
virtual
~
AbstractEventQueue
(
)
{
}
}
;
}
#
endif
