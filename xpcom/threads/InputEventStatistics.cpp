#
include
"
InputEventStatistics
.
h
"
#
include
"
nsRefreshDriver
.
h
"
namespace
mozilla
{
TimeDuration
InputEventStatistics
:
:
TimeDurationCircularBuffer
:
:
GetMean
(
)
{
return
mTotal
/
(
int64_t
)
mSize
;
}
InputEventStatistics
:
:
InputEventStatistics
(
)
:
mEnable
(
false
)
{
MOZ_ASSERT
(
Preferences
:
:
IsServiceAvailable
(
)
)
;
uint32_t
inputDuration
=
Preferences
:
:
GetUint
(
"
prioritized_input_events
.
default_duration_per_event
"
sDefaultInputDuration
)
;
TimeDuration
defaultDuration
=
TimeDuration
:
:
FromMilliseconds
(
inputDuration
)
;
uint32_t
count
=
Preferences
:
:
GetUint
(
"
prioritized_input_events
.
count_for_prediction
"
sInputCountForPrediction
)
;
mLastInputDurations
=
MakeUnique
<
TimeDurationCircularBuffer
>
(
count
defaultDuration
)
;
uint32_t
maxDuration
=
Preferences
:
:
GetUint
(
"
prioritized_input_events
.
duration
.
max
"
sMaxReservedTimeForHandlingInput
)
;
uint32_t
minDuration
=
Preferences
:
:
GetUint
(
"
prioritized_input_events
.
duration
.
min
"
sMinReservedTimeForHandlingInput
)
;
mMaxInputDuration
=
TimeDuration
:
:
FromMilliseconds
(
maxDuration
)
;
mMinInputDuration
=
TimeDuration
:
:
FromMilliseconds
(
minDuration
)
;
}
TimeStamp
InputEventStatistics
:
:
GetInputHandlingStartTime
(
uint32_t
aInputCount
)
{
MOZ_ASSERT
(
mEnable
)
;
Maybe
<
TimeStamp
>
nextTickHint
=
nsRefreshDriver
:
:
GetNextTickHint
(
)
;
if
(
nextTickHint
.
isNothing
(
)
)
{
return
TimeStamp
:
:
Now
(
)
-
TimeDuration
:
:
FromMilliseconds
(
1
)
;
}
TimeDuration
inputCost
=
mLastInputDurations
-
>
GetMean
(
)
*
aInputCount
;
inputCost
=
inputCost
>
mMaxInputDuration
?
mMaxInputDuration
:
inputCost
<
mMinInputDuration
?
mMinInputDuration
:
inputCost
;
return
nextTickHint
.
value
(
)
-
inputCost
;
}
}
