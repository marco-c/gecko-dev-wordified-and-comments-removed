#
ifndef
mozilla_InputTaskManager_h
#
define
mozilla_InputTaskManager_h
#
include
"
TaskController
.
h
"
namespace
mozilla
{
class
InputTaskManager
:
public
TaskManager
{
public
:
int32_t
GetPriorityModifierForEventLoopTurn
(
const
MutexAutoLock
&
aProofOfLock
)
final
;
void
WillRunTask
(
)
final
;
void
DidRunTask
(
)
final
;
enum
InputEventQueueState
{
STATE_DISABLED
STATE_FLUSHING
STATE_SUSPEND
STATE_ENABLED
}
;
void
EnableInputEventPrioritization
(
)
;
void
FlushInputEventPrioritization
(
)
;
void
SuspendInputEventPrioritization
(
)
;
void
ResumeInputEventPrioritization
(
)
;
InputEventQueueState
State
(
)
{
return
mInputQueueState
;
}
void
SetState
(
InputEventQueueState
aState
)
{
mInputQueueState
=
aState
;
}
TimeStamp
InputHandlingStartTime
(
)
{
return
mInputHandlingStartTime
;
}
void
SetInputHandlingStartTime
(
TimeStamp
aStartTime
)
{
mInputHandlingStartTime
=
aStartTime
;
}
static
InputTaskManager
*
Get
(
)
;
static
void
Cleanup
(
)
{
gInputTaskManager
=
nullptr
;
}
private
:
InputTaskManager
(
)
:
mInputQueueState
(
STATE_DISABLED
)
{
}
TimeStamp
mInputHandlingStartTime
;
Atomic
<
InputEventQueueState
>
mInputQueueState
;
AutoTArray
<
TimeStamp
4
>
mStartTimes
;
static
StaticRefPtr
<
InputTaskManager
>
gInputTaskManager
;
}
;
}
#
endif
