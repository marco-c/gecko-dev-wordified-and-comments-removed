#
ifndef
mozilla_SynchronizedEventQueue_h
#
define
mozilla_SynchronizedEventQueue_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
AbstractEventQueue
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTObserverArray
.
h
"
class
nsIThreadObserver
;
namespace
mozilla
{
class
ThreadTargetSink
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ThreadTargetSink
)
virtual
bool
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventQueuePriority
aPriority
)
=
0
;
virtual
void
Disconnect
(
const
MutexAutoLock
&
aProofOfLock
)
=
0
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
=
0
;
protected
:
virtual
~
ThreadTargetSink
(
)
{
}
}
;
class
SynchronizedEventQueue
:
public
ThreadTargetSink
{
public
:
virtual
already_AddRefed
<
nsIRunnable
>
GetEvent
(
bool
aMayWait
EventQueuePriority
*
aPriority
)
=
0
;
virtual
bool
HasPendingEvent
(
)
=
0
;
virtual
bool
HasPendingHighPriorityEvents
(
)
=
0
;
virtual
bool
ShutdownIfNoPendingEvents
(
)
=
0
;
virtual
already_AddRefed
<
nsIThreadObserver
>
GetObserver
(
)
=
0
;
virtual
already_AddRefed
<
nsIThreadObserver
>
GetObserverOnThread
(
)
=
0
;
virtual
void
SetObserver
(
nsIThreadObserver
*
aObserver
)
=
0
;
void
AddObserver
(
nsIThreadObserver
*
aObserver
)
;
void
RemoveObserver
(
nsIThreadObserver
*
aObserver
)
;
const
nsTObserverArray
<
nsCOMPtr
<
nsIThreadObserver
>
>
&
EventObservers
(
)
;
virtual
void
EnableInputEventPrioritization
(
)
=
0
;
virtual
void
FlushInputEventPrioritization
(
)
=
0
;
virtual
void
SuspendInputEventPrioritization
(
)
=
0
;
virtual
void
ResumeInputEventPrioritization
(
)
=
0
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
mEventObservers
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
protected
:
virtual
~
SynchronizedEventQueue
(
)
{
}
private
:
nsTObserverArray
<
nsCOMPtr
<
nsIThreadObserver
>
>
mEventObservers
;
}
;
}
#
endif
