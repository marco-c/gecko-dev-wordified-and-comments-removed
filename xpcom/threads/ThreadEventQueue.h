#
ifndef
mozilla_ThreadEventQueue_h
#
define
mozilla_ThreadEventQueue_h
#
include
"
mozilla
/
AbstractEventQueue
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
#
include
"
mozilla
/
SynchronizedEventQueue
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIEventTarget
;
class
nsISerialEventTarget
;
class
nsIThreadObserver
;
namespace
mozilla
{
class
EventQueue
;
class
PrioritizedEventQueue
;
class
ThreadEventTarget
;
template
<
class
InnerQueueT
>
class
ThreadEventQueue
final
:
public
SynchronizedEventQueue
{
public
:
explicit
ThreadEventQueue
(
UniquePtr
<
InnerQueueT
>
aQueue
bool
aIsMainThread
=
false
)
;
bool
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventQueuePriority
aPriority
)
final
;
already_AddRefed
<
nsIRunnable
>
GetEvent
(
bool
aMayWait
EventQueuePriority
*
aPriority
mozilla
:
:
TimeDuration
*
aLastEventDelay
=
nullptr
)
final
;
void
DidRunEvent
(
)
final
;
bool
HasPendingEvent
(
)
final
;
bool
HasPendingHighPriorityEvents
(
)
final
;
bool
ShutdownIfNoPendingEvents
(
)
final
;
void
Disconnect
(
const
MutexAutoLock
&
aProofOfLock
)
final
{
}
void
EnableInputEventPrioritization
(
)
final
;
void
FlushInputEventPrioritization
(
)
final
;
void
SuspendInputEventPrioritization
(
)
final
;
void
ResumeInputEventPrioritization
(
)
final
;
already_AddRefed
<
nsISerialEventTarget
>
PushEventQueue
(
)
final
;
void
PopEventQueue
(
nsIEventTarget
*
aTarget
)
final
;
already_AddRefed
<
nsIThreadObserver
>
GetObserver
(
)
final
;
already_AddRefed
<
nsIThreadObserver
>
GetObserverOnThread
(
)
final
;
void
SetObserver
(
nsIThreadObserver
*
aObserver
)
final
;
Mutex
&
MutexRef
(
)
{
return
mLock
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
private
:
class
NestedSink
;
virtual
~
ThreadEventQueue
(
)
;
bool
PutEventInternal
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventQueuePriority
aPriority
NestedSink
*
aQueue
)
;
UniquePtr
<
InnerQueueT
>
mBaseQueue
;
struct
NestedQueueItem
{
UniquePtr
<
EventQueue
>
mQueue
;
RefPtr
<
ThreadEventTarget
>
mEventTarget
;
NestedQueueItem
(
UniquePtr
<
EventQueue
>
aQueue
ThreadEventTarget
*
aEventTarget
)
:
mQueue
(
std
:
:
move
(
aQueue
)
)
mEventTarget
(
aEventTarget
)
{
}
}
;
nsTArray
<
NestedQueueItem
>
mNestedQueues
;
Mutex
mLock
;
CondVar
mEventsAvailable
;
bool
mEventsAreDoomed
=
false
;
nsCOMPtr
<
nsIThreadObserver
>
mObserver
;
bool
mIsMainThread
;
}
;
extern
template
class
ThreadEventQueue
<
EventQueue
>
;
extern
template
class
ThreadEventQueue
<
PrioritizedEventQueue
>
;
}
;
#
endif
