#
include
"
mozilla
/
EventQueue
.
h
"
#
include
"
nsIRunnable
.
h
"
using
namespace
mozilla
;
EventQueue
:
:
EventQueue
(
)
{
}
void
EventQueue
:
:
PutEvent
(
already_AddRefed
<
nsIRunnable
>
&
&
aEvent
EventPriority
aPriority
const
MutexAutoLock
&
aProofOfLock
)
{
nsCOMPtr
<
nsIRunnable
>
event
(
aEvent
)
;
mQueue
.
Push
(
Move
(
event
)
)
;
}
already_AddRefed
<
nsIRunnable
>
EventQueue
:
:
GetEvent
(
EventPriority
*
aPriority
const
MutexAutoLock
&
aProofOfLock
)
{
if
(
mQueue
.
IsEmpty
(
)
)
{
return
nullptr
;
}
if
(
aPriority
)
{
*
aPriority
=
EventPriority
:
:
Normal
;
}
nsCOMPtr
<
nsIRunnable
>
result
=
mQueue
.
Pop
(
)
;
return
result
.
forget
(
)
;
}
bool
EventQueue
:
:
IsEmpty
(
const
MutexAutoLock
&
aProofOfLock
)
{
return
mQueue
.
IsEmpty
(
)
;
}
bool
EventQueue
:
:
HasReadyEvent
(
const
MutexAutoLock
&
aProofOfLock
)
{
return
!
IsEmpty
(
aProofOfLock
)
;
}
already_AddRefed
<
nsIRunnable
>
EventQueue
:
:
PeekEvent
(
const
MutexAutoLock
&
aProofOfLock
)
{
if
(
mQueue
.
IsEmpty
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIRunnable
>
result
=
mQueue
.
FirstElement
(
)
;
return
result
.
forget
(
)
;
}
size_t
EventQueue
:
:
Count
(
const
MutexAutoLock
&
aProofOfLock
)
const
{
return
mQueue
.
Count
(
)
;
}
