#
ifndef
XPCOM_THREADS_TARGETSHUTDOWNTASKSET_H_
#
define
XPCOM_THREADS_TARGETSHUTDOWNTASKSET_H_
#
include
<
random
>
#
include
"
nsITargetShutdownTask
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIRunnable
;
class
TargetShutdownTaskSet
{
public
:
using
TasksArray
=
nsTArray
<
nsCOMPtr
<
nsITargetShutdownTask
>
>
;
TargetShutdownTaskSet
(
)
=
default
;
TargetShutdownTaskSet
(
TargetShutdownTaskSet
&
&
aOther
)
=
default
;
TargetShutdownTaskSet
(
TargetShutdownTaskSet
&
aOther
)
=
delete
;
nsresult
AddTask
(
nsITargetShutdownTask
*
aTask
)
{
MOZ_ASSERT
(
aTask
)
;
MOZ_ASSERT
(
!
mShutdownTasksTaken
)
;
MOZ_ASSERT
(
!
mShutdownTasks
.
Contains
(
aTask
)
)
;
mShutdownTasks
.
AppendElement
(
aTask
)
;
return
NS_OK
;
}
nsresult
RemoveTask
(
nsITargetShutdownTask
*
aTask
)
{
MOZ_ASSERT
(
aTask
)
;
TasksArray
:
:
index_type
idx
=
mShutdownTasks
.
LastIndexOf
(
aTask
)
;
if
(
idx
!
=
TasksArray
:
:
NoIndex
)
{
mShutdownTasks
.
RemoveElementAt
(
idx
)
;
return
NS_OK
;
}
return
NS_ERROR_UNEXPECTED
;
}
TasksArray
Extract
(
)
{
MOZ_ASSERT
(
!
mShutdownTasksTaken
)
;
TasksArray
ret
=
std
:
:
move
(
mShutdownTasks
)
;
#
ifdef
DEBUG
mShutdownTasksTaken
=
true
;
#
endif
return
ret
;
}
bool
IsEmpty
(
)
{
return
mShutdownTasks
.
IsEmpty
(
)
;
}
~
TargetShutdownTaskSet
(
)
{
MOZ_ASSERT
(
mShutdownTasks
.
IsEmpty
(
)
)
;
}
private
:
TasksArray
mShutdownTasks
;
#
ifdef
DEBUG
bool
mShutdownTasksTaken
{
false
}
;
#
endif
}
;
#
endif
