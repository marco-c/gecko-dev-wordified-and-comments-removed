#
ifndef
TimerThread_h___
#
define
TimerThread_h___
#
include
"
nsIObserver
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsTimerImpl
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
ProfilerUtils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
algorithm
>
namespace
mozilla
{
class
TimeStamp
;
}
class
TimerThread
final
:
public
mozilla
:
:
Runnable
public
nsIObserver
{
public
:
typedef
mozilla
:
:
Monitor
Monitor
;
typedef
mozilla
:
:
MutexAutoLock
MutexAutoLock
;
typedef
mozilla
:
:
TimeStamp
TimeStamp
;
typedef
mozilla
:
:
TimeDuration
TimeDuration
;
TimerThread
(
)
;
nsresult
InitLocks
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIRUNNABLE
NS_DECL_NSIOBSERVER
nsresult
Shutdown
(
)
;
nsresult
AddTimer
(
nsTimerImpl
*
aTimer
const
MutexAutoLock
&
aProofOfLock
)
REQUIRES
(
aTimer
-
>
mMutex
)
;
nsresult
RemoveTimer
(
nsTimerImpl
*
aTimer
const
MutexAutoLock
&
aProofOfLock
)
REQUIRES
(
aTimer
-
>
mMutex
)
;
TimeStamp
FindNextFireTimeForCurrentThread
(
TimeStamp
aDefault
uint32_t
aSearchBound
)
;
void
DoBeforeSleep
(
)
;
void
DoAfterSleep
(
)
;
bool
IsOnTimerThread
(
)
const
{
return
mThread
-
>
SerialEventTarget
(
)
-
>
IsOnCurrentThread
(
)
;
}
uint32_t
AllowedEarlyFiringMicroseconds
(
)
;
private
:
~
TimerThread
(
)
;
bool
mInitialized
;
bool
AddTimerInternal
(
nsTimerImpl
*
aTimer
)
REQUIRES
(
mMonitor
)
;
bool
RemoveTimerInternal
(
nsTimerImpl
*
aTimer
)
REQUIRES
(
mMonitor
aTimer
-
>
mMutex
)
;
void
RemoveLeadingCanceledTimersInternal
(
)
REQUIRES
(
mMonitor
)
;
void
RemoveFirstTimerInternal
(
)
REQUIRES
(
mMonitor
)
;
nsresult
Init
(
)
REQUIRES
(
mMonitor
)
;
void
PostTimerEvent
(
already_AddRefed
<
nsTimerImpl
>
aTimerRef
)
REQUIRES
(
mMonitor
)
;
nsCOMPtr
<
nsIThread
>
mThread
;
Monitor
mMonitor
;
bool
mShutdown
GUARDED_BY
(
mMonitor
)
;
bool
mWaiting
GUARDED_BY
(
mMonitor
)
;
bool
mNotified
GUARDED_BY
(
mMonitor
)
;
bool
mSleeping
GUARDED_BY
(
mMonitor
)
;
class
Entry
final
:
public
nsTimerImplHolder
{
const
TimeStamp
mTimeout
;
public
:
Entry
(
const
TimeStamp
&
aMinTimeout
const
TimeStamp
&
aTimeout
nsTimerImpl
*
aTimerImpl
)
:
nsTimerImplHolder
(
aTimerImpl
)
mTimeout
(
std
:
:
max
(
aMinTimeout
aTimeout
)
)
{
}
nsTimerImpl
*
Value
(
)
const
{
return
mTimerImpl
;
}
already_AddRefed
<
nsTimerImpl
>
Take
(
)
{
if
(
mTimerImpl
)
{
MOZ_ASSERT
(
mTimerImpl
-
>
mHolder
=
=
this
)
;
mTimerImpl
-
>
SetHolder
(
nullptr
)
;
}
return
mTimerImpl
.
forget
(
)
;
}
static
bool
UniquePtrLessThan
(
mozilla
:
:
UniquePtr
<
Entry
>
&
aLeft
mozilla
:
:
UniquePtr
<
Entry
>
&
aRight
)
{
return
aRight
-
>
mTimeout
<
aLeft
-
>
mTimeout
;
}
TimeStamp
Timeout
(
)
const
{
return
mTimeout
;
}
}
;
nsTArray
<
mozilla
:
:
UniquePtr
<
Entry
>
>
mTimers
GUARDED_BY
(
mMonitor
)
;
uint32_t
mAllowedEarlyFiringMicroseconds
GUARDED_BY
(
mMonitor
)
;
ProfilerThreadId
mProfilerThreadId
GUARDED_BY
(
mMonitor
)
;
}
;
#
endif
