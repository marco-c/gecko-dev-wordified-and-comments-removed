#
include
"
mozilla
/
RWLock
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
static_assert
(
sizeof
(
SRWLOCK
)
<
=
sizeof
(
void
*
)
"
SRWLOCK
is
too
big
!
"
)
;
#
define
NativeHandle
(
m
)
(
reinterpret_cast
<
SRWLOCK
*
>
(
&
m
)
)
#
else
#
define
NativeHandle
(
m
)
(
&
m
)
#
endif
namespace
mozilla
{
RWLock
:
:
RWLock
(
const
char
*
aName
)
:
BlockingResourceBase
(
aName
eMutex
)
#
ifdef
DEBUG
mOwningThread
(
nullptr
)
#
endif
{
#
ifdef
XP_WIN
InitializeSRWLock
(
NativeHandle
(
mRWLock
)
)
;
#
else
MOZ_RELEASE_ASSERT
(
pthread_rwlock_init
(
NativeHandle
(
mRWLock
)
nullptr
)
=
=
0
"
pthread_rwlock_init
failed
"
)
;
#
endif
}
#
ifdef
DEBUG
bool
RWLock
:
:
LockedForWritingByCurrentThread
(
)
{
return
mOwningThread
=
=
PR_GetCurrentThread
(
)
;
}
#
endif
#
ifndef
XP_WIN
RWLock
:
:
~
RWLock
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_destroy
(
NativeHandle
(
mRWLock
)
)
=
=
0
"
pthread_rwlock_destroy
failed
"
)
;
}
#
endif
bool
RWLock
:
:
TryReadLockInternal
(
)
{
#
ifdef
XP_WIN
return
TryAcquireSRWLockShared
(
NativeHandle
(
mRWLock
)
)
;
#
else
int
rv
=
pthread_rwlock_tryrdlock
(
NativeHandle
(
mRWLock
)
)
;
MOZ_RELEASE_ASSERT
(
rv
=
=
0
|
|
rv
=
=
EBUSY
|
|
rv
=
=
EDEADLK
"
pthread_rwlock_tryrdlock
failed
"
)
;
return
rv
=
=
0
;
#
endif
}
void
RWLock
:
:
ReadLockInternal
(
)
{
#
ifdef
XP_WIN
AcquireSRWLockShared
(
NativeHandle
(
mRWLock
)
)
;
#
else
MOZ_RELEASE_ASSERT
(
pthread_rwlock_rdlock
(
NativeHandle
(
mRWLock
)
)
=
=
0
"
pthread_rwlock_rdlock
failed
"
)
;
#
endif
}
void
RWLock
:
:
ReadUnlockInternal
(
)
{
#
ifdef
XP_WIN
ReleaseSRWLockShared
(
NativeHandle
(
mRWLock
)
)
;
#
else
MOZ_RELEASE_ASSERT
(
pthread_rwlock_unlock
(
NativeHandle
(
mRWLock
)
)
=
=
0
"
pthread_rwlock_unlock
failed
"
)
;
#
endif
}
bool
RWLock
:
:
TryWriteLockInternal
(
)
{
#
ifdef
XP_WIN
return
TryAcquireSRWLockExclusive
(
NativeHandle
(
mRWLock
)
)
;
#
else
int
rv
=
pthread_rwlock_trywrlock
(
NativeHandle
(
mRWLock
)
)
;
MOZ_RELEASE_ASSERT
(
rv
=
=
0
|
|
rv
=
=
EBUSY
|
|
rv
=
=
EDEADLK
"
pthread_rwlock_trywrlock
failed
"
)
;
return
rv
=
=
0
;
#
endif
}
void
RWLock
:
:
WriteLockInternal
(
)
{
#
ifdef
XP_WIN
AcquireSRWLockExclusive
(
NativeHandle
(
mRWLock
)
)
;
#
else
MOZ_RELEASE_ASSERT
(
pthread_rwlock_wrlock
(
NativeHandle
(
mRWLock
)
)
=
=
0
"
pthread_rwlock_wrlock
failed
"
)
;
#
endif
}
void
RWLock
:
:
WriteUnlockInternal
(
)
{
#
ifdef
XP_WIN
ReleaseSRWLockExclusive
(
NativeHandle
(
mRWLock
)
)
;
#
else
MOZ_RELEASE_ASSERT
(
pthread_rwlock_unlock
(
NativeHandle
(
mRWLock
)
)
=
=
0
"
pthread_rwlock_unlock
failed
"
)
;
#
endif
}
}
#
undef
NativeHandle
