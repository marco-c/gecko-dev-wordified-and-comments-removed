#
ifndef
mozilla_RWLock_h
#
define
mozilla_RWLock_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
BlockingResourceBase
.
h
"
#
include
"
mozilla
/
PlatformRWLock
.
h
"
#
include
"
mozilla
/
ThreadSafety
.
h
"
namespace
mozilla
{
class
CAPABILITY
RWLock
:
public
detail
:
:
RWLockImpl
public
BlockingResourceBase
{
public
:
explicit
RWLock
(
const
char
*
aName
)
;
#
ifdef
DEBUG
bool
LockedForWritingByCurrentThread
(
)
;
[
[
nodiscard
]
]
bool
TryReadLock
(
)
SHARED_TRYLOCK_FUNCTION
(
true
)
;
void
ReadLock
(
)
ACQUIRE_SHARED
(
)
;
void
ReadUnlock
(
)
RELEASE_SHARED
(
)
;
[
[
nodiscard
]
]
bool
TryWriteLock
(
)
TRY_ACQUIRE
(
true
)
;
void
WriteLock
(
)
CAPABILITY_ACQUIRE
(
)
;
void
WriteUnlock
(
)
EXCLUSIVE_RELEASE
(
)
;
#
else
[
[
nodiscard
]
]
bool
TryReadLock
(
)
SHARED_TRYLOCK_FUNCTION
(
true
)
{
return
detail
:
:
RWLockImpl
:
:
tryReadLock
(
)
;
}
void
ReadLock
(
)
ACQUIRE_SHARED
(
)
{
detail
:
:
RWLockImpl
:
:
readLock
(
)
;
}
void
ReadUnlock
(
)
RELEASE_SHARED
(
)
{
detail
:
:
RWLockImpl
:
:
readUnlock
(
)
;
}
[
[
nodiscard
]
]
bool
TryWriteLock
(
)
TRY_ACQUIRE
(
true
)
{
return
detail
:
:
RWLockImpl
:
:
tryWriteLock
(
)
;
}
void
WriteLock
(
)
CAPABILITY_ACQUIRE
(
)
{
detail
:
:
RWLockImpl
:
:
writeLock
(
)
;
}
void
WriteUnlock
(
)
EXCLUSIVE_RELEASE
(
)
{
detail
:
:
RWLockImpl
:
:
writeUnlock
(
)
;
}
#
endif
private
:
RWLock
(
)
=
delete
;
RWLock
(
const
RWLock
&
)
=
delete
;
RWLock
&
operator
=
(
const
RWLock
&
)
=
delete
;
#
ifdef
DEBUG
PRThread
*
mOwningThread
;
#
endif
}
;
template
<
typename
T
>
class
MOZ_RAII
BaseAutoTryReadLock
{
public
:
explicit
BaseAutoTryReadLock
(
T
&
aLock
)
:
mLock
(
aLock
.
TryReadLock
(
)
?
&
aLock
:
nullptr
)
{
}
~
BaseAutoTryReadLock
(
)
{
if
(
mLock
)
{
mLock
-
>
ReadUnlock
(
)
;
}
}
explicit
operator
bool
(
)
const
{
return
mLock
;
}
private
:
BaseAutoTryReadLock
(
)
=
delete
;
BaseAutoTryReadLock
(
const
BaseAutoTryReadLock
&
)
=
delete
;
BaseAutoTryReadLock
&
operator
=
(
const
BaseAutoTryReadLock
&
)
=
delete
;
T
*
mLock
;
}
;
template
<
typename
T
>
class
SCOPED_CAPABILITY
MOZ_RAII
BaseAutoReadLock
{
public
:
explicit
BaseAutoReadLock
(
T
&
aLock
)
ACQUIRE_SHARED
(
aLock
)
:
mLock
(
&
aLock
)
{
MOZ_ASSERT
(
mLock
"
null
lock
"
)
;
mLock
-
>
ReadLock
(
)
;
}
~
BaseAutoReadLock
(
)
RELEASE_GENERIC
(
)
{
mLock
-
>
ReadUnlock
(
)
;
}
private
:
BaseAutoReadLock
(
)
=
delete
;
BaseAutoReadLock
(
const
BaseAutoReadLock
&
)
=
delete
;
BaseAutoReadLock
&
operator
=
(
const
BaseAutoReadLock
&
)
=
delete
;
T
*
mLock
;
}
;
template
<
typename
T
>
class
MOZ_RAII
BaseAutoTryWriteLock
{
public
:
explicit
BaseAutoTryWriteLock
(
T
&
aLock
)
:
mLock
(
aLock
.
TryWriteLock
(
)
?
&
aLock
:
nullptr
)
{
}
~
BaseAutoTryWriteLock
(
)
{
if
(
mLock
)
{
mLock
-
>
WriteUnlock
(
)
;
}
}
explicit
operator
bool
(
)
const
{
return
mLock
;
}
private
:
BaseAutoTryWriteLock
(
)
=
delete
;
BaseAutoTryWriteLock
(
const
BaseAutoTryWriteLock
&
)
=
delete
;
BaseAutoTryWriteLock
&
operator
=
(
const
BaseAutoTryWriteLock
&
)
=
delete
;
T
*
mLock
;
}
;
template
<
typename
T
>
class
SCOPED_CAPABILITY
MOZ_RAII
BaseAutoWriteLock
final
{
public
:
explicit
BaseAutoWriteLock
(
T
&
aLock
)
CAPABILITY_ACQUIRE
(
aLock
)
:
mLock
(
&
aLock
)
{
MOZ_ASSERT
(
mLock
"
null
lock
"
)
;
mLock
-
>
WriteLock
(
)
;
}
~
BaseAutoWriteLock
(
)
CAPABILITY_RELEASE
(
)
{
mLock
-
>
WriteUnlock
(
)
;
}
private
:
BaseAutoWriteLock
(
)
=
delete
;
BaseAutoWriteLock
(
const
BaseAutoWriteLock
&
)
=
delete
;
BaseAutoWriteLock
&
operator
=
(
const
BaseAutoWriteLock
&
)
=
delete
;
T
*
mLock
;
}
;
typedef
BaseAutoTryReadLock
<
RWLock
>
AutoTryReadLock
;
typedef
BaseAutoReadLock
<
RWLock
>
AutoReadLock
;
typedef
BaseAutoTryWriteLock
<
RWLock
>
AutoTryWriteLock
;
typedef
BaseAutoWriteLock
<
RWLock
>
AutoWriteLock
;
namespace
detail
{
class
CAPABILITY
StaticRWLock
{
public
:
#
ifdef
DEBUG
StaticRWLock
(
)
{
MOZ_ASSERT
(
!
mLock
)
;
}
#
endif
[
[
nodiscard
]
]
bool
TryReadLock
(
)
SHARED_TRYLOCK_FUNCTION
(
true
)
{
return
Lock
(
)
-
>
TryReadLock
(
)
;
}
void
ReadLock
(
)
ACQUIRE_SHARED
(
)
{
Lock
(
)
-
>
ReadLock
(
)
;
}
void
ReadUnlock
(
)
RELEASE_SHARED
(
)
{
Lock
(
)
-
>
ReadUnlock
(
)
;
}
[
[
nodiscard
]
]
bool
TryWriteLock
(
)
TRY_ACQUIRE
(
true
)
{
return
Lock
(
)
-
>
TryWriteLock
(
)
;
}
void
WriteLock
(
)
CAPABILITY_ACQUIRE
(
)
{
Lock
(
)
-
>
WriteLock
(
)
;
}
void
WriteUnlock
(
)
EXCLUSIVE_RELEASE
(
)
{
Lock
(
)
-
>
WriteUnlock
(
)
;
}
private
:
[
[
nodiscard
]
]
RWLock
*
Lock
(
)
RETURN_CAPABILITY
(
*
mLock
)
{
if
(
mLock
)
{
return
mLock
;
}
RWLock
*
lock
=
new
RWLock
(
"
StaticRWLock
"
)
;
if
(
!
mLock
.
compareExchange
(
nullptr
lock
)
)
{
delete
lock
;
}
return
mLock
;
}
Atomic
<
RWLock
*
>
mLock
;
#
ifdef
DEBUG
StaticRWLock
(
const
StaticRWLock
&
aOther
)
;
#
endif
StaticRWLock
&
operator
=
(
StaticRWLock
*
aRhs
)
=
delete
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
=
delete
;
static
void
operator
delete
(
void
*
)
=
delete
;
}
;
typedef
BaseAutoTryReadLock
<
StaticRWLock
>
StaticAutoTryReadLock
;
typedef
BaseAutoReadLock
<
StaticRWLock
>
StaticAutoReadLock
;
typedef
BaseAutoTryWriteLock
<
StaticRWLock
>
StaticAutoTryWriteLock
;
typedef
BaseAutoWriteLock
<
StaticRWLock
>
StaticAutoWriteLock
;
}
}
#
endif
