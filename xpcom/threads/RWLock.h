#
ifndef
mozilla_RWLock_h
#
define
mozilla_RWLock_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
BlockingResourceBase
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
ifndef
XP_WIN
#
include
<
pthread
.
h
>
#
endif
namespace
mozilla
{
class
RWLock
:
public
BlockingResourceBase
{
public
:
explicit
RWLock
(
const
char
*
aName
)
;
#
ifdef
XP_WIN
~
RWLock
(
)
=
default
;
#
else
~
RWLock
(
)
;
#
endif
#
ifdef
DEBUG
bool
LockedForWritingByCurrentThread
(
)
;
void
ReadLock
(
)
;
void
ReadUnlock
(
)
;
void
WriteLock
(
)
;
void
WriteUnlock
(
)
;
#
else
void
ReadLock
(
)
{
ReadLockInternal
(
)
;
}
void
ReadUnlock
(
)
{
ReadUnlockInternal
(
)
;
}
void
WriteLock
(
)
{
WriteLockInternal
(
)
;
}
void
WriteUnlock
(
)
{
WriteUnlockInternal
(
)
;
}
#
endif
private
:
void
ReadLockInternal
(
)
;
void
ReadUnlockInternal
(
)
;
void
WriteLockInternal
(
)
;
void
WriteUnlockInternal
(
)
;
RWLock
(
)
=
delete
;
RWLock
(
const
RWLock
&
)
=
delete
;
RWLock
&
operator
=
(
const
RWLock
&
)
=
delete
;
#
ifndef
XP_WIN
pthread_rwlock_t
mRWLock
;
#
else
void
*
mRWLock
;
#
endif
#
ifdef
DEBUG
PRThread
*
mOwningThread
;
#
endif
}
;
class
MOZ_RAII
AutoReadLock
final
{
public
:
explicit
AutoReadLock
(
RWLock
&
aLock
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mLock
(
&
aLock
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
MOZ_ASSERT
(
mLock
"
null
lock
"
)
;
mLock
-
>
ReadLock
(
)
;
}
~
AutoReadLock
(
)
{
mLock
-
>
ReadUnlock
(
)
;
}
private
:
AutoReadLock
(
)
=
delete
;
AutoReadLock
(
const
AutoReadLock
&
)
=
delete
;
AutoReadLock
&
operator
=
(
const
AutoReadLock
&
)
=
delete
;
RWLock
*
mLock
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoWriteLock
final
{
public
:
explicit
AutoWriteLock
(
RWLock
&
aLock
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mLock
(
&
aLock
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
MOZ_ASSERT
(
mLock
"
null
lock
"
)
;
mLock
-
>
WriteLock
(
)
;
}
~
AutoWriteLock
(
)
{
mLock
-
>
WriteUnlock
(
)
;
}
private
:
AutoWriteLock
(
)
=
delete
;
AutoWriteLock
(
const
AutoWriteLock
&
)
=
delete
;
AutoWriteLock
&
operator
=
(
const
AutoWriteLock
&
)
=
delete
;
RWLock
*
mLock
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
}
#
endif
