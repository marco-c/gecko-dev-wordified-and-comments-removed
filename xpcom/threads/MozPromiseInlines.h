#
if
!
defined
(
MozPromiseInlines_h_
)
#
define
MozPromiseInlines_h_
#
include
<
type_traits
>
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
dom
/
PrimitiveConversions
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
namespace
mozilla
{
template
<
typename
ResolveValueT
typename
RejectValueT
bool
IsExclusive
>
RefPtr
<
MozPromise
<
ResolveValueT
RejectValueT
IsExclusive
>
>
MozPromise
<
ResolveValueT
RejectValueT
IsExclusive
>
:
:
FromDomPromise
(
dom
:
:
Promise
*
aDOMPromise
)
{
static_assert
(
std
:
:
is_same_v
<
RejectValueType
nsresult
>
"
Reject
type
must
be
nsresult
"
)
;
RefPtr
<
Private
>
p
=
new
Private
(
__func__
)
;
RefPtr
<
dom
:
:
DomPromiseListener
>
listener
=
new
dom
:
:
DomPromiseListener
(
aDOMPromise
[
p
]
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
{
ResolveValueT
value
;
bool
ok
=
dom
:
:
ValueToPrimitive
<
ResolveValueT
dom
:
:
ConversionBehavior
:
:
eDefault
>
(
aCx
aValue
"
Resolution
value
"
&
value
)
;
if
(
!
ok
)
{
p
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
return
;
}
p
-
>
Resolve
(
value
__func__
)
;
}
[
p
]
(
nsresult
aError
)
{
p
-
>
Reject
(
aError
__func__
)
;
}
)
;
return
p
;
}
}
#
endif
