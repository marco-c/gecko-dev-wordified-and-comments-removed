#
ifndef
DataMutex_h__
#
define
DataMutex_h__
#
include
<
utility
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
namespace
mozilla
{
template
<
typename
T
typename
MutexType
>
class
DataMutexBase
{
public
:
template
<
typename
V
>
class
MOZ_STACK_CLASS
AutoLockBase
{
public
:
V
*
operator
-
>
(
)
const
&
{
return
&
ref
(
)
;
}
V
*
operator
-
>
(
)
const
&
&
=
delete
;
V
&
operator
*
(
)
const
&
{
return
ref
(
)
;
}
V
&
operator
*
(
)
const
&
&
=
delete
;
operator
V
*
(
)
const
&
{
return
&
ref
(
)
;
}
operator
V
*
(
)
const
&
&
=
delete
;
V
&
ref
(
)
const
&
{
MOZ_ASSERT
(
mOwner
)
;
return
mOwner
-
>
mValue
;
}
V
&
ref
(
)
const
&
&
=
delete
;
AutoLockBase
(
AutoLockBase
&
&
aOther
)
:
mOwner
(
aOther
.
mOwner
)
{
aOther
.
mOwner
=
nullptr
;
}
~
AutoLockBase
(
)
{
if
(
mOwner
)
{
mOwner
-
>
mMutex
.
Unlock
(
)
;
mOwner
=
nullptr
;
}
}
private
:
friend
class
DataMutexBase
;
AutoLockBase
(
const
AutoLockBase
&
aOther
)
=
delete
;
explicit
AutoLockBase
(
DataMutexBase
<
T
MutexType
>
*
aDataMutex
)
:
mOwner
(
aDataMutex
)
{
MOZ_ASSERT
(
!
!
mOwner
)
;
mOwner
-
>
mMutex
.
Lock
(
)
;
}
DataMutexBase
<
T
MutexType
>
*
mOwner
;
}
;
using
AutoLock
=
AutoLockBase
<
T
>
;
using
ConstAutoLock
=
AutoLockBase
<
const
T
>
;
explicit
DataMutexBase
(
const
char
*
aName
)
:
mMutex
(
aName
)
{
}
DataMutexBase
(
T
&
&
aValue
const
char
*
aName
)
:
mMutex
(
aName
)
mValue
(
std
:
:
move
(
aValue
)
)
{
}
AutoLock
Lock
(
)
{
return
AutoLock
(
this
)
;
}
ConstAutoLock
ConstLock
(
)
{
return
ConstAutoLock
(
this
)
;
}
const
MutexType
&
Mutex
(
)
const
{
return
mMutex
;
}
private
:
MutexType
mMutex
;
T
mValue
;
}
;
class
StaticMutexNameless
:
public
StaticMutex
{
public
:
explicit
StaticMutexNameless
(
const
char
*
aName
)
:
StaticMutex
(
)
{
}
private
:
#
ifdef
DEBUG
StaticMutexNameless
(
StaticMutexNameless
&
aOther
)
;
#
endif
StaticMutexNameless
&
operator
=
(
StaticMutexNameless
*
aRhs
)
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
static
void
operator
delete
(
void
*
)
;
}
;
template
<
typename
T
>
using
DataMutex
=
DataMutexBase
<
T
Mutex
>
;
template
<
typename
T
>
using
StaticDataMutex
=
DataMutexBase
<
T
StaticMutexNameless
>
;
}
#
endif
