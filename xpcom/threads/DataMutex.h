#
ifndef
DataMutex_h__
#
define
DataMutex_h__
#
include
<
utility
>
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
template
<
typename
T
>
class
DataMutex
{
private
:
class
MOZ_STACK_CLASS
AutoLock
{
public
:
T
*
operator
-
>
(
)
const
{
return
&
ref
(
)
;
}
T
&
operator
*
(
)
const
{
return
ref
(
)
;
}
operator
T
*
(
)
const
&
{
return
&
ref
(
)
;
}
operator
T
*
(
)
const
&
&
=
delete
;
T
&
ref
(
)
const
{
MOZ_ASSERT
(
mOwner
)
;
return
mOwner
-
>
mValue
;
}
AutoLock
(
AutoLock
&
&
aOther
)
:
mOwner
(
aOther
.
mOwner
)
{
aOther
.
mOwner
=
nullptr
;
}
~
AutoLock
(
)
{
if
(
mOwner
)
{
mOwner
-
>
mMutex
.
Unlock
(
)
;
mOwner
=
nullptr
;
}
}
private
:
friend
class
DataMutex
;
AutoLock
(
const
AutoLock
&
aOther
)
=
delete
;
explicit
AutoLock
(
DataMutex
<
T
>
*
aDataMutex
)
:
mOwner
(
aDataMutex
)
{
MOZ_ASSERT
(
!
!
mOwner
)
;
mOwner
-
>
mMutex
.
Lock
(
)
;
}
DataMutex
<
T
>
*
mOwner
;
}
;
public
:
explicit
DataMutex
(
const
char
*
aName
)
:
mMutex
(
aName
)
{
}
DataMutex
(
T
&
&
aValue
const
char
*
aName
)
:
mMutex
(
aName
)
mValue
(
std
:
:
move
(
aValue
)
)
{
}
AutoLock
Lock
(
)
{
return
AutoLock
(
this
)
;
}
private
:
Mutex
mMutex
;
T
mValue
;
}
;
}
#
endif
