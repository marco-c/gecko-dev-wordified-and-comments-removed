#
ifndef
mozilla_CPUUsageWatcher_h
#
define
mozilla_CPUUsageWatcher_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
HangAnnotations
.
h
"
#
if
defined
(
NIGHTLY_BUILD
)
&
&
(
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
)
#
define
CPU_USAGE_WATCHER_ACTIVE
#
endif
namespace
mozilla
{
enum
CPUUsageWatcherError
:
uint8_t
{
ClockGetTimeError
GetNumberOfProcessorsError
GetProcessTimesError
GetSystemTimesError
HostStatisticsError
ProcStatError
}
;
class
CPUUsageHangAnnotator
:
public
HangMonitor
:
:
Annotator
{
public
:
}
;
class
CPUUsageWatcher
:
public
HangMonitor
:
:
Annotator
{
public
:
#
ifdef
CPU_USAGE_WATCHER_ACTIVE
CPUUsageWatcher
(
)
:
mInitialized
(
false
)
mExternalUsageThreshold
(
0
)
mExternalUsageRatio
(
0
)
mProcessUsageTime
(
0
)
mProcessUpdateTime
(
0
)
mGlobalUsageTime
(
0
)
mGlobalUpdateTime
(
0
)
mNumCPUs
(
0
)
{
}
#
endif
Result
<
Ok
CPUUsageWatcherError
>
Init
(
)
;
void
Uninit
(
)
;
Result
<
Ok
CPUUsageWatcherError
>
CollectCPUUsage
(
)
;
void
AnnotateHang
(
HangMonitor
:
:
HangAnnotations
&
aAnnotations
)
final
;
private
:
#
ifdef
CPU_USAGE_WATCHER_ACTIVE
bool
mInitialized
;
float
mExternalUsageThreshold
;
float
mExternalUsageRatio
;
uint64_t
mProcessUsageTime
;
uint64_t
mProcessUpdateTime
;
uint64_t
mGlobalUsageTime
;
uint64_t
mGlobalUpdateTime
;
uint64_t
mNumCPUs
;
#
endif
}
;
}
#
endif
