#
ifndef
_nsXULAppAPI_h__
#
define
_nsXULAppAPI_h__
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ProcessType
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nscore
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
<
jni
.
h
>
#
endif
class
JSString
;
class
MessageLoop
;
class
nsIDirectoryServiceProvider
;
class
nsIFile
;
class
nsISupports
;
struct
JSContext
;
struct
XREChildData
;
struct
XREShellData
;
namespace
mozilla
{
class
XREAppData
;
struct
BootstrapConfig
;
}
#
define
XRE_USER_APP_DATA_DIR
"
UAppData
"
#
define
XRE_EXECUTABLE_FILE
"
XREExeF
"
#
define
NS_APP_PROFILE_DIR_STARTUP
"
ProfDS
"
#
define
NS_APP_PROFILE_LOCAL_DIR_STARTUP
"
ProfLDS
"
#
define
XRE_SYS_LOCAL_EXTENSION_PARENT_DIR
"
XRESysLExtPD
"
#
define
XRE_SYS_SHARE_EXTENSION_PARENT_DIR
"
XRESysSExtPD
"
#
if
defined
(
XP_UNIX
)
|
|
defined
(
XP_MACOSX
)
#
define
XRE_SYS_NATIVE_MANIFESTS
"
XRESysNativeManifests
"
#
define
XRE_USER_NATIVE_MANIFESTS
"
XREUserNativeManifests
"
#
endif
#
define
XRE_USER_SYS_EXTENSION_DIR
"
XREUSysExt
"
#
define
XRE_APP_DISTRIBUTION_DIR
"
XREAppDist
"
#
define
XRE_APP_FEATURES_DIR
"
XREAppFeat
"
#
define
XRE_ADDON_APP_DIR
"
XREAddonAppDir
"
#
define
XRE_USER_RUNTIME_DIR
"
XREUserRunTimeDir
"
#
define
XRE_UPDATE_ROOT_DIR
"
UpdRootD
"
#
define
XRE_OLD_UPDATE_ROOT_DIR
"
OldUpdRootD
"
int
XRE_main
(
int
argc
char
*
argv
[
]
const
mozilla
:
:
BootstrapConfig
&
aConfig
)
;
nsresult
XRE_GetFileFromPath
(
const
char
*
aPath
nsIFile
*
*
aResult
)
;
nsresult
XRE_GetBinaryPath
(
nsIFile
*
*
aResult
)
;
nsresult
XRE_InitEmbedding2
(
nsIFile
*
aLibXULDirectory
nsIFile
*
aAppDirectory
nsIDirectoryServiceProvider
*
aAppDirProvider
)
;
enum
NSLocationType
{
NS_APP_LOCATION
NS_EXTENSION_LOCATION
NS_SKIN_LOCATION
NS_BOOTSTRAPPED_LOCATION
}
;
nsresult
XRE_AddManifestLocation
(
NSLocationType
aType
nsIFile
*
aLocation
)
;
nsresult
XRE_AddJarManifestLocation
(
NSLocationType
aType
nsIFile
*
aLocation
)
;
void
XRE_TermEmbedding
(
)
;
nsresult
XRE_ParseAppData
(
nsIFile
*
aINIFile
mozilla
:
:
XREAppData
&
aAppData
)
;
const
char
*
XRE_GeckoProcessTypeToString
(
GeckoProcessType
aProcessType
)
;
const
char
*
XRE_ChildProcessTypeToAnnotation
(
GeckoProcessType
aProcessType
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
struct
XRE_AndroidChildFds
{
int
mPrefsFd
;
int
mPrefMapFd
;
int
mIpcFd
;
int
mCrashFd
;
int
mCrashAnnotationFd
;
}
;
void
XRE_SetAndroidChildFds
(
JNIEnv
*
env
const
XRE_AndroidChildFds
&
fds
)
;
#
endif
void
XRE_SetProcessType
(
const
char
*
aProcessTypeString
)
;
nsresult
XRE_InitChildProcess
(
int
aArgc
char
*
aArgv
[
]
const
XREChildData
*
aChildData
)
;
GeckoProcessType
XRE_GetProcessType
(
)
;
const
char
*
XRE_GetProcessTypeString
(
)
;
bool
XRE_IsE10sParentProcess
(
)
;
#
define
GECKO_PROCESS_TYPE
(
enum_value
enum_name
string_name
proc_typename
\
process_bin_type
procinfo_typename
\
webidl_typename
allcaps_name
)
\
bool
XRE_Is
#
#
proc_typename
#
#
Process
(
)
;
#
include
"
mozilla
/
GeckoProcessTypes
.
h
"
#
undef
GECKO_PROCESS_TYPE
bool
XRE_IsSocketProcess
(
)
;
bool
XRE_UseNativeEventProcessing
(
)
;
typedef
void
(
*
MainFunction
)
(
void
*
aData
)
;
int
XRE_RunIPDLTest
(
int
aArgc
char
*
aArgv
[
]
)
;
nsresult
XRE_RunAppShell
(
)
;
nsresult
XRE_InitCommandLine
(
int
aArgc
char
*
aArgv
[
]
)
;
nsresult
XRE_DeinitCommandLine
(
)
;
void
XRE_ShutdownChildProcess
(
)
;
MessageLoop
*
XRE_GetIOMessageLoop
(
)
;
bool
XRE_SendTestShellCommand
(
JSContext
*
aCx
JSString
*
aCommand
JS
:
:
Value
*
aCallback
)
;
bool
XRE_ShutdownTestShell
(
)
;
void
XRE_InstallX11ErrorHandler
(
)
;
void
XRE_CleanupX11ErrorHandler
(
)
;
void
XRE_TelemetryAccumulate
(
int
aID
uint32_t
aSample
)
;
void
XRE_StartupTimelineRecord
(
int
aEvent
mozilla
:
:
TimeStamp
aWhen
)
;
void
XRE_InitOmnijar
(
nsIFile
*
aGreOmni
nsIFile
*
aAppOmni
)
;
void
XRE_StopLateWriteChecks
(
void
)
;
void
XRE_EnableSameExecutableForContentProc
(
)
;
namespace
mozilla
{
enum
class
BinPathType
{
Self
PluginContainer
}
;
}
mozilla
:
:
BinPathType
XRE_GetChildProcBinPathType
(
GeckoProcessType
aProcessType
)
;
int
XRE_XPCShellMain
(
int
argc
char
*
*
argv
char
*
*
envp
const
XREShellData
*
aShellData
)
;
#
ifdef
LIBFUZZER
#
include
"
FuzzerRegistry
.
h
"
void
XRE_LibFuzzerSetDriver
(
LibFuzzerDriver
)
;
#
endif
#
ifdef
MOZ_ENABLE_FORKSERVER
int
XRE_ForkServer
(
int
*
aArgc
char
*
*
*
aArgv
)
;
#
endif
#
endif
