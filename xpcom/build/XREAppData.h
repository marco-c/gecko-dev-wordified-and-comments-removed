#
ifndef
nsXREAppData_h
#
define
nsXREAppData_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
nsIFile
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
namespace
sandbox
{
class
BrokerServices
;
}
namespace
mozilla
{
namespace
sandboxing
{
class
PermissionsService
;
}
}
#
endif
namespace
mozilla
{
struct
StaticXREAppData
;
class
XREAppData
{
public
:
XREAppData
(
)
{
}
~
XREAppData
(
)
{
}
XREAppData
(
const
XREAppData
&
aOther
)
{
*
this
=
aOther
;
}
explicit
XREAppData
(
const
StaticXREAppData
&
aOther
)
{
*
this
=
aOther
;
}
XREAppData
&
operator
=
(
const
StaticXREAppData
&
aOther
)
;
XREAppData
&
operator
=
(
const
XREAppData
&
aOther
)
;
XREAppData
&
operator
=
(
XREAppData
&
&
aOther
)
=
default
;
struct
NSFreePolicy
{
void
operator
(
)
(
const
void
*
ptr
)
{
NS_Free
(
const_cast
<
void
*
>
(
ptr
)
)
;
}
}
;
class
CharPtr
{
public
:
explicit
CharPtr
(
)
=
default
;
explicit
CharPtr
(
const
char
*
v
)
{
*
this
=
v
;
}
CharPtr
(
CharPtr
&
&
)
=
default
;
~
CharPtr
(
)
=
default
;
CharPtr
&
operator
=
(
const
char
*
v
)
{
if
(
v
)
{
mValue
.
reset
(
NS_strdup
(
v
)
)
;
}
else
{
mValue
=
nullptr
;
}
return
*
this
;
}
CharPtr
&
operator
=
(
const
CharPtr
&
v
)
{
*
this
=
(
const
char
*
)
v
;
return
*
this
;
}
operator
const
char
*
(
)
const
{
return
mValue
.
get
(
)
;
}
private
:
UniquePtr
<
const
char
NSFreePolicy
>
mValue
;
}
;
nsCOMPtr
<
nsIFile
>
directory
;
CharPtr
vendor
;
CharPtr
name
;
CharPtr
remotingName
;
CharPtr
version
;
CharPtr
buildID
;
CharPtr
ID
;
CharPtr
copyright
;
uint32_t
flags
=
0
;
nsCOMPtr
<
nsIFile
>
xreDirectory
;
CharPtr
minVersion
;
CharPtr
maxVersion
;
CharPtr
crashReporterURL
;
CharPtr
profile
;
CharPtr
UAName
;
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
sandbox
:
:
BrokerServices
*
sandboxBrokerServices
=
nullptr
;
mozilla
:
:
sandboxing
:
:
PermissionsService
*
sandboxPermissionsService
;
#
endif
}
;
#
define
NS_XRE_ENABLE_PROFILE_MIGRATOR
(
1
<
<
1
)
#
define
NS_XRE_ENABLE_CRASH_REPORTER
(
1
<
<
3
)
struct
StaticXREAppData
{
const
char
*
vendor
;
const
char
*
name
;
const
char
*
remotingName
;
const
char
*
version
;
const
char
*
buildID
;
const
char
*
ID
;
const
char
*
copyright
;
uint32_t
flags
;
const
char
*
minVersion
;
const
char
*
maxVersion
;
const
char
*
crashReporterURL
;
const
char
*
profile
;
const
char
*
UAName
;
}
;
}
#
endif
