#
ifndef
xpcom_build_IOInterposerPrivate_h
#
define
xpcom_build_IOInterposerPrivate_h
#
include
<
prcvar
.
h
>
#
include
<
prlock
.
h
>
#
include
"
mozilla
/
ThreadSafety
.
h
"
namespace
mozilla
{
namespace
IOInterposer
{
class
CAPABILITY
Monitor
{
public
:
Monitor
(
)
:
mLock
(
PR_NewLock
(
)
)
mCondVar
(
PR_NewCondVar
(
mLock
)
)
{
}
~
Monitor
(
)
{
PR_DestroyCondVar
(
mCondVar
)
;
mCondVar
=
nullptr
;
PR_DestroyLock
(
mLock
)
;
mLock
=
nullptr
;
}
void
Lock
(
)
CAPABILITY_ACQUIRE
(
)
{
PR_Lock
(
mLock
)
;
}
void
Unlock
(
)
CAPABILITY_RELEASE
(
)
{
PR_Unlock
(
mLock
)
;
}
bool
Wait
(
PRIntervalTime
aTimeout
=
PR_INTERVAL_NO_TIMEOUT
)
REQUIRES
(
this
)
{
return
PR_WaitCondVar
(
mCondVar
aTimeout
)
=
=
PR_SUCCESS
;
}
bool
Notify
(
)
{
return
PR_NotifyCondVar
(
mCondVar
)
=
=
PR_SUCCESS
;
}
private
:
PRLock
*
mLock
;
PRCondVar
*
mCondVar
;
}
;
class
SCOPED_CAPABILITY
MonitorAutoLock
{
public
:
explicit
MonitorAutoLock
(
Monitor
&
aMonitor
)
CAPABILITY_ACQUIRE
(
aMonitor
)
:
mMonitor
(
aMonitor
)
{
mMonitor
.
Lock
(
)
;
}
~
MonitorAutoLock
(
)
CAPABILITY_RELEASE
(
)
{
mMonitor
.
Unlock
(
)
;
}
private
:
Monitor
&
mMonitor
;
}
;
class
SCOPED_CAPABILITY
MonitorAutoUnlock
{
public
:
explicit
MonitorAutoUnlock
(
Monitor
&
aMonitor
)
SCOPED_UNLOCK_RELEASE
(
aMonitor
)
:
mMonitor
(
aMonitor
)
{
mMonitor
.
Unlock
(
)
;
}
~
MonitorAutoUnlock
(
)
SCOPED_UNLOCK_REACQUIRE
(
)
{
mMonitor
.
Lock
(
)
;
}
private
:
Monitor
&
mMonitor
;
}
;
class
CAPABILITY
Mutex
{
public
:
Mutex
(
)
:
mPRLock
(
PR_NewLock
(
)
)
{
}
~
Mutex
(
)
{
PR_DestroyLock
(
mPRLock
)
;
mPRLock
=
nullptr
;
}
void
Lock
(
)
CAPABILITY_ACQUIRE
(
)
{
PR_Lock
(
mPRLock
)
;
}
void
Unlock
(
)
CAPABILITY_RELEASE
(
)
{
PR_Unlock
(
mPRLock
)
;
}
private
:
PRLock
*
mPRLock
;
}
;
class
SCOPED_CAPABILITY
AutoLock
{
public
:
explicit
AutoLock
(
Mutex
&
aLock
)
CAPABILITY_ACQUIRE
(
aLock
)
:
mLock
(
aLock
)
{
mLock
.
Lock
(
)
;
}
~
AutoLock
(
)
CAPABILITY_RELEASE
(
)
{
mLock
.
Unlock
(
)
;
}
private
:
Mutex
&
mLock
;
}
;
}
}
#
endif
