#
include
"
PoisonIOInterposer
.
h
"
#
include
<
algorithm
>
#
include
<
stdio
.
h
>
#
include
<
vector
>
#
include
<
io
.
h
>
#
include
<
windows
.
h
>
#
include
<
winternl
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FileUtilsWin
.
h
"
#
include
"
mozilla
/
IOInterposer
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
plstr
.
h
"
#
ifdef
MOZ_REPLACE_MALLOC
#
include
"
replace_malloc_bridge
.
h
"
#
endif
using
namespace
mozilla
;
namespace
{
static
bool
sIOPoisoned
=
false
;
typedef
NTSTATUS
(
NTAPI
*
NtCreateFileFn
)
(
PHANDLE
aFileHandle
ACCESS_MASK
aDesiredAccess
POBJECT_ATTRIBUTES
aObjectAttributes
PIO_STATUS_BLOCK
aIoStatusBlock
PLARGE_INTEGER
aAllocationSize
ULONG
aFileAttributes
ULONG
aShareAccess
ULONG
aCreateDisposition
ULONG
aCreateOptions
PVOID
aEaBuffer
ULONG
aEaLength
)
;
typedef
NTSTATUS
(
NTAPI
*
NtReadFileFn
)
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
PVOID
aBuffer
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
;
typedef
NTSTATUS
(
NTAPI
*
NtReadFileScatterFn
)
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
FILE_SEGMENT_ELEMENT
*
aSegments
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
;
typedef
NTSTATUS
(
NTAPI
*
NtWriteFileFn
)
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
PVOID
aBuffer
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
;
typedef
NTSTATUS
(
NTAPI
*
NtWriteFileGatherFn
)
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
FILE_SEGMENT_ELEMENT
*
aSegments
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
;
typedef
NTSTATUS
(
NTAPI
*
NtFlushBuffersFileFn
)
(
HANDLE
aFileHandle
PIO_STATUS_BLOCK
aIoStatusBlock
)
;
typedef
struct
_FILE_NETWORK_OPEN_INFORMATION
*
PFILE_NETWORK_OPEN_INFORMATION
;
typedef
NTSTATUS
(
NTAPI
*
NtQueryFullAttributesFileFn
)
(
POBJECT_ATTRIBUTES
aObjectAttributes
PFILE_NETWORK_OPEN_INFORMATION
aFileInformation
)
;
class
WinIOAutoObservation
:
public
IOInterposeObserver
:
:
Observation
{
public
:
WinIOAutoObservation
(
IOInterposeObserver
:
:
Operation
aOp
HANDLE
aFileHandle
const
LARGE_INTEGER
*
aOffset
)
:
IOInterposeObserver
:
:
Observation
(
aOp
sReference
!
IsDebugFile
(
reinterpret_cast
<
intptr_t
>
(
aFileHandle
)
)
)
mFileHandle
(
aFileHandle
)
mHasQueriedFilename
(
false
)
{
if
(
mShouldReport
)
{
mOffset
.
QuadPart
=
aOffset
?
aOffset
-
>
QuadPart
:
0
;
}
}
WinIOAutoObservation
(
IOInterposeObserver
:
:
Operation
aOp
nsAString
&
aFilename
)
:
IOInterposeObserver
:
:
Observation
(
aOp
sReference
)
mFileHandle
(
nullptr
)
mHasQueriedFilename
(
false
)
{
if
(
mShouldReport
)
{
nsAutoString
dosPath
;
if
(
NtPathToDosPath
(
aFilename
dosPath
)
)
{
mFilename
=
dosPath
;
mHasQueriedFilename
=
true
;
}
mOffset
.
QuadPart
=
0
;
}
}
void
Filename
(
nsAString
&
aFilename
)
override
;
~
WinIOAutoObservation
(
)
{
Report
(
)
;
}
private
:
HANDLE
mFileHandle
;
LARGE_INTEGER
mOffset
;
bool
mHasQueriedFilename
;
nsString
mFilename
;
static
const
char
*
sReference
;
}
;
const
char
*
WinIOAutoObservation
:
:
sReference
=
"
PoisonIOInterposer
"
;
void
WinIOAutoObservation
:
:
Filename
(
nsAString
&
aFilename
)
{
if
(
mHasQueriedFilename
)
{
aFilename
=
mFilename
;
}
nsAutoString
filename
;
if
(
HandleToFilename
(
mFileHandle
mOffset
filename
)
)
{
mFilename
=
filename
;
}
mHasQueriedFilename
=
true
;
aFilename
=
mFilename
;
}
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtCreateFileFn
>
gOriginalNtCreateFile
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtReadFileFn
>
gOriginalNtReadFile
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtReadFileScatterFn
>
gOriginalNtReadFileScatter
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtWriteFileFn
>
gOriginalNtWriteFile
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtWriteFileGatherFn
>
gOriginalNtWriteFileGather
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtFlushBuffersFileFn
>
gOriginalNtFlushBuffersFile
;
static
WindowsDllInterceptor
:
:
FuncHookType
<
NtQueryFullAttributesFileFn
>
gOriginalNtQueryFullAttributesFile
;
static
NTSTATUS
NTAPI
InterposedNtCreateFile
(
PHANDLE
aFileHandle
ACCESS_MASK
aDesiredAccess
POBJECT_ATTRIBUTES
aObjectAttributes
PIO_STATUS_BLOCK
aIoStatusBlock
PLARGE_INTEGER
aAllocationSize
ULONG
aFileAttributes
ULONG
aShareAccess
ULONG
aCreateDisposition
ULONG
aCreateOptions
PVOID
aEaBuffer
ULONG
aEaLength
)
{
const
wchar_t
*
buf
=
aObjectAttributes
?
aObjectAttributes
-
>
ObjectName
-
>
Buffer
:
L
"
"
;
uint32_t
len
=
aObjectAttributes
?
aObjectAttributes
-
>
ObjectName
-
>
Length
/
sizeof
(
WCHAR
)
:
0
;
nsDependentSubstring
filename
(
buf
len
)
;
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpCreateOrOpen
filename
)
;
MOZ_ASSERT
(
gOriginalNtCreateFile
)
;
return
gOriginalNtCreateFile
(
aFileHandle
aDesiredAccess
aObjectAttributes
aIoStatusBlock
aAllocationSize
aFileAttributes
aShareAccess
aCreateDisposition
aCreateOptions
aEaBuffer
aEaLength
)
;
}
static
NTSTATUS
NTAPI
InterposedNtReadFile
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
PVOID
aBuffer
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
{
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpRead
aFileHandle
aOffset
)
;
MOZ_ASSERT
(
gOriginalNtReadFile
)
;
return
gOriginalNtReadFile
(
aFileHandle
aEvent
aApc
aApcCtx
aIoStatus
aBuffer
aLength
aOffset
aKey
)
;
}
static
NTSTATUS
NTAPI
InterposedNtReadFileScatter
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
FILE_SEGMENT_ELEMENT
*
aSegments
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
{
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpRead
aFileHandle
aOffset
)
;
MOZ_ASSERT
(
gOriginalNtReadFileScatter
)
;
return
gOriginalNtReadFileScatter
(
aFileHandle
aEvent
aApc
aApcCtx
aIoStatus
aSegments
aLength
aOffset
aKey
)
;
}
static
NTSTATUS
NTAPI
InterposedNtWriteFile
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
PVOID
aBuffer
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
{
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpWrite
aFileHandle
aOffset
)
;
MOZ_ASSERT
(
gOriginalNtWriteFile
)
;
return
gOriginalNtWriteFile
(
aFileHandle
aEvent
aApc
aApcCtx
aIoStatus
aBuffer
aLength
aOffset
aKey
)
;
}
static
NTSTATUS
NTAPI
InterposedNtWriteFileGather
(
HANDLE
aFileHandle
HANDLE
aEvent
PIO_APC_ROUTINE
aApc
PVOID
aApcCtx
PIO_STATUS_BLOCK
aIoStatus
FILE_SEGMENT_ELEMENT
*
aSegments
ULONG
aLength
PLARGE_INTEGER
aOffset
PULONG
aKey
)
{
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpWrite
aFileHandle
aOffset
)
;
MOZ_ASSERT
(
gOriginalNtWriteFileGather
)
;
return
gOriginalNtWriteFileGather
(
aFileHandle
aEvent
aApc
aApcCtx
aIoStatus
aSegments
aLength
aOffset
aKey
)
;
}
static
NTSTATUS
NTAPI
InterposedNtFlushBuffersFile
(
HANDLE
aFileHandle
PIO_STATUS_BLOCK
aIoStatusBlock
)
{
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpFSync
aFileHandle
nullptr
)
;
MOZ_ASSERT
(
gOriginalNtFlushBuffersFile
)
;
return
gOriginalNtFlushBuffersFile
(
aFileHandle
aIoStatusBlock
)
;
}
static
NTSTATUS
NTAPI
InterposedNtQueryFullAttributesFile
(
POBJECT_ATTRIBUTES
aObjectAttributes
PFILE_NETWORK_OPEN_INFORMATION
aFileInformation
)
{
const
wchar_t
*
buf
=
aObjectAttributes
?
aObjectAttributes
-
>
ObjectName
-
>
Buffer
:
L
"
"
;
uint32_t
len
=
aObjectAttributes
?
aObjectAttributes
-
>
ObjectName
-
>
Length
/
sizeof
(
WCHAR
)
:
0
;
nsDependentSubstring
filename
(
buf
len
)
;
WinIOAutoObservation
timer
(
IOInterposeObserver
:
:
OpStat
filename
)
;
MOZ_ASSERT
(
gOriginalNtQueryFullAttributesFile
)
;
return
gOriginalNtQueryFullAttributesFile
(
aObjectAttributes
aFileInformation
)
;
}
}
static
WindowsDllInterceptor
sNtDllInterceptor
;
namespace
mozilla
{
void
InitPoisonIOInterposer
(
)
{
if
(
sIOPoisoned
)
{
return
;
}
sIOPoisoned
=
true
;
MozillaRegisterDebugFD
(
1
)
;
MozillaRegisterDebugFD
(
2
)
;
#
ifdef
MOZ_REPLACE_MALLOC
static
DebugFdRegistry
registry
;
ReplaceMalloc
:
:
InitDebugFd
(
registry
)
;
#
endif
sNtDllInterceptor
.
Init
(
"
ntdll
.
dll
"
)
;
gOriginalNtCreateFile
.
Set
(
sNtDllInterceptor
"
NtCreateFile
"
&
InterposedNtCreateFile
)
;
gOriginalNtReadFile
.
Set
(
sNtDllInterceptor
"
NtReadFile
"
&
InterposedNtReadFile
)
;
gOriginalNtReadFileScatter
.
Set
(
sNtDllInterceptor
"
NtReadFileScatter
"
&
InterposedNtReadFileScatter
)
;
gOriginalNtWriteFile
.
Set
(
sNtDllInterceptor
"
NtWriteFile
"
&
InterposedNtWriteFile
)
;
gOriginalNtWriteFileGather
.
Set
(
sNtDllInterceptor
"
NtWriteFileGather
"
&
InterposedNtWriteFileGather
)
;
gOriginalNtFlushBuffersFile
.
Set
(
sNtDllInterceptor
"
NtFlushBuffersFile
"
&
InterposedNtFlushBuffersFile
)
;
gOriginalNtQueryFullAttributesFile
.
Set
(
sNtDllInterceptor
"
NtQueryFullAttributesFile
"
&
InterposedNtQueryFullAttributesFile
)
;
}
void
ClearPoisonIOInterposer
(
)
{
MOZ_ASSERT
(
false
)
;
if
(
sIOPoisoned
)
{
sIOPoisoned
=
false
;
sNtDllInterceptor
.
Clear
(
)
;
}
}
}
