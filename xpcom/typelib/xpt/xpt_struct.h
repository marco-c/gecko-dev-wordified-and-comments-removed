#
ifndef
xpt_struct_h
#
define
xpt_struct_h
#
include
"
nsID
.
h
"
#
include
<
stdint
.
h
>
struct
XPTHeader
;
struct
XPTInterfaceDirectoryEntry
;
struct
XPTInterfaceDescriptor
;
struct
XPTConstDescriptor
;
struct
XPTMethodDescriptor
;
struct
XPTParamDescriptor
;
struct
XPTTypeDescriptor
;
struct
XPTTypeDescriptorPrefix
;
struct
XPTHeader
{
uint8_t
mMajorVersion
;
uint16_t
mNumInterfaces
;
const
XPTInterfaceDirectoryEntry
*
mInterfaceDirectory
;
}
;
#
define
XPT_MAJOR_INCOMPATIBLE_VERSION
0x02
struct
XPTInterfaceDirectoryEntry
{
nsID
mIID
;
const
char
*
mName
;
const
XPTInterfaceDescriptor
*
mInterfaceDescriptor
;
}
;
struct
XPTInterfaceDescriptor
{
static
const
uint8_t
kScriptableMask
=
0x80
;
static
const
uint8_t
kFunctionMask
=
0x40
;
static
const
uint8_t
kBuiltinClassMask
=
0x20
;
static
const
uint8_t
kMainProcessScriptableOnlyMask
=
0x10
;
bool
IsScriptable
(
)
const
{
return
!
!
(
mFlags
&
kScriptableMask
)
;
}
bool
IsFunction
(
)
const
{
return
!
!
(
mFlags
&
kFunctionMask
)
;
}
bool
IsBuiltinClass
(
)
const
{
return
!
!
(
mFlags
&
kBuiltinClassMask
)
;
}
bool
IsMainProcessScriptableOnly
(
)
const
{
return
!
!
(
mFlags
&
kMainProcessScriptableOnlyMask
)
;
}
const
XPTMethodDescriptor
*
mMethodDescriptors
;
const
XPTConstDescriptor
*
mConstDescriptors
;
const
XPTTypeDescriptor
*
mAdditionalTypes
;
uint16_t
mParentInterface
;
uint16_t
mNumMethods
;
uint16_t
mNumConstants
;
uint8_t
mFlags
;
uint8_t
mNumAdditionalTypes
;
}
;
struct
XPTTypeDescriptorPrefix
{
uint8_t
TagPart
(
)
const
{
static
const
uint8_t
kFlagMask
=
0xe0
;
return
(
uint8_t
)
(
mFlags
&
~
kFlagMask
)
;
}
uint8_t
mFlags
;
}
;
enum
XPTTypeDescriptorTags
{
TD_INT8
=
0
TD_INT16
=
1
TD_INT32
=
2
TD_INT64
=
3
TD_UINT8
=
4
TD_UINT16
=
5
TD_UINT32
=
6
TD_UINT64
=
7
TD_FLOAT
=
8
TD_DOUBLE
=
9
TD_BOOL
=
10
TD_CHAR
=
11
TD_WCHAR
=
12
TD_VOID
=
13
TD_PNSIID
=
14
TD_DOMSTRING
=
15
TD_PSTRING
=
16
TD_PWSTRING
=
17
TD_INTERFACE_TYPE
=
18
TD_INTERFACE_IS_TYPE
=
19
TD_ARRAY
=
20
TD_PSTRING_SIZE_IS
=
21
TD_PWSTRING_SIZE_IS
=
22
TD_UTF8STRING
=
23
TD_CSTRING
=
24
TD_ASTRING
=
25
TD_JSVAL
=
26
}
;
struct
XPTTypeDescriptor
{
uint8_t
Tag
(
)
const
{
return
mPrefix
.
TagPart
(
)
;
}
XPTTypeDescriptorPrefix
mPrefix
;
union
{
struct
{
uint8_t
mArgNum
;
}
mInterfaceIs
;
struct
{
uint8_t
mArgNum
;
}
mPStringIs
;
struct
{
uint8_t
mArgNum
;
uint8_t
mAdditionalType
;
}
mArray
;
struct
{
uint8_t
mIfaceHi8
;
uint8_t
mIfaceLo8
;
}
mIface
;
}
u
;
}
;
union
XPTConstValue
{
int16_t
i16
;
uint16_t
ui16
;
int32_t
i32
;
uint32_t
ui32
;
}
;
struct
XPTConstDescriptor
{
const
char
*
mName
;
XPTTypeDescriptor
mType
;
union
XPTConstValue
mValue
;
}
;
struct
XPTParamDescriptor
{
uint8_t
mFlags
;
XPTTypeDescriptor
mType
;
}
;
struct
XPTMethodDescriptor
{
const
char
*
mName
;
const
XPTParamDescriptor
*
mParams
;
uint8_t
mFlags
;
uint8_t
mNumArgs
;
}
;
#
endif
