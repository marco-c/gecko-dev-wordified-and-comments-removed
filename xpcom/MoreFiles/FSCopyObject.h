#
ifndef
__FSCOPYOBJECT_H__
#
define
__FSCOPYOBJECT_H__
#
include
<
Files
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
DEBUG_COPY_OBJECT
0
/
/
set
to
zero
if
you
don
'
t
want
debug
spew
#
define
QuoteExceptionString
(
x
)
#
x
#
if
DEBUG_COPY_OBJECT
#
include
<
stdio
.
h
>
#
define
mycheck_noerr
(
error
)
\
do
{
\
OSStatus
localError
=
error
;
\
if
(
localError
=
=
noErr
)
;
\
else
{
\
printf
(
QuoteExceptionString
(
error
)
"
!
=
noErr
in
File
:
%
s
Function
:
%
s
Line
:
%
d
Error
:
%
d
\
n
"
\
__FILE__
__FUNCTION__
__LINE__
localError
)
;
\
}
\
}
while
(
false
)
#
define
mycheck
(
assertion
)
\
do
{
\
if
(
assertion
)
;
\
else
{
\
printf
(
QuoteExceptionString
(
assertion
)
"
failed
in
File
:
%
s
Function
:
%
s
Line
:
%
d
\
n
"
\
__FILE__
__FUNCTION__
__LINE__
)
;
\
}
\
}
while
(
false
)
#
define
myverify
(
assertion
)
mycheck
(
assertion
)
#
define
myverify_noerr
(
assertion
)
mycheck_noerr
(
(
assertion
)
)
#
else
#
define
mycheck
(
assertion
)
#
define
mycheck_noerr
(
err
)
#
define
myverify
(
assertion
)
do
{
(
void
)
(
assertion
)
;
}
while
(
0
)
#
define
myverify_noerr
(
assertion
)
myverify
(
assertion
)
#
endif
#
pragma
mark
CopyObjectFilterProcPtr
typedef
CALLBACK_API
(
Boolean
CopyObjectFilterProcPtr
)
(
Boolean
containerChanged
ItemCount
currentLevel
OSErr
currentOSErr
const
FSCatalogInfo
*
catalogInfo
const
FSRef
*
ref
const
FSSpec
*
spec
const
HFSUniStr255
*
name
void
*
yourDataPtr
)
;
#
pragma
mark
CallCopyObjectFilterProc
#
define
CallCopyObjectFilterProc
(
userRoutine
containerChanged
currentLevel
currentOSErr
catalogInfo
ref
spec
name
yourDataPtr
)
\
(
*
(
userRoutine
)
)
(
(
containerChanged
)
(
currentLevel
)
(
currentOSErr
)
(
catalogInfo
)
(
ref
)
(
spec
)
(
name
)
(
yourDataPtr
)
)
#
pragma
mark
FSCopyObject
OSErr
FSCopyObject
(
const
FSRef
*
source
const
FSRef
*
destDir
UniCharCount
nameLength
const
UniChar
*
copyName
ItemCount
maxLevels
FSCatalogInfoBitmap
whichInfo
Boolean
wantFSSpec
Boolean
wantName
CopyObjectFilterProcPtr
filterProcPtr
void
*
yourDataPtr
FSRef
*
newObject
)
;
#
pragma
mark
FSDeleteObjects
OSErr
FSDeleteObjects
(
const
FSRef
*
source
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
