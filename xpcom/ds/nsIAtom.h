#
ifndef
nsIAtom_h
#
define
nsIAtom_h
#
include
"
nsISupports
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
define
NS_IATOM_IID_STR
"
8b8c11d4
-
3ed5
-
4079
-
8974
-
73c7576cdb34
"
#
define
NS_IATOM_IID
\
{
0x8b8c11d4
0x3ed5
0x4079
\
{
0x89
0x74
0x73
0xc7
0x57
0x6c
0xdb
0x34
}
}
class
nsIAtom
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IATOM_IID
)
NS_IMETHOD_
(
void
)
ToUTF8String
(
nsACString
&
aString
)
=
0
;
NS_IMETHOD_
(
size_t
)
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
=
0
;
enum
class
AtomKind
:
uint8_t
{
DynamicAtom
=
0
StaticAtom
=
1
HTML5Atom
=
2
}
;
bool
Equals
(
char16ptr_t
aString
uint32_t
aLength
)
const
{
return
mLength
=
=
aLength
&
&
memcmp
(
mString
aString
mLength
*
sizeof
(
char16_t
)
)
=
=
0
;
}
bool
Equals
(
const
nsAString
&
aString
)
const
{
return
Equals
(
aString
.
BeginReading
(
)
aString
.
Length
(
)
)
;
}
void
SetKind
(
AtomKind
aKind
)
{
mKind
=
static_cast
<
uint32_t
>
(
aKind
)
;
MOZ_ASSERT
(
Kind
(
)
=
=
aKind
)
;
}
AtomKind
Kind
(
)
const
{
return
static_cast
<
AtomKind
>
(
mKind
)
;
}
bool
IsDynamicAtom
(
)
const
{
return
Kind
(
)
=
=
AtomKind
:
:
DynamicAtom
;
}
bool
IsHTML5Atom
(
)
const
{
return
Kind
(
)
=
=
AtomKind
:
:
HTML5Atom
;
}
bool
IsStaticAtom
(
)
const
{
return
Kind
(
)
=
=
AtomKind
:
:
StaticAtom
;
}
char16ptr_t
GetUTF16String
(
)
const
{
return
mString
;
}
uint32_t
GetLength
(
)
const
{
return
mLength
;
}
void
ToString
(
nsAString
&
aBuf
)
const
{
nsStringBuffer
:
:
FromData
(
mString
)
-
>
ToString
(
mLength
aBuf
)
;
}
nsStringBuffer
*
GetStringBuffer
(
)
const
{
return
nsStringBuffer
:
:
FromData
(
mString
)
;
}
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
final
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
final
;
uint32_t
hash
(
)
const
{
MOZ_ASSERT
(
!
IsHTML5Atom
(
)
)
;
return
mHash
;
}
protected
:
uint32_t
mLength
:
30
;
uint32_t
mKind
:
2
;
uint32_t
mHash
;
char16_t
*
mString
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIAtom
NS_IATOM_IID
)
#
define
NS_DECL_NSIATOM
\
NS_IMETHOD_
(
void
)
ToUTF8String
(
nsACString
&
_retval
)
override
;
\
NS_IMETHOD_
(
size_t
)
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
override
;
class
nsAtom
final
:
public
nsIAtom
{
public
:
NS_DECL_NSIATOM
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
final
;
typedef
mozilla
:
:
TrueType
HasThreadSafeRefCnt
;
private
:
friend
class
nsIAtom
;
friend
class
nsAtomFriend
;
friend
class
nsHtml5AtomEntry
;
nsAtom
(
AtomKind
aKind
const
nsAString
&
aString
uint32_t
aHash
)
;
nsAtom
(
nsStringBuffer
*
aStringBuffer
uint32_t
aLength
uint32_t
aHash
)
;
~
nsAtom
(
)
;
MozExternalRefCountType
DynamicAddRef
(
)
;
MozExternalRefCountType
DynamicRelease
(
)
;
mozilla
:
:
ThreadSafeAutoRefCnt
mRefCnt
;
NS_DECL_OWNINGTHREAD
}
;
already_AddRefed
<
nsIAtom
>
NS_Atomize
(
const
char
*
aUTF8String
)
;
already_AddRefed
<
nsIAtom
>
NS_Atomize
(
const
nsACString
&
aUTF8String
)
;
already_AddRefed
<
nsIAtom
>
NS_Atomize
(
const
char16_t
*
aUTF16String
)
;
already_AddRefed
<
nsIAtom
>
NS_Atomize
(
const
nsAString
&
aUTF16String
)
;
already_AddRefed
<
nsIAtom
>
NS_AtomizeMainThread
(
const
nsAString
&
aUTF16String
)
;
nsrefcnt
NS_GetNumberOfAtoms
(
)
;
nsIAtom
*
NS_GetStaticAtom
(
const
nsAString
&
aUTF16String
)
;
void
NS_SealStaticAtomTable
(
)
;
class
nsAtomString
:
public
nsString
{
public
:
explicit
nsAtomString
(
const
nsIAtom
*
aAtom
)
{
aAtom
-
>
ToString
(
*
this
)
;
}
}
;
class
nsAtomCString
:
public
nsCString
{
public
:
explicit
nsAtomCString
(
nsIAtom
*
aAtom
)
{
aAtom
-
>
ToUTF8String
(
*
this
)
;
}
}
;
class
nsDependentAtomString
:
public
nsDependentString
{
public
:
explicit
nsDependentAtomString
(
const
nsIAtom
*
aAtom
)
:
nsDependentString
(
aAtom
-
>
GetUTF16String
(
)
aAtom
-
>
GetLength
(
)
)
{
}
}
;
#
endif
