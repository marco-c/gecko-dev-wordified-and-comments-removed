#
ifndef
nsObserverList_h___
#
define
nsObserverList_h___
#
include
"
nsISupports
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsMaybeWeakPtr
.
h
"
#
include
"
nsSimpleEnumerator
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsObserverList
:
public
nsCharPtrHashKey
{
friend
class
nsObserverService
;
public
:
explicit
nsObserverList
(
const
char
*
aKey
)
:
nsCharPtrHashKey
(
aKey
)
{
MOZ_COUNT_CTOR
(
nsObserverList
)
;
}
nsObserverList
(
nsObserverList
&
&
aOther
)
:
nsCharPtrHashKey
(
std
:
:
move
(
aOther
)
)
mObservers
(
std
:
:
move
(
aOther
.
mObservers
)
)
{
MOZ_COUNT_CTOR
(
nsObserverList
)
;
}
MOZ_COUNTED_DTOR
(
nsObserverList
)
[
[
nodiscard
]
]
nsresult
AddObserver
(
nsIObserver
*
aObserver
bool
aOwnsWeak
)
;
[
[
nodiscard
]
]
nsresult
RemoveObserver
(
nsIObserver
*
aObserver
)
;
void
NotifyObservers
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aSomeData
)
;
void
GetObserverList
(
nsISimpleEnumerator
*
*
aEnumerator
)
;
nsCOMArray
<
nsIObserver
>
ReverseCloneObserverArray
(
)
;
void
AppendStrongObservers
(
nsCOMArray
<
nsIObserver
>
&
aArray
)
;
private
:
nsMaybeWeakPtrArray
<
nsIObserver
>
mObservers
;
}
;
class
nsObserverEnumerator
final
:
public
nsSimpleEnumerator
{
public
:
NS_DECL_NSISIMPLEENUMERATOR
explicit
nsObserverEnumerator
(
nsObserverList
*
aObserverList
)
;
const
nsID
&
DefaultInterface
(
)
override
{
return
NS_GET_IID
(
nsIObserver
)
;
}
private
:
~
nsObserverEnumerator
(
)
override
=
default
;
int32_t
mIndex
;
nsCOMArray
<
nsIObserver
>
mObservers
;
}
;
#
endif
