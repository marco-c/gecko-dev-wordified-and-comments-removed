#
ifndef
nsTArray_h__
#
define
nsTArray_h__
#
include
<
string
.
h
>
#
include
<
functional
>
#
include
<
initializer_list
>
#
include
<
new
>
#
include
<
ostream
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
mozilla
/
Alignment
.
h
"
#
include
"
mozilla
/
ArrayIterator
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
DbgMacro
.
h
"
#
include
"
mozilla
/
FunctionTypeTraits
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
ReverseIterator
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAlgorithm
.
h
"
#
include
"
nsCycleCollectionNoteChild
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsQuickSort
.
h
"
#
include
"
nsRegionFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nscore
.
h
"
namespace
JS
{
template
<
class
T
>
class
Heap
;
}
class
nsRegion
;
namespace
mozilla
:
:
a11y
{
class
BatchData
;
}
namespace
mozilla
{
namespace
layers
{
class
Animation
;
class
FrameStats
;
struct
PropertyAnimationGroup
;
struct
TileClient
;
struct
TransactionData
;
}
}
namespace
mozilla
{
struct
SerializedStructuredCloneBuffer
;
class
SourceBufferTask
;
}
namespace
mozilla
:
:
dom
:
:
binding_detail
{
template
<
typename
typename
>
class
RecordEntry
;
}
namespace
mozilla
:
:
dom
:
:
ipc
{
class
StructuredCloneData
;
}
namespace
mozilla
:
:
dom
{
class
ClonedMessageData
;
class
MessageData
;
class
MessagePortIdentifier
;
struct
MozPluginParameter
;
template
<
typename
T
>
struct
Nullable
;
class
OwningFileOrDirectory
;
class
OwningStringOrBooleanOrObject
;
class
OwningUTF8StringOrDouble
;
class
Pref
;
class
RefMessageData
;
class
ResponsiveImageCandidate
;
class
ServiceWorkerRegistrationData
;
namespace
indexedDB
{
class
SerializedStructuredCloneReadInfo
;
class
ObjectStoreCursorResponse
;
class
IndexCursorResponse
;
}
}
namespace
mozilla
:
:
ipc
{
class
AutoIPCStream
;
class
ContentSecurityPolicy
;
template
<
class
T
>
class
Endpoint
;
}
class
JSStructuredCloneData
;
struct
nsTArrayFallibleResult
{
MOZ_IMPLICIT
constexpr
nsTArrayFallibleResult
(
bool
aResult
)
:
mResult
(
aResult
)
{
}
MOZ_IMPLICIT
constexpr
operator
bool
(
)
{
return
mResult
;
}
private
:
bool
mResult
;
}
;
struct
nsTArrayInfallibleResult
{
}
;
struct
nsTArrayFallibleAllocatorBase
{
typedef
bool
ResultType
;
typedef
nsTArrayFallibleResult
ResultTypeProxy
;
static
constexpr
ResultType
Result
(
ResultTypeProxy
aResult
)
{
return
aResult
;
}
static
constexpr
bool
Successful
(
ResultTypeProxy
aResult
)
{
return
aResult
;
}
static
constexpr
ResultTypeProxy
SuccessResult
(
)
{
return
true
;
}
static
constexpr
ResultTypeProxy
FailureResult
(
)
{
return
false
;
}
static
constexpr
ResultType
ConvertBoolToResultType
(
bool
aValue
)
{
return
aValue
;
}
}
;
struct
nsTArrayInfallibleAllocatorBase
{
typedef
void
ResultType
;
typedef
nsTArrayInfallibleResult
ResultTypeProxy
;
static
constexpr
ResultType
Result
(
ResultTypeProxy
aResult
)
{
}
static
constexpr
bool
Successful
(
ResultTypeProxy
)
{
return
true
;
}
static
constexpr
ResultTypeProxy
SuccessResult
(
)
{
return
ResultTypeProxy
(
)
;
}
[
[
noreturn
]
]
static
ResultTypeProxy
FailureResult
(
)
{
MOZ_CRASH
(
"
Infallible
nsTArray
should
never
fail
"
)
;
}
template
<
typename
T
>
static
constexpr
ResultType
ConvertBoolToResultType
(
T
aValue
)
{
if
(
!
aValue
)
{
MOZ_CRASH
(
"
infallible
nsTArray
should
never
convert
false
to
ResultType
"
)
;
}
}
template
<
typename
T
>
static
constexpr
ResultType
ConvertBoolToResultType
(
const
mozilla
:
:
NotNull
<
T
>
&
aValue
)
{
}
}
;
struct
nsTArrayFallibleAllocator
:
nsTArrayFallibleAllocatorBase
{
static
void
*
Malloc
(
size_t
aSize
)
{
return
malloc
(
aSize
)
;
}
static
void
*
Realloc
(
void
*
aPtr
size_t
aSize
)
{
return
realloc
(
aPtr
aSize
)
;
}
static
void
Free
(
void
*
aPtr
)
{
free
(
aPtr
)
;
}
static
void
SizeTooBig
(
size_t
)
{
}
}
;
struct
nsTArrayInfallibleAllocator
:
nsTArrayInfallibleAllocatorBase
{
static
void
*
Malloc
(
size_t
aSize
)
MOZ_NONNULL_RETURN
{
return
moz_xmalloc
(
aSize
)
;
}
static
void
*
Realloc
(
void
*
aPtr
size_t
aSize
)
MOZ_NONNULL_RETURN
{
return
moz_xrealloc
(
aPtr
aSize
)
;
}
static
void
Free
(
void
*
aPtr
)
{
free
(
aPtr
)
;
}
static
void
SizeTooBig
(
size_t
aSize
)
{
NS_ABORT_OOM
(
aSize
)
;
}
}
;
struct
nsTArrayHeader
{
uint32_t
mLength
;
uint32_t
mCapacity
:
31
;
uint32_t
mIsAutoArray
:
1
;
}
;
extern
"
C
"
{
extern
nsTArrayHeader
sEmptyTArrayHeader
;
}
namespace
detail
{
class
nsTArray_CopyDisabler
{
public
:
nsTArray_CopyDisabler
(
)
=
default
;
nsTArray_CopyDisabler
(
const
nsTArray_CopyDisabler
&
)
=
delete
;
nsTArray_CopyDisabler
&
operator
=
(
const
nsTArray_CopyDisabler
&
)
=
delete
;
}
;
}
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtHelper
:
public
:
:
detail
:
:
nsTArray_CopyDisabler
{
typedef
E
*
elem_type
;
typedef
size_t
index_type
;
elem_type
&
SafeElementAt
(
index_type
aIndex
)
;
const
elem_type
&
SafeElementAt
(
index_type
aIndex
)
const
;
}
;
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtHelper
<
E
*
Derived
>
:
public
:
:
detail
:
:
nsTArray_CopyDisabler
{
typedef
E
*
elem_type
;
typedef
size_t
index_type
;
elem_type
SafeElementAt
(
index_type
aIndex
)
{
return
static_cast
<
Derived
*
>
(
this
)
-
>
SafeElementAt
(
aIndex
nullptr
)
;
}
elem_type
SafeElementAt
(
index_type
aIndex
)
const
{
return
static_cast
<
const
Derived
*
>
(
this
)
-
>
SafeElementAt
(
aIndex
nullptr
)
;
}
}
;
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtSmartPtrHelper
:
public
:
:
detail
:
:
nsTArray_CopyDisabler
{
typedef
typename
E
:
:
element_type
*
elem_type
;
typedef
const
typename
E
:
:
element_type
*
const_elem_type
;
typedef
size_t
index_type
;
elem_type
SafeElementAt
(
index_type
aIndex
)
{
auto
*
derived
=
static_cast
<
Derived
*
>
(
this
)
;
if
(
aIndex
<
derived
-
>
Length
(
)
)
{
return
derived
-
>
Elements
(
)
[
aIndex
]
;
}
return
nullptr
;
}
elem_type
SafeElementAt
(
index_type
aIndex
)
const
{
auto
*
derived
=
static_cast
<
const
Derived
*
>
(
this
)
;
if
(
aIndex
<
derived
-
>
Length
(
)
)
{
return
derived
-
>
Elements
(
)
[
aIndex
]
;
}
return
nullptr
;
}
}
;
template
<
class
T
>
class
nsCOMPtr
;
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtHelper
<
nsCOMPtr
<
E
>
Derived
>
:
public
nsTArray_SafeElementAtSmartPtrHelper
<
nsCOMPtr
<
E
>
Derived
>
{
}
;
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtHelper
<
RefPtr
<
E
>
Derived
>
:
public
nsTArray_SafeElementAtSmartPtrHelper
<
RefPtr
<
E
>
Derived
>
{
}
;
namespace
mozilla
{
template
<
class
T
>
class
OwningNonNull
;
}
template
<
class
E
class
Derived
>
struct
nsTArray_SafeElementAtHelper
<
mozilla
:
:
OwningNonNull
<
E
>
Derived
>
:
public
nsTArray_SafeElementAtSmartPtrHelper
<
mozilla
:
:
OwningNonNull
<
E
>
Derived
>
{
}
;
extern
"
C
"
void
Gecko_EnsureTArrayCapacity
(
void
*
aArray
size_t
aCapacity
size_t
aElementSize
)
;
extern
"
C
"
void
Gecko_ClearPODTArray
(
void
*
aArray
size_t
aElementSize
size_t
aElementAlign
)
;
MOZ_NORETURN
MOZ_COLD
void
InvalidArrayIndex_CRASH
(
size_t
aIndex
size_t
aLength
)
;
template
<
class
Alloc
class
RelocationStrategy
>
class
nsTArray_base
{
template
<
class
XAlloc
class
XRelocationStrategy
>
friend
class
nsTArray_base
;
template
<
class
E
class
XAlloc
>
friend
class
nsTArray_Impl
;
friend
void
Gecko_EnsureTArrayCapacity
(
void
*
aArray
size_t
aCapacity
size_t
aElemSize
)
;
friend
void
Gecko_ClearPODTArray
(
void
*
aTArray
size_t
aElementSize
size_t
aElementAlign
)
;
protected
:
typedef
nsTArrayHeader
Header
;
public
:
typedef
size_t
size_type
;
typedef
size_t
index_type
;
size_type
Length
(
)
const
{
return
mHdr
-
>
mLength
;
}
bool
IsEmpty
(
)
const
{
return
Length
(
)
=
=
0
;
}
size_type
Capacity
(
)
const
{
return
mHdr
-
>
mCapacity
;
}
#
ifdef
DEBUG
void
*
DebugGetHeader
(
)
const
{
return
mHdr
;
}
#
endif
protected
:
nsTArray_base
(
)
;
~
nsTArray_base
(
)
;
nsTArray_base
(
const
nsTArray_base
&
)
;
nsTArray_base
&
operator
=
(
const
nsTArray_base
&
)
;
template
<
typename
ActualAlloc
>
typename
ActualAlloc
:
:
ResultTypeProxy
EnsureCapacity
(
size_type
aCapacity
size_type
aElemSize
)
;
template
<
typename
ActualAlloc
>
typename
ActualAlloc
:
:
ResultTypeProxy
ExtendCapacity
(
size_type
aLength
size_type
aCount
size_type
aElemSize
)
;
void
ShrinkCapacity
(
size_type
aElemSize
size_t
aElemAlign
)
;
template
<
typename
ActualAlloc
>
void
ShiftData
(
index_type
aStart
size_type
aOldLen
size_type
aNewLen
size_type
aElemSize
size_t
aElemAlign
)
;
template
<
typename
ActualAlloc
>
void
SwapFromEnd
(
index_type
aStart
size_type
aCount
size_type
aElemSize
size_t
aElemAlign
)
;
void
IncrementLength
(
size_t
aNum
)
{
if
(
mHdr
=
=
EmptyHdr
(
)
)
{
if
(
MOZ_UNLIKELY
(
aNum
!
=
0
)
)
{
MOZ_CRASH
(
)
;
}
}
else
{
mHdr
-
>
mLength
+
=
aNum
;
}
}
template
<
typename
ActualAlloc
>
typename
ActualAlloc
:
:
ResultTypeProxy
InsertSlotsAt
(
index_type
aIndex
size_type
aCount
size_type
aElementSize
size_t
aElemAlign
)
;
template
<
typename
ActualAlloc
class
Allocator
>
typename
ActualAlloc
:
:
ResultTypeProxy
SwapArrayElements
(
nsTArray_base
<
Allocator
RelocationStrategy
>
&
aOther
size_type
aElemSize
size_t
aElemAlign
)
;
class
IsAutoArrayRestorer
{
public
:
IsAutoArrayRestorer
(
nsTArray_base
<
Alloc
RelocationStrategy
>
&
aArray
size_t
aElemAlign
)
;
~
IsAutoArrayRestorer
(
)
;
private
:
nsTArray_base
<
Alloc
RelocationStrategy
>
&
mArray
;
size_t
mElemAlign
;
bool
mIsAuto
;
}
;
template
<
typename
ActualAlloc
>
bool
EnsureNotUsingAutoArrayBuffer
(
size_type
aElemSize
)
;
bool
IsAutoArray
(
)
const
{
return
mHdr
-
>
mIsAutoArray
;
}
Header
*
GetAutoArrayBuffer
(
size_t
aElemAlign
)
{
MOZ_ASSERT
(
IsAutoArray
(
)
"
Should
be
an
auto
array
to
call
this
"
)
;
return
GetAutoArrayBufferUnsafe
(
aElemAlign
)
;
}
const
Header
*
GetAutoArrayBuffer
(
size_t
aElemAlign
)
const
{
MOZ_ASSERT
(
IsAutoArray
(
)
"
Should
be
an
auto
array
to
call
this
"
)
;
return
GetAutoArrayBufferUnsafe
(
aElemAlign
)
;
}
Header
*
GetAutoArrayBufferUnsafe
(
size_t
aElemAlign
)
{
return
const_cast
<
Header
*
>
(
static_cast
<
const
nsTArray_base
<
Alloc
RelocationStrategy
>
*
>
(
this
)
-
>
GetAutoArrayBufferUnsafe
(
aElemAlign
)
)
;
}
const
Header
*
GetAutoArrayBufferUnsafe
(
size_t
aElemAlign
)
const
;
bool
UsesAutoArrayBuffer
(
)
const
;
Header
*
mHdr
;
Header
*
Hdr
(
)
const
MOZ_NONNULL_RETURN
{
return
mHdr
;
}
Header
*
*
PtrToHdr
(
)
MOZ_NONNULL_RETURN
{
return
&
mHdr
;
}
static
Header
*
EmptyHdr
(
)
MOZ_NONNULL_RETURN
{
return
&
sEmptyTArrayHeader
;
}
}
;
namespace
detail
{
template
<
typename
.
.
.
T
>
struct
ChooseFirst
;
template
<
>
struct
ChooseFirst
<
>
{
typedef
void
Type
;
}
;
template
<
typename
A
typename
.
.
.
Args
>
struct
ChooseFirst
<
A
Args
.
.
.
>
{
typedef
A
Type
;
}
;
}
template
<
class
E
>
class
nsTArrayElementTraits
{
public
:
static
inline
void
Construct
(
E
*
aE
)
{
new
(
static_cast
<
void
*
>
(
aE
)
)
E
;
}
template
<
class
A
>
static
inline
void
Construct
(
E
*
aE
A
&
&
aArg
)
{
using
E_NoCV
=
std
:
:
remove_cv_t
<
E
>
;
using
A_NoCV
=
std
:
:
remove_cv_t
<
A
>
;
static_assert
(
!
std
:
:
is_same_v
<
E_NoCV
*
A_NoCV
>
"
For
safety
we
disallow
constructing
nsTArray
<
E
>
elements
"
"
from
E
*
pointers
.
See
bug
960591
.
"
)
;
new
(
static_cast
<
void
*
>
(
aE
)
)
E
(
std
:
:
forward
<
A
>
(
aArg
)
)
;
}
template
<
class
.
.
.
Args
>
static
inline
void
Emplace
(
E
*
aE
Args
&
&
.
.
.
aArgs
)
{
using
E_NoCV
=
std
:
:
remove_cv_t
<
E
>
;
using
A_NoCV
=
std
:
:
remove_cv_t
<
typename
:
:
detail
:
:
ChooseFirst
<
Args
.
.
.
>
:
:
Type
>
;
static_assert
(
!
std
:
:
is_same_v
<
E_NoCV
*
A_NoCV
>
"
For
safety
we
disallow
constructing
nsTArray
<
E
>
elements
"
"
from
E
*
pointers
.
See
bug
960591
.
"
)
;
new
(
static_cast
<
void
*
>
(
aE
)
)
E
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
static
inline
void
Destruct
(
E
*
aE
)
{
aE
-
>
~
E
(
)
;
}
}
;
template
<
class
A
class
B
>
class
nsDefaultComparator
{
public
:
bool
Equals
(
const
A
&
aA
const
B
&
aB
)
const
{
return
aA
=
=
aB
;
}
bool
LessThan
(
const
A
&
aA
const
B
&
aB
)
const
{
return
aA
<
aB
;
}
}
;
template
<
bool
IsTriviallyCopyConstructible
bool
IsSameType
>
struct
AssignRangeAlgorithm
{
template
<
class
Item
class
ElemType
class
IndexType
class
SizeType
>
static
void
implementation
(
ElemType
*
aElements
IndexType
aStart
SizeType
aCount
const
Item
*
aValues
)
{
ElemType
*
iter
=
aElements
+
aStart
;
ElemType
*
end
=
iter
+
aCount
;
for
(
;
iter
!
=
end
;
+
+
iter
+
+
aValues
)
{
nsTArrayElementTraits
<
ElemType
>
:
:
Construct
(
iter
*
aValues
)
;
}
}
}
;
template
<
>
struct
AssignRangeAlgorithm
<
true
true
>
{
template
<
class
Item
class
ElemType
class
IndexType
class
SizeType
>
static
void
implementation
(
ElemType
*
aElements
IndexType
aStart
SizeType
aCount
const
Item
*
aValues
)
{
if
(
aValues
)
{
memcpy
(
aElements
+
aStart
aValues
aCount
*
sizeof
(
ElemType
)
)
;
}
}
}
;
struct
nsTArray_RelocateUsingMemutils
{
const
static
bool
allowRealloc
=
true
;
static
void
RelocateNonOverlappingRegionWithHeader
(
void
*
aDest
const
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
memcpy
(
aDest
aSrc
sizeof
(
nsTArrayHeader
)
+
aCount
*
aElemSize
)
;
}
static
void
RelocateOverlappingRegion
(
void
*
aDest
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
memmove
(
aDest
aSrc
aCount
*
aElemSize
)
;
}
static
void
RelocateNonOverlappingRegion
(
void
*
aDest
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
memcpy
(
aDest
aSrc
aCount
*
aElemSize
)
;
}
}
;
template
<
class
ElemType
>
struct
nsTArray_RelocateUsingMoveConstructor
{
typedef
nsTArrayElementTraits
<
ElemType
>
traits
;
const
static
bool
allowRealloc
=
false
;
static
void
RelocateNonOverlappingRegionWithHeader
(
void
*
aDest
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
nsTArrayHeader
*
destHeader
=
static_cast
<
nsTArrayHeader
*
>
(
aDest
)
;
nsTArrayHeader
*
srcHeader
=
static_cast
<
nsTArrayHeader
*
>
(
aSrc
)
;
*
destHeader
=
*
srcHeader
;
RelocateNonOverlappingRegion
(
static_cast
<
uint8_t
*
>
(
aDest
)
+
sizeof
(
nsTArrayHeader
)
static_cast
<
uint8_t
*
>
(
aSrc
)
+
sizeof
(
nsTArrayHeader
)
aCount
aElemSize
)
;
}
static
void
RelocateOverlappingRegion
(
void
*
aDest
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
ElemType
*
destElem
=
static_cast
<
ElemType
*
>
(
aDest
)
;
ElemType
*
srcElem
=
static_cast
<
ElemType
*
>
(
aSrc
)
;
ElemType
*
destElemEnd
=
destElem
+
aCount
;
ElemType
*
srcElemEnd
=
srcElem
+
aCount
;
if
(
destElem
=
=
srcElem
)
{
return
;
}
if
(
srcElemEnd
>
destElem
&
&
srcElemEnd
<
destElemEnd
)
{
while
(
destElemEnd
!
=
destElem
)
{
-
-
destElemEnd
;
-
-
srcElemEnd
;
traits
:
:
Construct
(
destElemEnd
std
:
:
move
(
*
srcElemEnd
)
)
;
traits
:
:
Destruct
(
srcElemEnd
)
;
}
}
else
{
RelocateNonOverlappingRegion
(
aDest
aSrc
aCount
aElemSize
)
;
}
}
static
void
RelocateNonOverlappingRegion
(
void
*
aDest
void
*
aSrc
size_t
aCount
size_t
aElemSize
)
{
ElemType
*
destElem
=
static_cast
<
ElemType
*
>
(
aDest
)
;
ElemType
*
srcElem
=
static_cast
<
ElemType
*
>
(
aSrc
)
;
ElemType
*
destElemEnd
=
destElem
+
aCount
;
#
ifdef
DEBUG
ElemType
*
srcElemEnd
=
srcElem
+
aCount
;
MOZ_ASSERT
(
srcElemEnd
<
=
destElem
|
|
srcElemEnd
>
destElemEnd
)
;
#
endif
while
(
destElem
!
=
destElemEnd
)
{
traits
:
:
Construct
(
destElem
std
:
:
move
(
*
srcElem
)
)
;
traits
:
:
Destruct
(
srcElem
)
;
+
+
destElem
;
+
+
srcElem
;
}
}
}
;
template
<
class
E
>
struct
MOZ_NEEDS_MEMMOVABLE_TYPE
nsTArray_RelocationStrategy
{
using
Type
=
nsTArray_RelocateUsingMemutils
;
}
;
#
define
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
T
)
\
template
<
>
\
struct
nsTArray_RelocationStrategy
<
T
>
{
\
using
Type
=
nsTArray_RelocateUsingMoveConstructor
<
T
>
;
\
}
;
#
define
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR_FOR_TEMPLATE
(
T
)
\
template
<
typename
S
>
\
struct
nsTArray_RelocationStrategy
<
T
<
S
>
>
{
\
using
Type
=
nsTArray_RelocateUsingMoveConstructor
<
T
<
S
>
>
;
\
}
;
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR_FOR_TEMPLATE
(
JS
:
:
Heap
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR_FOR_TEMPLATE
(
std
:
:
function
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR_FOR_TEMPLATE
(
mozilla
:
:
ipc
:
:
Endpoint
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
nsRegion
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
nsIntRegion
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
layers
:
:
TileClient
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
layers
:
:
TransactionData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
SerializedStructuredCloneBuffer
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
ipc
:
:
StructuredCloneData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
ClonedMessageData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
indexedDB
:
:
ObjectStoreCursorResponse
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
indexedDB
:
:
IndexCursorResponse
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
indexedDB
:
:
SerializedStructuredCloneReadInfo
)
;
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
JSStructuredCloneData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
MessageData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
dom
:
:
RefMessageData
)
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
SourceBufferTask
)
template
<
class
E
class
Derived
>
struct
nsTArray_TypedBase
:
public
nsTArray_SafeElementAtHelper
<
E
Derived
>
{
}
;
template
<
class
E
class
Derived
>
struct
nsTArray_TypedBase
<
JS
:
:
Heap
<
E
>
Derived
>
:
public
nsTArray_SafeElementAtHelper
<
JS
:
:
Heap
<
E
>
Derived
>
{
operator
const
nsTArray
<
E
>
&
(
)
{
static_assert
(
sizeof
(
E
)
=
=
sizeof
(
JS
:
:
Heap
<
E
>
)
"
JS
:
:
Heap
<
E
>
must
be
binary
compatible
with
E
.
"
)
;
Derived
*
self
=
static_cast
<
Derived
*
>
(
this
)
;
return
*
reinterpret_cast
<
nsTArray
<
E
>
*
>
(
self
)
;
}
operator
const
FallibleTArray
<
E
>
&
(
)
{
Derived
*
self
=
static_cast
<
Derived
*
>
(
this
)
;
return
*
reinterpret_cast
<
FallibleTArray
<
E
>
*
>
(
self
)
;
}
}
;
namespace
detail
{
template
<
typename
T
typename
U
typename
V
=
int
>
struct
IsCompareMethod
:
std
:
:
false_type
{
}
;
template
<
typename
T
typename
U
>
struct
IsCompareMethod
<
T
U
decltype
(
std
:
:
declval
<
T
>
(
)
(
std
:
:
declval
<
U
>
(
)
std
:
:
declval
<
U
>
(
)
)
)
>
:
std
:
:
true_type
{
}
;
template
<
typename
T
typename
U
bool
IsCompare
=
IsCompareMethod
<
T
U
>
:
:
value
>
struct
CompareWrapper
{
#
ifdef
_MSC_VER
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4180
)
/
*
Silence
"
qualifier
applied
to
function
\
type
has
no
meaning
"
warning
*
/
#
endif
MOZ_IMPLICIT
CompareWrapper
(
const
T
&
aComparator
)
:
mComparator
(
aComparator
)
{
}
template
<
typename
A
typename
B
>
int
Compare
(
A
&
aLeft
B
&
aRight
)
const
{
return
mComparator
(
aLeft
aRight
)
;
}
template
<
typename
A
typename
B
>
bool
Equals
(
A
&
aLeft
B
&
aRight
)
const
{
return
Compare
(
aLeft
aRight
)
=
=
0
;
}
template
<
typename
A
typename
B
>
bool
LessThan
(
A
&
aLeft
B
&
aRight
)
const
{
return
Compare
(
aLeft
aRight
)
<
0
;
}
const
T
&
mComparator
;
#
ifdef
_MSC_VER
#
pragma
warning
(
pop
)
#
endif
}
;
template
<
typename
T
typename
U
>
struct
CompareWrapper
<
T
U
false
>
{
MOZ_IMPLICIT
CompareWrapper
(
const
T
&
aComparator
)
:
mComparator
(
aComparator
)
{
}
template
<
typename
A
typename
B
>
int
Compare
(
A
&
aLeft
B
&
aRight
)
const
{
if
(
Equals
(
aLeft
aRight
)
)
{
return
0
;
}
return
LessThan
(
aLeft
aRight
)
?
-
1
:
1
;
}
template
<
typename
A
typename
B
>
bool
Equals
(
A
&
aLeft
B
&
aRight
)
const
{
return
mComparator
.
Equals
(
aLeft
aRight
)
;
}
template
<
typename
A
typename
B
>
bool
LessThan
(
A
&
aLeft
B
&
aRight
)
const
{
return
mComparator
.
LessThan
(
aLeft
aRight
)
;
}
const
T
&
mComparator
;
}
;
}
template
<
class
E
class
Alloc
>
class
nsTArray_Impl
:
public
nsTArray_base
<
Alloc
typename
nsTArray_RelocationStrategy
<
E
>
:
:
Type
>
public
nsTArray_TypedBase
<
E
nsTArray_Impl
<
E
Alloc
>
>
{
private
:
friend
class
nsTArray
<
E
>
;
typedef
nsTArrayFallibleAllocator
FallibleAlloc
;
typedef
nsTArrayInfallibleAllocator
InfallibleAlloc
;
public
:
typedef
typename
nsTArray_RelocationStrategy
<
E
>
:
:
Type
relocation_type
;
typedef
nsTArray_base
<
Alloc
relocation_type
>
base_type
;
typedef
typename
base_type
:
:
size_type
size_type
;
typedef
typename
base_type
:
:
index_type
index_type
;
typedef
E
elem_type
;
typedef
nsTArray_Impl
<
E
Alloc
>
self_type
;
typedef
nsTArrayElementTraits
<
E
>
elem_traits
;
typedef
nsTArray_SafeElementAtHelper
<
E
self_type
>
safeelementat_helper_type
;
typedef
mozilla
:
:
ArrayIterator
<
elem_type
&
nsTArray
<
E
>
>
iterator
;
typedef
mozilla
:
:
ArrayIterator
<
const
elem_type
&
nsTArray
<
E
>
>
const_iterator
;
typedef
mozilla
:
:
ReverseIterator
<
iterator
>
reverse_iterator
;
typedef
mozilla
:
:
ReverseIterator
<
const_iterator
>
const_reverse_iterator
;
using
base_type
:
:
EmptyHdr
;
using
safeelementat_helper_type
:
:
SafeElementAt
;
static
const
index_type
NoIndex
=
index_type
(
-
1
)
;
using
base_type
:
:
Length
;
~
nsTArray_Impl
(
)
{
if
(
!
base_type
:
:
IsEmpty
(
)
)
{
ClearAndRetainStorage
(
)
;
}
}
nsTArray_Impl
(
)
=
default
;
explicit
nsTArray_Impl
(
size_type
aCapacity
)
{
SetCapacity
(
aCapacity
)
;
}
template
<
typename
Allocator
>
explicit
nsTArray_Impl
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
SwapElements
(
aOther
)
;
}
nsTArray_Impl
(
const
nsTArray_Impl
&
)
=
default
;
template
<
typename
Allocator
>
[
[
nodiscard
]
]
operator
const
nsTArray_Impl
<
E
Allocator
>
&
(
)
const
&
{
return
*
reinterpret_cast
<
const
nsTArray_Impl
<
E
Allocator
>
*
>
(
this
)
;
}
[
[
nodiscard
]
]
operator
const
nsTArray
<
E
>
&
(
)
const
&
{
return
*
reinterpret_cast
<
const
nsTArray
<
E
>
*
>
(
this
)
;
}
[
[
nodiscard
]
]
operator
const
FallibleTArray
<
E
>
&
(
)
const
&
{
return
*
reinterpret_cast
<
const
FallibleTArray
<
E
>
*
>
(
this
)
;
}
nsTArray_Impl
&
operator
=
(
const
nsTArray_Impl
&
)
=
default
;
self_type
&
operator
=
(
self_type
&
&
aOther
)
{
if
(
this
!
=
&
aOther
)
{
Clear
(
)
;
SwapElements
(
aOther
)
;
}
return
*
this
;
}
template
<
typename
Allocator
>
[
[
nodiscard
]
]
bool
operator
=
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
const
{
size_type
len
=
Length
(
)
;
if
(
len
!
=
aOther
.
Length
(
)
)
{
return
false
;
}
for
(
index_type
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
!
(
operator
[
]
(
i
)
=
=
aOther
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
[
[
nodiscard
]
]
bool
operator
!
=
(
const
self_type
&
aOther
)
const
{
return
!
operator
=
=
(
aOther
)
;
}
template
<
typename
Allocator
typename
=
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
Alloc
InfallibleAlloc
>
Allocator
>
>
self_type
&
operator
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
ReplaceElementsAtInternal
<
InfallibleAlloc
>
(
0
Length
(
)
aOther
.
Elements
(
)
aOther
.
Length
(
)
)
;
return
*
this
;
}
template
<
typename
Allocator
>
self_type
&
operator
=
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
Clear
(
)
;
SwapElements
(
aOther
)
;
return
*
this
;
}
[
[
nodiscard
]
]
size_t
ShallowSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
if
(
this
-
>
UsesAutoArrayBuffer
(
)
|
|
Hdr
(
)
=
=
EmptyHdr
(
)
)
{
return
0
;
}
return
aMallocSizeOf
(
this
-
>
Hdr
(
)
)
;
}
[
[
nodiscard
]
]
size_t
ShallowSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
[
[
nodiscard
]
]
elem_type
*
Elements
(
)
MOZ_NONNULL_RETURN
{
return
reinterpret_cast
<
elem_type
*
>
(
Hdr
(
)
+
1
)
;
}
[
[
nodiscard
]
]
const
elem_type
*
Elements
(
)
const
MOZ_NONNULL_RETURN
{
return
reinterpret_cast
<
const
elem_type
*
>
(
Hdr
(
)
+
1
)
;
}
[
[
nodiscard
]
]
elem_type
&
ElementAt
(
index_type
aIndex
)
{
if
(
MOZ_UNLIKELY
(
aIndex
>
=
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aIndex
Length
(
)
)
;
}
return
Elements
(
)
[
aIndex
]
;
}
[
[
nodiscard
]
]
const
elem_type
&
ElementAt
(
index_type
aIndex
)
const
{
if
(
MOZ_UNLIKELY
(
aIndex
>
=
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aIndex
Length
(
)
)
;
}
return
Elements
(
)
[
aIndex
]
;
}
[
[
nodiscard
]
]
elem_type
&
SafeElementAt
(
index_type
aIndex
elem_type
&
aDef
)
{
return
aIndex
<
Length
(
)
?
Elements
(
)
[
aIndex
]
:
aDef
;
}
[
[
nodiscard
]
]
const
elem_type
&
SafeElementAt
(
index_type
aIndex
const
elem_type
&
aDef
)
const
{
return
aIndex
<
Length
(
)
?
Elements
(
)
[
aIndex
]
:
aDef
;
}
[
[
nodiscard
]
]
elem_type
&
operator
[
]
(
index_type
aIndex
)
{
return
ElementAt
(
aIndex
)
;
}
[
[
nodiscard
]
]
const
elem_type
&
operator
[
]
(
index_type
aIndex
)
const
{
return
ElementAt
(
aIndex
)
;
}
[
[
nodiscard
]
]
elem_type
&
LastElement
(
)
{
return
ElementAt
(
Length
(
)
-
1
)
;
}
[
[
nodiscard
]
]
const
elem_type
&
LastElement
(
)
const
{
return
ElementAt
(
Length
(
)
-
1
)
;
}
[
[
nodiscard
]
]
elem_type
&
SafeLastElement
(
elem_type
&
aDef
)
{
return
SafeElementAt
(
Length
(
)
-
1
aDef
)
;
}
[
[
nodiscard
]
]
const
elem_type
&
SafeLastElement
(
const
elem_type
&
aDef
)
const
{
return
SafeElementAt
(
Length
(
)
-
1
aDef
)
;
}
[
[
nodiscard
]
]
iterator
begin
(
)
{
return
iterator
(
*
this
0
)
;
}
[
[
nodiscard
]
]
const_iterator
begin
(
)
const
{
return
const_iterator
(
*
this
0
)
;
}
[
[
nodiscard
]
]
const_iterator
cbegin
(
)
const
{
return
begin
(
)
;
}
[
[
nodiscard
]
]
iterator
end
(
)
{
return
iterator
(
*
this
Length
(
)
)
;
}
[
[
nodiscard
]
]
const_iterator
end
(
)
const
{
return
const_iterator
(
*
this
Length
(
)
)
;
}
[
[
nodiscard
]
]
const_iterator
cend
(
)
const
{
return
end
(
)
;
}
[
[
nodiscard
]
]
reverse_iterator
rbegin
(
)
{
return
reverse_iterator
(
end
(
)
)
;
}
[
[
nodiscard
]
]
const_reverse_iterator
rbegin
(
)
const
{
return
const_reverse_iterator
(
end
(
)
)
;
}
[
[
nodiscard
]
]
const_reverse_iterator
crbegin
(
)
const
{
return
rbegin
(
)
;
}
[
[
nodiscard
]
]
reverse_iterator
rend
(
)
{
return
reverse_iterator
(
begin
(
)
)
;
}
[
[
nodiscard
]
]
const_reverse_iterator
rend
(
)
const
{
return
const_reverse_iterator
(
begin
(
)
)
;
}
[
[
nodiscard
]
]
const_reverse_iterator
crend
(
)
const
{
return
rend
(
)
;
}
[
[
nodiscard
]
]
operator
mozilla
:
:
Span
<
elem_type
>
(
)
{
return
mozilla
:
:
Span
<
elem_type
>
(
Elements
(
)
Length
(
)
)
;
}
[
[
nodiscard
]
]
operator
mozilla
:
:
Span
<
const
elem_type
>
(
)
const
{
return
mozilla
:
:
Span
<
const
elem_type
>
(
Elements
(
)
Length
(
)
)
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
bool
Contains
(
const
Item
&
aItem
const
Comparator
&
aComp
)
const
{
return
ApplyIf
(
aItem
0
aComp
[
]
(
)
{
return
true
;
}
[
]
(
)
{
return
false
;
}
)
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
bool
ContainsSorted
(
const
Item
&
aItem
const
Comparator
&
aComp
)
const
{
return
BinaryIndexOf
(
aItem
aComp
)
!
=
NoIndex
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
bool
Contains
(
const
Item
&
aItem
)
const
{
return
Contains
(
aItem
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
bool
ContainsSorted
(
const
Item
&
aItem
)
const
{
return
BinaryIndexOf
(
aItem
)
!
=
NoIndex
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
index_type
IndexOf
(
const
Item
&
aItem
index_type
aStart
const
Comparator
&
aComp
)
const
{
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
const
elem_type
*
iter
=
Elements
(
)
+
aStart
;
const
elem_type
*
iend
=
Elements
(
)
+
Length
(
)
;
for
(
;
iter
!
=
iend
;
+
+
iter
)
{
if
(
comp
.
Equals
(
*
iter
aItem
)
)
{
return
index_type
(
iter
-
Elements
(
)
)
;
}
}
return
NoIndex
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
index_type
IndexOf
(
const
Item
&
aItem
index_type
aStart
=
0
)
const
{
return
IndexOf
(
aItem
aStart
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
index_type
LastIndexOf
(
const
Item
&
aItem
index_type
aStart
const
Comparator
&
aComp
)
const
{
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
size_type
endOffset
=
aStart
>
=
Length
(
)
?
Length
(
)
:
aStart
+
1
;
const
elem_type
*
iend
=
Elements
(
)
-
1
;
const
elem_type
*
iter
=
iend
+
endOffset
;
for
(
;
iter
!
=
iend
;
-
-
iter
)
{
if
(
comp
.
Equals
(
*
iter
aItem
)
)
{
return
index_type
(
iter
-
Elements
(
)
)
;
}
}
return
NoIndex
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
index_type
LastIndexOf
(
const
Item
&
aItem
index_type
aStart
=
NoIndex
)
const
{
return
LastIndexOf
(
aItem
aStart
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
index_type
BinaryIndexOf
(
const
Item
&
aItem
const
Comparator
&
aComp
)
const
{
using
mozilla
:
:
BinarySearchIf
;
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
size_t
index
;
bool
found
=
BinarySearchIf
(
Elements
(
)
0
Length
(
)
[
&
]
(
const
elem_type
&
aElement
)
{
return
-
comp
.
Compare
(
aElement
aItem
)
;
}
&
index
)
;
return
found
?
index
:
NoIndex
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
index_type
BinaryIndexOf
(
const
Item
&
aItem
)
const
{
return
BinaryIndexOf
(
aItem
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Allocator
typename
ActualAlloc
=
Alloc
>
[
[
nodiscard
]
]
typename
ActualAlloc
:
:
ResultType
Assign
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
return
ActualAlloc
:
:
ConvertBoolToResultType
(
ReplaceElementsAtInternal
<
ActualAlloc
>
(
0
Length
(
)
aOther
.
Elements
(
)
aOther
.
Length
(
)
)
)
;
}
template
<
class
Allocator
>
[
[
nodiscard
]
]
bool
Assign
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
const
mozilla
:
:
fallible_t
&
)
{
return
Assign
<
Allocator
FallibleAlloc
>
(
aOther
)
;
}
template
<
class
Allocator
>
void
Assign
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
Clear
(
)
;
SwapElements
(
aOther
)
;
}
void
ClearAndRetainStorage
(
)
{
if
(
base_type
:
:
mHdr
=
=
EmptyHdr
(
)
)
{
return
;
}
DestructRange
(
0
Length
(
)
)
;
base_type
:
:
mHdr
-
>
mLength
=
0
;
}
void
SetLengthAndRetainStorage
(
size_type
aNewLen
)
{
MOZ_ASSERT
(
aNewLen
<
=
base_type
:
:
Capacity
(
)
)
;
size_type
oldLen
=
Length
(
)
;
if
(
aNewLen
>
oldLen
)
{
InsertElementsAtInternal
<
InfallibleAlloc
>
(
oldLen
aNewLen
-
oldLen
)
;
return
;
}
if
(
aNewLen
<
oldLen
)
{
DestructRange
(
aNewLen
oldLen
-
aNewLen
)
;
base_type
:
:
mHdr
-
>
mLength
=
aNewLen
;
}
}
private
:
template
<
typename
ActualAlloc
class
Item
>
elem_type
*
ReplaceElementsAtInternal
(
index_type
aStart
size_type
aCount
const
Item
*
aArray
size_type
aArrayLen
)
;
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
Item
*
aArray
size_type
aArrayLen
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aStart
aCount
aArray
aArrayLen
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
nsTArray
<
Item
>
&
aArray
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aStart
aCount
aArray
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
mozilla
:
:
Span
<
Item
>
aSpan
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aStart
aCount
aSpan
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
Item
&
aItem
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aStart
aCount
aItem
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
ReplaceElementAt
(
index_type
aIndex
Item
&
&
aItem
)
{
elem_type
*
const
elem
=
&
ElementAt
(
aIndex
)
;
elem_traits
:
:
Destruct
(
elem
)
;
elem_traits
:
:
Construct
(
elem
std
:
:
forward
<
Item
>
(
aItem
)
)
;
return
mozilla
:
:
WrapNotNullUnchecked
(
elem
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
InsertElementsAt
(
index_type
aIndex
const
Item
*
aArray
size_type
aArrayLen
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aIndex
0
aArray
aArrayLen
)
;
}
template
<
class
Item
class
Allocator
>
[
[
nodiscard
]
]
elem_type
*
InsertElementsAt
(
index_type
aIndex
const
nsTArray_Impl
<
Item
Allocator
>
&
aArray
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aIndex
0
aArray
.
Elements
(
)
aArray
.
Length
(
)
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
InsertElementsAt
(
index_type
aIndex
mozilla
:
:
Span
<
Item
>
aSpan
const
mozilla
:
:
fallible_t
&
)
{
return
ReplaceElementsAtInternal
<
FallibleAlloc
>
(
aIndex
0
aSpan
.
Elements
(
)
aSpan
.
Length
(
)
)
;
}
private
:
template
<
typename
ActualAlloc
>
elem_type
*
InsertElementAtInternal
(
index_type
aIndex
)
;
public
:
[
[
nodiscard
]
]
elem_type
*
InsertElementAt
(
index_type
aIndex
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementAtInternal
<
FallibleAlloc
>
(
aIndex
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
>
elem_type
*
InsertElementAtInternal
(
index_type
aIndex
Item
&
&
aItem
)
;
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
InsertElementAt
(
index_type
aIndex
Item
&
&
aItem
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementAtInternal
<
FallibleAlloc
>
(
aIndex
std
:
:
forward
<
Item
>
(
aItem
)
)
;
}
mozilla
:
:
NotNull
<
elem_type
*
>
ReconstructElementAt
(
index_type
aIndex
)
{
elem_type
*
elem
=
&
ElementAt
(
aIndex
)
;
elem_traits
:
:
Destruct
(
elem
)
;
elem_traits
:
:
Construct
(
elem
)
;
return
mozilla
:
:
WrapNotNullUnchecked
(
elem
)
;
}
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
index_type
IndexOfFirstElementGt
(
const
Item
&
aItem
const
Comparator
&
aComp
)
const
{
using
mozilla
:
:
BinarySearchIf
;
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
size_t
index
;
BinarySearchIf
(
Elements
(
)
0
Length
(
)
[
&
]
(
const
elem_type
&
aElement
)
{
return
comp
.
Compare
(
aElement
aItem
)
<
=
0
?
1
:
-
1
;
}
&
index
)
;
return
index
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
index_type
IndexOfFirstElementGt
(
const
Item
&
aItem
)
const
{
return
IndexOfFirstElementGt
(
aItem
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
class
Comparator
>
elem_type
*
InsertElementSortedInternal
(
Item
&
&
aItem
const
Comparator
&
aComp
)
{
index_type
index
=
IndexOfFirstElementGt
<
Item
Comparator
>
(
aItem
aComp
)
;
return
InsertElementAtInternal
<
ActualAlloc
>
(
index
std
:
:
forward
<
Item
>
(
aItem
)
)
;
}
public
:
template
<
class
Item
class
Comparator
>
[
[
nodiscard
]
]
elem_type
*
InsertElementSorted
(
Item
&
&
aItem
const
Comparator
&
aComp
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementSortedInternal
<
FallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
aComp
)
;
}
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
InsertElementSorted
(
Item
&
&
aItem
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementSortedInternal
<
FallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
nsDefaultComparator
<
elem_type
Item
>
{
}
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
>
elem_type
*
AppendElementsInternal
(
const
Item
*
aArray
size_type
aArrayLen
)
;
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
AppendElements
(
const
Item
*
aArray
size_type
aArrayLen
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementsInternal
<
FallibleAlloc
>
(
aArray
aArrayLen
)
;
}
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
AppendElements
(
mozilla
:
:
Span
<
Item
>
aSpan
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementsInternal
<
FallibleAlloc
>
(
aSpan
.
Elements
(
)
aSpan
.
Length
(
)
)
;
}
template
<
class
Item
class
Allocator
>
[
[
nodiscard
]
]
elem_type
*
AppendElements
(
const
nsTArray_Impl
<
Item
Allocator
>
&
aArray
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementsInternal
<
FallibleAlloc
>
(
aArray
.
Elements
(
)
aArray
.
Length
(
)
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
class
Allocator
>
elem_type
*
AppendElementsInternal
(
nsTArray_Impl
<
Item
Allocator
>
&
&
aArray
)
;
public
:
template
<
class
Item
class
Allocator
>
[
[
nodiscard
]
]
elem_type
*
AppendElements
(
nsTArray_Impl
<
Item
Allocator
>
&
&
aArray
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementsInternal
<
FallibleAlloc
>
(
std
:
:
move
(
aArray
)
)
;
}
protected
:
template
<
typename
ActualAlloc
class
.
.
.
Args
>
elem_type
*
EmplaceBackInternal
(
Args
&
&
.
.
.
aItem
)
;
public
:
template
<
class
.
.
.
Args
>
[
[
nodiscard
]
]
elem_type
*
EmplaceBack
(
const
mozilla
:
:
fallible_t
&
Args
&
&
.
.
.
aArgs
)
{
return
EmplaceBackInternal
<
FallibleAlloc
Args
.
.
.
>
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
>
elem_type
*
AppendElementInternal
(
Item
&
&
aItem
)
;
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
AppendElement
(
Item
&
&
aItem
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementInternal
<
FallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
)
;
}
private
:
template
<
typename
ActualAlloc
>
elem_type
*
AppendElementsInternal
(
size_type
aCount
)
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
ExtendCapacity
<
ActualAlloc
>
(
Length
(
)
aCount
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
elem_type
*
elems
=
Elements
(
)
+
Length
(
)
;
size_type
i
;
for
(
i
=
0
;
i
<
aCount
;
+
+
i
)
{
elem_traits
:
:
Construct
(
elems
+
i
)
;
}
this
-
>
IncrementLength
(
aCount
)
;
return
elems
;
}
public
:
[
[
nodiscard
]
]
elem_type
*
AppendElements
(
size_type
aCount
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElementsInternal
<
FallibleAlloc
>
(
aCount
)
;
}
private
:
public
:
[
[
nodiscard
]
]
elem_type
*
AppendElement
(
const
mozilla
:
:
fallible_t
&
)
{
return
AppendElements
(
1
mozilla
:
:
fallible
)
;
}
const_iterator
RemoveElementAt
(
const_iterator
pos
)
{
MOZ_ASSERT
(
pos
.
GetArray
(
)
=
=
this
)
;
RemoveElementAt
(
pos
.
GetIndex
(
)
)
;
return
pos
;
}
const_iterator
RemoveElementsAt
(
const_iterator
first
const_iterator
last
)
{
MOZ_ASSERT
(
first
.
GetArray
(
)
=
=
this
)
;
MOZ_ASSERT
(
last
.
GetArray
(
)
=
=
this
)
;
MOZ_ASSERT
(
last
.
GetIndex
(
)
>
=
first
.
GetIndex
(
)
)
;
RemoveElementsAt
(
first
.
GetIndex
(
)
last
.
GetIndex
(
)
-
first
.
GetIndex
(
)
)
;
return
first
;
}
void
RemoveElementsAt
(
index_type
aStart
size_type
aCount
)
;
private
:
void
RemoveElementsAtUnsafe
(
index_type
aStart
size_type
aCount
)
;
public
:
void
RemoveElementAt
(
index_type
aIndex
)
{
RemoveElementsAt
(
aIndex
1
)
;
}
void
RemoveLastElement
(
)
{
RemoveElementAt
(
Length
(
)
-
1
)
;
}
[
[
nodiscard
]
]
elem_type
PopLastElement
(
)
{
elem_type
elem
=
std
:
:
move
(
LastElement
(
)
)
;
RemoveLastElement
(
)
;
return
elem
;
}
void
UnorderedRemoveElementsAt
(
index_type
aStart
size_type
aCount
)
;
void
UnorderedRemoveElementAt
(
index_type
aIndex
)
{
UnorderedRemoveElementsAt
(
aIndex
1
)
;
}
void
Clear
(
)
{
ClearAndRetainStorage
(
)
;
Compact
(
)
;
}
template
<
typename
Predicate
>
void
RemoveElementsBy
(
Predicate
aPredicate
)
;
template
<
class
Item
class
Comparator
>
bool
RemoveElement
(
const
Item
&
aItem
const
Comparator
&
aComp
)
{
index_type
i
=
IndexOf
(
aItem
0
aComp
)
;
if
(
i
=
=
NoIndex
)
{
return
false
;
}
RemoveElementsAtUnsafe
(
i
1
)
;
return
true
;
}
template
<
class
Item
>
bool
RemoveElement
(
const
Item
&
aItem
)
{
return
RemoveElement
(
aItem
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Item
class
Comparator
>
bool
RemoveElementSorted
(
const
Item
&
aItem
const
Comparator
&
aComp
)
{
index_type
index
=
IndexOfFirstElementGt
(
aItem
aComp
)
;
if
(
index
>
0
&
&
aComp
.
Equals
(
ElementAt
(
index
-
1
)
aItem
)
)
{
RemoveElementsAtUnsafe
(
index
-
1
1
)
;
return
true
;
}
return
false
;
}
template
<
class
Item
>
bool
RemoveElementSorted
(
const
Item
&
aItem
)
{
return
RemoveElementSorted
(
aItem
nsDefaultComparator
<
elem_type
Item
>
(
)
)
;
}
template
<
class
Allocator
>
void
SwapElements
(
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
this
-
>
template
SwapArrayElements
<
InfallibleAlloc
>
(
aOther
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
}
template
<
size_t
N
>
void
SwapElements
(
AutoTArray
<
E
N
>
&
aOther
)
{
static_assert
(
!
std
:
:
is_same_v
<
Alloc
FallibleAlloc
>
|
|
sizeof
(
E
)
*
N
<
=
1024
)
;
this
-
>
template
SwapArrayElements
<
InfallibleAlloc
>
(
aOther
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
}
template
<
class
Allocator
>
[
[
nodiscard
]
]
auto
SwapElements
(
nsTArray_Impl
<
E
Allocator
>
&
aOther
const
mozilla
:
:
fallible_t
&
)
{
return
FallibleAlloc
:
:
Result
(
this
-
>
template
SwapArrayElements
<
FallibleAlloc
>
(
aOther
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
)
;
}
private
:
template
<
typename
T
typename
Param0
typename
Param1
>
struct
InvokeWithIndexAndOrReferenceHelper
{
static
constexpr
bool
valid
=
false
;
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
void
void
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
T
&
)
{
return
f
(
)
;
}
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
size_t
void
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
i
T
&
)
{
return
f
(
i
)
;
}
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
T
&
void
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
T
&
e
)
{
return
f
(
e
)
;
}
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
const
T
&
void
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
T
&
e
)
{
return
f
(
e
)
;
}
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
size_t
T
&
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
i
T
&
e
)
{
return
f
(
i
e
)
;
}
}
;
template
<
typename
T
>
struct
InvokeWithIndexAndOrReferenceHelper
<
T
size_t
const
T
&
>
{
static
constexpr
bool
valid
=
true
;
template
<
typename
F
>
static
auto
Invoke
(
F
&
&
f
size_t
i
T
&
e
)
{
return
f
(
i
e
)
;
}
}
;
template
<
typename
T
typename
F
>
static
auto
InvokeWithIndexAndOrReference
(
F
&
&
f
size_t
i
T
&
e
)
{
using
Invoker
=
InvokeWithIndexAndOrReferenceHelper
<
T
typename
mozilla
:
:
FunctionTypeTraits
<
F
>
:
:
template
ParameterType
<
0
>
typename
mozilla
:
:
FunctionTypeTraits
<
F
>
:
:
template
ParameterType
<
1
>
>
;
static_assert
(
Invoker
:
:
valid
"
ApplyIf
'
s
Function
parameters
must
match
either
:
(
void
)
"
"
(
size_t
)
(
maybe
-
const
elem_type
&
)
or
"
"
(
size_t
maybe
-
const
elem_type
&
)
"
)
;
return
Invoker
:
:
Invoke
(
std
:
:
forward
<
F
>
(
f
)
i
e
)
;
}
public
:
template
<
class
Item
class
Comparator
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
index_type
aStart
const
Comparator
&
aComp
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
const
{
static_assert
(
std
:
:
is_same_v
<
typename
mozilla
:
:
FunctionTypeTraits
<
Function
>
:
:
ReturnType
typename
mozilla
:
:
FunctionTypeTraits
<
FunctionElse
>
:
:
ReturnType
>
"
ApplyIf
'
s
Function
and
FunctionElse
must
return
the
same
type
.
"
)
;
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
const
elem_type
*
const
elements
=
Elements
(
)
;
const
elem_type
*
const
iend
=
elements
+
Length
(
)
;
for
(
const
elem_type
*
iter
=
elements
+
aStart
;
iter
!
=
iend
;
+
+
iter
)
{
if
(
comp
.
Equals
(
*
iter
aItem
)
)
{
return
InvokeWithIndexAndOrReference
<
const
elem_type
>
(
std
:
:
forward
<
Function
>
(
aFunction
)
iter
-
elements
*
iter
)
;
}
}
return
aFunctionElse
(
)
;
}
template
<
class
Item
class
Comparator
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
index_type
aStart
const
Comparator
&
aComp
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
{
static_assert
(
std
:
:
is_same_v
<
typename
mozilla
:
:
FunctionTypeTraits
<
Function
>
:
:
ReturnType
typename
mozilla
:
:
FunctionTypeTraits
<
FunctionElse
>
:
:
ReturnType
>
"
ApplyIf
'
s
Function
and
FunctionElse
must
return
the
same
type
.
"
)
;
:
:
detail
:
:
CompareWrapper
<
Comparator
Item
>
comp
(
aComp
)
;
elem_type
*
const
elements
=
Elements
(
)
;
elem_type
*
const
iend
=
elements
+
Length
(
)
;
for
(
elem_type
*
iter
=
elements
+
aStart
;
iter
!
=
iend
;
+
+
iter
)
{
if
(
comp
.
Equals
(
*
iter
aItem
)
)
{
return
InvokeWithIndexAndOrReference
<
elem_type
>
(
std
:
:
forward
<
Function
>
(
aFunction
)
iter
-
elements
*
iter
)
;
}
}
return
aFunctionElse
(
)
;
}
template
<
class
Item
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
index_type
aStart
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
const
{
return
ApplyIf
(
aItem
aStart
nsDefaultComparator
<
elem_type
Item
>
(
)
std
:
:
forward
<
Function
>
(
aFunction
)
std
:
:
forward
<
FunctionElse
>
(
aFunctionElse
)
)
;
}
template
<
class
Item
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
index_type
aStart
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
{
return
ApplyIf
(
aItem
aStart
nsDefaultComparator
<
elem_type
Item
>
(
)
std
:
:
forward
<
Function
>
(
aFunction
)
std
:
:
forward
<
FunctionElse
>
(
aFunctionElse
)
)
;
}
template
<
class
Item
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
const
{
return
ApplyIf
(
aItem
0
std
:
:
forward
<
Function
>
(
aFunction
)
std
:
:
forward
<
FunctionElse
>
(
aFunctionElse
)
)
;
}
template
<
class
Item
class
Function
class
FunctionElse
>
auto
ApplyIf
(
const
Item
&
aItem
Function
&
&
aFunction
FunctionElse
&
&
aFunctionElse
)
{
return
ApplyIf
(
aItem
0
std
:
:
forward
<
Function
>
(
aFunction
)
std
:
:
forward
<
FunctionElse
>
(
aFunctionElse
)
)
;
}
protected
:
template
<
typename
ActualAlloc
=
Alloc
>
typename
ActualAlloc
:
:
ResultType
SetCapacity
(
size_type
aCapacity
)
{
return
ActualAlloc
:
:
Result
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
aCapacity
sizeof
(
elem_type
)
)
)
;
}
public
:
[
[
nodiscard
]
]
bool
SetCapacity
(
size_type
aCapacity
const
mozilla
:
:
fallible_t
&
)
{
return
SetCapacity
<
FallibleAlloc
>
(
aCapacity
)
;
}
protected
:
template
<
typename
ActualAlloc
=
Alloc
>
typename
ActualAlloc
:
:
ResultType
SetLength
(
size_type
aNewLen
)
{
size_type
oldLen
=
Length
(
)
;
if
(
aNewLen
>
oldLen
)
{
return
ActualAlloc
:
:
ConvertBoolToResultType
(
InsertElementsAtInternal
<
ActualAlloc
>
(
oldLen
aNewLen
-
oldLen
)
!
=
nullptr
)
;
}
TruncateLength
(
aNewLen
)
;
return
ActualAlloc
:
:
ConvertBoolToResultType
(
true
)
;
}
public
:
[
[
nodiscard
]
]
bool
SetLength
(
size_type
aNewLen
const
mozilla
:
:
fallible_t
&
)
{
return
SetLength
<
FallibleAlloc
>
(
aNewLen
)
;
}
void
TruncateLength
(
size_type
aNewLen
)
{
size_type
oldLen
=
Length
(
)
;
MOZ_ASSERT
(
aNewLen
<
=
oldLen
"
caller
should
use
SetLength
instead
"
)
;
RemoveElementsAt
(
aNewLen
oldLen
-
aNewLen
)
;
}
protected
:
template
<
typename
ActualAlloc
=
Alloc
>
typename
ActualAlloc
:
:
ResultType
EnsureLengthAtLeast
(
size_type
aMinLen
)
{
size_type
oldLen
=
Length
(
)
;
if
(
aMinLen
>
oldLen
)
{
return
ActualAlloc
:
:
ConvertBoolToResultType
(
!
!
InsertElementsAtInternal
<
ActualAlloc
>
(
oldLen
aMinLen
-
oldLen
)
)
;
}
return
ActualAlloc
:
:
ConvertBoolToResultType
(
true
)
;
}
public
:
[
[
nodiscard
]
]
bool
EnsureLengthAtLeast
(
size_type
aMinLen
const
mozilla
:
:
fallible_t
&
)
{
return
EnsureLengthAtLeast
<
FallibleAlloc
>
(
aMinLen
)
;
}
private
:
template
<
typename
ActualAlloc
>
elem_type
*
InsertElementsAtInternal
(
index_type
aIndex
size_type
aCount
)
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
InsertSlotsAt
<
ActualAlloc
>
(
aIndex
aCount
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
)
)
{
return
nullptr
;
}
elem_type
*
iter
=
Elements
(
)
+
aIndex
;
elem_type
*
iend
=
iter
+
aCount
;
for
(
;
iter
!
=
iend
;
+
+
iter
)
{
elem_traits
:
:
Construct
(
iter
)
;
}
return
Elements
(
)
+
aIndex
;
}
public
:
[
[
nodiscard
]
]
elem_type
*
InsertElementsAt
(
index_type
aIndex
size_type
aCount
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementsAtInternal
<
FallibleAlloc
>
(
aIndex
aCount
)
;
}
private
:
template
<
typename
ActualAlloc
class
Item
>
elem_type
*
InsertElementsAtInternal
(
index_type
aIndex
size_type
aCount
const
Item
&
aItem
)
;
public
:
template
<
class
Item
>
[
[
nodiscard
]
]
elem_type
*
InsertElementsAt
(
index_type
aIndex
size_type
aCount
const
Item
&
aItem
const
mozilla
:
:
fallible_t
&
)
{
return
InsertElementsAt
<
Item
FallibleAlloc
>
(
aIndex
aCount
aItem
)
;
}
void
Compact
(
)
{
ShrinkCapacity
(
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
}
template
<
class
Comparator
>
static
int
Compare
(
const
void
*
aE1
const
void
*
aE2
void
*
aData
)
{
const
Comparator
*
c
=
reinterpret_cast
<
const
Comparator
*
>
(
aData
)
;
const
elem_type
*
a
=
static_cast
<
const
elem_type
*
>
(
aE1
)
;
const
elem_type
*
b
=
static_cast
<
const
elem_type
*
>
(
aE2
)
;
return
c
-
>
Compare
(
*
a
*
b
)
;
}
template
<
class
Comparator
>
void
Sort
(
const
Comparator
&
aComp
)
{
:
:
detail
:
:
CompareWrapper
<
Comparator
elem_type
>
comp
(
aComp
)
;
NS_QuickSort
(
Elements
(
)
Length
(
)
sizeof
(
elem_type
)
Compare
<
decltype
(
comp
)
>
&
comp
)
;
}
void
Sort
(
)
{
Sort
(
nsDefaultComparator
<
elem_type
elem_type
>
(
)
)
;
}
void
Reverse
(
)
{
elem_type
*
elements
=
Elements
(
)
;
const
size_type
len
=
Length
(
)
;
for
(
index_type
i
=
0
iend
=
len
/
2
;
i
<
iend
;
+
+
i
)
{
std
:
:
swap
(
elements
[
i
]
elements
[
len
-
i
-
1
]
)
;
}
}
protected
:
using
base_type
:
:
Hdr
;
using
base_type
:
:
ShrinkCapacity
;
void
DestructRange
(
index_type
aStart
size_type
aCount
)
{
elem_type
*
iter
=
Elements
(
)
+
aStart
;
elem_type
*
iend
=
iter
+
aCount
;
for
(
;
iter
!
=
iend
;
+
+
iter
)
{
elem_traits
:
:
Destruct
(
iter
)
;
}
}
template
<
class
Item
>
void
AssignRange
(
index_type
aStart
size_type
aCount
const
Item
*
aValues
)
{
AssignRangeAlgorithm
<
std
:
:
is_trivially_copy_constructible_v
<
Item
>
std
:
:
is_same_v
<
Item
elem_type
>
>
:
:
implementation
(
Elements
(
)
aStart
aCount
aValues
)
;
}
}
;
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
ReplaceElementsAtInternal
(
index_type
aStart
size_type
aCount
const
Item
*
aArray
size_type
aArrayLen
)
-
>
elem_type
*
{
if
(
MOZ_UNLIKELY
(
aStart
>
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aStart
Length
(
)
)
;
}
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
Length
(
)
+
aArrayLen
-
aCount
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
DestructRange
(
aStart
aCount
)
;
this
-
>
template
ShiftData
<
ActualAlloc
>
(
aStart
aCount
aArrayLen
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
AssignRange
(
aStart
aArrayLen
aArray
)
;
return
Elements
(
)
+
aStart
;
}
template
<
typename
E
class
Alloc
>
void
nsTArray_Impl
<
E
Alloc
>
:
:
RemoveElementsAt
(
index_type
aStart
size_type
aCount
)
{
MOZ_ASSERT
(
aCount
=
=
0
|
|
aStart
<
Length
(
)
"
Invalid
aStart
index
"
)
;
mozilla
:
:
CheckedInt
<
index_type
>
rangeEnd
=
aStart
;
rangeEnd
+
=
aCount
;
if
(
MOZ_UNLIKELY
(
!
rangeEnd
.
isValid
(
)
|
|
rangeEnd
.
value
(
)
>
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aStart
Length
(
)
)
;
}
RemoveElementsAtUnsafe
(
aStart
aCount
)
;
}
template
<
typename
E
class
Alloc
>
void
nsTArray_Impl
<
E
Alloc
>
:
:
RemoveElementsAtUnsafe
(
index_type
aStart
size_type
aCount
)
{
DestructRange
(
aStart
aCount
)
;
this
-
>
template
ShiftData
<
InfallibleAlloc
>
(
aStart
aCount
0
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
}
template
<
typename
E
class
Alloc
>
void
nsTArray_Impl
<
E
Alloc
>
:
:
UnorderedRemoveElementsAt
(
index_type
aStart
size_type
aCount
)
{
MOZ_ASSERT
(
aCount
=
=
0
|
|
aStart
<
Length
(
)
"
Invalid
aStart
index
"
)
;
mozilla
:
:
CheckedInt
<
index_type
>
rangeEnd
=
aStart
;
rangeEnd
+
=
aCount
;
if
(
MOZ_UNLIKELY
(
!
rangeEnd
.
isValid
(
)
|
|
rangeEnd
.
value
(
)
>
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aStart
Length
(
)
)
;
}
DestructRange
(
aStart
aCount
)
;
this
-
>
template
SwapFromEnd
<
InfallibleAlloc
>
(
aStart
aCount
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
Predicate
>
void
nsTArray_Impl
<
E
Alloc
>
:
:
RemoveElementsBy
(
Predicate
aPredicate
)
{
if
(
base_type
:
:
mHdr
=
=
EmptyHdr
(
)
)
{
return
;
}
index_type
j
=
0
;
index_type
len
=
Length
(
)
;
for
(
index_type
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
aPredicate
(
Elements
(
)
[
i
]
)
)
{
elem_traits
:
:
Destruct
(
Elements
(
)
+
i
)
;
}
else
{
if
(
j
<
i
)
{
relocation_type
:
:
RelocateNonOverlappingRegion
(
Elements
(
)
+
j
Elements
(
)
+
i
1
sizeof
(
elem_type
)
)
;
}
+
+
j
;
}
}
base_type
:
:
mHdr
-
>
mLength
=
j
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
InsertElementsAtInternal
(
index_type
aIndex
size_type
aCount
const
Item
&
aItem
)
-
>
elem_type
*
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
InsertSlotsAt
<
ActualAlloc
>
(
aIndex
aCount
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
)
)
{
return
nullptr
;
}
elem_type
*
iter
=
Elements
(
)
+
aIndex
;
elem_type
*
iend
=
iter
+
aCount
;
for
(
;
iter
!
=
iend
;
+
+
iter
)
{
elem_traits
:
:
Construct
(
iter
aItem
)
;
}
return
Elements
(
)
+
aIndex
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
InsertElementAtInternal
(
index_type
aIndex
)
-
>
elem_type
*
{
if
(
MOZ_UNLIKELY
(
aIndex
>
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aIndex
Length
(
)
)
;
}
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
Length
(
)
+
1
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
this
-
>
template
ShiftData
<
ActualAlloc
>
(
aIndex
0
1
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
elem_type
*
elem
=
Elements
(
)
+
aIndex
;
elem_traits
:
:
Construct
(
elem
)
;
return
elem
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
InsertElementAtInternal
(
index_type
aIndex
Item
&
&
aItem
)
-
>
elem_type
*
{
if
(
MOZ_UNLIKELY
(
aIndex
>
Length
(
)
)
)
{
InvalidArrayIndex_CRASH
(
aIndex
Length
(
)
)
;
}
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
Length
(
)
+
1
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
this
-
>
template
ShiftData
<
ActualAlloc
>
(
aIndex
0
1
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
elem_type
*
elem
=
Elements
(
)
+
aIndex
;
elem_traits
:
:
Construct
(
elem
std
:
:
forward
<
Item
>
(
aItem
)
)
;
return
elem
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
AppendElementsInternal
(
const
Item
*
aArray
size_type
aArrayLen
)
-
>
elem_type
*
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
ExtendCapacity
<
ActualAlloc
>
(
Length
(
)
aArrayLen
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
index_type
len
=
Length
(
)
;
AssignRange
(
len
aArrayLen
aArray
)
;
this
-
>
IncrementLength
(
aArrayLen
)
;
return
Elements
(
)
+
len
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
class
Allocator
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
AppendElementsInternal
(
nsTArray_Impl
<
Item
Allocator
>
&
&
aArray
)
-
>
elem_type
*
{
if
constexpr
(
std
:
:
is_same_v
<
Alloc
Allocator
>
)
{
MOZ_ASSERT
(
&
aArray
!
=
this
"
argument
must
be
different
aArray
"
)
;
}
if
(
Length
(
)
=
=
0
)
{
SwapElements
(
aArray
)
;
return
Elements
(
)
;
}
index_type
len
=
Length
(
)
;
index_type
otherLen
=
aArray
.
Length
(
)
;
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
ExtendCapacity
<
ActualAlloc
>
(
len
otherLen
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
relocation_type
:
:
RelocateNonOverlappingRegion
(
Elements
(
)
+
len
aArray
.
Elements
(
)
otherLen
sizeof
(
elem_type
)
)
;
this
-
>
IncrementLength
(
otherLen
)
;
aArray
.
template
ShiftData
<
ActualAlloc
>
(
0
otherLen
0
sizeof
(
elem_type
)
MOZ_ALIGNOF
(
elem_type
)
)
;
return
Elements
(
)
+
len
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
Item
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
AppendElementInternal
(
Item
&
&
aItem
)
-
>
elem_type
*
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
Length
(
)
+
1
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
elem_type
*
elem
=
Elements
(
)
+
Length
(
)
;
elem_traits
:
:
Construct
(
elem
std
:
:
forward
<
Item
>
(
aItem
)
)
;
this
-
>
mHdr
-
>
mLength
+
=
1
;
return
elem
;
}
template
<
typename
E
class
Alloc
>
template
<
typename
ActualAlloc
class
.
.
.
Args
>
auto
nsTArray_Impl
<
E
Alloc
>
:
:
EmplaceBackInternal
(
Args
&
&
.
.
.
aArgs
)
-
>
elem_type
*
{
if
(
!
ActualAlloc
:
:
Successful
(
this
-
>
template
EnsureCapacity
<
ActualAlloc
>
(
Length
(
)
+
1
sizeof
(
elem_type
)
)
)
)
{
return
nullptr
;
}
elem_type
*
elem
=
Elements
(
)
+
Length
(
)
;
elem_traits
:
:
Emplace
(
elem
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
this
-
>
mHdr
-
>
mLength
+
=
1
;
return
elem
;
}
template
<
typename
E
typename
Alloc
>
inline
void
ImplCycleCollectionUnlink
(
nsTArray_Impl
<
E
Alloc
>
&
aField
)
{
aField
.
Clear
(
)
;
}
template
<
typename
E
typename
Alloc
>
inline
void
ImplCycleCollectionTraverse
(
nsCycleCollectionTraversalCallback
&
aCallback
nsTArray_Impl
<
E
Alloc
>
&
aField
const
char
*
aName
uint32_t
aFlags
=
0
)
{
aFlags
|
=
CycleCollectionEdgeNameArrayFlag
;
size_t
length
=
aField
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
ImplCycleCollectionTraverse
(
aCallback
aField
[
i
]
aName
aFlags
)
;
}
}
template
<
class
E
>
class
nsTArray
:
public
nsTArray_Impl
<
E
nsTArrayInfallibleAllocator
>
{
public
:
using
InfallibleAlloc
=
nsTArrayInfallibleAllocator
;
using
base_type
=
nsTArray_Impl
<
E
InfallibleAlloc
>
;
using
self_type
=
nsTArray
<
E
>
;
using
typename
base_type
:
:
elem_type
;
using
typename
base_type
:
:
index_type
;
using
typename
base_type
:
:
size_type
;
nsTArray
(
)
{
}
explicit
nsTArray
(
size_type
aCapacity
)
:
base_type
(
aCapacity
)
{
}
MOZ_IMPLICIT
nsTArray
(
std
:
:
initializer_list
<
E
>
aIL
)
{
AppendElements
(
aIL
.
begin
(
)
aIL
.
size
(
)
)
;
}
template
<
class
Item
>
nsTArray
(
const
Item
*
aArray
size_type
aArrayLen
)
{
AppendElements
(
aArray
aArrayLen
)
;
}
template
<
class
Item
>
explicit
nsTArray
(
mozilla
:
:
Span
<
Item
>
aSpan
)
{
AppendElements
(
aSpan
)
;
}
template
<
class
Allocator
>
explicit
nsTArray
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
:
base_type
(
aOther
)
{
}
template
<
class
Allocator
>
MOZ_IMPLICIT
nsTArray
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
:
base_type
(
std
:
:
move
(
aOther
)
)
{
}
template
<
class
Allocator
>
self_type
&
operator
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
base_type
:
:
operator
=
(
aOther
)
;
return
*
this
;
}
template
<
class
Allocator
>
self_type
&
operator
=
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
base_type
:
:
operator
=
(
std
:
:
move
(
aOther
)
)
;
return
*
this
;
}
using
base_type
:
:
AppendElement
;
using
base_type
:
:
AppendElements
;
using
base_type
:
:
EmplaceBack
;
using
base_type
:
:
EnsureLengthAtLeast
;
using
base_type
:
:
InsertElementAt
;
using
base_type
:
:
InsertElementsAt
;
using
base_type
:
:
InsertElementSorted
;
using
base_type
:
:
ReplaceElementsAt
;
using
base_type
:
:
SetCapacity
;
using
base_type
:
:
SetLength
;
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElements
(
const
Item
*
aArray
size_type
aArrayLen
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
aArray
aArrayLen
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElements
(
mozilla
:
:
Span
<
Item
>
aSpan
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
aSpan
.
Elements
(
)
aSpan
.
Length
(
)
)
)
;
}
template
<
class
Item
class
Allocator
>
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElements
(
const
nsTArray_Impl
<
Item
Allocator
>
&
aArray
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
aArray
.
Elements
(
)
aArray
.
Length
(
)
)
)
;
}
template
<
class
Item
class
Allocator
>
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElements
(
nsTArray_Impl
<
Item
Allocator
>
&
&
aArray
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
std
:
:
move
(
aArray
)
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElement
(
Item
&
&
aItem
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementInternal
<
InfallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
)
)
;
}
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElements
(
size_type
aCount
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
aCount
)
)
;
}
mozilla
:
:
NotNull
<
elem_type
*
>
AppendElement
(
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
AppendElementsInternal
<
InfallibleAlloc
>
(
1
)
)
;
}
self_type
Clone
(
)
const
{
self_type
result
;
result
.
Assign
(
*
this
)
;
return
result
;
}
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementsAt
(
index_type
aIndex
size_type
aCount
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementsAtInternal
<
InfallibleAlloc
>
(
aIndex
aCount
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementsAt
(
index_type
aIndex
size_type
aCount
const
Item
&
aItem
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementsAtInternal
<
InfallibleAlloc
>
(
aIndex
aCount
aItem
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementsAt
(
index_type
aIndex
const
Item
*
aArray
size_type
aArrayLen
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
ReplaceElementsAtInternal
<
InfallibleAlloc
>
(
aIndex
0
aArray
aArrayLen
)
)
;
}
template
<
class
Item
class
Allocator
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementsAt
(
index_type
aIndex
const
nsTArray_Impl
<
Item
Allocator
>
&
aArray
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
ReplaceElementsAtInternal
<
InfallibleAlloc
>
(
aIndex
0
aArray
.
Elements
(
)
aArray
.
Length
(
)
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementsAt
(
index_type
aIndex
mozilla
:
:
Span
<
Item
>
aSpan
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
ReplaceElementsAtInternal
<
InfallibleAlloc
>
(
aIndex
0
aSpan
.
Elements
(
)
aSpan
.
Length
(
)
)
)
;
}
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementAt
(
index_type
aIndex
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementAtInternal
<
InfallibleAlloc
>
(
aIndex
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementAt
(
index_type
aIndex
Item
&
&
aItem
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementAtInternal
<
InfallibleAlloc
>
(
aIndex
std
:
:
forward
<
Item
>
(
aItem
)
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
Item
*
aArray
size_type
aArrayLen
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
ReplaceElementsAtInternal
<
InfallibleAlloc
>
(
aStart
aCount
aArray
aArrayLen
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
nsTArray
<
Item
>
&
aArray
)
{
return
ReplaceElementsAt
(
aStart
aCount
aArray
.
Elements
(
)
aArray
.
Length
(
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
mozilla
:
:
Span
<
Item
>
aSpan
)
{
return
ReplaceElementsAt
(
aStart
aCount
aSpan
.
Elements
(
)
aSpan
.
Length
(
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
ReplaceElementsAt
(
index_type
aStart
size_type
aCount
const
Item
&
aItem
)
{
return
ReplaceElementsAt
(
aStart
aCount
&
aItem
1
)
;
}
template
<
class
Item
class
Comparator
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementSorted
(
Item
&
&
aItem
const
Comparator
&
aComp
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementSortedInternal
<
InfallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
aComp
)
)
;
}
template
<
class
Item
>
mozilla
:
:
NotNull
<
elem_type
*
>
InsertElementSorted
(
Item
&
&
aItem
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
InsertElementSortedInternal
<
InfallibleAlloc
>
(
std
:
:
forward
<
Item
>
(
aItem
)
nsDefaultComparator
<
elem_type
Item
>
{
}
)
)
;
}
template
<
class
.
.
.
Args
>
mozilla
:
:
NotNull
<
elem_type
*
>
EmplaceBack
(
Args
&
&
.
.
.
aArgs
)
{
return
mozilla
:
:
WrapNotNullUnchecked
(
this
-
>
template
EmplaceBackInternal
<
InfallibleAlloc
Args
.
.
.
>
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
}
;
template
<
class
E
>
class
CopyableTArray
:
public
nsTArray
<
E
>
{
public
:
using
nsTArray
<
E
>
:
:
nsTArray
;
CopyableTArray
(
const
CopyableTArray
&
aOther
)
:
nsTArray
<
E
>
(
)
{
this
-
>
Assign
(
aOther
)
;
}
CopyableTArray
&
operator
=
(
const
CopyableTArray
&
aOther
)
{
if
(
this
!
=
&
aOther
)
{
this
-
>
Assign
(
aOther
)
;
}
return
*
this
;
}
template
<
typename
Allocator
>
MOZ_IMPLICIT
CopyableTArray
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
this
-
>
Assign
(
aOther
)
;
}
template
<
typename
Allocator
>
CopyableTArray
&
operator
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
if
constexpr
(
std
:
:
is_same_v
<
Allocator
nsTArrayInfallibleAllocator
>
)
{
if
(
this
=
=
&
aOther
)
{
return
*
this
;
}
}
this
-
>
Assign
(
aOther
)
;
return
*
this
;
}
template
<
typename
Allocator
>
MOZ_IMPLICIT
CopyableTArray
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
:
nsTArray
<
E
>
{
std
:
:
move
(
aOther
)
}
{
}
template
<
typename
Allocator
>
CopyableTArray
&
operator
=
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
static_cast
<
nsTArray
<
E
>
&
>
(
*
this
)
=
std
:
:
move
(
aOther
)
;
return
*
this
;
}
CopyableTArray
(
CopyableTArray
&
&
)
=
default
;
CopyableTArray
&
operator
=
(
CopyableTArray
&
&
)
=
default
;
}
;
template
<
class
E
>
class
FallibleTArray
:
public
nsTArray_Impl
<
E
nsTArrayFallibleAllocator
>
{
public
:
typedef
nsTArray_Impl
<
E
nsTArrayFallibleAllocator
>
base_type
;
typedef
FallibleTArray
<
E
>
self_type
;
typedef
typename
base_type
:
:
size_type
size_type
;
FallibleTArray
(
)
=
default
;
explicit
FallibleTArray
(
size_type
aCapacity
)
:
base_type
(
aCapacity
)
{
}
template
<
class
Allocator
>
explicit
FallibleTArray
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
:
base_type
(
aOther
)
{
}
template
<
class
Allocator
>
explicit
FallibleTArray
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
:
base_type
(
std
:
:
move
(
aOther
)
)
{
}
template
<
class
Allocator
>
self_type
&
operator
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
base_type
:
:
operator
=
(
aOther
)
;
return
*
this
;
}
template
<
class
Allocator
>
self_type
&
operator
=
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
base_type
:
:
operator
=
(
std
:
:
move
(
aOther
)
)
;
return
*
this
;
}
}
;
template
<
class
E
size_t
N
>
class
MOZ_NON_MEMMOVABLE
AutoTArray
:
public
nsTArray
<
E
>
{
static_assert
(
N
!
=
0
"
AutoTArray
<
E
0
>
should
be
specialized
"
)
;
public
:
typedef
AutoTArray
<
E
N
>
self_type
;
typedef
nsTArray
<
E
>
base_type
;
typedef
typename
base_type
:
:
Header
Header
;
typedef
typename
base_type
:
:
elem_type
elem_type
;
AutoTArray
(
)
:
mAlign
(
)
{
Init
(
)
;
}
AutoTArray
(
self_type
&
&
aOther
)
:
nsTArray
<
E
>
(
)
{
Init
(
)
;
this
-
>
SwapElements
(
aOther
)
;
}
explicit
AutoTArray
(
base_type
&
&
aOther
)
:
mAlign
(
)
{
Init
(
)
;
this
-
>
SwapElements
(
aOther
)
;
}
template
<
typename
Allocator
>
explicit
AutoTArray
(
nsTArray_Impl
<
elem_type
Allocator
>
&
&
aOther
)
{
Init
(
)
;
this
-
>
SwapElements
(
aOther
)
;
}
MOZ_IMPLICIT
AutoTArray
(
std
:
:
initializer_list
<
E
>
aIL
)
:
mAlign
(
)
{
Init
(
)
;
this
-
>
AppendElements
(
aIL
.
begin
(
)
aIL
.
size
(
)
)
;
}
self_type
&
operator
=
(
self_type
&
&
aOther
)
{
base_type
:
:
operator
=
(
std
:
:
move
(
aOther
)
)
;
return
*
this
;
}
template
<
typename
Allocator
>
self_type
&
operator
=
(
nsTArray_Impl
<
elem_type
Allocator
>
&
&
aOther
)
{
base_type
:
:
operator
=
(
std
:
:
move
(
aOther
)
)
;
return
*
this
;
}
self_type
Clone
(
)
const
{
self_type
result
;
result
.
Assign
(
*
this
)
;
return
result
;
}
private
:
template
<
class
Allocator
class
RelocationStrategy
>
friend
class
nsTArray_base
;
void
Init
(
)
{
static_assert
(
MOZ_ALIGNOF
(
elem_type
)
<
=
8
"
can
'
t
handle
alignments
greater
than
8
"
"
see
nsTArray_base
:
:
UsesAutoArrayBuffer
(
)
"
)
;
Header
*
*
phdr
=
base_type
:
:
PtrToHdr
(
)
;
*
phdr
=
reinterpret_cast
<
Header
*
>
(
&
mAutoBuf
)
;
(
*
phdr
)
-
>
mLength
=
0
;
(
*
phdr
)
-
>
mCapacity
=
N
;
(
*
phdr
)
-
>
mIsAutoArray
=
1
;
MOZ_ASSERT
(
base_type
:
:
GetAutoArrayBuffer
(
MOZ_ALIGNOF
(
elem_type
)
)
=
=
reinterpret_cast
<
Header
*
>
(
&
mAutoBuf
)
"
GetAutoArrayBuffer
needs
to
be
fixed
"
)
;
}
union
{
char
mAutoBuf
[
sizeof
(
nsTArrayHeader
)
+
N
*
sizeof
(
elem_type
)
]
;
mozilla
:
:
AlignedElem
<
(
MOZ_ALIGNOF
(
Header
)
>
MOZ_ALIGNOF
(
elem_type
)
)
?
MOZ_ALIGNOF
(
Header
)
:
MOZ_ALIGNOF
(
elem_type
)
>
mAlign
;
}
;
}
;
template
<
class
E
>
class
AutoTArray
<
E
0
>
:
public
nsTArray
<
E
>
{
using
nsTArray
<
E
>
:
:
nsTArray
;
}
;
template
<
class
E
size_t
N
>
struct
nsTArray_RelocationStrategy
<
AutoTArray
<
E
N
>
>
{
using
Type
=
nsTArray_RelocateUsingMoveConstructor
<
AutoTArray
<
E
N
>
>
;
}
;
template
<
class
E
size_t
N
>
class
CopyableAutoTArray
:
public
AutoTArray
<
E
N
>
{
public
:
using
AutoTArray
<
E
N
>
:
:
AutoTArray
;
CopyableAutoTArray
(
const
CopyableAutoTArray
&
aOther
)
:
AutoTArray
<
E
N
>
(
)
{
this
-
>
Assign
(
aOther
)
;
}
CopyableAutoTArray
&
operator
=
(
const
CopyableAutoTArray
&
aOther
)
{
if
(
this
!
=
&
aOther
)
{
this
-
>
Assign
(
aOther
)
;
}
return
*
this
;
}
template
<
typename
Allocator
>
MOZ_IMPLICIT
CopyableAutoTArray
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
this
-
>
Assign
(
aOther
)
;
}
template
<
typename
Allocator
>
CopyableAutoTArray
&
operator
=
(
const
nsTArray_Impl
<
E
Allocator
>
&
aOther
)
{
if
constexpr
(
std
:
:
is_same_v
<
Allocator
nsTArrayInfallibleAllocator
>
)
{
if
(
this
=
=
&
aOther
)
{
return
*
this
;
}
}
this
-
>
Assign
(
aOther
)
;
return
*
this
;
}
template
<
typename
Allocator
>
MOZ_IMPLICIT
CopyableAutoTArray
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
:
AutoTArray
<
E
N
>
{
std
:
:
move
(
aOther
)
}
{
}
template
<
typename
Allocator
>
CopyableAutoTArray
&
operator
=
(
nsTArray_Impl
<
E
Allocator
>
&
&
aOther
)
{
static_cast
<
AutoTArray
<
E
N
>
&
>
(
*
this
)
=
std
:
:
move
(
aOther
)
;
return
*
this
;
}
CopyableAutoTArray
(
CopyableAutoTArray
&
&
)
=
default
;
CopyableAutoTArray
&
operator
=
(
CopyableAutoTArray
&
&
)
=
default
;
}
;
namespace
mozilla
{
template
<
class
ElementType
class
TArrayAlloc
>
Span
<
ElementType
>
MakeSpan
(
nsTArray_Impl
<
ElementType
TArrayAlloc
>
&
aTArray
)
{
return
aTArray
;
}
template
<
class
ElementType
class
TArrayAlloc
>
Span
<
const
ElementType
>
MakeSpan
(
const
nsTArray_Impl
<
ElementType
TArrayAlloc
>
&
aTArray
)
{
return
aTArray
;
}
template
<
typename
T
>
class
nsTArrayBackInserter
:
public
std
:
:
iterator
<
std
:
:
output_iterator_tag
void
void
void
void
>
{
nsTArray
<
T
>
*
mArray
;
public
:
explicit
nsTArrayBackInserter
(
nsTArray
<
T
>
&
aArray
)
:
mArray
{
&
aArray
}
{
}
nsTArrayBackInserter
&
operator
=
(
const
T
&
aValue
)
{
mArray
-
>
AppendElement
(
aValue
)
;
return
*
this
;
}
nsTArrayBackInserter
&
operator
=
(
T
&
&
aValue
)
{
mArray
-
>
AppendElement
(
std
:
:
move
(
aValue
)
)
;
return
*
this
;
}
nsTArrayBackInserter
&
operator
*
(
)
{
return
*
this
;
}
nsTArrayBackInserter
&
operator
+
+
(
)
{
return
*
this
;
}
nsTArrayBackInserter
&
operator
+
+
(
int
)
{
return
*
this
;
}
}
;
template
<
typename
T
>
auto
MakeBackInserter
(
nsTArray
<
T
>
&
aArray
)
{
return
nsTArrayBackInserter
<
T
>
{
aArray
}
;
}
template
<
typename
E
class
Alloc
>
Span
(
nsTArray_Impl
<
E
Alloc
>
&
)
-
>
Span
<
E
>
;
template
<
typename
E
class
Alloc
>
Span
(
const
nsTArray_Impl
<
E
Alloc
>
&
)
-
>
Span
<
const
E
>
;
}
template
<
class
E
class
Alloc
>
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
nsTArray_Impl
<
E
Alloc
>
&
aTArray
)
{
return
aOut
<
<
mozilla
:
:
MakeSpan
(
aTArray
)
;
}
static_assert
(
sizeof
(
AutoTArray
<
uint32_t
2
>
)
=
=
sizeof
(
void
*
)
+
sizeof
(
nsTArrayHeader
)
+
sizeof
(
uint32_t
)
*
2
"
AutoTArray
shouldn
'
t
contain
any
extra
padding
"
"
see
the
comment
"
)
;
#
include
"
nsTArray
-
inl
.
h
"
#
endif
