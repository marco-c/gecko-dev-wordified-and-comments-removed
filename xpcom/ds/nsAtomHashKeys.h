#
ifndef
nsAtomHashKeys_h
#
define
nsAtomHashKeys_h
#
include
"
nsAtom
.
h
"
#
include
"
nsHashKeys
.
h
"
struct
nsAtomHashKey
:
public
nsRefPtrHashKey
<
nsAtom
>
{
using
nsRefPtrHashKey
:
:
nsRefPtrHashKey
;
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
MOZ_LIKELY
(
aKey
)
?
aKey
-
>
hash
(
)
:
0
;
}
}
;
struct
nsWeakAtomHashKey
:
public
nsPtrHashKey
<
nsAtom
>
{
using
nsPtrHashKey
:
:
nsPtrHashKey
;
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
nsAtomHashKey
:
:
HashKey
(
aKey
)
;
}
}
;
namespace
mozilla
{
struct
AtomHashKey
{
RefPtr
<
nsAtom
>
mKey
;
explicit
AtomHashKey
(
nsAtom
*
aAtom
)
:
mKey
(
aAtom
)
{
}
using
Lookup
=
nsAtom
*
;
static
HashNumber
hash
(
const
Lookup
&
aKey
)
{
return
aKey
-
>
hash
(
)
;
}
static
bool
match
(
const
AtomHashKey
&
aFirst
const
Lookup
&
aSecond
)
{
return
aFirst
.
mKey
=
=
aSecond
;
}
}
;
}
#
endif
