#
ifndef
nsHashPropertyBag_h___
#
define
nsHashPropertyBag_h___
#
include
"
nsIVariant
.
h
"
#
include
"
nsIWritablePropertyBag
.
h
"
#
include
"
nsIWritablePropertyBag2
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
class
nsHashPropertyBagBase
:
public
nsIWritablePropertyBag
public
nsIWritablePropertyBag2
{
public
:
nsHashPropertyBagBase
(
)
=
default
;
void
CopyFrom
(
const
nsHashPropertyBagBase
*
aOther
)
;
void
CopyFrom
(
nsIPropertyBag
*
aOther
)
;
static
void
CopyFrom
(
nsIWritablePropertyBag
*
aTo
nsIPropertyBag
*
aFrom
)
;
NS_DECL_NSIPROPERTYBAG
NS_DECL_NSIPROPERTYBAG2
NS_DECL_NSIWRITABLEPROPERTYBAG
NS_DECL_NSIWRITABLEPROPERTYBAG2
protected
:
nsInterfaceHashtable
<
nsStringHashKey
nsIVariant
>
mPropertyHash
;
}
;
class
nsHashPropertyBag
:
public
nsHashPropertyBagBase
{
public
:
nsHashPropertyBag
(
)
=
default
;
NS_DECL_THREADSAFE_ISUPPORTS
protected
:
virtual
~
nsHashPropertyBag
(
)
;
}
;
class
nsHashPropertyBagCC
final
:
public
nsHashPropertyBagBase
{
public
:
nsHashPropertyBagCC
(
)
=
default
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
nsHashPropertyBagCC
nsIWritablePropertyBag
)
protected
:
virtual
~
nsHashPropertyBagCC
(
)
=
default
;
}
;
inline
nsISupports
*
ToSupports
(
nsHashPropertyBagBase
*
aPropertyBag
)
{
return
static_cast
<
nsIWritablePropertyBag
*
>
(
aPropertyBag
)
;
}
#
endif
