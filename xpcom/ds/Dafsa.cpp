#
include
"
Dafsa
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsAString
.
h
"
const
int
mozilla
:
:
Dafsa
:
:
kKeyNotFound
=
-
1
;
static
bool
GetNextOffset
(
const
unsigned
char
*
*
pos
const
unsigned
char
*
end
const
unsigned
char
*
*
offset
)
{
if
(
*
pos
=
=
end
)
return
false
;
MOZ_ASSERT
(
*
pos
+
2
<
end
)
;
size_t
bytes_consumed
;
switch
(
*
*
pos
&
0x60
)
{
case
0x60
:
*
offset
+
=
(
(
(
*
pos
)
[
0
]
&
0x1F
)
<
<
16
)
|
(
(
*
pos
)
[
1
]
<
<
8
)
|
(
*
pos
)
[
2
]
;
bytes_consumed
=
3
;
break
;
case
0x40
:
*
offset
+
=
(
(
(
*
pos
)
[
0
]
&
0x1F
)
<
<
8
)
|
(
*
pos
)
[
1
]
;
bytes_consumed
=
2
;
break
;
default
:
*
offset
+
=
(
*
pos
)
[
0
]
&
0x3F
;
bytes_consumed
=
1
;
}
if
(
(
*
*
pos
&
0x80
)
!
=
0
)
{
*
pos
=
end
;
}
else
{
*
pos
+
=
bytes_consumed
;
}
return
true
;
}
static
bool
IsEOL
(
const
unsigned
char
*
offset
const
unsigned
char
*
end
)
{
MOZ_ASSERT
(
offset
<
end
)
;
return
(
*
offset
&
0x80
)
!
=
0
;
}
static
bool
IsMatch
(
const
unsigned
char
*
offset
const
unsigned
char
*
end
const
char
*
key
)
{
MOZ_ASSERT
(
offset
<
end
)
;
return
*
offset
=
=
*
key
;
}
static
bool
IsEndCharMatch
(
const
unsigned
char
*
offset
const
unsigned
char
*
end
const
char
*
key
)
{
MOZ_ASSERT
(
offset
<
end
)
;
return
*
offset
=
=
(
*
key
|
0x80
)
;
}
static
bool
GetReturnValue
(
const
unsigned
char
*
offset
const
unsigned
char
*
end
int
*
return_value
)
{
MOZ_ASSERT
(
offset
<
end
)
;
if
(
(
*
offset
&
0xE0
)
=
=
0x80
)
{
*
return_value
=
*
offset
&
0x0F
;
return
true
;
}
return
false
;
}
static
int
LookupString
(
const
unsigned
char
*
graph
size_t
length
const
char
*
key
size_t
key_length
)
{
const
unsigned
char
*
pos
=
graph
;
const
unsigned
char
*
end
=
graph
+
length
;
const
unsigned
char
*
offset
=
pos
;
const
char
*
key_end
=
key
+
key_length
;
while
(
GetNextOffset
(
&
pos
end
&
offset
)
)
{
bool
did_consume
=
false
;
if
(
key
!
=
key_end
&
&
!
IsEOL
(
offset
end
)
)
{
if
(
!
IsMatch
(
offset
end
key
)
)
continue
;
did_consume
=
true
;
+
+
offset
;
+
+
key
;
while
(
!
IsEOL
(
offset
end
)
&
&
key
!
=
key_end
)
{
if
(
!
IsMatch
(
offset
end
key
)
)
return
mozilla
:
:
Dafsa
:
:
kKeyNotFound
;
+
+
key
;
+
+
offset
;
}
}
if
(
key
=
=
key_end
)
{
int
return_value
;
if
(
GetReturnValue
(
offset
end
&
return_value
)
)
return
return_value
;
if
(
did_consume
)
return
mozilla
:
:
Dafsa
:
:
kKeyNotFound
;
continue
;
}
if
(
!
IsEndCharMatch
(
offset
end
key
)
)
{
if
(
did_consume
)
return
mozilla
:
:
Dafsa
:
:
kKeyNotFound
;
continue
;
}
+
+
key
;
pos
=
+
+
offset
;
}
return
mozilla
:
:
Dafsa
:
:
kKeyNotFound
;
}
namespace
mozilla
{
int
Dafsa
:
:
Lookup
(
const
nsACString
&
aKey
)
const
{
return
LookupString
(
mData
.
Elements
(
)
mData
.
Length
(
)
aKey
.
BeginReading
(
)
aKey
.
Length
(
)
)
;
}
}
