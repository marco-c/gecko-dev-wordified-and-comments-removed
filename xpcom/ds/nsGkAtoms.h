#
ifndef
nsGkAtoms_h___
#
define
nsGkAtoms_h___
#
include
"
nsAtom
.
h
"
#
define
DEFINE_STATIC_ATOM_SUBCLASS
(
name_
)
\
class
name_
:
public
nsStaticAtom
\
{
\
public
:
\
constexpr
name_
(
const
char16_t
*
aStr
uint32_t
aLength
\
uint32_t
aHash
uint32_t
aOffset
)
\
:
nsStaticAtom
(
aStr
aLength
aHash
aOffset
)
{
}
\
}
;
DEFINE_STATIC_ATOM_SUBCLASS
(
nsICSSAnonBoxPseudo
)
DEFINE_STATIC_ATOM_SUBCLASS
(
nsICSSPseudoElement
)
#
undef
DEFINE_STATIC_ATOM_SUBCLASS
namespace
mozilla
{
namespace
detail
{
struct
GkAtoms
{
#
define
GK_ATOM
(
name_
value_
hash_
type_
atom_type_
)
\
const
char16_t
name_
#
#
_string
[
sizeof
(
value_
)
]
;
#
include
"
nsGkAtomList
.
h
"
#
undef
GK_ATOM
enum
class
Atoms
{
#
define
GK_ATOM
(
name_
value_
hash_
type_
atom_type_
)
\
name_
#
include
"
nsGkAtomList
.
h
"
#
undef
GK_ATOM
AtomsCount
}
;
const
nsStaticAtom
mAtoms
[
static_cast
<
size_t
>
(
Atoms
:
:
AtomsCount
)
]
;
}
;
}
}
class
nsGkAtoms
{
private
:
static
const
nsStaticAtom
*
const
sAtoms
;
static
constexpr
size_t
sAtomsLen
=
static_cast
<
size_t
>
(
mozilla
:
:
detail
:
:
GkAtoms
:
:
Atoms
:
:
AtomsCount
)
;
public
:
static
void
RegisterStaticAtoms
(
)
;
static
nsStaticAtom
*
GetAtomByIndex
(
size_t
aIndex
)
{
MOZ_ASSERT
(
aIndex
<
sAtomsLen
)
;
return
const_cast
<
nsStaticAtom
*
>
(
&
sAtoms
[
aIndex
]
)
;
}
#
define
GK_ATOM
(
name_
value_
hash_
type_
atom_type_
)
\
static
type_
*
name_
;
#
include
"
nsGkAtomList
.
h
"
#
undef
GK_ATOM
}
;
#
endif
