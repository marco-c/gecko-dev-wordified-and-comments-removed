#
ifndef
mozilla_SimpleEnumerator_h
#
define
mozilla_SimpleEnumerator_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
namespace
mozilla
{
template
<
typename
T
>
class
SimpleEnumerator
final
{
public
:
explicit
SimpleEnumerator
(
nsISimpleEnumerator
*
aEnum
)
:
mEnum
(
aEnum
)
{
}
class
Entry
{
public
:
explicit
Entry
(
T
*
aPtr
)
:
mPtr
(
aPtr
)
{
}
explicit
Entry
(
nsISimpleEnumerator
&
aEnum
)
:
mEnum
(
&
aEnum
)
{
+
+
*
this
;
}
const
nsCOMPtr
<
T
>
&
operator
*
(
)
{
MOZ_ASSERT
(
mPtr
)
;
return
mPtr
;
}
Entry
&
operator
+
+
(
)
{
MOZ_ASSERT
(
mEnum
)
;
nsCOMPtr
<
nsISupports
>
next
;
if
(
NS_SUCCEEDED
(
mEnum
-
>
GetNext
(
getter_AddRefs
(
next
)
)
)
)
{
mPtr
=
do_QueryInterface
(
next
)
;
MOZ_ASSERT
(
mPtr
)
;
}
else
{
mPtr
=
nullptr
;
}
return
*
this
;
}
bool
operator
!
=
(
const
Entry
&
aOther
)
const
{
return
mPtr
!
=
aOther
.
mPtr
;
}
private
:
nsCOMPtr
<
T
>
mPtr
;
nsCOMPtr
<
nsISimpleEnumerator
>
mEnum
;
}
;
Entry
begin
(
)
{
return
Entry
(
*
mEnum
)
;
}
Entry
end
(
)
{
return
Entry
(
nullptr
)
;
}
private
:
nsCOMPtr
<
nsISimpleEnumerator
>
mEnum
;
}
;
}
#
endif
