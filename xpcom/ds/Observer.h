#
ifndef
mozilla_Observer_h
#
define
mozilla_Observer_h
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
template
<
class
T
>
class
Observer
{
public
:
virtual
~
Observer
(
)
{
}
virtual
void
Notify
(
const
T
&
aParam
)
=
0
;
}
;
template
<
class
T
>
class
ObserverList
{
public
:
void
AddObserver
(
Observer
<
T
>
*
aObserver
)
{
mObservers
.
AppendElement
(
aObserver
)
;
}
bool
RemoveObserver
(
Observer
<
T
>
*
aObserver
)
{
if
(
mObservers
.
RemoveElement
(
aObserver
)
)
{
auto
i
=
mBroadcastCopy
.
IndexOf
(
aObserver
)
;
MOZ_ASSERT
(
i
!
=
mBroadcastCopy
.
NoIndex
)
;
mBroadcastCopy
[
i
]
=
nullptr
;
return
true
;
}
return
false
;
}
uint32_t
Length
(
)
{
return
mObservers
.
Length
(
)
;
}
void
Broadcast
(
const
T
&
aParam
)
{
MOZ_ASSERT
(
mBroadcastCopy
.
IsEmpty
(
)
)
;
mBroadcastCopy
=
mObservers
;
uint32_t
size
=
mBroadcastCopy
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
size
;
+
+
i
)
{
if
(
mBroadcastCopy
[
i
]
)
{
mBroadcastCopy
[
i
]
-
>
Notify
(
aParam
)
;
}
}
mBroadcastCopy
.
Clear
(
)
;
}
protected
:
nsTArray
<
Observer
<
T
>
*
>
mObservers
;
nsTArray
<
Observer
<
T
>
*
>
mBroadcastCopy
;
}
;
}
#
endif
