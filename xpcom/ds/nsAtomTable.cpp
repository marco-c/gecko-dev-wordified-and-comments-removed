#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsAtomTable
.
h
"
#
include
"
nsStaticAtom
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
using
namespace
mozilla
;
class
CheckStaticAtomSizes
{
CheckStaticAtomSizes
(
)
{
static_assert
(
(
sizeof
(
nsFakeStringBuffer
<
1
>
(
)
.
mRefCnt
)
=
=
sizeof
(
nsStringBuffer
(
)
.
mRefCount
)
)
&
&
(
sizeof
(
nsFakeStringBuffer
<
1
>
(
)
.
mSize
)
=
=
sizeof
(
nsStringBuffer
(
)
.
mStorageSize
)
)
&
&
(
offsetof
(
nsFakeStringBuffer
<
1
>
mRefCnt
)
=
=
offsetof
(
nsStringBuffer
mRefCount
)
)
&
&
(
offsetof
(
nsFakeStringBuffer
<
1
>
mSize
)
=
=
offsetof
(
nsStringBuffer
mStorageSize
)
)
&
&
(
offsetof
(
nsFakeStringBuffer
<
1
>
mStringData
)
=
=
sizeof
(
nsStringBuffer
)
)
"
mocked
-
up
strings
'
representations
should
be
compatible
"
)
;
}
}
;
enum
class
GCKind
{
RegularOperation
Shutdown
}
;
class
nsAtomFriend
{
public
:
static
void
RegisterStaticAtoms
(
const
nsStaticAtom
*
aAtoms
uint32_t
aAtomCount
)
;
static
void
AtomTableClearEntry
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
;
static
void
GCAtomTableLocked
(
const
MutexAutoLock
&
aProofOfLock
GCKind
aKind
)
;
static
already_AddRefed
<
nsAtom
>
Atomize
(
const
nsACString
&
aUTF8String
)
;
static
already_AddRefed
<
nsAtom
>
Atomize
(
const
nsAString
&
aUTF16String
)
;
static
already_AddRefed
<
nsAtom
>
AtomizeMainThread
(
const
nsAString
&
aUTF16Str
)
;
}
;
static
Atomic
<
int32_t
ReleaseAcquire
>
gUnusedAtomCount
(
0
)
;
#
if
defined
(
NS_BUILD_REFCNT_LOGGING
)
class
FakeBufferRefcountHelper
{
public
:
explicit
FakeBufferRefcountHelper
(
nsStringBuffer
*
aBuffer
)
:
mBuffer
(
aBuffer
)
{
NS_LOG_ADDREF
(
aBuffer
1
"
nsStringBuffer
"
sizeof
(
nsStringBuffer
)
)
;
}
~
FakeBufferRefcountHelper
(
)
{
NS_LOG_RELEASE
(
mBuffer
0
"
nsStringBuffer
"
)
;
}
private
:
nsStringBuffer
*
mBuffer
;
}
;
UniquePtr
<
nsTArray
<
FakeBufferRefcountHelper
>
>
gFakeBuffers
;
#
endif
nsAtom
:
:
nsAtom
(
AtomKind
aKind
const
nsAString
&
aString
uint32_t
aHash
)
:
mRefCnt
(
1
)
mLength
(
aString
.
Length
(
)
)
mKind
(
static_cast
<
uint32_t
>
(
aKind
)
)
mHash
(
aHash
)
{
MOZ_ASSERT
(
aKind
=
=
AtomKind
:
:
DynamicAtom
|
|
aKind
=
=
AtomKind
:
:
HTML5Atom
)
;
RefPtr
<
nsStringBuffer
>
buf
=
nsStringBuffer
:
:
FromString
(
aString
)
;
if
(
buf
)
{
mString
=
static_cast
<
char16_t
*
>
(
buf
-
>
Data
(
)
)
;
}
else
{
const
size_t
size
=
(
mLength
+
1
)
*
sizeof
(
char16_t
)
;
buf
=
nsStringBuffer
:
:
Alloc
(
size
)
;
if
(
MOZ_UNLIKELY
(
!
buf
)
)
{
NS_ABORT_OOM
(
size
)
;
}
mString
=
static_cast
<
char16_t
*
>
(
buf
-
>
Data
(
)
)
;
CopyUnicodeTo
(
aString
0
mString
mLength
)
;
mString
[
mLength
]
=
char16_t
(
0
)
;
}
MOZ_ASSERT_IF
(
IsDynamicAtom
(
)
mHash
=
=
HashString
(
mString
mLength
)
)
;
MOZ_ASSERT
(
mString
[
mLength
]
=
=
char16_t
(
0
)
"
null
terminated
"
)
;
MOZ_ASSERT
(
buf
&
&
buf
-
>
StorageSize
(
)
>
=
(
mLength
+
1
)
*
sizeof
(
char16_t
)
"
enough
storage
"
)
;
MOZ_ASSERT
(
Equals
(
aString
)
"
correct
data
"
)
;
mozilla
:
:
Unused
<
<
buf
.
forget
(
)
;
}
nsAtom
:
:
nsAtom
(
nsStringBuffer
*
aStringBuffer
uint32_t
aLength
uint32_t
aHash
)
:
mLength
(
aLength
)
mKind
(
static_cast
<
uint32_t
>
(
AtomKind
:
:
StaticAtom
)
)
mHash
(
aHash
)
mString
(
static_cast
<
char16_t
*
>
(
aStringBuffer
-
>
Data
(
)
)
)
{
#
if
defined
(
NS_BUILD_REFCNT_LOGGING
)
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gFakeBuffers
)
{
gFakeBuffers
=
MakeUnique
<
nsTArray
<
FakeBufferRefcountHelper
>
>
(
)
;
}
gFakeBuffers
-
>
AppendElement
(
aStringBuffer
)
;
#
endif
aStringBuffer
-
>
AddRef
(
)
;
MOZ_ASSERT
(
mHash
=
=
HashString
(
mString
mLength
)
)
;
MOZ_ASSERT
(
mString
[
mLength
]
=
=
char16_t
(
0
)
"
null
terminated
"
)
;
MOZ_ASSERT
(
aStringBuffer
&
&
aStringBuffer
-
>
StorageSize
(
)
=
=
(
mLength
+
1
)
*
sizeof
(
char16_t
)
"
correct
storage
"
)
;
}
nsAtom
:
:
~
nsAtom
(
)
{
if
(
!
IsStaticAtom
(
)
)
{
MOZ_ASSERT
(
IsDynamicAtom
(
)
|
|
IsHTML5Atom
(
)
)
;
nsStringBuffer
:
:
FromData
(
mString
)
-
>
Release
(
)
;
}
}
void
nsAtom
:
:
ToUTF8String
(
nsACString
&
aBuf
)
const
{
MOZ_ASSERT
(
!
IsHTML5Atom
(
)
"
Called
ToUTF8String
(
)
on
an
HTML5
atom
"
)
;
CopyUTF16toUTF8
(
nsDependentString
(
mString
mLength
)
aBuf
)
;
}
size_t
nsAtom
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
MOZ_ASSERT
(
!
IsHTML5Atom
(
)
"
Called
SizeOfIncludingThis
(
)
on
an
HTML5
atom
"
)
;
size_t
n
=
aMallocSizeOf
(
this
)
;
if
(
IsDynamicAtom
(
)
)
{
n
+
=
nsStringBuffer
:
:
FromData
(
mString
)
-
>
SizeOfIncludingThisIfUnshared
(
aMallocSizeOf
)
;
}
else
{
MOZ_ASSERT
(
IsStaticAtom
(
)
)
;
}
return
n
;
}
static
PLDHashTable
*
gAtomTable
;
static
Mutex
*
gAtomTableLock
;
struct
AtomTableKey
{
AtomTableKey
(
const
char16_t
*
aUTF16String
uint32_t
aLength
uint32_t
aHash
)
:
mUTF16String
(
aUTF16String
)
mUTF8String
(
nullptr
)
mLength
(
aLength
)
mHash
(
aHash
)
{
MOZ_ASSERT
(
mHash
=
=
HashString
(
mUTF16String
mLength
)
)
;
}
AtomTableKey
(
const
char
*
aUTF8String
uint32_t
aLength
uint32_t
aHash
)
:
mUTF16String
(
nullptr
)
mUTF8String
(
aUTF8String
)
mLength
(
aLength
)
mHash
(
aHash
)
{
mozilla
:
:
DebugOnly
<
bool
>
err
;
MOZ_ASSERT
(
aHash
=
=
HashUTF8AsUTF16
(
mUTF8String
mLength
&
err
)
)
;
}
AtomTableKey
(
const
char16_t
*
aUTF16String
uint32_t
aLength
uint32_t
*
aHashOut
)
:
mUTF16String
(
aUTF16String
)
mUTF8String
(
nullptr
)
mLength
(
aLength
)
{
mHash
=
HashString
(
mUTF16String
mLength
)
;
*
aHashOut
=
mHash
;
}
AtomTableKey
(
const
char
*
aUTF8String
uint32_t
aLength
uint32_t
*
aHashOut
)
:
mUTF16String
(
nullptr
)
mUTF8String
(
aUTF8String
)
mLength
(
aLength
)
{
bool
err
;
mHash
=
HashUTF8AsUTF16
(
mUTF8String
mLength
&
err
)
;
if
(
err
)
{
mUTF8String
=
nullptr
;
mLength
=
0
;
mHash
=
0
;
}
*
aHashOut
=
mHash
;
}
const
char16_t
*
mUTF16String
;
const
char
*
mUTF8String
;
uint32_t
mLength
;
uint32_t
mHash
;
}
;
struct
AtomTableEntry
:
public
PLDHashEntryHdr
{
nsAtom
*
MOZ_NON_OWNING_REF
mAtom
;
}
;
static
PLDHashNumber
AtomTableGetHash
(
const
void
*
aKey
)
{
const
AtomTableKey
*
k
=
static_cast
<
const
AtomTableKey
*
>
(
aKey
)
;
return
k
-
>
mHash
;
}
static
bool
AtomTableMatchKey
(
const
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
{
const
AtomTableEntry
*
he
=
static_cast
<
const
AtomTableEntry
*
>
(
aEntry
)
;
const
AtomTableKey
*
k
=
static_cast
<
const
AtomTableKey
*
>
(
aKey
)
;
if
(
k
-
>
mUTF8String
)
{
return
CompareUTF8toUTF16
(
nsDependentCSubstring
(
k
-
>
mUTF8String
k
-
>
mUTF8String
+
k
-
>
mLength
)
nsDependentAtomString
(
he
-
>
mAtom
)
)
=
=
0
;
}
return
he
-
>
mAtom
-
>
Equals
(
k
-
>
mUTF16String
k
-
>
mLength
)
;
}
void
nsAtomFriend
:
:
AtomTableClearEntry
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
{
auto
entry
=
static_cast
<
AtomTableEntry
*
>
(
aEntry
)
;
nsAtom
*
atom
=
entry
-
>
mAtom
;
if
(
atom
-
>
IsStaticAtom
(
)
)
{
delete
atom
;
}
}
static
void
AtomTableInitEntry
(
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
{
static_cast
<
AtomTableEntry
*
>
(
aEntry
)
-
>
mAtom
=
nullptr
;
}
static
const
PLDHashTableOps
AtomTableOps
=
{
AtomTableGetHash
AtomTableMatchKey
PLDHashTable
:
:
MoveEntryStub
nsAtomFriend
:
:
AtomTableClearEntry
AtomTableInitEntry
}
;
#
define
RECENTLY_USED_MAIN_THREAD_ATOM_CACHE_SIZE
31
static
nsAtom
*
sRecentlyUsedMainThreadAtoms
[
RECENTLY_USED_MAIN_THREAD_ATOM_CACHE_SIZE
]
=
{
}
;
void
nsAtomFriend
:
:
GCAtomTableLocked
(
const
MutexAutoLock
&
aProofOfLock
GCKind
aKind
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
RECENTLY_USED_MAIN_THREAD_ATOM_CACHE_SIZE
;
+
+
i
)
{
sRecentlyUsedMainThreadAtoms
[
i
]
=
nullptr
;
}
int32_t
removedCount
=
0
;
nsAutoCString
nonZeroRefcountAtoms
;
uint32_t
nonZeroRefcountAtomsCount
=
0
;
for
(
auto
i
=
gAtomTable
-
>
Iter
(
)
;
!
i
.
Done
(
)
;
i
.
Next
(
)
)
{
auto
entry
=
static_cast
<
AtomTableEntry
*
>
(
i
.
Get
(
)
)
;
if
(
entry
-
>
mAtom
-
>
IsStaticAtom
(
)
)
{
continue
;
}
nsAtom
*
atom
=
entry
-
>
mAtom
;
if
(
atom
-
>
mRefCnt
=
=
0
)
{
i
.
Remove
(
)
;
delete
atom
;
+
+
removedCount
;
}
#
ifdef
NS_FREE_PERMANENT_DATA
else
if
(
aKind
=
=
GCKind
:
:
Shutdown
&
&
PR_GetEnv
(
"
XPCOM_MEM_BLOAT_LOG
"
)
)
{
nsAutoCString
name
;
atom
-
>
ToUTF8String
(
name
)
;
if
(
nonZeroRefcountAtomsCount
=
=
0
)
{
nonZeroRefcountAtoms
=
name
;
}
else
if
(
nonZeroRefcountAtomsCount
<
20
)
{
nonZeroRefcountAtoms
+
=
NS_LITERAL_CSTRING
(
"
"
)
+
name
;
}
else
if
(
nonZeroRefcountAtomsCount
=
=
20
)
{
nonZeroRefcountAtoms
+
=
NS_LITERAL_CSTRING
(
"
.
.
.
"
)
;
}
nonZeroRefcountAtomsCount
+
+
;
}
#
endif
}
if
(
nonZeroRefcountAtomsCount
)
{
nsPrintfCString
msg
(
"
%
d
dynamic
atom
(
s
)
with
non
-
zero
refcount
:
%
s
"
nonZeroRefcountAtomsCount
nonZeroRefcountAtoms
.
get
(
)
)
;
NS_ASSERTION
(
nonZeroRefcountAtomsCount
=
=
0
msg
.
get
(
)
)
;
}
MOZ_ASSERT_IF
(
aKind
=
=
GCKind
:
:
Shutdown
removedCount
=
=
gUnusedAtomCount
)
;
gUnusedAtomCount
-
=
removedCount
;
}
static
void
GCAtomTable
(
)
{
if
(
NS_IsMainThread
(
)
)
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
nsAtomFriend
:
:
GCAtomTableLocked
(
lock
GCKind
:
:
RegularOperation
)
;
}
}
MozExternalRefCountType
nsAtom
:
:
AddRef
(
)
{
MOZ_ASSERT
(
!
IsHTML5Atom
(
)
"
Attempt
to
AddRef
an
HTML5
atom
"
)
;
if
(
!
IsDynamicAtom
(
)
)
{
MOZ_ASSERT
(
IsStaticAtom
(
)
)
;
return
2
;
}
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
=
0
"
illegal
refcnt
"
)
;
nsrefcnt
count
=
+
+
mRefCnt
;
if
(
count
=
=
1
)
{
gUnusedAtomCount
-
-
;
}
return
count
;
}
MozExternalRefCountType
nsAtom
:
:
Release
(
)
{
MOZ_ASSERT
(
!
IsHTML5Atom
(
)
"
Attempt
to
Release
an
HTML5
atom
"
)
;
if
(
!
IsDynamicAtom
(
)
)
{
MOZ_ASSERT
(
IsStaticAtom
(
)
)
;
return
1
;
}
#
ifdef
DEBUG
static
const
int32_t
kAtomGCThreshold
=
20
;
#
else
static
const
int32_t
kAtomGCThreshold
=
10000
;
#
endif
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
"
dup
release
"
)
;
nsrefcnt
count
=
-
-
mRefCnt
;
if
(
count
=
=
0
)
{
if
(
+
+
gUnusedAtomCount
>
=
kAtomGCThreshold
)
{
GCAtomTable
(
)
;
}
}
return
count
;
}
class
StaticAtomEntry
:
public
PLDHashEntryHdr
{
public
:
typedef
const
nsAString
&
KeyType
;
typedef
const
nsAString
*
KeyTypePointer
;
explicit
StaticAtomEntry
(
KeyTypePointer
aKey
)
{
}
StaticAtomEntry
(
const
StaticAtomEntry
&
aOther
)
:
mAtom
(
aOther
.
mAtom
)
{
}
~
StaticAtomEntry
(
)
{
}
bool
KeyEquals
(
KeyTypePointer
aKey
)
const
{
return
mAtom
-
>
Equals
(
*
aKey
)
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
HashString
(
*
aKey
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
nsAtom
*
MOZ_OWNING_REF
mAtom
;
}
;
typedef
nsTHashtable
<
StaticAtomEntry
>
StaticAtomTable
;
static
StaticAtomTable
*
gStaticAtomTable
=
nullptr
;
static
bool
gStaticAtomTableSealed
=
false
;
#
define
ATOM_HASHTABLE_INITIAL_LENGTH
4096
void
NS_InitAtomTable
(
)
{
MOZ_ASSERT
(
!
gAtomTable
)
;
gAtomTable
=
new
PLDHashTable
(
&
AtomTableOps
sizeof
(
AtomTableEntry
)
ATOM_HASHTABLE_INITIAL_LENGTH
)
;
gAtomTableLock
=
new
Mutex
(
"
Atom
Table
Lock
"
)
;
NS_STATIC_ATOM_BUFFER
(
empty
"
"
)
;
static
nsAtom
*
empty_atom
=
nullptr
;
static
const
nsStaticAtom
default_atoms
[
]
=
{
NS_STATIC_ATOM
(
empty
&
empty_atom
)
}
;
NS_RegisterStaticAtoms
(
default_atoms
)
;
}
void
NS_ShutdownAtomTable
(
)
{
#
if
defined
(
NS_BUILD_REFCNT_LOGGING
)
gFakeBuffers
=
nullptr
;
#
endif
delete
gStaticAtomTable
;
gStaticAtomTable
=
nullptr
;
#
ifdef
NS_FREE_PERMANENT_DATA
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
nsAtomFriend
:
:
GCAtomTableLocked
(
lock
GCKind
:
:
Shutdown
)
;
}
#
endif
delete
gAtomTable
;
gAtomTable
=
nullptr
;
delete
gAtomTableLock
;
gAtomTableLock
=
nullptr
;
}
void
NS_SizeOfAtomTablesIncludingThis
(
MallocSizeOf
aMallocSizeOf
size_t
*
aMain
size_t
*
aStatic
)
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
*
aMain
=
gAtomTable
-
>
ShallowSizeOfIncludingThis
(
aMallocSizeOf
)
;
for
(
auto
iter
=
gAtomTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
AtomTableEntry
*
>
(
iter
.
Get
(
)
)
;
*
aMain
+
=
entry
-
>
mAtom
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
*
aStatic
=
gStaticAtomTable
?
gStaticAtomTable
-
>
ShallowSizeOfIncludingThis
(
aMallocSizeOf
)
:
0
;
}
static
inline
AtomTableEntry
*
GetAtomHashEntry
(
const
char
*
aString
uint32_t
aLength
uint32_t
*
aHashOut
)
{
gAtomTableLock
-
>
AssertCurrentThreadOwns
(
)
;
AtomTableKey
key
(
aString
aLength
aHashOut
)
;
return
static_cast
<
AtomTableEntry
*
>
(
gAtomTable
-
>
Add
(
&
key
)
)
;
}
static
inline
AtomTableEntry
*
GetAtomHashEntry
(
const
char16_t
*
aString
uint32_t
aLength
uint32_t
*
aHashOut
)
{
gAtomTableLock
-
>
AssertCurrentThreadOwns
(
)
;
AtomTableKey
key
(
aString
aLength
aHashOut
)
;
return
static_cast
<
AtomTableEntry
*
>
(
gAtomTable
-
>
Add
(
&
key
)
)
;
}
void
nsAtomFriend
:
:
RegisterStaticAtoms
(
const
nsStaticAtom
*
aAtoms
uint32_t
aAtomCount
)
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
MOZ_RELEASE_ASSERT
(
!
gStaticAtomTableSealed
"
Atom
table
has
already
been
sealed
!
"
)
;
if
(
!
gStaticAtomTable
)
{
gStaticAtomTable
=
new
StaticAtomTable
(
)
;
}
for
(
uint32_t
i
=
0
;
i
<
aAtomCount
;
+
+
i
)
{
nsStringBuffer
*
stringBuffer
=
aAtoms
[
i
]
.
mStringBuffer
;
nsAtom
*
*
atomp
=
aAtoms
[
i
]
.
mAtom
;
MOZ_ASSERT
(
nsCRT
:
:
IsAscii
(
static_cast
<
char16_t
*
>
(
stringBuffer
-
>
Data
(
)
)
)
)
;
uint32_t
stringLen
=
stringBuffer
-
>
StorageSize
(
)
/
sizeof
(
char16_t
)
-
1
;
uint32_t
hash
;
AtomTableEntry
*
he
=
GetAtomHashEntry
(
static_cast
<
char16_t
*
>
(
stringBuffer
-
>
Data
(
)
)
stringLen
&
hash
)
;
nsAtom
*
atom
=
he
-
>
mAtom
;
if
(
atom
)
{
if
(
!
atom
-
>
IsStaticAtom
(
)
)
{
nsAutoCString
name
;
atom
-
>
ToUTF8String
(
name
)
;
MOZ_CRASH_UNSAFE_PRINTF
(
"
Static
atom
registration
for
%
s
should
be
pushed
back
"
name
.
get
(
)
)
;
}
}
else
{
atom
=
new
nsAtom
(
stringBuffer
stringLen
hash
)
;
he
-
>
mAtom
=
atom
;
}
*
atomp
=
atom
;
if
(
!
gStaticAtomTableSealed
)
{
StaticAtomEntry
*
entry
=
gStaticAtomTable
-
>
PutEntry
(
nsDependentAtomString
(
atom
)
)
;
MOZ_ASSERT
(
atom
-
>
IsStaticAtom
(
)
)
;
entry
-
>
mAtom
=
atom
;
}
}
}
void
RegisterStaticAtoms
(
const
nsStaticAtom
*
aAtoms
uint32_t
aAtomCount
)
{
nsAtomFriend
:
:
RegisterStaticAtoms
(
aAtoms
aAtomCount
)
;
}
already_AddRefed
<
nsAtom
>
NS_Atomize
(
const
char
*
aUTF8String
)
{
return
nsAtomFriend
:
:
Atomize
(
nsDependentCString
(
aUTF8String
)
)
;
}
already_AddRefed
<
nsAtom
>
nsAtomFriend
:
:
Atomize
(
const
nsACString
&
aUTF8String
)
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
uint32_t
hash
;
AtomTableEntry
*
he
=
GetAtomHashEntry
(
aUTF8String
.
Data
(
)
aUTF8String
.
Length
(
)
&
hash
)
;
if
(
he
-
>
mAtom
)
{
RefPtr
<
nsAtom
>
atom
=
he
-
>
mAtom
;
return
atom
.
forget
(
)
;
}
nsString
str
;
CopyUTF8toUTF16
(
aUTF8String
str
)
;
RefPtr
<
nsAtom
>
atom
=
dont_AddRef
(
new
nsAtom
(
nsAtom
:
:
AtomKind
:
:
DynamicAtom
str
hash
)
)
;
he
-
>
mAtom
=
atom
;
return
atom
.
forget
(
)
;
}
already_AddRefed
<
nsAtom
>
NS_Atomize
(
const
nsACString
&
aUTF8String
)
{
return
nsAtomFriend
:
:
Atomize
(
aUTF8String
)
;
}
already_AddRefed
<
nsAtom
>
NS_Atomize
(
const
char16_t
*
aUTF16String
)
{
return
nsAtomFriend
:
:
Atomize
(
nsDependentString
(
aUTF16String
)
)
;
}
already_AddRefed
<
nsAtom
>
nsAtomFriend
:
:
Atomize
(
const
nsAString
&
aUTF16String
)
{
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
uint32_t
hash
;
AtomTableEntry
*
he
=
GetAtomHashEntry
(
aUTF16String
.
Data
(
)
aUTF16String
.
Length
(
)
&
hash
)
;
if
(
he
-
>
mAtom
)
{
RefPtr
<
nsAtom
>
atom
=
he
-
>
mAtom
;
return
atom
.
forget
(
)
;
}
RefPtr
<
nsAtom
>
atom
=
dont_AddRef
(
new
nsAtom
(
nsAtom
:
:
AtomKind
:
:
DynamicAtom
aUTF16String
hash
)
)
;
he
-
>
mAtom
=
atom
;
return
atom
.
forget
(
)
;
}
already_AddRefed
<
nsAtom
>
NS_Atomize
(
const
nsAString
&
aUTF16String
)
{
return
nsAtomFriend
:
:
Atomize
(
aUTF16String
)
;
}
already_AddRefed
<
nsAtom
>
nsAtomFriend
:
:
AtomizeMainThread
(
const
nsAString
&
aUTF16String
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
nsAtom
>
retVal
;
uint32_t
hash
;
AtomTableKey
key
(
aUTF16String
.
Data
(
)
aUTF16String
.
Length
(
)
&
hash
)
;
uint32_t
index
=
hash
%
RECENTLY_USED_MAIN_THREAD_ATOM_CACHE_SIZE
;
nsAtom
*
atom
=
sRecentlyUsedMainThreadAtoms
[
index
]
;
if
(
atom
)
{
uint32_t
length
=
atom
-
>
GetLength
(
)
;
if
(
length
=
=
key
.
mLength
&
&
(
memcmp
(
atom
-
>
GetUTF16String
(
)
key
.
mUTF16String
length
*
sizeof
(
char16_t
)
)
=
=
0
)
)
{
retVal
=
atom
;
return
retVal
.
forget
(
)
;
}
}
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
AtomTableEntry
*
he
=
static_cast
<
AtomTableEntry
*
>
(
gAtomTable
-
>
Add
(
&
key
)
)
;
if
(
he
-
>
mAtom
)
{
retVal
=
he
-
>
mAtom
;
}
else
{
RefPtr
<
nsAtom
>
newAtom
=
dont_AddRef
(
new
nsAtom
(
nsAtom
:
:
AtomKind
:
:
DynamicAtom
aUTF16String
hash
)
)
;
he
-
>
mAtom
=
newAtom
;
retVal
=
newAtom
.
forget
(
)
;
}
sRecentlyUsedMainThreadAtoms
[
index
]
=
he
-
>
mAtom
;
return
retVal
.
forget
(
)
;
}
already_AddRefed
<
nsAtom
>
NS_AtomizeMainThread
(
const
nsAString
&
aUTF16String
)
{
return
nsAtomFriend
:
:
AtomizeMainThread
(
aUTF16String
)
;
}
nsrefcnt
NS_GetNumberOfAtoms
(
void
)
{
GCAtomTable
(
)
;
MutexAutoLock
lock
(
*
gAtomTableLock
)
;
return
gAtomTable
-
>
EntryCount
(
)
;
}
int32_t
NS_GetUnusedAtomCount
(
void
)
{
return
gUnusedAtomCount
;
}
nsAtom
*
NS_GetStaticAtom
(
const
nsAString
&
aUTF16String
)
{
NS_PRECONDITION
(
gStaticAtomTable
"
Static
atom
table
not
created
yet
.
"
)
;
NS_PRECONDITION
(
gStaticAtomTableSealed
"
Static
atom
table
not
sealed
yet
.
"
)
;
StaticAtomEntry
*
entry
=
gStaticAtomTable
-
>
GetEntry
(
aUTF16String
)
;
return
entry
?
entry
-
>
mAtom
:
nullptr
;
}
void
NS_SealStaticAtomTable
(
)
{
gStaticAtomTableSealed
=
true
;
}
