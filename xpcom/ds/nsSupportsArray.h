#
ifndef
nsSupportsArray_h__
#
define
nsSupportsArray_h__
#
include
"
nsISupportsArray
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsSupportsArray
final
:
public
nsISupportsArray
public
nsIArray
{
~
nsSupportsArray
(
void
)
;
public
:
nsSupportsArray
(
void
)
;
static
MOZ_MUST_USE
nsresult
Create
(
nsISupports
*
aOuter
REFNSIID
aIID
void
*
*
aResult
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSISERIALIZABLE
NS_IMETHOD
Count
(
uint32_t
*
aResult
)
override
{
*
aResult
=
mArray
.
Length
(
)
;
return
NS_OK
;
}
NS_IMETHOD
GetElementAt
(
uint32_t
aIndex
nsISupports
*
*
aResult
)
override
;
MOZ_MUST_USE
NS_IMETHOD
SetElementAt
(
uint32_t
aIndex
nsISupports
*
aValue
)
override
{
return
ReplaceElementAt
(
aValue
aIndex
)
?
NS_OK
:
NS_ERROR_FAILURE
;
}
MOZ_MUST_USE
NS_IMETHOD
AppendElement
(
nsISupports
*
aElement
)
override
{
return
(
nsresult
)
InsertElementAt
(
aElement
mArray
.
Length
(
)
)
;
}
MOZ_MUST_USE
NS_IMETHOD
RemoveElement
(
nsISupports
*
aElement
)
override
;
NS_IMETHOD
DeprecatedEnumerate
(
nsIEnumerator
*
*
aResult
)
override
;
NS_IMETHOD
Clear
(
void
)
override
;
NS_IMETHOD_
(
int32_t
)
IndexOf
(
const
nsISupports
*
aPossibleElement
)
override
;
NS_IMETHOD
GetIndexOf
(
nsISupports
*
aPossibleElement
int32_t
*
aResult
)
override
{
*
aResult
=
IndexOf
(
aPossibleElement
)
;
return
NS_OK
;
}
MOZ_MUST_USE
NS_IMETHOD_
(
bool
)
InsertElementAt
(
nsISupports
*
aElement
uint32_t
aIndex
)
override
;
MOZ_MUST_USE
NS_IMETHOD_
(
bool
)
ReplaceElementAt
(
nsISupports
*
aElement
uint32_t
aIndex
)
override
;
MOZ_MUST_USE
NS_IMETHOD_
(
bool
)
RemoveElementAt
(
uint32_t
aIndex
)
override
;
MOZ_MUST_USE
NS_IMETHOD
DeleteElementAt
(
uint32_t
aIndex
)
override
{
return
(
RemoveElementAt
(
aIndex
)
?
NS_OK
:
NS_ERROR_FAILURE
)
;
}
MOZ_MUST_USE
NS_IMETHOD
Clone
(
nsISupportsArray
*
*
aResult
)
override
;
NS_DECL_NSIARRAY
private
:
explicit
nsSupportsArray
(
const
nsISupportsArray
&
aOther
)
;
nsCOMArray
<
nsISupports
>
mArray
;
}
;
#
endif
