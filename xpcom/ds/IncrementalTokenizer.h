#
ifndef
INCREMENTAL_TOKENIZER_H__
#
define
INCREMENTAL_TOKENIZER_H__
#
include
"
mozilla
/
Tokenizer
.
h
"
#
include
"
nsError
.
h
"
#
include
<
functional
>
class
nsIInputStream
;
namespace
mozilla
{
class
IncrementalTokenizer
:
public
TokenizerBase
{
public
:
typedef
std
:
:
function
<
nsresult
(
Token
const
&
IncrementalTokenizer
&
i
)
>
Consumer
;
explicit
IncrementalTokenizer
(
Consumer
&
&
aConsumer
const
char
*
aWhitespaces
=
nullptr
const
char
*
aAdditionalWordChars
=
nullptr
uint32_t
aRawMinBuffered
=
1024
)
;
nsresult
FeedInput
(
const
nsACString
&
aInput
)
;
nsresult
FeedInput
(
nsIInputStream
*
aInput
uint32_t
aCount
)
;
nsresult
FinishInput
(
)
;
MOZ_MUST_USE
bool
Next
(
Token
&
aToken
)
;
void
NeedMoreInput
(
)
;
void
Rollback
(
)
;
private
:
nsresult
Process
(
)
;
#
ifdef
DEBUG
bool
mConsuming
;
#
endif
bool
mNeedMoreInput
;
bool
mRollback
;
nsCString
mInput
;
nsCString
:
:
index_type
mInputCursor
;
Consumer
mConsumer
;
}
;
}
#
endif
