#
ifndef
ArrayAlgorithm_h___
#
define
ArrayAlgorithm_h___
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Algorithm
.
h
"
namespace
mozilla
{
template
<
typename
SrcIter
typename
Transform
typename
=
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
typename
detail
:
:
TransformTraits
<
Transform
SrcIter
>
:
:
result_err_type
nsresult
>
>
>
Result
<
nsTArray
<
typename
detail
:
:
TransformTraits
<
Transform
SrcIter
>
:
:
result_ok_type
>
nsresult
>
TransformIntoNewArrayAbortOnErr
(
SrcIter
aIter
SrcIter
aEnd
Transform
aTransform
fallible_t
)
{
nsTArray
<
typename
detail
:
:
TransformTraits
<
Transform
SrcIter
>
:
:
result_ok_type
>
res
;
if
(
!
res
.
SetCapacity
(
std
:
:
distance
(
aIter
aEnd
)
fallible
)
)
{
return
Err
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
auto
transformRes
=
TransformAbortOnErr
(
aIter
aEnd
MakeBackInserter
(
res
)
std
:
:
move
(
aTransform
)
)
;
if
(
NS_WARN_IF
(
transformRes
.
isErr
(
)
)
)
{
return
Err
(
transformRes
.
unwrapErr
(
)
)
;
}
return
res
;
}
template
<
typename
SrcRange
typename
Transform
>
auto
TransformIntoNewArrayAbortOnErr
(
SrcRange
&
aRange
Transform
aTransform
fallible_t
)
{
using
std
:
:
begin
;
using
std
:
:
end
;
return
TransformIntoNewArrayAbortOnErr
(
begin
(
aRange
)
end
(
aRange
)
aTransform
fallible
)
;
}
template
<
typename
SrcIter
typename
Transform
>
Result
<
nsTArray
<
detail
:
:
ArrayElementTransformType
<
Transform
SrcIter
>
>
nsresult
>
TransformIntoNewArray
(
SrcIter
aIter
SrcIter
aEnd
Transform
aTransform
fallible_t
)
{
nsTArray
<
detail
:
:
ArrayElementTransformType
<
Transform
SrcIter
>
>
res
;
if
(
!
res
.
SetCapacity
(
std
:
:
distance
(
aIter
aEnd
)
fallible
)
)
{
return
Err
(
NS_ERROR_OUT_OF_MEMORY
)
;
}
std
:
:
transform
(
aIter
aEnd
MakeBackInserter
(
res
)
std
:
:
move
(
aTransform
)
)
;
return
res
;
}
template
<
typename
SrcRange
typename
Transform
>
auto
TransformIntoNewArray
(
SrcRange
&
aRange
Transform
aTransform
fallible_t
)
{
using
std
:
:
begin
;
using
std
:
:
end
;
return
TransformIntoNewArray
(
begin
(
aRange
)
end
(
aRange
)
aTransform
fallible
)
;
}
template
<
typename
SrcIter
typename
Transform
>
nsTArray
<
detail
:
:
ArrayElementTransformType
<
Transform
SrcIter
>
>
TransformIntoNewArray
(
SrcIter
aIter
SrcIter
aEnd
Transform
aTransform
)
{
nsTArray
<
detail
:
:
ArrayElementTransformType
<
Transform
SrcIter
>
>
res
;
res
.
SetCapacity
(
std
:
:
distance
(
aIter
aEnd
)
)
;
std
:
:
transform
(
aIter
aEnd
MakeBackInserter
(
res
)
std
:
:
move
(
aTransform
)
)
;
return
res
;
}
template
<
typename
SrcRange
typename
Transform
>
auto
TransformIntoNewArray
(
SrcRange
&
aRange
Transform
aTransform
)
{
using
std
:
:
begin
;
using
std
:
:
end
;
return
TransformIntoNewArray
(
begin
(
aRange
)
end
(
aRange
)
aTransform
)
;
}
}
#
endif
