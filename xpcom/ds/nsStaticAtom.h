#
ifndef
nsStaticAtom_h__
#
define
nsStaticAtom_h__
#
include
<
stdint
.
h
>
#
include
"
nsAtom
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
define
NS_STATIC_ATOM_DECL
(
name_
)
\
static
nsStaticAtom
*
name_
;
#
define
NS_STATIC_ATOM_SUBCLASS_DECL
(
type_
name_
)
\
static
type_
*
name_
;
#
define
NS_STATIC_ATOM_DEFN
(
class_
name_
)
\
nsStaticAtom
*
class_
:
:
name_
;
#
define
NS_STATIC_ATOM_SUBCLASS_DEFN
(
type_
class_
name_
)
\
type_
*
class_
:
:
name_
;
#
define
NS_STATIC_ATOM_BUFFER
(
name_
value_
)
\
static
const
char16_t
name_
#
#
_buffer
[
sizeof
(
value_
)
]
=
u
"
"
value_
;
\
static_assert
(
sizeof
(
value_
[
0
]
)
=
=
1
"
non
-
8
-
bit
static
atom
literal
"
)
;
#
define
NS_STATIC_ATOM_SETUP
(
class_
name_
)
\
{
name_
#
#
_buffer
&
class_
:
:
name_
}
#
define
NS_STATIC_ATOM_SUBCLASS_SETUP
(
class_
name_
)
\
{
name_
#
#
_buffer
reinterpret_cast
<
nsStaticAtom
*
*
>
(
&
class_
:
:
name_
)
}
struct
nsStaticAtomSetup
{
const
char16_t
*
const
mString
;
nsStaticAtom
*
*
const
mAtomp
;
}
;
template
<
uint32_t
N
>
void
NS_RegisterStaticAtoms
(
const
nsStaticAtomSetup
(
&
aSetup
)
[
N
]
)
{
extern
void
RegisterStaticAtoms
(
const
nsStaticAtomSetup
*
aSetup
uint32_t
aCount
)
;
RegisterStaticAtoms
(
aSetup
N
)
;
}
class
nsStaticAtomUtils
{
public
:
template
<
uint32_t
N
>
static
mozilla
:
:
Maybe
<
uint32_t
>
Lookup
(
nsAtom
*
aAtom
const
nsStaticAtomSetup
(
&
aSetup
)
[
N
]
)
{
return
Lookup
(
aAtom
aSetup
N
)
;
}
template
<
uint32_t
N
>
static
bool
IsMember
(
nsAtom
*
aAtom
const
nsStaticAtomSetup
(
&
aSetup
)
[
N
]
)
{
return
Lookup
(
aAtom
aSetup
N
)
.
isSome
(
)
;
}
private
:
static
mozilla
:
:
Maybe
<
uint32_t
>
Lookup
(
nsAtom
*
aAtom
const
nsStaticAtomSetup
*
aSetup
uint32_t
aCount
)
{
for
(
uint32_t
i
=
0
;
i
<
aCount
;
i
+
+
)
{
if
(
aAtom
=
=
*
(
aSetup
[
i
]
.
mAtomp
)
)
{
return
mozilla
:
:
Some
(
i
)
;
}
}
return
mozilla
:
:
Nothing
(
)
;
}
}
;
#
endif
