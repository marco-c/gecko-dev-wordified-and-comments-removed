#
ifndef
nsStaticAtom_h__
#
define
nsStaticAtom_h__
#
include
"
nsIAtom
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
define
NS_STATIC_ATOM
(
buffer_name
atom_ptr
)
\
{
(
nsStringBuffer
*
)
&
buffer_name
atom_ptr
}
#
define
NS_STATIC_ATOM_BUFFER
(
buffer_name
str_data
)
\
static
nsFakeStringBuffer
<
sizeof
(
str_data
)
>
buffer_name
=
\
{
1
sizeof
(
str_data
)
*
sizeof
(
char16_t
)
(
u
"
"
str_data
)
}
;
struct
nsStaticAtom
{
nsStringBuffer
*
MOZ_NON_OWNING_REF
mStringBuffer
;
nsIAtom
*
*
mAtom
;
}
;
template
<
uint32_t
size
>
struct
nsFakeStringBuffer
{
int32_t
mRefCnt
;
uint32_t
mSize
;
char16_t
mStringData
[
size
]
;
}
;
template
<
uint32_t
N
>
void
NS_RegisterStaticAtoms
(
const
nsStaticAtom
(
&
aAtoms
)
[
N
]
)
{
extern
void
RegisterStaticAtoms
(
const
nsStaticAtom
*
uint32_t
aAtomCount
)
;
RegisterStaticAtoms
(
aAtoms
N
)
;
}
#
endif
