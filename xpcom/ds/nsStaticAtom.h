#
ifndef
nsStaticAtom_h__
#
define
nsStaticAtom_h__
#
include
<
stdint
.
h
>
#
include
"
nsAtom
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
define
NS_STATIC_ATOM_DECL_STRING
(
name_
value_
)
\
const
char16_t
name_
#
#
_string
[
sizeof
(
value_
)
]
;
#
define
NS_STATIC_ATOM_ENUM
(
name_
)
\
name_
#
define
NS_STATIC_ATOM_DECL_PTR
(
type_
name_
)
\
static
type_
*
name_
;
#
define
NS_STATIC_ATOM_INIT_STRING
(
value_
)
\
u
"
"
value_
#
define
NS_STATIC_ATOM_INIT_ATOM
(
type_
detailClass_
name_
value_
)
\
type_
(
u
"
"
value_
\
sizeof
(
value_
)
-
1
\
offsetof
(
detailClass_
\
mAtoms
[
static_cast
<
size_t
>
(
detailClass_
:
:
Atoms
:
:
name_
)
]
)
-
\
offsetof
(
detailClass_
name_
#
#
_string
)
)
#
define
NS_STATIC_ATOM_DEFN_PTR
(
type_
detailClass_
detailObj_
class_
name_
)
\
type_
*
class_
:
:
name_
=
const_cast
<
type_
*
>
(
\
&
detailObj_
.
mAtoms
[
static_cast
<
size_t
>
(
detailClass_
:
:
Atoms
:
:
name_
)
]
)
;
void
NS_RegisterStaticAtoms
(
const
nsStaticAtom
*
aAtoms
size_t
aAtomsLen
)
;
class
nsStaticAtomUtils
{
public
:
static
mozilla
:
:
Maybe
<
uint32_t
>
Lookup
(
nsAtom
*
aAtom
const
nsStaticAtom
*
aAtoms
uint32_t
aCount
)
{
for
(
uint32_t
i
=
0
;
i
<
aCount
;
i
+
+
)
{
if
(
aAtom
=
=
&
aAtoms
[
i
]
)
{
return
mozilla
:
:
Some
(
i
)
;
}
}
return
mozilla
:
:
Nothing
(
)
;
}
static
bool
IsMember
(
nsAtom
*
aAtom
const
nsStaticAtom
*
aAtoms
uint32_t
aCount
)
{
return
Lookup
(
aAtom
aAtoms
aCount
)
.
isSome
(
)
;
}
}
;
#
endif
