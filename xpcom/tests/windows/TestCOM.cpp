#
include
<
windows
.
h
>
#
include
<
unknwn
.
h
>
#
include
<
stdio
.
h
>
#
include
"
nsISupports
.
h
"
#
include
"
nsIFactory
.
h
"
#
include
<
unknwn
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
define
NS_ITEST_COM_IID
\
{
\
0x5846ba30
0xb856
0x11d1
{
\
0xa9
0x8a
0x0
0x80
0x5f
0x8a
0x7a
0xc4
\
}
\
}
class
nsITestCom
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ITEST_COM_IID
)
NS_IMETHOD
Test
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsITestCom
NS_ITEST_COM_IID
)
class
nsTestCom
final
:
public
nsITestCom
{
NS_DECL_ISUPPORTS
public
:
nsTestCom
(
)
{
}
NS_IMETHOD
Test
(
)
override
{
return
NS_OK
;
}
static
int
sDestructions
;
private
:
~
nsTestCom
(
)
{
sDestructions
+
+
;
}
}
;
int
nsTestCom
:
:
sDestructions
;
NS_IMPL_QUERY_INTERFACE
(
nsTestCom
nsITestCom
)
MozExternalRefCountType
nsTestCom
:
:
AddRef
(
)
{
nsrefcnt
res
=
+
+
mRefCnt
;
NS_LOG_ADDREF
(
this
mRefCnt
"
nsTestCom
"
sizeof
(
*
this
)
)
;
return
res
;
}
MozExternalRefCountType
nsTestCom
:
:
Release
(
)
{
nsrefcnt
res
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
mRefCnt
"
nsTestCom
"
)
;
if
(
res
=
=
0
)
{
delete
this
;
}
return
res
;
}
class
nsTestComFactory
final
:
public
nsIFactory
{
~
nsTestComFactory
(
)
{
sDestructions
+
+
;
}
NS_DECL_ISUPPORTS
public
:
nsTestComFactory
(
)
{
}
NS_IMETHOD
CreateInstance
(
nsISupports
*
aOuter
const
nsIID
&
aIID
void
*
*
aResult
)
override
;
NS_IMETHOD
LockFactory
(
bool
aLock
)
override
{
return
NS_OK
;
}
static
int
sDestructions
;
}
;
int
nsTestComFactory
:
:
sDestructions
;
NS_IMPL_ISUPPORTS
(
nsTestComFactory
nsIFactory
)
nsresult
nsTestComFactory
:
:
CreateInstance
(
nsISupports
*
aOuter
const
nsIID
&
aIID
void
*
*
aResult
)
{
if
(
aOuter
!
=
nullptr
)
{
return
NS_ERROR_NO_AGGREGATION
;
}
nsTestCom
*
t
=
new
nsTestCom
(
)
;
NS_ADDREF
(
t
)
;
nsresult
res
=
t
-
>
QueryInterface
(
aIID
aResult
)
;
NS_RELEASE
(
t
)
;
return
res
;
}
TEST
(
TestCOM
WindowsInterop
)
{
nsTestComFactory
*
inst
=
new
nsTestComFactory
(
)
;
IClassFactory
*
iFactory
=
nullptr
;
nsresult
rv
=
inst
-
>
QueryInterface
(
NS_GET_IID
(
nsIFactory
)
(
void
*
*
)
&
iFactory
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
ASSERT_TRUE
(
iFactory
)
;
IUnknown
*
iUnknown
=
nullptr
;
HRESULT
hr
=
iFactory
-
>
LockServer
(
TRUE
)
;
ASSERT_TRUE
(
SUCCEEDED
(
hr
)
)
;
hr
=
iFactory
-
>
CreateInstance
(
nullptr
IID_IUnknown
(
void
*
*
)
&
iUnknown
)
;
ASSERT_TRUE
(
SUCCEEDED
(
hr
)
)
;
ASSERT_TRUE
(
iUnknown
)
;
hr
=
iFactory
-
>
LockServer
(
FALSE
)
;
ASSERT_TRUE
(
SUCCEEDED
(
hr
)
)
;
nsITestCom
*
iTestCom
=
nullptr
;
GUID
testGUID
=
NS_ITEST_COM_IID
;
hr
=
iUnknown
-
>
QueryInterface
(
testGUID
(
void
*
*
)
&
iTestCom
)
;
ASSERT_TRUE
(
SUCCEEDED
(
hr
)
)
;
ASSERT_TRUE
(
iTestCom
)
;
rv
=
iTestCom
-
>
Test
(
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
iUnknown
-
>
Release
(
)
;
iTestCom
-
>
Release
(
)
;
iFactory
-
>
Release
(
)
;
ASSERT_EQ
(
nsTestComFactory
:
:
sDestructions
1
)
;
ASSERT_EQ
(
nsTestCom
:
:
sDestructions
1
)
;
}
