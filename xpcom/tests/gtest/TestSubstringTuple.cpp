#
include
"
nsLiteralString
.
h
"
#
include
"
nsTSubstringTuple
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
TestSubstringTuple
{
static
const
auto
kFooLiteral
=
u
"
foo
"
_ns
;
MOZ_RUNINIT
static
const
auto
kFoo
=
nsCString
(
"
foo
"
)
;
MOZ_RUNINIT
static
const
auto
kBar
=
nsCString
(
"
bar
"
)
;
MOZ_RUNINIT
static
const
auto
kBaz
=
nsCString
(
"
baz
"
)
;
#
define
DO_SUBSTRING_TUPLE_TEST
(
tuple
dependentString
expectedLength
\
expectedDependency
)
\
const
auto
length
=
(
tuple
)
.
Length
(
)
;
\
const
auto
isDependentOn
=
(
tuple
)
.
IsDependentOn
(
\
dependentString
.
BeginReading
(
)
dependentString
.
EndReading
(
)
)
;
\
\
EXPECT_EQ
(
(
expectedLength
)
length
)
;
\
EXPECT_EQ
(
(
expectedDependency
)
isDependentOn
)
;
\
\
const
auto
[
combinedIsDependentOn
combinedLength
]
=
\
(
tuple
)
.
IsDependentOnWithLength
(
dependentString
.
BeginReading
(
)
\
dependentString
.
EndReading
(
)
)
;
\
\
EXPECT_EQ
(
length
combinedLength
)
;
\
EXPECT_EQ
(
isDependentOn
combinedIsDependentOn
)
;
TEST
(
SubstringTuple
IsDependentOnAndLength_NonDependent_Literal_ZeroLength
)
{
DO_SUBSTRING_TUPLE_TEST
(
u
"
"
_ns
+
u
"
"
_ns
kFooLiteral
0u
false
)
;
}
TEST
(
SubstringTuple
IsDependentOnAndLength_NonDependent_Literal_NonZeroLength
)
{
DO_SUBSTRING_TUPLE_TEST
(
u
"
bar
"
_ns
+
u
"
baz
"
_ns
kFooLiteral
6u
false
)
;
}
TEST
(
SubstringTuple
IsDependentOnAndLength_NonDependent_NonZeroLength
)
{
DO_SUBSTRING_TUPLE_TEST
(
kBar
+
kBaz
kFoo
6u
false
)
;
}
TEST
(
SubstringTuple
IsDependentOnAndLength_NonDependent_NonZeroLength_ThreeParts
)
{
DO_SUBSTRING_TUPLE_TEST
(
kBar
+
kBaz
+
kBar
kFoo
9u
false
)
;
}
TEST
(
SubstringTuple
IsDependentOnAndLength_Dependent_NonZeroLength
)
{
DO_SUBSTRING_TUPLE_TEST
(
kBar
+
kBaz
kBar
6u
true
)
;
}
TEST
(
SubstringTuple
IsDependentOnAndLength_Dependent_NonZeroLength_ThreeParts
)
{
DO_SUBSTRING_TUPLE_TEST
(
kBar
+
kBaz
+
kFoo
kBar
9u
true
)
;
}
}
