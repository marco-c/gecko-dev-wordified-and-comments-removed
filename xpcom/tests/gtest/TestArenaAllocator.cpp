#
include
"
mozilla
/
ArenaAllocator
.
h
"
#
include
"
mozilla
/
ArenaAllocatorExtensions
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
gtest
/
gtest
.
h
"
using
mozilla
:
:
ArenaAllocator
;
TEST
(
ArenaAllocator
Constructor
)
{
ArenaAllocator
<
4096
4
>
a
;
}
TEST
(
ArenaAllocator
DefaultAllocate
)
{
ArenaAllocator
<
1024
>
a
;
void
*
x
=
a
.
Allocate
(
101
)
;
void
*
y
=
a
.
Allocate
(
101
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
+
101
uintptr_t
(
y
)
)
;
}
TEST
(
ArenaAllocator
AllocateAlignment
)
{
static
const
size_t
kAlignment
=
8
;
ArenaAllocator
<
1024
kAlignment
>
a
;
for
(
size_t
i
=
1
;
i
<
=
kAlignment
;
i
+
+
)
{
void
*
x
=
a
.
Allocate
(
i
)
;
void
*
y
=
a
.
Allocate
(
i
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
+
kAlignment
uintptr_t
(
y
)
)
;
}
void
*
x
=
a
.
Allocate
(
kAlignment
+
1
)
;
void
*
y
=
a
.
Allocate
(
kAlignment
+
1
)
;
EXPECT_NE
(
uintptr_t
(
x
)
+
kAlignment
uintptr_t
(
y
)
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
+
kAlignment
*
2
uintptr_t
(
y
)
)
;
}
#
if
0
TEST
(
ArenaAllocator
AllocateZeroBytes
)
{
ArenaAllocator
<
1024
>
a
;
void
*
x
=
a
.
Allocate
(
0
)
;
EXPECT_FALSE
(
x
)
;
}
TEST
(
ArenaAllocator
BadAlignment
)
{
ArenaAllocator
<
256
3
>
a
;
ArenaAllocator
<
256
7
>
b
;
ArenaAllocator
<
256
17
>
c
;
}
#
endif
TEST
(
ArenaAllocator
AllocateMultipleSizes
)
{
ArenaAllocator
<
4096
4
>
a
;
for
(
int
i
=
1
;
i
<
50
;
i
+
+
)
{
void
*
x
=
a
.
Allocate
(
i
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
4
uintptr_t
(
0
)
)
;
}
ArenaAllocator
<
8192
64
>
b
;
for
(
int
i
=
1
;
i
<
100
;
i
+
+
)
{
void
*
x
=
b
.
Allocate
(
i
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
64
uintptr_t
(
0
)
)
;
}
}
TEST
(
ArenaAllocator
AllocateInDifferentChunks
)
{
ArenaAllocator
<
4096
>
a
;
void
*
x
=
a
.
Allocate
(
4000
)
;
void
*
y
=
a
.
Allocate
(
4000
)
;
EXPECT_NE
(
uintptr_t
(
x
)
+
4000
uintptr_t
(
y
)
)
;
}
TEST
(
ArenaAllocator
AllocateLargerThanArenaSize
)
{
ArenaAllocator
<
256
>
a
;
void
*
x
=
a
.
Allocate
(
4000
)
;
void
*
y
=
a
.
Allocate
(
4000
)
;
EXPECT_TRUE
(
x
)
;
EXPECT_TRUE
(
y
)
;
x
=
a
.
Allocate
(
8
)
;
y
=
a
.
Allocate
(
8
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
+
8
uintptr_t
(
y
)
)
;
}
TEST
(
ArenaAllocator
AllocationsPerChunk
)
{
const
size_t
kArenaSize
=
1024
;
const
size_t
kAlignment
=
64
;
ArenaAllocator
<
kArenaSize
kAlignment
>
a
;
const
size_t
kAllocationsPerChunk
=
(
kArenaSize
/
kAlignment
)
-
1
;
void
*
x
=
nullptr
;
void
*
y
=
a
.
Allocate
(
kAlignment
)
;
EXPECT_TRUE
(
y
)
;
for
(
size_t
i
=
1
;
i
<
kAllocationsPerChunk
;
i
+
+
)
{
x
=
y
;
y
=
a
.
Allocate
(
kAlignment
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
+
kAlignment
uintptr_t
(
y
)
)
;
}
x
=
y
;
y
=
a
.
Allocate
(
kAlignment
)
;
EXPECT_NE
(
uintptr_t
(
x
)
+
kAlignment
uintptr_t
(
y
)
)
;
}
TEST
(
ArenaAllocator
MemoryIsValid
)
{
static
const
size_t
kArenaSize
=
1024
;
static
const
size_t
kAlignment
=
64
;
static
const
char
kMark
=
char
(
0xBC
)
;
ArenaAllocator
<
kArenaSize
kAlignment
>
a
;
size_t
sz
=
kArenaSize
-
kAlignment
;
char
*
x
=
(
char
*
)
a
.
Allocate
(
sz
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
kAlignment
uintptr_t
(
0
)
)
;
memset
(
x
kMark
sz
)
;
for
(
size_t
i
=
0
;
i
<
sz
;
i
+
+
)
{
EXPECT_EQ
(
x
[
i
]
kMark
)
;
}
sz
=
kArenaSize
*
2
;
x
=
(
char
*
)
a
.
Allocate
(
sz
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
kAlignment
uintptr_t
(
0
)
)
;
memset
(
x
kMark
sz
)
;
for
(
size_t
i
=
0
;
i
<
sz
;
i
+
+
)
{
EXPECT_EQ
(
x
[
i
]
kMark
)
;
}
sz
=
kArenaSize
/
2
;
x
=
(
char
*
)
a
.
Allocate
(
sz
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
kAlignment
uintptr_t
(
0
)
)
;
memset
(
x
kMark
sz
)
;
for
(
size_t
i
=
0
;
i
<
sz
;
i
+
+
)
{
EXPECT_EQ
(
x
[
i
]
kMark
)
;
}
x
=
(
char
*
)
a
.
Allocate
(
sz
)
;
EXPECT_EQ
(
uintptr_t
(
x
)
%
kAlignment
uintptr_t
(
0
)
)
;
memset
(
x
kMark
sz
)
;
for
(
size_t
i
=
0
;
i
<
sz
;
i
+
+
)
{
EXPECT_EQ
(
x
[
i
]
kMark
)
;
}
}
MOZ_DEFINE_MALLOC_SIZE_OF
(
TestSizeOf
)
;
TEST
(
ArenaAllocator
SizeOf
)
{
static
const
size_t
kArenaSize
=
4096
;
ArenaAllocator
<
kArenaSize
>
a
;
size_t
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_EQ
(
sz
size_t
(
0
)
)
;
(
void
)
a
.
Allocate
(
kArenaSize
/
2
)
;
size_t
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
(
void
)
a
.
Allocate
(
kArenaSize
/
4
)
;
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_EQ
(
sz
prev_sz
)
;
(
void
)
a
.
Allocate
(
kArenaSize
/
2
)
;
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
(
void
)
a
.
Allocate
(
(
kArenaSize
*
2
)
-
64
)
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
}
TEST
(
ArenaAllocator
Clear
)
{
static
const
size_t
kArenaSize
=
64
;
ArenaAllocator
<
kArenaSize
>
a
;
a
.
Clear
(
)
;
size_t
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_EQ
(
sz
size_t
(
0
)
)
;
void
*
x
=
a
.
Allocate
(
10
)
;
EXPECT_TRUE
(
x
)
;
size_t
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
for
(
size_t
i
=
0
;
i
<
kArenaSize
*
2
;
i
+
+
)
{
x
=
a
.
Allocate
(
1
)
;
EXPECT_TRUE
(
x
)
;
}
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
a
.
Clear
(
)
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_EQ
(
sz
size_t
(
0
)
)
;
x
=
a
.
Allocate
(
10
)
;
EXPECT_TRUE
(
x
)
;
prev_sz
=
sz
;
sz
=
a
.
SizeOfExcludingThis
(
TestSizeOf
)
;
EXPECT_GT
(
sz
prev_sz
)
;
}
TEST
(
ArenaAllocator
Extensions
)
{
ArenaAllocator
<
4096
8
>
a
;
const
char
*
const
kTestStr
=
"
This
is
a
test
string
.
"
;
char
*
dup
=
mozilla
:
:
ArenaStrdup
(
kTestStr
a
)
;
EXPECT_STREQ
(
dup
kTestStr
)
;
NS_NAMED_LITERAL_STRING
(
wideStr
"
A
wide
string
.
"
)
;
nsLiteralString
:
:
char_type
*
wide
=
mozilla
:
:
ArenaStrdup
(
wideStr
a
)
;
EXPECT_TRUE
(
wideStr
.
Equals
(
wide
)
)
;
NS_NAMED_LITERAL_CSTRING
(
cStr
"
A
c
-
string
.
"
)
;
nsLiteralCString
:
:
char_type
*
cstr
=
mozilla
:
:
ArenaStrdup
(
cStr
a
)
;
EXPECT_TRUE
(
cStr
.
Equals
(
cstr
)
)
;
}
