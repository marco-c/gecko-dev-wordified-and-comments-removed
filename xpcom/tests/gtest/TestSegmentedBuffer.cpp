#
include
"
gtest
/
gtest
.
h
"
#
include
"
.
.
/
.
.
/
io
/
nsSegmentedBuffer
.
h
"
#
include
"
nsIEventTarget
.
h
"
using
namespace
mozilla
;
TEST
(
SegmentedBuffer
AppendAndPop
)
{
auto
buf
=
MakeUnique
<
nsSegmentedBuffer
>
(
)
;
buf
-
>
Init
(
4
)
;
char
*
seg
;
mozilla
:
:
UniqueFreePtr
<
char
>
poppedSeg
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
seg
=
buf
-
>
AppendNewSegment
(
)
;
EXPECT_TRUE
(
seg
)
<
<
"
AppendNewSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
poppedSeg
=
buf
-
>
PopFirstSegment
(
)
;
EXPECT_TRUE
(
poppedSeg
)
<
<
"
PopFirstSegment
failed
"
;
}
