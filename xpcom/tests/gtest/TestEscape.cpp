#
include
"
nsEscape
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
using
namespace
mozilla
;
TEST
(
Escape
FallibleNoEscape
)
{
nsCString
toEscape
(
"
data
:
Hello
%
2C
%
20World
!
"
)
;
nsCString
escaped
;
nsresult
rv
=
NS_EscapeURL
(
toEscape
esc_OnlyNonASCII
escaped
fallible
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STREQ
(
toEscape
.
BeginReading
(
)
escaped
.
BeginReading
(
)
)
;
EXPECT_EQ
(
toEscape
.
BeginReading
(
)
escaped
.
BeginReading
(
)
)
;
}
TEST
(
Escape
FallibleEscape
)
{
nsCString
toEscape
(
"
data
:
Hello
%
2C
%
20World
!
\
xC4
\
x9F
"
)
;
nsCString
escaped
;
nsresult
rv
=
NS_EscapeURL
(
toEscape
esc_OnlyNonASCII
escaped
fallible
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STRNE
(
toEscape
.
BeginReading
(
)
escaped
.
BeginReading
(
)
)
;
const
char
*
const
kExpected
=
"
data
:
Hello
%
2C
%
20World
!
%
C4
%
9F
"
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
kExpected
)
;
}
TEST
(
Escape
BadEscapeSequences
)
{
{
char
bad
[
]
=
"
%
s
\
0fa
"
;
int32_t
count
=
nsUnescapeCount
(
bad
)
;
EXPECT_EQ
(
count
2
)
;
EXPECT_STREQ
(
bad
"
%
s
"
)
;
}
{
char
bad
[
]
=
"
%
a
"
;
int32_t
count
=
nsUnescapeCount
(
bad
)
;
EXPECT_EQ
(
count
2
)
;
EXPECT_STREQ
(
bad
"
%
a
"
)
;
}
{
char
bad
[
]
=
"
%
"
;
int32_t
count
=
nsUnescapeCount
(
bad
)
;
EXPECT_EQ
(
count
1
)
;
EXPECT_STREQ
(
bad
"
%
"
)
;
}
{
char
bad
[
]
=
"
%
s
/
%
s
"
;
int32_t
count
=
nsUnescapeCount
(
bad
)
;
EXPECT_EQ
(
count
5
)
;
EXPECT_STREQ
(
bad
"
%
s
/
%
s
"
)
;
}
}
TEST
(
Escape
nsAppendEscapedHTML
)
{
const
char
*
srcs
[
]
=
{
"
a
"
"
bcdefgh
"
"
<
"
"
>
"
"
&
"
"
\
"
"
"
'
"
"
'
bad
'
"
"
Foo
<
T
>
&
foo
"
"
'
\
"
&
>
<
abc
"
"
"
}
;
const
char
*
dsts1
[
]
=
{
"
a
"
"
bcdefgh
"
"
&
lt
;
"
"
&
gt
;
"
"
&
amp
;
"
"
&
quot
;
"
"
&
#
39
;
"
"
&
#
39
;
bad
&
#
39
;
"
"
Foo
&
lt
;
T
&
gt
;
&
amp
;
foo
"
"
&
#
39
;
&
quot
;
&
amp
;
&
gt
;
&
lt
;
abc
"
"
"
}
;
const
char
*
dsts2
[
]
=
{
"
a
"
"
abcdefgh
"
"
abcdefgh
&
lt
;
"
"
abcdefgh
&
lt
;
&
gt
;
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
&
#
39
;
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
&
#
39
;
&
#
39
;
bad
&
#
39
;
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
&
#
39
;
&
#
39
;
bad
&
#
39
;
Foo
&
lt
;
T
&
gt
;
&
amp
;
foo
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
&
#
39
;
&
#
39
;
bad
&
#
39
;
Foo
&
lt
;
T
&
gt
;
&
amp
;
"
"
foo
&
#
39
;
&
quot
;
&
amp
;
&
gt
;
&
lt
;
abc
"
"
abcdefgh
&
lt
;
&
gt
;
&
amp
;
&
quot
;
&
#
39
;
&
#
39
;
bad
&
#
39
;
Foo
&
lt
;
T
&
gt
;
&
amp
;
"
"
foo
&
#
39
;
&
quot
;
&
amp
;
&
gt
;
&
lt
;
abc
"
}
;
ASSERT_EQ
(
ArrayLength
(
srcs
)
ArrayLength
(
dsts1
)
)
;
ASSERT_EQ
(
ArrayLength
(
srcs
)
ArrayLength
(
dsts2
)
)
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
srcs
)
;
i
+
+
)
{
nsCString
src
(
srcs
[
i
]
)
;
nsCString
dst
;
nsAppendEscapedHTML
(
src
dst
)
;
ASSERT_TRUE
(
dst
.
Equals
(
dsts1
[
i
]
)
)
;
}
nsCString
dst
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
srcs
)
;
i
+
+
)
{
nsCString
src
(
srcs
[
i
]
)
;
nsAppendEscapedHTML
(
src
dst
)
;
ASSERT_TRUE
(
dst
.
Equals
(
dsts2
[
i
]
)
)
;
}
}
TEST
(
Escape
EscapeSpaces
)
{
nsCString
toEscape
(
"
data
:
\
x0D
\
x0A
spa
ces
\
xC4
\
x9F
"
)
;
nsCString
escaped
;
nsresult
rv
=
NS_EscapeURL
(
toEscape
esc_OnlyNonASCII
escaped
fallible
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
"
data
:
%
0D
%
0A
spa
ces
%
C4
%
9F
"
)
;
escaped
.
Truncate
(
)
;
rv
=
NS_EscapeURL
(
toEscape
esc_OnlyNonASCII
|
esc_Spaces
escaped
fallible
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
"
data
:
%
0D
%
0A
%
20spa
%
20ces
%
C4
%
9F
"
)
;
}
TEST
(
Escape
AppleNSURLEscapeHash
)
{
nsCString
toEscape
(
"
#
"
)
;
nsCString
escaped
;
bool
isEscapedOK
=
NS_Escape
(
toEscape
escaped
url_AppleExtra
)
;
EXPECT_EQ
(
isEscapedOK
true
)
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
"
%
23
"
)
;
}
TEST
(
Escape
AppleNSURLEscapeNoDouble
)
{
nsCString
toEscape
(
"
%
23
"
)
;
nsCString
escaped
;
bool
isEscapedOK
=
NS_Escape
(
toEscape
escaped
url_AppleExtra
)
;
EXPECT_EQ
(
isEscapedOK
true
)
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
"
%
23
"
)
;
}
TEST
(
Escape
AppleNSURLEscapeURL
)
{
nsCString
toEscape
(
"
https
:
/
/
chat
.
mozilla
.
org
/
#
/
room
/
#
macdev
:
mozilla
.
org
"
)
;
nsCString
escaped
;
nsresult
rv
=
NS_GetSpecWithNSURLEncoding
(
escaped
toEscape
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STREQ
(
escaped
.
BeginReading
(
)
"
https
:
/
/
chat
.
mozilla
.
org
/
#
/
room
/
%
23macdev
%
3Amozilla
.
org
"
)
;
}
TEST
(
Escape
AppleNSURLEscapeURLDouble
)
{
const
nsCString
toEscape
(
"
https
:
/
/
chat
.
mozilla
.
org
/
#
/
room
/
%
23macdev
%
3Amozilla
.
org
"
)
;
nsCString
escaped
;
nsresult
rv
=
NS_GetSpecWithNSURLEncoding
(
escaped
toEscape
)
;
EXPECT_EQ
(
rv
NS_OK
)
;
EXPECT_STREQ
(
toEscape
.
BeginReading
(
)
escaped
.
BeginReading
(
)
)
;
}
