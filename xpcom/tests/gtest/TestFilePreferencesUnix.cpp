#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
FilePreferences
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
using
namespace
mozilla
;
TEST
(
TestFilePreferencesUnix
Parsing
)
{
#
define
kBlacklisted
"
/
tmp
/
blacklisted
"
#
define
kBlacklistedDir
"
/
tmp
/
blacklisted
/
"
#
define
kBlacklistedFile
"
/
tmp
/
blacklisted
/
file
"
#
define
kOther
"
/
tmp
/
other
"
#
define
kOtherDir
"
/
tmp
/
other
/
"
#
define
kOtherFile
"
/
tmp
/
other
/
file
"
#
define
kAllowed
"
/
tmp
/
allowed
"
auto
cleanup
=
MakeScopeExit
(
[
&
]
{
nsresult
rv
=
Preferences
:
:
ClearUser
(
"
network
.
file
.
path_blacklist
"
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
FilePreferences
:
:
InitPrefs
(
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklisted
)
)
true
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklistedDir
)
)
true
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklistedFile
)
)
true
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kAllowed
)
)
true
)
;
}
)
;
auto
CheckPrefs
=
[
]
(
const
nsACString
&
aPaths
)
{
nsresult
rv
;
rv
=
Preferences
:
:
SetCString
(
"
network
.
file
.
path_blacklist
"
aPaths
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
FilePreferences
:
:
InitPrefs
(
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklistedDir
)
)
false
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklistedDir
)
)
false
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklistedFile
)
)
false
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kBlacklisted
)
)
false
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kAllowed
)
)
true
)
;
}
;
CheckPrefs
(
NS_LITERAL_CSTRING
(
kBlacklisted
)
)
;
CheckPrefs
(
NS_LITERAL_CSTRING
(
kBlacklisted
"
"
kOther
)
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kOtherFile
)
)
false
)
;
CheckPrefs
(
NS_LITERAL_CSTRING
(
kBlacklisted
"
"
kOther
"
"
)
)
;
ASSERT_EQ
(
FilePreferences
:
:
IsAllowedPath
(
NS_LITERAL_CSTRING
(
kOtherFile
)
)
false
)
;
}
TEST
(
TestFilePreferencesUnix
Simple
)
{
nsAutoCString
tempPath
;
nsCOMPtr
<
nsIFile
>
blacklistedDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
blacklistedDir
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
blacklistedDir
-
>
GetNativePath
(
tempPath
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
blacklistedDir
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
blacklisted_dir
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
auto
cleanup
=
MakeScopeExit
(
[
&
]
{
nsresult
rv
=
Preferences
:
:
ClearUser
(
"
network
.
file
.
path_blacklist
"
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
FilePreferences
:
:
InitPrefs
(
)
;
rv
=
blacklistedDir
-
>
Remove
(
true
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
}
)
;
rv
=
blacklistedDir
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
0666
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
nsCOMPtr
<
nsIFile
>
blacklistedFile
;
rv
=
blacklistedDir
-
>
Clone
(
getter_AddRefs
(
blacklistedFile
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
blacklistedFile
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
test_file
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
blacklistedFile
-
>
Create
(
nsIFile
:
:
NORMAL_FILE_TYPE
0666
)
;
nsAutoCString
blackListPath
;
rv
=
blacklistedDir
-
>
GetNativePath
(
blackListPath
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
Preferences
:
:
SetCString
(
"
network
.
file
.
path_blacklist
"
blackListPath
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
FilePreferences
:
:
InitPrefs
(
)
;
int64_t
size
;
rv
=
blacklistedFile
-
>
GetFileSize
(
&
size
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
bool
exists
;
rv
=
blacklistedFile
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
dirEnumerator
;
rv
=
blacklistedDir
-
>
GetDirectoryEntries
(
getter_AddRefs
(
dirEnumerator
)
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
nsCOMPtr
<
nsIFile
>
newPath
;
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
newPath
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
.
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
blacklisted_dir
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
test_file
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
newPath
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendRelativeNativePath
(
NS_LITERAL_CSTRING
(
"
.
/
blacklisted_dir
/
file
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
newPath
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendRelativeNativePath
(
NS_LITERAL_CSTRING
(
"
allowed
/
.
.
/
blacklisted_dir
/
file
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
newPath
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
allowed
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
.
.
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
blacklisted_dir
"
)
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
newPath
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
nsAutoCString
trickyPath
(
tempPath
)
;
trickyPath
.
AppendLiteral
(
"
/
allowed
/
.
.
/
blacklisted_dir
/
file
"
)
;
rv
=
newPath
-
>
InitWithNativePath
(
trickyPath
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
trickyPath
=
tempPath
;
trickyPath
.
AppendLiteral
(
"
/
.
/
blacklisted_dir
/
file
"
)
;
rv
=
newPath
-
>
InitWithNativePath
(
trickyPath
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
trickyPath
=
tempPath
;
trickyPath
.
AppendLiteral
(
"
/
/
blacklisted_dir
/
file
"
)
;
rv
=
newPath
-
>
InitWithNativePath
(
trickyPath
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
trickyPath
.
Truncate
(
)
;
trickyPath
.
AppendLiteral
(
"
/
/
"
)
;
trickyPath
.
Append
(
tempPath
)
;
trickyPath
.
AppendLiteral
(
"
/
blacklisted_dir
/
file
"
)
;
rv
=
newPath
-
>
InitWithNativePath
(
trickyPath
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
trickyPath
.
Truncate
(
)
;
trickyPath
.
AppendLiteral
(
"
/
/
"
)
;
trickyPath
.
Append
(
tempPath
)
;
trickyPath
.
AppendLiteral
(
"
/
/
blacklisted_dir
/
file
"
)
;
rv
=
newPath
-
>
InitWithNativePath
(
trickyPath
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
nsAutoCString
blacklistDirPath
(
blackListPath
)
;
blacklistDirPath
.
Append
(
"
/
"
)
;
rv
=
Preferences
:
:
SetCString
(
"
network
.
file
.
path_blacklist
"
blacklistDirPath
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
FilePreferences
:
:
InitPrefs
(
)
;
rv
=
blacklistedDir
-
>
Exists
(
&
exists
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
rv
=
blacklistedDir
-
>
GetDirectoryEntries
(
getter_AddRefs
(
dirEnumerator
)
)
;
ASSERT_EQ
(
rv
NS_ERROR_FILE_ACCESS_DENIED
)
;
}
