#
include
<
stdlib
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
Helpers
.
h
"
#
include
"
mozilla
/
SeekableStreamWrapper
.
h
"
#
include
"
nsIPipe
.
h
"
static
void
NewSeekablePipe
(
nsIInputStream
*
*
aReader
nsIOutputStream
*
*
aWriter
)
{
nsCOMPtr
<
nsIAsyncInputStream
>
reader
;
nsCOMPtr
<
nsIAsyncOutputStream
>
writer
;
nsresult
rv
=
NS_NewPipe2
(
getter_AddRefs
(
reader
)
getter_AddRefs
(
writer
)
true
true
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
nsISeekableStream
>
seekable
=
do_QueryInterface
(
reader
)
;
EXPECT_FALSE
(
seekable
)
;
nsCOMPtr
<
nsIInputStream
>
wrapped
;
rv
=
mozilla
:
:
SeekableStreamWrapper
:
:
MaybeWrap
(
do_AddRef
(
reader
)
getter_AddRefs
(
wrapped
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
wrapped
.
forget
(
aReader
)
;
writer
.
forget
(
aWriter
)
;
}
TEST
(
SeekableStreamWrapper
NoWrap
)
{
nsTArray
<
char
>
inputData
;
testing
:
:
CreateData
(
4096
inputData
)
;
nsDependentCSubstring
inputString
(
inputData
.
Elements
(
)
inputData
.
Length
(
)
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
nsresult
rv
=
NS_NewCStringInputStream
(
getter_AddRefs
(
stream
)
inputString
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
nsIInputStream
>
wrapped
;
rv
=
mozilla
:
:
SeekableStreamWrapper
:
:
MaybeWrap
(
do_AddRef
(
stream
)
getter_AddRefs
(
wrapped
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
stream
wrapped
)
;
testing
:
:
ConsumeAndValidateStream
(
wrapped
inputString
)
;
}
TEST
(
SeekableStreamWrapper
WrapPipe
)
{
nsCOMPtr
<
nsIInputStream
>
reader
;
nsCOMPtr
<
nsIOutputStream
>
writer
;
NewSeekablePipe
(
getter_AddRefs
(
reader
)
getter_AddRefs
(
writer
)
)
;
nsTArray
<
char
>
inputData
;
testing
:
:
CreateData
(
1024
inputData
)
;
uint32_t
numWritten
=
0
;
nsresult
rv
=
writer
-
>
Write
(
inputData
.
Elements
(
)
inputData
.
Length
(
)
&
numWritten
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numWritten
1024u
)
;
nsCOMPtr
<
nsISeekableStream
>
seekable
=
do_QueryInterface
(
reader
)
;
ASSERT_TRUE
(
seekable
)
;
nsCOMPtr
<
nsICloneableInputStream
>
cloneable
=
do_QueryInterface
(
reader
)
;
ASSERT_TRUE
(
cloneable
)
;
ASSERT_TRUE
(
cloneable
-
>
GetCloneable
(
)
)
;
nsCOMPtr
<
nsIInputStream
>
clone1
;
rv
=
cloneable
-
>
Clone
(
getter_AddRefs
(
clone1
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
ASSERT_TRUE
(
clone1
)
;
{
char
buf
[
512
]
;
uint32_t
numRead
=
0
;
rv
=
reader
-
>
Read
(
buf
512
&
numRead
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numRead
512u
)
;
EXPECT_EQ
(
mozilla
:
:
Span
(
inputData
)
.
First
(
512
)
mozilla
:
:
Span
(
buf
)
)
;
}
{
char
buf
[
512
]
;
uint32_t
numRead
=
0
;
rv
=
reader
-
>
Read
(
buf
512
&
numRead
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numRead
512u
)
;
EXPECT_EQ
(
mozilla
:
:
Span
(
inputData
)
.
Last
(
512
)
mozilla
:
:
Span
(
buf
)
)
;
}
{
char
buf
[
1
]
;
uint32_t
numRead
=
0
;
rv
=
reader
-
>
Read
(
buf
1
&
numRead
)
;
EXPECT_EQ
(
rv
NS_BASE_STREAM_WOULD_BLOCK
)
;
}
{
rv
=
seekable
-
>
Seek
(
nsISeekableStream
:
:
NS_SEEK_CUR
-
512
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
char
buf
[
512
]
;
uint32_t
numRead
=
0
;
rv
=
reader
-
>
Read
(
buf
512
&
numRead
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numRead
512u
)
;
EXPECT_EQ
(
mozilla
:
:
Span
(
inputData
)
.
Last
(
512
)
mozilla
:
:
Span
(
buf
)
)
;
}
{
rv
=
seekable
-
>
Seek
(
nsISeekableStream
:
:
NS_SEEK_SET
768
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
char
buf
[
256
]
;
uint32_t
numRead
=
0
;
rv
=
reader
-
>
Read
(
buf
256
&
numRead
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numRead
256u
)
;
EXPECT_EQ
(
mozilla
:
:
Span
(
inputData
)
.
Last
(
256
)
mozilla
:
:
Span
(
buf
)
)
;
}
{
char
buf
[
1024
]
;
uint32_t
numRead
=
0
;
rv
=
clone1
-
>
Read
(
buf
1024
&
numRead
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
numRead
1024u
)
;
EXPECT_EQ
(
mozilla
:
:
Span
(
inputData
)
mozilla
:
:
Span
(
buf
)
)
;
}
rv
=
clone1
-
>
Close
(
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
nsCOMPtr
<
nsISeekableStream
>
clone1Seekable
(
do_QueryInterface
(
clone1
)
)
;
rv
=
clone1Seekable
-
>
Seek
(
nsISeekableStream
:
:
NS_SEEK_SET
0
)
;
EXPECT_TRUE
(
NS_FAILED
(
rv
)
)
;
{
uint64_t
available
=
0
;
rv
=
reader
-
>
Available
(
&
available
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
EXPECT_EQ
(
available
uint64_t
(
0
)
)
;
}
rv
=
writer
-
>
Close
(
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
{
uint64_t
available
=
0
;
rv
=
reader
-
>
Available
(
&
available
)
;
EXPECT_EQ
(
rv
NS_BASE_STREAM_CLOSED
)
;
}
rv
=
seekable
-
>
Seek
(
nsISeekableStream
:
:
NS_SEEK_SET
0
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
testing
:
:
ConsumeAndValidateStream
(
reader
inputData
)
;
}
TEST
(
SeekableStreamWrapper
Interfaces
)
{
nsCOMPtr
<
nsIInputStream
>
reader
;
nsCOMPtr
<
nsIOutputStream
>
writer
;
NewSeekablePipe
(
getter_AddRefs
(
reader
)
getter_AddRefs
(
writer
)
)
;
nsCOMPtr
<
nsIAsyncInputStream
>
readerType1
=
do_QueryInterface
(
reader
)
;
EXPECT_TRUE
(
readerType1
)
;
nsCOMPtr
<
nsITellableStream
>
readerType2
=
do_QueryInterface
(
reader
)
;
EXPECT_TRUE
(
readerType2
)
;
nsCOMPtr
<
nsISeekableStream
>
readerType3
=
do_QueryInterface
(
reader
)
;
EXPECT_TRUE
(
readerType3
)
;
nsCOMPtr
<
nsICloneableInputStream
>
readerType4
=
do_QueryInterface
(
reader
)
;
EXPECT_TRUE
(
readerType4
)
;
nsCOMPtr
<
nsIBufferedInputStream
>
readerType5
=
do_QueryInterface
(
reader
)
;
EXPECT_TRUE
(
readerType5
)
;
}
