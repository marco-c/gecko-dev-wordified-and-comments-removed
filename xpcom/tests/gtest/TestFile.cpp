#
include
"
prio
.
h
"
#
include
"
prsystem
.
h
"
#
include
"
nsIFile
.
h
"
#
ifdef
XP_WIN
#
include
"
nsILocalFileWin
.
h
"
#
endif
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
ifdef
XP_WIN
bool
gTestWithPrefix_Win
=
false
;
#
endif
static
bool
VerifyResult
(
nsresult
aRV
const
char
*
aMsg
)
{
bool
failed
=
NS_FAILED
(
aRV
)
;
EXPECT_FALSE
(
failed
)
<
<
aMsg
<
<
"
rv
=
"
<
<
std
:
:
hex
<
<
(
unsigned
int
)
aRV
;
return
!
failed
;
}
#
ifdef
XP_WIN
static
void
SetUseDOSDevicePathSyntax
(
nsIFile
*
aFile
)
{
if
(
gTestWithPrefix_Win
)
{
nsresult
rv
;
nsCOMPtr
<
nsILocalFileWin
>
winFile
=
do_QueryInterface
(
aFile
&
rv
)
;
VerifyResult
(
rv
"
Querying
nsILocalFileWin
"
)
;
MOZ_ASSERT
(
winFile
)
;
winFile
-
>
SetUseDOSDevicePathSyntax
(
true
)
;
}
}
#
endif
static
already_AddRefed
<
nsIFile
>
NewFile
(
nsIFile
*
aBase
)
{
nsresult
rv
;
nsCOMPtr
<
nsIFile
>
file
=
do_CreateInstance
(
NS_LOCAL_FILE_CONTRACTID
&
rv
)
;
VerifyResult
(
rv
"
Creating
nsIFile
"
)
;
rv
=
file
-
>
InitWithFile
(
aBase
)
;
VerifyResult
(
rv
"
InitWithFile
"
)
;
#
ifdef
XP_WIN
SetUseDOSDevicePathSyntax
(
file
)
;
#
endif
return
file
.
forget
(
)
;
}
template
<
typename
char_type
>
static
nsTString
<
char_type
>
FixName
(
const
char_type
*
aName
)
{
nsTString
<
char_type
>
name
;
for
(
uint32_t
i
=
0
;
aName
[
i
]
;
+
+
i
)
{
char_type
ch
=
aName
[
i
]
;
#
if
defined
(
XP_WIN
)
if
(
ch
=
=
'
/
'
)
{
ch
=
'
\
\
'
;
}
#
endif
name
.
Append
(
ch
)
;
}
return
name
;
}
static
bool
TestInvalidFileName
(
nsIFile
*
aBase
const
char
*
aName
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
EXPECT_FALSE
(
NS_SUCCEEDED
(
rv
)
)
<
<
"
AppendNative
with
invalid
filename
"
<
<
name
.
get
(
)
;
return
false
;
}
return
true
;
}
static
bool
TestCreate
(
nsIFile
*
aBase
const
char
*
aName
int32_t
aType
int32_t
aPerm
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
EXPECT_FALSE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
already
exists
"
;
if
(
exists
)
{
return
false
;
}
rv
=
file
-
>
Create
(
aType
aPerm
)
;
if
(
!
VerifyResult
(
rv
"
Create
"
)
)
return
false
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
created
"
;
if
(
!
exists
)
{
return
false
;
}
return
true
;
}
static
bool
TestCreateUnique
(
nsIFile
*
aBase
const
char
*
aName
int32_t
aType
int32_t
aPerm
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
existsBefore
;
rv
=
file
-
>
Exists
(
&
existsBefore
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
rv
=
file
-
>
CreateUnique
(
aType
aPerm
)
;
if
(
!
VerifyResult
(
rv
"
Create
"
)
)
return
false
;
bool
existsAfter
;
rv
=
file
-
>
Exists
(
&
existsAfter
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_TRUE
(
existsAfter
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
created
"
;
if
(
!
existsAfter
)
{
return
false
;
}
if
(
existsBefore
)
{
nsAutoCString
leafName
;
rv
=
file
-
>
GetNativeLeafName
(
leafName
)
;
if
(
!
VerifyResult
(
rv
"
GetNativeLeafName
"
)
)
return
false
;
EXPECT_FALSE
(
leafName
.
Equals
(
name
)
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
given
a
new
name
by
CreateUnique
"
;
if
(
leafName
.
Equals
(
name
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
TestDeleteOnClose
(
nsIFile
*
aBase
const
char
*
aName
int32_t
aFlags
int32_t
aPerm
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
EXPECT_FALSE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
already
exists
"
;
if
(
exists
)
{
return
false
;
}
PRFileDesc
*
fileDesc
;
rv
=
file
-
>
OpenNSPRFileDesc
(
aFlags
|
nsIFile
:
:
DELETE_ON_CLOSE
aPerm
&
fileDesc
)
;
if
(
!
VerifyResult
(
rv
"
OpenNSPRFileDesc
"
)
)
return
false
;
PRStatus
status
=
PR_Close
(
fileDesc
)
;
EXPECT_EQ
(
status
PR_SUCCESS
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
could
not
be
closed
"
;
if
(
status
!
=
PR_SUCCESS
)
{
return
false
;
}
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_FALSE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
removed
on
close
"
;
if
(
exists
)
{
return
false
;
}
return
true
;
}
static
bool
TestRemove
(
nsIFile
*
aBase
const
char
*
aName
bool
aRecursive
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
;
if
(
!
exists
)
{
return
false
;
}
rv
=
file
-
>
Remove
(
aRecursive
)
;
if
(
!
VerifyResult
(
rv
"
Remove
"
)
)
return
false
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_FALSE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
removed
"
;
if
(
exists
)
{
return
false
;
}
return
true
;
}
static
bool
TestMove
(
nsIFile
*
aBase
nsIFile
*
aDestDir
const
char
*
aName
const
char
*
aNewName
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
;
if
(
!
exists
)
{
return
false
;
}
nsCOMPtr
<
nsIFile
>
newFile
=
NewFile
(
file
)
;
nsCString
newName
=
FixName
(
aNewName
)
;
rv
=
newFile
-
>
MoveToNative
(
aDestDir
newName
)
;
if
(
!
VerifyResult
(
rv
"
MoveToNative
"
)
)
return
false
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_FALSE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
not
moved
"
;
if
(
exists
)
{
return
false
;
}
file
=
NewFile
(
aDestDir
)
;
if
(
!
file
)
return
false
;
rv
=
file
-
>
AppendNative
(
newName
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
equal
;
rv
=
file
-
>
Equals
(
newFile
&
equal
)
;
if
(
!
VerifyResult
(
rv
"
Equals
"
)
)
return
false
;
EXPECT_TRUE
(
equal
)
<
<
"
File
object
was
not
updated
to
destination
"
;
if
(
!
equal
)
{
return
false
;
}
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
new
after
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
<
<
"
Destination
file
"
<
<
newName
.
get
(
)
<
<
"
was
not
created
"
;
if
(
!
exists
)
{
return
false
;
}
return
true
;
}
static
bool
TestCopy
(
nsIFile
*
aBase
nsIFile
*
aDestDir
const
char
*
aName
const
char
*
aNewName
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
nsCString
name
=
FixName
(
aName
)
;
nsresult
rv
=
file
-
>
AppendNative
(
name
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
bool
exists
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
before
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
;
if
(
!
exists
)
{
return
false
;
}
nsCOMPtr
<
nsIFile
>
newFile
=
NewFile
(
file
)
;
nsCString
newName
=
FixName
(
aNewName
)
;
rv
=
newFile
-
>
CopyToNative
(
aDestDir
newName
)
;
if
(
!
VerifyResult
(
rv
"
MoveToNative
"
)
)
return
false
;
bool
equal
;
rv
=
file
-
>
Equals
(
newFile
&
equal
)
;
if
(
!
VerifyResult
(
rv
"
Equals
"
)
)
return
false
;
EXPECT_TRUE
(
equal
)
<
<
"
File
object
updated
unexpectedly
"
;
if
(
!
equal
)
{
return
false
;
}
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
after
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
<
<
"
File
"
<
<
name
.
get
(
)
<
<
"
was
removed
"
;
if
(
!
exists
)
{
return
false
;
}
file
=
NewFile
(
aDestDir
)
;
if
(
!
file
)
return
false
;
rv
=
file
-
>
AppendNative
(
newName
)
;
if
(
!
VerifyResult
(
rv
"
AppendNative
"
)
)
return
false
;
rv
=
file
-
>
Exists
(
&
exists
)
;
if
(
!
VerifyResult
(
rv
"
Exists
(
new
after
)
"
)
)
return
false
;
EXPECT_TRUE
(
exists
)
<
<
"
Destination
file
"
<
<
newName
.
get
(
)
<
<
"
was
not
created
"
;
if
(
!
exists
)
{
return
false
;
}
return
true
;
}
static
bool
TestParent
(
nsIFile
*
aBase
nsIFile
*
aStart
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aStart
)
;
if
(
!
file
)
return
false
;
nsCOMPtr
<
nsIFile
>
parent
;
nsresult
rv
=
file
-
>
GetParent
(
getter_AddRefs
(
parent
)
)
;
VerifyResult
(
rv
"
GetParent
"
)
;
bool
equal
;
rv
=
parent
-
>
Equals
(
aBase
&
equal
)
;
VerifyResult
(
rv
"
Equals
"
)
;
EXPECT_TRUE
(
equal
)
<
<
"
Incorrect
parent
"
;
if
(
!
equal
)
{
return
false
;
}
return
true
;
}
static
bool
TestNormalizeNativePath
(
nsIFile
*
aBase
nsIFile
*
aStart
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aStart
)
;
if
(
!
file
)
return
false
;
auto
path
=
file
-
>
NativePath
(
)
;
#
ifdef
XP_WIN
path
.
Append
(
FixName
(
u
"
/
.
/
.
.
"
)
)
;
nsresult
rv
=
file
-
>
InitWithPath
(
path
)
;
VerifyResult
(
rv
"
InitWithPath
"
)
;
#
else
path
.
Append
(
FixName
(
"
/
.
/
.
.
"
)
)
;
nsresult
rv
=
file
-
>
InitWithNativePath
(
path
)
;
VerifyResult
(
rv
"
InitWithNativePath
"
)
;
#
endif
rv
=
file
-
>
Normalize
(
)
;
VerifyResult
(
rv
"
Normalize
"
)
;
path
=
file
-
>
NativePath
(
)
;
auto
basePath
=
aBase
-
>
NativePath
(
)
;
VerifyResult
(
rv
"
GetNativePath
(
base
)
"
)
;
EXPECT_TRUE
(
path
.
Equals
(
basePath
)
)
<
<
"
Incorrect
normalization
:
"
<
<
file
-
>
HumanReadablePath
(
)
.
get
(
)
<
<
"
-
"
<
<
aBase
-
>
HumanReadablePath
(
)
.
get
(
)
;
if
(
!
path
.
Equals
(
basePath
)
)
{
return
false
;
}
return
true
;
}
static
bool
TestDiskSpaceAvailable
(
nsIFile
*
aBase
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
int64_t
diskSpaceAvailable
=
0
;
nsresult
rv
=
file
-
>
GetDiskSpaceAvailable
(
&
diskSpaceAvailable
)
;
VerifyResult
(
rv
"
GetDiskSpaceAvailable
"
)
;
EXPECT_GE
(
diskSpaceAvailable
0
)
;
return
true
;
}
static
bool
TestDiskCapacity
(
nsIFile
*
aBase
)
{
nsCOMPtr
<
nsIFile
>
file
=
NewFile
(
aBase
)
;
if
(
!
file
)
return
false
;
int64_t
diskCapacity
=
0
;
nsresult
rv
=
file
-
>
GetDiskCapacity
(
&
diskCapacity
)
;
VerifyResult
(
rv
"
GetDiskCapacity
"
)
;
EXPECT_GE
(
diskCapacity
0
)
;
return
true
;
}
static
void
SetupAndTestFunctions
(
const
nsAString
&
aDirName
bool
aTestCreateUnique
bool
aTestNormalize
)
{
nsCOMPtr
<
nsIFile
>
base
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
base
)
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
"
Getting
temp
directory
"
)
)
;
#
ifdef
XP_WIN
SetUseDOSDevicePathSyntax
(
base
)
;
#
endif
rv
=
base
-
>
Append
(
aDirName
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
nsPrintfCString
(
"
Appending
%
s
to
temp
directory
name
"
NS_ConvertUTF16toUTF8
(
aDirName
)
.
get
(
)
)
.
get
(
)
)
)
;
base
-
>
Remove
(
true
)
;
rv
=
base
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
0700
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
"
Creating
temp
directory
"
)
)
;
if
(
aTestNormalize
)
{
rv
=
base
-
>
Normalize
(
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
"
Normalizing
temp
directory
name
"
)
)
;
}
nsCOMPtr
<
nsIFile
>
subdir
=
NewFile
(
base
)
;
ASSERT_TRUE
(
subdir
)
;
rv
=
subdir
-
>
AppendNative
(
nsDependentCString
(
"
subdir
"
)
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
"
Appending
'
subdir
'
to
test
dir
name
"
)
)
;
nsString
leafName
;
rv
=
base
-
>
GetLeafName
(
leafName
)
;
ASSERT_TRUE
(
VerifyResult
(
rv
"
Getting
leafName
"
)
)
;
ASSERT_TRUE
(
leafName
.
Equals
(
aDirName
)
)
;
ASSERT_TRUE
(
TestInvalidFileName
(
base
"
a
/
b
"
)
)
;
ASSERT_TRUE
(
TestParent
(
base
subdir
)
)
;
ASSERT_TRUE
(
TestCreate
(
base
"
file
.
txt
"
nsIFile
:
:
NORMAL_FILE_TYPE
0600
)
)
;
ASSERT_TRUE
(
TestRemove
(
base
"
file
.
txt
"
false
)
)
;
ASSERT_TRUE
(
TestCreate
(
base
"
subdir
"
nsIFile
:
:
DIRECTORY_TYPE
0700
)
)
;
ASSERT_TRUE
(
TestCreate
(
base
"
file
.
txt
"
nsIFile
:
:
NORMAL_FILE_TYPE
0600
)
)
;
ASSERT_TRUE
(
TestMove
(
base
base
"
file
.
txt
"
"
file2
.
txt
"
)
)
;
ASSERT_TRUE
(
TestCopy
(
base
base
"
file2
.
txt
"
"
file3
.
txt
"
)
)
;
ASSERT_TRUE
(
TestMove
(
base
subdir
"
file2
.
txt
"
"
file2
.
txt
"
)
)
;
ASSERT_TRUE
(
TestMove
(
subdir
base
"
file2
.
txt
"
"
file4
.
txt
"
)
)
;
ASSERT_TRUE
(
TestCopy
(
base
subdir
"
file4
.
txt
"
"
file5
.
txt
"
)
)
;
if
(
aTestNormalize
)
{
ASSERT_TRUE
(
TestNormalizeNativePath
(
base
subdir
)
)
;
}
ASSERT_TRUE
(
TestRemove
(
base
"
subdir
"
true
)
)
;
if
(
aTestCreateUnique
)
{
ASSERT_TRUE
(
TestCreateUnique
(
base
"
foo
"
nsIFile
:
:
NORMAL_FILE_TYPE
0600
)
)
;
ASSERT_TRUE
(
TestCreateUnique
(
base
"
foo
"
nsIFile
:
:
NORMAL_FILE_TYPE
0600
)
)
;
ASSERT_TRUE
(
TestCreateUnique
(
base
"
bar
.
xx
"
nsIFile
:
:
DIRECTORY_TYPE
0700
)
)
;
ASSERT_TRUE
(
TestCreateUnique
(
base
"
bar
.
xx
"
nsIFile
:
:
DIRECTORY_TYPE
0700
)
)
;
}
ASSERT_TRUE
(
TestDeleteOnClose
(
base
"
file7
.
txt
"
PR_RDWR
|
PR_CREATE_FILE
0600
)
)
;
ASSERT_TRUE
(
TestDiskSpaceAvailable
(
base
)
)
;
ASSERT_TRUE
(
TestDiskCapacity
(
base
)
)
;
rv
=
base
-
>
Remove
(
true
)
;
VerifyResult
(
rv
"
Cleaning
up
temp
directory
"
)
;
}
TEST
(
TestFile
Unprefixed
)
{
#
ifdef
XP_WIN
gTestWithPrefix_Win
=
false
;
#
endif
SetupAndTestFunctions
(
u
"
mozfiletests
"
_ns
true
true
)
;
#
ifdef
XP_WIN
gTestWithPrefix_Win
=
true
;
#
endif
}
TEST
(
TestFile
PrefixedOnWin
)
{
SetupAndTestFunctions
(
u
"
mozfiletests
"
_ns
true
true
)
;
}
TEST
(
TestFile
PrefixedOnWin_PathExceedsMaxPath
)
{
nsString
dirName
;
dirName
.
AssignLiteral
(
"
mozfiletests
"
)
;
for
(
uint32_t
i
=
255
-
dirName
.
Length
(
)
;
i
>
0
;
-
-
i
)
{
dirName
.
AppendLiteral
(
"
a
"
)
;
}
SetupAndTestFunctions
(
dirName
false
true
)
;
}
TEST
(
TestFile
PrefixedOnWin_ComponentEndsWithPeriod
)
{
SetupAndTestFunctions
(
u
"
mozfiletests
.
"
_ns
true
false
)
;
}
