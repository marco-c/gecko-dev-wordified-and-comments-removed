#
include
"
nsISupports
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
gtest
/
gtest
.
h
"
static
void
testResult
(
nsresult
rv
)
{
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
<
<
"
0x
"
<
<
std
:
:
hex
<
<
(
int
)
rv
;
}
class
TestObserver
final
:
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
explicit
TestObserver
(
const
nsAString
&
name
)
:
mName
(
name
)
mObservations
(
0
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
nsString
mName
;
int
mObservations
;
static
int
sTotalObservations
;
nsString
mExpectedData
;
private
:
~
TestObserver
(
)
{
}
}
;
NS_IMPL_ISUPPORTS
(
TestObserver
nsIObserver
nsISupportsWeakReference
)
int
TestObserver
:
:
sTotalObservations
;
NS_IMETHODIMP
TestObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
someData
)
{
mObservations
+
+
;
sTotalObservations
+
+
;
if
(
!
mExpectedData
.
IsEmpty
(
)
)
{
EXPECT_TRUE
(
mExpectedData
.
Equals
(
someData
)
)
;
}
return
NS_OK
;
}
static
nsISupports
*
ToSupports
(
TestObserver
*
aObs
)
{
return
static_cast
<
nsIObserver
*
>
(
aObs
)
;
}
static
void
TestExpectedCount
(
nsIObserverService
*
svc
const
char
*
topic
size_t
expected
)
{
nsCOMPtr
<
nsISimpleEnumerator
>
e
;
nsresult
rv
=
svc
-
>
EnumerateObservers
(
topic
getter_AddRefs
(
e
)
)
;
testResult
(
rv
)
;
EXPECT_TRUE
(
e
)
;
bool
hasMore
=
false
;
rv
=
e
-
>
HasMoreElements
(
&
hasMore
)
;
testResult
(
rv
)
;
if
(
expected
=
=
0
)
{
EXPECT_FALSE
(
hasMore
)
;
return
;
}
size_t
count
=
0
;
while
(
hasMore
)
{
count
+
+
;
nsCOMPtr
<
nsISupports
>
supports
;
e
-
>
GetNext
(
getter_AddRefs
(
supports
)
)
;
ASSERT_TRUE
(
supports
)
;
rv
=
e
-
>
HasMoreElements
(
&
hasMore
)
;
testResult
(
rv
)
;
}
EXPECT_EQ
(
count
expected
)
;
}
TEST
(
ObserverService
Creation
)
{
nsresult
rv
;
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
&
rv
)
;
ASSERT_EQ
(
rv
NS_OK
)
;
ASSERT_TRUE
(
svc
)
;
}
TEST
(
ObserverService
AddObserver
)
{
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
nsresult
rv
=
svc
-
>
AddObserver
(
a
"
Foo
"
false
)
;
testResult
(
rv
)
;
RefPtr
<
TestObserver
>
b
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
B
"
)
)
;
rv
=
svc
-
>
AddObserver
(
b
"
Bar
"
true
)
;
testResult
(
rv
)
;
}
TEST
(
ObserverService
RemoveObserver
)
{
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
RefPtr
<
TestObserver
>
b
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
B
"
)
)
;
RefPtr
<
TestObserver
>
c
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
C
"
)
)
;
svc
-
>
AddObserver
(
a
"
Foo
"
false
)
;
svc
-
>
AddObserver
(
b
"
Foo
"
true
)
;
nsresult
rv
=
svc
-
>
RemoveObserver
(
a
"
Bar
"
)
;
ASSERT_TRUE
(
NS_FAILED
(
rv
)
)
;
testResult
(
svc
-
>
RemoveObserver
(
a
"
Foo
"
)
)
;
testResult
(
svc
-
>
RemoveObserver
(
b
"
Foo
"
)
)
;
rv
=
svc
-
>
RemoveObserver
(
c
"
Foo
"
)
;
ASSERT_TRUE
(
NS_FAILED
(
rv
)
)
;
}
TEST
(
ObserverService
EnumerateEmpty
)
{
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
TestExpectedCount
(
svc
"
A
"
0
)
;
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Foo
"
false
)
)
;
TestExpectedCount
(
svc
"
A
"
0
)
;
}
TEST
(
ObserverService
Enumerate
)
{
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
const
size_t
kFooCount
=
10
;
for
(
size_t
i
=
0
;
i
<
kFooCount
;
i
+
+
)
{
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Foo
"
false
)
)
;
}
const
size_t
kBarCount
=
kFooCount
/
2
;
for
(
size_t
i
=
0
;
i
<
kBarCount
;
i
+
+
)
{
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Bar
"
false
)
)
;
}
TestExpectedCount
(
svc
"
Foo
"
kFooCount
)
;
TestExpectedCount
(
svc
"
Bar
"
kBarCount
)
;
}
TEST
(
ObserverService
EnumerateWeakRefs
)
{
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
const
size_t
kFooCount
=
10
;
for
(
size_t
i
=
0
;
i
<
kFooCount
;
i
+
+
)
{
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Foo
"
true
)
)
;
}
TestExpectedCount
(
svc
"
Foo
"
0
)
;
for
(
size_t
i
=
0
;
i
<
kFooCount
;
i
+
+
)
{
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
RefPtr
<
TestObserver
>
b
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
B
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Foo
"
true
)
)
;
testResult
(
svc
-
>
AddObserver
(
b
"
Foo
"
false
)
)
;
}
TestExpectedCount
(
svc
"
Foo
"
kFooCount
)
;
RefPtr
<
TestObserver
>
a
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
A
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
a
"
Foo
"
true
)
)
;
RefPtr
<
TestObserver
>
b
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
B
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
b
"
Foo
"
true
)
)
;
TestExpectedCount
(
svc
"
Foo
"
kFooCount
+
2
)
;
}
TEST
(
ObserverService
TestNotify
)
{
nsCString
topicA
;
topicA
.
Assign
(
"
topic
-
A
"
)
;
nsCString
topicB
;
topicB
.
Assign
(
"
topic
-
B
"
)
;
nsCOMPtr
<
nsIObserverService
>
svc
=
do_CreateInstance
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
RefPtr
<
TestObserver
>
aObserver
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
Observer
-
A
"
)
)
;
RefPtr
<
TestObserver
>
bObserver
=
new
TestObserver
(
NS_LITERAL_STRING
(
"
Observer
-
B
"
)
)
;
testResult
(
svc
-
>
AddObserver
(
aObserver
topicA
.
get
(
)
false
)
)
;
testResult
(
svc
-
>
AddObserver
(
bObserver
topicA
.
get
(
)
false
)
)
;
testResult
(
svc
-
>
AddObserver
(
bObserver
topicB
.
get
(
)
false
)
)
;
NS_NAMED_LITERAL_STRING
(
dataA
"
Testing
Notify
(
observer
-
A
topic
-
A
)
"
)
;
aObserver
-
>
mExpectedData
=
dataA
;
bObserver
-
>
mExpectedData
=
dataA
;
nsresult
rv
=
svc
-
>
NotifyObservers
(
ToSupports
(
aObserver
)
topicA
.
get
(
)
dataA
.
get
(
)
)
;
testResult
(
rv
)
;
ASSERT_EQ
(
aObserver
-
>
mObservations
1
)
;
ASSERT_EQ
(
bObserver
-
>
mObservations
1
)
;
NS_NAMED_LITERAL_STRING
(
dataB
"
Testing
Notify
(
observer
-
B
topic
-
B
)
"
)
;
bObserver
-
>
mExpectedData
=
dataB
;
rv
=
svc
-
>
NotifyObservers
(
ToSupports
(
bObserver
)
topicB
.
get
(
)
dataB
.
get
(
)
)
;
testResult
(
rv
)
;
ASSERT_EQ
(
aObserver
-
>
mObservations
1
)
;
ASSERT_EQ
(
bObserver
-
>
mObservations
2
)
;
testResult
(
svc
-
>
RemoveObserver
(
aObserver
topicA
.
get
(
)
)
)
;
bObserver
-
>
mExpectedData
=
dataA
;
rv
=
svc
-
>
NotifyObservers
(
ToSupports
(
aObserver
)
topicA
.
get
(
)
dataA
.
get
(
)
)
;
testResult
(
rv
)
;
ASSERT_EQ
(
aObserver
-
>
mObservations
1
)
;
ASSERT_EQ
(
bObserver
-
>
mObservations
3
)
;
testResult
(
svc
-
>
RemoveObserver
(
bObserver
topicA
.
get
(
)
)
)
;
rv
=
svc
-
>
NotifyObservers
(
ToSupports
(
aObserver
)
topicA
.
get
(
)
dataA
.
get
(
)
)
;
testResult
(
rv
)
;
ASSERT_EQ
(
aObserver
-
>
mObservations
1
)
;
ASSERT_EQ
(
bObserver
-
>
mObservations
3
)
;
}
