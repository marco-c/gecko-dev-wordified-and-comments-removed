#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
gtest
/
MozAssertions
.
h
"
namespace
TestAutoOwningEventTarget
{
using
namespace
mozilla
;
#
ifdef
MOZ_THREAD_SAFETY_OWNERSHIP_CHECKS_SUPPORTED
namespace
{
static
MozExternalRefCountType
GetRefCount
(
nsISupports
*
aSupports
)
{
aSupports
-
>
AddRef
(
)
;
return
aSupports
-
>
Release
(
)
;
}
void
CheckAutoOwningEventTarget
(
nsISerialEventTarget
*
aSerialEventTarget
const
nsAutoOwningEventTarget
&
aAutoOwningEventTarget
const
bool
aIsCurrent
)
{
ASSERT_TRUE
(
aSerialEventTarget
)
;
ASSERT_EQ
(
aAutoOwningEventTarget
.
IsCurrentThread
(
)
aIsCurrent
)
;
{
const
auto
refCountBefore
=
GetRefCount
(
aSerialEventTarget
)
;
{
nsAutoOwningEventTarget
copyConstructedEventTarget
(
aAutoOwningEventTarget
)
;
ASSERT_EQ
(
copyConstructedEventTarget
.
IsCurrentThread
(
)
aIsCurrent
)
;
}
const
auto
refCountAfter
=
GetRefCount
(
aSerialEventTarget
)
;
ASSERT_GE
(
refCountAfter
refCountBefore
)
;
ASSERT_EQ
(
refCountAfter
-
refCountBefore
0u
)
;
}
{
const
auto
refCountBefore
=
GetRefCount
(
aSerialEventTarget
)
;
{
nsAutoOwningEventTarget
copyAssignedEventTarget
;
ASSERT_TRUE
(
copyAssignedEventTarget
.
IsCurrentThread
(
)
)
;
copyAssignedEventTarget
=
aAutoOwningEventTarget
;
ASSERT_EQ
(
copyAssignedEventTarget
.
IsCurrentThread
(
)
aIsCurrent
)
;
}
const
auto
refCountAfter
=
GetRefCount
(
aSerialEventTarget
)
;
ASSERT_GE
(
refCountAfter
refCountBefore
)
;
ASSERT_EQ
(
refCountAfter
-
refCountBefore
0u
)
;
}
}
}
TEST
(
TestAutoOwningEventTarget
DISABLED_Simple
)
{
{
nsAutoOwningEventTarget
autoOwningEventTarget
;
ASSERT_NO_FATAL_FAILURE
(
CheckAutoOwningEventTarget
(
GetCurrentSerialEventTarget
(
)
autoOwningEventTarget
true
)
)
;
}
}
TEST
(
TestAutoOwningEventTarget
DISABLED_TaskQueue
)
{
nsresult
rv
;
nsCOMPtr
<
nsIEventTarget
>
threadPool
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
ASSERT_NS_SUCCEEDED
(
rv
)
;
auto
taskQueue
=
TaskQueue
:
:
Create
(
threadPool
.
forget
(
)
"
TestTaskQueue
"
false
)
;
nsAutoOwningEventTarget
autoOwningEventTarget
;
ASSERT_NS_SUCCEEDED
(
SyncRunnable
:
:
DispatchToThread
(
taskQueue
NS_NewRunnableFunction
(
"
TestRunnable
"
[
taskQueue
&
autoOwningEventTarget
]
{
{
ASSERT_NO_FATAL_FAILURE
(
CheckAutoOwningEventTarget
(
taskQueue
autoOwningEventTarget
false
)
)
;
}
{
nsAutoOwningEventTarget
autoOwningEventTarget
;
ASSERT_NO_FATAL_FAILURE
(
CheckAutoOwningEventTarget
(
taskQueue
autoOwningEventTarget
true
)
)
;
}
}
)
)
)
;
}
#
endif
}
