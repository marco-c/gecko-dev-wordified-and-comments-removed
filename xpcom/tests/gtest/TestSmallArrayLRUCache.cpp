#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SmallArrayLRUCache
.
h
"
#
include
<
algorithm
>
#
include
<
cstring
>
#
include
<
utility
>
using
Key
=
unsigned
;
struct
Value
{
Value
(
)
:
m
(
unsigned
(
-
1
)
)
{
}
explicit
Value
(
unsigned
a
)
:
m
(
a
)
{
}
bool
operator
=
=
(
const
Value
&
aOther
)
const
{
return
m
=
=
aOther
.
m
;
}
bool
operator
!
=
(
const
Value
&
aOther
)
const
{
return
m
!
=
aOther
.
m
;
}
unsigned
m
;
}
;
constexpr
static
unsigned
CacheSize
=
8
;
using
TestCache
=
mozilla
:
:
SmallArrayLRUCache
<
Key
Value
CacheSize
>
;
template
<
typename
T
>
struct
Boxed
{
constexpr
static
size_t
GuardSize
=
std
:
:
max
(
sizeof
(
T
)
size_t
(
256
)
)
;
struct
Guard
{
char
mGuard
[
GuardSize
]
;
explicit
Guard
(
char
aValue
)
{
memset
(
&
mGuard
aValue
GuardSize
)
;
}
void
Check
(
char
aValue
)
{
for
(
const
char
&
c
:
mGuard
)
{
ASSERT_EQ
(
c
aValue
)
;
}
}
}
;
Guard
mGuardBefore
;
T
mObject
;
Guard
mGuardAfter
;
template
<
typename
.
.
.
Ts
>
explicit
Boxed
(
Ts
&
&
.
.
.
aTs
)
:
mGuardBefore
(
0x5a
)
mObject
(
std
:
:
forward
<
Ts
>
(
aTs
)
.
.
.
)
mGuardAfter
(
0xa5
)
{
Check
(
)
;
}
~
Boxed
(
)
{
Check
(
)
;
}
T
&
Object
(
)
{
return
mObject
;
}
const
T
&
Object
(
)
const
{
return
mObject
;
}
void
Check
(
)
{
mGuardBefore
.
Check
(
0x5a
)
;
mGuardAfter
.
Check
(
0xa5
)
;
}
}
;
TEST
(
SmallArrayLRUCache
FetchOrAdd_KeysFitInCache
)
{
for
(
Key
keys
=
1
;
keys
<
=
CacheSize
;
+
+
keys
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
for
(
Key
i
=
0
;
i
<
keys
;
+
+
i
)
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
for
(
Key
i
=
0
;
i
<
CacheSize
*
3
;
+
+
i
)
{
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
}
}
TEST
(
SmallArrayLRUCache
Add_FetchOrAdd_KeysFitInCache
)
{
for
(
Key
keys
=
1
;
keys
<
=
CacheSize
;
+
+
keys
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
for
(
Key
i
=
0
;
i
<
keys
;
+
+
i
)
{
cache
.
Add
(
i
Value
{
i
}
)
;
boxedCache
.
Check
(
)
;
}
for
(
Key
i
=
0
;
i
<
CacheSize
*
3
;
+
+
i
)
{
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
}
}
TEST
(
SmallArrayLRUCache
FetchOrAdd_KeysDoNotFitInCache
)
{
for
(
Key
keys
=
CacheSize
+
1
;
keys
<
=
CacheSize
*
2
;
+
+
keys
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
for
(
Key
i
=
0
;
i
<
keys
;
+
+
i
)
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
for
(
Key
i
=
0
;
i
<
CacheSize
*
3
;
+
+
i
)
{
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
}
}
TEST
(
SmallArrayLRUCache
Add_FetchOrAdd_KeysDoNotFitInCache
)
{
for
(
Key
keys
=
CacheSize
+
1
;
keys
<
=
CacheSize
*
2
;
+
+
keys
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
for
(
Key
i
=
0
;
i
<
keys
;
+
+
i
)
{
cache
.
Add
(
i
Value
{
i
}
)
;
boxedCache
.
Check
(
)
;
}
for
(
Key
i
=
0
;
i
<
CacheSize
*
3
;
+
+
i
)
{
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
i
%
keys
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
i
%
keys
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
i
%
keys
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
}
}
TEST
(
SmallArrayLRUCache
Clear
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
cache
.
Clear
(
)
;
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
TEST
(
SmallArrayLRUCache
Shutdown
)
{
Boxed
<
TestCache
>
boxedCache
;
TestCache
&
cache
=
boxedCache
.
Object
(
)
;
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_FALSE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
cache
.
Shutdown
(
)
;
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
cache
.
Add
(
42
Value
{
4242
}
)
;
boxedCache
.
Check
(
)
;
{
bool
valueFunctionCalled
=
false
;
Value
v
=
cache
.
FetchOrAdd
(
42
[
&
]
(
)
{
valueFunctionCalled
=
true
;
return
Value
{
4242
}
;
}
)
;
ASSERT_EQ
(
v
Value
{
4242
}
)
;
ASSERT_TRUE
(
valueFunctionCalled
)
;
boxedCache
.
Check
(
)
;
}
}
