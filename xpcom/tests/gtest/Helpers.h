#
ifndef
__Helpers_h
#
define
__Helpers_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringStream
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
<
stdint
.
h
>
class
nsIInputStream
;
class
nsIOutputStream
;
namespace
testing
{
void
CreateData
(
uint32_t
aNumBytes
nsTArray
<
char
>
&
aDataOut
)
;
void
Write
(
nsIOutputStream
*
aStream
const
nsTArray
<
char
>
&
aData
uint32_t
aOffset
uint32_t
aNumBytes
)
;
void
WriteAllAndClose
(
nsIOutputStream
*
aStream
const
nsTArray
<
char
>
&
aData
)
;
void
ConsumeAndValidateStream
(
nsIInputStream
*
aStream
const
nsTArray
<
char
>
&
aExpectedData
)
;
void
ConsumeAndValidateStream
(
nsIInputStream
*
aStream
const
nsACString
&
aExpectedData
)
;
class
OutputStreamCallback
final
:
public
nsIOutputStreamCallback
{
public
:
OutputStreamCallback
(
)
;
bool
Called
(
)
const
{
return
mCalled
;
}
private
:
~
OutputStreamCallback
(
)
;
bool
mCalled
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOUTPUTSTREAMCALLBACK
}
;
class
InputStreamCallback
final
:
public
nsIInputStreamCallback
{
public
:
InputStreamCallback
(
)
;
bool
Called
(
)
const
{
return
mCalled
;
}
private
:
~
InputStreamCallback
(
)
;
bool
mCalled
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIINPUTSTREAMCALLBACK
}
;
class
AsyncStringStream
final
:
public
nsIAsyncInputStream
{
nsCOMPtr
<
nsIInputStream
>
mStream
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINPUTSTREAM
NS_DECL_NSIASYNCINPUTSTREAM
explicit
AsyncStringStream
(
const
nsACString
&
aBuffer
)
;
private
:
~
AsyncStringStream
(
)
=
default
;
void
MaybeExecCallback
(
nsIInputStreamCallback
*
aCallback
nsIEventTarget
*
aEventTarget
)
;
nsCOMPtr
<
nsIInputStreamCallback
>
mCallback
;
nsCOMPtr
<
nsIEventTarget
>
mCallbackEventTarget
;
}
;
}
#
endif
