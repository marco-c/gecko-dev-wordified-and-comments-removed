#
include
<
stdio
.
h
>
#
include
<
algorithm
>
#
ifndef
mozilla_algorithm_h
#
error
"
failed
to
wrap
<
algorithm
>
"
#
endif
#
include
<
vector
>
#
ifndef
mozilla_vector_h
#
error
"
failed
to
wrap
<
vector
>
"
#
endif
#
ifdef
_MSC_VER
#
pragma
warning
(
disable
:
4530
)
#
define
TRY
try
#
define
CATCH
(
e
)
catch
(
e
)
#
else
#
define
TRY
#
define
CATCH
(
e
)
if
(
0
)
#
endif
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
gtest
/
MozHelpers
.
h
"
void
ShouldAbort
(
)
{
ZERO_GDB_SLEEP
(
)
;
mozilla
:
:
gtest
:
:
DisableCrashReporter
(
)
;
std
:
:
vector
<
int
>
v
;
TRY
{
(
void
)
v
.
at
(
1
)
;
}
CATCH
(
const
std
:
:
out_of_range
&
)
{
fputs
(
"
TEST
-
FAIL
|
TestSTLWrappers
.
cpp
|
caught
an
exception
?
\
n
"
stderr
)
;
return
;
}
fputs
(
"
TEST
-
FAIL
|
TestSTLWrappers
.
cpp
|
didn
'
t
abort
(
)
?
\
n
"
stderr
)
;
}
#
ifdef
XP_WIN
TEST
(
STLWrapper
DISABLED_ShouldAbortDeathTest
)
#
else
TEST
(
STLWrapper
ShouldAbortDeathTest
)
#
endif
{
ASSERT_DEATH_IF_SUPPORTED
(
ShouldAbort
(
)
"
terminate
called
after
throwing
an
instance
of
"
"
'
std
:
:
out_of_range
'
|
vector
:
:
_M_range_check
"
)
;
}
