#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
gtest
/
gtest
.
h
"
using
namespace
mozilla
;
class
nsThreadSafeAutoRefCntRunner
final
:
public
Runnable
{
public
:
NS_IMETHOD
Run
(
)
final
{
for
(
int
i
=
0
;
i
<
10000
;
i
+
+
)
{
if
(
+
+
sRefCnt
=
=
1
)
{
sIncToOne
+
+
;
}
if
(
-
-
sRefCnt
=
=
0
)
{
sDecToZero
+
+
;
}
}
return
NS_OK
;
}
static
ThreadSafeAutoRefCnt
sRefCnt
;
static
Atomic
<
uint32_t
Relaxed
>
sIncToOne
;
static
Atomic
<
uint32_t
Relaxed
>
sDecToZero
;
nsThreadSafeAutoRefCntRunner
(
)
:
Runnable
(
"
nsThreadSafeAutoRefCntRunner
"
)
{
}
private
:
~
nsThreadSafeAutoRefCntRunner
(
)
=
default
;
}
;
ThreadSafeAutoRefCnt
nsThreadSafeAutoRefCntRunner
:
:
sRefCnt
;
Atomic
<
uint32_t
Relaxed
>
nsThreadSafeAutoRefCntRunner
:
:
sIncToOne
(
0
)
;
Atomic
<
uint32_t
Relaxed
>
nsThreadSafeAutoRefCntRunner
:
:
sDecToZero
(
0
)
;
TEST
(
AutoRefCnt
ThreadSafeAutoRefCntBalance
)
{
static
const
size_t
kThreadCount
=
4
;
nsCOMPtr
<
nsIThread
>
threads
[
kThreadCount
]
;
for
(
size_t
i
=
0
;
i
<
kThreadCount
;
i
+
+
)
{
nsresult
rv
=
NS_NewNamedThread
(
"
AutoRefCnt
Test
"
getter_AddRefs
(
threads
[
i
]
)
new
nsThreadSafeAutoRefCntRunner
)
;
EXPECT_TRUE
(
NS_SUCCEEDED
(
rv
)
)
;
}
for
(
size_t
i
=
0
;
i
<
kThreadCount
;
i
+
+
)
{
threads
[
i
]
-
>
Shutdown
(
)
;
}
EXPECT_EQ
(
nsThreadSafeAutoRefCntRunner
:
:
sRefCnt
nsrefcnt
(
0
)
)
;
EXPECT_EQ
(
nsThreadSafeAutoRefCntRunner
:
:
sIncToOne
nsThreadSafeAutoRefCntRunner
:
:
sDecToZero
)
;
}
