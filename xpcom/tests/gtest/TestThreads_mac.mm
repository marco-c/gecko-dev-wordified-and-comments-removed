#
include
<
Foundation
/
Foundation
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIThreadManager
.
h
"
using
namespace
mozilla
;
bool
UiThreadRunsRunLoop
(
bool
aIsUiThread
)
{
nsCOMPtr
<
nsIThread
>
thread
;
nsIThreadManager
:
:
ThreadCreationOptions
options
;
options
.
isUiThread
=
aIsUiThread
;
MOZ_ALWAYS_SUCCEEDS
(
NS_NewNamedThread
(
"
Testing
Thread
"
getter_AddRefs
(
thread
)
nullptr
options
)
)
;
__block
bool
blockRanInRunLoop
=
false
;
{
NSRunLoop
*
loop
=
nil
;
auto
syncRunnable
=
MakeRefPtr
<
SyncRunnable
>
(
NS_NewRunnableFunction
(
__func__
[
&
]
{
loop
=
NSRunLoop
.
currentRunLoop
;
}
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
syncRunnable
-
>
DispatchToThread
(
thread
)
)
;
[
loop
performBlock
:
^
void
(
)
{
blockRanInRunLoop
=
true
;
}
]
;
}
thread
-
>
Shutdown
(
)
;
return
blockRanInRunLoop
;
}
TEST
(
ThreadsMac
OptionsIsUiThread
)
{
const
bool
isUiThread
=
true
;
const
bool
isNoUiThread
=
false
;
EXPECT_TRUE
(
UiThreadRunsRunLoop
(
isUiThread
)
)
;
EXPECT_FALSE
(
UiThreadRunsRunLoop
(
isNoUiThread
)
)
;
}
