#
include
"
mozilla
/
AvailableMemoryWatcherUtils
.
h
"
#
include
<
fstream
>
#
include
<
iostream
>
using
namespace
mozilla
;
const
char
*
kMemInfoPath
=
"
/
proc
/
meminfo
"
;
const
char
*
kTestfilePath
=
"
testdata
"
;
void
TestFromProc
(
)
{
MemoryInfo
memInfo
{
0
0
}
;
ReadMemoryFile
(
kMemInfoPath
memInfo
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memTotal
!
=
0
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memAvailable
!
=
0
)
;
}
void
TestFromFile
(
)
{
MemoryInfo
memInfo
{
0
0
}
;
std
:
:
ofstream
aFile
(
kTestfilePath
)
;
aFile
<
<
"
MemTotal
:
12345
kB
\
n
"
;
aFile
<
<
"
MemFree
:
99999
kB
\
n
"
;
aFile
<
<
"
MemAvailable
:
54321
kB
\
n
"
;
aFile
.
close
(
)
;
ReadMemoryFile
(
kTestfilePath
memInfo
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memTotal
=
=
12345
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memAvailable
=
=
54321
)
;
remove
(
kTestfilePath
)
;
}
void
TestInvalidFile
(
)
{
MemoryInfo
memInfo
{
0
0
}
;
std
:
:
ofstream
aFile
(
kTestfilePath
)
;
aFile
<
<
"
foo
:
12345
kB
\
n
"
;
aFile
<
<
"
bar
"
;
aFile
.
close
(
)
;
ReadMemoryFile
(
kTestfilePath
memInfo
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memTotal
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
memInfo
.
memAvailable
=
=
0
)
;
remove
(
kTestfilePath
)
;
}
int
main
(
)
{
TestFromProc
(
)
;
TestFromFile
(
)
;
TestInvalidFile
(
)
;
return
0
;
}
