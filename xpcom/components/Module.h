#
ifndef
mozilla_Module_h
#
define
mozilla_Module_h
#
include
"
nscore
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIFactory
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
namespace
mozilla
{
struct
Module
{
static
const
unsigned
int
kVersion
=
64
;
struct
CIDEntry
;
typedef
already_AddRefed
<
nsIFactory
>
(
*
GetFactoryProcPtr
)
(
const
Module
&
module
const
CIDEntry
&
entry
)
;
typedef
nsresult
(
*
ConstructorProcPtr
)
(
nsISupports
*
aOuter
const
nsIID
&
aIID
void
*
*
aResult
)
;
typedef
nsresult
(
*
LoadFuncPtr
)
(
)
;
typedef
void
(
*
UnloadFuncPtr
)
(
)
;
enum
ProcessSelector
{
ANY_PROCESS
=
0x0
MAIN_PROCESS_ONLY
=
0x1
CONTENT_PROCESS_ONLY
=
0x2
ALLOW_IN_GPU_PROCESS
=
0x4
}
;
struct
CIDEntry
{
const
nsCID
*
cid
;
bool
service
;
GetFactoryProcPtr
getFactoryProc
;
ConstructorProcPtr
constructorProc
;
ProcessSelector
processSelector
;
}
;
struct
ContractIDEntry
{
const
char
*
contractid
;
nsID
const
*
cid
;
ProcessSelector
processSelector
;
}
;
struct
CategoryEntry
{
const
char
*
category
;
const
char
*
entry
;
const
char
*
value
;
}
;
unsigned
int
mVersion
;
const
CIDEntry
*
mCIDs
;
const
ContractIDEntry
*
mContractIDs
;
const
CategoryEntry
*
mCategoryEntries
;
GetFactoryProcPtr
getFactoryProc
;
LoadFuncPtr
loadProc
;
UnloadFuncPtr
unloadProc
;
ProcessSelector
selector
;
}
;
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
define
NSMODULE_NAME
(
_name
)
_name
#
#
_NSModule
#
if
defined
(
_MSC_VER
)
#
pragma
section
(
"
.
kPStaticModules
M
"
read
)
#
pragma
comment
(
linker
"
/
merge
:
.
kPStaticModules
=
.
rdata
"
)
#
define
NSMODULE_SECTION
__declspec
(
allocate
(
"
.
kPStaticModules
M
"
)
dllexport
)
#
elif
defined
(
__GNUC__
)
#
if
defined
(
__ELF__
)
#
define
NSMODULE_SECTION
__attribute__
(
(
section
(
"
kPStaticModules
"
)
visibility
(
"
default
"
)
)
)
#
elif
defined
(
__MACH__
)
#
define
NSMODULE_SECTION
__attribute__
(
(
section
(
"
__DATA
.
kPStaticModules
"
)
visibility
(
"
default
"
)
)
)
#
elif
defined
(
_WIN32
)
#
define
NSMODULE_SECTION
__attribute__
(
(
section
(
"
kPStaticModules
"
)
dllexport
)
)
#
endif
#
endif
#
if
!
defined
(
NSMODULE_SECTION
)
#
error
Do
not
know
how
to
define
sections
.
#
endif
#
if
defined
(
MOZ_HAVE_ASAN_BLACKLIST
)
#
define
NSMODULE_ASAN_BLACKLIST
__attribute__
(
(
no_sanitize_address
)
)
#
else
#
define
NSMODULE_ASAN_BLACKLIST
#
endif
#
define
NSMODULE_DEFN
(
_name
)
extern
NSMODULE_SECTION
NSMODULE_ASAN_BLACKLIST
mozilla
:
:
Module
const
*
const
NSMODULE_NAME
(
_name
)
#
else
#
error
Building
binary
XPCOM
components
is
not
supported
anymore
.
#
endif
#
endif
