#
ifndef
mozilla_Module_h
#
define
mozilla_Module_h
#
include
"
nscore
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIFactory
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
struct
Module
{
static
const
unsigned
int
kVersion
=
75
;
struct
CIDEntry
;
typedef
already_AddRefed
<
nsIFactory
>
(
*
GetFactoryProcPtr
)
(
const
Module
&
module
const
CIDEntry
&
entry
)
;
typedef
nsresult
(
*
ConstructorProcPtr
)
(
nsISupports
*
aOuter
const
nsIID
&
aIID
void
*
*
aResult
)
;
typedef
nsresult
(
*
LoadFuncPtr
)
(
)
;
typedef
void
(
*
UnloadFuncPtr
)
(
)
;
enum
ProcessSelector
{
ANY_PROCESS
=
0x0
MAIN_PROCESS_ONLY
=
0x1
CONTENT_PROCESS_ONLY
=
0x2
ALLOW_IN_GPU_PROCESS
=
0x4
ALLOW_IN_VR_PROCESS
=
0x8
ALLOW_IN_SOCKET_PROCESS
=
0x10
ALLOW_IN_RDD_PROCESS
=
0x20
ALLOW_IN_GPU_AND_VR_PROCESS
=
ALLOW_IN_GPU_PROCESS
|
ALLOW_IN_VR_PROCESS
ALLOW_IN_GPU_AND_SOCKET_PROCESS
=
ALLOW_IN_GPU_PROCESS
|
ALLOW_IN_SOCKET_PROCESS
ALLOW_IN_GPU_VR_AND_SOCKET_PROCESS
=
ALLOW_IN_GPU_PROCESS
|
ALLOW_IN_VR_PROCESS
|
ALLOW_IN_SOCKET_PROCESS
ALLOW_IN_RDD_AND_SOCKET_PROCESS
=
ALLOW_IN_RDD_PROCESS
|
ALLOW_IN_SOCKET_PROCESS
ALLOW_IN_GPU_RDD_AND_SOCKET_PROCESS
=
ALLOW_IN_GPU_PROCESS
|
ALLOW_IN_RDD_PROCESS
|
ALLOW_IN_SOCKET_PROCESS
ALLOW_IN_GPU_RDD_VR_AND_SOCKET_PROCESS
=
ALLOW_IN_GPU_PROCESS
|
ALLOW_IN_RDD_PROCESS
|
ALLOW_IN_VR_PROCESS
|
ALLOW_IN_SOCKET_PROCESS
}
;
static
constexpr
size_t
kMaxProcessSelector
=
size_t
(
ProcessSelector
:
:
ALLOW_IN_GPU_RDD_VR_AND_SOCKET_PROCESS
)
;
struct
CIDEntry
{
const
nsCID
*
cid
;
bool
service
;
GetFactoryProcPtr
getFactoryProc
;
ConstructorProcPtr
constructorProc
;
ProcessSelector
processSelector
;
}
;
struct
ContractIDEntry
{
const
char
*
contractid
;
nsID
const
*
cid
;
ProcessSelector
processSelector
;
}
;
struct
CategoryEntry
{
const
char
*
category
;
const
char
*
entry
;
const
char
*
value
;
}
;
unsigned
int
mVersion
;
const
CIDEntry
*
mCIDs
;
const
ContractIDEntry
*
mContractIDs
;
const
CategoryEntry
*
mCategoryEntries
;
GetFactoryProcPtr
getFactoryProc
;
LoadFuncPtr
loadProc
;
UnloadFuncPtr
unloadProc
;
ProcessSelector
selector
;
}
;
}
#
endif
