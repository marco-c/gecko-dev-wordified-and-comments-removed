#
ifndef
nsServiceManagerUtils_h__
#
define
nsServiceManagerUtils_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
inline
nsGetServiceByCID
do_GetService
(
const
nsCID
&
aCID
)
{
return
nsGetServiceByCID
(
aCID
)
;
}
inline
nsGetServiceByCIDWithError
do_GetService
(
const
nsCID
&
aCID
nsresult
*
aError
)
{
return
nsGetServiceByCIDWithError
(
aCID
aError
)
;
}
inline
nsGetServiceByContractID
do_GetService
(
const
char
*
aContractID
)
{
return
nsGetServiceByContractID
(
aContractID
)
;
}
inline
nsGetServiceByContractIDWithError
do_GetService
(
const
char
*
aContractID
nsresult
*
aError
)
{
return
nsGetServiceByContractIDWithError
(
aContractID
aError
)
;
}
nsresult
CallGetService
(
const
nsCID
&
aClass
const
nsIID
&
aIID
void
*
*
aResult
)
;
nsresult
CallGetService
(
const
char
*
aContractID
const
nsIID
&
aIID
void
*
*
aResult
)
;
template
<
class
DestinationType
>
inline
nsresult
CallGetService
(
const
nsCID
&
aClass
DestinationType
*
*
aDestination
)
{
MOZ_ASSERT
(
aDestination
"
null
parameter
"
)
;
return
CallGetService
(
aClass
NS_GET_TEMPLATE_IID
(
DestinationType
)
reinterpret_cast
<
void
*
*
>
(
aDestination
)
)
;
}
template
<
class
DestinationType
>
inline
nsresult
CallGetService
(
const
char
*
aContractID
DestinationType
*
*
aDestination
)
{
MOZ_ASSERT
(
aContractID
"
null
parameter
"
)
;
MOZ_ASSERT
(
aDestination
"
null
parameter
"
)
;
return
CallGetService
(
aContractID
NS_GET_TEMPLATE_IID
(
DestinationType
)
reinterpret_cast
<
void
*
*
>
(
aDestination
)
)
;
}
#
endif
