#
include
"
gtest
/
gtest
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsIObserverService
.
h
"
extern
"
C
"
nsIObserverService
*
Rust_ObserveFromRust
(
)
;
TEST
(
RustXpcom
ObserverFromRust
)
{
nsCOMPtr
<
nsIObserverService
>
rust
=
Rust_ObserveFromRust
(
)
;
nsCOMPtr
<
nsIObserverService
>
cpp
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
EXPECT_EQ
(
rust
cpp
)
;
}
extern
"
C
"
void
Rust_ImplementRunnableInRust
(
bool
*
aItWorked
nsIRunnable
*
*
aRunnable
)
;
TEST
(
RustXpcom
ImplementRunnableInRust
)
{
bool
itWorked
=
false
;
nsCOMPtr
<
nsIRunnable
>
runnable
;
Rust_ImplementRunnableInRust
(
&
itWorked
getter_AddRefs
(
runnable
)
)
;
EXPECT_TRUE
(
runnable
)
;
EXPECT_FALSE
(
itWorked
)
;
runnable
-
>
Run
(
)
;
EXPECT_TRUE
(
itWorked
)
;
}
extern
"
C
"
void
Rust_GetMultipleInterfaces
(
nsIRunnable
*
*
aRunnable
nsIObserver
*
*
aObserver
)
;
TEST
(
RustXpcom
DynamicCastVoid
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
;
nsCOMPtr
<
nsIObserver
>
observer
;
Rust_GetMultipleInterfaces
(
getter_AddRefs
(
runnable
)
getter_AddRefs
(
observer
)
)
;
EXPECT_NE
(
static_cast
<
void
*
>
(
runnable
.
get
(
)
)
static_cast
<
void
*
>
(
observer
.
get
(
)
)
)
;
nsCOMPtr
<
nsISupports
>
runnableSupports
=
do_QueryInterface
(
runnable
)
;
nsCOMPtr
<
nsISupports
>
observerSupports
=
do_QueryInterface
(
observer
)
;
EXPECT_EQ
(
runnableSupports
.
get
(
)
observerSupports
.
get
(
)
)
;
#
ifndef
XP_WIN
EXPECT_EQ
(
dynamic_cast
<
void
*
>
(
runnable
.
get
(
)
)
dynamic_cast
<
void
*
>
(
observer
.
get
(
)
)
)
;
EXPECT_EQ
(
dynamic_cast
<
void
*
>
(
observer
.
get
(
)
)
static_cast
<
void
*
>
(
observerSupports
.
get
(
)
)
)
;
#
endif
}
