use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
ptr
;
use
{
GetterAddrefs
RefPtr
XpCom
}
;
use
interfaces
:
:
{
nsIComponentManager
nsIComponentRegistrar
nsIServiceManager
}
;
macro_rules
!
try_opt
{
(
e
:
expr
)
=
>
{
match
e
{
Some
(
x
)
=
>
x
None
=
>
return
None
}
}
;
}
#
[
inline
]
pub
fn
component_manager
(
)
-
>
Option
<
RefPtr
<
nsIComponentManager
>
>
{
unsafe
{
RefPtr
:
:
from_raw
(
Gecko_GetComponentManager
(
)
)
}
}
#
[
inline
]
pub
fn
service_manager
(
)
-
>
Option
<
RefPtr
<
nsIServiceManager
>
>
{
unsafe
{
RefPtr
:
:
from_raw
(
Gecko_GetServiceManager
(
)
)
}
}
#
[
inline
]
pub
fn
component_registrar
(
)
-
>
Option
<
RefPtr
<
nsIComponentRegistrar
>
>
{
unsafe
{
RefPtr
:
:
from_raw
(
Gecko_GetComponentRegistrar
(
)
)
}
}
#
[
inline
]
pub
fn
create_instance
<
T
:
XpCom
>
(
id
:
&
CStr
)
-
>
Option
<
RefPtr
<
T
>
>
{
unsafe
{
let
mut
ga
=
GetterAddrefs
:
:
<
T
>
:
:
new
(
)
;
if
try_opt
!
(
component_manager
(
)
)
.
CreateInstanceByContractID
(
id
.
as_ptr
(
)
ptr
:
:
null
(
)
&
T
:
:
IID
ga
.
void_ptr
(
)
)
.
succeeded
(
)
{
ga
.
refptr
(
)
}
else
{
None
}
}
}
#
[
inline
]
pub
fn
get_service
<
T
:
XpCom
>
(
id
:
&
CStr
)
-
>
Option
<
RefPtr
<
T
>
>
{
unsafe
{
let
mut
ga
=
GetterAddrefs
:
:
<
T
>
:
:
new
(
)
;
if
try_opt
!
(
service_manager
(
)
)
.
GetServiceByContractID
(
id
.
as_ptr
(
)
&
T
:
:
IID
ga
.
void_ptr
(
)
)
.
succeeded
(
)
{
ga
.
refptr
(
)
}
else
{
None
}
}
}
extern
"
C
"
{
fn
Gecko_GetComponentManager
(
)
-
>
*
const
nsIComponentManager
;
fn
Gecko_GetServiceManager
(
)
-
>
*
const
nsIServiceManager
;
fn
Gecko_GetComponentRegistrar
(
)
-
>
*
const
nsIComponentRegistrar
;
}
