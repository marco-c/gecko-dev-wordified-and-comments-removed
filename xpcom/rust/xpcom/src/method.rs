extern
crate
nserror
;
use
nserror
:
:
{
nsresult
NS_ERROR_NULL_POINTER
}
;
#
[
macro_export
]
macro_rules
!
xpcom_method
{
(
ensure_param
name
:
ident
)
=
>
{
let
name
=
match
crate
:
:
Ensure
:
:
ensure
(
name
)
{
Ok
(
val
)
=
>
val
Err
(
result
)
=
>
return
result
}
;
}
;
(
rust_name
:
ident
=
>
xpcom_name
:
ident
(
(
param_name
:
ident
:
param_type
:
ty
)
*
)
-
>
*
const
retval
:
ty
)
=
>
{
#
[
allow
(
non_snake_case
)
]
unsafe
fn
xpcom_name
(
&
self
(
param_name
:
param_type
)
*
retval
:
*
mut
*
const
retval
)
-
>
nsresult
{
(
xpcom_method
!
(
ensure_param
param_name
)
;
)
*
match
self
.
rust_name
(
(
param_name
)
*
)
{
Ok
(
val
)
=
>
{
val
.
forget
(
&
mut
*
retval
)
;
NS_OK
}
Err
(
error
)
=
>
{
error
.
into
(
)
}
}
}
}
;
(
rust_name
:
ident
=
>
xpcom_name
:
ident
(
(
param_name
:
ident
:
param_type
:
ty
)
*
)
-
>
nsAString
)
=
>
{
#
[
allow
(
non_snake_case
)
]
unsafe
fn
xpcom_name
(
&
self
(
param_name
:
param_type
)
*
retval
:
*
mut
nsAString
)
-
>
nsresult
{
(
xpcom_method
!
(
ensure_param
param_name
)
;
)
*
match
self
.
rust_name
(
(
param_name
)
*
)
{
Ok
(
val
)
=
>
{
(
*
retval
)
.
assign
(
&
val
)
;
NS_OK
}
Err
(
error
)
=
>
{
error
.
into
(
)
}
}
}
}
;
(
rust_name
:
ident
=
>
xpcom_name
:
ident
(
(
param_name
:
ident
:
param_type
:
ty
)
*
)
-
>
nsACString
)
=
>
{
#
[
allow
(
non_snake_case
)
]
unsafe
fn
xpcom_name
(
&
self
(
param_name
:
param_type
)
*
retval
:
*
mut
nsACString
)
-
>
nsresult
{
(
xpcom_method
!
(
ensure_param
param_name
)
;
)
*
match
self
.
rust_name
(
(
param_name
)
*
)
{
Ok
(
val
)
=
>
{
(
*
retval
)
.
assign
(
&
val
)
;
NS_OK
}
Err
(
error
)
=
>
{
error
.
into
(
)
}
}
}
}
;
(
rust_name
:
ident
=
>
xpcom_name
:
ident
(
(
param_name
:
ident
:
param_type
:
ty
)
*
)
-
>
retval
:
ty
)
=
>
{
#
[
allow
(
non_snake_case
)
]
unsafe
fn
xpcom_name
(
&
self
(
param_name
:
param_type
)
*
retval
:
*
mut
retval
)
-
>
nsresult
{
(
xpcom_method
!
(
ensure_param
param_name
)
;
)
*
match
self
.
rust_name
(
(
param_name
)
*
)
{
Ok
(
val
)
=
>
{
*
retval
=
val
;
NS_OK
}
Err
(
error
)
=
>
{
error
.
into
(
)
}
}
}
}
;
(
rust_name
:
ident
=
>
xpcom_name
:
ident
(
(
param_name
:
ident
:
param_type
:
ty
)
*
)
)
=
>
{
#
[
allow
(
non_snake_case
)
]
unsafe
fn
xpcom_name
(
&
self
(
param_name
:
param_type
)
*
)
-
>
nsresult
{
(
xpcom_method
!
(
ensure_param
param_name
)
;
)
*
match
self
.
rust_name
(
(
param_name
)
*
)
{
Ok
(
_
)
=
>
NS_OK
Err
(
error
)
=
>
{
error
.
into
(
)
}
}
}
}
;
}
#
[
doc
(
hidden
)
]
pub
trait
Ensure
<
T
>
{
unsafe
fn
ensure
(
T
)
-
>
Self
;
}
impl
<
'
a
T
:
'
a
>
Ensure
<
*
const
T
>
for
Result
<
&
'
a
T
nsresult
>
{
unsafe
fn
ensure
(
ptr
:
*
const
T
)
-
>
Result
<
&
'
a
T
nsresult
>
{
if
ptr
.
is_null
(
)
{
Err
(
NS_ERROR_NULL_POINTER
)
}
else
{
Ok
(
&
*
ptr
)
}
}
}
impl
<
'
a
T
:
'
a
>
Ensure
<
*
const
T
>
for
Result
<
Option
<
&
'
a
T
>
nsresult
>
{
unsafe
fn
ensure
(
ptr
:
*
const
T
)
-
>
Result
<
Option
<
&
'
a
T
>
nsresult
>
{
Ok
(
if
ptr
.
is_null
(
)
{
None
}
else
{
Some
(
&
*
ptr
)
}
)
}
}
impl
<
T
:
Copy
>
Ensure
<
T
>
for
Result
<
T
nsresult
>
{
unsafe
fn
ensure
(
copyable
:
T
)
-
>
Result
<
T
nsresult
>
{
Ok
(
copyable
)
}
}
