#
ifndef
nsObjCExceptions_h_
#
define
nsObjCExceptions_h_
#
undef
try
#
undef
catch
class
NSException
;
void
nsObjCExceptionLog
(
NSException
*
aException
)
;
#
define
NS_OBJC_TRY
(
_e
_fail
)
\
try
{
\
_e
;
\
}
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
_fail
;
\
}
#
define
NS_OBJC_TRY_EXPR
(
_e
_fail
)
\
(
{
\
typeof
(
_e
)
_tmp
;
\
try
{
\
_tmp
=
(
_e
)
;
\
}
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
_fail
;
\
}
\
_tmp
;
\
}
)
#
define
NS_OBJC_TRY_EXPR_NULL
(
_e
)
NS_OBJC_TRY_EXPR
(
_e
0
)
#
define
NS_OBJC_TRY_IGNORE
(
_e
)
NS_OBJC_TRY
(
_e
)
#
define
NS_OBJC_TRY_ABORT
(
_e
)
\
try
{
\
_e
;
\
}
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
#
define
NS_OBJC_TRY_EXPR_ABORT
(
_e
)
\
(
{
\
typeof
(
_e
)
_tmp
;
\
try
{
\
_tmp
=
(
_e
)
;
\
}
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
\
_tmp
;
\
}
)
#
define
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
try
{
#
define
NS_OBJC_END_TRY_ABORT_BLOCK
\
}
\
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
#
define
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NIL
try
{
#
define
NS_OBJC_END_TRY_ABORT_BLOCK_NIL
\
}
\
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
\
return
nil
;
#
define
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSNULL
try
{
#
define
NS_OBJC_END_TRY_ABORT_BLOCK_NSNULL
\
}
\
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
\
return
nullptr
;
#
define
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
try
{
#
define
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
\
}
\
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
\
return
NS_ERROR_FAILURE
;
#
define
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
try
{
#
define
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
_rv
)
\
}
\
catch
(
NSException
*
_exn
)
{
\
nsObjCExceptionLog
(
_exn
)
;
\
}
\
return
_rv
;
#
endif
