#
include
<
sys
/
sysctl
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
time
.
h
>
#
include
"
AvailableMemoryWatcher
.
h
"
#
include
"
Logging
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsICrashReporter
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsMemoryPressure
.
h
"
#
define
MP_LOG
(
.
.
.
)
MOZ_LOG
(
gMPLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
static
mozilla
:
:
LazyLogModule
gMPLog
(
"
MemoryPressure
"
)
;
namespace
mozilla
{
class
nsAvailableMemoryWatcher
final
:
public
nsAvailableMemoryWatcherBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
nsAvailableMemoryWatcher
(
)
;
nsresult
Init
(
)
override
;
void
OnMemoryPressureChanged
(
MacMemoryPressureLevel
aLevel
)
override
;
void
AddChildAnnotations
(
const
UniquePtr
<
ipc
:
:
CrashReporterHost
>
&
aCrashReporter
)
override
;
private
:
~
nsAvailableMemoryWatcher
(
)
{
}
;
void
OnMemoryPressureChangedInternal
(
MacMemoryPressureLevel
aNewLevel
bool
aIsInitialLevel
)
;
void
InitParentAnnotations
(
)
;
void
UpdateParentAnnotations
(
)
;
void
AddParentAnnotation
(
CrashReporter
:
:
Annotation
aAnnotation
nsAutoCString
aString
)
{
CrashReporter
:
:
AnnotateCrashReport
(
aAnnotation
aString
)
;
}
void
AddParentAnnotation
(
CrashReporter
:
:
Annotation
aAnnotation
uint32_t
aData
)
{
CrashReporter
:
:
AnnotateCrashReport
(
aAnnotation
aData
)
;
}
void
ReadSysctls
(
)
;
bool
mInitialized
;
MacMemoryPressureLevel
mLevel
;
uint32_t
mLevelSysctl
;
static
const
int
kSysctlLevelNormal
=
0x1
;
static
const
int
kSysctlLevelWarning
=
0x2
;
static
const
int
kSysctlLevelCritical
=
0x4
;
int
mAvailMemSysctl
;
nsAutoCString
mLevelStr
;
nsAutoCString
mNormalTimeStr
;
nsAutoCString
mWarningTimeStr
;
nsAutoCString
mCriticalTimeStr
;
}
;
NS_IMPL_ISUPPORTS
(
nsAvailableMemoryWatcher
nsIAvailableMemoryWatcherBase
)
;
nsAvailableMemoryWatcher
:
:
nsAvailableMemoryWatcher
(
)
:
mInitialized
(
false
)
mLevel
(
MacMemoryPressureLevel
:
:
Value
:
:
eUnset
)
mLevelSysctl
(
0xFFFFFFFF
)
mAvailMemSysctl
(
-
1
)
mLevelStr
(
"
Unset
"
)
mNormalTimeStr
(
"
Unset
"
)
mWarningTimeStr
(
"
Unset
"
)
mCriticalTimeStr
(
"
Unset
"
)
{
}
nsresult
nsAvailableMemoryWatcher
:
:
Init
(
)
{
MOZ_ASSERT
(
!
mInitialized
)
;
if
(
mInitialized
)
{
return
NS_ERROR_ALREADY_INITIALIZED
;
}
nsresult
rv
=
nsAvailableMemoryWatcherBase
:
:
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
ReadSysctls
(
)
;
MP_LOG
(
"
Initial
memory
pressure
sysctl
:
%
d
"
mLevelSysctl
)
;
MP_LOG
(
"
Initial
available
memory
sysctl
:
%
d
"
mAvailMemSysctl
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressure
mLevelStr
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureNormalTime
mNormalTimeStr
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureWarningTime
mWarningTimeStr
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureCriticalTime
mCriticalTimeStr
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureSysctl
mLevelSysctl
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
MacAvailableMemorySysctl
mAvailMemSysctl
)
;
MacMemoryPressureLevel
initialLevel
;
switch
(
mLevelSysctl
)
{
case
kSysctlLevelNormal
:
initialLevel
=
MacMemoryPressureLevel
:
:
Value
:
:
eNormal
;
break
;
case
kSysctlLevelWarning
:
initialLevel
=
MacMemoryPressureLevel
:
:
Value
:
:
eWarning
;
break
;
case
kSysctlLevelCritical
:
initialLevel
=
MacMemoryPressureLevel
:
:
Value
:
:
eCritical
;
break
;
default
:
initialLevel
=
MacMemoryPressureLevel
:
:
Value
:
:
eUnexpected
;
}
OnMemoryPressureChangedInternal
(
initialLevel
true
)
;
mInitialized
=
true
;
return
NS_OK
;
}
already_AddRefed
<
nsAvailableMemoryWatcherBase
>
CreateAvailableMemoryWatcher
(
)
{
RefPtr
watcher
(
new
nsAvailableMemoryWatcher
(
)
)
;
watcher
-
>
Init
(
)
;
return
watcher
.
forget
(
)
;
}
void
nsAvailableMemoryWatcher
:
:
UpdateParentAnnotations
(
)
{
time_t
timeChanged
=
time
(
NULL
)
;
nsAutoCString
timeChangedString
;
timeChangedString
=
nsPrintfCString
(
"
%
"
PRIu64
static_cast
<
uint64_t
>
(
timeChanged
)
)
;
nsAutoCString
pressureLevelString
;
Maybe
<
CrashReporter
:
:
Annotation
>
pressureLevelKey
;
switch
(
mLevel
.
GetValue
(
)
)
{
case
MacMemoryPressureLevel
:
:
Value
:
:
eNormal
:
mNormalTimeStr
=
timeChangedString
;
pressureLevelString
=
"
Normal
"
;
pressureLevelKey
.
emplace
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureNormalTime
)
;
break
;
case
MacMemoryPressureLevel
:
:
Value
:
:
eWarning
:
mWarningTimeStr
=
timeChangedString
;
pressureLevelString
=
"
Warning
"
;
pressureLevelKey
.
emplace
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureWarningTime
)
;
break
;
case
MacMemoryPressureLevel
:
:
Value
:
:
eCritical
:
mCriticalTimeStr
=
timeChangedString
;
pressureLevelString
=
"
Critical
"
;
pressureLevelKey
.
emplace
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureCriticalTime
)
;
break
;
default
:
pressureLevelString
=
"
Unexpected
"
;
break
;
}
MP_LOG
(
"
Transitioning
to
%
s
at
time
%
s
"
pressureLevelString
.
get
(
)
timeChangedString
.
get
(
)
)
;
AddParentAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressure
pressureLevelString
)
;
if
(
pressureLevelKey
.
isSome
(
)
)
{
AddParentAnnotation
(
pressureLevelKey
.
value
(
)
timeChangedString
)
;
}
AddParentAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureSysctl
mLevelSysctl
)
;
AddParentAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacAvailableMemorySysctl
mAvailMemSysctl
)
;
}
void
nsAvailableMemoryWatcher
:
:
ReadSysctls
(
)
{
uint32_t
level
;
size_t
size
=
sizeof
(
level
)
;
if
(
sysctlbyname
(
"
kern
.
memorystatus_vm_pressure_level
"
&
level
&
size
NULL
0
)
=
=
-
1
)
{
MP_LOG
(
"
Failure
reading
memory
pressure
sysctl
"
)
;
}
mLevelSysctl
=
level
;
int
availPercent
;
size
=
sizeof
(
availPercent
)
;
if
(
sysctlbyname
(
"
kern
.
memorystatus_level
"
&
availPercent
&
size
NULL
0
)
=
=
-
1
)
{
MP_LOG
(
"
Failure
reading
available
memory
level
"
)
;
}
mAvailMemSysctl
=
availPercent
;
}
void
nsAvailableMemoryWatcher
:
:
OnMemoryPressureChanged
(
MacMemoryPressureLevel
aNewLevel
)
{
MOZ_ASSERT
(
mInitialized
)
;
OnMemoryPressureChangedInternal
(
aNewLevel
false
)
;
}
void
nsAvailableMemoryWatcher
:
:
OnMemoryPressureChangedInternal
(
MacMemoryPressureLevel
aNewLevel
bool
aIsInitialLevel
)
{
MOZ_ASSERT
(
mInitialized
|
|
aIsInitialLevel
)
;
MOZ_ASSERT
(
aNewLevel
.
IsNormal
(
)
|
|
aNewLevel
.
IsWarningOrAbove
(
)
)
;
if
(
mLevel
=
=
aNewLevel
)
{
return
;
}
if
(
mLevel
.
IsUnsetOrNormal
(
)
&
&
aNewLevel
.
IsWarningOrAbove
(
)
)
{
UpdateLowMemoryTimeStamp
(
)
;
}
if
(
mLevel
.
IsWarningOrAbove
(
)
&
&
aNewLevel
.
IsNormal
(
)
)
{
RecordTelemetryEventOnHighMemory
(
)
;
}
mLevel
=
aNewLevel
;
if
(
!
aIsInitialLevel
)
{
ReadSysctls
(
)
;
}
MP_LOG
(
"
level
:
%
s
level
sysctl
:
%
d
available
memory
:
%
d
percent
"
mLevel
.
ToString
(
)
mLevelSysctl
mAvailMemSysctl
)
;
UpdateParentAnnotations
(
)
;
}
void
nsAvailableMemoryWatcher
:
:
AddChildAnnotations
(
const
UniquePtr
<
ipc
:
:
CrashReporterHost
>
&
aCrashReporter
)
{
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressure
mLevelStr
)
;
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureNormalTime
mNormalTimeStr
)
;
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureWarningTime
mWarningTimeStr
)
;
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureCriticalTime
mCriticalTimeStr
)
;
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacMemoryPressureSysctl
mLevelSysctl
)
;
aCrashReporter
-
>
AddAnnotation
(
CrashReporter
:
:
Annotation
:
:
MacAvailableMemorySysctl
mAvailMemSysctl
)
;
}
}
