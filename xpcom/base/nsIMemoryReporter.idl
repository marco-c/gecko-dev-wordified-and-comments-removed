#
include
"
nsISupports
.
idl
"
%
{
C
+
+
#
include
<
stdio
.
h
>
%
}
interface
mozIDOMWindowProxy
;
interface
nsIRunnable
;
interface
nsISimpleEnumerator
;
[
ptr
]
native
FILE
(
FILE
)
;
[
scriptable
function
uuid
(
62ef0e1c
-
dbd6
-
11e3
-
aa75
-
3c970e9f4238
)
]
interface
nsIHandleReportCallback
:
nsISupports
{
void
callback
(
in
ACString
process
in
AUTF8String
path
in
int32_t
kind
in
int32_t
units
in
int64_t
amount
in
AUTF8String
description
in
nsISupports
data
)
;
}
;
[
scriptable
uuid
(
92a36db1
-
46bd
-
4fe6
-
988e
-
47db47236d8b
)
]
interface
nsIMemoryReporter
:
nsISupports
{
void
collectReports
(
in
nsIHandleReportCallback
callback
in
nsISupports
data
in
boolean
anonymize
)
;
const
int32_t
KIND_NONHEAP
=
0
;
const
int32_t
KIND_HEAP
=
1
;
const
int32_t
KIND_OTHER
=
2
;
const
int32_t
UNITS_BYTES
=
0
;
const
int32_t
UNITS_COUNT
=
1
;
const
int32_t
UNITS_COUNT_CUMULATIVE
=
2
;
const
int32_t
UNITS_PERCENTAGE
=
3
;
}
;
[
scriptable
function
uuid
(
548b3909
-
c04d
-
4ca6
-
8466
-
b8bee3837457
)
]
interface
nsIFinishReportingCallback
:
nsISupports
{
void
callback
(
in
nsISupports
data
)
;
}
;
[
scriptable
function
uuid
(
1a80cd0f
-
0d9e
-
4397
-
be69
-
68ad28fe5175
)
]
interface
nsIHeapAllocatedCallback
:
nsISupports
{
void
callback
(
in
int64_t
bytesAllocated
)
;
}
;
[
scriptable
builtinclass
uuid
(
2998574d
-
8993
-
407a
-
b1a5
-
8ad7417653e1
)
]
interface
nsIMemoryReporterManager
:
nsISupports
{
[
must_use
]
void
init
(
)
;
void
registerStrongReporter
(
in
nsIMemoryReporter
reporter
)
;
void
registerStrongAsyncReporter
(
in
nsIMemoryReporter
reporter
)
;
void
registerWeakReporter
(
in
nsIMemoryReporter
reporter
)
;
void
registerWeakAsyncReporter
(
in
nsIMemoryReporter
reporter
)
;
void
unregisterStrongReporter
(
in
nsIMemoryReporter
reporter
)
;
void
unregisterWeakReporter
(
in
nsIMemoryReporter
reporter
)
;
void
blockRegistrationAndHideExistingReporters
(
)
;
void
unblockRegistrationAndRestoreOriginalReporters
(
)
;
void
registerStrongReporterEvenIfBlocked
(
in
nsIMemoryReporter
aReporter
)
;
void
getReports
(
in
nsIHandleReportCallback
handleReport
in
nsISupports
handleReportData
in
nsIFinishReportingCallback
finishReporting
in
nsISupports
finishReportingData
in
boolean
anonymize
)
;
void
getReportsExtended
(
in
nsIHandleReportCallback
handleReport
in
nsISupports
handleReportData
in
nsIFinishReportingCallback
finishReporting
in
nsISupports
finishReportingData
in
boolean
anonymize
in
boolean
minimizeMemoryUsage
in
AString
DMDDumpIdent
)
;
[
noscript
]
void
getReportsForThisProcessExtended
(
in
nsIHandleReportCallback
handleReport
in
nsISupports
handleReportData
in
boolean
anonymize
in
FILE
DMDFile
in
nsIFinishReportingCallback
finishReporting
in
nsISupports
finishReportingData
)
;
[
noscript
]
void
endReport
(
)
;
[
must_use
]
readonly
attribute
int64_t
vsize
;
[
must_use
]
readonly
attribute
int64_t
vsizeMaxContiguous
;
[
must_use
]
readonly
attribute
int64_t
resident
;
[
must_use
]
readonly
attribute
int64_t
residentFast
;
[
must_use
]
readonly
attribute
int64_t
residentPeak
;
[
must_use
]
readonly
attribute
int64_t
residentUnique
;
[
must_use
]
readonly
attribute
int64_t
heapAllocated
;
[
must_use
]
readonly
attribute
int64_t
heapOverheadFraction
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeGCHeap
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeTemporaryPeak
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeCompartmentsSystem
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeCompartmentsUser
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeRealmsSystem
;
[
must_use
]
readonly
attribute
int64_t
JSMainRuntimeRealmsUser
;
[
must_use
]
readonly
attribute
int64_t
imagesContentUsedUncompressed
;
[
must_use
]
readonly
attribute
int64_t
storageSQLite
;
[
must_use
]
readonly
attribute
int64_t
lowMemoryEventsPhysical
;
[
must_use
]
readonly
attribute
int64_t
ghostWindows
;
[
must_use
]
readonly
attribute
int64_t
pageFaultsHard
;
[
infallible
]
readonly
attribute
boolean
hasMozMallocUsableSize
;
[
infallible
]
readonly
attribute
boolean
isDMDEnabled
;
[
infallible
]
readonly
attribute
boolean
isDMDRunning
;
[
must_use
]
void
minimizeMemoryUsage
(
in
nsIRunnable
callback
)
;
[
must_use
]
void
sizeOfTab
(
in
mozIDOMWindowProxy
window
out
int64_t
jsObjectsSize
out
int64_t
jsStringsSize
out
int64_t
jsOtherSize
out
int64_t
domSize
out
int64_t
styleSize
out
int64_t
otherSize
out
int64_t
totalSize
out
double
jsMilliseconds
out
double
nonJSMilliseconds
)
;
}
;
%
{
C
+
+
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
XPCOM_API
(
nsresult
)
RegisterStrongMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
XPCOM_API
(
nsresult
)
RegisterStrongAsyncMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
XPCOM_API
(
nsresult
)
RegisterWeakMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
XPCOM_API
(
nsresult
)
RegisterWeakAsyncMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
XPCOM_API
(
nsresult
)
UnregisterStrongMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
XPCOM_API
(
nsresult
)
UnregisterWeakMemoryReporter
(
nsIMemoryReporter
*
aReporter
)
;
typedef
int64_t
(
*
InfallibleAmountFn
)
(
)
;
#
define
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
kind
name
)
\
nsresult
Register
#
#
name
#
#
DistinguishedAmount
(
kind
#
#
AmountFn
aAmountFn
)
;
#
define
DECL_UNREGISTER_DISTINGUISHED_AMOUNT
(
name
)
\
nsresult
Unregister
#
#
name
#
#
DistinguishedAmount
(
)
;
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeGCHeap
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeTemporaryPeak
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeCompartmentsSystem
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeCompartmentsUser
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeRealmsSystem
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
JSMainRuntimeRealmsUser
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
ImagesContentUsedUncompressed
)
DECL_UNREGISTER_DISTINGUISHED_AMOUNT
(
ImagesContentUsedUncompressed
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
StorageSQLite
)
DECL_UNREGISTER_DISTINGUISHED_AMOUNT
(
StorageSQLite
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
LowMemoryEventsPhysical
)
DECL_REGISTER_DISTINGUISHED_AMOUNT
(
Infallible
GhostWindows
)
#
undef
DECL_REGISTER_DISTINGUISHED_AMOUNT
#
undef
DECL_UNREGISTER_DISTINGUISHED_AMOUNT
typedef
nsresult
(
*
JSSizeOfTabFn
)
(
JSObject
*
aObj
size_t
*
aJsObjectsSize
size_t
*
aJsStringSize
size_t
*
aJsPrivateSize
size_t
*
aJsOtherSize
)
;
typedef
nsresult
(
*
NonJSSizeOfTabFn
)
(
nsPIDOMWindowOuter
*
aWindow
size_t
*
aDomSize
size_t
*
aStyleSize
size_t
*
aOtherSize
)
;
nsresult
RegisterJSSizeOfTab
(
JSSizeOfTabFn
aSizeOfTabFn
)
;
nsresult
RegisterNonJSSizeOfTab
(
NonJSSizeOfTabFn
aSizeOfTabFn
)
;
}
#
if
defined
(
MOZ_DMD
)
#
if
!
defined
(
MOZ_MEMORY
)
#
error
"
MOZ_DMD
requires
MOZ_MEMORY
"
#
endif
#
include
"
DMD
.
h
"
#
define
MOZ_REPORT
(
ptr
)
mozilla
:
:
dmd
:
:
Report
(
ptr
)
#
define
MOZ_REPORT_ON_ALLOC
(
ptr
)
mozilla
:
:
dmd
:
:
ReportOnAlloc
(
ptr
)
#
else
#
define
MOZ_REPORT
(
ptr
)
#
define
MOZ_REPORT_ON_ALLOC
(
ptr
)
#
endif
#
define
MOZ_DEFINE_MALLOC_SIZE_OF
(
fn
)
\
static
size_t
fn
(
const
void
*
aPtr
)
\
{
\
MOZ_REPORT
(
aPtr
)
;
\
return
moz_malloc_size_of
(
aPtr
)
;
\
}
#
ifdef
MOZ_MEMORY
#
include
"
mozmemory
.
h
"
#
define
MOZ_DEFINE_MALLOC_ENCLOSING_SIZE_OF
(
fn
)
\
static
size_t
fn
(
const
void
*
aPtr
)
\
{
\
jemalloc_ptr_info_t
info
;
\
jemalloc_ptr_info
(
aPtr
&
info
)
;
\
MOZ_REPORT
(
info
.
addr
)
;
\
return
jemalloc_ptr_is_live
(
&
info
)
?
info
.
size
:
0
;
\
}
#
else
#
define
MOZ_DEFINE_MALLOC_ENCLOSING_SIZE_OF
(
fn
)
\
static
size_t
fn
(
const
void
*
aPtr
)
\
{
\
return
0
;
\
}
#
endif
#
define
MOZ_DEFINE_MALLOC_SIZE_OF_ON_ALLOC
(
fn
)
\
static
size_t
fn
(
const
void
*
aPtr
)
\
{
\
MOZ_REPORT_ON_ALLOC
(
aPtr
)
;
\
return
moz_malloc_size_of
(
aPtr
)
;
\
}
#
define
MOZ_DEFINE_MALLOC_SIZE_OF_ON_FREE
(
fn
)
\
static
size_t
fn
(
const
void
*
aPtr
)
\
{
\
return
moz_malloc_size_of
(
aPtr
)
;
\
}
#
define
MOZ_COLLECT_REPORT
(
path
kind
units
amount
description
)
\
(
void
)
aHandleReport
-
>
Callback
(
"
"
_ns
nsLiteralCString
(
path
)
\
kind
units
amount
\
nsLiteralCString
(
description
)
aData
)
%
}
