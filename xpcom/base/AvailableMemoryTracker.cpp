#
include
"
mozilla
/
AvailableMemoryTracker
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
prinrval
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsMemoryPressure
.
h
"
#
endif
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
if
defined
(
XP_WIN
)
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
<
windows
.
h
>
#
endif
#
if
defined
(
MOZ_MEMORY
)
#
include
"
mozmemory
.
h
"
#
endif
using
namespace
mozilla
;
namespace
{
#
if
defined
(
_M_IX86
)
&
&
defined
(
XP_WIN
)
static
const
size_t
kLowVirtualMemoryThreshold
=
256
*
1024
*
1024
;
static
const
size_t
kLowCommitSpaceThreshold
=
256
*
1024
*
1024
;
static
const
size_t
kLowPhysicalMemoryThreshold
=
0
;
static
const
uint32_t
kLowMemoryNotificationIntervalMS
=
10000
;
Atomic
<
uint32_t
MemoryOrdering
:
:
Relaxed
>
sNumLowVirtualMemEvents
;
Atomic
<
uint32_t
MemoryOrdering
:
:
Relaxed
>
sNumLowCommitSpaceEvents
;
Atomic
<
uint32_t
MemoryOrdering
:
:
Relaxed
>
sNumLowPhysicalMemEvents
;
WindowsDllInterceptor
sKernel32Intercept
;
WindowsDllInterceptor
sGdi32Intercept
;
bool
sInitialized
=
false
;
bool
sHooksActive
=
false
;
volatile
bool
sUnderMemoryPressure
=
false
;
volatile
PRIntervalTime
sLastLowMemoryNotificationTime
;
void
*
(
WINAPI
*
sVirtualAllocOrig
)
(
LPVOID
aAddress
SIZE_T
aSize
DWORD
aAllocationType
DWORD
aProtect
)
;
void
*
(
WINAPI
*
sMapViewOfFileOrig
)
(
HANDLE
aFileMappingObject
DWORD
aDesiredAccess
DWORD
aFileOffsetHigh
DWORD
aFileOffsetLow
SIZE_T
aNumBytesToMap
)
;
HBITMAP
(
WINAPI
*
sCreateDIBSectionOrig
)
(
HDC
aDC
const
BITMAPINFO
*
aBitmapInfo
UINT
aUsage
VOID
*
*
aBits
HANDLE
aSection
DWORD
aOffset
)
;
bool
MaybeScheduleMemoryPressureEvent
(
)
{
MemoryPressureState
state
=
MemPressure_New
;
PRIntervalTime
now
=
PR_IntervalNow
(
)
;
PRIntervalTime
interval
=
now
-
sLastLowMemoryNotificationTime
;
if
(
sUnderMemoryPressure
)
{
if
(
PR_IntervalToMilliseconds
(
interval
)
<
kLowMemoryNotificationIntervalMS
)
{
return
false
;
}
state
=
MemPressure_Ongoing
;
}
sUnderMemoryPressure
=
true
;
sLastLowMemoryNotificationTime
=
now
;
NS_DispatchEventualMemoryPressure
(
state
)
;
return
true
;
}
static
bool
CheckLowMemory
(
DWORDLONG
available
size_t
threshold
Atomic
<
uint32_t
MemoryOrdering
:
:
Relaxed
>
&
counter
)
{
if
(
available
<
threshold
)
{
if
(
MaybeScheduleMemoryPressureEvent
(
)
)
{
counter
+
+
;
}
return
true
;
}
return
false
;
}
void
CheckMemAvailable
(
)
{
if
(
!
sHooksActive
)
{
return
;
}
MEMORYSTATUSEX
stat
;
stat
.
dwLength
=
sizeof
(
stat
)
;
bool
success
=
GlobalMemoryStatusEx
(
&
stat
)
;
if
(
success
)
{
bool
lowMemory
=
CheckLowMemory
(
stat
.
ullAvailVirtual
kLowVirtualMemoryThreshold
sNumLowVirtualMemEvents
)
;
lowMemory
|
=
CheckLowMemory
(
stat
.
ullAvailPageFile
kLowCommitSpaceThreshold
sNumLowCommitSpaceEvents
)
;
lowMemory
|
=
CheckLowMemory
(
stat
.
ullAvailPhys
kLowPhysicalMemoryThreshold
sNumLowPhysicalMemEvents
)
;
sUnderMemoryPressure
=
lowMemory
;
}
}
LPVOID
WINAPI
VirtualAllocHook
(
LPVOID
aAddress
SIZE_T
aSize
DWORD
aAllocationType
DWORD
aProtect
)
{
LPVOID
result
=
sVirtualAllocOrig
(
aAddress
aSize
aAllocationType
aProtect
)
;
if
(
(
kLowVirtualMemoryThreshold
!
=
0
&
&
aAllocationType
&
MEM_RESERVE
)
|
|
(
(
kLowCommitSpaceThreshold
!
=
0
|
|
kLowPhysicalMemoryThreshold
!
=
0
)
&
&
aAllocationType
&
MEM_COMMIT
)
)
{
CheckMemAvailable
(
)
;
}
return
result
;
}
LPVOID
WINAPI
MapViewOfFileHook
(
HANDLE
aFileMappingObject
DWORD
aDesiredAccess
DWORD
aFileOffsetHigh
DWORD
aFileOffsetLow
SIZE_T
aNumBytesToMap
)
{
LPVOID
result
=
sMapViewOfFileOrig
(
aFileMappingObject
aDesiredAccess
aFileOffsetHigh
aFileOffsetLow
aNumBytesToMap
)
;
CheckMemAvailable
(
)
;
return
result
;
}
HBITMAP
WINAPI
CreateDIBSectionHook
(
HDC
aDC
const
BITMAPINFO
*
aBitmapInfo
UINT
aUsage
VOID
*
*
aBits
HANDLE
aSection
DWORD
aOffset
)
{
bool
doCheck
=
false
;
if
(
sHooksActive
&
&
!
aSection
&
&
aBitmapInfo
)
{
uint16_t
bitCount
=
aBitmapInfo
-
>
bmiHeader
.
biBitCount
;
if
(
bitCount
=
=
0
)
{
bitCount
=
32
;
}
int64_t
size
=
bitCount
*
aBitmapInfo
-
>
bmiHeader
.
biWidth
*
aBitmapInfo
-
>
bmiHeader
.
biHeight
;
if
(
size
<
0
)
{
size
*
=
-
1
;
}
if
(
size
>
1024
*
1024
*
8
)
{
doCheck
=
true
;
}
}
HBITMAP
result
=
sCreateDIBSectionOrig
(
aDC
aBitmapInfo
aUsage
aBits
aSection
aOffset
)
;
if
(
doCheck
)
{
CheckMemAvailable
(
)
;
}
return
result
;
}
static
int64_t
LowMemoryEventsVirtualDistinguishedAmount
(
)
{
return
sNumLowVirtualMemEvents
;
}
static
int64_t
LowMemoryEventsPhysicalDistinguishedAmount
(
)
{
return
sNumLowPhysicalMemEvents
;
}
class
LowEventsReporter
final
:
public
nsIMemoryReporter
{
~
LowEventsReporter
(
)
{
}
public
:
NS_DECL_ISUPPORTS
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
override
{
MOZ_COLLECT_REPORT
(
"
low
-
memory
-
events
/
virtual
"
KIND_OTHER
UNITS_COUNT_CUMULATIVE
LowMemoryEventsVirtualDistinguishedAmount
(
)
"
Number
of
low
-
virtual
-
memory
events
fired
since
startup
.
We
fire
such
an
"
"
event
if
we
notice
there
is
less
than
memory
.
low_virtual_mem_threshold_mb
of
"
"
virtual
address
space
available
(
if
zero
this
behavior
is
disabled
)
.
The
"
"
process
will
probably
crash
if
it
runs
out
of
virtual
address
space
so
"
"
this
event
is
dire
.
"
)
;
MOZ_COLLECT_REPORT
(
"
low
-
memory
-
events
/
commit
-
space
"
KIND_OTHER
UNITS_COUNT_CUMULATIVE
sNumLowCommitSpaceEvents
"
Number
of
low
-
commit
-
space
events
fired
since
startup
.
We
fire
such
an
"
"
event
if
we
notice
there
is
less
than
memory
.
low_commit_space_threshold_mb
of
"
"
commit
space
available
(
if
zero
this
behavior
is
disabled
)
.
Windows
will
"
"
likely
kill
the
process
if
it
runs
out
of
commit
space
so
this
event
is
"
"
dire
.
"
)
;
MOZ_COLLECT_REPORT
(
"
low
-
memory
-
events
/
physical
"
KIND_OTHER
UNITS_COUNT_CUMULATIVE
LowMemoryEventsPhysicalDistinguishedAmount
(
)
"
Number
of
low
-
physical
-
memory
events
fired
since
startup
.
We
fire
such
an
"
"
event
if
we
notice
there
is
less
than
memory
.
low_physical_memory_threshold_mb
"
"
of
physical
memory
available
(
if
zero
this
behavior
is
disabled
)
.
The
"
"
machine
will
start
to
page
if
it
runs
out
of
physical
memory
.
This
may
"
"
cause
it
to
run
slowly
but
it
shouldn
'
t
cause
it
to
crash
.
"
)
;
return
NS_OK
;
}
}
;
NS_IMPL_ISUPPORTS
(
LowEventsReporter
nsIMemoryReporter
)
#
endif
class
nsJemallocFreeDirtyPagesRunnable
final
:
public
nsIRunnable
{
~
nsJemallocFreeDirtyPagesRunnable
(
)
{
}
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIRUNNABLE
}
;
NS_IMPL_ISUPPORTS
(
nsJemallocFreeDirtyPagesRunnable
nsIRunnable
)
NS_IMETHODIMP
nsJemallocFreeDirtyPagesRunnable
:
:
Run
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
if
defined
(
MOZ_MEMORY
)
jemalloc_free_dirty_pages
(
)
;
#
endif
return
NS_OK
;
}
class
nsMemoryPressureWatcher
final
:
public
nsIObserver
{
~
nsMemoryPressureWatcher
(
)
{
}
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
void
Init
(
)
;
}
;
NS_IMPL_ISUPPORTS
(
nsMemoryPressureWatcher
nsIObserver
)
void
nsMemoryPressureWatcher
:
:
Init
(
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
AddObserver
(
this
"
memory
-
pressure
"
false
)
;
}
}
NS_IMETHODIMP
nsMemoryPressureWatcher
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
!
strcmp
(
aTopic
"
memory
-
pressure
"
)
"
Unknown
topic
"
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
new
nsJemallocFreeDirtyPagesRunnable
(
)
;
NS_DispatchToMainThread
(
runnable
)
;
return
NS_OK
;
}
}
namespace
mozilla
{
namespace
AvailableMemoryTracker
{
void
Activate
(
)
{
#
if
defined
(
_M_IX86
)
&
&
defined
(
XP_WIN
)
MOZ_ASSERT
(
sInitialized
)
;
MOZ_ASSERT
(
!
sHooksActive
)
;
RegisterStrongMemoryReporter
(
new
LowEventsReporter
(
)
)
;
RegisterLowMemoryEventsVirtualDistinguishedAmount
(
LowMemoryEventsVirtualDistinguishedAmount
)
;
RegisterLowMemoryEventsPhysicalDistinguishedAmount
(
LowMemoryEventsPhysicalDistinguishedAmount
)
;
sHooksActive
=
true
;
#
endif
RefPtr
<
nsMemoryPressureWatcher
>
watcher
=
new
nsMemoryPressureWatcher
(
)
;
watcher
-
>
Init
(
)
;
}
void
Init
(
)
{
#
if
defined
(
_M_IX86
)
&
&
defined
(
XP_WIN
)
if
(
!
PR_GetEnv
(
"
MOZ_PGO_INSTRUMENTED
"
)
)
{
sKernel32Intercept
.
Init
(
"
Kernel32
.
dll
"
)
;
sKernel32Intercept
.
AddHook
(
"
VirtualAlloc
"
reinterpret_cast
<
intptr_t
>
(
VirtualAllocHook
)
reinterpret_cast
<
void
*
*
>
(
&
sVirtualAllocOrig
)
)
;
sKernel32Intercept
.
AddHook
(
"
MapViewOfFile
"
reinterpret_cast
<
intptr_t
>
(
MapViewOfFileHook
)
reinterpret_cast
<
void
*
*
>
(
&
sMapViewOfFileOrig
)
)
;
sGdi32Intercept
.
Init
(
"
Gdi32
.
dll
"
)
;
sGdi32Intercept
.
AddHook
(
"
CreateDIBSection
"
reinterpret_cast
<
intptr_t
>
(
CreateDIBSectionHook
)
reinterpret_cast
<
void
*
*
>
(
&
sCreateDIBSectionOrig
)
)
;
}
sInitialized
=
true
;
#
endif
}
}
}
