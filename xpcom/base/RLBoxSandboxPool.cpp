#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
RLBoxSandboxPool
.
h
"
#
ifdef
MOZ_USING_WASM_SANDBOXING
#
include
"
mozilla
/
rlbox
/
rlbox_config
.
h
"
#
include
"
mozilla
/
rlbox
/
rlbox_wasm2c_sandbox
.
hpp
"
#
endif
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS
(
RLBoxSandboxPool
nsITimerCallback
nsINamed
)
void
RLBoxSandboxPool
:
:
StartTimer
(
)
{
mMutex
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
!
mTimer
"
timer
already
initialized
"
)
;
if
(
NS_IsMainThread
(
)
&
&
PastShutdownPhase
(
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
mPool
.
Clear
(
)
;
return
;
}
DebugOnly
<
nsresult
>
rv
=
NS_NewTimerWithCallback
(
getter_AddRefs
(
mTimer
)
this
mDelaySeconds
*
1000
nsITimer
:
:
TYPE_ONE_SHOT
GetMainThreadSerialEventTarget
(
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
failed
to
create
timer
"
)
;
}
void
RLBoxSandboxPool
:
:
CancelTimer
(
)
{
mMutex
.
AssertCurrentThreadOwns
(
)
;
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
}
NS_IMETHODIMP
RLBoxSandboxPool
:
:
Notify
(
nsITimer
*
aTimer
)
{
MutexAutoLock
lock
(
mMutex
)
;
mPool
.
Clear
(
)
;
mTimer
=
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
RLBoxSandboxPool
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
AssignLiteral
(
"
RLBoxSandboxPool
"
)
;
return
NS_OK
;
}
void
RLBoxSandboxPool
:
:
Push
(
UniquePtr
<
RLBoxSandboxDataBase
>
sbxData
)
{
MutexAutoLock
lock
(
mMutex
)
;
mPool
.
AppendElement
(
std
:
:
move
(
sbxData
)
)
;
if
(
!
mTimer
)
{
StartTimer
(
)
;
}
}
UniquePtr
<
RLBoxSandboxPoolData
>
RLBoxSandboxPool
:
:
PopOrCreate
(
uint64_t
aMinSize
)
{
MutexAutoLock
lock
(
mMutex
)
;
UniquePtr
<
RLBoxSandboxDataBase
>
sbxData
;
if
(
!
mPool
.
IsEmpty
(
)
)
{
const
int64_t
lastIndex
=
ReleaseAssertedCast
<
int64_t
>
(
mPool
.
Length
(
)
)
-
1
;
for
(
int64_t
i
=
lastIndex
;
i
>
=
0
;
i
-
-
)
{
if
(
mPool
[
i
]
-
>
mSize
>
=
aMinSize
)
{
sbxData
=
std
:
:
move
(
mPool
[
i
]
)
;
mPool
.
RemoveElementAt
(
i
)
;
CancelTimer
(
)
;
if
(
!
mPool
.
IsEmpty
(
)
)
{
StartTimer
(
)
;
}
break
;
}
}
}
if
(
!
sbxData
)
{
#
ifdef
MOZ_USING_WASM_SANDBOXING
const
uint64_t
defaultCapacityForSandbox
=
wasm_rt_get_default_max_linear_memory_size
(
)
;
const
uint64_t
minSandboxCapacity
=
std
:
:
max
(
aMinSize
defaultCapacityForSandbox
)
;
const
uint64_t
chosenAdjustedCapacity
=
rlbox
:
:
rlbox_wasm2c_sandbox
:
:
rlbox_wasm2c_get_adjusted_heap_size
(
minSandboxCapacity
)
;
#
else
const
uint64_t
chosenAdjustedCapacity
=
static_cast
<
uint64_t
>
(
1
)
<
<
32
;
#
endif
sbxData
=
CreateSandboxData
(
chosenAdjustedCapacity
)
;
NS_ENSURE_TRUE
(
sbxData
nullptr
)
;
}
return
MakeUnique
<
RLBoxSandboxPoolData
>
(
std
:
:
move
(
sbxData
)
this
)
;
}
