#
ifndef
mozilla_logging_h
#
define
mozilla_logging_h
#
include
"
prlog
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
namespace
mozilla
{
enum
class
LogLevel
{
Disabled
=
0
Error
Warning
Info
Debug
Verbose
}
;
LogLevel
ToLogLevel
(
int32_t
aLevel
)
;
class
LogModule
{
public
:
~
LogModule
(
)
{
:
:
free
(
mName
)
;
}
#
if
!
defined
(
MOZILLA_XPCOMRT_API
)
static
LogModule
*
Get
(
const
char
*
aName
)
;
#
else
static
LogModule
*
Get
(
const
char
*
aName
)
{
return
nullptr
;
}
#
endif
static
void
Init
(
)
;
bool
ShouldLog
(
LogLevel
aLevel
)
const
{
return
mLevel
>
=
aLevel
;
}
LogLevel
Level
(
)
const
{
return
mLevel
;
}
void
SetLevel
(
LogLevel
level
)
{
mLevel
=
level
;
}
void
Printv
(
LogLevel
aLevel
const
char
*
aFmt
va_list
aArgs
)
const
;
const
char
*
Name
(
)
const
{
return
mName
;
}
private
:
friend
class
LogModuleManager
;
explicit
LogModule
(
const
char
*
aName
LogLevel
aLevel
)
:
mName
(
strdup
(
aName
)
)
mLevel
(
aLevel
)
{
}
LogModule
(
LogModule
&
)
=
delete
;
LogModule
&
operator
=
(
const
LogModule
&
)
=
delete
;
char
*
mName
;
Atomic
<
LogLevel
Relaxed
>
mLevel
;
}
;
class
LazyLogModule
final
{
public
:
explicit
MOZ_CONSTEXPR
LazyLogModule
(
const
char
*
aLogName
)
:
mLogName
(
aLogName
)
mLog
(
nullptr
)
{
}
operator
LogModule
*
(
)
{
LogModule
*
tmp
=
mLog
;
if
(
MOZ_UNLIKELY
(
!
tmp
)
)
{
tmp
=
LogModule
:
:
Get
(
mLogName
)
;
mLog
=
tmp
;
}
return
tmp
;
}
private
:
const
char
*
const
mLogName
;
Atomic
<
LogModule
*
ReleaseAcquire
>
mLog
;
}
;
namespace
detail
{
inline
bool
log_test
(
const
PRLogModuleInfo
*
module
LogLevel
level
)
{
MOZ_ASSERT
(
level
!
=
LogLevel
:
:
Disabled
)
;
return
module
&
&
module
-
>
level
>
=
static_cast
<
int
>
(
level
)
;
}
void
log_print
(
const
PRLogModuleInfo
*
aModule
LogLevel
aLevel
const
char
*
aFmt
.
.
.
)
;
inline
bool
log_test
(
const
LogModule
*
module
LogLevel
level
)
{
MOZ_ASSERT
(
level
!
=
LogLevel
:
:
Disabled
)
;
return
module
&
&
module
-
>
ShouldLog
(
level
)
;
}
#
if
!
defined
(
MOZILLA_XPCOMRT_API
)
void
log_print
(
const
LogModule
*
aModule
LogLevel
aLevel
const
char
*
aFmt
.
.
.
)
;
#
else
inline
void
log_print
(
const
LogModule
*
aModule
LogLevel
aLevel
const
char
*
aFmt
.
.
.
)
{
}
#
endif
}
}
#
define
MOZ_LOG_TEST
(
_module
_level
)
mozilla
:
:
detail
:
:
log_test
(
_module
_level
)
#
define
MOZ_LOG_EXPAND_ARGS
(
.
.
.
)
__VA_ARGS__
#
define
MOZ_LOG
(
_module
_level
_args
)
\
PR_BEGIN_MACRO
\
if
(
MOZ_LOG_TEST
(
_module
_level
)
)
{
\
mozilla
:
:
detail
:
:
log_print
(
_module
_level
MOZ_LOG_EXPAND_ARGS
_args
)
;
\
}
\
PR_END_MACRO
#
undef
PR_LOG
#
undef
PR_LOG_TEST
#
ifdef
_MSC_VER
#
if
_MSC_VER
<
1900
#
define
__func__
__FUNCTION__
#
endif
#
endif
#
endif
