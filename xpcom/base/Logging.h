#
ifndef
mozilla_logging_h
#
define
mozilla_logging_h
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
LoggingCore
.
h
"
#
define
MOZ_LOGGING_ENABLED
1
#
define
MOZ_LOG_FILE_EXTENSION
"
.
moz_log
"
#
define
MOZ_LOG_PID_TOKEN
"
%
PID
"
namespace
mozilla
{
class
TimeStamp
;
class
LogModule
{
public
:
~
LogModule
(
)
{
:
:
free
(
mName
)
;
}
static
LogModule
*
Get
(
const
char
*
aName
)
;
static
void
Init
(
int
argc
char
*
argv
[
]
)
;
static
void
SetLogFile
(
const
char
*
aFilename
)
;
static
uint32_t
GetLogFile
(
char
*
aBuffer
size_t
aLength
)
;
static
void
SetAddTimestamp
(
bool
aAddTimestamp
)
;
static
void
SetIsSync
(
bool
aIsSync
)
;
static
void
SetCaptureStacks
(
bool
aCaptureStacks
)
;
static
void
DisableModules
(
)
;
bool
ShouldLog
(
LogLevel
aLevel
)
const
{
return
mLevel
>
=
aLevel
;
}
LogLevel
Level
(
)
const
{
return
mLevel
;
}
void
SetLevel
(
LogLevel
level
)
;
void
Printv
(
LogLevel
aLevel
const
char
*
aFmt
va_list
aArgs
)
const
MOZ_FORMAT_PRINTF
(
3
0
)
;
void
Printv
(
LogLevel
aLevel
const
TimeStamp
*
aStart
const
char
*
aFmt
va_list
aArgs
)
const
MOZ_FORMAT_PRINTF
(
4
0
)
;
const
char
*
Name
(
)
const
{
return
mName
;
}
private
:
friend
class
LogModuleManager
;
explicit
LogModule
(
const
char
*
aName
LogLevel
aLevel
)
:
mName
(
strdup
(
aName
)
)
mLevel
(
aLevel
)
{
}
LogModule
(
LogModule
&
)
=
delete
;
LogModule
&
operator
=
(
const
LogModule
&
)
=
delete
;
char
*
mName
;
AtomicLogLevel
mLevel
;
}
;
class
LazyLogModule
final
{
public
:
explicit
constexpr
LazyLogModule
(
const
char
*
aLogName
)
:
mLogName
(
aLogName
)
mLog
(
nullptr
)
{
}
MOZ_NEVER_INLINE_DEBUG
operator
LogModule
*
(
)
{
LogModule
*
tmp
=
mLog
;
if
(
MOZ_UNLIKELY
(
!
tmp
)
)
{
tmp
=
LogModule
:
:
Get
(
mLogName
)
;
mLog
=
tmp
;
}
return
tmp
;
}
private
:
const
char
*
const
mLogName
;
Atomic
<
LogModule
*
ReleaseAcquire
>
mLog
;
}
;
namespace
detail
{
inline
bool
log_test
(
const
LogModule
*
module
LogLevel
level
)
{
MOZ_ASSERT
(
level
!
=
LogLevel
:
:
Disabled
)
;
return
module
&
&
module
-
>
ShouldLog
(
level
)
;
}
void
log_print
(
const
LogModule
*
aModule
LogLevel
aLevel
const
char
*
aFmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
3
4
)
;
void
log_print
(
const
LogModule
*
aModule
LogLevel
aLevel
TimeStamp
*
aStart
const
char
*
aFmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
4
5
)
;
}
}
#
define
MOZ_LOG_EXPAND_ARGS
(
.
.
.
)
__VA_ARGS__
#
if
MOZ_LOGGING_ENABLED
#
define
MOZ_LOG_TEST
(
_module
_level
)
\
MOZ_UNLIKELY
(
mozilla
:
:
detail
:
:
log_test
(
_module
_level
)
)
#
else
#
define
MOZ_LOG_TEST
(
_module
_level
)
false
#
endif
#
if
MOZ_LOGGING_ENABLED
#
define
MOZ_LOG
(
_module
_level
_args
)
\
do
{
\
const
:
:
mozilla
:
:
LogModule
*
moz_real_module
=
_module
;
\
if
(
MOZ_LOG_TEST
(
moz_real_module
_level
)
)
{
\
mozilla
:
:
detail
:
:
log_print
(
moz_real_module
_level
\
MOZ_LOG_EXPAND_ARGS
_args
)
;
\
}
\
}
while
(
0
)
#
define
MOZ_LOG_DURATION
(
_module
_level
start
_args
)
\
do
{
\
const
:
:
mozilla
:
:
LogModule
*
moz_real_module
=
_module
;
\
if
(
MOZ_LOG_TEST
(
moz_real_module
_level
)
)
{
\
mozilla
:
:
detail
:
:
log_print
(
moz_real_module
_level
start
\
MOZ_LOG_EXPAND_ARGS
_args
)
;
\
}
\
}
while
(
0
)
#
else
#
define
MOZ_LOG
(
_module
_level
_args
)
\
do
{
\
if
(
MOZ_LOG_TEST
(
_module
_level
)
)
{
\
mozilla
:
:
detail
:
:
log_print
(
_module
_level
\
MOZ_LOG_EXPAND_ARGS
_args
)
;
\
}
\
}
while
(
0
)
#
define
MOZ_LOG_DURATION
(
_module
_level
start
_args
)
\
do
{
\
if
(
MOZ_LOG_TEST
(
_module
_level
)
)
{
\
mozilla
:
:
detail
:
:
log_print
(
_module
_level
start
\
MOZ_LOG_EXPAND_ARGS
_args
)
;
\
}
\
}
while
(
0
)
#
endif
#
undef
MOZ_LOGGING_ENABLED
#
endif
