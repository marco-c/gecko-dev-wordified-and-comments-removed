#
include
"
MacStringHelpers
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
mozilla
/
IntegerTypeTraits
.
h
"
#
include
<
limits
>
namespace
mozilla
{
void
CopyNSStringToXPCOMString
(
const
NSString
*
aFrom
nsAString
&
aTo
)
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
if
(
!
aFrom
)
{
aTo
.
Truncate
(
)
;
return
;
}
NSUInteger
len
=
[
aFrom
length
]
;
if
(
len
>
std
:
:
numeric_limits
<
nsAString
:
:
size_type
>
:
:
max
(
)
)
{
aTo
.
AllocFailed
(
std
:
:
numeric_limits
<
nsAString
:
:
size_type
>
:
:
max
(
)
)
;
}
aTo
.
SetLength
(
len
)
;
[
aFrom
getCharacters
:
reinterpret_cast
<
unichar
*
>
(
aTo
.
BeginWriting
(
)
)
range
:
NSMakeRange
(
0
len
)
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
NSString
*
XPCOMStringToNSString
(
const
nsAString
&
aFrom
)
{
if
(
aFrom
.
IsEmpty
(
)
)
{
return
[
NSString
string
]
;
}
return
[
NSString
stringWithCharacters
:
reinterpret_cast
<
const
unichar
*
>
(
aFrom
.
BeginReading
(
)
)
length
:
aFrom
.
Length
(
)
]
;
}
NSString
*
XPCOMStringToNSString
(
const
nsACString
&
aFrom
)
{
if
(
aFrom
.
IsEmpty
(
)
)
{
return
[
NSString
string
]
;
}
return
[
[
[
NSString
alloc
]
initWithBytes
:
aFrom
.
BeginReading
(
)
length
:
aFrom
.
Length
(
)
encoding
:
NSUTF8StringEncoding
]
autorelease
]
;
}
}
