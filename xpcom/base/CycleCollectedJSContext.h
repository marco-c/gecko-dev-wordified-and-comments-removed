#
ifndef
mozilla_CycleCollectedJSContext_h
#
define
mozilla_CycleCollectedJSContext_h
#
include
<
queue
>
#
include
"
mozilla
/
DeferredFinalize
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
AtomList
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTArray
.
h
"
class
nsCycleCollectionNoteRootCallback
;
class
nsIRunnable
;
class
nsThread
;
class
nsWrapperCache
;
namespace
mozilla
{
class
AutoSlowOperation
;
class
CycleCollectedJSRuntime
;
namespace
dom
{
class
Exception
;
class
WorkerJSContext
;
class
WorkletJSContext
;
}
struct
CycleCollectorResults
{
CycleCollectorResults
(
)
{
Init
(
)
;
}
void
Init
(
)
{
mForcedGC
=
false
;
mMergedZones
=
false
;
mAnyManual
=
false
;
mVisitedRefCounted
=
0
;
mVisitedGCed
=
0
;
mFreedRefCounted
=
0
;
mFreedGCed
=
0
;
mFreedJSZones
=
0
;
mNumSlices
=
1
;
}
bool
mForcedGC
;
bool
mMergedZones
;
bool
mAnyManual
;
uint32_t
mVisitedRefCounted
;
uint32_t
mVisitedGCed
;
uint32_t
mFreedRefCounted
;
uint32_t
mFreedGCed
;
uint32_t
mFreedJSZones
;
uint32_t
mNumSlices
;
}
;
class
MicroTaskRunnable
{
public
:
MicroTaskRunnable
(
)
=
default
;
NS_INLINE_DECL_REFCOUNTING
(
MicroTaskRunnable
)
virtual
void
Run
(
AutoSlowOperation
&
aAso
)
=
0
;
virtual
bool
Suppressed
(
)
{
return
false
;
}
protected
:
virtual
~
MicroTaskRunnable
(
)
=
default
;
}
;
class
CycleCollectedJSContext
:
dom
:
:
PerThreadAtomCache
public
LinkedListElement
<
CycleCollectedJSContext
>
private
JS
:
:
JobQueue
{
friend
class
CycleCollectedJSRuntime
;
protected
:
CycleCollectedJSContext
(
)
;
virtual
~
CycleCollectedJSContext
(
)
;
MOZ_IS_CLASS_INIT
nsresult
Initialize
(
JSRuntime
*
aParentRuntime
uint32_t
aMaxBytes
uint32_t
aMaxNurseryBytes
)
;
MOZ_IS_CLASS_INIT
nsresult
InitializeNonPrimary
(
CycleCollectedJSContext
*
aPrimaryContext
)
;
virtual
CycleCollectedJSRuntime
*
CreateRuntime
(
JSContext
*
aCx
)
=
0
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
MOZ_IS_CLASS_INIT
void
InitializeCommon
(
)
;
static
JSObject
*
GetIncumbentGlobalCallback
(
JSContext
*
aCx
)
;
static
bool
EnqueuePromiseJobCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aPromise
JS
:
:
HandleObject
aJob
JS
:
:
HandleObject
aAllocationSite
JS
:
:
HandleObject
aIncumbentGlobal
void
*
aData
)
;
static
void
PromiseRejectionTrackerCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aPromise
JS
:
:
PromiseRejectionHandlingState
state
void
*
aData
)
;
void
AfterProcessMicrotasks
(
)
;
public
:
void
ProcessStableStateQueue
(
)
;
private
:
void
CleanupIDBTransactions
(
uint32_t
aRecursionDepth
)
;
public
:
enum
DeferredFinalizeType
{
FinalizeIncrementally
FinalizeNow
}
;
virtual
dom
:
:
WorkerJSContext
*
GetAsWorkerJSContext
(
)
{
return
nullptr
;
}
virtual
dom
:
:
WorkletJSContext
*
GetAsWorkletJSContext
(
)
{
return
nullptr
;
}
CycleCollectedJSRuntime
*
Runtime
(
)
const
{
MOZ_ASSERT
(
mRuntime
)
;
return
mRuntime
;
}
already_AddRefed
<
dom
:
:
Exception
>
GetPendingException
(
)
const
;
void
SetPendingException
(
dom
:
:
Exception
*
aException
)
;
std
:
:
queue
<
RefPtr
<
MicroTaskRunnable
>
>
&
GetMicroTaskQueue
(
)
;
std
:
:
queue
<
RefPtr
<
MicroTaskRunnable
>
>
&
GetDebuggerMicroTaskQueue
(
)
;
JSContext
*
Context
(
)
const
{
MOZ_ASSERT
(
mJSContext
)
;
return
mJSContext
;
}
JS
:
:
RootingContext
*
RootingCx
(
)
const
{
MOZ_ASSERT
(
mJSContext
)
;
return
JS
:
:
RootingContext
:
:
get
(
mJSContext
)
;
}
void
SetTargetedMicroTaskRecursionDepth
(
uint32_t
aDepth
)
{
mTargetedMicroTaskRecursionDepth
=
aDepth
;
}
protected
:
JSContext
*
MaybeContext
(
)
const
{
return
mJSContext
;
}
public
:
virtual
void
BeforeProcessTask
(
bool
aMightBlock
)
;
virtual
void
AfterProcessTask
(
uint32_t
aRecursionDepth
)
;
void
IsIdleGCTaskNeeded
(
)
const
;
uint32_t
RecursionDepth
(
)
const
;
void
RunInStableState
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
AddPendingIDBTransaction
(
already_AddRefed
<
nsIRunnable
>
&
&
aTransaction
)
;
static
CycleCollectedJSContext
*
GetFor
(
JSContext
*
aCx
)
;
static
CycleCollectedJSContext
*
Get
(
)
;
virtual
void
DispatchToMicroTask
(
already_AddRefed
<
MicroTaskRunnable
>
aRunnable
)
;
void
EnterMicroTask
(
)
{
+
+
mMicroTaskLevel
;
}
void
LeaveMicroTask
(
)
{
if
(
-
-
mMicroTaskLevel
=
=
0
)
{
PerformMicroTaskCheckPoint
(
)
;
}
}
bool
IsInMicroTask
(
)
const
{
return
mMicroTaskLevel
!
=
0
;
}
uint32_t
MicroTaskLevel
(
)
const
{
return
mMicroTaskLevel
;
}
void
SetMicroTaskLevel
(
uint32_t
aLevel
)
{
mMicroTaskLevel
=
aLevel
;
}
bool
PerformMicroTaskCheckPoint
(
bool
aForce
=
false
)
;
void
PerformDebuggerMicroTaskCheckpoint
(
)
;
bool
IsInStableOrMetaStableState
(
)
const
{
return
mDoingStableStates
;
}
JS
:
:
PersistentRooted
<
JS
:
:
GCVector
<
JSObject
*
0
js
:
:
SystemAllocPolicy
>
>
mUncaughtRejections
;
JS
:
:
PersistentRooted
<
JS
:
:
GCVector
<
JSObject
*
0
js
:
:
SystemAllocPolicy
>
>
mConsumedRejections
;
nsTArray
<
nsCOMPtr
<
nsISupports
>
>
mUncaughtRejectionObservers
;
virtual
bool
IsSystemCaller
(
)
const
=
0
;
private
:
JSObject
*
getIncumbentGlobal
(
JSContext
*
cx
)
override
;
bool
enqueuePromiseJob
(
JSContext
*
cx
JS
:
:
HandleObject
promise
JS
:
:
HandleObject
job
JS
:
:
HandleObject
allocationSite
JS
:
:
HandleObject
incumbentGlobal
)
override
;
void
runJobs
(
JSContext
*
cx
)
override
;
bool
empty
(
)
const
override
;
private
:
bool
mIsPrimaryContext
;
CycleCollectedJSRuntime
*
mRuntime
;
JSContext
*
mJSContext
;
nsCOMPtr
<
dom
:
:
Exception
>
mPendingException
;
nsThread
*
mOwningThread
;
struct
PendingIDBTransactionData
{
nsCOMPtr
<
nsIRunnable
>
mTransaction
;
uint32_t
mRecursionDepth
;
}
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mStableStateEvents
;
nsTArray
<
PendingIDBTransactionData
>
mPendingIDBTransactions
;
uint32_t
mBaseRecursionDepth
;
bool
mDoingStableStates
;
uint32_t
mTargetedMicroTaskRecursionDepth
;
uint32_t
mMicroTaskLevel
;
std
:
:
queue
<
RefPtr
<
MicroTaskRunnable
>
>
mPendingMicroTaskRunnables
;
std
:
:
queue
<
RefPtr
<
MicroTaskRunnable
>
>
mDebuggerMicroTaskQueue
;
uint32_t
mMicroTaskRecursionDepth
;
}
;
class
MOZ_STACK_CLASS
nsAutoMicroTask
{
public
:
nsAutoMicroTask
(
)
{
CycleCollectedJSContext
*
ccjs
=
CycleCollectedJSContext
:
:
Get
(
)
;
if
(
ccjs
)
{
ccjs
-
>
EnterMicroTask
(
)
;
}
}
~
nsAutoMicroTask
(
)
{
CycleCollectedJSContext
*
ccjs
=
CycleCollectedJSContext
:
:
Get
(
)
;
if
(
ccjs
)
{
ccjs
-
>
LeaveMicroTask
(
)
;
}
}
}
;
}
#
endif
