#
ifndef
mozilla_CycleCollectedJSContext_h
#
define
mozilla_CycleCollectedJSContext_h
#
include
<
queue
>
#
include
"
mozilla
/
DeferredFinalize
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTArray
.
h
"
class
nsCycleCollectionNoteRootCallback
;
class
nsIException
;
class
nsIRunnable
;
class
nsThread
;
class
nsWrapperCache
;
namespace
mozilla
{
class
CycleCollectedJSRuntime
;
struct
CycleCollectorResults
{
CycleCollectorResults
(
)
{
Init
(
)
;
}
void
Init
(
)
{
mForcedGC
=
false
;
mMergedZones
=
false
;
mAnyManual
=
false
;
mVisitedRefCounted
=
0
;
mVisitedGCed
=
0
;
mFreedRefCounted
=
0
;
mFreedGCed
=
0
;
mFreedJSZones
=
0
;
mNumSlices
=
1
;
}
bool
mForcedGC
;
bool
mMergedZones
;
bool
mAnyManual
;
uint32_t
mVisitedRefCounted
;
uint32_t
mVisitedGCed
;
uint32_t
mFreedRefCounted
;
uint32_t
mFreedGCed
;
uint32_t
mFreedJSZones
;
uint32_t
mNumSlices
;
}
;
class
CycleCollectedJSContext
{
friend
class
CycleCollectedJSRuntime
;
protected
:
CycleCollectedJSContext
(
)
;
virtual
~
CycleCollectedJSContext
(
)
;
MOZ_IS_CLASS_INIT
nsresult
Initialize
(
JSRuntime
*
aParentRuntime
uint32_t
aMaxBytes
uint32_t
aMaxNurseryBytes
)
;
virtual
CycleCollectedJSRuntime
*
CreateRuntime
(
JSContext
*
aCx
)
=
0
;
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
std
:
:
queue
<
nsCOMPtr
<
nsIRunnable
>
>
mPromiseMicroTaskQueue
;
std
:
:
queue
<
nsCOMPtr
<
nsIRunnable
>
>
mDebuggerPromiseMicroTaskQueue
;
private
:
static
JSObject
*
GetIncumbentGlobalCallback
(
JSContext
*
aCx
)
;
static
bool
EnqueuePromiseJobCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aJob
JS
:
:
HandleObject
aAllocationSite
JS
:
:
HandleObject
aIncumbentGlobal
void
*
aData
)
;
static
void
PromiseRejectionTrackerCallback
(
JSContext
*
aCx
JS
:
:
HandleObject
aPromise
PromiseRejectionHandlingState
state
void
*
aData
)
;
void
AfterProcessMicrotask
(
uint32_t
aRecursionDepth
)
;
public
:
void
ProcessStableStateQueue
(
)
;
private
:
void
ProcessMetastableStateQueue
(
uint32_t
aRecursionDepth
)
;
public
:
enum
DeferredFinalizeType
{
FinalizeIncrementally
FinalizeNow
}
;
void
FinalizeDeferredThings
(
DeferredFinalizeType
aType
)
;
public
:
CycleCollectedJSRuntime
*
Runtime
(
)
const
{
MOZ_ASSERT
(
mRuntime
)
;
return
mRuntime
;
}
already_AddRefed
<
nsIException
>
GetPendingException
(
)
const
;
void
SetPendingException
(
nsIException
*
aException
)
;
std
:
:
queue
<
nsCOMPtr
<
nsIRunnable
>
>
&
GetPromiseMicroTaskQueue
(
)
;
std
:
:
queue
<
nsCOMPtr
<
nsIRunnable
>
>
&
GetDebuggerPromiseMicroTaskQueue
(
)
;
void
PrepareForForgetSkippable
(
)
;
void
BeginCycleCollectionCallback
(
)
;
void
EndCycleCollectionCallback
(
CycleCollectorResults
&
aResults
)
;
void
DispatchDeferredDeletion
(
bool
aContinuation
bool
aPurge
=
false
)
;
JSContext
*
Context
(
)
const
{
MOZ_ASSERT
(
mJSContext
)
;
return
mJSContext
;
}
JS
:
:
RootingContext
*
RootingCx
(
)
const
{
MOZ_ASSERT
(
mJSContext
)
;
return
JS
:
:
RootingContext
:
:
get
(
mJSContext
)
;
}
bool
MicroTaskCheckpointDisabled
(
)
const
{
return
mDisableMicroTaskCheckpoint
;
}
void
DisableMicroTaskCheckpoint
(
bool
aDisable
)
{
mDisableMicroTaskCheckpoint
=
aDisable
;
}
class
MOZ_RAII
AutoDisableMicroTaskCheckpoint
{
public
:
AutoDisableMicroTaskCheckpoint
(
)
:
mCCJSCX
(
CycleCollectedJSContext
:
:
Get
(
)
)
{
mOldValue
=
mCCJSCX
-
>
MicroTaskCheckpointDisabled
(
)
;
mCCJSCX
-
>
DisableMicroTaskCheckpoint
(
true
)
;
}
~
AutoDisableMicroTaskCheckpoint
(
)
{
mCCJSCX
-
>
DisableMicroTaskCheckpoint
(
mOldValue
)
;
}
CycleCollectedJSContext
*
mCCJSCX
;
bool
mOldValue
;
}
;
void
AddJSHolder
(
void
*
aHolder
nsScriptObjectTracer
*
aTracer
)
;
void
RemoveJSHolder
(
void
*
aHolder
)
;
#
ifdef
DEBUG
bool
IsJSHolder
(
void
*
aHolder
)
;
void
AssertNoObjectsToTrace
(
void
*
aPossibleJSHolder
)
;
#
endif
nsCycleCollectionParticipant
*
GCThingParticipant
(
)
;
nsCycleCollectionParticipant
*
ZoneParticipant
(
)
;
nsresult
TraverseRoots
(
nsCycleCollectionNoteRootCallback
&
aCb
)
;
virtual
bool
UsefulToMergeZones
(
)
const
;
void
FixWeakMappingGrayBits
(
)
const
;
bool
AreGCGrayBitsValid
(
)
const
;
void
GarbageCollect
(
uint32_t
aReason
)
const
;
void
NurseryWrapperAdded
(
nsWrapperCache
*
aCache
)
;
void
NurseryWrapperPreserved
(
JSObject
*
aWrapper
)
;
void
JSObjectsTenured
(
)
;
void
DeferredFinalize
(
DeferredFinalizeAppendFunction
aAppendFunc
DeferredFinalizeFunction
aFunc
void
*
aThing
)
;
void
DeferredFinalize
(
nsISupports
*
aSupports
)
;
void
DumpJSHeap
(
FILE
*
aFile
)
;
void
AddZoneWaitingForGC
(
JS
:
:
Zone
*
aZone
)
;
void
PrepareWaitingZonesForGC
(
)
;
protected
:
JSContext
*
MaybeContext
(
)
const
{
return
mJSContext
;
}
public
:
virtual
void
BeforeProcessTask
(
bool
aMightBlock
)
{
}
;
virtual
void
AfterProcessTask
(
uint32_t
aRecursionDepth
)
;
void
AfterProcessMicrotask
(
)
;
uint32_t
RecursionDepth
(
)
;
void
RunInStableState
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
RunInMetastableState
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
static
CycleCollectedJSContext
*
Get
(
)
;
virtual
void
DispatchToMicroTask
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
JS
:
:
PersistentRooted
<
JS
:
:
GCVector
<
JSObject
*
0
js
:
:
SystemAllocPolicy
>
>
mUncaughtRejections
;
JS
:
:
PersistentRooted
<
JS
:
:
GCVector
<
JSObject
*
0
js
:
:
SystemAllocPolicy
>
>
mConsumedRejections
;
nsTArray
<
nsCOMPtr
<
nsISupports
>
>
mUncaughtRejectionObservers
;
private
:
CycleCollectedJSRuntime
*
mRuntime
;
JSContext
*
mJSContext
;
nsCOMPtr
<
nsIException
>
mPendingException
;
nsThread
*
mOwningThread
;
struct
RunInMetastableStateData
{
nsCOMPtr
<
nsIRunnable
>
mRunnable
;
uint32_t
mRecursionDepth
;
}
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mStableStateEvents
;
nsTArray
<
RunInMetastableStateData
>
mMetastableStateEvents
;
uint32_t
mBaseRecursionDepth
;
bool
mDoingStableStates
;
bool
mDisableMicroTaskCheckpoint
;
}
;
}
#
endif
