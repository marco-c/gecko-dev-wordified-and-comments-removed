#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ErrorNames
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prerror
.
h
"
#
include
"
ErrorNamesInternal
.
h
"
namespace
mozilla
{
const
char
*
GetStaticErrorName
(
nsresult
rv
)
{
return
GetErrorNameInternal
(
rv
)
;
}
void
GetErrorName
(
nsresult
rv
nsACString
&
name
)
{
if
(
const
char
*
errorName
=
GetErrorNameInternal
(
rv
)
)
{
name
.
AssignASCII
(
errorName
)
;
return
;
}
bool
isSecurityError
=
NS_ERROR_GET_MODULE
(
rv
)
=
=
NS_ERROR_MODULE_SECURITY
;
MOZ_ASSERT
(
isSecurityError
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
name
.
AssignLiteral
(
"
NS_ERROR_GENERATE_SUCCESS
(
"
)
;
}
else
{
name
.
AssignLiteral
(
"
NS_ERROR_GENERATE_FAILURE
(
"
)
;
}
if
(
isSecurityError
)
{
name
.
AppendLiteral
(
"
NS_ERROR_MODULE_SECURITY
"
)
;
}
else
{
name
.
AppendInt
(
NS_ERROR_GET_MODULE
(
rv
)
)
;
}
name
.
AppendLiteral
(
"
"
)
;
const
char
*
nsprName
=
nullptr
;
if
(
isSecurityError
&
&
NS_IsMainThread
(
)
)
{
PRErrorCode
nsprCode
=
-
1
*
static_cast
<
PRErrorCode
>
(
NS_ERROR_GET_CODE
(
rv
)
)
;
nsprName
=
PR_ErrorToName
(
nsprCode
)
;
MOZ_ASSERT
(
nsprName
)
;
}
if
(
nsprName
)
{
name
.
AppendASCII
(
nsprName
)
;
}
else
{
name
.
AppendInt
(
NS_ERROR_GET_CODE
(
rv
)
)
;
}
name
.
AppendLiteral
(
"
)
"
)
;
}
}
extern
"
C
"
{
void
Gecko_GetErrorName
(
nsresult
aRv
nsACString
&
aName
)
{
mozilla
:
:
GetErrorName
(
aRv
aName
)
;
}
}
