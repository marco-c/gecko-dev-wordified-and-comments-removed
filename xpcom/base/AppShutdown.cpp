#
include
"
ShutdownPhase
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
"
mozilla
/
PreXULSkeletonUI
.
h
"
#
else
#
include
<
unistd
.
h
>
#
endif
#
include
"
ProfilerControl
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
PoisonIOInterposer
.
h
"
#
include
"
mozilla
/
Printf
.
h
"
#
include
"
mozilla
/
scache
/
StartupCache
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
StartupTimeline
.
h
"
#
include
"
mozilla
/
StaticPrefs_toolkit
.
h
"
#
include
"
mozilla
/
LateWriteChecks
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsAppRunner
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsICertStorage
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
AppShutdown
.
h
"
#
ifndef
ANDROID
#
include
"
nsTerminator
.
h
"
#
endif
#
include
"
prenv
.
h
"
#
ifdef
MOZ_BACKGROUNDTASKS
#
include
"
mozilla
/
BackgroundTasks
.
h
"
#
endif
namespace
mozilla
{
const
char
*
sPhaseObserverKeys
[
]
=
{
nullptr
"
quit
-
application
"
"
profile
-
change
-
net
-
teardown
"
"
profile
-
change
-
teardown
"
"
profile
-
before
-
change
"
"
profile
-
before
-
change
-
qm
"
"
profile
-
before
-
change
-
telemetry
"
"
xpcom
-
will
-
shutdown
"
"
xpcom
-
shutdown
"
"
xpcom
-
shutdown
-
threads
"
nullptr
nullptr
}
;
static_assert
(
sizeof
(
sPhaseObserverKeys
)
/
sizeof
(
sPhaseObserverKeys
[
0
]
)
=
=
(
size_t
)
ShutdownPhase
:
:
ShutdownPhase_Length
)
;
const
char
*
sPhaseReadableNames
[
]
=
{
"
NotInShutdown
"
"
AppShutdownConfirmed
"
"
AppShutdownNetTeardown
"
"
AppShutdownTeardown
"
"
AppShutdown
"
"
AppShutdownQM
"
"
AppShutdownTelemetry
"
"
XPCOMWillShutdown
"
"
XPCOMShutdown
"
"
XPCOMShutdownThreads
"
"
XPCOMShutdownFinal
"
"
CCPostLastCycleCollection
"
}
;
static_assert
(
sizeof
(
sPhaseReadableNames
)
/
sizeof
(
sPhaseReadableNames
[
0
]
)
=
=
(
size_t
)
ShutdownPhase
:
:
ShutdownPhase_Length
)
;
#
ifndef
ANDROID
static
nsTerminator
*
sTerminator
=
nullptr
;
#
endif
static
ShutdownPhase
sFastShutdownPhase
=
ShutdownPhase
:
:
NotInShutdown
;
static
ShutdownPhase
sLateWriteChecksPhase
=
ShutdownPhase
:
:
NotInShutdown
;
static
AppShutdownMode
sShutdownMode
=
AppShutdownMode
:
:
Normal
;
static
Atomic
<
ShutdownPhase
>
sCurrentShutdownPhase
(
ShutdownPhase
:
:
NotInShutdown
)
;
static
int
sExitCode
=
0
;
static
Atomic
<
bool
>
sShutdownImpending
(
false
)
;
static
char
*
sSavedXulAppFile
=
nullptr
;
#
ifdef
XP_WIN
static
wchar_t
*
sSavedProfDEnvVar
=
nullptr
;
static
wchar_t
*
sSavedProfLDEnvVar
=
nullptr
;
#
else
static
char
*
sSavedProfDEnvVar
=
nullptr
;
static
char
*
sSavedProfLDEnvVar
=
nullptr
;
#
endif
bool
AppShutdown
:
:
IsShutdownImpending
(
)
{
return
sShutdownImpending
;
}
void
AppShutdown
:
:
SetImpendingShutdown
(
)
{
sShutdownImpending
=
true
;
}
ShutdownPhase
GetShutdownPhaseFromPrefValue
(
int32_t
aPrefValue
)
{
switch
(
aPrefValue
)
{
case
1
:
return
ShutdownPhase
:
:
CCPostLastCycleCollection
;
case
2
:
return
ShutdownPhase
:
:
XPCOMShutdownThreads
;
case
3
:
return
ShutdownPhase
:
:
XPCOMShutdown
;
}
return
ShutdownPhase
:
:
NotInShutdown
;
}
ShutdownPhase
AppShutdown
:
:
GetCurrentShutdownPhase
(
)
{
return
sCurrentShutdownPhase
;
}
bool
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
aPhase
)
{
return
(
sCurrentShutdownPhase
>
=
aPhase
)
;
}
int
AppShutdown
:
:
GetExitCode
(
)
{
return
sExitCode
;
}
void
AppShutdown
:
:
SaveEnvVarsForPotentialRestart
(
)
{
const
char
*
s
=
PR_GetEnv
(
"
XUL_APP_FILE
"
)
;
if
(
s
)
{
sSavedXulAppFile
=
Smprintf
(
"
%
s
=
%
s
"
"
XUL_APP_FILE
"
s
)
.
release
(
)
;
MOZ_LSAN_INTENTIONALLY_LEAK_OBJECT
(
sSavedXulAppFile
)
;
}
}
const
char
*
AppShutdown
:
:
GetObserverKey
(
ShutdownPhase
aPhase
)
{
return
sPhaseObserverKeys
[
static_cast
<
std
:
:
underlying_type_t
<
ShutdownPhase
>
>
(
aPhase
)
]
;
}
const
char
*
AppShutdown
:
:
GetShutdownPhaseName
(
ShutdownPhase
aPhase
)
{
return
sPhaseReadableNames
[
static_cast
<
std
:
:
underlying_type_t
<
ShutdownPhase
>
>
(
aPhase
)
]
;
}
void
AppShutdown
:
:
MaybeDoRestart
(
)
{
if
(
sShutdownMode
=
=
AppShutdownMode
:
:
Restart
)
{
StopLateWriteChecks
(
)
;
UnlockProfile
(
)
;
if
(
sSavedXulAppFile
)
{
PR_SetEnv
(
sSavedXulAppFile
)
;
}
#
ifdef
XP_WIN
if
(
sSavedProfDEnvVar
&
&
!
EnvHasValue
(
"
XRE_PROFILE_PATH
"
)
)
{
SetEnvironmentVariableW
(
L
"
XRE_PROFILE_PATH
"
sSavedProfDEnvVar
)
;
}
if
(
sSavedProfLDEnvVar
&
&
!
EnvHasValue
(
"
XRE_PROFILE_LOCAL_PATH
"
)
)
{
SetEnvironmentVariableW
(
L
"
XRE_PROFILE_LOCAL_PATH
"
sSavedProfLDEnvVar
)
;
}
Unused
<
<
NotePreXULSkeletonUIRestarting
(
)
;
#
else
if
(
sSavedProfDEnvVar
&
&
!
EnvHasValue
(
"
XRE_PROFILE_PATH
"
)
)
{
PR_SetEnv
(
sSavedProfDEnvVar
)
;
}
if
(
sSavedProfLDEnvVar
&
&
!
EnvHasValue
(
"
XRE_PROFILE_LOCAL_PATH
"
)
)
{
PR_SetEnv
(
sSavedProfLDEnvVar
)
;
}
#
endif
LaunchChild
(
true
)
;
}
}
#
ifdef
XP_WIN
wchar_t
*
CopyPathIntoNewWCString
(
nsIFile
*
aFile
)
{
wchar_t
*
result
=
nullptr
;
nsAutoString
resStr
;
aFile
-
>
GetPath
(
resStr
)
;
if
(
resStr
.
Length
(
)
>
0
)
{
result
=
(
wchar_t
*
)
malloc
(
(
resStr
.
Length
(
)
+
1
)
*
sizeof
(
wchar_t
)
)
;
if
(
result
)
{
wcscpy
(
result
resStr
.
get
(
)
)
;
result
[
resStr
.
Length
(
)
]
=
0
;
}
}
return
result
;
}
#
endif
void
AppShutdown
:
:
Init
(
AppShutdownMode
aMode
int
aExitCode
AppShutdownReason
aReason
)
{
if
(
sShutdownMode
=
=
AppShutdownMode
:
:
Normal
)
{
sShutdownMode
=
aMode
;
}
AppShutdown
:
:
AnnotateShutdownReason
(
aReason
)
;
AppShutdown
:
:
SetImpendingShutdown
(
)
;
sExitCode
=
aExitCode
;
#
ifndef
ANDROID
sTerminator
=
new
nsTerminator
(
)
;
#
endif
InitLateWriteChecks
(
)
;
int32_t
fastShutdownPref
=
StaticPrefs
:
:
toolkit_shutdown_fastShutdownStage
(
)
;
sFastShutdownPhase
=
GetShutdownPhaseFromPrefValue
(
fastShutdownPref
)
;
int32_t
lateWriteChecksPref
=
StaticPrefs
:
:
toolkit_shutdown_lateWriteChecksStage
(
)
;
sLateWriteChecksPhase
=
GetShutdownPhaseFromPrefValue
(
lateWriteChecksPref
)
;
if
(
auto
*
cache
=
scache
:
:
StartupCache
:
:
GetSingletonNoInit
(
)
)
{
cache
-
>
MaybeInitShutdownWrite
(
)
;
}
}
void
AppShutdown
:
:
MaybeFastShutdown
(
ShutdownPhase
aPhase
)
{
if
(
aPhase
=
=
sFastShutdownPhase
|
|
aPhase
=
=
sLateWriteChecksPhase
)
{
if
(
auto
*
cache
=
scache
:
:
StartupCache
:
:
GetSingletonNoInit
(
)
)
{
cache
-
>
EnsureShutdownWriteComplete
(
)
;
}
nsresult
rv
;
nsCOMPtr
<
nsICertStorage
>
certStorage
=
do_GetService
(
"
mozilla
.
org
/
security
/
certstorage
;
1
"
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
SpinEventLoopUntil
(
"
AppShutdown
:
:
MaybeFastShutdown
"
_ns
[
&
]
(
)
{
int32_t
remainingOps
;
nsresult
rv
=
certStorage
-
>
GetRemainingOperationCount
(
&
remainingOps
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsICertStorage
:
:
getRemainingOperationCount
failed
during
"
"
shutdown
"
)
;
return
NS_FAILED
(
rv
)
|
|
remainingOps
<
=
0
;
}
)
;
}
}
if
(
aPhase
=
=
sFastShutdownPhase
)
{
StopLateWriteChecks
(
)
;
RecordShutdownEndTimeStamp
(
)
;
MaybeDoRestart
(
)
;
profiler_shutdown
(
IsFastShutdown
:
:
Yes
)
;
DoImmediateExit
(
sExitCode
)
;
}
else
if
(
aPhase
=
=
sLateWriteChecksPhase
)
{
#
ifdef
XP_MACOSX
OnlyReportDirtyWrites
(
)
;
#
endif
BeginLateWriteChecks
(
)
;
}
}
void
AppShutdown
:
:
OnShutdownConfirmed
(
)
{
if
(
sShutdownMode
=
=
AppShutdownMode
:
:
Restart
)
{
nsCOMPtr
<
nsIFile
>
profD
;
nsCOMPtr
<
nsIFile
>
profLD
;
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_50_DIR
getter_AddRefs
(
profD
)
)
;
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_LOCAL_50_DIR
getter_AddRefs
(
profLD
)
)
;
#
ifdef
XP_WIN
sSavedProfDEnvVar
=
CopyPathIntoNewWCString
(
profD
)
;
sSavedProfLDEnvVar
=
CopyPathIntoNewWCString
(
profLD
)
;
#
else
nsAutoCString
profDStr
;
profD
-
>
GetNativePath
(
profDStr
)
;
sSavedProfDEnvVar
=
Smprintf
(
"
XRE_PROFILE_PATH
=
%
s
"
profDStr
.
get
(
)
)
.
release
(
)
;
nsAutoCString
profLDStr
;
profLD
-
>
GetNativePath
(
profLDStr
)
;
sSavedProfLDEnvVar
=
Smprintf
(
"
XRE_PROFILE_LOCAL_PATH
=
%
s
"
profLDStr
.
get
(
)
)
.
release
(
)
;
#
endif
MOZ_LSAN_INTENTIONALLY_LEAK_OBJECT
(
sSavedProfDEnvVar
)
;
MOZ_LSAN_INTENTIONALLY_LEAK_OBJECT
(
sSavedProfLDEnvVar
)
;
}
}
void
AppShutdown
:
:
DoImmediateExit
(
int
aExitCode
)
{
#
ifdef
XP_WIN
HANDLE
process
=
:
:
GetCurrentProcess
(
)
;
if
(
:
:
TerminateProcess
(
process
aExitCode
)
)
{
:
:
WaitForSingleObject
(
process
INFINITE
)
;
}
MOZ_CRASH
(
"
TerminateProcess
failed
.
"
)
;
#
else
_exit
(
aExitCode
)
;
#
endif
}
bool
AppShutdown
:
:
IsRestarting
(
)
{
return
sShutdownMode
=
=
AppShutdownMode
:
:
Restart
;
}
void
AppShutdown
:
:
AnnotateShutdownReason
(
AppShutdownReason
aReason
)
{
auto
key
=
CrashReporter
:
:
Annotation
:
:
ShutdownReason
;
const
char
*
reasonStr
;
switch
(
aReason
)
{
case
AppShutdownReason
:
:
AppClose
:
reasonStr
=
"
AppClose
"
;
break
;
case
AppShutdownReason
:
:
AppRestart
:
reasonStr
=
"
AppRestart
"
;
break
;
case
AppShutdownReason
:
:
OSForceClose
:
reasonStr
=
"
OSForceClose
"
;
break
;
case
AppShutdownReason
:
:
OSSessionEnd
:
reasonStr
=
"
OSSessionEnd
"
;
break
;
case
AppShutdownReason
:
:
OSShutdown
:
reasonStr
=
"
OSShutdown
"
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
We
should
know
the
given
reason
for
shutdown
.
"
)
;
reasonStr
=
"
Unknown
"
;
break
;
}
CrashReporter
:
:
RecordAnnotationCString
(
key
reasonStr
)
;
}
#
ifdef
DEBUG
static
bool
sNotifyingShutdownObservers
=
false
;
static
bool
sAdvancingShutdownPhase
=
false
;
bool
AppShutdown
:
:
IsNoOrLegalShutdownTopic
(
const
char
*
aTopic
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
true
;
}
ShutdownPhase
phase
=
GetShutdownPhaseFromTopic
(
aTopic
)
;
return
phase
=
=
ShutdownPhase
:
:
NotInShutdown
|
|
(
sNotifyingShutdownObservers
&
&
phase
=
=
sCurrentShutdownPhase
)
;
}
#
endif
void
AppShutdown
:
:
AdvanceShutdownPhaseInternal
(
ShutdownPhase
aPhase
bool
doNotify
const
char16_t
*
aNotificationData
const
nsCOMPtr
<
nsISupports
>
&
aNotificationSubject
)
{
AssertIsOnMainThread
(
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
sAdvancingShutdownPhase
)
;
sAdvancingShutdownPhase
=
true
;
auto
exit
=
MakeScopeExit
(
[
]
{
sAdvancingShutdownPhase
=
false
;
}
)
;
#
endif
if
(
sCurrentShutdownPhase
>
=
aPhase
)
{
return
;
}
SetImpendingShutdown
(
)
;
nsCOMPtr
<
nsIThread
>
thread
=
do_GetCurrentThread
(
)
;
bool
mayProcessPending
=
(
aPhase
>
ShutdownPhase
:
:
AppShutdownConfirmed
)
;
if
(
mayProcessPending
&
&
thread
)
{
NS_ProcessPendingEvents
(
thread
)
;
}
sCurrentShutdownPhase
=
aPhase
;
#
ifndef
ANDROID
if
(
sTerminator
)
{
sTerminator
-
>
AdvancePhase
(
aPhase
)
;
}
#
endif
AppShutdown
:
:
MaybeFastShutdown
(
aPhase
)
;
mozilla
:
:
KillClearOnShutdown
(
aPhase
)
;
if
(
mayProcessPending
&
&
thread
)
{
NS_ProcessPendingEvents
(
thread
)
;
}
if
(
doNotify
)
{
const
char
*
aTopic
=
AppShutdown
:
:
GetObserverKey
(
aPhase
)
;
if
(
aTopic
)
{
nsCOMPtr
<
nsIObserverService
>
obsService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obsService
)
{
#
ifdef
DEBUG
sNotifyingShutdownObservers
=
true
;
auto
reset
=
MakeScopeExit
(
[
]
{
sNotifyingShutdownObservers
=
false
;
}
)
;
#
endif
obsService
-
>
NotifyObservers
(
aNotificationSubject
aTopic
aNotificationData
)
;
if
(
mayProcessPending
&
&
thread
)
{
NS_ProcessPendingEvents
(
thread
)
;
}
}
}
}
}
void
AppShutdown
:
:
AdvanceShutdownPhaseWithoutNotify
(
ShutdownPhase
aPhase
)
{
AdvanceShutdownPhaseInternal
(
aPhase
false
nullptr
nullptr
)
;
}
void
AppShutdown
:
:
AdvanceShutdownPhase
(
ShutdownPhase
aPhase
const
char16_t
*
aNotificationData
const
nsCOMPtr
<
nsISupports
>
&
aNotificationSubject
)
{
AdvanceShutdownPhaseInternal
(
aPhase
true
aNotificationData
aNotificationSubject
)
;
}
ShutdownPhase
AppShutdown
:
:
GetShutdownPhaseFromTopic
(
const
char
*
aTopic
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
sPhaseObserverKeys
)
;
+
+
i
)
{
if
(
sPhaseObserverKeys
[
i
]
&
&
!
strcmp
(
sPhaseObserverKeys
[
i
]
aTopic
)
)
{
return
static_cast
<
ShutdownPhase
>
(
i
)
;
}
}
return
ShutdownPhase
:
:
NotInShutdown
;
}
}
