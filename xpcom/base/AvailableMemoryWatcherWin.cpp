#
include
"
AvailableMemoryWatcher
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsICrashReporter
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsMemoryPressure
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
memoryapi
.
h
>
namespace
mozilla
{
class
nsAvailableMemoryWatcher
final
:
public
nsIObserver
public
nsITimerCallback
public
nsAvailableMemoryWatcherBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIOBSERVER
NS_DECL_NSITIMERCALLBACK
nsAvailableMemoryWatcher
(
)
;
nsresult
Init
(
)
;
private
:
static
const
uint32_t
kLowMemoryNotificationIntervalMS
=
10000
;
static
const
char
*
const
kObserverTopics
[
]
;
static
VOID
CALLBACK
LowMemoryCallback
(
PVOID
aContext
BOOLEAN
aIsTimer
)
;
static
void
RecordLowMemoryEvent
(
)
;
static
bool
IsCommitSpaceLow
(
)
;
~
nsAvailableMemoryWatcher
(
)
;
bool
RegisterMemoryResourceHandler
(
)
;
void
UnregisterMemoryResourceHandler
(
)
;
void
MaybeSaveMemoryReport
(
const
MutexAutoLock
&
)
;
void
Shutdown
(
const
MutexAutoLock
&
)
;
bool
ListenForLowMemory
(
)
;
void
OnLowMemory
(
const
MutexAutoLock
&
)
;
void
OnHighMemory
(
const
MutexAutoLock
&
)
;
void
StartPollingIfUserInteracting
(
const
MutexAutoLock
&
)
;
void
StopPolling
(
)
;
void
StopPollingIfUserIdle
(
const
MutexAutoLock
&
)
;
void
OnUserInteracting
(
const
MutexAutoLock
&
)
;
void
OnUserIdle
(
const
MutexAutoLock
&
)
;
Mutex
mMutex
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsAutoHandle
mLowMemoryHandle
;
HANDLE
mWaitHandle
;
bool
mPolling
;
bool
mInteracting
;
bool
mUnderMemoryPressure
;
bool
mSavedReport
;
bool
mIsShutdown
;
bool
mInitialized
;
nsCOMPtr
<
nsIObserverService
>
mObserverSvc
;
}
;
const
char
*
const
nsAvailableMemoryWatcher
:
:
kObserverTopics
[
]
=
{
"
quit
-
application
"
"
user
-
interaction
-
active
"
"
user
-
interaction
-
inactive
"
}
;
NS_IMPL_ISUPPORTS_INHERITED
(
nsAvailableMemoryWatcher
nsAvailableMemoryWatcherBase
nsIObserver
nsITimerCallback
)
nsAvailableMemoryWatcher
:
:
nsAvailableMemoryWatcher
(
)
:
mMutex
(
"
low
memory
callback
mutex
"
)
mWaitHandle
(
nullptr
)
mPolling
(
false
)
mInteracting
(
false
)
mUnderMemoryPressure
(
false
)
mSavedReport
(
false
)
mIsShutdown
(
false
)
mInitialized
(
false
)
{
}
nsresult
nsAvailableMemoryWatcher
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
nsAvailableMemoryWatcher
needs
to
be
initialized
in
the
main
thread
.
"
)
;
if
(
mInitialized
)
{
return
NS_ERROR_ALREADY_INITIALIZED
;
}
mTimer
=
NS_NewTimer
(
)
;
if
(
!
mTimer
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
mObserverSvc
=
services
:
:
GetObserverService
(
)
;
MOZ_ASSERT
(
mObserverSvc
)
;
if
(
!
RegisterMemoryResourceHandler
(
)
)
{
return
NS_ERROR_FAILURE
;
}
for
(
auto
topic
:
kObserverTopics
)
{
nsresult
rv
=
mObserverSvc
-
>
AddObserver
(
this
topic
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
mInitialized
=
true
;
return
NS_OK
;
}
nsAvailableMemoryWatcher
:
:
~
nsAvailableMemoryWatcher
(
)
{
MOZ_ASSERT
(
!
mLowMemoryHandle
)
;
MOZ_ASSERT
(
!
mWaitHandle
)
;
}
VOID
CALLBACK
nsAvailableMemoryWatcher
:
:
LowMemoryCallback
(
PVOID
aContext
BOOLEAN
aIsTimer
)
{
RefPtr
<
nsAvailableMemoryWatcher
>
watcher
=
already_AddRefed
<
nsAvailableMemoryWatcher
>
(
static_cast
<
nsAvailableMemoryWatcher
*
>
(
aContext
)
)
;
if
(
!
aIsTimer
)
{
MutexAutoLock
lock
(
watcher
-
>
mMutex
)
;
if
(
watcher
-
>
mIsShutdown
)
{
MOZ_ASSERT
(
!
watcher
-
>
mWaitHandle
)
;
return
;
}
:
:
UnregisterWait
(
watcher
-
>
mWaitHandle
)
;
watcher
-
>
mWaitHandle
=
nullptr
;
if
(
IsCommitSpaceLow
(
)
)
{
watcher
-
>
OnLowMemory
(
lock
)
;
}
}
}
void
nsAvailableMemoryWatcher
:
:
RecordLowMemoryEvent
(
)
{
sNumLowPhysicalMemEvents
+
+
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
LowPhysicalMemoryEvents
sNumLowPhysicalMemEvents
)
;
}
bool
nsAvailableMemoryWatcher
:
:
RegisterMemoryResourceHandler
(
)
{
mLowMemoryHandle
.
own
(
:
:
CreateMemoryResourceNotification
(
LowMemoryResourceNotification
)
)
;
if
(
!
mLowMemoryHandle
)
{
return
false
;
}
return
ListenForLowMemory
(
)
;
}
void
nsAvailableMemoryWatcher
:
:
UnregisterMemoryResourceHandler
(
)
{
if
(
mWaitHandle
)
{
bool
res
=
:
:
UnregisterWait
(
mWaitHandle
)
;
if
(
res
|
|
:
:
GetLastError
(
)
!
=
ERROR_IO_PENDING
)
{
this
-
>
Release
(
)
;
}
mWaitHandle
=
nullptr
;
}
mLowMemoryHandle
.
reset
(
)
;
}
void
nsAvailableMemoryWatcher
:
:
Shutdown
(
const
MutexAutoLock
&
)
{
mIsShutdown
=
true
;
for
(
auto
topic
:
kObserverTopics
)
{
Unused
<
<
mObserverSvc
-
>
RemoveObserver
(
this
topic
)
;
}
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
UnregisterMemoryResourceHandler
(
)
;
}
bool
nsAvailableMemoryWatcher
:
:
ListenForLowMemory
(
)
{
if
(
mLowMemoryHandle
&
&
!
mWaitHandle
)
{
this
-
>
AddRef
(
)
;
bool
res
=
:
:
RegisterWaitForSingleObject
(
&
mWaitHandle
mLowMemoryHandle
LowMemoryCallback
this
INFINITE
WT_EXECUTEDEFAULT
|
WT_EXECUTEONLYONCE
)
;
if
(
!
res
)
{
this
-
>
Release
(
)
;
}
return
res
;
}
return
false
;
}
void
nsAvailableMemoryWatcher
:
:
MaybeSaveMemoryReport
(
const
MutexAutoLock
&
)
{
if
(
mSavedReport
)
{
return
;
}
if
(
nsCOMPtr
<
nsICrashReporter
>
cr
=
do_GetService
(
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
)
)
{
mSavedReport
=
NS_SUCCEEDED
(
cr
-
>
SaveMemoryReport
(
)
)
;
}
}
void
nsAvailableMemoryWatcher
:
:
OnLowMemory
(
const
MutexAutoLock
&
aLock
)
{
mUnderMemoryPressure
=
true
;
RecordLowMemoryEvent
(
)
;
if
(
NS_IsMainThread
(
)
)
{
MaybeSaveMemoryReport
(
aLock
)
;
}
else
{
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
nsAvailableMemoryWatcher
:
:
OnLowMemory
"
[
self
=
RefPtr
{
this
}
]
(
)
{
MutexAutoLock
lock
(
self
-
>
mMutex
)
;
self
-
>
MaybeSaveMemoryReport
(
lock
)
;
}
)
)
;
}
NS_NotifyOfEventualMemoryPressure
(
MemoryPressureState
:
:
LowMemory
)
;
StartPollingIfUserInteracting
(
aLock
)
;
}
void
nsAvailableMemoryWatcher
:
:
OnHighMemory
(
const
MutexAutoLock
&
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mUnderMemoryPressure
=
false
;
mSavedReport
=
false
;
NS_NotifyOfEventualMemoryPressure
(
MemoryPressureState
:
:
NoPressure
)
;
StopPolling
(
)
;
ListenForLowMemory
(
)
;
}
bool
nsAvailableMemoryWatcher
:
:
IsCommitSpaceLow
(
)
{
MEMORYSTATUSEX
memStatus
=
{
sizeof
(
memStatus
)
}
;
if
(
!
:
:
GlobalMemoryStatusEx
(
&
memStatus
)
)
{
return
false
;
}
constexpr
size_t
kBytesPerMB
=
1024
*
1024
;
return
(
memStatus
.
ullAvailPageFile
/
kBytesPerMB
)
<
StaticPrefs
:
:
browser_low_commit_space_threshold_mb
(
)
;
}
void
nsAvailableMemoryWatcher
:
:
StartPollingIfUserInteracting
(
const
MutexAutoLock
&
)
{
if
(
mInteracting
&
&
!
mPolling
)
{
if
(
NS_SUCCEEDED
(
mTimer
-
>
InitWithCallback
(
this
kLowMemoryNotificationIntervalMS
nsITimer
:
:
TYPE_REPEATING_SLACK
)
)
)
{
mPolling
=
true
;
}
}
}
void
nsAvailableMemoryWatcher
:
:
StopPolling
(
)
{
mTimer
-
>
Cancel
(
)
;
mPolling
=
false
;
}
void
nsAvailableMemoryWatcher
:
:
StopPollingIfUserIdle
(
const
MutexAutoLock
&
)
{
if
(
!
mInteracting
)
{
StopPolling
(
)
;
}
}
void
nsAvailableMemoryWatcher
:
:
OnUserInteracting
(
const
MutexAutoLock
&
aLock
)
{
mInteracting
=
true
;
if
(
mUnderMemoryPressure
)
{
StartPollingIfUserInteracting
(
aLock
)
;
}
}
void
nsAvailableMemoryWatcher
:
:
OnUserIdle
(
const
MutexAutoLock
&
)
{
mInteracting
=
false
;
}
NS_IMETHODIMP
nsAvailableMemoryWatcher
:
:
Notify
(
nsITimer
*
aTimer
)
{
MutexAutoLock
lock
(
mMutex
)
;
StopPollingIfUserIdle
(
lock
)
;
if
(
IsCommitSpaceLow
(
)
)
{
OnLowMemory
(
lock
)
;
}
else
{
OnHighMemory
(
lock
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsAvailableMemoryWatcher
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
strcmp
(
aTopic
"
quit
-
application
"
)
=
=
0
)
{
Shutdown
(
lock
)
;
}
else
if
(
strcmp
(
aTopic
"
user
-
interaction
-
inactive
"
)
=
=
0
)
{
OnUserIdle
(
lock
)
;
}
else
if
(
strcmp
(
aTopic
"
user
-
interaction
-
active
"
)
=
=
0
)
{
OnUserInteracting
(
lock
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
topic
"
)
;
}
return
NS_OK
;
}
already_AddRefed
<
nsAvailableMemoryWatcherBase
>
CreateAvailableMemoryWatcher
(
)
{
RefPtr
watcher
(
new
nsAvailableMemoryWatcher
)
;
if
(
NS_FAILED
(
watcher
-
>
Init
(
)
)
)
{
return
do_AddRef
(
new
nsAvailableMemoryWatcherBase
)
;
}
return
watcher
.
forget
(
)
;
}
}
