#
include
"
mozilla
/
DeferredFinalize
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CycleCollectedJSRuntime
.
h
"
void
mozilla
:
:
DeferredFinalize
(
nsISupports
*
aSupports
)
{
CycleCollectedJSRuntime
*
rt
=
CycleCollectedJSRuntime
:
:
Get
(
)
;
MOZ_ASSERT
(
rt
"
Should
have
a
CycleCollectedJSRuntime
by
now
"
)
;
if
(
mozilla
:
:
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
mozilla
:
:
recordreplay
:
:
ActivateTrigger
(
aSupports
)
;
}
else
{
rt
-
>
DeferredFinalize
(
aSupports
)
;
}
}
void
mozilla
:
:
DeferredFinalize
(
DeferredFinalizeAppendFunction
aAppendFunc
DeferredFinalizeFunction
aFunc
void
*
aThing
)
{
CycleCollectedJSRuntime
*
rt
=
CycleCollectedJSRuntime
:
:
Get
(
)
;
MOZ_ASSERT
(
rt
"
Should
have
a
CycleCollectedJSRuntime
by
now
"
)
;
if
(
mozilla
:
:
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
mozilla
:
:
recordreplay
:
:
ActivateTrigger
(
aThing
)
;
}
else
{
rt
-
>
DeferredFinalize
(
aAppendFunc
aFunc
aThing
)
;
}
}
static
void
RecordReplayDeferredFinalize
(
DeferredFinalizeAppendFunction
aAppendFunc
DeferredFinalizeFunction
aFunc
void
*
aThing
)
{
mozilla
:
:
recordreplay
:
:
UnregisterTrigger
(
aThing
)
;
CycleCollectedJSRuntime
*
rt
=
CycleCollectedJSRuntime
:
:
Get
(
)
;
if
(
aAppendFunc
)
{
rt
-
>
DeferredFinalize
(
aAppendFunc
aFunc
aThing
)
;
}
else
{
rt
-
>
DeferredFinalize
(
reinterpret_cast
<
nsISupports
*
>
(
aThing
)
)
;
}
}
void
mozilla
:
:
RecordReplayRegisterDeferredFinalizeThing
(
DeferredFinalizeAppendFunction
aAppendFunc
DeferredFinalizeFunction
aFunc
void
*
aThing
)
{
if
(
mozilla
:
:
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
mozilla
:
:
recordreplay
:
:
RegisterTrigger
(
aThing
[
=
]
(
)
{
RecordReplayDeferredFinalize
(
aAppendFunc
aFunc
aThing
)
;
}
)
;
}
}
