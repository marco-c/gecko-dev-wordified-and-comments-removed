#
include
"
mozilla
/
CycleCollectedJSRuntime
.
h
"
#
include
<
algorithm
>
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
TimelineConsumers
.
h
"
#
include
"
mozilla
/
TimelineMarker
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
DebuggerOnGCRunnable
.
h
"
#
include
"
mozilla
/
dom
/
DOMJSClass
.
h
"
#
include
"
mozilla
/
dom
/
ProfileTimelineMarkerBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseBinding
.
h
"
#
include
"
mozilla
/
dom
/
PromiseDebugging
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
jsprf
.
h
"
#
include
"
js
/
Debug
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCycleCollectionNoteRootCallback
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsCycleCollector
.
h
"
#
include
"
nsDOMJSUtils
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ProfilerMarkerPayload
.
h
"
#
endif
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
#
include
"
nsIException
.
h
"
#
include
"
nsIPlatformInfo
.
h
"
#
include
"
nsThread
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
xpcpublic
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
struct
DeferredFinalizeFunctionHolder
{
DeferredFinalizeFunction
run
;
void
*
data
;
}
;
class
IncrementalFinalizeRunnable
:
public
CancelableRunnable
{
typedef
AutoTArray
<
DeferredFinalizeFunctionHolder
16
>
DeferredFinalizeArray
;
typedef
CycleCollectedJSRuntime
:
:
DeferredFinalizerTable
DeferredFinalizerTable
;
CycleCollectedJSRuntime
*
mRuntime
;
DeferredFinalizeArray
mDeferredFinalizeFunctions
;
uint32_t
mFinalizeFunctionToRun
;
bool
mReleasing
;
static
const
PRTime
SliceMillis
=
5
;
public
:
IncrementalFinalizeRunnable
(
CycleCollectedJSRuntime
*
aRt
DeferredFinalizerTable
&
aFinalizerTable
)
;
virtual
~
IncrementalFinalizeRunnable
(
)
;
void
ReleaseNow
(
bool
aLimited
)
;
NS_DECL_NSIRUNNABLE
}
;
}
struct
NoteWeakMapChildrenTracer
:
public
JS
:
:
CallbackTracer
{
NoteWeakMapChildrenTracer
(
JSRuntime
*
aRt
nsCycleCollectionNoteRootCallback
&
aCb
)
:
JS
:
:
CallbackTracer
(
aRt
)
mCb
(
aCb
)
mTracedAny
(
false
)
mMap
(
nullptr
)
mKey
(
nullptr
)
mKeyDelegate
(
nullptr
)
{
}
void
onChild
(
const
JS
:
:
GCCellPtr
&
aThing
)
override
;
nsCycleCollectionNoteRootCallback
&
mCb
;
bool
mTracedAny
;
JSObject
*
mMap
;
JS
:
:
GCCellPtr
mKey
;
JSObject
*
mKeyDelegate
;
}
;
void
NoteWeakMapChildrenTracer
:
:
onChild
(
const
JS
:
:
GCCellPtr
&
aThing
)
{
if
(
aThing
.
is
<
JSString
>
(
)
)
{
return
;
}
if
(
!
JS
:
:
GCThingIsMarkedGray
(
aThing
)
&
&
!
mCb
.
WantAllTraces
(
)
)
{
return
;
}
if
(
AddToCCKind
(
aThing
.
kind
(
)
)
)
{
mCb
.
NoteWeakMapping
(
mMap
mKey
mKeyDelegate
aThing
)
;
mTracedAny
=
true
;
}
else
{
JS
:
:
TraceChildren
(
this
aThing
)
;
}
}
struct
NoteWeakMapsTracer
:
public
js
:
:
WeakMapTracer
{
NoteWeakMapsTracer
(
JSRuntime
*
aRt
nsCycleCollectionNoteRootCallback
&
aCccb
)
:
js
:
:
WeakMapTracer
(
aRt
)
mCb
(
aCccb
)
mChildTracer
(
aRt
aCccb
)
{
}
void
trace
(
JSObject
*
aMap
JS
:
:
GCCellPtr
aKey
JS
:
:
GCCellPtr
aValue
)
override
;
nsCycleCollectionNoteRootCallback
&
mCb
;
NoteWeakMapChildrenTracer
mChildTracer
;
}
;
void
NoteWeakMapsTracer
:
:
trace
(
JSObject
*
aMap
JS
:
:
GCCellPtr
aKey
JS
:
:
GCCellPtr
aValue
)
{
if
(
(
!
aKey
|
|
!
JS
:
:
GCThingIsMarkedGray
(
aKey
)
)
&
&
MOZ_LIKELY
(
!
mCb
.
WantAllTraces
(
)
)
)
{
if
(
!
aValue
|
|
!
JS
:
:
GCThingIsMarkedGray
(
aValue
)
|
|
aValue
.
is
<
JSString
>
(
)
)
{
return
;
}
}
MOZ_ASSERT
(
AddToCCKind
(
aKey
.
kind
(
)
)
)
;
if
(
!
AddToCCKind
(
aKey
.
kind
(
)
)
)
{
aKey
=
nullptr
;
}
JSObject
*
kdelegate
=
nullptr
;
if
(
aKey
.
is
<
JSObject
>
(
)
)
{
kdelegate
=
js
:
:
GetWeakmapKeyDelegate
(
&
aKey
.
as
<
JSObject
>
(
)
)
;
}
if
(
AddToCCKind
(
aValue
.
kind
(
)
)
)
{
mCb
.
NoteWeakMapping
(
aMap
aKey
kdelegate
aValue
)
;
}
else
{
mChildTracer
.
mTracedAny
=
false
;
mChildTracer
.
mMap
=
aMap
;
mChildTracer
.
mKey
=
aKey
;
mChildTracer
.
mKeyDelegate
=
kdelegate
;
if
(
!
aValue
.
is
<
JSString
>
(
)
)
{
JS
:
:
TraceChildren
(
&
mChildTracer
aValue
)
;
}
if
(
!
mChildTracer
.
mTracedAny
&
&
aKey
&
&
JS
:
:
GCThingIsMarkedGray
(
aKey
)
&
&
kdelegate
)
{
mCb
.
NoteWeakMapping
(
aMap
aKey
kdelegate
nullptr
)
;
}
}
}
static
void
ShouldWeakMappingEntryBeBlack
(
JSObject
*
aMap
JS
:
:
GCCellPtr
aKey
JS
:
:
GCCellPtr
aValue
bool
*
aKeyShouldBeBlack
bool
*
aValueShouldBeBlack
)
{
*
aKeyShouldBeBlack
=
false
;
*
aValueShouldBeBlack
=
false
;
bool
keyMightNeedMarking
=
aKey
&
&
JS
:
:
GCThingIsMarkedGray
(
aKey
)
;
bool
valueMightNeedMarking
=
aValue
&
&
JS
:
:
GCThingIsMarkedGray
(
aValue
)
&
&
aValue
.
kind
(
)
!
=
JS
:
:
TraceKind
:
:
String
;
if
(
!
keyMightNeedMarking
&
&
!
valueMightNeedMarking
)
{
return
;
}
if
(
!
AddToCCKind
(
aKey
.
kind
(
)
)
)
{
aKey
=
nullptr
;
}
if
(
keyMightNeedMarking
&
&
aKey
.
is
<
JSObject
>
(
)
)
{
JSObject
*
kdelegate
=
js
:
:
GetWeakmapKeyDelegate
(
&
aKey
.
as
<
JSObject
>
(
)
)
;
if
(
kdelegate
&
&
!
JS
:
:
ObjectIsMarkedGray
(
kdelegate
)
&
&
(
!
aMap
|
|
!
JS
:
:
ObjectIsMarkedGray
(
aMap
)
)
)
{
*
aKeyShouldBeBlack
=
true
;
}
}
if
(
aValue
&
&
JS
:
:
GCThingIsMarkedGray
(
aValue
)
&
&
(
!
aKey
|
|
!
JS
:
:
GCThingIsMarkedGray
(
aKey
)
)
&
&
(
!
aMap
|
|
!
JS
:
:
ObjectIsMarkedGray
(
aMap
)
)
&
&
aValue
.
kind
(
)
!
=
JS
:
:
TraceKind
:
:
Shape
)
{
*
aValueShouldBeBlack
=
true
;
}
}
struct
FixWeakMappingGrayBitsTracer
:
public
js
:
:
WeakMapTracer
{
explicit
FixWeakMappingGrayBitsTracer
(
JSRuntime
*
aRt
)
:
js
:
:
WeakMapTracer
(
aRt
)
{
}
void
FixAll
(
)
{
do
{
mAnyMarked
=
false
;
js
:
:
TraceWeakMaps
(
this
)
;
}
while
(
mAnyMarked
)
;
}
void
trace
(
JSObject
*
aMap
JS
:
:
GCCellPtr
aKey
JS
:
:
GCCellPtr
aValue
)
override
{
bool
keyShouldBeBlack
;
bool
valueShouldBeBlack
;
ShouldWeakMappingEntryBeBlack
(
aMap
aKey
aValue
&
keyShouldBeBlack
&
valueShouldBeBlack
)
;
if
(
keyShouldBeBlack
&
&
JS
:
:
UnmarkGrayGCThingRecursively
(
aKey
)
)
{
mAnyMarked
=
true
;
}
if
(
valueShouldBeBlack
&
&
JS
:
:
UnmarkGrayGCThingRecursively
(
aValue
)
)
{
mAnyMarked
=
true
;
}
}
MOZ_INIT_OUTSIDE_CTOR
bool
mAnyMarked
;
}
;
#
ifdef
DEBUG
struct
CheckWeakMappingGrayBitsTracer
:
public
js
:
:
WeakMapTracer
{
explicit
CheckWeakMappingGrayBitsTracer
(
JSRuntime
*
aRt
)
:
js
:
:
WeakMapTracer
(
aRt
)
mFailed
(
false
)
{
}
static
bool
Check
(
JSRuntime
*
aRt
)
{
CheckWeakMappingGrayBitsTracer
tracer
(
aRt
)
;
js
:
:
TraceWeakMaps
(
&
tracer
)
;
return
!
tracer
.
mFailed
;
}
void
trace
(
JSObject
*
aMap
JS
:
:
GCCellPtr
aKey
JS
:
:
GCCellPtr
aValue
)
override
{
bool
keyShouldBeBlack
;
bool
valueShouldBeBlack
;
ShouldWeakMappingEntryBeBlack
(
aMap
aKey
aValue
&
keyShouldBeBlack
&
valueShouldBeBlack
)
;
if
(
keyShouldBeBlack
)
{
fprintf
(
stderr
"
Weak
mapping
key
%
p
of
map
%
p
should
be
black
\
n
"
aKey
.
asCell
(
)
aMap
)
;
mFailed
=
true
;
}
if
(
valueShouldBeBlack
)
{
fprintf
(
stderr
"
Weak
mapping
value
%
p
of
map
%
p
should
be
black
\
n
"
aValue
.
asCell
(
)
aMap
)
;
mFailed
=
true
;
}
}
bool
mFailed
;
}
;
#
endif
static
void
CheckParticipatesInCycleCollection
(
JS
:
:
GCCellPtr
aThing
const
char
*
aName
void
*
aClosure
)
{
bool
*
cycleCollectionEnabled
=
static_cast
<
bool
*
>
(
aClosure
)
;
if
(
*
cycleCollectionEnabled
)
{
return
;
}
if
(
AddToCCKind
(
aThing
.
kind
(
)
)
&
&
JS
:
:
GCThingIsMarkedGray
(
aThing
)
)
{
*
cycleCollectionEnabled
=
true
;
}
}
NS_IMETHODIMP
JSGCThingParticipant
:
:
TraverseNative
(
void
*
aPtr
nsCycleCollectionTraversalCallback
&
aCb
)
{
auto
runtime
=
reinterpret_cast
<
CycleCollectedJSRuntime
*
>
(
reinterpret_cast
<
char
*
>
(
this
)
-
offsetof
(
CycleCollectedJSRuntime
mGCThingCycleCollectorGlobal
)
)
;
JS
:
:
GCCellPtr
cellPtr
(
aPtr
JS
:
:
GCThingTraceKind
(
aPtr
)
)
;
runtime
-
>
TraverseGCThing
(
CycleCollectedJSRuntime
:
:
TRAVERSE_FULL
cellPtr
aCb
)
;
return
NS_OK
;
}
static
JSGCThingParticipant
sGCThingCycleCollectorGlobal
;
NS_IMETHODIMP
JSZoneParticipant
:
:
TraverseNative
(
void
*
aPtr
nsCycleCollectionTraversalCallback
&
aCb
)
{
auto
runtime
=
reinterpret_cast
<
CycleCollectedJSRuntime
*
>
(
reinterpret_cast
<
char
*
>
(
this
)
-
offsetof
(
CycleCollectedJSRuntime
mJSZoneCycleCollectorGlobal
)
)
;
MOZ_ASSERT
(
!
aCb
.
WantAllTraces
(
)
)
;
JS
:
:
Zone
*
zone
=
static_cast
<
JS
:
:
Zone
*
>
(
aPtr
)
;
runtime
-
>
TraverseZone
(
zone
aCb
)
;
return
NS_OK
;
}
struct
TraversalTracer
:
public
JS
:
:
CallbackTracer
{
TraversalTracer
(
JSRuntime
*
aRt
nsCycleCollectionTraversalCallback
&
aCb
)
:
JS
:
:
CallbackTracer
(
aRt
DoNotTraceWeakMaps
)
mCb
(
aCb
)
{
}
void
onChild
(
const
JS
:
:
GCCellPtr
&
aThing
)
override
;
nsCycleCollectionTraversalCallback
&
mCb
;
}
;
void
TraversalTracer
:
:
onChild
(
const
JS
:
:
GCCellPtr
&
aThing
)
{
if
(
!
JS
:
:
GCThingIsMarkedGray
(
aThing
)
&
&
!
mCb
.
WantAllTraces
(
)
)
{
return
;
}
if
(
AddToCCKind
(
aThing
.
kind
(
)
)
)
{
if
(
MOZ_UNLIKELY
(
mCb
.
WantDebugInfo
(
)
)
)
{
char
buffer
[
200
]
;
getTracingEdgeName
(
buffer
sizeof
(
buffer
)
)
;
mCb
.
NoteNextEdgeName
(
buffer
)
;
}
mCb
.
NoteJSChild
(
aThing
)
;
}
else
if
(
aThing
.
is
<
js
:
:
Shape
>
(
)
)
{
JS_TraceShapeCycleCollectorChildren
(
this
aThing
)
;
}
else
if
(
aThing
.
is
<
js
:
:
ObjectGroup
>
(
)
)
{
JS_TraceObjectGroupCycleCollectorChildren
(
this
aThing
)
;
}
else
if
(
!
aThing
.
is
<
JSString
>
(
)
)
{
JS
:
:
TraceChildren
(
this
aThing
)
;
}
}
static
void
NoteJSChildGrayWrapperShim
(
void
*
aData
JS
:
:
GCCellPtr
aThing
)
{
TraversalTracer
*
trc
=
static_cast
<
TraversalTracer
*
>
(
aData
)
;
trc
-
>
onChild
(
aThing
)
;
}
static
const
JSZoneParticipant
sJSZoneCycleCollectorGlobal
;
static
void
JSObjectsTenuredCb
(
JSContext
*
aContext
void
*
aData
)
{
static_cast
<
CycleCollectedJSRuntime
*
>
(
aData
)
-
>
JSObjectsTenured
(
)
;
}
bool
mozilla
:
:
GetBuildId
(
JS
:
:
BuildIdCharVector
*
aBuildID
)
{
nsCOMPtr
<
nsIPlatformInfo
>
info
=
do_GetService
(
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
)
;
if
(
!
info
)
{
return
false
;
}
nsCString
buildID
;
nsresult
rv
=
info
-
>
GetPlatformBuildID
(
buildID
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
if
(
!
aBuildID
-
>
resize
(
buildID
.
Length
(
)
)
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
buildID
.
Length
(
)
;
i
+
+
)
{
(
*
aBuildID
)
[
i
]
=
buildID
[
i
]
;
}
return
true
;
}
static
void
MozCrashWarningReporter
(
JSContext
*
JSErrorReport
*
)
{
MOZ_CRASH
(
"
Why
is
someone
touching
JSAPI
without
an
AutoJSAPI
?
"
)
;
}
CycleCollectedJSRuntime
:
:
CycleCollectedJSRuntime
(
JSContext
*
aCx
)
:
mGCThingCycleCollectorGlobal
(
sGCThingCycleCollectorGlobal
)
mJSZoneCycleCollectorGlobal
(
sJSZoneCycleCollectorGlobal
)
mJSRuntime
(
JS_GetRuntime
(
aCx
)
)
mPrevGCSliceCallback
(
nullptr
)
mPrevGCNurseryCollectionCallback
(
nullptr
)
mJSHolderMap
(
256
)
mOutOfMemoryState
(
OOMState
:
:
OK
)
mLargeAllocationFailureState
(
OOMState
:
:
OK
)
{
MOZ_COUNT_CTOR
(
CycleCollectedJSRuntime
)
;
MOZ_ASSERT
(
aCx
)
;
MOZ_ASSERT
(
mJSRuntime
)
;
if
(
!
JS_AddExtraGCRootsTracer
(
aCx
TraceBlackJS
this
)
)
{
MOZ_CRASH
(
"
JS_AddExtraGCRootsTracer
failed
"
)
;
}
JS_SetGrayGCRootsTracer
(
aCx
TraceGrayJS
this
)
;
JS_SetGCCallback
(
aCx
GCCallback
this
)
;
mPrevGCSliceCallback
=
JS
:
:
SetGCSliceCallback
(
aCx
GCSliceCallback
)
;
if
(
NS_IsMainThread
(
)
)
{
mPrevGCNurseryCollectionCallback
=
JS
:
:
SetGCNurseryCollectionCallback
(
aCx
GCNurseryCollectionCallback
)
;
}
JS_SetObjectsTenuredCallback
(
aCx
JSObjectsTenuredCb
this
)
;
JS
:
:
SetOutOfMemoryCallback
(
aCx
OutOfMemoryCallback
this
)
;
JS_SetExternalStringSizeofCallback
(
aCx
SizeofExternalStringCallback
)
;
JS
:
:
SetBuildIdOp
(
aCx
GetBuildId
)
;
JS
:
:
SetWarningReporter
(
aCx
MozCrashWarningReporter
)
;
#
ifdef
MOZ_CRASHREPORTER
js
:
:
AutoEnterOOMUnsafeRegion
:
:
setAnnotateOOMAllocationSizeCallback
(
CrashReporter
:
:
AnnotateOOMAllocationSize
)
;
#
endif
static
js
:
:
DOMCallbacks
DOMcallbacks
=
{
InstanceClassHasProtoAtDepth
}
;
SetDOMCallbacks
(
aCx
&
DOMcallbacks
)
;
js
:
:
SetScriptEnvironmentPreparer
(
aCx
&
mEnvironmentPreparer
)
;
JS
:
:
dbg
:
:
SetDebuggerMallocSizeOf
(
aCx
moz_malloc_size_of
)
;
}
void
CycleCollectedJSRuntime
:
:
Shutdown
(
JSContext
*
cx
)
{
JS_RemoveExtraGCRootsTracer
(
cx
TraceBlackJS
this
)
;
JS_RemoveExtraGCRootsTracer
(
cx
TraceGrayJS
this
)
;
}
CycleCollectedJSRuntime
:
:
~
CycleCollectedJSRuntime
(
)
{
MOZ_COUNT_DTOR
(
CycleCollectedJSRuntime
)
;
MOZ_ASSERT
(
!
mDeferredFinalizerTable
.
Count
(
)
)
;
}
void
CycleCollectedJSRuntime
:
:
AddContext
(
CycleCollectedJSContext
*
aContext
)
{
mContexts
.
insertBack
(
aContext
)
;
}
void
CycleCollectedJSRuntime
:
:
RemoveContext
(
CycleCollectedJSContext
*
aContext
)
{
aContext
-
>
removeFrom
(
mContexts
)
;
}
size_t
CycleCollectedJSRuntime
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
n
+
=
mJSHolders
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
n
+
=
mJSHolderMap
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
return
n
;
}
void
CycleCollectedJSRuntime
:
:
UnmarkSkippableJSHolders
(
)
{
for
(
auto
iter
=
mJSHolders
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
void
*
holder
=
iter
.
Get
(
)
.
mHolder
;
nsScriptObjectTracer
*
tracer
=
iter
.
Get
(
)
.
mTracer
;
tracer
-
>
CanSkip
(
holder
true
)
;
}
}
void
CycleCollectedJSRuntime
:
:
DescribeGCThing
(
bool
aIsMarked
JS
:
:
GCCellPtr
aThing
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
if
(
!
aCb
.
WantDebugInfo
(
)
)
{
aCb
.
DescribeGCedNode
(
aIsMarked
"
JS
Object
"
)
;
return
;
}
char
name
[
72
]
;
uint64_t
compartmentAddress
=
0
;
if
(
aThing
.
is
<
JSObject
>
(
)
)
{
JSObject
*
obj
=
&
aThing
.
as
<
JSObject
>
(
)
;
compartmentAddress
=
(
uint64_t
)
js
:
:
GetObjectCompartment
(
obj
)
;
const
js
:
:
Class
*
clasp
=
js
:
:
GetObjectClass
(
obj
)
;
if
(
DescribeCustomObjects
(
obj
clasp
name
)
)
{
}
else
if
(
js
:
:
IsFunctionObject
(
obj
)
)
{
JSFunction
*
fun
=
JS_GetObjectFunction
(
obj
)
;
JSString
*
str
=
JS_GetFunctionDisplayId
(
fun
)
;
if
(
str
)
{
JSFlatString
*
flat
=
JS_ASSERT_STRING_IS_FLAT
(
str
)
;
nsAutoString
chars
;
AssignJSFlatString
(
chars
flat
)
;
NS_ConvertUTF16toUTF8
fname
(
chars
)
;
SprintfLiteral
(
name
"
JS
Object
(
Function
-
%
s
)
"
fname
.
get
(
)
)
;
}
else
{
SprintfLiteral
(
name
"
JS
Object
(
Function
)
"
)
;
}
}
else
{
SprintfLiteral
(
name
"
JS
Object
(
%
s
)
"
clasp
-
>
name
)
;
}
}
else
{
SprintfLiteral
(
name
"
JS
%
s
"
JS
:
:
GCTraceKindToAscii
(
aThing
.
kind
(
)
)
)
;
}
aCb
.
DescribeGCedNode
(
aIsMarked
name
compartmentAddress
)
;
}
void
CycleCollectedJSRuntime
:
:
NoteGCThingJSChildren
(
JS
:
:
GCCellPtr
aThing
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
TraversalTracer
trc
(
mJSRuntime
aCb
)
;
JS
:
:
TraceChildren
(
&
trc
aThing
)
;
}
void
CycleCollectedJSRuntime
:
:
NoteGCThingXPCOMChildren
(
const
js
:
:
Class
*
aClasp
JSObject
*
aObj
nsCycleCollectionTraversalCallback
&
aCb
)
const
{
MOZ_ASSERT
(
aClasp
)
;
MOZ_ASSERT
(
aClasp
=
=
js
:
:
GetObjectClass
(
aObj
)
)
;
if
(
NoteCustomGCThingXPCOMChildren
(
aClasp
aObj
aCb
)
)
{
return
;
}
else
if
(
aClasp
-
>
flags
&
JSCLASS_HAS_PRIVATE
&
&
aClasp
-
>
flags
&
JSCLASS_PRIVATE_IS_NSISUPPORTS
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
js
:
:
GetObjectPrivate
(
obj
)
"
)
;
aCb
.
NoteXPCOMChild
(
static_cast
<
nsISupports
*
>
(
js
:
:
GetObjectPrivate
(
aObj
)
)
)
;
}
else
{
const
DOMJSClass
*
domClass
=
GetDOMClass
(
aObj
)
;
if
(
domClass
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
aCb
"
UnwrapDOMObject
(
obj
)
"
)
;
if
(
domClass
-
>
mDOMObjectIsISupports
)
{
aCb
.
NoteXPCOMChild
(
UnwrapPossiblyNotInitializedDOMObject
<
nsISupports
>
(
aObj
)
)
;
}
else
if
(
domClass
-
>
mParticipant
)
{
aCb
.
NoteNativeChild
(
UnwrapPossiblyNotInitializedDOMObject
<
void
>
(
aObj
)
domClass
-
>
mParticipant
)
;
}
}
}
}
void
CycleCollectedJSRuntime
:
:
TraverseGCThing
(
TraverseSelect
aTs
JS
:
:
GCCellPtr
aThing
nsCycleCollectionTraversalCallback
&
aCb
)
{
bool
isMarkedGray
=
JS
:
:
GCThingIsMarkedGray
(
aThing
)
;
if
(
aTs
=
=
TRAVERSE_FULL
)
{
DescribeGCThing
(
!
isMarkedGray
aThing
aCb
)
;
}
if
(
!
isMarkedGray
&
&
!
aCb
.
WantAllTraces
(
)
)
{
return
;
}
if
(
aTs
=
=
TRAVERSE_FULL
)
{
NoteGCThingJSChildren
(
aThing
aCb
)
;
}
if
(
aThing
.
is
<
JSObject
>
(
)
)
{
JSObject
*
obj
=
&
aThing
.
as
<
JSObject
>
(
)
;
NoteGCThingXPCOMChildren
(
js
:
:
GetObjectClass
(
obj
)
obj
aCb
)
;
}
}
struct
TraverseObjectShimClosure
{
nsCycleCollectionTraversalCallback
&
cb
;
CycleCollectedJSRuntime
*
self
;
}
;
void
CycleCollectedJSRuntime
:
:
TraverseZone
(
JS
:
:
Zone
*
aZone
nsCycleCollectionTraversalCallback
&
aCb
)
{
aCb
.
DescribeGCedNode
(
false
"
JS
Zone
"
)
;
TraversalTracer
trc
(
mJSRuntime
aCb
)
;
js
:
:
VisitGrayWrapperTargets
(
aZone
NoteJSChildGrayWrapperShim
&
trc
)
;
TraverseObjectShimClosure
closure
=
{
aCb
this
}
;
js
:
:
IterateGrayObjects
(
aZone
TraverseObjectShim
&
closure
)
;
}
void
CycleCollectedJSRuntime
:
:
TraverseObjectShim
(
void
*
aData
JS
:
:
GCCellPtr
aThing
)
{
TraverseObjectShimClosure
*
closure
=
static_cast
<
TraverseObjectShimClosure
*
>
(
aData
)
;
MOZ_ASSERT
(
aThing
.
is
<
JSObject
>
(
)
)
;
closure
-
>
self
-
>
TraverseGCThing
(
CycleCollectedJSRuntime
:
:
TRAVERSE_CPP
aThing
closure
-
>
cb
)
;
}
void
CycleCollectedJSRuntime
:
:
TraverseNativeRoots
(
nsCycleCollectionNoteRootCallback
&
aCb
)
{
TraverseAdditionalNativeRoots
(
aCb
)
;
for
(
auto
iter
=
mJSHolders
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
void
*
holder
=
iter
.
Get
(
)
.
mHolder
;
nsScriptObjectTracer
*
tracer
=
iter
.
Get
(
)
.
mTracer
;
bool
noteRoot
=
false
;
if
(
MOZ_UNLIKELY
(
aCb
.
WantAllTraces
(
)
)
)
{
noteRoot
=
true
;
}
else
{
tracer
-
>
Trace
(
holder
TraceCallbackFunc
(
CheckParticipatesInCycleCollection
)
&
noteRoot
)
;
}
if
(
noteRoot
)
{
aCb
.
NoteNativeRoot
(
holder
tracer
)
;
}
}
}
void
CycleCollectedJSRuntime
:
:
TraceBlackJS
(
JSTracer
*
aTracer
void
*
aData
)
{
CycleCollectedJSRuntime
*
self
=
static_cast
<
CycleCollectedJSRuntime
*
>
(
aData
)
;
self
-
>
TraceNativeBlackRoots
(
aTracer
)
;
}
void
CycleCollectedJSRuntime
:
:
TraceGrayJS
(
JSTracer
*
aTracer
void
*
aData
)
{
CycleCollectedJSRuntime
*
self
=
static_cast
<
CycleCollectedJSRuntime
*
>
(
aData
)
;
self
-
>
TraceNativeGrayRoots
(
aTracer
)
;
}
void
CycleCollectedJSRuntime
:
:
GCCallback
(
JSContext
*
aContext
JSGCStatus
aStatus
void
*
aData
)
{
CycleCollectedJSRuntime
*
self
=
static_cast
<
CycleCollectedJSRuntime
*
>
(
aData
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
=
=
aContext
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Runtime
(
)
=
=
self
)
;
self
-
>
OnGC
(
aContext
aStatus
)
;
}
void
CycleCollectedJSRuntime
:
:
GCSliceCallback
(
JSContext
*
aContext
JS
:
:
GCProgress
aProgress
const
JS
:
:
GCDescription
&
aDesc
)
{
CycleCollectedJSRuntime
*
self
=
CycleCollectedJSRuntime
:
:
Get
(
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
=
=
aContext
)
;
#
ifdef
MOZ_GECKO_PROFILER
if
(
profiler_is_active
(
)
)
{
if
(
aProgress
=
=
JS
:
:
GC_CYCLE_END
)
{
profiler_add_marker
(
"
GCMajor
"
MakeUnique
<
GCMajorMarkerPayload
>
(
aDesc
.
startTime
(
aContext
)
aDesc
.
endTime
(
aContext
)
aDesc
.
summaryToJSON
(
aContext
)
)
)
;
}
else
if
(
aProgress
=
=
JS
:
:
GC_SLICE_END
)
{
profiler_add_marker
(
"
GCSlice
"
MakeUnique
<
GCSliceMarkerPayload
>
(
aDesc
.
lastSliceStart
(
aContext
)
aDesc
.
lastSliceEnd
(
aContext
)
aDesc
.
sliceToJSON
(
aContext
)
)
)
;
}
}
#
endif
if
(
aProgress
=
=
JS
:
:
GC_CYCLE_END
&
&
JS
:
:
dbg
:
:
FireOnGarbageCollectionHookRequired
(
aContext
)
)
{
JS
:
:
gcreason
:
:
Reason
reason
=
aDesc
.
reason_
;
Unused
<
<
NS_WARN_IF
(
NS_FAILED
(
DebuggerOnGCRunnable
:
:
Enqueue
(
aContext
aDesc
)
)
&
&
reason
!
=
JS
:
:
gcreason
:
:
SHUTDOWN_CC
&
&
reason
!
=
JS
:
:
gcreason
:
:
DESTROY_RUNTIME
&
&
reason
!
=
JS
:
:
gcreason
:
:
XPCONNECT_SHUTDOWN
)
;
}
if
(
self
-
>
mPrevGCSliceCallback
)
{
self
-
>
mPrevGCSliceCallback
(
aContext
aProgress
aDesc
)
;
}
}
class
MinorGCMarker
:
public
TimelineMarker
{
private
:
JS
:
:
gcreason
:
:
Reason
mReason
;
public
:
MinorGCMarker
(
MarkerTracingType
aTracingType
JS
:
:
gcreason
:
:
Reason
aReason
)
:
TimelineMarker
(
"
MinorGC
"
aTracingType
MarkerStackRequest
:
:
NO_STACK
)
mReason
(
aReason
)
{
MOZ_ASSERT
(
aTracingType
=
=
MarkerTracingType
:
:
START
|
|
aTracingType
=
=
MarkerTracingType
:
:
END
)
;
}
MinorGCMarker
(
JS
:
:
GCNurseryProgress
aProgress
JS
:
:
gcreason
:
:
Reason
aReason
)
:
TimelineMarker
(
"
MinorGC
"
aProgress
=
=
JS
:
:
GCNurseryProgress
:
:
GC_NURSERY_COLLECTION_START
?
MarkerTracingType
:
:
START
:
MarkerTracingType
:
:
END
MarkerStackRequest
:
:
NO_STACK
)
mReason
(
aReason
)
{
}
virtual
void
AddDetails
(
JSContext
*
aCx
dom
:
:
ProfileTimelineMarker
&
aMarker
)
override
{
TimelineMarker
:
:
AddDetails
(
aCx
aMarker
)
;
if
(
GetTracingType
(
)
=
=
MarkerTracingType
:
:
START
)
{
auto
reason
=
JS
:
:
gcreason
:
:
ExplainReason
(
mReason
)
;
aMarker
.
mCauseName
.
Construct
(
NS_ConvertUTF8toUTF16
(
reason
)
)
;
}
}
virtual
UniquePtr
<
AbstractTimelineMarker
>
Clone
(
)
override
{
auto
clone
=
MakeUnique
<
MinorGCMarker
>
(
GetTracingType
(
)
mReason
)
;
clone
-
>
SetCustomTime
(
GetTime
(
)
)
;
return
UniquePtr
<
AbstractTimelineMarker
>
(
Move
(
clone
)
)
;
}
}
;
void
CycleCollectedJSRuntime
:
:
GCNurseryCollectionCallback
(
JSContext
*
aContext
JS
:
:
GCNurseryProgress
aProgress
JS
:
:
gcreason
:
:
Reason
aReason
)
{
CycleCollectedJSRuntime
*
self
=
CycleCollectedJSRuntime
:
:
Get
(
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
=
=
aContext
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
if
(
timelines
&
&
!
timelines
-
>
IsEmpty
(
)
)
{
UniquePtr
<
AbstractTimelineMarker
>
abstractMarker
(
MakeUnique
<
MinorGCMarker
>
(
aProgress
aReason
)
)
;
timelines
-
>
AddMarkerForAllObservedDocShells
(
abstractMarker
)
;
}
if
(
aProgress
=
=
JS
:
:
GCNurseryProgress
:
:
GC_NURSERY_COLLECTION_START
)
{
self
-
>
mLatestNurseryCollectionStart
=
TimeStamp
:
:
Now
(
)
;
}
#
ifdef
MOZ_GECKO_PROFILER
else
if
(
aProgress
=
=
JS
:
:
GCNurseryProgress
:
:
GC_NURSERY_COLLECTION_END
&
&
profiler_is_active
(
)
)
{
profiler_add_marker
(
"
GCMinor
"
MakeUnique
<
GCMinorMarkerPayload
>
(
self
-
>
mLatestNurseryCollectionStart
TimeStamp
:
:
Now
(
)
JS
:
:
MinorGcToJSON
(
aContext
)
)
)
;
}
#
endif
if
(
self
-
>
mPrevGCNurseryCollectionCallback
)
{
self
-
>
mPrevGCNurseryCollectionCallback
(
aContext
aProgress
aReason
)
;
}
}
void
CycleCollectedJSRuntime
:
:
OutOfMemoryCallback
(
JSContext
*
aContext
void
*
aData
)
{
CycleCollectedJSRuntime
*
self
=
static_cast
<
CycleCollectedJSRuntime
*
>
(
aData
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
=
=
aContext
)
;
MOZ_ASSERT
(
CycleCollectedJSContext
:
:
Get
(
)
-
>
Runtime
(
)
=
=
self
)
;
self
-
>
OnOutOfMemory
(
)
;
}
size_t
CycleCollectedJSRuntime
:
:
SizeofExternalStringCallback
(
JSString
*
aStr
MallocSizeOf
aMallocSizeOf
)
{
JS
:
:
AutoCheckCannotGC
autoCannotGC
;
if
(
!
XPCStringConvert
:
:
IsDOMString
(
aStr
)
)
{
return
0
;
}
const
char16_t
*
chars
=
JS_GetTwoByteExternalStringChars
(
aStr
)
;
const
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromData
(
(
void
*
)
chars
)
;
return
buf
-
>
SizeOfIncludingThisIfUnshared
(
aMallocSizeOf
)
;
}
struct
JsGcTracer
:
public
TraceCallbacks
{
virtual
void
Trace
(
JS
:
:
Heap
<
JS
:
:
Value
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
jsid
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSObject
*
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JSObject
*
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
js
:
:
UnsafeTraceManuallyBarrieredEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
TenuredHeap
<
JSObject
*
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSString
*
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSScript
*
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSFunction
*
>
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
JS
:
:
TraceEdge
(
static_cast
<
JSTracer
*
>
(
aClosure
)
aPtr
aName
)
;
}
}
;
void
mozilla
:
:
TraceScriptHolder
(
nsISupports
*
aHolder
JSTracer
*
aTracer
)
{
nsXPCOMCycleCollectionParticipant
*
participant
=
nullptr
;
CallQueryInterface
(
aHolder
&
participant
)
;
participant
-
>
Trace
(
aHolder
JsGcTracer
(
)
aTracer
)
;
}
void
CycleCollectedJSRuntime
:
:
TraceNativeGrayRoots
(
JSTracer
*
aTracer
)
{
TraceAdditionalNativeGrayRoots
(
aTracer
)
;
for
(
auto
iter
=
mJSHolders
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
void
*
holder
=
iter
.
Get
(
)
.
mHolder
;
nsScriptObjectTracer
*
tracer
=
iter
.
Get
(
)
.
mTracer
;
tracer
-
>
Trace
(
holder
JsGcTracer
(
)
aTracer
)
;
}
}
void
CycleCollectedJSRuntime
:
:
AddJSHolder
(
void
*
aHolder
nsScriptObjectTracer
*
aTracer
)
{
auto
entry
=
mJSHolderMap
.
LookupForAdd
(
aHolder
)
;
if
(
entry
)
{
JSHolderInfo
*
info
=
entry
.
Data
(
)
;
MOZ_ASSERT
(
info
-
>
mHolder
=
=
aHolder
)
;
info
-
>
mTracer
=
aTracer
;
return
;
}
mJSHolders
.
InfallibleAppend
(
JSHolderInfo
{
aHolder
aTracer
}
)
;
entry
.
OrInsert
(
[
&
]
{
return
&
mJSHolders
.
GetLast
(
)
;
}
)
;
}
struct
ClearJSHolder
:
public
TraceCallbacks
{
virtual
void
Trace
(
JS
:
:
Heap
<
JS
:
:
Value
>
*
aPtr
const
char
*
void
*
)
const
override
{
aPtr
-
>
setUndefined
(
)
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
jsid
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
JSID_VOID
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSObject
*
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
nullptr
;
}
virtual
void
Trace
(
JSObject
*
*
aPtr
const
char
*
aName
void
*
aClosure
)
const
override
{
*
aPtr
=
nullptr
;
}
virtual
void
Trace
(
JS
:
:
TenuredHeap
<
JSObject
*
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
nullptr
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSString
*
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
nullptr
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSScript
*
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
nullptr
;
}
virtual
void
Trace
(
JS
:
:
Heap
<
JSFunction
*
>
*
aPtr
const
char
*
void
*
)
const
override
{
*
aPtr
=
nullptr
;
}
}
;
void
CycleCollectedJSRuntime
:
:
RemoveJSHolder
(
void
*
aHolder
)
{
auto
entry
=
mJSHolderMap
.
Lookup
(
aHolder
)
;
if
(
entry
)
{
JSHolderInfo
*
info
=
entry
.
Data
(
)
;
MOZ_ASSERT
(
info
-
>
mHolder
=
=
aHolder
)
;
info
-
>
mTracer
-
>
Trace
(
aHolder
ClearJSHolder
(
)
nullptr
)
;
JSHolderInfo
*
lastInfo
=
&
mJSHolders
.
GetLast
(
)
;
bool
updateLast
=
(
info
!
=
lastInfo
)
;
if
(
updateLast
)
{
*
info
=
*
lastInfo
;
}
mJSHolders
.
PopLast
(
)
;
entry
.
Remove
(
)
;
if
(
updateLast
)
{
mJSHolderMap
.
Put
(
info
-
>
mHolder
info
)
;
}
}
}
#
ifdef
DEBUG
bool
CycleCollectedJSRuntime
:
:
IsJSHolder
(
void
*
aHolder
)
{
return
mJSHolderMap
.
Get
(
aHolder
nullptr
)
;
}
static
void
AssertNoGcThing
(
JS
:
:
GCCellPtr
aGCThing
const
char
*
aName
void
*
aClosure
)
{
MOZ_ASSERT
(
!
aGCThing
)
;
}
void
CycleCollectedJSRuntime
:
:
AssertNoObjectsToTrace
(
void
*
aPossibleJSHolder
)
{
JSHolderInfo
*
info
=
nullptr
;
if
(
!
mJSHolderMap
.
Get
(
aPossibleJSHolder
&
info
)
)
{
return
;
}
MOZ_ASSERT
(
info
-
>
mHolder
=
=
aPossibleJSHolder
)
;
info
-
>
mTracer
-
>
Trace
(
aPossibleJSHolder
TraceCallbackFunc
(
AssertNoGcThing
)
nullptr
)
;
}
#
endif
nsCycleCollectionParticipant
*
CycleCollectedJSRuntime
:
:
GCThingParticipant
(
)
{
return
&
mGCThingCycleCollectorGlobal
;
}
nsCycleCollectionParticipant
*
CycleCollectedJSRuntime
:
:
ZoneParticipant
(
)
{
return
&
mJSZoneCycleCollectorGlobal
;
}
nsresult
CycleCollectedJSRuntime
:
:
TraverseRoots
(
nsCycleCollectionNoteRootCallback
&
aCb
)
{
TraverseNativeRoots
(
aCb
)
;
NoteWeakMapsTracer
trc
(
mJSRuntime
aCb
)
;
js
:
:
TraceWeakMaps
(
&
trc
)
;
return
NS_OK
;
}
bool
CycleCollectedJSRuntime
:
:
UsefulToMergeZones
(
)
const
{
return
false
;
}
void
CycleCollectedJSRuntime
:
:
FixWeakMappingGrayBits
(
)
const
{
MOZ_ASSERT
(
!
JS
:
:
IsIncrementalGCInProgress
(
mJSRuntime
)
"
Don
'
t
call
FixWeakMappingGrayBits
during
a
GC
.
"
)
;
FixWeakMappingGrayBitsTracer
fixer
(
mJSRuntime
)
;
fixer
.
FixAll
(
)
;
}
void
CycleCollectedJSRuntime
:
:
CheckGrayBits
(
)
const
{
MOZ_ASSERT
(
!
JS
:
:
IsIncrementalGCInProgress
(
mJSRuntime
)
"
Don
'
t
call
CheckGrayBits
during
a
GC
.
"
)
;
#
ifndef
ANDROID
MOZ_ASSERT
(
js
:
:
CheckGrayMarkingState
(
mJSRuntime
)
)
;
MOZ_ASSERT
(
CheckWeakMappingGrayBitsTracer
:
:
Check
(
mJSRuntime
)
)
;
#
endif
}
bool
CycleCollectedJSRuntime
:
:
AreGCGrayBitsValid
(
)
const
{
return
js
:
:
AreGCGrayBitsValid
(
mJSRuntime
)
;
}
void
CycleCollectedJSRuntime
:
:
GarbageCollect
(
uint32_t
aReason
)
const
{
MOZ_ASSERT
(
aReason
<
JS
:
:
gcreason
:
:
NUM_REASONS
)
;
JS
:
:
gcreason
:
:
Reason
gcreason
=
static_cast
<
JS
:
:
gcreason
:
:
Reason
>
(
aReason
)
;
JSContext
*
cx
=
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
;
JS
:
:
PrepareForFullGC
(
cx
)
;
JS
:
:
GCForReason
(
cx
GC_NORMAL
gcreason
)
;
}
void
CycleCollectedJSRuntime
:
:
JSObjectsTenured
(
)
{
for
(
auto
iter
=
mNurseryObjects
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsWrapperCache
*
cache
=
iter
.
Get
(
)
;
JSObject
*
wrapper
=
cache
-
>
GetWrapperMaybeDead
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
wrapper
)
;
if
(
!
JS
:
:
ObjectIsTenured
(
wrapper
)
)
{
MOZ_ASSERT
(
!
cache
-
>
PreservingWrapper
(
)
)
;
const
JSClass
*
jsClass
=
js
:
:
GetObjectJSClass
(
wrapper
)
;
jsClass
-
>
doFinalize
(
nullptr
wrapper
)
;
}
}
#
ifdef
DEBUG
for
(
auto
iter
=
mPreservedNurseryObjects
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
MOZ_ASSERT
(
JS
:
:
ObjectIsTenured
(
iter
.
Get
(
)
.
get
(
)
)
)
;
}
#
endif
mNurseryObjects
.
Clear
(
)
;
mPreservedNurseryObjects
.
Clear
(
)
;
}
void
CycleCollectedJSRuntime
:
:
NurseryWrapperAdded
(
nsWrapperCache
*
aCache
)
{
MOZ_ASSERT
(
aCache
)
;
MOZ_ASSERT
(
aCache
-
>
GetWrapperMaybeDead
(
)
)
;
MOZ_ASSERT
(
!
JS
:
:
ObjectIsTenured
(
aCache
-
>
GetWrapperMaybeDead
(
)
)
)
;
mNurseryObjects
.
InfallibleAppend
(
aCache
)
;
}
void
CycleCollectedJSRuntime
:
:
NurseryWrapperPreserved
(
JSObject
*
aWrapper
)
{
mPreservedNurseryObjects
.
InfallibleAppend
(
JS
:
:
PersistentRooted
<
JSObject
*
>
(
mJSRuntime
aWrapper
)
)
;
}
void
CycleCollectedJSRuntime
:
:
DeferredFinalize
(
DeferredFinalizeAppendFunction
aAppendFunc
DeferredFinalizeFunction
aFunc
void
*
aThing
)
{
if
(
auto
entry
=
mDeferredFinalizerTable
.
LookupForAdd
(
aFunc
)
)
{
aAppendFunc
(
entry
.
Data
(
)
aThing
)
;
}
else
{
entry
.
OrInsert
(
[
aAppendFunc
aThing
]
(
)
{
return
aAppendFunc
(
nullptr
aThing
)
;
}
)
;
}
}
void
CycleCollectedJSRuntime
:
:
DeferredFinalize
(
nsISupports
*
aSupports
)
{
typedef
DeferredFinalizerImpl
<
nsISupports
>
Impl
;
DeferredFinalize
(
Impl
:
:
AppendDeferredFinalizePointer
Impl
:
:
DeferredFinalize
aSupports
)
;
}
void
CycleCollectedJSRuntime
:
:
DumpJSHeap
(
FILE
*
aFile
)
{
JSContext
*
cx
=
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
;
js
:
:
DumpHeap
(
cx
aFile
js
:
:
CollectNurseryBeforeDump
)
;
}
IncrementalFinalizeRunnable
:
:
IncrementalFinalizeRunnable
(
CycleCollectedJSRuntime
*
aRt
DeferredFinalizerTable
&
aFinalizers
)
:
CancelableRunnable
(
"
IncrementalFinalizeRunnable
"
)
mRuntime
(
aRt
)
mFinalizeFunctionToRun
(
0
)
mReleasing
(
false
)
{
for
(
auto
iter
=
aFinalizers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DeferredFinalizeFunction
&
function
=
iter
.
Key
(
)
;
void
*
&
data
=
iter
.
Data
(
)
;
DeferredFinalizeFunctionHolder
*
holder
=
mDeferredFinalizeFunctions
.
AppendElement
(
)
;
holder
-
>
run
=
function
;
holder
-
>
data
=
data
;
iter
.
Remove
(
)
;
}
}
IncrementalFinalizeRunnable
:
:
~
IncrementalFinalizeRunnable
(
)
{
MOZ_ASSERT
(
this
!
=
mRuntime
-
>
mFinalizeRunnable
)
;
}
void
IncrementalFinalizeRunnable
:
:
ReleaseNow
(
bool
aLimited
)
{
if
(
mReleasing
)
{
NS_WARNING
(
"
Re
-
entering
ReleaseNow
"
)
;
return
;
}
{
mozilla
:
:
AutoRestore
<
bool
>
ar
(
mReleasing
)
;
mReleasing
=
true
;
MOZ_ASSERT
(
mDeferredFinalizeFunctions
.
Length
(
)
!
=
0
"
We
should
have
at
least
ReleaseSliceNow
to
run
"
)
;
MOZ_ASSERT
(
mFinalizeFunctionToRun
<
mDeferredFinalizeFunctions
.
Length
(
)
"
No
more
finalizers
to
run
?
"
)
;
TimeDuration
sliceTime
=
TimeDuration
:
:
FromMilliseconds
(
SliceMillis
)
;
TimeStamp
started
=
TimeStamp
:
:
Now
(
)
;
bool
timeout
=
false
;
do
{
const
DeferredFinalizeFunctionHolder
&
function
=
mDeferredFinalizeFunctions
[
mFinalizeFunctionToRun
]
;
if
(
aLimited
)
{
bool
done
=
false
;
while
(
!
timeout
&
&
!
done
)
{
done
=
function
.
run
(
100
function
.
data
)
;
timeout
=
TimeStamp
:
:
Now
(
)
-
started
>
=
sliceTime
;
}
if
(
done
)
{
+
+
mFinalizeFunctionToRun
;
}
if
(
timeout
)
{
break
;
}
}
else
{
while
(
!
function
.
run
(
UINT32_MAX
function
.
data
)
)
;
+
+
mFinalizeFunctionToRun
;
}
}
while
(
mFinalizeFunctionToRun
<
mDeferredFinalizeFunctions
.
Length
(
)
)
;
}
if
(
mFinalizeFunctionToRun
=
=
mDeferredFinalizeFunctions
.
Length
(
)
)
{
MOZ_ASSERT
(
mRuntime
-
>
mFinalizeRunnable
=
=
this
)
;
mDeferredFinalizeFunctions
.
Clear
(
)
;
mRuntime
-
>
mFinalizeRunnable
=
nullptr
;
}
}
NS_IMETHODIMP
IncrementalFinalizeRunnable
:
:
Run
(
)
{
if
(
mRuntime
-
>
mFinalizeRunnable
!
=
this
)
{
MOZ_ASSERT
(
!
mDeferredFinalizeFunctions
.
Length
(
)
)
;
return
NS_OK
;
}
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
ReleaseNow
(
true
)
;
if
(
mDeferredFinalizeFunctions
.
Length
(
)
)
{
nsresult
rv
=
NS_DispatchToCurrentThread
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
ReleaseNow
(
false
)
;
}
}
uint32_t
duration
=
(
uint32_t
)
(
(
TimeStamp
:
:
Now
(
)
-
start
)
.
ToMilliseconds
(
)
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
DEFERRED_FINALIZE_ASYNC
duration
)
;
return
NS_OK
;
}
void
CycleCollectedJSRuntime
:
:
FinalizeDeferredThings
(
CycleCollectedJSContext
:
:
DeferredFinalizeType
aType
)
{
if
(
mFinalizeRunnable
)
{
mFinalizeRunnable
-
>
ReleaseNow
(
false
)
;
if
(
mFinalizeRunnable
)
{
return
;
}
}
if
(
mDeferredFinalizerTable
.
Count
(
)
=
=
0
)
{
return
;
}
mFinalizeRunnable
=
new
IncrementalFinalizeRunnable
(
this
mDeferredFinalizerTable
)
;
MOZ_ASSERT
(
mDeferredFinalizerTable
.
Count
(
)
=
=
0
)
;
if
(
aType
=
=
CycleCollectedJSContext
:
:
FinalizeIncrementally
)
{
NS_IdleDispatchToCurrentThread
(
do_AddRef
(
mFinalizeRunnable
)
2500
)
;
}
else
{
mFinalizeRunnable
-
>
ReleaseNow
(
false
)
;
MOZ_ASSERT
(
!
mFinalizeRunnable
)
;
}
}
void
CycleCollectedJSRuntime
:
:
AnnotateAndSetOutOfMemory
(
OOMState
*
aStatePtr
OOMState
aNewState
)
{
*
aStatePtr
=
aNewState
;
#
ifdef
MOZ_CRASHREPORTER
CrashReporter
:
:
AnnotateCrashReport
(
aStatePtr
=
=
&
mOutOfMemoryState
?
NS_LITERAL_CSTRING
(
"
JSOutOfMemory
"
)
:
NS_LITERAL_CSTRING
(
"
JSLargeAllocationFailure
"
)
aNewState
=
=
OOMState
:
:
Reporting
?
NS_LITERAL_CSTRING
(
"
Reporting
"
)
:
aNewState
=
=
OOMState
:
:
Reported
?
NS_LITERAL_CSTRING
(
"
Reported
"
)
:
NS_LITERAL_CSTRING
(
"
Recovered
"
)
)
;
#
endif
}
void
CycleCollectedJSRuntime
:
:
OnGC
(
JSContext
*
aContext
JSGCStatus
aStatus
)
{
switch
(
aStatus
)
{
case
JSGC_BEGIN
:
nsCycleCollector_prepareForGarbageCollection
(
)
;
mZonesWaitingForGC
.
Clear
(
)
;
break
;
case
JSGC_END
:
{
#
ifdef
MOZ_CRASHREPORTER
if
(
mOutOfMemoryState
=
=
OOMState
:
:
Reported
)
{
AnnotateAndSetOutOfMemory
(
&
mOutOfMemoryState
OOMState
:
:
Recovered
)
;
}
if
(
mLargeAllocationFailureState
=
=
OOMState
:
:
Reported
)
{
AnnotateAndSetOutOfMemory
(
&
mLargeAllocationFailureState
OOMState
:
:
Recovered
)
;
}
#
endif
bool
finalizeIncrementally
=
JS
:
:
WasIncrementalGC
(
mJSRuntime
)
|
|
JS_IsExceptionPending
(
aContext
)
;
FinalizeDeferredThings
(
finalizeIncrementally
?
CycleCollectedJSContext
:
:
FinalizeIncrementally
:
CycleCollectedJSContext
:
:
FinalizeNow
)
;
break
;
}
default
:
MOZ_CRASH
(
)
;
}
CustomGCCallback
(
aStatus
)
;
}
void
CycleCollectedJSRuntime
:
:
OnOutOfMemory
(
)
{
AnnotateAndSetOutOfMemory
(
&
mOutOfMemoryState
OOMState
:
:
Reporting
)
;
CustomOutOfMemoryCallback
(
)
;
AnnotateAndSetOutOfMemory
(
&
mOutOfMemoryState
OOMState
:
:
Reported
)
;
}
void
CycleCollectedJSRuntime
:
:
SetLargeAllocationFailure
(
OOMState
aNewState
)
{
AnnotateAndSetOutOfMemory
(
&
mLargeAllocationFailureState
aNewState
)
;
}
void
CycleCollectedJSRuntime
:
:
PrepareWaitingZonesForGC
(
)
{
JSContext
*
cx
=
CycleCollectedJSContext
:
:
Get
(
)
-
>
Context
(
)
;
if
(
mZonesWaitingForGC
.
Count
(
)
=
=
0
)
{
JS
:
:
PrepareForFullGC
(
cx
)
;
}
else
{
for
(
auto
iter
=
mZonesWaitingForGC
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
JS
:
:
PrepareZoneForGC
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
mZonesWaitingForGC
.
Clear
(
)
;
}
}
void
CycleCollectedJSRuntime
:
:
EnvironmentPreparer
:
:
invoke
(
JS
:
:
HandleObject
scope
js
:
:
ScriptEnvironmentPreparer
:
:
Closure
&
closure
)
{
nsIGlobalObject
*
global
=
xpc
:
:
NativeGlobal
(
scope
)
;
NS_ENSURE_TRUE_VOID
(
global
&
&
global
-
>
GetGlobalJSObject
(
)
)
;
AutoEntryScript
aes
(
global
"
JS
-
engine
-
initiated
execution
"
)
;
MOZ_ASSERT
(
!
JS_IsExceptionPending
(
aes
.
cx
(
)
)
)
;
DebugOnly
<
bool
>
ok
=
closure
(
aes
.
cx
(
)
)
;
MOZ_ASSERT_IF
(
ok
!
JS_IsExceptionPending
(
aes
.
cx
(
)
)
)
;
}
CycleCollectedJSRuntime
*
CycleCollectedJSRuntime
:
:
Get
(
)
{
auto
context
=
CycleCollectedJSContext
:
:
Get
(
)
;
if
(
context
)
{
return
context
-
>
Runtime
(
)
;
}
return
nullptr
;
}
