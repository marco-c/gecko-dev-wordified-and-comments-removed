#
ifndef
nsMacUtilsImpl_h___
#
define
nsMacUtilsImpl_h___
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
using
mozilla
:
:
Atomic
;
using
mozilla
:
:
StaticAutoPtr
;
using
mozilla
:
:
StaticMutex
;
class
nsIFile
;
class
nsMacUtilsImpl
final
{
public
:
nsMacUtilsImpl
(
)
{
}
static
nsresult
GetRepoDir
(
nsIFile
*
*
aRepoDir
)
;
static
nsresult
GetObjDir
(
nsIFile
*
*
aObjDir
)
;
#
if
defined
(
MOZ_SANDBOX
)
|
|
defined
(
__aarch64__
)
static
bool
GetAppPath
(
nsCString
&
aAppPath
)
;
#
endif
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
DEBUG
)
static
nsresult
GetBloatLogDir
(
nsCString
&
aDirectoryPath
)
;
static
nsresult
GetDirectoryPath
(
const
char
*
aPath
nsCString
&
aDirectoryPath
)
;
#
endif
static
void
EnableTCSMIfAvailable
(
)
;
static
bool
IsTCSMAvailable
(
)
;
static
uint32_t
GetPhysicalCPUCount
(
)
;
static
nsresult
GetArchitecturesForBinary
(
const
char
*
aPath
uint32_t
*
aArchMask
)
;
#
if
defined
(
__aarch64__
)
static
int
PreTranslateXUL
(
)
;
static
int
PreTranslateBinary
(
nsCString
aBinaryPath
)
;
#
endif
private
:
~
nsMacUtilsImpl
(
)
{
}
#
if
defined
(
MOZ_SANDBOX
)
|
|
defined
(
__aarch64__
)
static
StaticAutoPtr
<
nsCString
>
sCachedAppPath
MOZ_GUARDED_BY
(
sCachedAppPathMutex
)
;
static
StaticMutex
sCachedAppPathMutex
;
static
nsresult
ClearCachedAppPathOnShutdown
(
)
;
#
endif
#
if
defined
(
__aarch64__
)
static
std
:
:
atomic
<
bool
>
sIsXULTranslated
;
#
endif
enum
TCSMStatus
{
TCSM_Unknown
=
0
TCSM_Available
TCSM_Unavailable
}
;
static
mozilla
:
:
Atomic
<
nsMacUtilsImpl
:
:
TCSMStatus
>
sTCSMStatus
;
static
nsresult
EnableTCSM
(
)
;
#
if
defined
(
DEBUG
)
static
bool
IsTCSMEnabled
(
)
;
#
endif
}
;
#
endif
