#
ifndef
mozilla_MemoryTelemetry_h
#
define
mozilla_MemoryTelemetry_h
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
<
functional
>
class
nsIEventTarget
;
namespace
mozilla
{
namespace
ipc
{
enum
class
ResponseRejectReason
;
}
class
MemoryTelemetry
final
:
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
static
MemoryTelemetry
&
Get
(
)
;
nsresult
GatherReports
(
const
std
:
:
function
<
void
(
)
>
&
aCompletionCallback
=
nullptr
)
;
nsresult
DelayedInit
(
)
;
nsresult
Shutdown
(
)
;
private
:
MemoryTelemetry
(
)
;
~
MemoryTelemetry
(
)
=
default
;
void
Init
(
)
;
static
Result
<
uint32_t
nsresult
>
GetOpenTabsCount
(
)
;
void
GatherTotalMemory
(
)
;
nsresult
FinishGatheringTotalMemory
(
int64_t
aTotalMemory
const
nsTArray
<
int64_t
>
&
aChildSizes
)
;
nsCOMPtr
<
nsIEventTarget
>
mThreadPool
;
bool
mGatheringTotalMemory
=
false
;
TimeStamp
mLastPoll
{
}
;
}
;
}
#
endif
