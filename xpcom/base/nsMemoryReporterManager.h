#
ifndef
nsMemoryReporterManager_h__
#
define
nsMemoryReporterManager_h__
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsDataHashtable
.
h
"
namespace
mozilla
{
class
MemoryReportingProcess
;
namespace
dom
{
class
MemoryReport
;
}
}
class
nsITimer
;
class
nsMemoryReporterManager
final
:
public
nsIMemoryReporterManager
public
nsIMemoryReporter
{
virtual
~
nsMemoryReporterManager
(
)
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIMEMORYREPORTERMANAGER
NS_DECL_NSIMEMORYREPORTER
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
nsMemoryReporterManager
(
)
;
static
nsMemoryReporterManager
*
GetOrCreate
(
)
{
nsCOMPtr
<
nsIMemoryReporterManager
>
imgr
=
do_GetService
(
"
mozilla
.
org
/
memory
-
reporter
-
manager
;
1
"
)
;
return
static_cast
<
nsMemoryReporterManager
*
>
(
imgr
.
get
(
)
)
;
}
typedef
nsDataHashtable
<
nsRefPtrHashKey
<
nsIMemoryReporter
>
bool
>
StrongReportersTable
;
typedef
nsDataHashtable
<
nsPtrHashKey
<
nsIMemoryReporter
>
bool
>
WeakReportersTable
;
void
HandleChildReport
(
uint32_t
aGeneration
const
mozilla
:
:
dom
:
:
MemoryReport
&
aChildReport
)
;
void
EndProcessReport
(
uint32_t
aGeneration
bool
aSuccess
)
;
struct
AmountFns
{
mozilla
:
:
InfallibleAmountFn
mJSMainRuntimeGCHeap
;
mozilla
:
:
InfallibleAmountFn
mJSMainRuntimeTemporaryPeak
;
mozilla
:
:
InfallibleAmountFn
mJSMainRuntimeRealmsSystem
;
mozilla
:
:
InfallibleAmountFn
mJSMainRuntimeRealmsUser
;
mozilla
:
:
InfallibleAmountFn
mImagesContentUsedUncompressed
;
mozilla
:
:
InfallibleAmountFn
mStorageSQLite
;
mozilla
:
:
InfallibleAmountFn
mLowMemoryEventsVirtual
;
mozilla
:
:
InfallibleAmountFn
mLowMemoryEventsCommitSpace
;
mozilla
:
:
InfallibleAmountFn
mLowMemoryEventsPhysical
;
mozilla
:
:
InfallibleAmountFn
mGhostWindows
;
AmountFns
(
)
{
mozilla
:
:
PodZero
(
this
)
;
}
}
;
AmountFns
mAmountFns
;
static
int64_t
ResidentFast
(
)
;
static
int64_t
ResidentPeak
(
)
;
static
int64_t
ResidentUnique
(
)
;
struct
SizeOfTabFns
{
mozilla
:
:
JSSizeOfTabFn
mJS
;
mozilla
:
:
NonJSSizeOfTabFn
mNonJS
;
SizeOfTabFns
(
)
{
mozilla
:
:
PodZero
(
this
)
;
}
}
;
SizeOfTabFns
mSizeOfTabFns
;
private
:
MOZ_MUST_USE
nsresult
RegisterReporterHelper
(
nsIMemoryReporter
*
aReporter
bool
aForce
bool
aStrongRef
bool
aIsAsync
)
;
MOZ_MUST_USE
nsresult
StartGettingReports
(
)
;
nsresult
FinishReporting
(
)
;
void
DispatchReporter
(
nsIMemoryReporter
*
aReporter
bool
aIsAsync
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aHandleReportData
bool
aAnonymize
)
;
static
void
TimeoutCallback
(
nsITimer
*
aTimer
void
*
aData
)
;
static
const
uint32_t
kTimeoutLengthMS
=
180000
;
mozilla
:
:
Mutex
mMutex
;
bool
mIsRegistrationBlocked
;
StrongReportersTable
*
mStrongReporters
;
WeakReportersTable
*
mWeakReporters
;
StrongReportersTable
*
mSavedStrongReporters
;
WeakReportersTable
*
mSavedWeakReporters
;
uint32_t
mNextGeneration
;
struct
PendingProcessesState
{
uint32_t
mGeneration
;
bool
mAnonymize
;
bool
mMinimize
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsTArray
<
RefPtr
<
mozilla
:
:
MemoryReportingProcess
>
>
mChildrenPending
;
uint32_t
mNumProcessesRunning
;
uint32_t
mNumProcessesCompleted
;
uint32_t
mConcurrencyLimit
;
nsCOMPtr
<
nsIHandleReportCallback
>
mHandleReport
;
nsCOMPtr
<
nsISupports
>
mHandleReportData
;
nsCOMPtr
<
nsIFinishReportingCallback
>
mFinishReporting
;
nsCOMPtr
<
nsISupports
>
mFinishReportingData
;
nsString
mDMDDumpIdent
;
PendingProcessesState
(
uint32_t
aGeneration
bool
aAnonymize
bool
aMinimize
uint32_t
aConcurrencyLimit
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aHandleReportData
nsIFinishReportingCallback
*
aFinishReporting
nsISupports
*
aFinishReportingData
const
nsAString
&
aDMDDumpIdent
)
;
}
;
struct
PendingReportersState
{
uint32_t
mReportsPending
;
nsCOMPtr
<
nsIFinishReportingCallback
>
mFinishReporting
;
nsCOMPtr
<
nsISupports
>
mFinishReportingData
;
FILE
*
mDMDFile
;
PendingReportersState
(
nsIFinishReportingCallback
*
aFinishReporting
nsISupports
*
aFinishReportingData
FILE
*
aDMDFile
)
:
mReportsPending
(
0
)
mFinishReporting
(
aFinishReporting
)
mFinishReportingData
(
aFinishReportingData
)
mDMDFile
(
aDMDFile
)
{
}
}
;
PendingProcessesState
*
mPendingProcessesState
;
PendingReportersState
*
mPendingReportersState
;
nsCOMPtr
<
nsIEventTarget
>
mThreadPool
;
PendingProcessesState
*
GetStateForGeneration
(
uint32_t
aGeneration
)
;
static
MOZ_MUST_USE
bool
StartChildReport
(
mozilla
:
:
MemoryReportingProcess
*
aChild
const
PendingProcessesState
*
aState
)
;
}
;
#
define
NS_MEMORY_REPORTER_MANAGER_CID
\
{
0xfb97e4f5
0x32dd
0x497a
\
{
0xba
0xa2
0x7d
0x1e
0x55
0x7
0x99
0x10
}
}
#
endif
