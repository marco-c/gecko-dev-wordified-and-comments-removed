#
include
"
NSPRLogModulesParser
.
h
"
#
include
"
mozilla
/
Tokenizer
.
h
"
const
char
kDelimiters
[
]
=
"
"
;
const
char
kAdditionalWordChars
[
]
=
"
_
-
"
;
const
char
*
kReservedNames
[
]
=
{
"
all
"
"
append
"
"
bufsize
"
"
sync
"
"
timestamp
"
}
;
namespace
mozilla
{
void
NSPRLogModulesParser
(
const
char
*
aLogModules
Function
<
void
(
const
char
*
LogLevel
)
>
aCallback
)
{
if
(
!
aLogModules
)
{
return
;
}
Tokenizer
parser
(
aLogModules
kDelimiters
kAdditionalWordChars
)
;
nsAutoCString
moduleName
;
while
(
parser
.
ReadWord
(
moduleName
)
)
{
LogLevel
logLevel
=
LogLevel
:
:
Error
;
if
(
parser
.
CheckChar
(
'
:
'
)
)
{
int32_t
multiplier
=
1
;
if
(
parser
.
CheckChar
(
[
]
(
const
char
aChar
)
{
return
aChar
=
=
'
-
'
;
}
)
)
{
multiplier
=
-
1
;
}
int32_t
level
;
if
(
parser
.
ReadInteger
(
&
level
)
)
{
logLevel
=
ToLogLevel
(
level
*
multiplier
)
;
}
}
bool
isReserved
=
false
;
for
(
size_t
i
=
0
;
i
<
PR_ARRAY_SIZE
(
kReservedNames
)
;
i
+
+
)
{
if
(
moduleName
.
EqualsASCII
(
kReservedNames
[
i
]
)
)
{
isReserved
=
true
;
break
;
}
}
if
(
!
isReserved
)
{
aCallback
(
moduleName
.
get
(
)
logLevel
)
;
}
parser
.
SkipWhites
(
)
;
}
}
}
