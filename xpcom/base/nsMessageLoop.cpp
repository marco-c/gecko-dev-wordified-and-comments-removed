#
include
"
nsMessageLoop
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
;
namespace
{
class
MessageLoopIdleTask
:
public
Runnable
public
SupportsWeakPtr
{
public
:
MessageLoopIdleTask
(
nsIRunnable
*
aTask
uint32_t
aEnsureRunsAfterMS
)
;
NS_IMETHOD
Run
(
)
override
;
private
:
nsresult
Init
(
uint32_t
aEnsureRunsAfterMS
)
;
nsCOMPtr
<
nsIRunnable
>
mTask
;
nsCOMPtr
<
nsITimer
>
mTimer
;
virtual
~
MessageLoopIdleTask
(
)
=
default
;
}
;
class
MessageLoopTimerCallback
:
public
nsITimerCallback
public
nsINamed
{
public
:
explicit
MessageLoopTimerCallback
(
MessageLoopIdleTask
*
aTask
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
{
aName
.
AssignLiteral
(
"
MessageLoopTimerCallback
"
)
;
return
NS_OK
;
}
private
:
WeakPtr
<
MessageLoopIdleTask
>
mTask
;
virtual
~
MessageLoopTimerCallback
(
)
=
default
;
}
;
MessageLoopIdleTask
:
:
MessageLoopIdleTask
(
nsIRunnable
*
aTask
uint32_t
aEnsureRunsAfterMS
)
:
mozilla
:
:
Runnable
(
"
MessageLoopIdleTask
"
)
mTask
(
aTask
)
{
nsresult
rv
=
Init
(
aEnsureRunsAfterMS
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Running
idle
task
early
because
we
couldn
'
t
initialize
our
timer
.
"
)
;
NS_DispatchToCurrentThread
(
mTask
)
;
mTask
=
nullptr
;
mTimer
=
nullptr
;
}
}
nsresult
MessageLoopIdleTask
:
:
Init
(
uint32_t
aEnsureRunsAfterMS
)
{
RefPtr
<
MessageLoopTimerCallback
>
callback
=
new
MessageLoopTimerCallback
(
this
)
;
return
NS_NewTimerWithCallback
(
getter_AddRefs
(
mTimer
)
callback
aEnsureRunsAfterMS
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
NS_IMETHODIMP
MessageLoopIdleTask
:
:
Run
(
)
{
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
mTimer
=
nullptr
;
}
if
(
mTask
)
{
mTask
-
>
Run
(
)
;
mTask
=
nullptr
;
}
return
NS_OK
;
}
MessageLoopTimerCallback
:
:
MessageLoopTimerCallback
(
MessageLoopIdleTask
*
aTask
)
:
mTask
(
aTask
)
{
}
NS_IMETHODIMP
MessageLoopTimerCallback
:
:
Notify
(
nsITimer
*
aTimer
)
{
NS_WARNING_ASSERTION
(
mTask
"
This
timer
shouldn
'
t
have
fired
.
"
)
;
if
(
mTask
)
{
mTask
-
>
Run
(
)
;
}
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
MessageLoopTimerCallback
nsITimerCallback
nsINamed
)
}
NS_IMPL_ISUPPORTS
(
nsMessageLoop
nsIMessageLoop
)
NS_IMETHODIMP
nsMessageLoop
:
:
PostIdleTask
(
nsIRunnable
*
aTask
uint32_t
aEnsureRunsAfterMS
)
{
RefPtr
<
MessageLoopIdleTask
>
idle
=
new
MessageLoopIdleTask
(
aTask
aEnsureRunsAfterMS
)
;
MessageLoop
:
:
current
(
)
-
>
PostIdleTask
(
idle
.
forget
(
)
)
;
return
NS_OK
;
}
nsresult
nsMessageLoopConstructor
(
const
nsIID
&
aIID
void
*
*
aInstancePtr
)
{
nsISupports
*
messageLoop
=
new
nsMessageLoop
(
)
;
return
messageLoop
-
>
QueryInterface
(
aIID
aInstancePtr
)
;
}
