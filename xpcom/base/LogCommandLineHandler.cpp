#
include
"
LogCommandLineHandler
.
h
"
#
include
"
mozilla
/
Tokenizer
.
h
"
#
include
"
nsDebug
.
h
"
namespace
mozilla
{
void
LoggingHandleCommandLineArgs
(
int
argc
char
const
*
const
*
argv
std
:
:
function
<
void
(
nsACString
const
&
)
>
const
&
consumer
)
{
nsAutoCString
env
;
auto
const
names
=
{
NS_LITERAL_CSTRING
(
"
MOZ_LOG
"
)
NS_LITERAL_CSTRING
(
"
MOZ_LOG_FILE
"
)
}
;
for
(
int
arg
=
1
;
arg
<
argc
;
+
+
arg
)
{
Tokenizer
p
(
argv
[
arg
]
)
;
if
(
!
env
.
IsEmpty
(
)
&
&
p
.
CheckChar
(
'
-
'
)
)
{
NS_WARNING
(
"
Expects
value
after
-
MOZ_LOG
(
_FILE
)
argument
but
another
argument
found
"
)
;
p
.
Rollback
(
)
;
env
.
Truncate
(
)
;
}
if
(
env
.
IsEmpty
(
)
)
{
if
(
!
p
.
CheckChar
(
'
-
'
)
)
{
continue
;
}
Unused
<
<
p
.
CheckChar
(
'
-
'
)
;
for
(
auto
const
&
name
:
names
)
{
if
(
!
p
.
CheckWord
(
name
)
)
{
continue
;
}
env
.
Assign
(
name
)
;
env
.
Append
(
'
=
'
)
;
break
;
}
if
(
env
.
IsEmpty
(
)
)
{
continue
;
}
if
(
p
.
CheckEOF
(
)
)
{
continue
;
}
if
(
!
p
.
CheckChar
(
'
=
'
)
)
{
NS_WARNING
(
"
-
MOZ_LOG
(
_FILE
)
argument
not
in
a
proper
form
"
)
;
env
.
Truncate
(
)
;
continue
;
}
}
if
(
!
env
.
IsEmpty
(
)
)
{
nsDependentCSubstring
value
;
Unused
<
<
p
.
ReadUntil
(
Tokenizer
:
:
Token
:
:
EndOfFile
(
)
value
)
;
env
.
Append
(
value
)
;
consumer
(
env
)
;
env
.
Truncate
(
)
;
}
}
}
}
