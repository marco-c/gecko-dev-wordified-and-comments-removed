#
ifndef
nsCycleCollector_h__
#
define
nsCycleCollector_h__
class
nsICycleCollectorListener
;
class
nsICycleCollectorLogSink
;
class
nsISupports
;
template
<
class
T
>
struct
already_AddRefed
;
#
include
<
cstdint
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
JS
{
class
SliceBudget
;
}
namespace
mozilla
{
class
CycleCollectedJSContext
;
}
bool
nsCycleCollector_init
(
)
;
void
nsCycleCollector_startup
(
)
;
typedef
void
(
*
CC_BeforeUnlinkCallback
)
(
void
)
;
void
nsCycleCollector_setBeforeUnlinkCallback
(
CC_BeforeUnlinkCallback
aCB
)
;
typedef
void
(
*
CC_ForgetSkippableCallback
)
(
void
)
;
void
nsCycleCollector_setForgetSkippableCallback
(
CC_ForgetSkippableCallback
aCB
)
;
void
nsCycleCollector_forgetSkippable
(
JS
:
:
SliceBudget
&
aBudget
bool
aRemoveChildlessNodes
=
false
bool
aAsyncSnowWhiteFreeing
=
false
)
;
void
nsCycleCollector_prepareForGarbageCollection
(
)
;
void
nsCycleCollector_finishAnyCurrentCollection
(
)
;
void
nsCycleCollector_dispatchDeferredDeletion
(
bool
aContinuation
=
false
bool
aPurge
=
false
)
;
bool
nsCycleCollector_doDeferredDeletion
(
)
;
bool
nsCycleCollector_doDeferredDeletionWithBudget
(
JS
:
:
SliceBudget
&
aBudget
)
;
already_AddRefed
<
nsICycleCollectorLogSink
>
nsCycleCollector_createLogSink
(
bool
aLogGC
)
;
already_AddRefed
<
nsICycleCollectorListener
>
nsCycleCollector_createLogger
(
)
;
bool
nsCycleCollector_collect
(
mozilla
:
:
CCReason
aReason
nsICycleCollectorListener
*
aManualListener
)
;
void
nsCycleCollector_collectSlice
(
JS
:
:
SliceBudget
&
budget
mozilla
:
:
CCReason
aReason
bool
aPreferShorterSlices
=
false
)
;
uint32_t
nsCycleCollector_suspectedCount
(
)
;
MOZ_CAN_RUN_SCRIPT
void
nsCycleCollector_shutdown
(
bool
aDoCollect
=
true
)
;
void
nsCycleCollector_registerJSContext
(
mozilla
:
:
CycleCollectedJSContext
*
aCx
)
;
void
nsCycleCollector_forgetJSContext
(
)
;
#
endif
