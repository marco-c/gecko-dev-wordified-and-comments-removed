#
include
"
PHCManager
.
h
"
#
include
"
PHC
.
h
"
#
include
"
mozilla
/
Literals
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_memory
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
prsystem
.
h
"
namespace
mozilla
{
using
namespace
phc
;
static
const
char
kPHCEnabledPref
[
]
=
"
memory
.
phc
.
enabled
"
;
static
const
char
kPHCMinRamMBPref
[
]
=
"
memory
.
phc
.
min_ram_mb
"
;
static
void
UpdatePHCState
(
)
{
size_t
mem_size
=
PR_GetPhysicalMemorySize
(
)
/
(
1_MiB
)
;
size_t
min_mem_size
=
StaticPrefs
:
:
memory_phc_min_ram_mb
(
)
;
if
(
StaticPrefs
:
:
memory_phc_enabled
(
)
&
&
mem_size
>
=
min_mem_size
)
{
SetPHCState
(
Enabled
)
;
}
else
{
SetPHCState
(
OnlyFree
)
;
}
}
static
void
PrefChangeCallback
(
const
char
*
aPrefName
void
*
aNull
)
{
MOZ_ASSERT
(
(
0
=
=
strcmp
(
aPrefName
kPHCEnabledPref
)
)
|
|
(
0
=
=
strcmp
(
aPrefName
kPHCMinRamMBPref
)
)
)
;
UpdatePHCState
(
)
;
}
void
InitPHCState
(
)
{
Preferences
:
:
RegisterCallback
(
PrefChangeCallback
kPHCEnabledPref
)
;
Preferences
:
:
RegisterCallback
(
PrefChangeCallback
kPHCMinRamMBPref
)
;
UpdatePHCState
(
)
;
}
void
ReportPHCTelemetry
(
)
{
MemoryUsage
usage
;
PHCMemoryUsage
(
usage
)
;
Accumulate
(
Telemetry
:
:
MEMORY_PHC_SLOP
usage
.
mFragmentationBytes
)
;
PHCStats
stats
;
GetPHCStats
(
stats
)
;
Accumulate
(
Telemetry
:
:
MEMORY_PHC_SLOTS_ALLOCATED
stats
.
mSlotsAllocated
)
;
Accumulate
(
Telemetry
:
:
MEMORY_PHC_SLOTS_FREED
stats
.
mSlotsFreed
)
;
}
}
;
