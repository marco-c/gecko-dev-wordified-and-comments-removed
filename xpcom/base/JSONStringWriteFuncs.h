#
ifndef
JSONSTRINGWRITEFUNCS_H
#
define
JSONSTRINGWRITEFUNCS_H
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
nsString
.
h
"
#
include
<
type_traits
>
namespace
mozilla
{
template
<
typename
StringType
=
nsCString
>
class
JSONStringWriteFunc
final
:
public
JSONWriteFunc
{
static_assert
(
!
std
:
:
is_reference_v
<
StringType
>
"
Use
JSONStringRefWriteFunc
instead
to
write
to
a
referenced
string
"
)
;
public
:
JSONStringWriteFunc
(
)
=
default
;
void
Write
(
const
Span
<
const
char
>
&
aStr
)
override
{
mString
.
Append
(
aStr
)
;
}
const
StringType
&
StringCRef
(
)
const
{
return
mString
;
}
StringType
&
&
StringRRef
(
)
&
&
{
return
std
:
:
move
(
mString
)
;
}
private
:
StringType
mString
;
}
;
class
JSONStringRefWriteFunc
final
:
public
JSONWriteFunc
{
public
:
MOZ_IMPLICIT
JSONStringRefWriteFunc
(
nsACString
&
aString
)
:
mString
(
aString
)
{
}
void
Write
(
const
Span
<
const
char
>
&
aStr
)
override
{
mString
.
Append
(
aStr
)
;
}
const
nsACString
&
StringCRef
(
)
const
{
return
mString
;
}
private
:
nsACString
&
mString
;
}
;
}
#
endif
