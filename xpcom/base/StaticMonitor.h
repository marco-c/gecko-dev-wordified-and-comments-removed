#
ifndef
mozilla_StaticMonitor_h
#
define
mozilla_StaticMonitor_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
CondVar
.
h
"
namespace
mozilla
{
class
MOZ_ONLY_USED_TO_AVOID_STATIC_CONSTRUCTORS
StaticMonitor
{
public
:
#
ifdef
DEBUG
StaticMonitor
(
)
{
MOZ_ASSERT
(
!
mMutex
)
;
}
#
endif
void
Lock
(
)
{
Mutex
(
)
-
>
Lock
(
)
;
}
void
Unlock
(
)
{
Mutex
(
)
-
>
Unlock
(
)
;
}
void
Wait
(
)
{
CondVar
(
)
-
>
Wait
(
)
;
}
CVStatus
Wait
(
TimeDuration
aDuration
)
{
return
CondVar
(
)
-
>
Wait
(
aDuration
)
;
}
nsresult
Notify
(
)
{
return
CondVar
(
)
-
>
Notify
(
)
;
}
nsresult
NotifyAll
(
)
{
return
CondVar
(
)
-
>
NotifyAll
(
)
;
}
void
AssertCurrentThreadOwns
(
)
{
#
ifdef
DEBUG
Mutex
(
)
-
>
AssertCurrentThreadOwns
(
)
;
#
endif
}
private
:
OffTheBooksMutex
*
Mutex
(
)
{
if
(
mMutex
)
{
return
mMutex
;
}
OffTheBooksMutex
*
mutex
=
new
OffTheBooksMutex
(
"
StaticMutex
"
)
;
if
(
!
mMutex
.
compareExchange
(
nullptr
mutex
)
)
{
delete
mutex
;
}
return
mMutex
;
}
OffTheBooksCondVar
*
CondVar
(
)
{
if
(
mCondVar
)
{
return
mCondVar
;
}
OffTheBooksCondVar
*
condvar
=
new
OffTheBooksCondVar
(
*
Mutex
(
)
"
StaticCondVar
"
)
;
if
(
!
mCondVar
.
compareExchange
(
nullptr
condvar
)
)
{
delete
condvar
;
}
return
mCondVar
;
}
Atomic
<
OffTheBooksMutex
*
>
mMutex
;
Atomic
<
OffTheBooksCondVar
*
>
mCondVar
;
#
ifdef
DEBUG
StaticMonitor
(
const
StaticMonitor
&
aOther
)
;
#
endif
StaticMonitor
&
operator
=
(
const
StaticMonitor
&
aRhs
)
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
static
void
operator
delete
(
void
*
)
;
}
;
class
MOZ_STACK_CLASS
StaticMonitorAutoLock
{
public
:
explicit
StaticMonitorAutoLock
(
StaticMonitor
&
aMonitor
)
:
mMonitor
(
&
aMonitor
)
{
mMonitor
-
>
Lock
(
)
;
}
~
StaticMonitorAutoLock
(
)
{
mMonitor
-
>
Unlock
(
)
;
}
void
Wait
(
)
{
mMonitor
-
>
Wait
(
)
;
}
CVStatus
Wait
(
TimeDuration
aDuration
)
{
return
mMonitor
-
>
Wait
(
aDuration
)
;
}
nsresult
Notify
(
)
{
return
mMonitor
-
>
Notify
(
)
;
}
nsresult
NotifyAll
(
)
{
return
mMonitor
-
>
NotifyAll
(
)
;
}
private
:
StaticMonitorAutoLock
(
)
;
StaticMonitorAutoLock
(
const
StaticMonitorAutoLock
&
)
;
StaticMonitorAutoLock
&
operator
=
(
const
StaticMonitorAutoLock
&
)
;
static
void
*
operator
new
(
size_t
)
noexcept
(
true
)
;
StaticMonitor
*
mMonitor
;
}
;
}
#
endif
