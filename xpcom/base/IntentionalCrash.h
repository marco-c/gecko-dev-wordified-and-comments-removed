#
ifndef
mozilla_IntentionalCrash_h
#
define
mozilla_IntentionalCrash_h
#
include
<
string
>
#
include
<
sstream
>
#
include
<
stdlib
.
h
>
#
include
<
stdio
.
h
>
#
ifdef
XP_WIN
#
include
<
process
.
h
>
#
define
getpid
_getpid
#
else
#
include
<
unistd
.
h
>
#
endif
namespace
mozilla
{
inline
void
NoteIntentionalCrash
(
const
char
*
aProcessType
)
{
#
ifdef
MOZ_DEBUG
char
*
f
=
getenv
(
"
XPCOM_MEM_BLOAT_LOG
"
)
;
if
(
!
f
)
{
return
;
}
fprintf
(
stderr
"
XPCOM_MEM_BLOAT_LOG
:
%
s
\
n
"
f
)
;
std
:
:
ostringstream
bloatName
;
std
:
:
string
processType
(
aProcessType
)
;
if
(
!
processType
.
compare
(
"
default
"
)
)
{
bloatName
<
<
f
;
}
else
{
std
:
:
string
bloatLog
(
f
)
;
bool
hasExt
=
false
;
if
(
bloatLog
.
size
(
)
>
=
4
&
&
bloatLog
.
compare
(
bloatLog
.
size
(
)
-
4
4
"
.
log
"
4
)
=
=
0
)
{
hasExt
=
true
;
bloatLog
.
erase
(
bloatLog
.
size
(
)
-
4
4
)
;
}
bloatName
<
<
bloatLog
<
<
"
_
"
<
<
processType
<
<
"
_pid
"
<
<
getpid
(
)
;
if
(
hasExt
)
{
bloatName
<
<
"
.
log
"
;
}
}
fprintf
(
stderr
"
Writing
to
log
:
%
s
\
n
"
bloatName
.
str
(
)
.
c_str
(
)
)
;
FILE
*
processfd
=
fopen
(
bloatName
.
str
(
)
.
c_str
(
)
"
a
"
)
;
if
(
processfd
)
{
fprintf
(
processfd
"
=
=
>
process
%
d
will
purposefully
crash
\
n
"
getpid
(
)
)
;
fclose
(
processfd
)
;
}
#
endif
}
}
#
endif
