#
ifndef
mozilla_MemoryInfo_h
#
define
mozilla_MemoryInfo_h
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
MemoryInfo
final
{
public
:
enum
class
Perm
:
uint8_t
{
Read
Write
Execute
CopyOnWrite
Guard
NoCache
WriteCombine
}
;
enum
class
PageType
:
uint8_t
{
Image
Mapped
Private
}
;
using
PermSet
=
EnumSet
<
Perm
>
;
using
PageTypeSet
=
EnumSet
<
PageType
>
;
MemoryInfo
(
)
=
default
;
MOZ_IMPLICIT
MemoryInfo
(
const
MemoryInfo
&
)
=
default
;
uintptr_t
Start
(
)
const
{
return
mStart
;
}
uintptr_t
End
(
)
const
{
return
mEnd
;
}
PageTypeSet
Type
(
)
const
{
return
mType
;
}
PermSet
Perms
(
)
const
{
return
mPerms
;
}
size_t
Reserved
(
)
const
{
return
mReserved
;
}
size_t
Committed
(
)
const
{
return
mCommitted
;
}
size_t
Free
(
)
const
{
return
mFree
;
}
size_t
Size
(
)
const
{
return
mSize
;
}
static
MemoryInfo
Get
(
const
void
*
aPtr
size_t
aSize
)
;
private
:
uintptr_t
mStart
=
0
;
uintptr_t
mEnd
=
0
;
size_t
mReserved
=
0
;
size_t
mCommitted
=
0
;
size_t
mFree
=
0
;
size_t
mSize
=
0
;
PageTypeSet
mType
{
}
;
PermSet
mPerms
{
}
;
}
;
}
#
endif
