#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
ifdef
MOZ_THREAD_SAFETY_OWNERSHIP_CHECKS_SUPPORTED
#
include
"
nsThreadUtils
.
h
"
#
endif
using
namespace
mozilla
;
nsresult
NS_FASTCALL
NS_TableDrivenQI
(
void
*
aThis
REFNSIID
aIID
void
*
*
aInstancePtr
const
QITableEntry
*
aEntries
)
{
do
{
if
(
aIID
.
Equals
(
*
aEntries
-
>
iid
)
)
{
nsISupports
*
r
=
reinterpret_cast
<
nsISupports
*
>
(
reinterpret_cast
<
char
*
>
(
aThis
)
+
aEntries
-
>
offset
)
;
NS_ADDREF
(
r
)
;
*
aInstancePtr
=
r
;
return
NS_OK
;
}
+
+
aEntries
;
}
while
(
aEntries
-
>
iid
)
;
*
aInstancePtr
=
nullptr
;
return
NS_ERROR_NO_INTERFACE
;
}
#
ifdef
MOZ_THREAD_SAFETY_OWNERSHIP_CHECKS_SUPPORTED
nsAutoOwningThread
:
:
nsAutoOwningThread
(
)
:
mThread
(
GetCurrentVirtualThread
(
)
)
{
}
void
nsAutoOwningThread
:
:
AssertCurrentThreadOwnsMe
(
const
char
*
msg
)
const
{
if
(
MOZ_UNLIKELY
(
!
IsCurrentThread
(
)
)
)
{
MOZ_CRASH_UNSAFE_OOL
(
msg
)
;
}
}
bool
nsAutoOwningThread
:
:
IsCurrentThread
(
)
const
{
return
mThread
=
=
GetCurrentVirtualThread
(
)
;
}
#
endif
