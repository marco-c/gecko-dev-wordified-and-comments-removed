#
ifndef
_nsStorageStream_h_
#
define
_nsStorageStream_h_
#
include
"
nsIStorageStream
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
define
NS_STORAGESTREAM_CID
\
{
/
*
669a9795
-
6ff7
-
4ed4
-
9150
-
c34ce2971b63
*
/
\
0x669a9795
0x6ff7
0x4ed4
{
\
0x91
0x50
0xc3
0x4c
0xe2
0x97
0x1b
0x63
\
}
\
}
#
define
NS_STORAGESTREAM_CONTRACTID
"
mozilla
.
org
/
storagestream
;
1
"
class
nsSegmentedBuffer
;
class
nsStorageStream
final
:
public
nsIStorageStream
public
nsIOutputStream
{
public
:
nsStorageStream
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSISTORAGESTREAM
NS_DECL_NSIOUTPUTSTREAM
friend
class
nsStorageInputStream
;
private
:
~
nsStorageStream
(
)
;
mozilla
:
:
Mutex
mMutex
{
"
nsStorageStream
"
}
;
nsSegmentedBuffer
*
mSegmentedBuffer
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
uint32_t
mSegmentSize
MOZ_GUARDED_BY
(
mMutex
)
=
0
;
uint32_t
mSegmentSizeLog2
MOZ_GUARDED_BY
(
mMutex
)
=
0
;
bool
mWriteInProgress
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
int32_t
mLastSegmentNum
MOZ_GUARDED_BY
(
mMutex
)
=
-
1
;
char
*
mWriteCursor
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
char
*
mSegmentEnd
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
uint32_t
mLogicalLength
MOZ_GUARDED_BY
(
mMutex
)
=
0
;
uint32_t
mActiveSegmentBorrows
MOZ_GUARDED_BY
(
mMutex
)
=
0
;
nsresult
SetLengthLocked
(
uint32_t
aLength
)
MOZ_REQUIRES
(
mMutex
)
;
nsresult
Seek
(
int32_t
aPosition
)
MOZ_REQUIRES
(
mMutex
)
;
uint32_t
SegNum
(
uint32_t
aPosition
)
MOZ_REQUIRES
(
mMutex
)
{
return
aPosition
>
>
mSegmentSizeLog2
;
}
uint32_t
SegOffset
(
uint32_t
aPosition
)
MOZ_REQUIRES
(
mMutex
)
{
return
aPosition
&
(
mSegmentSize
-
1
)
;
}
}
;
#
endif
