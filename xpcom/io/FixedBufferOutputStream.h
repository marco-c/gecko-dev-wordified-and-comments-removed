#
ifndef
mozilla_FixedBufferOutputStream_h
#
define
mozilla_FixedBufferOutputStream_h
#
include
<
cstddef
>
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsStringFwd
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
{
class
StreamBufferSink
;
class
FixedBufferOutputStream
final
:
public
nsIOutputStream
{
template
<
typename
T
typename
.
.
.
Args
>
friend
RefPtr
<
T
>
MakeRefPtr
(
Args
&
&
.
.
.
aArgs
)
;
public
:
static
RefPtr
<
FixedBufferOutputStream
>
Create
(
size_t
aLength
)
;
static
RefPtr
<
FixedBufferOutputStream
>
Create
(
size_t
aLength
const
mozilla
:
:
fallible_t
&
)
;
static
RefPtr
<
FixedBufferOutputStream
>
Create
(
mozilla
:
:
Span
<
char
>
aBuffer
)
;
static
RefPtr
<
FixedBufferOutputStream
>
Create
(
UniquePtr
<
StreamBufferSink
>
&
&
aSink
)
;
nsDependentCSubstring
WrittenData
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOUTPUTSTREAM
private
:
explicit
FixedBufferOutputStream
(
UniquePtr
<
StreamBufferSink
>
&
&
aSink
)
;
~
FixedBufferOutputStream
(
)
=
default
;
const
UniquePtr
<
StreamBufferSink
>
mSink
;
Mutex
mMutex
;
size_t
mOffset
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mWriting
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mClosed
MOZ_GUARDED_BY
(
mMutex
)
;
}
;
}
#
endif
