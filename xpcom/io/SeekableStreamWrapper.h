#
ifndef
mozilla_SeekableStreamWrapper_h
#
define
mozilla_SeekableStreamWrapper_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsISeekableStream
.
h
"
#
include
"
nsICloneableInputStream
.
h
"
#
include
"
nsIIPCSerializableInputStream
.
h
"
#
include
"
nsIInputStreamLength
.
h
"
#
include
"
nsIBufferedStreams
.
h
"
namespace
mozilla
{
class
SeekableStreamWrapper
final
:
public
nsIAsyncInputStream
public
nsISeekableStream
public
nsICloneableInputStream
public
nsIInputStreamLength
public
nsIAsyncInputStreamLength
public
nsIIPCSerializableInputStream
public
nsIBufferedInputStream
{
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINPUTSTREAM
NS_DECL_NSIASYNCINPUTSTREAM
NS_DECL_NSITELLABLESTREAM
NS_DECL_NSISEEKABLESTREAM
NS_DECL_NSICLONEABLEINPUTSTREAM
NS_DECL_NSIINPUTSTREAMLENGTH
NS_DECL_NSIASYNCINPUTSTREAMLENGTH
NS_DECL_NSIIPCSERIALIZABLEINPUTSTREAM
NS_DECL_NSIBUFFEREDINPUTSTREAM
public
:
static
nsresult
MaybeWrap
(
already_AddRefed
<
nsIInputStream
>
aOriginal
nsIInputStream
*
*
aResult
)
;
private
:
SeekableStreamWrapper
(
nsICloneableInputStream
*
aOriginal
nsIInputStream
*
aCurrent
)
:
mOriginal
(
aOriginal
)
mCurrent
(
aCurrent
)
{
MOZ_ASSERT
(
mOriginal
-
>
GetCloneable
(
)
)
;
}
~
SeekableStreamWrapper
(
)
=
default
;
template
<
typename
T
>
nsCOMPtr
<
T
>
StreamAs
(
)
;
template
<
typename
M
>
void
SerializeInternal
(
mozilla
:
:
ipc
:
:
InputStreamParams
&
aParams
FileDescriptorArray
&
aFileDescriptors
bool
aDelayedStart
uint32_t
aMaxSize
uint32_t
*
aSizeUsed
M
*
aManager
)
;
bool
IsAsyncInputStream
(
)
;
bool
IsInputStreamLength
(
)
;
bool
IsAsyncInputStreamLength
(
)
;
bool
IsIPCSerializableInputStream
(
)
;
bool
IsBufferedInputStream
(
)
;
nsCOMPtr
<
nsICloneableInputStream
>
mOriginal
;
Mutex
mMutex
MOZ_UNANNOTATED
{
"
SeekableStreamWrapper
"
}
;
nsCOMPtr
<
nsIInputStream
>
mCurrent
;
}
;
}
#
endif
