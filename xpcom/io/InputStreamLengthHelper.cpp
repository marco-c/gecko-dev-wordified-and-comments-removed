#
include
"
InputStreamLengthHelper
.
h
"
#
include
"
mozilla
/
dom
/
WorkerCommon
.
h
"
#
include
"
nsIInputStream
.
h
"
namespace
mozilla
{
void
InputStreamLengthHelper
:
:
GetLength
(
nsIInputStream
*
aStream
const
std
:
:
function
<
void
(
int64_t
aLength
)
>
&
aCallback
)
{
MOZ_ASSERT
(
aStream
)
;
MOZ_ASSERT
(
aCallback
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_IsMainThread
(
)
|
|
!
dom
:
:
IsCurrentThreadRunningWorker
(
)
)
;
RefPtr
<
InputStreamLengthHelper
>
helper
=
new
InputStreamLengthHelper
(
aStream
aCallback
)
;
GetCurrentThreadSerialEventTarget
(
)
-
>
Dispatch
(
helper
NS_DISPATCH_NORMAL
)
;
}
InputStreamLengthHelper
:
:
InputStreamLengthHelper
(
nsIInputStream
*
aStream
const
std
:
:
function
<
void
(
int64_t
aLength
)
>
&
aCallback
)
:
Runnable
(
"
InputStreamLengthHelper
"
)
mStream
(
aStream
)
mCallback
(
aCallback
)
{
MOZ_ASSERT
(
aStream
)
;
MOZ_ASSERT
(
aCallback
)
;
}
InputStreamLengthHelper
:
:
~
InputStreamLengthHelper
(
)
=
default
;
NS_IMETHODIMP
InputStreamLengthHelper
:
:
Run
(
)
{
nsCOMPtr
<
nsIInputStreamLength
>
streamLength
=
do_QueryInterface
(
mStream
)
;
if
(
streamLength
)
{
int64_t
length
=
-
1
;
nsresult
rv
=
streamLength
-
>
Length
(
&
length
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mCallback
(
length
)
;
return
NS_OK
;
}
if
(
rv
=
=
NS_BASE_STREAM_CLOSED
|
|
NS_WARN_IF
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
)
|
|
NS_WARN_IF
(
rv
!
=
NS_BASE_STREAM_WOULD_BLOCK
)
)
{
mCallback
(
-
1
)
;
return
NS_OK
;
}
}
nsCOMPtr
<
nsIAsyncInputStreamLength
>
asyncStreamLength
=
do_QueryInterface
(
mStream
)
;
if
(
asyncStreamLength
)
{
nsresult
rv
=
asyncStreamLength
-
>
AsyncLengthWait
(
this
GetCurrentThreadSerialEventTarget
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mCallback
(
-
1
)
;
}
return
NS_OK
;
}
uint64_t
available
=
0
;
nsresult
rv
=
mStream
-
>
Available
(
&
available
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mCallback
(
-
1
)
;
return
NS_OK
;
}
mCallback
(
(
int64_t
)
available
)
;
return
NS_OK
;
}
NS_IMETHODIMP
InputStreamLengthHelper
:
:
OnInputStreamLengthReady
(
nsIAsyncInputStreamLength
*
aStream
int64_t
aLength
)
{
MOZ_ASSERT
(
mCallback
)
;
mCallback
(
aLength
)
;
mCallback
=
nullptr
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS_INHERITED
(
InputStreamLengthHelper
Runnable
nsIInputStreamLengthCallback
)
}
