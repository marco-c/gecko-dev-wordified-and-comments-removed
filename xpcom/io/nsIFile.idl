#
include
"
nsISupports
.
idl
"
#
include
"
nsIDirectoryEnumerator
.
idl
"
%
{
C
+
+
struct
PRFileDesc
;
struct
PRLibrary
;
#
include
<
stdio
.
h
>
#
include
"
mozilla
/
Path
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
using
PathString
=
nsTString
<
filesystem
:
:
Path
:
:
value_type
>
;
using
PathSubstring
=
nsTSubstring
<
filesystem
:
:
Path
:
:
value_type
>
;
}
%
}
[
ptr
]
native
PRFileDescStar
(
PRFileDesc
)
;
[
ptr
]
native
PRLibraryStar
(
PRLibrary
)
;
[
ptr
]
native
FILE
(
FILE
)
;
native
PathString
(
mozilla
:
:
PathString
)
;
[
scriptable
main_process_scriptable_only
uuid
(
2fa6884a
-
ae65
-
412a
-
9d4c
-
ce6e34544ba1
)
builtinclass
]
interface
nsIFile
:
nsISupports
{
const
unsigned
long
NORMAL_FILE_TYPE
=
0
;
const
unsigned
long
DIRECTORY_TYPE
=
1
;
void
append
(
in
AString
node
)
;
[
noscript
]
void
appendNative
(
in
ACString
node
)
;
void
normalize
(
)
;
[
must_use
]
void
create
(
in
unsigned
long
type
in
unsigned
long
permissions
[
optional
default
(
false
)
]
in
bool
skipAncestors
)
;
attribute
AString
leafName
;
[
noscript
]
attribute
ACString
nativeLeafName
;
readonly
attribute
AString
displayName
;
void
copyTo
(
in
nsIFile
newParentDir
in
AString
newName
)
;
[
noscript
]
void
CopyToNative
(
in
nsIFile
newParentDir
in
ACString
newName
)
;
void
copyToFollowingLinks
(
in
nsIFile
newParentDir
in
AString
newName
)
;
[
noscript
]
void
copyToFollowingLinksNative
(
in
nsIFile
newParentDir
in
ACString
newName
)
;
void
moveTo
(
in
nsIFile
newParentDir
in
AString
newName
)
;
[
noscript
]
void
moveToNative
(
in
nsIFile
newParentDir
in
ACString
newName
)
;
void
moveToFollowingLinks
(
in
nsIFile
newParentDir
in
AString
newName
)
;
[
noscript
]
void
moveToFollowingLinksNative
(
in
nsIFile
newParentDir
in
ACString
newName
)
;
void
renameTo
(
in
nsIFile
newParentDir
in
AString
newName
)
;
[
noscript
]
void
renameToNative
(
in
nsIFile
newParentDir
in
ACString
newName
)
;
void
remove
(
in
boolean
recursive
[
optional
]
inout
uint32_t
removeCount
)
;
attribute
unsigned
long
permissions
;
attribute
unsigned
long
permissionsOfLink
;
attribute
PRTime
lastAccessedTime
;
attribute
PRTime
lastAccessedTimeOfLink
;
attribute
PRTime
lastModifiedTime
;
attribute
PRTime
lastModifiedTimeOfLink
;
readonly
attribute
PRTime
creationTime
;
readonly
attribute
PRTime
creationTimeOfLink
;
attribute
int64_t
fileSize
;
readonly
attribute
int64_t
fileSizeOfLink
;
readonly
attribute
AString
target
;
[
noscript
]
readonly
attribute
ACString
nativeTarget
;
readonly
attribute
AString
path
;
[
notxpcom
nostdcall
must_use
]
PathString
nativePath
(
)
;
%
{
C
+
+
#
ifndef
XP_WIN
nsresult
GetNativePath
(
nsACString
&
aPath
)
;
#
endif
nsCString
HumanReadablePath
(
)
;
%
}
boolean
exists
(
)
;
boolean
isWritable
(
)
;
boolean
isReadable
(
)
;
boolean
isExecutable
(
)
;
boolean
isHidden
(
)
;
boolean
isDirectory
(
)
;
boolean
isFile
(
)
;
boolean
isSymlink
(
)
;
boolean
isSpecial
(
)
;
[
must_use
]
void
createUnique
(
in
unsigned
long
type
in
unsigned
long
permissions
)
;
nsIFile
clone
(
)
;
boolean
equals
(
in
nsIFile
inFile
)
;
boolean
contains
(
in
nsIFile
inFile
)
;
readonly
attribute
nsIFile
parent
;
[
binaryname
(
DirectoryEntriesImpl
)
]
readonly
attribute
nsIDirectoryEnumerator
directoryEntries
;
%
{
C
+
+
nsresult
GetDirectoryEntries
(
nsIDirectoryEnumerator
*
*
aOut
)
{
return
GetDirectoryEntriesImpl
(
aOut
)
;
}
;
%
}
void
initWithPath
(
in
AString
filePath
)
;
[
noscript
]
void
initWithNativePath
(
in
ACString
filePath
)
;
void
initWithFile
(
in
nsIFile
aFile
)
;
const
unsigned
long
OS_READAHEAD
=
0x40000000
;
const
unsigned
long
DELETE_ON_CLOSE
=
0x80000000
;
[
noscript
must_use
]
PRFileDescStar
openNSPRFileDesc
(
in
long
flags
in
long
mode
)
;
[
noscript
must_use
]
FILE
openANSIFileDesc
(
in
string
mode
)
;
[
noscript
must_use
]
PRLibraryStar
load
(
)
;
[
must_use
]
readonly
attribute
int64_t
diskSpaceAvailable
;
[
must_use
]
readonly
attribute
int64_t
diskCapacity
;
void
appendRelativePath
(
in
AString
relativeFilePath
)
;
[
noscript
]
void
appendRelativeNativePath
(
in
ACString
relativeFilePath
)
;
[
must_use
]
attribute
ACString
persistentDescriptor
;
[
must_use
]
void
reveal
(
)
;
[
must_use
]
void
launch
(
)
;
[
must_use
]
ACString
getRelativeDescriptor
(
in
nsIFile
fromFile
)
;
[
must_use
]
void
setRelativeDescriptor
(
in
nsIFile
fromFile
in
ACString
relativeDesc
)
;
[
must_use
]
AUTF8String
getRelativePath
(
in
nsIFile
fromFile
)
;
[
must_use
]
void
setRelativePath
(
in
nsIFile
fromFile
in
AUTF8String
relativeDesc
)
;
}
;
%
{
C
+
+
#
ifdef
MOZILLA_INTERNAL_API
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsString
.
h
"
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
nsIFile
&
aFile
)
{
nsIFile
*
file
=
const_cast
<
nsIFile
*
>
(
&
aFile
)
;
nsAutoString
path
;
file
-
>
GetPath
(
path
)
;
return
aOut
<
<
"
nsIFile
{
"
<
<
path
<
<
"
}
"
;
}
#
endif
%
}
