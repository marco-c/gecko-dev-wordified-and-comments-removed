#
ifndef
mozilla_Base64_h__
#
define
mozilla_Base64_h__
#
include
"
nsString
.
h
"
class
nsIInputStream
;
namespace
mozilla
{
[
[
nodiscard
]
]
nsresult
Base64EncodeInputStream
(
nsIInputStream
*
aInputStream
nsACString
&
aDest
uint32_t
aCount
uint32_t
aOffset
=
0
)
;
[
[
nodiscard
]
]
nsresult
Base64EncodeInputStream
(
nsIInputStream
*
aInputStream
nsAString
&
aDest
uint32_t
aCount
uint32_t
aOffset
=
0
)
;
[
[
nodiscard
]
]
nsresult
Base64EncodeAppend
(
const
char
*
aBinary
uint32_t
aBinaryLen
nsAString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64EncodeAppend
(
const
char
*
aBinary
uint32_t
aBinaryLen
nsACString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64EncodeAppend
(
const
nsACString
&
aBinary
nsACString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64EncodeAppend
(
const
nsACString
&
aBinary
nsAString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
char
*
aBinary
uint32_t
aBinaryLen
char
*
*
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
char
*
aBinary
uint32_t
aBinaryLen
nsACString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
char
*
aBinary
uint32_t
aBinaryLen
nsAString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
nsACString
&
aBinary
nsACString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
nsACString
&
aBinary
nsAString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Encode
(
const
nsAString
&
aBinary
nsAString
&
aBase64
)
;
[
[
nodiscard
]
]
nsresult
Base64Decode
(
const
char
*
aBase64
uint32_t
aBase64Len
char
*
*
aBinary
uint32_t
*
aBinaryLen
)
;
[
[
nodiscard
]
]
nsresult
Base64Decode
(
const
nsACString
&
aBase64
nsACString
&
aBinary
)
;
[
[
nodiscard
]
]
nsresult
Base64Decode
(
const
nsAString
&
aBase64
nsAString
&
aBinary
)
;
[
[
nodiscard
]
]
nsresult
Base64Decode
(
const
nsAString
&
aBase64
nsACString
&
aBinary
)
;
enum
class
Base64URLEncodePaddingPolicy
{
Include
Omit
}
;
[
[
nodiscard
]
]
nsresult
Base64URLEncode
(
uint32_t
aBinaryLen
const
uint8_t
*
aBinary
Base64URLEncodePaddingPolicy
aPaddingPolicy
nsACString
&
aBase64
)
;
enum
class
Base64URLDecodePaddingPolicy
{
Require
Ignore
Reject
}
;
[
[
nodiscard
]
]
nsresult
Base64URLDecode
(
const
nsACString
&
aBase64
Base64URLDecodePaddingPolicy
aPaddingPolicy
FallibleTArray
<
uint8_t
>
&
aBinary
)
;
}
#
endif
