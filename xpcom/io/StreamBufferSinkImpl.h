#
ifndef
mozilla_StreamBufferSinkImpl_h
#
define
mozilla_StreamBufferSinkImpl_h
#
include
"
mozilla
/
Buffer
.
h
"
#
include
"
mozilla
/
StreamBufferSink
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
BufferSink
final
:
public
StreamBufferSink
{
public
:
explicit
BufferSink
(
Buffer
<
char
>
&
&
aBuffer
)
:
mBuffer
(
std
:
:
move
(
aBuffer
)
)
{
}
explicit
BufferSink
(
size_t
aLength
)
:
mBuffer
(
aLength
)
{
}
static
UniquePtr
<
BufferSink
>
Alloc
(
size_t
aLength
)
{
auto
maybeBuffer
=
Buffer
<
char
>
:
:
Alloc
(
aLength
)
;
if
(
!
maybeBuffer
)
{
return
nullptr
;
}
return
MakeUnique
<
BufferSink
>
(
maybeBuffer
.
extract
(
)
)
;
}
mozilla
:
:
Span
<
char
>
Data
(
)
override
{
return
mBuffer
.
AsWritableSpan
(
)
;
}
private
:
Buffer
<
char
>
mBuffer
;
}
;
class
nsBorrowedSink
final
:
public
StreamBufferSink
{
public
:
explicit
nsBorrowedSink
(
mozilla
:
:
Span
<
char
>
aBuffer
)
:
mBuffer
(
aBuffer
)
{
}
mozilla
:
:
Span
<
char
>
Data
(
)
override
{
return
mBuffer
;
}
private
:
mozilla
:
:
Span
<
char
>
mBuffer
;
}
;
}
#
endif
