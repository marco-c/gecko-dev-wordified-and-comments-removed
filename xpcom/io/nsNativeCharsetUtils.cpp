#
ifndef
XP_WIN
#
include
"
nsAString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
nsresult
NS_CopyNativeToUnicode
(
const
nsACString
&
aInput
nsAString
&
aOutput
)
{
CopyUTF8toUTF16
(
aInput
aOutput
)
;
return
NS_OK
;
}
nsresult
NS_CopyUnicodeToNative
(
const
nsAString
&
aInput
nsACString
&
aOutput
)
{
CopyUTF16toUTF8
(
aInput
aOutput
)
;
return
NS_OK
;
}
#
else
#
include
<
windows
.
h
>
#
include
"
nsString
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsReadableUtils
.
h
"
using
namespace
mozilla
;
nsresult
NS_CopyNativeToUnicode
(
const
nsACString
&
aInput
nsAString
&
aOutput
)
{
uint32_t
inputLen
=
aInput
.
Length
(
)
;
nsACString
:
:
const_iterator
iter
;
aInput
.
BeginReading
(
iter
)
;
const
char
*
buf
=
iter
.
get
(
)
;
uint32_t
resultLen
=
0
;
int
n
=
:
:
MultiByteToWideChar
(
CP_ACP
0
buf
inputLen
nullptr
0
)
;
if
(
n
>
0
)
{
resultLen
+
=
n
;
}
if
(
!
aOutput
.
SetLength
(
resultLen
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
resultLen
>
0
)
{
char16ptr_t
result
=
aOutput
.
BeginWriting
(
)
;
:
:
MultiByteToWideChar
(
CP_ACP
0
buf
inputLen
result
resultLen
)
;
}
return
NS_OK
;
}
nsresult
NS_CopyUnicodeToNative
(
const
nsAString
&
aInput
nsACString
&
aOutput
)
{
uint32_t
inputLen
=
aInput
.
Length
(
)
;
nsAString
:
:
const_iterator
iter
;
aInput
.
BeginReading
(
iter
)
;
char16ptr_t
buf
=
iter
.
get
(
)
;
uint32_t
resultLen
=
0
;
int
n
=
:
:
WideCharToMultiByte
(
CP_ACP
0
buf
inputLen
nullptr
0
nullptr
nullptr
)
;
if
(
n
>
0
)
{
resultLen
+
=
n
;
}
if
(
!
aOutput
.
SetLength
(
resultLen
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
resultLen
>
0
)
{
char
*
result
=
aOutput
.
BeginWriting
(
)
;
const
char
defaultChar
=
'
_
'
;
:
:
WideCharToMultiByte
(
CP_ACP
0
buf
inputLen
result
resultLen
&
defaultChar
nullptr
)
;
}
return
NS_OK
;
}
#
endif
