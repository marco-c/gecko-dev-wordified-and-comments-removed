"
use
strict
"
;
module
.
metadata
=
{
"
stability
"
:
"
experimental
"
}
;
const
{
Ci
}
=
require
(
"
chrome
"
)
;
const
{
open
}
=
require
(
"
.
.
/
event
/
dom
"
)
;
const
{
observe
}
=
require
(
"
.
.
/
event
/
chrome
"
)
;
const
{
filter
merge
map
expand
}
=
require
(
"
.
.
/
event
/
utils
"
)
;
const
{
windows
}
=
require
(
"
.
.
/
window
/
utils
"
)
;
const
{
events
:
windowEvents
}
=
require
(
"
sdk
/
window
/
events
"
)
;
var
TYPES
=
[
"
DOMContentLoaded
"
"
load
"
"
pageshow
"
"
pagehide
"
]
;
var
insert
=
observe
(
"
document
-
element
-
inserted
"
)
;
var
windowCreate
=
merge
(
[
observe
(
"
content
-
document
-
global
-
created
"
)
observe
(
"
chrome
-
document
-
global
-
created
"
)
]
)
;
var
create
=
map
(
windowCreate
function
(
{
target
data
type
}
)
{
return
{
target
:
target
.
document
type
:
type
data
:
data
}
}
)
;
function
streamEventsFrom
(
{
document
}
)
{
let
stateChanges
=
TYPES
.
map
(
function
(
type
)
{
return
open
(
document
type
{
capture
:
true
}
)
;
}
)
;
return
filter
(
merge
(
stateChanges
)
function
(
{
target
}
)
{
return
target
instanceof
Ci
.
nsIDOMDocument
}
)
}
exports
.
streamEventsFrom
=
streamEventsFrom
;
var
opened
=
windows
(
null
{
includePrivate
:
true
}
)
;
var
state
=
merge
(
opened
.
map
(
streamEventsFrom
)
)
;
var
futureReady
=
filter
(
windowEvents
function
(
{
type
}
)
type
=
=
=
"
DOMContentLoaded
"
)
;
var
futureWindows
=
map
(
futureReady
function
(
{
target
}
)
target
)
;
var
futureState
=
expand
(
futureWindows
streamEventsFrom
)
;
exports
.
events
=
merge
(
[
insert
create
state
futureState
]
)
;
