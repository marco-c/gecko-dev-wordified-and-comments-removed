'
use
strict
'
;
module
.
metadata
=
{
"
stability
"
:
"
experimental
"
}
;
const
{
Class
}
=
require
(
'
.
.
/
core
/
heritage
'
)
;
const
listNS
=
require
(
'
.
.
/
core
/
namespace
'
)
.
ns
(
)
;
const
listOptions
=
{
initialize
:
function
List
(
)
{
listNS
(
this
)
.
keyValueMap
=
[
]
;
for
(
let
i
=
0
ii
=
arguments
.
length
;
i
<
ii
;
i
+
+
)
addListItem
(
this
arguments
[
i
]
)
;
}
get
length
(
)
{
return
listNS
(
this
)
.
keyValueMap
.
length
;
}
toString
:
function
toString
(
)
{
return
'
List
(
'
+
listNS
(
this
)
.
keyValueMap
+
'
)
'
;
}
}
;
listOptions
[
Symbol
.
iterator
]
=
function
iterator
(
)
{
return
listNS
(
this
)
.
keyValueMap
.
slice
(
0
)
[
Symbol
.
iterator
]
(
)
;
}
;
const
List
=
Class
(
listOptions
)
;
exports
.
List
=
List
;
function
addListItem
(
that
value
)
{
let
list
=
listNS
(
that
)
.
keyValueMap
index
=
list
.
indexOf
(
value
)
;
if
(
-
1
=
=
=
index
)
{
try
{
that
[
that
.
length
]
=
value
;
}
catch
(
e
)
{
}
list
.
push
(
value
)
;
}
}
exports
.
addListItem
=
addListItem
;
function
removeListItem
(
that
element
)
{
let
list
=
listNS
(
that
)
.
keyValueMap
index
=
list
.
indexOf
(
element
)
;
if
(
0
<
=
index
)
{
list
.
splice
(
index
1
)
;
try
{
for
(
let
length
=
list
.
length
;
index
<
length
;
index
+
+
)
that
[
index
]
=
list
[
index
]
;
that
[
list
.
length
]
=
undefined
;
}
catch
(
e
)
{
}
}
}
exports
.
removeListItem
=
removeListItem
;
exports
.
listNS
=
listNS
;
