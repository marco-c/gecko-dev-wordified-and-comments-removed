"
use
strict
"
;
module
.
metadata
=
{
"
stability
"
:
"
unstable
"
}
;
const
{
Ci
Cu
}
=
require
(
"
chrome
"
)
;
const
{
observe
}
=
require
(
"
.
.
/
event
/
chrome
"
)
;
const
{
open
}
=
require
(
"
.
.
/
event
/
dom
"
)
;
const
{
windows
}
=
require
(
"
.
.
/
window
/
utils
"
)
;
const
{
filter
merge
map
expand
}
=
require
(
"
.
.
/
event
/
utils
"
)
;
function
documentMatches
(
weakWindow
event
)
{
let
window
=
weakWindow
.
get
(
)
;
return
window
&
&
event
.
target
=
=
=
window
.
document
;
}
function
makeStrictDocumentFilter
(
window
)
{
let
weak
=
Cu
.
getWeakReference
(
window
)
;
return
documentMatches
.
bind
(
null
weak
)
;
}
function
toEventWithDefaultViewTarget
(
{
type
target
}
)
{
return
{
type
:
type
target
:
target
.
defaultView
}
}
function
eventsFor
(
window
)
{
let
interactive
=
open
(
window
"
DOMContentLoaded
"
{
capture
:
true
}
)
;
let
complete
=
open
(
window
"
load
"
{
capture
:
true
}
)
;
let
states
=
merge
(
[
interactive
complete
]
)
;
let
changes
=
filter
(
states
makeStrictDocumentFilter
(
window
)
)
;
return
map
(
changes
toEventWithDefaultViewTarget
)
;
}
var
opened
=
windows
(
null
{
includePrivate
:
true
}
)
;
var
currentEvents
=
merge
(
opened
.
map
(
eventsFor
)
)
;
function
rename
(
{
type
target
data
}
)
{
return
{
type
:
rename
[
type
]
target
:
target
data
:
data
}
}
rename
.
domwindowopened
=
"
open
"
;
rename
.
domwindowclosed
=
"
close
"
;
var
openEvents
=
map
(
observe
(
"
domwindowopened
"
)
rename
)
;
var
closeEvents
=
map
(
observe
(
"
domwindowclosed
"
)
rename
)
;
var
futureEvents
=
expand
(
openEvents
(
{
target
}
)
=
>
eventsFor
(
target
)
)
;
var
channel
=
merge
(
[
currentEvents
futureEvents
openEvents
closeEvents
]
)
;
exports
.
events
=
channel
;
