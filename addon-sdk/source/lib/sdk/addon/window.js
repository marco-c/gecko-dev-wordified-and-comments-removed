"
use
strict
"
;
module
.
metadata
=
{
"
stability
"
:
"
experimental
"
}
;
const
{
Ci
Cc
Cu
}
=
require
(
"
chrome
"
)
;
const
{
when
:
unload
}
=
require
(
"
.
.
/
system
/
unload
"
)
;
const
prefs
=
require
(
"
.
.
/
preferences
/
service
"
)
;
if
(
!
prefs
.
get
(
"
extensions
.
usehiddenwindow
"
false
)
)
{
const
{
HiddenFrame
}
=
require
(
"
resource
:
/
/
/
modules
/
HiddenFrame
.
jsm
"
{
}
)
;
let
hiddenFrame
=
new
HiddenFrame
(
)
;
exports
.
window
=
hiddenFrame
.
getWindow
(
)
;
exports
.
ready
=
hiddenFrame
.
get
(
)
;
unload
(
function
(
)
{
hiddenFrame
.
destroy
(
)
;
hiddenFrame
=
null
;
}
)
;
}
else
{
const
{
make
:
makeWindow
getHiddenWindow
}
=
require
(
"
.
.
/
window
/
utils
"
)
;
const
{
create
:
makeFrame
getDocShell
}
=
require
(
"
.
.
/
frame
/
utils
"
)
;
const
{
defer
}
=
require
(
"
.
.
/
core
/
promise
"
)
;
const
cfxArgs
=
require
(
"
.
.
/
test
/
options
"
)
;
var
addonPrincipal
=
Cc
[
"
mozilla
.
org
/
systemprincipal
;
1
"
]
.
createInstance
(
Ci
.
nsIPrincipal
)
;
var
hiddenWindow
=
getHiddenWindow
(
)
;
if
(
cfxArgs
.
parseable
)
{
console
.
info
(
"
hiddenWindow
document
.
documentURI
:
"
+
hiddenWindow
.
document
.
documentURI
)
;
console
.
info
(
"
hiddenWindow
document
.
readyState
:
"
+
hiddenWindow
.
document
.
readyState
)
;
}
var
frame
=
makeFrame
(
hiddenWindow
.
document
{
nodeName
:
"
iframe
"
namespaceURI
:
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
allowJavascript
:
true
allowPlugins
:
true
}
)
var
docShell
=
getDocShell
(
frame
)
;
var
eventTarget
=
docShell
.
chromeEventHandler
;
docShell
.
createAboutBlankContentViewer
(
addonPrincipal
)
;
var
window
=
docShell
.
contentViewer
.
DOMDocument
.
defaultView
;
window
.
location
=
"
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
;
charset
=
utf
-
8
<
window
/
>
"
;
var
{
promise
resolve
}
=
defer
(
)
;
eventTarget
.
addEventListener
(
"
DOMContentLoaded
"
function
(
event
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
exports
.
ready
=
promise
;
exports
.
window
=
window
;
unload
(
function
(
)
{
window
.
close
(
)
frame
.
remove
(
)
;
}
)
;
}
