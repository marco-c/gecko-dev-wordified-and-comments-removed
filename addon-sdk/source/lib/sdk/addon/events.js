'
use
strict
'
;
module
.
metadata
=
{
'
stability
'
:
'
experimental
'
}
;
var
{
request
:
hostReq
response
:
hostRes
}
=
require
(
'
.
/
host
'
)
;
var
{
defer
:
async
}
=
require
(
'
.
.
/
lang
/
functional
'
)
;
var
{
defer
}
=
require
(
'
.
.
/
core
/
promise
'
)
;
var
{
emit
:
emitSync
on
off
}
=
require
(
'
.
.
/
event
/
core
'
)
;
var
{
uuid
}
=
require
(
'
.
.
/
util
/
uuid
'
)
;
var
emit
=
async
(
emitSync
)
;
var
requests
=
new
Map
(
)
;
var
receive
=
async
(
function
(
{
data
id
error
}
)
{
let
request
=
requests
.
get
(
id
)
;
if
(
request
)
{
if
(
error
)
request
.
reject
(
error
)
;
else
request
.
resolve
(
clone
(
data
)
)
;
requests
.
delete
(
id
)
;
}
}
)
;
on
(
hostRes
'
data
'
receive
)
;
function
send
(
eventName
data
)
{
let
id
=
uuid
(
)
;
let
deferred
=
defer
(
)
;
requests
.
set
(
id
deferred
)
;
emit
(
hostReq
'
data
'
{
id
:
id
data
:
clone
(
data
)
event
:
eventName
}
)
;
return
deferred
.
promise
;
}
exports
.
send
=
send
;
function
clone
(
obj
)
JSON
.
parse
(
JSON
.
stringify
(
obj
|
|
{
}
)
)
