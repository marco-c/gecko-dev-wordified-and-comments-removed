"
use
strict
"
;
const
{
Cu
Ci
}
=
require
(
"
chrome
"
)
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
SelfSupportBackend
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
SelfSupportBackend
.
jsm
"
{
}
)
;
const
Startup
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
sdk
/
system
/
Startup
.
js
"
{
}
)
.
exports
;
function
gc
(
)
{
return
new
Promise
(
resolve
=
>
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
let
count
=
0
;
function
genGCCallback
(
)
{
Cu
.
forceCC
(
)
;
return
function
(
)
{
if
(
+
+
count
<
5
)
{
Cu
.
schedulePreciseGC
(
genGCCallback
(
)
)
;
}
else
{
resolve
(
)
;
}
}
}
Cu
.
schedulePreciseGC
(
genGCCallback
(
)
)
;
}
)
;
}
exports
.
asyncWindowLeakTest
=
function
*
(
assert
asyncTestFunc
)
{
SelfSupportBackend
.
uninit
(
)
;
yield
Startup
.
onceInitialized
;
let
weakWindows
=
[
]
;
function
windowObserver
(
subject
topic
)
{
let
supportsWeak
=
subject
.
QueryInterface
(
Ci
.
nsISupportsWeakReference
)
;
if
(
supportsWeak
)
{
weakWindows
.
push
(
Cu
.
getWeakReference
(
supportsWeak
)
)
;
}
}
Services
.
obs
.
addObserver
(
windowObserver
"
domwindowopened
"
false
)
;
let
testLoader
=
yield
asyncTestFunc
(
assert
)
;
Services
.
obs
.
removeObserver
(
windowObserver
"
domwindowopened
"
)
;
yield
gc
(
)
;
assert
.
ok
(
weakWindows
.
length
>
0
"
should
see
at
least
one
new
window
"
)
;
for
(
let
i
=
0
;
i
<
weakWindows
.
length
;
+
+
i
)
{
assert
.
equal
(
weakWindows
[
i
]
.
get
(
)
null
"
window
"
+
i
+
"
should
be
GC
'
d
"
)
;
}
if
(
testLoader
)
{
testLoader
.
unload
(
)
;
}
}
