var
TalosParentProfiler
;
(
function
(
)
{
let
initted
=
false
;
let
currentTest
=
"
unknown
"
;
let
interval
entries
threadsArray
profileDir
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
let
TalosPowers
=
Components
.
classes
[
"
mozilla
.
org
/
talos
/
talos
-
powers
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsISupports
)
.
wrappedJSObject
;
function
searchToObject
(
locationSearch
)
{
let
pairs
=
locationSearch
.
substring
(
1
)
.
split
(
"
&
"
)
;
let
result
=
{
}
;
for
(
let
i
in
pairs
)
{
if
(
pairs
[
i
]
!
=
=
"
"
)
{
let
pair
=
pairs
[
i
]
.
split
(
"
=
"
)
;
result
[
decodeURIComponent
(
pair
[
0
]
)
]
=
decodeURIComponent
(
pair
[
1
]
|
|
"
"
)
;
}
}
return
result
;
}
TalosParentProfiler
=
{
initFromObject
(
obj
=
{
}
)
{
if
(
!
initted
)
{
if
(
(
"
sps_profile_dir
"
in
obj
)
&
&
typeof
obj
.
sps_profile_dir
=
=
"
string
"
&
&
(
"
sps_profile_interval
"
in
obj
)
&
&
Number
.
isFinite
(
obj
.
sps_profile_interval
*
1
)
&
&
(
"
sps_profile_entries
"
in
obj
)
&
&
Number
.
isFinite
(
obj
.
sps_profile_entries
*
1
)
&
&
(
"
sps_profile_threads
"
in
obj
)
&
&
typeof
obj
.
sps_profile_threads
=
=
"
string
"
)
{
interval
=
obj
.
sps_profile_interval
;
entries
=
obj
.
sps_profile_entries
;
threadsArray
=
obj
.
sps_profile_threads
.
split
(
"
"
)
;
profileDir
=
obj
.
sps_profile_dir
;
initted
=
true
;
}
else
{
console
.
error
(
"
Profiler
could
not
init
with
object
:
"
+
JSON
.
stringify
(
obj
)
)
;
}
}
}
initFromURLQueryParams
(
locationSearch
)
{
this
.
initFromObject
(
searchToObject
(
locationSearch
)
)
;
}
beginTest
(
testName
)
{
if
(
initted
)
{
currentTest
=
testName
;
TalosPowers
.
profilerBegin
(
{
entries
interval
threadsArray
}
)
;
}
else
{
let
msg
=
"
You
should
not
call
beginTest
without
having
first
"
+
"
initted
the
Profiler
"
console
.
error
(
msg
)
;
}
}
finishTest
(
)
{
if
(
initted
)
{
let
profileFile
=
profileDir
+
"
/
"
+
currentTest
+
"
.
sps
"
;
return
TalosPowers
.
profilerFinish
(
profileFile
)
;
}
else
{
let
msg
=
"
You
should
not
call
finishTest
without
having
first
"
+
"
initted
the
Profiler
"
;
console
.
error
(
msg
)
;
return
Promise
.
reject
(
msg
)
;
}
}
finishStartupProfiling
(
)
{
if
(
initted
)
{
let
profileFile
=
profileDir
+
"
/
startup
.
sps
"
;
return
TalosPowers
.
profilerFinish
(
profileFile
)
;
}
return
Promise
.
resolve
(
)
;
}
resume
(
marker
=
"
"
)
{
if
(
initted
)
{
TalosPowers
.
profilerResume
(
marker
)
;
}
}
pause
(
marker
=
"
"
)
{
if
(
initted
)
{
TalosPowers
.
profilerPause
(
marker
)
;
}
}
mark
(
marker
)
{
if
(
initted
)
{
if
(
!
marker
)
{
marker
=
currentTest
;
}
TalosPowers
.
profilerMarker
(
marker
)
;
}
}
}
;
}
)
(
)
;
