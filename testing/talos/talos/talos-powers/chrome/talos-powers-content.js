var
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
addEventListener
(
"
TalosQuitApplication
"
event
=
>
{
let
priority
=
docShell
.
QueryInterface
(
Ci
.
nsIDocumentLoader
)
.
loadGroup
.
QueryInterface
(
Ci
.
nsISupportsPriority
)
.
priority
;
if
(
priority
!
=
Ci
.
nsISupportsPriority
.
PRIORITY_LOWEST
)
{
sendAsyncMessage
(
"
Talos
:
ForceQuit
"
event
.
detail
)
;
}
}
)
;
addEventListener
(
"
TalosContentProfilerCommand
"
(
e
)
=
>
{
let
name
=
e
.
detail
.
name
;
let
data
=
e
.
detail
.
data
;
sendAsyncMessage
(
"
TalosContentProfiler
:
Command
"
{
name
data
}
)
;
}
)
;
addMessageListener
(
"
TalosContentProfiler
:
Response
"
(
msg
)
=
>
{
let
name
=
msg
.
data
.
name
;
let
data
=
msg
.
data
.
data
;
let
event
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
{
name
:
name
data
:
data
}
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
TalosContentProfilerResponse
"
event
)
)
;
}
)
;
addEventListener
(
"
TalosPowersContentForceCCAndGC
"
(
e
)
=
>
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
sendSyncMessage
(
"
TalosPowersContent
:
ForceCCAndGC
"
)
;
}
)
;
