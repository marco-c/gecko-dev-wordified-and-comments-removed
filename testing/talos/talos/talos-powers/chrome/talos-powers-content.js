addEventListener
(
"
TalosContentProfilerCommand
"
e
=
>
{
let
name
=
e
.
detail
.
name
;
let
data
=
e
.
detail
.
data
;
sendAsyncMessage
(
"
TalosContentProfiler
:
Command
"
{
name
data
}
)
;
}
{
wantUntrusted
:
true
}
)
;
addMessageListener
(
"
TalosContentProfiler
:
Response
"
msg
=
>
{
let
name
=
msg
.
data
.
name
;
let
data
=
msg
.
data
.
data
;
let
event
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
{
name
data
}
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
TalosContentProfilerResponse
"
event
)
)
;
}
)
;
addEventListener
(
"
TalosPowersContentForceCCAndGC
"
e
=
>
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
sendSyncMessage
(
"
TalosPowersContent
:
ForceCCAndGC
"
)
;
}
{
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowersContentFocus
"
e
=
>
{
if
(
content
.
location
.
protocol
!
=
"
file
:
"
&
&
content
.
location
.
hostname
!
=
"
localhost
"
&
&
content
.
location
.
hostname
!
=
"
127
.
0
.
0
.
1
"
)
{
throw
new
Error
(
"
TalosPowersContentFocus
may
only
be
used
with
local
content
"
)
;
}
content
.
focus
(
)
;
let
contentEvent
=
Cu
.
cloneInto
(
{
bubbles
:
true
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
TalosPowersContentFocused
"
contentEvent
)
)
;
}
{
capture
:
true
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowersContentGetStartupInfo
"
e
=
>
{
sendAsyncMessage
(
"
TalosPowersContent
:
GetStartupInfo
"
)
;
addMessageListener
(
"
TalosPowersContent
:
GetStartupInfo
:
Result
"
function
onResult
(
msg
)
{
removeMessageListener
(
"
TalosPowersContent
:
GetStartupInfo
:
Result
"
onResult
)
;
let
event
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
msg
.
data
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
TalosPowersContentGetStartupInfoResult
"
event
)
)
;
}
)
;
}
{
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowersContentDumpConsole
"
e
=
>
{
var
messages
;
try
{
messages
=
Services
.
console
.
getMessageArray
(
)
;
}
catch
(
ex
)
{
dump
(
ex
+
"
\
n
"
)
;
messages
=
[
]
;
}
for
(
var
i
=
0
;
i
<
messages
.
length
;
i
+
+
)
{
dump
(
messages
[
i
]
.
message
+
"
\
n
"
)
;
}
}
{
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowersGoQuitApplication
"
e
=
>
{
let
priority
=
docShell
.
QueryInterface
(
Ci
.
nsIDocumentLoader
)
.
loadGroup
.
QueryInterface
(
Ci
.
nsISupportsPriority
)
.
priority
;
if
(
priority
!
=
Ci
.
nsISupportsPriority
.
PRIORITY_LOWEST
)
{
sendAsyncMessage
(
"
Talos
:
ForceQuit
"
e
.
detail
)
;
}
}
{
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowersWebRenderCapture
"
e
=
>
{
if
(
content
&
&
content
.
windowUtils
)
{
content
.
windowUtils
.
wrCapture
(
)
;
}
else
{
dump
(
"
Unable
to
obtain
DOMWindowUtils
for
TalosPowersWebRenderCapture
\
n
"
)
;
}
}
{
wantUntrusted
:
true
}
)
;
addEventListener
(
"
TalosPowers
:
ParentExec
:
QueryEvent
"
function
(
e
)
{
if
(
content
.
location
.
protocol
!
=
"
file
:
"
&
&
content
.
location
.
hostname
!
=
"
localhost
"
&
&
content
.
location
.
hostname
!
=
"
127
.
0
.
0
.
1
"
)
{
throw
new
Error
(
"
TalosPowers
:
ParentExec
may
only
be
used
with
local
content
"
)
;
}
let
uniqueMessageId
=
"
TalosPowers
:
ParentExec
:
"
+
content
.
document
.
documentURI
+
content
.
window
.
performance
.
now
(
)
+
Math
.
random
(
)
;
addMessageListener
(
"
TalosPowers
:
ParentExec
:
ReplyMsg
"
function
done
(
reply
)
{
if
(
reply
.
data
.
id
!
=
uniqueMessageId
)
{
return
;
}
removeMessageListener
(
"
TalosPowers
:
ParentExec
:
ReplyMsg
"
done
)
;
let
contentEvent
=
Cu
.
cloneInto
(
{
bubbles
:
true
detail
:
reply
.
data
.
result
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
e
.
detail
.
listeningTo
contentEvent
)
)
;
}
)
;
sendAsyncMessage
(
"
TalosPowers
:
ParentExec
:
QueryMsg
"
{
command
:
e
.
detail
.
command
id
:
uniqueMessageId
}
)
;
}
{
wantUntrusted
:
true
}
)
;
