const
{
ComponentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ComponentUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutHomeStartupCache
:
"
resource
:
/
/
/
modules
/
BrowserGlue
.
jsm
"
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
PerTestCoverageUtils
:
"
resource
:
/
/
testing
-
common
/
PerTestCoverageUtils
.
jsm
"
SessionStore
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
resProto
"
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
"
nsISubstitutingProtocolHandler
"
)
;
Cu
.
importGlobalProperties
(
[
"
TextEncoder
"
]
)
;
const
Cm
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
let
frameScriptURL
;
let
profilerStartTime
;
function
TalosPowersService
(
)
{
this
.
wrappedJSObject
=
this
;
this
.
init
(
)
;
}
TalosPowersService
.
prototype
=
{
factory
:
ComponentUtils
.
_getFactory
(
TalosPowersService
)
classDescription
:
"
Talos
Powers
"
classID
:
Components
.
ID
(
"
{
f5d53443
-
d58d
-
4a2f
-
8df0
-
98525d4f91ad
}
"
)
contractID
:
"
mozilla
.
org
/
talos
/
talos
-
powers
-
service
;
1
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
]
)
register
(
)
{
Cm
.
registerFactory
(
this
.
classID
this
.
classDescription
this
.
contractID
this
.
factory
)
;
void
Cc
[
this
.
contractID
]
.
getService
(
)
;
}
unregister
(
)
{
Cm
.
unregisterFactory
(
this
.
classID
this
.
factory
)
;
}
init
(
)
{
if
(
!
frameScriptURL
)
{
throw
new
Error
(
"
Cannot
find
frame
script
url
(
extension
not
started
?
)
"
)
;
}
Services
.
mm
.
loadFrameScript
(
frameScriptURL
true
)
;
Services
.
mm
.
addMessageListener
(
"
Talos
:
ForceQuit
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
TalosContentProfiler
:
Command
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
TalosPowersContent
:
ForceCCAndGC
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
TalosPowersContent
:
GetStartupInfo
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
TalosPowers
:
ParentExec
:
QueryMsg
"
this
)
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Talos
:
ForceQuit
"
:
{
this
.
forceQuit
(
message
.
data
)
;
break
;
}
case
"
TalosContentProfiler
:
Command
"
:
{
this
.
receiveProfileCommand
(
message
)
;
break
;
}
case
"
TalosPowersContent
:
ForceCCAndGC
"
:
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceShrinkingGC
(
)
;
break
;
}
case
"
TalosPowersContent
:
GetStartupInfo
"
:
{
this
.
receiveGetStartupInfo
(
message
)
;
break
;
}
case
"
TalosPowers
:
ParentExec
:
QueryMsg
"
:
{
this
.
RecieveParentExecCommand
(
message
)
;
break
;
}
}
}
profilerBegin
(
data
)
{
Services
.
profiler
.
StartProfiler
(
data
.
entries
data
.
interval
data
.
featuresArray
data
.
threadsArray
)
;
Services
.
profiler
.
PauseSampling
(
)
;
}
profilerFinish
(
profileFile
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
profiler
.
Pause
(
)
;
Services
.
profiler
.
getProfileDataAsync
(
)
.
then
(
profile
=
>
{
let
encoder
=
new
TextEncoder
(
)
;
let
array
=
encoder
.
encode
(
JSON
.
stringify
(
profile
)
)
;
OS
.
File
.
writeAtomic
(
profileFile
array
{
tmpPath
:
profileFile
+
"
.
tmp
"
}
)
.
then
(
(
)
=
>
{
Services
.
profiler
.
StopProfiler
(
)
;
resolve
(
)
;
Services
.
obs
.
notifyObservers
(
null
"
talos
-
profile
-
gathered
"
)
;
}
)
;
}
error
=
>
{
Cu
.
reportError
(
"
Failed
to
gather
profile
:
"
+
error
)
;
reject
(
)
;
}
)
;
}
)
;
}
profilerPause
(
marker
=
null
)
{
if
(
marker
)
{
this
.
addIntervalMarker
(
marker
profilerStartTime
)
;
}
Services
.
profiler
.
PauseSampling
(
)
;
}
profilerResume
(
marker
=
null
)
{
Services
.
profiler
.
ResumeSampling
(
)
;
profilerStartTime
=
Cu
.
now
(
)
;
if
(
marker
)
{
this
.
addInstantMarker
(
marker
)
;
}
}
addInstantMarker
(
marker
)
{
ChromeUtils
.
addProfilerMarker
(
"
Talos
"
undefined
marker
)
;
}
addIntervalMarker
(
marker
startTime
)
{
ChromeUtils
.
addProfilerMarker
(
"
Talos
"
startTime
marker
)
;
}
receiveProfileCommand
(
message
)
{
const
ACK_NAME
=
"
TalosContentProfiler
:
Response
"
;
let
mm
=
message
.
target
.
messageManager
;
let
name
=
message
.
data
.
name
;
let
data
=
message
.
data
.
data
;
switch
(
name
)
{
case
"
Profiler
:
Begin
"
:
{
this
.
profilerBegin
(
data
)
;
mm
.
sendAsyncMessage
(
ACK_NAME
{
name
}
)
;
break
;
}
case
"
Profiler
:
Finish
"
:
{
this
.
profilerFinish
(
data
.
profileFile
)
.
then
(
(
)
=
>
{
mm
.
sendAsyncMessage
(
ACK_NAME
{
name
}
)
;
}
)
;
break
;
}
case
"
Profiler
:
Pause
"
:
{
this
.
profilerPause
(
data
.
marker
data
.
startTime
)
;
mm
.
sendAsyncMessage
(
ACK_NAME
{
name
}
)
;
break
;
}
case
"
Profiler
:
Resume
"
:
{
this
.
profilerResume
(
data
.
marker
)
;
mm
.
sendAsyncMessage
(
ACK_NAME
{
name
}
)
;
break
;
}
case
"
Profiler
:
Marker
"
:
{
this
.
profilerMarker
(
data
.
marker
data
.
startTime
)
;
mm
.
sendAsyncMessage
(
ACK_NAME
{
name
}
)
;
break
;
}
}
}
async
forceQuit
(
messageData
)
{
if
(
messageData
&
&
messageData
.
waitForStartupFinished
)
{
let
{
SafeBrowsing
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
SafeBrowsing
.
jsm
"
)
;
SafeBrowsing
.
init
(
)
;
try
{
await
SafeBrowsing
.
addMozEntriesFinishedPromise
;
}
catch
(
e
)
{
}
AboutNewTab
.
onBrowserReady
(
)
;
let
pollForFeed
=
async
function
(
)
{
let
foundFeed
=
AboutNewTab
.
activityStream
.
store
.
feeds
.
get
(
"
feeds
.
system
.
topsites
"
)
;
if
(
!
foundFeed
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
return
pollForFeed
(
)
;
}
return
foundFeed
;
}
;
let
feed
=
await
pollForFeed
(
)
;
await
feed
.
_contile
.
refresh
(
)
;
await
feed
.
refresh
(
{
broadcast
:
true
}
)
;
await
AboutHomeStartupCache
.
cacheNow
(
)
;
}
await
SessionStore
.
promiseAllWindowsRestored
;
let
topWin
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
topWin
&
&
topWin
.
gBrowserInit
)
{
await
topWin
.
gBrowserInit
.
idleTasksFinishedPromise
;
}
for
(
let
domWindow
of
Services
.
wm
.
getEnumerator
(
null
)
)
{
domWindow
.
close
(
)
;
}
try
{
Services
.
startup
.
quit
(
Services
.
startup
.
eForceQuit
)
;
}
catch
(
e
)
{
dump
(
"
Force
Quit
failed
:
"
+
e
)
;
}
}
receiveGetStartupInfo
(
message
)
{
let
mm
=
message
.
target
.
messageManager
;
let
startupInfo
=
Services
.
startup
.
getStartupInfo
(
)
;
if
(
!
startupInfo
.
firstPaint
)
{
let
obs
=
function
(
subject
topic
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
startupInfo
=
Services
.
startup
.
getStartupInfo
(
)
;
mm
.
sendAsyncMessage
(
"
TalosPowersContent
:
GetStartupInfo
:
Result
"
startupInfo
)
;
}
;
Services
.
obs
.
addObserver
(
obs
"
widget
-
first
-
paint
"
)
;
}
else
{
mm
.
sendAsyncMessage
(
"
TalosPowersContent
:
GetStartupInfo
:
Result
"
startupInfo
)
;
}
}
ParentExecServices
:
{
ping
(
arg
callback
win
)
{
callback
(
)
;
}
startFrameTimeRecording
(
arg
callback
win
)
{
var
rv
=
win
.
windowUtils
.
startFrameTimeRecording
(
)
;
callback
(
rv
)
;
}
stopFrameTimeRecording
(
arg
callback
win
)
{
var
rv
=
win
.
windowUtils
.
stopFrameTimeRecording
(
arg
)
;
callback
(
rv
)
;
}
requestDumpCoverageCounters
(
arg
callback
win
)
{
PerTestCoverageUtils
.
afterTest
(
)
.
then
(
callback
)
;
}
requestResetCoverageCounters
(
arg
callback
win
)
{
PerTestCoverageUtils
.
beforeTest
(
)
.
then
(
callback
)
;
}
dumpAboutSupport
(
arg
callback
win
)
{
const
{
Troubleshoot
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Troubleshoot
.
jsm
"
)
;
Troubleshoot
.
snapshot
(
function
(
snapshot
)
{
dump
(
"
about
:
support
\
t
"
+
JSON
.
stringify
(
snapshot
)
+
"
\
n
"
)
;
}
)
;
callback
(
)
;
}
}
RecieveParentExecCommand
(
msg
)
{
function
sendResult
(
result
)
{
let
mm
=
msg
.
target
.
messageManager
;
mm
.
sendAsyncMessage
(
"
TalosPowers
:
ParentExec
:
ReplyMsg
"
{
id
:
msg
.
data
.
id
result
}
)
;
}
let
command
=
msg
.
data
.
command
;
if
(
!
this
.
ParentExecServices
.
hasOwnProperty
(
command
.
name
)
)
{
throw
new
Error
(
"
TalosPowers
:
ParentExec
:
Invalid
service
'
"
+
command
.
name
+
"
'
"
)
;
}
this
.
ParentExecServices
[
command
.
name
]
(
command
.
data
sendResult
msg
.
target
.
ownerGlobal
)
;
}
}
;
this
.
talos_powers
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
content
/
"
null
this
.
extension
.
rootURI
)
;
resProto
.
setSubstitutionWithFlags
(
"
talos
-
powers
"
uri
resProto
.
ALLOW_CONTENT_ACCESS
)
;
frameScriptURL
=
this
.
extension
.
rootURI
.
resolve
(
"
chrome
/
talos
-
powers
-
content
.
js
"
)
;
TalosPowersService
.
prototype
.
register
(
)
;
}
onShutdown
(
)
{
TalosPowersService
.
prototype
.
unregister
(
)
;
frameScriptURL
=
null
;
resProto
.
setSubstitution
(
"
talos
-
powers
"
null
)
;
}
}
;
