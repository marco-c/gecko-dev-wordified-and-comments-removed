var
ipcMode
=
false
;
function
contentDispatchEvent
(
type
data
sync
)
{
if
(
typeof
(
data
)
=
=
=
"
undefined
"
)
{
data
=
{
}
;
}
var
element
=
document
.
createEvent
(
"
datacontainerevent
"
)
;
element
.
initEvent
(
"
contentEvent
"
true
false
)
;
element
.
setData
(
"
sync
"
sync
)
;
element
.
setData
(
"
type
"
type
)
;
element
.
setData
(
"
data
"
JSON
.
stringify
(
data
)
)
;
document
.
dispatchEvent
(
element
)
;
}
function
contentSyncEvent
(
type
data
)
{
contentDispatchEvent
(
type
data
1
)
;
}
function
contentAsyncEvent
(
type
data
)
{
contentDispatchEvent
(
type
data
0
)
;
}
function
dumpLog
(
msg
)
{
dump
(
msg
)
;
MozFileLogger
.
log
(
msg
)
;
}
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
if
(
Cc
=
=
=
undefined
)
{
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
}
const
FOSTREAM_CID
=
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
;
const
LF_CID
=
"
mozilla
.
org
/
file
/
local
;
1
"
;
const
PR_READ_ONLY
=
0x01
;
const
PR_WRITE_ONLY
=
0x02
;
const
PR_READ_WRITE
=
0x04
;
const
PR_CREATE_FILE
=
0x08
;
const
PR_APPEND
=
0x10
;
const
PR_TRUNCATE
=
0x20
;
const
PR_SYNC
=
0x40
;
const
PR_EXCL
=
0x80
;
var
MozFileLogger
=
{
}
;
MozFileLogger
.
init
=
function
(
path
)
{
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
MozFileLogger
.
_file
=
Cc
[
LF_CID
]
.
createInstance
(
Ci
.
nsILocalFile
)
;
MozFileLogger
.
_file
.
initWithPath
(
path
)
;
MozFileLogger
.
_foStream
=
Cc
[
FOSTREAM_CID
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
MozFileLogger
.
_foStream
.
init
(
this
.
_file
PR_WRITE_ONLY
|
PR_CREATE_FILE
|
PR_APPEND
0o664
0
)
;
}
MozFileLogger
.
getLogCallback
=
function
(
)
{
return
function
(
msg
)
{
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
var
data
=
msg
.
num
+
"
"
+
msg
.
level
+
"
"
+
msg
.
info
.
join
(
'
'
)
+
"
\
n
"
;
if
(
MozFileLogger
.
_foStream
)
MozFileLogger
.
_foStream
.
write
(
data
data
.
length
)
;
if
(
data
.
indexOf
(
"
SimpleTest
FINISH
"
)
>
=
0
)
{
MozFileLogger
.
close
(
)
;
}
}
}
MozFileLogger
.
log
=
function
(
msg
)
{
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
try
{
if
(
MozFileLogger
.
_foStream
)
MozFileLogger
.
_foStream
.
write
(
msg
msg
.
length
)
;
}
catch
(
ex
)
{
}
}
MozFileLogger
.
close
=
function
(
)
{
if
(
ipcMode
)
{
contentAsyncEvent
(
"
LoggerClose
"
)
;
return
;
}
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
if
(
MozFileLogger
.
_foStream
)
MozFileLogger
.
_foStream
.
close
(
)
;
MozFileLogger
.
_foStream
=
null
;
MozFileLogger
.
_file
=
null
;
}
try
{
var
prefs
=
Components
.
classes
[
'
mozilla
.
org
/
preferences
-
service
;
1
'
]
.
getService
(
Components
.
interfaces
.
nsIPrefBranch2
)
;
var
filename
=
prefs
.
getCharPref
(
'
talos
.
logfile
'
)
;
MozFileLogger
.
init
(
filename
)
;
}
catch
(
ex
)
{
}
