'
'
'
This
helps
loading
mitmproxy
'
s
cert
and
change
proxy
settings
for
Firefox
.
'
'
'
from
__future__
import
absolute_import
import
os
import
subprocess
import
sys
import
time
import
mozinfo
import
psutil
from
mozlog
import
get_proxy_logger
here
=
os
.
path
.
dirname
(
os
.
path
.
realpath
(
__file__
)
)
LOG
=
get_proxy_logger
(
)
try
:
    
DEFAULT_CERT_PATH
=
os
.
path
.
join
(
os
.
getenv
(
'
HOME
'
)
                                     
'
.
mitmproxy
'
'
mitmproxy
-
ca
-
cert
.
cer
'
)
except
Exception
:
    
DEFAULT_CERT_PATH
=
os
.
path
.
join
(
os
.
getenv
(
'
HOMEDRIVE
'
)
os
.
getenv
(
'
HOMEPATH
'
)
                                     
'
.
mitmproxy
'
'
mitmproxy
-
ca
-
cert
.
cer
'
)
POLICIES_CONTENT_ON
=
'
'
'
{
  
"
policies
"
:
{
    
"
Certificates
"
:
{
      
"
Install
"
:
[
"
%
(
cert
)
s
"
]
    
}
    
"
Proxy
"
:
{
      
"
Mode
"
:
"
manual
"
      
"
HTTPProxy
"
:
"
127
.
0
.
0
.
1
:
8080
"
      
"
SSLProxy
"
:
"
127
.
0
.
0
.
1
:
8080
"
      
"
Passthrough
"
:
"
"
      
"
Locked
"
:
true
    
}
  
}
}
'
'
'
POLICIES_CONTENT_OFF
=
'
'
'
{
  
"
policies
"
:
{
    
"
Proxy
"
:
{
      
"
Mode
"
:
"
none
"
      
"
Locked
"
:
false
    
}
  
}
}
'
'
'
def
install_mitmproxy_cert
(
mitmproxy_proc
browser_path
)
:
    
"
"
"
Install
the
CA
certificate
generated
by
mitmproxy
into
Firefox
    
1
.
Create
a
directory
called
distribution
in
the
same
directory
as
the
Firefox
executable
    
2
.
Create
a
file
called
policies
.
json
with
:
    
{
      
"
policies
"
:
{
        
"
certificates
"
:
{
          
"
Install
"
:
[
"
FULL_PATH_TO_CERT
"
]
        
}
      
}
    
}
    
"
"
"
    
LOG
.
info
(
"
Installing
mitmproxy
CA
certficate
into
Firefox
"
)
    
policies_dir
=
os
.
path
.
dirname
(
browser_path
)
    
if
'
mac
'
in
mozinfo
.
os
:
        
policies_dir
=
os
.
path
.
join
(
policies_dir
[
:
-
6
]
"
Resources
"
)
    
policies_dir
=
os
.
path
.
join
(
policies_dir
"
distribution
"
)
    
cert_path
=
DEFAULT_CERT_PATH
    
if
mozinfo
.
os
=
=
'
win
'
:
        
cert_path
=
cert_path
.
replace
(
'
\
\
'
'
\
\
\
\
'
)
    
if
not
os
.
path
.
exists
(
policies_dir
)
:
        
LOG
.
info
(
"
creating
folder
:
%
s
"
%
policies_dir
)
        
os
.
makedirs
(
policies_dir
)
    
else
:
        
LOG
.
info
(
"
folder
already
exists
:
%
s
"
%
policies_dir
)
    
write_policies_json
(
policies_dir
                        
policies_content
=
POLICIES_CONTENT_ON
%
                        
{
'
cert
'
:
cert_path
}
)
    
if
not
is_mitmproxy_cert_installed
(
policies_dir
)
:
        
LOG
.
error
(
'
Aborting
:
failed
to
install
mitmproxy
CA
cert
into
Firefox
'
)
        
stop_mitmproxy_playback
(
mitmproxy_proc
)
        
sys
.
exit
(
)
def
write_policies_json
(
location
policies_content
)
:
    
policies_file
=
os
.
path
.
join
(
location
"
policies
.
json
"
)
    
LOG
.
info
(
"
writing
:
%
s
"
%
policies_file
)
    
with
open
(
policies_file
'
w
'
)
as
fd
:
        
fd
.
write
(
policies_content
)
def
read_policies_json
(
location
)
:
    
policies_file
=
os
.
path
.
join
(
location
"
policies
.
json
"
)
    
LOG
.
info
(
"
reading
:
%
s
"
%
policies_file
)
    
with
open
(
policies_file
'
r
'
)
as
fd
:
        
return
fd
.
read
(
)
def
is_mitmproxy_cert_installed
(
policies_dir
)
:
    
"
"
"
Verify
mitmxproy
CA
cert
was
added
to
Firefox
"
"
"
    
try
:
        
contents
=
read_policies_json
(
policies_dir
)
        
LOG
.
info
(
"
Firefox
policies
file
contents
:
"
)
        
LOG
.
info
(
contents
)
        
cert_path
=
DEFAULT_CERT_PATH
        
if
mozinfo
.
os
=
=
'
win
'
:
            
cert_path
=
cert_path
.
replace
(
'
\
\
'
'
\
\
\
\
'
)
        
if
(
POLICIES_CONTENT_ON
%
{
                
'
cert
'
:
cert_path
}
)
in
contents
:
            
LOG
.
info
(
"
Verified
mitmproxy
CA
certificate
is
installed
in
Firefox
"
)
        
else
:
            
return
False
    
except
Exception
as
e
:
        
LOG
.
info
(
"
failed
to
read
Firefox
policies
file
exeption
:
%
s
"
%
e
)
        
return
False
    
return
True
def
start_mitmproxy_playback
(
mitmdump_path
                             
mitmproxy_recording_path
                             
mitmproxy_recordings_list
                             
browser_path
)
:
    
"
"
"
Startup
mitmproxy
and
replay
the
specified
flow
file
"
"
"
    
mitmproxy_recordings
=
[
]
    
for
recording
in
mitmproxy_recordings_list
:
        
mitmproxy_recordings
.
append
(
os
.
path
.
join
(
mitmproxy_recording_path
recording
)
)
    
param
=
os
.
path
.
join
(
here
'
alternate
-
server
-
replay
.
py
'
)
    
env
=
os
.
environ
.
copy
(
)
    
if
mozinfo
.
os
=
=
'
win
'
:
        
param2
=
'
"
"
'
+
param
.
replace
(
'
\
\
'
'
\
\
\
\
\
\
'
)
+
'
'
+
\
                 
'
'
.
join
(
mitmproxy_recordings
)
.
replace
(
'
\
\
'
'
\
\
\
\
\
\
'
)
+
'
"
"
'
        
sys
.
path
.
insert
(
1
mitmdump_path
)
        
env
[
"
PATH
"
]
=
os
.
path
.
dirname
(
browser_path
)
+
"
;
"
+
env
[
"
PATH
"
]
    
else
:
        
param2
=
param
+
'
'
+
'
'
.
join
(
mitmproxy_recordings
)
        
env
[
"
PATH
"
]
=
os
.
path
.
dirname
(
browser_path
)
    
command
=
[
mitmdump_path
'
-
k
'
'
-
s
'
param2
]
    
LOG
.
info
(
"
Starting
mitmproxy
playback
using
env
path
:
%
s
"
%
env
[
"
PATH
"
]
)
    
LOG
.
info
(
"
Starting
mitmproxy
playback
using
command
:
%
s
"
%
'
'
.
join
(
command
)
)
    
mitmproxy_proc
=
subprocess
.
Popen
(
command
env
=
env
)
    
time
.
sleep
(
10
)
    
data
=
mitmproxy_proc
.
poll
(
)
    
if
data
is
None
:
        
LOG
.
info
(
"
Mitmproxy
playback
successfully
started
as
pid
%
d
"
%
mitmproxy_proc
.
pid
)
        
return
mitmproxy_proc
    
LOG
.
error
(
'
Aborting
:
mitmproxy
playback
process
failed
to
start
poll
returned
:
%
s
'
%
data
)
    
sys
.
exit
(
)
def
stop_mitmproxy_playback
(
mitmproxy_proc
)
:
    
"
"
"
Stop
the
mitproxy
server
playback
"
"
"
    
LOG
.
info
(
"
Stopping
mitmproxy
playback
killing
process
%
d
"
%
mitmproxy_proc
.
pid
)
    
if
mozinfo
.
os
=
=
'
win
'
:
        
mitmproxy_proc
.
kill
(
)
    
else
:
        
mitmproxy_proc
.
terminate
(
)
    
time
.
sleep
(
10
)
    
if
mitmproxy_proc
.
pid
in
psutil
.
pids
(
)
:
        
LOG
.
error
(
"
Failed
to
kill
the
mitmproxy
playback
process
"
)
    
else
:
        
LOG
.
info
(
"
Successfully
killed
the
mitmproxy
playback
process
"
)
