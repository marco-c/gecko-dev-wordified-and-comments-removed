"
use
strict
"
;
const
{
reloadInspectorAndLog
selectNodeFront
}
=
require
(
"
.
/
inspector
-
helpers
"
)
;
const
{
closeToolboxAndLog
garbageCollect
recordPendingPaints
runTest
testSetup
testTeardown
PAGES_BASE_URL
}
=
require
(
"
.
.
/
head
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
module
.
exports
=
async
function
(
)
{
const
tab
=
await
testSetup
(
PAGES_BASE_URL
+
"
custom
/
inspector
/
index
.
html
"
)
;
const
domReference
=
await
getContentDOMReference
(
"
#
initial
-
node
"
tab
)
;
let
toolbox
=
await
openToolboxWithInspectNode
(
domReference
tab
)
;
await
reloadInspectorAndLog
(
"
custom
"
toolbox
)
;
await
selectNodeWithManyRulesAndLog
(
toolbox
)
;
await
collapseExpandAllAndLog
(
toolbox
)
;
await
closeToolboxAndLog
(
"
custom
.
inspector
"
toolbox
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
await
garbageCollect
(
)
;
await
testTeardown
(
)
;
}
;
async
function
getContentDOMReference
(
selector
tab
)
{
dump
(
"
Retrieve
the
ContentDOMReference
for
a
given
selector
"
)
;
return
new
Promise
(
resolve
=
>
{
const
messageManager
=
tab
.
linkedBrowser
.
messageManager
;
messageManager
.
addMessageListener
(
"
get
-
dom
-
reference
-
done
"
e
=
>
{
const
domReference
=
e
.
data
;
resolve
(
domReference
)
;
}
)
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
function
(
)
{
const
{
ContentDOMReference
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ContentDOMReference
.
jsm
"
)
;
const
element
=
content
.
document
.
querySelector
(
"
{
selector
}
"
)
;
const
domReference
=
ContentDOMReference
.
get
(
element
)
;
sendAsyncMessage
(
"
get
-
dom
-
reference
-
done
"
domReference
)
;
}
)
+
"
)
(
)
"
false
)
;
}
)
;
}
async
function
openToolboxWithInspectNode
(
domReference
tab
)
{
dump
(
"
Open
the
toolbox
using
InspectNode
\
n
"
)
;
const
test
=
runTest
(
custom
.
inspector
.
open
.
DAMP
)
;
const
onToolboxCreated
=
gDevTools
.
once
(
"
toolbox
-
created
"
)
;
await
gDevTools
.
inspectNode
(
tab
domReference
)
;
const
toolbox
=
await
onToolboxCreated
;
test
.
done
(
)
;
await
recordPendingPaints
(
"
custom
.
inspector
.
open
"
toolbox
)
;
await
garbageCollect
(
)
;
return
toolbox
;
}
async
function
selectNodeWithManyRulesAndLog
(
toolbox
)
{
let
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
let
initialNodeFront
=
inspector
.
selection
.
nodeFront
;
let
root
=
await
inspector
.
walker
.
getRootNode
(
)
;
let
referenceNodeFront
=
await
inspector
.
walker
.
querySelector
(
root
"
.
no
-
css
-
rules
"
)
;
let
testNodeFront
=
await
inspector
.
walker
.
querySelector
(
root
"
.
many
-
css
-
rules
"
)
;
dump
(
"
Selecting
.
many
-
css
-
rules
test
node
front
\
n
"
)
;
let
test
=
runTest
(
"
custom
.
inspector
.
manyrules
.
selectnode
"
)
;
await
selectNodeFront
(
inspector
testNodeFront
)
;
test
.
done
(
)
;
dump
(
"
Move
the
selection
to
a
node
with
no
rules
\
n
"
)
;
test
=
runTest
(
"
custom
.
inspector
.
manyrules
.
deselectnode
"
)
;
await
selectNodeFront
(
inspector
referenceNodeFront
)
;
test
.
done
(
)
;
await
selectNodeFront
(
inspector
initialNodeFront
)
;
}
async
function
collapseExpandAllAndLog
(
toolbox
)
{
let
inspector
=
toolbox
.
getPanel
(
"
inspector
"
)
;
let
initialNodeFront
=
inspector
.
selection
.
nodeFront
;
let
root
=
await
inspector
.
walker
.
getRootNode
(
)
;
dump
(
"
Select
expand
-
many
-
children
node
\
n
"
)
;
let
many
=
await
inspector
.
walker
.
querySelector
(
root
"
.
expand
-
many
-
children
"
)
;
await
selectNodeFront
(
inspector
many
)
;
dump
(
"
Expand
all
children
of
expand
-
many
-
children
\
n
"
)
;
let
test
=
runTest
(
"
custom
.
inspector
.
expandall
.
manychildren
"
)
;
await
inspector
.
markup
.
expandAll
(
many
)
;
test
.
done
(
)
;
dump
(
"
Collapse
all
children
of
expand
-
many
-
children
\
n
"
)
;
test
=
runTest
(
"
custom
.
inspector
.
collapseall
.
manychildren
"
)
;
await
inspector
.
markup
.
collapseAll
(
many
)
;
test
.
done
(
)
;
dump
(
"
Select
expand
-
balanced
node
\
n
"
)
;
let
balanced
=
await
inspector
.
walker
.
querySelector
(
root
"
.
expand
-
balanced
"
)
;
await
selectNodeFront
(
inspector
balanced
)
;
dump
(
"
Expand
all
children
of
expand
-
balanced
\
n
"
)
;
test
=
runTest
(
"
custom
.
inspector
.
expandall
.
balanced
"
)
;
await
inspector
.
markup
.
expandAll
(
balanced
)
;
test
.
done
(
)
;
dump
(
"
Collapse
all
children
of
expand
-
balanced
\
n
"
)
;
test
=
runTest
(
"
custom
.
inspector
.
collapseall
.
balanced
"
)
;
await
inspector
.
markup
.
collapseAll
(
balanced
)
;
test
.
done
(
)
;
await
selectNodeFront
(
inspector
initialNodeFront
)
;
}
