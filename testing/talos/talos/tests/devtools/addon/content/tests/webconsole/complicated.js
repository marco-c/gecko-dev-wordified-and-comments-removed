"
use
strict
"
;
const
{
openToolboxAndLog
closeToolboxAndLog
testSetup
testTeardown
COMPLICATED_URL
}
=
require
(
"
damp
-
test
/
tests
/
head
"
)
;
const
{
reloadConsoleAndLog
}
=
require
(
"
damp
-
test
/
tests
/
webconsole
/
webconsole
-
helpers
"
)
;
const
EXPECTED_MESSAGES
=
[
{
text
:
Uncaught
SyntaxError
:
missing
)
after
argument
list
count
:
2
}
{
text
:
Uncaught
ReferenceError
:
Bootloaddisableder
is
not
defined
count
:
4
stacktrace
:
true
}
{
text
:
Uncaught
DOMException
:
XMLHttpRequest
.
send
:
XMLHttpRequest
state
must
be
OPENED
}
]
;
module
.
exports
=
async
function
(
)
{
await
testSetup
(
COMPLICATED_URL
)
;
const
filtersToDisable
=
[
"
devtools
.
webconsole
.
filter
.
warn
"
"
devtools
.
webconsole
.
filter
.
info
"
"
devtools
.
webconsole
.
filter
.
log
"
"
devtools
.
webconsole
.
filter
.
debug
"
]
;
for
(
const
filter
of
filtersToDisable
)
{
Services
.
prefs
.
setBoolPref
(
filter
false
)
;
}
let
toolbox
=
await
openToolboxAndLog
(
"
complicated
.
webconsole
"
"
webconsole
"
)
;
await
reloadConsoleAndLog
(
"
complicated
"
toolbox
EXPECTED_MESSAGES
)
;
await
closeToolboxAndLog
(
"
complicated
.
webconsole
"
toolbox
)
;
for
(
const
filter
of
filtersToDisable
)
{
Services
.
prefs
.
clearUserPref
(
filter
)
;
}
await
testTeardown
(
)
;
}
;
