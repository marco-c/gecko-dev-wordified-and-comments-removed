"
use
strict
"
;
const
{
openToolbox
closeToolbox
testSetup
testTeardown
runTest
}
=
require
(
"
damp
-
test
/
tests
/
head
"
)
;
const
{
waitForConsoleOutputChildListChange
}
=
require
(
"
damp
-
test
/
tests
/
webconsole
/
webconsole
-
helpers
"
)
;
const
{
TRACER_FIELDS_INDEXES
}
=
require
(
"
resource
:
/
/
devtools
/
server
/
actors
/
tracer
.
js
"
)
;
const
TEST_URL
=
data
:
text
/
html
<
!
DOCTYPE
html
>
<
meta
charset
=
utf8
>
<
script
>
window
.
onclick
=
(
)
=
>
{
for
(
let
i
=
0
;
i
<
100000
;
i
+
+
)
{
a
(
)
;
b
(
)
;
}
c
(
)
;
}
;
function
a
(
)
{
}
;
function
b
(
)
{
}
;
function
c
(
)
{
}
;
<
/
script
>
;
module
.
exports
=
async
function
(
)
{
const
tab
=
await
testSetup
(
TEST_URL
)
;
const
messageManager
=
tab
.
linkedBrowser
.
messageManager
;
const
toolbox
=
await
openToolbox
(
"
options
"
)
;
const
{
resourceCommand
tracerCommand
}
=
toolbox
.
commands
;
const
{
promise
resolve
}
=
Promise
.
withResolvers
(
)
;
function
onAvailable
(
resources
)
{
const
tracedLastFunctionCall
=
resources
.
some
(
resource
=
>
{
const
{
frames
}
=
resource
;
return
(
frames
&
&
frames
.
some
(
framesArray
=
>
framesArray
[
TRACER_FIELDS_INDEXES
.
FRAME_NAME
]
=
=
"
c
"
)
)
;
}
)
;
if
(
tracedLastFunctionCall
)
{
resolve
(
)
;
}
}
await
resourceCommand
.
watchResources
(
[
resourceCommand
.
TYPES
.
JSTRACER_TRACE
]
{
onAvailable
}
)
;
await
tracerCommand
.
toggle
(
)
;
let
test
=
runTest
(
"
jstracer
.
server
-
performance
.
DAMP
"
)
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
content
.
document
.
documentElement
.
click
(
)
)
+
"
)
(
)
"
true
)
;
await
promise
;
test
.
done
(
)
;
await
tracerCommand
.
toggle
(
)
;
await
resourceCommand
.
unwatchResources
(
[
resourceCommand
.
TYPES
.
JSTRACER_TRACE
]
{
onAvailable
}
)
;
await
resourceCommand
.
clearResources
(
[
resourceCommand
.
TYPES
.
JSTRACER_TRACE
]
)
;
const
{
hud
}
=
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
tracerCommand
.
toggle
(
)
;
test
=
runTest
(
"
jstracer
.
ui
-
performance
.
DAMP
"
)
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
content
.
document
.
documentElement
.
click
(
)
)
+
"
)
(
)
"
true
)
;
await
waitForConsoleOutputChildListChange
(
hud
consoleOutput
=
>
{
const
messages
=
consoleOutput
.
querySelectorAll
(
"
.
message
-
body
"
)
;
return
(
messages
&
&
messages
[
messages
.
length
-
1
]
?
.
textContent
.
includes
(
"
c
"
)
)
;
}
)
;
test
.
done
(
)
;
await
closeToolbox
(
)
;
await
testTeardown
(
)
;
}
;
