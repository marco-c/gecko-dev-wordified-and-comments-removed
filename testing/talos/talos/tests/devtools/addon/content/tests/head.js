"
use
strict
"
;
const
Services
=
require
(
"
Services
"
)
;
const
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
const
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
const
BASE_DOMAIN
=
"
http
:
/
/
damp
.
top
.
com
"
;
const
PAGES_BASE_URL
=
BASE_DOMAIN
+
"
/
tests
/
devtools
/
addon
/
content
/
pages
/
"
;
exports
.
PAGES_BASE_URL
=
PAGES_BASE_URL
;
exports
.
SIMPLE_URL
=
PAGES_BASE_URL
+
"
simple
.
html
"
;
exports
.
COMPLICATED_URL
=
BASE_DOMAIN
+
"
/
tests
/
tp5n
/
bild
.
de
/
www
.
bild
.
de
/
index
.
html
"
;
let
damp
=
null
;
exports
.
initialize
=
function
(
_damp
)
{
damp
=
_damp
;
}
;
function
garbageCollect
(
)
{
return
damp
.
garbageCollect
(
)
;
}
exports
.
garbageCollect
=
garbageCollect
;
function
runTest
(
label
record
)
{
return
damp
.
runTest
(
label
record
)
;
}
exports
.
runTest
=
runTest
;
exports
.
testSetup
=
function
(
url
{
disableCache
}
=
{
}
)
{
if
(
disableCache
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
cache
.
disabled
"
true
)
;
}
return
damp
.
testSetup
(
url
)
;
}
;
exports
.
testTeardown
=
function
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
cache
.
disabled
"
false
)
;
return
damp
.
testTeardown
(
)
;
}
;
exports
.
logTestResult
=
function
(
name
value
)
{
damp
.
_results
.
push
(
{
name
value
}
)
;
}
;
function
getBrowserWindow
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
exports
.
getBrowserWindow
=
getBrowserWindow
;
function
getActiveTab
(
)
{
return
getBrowserWindow
(
)
.
gBrowser
.
selectedTab
;
}
exports
.
getActiveTab
=
getActiveTab
;
exports
.
getToolbox
=
async
function
(
)
{
let
tab
=
getActiveTab
(
)
;
let
target
=
await
TargetFactory
.
forTab
(
tab
)
;
return
gDevTools
.
getToolbox
(
target
)
;
}
;
async
function
waitForPendingPaints
(
toolbox
)
{
let
panel
=
toolbox
.
getCurrentPanel
(
)
;
let
window
=
panel
.
panelWin
|
|
panel
.
_frameWindow
|
|
panel
.
panelWindow
;
return
damp
.
waitForPendingPaints
(
window
)
;
}
exports
.
waitForPendingPaints
=
waitForPendingPaints
;
const
openToolbox
=
async
function
(
tool
=
"
webconsole
"
onLoad
)
{
let
tab
=
getActiveTab
(
)
;
let
target
=
await
TargetFactory
.
forTab
(
tab
)
;
let
onToolboxCreated
=
gDevTools
.
once
(
"
toolbox
-
created
"
)
;
let
showPromise
=
gDevTools
.
showToolbox
(
target
tool
)
;
let
toolbox
=
await
onToolboxCreated
;
if
(
typeof
onLoad
=
=
"
function
"
)
{
let
panel
=
await
toolbox
.
getPanelWhenReady
(
tool
)
;
await
onLoad
(
toolbox
panel
)
;
}
await
showPromise
;
return
toolbox
;
}
;
exports
.
openToolbox
=
openToolbox
;
exports
.
closeToolbox
=
async
function
(
)
{
let
tab
=
getActiveTab
(
)
;
let
target
=
await
TargetFactory
.
forTab
(
tab
)
;
await
target
.
client
.
waitForRequestsToSettle
(
)
;
await
gDevTools
.
closeToolbox
(
target
)
;
}
;
async
function
recordPendingPaints
(
name
toolbox
)
{
dump
(
Wait
for
pending
paints
on
'
{
name
}
'
\
n
)
;
const
test
=
runTest
(
{
name
}
.
settle
.
DAMP
false
)
;
await
waitForPendingPaints
(
toolbox
)
;
test
.
done
(
)
;
}
exports
.
recordPendingPaints
=
recordPendingPaints
;
exports
.
openToolboxAndLog
=
async
function
(
name
tool
onLoad
)
{
const
test
=
runTest
(
{
name
}
.
open
.
DAMP
)
;
let
toolbox
=
await
openToolbox
(
tool
onLoad
)
;
test
.
done
(
)
;
await
recordPendingPaints
(
{
name
}
.
open
toolbox
)
;
await
garbageCollect
(
)
;
return
toolbox
;
}
;
exports
.
closeToolboxAndLog
=
async
function
(
name
toolbox
)
{
let
{
target
}
=
toolbox
;
dump
(
Close
toolbox
on
'
{
name
}
'
\
n
)
;
await
target
.
client
.
waitForRequestsToSettle
(
)
;
let
test
=
runTest
(
{
name
}
.
close
.
DAMP
)
;
await
gDevTools
.
closeToolbox
(
target
)
;
test
.
done
(
)
;
}
;
exports
.
reloadPageAndLog
=
async
function
(
name
toolbox
onReload
)
{
dump
(
Reload
page
on
'
{
name
}
'
\
n
)
;
let
test
=
runTest
(
{
name
}
.
reload
.
DAMP
)
;
await
damp
.
reloadPage
(
onReload
)
;
test
.
done
(
)
;
await
recordPendingPaints
(
{
name
}
.
reload
toolbox
)
;
}
;
