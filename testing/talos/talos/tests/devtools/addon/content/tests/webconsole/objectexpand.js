"
use
strict
"
;
const
{
openToolbox
closeToolboxAndLog
getBrowserWindow
runTest
testSetup
testTeardown
SIMPLE_URL
}
=
require
(
"
chrome
:
/
/
damp
/
content
/
tests
/
head
"
)
;
module
.
exports
=
async
function
(
)
{
let
tab
=
await
testSetup
(
SIMPLE_URL
)
;
let
messageManager
=
tab
.
linkedBrowser
.
messageManager
;
let
toolbox
=
await
openToolbox
(
"
webconsole
"
)
;
let
webconsole
=
toolbox
.
getPanel
(
"
webconsole
"
)
;
let
onMessageReceived
=
new
Promise
(
resolve
=
>
{
function
receiveMessages
(
messages
)
{
for
(
let
m
of
messages
)
{
resolve
(
m
)
;
}
}
webconsole
.
hud
.
ui
.
once
(
"
new
-
messages
"
receiveMessages
)
;
}
)
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
function
(
)
{
addMessageListener
(
"
do
-
dir
"
function
(
)
{
content
.
console
.
dir
(
Array
.
from
(
{
length
:
1000
}
)
.
reduce
(
(
res
_
i
)
=
>
{
res
[
"
item_
"
+
i
]
=
i
;
return
res
;
}
{
}
)
)
;
}
)
;
}
)
+
"
)
(
)
"
true
)
;
messageManager
.
sendAsyncMessage
(
"
do
-
dir
"
)
;
let
test
=
runTest
(
"
console
.
objectexpand
"
)
;
await
onMessageReceived
;
const
tree
=
webconsole
.
hud
.
ui
.
outputNode
.
querySelector
(
"
.
dir
.
message
.
tree
"
)
;
if
(
tree
.
querySelectorAll
(
"
.
node
"
)
.
length
=
=
=
1
)
{
await
new
Promise
(
resolve
=
>
{
const
observer
=
new
(
getBrowserWindow
(
)
.
MutationObserver
)
(
mutations
=
>
{
resolve
(
mutations
)
;
observer
.
disconnect
(
)
;
}
)
;
observer
.
observe
(
tree
{
childList
:
true
}
)
;
}
)
;
}
test
.
done
(
)
;
await
closeToolboxAndLog
(
"
console
.
objectexpanded
"
toolbox
)
;
await
testTeardown
(
)
;
}
;
