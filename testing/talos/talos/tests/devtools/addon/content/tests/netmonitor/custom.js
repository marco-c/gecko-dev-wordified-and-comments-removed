"
use
strict
"
;
const
{
openToolboxAndLog
navigatePageAndLog
reloadPageAndLog
closeToolboxAndLog
runTest
testSetup
testTeardown
PAGES_BASE_URL
}
=
require
(
"
damp
-
test
/
tests
/
head
"
)
;
const
{
exportHar
waitForNetworkRequests
}
=
require
(
"
damp
-
test
/
tests
/
netmonitor
/
netmonitor
-
helpers
"
)
;
function
getExpectedRequests
(
{
bigFileRequests
postDataRequests
xhrRequests
dataRequests
}
)
{
const
expectedSyncCssRequests
=
10
expectedSyncJSRequests
=
10
;
const
expectedSyncIframeRequests
=
2
*
10
+
1
;
return
(
1
+
expectedSyncCssRequests
+
expectedSyncJSRequests
+
expectedSyncIframeRequests
+
bigFileRequests
+
postDataRequests
+
xhrRequests
+
dataRequests
)
;
}
function
getTestUrl
(
{
bigFileRequests
postDataRequests
xhrRequests
dataRequests
}
)
{
return
(
PAGES_BASE_URL
+
"
custom
/
netmonitor
/
index
.
html
"
+
?
bigFileRequests
=
{
bigFileRequests
}
+
&
postDataRequests
=
{
postDataRequests
}
+
&
xhrRequests
=
{
xhrRequests
}
+
&
dataRequests
=
{
dataRequests
}
)
;
}
function
waitForRequests
(
tab
)
{
const
{
messageManager
}
=
tab
.
linkedBrowser
;
const
onReady
=
new
Promise
(
done
=
>
{
messageManager
.
addMessageListener
(
"
ready
"
done
)
;
}
)
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
function
(
)
{
if
(
content
.
wrappedJSObject
.
isReady
)
{
sendAsyncMessage
(
"
ready
"
)
;
}
else
{
content
.
addEventListener
(
"
message
"
function
(
)
{
sendAsyncMessage
(
"
ready
"
)
;
}
)
;
}
}
)
+
"
)
(
)
"
true
)
;
return
onReady
;
}
module
.
exports
=
async
function
(
)
{
let
requests
=
{
bigFileRequests
:
20
postDataRequests
:
20
xhrRequests
:
50
dataRequests
:
0
}
;
let
tab
=
await
testSetup
(
getTestUrl
(
requests
)
)
;
let
expectedRequests
=
getExpectedRequests
(
requests
)
;
const
onReady
=
waitForRequests
(
tab
)
;
dump
(
"
Waiting
for
document
to
be
ready
and
have
sent
all
its
requests
\
n
"
)
;
await
onReady
;
let
toolbox
=
await
openToolboxAndLog
(
"
custom
.
netmonitor
"
"
netmonitor
"
)
;
dump
(
"
Waiting
for
idle
in
order
to
ensure
running
reload
with
a
waterfall
\
n
"
)
;
let
window
=
toolbox
.
getCurrentPanel
(
)
.
panelWin
;
await
new
Promise
(
done
=
>
{
window
.
requestIdleCallback
(
done
)
;
}
)
;
let
requestsDone
=
waitForNetworkRequests
(
"
custom
.
netmonitor
"
toolbox
expectedRequests
expectedRequests
)
;
await
reloadPageAndLog
(
"
custom
.
netmonitor
"
toolbox
)
;
await
requestsDone
;
await
exportHar
(
"
custom
.
netmonitor
"
toolbox
)
;
dump
(
"
Test
panel
performance
when
the
request
list
contains
many
requests
\
n
"
)
;
requests
=
{
bigFileRequests
:
0
postDataRequests
:
0
xhrRequests
:
0
dataRequests
:
2000
}
;
requestsDone
=
waitForNetworkRequests
(
"
custom
.
netmonitor
.
manyrequests
"
toolbox
expectedRequests
expectedRequests
)
;
await
navigatePageAndLog
(
getTestUrl
(
requests
)
"
custom
.
netmonitor
.
manyrequests
"
toolbox
)
;
await
requestsDone
;
let
test
=
runTest
(
"
custom
.
netmonitor
.
manyrequests
.
togglepanel
"
)
;
await
toolbox
.
selectTool
(
"
webconsole
"
)
;
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
test
.
done
(
)
;
await
closeToolboxAndLog
(
"
custom
.
netmonitor
"
toolbox
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
1000
)
)
;
await
testTeardown
(
)
;
}
;
