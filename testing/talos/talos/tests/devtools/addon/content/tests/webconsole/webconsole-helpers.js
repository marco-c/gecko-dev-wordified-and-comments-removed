"
use
strict
"
;
const
{
reloadPageAndLog
}
=
require
(
"
.
.
/
head
"
)
;
exports
.
reloadConsoleAndLog
=
async
function
(
label
toolbox
expectedMessages
)
{
const
onReload
=
async
function
(
)
{
const
{
hud
}
=
toolbox
.
getPanel
(
"
webconsole
"
)
;
const
expected
=
typeof
expectedMessages
=
=
=
"
number
"
?
[
{
text
:
"
"
count
:
expectedMessages
}
]
:
expectedMessages
;
let
logMissingMessagesTimeoutId
;
await
waitForConsoleOutputChildListChange
(
hud
consoleOutputEl
=
>
{
if
(
logMissingMessagesTimeoutId
)
{
clearTimeout
(
logMissingMessagesTimeoutId
)
;
logMissingMessagesTimeoutId
=
null
;
}
const
messages
=
Array
.
from
(
consoleOutputEl
.
querySelectorAll
(
"
.
message
"
)
)
;
const
missing
=
new
Map
(
expected
.
map
(
e
=
>
[
e
.
text
e
.
count
|
|
1
]
)
)
;
for
(
const
{
text
count
=
1
}
of
expected
)
{
let
found
=
0
;
for
(
const
message
of
messages
)
{
const
messageText
=
message
.
querySelector
(
"
.
message
-
body
"
)
.
innerText
;
if
(
messageText
.
includes
(
text
)
)
{
const
repeat
=
message
.
querySelector
(
"
.
message
-
repeats
"
)
?
.
innerText
?
.
trim
(
)
;
found
=
found
+
(
repeat
?
parseInt
(
repeat
)
:
1
)
;
}
}
const
allFound
=
found
>
=
count
;
if
(
allFound
)
{
missing
.
delete
(
text
)
;
}
else
{
missing
.
set
(
text
count
-
found
)
;
}
}
const
foundAllMessages
=
missing
.
size
=
=
0
;
if
(
!
foundAllMessages
)
{
logMissingMessagesTimeoutId
=
setTimeout
(
(
)
=
>
{
dump
(
[
TEST_LOG
]
Still
waiting
for
the
following
messages
:
\
n
{
Array
.
from
(
missing
.
entries
(
)
)
.
map
(
(
[
text
count
]
)
=
>
{
text
|
|
"
<
any
text
>
"
}
(
{
count
}
)
)
.
join
(
"
\
n
"
)
}
\
n
)
;
dump
(
"
-
-
-
\
n
"
)
;
}
3000
)
;
}
return
foundAllMessages
;
}
)
;
}
;
await
reloadPageAndLog
(
label
+
"
.
webconsole
"
toolbox
onReload
)
;
}
;
async
function
waitForConsoleOutputChildListChange
(
hud
predicate
)
{
const
{
window
document
}
=
hud
.
ui
;
const
webConsoleOutputEl
=
document
.
querySelector
(
"
.
webconsole
-
output
"
)
;
await
new
Promise
(
resolve
=
>
{
const
observer
=
new
window
.
MutationObserver
(
(
mutationsList
observer
)
=
>
{
if
(
predicate
(
webConsoleOutputEl
)
)
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
}
)
;
observer
.
observe
(
webConsoleOutputEl
{
childList
:
true
}
)
;
}
)
;
}
exports
.
waitForConsoleOutputChildListChange
=
waitForConsoleOutputChildListChange
;
