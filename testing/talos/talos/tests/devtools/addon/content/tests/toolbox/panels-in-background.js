"
use
strict
"
;
const
{
EVENTS
}
=
require
(
"
devtools
/
client
/
netmonitor
/
src
/
constants
"
)
;
const
{
openToolbox
closeToolbox
reloadPageAndLog
testSetup
testTeardown
runTest
PAGES_BASE_URL
}
=
require
(
"
damp
-
test
/
tests
/
head
"
)
;
const
{
createContext
selectSource
waitUntil
waitForSources
}
=
require
(
"
.
.
/
debugger
/
debugger
-
helpers
"
)
;
module
.
exports
=
async
function
(
)
{
await
testSetup
(
PAGES_BASE_URL
+
"
custom
/
panels
-
in
-
background
/
index
.
html
"
)
;
let
toolbox
=
await
openToolbox
(
"
webconsole
"
)
;
let
monitor
=
await
toolbox
.
selectTool
(
"
netmonitor
"
)
;
const
debuggerPanel
=
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
const
dbg
=
await
createContext
(
debuggerPanel
)
;
dump
(
"
Select
and
pretty
print
a
source
\
n
"
)
;
await
selectSource
(
dbg
"
eval
-
script
-
0
.
js
"
)
;
const
prettyPrintButton
=
await
waitUntil
(
(
)
=
>
{
return
dbg
.
win
.
document
.
querySelector
(
"
.
source
-
footer
.
prettyPrint
"
)
;
}
)
;
prettyPrintButton
.
click
(
)
;
await
toolbox
.
selectTool
(
"
options
"
)
;
let
test
=
runTest
(
"
panelsInBackground
.
redux
-
updates
.
DAMP
"
)
;
let
payloadReady
=
waitForPayload
(
601
monitor
.
panelWin
)
;
await
reloadPageAndLog
(
"
panelsInBackground
"
toolbox
)
;
await
payloadReady
;
await
waitForSources
(
dbg
2001
)
;
test
.
done
(
)
;
await
toolbox
.
selectTool
(
"
jsdebugger
"
)
;
const
sources
=
dbg
.
selectors
.
getSourceList
(
dbg
.
getState
(
)
)
;
await
dbg
.
actions
.
closeTabsForSources
(
sources
)
;
await
closeToolbox
(
)
;
await
testTeardown
(
)
;
}
;
function
waitForPayload
(
count
panelWin
)
{
return
new
Promise
(
resolve
=
>
{
let
payloadReady
=
0
;
function
onPayloadReady
(
)
{
payloadReady
+
+
;
maybeResolve
(
)
;
}
function
maybeResolve
(
)
{
if
(
payloadReady
>
=
count
)
{
panelWin
.
api
.
off
(
EVENTS
.
PAYLOAD_READY
onPayloadReady
)
;
resolve
(
)
;
}
}
panelWin
.
api
.
on
(
EVENTS
.
PAYLOAD_READY
onPayloadReady
)
;
}
)
;
}
