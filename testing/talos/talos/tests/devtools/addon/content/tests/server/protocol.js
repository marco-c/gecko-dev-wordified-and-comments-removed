"
use
strict
"
;
const
{
openToolbox
closeToolbox
testSetup
testTeardown
runTest
SIMPLE_URL
}
=
require
(
"
damp
-
test
/
tests
/
head
"
)
;
const
protocol
=
require
(
"
devtools
/
shared
/
protocol
"
)
;
const
{
FrontClassWithSpec
}
=
protocol
;
const
{
dampTestSpec
}
=
require
(
"
damp
-
test
/
tests
/
server
/
spec
"
)
;
const
ATTRIBUTES
=
10
;
const
STRING_SIZE
=
1000
;
const
ARRAY_SIZE
=
50
;
const
REPEAT
=
300
;
class
DampTestFront
extends
FrontClassWithSpec
(
dampTestSpec
)
{
constructor
(
client
)
{
super
(
client
)
;
this
.
formAttributeName
=
"
dampTestActor
"
;
}
}
protocol
.
registerFront
(
DampTestFront
)
;
module
.
exports
=
async
function
(
)
{
let
tab
=
await
testSetup
(
SIMPLE_URL
)
;
let
messageManager
=
tab
.
linkedBrowser
.
messageManager
;
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
encodeURIComponent
(
function
(
)
{
const
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
)
;
const
{
ActorRegistry
}
=
require
(
"
devtools
/
server
/
actors
/
utils
/
actor
-
registry
"
)
;
ActorRegistry
.
registerModule
(
"
damp
-
test
/
tests
/
server
/
actor
.
js
"
{
prefix
:
"
dampTest
"
constructor
:
"
DampTestActor
"
type
:
{
target
:
true
}
}
)
;
}
)
+
"
)
(
)
"
true
)
;
let
bigString
=
"
"
;
for
(
let
i
=
0
;
i
<
STRING_SIZE
;
i
+
+
)
{
bigString
+
=
"
x
"
;
}
let
bigObject
=
{
}
;
for
(
let
i
=
0
;
i
<
ATTRIBUTES
;
i
+
+
)
{
bigObject
[
"
attribute
-
"
+
i
]
=
bigString
;
}
let
bigArray
=
Array
.
from
(
{
length
:
ARRAY_SIZE
}
(
_
i
)
=
>
bigObject
)
;
let
toolbox
=
await
openToolbox
(
"
options
"
)
;
let
{
target
}
=
toolbox
;
let
front
=
await
target
.
getFront
(
"
dampTest
"
)
;
let
test
=
runTest
(
"
server
.
protocoljs
.
DAMP
"
)
;
for
(
let
i
=
0
;
i
<
REPEAT
;
i
+
+
)
{
let
onEvent
=
front
.
once
(
"
testEvent
"
)
;
await
front
.
testMethod
(
bigArray
{
option
:
bigArray
}
ARRAY_SIZE
)
;
await
onEvent
;
}
test
.
done
(
)
;
await
closeToolbox
(
)
;
await
testTeardown
(
)
;
}
;
