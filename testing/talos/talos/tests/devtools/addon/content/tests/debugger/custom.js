"
use
strict
"
;
const
{
closeToolboxAndLog
garbageCollect
runTest
testSetup
testTeardown
PAGES_BASE_URL
waitForDOMElement
}
=
require
(
"
.
.
/
head
"
)
;
const
{
createContext
findSource
getCMEditor
hoverOnToken
openDebuggerAndLog
pauseDebugger
reloadDebuggerAndLog
removeBreakpoints
resume
selectSource
step
waitForSource
waitForText
waitUntil
addBreakpoint
waitForPaused
waitForState
isCm6Enabled
}
=
require
(
"
.
/
debugger
-
helpers
"
)
;
const
IFRAME_BASE_URL
=
"
http
:
/
/
damp
.
top
.
com
/
tests
/
devtools
/
addon
/
content
/
pages
/
"
;
const
EXPECTED
=
{
sources
:
1149
file
:
"
App
.
js
"
sourceURL
:
{
IFRAME_BASE_URL
}
custom
/
debugger
/
app
-
build
/
static
/
js
/
App
.
js
text
:
"
import
React
{
Component
}
from
'
react
'
;
"
threadsCount
:
2
}
;
const
EXPECTED_FUNCTION
=
"
window
.
hitBreakpoint
(
)
"
;
const
TEST_URL
=
PAGES_BASE_URL
+
"
custom
/
debugger
/
app
-
build
/
index
.
html
"
;
const
MINIFIED_URL
=
{
IFRAME_BASE_URL
}
custom
/
debugger
/
app
-
build
/
static
/
js
/
minified
.
js
;
const
STEP_TESTS
=
[
{
stepCount
:
1
location
:
{
line
:
22
file
:
"
App
.
js
"
}
key
:
"
stepInNewSource
"
stepType
:
"
stepIn
"
}
{
stepCount
:
2
location
:
{
line
:
10194
file
:
"
js
/
step
-
in
-
test
.
js
"
}
key
:
"
stepIn
"
stepType
:
"
stepIn
"
}
{
stepCount
:
2
location
:
{
line
:
16
file
:
"
js
/
step
-
over
-
test
.
js
"
}
key
:
"
stepOver
"
stepType
:
"
stepOver
"
}
{
stepCount
:
2
location
:
{
line
:
998
file
:
"
js
/
step
-
out
-
test
.
js
"
}
key
:
"
stepOut
"
stepType
:
"
stepOut
"
}
]
;
module
.
exports
=
async
function
(
)
{
const
tab
=
await
testSetup
(
TEST_URL
{
disableCache
:
true
}
)
;
const
toolbox
=
await
openDebuggerAndLog
(
"
custom
"
EXPECTED
)
;
dump
(
"
Waiting
for
debugger
panel
\
n
"
)
;
const
panel
=
await
toolbox
.
getPanelWhenReady
(
"
jsdebugger
"
)
;
dump
(
"
Creating
context
\
n
"
)
;
const
dbg
=
await
createContext
(
panel
)
;
await
selectSource
(
dbg
EXPECTED
.
file
)
;
await
reloadDebuggerAndLog
(
"
custom
"
toolbox
EXPECTED
)
;
await
pauseDebuggerAndLog
(
dbg
tab
EXPECTED_FUNCTION
)
;
await
stepDebuggerAndLog
(
dbg
tab
EXPECTED_FUNCTION
STEP_TESTS
)
;
await
testProjectSearch
(
dbg
tab
)
;
await
testPreview
(
dbg
tab
EXPECTED_FUNCTION
)
;
await
testOpeningLargeMinifiedFile
(
dbg
)
;
await
testPrettyPrint
(
dbg
toolbox
)
;
await
testBigBundle
(
dbg
tab
)
;
await
closeToolboxAndLog
(
"
custom
.
jsdebugger
"
toolbox
)
;
await
testTeardown
(
)
;
}
;
async
function
pauseDebuggerAndLog
(
dbg
tab
testFunction
)
{
const
pauseLocation
=
{
line
:
22
file
:
"
App
.
js
"
}
;
dump
(
"
Pausing
debugger
\
n
"
)
;
let
test
=
runTest
(
"
custom
.
jsdebugger
.
pause
.
DAMP
"
)
;
await
pauseDebugger
(
dbg
tab
testFunction
pauseLocation
)
;
test
.
done
(
)
;
await
removeBreakpoints
(
dbg
)
;
await
resume
(
dbg
)
;
await
garbageCollect
(
)
;
}
async
function
stepDebuggerAndLog
(
dbg
tab
testFunction
stepTests
)
{
for
(
const
stepTest
of
stepTests
)
{
await
pauseDebugger
(
dbg
tab
testFunction
stepTest
.
location
)
;
const
test
=
runTest
(
custom
.
jsdebugger
.
{
stepTest
.
key
}
.
DAMP
)
;
for
(
let
i
=
0
;
i
<
stepTest
.
stepCount
;
i
+
+
)
{
await
step
(
dbg
stepTest
.
stepType
)
;
}
test
.
done
(
)
;
await
removeBreakpoints
(
dbg
)
;
await
resume
(
dbg
)
;
await
garbageCollect
(
)
;
}
}
async
function
testProjectSearch
(
dbg
)
{
dump
(
"
Executing
project
search
\
n
"
)
;
const
test
=
runTest
(
custom
.
jsdebugger
.
project
-
search
.
DAMP
)
;
const
firstSearchResultTest
=
runTest
(
custom
.
jsdebugger
.
project
-
search
.
first
-
search
-
result
.
DAMP
)
;
await
dbg
.
actions
.
setPrimaryPaneTab
(
"
project
"
)
;
await
dbg
.
actions
.
setActiveSearch
(
"
project
"
)
;
const
searchInput
=
await
waitForDOMElement
(
dbg
.
win
.
document
.
querySelector
(
"
body
"
)
"
.
project
-
text
-
search
.
search
-
field
input
"
)
;
searchInput
.
focus
(
)
;
searchInput
.
value
=
"
retur
"
;
const
key
=
"
n
"
;
searchInput
.
dispatchEvent
(
new
dbg
.
win
.
KeyboardEvent
(
"
keydown
"
{
bubbles
:
true
cancelable
:
true
view
:
dbg
.
win
charCode
:
key
.
charCodeAt
(
0
)
}
)
)
;
searchInput
.
dispatchEvent
(
new
dbg
.
win
.
KeyboardEvent
(
"
keyup
"
{
bubbles
:
true
cancelable
:
true
view
:
dbg
.
win
charCode
:
key
.
charCodeAt
(
0
)
}
)
)
;
searchInput
.
dispatchEvent
(
new
dbg
.
win
.
KeyboardEvent
(
"
keypress
"
{
bubbles
:
true
cancelable
:
true
view
:
dbg
.
win
charCode
:
key
.
charCodeAt
(
0
)
}
)
)
;
await
waitForDOMElement
(
dbg
.
win
.
document
.
querySelector
(
"
body
"
)
"
.
project
-
text
-
search
.
tree
-
node
.
result
"
)
;
firstSearchResultTest
.
done
(
)
;
await
waitUntil
(
(
)
=
>
{
return
!
dbg
.
win
.
document
.
querySelector
(
"
.
project
-
text
-
search
.
search
-
field
.
loader
.
spin
"
)
;
}
)
;
await
dbg
.
actions
.
closeActiveSearch
(
)
;
test
.
done
(
)
;
await
garbageCollect
(
)
;
}
async
function
testPreview
(
dbg
tab
testFunction
)
{
dump
(
"
Executing
preview
test
.
.
.
\
n
"
)
;
const
pauseLocation
=
{
line
:
22
file
:
"
App
.
js
"
}
;
let
test
=
runTest
(
"
custom
.
jsdebugger
.
preview
.
DAMP
"
)
;
await
pauseDebugger
(
dbg
tab
testFunction
pauseLocation
)
;
await
hoverOnToken
(
dbg
"
window
.
hitBreakpoint
"
"
window
"
)
;
test
.
done
(
)
;
await
removeBreakpoints
(
dbg
)
;
await
resume
(
dbg
)
;
await
garbageCollect
(
)
;
}
async
function
testOpeningLargeMinifiedFile
(
dbg
)
{
dump
(
"
Executing
opening
large
minified
test
.
.
.
\
n
"
)
;
const
fileFirstMinifiedChars
=
(
(
)
=
>
{
var
e
t
n
r
o
=
{
82603
;
dump
(
"
Open
minified
.
js
(
large
minified
file
)
\
n
"
)
;
const
fullTest
=
runTest
(
"
custom
.
jsdebugger
.
open
-
large
-
minified
-
file
.
full
-
selection
.
DAMP
"
)
;
const
test
=
runTest
(
"
custom
.
jsdebugger
.
open
-
large
-
minified
-
file
.
DAMP
"
)
;
const
onSelected
=
selectSource
(
dbg
MINIFIED_URL
)
;
await
waitForText
(
dbg
fileFirstMinifiedChars
)
;
test
.
done
(
)
;
await
onSelected
;
fullTest
.
done
(
)
;
await
dbg
.
actions
.
closeTabs
(
[
findSource
(
dbg
MINIFIED_URL
)
]
)
;
await
dbg
.
actions
.
clearSelectedLocation
(
)
;
await
garbageCollect
(
)
;
}
async
function
testPrettyPrint
(
dbg
toolbox
)
{
const
formattedFileUrl
=
{
MINIFIED_URL
}
:
formatted
;
const
filePrettyChars
=
"
82603
:
(
e
t
n
)
=
>
{
\
n
"
;
dump
(
"
Select
minified
file
\
n
"
)
;
await
selectSource
(
dbg
MINIFIED_URL
)
;
dump
(
"
Wait
until
CodeMirror
highlighting
is
done
\
n
"
)
;
const
cm
=
getCMEditor
(
dbg
)
.
codeMirror
;
await
waitUntil
(
(
)
=
>
{
if
(
isCm6Enabled
(
)
)
{
return
true
;
}
return
cm
.
doc
.
highlightFrontier
=
=
=
2
;
}
)
;
const
prettyPrintButton
=
await
waitUntil
(
(
)
=
>
{
return
dbg
.
win
.
document
.
querySelector
(
"
.
source
-
footer
.
prettyPrint
.
active
"
)
;
}
)
;
dump
(
"
Click
pretty
-
print
button
\
n
"
)
;
const
test
=
runTest
(
"
custom
.
jsdebugger
.
pretty
-
print
.
DAMP
"
)
;
prettyPrintButton
.
click
(
)
;
await
waitForSource
(
dbg
formattedFileUrl
)
;
await
waitForText
(
dbg
filePrettyChars
)
;
test
.
done
(
)
;
await
addBreakpoint
(
dbg
776
formattedFileUrl
)
;
const
onPaused
=
waitForPaused
(
dbg
)
;
const
reloadAndPauseInPrettyPrintedFileTest
=
runTest
(
"
custom
.
jsdebugger
.
pretty
-
print
.
reload
-
and
-
pause
.
DAMP
"
)
;
await
reloadDebuggerAndLog
(
"
custom
.
pretty
-
print
"
toolbox
{
sources
:
1105
sourceURL
:
formattedFileUrl
text
:
filePrettyChars
threadsCount
:
EXPECTED
.
threadsCount
}
)
;
await
onPaused
;
await
waitForState
(
dbg
function
(
state
)
{
const
breakpoints
=
dbg
.
selectors
.
getBreakpointsAtLine
(
state
776
)
;
const
source
=
findSource
(
dbg
formattedFileUrl
)
;
return
(
breakpoints
?
.
length
>
0
&
&
breakpoints
[
0
]
.
location
.
source
=
=
source
)
;
}
"
wait
for
pretty
print
breakpoint
"
)
;
reloadAndPauseInPrettyPrintedFileTest
.
done
(
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
0
)
)
;
await
removeBreakpoints
(
dbg
)
;
await
resume
(
dbg
)
;
await
dbg
.
actions
.
clearSelectedLocation
(
)
;
const
sources
=
dbg
.
selectors
.
getSourceList
(
dbg
.
getState
(
)
)
;
await
dbg
.
actions
.
closeTabs
(
sources
)
;
await
garbageCollect
(
)
;
}
async
function
testBigBundle
(
dbg
tab
)
{
const
EXPECTED
=
{
sources
:
1149
file
:
"
big
-
bundle
/
index
.
js
"
sourceURL
:
{
PAGES_BASE_URL
}
custom
/
debugger
/
app
-
build
/
static
/
js
/
big
-
bundle
/
index
.
js
text
:
"
import
'
.
/
minified
.
js
'
;
"
threadsCount
:
2
}
;
const
EXPECTED_FUNCTION
=
"
window
.
hitBreakpointInBigBundle
(
)
"
;
const
STEP_TESTS
=
[
{
stepCount
:
1
location
:
{
line
:
7
file
:
"
big
-
bundle
/
index
.
js
"
}
key
:
"
stepInNewSource
.
big
-
bundle
"
stepType
:
"
stepIn
"
}
{
stepCount
:
2
location
:
{
line
:
10194
file
:
"
big
-
bundle
/
step
-
in
-
test
.
js
"
}
key
:
"
stepIn
.
big
-
bundle
"
stepType
:
"
stepIn
"
}
{
stepCount
:
2
location
:
{
line
:
16
file
:
"
big
-
bundle
/
step
-
over
-
test
.
js
"
}
key
:
"
stepOver
.
big
-
bundle
"
stepType
:
"
stepOver
"
}
{
stepCount
:
2
location
:
{
line
:
998
file
:
"
big
-
bundle
/
step
-
out
-
test
.
js
"
}
key
:
"
stepOut
.
big
-
bundle
"
stepType
:
"
stepOut
"
}
]
;
await
waitForSource
(
dbg
EXPECTED
.
sourceURL
)
;
await
selectSource
(
dbg
EXPECTED
.
file
)
;
await
stepDebuggerAndLog
(
dbg
tab
EXPECTED_FUNCTION
STEP_TESTS
)
;
const
sources
=
dbg
.
selectors
.
getSourceList
(
dbg
.
getState
(
)
)
;
await
dbg
.
actions
.
closeTabs
(
sources
)
;
await
garbageCollect
(
)
;
}
