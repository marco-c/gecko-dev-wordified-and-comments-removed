"
use
strict
"
;
const
{
gBrowser
MozillaFileLogger
requestIdleCallback
}
=
dampWindow
;
const
{
AddonManager
}
=
require
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
const
DampLoadParentModule
=
require
(
"
damp
-
test
/
actors
/
DampLoadParent
.
jsm
"
)
;
const
DAMP_TESTS
=
require
(
"
damp
-
test
/
damp
-
tests
.
js
"
)
;
const
DEBUG_ALLOCATIONS
=
Services
.
env
.
get
(
"
DEBUG_DEVTOOLS_ALLOCATIONS
"
)
;
const
DEBUG_SCREENSHOTS
=
Services
.
env
.
get
(
"
DEBUG_DEVTOOLS_SCREENSHOTS
"
)
;
const
TEST_TIMEOUT
=
5
*
60000
;
function
getMostRecentBrowserWindow
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
function
Damp
(
)
{
}
Damp
.
prototype
=
{
async
garbageCollect
(
)
{
dump
(
"
Garbage
collect
\
n
"
)
;
let
startTime
=
Cu
.
now
(
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceGC
(
)
;
await
new
Promise
(
done
=
>
setTimeout
(
done
0
)
)
;
}
ChromeUtils
.
addProfilerMarker
(
"
DAMP
"
{
startTime
category
:
"
Test
"
}
"
GC
"
)
;
}
async
ensureTalosParentProfiler
(
)
{
async
function
getTalosParentProfiler
(
)
{
try
{
const
{
TalosParentProfiler
}
=
require
(
"
resource
:
/
/
talos
-
powers
/
TalosParentProfiler
.
jsm
"
)
;
return
TalosParentProfiler
;
}
catch
(
err
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
return
getTalosParentProfiler
(
)
;
}
}
this
.
TalosParentProfiler
=
await
getTalosParentProfiler
(
)
;
}
async
screenshot
(
label
)
{
const
win
=
this
.
_win
;
const
canvas
=
win
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
canvas
"
)
;
const
context
=
canvas
.
getContext
(
"
2d
"
)
;
canvas
.
width
=
win
.
innerWidth
;
canvas
.
height
=
win
.
innerHeight
;
context
.
drawWindow
(
win
0
0
canvas
.
width
canvas
.
height
"
white
"
)
;
const
imgURL
=
canvas
.
toDataURL
(
)
;
const
url
=
data
:
text
/
html
<
title
>
{
label
}
<
/
title
>
<
h1
>
{
label
}
<
/
h1
>
<
img
width
=
"
100
%
"
height
=
"
100
%
"
src
=
"
{
imgURL
}
"
/
>
;
this
.
_win
.
gBrowser
.
addTab
(
url
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
runTest
(
label
record
=
true
)
{
if
(
DEBUG_ALLOCATIONS
)
{
if
(
!
this
.
allocationTracker
)
{
this
.
allocationTracker
=
this
.
startAllocationTracker
(
)
;
}
this
.
allocationTracker
.
flushAllocations
(
)
;
}
let
start
=
Cu
.
now
(
)
;
return
{
done
:
(
)
=
>
{
let
end
=
Cu
.
now
(
)
;
let
duration
=
end
-
start
;
ChromeUtils
.
addProfilerMarker
(
"
DAMP
"
{
startTime
:
start
category
:
"
Test
"
}
label
)
;
if
(
record
)
{
this
.
_results
.
push
(
{
name
:
label
value
:
duration
}
)
;
}
else
{
dump
(
'
{
label
}
'
took
{
duration
}
ms
.
\
n
)
;
}
if
(
DEBUG_ALLOCATIONS
=
=
"
normal
"
&
&
record
)
{
this
.
_results
.
push
(
{
name
:
label
+
"
.
allocations
"
value
:
this
.
allocationTracker
.
countAllocations
(
)
}
)
;
}
else
if
(
DEBUG_ALLOCATIONS
=
=
"
verbose
"
)
{
this
.
allocationTracker
.
logAllocationSites
(
)
;
}
if
(
DEBUG_SCREENSHOTS
)
{
this
.
screenshot
(
label
)
;
}
}
}
;
}
async
addTab
(
url
)
{
let
tab
=
(
this
.
_win
.
gBrowser
.
selectedTab
=
this
.
_win
.
gBrowser
.
addTrustedTab
(
url
{
skipAnimation
:
true
}
)
)
;
let
browser
=
tab
.
linkedBrowser
;
await
this
.
_awaitBrowserLoaded
(
browser
)
;
return
tab
;
}
async
waitForPendingPaints
(
window
)
{
let
utils
=
window
.
windowUtils
;
let
startTime
=
Cu
.
now
(
)
;
while
(
utils
.
isMozAfterPaintPending
)
{
await
new
Promise
(
done
=
>
{
window
.
addEventListener
(
"
MozAfterPaint
"
function
listener
(
)
{
ChromeUtils
.
addProfilerMarker
(
"
DAMP
"
{
category
:
"
Test
"
}
"
pending
paint
"
)
;
done
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
ChromeUtils
.
addProfilerMarker
(
"
DAMP
"
{
startTime
category
:
"
Test
"
}
"
pending
paints
"
)
;
}
reloadPage
(
onReload
)
{
return
new
Promise
(
resolve
=
>
{
let
browser
=
gBrowser
.
selectedBrowser
;
if
(
typeof
onReload
=
=
"
function
"
)
{
onReload
(
)
.
then
(
resolve
)
;
}
else
{
resolve
(
this
.
_awaitBrowserLoaded
(
browser
)
)
;
}
browser
.
reload
(
)
;
}
)
;
}
async
testSetup
(
url
)
{
let
tab
=
await
this
.
addTab
(
url
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
100
)
;
}
)
;
return
tab
;
}
async
testTeardown
(
url
)
{
this
.
_win
.
gBrowser
.
removeCurrentTab
(
{
animate
:
false
}
)
;
await
this
.
garbageCollect
(
)
;
let
duration
=
Math
.
round
(
Cu
.
now
(
)
-
this
.
_startTime
)
;
dump
(
{
this
.
_currentTest
}
took
{
duration
}
ms
.
\
n
)
;
this
.
_runNextTest
(
)
;
}
_win
:
undefined
_dampTab
:
undefined
_results
:
[
]
_nextTestIndex
:
0
_tests
:
[
]
_onSequenceComplete
:
0
_timeout
:
null
_startTime
:
null
_currentTest
:
null
_runNextTest
(
)
{
clearTimeout
(
this
.
_timeout
)
;
if
(
this
.
_nextTestIndex
>
=
this
.
_tests
.
length
)
{
this
.
_onSequenceComplete
(
)
;
return
;
}
let
test
=
this
.
_tests
[
this
.
_nextTestIndex
+
+
]
;
this
.
_startTime
=
Cu
.
now
(
)
;
this
.
_currentTest
=
test
;
dump
(
Loading
test
'
{
test
}
'
\
n
)
;
let
testMethod
=
require
(
damp
-
test
/
tests
/
{
test
}
)
;
this
.
_timeout
=
setTimeout
(
(
)
=
>
{
this
.
error
(
"
Test
timed
out
"
)
;
}
TEST_TIMEOUT
)
;
dump
(
Executing
test
'
{
test
}
'
\
n
)
;
let
promise
=
testMethod
(
)
;
if
(
promise
&
&
typeof
promise
.
catch
=
=
"
function
"
)
{
promise
.
catch
(
e
=
>
{
this
.
exception
(
e
)
;
}
)
;
}
}
_doSequence
(
tests
onComplete
)
{
this
.
_tests
=
tests
;
this
.
_onSequenceComplete
=
onComplete
;
this
.
_results
=
[
]
;
this
.
_nextTestIndex
=
0
;
this
.
_runNextTest
(
)
;
}
_log
(
str
)
{
if
(
MozillaFileLogger
&
&
MozillaFileLogger
.
log
)
{
MozillaFileLogger
.
log
(
str
)
;
}
dump
(
str
)
;
}
_logLine
(
str
)
{
return
this
.
_log
(
str
+
"
\
n
"
)
;
}
_reportAllResults
(
)
{
const
testNames
=
[
]
;
const
testResults
=
[
]
;
let
out
=
"
"
;
for
(
const
i
in
this
.
_results
)
{
const
res
=
this
.
_results
[
i
]
;
const
disp
=
[
]
.
concat
(
res
.
value
)
.
map
(
function
(
a
)
{
return
isNaN
(
a
)
?
-
1
:
a
.
toFixed
(
1
)
;
}
)
.
join
(
"
"
)
;
out
+
=
res
.
name
+
"
:
"
+
disp
+
"
\
n
"
;
if
(
!
Array
.
isArray
(
res
.
value
)
)
{
testNames
.
push
(
res
.
name
)
;
testResults
.
push
(
res
.
value
)
;
}
}
this
.
_log
(
"
\
n
"
+
out
)
;
if
(
DEBUG_SCREENSHOTS
)
{
dump
(
"
All
tests
are
finished
please
review
the
screenshots
and
close
the
browser
manually
.
\
n
"
)
;
return
;
}
if
(
this
.
testDone
)
{
this
.
testDone
(
{
testResults
testNames
}
)
;
}
else
{
}
}
_doneInternal
(
)
{
if
(
this
.
_done
)
{
return
;
}
this
.
_done
=
true
;
if
(
this
.
allocationTracker
)
{
this
.
allocationTracker
.
stop
(
)
;
this
.
allocationTracker
=
null
;
}
this
.
_win
.
gBrowser
.
selectedTab
=
this
.
_dampTab
;
if
(
this
.
_results
)
{
this
.
_logLine
(
"
DAMP_RESULTS_JSON
=
"
+
JSON
.
stringify
(
this
.
_results
)
)
;
this
.
_reportAllResults
(
)
;
}
ChromeUtils
.
addProfilerMarker
(
"
DAMP
"
{
startTime
:
this
.
_startTimestamp
category
:
"
Test
"
}
)
;
this
.
TalosParentProfiler
.
pause
(
)
;
this
.
_unregisterDampLoadActors
(
)
;
}
startAllocationTracker
(
)
{
const
{
allocationTracker
}
=
require
(
"
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
"
)
;
return
allocationTracker
(
)
;
}
error
(
message
)
{
dump
(
"
TEST
-
UNEXPECTED
-
FAIL
|
damp
|
"
)
;
if
(
this
.
_currentTest
)
{
dump
(
this
.
_currentTest
+
"
:
"
)
;
}
dump
(
message
+
"
\
n
"
)
;
this
.
_tests
=
[
]
;
this
.
_results
=
null
;
this
.
_doneInternal
(
)
;
}
exception
(
e
)
{
const
str
=
"
Exception
:
"
+
(
e
?
.
message
|
|
e
)
+
"
\
n
"
+
(
e
?
.
stack
|
|
"
No
stack
"
)
;
this
.
error
(
str
)
;
}
async
waitBeforeRunningTests
(
)
{
if
(
!
AddonManager
.
isReady
)
{
let
onAddonManagerReady
=
new
Promise
(
resolve
=
>
{
let
listener
=
{
onStartup
(
)
{
AddonManager
.
removeManagerListener
(
listener
)
;
resolve
(
)
;
}
onShutdown
(
)
{
}
}
;
AddonManager
.
addManagerListener
(
listener
)
;
}
)
;
await
onAddonManagerReady
;
}
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
1500
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
requestIdleCallback
(
resolve
{
timeout
:
15000
}
)
;
}
)
;
await
this
.
ensureTalosParentProfiler
(
)
;
await
this
.
garbageCollect
(
)
;
}
startTest
(
)
{
let
promise
=
new
Promise
(
resolve
=
>
{
this
.
testDone
=
resolve
;
}
)
;
try
{
this
.
_done
=
false
;
this
.
_registerDampLoadActors
(
)
;
this
.
_win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
this
.
_dampTab
=
this
.
_win
.
gBrowser
.
selectedTab
;
this
.
_win
.
gBrowser
.
selectedBrowser
.
focus
(
)
;
let
filter
=
Services
.
prefs
.
getCharPref
(
"
talos
.
subtests
"
"
"
)
;
const
suite
=
Services
.
prefs
.
getCharPref
(
"
talos
.
damp
.
suite
"
"
"
)
;
let
testSuite
;
if
(
suite
=
=
=
"
all
"
)
{
testSuite
=
Object
.
values
(
DAMP_TESTS
)
.
flat
(
)
;
}
else
{
testSuite
=
DAMP_TESTS
[
suite
]
;
if
(
!
testSuite
)
{
this
.
error
(
Unable
to
find
any
test
suite
matching
'
{
suite
}
'
)
;
}
}
let
tests
=
testSuite
.
filter
(
test
=
>
!
test
.
disabled
)
.
filter
(
test
=
>
test
.
name
.
includes
(
filter
)
)
;
if
(
tests
.
length
=
=
=
0
)
{
this
.
error
(
Unable
to
find
any
test
matching
'
{
filter
}
'
)
;
}
let
topWindow
=
getMostRecentBrowserWindow
(
)
;
if
(
topWindow
.
coldRunDAMPDone
)
{
tests
=
tests
.
filter
(
test
=
>
!
test
.
cold
)
;
}
else
{
topWindow
.
coldRunDAMPDone
=
true
;
}
let
sequenceArray
=
[
]
;
for
(
let
test
of
tests
)
{
sequenceArray
.
push
(
test
.
path
)
;
}
this
.
waitBeforeRunningTests
(
)
.
then
(
(
)
=
>
{
this
.
_startTimestamp
=
Cu
.
now
(
)
;
this
.
TalosParentProfiler
.
resume
(
)
;
this
.
_doSequence
(
sequenceArray
this
.
_doneInternal
)
;
}
)
.
catch
(
e
=
>
{
this
.
exception
(
e
)
;
}
)
;
}
catch
(
e
)
{
this
.
exception
(
e
)
;
}
return
promise
;
}
_awaitBrowserLoaded
(
browser
)
{
dump
(
Wait
for
a
pageshow
event
for
browsing
context
{
browser
.
browsingContext
.
id
}
\
n
)
;
return
new
Promise
(
resolve
=
>
{
const
eventDispatcher
=
DampLoadParentModule
.
EventDispatcher
;
const
onPageShow
=
(
eventName
data
)
=
>
{
dump
(
Received
pageshow
event
for
{
data
.
browsingContext
.
id
}
\
n
)
;
if
(
data
.
browsingContext
!
=
=
browser
.
browsingContext
)
{
return
;
}
eventDispatcher
.
off
(
"
DampLoadParent
:
PageShow
"
onPageShow
)
;
resolve
(
)
;
}
;
eventDispatcher
.
on
(
"
DampLoadParent
:
PageShow
"
onPageShow
)
;
}
)
;
}
_registerDampLoadActors
(
)
{
dump
(
[
DampLoad
helper
]
Register
DampLoad
actors
\
n
)
;
ChromeUtils
.
registerWindowActor
(
"
DampLoad
"
{
kind
:
"
JSWindowActor
"
parent
:
{
esModuleURI
:
"
resource
:
/
/
damp
-
test
/
content
/
actors
/
DampLoadParent
.
sys
.
mjs
"
}
child
:
{
esModuleURI
:
"
resource
:
/
/
damp
-
test
/
content
/
actors
/
DampLoadChild
.
sys
.
mjs
"
events
:
{
pageshow
:
{
mozSystemGroup
:
true
}
}
}
allFrames
:
false
includeChrome
:
false
}
)
;
}
_unregisterDampLoadActors
(
)
{
dump
(
[
DampLoad
helper
]
Unregister
DampLoad
actors
\
n
)
;
ChromeUtils
.
unregisterWindowActor
(
"
DampLoad
"
)
;
}
}
;
exports
.
damp
=
new
Damp
(
)
;
