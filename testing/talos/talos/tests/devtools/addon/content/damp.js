const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
{
AddonManager
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
scope
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
talos
-
powers
-
content
/
content
/
TalosParentProfiler
.
js
"
scope
)
;
const
{
TalosParentProfiler
}
=
scope
;
XPCOMUtils
.
defineLazyGetter
(
this
"
require
"
function
(
)
{
let
{
require
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
devtools
/
shared
/
Loader
.
jsm
"
{
}
)
;
return
require
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gDevTools
"
function
(
)
{
let
{
gDevTools
}
=
require
(
"
devtools
/
client
/
framework
/
devtools
"
)
;
return
gDevTools
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
TargetFactory
"
function
(
)
{
let
{
TargetFactory
}
=
require
(
"
devtools
/
client
/
framework
/
target
"
)
;
return
TargetFactory
;
}
)
;
const
DEBUG_ALLOCATIONS
=
env
.
get
(
"
DEBUG_DEVTOOLS_ALLOCATIONS
"
)
;
const
TEST_TIMEOUT
=
5
*
60000
;
function
getMostRecentBrowserWindow
(
)
{
return
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
function
getActiveTab
(
window
)
{
return
window
.
gBrowser
.
selectedTab
;
}
let
gmm
=
window
.
getGroupMessageManager
(
"
browsers
"
)
;
const
frameScript
=
"
data
:
"
+
encodeURIComponent
(
(
{
function
(
)
{
addEventListener
(
"
load
"
function
(
event
)
{
let
subframe
=
event
.
target
!
=
content
.
document
;
sendAsyncMessage
(
"
browser
-
test
-
utils
:
loadEvent
"
{
subframe
url
:
event
.
target
.
documentURI
}
)
;
}
true
)
;
}
}
)
(
)
)
;
gmm
.
loadFrameScript
(
frameScript
true
)
;
function
awaitBrowserLoaded
(
browser
includeSubFrames
=
false
wantLoad
=
null
)
{
let
tabbrowser
=
browser
.
ownerGlobal
.
gBrowser
;
if
(
tabbrowser
&
&
tabbrowser
.
getTabForBrowser
)
{
tabbrowser
.
_insertBrowser
(
tabbrowser
.
getTabForBrowser
(
browser
)
)
;
}
function
isWanted
(
url
)
{
if
(
!
wantLoad
)
{
return
true
;
}
else
if
(
typeof
(
wantLoad
)
=
=
"
function
"
)
{
return
wantLoad
(
url
)
;
}
return
wantLoad
=
=
url
;
}
return
new
Promise
(
resolve
=
>
{
let
mm
=
browser
.
ownerGlobal
.
messageManager
;
mm
.
addMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
function
onLoad
(
msg
)
{
if
(
msg
.
target
=
=
browser
&
&
(
!
msg
.
data
.
subframe
|
|
includeSubFrames
)
&
&
isWanted
(
msg
.
data
.
url
)
)
{
mm
.
removeMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
onLoad
)
;
resolve
(
msg
.
data
.
url
)
;
}
}
)
;
}
)
;
}
function
Damp
(
)
{
Services
.
prefs
.
setBoolPref
(
"
devtools
.
webconsole
.
new
-
frontend
-
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
devtools
.
inspector
.
show
-
three
-
pane
-
tooltip
"
false
)
;
}
Damp
.
prototype
=
{
async
garbageCollect
(
)
{
dump
(
"
Garbage
collect
\
n
"
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
Cu
.
forceGC
(
)
;
await
new
Promise
(
done
=
>
setTimeout
(
done
0
)
)
;
}
}
runTest
(
label
)
{
if
(
DEBUG_ALLOCATIONS
)
{
if
(
!
this
.
allocationTracker
)
{
this
.
allocationTracker
=
this
.
startAllocationTracker
(
)
;
}
this
.
allocationTracker
.
flushAllocations
(
)
;
}
let
startLabel
=
label
+
"
.
start
"
;
performance
.
mark
(
startLabel
)
;
let
start
=
performance
.
now
(
)
;
return
{
done
:
(
)
=
>
{
let
end
=
performance
.
now
(
)
;
let
duration
=
end
-
start
;
performance
.
measure
(
label
startLabel
)
;
this
.
_results
.
push
(
{
name
:
label
value
:
duration
}
)
;
if
(
DEBUG_ALLOCATIONS
=
=
"
normal
"
)
{
this
.
_results
.
push
(
{
name
:
label
+
"
.
allocations
"
value
:
this
.
allocationTracker
.
countAllocations
(
)
}
)
;
}
else
if
(
DEBUG_ALLOCATIONS
=
=
"
verbose
"
)
{
this
.
allocationTracker
.
logAllocationSites
(
)
;
}
}
}
;
}
async
addTab
(
url
)
{
let
tab
=
this
.
_win
.
gBrowser
.
selectedTab
=
this
.
_win
.
gBrowser
.
addTab
(
url
)
;
let
browser
=
tab
.
linkedBrowser
;
await
awaitBrowserLoaded
(
browser
)
;
return
tab
;
}
async
waitForPendingPaints
(
window
)
{
let
utils
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
window
.
performance
.
mark
(
"
pending
paints
.
start
"
)
;
while
(
utils
.
isMozAfterPaintPending
)
{
await
new
Promise
(
done
=
>
{
window
.
addEventListener
(
"
MozAfterPaint
"
function
listener
(
)
{
window
.
performance
.
mark
(
"
pending
paint
"
)
;
done
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
window
.
performance
.
measure
(
"
pending
paints
"
"
pending
paints
.
start
"
)
;
}
closeCurrentTab
(
)
{
this
.
_win
.
BrowserCloseTabOrWindow
(
)
;
return
this
.
_win
.
gBrowser
.
selectedTab
;
}
reloadPage
(
onReload
)
{
return
new
Promise
(
resolve
=
>
{
let
browser
=
gBrowser
.
selectedBrowser
;
if
(
typeof
(
onReload
)
=
=
"
function
"
)
{
onReload
(
)
.
then
(
resolve
)
;
}
else
{
resolve
(
awaitBrowserLoaded
(
browser
)
)
;
}
browser
.
reload
(
)
;
}
)
;
}
async
testSetup
(
url
)
{
let
tab
=
await
this
.
addTab
(
url
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
100
)
;
}
)
;
return
tab
;
}
async
testTeardown
(
url
)
{
this
.
closeCurrentTab
(
)
;
await
this
.
garbageCollect
(
)
;
let
duration
=
Math
.
round
(
performance
.
now
(
)
-
this
.
_startTime
)
;
dump
(
{
this
.
_currentTest
}
took
{
duration
}
ms
.
\
n
)
;
this
.
_runNextTest
(
)
;
}
_win
:
undefined
_dampTab
:
undefined
_results
:
[
]
_nextTestIndex
:
0
_tests
:
[
]
_onSequenceComplete
:
0
_timeout
:
null
_startTime
:
null
_currentTest
:
null
_done
:
false
_runNextTest
(
)
{
window
.
clearTimeout
(
this
.
_timeout
)
;
if
(
this
.
_nextTestIndex
>
=
this
.
_tests
.
length
)
{
this
.
_onSequenceComplete
(
)
;
return
;
}
let
test
=
this
.
_tests
[
this
.
_nextTestIndex
+
+
]
;
this
.
_startTime
=
performance
.
now
(
)
;
this
.
_currentTest
=
test
;
dump
(
Loading
test
'
{
test
}
'
\
n
)
;
let
testMethod
=
require
(
"
chrome
:
/
/
damp
/
content
/
tests
/
"
+
test
)
;
this
.
_timeout
=
window
.
setTimeout
(
(
)
=
>
{
this
.
error
(
"
Test
timed
out
"
)
;
}
TEST_TIMEOUT
)
;
dump
(
Executing
test
'
{
test
}
'
\
n
)
;
let
promise
=
testMethod
(
)
;
if
(
promise
&
&
typeof
(
promise
.
catch
)
=
=
"
function
"
)
{
promise
.
catch
(
e
=
>
{
this
.
exception
(
e
)
;
}
)
;
}
}
_doSequence
(
tests
onComplete
)
{
this
.
_tests
=
tests
;
this
.
_onSequenceComplete
=
onComplete
;
this
.
_results
=
[
]
;
this
.
_nextTestIndex
=
0
;
this
.
_runNextTest
(
)
;
}
_log
(
str
)
{
if
(
window
.
MozillaFileLogger
&
&
window
.
MozillaFileLogger
.
log
)
window
.
MozillaFileLogger
.
log
(
str
)
;
window
.
dump
(
str
)
;
}
_logLine
(
str
)
{
return
this
.
_log
(
str
+
"
\
n
"
)
;
}
_reportAllResults
(
)
{
var
testNames
=
[
]
;
var
testResults
=
[
]
;
var
out
=
"
"
;
for
(
var
i
in
this
.
_results
)
{
res
=
this
.
_results
[
i
]
;
var
disp
=
[
]
.
concat
(
res
.
value
)
.
map
(
function
(
a
)
{
return
(
isNaN
(
a
)
?
-
1
:
a
.
toFixed
(
1
)
)
;
}
)
.
join
(
"
"
)
;
out
+
=
res
.
name
+
"
:
"
+
disp
+
"
\
n
"
;
if
(
!
Array
.
isArray
(
res
.
value
)
)
{
testNames
.
push
(
res
.
name
)
;
testResults
.
push
(
res
.
value
)
;
}
}
this
.
_log
(
"
\
n
"
+
out
)
;
if
(
content
&
&
content
.
tpRecordTime
)
{
content
.
tpRecordTime
(
testResults
.
join
(
"
"
)
0
testNames
.
join
(
"
"
)
)
;
}
else
{
}
}
_onTestComplete
:
null
_doneInternal
(
)
{
if
(
this
.
_done
)
{
return
;
}
this
.
_done
=
true
;
if
(
this
.
allocationTracker
)
{
this
.
allocationTracker
.
stop
(
)
;
this
.
allocationTracker
=
null
;
}
this
.
_win
.
gBrowser
.
selectedTab
=
this
.
_dampTab
;
if
(
this
.
_results
)
{
this
.
_logLine
(
"
DAMP_RESULTS_JSON
=
"
+
JSON
.
stringify
(
this
.
_results
)
)
;
this
.
_reportAllResults
(
)
;
}
if
(
this
.
_onTestComplete
)
{
this
.
_onTestComplete
(
JSON
.
parse
(
JSON
.
stringify
(
this
.
_results
)
)
)
;
}
}
startAllocationTracker
(
)
{
const
{
allocationTracker
}
=
require
(
"
devtools
/
shared
/
test
-
helpers
/
allocation
-
tracker
"
)
;
return
allocationTracker
(
)
;
}
error
(
message
)
{
dump
(
"
TEST
-
UNEXPECTED
-
FAIL
|
damp
|
"
)
;
if
(
this
.
_currentTest
)
{
dump
(
this
.
_currentTest
+
"
:
"
)
;
}
dump
(
message
+
"
\
n
"
)
;
this
.
_tests
=
[
]
;
this
.
_results
=
null
;
this
.
_doneInternal
(
)
;
}
exception
(
e
)
{
this
.
error
(
e
)
;
dump
(
e
.
stack
+
"
\
n
"
)
;
}
async
waitBeforeRunningTests
(
)
{
if
(
!
AddonManager
.
isReady
)
{
let
onAddonManagerReady
=
new
Promise
(
resolve
=
>
{
let
listener
=
{
onStartup
(
)
{
AddonManager
.
removeManagerListener
(
listener
)
;
resolve
(
)
;
}
onShutdown
(
)
{
}
}
;
AddonManager
.
addManagerListener
(
listener
)
;
}
)
;
await
onAddonManagerReady
;
}
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
1500
)
;
}
)
;
await
new
Promise
(
resolve
=
>
{
requestIdleCallback
(
resolve
{
timeout
:
15000
}
)
;
}
)
;
await
this
.
garbageCollect
(
)
;
}
startTest
(
doneCallback
)
{
try
{
dump
(
"
Initialize
the
head
file
with
a
reference
to
this
DAMP
instance
\
n
"
)
;
let
head
=
require
(
"
chrome
:
/
/
damp
/
content
/
tests
/
head
.
js
"
)
;
head
.
initialize
(
this
)
;
this
.
_onTestComplete
=
function
(
results
)
{
TalosParentProfiler
.
pause
(
"
DAMP
-
end
"
)
;
doneCallback
(
results
)
;
}
;
this
.
_win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
this
.
_dampTab
=
this
.
_win
.
gBrowser
.
selectedTab
;
this
.
_win
.
gBrowser
.
selectedBrowser
.
focus
(
)
;
TalosParentProfiler
.
resume
(
"
DAMP
-
start
"
)
;
let
filter
=
Services
.
prefs
.
getCharPref
(
"
talos
.
subtests
"
"
"
)
;
let
DAMP_TESTS
=
require
(
"
chrome
:
/
/
damp
/
content
/
damp
-
tests
.
js
"
)
;
let
tests
=
DAMP_TESTS
.
filter
(
test
=
>
!
test
.
disabled
)
.
filter
(
test
=
>
test
.
name
.
includes
(
filter
)
)
;
if
(
tests
.
length
=
=
=
0
)
{
this
.
error
(
Unable
to
find
any
test
matching
'
{
filter
}
'
)
;
}
let
topWindow
=
getMostRecentBrowserWindow
(
)
;
if
(
topWindow
.
coldRunDAMPDone
)
{
tests
=
tests
.
filter
(
test
=
>
!
test
.
cold
)
;
}
else
{
topWindow
.
coldRunDAMPDone
=
true
;
}
let
sequenceArray
=
[
]
;
for
(
let
test
of
tests
)
{
sequenceArray
.
push
(
test
.
path
)
;
}
this
.
waitBeforeRunningTests
(
)
.
then
(
(
)
=
>
{
this
.
_doSequence
(
sequenceArray
this
.
_doneInternal
)
;
}
)
.
catch
(
e
=
>
{
this
.
exception
(
e
)
;
}
)
;
}
catch
(
e
)
{
this
.
exception
(
e
)
;
}
}
}
;
