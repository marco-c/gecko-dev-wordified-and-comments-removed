function
(
id
)
{
return
document
.
getElementById
(
id
)
;
}
function
chromeExec
(
commandName
data
doneCallback
)
{
doneCallback
=
doneCallback
|
|
function
dummy
(
)
{
}
;
dispatchEvent
(
new
CustomEvent
(
"
damp
mozilla
.
org
:
chrome
-
exec
-
event
"
{
bubbles
:
true
detail
:
{
command
:
{
name
:
commandName
data
}
doneCallback
}
}
)
)
;
}
function
toClipboard
(
text
)
{
chromeExec
(
"
toClipboard
"
text
)
;
}
function
runTest
(
config
doneCallback
)
{
chromeExec
(
"
runTest
"
config
doneCallback
)
;
}
function
sum
(
values
)
{
return
values
.
reduce
(
function
(
a
b
)
{
return
a
+
b
;
}
)
;
}
function
average
(
values
)
{
return
values
.
length
?
sum
(
values
)
/
values
.
length
:
999999999
;
}
function
stddev
(
values
avg
)
{
if
(
undefined
=
=
avg
)
avg
=
average
(
values
)
;
if
(
values
.
length
<
=
1
)
return
0
;
return
Math
.
sqrt
(
values
.
map
(
function
(
v
)
{
return
Math
.
pow
(
v
-
avg
2
)
;
}
)
.
reduce
(
function
(
a
b
)
{
return
a
+
b
;
}
)
/
(
values
.
length
-
1
)
)
;
}
var
lastResults
=
'
[
"
[
no
results
collected
]
"
]
'
;
function
doneTest
(
dispResult
)
{
(
"
hide
-
during
-
run
"
)
.
style
.
display
=
"
block
"
;
(
"
show
-
during
-
run
"
)
.
style
.
display
=
"
none
"
;
if
(
dispResult
)
{
lastResults
=
JSON
.
stringify
(
dispResult
)
;
var
stats
=
{
}
;
var
isRepeat
=
false
;
for
(
var
i
in
dispResult
)
{
var
di
=
dispResult
[
i
]
;
var
disp
=
[
]
.
concat
(
di
.
value
)
.
map
(
function
(
a
)
{
return
"
"
+
(
isNaN
(
a
)
?
-
1
:
a
.
toFixed
(
1
)
)
;
}
)
.
join
(
"
&
nbsp
;
&
nbsp
;
"
)
;
dispResult
[
i
]
=
String
(
di
.
name
)
+
"
:
"
+
disp
;
if
(
di
.
name
.
includes
(
"
.
half
"
)
|
|
di
.
name
.
includes
(
"
.
all
"
)
)
dispResult
[
i
]
=
"
<
b
>
"
+
dispResult
[
i
]
+
"
<
/
b
>
"
;
if
(
di
.
name
.
includes
(
"
.
raw
"
)
)
dispResult
[
i
]
=
"
<
br
/
>
"
+
dispResult
[
i
]
;
if
(
!
di
.
name
.
includes
(
"
.
raw
"
)
)
{
if
(
!
stats
[
di
.
name
]
)
{
stats
[
di
.
name
]
=
[
]
;
}
else
{
isRepeat
=
true
;
}
stats
[
di
.
name
]
.
push
(
di
.
value
)
;
}
}
var
dispStats
=
"
"
;
if
(
isRepeat
)
{
dispStats
=
"
<
hr
/
>
<
b
>
Aggregated
<
/
b
>
:
<
br
/
>
"
;
for
(
var
s
in
stats
)
{
if
(
s
.
includes
(
"
.
half
"
)
)
dispStats
+
=
"
<
br
/
>
"
;
dispStats
+
=
s
+
"
&
nbsp
;
&
nbsp
;
&
nbsp
;
&
nbsp
;
Average
(
"
+
stats
[
s
]
.
length
+
"
)
:
"
+
average
(
stats
[
s
]
)
.
toFixed
(
2
)
+
"
stddev
:
"
+
stddev
(
stats
[
s
]
)
.
toFixed
(
2
)
+
"
<
br
/
>
"
;
}
dispStats
+
=
"
<
hr
/
>
<
b
>
Individual
animations
<
/
b
>
:
<
br
/
>
"
;
}
(
"
run
-
results
"
)
.
innerHTML
=
"
<
hr
/
>
<
br
/
>
Results
<
button
onclick
=
'
toClipboard
(
lastResults
)
'
>
[
Copy
to
clipboard
as
JSON
]
<
/
button
>
:
<
br
/
>
"
+
dispStats
+
dispResult
.
join
(
"
<
br
/
>
"
)
;
}
}
function
triggerStart
(
)
{
updateConfig
(
)
;
(
"
hide
-
during
-
run
"
)
.
style
.
display
=
"
none
"
;
(
"
show
-
during
-
run
"
)
.
style
.
display
=
"
block
"
;
(
"
run
-
results
"
)
.
innerHTML
=
"
"
;
runTest
(
config
doneTest
)
;
}
function
deselectAll
(
)
{
for
(
var
test
of
defaultConfig
.
subtests
)
{
(
"
subtest
-
"
+
test
.
name
)
.
checked
=
false
;
}
}
function
getUriHashValue
(
key
)
{
var
k
=
String
(
key
)
+
"
=
"
;
var
uriVars
=
unescape
(
document
.
location
.
hash
)
.
substr
(
1
)
.
split
(
"
&
"
)
;
for
(
var
i
in
uriVars
)
{
if
(
uriVars
[
i
]
.
indexOf
(
k
)
=
=
0
)
return
uriVars
[
i
]
.
substr
(
k
.
length
)
;
}
return
"
"
;
}
function
updateOptionsFromUrl
(
)
{
var
uriTests
=
getUriHashValue
(
"
tests
"
)
;
var
tests
=
uriTests
?
JSON
.
parse
(
uriTests
)
:
[
]
;
if
(
tests
.
length
)
{
for
(
var
test
of
defaultConfig
.
subtests
)
{
(
"
subtest
-
"
+
test
.
name
)
.
checked
=
false
;
for
(
var
t
in
tests
)
{
if
(
tests
[
t
]
=
=
test
.
name
)
{
(
"
subtest
-
"
+
test
.
name
)
.
checked
=
true
;
}
}
}
}
}
function
init
(
)
{
updateOptionsFromUrl
(
)
;
if
(
document
.
location
.
hash
.
indexOf
(
"
#
auto
"
)
=
=
0
)
{
triggerStart
(
)
;
}
}
addEventListener
(
"
load
"
init
)
;
