function
canQuitApplication
(
)
{
var
os
=
Components
.
classes
[
"
mozilla
.
org
/
observer
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIObserverService
)
;
if
(
!
os
)
{
return
true
;
}
try
{
var
cancelQuit
=
Components
.
classes
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Components
.
interfaces
.
nsISupportsPRBool
)
;
os
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
null
)
;
if
(
cancelQuit
.
data
)
{
return
false
;
}
}
catch
(
ex
)
{
}
os
.
notifyObservers
(
null
"
quit
-
application
-
granted
"
null
)
;
return
true
;
}
function
goQuitApplication
(
waitForSafeBrowsing
)
{
const
privs
=
'
UniversalPreferencesRead
UniversalPreferencesWrite
'
+
'
UniversalXPConnect
'
;
try
{
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
privs
)
;
}
catch
(
ex
)
{
throw
(
'
goQuitApplication
:
privilege
failure
'
+
ex
)
;
}
var
xulRuntime
=
Components
.
classes
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIXULRuntime
)
;
if
(
xulRuntime
.
processType
=
=
xulRuntime
.
PROCESS_TYPE_CONTENT
)
{
var
event
=
new
CustomEvent
(
"
TalosQuitApplication
"
{
bubbles
:
true
detail
:
{
waitForSafeBrowsing
}
}
)
;
document
.
dispatchEvent
(
event
)
;
return
;
}
if
(
waitForSafeBrowsing
)
{
var
SafeBrowsing
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
SafeBrowsing
.
jsm
"
{
}
)
.
SafeBrowsing
;
var
whenDone
=
(
)
=
>
{
goQuitApplication
(
false
)
;
}
;
SafeBrowsing
.
addMozEntriesFinishedPromise
.
then
(
whenDone
whenDone
)
;
SafeBrowsing
.
init
(
)
;
return
false
;
}
if
(
!
canQuitApplication
(
)
)
{
return
false
;
}
const
kAppStartup
=
'
mozilla
.
org
/
toolkit
/
app
-
startup
;
1
'
;
const
kAppShell
=
'
mozilla
.
org
/
appshell
/
appShellService
;
1
'
;
var
appService
;
if
(
kAppStartup
in
Components
.
classes
)
{
appService
=
Components
.
classes
[
kAppStartup
]
.
getService
(
Components
.
interfaces
.
nsIAppStartup
)
;
}
else
if
(
kAppShell
in
Components
.
classes
)
{
appService
=
Components
.
classes
[
kAppShell
]
.
getService
(
Components
.
interfaces
.
nsIAppShellService
)
;
}
else
{
throw
'
goQuitApplication
:
no
AppStartup
/
appShell
'
;
}
var
windowManager
=
Components
.
classes
[
'
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
'
]
.
getService
(
)
;
var
windowManagerInterface
=
windowManager
.
QueryInterface
(
Components
.
interfaces
.
nsIWindowMediator
)
;
var
enumerator
=
windowManagerInterface
.
getEnumerator
(
null
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
var
domWindow
=
enumerator
.
getNext
(
)
;
if
(
(
"
tryToClose
"
in
domWindow
)
&
&
!
domWindow
.
tryToClose
(
)
)
{
return
false
;
}
domWindow
.
close
(
)
;
}
try
{
appService
.
quit
(
appService
.
eForceQuit
)
;
}
catch
(
ex
)
{
throw
(
'
goQuitApplication
:
'
+
ex
)
;
}
return
true
;
}
