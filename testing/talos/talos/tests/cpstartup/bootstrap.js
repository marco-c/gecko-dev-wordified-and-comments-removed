ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PREALLOCATED_PREF
=
"
dom
.
ipc
.
processPrelaunch
.
enabled
"
;
const
TARGET_PATH
=
"
tests
/
cpstartup
/
content
/
target
.
html
"
;
const
WEBSERVER
=
Services
.
prefs
.
getCharPref
(
"
addon
.
test
.
cpstartup
.
webserver
"
)
;
const
TARGET_URI
=
{
WEBSERVER
}
/
{
TARGET_PATH
}
;
var
CPStartup
=
{
MESSAGES
:
[
"
CPStartup
:
Go
"
"
Content
:
BrowserChildReady
"
]
readyCallback
:
null
startStamp
:
null
tab
:
null
get
Profiler
(
)
{
delete
this
.
Profiler
;
let
context
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
talos
-
powers
/
TalosParentProfiler
.
js
"
context
)
;
return
this
.
Profiler
=
context
.
TalosParentProfiler
;
}
init
(
)
{
for
(
let
msgName
of
this
.
MESSAGES
)
{
Services
.
mm
.
addMessageListener
(
msgName
this
)
;
}
this
.
originalPreallocatedEnabled
=
Services
.
prefs
.
getBoolPref
(
PREALLOCATED_PREF
)
;
Services
.
prefs
.
setBoolPref
(
PREALLOCATED_PREF
false
)
;
}
uninit
(
)
{
for
(
let
msgName
of
this
.
MESSAGES
)
{
Services
.
mm
.
removeMessageListener
(
msgName
this
)
;
}
Services
.
prefs
.
setBoolPref
(
PREALLOCATED_PREF
this
.
originalPreallocatedEnabled
)
;
}
receiveMessage
(
msg
)
{
let
browser
=
msg
.
target
;
let
gBrowser
=
browser
.
ownerGlobal
.
gBrowser
;
switch
(
msg
.
name
)
{
case
"
CPStartup
:
Go
"
:
{
this
.
openTab
(
gBrowser
)
.
then
(
results
=
>
this
.
reportResults
(
results
)
)
;
break
;
}
case
"
Content
:
BrowserChildReady
"
:
{
if
(
!
this
.
readyCallback
)
{
throw
new
Error
(
"
Content
:
BrowserChildReady
fired
without
a
readyCallback
set
"
)
;
}
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
!
=
this
.
tab
)
{
break
;
}
let
delta
=
msg
.
data
.
time
-
this
.
startStamp
;
this
.
readyCallback
(
{
tab
delta
}
)
;
break
;
}
}
}
openTab
(
gBrowser
)
{
return
new
Promise
(
(
resolve
)
=
>
{
this
.
Profiler
.
resume
(
"
tab
opening
starts
"
)
;
this
.
startStamp
=
Services
.
telemetry
.
msSystemNow
(
)
;
this
.
tab
=
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
TARGET_URI
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
this
.
whenTabReady
(
)
.
then
(
(
{
tab
delta
}
)
=
>
{
this
.
Profiler
.
pause
(
"
tab
opening
end
"
)
;
this
.
removeTab
(
tab
)
.
then
(
(
)
=
>
{
resolve
(
delta
)
;
}
)
;
}
)
;
}
)
;
}
whenTabReady
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
this
.
readyCallback
=
resolve
;
}
)
;
}
removeTab
(
tab
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
{
messageManager
:
mm
frameLoader
}
=
tab
.
linkedBrowser
;
mm
.
addMessageListener
(
"
SessionStore
:
update
"
function
onMessage
(
msg
)
{
if
(
msg
.
targetFrameLoader
=
=
frameLoader
&
&
msg
.
data
.
isFinal
)
{
mm
.
removeMessageListener
(
"
SessionStore
:
update
"
onMessage
)
;
resolve
(
)
;
}
}
true
)
;
tab
.
ownerGlobal
.
gBrowser
.
removeTab
(
tab
)
;
}
)
;
}
reportResults
(
results
)
{
Services
.
mm
.
broadcastAsyncMessage
(
"
CPStartup
:
FinalResults
"
results
)
;
}
}
;
function
install
(
aData
aReason
)
{
}
function
startup
(
aData
aReason
)
{
CPStartup
.
init
(
)
;
}
function
shutdown
(
aData
aReason
)
{
CPStartup
.
uninit
(
)
;
}
function
uninstall
(
aData
aReason
)
{
}
