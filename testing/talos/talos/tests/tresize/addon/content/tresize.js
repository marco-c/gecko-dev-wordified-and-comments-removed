async
function
runTest
(
callback
locationSearch
)
{
const
INCREMENT
=
2
;
const
MAX
=
300
;
function
measurePaintTime
(
action
marker
)
{
return
new
Promise
(
resolve
=
>
{
let
startTime
;
let
lastTransaction
=
window
.
windowUtils
.
lastTransactionId
;
function
painted
(
event
)
{
if
(
event
.
transactionId
<
=
lastTransaction
)
{
return
;
}
if
(
marker
)
{
Profiler
.
pause
(
marker
)
;
}
window
.
removeEventListener
(
"
MozAfterPaint
"
painted
true
)
;
let
time
=
event
.
paintTimeStamp
-
startTime
;
resolve
(
time
)
;
}
window
.
addEventListener
(
"
MozAfterPaint
"
painted
true
)
;
if
(
marker
)
{
Profiler
.
resume
(
marker
)
;
}
startTime
=
window
.
performance
.
now
(
)
;
action
(
)
;
}
)
;
}
let
windowSize
=
425
;
await
measurePaintTime
(
(
)
=
>
{
window
.
moveTo
(
10
10
)
;
window
.
resizeTo
(
windowSize
windowSize
)
;
}
)
;
Profiler
.
initFromURLQueryParams
(
locationSearch
)
;
Profiler
.
beginTest
(
"
tresize
"
)
;
let
times
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX
;
i
+
+
)
{
const
marker
=
resize
{
i
}
;
windowSize
+
=
INCREMENT
;
let
time
=
await
measurePaintTime
(
(
)
=
>
{
window
.
resizeTo
(
windowSize
windowSize
)
;
}
marker
)
;
times
.
push
(
time
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
20
)
)
;
}
let
total
=
times
.
reduce
(
(
a
b
)
=
>
a
+
b
)
;
let
average
=
total
/
times
.
length
;
callback
(
{
average
}
)
;
}
