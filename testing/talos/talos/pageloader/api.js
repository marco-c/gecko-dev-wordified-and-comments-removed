ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aomStartup
"
"
mozilla
.
org
/
addons
/
addon
-
manager
-
startup
;
1
"
"
amIAddonManagerStartup
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
env
"
"
mozilla
.
org
/
process
/
environment
;
1
"
"
nsIEnvironment
"
)
;
async
function
talosStart
(
)
{
let
defaultWin
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
defaultWin
)
{
const
BROWSER_XUL
=
"
chrome
:
/
/
browser
/
content
/
browser
.
xul
"
;
defaultWin
=
await
new
Promise
(
resolve
=
>
{
const
listener
=
{
onOpenWindow
(
win
)
{
if
(
win
.
docShell
.
domWindow
.
location
.
href
=
=
BROWSER_XUL
)
{
Services
.
wm
.
removeListener
(
listener
)
;
resolve
(
win
)
;
}
}
}
;
Services
.
wm
.
addListener
(
listener
)
;
}
)
;
}
let
chromeURL
=
"
chrome
:
/
/
pageloader
/
content
/
pageloader
.
xul
"
;
let
args
=
{
}
;
args
.
wrappedJSObject
=
args
;
let
newWin
=
Services
.
ww
.
openWindow
(
null
chromeURL
"
_blank
"
"
chrome
dialog
=
no
all
"
args
)
;
await
new
Promise
(
resolve
=
>
{
newWin
.
addEventListener
(
"
load
"
resolve
)
;
}
)
;
defaultWin
.
close
(
)
;
}
this
.
pageloader
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
const
manifestURI
=
Services
.
io
.
newURI
(
"
manifest
.
json
"
null
this
.
extension
.
rootURI
)
;
this
.
chromeHandle
=
aomStartup
.
registerChrome
(
manifestURI
[
[
"
content
"
"
pageloader
"
"
chrome
/
"
]
]
)
;
if
(
env
.
exists
(
"
MOZ_USE_PAGELOADER
"
)
)
{
talosStart
(
)
;
}
}
onShutdown
(
)
{
this
.
chromeHandle
.
destruct
(
)
;
}
}
;
