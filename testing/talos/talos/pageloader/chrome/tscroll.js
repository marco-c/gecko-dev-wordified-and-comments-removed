function
testScroll
(
target
stepSize
opt_reportFunc
opt_numSteps
)
{
var
win
;
if
(
target
=
=
"
content
"
)
{
target
=
content
.
wrappedJSObject
;
win
=
content
;
}
else
{
win
=
window
;
}
var
report
;
function
P_setupReportFn
(
)
{
return
new
Promise
(
function
(
resolve
)
{
report
=
opt_reportFunc
|
|
win
.
tpRecordTime
;
if
(
report
=
=
'
PageLoader
:
RecordTime
'
)
{
report
=
function
(
duration
start
name
)
{
var
msg
=
{
time
:
duration
startTime
:
start
testName
:
name
}
;
sendAsyncMessage
(
'
PageLoader
:
RecordTime
'
msg
)
;
}
resolve
(
)
;
return
;
}
if
(
!
report
&
&
document
.
head
)
{
var
imported
=
document
.
createElement
(
'
script
'
)
;
imported
.
addEventListener
(
"
load
"
function
(
)
{
report
=
tpRecordTime
;
resolve
(
)
;
}
)
;
imported
.
src
=
'
.
.
/
.
.
/
scripts
/
talos
-
debug
.
js
?
dummy
=
'
+
Date
.
now
(
)
;
document
.
head
.
appendChild
(
imported
)
;
return
;
}
resolve
(
)
;
}
)
;
}
function
FP_wait
(
ms
)
{
return
function
(
)
{
return
new
Promise
(
function
(
resolve
)
{
setTimeout
(
resolve
ms
)
;
}
)
;
}
;
}
function
rAF
(
fn
)
{
return
content
.
requestAnimationFrame
(
fn
)
;
}
function
P_rAF
(
)
{
return
new
Promise
(
function
(
resolve
)
{
rAF
(
resolve
)
;
}
)
;
}
function
myNow
(
)
{
return
(
win
.
performance
&
&
win
.
performance
.
now
)
?
win
.
performance
.
now
(
)
:
Date
.
now
(
)
;
}
;
var
isWindow
=
target
.
self
=
=
=
target
;
var
getPos
=
isWindow
?
function
(
)
{
return
target
.
pageYOffset
;
}
:
function
(
)
{
return
target
.
scrollTop
;
}
;
var
gotoTop
=
isWindow
?
function
(
)
{
target
.
scroll
(
0
0
)
;
ensureScroll
(
)
;
}
:
function
(
)
{
target
.
scrollTop
=
0
;
ensureScroll
(
)
;
}
;
var
doScrollTick
=
isWindow
?
function
(
)
{
target
.
scrollBy
(
0
stepSize
)
;
ensureScroll
(
)
;
}
:
function
(
)
{
target
.
scrollTop
+
=
stepSize
;
ensureScroll
(
)
;
}
;
function
ensureScroll
(
)
{
if
(
!
this
.
dummyEnsureScroll
)
{
this
.
dummyEnsureScroll
=
1
;
}
this
.
dummyEnsureScroll
+
=
win
.
screenY
+
getPos
(
)
;
}
function
P_syncScrollTest
(
)
{
return
new
Promise
(
function
(
resolve
)
{
var
start
=
myNow
(
)
;
var
lastScrollPos
=
getPos
(
)
;
var
lastScrollTime
=
start
;
var
durations
=
[
]
;
function
tick
(
)
{
var
now
=
myNow
(
)
;
var
duration
=
now
-
lastScrollTime
;
lastScrollTime
=
now
;
durations
.
push
(
duration
)
;
doScrollTick
(
)
;
if
(
(
getPos
(
)
=
=
lastScrollPos
)
|
|
(
opt_numSteps
&
&
(
durations
.
length
>
=
(
opt_numSteps
+
2
)
)
)
)
{
if
(
typeof
(
Profiler
)
!
=
=
"
undefined
"
)
{
Profiler
.
pause
(
)
;
}
durations
.
pop
(
)
;
durations
.
pop
(
)
;
if
(
win
.
talosDebug
)
win
.
talosDebug
.
displayData
=
true
;
var
sum
=
0
;
for
(
var
i
=
0
;
i
<
durations
.
length
;
i
+
+
)
sum
+
=
Number
(
durations
[
i
]
)
;
resolve
(
durations
.
length
?
sum
/
durations
.
length
:
0
)
;
return
;
}
lastScrollPos
=
getPos
(
)
;
rAF
(
tick
)
;
}
if
(
typeof
(
Profiler
)
!
=
=
"
undefined
"
)
{
Profiler
.
resume
(
)
;
}
rAF
(
tick
)
;
}
)
;
}
P_setupReportFn
(
)
.
then
(
FP_wait
(
260
)
)
.
then
(
gotoTop
)
.
then
(
P_rAF
)
.
then
(
P_syncScrollTest
)
.
then
(
function
(
result
)
{
report
(
result
)
;
}
)
;
}
try
{
function
handleMessageFromChrome
(
message
)
{
var
payload
=
message
.
data
.
details
;
testScroll
(
payload
.
target
payload
.
stepSize
'
PageLoader
:
RecordTime
'
payload
.
opt_numSteps
)
;
}
addMessageListener
(
"
PageLoader
:
ScrollTest
"
handleMessageFromChrome
)
;
}
catch
(
e
)
{
}
