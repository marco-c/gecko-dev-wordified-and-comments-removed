var
Profiler
;
(
function
(
)
{
var
_profiler
;
var
test_name
=
this
.
document
?
this
.
document
.
location
.
pathname
:
"
unknown
"
;
var
enabled
=
false
;
var
currentTest
=
"
"
;
var
profiler_interval
profiler_entries
profiler_threadsArray
profiler_dir
;
try
{
netscape
.
security
.
PrivilegeManager
.
enablePrivilege
(
"
UniversalXPConnect
"
)
;
}
catch
(
e
)
{
}
try
{
_profiler
=
Cc
[
"
mozilla
.
org
/
tools
/
profiler
;
1
"
]
.
getService
(
Ci
.
nsIProfiler
)
;
}
catch
(
ex
)
{
(
typeof
(
dumpLog
)
=
=
"
undefined
"
?
dump
:
dumpLog
)
(
ex
+
"
\
n
"
)
;
}
function
searchToObject
(
locationSearch
)
{
var
pairs
=
locationSearch
.
substring
(
1
)
.
split
(
"
&
"
)
;
var
result
=
{
}
;
for
(
var
i
in
pairs
)
{
if
(
pairs
[
i
]
!
=
=
"
"
)
{
var
pair
=
pairs
[
i
]
.
split
(
"
=
"
)
;
result
[
decodeURIComponent
(
pair
[
0
]
)
]
=
decodeURIComponent
(
pair
[
1
]
|
|
"
"
)
;
}
}
return
result
;
}
Profiler
=
{
initFromObject
:
function
Profiler__initFromObject
(
obj
)
{
if
(
obj
&
&
(
"
gecko_profile_dir
"
in
obj
)
&
&
typeof
obj
.
gecko_profile_dir
=
=
"
string
"
&
&
(
"
gecko_profile_interval
"
in
obj
)
&
&
Number
.
isFinite
(
obj
.
gecko_profile_interval
*
1
)
&
&
(
"
gecko_profile_entries
"
in
obj
)
&
&
Number
.
isFinite
(
obj
.
gecko_profile_entries
*
1
)
&
&
(
"
gecko_profile_threads
"
in
obj
)
&
&
typeof
obj
.
gecko_profile_threads
=
=
"
string
"
)
{
profiler_interval
=
obj
.
gecko_profile_interval
;
profiler_entries
=
obj
.
gecko_profile_entries
;
profiler_threadsArray
=
obj
.
gecko_profile_threads
.
split
(
"
"
)
;
profiler_dir
=
obj
.
gecko_profile_dir
;
enabled
=
true
;
}
}
initFromURLQueryParams
:
function
Profiler__initFromURLQueryParams
(
locationSearch
)
{
this
.
initFromObject
(
searchToObject
(
locationSearch
)
)
;
}
beginTest
:
function
Profiler__beginTest
(
testName
)
{
currentTest
=
testName
;
if
(
_profiler
&
&
enabled
)
{
_profiler
.
StartProfiler
(
profiler_entries
profiler_interval
[
"
js
"
"
leaf
"
"
stackwalk
"
"
threads
"
]
4
profiler_threadsArray
profiler_threadsArray
.
length
)
;
if
(
_profiler
.
PauseSampling
)
{
_profiler
.
PauseSampling
(
)
;
}
}
}
finishTest
:
function
Profiler__finishTest
(
)
{
if
(
_profiler
&
&
enabled
)
{
_profiler
.
dumpProfileToFile
(
profiler_dir
+
"
/
"
+
currentTest
+
"
.
profile
"
)
;
_profiler
.
StopProfiler
(
)
;
}
}
finishTestAsync
:
function
Profiler__finishTest
(
)
{
if
(
!
(
_profiler
&
&
enabled
)
)
{
return
undefined
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
profiler
.
getProfileDataAsync
(
)
.
then
(
(
profile
)
=
>
{
let
profileFile
=
profiler_dir
+
"
/
"
+
currentTest
+
"
.
profile
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
var
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
profileFile
)
;
var
ostream
=
FileUtils
.
openSafeFileOutputStream
(
file
)
;
var
converter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
converter
.
charset
=
"
UTF
-
8
"
;
var
istream
=
converter
.
convertToInputStream
(
JSON
.
stringify
(
profile
)
)
;
NetUtil
.
asyncCopy
(
istream
ostream
function
(
status
)
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
reject
(
)
;
return
;
}
resolve
(
)
;
}
)
;
}
(
error
)
=
>
{
Cu
.
reportError
(
"
Failed
to
gather
profile
:
"
+
error
)
;
reject
(
)
;
}
)
;
}
)
;
}
finishStartupProfiling
:
function
Profiler__finishStartupProfiling
(
)
{
if
(
_profiler
&
&
enabled
)
{
_profiler
.
dumpProfileToFile
(
profiler_dir
+
"
/
startup
.
profile
"
)
;
_profiler
.
StopProfiler
(
)
;
}
}
resume
:
function
Profiler__resume
(
name
explicit
)
{
if
(
_profiler
)
{
if
(
_profiler
.
ResumeSampling
)
{
_profiler
.
ResumeSampling
(
)
;
}
_profiler
.
AddMarker
(
explicit
?
name
:
'
Start
of
test
"
'
+
(
name
|
|
test_name
)
+
'
"
'
)
;
}
}
pause
:
function
Profiler__pause
(
name
explicit
)
{
if
(
_profiler
)
{
if
(
_profiler
.
PauseSampling
)
{
_profiler
.
PauseSampling
(
)
;
}
_profiler
.
AddMarker
(
explicit
?
name
:
'
End
of
test
"
'
+
(
name
|
|
test_name
)
+
'
"
'
)
;
}
}
mark
:
function
Profiler__mark
(
marker
explicit
)
{
if
(
_profiler
)
{
_profiler
.
AddMarker
(
explicit
?
marker
:
'
Profiler
:
"
'
+
(
marker
|
|
test_name
)
+
'
"
'
)
;
}
}
}
;
}
)
(
)
;
