const
TP_CMDLINE_CONTRACTID
=
"
mozilla
.
org
/
commandlinehandler
/
general
-
startup
;
1
?
type
=
tp
"
;
const
TP_CMDLINE_CLSID
=
Components
.
ID
(
"
{
8AF052F5
-
8EFE
-
4359
-
8266
-
E16498A82E8B
}
"
)
;
const
CATMAN_CONTRACTID
=
"
mozilla
.
org
/
categorymanager
;
1
"
;
const
nsISupports
=
Ci
.
nsISupports
;
const
nsICategoryManager
=
Ci
.
nsICategoryManager
;
const
nsICommandLine
=
Ci
.
nsICommandLine
;
const
nsICommandLineHandler
=
Ci
.
nsICommandLineHandler
;
const
nsIComponentRegistrar
=
Ci
.
nsIComponentRegistrar
;
const
nsISupportsString
=
Ci
.
nsISupportsString
;
const
nsIWindowWatcher
=
Ci
.
nsIWindowWatcher
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
PageLoaderCmdLineHandler
(
)
{
}
PageLoaderCmdLineHandler
.
prototype
=
{
QueryInterface
:
function
handler_QI
(
iid
)
{
if
(
iid
.
equals
(
nsISupports
)
)
return
this
;
if
(
nsICommandLineHandler
&
&
iid
.
equals
(
nsICommandLineHandler
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
handle
:
function
handler_handle
(
cmdLine
)
{
var
args
=
{
}
;
var
tpmanifest
=
Services
.
prefs
.
getCharPref
(
"
talos
.
tpmanifest
"
null
)
;
if
(
tpmanifest
=
=
null
)
{
return
;
}
let
chromeURL
=
"
chrome
:
/
/
pageloader
/
content
/
pageloader
.
xul
"
;
args
.
wrappedJSObject
=
args
;
Services
.
ww
.
openWindow
(
null
chromeURL
"
_blank
"
"
chrome
dialog
=
no
all
"
args
)
;
cmdLine
.
preventDefault
=
true
;
}
}
;
var
PageLoaderCmdLineFactory
=
{
createInstance
(
outer
iid
)
{
if
(
outer
!
=
null
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
new
PageLoaderCmdLineHandler
(
)
.
QueryInterface
(
iid
)
;
}
}
;
function
NSGetFactory
(
cid
)
{
if
(
!
cid
.
equals
(
TP_CMDLINE_CLSID
)
)
throw
Cr
.
NS_ERROR_NOT_IMPLEMENTED
;
return
PageLoaderCmdLineFactory
;
}
var
PageLoaderCmdLineModule
=
{
registerSelf
(
compMgr
fileSpec
location
type
)
{
compMgr
=
compMgr
.
QueryInterface
(
nsIComponentRegistrar
)
;
compMgr
.
registerFactoryLocation
(
TP_CMDLINE_CLSID
"
PageLoader
CommandLine
Service
"
TP_CMDLINE_CONTRACTID
fileSpec
location
type
)
;
var
catman
=
Cc
[
CATMAN_CONTRACTID
]
.
getService
(
nsICategoryManager
)
;
catman
.
addCategoryEntry
(
"
command
-
line
-
handler
"
"
m
-
tp
"
TP_CMDLINE_CONTRACTID
true
true
)
;
}
unregisterSelf
(
compMgr
fileSpec
location
)
{
compMgr
=
compMgr
.
QueryInterface
(
nsIComponentRegistrar
)
;
compMgr
.
unregisterFactoryLocation
(
TP_CMDLINE_CLSID
fileSpec
)
;
var
catman
=
Cc
[
CATMAN_CONTRACTID
]
.
getService
(
nsICategoryManager
)
;
catman
.
deleteCategoryEntry
(
"
command
-
line
-
handler
"
"
m
-
tp
"
true
)
;
}
getClassObject
(
compMgr
cid
iid
)
{
return
NSGetFactory
(
cid
)
;
}
canUnload
(
compMgr
)
{
return
true
;
}
}
;
function
NSGetModule
(
compMgr
fileSpec
)
{
return
PageLoaderCmdLineModule
;
}
