import
os
import
sys
import
xtalos
import
subprocess
import
etlparser
def
stop
(
xperf_path
debug
=
False
)
:
    
xperf_cmd
=
[
xperf_path
'
-
stop
'
'
-
stop
'
'
talos_ses
'
]
    
if
debug
:
        
print
"
executing
'
%
s
'
"
%
subprocess
.
list2cmdline
(
xperf_cmd
)
    
subprocess
.
call
(
xperf_cmd
)
def
stop_from_config
(
config_file
=
None
debug
=
False
*
*
kwargs
)
:
    
"
"
"
start
from
a
YAML
config
file
"
"
"
    
required
=
{
'
xperf_path
'
:
"
xperf_path
not
given
"
                
"
etl_filename
"
:
"
No
etl_filename
given
"
}
    
for
key
in
required
:
        
if
key
not
in
kwargs
:
            
kwargs
[
key
]
=
None
    
if
config_file
:
        
kwargs
=
xtalos
.
options_from_config
(
kwargs
config_file
)
    
for
key
msg
in
required
.
items
(
)
:
        
if
not
kwargs
.
get
(
key
)
:
            
raise
xtalos
.
XTalosError
(
msg
)
    
if
not
os
.
path
.
exists
(
kwargs
[
'
xperf_path
'
]
)
:
        
raise
xtalos
.
XTalosError
(
"
ERROR
:
xperf_path
'
%
s
'
does
not
exist
"
                                 
%
kwargs
[
'
xperf_path
'
]
)
    
stopargs
=
{
}
    
stopargs
[
'
xperf_path
'
]
=
kwargs
[
'
xperf_path
'
]
    
stopargs
[
'
debug
'
]
=
debug
    
stop
(
*
*
stopargs
)
    
etlparser
.
etlparser_from_config
(
config_file
                                    
approot
=
kwargs
[
'
approot
'
]
                                    
error_filename
=
kwargs
[
'
error_filename
'
]
                                    
processID
=
kwargs
[
'
processID
'
]
)
def
main
(
args
=
sys
.
argv
[
1
:
]
)
:
    
parser
=
xtalos
.
XtalosOptions
(
)
    
args
=
parser
.
parse_args
(
args
)
    
try
:
        
stop_from_config
(
config_file
=
args
.
configFile
                         
debug
=
args
.
debug_level
>
=
xtalos
.
DEBUG_INFO
                         
*
*
args
.
__dict__
)
    
except
xtalos
.
XTalosError
e
:
        
parser
.
error
(
str
(
e
)
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
