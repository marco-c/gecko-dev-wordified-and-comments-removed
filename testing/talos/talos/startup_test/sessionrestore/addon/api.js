"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
SessionStartup
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStartup
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
StartupPerformance
:
"
resource
:
/
/
/
modules
/
sessionstore
/
StartupPerformance
.
jsm
"
}
)
;
this
.
sessionrestore
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
this
.
run
(
)
;
}
async
ensureTalosParentProfiler
(
)
{
async
function
getTalosParentProfiler
(
)
{
try
{
var
{
TalosParentProfiler
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
talos
-
powers
/
TalosParentProfiler
.
jsm
"
)
;
return
TalosParentProfiler
;
}
catch
(
err
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
return
getTalosParentProfiler
(
)
;
}
}
this
.
TalosParentProfiler
=
await
getTalosParentProfiler
(
)
;
}
async
finishProfiling
(
msg
)
{
await
this
.
ensureTalosParentProfiler
(
)
;
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
let
args
=
win
.
arguments
[
0
]
;
if
(
args
&
&
args
instanceof
Ci
.
nsIArray
)
{
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
let
url
=
new
URL
(
args
.
queryElementAt
(
0
Ci
.
nsISupportsString
)
.
data
)
;
this
.
TalosParentProfiler
.
initFromURLQueryParams
(
url
.
search
)
;
}
await
this
.
TalosParentProfiler
.
pause
(
msg
)
;
await
this
.
TalosParentProfiler
.
finishStartupProfiling
(
)
;
}
async
run
(
)
{
try
{
let
didRestore
=
true
;
if
(
!
StartupPerformance
.
isRestored
)
{
await
SessionStartup
.
onceInitialized
;
if
(
SessionStartup
.
sessionType
=
=
SessionStartup
.
NO_SESSION
|
|
SessionStartup
.
sessionType
=
=
SessionStartup
.
DEFER_SESSION
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
talos
.
sessionrestore
.
norestore
"
false
)
)
{
throw
new
Error
(
"
Session
was
not
restored
!
"
)
;
}
await
this
.
finishProfiling
(
"
This
test
measures
the
time
between
process
"
+
"
creation
and
sessionRestored
.
"
)
;
didRestore
=
false
;
}
else
{
await
new
Promise
(
resolve
=
>
{
let
observe
=
async
(
)
=
>
{
Services
.
obs
.
removeObserver
(
observe
StartupPerformance
.
RESTORED_TOPIC
)
;
await
this
.
finishProfiling
(
"
This
test
measures
the
time
between
process
"
+
"
creation
and
the
last
restored
tab
.
"
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
observe
StartupPerformance
.
RESTORED_TOPIC
)
;
}
)
;
}
}
let
startup_info
=
Services
.
startup
.
getStartupInfo
(
)
;
let
restoreTime
=
didRestore
?
StartupPerformance
.
latestRestoredTimeStamp
:
startup_info
.
sessionRestored
;
let
duration
=
restoreTime
-
startup_info
.
process
;
dump
(
"
__start_report
"
+
duration
+
"
__end_report
\
n
\
n
"
)
;
dump
(
"
__startTimestamp
"
+
Date
.
now
(
)
+
"
__endTimestamp
\
n
\
n
"
)
;
}
catch
(
ex
)
{
dump
(
SessionRestoreTalosTest
:
error
{
ex
}
\
n
)
;
dump
(
ex
.
stack
)
;
dump
(
"
\
n
"
)
;
}
Services
.
startup
.
quit
(
Services
.
startup
.
eForceQuit
)
;
}
}
;
