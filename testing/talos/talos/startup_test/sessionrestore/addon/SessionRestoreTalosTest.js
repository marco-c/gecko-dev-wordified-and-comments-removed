"
use
strict
"
;
const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
StartupPerformance
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
StartupPerformance
.
jsm
"
)
;
const
STARTUP_TOPIC
=
"
profile
-
after
-
change
"
;
const
MSG_REQUEST
=
"
session
-
restore
-
test
?
duration
"
;
const
MSG_PROVIDE
=
"
session
-
restore
-
test
:
duration
"
;
function
nsSessionRestoreTalosTest
(
)
{
}
nsSessionRestoreTalosTest
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
716346e5
-
0c45
-
4aa2
-
b601
-
da36f3c74bd8
}
"
)
_xpcom_factory
:
XPCOMUtils
.
generateSingletonFactory
(
nsSessionRestoreTalosTest
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
observe
:
function
DS_observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
STARTUP_TOPIC
:
this
.
init
(
)
;
break
;
case
StartupPerformance
.
RESTORED_TOPIC
:
this
.
onRestored
(
)
;
break
;
default
:
throw
new
Error
(
Unknown
topic
{
aTopic
}
)
;
}
}
init
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
StartupPerformance
.
RESTORED_TOPIC
false
)
;
}
onRestored
:
function
(
)
{
setTimeout
(
function
(
)
{
let
startup_info
=
Services
.
startup
.
getStartupInfo
(
)
;
let
duration
=
StartupPerformance
.
latestRestoredTimeStamp
-
startup_info
.
sessionRestoreInit
;
Services
.
ppmm
.
broadcastAsyncMessage
(
MSG_PROVIDE
{
duration
}
)
;
Services
.
ppmm
.
addMessageListener
(
MSG_REQUEST
function
listener
(
)
{
Services
.
ppmm
.
removeMessageListener
(
MSG_REQUEST
listener
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
MSG_PROVIDE
{
duration
}
)
;
}
)
;
}
0
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
nsSessionRestoreTalosTest
]
)
;
