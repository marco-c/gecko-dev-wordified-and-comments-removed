"
"
"
 
Utilities
needed
for
performing
media
tests
.
At
present
we
do
 
0
.
Audio
Recording
from
the
monitor
of
default
sink
device
.
 
1
.
Silence
Removal
.
 
2
.
PESQ
based
quality
measurement
.
 
4
.
Linux
platform
support
"
"
"
import
os
import
re
import
subprocess
import
threading
import
mozfile
here
=
os
.
path
.
dirname
(
os
.
path
.
realpath
(
__file__
)
)
"
"
"
Constants
for
audio
tools
input
and
processed
audio
files
For
Linux
platform
PulseAudio
and
LibSox
are
assumed
to
be
installed
.
"
"
"
_TOOLS_PATH_
=
os
.
path
.
join
(
here
'
tools
'
)
_TEST_PATH_
=
os
.
path
.
join
(
here
'
html
'
)
_PESQ_
=
os
.
path
.
join
(
_TOOLS_PATH_
'
PESQ
'
)
_MEDIA_TOOLS_
=
os
.
path
.
join
(
_TOOLS_PATH_
'
MediaUtils
'
)
_INPUT_FILE_
=
os
.
path
.
join
(
_TEST_PATH_
'
input16
.
wav
'
)
_RECORDED_FILE_
=
os
.
path
.
join
(
_TEST_PATH_
'
record
.
wav
'
)
_RECORDED_NO_SILENCE_
=
os
.
path
.
join
(
_TEST_PATH_
'
record_no_silence
.
wav
'
)
_SAMPLE_RATE_
=
'
48000
'
_NUM_CHANNELS_
=
'
1
'
_SOX_ABOVE_PERIODS_
=
'
1
'
_SOX_ABOVE_DURATION_
=
'
2
'
_SOX_ABOVE_THRESHOLD_
=
'
5
%
'
_SOX_BELOW_PERIODS_
=
'
1
'
_SOX_BELOW_DURATION_
=
'
2
'
_SOX_BELOW_THRESHOLD_
=
'
5
%
'
_PESQ_SAMPLE_RATE_
=
'
+
16000
'
_VOLUME_100_PERCENT_
=
'
65536
'
_DEFAULT_REC_DURATION_
=
10
class
AudioRecorder
(
threading
.
Thread
)
:
    
"
"
"
    
Thread
to
record
audio
    
"
"
"
    
def
__init__
(
self
parent
output_file
)
:
        
self
.
output_file
=
output_file
        
threading
.
Thread
.
__init__
(
self
)
    
def
setDuration
(
self
duration
)
:
        
self
.
rec_duration
=
duration
    
def
setRecordingDevice
(
self
device
)
:
        
self
.
rec_device
=
device
        
cmd
=
[
'
pacmd
'
'
set
-
source
-
volume
'
self
.
rec_device
               
_VOLUME_100_PERCENT_
]
        
cmd
=
[
str
(
s
)
for
s
in
cmd
]
        
try
:
            
p
=
subprocess
.
Popen
(
cmd
stdout
=
subprocess
.
PIPE
                                 
stderr
=
subprocess
.
PIPE
)
            
p
.
communicate
(
)
        
except
:
            
return
False
"
Audio
Recorder
:
pacmd
set
-
source
-
volume
failed
"
        
return
True
    
def
run
(
self
)
:
        
if
not
self
.
rec_device
:
            
return
        
if
not
self
.
rec_duration
:
            
self
.
rec_duration
=
_DEFAULT_REC_DURATION_
        
pa_command
=
[
'
pacat
'
'
-
r
'
'
-
d
'
self
.
rec_device
'
-
-
format
=
s16le
'
                      
'
-
-
fix
-
rate
'
'
-
-
channels
=
1
'
]
        
pa_command
=
[
str
(
s
)
for
s
in
pa_command
]
        
sox_command
=
[
'
sox
'
'
-
t
'
'
raw
'
'
-
r
'
_SAMPLE_RATE_
                       
'
-
-
encoding
=
signed
-
integer
'
'
-
Lb
'
16
'
-
c
'
                       
_NUM_CHANNELS_
'
-
'
self
.
output_file
'
rate
'
                       
'
16000
'
'
trim
'
0
self
.
rec_duration
]
        
sox_command
=
[
str
(
s
)
for
s
in
sox_command
]
        
p1
=
subprocess
.
Popen
(
pa_command
stdout
=
subprocess
.
PIPE
)
        
p2
=
subprocess
.
Popen
(
sox_command
stdin
=
p1
.
stdout
                              
stdout
=
subprocess
.
PIPE
)
        
p2
.
communicate
(
)
[
0
]
        
if
p1
:
            
p1
.
kill
(
)
class
AudioUtils
(
object
)
:
    
'
'
'
    
Utility
class
for
managing
pre
and
post
recording
operations
    
It
includes
operations
to
      
-
start
/
stop
audio
recorder
based
on
PusleAudio
and
SOX
      
-
Trim
the
silence
off
the
recorded
audio
based
on
SOX
      
-
Compute
PESQ
scores
    
'
'
'
    
recorder
=
None
    
def
setupAudioDeviceForRecording
(
self
)
:
        
cmd
=
[
'
pactl
'
'
list
'
]
        
output
=
subprocess
.
check_output
(
cmd
)
        
result
=
re
.
search
(
'
\
s
*
Name
:
(
\
S
*
\
.
monitor
)
'
output
)
        
if
result
:
            
self
.
recorder
.
setRecordingDevice
(
result
.
group
(
1
)
)
            
return
True
"
Recording
Device
:
%
s
Set
"
%
result
.
group
(
1
)
        
else
:
            
return
False
"
Unable
to
Set
Recording
Device
"
    
def
computeSNRAndDelay
(
self
)
:
        
snr_delay
=
"
-
1
.
000
-
1
"
        
if
not
os
.
path
.
exists
(
_MEDIA_TOOLS_
)
:
            
return
False
"
SNR
Tool
not
found
"
        
cmd
=
[
_MEDIA_TOOLS_
'
-
c
'
'
snr
'
'
-
r
'
_INPUT_FILE_
'
-
t
'
               
_RECORDED_NO_SILENCE_
]
        
cmd
=
[
str
(
s
)
for
s
in
cmd
]
        
output
=
subprocess
.
check_output
(
cmd
)
        
result
=
re
.
search
(
'
SNR_DELAY
=
(
\
d
+
\
.
\
d
+
)
(
\
d
+
)
'
output
)
        
mozfile
.
remove
(
_RECORDED_NO_SILENCE_
)
        
if
result
:
            
snr_delay
=
str
(
result
.
group
(
1
)
)
+
'
'
+
str
(
result
.
group
(
2
)
)
            
return
True
snr_delay
        
else
:
            
"
"
"
            
We
return
status
as
True
since
SNR
computation
went
through
            
successfully
but
scores
computation
failed
due
to
severly
            
degraded
audio
quality
.
            
"
"
"
            
return
True
snr_delay
    
def
startRecording
(
self
duration
)
:
        
if
self
.
recorder
and
self
.
recorder
.
is_alive
(
)
:
            
return
False
"
An
Running
Instance
Of
Recorder
Found
"
        
self
.
recorder
=
AudioRecorder
(
self
_RECORDED_FILE_
)
        
if
not
self
.
recorder
:
            
return
False
"
Audio
Recorder
Setup
Failed
"
        
status
message
=
self
.
setupAudioDeviceForRecording
(
)
        
if
status
is
True
:
            
self
.
recorder
.
setDuration
(
duration
)
            
self
.
recorder
.
start
(
)
            
if
self
.
recorder
.
is_alive
(
)
:
                
return
True
message
            
else
:
                
return
False
"
Audio
Recorder
Setup
Failed
"
        
else
:
            
return
False
message
    
def
stopRecording
(
self
)
:
        
self
.
recorder
.
join
(
)
        
"
"
"
        
http
:
/
/
digitalcardboard
.
com
/
blog
/
2009
/
08
/
25
/
the
-
sox
-
of
-
silence
/
        
.
/
sox
record
.
wav
out1
.
wav
silence
1
2
5
%
1
2
5
%
reverse
silence
        
1
2
5
%
        
"
"
"
        
cmd
=
[
'
sox
'
_RECORDED_FILE_
_RECORDED_NO_SILENCE_
'
silence
'
               
_SOX_ABOVE_PERIODS_
_SOX_ABOVE_DURATION_
               
_SOX_ABOVE_THRESHOLD_
'
reverse
'
'
silence
'
               
_SOX_BELOW_PERIODS_
_SOX_BELOW_DURATION_
               
_SOX_BELOW_THRESHOLD_
'
reverse
'
]
        
cmd
=
[
str
(
s
)
for
s
in
cmd
]
        
subprocess
.
call
(
cmd
stdout
=
subprocess
.
PIPE
stderr
=
subprocess
.
PIPE
)
        
mozfile
.
remove
(
_RECORDED_FILE_
)
