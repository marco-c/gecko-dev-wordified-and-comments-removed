from
marionette_driver
import
By
Wait
from
marionette_driver
.
errors
import
NoSuchWindowException
import
firefox_puppeteer
.
errors
as
errors
from
firefox_puppeteer
.
ui
.
windows
import
BaseWindow
from
firefox_ui_harness
.
testcases
import
FirefoxTestCase
class
BaseWindowTestCase
(
FirefoxTestCase
)
:
    
def
setUp
(
self
)
:
        
"
"
"
        
These
tests
open
and
close
windows
pretty
rapidly
which
        
(
since
bug
1261842
)
can
cause
content
processes
to
be
        
spawned
and
discarded
in
large
numbers
.
By
default
Firefox
        
has
a
5
second
timeout
for
shutting
down
content
processes
        
but
we
can
get
into
cases
where
the
content
process
just
        
doesn
'
t
have
enough
time
to
get
itself
all
sorted
before
        
the
timeout
gets
hit
which
results
in
the
parent
killing
        
the
content
process
manually
which
generates
a
crash
report
        
which
causes
these
tests
to
orange
.
We
side
-
step
this
by
        
setting
dom
.
ipc
.
tabs
.
shutdownTimeoutSecs
to
0
which
disables
        
the
shutdown
timer
.
        
"
"
"
        
FirefoxTestCase
.
setUp
(
self
)
        
self
.
marionette
.
set_pref
(
'
dom
.
ipc
.
tabs
.
shutdownTimeoutSecs
'
0
)
class
TestWindows
(
BaseWindowTestCase
)
:
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
windows
.
close_all
(
[
self
.
browser
]
)
        
finally
:
            
BaseWindowTestCase
.
tearDown
(
self
)
    
def
test_windows
(
self
)
:
        
url
=
self
.
marionette
.
absolute_url
(
'
layout
/
mozilla
.
html
'
)
        
for
index
in
range
(
0
2
)
:
            
self
.
marionette
.
execute_script
(
"
"
"
window
.
open
(
)
;
"
"
"
)
        
windows
=
self
.
windows
.
all
        
self
.
assertEquals
(
len
(
windows
)
3
)
        
self
.
windows
.
switch_to
(
windows
[
1
]
.
handle
)
        
self
.
assertEquals
(
windows
[
1
]
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
url
)
        
self
.
windows
.
switch_to
(
windows
[
2
]
.
handle
)
        
def
find_by_url
(
win
)
:
            
with
win
.
marionette
.
using_context
(
'
content
'
)
:
                
return
win
.
marionette
.
get_url
(
)
=
=
url
        
self
.
windows
.
switch_to
(
find_by_url
)
        
self
.
assertEquals
(
windows
[
1
]
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
self
.
windows
.
switch_to
(
find_by_url
)
        
self
.
assertRaises
(
NoSuchWindowException
                          
self
.
windows
.
switch_to
"
humbug
"
)
        
self
.
assertRaises
(
NoSuchWindowException
                          
self
.
windows
.
switch_to
lambda
win
:
False
)
        
self
.
windows
.
close_all
(
[
self
.
browser
]
)
        
self
.
browser
.
switch_to
(
)
        
self
.
assertEqual
(
len
(
self
.
windows
.
all
)
1
)
class
TestBaseWindow
(
BaseWindowTestCase
)
:
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
windows
.
close_all
(
[
self
.
browser
]
)
        
finally
:
            
BaseWindowTestCase
.
tearDown
(
self
)
    
def
test_basics
(
self
)
:
        
win1
=
BaseWindow
(
lambda
:
self
.
marionette
self
.
browser
.
handle
)
        
self
.
assertEquals
(
win1
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
self
.
assertEquals
(
win1
.
window_element
                          
self
.
marionette
.
find_element
(
By
.
CSS_SELECTOR
'
:
root
'
)
)
        
self
.
assertEquals
(
win1
.
window_element
.
get_attribute
(
'
windowtype
'
)
                          
self
.
marionette
.
get_window_type
(
)
)
        
self
.
assertFalse
(
win1
.
closed
)
        
self
.
assertRaises
(
TypeError
                          
BaseWindow
self
.
marionette
self
.
browser
.
handle
)
        
self
.
assertRaises
(
errors
.
UnknownWindowError
                          
BaseWindow
lambda
:
self
.
marionette
10
)
        
self
.
assertRaises
(
KeyError
                          
win1
.
send_shortcut
'
l
'
acel
=
True
)
    
def
test_open_close
(
self
)
:
        
win1
=
BaseWindow
(
lambda
:
self
.
marionette
self
.
browser
.
handle
)
        
win2
=
win1
.
open_window
(
)
        
win2
=
BaseWindow
(
lambda
:
self
.
marionette
win2
.
handle
)
        
self
.
assertEquals
(
len
(
self
.
marionette
.
chrome_window_handles
)
2
)
        
self
.
assertNotEquals
(
win1
.
handle
win2
.
handle
)
        
self
.
assertEquals
(
win2
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
win2
.
close
(
)
        
self
.
assertTrue
(
win2
.
closed
)
        
self
.
assertEquals
(
len
(
self
.
marionette
.
chrome_window_handles
)
1
)
        
self
.
assertEquals
(
win2
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
Wait
(
self
.
marionette
)
.
until
(
lambda
_
:
win1
.
focused
)
        
win1
.
focus
(
)
        
def
opener
(
window
)
:
            
window
.
marionette
.
execute_script
(
"
"
"
window
.
open
(
)
;
"
"
"
)
        
def
closer
(
window
)
:
            
window
.
marionette
.
execute_script
(
"
"
"
window
.
close
(
)
;
"
"
"
)
        
win2
=
win1
.
open_window
(
callback
=
opener
)
        
win2
=
BaseWindow
(
lambda
:
self
.
marionette
win2
.
handle
)
        
self
.
assertEquals
(
len
(
self
.
marionette
.
chrome_window_handles
)
2
)
        
win2
.
close
(
callback
=
closer
)
        
win1
.
focus
(
)
        
self
.
assertRaises
(
errors
.
UnexpectedWindowTypeError
                          
win1
.
open_window
expected_window_class
=
BaseWindow
)
        
self
.
windows
.
close_all
(
[
win1
]
)
    
def
test_switch_to_and_focus
(
self
)
:
        
win1
=
BaseWindow
(
lambda
:
self
.
marionette
self
.
browser
.
handle
)
        
win2
=
win1
.
open_window
(
)
        
win2
=
BaseWindow
(
lambda
:
self
.
marionette
win2
.
handle
)
        
self
.
assertEquals
(
win2
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
self
.
assertEquals
(
win2
.
handle
self
.
windows
.
focused_chrome_window_handle
)
        
self
.
assertFalse
(
win1
.
focused
)
        
self
.
assertTrue
(
win2
.
focused
)
        
win1
.
switch_to
(
)
        
self
.
assertEquals
(
win1
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
self
.
assertTrue
(
win2
.
focused
)
        
win1
.
focus
(
)
        
self
.
assertTrue
(
win1
.
focused
)
        
win2
.
focus
(
)
        
self
.
assertEquals
(
win2
.
handle
self
.
marionette
.
current_chrome_window_handle
)
        
self
.
assertEquals
(
win2
.
handle
self
.
windows
.
focused_chrome_window_handle
)
        
self
.
assertTrue
(
win2
.
focused
)
        
win2
.
switch_to
(
)
        
win2
.
close
(
)
        
win1
.
switch_to
(
)
class
TestBrowserWindow
(
BaseWindowTestCase
)
:
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
windows
.
close_all
(
[
self
.
browser
]
)
        
finally
:
            
BaseWindowTestCase
.
tearDown
(
self
)
    
def
test_basic
(
self
)
:
        
self
.
assertNotEqual
(
self
.
browser
.
dtds
[
]
)
        
self
.
assertNotEqual
(
self
.
browser
.
properties
[
]
)
        
self
.
assertFalse
(
self
.
browser
.
is_private
)
        
self
.
assertIsNotNone
(
self
.
browser
.
menubar
)
        
self
.
assertIsNotNone
(
self
.
browser
.
navbar
)
        
self
.
assertIsNotNone
(
self
.
browser
.
tabbar
)
    
def
test_open_close
(
self
)
:
        
win2
=
self
.
browser
.
open_browser
(
trigger
=
'
menu
'
)
        
self
.
assertEquals
(
win2
self
.
windows
.
current
)
        
self
.
assertFalse
(
self
.
browser
.
is_private
)
        
win2
.
close
(
trigger
=
'
menu
'
)
        
win2
=
self
.
browser
.
open_browser
(
trigger
=
'
shortcut
'
)
        
self
.
assertEquals
(
win2
self
.
windows
.
current
)
        
self
.
assertFalse
(
self
.
browser
.
is_private
)
        
win2
.
close
(
trigger
=
'
shortcut
'
)
        
win2
=
self
.
browser
.
open_browser
(
is_private
=
True
)
        
self
.
assertEquals
(
win2
self
.
windows
.
current
)
        
self
.
assertTrue
(
win2
.
is_private
)
        
win2
.
close
(
)
        
win2
=
self
.
browser
.
open_browser
(
trigger
=
'
shortcut
'
is_private
=
True
)
        
self
.
assertEquals
(
win2
self
.
windows
.
current
)
        
self
.
assertTrue
(
win2
.
is_private
)
        
win2
.
close
(
)
        
win2
=
self
.
browser
.
open_browser
(
)
        
self
.
assertEquals
(
win2
self
.
windows
.
current
)
        
win2
.
close
(
force
=
True
)
