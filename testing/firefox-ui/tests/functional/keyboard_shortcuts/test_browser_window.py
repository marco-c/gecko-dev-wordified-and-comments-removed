import
sys
import
unittest
from
firefox_puppeteer
import
PuppeteerMixin
from
marionette_driver
import
Wait
from
marionette_harness
import
MarionetteTestCase
class
TestBrowserWindowShortcuts
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
test_addons_manager
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
'
about
:
'
)
        
def
opener
(
tab
)
:
            
tab
.
window
.
send_shortcut
(
tab
.
window
.
localize_entity
(
'
addons
.
commandkey
'
)
                                     
accel
=
True
shift
=
True
)
        
self
.
browser
.
tabbar
.
open_tab
(
opener
)
        
self
.
browser
.
tabbar
.
tabs
[
1
]
.
switch_to
(
)
        
self
.
browser
.
tabbar
.
close_tab
(
)
    
def
test_search_field
(
self
)
:
        
current_name
=
self
.
marionette
.
execute_script
(
"
"
"
            
return
window
.
document
.
activeElement
.
localName
;
        
"
"
"
)
        
self
.
assertNotEqual
(
current_name
"
input
"
)
        
if
self
.
puppeteer
.
platform
=
=
'
linux
'
:
            
key
=
'
searchFocusUnix
.
commandkey
'
        
else
:
            
key
=
'
searchFocus
.
commandkey
'
        
self
.
browser
.
send_shortcut
(
self
.
browser
.
localize_entity
(
key
)
                                   
accel
=
True
)
        
def
has_input_selected
(
mn
)
:
            
selection_name
=
mn
.
execute_script
(
"
"
"
                
return
window
.
document
.
activeElement
.
localName
;
            
"
"
"
)
            
return
selection_name
=
=
"
input
"
        
Wait
(
self
.
marionette
)
.
until
(
has_input_selected
)
unittest
.
skipIf
(
sys
.
platform
=
=
'
darwin
'
                 
'
Quit
Shotcut
not
supported
due
to
native
menu
of
Mac
OS
'
)
class
TestBrowserQuitShortcut
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
test_quit_firefox_shortcut
(
self
)
:
        
def
quit_via_shortcut_callback
(
)
:
            
if
self
.
puppeteer
.
platform
=
=
'
win
'
:
                
key
=
'
quitApplicationCmdWin2
.
accesskey
'
            
else
:
                
key
=
'
quitApplicationCmdUnix
.
key
'
            
self
.
browser
.
send_shortcut
(
self
.
browser
.
localize_entity
(
key
)
                                       
accel
=
True
)
        
self
.
marionette
.
quit
(
in_app
=
True
callback
=
quit_via_shortcut_callback
)
        
self
.
assertIsNone
(
self
.
marionette
.
session
)
    
def
tearDown
(
self
)
:
        
self
.
marionette
.
start_session
(
)
        
super
(
TestBrowserQuitShortcut
self
)
.
tearDown
(
)
