import
time
from
firefox_puppeteer
import
PuppeteerMixin
from
marionette_driver
import
By
expected
Wait
from
marionette_harness
import
MarionetteTestCase
class
TestSafeBrowsingWarningPages
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestSafeBrowsingWarningPages
self
)
.
setUp
(
)
        
self
.
urls
=
[
            
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
unwanted
.
html
'
            
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
'
            
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
an
-
attack
.
html
'
        
]
        
self
.
marionette
.
set_pref
(
'
app
.
support
.
baseURL
'
                                 
self
.
marionette
.
absolute_url
(
"
support
.
html
?
topic
=
"
)
)
        
self
.
marionette
.
set_pref
(
'
browser
.
safebrowsing
.
phishing
.
enabled
'
True
)
        
self
.
marionette
.
set_pref
(
'
browser
.
safebrowsing
.
malware
.
enabled
'
True
)
        
time
.
sleep
(
3
)
        
self
.
browser
.
tabbar
.
open_tab
(
)
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
puppeteer
.
utils
.
permissions
.
remove
(
'
https
:
/
/
www
.
itisatrap
.
org
'
'
safe
-
browsing
'
)
            
self
.
browser
.
tabbar
.
close_all_tabs
(
[
self
.
browser
.
tabbar
.
tabs
[
0
]
]
)
            
self
.
marionette
.
clear_pref
(
'
app
.
support
.
baseURL
'
)
            
self
.
marionette
.
clear_pref
(
'
browser
.
safebrowsing
.
malware
.
enabled
'
)
            
self
.
marionette
.
clear_pref
(
'
browser
.
safebrowsing
.
phishing
.
enabled
'
)
        
finally
:
            
super
(
TestSafeBrowsingWarningPages
self
)
.
tearDown
(
)
    
def
test_warning_pages
(
self
)
:
        
with
self
.
marionette
.
using_context
(
"
content
"
)
:
            
for
unsafe_page
in
self
.
urls
:
                
self
.
marionette
.
navigate
(
unsafe_page
)
                
time
.
sleep
(
1
)
                
self
.
check_get_me_out_of_here_button
(
unsafe_page
)
                
self
.
marionette
.
navigate
(
unsafe_page
)
                
time
.
sleep
(
1
)
                
self
.
check_report_button
(
unsafe_page
)
                
self
.
marionette
.
navigate
(
unsafe_page
)
                
time
.
sleep
(
1
)
                
self
.
check_ignore_warning_button
(
unsafe_page
)
    
def
check_get_me_out_of_here_button
(
self
unsafe_page
)
:
        
button
=
self
.
marionette
.
find_element
(
By
.
ID
"
getMeOutButton
"
)
        
button
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
lambda
mn
:
self
.
browser
.
default_homepage
in
mn
.
get_url
(
)
)
    
def
check_report_button
(
self
unsafe_page
)
:
        
with
self
.
marionette
.
using_context
(
'
chrome
'
)
:
            
url
=
self
.
marionette
.
execute_script
(
"
"
"
              
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
              
return
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
                                                         
+
"
phishing
-
malware
"
;
            
"
"
"
)
        
button
=
self
.
marionette
.
find_element
(
By
.
ID
"
reportButton
"
)
        
button
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
expected
.
element_stale
(
button
)
)
        
expected_url
=
self
.
browser
.
get_final_url
(
url
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
lambda
mn
:
expected_url
=
=
mn
.
get_url
(
)
            
message
=
"
The
expected
URL
'
{
}
'
has
not
been
loaded
"
.
format
(
expected_url
)
        
)
        
topic
=
self
.
marionette
.
find_element
(
By
.
ID
"
topic
"
)
        
self
.
assertEquals
(
topic
.
text
"
phishing
-
malware
"
)
    
def
check_ignore_warning_button
(
self
unsafe_page
)
:
        
button
=
self
.
marionette
.
find_element
(
By
.
ID
'
ignoreWarningButton
'
)
        
button
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
expected
.
element_present
(
By
.
ID
'
main
-
feature
'
)
)
        
self
.
assertEquals
(
self
.
marionette
.
get_url
(
)
self
.
browser
.
get_final_url
(
unsafe_page
)
)
        
self
.
puppeteer
.
utils
.
permissions
.
remove
(
'
https
:
/
/
www
.
itisatrap
.
org
'
'
safe
-
browsing
'
)
