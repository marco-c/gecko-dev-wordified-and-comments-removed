import
time
from
marionette_driver
import
By
expected
Wait
from
marionette_driver
.
errors
import
MarionetteException
from
firefox_ui_harness
.
testcases
import
FirefoxTestCase
class
TestSSLDisabledErrorPage
(
FirefoxTestCase
)
:
    
def
setUp
(
self
)
:
        
FirefoxTestCase
.
setUp
(
self
)
        
self
.
url
=
'
https
:
/
/
tlsv1
-
0
.
mozqa
.
com
'
        
self
.
utils
.
sanitize
(
{
"
sessions
"
:
True
}
)
        
self
.
prefs
.
set_pref
(
'
security
.
tls
.
version
.
min
'
3
)
        
self
.
prefs
.
set_pref
(
'
security
.
tls
.
version
.
max
'
3
)
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
marionette
.
clear_pref
(
'
security
.
tls
.
version
.
min
'
)
            
self
.
marionette
.
clear_pref
(
'
security
.
tls
.
version
.
max
'
)
        
finally
:
            
FirefoxTestCase
.
tearDown
(
self
)
    
def
test_ssl_disabled_error_page
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
assertRaises
(
MarionetteException
self
.
marionette
.
navigate
self
.
url
)
            
time
.
sleep
(
1
)
            
title
=
self
.
marionette
.
find_element
(
By
.
CLASS_NAME
'
title
-
text
'
)
            
nss_failure2title
=
self
.
browser
.
get_entity
(
'
nssFailure2
.
title
'
)
            
self
.
assertEquals
(
title
.
get_property
(
'
textContent
'
)
nss_failure2title
)
            
short_description
=
self
.
marionette
.
find_element
(
By
.
ID
'
errorShortDescText
'
)
            
self
.
assertIn
(
'
SSL_ERROR_UNSUPPORTED_VERSION
'
                          
short_description
.
get_property
(
'
textContent
'
)
)
            
self
.
assertIn
(
'
mozqa
.
com
'
short_description
.
get_property
(
'
textContent
'
)
)
            
reset_button
=
self
.
marionette
.
find_element
(
By
.
ID
'
prefResetButton
'
)
            
reset_button
.
click
(
)
            
Wait
(
self
.
marionette
timeout
=
self
.
browser
.
timeout_page_load
)
.
until
(
                
expected
.
element_present
(
By
.
LINK_TEXT
'
http
:
/
/
quality
.
mozilla
.
org
'
)
)
