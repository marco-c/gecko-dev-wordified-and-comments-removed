from
__future__
import
absolute_import
import
time
from
firefox_puppeteer
import
PuppeteerMixin
from
marionette_driver
import
By
Wait
from
marionette_driver
.
errors
import
MarionetteException
from
marionette_harness
import
MarionetteTestCase
class
TestSecurityNotification
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestSecurityNotification
self
)
.
setUp
(
)
        
self
.
urls
=
[
            
'
https
:
/
/
expired
.
badssl
.
com
'
            
'
https
:
/
/
badssl
.
com
'
            
'
http
:
/
/
http
.
badssl
.
com
'
        
]
        
self
.
identity_box
=
self
.
browser
.
navbar
.
locationbar
.
identity_box
    
def
test_invalid_cert
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
assertRaises
(
MarionetteException
self
.
marionette
.
navigate
self
.
urls
[
0
]
)
            
time
.
sleep
(
1
)
            
text
=
self
.
marionette
.
find_element
(
By
.
ID
'
badCertTechnicalInfo
'
)
            
self
.
assertIn
(
self
.
urls
[
0
]
[
8
:
]
text
.
get_property
(
'
textContent
'
)
)
            
self
.
assertIsNotNone
(
self
.
marionette
.
find_element
(
By
.
ID
'
returnButton
'
)
)
            
self
.
assertIsNotNone
(
self
.
marionette
.
find_element
(
By
.
ID
'
advancedButton
'
)
)
            
self
.
assertIn
(
'
SEC_ERROR_EXPIRED_CERTIFICATE
'
text
.
get_property
(
'
textContent
'
)
)
    
def
test_secure_website
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
self
.
urls
[
1
]
)
        
Wait
(
self
.
marionette
)
.
until
(
lambda
_
:
(
            
self
.
identity_box
.
get_property
(
'
className
'
)
=
=
'
verifiedDomain
'
)
        
)
    
def
test_insecure_website
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
self
.
urls
[
2
]
)
        
Wait
(
self
.
marionette
)
.
until
(
lambda
_
:
(
            
self
.
identity_box
.
get_property
(
'
className
'
)
=
=
'
notSecure
'
)
        
)
