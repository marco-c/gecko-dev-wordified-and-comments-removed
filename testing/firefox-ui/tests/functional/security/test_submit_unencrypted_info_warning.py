from
marionette_driver
import
By
expected
Wait
from
marionette_driver
.
errors
import
NoAlertPresentException
from
marionette_driver
.
marionette
import
Alert
from
firefox_ui_harness
.
testcases
import
FirefoxTestCase
class
TestSubmitUnencryptedInfoWarning
(
FirefoxTestCase
)
:
    
def
setUp
(
self
)
:
        
FirefoxTestCase
.
setUp
(
self
)
        
self
.
url
=
'
https
:
/
/
ssl
-
dv
.
mozqa
.
com
/
data
/
firefox
/
security
/
unencryptedsearch
.
html
'
        
self
.
test_string
=
'
mozilla
'
        
self
.
prefs
.
set_pref
(
'
security
.
warn_submit_insecure
'
True
)
    
def
test_submit_unencrypted_info_warning
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
self
.
url
)
            
searchbox
=
self
.
marionette
.
find_element
(
By
.
ID
'
q
'
)
            
button
=
self
.
marionette
.
find_element
(
By
.
ID
'
submit
'
)
            
searchbox
.
send_keys
(
self
.
test_string
)
            
button
.
click
(
)
            
message
=
self
.
browser
.
get_property
(
'
formPostSecureToInsecureWarning
.
message
'
)
            
message
=
message
.
replace
(
'
#
#
'
'
\
n
\
n
'
)
            
warning
=
Alert
(
self
.
marionette
)
            
try
:
                
Wait
(
self
.
marionette
                     
ignored_exceptions
=
NoAlertPresentException
                     
timeout
=
self
.
browser
.
timeout_page_load
)
.
until
(
                    
lambda
_
:
warning
.
text
=
=
message
)
            
finally
:
                
warning
.
accept
(
)
            
Wait
(
self
.
marionette
)
.
until
(
expected
.
element_stale
(
searchbox
)
)
            
Wait
(
self
.
marionette
timeout
=
self
.
browser
.
timeout_page_load
)
.
until
(
                
lambda
mn
:
mn
.
execute_script
(
'
return
document
.
readyState
=
=
"
DOMContentLoaded
"
|
|
'
                                             
'
document
.
readyState
=
=
"
complete
"
;
'
)
            
)
            
search_term
=
self
.
marionette
.
find_element
(
By
.
ID
'
search
-
term
'
)
            
self
.
assertEqual
(
search_term
.
get_attribute
(
'
textContent
'
)
self
.
test_string
)
