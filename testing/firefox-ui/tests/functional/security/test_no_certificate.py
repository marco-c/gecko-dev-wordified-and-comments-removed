from
urlparse
import
urlparse
from
firefox_puppeteer
import
PuppeteerMixin
from
marionette_driver
import
expected
Wait
from
marionette_harness
import
MarionetteTestCase
class
TestNoCertificate
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestNoCertificate
self
)
.
setUp
(
)
        
self
.
locationbar
=
self
.
browser
.
navbar
.
locationbar
        
self
.
identity_popup
=
self
.
locationbar
.
identity_popup
        
self
.
url
=
self
.
marionette
.
absolute_url
(
'
layout
/
mozilla
.
html
'
)
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
browser
.
switch_to
(
)
            
self
.
identity_popup
.
close
(
force
=
True
)
            
self
.
puppeteer
.
windows
.
close_all
(
[
self
.
browser
]
)
        
finally
:
            
super
(
TestNoCertificate
self
)
.
tearDown
(
)
    
def
test_no_certificate
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
self
.
url
)
        
favicon_hidden
=
self
.
marionette
.
execute_script
(
"
"
"
          
return
arguments
[
0
]
.
hasAttribute
(
"
hidden
"
)
;
        
"
"
"
script_args
=
[
self
.
browser
.
navbar
.
locationbar
.
identity_icon
]
)
        
self
.
assertFalse
(
favicon_hidden
'
The
identity
icon
is
visible
'
)
        
self
.
assertEqual
(
self
.
locationbar
.
identity_organization_label
.
get_property
(
'
value
'
)
'
'
                         
'
The
organization
has
no
label
'
)
        
self
.
locationbar
.
open_identity_popup
(
)
        
self
.
assertEqual
(
self
.
identity_popup
.
element
.
get_attribute
(
'
connection
'
)
'
not
-
secure
'
)
        
expected
.
element_not_present
(
lambda
m
:
self
.
identity_popup
.
main
.
expander
)
        
secure_label
=
self
.
identity_popup
.
view
.
main
.
secure_connection_label
        
self
.
assertEqual
(
secure_label
.
value_of_css_property
(
'
display
'
)
'
none
'
)
        
insecure_label
=
self
.
identity_popup
.
view
.
main
.
insecure_connection_label
        
self
.
assertNotEqual
(
insecure_label
.
value_of_css_property
(
'
display
'
)
'
none
'
)
        
self
.
identity_popup
.
view
.
main
.
expander
.
click
(
)
        
Wait
(
self
.
marionette
)
.
until
(
lambda
_
:
self
.
identity_popup
.
view
.
security
.
selected
)
        
page_info
=
self
.
browser
.
open_page_info_window
(
            
lambda
_
:
self
.
identity_popup
.
view
.
security
.
more_info_button
.
click
(
)
)
        
self
.
assertEqual
(
page_info
.
deck
.
selected_panel
page_info
.
deck
.
security
)
        
self
.
assertIn
(
urlparse
(
self
.
url
)
.
hostname
                      
page_info
.
deck
.
security
.
domain
.
get_property
(
'
value
'
)
)
        
self
.
assertEqual
(
page_info
.
deck
.
security
.
owner
.
get_property
(
'
value
'
)
                         
page_info
.
localize_property
(
'
securityNoOwner
'
)
)
        
self
.
assertEqual
(
page_info
.
deck
.
security
.
verifier
.
get_property
(
'
value
'
)
                         
page_info
.
localize_property
(
'
notset
'
)
)
