import
time
from
marionette_driver
import
By
Wait
expected
from
marionette_harness
import
MarionetteTestCase
WindowManagerMixin
class
TestSafeBrowsingNotificationBar
(
WindowManagerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestSafeBrowsingNotificationBar
self
)
.
setUp
(
)
        
self
.
test_data
=
[
            
{
"
unsafe_page
"
:
"
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
unwanted
.
html
"
}
            
{
"
unsafe_page
"
:
"
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
"
}
            
{
"
unsafe_page
"
:
"
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
an
-
attack
.
html
"
}
        
]
        
self
.
default_homepage
=
self
.
marionette
.
get_pref
(
"
browser
.
startup
.
homepage
"
)
        
self
.
marionette
.
set_pref
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
True
)
        
self
.
marionette
.
set_pref
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
True
)
        
time
.
sleep
(
3
)
        
new_tab
=
self
.
open_tab
(
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
marionette
.
clear_pref
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
)
            
self
.
marionette
.
clear_pref
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
)
            
self
.
remove_permission
(
"
https
:
/
/
www
.
itisatrap
.
org
"
"
safe
-
browsing
"
)
            
self
.
close_all_tabs
(
)
        
finally
:
            
super
(
TestSafeBrowsingNotificationBar
self
)
.
tearDown
(
)
    
def
test_notification_bar
(
self
)
:
        
for
item
in
self
.
test_data
:
            
unsafe_page
=
item
[
"
unsafe_page
"
]
            
self
.
marionette
.
navigate
(
unsafe_page
)
            
time
.
sleep
(
1
)
            
self
.
check_ignore_warning_link
(
unsafe_page
)
            
self
.
check_get_me_out_of_here_button
(
)
            
self
.
marionette
.
navigate
(
unsafe_page
)
            
time
.
sleep
(
1
)
            
self
.
check_ignore_warning_link
(
unsafe_page
)
            
self
.
check_x_button
(
)
    
def
get_final_url
(
self
url
)
:
        
self
.
marionette
.
navigate
(
url
)
        
return
self
.
marionette
.
get_url
(
)
    
def
remove_permission
(
self
host
permission
)
:
        
with
self
.
marionette
.
using_context
(
"
chrome
"
)
:
            
self
.
marionette
.
execute_script
(
                
"
"
"
              
let
uri
=
Services
.
io
.
newURI
(
arguments
[
0
]
null
null
)
;
              
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
              
Services
.
perms
.
removeFromPrincipal
(
principal
arguments
[
1
]
)
;
            
"
"
"
                
script_args
=
[
host
permission
]
            
)
    
def
check_ignore_warning_link
(
self
unsafe_page
)
:
        
button
=
self
.
marionette
.
find_element
(
By
.
ID
"
seeDetailsButton
"
)
        
button
.
click
(
)
        
time
.
sleep
(
1
)
        
link
=
self
.
marionette
.
find_element
(
By
.
ID
"
ignore_warning_link
"
)
        
link
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
expected
.
element_present
(
By
.
ID
"
main
-
feature
"
)
            
message
=
'
Expected
target
element
"
#
main
-
feature
"
has
not
been
found
'
        
)
        
self
.
assertEqual
(
self
.
marionette
.
get_url
(
)
self
.
get_final_url
(
unsafe_page
)
)
        
self
.
remove_permission
(
"
https
:
/
/
www
.
itisatrap
.
org
"
"
safe
-
browsing
"
)
    
def
check_get_me_out_of_here_button
(
self
)
:
        
with
self
.
marionette
.
using_context
(
"
chrome
"
)
:
            
notification_box
=
self
.
marionette
.
find_element
(
                
By
.
CSS_SELECTOR
'
vbox
.
notificationbox
-
stack
[
slot
=
"
selected
"
]
'
            
)
            
message
=
notification_box
.
find_element
(
                
By
.
CSS_SELECTOR
"
notification
-
message
"
            
)
            
button_container
=
message
.
get_property
(
"
buttonContainer
"
)
            
button
=
button_container
.
find_element
(
                
By
.
CSS_SELECTOR
'
button
[
label
=
"
Get
me
out
of
here
!
"
]
'
            
)
            
button
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
lambda
mn
:
self
.
default_homepage
in
mn
.
get_url
(
)
            
message
=
"
The
default
home
page
has
not
been
loaded
"
        
)
    
def
check_x_button
(
self
)
:
        
with
self
.
marionette
.
using_context
(
"
chrome
"
)
:
            
notification_box
=
self
.
marionette
.
find_element
(
                
By
.
CSS_SELECTOR
'
vbox
.
notificationbox
-
stack
[
slot
=
"
selected
"
]
'
            
)
            
message
=
notification_box
.
find_element
(
                
By
.
CSS_SELECTOR
"
notification
-
message
[
value
=
blocked
-
badware
-
page
]
"
            
)
            
button
=
message
.
get_property
(
"
closeButtonEl
"
)
            
button
.
click
(
)
            
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
                
expected
.
element_stale
(
button
)
                
message
=
"
The
notification
bar
has
not
been
closed
"
            
)
