from
__future__
import
absolute_import
import
time
from
firefox_puppeteer
import
PuppeteerMixin
from
marionette_driver
import
By
expected
Wait
from
marionette_harness
import
MarionetteTestCase
class
TestSafeBrowsingNotificationBar
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestSafeBrowsingNotificationBar
self
)
.
setUp
(
)
        
self
.
test_data
=
[
            
{
                
'
unsafe_page
'
:
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
unwanted
.
html
'
            
}
            
{
                
'
unsafe_page
'
:
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
a
-
trap
.
html
'
            
}
            
{
                
'
unsafe_page
'
:
'
https
:
/
/
www
.
itisatrap
.
org
/
firefox
/
its
-
an
-
attack
.
html
'
            
}
        
]
        
self
.
marionette
.
set_pref
(
'
browser
.
safebrowsing
.
phishing
.
enabled
'
True
)
        
self
.
marionette
.
set_pref
(
'
browser
.
safebrowsing
.
malware
.
enabled
'
True
)
        
time
.
sleep
(
3
)
        
self
.
browser
.
tabbar
.
open_tab
(
)
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
puppeteer
.
utils
.
permissions
.
remove
(
'
https
:
/
/
www
.
itisatrap
.
org
'
'
safe
-
browsing
'
)
            
self
.
browser
.
tabbar
.
close_all_tabs
(
[
self
.
browser
.
tabbar
.
tabs
[
0
]
]
)
            
self
.
marionette
.
clear_pref
(
'
browser
.
safebrowsing
.
phishing
.
enabled
'
)
            
self
.
marionette
.
clear_pref
(
'
browser
.
safebrowsing
.
malware
.
enabled
'
)
        
finally
:
            
super
(
TestSafeBrowsingNotificationBar
self
)
.
tearDown
(
)
    
def
test_notification_bar
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
for
item
in
self
.
test_data
:
                
unsafe_page
=
item
[
'
unsafe_page
'
]
                
self
.
marionette
.
navigate
(
unsafe_page
)
                
time
.
sleep
(
1
)
                
self
.
check_ignore_warning_link
(
unsafe_page
)
                
self
.
check_get_me_out_of_here_button
(
)
                
self
.
marionette
.
navigate
(
unsafe_page
)
                
time
.
sleep
(
1
)
                
self
.
check_ignore_warning_link
(
unsafe_page
)
                
self
.
check_x_button
(
)
    
def
check_ignore_warning_link
(
self
unsafe_page
)
:
        
button
=
self
.
marionette
.
find_element
(
By
.
ID
'
seeDetailsButton
'
)
        
button
.
click
(
)
        
time
.
sleep
(
1
)
        
link
=
self
.
marionette
.
find_element
(
By
.
ID
'
ignore_warning_link
'
)
        
link
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
expected
.
element_present
(
By
.
ID
'
main
-
feature
'
)
            
message
=
'
Expected
target
element
"
#
main
-
feature
"
has
not
been
found
'
        
)
        
self
.
assertEquals
(
self
.
marionette
.
get_url
(
)
self
.
browser
.
get_final_url
(
unsafe_page
)
)
        
self
.
puppeteer
.
utils
.
permissions
.
remove
(
'
https
:
/
/
www
.
itisatrap
.
org
'
'
safe
-
browsing
'
)
    
def
check_get_me_out_of_here_button
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
chrome
'
)
:
            
button
=
(
self
.
marionette
.
find_element
(
By
.
ID
'
tabbrowser
-
tabbox
'
)
                      
.
find_element
(
By
.
CSS_SELECTOR
'
button
[
label
=
"
Get
me
out
of
here
!
"
]
'
)
)
            
button
.
click
(
)
        
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
            
lambda
mn
:
self
.
browser
.
default_homepage
in
mn
.
get_url
(
)
            
message
=
'
The
default
home
page
has
not
been
loaded
'
        
)
    
def
check_x_button
(
self
)
:
        
with
self
.
marionette
.
using_context
(
'
chrome
'
)
:
            
button
=
(
self
.
marionette
.
find_element
(
By
.
ID
'
tabbrowser
-
tabbox
'
)
                      
.
find_element
(
By
.
CSS_SELECTOR
'
notification
[
value
=
blocked
-
badware
-
page
]
'
)
                      
.
find_element
(
By
.
CSS_SELECTOR
'
.
messageCloseButton
'
)
)
            
button
.
click
(
)
            
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
                
expected
.
element_stale
(
button
)
                
message
=
'
The
notification
bar
has
not
been
closed
'
            
)
