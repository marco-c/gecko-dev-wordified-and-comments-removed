from
__future__
import
absolute_import
from
firefox_puppeteer
import
PuppeteerMixin
from
firefox_puppeteer
.
ui
.
browser
.
window
import
BrowserWindow
from
marionette_driver
import
By
Wait
from
marionette_harness
import
MarionetteTestCase
class
TestAboutPrivateBrowsingWithSearch
(
PuppeteerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestAboutPrivateBrowsingWithSearch
self
)
.
setUp
(
)
        
support_url
=
'
about
:
blank
?
'
        
self
.
marionette
.
enforce_gecko_prefs
(
{
            
'
browser
.
search
.
geoSpecificDefaults
'
:
False
            
'
browser
.
search
.
addonLoadTimeout
'
:
0
        
}
)
        
self
.
marionette
.
set_pref
(
'
app
.
support
.
baseURL
'
support_url
)
        
self
.
pb_url
=
support_url
+
'
private
-
browsing
-
myths
'
    
def
tearDown
(
self
)
:
        
try
:
            
self
.
puppeteer
.
windows
.
close_all
(
[
self
.
browser
]
)
            
self
.
browser
.
switch_to
(
)
            
self
.
marionette
.
clear_pref
(
'
app
.
support
.
baseURL
'
)
        
finally
:
            
super
(
TestAboutPrivateBrowsingWithSearch
self
)
.
tearDown
(
)
    
def
testCheckAboutPrivateBrowsingWithSearch
(
self
)
:
        
self
.
assertFalse
(
self
.
browser
.
is_private
)
        
with
self
.
marionette
.
using_context
(
'
content
'
)
:
            
self
.
marionette
.
navigate
(
'
about
:
privatebrowsing
'
)
        
def
window_opener
(
win
)
:
            
with
win
.
marionette
.
using_context
(
'
content
'
)
:
                
button
=
self
.
marionette
.
find_element
(
By
.
ID
'
startPrivateBrowsing
'
)
                
button
.
click
(
)
        
pb_window
=
self
.
browser
.
open_window
(
callback
=
window_opener
                                             
expected_window_class
=
BrowserWindow
)
        
try
:
            
self
.
assertTrue
(
pb_window
.
is_private
)
            
with
self
.
marionette
.
using_context
(
'
content
'
)
:
                
search
=
self
.
marionette
.
find_element
(
By
.
ID
'
search
-
handoff
-
button
'
)
                
search
.
click
(
)
            
self
.
assertTrue
(
pb_window
.
navbar
.
locationbar
.
focused
'
url
bar
is
focused
'
)
            
pb_window
.
navbar
.
locationbar
.
urlbar
.
send_keys
(
'
foo
'
)
            
self
.
assertEqual
(
pb_window
.
navbar
.
locationbar
.
value
'
google
foo
'
                             
'
url
bar
prepends
the
search
shortcut
'
)
            
with
self
.
marionette
.
using_context
(
'
content
'
)
:
                
link
=
self
.
marionette
.
find_element
(
By
.
ID
'
private
-
browsing
-
myths
'
)
                
link
.
click
(
)
                
Wait
(
self
.
marionette
timeout
=
self
.
marionette
.
timeout
.
page_load
)
.
until
(
                    
lambda
_
:
self
.
marionette
.
get_url
(
)
=
=
self
.
pb_url
)
        
finally
:
            
pb_window
.
close
(
)
