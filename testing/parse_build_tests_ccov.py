from
__future__
import
absolute_import
import
sys
import
os
import
pathlib
import
shutil
import
subprocess
import
tempfile
import
zipfile
import
buildconfig
def
main
(
)
:
    
if
not
buildconfig
.
substs
.
get
(
"
MOZ_CODE_COVERAGE
"
)
or
not
buildconfig
.
substs
.
get
(
        
"
MOZ_RUST_TESTS
"
    
)
:
        
return
    
assert
(
        
"
GRCOV_PATH
"
in
os
.
environ
    
)
"
The
environment
variable
GRCOV_PATH
should
contain
a
path
to
grcov
"
    
grcov_path
=
os
.
environ
[
"
GRCOV_PATH
"
]
    
assert
os
.
path
.
exists
(
grcov_path
)
"
grcov
should
exist
"
    
grcov_command
=
[
        
grcov_path
        
"
-
t
"
        
"
lcov
"
        
"
-
p
"
        
buildconfig
.
topsrcdir
        
buildconfig
.
topobjdir
    
]
    
if
buildconfig
.
substs
[
"
OS_TARGET
"
]
=
=
"
WINNT
"
:
        
windows_sdk_dir
=
None
        
config_opts
=
buildconfig
.
substs
[
"
MOZ_CONFIGURE_OPTIONS
"
]
.
split
(
"
"
)
        
for
opt
in
config_opts
:
            
if
opt
.
startswith
(
"
WINDOWSSDKDIR
=
"
)
:
                
windows_sdk_dir
=
opt
[
len
(
"
WINDOWSSDKDIR
=
"
)
:
]
                
break
        
assert
(
            
windows_sdk_dir
is
not
None
        
)
"
WINDOWSSDKDIR
should
be
in
MOZ_CONFIGURE_OPTIONS
"
        
ignore_dir_abs
=
pathlib
.
Path
(
windows_sdk_dir
)
.
parent
        
assert
ignore_dir_abs
.
is_dir
(
)
f
"
{
ignore_dir_abs
}
is
not
a
directory
"
        
ignore_dir_rel
=
ignore_dir_abs
.
relative_to
(
buildconfig
.
topsrcdir
)
        
grcov_command
+
=
[
            
"
-
-
ignore
"
            
f
"
{
ignore_dir_rel
}
*
"
        
]
    
if
buildconfig
.
substs
[
"
OS_TARGET
"
]
=
=
"
Linux
"
:
        
gcc_dir
=
os
.
path
.
join
(
os
.
environ
[
"
MOZ_FETCHES_DIR
"
]
"
gcc
"
)
        
if
"
LD_LIBRARY_PATH
"
in
os
.
environ
:
            
os
.
environ
[
"
LD_LIBRARY_PATH
"
]
=
"
{
}
/
lib64
/
:
{
}
"
.
format
(
                
gcc_dir
os
.
environ
[
"
LD_LIBRARY_PATH
"
]
            
)
        
else
:
            
os
.
environ
[
"
LD_LIBRARY_PATH
"
]
=
"
{
}
/
lib64
/
"
.
format
(
gcc_dir
)
        
os
.
environ
[
"
PATH
"
]
=
"
{
}
/
bin
/
:
{
}
"
.
format
(
gcc_dir
os
.
environ
[
"
PATH
"
]
)
    
grcov_output
=
subprocess
.
check_output
(
grcov_command
)
    
grcov_zip_path
=
os
.
path
.
join
(
buildconfig
.
topobjdir
"
code
-
coverage
-
grcov
.
zip
"
)
    
with
zipfile
.
ZipFile
(
grcov_zip_path
"
a
"
zipfile
.
ZIP_DEFLATED
)
as
z
:
        
z
.
writestr
(
"
grcov_lcov_output
.
info
"
grcov_output
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
