const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
NetworkObserver
:
"
resource
:
/
/
devtools
/
shared
/
network
-
observer
/
NetworkObserver
.
sys
.
mjs
"
}
)
;
class
NetworkEventRecord
{
addCacheDetails
(
)
{
}
addRawHeaders
(
)
{
}
addRequestPostData
(
)
{
}
addResponseStart
(
)
{
}
addSecurityInfo
(
)
{
}
addEventTimings
(
)
{
}
addResponseCache
(
)
{
}
addResponseContent
(
)
{
}
addResponseContentComplete
(
)
{
}
addServerTimings
(
)
{
}
addServiceWorkerTimings
(
)
{
}
}
class
NetworkThrottler
{
#
devtoolsNetworkObserver
;
#
throttling
;
constructor
(
)
{
this
.
#
throttling
=
false
;
}
destroy
(
)
{
this
.
stop
(
)
;
}
start
(
throttleData
)
{
if
(
this
.
#
throttling
)
{
console
.
error
(
"
NetworkThrottler
already
started
"
)
;
return
;
}
this
.
#
devtoolsNetworkObserver
=
new
lazy
.
NetworkObserver
(
{
ignoreChannelFunction
:
this
.
#
ignoreChannelFunction
onNetworkEvent
:
this
.
#
onNetworkEvent
}
)
;
this
.
#
devtoolsNetworkObserver
.
setThrottleData
(
throttleData
)
;
this
.
#
throttling
=
true
;
}
stop
(
)
{
if
(
!
this
.
#
throttling
)
{
return
;
}
this
.
#
devtoolsNetworkObserver
.
destroy
(
)
;
this
.
#
devtoolsNetworkObserver
=
null
;
this
.
#
throttling
=
false
;
}
#
ignoreChannelFunction
=
channel
=
>
{
if
(
channel
.
loadInfo
?
.
loadingDocument
=
=
=
null
&
&
(
channel
.
loadInfo
.
loadingPrincipal
=
=
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
|
|
channel
.
loadInfo
.
isInDevToolsContext
)
)
{
return
true
;
}
return
false
;
}
;
#
onNetworkEvent
=
(
networkEvent
channel
)
=
>
{
return
new
NetworkEventRecord
(
networkEvent
channel
this
)
;
}
;
}
