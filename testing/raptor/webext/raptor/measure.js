var
perfData
=
window
.
performance
;
var
gRetryCounter
=
0
;
var
getHero
=
false
;
var
heroesToCapture
=
[
]
;
var
getFNBPaint
=
false
;
var
getFCP
=
false
;
var
startMeasure
=
"
fetchStart
"
;
function
contentHandler
(
)
{
if
(
typeof
(
browser
)
!
=
=
"
undefined
"
)
{
browser
.
storage
.
local
.
get
(
"
settings
"
)
.
then
(
function
(
item
)
{
setup
(
item
.
settings
)
;
}
)
;
}
else
{
chrome
.
storage
.
local
.
get
(
"
settings
"
function
(
item
)
{
setup
(
item
.
settings
)
;
}
)
;
}
}
function
setup
(
settings
)
{
if
(
settings
.
type
!
=
"
pageload
"
)
{
return
;
}
if
(
settings
.
measure
=
=
undefined
)
{
console
.
log
(
"
abort
:
'
measure
'
key
not
found
in
test
settings
"
)
;
return
;
}
if
(
settings
.
measure
.
fnbpaint
!
=
=
undefined
)
{
getFNBPaint
=
settings
.
measure
.
fnbpaint
;
if
(
getFNBPaint
)
{
console
.
log
(
"
will
be
measuring
fnbpaint
"
)
;
measureFNBPaint
(
)
;
}
}
if
(
settings
.
measure
.
fcp
!
=
=
undefined
)
{
getFCP
=
settings
.
measure
.
fcp
;
if
(
getFCP
)
{
console
.
log
(
"
will
be
measuring
first
-
contentful
-
paint
"
)
;
measureFirstContentfulPaint
(
)
;
}
}
if
(
settings
.
measure
.
hero
!
=
=
undefined
)
{
if
(
settings
.
measure
.
hero
.
length
!
=
=
0
)
{
getHero
=
true
;
heroesToCapture
=
settings
.
measure
.
hero
;
console
.
log
(
"
hero
elements
to
measure
:
"
+
heroesToCapture
)
;
measureHero
(
)
;
}
}
}
function
measureHero
(
)
{
var
obs
=
null
;
var
heroElementsFound
=
window
.
document
.
querySelectorAll
(
"
[
elementtiming
]
"
)
;
console
.
log
(
"
found
"
+
heroElementsFound
.
length
+
"
hero
elements
in
the
page
"
)
;
if
(
heroElementsFound
)
{
function
callbackHero
(
entries
observer
)
{
entries
.
forEach
(
entry
=
>
{
var
heroFound
=
entry
.
target
.
getAttribute
(
"
elementtiming
"
)
;
perfData
.
mark
(
heroFound
)
;
console
.
log
(
"
found
hero
:
"
+
heroFound
)
;
perfData
.
measure
(
name
=
resultType
startMark
=
startMeasure
endMark
=
heroFound
)
;
var
perfResult
=
perfData
.
getEntriesByName
(
resultType
)
;
var
_result
=
Math
.
round
(
perfResult
[
0
]
.
duration
)
;
var
resultType
=
"
hero
:
"
+
heroFound
;
sendResult
(
resultType
_result
)
;
perfData
.
clearMarks
(
)
;
perfData
.
clearMeasures
(
)
;
obs
.
disconnect
(
)
;
}
)
;
}
var
options
=
{
root
:
null
rootMargin
:
"
0px
"
threshold
:
[
1
]
}
;
try
{
obs
=
new
window
.
IntersectionObserver
(
callbackHero
options
)
;
heroElementsFound
.
forEach
(
function
(
el
)
{
if
(
heroesToCapture
.
indexOf
(
el
.
getAttribute
(
"
elementtiming
"
)
)
>
-
1
)
obs
.
observe
(
el
)
;
}
)
;
}
catch
(
err
)
{
console
.
log
(
err
)
;
}
}
else
{
console
.
log
(
"
couldn
'
t
find
hero
element
"
)
;
}
}
function
measureFNBPaint
(
)
{
var
x
=
window
.
performance
.
timing
.
timeToNonBlankPaint
;
if
(
typeof
(
x
)
=
=
"
undefined
"
)
{
console
.
log
(
"
ERROR
:
timeToNonBlankPaint
is
undefined
;
ensure
the
pref
is
enabled
"
)
;
return
;
}
if
(
x
>
0
)
{
console
.
log
(
"
got
fnbpaint
"
)
;
gRetryCounter
=
0
;
var
startTime
=
perfData
.
timing
.
fetchStart
;
sendResult
(
"
fnbpaint
"
x
-
startTime
)
;
}
else
{
gRetryCounter
+
=
1
;
if
(
gRetryCounter
<
=
10
)
{
console
.
log
(
"
\
nfnbpaint
is
not
yet
available
(
0
)
retry
number
"
+
gRetryCounter
+
"
.
.
.
\
n
"
)
;
window
.
setTimeout
(
measureFNBPaint
100
)
;
}
else
{
console
.
log
(
"
\
nunable
to
get
a
value
for
fnbpaint
after
"
+
gRetryCounter
+
"
retries
\
n
"
)
;
}
}
}
function
measureFirstContentfulPaint
(
)
{
var
resultType
=
"
fcp
"
;
var
result
=
0
;
let
performanceEntries
=
perfData
.
getEntriesByType
(
"
paint
"
)
;
if
(
performanceEntries
.
length
>
=
2
)
{
if
(
performanceEntries
[
1
]
.
startTime
!
=
undefined
)
result
=
performanceEntries
[
1
]
.
startTime
;
}
if
(
result
>
0
)
{
console
.
log
(
"
got
time
to
first
-
contentful
-
paint
"
)
;
sendResult
(
resultType
result
)
;
perfData
.
clearMarks
(
)
;
perfData
.
clearMeasures
(
)
;
}
else
{
gRetryCounter
+
=
1
;
if
(
gRetryCounter
<
=
10
)
{
console
.
log
(
"
\
ntime
to
first
-
contentful
-
paint
is
not
yet
available
(
0
)
retry
number
"
+
gRetryCounter
+
"
.
.
.
\
n
"
)
;
window
.
setTimeout
(
measureFirstContentfulPaint
100
)
;
}
else
{
console
.
log
(
"
\
nunable
to
get
a
value
for
time
-
to
-
fcp
after
"
+
gRetryCounter
+
"
retries
\
n
"
)
;
}
}
}
function
sendResult
(
_type
_value
)
{
console
.
log
(
"
sending
result
back
to
runner
:
"
+
_type
+
"
"
+
_value
)
;
chrome
.
runtime
.
sendMessage
(
{
"
type
"
:
_type
"
value
"
:
_value
}
function
(
response
)
{
console
.
log
(
response
.
text
)
;
}
)
;
}
window
.
onload
=
contentHandler
(
)
;
