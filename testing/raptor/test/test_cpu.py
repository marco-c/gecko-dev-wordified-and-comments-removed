from
__future__
import
absolute_import
unicode_literals
import
mozunit
import
os
import
mock
import
sys
from
raptor
import
cpu
from
raptor
.
raptor
import
Raptor
here
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
if
os
.
environ
.
get
(
'
SCRIPTSPATH
'
None
)
is
not
None
:
    
mozharness_dir
=
os
.
environ
[
'
SCRIPTSPATH
'
]
else
:
    
mozharness_dir
=
os
.
path
.
join
(
here
'
.
.
/
.
.
/
mozharness
'
)
sys
.
path
.
insert
(
0
mozharness_dir
)
def
test_no_device
(
)
:
    
raptor
=
Raptor
(
'
geckoview
'
'
org
.
mozilla
.
org
.
mozilla
.
geckoview_example
'
cpu_test
=
True
)
    
raptor
.
device
=
None
    
resp
=
cpu
.
generate_android_cpu_profile
(
raptor
'
no_control_server_device
'
)
    
assert
resp
is
None
def
test_usage_with_invalid_data_returns_zero
(
)
:
    
with
mock
.
patch
(
'
mozdevice
.
adb
.
ADBDevice
'
)
as
device
:
        
with
mock
.
patch
(
'
raptor
.
raptor
.
RaptorControlServer
'
)
as
control_server
:
            
device
.
shell_output
.
return_value
=
'
geckoview
'
            
device
.
_verbose
=
True
            
control_server
.
cpu_test
=
True
            
control_server
.
device
=
device
            
raptor
=
Raptor
(
'
geckoview
'
'
org
.
mozilla
.
geckoview_example
'
cpu_test
=
True
)
            
raptor
.
config
[
'
cpu_test
'
]
=
True
            
raptor
.
control_server
=
control_server
            
raptor
.
device
=
device
            
cpuinfo_data
=
{
                
'
type
'
:
'
cpu
'
                
'
test
'
:
'
usage_with_invalid_data_returns_zero
'
                
'
unit
'
:
'
%
'
                
'
values
'
:
{
                    
'
browser_cpu_usage
'
:
float
(
0
)
                
}
            
}
            
cpu
.
generate_android_cpu_profile
(
                
raptor
                
"
usage_with_invalid_data_returns_zero
"
)
            
control_server
.
submit_supporting_data
.
assert_called_once_with
(
cpuinfo_data
)
def
test_usage_with_output
(
)
:
    
with
mock
.
patch
(
'
mozdevice
.
adb
.
ADBDevice
'
)
as
device
:
        
with
mock
.
patch
(
'
raptor
.
raptor
.
RaptorControlServer
'
)
as
control_server
:
            
filepath
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
+
'
/
files
/
'
            
f
=
open
(
filepath
+
'
top
-
info
.
txt
'
'
r
'
)
            
device
.
shell_output
.
return_value
=
f
.
read
(
)
            
device
.
_verbose
=
True
            
control_server
.
cpu_test
=
True
            
control_server
.
test_name
=
'
cpuunittest
'
            
control_server
.
device
=
device
            
control_server
.
app_name
=
'
org
.
mozilla
.
geckoview_example
'
            
raptor
=
Raptor
(
'
geckoview
'
'
org
.
mozilla
.
geckoview_example
'
cpu_test
=
True
)
            
raptor
.
device
=
device
            
raptor
.
config
[
'
cpu_test
'
]
=
True
            
raptor
.
control_server
=
control_server
            
cpuinfo_data
=
{
                
u
'
type
'
:
u
'
cpu
'
                
u
'
test
'
:
u
'
usage_with_integer_cpu_info_output
'
                
u
'
unit
'
:
u
'
%
'
                
u
'
values
'
:
{
                    
u
'
browser_cpu_usage
'
:
'
93
.
7
'
                
}
            
}
            
cpu
.
generate_android_cpu_profile
(
                
raptor
                
"
usage_with_integer_cpu_info_output
"
)
            
control_server
.
submit_supporting_data
.
assert_called_once_with
(
cpuinfo_data
)
if
__name__
=
=
'
__main__
'
:
    
mozunit
.
main
(
)
