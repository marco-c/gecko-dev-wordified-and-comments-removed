from
__future__
import
absolute_import
import
os
import
shutil
import
socket
from
mozlog
import
get_proxy_logger
from
wptserve
import
server
handlers
LOG
=
get_proxy_logger
(
component
=
"
raptor
-
benchmark
"
)
here
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
class
Benchmark
(
object
)
:
    
"
"
"
utility
class
for
running
benchmarks
in
raptor
"
"
"
    
def
__init__
(
self
config
test
)
:
        
self
.
config
=
config
        
self
.
test
=
test
        
if
self
.
config
.
get
(
"
obj_path
"
None
)
is
not
None
:
            
self
.
bench_dir
=
self
.
config
.
get
(
"
obj_path
"
)
        
else
:
            
self
.
bench_dir
=
here
        
if
self
.
config
.
get
(
'
run_local
'
False
)
:
            
self
.
bench_dir
=
os
.
path
.
join
(
self
.
bench_dir
'
testing
'
'
raptor
'
'
benchmarks
'
)
        
else
:
            
self
.
bench_dir
=
os
.
path
.
join
(
self
.
bench_dir
'
tests
'
'
webkit
'
'
PerformanceTests
'
)
            
fetches_dir
=
os
.
environ
.
get
(
'
MOZ_FETCHES_DIR
'
)
            
if
fetches_dir
and
os
.
path
.
isdir
(
fetches_dir
)
:
                
for
name
in
os
.
listdir
(
fetches_dir
)
:
                    
path
=
os
.
path
.
join
(
fetches_dir
name
)
                    
if
os
.
path
.
isdir
(
path
)
:
                        
shutil
.
copytree
(
path
os
.
path
.
join
(
self
.
bench_dir
name
)
)
        
LOG
.
info
(
"
bench_dir
contains
:
"
)
        
LOG
.
info
(
os
.
listdir
(
self
.
bench_dir
)
)
        
self
.
start_http_server
(
)
    
def
start_http_server
(
self
)
:
        
self
.
write_server_headers
(
)
        
sock
=
socket
.
socket
(
socket
.
AF_INET
socket
.
SOCK_STREAM
)
        
sock
.
bind
(
(
'
'
0
)
)
        
self
.
port
=
sock
.
getsockname
(
)
[
1
]
        
sock
.
close
(
)
        
_webserver
=
'
127
.
0
.
0
.
1
:
%
d
'
%
self
.
port
        
self
.
httpd
=
self
.
setup_webserver
(
_webserver
)
        
self
.
httpd
.
start
(
)
    
def
write_server_headers
(
self
)
:
        
LOG
.
info
(
"
writing
wptserve
headers
file
"
)
        
headers_file
=
os
.
path
.
join
(
self
.
bench_dir
'
__dir__
.
headers
'
)
        
file
=
open
(
headers_file
'
w
'
)
        
file
.
write
(
"
Access
-
Control
-
Allow
-
Origin
:
*
"
)
        
file
.
close
(
)
        
LOG
.
info
(
"
wrote
wpt
headers
file
:
%
s
"
%
headers_file
)
    
def
setup_webserver
(
self
webserver
)
:
        
LOG
.
info
(
"
starting
webserver
on
%
r
"
%
webserver
)
        
LOG
.
info
(
"
serving
benchmarks
from
here
:
%
s
"
%
self
.
bench_dir
)
        
self
.
host
self
.
port
=
webserver
.
split
(
'
:
'
)
        
return
server
.
WebTestHttpd
(
port
=
int
(
self
.
port
)
doc_root
=
self
.
bench_dir
                                   
routes
=
[
(
"
GET
"
"
*
"
handlers
.
file_handler
)
]
)
    
def
stop_serve
(
self
)
:
        
LOG
.
info
(
"
TODO
:
stop
serving
benchmark
source
"
)
        
pass
