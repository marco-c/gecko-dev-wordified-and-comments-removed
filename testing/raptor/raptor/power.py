from
__future__
import
absolute_import
import
os
import
re
from
logger
.
logger
import
RaptorLogger
LOG
=
RaptorLogger
(
component
=
'
raptor
-
power
'
)
def
init_android_power_test
(
raptor
)
:
    
upload_dir
=
os
.
getenv
(
"
MOZ_UPLOAD_DIR
"
)
    
if
not
upload_dir
:
        
LOG
.
critical
(
            
"
%
s
power
test
ignored
;
MOZ_UPLOAD_DIR
unset
"
%
raptor
.
config
[
"
app
"
]
        
)
        
return
    
raptor
.
screen_off_timeout
=
raptor
.
device
.
shell_output
(
        
"
settings
get
system
screen_off_timeout
"
    
)
.
strip
(
)
    
raptor
.
device
.
shell_output
(
"
settings
put
system
screen_off_timeout
7200000
"
)
    
raptor
.
screen_brightness
=
raptor
.
device
.
shell_output
(
        
"
settings
get
system
screen_brightness
"
    
)
.
strip
(
)
    
raptor
.
device
.
shell_output
(
"
settings
put
system
screen_brightness
127
"
)
    
raptor
.
device
.
shell_output
(
"
dumpsys
batterystats
-
-
reset
"
)
    
raptor
.
device
.
shell_output
(
"
dumpsys
batterystats
-
-
enable
full
-
wake
-
history
"
)
    
filepath
=
os
.
path
.
join
(
upload_dir
"
battery
-
before
.
txt
"
)
    
with
open
(
filepath
"
w
"
)
as
output
:
        
output
.
write
(
raptor
.
device
.
shell_output
(
"
dumpsys
battery
"
)
)
def
finish_android_power_test
(
raptor
test_name
os_baseline
=
False
)
:
    
upload_dir
=
os
.
getenv
(
"
MOZ_UPLOAD_DIR
"
)
    
if
not
upload_dir
:
        
LOG
.
critical
(
            
"
%
s
power
test
ignored
because
MOZ_UPLOAD_DIR
was
not
set
"
%
test_name
        
)
        
return
    
raptor
.
device
.
shell_output
(
        
"
settings
put
system
screen_off_timeout
%
s
"
%
raptor
.
screen_off_timeout
    
)
    
raptor
.
device
.
shell_output
(
        
"
settings
put
system
screen_brightness
%
s
"
%
raptor
.
screen_brightness
    
)
    
filepath
=
os
.
path
.
join
(
upload_dir
"
battery
-
after
.
txt
"
)
    
with
open
(
filepath
"
w
"
)
as
output
:
        
output
.
write
(
raptor
.
device
.
shell_output
(
"
dumpsys
battery
"
)
)
    
verbose
=
raptor
.
device
.
_verbose
    
raptor
.
device
.
_verbose
=
False
    
filepath
=
os
.
path
.
join
(
upload_dir
"
batterystats
.
csv
"
)
    
with
open
(
filepath
"
w
"
)
as
output
:
        
output
.
write
(
raptor
.
device
.
shell_output
(
"
dumpsys
batterystats
-
-
checkin
"
)
)
    
filepath
=
os
.
path
.
join
(
upload_dir
"
batterystats
.
txt
"
)
    
with
open
(
filepath
"
w
"
)
as
output
:
        
batterystats
=
raptor
.
device
.
shell_output
(
"
dumpsys
batterystats
"
)
        
output
.
write
(
batterystats
)
    
raptor
.
device
.
_verbose
=
verbose
    
android_version
=
raptor
.
device
.
shell_output
(
        
"
getprop
ro
.
build
.
version
.
release
"
    
)
.
strip
(
)
    
major_android_version
=
int
(
android_version
.
split
(
'
.
'
)
[
0
]
)
    
estimated_power
=
False
    
uid
=
None
    
total
=
cpu
=
wifi
=
smearing
=
screen
=
proportional
=
0
    
full_screen
=
0
    
full_wifi
=
0
    
re_uid
=
re
.
compile
(
r
'
proc
=
(
[
^
:
]
+
)
:
"
%
s
"
'
%
raptor
.
config
[
"
binary
"
]
)
    
re_wifi
=
re
.
compile
(
r
'
.
*
wifi
=
(
[
\
d
.
]
+
)
.
*
'
)
    
re_cpu
=
re
.
compile
(
r
'
.
*
cpu
=
(
[
\
d
.
]
+
)
.
*
'
)
    
re_estimated_power
=
re
.
compile
(
r
"
\
s
+
Estimated
power
use
[
(
]
mAh
[
)
]
"
)
    
re_proportional
=
re
.
compile
(
r
"
proportional
=
(
[
\
d
.
]
+
)
"
)
    
re_screen
=
re
.
compile
(
r
"
screen
=
(
[
\
d
.
]
+
)
"
)
    
re_full_screen
=
re
.
compile
(
r
"
\
s
+
Screen
:
\
s
+
(
[
\
d
.
]
+
)
"
)
    
re_full_wifi
=
re
.
compile
(
r
"
\
s
+
Wifi
:
\
s
+
(
[
\
d
.
]
+
)
"
)
    
re_smear
=
re
.
compile
(
r
"
.
*
smearing
:
\
s
+
(
[
\
d
.
]
+
)
\
s
+
.
*
"
)
    
re_power
=
re
.
compile
(
        
r
"
\
s
+
Uid
\
s
+
\
w
+
[
:
]
\
s
+
(
[
\
d
.
]
+
)
[
(
]
(
[
\
s
\
w
\
d
.
\
=
]
*
)
(
?
:
(
[
)
]
"
        
r
"
Including
smearing
:
.
*
)
|
(
?
:
[
)
]
)
)
"
    
)
    
batterystats
=
batterystats
.
split
(
"
\
n
"
)
    
for
line
in
batterystats
:
        
if
uid
is
None
and
not
os_baseline
:
            
match
=
re_uid
.
search
(
line
)
            
if
match
:
                
uid
=
match
.
group
(
1
)
                
re_power
=
re
.
compile
(
                    
r
"
\
s
+
Uid
%
s
[
:
]
\
s
+
(
[
\
d
.
]
+
)
[
(
]
(
[
\
s
\
w
\
d
.
\
=
]
*
)
(
?
:
(
[
)
]
"
                    
r
"
Including
smearing
:
.
*
)
|
(
?
:
[
)
]
)
)
"
%
uid
                
)
                
continue
        
if
not
estimated_power
:
            
match
=
re_estimated_power
.
match
(
line
)
            
if
match
:
                
estimated_power
=
True
            
continue
        
if
full_screen
=
=
0
:
            
match
=
re_full_screen
.
match
(
line
)
            
if
match
and
match
.
group
(
1
)
:
                
full_screen
+
=
float
(
match
.
group
(
1
)
)
                
continue
        
if
full_wifi
=
=
0
:
            
match
=
re_full_wifi
.
match
(
line
)
            
if
match
and
match
.
group
(
1
)
:
                
full_wifi
+
=
float
(
match
.
group
(
1
)
)
                
continue
        
if
re_power
:
            
match
=
re_power
.
match
(
line
)
            
if
match
:
                
ttotal
breakdown
smear_info
=
match
.
groups
(
)
                
total
+
=
float
(
ttotal
)
if
ttotal
else
0
                
cpu_match
=
re_cpu
.
match
(
breakdown
)
                
if
cpu_match
and
cpu_match
.
group
(
1
)
:
                    
cpu
+
=
float
(
cpu_match
.
group
(
1
)
)
                
wifi_match
=
re_wifi
.
match
(
breakdown
)
                
if
wifi_match
and
wifi_match
.
group
(
1
)
:
                    
wifi
+
=
float
(
wifi_match
.
group
(
1
)
)
                
if
smear_info
:
                    
smear_match
=
re_smear
.
match
(
smear_info
)
                    
if
smear_match
and
smear_match
.
group
(
1
)
:
                        
smearing
+
=
float
(
smear_match
.
group
(
1
)
)
                    
screen_match
=
re_screen
.
search
(
line
)
                    
if
screen_match
and
screen_match
.
group
(
1
)
:
                        
screen
+
=
float
(
screen_match
.
group
(
1
)
)
                    
prop_match
=
re_proportional
.
search
(
smear_info
)
                    
if
prop_match
and
prop_match
.
group
(
1
)
:
                        
proportional
+
=
float
(
prop_match
.
group
(
1
)
)
        
if
full_screen
and
full_wifi
and
(
cpu
and
wifi
and
smearing
or
total
)
:
            
if
not
os_baseline
:
                
break
            
elif
line
.
replace
(
'
'
'
'
)
=
=
'
'
:
                
break
    
cpu
=
total
if
cpu
=
=
0
else
cpu
    
screen
=
full_screen
if
screen
=
=
0
else
screen
    
wifi
=
full_wifi
if
wifi
=
=
0
else
wifi
    
if
os_baseline
:
        
uid
=
'
all
'
    
LOG
.
info
(
        
"
power
data
for
uid
:
%
s
cpu
:
%
s
wifi
:
%
s
screen
:
%
s
proportional
:
%
s
"
        
%
(
uid
cpu
wifi
screen
proportional
)
    
)
    
power_data
=
{
        
"
type
"
:
"
power
"
        
"
test
"
:
test_name
        
"
unit
"
:
"
mAh
"
        
"
values
"
:
{
            
"
cpu
"
:
float
(
cpu
)
            
"
wifi
"
:
float
(
wifi
)
            
"
screen
"
:
float
(
screen
)
        
}
    
}
    
if
major_android_version
>
=
8
:
        
power_data
[
'
values
'
]
[
'
proportional
'
]
=
float
(
proportional
)
    
if
os_baseline
:
        
raptor
.
os_baseline_data
=
power_data
    
else
:
        
LOG
.
info
(
"
submitting
power
data
via
control
server
directly
"
)
        
raptor
.
control_server
.
submit_supporting_data
(
power_data
)
        
if
raptor
.
os_baseline_data
:
            
raptor
.
control_server
.
submit_supporting_data
(
raptor
.
os_baseline_data
)
        
LOG
.
info
(
"
generating
power
bugreport
zip
"
)
        
raptor
.
device
.
command_output
(
[
"
bugreport
"
upload_dir
]
)
