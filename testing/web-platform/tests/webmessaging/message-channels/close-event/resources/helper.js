function
expectMessagePortFromWindow
(
window
)
{
return
new
Promise
(
resolve
=
>
{
window
.
onmessage
=
e
=
>
{
try
{
assert_true
(
e
.
ports
[
0
]
instanceof
window
.
MessagePort
)
;
e
.
ports
[
0
]
.
start
(
)
;
resolve
(
e
.
ports
[
0
]
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
;
}
)
;
}
function
expectMessagePortFromWindowWithoutStartingIt
(
window
)
{
return
new
Promise
(
resolve
=
>
{
window
.
onmessage
=
e
=
>
{
try
{
assert_true
(
e
.
ports
[
0
]
instanceof
window
.
MessagePort
)
;
resolve
(
e
.
ports
[
0
]
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
;
}
)
;
}
async
function
createMessageChannelAndSendPortFollowedByClose
(
remoteContextWrapper
)
{
await
remoteContextWrapper
.
executeScript
(
(
)
=
>
{
const
{
port1
port2
}
=
new
MessageChannel
(
)
;
port1
.
start
(
)
;
window
.
opener
.
postMessage
(
{
}
'
*
'
[
port2
]
)
;
port1
.
close
(
)
;
}
)
;
}
async
function
createMessageChannelAndSendPort
(
remoteContextWrapper
)
{
await
remoteContextWrapper
.
executeScript
(
(
)
=
>
{
const
{
port1
port2
}
=
new
MessageChannel
(
)
;
port1
.
start
(
)
;
window
.
opener
.
postMessage
(
{
}
'
*
'
[
port2
]
)
;
window
.
closePort
=
(
)
=
>
{
port1
.
close
(
)
;
}
}
)
;
}
async
function
addWindow
(
)
{
const
helper
=
new
RemoteContextHelper
(
)
;
return
helper
.
addWindow
(
)
;
}
function
createCloseEventPromise
(
port
)
{
return
new
Promise
(
resolve
=
>
port
.
onclose
=
resolve
)
;
}
