'
use
strict
'
;
async
function
IsSharedStorageSelectUrlAllowedByPermissionsPolicy
(
)
{
const
errorMessage
=
'
The
\
"
shared
-
storage
-
select
-
url
\
"
Permissions
Policy
denied
the
usage
of
window
.
sharedStorage
.
selectURL
(
)
.
'
;
let
allowedByPermissionsPolicy
=
true
;
try
{
await
sharedStorage
.
selectURL
(
"
operation
"
[
{
url
:
"
1
.
html
"
}
]
)
;
assert_unreached
(
"
did
not
fail
"
)
;
}
catch
(
e
)
{
if
(
e
.
message
=
=
=
errorMessage
)
{
allowedByPermissionsPolicy
=
false
;
}
}
return
allowedByPermissionsPolicy
;
}
async
function
AreSharedStorageMethodsAllowedByPermissionsPolicy
(
)
{
let
permissionsPolicyDeniedCount
=
0
;
const
errorMessage
=
'
The
\
"
shared
-
storage
\
"
Permissions
Policy
denied
the
method
on
window
.
sharedStorage
.
'
;
try
{
await
window
.
sharedStorage
.
worklet
.
addModule
(
'
/
shared
-
storage
/
resources
/
simple
-
module
.
js
'
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
try
{
await
window
.
sharedStorage
.
run
(
'
operation
'
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
try
{
await
sharedStorage
.
selectURL
(
"
operation
"
[
{
url
:
"
1
.
html
"
}
]
)
;
assert_unreached
(
"
did
not
fail
"
)
;
}
catch
(
e
)
{
if
(
e
.
message
=
=
=
errorMessage
)
{
+
+
permissionsPolicyDeniedCount
;
}
}
try
{
await
window
.
sharedStorage
.
set
(
'
a
'
'
b
'
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
try
{
await
window
.
sharedStorage
.
append
(
'
a
'
'
b
'
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
try
{
await
window
.
sharedStorage
.
clear
(
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
try
{
await
window
.
sharedStorage
.
delete
(
'
a
'
)
;
}
catch
(
e
)
{
assert_equals
(
e
.
message
errorMessage
)
;
+
+
permissionsPolicyDeniedCount
;
}
if
(
permissionsPolicyDeniedCount
=
=
=
0
)
return
true
;
return
false
;
}
async
function
addModuleOnce
(
module
)
{
try
{
await
sharedStorage
.
worklet
.
addModule
(
module
)
;
}
catch
(
e
)
{
}
}
function
validateSelectURLResult
(
result
resolve_to_config
)
{
if
(
resolve_to_config
)
{
return
result
instanceof
FencedFrameConfig
;
}
return
result
.
startsWith
(
'
urn
:
uuid
:
'
)
;
}
