'
use
strict
'
;
function
parseQueryString
(
urlStr
)
{
const
url
=
new
URL
(
urlStr
)
;
const
result
=
{
}
;
for
(
const
[
key
value
]
of
url
.
searchParams
)
{
result
[
key
]
=
value
;
}
return
result
;
}
const
query
=
parseQueryString
(
location
)
;
function
generateAssertion
(
contents
origin
options
)
{
const
args
=
{
contents
origin
options
}
;
const
env
=
{
origin
location
}
;
const
assertion
=
{
watermark
:
'
mock
-
idp
.
js
.
watermark
'
args
env
query
}
;
const
assertionStr
=
JSON
.
stringify
(
assertion
)
;
const
{
generatorAction
}
=
query
;
if
(
generatorAction
=
=
=
'
throw
-
error
'
)
{
const
err
=
new
Error
(
'
Mock
Internal
IdP
Error
'
)
;
err
.
idpErrorInfo
=
query
.
errorInfo
;
throw
err
;
}
else
if
(
generatorAction
=
=
=
'
require
-
login
'
)
{
const
err
=
new
RTCError
(
'
idp
-
need
-
login
'
)
;
err
.
idpLoginUrl
=
{
origin
}
/
login
;
err
.
idpErrorInfo
=
'
login
required
'
;
throw
err
;
}
else
if
(
generatorAction
=
=
=
'
return
-
custom
-
idp
'
)
{
const
{
domain
protocol
}
=
query
;
return
{
idp
:
{
domain
protocol
}
assertion
:
assertionStr
}
;
}
else
if
(
generatorAction
=
=
=
'
return
-
invalid
-
result
'
)
{
return
'
invalid
-
result
'
;
}
else
{
return
{
idp
:
{
domain
:
location
.
host
protocol
:
'
mock
-
idp
.
js
'
}
assertion
:
assertionStr
}
;
}
}
function
validateAssertion
(
assertionStr
origin
)
{
const
assertion
=
JSON
.
parse
(
assertionStr
)
;
const
{
args
query
}
=
assertion
;
const
{
contents
options
}
=
args
;
const
identity
=
options
.
usernameHint
;
const
{
validatorAction
}
=
query
;
if
(
validatorAction
=
=
=
'
throw
-
error
'
)
{
const
err
=
new
Error
(
'
Mock
Internal
IdP
Error
'
)
;
err
.
idpErrorInfo
=
query
.
errorInfo
;
throw
err
;
}
else
if
(
validatorAction
=
=
=
'
return
-
custom
-
contents
'
)
{
const
{
contents
}
=
query
;
return
{
identity
contents
}
;
}
else
{
return
{
identity
contents
}
;
}
}
if
(
rtcIdentityProvider
&
&
query
.
action
!
=
=
'
do
-
not
-
register
'
)
{
rtcIdentityProvider
.
register
(
{
generateAssertion
validateAssertion
}
)
;
}
