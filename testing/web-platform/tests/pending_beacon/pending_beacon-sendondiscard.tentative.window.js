'
use
strict
'
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
/
pending_beacon
/
resources
/
set_beacon
.
py
?
uuid
=
{
uuid
}
;
const
numPerMethod
=
20
;
const
total
=
numPerMethod
*
2
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
for
(
let
i
=
0
;
i
<
{
numPerMethod
}
;
i
+
+
)
{
let
get
=
new
PendingGetBeacon
(
url
)
;
let
post
=
new
PendingPostBeacon
(
url
)
;
}
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
total
}
)
;
}
'
A
discarded
document
sends
all
its
beacons
with
default
config
.
'
)
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
/
pending_beacon
/
resources
/
set_beacon
.
py
?
uuid
=
{
uuid
}
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
let
beacon
=
new
PendingGetBeacon
(
url
)
;
beacon
.
sendNow
(
)
;
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
1
}
)
;
}
'
A
discarded
document
does
not
send
an
already
sent
beacon
.
'
)
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
/
pending_beacon
/
resources
/
set_beacon
.
py
?
uuid
=
{
uuid
}
;
const
numPerMethod
=
20
;
const
total
=
numPerMethod
*
2
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
for
(
let
i
=
0
;
i
<
{
numPerMethod
}
;
i
+
+
)
{
let
get
=
new
PendingGetBeacon
(
url
{
timeout
:
100
*
i
}
)
;
let
post
=
new
PendingPostBeacon
(
url
{
timeout
:
100
*
i
}
)
;
}
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
total
}
)
;
}
A
discarded
document
sends
all
its
beacons
of
which
timeouts
are
not
default
.
)
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
/
pending_beacon
/
resources
/
set_beacon
.
py
?
uuid
=
{
uuid
}
;
const
numPerMethod
=
20
;
const
total
=
numPerMethod
*
2
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
for
(
let
i
=
0
;
i
<
{
numPerMethod
}
;
i
+
+
)
{
let
get
=
new
PendingGetBeacon
(
url
{
backgroundTimeout
:
100
*
i
}
)
;
let
post
=
new
PendingPostBeacon
(
url
{
backgroundTimeout
:
100
*
i
}
)
;
}
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
total
}
)
;
}
A
discarded
document
sends
all
its
beacons
of
which
backgroundTimeouts
are
not
default
.
)
;
