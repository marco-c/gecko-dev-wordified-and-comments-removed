'
use
strict
'
function
checkMessage
(
expect_count
)
{
postMessage
(
"
done
"
"
*
"
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
count
=
0
;
globalThis
.
addEventListener
(
"
message
"
function
handler
(
e
)
{
if
(
e
.
data
.
includes
(
"
block
"
)
)
{
reject
(
'
block
'
received
(
{
e
.
data
}
)
)
;
}
else
if
(
e
.
data
.
includes
(
"
count
"
)
)
{
count
=
count
+
1
;
}
else
if
(
e
.
data
.
includes
(
"
done
"
)
)
{
globalThis
.
removeEventListener
(
"
message
"
handler
)
;
if
(
expect_count
&
&
count
!
=
expect_count
)
{
reject
(
'
done
'
received
but
unexpected
counts
:
expected
{
expect_count
}
!
=
actual
{
count
}
(
{
e
.
data
}
)
)
;
}
else
{
resolve
(
e
.
data
)
;
}
}
else
{
reject
(
"
unexpected
message
received
:
"
+
e
.
data
)
;
}
}
)
;
}
)
;
}
function
checkSecurityPolicyViolationEvent
(
expect_count
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
count
=
0
;
document
.
addEventListener
(
"
securitypolicyviolation
"
e
=
>
{
if
(
e
.
sample
.
includes
(
"
trigger
"
)
)
{
if
(
expect_count
&
&
count
!
=
expect_count
)
{
reject
(
'
trigger
'
received
but
unexpected
counts
:
expected
{
expect_count
}
!
=
actual
{
count
}
)
;
}
else
{
resolve
(
)
;
}
}
else
{
count
=
count
+
1
;
}
}
)
;
try
{
document
.
getElementById
(
"
trigger
"
)
.
text
=
"
trigger
fail
"
;
}
catch
(
e
)
{
}
}
)
;
}
