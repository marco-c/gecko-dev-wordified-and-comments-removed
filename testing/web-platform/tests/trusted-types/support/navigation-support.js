function
setWindowLocationToJavaScriptURLCode
(
)
{
window
.
location
=
javascript
:
{
kJavaScriptURLCode
}
;
}
const
kJavaScriptURLCode
=
executeJavaScript
(
)
{
'
;
'
.
repeat
(
100
)
}
;
function
createDefaultPolicy
(
defaultpolicy
)
{
if
(
!
defaultpolicy
)
{
return
;
}
trustedTypes
.
createPolicy
(
"
default
"
{
createScript
:
s
=
>
{
switch
(
defaultpolicy
)
{
case
"
replace
"
:
return
s
.
replace
(
"
continue
"
"
defaultpolicywashere
"
)
;
case
"
replace
-
js
-
execution
"
:
return
s
.
replace
(
"
executeJavaScript
"
"
executeModifiedJavaScript
"
)
;
case
"
throw
"
:
throw
new
Error
(
"
Exception
in
createScript
(
)
"
)
;
case
"
make
-
invalid
"
:
return
"
/
/
make
:
invalid
/
"
;
}
}
}
)
;
}
async
function
setLocationToJavaScriptURL
(
defaultpolicy
)
{
window
.
javaScriptExecuted
=
false
;
window
.
executeJavaScript
=
function
(
)
{
window
.
javaScriptExecuted
=
true
;
}
window
.
modifiedJavaScriptExecuted
=
false
;
window
.
executeModifiedJavaScript
=
function
(
)
{
window
.
modifiedJavaScriptExecuted
=
true
;
}
createDefaultPolicy
(
defaultpolicy
)
;
let
{
violations
exception
}
=
await
trusted_type_violations_and_exception_for
(
async
_
=
>
{
setWindowLocationToJavaScriptURLCode
(
)
;
if
(
window
.
requestIdleCallback
)
{
await
new
Promise
(
resolve
=
>
requestIdleCallback
(
resolve
)
)
;
}
}
)
;
return
{
exception
:
exception
javaScriptExecuted
:
window
.
javaScriptExecuted
modifiedJavaScriptExecuted
:
window
.
modifiedJavaScriptExecuted
violations
:
violations
.
map
(
violation
=
>
{
const
clonedViolation
=
{
}
;
for
(
const
field
of
[
"
originalPolicy
"
"
violatedDirective
"
"
disposition
"
"
sample
"
"
lineNumber
"
"
columnNumber
"
]
)
{
clonedViolation
[
field
]
=
violation
[
field
]
;
}
return
clonedViolation
;
}
)
}
;
}
function
navigateToJavascriptURL
(
reportOnly
)
{
const
params
=
new
URLSearchParams
(
location
.
search
)
;
createDefaultPolicy
(
params
.
get
(
"
defaultpolicy
"
)
)
;
function
bounceEventToOpener
(
e
)
{
const
msg
=
{
}
;
for
(
const
field
of
[
"
effectiveDirective
"
"
sample
"
"
type
"
]
)
{
msg
[
field
]
=
e
[
field
]
;
}
msg
[
"
uri
"
]
=
location
.
href
;
window
.
opener
.
postMessage
(
msg
"
*
"
)
;
}
document
.
addEventListener
(
"
DOMContentLoaded
"
bounceEventToOpener
)
;
if
(
params
.
has
(
"
navigationattempted
"
)
)
{
return
;
}
let
url
=
new
URL
(
reportOnly
?
location
.
href
.
replace
(
"
-
report
-
only
"
"
"
)
:
location
.
href
)
;
url
.
searchParams
.
set
(
"
navigationattempted
"
1
)
;
url
.
searchParams
.
set
(
"
continue
"
1
)
;
let
target_script
=
location
.
href
=
'
{
url
.
toString
(
)
}
'
;
;
function
getAndPreparareNavigationElement
(
javaScriptURL
)
{
let
target
=
"
_self
"
;
if
(
!
!
params
.
get
(
"
frame
"
)
)
{
const
frame
=
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
"
frame
-
without
-
trusted
-
types
.
html
"
;
frames
.
name
=
"
frame
"
;
document
.
body
.
appendChild
(
frame
)
;
target
=
"
frame
"
;
}
if
(
!
!
params
.
get
(
"
form
-
submission
"
)
)
{
const
submit
=
document
.
getElementById
(
"
submit
"
)
;
submit
.
formAction
=
javaScriptURL
;
submit
.
formTarget
=
target
;
return
submit
;
}
if
(
!
!
params
.
get
(
"
area
"
)
)
{
const
area
=
document
.
getElementById
(
"
area
"
)
;
area
.
href
=
javaScriptURL
;
area
.
target
=
target
;
return
area
;
}
const
anchor
=
document
.
getElementById
(
"
anchor
"
)
;
anchor
.
href
=
javaScriptURL
;
anchor
.
target
=
target
;
return
anchor
;
}
const
navigationElement
=
getAndPreparareNavigationElement
(
javascript
:
{
target_script
}
)
;
document
.
addEventListener
(
"
DOMContentLoaded
"
async
_
=
>
{
let
{
violations
exception
}
=
await
trusted_type_violations_and_exception_for
(
async
_
=
>
{
navigationElement
.
click
(
)
;
if
(
window
.
requestIdleCallback
)
{
await
new
Promise
(
resolve
=
>
{
requestIdleCallback
(
resolve
)
;
window
.
addEventListener
(
"
beforeunload
"
resolve
)
;
}
)
;
}
}
)
;
if
(
exception
)
{
window
.
opener
.
postMessage
(
Unexpected
exception
:
{
exception
.
message
}
"
*
"
)
;
return
;
}
violations
.
forEach
(
violationEvent
=
>
bounceEventToOpener
(
violationEvent
)
)
;
if
(
violations
.
length
=
=
0
&
&
[
null
"
throw
"
"
make
-
invalid
"
]
.
includes
(
params
.
get
(
"
defaultpolicy
"
)
)
)
{
window
.
opener
.
postMessage
(
"
No
securitypolicyviolation
reported
!
"
"
*
"
)
;
}
}
)
;
}
