const
policyWithoutModification
=
window
.
trustedTypes
.
createPolicy
(
'
policyWithoutModification
'
{
createHTML
:
s
=
>
s
createScript
:
s
=
>
s
createScriptURL
:
s
=
>
s
}
)
;
function
createTrustedOutput
(
type
input
)
{
return
type
?
policyWithoutModification
[
type
.
replace
(
"
Trusted
"
"
create
"
)
]
(
input
)
:
input
;
}
const
trustedTypeDataForAttribute
=
[
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
null
attrName
:
"
onclick
"
type
:
"
TrustedScript
"
sink
:
"
Element
onclick
"
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
g
"
)
attrNS
:
null
attrName
:
"
ondblclick
"
type
:
"
TrustedScript
"
sink
:
"
Element
ondblclick
"
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_MATHML
"
mrow
"
)
attrNS
:
null
attrName
:
"
onmousedown
"
type
:
"
TrustedScript
"
sink
:
"
Element
onmousedown
"
}
{
element
:
_
=
>
document
.
createElement
(
"
iframe
"
)
attrNS
:
null
attrName
:
"
srcdoc
"
type
:
"
TrustedHTML
"
sink
:
"
HTMLIFrameElement
srcdoc
"
}
{
element
:
_
=
>
document
.
createElement
(
"
script
"
)
attrNS
:
null
attrName
:
"
src
"
type
:
"
TrustedScriptURL
"
sink
:
"
HTMLScriptElement
src
"
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
script
"
)
attrNS
:
null
attrName
:
"
href
"
type
:
"
TrustedScriptURL
"
sink
:
"
SVGScriptElement
href
"
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
script
"
)
attrNS
:
NSURI_XLINK
attrName
:
"
href
"
type
:
"
TrustedScriptURL
"
sink
:
"
SVGScriptElement
href
"
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_FOO
"
foo
"
)
attrNS
:
null
attrName
:
"
onmouseup
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
NSURI_FOO
attrName
:
"
onclick
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
null
attrName
:
"
ondoesnotexist
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
null
attrName
:
"
data
-
onclick
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
null
attrName
:
"
srcdoc
"
type
:
null
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_FOO
"
iframe
"
)
attrNS
:
null
attrName
:
"
srcdoc
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
iframe
"
)
attrNS
:
NSURI_FOO
attrName
:
"
srcdoc
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
iframe
"
)
attrNS
:
null
attrName
:
"
data
-
srcdoc
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
div
"
)
attrNS
:
null
attrName
:
"
src
"
type
:
null
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_FOO
"
script
"
)
attrNS
:
null
attrName
:
"
src
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
script
"
)
attrNS
:
NSURI_FOO
attrName
:
"
src
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
script
"
)
attrNS
:
null
attrName
:
"
data
-
src
"
type
:
null
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
g
"
)
attrNS
:
null
attrName
:
"
href
"
type
:
null
}
{
element
:
_
=
>
document
.
createElement
(
"
script
"
)
attrNS
:
null
attrName
:
"
href
"
type
:
null
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
script
"
)
attrNS
:
NSURI_FOO
attrName
:
"
href
"
type
:
null
}
{
element
:
_
=
>
document
.
createElementNS
(
NSURI_SVG
"
script
"
)
attrNS
:
null
attrName
:
"
src
"
type
:
null
}
]
;
function
findAttribute
(
element
attrNS
attrName
)
{
for
(
let
i
=
0
;
i
<
element
.
attributes
.
length
;
i
+
+
)
{
let
attr
=
element
.
attributes
[
i
]
;
if
(
attr
.
namespaceURI
=
=
=
attrNS
&
&
attr
.
localName
=
=
=
attrName
)
{
return
attr
;
}
}
}
const
attributeSetterData
=
[
{
api
:
"
Element
.
setAttribute
"
acceptNS
:
false
acceptTrustedTypeArgumentInIDL
:
true
runSetter
:
function
(
element
attrNS
attrName
attrValue
)
{
assert_equals
(
attrNS
null
)
;
this
.
lastAttributeNode
=
findAttribute
(
element
attrNS
attrName
)
;
return
element
.
setAttribute
(
attrName
attrValue
)
;
}
}
{
api
:
"
Element
.
setAttributeNS
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
true
runSetter
:
function
(
element
attrNS
attrName
attrValue
)
{
this
.
lastAttributeNode
=
findAttribute
(
element
attrNS
attrName
)
;
return
element
.
setAttributeNS
(
attrNS
attrName
attrValue
)
;
}
}
{
api
:
"
Element
.
setAttributeNode
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
setterClass
:
"
setAttributeNode
"
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
this
.
lastAttributeNode
=
document
.
createAttributeNS
(
attrNS
attrName
)
;
this
.
lastAttributeNode
.
value
=
attrValue
;
return
element
.
setAttributeNode
(
this
.
lastAttributeNode
)
;
}
}
{
api
:
"
Element
.
setAttributeNodeNS
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
this
.
lastAttributeNode
=
document
.
createAttributeNS
(
attrNS
attrName
)
;
this
.
lastAttributeNode
.
value
=
attrValue
;
return
element
.
setAttributeNodeNS
(
this
.
lastAttributeNode
)
;
}
}
{
api
:
"
NamedNodeMap
.
setNamedItem
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
const
nodeMap
=
element
.
attributes
;
this
.
lastAttributeNode
=
document
.
createAttributeNS
(
attrNS
attrName
)
;
this
.
lastAttributeNode
.
value
=
attrValue
;
return
nodeMap
.
setNamedItem
(
this
.
lastAttributeNode
)
;
}
}
{
api
:
"
NamedNodeMap
.
setNamedItemNS
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
const
nodeMap
=
element
.
attributes
;
this
.
lastAttributeNode
=
document
.
createAttributeNS
(
attrNS
attrName
)
;
this
.
lastAttributeNode
.
value
=
attrValue
;
return
nodeMap
.
setNamedItemNS
(
this
.
lastAttributeNode
)
;
}
}
{
api
:
"
Attr
.
value
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
element
.
setAttributeNS
(
attrNS
attrName
createTrustedOutput
(
type
"
"
)
)
;
this
.
lastAttributeNode
=
findAttribute
(
element
attrNS
attrName
)
;
assert_true
(
!
!
this
.
lastAttributeNode
)
;
return
(
this
.
lastAttributeNode
.
value
=
attrValue
)
;
}
}
{
api
:
"
Node
.
nodeValue
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
element
.
setAttributeNS
(
attrNS
attrName
createTrustedOutput
(
type
"
"
)
)
;
this
.
lastAttributeNode
=
findAttribute
(
element
attrNS
attrName
)
;
assert_true
(
!
!
this
.
lastAttributeNode
)
;
return
(
this
.
lastAttributeNode
.
nodeValue
=
attrValue
)
;
}
}
{
api
:
"
Node
.
textContent
"
acceptNS
:
true
acceptTrustedTypeArgumentInIDL
:
false
runSetter
:
function
(
element
attrNS
attrName
attrValue
type
)
{
element
.
setAttributeNS
(
attrNS
attrName
createTrustedOutput
(
type
"
"
)
)
;
this
.
lastAttributeNode
=
findAttribute
(
element
attrNS
attrName
)
;
assert_true
(
!
!
this
.
lastAttributeNode
)
;
return
(
this
.
lastAttributeNode
.
textContent
=
attrValue
)
;
}
}
]
;
