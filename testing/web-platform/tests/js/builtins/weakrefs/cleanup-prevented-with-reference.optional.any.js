let
holdingsList
=
[
]
;
function
cb
(
holding
)
{
holdingsList
.
push
(
holding
)
;
}
;
let
finalizationRegistry
=
new
FinalizationRegistry
(
function
(
)
{
}
)
;
let
referenced
=
{
}
;
function
emptyCells
(
)
{
let
target
=
{
}
;
finalizationRegistry
.
register
(
target
'
target
!
'
)
;
finalizationRegistry
.
register
(
referenced
'
referenced
'
)
;
let
prom
=
maybeGarbageCollectAndCleanupAsync
(
target
)
;
target
=
null
;
return
prom
;
}
promise_test
(
(
)
=
>
{
return
(
async
(
)
=
>
{
assert_implements
(
typeof
FinalizationRegistry
.
prototype
.
cleanupSome
=
=
=
'
function
'
'
FinalizationRegistry
.
prototype
.
cleanupSome
is
not
implemented
.
'
)
;
await
emptyCells
(
)
;
finalizationRegistry
.
cleanupSome
(
cb
)
;
assert_equals
(
holdingsList
.
length
1
)
;
assert_equals
(
holdingsList
[
0
]
'
target
!
'
)
;
assert_equals
(
typeof
referenced
'
object
'
'
referenced
preserved
'
)
;
}
)
(
)
.
catch
(
resolveGarbageCollection
)
;
}
'
cleanupCallback
has
only
one
optional
chance
to
be
called
for
a
GC
that
cleans
up
a
registered
target
.
'
)
;
