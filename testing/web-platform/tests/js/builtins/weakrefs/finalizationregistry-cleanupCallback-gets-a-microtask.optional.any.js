let
count
=
1_000
;
let
calls
=
0
;
let
registries
=
[
]
;
let
callback
=
function
(
)
{
calls
+
+
;
}
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
registries
.
push
(
new
FinalizationRegistry
(
callback
)
)
;
}
setup
(
{
allow_uncaught_exception
:
true
}
)
;
promise_test
(
(
test
)
=
>
{
assert_implements
(
typeof
FinalizationRegistry
.
prototype
.
register
=
=
=
'
function
'
'
FinalizationRegistry
.
prototype
.
register
is
not
implemented
.
'
)
;
return
(
async
(
)
=
>
{
{
let
target
=
{
}
;
for
(
let
registry
of
registries
)
{
registry
.
register
(
target
1
)
;
}
target
=
null
;
}
await
maybeGarbageCollectAsync
(
)
;
await
test
.
step_wait
(
(
)
=
>
calls
=
=
=
count
Expected
{
count
}
registry
cleanups
.
)
;
}
)
(
)
.
catch
(
resolveGarbageCollection
)
;
}
'
HostCleanupFinalizationRegistry
is
an
implementation
-
defined
abstract
operation
that
is
expected
to
call
CleanupFinalizationRegistry
(
finalizationRegistry
)
at
some
point
in
the
future
if
possible
.
'
)
;
