let
value
=
'
target
!
'
;
let
token
=
{
}
;
let
finalizationRegistry
=
new
FinalizationRegistry
(
function
(
)
{
}
)
;
function
emptyCells
(
)
{
let
target
=
{
}
;
finalizationRegistry
.
register
(
target
value
token
)
;
let
prom
=
maybeGarbageCollectAndCleanupAsync
(
target
)
;
target
=
null
;
return
prom
;
}
promise_test
(
(
)
=
>
{
return
(
async
(
)
=
>
{
assert_implements
(
typeof
FinalizationRegistry
.
prototype
.
cleanupSome
=
=
=
'
function
'
'
FinalizationRegistry
.
prototype
.
cleanupSome
is
not
implemented
.
'
)
;
await
emptyCells
(
)
;
let
called
=
0
;
let
holdings
=
[
]
;
finalizationRegistry
.
cleanupSome
(
(
holding
)
=
>
{
called
+
=
1
;
holdings
.
push
(
holding
)
;
}
)
;
assert_equals
(
called
1
)
;
assert_equals
(
holdings
.
length
1
)
;
assert_equals
(
holdings
[
0
]
value
)
;
let
res
=
finalizationRegistry
.
unregister
(
token
)
;
assert_equals
(
res
false
'
unregister
after
iterating
over
it
in
cleanup
'
)
;
}
)
(
)
.
catch
(
resolveGarbageCollection
)
;
}
'
Cannot
unregister
a
cell
that
has
been
cleaned
up
'
)
;
