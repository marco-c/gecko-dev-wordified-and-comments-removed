let
token
=
{
}
;
let
finalizationRegistry
=
new
FinalizationRegistry
(
function
(
)
{
}
)
;
function
emptyCells
(
)
{
let
target
=
{
}
;
finalizationRegistry
.
register
(
target
'
target
!
'
token
)
;
let
prom
=
maybeGarbageCollectAndCleanupAsync
(
target
)
;
target
=
null
;
return
prom
;
}
promise_test
(
(
)
=
>
{
return
(
async
(
)
=
>
{
assert_implements
(
typeof
FinalizationRegistry
.
prototype
.
cleanupSome
=
=
=
'
function
'
'
FinalizationRegistry
.
prototype
.
cleanupSome
is
not
implemented
.
'
)
;
await
emptyCells
(
)
;
let
called
=
0
;
let
res
=
finalizationRegistry
.
unregister
(
token
)
;
assert_equals
(
res
true
'
unregister
target
before
iterating
over
it
in
cleanup
'
)
;
finalizationRegistry
.
cleanupSome
(
(
holding
)
=
>
{
called
+
=
1
;
}
)
;
assert_equals
(
called
0
'
callback
was
not
called
'
)
;
}
)
(
)
.
catch
(
resolveGarbageCollection
)
;
}
'
Cleanup
might
be
prevented
with
an
unregister
usage
'
)
;
