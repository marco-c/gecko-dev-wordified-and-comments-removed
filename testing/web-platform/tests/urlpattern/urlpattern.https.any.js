const
kComponents
=
[
'
protocol
'
'
username
'
'
password
'
'
hostname
'
'
password
'
'
pathname
'
'
search
'
'
hash
'
]
;
function
runTests
(
data
)
{
for
(
let
entry
of
data
)
{
test
(
function
(
)
{
if
(
entry
.
expected_obj
=
=
=
'
error
'
)
{
assert_throws_js
(
TypeError
_
=
>
new
URLPattern
(
entry
.
pattern
)
'
URLPattern
(
)
constructor
'
)
;
return
;
}
const
pattern
=
new
URLPattern
(
entry
.
pattern
)
;
entry
.
expected_obj
=
entry
.
expected_obj
|
|
{
}
;
for
(
let
component
of
kComponents
)
{
let
expected
=
entry
.
expected_obj
[
component
]
;
if
(
!
expected
)
{
let
baseURL
=
null
;
if
(
entry
.
pattern
.
baseURL
)
baseURL
=
new
URL
(
entry
.
pattern
.
baseURL
)
;
if
(
entry
.
pattern
[
component
]
)
{
expected
=
entry
.
pattern
[
component
]
;
}
else
if
(
baseURL
&
&
component
!
=
=
'
search
'
&
&
component
!
=
=
'
hash
'
)
{
let
base_value
=
baseURL
[
component
]
;
if
(
component
=
=
=
'
protocol
'
)
base_value
=
base_value
.
substring
(
0
base_value
.
length
-
1
)
;
expected
=
base_value
;
}
else
{
expected
=
'
*
'
;
}
}
assert_equals
(
pattern
[
component
]
expected
compiled
pattern
property
'
{
component
}
'
)
;
}
if
(
entry
.
expected_match
=
=
=
'
error
'
)
{
assert_throws_js
(
TypeError
_
=
>
pattern
.
test
(
.
.
.
entry
.
inputs
)
'
test
(
)
result
'
)
;
assert_throws_js
(
TypeError
_
=
>
pattern
.
exec
(
.
.
.
entry
.
inputs
)
'
exec
(
)
result
'
)
;
return
;
}
assert_equals
(
pattern
.
test
(
.
.
.
entry
.
inputs
)
!
!
entry
.
expected_match
'
test
(
)
result
'
)
;
const
exec_result
=
pattern
.
exec
(
.
.
.
entry
.
inputs
)
;
if
(
!
entry
.
expected_match
|
|
typeof
entry
.
expected_match
!
=
=
"
object
"
)
{
assert_equals
(
exec_result
entry
.
expected_match
'
exec
(
)
failed
match
result
'
)
;
return
;
}
if
(
!
entry
.
expected_match
.
inputs
)
entry
.
expected_match
.
inputs
=
entry
.
inputs
;
assert_equals
(
exec_result
.
inputs
.
length
entry
.
expected_match
.
inputs
.
length
'
exec
(
)
result
.
inputs
.
length
'
)
;
for
(
let
i
=
0
;
i
<
exec_result
.
inputs
.
length
;
+
+
i
)
{
const
input
=
exec_result
.
inputs
[
i
]
;
const
expected_input
=
entry
.
expected_match
.
inputs
[
i
]
;
if
(
typeof
input
=
=
=
'
string
'
)
{
assert_equals
(
input
expected_input
exec
(
)
result
.
inputs
[
{
i
}
]
)
;
continue
;
}
for
(
let
component
of
kComponents
)
{
assert_equals
(
input
[
component
]
expected_input
[
component
]
exec
(
)
result
.
inputs
[
{
i
}
]
[
{
component
}
]
)
;
}
}
for
(
let
component
of
kComponents
)
{
let
expected_obj
=
entry
.
expected_match
[
component
]
;
if
(
!
expected_obj
)
{
expected_obj
=
{
input
:
'
'
groups
:
{
}
}
;
if
(
!
entry
.
expected_match
.
exactly_empty_components
|
|
!
entry
.
expected_match
.
exactly_empty_components
.
includes
(
component
)
)
{
expected_obj
.
groups
[
'
0
'
]
=
'
'
;
}
}
assert_object_equals
(
exec_result
[
component
]
expected_obj
exec
(
)
result
for
{
component
}
)
;
}
}
Pattern
:
{
JSON
.
stringify
(
entry
.
pattern
)
}
+
Inputs
:
{
JSON
.
stringify
(
entry
.
inputs
)
}
)
;
}
}
promise_test
(
async
function
(
)
{
const
response
=
await
fetch
(
'
resources
/
urlpatterntestdata
.
json
'
)
;
const
data
=
await
response
.
json
(
)
;
runTests
(
data
)
;
}
'
Loading
data
.
.
.
'
)
;
