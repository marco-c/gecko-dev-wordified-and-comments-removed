class
TestCase
{
constructor
(
)
{
this
.
testFunction
=
function
(
)
{
throw
new
Error
(
"
Test
Function
not
implemented
"
)
;
}
;
this
.
testObject
=
{
}
;
this
.
argOrder
=
[
]
;
}
toObject
(
)
{
return
JSON
.
parse
(
JSON
.
stringify
(
this
.
testObject
)
)
;
}
toArgs
(
)
{
var
ret
=
[
]
;
for
(
let
idx
of
this
.
argOrder
)
{
ret
.
push
(
this
.
testObject
[
idx
]
)
;
}
return
ret
;
}
modify
(
arg1
arg2
)
{
var
mods
;
if
(
typeof
arg1
=
=
=
"
string
"
&
&
arg2
!
=
=
undefined
)
{
mods
=
{
path
:
arg1
value
:
arg2
}
;
}
else
{
mods
=
arg1
;
}
if
(
!
Array
.
isArray
(
mods
)
&
&
typeof
mods
=
=
=
"
object
"
)
{
mods
=
[
mods
]
;
}
var
obj
=
this
.
testObject
;
for
(
let
idx
in
mods
)
{
var
mod
=
mods
[
idx
]
;
let
paths
=
mod
.
path
.
split
(
"
.
"
)
;
recursiveSetObject
(
this
.
testObject
paths
mod
.
value
)
;
}
function
recursiveSetObject
(
obj
pathArray
value
)
{
var
currPath
=
pathArray
.
shift
(
)
;
if
(
typeof
obj
[
currPath
]
!
=
=
"
object
"
)
{
obj
[
currPath
]
=
{
}
;
}
if
(
pathArray
.
length
>
0
)
{
return
recursiveSetObject
(
obj
[
currPath
]
pathArray
value
)
;
}
obj
[
currPath
]
=
value
;
}
return
this
;
}
test
(
)
{
return
this
.
testFunction
(
.
.
.
this
.
toArgs
(
)
)
;
}
testBadArgs
(
testDesc
)
{
promise_test
(
function
(
t
)
{
return
promise_rejects
(
t
new
TypeError
(
)
this
.
test
(
)
)
;
}
.
bind
(
this
)
testDesc
)
;
}
}
class
MakeCredentialTest
extends
TestCase
{
constructor
(
)
{
super
(
)
;
this
.
testFunction
=
navigator
.
authentication
.
makeCredential
;
this
.
testObject
=
{
accountInformation
:
{
rpDisplayName
:
"
ACME
"
displayName
:
"
John
P
.
Smith
"
name
:
"
johnpsmith
example
.
com
"
id
:
"
1098237235409872
"
imageUri
:
"
https
:
/
/
pics
.
acme
.
com
/
00
/
p
/
aBjjjpqPb
.
png
"
}
cryptoParameters
:
[
{
type
:
"
ScopedCred
"
algorithm
:
"
RSASSA
-
PKCS1
-
v1_5
"
}
]
attestationChallenge
:
Uint8Array
.
from
(
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
]
)
.
buffer
}
;
this
.
argOrder
=
[
"
accountInformation
"
"
cryptoParameters
"
"
attestationChallenge
"
"
options
"
]
;
if
(
arguments
.
length
)
this
.
modify
(
.
.
.
arguments
)
;
}
}
var
debug
=
function
(
)
{
}
;
function
ensureInterface
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
if
(
typeof
navigator
.
authentication
!
=
=
"
object
"
)
{
debug
=
console
.
log
;
var
scriptElem
=
document
.
createElement
(
"
script
"
)
;
if
(
typeof
scriptElem
!
=
=
"
object
"
)
{
debug
(
"
ensureInterface
:
Error
creating
script
element
while
attempting
loading
polyfill
"
)
;
return
reject
(
new
Error
(
"
ensureInterface
:
Error
creating
script
element
while
loading
polyfill
"
)
)
;
}
scriptElem
.
type
=
"
application
/
javascript
"
;
scriptElem
.
onload
=
function
(
)
{
debug
(
"
!
!
!
XXX
-
LOADING
POLYFILL
FOR
WEBAUTHN
TESTING
-
XXX
!
!
!
"
)
;
return
resolve
(
)
;
}
;
scriptElem
.
onerror
=
function
(
)
{
return
reject
(
new
Error
(
"
navigator
.
authentication
does
not
exist
"
)
)
;
}
;
scriptElem
.
src
=
"
/
webauthn
/
webauthn
-
polyfill
/
webauthn
-
polyfill
.
js
"
;
if
(
document
.
body
)
{
document
.
body
.
appendChild
(
scriptElem
)
;
}
else
{
debug
(
"
ensureInterface
:
DOM
has
no
body
"
)
;
return
reject
(
new
Error
(
"
ensureInterface
:
DOM
has
no
body
"
)
)
;
}
}
}
)
;
}
function
standardSetup
(
cb
)
{
return
ensureInterface
(
)
.
then
(
(
)
=
>
{
if
(
cb
)
return
cb
(
)
;
}
)
.
catch
(
(
err
)
=
>
{
return
(
err
)
;
}
)
;
}
