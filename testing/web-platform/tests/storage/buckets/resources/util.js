'
use
strict
'
;
async
function
prepareForBucketTest
(
test
)
{
assert_equals
(
(
await
navigator
.
storageBuckets
.
keys
(
)
)
.
join
(
)
'
'
)
;
test
.
add_cleanup
(
async
function
(
)
{
const
keys
=
await
navigator
.
storageBuckets
.
keys
(
)
;
for
(
const
key
of
keys
)
{
await
navigator
.
storageBuckets
.
delete
(
key
)
;
}
}
)
;
}
function
indexedDbOpenRequest
(
t
idb
dbname
upgrade_func
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
openRequest
=
idb
.
open
(
dbname
)
;
t
.
add_cleanup
(
(
)
=
>
{
indexedDbDeleteRequest
(
idb
dbname
)
;
}
)
;
openRequest
.
onerror
=
(
)
=
>
{
reject
(
openRequest
.
error
)
;
}
;
openRequest
.
onsuccess
=
(
)
=
>
{
resolve
(
openRequest
.
result
)
;
}
;
openRequest
.
onupgradeneeded
=
event
=
>
{
upgrade_func
(
openRequest
.
result
)
;
}
;
}
)
;
}
function
indexedDbDeleteRequest
(
idb
name
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
deleteRequest
=
idb
.
deleteDatabase
(
name
)
;
deleteRequest
.
onerror
=
(
)
=
>
{
reject
(
deleteRequest
.
error
)
;
}
;
deleteRequest
.
onsuccess
=
(
)
=
>
{
resolve
(
)
;
}
;
}
)
;
}
function
transactionPromise
(
txn
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
txn
.
onabort
=
(
)
=
>
{
reject
(
txn
.
error
)
;
}
;
txn
.
oncomplete
=
(
)
=
>
{
resolve
(
)
;
}
;
}
)
;
}
