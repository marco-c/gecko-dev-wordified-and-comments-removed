'
use
strict
'
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
file
=
await
root_dir
.
getFileHandle
(
getUniqueName
(
)
{
create
:
true
}
)
;
const
observer
=
new
CollectingFileSystemObserver
(
t
root_dir
)
;
await
observer
.
observe
(
[
file
]
)
;
const
writable
=
await
createWFSWithCleanup
(
t
file
)
;
await
writable
.
write
(
'
contents
'
)
;
await
writable
.
close
(
)
;
const
records
=
await
observer
.
getRecords
(
)
;
await
assert_records_equal
(
file
records
[
modifiedEvent
(
file
[
]
)
]
)
;
}
'
Closing
a
FileSystemWritableFileStream
that
\
'
s
modified
the
file
produces
a
"
modified
"
event
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
file
=
await
root_dir
.
getFileHandle
(
getUniqueName
(
)
{
create
:
true
}
)
;
const
observer
=
new
CollectingFileSystemObserver
(
t
root_dir
)
;
await
observer
.
observe
(
[
file
]
)
;
const
writable
=
await
createWFSWithCleanup
(
t
file
)
;
await
writable
.
write
(
'
contents
'
)
;
await
writable
.
truncate
(
1
)
;
await
writable
.
seek
(
1
)
;
{
const
records
=
await
observer
.
getRecords
(
)
;
await
assert_records_equal
(
file
records
[
]
)
;
}
await
writable
.
abort
(
)
;
{
const
records
=
await
observer
.
getRecords
(
)
;
await
assert_records_equal
(
file
records
[
]
)
;
}
}
'
All
FileSystemWritableFileStream
methods
that
aren
\
'
t
closed
don
\
'
t
produce
events
'
)
;
