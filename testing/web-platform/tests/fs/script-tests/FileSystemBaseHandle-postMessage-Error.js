'
use
strict
'
;
const
kRemoteOrigin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
kRemoteOriginDocumentMessageTarget
=
{
kRemoteOrigin
}
{
base_path
(
)
}
+
kDocumentMessageTarget
;
async
function
do_send_message_error_test
(
test
root_dir
receiver
target
target_origin
expected_has_source
expected_origin
)
{
const
message_watcher
=
new
EventWatcher
(
test
receiver
'
message
'
)
;
const
file
=
await
createFileWithContents
(
'
test
-
error
-
file
'
'
test
-
error
-
file
-
contents
'
root_dir
)
;
target
.
postMessage
(
{
type
:
'
receive
-
file
-
system
-
handles
'
cloned_file_system_handles
:
[
file
]
}
{
targetOrigin
:
target_origin
}
)
;
let
message_event
=
await
message_watcher
.
wait_for
(
'
message
'
)
;
const
first_response
=
message_event
.
data
;
assert_equals
(
first_response
.
type
'
serialized
-
message
-
error
'
'
The
test
runner
must
receive
a
"
serialized
-
message
-
error
"
message
'
+
'
in
response
to
a
FileSystemFileHandle
message
.
'
)
;
assert_equals_serialized_message_error_event
(
first_response
.
serialized_message_error_event
expected_origin
expected_has_source
)
;
const
directory
=
await
createDirectory
(
'
test
-
error
-
directory
'
root_dir
)
;
target
.
postMessage
(
{
type
:
'
receive
-
file
-
system
-
handles
'
cloned_file_system_handles
:
[
directory
]
}
{
targetOrigin
:
target_origin
}
)
;
message_event
=
await
message_watcher
.
wait_for
(
'
message
'
)
;
const
second_response
=
message_event
.
data
;
assert_equals
(
second_response
.
type
'
serialized
-
message
-
error
'
'
The
test
runner
must
receive
a
"
serialized
-
message
-
error
"
message
'
+
'
response
to
a
FileSystemDirectoryHandle
message
.
'
)
;
assert_equals_serialized_message_error_event
(
second_response
.
serialized_message_error_event
expected_origin
expected_has_source
)
;
}
async
function
do_receive_message_error_test
(
test
receiver
target
target_origin
expected_has_source
expected_origin
)
{
const
error_watcher
=
new
EventWatcher
(
test
receiver
'
messageerror
'
)
;
target
.
postMessage
(
{
type
:
'
create
-
file
'
}
{
targetOrigin
:
target_origin
}
)
;
const
first_error
=
await
error_watcher
.
wait_for
(
'
messageerror
'
)
;
const
serialized_first_error
=
serialize_message_error_event
(
first_error
)
;
assert_equals_serialized_message_error_event
(
serialized_first_error
expected_origin
expected_has_source
)
;
target
.
postMessage
(
{
type
:
'
create
-
directory
'
}
{
targetOrigin
:
target_origin
}
)
;
const
second_error
=
await
error_watcher
.
wait_for
(
'
messageerror
'
)
;
const
serialized_second_error
=
serialize_message_error_event
(
second_error
)
;
assert_equals_serialized_message_error_event
(
serialized_second_error
expected_origin
expected_has_source
)
;
}
async
function
do_send_and_receive_message_error_test
(
test
root_dir
receiver
target
target_origin
expected_has_source
expected_origin
expected_remote_origin
)
{
await
do_send_message_error_test
(
test
root_dir
receiver
target
target_origin
expected_has_source
expected_origin
)
;
await
do_receive_message_error_test
(
test
receiver
target
target_origin
expected_has_source
expected_remote_origin
)
;
}
async
function
do_send_message_port_error_test
(
test
root_dir
target
target_origin
)
{
const
message_port
=
create_message_channel
(
target
target_origin
)
;
await
do_send_message_error_test
(
test
root_dir
message_port
message_port
undefined
false
'
'
'
'
)
;
}
async
function
do_receive_message_port_error_test
(
test
target
target_origin
)
{
const
message_port
=
create_message_channel
(
target
target_origin
)
;
await
do_receive_message_error_test
(
test
message_port
message_port
undefined
false
'
'
)
;
}
async
function
do_send_and_receive_message_port_error_test
(
test
root_dir
target
target_origin
)
{
await
do_send_message_port_error_test
(
test
root_dir
target
target_origin
)
;
await
do_receive_message_port_error_test
(
test
target
target_origin
)
;
}
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe
=
await
add_iframe
(
t
{
src
:
kRemoteOriginDocumentMessageTarget
}
)
;
await
do_send_and_receive_message_error_test
(
t
root_dir
self
iframe
.
contentWindow
'
*
'
true
location
.
origin
kRemoteOrigin
)
;
}
'
Fail
to
send
and
receive
messages
using
a
cross
origin
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe
=
await
add_iframe
(
t
{
src
:
kRemoteOriginDocumentMessageTarget
}
)
;
await
do_send_and_receive_message_port_error_test
(
t
root_dir
iframe
.
contentWindow
'
*
'
)
;
}
'
Fail
to
send
and
receive
messages
using
a
cross
origin
message
port
in
'
+
'
an
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe
=
await
add_iframe
(
t
{
src
:
kDocumentMessageTarget
sandbox
:
'
allow
-
scripts
'
}
)
;
await
do_send_message_error_test
(
t
root_dir
self
iframe
.
contentWindow
'
*
'
true
location
.
origin
)
;
}
'
Fail
to
send
to
a
sandboxed
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe
=
await
add_iframe
(
t
{
src
:
kDocumentMessageTarget
sandbox
:
'
allow
-
scripts
'
}
)
;
await
do_send_message_port_error_test
(
t
root_dir
iframe
.
contentWindow
'
*
'
)
;
}
'
Fail
to
send
messages
using
a
message
port
to
a
sandboxed
'
+
'
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe_data_uri
=
await
create_message_target_data_uri
(
t
)
;
const
iframe
=
await
add_iframe
(
t
{
src
:
iframe_data_uri
}
)
;
await
do_send_message_error_test
(
t
root_dir
self
iframe
.
contentWindow
'
*
'
true
location
.
origin
)
;
}
'
Fail
to
send
messages
to
a
data
URI
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
iframe_data_uri
=
await
create_message_target_data_uri
(
t
)
;
const
iframe
=
await
add_iframe
(
t
{
src
:
iframe_data_uri
}
)
;
await
do_send_message_port_error_test
(
t
root_dir
iframe
.
contentWindow
'
*
'
)
;
}
'
Fail
to
send
messages
using
a
message
port
in
a
data
URI
iframe
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
child_window
=
await
open_window
(
t
kRemoteOriginDocumentMessageTarget
)
;
await
do_send_and_receive_message_error_test
(
t
root_dir
self
child_window
'
*
'
true
location
.
origin
kRemoteOrigin
)
;
}
'
Fail
to
send
and
receive
messages
using
a
cross
origin
window
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
child_window
=
await
open_window
(
t
kRemoteOriginDocumentMessageTarget
)
;
await
do_send_message_port_error_test
(
t
root_dir
child_window
'
*
'
)
;
}
'
Fail
to
send
and
receive
messages
using
a
cross
origin
message
port
in
'
+
'
a
window
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
url
=
{
kDocumentMessageTarget
}
?
pipe
=
header
(
Content
-
Security
-
Policy
+
'
sandbox
allow
-
scripts
)
'
;
const
child_window
=
await
open_window
(
t
url
)
;
await
do_send_message_error_test
(
t
root_dir
self
child_window
'
*
'
true
location
.
origin
)
;
}
'
Fail
to
send
messages
to
a
sandboxed
window
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
url
=
{
kDocumentMessageTarget
}
?
pipe
=
header
(
Content
-
Security
-
Policy
+
'
sandbox
allow
-
scripts
)
'
;
const
child_window
=
await
open_window
(
t
url
)
;
await
do_send_message_port_error_test
(
t
root_dir
child_window
'
*
'
)
;
}
'
Fail
to
send
messages
using
a
message
port
to
a
sandboxed
'
+
'
window
.
'
)
;
