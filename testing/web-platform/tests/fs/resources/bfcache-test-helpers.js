'
use
strict
'
;
export
async
function
tryToCreateLock
(
fileName
createLock
)
{
const
dir
=
await
navigator
.
storage
.
getDirectory
(
)
;
const
fileHandle
=
await
dir
.
getFileHandle
(
fileName
{
create
:
true
}
)
;
try
{
return
await
createLock
(
fileHandle
)
;
}
catch
{
return
undefined
;
}
}
export
const
forwardToDedicatedWorker
=
(
(
)
=
>
{
let
dedicatedWorker
;
function
getNextDedicatedWorkerResult
(
dedicatedWorker
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
dedicatedWorker
.
addEventListener
(
'
message
'
(
{
data
}
)
=
>
{
resolve
(
data
)
;
}
{
once
:
true
}
)
;
dedicatedWorker
.
addEventListener
(
'
error
'
(
)
=
>
{
reject
(
new
Error
(
'
An
error
occurred
on
the
dedicated
worker
.
'
)
)
;
}
{
once
:
true
}
)
;
}
)
;
}
return
function
(
funcName
)
{
return
(
.
.
.
args
)
=
>
{
if
(
!
dedicatedWorker
)
{
dedicatedWorker
=
new
Worker
(
/
fs
/
resources
/
bfcache
-
test
-
worker
.
js
{
type
:
'
module
'
}
)
;
}
dedicatedWorker
.
postMessage
(
{
funcName
args
}
)
;
return
getNextDedicatedWorkerResult
(
dedicatedWorker
)
;
}
}
}
)
(
)
;
