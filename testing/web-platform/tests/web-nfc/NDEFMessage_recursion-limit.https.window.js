'
use
strict
'
;
test
(
(
)
=
>
{
let
recordInit
=
{
recordType
:
'
w3
.
org
:
ExternalRecord
'
}
;
const
messageInit
=
{
records
:
[
recordInit
]
}
;
recordInit
.
data
=
messageInit
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFMessage
(
messageInit
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFRecord
(
recordInit
)
;
}
'
Creating
a
recursive
NDEFRecord
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFReadingEvent
(
'
message
'
{
message
:
messageInit
}
)
;
}
'
Creating
a
recursive
NDEFReadingEvent
throws
a
TypeError
'
)
;
}
'
NDEFRecord
and
NDEFMessage
cycle
in
external
records
'
)
;
test
(
(
)
=
>
{
let
recordInit
=
{
recordType
:
'
:
local
'
}
;
const
messageInit
=
{
records
:
[
recordInit
]
}
;
recordInit
.
data
=
messageInit
;
const
externalRecordMessageInit
=
{
records
:
[
{
recordType
:
'
w3
.
org
:
ExternalRecord
'
data
:
messageInit
}
]
}
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFMessage
(
externalRecordMessageInit
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFRecord
(
externalRecordMessageInit
.
records
[
0
]
)
;
}
'
Creating
a
recursive
NDEFRecord
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFReadingEvent
(
'
message
'
{
message
:
externalRecordMessageInit
}
)
;
}
'
Creating
a
recursive
NDEFReadingEvent
throws
a
TypeError
'
)
;
}
'
NDEFRecord
and
NDEFMessage
cycle
in
local
records
'
)
;
test
(
(
)
=
>
{
let
recordInit
=
{
recordType
:
'
smart
-
poster
'
}
;
const
messageInit
=
{
records
:
[
{
recordType
:
'
url
'
data
:
'
https
:
/
/
w3
.
org
'
}
recordInit
]
}
;
recordInit
.
data
=
messageInit
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFMessage
(
messageInit
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFRecord
(
recordInit
)
;
}
'
Creating
a
recursive
NDEFRecord
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFReadingEvent
(
'
message
'
{
message
:
messageInit
}
)
;
}
'
Creating
a
recursive
NDEFReadingEvent
throws
a
TypeError
'
)
;
}
'
NDEFRecord
and
NDEFMessage
cycle
in
smart
poster
records
'
)
;
function
makeSmartPosterMessageInit
(
innerMessageInit
)
{
const
innerRecords
=
innerMessageInit
.
records
;
return
{
records
:
[
{
recordType
:
'
smart
-
poster
'
data
:
{
records
:
[
{
recordType
:
'
url
'
data
:
'
https
:
/
/
w3
.
org
'
}
]
.
concat
(
innerRecords
)
}
}
]
}
;
}
function
makeRecursiveMessageInit
(
innerRecordType
maxDepth
)
{
function
innerHelper
(
value
)
{
if
(
+
+
value
>
maxDepth
)
{
return
{
records
:
[
{
recordType
:
'
empty
'
}
]
}
;
}
return
{
records
:
[
{
recordType
:
innerRecordType
data
:
innerHelper
(
value
)
}
]
}
;
}
return
innerHelper
(
0
)
;
}
const
MAX_NESTING_LEVEL
=
32
;
test
(
(
)
=
>
{
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFMessage
(
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
)
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
)
}
)
;
}
'
Creating
a
recursive
NDEFReadingEvent
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
const
innerMessageInit
=
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
-
1
)
;
new
NDEFMessage
(
makeSmartPosterMessageInit
(
innerMessageInit
)
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
const
innerMessageInit
=
makeRecursiveMessageInit
(
'
:
local
'
MAX_NESTING_LEVEL
-
1
)
;
new
NDEFMessage
(
makeSmartPosterMessageInit
(
innerMessageInit
)
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
const
innerMessageInit
=
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
-
1
)
;
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeSmartPosterMessageInit
(
innerMessageInit
)
}
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
assert_throws_js
(
TypeError
(
)
=
>
{
const
innerMessageInit
=
makeRecursiveMessageInit
(
'
:
local
'
MAX_NESTING_LEVEL
-
1
)
;
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeSmartPosterMessageInit
(
innerMessageInit
)
}
)
;
}
'
Creating
a
recursive
NDEFMessage
throws
a
TypeError
'
)
;
}
'
Create
too
many
nested
NDEFMessages
'
)
;
test
(
(
)
=
>
{
new
NDEFMessage
(
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
-
1
)
)
;
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
-
1
)
}
)
;
let
innerMessageInit
;
innerMessageInit
=
makeRecursiveMessageInit
(
'
w3
.
org
:
ExternalRecord
'
MAX_NESTING_LEVEL
-
2
)
;
new
NDEFMessage
(
makeSmartPosterMessageInit
(
innerMessageInit
)
)
;
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeSmartPosterMessageInit
(
innerMessageInit
)
}
)
;
innerMessageInit
=
makeRecursiveMessageInit
(
'
:
local
'
MAX_NESTING_LEVEL
-
2
)
;
new
NDEFMessage
(
makeSmartPosterMessageInit
(
innerMessageInit
)
)
;
new
NDEFReadingEvent
(
'
message
'
{
message
:
makeSmartPosterMessageInit
(
innerMessageInit
)
}
)
;
}
'
Nest
maximum
number
of
NDEFMessages
'
)
