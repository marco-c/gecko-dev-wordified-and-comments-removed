'
use
strict
'
;
import
{
DirectSocketsService
DirectSocketsServiceReceiver
}
from
'
/
gen
/
third_party
/
blink
/
public
/
mojom
/
direct_sockets
/
direct_sockets
.
mojom
.
m
.
js
'
;
self
.
DirectSocketsServiceTest
=
(
(
)
=
>
{
class
MockDirectSocketsService
{
constructor
(
)
{
this
.
interceptor_
=
new
MojoInterfaceInterceptor
(
DirectSocketsService
.
interfaceName
)
;
this
.
receiver_
=
new
DirectSocketsServiceReceiver
(
this
)
;
this
.
interceptor_
.
oninterfacerequest
=
e
=
>
this
.
receiver_
.
.
bindHandle
(
e
.
handle
)
;
this
.
interceptor_
.
start
(
)
;
}
reset
(
)
{
this
.
receiver_
.
.
close
(
)
;
this
.
interceptor_
.
stop
(
)
;
}
openTCPSocket
(
options
receiver
observer
)
{
return
Promise
.
resolve
(
{
result
:
-
11
}
)
;
}
openUDPSocket
(
options
receiver
listener
)
{
return
Promise
.
resolve
(
{
result
:
-
11
}
)
;
}
}
let
testInternal
=
{
initialized
:
false
mockDirectSocketsService
:
null
}
class
DirectSocketsServiceTestChromium
{
constructor
(
)
{
Object
.
freeze
(
this
)
;
}
initialize
(
)
{
if
(
!
testInternal
.
initialized
)
{
testInternal
=
{
mockDirectSocketsService
:
new
MockDirectSocketsService
(
)
initialized
:
true
}
;
}
}
async
reset
(
)
{
if
(
testInternal
.
initialized
)
{
testInternal
.
mockDirectSocketsService
.
reset
(
)
;
testInternal
=
{
mockDirectSocketsService
:
null
initialized
:
false
}
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
}
}
return
DirectSocketsServiceTestChromium
;
}
)
(
)
;
