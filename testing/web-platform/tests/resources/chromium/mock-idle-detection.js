import
{
IdleManager
IdleManagerError
IdleManagerReceiver
}
from
'
/
gen
/
third_party
/
blink
/
public
/
mojom
/
idle
/
idle_manager
.
mojom
.
m
.
js
'
;
class
FakeIdleMonitor
{
addMonitor
(
threshold
monitorPtr
callback
)
{
return
this
.
handler
.
addMonitor
(
threshold
monitorPtr
)
;
}
setHandler
(
handler
)
{
this
.
handler
=
handler
;
return
this
;
}
setBinding
(
binding
)
{
this
.
binding
=
binding
;
return
this
;
}
close
(
)
{
this
.
binding
.
.
close
(
)
;
}
}
self
.
IdleDetectorError
=
{
}
;
self
.
addMonitor
=
function
addMonitor
(
threshold
monitorPtr
callback
)
{
throw
new
Error
(
"
expected
to
be
overriden
by
tests
"
)
;
}
async
function
close
(
)
{
interceptor
.
close
(
)
;
}
self
.
expect
=
function
(
call
)
{
return
{
andReturn
(
callback
)
{
let
handler
=
{
}
;
handler
[
call
.
name
]
=
callback
;
interceptor
.
setHandler
(
handler
)
;
}
}
;
}
;
function
intercept
(
)
{
let
result
=
new
FakeIdleMonitor
(
)
;
let
binding
=
new
IdleManagerReceiver
(
result
)
;
let
interceptor
=
new
MojoInterfaceInterceptor
(
IdleManager
.
interfaceName
)
;
interceptor
.
oninterfacerequest
=
e
=
>
binding
.
.
bindHandle
(
e
.
handle
)
;
interceptor
.
start
(
)
;
self
.
IdleDetectorError
.
SUCCESS
=
IdleManagerError
.
kSuccess
;
self
.
IdleDetectorError
.
PERMISSION_DISABLED
=
IdleManagerError
.
kPermissionDisabled
;
result
.
setBinding
(
binding
)
;
return
result
;
}
const
interceptor
=
intercept
(
)
;
