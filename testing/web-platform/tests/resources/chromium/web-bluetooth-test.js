'
use
strict
'
;
function
toMojoCentralState
(
state
)
{
switch
(
state
)
{
case
'
absent
'
:
return
bluetooth
.
mojom
.
CentralState
.
ABSENT
;
case
'
powered
-
off
'
:
return
bluetooth
.
mojom
.
CentralState
.
POWERED_OFF
;
case
'
powered
-
on
'
:
return
bluetooth
.
mojom
.
CentralState
.
POWERED_ON
;
default
:
throw
Unsupported
value
{
state
}
for
state
.
;
}
}
const
CHARACTERISTIC_PROPERTIES_WEB_TO_MOJO
=
{
broadcast
:
'
broadcast
'
read
:
'
read
'
write_without_response
:
'
write_without_response
'
write
:
'
write
'
notify
:
'
notify
'
indicate
:
'
indicate
'
authenticatedSignedWrites
:
'
authenticated_signed_writes
'
extended_properties
:
'
extended_properties
'
}
;
function
ArrayToMojoCharacteristicProperties
(
arr
)
{
let
struct
=
new
bluetooth
.
mojom
.
CharacteristicProperties
(
)
;
arr
.
forEach
(
val
=
>
{
let
mojo_property
=
CHARACTERISTIC_PROPERTIES_WEB_TO_MOJO
[
val
]
;
if
(
struct
.
hasOwnProperty
(
mojo_property
)
)
struct
[
mojo_property
]
=
true
;
else
throw
Invalid
member
'
{
val
}
'
for
CharacteristicProperties
;
}
)
;
return
struct
;
}
class
FakeBluetooth
{
constructor
(
)
{
this
.
fake_bluetooth_ptr_
=
new
bluetooth
.
mojom
.
FakeBluetoothPtr
(
)
;
Mojo
.
bindInterface
(
bluetooth
.
mojom
.
FakeBluetooth
.
name
mojo
.
makeRequest
(
this
.
fake_bluetooth_ptr_
)
.
handle
"
process
"
)
;
}
async
setLESupported
(
supported
)
{
if
(
typeof
supported
!
=
=
'
boolean
'
)
throw
'
Type
Not
Supported
'
;
await
this
.
fake_bluetooth_ptr_
.
setLESupported
(
supported
)
;
}
async
simulateCentral
(
{
state
}
)
{
await
this
.
setLESupported
(
true
)
;
let
{
fakeCentral
:
fake_central_ptr
}
=
await
this
.
fake_bluetooth_ptr_
.
simulateCentral
(
toMojoCentralState
(
state
)
)
;
return
new
FakeCentral
(
fake_central_ptr
)
;
}
async
allResponsesConsumed
(
)
{
let
{
consumed
}
=
await
this
.
fake_bluetooth_ptr_
.
allResponsesConsumed
(
)
;
return
consumed
;
}
}
class
FakeCentral
{
constructor
(
fake_central_ptr
)
{
this
.
fake_central_ptr_
=
fake_central_ptr
;
this
.
peripherals_
=
new
Map
(
)
;
}
async
simulatePreconnectedPeripheral
(
{
address
name
knownServiceUUIDs
=
[
]
}
)
{
knownServiceUUIDs
.
forEach
(
(
val
i
arr
)
=
>
{
knownServiceUUIDs
[
i
]
=
{
uuid
:
BluetoothUUID
.
getService
(
val
)
}
;
}
)
;
await
this
.
fake_central_ptr_
.
simulatePreconnectedPeripheral
(
address
name
knownServiceUUIDs
)
;
let
peripheral
=
this
.
peripherals_
.
get
(
address
)
;
if
(
peripheral
=
=
=
undefined
)
{
peripheral
=
new
FakePeripheral
(
address
this
.
fake_central_ptr_
)
;
this
.
peripherals_
.
set
(
address
peripheral
)
;
}
return
peripheral
;
}
}
class
FakePeripheral
{
constructor
(
address
fake_central_ptr
)
{
this
.
address
=
address
;
this
.
fake_central_ptr_
=
fake_central_ptr
;
}
async
addFakeService
(
{
uuid
}
)
{
let
{
serviceId
:
service_id
}
=
await
this
.
fake_central_ptr_
.
addFakeService
(
this
.
address
{
uuid
:
BluetoothUUID
.
getService
(
uuid
)
}
)
;
if
(
service_id
=
=
=
null
)
throw
'
addFakeService
failed
'
;
return
new
FakeRemoteGATTService
(
service_id
this
.
address
this
.
fake_central_ptr_
)
;
}
async
setNextGATTConnectionResponse
(
{
code
}
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextGATTConnectionResponse
(
this
.
address
code
)
;
if
(
success
!
=
=
true
)
throw
'
setNextGATTConnectionResponse
failed
.
'
;
}
async
setNextGATTDiscoveryResponse
(
{
code
}
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextGATTDiscoveryResponse
(
this
.
address
code
)
;
if
(
success
!
=
=
true
)
throw
'
setNextGATTDiscoveryResponse
failed
.
'
;
}
async
simulateGATTDisconnection
(
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
simulateGATTDisconnection
(
this
.
address
)
;
if
(
success
!
=
=
true
)
throw
'
simulateGATTDisconnection
failed
.
'
;
}
async
simulateGATTServicesChanged
(
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
simulateGATTServicesChanged
(
this
.
address
)
;
if
(
success
!
=
=
true
)
throw
'
simulateGATTServicesChanged
failed
.
'
;
}
}
class
FakeRemoteGATTService
{
constructor
(
service_id
peripheral_address
fake_central_ptr
)
{
this
.
service_id_
=
service_id
;
this
.
peripheral_address_
=
peripheral_address
;
this
.
fake_central_ptr_
=
fake_central_ptr
;
}
async
addFakeCharacteristic
(
{
uuid
properties
}
)
{
let
{
characteristicId
:
characteristic_id
}
=
await
this
.
fake_central_ptr_
.
addFakeCharacteristic
(
{
uuid
:
BluetoothUUID
.
getCharacteristic
(
uuid
)
}
ArrayToMojoCharacteristicProperties
(
properties
)
this
.
service_id_
this
.
peripheral_address_
)
;
if
(
characteristic_id
=
=
=
null
)
throw
'
addFakeCharacteristic
failed
'
;
return
new
FakeRemoteGATTCharacteristic
(
characteristic_id
this
.
service_id_
this
.
peripheral_address_
this
.
fake_central_ptr_
)
;
}
async
remove
(
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
removeFakeService
(
this
.
service_id_
this
.
peripheral_address_
)
;
if
(
!
success
)
throw
'
remove
failed
'
;
}
}
class
FakeRemoteGATTCharacteristic
{
constructor
(
characteristic_id
service_id
peripheral_address
fake_central_ptr
)
{
this
.
ids_
=
[
characteristic_id
service_id
peripheral_address
]
;
this
.
descriptors_
=
[
]
;
this
.
fake_central_ptr_
=
fake_central_ptr
;
}
async
addFakeDescriptor
(
{
uuid
}
)
{
let
{
descriptorId
:
descriptor_id
}
=
await
this
.
fake_central_ptr_
.
addFakeDescriptor
(
{
uuid
:
BluetoothUUID
.
getDescriptor
(
uuid
)
}
.
.
.
this
.
ids_
)
;
if
(
descriptor_id
=
=
=
null
)
throw
'
addFakeDescriptor
failed
'
;
let
fake_descriptor
=
new
FakeRemoteGATTDescriptor
(
descriptor_id
.
.
.
this
.
ids_
this
.
fake_central_ptr_
)
;
this
.
descriptors_
.
push
(
fake_descriptor
)
;
return
fake_descriptor
;
}
async
setNextReadResponse
(
gatt_code
value
=
null
)
{
if
(
gatt_code
=
=
=
0
&
&
value
=
=
=
null
)
{
throw
'
|
value
|
can
\
'
t
be
null
if
read
should
success
.
'
;
}
if
(
gatt_code
!
=
=
0
&
&
value
!
=
=
null
)
{
throw
'
|
value
|
must
be
null
if
read
should
fail
.
'
;
}
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextReadCharacteristicResponse
(
gatt_code
value
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
setNextReadCharacteristicResponse
failed
'
;
}
async
setNextWriteResponse
(
gatt_code
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextWriteCharacteristicResponse
(
gatt_code
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
setNextWriteResponse
failed
'
;
}
async
setNextSubscribeToNotificationsResponse
(
gatt_code
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextSubscribeToNotificationsResponse
(
gatt_code
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
setNextSubscribeToNotificationsResponse
failed
'
;
}
async
getLastWrittenValue
(
)
{
let
{
success
value
}
=
await
this
.
fake_central_ptr_
.
getLastWrittenValue
(
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
getLastWrittenValue
failed
'
;
return
value
;
}
async
remove
(
)
{
let
{
success
}
=
await
this
.
fake_central_ptr_
.
removeFakeCharacteristic
(
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
remove
failed
'
;
}
}
class
FakeRemoteGATTDescriptor
{
constructor
(
descriptor_id
characteristic_id
service_id
peripheral_address
fake_central_ptr
)
{
this
.
ids_
=
[
descriptor_id
characteristic_id
service_id
peripheral_address
]
;
this
.
fake_central_ptr_
=
fake_central_ptr
;
}
async
setNextReadResponse
(
gatt_code
value
=
null
)
{
if
(
gatt_code
=
=
=
0
&
&
value
=
=
=
null
)
{
throw
'
|
value
|
cannot
be
null
if
read
should
succeed
.
'
;
}
if
(
gatt_code
!
=
=
0
&
&
value
!
=
=
null
)
{
throw
'
|
value
|
must
be
null
if
read
should
fail
.
'
;
}
let
{
success
}
=
await
this
.
fake_central_ptr_
.
setNextReadDescriptorResponse
(
gatt_code
value
.
.
.
this
.
ids_
)
;
if
(
!
success
)
throw
'
setNextReadDescriptorResponse
failed
'
;
}
}
try
{
navigator
.
bluetooth
.
test
=
new
FakeBluetooth
(
)
;
}
catch
{
throw
'
Web
Bluetooth
Test
API
is
not
implemented
on
this
'
+
'
environment
.
See
the
bluetooth
README
at
'
+
'
https
:
/
/
github
.
com
/
w3c
/
web
-
platform
-
tests
/
blob
/
master
/
bluetooth
/
README
.
md
#
web
-
bluetooth
-
testing
'
;
}
