'
use
strict
'
function
convertToBidiManufacturerData
(
manufacturerData
)
{
const
bidiManufacturerData
=
[
]
;
for
(
const
key
in
manufacturerData
)
{
bidiManufacturerData
.
push
(
{
key
:
parseInt
(
key
)
data
:
btoa
(
manufacturerData
[
key
]
.
buffer
)
}
)
}
return
bidiManufacturerData
;
}
class
FakeBluetooth
{
constructor
(
)
{
this
.
fake_central_
=
null
;
}
async
simulateCentral
(
{
state
}
)
{
if
(
this
.
fake_central_
)
{
throw
'
simulateCentral
(
)
should
only
be
called
once
'
;
}
await
test_driver
.
bidi
.
bluetooth
.
simulate_adapter
(
{
state
:
state
}
)
;
this
.
fake_central_
=
new
FakeCentral
(
)
;
return
this
.
fake_central_
;
}
}
class
FakeCentral
{
constructor
(
)
{
this
.
peripherals_
=
new
Map
(
)
;
}
async
simulatePreconnectedPeripheral
(
{
address
name
manufacturerData
=
{
}
knownServiceUUIDs
=
[
]
}
)
{
await
test_driver
.
bidi
.
bluetooth
.
simulate_preconnected_peripheral
(
{
address
:
address
name
:
name
manufacturerData
:
convertToBidiManufacturerData
(
manufacturerData
)
knownServiceUuids
:
knownServiceUUIDs
}
)
;
return
this
.
fetchOrCreatePeripheral_
(
address
)
;
}
fetchOrCreatePeripheral_
(
address
)
{
let
peripheral
=
this
.
peripherals_
.
get
(
address
)
;
if
(
peripheral
=
=
=
undefined
)
{
peripheral
=
new
FakePeripheral
(
address
)
;
this
.
peripherals_
.
set
(
address
peripheral
)
;
}
return
peripheral
;
}
}
class
FakePeripheral
{
constructor
(
address
)
{
this
.
address
=
address
;
}
}
function
initializeBluetoothBidiResources
(
)
{
navigator
.
bluetooth
.
test
=
new
FakeBluetooth
(
)
;
}
