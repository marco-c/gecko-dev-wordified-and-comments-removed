'
use
strict
'
;
const
isChromiumBased
=
'
MojoInterfaceInterceptor
'
in
self
;
const
isWebKitBased
=
!
isChromiumBased
&
&
'
internals
'
in
self
;
function
loadScript
(
path
)
{
if
(
typeof
document
=
=
=
'
undefined
'
)
{
importScripts
(
path
)
;
return
Promise
.
resolve
(
)
;
}
else
{
const
script
=
document
.
createElement
(
'
script
'
)
;
script
.
src
=
path
;
script
.
async
=
false
;
const
p
=
new
Promise
(
(
resolve
reject
)
=
>
{
script
.
onload
=
(
)
=
>
{
resolve
(
)
;
}
;
script
.
onerror
=
e
=
>
{
reject
(
e
)
;
}
;
}
)
document
.
head
.
appendChild
(
script
)
;
return
p
;
}
}
async
function
loadMojoResources
(
resources
)
{
if
(
!
isChromiumBased
)
{
throw
new
Error
(
'
MojoJS
not
enabled
;
start
Chrome
with
-
-
enable
-
blink
-
features
=
MojoJS
MojoJSTest
'
)
;
}
if
(
resources
.
length
=
=
0
)
{
return
;
}
if
(
resources
.
some
(
p
=
>
p
.
endsWith
(
'
/
mojo_bindings
.
js
'
)
)
)
{
throw
new
Error
(
'
Do
not
load
mojo_bindings
.
js
explicitly
.
'
)
;
}
await
loadScript
(
'
/
gen
/
layout_test_data
/
mojo
/
public
/
js
/
mojo_bindings
.
js
'
)
;
mojo
.
config
.
autoLoadMojomDeps
=
false
;
for
(
const
path
of
resources
)
{
await
loadScript
(
path
)
;
}
}
