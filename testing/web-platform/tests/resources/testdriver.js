(
function
(
)
{
"
use
strict
"
;
var
idCounter
=
0
;
let
testharness_context
=
null
;
function
getInViewCenterPoint
(
rect
)
{
var
left
=
Math
.
max
(
0
rect
.
left
)
;
var
right
=
Math
.
min
(
window
.
innerWidth
rect
.
right
)
;
var
top
=
Math
.
max
(
0
rect
.
top
)
;
var
bottom
=
Math
.
min
(
window
.
innerHeight
rect
.
bottom
)
;
var
x
=
0
.
5
*
(
left
+
right
)
;
var
y
=
0
.
5
*
(
top
+
bottom
)
;
return
[
x
y
]
;
}
function
getPointerInteractablePaintTree
(
element
)
{
let
elementDocument
=
element
.
ownerDocument
;
if
(
!
elementDocument
.
contains
(
element
)
)
{
return
[
]
;
}
var
rectangles
=
element
.
getClientRects
(
)
;
if
(
rectangles
.
length
=
=
=
0
)
{
return
[
]
;
}
var
centerPoint
=
getInViewCenterPoint
(
rectangles
[
0
]
)
;
if
(
"
elementsFromPoint
"
in
elementDocument
)
{
return
elementDocument
.
elementsFromPoint
(
centerPoint
[
0
]
centerPoint
[
1
]
)
;
}
else
if
(
"
msElementsFromPoint
"
in
elementDocument
)
{
var
rv
=
elementDocument
.
msElementsFromPoint
(
centerPoint
[
0
]
centerPoint
[
1
]
)
;
return
Array
.
prototype
.
slice
.
call
(
rv
?
rv
:
[
]
)
;
}
else
{
throw
new
Error
(
"
document
.
elementsFromPoint
unsupported
"
)
;
}
}
function
inView
(
element
)
{
var
pointerInteractablePaintTree
=
getPointerInteractablePaintTree
(
element
)
;
return
pointerInteractablePaintTree
.
indexOf
(
element
)
!
=
=
-
1
;
}
window
.
test_driver
=
{
set_test_context
:
function
(
context
)
{
if
(
window
.
test_driver_internal
.
set_test_context
)
{
window
.
test_driver_internal
.
set_test_context
(
context
)
;
}
testharness_context
=
context
;
}
message_test
:
function
(
msg
)
{
let
target
=
testharness_context
;
if
(
testharness_context
=
=
=
null
)
{
target
=
window
;
}
target
.
postMessage
(
msg
"
*
"
)
;
}
bless
:
function
(
intent
action
context
=
null
)
{
let
contextDocument
=
context
?
context
.
document
:
document
;
var
button
=
contextDocument
.
createElement
(
"
button
"
)
;
button
.
innerHTML
=
"
This
test
requires
user
interaction
.
<
br
/
>
"
+
"
Please
click
here
to
allow
"
+
intent
+
"
.
"
;
button
.
id
=
"
wpt
-
test
-
driver
-
bless
-
"
+
(
idCounter
+
=
1
)
;
const
elem
=
contextDocument
.
body
|
|
contextDocument
.
documentElement
;
elem
.
appendChild
(
button
)
;
let
wait_click
=
new
Promise
(
resolve
=
>
button
.
addEventListener
(
"
click
"
resolve
)
)
;
return
test_driver
.
click
(
button
)
.
then
(
wait_click
)
.
then
(
function
(
)
{
button
.
remove
(
)
;
if
(
typeof
action
=
=
=
"
function
"
)
{
return
action
(
)
;
}
return
null
;
}
)
;
}
click
:
function
(
element
)
{
if
(
!
inView
(
element
)
)
{
element
.
scrollIntoView
(
{
behavior
:
"
instant
"
block
:
"
end
"
inline
:
"
nearest
"
}
)
;
}
var
pointerInteractablePaintTree
=
getPointerInteractablePaintTree
(
element
)
;
if
(
pointerInteractablePaintTree
.
length
=
=
=
0
|
|
!
element
.
contains
(
pointerInteractablePaintTree
[
0
]
)
)
{
return
Promise
.
reject
(
new
Error
(
"
element
click
intercepted
error
"
)
)
;
}
var
rect
=
element
.
getClientRects
(
)
[
0
]
;
var
centerPoint
=
getInViewCenterPoint
(
rect
)
;
return
window
.
test_driver_internal
.
click
(
element
{
x
:
centerPoint
[
0
]
y
:
centerPoint
[
1
]
}
)
;
}
delete_all_cookies
:
function
(
context
=
null
)
{
return
window
.
test_driver_internal
.
delete_all_cookies
(
context
)
;
}
send_keys
:
function
(
element
keys
)
{
if
(
!
inView
(
element
)
)
{
element
.
scrollIntoView
(
{
behavior
:
"
instant
"
block
:
"
end
"
inline
:
"
nearest
"
}
)
;
}
var
pointerInteractablePaintTree
=
getPointerInteractablePaintTree
(
element
)
;
if
(
pointerInteractablePaintTree
.
length
=
=
=
0
|
|
!
element
.
contains
(
pointerInteractablePaintTree
[
0
]
)
)
{
return
Promise
.
reject
(
new
Error
(
"
element
send_keys
intercepted
error
"
)
)
;
}
return
window
.
test_driver_internal
.
send_keys
(
element
keys
)
;
}
freeze
:
function
(
context
=
null
)
{
return
window
.
test_driver_internal
.
freeze
(
)
;
}
minimize_window
:
function
(
context
=
null
)
{
return
window
.
test_driver_internal
.
minimize_window
(
context
)
;
}
set_window_rect
:
function
(
rect
context
=
null
)
{
return
window
.
test_driver_internal
.
set_window_rect
(
rect
context
)
;
}
action_sequence
:
function
(
actions
context
=
null
)
{
return
window
.
test_driver_internal
.
action_sequence
(
actions
context
)
;
}
generate_test_report
:
function
(
message
context
=
null
)
{
return
window
.
test_driver_internal
.
generate_test_report
(
message
context
)
;
}
set_permission
:
function
(
descriptor
state
one_realm
=
false
context
=
null
)
{
let
permission_params
=
{
descriptor
state
oneRealm
:
one_realm
}
;
return
window
.
test_driver_internal
.
set_permission
(
permission_params
context
)
;
}
add_virtual_authenticator
:
function
(
config
context
=
null
)
{
return
window
.
test_driver_internal
.
add_virtual_authenticator
(
config
context
)
;
}
remove_virtual_authenticator
:
function
(
authenticator_id
context
=
null
)
{
return
window
.
test_driver_internal
.
remove_virtual_authenticator
(
authenticator_id
context
)
;
}
add_credential
:
function
(
authenticator_id
credential
context
=
null
)
{
return
window
.
test_driver_internal
.
add_credential
(
authenticator_id
credential
context
)
;
}
get_credentials
:
function
(
authenticator_id
context
=
null
)
{
return
window
.
test_driver_internal
.
get_credentials
(
authenticator_id
context
=
null
)
;
}
remove_credential
:
function
(
authenticator_id
credential_id
context
=
null
)
{
return
window
.
test_driver_internal
.
remove_credential
(
authenticator_id
credential_id
context
)
;
}
remove_all_credentials
:
function
(
authenticator_id
context
=
null
)
{
return
window
.
test_driver_internal
.
remove_all_credentials
(
authenticator_id
context
)
;
}
set_user_verified
:
function
(
authenticator_id
uv
context
=
null
)
{
return
window
.
test_driver_internal
.
set_user_verified
(
authenticator_id
uv
context
)
;
}
set_storage_access
:
function
(
origin
embedding_origin
state
context
=
null
)
{
if
(
state
!
=
=
"
allowed
"
&
&
state
!
=
=
"
blocked
"
)
{
throw
new
Error
(
"
storage
access
status
must
be
'
allowed
'
or
'
blocked
'
"
)
;
}
const
blocked
=
state
=
=
=
"
blocked
"
;
return
window
.
test_driver_internal
.
set_storage_access
(
origin
embedding_origin
blocked
context
)
;
}
set_spc_transaction_mode
:
function
(
mode
context
=
null
)
{
return
window
.
test_driver_internal
.
set_spc_transaction_mode
(
mode
context
)
;
}
}
;
window
.
test_driver_internal
=
{
in_automation
:
false
click
:
function
(
element
coords
)
{
if
(
this
.
in_automation
)
{
return
Promise
.
reject
(
new
Error
(
'
Not
implemented
'
)
)
;
}
return
new
Promise
(
function
(
resolve
reject
)
{
element
.
addEventListener
(
"
click
"
resolve
)
;
}
)
;
}
delete_all_cookies
:
function
(
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
send_keys
:
function
(
element
keys
)
{
if
(
this
.
in_automation
)
{
return
Promise
.
reject
(
new
Error
(
'
Not
implemented
'
)
)
;
}
return
new
Promise
(
function
(
resolve
reject
)
{
var
seen
=
"
"
;
function
remove
(
)
{
element
.
removeEventListener
(
"
keydown
"
onKeyDown
)
;
}
function
onKeyDown
(
event
)
{
if
(
event
.
key
.
length
>
1
)
{
return
;
}
seen
+
=
event
.
key
;
if
(
keys
.
indexOf
(
seen
)
!
=
=
0
)
{
reject
(
new
Error
(
"
Unexpected
key
sequence
:
"
+
seen
)
)
;
remove
(
)
;
}
else
if
(
seen
=
=
=
keys
)
{
resolve
(
)
;
remove
(
)
;
}
}
element
.
addEventListener
(
"
keydown
"
onKeyDown
)
;
}
)
;
}
freeze
:
function
(
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
minimize_window
:
function
(
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
set_window_rect
:
function
(
rect
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
action_sequence
:
function
(
actions
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
generate_test_report
:
function
(
message
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
set_permission
:
function
(
permission_params
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
add_virtual_authenticator
:
function
(
config
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
remove_virtual_authenticator
:
function
(
authenticator_id
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
add_credential
:
function
(
authenticator_id
credential
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
get_credentials
:
function
(
authenticator_id
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
remove_credential
:
function
(
authenticator_id
credential_id
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
remove_all_credentials
:
function
(
authenticator_id
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
set_user_verified
:
function
(
authenticator_id
uv
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
set_storage_access
:
function
(
origin
embedding_origin
blocked
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
set_spc_transaction_mode
:
function
(
mode
context
=
null
)
{
return
Promise
.
reject
(
new
Error
(
"
unimplemented
"
)
)
;
}
}
;
}
)
(
)
;
