class
SoftNavigationTestHelper
{
constructor
(
test
)
{
this
.
test_
=
test
;
}
async
withTimeoutMessage
(
promise
message
timeout
=
1000
)
{
return
Promise
.
race
(
[
promise
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
test_
.
step_timeout
(
(
)
=
>
{
reject
(
new
Error
(
message
)
)
;
}
timeout
)
;
}
)
]
)
;
}
async
newPromiseWithTimeoutMessage
(
executor
message
timeout
=
1000
)
{
return
this
.
withTimeoutMessage
(
new
Promise
(
executor
)
message
timeout
)
;
}
async
getBufferedPerformanceEntriesWithTimeout
(
type
includeSoftNavigationObservations
minNumEntries
timeout
=
1000
)
{
let
observer
;
return
this
.
newPromiseWithTimeoutMessage
(
(
resolve
)
=
>
{
const
entries
=
[
]
;
observer
=
new
PerformanceObserver
(
(
list
)
=
>
{
entries
.
push
(
.
.
.
list
.
getEntries
(
)
)
;
if
(
entries
.
length
>
=
minNumEntries
)
{
resolve
(
entries
)
;
}
}
)
observer
.
observe
(
{
type
:
type
buffered
:
true
includeSoftNavigationObservations
:
includeSoftNavigationObservations
}
)
;
}
{
minNumEntries
}
entries
of
type
{
type
}
{
includeSoftNavigationObservations
?
'
with
soft
navigation
observations
'
:
'
'
}
never
arrived
timeout
)
.
finally
(
(
)
=
>
{
observer
.
disconnect
(
)
;
}
)
;
}
}
