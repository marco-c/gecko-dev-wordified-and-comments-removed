function
calculateScrollbarThickness
(
)
{
var
container
=
document
.
createElement
(
"
div
"
)
;
container
.
style
.
width
=
"
100px
"
;
container
.
style
.
height
=
"
100px
"
;
container
.
style
.
position
=
"
absolute
"
;
container
.
style
.
visibility
=
"
hidden
"
;
container
.
style
.
overflow
=
"
auto
"
;
document
.
body
.
appendChild
(
container
)
;
var
widthBefore
=
container
.
clientWidth
;
var
longContent
=
document
.
createElement
(
"
div
"
)
;
longContent
.
style
.
height
=
"
1000px
"
;
container
.
appendChild
(
longContent
)
;
var
widthAfter
=
container
.
clientWidth
;
container
.
remove
(
)
;
return
widthBefore
-
widthAfter
;
}
function
showPinchWidget
(
scale
x
y
callback
)
{
var
border
=
10
;
var
width
=
window
.
innerWidth
/
scale
-
border
;
var
height
=
window
.
innerHeight
/
scale
-
border
;
var
box
=
document
.
createElement
(
"
div
"
)
;
box
.
style
.
width
=
width
+
"
px
"
;
box
.
style
.
height
=
height
+
"
px
"
;
box
.
style
.
left
=
x
-
border
/
2
+
"
px
"
;
box
.
style
.
top
=
y
-
border
/
2
+
"
px
"
;
box
.
style
.
position
=
"
absolute
"
;
box
.
style
.
backgroundColor
=
"
coral
"
;
box
.
style
.
border
=
border
+
"
px
solid
blue
"
;
box
.
style
.
borderBottom
=
"
0
"
;
box
.
style
.
overflow
=
"
auto
"
;
var
oldDocumentOverflow
=
document
.
documentElement
.
style
.
overflow
;
var
instructions
=
document
.
createElement
(
"
p
"
)
;
instructions
.
innerText
=
"
Pinch
-
zoom
and
align
this
box
so
that
the
left
right
and
top
"
+
"
window
edges
are
over
the
border
on
each
side
.
When
done
click
the
"
+
"
'
DONE
'
button
above
"
;
instructions
.
style
.
textAlign
=
"
center
"
;
instructions
.
style
.
fontSize
=
"
medium
"
;
var
button
=
document
.
createElement
(
"
button
"
)
;
button
.
innerText
=
"
DONE
"
;
button
.
style
.
width
=
"
50
%
"
;
button
.
style
.
height
=
"
20
%
"
;
button
.
style
.
fontSize
=
"
medium
"
;
button
.
style
.
marginLeft
=
"
25
%
"
;
button
.
addEventListener
(
"
click
"
function
(
)
{
box
.
remove
(
)
;
document
.
documentElement
.
style
.
overflow
=
oldDocumentOverflow
;
if
(
callback
)
callback
(
)
;
}
)
;
box
.
appendChild
(
button
)
;
box
.
appendChild
(
instructions
)
;
document
.
documentElement
.
style
.
overflow
=
"
hidden
"
;
document
.
body
.
appendChild
(
box
)
;
}
function
skipManualTest
(
)
{
test
(
function
(
)
{
assert_true
(
false
)
;
}
"
Manual
Test
Skipped
"
)
;
done
(
)
;
}
var
stepInstructions
=
[
]
;
var
testNames
=
[
]
;
var
stepFunctions
=
[
]
;
var
steps
;
var
curStep
=
0
;
function
addManualTestStep
(
func
testName
instructions
)
{
stepFunctions
.
push
(
func
)
;
testNames
.
push
(
testName
)
;
stepInstructions
.
push
(
instructions
)
;
}
function
nextStep
(
callbackFunc
)
{
if
(
curStep
=
=
0
)
_startManualTest
(
)
;
if
(
typeof
(
callbackFunc
)
=
=
=
'
function
'
)
callbackFunc
(
stepInstructions
[
curStep
]
)
;
steps
[
curStep
]
(
)
;
curStep
+
+
;
}
function
_startManualTest
(
)
{
steps
=
[
]
;
for
(
let
i
=
0
;
i
<
stepFunctions
.
length
;
+
+
i
)
{
var
stepFunc
=
stepFunctions
[
i
]
;
var
testName
=
testNames
[
i
]
;
if
(
testName
)
{
steps
.
push
(
async_test
(
testName
)
.
step_func
(
function
(
)
{
stepFunctions
[
i
]
(
)
;
this
.
done
(
)
;
if
(
i
=
=
stepFunctions
.
length
-
1
)
done
(
)
;
}
)
)
;
}
else
{
steps
.
push
(
function
(
)
{
stepFunctions
[
i
]
(
)
;
if
(
i
=
=
stepFunctions
.
length
-
1
)
done
(
)
;
}
)
;
}
}
}
