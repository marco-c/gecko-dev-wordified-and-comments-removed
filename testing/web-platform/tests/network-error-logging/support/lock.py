import
time
_LOCK_KEY
=
b
"
67966d2e
-
a847
-
41d8
-
b7c3
-
5f6aee3375ba
"
_TIMEOUT
=
5
def
wait_for_lock
(
request
)
:
  
t0
=
time
.
time
(
)
  
while
time
.
time
(
)
-
t0
<
_TIMEOUT
:
    
time
.
sleep
(
0
.
5
)
    
value
=
request
.
server
.
stash
.
take
(
key
=
_LOCK_KEY
)
    
if
value
is
None
:
      
return
True
  
return
False
def
lock
(
request
report_id
)
:
  
with
request
.
server
.
stash
.
lock
:
    
if
not
wait_for_lock
(
request
)
:
      
return
(
503
[
]
b
"
Cannot
obtain
lock
"
)
    
request
.
server
.
stash
.
put
(
key
=
_LOCK_KEY
value
=
report_id
)
    
return
b
"
Obtained
lock
for
%
s
"
%
report_id
def
unlock
(
request
report_id
)
:
  
with
request
.
server
.
stash
.
lock
:
    
lock_holder
=
request
.
server
.
stash
.
take
(
key
=
_LOCK_KEY
)
    
if
lock_holder
!
=
report_id
:
      
request
.
server
.
stash
.
put
(
key
=
_LOCK_KEY
value
=
lock_holder
)
      
return
(
503
[
]
b
"
Cannot
release
lock
held
by
%
s
"
%
lock_holder
)
  
return
b
"
Released
lock
for
%
s
"
%
report_id
def
main
(
request
response
)
:
  
op
=
request
.
GET
.
first
(
b
"
op
"
)
  
report_id
=
request
.
GET
.
first
(
b
"
reportID
"
)
  
if
op
=
=
b
"
lock
"
:
    
return
lock
(
request
report_id
)
  
elif
op
=
=
b
"
unlock
"
:
    
return
unlock
(
request
report_id
)
  
else
:
    
return
(
400
[
]
b
"
Invalid
op
"
)
