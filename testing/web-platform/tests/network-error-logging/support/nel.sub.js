const
reportID
=
"
{
{
id
:
uuid
(
)
}
}
"
;
function
obtainNELLock
(
)
{
return
fetch
(
"
/
network
-
error
-
logging
/
support
/
lock
.
py
?
op
=
lock
&
reportID
=
"
+
reportID
)
;
}
function
releaseNELLock
(
)
{
return
fetch
(
"
/
network
-
error
-
logging
/
support
/
lock
.
py
?
op
=
unlock
&
reportID
=
"
+
reportID
)
;
}
function
nel_test
(
callback
name
properties
)
{
promise_test
(
async
t
=
>
{
await
obtainNELLock
(
)
;
await
clearReportingAndNELConfigurations
(
)
;
await
callback
(
t
)
;
await
releaseNELLock
(
)
;
}
name
properties
)
;
}
function
_monitoredDomain
(
subdomain
)
{
if
(
subdomain
=
=
"
www
"
)
{
return
"
{
{
hosts
[
alt
]
[
www
]
}
}
"
}
else
if
(
subdomain
=
=
"
www1
"
)
{
return
"
{
{
hosts
[
alt
]
[
www1
]
}
}
"
}
else
if
(
subdomain
=
=
"
www2
"
)
{
return
"
{
{
hosts
[
alt
]
[
www2
]
}
}
"
}
else
if
(
subdomain
=
=
"
nonexistent
"
)
{
return
"
{
{
hosts
[
alt
]
[
nonexistent
]
}
}
"
}
else
{
return
"
{
{
hosts
[
alt
]
[
]
}
}
"
}
}
function
_getNELResourceURL
(
subdomain
suffix
)
{
return
"
https
:
/
/
"
+
_monitoredDomain
(
subdomain
)
+
"
:
{
{
ports
[
https
]
[
0
]
}
}
/
network
-
error
-
logging
/
support
/
"
+
suffix
;
}
function
getURLForResourceWithBasicPolicy
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
pass
.
png
?
id
=
"
+
reportID
+
"
&
success_fraction
=
1
.
0
"
)
;
}
function
fetchResourceWithBasicPolicy
(
subdomain
)
{
const
url
=
getURLForResourceWithBasicPolicy
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
fetchResourceWithZeroSuccessFractionPolicy
(
subdomain
)
{
const
url
=
_getNELResourceURL
(
subdomain
"
pass
.
png
?
id
=
"
+
reportID
+
"
&
success_fraction
=
0
.
0
"
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForResourceWithIncludeSubdomainsPolicy
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
subdomains
-
pass
.
png
?
id
=
"
+
reportID
)
;
}
function
fetchResourceWithIncludeSubdomainsPolicy
(
subdomain
)
{
const
url
=
getURLForResourceWithIncludeSubdomainsPolicy
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForResourceWithNoPolicy
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
no
-
policy
-
pass
.
png
"
)
;
}
function
fetchResourceWithNoPolicy
(
subdomain
)
{
const
url
=
getURLForResourceWithNoPolicy
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForMissingResource
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
nonexistent
.
png
"
)
;
}
function
fetchMissingResource
(
subdomain
)
{
const
url
=
getURLForMissingResource
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForCachedResource
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
cached
-
for
-
one
-
minute
.
png
"
)
;
}
function
fetchCachedResource
(
subdomain
)
{
const
url
=
getURLForCachedResource
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForValidatedCachedResource
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
cached
-
with
-
validation
.
py
"
)
;
}
function
fetchValidatedCachedResource
(
subdomain
)
{
const
url
=
getURLForValidatedCachedResource
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForRedirectedResource
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
redirect
.
py
?
id
=
"
+
reportID
)
;
}
function
fetchRedirectedResource
(
subdomain
)
{
const
url
=
getURLForRedirectedResource
(
subdomain
)
;
return
fetch
(
url
{
mode
:
"
no
-
cors
"
}
)
;
}
function
getURLForClearingConfiguration
(
subdomain
)
{
return
_getNELResourceURL
(
subdomain
"
clear
-
policy
-
pass
.
png
?
id
=
"
+
reportID
)
;
}
async
function
clearReportingAndNELConfigurations
(
subdomain
)
{
await
Promise
.
all
(
[
fetch
(
getURLForClearingConfiguration
(
"
"
)
{
mode
:
"
no
-
cors
"
}
)
fetch
(
getURLForClearingConfiguration
(
"
www
"
)
{
mode
:
"
no
-
cors
"
}
)
fetch
(
getURLForClearingConfiguration
(
"
www1
"
)
{
mode
:
"
no
-
cors
"
}
)
fetch
(
getURLForClearingConfiguration
(
"
www2
"
)
{
mode
:
"
no
-
cors
"
}
)
]
)
;
return
;
}
function
_isSubsetOf
(
obj1
obj2
)
{
for
(
const
prop
in
obj1
)
{
if
(
typeof
obj1
[
prop
]
=
=
=
'
object
'
)
{
if
(
typeof
obj2
[
prop
]
!
=
=
'
object
'
)
{
return
false
;
}
if
(
!
_isSubsetOf
(
obj1
[
prop
]
obj2
[
prop
]
)
)
{
return
false
;
}
}
else
if
(
obj1
[
prop
]
!
=
obj2
[
prop
]
)
{
return
false
;
}
}
return
true
;
}
async
function
reportExists
(
expected
)
{
var
timeout
=
document
.
querySelector
(
"
meta
[
name
=
timeout
]
[
content
=
long
]
"
)
?
50
:
1
;
var
reportLocation
=
"
/
network
-
error
-
logging
/
support
/
report
.
py
?
op
=
retrieve_report
&
timeout
=
"
+
timeout
+
"
&
reportID
=
"
+
reportID
;
const
response
=
await
fetch
(
reportLocation
)
;
const
json
=
await
response
.
json
(
)
;
for
(
const
report
of
json
)
{
if
(
_isSubsetOf
(
expected
report
)
)
{
return
true
;
}
}
return
false
;
}
async
function
reportsExist
(
expected_reports
)
{
const
timeout
=
10
;
let
reportLocation
=
"
/
network
-
error
-
logging
/
support
/
report
.
py
?
op
=
retrieve_report
&
timeout
=
"
+
timeout
+
"
&
reportID
=
"
+
reportID
;
const
min_count
=
expected_reports
.
length
+
1
;
reportLocation
+
=
"
&
min_count
=
"
+
min_count
;
const
response
=
await
fetch
(
reportLocation
)
;
const
json
=
await
response
.
json
(
)
;
for
(
const
expected
of
expected_reports
)
{
const
found
=
json
.
some
(
(
report
)
=
>
{
return
_isSubsetOf
(
expected
report
)
;
}
)
;
if
(
!
found
)
return
false
;
}
return
true
;
}
