import
pytest
from
tests
.
support
.
sync
import
AsyncPoll
import
webdriver
.
bidi
.
error
as
error
from
.
.
import
get_user_context_ids
pytest
.
mark
.
asyncio
async
def
test_remove_context
(
bidi_session
create_user_context
)
:
    
user_context
=
await
create_user_context
(
)
    
assert
user_context
in
await
get_user_context_ids
(
bidi_session
)
    
await
bidi_session
.
browser
.
remove_user_context
(
user_context
=
user_context
)
    
assert
user_context
not
in
await
get_user_context_ids
(
bidi_session
)
    
assert
"
default
"
in
await
get_user_context_ids
(
bidi_session
)
pytest
.
mark
.
parametrize
(
"
type_hint
"
[
"
tab
"
"
window
"
]
)
pytest
.
mark
.
asyncio
async
def
test_remove_context_closes_contexts
(
    
bidi_session
subscribe_events
wait_for_event
create_user_context
type_hint
)
:
    
await
subscribe_events
(
events
=
[
"
browsingContext
.
contextDestroyed
"
]
)
    
user_context_1
=
await
create_user_context
(
)
    
user_context_2
=
await
create_user_context
(
)
    
context_1
=
await
bidi_session
.
browsing_context
.
create
(
        
user_context
=
user_context_1
type_hint
=
type_hint
    
)
    
context_2
=
await
bidi_session
.
browsing_context
.
create
(
        
user_context
=
user_context_1
type_hint
=
type_hint
    
)
    
context_3
=
await
bidi_session
.
browsing_context
.
create
(
        
user_context
=
user_context_2
type_hint
=
type_hint
    
)
    
context_4
=
await
bidi_session
.
browsing_context
.
create
(
        
user_context
=
user_context_2
type_hint
=
type_hint
    
)
    
events
=
[
]
    
async
def
on_event
(
method
data
)
:
        
events
.
append
(
data
)
    
remove_listener
=
bidi_session
.
add_event_listener
(
"
browsingContext
.
contextDestroyed
"
on_event
)
    
await
bidi_session
.
browser
.
remove_user_context
(
user_context
=
user_context_1
)
    
wait
=
AsyncPoll
(
bidi_session
timeout
=
2
)
    
await
wait
.
until
(
lambda
_
:
len
(
events
)
>
=
2
)
    
assert
len
(
events
)
=
=
2
    
destroyed_contexts
=
[
event
[
"
context
"
]
for
event
in
events
]
    
assert
context_1
[
"
context
"
]
in
destroyed_contexts
    
assert
context_2
[
"
context
"
]
in
destroyed_contexts
    
await
bidi_session
.
browser
.
remove_user_context
(
user_context
=
user_context_2
)
    
wait
=
AsyncPoll
(
bidi_session
timeout
=
2
)
    
await
wait
.
until
(
lambda
_
:
len
(
events
)
>
=
4
)
    
assert
len
(
events
)
=
=
4
    
destroyed_contexts
=
[
event
[
"
context
"
]
for
event
in
events
]
    
assert
context_3
[
"
context
"
]
in
destroyed_contexts
    
assert
context_4
[
"
context
"
]
in
destroyed_contexts
    
remove_listener
(
)
