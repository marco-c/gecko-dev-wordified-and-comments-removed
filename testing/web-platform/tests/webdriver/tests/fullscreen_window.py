from
tests
.
support
.
inline
import
inline
from
tests
.
support
.
asserts
import
assert_error
assert_success
assert_dialog_handled
from
tests
.
support
.
fixtures
import
create_dialog
alert_doc
=
inline
(
"
<
script
>
window
.
alert
(
)
<
/
script
>
"
)
def
read_global
(
session
name
)
:
    
return
session
.
execute_script
(
"
return
%
s
;
"
%
name
)
def
fullscreen
(
session
)
:
    
return
session
.
transport
.
send
(
"
POST
"
"
session
/
%
s
/
window
/
fullscreen
"
%
session
.
session_id
)
def
test_no_browsing_context
(
session
create_window
)
:
    
session
.
window_handle
=
create_window
(
)
    
session
.
close
(
)
    
response
=
fullscreen
(
session
)
    
assert_error
(
response
"
no
such
window
"
)
def
test_handle_prompt_accept
(
new_session
)
:
    
_
session
=
new_session
(
{
"
alwaysMatch
"
:
{
"
unhandledPromptBehavior
"
:
"
accept
"
}
}
)
    
session
.
url
=
inline
(
"
<
title
>
WD
doc
title
<
/
title
>
"
)
    
create_dialog
(
session
)
(
"
alert
"
text
=
"
accept
#
1
"
result_var
=
"
accept1
"
)
    
expected_title
=
read_global
(
session
"
document
.
title
"
)
    
response
=
fullscreen
(
session
)
    
assert_success
(
response
expected_title
)
    
assert_dialog_handled
(
session
"
accept
#
1
"
)
    
assert
read_global
(
session
"
accept1
"
)
=
=
None
    
expected_title
=
read_global
(
session
"
document
.
title
"
)
    
create_dialog
(
session
)
(
"
confirm
"
text
=
"
accept
#
2
"
result_var
=
"
accept2
"
)
    
response
=
fullscreen
(
session
)
    
assert_success
(
response
expected_title
)
    
assert_dialog_handled
(
session
"
accept
#
2
"
)
    
assert
read_global
(
session
"
accept2
"
)
True
    
expected_title
=
read_global
(
session
"
document
.
title
"
)
    
create_dialog
(
session
)
(
"
prompt
"
text
=
"
accept
#
3
"
result_var
=
"
accept3
"
)
    
response
=
fullscreen
(
session
)
    
assert_success
(
response
expected_title
)
    
assert_dialog_handled
(
session
"
accept
#
3
"
)
    
assert
read_global
(
session
"
accept3
"
)
=
=
"
"
def
test_handle_prompt_missing_value
(
session
create_dialog
)
:
    
session
.
url
=
inline
(
"
<
title
>
WD
doc
title
<
/
title
>
"
)
    
create_dialog
(
"
alert
"
text
=
"
dismiss
#
1
"
result_var
=
"
dismiss1
"
)
    
response
=
fullscreen
(
session
)
    
assert_error
(
response
"
unexpected
alert
open
"
)
    
assert_dialog_handled
(
session
"
dismiss
#
1
"
)
    
assert
read_global
(
session
"
accept1
"
)
=
=
None
    
create_dialog
(
"
confirm
"
text
=
"
dismiss
#
2
"
result_var
=
"
dismiss2
"
)
    
response
=
fullscreen
(
session
)
    
assert_error
(
response
"
unexpected
alert
open
"
)
    
assert_dialog_handled
(
session
"
dismiss
#
2
"
)
    
assert
read_global
(
session
"
dismiss2
"
)
=
=
False
    
create_dialog
(
"
prompt
"
text
=
"
dismiss
#
3
"
result_var
=
"
dismiss3
"
)
    
response
=
fullscreen
(
session
)
    
assert_error
(
response
"
unexpected
alert
open
"
)
    
assert_dialog_handled
(
session
"
dismiss
#
3
"
)
    
assert
read_global
(
session
"
dismiss3
"
)
=
=
None
def
test_fullscreen
(
session
)
:
    
response
=
fullscreen
(
session
)
    
assert_success
(
response
)
    
assert
session
.
execute_script
(
"
return
window
.
fullScreen
"
)
=
=
True
def
test_payload
(
session
)
:
    
response
=
fullscreen
(
session
)
    
assert
response
.
status
=
=
200
    
assert
isinstance
(
response
.
body
[
"
value
"
]
dict
)
    
rect
=
response
.
body
[
"
value
"
]
    
assert
"
width
"
in
rect
    
assert
"
height
"
in
rect
    
assert
"
x
"
in
rect
    
assert
"
y
"
in
rect
    
assert
isinstance
(
rect
[
"
width
"
]
(
int
float
)
)
    
assert
isinstance
(
rect
[
"
height
"
]
(
int
float
)
)
    
assert
isinstance
(
rect
[
"
x
"
]
(
int
float
)
)
    
assert
isinstance
(
rect
[
"
y
"
]
(
int
float
)
)
def
test_fullscreen_twice_is_idempotent
(
session
)
:
    
assert
session
.
execute_script
(
"
return
window
.
fullScreen
"
)
is
False
    
first_response
=
fullscreen
(
session
)
    
assert_success
(
first_response
)
    
assert
session
.
execute_script
(
"
return
window
.
fullScreen
"
)
is
True
    
second_response
=
fullscreen
(
session
)
    
assert_success
(
second_response
)
    
assert
session
.
execute_script
(
"
return
window
.
fullScreen
"
)
is
True
