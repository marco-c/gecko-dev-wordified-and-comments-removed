import
pytest
from
webdriver
import
error
def
test_handle_prompt_accept
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
accept
"
}
)
}
}
)
    
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
with
pytest
.
raises
(
error
.
NoSuchAlertException
)
:
        
session
.
alert
.
accept
(
)
def
test_handle_prompt_dismiss
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
dismiss
"
}
)
}
}
)
    
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
with
pytest
.
raises
(
error
.
NoSuchAlertException
)
:
        
session
.
alert
.
dismiss
(
)
def
test_handle_prompt_dismiss_and_notify
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
dismiss
and
notify
"
}
)
}
}
)
    
with
pytest
.
raises
(
error
.
UnexpectedAlertOpenException
)
:
        
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
with
pytest
.
raises
(
error
.
NoSuchAlertException
)
:
        
session
.
alert
.
dismiss
(
)
def
test_handle_prompt_accept_and_notify
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
accept
and
notify
"
}
)
}
}
)
    
with
pytest
.
raises
(
error
.
UnexpectedAlertOpenException
)
:
        
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
with
pytest
.
raises
(
error
.
NoSuchAlertException
)
:
        
session
.
alert
.
accept
(
)
def
test_handle_prompt_ignore
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
ignore
"
}
)
}
}
)
    
with
pytest
.
raises
(
error
.
UnexpectedAlertOpenException
)
:
        
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
session
.
alert
.
dismiss
(
)
def
test_handle_prompt_default
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
}
)
}
}
)
    
with
pytest
.
raises
(
error
.
UnexpectedAlertOpenException
)
:
        
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
"
)
    
with
pytest
.
raises
(
error
.
NoSuchAlertException
)
:
        
session
.
alert
.
dismiss
(
)
def
test_handle_prompt_twice
(
new_session
add_browser_capabilites
)
:
    
_
session
=
new_session
(
{
"
capabilities
"
:
{
"
alwaysMatch
"
:
add_browser_capabilites
(
{
"
unhandledPromptBehavior
"
:
"
accept
"
}
)
}
}
)
    
session
.
execute_async_script
(
"
window
.
alert
(
'
Hello
'
)
;
window
.
alert
(
'
Bye
'
)
;
"
)
    
assert
session
.
alert
.
text
=
=
"
Bye
"
    
session
.
alert
.
dismiss
(
)
