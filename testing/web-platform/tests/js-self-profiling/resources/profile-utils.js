(
function
(
global
)
{
const
TEST_SAMPLE_INTERVAL
=
10
;
function
forceSample
(
)
{
for
(
const
deadline
=
performance
.
now
(
)
+
TEST_SAMPLE_INTERVAL
+
500
;
performance
.
now
(
)
<
deadline
;
)
;
}
async
function
profileFunction
(
func
)
{
const
profiler
=
new
Profiler
(
{
sampleInterval
:
TEST_SAMPLE_INTERVAL
maxBufferSize
:
Number
.
MAX_SAFE_INTEGER
}
)
;
func
(
(
)
=
>
forceSample
(
)
)
;
const
trace
=
await
profiler
.
stop
(
)
;
assert_greater_than
(
trace
.
resources
.
length
0
)
;
assert_greater_than
(
trace
.
frames
.
length
0
)
;
assert_greater_than
(
trace
.
stacks
.
length
0
)
;
assert_greater_than
(
trace
.
samples
.
length
0
)
;
return
trace
;
}
async
function
testFunction
(
func
frame
)
{
const
trace
=
await
profileFunction
(
func
)
;
assert_true
(
containsFrame
(
trace
frame
)
'
trace
contains
frame
'
)
;
}
function
substackMatches
(
trace
stackId
expectedStack
)
{
if
(
expectedStack
.
length
=
=
=
0
)
{
return
true
;
}
if
(
stackId
=
=
=
undefined
)
{
return
false
;
}
const
stackElem
=
trace
.
stacks
[
stackId
]
;
const
expectedFrame
=
expectedStack
[
0
]
;
if
(
!
frameMatches
(
trace
.
frames
[
stackElem
.
frameId
]
expectedFrame
)
)
{
return
false
;
}
return
substackMatches
(
trace
stackElem
.
parentId
expectedStack
.
slice
(
1
)
)
;
}
function
containsFrame
(
trace
expectedFrame
)
{
return
trace
.
frames
.
find
(
frame
=
>
{
return
frameMatches
(
frame
expectedFrame
)
;
}
)
!
=
=
undefined
;
}
function
containsSubstack
(
trace
expectedStack
)
{
return
trace
.
samples
.
find
(
sample
=
>
{
let
stackId
=
sample
.
stackId
;
while
(
stackId
!
=
=
undefined
)
{
if
(
substackMatches
(
trace
stackId
expectedStack
)
)
{
return
true
;
}
stackId
=
trace
.
stacks
[
stackId
]
.
parentId
;
}
return
false
;
}
)
!
=
=
undefined
;
}
function
containsResource
(
trace
expectedResource
)
{
return
trace
.
resources
.
includes
(
expectedResource
)
;
}
function
frameMatches
(
actual
expected
)
{
return
(
expected
.
name
=
=
=
undefined
|
|
expected
.
name
=
=
=
actual
.
name
)
&
&
(
expected
.
resourceId
=
=
=
undefined
|
|
expected
.
resourceId
=
=
=
actual
.
resourceId
)
&
&
(
expected
.
line
=
=
=
undefined
|
|
expected
.
line
=
=
=
actual
.
line
)
&
&
(
expected
.
column
=
=
=
undefined
|
|
expected
.
column
=
=
=
actual
.
column
)
;
}
function
forceSampleFrame
(
frame
)
{
const
channel
=
new
MessageChannel
(
)
;
const
replyPromise
=
new
Promise
(
res
=
>
{
channel
.
port1
.
onmessage
=
res
;
}
)
;
frame
.
postMessage
(
'
'
'
*
'
[
channel
.
port2
]
)
;
return
replyPromise
;
}
window
.
addEventListener
(
'
message
'
message
=
>
{
(
function
sampleFromMessage
(
)
{
ProfileUtils
.
forceSample
(
)
;
message
.
ports
[
0
]
.
postMessage
(
'
'
)
;
}
)
(
)
;
}
)
;
global
.
ProfileUtils
=
{
profileFunction
forceSample
containsFrame
containsSubstack
containsResource
forceSampleFrame
testFunction
}
;
}
)
(
this
)
;
