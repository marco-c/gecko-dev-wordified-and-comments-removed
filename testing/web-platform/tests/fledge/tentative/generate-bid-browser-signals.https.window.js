"
use
strict
;
"
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
expectedBrowserSignals
=
{
"
topWindowHostname
"
:
window
.
location
.
hostname
"
seller
"
:
window
.
location
.
origin
"
adComponentsLimit
"
:
40
"
joinCount
"
:
1
"
bidCount
"
:
0
"
prevWinsMs
"
:
[
]
}
let
biddingLogicURL
=
createBiddingScriptURL
(
{
generateBid
:
let
expectedBrowserSignals
=
{
JSON
.
stringify
(
expectedBrowserSignals
)
}
;
/
/
Can
'
t
check
this
value
exactly
.
expectedBrowserSignals
.
recency
=
browserSignals
.
recency
;
/
/
This
value
may
be
affected
by
other
recently
run
tests
.
expectedBrowserSignals
.
forDebuggingOnlyInCooldownOrLockout
=
browserSignals
.
forDebuggingOnlyInCooldownOrLockout
;
/
/
Remove
deprecated
field
if
present
.
delete
browserSignals
.
prevWins
;
if
(
!
deepEquals
(
browserSignals
expectedBrowserSignals
)
)
throw
"
Unexpected
browserSignals
:
"
+
JSON
.
stringify
(
browserSignals
)
;
}
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
biddingLogicURL
}
}
)
;
}
'
Only
expected
fields
present
.
'
)
;
function
createJoinCountBiddingScriptURL
(
expectedJoinCount
)
{
return
createBiddingScriptURL
(
{
generateBid
:
if
(
browserSignals
.
joinCount
!
=
=
{
expectedJoinCount
}
)
throw
"
Unexpected
joinCount
:
"
+
browserSignals
.
joinCount
;
}
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
1
)
}
}
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
2
)
}
}
)
;
}
'
browserSignals
.
joinCount
same
joining
page
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
1
)
}
}
)
;
await
joinCrossOriginInterestGroupInTopLevelWindow
(
test
uuid
OTHER_ORIGIN1
window
.
location
.
origin
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
2
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
joinCount
different
top
-
level
joining
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
1
)
}
}
)
;
await
leaveInterestGroup
(
{
name
:
uuid
}
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
name
:
uuid
biddingLogicURL
:
createJoinCountBiddingScriptURL
(
1
)
}
}
)
;
}
'
browserSignals
.
joinCount
leave
and
rejoin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
generateBid
:
if
(
browserSignals
.
recency
=
=
=
undefined
)
throw
new
Error
(
"
Missing
recency
in
browserSignals
.
"
)
if
(
browserSignals
.
recency
<
0
)
throw
new
Error
(
"
Recency
is
a
negative
value
.
"
)
if
(
browserSignals
.
recency
>
30000
)
throw
new
Error
(
"
Recency
is
over
30
seconds
threshold
.
"
)
if
(
browserSignals
.
recency
%
100
!
=
=
0
)
throw
new
Error
(
"
Recency
is
not
rounded
to
multiple
of
100
milliseconds
.
"
)
return
{
'
bid
'
:
9
'
render
'
:
interestGroup
.
ads
[
0
]
.
renderURL
}
;
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Check
recency
in
generateBid
(
)
is
below
a
certain
threshold
and
rounded
'
+
'
to
multiple
of
100
milliseconds
.
'
)
;
function
createBidCountBiddingScriptURL
(
expectedBidCount
)
{
return
createBiddingScriptURL
(
{
generateBid
:
if
(
browserSignals
.
bidCount
!
=
=
{
expectedBidCount
}
)
throw
"
Unexpected
bidCount
:
"
+
browserSignals
.
bidCount
;
}
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeAuction
(
test
uuid
)
;
await
runBasicFledgeAuction
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
not
incremented
when
ad
not
used
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
2
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
when
ad
used
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinCrossOriginInterestGroupInTopLevelWindow
(
test
uuid
OTHER_ORIGIN1
window
.
location
.
origin
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
persists
across
re
-
join
from
other
top
-
level
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
{
name
:
uuid
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
leave
and
rejoin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
let
fencedFrameConfigs
=
await
Promise
.
all
(
[
runBasicFledgeTestExpectingWinner
(
test
uuid
)
runBasicFledgeTestExpectingWinner
(
test
uuid
)
]
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfigs
[
0
]
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfigs
[
1
]
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
2
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
two
auctions
at
once
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
trackedRenderURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
'
ad
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
ads
:
[
{
renderURL
:
trackedRenderURL
}
]
}
)
;
let
fencedFrameConfig
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
trackedRenderURL
trackedRenderURL
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
once
when
winning
ad
used
twice
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderReportURL
=
createBidderReportURL
(
uuid
'
winner
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
0
.
1
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
'
loser
'
)
}
'
)
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
'
{
bidderReportURL
}
'
)
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
bidderReportURL
createSellerReportURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
when
another
interest
group
wins
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
return
0
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
when
seller
rejects
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
throw
"
a
fit
"
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
when
seller
throws
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
'
return
;
'
}
)
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
not
incremented
when
no
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderReportURL
=
createBidderReportURL
(
uuid
'
winner
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
'
return
;
'
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
'
{
bidderReportURL
}
'
)
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
bidderReportURL
createSellerReportURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
0
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
not
incremented
when
no
bid
and
another
interest
group
wins
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderReportURL
=
createBidderReportURL
(
uuid
'
winner
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
42
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
'
loser
'
)
}
'
)
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
'
{
bidderReportURL
}
'
)
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
bid
=
=
=
42
)
return
-
1
;
}
)
}
)
;
await
waitForObservedRequests
(
uuid
[
bidderReportURL
]
)
;
await
leaveInterestGroup
(
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBidCountBiddingScriptURL
(
1
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
bidCount
incremented
when
makes
largest
bid
but
seller
rejects
the
bid
.
'
)
;
function
createPrevWinsMsBiddingScriptURL
(
expectedPrevWinsMs
adIndex
=
0
)
{
return
createBiddingScriptURL
(
{
generateBid
:
for
(
let
i
=
0
;
i
<
browserSignals
.
prevWinsMs
.
length
;
i
+
+
)
{
/
/
Check
age
is
in
a
reasonable
range
.
if
(
browserSignals
.
prevWinsMs
[
i
]
[
0
]
<
0
|
|
browserSignals
.
prevWinsMs
[
i
]
[
0
]
>
30000
)
{
throw
"
Unexpected
prevWinsMs
time
:
"
+
JSON
.
stringify
(
browserSignals
.
prevWinsMs
)
;
}
/
/
Set
age
to
0
.
browserSignals
.
prevWinsMs
[
i
]
[
0
]
=
0
;
/
/
Remove
obsolete
field
if
present
.
delete
browserSignals
.
prevWinsMs
[
i
]
[
1
]
.
render_url
;
}
if
(
!
deepEquals
(
browserSignals
.
prevWinsMs
{
JSON
.
stringify
(
expectedPrevWinsMs
)
}
)
)
throw
"
Unexpected
prevWinsMs
:
"
+
JSON
.
stringify
(
browserSignals
.
prevWinsMs
)
;
return
{
bid
:
1
render
:
interestGroup
.
ads
[
{
adIndex
}
]
.
renderURL
}
;
}
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeAuction
(
test
uuid
)
;
await
runBasicFledgeAuction
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
affected
when
ad
not
used
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
]
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
no
metadata
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
ads
=
[
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
{
renderURL
:
createRenderURL
(
uuid
2
)
}
]
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
0
)
ads
:
ads
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
]
1
)
ads
:
ads
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
]
]
2
)
ads
:
ads
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
2
)
}
]
]
)
ads
:
ads
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
with
metadata
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
ads
=
[
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
{
renderURL
:
createRenderURL
(
uuid
2
)
}
]
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
ads
:
[
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
]
)
ads
:
[
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
]
]
)
ads
:
[
{
renderURL
:
createRenderURL
(
uuid
2
)
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
0
)
metadata
:
null
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
1
)
metadata
:
[
'
1
'
2
{
3
:
4
}
]
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
2
)
}
]
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
different
set
of
ads
for
each
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
joinCrossOriginInterestGroupInTopLevelWindow
(
test
uuid
OTHER_ORIGIN1
window
.
location
.
origin
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
persists
across
re
-
join
from
other
top
-
level
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
{
name
:
uuid
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
leave
and
rejoin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
let
fencedFrameConfigs
=
await
Promise
.
all
(
[
runBasicFledgeTestExpectingWinner
(
test
uuid
)
runBasicFledgeTestExpectingWinner
(
test
uuid
)
]
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfigs
[
0
]
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfigs
[
1
]
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
[
0
{
renderURL
:
createRenderURL
(
uuid
)
}
]
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
two
auctions
at
once
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
trackedRenderURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
'
ad
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
ads
:
[
{
renderURL
:
trackedRenderURL
}
]
}
)
;
let
fencedFrameConfig
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
trackedRenderURL
trackedRenderURL
]
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
[
0
{
renderURL
:
trackedRenderURL
}
]
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
has
only
one
win
when
winning
ad
used
twice
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderReportURL
=
createBidderReportURL
(
uuid
'
winner
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
0
.
1
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
'
loser
'
)
}
'
)
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
'
{
bidderReportURL
}
'
)
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
bidderReportURL
createSellerReportURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
updated
when
another
interest
group
wins
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
return
0
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
updated
when
seller
rejects
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
throw
"
a
fit
"
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
updated
when
seller
throws
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
'
return
;
'
}
)
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
updated
when
no
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderReportURL
=
createBidderReportURL
(
uuid
'
winner
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
42
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
'
loser
'
)
}
'
)
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
'
{
bidderReportURL
}
'
)
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
bid
=
=
=
42
)
return
0
.
1
;
}
)
}
)
;
await
waitForObservedRequests
(
uuid
[
bidderReportURL
]
)
;
await
leaveInterestGroup
(
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
uuid
biddingLogicURL
:
createPrevWinsMsBiddingScriptURL
(
[
]
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
browserSignals
.
prevWinsMs
not
updated
when
makes
largest
bid
but
another
interest
group
wins
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingWasmHelperURL
:
{
RESOURCE_PATH
}
wasm
-
helper
.
py
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
if
(
!
browserSignals
.
wasmHelper
)
throw
"
No
WASM
helper
"
;
let
instance
=
new
WebAssembly
.
Instance
(
browserSignals
.
wasmHelper
)
;
if
(
!
instance
)
throw
"
Couldn
'
t
create
WASM
Instance
"
;
if
(
!
deepEquals
(
Object
.
keys
(
instance
.
exports
)
[
"
increment
"
]
)
)
throw
"
Unexpected
exports
:
"
+
JSON
.
stringify
(
instance
.
exports
)
;
if
(
instance
.
exports
.
increment
(
1
)
!
=
=
2
)
throw
"
Unexpected
increment
result
:
"
+
instance
.
exports
.
increment
(
1
)
;
}
)
}
}
)
;
}
'
browserSignals
.
wasmHelper
.
'
)
;
