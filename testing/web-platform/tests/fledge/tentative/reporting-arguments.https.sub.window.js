"
use
strict
;
"
async
function
runReportArgumentValidationTest
(
test
reportResultSuccessCondition
reportWinSuccessCondition
uuid
)
{
if
(
!
uuid
)
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResultSuccessCondition
:
reportResultSuccessCondition
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
reportWinSuccessCondition
:
reportWinSuccessCondition
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
return
45
;
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
45
'
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Seller
passes
number
to
bidder
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
return
'
foo
'
;
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
"
foo
"
'
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Seller
passes
string
to
bidder
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
return
[
3
1
2
]
;
reportWinSuccessCondition
:
'
JSON
.
stringify
(
sellerSignals
)
=
=
=
"
[
3
1
2
]
"
'
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Seller
passes
array
to
bidder
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
return
{
a
:
4
b
:
[
'
c
'
null
{
}
]
}
;
reportWinSuccessCondition
:
JSON
.
stringify
(
sellerSignals
)
=
=
=
'
{
"
a
"
:
4
"
b
"
:
[
"
c
"
null
{
}
]
}
'
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Seller
passes
object
to
bidder
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
topWindowHostname
=
=
=
"
{
window
.
location
.
hostname
}
"
browserSignals
.
topWindowHostname
=
=
=
"
{
window
.
location
.
hostname
}
"
)
;
}
'
browserSignals
.
topWindowHostname
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
seller
=
=
=
undefined
browserSignals
.
seller
=
=
=
"
{
window
.
location
.
origin
}
"
)
;
}
'
browserSignals
.
seller
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
topLevelSeller
=
=
=
undefined
&
&
browserSignals
.
componentSeller
=
=
=
undefined
browserSignals
.
topLevelSeller
=
=
=
undefined
&
&
browserSignals
.
componentSeller
=
=
=
undefined
)
;
}
'
browserSignals
.
topLevelSeller
and
browserSignals
.
componentSeller
test
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
renderUrl
=
=
=
"
{
createRenderUrl
(
uuid
)
}
"
browserSignals
.
renderUrl
=
=
=
"
{
createRenderUrl
(
uuid
)
}
"
uuid
)
;
}
'
browserSignals
.
renderUrl
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
bid
=
=
=
9
browserSignals
.
bid
=
=
=
9
)
;
}
'
browserSignals
.
bid
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
desirability
=
=
=
18
browserSignals
.
desirability
=
=
=
undefined
)
;
}
'
browserSignals
.
desirability
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
topLevelSellerSignals
=
=
=
undefined
browserSignals
.
topLevelSellerSignals
=
=
=
undefined
)
;
}
'
browserSignals
.
topLevelSellerSignals
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
dataVersion
=
=
=
undefined
browserSignals
.
dataVersion
=
=
=
undefined
)
;
}
'
browserSignals
.
dataVersion
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
modifiedBid
=
=
=
undefined
browserSignals
.
modifiedBid
=
=
=
undefined
)
;
}
'
browserSignals
.
modifiedBid
test
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
highestScoringOtherBid
=
=
=
0
browserSignals
.
highestScoringOtherBid
=
=
=
0
uuid
)
;
}
'
browserSignals
.
highestScoringOtherBid
with
no
other
interest
groups
test
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
-
2
}
)
name
:
'
other
interest
group
1
'
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
-
1
}
)
name
:
'
other
interest
group
2
'
}
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
highestScoringOtherBid
=
=
=
0
browserSignals
.
highestScoringOtherBid
=
=
=
0
uuid
)
;
}
'
browserSignals
.
highestScoringOtherBid
with
other
groups
that
do
not
bid
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
2
}
)
name
:
'
other
interest
group
1
'
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
5
}
)
name
:
'
other
interest
group
2
'
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
2
}
)
name
:
'
other
interest
group
3
'
}
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
highestScoringOtherBid
=
=
=
5
browserSignals
.
highestScoringOtherBid
=
=
=
5
uuid
)
;
}
'
browserSignals
.
highestScoringOtherBid
with
other
bids
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
interestGroupName
=
=
=
undefined
browserSignals
.
interestGroupName
=
=
=
"
default
name
"
)
;
}
'
browserSignals
.
interestGroupName
test
.
'
)
;
promise_test
(
async
test
=
>
{
await
runReportArgumentValidationTest
(
test
browserSignals
.
madeHighestScoringOtherBid
=
=
=
undefined
browserSignals
.
madeHighestScoringOtherBid
=
=
=
false
)
;
}
'
browserSignals
.
madeHighestScoringOtherBid
with
no
other
bids
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
-
1
}
)
name
:
'
other
interest
group
2
'
}
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
madeHighestScoringOtherBid
=
=
=
undefined
browserSignals
.
madeHighestScoringOtherBid
=
=
=
false
)
;
}
'
browserSignals
.
madeHighestScoringOtherBid
with
group
that
did
not
bid
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicUrl
:
createBiddingScriptUrl
(
{
bid
:
1
}
)
name
:
'
other
interest
group
2
'
}
)
;
await
runReportArgumentValidationTest
(
test
browserSignals
.
madeHighestScoringOtherBid
=
=
=
undefined
browserSignals
.
madeHighestScoringOtherBid
=
=
=
true
uuid
)
;
}
'
browserSignals
.
madeHighestScoringOtherBid
with
other
bid
.
'
)
;
