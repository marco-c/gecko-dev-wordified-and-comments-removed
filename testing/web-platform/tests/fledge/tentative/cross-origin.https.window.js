"
use
strict
;
"
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
document
.
location
.
origin
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
Join
interest
group
in
same
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
scoreAd
:
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
OTHER_ORIGIN1
}
"
)
throw
"
Wrong
owner
:
"
+
browserSignals
.
interestGroupOwner
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
scoreAd
:
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
OTHER_ORIGIN1
}
"
)
throw
"
Wrong
owner
:
"
+
browserSignals
.
interestGroupOwner
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
with
join
-
ad
-
interest
-
group
permission
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
'
none
'
"
)
;
await
runInFrame
(
test
iframe
try
{
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
return
"
exception
unexpectedly
not
thrown
"
;
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
with
join
-
ad
-
interest
-
group
permission
denied
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
let
interestGroup
=
JSON
.
stringify
(
createInterestGroupForOrigin
(
uuid
window
.
location
.
origin
)
)
;
await
runInFrame
(
test
iframe
try
{
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
{
interestGroup
}
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
return
"
exception
unexpectedly
not
thrown
"
;
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
"
Join
interest
group
owned
by
parent
'
s
origin
in
cross
-
origin
iframe
.
"
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
document
.
location
.
origin
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runInFrame
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
Run
auction
in
same
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
)
;
await
runInFrame
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
run
-
ad
-
auction
"
)
;
await
runInFrame
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
permission
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
run
-
ad
-
auction
'
none
'
"
)
;
await
runInFrame
(
test
iframe
try
{
await
runBasicFledgeAuction
(
test_instance
"
{
uuid
}
"
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
throw
"
Attempting
to
run
auction
unexpectedly
did
not
throw
"
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
permission
denied
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
run
-
ad
-
auction
{
OTHER_ORIGIN1
}
)
;
await
runInFrame
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
seller
:
"
{
OTHER_ORIGIN2
}
"
decisionLogicURL
:
createDecisionScriptURL
(
"
{
uuid
}
"
{
origin
:
"
{
OTHER_ORIGIN2
}
"
}
)
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
for
iframe
origin
which
is
different
from
seller
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
'
none
'
;
run
-
ad
-
auction
'
none
'
"
)
;
await
runInFrame
(
test
iframe
await
createAndNavigateFencedFrame
(
test_instance
param
)
;
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Run
auction
main
frame
open
winning
ad
in
cross
-
origin
iframe
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
await
runBasicFledgeAuctionAndNavigate
(
test_instance
"
{
uuid
}
"
)
;
await
waitForObservedRequests
(
"
{
uuid
}
"
[
createBidderReportURL
(
"
{
uuid
}
"
)
createSellerReportURL
(
"
{
uuid
}
"
)
]
)
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
nested
fenced
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
let
config
=
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
return
{
result
:
"
success
"
returnValue
:
config
}
;
)
;
assert_true
(
config
!
=
null
"
Value
not
returned
from
auction
in
iframe
"
)
;
assert_true
(
config
instanceof
FencedFrameConfig
Wrong
value
type
returned
from
auction
:
{
config
.
constructor
.
type
}
)
;
await
createAndNavigateFencedFrame
(
test
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
createSellerReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
]
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
a
fenced
frame
child
of
the
main
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
let
config
=
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
return
{
result
:
"
success
"
returnValue
:
config
}
;
)
;
assert_true
(
config
!
=
null
"
Value
not
returned
from
auction
in
iframe
"
)
;
assert_true
(
config
instanceof
FencedFrameConfig
Wrong
value
type
returned
from
auction
:
{
config
.
constructor
.
type
}
)
;
let
iframe2
=
await
createIframe
(
test
OTHER_ORIGIN2
"
join
-
ad
-
interest
-
group
'
none
'
;
run
-
ad
-
auction
'
none
'
"
)
;
await
runInFrame
(
test
iframe2
await
createAndNavigateFencedFrame
(
test_instance
param
)
;
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
createSellerReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
]
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
a
fenced
frame
child
of
another
cross
-
origin
iframe
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
run
-
ad
-
auction
"
)
;
await
runInFrame
(
test
iframe
const
uuid
=
"
{
uuid
}
"
;
const
renderURL
=
createRenderURL
(
uuid
/
*
script
=
*
/
null
/
*
signalsParam
=
*
/
'
hostname
'
)
;
await
joinInterestGroup
(
test_instance
uuid
{
trustedBiddingSignalsKeys
:
[
'
hostname
'
]
trustedBiddingSignalsURL
:
TRUSTED_BIDDING_SIGNALS_URL
ads
:
[
{
renderURL
:
renderURL
}
]
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
\
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
trustedBiddingSignals
.
hostname
!
=
=
'
{
window
.
location
.
hostname
}
'
)
throw
'
Wrong
hostname
:
'
+
trustedBiddingSignals
.
hostname
;
\
}
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test_instance
uuid
{
trustedScoringSignalsURL
:
TRUSTED_SCORING_SIGNALS_URL
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
\
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
trustedScoringSignals
.
renderURL
[
"
\
{
renderURL
}
"
]
!
=
=
'
{
window
.
location
.
hostname
}
'
)
throw
'
Wrong
hostname
:
'
+
trustedScoringSignals
.
renderURL
[
"
\
{
renderURL
}
"
]
;
\
}
)
}
)
;
)
;
}
'
Different
top
-
frame
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderOrigin
=
OTHER_ORIGIN1
;
let
sellerOrigin
=
OTHER_ORIGIN2
;
let
bidderSendReportToURL
=
createBidderReportURL
(
uuid
'
1
'
OTHER_ORIGIN3
)
;
let
sellerSendReportToURL
=
createSellerReportURL
(
uuid
'
2
'
OTHER_ORIGIN4
)
;
let
bidderBeaconURL
=
createBidderBeaconURL
(
uuid
'
3
'
OTHER_ORIGIN5
)
;
let
sellerBeaconURL
=
createSellerBeaconURL
(
uuid
'
4
'
OTHER_ORIGIN6
)
;
let
renderURL
=
createRenderURL
(
uuid
window
.
fence
.
reportEvent
(
{
eventType
:
"
beacon
"
eventData
:
window
.
location
.
href
destination
:
[
"
buyer
"
"
seller
"
]
}
)
null
OTHER_ORIGIN7
)
;
let
iframe
=
await
createIframe
(
test
bidderOrigin
"
join
-
ad
-
interest
-
group
"
)
;
let
interestGroup
=
createInterestGroupForOrigin
(
uuid
bidderOrigin
{
biddingLogicURL
:
createBiddingScriptURL
(
{
origin
:
bidderOrigin
generateBid
:
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
interestGroup
.
owner
!
=
=
"
{
bidderOrigin
}
"
)
throw
"
Wrong
origin
:
"
+
interestGroup
.
owner
;
if
(
!
interestGroup
.
biddingLogicURL
.
startsWith
(
"
{
bidderOrigin
}
"
)
)
throw
"
Wrong
origin
:
"
+
interestGroup
.
biddingLogicURL
;
if
(
interestGroup
.
ads
[
0
]
.
renderUrl
!
=
"
{
renderURL
}
"
)
throw
"
Wrong
renderURL
:
"
+
interestGroup
.
ads
[
0
]
.
renderUrl
;
if
(
browserSignals
.
seller
!
=
=
"
{
sellerOrigin
}
"
)
throw
"
Wrong
origin
:
"
+
browserSignals
.
seller
;
reportWin
:
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
browserSignals
.
seller
!
=
=
"
{
sellerOrigin
}
"
)
throw
"
Wrong
seller
:
"
+
browserSignals
.
seller
;
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
bidderOrigin
}
"
)
throw
"
Wrong
interestGroupOwner
:
"
+
browserSignals
.
interestGroupOwner
;
if
(
browserSignals
.
renderURL
!
=
=
"
{
renderURL
}
"
)
throw
"
Wrong
renderURL
:
"
+
browserSignals
.
renderURL
;
if
(
browserSignals
.
seller
!
=
=
"
{
sellerOrigin
}
"
)
throw
"
Wrong
seller
:
"
+
browserSignals
.
seller
;
sendReportTo
(
"
{
bidderSendReportToURL
}
"
)
;
registerAdBeacon
(
{
beacon
:
"
{
bidderBeaconURL
}
"
}
)
;
}
)
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
{
JSON
.
stringify
(
interestGroup
)
}
)
;
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
seller
:
sellerOrigin
interestGroupBuyers
:
[
bidderOrigin
]
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
origin
:
sellerOrigin
scoreAd
:
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
auctionConfig
.
seller
!
=
=
"
{
sellerOrigin
}
"
)
throw
"
Wrong
seller
:
"
+
auctionConfig
.
seller
;
if
(
auctionConfig
.
interestGroupBuyers
[
0
]
!
=
=
"
{
bidderOrigin
}
"
)
throw
"
Wrong
interestGroupBuyers
:
"
+
auctionConfig
.
interestGroupBuyers
;
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
bidderOrigin
}
"
)
throw
"
Wrong
interestGroupOwner
:
"
+
browserSignals
.
interestGroupOwner
;
if
(
browserSignals
.
renderURL
!
=
=
"
{
renderURL
}
"
)
throw
"
Wrong
renderURL
:
"
+
browserSignals
.
renderURL
;
reportResult
:
if
(
browserSignals
.
topWindowHostname
!
=
=
"
{
document
.
location
.
hostname
}
"
)
throw
"
Wrong
topWindowHostname
:
"
+
browserSignals
.
topWindowHostname
;
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
bidderOrigin
}
"
)
throw
"
Wrong
interestGroupOwner
:
"
+
browserSignals
.
interestGroupOwner
;
if
(
browserSignals
.
renderURL
!
=
=
"
{
renderURL
}
"
)
throw
"
Wrong
renderURL
:
"
+
browserSignals
.
renderURL
;
sendReportTo
(
"
{
sellerSendReportToURL
}
"
)
;
registerAdBeacon
(
{
beacon
:
"
{
sellerBeaconURL
}
"
}
)
;
}
)
}
)
;
await
waitForObservedRequests
(
uuid
[
bidderSendReportToURL
sellerSendReportToURL
{
bidderBeaconURL
}
body
:
{
renderURL
}
{
sellerBeaconURL
}
body
:
{
renderURL
}
]
)
;
}
'
Single
seller
auction
with
as
many
distinct
origins
as
possible
(
except
no
component
ads
)
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
ads
:
[
{
renderURL
:
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
'
renderURL
'
)
}
]
}
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
let
child_window
=
await
createFrame
(
test
document
.
location
.
origin
false
)
;
await
runInFrame
(
test
child_window
await
createAndNavigateFencedFrame
(
test_instance
param
)
;
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
{
biddingLogicURL
:
createBiddingScriptURL
(
{
reportWin
:
"
sendReportTo
(
'
{
createBidderReportURL
(
uuid
"
2
"
)
}
'
)
;
"
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test_instance
"
{
uuid
}
"
)
;
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
"
2
"
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Run
auction
in
main
frame
try
to
open
winning
ad
in
different
same
-
origin
main
frame
.
'
)
;
