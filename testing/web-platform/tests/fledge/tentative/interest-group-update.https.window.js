"
use
strict
"
;
const
makeTestForUpdate
=
(
{
name
interestGroupFieldName
expectedValue
responseOverride
=
expectedValue
interestGroupOverrides
=
{
}
auctionConfigOverrides
=
{
}
}
)
=
>
{
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
extraBiddingLogic
=
;
let
replacePlaceholders
=
(
ads
)
=
>
ads
.
forEach
(
element
=
>
{
element
.
renderURL
=
element
.
renderURL
.
replace
(
UUID
-
PLACEHOLDER
uuid
)
;
}
)
;
if
(
interestGroupFieldName
=
=
=
ads
)
{
if
(
interestGroupFieldName
in
interestGroupOverrides
)
{
replacePlaceholders
(
interestGroupOverrides
[
interestGroupFieldName
]
)
;
}
replacePlaceholders
(
responseOverride
)
;
replacePlaceholders
(
expectedValue
)
;
}
if
(
interestGroupFieldName
=
=
=
ads
|
|
interestGroupFieldName
=
=
=
adComponents
)
{
extraBiddingLogic
=
interestGroup
.
{
interestGroupFieldName
}
.
forEach
(
element
=
>
{
delete
element
.
renderUrl
;
}
)
;
}
let
expectedValueJSON
=
JSON
.
stringify
(
expectedValue
)
;
interestGroupOverrides
.
biddingLogicURL
=
createBiddingScriptURL
(
{
generateBid
:
{
extraBiddingLogic
}
if
(
!
deepEquals
(
interestGroup
.
{
interestGroupFieldName
}
{
expectedValueJSON
}
)
)
{
throw
'
{
interestGroupFieldName
}
is
'
+
JSON
.
stringify
(
interestGroup
.
{
interestGroupFieldName
}
)
+
'
instead
of
'
+
'
{
expectedValueJSON
}
'
;
}
}
)
;
let
responseBody
=
{
}
;
responseBody
[
interestGroupFieldName
]
=
responseOverride
;
let
updateParams
=
{
body
:
JSON
.
stringify
(
responseBody
)
uuid
:
uuid
}
;
interestGroupOverrides
.
updateURL
=
createUpdateURL
(
updateParams
)
;
await
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
;
if
(
interestGroupFieldName
=
=
=
ads
)
{
let
interestGroup
=
createInterestGroupForOrigin
(
uuid
window
.
location
.
origin
interestGroupOverrides
)
;
interestGroup
.
ads
=
responseOverride
;
await
makeInterestGroupKAnonymous
(
interestGroup
)
;
}
let
auctionResult
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
expectNoWinner
(
auctionResult
)
;
while
(
!
auctionResult
)
{
auctionResult
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
}
}
name
)
;
}
;
const
makeTestForNoUpdate
=
(
{
name
interestGroupFieldName
responseOverride
auctionConfigOverrides
=
{
}
failedUpdateGroup
=
{
}
}
)
=
>
{
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
successUpdateGroup
=
{
}
;
let
successUpdateField
=
userBiddingSignals
;
let
successUpdateFieldExpectedValue
=
{
'
test
'
:
20
}
;
const
goodUpdateRenderURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
'
good_update
'
)
;
successUpdateGroup
.
ads
=
[
{
'
renderURL
'
:
goodUpdateRenderURL
}
]
;
successUpdateGroup
.
biddingLogicURL
=
createBiddingScriptURL
(
{
generateBid
:
if
(
deepEquals
(
interestGroup
.
{
successUpdateField
}
{
JSON
.
stringify
(
successUpdateFieldExpectedValue
)
}
)
)
{
throw
'
{
successUpdateField
}
has
updated
and
is
'
+
'
{
JSON
.
stringify
(
successUpdateFieldExpectedValue
)
}
.
'
}
bid
:
5
}
)
;
let
successResponseBody
=
{
}
;
successResponseBody
[
successUpdateField
]
=
successUpdateFieldExpectedValue
;
let
successUpdateParams
=
{
body
:
JSON
.
stringify
(
successResponseBody
)
uuid
:
uuid
}
;
successUpdateGroup
.
updateURL
=
createUpdateURL
(
successUpdateParams
)
;
await
joinInterestGroup
(
test
uuid
successUpdateGroup
)
;
const
badUpdateRenderURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
track_get
bad_update
)
;
failedUpdateGroup
.
name
=
failedUpdateGroup
.
name
?
failedUpdateGroup
.
name
:
IG
name
failedUpdateGroup
.
ads
=
[
{
'
renderURL
'
:
badUpdateRenderURL
}
]
;
failedUpdateGroup
.
biddingLogicURL
=
createBiddingScriptURL
(
{
generateBid
:
if
(
!
deepEquals
(
interestGroup
.
{
interestGroupFieldName
}
{
JSON
.
stringify
(
responseOverride
)
}
)
)
{
throw
'
{
interestGroupFieldName
}
is
as
expected
:
'
+
JSON
.
stringify
(
interestGroup
.
{
interestGroupFieldName
}
)
;
}
bid
:
1000
}
)
;
let
failedResponseBody
=
{
}
;
failedResponseBody
[
interestGroupFieldName
]
=
responseOverride
;
let
failedUpdateParams
=
{
body
:
JSON
.
stringify
(
failedResponseBody
)
uuid
:
uuid
}
;
failedUpdateGroup
.
updateURL
=
createUpdateURL
(
failedUpdateParams
)
;
await
joinInterestGroup
(
test
uuid
failedUpdateGroup
)
;
let
auctionResult
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
auctionConfigOverrides
)
;
while
(
auctionResult
)
{
createAndNavigateFencedFrame
(
test
auctionResult
)
;
await
waitForObservedRequests
(
uuid
[
goodUpdateRenderURL
createSellerReportURL
(
uuid
)
]
)
;
await
fetch
(
createCleanupURL
(
uuid
)
)
;
auctionResult
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
}
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
auctionConfigOverrides
)
;
}
name
)
;
}
;
const
createTempRenderURL
=
(
signalsParams
=
null
)
=
>
{
return
createRenderURL
(
UUID
-
PLACEHOLDER
null
signalsParams
null
)
;
}
;
makeTestForUpdate
(
{
name
:
'
userBiddingSignals
update
overwrites
everything
in
the
field
.
'
interestGroupFieldName
:
'
userBiddingSignals
'
expectedValue
:
{
'
test
'
:
20
}
interestGroupOverrides
:
{
userBiddingSignals
:
{
'
test
'
:
10
'
extra_value
'
:
true
}
}
}
)
;
makeTestForUpdate
(
{
name
:
'
userBiddingSignals
updated
multi
-
type
'
interestGroupFieldName
:
'
userBiddingSignals
'
expectedValue
:
{
'
test
'
:
20
5
:
[
1
[
false
false
true
]
3
'
Hello
'
]
}
interestGroupOverrides
:
{
userBiddingSignals
:
{
'
test
'
:
10
}
}
}
)
;
makeTestForUpdate
(
{
name
:
'
userBiddingSignals
updated
to
non
object
'
interestGroupFieldName
:
'
userBiddingSignals
'
expectedValue
:
5
interestGroupOverrides
:
{
userBiddingSignals
:
{
'
test
'
:
10
}
}
}
)
;
makeTestForUpdate
(
{
name
:
'
userBiddingSignals
updated
to
null
'
interestGroupFieldName
:
'
userBiddingSignals
'
expectedValue
:
null
interestGroupOverrides
:
{
userBiddingSignals
:
{
'
test
'
:
10
}
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsKeys
updated
correctly
'
interestGroupFieldName
:
'
trustedBiddingSignalsKeys
'
expectedValue
:
[
'
new_key
'
'
old_key
'
]
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
old_key
'
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsKeys
updated
to
empty
array
.
'
interestGroupFieldName
:
'
trustedBiddingSignalsKeys
'
expectedValue
:
[
]
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
old_key
'
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsSlotSizeMode
updated
to
slot
-
size
'
interestGroupFieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
expectedValue
:
'
slot
-
size
'
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
key
'
]
trustedBiddingSignalsSlotSizeMode
:
'
none
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsSlotSizeMode
updated
to
all
-
slots
-
requested
-
sizes
'
interestGroupFieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
expectedValue
:
'
all
-
slots
-
requested
-
sizes
'
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
key
'
]
trustedBiddingSignalsSlotSizeMode
:
'
slot
-
size
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsSlotSizeMode
updated
to
none
'
interestGroupFieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
expectedValue
:
'
none
'
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
key
'
]
trustedBiddingSignalsSlotSizeMode
:
'
slot
-
size
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
trustedBiddingSignalsSlotSizeMode
updated
to
unknown
defaults
to
none
'
interestGroupFieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
expectedValue
:
'
none
'
responseOverride
:
'
unknown
-
type
'
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
'
key
'
]
trustedBiddingSignalsSlotSizeMode
:
'
slot
-
size
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
ads
updated
from
2
ads
to
1
.
'
interestGroupFieldName
:
'
ads
'
expectedValue
:
[
{
renderURL
:
createTempRenderURL
(
'
new_url1
'
)
metadata
:
'
test1
-
new
'
}
]
interestGroupOverrides
:
{
ads
:
[
{
renderURL
:
createTempRenderURL
(
)
}
{
renderURL
:
createTempRenderURL
(
)
}
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
ads
updated
from
1
ad
to
2
.
'
interestGroupFieldName
:
'
ads
'
expectedValue
:
[
{
renderURL
:
createTempRenderURL
(
'
new_url1
'
)
metadata
:
'
test1
-
new
'
}
{
renderURL
:
createTempRenderURL
(
'
new_url2
'
)
metadata
:
'
test2
-
new
'
}
]
interestGroupOverrides
:
{
ads
:
[
{
renderURL
:
createTempRenderURL
(
)
}
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
adComponents
updated
from
1
adComponent
to
2
.
'
interestGroupFieldName
:
'
adComponents
'
expectedValue
:
[
{
renderURL
:
createTempRenderURL
(
'
new_url1
'
)
metadata
:
'
test1
-
new
'
}
{
renderURL
:
createTempRenderURL
(
'
new_url2
'
)
metadata
:
'
test2
'
}
]
interestGroupOverrides
:
{
adComponents
:
[
{
renderURL
:
createTempRenderURL
(
)
metadata
:
'
test1
'
}
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
adComponents
updated
from
2
adComponents
to
1
.
'
interestGroupFieldName
:
'
adComponents
'
expectedValue
:
[
{
renderURL
:
createTempRenderURL
(
'
new_url1
'
)
metadata
:
'
test1
-
new
'
}
]
interestGroupOverrides
:
{
adComponents
:
[
{
renderURL
:
createTempRenderURL
(
)
}
{
renderURL
:
createTempRenderURL
(
)
}
]
}
}
)
;
makeTestForUpdate
(
{
name
:
'
executionMode
updated
to
frozen
context
'
interestGroupFieldName
:
'
executionMode
'
expectedValue
:
'
frozen
-
context
'
interestGroupOverrides
:
{
executionMode
:
'
compatibility
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
executionMode
updated
to
compatibility
'
interestGroupFieldName
:
'
executionMode
'
expectedValue
:
'
compatibility
'
interestGroupOverrides
:
{
executionMode
:
'
frozen
-
context
'
}
}
)
;
makeTestForUpdate
(
{
name
:
'
executionMode
updated
to
group
by
origin
'
interestGroupFieldName
:
'
executionMode
'
expectedValue
:
'
group
-
by
-
origin
'
interestGroupOverrides
:
{
executionMode
:
'
compatibility
'
}
}
)
;
makeTestForNoUpdate
(
{
name
:
'
executionMode
updated
with
invalid
input
'
interestGroupFieldName
:
'
executionMode
'
responseOverride
:
'
unknown
-
type
'
}
)
;
makeTestForNoUpdate
(
{
name
:
'
owner
cannot
be
updated
.
'
interestGroupFieldName
:
'
owner
'
responseOverride
:
OTHER_ORIGIN1
auctionConfigOverrides
:
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
window
.
location
.
origin
]
}
}
)
;
makeTestForNoUpdate
(
{
name
:
'
name
cannot
be
updated
.
'
interestGroupFieldName
:
'
name
'
responseOverride
:
'
new_name
'
failedUpdateGroup
:
{
name
:
'
name2
'
}
}
)
;
makeTestForNoUpdate
(
{
name
:
'
executionMode
not
updated
when
unknown
type
.
'
interestGroupFieldName
:
'
executionMode
'
responseOverride
:
'
unknown
-
type
'
failedUpdateGroup
:
{
executionMode
:
'
compatibility
'
}
}
)
;
makeTestForNoUpdate
(
{
name
:
'
trustedBiddingSignalsKeys
not
updated
when
bad
value
.
'
interestGroupFieldName
:
'
trustedBiddingSignalsKeys
'
responseOverride
:
5
failedUpdateGroup
:
{
trustedBiddingSignalsKeys
:
[
'
key
'
]
}
}
)
;
