"
use
strict
;
"
const
makeTest
=
(
{
name
fieldName
fieldValue
interestGroupOverrides
=
{
}
}
)
=
>
{
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
if
(
!
(
fieldName
in
interestGroupOverrides
)
&
&
fieldValue
!
=
=
undefined
)
interestGroupOverrides
[
fieldName
]
=
fieldValue
;
let
comparison
=
deepEquals
(
interestGroup
[
"
{
fieldName
}
"
]
{
JSON
.
stringify
(
fieldValue
)
}
)
;
if
(
fieldValue
=
=
=
undefined
)
comparison
=
!
(
"
{
fieldName
}
"
in
interestGroup
)
;
let
origin
=
location
.
origin
;
if
(
interestGroupOverrides
.
owner
)
origin
=
new
URL
(
interestGroupOverrides
.
owner
)
.
origin
;
interestGroupOverrides
.
biddingLogicURL
=
createBiddingScriptURL
(
{
origin
:
origin
generateBid
:
if
(
!
{
comparison
}
)
throw
"
Unexpected
value
:
"
+
JSON
.
stringify
(
interestGroup
[
"
{
fieldName
}
"
]
)
;
}
)
;
if
(
origin
!
=
=
location
.
origin
)
{
await
joinCrossOriginInterestGroup
(
test
uuid
origin
interestGroupOverrides
)
;
}
else
{
await
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
;
}
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
origin
]
}
)
;
}
name
)
;
}
;
makeTest
(
{
name
:
'
InterestGroup
.
owner
.
'
fieldName
:
'
owner
'
fieldValue
:
OTHER_ORIGIN1
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
owner
with
non
-
normalized
origin
.
'
fieldName
:
'
owner
'
fieldValue
:
OTHER_ORIGIN1
interestGroupOverrides
:
{
seller
:
{
OTHER_ORIGIN1
.
toUpperCase
(
)
}
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
owner
is
URL
.
'
fieldName
:
'
owner
'
fieldValue
:
OTHER_ORIGIN1
interestGroupOverrides
:
{
seller
:
OTHER_ORIGIN1
+
"
/
Foopy
"
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsURL
not
set
.
'
fieldName
:
'
trustedBiddingSignalsURL
'
fieldValue
:
undefined
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsURL
.
'
fieldName
:
'
trustedBiddingSignalsURL
'
fieldValue
:
{
OTHER_ORIGIN1
}
{
BASE_PATH
}
this
-
file
-
does
-
not
-
exist
.
json
interestGroupOverrides
:
{
owner
:
OTHER_ORIGIN1
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsURL
with
non
-
normalized
value
.
'
fieldName
:
'
trustedBiddingSignalsURL
'
fieldValue
:
{
OTHER_ORIGIN1
}
{
BASE_PATH
}
this
-
file
-
does
-
not
-
exist
.
json
interestGroupOverrides
:
{
owner
:
OTHER_ORIGIN1
trustedScoringSignalsURL
:
{
OTHER_ORIGIN1
.
toUpperCase
(
)
}
{
BASE_PATH
}
this
-
file
-
does
-
not
-
exist
.
json
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsKeys
not
set
.
'
fieldName
:
'
trustedBiddingSignalsKeys
'
fieldValue
:
undefined
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
name
.
'
fieldName
:
'
name
'
fieldValue
:
'
Jim
'
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
name
with
unicode
characters
.
'
fieldName
:
'
name
'
fieldValue
:
'
\
u2665
'
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsKeys
.
'
fieldName
:
'
trustedBiddingSignalsKeys
'
fieldValue
:
[
'
a
'
'
b
'
'
c
'
'
1
'
'
%
20
'
'
3
'
'
\
u2665
'
]
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsKeys
with
non
-
normalized
values
.
'
fieldName
:
'
trustedBiddingSignalsKeys
'
fieldValue
:
[
'
1
'
'
2
'
'
3
'
]
interestGroupOverrides
:
{
trustedBiddingSignalsKeys
:
[
1
0x2
'
3
'
]
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsSlotSizeMode
empty
.
'
fieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
fieldValue
:
'
none
'
interestGroupOverrides
:
{
trustedBiddingSignalsSlotSizeMode
:
undefined
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsSlotSizeMode
none
.
'
fieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
fieldValue
:
'
none
'
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsSlotSizeMode
slot
-
size
.
'
fieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
fieldValue
:
'
slot
-
size
'
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsSlotSizeMode
all
-
slots
-
requested
-
sizes
.
'
fieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
fieldValue
:
'
all
-
slots
-
requested
-
sizes
'
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
trustedBiddingSignalsSlotSizeMode
unrecognized
value
.
'
fieldName
:
'
trustedBiddingSignalsSlotSizeMode
'
fieldValue
:
'
none
'
interestGroupOverrides
:
{
trustedBiddingSignalsSlotSizeMode
:
'
unrecognized
value
'
}
}
)
;
makeTest
(
{
name
:
'
InterestGroup
.
nonStandardField
.
'
fieldName
:
'
nonStandardField
'
fieldValue
:
undefined
interestGroupOverrides
:
{
nonStandardField
:
'
This
value
should
not
be
passed
to
worklets
'
}
}
)
;
