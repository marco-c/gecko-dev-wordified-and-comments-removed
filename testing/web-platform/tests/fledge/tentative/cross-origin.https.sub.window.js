"
use
strict
;
"
const
OTHER_ORIGIN1
=
'
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
'
;
const
OTHER_ORIGIN2
=
'
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
1
]
}
}
'
;
async
function
runInIframe
(
test
iframe
script
param
)
{
const
messageUuid
=
generateUuid
(
test
)
;
let
receivedResponse
=
{
}
;
let
promise
=
new
Promise
(
function
(
resolve
reject
)
{
function
WaitForMessage
(
event
)
{
if
(
event
.
data
.
messageUuid
!
=
messageUuid
)
return
;
receivedResponse
=
event
.
data
;
if
(
event
.
data
.
result
=
=
=
'
success
'
)
{
resolve
(
)
;
}
else
{
reject
(
event
.
data
.
result
)
;
}
}
window
.
addEventListener
(
'
message
'
WaitForMessage
)
;
iframe
.
contentWindow
.
postMessage
(
{
messageUuid
:
messageUuid
script
:
script
param
:
param
}
'
*
'
)
;
}
)
;
await
promise
;
return
receivedResponse
.
returnValue
;
}
async
function
createIframe
(
test
origin
permissions
)
{
const
iframeUuid
=
generateUuid
(
test
)
;
const
iframeUrl
=
{
origin
}
{
RESOURCE_PATH
}
iframe
.
sub
.
html
?
uuid
=
{
iframeUuid
}
;
let
iframe
=
document
.
createElement
(
'
iframe
'
)
;
await
new
Promise
(
function
(
resolve
reject
)
{
function
WaitForMessage
(
event
)
{
if
(
event
.
data
.
messageUuid
!
=
iframeUuid
)
return
;
if
(
event
.
data
.
result
=
=
=
'
load
complete
'
)
{
resolve
(
)
;
}
else
{
reject
(
event
.
data
.
result
)
;
}
}
window
.
addEventListener
(
'
message
'
WaitForMessage
)
;
if
(
permissions
)
iframe
.
allow
=
permissions
;
iframe
.
src
=
iframeUrl
;
document
.
body
.
appendChild
(
iframe
)
;
test
.
add_cleanup
(
async
(
)
=
>
{
await
runInIframe
(
test
iframe
"
await
test_instance
.
do_cleanup
(
)
;
"
)
;
document
.
body
.
removeChild
(
iframe
)
;
}
)
;
}
)
;
return
iframe
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
document
.
location
.
origin
)
;
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
Join
interest
group
in
same
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
)
;
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
scoreAd
:
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
OTHER_ORIGIN1
}
"
)
throw
"
Wrong
owner
:
"
+
browserSignals
.
interestGroupOwner
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
scoreAd
:
if
(
browserSignals
.
interestGroupOwner
!
=
=
"
{
OTHER_ORIGIN1
}
"
)
throw
"
Wrong
owner
:
"
+
browserSignals
.
interestGroupOwner
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
with
join
-
ad
-
interest
-
group
permission
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
'
none
'
"
)
;
await
runInIframe
(
test
iframe
try
{
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
return
"
exception
unexpectedly
not
thrown
"
;
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
}
)
;
}
'
Join
interest
group
in
cross
-
origin
iframe
with
join
-
ad
-
interest
-
group
permission
denied
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
let
interestGroup
=
JSON
.
stringify
(
createInterestGroupForOrigin
(
uuid
window
.
location
.
origin
)
)
;
await
runInIframe
(
test
iframe
joinInterestGroup
(
test_instance
"
{
uuid
}
"
{
interestGroup
}
)
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
"
Join
interest
group
owned
by
parent
'
s
origin
in
cross
-
origin
iframe
.
"
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
document
.
location
.
origin
)
;
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
runInIframe
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
Run
auction
in
same
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
)
;
await
runInIframe
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
default
permissions
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
run
-
ad
-
auction
"
)
;
await
runInIframe
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
permission
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
run
-
ad
-
auction
'
none
'
"
)
;
await
runInIframe
(
test
iframe
try
{
await
runBasicFledgeAuction
(
test_instance
"
{
uuid
}
"
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
throw
"
Attempting
to
run
auction
unexpectedly
did
not
throw
"
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
permission
denied
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
run
-
ad
-
auction
{
OTHER_ORIGIN1
}
)
;
await
runInIframe
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
{
interestGroupBuyers
:
[
"
{
window
.
location
.
origin
}
"
]
seller
:
"
{
OTHER_ORIGIN2
}
"
decisionLogicURL
:
createDecisionScriptURL
(
"
{
uuid
}
"
{
origin
:
"
{
OTHER_ORIGIN2
}
"
}
)
}
)
;
)
;
}
'
Run
auction
in
cross
-
origin
iframe
with
run
-
ad
-
auction
for
iframe
origin
which
is
different
from
seller
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
'
none
'
;
run
-
ad
-
auction
'
none
'
"
)
;
await
runInIframe
(
test
iframe
await
createAndNavigateFencedFrame
(
test_instance
param
)
;
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Run
auction
main
frame
open
winning
ad
in
cross
-
origin
iframe
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
await
runBasicFledgeAuctionAndNavigate
(
test_instance
"
{
uuid
}
"
)
;
await
waitForObservedRequests
(
"
{
uuid
}
"
[
createBidderReportURL
(
"
{
uuid
}
"
)
createSellerReportURL
(
"
{
uuid
}
"
)
]
)
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
nested
fenced
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
let
config
=
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
return
{
result
:
"
success
"
returnValue
:
config
}
;
)
;
assert_true
(
config
!
=
null
"
Value
not
returned
from
auction
in
iframe
"
)
;
assert_true
(
config
instanceof
FencedFrameConfig
Wrong
value
type
returned
from
auction
:
{
config
.
constructor
.
type
}
)
;
await
createAndNavigateFencedFrame
(
test
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
createSellerReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
]
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
a
fenced
frame
child
of
the
main
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
"
join
-
ad
-
interest
-
group
;
run
-
ad
-
auction
"
)
;
let
config
=
await
runInIframe
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
let
config
=
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
return
{
result
:
"
success
"
returnValue
:
config
}
;
)
;
assert_true
(
config
!
=
null
"
Value
not
returned
from
auction
in
iframe
"
)
;
assert_true
(
config
instanceof
FencedFrameConfig
Wrong
value
type
returned
from
auction
:
{
config
.
constructor
.
type
}
)
;
let
iframe2
=
await
createIframe
(
test
OTHER_ORIGIN2
"
join
-
ad
-
interest
-
group
'
none
'
;
run
-
ad
-
auction
'
none
'
"
)
;
await
runInIframe
(
test
iframe2
await
createAndNavigateFencedFrame
(
test_instance
param
)
;
config
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
createSellerReportURL
(
uuid
'
1
'
OTHER_ORIGIN1
)
]
)
;
}
'
Run
auction
in
cross
-
origin
iframe
and
open
winning
ad
in
a
fenced
frame
child
of
another
cross
-
origin
iframe
.
'
)
;
