"
use
strict
;
"
const
SERVICE_WORKER_SCRIPT
=
"
service
-
worker
-
helper
.
js
"
;
async
function
setUpServiceWorkerAndGetBroadcastChannel
(
broadcastChannelName
)
{
await
registerServiceWorker
(
)
;
await
checkServiceWorkersAndReload
(
)
;
return
new
BroadcastChannel
(
broadcastChannelName
)
;
}
function
validateServiceWorker
(
)
{
if
(
navigator
.
serviceWorker
.
controller
)
{
return
navigator
.
serviceWorker
.
controller
.
scriptURL
.
includes
(
SERVICE_WORKER_SCRIPT
)
;
}
return
false
;
}
async
function
checkServiceWorkersAndReload
(
)
{
let
count
=
(
await
navigator
.
serviceWorker
.
getRegistrations
(
)
)
.
length
;
if
(
count
=
=
=
0
|
|
!
validateServiceWorker
(
)
)
{
window
.
location
.
reload
(
)
;
}
}
async
function
registerServiceWorker
(
)
{
try
{
await
navigator
.
serviceWorker
.
register
(
.
/
{
SERVICE_WORKER_SCRIPT
}
)
;
await
navigator
.
serviceWorker
.
ready
;
}
catch
(
error
)
{
throw
(
Error
"
Error
while
registering
service
worker
:
"
+
error
)
;
}
}
subsetTest
(
promise_test
async
test
=
>
{
const
broadcastChannel
=
await
setUpServiceWorkerAndGetBroadcastChannel
(
'
public
-
requests
-
test
'
)
;
let
finishTest
=
new
Promise
(
(
resolve
reject
)
=
>
{
broadcastChannel
.
addEventListener
(
'
message
'
(
event
)
=
>
{
if
(
event
.
data
.
result
=
=
=
'
passed
'
)
{
resolve
(
)
;
}
else
{
reject
(
unexpected
result
:
{
event
.
data
.
message
}
)
;
}
}
)
;
}
)
;
await
fetchDirectFromSellerSignals
(
{
'
Buyer
-
Origin
'
:
window
.
location
.
origin
}
)
;
await
finishTest
;
}
"
Make
sure
service
workers
do
see
public
requests
.
"
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
broadcastChannel
=
await
setUpServiceWorkerAndGetBroadcastChannel
(
'
private
-
requests
-
test
'
)
;
let
finishTest
=
new
Promise
(
(
resolve
reject
)
=
>
{
broadcastChannel
.
addEventListener
(
'
message
'
(
event
)
=
>
{
if
(
event
.
data
.
result
=
=
=
'
completed
'
)
{
resolve
(
)
;
}
else
{
reject
(
unexpected
result
:
{
event
.
data
.
message
}
)
;
}
}
)
;
}
)
;
broadcastChannel
.
addEventListener
(
'
message
'
(
event
)
=
>
{
assert_false
(
event
.
data
.
result
=
=
=
'
failed
'
event
.
data
.
message
)
;
}
)
;
let
interestGroupOverrides
=
{
biddingWasmHelperURL
:
{
RESOURCE_PATH
}
wasm
-
helper
.
py
trustedBiddingSignalsURL
:
TRUSTED_BIDDING_SIGNALS_URL
trustedScoringSignalsURL
:
TRUSTED_SCORING_SIGNALS_URL
}
;
await
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
await
fetch
(
'
COMPLETE
-
TEST
'
)
;
await
finishTest
;
}
"
Make
sure
service
workers
do
not
see
private
requests
"
)
;
