'
use
strict
'
;
const
MAIN_PATH
=
'
/
.
well
-
known
/
interest
-
group
/
real
-
time
-
report
'
function
createMultiSellerAuctionConfig
(
uuid
seller
decisionLogicURL
componentAuctions
auctionConfigOverrides
=
{
}
)
{
return
{
seller
:
seller
decisionLogicURL
:
decisionLogicURL
interestGroupBuyers
:
[
]
componentAuctions
:
componentAuctions
.
.
.
auctionConfigOverrides
}
;
}
function
createBiddingScriptURLForRealTimeReporting
(
origin
=
null
bid
=
1
)
{
return
createBiddingScriptURL
(
{
origin
:
origin
?
origin
:
new
URL
(
BASE_URL
)
.
origin
bid
:
bid
allowComponentAuction
:
true
generateBid
:
realTimeReporting
.
contributeToHistogram
(
{
bucket
:
20
priorityWeight
:
1
}
)
;
}
)
;
}
function
createDecisionScriptURLForRealTimeReporting
(
uuid
origin
=
null
)
{
return
createDecisionScriptURL
(
uuid
{
origin
:
origin
=
=
=
null
?
new
URL
(
BASE_URL
)
.
origin
:
origin
scoreAd
:
realTimeReporting
.
contributeToHistogram
(
{
bucket
:
200
priorityWeight
:
1
}
)
;
}
)
;
}
const
delay
=
ms
=
>
new
Promise
(
resolve
=
>
step_timeout
(
resolve
ms
)
)
;
const
pollReports
=
async
(
origin
wait_for
=
1
timeout
=
5000
)
=
>
{
let
startTime
=
performance
.
now
(
)
;
let
payloads
=
[
]
;
while
(
performance
.
now
(
)
-
startTime
<
timeout
)
{
const
resp
=
await
fetch
(
new
URL
(
MAIN_PATH
origin
)
)
;
const
payload
=
await
resp
.
arrayBuffer
(
)
;
if
(
payload
.
byteLength
>
0
)
{
payloads
=
payloads
.
concat
(
payload
)
;
}
if
(
payloads
.
length
>
=
wait_for
)
{
return
payloads
;
}
await
delay
(
100
)
;
}
if
(
payloads
.
length
>
0
)
{
return
payloads
;
}
return
null
;
}
;
const
verifyReports
=
(
reports
)
=
>
{
assert_equals
(
reports
.
length
1
)
;
const
report
=
CBOR
.
decode
(
reports
[
0
]
)
;
assert_own_property
(
report
'
version
'
)
;
assert_equals
(
report
.
version
1
)
;
assert_own_property
(
report
'
histogram
'
)
;
verifyHistogram
(
report
.
histogram
128
1024
)
;
assert_own_property
(
report
'
platformHistogram
'
)
;
verifyHistogram
(
report
.
platformHistogram
1
4
)
;
assert_equals
(
Object
.
keys
(
report
)
.
length
3
)
;
}
;
const
verifyHistogram
=
(
histogram
bucketSize
length
)
=
>
{
assert_own_property
(
histogram
'
buckets
'
)
;
assert_own_property
(
histogram
'
length
'
)
;
assert_equals
(
Object
.
keys
(
histogram
)
.
length
2
)
;
assert_true
(
histogram
.
buckets
instanceof
Uint8Array
)
;
assert_equals
(
histogram
.
buckets
.
length
bucketSize
)
;
assert_equals
(
histogram
.
length
length
)
;
}
;
const
resetReports
=
url
=
>
{
url
=
{
url
}
?
clear_stash
=
true
;
const
options
=
{
method
:
'
POST
'
}
;
return
fetch
(
url
options
)
;
}
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
)
;
verifyReports
(
sellerReports
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
buyerReports
)
;
}
'
Real
time
reporting
different
buyer
and
seller
both
opted
-
in
and
called
api
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
buyerReports
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
1
1000
)
;
assert_equals
(
sellerReports
null
)
;
}
'
Real
time
reporting
buyer
opted
-
in
but
not
seller
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
}
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
)
;
verifyReports
(
sellerReports
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
1
1000
)
;
assert_equals
(
buyerReports
null
)
;
}
'
Real
time
reporting
seller
opted
-
in
but
not
buyer
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURL
(
{
origin
:
OTHER_ORIGIN1
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
)
;
verifyReports
(
sellerReports
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
buyerReports
)
;
}
'
Real
time
reporting
different
buyer
and
seller
both
opted
-
in
but
did
not
call
api
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
}
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
)
;
assert_equals
(
sellerReports
null
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
1
1000
)
;
assert_equals
(
buyerReports
null
)
;
}
'
Real
time
reporting
both
called
api
but
did
not
opt
-
in
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
)
}
)
;
const
origin
=
location
.
origin
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
perBuyerRealTimeReportingConfig
:
{
[
origin
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
reports
=
await
pollReports
(
origin
)
;
verifyReports
(
reports
)
;
}
'
Real
time
reporting
buyer
and
seller
same
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN2
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN2
100
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
OTHER_ORIGIN2
]
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
[
OTHER_ORIGIN2
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
reports1
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
reports1
)
;
const
reports2
=
await
pollReports
(
OTHER_ORIGIN2
)
;
verifyReports
(
reports2
)
;
}
'
Real
time
reporting
both
winning
and
losing
buyers
opted
-
in
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN2
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN2
100
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
OTHER_ORIGIN2
]
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
reports1
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
reports1
)
;
const
reports2
=
await
pollReports
(
OTHER_ORIGIN2
1
1000
)
;
assert_equals
(
reports2
null
)
;
}
'
Real
time
reporting
one
buyer
opted
-
in
but
not
the
other
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
OTHER_ORIGIN1
)
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
realTimeReporting
.
contributeToHistogram
(
{
bucket
:
200
priorityWeight
:
1
}
)
;
return
-
1
;
}
)
interestGroupBuyers
:
[
OTHER_ORIGIN1
]
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
perBuyerRealTimeReportingConfig
:
{
[
OTHER_ORIGIN1
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
)
;
const
sellerReports
=
await
pollReports
(
location
.
origin
)
;
verifyReports
(
sellerReports
)
;
const
buyerReports
=
await
pollReports
(
OTHER_ORIGIN1
)
;
verifyReports
(
buyerReports
)
;
}
'
Real
time
reports
are
sent
when
all
bids
are
rejected
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
buyer
=
window
.
location
.
origin
;
let
componentSellerOptIn
=
OTHER_ORIGIN1
;
let
componentSellerNotOptIn
=
OTHER_ORIGIN2
;
let
topLevelSeller
=
OTHER_ORIGIN3
;
await
resetReports
(
MAIN_PATH
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
buyer
{
biddingLogicURL
:
createBiddingScriptURLForRealTimeReporting
(
buyer
)
}
)
;
const
componentAuctions
=
[
{
seller
:
componentSellerOptIn
interestGroupBuyers
:
[
buyer
]
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
componentSellerOptIn
)
sellerRealTimeReportingConfig
:
{
type
:
'
default
-
local
-
reporting
'
}
perBuyerRealTimeReportingConfig
:
{
[
buyer
]
:
{
type
:
'
default
-
local
-
reporting
'
}
}
}
{
seller
:
componentSellerNotOptIn
interestGroupBuyers
:
[
buyer
]
decisionLogicURL
:
createDecisionScriptURLForRealTimeReporting
(
uuid
componentSellerNotOptIn
)
}
]
;
let
auctionConfig
=
createMultiSellerAuctionConfig
(
uuid
topLevelSeller
createDecisionScriptURLForRealTimeReporting
(
uuid
topLevelSeller
)
componentAuctions
{
}
)
;
auctionConfig
.
sellerRealTimeReportingConfig
=
{
type
:
'
default
-
local
-
reporting
'
}
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfig
)
;
const
reportsBuyer
=
await
pollReports
(
buyer
)
;
verifyReports
(
reportsBuyer
)
;
const
reportsComponentSellerOptIn
=
await
pollReports
(
componentSellerOptIn
)
;
verifyReports
(
reportsComponentSellerOptIn
)
;
const
reportsTopLevelSeller
=
await
pollReports
(
topLevelSeller
)
;
verifyReports
(
reportsTopLevelSeller
)
;
const
reportsComponentSellerNotOptIn
=
await
pollReports
(
componentSellerOptIn
1
1000
)
;
assert_equals
(
reportsComponentSellerNotOptIn
null
)
;
}
'
Real
time
reporting
in
a
multi
seller
auction
.
'
)
;
