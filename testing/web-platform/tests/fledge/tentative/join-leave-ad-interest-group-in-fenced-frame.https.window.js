"
use
strict
;
"
function
createSuccessURL
(
uuid
origin
=
document
.
location
.
origin
)
{
return
createTrackerURL
(
origin
uuid
"
track_get
"
"
success
"
)
;
}
function
createExceptionURL
(
uuid
origin
=
document
.
location
.
origin
)
{
return
createTrackerURL
(
origin
uuid
"
track_get
"
"
exception
"
)
;
}
function
createBadExceptionURL
(
uuid
origin
=
document
.
location
.
origin
)
{
return
createTrackerURL
(
origin
uuid
"
track_get
"
"
bad_exception
"
)
;
}
function
createNoArgsTryLeaveRenderURL
(
uuid
origin
=
document
.
location
.
origin
)
{
return
createRenderURL
(
uuid
async
function
TryLeave
(
)
{
try
{
await
navigator
.
leaveAdInterestGroup
(
)
;
await
fetch
(
"
{
createSuccessURL
(
uuid
origin
)
}
"
)
;
}
catch
(
e
)
{
await
fetch
(
"
{
createBadExceptionURL
(
uuid
origin
)
}
"
)
;
}
}
TryLeave
(
)
;
null
origin
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
interestGroupJoinedInFrame
=
createInterestGroupForOrigin
(
uuid
document
.
location
.
origin
{
name
:
'
group2
'
}
)
;
const
renderURL
=
createRenderURL
(
uuid
async
function
TryJoin
(
)
{
try
{
await
navigator
.
joinAdInterestGroup
(
{
JSON
.
stringify
(
interestGroupJoinedInFrame
)
}
)
;
await
fetch
(
"
{
createSuccessURL
(
uuid
)
}
"
)
;
}
catch
(
e
)
{
if
(
e
instanceof
DOMException
&
&
e
.
name
=
=
=
"
NotAllowedError
"
)
{
await
fetch
(
"
{
createExceptionURL
(
uuid
)
}
"
)
;
}
else
{
await
fetch
(
"
{
createBadExceptionURL
(
uuid
)
}
"
)
;
}
}
}
TryJoin
(
)
;
)
;
await
joinInterestGroup
(
test
uuid
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createExceptionURL
(
uuid
)
]
)
;
await
leaveInterestGroup
(
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
'
joinAdInterestGroup
(
)
in
ad
fenced
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
renderURL
=
createRenderURL
(
uuid
async
function
TryLeave
(
)
{
try
{
await
navigator
.
leaveAdInterestGroup
(
{
owner
:
"
{
window
.
location
.
origin
}
"
name
:
"
{
DEFAULT_INTEREST_GROUP_NAME
}
"
}
)
;
await
fetch
(
"
{
createSuccessURL
(
uuid
)
}
"
)
;
}
catch
(
e
)
{
if
(
e
instanceof
DOMException
&
&
e
.
name
=
=
=
"
NotAllowedError
"
)
{
await
fetch
(
"
{
createExceptionURL
(
uuid
)
}
"
)
;
}
else
{
await
fetch
(
"
{
createBadExceptionURL
(
uuid
)
}
"
)
;
}
}
}
TryLeave
(
)
;
)
;
await
joinInterestGroup
(
test
uuid
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createExceptionURL
(
uuid
)
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
leaveAdInterestGroup
(
)
in
ad
fenced
frame
specify
an
interest
group
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
window
.
location
.
origin
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
createNoArgsTryLeaveRenderURL
(
uuid
render_url_origin
)
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
render_url_origin
)
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
non
-
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
OTHER_ORIGIN1
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
createNoArgsTryLeaveRenderURL
(
uuid
render_url_origin
)
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
render_url_origin
)
]
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
OTHER_ORIGIN1
;
const
iframe_origin
=
OTHER_ORIGIN1
;
const
renderURL
=
createRenderURL
(
uuid
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
permissions
=
"
join
-
ad
-
interest
-
group
"
;
iframe
.
src
=
"
{
createNoArgsTryLeaveRenderURL
(
uuid
iframe_origin
)
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
null
render_url_origin
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
iframe_origin
)
]
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
same
-
origin
iframe
inside
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
OTHER_ORIGIN1
;
const
iframe_origin
=
document
.
location
.
origin
;
const
renderURL
=
createRenderURL
(
uuid
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
permissions
=
"
join
-
ad
-
interest
-
group
"
;
iframe
.
src
=
"
{
createNoArgsTryLeaveRenderURL
(
uuid
iframe_origin
)
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
null
render_url_origin
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
iframe_origin
)
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
cross
-
origin
iframe
inside
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
document
.
location
.
origin
;
const
iframe_origin
=
document
.
location
.
origin
;
const
renderURL
=
createRenderURL
(
uuid
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
permissions
=
"
join
-
ad
-
interest
-
group
"
;
iframe
.
src
=
"
{
createNoArgsTryLeaveRenderURL
(
uuid
iframe_origin
)
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
null
render_url_origin
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
iframe_origin
)
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
same
-
origin
iframe
inside
non
-
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
bidder_origin
=
OTHER_ORIGIN1
;
const
render_url_origin
=
document
.
location
.
origin
;
const
iframe_origin
=
OTHER_ORIGIN1
;
const
renderURL
=
createRenderURL
(
uuid
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
permissions
=
"
join
-
ad
-
interest
-
group
"
;
iframe
.
src
=
"
{
createNoArgsTryLeaveRenderURL
(
uuid
iframe_origin
)
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
null
render_url_origin
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
bidder_origin
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
iframe_origin
)
]
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
interestGroupBuyers
:
[
bidder_origin
]
}
)
;
}
'
leaveAdInterestGroup
(
)
in
cross
-
origin
buyer
iframe
inside
non
-
buyer
origin
ad
fenced
frame
no
parameters
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
loadFirstComponentAdURL
=
createRenderURL
(
uuid
let
fencedFrame
=
document
.
createElement
(
"
fencedframe
"
)
;
fencedFrame
.
mode
=
"
opaque
-
ads
"
;
fencedFrame
.
config
=
window
.
fence
.
getNestedConfigs
(
)
[
0
]
;
document
.
body
.
appendChild
(
fencedFrame
)
;
null
OTHER_ORIGIN1
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
interestGroup
.
ads
[
0
]
.
renderURL
adComponents
:
[
interestGroup
.
adComponents
[
0
]
.
renderURL
]
}
;
}
)
ads
:
[
{
renderURL
:
loadFirstComponentAdURL
}
]
adComponents
:
[
{
renderURL
:
createNoArgsTryLeaveRenderURL
(
uuid
)
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
createSuccessURL
(
uuid
)
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
leaveAdInterestGroup
(
)
in
component
ad
fenced
frame
no
parameters
.
'
)
;
