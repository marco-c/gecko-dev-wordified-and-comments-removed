"
use
strict
"
;
function
createComponentAdTrackerURL
(
uuid
id
)
{
return
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
component_ad_
{
id
}
)
}
function
createComponentAdRenderURL
(
uuid
id
)
{
return
createRenderURL
(
uuid
fetch
(
"
{
createComponentAdTrackerURL
(
uuid
id
)
}
"
)
;
)
;
}
async
function
runComponentAdLoadingTest
(
test
uuid
numComponentAdsInInterestGroup
componentAdsInBid
componentAdsToLoad
adMetadata
=
false
deprecatedRenderURLReplacements
=
null
)
{
let
interestGroupAdComponents
=
[
]
;
const
renderURLReplacementsStrings
=
createStringBeforeAndAfterReplacements
(
deprecatedRenderURLReplacements
)
;
const
beforeReplacementsString
=
renderURLReplacementsStrings
.
beforeReplacements
;
const
afterReplacementsString
=
renderURLReplacementsStrings
.
afterReplacements
;
for
(
let
i
=
0
;
i
<
numComponentAdsInInterestGroup
;
+
+
i
)
{
let
componentRenderURL
=
createComponentAdRenderURL
(
uuid
i
)
;
if
(
deprecatedRenderURLReplacements
!
=
=
null
)
{
componentRenderURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
beforeReplacementsString
)
;
}
let
adComponent
=
{
renderURL
:
componentRenderURL
}
;
if
(
adMetadata
)
adComponent
.
metadata
=
i
;
interestGroupAdComponents
.
push
(
adComponent
)
;
}
const
renderURL
=
createRenderURL
(
uuid
/
/
"
status
"
is
passed
to
the
beacon
URL
to
be
verified
by
waitForObservedRequests
(
)
.
let
status
=
"
ok
"
;
const
componentAds
=
window
.
fence
.
getNestedConfigs
(
)
if
(
componentAds
.
length
!
=
=
40
)
status
=
"
unexpected
getNestedConfigs
(
)
length
"
;
for
(
let
i
of
{
JSON
.
stringify
(
componentAdsToLoad
)
}
)
{
let
fencedFrame
=
document
.
createElement
(
"
fencedframe
"
)
;
fencedFrame
.
mode
=
"
opaque
-
ads
"
;
fencedFrame
.
config
=
componentAds
[
i
]
;
document
.
body
.
appendChild
(
fencedFrame
)
;
}
window
.
fence
.
reportEvent
(
{
eventType
:
"
beacon
"
eventData
:
status
destination
:
[
"
buyer
"
]
}
)
;
)
;
let
bid
=
{
bid
:
1
render
:
renderURL
}
;
if
(
componentAdsInBid
)
{
bid
.
adComponents
=
[
]
;
for
(
let
index
of
componentAdsInBid
)
{
bid
.
adComponents
.
push
(
interestGroupAdComponents
[
index
]
.
renderURL
)
;
}
}
let
expectedTrackerURLs
=
[
{
createBidderBeaconURL
(
uuid
)
}
body
:
ok
]
;
if
(
componentAdsToLoad
&
&
bid
.
adComponents
)
{
for
(
let
index
of
componentAdsToLoad
)
{
let
expectedURL
=
createComponentAdTrackerURL
(
uuid
componentAdsInBid
[
index
]
)
;
if
(
deprecatedRenderURLReplacements
!
=
null
)
{
expectedURL
=
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_get
'
afterReplacementsString
)
;
}
if
(
index
<
componentAdsInBid
.
length
)
expectedTrackerURLs
.
push
(
expectedURL
)
;
}
}
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
let
expectedAdComponents
=
{
JSON
.
stringify
(
interestGroupAdComponents
)
}
;
let
adComponents
=
interestGroup
.
adComponents
;
if
(
adComponents
.
length
!
=
=
expectedAdComponents
.
length
)
throw
"
Unexpected
adComponents
"
;
for
(
let
i
=
0
;
i
<
adComponents
.
length
;
+
+
i
)
{
if
(
adComponents
[
i
]
.
renderURL
!
=
=
expectedAdComponents
[
i
]
.
renderURL
|
|
adComponents
[
i
]
.
metadata
!
=
=
expectedAdComponents
[
i
]
.
metadata
)
{
throw
"
Unexpected
adComponents
"
;
}
}
return
{
JSON
.
stringify
(
bid
)
}
reportWin
:
registerAdBeacon
(
{
beacon
:
'
{
createBidderBeaconURL
(
uuid
)
}
'
}
)
;
}
)
ads
:
[
{
renderURL
:
renderURL
}
]
adComponents
:
interestGroupAdComponents
}
)
;
if
(
!
bid
.
adComponents
|
|
bid
.
adComponents
.
length
=
=
=
0
)
{
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
browserSignals
.
adComponents
!
=
=
undefined
)
throw
"
adComponents
should
be
undefined
"
}
)
}
)
;
}
else
{
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
JSON
.
stringify
(
browserSignals
.
adComponents
)
!
=
=
'
{
JSON
.
stringify
(
bid
.
adComponents
)
}
'
)
{
throw
"
Unexpected
adComponents
:
"
+
JSON
.
stringify
(
browserSignals
.
adComponents
)
;
}
}
)
deprecatedRenderURLReplacements
:
deprecatedRenderURLReplacements
}
)
;
}
await
waitForObservedRequests
(
uuid
expectedTrackerURLs
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
renderURL
=
createRenderURL
(
uuid
let
status
=
"
ok
"
;
const
nestedConfigsLength
=
window
.
fence
.
getNestedConfigs
(
)
.
length
/
/
"
getNestedConfigs
(
)
"
should
return
a
list
of
40
configs
to
avoid
leaking
/
/
whether
there
were
any
component
URLs
to
the
page
.
if
(
nestedConfigsLength
!
=
=
40
)
status
=
"
unexpected
getNestedConfigs
(
)
length
:
"
+
nestedConfigsLength
;
window
.
fence
.
reportEvent
(
{
eventType
:
"
beacon
"
eventData
:
status
destination
:
[
"
buyer
"
]
}
)
;
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
'
if
(
interestGroup
.
componentAds
!
=
=
undefined
)
throw
"
unexpected
componentAds
"
'
reportWin
:
registerAdBeacon
(
{
beacon
:
"
{
createBidderBeaconURL
(
uuid
)
}
"
}
)
;
}
)
ads
:
[
{
renderUrl
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
browserSignals
.
adComponents
!
=
=
undefined
)
throw
"
adComponents
should
be
undefined
"
}
)
}
)
;
await
waitForObservedRequests
(
uuid
[
{
createBidderBeaconURL
(
uuid
)
}
body
:
ok
]
)
;
}
'
Group
has
no
component
ads
no
adComponents
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
adComponents
:
[
]
}
;
}
)
}
}
)
;
}
'
Group
has
no
component
ads
adComponents
in
bid
is
empty
array
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
null
[
0
1
]
)
;
}
'
Group
has
component
ads
but
not
used
in
bid
(
no
adComponents
field
)
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
[
]
[
0
1
]
)
;
}
'
Group
has
component
ads
but
not
used
in
bid
(
adComponents
field
empty
array
)
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
null
[
0
1
]
true
)
;
}
'
Unused
component
ads
with
metadata
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
adComponents
:
[
"
https
:
/
/
random
.
url
.
test
/
"
]
}
;
}
)
adComponents
:
[
{
renderURL
:
createComponentAdRenderURL
(
uuid
0
)
}
]
}
}
)
;
}
'
Unknown
component
ad
URL
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
adComponents
:
[
interestGroup
.
ads
[
0
]
.
renderUrl
]
}
;
}
)
adComponents
:
[
{
renderURL
:
createComponentAdRenderURL
(
uuid
0
)
}
]
}
}
)
;
}
'
Render
URL
used
as
component
ad
URL
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
interestGroup
.
adComponents
[
0
]
.
renderURL
}
;
}
)
adComponents
:
[
{
renderURL
:
createComponentAdRenderURL
(
uuid
0
)
}
]
}
}
)
;
}
'
Component
ad
URL
used
as
render
URL
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
[
0
1
]
[
0
1
]
)
;
}
'
2
of
2
component
ads
in
bid
and
then
shown
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
[
0
1
]
[
0
1
]
true
)
;
}
'
2
of
2
component
ads
in
bid
and
then
shown
with
metadata
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
20
[
3
10
]
[
0
1
]
)
;
}
'
2
of
20
component
ads
in
bid
and
then
shown
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
intsUpTo19
=
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
]
;
await
runComponentAdLoadingTest
(
test
uuid
20
intsUpTo19
intsUpTo19
)
;
}
'
20
of
20
component
ads
in
bid
and
then
shown
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
intsUpTo39
=
[
]
;
for
(
let
i
=
0
;
i
<
40
;
+
+
i
)
{
intsUpTo39
.
push
(
i
)
;
}
await
runComponentAdLoadingTest
(
test
uuid
40
intsUpTo39
intsUpTo39
)
;
}
'
40
of
40
component
ads
in
bid
and
then
shown
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
20
[
1
2
3
4
5
6
]
[
1
3
]
)
;
}
'
6
of
20
component
ads
in
bid
2
shown
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
4
[
0
1
2
3
]
[
0
1
1
0
3
3
2
2
1
0
]
)
;
}
'
4
of
4
component
ads
shown
multiple
times
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
[
0
0
0
0
]
[
0
1
2
3
]
)
;
}
'
Same
component
ad
used
multiple
times
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
2
[
0
]
[
4
3
2
1
0
]
)
;
}
'
Load
component
ads
not
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
renderURL
=
createRenderURL
(
uuid
)
;
let
adComponents
=
[
]
;
let
adComponentsList
=
[
]
;
for
(
let
i
=
0
;
i
<
41
;
+
+
i
)
{
let
componentRenderURL
=
createComponentAdTrackerURL
(
uuid
i
)
;
adComponents
.
push
(
{
renderURL
:
componentRenderURL
}
)
;
adComponentsList
.
push
(
componentRenderURL
)
;
}
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
"
{
renderURL
}
"
adComponents
:
{
JSON
.
stringify
(
adComponentsList
)
}
}
;
}
)
ads
:
[
{
renderURL
:
renderURL
}
]
adComponents
:
adComponents
}
}
)
;
}
'
41
component
ads
not
allowed
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
renderURL
=
createRenderURL
(
uuid
)
;
let
adComponents
=
[
]
;
let
adComponentsList
=
[
]
;
for
(
let
i
=
0
;
i
<
41
;
+
+
i
)
{
let
componentRenderURL
=
createComponentAdTrackerURL
(
uuid
i
)
;
adComponents
.
push
(
{
renderURL
:
componentRenderURL
}
)
;
adComponentsList
.
push
(
adComponents
[
0
]
.
renderURL
)
;
}
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
"
{
renderURL
}
"
adComponents
:
{
JSON
.
stringify
(
adComponentsList
)
}
}
;
}
)
ads
:
[
{
renderURL
:
renderURL
}
]
adComponents
:
adComponents
}
}
)
;
}
'
Same
component
ad
not
allowed
41
times
in
bid
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
componentRenderURL
=
createRenderURL
(
uuid
window
.
fence
.
reportEvent
(
{
eventType
:
"
beacon
"
eventData
:
"
Should
not
be
sent
"
destination
:
[
"
buyer
"
"
seller
"
]
}
)
;
fetch
(
"
{
createComponentAdTrackerURL
(
uuid
0
)
}
"
)
;
)
;
const
renderURL
=
createRenderURL
(
uuid
let
fencedFrame
=
document
.
createElement
(
"
fencedframe
"
)
;
fencedFrame
.
mode
=
"
opaque
-
ads
"
;
fencedFrame
.
config
=
window
.
fence
.
getNestedConfigs
(
)
[
0
]
;
document
.
body
.
appendChild
(
fencedFrame
)
;
async
function
waitForRequestAndSendBeacons
(
)
{
/
/
Wait
for
the
nested
fenced
frame
to
request
its
tracker
URL
.
await
waitForObservedRequests
(
"
{
uuid
}
"
[
"
{
createComponentAdTrackerURL
(
uuid
0
)
}
"
]
)
;
/
/
Now
that
the
tracker
URL
has
been
received
the
component
ad
has
tried
to
/
/
send
a
beacon
so
have
the
main
renderURL
send
a
beacon
which
should
succeed
/
/
and
should
hopefully
be
sent
after
the
component
ad
'
s
beacon
if
it
was
/
/
going
to
(
incorrectly
)
send
one
.
window
.
fence
.
reportEvent
(
{
eventType
:
"
beacon
"
eventData
:
"
top
-
ad
"
destination
:
[
"
buyer
"
"
seller
"
]
}
)
;
}
waitForRequestAndSendBeacons
(
)
;
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
:
return
{
bid
:
1
render
:
"
{
renderURL
}
"
adComponents
:
[
"
{
componentRenderURL
}
"
]
}
;
reportWin
:
registerAdBeacon
(
{
beacon
:
'
{
createBidderBeaconURL
(
uuid
)
}
'
}
)
;
}
)
ads
:
[
{
renderURL
:
renderURL
}
]
adComponents
:
[
{
renderURL
:
componentRenderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
reportResult
:
registerAdBeacon
(
{
beacon
:
'
{
createSellerBeaconURL
(
uuid
)
}
'
}
)
;
}
)
}
)
;
await
waitForObservedRequests
(
uuid
[
createComponentAdTrackerURL
(
uuid
0
)
{
createBidderBeaconURL
(
uuid
)
}
body
:
top
-
ad
{
createSellerBeaconURL
(
uuid
)
}
body
:
top
-
ad
]
)
;
}
'
Reports
not
sent
from
component
ad
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
1
[
0
]
[
0
]
false
{
'
%
%
EXAMPLE
-
MACRO
%
%
'
:
'
SSP
'
}
)
;
}
'
component
ad
with
render
url
replacements
with
percents
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
1
[
0
]
[
0
]
false
{
'
{
EXAMPLE
-
MACRO
}
'
:
'
SSP
'
}
)
;
}
'
component
ad
with
render
url
replacements
with
brackets
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
1
[
0
]
[
0
]
false
{
'
{
EXAMPLE
-
MACRO
-
1
}
'
:
'
SSP
-
1
'
'
%
%
EXAMPLE
-
MACRO
-
2
%
%
'
:
'
SSP
-
2
'
}
)
;
}
'
component
ad
with
render
url
replacements
with
multiple
replacements
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runComponentAdLoadingTest
(
test
uuid
3
[
0
1
2
]
[
0
1
2
]
false
{
'
{
EXAMPLE
-
MACRO
-
1
}
'
:
'
SSP
-
1
'
'
%
%
EXAMPLE
-
MACRO
-
2
%
%
'
:
'
SSP
-
2
'
}
)
;
}
'
component
ad
with
render
url
replacements
with
multiple
replacements
and
multiple
component
ads
.
'
)
;
