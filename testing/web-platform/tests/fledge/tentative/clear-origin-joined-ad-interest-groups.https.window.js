"
use
strict
;
"
subsetTest
(
promise_test
async
test
=
>
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
no
groups
joined
no
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
[
]
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
no
groups
joined
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
try
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
OTHER_ORIGIN1
)
;
throw
'
Exception
unexpectedly
not
thrown
'
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
DOMException
)
|
|
e
.
name
!
=
=
'
NotAllowedError
'
)
{
throw
'
Wrong
exception
thrown
:
'
+
e
.
toString
(
)
;
}
}
}
'
clearOriginJoinedAdInterestGroups
(
)
cross
-
origin
no
groups
joined
no
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
try
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
OTHER_ORIGIN1
[
]
)
;
throw
'
Exception
unexpectedly
not
thrown
'
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
DOMException
)
|
|
e
.
name
!
=
=
'
NotAllowedError
'
)
{
throw
'
Wrong
exception
thrown
:
'
+
e
.
toString
(
)
;
}
}
}
'
clearOriginJoinedAdInterestGroups
(
)
cross
-
origin
no
groups
joined
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
'
group
2
'
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
'
group
3
'
}
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
multiple
groups
joined
no
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
group1ReportURL
=
createBidderReportURL
(
uuid
'
1
'
)
;
let
group2ReportURL
=
createBidderReportURL
(
uuid
'
2
'
)
;
let
group3ReportURL
=
createBidderReportURL
(
uuid
'
3
'
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
'
group
1
'
executionMode
:
'
group
-
by
-
origin
'
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
1
reportWin
:
sendReportTo
(
"
{
group1ReportURL
}
"
)
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
'
group
2
'
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
2
reportWin
:
sendReportTo
(
"
{
group2ReportURL
}
"
)
;
}
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
name
:
'
group
3
'
executionMode
:
'
group
-
by
-
origin
'
biddingLogicURL
:
createBiddingScriptURL
(
{
bid
:
3
reportWin
:
sendReportTo
(
"
{
group3ReportURL
}
"
)
;
}
)
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
group3ReportURL
createSellerReportURL
(
uuid
)
]
)
;
await
fetch
(
createCleanupURL
(
uuid
)
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
[
'
group
1
'
]
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
group1ReportURL
createSellerReportURL
(
uuid
)
]
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
[
]
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
multiple
groups
joined
group
list
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroupInTopLevelWindow
(
test
uuid
window
.
location
.
origin
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
group
joined
from
same
-
origin
top
-
level
context
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
topLevelWindow
=
await
createTopLevelWindow
(
test
OTHER_ORIGIN1
)
;
let
interestGroup
=
JSON
.
stringify
(
createInterestGroupForOrigin
(
uuid
window
.
location
.
origin
)
)
;
await
runInFrame
(
test
topLevelWindow
await
joinCrossOriginInterestGroup
(
test_instance
"
{
uuid
}
"
"
{
window
.
location
.
origin
}
"
{
interestGroup
}
)
;
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
group
joined
from
cross
-
origin
top
-
level
context
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
/
/
Call
clearOriginJoinedAdInterestGroups
(
)
with
the
iframe
'
s
origin
.
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
try
{
/
/
Call
clearOriginJoinedAdInterestGroups
(
)
with
the
main
frame
'
s
origin
.
await
navigator
.
clearOriginJoinedAdInterestGroups
(
"
{
window
.
location
.
origin
}
"
)
;
}
catch
(
e
)
{
assert_true
(
e
instanceof
DOMException
"
DOMException
thrown
"
)
;
assert_equals
(
e
.
name
"
NotAllowedError
"
"
NotAllowedError
DOMException
thrown
"
)
;
return
{
result
:
"
success
"
}
;
}
throw
"
Exception
unexpectedly
not
thrown
"
;
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
"
clearOriginJoinedAdInterestGroups
(
)
cross
-
origin
iframe
tries
to
leave
parent
frame
'
s
group
.
"
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
noExpectionURL
=
createTrackerURL
(
origin
uuid
"
track_get
"
"
no_exception
"
)
;
const
exceptionURL
=
createTrackerURL
(
origin
uuid
"
track_get
"
"
exception
"
)
;
const
badExpectionURL
=
createTrackerURL
(
origin
uuid
"
track_get
"
"
bad_exception
"
)
;
const
renderURL
=
createRenderURL
(
uuid
async
function
TryClear
(
)
{
try
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
"
{
window
.
location
.
origin
}
"
)
;
await
fetch
(
"
{
noExpectionURL
}
"
)
;
}
catch
(
e
)
{
if
(
e
instanceof
DOMException
&
&
e
.
name
=
=
=
"
NotAllowedError
"
)
{
await
fetch
(
"
{
exceptionURL
}
"
)
;
}
else
{
await
fetch
(
"
{
badExpectionURL
}
"
)
;
}
}
}
TryClear
(
)
;
)
;
await
joinInterestGroup
(
test
uuid
{
ads
:
[
{
renderURL
:
renderURL
}
]
}
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
exceptionURL
]
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
in
ad
fenced
frame
throws
an
exception
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
await
navigator
.
clearOriginJoinedAdInterestGroups
(
window
.
location
.
origin
)
;
try
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
OTHER_ORIGIN1
)
;
throw
'
Exception
unexpectedly
not
thrown
'
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
DOMException
)
|
|
e
.
name
!
=
=
'
NotAllowedError
'
)
{
throw
'
Wrong
exception
thrown
:
'
+
e
.
toString
(
)
;
}
}
await
runInFrame
(
test
iframe
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
.
Cross
-
origin
interest
group
joined
in
iframe
try
to
clear
in
main
frame
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
/
/
Confirm
that
trying
to
clear
the
interest
group
using
the
main
frame
'
s
/
/
origin
throws
and
does
not
leave
the
group
.
try
{
await
navigator
.
clearOriginJoinedAdInterestGroups
(
"
{
window
.
location
.
origin
}
"
)
;
throw
'
Exception
unexpectedly
not
thrown
'
;
}
catch
(
e
)
{
if
(
!
(
e
instanceof
DOMException
)
|
|
e
.
name
!
=
=
'
NotAllowedError
'
)
{
throw
'
Wrong
exception
thrown
:
'
+
e
.
toString
(
)
;
}
}
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
.
Cross
-
origin
interest
group
joined
in
iframe
clear
call
in
iframe
passing
main
frame
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
/
/
Clear
call
with
the
origin
of
the
cross
-
origin
iframe
.
/
/
This
should
successfully
leave
the
interest
group
.
await
navigator
.
clearOriginJoinedAdInterestGroups
(
"
{
OTHER_ORIGIN1
}
"
)
;
/
/
Verify
the
group
was
left
.
await
runBasicFledgeTestExpectingNoWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
.
Cross
-
origin
interest
group
joined
in
iframe
clear
call
in
iframe
passing
iframe
origin
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
topLevelWindow
=
await
createTopLevelWindow
(
test
OTHER_ORIGIN1
)
;
await
runInFrame
(
test
topLevelWindow
await
joinInterestGroup
(
test_instance
"
{
uuid
}
"
)
;
)
;
let
iframe
=
await
createIframe
(
test
OTHER_ORIGIN1
'
join
-
ad
-
interest
-
group
'
)
;
await
runInFrame
(
test
iframe
/
/
Clear
call
from
an
OTHER_ORIGIN1
iframe
on
a
different
/
/
origin
'
s
main
frame
.
This
should
not
clear
the
interest
/
/
group
that
was
just
joined
because
the
joining
origin
/
/
does
not
match
.
await
navigator
.
clearOriginJoinedAdInterestGroups
(
"
{
OTHER_ORIGIN1
}
"
)
;
/
/
Verify
the
group
was
not
left
.
await
runBasicFledgeTestExpectingWinner
(
test_instance
"
{
uuid
}
"
)
;
)
;
}
'
clearOriginJoinedAdInterestGroups
(
)
.
Cross
-
origin
interest
group
joined
from
another
joining
origin
clear
call
in
iframe
.
'
)
;
