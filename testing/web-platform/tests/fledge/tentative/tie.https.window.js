"
use
strict
;
"
async
function
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
{
fencedFrameConfig
=
null
;
while
(
!
fencedFrameConfig
)
{
fencedFrameConfig
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
}
return
fencedFrameConfig
;
}
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
reportURLs
=
[
createBidderReportURL
(
uuid
'
1
'
)
createBidderReportURL
(
uuid
'
2
'
)
]
;
let
adURLs
=
[
createRenderURL
(
uuid
)
createRenderURL
(
uuid
'
;
'
)
]
;
await
Promise
.
all
(
[
joinInterestGroup
(
test
uuid
{
name
:
'
group
1
'
ads
:
[
{
renderURL
:
adURLs
[
0
]
}
]
executionMode
:
'
group
-
by
-
origin
'
biddingLogicURL
:
createBiddingScriptURL
(
{
allowComponentAuction
:
true
reportWin
:
sendReportTo
(
"
{
reportURLs
[
0
]
}
"
)
;
}
)
}
)
joinInterestGroup
(
test
uuid
{
name
:
'
group
2
'
ads
:
[
{
renderURL
:
adURLs
[
1
]
}
]
executionMode
:
'
group
-
by
-
origin
'
biddingLogicURL
:
createBiddingScriptURL
(
{
allowComponentAuction
:
true
reportWin
:
sendReportTo
(
"
{
reportURLs
[
1
]
}
"
)
;
}
)
}
)
]
)
;
let
componentAuctionConfig
=
{
seller
:
window
.
location
.
origin
decisionLogicURL
:
createDecisionScriptURL
(
uuid
)
interestGroupBuyers
:
[
window
.
location
.
origin
]
}
;
let
auctionConfigOverrides
=
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
)
interestGroupBuyers
:
[
]
componentAuctions
:
[
componentAuctionConfig
]
}
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
)
;
let
winningAdURL
=
'
'
;
try
{
await
waitForObservedRequests
(
uuid
[
reportURLs
[
0
]
]
)
;
winningAdURL
=
adURLs
[
0
]
;
}
catch
(
e
)
{
await
waitForObservedRequests
(
uuid
[
reportURLs
[
1
]
]
)
;
winningAdURL
=
adURLs
[
1
]
;
}
auctionConfigOverrides
.
decisionLogicURL
=
createDecisionScriptURL
(
uuid
{
scoreAd
:
if
(
browserSignals
.
renderURL
=
=
"
{
winningAdURL
}
"
)
return
0
;
}
)
;
let
abortController
=
new
AbortController
(
)
;
auctionConfigOverrides
.
signal
=
abortController
.
signal
;
let
fencedFrameConfig
=
await
Promise
.
any
(
[
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
runAuctionsUntilWinner
(
test
uuid
auctionConfigOverrides
)
]
)
;
abortController
.
abort
(
'
reason
'
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
await
waitForObservedRequests
(
uuid
[
reportURLs
[
0
]
reportURLs
[
1
]
]
)
;
}
'
runAdAuction
tie
.
'
)
;
