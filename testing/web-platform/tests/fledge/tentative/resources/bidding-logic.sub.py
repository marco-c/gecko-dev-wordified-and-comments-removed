from
pathlib
import
Path
def
main
(
request
response
)
:
    
error
=
request
.
GET
.
first
(
b
"
error
"
None
)
    
if
error
=
=
b
"
close
-
connection
"
:
        
response
.
writer
.
write
(
"
"
)
        
response
.
close_connection
=
True
        
return
    
if
error
=
=
b
"
http
-
error
"
:
        
response
.
status
=
(
404
b
"
OK
"
)
    
else
:
        
response
.
status
=
(
200
b
"
OK
"
)
    
if
error
=
=
b
"
wrong
-
content
-
type
"
:
        
response
.
headers
.
set
(
b
"
Content
-
Type
"
b
"
application
/
json
"
)
    
elif
error
!
=
b
"
no
-
content
-
type
"
:
        
response
.
headers
.
set
(
b
"
Content
-
Type
"
b
"
application
/
javascript
"
)
    
if
error
=
=
b
"
bad
-
allow
-
fledge
"
:
        
response
.
headers
.
set
(
b
"
Ad
-
Auction
-
Allowed
"
b
"
sometimes
"
)
    
elif
error
=
=
b
"
fledge
-
not
-
allowed
"
:
        
response
.
headers
.
set
(
b
"
Ad
-
Auction
-
Allowed
"
b
"
false
"
)
    
elif
error
!
=
b
"
no
-
allow
-
fledge
"
:
        
response
.
headers
.
set
(
b
"
Ad
-
Auction
-
Allowed
"
b
"
true
"
)
    
if
error
=
=
b
"
no
-
body
"
:
        
return
b
'
'
    
body
=
(
Path
(
__file__
)
.
parent
.
resolve
(
)
/
'
worklet
-
helpers
.
js
'
)
.
read_text
(
)
.
encode
(
"
ASCII
"
)
    
if
error
!
=
b
"
no
-
generateBid
"
:
        
bid
=
(
request
.
GET
.
first
(
b
"
bid
"
None
)
or
b
"
9
"
)
.
decode
(
"
ASCII
"
)
        
bidCurrency
=
"
"
        
bidCurrencyParam
=
request
.
GET
.
first
(
b
"
bidCurrency
"
None
)
        
if
bidCurrencyParam
!
=
None
:
            
bidCurrency
=
"
bidCurrency
:
'
"
+
bidCurrencyParam
.
decode
(
"
ASCII
"
)
+
"
'
"
        
allowComponentAuction
=
"
"
        
allowComponentAuctionParam
=
request
.
GET
.
first
(
b
"
allowComponentAuction
"
None
)
        
if
allowComponentAuctionParam
!
=
None
:
            
allowComponentAuction
=
f
"
allowComponentAuction
:
{
allowComponentAuctionParam
.
decode
(
'
ASCII
'
)
}
"
        
body
+
=
f
"
"
"
            
function
generateBid
(
interestGroup
auctionSignals
perBuyerSignals
                                
trustedBiddingSignals
browserSignals
                                
directFromSellerSignals
)
{
{
              
{
{
{
{
GET
[
generateBid
]
}
}
}
}
;
              
return
{
{
                
bid
:
{
bid
}
                
{
bidCurrency
}
                
{
allowComponentAuction
}
                
render
:
interestGroup
.
ads
[
0
]
.
renderURL
              
}
}
;
            
}
}
"
"
"
.
encode
(
)
    
if
error
!
=
b
"
no
-
reportWin
"
:
        
body
+
=
b
"
"
"
            
function
reportWin
(
auctionSignals
perBuyerSignals
sellerSignals
                              
browserSignals
directFromSellerSignals
)
{
              
{
{
GET
[
reportWin
]
}
}
;
            
}
"
"
"
    
return
body
