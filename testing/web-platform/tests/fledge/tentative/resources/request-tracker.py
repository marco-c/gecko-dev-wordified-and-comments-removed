import
json
import
mimetypes
import
os
from
fledge
.
tentative
.
resources
import
fledge_http_server_util
import
wptserve
.
stash
from
wptserve
.
utils
import
isomorphic_decode
isomorphic_encode
def
main
(
request
response
)
:
    
response
.
headers
.
set
(
b
"
Cache
-
Control
"
b
"
no
-
store
"
)
    
dispatch
=
request
.
GET
.
first
(
b
"
dispatch
"
None
)
    
uuid
=
request
.
GET
.
first
(
b
"
uuid
"
None
)
    
if
not
uuid
or
not
dispatch
:
        
return
simple_response
(
request
response
404
b
"
Not
found
"
                               
b
"
Invalid
query
parameters
"
)
    
stash
=
request
.
server
.
stash
    
with
stash
.
lock
:
        
server_state
=
stash
.
take
(
uuid
)
or
{
"
trackedRequests
"
:
[
]
"
errors
"
:
[
]
"
trackedHeaders
"
:
None
}
        
if
dispatch
=
=
b
"
clean_up
"
:
            
return
simple_response
(
request
response
200
b
"
OK
"
                                   
b
"
cleanup
complete
"
)
        
if
dispatch
=
=
b
"
tracked_data
"
:
            
stash
.
put
(
uuid
server_state
)
            
return
simple_response
(
request
response
200
b
"
OK
"
                                   
json
.
dumps
(
server_state
)
)
        
if
dispatch
=
=
b
"
track_get
"
:
            
if
request
.
method
!
=
"
GET
"
:
                
server_state
[
"
errors
"
]
.
append
(
                    
request
.
url
+
"
has
wrong
method
:
"
+
request
.
method
)
            
else
:
                
server_state
[
"
trackedRequests
"
]
.
append
(
request
.
url
)
            
stash
.
put
(
uuid
server_state
)
            
return
simple_response
(
request
response
200
b
"
OK
"
b
"
"
)
        
if
dispatch
=
=
b
"
track_post
"
:
            
contentType
=
request
.
headers
.
get
(
b
"
Content
-
Type
"
b
"
missing
"
)
            
if
request
.
method
!
=
"
POST
"
:
                
server_state
[
"
errors
"
]
.
append
(
                    
request
.
url
+
"
has
wrong
method
:
"
+
request
.
method
)
            
elif
not
contentType
.
startswith
(
b
"
text
/
plain
"
)
:
                
server_state
[
"
errors
"
]
.
append
(
                    
request
.
url
+
"
has
wrong
Content
-
Type
:
"
+
                    
contentType
.
decode
(
"
utf
-
8
"
)
)
            
else
:
                
server_state
[
"
trackedRequests
"
]
.
append
(
                    
request
.
url
+
"
body
:
"
+
request
.
body
.
decode
(
"
utf
-
8
"
)
)
            
stash
.
put
(
uuid
server_state
)
            
return
simple_response
(
request
response
200
b
"
OK
"
b
"
"
)
        
if
dispatch
=
=
b
"
track_headers
"
:
            
if
server_state
[
"
trackedHeaders
"
]
!
=
None
:
                
server_state
[
"
errors
"
]
.
append
(
"
Second
track_headers
request
received
.
"
)
            
else
:
                
server_state
[
"
trackedHeaders
"
]
=
fledge_http_server_util
.
headers_to_ascii
(
request
.
headers
)
            
stash
.
put
(
uuid
server_state
)
            
return
simple_response
(
request
response
200
b
"
OK
"
b
"
"
)
        
server_state
[
"
errors
"
]
.
append
(
            
request
.
url
+
"
request
with
unknown
dispatch
value
received
:
"
+
            
dispatch
.
decode
(
"
utf
-
8
"
)
)
        
stash
.
put
(
uuid
server_state
)
        
return
simple_response
(
request
response
404
b
"
Not
Found
"
                               
b
"
Unrecognized
dispatch
parameter
:
"
+
dispatch
)
def
simple_response
(
request
response
status_code
status_message
body
                    
content_type
=
b
"
text
/
plain
"
)
:
    
response
.
status
=
(
status_code
status_message
)
    
response
.
headers
.
set
(
b
"
Content
-
Type
"
content_type
)
    
return
body
