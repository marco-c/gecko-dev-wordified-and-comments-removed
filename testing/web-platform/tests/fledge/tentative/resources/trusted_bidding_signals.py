import
json
from
urllib
.
parse
import
unquote_plus
def
main
(
request
response
)
:
    
hostname
=
None
    
keys
=
None
    
interestGroupNames
=
None
    
for
param
in
request
.
url_parts
.
query
.
split
(
"
&
"
)
:
        
pair
=
param
.
split
(
"
=
"
1
)
        
if
len
(
pair
)
!
=
2
:
            
return
fail
(
response
"
Bad
query
parameter
:
"
+
param
)
        
if
"
%
20
"
in
pair
[
1
]
:
            
return
fail
(
response
"
Query
parameter
should
escape
using
'
+
'
:
"
+
param
)
        
if
pair
[
0
]
=
=
"
hostname
"
and
hostname
=
=
None
and
len
(
pair
[
1
]
)
>
0
:
            
hostname
=
pair
[
1
]
            
continue
        
if
pair
[
0
]
=
=
"
keys
"
and
keys
=
=
None
:
            
keys
=
list
(
map
(
unquote_plus
pair
[
1
]
.
split
(
"
"
)
)
)
            
continue
        
if
pair
[
0
]
=
=
"
interestGroupNames
"
and
interestGroupNames
=
=
None
:
            
interestGroupNames
=
list
(
map
(
unquote_plus
pair
[
1
]
.
split
(
"
"
)
)
)
            
continue
        
return
fail
(
response
"
Unexpected
query
parameter
:
"
+
param
)
    
if
not
hostname
:
        
return
fail
(
response
"
hostname
missing
"
)
    
if
not
interestGroupNames
:
        
return
fail
(
response
"
interestGroupNames
missing
"
)
    
response
.
status
=
(
200
b
"
OK
"
)
    
responseBody
=
{
"
keys
"
:
{
}
}
    
body
=
None
    
contentType
=
"
application
/
json
"
    
xAllowFledge
=
"
true
"
    
dataVersion
=
None
    
if
keys
:
        
for
key
in
keys
:
            
value
=
"
default
value
"
            
if
key
=
=
"
close
-
connection
"
:
                
response
.
writer
.
write
(
"
"
)
                
response
.
close_connection
=
True
                
return
            
elif
key
.
startswith
(
"
replace
-
body
:
"
)
:
                
body
=
key
.
split
(
'
:
'
1
)
[
1
]
            
elif
key
.
startswith
(
"
data
-
version
:
"
)
:
                
dataVersion
=
key
.
split
(
'
:
'
1
)
[
1
]
            
elif
key
=
=
"
http
-
error
"
:
                
response
.
status
=
(
404
b
"
Not
found
"
)
            
elif
key
=
=
"
no
-
content
-
type
"
:
                
contentType
=
None
            
elif
key
=
=
"
wrong
-
content
-
type
"
:
                
contentType
=
'
text
/
plain
'
            
elif
key
=
=
"
wrongContentType
"
:
                
contentType
=
'
text
/
plain
'
            
elif
key
=
=
"
bad
-
allow
-
fledge
"
:
                
xAllowFledge
=
"
sometimes
"
            
elif
key
=
=
"
fledge
-
not
-
allowed
"
:
                
xAllowFledge
=
"
false
"
            
elif
key
=
=
"
no
-
allow
-
fledge
"
:
                
xAllowFledge
=
None
            
elif
key
=
=
"
no
-
value
"
:
                
continue
            
elif
key
=
=
"
wrong
-
value
"
:
                
responseBody
[
"
keys
"
]
[
"
another
-
value
"
]
=
"
another
-
value
"
                
continue
            
elif
key
=
=
"
null
-
value
"
:
                
value
=
None
            
elif
key
=
=
"
num
-
value
"
:
                
value
=
1
            
elif
key
=
=
"
string
-
value
"
:
                
value
=
"
1
"
            
elif
key
=
=
"
array
-
value
"
:
                
value
=
[
1
"
foo
"
None
]
            
elif
key
=
=
"
object
-
value
"
:
                
value
=
{
"
a
"
:
"
b
"
"
c
"
:
[
"
d
"
]
}
            
elif
key
=
=
"
interest
-
group
-
names
"
:
                
value
=
json
.
dumps
(
interestGroupNames
)
            
elif
key
=
=
"
hostname
"
:
                
value
=
request
.
GET
.
first
(
b
"
hostname
"
b
"
not
-
found
"
)
.
decode
(
"
ASCII
"
)
            
responseBody
[
"
keys
"
]
[
key
]
=
value
    
if
"
data
-
version
"
in
interestGroupNames
:
        
dataVersion
=
"
4
"
    
if
contentType
:
        
response
.
headers
.
set
(
"
Content
-
Type
"
contentType
)
    
if
xAllowFledge
:
        
response
.
headers
.
set
(
"
X
-
Allow
-
FLEDGE
"
xAllowFledge
)
    
if
dataVersion
:
        
response
.
headers
.
set
(
"
Data
-
Version
"
dataVersion
)
    
response
.
headers
.
set
(
"
X
-
fledge
-
bidding
-
signals
-
format
-
version
"
"
2
"
)
    
if
body
!
=
None
:
        
return
body
    
return
json
.
dumps
(
responseBody
)
def
fail
(
response
body
)
:
    
response
.
status
=
(
400
"
Bad
Request
"
)
    
response
.
headers
.
set
(
b
"
Content
-
Type
"
b
"
text
/
plain
"
)
    
return
body
