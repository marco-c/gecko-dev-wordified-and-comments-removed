const
FULL_URL
=
window
.
location
.
href
;
const
BASE_URL
=
FULL_URL
.
substring
(
0
FULL_URL
.
lastIndexOf
(
'
/
'
)
+
1
)
;
const
BASE_PATH
=
(
new
URL
(
BASE_URL
)
)
.
pathname
;
const
DEFAULT_INTEREST_GROUP_NAME
=
'
default
name
'
;
function
createTrackerUrl
(
origin
uuid
dispatch
id
=
null
)
{
let
url
=
new
URL
(
{
origin
}
{
BASE_PATH
}
resources
/
request_tracker
.
py
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
url
.
searchParams
.
append
(
'
dispatch
'
dispatch
)
;
if
(
id
)
url
.
searchParams
.
append
(
'
id
'
id
)
;
return
url
.
toString
(
)
;
}
function
createBidderReportUrl
(
uuid
id
=
'
1
'
)
{
return
createTrackerUrl
(
window
.
location
.
origin
uuid
track_get
bidder_report_
{
id
}
)
;
}
function
createSellerReportUrl
(
uuid
id
=
'
1
'
)
{
return
createTrackerUrl
(
window
.
location
.
origin
uuid
track_get
seller_report_
{
id
}
)
;
}
function
createBidderBeaconUrl
(
uuid
id
=
'
1
'
)
{
return
createTrackerUrl
(
window
.
location
.
origin
uuid
track_post
bidder_beacon_
{
id
}
)
;
}
function
createSellerBeaconUrl
(
uuid
id
=
'
1
'
)
{
return
createTrackerUrl
(
window
.
location
.
origin
uuid
track_post
seller_beacon_
{
id
}
)
;
}
function
generateUuid
(
test
)
{
let
uuid
=
token
(
)
;
test
.
add_cleanup
(
async
(
)
=
>
{
let
cleanupUrl
=
createTrackerUrl
(
window
.
location
.
origin
uuid
'
clean_up
'
)
;
let
response
=
await
fetch
(
cleanupUrl
{
credentials
:
'
omit
'
mode
:
'
cors
'
}
)
;
assert_equals
(
await
response
.
text
(
)
'
cleanup
complete
'
Sever
state
cleanup
failed
)
;
}
)
;
return
uuid
;
}
async
function
waitForObservedRequests
(
uuid
expectedRequests
)
{
let
trackedRequestsUrl
=
createTrackerUrl
(
window
.
location
.
origin
uuid
'
request_list
'
)
;
expectedRequests
.
sort
(
)
;
while
(
true
)
{
let
response
=
await
fetch
(
trackedRequestsUrl
{
credentials
:
'
omit
'
mode
:
'
cors
'
}
)
;
let
trackerData
=
await
response
.
json
(
)
;
if
(
trackerData
.
error
)
{
throw
trackedRequestsUrl
+
'
fetch
failed
:
'
+
JSON
.
stringify
(
trackerData
)
;
}
if
(
trackerData
.
errors
.
length
>
0
)
{
throw
'
Errors
reported
by
request_tracker
.
py
:
'
+
JSON
.
stringify
(
trackerData
.
errors
)
;
}
let
trackedRequests
=
trackerData
.
trackedRequests
;
if
(
trackedRequests
.
length
=
=
expectedRequests
.
length
)
{
assert_array_equals
(
trackedRequests
.
sort
(
)
expectedRequests
)
;
break
;
}
for
(
const
trackedRequest
of
trackedRequests
)
{
assert_in_array
(
trackedRequest
expectedRequests
)
;
}
}
}
function
createBiddingScriptUrl
(
params
=
{
}
)
{
let
url
=
new
URL
(
{
BASE_URL
}
resources
/
bidding
-
logic
.
sub
.
py
)
;
if
(
params
.
generateBid
)
url
.
searchParams
.
append
(
'
generateBid
'
params
.
generateBid
)
;
if
(
params
.
reportWin
)
url
.
searchParams
.
append
(
'
reportWin
'
params
.
reportWin
)
;
if
(
params
.
error
)
url
.
searchParams
.
append
(
'
error
'
params
.
error
)
;
if
(
params
.
bid
)
url
.
searchParams
.
append
(
'
bid
'
params
.
bid
)
;
return
url
.
toString
(
)
;
}
function
createDecisionScriptUrl
(
uuid
params
=
{
}
)
{
let
url
=
new
URL
(
{
BASE_URL
}
resources
/
decision
-
logic
.
sub
.
py
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
if
(
params
.
scoreAd
)
url
.
searchParams
.
append
(
'
scoreAd
'
params
.
scoreAd
)
;
if
(
params
.
reportResult
)
url
.
searchParams
.
append
(
'
reportResult
'
params
.
reportResult
)
;
if
(
params
.
error
)
url
.
searchParams
.
append
(
'
error
'
params
.
error
)
;
return
url
.
toString
(
)
;
}
function
createRenderUrl
(
uuid
script
)
{
let
url
=
new
URL
(
{
BASE_URL
}
resources
/
fenced
-
frame
.
sub
.
py
)
;
if
(
script
)
url
.
searchParams
.
append
(
'
script
'
script
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
return
url
.
toString
(
)
;
}
async
function
joinInterestGroup
(
test
uuid
interestGroupOverrides
=
{
}
)
{
const
INTEREST_GROUP_LIFETIME_SECS
=
60
;
let
interestGroup
=
{
owner
:
window
.
location
.
origin
name
:
DEFAULT_INTEREST_GROUP_NAME
biddingLogicUrl
:
createBiddingScriptUrl
(
{
reportWin
:
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
}
)
ads
:
[
{
renderUrl
:
createRenderUrl
(
uuid
)
}
]
.
.
.
interestGroupOverrides
}
;
await
navigator
.
joinAdInterestGroup
(
interestGroup
INTEREST_GROUP_LIFETIME_SECS
)
;
test
.
add_cleanup
(
async
(
)
=
>
{
await
navigator
.
leaveAdInterestGroup
(
interestGroup
)
}
)
;
}
async
function
leaveInterestGroup
(
interestGroupOverrides
=
{
}
)
{
let
interestGroup
=
{
owner
:
window
.
location
.
origin
name
:
DEFAULT_INTEREST_GROUP_NAME
.
.
.
interestGroupOverrides
}
;
await
navigator
.
leaveAdInterestGroup
(
interestGroup
)
;
}
async
function
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
=
{
}
)
{
let
auctionConfig
=
{
seller
:
window
.
location
.
origin
decisionLogicUrl
:
createDecisionScriptUrl
(
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
}
)
interestGroupBuyers
:
[
window
.
location
.
origin
]
.
.
.
auctionConfigOverrides
}
;
return
await
navigator
.
runAdAuction
(
auctionConfig
)
;
}
async
function
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
=
{
}
)
{
let
url
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
assert_equals
(
typeof
url
'
string
'
Wrong
value
type
returned
from
auction
:
{
typeof
url
}
)
;
let
fencedFrame
=
document
.
createElement
(
'
fencedframe
'
)
;
fencedFrame
.
mode
=
'
opaque
-
ads
'
;
fencedFrame
.
src
=
url
;
document
.
body
.
appendChild
(
fencedFrame
)
;
test
.
add_cleanup
(
(
)
=
>
{
document
.
body
.
removeChild
(
fencedFrame
)
;
}
)
;
}
async
function
runBasicFledgeTestExpectingNoWinner
(
test
testConfig
=
{
}
)
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
testConfig
.
interestGroupOverrides
)
;
let
result
=
await
runBasicFledgeAuction
(
test
uuid
testConfig
.
auctionConfigOverrides
)
;
assert_true
(
result
=
=
=
null
'
Auction
unexpectedly
had
a
winner
'
)
;
}
async
function
runReportTest
(
test
uuid
reportResultSuccessCondition
reportResult
reportWinSuccessCondition
reportWin
expectedReportUrls
renderUrlOverride
)
{
if
(
reportResultSuccessCondition
)
{
reportResult
=
if
(
!
(
{
reportResultSuccessCondition
}
)
)
{
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
'
error
'
)
}
'
)
;
return
false
;
}
{
reportResult
}
;
}
let
decisionScriptUrlParams
=
{
}
;
if
(
reportResult
!
=
=
null
)
decisionScriptUrlParams
.
reportResult
=
reportResult
;
else
decisionScriptUrlParams
.
error
=
'
no
-
reportResult
'
;
if
(
reportWinSuccessCondition
)
{
reportWin
=
if
(
!
(
{
reportWinSuccessCondition
}
)
)
{
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
'
error
'
)
}
'
)
;
return
false
;
}
{
reportWin
}
;
}
let
biddingScriptUrlParams
=
{
}
;
if
(
reportWin
!
=
=
null
)
biddingScriptUrlParams
.
reportWin
=
reportWin
;
else
biddingScriptUrlParams
.
error
=
'
no
-
reportWin
'
;
let
interestGroupOverrides
=
{
biddingLogicUrl
:
createBiddingScriptUrl
(
biddingScriptUrlParams
)
}
;
if
(
renderUrlOverride
)
interestGroupOverrides
.
ads
=
[
{
renderUrl
:
renderUrlOverride
}
]
await
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
{
decisionLogicUrl
:
createDecisionScriptUrl
(
uuid
decisionScriptUrlParams
)
}
)
;
await
waitForObservedRequests
(
uuid
expectedReportUrls
)
;
}
