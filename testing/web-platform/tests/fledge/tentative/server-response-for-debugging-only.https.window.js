function
createDebugReport
(
url
isWinReport
=
null
isSellerReport
=
null
componentWin
=
null
)
{
let
report
=
{
}
;
if
(
url
!
=
=
null
)
{
report
.
url
=
url
;
}
if
(
isWinReport
!
=
=
null
)
{
report
.
isWinReport
=
isWinReport
;
}
if
(
isSellerReport
!
=
=
null
)
{
report
.
isSellerReport
=
isSellerReport
;
}
if
(
componentWin
!
=
=
null
)
{
report
.
componentWin
=
componentWin
;
}
return
report
;
}
function
createDebugReportsPerOrigin
(
adTechOrigin
=
MAIN_ORIGIN
reports
=
null
)
{
let
reportsPerOrigin
=
{
}
;
if
(
adTechOrigin
!
=
=
null
)
{
reportsPerOrigin
.
adTechOrigin
=
adTechOrigin
;
}
if
(
reports
!
=
=
null
)
{
reportsPerOrigin
.
reports
=
reports
;
}
return
reportsPerOrigin
;
}
const
delay
=
ms
=
>
new
Promise
(
resolve
=
>
step_timeout
(
resolve
ms
)
)
;
async
function
noRequestsObserved
(
uuid
timeout
=
2000
)
{
const
endTime
=
performance
.
now
(
)
+
timeout
;
do
{
let
trackedData
=
await
fetchTrackedData
(
uuid
)
;
let
trackedRequests
=
trackedData
.
trackedRequests
.
map
(
(
url
)
=
>
url
.
replace
(
uuid
'
<
uuid
>
'
)
)
.
sort
(
)
;
for
(
const
request
of
trackedRequests
)
{
assert_false
(
request
.
includes
(
'
forDebuggingOnly
'
)
'
Unexpected
forDebuggingOnly
request
:
'
+
request
)
;
}
await
delay
(
100
)
;
}
while
(
performance
.
now
(
)
<
endTime
)
;
}
async
function
testInvalidDebugReportsFields
(
test
uuid
debugReports
ownerOverride
=
null
)
{
let
result
=
await
BA
.
testWithMutatedServerResponse
(
test
true
(
msg
)
=
>
{
msg
.
debugReports
=
debugReports
;
}
(
ig
uuid
)
=
>
{
ig
.
ads
[
0
]
.
renderURL
=
createRenderURL
(
uuid
)
;
}
ownerOverride
)
;
createAndNavigateFencedFrame
(
test
result
)
;
await
noRequestsObserved
(
uuid
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
null
[
createDebugReport
(
bidderDebugReportURL
true
)
]
)
]
;
await
testInvalidDebugReportsFields
(
test
uuid
debugReports
)
;
}
B
&
A
forDebuggingOnly
-
missing
required
adTechOrigin
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
'
http
:
/
/
nothttps
.
com
'
[
createDebugReport
(
bidderDebugReportURL
true
)
]
)
]
;
await
testInvalidDebugReportsFields
(
test
uuid
debugReports
)
;
}
B
&
A
forDebuggingOnly
-
HTTP
adTechOrigin
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
window
.
location
.
origin
[
createDebugReport
(
'
http
:
/
/
nothttps
.
com
'
true
)
]
)
]
;
await
testInvalidDebugReportsFields
(
test
uuid
debugReports
)
;
}
B
&
A
forDebuggingOnly
-
HTTP
debug
report
url
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
window
.
location
.
origin
[
createDebugReport
(
'
not
a
url
'
true
)
]
)
]
;
await
testInvalidDebugReportsFields
(
test
uuid
debugReports
)
;
}
B
&
A
forDebuggingOnly
-
debug
report
url
not
a
url
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
igOwner
=
OTHER_ORIGIN1
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
igOwner
)
;
let
sellerDebugReportURL
=
createSellerReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
igOwner
[
createDebugReport
(
bidderDebugReportURL
true
)
]
)
createDebugReportsPerOrigin
(
window
.
location
.
origin
[
createDebugReport
(
sellerDebugReportURL
true
true
)
]
)
]
;
let
result
=
await
BA
.
testWithMutatedServerResponse
(
test
true
(
msg
)
=
>
{
msg
.
debugReports
=
debugReports
;
}
(
ig
uuid
)
=
>
{
ig
.
ads
[
0
]
.
renderURL
=
createRenderURL
(
uuid
)
;
}
igOwner
)
;
createAndNavigateFencedFrame
(
test
result
)
;
await
waitForObservedRequests
(
uuid
[
bidderDebugReportURL
sellerDebugReportURL
]
)
;
}
B
&
A
forDebuggingOnly
-
debug
reports
sent
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
igOwner
=
OTHER_ORIGIN1
;
let
bidderDebugReportURL
=
createBidderReportURL
(
uuid
'
forDebuggingOnly
'
igOwner
)
;
let
sellerDebugReportURL
=
createSellerReportURL
(
uuid
'
forDebuggingOnly
'
)
;
let
debugReports
=
[
createDebugReportsPerOrigin
(
igOwner
[
createDebugReport
(
'
not
a
url
'
true
)
]
)
createDebugReportsPerOrigin
(
window
.
location
.
origin
[
createDebugReport
(
sellerDebugReportURL
true
true
)
]
)
]
;
let
result
=
await
BA
.
testWithMutatedServerResponse
(
test
true
(
msg
)
=
>
{
msg
.
debugReports
=
debugReports
;
}
(
ig
uuid
)
=
>
{
ig
.
ads
[
0
]
.
renderURL
=
createRenderURL
(
uuid
)
;
}
igOwner
)
;
createAndNavigateFencedFrame
(
test
result
)
;
await
waitForObservedRequests
(
uuid
[
sellerDebugReportURL
]
)
;
}
B
&
A
forDebuggingOnly
-
invalid
debug
reports
don
'
t
affect
other
debug
reports
)
;
