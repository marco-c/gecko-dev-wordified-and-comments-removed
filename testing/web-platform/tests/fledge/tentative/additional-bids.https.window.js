"
use
strict
;
"
const
SINGLE_SELLER_AUCTION_SELLER
=
window
.
location
.
origin
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
auctionNonce
=
await
navigator
.
createAuctionNonce
(
)
;
const
seller
=
SINGLE_SELLER_AUCTION_SELLER
;
const
buyer
=
OTHER_ORIGIN1
;
const
additionalBid
=
createAdditionalBid
(
uuid
auctionNonce
seller
buyer
'
horses
'
1
.
99
)
;
await
runAdditionalBidTest
(
test
uuid
[
buyer
]
auctionNonce
fetchAdditionalBids
(
seller
[
additionalBid
]
)
0
'
horses
'
)
;
}
'
single
valid
additional
bid
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
auctionNonce
=
await
navigator
.
createAuctionNonce
(
)
;
const
seller
=
SINGLE_SELLER_AUCTION_SELLER
;
const
buyer1
=
OTHER_ORIGIN1
;
const
additionalBid1
=
createAdditionalBid
(
uuid
auctionNonce
seller
buyer1
'
horses
'
1
.
99
)
;
const
buyer2
=
OTHER_ORIGIN2
;
const
additionalBid2
=
createAdditionalBid
(
uuid
auctionNonce
seller
buyer2
'
planes
'
2
.
99
)
;
await
runAdditionalBidTest
(
test
uuid
[
buyer1
buyer2
]
auctionNonce
fetchAdditionalBids
(
seller
[
additionalBid1
additionalBid2
]
)
1
.
99
'
planes
'
)
;
}
'
two
valid
additional
bids
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
const
auctionNonce
=
await
navigator
.
createAuctionNonce
(
)
;
const
seller
=
SINGLE_SELLER_AUCTION_SELLER
;
const
buyer1
=
OTHER_ORIGIN1
;
const
additionalBid1
=
createAdditionalBid
(
uuid
auctionNonce
seller
buyer1
'
horses
'
1
.
99
)
;
const
buyer2
=
OTHER_ORIGIN2
;
const
additionalBid2
=
createAdditionalBid
(
uuid
auctionNonce
seller
buyer2
'
planes
'
2
.
99
)
;
await
runAdditionalBidTest
(
test
uuid
[
buyer1
buyer2
]
auctionNonce
Promise
.
all
(
[
fetchAdditionalBids
(
seller
[
additionalBid1
]
)
fetchAdditionalBids
(
seller
[
additionalBid2
]
)
]
)
1
.
99
'
planes
'
)
;
}
'
two
valid
additional
bids
from
two
distinct
Fetch
requests
'
)
;
