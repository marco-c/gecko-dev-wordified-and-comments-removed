"
use
strict
;
"
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
null
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createSellerReportURL
(
uuid
)
createBidderReportURL
(
uuid
)
]
)
;
}
'
Both
send
reports
seller
passes
nothing
to
bidder
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
reportWin
:
'
'
}
[
createSellerReportURL
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
reportWin
:
'
throw
new
Error
(
"
Very
serious
exception
"
)
'
}
[
createSellerReportURL
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
bidder
throws
an
exception
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
}
[
createSellerReportURL
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
bidder
has
no
reportWin
(
)
method
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
'
'
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
null
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
'
return
"
foo
"
;
'
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
"
foo
"
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
passes
a
message
to
bidder
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
'
throw
new
Error
(
"
Very
serious
exception
"
)
'
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
null
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
throws
an
exception
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
null
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
has
no
reportResult
(
)
method
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
return
5
;
reportWinSuccessCondition
:
'
sellerSignals
=
=
=
null
'
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createBidderReportURL
(
uuid
)
]
)
;
}
'
Seller
calls
sendReportTo
(
)
twice
which
throws
an
exception
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
{
reportResult
:
sendReportTo
(
'
{
createSellerReportURL
(
uuid
)
}
'
)
;
reportWin
:
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
sendReportTo
(
'
{
createBidderReportURL
(
uuid
)
}
'
)
;
}
[
createSellerReportURL
(
uuid
)
]
)
;
await
new
Promise
(
resolve
=
>
test
.
step_timeout
(
resolve
200
)
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportURL
(
uuid
)
]
)
;
}
'
Bidder
calls
sendReportTo
(
)
twice
which
throws
an
exception
.
'
)
;
