promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
'
sellerSignals
=
=
=
null
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createSellerReportUrl
(
uuid
)
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Both
send
reports
seller
passes
nothing
to
bidder
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
null
'
'
[
createSellerReportUrl
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
null
'
throw
new
Error
(
"
Very
serious
exception
"
)
'
[
createSellerReportUrl
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
bidder
throws
an
exception
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
null
null
[
createSellerReportUrl
(
uuid
)
]
)
;
}
'
Only
seller
sends
a
report
bidder
has
no
reportWin
(
)
method
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
'
'
'
sellerSignals
=
=
=
null
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
'
return
"
foo
"
;
'
'
sellerSignals
=
=
=
"
foo
"
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
passes
a
message
to
bidder
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
'
throw
new
Error
(
"
Very
serious
exception
"
)
'
'
sellerSignals
=
=
=
null
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
throws
an
exception
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
null
'
sellerSignals
=
=
=
null
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Only
bidder
sends
a
report
seller
has
no
reportResult
(
)
method
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
return
5
;
'
sellerSignals
=
=
=
null
'
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createBidderReportUrl
(
uuid
)
]
)
;
}
'
Seller
calls
sendReportTo
(
)
twice
which
throws
an
exception
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
runReportTest
(
test
uuid
null
sendReportTo
(
'
{
createSellerReportUrl
(
uuid
)
}
'
)
;
null
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
sendReportTo
(
'
{
createBidderReportUrl
(
uuid
)
}
'
)
;
[
createSellerReportUrl
(
uuid
)
]
)
;
await
new
Promise
(
resolve
=
>
test
.
step_timeout
(
resolve
200
)
)
;
await
waitForObservedRequests
(
uuid
[
createSellerReportUrl
(
uuid
)
]
)
;
}
'
Bidder
calls
sendReportTo
(
)
twice
which
throws
an
exception
.
'
)
;
