"
use
strict
"
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
createBiddingScriptURL
(
{
generateBid
:
'
while
(
1
)
;
'
}
)
)
;
let
abortController
=
new
AbortController
(
)
;
let
promise
=
runBasicFledgeAuction
(
test
uuid
{
signal
:
abortController
.
signal
perBuyerTimeouts
:
{
'
*
'
:
1000
}
}
)
;
abortController
.
abort
(
'
reason
'
)
;
try
{
await
promise
;
}
catch
(
e
)
{
assert_equals
(
e
'
reason
'
)
;
return
;
}
throw
'
Exception
unexpectedly
not
thrown
'
;
}
'
Abort
auction
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
let
abortController
=
new
AbortController
(
)
;
abortController
.
abort
(
'
reason
'
)
;
try
{
await
runBasicFledgeAuction
(
test
uuid
{
signal
:
abortController
.
signal
}
)
;
}
catch
(
e
)
{
assert_equals
(
e
'
reason
'
)
;
return
;
}
throw
'
Exception
unexpectedly
not
thrown
'
;
}
'
Abort
triggered
before
auction
started
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
let
trackingRenderURL
=
createTrackerURL
(
origin
uuid
track_get
tracking_render_url
)
;
await
joinInterestGroup
(
test
uuid
{
ads
:
[
{
renderURL
:
trackingRenderURL
}
]
}
)
;
let
abortController
=
new
AbortController
(
)
;
let
fencedFrameConfig
=
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
signal
:
abortController
.
signal
}
)
;
abortController
.
abort
(
'
reason
'
)
;
createAndNavigateFencedFrame
(
test
fencedFrameConfig
)
;
await
waitForObservedRequests
(
uuid
[
trackingRenderURL
createBidderReportURL
(
uuid
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Abort
signalled
after
auction
completes
.
'
)
;
promise_test
(
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
allowComponentAuction
:
true
}
)
}
)
;
let
abortController
=
new
AbortController
(
)
;
let
componentAuctionConfig
=
{
seller
:
window
.
location
.
origin
decisionLogicURL
:
createDecisionScriptURL
(
uuid
)
interestGroupBuyers
:
[
window
.
location
.
origin
]
signal
:
abortController
.
signal
}
;
let
auctionConfigOverrides
=
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
)
interestGroupBuyers
:
[
]
componentAuctions
:
[
componentAuctionConfig
]
}
;
abortController
.
abort
(
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
auctionConfigOverrides
)
;
}
'
Abort
component
auction
.
'
)
;
