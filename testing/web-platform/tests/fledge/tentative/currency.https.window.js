'
use
strict
;
'
async
function
joinTwoCurrencyGroups
(
test
uuid
)
{
const
reportWinURL
=
createBidderReportURL
(
uuid
'
USD
'
)
;
const
biddingURL
=
createBiddingScriptURL
(
{
bidCurrency
:
'
USD
'
reportWin
:
sendReportTo
(
'
{
reportWinURL
}
'
)
}
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
biddingURL
}
)
;
const
otherReportWinURL
=
createBidderReportURL
(
uuid
'
CAD
'
OTHER_ORIGIN1
)
;
const
otherBiddingURL
=
createBiddingScriptURL
(
{
origin
:
OTHER_ORIGIN1
bid
:
10
bidCurrency
:
'
CAD
'
reportWin
:
sendReportTo
(
'
{
otherReportWinURL
}
'
)
}
)
;
await
joinCrossOriginInterestGroup
(
test
uuid
OTHER_ORIGIN1
{
biddingLogicURL
:
otherBiddingURL
}
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bidCurrency
:
'
usd
'
}
)
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
)
;
}
'
Returning
bid
with
invalid
currency
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bidCurrency
:
'
USD
'
}
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
)
;
}
'
Returning
bid
with
currency
configuration
w
/
o
currency
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
perBuyerCurrencies
:
{
'
*
'
:
'
USD
'
}
}
)
;
}
'
Returning
bid
w
/
o
currency
configuration
w
/
currency
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bidCurrency
:
'
USD
'
}
)
}
)
;
await
runBasicFledgeTestExpectingWinner
(
test
uuid
{
perBuyerCurrencies
:
{
'
*
'
:
'
USD
'
}
}
)
;
}
'
Returning
bid
w
/
currency
configuration
w
/
matching
currency
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
{
biddingLogicURL
:
createBiddingScriptURL
(
{
bidCurrency
:
'
USD
'
}
)
}
)
;
await
runBasicFledgeTestExpectingNoWinner
(
test
uuid
{
perBuyerCurrencies
:
{
'
*
'
:
'
CAD
'
}
}
)
;
}
'
Returning
bid
w
/
currency
configuration
w
/
different
currency
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinTwoCurrencyGroups
(
test
uuid
)
;
let
auctionConfigOverrides
=
{
interestGroupBuyers
:
[
window
.
location
.
origin
OTHER_ORIGIN1
]
perBuyerCurrencies
:
{
}
}
;
auctionConfigOverrides
.
perBuyerCurrencies
[
'
*
'
]
=
'
USD
'
;
auctionConfigOverrides
.
perBuyerCurrencies
[
OTHER_ORIGIN1
]
=
'
CAD
'
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
CAD
'
OTHER_ORIGIN1
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Different
currencies
for
different
origins
all
match
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinTwoCurrencyGroups
(
test
uuid
)
;
let
auctionConfigOverrides
=
{
interestGroupBuyers
:
[
window
.
location
.
origin
OTHER_ORIGIN1
]
perBuyerCurrencies
:
{
}
}
;
auctionConfigOverrides
.
perBuyerCurrencies
[
window
.
location
.
origin
]
=
'
USD
'
;
auctionConfigOverrides
.
perBuyerCurrencies
[
OTHER_ORIGIN1
]
=
'
EUR
'
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
)
;
await
waitForObservedRequests
(
uuid
[
createBidderReportURL
(
uuid
'
USD
'
)
createSellerReportURL
(
uuid
)
]
)
;
}
'
Different
currencies
for
different
origins
USD
one
matches
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
joinTwoCurrencyGroups
(
test
uuid
)
;
let
auctionConfigOverrides
=
{
interestGroupBuyers
:
[
window
.
location
.
origin
OTHER_ORIGIN1
]
perBuyerCurrencies
:
{
}
}
;
auctionConfigOverrides
.
perBuyerCurrencies
[
'
*
'
]
=
'
EUR
'
;
}
'
Different
currencies
for
different
origins
none
match
.
'
)
;
