"
use
strict
"
;
const
SET_COOKIE_URL
=
{
BASE_URL
}
resources
/
set
-
cookie
.
asis
;
function
createHeaderTrackerURL
(
uuid
)
{
return
createTrackerURL
(
window
.
location
.
origin
uuid
'
track_headers
'
)
;
}
async
function
deleteAllCookies
(
)
{
await
test_driver
.
delete_all_cookies
(
)
;
}
async
function
setCookie
(
test
)
{
await
deleteAllCookies
(
)
;
document
.
cookie
=
'
cookie
=
cookie
;
path
=
/
'
test
.
add_cleanup
(
deleteAllCookies
)
;
}
function
assertHasHeader
(
headers
name
value
)
{
assert_equals
(
JSON
.
stringify
(
headers
[
name
]
)
JSON
.
stringify
(
[
value
]
)
'
Header
'
+
name
)
;
}
function
assertDoesNotHaveHeader
(
headers
name
)
{
assert_equals
(
headers
[
name
]
undefined
'
Header
'
+
name
)
;
}
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
setCookie
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
createHeaderTrackerURL
(
uuid
)
}
}
)
;
let
headers
=
(
await
fetchTrackedData
(
uuid
)
)
.
trackedHeaders
;
assertHasHeader
(
headers
'
accept
'
'
application
/
javascript
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
dest
'
'
empty
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
mode
'
'
no
-
cors
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
site
'
'
same
-
origin
'
)
;
assertDoesNotHaveHeader
(
headers
'
cookie
'
)
;
assertDoesNotHaveHeader
(
headers
'
referer
'
)
;
}
'
biddingLogicURL
request
headers
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
deleteAllCookies
(
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
SET_COOKIE_URL
}
}
)
;
assert_equals
(
document
.
cookie
'
'
)
;
await
deleteAllCookies
(
)
;
}
'
biddingLogicURL
Set
-
Cookie
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
deleteAllCookies
(
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingLogicURL
:
SET_COOKIE_URL
}
}
)
;
assert_equals
(
document
.
cookie
'
'
)
;
await
deleteAllCookies
(
)
;
}
'
biddingLogicURL
redirect
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
setCookie
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingWasmHelperURL
:
createHeaderTrackerURL
(
uuid
)
}
}
)
;
let
headers
=
(
await
fetchTrackedData
(
uuid
)
)
.
trackedHeaders
;
assertHasHeader
(
headers
'
accept
'
'
application
/
wasm
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
dest
'
'
empty
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
mode
'
'
no
-
cors
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
site
'
'
same
-
origin
'
)
;
assertDoesNotHaveHeader
(
headers
'
cookie
'
)
;
assertDoesNotHaveHeader
(
headers
'
referer
'
)
;
}
'
biddingWasmHelperURL
request
headers
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
deleteAllCookies
(
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
interestGroupOverrides
:
{
biddingWasmHelperURL
:
SET_COOKIE_URL
}
}
)
;
assert_equals
(
document
.
cookie
'
'
)
;
await
deleteAllCookies
(
)
;
}
'
biddingWasmHelperURL
Set
-
Cookie
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
setCookie
(
test
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
auctionConfigOverrides
:
{
decisionLogicURL
:
createHeaderTrackerURL
(
uuid
)
}
}
)
;
let
headers
=
(
await
fetchTrackedData
(
uuid
)
)
.
trackedHeaders
;
assertHasHeader
(
headers
'
accept
'
'
application
/
javascript
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
dest
'
'
empty
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
mode
'
'
no
-
cors
'
)
;
assertHasHeader
(
headers
'
sec
-
fetch
-
site
'
'
same
-
origin
'
)
;
assertDoesNotHaveHeader
(
headers
'
cookie
'
)
;
assertDoesNotHaveHeader
(
headers
'
referer
'
)
;
}
'
decisionLogicURL
request
headers
.
'
)
;
subsetTest
(
promise_test
async
test
=
>
{
const
uuid
=
generateUuid
(
test
)
;
await
deleteAllCookies
(
)
;
await
joinGroupAndRunBasicFledgeTestExpectingNoWinner
(
test
{
uuid
:
uuid
auctionConfigOverrides
:
{
decisionLogicURL
:
SET_COOKIE_URL
}
}
)
;
assert_equals
(
document
.
cookie
'
'
)
;
await
deleteAllCookies
(
)
;
}
'
decisionLogicURL
Set
-
Cookie
.
'
)
;
