const
COMMON_SCRIPT_ERRORS
=
[
'
error
=
http
-
error
'
'
error
=
no
-
content
-
type
'
'
error
=
wrong
-
content
-
type
'
'
error
=
bad
-
allow
-
fledge
'
'
error
=
fledge
-
not
-
allowed
'
'
error
=
no
-
allow
-
fledge
'
'
error
=
no
-
body
'
]
;
const
BIDDING_LOGIC_SCRIPT_ERRORS
=
[
.
.
.
COMMON_SCRIPT_ERRORS
'
error
=
no
-
generateBid
'
'
generateBid
=
throw
1
;
'
'
generateBid
=
This
does
not
compile
'
'
generateBid
=
while
(
1
)
;
'
'
generateBid
=
return
5
;
'
'
generateBid
=
return
"
Foo
"
;
'
'
generateBid
=
return
interestGroup
.
ads
[
0
]
.
renderUrl
;
'
'
generateBid
=
return
{
bid
:
1
render
:
"
https
:
/
/
not
-
in
-
ads
-
array
.
test
/
"
}
;
'
'
generateBid
=
return
{
bid
:
1
}
;
'
'
generateBid
=
return
{
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
}
;
'
'
generateBid
=
return
{
bid
:
0
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
}
;
'
'
generateBid
=
return
{
bid
:
-
1
render
:
interestGroup
.
ads
[
0
]
.
renderUrl
}
;
'
]
;
const
DECISION_LOGIC_SCRIPT_ERRORS
=
[
.
.
.
COMMON_SCRIPT_ERRORS
'
error
=
no
-
scoreAd
'
'
scoreAd
=
throw
1
;
'
'
scoreAd
=
This
does
not
compile
'
'
scoreAd
=
while
(
1
)
;
'
'
scoreAd
=
return
"
Foo
"
;
'
'
scoreAd
=
return
{
desirability
:
"
Foo
"
}
;
'
'
scoreAd
=
return
0
;
'
'
scoreAd
=
return
-
1
;
'
'
scoreAd
=
return
{
desirability
:
0
}
;
'
'
scoreAd
=
return
{
desirability
:
-
1
}
;
'
]
;
for
(
error
of
BIDDING_LOGIC_SCRIPT_ERRORS
)
{
promise_test
(
(
async
(
error
test
)
=
>
{
let
biddingLogicUrl
=
{
BASE_URL
}
resources
/
bidding
-
logic
.
sub
.
py
?
{
error
}
;
await
runBasicFledgeTestExpectingNoWinner
(
test
{
interestGroupOverrides
:
{
biddingLogicUrl
:
biddingLogicUrl
}
}
)
;
}
)
.
bind
(
undefined
error
)
Bidding
logic
script
:
{
error
}
)
;
}
for
(
error
of
DECISION_LOGIC_SCRIPT_ERRORS
)
{
promise_test
(
(
async
(
error
test
)
=
>
{
let
decisionLogicUrl
=
{
BASE_URL
}
resources
/
decision
-
logic
.
sub
.
py
?
{
error
}
;
await
runBasicFledgeTestExpectingNoWinner
(
test
{
auctionConfigOverrides
:
{
decisionLogicUrl
:
decisionLogicUrl
}
}
)
;
}
)
.
bind
(
undefined
error
)
Decision
logic
script
:
{
error
}
)
;
}
