function
findSupportedChangeTypeTestTypes
(
cb
)
{
let
CHANGE_TYPE_MEDIA_LIST
=
[
{
type
:
'
video
/
webm
;
codecs
=
"
vp8
"
'
is_video
:
true
url
:
'
webm
/
test
-
v
-
128k
-
320x240
-
24fps
-
8kfr
.
webm
'
start_time
:
0
.
0
}
{
type
:
'
video
/
webm
;
codecs
=
"
vp9
"
'
is_video
:
true
url
:
'
webm
/
test
-
vp9
.
webm
'
start_time
:
0
.
0
}
{
type
:
'
video
/
mp4
;
codecs
=
"
avc1
.
4D4001
"
'
is_video
:
true
url
:
'
mp4
/
test
-
v
-
128k
-
320x240
-
24fps
-
8kfr
.
mp4
'
start_time
:
0
.
083333
keyframe_interval
:
0
.
333333
}
{
type
:
'
audio
/
webm
;
codecs
=
"
vorbis
"
'
is_video
:
false
url
:
'
webm
/
test
-
a
-
128k
-
44100Hz
-
1ch
.
webm
'
start_time
:
0
.
0
}
{
type
:
'
audio
/
mp4
;
codecs
=
"
mp4a
.
40
.
2
"
'
is_video
:
false
url
:
'
mp4
/
test
-
a
-
128k
-
44100Hz
-
1ch
.
mp4
'
start_time
:
0
.
0
}
{
type
:
'
audio
/
mpeg
'
is_video
:
false
url
:
'
mp3
/
sound_5
.
mp3
'
start_time
:
0
.
0
}
]
;
let
audio_result
=
[
]
;
let
video_result
=
[
]
;
for
(
let
i
=
0
;
i
<
CHANGE_TYPE_MEDIA_LIST
.
length
;
+
+
i
)
{
let
media
=
CHANGE_TYPE_MEDIA_LIST
[
i
]
;
if
(
window
.
MediaSource
&
&
MediaSource
.
isTypeSupported
(
media
.
type
)
)
{
if
(
media
.
is_video
=
=
=
true
)
{
video_result
.
push
(
media
)
;
}
else
{
audio_result
.
push
(
media
)
;
}
}
}
cb
(
audio_result
video_result
)
;
}
function
appendBuffer
(
test
sourceBuffer
data
)
{
test
.
expectEvent
(
sourceBuffer
"
update
"
)
;
test
.
expectEvent
(
sourceBuffer
"
updateend
"
)
;
sourceBuffer
.
appendBuffer
(
data
)
;
}
function
trimBuffered
(
test
mediaElement
sourceBuffer
minimumPreviousDuration
newDuration
)
{
assert_less_than
(
newDuration
minimumPreviousDuration
)
;
assert_less_than
(
minimumPreviousDuration
mediaElement
.
duration
)
;
test
.
expectEvent
(
sourceBuffer
"
update
"
)
;
test
.
expectEvent
(
sourceBuffer
"
updateend
"
)
;
sourceBuffer
.
remove
(
newDuration
Infinity
)
;
}
function
trimDuration
(
test
mediaElement
mediaSource
newDuration
)
{
assert_less_than
(
newDuration
mediaElement
.
duration
)
;
test
.
expectEvent
(
mediaElement
"
durationchange
"
)
;
mediaSource
.
duration
=
newDuration
;
}
function
runChangeTypeTest
(
test
mediaElement
mediaSource
metadataA
dataA
metadataB
dataB
)
{
function
findSafeOffset
(
targetTime
overlappedMediaMetadata
overlappedStartTime
overlappingMediaMetadata
)
{
assert_greater_than_equal
(
targetTime
overlappedStartTime
)
;
let
offset
=
targetTime
;
if
(
"
start_time
"
in
overlappingMediaMetadata
)
{
offset
-
=
overlappingMediaMetadata
[
"
start_time
"
]
;
}
if
(
!
(
"
keyframe_interval
"
in
overlappedMediaMetadata
)
)
{
return
{
"
offset
"
:
offset
"
adjustedTime
"
:
targetTime
}
;
}
let
gopsToRetain
=
Math
.
ceil
(
(
targetTime
-
overlappedStartTime
)
/
overlappedMediaMetadata
[
"
keyframe_interval
"
]
)
;
let
adjustedTime
=
overlappedStartTime
+
gopsToRetain
*
overlappedMediaMetadata
[
"
keyframe_interval
"
]
;
assert_greater_than_equal
(
adjustedTime
targetTime
)
;
offset
+
=
adjustedTime
-
targetTime
;
return
{
"
offset
"
:
offset
"
adjustedTime
"
:
adjustedTime
}
;
}
let
sourceBuffer
=
mediaSource
.
addSourceBuffer
(
metadataA
.
type
)
;
appendBuffer
(
test
sourceBuffer
dataA
)
;
let
lastStart
=
metadataA
[
"
start_time
"
]
;
if
(
lastStart
=
=
null
)
{
lastStart
=
0
.
0
;
}
test
.
waitForExpectedEvents
(
(
)
=
>
{
let
safeOffset
=
findSafeOffset
(
0
.
5
metadataA
lastStart
metadataB
)
;
lastStart
=
safeOffset
[
"
adjustedTime
"
]
;
sourceBuffer
.
changeType
(
metadataB
.
type
)
;
sourceBuffer
.
timestampOffset
=
safeOffset
[
"
offset
"
]
;
appendBuffer
(
test
sourceBuffer
dataB
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
assert_less_than
(
lastStart
1
.
0
)
;
let
safeOffset
=
findSafeOffset
(
1
.
0
metadataB
lastStart
metadataB
)
;
lastStart
=
safeOffset
[
"
adjustedTime
"
]
;
sourceBuffer
.
changeType
(
metadataB
.
type
)
;
sourceBuffer
.
timestampOffset
=
safeOffset
[
"
offset
"
]
;
appendBuffer
(
test
sourceBuffer
dataB
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
assert_less_than
(
lastStart
1
.
5
)
;
let
safeOffset
=
findSafeOffset
(
1
.
5
metadataB
lastStart
metadataA
)
;
sourceBuffer
.
changeType
(
metadataA
.
type
)
;
sourceBuffer
.
timestampOffset
=
safeOffset
[
"
offset
"
]
;
appendBuffer
(
test
sourceBuffer
dataA
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
assert_less_than
(
lastStart
1
.
3
)
;
let
safeOffset
=
findSafeOffset
(
1
.
3
metadataB
lastStart
metadataA
)
;
sourceBuffer
.
changeType
(
metadataA
.
type
)
;
sourceBuffer
.
timestampOffset
=
safeOffset
[
"
offset
"
]
;
appendBuffer
(
test
sourceBuffer
dataA
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
trimBuffered
(
test
mediaElement
sourceBuffer
2
.
1
2
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
trimDuration
(
test
mediaElement
mediaSource
2
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
assert_equals
(
mediaElement
.
currentTime
0
)
;
test
.
expectEvent
(
mediaSource
"
sourceended
"
)
;
test
.
expectEvent
(
mediaElement
"
play
"
)
;
test
.
expectEvent
(
mediaElement
"
ended
"
)
;
mediaSource
.
endOfStream
(
)
;
mediaElement
.
play
(
)
;
}
)
;
test
.
waitForExpectedEvents
(
(
)
=
>
{
test
.
done
(
)
;
}
)
;
}
function
mediaSourceChangeTypeTest
(
metadataA
metadataB
description
)
{
mediasource_test
(
(
test
mediaElement
mediaSource
)
=
>
{
mediaElement
.
pause
(
)
;
mediaElement
.
addEventListener
(
'
error
'
test
.
unreached_func
(
"
Unexpected
event
'
error
'
"
)
)
;
MediaSourceUtil
.
loadBinaryData
(
test
metadataA
.
url
(
dataA
)
=
>
{
MediaSourceUtil
.
loadBinaryData
(
test
metadataB
.
url
(
dataB
)
=
>
{
runChangeTypeTest
(
test
mediaElement
mediaSource
metadataA
dataA
metadataB
dataB
)
;
}
)
;
}
)
;
}
description
)
;
}
