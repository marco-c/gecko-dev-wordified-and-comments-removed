importScripts
(
"
mediasource
-
worker
-
util
.
js
"
)
;
onmessage
=
function
(
evt
)
{
postMessage
(
{
subject
:
messageSubject
.
ERROR
info
:
"
No
message
expected
by
Worker
"
}
)
;
}
;
let
util
=
new
MediaSourceWorkerUtil
(
)
;
util
.
mediaSource
.
addEventListener
(
"
sourceopen
"
(
)
=
>
{
URL
.
revokeObjectURL
(
util
.
mediaSourceObjectUrl
)
;
sourceBuffer
=
util
.
mediaSource
.
addSourceBuffer
(
util
.
mediaMetadata
.
type
)
;
sourceBuffer
.
onerror
=
(
err
)
=
>
{
postMessage
(
{
subject
:
messageSubject
.
ERROR
info
:
err
}
)
;
}
;
sourceBuffer
.
onupdateend
=
(
)
=
>
{
sourceBuffer
.
abort
(
)
;
sourceBuffer
.
remove
(
0
.
5
Infinity
)
;
sourceBuffer
.
onupdateend
=
(
)
=
>
{
sourceBuffer
.
duration
=
0
.
5
;
sourceBuffer
.
changeType
(
util
.
mediaMetadata
.
type
)
;
util
.
mediaSource
.
endOfStream
(
)
;
}
;
}
;
util
.
mediaLoadPromise
.
then
(
mediaData
=
>
{
sourceBuffer
.
appendBuffer
(
mediaData
)
;
}
err
=
>
{
postMessage
(
{
subject
:
messageSubject
.
ERROR
info
:
err
}
)
}
)
;
}
{
once
:
true
}
)
;
postMessage
(
{
subject
:
messageSubject
.
OBJECT_URL
info
:
util
.
mediaSourceObjectUrl
}
)
;
