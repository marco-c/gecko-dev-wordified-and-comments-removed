function
generateHeader
(
headers
)
{
return
headers
.
map
(
(
h
)
=
>
{
return
'
header
(
'
+
h
+
'
)
'
;
}
)
.
join
(
'
|
'
)
;
}
async
function
setupTest
(
test_type
uuid
hostname
=
'
'
)
{
let
headers
=
[
"
Supports
-
Loading
-
Mode
fenced
-
frame
"
]
;
switch
(
test_type
)
{
case
"
coep
:
require
-
corp
"
:
headers
.
push
(
"
cross
-
origin
-
embedder
-
policy
require
-
corp
"
)
;
headers
.
push
(
"
cross
-
origin
-
resource
-
policy
same
-
origin
"
)
;
break
;
case
"
no
coep
"
:
break
;
default
:
assert_unreachable
(
"
unknown
test_type
:
"
+
test_type
)
;
break
;
}
const
tmp_url
=
new
URL
(
'
resources
/
embeddee
.
html
'
location
.
href
)
;
if
(
hostname
)
{
tmp_url
.
hostname
=
hostname
;
}
tmp_url
.
searchParams
.
append
(
"
pipe
"
generateHeader
(
headers
)
)
;
const
url
=
generateURL
(
tmp_url
.
toString
(
)
[
uuid
]
)
;
return
attachFencedFrame
(
url
)
;
}
