'
use
strict
'
;
pressure_test
(
async
(
t
mockPressureService
)
=
>
{
const
changes
=
await
new
Promise
(
resolve
=
>
{
const
observer
=
new
PressureObserver
(
resolve
)
;
t
.
add_cleanup
(
(
)
=
>
observer
.
disconnect
(
)
)
;
observer
.
observe
(
'
cpu
'
)
;
mockPressureService
.
setPressureUpdate
(
'
cpu
'
'
critical
'
[
'
thermal
'
]
)
;
mockPressureService
.
startPlatformCollector
(
5
.
0
)
;
}
)
;
assert_true
(
changes
.
length
=
=
=
1
)
;
assert_equals
(
changes
[
0
]
.
state
'
critical
'
)
;
assert_equals
(
changes
[
0
]
.
source
'
cpu
'
)
;
assert_equals
(
typeof
changes
[
0
]
.
time
'
number
'
)
;
assert_equals
(
changes
[
0
]
.
factors
[
0
]
'
thermal
'
)
;
}
'
Basic
factors
functionality
test
'
)
;
