'
use
strict
'
;
class
WindowHelper
{
constructor
(
)
{
setup
(
{
explicit_done
:
true
}
)
;
globalThis
.
create_virtual_pressure_source
=
test_driver
.
create_virtual_pressure_source
.
bind
(
test_driver
)
;
globalThis
.
remove_virtual_pressure_source
=
test_driver
.
remove_virtual_pressure_source
.
bind
(
test_driver
)
;
globalThis
.
update_virtual_pressure_source
=
test_driver
.
update_virtual_pressure_source
.
bind
(
test_driver
)
;
}
mark_as_done
(
)
{
done
(
)
;
}
pressure_test
(
test_func
description
)
{
promise_test
(
test_func
description
)
;
}
}
class
DedicatedWorkerHelper
{
constructor
(
)
{
this
.
token
=
token
(
)
;
this
.
worker
=
new
Worker
(
/
compute
-
pressure
/
resources
/
worker
-
support
.
js
?
uuid
=
{
this
.
token
}
)
;
this
.
worker
.
onmessage
=
async
(
e
)
=
>
{
if
(
!
e
.
data
.
command
)
{
return
;
}
switch
(
e
.
data
.
command
)
{
case
'
create
'
:
await
test_driver
.
create_virtual_pressure_source
(
.
.
.
e
.
data
.
params
)
;
break
;
case
'
remove
'
:
await
test_driver
.
remove_virtual_pressure_source
(
.
.
.
e
.
data
.
params
)
;
break
;
case
'
update
'
:
await
test_driver
.
update_virtual_pressure_source
(
.
.
.
e
.
data
.
params
)
;
break
;
default
:
throw
new
Error
(
Unexpected
command
'
{
e
.
data
.
command
}
'
)
;
}
this
.
worker
.
postMessage
(
{
command
:
e
.
data
.
command
id
:
e
.
data
.
id
}
)
;
}
;
this
.
fetch_tests_promise
=
fetch_tests_from_worker
(
this
.
worker
)
;
this
.
ctx
=
new
RemoteContext
(
this
.
token
)
;
this
.
pending_tests
=
[
]
;
}
async
mark_as_done
(
)
{
await
Promise
.
all
(
this
.
pending_tests
)
;
await
this
.
ctx
.
execute_script
(
(
)
=
>
{
done
(
)
;
}
)
;
await
this
.
fetch_tests_from_worker
;
}
async
pressure_test
(
test_func
description
)
{
this
.
pending_tests
.
push
(
this
.
ctx
.
execute_script
(
(
description
)
=
>
promise_test
(
{
test_func
}
description
)
;
[
description
]
)
)
;
}
}
let
_pressureTestHelper
;
const
_globalScope
=
new
URLSearchParams
(
location
.
search
)
.
get
(
'
globalScope
'
)
;
switch
(
_globalScope
)
{
case
'
window
'
:
_pressureTestHelper
=
new
WindowHelper
(
)
;
break
;
case
'
dedicated_worker
'
:
_pressureTestHelper
=
new
DedicatedWorkerHelper
(
)
;
break
;
default
:
throw
new
Error
(
Invalid
variant
'
{
_globalScope
}
'
)
;
}
promise_setup
(
async
(
)
=
>
{
await
test_driver
.
click
(
document
.
documentElement
)
;
}
)
;
const
pressure_test
=
_pressureTestHelper
.
pressure_test
.
bind
(
_pressureTestHelper
)
;
const
mark_as_done
=
_pressureTestHelper
.
mark_as_done
.
bind
(
_pressureTestHelper
)
;
