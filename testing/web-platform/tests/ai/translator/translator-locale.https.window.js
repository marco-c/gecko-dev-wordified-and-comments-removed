'
use
strict
'
;
function
assert_rejects_invalid_expected_input_languages
(
t
method
sourceLanguage
targetLanguage
)
{
return
promise_rejects_js
(
t
RangeError
method
(
{
sourceLanguage
targetLanguage
}
)
)
;
}
function
testInvalidLanguagePairs
(
t
method
)
{
const
allValidLanguageTags
=
Object
.
values
(
valid_language_tags
)
.
flat
(
)
;
for
(
const
sourceLanguage
of
invalid_language_tags
)
{
for
(
const
targetLanguage
of
allValidLanguageTags
)
{
assert_rejects_invalid_expected_input_languages
(
t
method
sourceLanguage
targetLanguage
)
;
}
}
for
(
const
sourceLanguage
of
allValidLanguageTags
)
{
for
(
const
targetLanguage
of
invalid_language_tags
)
{
assert_rejects_invalid_expected_input_languages
(
t
method
sourceLanguage
targetLanguage
)
;
}
}
for
(
const
sourceLanguage
of
invalid_language_tags
)
{
for
(
const
targetLanguage
of
invalid_language_tags
)
{
assert_rejects_invalid_expected_input_languages
(
t
method
sourceLanguage
targetLanguage
)
;
}
}
}
promise_test
(
async
t
=
>
{
testInvalidLanguagePairs
(
t
Translator
.
create
)
;
}
'
LanguageDetector
.
create
(
)
throws
RangeError
for
invalid
language
tags
'
)
;
promise_test
(
async
t
=
>
{
testInvalidLanguagePairs
(
t
Translator
.
availability
)
;
}
'
LanguageDetector
.
availability
(
)
throws
RangeError
for
invalid
language
tags
'
)
;
