function
getNormalizedPort
(
targetPort
)
{
return
(
[
80
443
"
"
]
.
indexOf
(
targetPort
)
>
=
0
)
?
"
"
:
"
:
"
+
targetPort
;
}
function
guid
(
)
{
return
'
xxxxxxxx
-
xxxx
-
4xxx
-
yxxx
-
xxxxxxxxxxxx
'
.
replace
(
/
[
xy
]
/
g
function
(
c
)
{
var
r
=
Math
.
random
(
)
*
16
|
0
v
=
c
=
=
'
x
'
?
r
:
(
r
&
0x3
|
0x8
)
;
return
v
.
toString
(
16
)
;
}
)
;
}
function
xhrRequest
(
url
responseType
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
'
GET
'
url
true
)
;
xhr
.
responseType
=
responseType
|
|
"
json
"
;
xhr
.
addEventListener
(
"
error
"
function
(
)
{
reject
(
Error
(
"
Network
Error
"
)
)
;
}
)
;
xhr
.
addEventListener
(
"
load
"
function
(
)
{
if
(
xhr
.
status
!
=
200
)
reject
(
Error
(
xhr
.
statusText
)
)
;
else
resolve
(
xhr
.
response
)
;
}
)
;
xhr
.
send
(
)
;
}
)
;
}
function
setAttributes
(
el
attrs
)
{
attrs
=
attrs
|
|
{
}
for
(
var
attr
in
attrs
)
el
.
setAttribute
(
attr
attrs
[
attr
]
)
;
}
function
bindEvents
(
element
resolveEventName
rejectEventName
)
{
element
.
eventPromise
=
new
Promise
(
function
(
resolve
reject
)
{
element
.
addEventListener
(
resolveEventName
|
|
"
load
"
function
(
e
)
{
resolve
(
e
)
;
}
)
;
element
.
addEventListener
(
rejectEventName
|
|
"
error
"
function
(
e
)
{
e
.
preventDefault
(
)
;
reject
(
e
)
;
}
)
;
}
)
;
}
function
createElement
(
tagName
attrs
parentNode
doBindEvents
)
{
var
element
=
document
.
createElement
(
tagName
)
;
if
(
doBindEvents
)
bindEvents
(
element
)
;
var
isImg
=
(
tagName
=
=
"
img
"
)
;
if
(
!
isImg
)
setAttributes
(
element
attrs
)
;
if
(
parentNode
)
parentNode
.
appendChild
(
element
)
;
if
(
isImg
)
setAttributes
(
element
attrs
)
;
return
element
;
}
function
createRequestViaElement
(
tagName
attrs
parentNode
)
{
return
createElement
(
tagName
attrs
parentNode
true
)
.
eventPromise
;
}
function
createHelperIframe
(
name
doBindEvents
)
{
return
createElement
(
"
iframe
"
{
"
name
"
:
name
"
id
"
:
name
}
document
.
body
doBindEvents
)
;
}
function
requestViaIframe
(
url
)
{
return
createRequestViaElement
(
"
iframe
"
{
"
src
"
:
url
}
document
.
body
)
;
}
function
requestViaImage
(
url
)
{
return
createRequestViaElement
(
"
img
"
{
"
src
"
:
url
}
document
.
body
)
;
}
function
requestViaXhr
(
url
)
{
return
xhrRequest
(
url
)
;
}
function
requestViaFetch
(
url
)
{
return
fetch
(
url
)
;
}
function
dedicatedWorkerUrlThatFetches
(
url
)
{
return
data
:
text
/
javascript
fetch
(
'
{
url
}
'
)
.
then
(
(
)
=
>
postMessage
(
'
'
)
(
)
=
>
postMessage
(
'
'
)
)
;
;
}
function
workerUrlThatImports
(
url
)
{
return
data
:
text
/
javascript
import
'
{
url
}
'
;
;
}
function
requestViaDedicatedWorker
(
url
options
)
{
var
worker
;
try
{
worker
=
new
Worker
(
url
options
)
;
}
catch
(
e
)
{
return
Promise
.
reject
(
e
)
;
}
bindEvents
(
worker
"
message
"
"
error
"
)
;
worker
.
postMessage
(
'
'
)
;
return
worker
.
eventPromise
;
}
function
get_worklet
(
type
)
{
if
(
type
=
=
'
animation
'
)
return
CSS
.
animationWorklet
;
if
(
type
=
=
'
layout
'
)
return
CSS
.
layoutWorklet
;
if
(
type
=
=
'
paint
'
)
return
CSS
.
paintWorklet
;
if
(
type
=
=
'
audio
'
)
return
new
OfflineAudioContext
(
2
44100
*
40
44100
)
.
audioWorklet
;
assert_unreached
(
'
unknown
worklet
type
is
passed
.
'
)
;
return
undefined
;
}
function
requestViaWorklet
(
type
url
)
{
try
{
return
get_worklet
(
type
)
.
addModule
(
url
)
;
}
catch
(
e
)
{
return
Promise
.
reject
(
e
)
;
}
}
function
requestViaNavigable
(
navigableElement
url
)
{
var
iframe
=
createHelperIframe
(
guid
(
)
true
)
;
setAttributes
(
navigableElement
{
"
href
"
:
url
"
target
"
:
iframe
.
name
}
)
;
navigableElement
.
click
(
)
;
return
iframe
.
eventPromise
;
}
function
requestViaAnchor
(
url
)
{
var
a
=
createElement
(
"
a
"
{
"
innerHTML
"
:
"
Link
to
resource
"
}
document
.
body
)
;
return
requestViaNavigable
(
a
url
)
;
}
function
requestViaArea
(
url
)
{
var
area
=
createElement
(
"
area
"
{
}
document
.
body
)
;
return
requestViaNavigable
(
area
url
)
;
}
function
requestViaScript
(
url
)
{
return
createRequestViaElement
(
"
script
"
{
"
src
"
:
url
}
document
.
body
)
;
}
function
requestViaForm
(
url
)
{
var
iframe
=
createHelperIframe
(
guid
(
)
)
;
var
form
=
createElement
(
"
form
"
{
"
action
"
:
url
"
method
"
:
"
POST
"
"
target
"
:
iframe
.
name
}
document
.
body
)
;
bindEvents
(
iframe
)
;
form
.
submit
(
)
;
return
iframe
.
eventPromise
;
}
function
requestViaLinkStylesheet
(
url
)
{
return
createRequestViaElement
(
"
link
"
{
"
rel
"
:
"
stylesheet
"
"
href
"
:
url
}
document
.
head
)
;
}
function
requestViaLinkPrefetch
(
url
)
{
var
link
=
document
.
createElement
(
'
link
'
)
;
if
(
link
.
relList
&
&
link
.
relList
.
supports
&
&
link
.
relList
.
supports
(
"
prefetch
"
)
)
{
return
createRequestViaElement
(
"
link
"
{
"
rel
"
:
"
prefetch
"
"
href
"
:
url
}
document
.
head
)
;
}
else
{
return
Promise
.
reject
(
"
This
browser
does
not
support
'
prefetch
'
.
"
)
;
}
}
async
function
requestViaSendBeacon
(
url
)
{
function
wait
(
ms
)
{
return
new
Promise
(
resolve
=
>
step_timeout
(
resolve
ms
)
)
;
}
if
(
!
navigator
.
sendBeacon
(
url
)
)
{
throw
new
Error
(
'
sendBeacon
(
)
fails
.
'
)
;
}
await
wait
(
500
)
;
return
'
allowed
'
;
}
function
createMediaElement
(
type
media_attrs
source_attrs
)
{
var
mediaElement
=
createElement
(
type
{
}
)
;
var
sourceElement
=
createElement
(
"
source
"
{
}
)
;
mediaElement
.
eventPromise
=
new
Promise
(
function
(
resolve
reject
)
{
mediaElement
.
addEventListener
(
"
loadeddata
"
function
(
e
)
{
resolve
(
e
)
;
}
)
;
mediaElement
.
addEventListener
(
"
stalled
"
function
(
e
)
{
reject
(
e
)
;
}
)
;
sourceElement
.
addEventListener
(
"
error
"
function
(
e
)
{
reject
(
e
)
;
}
)
;
}
)
;
setAttributes
(
mediaElement
media_attrs
)
;
setAttributes
(
sourceElement
source_attrs
)
;
mediaElement
.
appendChild
(
sourceElement
)
;
document
.
body
.
appendChild
(
mediaElement
)
;
return
mediaElement
;
}
function
requestViaVideo
(
url
)
{
return
createMediaElement
(
"
video
"
{
}
{
"
src
"
:
url
}
)
.
eventPromise
;
}
function
requestViaAudio
(
url
)
{
return
createMediaElement
(
"
audio
"
{
}
{
"
type
"
:
"
audio
/
wav
"
"
src
"
:
url
}
)
.
eventPromise
;
}
function
requestViaPicture
(
url
)
{
var
picture
=
createMediaElement
(
"
picture
"
{
}
{
"
srcset
"
:
url
"
type
"
:
"
image
/
png
"
}
)
;
return
createRequestViaElement
(
"
img
"
{
"
src
"
:
url
}
picture
)
;
}
function
requestViaObject
(
url
)
{
return
createRequestViaElement
(
"
object
"
{
"
data
"
:
url
"
type
"
:
"
text
/
html
"
}
document
.
body
)
;
}
function
requestViaWebSocket
(
url
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
var
websocket
=
new
WebSocket
(
url
)
;
websocket
.
addEventListener
(
"
message
"
function
(
e
)
{
resolve
(
JSON
.
parse
(
e
.
data
)
)
;
}
)
;
websocket
.
addEventListener
(
"
open
"
function
(
e
)
{
websocket
.
send
(
"
echo
"
)
;
}
)
;
websocket
.
addEventListener
(
"
error
"
function
(
e
)
{
reject
(
e
)
}
)
;
}
)
;
}
function
SanityChecker
(
)
{
}
SanityChecker
.
prototype
.
checkScenario
=
function
(
)
{
}
;
SanityChecker
.
prototype
.
setFailTimeout
=
function
(
test
timeout
)
{
}
;
