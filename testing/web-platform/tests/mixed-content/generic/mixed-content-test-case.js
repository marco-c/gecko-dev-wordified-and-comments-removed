function
getSubresourceOrigin
(
originType
)
{
const
httpProtocol
=
"
http
"
;
const
httpsProtocol
=
"
https
"
;
const
wsProtocol
=
"
ws
"
;
const
wssProtocol
=
"
wss
"
;
const
sameOriginHost
=
"
{
{
host
}
}
"
;
const
crossOriginHost
=
"
{
{
domains
[
www1
]
}
}
"
;
const
httpPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
http
]
[
0
]
}
}
"
10
)
)
;
const
httpsPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
https
]
[
0
]
}
}
"
10
)
)
;
const
wsPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
ws
]
[
0
]
}
}
"
10
)
)
;
const
wssPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
wss
]
[
0
]
}
}
"
10
)
)
;
const
originMap
=
{
"
same
-
https
"
:
httpsProtocol
+
"
:
/
/
"
+
sameOriginHost
+
httpsPort
"
same
-
http
"
:
httpProtocol
+
"
:
/
/
"
+
sameOriginHost
+
httpPort
"
cross
-
https
"
:
httpsProtocol
+
"
:
/
/
"
+
crossOriginHost
+
httpsPort
"
cross
-
http
"
:
httpProtocol
+
"
:
/
/
"
+
crossOriginHost
+
httpPort
"
same
-
wss
"
:
wssProtocol
+
"
:
/
/
"
+
sameOriginHost
+
wssPort
"
same
-
ws
"
:
wsProtocol
+
"
:
/
/
"
+
sameOriginHost
+
wsPort
"
cross
-
wss
"
:
wssProtocol
+
"
:
/
/
"
+
crossOriginHost
+
wssPort
"
cross
-
ws
"
:
wsProtocol
+
"
:
/
/
"
+
crossOriginHost
+
wsPort
}
;
return
originMap
[
originType
]
;
}
function
MixedContentTestCase
(
scenario
description
sanityChecker
)
{
sanityChecker
.
checkScenario
(
scenario
subresourceMap
)
;
const
originTypeConversion
=
{
"
same
-
host
-
https
"
:
"
same
-
https
"
"
same
-
host
-
http
"
:
"
same
-
http
"
"
cross
-
origin
-
https
"
:
"
cross
-
https
"
"
cross
-
origin
-
http
"
:
"
cross
-
http
"
"
same
-
host
-
wss
"
:
"
same
-
wss
"
"
same
-
host
-
ws
"
:
"
same
-
ws
"
"
cross
-
origin
-
wss
"
:
"
cross
-
wss
"
"
cross
-
origin
-
ws
"
:
"
cross
-
ws
"
}
;
const
urls
=
getRequestURLs
(
scenario
.
subresource
originTypeConversion
[
scenario
.
origin
]
scenario
.
redirection
)
;
const
invoker
=
subresourceMap
[
scenario
.
subresource
]
.
invoker
;
const
checkResult
=
_
=
>
{
return
xhrRequest
(
urls
.
assertUrl
)
.
then
(
assertResult
=
>
{
assert_equals
(
assertResult
.
status
scenario
.
expectation
"
The
resource
request
should
be
'
"
+
scenario
.
expectation
+
"
'
.
"
)
;
}
)
;
}
;
function
runTest
(
)
{
promise_test
(
(
)
=
>
{
return
xhrRequest
(
urls
.
announceUrl
)
.
then
(
_
=
>
invoker
(
urls
.
testUrl
)
)
.
then
(
checkResult
checkResult
)
;
}
description
)
;
}
return
{
start
:
runTest
}
;
}
