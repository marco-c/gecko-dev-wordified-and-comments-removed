export
const
description
=
setViewport
validation
tests
.
;
import
{
makeTestGroup
}
from
'
.
.
/
.
.
/
.
.
/
common
/
framework
/
test_group
.
js
'
;
import
{
ValidationTest
}
from
'
.
/
validation_test
.
js
'
;
const
TEXTURE_WIDTH
=
16
;
const
TEXTURE_HEIGHT
=
16
;
class
F
extends
ValidationTest
{
beginRenderPass
(
commandEncoder
)
{
const
attachmentTexture
=
this
.
device
.
createTexture
(
{
format
:
'
rgba8unorm
'
size
:
{
width
:
TEXTURE_WIDTH
height
:
TEXTURE_HEIGHT
depth
:
1
}
usage
:
GPUTextureUsage
.
OUTPUT_ATTACHMENT
}
)
;
return
commandEncoder
.
beginRenderPass
(
{
colorAttachments
:
[
{
attachment
:
attachmentTexture
.
createView
(
)
loadValue
:
{
r
:
1
.
0
g
:
0
.
0
b
:
0
.
0
a
:
1
.
0
}
}
]
}
)
;
}
}
export
const
g
=
makeTestGroup
(
F
)
;
g
.
test
(
'
use_of_setViewport
'
)
.
params
(
[
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
0
maxDepth
:
1
_success
:
true
}
{
x
:
0
y
:
0
width
:
0
height
:
1
minDepth
:
0
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
0
minDepth
:
0
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
0
height
:
0
minDepth
:
0
maxDepth
:
1
_success
:
false
}
{
x
:
-
1
y
:
0
width
:
1
height
:
1
minDepth
:
0
maxDepth
:
1
_success
:
true
}
{
x
:
0
y
:
-
1
width
:
1
height
:
1
minDepth
:
0
maxDepth
:
1
_success
:
true
}
{
x
:
0
y
:
0
width
:
-
1
height
:
1
minDepth
:
0
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
-
1
minDepth
:
0
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
-
1
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
0
maxDepth
:
-
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
10
maxDepth
:
1
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
0
maxDepth
:
10
_success
:
false
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
0
.
5
maxDepth
:
0
.
5
_success
:
true
}
{
x
:
0
y
:
0
width
:
1
height
:
1
minDepth
:
0
.
8
maxDepth
:
0
.
5
_success
:
true
}
{
x
:
0
y
:
0
width
:
TEXTURE_WIDTH
+
1
height
:
TEXTURE_HEIGHT
+
1
minDepth
:
0
maxDepth
:
1
_success
:
true
}
]
)
.
fn
(
async
t
=
>
{
const
{
x
y
width
height
minDepth
maxDepth
_success
}
=
t
.
params
;
const
commandEncoder
=
t
.
device
.
createCommandEncoder
(
)
;
const
renderPass
=
t
.
beginRenderPass
(
commandEncoder
)
;
renderPass
.
setViewport
(
x
y
width
height
minDepth
maxDepth
)
;
renderPass
.
endPass
(
)
;
t
.
expectValidationError
(
(
)
=
>
{
commandEncoder
.
finish
(
)
;
}
!
_success
)
;
}
)
;
