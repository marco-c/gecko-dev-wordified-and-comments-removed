export
const
description
=
Examples
of
writing
CTS
tests
with
various
features
.
Start
here
when
looking
for
examples
of
basic
framework
usage
.
;
import
{
makeTestGroup
}
from
'
.
.
/
common
/
framework
/
test_group
.
js
'
;
import
{
GPUTest
}
from
'
.
/
gpu_test
.
js
'
;
export
const
g
=
makeTestGroup
(
GPUTest
)
;
g
.
test
(
'
test_name
'
)
.
fn
(
t
=
>
{
}
)
;
g
.
test
(
'
basic
'
)
.
fn
(
t
=
>
{
t
.
expect
(
true
)
;
t
.
expect
(
true
'
true
should
be
true
'
)
;
t
.
shouldThrow
(
'
TypeError
'
(
)
=
>
{
throw
new
TypeError
(
)
;
}
'
function
should
throw
Error
'
)
;
}
)
;
g
.
test
(
'
basic
async
'
)
.
fn
(
async
t
=
>
{
t
.
shouldReject
(
'
TypeError
'
Promise
.
reject
(
new
TypeError
(
)
)
'
Promise
.
reject
should
reject
'
)
;
t
.
shouldReject
(
'
TypeError
'
(
async
(
)
=
>
{
throw
new
TypeError
(
)
;
}
)
(
)
'
Promise
.
reject
should
reject
'
)
;
}
)
;
g
.
test
(
'
basic
params
'
)
.
params
(
[
{
x
:
2
y
:
4
_result
:
6
}
{
x
:
-
10
y
:
18
_result
:
8
}
]
)
.
fn
(
t
=
>
{
t
.
expect
(
t
.
params
.
x
+
t
.
params
.
y
=
=
=
t
.
params
.
_result
)
;
}
)
;
g
.
test
(
'
gpu
async
'
)
.
fn
(
async
t
=
>
{
const
fence
=
t
.
queue
.
createFence
(
)
;
t
.
queue
.
signal
(
fence
2
)
;
await
fence
.
onCompletion
(
1
)
;
t
.
expect
(
fence
.
getCompletedValue
(
)
=
=
=
2
)
;
}
)
;
g
.
test
(
'
gpu
buffers
'
)
.
fn
(
async
t
=
>
{
const
data
=
new
Uint32Array
(
[
0
1234
0
]
)
;
const
[
src
map
]
=
t
.
device
.
createBufferMapped
(
{
size
:
12
usage
:
GPUBufferUsage
.
COPY_SRC
|
GPUBufferUsage
.
COPY_DST
}
)
;
new
Uint32Array
(
map
)
.
set
(
data
)
;
src
.
unmap
(
)
;
t
.
expectContents
(
src
data
)
;
}
)
;
