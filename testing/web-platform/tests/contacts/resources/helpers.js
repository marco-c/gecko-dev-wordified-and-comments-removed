'
use
strict
'
;
const
loadChromiumResources
=
async
(
)
=
>
{
if
(
!
window
.
MojoInterfaceInterceptor
)
{
return
;
}
const
resources
=
[
'
/
gen
/
layout_test_data
/
mojo
/
public
/
js
/
mojo_bindings
.
js
'
'
/
gen
/
third_party
/
blink
/
public
/
mojom
/
contacts
/
contacts_manager
.
mojom
.
js
'
'
/
resources
/
chromium
/
contacts_manager_mock
.
js
'
]
;
await
Promise
.
all
(
resources
.
map
(
path
=
>
{
const
script
=
document
.
createElement
(
'
script
'
)
;
script
.
src
=
path
;
script
.
async
=
false
;
const
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
script
.
onload
=
resolve
;
script
.
onerror
=
reject
;
}
)
;
document
.
head
.
appendChild
(
script
)
;
return
promise
;
}
)
)
;
}
;
async
function
createWebContactsTest
(
)
{
if
(
typeof
WebContactsTest
=
=
=
'
undefined
'
)
{
await
loadChromiumResources
(
)
;
}
assert_true
(
typeof
WebContactsTest
!
=
=
'
undefined
'
'
Mojo
testing
interface
is
not
available
.
'
)
;
return
new
WebContactsTest
(
)
;
}
function
contactsTestWithUserActivation
(
func
description
)
{
promise_test
(
async
test
=
>
{
const
webContactsTest
=
await
createWebContactsTest
(
)
;
await
window
.
test_driver
.
bless
(
'
request
contacts
'
)
;
return
func
(
test
contacts
=
>
webContactsTest
.
setSelectedContacts
(
contacts
)
)
;
}
description
)
;
}
