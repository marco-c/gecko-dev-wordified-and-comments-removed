import
re
import
time
import
json
import
fnmatch
import
os
import
shutil
import
sys
import
argparse
TESTTREE
=
'
.
.
'
DEFDIR
=
'
.
.
/
definitions
'
TEMPLATE
=
'
template
'
parser
=
argparse
.
ArgumentParser
(
)
parser
.
add_argument
(
'
-
-
examples
'
action
=
"
store_const
"
const
=
1
)
args
=
parser
.
parse_args
(
)
template
=
open
(
TEMPLATE
"
r
"
)
.
read
(
)
defList
=
[
]
defnames
=
"
"
for
curdir
subdirList
fileList
in
os
.
walk
(
DEFDIR
topdown
=
True
)
:
  
for
file
in
fnmatch
.
filter
(
fileList
"
*
.
json
"
)
:
    
theFile
=
os
.
path
.
join
(
curdir
file
)
    
try
:
      
testJSON
=
json
.
load
(
open
(
theFile
"
r
"
)
)
    
except
ValueError
as
e
:
      
print
"
parse
of
"
+
theFile
+
"
failed
:
"
+
e
[
0
]
    
else
:
      
theFile
=
re
.
sub
(
"
\
.
\
.
/
"
"
"
theFile
)
      
defList
.
append
(
theFile
)
if
(
len
(
defList
)
)
:
    
defNames
=
'
"
'
+
'
"
\
n
"
'
.
join
(
defList
)
+
'
"
'
for
curdir
subdirList
fileList
in
os
.
walk
(
TESTTREE
topdown
=
True
)
:
  
subdirList
[
:
]
=
[
d
for
d
in
subdirList
if
d
!
=
"
definitions
"
]
  
if
args
.
examples
!
=
1
:
    
subdirList
[
:
]
=
[
d
for
d
in
subdirList
if
d
!
=
"
examples
"
]
  
for
file
in
fnmatch
.
filter
(
fileList
"
*
.
test
"
)
:
    
theFile
=
os
.
path
.
join
(
curdir
file
)
    
try
:
      
testJSON
=
json
.
load
(
open
(
theFile
"
r
"
)
)
    
except
ValueError
as
e
:
      
print
"
parse
of
"
+
theFile
+
"
failed
:
"
+
e
[
0
]
    
else
:
      
rfile
=
re
.
sub
(
"
\
.
\
.
/
"
"
"
file
)
      
tcopy
=
re
.
sub
(
"
{
{
TESTFILE
}
}
"
rfile
template
)
      
tcopy
=
re
.
sub
(
"
{
{
SCHEMADEFS
}
}
"
defNames
tcopy
)
      
if
testJSON
[
'
name
'
]
:
        
tcopy
=
re
.
sub
(
"
{
{
TESTTITLE
}
}
"
testJSON
[
'
name
'
]
tcopy
)
      
target
=
re
.
sub
(
"
\
.
test
"
"
-
manual
.
html
"
theFile
)
      
try
:
        
out
=
open
(
target
"
w
"
)
        
out
.
write
(
tcopy
)
        
out
.
close
(
)
      
except
:
        
print
(
"
Failed
to
create
"
+
target
)
      
else
:
        
print
(
"
Created
"
+
target
)
