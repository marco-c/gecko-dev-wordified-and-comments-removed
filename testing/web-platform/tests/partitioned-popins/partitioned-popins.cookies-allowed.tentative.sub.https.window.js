'
use
strict
'
;
async_test
(
t
=
>
{
const
id
=
String
(
Math
.
random
(
)
)
;
document
.
cookie
=
"
FirstPartyStrict
=
"
+
id
+
"
;
SameSite
=
Strict
;
Secure
"
;
document
.
cookie
=
"
FirstPartyLax
=
"
+
id
+
"
;
SameSite
=
Lax
;
Secure
"
;
document
.
cookie
=
"
FirstPartyNone
=
"
+
id
+
"
;
SameSite
=
None
;
Secure
"
;
window
.
addEventListener
(
"
message
"
t
.
step_func
(
e
=
>
{
switch
(
e
.
data
.
type
)
{
case
'
window
-
set
'
:
assert_equals
(
e
.
data
.
message
"
Set
first
-
party
data
"
)
;
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
/
partitioned
-
popins
/
resources
/
partitioned
-
popins
.
cookies
-
iframe
.
html
?
id
=
"
+
id
;
document
.
body
.
appendChild
(
iframe
)
;
break
;
case
'
iframe
-
set
'
:
assert_equals
(
e
.
data
.
message
"
Set
third
-
party
data
"
)
;
window
.
open
(
"
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
/
partitioned
-
popins
/
resources
/
partitioned
-
popins
.
cookies
-
popin
.
sub
.
py
?
id
=
"
+
id
'
_blank
'
'
popin
'
)
;
break
;
case
'
popin
-
read
'
:
assert_equals
(
e
.
data
.
message
"
ReadOnLoad
:
ThirdPartyNone
-
ReadOnFetch
:
ThirdPartyNone
-
ThirdPartyNonePopin
-
ReadOnDocument
:
ThirdPartyNone
-
ThirdPartyNonePopin
-
ReadOnFetchAfterRSA
:
ThirdPartyNone
-
ThirdPartyNonePopin
-
ThirdPartyNonePopinAfterRSA
-
ReadOnDocumentAfterRSA
:
ThirdPartyNone
-
ThirdPartyNonePopin
-
ThirdPartyNonePopinAfterRSA
-
"
)
;
t
.
done
(
)
;
break
;
}
}
)
)
;
MaybeSetStorageAccess
(
"
*
"
"
*
"
"
allowed
"
)
.
then
(
(
)
=
>
{
window
.
open
(
"
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
/
partitioned
-
popins
/
resources
/
partitioned
-
popins
.
cookies
-
window
.
html
?
id
=
"
+
id
'
_blank
'
'
popup
'
)
;
}
)
;
}
"
Verify
Partitioned
Popins
cookie
access
when
third
-
party
cookie
access
allowed
"
)
;
