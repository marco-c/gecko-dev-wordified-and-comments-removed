'
use
strict
'
;
const
TEST_VALUE
=
"
popin
-
partition
-
test
"
;
async
function
seedPartition
(
remoteContextWrapper
name
)
{
await
remoteContextWrapper
.
executeScript
(
(
name
TEST_VALUE
)
=
>
{
window
.
localStorage
.
setItem
(
name
TEST_VALUE
)
;
document
.
cookie
=
name
+
"
-
strict
=
"
+
TEST_VALUE
+
"
;
SameSite
=
Strict
;
Secure
"
;
document
.
cookie
=
name
+
"
-
lax
=
"
+
TEST_VALUE
+
"
;
SameSite
=
Lax
;
Secure
"
;
document
.
cookie
=
name
+
"
-
none
=
"
+
TEST_VALUE
+
"
;
SameSite
=
None
;
Secure
"
;
document
.
cookie
=
name
+
"
-
partitioned
-
strict
=
"
+
TEST_VALUE
+
"
;
Partitioned
;
SameSite
=
Strict
;
Secure
"
;
document
.
cookie
=
name
+
"
-
partitioned
-
lax
=
"
+
TEST_VALUE
+
"
;
Partitioned
;
SameSite
=
Lax
;
Secure
"
;
document
.
cookie
=
name
+
"
-
partitioned
-
none
=
"
+
TEST_VALUE
+
"
;
Partitioned
;
SameSite
=
None
;
Secure
"
;
}
[
name
TEST_VALUE
]
)
;
}
async
function
openPopin
(
test
remoteContextWrapper
origin
)
{
const
popin
=
await
remoteContextWrapper
.
addWindow
(
origin
?
{
origin
}
:
null
{
features
:
"
popin
"
}
)
;
assert_equals
(
await
popin
.
executeScript
(
(
)
=
>
window
.
popinContextType
(
)
)
"
partitioned
"
)
;
test
.
add_cleanup
(
async
(
)
=
>
{
await
popin
.
executeScript
(
(
)
=
>
window
.
close
(
)
)
;
}
)
;
return
popin
;
}
async
function
getCookies
(
remoteContextWrapper
)
{
return
await
remoteContextWrapper
.
executeScript
(
(
TEST_VALUE
)
=
>
{
if
(
!
document
.
cookie
)
{
return
[
]
;
}
const
cookies
=
document
.
cookie
.
split
(
"
;
"
)
;
let
cookieNames
=
[
]
;
for
(
let
i
=
0
;
i
<
cookies
.
length
;
i
+
+
)
{
let
cookieName
=
cookies
[
i
]
.
split
(
"
=
"
)
[
0
]
.
trim
(
)
;
let
cookieValue
=
cookies
[
i
]
.
split
(
"
=
"
)
[
1
]
.
trim
(
)
;
if
(
cookieValue
=
=
=
TEST_VALUE
)
{
cookieNames
.
push
(
cookieName
)
;
}
}
return
cookieNames
.
sort
(
)
;
}
[
TEST_VALUE
]
)
;
}
async
function
getLocalStorage
(
remoteContextWrapper
)
{
return
await
remoteContextWrapper
.
executeScript
(
(
TEST_VALUE
)
=
>
{
let
storageNames
=
[
]
;
for
(
let
i
=
0
;
i
<
window
.
localStorage
.
length
;
i
+
+
)
{
if
(
window
.
localStorage
.
getItem
(
window
.
localStorage
.
key
(
i
)
)
=
=
=
TEST_VALUE
)
{
storageNames
.
push
(
window
.
localStorage
.
key
(
i
)
)
;
}
}
return
storageNames
.
sort
(
)
;
}
[
TEST_VALUE
]
)
;
}
const
rcHelper
=
new
RemoteContextHelper
(
)
;
const
handles
=
{
}
;
promise_setup
(
async
(
)
=
>
{
assert_in_array
(
"
partitioned
"
window
.
popinContextTypesSupported
(
)
)
;
handles
.
main
=
await
rcHelper
.
addWindow
(
)
;
handles
.
frameSameSite
=
await
handles
.
main
.
addIframe
(
)
;
handles
.
frameCrossSite
=
await
handles
.
main
.
addIframe
(
{
origin
:
"
HTTPS_NOTSAMESITE_ORIGIN
"
}
{
allow
:
"
popins
"
}
)
;
handles
.
frameSameSiteWithCrossSiteAncestor
=
await
handles
.
frameCrossSite
.
addIframe
(
null
{
allow
:
"
popins
"
}
)
;
handles
.
crossSite
=
await
rcHelper
.
addWindow
(
{
origin
:
"
HTTPS_NOTSAMESITE_ORIGIN
"
}
)
;
handles
.
crossSiteFrameSameSite
=
await
handles
.
crossSite
.
addIframe
(
)
;
Object
.
freeze
(
handles
)
;
await
seedPartition
(
handles
.
main
"
main
"
)
;
await
seedPartition
(
handles
.
frameSameSite
"
frameSameSite
"
)
;
await
seedPartition
(
handles
.
frameCrossSite
"
frameCrossSite
"
)
;
await
seedPartition
(
handles
.
frameSameSiteWithCrossSiteAncestor
"
frameSameSiteWithCrossSiteAncestor
"
)
;
await
seedPartition
(
handles
.
crossSite
"
crossSite
"
)
;
await
seedPartition
(
handles
.
crossSiteFrameSameSite
"
crossSiteFrameSameSite
"
)
;
}
)
;
subsetTestByKey
(
"
variant
-
1
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
main
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
lax
"
"
frameSameSite
-
none
"
"
frameSameSite
-
partitioned
-
lax
"
"
frameSameSite
-
partitioned
-
none
"
"
frameSameSite
-
partitioned
-
strict
"
"
frameSameSite
-
strict
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
main
-
lax
"
"
main
-
none
"
"
main
-
partitioned
-
lax
"
"
main
-
partitioned
-
none
"
"
main
-
partitioned
-
strict
"
"
main
-
strict
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameSameSite
"
"
main
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Main
site
opens
same
-
site
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
2
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
main
"
HTTPS_NOTSAMESITE_ORIGIN
"
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSite
-
none
"
"
frameCrossSite
-
none
"
"
frameCrossSite
-
partitioned
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameCrossSite
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Main
site
opens
cross
-
site
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
3
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameSameSite
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
lax
"
"
frameSameSite
-
none
"
"
frameSameSite
-
partitioned
-
lax
"
"
frameSameSite
-
partitioned
-
none
"
"
frameSameSite
-
partitioned
-
strict
"
"
frameSameSite
-
strict
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
main
-
lax
"
"
main
-
none
"
"
main
-
partitioned
-
lax
"
"
main
-
partitioned
-
none
"
"
main
-
partitioned
-
strict
"
"
main
-
strict
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameSameSite
"
"
main
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Same
-
site
frame
opens
same
-
site
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
4
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameCrossSite
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
partitioned
-
none
"
"
main
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameSameSiteWithCrossSiteAncestor
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Cross
-
site
frame
opens
main
-
host
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
5
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameCrossSite
"
HTTPS_NOTSAMESITE_ORIGIN
"
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSite
-
none
"
"
frameCrossSite
-
none
"
"
frameCrossSite
-
partitioned
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameCrossSite
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Cross
-
site
frame
opens
alternative
-
host
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
6
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameSameSiteWithCrossSiteAncestor
)
;
assert_array_equals
(
await
getCookies
(
popin
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
partitioned
-
none
"
"
main
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popin
)
[
"
frameSameSiteWithCrossSiteAncestor
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Same
-
site
frame
with
cross
-
site
ancestor
opens
main
-
host
popin
.
"
)
;
subsetTestByKey
(
"
variant
-
7
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
main
)
;
const
popinFrame
=
await
popin
.
addIframe
(
)
;
assert_array_equals
(
await
getCookies
(
popinFrame
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
lax
"
"
frameSameSite
-
none
"
"
frameSameSite
-
partitioned
-
lax
"
"
frameSameSite
-
partitioned
-
none
"
"
frameSameSite
-
partitioned
-
strict
"
"
frameSameSite
-
strict
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
main
-
lax
"
"
main
-
none
"
"
main
-
partitioned
-
lax
"
"
main
-
partitioned
-
none
"
"
main
-
partitioned
-
strict
"
"
main
-
strict
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popinFrame
)
[
"
frameSameSite
"
"
main
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Main
site
opens
same
-
site
popin
with
same
-
site
frame
.
"
)
;
subsetTestByKey
(
"
variant
-
8
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
main
)
;
const
popinFrame
=
await
popin
.
addIframe
(
{
origin
:
"
HTTPS_NOTSAMESITE_ORIGIN
"
}
{
allow
:
"
popins
"
}
)
;
assert_array_equals
(
await
getCookies
(
popinFrame
)
[
"
crossSite
-
none
"
"
frameCrossSite
-
none
"
"
frameCrossSite
-
partitioned
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popinFrame
)
[
"
frameCrossSite
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Main
site
opens
same
-
site
popin
with
cross
-
site
frame
.
"
)
;
subsetTestByKey
(
"
variant
-
9
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
main
"
HTTPS_NOTSAMESITE_ORIGIN
"
)
;
const
popinFrame
=
await
popin
.
addIframe
(
)
;
assert_array_equals
(
await
getCookies
(
popinFrame
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
partitioned
-
none
"
"
main
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popinFrame
)
[
"
frameSameSiteWithCrossSiteAncestor
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Main
site
opens
cross
-
site
popin
with
main
-
host
frame
.
"
)
;
subsetTestByKey
(
"
variant
-
10
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameCrossSite
)
;
const
popinFrame
=
await
popin
.
addIframe
(
{
origin
:
"
HTTPS_NOTSAMESITE_ORIGIN
"
}
{
allow
:
"
popins
"
}
)
;
assert_array_equals
(
await
getCookies
(
popinFrame
)
[
"
crossSite
-
none
"
"
frameCrossSite
-
none
"
"
frameCrossSite
-
partitioned
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popinFrame
)
[
"
frameCrossSite
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Cross
-
site
frame
opens
main
-
host
popin
with
cross
-
site
frame
.
"
)
;
subsetTestByKey
(
"
variant
-
11
-
test
"
promise_test
async
t
=
>
{
const
popin
=
await
openPopin
(
t
handles
.
frameCrossSite
"
HTTPS_NOTSAMESITE_ORIGIN
"
)
;
const
popinFrame
=
await
popin
.
addIframe
(
)
;
assert_array_equals
(
await
getCookies
(
popinFrame
)
[
"
crossSiteFrameSameSite
-
none
"
"
frameSameSite
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
none
"
"
frameSameSiteWithCrossSiteAncestor
-
partitioned
-
none
"
"
main
-
none
"
]
)
;
assert_array_equals
(
await
getLocalStorage
(
popinFrame
)
[
"
frameSameSiteWithCrossSiteAncestor
"
]
)
;
t
.
done
(
)
;
}
"
Verify
Partitioned
Popins
have
access
to
the
proper
cookie
/
storage
partitions
-
Cross
-
site
frame
opens
alternative
-
host
popin
with
main
-
host
frame
.
"
)
;
