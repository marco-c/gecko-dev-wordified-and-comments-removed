function
check_Touch_object
(
t
)
{
assert_equals
(
Object
.
prototype
.
toString
.
call
(
t
)
"
[
object
Touch
]
"
"
touch
is
of
type
Touch
"
)
;
[
[
"
long
"
"
identifier
"
]
[
"
EventTarget
"
"
target
"
]
[
"
long
"
"
screenX
"
]
[
"
long
"
"
screenY
"
]
[
"
long
"
"
clientX
"
]
[
"
long
"
"
clientY
"
]
[
"
long
"
"
pageX
"
]
[
"
long
"
"
pageY
"
]
[
"
long
"
"
radiusX
"
]
[
"
long
"
"
radiusY
"
]
[
"
long
"
"
rotationAngle
"
]
[
"
long
"
"
force
"
]
]
.
forEach
(
function
(
attr
)
{
var
type
=
attr
[
0
]
;
var
name
=
attr
[
1
]
;
assert_true
(
name
in
t
name
+
"
attribute
in
Touch
object
"
)
;
switch
(
type
)
{
case
"
long
"
:
assert_equals
(
typeof
t
[
name
]
"
number
"
name
+
"
attribute
of
type
long
"
)
;
break
;
case
"
EventTarget
"
:
assert_true
(
t
[
name
]
instanceof
Element
"
EventTarget
must
be
an
Element
.
"
)
;
break
;
default
:
break
;
}
}
)
;
}
function
check_TouchList_object
(
tl
)
{
assert_equals
(
Object
.
prototype
.
toString
.
call
(
tl
)
"
[
object
TouchList
]
"
"
touch
list
is
of
type
TouchList
"
)
;
[
[
"
unsigned
long
"
"
length
"
]
[
"
function
"
"
item
"
]
]
.
forEach
(
function
(
attr
)
{
var
type
=
attr
[
0
]
;
var
name
=
attr
[
1
]
;
assert_true
(
name
in
tl
name
+
"
attribute
in
TouchList
"
)
;
switch
(
type
)
{
case
"
unsigned
long
"
:
assert_equals
(
typeof
tl
[
name
]
"
number
"
name
+
"
attribute
of
type
long
"
)
;
break
;
case
"
function
"
:
assert_equals
(
typeof
tl
[
name
]
"
function
"
name
+
"
attribute
of
type
function
"
)
;
break
;
default
:
break
;
}
}
)
;
for
(
var
i
=
0
;
i
<
tl
.
length
;
i
+
+
)
{
check_Touch_object
(
tl
.
item
(
i
)
)
;
}
var
t
=
tl
.
item
(
tl
.
length
)
;
assert_equals
(
t
null
"
TouchList
.
item
returns
null
if
the
index
is
>
=
the
length
of
the
list
"
)
;
}
function
check_TouchEvent
(
ev
)
{
assert_true
(
ev
instanceof
TouchEvent
ev
.
type
+
"
event
is
a
TouchEvent
event
"
)
;
[
[
"
TouchList
"
"
touches
"
]
[
"
TouchList
"
"
targetTouches
"
]
[
"
TouchList
"
"
changedTouches
"
]
[
"
boolean
"
"
altKey
"
]
[
"
boolean
"
"
metaKey
"
]
[
"
boolean
"
"
ctrlKey
"
]
[
"
boolean
"
"
shiftKey
"
]
]
.
forEach
(
function
(
attr
)
{
var
type
=
attr
[
0
]
;
var
name
=
attr
[
1
]
;
assert_true
(
name
in
ev
name
+
"
attribute
in
"
+
ev
.
type
+
"
event
"
)
;
switch
(
type
)
{
case
"
boolean
"
:
assert_equals
(
typeof
ev
[
name
]
"
boolean
"
name
+
"
attribute
of
type
boolean
"
)
;
break
;
case
"
TouchList
"
:
assert_equals
(
Object
.
prototype
.
toString
.
call
(
ev
[
name
]
)
"
[
object
TouchList
]
"
name
+
"
attribute
of
type
TouchList
"
)
;
break
;
default
:
break
;
}
}
)
;
}
async
function
waitTillReadyForTouchInput
(
)
{
const
animation
=
document
.
body
.
animate
(
{
opacity
:
[
0
1
]
}
{
duration
:
1
}
)
;
return
animation
.
finished
;
}
