"
use
strict
"
;
const
SAME_ORIGIN
=
"
https
:
/
/
{
{
host
}
}
:
{
{
ports
[
h2
]
[
0
]
}
}
"
;
const
CROSS_ORIGIN
=
"
https
:
/
/
{
{
hosts
[
alt
]
[
www
]
}
}
:
{
{
ports
[
h2
]
[
0
]
}
}
"
;
const
RESOURCES_PATH
=
"
/
loading
/
early
-
hints
/
resources
"
;
const
SAME_ORIGIN_RESOURCES_URL
=
SAME_ORIGIN
+
RESOURCES_PATH
;
const
CROSS_ORIGIN_RESOURCES_URL
=
CROSS_ORIGIN
+
RESOURCES_PATH
;
function
navigateToTestWithEarlyHints
(
test_url
preloads
)
{
const
params
=
new
URLSearchParams
(
)
;
params
.
set
(
"
test_url
"
test_url
)
;
for
(
const
preload
of
preloads
)
{
params
.
append
(
"
preloads
"
JSON
.
stringify
(
preload
)
)
;
}
const
url
=
"
resources
/
early
-
hints
-
test
-
loader
.
h2
.
py
?
"
+
params
.
toString
(
)
;
window
.
location
.
replace
(
new
URL
(
url
window
.
location
)
)
;
}
function
getPreloadsFromSearchParams
(
)
{
const
params
=
new
URLSearchParams
(
window
.
location
.
search
)
;
const
encoded_preloads
=
params
.
getAll
(
"
preloads
"
)
;
const
preloads
=
[
]
;
for
(
const
encoded
of
encoded_preloads
)
{
preloads
.
push
(
JSON
.
parse
(
encoded
)
)
;
}
return
preloads
;
}
async
function
fetchScript
(
url
)
{
return
new
Promise
(
(
resolve
)
=
>
{
const
el
=
document
.
createElement
(
"
script
"
)
;
el
.
src
=
url
;
el
.
onload
=
resolve
;
document
.
body
.
appendChild
(
el
)
;
}
)
;
}
function
isPreloadedByEarlyHints
(
url
)
{
const
entries
=
performance
.
getEntriesByName
(
url
)
;
assert_equals
(
entries
.
length
1
)
;
return
entries
[
0
]
.
initiatorType
=
=
=
"
early
-
hints
"
;
}
function
testReferrerPolicy
(
referrer_policy
)
{
const
params
=
new
URLSearchParams
(
)
;
params
.
set
(
"
referrer
-
policy
"
referrer_policy
)
;
const
same_origin_preload_url
=
SAME_ORIGIN_RESOURCES_URL
+
"
/
fetch
-
and
-
record
-
js
.
h2
.
py
?
id
=
"
+
token
(
)
;
params
.
set
(
"
same
-
origin
-
preload
-
url
"
same_origin_preload_url
)
;
const
cross_origin_preload_url
=
CROSS_ORIGIN_RESOURCES_URL
+
"
/
fetch
-
and
-
record
-
js
.
h2
.
py
?
id
=
"
+
token
(
)
;
params
.
set
(
"
cross
-
origin
-
preload
-
url
"
cross_origin_preload_url
)
;
const
path
=
"
resources
/
referrer
-
policy
-
test
-
loader
.
h2
.
py
?
"
+
params
.
toString
(
)
;
const
url
=
new
URL
(
path
window
.
location
)
;
window
.
location
.
replace
(
url
)
;
}
