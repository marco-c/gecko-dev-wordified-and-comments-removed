var
message_event_promise_resolve
=
null
;
function
messageEventHandler
(
evt
)
{
if
(
message_event_promise_resolve
)
{
local_resolve
=
message_event_promise_resolve
;
message_event_promise_resolve
=
null
;
local_resolve
(
evt
.
data
)
;
}
}
function
makeMessagePromise
(
)
{
if
(
message_event_promise_resolve
!
=
null
)
{
return
;
}
return
new
Promise
(
resolve
=
>
{
message_event_promise_resolve
=
resolve
;
}
)
;
}
function
loadAndReturnSwData
(
t
url
frame_type
)
{
if
(
frame_type
!
=
=
'
iframe
'
&
&
frame_type
!
=
=
'
window
'
)
{
return
;
}
const
message_promise
=
makeMessagePromise
(
)
;
if
(
frame_type
=
=
=
'
iframe
'
)
{
const
frame
=
with_iframe
(
url
false
)
;
t
.
add_cleanup
(
async
(
)
=
>
{
const
f
=
await
frame
;
f
.
remove
(
)
;
}
)
;
}
else
{
const
search_param
=
new
URLSearchParams
(
)
;
search_param
.
append
(
'
target
'
url
)
;
const
third_party_window_url
=
new
URL
(
'
.
/
resources
/
partitioned
-
service
-
worker
-
third
-
party
-
window
.
html
'
+
'
?
'
+
search_param
get_host_info
(
)
.
HTTPS_NOTSAMESITE_ORIGIN
+
self
.
location
.
pathname
)
;
const
w
=
window
.
open
(
third_party_window_url
)
;
t
.
add_cleanup
(
(
)
=
>
w
.
close
(
)
)
;
}
return
message_promise
;
}
async
function
setup3pIframe
(
)
{
const
script
=
'
.
/
partitioned
-
storage
-
sw
.
js
'
;
const
scope
=
'
.
/
partitioned
-
'
;
var
reg
=
await
navigator
.
serviceWorker
.
register
(
script
{
scope
:
scope
}
)
;
var
installed_a_worker
=
true
;
await
new
Promise
(
resolve
=
>
{
var
worker
=
reg
.
active
;
if
(
worker
)
{
installed_a_worker
=
false
;
resolve
(
)
;
return
;
}
worker
=
reg
.
waiting
;
if
(
!
worker
)
{
worker
=
reg
.
installing
;
}
worker
.
addEventListener
(
'
statechange
'
evt
=
>
{
if
(
worker
.
state
=
=
=
'
activated
'
)
{
resolve
(
)
;
}
}
)
;
}
)
;
self
.
addEventListener
(
'
unload
'
async
(
)
=
>
{
if
(
!
installed_a_worker
)
{
return
;
}
await
reg
.
unregister
(
)
;
}
)
;
return
reg
;
}
