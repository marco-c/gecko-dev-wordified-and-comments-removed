let
greeting
=
'
%
GREETING_TEXT
%
'
;
if
(
!
greeting
)
greeting
=
'
the
worker
script
was
served
from
network
'
;
let
echo_output
;
const
import_scripts_msg
=
encodeURIComponent
(
'
importScripts
:
served
from
network
'
)
;
let
import_scripts_greeting
=
'
not
set
'
;
try
{
importScripts
(
import
-
scripts
-
echo
.
py
?
msg
=
{
import_scripts_msg
}
)
;
import_scripts_greeting
=
echo_output
;
}
catch
(
e
)
{
import_scripts_greeting
=
'
importScripts
failed
'
;
}
async
function
runTest
(
port
)
{
port
.
postMessage
(
greeting
)
;
port
.
postMessage
(
import_scripts_greeting
)
;
const
response
=
await
fetch
(
'
simple
.
txt
'
)
;
const
text
=
await
response
.
text
(
)
;
port
.
postMessage
(
'
fetch
(
)
:
'
+
text
)
;
port
.
postMessage
(
self
.
location
.
href
)
;
}
if
(
'
DedicatedWorkerGlobalScope
'
in
self
&
&
self
instanceof
DedicatedWorkerGlobalScope
)
{
runTest
(
self
)
;
}
else
if
(
'
SharedWorkerGlobalScope
'
in
self
&
&
self
instanceof
SharedWorkerGlobalScope
)
{
self
.
onconnect
=
function
(
e
)
{
const
port
=
e
.
ports
[
0
]
;
port
.
start
(
)
;
runTest
(
port
)
;
}
;
}
