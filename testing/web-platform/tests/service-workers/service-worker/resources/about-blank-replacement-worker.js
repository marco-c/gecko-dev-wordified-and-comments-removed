async
function
getClientByURL
(
url
)
{
let
list
=
await
clients
.
matchAll
(
)
;
return
list
.
find
(
client
=
>
client
.
url
=
=
=
url
)
;
}
async
function
pingPong
(
target
)
{
function
waitForPong
(
)
{
return
new
Promise
(
resolve
=
>
{
self
.
addEventListener
(
'
message
'
function
onMessage
(
evt
)
{
if
(
evt
.
data
.
type
=
=
=
'
PONG
'
)
{
resolve
(
evt
.
data
.
location
)
;
}
}
)
;
}
)
;
}
target
.
postMessage
(
{
type
:
'
PING
'
}
)
return
await
waitForPong
(
target
)
;
}
addEventListener
(
'
fetch
'
async
evt
=
>
{
let
url
=
new
URL
(
evt
.
request
.
url
)
;
if
(
!
url
.
searchParams
.
get
(
'
nested
'
)
)
{
return
;
}
evt
.
respondWith
(
async
function
(
)
{
const
client
=
await
getClientByURL
(
'
about
:
blank
'
)
;
if
(
!
client
)
{
return
new
Response
(
'
failure
:
could
not
find
about
:
blank
client
'
)
;
}
if
(
url
.
searchParams
.
get
(
'
ping
'
)
)
{
const
loc
=
await
pingPong
(
client
)
;
if
(
loc
!
=
=
'
about
:
blank
'
)
{
return
new
Response
(
failure
:
got
location
{
loc
}
expected
about
:
blank
)
;
}
}
return
new
Response
(
client
.
id
)
;
}
(
)
)
;
}
)
;
addEventListener
(
'
message
'
evt
=
>
{
if
(
evt
.
data
.
type
!
=
=
'
GET_CLIENT_ID
'
)
{
return
;
}
evt
.
waitUntil
(
async
function
(
)
{
let
url
=
new
URL
(
evt
.
data
.
url
)
;
let
client
=
await
getClientByURL
(
evt
.
data
.
url
)
;
if
(
!
client
)
{
evt
.
source
.
postMessage
(
{
type
:
'
GET_CLIENT_ID
'
result
:
failure
:
could
not
find
{
evt
.
data
.
url
}
client
}
)
;
return
;
}
if
(
url
.
searchParams
.
get
(
'
ping
'
)
)
{
let
loc
=
await
pingPong
(
client
)
;
if
(
loc
!
=
=
evt
.
data
.
url
)
{
evt
.
source
.
postMessage
(
{
type
:
'
GET_CLIENT_ID
'
result
:
failure
:
got
location
{
loc
}
expected
{
evt
.
data
.
url
}
}
)
;
return
;
}
}
evt
.
source
.
postMessage
(
{
type
:
'
GET_CLIENT_ID
'
result
:
client
.
id
}
)
;
}
(
)
)
;
}
)
;
