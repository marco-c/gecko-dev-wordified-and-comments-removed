let
reportResult
;
self
.
addEventListener
(
'
message
'
(
event
)
=
>
{
if
(
reportResult
)
{
event
.
source
.
postMessage
(
'
testAlreadyRunning
'
)
;
return
;
}
const
resultPromise
=
new
Promise
(
(
resolve
)
=
>
{
reportResult
=
resolve
;
event
.
source
.
postMessage
(
'
messageHandlerInitialized
'
)
;
}
)
;
event
.
waitUntil
(
resultPromise
.
then
(
result
=
>
{
reportResult
=
null
;
event
.
source
.
postMessage
(
result
)
;
}
)
)
;
}
)
;
function
tryRespondWith
(
event
)
{
try
{
event
.
respondWith
(
new
Response
(
)
)
;
reportResult
(
{
didThrow
:
false
}
)
;
}
catch
(
error
)
{
reportResult
(
{
didThrow
:
true
error
:
error
.
name
}
)
;
}
}
function
respondWithInTask
(
event
)
{
setTimeout
(
(
)
=
>
{
tryRespondWith
(
event
)
;
}
0
)
;
}
function
respondWithInMicrotask
(
event
)
{
Promise
.
resolve
(
)
.
then
(
(
)
=
>
{
tryRespondWith
(
event
)
;
}
)
;
}
self
.
addEventListener
(
'
fetch
'
function
(
event
)
{
const
path
=
new
URL
(
event
.
request
.
url
)
.
pathname
;
const
test
=
path
.
substring
(
path
.
lastIndexOf
(
'
/
'
)
+
1
)
;
if
(
test
=
=
'
respondWith
-
in
-
task
'
)
{
respondWithInTask
(
event
)
;
}
else
if
(
test
=
=
'
respondWith
-
in
-
microtask
'
)
{
respondWithInMicrotask
(
event
)
;
}
}
)
;
