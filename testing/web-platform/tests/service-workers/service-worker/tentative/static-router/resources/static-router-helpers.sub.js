const
get_info_from_worker
=
async
worker
=
>
{
const
promise
=
new
Promise
(
function
(
resolve
)
{
var
channel
=
new
MessageChannel
(
)
;
channel
.
port1
.
onmessage
=
function
(
msg
)
{
resolve
(
msg
)
;
}
;
worker
.
postMessage
(
{
port
:
channel
.
port2
}
[
channel
.
port2
]
)
;
}
)
;
const
message
=
await
promise
;
return
message
.
data
;
}
const
reset_info_in_worker
=
async
worker
=
>
{
const
promise
=
new
Promise
(
function
(
resolve
)
{
var
channel
=
new
MessageChannel
(
)
;
channel
.
port1
.
onmessage
=
function
(
msg
)
{
resolve
(
msg
)
;
}
;
worker
.
postMessage
(
{
port
:
channel
.
port2
reset
:
true
}
[
channel
.
port2
]
)
;
}
)
;
await
promise
;
}
const
registerAndActivate
=
async
(
test
ruleKey
swScript
)
=
>
{
if
(
!
swScript
)
{
swScript
=
'
resources
/
static
-
router
-
sw
.
js
'
}
const
swURL
=
{
swScript
}
?
key
=
{
ruleKey
}
;
const
swScope
=
'
resources
/
'
;
const
reg
=
await
service_worker_unregister_and_register
(
test
swURL
swScope
{
type
:
'
module
'
}
)
;
add_completion_callback
(
(
)
=
>
reg
.
unregister
(
)
)
;
const
worker
=
reg
.
installing
;
await
wait_for_state
(
test
worker
'
activated
'
)
;
return
worker
;
}
;
const
createIframe
=
async
(
t
url
)
=
>
{
const
iframe
=
await
with_iframe
(
url
)
;
t
.
add_cleanup
(
(
)
=
>
iframe
.
remove
(
)
)
;
return
iframe
;
}
;
function
iframeTest
(
url
ruleKey
callback
name
)
{
return
promise_test
(
async
t
=
>
{
const
worker
=
await
registerAndActivate
(
t
ruleKey
)
;
const
iframe
=
await
createIframe
(
t
url
)
;
await
callback
(
t
iframe
.
contentWindow
worker
)
;
}
name
)
;
}
;
function
randomString
(
)
{
let
result
=
"
"
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
result
+
=
String
.
fromCharCode
(
97
+
Math
.
floor
(
Math
.
random
(
)
*
26
)
)
;
}
return
result
;
}
