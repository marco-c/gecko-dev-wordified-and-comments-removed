idl_test
(
[
'
service
-
workers
'
]
[
'
dom
'
'
html
'
]
async
(
idl_array
t
)
=
>
{
self
.
cacheInstance
=
await
create_temporary_cache
(
t
)
;
idl_array
.
add_objects
(
{
CacheStorage
:
[
'
caches
'
]
Cache
:
[
'
self
.
cacheInstance
'
]
ServiceWorkerContainer
:
[
'
navigator
.
serviceWorker
'
]
}
)
;
if
(
self
.
GLOBAL
.
isWindow
(
)
)
{
idl_array
.
add_objects
(
{
ServiceWorkerRegistration
:
[
'
registrationInstance
'
]
ServiceWorker
:
[
'
registrationInstance
.
installing
'
]
}
)
;
const
scope
=
'
service
-
worker
/
resources
/
scope
/
idlharness
'
;
const
registration
=
await
service_worker_unregister_and_register
(
t
'
service
-
worker
/
resources
/
empty
-
worker
.
js
'
scope
)
;
t
.
add_cleanup
(
(
)
=
>
registration
.
unregister
(
)
)
;
self
.
registrationInstance
=
registration
;
}
else
if
(
self
.
ServiceWorkerGlobalScope
)
{
idl_array
.
add_objects
(
{
Clients
:
[
'
clients
'
]
ExtendableEvent
:
[
'
new
ExtendableEvent
(
"
type
"
)
'
]
FetchEvent
:
[
'
new
FetchEvent
(
"
type
"
)
'
]
ServiceWorkerGlobalScope
:
[
'
self
'
]
ServiceWorkerRegistration
:
[
'
registration
'
]
ServiceWorker
:
[
'
serviceWorker
'
]
}
)
;
}
}
)
;
