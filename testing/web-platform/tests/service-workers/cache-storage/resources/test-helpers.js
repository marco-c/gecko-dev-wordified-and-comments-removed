(
function
(
)
{
var
next_cache_index
=
1
;
function
create_temporary_cache
(
test
)
{
var
uniquifier
=
String
(
+
+
next_cache_index
)
;
var
cache_name
=
self
.
location
.
pathname
+
'
/
'
+
uniquifier
;
test
.
add_cleanup
(
function
(
)
{
self
.
caches
.
delete
(
cache_name
)
;
}
)
;
return
self
.
caches
.
delete
(
cache_name
)
.
then
(
function
(
)
{
return
self
.
caches
.
open
(
cache_name
)
;
}
)
;
}
self
.
create_temporary_cache
=
create_temporary_cache
;
}
)
(
)
;
function
cache_test
(
test_function
description
)
{
promise_test
(
function
(
test
)
{
return
create_temporary_cache
(
test
)
.
then
(
function
(
cache
)
{
return
test_function
(
cache
test
)
;
}
)
;
}
description
)
;
}
var
simple_entries
=
[
{
name
:
'
a
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
a
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
b
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
b
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
a_with_query
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
a
?
q
=
r
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
A
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
A
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
a_https
'
request
:
new
Request
(
'
https
:
/
/
example
.
com
/
a
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
a_org
'
request
:
new
Request
(
'
http
:
/
/
example
.
org
/
a
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
cat
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
cat
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
catmandu
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
catmandu
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
cat_num_lives
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
cat
?
lives
=
9
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
cat_in_the_hat
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
cat
/
in
/
the
/
hat
'
)
response
:
new
Response
(
'
'
)
}
{
name
:
'
non_2xx_response
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
non2xx
'
)
response
:
new
Response
(
'
'
{
status
:
404
statusText
:
'
nope
'
}
)
}
{
name
:
'
error_response
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
error
'
)
response
:
Response
.
error
(
)
}
]
;
var
vary_entries
=
[
{
name
:
'
vary_cookie_is_cookie
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
c
'
{
headers
:
{
'
Cookies
'
:
'
is
-
for
-
cookie
'
}
}
)
response
:
new
Response
(
'
'
{
headers
:
{
'
Vary
'
:
'
Cookies
'
}
}
)
}
{
name
:
'
vary_cookie_is_good
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
c
'
{
headers
:
{
'
Cookies
'
:
'
is
-
good
-
enough
-
for
-
me
'
}
}
)
response
:
new
Response
(
'
'
{
headers
:
{
'
Vary
'
:
'
Cookies
'
}
}
)
}
{
name
:
'
vary_cookie_absent
'
request
:
new
Request
(
'
http
:
/
/
example
.
com
/
c
'
)
response
:
new
Response
(
'
'
{
headers
:
{
'
Vary
'
:
'
Cookies
'
}
}
)
}
]
;
function
prepopulated_cache_test
(
entries
test_function
description
)
{
cache_test
(
function
(
cache
)
{
var
p
=
Promise
.
resolve
(
)
;
var
hash
=
{
}
;
return
Promise
.
all
(
entries
.
map
(
function
(
entry
)
{
hash
[
entry
.
name
]
=
entry
;
return
cache
.
put
(
entry
.
request
.
clone
(
)
entry
.
response
.
clone
(
)
)
.
catch
(
function
(
e
)
{
assert_unreached
(
'
Test
setup
failed
for
entry
'
+
entry
.
name
+
'
:
'
+
e
)
;
}
)
;
}
)
)
.
then
(
function
(
)
{
assert_equals
(
Object
.
keys
(
hash
)
.
length
entries
.
length
)
;
}
)
.
then
(
function
(
)
{
return
test_function
(
cache
hash
)
;
}
)
;
}
description
)
;
}
function
assert_header_equals
(
actual
expected
description
)
{
assert_class_string
(
actual
"
Headers
"
description
)
;
var
header
;
var
actual_headers
=
[
]
;
var
expected_headers
=
[
]
;
for
(
header
of
actual
)
actual_headers
.
push
(
header
[
0
]
+
"
:
"
+
header
[
1
]
)
;
for
(
header
of
expected
)
expected_headers
.
push
(
header
[
0
]
+
"
:
"
+
header
[
1
]
)
;
assert_array_equals
(
actual_headers
expected_headers
description
+
"
Headers
differ
.
"
)
;
}
function
assert_response_equals
(
actual
expected
description
)
{
assert_class_string
(
actual
"
Response
"
description
)
;
[
"
type
"
"
url
"
"
status
"
"
ok
"
"
statusText
"
]
.
forEach
(
function
(
attribute
)
{
assert_equals
(
actual
[
attribute
]
expected
[
attribute
]
description
+
"
Attributes
differ
:
"
+
attribute
+
"
.
"
)
;
}
)
;
assert_header_equals
(
actual
.
headers
expected
.
headers
description
)
;
}
function
assert_response_array_equivalent
(
actual
expected
description
)
{
assert_true
(
Array
.
isArray
(
actual
)
description
)
;
assert_equals
(
actual
.
length
expected
.
length
description
)
;
expected
.
forEach
(
function
(
expected_element
)
{
assert_response_in_array
(
expected_element
actual
description
)
;
}
)
;
}
function
assert_response_array_equals
(
actual
expected
description
)
{
assert_true
(
Array
.
isArray
(
actual
)
description
)
;
assert_equals
(
actual
.
length
expected
.
length
description
)
;
actual
.
forEach
(
function
(
value
index
)
{
assert_response_equals
(
value
expected
[
index
]
description
+
"
:
object
[
"
+
index
+
"
]
"
)
;
}
)
;
}
function
assert_response_in_array
(
actual
expected_array
description
)
{
assert_true
(
expected_array
.
some
(
function
(
element
)
{
try
{
assert_response_equals
(
actual
element
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
)
description
)
;
}
function
delete_all_caches
(
)
{
return
self
.
caches
.
keys
(
)
.
then
(
function
(
keys
)
{
return
Promise
.
all
(
keys
.
map
(
self
.
caches
.
delete
.
bind
(
self
.
caches
)
)
)
;
}
)
;
}
