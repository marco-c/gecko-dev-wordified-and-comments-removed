function
assert_promise_rejects
(
promise
code
description
)
{
return
promise
.
then
(
function
(
)
{
throw
'
assert_promise_rejects
:
'
+
description
+
'
Promise
did
not
reject
.
'
;
}
function
(
e
)
{
if
(
code
!
=
=
undefined
)
{
assert_throws
(
code
function
(
)
{
throw
e
;
}
description
)
;
}
}
)
;
}
function
assert_header_equals
(
actual
expected
description
)
{
assert_class_string
(
actual
"
Headers
"
description
)
;
var
header
actual_headers
=
[
]
expected_headers
=
[
]
;
for
(
header
of
actual
)
actual_headers
.
push
(
header
[
0
]
+
"
:
"
+
header
[
1
]
)
;
for
(
header
of
expected
)
expected_headers
.
push
(
header
[
0
]
+
"
:
"
+
header
[
1
]
)
;
assert_array_equals
(
actual_headers
expected_headers
description
+
"
Headers
differ
.
"
)
;
}
function
assert_response_equals
(
actual
expected
description
)
{
assert_class_string
(
actual
"
Response
"
description
)
;
[
"
type
"
"
url
"
"
status
"
"
ok
"
"
statusText
"
]
.
forEach
(
function
(
attribute
)
{
assert_equals
(
actual
[
attribute
]
expected
[
attribute
]
description
+
"
Attributes
differ
:
"
+
attribute
+
"
.
"
)
;
}
)
;
assert_header_equals
(
actual
.
headers
expected
.
headers
description
)
;
}
function
assert_response_array_equivalent
(
actual
expected
description
)
{
assert_true
(
Array
.
isArray
(
actual
)
description
)
;
assert_equals
(
actual
.
length
expected
.
length
description
)
;
expected
.
forEach
(
function
(
expected_element
)
{
assert_response_in_array
(
expected_element
actual
description
)
;
}
)
;
}
function
assert_response_array_equals
(
actual
expected
description
)
{
assert_true
(
Array
.
isArray
(
actual
)
description
)
;
assert_equals
(
actual
.
length
expected
.
length
description
)
;
actual
.
forEach
(
function
(
value
index
)
{
assert_response_equals
(
value
expected
[
index
]
description
+
"
:
object
[
"
+
index
+
"
]
"
)
;
}
)
;
}
function
assert_response_in_array
(
actual
expected_array
description
)
{
assert_true
(
expected_array
.
some
(
function
(
element
)
{
try
{
assert_response_equals
(
actual
element
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
)
description
)
;
}
