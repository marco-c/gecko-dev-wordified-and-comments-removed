if
(
self
.
importScripts
)
{
importScripts
(
'
/
resources
/
testharness
.
js
'
)
;
importScripts
(
'
.
.
/
resources
/
test
-
helpers
.
js
'
)
;
importScripts
(
'
/
common
/
utils
.
js
'
)
;
}
const
methodsToTest
=
{
put
:
async
(
cache
request
)
=
>
{
const
response
=
await
fetch
(
request
)
;
return
cache
.
put
(
request
response
)
;
}
add
:
async
(
cache
request
)
=
>
cache
.
add
(
request
)
addAll
:
async
(
cache
request
)
=
>
cache
.
addAll
(
[
request
]
)
}
;
for
(
const
method
in
methodsToTest
)
{
const
perform
=
methodsToTest
[
method
]
;
cache_test
(
async
(
cache
test
)
=
>
{
const
controller
=
new
AbortController
(
)
;
const
signal
=
controller
.
signal
;
controller
.
abort
(
)
;
const
request
=
new
Request
(
'
.
.
/
resources
/
simple
.
txt
'
{
signal
}
)
;
return
promise_rejects
(
test
'
AbortError
'
perform
(
cache
request
)
{
method
}
should
reject
)
;
}
{
method
}
(
)
on
an
already
-
aborted
request
should
reject
with
AbortError
)
;
cache_test
(
async
(
cache
test
)
=
>
{
const
controller
=
new
AbortController
(
)
;
const
signal
=
controller
.
signal
;
const
request
=
new
Request
(
'
.
.
/
resources
/
simple
.
txt
'
{
signal
}
)
;
const
promise
=
perform
(
cache
request
)
;
controller
.
abort
(
)
;
return
promise_rejects
(
test
'
AbortError
'
promise
{
method
}
should
reject
)
;
}
{
method
}
(
)
synchronously
followed
by
abort
should
reject
with
+
AbortError
)
;
cache_test
(
async
(
cache
test
)
=
>
{
const
controller
=
new
AbortController
(
)
;
const
signal
=
controller
.
signal
;
const
stateKey
=
token
(
)
;
const
abortKey
=
token
(
)
;
const
request
=
new
Request
(
.
.
/
.
.
/
.
.
/
fetch
/
api
/
resources
/
infinite
-
slow
-
response
.
py
?
stateKey
=
{
stateKey
}
&
abortKey
=
{
abortKey
}
{
signal
}
)
;
const
promise
=
perform
(
cache
request
)
;
let
opened
=
false
;
do
{
const
response
=
await
fetch
(
.
.
/
.
.
/
.
.
/
fetch
/
api
/
resources
/
stash
-
take
.
py
?
key
=
{
stateKey
}
)
;
const
body
=
await
response
.
json
(
)
;
if
(
body
=
=
=
'
open
'
)
opened
=
true
;
}
while
(
!
opened
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
250
)
)
;
controller
.
abort
(
)
;
await
promise_rejects
(
test
'
AbortError
'
promise
{
method
}
should
reject
)
;
return
fetch
(
.
.
/
.
.
/
.
.
/
fetch
/
api
/
resources
/
stash
-
put
.
py
?
key
=
{
abortKey
}
)
;
}
{
method
}
(
)
followed
by
abort
after
headers
received
should
reject
+
with
AbortError
)
;
}
done
(
)
;
