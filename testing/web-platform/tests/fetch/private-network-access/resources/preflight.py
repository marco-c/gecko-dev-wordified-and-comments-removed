_ACAO
=
(
"
Access
-
Control
-
Allow
-
Origin
"
"
*
"
)
_ACAPN
=
(
"
Access
-
Control
-
Allow
-
Private
-
Network
"
"
true
"
)
def
_get_response_headers
(
method
mode
)
:
  
acam
=
(
"
Access
-
Control
-
Allow
-
Methods
"
method
)
  
if
mode
=
=
b
"
cors
"
:
    
return
[
acam
_ACAO
]
  
if
mode
=
=
b
"
cors
+
pna
"
:
    
return
[
acam
_ACAO
_ACAPN
]
  
return
[
]
def
_get_uuid
(
request
)
:
  
return
request
.
GET
.
get
(
b
"
preflight
-
uuid
"
)
def
_handle_preflight_request
(
request
response
)
:
  
uuid
=
_get_uuid
(
request
)
  
if
uuid
is
None
:
    
raise
Exception
(
"
missing
preflight
-
uuid
param
from
preflight
URL
"
)
  
request
.
server
.
stash
.
put
(
uuid
"
"
)
  
method
=
request
.
headers
.
get
(
"
Access
-
Control
-
Request
-
Method
"
)
  
mode
=
request
.
GET
.
get
(
b
"
preflight
-
headers
"
)
  
headers
=
_get_response_headers
(
method
mode
)
  
return
(
headers
"
preflight
"
)
def
_handle_final_request
(
request
response
)
:
  
uuid
=
_get_uuid
(
request
)
  
if
uuid
is
not
None
and
request
.
server
.
stash
.
take
(
uuid
)
is
None
:
    
raise
Exception
(
"
no
matching
preflight
request
for
{
}
"
.
format
(
uuid
)
)
  
mode
=
request
.
GET
.
get
(
b
"
final
-
headers
"
)
  
headers
=
_get_response_headers
(
request
.
method
mode
)
  
return
(
headers
"
success
"
)
def
main
(
request
response
)
:
  
try
:
    
if
request
.
method
=
=
"
OPTIONS
"
:
      
return
_handle_preflight_request
(
request
response
)
    
else
:
      
return
_handle_final_request
(
request
response
)
  
except
BaseException
as
e
:
    
return
(
[
(
"
X
-
exception
"
str
(
e
)
)
]
"
"
)
