function
appendIframeWith
(
t
doc
func
)
{
return
new
Promise
(
resolve
=
>
{
const
child
=
doc
.
createElement
(
"
iframe
"
)
;
func
(
child
)
;
child
.
onload
=
(
)
=
>
{
resolve
(
child
)
;
}
;
doc
.
body
.
appendChild
(
child
)
;
t
.
add_cleanup
(
(
)
=
>
{
doc
.
body
.
removeChild
(
child
)
;
}
)
;
}
)
;
}
function
appendIframe
(
t
doc
src
)
{
return
appendIframeWith
(
t
doc
child
=
>
{
child
.
src
=
src
;
}
)
;
}
function
futureMessage
(
)
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
e
=
>
resolve
(
e
.
data
)
)
;
}
)
;
}
;
function
resolveUrl
(
url
options
)
{
const
result
=
new
URL
(
url
window
.
location
)
;
if
(
options
=
=
=
undefined
)
{
return
result
;
}
const
{
port
protocol
headers
searchParams
}
=
options
;
if
(
port
!
=
=
undefined
)
{
result
.
port
=
port
;
}
if
(
protocol
!
=
=
undefined
)
{
result
.
protocol
=
protocol
;
}
if
(
headers
!
=
=
undefined
)
{
const
pipes
=
[
]
;
for
(
key
in
headers
)
{
pipes
.
push
(
header
(
{
key
}
{
headers
[
key
]
}
)
)
;
}
result
.
searchParams
.
append
(
"
pipe
"
pipes
.
join
(
"
|
"
)
)
;
}
if
(
searchParams
!
=
=
undefined
)
{
for
(
key
in
searchParams
)
{
result
.
searchParams
.
append
(
key
searchParams
[
key
]
)
;
}
}
return
result
;
}
const
kFetchTestResult
=
{
success
:
{
ok
:
true
body
:
"
success
"
}
opaque
:
{
ok
:
false
type
:
"
opaque
"
body
:
"
"
}
failure
:
{
error
:
"
TypeError
:
Failed
to
fetch
"
}
}
async
function
fetchTest
(
t
{
source
target
fetchOptions
expected
}
)
{
const
sourceUrl
=
resolveUrl
(
"
resources
/
fetcher
.
html
"
source
)
;
const
iframe
=
await
appendIframe
(
t
document
sourceUrl
)
;
const
targetUrl
=
resolveUrl
(
"
resources
/
preflight
.
py
"
target
)
;
const
message
=
{
url
:
targetUrl
.
href
options
:
fetchOptions
}
;
const
reply
=
futureMessage
(
)
;
iframe
.
contentWindow
.
postMessage
(
message
"
*
"
)
;
const
{
error
ok
type
body
}
=
await
reply
;
assert_equals
(
error
expected
.
error
"
error
"
)
;
assert_equals
(
ok
expected
.
ok
"
response
ok
"
)
;
assert_equals
(
body
expected
.
body
"
response
body
"
)
;
if
(
expected
.
type
!
=
=
undefined
)
{
assert_equals
(
type
expected
.
type
"
response
type
"
)
;
}
}
const
kWebsocketTestResult
=
{
success
:
"
open
"
failure
:
"
close
:
code
1006
"
}
;
async
function
websocketTest
(
t
{
source
target
expected
}
)
{
const
sourceUrl
=
resolveUrl
(
"
resources
/
socket
-
opener
.
html
"
source
)
;
const
iframe
=
await
appendIframe
(
t
document
sourceUrl
)
;
const
targetUrl
=
resolveUrl
(
"
/
echo
"
target
)
;
const
reply
=
futureMessage
(
)
;
iframe
.
contentWindow
.
postMessage
(
targetUrl
.
href
"
*
"
)
;
assert_equals
(
await
reply
expected
)
;
}
