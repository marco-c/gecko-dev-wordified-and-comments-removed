setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
function
makePreflightTests
(
{
subsetKey
source
sourceDescription
targetServer
targetDescription
targetAddressSpace
expectation
expectedMessage
}
)
{
const
prefix
=
{
sourceDescription
}
to
{
targetDescription
}
with
{
targetAddressSpace
}
targetAddressSpace
option
:
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
targetAddressSpace
:
targetAddressSpace
}
expected
:
expectation
}
)
prefix
+
expectedMessage
+
"
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
method
:
"
PUT
"
targetAddressSpace
:
targetAddressSpace
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
PUT
"
+
expectedMessage
+
"
.
"
)
;
}
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
SUCCESS
expectedMessage
:
"
success
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
SUCCESS
expectedMessage
:
"
success
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_LOCAL
targetDescription
:
"
local
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
SUCCESS
expectedMessage
:
"
success
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PRIVATE
targetDescription
:
"
private
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
local
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
private
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTP_PUBLIC
targetDescription
:
"
public
"
targetAddressSpace
:
"
public
"
expectation
:
FetchTestResult
.
FAILURE
expectedMessage
:
"
failed
"
}
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTP_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
targetAddressSpace
:
"
private
"
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
-
address
to
private
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTP_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
method
:
"
PUT
"
targetAddressSpace
:
"
local
"
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
-
address
to
local
:
success
.
"
)
;
