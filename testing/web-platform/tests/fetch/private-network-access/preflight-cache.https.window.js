promise_test
(
async
t
=
>
{
let
uuid
=
token
(
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
}
"
private
to
local
:
success
.
"
)
;
promise_test
(
async
t
=
>
{
let
uuid
=
token
(
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
}
"
public
to
local
:
success
.
"
)
;
promise_test
(
async
t
=
>
{
let
uuid
=
token
(
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
await
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
singlePreflight
(
uuid
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
;
}
"
public
to
private
:
success
.
"
)
;
