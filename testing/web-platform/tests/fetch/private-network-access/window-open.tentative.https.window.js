setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
function
makePreflightTests
(
{
key
sourceName
sourceServer
sourceTreatAsPublic
targetName
targetServer
}
)
{
const
prefix
=
{
sourceName
}
to
{
targetName
}
:
;
const
source
=
{
server
:
sourceServer
treatAsPublic
:
sourceTreatAsPublic
}
;
promise_test_parallel
(
t
=
>
windowOpenTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
failure
(
)
}
}
expected
:
WindowOpenTestResult
.
FAILURE
}
)
prefix
+
"
failed
preflight
.
"
)
;
promise_test_parallel
(
t
=
>
windowOpenTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noCorsHeader
(
token
(
)
)
}
}
expected
:
WindowOpenTestResult
.
FAILURE
}
)
prefix
+
"
missing
CORS
headers
.
"
)
;
promise_test_parallel
(
t
=
>
windowOpenTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
}
}
expected
:
WindowOpenTestResult
.
FAILURE
}
)
prefix
+
"
missing
PNA
header
.
"
)
;
promise_test_parallel
(
t
=
>
windowOpenTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
navigation
(
token
(
)
)
}
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
prefix
+
"
success
.
"
)
;
}
subsetTestByKey
(
'
from
-
private
'
makePreflightTests
{
sourceServer
:
Server
.
HTTPS_PRIVATE
sourceName
:
'
private
'
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
'
from
-
public
'
makePreflightTests
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
"
public
"
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
"
local
"
}
)
;
subsetTestByKey
(
'
from
-
public
'
makePreflightTests
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
"
public
"
targetServer
:
Server
.
HTTPS_PRIVATE
targetName
:
"
private
"
}
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
makePreflightTests
{
sourceServer
:
Server
.
HTTPS_LOCAL
sourceTreatAsPublic
:
true
sourceName
:
"
treat
-
as
-
public
-
address
"
targetServer
:
Server
.
OTHER_HTTPS_LOCAL
targetName
:
"
local
"
}
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
'
treat
-
as
-
public
-
address
to
local
(
same
-
origin
)
:
no
preflight
required
.
'
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
makePreflightTests
{
sourceServer
:
Server
.
HTTPS_LOCAL
sourceTreatAsPublic
:
true
sourceName
:
'
treat
-
as
-
public
-
address
'
targetServer
:
Server
.
HTTPS_PRIVATE
targetName
:
'
private
'
}
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test_parallel
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
'
treat
-
as
-
public
-
address
to
public
:
no
preflight
required
.
'
)
;
promise_test_parallel
(
t
=
>
windowOpenTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
preflight
:
PreflightBehavior
.
optionalSuccess
(
token
(
)
)
}
}
expected
:
WindowOpenTestResult
.
SUCCESS
}
)
'
treat
-
as
-
public
-
address
to
local
:
optional
preflight
'
)
;
