setup
(
(
)
=
>
{
assert_false
(
window
.
isSecureContext
)
;
}
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
}
target
:
{
server
:
Server
.
HTTP_LOCAL
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
}
target
:
{
server
:
Server
.
HTTP_PRIVATE
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
}
target
:
{
server
:
Server
.
HTTP_PUBLIC
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PRIVATE
}
target
:
{
server
:
Server
.
HTTP_LOCAL
}
expected
:
IframeTestResult
.
FAILURE
}
)
"
private
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PRIVATE
}
target
:
{
server
:
Server
.
HTTP_PRIVATE
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PRIVATE
}
target
:
{
server
:
Server
.
HTTP_PUBLIC
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PUBLIC
}
target
:
{
server
:
Server
.
HTTP_LOCAL
}
expected
:
IframeTestResult
.
FAILURE
}
)
"
public
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PUBLIC
}
target
:
{
server
:
Server
.
HTTP_PRIVATE
}
expected
:
IframeTestResult
.
FAILURE
}
)
"
public
to
private
:
failure
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_PUBLIC
}
target
:
{
server
:
Server
.
HTTP_PUBLIC
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTP_LOCAL
}
expected
:
IframeTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
-
address
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTP_PRIVATE
}
expected
:
IframeTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
-
address
to
private
:
failure
.
"
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTP_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTP_PUBLIC
}
expected
:
IframeTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
-
address
to
public
:
no
preflight
required
.
"
)
;
