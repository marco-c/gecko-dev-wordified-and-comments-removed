setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
FAILURE
}
)
"
private
to
local
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
private
to
local
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
FAILURE
}
)
"
public
to
local
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
public
to
local
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
FAILURE
}
)
"
public
to
private
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
public
to
private
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
local
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
private
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
xhrTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
XhrTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
public
:
no
preflight
required
.
"
)
;
