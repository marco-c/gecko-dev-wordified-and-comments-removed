setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
function
makePreflightTests
(
{
sourceName
sourceServer
sourceTreatAsPublic
targetName
targetServer
}
)
{
const
prefix
=
{
sourceName
}
to
{
targetName
}
:
;
const
source
=
{
server
:
sourceServer
treatAsPublic
:
sourceTreatAsPublic
}
;
promise_test_parallel
(
t
=
>
fencedFrameTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
failure
(
)
}
}
expected
:
FrameTestResult
.
FAILURE
}
)
prefix
+
'
failed
preflight
.
'
)
;
promise_test_parallel
(
t
=
>
fencedFrameTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noCorsHeader
(
token
(
)
)
}
}
expected
:
FrameTestResult
.
FAILURE
}
)
prefix
+
'
missing
CORS
headers
.
'
)
;
promise_test_parallel
(
t
=
>
fencedFrameTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
}
}
expected
:
FrameTestResult
.
FAILURE
}
)
prefix
+
'
missing
PNA
header
.
'
)
;
promise_test_parallel
(
t
=
>
fencedFrameTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FrameTestResult
.
FAILURE
}
)
prefix
+
'
failed
because
fenced
frames
are
incompatible
with
PNA
.
'
)
;
}
makePreflightTests
(
{
sourceServer
:
Server
.
HTTPS_PRIVATE
sourceName
:
'
private
'
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
makePreflightTests
(
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
'
public
'
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
makePreflightTests
(
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
'
public
'
targetServer
:
Server
.
HTTPS_PRIVATE
targetName
:
'
private
'
}
)
;
makePreflightTests
(
{
sourceServer
:
Server
.
HTTPS_LOCAL
sourceTreatAsPublic
:
true
sourceName
:
'
treat
-
as
-
public
-
address
'
targetServer
:
Server
.
OTHER_HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
promise_test_parallel
(
t
=
>
fencedFrameTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
}
expected
:
FrameTestResult
.
FAILURE
}
)
'
treat
-
as
-
public
-
address
to
local
(
same
-
origin
)
:
fenced
frame
embedder
'
+
'
initiated
navigation
has
opaque
origin
.
'
)
;
makePreflightTests
(
{
sourceServer
:
Server
.
HTTPS_LOCAL
sourceTreatAsPublic
:
true
sourceName
:
'
treat
-
as
-
public
-
address
'
targetServer
:
Server
.
HTTPS_PRIVATE
targetName
:
'
private
'
}
)
;
