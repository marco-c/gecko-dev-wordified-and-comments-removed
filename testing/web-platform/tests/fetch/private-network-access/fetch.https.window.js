setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
}
target
:
{
port
:
kPorts
.
httpsLocal
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
}
target
:
{
port
:
kPorts
.
httpsPrivate
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
}
target
:
{
port
:
kPorts
.
httpsPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
baseline
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
}
target
:
{
port
:
kPorts
.
httpsPublic
searchParams
:
{
"
preflight
-
headers
"
:
"
cors
"
"
final
-
headers
"
:
"
cors
"
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
kFetchTestResult
.
failure
}
)
"
local
to
public
:
PUT
preflight
failure
.
"
)
;
subsetTestByKey
(
"
baseline
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
}
target
:
{
port
:
kPorts
.
httpsPublic
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
"
"
final
-
headers
"
:
"
cors
"
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
public
:
PUT
preflight
success
"
)
;
function
makePreflightTests
(
{
subsetKey
source
sourceDescription
targetPort
targetDescription
}
)
{
const
prefix
=
{
sourceDescription
}
to
{
targetDescription
}
:
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
failed
preflight
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
}
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
missing
CORS
headers
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
missing
PNA
header
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
missing
CORS
headers
on
final
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
prefix
+
"
success
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
kFetchTestResult
.
success
}
)
prefix
+
"
PUT
success
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
no
-
CORS
mode
failed
preflight
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
no
-
CORS
mode
missing
CORS
headers
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
"
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
kFetchTestResult
.
failure
}
)
prefix
+
"
no
-
CORS
mode
missing
PNA
header
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
port
:
targetPort
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
kFetchTestResult
.
opaque
}
)
prefix
+
"
no
-
CORS
mode
success
.
"
)
;
}
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
port
:
kPorts
.
httpsPrivate
}
sourceDescription
:
"
private
"
targetPort
:
kPorts
.
httpsLocal
targetDescription
:
"
local
"
}
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsPrivate
}
target
:
{
port
:
kPorts
.
httpsPrivate
}
expected
:
kFetchTestResult
.
success
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsPrivate
}
target
:
{
port
:
kPorts
.
httpsPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
port
:
kPorts
.
httpsPublic
}
sourceDescription
:
"
public
"
targetPort
:
kPorts
.
httpsLocal
targetDescription
:
"
local
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
port
:
kPorts
.
httpsPublic
}
sourceDescription
:
"
public
"
targetPort
:
kPorts
.
httpsPrivate
targetDescription
:
"
private
"
}
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsPublic
}
target
:
{
port
:
kPorts
.
httpsPublic
}
expected
:
kFetchTestResult
.
success
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpsLocal
}
expected
:
kFetchTestResult
.
failure
}
)
"
treat
-
as
-
public
-
address
to
local
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpsLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
treat
-
as
-
public
-
address
to
local
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpsPrivate
}
expected
:
kFetchTestResult
.
failure
}
)
"
treat
-
as
-
public
-
address
to
private
:
failed
preflight
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpsPrivate
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
treat
-
as
-
public
-
address
to
private
:
success
.
"
)
;
subsetTestByKey
(
"
from
-
treat
-
as
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpsLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpsPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
treat
-
as
-
public
-
address
to
public
:
no
preflight
required
.
"
)
;
