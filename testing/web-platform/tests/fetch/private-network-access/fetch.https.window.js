setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
local
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
baseline
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
preflight
:
PreflightBehavior
.
failure
(
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
local
to
public
:
PUT
preflight
failure
.
"
)
;
subsetTestByKey
(
"
baseline
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
public
:
PUT
preflight
success
.
"
)
;
function
makePreflightTests
(
{
subsetKey
source
sourceDescription
targetServer
targetDescription
}
)
{
const
prefix
=
{
sourceDescription
}
to
{
targetDescription
}
:
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
failure
(
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
failed
preflight
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noCorsHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
missing
CORS
headers
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
missing
PNA
header
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
missing
CORS
headers
on
final
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
prefix
+
"
success
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
fetchOptions
:
{
method
:
"
PUT
"
}
expected
:
FetchTestResult
.
SUCCESS
}
)
prefix
+
"
PUT
success
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
no
-
CORS
mode
failed
preflight
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noCorsHeader
(
token
(
)
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
no
-
CORS
mode
missing
CORS
headers
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
prefix
+
"
no
-
CORS
mode
missing
PNA
header
on
preflight
response
.
"
)
;
subsetTestByKey
(
subsetKey
promise_test
t
=
>
fetchTest
(
t
{
source
target
:
{
server
:
targetServer
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
prefix
+
"
no
-
CORS
mode
success
.
"
)
;
}
makePreflightTests
(
{
subsetKey
:
"
from
-
private
"
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
sourceDescription
:
"
private
"
targetServer
:
Server
.
HTTPS_LOCAL
targetDescription
:
"
local
"
}
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
subsetTestByKey
(
"
from
-
private
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTPS_LOCAL
targetDescription
:
"
local
"
}
)
;
makePreflightTests
(
{
subsetKey
:
"
from
-
public
"
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
sourceDescription
:
"
public
"
targetServer
:
Server
.
HTTPS_PRIVATE
targetDescription
:
"
private
"
}
)
;
subsetTestByKey
(
"
from
-
public
"
promise_test
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PUBLIC
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
