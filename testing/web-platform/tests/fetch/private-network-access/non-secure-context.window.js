setup
(
(
)
=
>
{
assert_false
(
window
.
isSecureContext
)
;
}
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
}
target
:
{
port
:
kPorts
.
httpLocal
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
local
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
}
target
:
{
port
:
kPorts
.
httpPrivate
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
private
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
}
target
:
{
port
:
kPorts
.
httpPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
local
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPrivate
}
target
:
{
port
:
kPorts
.
httpLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
private
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPrivate
}
target
:
{
port
:
kPorts
.
httpPrivate
}
expected
:
kFetchTestResult
.
success
}
)
"
private
to
private
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPrivate
}
target
:
{
port
:
kPorts
.
httpPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
private
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPublic
}
target
:
{
port
:
kPorts
.
httpLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
public
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPublic
}
target
:
{
port
:
kPorts
.
httpPrivate
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
public
to
private
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpPublic
}
target
:
{
port
:
kPorts
.
httpPublic
}
expected
:
kFetchTestResult
.
success
}
)
"
public
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
treat
-
as
-
public
-
address
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpPrivate
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
treat
-
as
-
public
-
address
to
private
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
headers
:
{
"
Content
-
Security
-
Policy
"
:
"
treat
-
as
-
public
-
address
"
}
}
target
:
{
port
:
kPorts
.
httpPublic
searchParams
:
{
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
success
}
)
"
treat
-
as
-
public
-
address
to
public
:
no
preflight
required
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsPrivate
}
target
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
private
https
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsPublic
}
target
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsLocal
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
public
https
to
local
:
failure
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsPublic
}
target
:
{
protocol
:
"
https
:
"
port
:
kPorts
.
httpsPrivate
searchParams
:
{
"
preflight
-
uuid
"
:
token
(
)
"
preflight
-
headers
"
:
"
cors
+
pna
"
"
final
-
headers
"
:
"
cors
"
}
}
expected
:
kFetchTestResult
.
failure
}
)
"
public
https
to
private
:
failure
.
"
)
;
promise_test
(
t
=
>
websocketTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
}
target
:
{
protocol
:
"
ws
:
"
port
:
kPorts
.
wsLocal
}
expected
:
kWebsocketTestResult
.
success
}
)
"
local
to
local
:
websocket
success
.
"
)
;
promise_test
(
t
=
>
websocketTest
(
t
{
source
:
{
port
:
kPorts
.
httpPrivate
}
target
:
{
protocol
:
"
ws
:
"
port
:
kPorts
.
wsLocal
}
expected
:
kWebsocketTestResult
.
failure
}
)
"
private
to
local
:
websocket
failure
.
"
)
;
promise_test
(
t
=
>
websocketTest
(
t
{
source
:
{
port
:
kPorts
.
httpPublic
}
target
:
{
protocol
:
"
ws
:
"
port
:
kPorts
.
wsLocal
}
expected
:
kWebsocketTestResult
.
failure
}
)
"
public
to
local
:
websocket
failure
.
"
)
;
promise_test
(
t
=
>
websocketTest
(
t
{
source
:
{
port
:
kPorts
.
httpLocal
treatAsPublicAddress
:
true
}
target
:
{
protocol
:
"
ws
:
"
port
:
kPorts
.
wsLocal
}
expected
:
kWebsocketTestResult
.
failure
}
)
"
treat
-
as
-
public
to
local
:
websocket
failure
.
"
)
;
