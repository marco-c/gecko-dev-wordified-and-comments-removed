import
os
import
uuid
import
hashlib
import
time
import
json
def
bytes_to_strings
(
d
)
:
  
if
not
isinstance
(
d
dict
)
:
    
if
isinstance
(
d
(
tuple
list
set
)
)
:
      
v
=
[
bytes_to_strings
(
x
)
for
x
in
d
]
      
return
v
    
else
:
      
if
isinstance
(
d
bytes
)
:
        
d
=
d
.
decode
(
)
      
return
d
  
result
=
{
}
  
for
k
v
in
d
.
items
(
)
:
    
if
isinstance
(
k
bytes
)
:
      
k
=
k
.
decode
(
)
    
if
isinstance
(
v
dict
)
:
      
v
=
bytes_to_strings
(
v
)
    
elif
isinstance
(
v
(
tuple
list
set
)
)
:
      
v
=
[
bytes_to_strings
(
x
)
for
x
in
v
]
    
elif
isinstance
(
v
bytes
)
:
      
v
=
v
.
decode
(
)
    
result
[
k
]
=
v
  
return
result
def
main
(
request
response
)
:
  
if
b
'
requireOPTIONS
'
in
request
.
GET
and
request
.
method
!
=
b
'
OPTIONS
'
:
      
return
  
if
b
'
key
'
in
request
.
GET
:
    
key
=
request
.
GET
[
b
'
key
'
]
  
elif
b
'
key
'
in
request
.
POST
:
    
key
=
request
.
POST
[
b
'
key
'
]
  
testId
=
hashlib
.
md5
(
key
)
.
hexdigest
(
)
  
if
b
'
retrieve
'
in
request
.
GET
:
    
recorded_headers
=
request
.
server
.
stash
.
take
(
testId
)
    
if
recorded_headers
is
None
:
      
return
(
204
[
]
b
'
'
)
    
return
(
200
[
]
recorded_headers
)
  
else
:
    
try
:
      
request
.
server
.
stash
.
put
(
testId
json
.
dumps
(
bytes_to_strings
(
request
.
headers
)
)
)
    
except
KeyError
:
      
pass
    
response
.
headers
.
set
(
b
"
Access
-
Control
-
Allow
-
Origin
"
b
"
*
"
)
    
response
.
headers
.
set
(
b
"
Cache
-
Control
"
b
"
no
-
cache
no
-
store
must
-
revalidate
"
)
    
response
.
headers
.
set
(
b
"
Pragma
"
b
"
no
-
cache
"
)
    
response
.
headers
.
set
(
b
"
Expires
"
b
"
0
"
)
    
if
b
"
mime
"
in
request
.
GET
:
        
response
.
headers
.
set
(
b
"
Content
-
Type
"
request
.
GET
.
first
(
b
"
mime
"
)
)
    
return
request
.
GET
.
first
(
b
"
body
"
request
.
POST
.
first
(
b
"
body
"
b
"
"
)
)
