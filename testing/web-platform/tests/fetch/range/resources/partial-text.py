"
"
"
This
generates
a
partial
response
for
a
100
-
byte
text
file
.
"
"
"
import
re
from
wptserve
.
utils
import
isomorphic_decode
def
main
(
request
response
)
:
    
total_length
=
int
(
request
.
GET
.
first
(
b
'
length
'
b
'
100
'
)
)
    
partial_code
=
int
(
request
.
GET
.
first
(
b
'
partial
'
b
'
206
'
)
)
    
content_type
=
request
.
GET
.
first
(
b
'
type
'
b
'
text
/
plain
'
)
    
range_header
=
request
.
headers
.
get
(
b
'
Range
'
b
'
'
)
    
if
not
range_header
:
        
to_send
=
'
'
.
zfill
(
total_length
)
        
response
.
headers
.
set
(
b
"
Content
-
Type
"
content_type
)
        
response
.
headers
.
set
(
b
"
Cache
-
Control
"
b
"
no
-
cache
"
)
        
response
.
headers
.
set
(
b
"
Content
-
Length
"
total_length
)
        
response
.
content
=
to_send
        
return
    
range_header_match
=
re
.
search
(
r
'
^
bytes
=
(
\
d
*
)
-
(
\
d
*
)
'
isomorphic_decode
(
range_header
)
)
    
start
end
=
range_header_match
.
groups
(
)
    
start
=
int
(
start
)
    
end
=
int
(
end
)
if
end
else
total_length
    
length
=
end
-
start
    
if
length
<
=
0
or
end
>
total_length
:
        
response
.
set_error
(
416
u
"
Range
Not
Satisfiable
"
)
        
response
.
headers
=
[
(
b
"
Content
-
Type
"
content_type
)
]
        
response
.
write
(
)
        
return
    
to_send
=
'
'
.
zfill
(
length
)
    
response
.
headers
.
set
(
b
"
Content
-
Type
"
content_type
)
    
response
.
headers
.
set
(
b
"
Accept
-
Ranges
"
b
"
bytes
"
)
    
response
.
headers
.
set
(
b
"
Cache
-
Control
"
b
"
no
-
cache
"
)
    
response
.
status
=
partial_code
    
content_range
=
b
"
bytes
%
d
-
%
d
/
%
d
"
%
(
start
end
total_length
)
    
response
.
headers
.
set
(
b
"
Content
-
Range
"
content_range
)
    
response
.
headers
.
set
(
b
"
Content
-
Length
"
length
)
    
response
.
content
=
to_send
