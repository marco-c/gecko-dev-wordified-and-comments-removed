var
log
=
[
]
;
function
clearLog
(
)
{
log
=
[
]
;
}
function
addLogEntry
(
name
args
)
{
log
.
push
(
[
name
.
.
.
args
]
)
;
}
var
loggingHandler
=
{
}
;
setup
(
function
(
)
{
for
(
let
prop
of
Object
.
getOwnPropertyNames
(
Reflect
)
)
{
loggingHandler
[
prop
]
=
function
(
.
.
.
args
)
{
addLogEntry
(
prop
args
)
;
return
Reflect
[
prop
]
(
.
.
.
args
)
;
}
}
}
)
;
test
(
function
(
)
{
var
h
=
new
Headers
(
)
;
assert_equals
(
[
.
.
.
h
]
.
length
0
)
;
}
"
Passing
nothing
to
Headers
constructor
"
)
;
test
(
function
(
)
{
var
h
=
new
Headers
(
undefined
)
;
assert_equals
(
[
.
.
.
h
]
.
length
0
)
;
}
"
Passing
undefined
to
Headers
constructor
"
)
;
test
(
function
(
)
{
assert_throws_js
(
TypeError
function
(
)
{
var
h
=
new
Headers
(
null
)
;
}
)
;
}
"
Passing
null
to
Headers
constructor
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
}
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
4
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
1
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
a
"
]
)
;
assert_true
(
h
.
has
(
"
a
"
)
)
;
assert_equals
(
h
.
get
(
"
a
"
)
"
b
"
)
;
}
"
Basic
operation
with
one
property
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
recordProto
=
{
c
:
"
d
"
}
;
var
record
=
Object
.
create
(
recordProto
{
a
:
{
value
:
"
b
"
enumerable
:
true
}
}
)
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
4
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
1
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
a
"
]
)
;
assert_true
(
h
.
has
(
"
a
"
)
)
;
assert_equals
(
h
.
get
(
"
a
"
)
"
b
"
)
;
}
"
Basic
operation
with
one
property
and
a
proto
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
c
:
"
d
"
}
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
6
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_array_equals
(
log
[
4
]
[
"
getOwnPropertyDescriptor
"
record
"
c
"
]
)
;
assert_array_equals
(
log
[
5
]
[
"
get
"
record
"
c
"
proxy
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
2
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
a
"
"
c
"
]
)
;
assert_true
(
h
.
has
(
"
a
"
)
)
;
assert_equals
(
h
.
get
(
"
a
"
)
"
b
"
)
;
assert_true
(
h
.
has
(
"
c
"
)
)
;
assert_equals
(
h
.
get
(
"
c
"
)
"
d
"
)
;
}
"
Correct
operation
ordering
with
two
properties
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
"
\
uFFFF
"
:
"
d
"
}
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
assert_throws_js
(
TypeError
function
(
)
{
var
h
=
new
Headers
(
proxy
)
;
}
)
;
assert_equals
(
log
.
length
5
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_array_equals
(
log
[
4
]
[
"
getOwnPropertyDescriptor
"
record
"
\
uFFFF
"
]
)
;
}
"
Correct
operation
ordering
with
two
properties
one
of
which
has
an
invalid
name
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
\
uFFFF
"
c
:
"
d
"
}
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
assert_throws_js
(
TypeError
function
(
)
{
var
h
=
new
Headers
(
proxy
)
;
}
)
;
assert_equals
(
log
.
length
4
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
}
"
Correct
operation
ordering
with
two
properties
one
of
which
has
an
invalid
value
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
}
;
Object
.
defineProperty
(
record
"
a
"
{
value
:
"
b
"
enumerable
:
false
}
)
;
Object
.
defineProperty
(
record
"
c
"
{
value
:
"
d
"
enumerable
:
true
}
)
;
Object
.
defineProperty
(
record
"
e
"
{
value
:
"
f
"
enumerable
:
false
}
)
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
6
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
getOwnPropertyDescriptor
"
record
"
c
"
]
)
;
assert_array_equals
(
log
[
4
]
[
"
get
"
record
"
c
"
proxy
]
)
;
assert_array_equals
(
log
[
5
]
[
"
getOwnPropertyDescriptor
"
record
"
e
"
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
1
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
c
"
]
)
;
assert_true
(
h
.
has
(
"
c
"
)
)
;
assert_equals
(
h
.
get
(
"
c
"
)
"
d
"
)
;
}
"
Correct
operation
ordering
with
non
-
enumerable
properties
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
c
:
"
d
"
e
:
"
f
"
}
;
var
lyingHandler
=
{
getOwnPropertyDescriptor
:
function
(
target
name
)
{
if
(
name
=
=
"
a
"
|
|
name
=
=
"
e
"
)
{
return
undefined
;
}
return
Reflect
.
getOwnPropertyDescriptor
(
target
name
)
;
}
}
;
var
lyingProxy
=
new
Proxy
(
record
lyingHandler
)
;
var
proxy
=
new
Proxy
(
lyingProxy
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
6
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
lyingProxy
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
lyingProxy
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
lyingProxy
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
getOwnPropertyDescriptor
"
lyingProxy
"
c
"
]
)
;
assert_array_equals
(
log
[
4
]
[
"
get
"
lyingProxy
"
c
"
proxy
]
)
;
assert_array_equals
(
log
[
5
]
[
"
getOwnPropertyDescriptor
"
lyingProxy
"
e
"
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
1
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
c
"
]
)
;
assert_true
(
h
.
has
(
"
c
"
)
)
;
assert_equals
(
h
.
get
(
"
c
"
)
"
d
"
)
;
}
"
Correct
operation
ordering
with
undefined
descriptors
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
c
:
"
d
"
}
;
var
lyingHandler
=
{
ownKeys
:
function
(
)
{
return
[
"
a
"
"
c
"
"
a
"
"
c
"
]
;
}
}
;
var
lyingProxy
=
new
Proxy
(
record
lyingHandler
)
;
var
proxy
=
new
Proxy
(
lyingProxy
loggingHandler
)
;
assert_throws_js
(
TypeError
function
(
)
{
var
h
=
new
Headers
(
proxy
)
;
}
)
;
assert_equals
(
log
.
length
2
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
lyingProxy
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
lyingProxy
]
)
;
}
"
Correct
operation
ordering
with
repeated
keys
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
"
b
"
[
Symbol
.
toStringTag
]
:
{
toString
:
function
(
)
{
addLogEntry
(
"
toString
"
[
this
]
)
;
return
"
nope
"
;
}
}
c
:
"
d
"
}
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
assert_throws_js
(
TypeError
function
(
)
{
var
h
=
new
Headers
(
proxy
)
;
}
)
;
assert_equals
(
log
.
length
7
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_array_equals
(
log
[
4
]
[
"
getOwnPropertyDescriptor
"
record
"
c
"
]
)
;
assert_array_equals
(
log
[
5
]
[
"
get
"
record
"
c
"
proxy
]
)
;
assert_array_equals
(
log
[
6
]
[
"
getOwnPropertyDescriptor
"
record
Symbol
.
toStringTag
]
)
;
}
"
Basic
operation
with
Symbol
keys
"
)
;
test
(
function
(
)
{
this
.
add_cleanup
(
clearLog
)
;
var
record
=
{
a
:
{
toString
:
function
(
)
{
addLogEntry
(
"
toString
"
[
this
]
)
;
return
"
b
"
;
}
}
[
Symbol
.
toStringTag
]
:
{
toString
:
function
(
)
{
addLogEntry
(
"
toString
"
[
this
]
)
;
return
"
nope
"
;
}
}
c
:
{
toString
:
function
(
)
{
addLogEntry
(
"
toString
"
[
this
]
)
;
return
"
d
"
;
}
}
}
;
Object
.
defineProperty
(
record
Symbol
.
toStringTag
{
enumerable
:
false
}
)
;
assert_array_equals
(
Reflect
.
ownKeys
(
record
)
[
"
a
"
"
c
"
Symbol
.
toStringTag
]
)
;
var
proxy
=
new
Proxy
(
record
loggingHandler
)
;
var
h
=
new
Headers
(
proxy
)
;
assert_equals
(
log
.
length
9
)
;
assert_array_equals
(
log
[
0
]
[
"
get
"
record
Symbol
.
iterator
proxy
]
)
;
assert_array_equals
(
log
[
1
]
[
"
ownKeys
"
record
]
)
;
assert_array_equals
(
log
[
2
]
[
"
getOwnPropertyDescriptor
"
record
"
a
"
]
)
;
assert_array_equals
(
log
[
3
]
[
"
get
"
record
"
a
"
proxy
]
)
;
assert_array_equals
(
log
[
4
]
[
"
toString
"
record
.
a
]
)
;
assert_array_equals
(
log
[
5
]
[
"
getOwnPropertyDescriptor
"
record
"
c
"
]
)
;
assert_array_equals
(
log
[
6
]
[
"
get
"
record
"
c
"
proxy
]
)
;
assert_array_equals
(
log
[
7
]
[
"
toString
"
record
.
c
]
)
;
assert_array_equals
(
log
[
8
]
[
"
getOwnPropertyDescriptor
"
record
Symbol
.
toStringTag
]
)
;
assert_equals
(
[
.
.
.
h
]
.
length
2
)
;
assert_array_equals
(
[
.
.
.
h
.
keys
(
)
]
[
"
a
"
"
c
"
]
)
;
assert_true
(
h
.
has
(
"
a
"
)
)
;
assert_equals
(
h
.
get
(
"
a
"
)
"
b
"
)
;
assert_true
(
h
.
has
(
"
c
"
)
)
;
assert_equals
(
h
.
get
(
"
c
"
)
"
d
"
)
;
}
"
Operation
with
non
-
enumerable
Symbol
keys
"
)
;
