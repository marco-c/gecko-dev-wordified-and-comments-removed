'
use
strict
'
;
const
{
HTTP_NOTSAMESITE_ORIGIN
HTTP_REMOTE_ORIGIN
HTTP_REMOTE_ORIGIN_WITH_DIFFERENT_PORT
}
=
get_host_info
(
)
;
promise_test
(
async
(
test
)
=
>
{
const
token1
=
token
(
)
;
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
src
=
getKeepAliveAndRedirectIframeUrl
(
token1
'
'
'
'
false
)
;
document
.
body
.
appendChild
(
iframe
)
;
await
iframeLoaded
(
iframe
)
;
assert_equals
(
await
getTokenFromMessage
(
)
token1
)
;
iframe
.
remove
(
)
;
assertStashedTokenAsync
(
'
same
-
origin
redirect
'
token1
)
;
}
'
same
-
origin
redirect
;
setting
up
'
)
;
promise_test
(
async
(
test
)
=
>
{
const
token1
=
token
(
)
;
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
src
=
getKeepAliveAndRedirectIframeUrl
(
token1
HTTP_REMOTE_ORIGIN
HTTP_REMOTE_ORIGIN_WITH_DIFFERENT_PORT
false
)
;
document
.
body
.
appendChild
(
iframe
)
;
await
iframeLoaded
(
iframe
)
;
assert_equals
(
await
getTokenFromMessage
(
)
token1
)
;
iframe
.
remove
(
)
;
assertStashedTokenAsync
(
'
cross
-
origin
redirect
'
token1
)
;
}
'
cross
-
origin
redirect
;
setting
up
'
)
;
promise_test
(
async
(
test
)
=
>
{
const
token1
=
token
(
)
;
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
src
=
getKeepAliveAndRedirectIframeUrl
(
token1
HTTP_REMOTE_ORIGIN
HTTP_REMOTE_ORIGIN_WITH_DIFFERENT_PORT
true
)
;
document
.
body
.
appendChild
(
iframe
)
;
await
iframeLoaded
(
iframe
)
;
assert_equals
(
await
getTokenFromMessage
(
)
token1
)
;
iframe
.
remove
(
)
;
assertStashedTokenAsync
(
'
cross
-
origin
redirect
with
preflight
'
token1
)
;
}
'
cross
-
origin
redirect
with
preflight
;
setting
up
'
)
;
