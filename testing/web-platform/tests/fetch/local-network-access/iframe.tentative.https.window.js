setup
(
(
)
=
>
{
assert_true
(
window
.
isSecureContext
)
;
}
)
;
subsetTestByKey
(
'
from
-
loopback
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOOPBACK
target
:
Server
.
HTTPS_LOOPBACK
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
loopback
to
loopback
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
loopback
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOOPBACK
target
:
Server
.
HTTPS_LOCAL
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
loopback
to
local
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
loopback
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOOPBACK
target
:
Server
.
HTTPS_PUBLIC
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
loopback
to
public
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
local
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOCAL
target
:
Server
.
HTTPS_LOOPBACK
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
local
to
loopback
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
local
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOCAL
target
:
Server
.
HTTPS_LOCAL
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
local
to
local
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
local
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTP_LOCAL
target
:
Server
.
HTTPS_PUBLIC
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
local
to
public
:
no
permission
required
.
'
)
;
function
makePermissionTests
(
{
key
sourceName
sourceServer
sourceTreatAsPublic
targetName
targetServer
}
)
{
const
prefix
=
{
sourceName
}
to
{
targetName
}
:
;
const
source
=
{
server
:
sourceServer
treatAsPublic
:
sourceTreatAsPublic
}
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
target
:
{
server
:
targetServer
}
expected
:
NavigationTestResult
.
FAILURE
permission
:
'
denied
'
}
)
prefix
+
'
permission
denied
.
'
)
;
promise_test
(
t
=
>
iframeTest
(
t
{
source
target
:
{
server
:
targetServer
}
expected
:
NavigationTestResult
.
SUCCESS
permission
:
'
granted
'
}
)
prefix
+
'
success
.
'
)
;
}
subsetTestByKey
(
'
from
-
public
'
makePermissionTests
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
'
public
'
targetServer
:
Server
.
HTTPS_LOOPBACK
targetName
:
'
loopback
'
}
)
;
subsetTestByKey
(
'
from
-
public
'
makePermissionTests
{
sourceServer
:
Server
.
HTTPS_PUBLIC
sourceName
:
'
public
'
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
subsetTestByKey
(
'
from
-
public
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
Server
.
HTTPS_PUBLIC
target
:
Server
.
HTTPS_PUBLIC
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
public
to
public
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
makePermissionTests
{
sourceServer
:
Server
.
HTTPS_LOOPBACK
sourceTreatAsPublic
:
true
sourceName
:
'
treat
-
as
-
public
-
address
'
targetServer
:
Server
.
OTHER_HTTPS_LOOPBACK
targetName
:
'
loopback
'
}
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOOPBACK
treatAsPublic
:
true
}
target
:
Server
.
HTTPS_LOOPBACK
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
treat
-
as
-
public
-
address
to
local
(
same
-
origin
)
:
no
permission
required
.
'
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
makePermissionTests
{
sourceServer
:
Server
.
HTTPS_LOOPBACK
sourceTreatAsPublic
:
true
sourceName
:
'
treat
-
as
-
public
-
address
'
targetServer
:
Server
.
HTTPS_LOCAL
targetName
:
'
local
'
}
)
;
subsetTestByKey
(
'
from
-
treat
-
as
-
public
'
promise_test
t
=
>
iframeTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOOPBACK
treatAsPublic
:
true
}
target
:
Server
.
HTTPS_PUBLIC
expected
:
NavigationTestResult
.
SUCCESS
}
)
'
treat
-
as
-
public
-
address
to
public
:
no
permission
required
.
'
)
;
