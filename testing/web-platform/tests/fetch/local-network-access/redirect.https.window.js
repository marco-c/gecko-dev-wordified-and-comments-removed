promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PUBLIC
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
private
to
public
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
local
to
private
to
local
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
private
to
private
to
local
:
failed
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
private
to
private
to
local
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
private
to
private
to
local
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
private
to
local
to
private
:
failed
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
private
to
local
to
private
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PRIVATE
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
private
to
local
to
private
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
public
to
private
to
local
:
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
public
to
private
to
local
:
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
public
to
private
to
local
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_PUBLIC
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
public
to
private
to
local
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
to
private
:
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
to
private
:
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
local
to
private
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
to
private
:
no
-
cors
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
to
private
:
no
-
cors
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
treat
-
as
-
public
to
local
to
private
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
(
same
-
origin
)
to
private
:
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
local
(
same
-
origin
)
to
private
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
local
(
same
-
origin
)
to
private
:
no
-
cors
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
treat
-
as
-
public
to
local
(
same
-
origin
)
to
private
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
:
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
:
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
private
to
local
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
:
no
-
cors
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
:
no
-
cors
failed
second
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
OTHER_HTTPS_LOCAL
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
}
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
treat
-
as
-
public
to
private
to
local
:
no
-
cors
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
noPnaHeader
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
(
same
-
origin
)
:
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
behavior
:
{
response
:
ResponseBehavior
.
allowCrossOrigin
(
)
}
}
)
}
}
expected
:
FetchTestResult
.
SUCCESS
}
)
"
treat
-
as
-
public
to
private
to
local
(
same
-
origin
)
:
success
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
FAILURE
}
)
"
treat
-
as
-
public
to
private
to
local
(
same
-
origin
)
:
no
-
cors
failed
first
preflight
.
"
)
;
promise_test
(
t
=
>
fetchTest
(
t
{
source
:
{
server
:
Server
.
HTTPS_LOCAL
treatAsPublic
:
true
}
target
:
{
server
:
Server
.
HTTPS_PRIVATE
behavior
:
{
preflight
:
PreflightBehavior
.
success
(
token
(
)
)
redirect
:
preflightUrl
(
{
server
:
Server
.
HTTPS_LOCAL
}
)
}
}
fetchOptions
:
{
mode
:
"
no
-
cors
"
}
expected
:
FetchTestResult
.
OPAQUE
}
)
"
treat
-
as
-
public
to
private
to
local
(
same
-
origin
)
:
no
-
cors
success
.
"
)
;
