import
os
import
random
from
wptserve
.
utils
import
isomorphic_encode
_ACAO
=
(
"
Access
-
Control
-
Allow
-
Origin
"
"
*
"
)
_ACAH
=
(
"
Access
-
Control
-
Allow
-
Headers
"
"
Service
-
Worker
"
)
def
_get_response_headers
(
method
mode
origin
)
:
  
acam
=
(
"
Access
-
Control
-
Allow
-
Methods
"
method
)
  
if
mode
=
=
b
"
cors
"
:
    
return
[
acam
_ACAO
]
  
if
mode
=
=
b
"
cors
+
sw
"
:
    
return
[
acam
_ACAO
_ACAH
]
  
if
mode
=
=
b
"
navigation
"
:
    
return
[
        
acam
        
(
"
Access
-
Control
-
Allow
-
Origin
"
origin
)
        
(
"
Access
-
Control
-
Allow
-
Credentials
"
"
true
"
)
    
]
  
return
[
]
def
_is_loaded_in_fenced_frame
(
request
)
:
  
return
request
.
GET
.
get
(
b
"
is
-
loaded
-
in
-
fenced
-
frame
"
)
def
_final_response_body
(
request
)
:
  
file_name
=
None
  
if
file_name
is
None
:
    
file_name
=
request
.
GET
.
get
(
b
"
file
"
)
  
if
file_name
is
None
:
    
return
request
.
GET
.
get
(
b
"
body
"
)
or
"
success
"
  
prefix
=
b
"
"
  
if
request
.
GET
.
get
(
b
"
random
-
js
-
prefix
"
)
:
    
value
=
random
.
randint
(
0
1000000000
)
    
prefix
=
isomorphic_encode
(
"
/
/
Random
value
:
{
}
\
n
\
n
"
.
format
(
value
)
)
  
path
=
os
.
path
.
join
(
os
.
path
.
dirname
(
isomorphic_encode
(
__file__
)
)
file_name
)
  
with
open
(
path
'
rb
'
)
as
f
:
    
contents
=
f
.
read
(
)
  
return
prefix
+
contents
def
_handle_final_request
(
request
response
)
:
  
mode
=
request
.
GET
.
get
(
b
"
final
-
headers
"
)
  
origin
=
request
.
headers
.
get
(
"
Origin
"
)
  
headers
=
_get_response_headers
(
request
.
method
mode
origin
)
  
redirect
=
request
.
GET
.
get
(
b
"
redirect
"
)
  
if
redirect
is
not
None
:
    
headers
.
append
(
(
"
Location
"
redirect
)
)
    
return
(
301
headers
b
"
"
)
  
mime_type
=
request
.
GET
.
get
(
b
"
mime
-
type
"
)
  
if
mime_type
is
not
None
:
    
headers
.
append
(
(
"
Content
-
Type
"
mime_type
)
)
  
if
_is_loaded_in_fenced_frame
(
request
)
:
    
headers
.
append
(
(
"
Supports
-
Loading
-
Mode
"
"
fenced
-
frame
"
)
)
  
body
=
_final_response_body
(
request
)
  
return
(
headers
body
)
def
main
(
request
response
)
:
  
try
:
    
return
_handle_final_request
(
request
response
)
  
except
BaseException
as
e
:
    
return
(
500
[
(
"
X
-
exception
"
str
(
e
)
)
]
"
exception
:
{
}
"
.
format
(
e
)
)
