'
use
strict
'
;
const
kQuotaPerOrigin
=
64
*
1024
;
const
{
ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
function
fetchLaterPostTest
(
body
description
)
{
test
(
(
)
=
>
{
const
controller
=
new
AbortController
(
)
;
const
result
=
fetchLater
(
'
/
fetch
-
later
'
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
body
}
)
;
assert_false
(
result
.
activated
)
;
controller
.
abort
(
)
;
}
description
)
;
}
for
(
const
[
dataType
skipCharset
]
of
Object
.
entries
(
BeaconDataTypeToSkipCharset
)
)
{
fetchLaterPostTest
(
makeBeaconData
(
generateSequentialData
(
0
1024
skipCharset
)
dataType
)
A
fetchLater
(
)
call
accept
small
data
in
POST
request
of
{
dataType
}
.
)
;
}
for
(
const
dataType
in
BeaconDataType
)
{
if
(
dataType
!
=
=
BeaconDataType
.
FormData
&
&
dataType
!
=
=
BeaconDataType
.
URLSearchParams
)
{
fetchLaterPostTest
(
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
)
dataType
)
A
single
fetchLater
(
)
call
takes
up
the
per
-
origin
quota
for
its
+
body
of
{
dataType
}
.
)
;
}
}
for
(
const
dataType
in
BeaconDataType
)
{
test
(
(
)
=
>
{
assert_throws_js
(
TypeError
(
)
=
>
fetchLater
(
'
/
'
{
method
:
'
POST
'
body
:
'
'
}
)
)
;
}
A
single
fetchLater
(
)
call
does
not
accept
empty
data
in
POST
request
+
of
{
dataType
}
.
)
;
}
for
(
const
dataType
in
BeaconDataType
)
{
test
(
(
)
=
>
{
assert_throws_dom
(
'
QuotaExceededError
'
(
)
=
>
fetchLater
(
'
/
fetch
-
later
'
{
method
:
'
POST
'
body
:
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
+
1
)
dataType
)
}
)
)
;
}
A
single
fetchLater
(
)
call
is
not
allowed
to
exceed
per
-
origin
quota
+
for
its
body
of
{
dataType
}
.
)
;
}
for
(
const
dataType
in
BeaconDataType
)
{
test
(
(
)
=
>
{
const
controller
=
new
AbortController
(
)
;
fetchLater
(
'
/
fetch
-
later
'
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
/
2
)
dataType
)
}
)
;
assert_throws_dom
(
'
QuotaExceededError
'
(
)
=
>
{
fetchLater
(
'
/
fetch
-
later
'
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
/
2
+
1
)
dataType
)
}
)
;
}
)
;
controller
.
abort
(
)
;
}
The
2nd
fetchLater
(
)
call
is
not
allowed
to
exceed
per
-
origin
quota
+
for
its
body
of
{
dataType
}
.
)
;
}
for
(
const
dataType
in
BeaconDataType
)
{
test
(
(
)
=
>
{
const
controller
=
new
AbortController
(
)
;
fetchLater
(
'
/
fetch
-
later
'
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
/
2
)
dataType
)
}
)
;
fetchLater
(
{
HTTPS_NOTSAMESITE_ORIGIN
}
/
fetch
-
later
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
kQuotaPerOrigin
/
2
+
1
)
dataType
)
}
)
;
controller
.
abort
(
)
;
}
The
2nd
fetchLater
(
)
call
to
another
origin
does
not
exceed
per
-
origin
+
quota
for
its
body
of
{
dataType
}
.
)
;
}
