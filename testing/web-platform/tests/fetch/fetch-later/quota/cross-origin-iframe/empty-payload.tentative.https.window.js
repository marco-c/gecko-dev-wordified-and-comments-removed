'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
for
(
const
dataType
in
BeaconDataType
)
{
if
(
dataType
=
=
=
BeaconDataType
.
FormData
)
{
parallelPromiseTest
(
async
_
=
>
await
loadFetchLaterIframe
(
HTTPS_NOTSAMESITE_ORIGIN
{
activateAfter
:
0
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
0
}
)
fetchLater
(
)
accepts
a
non
-
empty
POST
request
body
of
{
dataType
}
in
a
default
cross
-
origin
iframe
.
)
;
continue
;
}
parallelPromiseTest
(
async
_
=
>
await
loadFetchLaterIframe
(
HTTPS_NOTSAMESITE_ORIGIN
{
activateAfter
:
0
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
0
expect
:
new
FetchLaterIframeExpectation
(
FetchLaterExpectationType
.
ERROR_JS
TypeError
)
}
)
fetchLater
(
)
does
not
accept
empty
POST
request
body
of
{
dataType
}
in
a
default
cross
-
origin
iframe
.
)
;
}
