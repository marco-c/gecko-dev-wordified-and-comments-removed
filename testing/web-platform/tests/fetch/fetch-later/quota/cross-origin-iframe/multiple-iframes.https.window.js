'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
const
dataType
=
BeaconDataType
.
String
;
const
headers
=
new
Headers
(
{
'
Content
-
Type
'
:
'
text
/
plain
;
charset
=
UTF
-
8
'
}
)
;
promise_test
(
async
_
=
>
{
const
controller
=
new
AbortController
(
)
;
const
uuid
=
token
(
)
;
const
requestUrl
=
generateSetBeaconURL
(
uuid
{
host
:
HTTPS_ORIGIN
}
)
;
await
loadFetchLaterIframe
(
HTTPS_NOTSAMESITE_ORIGIN
{
targetUrl
:
requestUrl
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
getRemainingQuota
(
QUOTA_PER_CROSS_ORIGIN
requestUrl
headers
)
referrer
:
'
'
}
)
;
await
loadFetchLaterIframe
(
HTTPS_NOTSAMESITE_ORIGIN
{
targetUrl
:
requestUrl
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
getRemainingQuota
(
QUOTA_PER_CROSS_ORIGIN
requestUrl
headers
)
referrer
:
'
'
}
)
;
fetchLater
(
requestUrl
{
method
:
'
POST
'
body
:
generatePayload
(
QUOTA_PER_ORIGIN
dataType
)
signal
:
controller
.
signal
body
:
generatePayload
(
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
dataType
)
referrer
:
'
'
}
)
;
document
.
body
.
innerHTML
=
'
'
;
controller
.
abort
(
)
;
}
fetchLater
(
)
request
quota
are
delegated
to
cross
-
origin
iframes
and
not
shared
even
if
they
are
same
origin
.
)
;
