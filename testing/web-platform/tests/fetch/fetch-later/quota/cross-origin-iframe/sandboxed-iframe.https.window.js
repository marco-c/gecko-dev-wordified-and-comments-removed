'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
const
dataType
=
BeaconDataType
.
String
;
const
headers
=
new
Headers
(
{
'
Content
-
Type
'
:
'
text
/
plain
;
charset
=
UTF
-
8
'
}
)
;
const
requestUrl
=
{
HTTPS_ORIGIN
}
/
;
const
quota
=
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
;
const
SMALL_REQUEST_BODY_SIZE
=
4
*
1024
;
promise_test
(
async
test
=
>
{
const
controller
=
new
AbortController
(
)
;
test
.
add_cleanup
(
(
)
=
>
controller
.
abort
(
)
)
;
fetchLater
(
requestUrl
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
quota
)
dataType
)
referrer
:
'
'
}
)
;
await
loadFetchLaterIframe
(
HTTPS_ORIGIN
{
targetUrl
:
requestUrl
activateAfter
:
0
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
SMALL_REQUEST_BODY_SIZE
referrer
:
'
'
sandbox
:
'
allow
-
scripts
'
}
)
;
}
A
sandboxed
iframe
(
without
allow
-
same
-
origin
)
should
be
treated
as
cross
-
origin
and
have
its
own
minimal
quota
.
)
;
