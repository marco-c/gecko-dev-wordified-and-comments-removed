'
use
strict
'
;
const
{
HTTPS_ORIGIN
}
=
get_host_info
(
)
;
const
dataType
=
BeaconDataType
.
String
;
const
headers
=
new
Headers
(
{
'
Content
-
Type
'
:
'
text
/
plain
;
charset
=
UTF
-
8
'
}
)
;
promise_test
(
async
_
=
>
{
const
uuid
=
token
(
)
;
const
requestUrl
=
generateSetBeaconURL
(
uuid
{
host
:
HTTPS_ORIGIN
}
)
;
await
expectFetchLater
(
{
activateAfter
:
0
method
:
'
POST
'
bodySize
:
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
}
{
targetUrl
:
requestUrl
uuid
:
uuid
}
)
;
}
fetchLater
(
)
accepts
max
payload
in
a
POST
request
body
of
{
dataType
}
.
)
;
test
(
_
=
>
{
const
uuid
=
token
(
)
;
const
requestUrl
=
generateSetBeaconURL
(
uuid
{
host
:
HTTPS_ORIGIN
}
)
;
assert_throws_dom
(
'
QuotaExceededError
'
(
)
=
>
fetchLater
(
requestUrl
{
activateAfter
:
0
method
:
'
POST
'
body
:
generatePayload
(
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
+
1
dataType
)
}
)
)
;
}
fetchLater
(
)
rejects
max
+
1
payload
in
a
POST
request
body
of
{
dataType
}
.
)
;
