'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
const
dataType
=
BeaconDataType
.
String
;
const
headers
=
new
Headers
(
{
'
Content
-
Type
'
:
'
text
/
plain
;
charset
=
UTF
-
8
'
}
)
;
const
requestUrl
=
{
HTTPS_ORIGIN
}
/
;
const
quota
=
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
;
const
halfQuota
=
Math
.
ceil
(
quota
/
2
)
;
test
(
(
)
=
>
{
const
controller
=
new
AbortController
(
)
;
fetchLater
(
requestUrl
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
halfQuota
)
dataType
)
referrer
:
'
'
}
)
;
assert_throws_quotaexceedederror
(
(
)
=
>
{
fetchLater
(
requestUrl
{
method
:
'
POST
'
signal
:
controller
.
signal
body
:
makeBeaconData
(
generatePayload
(
quota
)
dataType
)
referrer
:
'
'
}
)
;
}
null
null
)
;
fetchLater
(
requestUrl
{
method
:
'
GET
'
signal
:
controller
.
signal
referrer
:
'
'
}
)
;
controller
.
abort
(
)
;
}
The
2nd
fetchLater
(
same
-
origin
)
call
in
the
top
-
level
document
is
not
allowed
to
exceed
per
-
origin
quota
for
its
POST
body
of
{
dataType
}
.
)
;
