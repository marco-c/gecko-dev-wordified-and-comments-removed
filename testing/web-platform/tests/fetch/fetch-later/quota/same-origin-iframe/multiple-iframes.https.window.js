'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
const
dataType
=
BeaconDataType
.
String
;
const
headers
=
new
Headers
(
{
'
Content
-
Type
'
:
'
text
/
plain
;
charset
=
UTF
-
8
'
}
)
;
promise_test
(
async
_
=
>
{
const
uuid
=
token
(
)
;
const
requestUrl
=
generateSetBeaconURL
(
uuid
{
host
:
HTTPS_ORIGIN
}
)
;
await
loadFetchLaterIframe
(
HTTPS_ORIGIN
{
targetUrl
:
requestUrl
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
referrer
:
'
'
}
)
;
await
loadFetchLaterIframe
(
HTTPS_ORIGIN
{
targetUrl
:
requestUrl
method
:
'
POST
'
bodyType
:
dataType
bodySize
:
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
referrer
:
'
'
expect
:
new
FetchLaterIframeExpectation
(
FetchLaterExpectationType
.
ERROR_DOM
'
QuotaExceededError
'
)
}
)
;
assert_throws_quotaexceedederror
(
(
)
=
>
fetchLater
(
requestUrl
{
method
:
'
POST
'
body
:
generatePayload
(
getRemainingQuota
(
QUOTA_PER_ORIGIN
requestUrl
headers
)
dataType
)
referrer
:
'
'
}
)
null
null
)
;
for
(
const
element
of
document
.
querySelectorAll
(
'
iframe
'
)
)
{
element
.
remove
(
)
;
}
}
fetchLater
(
)
request
quota
are
shared
by
same
-
origin
iframes
and
root
.
)
;
