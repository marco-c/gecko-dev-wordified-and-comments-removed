'
use
strict
'
;
const
{
HTTPS_ORIGIN
HTTPS_NOTSAMESITE_ORIGIN
}
=
get_host_info
(
)
;
for
(
const
dataType
in
BeaconDataType
)
{
const
requestInit
=
{
activateAfter
:
0
method
:
'
POST
'
body
:
makeBeaconData
(
'
'
dataType
)
}
;
if
(
dataType
=
=
=
BeaconDataType
.
FormData
)
{
parallelPromiseTest
(
async
_
=
>
{
expectFetchLater
(
requestInit
)
;
}
fetchLater
(
)
accepts
a
non
-
empty
POST
request
body
of
{
dataType
}
.
)
;
continue
;
}
test
(
(
)
=
>
assert_throws_js
(
TypeError
(
)
=
>
fetchLater
(
'
/
'
requestInit
)
)
fetchLater
(
)
does
not
accept
an
empty
POST
request
body
of
{
dataType
}
.
)
;
}
for
(
const
method
of
[
'
GET
'
'
DELETE
'
'
PUT
'
]
)
{
parallelPromiseTest
(
async
_
=
>
expectFetchLater
(
{
activateAfter
:
0
method
:
method
}
)
fetchLater
(
)
accept
a
{
method
}
request
.
)
;
}
