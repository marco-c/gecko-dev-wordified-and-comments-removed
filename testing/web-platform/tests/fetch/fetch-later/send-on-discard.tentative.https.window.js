'
use
strict
'
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
generateSetBeaconURL
(
uuid
)
;
const
numPerMethod
=
20
;
const
total
=
numPerMethod
*
2
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
for
(
let
i
=
0
;
i
<
{
numPerMethod
}
;
i
+
+
)
{
fetchLater
(
url
)
;
fetchLater
(
url
{
method
:
'
POST
'
}
)
;
}
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
total
}
)
;
}
'
A
discarded
document
sends
all
its
fetchLater
requests
.
'
)
;
parallelPromiseTest
(
async
t
=
>
{
const
uuid
=
token
(
)
;
const
url
=
generateSetBeaconURL
(
uuid
)
;
const
iframe
=
await
loadScriptAsIframe
(
const
url
=
"
{
url
}
"
;
const
controller
=
new
AbortController
(
)
;
fetchLater
(
url
{
signal
:
controller
.
signal
}
)
;
fetchLater
(
url
{
method
:
'
POST
'
}
)
;
controller
.
abort
(
)
;
)
;
document
.
body
.
removeChild
(
iframe
)
;
await
expectBeacon
(
uuid
{
count
:
1
}
)
;
}
'
A
discarded
document
does
not
send
an
already
aborted
fetchLater
request
.
'
)
;
