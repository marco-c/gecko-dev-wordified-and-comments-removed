'
use
strict
'
;
function
getBitwise
(
value
dataType
)
{
const
buffer
=
new
ArrayBuffer
(
8
)
;
const
int64Array
=
new
BigInt64Array
(
buffer
)
;
int64Array
[
0
]
=
value
<
0
?
~
BigInt
(
0
)
:
BigInt
(
0
)
;
let
typedArray
;
if
(
dataType
=
=
=
"
float32
"
)
{
typedArray
=
new
Float32Array
(
buffer
)
;
}
else
{
throw
new
AssertionError
(
Data
type
{
dataType
}
is
not
supported
)
;
}
typedArray
[
0
]
=
value
;
return
int64Array
[
0
]
;
}
function
assert_array_approx_equals_ulp
(
actual
expected
nulp
dataType
)
{
assert_true
(
actual
.
length
=
=
=
expected
.
length
assert_array_approx_equals_ulp
actual
length
{
actual
.
length
}
should
be
equal
to
expected
length
{
expected
.
length
}
)
;
let
actualBitwise
expectedBitwise
distance
;
for
(
let
i
=
0
;
i
<
actual
.
length
;
i
+
+
)
{
actualBitwise
=
getBitwise
(
actual
[
i
]
dataType
)
;
expectedBitwise
=
getBitwise
(
expected
[
i
]
dataType
)
;
distance
=
actualBitwise
-
expectedBitwise
;
distance
=
distance
>
=
0
?
distance
:
-
distance
;
assert_true
(
distance
<
=
nulp
The
distance
of
{
actual
[
i
]
}
should
be
close
enough
to
the
distance
of
{
expected
[
i
]
}
by
the
acceptable
ULP
distance
{
nulp
}
while
current
they
have
{
distance
}
ULP
distance
)
;
}
}
