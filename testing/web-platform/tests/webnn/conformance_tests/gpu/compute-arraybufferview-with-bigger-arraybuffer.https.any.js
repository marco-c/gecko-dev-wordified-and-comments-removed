'
use
strict
'
;
promise_test
(
async
t
=
>
{
const
context
=
await
navigator
.
ml
.
createContext
(
{
deviceType
:
'
gpu
'
}
)
;
const
builder
=
new
MLGraphBuilder
(
context
)
;
const
a
=
builder
.
input
(
'
a
'
{
dataType
:
'
float32
'
dimensions
:
[
2
]
}
)
;
const
b
=
builder
.
relu
(
a
)
;
const
graph
=
await
builder
.
build
(
{
b
}
)
;
const
arraybuffer
=
new
ArrayBuffer
(
100
)
;
const
aBuffer
=
new
Float32Array
(
arraybuffer
4
2
)
aBuffer
.
set
(
[
1
-
1
]
)
;
const
bBuffer
=
new
Float32Array
(
2
)
;
const
results
=
await
context
.
compute
(
graph
{
'
a
'
:
aBuffer
}
{
'
b
'
:
bBuffer
}
)
;
assert_array_approx_equals_ulp
(
results
.
outputs
.
b
[
1
0
]
0
'
float32
'
)
;
}
'
Test
compute
(
)
working
for
input
ArrayBufferView
created
from
bigger
ArrayBuffer
'
)
;
promise_test
(
async
t
=
>
{
const
context
=
await
navigator
.
ml
.
createContext
(
{
deviceType
:
'
gpu
'
}
)
;
const
builder
=
new
MLGraphBuilder
(
context
)
;
const
a
=
builder
.
input
(
'
a
'
{
dataType
:
'
float32
'
dimensions
:
[
2
]
}
)
;
const
b
=
builder
.
relu
(
a
)
;
const
graph
=
await
builder
.
build
(
{
b
}
)
;
const
aBuffer
=
new
Float32Array
(
2
)
;
aBuffer
.
set
(
[
1
-
1
]
)
;
const
arraybuffer
=
new
ArrayBuffer
(
100
)
;
const
bBuffer
=
new
Float32Array
(
arraybuffer
8
2
)
;
const
results
=
await
context
.
compute
(
graph
{
'
a
'
:
aBuffer
}
{
'
b
'
:
bBuffer
}
)
;
assert_array_approx_equals_ulp
(
results
.
outputs
.
b
[
1
0
]
0
'
float32
'
)
;
}
'
Test
compute
(
)
working
for
output
ArrayBufferView
created
from
bigger
ArrayBuffer
'
)
;
