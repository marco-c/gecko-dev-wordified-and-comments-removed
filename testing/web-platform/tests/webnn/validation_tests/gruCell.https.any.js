'
use
strict
'
;
const
batchSize
=
3
inputSize
=
4
hiddenSize
=
5
;
const
kValidInputDimensions
=
[
batchSize
inputSize
]
;
const
kValidWeightDimensions
=
[
3
*
hiddenSize
inputSize
]
;
const
kValidRecurrentWeightDimensions
=
[
3
*
hiddenSize
hiddenSize
]
;
const
kValidHiddenStateDimensions
=
[
batchSize
hiddenSize
]
;
const
kValidBiasDimensions
=
[
3
*
hiddenSize
]
;
const
kValidRecurrentBiasDimensions
=
[
3
*
hiddenSize
]
;
const
kExampleInputDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidInputDimensions
}
;
const
kExampleWeightDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidWeightDimensions
}
;
const
kExampleRecurrentWeightDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidRecurrentWeightDimensions
}
;
const
kExampleHiddenStateDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidHiddenStateDimensions
}
;
const
kExampleBiasDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidBiasDimensions
}
;
const
kExampleRecurrentBiasDescriptor
=
{
dataType
:
'
float32
'
dimensions
:
kValidRecurrentBiasDimensions
}
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
inputFromOtherBuilder
=
otherBuilder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
weight
=
builder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
recurrentWeight
=
builder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
const
hiddenState
=
builder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
inputFromOtherBuilder
weight
recurrentWeight
hiddenState
hiddenSize
)
)
;
}
'
[
gruCell
]
throw
if
input
is
from
another
builder
'
)
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
weightFromOtherBuilder
=
otherBuilder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
input
=
builder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
recurrentWeight
=
builder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
const
hiddenState
=
builder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
input
weightFromOtherBuilder
recurrentWeight
hiddenState
hiddenSize
)
)
;
}
'
[
gruCell
]
throw
if
weight
is
from
another
builder
'
)
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
recurrentWeightFromOtherBuilder
=
otherBuilder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
const
input
=
builder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
weight
=
builder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
hiddenState
=
builder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
input
weight
recurrentWeightFromOtherBuilder
hiddenState
hiddenSize
)
)
;
}
'
[
gruCell
]
throw
if
recurrentWeight
is
from
another
builder
'
)
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
hiddenStateFromOtherBuilder
=
otherBuilder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
const
input
=
builder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
weight
=
builder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
recurrentWeight
=
builder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
input
weight
recurrentWeight
hiddenStateFromOtherBuilder
hiddenSize
)
)
;
}
'
[
gruCell
]
throw
if
hiddenState
is
from
another
builder
'
)
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
biasFromOtherBuilder
=
otherBuilder
.
input
(
'
bias
'
kExampleBiasDescriptor
)
;
const
options
=
{
bias
:
biasFromOtherBuilder
}
;
const
input
=
builder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
weight
=
builder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
recurrentWeight
=
builder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
const
hiddenState
=
builder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
input
weight
recurrentWeight
hiddenState
hiddenSize
options
)
)
;
}
'
[
gruCell
]
throw
if
bias
option
is
from
another
builder
'
)
;
multi_builder_test
(
async
(
t
builder
otherBuilder
)
=
>
{
const
recurrentBiasFromOtherBuilder
=
otherBuilder
.
input
(
'
recurrentBias
'
kExampleRecurrentBiasDescriptor
)
;
const
options
=
{
recurrentBias
:
recurrentBiasFromOtherBuilder
}
;
const
input
=
builder
.
input
(
'
input
'
kExampleInputDescriptor
)
;
const
weight
=
builder
.
input
(
'
weight
'
kExampleWeightDescriptor
)
;
const
recurrentWeight
=
builder
.
input
(
'
recurrentWeight
'
kExampleRecurrentWeightDescriptor
)
;
const
hiddenState
=
builder
.
input
(
'
hiddenState
'
kExampleHiddenStateDescriptor
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
gruCell
(
input
weight
recurrentWeight
hiddenState
hiddenSize
options
)
)
;
}
'
[
gruCell
]
throw
if
recurrentBias
option
is
from
another
builder
'
)
;
