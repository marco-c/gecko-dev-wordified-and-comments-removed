promise_test
(
async
t
=
>
{
const
builder
=
new
MLGraphBuilder
(
context
)
;
let
backingBuffer
=
new
ArrayBuffer
(
8
)
;
let
aBuffer
=
new
Float32Array
(
backingBuffer
0
2
)
;
aBuffer
[
0
]
=
2
;
aBuffer
[
1
]
=
3
;
const
a
=
builder
.
constant
(
{
dataType
:
'
float32
'
shape
:
[
2
]
}
aBuffer
)
;
const
unusedBuffer
=
backingBuffer
.
transfer
(
)
;
const
b
=
builder
.
input
(
'
b
'
{
dataType
:
'
float32
'
shape
:
[
2
]
}
)
;
const
c
=
builder
.
add
(
a
b
)
;
const
graph
=
await
builder
.
build
(
{
c
}
)
;
const
bBuffer
=
new
Float32Array
(
[
5
7
]
)
;
const
cBuffer
=
new
Float32Array
(
2
)
;
const
result
=
await
context
.
compute
(
graph
{
'
b
'
:
bBuffer
}
{
'
c
'
:
cBuffer
}
)
;
const
expectedResult
=
new
Float32Array
(
[
7
10
]
)
;
assert_array_equals
(
result
.
outputs
.
c
expectedResult
)
;
}
'
Constant
data
is
unaffected
by
detaching
the
buffer
'
)
;
promise_test
(
async
t
=
>
{
const
builder
=
new
MLGraphBuilder
(
context
)
;
let
aBuffer
=
new
Float32Array
(
[
2
3
]
)
;
const
a
=
builder
.
constant
(
{
dataType
:
'
float32
'
shape
:
[
2
]
}
aBuffer
)
;
aBuffer
[
0
]
=
10
;
aBuffer
[
1
]
=
20
;
const
b
=
builder
.
input
(
'
b
'
{
dataType
:
'
float32
'
shape
:
[
2
]
}
)
;
const
c
=
builder
.
add
(
a
b
)
;
const
graph
=
await
builder
.
build
(
{
c
}
)
;
const
bBuffer
=
new
Float32Array
(
[
5
7
]
)
;
const
cBuffer
=
new
Float32Array
(
2
)
;
const
result
=
await
context
.
compute
(
graph
{
'
b
'
:
bBuffer
}
{
'
c
'
:
cBuffer
}
)
;
const
expectedResult
=
new
Float32Array
(
[
7
10
]
)
;
assert_array_equals
(
result
.
outputs
.
c
expectedResult
)
;
}
'
Constant
data
is
unaffected
by
changes
to
the
buffer
contents
'
)
;
promise_test
(
async
t
=
>
{
const
builder
=
new
MLGraphBuilder
(
context
)
;
let
backingBuffer
=
new
ArrayBuffer
(
8
)
;
const
aBuffer
=
new
Float32Array
(
backingBuffer
0
2
)
;
const
unusedBuffer
=
backingBuffer
.
transfer
(
)
;
assert_throws_js
(
TypeError
(
)
=
>
builder
.
constant
(
{
dataType
:
'
float32
'
shape
:
[
2
]
}
aBuffer
)
)
;
}
'
Constant
data
cannot
use
a
detached
buffer
which
is
empty
'
)
;
