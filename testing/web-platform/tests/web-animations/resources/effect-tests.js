function
assert_computed_timing_for_each_phase
(
animation
property
values
)
{
const
effect
=
animation
.
effect
;
assert_equals
(
effect
.
getComputedTiming
(
)
[
property
]
values
.
before
Value
of
{
property
}
in
the
before
phase
)
;
if
(
effect
.
getComputedTiming
(
)
.
activeDuration
>
0
)
{
animation
.
currentTime
=
effect
.
getComputedTiming
(
)
.
delay
;
assert_equals
(
effect
.
getComputedTiming
(
)
[
property
]
values
.
active
Value
of
{
property
}
in
the
active
phase
)
;
}
else
{
assert_equals
(
values
.
active
undefined
'
Test
specifies
a
value
to
check
during
the
active
phase
but
'
+
'
the
animation
has
a
zero
duration
'
)
;
}
if
(
effect
.
getComputedTiming
(
)
.
activeDuration
!
=
=
Infinity
)
{
animation
.
finish
(
)
;
assert_equals
(
effect
.
getComputedTiming
(
)
[
property
]
values
.
after
Value
of
{
property
}
in
the
after
phase
)
;
}
else
{
assert_equals
(
values
.
after
undefined
'
Test
specifies
a
value
to
check
during
the
after
phase
but
'
+
'
the
animation
has
an
infinite
duration
'
)
;
}
}
