const
MAIN_FRAME
=
'
main
'
;
const
SUBFRAME
=
'
sub
'
;
async
function
isUnloadAllowed
(
remoteContextWrapper
)
{
return
remoteContextWrapper
.
executeScript
(
(
)
=
>
{
return
document
.
featurePolicy
.
allowsFeature
(
'
unload
'
)
;
}
)
;
}
async
function
assertWindowAllowsUnload
(
remoteContextWrapper
name
{
shouldRunUnload
}
)
{
const
maybeNot
=
shouldRunUnload
?
'
'
:
'
not
'
;
assert_equals
(
await
isUnloadAllowed
(
remoteContextWrapper
)
shouldRunUnload
{
name
}
:
unload
in
{
name
}
should
{
maybeNot
}
be
allowed
)
;
}
async
function
assertWindowRunsUnload
(
remoteContextWrapper
name
{
shouldRunUnload
}
)
{
await
assertWindowAllowsUnload
(
remoteContextWrapper
name
{
shouldRunUnload
}
)
;
const
maybeNot
=
shouldRunUnload
?
'
'
:
'
not
'
;
await
remoteContextWrapper
.
executeScript
(
(
name
)
=
>
{
localStorage
.
setItem
(
name
'
did
not
run
'
)
;
addEventListener
(
'
unload
'
(
)
=
>
localStorage
.
setItem
(
name
'
did
run
'
)
)
;
}
[
name
]
)
;
const
second
=
await
remoteContextWrapper
.
navigateToNew
(
)
;
second
.
historyBack
(
)
;
const
recordedUnload
=
await
remoteContextWrapper
.
executeScript
(
(
name
)
=
>
localStorage
.
getItem
(
name
)
[
name
]
)
;
assert_equals
(
recordedUnload
did
{
maybeNot
}
run
{
name
}
:
unload
should
{
maybeNot
}
have
run
)
;
}
