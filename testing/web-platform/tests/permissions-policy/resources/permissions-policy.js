function
assert_permissions_policy_supported
(
)
{
assert_not_equals
(
document
.
featurePolicy
undefined
'
permissions
policy
is
supported
'
)
;
}
function
test_feature_availability
(
feature_description
test
src
expect_feature_available
feature_name
allow_attribute
)
{
let
frame
=
document
.
createElement
(
'
iframe
'
)
;
frame
.
src
=
src
;
if
(
typeof
feature_name
!
=
=
'
undefined
'
)
{
frame
.
allow
=
frame
.
allow
.
concat
(
"
;
"
+
feature_name
)
;
}
if
(
typeof
allow_attribute
!
=
=
'
undefined
'
)
{
frame
.
setAttribute
(
allow_attribute
true
)
;
}
window
.
addEventListener
(
'
message
'
test
.
step_func
(
evt
=
>
{
if
(
evt
.
source
=
=
=
frame
.
contentWindow
&
&
evt
.
data
.
type
=
=
=
'
availability
-
result
'
)
{
expect_feature_available
(
evt
.
data
feature_description
)
;
document
.
body
.
removeChild
(
frame
)
;
test
.
done
(
)
;
}
}
)
)
;
document
.
body
.
appendChild
(
frame
)
;
}
function
expect_feature_available_default
(
data
feature_description
)
{
assert_true
(
data
.
enabled
feature_description
)
;
}
function
expect_feature_unavailable_default
(
data
feature_description
)
{
assert_false
(
data
.
enabled
feature_description
)
;
}
function
test_feature_availability_with_post_message_result
(
test
src
expected_result
allow_attribute
)
{
var
test_result
=
function
(
{
message
}
feature_description
)
{
assert_equals
(
message
expected_result
)
;
}
;
test_feature_availability
(
null
test
src
test_result
allow_attribute
)
;
}
async
function
test_feature_in_iframe
(
feature_name
feature_promise_factory
)
{
if
(
location
.
hash
.
endsWith
(
#
{
feature_name
}
)
)
{
let
message
=
'
#
OK
'
;
try
{
await
feature_promise_factory
(
)
;
}
catch
(
e
)
{
message
=
'
#
'
+
e
.
name
;
}
window
.
parent
.
postMessage
(
{
type
:
'
availability
-
result
'
message
}
'
*
'
)
;
}
}
function
page_loaded_in_iframe
(
)
{
return
new
URLSearchParams
(
location
.
search
)
.
get
(
'
in
-
iframe
'
)
;
}
function
same_origin_url
(
feature_name
)
{
return
location
.
pathname
+
'
?
in
-
iframe
=
yes
#
'
+
feature_name
;
}
function
cross_origin_url
(
base_url
feature_name
)
{
return
base_url
+
same_origin_url
(
feature_name
)
;
}
function
run_all_fp_tests_allow_self
(
cross_origin
feature_name
error_name
feature_promise_factory
)
{
if
(
page_loaded_in_iframe
(
)
)
{
test_feature_in_iframe
(
feature_name
feature_promise_factory
)
;
return
;
}
promise_test
(
(
)
=
>
feature_promise_factory
(
)
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
self
"
]
allows
the
top
-
level
document
.
'
)
;
const
same_origin_frame_pathname
=
same_origin_url
(
feature_name
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
same_origin_frame_pathname
'
#
OK
'
)
;
}
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
self
"
]
allows
same
-
origin
iframes
.
'
)
;
const
cross_origin_frame_url
=
cross_origin_url
(
cross_origin
feature_name
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
cross_origin_frame_url
'
#
'
+
error_name
)
;
}
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
self
"
]
disallows
cross
-
origin
iframes
.
'
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
cross_origin_frame_url
'
#
OK
'
feature_name
)
;
}
'
permissions
policy
"
'
+
feature_name
+
'
"
can
be
enabled
in
cross
-
origin
iframes
using
"
allow
"
attribute
.
'
)
;
}
function
run_all_fp_tests_allow_all
(
cross_origin
feature_name
error_name
feature_promise_factory
)
{
if
(
page_loaded_in_iframe
(
)
)
{
test_feature_in_iframe
(
feature_name
feature_promise_factory
)
;
return
;
}
promise_test
(
(
)
=
>
feature_promise_factory
(
)
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
*
"
]
allows
the
top
-
level
document
.
'
)
;
const
same_origin_frame_pathname
=
same_origin_url
(
feature_name
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
same_origin_frame_pathname
'
#
OK
'
)
;
}
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
*
"
]
allows
same
-
origin
iframes
.
'
)
;
const
cross_origin_frame_url
=
cross_origin_url
(
cross_origin
feature_name
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
cross_origin_frame_url
'
#
OK
'
)
;
}
'
Default
"
'
+
feature_name
+
'
"
permissions
policy
[
"
*
"
]
allows
cross
-
origin
iframes
.
'
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
cross_origin_frame_url
'
#
'
+
error_name
feature_name
+
"
'
none
'
"
)
;
}
'
permissions
policy
"
'
+
feature_name
+
'
"
can
be
disabled
in
cross
-
origin
iframes
using
"
allow
"
attribute
.
'
)
;
async_test
(
t
=
>
{
test_feature_availability_with_post_message_result
(
t
same_origin_frame_pathname
'
#
'
+
error_name
feature_name
+
"
'
none
'
"
)
;
}
'
permissions
policy
"
'
+
feature_name
+
'
"
can
be
disabled
in
same
-
origin
iframes
using
"
allow
"
attribute
.
'
)
;
}
function
test_allowed_feature_for_subframe
(
message
feature
src
allow
)
{
let
frame
=
document
.
createElement
(
'
iframe
'
)
;
if
(
typeof
allow
!
=
=
'
undefined
'
)
{
frame
.
allow
=
allow
;
}
promise_test
(
function
(
)
{
assert_permissions_policy_supported
(
)
;
frame
.
src
=
src
;
return
new
Promise
(
function
(
resolve
reject
)
{
window
.
addEventListener
(
'
message
'
function
handler
(
evt
)
{
resolve
(
evt
.
data
)
;
}
{
once
:
true
}
)
;
document
.
body
.
appendChild
(
frame
)
;
}
)
.
then
(
function
(
data
)
{
assert_true
(
data
.
includes
(
feature
)
feature
)
;
}
)
;
}
message
)
;
}
function
test_disallowed_feature_for_subframe
(
message
feature
src
allow
)
{
let
frame
=
document
.
createElement
(
'
iframe
'
)
;
if
(
typeof
allow
!
=
=
'
undefined
'
)
{
frame
.
allow
=
allow
;
}
promise_test
(
function
(
)
{
assert_permissions_policy_supported
(
)
;
frame
.
src
=
src
;
return
new
Promise
(
function
(
resolve
reject
)
{
window
.
addEventListener
(
'
message
'
function
handler
(
evt
)
{
resolve
(
evt
.
data
)
;
}
{
once
:
true
}
)
;
document
.
body
.
appendChild
(
frame
)
;
}
)
.
then
(
function
(
data
)
{
assert_false
(
data
.
includes
(
feature
)
feature
)
;
}
)
;
}
message
)
;
}
function
test_subframe_header_policy
(
feature
frame_header_policy
src
test_expects
test_name
)
{
let
frame
=
document
.
createElement
(
'
iframe
'
)
;
promise_test
(
function
(
)
{
assert_permissions_policy_supported
(
)
frame
.
src
=
src
+
'
?
pipe
=
sub
|
header
(
Permissions
-
Policy
'
+
feature
+
'
=
'
+
frame_header_policy
+
'
)
'
;
return
new
Promise
(
function
(
resolve
)
{
window
.
addEventListener
(
'
message
'
function
handler
(
evt
)
{
resolve
(
evt
.
data
)
;
}
)
;
document
.
body
.
appendChild
(
frame
)
;
}
)
.
then
(
function
(
results
)
{
for
(
var
j
=
0
;
j
<
results
.
length
;
j
+
+
)
{
var
data
=
results
[
j
]
;
function
test_result
(
message
test_expect
)
{
if
(
test_expect
)
{
assert_true
(
data
.
allowedfeatures
.
includes
(
feature
)
message
)
;
}
else
{
assert_false
(
data
.
allowedfeatures
.
includes
(
feature
)
message
)
;
}
}
if
(
data
.
frame
=
=
=
'
local
'
)
{
if
(
data
.
policy
=
=
=
'
*
'
)
{
test_result
(
'
local_all
:
'
test_expects
.
local_all
)
;
}
if
(
data
.
policy
=
=
=
'
self
'
)
{
test_result
(
'
local_self
:
'
test_expects
.
local_self
)
;
}
if
(
data
.
policy
=
=
=
'
\
\
(
\
\
)
'
)
{
test_result
(
'
local_none
:
'
test_expects
.
local_none
)
;
}
}
if
(
data
.
frame
=
=
=
'
remote
'
)
{
if
(
data
.
policy
=
=
=
'
*
'
)
{
test_result
(
'
remote_all
:
'
test_expects
.
remote_all
)
;
}
if
(
data
.
policy
=
=
=
'
self
'
)
{
test_result
(
'
remote_self
:
'
test_expects
.
remote_self
)
;
}
if
(
data
.
policy
=
=
=
'
\
\
(
\
\
)
'
)
{
test_result
(
'
remote_none
:
'
test_expects
.
remote_none
)
;
}
}
}
}
)
;
}
test_name
)
;
}
function
test_frame_policy
(
feature
src
srcdoc
test_expect
allow
allowfullscreen
sandbox
)
{
let
frame
=
document
.
createElement
(
'
iframe
'
)
;
document
.
body
.
appendChild
(
frame
)
;
var
frame_policy
=
frame
.
permissionsPolicy
;
if
(
typeof
allow
!
=
=
'
undefined
'
)
{
frame
.
setAttribute
(
'
allow
'
allow
)
;
}
if
(
!
!
allowfullscreen
)
{
frame
.
setAttribute
(
'
allowfullscreen
'
true
)
;
}
if
(
!
!
sandbox
)
{
frame
.
setAttribute
(
'
sandbox
'
'
allow
-
scripts
'
)
;
}
if
(
!
!
src
)
{
frame
.
src
=
src
;
}
if
(
!
!
srcdoc
)
{
frame
.
srcdoc
=
"
<
h1
>
Hello
world
!
<
/
h1
>
"
;
}
if
(
test_expect
)
{
assert_true
(
frame_policy
.
allowedFeatures
(
)
.
includes
(
feature
)
)
;
}
else
{
assert_false
(
frame_policy
.
allowedFeatures
(
)
.
includes
(
feature
)
)
;
}
}
function
expect_reports
(
report_count
policy_name
description
)
{
async_test
(
t
=
>
{
var
num_received_reports
=
0
;
new
ReportingObserver
(
t
.
step_func
(
(
reports
observer
)
=
>
{
const
relevant_reports
=
reports
.
filter
(
r
=
>
(
r
.
body
.
featureId
=
=
=
policy_name
)
)
;
num_received_reports
+
=
relevant_reports
.
length
;
if
(
num_received_reports
>
=
report_count
)
{
t
.
done
(
)
;
}
}
)
{
types
:
[
'
permissions
-
policy
-
violation
'
]
buffered
:
true
}
)
.
observe
(
)
;
}
description
)
;
}
