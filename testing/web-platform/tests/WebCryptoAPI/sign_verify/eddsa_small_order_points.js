function
run_test
(
)
{
var
subtle
=
self
.
crypto
.
subtle
;
Object
.
keys
(
kSmallOrderTestCases
)
.
forEach
(
function
(
algorithmName
)
{
var
algorithm
=
{
name
:
algorithmName
}
;
kSmallOrderTestCases
[
algorithmName
]
.
forEach
(
function
(
test
)
{
promise_test
(
async
(
)
=
>
{
let
isVerified
=
true
;
let
publicKey
;
try
{
publicKey
=
await
subtle
.
importKey
(
"
raw
"
test
.
keyData
algorithm
false
[
"
verify
"
]
)
isVerified
=
await
subtle
.
verify
(
algorithm
publicKey
test
.
signature
test
.
message
)
;
}
catch
(
err
)
{
assert_true
(
publicKey
!
=
=
undefined
"
Public
key
should
be
valid
.
"
)
;
assert_unreached
(
"
The
operation
shouldn
'
t
fail
but
it
thown
this
error
:
"
+
err
.
name
+
"
:
"
+
err
.
message
+
"
.
"
)
;
}
assert_equals
(
isVerified
test
.
verified
"
Signature
verification
result
.
"
)
;
}
algorithmName
+
"
Verification
checks
with
small
-
order
key
of
order
-
Test
"
+
test
.
id
)
;
}
)
;
}
)
;
return
;
}
