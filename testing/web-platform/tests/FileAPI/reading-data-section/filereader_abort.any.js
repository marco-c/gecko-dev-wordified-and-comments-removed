test
(
function
(
)
{
var
readerNoRead
=
new
FileReader
(
)
;
readerNoRead
.
abort
(
)
;
assert_equals
(
readerNoRead
.
readyState
readerNoRead
.
EMPTY
)
;
assert_equals
(
readerNoRead
.
result
null
)
;
}
"
Aborting
before
read
"
)
;
promise_test
(
t
=
>
{
var
blob
=
new
Blob
(
[
"
TEST
THE
ABORT
METHOD
"
]
)
;
var
readerAbort
=
new
FileReader
(
)
;
var
eventWatcher
=
new
EventWatcher
(
t
readerAbort
[
'
abort
'
'
loadstart
'
'
loadend
'
'
error
'
'
load
'
]
)
;
readerAbort
.
addEventListener
(
'
abort
'
t
.
step_func
(
e
=
>
{
assert_equals
(
readerAbort
.
readyState
readerAbort
.
DONE
)
;
}
)
)
;
readerAbort
.
readAsText
(
blob
)
;
return
eventWatcher
.
wait_for
(
'
loadstart
'
)
.
then
(
(
)
=
>
{
assert_equals
(
readerAbort
.
readyState
readerAbort
.
LOADING
)
;
var
nextEvent
=
eventWatcher
.
wait_for
(
[
'
abort
'
'
loadend
'
]
)
;
readerAbort
.
abort
(
)
;
return
nextEvent
;
}
)
.
then
(
(
)
=
>
{
assert_equals
(
readerAbort
.
result
null
)
;
assert_equals
(
readerAbort
.
readyState
readerAbort
.
DONE
)
;
}
)
;
}
"
Aborting
after
read
"
)
;
