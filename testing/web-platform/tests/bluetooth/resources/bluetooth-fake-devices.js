'
use
strict
'
;
const
HCI_SUCCESS
=
0x0000
;
const
HCI_CONNECTION_TIMEOUT
=
0x0008
;
const
GATT_SUCCESS
=
0x0000
;
const
GATT_INVALID_HANDLE
=
0x0001
;
var
blocklist_test_service_uuid
=
'
611c954a
-
263b
-
4f4a
-
aab6
-
01ddb953f985
'
;
var
request_disconnection_service_uuid
=
'
01d7d889
-
7451
-
419f
-
aeb8
-
d65e7b9277af
'
;
var
blocklist_exclude_reads_characteristic_uuid
=
'
bad1c9a2
-
9a5b
-
4015
-
8b60
-
1579bbbf2135
'
;
var
request_disconnection_characteristic_uuid
=
'
01d7d88a
-
7451
-
419f
-
aeb8
-
d65e7b9277af
'
;
var
blocklist_test_descriptor_uuid
=
'
bad2ddcf
-
60db
-
45cd
-
bef9
-
fd72b153cf7c
'
;
var
blocklist_exclude_reads_descriptor_uuid
=
'
bad3ec61
-
3cc3
-
4954
-
9702
-
7977df514114
'
;
var
generic_access
=
{
alias
:
0x1800
name
:
'
generic_access
'
uuid
:
'
00001800
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
device_name
=
{
alias
:
0x2a00
name
:
'
gap
.
device_name
'
uuid
:
'
00002a00
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
reconnection_address
=
{
alias
:
0x2a03
name
:
'
gap
.
reconnection_address
'
uuid
:
'
00002a03
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
heart_rate
=
{
alias
:
0x180d
name
:
'
heart_rate
'
uuid
:
'
0000180d
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
health_thermometer
=
{
alias
:
0x1809
name
:
'
health_thermometer
'
uuid
:
'
00001809
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
body_sensor_location
=
{
alias
:
0x2a38
name
:
'
body_sensor_location
'
uuid
:
'
00002a38
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
glucose
=
{
alias
:
0x1808
name
:
'
glucose
'
uuid
:
'
00001808
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
battery_service
=
{
alias
:
0x180f
name
:
'
battery_service
'
uuid
:
'
0000180f
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
battery_level
=
{
alias
:
0x2A19
name
:
'
battery_level
'
uuid
:
'
00002a19
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
user_description
=
{
alias
:
0x2901
name
:
'
gatt
.
characteristic_user_description
'
uuid
:
'
00002901
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
client_characteristic_configuration
=
{
alias
:
0x2902
name
:
'
gatt
.
client_characteristic_configuration
'
uuid
:
'
00002902
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
var
measurement_interval
=
{
alias
:
0x2a21
name
:
'
measurement_interval
'
uuid
:
'
00002a21
-
0000
-
1000
-
8000
-
00805f9b34fb
'
}
;
const
health_thermometer_ad_packet
=
{
deviceAddress
:
'
09
:
09
:
09
:
09
:
09
:
09
'
rssi
:
-
10
scanRecord
:
{
name
:
'
Health
Thermometer
'
uuids
:
[
health_thermometer
.
uuid
]
}
}
;
const
heart_rate_ad_packet
=
{
deviceAddress
:
'
08
:
08
:
08
:
08
:
08
:
08
'
rssi
:
-
10
scanRecord
:
{
name
:
'
Heart
Rate
'
uuids
:
[
heart_rate
.
uuid
]
}
}
;
const
uuid1234
=
BluetoothUUID
.
getService
(
0x1234
)
;
const
uuid5678
=
BluetoothUUID
.
getService
(
0x5678
)
;
const
uuidABCD
=
BluetoothUUID
.
getService
(
0xABCD
)
;
const
manufacturer1Data
=
new
Uint8Array
(
[
1
2
]
)
;
const
manufacturer2Data
=
new
Uint8Array
(
[
3
4
]
)
;
const
uuid1234Data
=
new
Uint8Array
(
[
5
6
]
)
;
const
uuid5678Data
=
new
Uint8Array
(
[
7
8
]
)
;
const
uuidABCDData
=
new
Uint8Array
(
[
9
10
]
)
;
const
service_and_manufacturer_data_ad_packet
=
{
deviceAddress
:
'
07
:
07
:
07
:
07
:
07
:
07
'
rssi
:
-
10
scanRecord
:
{
name
:
'
LE
Device
'
uuids
:
[
uuid1234
]
manufacturerData
:
{
0x0001
:
manufacturer1Data
0x0002
:
manufacturer2Data
}
serviceData
:
{
[
uuid1234
]
:
uuid1234Data
[
uuid5678
]
:
uuid5678Data
[
uuidABCD
]
:
uuidABCDData
}
}
}
;
class
TestCharacteristicProperties
{
constructor
(
properties
)
{
this
.
broadcast
=
false
;
this
.
read
=
false
;
this
.
writeWithoutResponse
=
false
;
this
.
write
=
false
;
this
.
notify
=
false
;
this
.
indicate
=
false
;
this
.
authenticatedSignedWrites
=
false
;
this
.
reliableWrite
=
false
;
this
.
writableAuxiliaries
=
false
;
properties
.
forEach
(
val
=
>
{
if
(
this
.
hasOwnProperty
(
val
)
)
this
[
val
]
=
true
;
else
throw
Invalid
member
'
{
val
}
'
;
}
)
;
}
}
function
generateRequestDeviceArgsWithServices
(
services
=
[
'
heart_rate
'
]
)
{
return
[
{
filters
:
[
{
services
:
services
}
]
}
{
filters
:
[
{
services
:
services
name
:
'
Name
'
}
]
}
{
filters
:
[
{
services
:
services
namePrefix
:
'
Pre
'
}
]
}
{
filters
:
[
{
services
:
services
manufacturerData
:
[
{
companyIdentifier
:
0x0001
}
]
}
]
}
{
filters
:
[
{
services
:
services
name
:
'
Name
'
namePrefix
:
'
Pre
'
manufacturerData
:
[
{
companyIdentifier
:
0x0001
}
]
}
]
}
{
filters
:
[
{
services
:
services
}
]
optionalServices
:
[
'
heart_rate
'
]
}
{
filters
:
[
{
services
:
services
name
:
'
Name
'
}
]
optionalServices
:
[
'
heart_rate
'
]
}
{
filters
:
[
{
services
:
services
namePrefix
:
'
Pre
'
}
]
optionalServices
:
[
'
heart_rate
'
]
}
{
filters
:
[
{
services
:
services
manufacturerData
:
[
{
companyIdentifier
:
0x0001
}
]
}
]
optionalServices
:
[
'
heart_rate
'
]
}
{
filters
:
[
{
services
:
services
name
:
'
Name
'
namePrefix
:
'
Pre
'
manufacturerData
:
[
{
companyIdentifier
:
0x0001
}
]
}
]
optionalServices
:
[
'
heart_rate
'
]
}
]
;
}
function
simulateGATTDisconnectionAndWait
(
device
fake_peripheral
)
{
return
Promise
.
all
(
[
eventPromise
(
device
'
gattserverdisconnected
'
)
fake_peripheral
.
simulateGATTDisconnection
(
)
]
)
;
}
let
fake_central
=
null
;
async
function
initializeFakeCentral
(
{
state
=
'
powered
-
on
'
}
)
{
if
(
!
fake_central
)
{
fake_central
=
await
navigator
.
bluetooth
.
test
.
simulateCentral
(
{
state
}
)
;
}
}
let
FakeDeviceOptions
;
let
SetupOptions
;
const
fakeDeviceOptionsDefault
=
{
address
:
'
00
:
00
:
00
:
00
:
00
:
00
'
name
:
'
LE
Device
'
manufacturerData
:
{
}
knownServiceUUIDs
:
[
]
connectable
:
false
serviceDiscoveryComplete
:
false
}
;
let
FakeDevice
;
function
createSetupOptions
(
setupOptionsDefault
setupOptionsOverride
)
{
let
fakeDeviceOptions
=
Object
.
assign
(
{
.
.
.
setupOptionsDefault
.
fakeDeviceOptions
}
setupOptionsOverride
.
fakeDeviceOptions
)
;
let
requestDeviceOptions
=
Object
.
assign
(
{
.
.
.
setupOptionsDefault
.
requestDeviceOptions
}
setupOptionsOverride
.
requestDeviceOptions
)
;
return
{
fakeDeviceOptions
requestDeviceOptions
}
;
}
async
function
setUpPreconnectedFakeDevice
(
setupOptionsOverride
)
{
await
initializeFakeCentral
(
{
state
:
'
powered
-
on
'
}
)
;
let
setupOptions
=
createSetupOptions
(
{
fakeDeviceOptions
:
fakeDeviceOptionsDefault
}
setupOptionsOverride
)
;
let
preconnectedDevice
=
{
}
;
preconnectedDevice
.
fake_peripheral
=
await
fake_central
.
simulatePreconnectedPeripheral
(
{
address
:
setupOptions
.
fakeDeviceOptions
.
address
name
:
setupOptions
.
fakeDeviceOptions
.
name
manufacturerData
:
setupOptions
.
fakeDeviceOptions
.
manufacturerData
knownServiceUUIDs
:
setupOptions
.
fakeDeviceOptions
.
knownServiceUUIDs
}
)
;
if
(
setupOptions
.
fakeDeviceOptions
.
connectable
)
{
await
preconnectedDevice
.
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
}
preconnectedDevice
.
fake_services
=
new
Map
(
)
;
for
(
let
service
of
setupOptions
.
fakeDeviceOptions
.
knownServiceUUIDs
)
{
let
fake_service
=
await
preconnectedDevice
.
fake_peripheral
.
addFakeService
(
{
uuid
:
service
}
)
;
preconnectedDevice
.
fake_services
.
set
(
service
fake_service
)
;
}
if
(
setupOptions
.
requestDeviceOptions
)
{
preconnectedDevice
.
device
=
await
requestDeviceWithTrustedClick
(
setupOptions
.
requestDeviceOptions
)
;
}
if
(
setupOptions
.
fakeDeviceOptions
.
serviceDiscoveryComplete
)
{
await
preconnectedDevice
.
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
}
return
preconnectedDevice
;
}
async
function
setUpPreconnectedDevice
(
{
address
=
'
00
:
00
:
00
:
00
:
00
:
00
'
name
=
'
LE
Device
'
manufacturerData
=
{
}
knownServiceUUIDs
=
[
]
}
)
{
await
initializeFakeCentral
(
{
state
:
'
powered
-
on
'
}
)
;
return
await
fake_central
.
simulatePreconnectedPeripheral
(
{
address
:
address
name
:
name
manufacturerData
:
manufacturerData
knownServiceUUIDs
:
knownServiceUUIDs
}
)
;
}
const
blocklistFakeDeviceOptionsDefault
=
{
address
:
'
11
:
11
:
11
:
11
:
11
:
11
'
name
:
'
Blocklist
Device
'
knownServiceUUIDs
:
[
'
generic_access
'
blocklist_test_service_uuid
]
connectable
:
true
serviceDiscoveryComplete
:
true
}
;
const
blocklistRequestDeviceOptionsDefault
=
{
filters
:
[
{
services
:
[
blocklist_test_service_uuid
]
}
]
}
;
const
blocklistSetupOptionsDefault
=
{
fakeDeviceOptions
:
blocklistFakeDeviceOptionsDefault
requestDeviceOptions
:
blocklistRequestDeviceOptionsDefault
}
;
async
function
getBlocklistDevice
(
setupOptionsOverride
=
{
}
)
{
let
setupOptions
=
createSetupOptions
(
blocklistSetupOptionsDefault
setupOptionsOverride
)
;
let
fakeDevice
=
await
setUpPreconnectedFakeDevice
(
setupOptions
)
;
await
fakeDevice
.
device
.
gatt
.
connect
(
)
;
let
fake_blocklist_test_service
=
fakeDevice
.
fake_services
.
get
(
blocklist_test_service_uuid
)
;
let
fake_blocklist_exclude_reads_characteristic
=
await
fake_blocklist_test_service
.
addFakeCharacteristic
(
{
uuid
:
blocklist_exclude_reads_characteristic_uuid
properties
:
[
'
read
'
'
write
'
]
}
)
;
let
fake_blocklist_exclude_writes_characteristic
=
await
fake_blocklist_test_service
.
addFakeCharacteristic
(
{
uuid
:
'
gap
.
peripheral_privacy_flag
'
properties
:
[
'
read
'
'
write
'
]
}
)
;
let
fake_blocklist_descriptor
=
await
fake_blocklist_exclude_writes_characteristic
.
addFakeDescriptor
(
{
uuid
:
blocklist_test_descriptor_uuid
}
)
;
let
fake_blocklist_exclude_reads_descriptor
=
await
fake_blocklist_exclude_writes_characteristic
.
addFakeDescriptor
(
{
uuid
:
blocklist_exclude_reads_descriptor_uuid
}
)
;
let
fake_blocklist_exclude_writes_descriptor
=
await
fake_blocklist_exclude_writes_characteristic
.
addFakeDescriptor
(
{
uuid
:
'
gatt
.
client_characteristic_configuration
'
}
)
;
return
{
device
:
fakeDevice
.
device
fake_peripheral
:
fakeDevice
.
fake_peripheral
fake_blocklist_test_service
fake_blocklist_exclude_reads_characteristic
fake_blocklist_exclude_writes_characteristic
fake_blocklist_descriptor
fake_blocklist_exclude_reads_descriptor
fake_blocklist_exclude_writes_descriptor
}
;
}
async
function
getBlocklistTestService
(
)
{
let
result
=
await
getBlocklistDevice
(
)
;
let
service
=
await
result
.
device
.
gatt
.
getPrimaryService
(
blocklist_test_service_uuid
)
;
return
Object
.
assign
(
result
{
service
fake_service
:
result
.
fake_blocklist_test_service
}
)
;
}
async
function
getBlocklistExcludeReadsCharacteristic
(
)
{
let
result
=
await
getBlocklistTestService
(
)
;
let
characteristic
=
await
result
.
service
.
getCharacteristic
(
blocklist_exclude_reads_characteristic_uuid
)
;
return
Object
.
assign
(
result
{
characteristic
fake_characteristic
:
result
.
fake_blocklist_exclude_reads_characteristic
}
)
;
}
async
function
getBlocklistExcludeWritesCharacteristic
(
)
{
let
result
=
await
getBlocklistTestService
(
)
;
let
characteristic
=
await
result
.
service
.
getCharacteristic
(
'
gap
.
peripheral_privacy_flag
'
)
;
return
Object
.
assign
(
result
{
characteristic
fake_characteristic
:
result
.
fake_blocklist_exclude_writes_characteristic
}
)
;
}
async
function
getBlocklistExcludeReadsDescriptor
(
)
{
let
result
=
await
getBlocklistExcludeWritesCharacteristic
(
)
;
let
descriptor
=
await
result
.
characteristic
.
getDescriptor
(
blocklist_exclude_reads_descriptor_uuid
)
;
return
Object
.
assign
(
result
{
descriptor
fake_descriptor
:
result
.
fake_blocklist_exclude_reads_descriptor
}
)
;
}
async
function
getBlocklistExcludeWritesDescriptor
(
)
{
let
result
=
await
getBlocklistExcludeWritesCharacteristic
(
)
;
let
descriptor
=
await
result
.
characteristic
.
getDescriptor
(
'
gatt
.
client_characteristic_configuration
'
)
;
return
Object
.
assign
(
result
{
descriptor
:
descriptor
fake_descriptor
:
result
.
fake_blocklist_exclude_writes_descriptor
}
)
;
}
const
connectedHIDFakeDeviceOptionsDefault
=
{
address
:
'
10
:
10
:
10
:
10
:
10
:
10
'
name
:
'
HID
Device
'
knownServiceUUIDs
:
[
'
generic_access
'
'
device_information
'
'
human_interface_device
'
]
connectable
:
true
serviceDiscoveryComplete
:
false
}
;
const
connectedHIDRequestDeviceOptionsDefault
=
{
filters
:
[
{
services
:
[
'
device_information
'
]
}
]
optionalServices
:
[
'
human_interface_device
'
]
}
;
const
connectedHIDSetupOptionsDefault
=
{
fakeDeviceOptions
:
connectedHIDFakeDeviceOptionsDefault
requestDeviceOptions
:
connectedHIDRequestDeviceOptionsDefault
}
;
async
function
getConnectedHIDDevice
(
requestDeviceOptionsOverride
fakeDeviceOptionsOverride
)
{
let
setupOptions
=
createSetupOptions
(
connectedHIDSetupOptionsDefault
{
fakeDeviceOptions
:
fakeDeviceOptionsOverride
requestDeviceOptions
:
requestDeviceOptionsOverride
}
)
;
let
fakeDevice
=
await
setUpPreconnectedFakeDevice
(
setupOptions
)
;
await
fakeDevice
.
device
.
gatt
.
connect
(
)
;
let
dev_info
=
fakeDevice
.
fake_services
.
get
(
'
device_information
'
)
;
await
dev_info
.
addFakeCharacteristic
(
{
uuid
:
'
serial_number_string
'
properties
:
[
'
read
'
]
}
)
;
return
fakeDevice
;
}
async
function
getHIDDevice
(
options
)
{
let
result
=
await
getConnectedHIDDevice
(
options
{
serviceDiscoveryComplete
:
true
}
)
;
return
result
;
}
function
setUpHealthThermometerDevice
(
)
{
return
setUpPreconnectedDevice
(
{
address
:
'
09
:
09
:
09
:
09
:
09
:
09
'
name
:
'
Health
Thermometer
'
manufacturerData
:
{
0x0001
:
manufacturer1Data
0x0002
:
manufacturer2Data
}
knownServiceUUIDs
:
[
'
generic_access
'
'
health_thermometer
'
]
}
)
;
}
async
function
setUpConnectableHealthThermometerDevice
(
)
{
let
fake_peripheral
=
await
setUpHealthThermometerDevice
(
)
;
await
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
return
fake_peripheral
;
}
async
function
populateHealthThermometerFakes
(
fake_peripheral
)
{
let
fake_generic_access
=
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
generic_access
'
}
)
;
let
fake_health_thermometer
=
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
health_thermometer
'
}
)
;
let
fake_measurement_interval
=
await
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
measurement_interval
'
properties
:
[
'
read
'
'
write
'
'
indicate
'
]
}
)
;
let
fake_user_description
=
await
fake_measurement_interval
.
addFakeDescriptor
(
{
uuid
:
'
gatt
.
characteristic_user_description
'
}
)
;
let
fake_cccd
=
await
fake_measurement_interval
.
addFakeDescriptor
(
{
uuid
:
'
gatt
.
client_characteristic_configuration
'
}
)
;
let
fake_temperature_measurement
=
await
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
temperature_measurement
'
properties
:
[
'
indicate
'
]
}
)
;
let
fake_temperature_type
=
await
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
temperature_type
'
properties
:
[
'
read
'
]
}
)
;
return
{
fake_peripheral
fake_generic_access
fake_health_thermometer
fake_measurement_interval
fake_cccd
fake_user_description
fake_temperature_measurement
fake_temperature_type
}
;
}
async
function
getHealthThermometerDeviceWithServicesDiscovered
(
options
)
{
let
iframe
=
document
.
createElement
(
'
iframe
'
)
;
let
fake_peripheral
=
await
setUpConnectableHealthThermometerDevice
(
)
;
let
fakes
=
populateHealthThermometerFakes
(
fake_peripheral
)
;
await
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
await
new
Promise
(
resolve
=
>
{
let
src
=
'
/
bluetooth
/
resources
/
health
-
thermometer
-
iframe
.
html
'
;
if
(
window
.
location
.
pathname
.
includes
(
'
/
LayoutTests
/
'
)
)
{
src
=
'
.
.
/
.
.
/
.
.
/
external
/
wpt
/
bluetooth
/
resources
/
health
-
thermometer
-
iframe
.
html
'
;
}
iframe
.
src
=
src
;
document
.
body
.
appendChild
(
iframe
)
;
iframe
.
addEventListener
(
'
load
'
resolve
)
;
}
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
callWithTrustedClick
(
(
)
=
>
{
iframe
.
contentWindow
.
postMessage
(
{
type
:
'
DiscoverServices
'
options
:
options
}
'
*
'
)
;
}
)
;
function
messageHandler
(
messageEvent
)
{
if
(
messageEvent
.
data
=
=
'
DiscoveryComplete
'
)
{
window
.
removeEventListener
(
'
message
'
messageHandler
)
;
resolve
(
)
;
}
else
{
reject
(
new
Error
(
Unexpected
message
:
{
messageEvent
.
data
}
)
)
;
}
}
window
.
addEventListener
(
'
message
'
messageHandler
)
;
}
)
;
let
device
=
await
requestDeviceWithTrustedClick
(
options
)
;
await
device
.
gatt
.
connect
(
)
;
return
Object
.
assign
(
{
device
}
fakes
)
;
}
async
function
getHealthThermometerDeviceFromIframe
(
iframe
)
{
const
fake_peripheral
=
await
setUpConnectableHealthThermometerDevice
(
)
;
const
fakes
=
await
populateHealthThermometerFakes
(
fake_peripheral
)
;
await
new
Promise
(
resolve
=
>
{
let
src
=
'
/
bluetooth
/
resources
/
health
-
thermometer
-
iframe
.
html
'
;
iframe
.
src
=
src
;
document
.
body
.
appendChild
(
iframe
)
;
iframe
.
addEventListener
(
'
load
'
resolve
{
once
:
true
}
)
;
}
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
callWithTrustedClick
(
(
)
=
>
{
iframe
.
contentWindow
.
postMessage
(
{
type
:
'
RequestAndConnect
'
options
:
{
filters
:
[
{
services
:
[
health_thermometer
.
name
]
}
]
}
}
'
*
'
)
;
}
)
;
function
messageHandler
(
messageEvent
)
{
if
(
messageEvent
.
data
=
=
'
Connected
'
)
{
window
.
removeEventListener
(
'
message
'
messageHandler
)
;
resolve
(
)
;
}
else
{
reject
(
new
Error
(
Unexpected
message
:
{
messageEvent
.
data
}
)
)
;
}
}
window
.
addEventListener
(
'
message
'
messageHandler
{
once
:
true
}
)
;
}
)
;
const
devices
=
await
iframe
.
contentWindow
.
navigator
.
bluetooth
.
getDevices
(
)
;
assert_equals
(
devices
.
length
1
)
;
return
Object
.
assign
(
{
device
:
devices
[
0
]
}
{
fakes
}
)
;
}
async
function
getDiscoveredHealthThermometerDevice
(
options
=
{
filters
:
[
{
services
:
[
'
health_thermometer
'
]
}
]
}
)
{
let
fake_peripheral
=
await
setUpHealthThermometerDevice
(
)
;
let
device
=
await
requestDeviceWithTrustedClick
(
options
)
;
return
{
device
:
device
fake_peripheral
:
fake_peripheral
}
;
}
async
function
getEmptyHealthThermometerDevice
(
options
)
{
let
result
=
await
getDiscoveredHealthThermometerDevice
(
options
)
;
await
result
.
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
await
result
.
device
.
gatt
.
connect
(
)
;
await
result
.
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
return
result
;
}
async
function
getEmptyHealthThermometerService
(
options
)
{
let
result
=
await
getDiscoveredHealthThermometerDevice
(
options
)
;
await
result
.
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
await
result
.
device
.
gatt
.
connect
(
)
;
let
fake_health_thermometer
=
await
result
.
fake_peripheral
.
addFakeService
(
{
uuid
:
'
health_thermometer
'
}
)
;
await
result
.
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
let
service
=
await
result
.
device
.
gatt
.
getPrimaryService
(
'
health_thermometer
'
)
;
return
{
service
:
service
fake_health_thermometer
:
fake_health_thermometer
}
;
}
async
function
getConnectedHealthThermometerDevice
(
options
)
{
let
result
=
await
getDiscoveredHealthThermometerDevice
(
options
)
;
await
result
.
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
let
fakes
=
await
populateHealthThermometerFakes
(
result
.
fake_peripheral
)
;
await
result
.
device
.
gatt
.
connect
(
)
;
return
Object
.
assign
(
{
device
:
result
.
device
}
fakes
)
;
}
async
function
getHealthThermometerDevice
(
options
)
{
let
result
=
await
getConnectedHealthThermometerDevice
(
options
)
;
await
result
.
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
return
result
;
}
async
function
getTwoHealthThermometerServicesDevice
(
options
)
{
let
result
=
await
getConnectedHealthThermometerDevice
(
options
)
;
let
fake_health_thermometer2
=
await
result
.
fake_peripheral
.
addFakeService
(
{
uuid
:
'
health_thermometer
'
}
)
;
await
result
.
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
return
{
device
:
result
.
device
fake_peripheral
:
result
.
fake_peripheral
fake_generic_access
:
result
.
fake_generic_access
fake_health_thermometer1
:
result
.
fake_health_thermometer
fake_health_thermometer2
:
fake_health_thermometer2
}
;
}
async
function
getHealthThermometerService
(
)
{
let
result
=
await
getHealthThermometerDevice
(
)
;
let
service
=
await
result
.
device
.
gatt
.
getPrimaryService
(
'
health_thermometer
'
)
;
return
Object
.
assign
(
result
{
service
fake_service
:
result
.
fake_health_thermometer
}
)
;
}
async
function
getMeasurementIntervalCharacteristic
(
)
{
let
result
=
await
getHealthThermometerService
(
)
;
let
characteristic
=
await
result
.
service
.
getCharacteristic
(
'
measurement_interval
'
)
;
return
Object
.
assign
(
result
{
characteristic
fake_characteristic
:
result
.
fake_measurement_interval
}
)
;
}
async
function
getUserDescriptionDescriptor
(
)
{
let
result
=
await
getMeasurementIntervalCharacteristic
(
)
;
let
descriptor
=
await
result
.
characteristic
.
getDescriptor
(
'
gatt
.
characteristic_user_description
'
)
;
return
Object
.
assign
(
result
{
descriptor
fake_descriptor
:
result
.
fake_user_description
}
)
;
}
const
heartRateFakeDeviceOptionsDefault
=
{
address
:
'
08
:
08
:
08
:
08
:
08
:
08
'
name
:
'
Heart
Rate
'
knownServiceUUIDs
:
[
'
generic_access
'
'
heart_rate
'
]
connectable
:
false
serviceDiscoveryComplete
:
false
}
;
const
heartRateRequestDeviceOptionsDefault
=
{
filters
:
[
{
services
:
[
'
heart_rate
'
]
}
]
}
;
async
function
getHeartRateDevice
(
setupOptionsOverride
)
{
let
setupOptions
=
createSetupOptions
(
{
fakeDeviceOptions
:
heartRateFakeDeviceOptionsDefault
}
setupOptionsOverride
)
;
return
await
setUpPreconnectedFakeDevice
(
setupOptions
)
;
}
async
function
setUpHealthThermometerAndHeartRateDevices
(
)
{
await
initializeFakeCentral
(
{
state
:
'
powered
-
on
'
}
)
;
return
Promise
.
all
(
[
fake_central
.
simulatePreconnectedPeripheral
(
{
address
:
'
09
:
09
:
09
:
09
:
09
:
09
'
name
:
'
Health
Thermometer
'
manufacturerData
:
{
}
knownServiceUUIDs
:
[
'
generic_access
'
'
health_thermometer
'
]
}
)
fake_central
.
simulatePreconnectedPeripheral
(
{
address
:
'
08
:
08
:
08
:
08
:
08
:
08
'
name
:
'
Heart
Rate
'
manufacturerData
:
{
}
knownServiceUUIDs
:
[
'
generic_access
'
'
heart_rate
'
]
}
)
]
)
;
}
