'
use
strict
'
;
const
test_desc
=
'
Calls
to
getPrimaryServices
when
device
disconnects
and
discovery
'
+
'
times
out
should
reject
promise
rather
than
get
stuck
.
'
;
let
device
;
bluetooth_test
(
async
(
t
)
=
>
{
let
{
device
fake_peripheral
}
=
await
getConnectedHealthThermometerDevice
(
{
filters
:
[
{
services
:
[
'
health_thermometer
'
]
}
]
optionalServices
:
[
'
generic_access
'
]
}
)
;
await
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_CONNECTION_TIMEOUT
}
)
;
await
Promise
.
all
(
[
fake_peripheral
.
simulateGATTDisconnection
(
{
code
:
HCI_SUCCESS
}
)
promise_rejects_dom
(
t
'
NetworkError
'
device
.
gatt
.
getPrimaryServices
(
'
health_thermometer
'
)
)
]
)
;
}
test_desc
'
'
false
)
;
