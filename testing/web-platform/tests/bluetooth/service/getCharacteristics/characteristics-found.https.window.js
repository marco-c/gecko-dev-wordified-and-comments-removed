'
use
strict
'
;
const
test_desc
=
'
Find
all
characteristics
in
a
service
.
'
;
bluetooth_test
(
async
(
)
=
>
{
let
{
device
fake_peripheral
}
=
await
getDiscoveredHealthThermometerDevice
(
)
;
await
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
await
device
.
gatt
.
connect
(
)
;
let
fake_health_thermometer
=
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
health_thermometer
'
}
)
;
await
Promise
.
all
(
[
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
measurement_interval
'
properties
:
[
'
read
'
'
write
'
'
indicate
'
]
}
)
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
measurement_interval
'
properties
:
[
'
read
'
'
write
'
'
indicate
'
]
}
)
fake_health_thermometer
.
addFakeCharacteristic
(
{
uuid
:
'
temperature_measurement
'
properties
:
[
'
indicate
'
]
}
)
]
)
;
await
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
let
service
=
await
device
.
gatt
.
getPrimaryService
(
'
health_thermometer
'
)
;
let
characteristics
=
await
service
.
getCharacteristics
(
)
;
assert_equals
(
characteristics
.
length
3
)
;
let
uuid_set
=
new
Set
(
characteristics
.
map
(
c
=
>
c
.
uuid
)
)
;
assert_equals
(
uuid_set
.
size
2
)
;
assert_true
(
uuid_set
.
has
(
BluetoothUUID
.
getCharacteristic
(
'
measurement_interval
'
)
)
)
;
assert_true
(
uuid_set
.
has
(
BluetoothUUID
.
getCharacteristic
(
'
temperature_measurement
'
)
)
)
;
}
test_desc
)
;
