'
use
strict
'
;
const
test_desc
=
'
Two
iframes
in
the
same
origin
should
be
able
to
access
'
+
'
each
other
\
'
s
services
'
;
const
iframe1
=
document
.
createElement
(
'
iframe
'
)
;
const
iframe2
=
document
.
createElement
(
'
iframe
'
)
;
function
add_iframe
(
iframe
)
{
let
promise
=
new
Promise
(
resolve
=
>
iframe
.
addEventListener
(
'
load
'
resolve
)
)
;
iframe
.
src
=
'
/
bluetooth
/
resources
/
health
-
thermometer
-
iframe
.
html
'
;
document
.
body
.
appendChild
(
iframe
)
;
return
promise
;
}
function
send_message
(
iframe
command
arg
assert_func
)
{
let
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
window
.
addEventListener
(
'
message
'
(
messageEvent
)
=
>
{
try
{
assert_func
(
messageEvent
.
data
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
if
(
command
=
=
=
'
RequestAndConnect
'
)
{
arg
=
{
filters
:
[
{
services
:
[
arg
]
}
]
}
;
}
callWithTrustedClick
(
(
)
=
>
iframe
.
contentWindow
.
postMessage
(
{
type
:
command
options
:
arg
}
'
*
'
)
)
;
return
promise
;
}
bluetooth_test
(
async
(
)
=
>
{
await
getHealthThermometerDevice
(
)
;
await
add_iframe
(
iframe1
)
;
await
send_message
(
iframe1
'
RequestAndConnect
'
'
health_thermometer
'
msg
=
>
assert_equals
(
msg
'
Connected
'
)
)
;
await
send_message
(
iframe1
'
GetService
'
'
health_thermometer
'
msg
=
>
assert_equals
(
msg
'
ServiceReceived
'
)
)
;
await
send_message
(
iframe1
'
GetService
'
'
generic_access
'
msg
=
>
{
let
split_msg
=
msg
.
split
(
'
:
'
)
;
assert_equals
(
split_msg
[
0
]
'
FAIL
'
)
;
assert_equals
(
split_msg
[
1
]
'
SecurityError
'
)
;
}
)
;
await
add_iframe
(
iframe2
)
;
await
send_message
(
iframe2
'
RequestAndConnect
'
'
generic_access
'
msg
=
>
assert_equals
(
msg
'
Connected
'
)
)
;
await
send_message
(
iframe2
'
GetService
'
'
health_thermometer
'
msg
=
>
assert_equals
(
msg
'
ServiceReceived
'
)
)
;
await
send_message
(
iframe2
'
GetService
'
'
generic_access
'
msg
=
>
assert_equals
(
msg
'
ServiceReceived
'
)
)
;
await
send_message
(
iframe1
'
GetService
'
'
generic_access
'
msg
=
>
assert_equals
(
msg
'
ServiceReceived
'
)
)
;
}
test_desc
)
;
