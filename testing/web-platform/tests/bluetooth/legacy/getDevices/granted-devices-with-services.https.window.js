'
use
strict
'
;
const
test_desc
=
'
getDevices
(
)
resolves
with
permitted
devices
that
can
be
'
+
'
GATT
connected
to
.
'
;
bluetooth_test
(
async
(
)
=
>
{
let
fake_peripherals
=
await
setUpHealthThermometerAndHeartRateDevices
(
)
;
for
(
let
fake_peripheral
of
fake_peripherals
)
{
await
fake_peripheral
.
setNextGATTConnectionResponse
(
{
code
:
HCI_SUCCESS
}
)
;
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
generic_access
'
}
)
;
if
(
fake_peripheral
.
address
=
=
=
'
09
:
09
:
09
:
09
:
09
:
09
'
)
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
health_thermometer
'
}
)
;
else
await
fake_peripheral
.
addFakeService
(
{
uuid
:
'
heart_rate
'
}
)
;
await
fake_peripheral
.
setNextGATTDiscoveryResponse
(
{
code
:
HCI_SUCCESS
}
)
;
}
await
requestDeviceWithTrustedClick
(
{
filters
:
[
{
name
:
'
Health
Thermometer
'
services
:
[
'
generic_access
'
]
}
]
}
)
;
let
devices
=
await
navigator
.
bluetooth
.
getDevices
(
)
;
assert_equals
(
devices
.
length
1
getDevices
(
)
should
return
the
'
Health
Thermometer
'
device
.
)
;
try
{
await
devices
[
0
]
.
gatt
.
connect
(
)
;
await
devices
[
0
]
.
gatt
.
getPrimaryService
(
'
generic_access
'
)
;
assert_promise_rejects_with_message
(
devices
[
0
]
.
gatt
.
getPrimaryService
(
'
health_thermometer
'
)
{
name
:
'
SecurityError
'
}
)
;
}
catch
(
err
)
{
assert_unreached
(
{
err
.
name
}
:
{
err
.
message
}
)
;
}
await
requestDeviceWithTrustedClick
(
{
filters
:
[
{
name
:
'
Heart
Rate
'
services
:
[
'
generic_access
'
'
heart_rate
'
]
}
]
}
)
;
devices
=
await
navigator
.
bluetooth
.
getDevices
(
)
;
assert_equals
(
devices
.
length
2
getDevices
(
)
should
return
the
'
Health
Thermometer
'
and
'
Health
+
Monitor
'
devices
)
;
try
{
for
(
let
device
of
devices
)
{
await
device
.
gatt
.
connect
(
)
;
await
device
.
gatt
.
getPrimaryService
(
'
generic_access
'
)
;
if
(
device
.
name
=
=
=
'
Heart
Rate
'
)
{
await
device
.
gatt
.
getPrimaryService
(
'
heart_rate
'
)
;
}
else
{
assert_promise_rejects_with_message
(
devices
[
0
]
.
gatt
.
getPrimaryService
(
'
health_thermometer
'
)
{
name
:
'
SecurityError
'
}
)
;
}
}
}
catch
(
err
)
{
assert_unreached
(
{
err
.
name
}
:
{
err
.
message
}
)
;
}
}
test_desc
)
;
