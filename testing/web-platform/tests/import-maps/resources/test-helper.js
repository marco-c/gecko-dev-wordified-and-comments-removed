let
log
=
[
]
;
function
expect_log
(
test
expected_log
)
{
test
.
step_func_done
(
(
)
=
>
{
const
actual_log
=
log
;
log
=
[
]
;
assert_array_equals
(
actual_log
expected_log
'
fallback
log
'
)
;
}
)
(
)
;
}
const
Result
=
{
FETCH_ERROR
:
"
fetch_error
"
PARSE_ERROR
:
"
parse_error
"
URL
:
"
URL
"
}
;
const
Handler
=
{
ScriptLoadEvent
:
"
<
script
>
element
'
s
load
event
handler
"
ScriptErrorEvent
:
"
<
script
>
element
'
s
error
event
handler
"
WindowErrorEvent
:
"
window
'
s
error
event
handler
"
DynamicImportResolve
:
"
dynamic
import
resolve
"
DynamicImportReject
:
"
dynamic
import
reject
"
}
;
function
getHandlers
(
t
specifier
expected
)
{
let
handlers
=
{
}
;
handlers
[
Handler
.
ScriptLoadEvent
]
=
t
.
unreached_func
(
"
Shouldn
'
t
load
"
)
;
handlers
[
Handler
.
ScriptErrorEvent
]
=
t
.
unreached_func
(
"
script
'
s
error
event
shouldn
'
t
be
fired
"
)
;
handlers
[
Handler
.
WindowErrorEvent
]
=
t
.
unreached_func
(
"
window
'
s
error
event
shouldn
'
t
be
fired
"
)
;
handlers
[
Handler
.
DynamicImportResolve
]
=
t
.
unreached_func
(
"
dynamic
import
promise
shouldn
'
t
be
resolved
"
)
;
handlers
[
Handler
.
DynamicImportReject
]
=
t
.
unreached_func
(
"
dynamic
import
promise
shouldn
'
t
be
rejected
"
)
;
if
(
expected
=
=
=
Result
.
FETCH_ERROR
)
{
handlers
[
Handler
.
ScriptErrorEvent
]
=
(
)
=
>
expect_log
(
t
[
]
)
;
handlers
[
Handler
.
DynamicImportReject
]
=
(
)
=
>
expect_log
(
t
[
]
)
;
}
else
if
(
expected
=
=
=
Result
.
PARSE_ERROR
)
{
let
error_occurred
=
false
;
handlers
[
Handler
.
WindowErrorEvent
]
=
(
)
=
>
{
error_occurred
=
true
;
}
;
handlers
[
Handler
.
ScriptLoadEvent
]
=
t
.
step_func
(
(
)
=
>
{
assert_true
(
error_occurred
"
window
.
onerror
should
be
fired
"
)
;
expect_log
(
t
[
]
)
;
}
)
;
handlers
[
Handler
.
DynamicImportReject
]
=
t
.
step_func
(
(
)
=
>
{
assert_false
(
error_occurred
"
window
.
onerror
shouldn
'
t
be
fired
for
dynamic
imports
"
)
;
expect_log
(
t
[
]
)
;
}
)
;
}
else
{
let
expected_log
;
if
(
expected
=
=
=
Result
.
URL
)
{
const
match_data_url
=
specifier
.
match
(
/
data
:
.
*
log
\
.
push
\
(
'
(
.
*
)
'
\
)
/
)
;
const
match_log_js
=
specifier
.
match
(
/
name
=
(
.
*
)
/
)
;
if
(
match_data_url
)
{
expected_log
=
[
match_data_url
[
1
]
]
;
}
else
if
(
match_log_js
)
{
expected_log
=
[
"
log
:
"
+
match_log_js
[
1
]
]
;
}
else
{
expected_log
=
[
"
relative
:
"
+
specifier
]
;
}
}
else
{
expected_log
=
[
expected
]
;
}
handlers
[
Handler
.
ScriptLoadEvent
]
=
(
)
=
>
expect_log
(
t
expected_log
)
;
handlers
[
Handler
.
DynamicImportResolve
]
=
(
)
=
>
expect_log
(
t
expected_log
)
;
}
return
handlers
;
}
function
testInIframe
(
importMapString
importMapBaseURL
testScript
)
{
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
document
.
body
.
appendChild
(
iframe
)
;
if
(
!
importMapBaseURL
)
{
importMapBaseURL
=
document
.
baseURI
;
}
let
content
=
<
script
src
=
"
/
resources
/
testharness
.
js
"
>
<
/
script
>
<
script
src
=
"
/
import
-
maps
/
resources
/
test
-
helper
.
js
"
>
<
/
script
>
<
base
href
=
"
{
importMapBaseURL
}
"
>
<
script
type
=
"
importmap
"
>
{
importMapString
}
<
/
script
>
<
body
>
<
script
>
setup
(
{
allow_uncaught_exception
:
true
}
)
;
{
testScript
}
<
/
sc
+
ript
>
;
iframe
.
contentDocument
.
write
(
content
)
;
iframe
.
contentDocument
.
close
(
)
;
return
fetch_tests_from_window
(
iframe
.
contentWindow
)
;
}
function
testScriptElement
(
importMapString
importMapBaseURL
specifier
expected
type
)
{
return
testInIframe
(
importMapString
importMapBaseURL
const
t
=
async_test
(
"
{
specifier
}
:
<
script
src
type
=
{
type
}
>
"
)
;
const
handlers
=
getHandlers
(
t
"
{
specifier
}
"
"
{
expected
}
"
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
type
"
"
{
type
}
"
)
;
script
.
setAttribute
(
"
src
"
"
{
specifier
}
"
)
;
script
.
addEventListener
(
"
load
"
handlers
[
Handler
.
ScriptLoadEvent
]
)
;
script
.
addEventListener
(
"
error
"
handlers
[
Handler
.
ScriptErrorEvent
]
)
;
window
.
addEventListener
(
"
error
"
handlers
[
Handler
.
WindowErrorEvent
]
)
;
document
.
body
.
appendChild
(
script
)
;
)
;
}
function
testStaticImport
(
importMapString
importMapBaseURL
specifier
expected
)
{
return
testInIframe
(
importMapString
importMapBaseURL
const
t
=
async_test
(
"
{
specifier
}
:
static
import
"
)
;
const
handlers
=
getHandlers
(
t
"
{
specifier
}
"
"
{
expected
}
"
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
type
"
"
module
"
)
;
script
.
setAttribute
(
"
src
"
"
/
import
-
maps
/
static
-
import
.
py
?
url
=
"
+
encodeURIComponent
(
"
{
specifier
}
"
)
)
;
script
.
addEventListener
(
"
load
"
handlers
[
Handler
.
ScriptLoadEvent
]
)
;
script
.
addEventListener
(
"
error
"
handlers
[
Handler
.
ScriptErrorEvent
]
)
;
window
.
addEventListener
(
"
error
"
handlers
[
Handler
.
WindowErrorEvent
]
)
;
document
.
body
.
appendChild
(
script
)
;
)
;
}
function
testDynamicImport
(
importMapString
importMapBaseURL
specifier
expected
type
)
{
return
testInIframe
(
importMapString
importMapBaseURL
const
t
=
async_test
(
"
{
specifier
}
:
dynamic
import
(
from
{
type
}
)
"
)
;
const
handlers
=
getHandlers
(
t
"
{
specifier
}
"
"
{
expected
}
"
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
type
"
"
{
type
}
"
)
;
script
.
innerText
=
"
import
(
\
\
"
{
specifier
}
\
\
"
)
"
+
"
.
then
(
handlers
[
Handler
.
DynamicImportResolve
]
"
+
"
handlers
[
Handler
.
DynamicImportReject
]
)
;
"
;
script
.
addEventListener
(
"
error
"
t
.
unreached_func
(
"
top
-
level
inline
script
shouldn
'
t
error
"
)
)
;
document
.
body
.
appendChild
(
script
)
;
)
;
}
function
testInIframeInjectBase
(
importMapString
importMapBaseURL
testScript
)
{
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
document
.
body
.
appendChild
(
iframe
)
;
let
content
=
<
script
src
=
"
/
resources
/
testharness
.
js
"
>
<
/
script
>
<
script
src
=
"
/
import
-
maps
/
resources
/
test
-
helper
.
js
"
>
<
/
script
>
<
script
src
=
"
/
import
-
maps
/
resources
/
inject
-
base
.
js
?
pipe
=
sub
&
baseurl
=
{
importMapBaseURL
}
"
>
<
/
script
>
<
script
type
=
"
importmap
"
>
{
importMapString
}
<
/
script
>
<
body
>
<
script
>
setup
(
{
allow_uncaught_exception
:
true
}
)
;
{
testScript
}
<
/
sc
+
ript
>
;
iframe
.
contentDocument
.
write
(
content
)
;
iframe
.
contentDocument
.
close
(
)
;
return
fetch_tests_from_window
(
iframe
.
contentWindow
)
;
}
function
testStaticImportInjectBase
(
importMapString
importMapBaseURL
specifier
expected
)
{
return
testInIframeInjectBase
(
importMapString
importMapBaseURL
const
t
=
async_test
(
"
{
specifier
}
:
static
import
with
inject
<
base
>
"
)
;
const
handlers
=
getHandlers
(
t
"
{
specifier
}
"
"
{
expected
}
"
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
type
"
"
module
"
)
;
script
.
setAttribute
(
"
src
"
"
/
import
-
maps
/
static
-
import
.
py
?
url
=
"
+
encodeURIComponent
(
"
{
specifier
}
"
)
)
;
script
.
addEventListener
(
"
load
"
handlers
[
Handler
.
ScriptLoadEvent
]
)
;
script
.
addEventListener
(
"
error
"
handlers
[
Handler
.
ScriptErrorEvent
]
)
;
window
.
addEventListener
(
"
error
"
handlers
[
Handler
.
WindowErrorEvent
]
)
;
document
.
body
.
appendChild
(
script
)
;
)
;
}
function
testDynamicImportInjectBase
(
importMapString
importMapBaseURL
specifier
expected
type
)
{
return
testInIframeInjectBase
(
importMapString
importMapBaseURL
const
t
=
async_test
(
"
{
specifier
}
:
dynamic
import
(
from
{
type
}
)
with
inject
<
base
>
"
)
;
const
handlers
=
getHandlers
(
t
"
{
specifier
}
"
"
{
expected
}
"
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
type
"
"
{
type
}
"
)
;
script
.
innerText
=
"
import
(
\
\
"
{
specifier
}
\
\
"
)
"
+
"
.
then
(
handlers
[
Handler
.
DynamicImportResolve
]
"
+
"
handlers
[
Handler
.
DynamicImportReject
]
)
;
"
;
script
.
addEventListener
(
"
error
"
t
.
unreached_func
(
"
top
-
level
inline
script
shouldn
'
t
error
"
)
)
;
document
.
body
.
appendChild
(
script
)
;
)
;
}
function
doTests
(
importMapString
importMapBaseURL
tests
)
{
promise_setup
(
function
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
window
.
addEventListener
(
"
load
"
async
(
)
=
>
{
for
(
const
specifier
in
tests
)
{
await
testScriptElement
(
importMapString
importMapBaseURL
specifier
tests
[
specifier
]
[
0
]
"
module
"
)
;
await
testScriptElement
(
importMapString
importMapBaseURL
specifier
tests
[
specifier
]
[
1
]
"
text
/
javascript
"
)
;
await
testStaticImport
(
importMapString
importMapBaseURL
specifier
tests
[
specifier
]
[
2
]
)
;
await
testDynamicImport
(
importMapString
importMapBaseURL
specifier
tests
[
specifier
]
[
3
]
"
module
"
)
;
await
testDynamicImport
(
importMapString
importMapBaseURL
specifier
tests
[
specifier
]
[
3
]
"
text
/
javascript
"
)
;
}
done
(
)
;
resolve
(
)
;
}
)
;
}
)
;
}
{
explicit_done
:
true
}
)
;
}
