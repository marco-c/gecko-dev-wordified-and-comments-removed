export
function
makeGetOptions
(
requestsToUse
mediation
=
"
required
"
)
{
if
(
typeof
requestsToUse
=
=
=
"
string
"
)
{
if
(
requestsToUse
=
=
=
"
default
"
|
|
requestsToUse
=
=
=
"
openid4vp
"
)
{
return
makeGetOptions
(
[
requestsToUse
]
mediation
)
;
}
}
if
(
!
Array
.
isArray
(
requestsToUse
)
|
|
!
requestsToUse
?
.
length
)
{
return
{
digital
:
{
requests
:
requestsToUse
}
mediation
}
;
}
const
requests
=
[
]
;
for
(
const
request
of
requestsToUse
)
{
switch
(
request
)
{
case
"
openid4vp
"
:
requests
.
push
(
makeOID4VPDict
(
)
)
;
break
;
case
"
default
"
:
requests
.
push
(
makeDigitalCredentialRequest
(
undefined
undefined
)
)
;
break
;
default
:
throw
new
Error
(
Unknown
request
type
:
{
request
}
)
;
}
}
return
{
digital
:
{
requests
}
mediation
}
;
}
function
makeDigitalCredentialRequest
(
protocol
=
"
protocol
"
data
=
{
}
)
{
return
{
protocol
data
}
;
}
function
makeOID4VPDict
(
)
{
return
makeDigitalCredentialRequest
(
"
openid4vp
"
{
}
)
;
}
export
function
sendMessage
(
iframe
data
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
!
iframe
.
contentWindow
)
{
reject
(
new
Error
(
"
iframe
.
contentWindow
is
undefined
cannot
send
message
(
something
is
wrong
with
the
test
that
called
this
)
.
"
)
)
;
return
;
}
window
.
addEventListener
(
"
message
"
function
messageListener
(
event
)
{
if
(
event
.
source
=
=
=
iframe
.
contentWindow
)
{
window
.
removeEventListener
(
"
message
"
messageListener
)
;
resolve
(
event
.
data
)
;
}
}
)
;
iframe
.
contentWindow
.
postMessage
(
data
"
*
"
)
;
}
)
;
}
export
function
loadIframe
(
iframe
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
iframe
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
iframe
.
addEventListener
(
"
error
"
reject
{
once
:
true
}
)
;
if
(
!
iframe
.
isConnected
)
{
document
.
body
.
appendChild
(
iframe
)
;
}
iframe
.
src
=
url
.
toString
(
)
;
}
)
;
}
