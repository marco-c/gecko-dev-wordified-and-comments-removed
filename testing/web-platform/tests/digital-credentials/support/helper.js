function
_makeOptionsInternal
(
requestsInputArray
mediation
requestMapping
)
{
const
requests
=
[
]
;
for
(
const
request
of
requestsInputArray
)
{
const
factoryFunction
=
requestMapping
[
request
]
;
if
(
factoryFunction
)
{
requests
.
push
(
factoryFunction
(
)
)
;
}
else
{
throw
new
Error
(
Unknown
request
type
within
array
:
{
request
}
)
;
}
}
return
{
digital
:
{
requests
}
mediation
}
;
}
const
allMappings
=
{
get
:
{
"
openid4vp
"
:
(
)
=
>
makeOID4VPDict
(
)
"
default
"
:
(
)
=
>
makeDigitalCredentialGetRequest
(
undefined
undefined
)
}
create
:
{
"
openid4vci
"
:
(
)
=
>
makeOID4VCIDict
(
)
"
default
"
:
(
)
=
>
makeDigitalCredentialCreateRequest
(
)
}
}
;
function
_makeOptionsUnified
(
type
requestsToUse
mediation
)
{
const
mapping
=
allMappings
[
type
]
;
if
(
!
mapping
)
{
throw
new
Error
(
Internal
error
:
Invalid
options
type
specified
:
{
type
}
)
;
}
const
actualRequestsToUse
=
requestsToUse
=
=
=
undefined
?
[
"
default
"
]
:
requestsToUse
;
if
(
typeof
actualRequestsToUse
=
=
=
'
string
'
)
{
if
(
mapping
[
actualRequestsToUse
]
)
{
return
_makeOptionsInternal
(
[
actualRequestsToUse
]
mediation
mapping
)
;
}
else
{
throw
new
Error
(
Unknown
request
type
string
'
{
actualRequestsToUse
}
'
provided
for
operation
type
'
{
type
}
'
)
;
}
}
if
(
Array
.
isArray
(
actualRequestsToUse
)
)
{
if
(
actualRequestsToUse
.
length
=
=
=
0
)
{
return
{
digital
:
{
requests
:
[
]
}
mediation
}
;
}
return
_makeOptionsInternal
(
actualRequestsToUse
mediation
mapping
)
;
}
return
{
digital
:
{
requests
:
[
]
}
mediation
}
;
}
export
function
makeGetOptions
(
requestsToUse
mediation
=
"
required
"
)
{
return
_makeOptionsUnified
(
'
get
'
requestsToUse
mediation
)
;
}
export
function
makeCreateOptions
(
requestsToUse
mediation
=
"
required
"
)
{
return
_makeOptionsUnified
(
'
create
'
requestsToUse
mediation
)
;
}
function
makeDigitalCredentialGetRequest
(
protocol
=
"
protocol
"
data
=
{
}
)
{
return
{
protocol
data
}
;
}
function
makeOID4VPDict
(
)
{
return
makeDigitalCredentialGetRequest
(
"
openid4vp
"
{
}
)
;
}
function
makeDigitalCredentialCreateRequest
(
protocol
=
"
protocol
"
data
=
{
}
)
{
return
{
protocol
data
}
;
}
function
makeOID4VCIDict
(
)
{
return
makeDigitalCredentialCreateRequest
(
"
openid4vci
"
{
}
)
;
}
export
function
sendMessage
(
iframe
data
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
!
iframe
.
contentWindow
)
{
reject
(
new
Error
(
"
iframe
.
contentWindow
is
undefined
cannot
send
message
(
something
is
wrong
with
the
test
that
called
this
)
.
"
)
)
;
return
;
}
window
.
addEventListener
(
"
message
"
function
messageListener
(
event
)
{
if
(
event
.
source
=
=
=
iframe
.
contentWindow
)
{
window
.
removeEventListener
(
"
message
"
messageListener
)
;
resolve
(
event
.
data
)
;
}
}
)
;
iframe
.
contentWindow
.
postMessage
(
data
"
*
"
)
;
}
)
;
}
export
function
loadIframe
(
iframe
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
iframe
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
iframe
.
addEventListener
(
"
error
"
reject
{
once
:
true
}
)
;
if
(
!
iframe
.
isConnected
)
{
document
.
body
.
appendChild
(
iframe
)
;
}
iframe
.
src
=
url
.
toString
(
)
;
}
)
;
}
