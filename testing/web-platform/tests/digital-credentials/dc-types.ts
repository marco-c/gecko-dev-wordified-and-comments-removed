export
type
ProviderType
=
"
default
"
|
"
openid4vp
"
;
export
type
CredentialMediationRequirement
=
|
"
conditional
"
|
"
optional
"
|
"
required
"
|
"
silent
"
;
export
interface
DigitalCredentialRequest
{
protocol
:
string
;
data
:
object
;
}
export
interface
DigitalCredentialRequestOptions
{
requests
:
DigitalCredentialRequest
[
]
|
any
;
}
export
interface
CredentialRequestOptions
{
digital
:
DigitalCredentialRequestOptions
;
mediation
:
CredentialMediationRequirement
;
}
export
type
IframeActionType
=
|
"
create
"
|
"
get
"
|
"
ping
"
|
"
preventSilentAccess
"
;
export
type
AbortType
=
"
before
"
|
"
after
"
;
export
interface
EventData
{
action
:
IframeActionType
;
abort
?
:
AbortType
;
options
?
:
object
;
needsUserActivation
?
:
boolean
;
}
export
interface
SendMessageData
{
action
:
IframeActionType
;
options
?
:
CredentialRequestOptions
;
}
