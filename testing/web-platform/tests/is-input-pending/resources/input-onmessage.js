onmessage
=
async
e
=
>
{
if
(
e
.
data
!
=
=
'
check
-
input
'
)
return
;
const
discreteOptions
=
{
includeContinuous
:
false
}
;
const
continuousOptions
=
{
includeContinuous
:
true
}
;
const
DISPATCH_WAIT_TIME_MS
=
500
;
const
end
=
performance
.
now
(
)
+
DISPATCH_WAIT_TIME_MS
;
let
hasDiscrete
;
let
hasContinuous
;
do
{
hasDiscrete
=
navigator
.
scheduling
.
isInputPending
(
discreteOptions
)
;
hasContinuous
=
navigator
.
scheduling
.
isInputPending
(
continuousOptions
)
;
}
while
(
performance
.
now
(
)
<
end
&
&
!
(
hasDiscrete
&
&
hasContinuous
)
)
;
e
.
source
.
postMessage
(
{
discrete
:
hasDiscrete
continuous
:
hasContinuous
}
'
*
'
)
;
}
