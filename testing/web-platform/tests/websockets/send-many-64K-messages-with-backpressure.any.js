const
MESSAGES_TO_SEND
=
50
;
const
MESSAGE_SIZE
=
65536
;
promise_test
(
async
t
=
>
{
const
message
=
new
Uint8Array
(
MESSAGE_SIZE
)
;
const
ws
=
new
WebSocket
(
SCHEME_DOMAIN_PORT
+
'
/
receive
-
many
-
with
-
backpressure
'
)
;
let
opened
=
false
;
ws
.
onopen
=
t
.
step_func
(
(
)
=
>
{
opened
=
true
;
for
(
let
i
=
0
;
i
<
MESSAGES_TO_SEND
;
i
+
+
)
{
ws
.
send
(
message
)
;
}
}
)
;
let
responsesReceived
=
0
;
ws
.
onmessage
=
t
.
step_func
(
(
{
data
}
)
=
>
{
assert_equals
(
data
String
(
MESSAGE_SIZE
)
'
size
must
match
'
)
;
if
(
+
+
responsesReceived
=
=
MESSAGES_TO_SEND
)
{
ws
.
close
(
)
;
}
}
)
;
let
resolvePromise
;
const
promise
=
new
Promise
(
resolve
=
>
{
resolvePromise
=
resolve
;
}
)
;
ws
.
onclose
=
t
.
step_func
(
(
{
wasClean
}
)
=
>
{
assert_true
(
opened
'
connection
should
have
been
opened
'
)
;
assert_true
(
wasClean
'
close
should
be
clean
'
)
;
resolvePromise
(
)
;
}
)
;
return
promise
;
}
sending
{
MESSAGES_TO_SEND
}
messages
of
size
{
MESSAGE_SIZE
}
with
+
'
backpressure
applied
should
not
hang
'
)
;
