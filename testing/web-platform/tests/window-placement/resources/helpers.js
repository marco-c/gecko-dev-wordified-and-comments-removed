function
log
(
str
)
{
const
entry
=
document
.
createElement
(
'
li
'
)
;
entry
.
innerHTML
=
str
;
const
loggerElement
=
document
.
getElementById
(
'
logger
'
)
;
loggerElement
.
appendChild
(
entry
)
;
return
entry
;
}
async
function
setUpWindowPlacement
(
setUpTest
setUpButton
)
{
assert_true
(
'
getScreenDetails
'
in
self
&
&
'
isExtended
'
in
screen
API
not
supported
;
use
Chromium
(
not
content_shell
)
and
enable
chrome
:
/
/
flags
/
#
enable
-
experimental
-
web
-
platform
-
features
)
;
if
(
!
screen
.
isExtended
)
log
(
WARNING
:
Use
multiple
screens
for
full
test
coverage
)
;
if
(
window
.
location
.
href
.
startsWith
(
'
file
'
)
)
log
(
WARNING
:
Run
via
'
wpt
serve
'
;
file
URLs
lack
permission
support
)
;
try
{
await
test_driver
.
set_permission
(
{
name
:
'
window
-
placement
'
}
'
granted
'
)
;
}
catch
{
}
const
setUpWatcher
=
new
EventWatcher
(
setUpTest
setUpButton
[
'
click
'
]
)
;
const
setUpClick
=
setUpWatcher
.
wait_for
(
'
click
'
)
;
try
{
await
test_driver
.
click
(
setUpButton
)
;
}
catch
{
}
await
setUpClick
;
setUpButton
.
disabled
=
true
;
}
async
function
addTestTriggerButtonAndAwaitClick
(
buttonContainer
name
test
)
{
const
button
=
document
.
createElement
(
'
button
'
)
;
button
.
innerHTML
=
name
;
const
entry
=
document
.
createElement
(
'
li
'
)
;
entry
.
appendChild
(
button
)
;
buttonContainer
.
appendChild
(
entry
)
;
const
testWatcher
=
new
EventWatcher
(
test
button
[
'
click
'
]
)
;
const
buttonClick
=
testWatcher
.
wait_for
(
'
click
'
)
;
button
.
onclick
=
function
(
)
{
button
.
disabled
=
true
;
}
;
try
{
await
test_driver
.
click
(
button
)
;
}
catch
{
}
await
buttonClick
;
}
