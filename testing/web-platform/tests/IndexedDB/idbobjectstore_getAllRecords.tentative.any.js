'
use
strict
'
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
'
c
'
}
'
Single
item
'
)
;
object_store_get_all_records_test
(
'
generated
'
{
query
:
3
}
'
Single
item
with
generated
key
'
)
;
object_store_get_all_records_test
(
'
empty
'
undefined
'
Empty
object
store
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
undefined
'
Get
all
records
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
}
'
Get
all
records
with
empty
options
'
)
;
object_store_get_all_records_test
(
'
large
-
values
'
undefined
'
Get
all
records
with
large
values
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
count
:
10
}
'
Count
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
bound
(
'
g
'
'
m
'
)
}
'
Query
with
bound
range
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
bound
(
'
g
'
'
m
'
)
count
:
3
}
'
Query
with
bound
range
and
count
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
bound
(
'
g
'
'
k
'
false
true
)
}
'
Query
with
upper
excluded
bound
range
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
bound
(
'
g
'
'
k
'
true
false
)
}
'
Query
with
lower
excluded
bound
range
'
)
;
object_store_get_all_records_test
(
'
generated
'
{
query
:
IDBKeyRange
.
bound
(
4
15
)
count
:
3
}
'
Query
with
bound
range
and
count
for
generated
keys
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
'
Doesn
\
'
t
exist
'
}
'
Query
with
nonexistent
key
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
count
:
0
}
'
Zero
count
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
count
:
4294967295
}
'
Max
value
count
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
upperBound
(
'
0
'
)
}
'
Query
with
empty
range
where
first
key
<
upperBound
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
query
:
IDBKeyRange
.
lowerBound
(
'
zz
'
)
}
'
Query
with
empty
range
where
lowerBound
<
last
key
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
next
'
}
'
Direction
:
next
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
prev
'
}
'
Direction
:
prev
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
nextunique
'
}
'
Direction
:
nextunique
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
prevunique
'
}
'
Direction
:
prevunique
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
prev
'
query
:
IDBKeyRange
.
bound
(
'
b
'
'
x
'
)
}
'
Direction
and
query
'
)
;
object_store_get_all_records_test
(
'
out
-
of
-
line
'
{
direction
:
'
prev
'
query
:
IDBKeyRange
.
bound
(
'
b
'
'
x
'
)
count
:
4
}
'
Direction
query
and
count
'
)
;
object_store_get_all_test_setup
(
'
out
-
of
-
line
'
(
test
connection
expectedRecords
)
=
>
{
const
transaction
=
connection
.
transaction
(
'
out
-
of
-
line
'
'
readonly
'
)
;
const
store
=
transaction
.
objectStore
(
'
out
-
of
-
line
'
)
;
const
request
=
store
.
getAllRecords
(
)
;
transaction
.
commit
(
)
;
transaction
.
oncomplete
=
test
.
unreached_func
(
'
transaction
completed
before
request
succeeded
'
)
;
request
.
onerror
=
test
.
unreached_func
(
'
getAllRecords
request
must
succeed
'
)
;
request
.
onsuccess
=
test
.
step_func
(
(
event
)
=
>
{
const
actualResults
=
event
.
target
.
result
;
assert_records_equals
(
actualResults
expectedRecords
)
;
test
.
done
(
)
;
}
)
;
}
'
Get
all
records
with
transaction
.
commit
(
)
'
)
;
get_all_with_invalid_keys_test
(
'
getAllRecords
'
'
out
-
of
-
line
'
undefined
true
'
Get
all
records
with
invalid
query
keys
'
)
;
