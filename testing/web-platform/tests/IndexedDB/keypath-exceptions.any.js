'
use
strict
'
;
indexeddb_test
(
(
t
db
)
=
>
{
db
.
createObjectStore
(
'
store
'
{
autoIncrement
:
true
keyPath
:
'
a
.
b
.
c
'
}
)
;
}
(
t
db
)
=
>
{
const
tx
=
db
.
transaction
(
'
store
'
'
readwrite
'
{
durability
:
'
relaxed
'
}
)
;
assert_throws_dom
(
'
DataError
'
(
)
=
>
{
tx
.
objectStore
(
'
store
'
)
.
put
(
{
a
:
{
b
:
'
foo
'
}
}
)
;
}
'
Put
should
throw
if
key
can
not
be
inserted
at
key
path
location
.
'
)
;
t
.
done
(
)
;
}
'
The
last
element
of
keypath
is
validated
'
)
;
const
err
=
Error
(
)
;
err
.
name
=
'
getter
'
;
function
throwingGetter
(
)
{
throw
err
;
}
indexeddb_test
(
function
(
t
db
)
{
const
o
=
{
}
;
Object
.
defineProperty
(
o
'
throws
'
{
get
:
throwingGetter
enumerable
:
false
configurable
:
true
}
)
;
const
s1
=
db
.
createObjectStore
(
'
s1
'
{
keyPath
:
'
throws
'
}
)
;
assert_throws_dom
(
'
DataError
'
(
)
=
>
{
s1
.
put
(
o
)
;
}
'
Key
path
failing
to
resolve
should
throw
'
)
;
const
s2
=
db
.
createObjectStore
(
'
s2
'
{
keyPath
:
'
throws
.
x
'
}
)
;
assert_throws_dom
(
'
DataError
'
(
)
=
>
{
s2
.
put
(
o
)
;
}
'
Key
path
failing
to
resolve
should
throw
'
)
;
const
s3
=
db
.
createObjectStore
(
'
s3
'
{
keyPath
:
'
throws
'
autoIncrement
:
true
}
)
;
assert_class_string
(
s3
.
put
(
o
)
'
IDBRequest
'
'
Key
injectability
test
at
throwing
getter
should
succeed
'
)
;
const
s4
=
db
.
createObjectStore
(
'
s4
'
{
keyPath
:
'
throws
.
x
'
autoIncrement
:
true
}
)
;
assert_class_string
(
s4
.
put
(
o
)
'
IDBRequest
'
'
Key
injectability
test
past
throwing
getter
should
succeed
'
)
;
}
(
t
db
)
=
>
{
t
.
done
(
)
;
}
'
Key
path
evaluation
:
Exceptions
from
non
-
enumerable
getters
'
)
;
indexeddb_test
(
function
(
t
db
)
{
const
o
=
{
}
;
Object
.
defineProperty
(
o
'
throws
'
{
get
:
throwingGetter
enumerable
:
true
configurable
:
true
}
)
;
const
s1
=
db
.
createObjectStore
(
'
s1
'
{
keyPath
:
'
throws
'
}
)
;
assert_throws_exactly
(
err
(
)
=
>
{
s1
.
put
(
o
)
;
}
'
Key
path
resolving
to
throwing
getter
rethrows
'
)
;
const
s2
=
db
.
createObjectStore
(
'
s2
'
{
keyPath
:
'
throws
.
x
'
}
)
;
assert_throws_exactly
(
err
(
)
=
>
{
s2
.
put
(
o
)
;
}
'
Key
path
resolving
past
throwing
getter
rethrows
'
)
;
const
s3
=
db
.
createObjectStore
(
'
s3
'
{
keyPath
:
'
throws
'
autoIncrement
:
true
}
)
;
assert_throws_exactly
(
err
(
)
=
>
{
s3
.
put
(
o
)
;
}
'
Key
injectability
test
at
throwing
getter
should
rethrow
'
)
;
const
s4
=
db
.
createObjectStore
(
'
s4
'
{
keyPath
:
'
throws
.
x
'
autoIncrement
:
true
}
)
;
assert_throws_exactly
(
err
(
)
=
>
{
s4
.
put
(
o
)
;
}
'
Key
injectability
test
past
throwing
getter
should
rethrow
'
)
;
}
(
t
db
)
=
>
{
t
.
done
(
)
;
}
'
Key
path
evaluation
:
Exceptions
from
enumerable
getters
'
)
;
indexeddb_test
(
(
t
db
)
=
>
{
function
with_proto_getter
(
f
)
{
return
function
(
)
{
Object
.
defineProperty
(
Object
.
prototype
'
throws
'
{
get
:
throwingGetter
enumerable
:
false
configurable
:
true
}
)
;
try
{
f
(
)
;
}
finally
{
delete
Object
.
prototype
[
'
throws
'
]
;
}
}
;
}
const
s1
=
db
.
createObjectStore
(
'
s1
'
{
keyPath
:
'
throws
'
}
)
;
assert_throws_dom
(
'
DataError
'
with_proto_getter
(
function
(
)
{
s1
.
put
(
{
}
)
;
}
)
'
Key
path
resolving
to
no
own
property
throws
DataError
'
)
;
const
s2
=
db
.
createObjectStore
(
'
s2
'
{
keyPath
:
'
throws
.
x
'
}
)
;
assert_throws_dom
(
'
DataError
'
with_proto_getter
(
function
(
)
{
s2
.
put
(
{
}
)
;
}
)
'
Key
path
resolving
past
no
own
property
throws
DataError
'
)
;
const
s3
=
db
.
createObjectStore
(
'
s3
'
{
keyPath
:
'
throws
'
autoIncrement
:
true
}
)
;
assert_equals
(
s3
.
put
(
{
}
)
.
readyState
'
pending
'
'
put
should
not
throw
due
to
inherited
property
'
)
;
const
s4
=
db
.
createObjectStore
(
'
s4
'
{
keyPath
:
'
throws
.
x
'
autoIncrement
:
true
}
)
;
assert_equals
(
s4
.
put
(
{
}
)
.
readyState
'
pending
'
'
put
should
not
throw
due
to
inherited
property
'
)
;
}
(
t
db
)
=
>
{
t
.
done
(
)
;
}
'
Key
path
evaluation
:
Exceptions
from
non
-
enumerable
getters
on
prototype
'
)
;
indexeddb_test
(
(
t
db
)
=
>
{
function
with_proto_getter
(
f
)
{
return
(
)
=
>
{
Object
.
defineProperty
(
Object
.
prototype
'
throws
'
{
get
:
throwingGetter
enumerable
:
true
configurable
:
true
}
)
;
try
{
f
(
)
;
}
finally
{
delete
Object
.
prototype
[
'
throws
'
]
;
}
}
;
}
const
s1
=
db
.
createObjectStore
(
'
s1
'
{
keyPath
:
'
throws
'
}
)
;
assert_throws_dom
(
'
DataError
'
with_proto_getter
(
function
(
)
{
s1
.
put
(
{
}
)
;
}
)
'
Key
path
resolving
to
no
own
property
throws
DataError
'
)
;
const
s2
=
db
.
createObjectStore
(
'
s2
'
{
keyPath
:
'
throws
.
x
'
}
)
;
assert_throws_dom
(
'
DataError
'
with_proto_getter
(
function
(
)
{
s2
.
put
(
{
}
)
;
}
)
'
Key
path
resolving
past
throwing
getter
rethrows
'
)
;
let
s3
=
db
.
createObjectStore
(
'
s3
'
{
keyPath
:
'
throws
'
autoIncrement
:
true
}
)
;
assert_equals
(
s3
.
put
(
{
}
)
.
readyState
'
pending
'
'
put
should
not
throw
due
to
inherited
property
'
)
;
let
s4
=
db
.
createObjectStore
(
'
s4
'
{
keyPath
:
'
throws
.
x
'
autoIncrement
:
true
}
)
;
assert_equals
(
s4
.
put
(
{
}
)
.
readyState
'
pending
'
'
put
should
not
throw
due
to
inherited
property
'
)
;
}
(
t
db
)
=
>
{
t
.
done
(
)
;
}
'
Key
path
evaluation
:
Exceptions
from
enumerable
getters
on
prototype
'
)
;
indexeddb_test
(
(
t
db
)
=
>
{
const
store
=
db
.
createObjectStore
(
'
store
'
)
;
store
.
createIndex
(
'
index
'
'
index0
'
)
;
}
(
t
db
)
=
>
{
const
tx
=
db
.
transaction
(
'
store
'
'
readwrite
'
{
durability
:
'
relaxed
'
}
)
;
const
array
=
[
]
;
array
[
99
]
=
1
;
let
getter_called
=
0
;
function
with_proto_getter
(
f
)
{
const
prop
=
'
50
'
;
Object
.
defineProperty
(
Object
.
prototype
prop
{
enumerable
:
true
configurable
:
true
get
:
(
)
=
>
{
+
+
getter_called
;
return
'
foo
'
;
}
}
)
;
try
{
return
f
(
)
;
}
finally
{
delete
Object
.
prototype
[
prop
]
;
}
}
const
request
=
with_proto_getter
(
(
)
=
>
tx
.
objectStore
(
'
store
'
)
.
put
(
{
index0
:
array
}
'
key
'
)
)
;
request
.
onerror
=
t
.
unreached_func
(
'
put
should
not
fail
'
)
;
request
.
onsuccess
=
t
.
step_func
(
function
(
)
{
assert_equals
(
getter_called
0
'
Prototype
getter
should
not
be
called
'
)
;
t
.
done
(
)
;
}
)
;
}
'
Array
key
conversion
should
not
invoke
prototype
getters
'
)
;
