function
nameForId
(
id
)
{
return
Object
{
id
}
;
}
async
function
setupAutoincrementDatabase
(
testCase
)
{
const
database
=
await
createDatabase
(
testCase
database
=
>
{
const
store
=
database
.
createObjectStore
(
'
store
'
{
autoIncrement
:
true
keyPath
:
'
id
'
}
)
;
store
.
createIndex
(
'
by_name
'
'
name
'
{
unique
:
true
}
)
;
store
.
createIndex
(
'
by_id
'
'
id
'
{
unique
:
true
}
)
;
for
(
let
i
=
1
;
i
<
=
16
;
+
+
i
)
{
if
(
i
%
2
=
=
0
)
{
store
.
put
(
{
name
:
nameForId
(
i
)
id
:
i
}
)
;
}
else
{
store
.
put
(
{
name
:
nameForId
(
i
)
}
)
;
}
}
}
)
;
const
transaction
=
database
.
transaction
(
[
'
store
'
]
'
readwrite
'
)
;
const
store
=
transaction
.
objectStore
(
'
store
'
)
;
for
(
let
i
=
17
;
i
<
=
32
;
+
+
i
)
{
if
(
i
%
2
=
=
0
)
{
store
.
put
(
{
name
:
nameForId
(
i
)
id
:
i
}
)
;
}
else
{
store
.
put
(
{
name
:
nameForId
(
i
)
}
)
;
}
}
await
promiseForTransaction
(
testCase
transaction
)
;
return
database
;
}
function
idsSortedByStringCompare
(
)
{
const
stringIds
=
[
]
;
for
(
let
i
=
1
;
i
<
=
32
;
+
+
i
)
stringIds
.
push
(
i
)
;
stringIds
.
sort
(
(
a
b
)
=
>
indexedDB
.
cmp
(
{
a
}
{
b
}
)
)
;
return
stringIds
;
}
async
function
iterateCursor
(
testCase
cursorRequest
callback
)
{
const
eventWatcher
=
requestWatcher
(
testCase
cursorRequest
)
;
while
(
true
)
{
const
event
=
await
eventWatcher
.
wait_for
(
'
success
'
)
;
const
cursor
=
event
.
target
.
result
;
if
(
cursor
=
=
=
null
)
return
;
callback
(
cursor
)
;
cursor
.
continue
(
)
;
}
}
async
function
getAllKeysViaCursor
(
testCase
cursorSource
)
{
const
results
=
[
]
;
await
iterateCursor
(
testCase
cursorSource
.
openKeyCursor
(
)
cursor
=
>
{
results
.
push
(
{
key
:
cursor
.
key
primaryKey
:
cursor
.
primaryKey
}
)
;
}
)
;
return
results
;
}
async
function
getAllViaCursor
(
testCase
cursorSource
)
{
const
results
=
[
]
;
await
iterateCursor
(
testCase
cursorSource
.
openCursor
(
)
cursor
=
>
{
results
.
push
(
{
key
:
cursor
.
key
primaryKey
:
cursor
.
primaryKey
value
:
cursor
.
value
}
)
;
}
)
;
return
results
;
}
