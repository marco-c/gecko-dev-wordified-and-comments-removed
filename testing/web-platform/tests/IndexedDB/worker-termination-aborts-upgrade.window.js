async
function
runAsyncFunctionInWorkerThenClose
(
funcToStringify
)
{
const
script
=
/
/
This
script
was
created
by
runAsyncFunctionInWorkerThenClose
let
testFunc
=
{
funcToStringify
.
toString
(
)
}
;
setTimeout
(
async
(
)
=
>
{
await
testFunc
(
)
;
postMessage
(
"
ran
"
)
;
self
.
close
(
)
;
}
0
)
;
;
const
scriptBlob
=
new
Blob
(
[
script
]
)
;
const
url
=
URL
.
createObjectURL
(
scriptBlob
)
;
const
w
=
new
Worker
(
url
)
;
await
new
Promise
(
(
resolve
)
=
>
{
w
.
onmessage
=
(
evt
)
=
>
{
if
(
evt
.
data
=
=
=
"
ran
"
)
{
resolve
(
)
;
}
}
;
}
)
;
URL
.
revokeObjectURL
(
url
)
;
}
promise_test
(
async
t
=
>
{
await
runAsyncFunctionInWorkerThenClose
(
async
function
(
)
{
const
openReq
=
indexedDB
.
open
(
"
aborted
-
upgrade
-
db
"
1
)
;
openReq
.
onupgradeneeded
=
(
event
)
=
>
{
const
db
=
event
.
target
.
result
;
db
.
createObjectStore
(
"
should
-
not
-
be
-
created
"
)
;
}
}
)
;
t
.
add_cleanup
(
(
)
=
>
{
indexedDB
.
deleteDatabase
(
"
aborted
-
upgrade
-
db
"
)
;
}
)
;
let
createdDB
=
await
migrateNamedDatabase
(
t
"
aborted
-
upgrade
-
db
"
1
(
db
)
=
>
{
assert_equals
(
db
.
objectStoreNames
.
length
0
"
DB
should
have
been
empty
"
)
;
db
.
createObjectStore
(
"
should
-
be
-
created
"
)
;
}
)
;
assert_equals
(
createdDB
.
objectStoreNames
.
length
1
"
created
object
store
correctly
"
)
;
assert_equals
(
createdDB
.
objectStoreNames
.
item
(
0
)
"
should
-
be
-
created
"
)
;
}
)
;
