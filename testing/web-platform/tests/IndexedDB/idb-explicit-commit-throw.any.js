setup
(
{
allow_uncaught_exception
:
true
}
)
;
promise_test
(
async
testCase
=
>
{
self
.
addEventListener
(
'
error
'
(
event
)
=
>
{
event
.
preventDefault
(
)
;
}
)
;
const
db
=
await
createDatabase
(
testCase
async
db
=
>
{
await
createBooksStore
(
testCase
db
)
;
}
)
;
const
txn
=
db
.
transaction
(
[
'
books
'
]
'
readwrite
'
)
;
const
objectStore
=
txn
.
objectStore
(
'
books
'
)
;
const
putRequest
=
objectStore
.
put
(
{
isbn
:
'
one
'
title
:
'
title
'
}
)
;
txn
.
commit
(
)
;
putRequest
.
onsuccess
=
(
)
=
>
{
throw
new
Error
(
'
This
error
thrown
after
an
explicit
commit
should
not
'
+
'
prevent
the
transaction
from
committing
.
'
)
;
}
await
promiseForTransaction
(
testCase
txn
)
;
const
txn2
=
db
.
transaction
(
[
'
books
'
]
'
readwrite
'
)
;
const
objectStore2
=
txn2
.
objectStore
(
'
books
'
)
;
const
getRequest
=
objectStore2
.
get
(
'
one
'
)
;
await
promiseForTransaction
(
testCase
txn2
)
;
assert_equals
(
getRequest
.
result
.
title
'
title
'
)
;
}
'
Any
errors
in
callbacks
that
run
after
an
explicit
commit
will
not
stop
'
+
'
the
commit
from
being
processed
.
'
)
;
