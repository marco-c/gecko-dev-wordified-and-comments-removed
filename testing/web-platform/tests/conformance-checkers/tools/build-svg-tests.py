from
__future__
import
print_function
"
"
"
build_svg_tests
.
py
.
This
script
builds
a
set
of
SVG
-
in
-
HTML
test
files
for
the
Nu
Html
Checker
based
on
the
SVG
1
.
1
Second
Edition
Test
Suite
http
:
/
/
www
.
w3
.
org
/
Graphics
/
SVG
/
Test
/
20110816
/
archives
/
W3C_SVG_11_TestSuite
.
tar
.
gz
"
"
"
import
logging
import
os
import
sys
getopt
import
urllib2
valid_svg_files
=
dict
(
[
    
(
'
struct
-
cond
-
02
-
t
-
manual
.
svg
'
'
Source
text
is
not
in
Unicode
Normalization
Form
C
'
)
    
(
'
styling
-
css
-
10
-
f
-
manual
.
svg
'
'
Attribute
FiLl
not
allowed
on
SVG
element
circle
at
this
point
'
)
]
)
invalid_svg_files
=
dict
(
[
    
(
'
animate
-
elem
-
24
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
animate
-
elem
-
77
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
animate
-
pservers
-
grad
-
01
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
conform
-
viewers
-
03
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
coords
-
dom
-
01
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
coords
-
dom
-
02
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
extend
-
namespace
-
01
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
filters
-
color
-
02
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
filters
-
conv
-
02
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
filters
-
conv
-
04
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
filters
-
conv
-
05
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
filters
-
light
-
05
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
fonts
-
glyph
-
04
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
interact
-
pointer
-
02
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
linking
-
a
-
09
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
linking
-
a
-
10
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
masking
-
filter
-
01
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
masking
-
intro
-
01
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
painting
-
marker
-
04
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
paths
-
data
-
18
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
paths
-
data
-
20
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
pservers
-
grad
-
23
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
render
-
elems
-
03
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
shapes
-
rect
-
03
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
cond
-
02
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
dom
-
17
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
dom
-
19
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
frag
-
05
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
image
-
12
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
use
-
11
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
struct
-
use
-
12
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
styling
-
css
-
10
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
styling
-
pres
-
02
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
svgdom
-
over
-
01
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
text
-
dom
-
03
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
text
-
fonts
-
03
-
t
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
text
-
fonts
-
05
-
f
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
text
-
tref
-
02
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
types
-
dom
-
04
-
b
-
manual
.
svg
'
'
DTD
Invalid
'
)
    
(
'
conform
-
viewers
-
02
-
f
-
manual
.
svg
'
'
Newlines
in
data
:
URI
-
not
allowed
by
URL
Standard
or
RFC
2397
.
'
)
    
(
'
coords
-
transformattr
-
01
-
f
-
manual
.
svg
'
'
Numeric
character
reference
expanded
to
carriage
return
-
not
allowed
in
HTML5
-
see
8
.
1
.
4
'
)
    
(
'
fonts
-
overview
-
201
-
t
-
manual
.
svg
'
'
Unsupported
SVG
version
specified
-
specifies
SVG
1
.
2
'
)
    
(
'
script
-
specify
-
01
-
f
-
manual
.
svg
'
'
Attribute
contentscripttype
not
allowed
on
element
svg
at
this
point
-
not
allowed
in
HTML5
-
see
4
.
8
.
18
SVG
'
)
    
(
'
types
-
dom
-
04
-
b
-
manual
.
svg
'
'
Attribute
externalresourcesrequired
not
allowed
on
element
svg
at
this
point
-
not
allowed
in
HTML5
-
see
4
.
8
.
18
SVG
'
)
    
(
'
metadata
-
example
-
01
-
t
-
manual
.
svg
'
'
Element
rdf
:
rdf
not
allowed
as
child
of
element
metadata
in
this
context
-
namespaced
XML
not
allowed
in
HTML5
'
)
]
)
def
build_html_testfiles
(
svgdirectory
htmldirectory
)
:
    
"
"
"
Builds
HTML
test
files
from
SVG
test
suite
folder
.
"
"
"
    
logging
.
debug
(
'
build_html_testfiles
:
IN
'
)
    
testfiles
=
[
]
    
for
filename
in
os
.
listdir
(
svgdirectory
)
:
        
if
filename
.
endswith
(
"
.
svg
"
)
:
            
htmlpathname
=
build_html_test_file
(
filename
svgdirectory
htmldirectory
)
            
if
htmlpathname
:
                
testfiles
.
append
(
htmlpathname
)
        
pass
    
pass
def
build_html_test_file
(
filename
svgdirectory
htmldirectory
)
:
    
"
"
"
Builds
HTML
test
file
by
wrapping
input
SVG
in
boilerplate
HTML
.
"
"
"
    
svgpathname
=
svgdirectory
+
"
/
"
+
filename
    
if
invalid_svg_files
.
has_key
(
filename
)
and
not
valid_svg_files
.
has_key
(
filename
)
:
        
htmlpathname
=
htmldirectory
+
"
/
"
+
filename
.
replace
(
"
-
manual
.
svg
"
"
-
novalid
.
html
"
)
    
else
:
        
htmlpathname
=
htmldirectory
+
"
/
"
+
filename
.
replace
(
"
-
manual
.
svg
"
"
-
isvalid
.
html
"
)
    
logging
.
debug
(
svgpathname
)
    
logging
.
debug
(
htmlpathname
)
    
svgfile
=
open
(
svgpathname
"
rU
"
)
    
svg
=
svgfile
.
read
(
)
    
svgfile
.
close
(
)
    
svg
=
svg
.
replace
(
'
<
?
xml
version
=
"
1
.
0
"
encoding
=
"
UTF
-
8
"
?
>
'
'
'
)
    
svgbefore
=
svg
.
split
(
"
<
d
:
SVGTestCase
"
)
[
0
]
;
    
svgafter
=
svg
.
split
(
"
<
/
d
:
SVGTestCase
>
"
)
[
1
]
;
    
svg
=
svgbefore
+
svgafter
    
if
svg
.
find
(
"
<
!
DOCTYPE
"
)
!
=
-
1
:
        
return
    
htmlfile
=
open
(
htmlpathname
"
w
"
)
    
htmlfile
.
write
(
"
<
!
DOCTYPE
html
>
\
n
"
)
    
htmlfile
.
write
(
"
<
html
lang
=
'
en
'
>
\
n
"
)
    
htmlfile
.
write
(
"
<
head
>
\
n
"
)
    
htmlfile
.
write
(
"
<
title
>
%
s
<
/
title
>
\
n
"
%
os
.
path
.
basename
(
svgpathname
)
)
    
htmlfile
.
write
(
"
<
meta
charset
=
'
utf
-
8
'
>
\
n
"
)
    
htmlfile
.
write
(
"
<
/
head
>
\
n
"
)
    
htmlfile
.
write
(
"
<
body
>
\
n
"
)
    
htmlfile
.
write
(
"
<
h1
>
Source
SVG
:
%
s
<
/
h1
>
\
n
"
%
os
.
path
.
basename
(
svgpathname
)
)
    
htmlfile
.
write
(
svgbefore
)
    
htmlfile
.
write
(
svgafter
)
    
htmlfile
.
write
(
"
<
/
body
>
\
n
"
)
    
htmlfile
.
write
(
"
<
/
html
>
\
n
"
)
    
htmlfile
.
close
(
)
    
return
htmlpathname
def
create_dir_if_missing
(
directory
)
:
    
"
"
"
Create
the
given
directory
if
it
doesn
'
t
exist
"
"
"
    
d
=
os
.
path
.
dirname
(
directory
)
    
if
not
os
.
path
.
exists
(
directory
)
:
        
os
.
makedirs
(
directory
)
def
validate_svg_dtd
(
filename
svg
)
:
    
"
"
"
Prints
legacy
DTD
markup
validation
status
to
stdout
in
a
format
suitable
for
pasting
into
invalid_svg_files
dict
above
.
"
"
"
    
body
=
'
'
    
body
=
body
+
'
-
-
AaB03x
\
r
\
n
'
    
body
=
body
+
'
Content
-
Disposition
:
form
-
data
;
name
=
"
fieldname
"
\
r
\
n
'
    
body
=
body
+
'
\
r
\
n
'
    
body
=
body
+
'
value
\
r
\
n
'
    
body
=
body
+
'
-
-
AaB03x
\
r
\
n
'
    
body
=
body
+
'
Content
-
Disposition
:
form
-
data
;
name
=
"
uploaded_file
"
;
filename
=
"
test
.
svg
"
\
r
\
n
'
    
body
=
body
+
'
Content
-
Type
:
image
/
svg
+
xml
\
r
\
n
'
    
body
=
body
+
'
\
r
\
n
'
    
body
=
body
+
svg
    
body
=
body
+
'
\
r
\
n
'
    
body
=
body
+
'
-
-
AaB03x
-
-
\
r
\
n
'
    
headers
=
{
"
Content
-
type
"
:
"
multipart
/
form
-
data
;
boundary
=
AaB03x
"
"
Content
-
length
"
:
len
(
body
)
}
    
request
=
urllib2
.
Request
(
"
http
:
/
/
validator
.
w3
.
org
/
check
?
charset
=
utf
-
8
&
doctype
=
SVG
+
1
.
1
&
output
=
json
"
data
=
body
headers
=
headers
)
    
response
=
urllib2
.
urlopen
(
request
timeout
=
60
)
    
status
=
response
.
info
(
)
.
getheader
(
'
X
-
W3C
-
Validator
-
Status
'
)
    
logging
.
debug
(
status
)
    
if
status
=
=
"
Valid
"
:
        
return
True
    
print
(
"
(
'
%
s
'
'
DTD
%
s
'
)
"
%
(
filename
status
)
)
    
return
False
def
main
(
)
:
    
logging
.
debug
(
'
main
:
IN
'
)
    
ccdir
=
os
.
path
.
dirname
(
os
.
path
.
dirname
(
os
.
path
.
abspath
(
__file__
)
)
)
    
svgdirectory
=
os
.
path
.
join
(
os
.
path
.
dirname
(
ccdir
)
"
svg
"
"
import
"
)
    
htmldirectory
=
os
.
path
.
join
(
ccdir
"
html
-
svg
"
)
    
try
:
        
opts
args
=
getopt
.
getopt
(
sys
.
argv
[
1
:
]
"
"
[
"
svgdir
=
"
"
outdir
=
"
]
)
    
except
getopt
.
GetoptError
:
        
print
(
'
build
-
svg
-
tests
.
py
-
-
svgdir
<
indir
>
-
-
outdir
<
outdir
>
'
)
        
sys
.
exit
(
2
)
    
for
opt
arg
in
opts
:
        
print
(
opt
arg
)
        
if
opt
in
(
"
-
s
"
"
-
-
svgdir
"
)
:
            
svgdirectory
=
arg
        
elif
opt
in
(
"
-
o
"
"
-
-
outdir
"
)
:
            
htmldirectory
=
arg
    
create_dir_if_missing
(
htmldirectory
)
    
build_html_testfiles
(
svgdirectory
htmldirectory
)
main
(
)
