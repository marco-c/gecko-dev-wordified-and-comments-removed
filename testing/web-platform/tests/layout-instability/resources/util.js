waitForAnimationFrames
=
frameCount
=
>
{
return
new
Promise
(
resolve
=
>
{
const
handleFrame
=
(
)
=
>
{
if
(
-
-
frameCount
<
=
0
)
resolve
(
)
;
else
requestAnimationFrame
(
handleFrame
)
;
}
;
requestAnimationFrame
(
handleFrame
)
;
}
)
;
}
;
waitForAnimationFrame
=
(
)
=
>
waitForAnimationFrames
(
1
)
;
computeExpectedScore
=
(
impactRegionArea
moveDistance
)
=
>
{
const
docElement
=
document
.
documentElement
;
const
viewWidth
=
docElement
.
clientWidth
;
const
viewHeight
=
docElement
.
clientHeight
;
const
viewArea
=
viewWidth
*
viewHeight
;
const
viewMaxDim
=
Math
.
max
(
viewWidth
viewHeight
)
;
const
impactFraction
=
impactRegionArea
/
viewArea
;
const
distanceFraction
=
moveDistance
/
viewMaxDim
;
return
impactFraction
*
distanceFraction
;
}
;
ScoreWatcher
=
function
(
)
{
if
(
PerformanceObserver
.
supportedEntryTypes
.
indexOf
(
"
layout
-
shift
"
)
=
=
-
1
)
throw
new
Error
(
"
Layout
Instability
API
not
supported
"
)
;
this
.
score
=
0
;
const
resetPromise
=
(
)
=
>
{
this
.
promise
=
new
Promise
(
resolve
=
>
{
this
.
resolve
=
(
)
=
>
{
resetPromise
(
)
;
resolve
(
)
;
}
}
)
;
}
;
resetPromise
(
)
;
const
observer
=
new
PerformanceObserver
(
list
=
>
{
list
.
getEntries
(
)
.
forEach
(
entry
=
>
{
this
.
score
+
=
entry
.
value
;
this
.
resolve
(
)
;
}
)
;
}
)
;
observer
.
observe
(
{
entryTypes
:
[
'
layout
-
shift
'
]
}
)
;
}
;
