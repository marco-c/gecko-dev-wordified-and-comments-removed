promise_test
(
(
)
=
>
fetch
(
"
resources
/
IdnaTestV2
.
json
"
)
.
then
(
res
=
>
res
.
json
(
)
)
.
then
(
runTests
)
"
Loading
data
"
)
;
function
encodeHostEndingCodePoints
(
input
)
{
let
output
=
"
"
;
for
(
const
codePoint
of
input
)
{
if
(
[
"
:
"
"
/
"
"
?
"
"
#
"
"
\
\
"
]
.
includes
(
codePoint
)
)
{
output
+
=
encodeURIComponent
(
codePoint
)
;
}
else
{
output
+
=
codePoint
;
}
}
return
output
;
}
function
runTests
(
idnaTests
)
{
for
(
const
idnaTest
of
idnaTests
)
{
if
(
typeof
idnaTest
=
=
=
"
string
"
)
{
continue
}
if
(
idnaTest
.
input
=
=
=
"
"
)
{
continue
}
const
encodedInput
=
encodeHostEndingCodePoints
(
idnaTest
.
input
)
;
test
(
(
)
=
>
{
if
(
idnaTest
.
output
=
=
=
null
)
{
assert_throws_js
(
TypeError
(
)
=
>
new
URL
(
https
:
/
/
{
encodedInput
}
/
x
)
)
;
}
else
{
const
url
=
new
URL
(
https
:
/
/
{
encodedInput
}
/
x
)
;
assert_equals
(
url
.
host
idnaTest
.
output
)
;
assert_equals
(
url
.
hostname
idnaTest
.
output
)
;
assert_equals
(
url
.
pathname
"
/
x
"
)
;
assert_equals
(
url
.
href
https
:
/
/
{
idnaTest
.
output
}
/
x
)
;
}
}
ToASCII
(
"
{
idnaTest
.
input
}
"
)
{
idnaTest
.
comment
?
"
"
+
idnaTest
.
comment
:
"
"
}
)
;
}
}
