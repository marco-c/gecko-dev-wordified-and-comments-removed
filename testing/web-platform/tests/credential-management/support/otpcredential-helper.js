'
use
strict
'
;
async
function
loadChromiumResources
(
)
{
if
(
!
window
.
MojoInterfaceInterceptor
)
{
return
;
}
const
resources
=
[
'
/
gen
/
layout_test_data
/
mojo
/
public
/
js
/
mojo_bindings_lite
.
js
'
'
/
gen
/
mojo
/
public
/
mojom
/
base
/
time
.
mojom
-
lite
.
js
'
'
/
gen
/
third_party
/
blink
/
public
/
mojom
/
sms
/
sms_receiver
.
mojom
-
lite
.
js
'
'
/
resources
/
chromium
/
mock
-
sms
-
receiver
.
js
'
]
;
await
Promise
.
all
(
resources
.
map
(
path
=
>
{
const
script
=
document
.
createElement
(
'
script
'
)
;
script
.
src
=
path
;
script
.
async
=
false
;
const
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
script
.
onload
=
resolve
;
script
.
onerror
=
reject
;
}
)
;
document
.
head
.
appendChild
(
script
)
;
return
promise
;
}
)
)
;
Status
.
kSuccess
=
blink
.
mojom
.
SmsStatus
.
kSuccess
;
Status
.
kTimeout
=
blink
.
mojom
.
SmsStatus
.
kTimeout
;
Status
.
kCancelled
=
blink
.
mojom
.
SmsStatus
.
kCancelled
;
}
;
const
Status
=
{
}
;
async
function
create_sms_provider
(
)
{
if
(
typeof
SmsProvider
=
=
=
'
undefined
'
)
{
await
loadChromiumResources
(
)
;
}
if
(
typeof
SmsProvider
=
=
'
undefined
'
)
{
throw
new
Error
(
'
Mojo
testing
interface
is
not
available
.
'
)
;
}
return
new
SmsProvider
(
)
;
}
function
receive
(
)
{
throw
new
Error
(
"
expected
to
be
overriden
by
tests
"
)
;
}
function
expect
(
call
)
{
return
{
async
andReturn
(
callback
)
{
const
mock
=
await
create_sms_provider
(
)
;
mock
.
pushReturnValuesForTesting
(
call
.
name
callback
)
;
}
}
}
