const
kValidKeys
=
{
rfc
:
"
JrQLj5P
/
89iXES9
+
vFgrIy29clF9CC
/
oPPsw3c5D0bs
=
"
arbitrary
:
"
xDnP380zcL4rJ76rXYjeHlfMyPZEOqpJYjsjEppbuXE
=
"
}
;
const
kInvalidKey
=
"
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
=
"
;
const
kScriptToExecute
=
{
body
:
"
window
.
hello
=
world
;
"
hash
:
"
PZJ
+
9CdAAIacg7wfUe4t
/
RkDQJVKM0mCZ2K7qiRhHFc
=
"
signatures
:
{
rfc
:
"
SBTcEpLwiDpHvxOFkajwl
+
S9Mnwf
+
86JLyhdL1LoMaFbyaqKqdkOu
/
6
/
HyNmKdRJK59heDMaIut5
/
4IXahH
/
Ag
=
=
"
arbitrary
:
"
EaC2ECm9TD
+
W5o1LATMd6YwKX
+
tfl2vZhe9mwKzmFwzHIPsKoegEYX9o
/
a
/
yQ0L
/
rIBWIKYTUaOSQ8Tig0s3Cw
=
=
"
}
}
;
const
kScriptToBlock
=
{
body
:
"
assert_unreached
(
This
code
should
not
execute
.
)
;
"
hash
:
"
FUSFR1N3vTmSGbI7q9jaMbHq
+
ogNeBfpznOIufaIfpc
=
"
signatures
:
{
rfc
:
"
WE
+
KckOA
+
tcmoIlFZjBreg6uMrH7eRLHmioElLIiSaVINe
+
gyAwmvgWsJeoZdFQ7b92zJP3zWymikJsmKuAuAg
=
=
"
arbitrary
:
"
R7yvyU8E
+
nOPB3JVOaGLtIBfldw
/
UCcFGWi4e7uV9KpWvXhFN0ISV
/
g6PXRzGFtmChobjND0PU7tgm0WyafjCQ
=
=
"
}
}
;
let
counter
=
0
;
function
resourceURL
(
data
)
{
counter
+
+
;
data
.
type
=
"
application
/
javascript
"
;
data
.
counter
=
counter
;
let
params
=
new
URLSearchParams
(
data
)
;
return
"
.
/
resource
.
py
?
"
+
params
.
toString
(
)
;
}
const
EXPECT_BLOCKED
=
"
block
"
;
const
EXPECT_LOADED
=
"
loaded
"
;
function
generate_test
(
request_data
integrity
expectation
description
)
{
async_test
(
t
=
>
{
let
s
=
document
.
createElement
(
'
script
'
)
;
s
.
src
=
resourceURL
(
request_data
)
;
s
.
integrity
=
integrity
;
if
(
expectation
=
=
EXPECT_BLOCKED
)
{
s
.
onerror
=
t
.
step_func_done
(
e
=
>
{
assert_equals
(
"
error
"
e
.
type
)
;
}
)
;
s
.
onload
=
t
.
unreached_func
(
"
Script
should
not
execute
.
"
)
;
}
else
{
s
.
onload
=
t
.
step_func_done
(
e
=
>
{
assert_equals
(
"
load
"
e
.
type
)
;
}
)
;
s
.
onerror
=
t
.
unreached_func
(
"
Script
should
not
fail
.
"
)
;
}
document
.
body
.
appendChild
(
s
)
;
}
description
)
;
}
const
kUnsigned
=
{
body
:
kScriptToExecute
[
'
body
'
]
}
;
generate_test
(
kUnsigned
"
"
EXPECT_LOADED
"
No
signature
no
integrity
check
:
loads
.
"
)
;
generate_test
(
kUnsigned
"
ed25519
-
?
?
?
"
EXPECT_LOADED
"
No
signature
malformed
integrity
check
:
loads
.
"
)
;
generate_test
(
kUnsigned
ed25519
-
{
kValidKeys
[
'
rfc
'
]
}
EXPECT_BLOCKED
"
No
signature
valid
integrity
check
:
loads
.
"
)
;
const
kSignedShouldExecute
=
{
body
:
kScriptToExecute
[
'
body
'
]
digest
:
sha
-
256
=
:
{
kScriptToExecute
[
'
hash
'
]
}
:
signatureInput
:
signature
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
rfc
'
]
}
"
;
tag
=
"
sri
"
signature
:
signature
=
:
{
kScriptToExecute
[
'
signatures
'
]
[
'
rfc
'
]
}
:
}
;
const
kSignedShouldBlock
=
{
body
:
kScriptToBlock
[
'
body
'
]
digest
:
sha
-
256
=
:
{
kScriptToBlock
[
'
hash
'
]
}
:
signatureInput
:
signature
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
rfc
'
]
}
"
;
tag
=
"
sri
"
signature
:
signature
=
:
{
kScriptToBlock
[
'
signatures
'
]
[
'
rfc
'
]
}
:
}
;
generate_test
(
kSignedShouldExecute
"
"
EXPECT_LOADED
"
Valid
signature
no
integrity
check
:
loads
.
"
)
;
generate_test
(
kSignedShouldExecute
"
ed25519
-
?
?
?
"
EXPECT_LOADED
"
Valid
signature
malformed
integrity
check
:
loads
.
"
)
;
generate_test
(
kSignedShouldExecute
ed25519
-
{
kValidKeys
[
'
rfc
'
]
}
EXPECT_LOADED
"
Valid
signature
valid
integrity
check
:
loads
.
"
)
;
generate_test
(
kSignedShouldExecute
ed25519
-
{
kValidKeys
[
'
rfc
'
]
}
ed25519
-
{
kValidKeys
[
'
arbitrary
'
]
}
EXPECT_LOADED
"
Valid
signature
one
matching
integrity
check
:
loads
.
"
)
;
generate_test
(
kSignedShouldBlock
ed25519
-
{
kValidKeys
[
'
arbitrary
'
]
}
EXPECT_BLOCKED
"
Valid
signature
mismatched
integrity
check
:
blocked
.
"
)
;
const
kMultiplySignedShouldExecute
=
{
body
:
kScriptToExecute
[
'
body
'
]
digest
:
sha
-
256
=
:
{
kScriptToExecute
[
'
hash
'
]
}
:
signatureInput
:
signature1
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
rfc
'
]
}
"
;
tag
=
"
sri
"
+
signature2
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
arbitrary
'
]
}
"
;
tag
=
"
sri
"
signature
:
signature1
=
:
{
kScriptToExecute
[
'
signatures
'
]
[
'
rfc
'
]
}
:
+
signature2
=
:
{
kScriptToExecute
[
'
signatures
'
]
[
'
arbitrary
'
]
}
:
}
;
const
kMultiplySignedShouldBlock
=
{
body
:
kScriptToBlock
[
'
body
'
]
digest
:
sha
-
256
=
:
{
kScriptToBlock
[
'
hash
'
]
}
:
signatureInput
:
signature1
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
rfc
'
]
}
"
;
tag
=
"
sri
"
+
signature2
=
(
"
identity
-
digest
"
;
sf
)
;
alg
=
"
ed25519
"
;
keyid
=
"
{
kValidKeys
[
'
arbitrary
'
]
}
"
;
tag
=
"
sri
"
signature
:
signature1
=
:
{
kScriptToBlock
[
'
signatures
'
]
[
'
rfc
'
]
}
:
+
signature2
=
:
{
kScriptToBlock
[
'
signatures
'
]
[
'
arbitrary
'
]
}
:
}
;
generate_test
(
kMultiplySignedShouldExecute
"
"
EXPECT_LOADED
"
Valid
signatures
no
integrity
check
:
loads
.
"
)
;
generate_test
(
kMultiplySignedShouldExecute
"
ed25519
-
?
?
?
"
EXPECT_LOADED
"
Valid
signatures
malformed
integrity
check
:
loads
.
"
)
;
generate_test
(
kMultiplySignedShouldExecute
ed25519
-
{
kValidKeys
[
'
rfc
'
]
}
EXPECT_LOADED
"
Valid
signatures
integrity
check
matches
one
:
loads
.
"
)
;
generate_test
(
kMultiplySignedShouldExecute
ed25519
-
{
kValidKeys
[
'
arbitrary
'
]
}
EXPECT_LOADED
"
Valid
signatures
integrity
check
matches
the
other
:
loads
.
"
)
;
generate_test
(
kMultiplySignedShouldExecute
ed25519
-
{
kValidKeys
[
'
rfc
'
]
}
ed25519
-
{
kValidKeys
[
'
arbitrary
'
]
}
EXPECT_LOADED
"
Valid
signatures
integrity
check
matches
both
:
loads
.
"
)
;
generate_test
(
kMultiplySignedShouldBlock
ed25519
-
{
kInvalidKey
}
EXPECT_BLOCKED
"
Valid
signatures
integrity
check
matches
neither
:
blocked
.
"
)
;
