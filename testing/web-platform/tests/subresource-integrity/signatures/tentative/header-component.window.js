const
kBody
=
"
window
.
hello
=
world
;
"
;
const
kDigest
=
"
sha
-
256
=
:
PZJ
+
9CdAAIacg7wfUe4t
/
RkDQJVKM0mCZ2K7qiRhHFc
=
:
"
;
const
kSignatures
=
{
ct_then_digest
:
"
signature
=
:
a5uYGT79upHlmAkq3PsPHr1xz5AXjqmjVbOr38e8HW94
+
YqthWLjPeYVRYkYprb0zDqrreptOB4m5d148uWAAQ
=
=
:
"
digest_then_ct
:
"
signature
=
:
OuJoPVjT
+
cucaPpFGs3hyhdOGcEEgCAaLefYWCwEGdsBFunmFAT6hbMTg
/
vmhLM3raZKKzWqjFkzinWtia8fAA
=
=
:
"
with_extra_header
:
"
signature
=
:
9UFhYYWqUSxadNI4vyPSln1deZGswee7DpRg761SaORKykyewqhD6pEPJBXfEaV9wJrqgq4Nq
+
oJb2Pe25TjDA
=
=
:
"
}
;
const
kRequestsWithValidSignature
=
[
{
body
:
kBody
digest
:
kDigest
signature
:
kSignatures
.
ct_then_digest
signatureInput
:
signature
=
(
"
content
-
type
"
"
unencoded
-
digest
"
;
sf
)
;
keyid
=
"
{
kValidKeys
[
"
rfc
"
]
}
"
;
tag
=
"
sri
"
}
{
body
:
kBody
digest
:
kDigest
signature
:
kSignatures
.
digest_then_ct
signatureInput
:
signature
=
(
"
unencoded
-
digest
"
;
sf
"
content
-
type
"
)
;
keyid
=
"
{
kValidKeys
[
"
rfc
"
]
}
"
;
tag
=
"
sri
"
}
]
;
for
(
const
request
of
kRequestsWithValidSignature
)
{
generate_fetch_test
(
request
{
}
EXPECT_LOADED
Valid
signature
(
{
request
.
signatureInput
}
)
no
integrity
check
:
loads
.
)
;
generate_fetch_test
(
request
{
integrity
:
ed25519
-
{
kValidKeys
[
"
rfc
"
]
}
}
EXPECT_LOADED
Valid
signature
(
{
request
.
signatureInput
}
)
matching
integrity
check
:
loads
.
)
;
generate_fetch_test
(
request
{
integrity
:
ed25519
-
{
kInvalidKey
}
}
EXPECT_BLOCKED
Valid
signature
(
{
request
.
signatureInput
}
)
mismatched
integrity
check
:
blocked
.
)
;
generate_script_test
(
request
"
"
EXPECT_LOADED
Valid
signature
(
{
request
.
signatureInput
}
)
no
integrity
check
:
loads
.
)
;
generate_script_test
(
request
ed25519
-
{
kValidKeys
[
"
rfc
"
]
}
EXPECT_LOADED
Valid
signature
(
{
request
.
signatureInput
}
)
matching
integrity
check
:
loads
.
)
;
generate_script_test
(
request
ed25519
-
{
kInvalidKey
}
EXPECT_BLOCKED
Valid
signature
(
{
request
.
signatureInput
}
)
mismatched
integrity
check
:
blocked
.
)
;
}
const
kFailingRequests
=
[
{
body
:
kBody
digest
:
kDigest
signature
:
kSignatures
.
digest_then_ct
signatureInput
:
signature
=
(
"
unencoded
-
digest
"
;
sf
"
content
-
type
"
)
;
keyid
=
"
{
kValidKeys
[
"
rfc
"
]
}
"
;
tag
=
"
sri
"
type
:
"
text
/
plain
"
description
:
"
Mismatched
header
value
"
}
{
body
:
kBody
digest
:
kDigest
signature
:
kSignatures
.
with_extra_header
signatureInput
:
signature
=
(
"
content
-
type
"
"
x
-
extra
-
header
"
"
unencoded
-
digest
"
;
sf
)
;
keyid
=
"
{
kValidKeys
[
"
rfc
"
]
}
"
;
tag
=
"
sri
"
description
:
"
Missing
signed
header
"
}
]
;
for
(
const
request
of
kFailingRequests
)
{
const
description
=
request
.
description
;
generate_fetch_test
(
request
{
}
EXPECT_BLOCKED
{
description
}
:
blocked
.
)
;
generate_fetch_test
(
request
{
integrity
:
ed25519
-
{
kValidKeys
[
"
rfc
"
]
}
}
EXPECT_BLOCKED
{
description
}
with
matching
integrity
:
blocked
.
)
;
generate_script_test
(
request
"
"
EXPECT_BLOCKED
{
description
}
:
blocked
.
)
;
generate_script_test
(
request
ed25519
-
{
kValidKeys
[
"
rfc
"
]
}
EXPECT_BLOCKED
{
description
}
with
matching
integrity
:
blocked
.
)
;
}
