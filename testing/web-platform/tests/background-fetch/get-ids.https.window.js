'
use
strict
'
;
promise_test
(
async
test
=
>
{
const
script
=
'
resources
/
sw
.
js
'
;
const
scope
=
'
resources
/
scope
'
+
location
.
pathname
;
const
serviceWorkerRegistration
=
await
service_worker_unregister_and_register
(
test
script
scope
)
;
assert_equals
(
serviceWorkerRegistration
.
active
null
'
There
must
not
be
an
activated
worker
'
)
;
const
ids
=
await
serviceWorkerRegistration
.
backgroundFetch
.
getIds
(
)
;
assert_equals
(
ids
.
length
0
)
;
}
'
BackgroundFetchManager
.
getIds
(
)
does
not
require
an
activated
worker
'
)
;
backgroundFetchTest
(
async
(
test
backgroundFetch
)
=
>
{
{
const
ids
=
await
backgroundFetch
.
getIds
(
)
;
assert_equals
(
ids
.
length
0
)
;
}
const
registrationId
=
uniqueId
(
)
;
const
registration
=
await
backgroundFetch
.
fetch
(
registrationId
'
resources
/
feature
-
name
.
txt
'
)
;
assert_equals
(
registration
.
id
registrationId
)
;
{
const
ids
=
await
backgroundFetch
.
getIds
(
)
;
assert_equals
(
ids
.
length
1
)
;
assert_equals
(
ids
[
0
]
registrationId
)
;
}
}
'
The
BackgroundFetchManager
exposes
active
fetches
'
)
;
