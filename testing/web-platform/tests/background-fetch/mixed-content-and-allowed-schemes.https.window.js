'
use
strict
'
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
bgFetch
.
fetch
(
uniqueId
(
)
'
https
:
/
/
example
.
com
'
)
;
}
'
https
:
fetch
should
register
ok
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
127
.
0
.
0
.
1
'
)
;
}
'
loopback
IPv4
http
:
fetch
should
register
ok
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
[
:
:
1
]
'
)
;
}
'
loopback
IPv6
http
:
fetch
should
register
ok
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
localhost
'
)
;
}
'
localhost
http
:
fetch
should
register
ok
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
example
.
com
'
)
)
;
}
'
non
-
loopback
http
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
192
.
0
.
2
.
0
'
)
)
;
}
'
non
-
loopback
IPv4
http
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
http
:
/
/
[
2001
:
db8
:
:
1
]
'
)
)
;
}
'
non
-
loopback
IPv6
http
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
[
'
https
:
/
/
example
.
com
'
'
http
:
/
/
example
.
com
'
]
)
)
;
}
'
https
:
and
non
-
loopback
http
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
[
'
http
:
/
/
example
.
com
'
'
https
:
/
/
example
.
com
'
]
)
)
;
}
'
non
-
loopback
http
:
and
https
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
wss
:
127
.
0
.
0
.
1
'
)
)
;
}
'
wss
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
file
:
/
/
/
'
)
)
;
}
'
file
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
data
:
text
/
plain
foo
'
)
)
;
}
'
data
:
fetch
should
reject
'
)
;
backgroundFetchTest
(
(
t
bgFetch
)
=
>
{
return
promise_rejects
(
t
new
TypeError
(
)
bgFetch
.
fetch
(
uniqueId
(
)
'
foobar
:
bazqux
'
)
)
;
}
'
unknown
scheme
fetch
should
reject
'
)
;
