'
use
strict
'
;
backgroundFetchTest
(
async
(
test
backgroundFetch
)
=
>
{
const
registrationId
=
uniqueId
(
)
;
const
registration
=
await
backgroundFetch
.
fetch
(
registrationId
'
resources
/
feature
-
name
.
txt
'
)
;
assert_equals
(
registration
.
id
registrationId
)
;
assert_equals
(
registration
.
uploadTotal
0
)
;
assert_equals
(
registration
.
uploaded
0
)
;
assert_equals
(
registration
.
downloadTotal
0
)
;
const
{
type
results
}
=
await
getMessageFromServiceWorker
(
)
;
assert_equals
(
'
backgroundfetched
'
type
)
;
assert_equals
(
results
.
length
1
)
;
assert_true
(
results
[
0
]
.
url
.
includes
(
'
resources
/
feature
-
name
.
txt
'
)
)
;
assert_equals
(
results
[
0
]
.
status
200
)
;
assert_equals
(
results
[
0
]
.
text
'
Background
Fetch
'
)
;
}
'
Using
Background
Fetch
to
successfully
fetch
a
single
resource
'
)
;
