'
use
strict
'
const
audioLineRegex
=
/
\
r
\
nm
=
audio
.
+
\
r
\
n
/
g
;
const
videoLineRegex
=
/
\
r
\
nm
=
video
.
+
\
r
\
n
/
g
;
const
applicationLineRegex
=
/
\
r
\
nm
=
application
.
+
\
r
\
n
/
g
;
function
countLine
(
sdp
regex
)
{
const
matches
=
sdp
.
match
(
regex
)
;
if
(
matches
=
=
=
null
)
{
return
0
;
}
else
{
return
matches
.
length
;
}
}
function
countAudioLine
(
sdp
)
{
return
countLine
(
sdp
audioLineRegex
)
;
}
function
countVideoLine
(
sdp
)
{
return
countLine
(
sdp
videoLineRegex
)
;
}
function
countApplicationLine
(
sdp
)
{
return
countLine
(
sdp
applicationLineRegex
)
;
}
function
similarMediaDescriptions
(
sdp1
sdp2
)
{
if
(
sdp1
=
=
=
sdp2
)
{
return
true
;
}
else
if
(
countAudioLine
(
sdp1
)
!
=
=
countAudioLine
(
sdp2
)
|
|
countVideoLine
(
sdp1
)
!
=
=
countVideoLine
(
sdp2
)
|
|
countApplicationLine
(
sdp1
)
!
=
=
countApplicationLine
(
sdp2
)
)
{
return
false
;
}
else
{
return
true
;
}
}
function
assert_is_session_description
(
sessionDesc
)
{
if
(
sessionDesc
instanceof
RTCSessionDescription
)
{
return
;
}
assert_not_equals
(
sessionDesc
undefined
'
Expect
session
description
to
be
defined
'
)
;
assert_true
(
typeof
(
sessionDesc
)
=
=
=
'
object
'
'
Expect
sessionDescription
to
be
either
a
RTCSessionDescription
or
an
object
'
)
;
assert_true
(
typeof
(
sessionDesc
.
type
)
=
=
=
'
string
'
'
Expect
sessionDescription
.
type
to
be
a
string
'
)
;
assert_true
(
typeof
(
sessionDesc
.
sdp
)
=
=
=
'
string
'
'
Expect
sessionDescription
.
sdp
to
be
a
string
'
)
;
}
function
isSimilarSessionDescription
(
sessionDesc1
sessionDesc2
)
{
assert_is_session_description
(
sessionDesc1
)
;
assert_is_session_description
(
sessionDesc2
)
;
if
(
sessionDesc1
.
type
!
=
=
sessionDesc2
.
type
)
{
return
false
;
}
else
{
return
similarMediaDescriptions
(
sessionDesc1
.
sdp
sessionDesc2
.
sdp
)
;
}
}
function
assert_session_desc_similar
(
sessionDesc1
sessionDesc2
)
{
assert_true
(
isSimilarSessionDescription
(
sessionDesc1
sessionDesc2
)
'
Expect
both
session
descriptions
to
have
the
same
count
of
media
lines
'
)
;
}
function
assert_session_desc_not_similar
(
sessionDesc1
sessionDesc2
)
{
assert_false
(
isSimilarSessionDescription
(
sessionDesc1
sessionDesc2
)
'
Expect
both
session
descriptions
to
have
different
count
of
media
lines
'
)
;
}
function
generateOffer
(
options
=
{
}
)
{
const
{
audio
=
false
video
=
false
data
=
false
pc
}
=
options
;
if
(
data
)
{
pc
.
createDataChannel
(
'
test
'
)
;
}
const
setup
=
{
}
;
if
(
audio
)
{
setup
.
offerToReceiveAudio
=
true
;
}
if
(
video
)
{
setup
.
offerToReceiveVideo
=
true
;
}
return
pc
.
createOffer
(
setup
)
.
then
(
offer
=
>
{
const
{
sdp
}
=
offer
;
if
(
audio
)
{
assert_equals
(
countAudioLine
(
sdp
)
1
'
Expect
m
=
audio
line
to
be
present
in
generated
SDP
'
)
;
}
else
{
assert_equals
(
countAudioLine
(
sdp
)
0
'
Expect
m
=
audio
line
to
be
present
in
generated
SDP
'
)
;
}
if
(
video
)
{
assert_equals
(
countVideoLine
(
sdp
)
1
'
Expect
m
=
video
line
to
be
present
in
generated
SDP
'
)
;
}
else
{
assert_equals
(
countVideoLine
(
sdp
)
0
'
Expect
m
=
video
line
to
not
present
in
generated
SDP
'
)
;
}
if
(
data
)
{
assert_equals
(
countApplicationLine
(
sdp
)
1
'
Expect
m
=
application
line
to
be
present
in
generated
SDP
'
)
;
}
else
{
assert_equals
(
countApplicationLine
(
sdp
)
0
'
Expect
m
=
application
line
to
not
present
in
generated
SDP
'
)
;
}
return
offer
;
}
)
;
}
async
function
generateAudioReceiveOnlyOffer
(
pc
)
{
try
{
pc
.
addTransceiver
(
'
audio
'
{
direction
:
'
recvonly
'
}
)
;
return
pc
.
createOffer
(
)
;
}
catch
(
e
)
{
return
pc
.
createOffer
(
{
offerToReceiveAudio
:
true
}
)
;
}
}
async
function
generateVideoReceiveOnlyOffer
(
pc
)
{
try
{
pc
.
addTransceiver
(
'
video
'
{
direction
:
'
recvonly
'
}
)
;
return
pc
.
createOffer
(
)
;
}
catch
(
e
)
{
return
pc
.
createOffer
(
{
offerToReceiveVideo
:
true
}
)
;
}
}
function
generateAnswer
(
offer
)
{
const
pc
=
new
RTCPeerConnection
(
)
;
return
pc
.
setRemoteDescription
(
offer
)
.
then
(
(
)
=
>
pc
.
createAnswer
(
)
)
.
then
(
(
answer
)
=
>
{
pc
.
close
(
)
;
return
answer
;
}
)
;
}
function
test_never_resolve
(
testFunc
testName
)
{
async_test
(
t
=
>
{
testFunc
(
t
)
.
then
(
t
.
step_func
(
result
=
>
{
assert_unreached
(
Pending
promise
should
never
be
resolved
.
Instead
it
is
fulfilled
with
:
{
result
}
)
;
}
)
t
.
step_func
(
err
=
>
{
assert_unreached
(
Pending
promise
should
never
be
resolved
.
Instead
it
is
rejected
with
:
{
err
}
)
;
}
)
)
;
t
.
step_timeout
(
t
.
step_func_done
(
)
100
)
}
testName
)
;
}
function
exchangeIceCandidates
(
pc1
pc2
)
{
function
doExchange
(
localPc
remotePc
)
{
localPc
.
addEventListener
(
'
icecandidate
'
event
=
>
{
const
{
candidate
}
=
event
;
if
(
candidate
&
&
remotePc
.
signalingState
!
=
=
'
closed
'
)
{
remotePc
.
addIceCandidate
(
candidate
)
;
}
}
)
;
}
doExchange
(
pc1
pc2
)
;
doExchange
(
pc2
pc1
)
;
}
function
doSignalingHandshake
(
localPc
remotePc
)
{
return
localPc
.
createOffer
(
)
.
then
(
offer
=
>
Promise
.
all
(
[
localPc
.
setLocalDescription
(
offer
)
remotePc
.
setRemoteDescription
(
offer
)
]
)
)
.
then
(
(
)
=
>
remotePc
.
createAnswer
(
)
)
.
then
(
answer
=
>
Promise
.
all
(
[
remotePc
.
setLocalDescription
(
answer
)
localPc
.
setRemoteDescription
(
answer
)
]
)
)
}
function
createDataChannelPair
(
pc1
=
new
RTCPeerConnection
(
)
pc2
=
new
RTCPeerConnection
(
)
)
{
const
channel1
=
pc1
.
createDataChannel
(
'
'
)
;
exchangeIceCandidates
(
pc1
pc2
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
channel2
;
let
opened1
=
false
;
let
opened2
=
false
;
function
onBothOpened
(
)
{
resolve
(
[
channel1
channel2
]
)
;
}
function
onOpen1
(
)
{
opened1
=
true
;
if
(
opened2
)
onBothOpened
(
)
;
}
function
onOpen2
(
)
{
opened2
=
true
;
if
(
opened1
)
onBothOpened
(
)
;
}
function
onDataChannel
(
event
)
{
channel2
=
event
.
channel
;
channel2
.
addEventListener
(
'
error
'
reject
)
;
const
{
readyState
}
=
channel2
;
if
(
readyState
=
=
=
'
open
'
)
{
onOpen2
(
)
;
}
else
if
(
readyState
=
=
=
'
connecting
'
)
{
channel2
.
addEventListener
(
'
open
'
onOpen2
)
;
}
else
{
reject
(
new
Error
(
Unexpected
ready
state
{
readyState
}
)
)
;
}
}
channel1
.
addEventListener
(
'
open
'
onOpen1
)
;
channel1
.
addEventListener
(
'
error
'
reject
)
;
pc2
.
addEventListener
(
'
datachannel
'
onDataChannel
)
;
doSignalingHandshake
(
pc1
pc2
)
;
}
)
;
}
async
function
waitForRtpAndRtcpStats
(
pc
)
{
while
(
true
)
{
const
report
=
await
pc
.
getStats
(
)
;
const
stats
=
[
.
.
.
report
.
values
(
)
]
.
filter
(
(
{
type
}
)
=
>
type
.
endsWith
(
"
bound
-
rtp
"
)
)
;
if
(
stats
.
length
&
&
stats
.
every
(
(
{
localId
remoteId
}
)
=
>
localId
|
|
remoteId
)
)
{
break
;
}
}
}
function
awaitMessage
(
channel
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
channel
.
addEventListener
(
'
message
'
event
=
>
resolve
(
event
.
data
)
{
once
:
true
}
)
;
channel
.
addEventListener
(
'
error
'
reject
{
once
:
true
}
)
;
}
)
;
}
function
blobToArrayBuffer
(
blob
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
reader
=
new
FileReader
(
)
;
reader
.
addEventListener
(
'
load
'
(
)
=
>
{
resolve
(
reader
.
result
)
;
}
)
;
reader
.
addEventListener
(
'
error
'
reject
)
;
reader
.
readAsArrayBuffer
(
blob
)
;
}
)
;
}
function
assert_equals_array_buffer
(
buffer1
buffer2
)
{
assert_true
(
buffer1
instanceof
ArrayBuffer
'
Expect
buffer
to
be
instance
of
ArrayBuffer
'
)
;
assert_true
(
buffer2
instanceof
ArrayBuffer
'
Expect
buffer
to
be
instance
of
ArrayBuffer
'
)
;
assert_equals
(
buffer1
.
byteLength
buffer2
.
byteLength
'
Expect
both
array
buffers
to
be
of
the
same
byte
length
'
)
;
const
byteLength
=
buffer1
.
byteLength
;
const
byteArray1
=
new
Uint8Array
(
buffer1
)
;
const
byteArray2
=
new
Uint8Array
(
buffer2
)
;
for
(
let
i
=
0
;
i
<
byteLength
;
i
+
+
)
{
assert_equals
(
byteArray1
[
i
]
byteArray2
[
i
]
Expect
byte
at
buffer
position
{
i
}
to
be
equal
)
;
}
}
const
trackFactories
=
{
audioContext
:
null
canCreate
(
requested
)
{
const
supported
=
{
audio
:
!
!
window
.
AudioContext
&
&
!
!
window
.
MediaStreamAudioDestinationNode
video
:
!
!
HTMLCanvasElement
.
prototype
.
captureStream
}
;
return
(
!
requested
.
audio
|
|
supported
.
audio
)
&
&
(
!
requested
.
video
|
|
supported
.
video
)
;
}
audio
(
)
{
const
ctx
=
trackFactories
.
audioContext
=
trackFactories
.
audioContext
|
|
new
AudioContext
(
)
;
const
oscillator
=
ctx
.
createOscillator
(
)
;
const
dst
=
oscillator
.
connect
(
ctx
.
createMediaStreamDestination
(
)
)
;
oscillator
.
start
(
)
;
return
dst
.
stream
.
getAudioTracks
(
)
[
0
]
;
}
video
(
{
width
=
640
height
=
480
}
=
{
}
)
{
const
canvas
=
Object
.
assign
(
document
.
createElement
(
"
canvas
"
)
{
width
height
}
)
;
const
ctx
=
canvas
.
getContext
(
'
2d
'
)
;
const
stream
=
canvas
.
captureStream
(
)
;
let
count
=
0
;
setInterval
(
(
)
=
>
{
ctx
.
fillStyle
=
rgb
(
{
count
%
255
}
{
count
*
count
%
255
}
{
count
%
255
}
)
;
count
+
=
1
;
ctx
.
fillRect
(
0
0
width
height
)
;
}
100
)
;
if
(
document
.
body
)
{
document
.
body
.
appendChild
(
canvas
)
;
}
else
{
document
.
addEventListener
(
'
DOMContentLoaded
'
(
)
=
>
{
document
.
body
.
appendChild
(
canvas
)
;
}
)
;
}
return
stream
.
getVideoTracks
(
)
[
0
]
;
}
}
;
async
function
getNoiseStream
(
caps
=
{
}
)
{
if
(
!
trackFactories
.
canCreate
(
caps
)
)
{
return
navigator
.
mediaDevices
.
getUserMedia
(
caps
)
;
}
const
tracks
=
[
]
;
if
(
caps
.
audio
)
{
tracks
.
push
(
trackFactories
.
audio
(
)
)
;
}
if
(
caps
.
video
)
{
tracks
.
push
(
trackFactories
.
video
(
)
)
;
}
return
new
MediaStream
(
tracks
)
;
}
function
getTrackFromUserMedia
(
kind
)
{
return
getNoiseStream
(
{
[
kind
]
:
true
}
)
.
then
(
mediaStream
=
>
{
const
[
track
]
=
mediaStream
.
getTracks
(
)
;
return
[
track
mediaStream
]
;
}
)
;
}
function
getUserMediaTracksAndStreams
(
count
type
=
'
audio
'
)
{
let
otherTracksPromise
;
if
(
count
>
1
)
otherTracksPromise
=
getUserMediaTracksAndStreams
(
count
-
1
type
)
;
else
otherTracksPromise
=
Promise
.
resolve
(
[
[
]
[
]
]
)
;
return
otherTracksPromise
.
then
(
(
[
tracks
streams
]
)
=
>
{
return
getTrackFromUserMedia
(
type
)
.
then
(
(
[
track
stream
]
)
=
>
{
stream
.
removeTrack
(
track
)
;
tracks
.
push
(
track
)
;
streams
.
push
(
stream
)
;
return
[
tracks
streams
]
;
}
)
;
}
)
;
}
async
function
exchangeOffer
(
caller
callee
)
{
const
offer
=
await
caller
.
createOffer
(
)
;
await
caller
.
setLocalDescription
(
offer
)
;
return
callee
.
setRemoteDescription
(
offer
)
;
}
async
function
exchangeAnswer
(
caller
callee
)
{
const
answer
=
await
callee
.
createAnswer
(
)
;
await
callee
.
setLocalDescription
(
answer
)
;
return
caller
.
setRemoteDescription
(
answer
)
;
}
async
function
exchangeOfferAnswer
(
caller
callee
)
{
await
exchangeOffer
(
caller
callee
)
;
return
exchangeAnswer
(
caller
callee
)
;
}
async
function
exchangeAnswerAndListenToOntrack
(
t
caller
callee
)
{
const
ontrackPromise
=
addEventListenerPromise
(
t
caller
'
track
'
)
;
await
exchangeAnswer
(
caller
callee
)
;
return
ontrackPromise
;
}
async
function
exchangeOfferAndListenToOntrack
(
t
caller
callee
)
{
const
ontrackPromise
=
addEventListenerPromise
(
t
callee
'
track
'
)
;
await
exchangeOffer
(
caller
callee
)
;
return
ontrackPromise
;
}
class
Resolver
{
constructor
(
)
{
let
promiseResolve
;
let
promiseReject
;
this
.
promise
=
new
Promise
(
function
(
resolve
reject
)
{
promiseResolve
=
resolve
;
promiseReject
=
reject
;
}
)
;
this
.
resolve
=
promiseResolve
;
this
.
reject
=
promiseReject
;
}
}
function
addEventListenerPromise
(
t
target
type
listener
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
target
.
addEventListener
(
type
t
.
step_func
(
e
=
>
{
if
(
listener
!
=
undefined
)
e
=
listener
(
e
)
;
resolve
(
e
)
;
}
)
)
;
}
)
;
}
function
createPeerConnectionWithCleanup
(
t
)
{
const
pc
=
new
RTCPeerConnection
(
)
;
t
.
add_cleanup
(
(
)
=
>
pc
.
close
(
)
)
;
return
pc
;
}
async
function
createTrackAndStreamWithCleanup
(
t
kind
=
'
audio
'
)
{
let
constraints
=
{
}
;
constraints
[
kind
]
=
true
;
const
stream
=
await
navigator
.
mediaDevices
.
getUserMedia
(
constraints
)
;
const
[
track
]
=
stream
.
getTracks
(
)
;
t
.
add_cleanup
(
(
)
=
>
track
.
stop
(
)
)
;
return
[
track
stream
]
;
}
function
findTransceiverForSender
(
pc
sender
)
{
const
transceivers
=
pc
.
getTransceivers
(
)
;
for
(
let
i
=
0
;
i
<
transceivers
.
length
;
+
+
i
)
{
if
(
transceivers
[
i
]
.
sender
=
=
sender
)
return
transceivers
[
i
]
;
}
return
null
;
}
