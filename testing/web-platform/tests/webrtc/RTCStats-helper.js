R
'
use
strict
'
;
const
statsValidatorTable
=
{
'
codec
'
:
validateCodecStats
'
inbound
-
rtp
'
:
validateInboundRtpStreamStats
'
outbound
-
rtp
'
:
validateOutboundRtpStreamStats
'
remote
-
inbound
-
rtp
'
:
validateRemoteInboundRtpStreamStats
'
remote
-
outbound
-
rtp
'
:
validateRemoteOutboundRtpStreamStats
'
media
-
source
'
:
validateMediaSourceStats
'
csrc
'
:
validateContributingSourceStats
'
peer
-
connection
'
:
validatePeerConnectionStats
'
data
-
channel
'
:
validateDataChannelStats
'
transceiver
'
:
validateTransceiverStats
'
sender
'
:
validateSenderStats
'
receiver
'
:
validateReceiverStats
'
transport
'
:
validateTransportStats
'
candidate
-
pair
'
:
validateIceCandidatePairStats
'
local
-
candidate
'
:
validateIceCandidateStats
'
remote
-
candidate
'
:
validateIceCandidateStats
'
certificate
'
:
validateCertificateStats
'
ice
-
server
'
:
validateIceServerStats
}
;
function
validateStatsReport
(
statsReport
)
{
for
(
const
[
id
stats
]
of
statsReport
.
entries
(
)
)
{
assert_equals
(
stats
.
id
id
'
expect
stats
.
id
to
be
the
same
as
the
key
in
statsReport
'
)
;
const
validator
=
statsValidatorTable
[
stats
.
type
]
;
if
(
validator
)
{
validator
(
statsReport
stats
)
;
}
else
{
validateRtcStats
(
statsReport
stats
)
;
}
}
}
function
assert_stats_report_has_stats
(
statsReport
statsTypes
)
{
const
hasTypes
=
new
Set
(
[
.
.
.
statsReport
.
values
(
)
]
.
map
(
stats
=
>
stats
.
type
)
)
;
for
(
const
type
of
statsTypes
)
{
assert_true
(
hasTypes
.
has
(
type
)
Expect
statsReport
to
contain
stats
object
of
type
{
type
}
)
;
}
}
function
findStatsFromReport
(
statsReport
predicate
message
)
{
for
(
const
stats
of
statsReport
.
values
(
)
)
{
if
(
predicate
(
stats
)
)
{
return
stats
;
}
}
assert_unreached
(
message
|
|
'
none
of
stats
in
statsReport
satisfy
given
condition
'
)
}
function
getRequiredStats
(
statsReport
type
)
{
for
(
const
stats
of
statsReport
.
values
(
)
)
{
if
(
stats
.
type
=
=
=
type
)
{
return
stats
;
}
}
assert_unreached
(
required
stats
of
type
{
type
}
is
not
found
in
stats
report
)
;
}
function
getStatsById
(
statsReport
statsId
)
{
assert_true
(
statsReport
.
has
(
statsId
)
Expect
stats
report
to
have
stats
object
with
id
{
statsId
}
)
;
return
statsReport
.
get
(
statsId
)
;
}
function
validateIdField
(
statsReport
stats
field
type
)
{
assert_string_field
(
stats
field
)
;
const
linkedStats
=
getStatsById
(
statsReport
stats
[
field
]
)
;
assert_equals
(
linkedStats
.
type
type
Expect
linked
stats
object
to
have
type
{
type
}
)
;
}
function
validateOptionalIdField
(
statsReport
stats
field
type
)
{
if
(
stats
[
field
]
!
=
=
undefined
)
{
validateIdField
(
statsReport
stats
field
type
)
;
}
}
function
validateRtcStats
(
statsReport
stats
)
{
assert_number_field
(
stats
'
timestamp
'
)
;
assert_string_field
(
stats
'
type
'
)
;
assert_string_field
(
stats
'
id
'
)
;
}
function
validateRtpStreamStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_unsigned_int_field
(
stats
'
ssrc
'
)
;
assert_string_field
(
stats
'
kind
'
)
;
assert_enum_field
(
stats
'
kind
'
[
'
audio
'
'
video
'
]
)
validateIdField
(
statsReport
stats
'
transportId
'
'
transport
'
)
;
validateIdField
(
statsReport
stats
'
codecId
'
'
codec
'
)
;
}
function
validateCodecStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_unsigned_int_field
(
stats
'
payloadType
'
)
;
assert_enum_field
(
stats
'
codecType
'
[
'
encode
'
'
decode
'
]
)
;
validateOptionalIdField
(
statsReport
stats
'
transportId
'
'
transport
'
)
;
assert_string_field
(
stats
'
mimeType
'
)
;
assert_unsigned_int_field
(
stats
'
clockRate
'
)
;
assert_unsigned_int_field
(
stats
'
channels
'
)
;
assert_string_field
(
stats
'
sdpFmtpLine
'
)
;
}
function
validateReceivedRtpStreamStats
(
statsReport
stats
)
{
validateRtpStreamStats
(
statsReport
stats
)
;
assert_unsigned_int_field
(
stats
'
packetsReceived
'
)
;
assert_unsigned_int_field
(
stats
'
packetsLost
'
)
;
assert_number_field
(
stats
'
jitter
'
)
;
assert_unsigned_int_field
(
stats
'
packetsDiscarded
'
)
;
assert_unsigned_int_field
(
stats
'
framesDropped
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsRepaired
'
)
;
assert_optional_unsigned_int_field
(
stats
'
burstPacketsLost
'
)
;
assert_optional_unsigned_int_field
(
stats
'
burstPacketsDiscarded
'
)
;
assert_optional_unsigned_int_field
(
stats
'
burstLossCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
burstDiscardCount
'
)
;
assert_optional_number_field
(
stats
'
burstLossRate
'
)
;
assert_optional_number_field
(
stats
'
burstDiscardRate
'
)
;
assert_optional_number_field
(
stats
'
gapLossRate
'
)
;
assert_optional_number_field
(
stats
'
gapDiscardRate
'
)
;
assert_optional_unsigned_int_field
(
stats
'
partialFramesLost
'
)
;
assert_optional_unsigned_int_field
(
stats
'
fullFramesLost
'
)
;
}
function
validateInboundRtpStreamStats
(
statsReport
stats
)
{
validateReceivedRtpStreamStats
(
statsReport
stats
)
;
validateOptionalIdField
(
statsReport
stats
'
trackId
'
'
track
'
)
;
validateIdField
(
statsReport
stats
'
receiverId
'
'
receiver
'
)
;
validateIdField
(
statsReport
stats
'
remoteId
'
'
remote
-
outbound
-
rtp
'
)
;
assert_unsigned_int_field
(
stats
'
framesDecoded
'
)
;
assert_optional_unsigned_int_field
(
stats
'
keyFramesDecoded
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frameWidth
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frameHeight
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frameBitDepth
'
)
;
assert_optional_number_field
(
stats
'
framesPerSecond
'
)
;
assert_optional_unsigned_int_field
(
stats
'
qpSum
'
)
;
assert_optional_number_field
(
stats
'
totalDecodeTime
'
)
;
assert_optional_number_field
(
stats
'
totalInterFrameDelay
'
)
;
assert_optional_number_field
(
stats
'
totalSquaredInterFrameDelay
'
)
;
assert_optional_boolean_field
(
stats
'
voiceActivityFlag
'
)
;
assert_optional_number_field
(
stats
'
lastPacketReceivedTimeStamp
'
)
;
assert_optional_number_field
(
stats
'
averageRtcpInterval
'
)
;
assert_optional_unsigned_int_field
(
stats
'
fecPacketsReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
fecPacketsDiscarded
'
)
;
assert_unsigned_int_field
(
stats
'
bytesReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsFailedDecryption
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsDuplicated
'
)
;
assert_optional_dict_field
(
stats
'
perDscpPacketsReceived
'
)
;
if
(
stats
[
'
perDscpPacketsReceived
'
]
)
{
Object
.
keys
(
stats
[
'
perDscpPacketsReceived
'
]
)
.
forEach
(
k
=
>
assert_equals
(
typeof
k
'
string
'
'
Expect
keys
of
perDscpPacketsReceived
to
be
strings
'
)
)
;
Object
.
values
(
stats
[
'
perDscpPacketsReceived
'
]
)
.
forEach
(
v
=
>
assert_true
(
Number
.
isInteger
(
v
)
&
&
(
v
>
=
0
)
'
Expect
values
of
perDscpPacketsReceived
to
be
strings
'
)
)
;
}
assert_unsigned_int_field
(
stats
'
nackCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
firCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
pliCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
sliCount
'
)
;
assert_optional_number_field
(
stats
'
estimatedPlayoutTimestamp
'
)
;
assert_optional_number_field
(
stats
'
jitterBufferDelay
'
)
;
assert_optional_unsigned_int_field
(
stats
'
jitterBufferEmittedCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
totalSamplesReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
samplesDecodedWithSilk
'
)
;
assert_optional_unsigned_int_field
(
stats
'
samplesDecodedWithCelt
'
)
;
assert_optional_unsigned_int_field
(
stats
'
concealedSamples
'
)
;
assert_optional_unsigned_int_field
(
stats
'
silentConcealedSamples
'
)
;
assert_optional_unsigned_int_field
(
stats
'
concealmentEvents
'
)
;
assert_optional_unsigned_int_field
(
stats
'
insertedSamplesForDeceleration
'
)
;
assert_optional_unsigned_int_field
(
stats
'
removedSamplesForAcceleration
'
)
;
assert_optional_number_field
(
stats
'
audioLevel
'
)
;
assert_optional_number_field
(
stats
'
totalAudioEnergy
'
)
;
assert_optional_number_field
(
stats
'
totalSamplesDuration
'
)
;
assert_unsigned_int_field
(
stats
'
framesReceived
'
)
;
assert_optional_string_field
(
stats
'
decoderImplementation
'
)
;
}
function
validateRemoteInboundRtpStreamStats
(
statsReport
stats
)
{
validateReceivedRtpStreamStats
(
statsReport
stats
)
;
validateIdField
(
statsReport
stats
'
localId
'
'
outbound
-
rtp
'
)
;
assert_number_field
(
stats
'
roundTripTime
'
)
;
assert_optional_number_field
(
stats
'
totalRoundTripTime
'
)
;
assert_optional_number_field
(
stats
'
fractionLost
'
)
;
assert_optional_unsigned_int_field
(
stats
'
reportsReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
roundTripTimeMeasurements
'
)
;
}
function
validateSentRtpStreamStats
(
statsReport
stats
)
{
validateRtpStreamStats
(
statsReport
stats
)
;
assert_unsigned_int_field
(
stats
'
packetsSent
'
)
;
assert_unsigned_int_field
(
stats
'
bytesSent
'
)
;
}
function
validateOutboundRtpStreamStats
(
statsReport
stats
)
{
validateSentRtpStreamStats
(
statsReport
stats
)
validateOptionalIdField
(
statsReport
stats
'
trackId
'
'
track
'
)
;
validateOptionalIdField
(
statsReport
stats
'
mediaSourceId
'
'
media
-
source
'
)
;
validateIdField
(
statsReport
stats
'
senderId
'
'
sender
'
)
;
validateIdField
(
statsReport
stats
'
remoteId
'
'
remote
-
inbound
-
rtp
'
)
;
assert_optional_string_field
(
stats
'
rid
'
)
;
assert_optional_number_field
(
stats
'
lastPacketSentTimestamp
'
)
;
assert_optional_unsigned_int_field
(
stats
'
headerBytesSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsDiscardedOnSend
'
)
;
assert_optional_unsigned_int_field
(
stats
'
bytesDiscardedOnSend
'
)
;
assert_optional_unsigned_int_field
(
stats
'
fecPacketsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
retransmittedPacketsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
retransmittedBytesSent
'
)
;
assert_optional_number_field
(
stats
'
targetBitrate
'
)
;
assert_optional_unsigned_int_field
(
stats
'
totalEncodedBytesTarget
'
)
;
if
(
stats
[
'
kind
'
]
=
=
=
'
video
'
)
{
assert_optional_unsigned_int_field
(
stats
'
frameWidth
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frameHeight
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frameBitDepth
'
)
;
assert_optional_number_field
(
stats
'
framesPerSecond
'
)
;
assert_unsigned_int_field
(
stats
'
framesSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
hugeFramesSent
'
)
;
assert_unsigned_int_field
(
stats
'
framesEncoded
'
)
;
assert_optional_unsigned_int_field
(
stats
'
keyFramesEncoded
'
)
;
assert_optional_unsigned_int_field
(
stats
'
framesDiscardedOnSend
'
)
;
assert_optional_unsigned_int_field
(
stats
'
qpSum
'
)
;
}
else
if
(
stats
[
'
kind
'
]
=
=
=
'
audio
'
)
{
assert_optional_unsigned_int_field
(
stats
'
totalSamplesSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
samplesEncodedWithSilk
'
)
;
assert_optional_unsigned_int_field
(
stats
'
samplesEncodedWithCelt
'
)
;
assert_optional_boolean_field
(
stats
'
voiceActivityFlag
'
)
;
}
assert_optional_number_field
(
stats
'
totalEncodeTime
'
)
;
assert_optional_number_field
(
stats
'
totalPacketSendDelay
'
)
;
assert_optional_number_field
(
stats
'
averageRTCPInterval
'
)
;
if
(
stats
[
'
kind
'
]
=
=
=
'
video
'
)
{
assert_optional_enum_field
(
stats
'
qualityLimitationReason
'
[
'
none
'
'
cpu
'
'
bandwidth
'
'
other
'
]
)
;
assert_optional_dict_field
(
stats
'
qualityLimitationDurations
'
)
;
if
(
stats
[
'
qualityLimitationDurations
'
]
)
{
Object
.
keys
(
stats
[
'
qualityLimitationDurations
'
]
)
.
forEach
(
k
=
>
assert_equals
(
typeof
k
'
string
'
'
Expect
keys
of
qualityLimitationDurations
to
be
strings
'
)
)
;
Object
.
values
(
stats
[
'
qualityLimitationDurations
'
]
)
.
forEach
(
v
=
>
assert_equals
(
typeof
num
'
number
'
'
Expect
values
of
qualityLimitationDurations
to
be
numbers
'
)
)
;
}
assert_optional_unsigned_int_field
(
stats
'
qualityLimitationResolutionChanges
'
)
;
}
assert_unsigned_int_field
(
stats
'
nackCount
'
)
;
assert_optional_dict_field
(
stats
'
perDscpPacketsSent
'
)
;
if
(
stats
[
'
perDscpPacketsSent
'
]
)
{
Object
.
keys
(
stats
[
'
perDscpPacketsSent
'
]
)
.
forEach
(
k
=
>
assert_equals
(
typeof
k
'
string
'
'
Expect
keys
of
perDscpPacketsSent
to
be
strings
'
)
)
;
Object
.
values
(
stats
[
'
perDscpPacketsSent
'
]
)
.
forEach
(
v
=
>
assert_true
(
Number
.
isInteger
(
v
)
&
&
(
v
>
=
0
)
'
Expect
values
of
perDscpPacketsSent
to
be
strings
'
)
)
;
}
assert_optional_unsigned_int_field
(
stats
'
firCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
pliCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
sliCount
'
)
;
assert_optional_string_field
(
stats
'
encoderImplementation
'
)
;
}
function
validateRemoteOutboundRtpStreamStats
(
statsReport
stats
)
{
validateSentRtpStreamStats
(
statsReport
stats
)
;
validateIdField
(
statsReport
stats
'
localId
'
'
inbound
-
rtp
'
)
;
assert_number_field
(
stats
'
remoteTimeStamp
'
)
;
assert_optional_unsigned_int_field
(
stats
'
reportsSent
'
)
;
}
function
validateMediaSourceStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_string_field
(
stats
'
trackIdentifier
'
)
;
assert_enum_field
(
stats
'
kind
'
[
'
audio
'
'
video
'
]
)
;
if
(
stats
.
kind
=
=
=
'
audio
'
)
{
assert_optional_number_field
(
stats
'
audioLevel
'
)
;
assert_number_field
(
stats
'
totalAudioEnergy
'
)
;
assert_number_field
(
stats
'
totalSamplesDuration
'
)
;
assert_optional_number_field
(
stats
'
echoReturnLoss
'
)
;
assert_optional_number_field
(
stats
'
echoReturnLossEnhancement
'
)
;
}
else
if
(
stats
.
kind
=
=
=
'
video
'
)
{
assert_unsigned_int_field
(
stats
'
width
'
)
;
assert_unsigned_int_field
(
stats
'
height
'
)
;
assert_optional_unsigned_int_field
(
stats
'
bitDpeth
'
)
;
assert_optional_unsigned_int_field
(
stats
'
frames
'
)
;
assert_number_field
(
stats
'
framesPerSecond
'
)
;
}
}
function
validateContributingSourceStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_optional_unsigned_int_field
(
stats
'
contributorSsrc
'
)
;
validateOptionalIdField
(
statsReport
stats
'
inboundRtpStreamId
'
'
inbound
-
rtp
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsContributedTo
'
)
;
assert_optional_number_field
(
stats
'
audioLevel
'
)
;
}
function
validatePeerConnectionStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_unsigned_int_field
(
stats
'
dataChannelsOpened
'
)
;
assert_unsigned_int_field
(
stats
'
dataChannelsClosed
'
)
;
assert_optional_unsigned_int_field
(
stats
'
dataChannelsRequested
'
)
;
assert_optional_unsigned_int_field
(
stats
'
dataChannelsAccepted
'
)
;
}
function
validateTransceiverStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
validateOptionalIdField
(
statsReport
stats
'
senderId
'
'
sender
'
)
;
validateOptionalIdField
(
statsReport
stats
'
receiverId
'
'
sender
'
)
;
assert_optional_string_field
(
stats
'
mid
'
)
;
}
function
validateMediaHandlerStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_string_field
(
stats
'
trackIdentifier
'
)
;
assert_optional_boolean_field
(
stats
'
remoteSource
'
)
;
assert_optional_boolean_field
(
stats
'
ended
'
)
;
assert_optional_string_field
(
stats
'
kind
'
)
;
assert_enum_field
(
stats
'
priority
'
[
'
very
-
low
'
'
low
'
'
medium
'
'
high
'
]
)
;
}
function
validateSenderStats
(
statsReport
stats
)
{
validateMediaHandlerStats
(
statsReport
stats
)
;
validateOptionalIdField
(
statsReport
stats
'
mediaSourceId
'
'
media
-
source
'
)
;
}
function
validateReceiverStats
(
statsReport
stats
)
{
validateMediaHandlerStats
(
statsReport
stats
)
;
}
function
validateDataChannelStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_string_field
(
stats
'
label
'
)
;
assert_string_field
(
stats
'
protocol
'
)
;
assert_unsigned_int_field
(
stats
'
dataChannelIdentifier
'
)
;
validateOptionalIdField
(
statsReport
stats
'
transportId
'
'
transport
'
)
;
assert_enum_field
(
stats
'
state
'
[
'
connecting
'
'
open
'
'
closing
'
'
closed
'
]
)
;
assert_unsigned_int_field
(
stats
'
messagesSent
'
)
;
assert_unsigned_int_field
(
stats
'
bytesSent
'
)
;
assert_unsigned_int_field
(
stats
'
messagesReceived
'
)
;
assert_unsigned_int_field
(
stats
'
bytesReceived
'
)
;
}
function
validateTransportStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsReceived
'
)
;
assert_unsigned_int_field
(
stats
'
bytesSent
'
)
;
assert_unsigned_int_field
(
stats
'
bytesReceived
'
)
;
validateOptionalIdField
(
statsReport
stats
'
rtcpTransportStatsId
'
'
transport
'
)
;
assert_optional_enum_field
(
stats
'
iceRole
'
[
'
unknown
'
'
controlling
'
'
controlled
'
]
)
;
assert_optional_enum_field
(
stats
'
dtlsState
'
[
'
new
'
'
connecting
'
'
connected
'
'
closed
'
'
failed
'
]
)
;
validateIdField
(
statsReport
stats
'
selectedCandidatePairId
'
'
candidate
-
pair
'
)
;
validateIdField
(
statsReport
stats
'
localCertificateId
'
'
certificate
'
)
;
validateIdField
(
statsReport
stats
'
remoteCertificateId
'
'
certificate
'
)
;
assert_optional_string_field
(
stats
'
tlsVersion
'
)
;
assert_optional_string_field
(
stats
'
dtlsCipher
'
)
;
assert_optional_string_field
(
stats
'
srtpCipher
'
)
;
assert_optional_string_field
(
stats
'
tlsGroup
'
)
;
assert_optional_unsigned_int_field
(
stats
'
selectedCandidatePairChanges
'
)
;
}
function
validateIceCandidateStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
validateOptionalIdField
(
statsReport
stats
'
transportId
'
'
transport
'
)
;
assert_string_field
(
stats
'
address
'
)
;
assert_unsigned_int_field
(
stats
'
port
'
)
;
assert_string_field
(
stats
'
protocol
'
)
;
assert_enum_field
(
stats
'
candidateType
'
[
'
host
'
'
srflx
'
'
prflx
'
'
relay
'
]
)
;
assert_optional_int_field
(
stats
'
priority
'
)
;
assert_string_field
(
stats
'
url
'
)
;
assert_optional_string_field
(
stats
'
relayProtocol
'
)
;
}
function
validateIceCandidatePairStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
validateIdField
(
statsReport
stats
'
transportId
'
'
transport
'
)
;
validateIdField
(
statsReport
stats
'
localCandidateId
'
'
local
-
candidate
'
)
;
validateIdField
(
statsReport
stats
'
remoteCandidateId
'
'
remote
-
candidate
'
)
;
assert_enum_field
(
stats
'
state
'
[
'
frozen
'
'
waiting
'
'
in
-
progress
'
'
failed
'
'
succeeded
'
]
)
;
assert_boolean_field
(
stats
'
nominated
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsReceived
'
)
;
assert_unsigned_int_field
(
stats
'
bytesSent
'
)
;
assert_unsigned_int_field
(
stats
'
bytesReceived
'
)
;
assert_optional_number_field
(
stats
'
lastPacketSentTimestamp
'
)
;
assert_optional_number_field
(
stats
'
lastPacketReceivedTimestamp
'
)
;
assert_optional_number_field
(
stats
'
firstRequestTimestamp
'
)
;
assert_optional_number_field
(
stats
'
lastRequestTimestamp
'
)
;
assert_optional_number_field
(
stats
'
lastResponseTimestamp
'
)
;
assert_number_field
(
stats
'
totalRoundTripTime
'
)
;
assert_number_field
(
stats
'
currentRoundTripTime
'
)
;
assert_optional_number_field
(
stats
'
availableOutgoingBitrate
'
)
;
assert_optional_number_field
(
stats
'
availableIncomingBitrate
'
)
;
assert_optional_unsigned_int_field
(
stats
'
circuitBreakerTriggerCount
'
)
;
assert_optional_unsigned_int_field
(
stats
'
requestsReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
requestsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
responsesReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
responsesSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
retransmissionsReceived
'
)
;
assert_optional_unsigned_int_field
(
stats
'
retransmissionsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
consentRequestsSent
'
)
;
assert_optional_number_field
(
stats
'
consentExpiredTimestamp
'
)
;
assert_optional_unsigned_int_field
(
stats
'
packetsDiscardedOnSend
'
)
;
assert_optional_unsigned_int_field
(
stats
'
bytesDiscardedOnSend
'
)
;
}
function
validateCertificateStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_string_field
(
stats
'
fingerprint
'
)
;
assert_string_field
(
stats
'
fingerprintAlgorithm
'
)
;
assert_string_field
(
stats
'
base64Certificate
'
)
;
assert_optional_string_field
(
stats
'
issuerCertificateId
'
)
;
}
function
validateIceServerStats
(
statsReport
stats
)
{
validateRtcStats
(
statsReport
stats
)
;
assert_optional_string_field
(
stats
'
url
'
)
;
assert_optional_int_field
(
stats
'
port
'
)
;
assert_optional_string_field
(
stats
'
protocol
'
)
;
assert_optional_unsigned_int_field
(
stats
'
totalRequestsSent
'
)
;
assert_optional_unsigned_int_field
(
stats
'
totalResponsesReceived
'
)
;
assert_optional_number_field
(
stats
'
totalRoundTripTime
'
)
;
}
