'
use
strict
'
;
function
createDtmfSender
(
pc
=
new
RTCPeerConnection
(
)
)
{
return
getTrackFromUserMedia
(
'
audio
'
)
.
then
(
(
[
track
mediaStream
]
)
=
>
{
const
sender
=
pc
.
addTrack
(
track
mediaStream
)
;
const
dtmfSender
=
sender
.
dtmf
;
assert_true
(
dtmfSender
instanceof
RTCDTMFSender
'
Expect
audio
sender
.
dtmf
to
be
set
to
a
RTCDTMFSender
'
)
;
return
dtmfSender
;
}
)
;
}
function
test_tone_change_events
(
testFunc
toneChanges
desc
)
{
async_test
(
t
=
>
{
const
pc
=
new
RTCPeerConnection
(
)
;
createDtmfSender
(
pc
)
.
then
(
dtmfSender
=
>
{
let
lastEventTime
=
Date
.
now
(
)
;
const
onToneChange
=
t
.
step_func
(
ev
=
>
{
assert_true
(
ev
instanceof
RTCDTMFToneChangeEvent
'
Expect
tone
change
event
object
to
be
an
RTCDTMFToneChangeEvent
'
)
;
const
{
tone
}
=
ev
;
assert_equals
(
typeof
tone
'
string
'
'
Expect
event
.
tone
to
be
the
tone
string
'
)
;
assert_greater_than
(
toneChanges
.
length
0
'
More
tonechange
event
is
fired
than
expected
'
)
;
const
[
expectedTone
expectedToneBuffer
expectedDuration
]
=
toneChanges
.
shift
(
)
;
assert_equals
(
tone
expectedTone
Expect
current
event
.
tone
to
be
{
expectedTone
}
)
;
assert_equals
(
dtmfSender
.
toneBuffer
expectedToneBuffer
Expect
dtmfSender
.
toneBuffer
to
be
updated
to
{
expectedToneBuffer
}
)
;
const
now
=
Date
.
now
(
)
;
const
duration
=
now
-
lastEventTime
;
assert_approx_equals
(
duration
expectedDuration
150
Expect
tonechange
event
for
"
{
tone
}
"
to
be
fired
approximately
after
{
expectedDuration
}
seconds
)
;
lastEventTime
=
now
;
if
(
toneChanges
.
length
=
=
=
0
)
{
t
.
step_timeout
(
t
.
step_func
(
(
)
=
>
{
t
.
done
(
)
;
pc
.
close
(
)
;
}
)
expectedDuration
+
100
)
;
}
}
)
;
dtmfSender
.
addEventListener
(
'
tonechange
'
onToneChange
)
;
testFunc
(
t
dtmfSender
pc
)
;
}
)
.
catch
(
t
.
step_func
(
err
=
>
{
assert_unreached
(
Unexpected
promise
rejection
:
{
err
}
)
;
}
)
)
;
}
desc
)
;
}
function
getTransceiver
(
pc
)
{
const
transceivers
=
pc
.
getTransceivers
(
)
;
assert_equals
(
transceivers
.
length
1
'
Expect
there
to
be
only
one
tranceiver
in
pc
'
)
;
return
transceivers
[
0
]
;
}
