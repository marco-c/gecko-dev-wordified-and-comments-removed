'
use
strict
'
;
function
createDtmfSender
(
pc
=
new
RTCPeerConnection
(
)
)
{
let
dtmfSender
;
return
getTrackFromUserMedia
(
'
audio
'
)
.
then
(
(
[
track
mediaStream
]
)
=
>
{
const
sender
=
pc
.
addTrack
(
track
mediaStream
)
;
dtmfSender
=
sender
.
dtmf
;
assert_true
(
dtmfSender
instanceof
RTCDTMFSender
'
Expect
audio
sender
.
dtmf
to
be
set
to
a
RTCDTMFSender
'
)
;
const
pc2
=
new
RTCPeerConnection
(
)
;
Object
.
defineProperty
(
pc
'
otherPc
'
{
value
:
pc2
}
)
;
exchangeIceCandidates
(
pc
pc2
)
;
return
exchangeOfferAnswer
(
pc
pc2
)
;
}
)
.
then
(
(
)
=
>
{
if
(
!
(
'
canInsertDTMF
'
in
dtmfSender
)
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
counter
=
0
;
step_timeout
(
function
checkCanInsertDTMF
(
)
{
if
(
dtmfSender
.
canInsertDTMF
)
{
resolve
(
)
;
}
else
{
if
(
counter
>
=
100
)
{
reject
(
'
Waited
too
long
for
canInsertDTMF
'
)
;
return
;
}
+
+
counter
;
step_timeout
(
checkCanInsertDTMF
10
)
;
}
}
0
)
;
}
)
;
}
)
.
then
(
(
)
=
>
{
return
dtmfSender
;
}
)
;
}
function
test_tone_change_events
(
testFunc
toneChanges
desc
)
{
let
cumulativeTime
=
0
;
const
cumulativeToneChanges
=
toneChanges
.
map
(
c
=
>
{
cumulativeTime
+
=
c
[
2
]
;
return
[
c
[
0
]
c
[
1
]
cumulativeTime
]
;
}
)
;
const
lastWait
=
toneChanges
.
pop
(
)
[
2
]
+
100
;
promise_test
(
async
t
=
>
{
const
pc
=
new
RTCPeerConnection
(
)
;
const
dtmfSender
=
await
createDtmfSender
(
pc
)
;
const
start
=
Date
.
now
(
)
;
const
allEventsReceived
=
new
Promise
(
resolve
=
>
{
const
onToneChange
=
t
.
step_func
(
ev
=
>
{
assert_true
(
ev
instanceof
RTCDTMFToneChangeEvent
'
Expect
tone
change
event
object
to
be
an
RTCDTMFToneChangeEvent
'
)
;
const
{
tone
}
=
ev
;
assert_equals
(
typeof
tone
'
string
'
'
Expect
event
.
tone
to
be
the
tone
string
'
)
;
assert_greater_than
(
cumulativeToneChanges
.
length
0
'
More
tonechange
event
is
fired
than
expected
'
)
;
const
[
expectedTone
expectedToneBuffer
expectedTime
]
=
cumulativeToneChanges
.
shift
(
)
;
assert_equals
(
tone
expectedTone
Expect
current
event
.
tone
to
be
{
expectedTone
}
)
;
assert_equals
(
dtmfSender
.
toneBuffer
expectedToneBuffer
Expect
dtmfSender
.
toneBuffer
to
be
updated
to
{
expectedToneBuffer
}
)
;
assert_between_inclusive
(
Date
.
now
(
)
-
start
Math
.
max
(
0
expectedTime
-
1
)
expectedTime
+
4000
Expect
tonechange
event
for
"
{
tone
}
"
to
be
fired
approximately
after
{
expectedTime
}
milliseconds
)
;
if
(
cumulativeToneChanges
.
length
=
=
=
0
)
{
resolve
(
)
;
}
}
)
;
dtmfSender
.
addEventListener
(
'
tonechange
'
onToneChange
)
;
}
)
;
testFunc
(
t
dtmfSender
pc
)
;
await
allEventsReceived
;
const
wait
=
ms
=
>
new
Promise
(
resolve
=
>
t
.
step_timeout
(
resolve
ms
)
)
;
await
wait
(
lastWait
)
;
}
desc
)
;
}
function
getTransceiver
(
pc
)
{
const
transceivers
=
pc
.
getTransceivers
(
)
;
assert_equals
(
transceivers
.
length
1
'
Expect
there
to
be
only
one
tranceiver
in
pc
'
)
;
return
transceivers
[
0
]
;
}
