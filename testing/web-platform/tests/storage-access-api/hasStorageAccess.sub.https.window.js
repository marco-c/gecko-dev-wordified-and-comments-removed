'
use
strict
'
;
const
{
secure
testPrefix
topLevelDocument
}
=
processQueryParams
(
)
;
test
(
(
)
=
>
{
assert_not_equals
(
document
.
hasStorageAccess
undefined
)
;
}
"
[
"
+
testPrefix
+
"
]
document
.
hasStorageAccess
(
)
should
exist
on
the
document
interface
"
)
;
promise_test
(
async
(
)
=
>
{
const
hasAccess
=
await
document
.
hasStorageAccess
(
)
;
if
(
secure
)
{
assert_true
(
hasAccess
"
Access
should
be
granted
by
default
.
"
)
;
}
else
{
assert_false
(
hasAccess
"
Access
should
not
be
granted
in
insecure
contexts
.
"
)
;
}
}
[
{
testPrefix
}
]
document
.
hasStorageAccess
(
)
should
be
{
secure
?
"
allowed
"
:
"
disallowed
"
}
by
default
.
)
;
promise_test
(
async
(
t
)
=
>
{
const
description
=
"
Promise
should
reject
when
called
on
a
generated
document
not
part
of
the
DOM
.
"
;
const
createdDocument
=
document
.
implementation
.
createDocument
(
"
"
null
)
;
await
createdDocument
.
hasStorageAccess
(
)
.
then
(
t
.
unreached_func
(
"
Should
have
rejected
:
"
+
description
)
(
e
)
=
>
{
assert_equals
(
e
.
name
'
InvalidStateError
'
description
)
;
}
)
;
}
"
[
"
+
testPrefix
+
"
]
document
.
hasStorageAccess
(
)
should
reject
in
a
document
that
isn
'
t
fully
active
.
"
)
;
if
(
topLevelDocument
)
{
RunTestsInIFrame
(
"
resources
/
hasStorageAccess
-
iframe
.
https
.
html
?
testCase
=
same
-
origin
-
frame
&
rootdocument
=
false
"
)
;
RunTestsInIFrame
(
"
https
:
/
/
{
{
domains
[
www
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
/
storage
-
access
-
api
/
resources
/
hasStorageAccess
-
iframe
.
https
.
html
?
testCase
=
cross
-
origin
-
frame
&
rootdocument
=
false
"
)
;
RunTestsInNestedIFrame
(
"
resources
/
hasStorageAccess
-
iframe
.
https
.
html
?
testCase
=
nested
-
same
-
origin
-
frame
&
rootdocument
=
false
"
)
;
RunTestsInNestedIFrame
(
"
https
:
/
/
{
{
domains
[
www
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
/
storage
-
access
-
api
/
resources
/
hasStorageAccess
-
iframe
.
https
.
html
?
testCase
=
nested
-
cross
-
origin
-
frame
&
rootdocument
=
false
"
)
;
}
