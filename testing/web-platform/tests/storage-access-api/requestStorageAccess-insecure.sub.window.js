'
use
strict
'
;
const
{
testPrefix
topLevelDocument
}
=
processQueryParams
(
)
;
promise_test
(
async
(
)
=
>
{
assert_not_equals
(
document
.
requestStorageAccess
undefined
)
;
}
"
[
"
+
testPrefix
+
"
]
document
.
requestStorageAccess
(
)
should
exist
on
the
document
interface
"
)
;
promise_test
(
t
=
>
{
return
promise_rejects_dom
(
t
"
NotAllowedError
"
document
.
requestStorageAccess
(
)
"
document
.
requestStorageAccess
(
)
call
without
user
gesture
"
)
;
}
"
[
"
+
testPrefix
+
"
]
document
.
requestStorageAccess
(
)
should
be
rejected
in
insecure
context
"
)
;
if
(
topLevelDocument
)
{
promise_test
(
t
=
>
{
const
description
=
"
document
.
requestStorageAccess
(
)
call
in
a
detached
frame
"
;
return
CreateDetachedFrame
(
)
.
requestStorageAccess
(
)
.
then
(
t
.
unreached_func
(
"
Should
have
rejected
:
"
+
description
)
(
e
)
=
>
{
assert_equals
(
e
.
name
'
InvalidStateError
'
description
)
;
t
.
done
(
)
;
}
)
;
}
"
[
non
-
fully
-
active
]
document
.
requestStorageAccess
(
)
should
reject
when
run
in
a
detached
frame
"
)
;
promise_test
(
t
=
>
{
return
promise_rejects_dom
(
t
'
InvalidStateError
'
CreateDocumentViaDOMParser
(
)
.
requestStorageAccess
(
)
"
document
.
requestStorageAccess
(
)
in
a
detached
DOMParser
result
"
)
;
}
"
[
non
-
fully
-
active
]
document
.
requestStorageAccess
(
)
should
reject
when
run
in
a
detached
DOMParser
document
"
)
;
const
sameOriginFramePromise
=
RunTestsInIFrame
(
'
resources
/
requestStorageAccess
-
iframe
.
html
?
testCase
=
same
-
origin
-
frame
'
)
;
const
crossOriginFramePromise
=
RunTestsInIFrame
(
'
http
:
/
/
{
{
domains
[
www
]
}
}
:
{
{
ports
[
http
]
[
0
]
}
}
/
storage
-
access
-
api
/
resources
/
requestStorageAccess
-
iframe
.
html
?
testCase
=
cross
-
origin
-
frame
'
)
;
const
nestedSameOriginFramePromise
=
RunTestsInNestedIFrame
(
'
resources
/
requestStorageAccess
-
iframe
.
html
?
testCase
=
nested
-
same
-
origin
-
frame
'
)
;
const
nestedCrossOriginFramePromise
=
RunTestsInNestedIFrame
(
'
http
:
/
/
{
{
domains
[
www
]
}
}
:
{
{
ports
[
http
]
[
0
]
}
}
/
storage
-
access
-
api
/
resources
/
requestStorageAccess
-
iframe
.
html
?
testCase
=
nested
-
cross
-
origin
-
frame
'
)
;
Promise
.
all
(
[
sameOriginFramePromise
crossOriginFramePromise
nestedSameOriginFramePromise
nestedCrossOriginFramePromise
]
)
.
then
(
(
)
=
>
{
promise_test
(
async
t
=
>
{
await
RunCallbackWithGesture
(
(
)
=
>
{
return
promise_rejects_dom
(
t
"
NotAllowedError
"
document
.
requestStorageAccess
(
)
"
should
reject
in
insecure
context
"
)
;
}
)
;
}
'
[
'
+
testPrefix
+
'
]
document
.
requestStorageAccess
(
)
should
be
rejected
when
called
with
a
user
gesture
in
insecure
context
'
)
;
}
)
;
}
