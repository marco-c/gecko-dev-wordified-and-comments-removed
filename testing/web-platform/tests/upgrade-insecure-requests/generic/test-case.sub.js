function
TestCase
(
scenarios
)
{
function
runTest
(
scenario
)
{
const
urls
=
getRequestURLs
(
scenario
.
subresource
scenario
.
origin
scenario
.
redirection
)
;
const
checkResult
=
_
=
>
{
return
xhrRequest
(
urls
.
assertUrl
)
.
then
(
assertResult
=
>
{
assert_equals
(
assertResult
.
status
scenario
.
expectation
"
The
resource
request
should
be
'
"
+
scenario
.
expectation
+
"
'
.
"
)
;
}
)
;
}
;
const
subresource
=
{
subresourceType
:
scenario
.
subresource
url
:
urls
.
testUrl
policyDeliveries
:
scenario
.
subresource_policy_deliveries
}
;
promise_test
(
(
)
=
>
{
return
xhrRequest
(
urls
.
announceUrl
)
.
then
(
_
=
>
invokeRequest
(
subresource
scenario
.
source_context_list
)
)
.
then
(
checkResult
checkResult
)
;
}
scenario
.
test_description
)
;
}
function
runTests
(
)
{
for
(
const
scenario
of
scenarios
)
{
runTest
(
scenario
)
;
}
}
return
{
start
:
runTests
}
;
}
