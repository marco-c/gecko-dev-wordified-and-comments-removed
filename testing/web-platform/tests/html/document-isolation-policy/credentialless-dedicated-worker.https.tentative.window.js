const
same_origin
=
get_host_info
(
)
.
HTTPS_ORIGIN
;
const
cross_origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
cookie_key
=
"
credentialless_dedicated_worker
"
;
const
cookie_same_origin
=
"
same_origin
"
;
const
cookie_cross_origin
=
"
cross_origin
"
;
promise_test
(
async
test
=
>
{
await
Promise
.
all
(
[
setCookie
(
same_origin
cookie_key
cookie_same_origin
+
cookie_same_site_none
)
setCookie
(
cross_origin
cookie_key
cookie_cross_origin
+
cookie_same_site_none
)
]
)
;
let
GetCookie
=
(
response
)
=
>
{
const
headers_credentialless
=
JSON
.
parse
(
response
)
;
return
parseCookies
(
headers_credentialless
)
[
cookie_key
]
;
}
async
function
fetchInRemoteContext
(
ctx
request_url
)
{
try
{
await
ctx
.
execute_script
(
async
(
url
)
=
>
{
await
fetch
(
url
{
mode
:
'
no
-
cors
'
credentials
:
'
include
'
}
)
;
}
[
request_url
]
)
;
}
catch
(
error
)
{
}
}
const
dedicatedWorkerTest
=
function
(
description
origin
dip_for_worker
expected_cookies
)
{
promise_test_parallel
(
async
t
=
>
{
const
worker
=
await
createDedicatedWorkerContext
(
test
same_origin
dip_for_worker
)
;
const
worker_context
=
new
RemoteContext
(
worker
[
0
]
)
;
const
request_token
=
token
(
)
;
const
request_url
=
showRequestHeaders
(
origin
request_token
)
;
await
fetchInRemoteContext
(
worker_context
request_url
)
;
const
response_worker
=
await
receive
(
request_token
)
.
then
(
GetCookie
)
;
assert_equals
(
response_worker
expected_cookies
"
dip
=
>
"
)
;
}
fetch
{
description
}
)
}
;
dedicatedWorkerTest
(
"
same
-
origin
+
credentialless
worker
"
same_origin
dip_credentialless
cookie_same_origin
)
;
dedicatedWorkerTest
(
"
same
-
origin
+
require_corp
worker
"
same_origin
dip_require_corp
cookie_same_origin
)
;
dedicatedWorkerTest
(
"
cross
-
origin
+
credentialless
worker
"
cross_origin
dip_credentialless
undefined
)
;
dedicatedWorkerTest
(
"
cross
-
origin
+
require_corp
worker
"
cross_origin
dip_require_corp
cookie_cross_origin
)
;
}
)
