function
setDip
(
url
value
)
{
url
.
searchParams
.
set
(
"
pipe
"
header
(
document
-
isolation
-
policy
{
value
}
)
)
;
}
function
resolveUrl
(
relativeUrl
options
)
{
const
url
=
new
URL
(
relativeUrl
window
.
location
)
;
if
(
options
!
=
=
undefined
)
{
const
{
dip
host
}
=
options
;
if
(
dip
!
=
=
undefined
)
{
setDip
(
url
dip
)
;
}
if
(
host
!
=
=
undefined
)
{
url
.
host
=
host
;
}
}
return
url
;
}
async
function
withIframe
(
t
url
)
{
const
frame
=
document
.
createElement
(
"
iframe
"
)
;
frame
.
src
=
url
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
const
loadedPromise
=
new
Promise
(
resolve
=
>
{
frame
.
addEventListener
(
'
load
'
resolve
{
once
:
true
}
)
;
}
)
;
document
.
body
.
append
(
frame
)
;
await
loadedPromise
;
return
frame
;
}
function
waitForMessage
(
target
)
{
return
new
Promise
(
resolve
=
>
{
target
.
addEventListener
(
'
message
'
resolve
{
once
:
true
}
)
;
}
)
;
}
async
function
createLocalUrl
(
t
{
url
creatorDip
scheme
}
)
{
const
frameUrl
=
resolveUrl
(
"
resources
/
fetch
-
and
-
create
-
url
.
html
"
{
dip
:
creatorDip
}
)
;
frameUrl
.
searchParams
.
set
(
"
url
"
url
)
;
frameUrl
.
searchParams
.
set
(
"
scheme
"
scheme
)
;
const
messagePromise
=
waitForMessage
(
window
)
;
const
frame
=
await
withIframe
(
t
frameUrl
)
;
const
evt
=
await
messagePromise
;
const
message
=
evt
.
data
;
assert_equals
(
message
.
error
undefined
"
url
creation
error
"
)
;
return
message
.
url
;
}
