const
same_origin
=
get_host_info
(
)
.
HTTPS_ORIGIN
;
const
cross_origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
promise_test
(
async
test
=
>
{
const
this_token_1
=
token
(
)
;
const
this_token_2
=
token
(
)
;
const
sw_token
=
token
(
)
;
const
sw_url
=
executor_service_worker_path
+
coep_credentialless
+
&
uuid
=
{
sw_token
}
;
const
scope
=
executor_path
;
const
sw_registration
=
await
service_worker_unregister_and_register
(
test
sw_url
scope
)
;
test
.
add_cleanup
(
(
)
=
>
sw_registration
.
unregister
(
)
)
;
await
wait_for_state
(
test
sw_registration
.
installing
'
activated
'
)
;
send
(
sw_token
fetchHandler
=
event
=
>
{
if
(
!
event
.
request
.
url
.
includes
(
"
/
proxied
"
)
)
return
;
send
(
"
{
this_token_1
}
"
"
ServiceWorker
:
Proxying
"
)
;
/
/
Response
with
a
cross
-
origin
no
-
cors
resource
.
const
url
=
"
{
cross_origin
}
"
+
"
/
common
/
blank
.
html
"
;
event
.
respondWith
(
new
Promise
(
async
resolve
=
>
{
try
{
let
response
=
await
fetch
(
url
{
mode
:
"
no
-
cors
"
credentials
:
"
include
"
}
)
;
send
(
"
{
this_token_1
}
"
"
ServiceWorker
:
Fetch
success
"
)
;
resolve
(
response
)
;
}
catch
(
error
)
{
send
(
"
{
this_token_1
}
"
"
ServiceWorker
:
Fetch
failure
"
)
;
resolve
(
new
Response
(
"
"
{
status
:
400
}
)
)
;
}
}
)
)
;
}
await
clients
.
claim
(
)
;
send
(
"
{
this_token_1
}
"
serviceWorker
.
state
)
;
)
assert_equals
(
await
receive
(
this_token_1
)
"
activated
"
)
;
const
document_token
=
environments
[
"
document
"
]
(
dip_credentialless
)
[
0
]
;
send
(
document_token
try
{
const
response
=
await
fetch
(
"
/
proxied
"
{
mode
:
"
no
-
cors
"
}
)
;
send
(
"
{
this_token_2
}
"
"
Document
:
Fetch
success
"
)
;
}
catch
(
error
)
{
send
(
"
{
this_token_2
}
"
"
Document
:
Fetch
error
"
)
;
}
)
;
assert_equals
(
await
receive
(
this_token_1
)
"
ServiceWorker
:
Proxying
"
)
;
assert_equals
(
await
receive
(
this_token_1
)
"
ServiceWorker
:
Fetch
success
"
)
;
assert_equals
(
await
receive
(
this_token_2
)
"
Document
:
Fetch
success
"
)
;
await
sw_registration
.
unregister
(
)
}
"
COEP
:
credentialless
ServiceWorker
"
)
;
