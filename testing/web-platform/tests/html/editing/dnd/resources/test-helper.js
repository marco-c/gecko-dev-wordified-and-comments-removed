'
use
strict
'
;
const
getElemCenterInIframe
=
(
element
iframe
)
=
>
{
const
elemClientRect
=
element
.
getBoundingClientRect
(
)
;
const
frameClientRect
=
iframe
.
getBoundingClientRect
(
)
;
const
centerX
=
frameClientRect
.
left
+
(
elemClientRect
.
left
+
elemClientRect
.
right
)
/
2
;
const
centerY
=
frameClientRect
.
top
+
(
elemClientRect
.
top
+
elemClientRect
.
bottom
)
/
2
;
return
[
centerX
centerY
]
;
}
;
const
movePointerToCenter
=
(
element
iframe
actions
)
=
>
{
return
(
iframe
=
=
undefined
)
?
actions
.
pointerMove
(
0
0
{
origin
:
element
}
)
:
actions
.
pointerMove
(
.
.
.
getElemCenterInIframe
(
element
iframe
)
)
}
function
dragDropTest
(
dragElement
dropElement
onDropCallBack
testDescription
dragIframe
=
undefined
dropIframe
=
undefined
)
{
promise_test
(
(
t
)
=
>
new
Promise
(
async
(
resolve
reject
)
=
>
{
dropElement
.
addEventListener
(
'
drop
'
t
.
step_func
(
(
event
)
=
>
{
if
(
onDropCallBack
(
event
)
=
=
true
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
)
;
try
{
var
actions
=
new
test_driver
.
Actions
(
)
;
actions
=
movePointerToCenter
(
dragElement
dragIframe
actions
)
.
pointerDown
(
)
;
actions
=
movePointerToCenter
(
dropElement
dropIframe
actions
)
.
pointerUp
(
)
;
await
actions
.
send
(
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
testDescription
)
)
;
}
