'
use
strict
'
;
const
mouseMoveToCenter
=
(
element
iframe
=
undefined
)
=
>
{
let
clientRect
=
element
.
getBoundingClientRect
(
)
;
let
centerX
=
(
clientRect
.
left
+
clientRect
.
right
)
/
2
;
let
centerY
=
(
clientRect
.
top
+
clientRect
.
bottom
)
/
2
;
if
(
iframe
!
=
undefined
)
{
clientRect
=
iframe
.
getBoundingClientRect
(
)
;
centerX
+
=
clientRect
.
left
;
centerY
+
=
clientRect
.
top
;
}
return
new
test_driver
.
Actions
(
)
.
pointerMove
(
Math
.
ceil
(
centerX
)
Math
.
ceil
(
centerY
)
)
.
send
(
)
;
}
;
function
dragDropTest
(
dragElement
dropElement
onDropCallBack
testDescription
iframe
=
undefined
)
{
promise_test
(
(
t
)
=
>
new
Promise
(
async
(
resolve
reject
)
=
>
{
dropElement
.
addEventListener
(
'
drop
'
t
.
step_func
(
(
event
)
=
>
{
if
(
onDropCallBack
(
event
)
=
=
true
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
)
;
try
{
await
mouseMoveToCenter
(
dragElement
)
;
await
new
test_driver
.
Actions
(
)
.
pointerDown
(
)
.
send
(
)
;
await
mouseMoveToCenter
(
dropElement
iframe
)
;
await
new
test_driver
.
Actions
(
)
.
pointerUp
(
)
.
send
(
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
testDescription
)
)
;
}
