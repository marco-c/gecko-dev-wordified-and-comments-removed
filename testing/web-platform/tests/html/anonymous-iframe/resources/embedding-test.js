const
EXPECT_LOAD
=
"
load
"
;
const
EXPECT_BLOCK
=
"
block
"
;
const
embeddingTest
=
(
description
{
parent_headers
child_headers
child_origin
expectation
}
)
=
>
{
child_origin
|
|
=
globalThis
.
origin
;
parent_headers
|
|
=
"
"
;
child_headers
|
|
=
"
"
;
const
parent_origin
=
window
.
origin
;
promise_test_parallel
(
async
test
=
>
{
const
parent_token
=
token
(
)
;
const
parent_url
=
parent_origin
+
executor_path
+
parent_headers
+
&
uuid
=
{
parent_token
}
;
const
child_token
=
token
(
)
;
const
child_url
=
child_origin
+
executor_path
+
child_headers
+
&
uuid
=
{
child_token
}
;
window
.
open
(
parent_url
)
;
add_completion_callback
(
(
)
=
>
send
(
parent_token
"
close
(
)
"
)
)
;
await
send
(
parent_token
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
anonymous
=
true
;
iframe
.
src
=
"
{
child_url
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
)
;
const
reply_token
=
token
(
)
;
await
send
(
child_token
send
(
"
{
reply_token
}
"
"
load
"
)
;
)
;
step_timeout
(
(
)
=
>
send
(
reply_token
"
block
"
)
4000
)
assert_equals
(
await
receive
(
reply_token
)
expectation
)
;
}
description
)
;
}
;
