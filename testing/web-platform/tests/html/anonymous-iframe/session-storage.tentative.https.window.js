const
store
=
async
(
iframe
key
value
)
=
>
{
const
response_queue
=
token
(
)
;
send
(
iframe
sessionStorage
.
setItem
(
"
{
key
}
"
"
{
value
}
"
)
;
send
(
"
{
response_queue
}
"
"
stored
"
)
;
)
;
assert_equals
(
await
receive
(
response_queue
)
"
stored
"
)
;
}
;
const
load
=
async
(
iframe
key
expected_value
)
=
>
{
const
response_queue
=
token
(
)
;
send
(
iframe
const
value
=
sessionStorage
.
getItem
(
"
{
key
}
"
)
;
send
(
"
{
response_queue
}
"
value
|
|
"
not
found
"
)
;
)
;
assert_equals
(
await
receive
(
response_queue
)
expected_value
)
;
}
;
promise_test
(
async
test
=
>
{
const
origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
key_1
=
token
(
)
;
const
key_2
=
token
(
)
;
const
iframe_anonymous_1
=
newAnonymousIframe
(
origin
)
;
const
iframe_anonymous_2
=
newAnonymousIframe
(
origin
)
;
const
iframe_normal_1
=
newIframe
(
origin
)
;
const
iframe_normal_2
=
newIframe
(
origin
)
;
await
Promise
.
all
(
[
store
(
iframe_anonymous_1
key_1
"
value_1
"
)
store
(
iframe_normal_1
key_2
"
value_2
"
)
]
)
;
await
Promise
.
all
(
[
load
(
iframe_anonymous_1
key_1
"
value_1
"
)
load
(
iframe_anonymous_2
key_1
"
value_1
"
)
load
(
iframe_anonymous_1
key_2
"
not
found
"
)
load
(
iframe_anonymous_2
key_2
"
not
found
"
)
load
(
iframe_normal_1
key_1
"
not
found
"
)
load
(
iframe_normal_2
key_1
"
not
found
"
)
load
(
iframe_normal_1
key_2
"
value_2
"
)
load
(
iframe_normal_2
key_2
"
value_2
"
)
]
)
;
}
"
Session
storage
is
correctly
partitioned
with
regards
to
anonymous
iframe
"
)
;
