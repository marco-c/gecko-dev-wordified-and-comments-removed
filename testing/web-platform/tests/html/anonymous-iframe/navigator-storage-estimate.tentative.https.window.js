promise_test
(
async
test
=
>
{
const
origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
iframes
=
[
newIframe
(
origin
)
newIframe
(
origin
)
newIframeCredentialless
(
origin
)
newIframeCredentialless
(
origin
)
]
;
const
g_db_store
=
token
(
)
;
const
g_db_name
=
token
(
)
;
const
g_db_version
=
1
;
await
Promise
.
all
(
iframes
.
map
(
async
(
iframe
i
)
=
>
{
const
response_channel
=
token
(
)
;
send
(
iframe
/
/
Open
the
database
:
const
request
=
indexedDB
.
open
(
"
{
g_db_name
}
"
"
{
g_db_version
}
"
)
;
request
.
onupgradeneeded
=
(
)
=
>
{
request
.
result
.
createObjectStore
(
"
{
g_db_store
}
"
{
keyPath
:
"
id
"
}
)
;
}
;
await
new
Promise
(
r
=
>
request
.
onsuccess
=
r
)
;
const
db
=
request
.
result
;
/
/
Write
the
value
:
const
transaction_write
=
db
.
transaction
(
"
{
g_db_store
}
"
"
readwrite
"
)
;
transaction_write
.
objectStore
(
"
{
g_db_store
}
"
)
.
add
(
{
id
:
"
{
token
(
)
}
"
value
:
new
Uint8Array
(
{
Math
.
pow
(
10
2
+
i
)
}
)
}
)
;
await
transaction_write
.
complete
;
db
.
close
(
)
;
send
(
"
{
response_channel
}
"
"
Done
"
)
;
)
;
assert_equals
(
await
receive
(
response_channel
)
"
Done
"
)
;
}
)
)
;
const
estimates
=
await
Promise
.
all
(
iframes
.
map
(
async
iframe
=
>
{
const
response_channel
=
token
(
)
;
send
(
iframe
const
{
quota
usage
}
=
await
navigator
.
storage
.
estimate
(
)
;
send
(
"
{
response_channel
}
"
JSON
.
stringify
(
{
quota
usage
}
)
)
;
)
;
return
JSON
.
parse
(
await
receive
(
response_channel
)
)
;
}
)
)
;
assert_equals
(
estimates
[
0
]
.
usage
estimates
[
1
]
.
usage
"
Normal
iframes
must
share
the
same
bucket
"
)
;
assert_equals
(
estimates
[
2
]
.
usage
estimates
[
3
]
.
usage
"
Credentialless
iframes
must
share
the
same
storage
bucket
"
)
;
assert_greater_than
(
estimates
[
2
]
.
usage
10
*
estimates
[
0
]
.
usage
"
Normal
and
credentialless
iframes
must
not
not
share
the
same
bucket
"
)
;
assert_equals
(
estimates
[
0
]
.
quota
estimates
[
1
]
.
quota
"
Same
quota
(
0
vs
1
)
"
)
;
assert_equals
(
estimates
[
0
]
.
quota
estimates
[
2
]
.
quota
"
Same
quota
(
0
vs
2
)
"
)
;
assert_equals
(
estimates
[
0
]
.
quota
estimates
[
3
]
.
quota
"
Same
quota
(
0
vs
3
)
"
)
;
}
)
