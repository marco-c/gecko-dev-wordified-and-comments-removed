const
params
=
new
URLSearchParams
(
document
.
location
.
search
)
;
const
worker_param
=
params
.
get
(
"
worker
"
)
|
|
"
dedicated_worker
"
;
const
cookie_key
=
token
(
)
;
const
cookie_value
=
"
cookie_value
"
;
const
cookie_origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
workerFrom
=
context
=
>
{
const
reply
=
token
(
)
;
send
(
context
for
(
deps
of
[
"
/
common
/
utils
.
js
"
"
/
html
/
cross
-
origin
-
embedder
-
policy
/
credentialless
/
resources
/
common
.
js
"
]
)
{
await
new
Promise
(
resolve
=
>
{
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
src
=
deps
;
script
.
onload
=
resolve
;
document
.
body
.
appendChild
(
script
)
;
}
)
;
}
const
worker_constructor
=
environments
[
"
{
worker_param
}
"
]
;
const
headers
=
"
"
;
const
[
worker
error
]
=
worker_constructor
(
headers
)
;
send
(
"
{
reply
}
"
worker
)
;
)
;
return
receive
(
reply
)
;
}
;
promise_test
(
async
test
=
>
{
await
setCookie
(
cookie_origin
cookie_key
cookie_value
)
;
}
"
set
cookies
"
)
;
promise_test
(
async
test
=
>
{
const
headers
=
token
(
)
;
send
(
await
workerFrom
(
newIframe
(
cookie_origin
)
)
fetch
(
"
{
showRequestHeaders
(
cookie_origin
headers
)
}
"
)
;
)
;
const
cookie
=
parseCookies
(
JSON
.
parse
(
await
receive
(
headers
)
)
)
;
assert_equals
(
cookie
[
cookie_key
]
cookie_value
)
}
"
Worker
spawned
from
normal
iframe
can
access
global
cookies
"
)
;
promise_test
(
async
test
=
>
{
const
headers
=
token
(
)
;
send
(
await
workerFrom
(
newIframeCredentialless
(
cookie_origin
)
)
fetch
(
"
{
showRequestHeaders
(
cookie_origin
headers
)
}
"
)
;
)
;
const
cookie
=
parseCookies
(
JSON
.
parse
(
await
receive
(
headers
)
)
)
;
assert_equals
(
cookie
[
cookie_key
]
undefined
)
}
"
Worker
spawned
from
credentialless
iframe
can
'
t
access
global
cookies
"
)
;
