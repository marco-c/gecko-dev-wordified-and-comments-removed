const
acquire_script
=
(
key
response
)
=
>
window
.
releaseLocks
|
|
=
[
]
;
navigator
.
locks
.
request
(
"
{
key
}
"
async
lock
=
>
{
send
(
"
{
response
}
"
"
locked
"
)
await
new
Promise
(
r
=
>
releaseLocks
.
push
(
r
)
)
;
send
(
"
{
response
}
"
"
unlocked
"
)
;
}
)
;
;
const
release_script
=
(
response
)
=
>
for
(
release
of
releaseLocks
)
release
(
)
;
;
const
assertHeldKeys
=
async
(
context
expected_keys
)
=
>
{
const
queue
=
token
(
)
;
send
(
context
const
list
=
await
navigator
.
locks
.
query
(
)
;
send
(
"
{
queue
}
"
JSON
.
stringify
(
list
)
)
;
)
;
const
state
=
JSON
.
parse
(
await
receive
(
queue
)
)
;
const
held
=
state
.
held
.
map
(
x
=
>
x
.
name
)
;
assert_equals
(
held
.
length
expected_keys
.
length
)
;
assert_array_equals
(
held
.
sort
(
)
expected_keys
.
sort
(
)
)
;
}
promise_test
(
async
test
=
>
{
const
origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
key_1
=
token
(
)
;
const
key_2
=
token
(
)
;
const
iframe_credentialless
=
newIframeCredentialless
(
origin
)
;
const
iframe_normal
=
newIframe
(
origin
)
;
const
response_queue_1
=
token
(
)
;
const
response_queue_2
=
token
(
)
;
send
(
iframe_credentialless
acquire_script
(
key_1
response_queue_1
)
)
;
send
(
iframe_normal
acquire_script
(
key_2
response_queue_2
)
)
;
assert_equals
(
await
receive
(
response_queue_1
)
"
locked
"
)
;
assert_equals
(
await
receive
(
response_queue_2
)
"
locked
"
)
;
await
assertHeldKeys
(
iframe_credentialless
[
key_1
]
)
;
await
assertHeldKeys
(
iframe_normal
[
key_2
]
)
;
send
(
iframe_credentialless
acquire_script
(
key_2
response_queue_1
)
)
;
send
(
iframe_normal
acquire_script
(
key_1
response_queue_2
)
)
;
assert_equals
(
await
receive
(
response_queue_1
)
"
locked
"
)
;
assert_equals
(
await
receive
(
response_queue_2
)
"
locked
"
)
;
await
assertHeldKeys
(
iframe_credentialless
[
key_1
key_2
]
)
;
await
assertHeldKeys
(
iframe_normal
[
key_1
key_2
]
)
;
send
(
iframe_credentialless
release_script
(
response_queue_1
)
)
;
assert_equals
(
await
receive
(
response_queue_1
)
"
unlocked
"
)
;
assert_equals
(
await
receive
(
response_queue_1
)
"
unlocked
"
)
;
await
assertHeldKeys
(
iframe_credentialless
[
]
)
;
await
assertHeldKeys
(
iframe_normal
[
key_1
key_2
]
)
;
send
(
iframe_normal
release_script
(
response_queue_2
)
)
;
assert_equals
(
await
receive
(
response_queue_2
)
"
unlocked
"
)
;
assert_equals
(
await
receive
(
response_queue_2
)
"
unlocked
"
)
;
await
assertHeldKeys
(
iframe_credentialless
[
]
)
;
await
assertHeldKeys
(
iframe_normal
[
]
)
;
}
)
