promise_test
(
async
t
=
>
{
let
iframe_allowed
=
(
iframe
)
=
>
new
Promise
(
async
resolve
=
>
{
window
.
addEventListener
(
"
message
"
t
.
step_func
(
msg
=
>
{
if
(
msg
.
source
!
=
=
iframe
.
contentWindow
)
return
;
assert_equals
(
msg
.
data
"
loaded
"
"
Unexpected
message
from
broadcast
channel
.
"
)
;
resolve
(
true
)
;
}
)
)
;
await
t
.
step_wait
(
(
)
=
>
{
try
{
iframe
.
contentWindow
.
location
.
href
=
=
=
null
;
return
false
;
}
catch
{
return
true
;
}
}
)
;
resolve
(
false
)
;
}
)
;
const
child
=
document
.
createElement
(
"
iframe
"
)
;
child
.
anonymous
=
true
;
t
.
add_cleanup
(
(
)
=
>
child
.
remove
(
)
)
;
child
.
src
=
"
/
html
/
cross
-
origin
-
embedder
-
policy
/
resources
/
"
+
"
navigate
-
none
.
sub
.
html
?
postMessageTo
=
top
"
;
document
.
body
.
append
(
child
)
;
assert_true
(
await
iframe_allowed
(
child
)
"
The
anonymous
iframe
should
be
allowed
.
"
)
;
const
grandchild
=
child
.
contentDocument
.
createElement
(
"
iframe
"
)
;
grandchild
.
src
=
"
/
html
/
cross
-
origin
-
embedder
-
policy
/
resources
/
"
+
"
navigate
-
none
.
sub
.
html
?
postMessageTo
=
top
"
;
child
.
contentDocument
.
body
.
append
(
grandchild
)
;
assert_true
(
await
iframe_allowed
(
grandchild
)
"
The
child
of
the
anonymous
iframe
should
be
allowed
.
"
)
;
}
'
Loading
an
anonymous
iframe
with
COEP
:
require
-
corp
is
allowed
.
'
)
;
