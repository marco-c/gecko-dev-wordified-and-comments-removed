function
getMessageData
(
message_data_type
source
)
{
return
new
Promise
(
resolve
=
>
{
function
waitAndRemove
(
e
)
{
if
(
e
.
source
!
=
source
|
|
!
e
.
data
|
|
e
.
data
.
type
!
=
message_data_type
)
return
;
window
.
removeEventListener
(
"
message
"
waitAndRemove
)
;
resolve
(
e
.
data
)
;
}
window
.
addEventListener
(
"
message
"
waitAndRemove
)
;
}
)
;
}
async
function
postCapabilityDelegationMessage
(
frame
message
origin
capability
activate
)
{
let
result_promise
=
getMessageData
(
"
result
"
frame
)
;
if
(
activate
)
await
test_driver
.
bless
(
)
;
let
postMessageOptions
=
{
targetOrigin
:
origin
}
;
if
(
capability
)
postMessageOptions
[
"
delegate
"
]
=
capability
;
try
{
frame
.
postMessage
(
message
postMessageOptions
)
;
}
catch
(
exception
)
{
return
Promise
.
reject
(
exception
)
;
}
return
await
result_promise
;
}
async
function
findOneCapabilitySupportingDelegation
(
)
{
const
capabilities
=
[
"
fullscreen
"
"
payment
"
"
display
-
capture
"
]
;
for
(
let
i
=
0
;
i
<
capabilities
.
length
;
i
+
+
)
{
try
{
await
postCapabilityDelegationMessage
(
window
"
any_message
"
"
/
"
capabilities
[
i
]
false
)
;
assert_unreached
(
)
;
}
catch
(
exception
)
{
if
(
exception
.
name
!
=
"
NotSupportedError
"
)
return
capabilities
[
i
]
;
}
}
;
return
undefined
;
}
