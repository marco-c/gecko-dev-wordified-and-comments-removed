const
DOCUMENT_LASTMODIFIED_REGEX
=
/
^
(
[
0
-
9
]
{
2
}
)
\
/
(
[
0
-
9
]
{
2
}
)
\
/
(
[
0
-
9
]
{
4
}
)
(
[
0
-
9
]
{
2
}
)
:
(
[
0
-
9
]
{
2
}
)
:
(
[
0
-
9
]
{
2
}
)
/
;
function
assert_document_lastmodified_string_approximately_now
(
str
)
{
var
dmax
=
new
Date
(
)
;
var
TOLERANCE_MILLISECONDS
=
2500
;
var
dmin
=
new
Date
(
)
;
dmin
.
setTime
(
dmax
.
getTime
(
)
-
TOLERANCE_MILLISECONDS
)
;
var
m
=
DOCUMENT_LASTMODIFIED_REGEX
.
exec
(
str
)
;
var
syear
=
Number
(
m
[
3
]
)
;
var
smonth
=
Number
(
m
[
1
]
)
-
1
;
var
sdate
=
Number
(
m
[
2
]
)
;
var
shours
=
Number
(
m
[
4
]
)
;
var
sminutes
=
Number
(
m
[
5
]
)
;
var
sseconds
=
Number
(
m
[
6
]
)
;
if
(
dmin
.
getFullYear
(
)
=
=
dmax
.
getFullYear
(
)
&
&
dmin
.
getMonth
(
)
=
=
dmax
.
getMonth
(
)
&
&
dmin
.
getDate
(
)
=
=
dmax
.
getDate
(
)
&
&
dmin
.
getHours
(
)
=
=
dmax
.
getHours
(
)
&
&
dmin
.
getMinutes
(
)
=
=
dmax
.
getMinutes
(
)
)
{
assert_equals
(
smonth
dmin
.
getMonth
(
)
"
month
"
)
;
assert_equals
(
sdate
dmin
.
getDate
(
)
"
date
"
)
;
assert_equals
(
syear
dmin
.
getFullYear
(
)
"
year
"
)
;
assert_equals
(
shours
dmin
.
getHours
(
)
"
hours
"
)
;
assert_equals
(
sminutes
dmin
.
getMinutes
(
)
"
minutes
"
)
;
assert_true
(
dmin
.
getSeconds
(
)
<
=
sseconds
&
&
sseconds
<
=
dmax
.
getSeconds
(
)
"
seconds
"
)
;
}
else
if
(
dmin
.
getFullYear
(
)
=
=
syear
&
&
dmin
.
getMonth
(
)
=
=
smonth
&
&
dmin
.
getDate
(
)
=
=
sdate
&
&
dmin
.
getHours
(
)
=
=
shours
&
&
dmin
.
getMinutes
(
)
=
=
sminutes
)
{
assert_true
(
dmin
.
getSeconds
(
)
<
=
sseconds
"
dmin
.
getSeconds
(
)
<
=
sseconds
"
)
;
assert_true
(
57
<
=
dmin
.
getSeconds
(
)
"
unexpected
local
time
rules
(
dmin
match
)
"
)
;
}
else
if
(
dmax
.
getFullYear
(
)
=
=
syear
&
&
dmax
.
getMonth
(
)
=
=
smonth
&
&
dmax
.
getDate
(
)
=
=
sdate
&
&
dmax
.
getHours
(
)
=
=
shours
&
&
dmax
.
getMinutes
(
)
=
=
sminutes
)
{
assert_true
(
sseconds
<
=
dmax
.
getSeconds
(
)
"
sseconds
<
=
dmax
.
getSeconds
(
)
"
)
;
assert_true
(
dmax
.
getSeconds
(
)
<
=
2
"
unexpected
local
time
rules
(
dmax
match
)
"
)
;
}
else
{
assert_unreached
(
"
unexpected
local
time
rules
(
no
match
)
"
)
;
}
}
