self
.
setup
(
{
allow_uncaught_exception
:
true
}
)
;
self
.
log
=
[
]
;
self
.
addEventListener
(
'
error
'
(
)
=
>
{
log
.
push
(
'
handler
1
'
)
;
Promise
.
resolve
(
)
.
then
(
(
)
=
>
log
.
push
(
'
handler
1
promise
'
)
)
;
}
)
;
self
.
addEventListener
(
'
error
'
(
)
=
>
{
log
.
push
(
'
handler
2
'
)
;
Promise
.
resolve
(
)
.
then
(
(
)
=
>
log
.
push
(
'
handler
2
promise
'
)
)
;
}
)
;
async_test
(
t
=
>
{
t
.
step_timeout
(
(
)
=
>
{
assert_array_equals
(
log
[
'
handler
1
'
'
handler
2
'
'
handler
1
promise
'
'
handler
2
promise
'
]
)
;
t
.
done
(
)
;
}
0
)
;
}
"
Promise
resolved
during
#
report
-
the
-
error
"
)
;
self
.
log2
=
[
]
;
self
.
t2
=
async_test
(
"
Promise
resolved
during
event
handlers
other
than
error
"
)
;
self
.
addEventListener
(
'
message
'
(
)
=
>
{
log2
.
push
(
'
handler
1
'
)
;
Promise
.
resolve
(
)
.
then
(
(
)
=
>
log2
.
push
(
'
handler
1
promise
'
)
)
;
}
)
;
self
.
addEventListener
(
'
message
'
(
)
=
>
{
log2
.
push
(
'
handler
2
'
)
;
Promise
.
resolve
(
)
.
then
(
t2
.
step_func_done
(
(
)
=
>
{
log2
.
push
(
'
handler
2
promise
'
)
;
assert_array_equals
(
log2
[
'
handler
1
'
'
handler
1
promise
'
'
handler
2
'
'
handler
2
promise
'
]
)
;
}
)
)
;
}
)
;
done
(
)
;
throw
new
Error
(
'
script
1
'
)
;
