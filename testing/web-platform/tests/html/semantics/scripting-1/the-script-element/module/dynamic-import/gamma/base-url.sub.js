"
use
strict
"
;
if
(
'
DedicatedWorkerGlobalScope
'
in
self
&
&
self
instanceof
DedicatedWorkerGlobalScope
&
&
!
self
.
testName
)
{
importScripts
(
"
/
resources
/
testharness
.
js
"
)
;
self
.
testName
=
'
worker
top
-
level
script
'
;
self
.
baseUrlSanitized
=
false
;
}
{
const
savedBaseUrlSanitized
=
self
.
baseUrlSanitized
;
promise_test
(
(
)
=
>
{
const
promise
=
import
(
"
.
/
import
.
js
?
pipe
=
header
(
Access
-
Control
-
Allow
-
Origin
*
)
&
label
=
relative
-
"
+
self
.
testName
)
;
if
(
savedBaseUrlSanitized
)
{
return
promise
.
then
(
module
=
>
{
assert_equals
(
module
.
A
[
"
from
"
]
"
(
unreached
)
"
"
Relative
URL
-
like
specifier
resolution
should
fail
"
)
;
assert_unreached
(
)
;
}
(
)
=
>
{
}
)
;
}
else
{
return
promise
.
then
(
module
=
>
{
assert_equals
(
module
.
A
[
"
from
"
]
"
gamma
/
import
.
js
"
)
;
}
)
;
}
}
"
Relative
URL
-
like
from
"
+
self
.
testName
)
;
}
promise_test
(
(
)
=
>
{
return
import
(
"
http
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
http
]
[
0
]
}
}
/
html
/
semantics
/
scripting
-
1
/
the
-
script
-
element
/
module
/
dynamic
-
import
/
gamma
/
import
.
js
?
pipe
=
header
(
Access
-
Control
-
Allow
-
Origin
*
)
&
label
=
absolute
-
"
+
self
.
testName
)
.
then
(
module
=
>
{
assert_equals
(
module
.
A
[
"
from
"
]
"
gamma
/
import
.
js
"
)
;
}
)
}
"
Absolute
URL
-
like
from
"
+
self
.
testName
)
;
done
(
)
;
