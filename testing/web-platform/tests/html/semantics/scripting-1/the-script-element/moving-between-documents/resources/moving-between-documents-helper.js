"
use
strict
"
;
function
createDocument
(
documentType
result
inlineOrExternal
type
hasBlockingStylesheet
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
resources
/
moving
-
between
-
documents
-
iframe
.
py
"
+
"
?
result
=
"
+
result
+
"
&
inlineOrExternal
=
"
+
inlineOrExternal
+
"
&
type
=
"
+
type
+
"
&
hasBlockingStylesheet
=
"
+
hasBlockingStylesheet
+
"
&
cache
=
"
+
Math
.
random
(
)
;
document
.
body
.
appendChild
(
iframe
)
;
window
.
addEventListener
(
'
message
'
(
event
)
=
>
{
if
(
documentType
=
=
=
"
iframe
"
)
{
resolve
(
[
iframe
.
contentWindow
iframe
.
contentDocument
]
)
;
}
else
if
(
documentType
=
=
=
"
createHTMLDocument
"
)
{
resolve
(
[
iframe
.
contentWindow
iframe
.
contentDocument
.
implementation
.
createHTMLDocument
(
"
"
)
]
)
;
}
else
{
reject
(
new
Error
(
"
Invalid
document
type
:
"
+
documentType
)
)
;
}
}
{
once
:
true
}
)
;
}
)
;
}
window
.
scriptErrorEventFired
=
false
;
window
.
didExecute
=
undefined
;
async
function
runTest
(
timing
destType
result
inlineOrExternal
type
)
{
if
(
result
=
=
=
"
fetch
-
error
"
&
&
inlineOrExternal
=
=
=
"
inline
"
)
{
return
;
}
const
description
=
Move
{
result
}
{
inlineOrExternal
}
{
type
}
script
+
to
{
destType
}
{
timing
}
;
const
t
=
async_test
(
"
Eval
:
"
+
description
)
;
const
tScriptLoadEvent
=
async_test
(
"
<
script
>
load
:
"
+
description
)
;
const
tScriptErrorEvent
=
async_test
(
"
<
script
>
error
:
"
+
description
)
;
const
tWindowErrorEvent
=
async_test
(
"
window
error
:
"
+
description
)
;
const
hasBlockingStylesheet
=
timing
=
=
=
"
after
-
prepare
"
|
|
timing
=
=
=
"
move
-
back
"
;
const
[
sourceWindow
sourceDocument
]
=
await
createDocument
(
"
iframe
"
result
inlineOrExternal
type
hasBlockingStylesheet
)
;
const
[
destWindow
destDocument
]
=
await
createDocument
(
destType
null
null
null
hasBlockingStylesheet
)
;
let
scriptErrorEventFired
=
false
;
const
scriptOnError
=
(
event
)
=
>
{
event
.
stopPropagation
(
)
;
tScriptErrorEvent
.
unreached_func
(
"
Event
fired
unexpectedly
"
)
(
)
;
}
;
sourceWindow
.
didExecute
=
false
;
sourceWindow
.
t
=
t
;
sourceWindow
.
tScriptLoadEvent
=
tScriptLoadEvent
;
sourceWindow
.
tScriptErrorEvent
=
tScriptErrorEvent
;
sourceWindow
.
scriptOnError
=
scriptOnError
;
sourceWindow
.
onerror
=
tWindowErrorEvent
.
unreached_func
(
"
Window
error
event
shouldn
'
t
fired
on
source
window
"
)
;
sourceWindow
.
readyToEvaluate
=
false
;
destWindow
.
didExecute
=
false
;
destWindow
.
t
=
t
;
destWindow
.
tScriptLoadEvent
=
tScriptLoadEvent
;
destWindow
.
tScriptErrorEvent
=
tScriptErrorEvent
;
destWindow
.
scriptOnError
=
scriptOnError
;
destWindow
.
onerror
=
tWindowErrorEvent
.
unreached_func
(
"
Window
error
event
shouldn
'
t
fired
on
destination
window
"
)
;
destWindow
.
readyToEvaluate
=
false
;
if
(
timing
=
=
=
"
before
-
prepare
"
|
|
timing
=
=
=
"
move
-
back
"
)
{
destDocument
.
body
.
appendChild
(
sourceDocument
.
querySelector
(
"
streaming
-
element
"
)
)
;
}
if
(
timing
=
=
=
"
before
-
prepare
"
)
{
sourceWindow
.
readyToEvaluate
=
true
;
destWindow
.
readyToEvaluate
=
true
;
}
await
new
Promise
(
resolve
=
>
step_timeout
(
resolve
2000
)
)
;
if
(
timing
=
=
=
"
after
-
prepare
"
)
{
destDocument
.
body
.
appendChild
(
sourceDocument
.
querySelector
(
"
streaming
-
element
"
)
)
;
}
else
if
(
timing
=
=
=
"
move
-
back
"
)
{
sourceDocument
.
body
.
appendChild
(
destDocument
.
querySelector
(
"
streaming
-
element
"
)
)
;
}
sourceWindow
.
readyToEvaluate
=
true
;
destWindow
.
readyToEvaluate
=
true
;
return
new
Promise
(
resolve
=
>
{
step_timeout
(
(
)
=
>
{
tWindowErrorEvent
.
done
(
)
;
tScriptLoadEvent
.
done
(
)
;
tScriptErrorEvent
.
done
(
)
;
t
.
step_func_done
(
(
)
=
>
{
assert_false
(
sourceWindow
.
didExecute
"
The
script
must
not
have
executed
in
source
window
"
)
;
assert_false
(
destWindow
.
didExecute
"
The
script
must
not
have
executed
in
destination
window
"
)
;
}
)
(
)
;
resolve
(
)
;
}
4000
)
;
}
)
;
}
async_test
(
t
=
>
{
t
.
step_timeout
(
(
)
=
>
{
assert_equals
(
window
.
didExecute
undefined
"
The
script
must
not
have
executed
in
the
top
-
level
window
"
)
;
assert_false
(
window
.
scriptErrorEventFired
"
Top
-
level
window
'
s
scriptErrorEventFired
should
be
untouched
"
)
;
t
.
done
(
)
;
}
4000
)
;
}
"
Sanity
check
around
top
-
level
Window
"
)
;
