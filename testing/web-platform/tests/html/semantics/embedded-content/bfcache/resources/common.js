'
use
strict
'
;
async
function
loadBfCacheTestHelperResources
(
)
{
await
loadScript
(
'
/
common
/
utils
.
js
'
)
;
await
loadScript
(
'
/
common
/
dispatcher
/
dispatcher
.
js
'
)
;
await
loadScript
(
'
/
html
/
browsers
/
browsing
-
the
-
web
/
back
-
forward
-
cache
/
resources
/
helper
.
sub
.
js
'
)
;
}
await
loadBfCacheTestHelperResources
(
)
;
export
function
runBfcacheTestForEmbeds
(
testCase
)
{
assert_implements
(
runBfcacheTest
'
runBfcacheTest
(
)
is
unavailable
.
'
)
;
assert_implements
(
originSameOrigin
'
originSameOrigin
is
unavailable
.
'
)
;
const
tags
=
[
{
'
name
'
:
'
embed
'
'
srcAttr
'
:
'
src
'
}
{
'
name
'
:
'
object
'
'
srcAttr
'
:
'
data
'
}
]
;
for
(
const
tag
of
tags
)
{
runBfcacheTest
(
{
targetOrigin
:
originSameOrigin
shouldBeCached
:
true
funcBeforeNavigation
:
(
tag
attrs
)
=
>
{
let
e
=
document
.
createElement
(
tag
.
name
)
;
if
(
'
type
'
in
attrs
)
{
e
.
type
=
attrs
.
type
;
}
if
(
'
src
'
in
attrs
)
{
e
[
tag
.
srcAttr
]
=
attrs
.
src
;
}
document
.
body
.
append
(
e
)
;
}
argsBeforeNavigation
:
[
tag
testCase
]
}
Page
with
<
{
tag
.
name
}
+
type
=
{
testCase
.
type
}
{
tag
.
srcAttr
}
=
{
testCase
.
src
}
>
)
;
}
}
