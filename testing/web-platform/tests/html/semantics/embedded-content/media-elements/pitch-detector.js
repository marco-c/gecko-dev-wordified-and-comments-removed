window
.
AudioContext
=
window
.
AudioContext
|
|
window
.
webkitAudioContext
;
var
FFT_SIZE
=
2048
;
function
getPitchDetector
(
media
t
)
{
var
audioContext
=
new
AudioContext
(
)
;
t
.
add_cleanup
(
(
)
=
>
audioContext
.
close
(
)
)
;
var
sourceNode
=
audioContext
.
createMediaElementSource
(
media
)
;
var
analyser
=
audioContext
.
createAnalyser
(
)
;
analyser
.
fftSize
=
FFT_SIZE
;
sourceNode
.
connect
(
analyser
)
;
analyser
.
connect
(
audioContext
.
destination
)
;
return
(
)
=
>
getPitch
(
analyser
)
;
}
function
getPitch
(
analyser
)
{
var
binConverter
=
(
bin
)
=
>
(
analyser
.
context
.
sampleRate
/
2
)
*
(
(
bin
)
/
(
analyser
.
frequencyBinCount
-
1
)
)
;
var
buf
=
new
Uint8Array
(
analyser
.
frequencyBinCount
)
;
analyser
.
getByteFrequencyData
(
buf
)
;
return
findDominantFrequency
(
buf
binConverter
)
;
}
function
findDominantFrequency
(
buf
binConverter
)
{
var
max
=
0
;
var
bin
=
0
;
for
(
var
i
=
0
;
i
<
buf
.
length
;
i
+
+
)
{
if
(
buf
[
i
]
>
max
)
{
max
=
buf
[
i
]
;
bin
=
i
;
}
}
return
{
value
:
binConverter
(
bin
)
margin
:
binConverter
(
1
)
}
;
}
