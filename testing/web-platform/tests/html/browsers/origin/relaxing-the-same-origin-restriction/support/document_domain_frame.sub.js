function
postMessageToFrame
(
frame
message
)
{
return
new
Promise
(
resolve
=
>
{
var
c
=
new
MessageChannel
(
)
;
c
.
port1
.
onmessage
=
e
=
>
{
resolve
(
{
data
:
e
.
data
frame
:
frame
}
)
}
;
frame
.
contentWindow
.
postMessage
(
message
'
*
'
[
c
.
port2
]
)
;
}
)
;
}
function
createFrame
(
t
name
hostname
)
{
return
new
Promise
(
resolve
=
>
{
var
i
=
document
.
createElement
(
'
iframe
'
)
;
if
(
hostname
)
{
i
.
src
=
/
/
{
hostname
}
:
{
{
location
[
port
]
}
}
/
html
/
browsers
/
origin
/
relaxing
-
the
-
same
-
origin
-
restriction
/
support
/
document_domain_frame
.
html
;
}
else
{
i
.
src
=
"
support
/
document_domain_frame
.
html
"
;
}
if
(
name
)
{
i
.
name
=
name
;
}
var
listener
=
m
=
>
{
if
(
m
.
source
=
=
i
.
contentWindow
)
resolve
(
i
)
;
}
window
.
addEventListener
(
'
message
'
listener
)
;
t
.
add_cleanup
(
(
)
=
>
{
i
.
remove
(
)
;
window
.
removeEventListener
(
'
message
'
listener
)
;
}
)
;
document
.
body
.
appendChild
(
i
)
;
}
)
;
}
