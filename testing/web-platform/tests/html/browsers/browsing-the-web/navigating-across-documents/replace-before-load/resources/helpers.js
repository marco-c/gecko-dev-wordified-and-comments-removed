window
.
waitForLoad
=
(
t
iframe
urlRelativeToThisDocument
)
=
>
{
return
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
t
.
step_func
(
(
)
=
>
{
assert_equals
(
iframe
.
contentWindow
.
location
.
href
(
new
URL
(
urlRelativeToThisDocument
location
.
href
)
)
.
href
)
;
setTimeout
(
resolve
0
)
;
}
)
{
once
:
true
}
)
;
}
)
;
}
;
window
.
waitForLoadAllowingIntermediateLoads
=
(
t
iframe
urlRelativeToThisDocument
)
=
>
{
return
new
Promise
(
resolve
=
>
{
const
handler
=
t
.
step_func
(
(
)
=
>
{
if
(
iframe
.
contentWindow
.
location
.
href
=
=
=
(
new
URL
(
urlRelativeToThisDocument
location
.
href
)
)
.
href
)
{
setTimeout
(
resolve
0
)
;
iframe
.
removeEventListener
(
"
load
"
handler
)
;
}
}
)
;
iframe
.
addEventListener
(
"
load
"
handler
)
;
}
)
;
}
;
window
.
waitForMessage
=
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
e
=
>
{
resolve
(
e
.
data
)
;
}
{
once
:
true
}
)
;
}
)
;
}
;
window
.
setupSentinelIframe
=
async
(
t
)
=
>
{
const
sentinelIframe
=
document
.
createElement
(
"
iframe
"
)
;
sentinelIframe
.
src
=
"
/
common
/
blank
.
html
?
sentinelstart
"
;
document
.
body
.
append
(
sentinelIframe
)
;
t
.
add_cleanup
(
(
)
=
>
sentinelIframe
.
remove
(
)
)
;
await
waitForLoad
(
t
sentinelIframe
"
/
common
/
blank
.
html
?
sentinelstart
"
)
;
sentinelIframe
.
src
=
"
/
common
/
blank
.
html
?
sentinelend
"
;
await
waitForLoad
(
t
sentinelIframe
"
/
common
/
blank
.
html
?
sentinelend
"
)
;
return
sentinelIframe
;
}
;
window
.
checkSentinelIframe
=
async
(
t
sentinelIframe
)
=
>
{
history
.
back
(
)
;
await
waitForLoad
(
t
sentinelIframe
"
/
common
/
blank
.
html
?
sentinelstart
"
)
;
}
;
window
.
insertIframe
=
(
t
url
name
)
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
url
;
if
(
name
)
{
iframe
.
name
=
name
;
}
document
.
body
.
append
(
iframe
)
;
return
iframe
;
}
;
window
.
absoluteURL
=
relativeURL
=
>
{
return
(
new
URL
(
relativeURL
location
.
href
)
)
.
href
;
}
;
window
.
codeInjectorURL
=
code
=
>
{
return
absoluteURL
(
"
resources
/
code
-
injector
.
html
?
pipe
=
sub
(
none
)
&
code
=
"
+
encodeURIComponent
(
code
)
)
;
}
;
window
.
changeURLHost
=
(
url
newHost
)
=
>
{
const
urlObj
=
new
URL
(
url
)
;
urlObj
.
host
=
newHost
;
return
urlObj
.
href
;
}
;
