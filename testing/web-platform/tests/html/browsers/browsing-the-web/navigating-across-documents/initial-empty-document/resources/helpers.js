function
assertNoLoadAndPageshowEvent
(
t
target
)
{
target
.
addEventListener
(
"
load
"
t
.
unreached_func
(
"
load
should
not
be
fired
"
)
)
;
target
.
addEventListener
(
"
pageshow
"
t
.
unreached_func
(
"
pageshow
should
not
be
fired
"
)
)
;
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
50
)
;
}
)
;
}
const
url204
=
"
/
common
/
blank
.
html
?
pipe
=
status
(
204
)
"
;
const
postMessageToOpenerOnLoad
=
window
.
onload
=
(
)
=
>
{
window
.
opener
.
postMessage
(
"
loaded
"
"
*
"
)
}
;
window
.
insertIframe
=
(
t
)
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
t
.
add_cleanup
(
(
)
=
>
iframe
.
remove
(
)
)
;
document
.
body
.
append
(
iframe
)
;
return
iframe
;
}
;
window
.
insertIframeWith204Src
=
(
t
)
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
url204
;
t
.
add_cleanup
(
(
)
=
>
iframe
.
remove
(
)
)
;
document
.
body
.
append
(
iframe
)
;
return
iframe
;
}
;
window
.
insertIframeWithAboutBlankSrc
=
(
t
)
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
t
.
add_cleanup
(
(
)
=
>
iframe
.
remove
(
)
)
;
iframe
.
src
=
"
about
:
blank
"
;
document
.
body
.
append
(
iframe
)
;
return
iframe
;
}
;
window
.
insertIframeWithAboutBlankSrcWaitForLoad
=
async
(
t
)
=
>
{
const
iframe
=
insertIframeWithAboutBlankSrc
(
t
)
;
const
aboutBlankLoad
=
new
Promise
(
resolve
=
>
{
t
.
step_timeout
(
resolve
100
)
;
}
)
;
await
aboutBlankLoad
;
return
iframe
;
}
;
window
.
waitForLoad
=
(
t
iframe
urlRelativeToThisDocument
)
=
>
{
return
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
t
.
step_func
(
(
)
=
>
{
assert_equals
(
iframe
.
contentWindow
.
location
.
href
(
new
URL
(
urlRelativeToThisDocument
location
.
href
)
)
.
href
)
;
setTimeout
(
resolve
0
)
;
}
)
{
once
:
true
}
)
;
}
)
;
}
;
window
.
windowOpen204
=
(
t
)
=
>
{
const
openedWindow
=
window
.
open
(
url204
)
;
t
.
add_cleanup
(
(
)
=
>
openedWindow
.
close
(
)
)
;
return
openedWindow
;
}
;
window
.
windowOpenNoURL
=
(
t
)
=
>
{
const
openedWindow
=
window
.
open
(
)
;
t
.
add_cleanup
(
(
)
=
>
openedWindow
.
close
(
)
)
;
return
openedWindow
;
}
;
window
.
windowOpenAboutBlank
=
(
t
)
=
>
{
const
openedWindow
=
window
.
open
(
"
about
:
blank
"
)
;
t
.
add_cleanup
(
(
)
=
>
openedWindow
.
close
(
)
)
;
return
openedWindow
;
}
;
window
.
waitForMessage
=
(
t
message
)
=
>
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
t
.
step_func
(
(
event
)
=
>
{
if
(
event
.
data
=
=
message
)
resolve
(
)
;
}
)
)
;
}
)
;
}
;
