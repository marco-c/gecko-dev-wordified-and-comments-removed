'
use
strict
'
;
promise_test
(
async
t
=
>
{
const
header1Name
=
'
x
-
wpt
-
test
-
header1
'
;
const
header1Value
=
'
test
-
escaping1
(
)
'
;
const
rcHelper
=
new
RemoteContextHelper
(
{
origin
:
'
HTTP_REMOTE_ORIGIN
'
scripts
:
[
'
/
common
/
get
-
host
-
info
.
sub
.
js
'
'
.
/
resources
/
test
-
script
.
js
'
]
headers
:
[
[
header1Name
header1Value
]
]
}
)
;
const
header2Name
=
'
x
-
wpt
-
test
-
header2
'
;
const
header2Value
=
'
test
-
escaping2
(
)
'
;
const
main
=
await
rcHelper
.
addWindow
(
{
origin
:
location
.
origin
scripts
:
[
new
URL
(
'
.
/
resources
/
test
-
script2
.
js
'
location
)
.
toString
(
)
]
headers
:
[
[
header2Name
header2Value
]
]
}
)
;
await
assertSimplestScriptRuns
(
main
)
;
await
assertFunctionRuns
(
main
(
)
=
>
testFunction
(
)
'
testFunction
exists
'
)
;
await
assertFunctionRuns
(
main
(
)
=
>
testFunction2
(
)
'
testFunction2
exists
'
)
;
await
assertOriginIsAsExpected
(
main
location
.
origin
)
;
await
assertHeaderIsAsExpected
(
main
header1Name
header1Value
)
;
await
assertHeaderIsAsExpected
(
main
header2Name
header2Value
)
;
}
)
;
