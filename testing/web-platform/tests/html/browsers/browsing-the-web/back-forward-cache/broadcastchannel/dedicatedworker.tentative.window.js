'
use
strict
'
;
promise_test
(
async
t
=
>
{
const
rcHelper
=
new
RemoteContextHelper
(
)
;
const
rc1
=
await
rcHelper
.
addWindow
(
{
}
{
features
:
'
noopener
'
}
)
;
let
workerVar
;
const
worker
=
await
rc1
.
addWorker
(
workerVar
{
scripts
:
[
'
.
.
/
resources
/
worker
-
with
-
broadcastchannel
.
js
'
]
}
)
;
await
assertSimplestScriptRuns
(
worker
)
;
await
prepareForBFCache
(
rc1
)
;
const
newRemoteContextHelper
=
await
rc1
.
navigateToNew
(
)
;
await
assertSimplestScriptRuns
(
newRemoteContextHelper
)
;
let
channel
=
new
BroadcastChannel
(
'
foo
'
)
;
channel
.
postMessage
(
'
bar
'
)
;
await
newRemoteContextHelper
.
historyBack
(
)
;
await
assertImplementsBFCacheOptional
(
rc1
)
;
await
worker
.
executeScript
(
(
)
=
>
{
return
waitForEventsPromise
(
1
)
;
}
)
;
}
)
;
