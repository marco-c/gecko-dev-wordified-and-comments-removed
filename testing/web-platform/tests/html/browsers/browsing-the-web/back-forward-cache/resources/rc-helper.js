async
function
prepareForBFCache
(
remoteContextHelper
)
{
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
window
.
beforeBFCache
=
true
;
}
)
;
}
async
function
getBeforeBFCache
(
remoteContextHelper
)
{
return
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
return
window
.
beforeBFCache
;
}
)
;
}
async
function
assertImplementsBFCacheOptional
(
remoteContextHelper
)
{
var
beforeBFCache
=
await
getBeforeBFCache
(
remoteContextHelper
)
;
assert_implements_optional
(
beforeBFCache
=
=
true
'
BFCache
not
supported
.
'
)
;
}
async
function
assertNotRestoredFromBFCache
(
remoteContextHelper
notRestoredReasons
)
{
var
beforeBFCache
=
await
getBeforeBFCache
(
remoteContextHelper
)
;
assert_equals
(
beforeBFCache
undefined
)
;
if
(
notRestoredReasons
=
=
=
undefined
)
{
return
;
}
let
isFeatureEnabled
=
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
return
'
notRestoredReasons
'
in
performance
.
getEntriesByType
(
'
navigation
'
)
[
0
]
;
}
)
;
if
(
!
isFeatureEnabled
)
{
return
;
}
let
result
=
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
return
performance
.
getEntriesByType
(
'
navigation
'
)
[
0
]
.
notRestoredReasons
;
}
)
;
let
expectedNotRestoredReasonsSet
=
new
Set
(
notRestoredReasons
)
;
let
notRestoredReasonsSet
=
new
Set
(
)
;
const
collectReason
=
(
node
)
=
>
{
for
(
let
reason
of
node
.
reasons
)
{
notRestoredReasonsSet
.
add
(
reason
)
;
}
for
(
let
child
of
node
.
children
)
{
collectReason
(
child
)
;
}
}
collectReason
(
result
)
;
assert_equals
(
notRestoredReasonsSet
.
length
expectedNotRestoredReasonsSet
.
length
)
;
for
(
let
reason
of
expectedNotRestoredReasonsSet
)
{
assert_true
(
notRestoredReasonsSet
.
has
(
reason
)
)
;
}
}
async
function
assertBFCacheEligibility
(
remoteContextHelper
shouldRestoreFromBFCache
)
{
await
prepareForBFCache
(
remoteContextHelper
)
;
const
newRemoteContextHelper
=
await
remoteContextHelper
.
navigateToNew
(
)
;
await
newRemoteContextHelper
.
historyBack
(
)
;
if
(
shouldRestoreFromBFCache
)
{
await
assertImplementsBFCacheOptional
(
remoteContextHelper
)
;
}
else
{
await
assertNotRestoredFromBFCache
(
remoteContextHelper
)
;
}
}
