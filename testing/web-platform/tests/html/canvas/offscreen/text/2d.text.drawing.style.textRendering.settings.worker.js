importScripts
(
"
/
resources
/
testharness
.
js
"
)
;
importScripts
(
"
/
html
/
canvas
/
resources
/
canvas
-
tests
.
js
"
)
;
var
t
=
async_test
(
"
Testing
basic
functionalities
of
textRendering
in
Canvas
"
)
;
var
t_pass
=
t
.
done
.
bind
(
t
)
;
var
t_fail
=
t
.
step_func
(
function
(
reason
)
{
throw
reason
;
}
)
;
t
.
step
(
function
(
)
{
var
offscreenCanvas
=
new
OffscreenCanvas
(
100
50
)
;
var
ctx
=
offscreenCanvas
.
getContext
(
'
2d
'
)
;
_assertSame
(
ctx
.
textRendering
"
Auto
"
"
ctx
.
textRendering
"
"
\
"
Auto
\
"
"
)
;
ctx
.
textRendering
=
"
auto
"
;
_assertSame
(
ctx
.
textRendering
"
Auto
"
"
ctx
.
textRendering
"
"
\
"
Auto
\
"
"
)
;
ctx
.
textRendering
=
"
optimizespeed
"
;
_assertSame
(
ctx
.
textRendering
"
OptimizeSpeed
"
"
ctx
.
textRendering
"
"
\
"
OptimizeSpeed
\
"
"
)
;
ctx
.
textRendering
=
"
optimizelegibility
"
;
_assertSame
(
ctx
.
textRendering
"
OptimizeLegibility
"
"
ctx
.
textRendering
"
"
\
"
OptimizeLegibility
\
"
"
)
;
ctx
.
textRendering
=
"
geometricprecision
"
;
_assertSame
(
ctx
.
textRendering
"
GeometricPrecision
"
"
ctx
.
textRendering
"
"
\
"
GeometricPrecision
\
"
"
)
;
ctx
.
textRendering
=
"
aUto
"
;
_assertSame
(
ctx
.
textRendering
"
Auto
"
"
ctx
.
textRendering
"
"
\
"
Auto
\
"
"
)
;
ctx
.
textRendering
=
"
OPtimizeSpeed
"
;
_assertSame
(
ctx
.
textRendering
"
OptimizeSpeed
"
"
ctx
.
textRendering
"
"
\
"
OptimizeSpeed
\
"
"
)
;
ctx
.
textRendering
=
"
OPtimizELEgibility
"
;
_assertSame
(
ctx
.
textRendering
"
OptimizeLegibility
"
"
ctx
.
textRendering
"
"
\
"
OptimizeLegibility
\
"
"
)
;
ctx
.
textRendering
=
"
GeometricPrecision
"
;
_assertSame
(
ctx
.
textRendering
"
GeometricPrecision
"
"
ctx
.
textRendering
"
"
\
"
GeometricPrecision
\
"
"
)
;
ctx
.
textRendering
=
"
abcd
"
;
_assertSame
(
ctx
.
textRendering
"
GeometricPrecision
"
"
ctx
.
textRendering
"
"
\
"
GeometricPrecision
\
"
"
)
;
t
.
done
(
)
;
}
)
;
done
(
)
;
