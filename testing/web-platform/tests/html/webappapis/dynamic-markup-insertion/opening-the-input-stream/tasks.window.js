setup
(
{
allow_uncaught_exception
:
true
}
)
;
function
taskTest
(
description
testBody
)
{
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
assert_in_array
(
frame
.
contentDocument
.
readyState
[
"
interactive
"
"
complete
"
]
)
;
testBody
(
t
frame
doc
=
>
{
}
)
;
}
)
;
}
tasks
without
document
.
open
(
)
(
{
description
}
)
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
assert_in_array
(
frame
.
contentDocument
.
readyState
[
"
interactive
"
"
complete
"
]
)
;
testBody
(
t
frame
doc
=
>
doc
.
open
(
)
)
;
}
)
;
}
document
.
open
(
)
and
tasks
(
{
description
}
)
)
;
}
taskTest
(
"
timeout
"
(
t
frame
open
)
=
>
{
frame
.
contentWindow
.
setTimeout
(
t
.
step_func_done
(
)
100
)
;
open
(
frame
.
contentDocument
)
;
}
)
;
taskTest
(
"
window
message
"
(
t
frame
open
)
=
>
{
let
counter
=
0
;
frame
.
contentWindow
.
postMessage
(
undefined
"
*
"
)
;
open
(
frame
.
contentDocument
)
;
frame
.
contentWindow
.
postMessage
(
undefined
"
*
"
)
;
frame
.
contentWindow
.
onmessage
=
t
.
step_func
(
e
=
>
{
assert_equals
(
e
.
data
undefined
)
;
counter
+
+
;
assert_less_than_equal
(
counter
2
)
;
if
(
counter
=
=
2
)
{
t
.
done
(
)
;
}
}
)
;
}
)
;
taskTest
(
"
canvas
.
toBlob
(
)
"
(
t
frame
open
)
=
>
{
const
canvas
=
frame
.
contentDocument
.
body
.
appendChild
(
frame
.
contentDocument
.
createElement
(
"
canvas
"
)
)
;
canvas
.
toBlob
(
t
.
step_func_done
(
)
)
;
open
(
frame
.
contentDocument
)
;
}
)
;
taskTest
(
"
MessagePort
"
(
t
frame
open
)
=
>
{
frame
.
contentWindow
.
eval
(
(
{
port1
port2
}
=
new
MessageChannel
(
)
)
;
)
;
frame
.
contentWindow
.
port2
.
onmessage
=
t
.
step_func_done
(
ev
=
>
{
assert_equals
(
ev
.
data
"
Hello
world
"
)
;
}
)
;
frame
.
contentWindow
.
port1
.
postMessage
(
"
Hello
world
"
)
;
open
(
frame
.
contentDocument
)
;
}
)
;
taskTest
(
"
Promise
rejection
"
(
t
frame
open
)
=
>
{
const
promise
=
frame
.
contentWindow
.
eval
(
"
Promise
.
reject
(
42
)
;
"
)
;
open
(
frame
.
contentDocument
)
;
const
listener
=
t
.
step_func_done
(
ev
=
>
{
assert_equals
(
ev
.
promise
promise
)
;
assert_equals
(
ev
.
reason
42
)
;
}
)
;
frame
.
contentWindow
.
onunhandledrejection
=
listener
;
window
.
onunhandledrejection
=
listener
;
}
)
;
