async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
const
client
=
new
frame
.
contentWindow
.
XMLHttpRequest
(
)
;
client
.
open
(
"
GET
"
"
/
common
/
blank
.
html
"
)
;
client
.
onabort
=
t
.
step_func_done
(
)
;
client
.
send
(
)
;
frame
.
contentWindow
.
location
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
frame
.
contentDocument
.
open
(
)
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
Location
(
XMLHttpRequest
)
"
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
let
happened
=
false
;
frame
.
contentWindow
.
fetch
(
"
/
common
/
blank
.
html
"
)
.
then
(
t
.
unreached_func
(
"
Fetch
should
have
been
aborted
"
)
t
.
step_func_done
(
(
)
=
>
{
assert_true
(
happened
)
;
}
)
)
;
frame
.
contentWindow
.
location
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
frame
.
contentDocument
.
open
(
)
;
happened
=
true
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
Location
(
fetch
(
)
)
"
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
let
happened
=
false
;
const
img
=
frame
.
contentDocument
.
createElement
(
"
img
"
)
;
img
.
src
=
new
URL
(
"
resources
/
slow
-
png
.
py
"
document
.
URL
)
;
img
.
onload
=
t
.
unreached_func
(
"
Image
loading
should
not
have
succeeded
"
)
;
t
.
step_timeout
(
(
)
=
>
{
frame
.
contentWindow
.
location
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
frame
.
contentDocument
.
open
(
)
;
happened
=
true
;
}
)
;
t
.
step_timeout
(
t
.
step_func_done
(
(
)
=
>
{
assert_true
(
happened
)
;
}
)
3000
)
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
Location
(
image
loading
)
"
)
;
async_test
(
t
=
>
{
const
div
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
div
.
remove
(
)
)
;
div
.
innerHTML
=
"
<
iframe
src
=
'
/
common
/
slow
.
py
'
>
<
/
iframe
>
"
;
const
frame
=
div
.
childNodes
[
0
]
;
const
client
=
new
frame
.
contentWindow
.
XMLHttpRequest
(
)
;
client
.
open
(
"
GET
"
"
/
common
/
blank
.
html
"
)
;
client
.
onabort
=
t
.
step_func_done
(
)
;
client
.
send
(
)
;
frame
.
contentDocument
.
open
(
)
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
iframe
loading
(
XMLHttpRequest
)
"
)
;
async_test
(
t
=
>
{
const
div
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
div
.
remove
(
)
)
;
div
.
innerHTML
=
"
<
iframe
src
=
'
/
common
/
slow
.
py
'
>
<
/
iframe
>
"
;
const
frame
=
div
.
childNodes
[
0
]
;
frame
.
contentWindow
.
fetch
(
"
/
common
/
blank
.
html
"
)
.
then
(
t
.
unreached_func
(
"
Fetch
should
have
been
aborted
"
)
t
.
step_func_done
(
)
)
;
frame
.
contentDocument
.
open
(
)
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
iframe
loading
(
fetch
(
)
)
"
)
;
async_test
(
t
=
>
{
const
div
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
div
.
remove
(
)
)
;
div
.
innerHTML
=
"
<
iframe
src
=
'
/
common
/
slow
.
py
'
>
<
/
iframe
>
"
;
const
frame
=
div
.
childNodes
[
0
]
;
let
happened
=
false
;
const
img
=
frame
.
contentDocument
.
createElement
(
"
img
"
)
;
img
.
src
=
new
URL
(
"
resources
/
slow
-
png
.
py
"
document
.
URL
)
;
img
.
onload
=
t
.
unreached_func
(
"
Image
loading
should
not
have
succeeded
"
)
;
t
.
step_timeout
(
(
)
=
>
{
frame
.
contentDocument
.
open
(
)
;
happened
=
true
;
}
)
;
t
.
step_timeout
(
t
.
step_func_done
(
(
)
=
>
{
assert_true
(
happened
)
;
}
)
3000
)
;
}
"
document
.
open
(
)
aborts
documents
that
are
navigating
through
iframe
loading
(
image
loading
)
"
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
const
link
=
frame
.
contentDocument
.
body
.
appendChild
(
frame
.
contentDocument
.
createElement
(
"
a
"
)
)
;
link
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
const
client
=
new
frame
.
contentWindow
.
XMLHttpRequest
(
)
;
client
.
open
(
"
GET
"
"
/
common
/
blank
.
html
"
)
;
client
.
onabort
=
t
.
step_func_done
(
)
;
client
.
send
(
)
;
link
.
click
(
)
;
frame
.
contentDocument
.
open
(
)
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
queued
for
navigation
through
.
click
(
)
(
XMLHttpRequest
)
"
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
const
link
=
frame
.
contentDocument
.
body
.
appendChild
(
frame
.
contentDocument
.
createElement
(
"
a
"
)
)
;
link
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
frame
.
contentWindow
.
fetch
(
"
/
common
/
blank
.
html
"
)
.
then
(
t
.
unreached_func
(
"
Fetch
should
have
been
aborted
"
)
t
.
step_func_done
(
)
)
;
link
.
click
(
)
;
frame
.
contentDocument
.
open
(
)
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
queued
for
navigation
through
.
click
(
)
(
fetch
(
)
)
"
)
;
async_test
(
t
=
>
{
const
frame
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
frame
.
remove
(
)
)
;
frame
.
onload
=
t
.
step_func
(
(
)
=
>
{
frame
.
onload
=
null
;
const
link
=
frame
.
contentDocument
.
body
.
appendChild
(
frame
.
contentDocument
.
createElement
(
"
a
"
)
)
;
link
.
href
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
;
let
happened
=
false
;
const
img
=
frame
.
contentDocument
.
createElement
(
"
img
"
)
;
img
.
src
=
new
URL
(
"
resources
/
slow
-
png
.
py
"
document
.
URL
)
;
img
.
onload
=
t
.
unreached_func
(
"
Image
loading
should
not
have
succeeded
"
)
;
t
.
step_timeout
(
(
)
=
>
{
link
.
click
(
)
;
frame
.
contentDocument
.
open
(
)
;
happened
=
true
;
}
)
;
t
.
step_timeout
(
t
.
step_func_done
(
(
)
=
>
{
assert_true
(
happened
)
;
}
)
3000
)
;
}
)
;
frame
.
src
=
"
/
common
/
blank
.
html
"
;
}
"
document
.
open
(
)
aborts
documents
that
are
queued
for
navigation
through
.
click
(
)
(
image
loading
)
"
)
;
