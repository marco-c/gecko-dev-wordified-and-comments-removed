if
(
!
opener
)
{
async_test
(
t
=
>
{
const
testURL
=
document
.
URL
;
const
dummyURL
=
new
URL
(
"
resources
/
dummy
.
html
"
document
.
URL
)
.
href
;
const
win
=
window
.
open
(
"
resources
/
dummy
.
html
"
)
;
t
.
add_cleanup
(
(
)
=
>
{
win
.
close
(
)
;
}
)
;
win
.
addEventListener
(
"
load
"
t
.
step_func
(
(
)
=
>
{
t
.
step_timeout
(
(
)
=
>
{
const
doc
=
win
.
document
;
assert_true
(
doc
.
body
.
textContent
.
includes
(
"
Dummy
"
)
"
precondition
"
)
;
assert_equals
(
doc
.
URL
dummyURL
"
precondition
"
)
;
window
.
onChildLoad
=
t
.
step_func
(
message
=
>
{
assert_equals
(
message
"
Written
"
"
script
on
written
page
is
executed
"
)
;
assert_true
(
win
.
document
.
body
.
textContent
.
includes
(
"
Content
"
)
"
page
is
written
to
"
)
;
assert_equals
(
win
.
document
.
URL
testURL
"
postcondition
:
after
document
.
write
(
)
"
)
;
assert_equals
(
win
.
document
doc
"
document
.
open
should
not
change
the
document
object
"
)
;
window
.
onChildLoad
=
t
.
step_func_done
(
message
=
>
{
assert_equals
(
message
"
Done
!
"
"
actual
test
"
)
;
assert_true
(
win
.
document
.
body
.
textContent
.
includes
(
"
Back
to
the
test
"
)
"
test
is
reloaded
"
)
;
assert_equals
(
win
.
document
.
URL
testURL
"
postcondition
:
after
reload
"
)
;
assert_not_equals
(
win
.
document
doc
"
reload
should
change
the
document
object
"
)
;
}
)
;
win
.
location
.
reload
(
)
;
}
)
;
assert_equals
(
doc
.
open
(
)
doc
)
;
assert_equals
(
doc
.
URL
testURL
"
postcondition
:
after
document
.
open
(
)
"
)
;
doc
.
write
(
"
<
p
>
Content
<
/
p
>
<
script
>
opener
.
onChildLoad
(
'
Written
'
)
;
<
/
script
>
"
)
;
doc
.
close
(
)
;
}
100
)
;
}
)
{
once
:
true
}
)
;
}
"
Reloading
a
document
.
open
(
)
'
d
page
should
reload
the
URL
of
the
entry
realm
'
s
responsible
document
"
)
;
}
else
{
document
.
write
(
"
<
p
>
Back
to
the
test
<
/
p
>
"
)
;
opener
.
onChildLoad
(
"
Done
!
"
)
;
}
