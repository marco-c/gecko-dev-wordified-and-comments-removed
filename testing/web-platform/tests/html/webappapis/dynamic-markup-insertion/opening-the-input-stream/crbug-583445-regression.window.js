function
executorUrl
(
uuid
options
)
{
const
url
=
new
URL
(
"
/
common
/
dispatcher
/
remote
-
executor
.
html
"
window
.
location
)
;
url
.
searchParams
.
set
(
"
uuid
"
uuid
)
;
if
(
options
?
.
host
)
{
url
.
host
=
options
.
host
;
}
return
url
;
}
function
nextMessage
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
window
.
addEventListener
(
"
message
"
(
e
)
=
>
{
resolve
(
e
.
data
)
;
}
{
once
:
true
}
)
;
}
)
;
}
promise_test
(
async
(
t
)
=
>
{
const
iframeA
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
t
.
add_cleanup
(
(
)
=
>
{
iframeA
.
remove
(
)
;
}
)
;
const
uuidA
=
token
(
)
;
iframeA
.
src
=
executorUrl
(
uuidA
{
host
:
get_host_info
(
)
.
REMOTE_HOST
}
)
;
const
ctxA
=
new
RemoteContext
(
uuidA
)
;
const
uuidB
=
token
(
)
;
await
ctxA
.
execute_script
(
(
url
)
=
>
{
const
iframeB
=
document
.
createElement
(
"
iframe
"
)
;
iframeB
.
src
=
url
;
document
.
body
.
appendChild
(
iframeB
)
;
}
[
executorUrl
(
uuidB
)
.
href
]
)
;
const
message
=
nextMessage
(
)
;
const
ctxB
=
new
RemoteContext
(
uuidB
)
;
await
ctxB
.
execute_script
(
(
)
=
>
{
const
iframeC
=
document
.
body
.
appendChild
(
document
.
createElement
(
"
iframe
"
)
)
;
iframeC
.
contentWindow
.
setTimeout
(
"
(
"
+
(
(
)
=
>
{
parent
.
window
.
setTimeout
(
"
(
"
+
(
(
)
=
>
{
location
=
"
javascript
:
(
"
+
(
(
)
=
>
{
let
error
;
try
{
top
.
window
.
testSameOrigin
=
true
;
}
catch
(
e
)
{
error
=
e
;
}
top
.
postMessage
(
{
error
:
error
?
.
toString
(
)
}
"
*
"
)
;
}
)
+
"
)
(
)
"
;
}
)
+
"
)
(
)
"
0
)
;
parent
.
document
.
open
(
)
;
}
)
+
"
)
(
)
"
0
)
;
}
)
;
const
{
error
}
=
await
message
;
assert_equals
(
error
undefined
"
error
accessing
top
frame
from
frame
B
"
)
;
assert_true
(
window
.
testSameOrigin
"
top
frame
testSameOrigin
is
mutated
"
)
;
}
"
Regression
test
for
crbug
.
com
/
583445
"
)
;
