setup
(
(
)
=
>
{
assert_implements
(
window
.
HTMLFencedFrameElement
"
HTMLFencedFrameElement
is
not
supported
.
"
)
;
}
)
promise_test
(
async
test
=
>
{
const
origin
=
get_host_info
(
)
.
HTTPS_ORIGIN
;
const
msg_queue
=
token
(
)
;
const
frame_anonymous
=
newAnonymousIframe
(
origin
)
;
send
(
frame_anonymous
const
importScript
=
{
importScript
}
;
await
importScript
(
"
/
common
/
utils
.
js
"
)
;
await
importScript
(
"
/
html
/
cross
-
origin
-
embedder
-
policy
/
credentialless
"
+
"
/
resources
/
common
.
js
"
)
;
await
importScript
(
"
/
html
/
cross
-
origin
-
embedder
-
policy
/
anonymous
-
iframe
"
+
"
/
resources
/
common
.
js
"
)
;
const
frame_fenced
=
newFencedFrame
(
"
{
origin
}
"
)
;
send
(
"
{
msg_queue
}
"
frame_fenced
)
;
)
;
const
frame_fenced
=
await
receive
(
msg_queue
)
;
send
(
frame_fenced
send
(
"
{
msg_queue
}
"
window
.
anonymous
)
;
)
;
assert_equals
(
await
receive
(
msg_queue
)
"
false
"
"
Check
window
.
anonymous
in
FencedFrame
"
)
;
}
'
FencedFrame
within
an
AnonymousIframe
is
not
anonymous
'
)
