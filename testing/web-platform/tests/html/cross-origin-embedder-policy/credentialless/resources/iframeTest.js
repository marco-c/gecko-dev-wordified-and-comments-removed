setup
(
{
explicit_timeout
:
true
}
)
;
const
same_origin
=
get_host_info
(
)
.
HTTPS_ORIGIN
;
const
cross_origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
newWindow
=
(
headers
)
=
>
{
const
executor_token
=
token
(
)
;
const
url
=
same_origin
+
executor_path
+
headers
+
&
uuid
=
{
executor_token
}
;
const
w
=
window
.
open
(
url
)
;
add_completion_callback
(
(
)
=
>
w
.
close
(
)
)
;
return
executor_token
;
}
;
const
EXPECT_LOAD
=
"
load
"
;
const
EXPECT_BLOCK
=
"
block
"
;
const
iframeTest
=
function
(
description
parent_token
child_origin
child_headers
expectation
)
{
promise_test_parallel
(
async
test
=
>
{
const
test_token
=
token
(
)
;
const
child_token
=
token
(
)
;
const
child_url
=
child_origin
+
executor_path
+
child_headers
+
&
uuid
=
{
child_token
}
;
send
(
parent_token
let
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
"
{
child_url
}
"
;
document
.
body
.
appendChild
(
iframe
)
;
)
;
send
(
child_token
send
(
"
{
test_token
}
"
"
load
"
)
;
)
;
step_timeout
(
(
)
=
>
send
(
test_token
"
block
"
)
3000
)
;
assert_equals
(
await
receive
(
test_token
)
expectation
)
;
}
description
)
;
}
const
iframeTestCORP
=
function
(
)
{
arguments
[
0
]
+
=
"
CORP
:
cross
-
origin
"
;
arguments
[
3
]
+
=
corp_cross_origin
;
iframeTest
(
.
.
.
arguments
)
;
}
