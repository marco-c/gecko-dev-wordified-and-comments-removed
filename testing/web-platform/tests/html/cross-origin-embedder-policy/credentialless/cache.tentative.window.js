const
cookie_key
=
"
coep_cache_key
"
;
const
cookie_value
=
"
coep_cache_value
"
;
const
same_origin
=
get_host_info
(
)
.
HTTPS_ORIGIN
;
const
cross_origin
=
get_host_info
(
)
.
HTTPS_REMOTE_ORIGIN
;
const
GetCookie
=
(
response
)
=
>
{
return
parseCookies
(
JSON
.
parse
(
response
)
)
[
cookie_key
]
;
}
const
w_coep_none_token
=
token
(
)
;
const
w_coep_none_url
=
same_origin
+
executor_path
+
coep_none
+
&
uuid
=
{
w_coep_none_token
}
const
w_coep_none
=
window
.
open
(
w_coep_none_url
)
;
add_completion_callback
(
(
)
=
>
w_coep_none
.
close
(
)
)
;
const
w_coep_credentialless_token
=
token
(
)
;
const
w_coep_credentialless_url
=
same_origin
+
executor_path
+
coep_credentialless
+
&
uuid
=
{
w_coep_credentialless_token
}
const
w_coep_credentialless
=
window
.
open
(
w_coep_credentialless_url
)
;
add_completion_callback
(
(
)
=
>
w_coep_credentialless
.
close
(
)
)
;
const
this_token
=
token
(
)
;
const
request_token
=
token
(
)
;
const
request_url
=
cacheableShowRequestHeaders
(
cross_origin
request_token
)
;
promise_setup
(
async
test
=
>
{
await
setCookie
(
cross_origin
cookie_key
cookie_value
+
cookie_same_site_none
)
;
}
"
Set
cookie
"
)
;
promise_setup
(
async
test
=
>
{
send
(
w_coep_none_token
await
fetch
(
"
{
request_url
}
"
{
mode
:
"
no
-
cors
"
credentials
:
"
include
"
}
)
;
send
(
"
{
this_token
}
"
"
Resource
fetched
"
)
;
)
;
assert_equals
(
await
receive
(
this_token
)
"
Resource
fetched
"
)
;
assert_equals
(
await
receive
(
request_token
)
.
then
(
GetCookie
)
cookie_value
)
;
}
"
Cache
a
response
requested
with
credentials
"
)
;
promise_test
(
async
test
=
>
{
send
(
w_coep_credentialless_token
await
fetch
(
"
{
request_url
}
"
{
mode
:
"
no
-
cors
"
credentials
:
"
include
"
}
)
;
send
(
"
{
this_token
}
"
"
Resource
fetched
"
)
;
)
;
assert_equals
(
await
receive
(
this_token
)
"
Resource
fetched
"
)
;
test
.
step_timeout
(
test
.
unreached_func
(
"
The
HTTP
cache
has
been
used
"
)
1500
)
;
assert_equals
(
await
receive
(
request_token
)
.
then
(
GetCookie
)
undefined
)
;
}
"
The
HTTP
cache
must
not
be
used
"
)
;
