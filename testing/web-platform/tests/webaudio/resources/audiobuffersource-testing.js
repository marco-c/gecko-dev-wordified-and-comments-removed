function
createTestBuffer
(
context
sampleFrameLength
)
{
let
audioBuffer
=
context
.
createBuffer
(
1
sampleFrameLength
context
.
sampleRate
)
;
let
channelData
=
audioBuffer
.
getChannelData
(
0
)
;
for
(
let
i
=
0
;
i
<
sampleFrameLength
;
+
+
i
)
channelData
[
i
]
=
i
;
return
audioBuffer
;
}
function
checkSingleTest
(
renderedBuffer
i
should
)
{
let
renderedData
=
renderedBuffer
.
getChannelData
(
0
)
;
let
offsetFrame
=
i
*
testSpacingFrames
;
let
test
=
tests
[
i
]
;
let
expected
=
test
.
expected
;
let
description
;
if
(
test
.
description
)
{
description
=
test
.
description
;
}
else
{
description
=
'
loop
from
'
+
test
.
loopStartFrame
+
'
-
>
'
+
test
.
loopEndFrame
;
if
(
test
.
offsetFrame
)
description
+
=
'
with
offset
'
+
test
.
offsetFrame
;
if
(
test
.
playbackRate
&
&
test
.
playbackRate
!
=
1
)
description
+
=
'
with
playbackRate
of
'
+
test
.
playbackRate
;
}
let
framesToTest
;
if
(
test
.
renderFrames
)
framesToTest
=
test
.
renderFrames
;
else
if
(
test
.
durationFrames
)
framesToTest
=
test
.
durationFrames
;
let
prefix
=
'
Case
'
+
i
+
'
:
'
;
should
(
renderedData
.
slice
(
offsetFrame
offsetFrame
+
framesToTest
)
prefix
+
description
)
.
beEqualToArray
(
expected
)
;
should
(
renderedData
.
slice
(
offsetFrame
+
framesToTest
offsetFrame
+
testSpacingFrames
)
prefix
+
description
+
'
:
tail
'
)
.
beConstantValueOf
(
0
)
;
}
function
checkAllTests
(
renderedBuffer
should
)
{
for
(
let
i
=
0
;
i
<
tests
.
length
;
+
+
i
)
checkSingleTest
(
renderedBuffer
i
should
)
;
}
function
createSawtoothWithModulation
(
context
modTarget
modOffset
modRange
)
{
let
lfo
=
context
.
createOscillator
(
)
;
let
amp
=
context
.
createGain
(
)
;
let
phasor
=
context
.
createBufferSource
(
)
;
let
phasorBuffer
=
context
.
createBuffer
(
1
sampleRate
sampleRate
)
;
let
phasorArray
=
phasorBuffer
.
getChannelData
(
0
)
;
let
phase
=
0
phaseStep
=
1
/
sampleRate
;
for
(
let
i
=
0
;
i
<
phasorArray
.
length
;
i
+
+
)
{
phasorArray
[
i
]
=
phase
%
1
.
0
;
phase
+
=
phaseStep
;
}
phasor
.
buffer
=
phasorBuffer
;
phasor
.
loop
=
true
;
lfo
.
frequency
.
value
=
1
.
0
;
amp
.
gain
.
value
=
modRange
;
phasor
.
playbackRate
.
value
=
modOffset
;
lfo
.
connect
(
amp
)
;
amp
.
connect
(
phasor
[
modTarget
]
)
;
phasor
.
connect
(
context
.
destination
)
;
lfo
.
start
(
)
;
phasor
.
start
(
)
;
}
