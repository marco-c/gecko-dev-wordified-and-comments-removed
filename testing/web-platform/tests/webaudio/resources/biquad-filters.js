function
createLowpassFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
if
(
freq
=
=
1
)
{
b0
=
1
;
b1
=
0
;
b2
=
0
;
a0
=
1
;
a1
=
0
;
a2
=
0
;
}
else
{
let
theta
=
Math
.
PI
*
freq
;
let
alpha
=
Math
.
sin
(
theta
)
/
(
2
*
Math
.
pow
(
10
q
/
20
)
)
;
let
cosw
=
Math
.
cos
(
theta
)
;
let
beta
=
(
1
-
cosw
)
/
2
;
b0
=
beta
;
b1
=
2
*
beta
;
b2
=
beta
;
a0
=
1
+
alpha
;
a1
=
-
2
*
cosw
;
a2
=
1
-
alpha
;
}
return
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
function
createHighpassFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
if
(
freq
=
=
1
)
{
b0
=
0
;
b1
=
0
;
b2
=
0
;
a0
=
1
;
a1
=
0
;
a2
=
0
;
}
else
if
(
freq
=
=
0
)
{
b0
=
1
;
b1
=
0
;
b2
=
0
;
a0
=
1
;
a1
=
0
;
a2
=
0
;
}
else
{
let
theta
=
Math
.
PI
*
freq
;
let
alpha
=
Math
.
sin
(
theta
)
/
(
2
*
Math
.
pow
(
10
q
/
20
)
)
;
let
cosw
=
Math
.
cos
(
theta
)
;
let
beta
=
(
1
+
cosw
)
/
2
;
b0
=
beta
;
b1
=
-
2
*
beta
;
b2
=
beta
;
a0
=
1
+
alpha
;
a1
=
-
2
*
cosw
;
a2
=
1
-
alpha
;
}
return
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
function
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
{
let
scale
=
1
/
a0
;
return
{
b0
:
b0
*
scale
b1
:
b1
*
scale
b2
:
b2
*
scale
a1
:
a1
*
scale
a2
:
a2
*
scale
}
;
}
function
createBandpassFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
if
(
freq
>
0
&
&
freq
<
1
)
{
let
w0
=
Math
.
PI
*
freq
;
if
(
q
>
0
)
{
let
alpha
=
Math
.
sin
(
w0
)
/
(
2
*
q
)
;
let
k
=
Math
.
cos
(
w0
)
;
b0
=
alpha
;
b1
=
0
;
b2
=
-
alpha
;
a0
=
1
+
alpha
;
a1
=
-
2
*
k
;
a2
=
1
-
alpha
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
else
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
}
else
{
coef
=
{
b0
:
0
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
}
return
coef
;
}
function
createLowShelfFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
let
S
=
1
;
let
A
=
Math
.
pow
(
10
gain
/
40
)
;
if
(
freq
=
=
1
)
{
coef
=
{
b0
:
A
*
A
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
else
if
(
freq
=
=
0
)
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
else
{
let
w0
=
Math
.
PI
*
freq
;
let
alpha
=
1
/
2
*
Math
.
sin
(
w0
)
*
Math
.
sqrt
(
(
A
+
1
/
A
)
*
(
1
/
S
-
1
)
+
2
)
;
let
k
=
Math
.
cos
(
w0
)
;
let
k2
=
2
*
Math
.
sqrt
(
A
)
*
alpha
;
let
Ap1
=
A
+
1
;
let
Am1
=
A
-
1
;
b0
=
A
*
(
Ap1
-
Am1
*
k
+
k2
)
;
b1
=
2
*
A
*
(
Am1
-
Ap1
*
k
)
;
b2
=
A
*
(
Ap1
-
Am1
*
k
-
k2
)
;
a0
=
Ap1
+
Am1
*
k
+
k2
;
a1
=
-
2
*
(
Am1
+
Ap1
*
k
)
;
a2
=
Ap1
+
Am1
*
k
-
k2
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
return
coef
;
}
function
createHighShelfFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
let
A
=
Math
.
pow
(
10
gain
/
40
)
;
if
(
freq
=
=
1
)
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
else
if
(
freq
>
0
)
{
let
w0
=
Math
.
PI
*
freq
;
let
S
=
1
;
let
alpha
=
0
.
5
*
Math
.
sin
(
w0
)
*
Math
.
sqrt
(
(
A
+
1
/
A
)
*
(
1
/
S
-
1
)
+
2
)
;
let
k
=
Math
.
cos
(
w0
)
;
let
k2
=
2
*
Math
.
sqrt
(
A
)
*
alpha
;
let
Ap1
=
A
+
1
;
let
Am1
=
A
-
1
;
b0
=
A
*
(
Ap1
+
Am1
*
k
+
k2
)
;
b1
=
-
2
*
A
*
(
Am1
+
Ap1
*
k
)
;
b2
=
A
*
(
Ap1
+
Am1
*
k
-
k2
)
;
a0
=
Ap1
-
Am1
*
k
+
k2
;
a1
=
2
*
(
Am1
-
Ap1
*
k
)
;
a2
=
Ap1
-
Am1
*
k
-
k2
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
else
{
coef
=
{
b0
:
A
*
A
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
return
coef
;
}
function
createPeakingFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
let
A
=
Math
.
pow
(
10
gain
/
40
)
;
if
(
freq
>
0
&
&
freq
<
1
)
{
if
(
q
>
0
)
{
let
w0
=
Math
.
PI
*
freq
;
let
alpha
=
Math
.
sin
(
w0
)
/
(
2
*
q
)
;
let
k
=
Math
.
cos
(
w0
)
;
b0
=
1
+
alpha
*
A
;
b1
=
-
2
*
k
;
b2
=
1
-
alpha
*
A
;
a0
=
1
+
alpha
/
A
;
a1
=
-
2
*
k
;
a2
=
1
-
alpha
/
A
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
else
{
coef
=
{
b0
:
A
*
A
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
}
else
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
return
coef
;
}
function
createNotchFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
if
(
freq
>
0
&
&
freq
<
1
)
{
if
(
q
>
0
)
{
let
w0
=
Math
.
PI
*
freq
;
let
alpha
=
Math
.
sin
(
w0
)
/
(
2
*
q
)
;
let
k
=
Math
.
cos
(
w0
)
;
b0
=
1
;
b1
=
-
2
*
k
;
b2
=
1
;
a0
=
1
+
alpha
;
a1
=
-
2
*
k
;
a2
=
1
-
alpha
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
else
{
coef
=
{
b0
:
0
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
}
else
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
return
coef
;
}
function
createAllpassFilter
(
freq
q
gain
)
{
let
b0
;
let
b1
;
let
b2
;
let
a0
;
let
a1
;
let
a2
;
let
coef
;
if
(
freq
>
0
&
&
freq
<
1
)
{
if
(
q
>
0
)
{
let
w0
=
Math
.
PI
*
freq
;
let
alpha
=
Math
.
sin
(
w0
)
/
(
2
*
q
)
;
let
k
=
Math
.
cos
(
w0
)
;
b0
=
1
-
alpha
;
b1
=
-
2
*
k
;
b2
=
1
+
alpha
;
a0
=
1
+
alpha
;
a1
=
-
2
*
k
;
a2
=
1
-
alpha
;
coef
=
normalizeFilterCoefficients
(
b0
b1
b2
a0
a1
a2
)
;
}
else
{
coef
=
{
b0
:
-
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
}
else
{
coef
=
{
b0
:
1
b1
:
0
b2
:
0
a1
:
0
a2
:
0
}
;
}
return
coef
;
}
function
filterData
(
filterCoef
signal
len
)
{
let
y
=
new
Array
(
len
)
;
let
b0
=
filterCoef
.
b0
;
let
b1
=
filterCoef
.
b1
;
let
b2
=
filterCoef
.
b2
;
let
a1
=
filterCoef
.
a1
;
let
a2
=
filterCoef
.
a2
;
y
[
0
]
=
b0
*
signal
[
0
]
;
y
[
1
]
=
b0
*
signal
[
1
]
+
b1
*
signal
[
0
]
-
a1
*
y
[
0
]
;
for
(
let
k
=
2
;
k
<
Math
.
min
(
signal
.
length
len
)
;
+
+
k
)
{
y
[
k
]
=
b0
*
signal
[
k
]
+
b1
*
signal
[
k
-
1
]
+
b2
*
signal
[
k
-
2
]
-
a1
*
y
[
k
-
1
]
-
a2
*
y
[
k
-
2
]
;
}
for
(
let
k
=
signal
.
length
;
k
<
len
;
+
+
k
)
{
y
[
k
]
=
-
a1
*
y
[
k
-
1
]
-
a2
*
y
[
k
-
2
]
;
}
return
y
;
}
let
filterCreatorFunction
=
{
'
lowpass
'
:
createLowpassFilter
'
highpass
'
:
createHighpassFilter
'
bandpass
'
:
createBandpassFilter
'
lowshelf
'
:
createLowShelfFilter
'
highshelf
'
:
createHighShelfFilter
'
peaking
'
:
createPeakingFilter
'
notch
'
:
createNotchFilter
'
allpass
'
:
createAllpassFilter
}
;
let
filterTypeName
=
{
'
lowpass
'
:
'
Lowpass
filter
'
'
highpass
'
:
'
Highpass
filter
'
'
bandpass
'
:
'
Bandpass
filter
'
'
lowshelf
'
:
'
Lowshelf
filter
'
'
highshelf
'
:
'
Highshelf
filter
'
'
peaking
'
:
'
Peaking
filter
'
'
notch
'
:
'
Notch
filter
'
'
allpass
'
:
'
Allpass
filter
'
}
;
function
createFilter
(
filterType
freq
q
gain
)
{
return
filterCreatorFunction
[
filterType
]
(
freq
q
gain
)
;
}
