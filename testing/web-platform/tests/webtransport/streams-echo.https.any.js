promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
bidi_stream
=
await
wt
.
createBidirectionalStream
(
)
;
const
writer
=
bidi_stream
.
writable
.
getWriter
(
)
;
const
encoder
=
new
TextEncoder
(
)
;
await
writer
.
write
(
encoder
.
encode
(
'
Hello
World
'
)
)
;
await
writer
.
close
(
)
;
const
reply
=
await
read_stream_as_string
(
bidi_stream
.
readable
)
;
assert_equals
(
reply
'
Hello
World
'
)
;
}
'
WebTransport
server
should
be
able
to
create
and
handle
a
bidirectional
stream
'
)
;
promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
stream_reader
=
wt
.
incomingBidirectionalStreams
.
getReader
(
)
;
const
{
value
:
bidi_stream
}
=
await
stream_reader
.
read
(
)
;
stream_reader
.
releaseLock
(
)
;
const
encoder
=
new
TextEncoderStream
(
)
;
encoder
.
readable
.
pipeTo
(
bidi_stream
.
writable
)
;
const
writer
=
encoder
.
writable
.
getWriter
(
)
;
await
writer
.
write
(
'
Hello
World
'
)
;
await
writer
.
close
(
)
;
const
reply
=
await
read_stream_as_string
(
bidi_stream
.
readable
)
;
assert_equals
(
reply
'
Hello
World
'
)
;
}
'
WebTransport
server
should
be
able
to
accept
and
handle
a
bidirectional
stream
'
)
;
promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
writable
=
await
wt
.
createUnidirectionalStream
(
)
;
const
encoder
=
new
TextEncoderStream
(
)
;
encoder
.
readable
.
pipeTo
(
writable
)
;
const
writer
=
encoder
.
writable
.
getWriter
(
)
;
await
writer
.
write
(
'
Hello
World
'
)
;
await
writer
.
close
(
)
;
const
readable
=
wt
.
incomingUnidirectionalStreams
;
const
stream_reader
=
readable
.
getReader
(
)
;
const
{
value
:
recv_stream
}
=
await
stream_reader
.
read
(
)
;
stream_reader
.
releaseLock
(
)
;
const
reply
=
await
read_stream_as_string
(
recv_stream
)
;
assert_equals
(
reply
'
Hello
World
'
)
;
}
'
WebTransport
server
should
be
able
to
create
accept
and
handle
a
unidirectional
stream
'
)
;
