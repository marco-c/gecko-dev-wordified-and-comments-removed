promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
{
readable
writable
}
=
await
wt
.
createBidirectionalStream
(
{
sendOrder
:
3
}
)
;
assert_equals
(
writable
.
sendOrder
3
)
;
const
writer
=
writable
.
getWriter
(
)
;
const
encoder
=
new
TextEncoder
(
)
;
writer
.
write
(
encoder
.
encode
(
'
Hello
World
'
)
)
.
catch
(
(
)
=
>
{
}
)
;
await
writer
.
close
(
)
;
const
reply
=
await
read_stream_as_string
(
readable
)
;
assert_equals
(
reply
'
Hello
World
'
)
;
}
'
WebTransport
client
should
be
able
to
create
and
handle
a
bidirectional
stream
with
sendOrder
'
)
;
promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
{
readable
writable
}
=
await
wt
.
createBidirectionalStream
(
)
;
assert_equals
(
writable
.
sendOrder
null
)
;
writable
.
sendOrder
=
4
;
assert_equals
(
writable
.
sendOrder
4
)
;
}
'
WebTransport
client
should
be
able
to
modify
unset
sendOrder
after
stream
creation
'
)
;
promise_test
(
async
t
=
>
{
const
wt
=
new
WebTransport
(
webtransport_url
(
'
echo
.
py
'
)
)
;
await
wt
.
ready
;
const
{
readable
writable
}
=
await
wt
.
createBidirectionalStream
(
{
sendOrder
:
3
}
)
;
assert_equals
(
writable
.
sendOrder
3
)
;
writable
.
sendOrder
=
5
;
assert_equals
(
writable
.
sendOrder
5
)
;
writable
.
sendOrder
=
null
;
assert_equals
(
writable
.
sendOrder
null
)
;
}
'
WebTransport
client
should
be
able
to
modify
existing
sendOrder
after
stream
creation
'
)
;
