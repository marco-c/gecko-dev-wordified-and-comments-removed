'
use
strict
'
;
function
parseAssertionResult
(
assertionResultStr
)
{
const
assertionResult
=
JSON
.
parse
(
atob
(
assertionResultStr
)
)
;
const
{
idp
}
=
assertionResult
;
const
assertion
=
JSON
.
parse
(
assertionResult
.
assertion
)
;
return
{
idp
assertion
}
;
}
function
getIdpDomains
(
)
{
const
domainA
=
'
{
{
domains
[
www
]
}
}
'
;
const
domainB
=
'
{
{
domains
[
www1
]
}
}
'
;
const
domainC
=
'
{
{
domains
[
www2
]
}
}
'
;
if
(
window
.
location
.
hostname
=
=
=
domainA
)
{
return
[
domainB
domainC
]
;
}
else
if
(
window
.
location
.
hostname
=
=
=
domainB
)
{
return
[
domainA
domainC
]
;
}
else
{
return
[
domainA
domainB
]
;
}
}
function
assert_rtcerror_rejection
(
errorDetail
promise
desc
)
{
return
promise
.
then
(
res
=
>
{
assert_unreached
(
Expect
promise
to
be
rejected
with
RTCError
but
instead
got
{
res
}
)
;
}
err
=
>
{
assert_true
(
err
instanceof
RTCError
'
Expect
error
object
to
be
instance
of
RTCError
'
)
;
assert_equals
(
err
.
errorDetail
errorDetail
Expect
RTCError
object
have
errorDetail
set
to
{
errorDetail
}
)
;
return
err
;
}
)
;
}
function
hostString
(
domain
port
)
{
if
(
port
=
=
=
'
'
)
{
return
domain
;
}
else
{
return
{
domain
}
:
{
port
}
;
}
}
