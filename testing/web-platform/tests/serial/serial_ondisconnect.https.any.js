serial_test
(
async
(
t
fake
)
=
>
{
const
eventWatcher
=
new
EventWatcher
(
t
navigator
.
serial
[
'
connect
'
'
disconnect
'
]
)
;
let
ports
=
await
navigator
.
serial
.
getPorts
(
)
;
assert_equals
(
ports
.
length
0
)
;
const
token1
=
fake
.
addPort
(
)
;
const
port1
=
(
await
eventWatcher
.
wait_for
(
[
'
connect
'
]
)
)
.
target
;
const
token2
=
fake
.
addPort
(
)
;
const
port2
=
(
await
eventWatcher
.
wait_for
(
[
'
connect
'
]
)
)
.
target
;
fake
.
removePort
(
token2
)
;
const
event1
=
await
eventWatcher
.
wait_for
(
[
'
disconnect
'
]
)
;
assert_true
(
event1
instanceof
Event
)
;
assert_equals
(
event1
.
target
port2
)
;
ports
=
await
navigator
.
serial
.
getPorts
(
)
;
assert_equals
(
ports
.
length
1
)
;
assert_equals
(
ports
[
0
]
port1
)
;
fake
.
removePort
(
token1
)
;
const
event2
=
await
eventWatcher
.
wait_for
(
[
'
disconnect
'
]
)
;
assert_true
(
event2
instanceof
Event
)
;
assert_equals
(
event2
.
target
port1
)
;
ports
=
await
navigator
.
serial
.
getPorts
(
)
;
assert_equals
(
ports
.
length
0
)
;
}
'
A
"
disconnect
"
event
is
fired
when
ports
are
added
.
'
)
;
