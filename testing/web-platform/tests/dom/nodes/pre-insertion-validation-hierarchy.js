function
preInsertionValidateHierarchy
(
methodName
)
{
function
insert
(
parent
node
)
{
if
(
parent
[
methodName
]
.
length
>
1
)
{
parent
[
methodName
]
(
node
null
)
;
}
else
{
parent
[
methodName
]
(
node
)
;
}
}
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
.
body
doc
.
body
)
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
.
body
doc
.
documentElement
)
)
;
}
"
If
node
is
a
host
-
including
inclusive
ancestor
of
parent
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
doc2
=
document
.
implementation
.
createHTMLDocument
(
"
title2
"
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
doc2
)
)
;
}
"
If
node
is
not
a
DocumentFragment
DocumentType
Element
Text
ProcessingInstruction
or
Comment
node
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
doc
.
createTextNode
(
"
text
"
)
)
)
;
}
"
If
node
is
a
Text
node
and
parent
is
a
document
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
doctype
=
doc
.
childNodes
[
0
]
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
.
createElement
(
"
a
"
)
doctype
)
)
;
}
"
If
node
is
a
doctype
and
parent
is
not
a
document
then
throw
a
HierarchyRequestError
DOMException
.
"
)
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
doc
.
documentElement
.
remove
(
)
;
const
df
=
doc
.
createDocumentFragment
(
)
;
df
.
appendChild
(
doc
.
createElement
(
"
a
"
)
)
;
df
.
appendChild
(
doc
.
createElement
(
"
b
"
)
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
df
)
)
;
}
"
If
node
is
a
DocumentFragment
with
multiple
elements
and
parent
is
a
document
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
df
=
doc
.
createDocumentFragment
(
)
;
df
.
appendChild
(
doc
.
createElement
(
"
a
"
)
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
df
)
)
;
}
"
If
node
is
a
DocumentFragment
with
an
element
and
parent
is
a
document
with
another
element
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
el
=
doc
.
createElement
(
"
a
"
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
el
)
)
;
}
"
If
node
is
an
Element
and
parent
is
a
document
with
another
element
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
doctype
=
doc
.
childNodes
[
0
]
.
cloneNode
(
)
;
doc
.
documentElement
.
remove
(
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
doctype
)
)
;
}
"
If
node
is
a
doctype
and
parent
is
a
document
with
another
doctype
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
if
(
methodName
!
=
=
"
prepend
"
)
{
test
(
(
)
=
>
{
const
doc
=
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
;
const
doctype
=
doc
.
childNodes
[
0
]
.
cloneNode
(
)
;
doc
.
childNodes
[
0
]
.
remove
(
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
(
)
=
>
insert
(
doc
doctype
)
)
;
}
"
If
node
is
a
doctype
and
parent
is
a
document
with
an
element
then
throw
a
HierarchyRequestError
DOMException
.
"
)
;
}
}
