function
getNonParentNodes
(
)
{
return
[
document
.
implementation
.
createDocumentType
(
"
html
"
"
"
"
"
)
document
.
createTextNode
(
"
text
"
)
document
.
implementation
.
createDocument
(
null
"
foo
"
null
)
.
createProcessingInstruction
(
"
foo
"
"
bar
"
)
document
.
createComment
(
"
comment
"
)
document
.
implementation
.
createDocument
(
null
"
foo
"
null
)
.
createCDATASection
(
"
data
"
)
]
;
}
function
getNonInsertableNodes
(
)
{
return
[
document
.
implementation
.
createHTMLDocument
(
"
title
"
)
]
;
}
function
getNonDocumentParentNodes
(
)
{
return
[
document
.
createElement
(
"
div
"
)
document
.
createDocumentFragment
(
)
]
;
}
test
(
function
(
)
{
var
illegalParents
=
getNonParentNodes
(
)
;
var
child
=
document
.
createElement
(
"
div
"
)
;
var
node
=
document
.
createElement
(
"
div
"
)
;
illegalParents
.
forEach
(
function
(
parent
)
{
assert_throws_dom
(
"
HierarchyRequestError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
}
)
;
}
"
Should
check
the
'
parent
'
type
before
checking
whether
'
child
'
is
a
child
of
'
parent
'
"
)
;
test
(
function
(
)
{
var
parent
=
document
.
createElement
(
"
div
"
)
;
var
child
=
document
.
createElement
(
"
div
"
)
;
var
node
=
document
.
createElement
(
"
div
"
)
;
node
.
appendChild
(
parent
)
;
assert_throws_dom
(
"
HierarchyRequestError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
}
"
Should
check
that
'
node
'
is
not
an
ancestor
of
'
parent
'
before
checking
whether
'
child
'
is
a
child
of
'
parent
'
"
)
;
test
(
function
(
)
{
var
parent
=
document
.
createElement
(
"
div
"
)
;
var
child
=
document
.
createElement
(
"
div
"
)
;
var
illegalChildren
=
getNonInsertableNodes
(
)
;
illegalChildren
.
forEach
(
function
(
node
)
{
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
}
)
;
}
"
Should
check
whether
'
child
'
is
a
child
of
'
parent
'
before
checking
whether
'
node
'
is
of
a
type
that
can
have
a
parent
.
"
)
;
test
(
function
(
)
{
var
child
=
document
.
createElement
(
"
div
"
)
;
var
node
=
document
.
createTextNode
(
"
"
)
;
var
parent
=
document
.
implementation
.
createDocument
(
null
"
foo
"
null
)
;
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
node
=
document
.
implementation
.
createDocumentType
(
"
html
"
"
"
"
"
)
;
getNonDocumentParentNodes
(
)
.
forEach
(
function
(
parent
)
{
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
}
)
;
}
"
Should
check
whether
'
child
'
is
a
child
of
'
parent
'
before
checking
whether
'
node
'
is
of
a
type
that
can
have
a
parent
of
the
type
that
'
parent
'
is
.
"
)
;
test
(
function
(
)
{
var
child
=
document
.
createElement
(
"
div
"
)
;
var
parent
=
document
.
implementation
.
createDocument
(
null
null
null
)
;
var
node
=
document
.
createDocumentFragment
(
)
;
node
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
node
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
node
=
document
.
createElement
(
"
div
"
)
;
parent
.
appendChild
(
document
.
createElement
(
"
div
"
)
)
;
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
parent
.
firstChild
.
remove
(
)
;
parent
.
appendChild
(
document
.
implementation
.
createDocumentType
(
"
html
"
"
"
"
"
)
)
;
node
=
document
.
implementation
.
createDocumentType
(
"
html
"
"
"
"
"
)
assert_throws_dom
(
"
NotFoundError
"
function
(
)
{
insertFunc
.
call
(
parent
node
child
)
;
}
)
;
}
"
Should
check
whether
'
child
'
is
a
child
of
'
parent
'
before
checking
whether
'
node
'
can
be
inserted
into
the
document
given
the
kids
the
document
has
right
now
.
"
)
;
