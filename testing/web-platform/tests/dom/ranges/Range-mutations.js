"
use
strict
"
;
function
describeRange
(
startContainer
startOffset
endContainer
endOffset
)
{
if
(
startContainer
=
=
endContainer
&
&
startOffset
=
=
endOffset
)
{
return
"
range
collapsed
at
(
"
+
startContainer
+
"
"
+
startOffset
+
"
)
"
;
}
else
if
(
startContainer
=
=
endContainer
)
{
return
"
range
on
"
+
startContainer
+
"
from
"
+
startOffset
+
"
to
"
+
endOffset
;
}
else
{
return
"
range
from
(
"
+
startContainer
+
"
"
+
startOffset
+
"
)
to
(
"
+
endContainer
+
"
"
+
endOffset
+
"
)
"
;
}
}
var
textNodes
=
[
"
paras
[
0
]
.
firstChild
"
"
paras
[
1
]
.
firstChild
"
"
foreignTextNode
"
"
xmlTextNode
"
"
detachedTextNode
"
"
detachedForeignTextNode
"
"
detachedXmlTextNode
"
]
;
var
commentNodes
=
[
"
comment
"
"
foreignComment
"
"
xmlComment
"
"
detachedComment
"
"
detachedForeignComment
"
"
detachedXmlComment
"
]
;
var
characterDataNodes
=
textNodes
.
concat
(
commentNodes
)
;
function
doTests
(
sourceTests
descFn
testFn
)
{
var
tests
=
[
]
;
for
(
var
i
=
0
;
i
<
sourceTests
.
length
;
i
+
+
)
{
var
params
=
sourceTests
[
i
]
;
var
len
=
params
.
length
;
tests
.
push
(
[
descFn
(
params
)
+
"
with
unselected
"
+
describeRange
(
params
[
len
-
4
]
params
[
len
-
3
]
params
[
len
-
2
]
params
[
len
-
1
]
)
function
(
params
)
{
return
function
(
)
{
var
evaledParams
=
params
.
map
(
eval
)
;
for
(
var
i
=
0
;
i
<
evaledParams
.
length
;
i
+
+
)
{
assert_true
(
typeof
evaledParams
[
i
]
!
=
"
undefined
"
"
Test
bug
:
"
+
params
[
i
]
+
"
is
undefined
"
)
;
}
return
testFn
.
apply
(
null
evaledParams
)
;
}
}
(
params
)
false
params
[
len
-
4
]
params
[
len
-
3
]
params
[
len
-
2
]
params
[
len
-
1
]
]
)
;
tests
.
push
(
[
descFn
(
params
)
+
"
with
selected
"
+
describeRange
(
params
[
len
-
4
]
params
[
len
-
3
]
params
[
len
-
2
]
params
[
len
-
1
]
)
function
(
params
)
{
return
function
(
selectedRange
)
{
var
evaledParams
=
params
.
slice
(
0
len
-
4
)
.
map
(
eval
)
;
for
(
var
i
=
0
;
i
<
evaledParams
.
length
;
i
+
+
)
{
assert_true
(
typeof
evaledParams
[
i
]
!
=
"
undefined
"
"
Test
bug
:
"
+
params
[
i
]
+
"
is
undefined
"
)
;
}
evaledParams
=
evaledParams
.
concat
(
[
selectedRange
.
startContainer
selectedRange
.
startOffset
selectedRange
.
endContainer
selectedRange
.
endOffset
]
)
;
return
testFn
.
apply
(
null
evaledParams
)
;
}
}
(
params
)
true
params
[
len
-
4
]
params
[
len
-
3
]
params
[
len
-
2
]
params
[
len
-
1
]
]
)
;
}
generate_tests
(
doTest
tests
)
;
}
function
doTest
(
callback
useSelection
startContainer
startOffset
endContainer
endOffset
)
{
setupRangeTests
(
)
;
startContainer
=
eval
(
startContainer
)
;
startOffset
=
eval
(
startOffset
)
;
endContainer
=
eval
(
endContainer
)
;
endOffset
=
eval
(
endOffset
)
;
var
ownerDoc
=
startContainer
.
nodeType
=
=
Node
.
DOCUMENT_NODE
?
startContainer
:
startContainer
.
ownerDocument
;
var
range
=
ownerDoc
.
createRange
(
)
;
range
.
setStart
(
startContainer
startOffset
)
;
range
.
setEnd
(
endContainer
endOffset
)
;
if
(
useSelection
)
{
getSelection
(
)
.
removeAllRanges
(
)
;
getSelection
(
)
.
addRange
(
range
)
;
if
(
!
getSelection
(
)
.
rangeCount
)
return
;
range
=
getSelection
(
)
.
getRangeAt
(
0
)
;
}
var
expected
=
callback
(
range
)
;
assert_equals
(
range
.
startContainer
expected
[
0
]
"
Wrong
start
container
"
)
;
assert_equals
(
range
.
startOffset
expected
[
1
]
"
Wrong
start
offset
"
)
;
assert_equals
(
range
.
endContainer
expected
[
2
]
"
Wrong
end
container
"
)
;
assert_equals
(
range
.
endOffset
expected
[
3
]
"
Wrong
end
offset
"
)
;
}
function
testSplitText
(
oldNode
offset
startContainer
startOffset
endContainer
endOffset
)
{
var
originalStartOffset
=
startOffset
;
var
originalEndOffset
=
endOffset
;
var
originalLength
=
oldNode
.
length
;
var
newNode
;
try
{
newNode
=
oldNode
.
splitText
(
offset
)
;
}
catch
(
e
)
{
return
[
startContainer
startOffset
endContainer
endOffset
]
;
}
if
(
startContainer
=
=
oldNode
&
&
startOffset
>
offset
&
&
startOffset
<
=
originalLength
)
{
startOffset
=
offset
;
}
if
(
endContainer
=
=
oldNode
&
&
endOffset
>
offset
&
&
endOffset
<
=
originalLength
)
{
endOffset
=
offset
;
}
if
(
startContainer
=
=
oldNode
.
parentNode
&
&
startOffset
>
1
+
indexOf
(
oldNode
)
)
{
startOffset
+
+
;
}
if
(
endContainer
=
=
oldNode
.
parentNode
&
&
endOffset
>
1
+
indexOf
(
oldNode
)
)
{
endOffset
+
+
;
}
if
(
oldNode
.
parentNode
)
{
if
(
startContainer
=
=
oldNode
&
&
originalStartOffset
>
offset
)
{
startContainer
=
newNode
;
startOffset
=
originalStartOffset
-
offset
;
}
if
(
endContainer
=
=
oldNode
&
&
originalEndOffset
>
offset
)
{
endContainer
=
newNode
;
endOffset
=
originalEndOffset
-
offset
;
}
if
(
startContainer
=
=
oldNode
.
parentNode
&
&
startOffset
=
=
1
+
indexOf
(
oldNode
)
)
{
startOffset
+
+
;
}
if
(
endContainer
=
=
oldNode
.
parentNode
&
&
endOffset
=
=
1
+
indexOf
(
oldNode
)
)
{
endOffset
+
+
;
}
}
return
[
startContainer
startOffset
endContainer
endOffset
]
;
}
var
splitTextTests
=
[
]
;
for
(
var
i
=
0
;
i
<
textNodes
.
length
;
i
+
+
)
{
var
node
=
textNodes
[
i
]
;
splitTextTests
.
push
(
[
node
376
node
0
node
1
]
)
;
splitTextTests
.
push
(
[
node
0
node
0
node
0
]
)
;
splitTextTests
.
push
(
[
node
1
node
1
node
1
]
)
;
splitTextTests
.
push
(
[
node
node
+
"
.
length
"
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
splitTextTests
.
push
(
[
node
1
node
1
node
3
]
)
;
splitTextTests
.
push
(
[
node
2
node
1
node
3
]
)
;
splitTextTests
.
push
(
[
node
3
node
1
node
3
]
)
;
}
splitTextTests
.
push
(
[
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
)
;
function
testReplaceDataAlgorithm
(
node
offset
count
data
callback
startContainer
startOffset
endContainer
endOffset
)
{
var
expectedStartContainer
=
startContainer
;
var
expectedStartOffset
=
startOffset
;
var
expectedEndContainer
=
endContainer
;
var
expectedEndOffset
=
endOffset
;
var
originalParent
=
node
.
parentNode
;
var
originalData
=
node
.
data
;
var
exceptionThrown
=
false
;
try
{
callback
(
)
;
}
catch
(
e
)
{
exceptionThrown
=
true
;
}
assert_equals
(
node
.
parentNode
originalParent
"
Sanity
check
failed
:
changing
data
changed
the
parent
"
)
;
if
(
exceptionThrown
)
{
assert_equals
(
node
.
data
originalData
"
Sanity
check
failed
:
exception
thrown
but
data
changed
"
)
;
}
else
{
assert_equals
(
node
.
data
originalData
.
substr
(
0
offset
)
+
data
+
originalData
.
substr
(
offset
+
count
)
"
Sanity
check
failed
:
data
not
changed
as
expected
"
)
;
}
if
(
!
exceptionThrown
&
&
startContainer
=
=
node
&
&
startOffset
>
offset
&
&
startOffset
<
=
offset
+
count
)
{
expectedStartOffset
=
offset
;
}
if
(
!
exceptionThrown
&
&
endContainer
=
=
node
&
&
endOffset
>
offset
&
&
endOffset
<
=
offset
+
count
)
{
expectedEndOffset
=
offset
;
}
if
(
!
exceptionThrown
&
&
startContainer
=
=
node
&
&
startOffset
>
offset
+
count
)
{
expectedStartOffset
+
=
data
.
length
-
count
;
}
if
(
!
exceptionThrown
&
&
endContainer
=
=
node
&
&
endOffset
>
offset
+
count
)
{
expectedEndOffset
+
=
data
.
length
-
count
;
}
return
[
expectedStartContainer
expectedStartOffset
expectedEndContainer
expectedEndOffset
]
;
}
function
testInsertData
(
node
offset
data
startContainer
startOffset
endContainer
endOffset
)
{
return
testReplaceDataAlgorithm
(
node
offset
0
data
function
(
)
{
node
.
insertData
(
offset
data
)
}
startContainer
startOffset
endContainer
endOffset
)
;
}
var
insertDataTests
=
[
]
;
for
(
var
i
=
0
;
i
<
characterDataNodes
.
length
;
i
+
+
)
{
var
node
=
characterDataNodes
[
i
]
;
insertDataTests
.
push
(
[
node
376
'
"
foo
"
'
node
0
node
1
]
)
;
insertDataTests
.
push
(
[
node
0
'
"
foo
"
'
node
0
node
0
]
)
;
insertDataTests
.
push
(
[
node
1
'
"
foo
"
'
node
1
node
1
]
)
;
insertDataTests
.
push
(
[
node
node
+
"
.
length
"
'
"
foo
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
insertDataTests
.
push
(
[
node
1
'
"
foo
"
'
node
1
node
3
]
)
;
insertDataTests
.
push
(
[
node
2
'
"
foo
"
'
node
1
node
3
]
)
;
insertDataTests
.
push
(
[
node
3
'
"
foo
"
'
node
1
node
3
]
)
;
insertDataTests
.
push
(
[
node
376
'
"
"
'
node
0
node
1
]
)
;
insertDataTests
.
push
(
[
node
0
'
"
"
'
node
0
node
0
]
)
;
insertDataTests
.
push
(
[
node
1
'
"
"
'
node
1
node
1
]
)
;
insertDataTests
.
push
(
[
node
node
+
"
.
length
"
'
"
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
insertDataTests
.
push
(
[
node
1
'
"
"
'
node
1
node
3
]
)
;
insertDataTests
.
push
(
[
node
2
'
"
"
'
node
1
node
3
]
)
;
insertDataTests
.
push
(
[
node
3
'
"
"
'
node
1
node
3
]
)
;
}
insertDataTests
.
push
(
[
"
paras
[
0
]
.
firstChild
"
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
'
"
foo
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
)
;
function
testAppendData
(
node
data
startContainer
startOffset
endContainer
endOffset
)
{
return
testReplaceDataAlgorithm
(
node
node
.
length
0
data
function
(
)
{
node
.
appendData
(
data
)
}
startContainer
startOffset
endContainer
endOffset
)
;
}
var
appendDataTests
=
[
]
;
for
(
var
i
=
0
;
i
<
characterDataNodes
.
length
;
i
+
+
)
{
var
node
=
characterDataNodes
[
i
]
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
0
node
1
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
0
node
0
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
1
node
1
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
0
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
1
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
foo
"
'
node
1
node
3
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
0
node
1
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
0
node
0
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
1
node
1
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
0
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
1
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
appendDataTests
.
push
(
[
node
'
"
"
'
node
1
node
3
]
)
;
}
appendDataTests
.
push
(
[
"
paras
[
0
]
.
firstChild
"
'
"
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
'
"
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
foo
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
)
;
function
testDeleteData
(
node
offset
count
startContainer
startOffset
endContainer
endOffset
)
{
return
testReplaceDataAlgorithm
(
node
offset
count
"
"
function
(
)
{
node
.
deleteData
(
offset
count
)
}
startContainer
startOffset
endContainer
endOffset
)
;
}
var
deleteDataTests
=
[
]
;
for
(
var
i
=
0
;
i
<
characterDataNodes
.
length
;
i
+
+
)
{
var
node
=
characterDataNodes
[
i
]
;
deleteDataTests
.
push
(
[
node
376
2
node
0
node
1
]
)
;
deleteDataTests
.
push
(
[
node
0
2
node
0
node
0
]
)
;
deleteDataTests
.
push
(
[
node
1
2
node
1
node
1
]
)
;
deleteDataTests
.
push
(
[
node
node
+
"
.
length
"
2
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
deleteDataTests
.
push
(
[
node
1
2
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
2
2
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
3
2
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
376
0
node
0
node
1
]
)
;
deleteDataTests
.
push
(
[
node
0
0
node
0
node
0
]
)
;
deleteDataTests
.
push
(
[
node
1
0
node
1
node
1
]
)
;
deleteDataTests
.
push
(
[
node
node
+
"
.
length
"
0
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
deleteDataTests
.
push
(
[
node
1
0
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
2
0
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
3
0
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
376
631
node
0
node
1
]
)
;
deleteDataTests
.
push
(
[
node
0
631
node
0
node
0
]
)
;
deleteDataTests
.
push
(
[
node
1
631
node
1
node
1
]
)
;
deleteDataTests
.
push
(
[
node
node
+
"
.
length
"
631
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
deleteDataTests
.
push
(
[
node
1
631
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
2
631
node
1
node
3
]
)
;
deleteDataTests
.
push
(
[
node
3
631
node
1
node
3
]
)
;
}
deleteDataTests
.
push
(
[
"
paras
[
0
]
.
firstChild
"
1
2
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
2
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
2
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
2
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
2
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
2
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
2
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
2
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
2
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
)
;
function
testReplaceData
(
node
offset
count
data
startContainer
startOffset
endContainer
endOffset
)
{
return
testReplaceDataAlgorithm
(
node
offset
count
data
function
(
)
{
node
.
replaceData
(
offset
count
data
)
}
startContainer
startOffset
endContainer
endOffset
)
;
}
var
replaceDataTests
=
[
]
;
for
(
var
i
=
0
;
i
<
characterDataNodes
.
length
;
i
+
+
)
{
var
node
=
characterDataNodes
[
i
]
;
replaceDataTests
.
push
(
[
node
376
0
'
"
foo
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
0
'
"
foo
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
0
'
"
foo
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
0
'
"
foo
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
0
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
0
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
0
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
376
0
'
"
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
0
'
"
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
0
'
"
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
0
'
"
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
0
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
0
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
0
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
376
1
'
"
foo
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
1
'
"
foo
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
1
'
"
foo
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
1
'
"
foo
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
1
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
1
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
1
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
376
1
'
"
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
1
'
"
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
1
'
"
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
1
'
"
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
1
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
1
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
1
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
376
47
'
"
foo
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
47
'
"
foo
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
47
'
"
foo
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
47
'
"
foo
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
47
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
47
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
47
'
"
foo
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
376
47
'
"
"
'
node
0
node
1
]
)
;
replaceDataTests
.
push
(
[
node
0
47
'
"
"
'
node
0
node
0
]
)
;
replaceDataTests
.
push
(
[
node
1
47
'
"
"
'
node
1
node
1
]
)
;
replaceDataTests
.
push
(
[
node
node
+
"
.
length
"
47
'
"
"
'
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
)
;
replaceDataTests
.
push
(
[
node
1
47
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
2
47
'
"
"
'
node
1
node
3
]
)
;
replaceDataTests
.
push
(
[
node
3
47
'
"
"
'
node
1
node
3
]
)
;
}
replaceDataTests
.
push
(
[
"
paras
[
0
]
.
firstChild
"
1
0
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
0
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
0
'
"
foo
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
0
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
0
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
0
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
0
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
0
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
0
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
1
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
1
'
"
foo
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
1
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
1
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
1
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
1
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
1
47
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
.
firstChild
"
1
47
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
47
'
"
foo
"
'
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
47
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
2
47
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
3
47
'
"
foo
"
'
"
paras
[
0
]
.
firstChild
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
.
firstChild
"
1
47
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
2
47
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
[
"
paras
[
0
]
.
firstChild
"
3
47
'
"
foo
"
'
"
paras
[
0
]
"
0
"
paras
[
0
]
.
firstChild
"
3
]
)
;
function
testDataChange
(
node
attr
op
rval
startContainer
startOffset
endContainer
endOffset
)
{
return
testReplaceDataAlgorithm
(
node
0
node
.
length
op
=
=
"
=
"
?
rval
:
node
[
attr
]
+
rval
function
(
)
{
if
(
op
=
=
"
=
"
)
{
node
[
attr
]
=
rval
;
}
else
if
(
op
=
=
"
+
=
"
)
{
node
[
attr
]
+
=
rval
;
}
else
{
throw
"
Unknown
op
"
+
op
;
}
}
startContainer
startOffset
endContainer
endOffset
)
;
}
var
dataChangeTests
=
[
]
;
var
dataChangeTestAttrs
=
[
"
data
"
"
textContent
"
"
nodeValue
"
]
;
for
(
var
i
=
0
;
i
<
characterDataNodes
.
length
;
i
+
+
)
{
var
node
=
characterDataNodes
[
i
]
;
var
dataChangeTestRanges
=
[
[
node
0
node
0
]
[
node
0
node
1
]
[
node
1
node
1
]
[
node
0
node
node
+
"
.
length
"
]
[
node
1
node
node
+
"
.
length
"
]
[
node
node
+
"
.
length
"
node
node
+
"
.
length
"
]
]
;
for
(
var
j
=
0
;
j
<
dataChangeTestRanges
.
length
;
j
+
+
)
{
for
(
var
k
=
0
;
k
<
dataChangeTestAttrs
.
length
;
k
+
+
)
{
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
=
"
'
'
"
"
'
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
=
"
'
'
"
foo
"
'
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
=
"
'
node
+
"
.
"
+
dataChangeTestAttrs
[
k
]
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
+
=
"
'
'
"
"
'
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
+
=
"
'
'
"
foo
"
'
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
dataChangeTests
.
push
(
[
node
'
"
'
+
dataChangeTestAttrs
[
k
]
+
'
"
'
'
"
+
=
"
'
node
+
"
.
"
+
dataChangeTestAttrs
[
k
]
]
.
concat
(
dataChangeTestRanges
[
j
]
)
)
;
}
}
}
function
modifyForRemove
(
removedNode
point
)
{
var
oldParent
=
removedNode
.
parentNode
;
var
oldIndex
=
indexOf
(
removedNode
)
;
if
(
!
oldParent
)
{
return
point
;
}
if
(
point
[
0
]
=
=
removedNode
|
|
isDescendant
(
point
[
0
]
removedNode
)
)
{
return
[
oldParent
oldIndex
]
;
}
if
(
point
[
0
]
=
=
oldParent
&
&
point
[
1
]
>
oldIndex
)
{
return
[
point
[
0
]
point
[
1
]
-
1
]
;
}
return
point
;
}
function
modifyForInsert
(
insertedNode
point
)
{
if
(
point
[
0
]
=
=
insertedNode
.
parentNode
&
&
point
[
1
]
>
indexOf
(
insertedNode
)
)
{
return
[
point
[
0
]
point
[
1
]
+
1
]
;
}
return
point
;
}
function
testInsertBefore
(
newParent
affectedNode
refNode
startContainer
startOffset
endContainer
endOffset
)
{
var
expectedStart
=
[
startContainer
startOffset
]
;
var
expectedEnd
=
[
endContainer
endOffset
]
;
expectedStart
=
modifyForRemove
(
affectedNode
expectedStart
)
;
expectedEnd
=
modifyForRemove
(
affectedNode
expectedEnd
)
;
try
{
newParent
.
insertBefore
(
affectedNode
refNode
)
;
}
catch
(
e
)
{
return
[
startContainer
startOffset
endContainer
endOffset
]
;
}
expectedStart
=
modifyForInsert
(
affectedNode
expectedStart
)
;
expectedEnd
=
modifyForInsert
(
affectedNode
expectedEnd
)
;
return
expectedStart
.
concat
(
expectedEnd
)
;
}
var
insertBeforeTests
=
[
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
2
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
0
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
testDiv
"
0
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
null
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
0
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
1
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
0
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
1
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
null
"
"
foreignDoc
"
0
"
foreignDoc
"
1
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
foreignDoc
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
.
doctype
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
]
;
function
testReplaceChild
(
newParent
newChild
oldChild
startContainer
startOffset
endContainer
endOffset
)
{
var
expectedStart
=
[
startContainer
startOffset
]
;
var
expectedEnd
=
[
endContainer
endOffset
]
;
expectedStart
=
modifyForRemove
(
oldChild
expectedStart
)
;
expectedEnd
=
modifyForRemove
(
oldChild
expectedEnd
)
;
if
(
newChild
!
=
oldChild
)
{
expectedStart
=
modifyForRemove
(
newChild
expectedStart
)
;
expectedEnd
=
modifyForRemove
(
newChild
expectedEnd
)
;
}
try
{
newParent
.
replaceChild
(
newChild
oldChild
)
;
}
catch
(
e
)
{
return
[
startContainer
startOffset
endContainer
endOffset
]
;
}
expectedStart
=
modifyForInsert
(
newChild
expectedStart
)
;
expectedEnd
=
modifyForInsert
(
newChild
expectedEnd
)
;
return
expectedStart
.
concat
(
expectedEnd
)
;
}
var
replaceChildTests
=
[
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
testDiv
"
"
paras
[
0
]
"
"
paras
[
0
]
"
"
testDiv
"
2
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
0
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
.
firstChild
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
0
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
1
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
0
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
1
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
0
"
foreignDoc
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
.
doctype
"
"
foreignDoc
"
1
"
foreignDoc
"
1
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
foreignDoc
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
.
doctype
"
"
paras
[
0
]
.
firstChild
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
]
;
function
testAppendChild
(
newParent
affectedNode
startContainer
startOffset
endContainer
endOffset
)
{
var
expectedStart
=
[
startContainer
startOffset
]
;
var
expectedEnd
=
[
endContainer
endOffset
]
;
expectedStart
=
modifyForRemove
(
affectedNode
expectedStart
)
;
expectedEnd
=
modifyForRemove
(
affectedNode
expectedEnd
)
;
try
{
newParent
.
appendChild
(
affectedNode
)
;
}
catch
(
e
)
{
return
[
startContainer
startOffset
endContainer
endOffset
]
;
}
expectedStart
=
modifyForInsert
(
affectedNode
expectedStart
)
;
expectedEnd
=
modifyForInsert
(
affectedNode
expectedEnd
)
;
return
expectedStart
.
concat
(
expectedEnd
)
;
}
var
appendChildTests
=
[
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
.
lastChild
"
0
"
testDiv
.
lastChild
"
0
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
.
lastChild
"
0
"
testDiv
.
lastChild
"
1
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
.
lastChild
"
1
"
testDiv
.
lastChild
"
1
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
2
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
"
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
2
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
1
"
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
1
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
"
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
1
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
-
1
"
]
[
"
testDiv
"
"
testDiv
.
lastChild
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
"
"
testDiv
"
"
testDiv
.
childNodes
.
length
"
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
.
lastChild
"
0
"
detachedDiv
.
lastChild
"
0
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
.
lastChild
"
0
"
detachedDiv
.
lastChild
"
1
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
.
lastChild
"
1
"
detachedDiv
.
lastChild
"
1
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
2
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
"
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
2
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
1
"
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
1
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
"
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
1
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
-
1
"
]
[
"
detachedDiv
"
"
detachedDiv
.
lastChild
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
"
"
detachedDiv
"
"
detachedDiv
.
childNodes
.
length
"
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
0
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
paras
[
1
]
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
-
1
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
"
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
-
1
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
-
1
"
]
[
"
foreignDoc
"
"
detachedComment
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
"
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
"
]
[
"
foreignDoc
"
"
detachedComment
"
"
detachedComment
"
0
"
detachedComment
"
5
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
xmlTextNode
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
0
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
foreignDoc
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
document
.
doctype
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
]
;
function
testRemoveChild
(
affectedNode
startContainer
startOffset
endContainer
endOffset
)
{
var
expectedStart
=
[
startContainer
startOffset
]
;
var
expectedEnd
=
[
endContainer
endOffset
]
;
expectedStart
=
modifyForRemove
(
affectedNode
expectedStart
)
;
expectedEnd
=
modifyForRemove
(
affectedNode
expectedEnd
)
;
affectedNode
.
parentNode
.
removeChild
(
affectedNode
)
;
return
expectedStart
.
concat
(
expectedEnd
)
;
}
var
removeChildTests
=
[
[
"
paras
[
0
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
0
]
[
"
paras
[
0
]
"
"
paras
[
0
]
"
0
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
paras
[
0
]
"
1
"
paras
[
0
]
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
0
"
testDiv
"
0
]
[
"
paras
[
0
]
"
"
testDiv
"
0
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
1
"
testDiv
"
1
]
[
"
paras
[
0
]
"
"
testDiv
"
0
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
testDiv
"
1
"
testDiv
"
2
]
[
"
paras
[
0
]
"
"
testDiv
"
2
"
testDiv
"
2
]
[
"
foreignDoc
.
documentElement
"
"
foreignDoc
"
0
"
foreignDoc
"
"
foreignDoc
.
childNodes
.
length
"
]
]
;
