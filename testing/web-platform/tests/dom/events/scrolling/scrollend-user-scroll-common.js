async
function
test_scrollend_on_touch_drag
(
t
target_div
)
{
const
isMac
=
navigator
.
platform
.
toUpperCase
(
)
.
indexOf
(
'
MAC
'
)
>
=
0
;
if
(
isMac
)
return
;
await
resetTargetScrollState
(
t
target_div
)
;
await
waitForCompositorReady
(
)
;
const
timeout
=
3000
;
const
targetScrollendPromise
=
createScrollendPromiseForTarget
(
t
target_div
timeout
)
;
verifyNoScrollendOnDocument
(
t
)
;
let
scrollend_count
=
0
;
const
scrollend_listener
=
(
)
=
>
{
scrollend_count
+
=
1
;
}
;
target_div
.
addEventListener
(
"
scrollend
"
scrollend_listener
)
;
t
.
add_cleanup
(
(
)
=
>
{
target_div
.
removeEventListener
(
'
scrollend
'
scrollend_listener
)
;
}
)
;
await
new
test_driver
.
Actions
(
)
.
addPointer
(
'
TestPointer
'
'
touch
'
)
.
pointerMove
(
0
0
{
origin
:
target_div
}
)
.
pointerDown
(
)
.
addTick
(
)
.
pointerMove
(
0
-
40
{
origin
:
target_div
}
)
.
addTick
(
)
.
pause
(
200
)
.
pointerMove
(
0
-
60
{
origin
:
target_div
}
)
.
addTick
(
)
.
pause
(
200
)
.
pointerUp
(
)
.
send
(
)
;
await
targetScrollendPromise
;
assert_true
(
target_div
.
scrollTop
>
0
)
;
await
verifyScrollStopped
(
t
target_div
)
;
assert_equals
(
scrollend_count
1
)
;
}
async
function
test_scrollend_on_scrollbar_gutter_click
(
t
target_div
)
{
const
scrollbar_width
=
target_div
.
offsetWidth
-
target_div
.
clientWidth
;
if
(
scrollbar_width
=
=
0
)
return
;
await
resetTargetScrollState
(
t
target_div
)
;
await
waitForCompositorReady
(
)
;
const
targetScrollendPromise
=
createScrollendPromiseForTarget
(
t
target_div
1000
)
;
verifyNoScrollendOnDocument
(
t
)
;
const
bounds
=
target_div
.
getBoundingClientRect
(
)
;
const
x
=
bounds
.
right
-
Math
.
round
(
scrollbar_width
/
2
)
;
const
y
=
bounds
.
bottom
-
20
;
await
new
test_driver
.
Actions
(
)
.
addPointer
(
'
TestPointer
'
'
mouse
'
)
.
pointerMove
(
x
y
{
origin
:
'
viewport
'
}
)
.
pointerDown
(
)
.
addTick
(
)
.
pointerUp
(
)
.
send
(
)
;
await
targetScrollendPromise
;
assert_true
(
target_div
.
scrollTop
>
0
)
;
await
verifyScrollStopped
(
t
target_div
)
;
}
async
function
test_scrollend_on_scrollbar_thumb_drag
(
t
target_div
)
{
const
scrollbar_width
=
target_div
.
offsetWidth
-
target_div
.
clientWidth
;
if
(
scrollbar_width
=
=
0
)
return
;
await
resetTargetScrollState
(
t
target_div
)
;
await
waitForCompositorReady
(
)
;
const
targetScrollendPromise
=
createScrollendPromiseForTarget
(
t
target_div
1000
)
;
verifyNoScrollendOnDocument
(
t
)
;
const
bounds
=
target_div
.
getBoundingClientRect
(
)
;
const
x
=
bounds
.
right
-
Math
.
round
(
scrollbar_width
/
2
)
;
const
y
=
bounds
.
top
+
30
;
const
dy
=
30
;
await
new
test_driver
.
Actions
(
)
.
addPointer
(
'
TestPointer
'
'
mouse
'
)
.
pointerMove
(
x
y
{
origin
:
'
viewport
'
}
)
.
pointerDown
(
)
.
pointerMove
(
x
y
+
dy
{
origin
:
'
viewport
'
}
)
.
addTick
(
)
.
pointerUp
(
)
.
send
(
)
;
await
targetScrollendPromise
;
assert_true
(
target_div
.
scrollTop
>
0
)
;
await
verifyScrollStopped
(
t
target_div
)
;
}
async
function
test_scrollend_on_mousewheel_scroll
(
t
target_div
)
{
await
resetTargetScrollState
(
t
target_div
)
;
await
waitForCompositorReady
(
)
;
const
targetScrollendPromise
=
createScrollendPromiseForTarget
(
t
target_div
)
;
verifyNoScrollendOnDocument
(
t
)
;
const
x
=
0
;
const
y
=
0
;
const
dx
=
0
;
const
dy
=
40
;
const
duration_ms
=
10
;
await
new
test_driver
.
Actions
(
)
.
scroll
(
x
y
dx
dy
{
origin
:
target_div
}
duration_ms
)
.
send
(
)
;
await
targetScrollendPromise
;
assert_true
(
target_div
.
scrollTop
>
0
)
;
await
verifyScrollStopped
(
t
target_div
)
;
}
async
function
test_scrollend_on_keyboard_scroll
(
t
target_div
)
{
await
resetTargetScrollState
(
t
target_div
)
;
await
waitForCompositorReady
(
)
;
verifyNoScrollendOnDocument
(
t
)
;
const
targetScrollendPromise
=
createScrollendPromiseForTarget
(
t
target_div
)
;
target_div
.
focus
(
)
;
window
.
test_driver
.
send_keys
(
target_div
'
\
ue015
'
)
;
await
targetScrollendPromise
;
assert_true
(
target_div
.
scrollTop
>
0
)
;
await
verifyScrollStopped
(
t
target_div
)
;
}
