async
function
HKDF
(
{
salt
ikm
info
length
}
)
{
return
await
crypto
.
subtle
.
deriveBits
(
{
name
:
"
HKDF
"
hash
:
"
SHA
-
256
"
salt
info
}
await
crypto
.
subtle
.
importKey
(
"
raw
"
ikm
{
name
:
"
HKDF
"
}
false
[
"
deriveBits
"
]
)
length
*
8
)
;
}
async
function
deriveKeyAndNonce
(
header
)
{
const
{
salt
}
=
header
;
const
ikm
=
await
getInputKeyingMaterial
(
header
)
;
const
cekInfo
=
new
TextEncoder
(
)
.
encode
(
"
Content
-
Encoding
:
aes128gcm
\
0
"
)
;
const
nonceInfo
=
new
TextEncoder
(
)
.
encode
(
"
Content
-
Encoding
:
nonce
\
0
"
)
;
return
{
key
:
await
HKDF
(
{
salt
ikm
info
:
cekInfo
length
:
16
}
)
nonce
:
await
HKDF
(
{
salt
ikm
info
:
nonceInfo
length
:
12
}
)
}
;
}
async
function
getInputKeyingMaterial
(
header
)
{
const
ikm
=
await
crypto
.
subtle
.
deriveBits
(
{
name
:
"
ECDH
"
public
:
await
crypto
.
subtle
.
importKey
(
"
raw
"
header
.
userAgentPublicKey
{
name
:
"
ECDH
"
namedCurve
:
"
P
-
256
"
}
true
[
]
)
}
header
.
appServer
.
privateKey
256
)
;
const
keyInfo
=
new
Uint8Array
(
[
.
.
.
new
TextEncoder
(
)
.
encode
(
"
WebPush
:
info
\
0
"
)
.
.
.
header
.
userAgentPublicKey
.
.
.
header
.
appServer
.
publicKey
]
)
return
await
HKDF
(
{
salt
:
header
.
authSecret
ikm
info
:
keyInfo
length
:
32
}
)
;
}
async
function
encryptRecord
(
key
nonce
data
)
{
const
padded
=
new
Uint8Array
(
[
.
.
.
data
2
]
)
;
return
await
crypto
.
subtle
.
encrypt
(
{
name
:
"
AES
-
GCM
"
iv
:
nonce
tagLength
:
128
}
await
crypto
.
subtle
.
importKey
(
"
raw
"
key
{
name
:
"
AES
-
GCM
"
}
false
[
"
encrypt
"
]
)
padded
)
;
}
function
writeHeader
(
header
)
{
var
dataView
=
new
DataView
(
new
ArrayBuffer
(
5
)
)
;
dataView
.
setUint32
(
0
header
.
recordSize
)
;
dataView
.
setUint8
(
4
header
.
keyid
.
length
)
;
return
new
Uint8Array
(
[
.
.
.
header
.
salt
.
.
.
new
Uint8Array
(
dataView
.
buffer
)
.
.
.
header
.
keyid
]
)
;
}
function
validateParams
(
params
)
{
const
header
=
{
.
.
.
params
}
;
if
(
!
header
.
salt
)
{
throw
new
Error
(
"
Must
include
a
salt
parameter
"
)
;
}
if
(
header
.
salt
.
length
!
=
=
16
)
{
throw
new
Error
(
"
The
salt
parameter
must
be
16
bytes
"
)
;
}
if
(
header
.
appServer
.
publicKey
.
byteLength
!
=
=
65
)
{
throw
new
Error
(
"
The
appServer
.
publicKey
parameter
must
be
65
bytes
"
)
;
}
if
(
!
header
.
authSecret
)
{
throw
new
Error
(
"
No
authentication
secret
for
webpush
"
)
;
}
return
header
;
}
export
async
function
encrypt
(
data
params
)
{
const
header
=
validateParams
(
params
)
;
header
.
keyid
=
header
.
appServer
.
publicKey
;
header
.
recordSize
=
data
.
byteLength
+
18
+
1
;
const
saltedHeader
=
writeHeader
(
header
)
;
const
{
key
nonce
}
=
await
deriveKeyAndNonce
(
header
)
;
const
encrypt
=
await
encryptRecord
(
key
nonce
data
)
;
return
new
Uint8Array
(
[
.
.
.
saltedHeader
.
.
.
new
Uint8Array
(
encrypt
)
]
)
;
}
