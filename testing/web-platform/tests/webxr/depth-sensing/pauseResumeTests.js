'
use
strict
'
;
const
TestStates
=
Object
.
freeze
(
{
"
ShouldSucceedPauseScheduleRAF
"
:
1
"
ShouldFailResumeScheduleRAF
"
:
2
"
ShouldSucceedTestDone
"
:
3
}
)
;
const
framesToWait
=
10
;
const
pauseResumeTestFunction
=
function
(
session
controller
t
sessionObjects
)
{
const
isCpuOptimized
=
session
.
depthUsage
=
=
=
'
cpu
-
optimized
'
;
let
state
=
TestStates
.
ShouldSucceedPauseScheduleRAF
;
return
session
.
requestReferenceSpace
(
'
viewer
'
)
.
then
(
(
viewerSpace
)
=
>
{
let
done
=
false
;
const
glBinding
=
new
XRWebGLBinding
(
session
sessionObjects
.
gl
)
;
let
stepFrameCount
=
0
;
let
advanceState
=
false
;
const
rafCb
=
function
(
time
frame
)
{
const
pose
=
frame
.
getViewerPose
(
viewerSpace
)
;
stepFrameCount
+
+
;
for
(
const
view
of
pose
.
views
)
{
const
depthInformation
=
isCpuOptimized
?
frame
.
getDepthInformation
(
view
)
:
glBinding
.
getDepthInformation
(
view
)
;
if
(
state
=
=
TestStates
.
ShouldSucceedPauseScheduleRAF
|
|
state
=
=
TestStates
.
ShouldSucceedTestDone
)
{
t
.
step
(
(
)
=
>
{
assert_true
(
session
.
depthActive
)
;
}
)
;
if
(
stepFrameCount
>
=
framesToWait
)
{
t
.
step
(
(
)
=
>
{
assert_not_equals
(
depthInformation
null
)
;
}
)
;
}
if
(
depthInformation
!
=
null
|
|
stepFrameCount
>
=
framesToWait
)
{
advanceState
=
true
;
}
}
else
{
t
.
step
(
(
)
=
>
{
assert_false
(
session
.
depthActive
)
;
assert_equals
(
depthInformation
null
)
;
}
)
;
advanceState
=
true
;
}
}
switch
(
state
)
{
case
TestStates
.
ShouldSucceedPauseScheduleRAF
:
if
(
advanceState
)
{
session
.
pauseDepthSensing
(
)
;
for
(
const
view
of
pose
.
views
)
{
const
newDepthInformation
=
isCpuOptimized
?
frame
.
getDepthInformation
(
view
)
:
glBinding
.
getDepthInformation
(
view
)
;
t
.
step
(
(
)
=
>
{
assert_false
(
session
.
depthActive
)
;
assert_equals
(
newDepthInformation
null
)
;
}
)
;
}
state
=
TestStates
.
ShouldFailResumeScheduleRAF
;
stepFrameCount
=
0
;
advanceState
=
false
;
}
session
.
requestAnimationFrame
(
rafCb
)
;
break
;
case
TestStates
.
ShouldFailResumeScheduleRAF
:
if
(
advanceState
)
{
session
.
resumeDepthSensing
(
)
;
controller
.
setDepthSensingData
(
DEPTH_SENSING_DATA
)
;
t
.
step
(
(
)
=
>
{
assert_true
(
session
.
depthActive
)
;
}
)
;
state
=
TestStates
.
ShouldSucceedTestDone
;
stepFrameCount
=
0
;
advanceState
=
false
;
}
session
.
requestAnimationFrame
(
rafCb
)
;
break
;
case
TestStates
.
ShouldSucceedTestDone
:
if
(
advanceState
)
{
done
=
true
;
}
else
{
session
.
requestAnimationFrame
(
rafCb
)
;
}
break
;
}
}
;
session
.
requestAnimationFrame
(
rafCb
)
;
return
t
.
step_wait
(
(
)
=
>
done
)
;
}
)
;
}
;
