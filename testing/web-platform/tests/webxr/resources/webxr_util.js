function
xr_promise_test
(
func
name
properties
)
{
promise_test
(
async
(
t
)
=
>
{
if
(
window
.
XRTest
=
=
=
undefined
)
{
await
loadChromiumResources
;
}
return
func
(
t
)
;
}
name
properties
)
;
}
function
forEachWebxrObject
(
callback
)
{
callback
(
window
.
navigator
.
xr
'
navigator
.
xr
'
)
;
callback
(
window
.
XRDevice
'
XRDevice
'
)
;
callback
(
window
.
XRSession
'
XRSession
'
)
;
callback
(
window
.
XRSessionCreationOptions
'
XRSessionCreationOptions
'
)
;
callback
(
window
.
XRFrameRequestCallback
'
XRFrameRequestCallback
'
)
;
callback
(
window
.
XRPresentationContext
'
XRPresentationContext
'
)
;
callback
(
window
.
XRFrame
'
XRFrame
'
)
;
callback
(
window
.
XRView
'
XRView
'
)
;
callback
(
window
.
XRViewport
'
XRViewport
'
)
;
callback
(
window
.
XRDevicePose
'
XRDevicePose
'
)
;
callback
(
window
.
XRLayer
'
XRLayer
'
)
;
callback
(
window
.
XRWebGLLayer
'
XRWebGLLayer
'
)
;
callback
(
window
.
XRWebGLLayerInit
'
XRWebGLLayerInit
'
)
;
callback
(
window
.
XRCoordinateSystem
'
XRCoordinateSystem
'
)
;
callback
(
window
.
XRFrameOfReference
'
XRFrameOfReference
'
)
;
callback
(
window
.
XRStageBounds
'
XRStageBounds
'
)
;
callback
(
window
.
XRStageBoundsPoint
'
XRStageBoundsPoint
'
)
;
callback
(
window
.
XRSessionEvent
'
XRSessionEvent
'
)
;
callback
(
window
.
XRCoordinateSystemEvent
'
XRCoordinateSystemEvent
'
)
;
}
let
loadChromiumResources
=
Promise
.
resolve
(
)
.
then
(
(
)
=
>
{
if
(
!
MojoInterfaceInterceptor
)
{
return
;
}
let
chain
=
Promise
.
resolve
(
)
;
[
'
/
gen
/
layout_test_data
/
mojo
/
public
/
js
/
mojo_bindings
.
js
'
'
/
gen
/
ui
/
gfx
/
geometry
/
mojo
/
geometry
.
mojom
.
js
'
'
/
gen
/
mojo
/
public
/
mojom
/
base
/
time
.
mojom
.
js
'
'
/
gen
/
device
/
vr
/
public
/
mojom
/
vr_service
.
mojom
.
js
'
'
/
resources
/
chromium
/
webxr
-
test
.
js
'
'
/
resources
/
testdriver
.
js
'
'
/
resources
/
testdriver
-
vendor
.
js
'
]
.
forEach
(
path
=
>
{
let
script
=
document
.
createElement
(
'
script
'
)
;
script
.
src
=
path
;
script
.
async
=
false
;
chain
=
chain
.
then
(
(
)
=
>
new
Promise
(
resolve
=
>
{
script
.
onload
=
(
)
=
>
resolve
(
)
;
}
)
)
;
document
.
head
.
appendChild
(
script
)
;
}
)
;
return
chain
;
}
)
;
