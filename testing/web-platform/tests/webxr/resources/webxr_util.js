function
xr_promise_test
(
name
func
properties
)
{
promise_test
(
async
(
t
)
=
>
{
if
(
window
.
XRTest
=
=
=
undefined
)
{
await
loadChromiumResources
;
}
return
func
(
t
)
;
}
name
properties
)
;
}
function
xr_session_promise_test
(
name
func
fakeDeviceInit
sessionMode
properties
)
{
let
testDeviceController
;
let
testSession
;
const
webglCanvas
=
document
.
getElementsByTagName
(
'
canvas
'
)
[
0
]
;
if
(
!
webglCanvas
)
{
promise_test
(
async
(
t
)
=
>
{
Promise
.
reject
(
'
xr_session_promise_test
requires
a
canvas
on
the
page
!
'
)
;
}
name
properties
)
;
}
let
gl
=
webglCanvas
.
getContext
(
'
webgl
'
{
alpha
:
false
antialias
:
false
}
)
;
xr_promise_test
(
name
(
t
)
=
>
XRTest
.
simulateDeviceConnection
(
fakeDeviceInit
)
.
then
(
(
controller
)
=
>
{
testDeviceController
=
controller
;
return
gl
.
makeXRCompatible
(
)
;
}
)
.
then
(
(
)
=
>
new
Promise
(
(
resolve
reject
)
=
>
{
XRTest
.
simulateUserActivation
(
(
)
=
>
{
navigator
.
xr
.
requestSession
(
sessionMode
)
.
then
(
(
session
)
=
>
{
testSession
=
session
;
session
.
updateRenderState
(
{
baseLayer
:
new
XRWebGLLayer
(
session
gl
)
outputContext
:
getOutputContext
(
)
}
)
;
resolve
(
func
(
session
testDeviceController
t
)
)
;
}
)
.
catch
(
(
err
)
=
>
{
reject
(
'
Session
with
params
'
+
JSON
.
stringify
(
sessionMode
)
+
'
was
rejected
on
device
'
+
JSON
.
stringify
(
fakeDeviceInit
)
+
'
with
error
:
'
+
err
)
;
}
)
;
}
)
;
}
)
)
.
then
(
(
)
=
>
{
testSession
.
end
(
)
.
catch
(
(
)
=
>
{
}
)
;
XRTest
.
simulateDeviceDisconnection
(
)
;
}
)
properties
)
;
}
function
getOutputContext
(
)
{
let
outputCanvas
=
document
.
createElement
(
'
canvas
'
)
;
document
.
body
.
appendChild
(
outputCanvas
)
;
return
outputCanvas
.
getContext
(
'
xrpresent
'
)
;
}
function
forEachWebxrObject
(
callback
)
{
callback
(
window
.
navigator
.
xr
'
navigator
.
xr
'
)
;
callback
(
window
.
XRSession
'
XRSession
'
)
;
callback
(
window
.
XRSessionCreationOptions
'
XRSessionCreationOptions
'
)
;
callback
(
window
.
XRFrameRequestCallback
'
XRFrameRequestCallback
'
)
;
callback
(
window
.
XRPresentationContext
'
XRPresentationContext
'
)
;
callback
(
window
.
XRFrame
'
XRFrame
'
)
;
callback
(
window
.
XRView
'
XRView
'
)
;
callback
(
window
.
XRViewport
'
XRViewport
'
)
;
callback
(
window
.
XRViewerPose
'
XRViewerPose
'
)
;
callback
(
window
.
XRLayer
'
XRLayer
'
)
;
callback
(
window
.
XRWebGLLayer
'
XRWebGLLayer
'
)
;
callback
(
window
.
XRWebGLLayerInit
'
XRWebGLLayerInit
'
)
;
callback
(
window
.
XRCoordinateSystem
'
XRCoordinateSystem
'
)
;
callback
(
window
.
XRFrameOfReference
'
XRFrameOfReference
'
)
;
callback
(
window
.
XRStageBounds
'
XRStageBounds
'
)
;
callback
(
window
.
XRSessionEvent
'
XRSessionEvent
'
)
;
callback
(
window
.
XRCoordinateSystemEvent
'
XRCoordinateSystemEvent
'
)
;
}
let
loadChromiumResources
=
Promise
.
resolve
(
)
.
then
(
(
)
=
>
{
if
(
!
(
'
MojoInterfaceInterceptor
'
in
self
)
)
{
return
;
}
let
chain
=
Promise
.
resolve
(
)
;
[
'
/
gen
/
layout_test_data
/
mojo
/
public
/
js
/
mojo_bindings
.
js
'
'
/
gen
/
mojo
/
public
/
mojom
/
base
/
time
.
mojom
.
js
'
'
/
gen
/
gpu
/
ipc
/
common
/
mailbox_holder
.
mojom
.
js
'
'
/
gen
/
gpu
/
ipc
/
common
/
sync_token
.
mojom
.
js
'
'
/
gen
/
ui
/
display
/
mojo
/
display
.
mojom
.
js
'
'
/
gen
/
ui
/
gfx
/
geometry
/
mojo
/
geometry
.
mojom
.
js
'
'
/
gen
/
ui
/
gfx
/
mojo
/
gpu_fence_handle
.
mojom
.
js
'
'
/
gen
/
ui
/
gfx
/
mojo
/
transform
.
mojom
.
js
'
'
/
gen
/
device
/
vr
/
public
/
mojom
/
vr_service
.
mojom
.
js
'
'
/
resources
/
chromium
/
webxr
-
test
.
js
'
'
/
resources
/
testdriver
.
js
'
'
/
resources
/
testdriver
-
vendor
.
js
'
]
.
forEach
(
path
=
>
{
let
script
=
document
.
createElement
(
'
script
'
)
;
script
.
src
=
path
;
script
.
async
=
false
;
chain
=
chain
.
then
(
(
)
=
>
new
Promise
(
resolve
=
>
{
script
.
onload
=
(
)
=
>
resolve
(
)
;
}
)
)
;
document
.
head
.
appendChild
(
script
)
;
}
)
;
return
chain
;
}
)
;
