'
use
strict
'
;
const
convertDepthBufferToArrayBuffer
=
function
(
data
desiredFormat
)
{
if
(
desiredFormat
=
=
"
luminance
-
alpha
"
)
{
const
result
=
new
ArrayBuffer
(
data
.
length
*
2
)
;
const
view
=
new
Uint16Array
(
result
)
;
for
(
let
i
=
0
;
i
<
data
.
length
;
+
+
i
)
{
view
[
i
]
=
data
[
i
]
;
}
return
new
Uint8Array
(
result
)
;
}
else
if
(
desiredFormat
=
=
"
float32
"
)
{
const
result
=
new
ArrayBuffer
(
data
.
length
*
4
)
;
const
view
=
new
Float32Array
(
result
)
;
for
(
let
i
=
0
;
i
<
data
.
length
;
+
+
i
)
{
view
[
i
]
=
data
[
i
]
;
}
return
new
Uint8Array
(
result
)
;
}
else
{
throw
new
Error
(
"
Unrecognized
data
format
!
"
)
;
}
}
const
RAW_VALUE_TO_METERS
=
1
/
100
;
const
createDepthSensingData
=
function
(
)
{
const
depthSensingBufferHeight
=
5
;
const
depthSensingBufferWidth
=
7
;
const
depthSensingBuffer
=
[
1
1
1
1
1
1
1
1
2
3
4
5
6
7
1
4
9
16
25
36
49
1
8
27
64
125
216
343
1
16
81
256
625
1296
2401
]
;
const
depthSensingBufferFromViewerTransform
=
{
position
:
[
1
1
0
]
orientation
:
[
0
0
1
0
]
}
;
return
{
depthData
:
convertDepthBufferToArrayBuffer
(
depthSensingBuffer
"
luminance
-
alpha
"
)
width
:
depthSensingBufferWidth
height
:
depthSensingBufferHeight
normDepthBufferFromNormView
:
depthSensingBufferFromViewerTransform
rawValueToMeters
:
RAW_VALUE_TO_METERS
}
;
}
;
const
DEPTH_SENSING_DATA
=
createDepthSensingData
(
)
;
const
getExpectedValueAt
=
function
(
column
row
)
{
return
Math
.
pow
(
column
+
1
row
)
*
RAW_VALUE_TO_METERS
;
}
;
const
DEPTH_CONFIG_ALL_FORMATS
=
[
'
luminance
-
alpha
'
'
float32
'
]
;
const
DEPTH_CONFIG_ALL_USAGES
=
[
'
gpu
-
optimized
'
'
cpu
-
optimized
'
]
;
const
VALID_DEPTH_CONFIG_CPU_USAGE
=
{
usagePreference
:
[
'
cpu
-
optimized
'
]
dataFormatPreference
:
[
'
luminance
-
alpha
'
'
float32
'
]
}
;
const
VALID_DEPTH_CONFIG_GPU_USAGE
=
{
usagePreference
:
[
'
gpu
-
optimized
'
]
dataFormatPreference
:
[
'
luminance
-
alpha
'
'
float32
'
]
}
;
