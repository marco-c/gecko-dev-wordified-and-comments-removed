self
.
GLOBAL
=
{
isWindow
:
function
(
)
{
return
false
;
}
isWorker
:
function
(
)
{
return
true
;
}
}
;
importScripts
(
"
/
resources
/
testharness
.
js
"
)
;
self
.
addEventListener
(
'
install
'
(
event
)
=
>
{
event
.
waitUntil
(
(
async
(
)
=
>
{
try
{
await
cookieStore
.
subscribeToChanges
(
[
]
)
;
}
catch
(
err
)
{
}
}
)
(
)
)
;
}
)
;
async
function
async_cleanup
(
cleanup_function
)
{
try
{
await
cleanup_function
(
)
;
}
catch
(
e
)
{
}
}
const
kServiceWorkerActivatedPromise
=
new
Promise
(
resolve
=
>
{
self
.
addEventListener
(
'
activate
'
event
=
>
{
resolve
(
)
;
}
)
;
}
)
;
promise_test
(
async
testCase
=
>
{
await
kServiceWorkerActivatedPromise
;
const
subscriptions
=
await
cookieStore
.
getChangeSubscriptions
(
)
;
assert_equals
(
subscriptions
.
length
0
)
;
}
'
getChangeSubscriptions
returns
an
empty
array
when
there
are
no
subscriptions
'
)
;
done
(
)
;
