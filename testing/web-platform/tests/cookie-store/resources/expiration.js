'
use
strict
'
;
async
function
setOneDaySecureCookieWithDate
(
)
{
let
inTwentyFourHours
=
new
Date
(
Date
.
now
(
)
+
24
*
60
*
60
*
1000
)
;
await
cookieStore
.
set
(
'
__Secure
-
COOKIENAME
'
'
cookie
-
value
'
{
path
:
kPath
expires
:
inTwentyFourHours
secure
:
true
domain
:
location
.
hostname
}
)
;
}
async
function
setSecureCookieWithHttpLikeExpirationString
(
)
{
const
year
=
(
new
Date
(
)
)
.
getUTCFullYear
(
)
+
1
;
const
date
=
new
Date
(
'
07
Jun
'
+
year
+
'
07
:
07
:
07
UTC
'
)
;
const
day
=
(
'
Sun
Mon
Tue
Wed
Thu
Fri
Sat
'
.
split
(
'
'
)
)
[
date
.
getUTCDay
(
)
]
;
await
cookieStore
.
set
(
'
__Secure
-
COOKIENAME
'
'
cookie
-
value
'
{
path
:
kPath
expires
:
day
+
'
07
Jun
'
+
year
+
'
07
:
07
:
07
GMT
'
secure
:
true
domain
:
location
.
hostname
}
)
;
}
async
function
setOneDayUnsecuredCookieWithMillisecondsSinceEpoch
(
)
{
let
inTwentyFourHours
=
Date
.
now
(
)
+
24
*
60
*
60
*
1000
;
await
cookieStore
.
set
(
'
LEGACYCOOKIENAME
'
'
cookie
-
value
'
{
path
:
kPath
expires
:
inTwentyFourHours
secure
:
false
domain
:
location
.
hostname
}
)
;
}
async
function
deleteUnsecuredCookieWithDomainAndPath
(
)
{
await
cookieStore
.
delete
(
'
LEGACYCOOKIENAME
'
{
path
:
kPath
secure
:
false
domain
:
location
.
hostname
}
)
;
}
cookie_test
(
async
testCase
=
>
{
await
promise_rejects_when_unsecured
(
testCase
new
TypeError
(
)
setOneDaySecureCookieWithDate
(
)
'
Secure
cookies
only
writable
from
secure
contexts
'
)
;
const
eventPromise
=
observeNextCookieChangeEvent
(
)
;
await
setOneDayUnsecuredCookieWithMillisecondsSinceEpoch
(
)
;
assert_equals
(
await
getCookieString
(
'
LEGACYCOOKIENAME
'
)
'
LEGACYCOOKIENAME
=
cookie
-
value
'
'
Ensure
unsecured
cookie
we
set
is
visible
'
)
;
await
verifyCookieChangeEvent
(
eventPromise
{
changed
:
[
{
name
:
'
LEGACYCOOKIENAME
'
value
:
'
cookie
-
value
'
}
]
}
'
Ensure
unsecured
cookie
we
set
is
visible
to
observer
'
)
;
await
deleteUnsecuredCookieWithDomainAndPath
(
)
;
await
promise_rejects_when_unsecured
(
testCase
new
TypeError
(
)
setSecureCookieWithHttpLikeExpirationString
(
)
'
Secure
cookies
only
writable
from
secure
contexts
'
)
;
}
'
expiration
'
)
;
