'
use
strict
'
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
dedicated_worker
=
create_dedicated_worker
(
t
kDedicatedWorkerMessageTarget
)
;
await
do_post_message_test
(
t
root_dir
dedicated_worker
dedicated_worker
)
;
}
'
Send
and
receive
messages
using
a
dedicated
worker
.
'
)
;
directory_test
(
async
(
t
root_dir
)
=
>
{
const
scope
=
{
kServiceWorkerMessageTarget
}
?
post
-
message
-
with
-
file
-
handle
;
const
registration
=
await
create_service_worker
(
t
kServiceWorkerMessageTarget
scope
)
;
await
do_post_message_test
(
t
root_dir
navigator
.
serviceWorker
registration
.
installing
)
;
}
'
Send
and
receive
messages
using
a
service
worker
.
'
)
;
if
(
self
.
SharedWorker
!
=
=
undefined
)
{
directory_test
(
async
(
t
root_dir
)
=
>
{
const
shared_worker
=
new
SharedWorker
(
kSharedWorkerMessageTarget
)
;
shared_worker
.
port
.
start
(
)
;
await
do_post_message_test
(
t
root_dir
shared_worker
.
port
shared_worker
.
port
)
;
}
'
Send
and
receive
messages
using
a
shared
worker
.
'
)
;
}
