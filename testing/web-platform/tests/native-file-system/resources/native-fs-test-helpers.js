const
directory_promise
=
(
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
'
DOMContentLoaded
'
resolve
)
;
}
)
;
await
window
.
test_driver
.
bless
(
'
show
a
file
picker
.
<
br
/
>
Please
select
an
empty
directory
'
)
;
const
entries
=
await
self
.
chooseFileSystemEntries
(
{
type
:
'
openDirectory
'
}
)
;
assert_true
(
entries
instanceof
FileSystemHandle
)
;
assert_true
(
entries
instanceof
FileSystemDirectoryHandle
)
;
for
await
(
const
entry
of
entries
.
getEntries
(
)
)
{
assert_unreached
(
'
Selected
directory
is
not
empty
'
)
;
}
return
entries
;
}
)
(
)
;
function
directory_test
(
func
description
)
{
promise_test
(
async
t
=
>
{
const
directory
=
await
directory_promise
;
for
await
(
let
entry
of
directory
.
getEntries
(
)
)
{
await
directory
.
removeEntry
(
entry
.
name
{
recursive
:
entry
.
isDirectory
}
)
;
}
await
func
(
t
directory
)
;
}
description
)
;
}
directory_test
(
async
(
t
dir
)
=
>
{
assert_equals
(
await
dir
.
queryPermission
(
{
writable
:
false
}
)
'
granted
'
)
;
}
'
User
succesfully
selected
an
empty
directory
.
'
)
;
directory_test
(
async
(
t
dir
)
=
>
{
const
status
=
await
dir
.
queryPermission
(
{
writable
:
true
}
)
;
if
(
status
=
=
'
granted
'
)
return
;
await
window
.
test_driver
.
bless
(
'
ask
for
write
permission
'
)
;
assert_equals
(
await
dir
.
requestPermission
(
{
writable
:
true
}
)
'
granted
'
)
;
}
'
User
granted
write
access
.
'
)
;
