function
getSubresourceOrigin
(
originType
)
{
const
httpProtocol
=
"
http
"
;
const
httpsProtocol
=
"
https
"
;
const
wsProtocol
=
"
ws
"
;
const
wssProtocol
=
"
wss
"
;
const
sameOriginHost
=
"
{
{
host
}
}
"
;
const
crossOriginHost
=
"
{
{
domains
[
www1
]
}
}
"
;
const
httpPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
http
]
[
0
]
}
}
"
10
)
)
;
const
httpsPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
https
]
[
0
]
}
}
"
10
)
)
;
const
wsPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
ws
]
[
0
]
}
}
"
10
)
)
;
const
wssPort
=
getNormalizedPort
(
parseInt
(
"
{
{
ports
[
wss
]
[
0
]
}
}
"
10
)
)
;
const
originMap
=
{
"
same
-
https
"
:
httpsProtocol
+
"
:
/
/
"
+
sameOriginHost
+
httpsPort
"
same
-
http
"
:
httpProtocol
+
"
:
/
/
"
+
sameOriginHost
+
httpPort
"
cross
-
https
"
:
httpsProtocol
+
"
:
/
/
"
+
crossOriginHost
+
httpsPort
"
cross
-
http
"
:
httpProtocol
+
"
:
/
/
"
+
crossOriginHost
+
httpPort
"
same
-
wss
"
:
wssProtocol
+
"
:
/
/
"
+
sameOriginHost
+
wssPort
"
same
-
ws
"
:
wsProtocol
+
"
:
/
/
"
+
sameOriginHost
+
wsPort
"
cross
-
wss
"
:
wssProtocol
+
"
:
/
/
"
+
crossOriginHost
+
wssPort
"
cross
-
ws
"
:
wsProtocol
+
"
:
/
/
"
+
crossOriginHost
+
wsPort
}
;
return
originMap
[
originType
]
;
}
function
stripUrlForUseAsReferrer
(
url
)
{
return
url
.
replace
(
/
#
.
*
/
"
"
)
;
}
function
invokeScenario
(
scenario
)
{
const
urls
=
getRequestURLs
(
scenario
.
subresource
scenario
.
origin
scenario
.
redirection
)
;
const
subresource
=
{
subresourceType
:
scenario
.
subresource
url
:
urls
.
testUrl
policyDeliveries
:
scenario
.
subresource_policy_deliveries
}
;
return
invokeRequest
(
subresource
scenario
.
source_context_list
)
;
}
function
TestCase
(
scenario
testDescription
sanityChecker
)
{
sanityChecker
.
checkScenario
(
scenario
)
;
const
referrerUrlResolver
=
{
"
omitted
"
:
function
(
sourceUrl
)
{
return
undefined
;
}
"
origin
"
:
function
(
sourceUrl
)
{
return
new
URL
(
sourceUrl
)
.
origin
+
"
/
"
;
}
"
stripped
-
referrer
"
:
function
(
sourceUrl
)
{
return
stripUrlForUseAsReferrer
(
sourceUrl
)
;
}
}
;
const
checkResult
=
(
expectation
result
)
=
>
{
let
referrerSource
=
result
.
sourceContextUrl
;
const
sentFromSrcdoc
=
scenario
.
source_context_list
.
length
>
0
&
&
scenario
.
source_context_list
[
scenario
.
source_context_list
.
length
-
1
]
.
sourceContextType
=
=
=
'
srcdoc
'
;
if
(
sentFromSrcdoc
)
{
referrerSource
=
location
.
toString
(
)
;
}
const
expectedReferrerUrl
=
referrerUrlResolver
[
expectation
]
(
referrerSource
)
;
assert_equals
(
result
.
referrer
expectedReferrerUrl
"
Reported
Referrer
URL
is
'
"
+
expectation
+
"
'
.
"
)
;
assert_equals
(
result
.
headers
.
referer
expectedReferrerUrl
"
Reported
Referrer
URL
from
HTTP
header
is
'
"
+
expectedReferrerUrl
+
"
'
"
)
;
}
;
function
runTest
(
)
{
function
historyBackPromise
(
t
scenario
)
{
history
.
back
(
)
;
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
'
popstate
'
resolve
{
once
:
true
}
)
;
if
(
scenario
.
subresource
=
=
=
'
a
-
tag
'
)
{
t
.
step_timeout
(
resolve
1000
)
;
}
}
)
;
}
promise_test
(
_
=
>
{
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
scenario
.
expectation
result
)
)
;
}
testDescription
)
;
if
(
scenario
.
expectation
=
=
"
stripped
-
referrer
"
&
&
scenario
.
source_context_list
.
length
=
=
0
)
{
promise_test
(
t
=
>
{
history
.
pushState
(
null
null
"
/
"
)
;
history
.
replaceState
(
null
null
"
A
"
.
repeat
(
4096
-
location
.
href
.
length
-
1
)
)
;
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
scenario
.
expectation
result
)
)
.
finally
(
_
=
>
historyBackPromise
(
t
scenario
)
)
;
}
"
Referer
header
with
length
<
4k
is
not
stripped
to
an
origin
.
"
)
;
promise_test
(
t
=
>
{
history
.
pushState
(
null
null
"
/
"
)
;
history
.
replaceState
(
null
null
"
A
"
.
repeat
(
4096
-
location
.
href
.
length
)
)
;
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
scenario
.
expectation
result
)
)
.
finally
(
_
=
>
historyBackPromise
(
t
scenario
)
)
;
}
"
Referer
header
with
length
=
=
4k
is
not
stripped
to
an
origin
.
"
)
;
promise_test
(
t
=
>
{
history
.
pushState
(
null
null
"
/
"
)
;
history
.
replaceState
(
null
null
"
A
"
.
repeat
(
4096
-
location
.
href
.
length
+
1
)
)
;
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
"
origin
"
result
)
)
.
finally
(
_
=
>
historyBackPromise
(
t
scenario
)
)
;
}
"
Referer
header
with
length
>
4k
is
stripped
to
an
origin
.
"
)
;
}
}
return
{
start
:
runTest
}
;
}
