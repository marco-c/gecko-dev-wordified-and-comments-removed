function
stripUrlForUseAsReferrer
(
url
originOnly
)
{
const
parsedUrl
=
new
URL
(
url
)
;
if
(
[
"
about
:
"
"
blob
:
"
"
data
:
"
]
.
includes
(
parsedUrl
.
protocol
)
)
return
undefined
;
parsedUrl
.
username
=
'
'
;
parsedUrl
.
password
=
'
'
;
parsedUrl
.
hash
=
'
'
;
if
(
originOnly
)
{
parsedUrl
.
pathname
=
'
'
;
parsedUrl
.
search
=
'
'
;
}
return
parsedUrl
.
href
;
}
function
invokeScenario
(
scenario
)
{
const
urls
=
getRequestURLs
(
scenario
.
subresource
scenario
.
origin
scenario
.
redirection
)
;
const
subresource
=
{
subresourceType
:
scenario
.
subresource
url
:
urls
.
testUrl
policyDeliveries
:
scenario
.
subresource_policy_deliveries
}
;
return
invokeRequest
(
subresource
scenario
.
source_context_list
)
;
}
const
referrerUrlResolver
=
{
"
omitted
"
:
function
(
sourceUrl
)
{
return
undefined
;
}
"
origin
"
:
function
(
sourceUrl
)
{
return
stripUrlForUseAsReferrer
(
sourceUrl
true
)
;
}
"
stripped
-
referrer
"
:
function
(
sourceUrl
)
{
return
stripUrlForUseAsReferrer
(
sourceUrl
false
)
;
}
}
;
function
checkResult
(
scenario
expectation
result
)
{
let
referrerSource
=
result
.
sourceContextUrl
;
const
sentFromSrcdoc
=
scenario
.
source_context_list
.
length
>
0
&
&
scenario
.
source_context_list
[
scenario
.
source_context_list
.
length
-
1
]
.
sourceContextType
=
=
=
'
srcdoc
'
;
if
(
sentFromSrcdoc
)
{
referrerSource
=
location
.
toString
(
)
;
}
const
expectedReferrerUrl
=
referrerUrlResolver
[
expectation
]
(
referrerSource
)
;
assert_equals
(
result
.
referrer
expectedReferrerUrl
"
Reported
Referrer
URL
is
'
"
+
expectation
+
"
'
.
"
)
;
assert_equals
(
result
.
headers
.
referer
expectedReferrerUrl
"
Reported
Referrer
URL
from
HTTP
header
is
'
"
+
expectedReferrerUrl
+
"
'
"
)
;
}
function
runLengthTest
(
scenario
urlLength
expectation
testDescription
)
{
history
.
pushState
(
null
null
"
/
"
)
;
history
.
replaceState
(
null
null
"
A
"
.
repeat
(
urlLength
-
location
.
href
.
length
)
)
;
promise_test
(
t
=
>
{
assert_equals
(
scenario
.
expectation
"
stripped
-
referrer
"
)
;
assert_equals
(
scenario
.
source_context_list
.
length
0
)
;
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
scenario
expectation
result
)
)
;
}
testDescription
)
;
}
function
TestCase
(
scenario
testDescription
sanityChecker
)
{
sanityChecker
.
checkScenario
(
scenario
)
;
function
runTest
(
)
{
promise_test
(
_
=
>
{
return
invokeScenario
(
scenario
)
.
then
(
result
=
>
checkResult
(
scenario
scenario
.
expectation
result
)
)
;
}
testDescription
)
;
}
return
{
start
:
runTest
}
;
}
