const
kBadNativeIoNames
=
[
"
Uppercase
"
"
has
-
dash
"
"
has
.
dot
"
"
has
/
slash
"
]
;
async
function
createFile
(
testCase
fileName
)
{
const
file
=
await
nativeIO
.
open
(
fileName
)
;
testCase
.
add_cleanup
(
async
(
)
=
>
{
await
file
.
close
(
)
;
await
nativeIO
.
delete
(
fileName
)
;
}
)
;
const
writeSharedArrayBuffer
=
new
SharedArrayBuffer
(
4
)
;
const
writtenBytes
=
new
Uint8Array
(
writeSharedArrayBuffer
)
;
writtenBytes
.
set
(
[
64
65
66
67
]
)
;
const
writeCount
=
await
file
.
write
(
writtenBytes
0
)
;
assert_equals
(
writeCount
4
)
;
return
file
;
}
function
createFileSync
(
testCase
fileName
)
{
const
file
=
nativeIO
.
openSync
(
fileName
)
;
testCase
.
add_cleanup
(
(
)
=
>
{
file
.
close
(
)
;
nativeIO
.
deleteSync
(
fileName
)
;
}
)
;
const
writtenBytes
=
Uint8Array
.
from
(
[
64
65
66
67
]
)
;
const
writeCount
=
file
.
write
(
writtenBytes
0
)
;
assert_equals
(
writeCount
4
)
;
return
file
;
}
function
createLargeArray
(
size
seed
)
{
const
buffer
=
new
Uint8Array
(
size
)
;
let
state
=
1000
+
seed
;
for
(
let
i
=
0
;
i
<
size
;
+
+
i
)
{
state
^
=
state
<
<
13
;
state
^
=
state
>
>
17
;
state
^
=
state
<
<
5
;
buffer
[
i
]
=
state
&
0xff
;
}
return
buffer
;
}
async
function
readIoFile
(
file
)
{
const
length
=
await
file
.
getLength
(
)
;
const
readBuffer
=
new
Uint8Array
(
new
SharedArrayBuffer
(
length
)
)
;
await
file
.
read
(
readBuffer
0
)
;
return
readBuffer
;
}
function
readIoFileSync
(
file
)
{
const
length
=
file
.
getLength
(
)
;
const
readBuffer
=
new
Uint8Array
(
length
)
;
file
.
read
(
readBuffer
0
)
;
return
readBuffer
;
}
