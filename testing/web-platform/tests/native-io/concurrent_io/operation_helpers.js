const
kOperations
=
[
]
;
(
(
)
=
>
{
const
kOpRead
=
{
name
:
'
read
'
prepare
:
(
)
=
>
{
const
readSharedArrayBuffer
=
new
SharedArrayBuffer
(
4
)
;
const
readBytes
=
new
Uint8Array
(
readSharedArrayBuffer
)
;
return
readBytes
;
}
assertRejection
:
(
testCase
file
readBytes
)
=
>
{
return
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
read
(
readBytes
4
)
)
;
}
assertUnchanged
:
(
readBytes
)
=
>
{
assert_array_equals
(
readBytes
[
0
0
0
0
]
)
;
}
}
;
kOperations
.
push
(
kOpRead
)
;
const
kOpWrite
=
{
name
:
'
write
'
prepare
:
(
)
=
>
{
const
writeSharedArrayBuffer
=
new
SharedArrayBuffer
(
4
)
;
const
writtenBytes
=
new
Uint8Array
(
writeSharedArrayBuffer
)
;
writtenBytes
.
set
(
[
96
97
98
99
]
)
;
return
writtenBytes
;
}
assertRejection
:
(
testCase
file
writtenBytes
)
=
>
{
return
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
write
(
writtenBytes
4
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpWrite
)
;
const
kOpGetLength
=
{
name
:
'
getLength
'
prepare
:
(
)
=
>
{
}
assertRejection
:
(
testCase
file
)
=
>
{
return
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
getLength
(
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpGetLength
)
;
const
kOpFlush
=
{
name
:
'
flush
'
prepare
:
(
)
=
>
{
}
assertRejection
:
async
(
testCase
file
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
flush
(
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpFlush
)
;
}
)
(
)
;
