const
kOperations
=
[
]
;
(
(
)
=
>
{
const
kOpRead
=
{
name
:
'
read
'
prepare
:
(
)
=
>
{
const
readBuffer
=
new
Uint8Array
(
4
)
;
return
readBuffer
;
}
assertRejection
:
async
(
testCase
file
readBuffer
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
read
(
readBuffer
4
)
)
;
}
assertUnchanged
:
(
readBuffer
)
=
>
{
assert_array_equals
(
readBuffer
[
0
0
0
0
]
)
;
}
}
;
kOperations
.
push
(
kOpRead
)
;
const
kOpWrite
=
{
name
:
'
write
'
prepare
:
(
)
=
>
{
const
writeBuffer
=
new
Uint8Array
(
4
)
;
writeBuffer
.
set
(
[
96
97
98
99
]
)
;
return
writeBuffer
;
}
assertRejection
:
async
(
testCase
file
writeBuffer
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
write
(
writeBuffer
4
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpWrite
)
;
const
kOpGetLength
=
{
name
:
'
getLength
'
prepare
:
(
)
=
>
{
}
assertRejection
:
async
(
testCase
file
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
getLength
(
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpGetLength
)
;
const
kOpFlush
=
{
name
:
'
flush
'
prepare
:
(
)
=
>
{
}
assertRejection
:
async
(
testCase
file
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
flush
(
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpFlush
)
;
const
kOpSetLength
=
{
name
:
'
setLength
'
prepare
:
(
)
=
>
{
}
assertRejection
:
async
(
testCase
file
)
=
>
{
await
promise_rejects_dom
(
testCase
'
InvalidStateError
'
file
.
setLength
(
2
)
)
;
}
assertUnchanged
:
(
)
=
>
{
}
}
;
kOperations
.
push
(
kOpSetLength
)
;
}
)
(
)
;
