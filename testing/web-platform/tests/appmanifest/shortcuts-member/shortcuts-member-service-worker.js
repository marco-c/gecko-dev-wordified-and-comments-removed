const
cacheVersion
=
"
1
.
2
"
;
const
CACHE_NAME
=
cache
-
v
{
cacheVersion
}
;
const
resources
=
[
"
shortcuts
-
member
-
cors
-
fail
-
manual
.
sub
.
html
"
"
shortcuts
-
member
-
cors
-
manual
.
sub
.
html
"
"
shortcuts
-
member
-
csp
-
fail
-
manual
.
sub
.
html
"
"
shortcuts
-
member
-
csp
-
manual
.
sub
.
html
"
"
shortcuts
-
member
-
manual
.
html
"
"
shortcuts
-
member
-
skip
-
for
-
empty
-
name
-
manual
.
html
"
"
shortcuts
-
member
-
skip
-
for
-
invalid
-
url
-
manual
.
html
"
"
shortcuts
-
member
-
skip
-
for
-
out
-
of
-
scope
-
url
-
manual
.
html
"
"
shortcuts
-
member
-
skip
-
for
-
undefined
-
name
-
manual
.
html
"
"
shortcuts
-
member
-
skip
-
for
-
undefined
-
url
-
manual
.
html
"
"
shortcuts
-
member
-
service
-
worker
.
js
"
"
resources
/
shortcuts
-
member
-
manual
.
js
"
"
resources
/
pass
.
png
"
]
;
const
precache
=
async
(
)
=
>
{
const
cache
=
await
caches
.
open
(
CACHE_NAME
)
;
await
cache
.
addAll
(
resources
)
;
}
;
const
fromCache
=
async
request
=
>
{
const
cache
=
await
caches
.
open
(
CACHE_NAME
)
;
return
await
cache
.
match
(
request
.
url
)
;
}
;
const
networkFallbackToCache
=
async
request
=
>
{
try
{
const
response
=
await
fetch
(
request
)
;
if
(
response
.
ok
)
return
response
;
}
catch
(
err
)
{
}
return
await
fromCache
(
request
)
;
}
;
self
.
addEventListener
(
"
install
"
e
=
>
{
e
.
waitUntil
(
precache
(
)
.
then
(
(
)
=
>
self
.
skipWaiting
(
)
)
)
;
}
)
;
self
.
addEventListener
(
"
activate
"
e
=
>
{
e
.
waitUntil
(
self
.
clients
.
claim
(
)
)
;
}
)
;
self
.
addEventListener
(
"
fetch
"
e
=
>
{
e
.
respondWith
(
networkFallbackToCache
(
e
.
request
)
)
;
}
)
;
