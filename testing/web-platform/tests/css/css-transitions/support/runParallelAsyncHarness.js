(
function
(
root
)
{
'
use
strict
'
;
function
DomContentLoadedPromise
(
)
{
return
new
Promise
(
resolve
=
>
{
document
.
addEventListener
(
"
DOMContentLoaded
"
(
event
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
}
root
.
runParallelAsyncHarness
=
async
function
(
options
)
{
const
ready
=
DomContentLoadedPromise
(
)
;
if
(
!
options
.
cases
)
{
throw
new
Error
(
"
Options
don
'
t
contain
test
cases
!
"
)
;
}
var
noop
=
function
(
)
{
}
;
var
cases
=
Object
.
keys
(
options
.
cases
)
;
var
iteration
=
-
1
;
var
testPerSlice
=
options
.
testsPerSlice
|
|
100
;
var
slices
=
Math
.
ceil
(
options
.
tests
.
length
/
testPerSlice
)
;
options
.
tests
.
forEach
(
function
(
data
index
)
{
data
.
cases
=
{
}
;
cases
.
forEach
(
function
(
name
)
{
data
.
cases
[
name
]
=
async_test
(
data
.
name
+
"
/
"
+
name
)
;
}
)
;
}
)
;
function
runLoop
(
)
{
iteration
+
+
;
if
(
iteration
>
=
slices
)
{
(
options
.
done
|
|
noop
)
(
options
)
;
return
;
}
var
offset
=
iteration
*
testPerSlice
;
var
tests
=
options
.
tests
.
slice
(
offset
offset
+
testPerSlice
)
;
tests
.
forEach
(
function
(
data
)
{
(
options
.
setup
|
|
noop
)
(
data
options
)
;
}
)
;
(
options
.
sliceStart
|
|
noop
)
(
options
tests
)
;
tests
.
forEach
(
function
(
data
)
{
cases
.
forEach
(
function
(
name
)
{
data
.
cases
[
name
]
.
step
(
function
(
)
{
(
options
.
cases
[
name
]
.
start
|
|
noop
)
(
data
.
cases
[
name
]
data
options
)
;
}
)
;
}
)
;
}
)
;
(
options
.
transitionsStarted
|
|
noop
)
(
options
tests
)
;
var
concludeSlice
=
function
(
)
{
tests
.
forEach
(
function
(
data
)
{
cases
.
forEach
(
function
(
name
)
{
data
.
cases
[
name
]
.
step
(
function
(
)
{
(
options
.
cases
[
name
]
.
done
|
|
noop
)
(
data
.
cases
[
name
]
data
options
)
;
}
)
;
}
)
;
(
options
.
teardown
|
|
noop
)
(
data
options
)
;
cases
.
forEach
(
function
(
name
)
{
data
.
cases
[
name
]
.
done
(
)
;
}
)
;
}
)
;
(
options
.
sliceDone
|
|
noop
)
(
options
tests
)
;
requestAnimationFrame
(
runLoop
)
;
}
options
.
allTransitionsCompleted
=
concludeSlice
;
}
ready
.
then
(
runLoop
)
;
}
;
}
)
(
window
)
;
