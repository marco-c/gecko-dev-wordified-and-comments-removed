var
testTimeout
=
10000
;
setup
(
{
timeout
:
testTimeout
}
)
;
if
(
window
.
testRunner
)
{
testRunner
.
dumpEditingCallbacks
(
)
;
testRunner
.
dumpAsText
(
false
)
;
}
var
DEFAULT_MOUSE_VALUE
=
true
;
function
runSelectionTest
(
inSelectionTests
useMouse
)
{
var
selectionTests
=
inSelectionTests
|
|
[
]
;
var
useMouse
=
(
useMouse
=
=
=
undefined
)
?
DEFAULT_MOUSE_VALUE
:
useMouse
;
if
(
isRegionsEnabled
(
)
)
{
var
selectionTest
=
async_test
(
"
Text
was
selected
"
{
timeout
:
testTimeout
}
)
;
selectionTest
.
step
(
function
(
)
{
var
endSelect
=
document
.
getElementById
(
"
end
-
select
"
)
;
endSelect
.
onmouseup
=
selectionTest
.
step_func
(
function
(
evt
)
{
var
selectedText
=
getCurrentSelectedText
(
)
;
assert_not_equals
(
selectedText
"
"
)
;
test
(
function
(
)
{
verifySelectedText
(
)
}
"
Selected
text
is
correct
"
)
;
for
(
var
i
=
0
;
i
<
selectionTests
.
length
;
i
+
+
)
{
if
(
selectionTests
[
i
]
.
nodeName
)
{
var
nodeName
=
selectionTests
[
i
]
.
nodeName
var
nodeExp
=
selectionTests
[
i
]
.
expected
;
var
msg
=
nodeName
+
"
is
"
+
(
nodeExp
=
=
true
?
"
"
:
"
not
"
)
+
"
in
selection
"
;
test
(
function
(
)
{
assert_equals
(
isNodeInSelection
(
nodeName
)
nodeExp
)
}
msg
)
;
}
else
if
(
selectionTests
[
i
]
.
string
)
{
var
strToCheck
=
selectionTests
[
i
]
.
string
;
var
strExp
=
selectionTests
[
i
]
.
expected
;
var
msg
=
"
'
"
+
strToCheck
+
"
'
is
"
+
(
strExp
=
=
true
?
"
"
:
"
not
"
)
+
"
in
selection
"
;
test
(
function
(
)
{
assert_equals
(
isStringInSelection
(
strToCheck
)
strExp
)
}
msg
)
;
}
}
var
msg
=
document
.
getElementById
(
"
msg
"
)
;
var
complete
=
document
.
createElement
(
"
p
"
)
;
complete
.
innerHTML
=
"
Tests
are
complete
.
All
results
in
the
Details
section
below
should
PASS
.
"
;
complete
.
style
.
color
=
"
blue
"
;
msg
.
appendChild
(
complete
)
;
selectionTest
.
done
(
)
;
}
)
;
setSelection
(
"
start
-
select
"
"
end
-
select
"
useMouse
)
;
}
)
;
}
else
{
test
(
function
(
)
{
assert_true
(
false
)
}
"
Regions
are
not
enabled
"
)
;
}
}
function
setSelection
(
start
end
useMouse
)
{
if
(
window
.
testRunner
)
{
var
startNode
=
document
.
getElementById
(
start
)
;
var
endNode
=
document
.
getElementById
(
end
)
;
var
xStartPosition
=
startNode
.
getBoundingClientRect
(
)
.
left
var
yStartPosition
=
startNode
.
getBoundingClientRect
(
)
.
top
var
tmp
=
startNode
.
getBoundingClientRect
(
)
;
var
xEndPosition
=
endNode
.
getBoundingClientRect
(
)
.
left
var
yEndPosition
=
endNode
.
getBoundingClientRect
(
)
.
top
if
(
isTopToBottom
(
startNode
endNode
)
)
{
xEndPosition
+
=
endNode
.
getBoundingClientRect
(
)
.
width
}
else
{
xStartPosition
+
=
startNode
.
getBoundingClientRect
(
)
.
width
}
if
(
useMouse
)
{
console
.
log
(
"
Selection
set
with
the
mouse
"
)
;
eventSender
.
mouseMoveTo
(
xStartPosition
yStartPosition
)
;
eventSender
.
mouseDown
(
)
;
eventSender
.
mouseMoveTo
(
xEndPosition
yEndPosition
)
;
eventSender
.
mouseUp
(
)
;
var
mouseUpEvt
=
document
.
createEvent
(
'
MouseEvents
'
)
;
mouseUpEvt
.
initMouseEvent
(
'
mouseup
'
true
true
window
1
0
0
xEndPosition
yEndPosition
false
false
false
false
1
null
)
;
endNode
.
dispatchEvent
(
mouseUpEvt
)
;
}
else
{
console
.
log
(
"
Selection
set
without
the
mouse
"
)
;
var
range
=
document
.
createRange
(
)
;
range
.
setStart
(
startNode
0
)
;
range
.
setEnd
(
endNode
0
)
;
var
sel
=
window
.
getSelection
(
)
;
sel
.
removeAllRanges
(
)
;
sel
.
addRange
(
range
)
;
}
}
}
function
isRegionsEnabled
(
)
{
var
style
=
document
.
getElementById
(
"
region
"
)
.
style
if
(
typeof
style
[
"
flow
-
from
"
]
=
=
'
string
'
)
return
true
;
else
return
false
;
}
function
isTopToBottom
(
startPoint
endPoint
)
{
var
start
=
document
.
createRange
(
)
;
start
.
setStart
(
startPoint
0
)
;
start
.
setEnd
(
startPoint
0
)
;
var
end
=
document
.
createRange
(
)
;
end
.
setStart
(
endPoint
0
)
;
end
.
setEnd
(
endPoint
0
)
;
if
(
start
.
compareBoundaryPoints
(
Range
.
START_TO_END
end
)
<
0
)
return
true
;
else
return
false
;
}
function
getTextRange
(
start
end
)
{
var
startNode
=
document
.
getElementById
(
start
)
;
var
endNode
=
document
.
getElementById
(
end
)
;
var
range
=
document
.
createRange
(
)
;
if
(
isTopToBottom
(
startNode
endNode
)
)
{
range
.
setStart
(
startNode
0
)
;
range
.
setEnd
(
endNode
0
)
;
}
else
{
range
.
setStart
(
endNode
0
)
;
range
.
setEnd
(
startNode
0
)
;
}
return
range
.
toString
(
)
.
replace
(
/
\
n
/
g
"
"
)
;
}
function
getCurrentSelectedText
(
)
{
var
currentSelection
=
"
"
;
var
sel
=
window
.
getSelection
(
)
;
if
(
sel
.
rangeCount
)
{
for
(
var
i
=
0
len
=
sel
.
rangeCount
;
i
<
len
;
+
+
i
)
{
currRange
=
sel
.
getRangeAt
(
i
)
;
currentSelection
+
=
sel
.
getRangeAt
(
i
)
.
toString
(
)
;
}
}
return
currentSelection
.
replace
(
/
\
n
/
g
"
"
)
;
}
function
verifySelectedText
(
)
{
var
expected
=
getTextRange
(
"
start
-
select
"
"
end
-
select
"
)
;
var
actual
=
getCurrentSelectedText
(
)
;
assert_equals
(
actual
expected
)
;
}
function
isStringInSelection
(
strToCheck
)
{
var
sel
=
window
.
getSelection
(
)
.
getRangeAt
(
0
)
;
if
(
sel
.
toString
(
)
.
indexOf
(
strToCheck
)
>
=
0
)
return
true
;
else
return
false
;
}
function
isNodeInSelection
(
toCheck
)
{
var
sel
=
window
.
getSelection
(
)
.
getRangeAt
(
0
)
;
var
nodeToCheck
=
document
.
getElementById
(
toCheck
)
;
var
range
=
document
.
createRange
(
)
range
.
setStart
(
nodeToCheck
0
)
;
range
.
setEnd
(
nodeToCheck
nodeToCheck
.
childNodes
.
length
)
;
var
startToStart
=
sel
.
compareBoundaryPoints
(
Range
.
START_TO_START
range
)
;
var
startToEnd
=
sel
.
compareBoundaryPoints
(
Range
.
START_TO_END
range
)
;
var
endToEnd
=
sel
.
compareBoundaryPoints
(
Range
.
END_TO_END
range
)
;
var
endToStart
=
sel
.
compareBoundaryPoints
(
Range
.
END_TO_START
range
)
;
if
(
startToStart
=
=
startToEnd
=
=
endToEnd
=
=
endToStart
)
return
false
;
else
return
true
;
}
