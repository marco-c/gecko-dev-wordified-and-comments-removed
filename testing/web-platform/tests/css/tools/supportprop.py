import
os
from
os
.
path
import
join
import
shutil
import
filecmp
fileExcludes
=
(
'
README
'
)
dirExcludes
=
(
'
.
svn
'
'
.
hg
'
'
CVS
'
)
def
propagate
(
source
dest
errors
)
:
  
"
"
"
Compare
each
file
and
copy
from
source
to
destination
.
     
Do
nothing
and
flag
an
error
if
the
destination
already
exists
     
but
is
different
.
Recurse
.
     
source
and
dest
are
both
directory
paths
.
     
errors
is
a
list
of
2
-
element
tuples
the
first
being
a
       
source
filepath
and
the
second
a
destination
filepath
       
of
file
pairs
where
the
destination
isdifferent
from
  
"
"
"
  
if
os
.
path
.
exists
(
join
(
dest
'
LOCK
'
)
)
:
return
  
if
not
os
.
path
.
exists
(
source
)
:
return
  
children
=
os
.
listdir
(
source
)
  
for
name
in
children
:
    
origin
=
join
(
source
name
)
    
copy
=
join
(
dest
name
)
    
if
os
.
path
.
isfile
(
origin
)
:
      
if
name
in
fileExcludes
:
continue
      
if
not
os
.
path
.
exists
(
copy
)
:
        
shutil
.
copy2
(
origin
copy
)
      
elif
not
filecmp
.
cmp
(
origin
copy
)
:
        
if
not
filecmp
.
cmp
(
origin
copy
True
)
:
          
shutil
.
copystat
(
origin
copy
)
        
else
:
          
errors
.
append
(
(
origin
copy
)
)
    
elif
os
.
path
.
isdir
(
origin
)
:
      
if
name
in
dirExcludes
:
continue
      
if
not
os
.
path
.
exists
(
copy
)
:
        
os
.
makedirs
(
copy
)
      
propagate
(
origin
copy
errors
)
  
if
len
(
children
)
=
=
0
:
    
print
"
Warn
:
"
+
source
+
"
is
empty
.
\
n
"
def
waterfall
(
parentDir
childDir
errors
)
:
  
"
"
"
Copy
down
support
files
from
parent
support
to
child
.
     
parentDir
is
the
parent
of
the
parent
support
directory
.
     
childDir
is
the
parent
of
the
current
support
directory
     
that
we
should
copy
into
.
     
waterfall
recurses
into
childDir
'
s
children
.
"
"
"
  
assert
os
.
path
.
exists
(
join
(
parentDir
'
support
'
)
)
join
(
parentDir
'
support
'
)
+
"
doesn
'
t
exist
\
n
"
  
if
os
.
path
.
exists
(
join
(
childDir
'
support
'
)
)
:
    
propagate
(
join
(
parentDir
'
support
'
)
join
(
childDir
'
support
'
)
errors
)
    
dirs
=
os
.
walk
(
childDir
)
.
next
(
)
[
1
]
    
for
name
in
dirs
:
      
if
name
=
=
'
support
'
:
        
pass
      
elif
name
not
in
dirExcludes
:
        
waterfall
(
childDir
join
(
childDir
name
)
errors
)
def
outline
(
source
dest
errors
)
:
  
"
"
"
Copy
over
directory
structure
and
all
files
under
any
support
/
directories
     
source
and
dest
are
both
directory
paths
.
     
errors
is
a
list
of
2
-
element
tuples
the
first
being
a
       
source
filepath
and
the
second
a
destination
filepath
       
of
support
file
pairs
where
the
destination
copy
is
       
different
from
the
source
  
"
"
"
  
dirs
=
os
.
walk
(
source
)
.
next
(
)
[
1
]
  
for
name
in
dirs
:
    
if
name
in
dirExcludes
:
continue
    
origin
=
join
(
source
name
)
    
copy
=
join
(
dest
name
)
    
if
not
os
.
path
.
exists
(
copy
)
:
      
os
.
mkdirs
(
copy
)
    
if
name
=
=
'
support
'
:
      
propagate
(
origin
copy
errors
)
    
else
:
      
outline
(
origin
copy
errors
)
def
syncSupport
(
source
dest
errors
)
:
  
"
"
"
For
each
support
directory
in
dest
propagate
the
corresponding
support
     
files
from
source
.
     
source
and
dest
are
both
directory
paths
.
     
errors
is
a
list
of
2
-
element
tuples
the
first
being
a
       
source
filepath
and
the
second
a
destination
filepath
       
of
support
file
pairs
where
the
destination
copy
is
       
different
from
the
source
  
"
"
"
  
dirs
=
os
.
walk
(
dest
)
.
next
(
)
[
1
]
  
for
name
in
dirs
:
    
if
name
in
dirExcludes
:
continue
    
master
=
join
(
source
name
)
    
slave
=
join
(
dest
name
)
    
if
name
=
=
'
support
'
:
      
propagate
(
master
slave
errors
)
    
else
:
      
syncSupport
(
master
slave
errors
)
def
main
(
)
:
  
errors
=
[
]
  
root
dirs
_
=
os
.
walk
(
'
.
'
)
.
next
(
)
  
if
'
approved
'
in
dirs
:
    
root
=
join
(
root
'
approved
'
)
    
suites
=
os
.
walk
(
root
)
.
next
(
)
[
1
]
    
suites
=
filter
(
lambda
name
:
name
not
in
dirExcludes
suites
)
    
for
suite
in
suites
:
      
waterfall
(
root
join
(
root
suite
'
src
'
)
errors
)
  
else
:
    
print
"
Failed
to
find
approved
/
directory
.
\
n
"
    
exit
(
)
;
  
if
'
contributors
'
in
dirs
:
    
_
contribs
_
=
os
.
walk
(
'
contributors
'
)
.
next
(
)
    
for
contributor
in
contribs
:
      
contribRoot
=
join
(
'
contributors
'
contributor
'
submitted
'
)
      
if
not
os
.
path
.
exists
(
contribRoot
)
:
continue
      
dirs
=
os
.
walk
(
contribRoot
)
.
next
(
)
[
1
]
      
for
dir
in
dirs
:
        
if
dir
in
suites
:
          
suiteRoot
=
join
(
root
dir
'
src
'
)
          
if
os
.
path
.
exists
(
suiteRoot
)
:
            
syncSupport
(
suiteRoot
join
(
contribRoot
dir
)
errors
)
  
else
:
    
print
"
Failed
to
find
contributors
/
directory
.
\
n
"
  
for
error
in
errors
:
    
print
"
Mismatch
:
"
+
error
[
0
]
+
"
vs
"
+
error
[
1
]
+
"
Copy
failed
.
\
n
"
if
__name__
=
=
"
__main__
"
:
  
main
(
)
