#
coding
=
utf
-
8
from
__future__
import
print_function
import
sys
import
os
import
glob
import
json
import
exceptions
import
collections
from
apiclient
import
uritemplate
from
apiclient
import
apiclient
def
runTests
(
testFileSearch
)
:
    
for
testFilePath
in
glob
.
glob
(
testFileSearch
)
:
        
print
(
'
Running
tests
from
:
'
+
testFilePath
)
        
with
open
(
testFilePath
)
as
testFile
:
            
testData
=
json
.
load
(
testFile
object_pairs_hook
=
collections
.
OrderedDict
)
            
for
testSetName
in
testData
:
                
print
(
testSetName
+
'
:
'
)
                
testSet
=
testData
[
testSetName
]
                
vars
=
testSet
[
'
variables
'
]
                
for
test
in
testSet
[
'
testcases
'
]
:
                    
expectedResult
=
test
[
1
]
                    
try
:
                        
template
=
uritemplate
.
URITemplate
(
test
[
0
]
)
                    
except
Exception
as
e
:
                        
if
(
expectedResult
)
:
                            
print
(
'
*
FAIL
:
"
'
+
test
[
0
]
+
'
"
got
:
None
expected
"
'
+
expectedResult
+
'
"
'
)
                        
else
:
                            
print
(
'
PASS
:
"
'
+
test
[
0
]
+
'
"
=
=
None
'
)
                        
continue
                    
result
=
template
.
expand
(
*
*
vars
)
                    
if
(
isinstance
(
expectedResult
basestring
)
)
:
                        
if
(
expectedResult
!
=
result
)
:
                            
print
(
'
*
FAIL
:
"
'
+
test
[
0
]
+
'
"
got
:
"
'
+
unicode
(
result
)
+
'
"
expected
"
'
+
expectedResult
+
'
"
'
)
                            
continue
                    
elif
(
isinstance
(
expectedResult
list
)
)
:
                        
for
possibleResult
in
expectedResult
:
                            
if
(
possibleResult
=
=
result
)
:
                                
break
                        
else
:
                            
print
(
'
*
FAIL
:
"
'
+
test
[
0
]
+
'
"
got
:
"
'
+
unicode
(
result
)
+
'
"
expected
:
'
)
                            
print
(
"
or
\
n
"
.
join
(
[
'
"
'
+
possibleResult
+
'
"
'
for
possibleResult
in
expectedResult
]
)
)
                            
continue
                    
elif
(
not
expectedResult
)
:
                        
if
(
result
)
:
                            
print
(
'
*
FAIL
"
'
+
test
[
0
]
+
'
"
got
:
"
'
+
unicode
(
result
)
+
'
"
expected
None
'
)
                            
continue
                    
else
:
                        
print
(
'
*
*
Unknown
expected
result
type
:
'
+
repr
(
expectedResult
)
)
                    
print
(
'
PASS
:
"
'
+
test
[
0
]
+
'
"
=
=
"
'
+
result
+
'
"
'
)
def
debugHook
(
type
value
tb
)
:
    
if
hasattr
(
sys
'
ps1
'
)
or
not
sys
.
stderr
.
isatty
(
)
:
        
sys
.
__excepthook__
(
type
value
tb
)
    
else
:
        
import
traceback
pdb
        
traceback
.
print_exception
(
type
value
tb
)
        
print
(
)
        
pdb
.
pm
(
)
if
__name__
=
=
"
__main__
"
:
    
sys
.
excepthook
=
debugHook
    
github
=
apiclient
.
APIClient
(
'
https
:
/
/
api
.
github
.
com
/
'
version
=
'
vnd
.
github
.
beta
'
)
    
print
(
github
.
get
(
'
user_url
'
user
=
'
plinss
'
)
.
data
)
    
shepherd
=
apiclient
.
APIClient
(
'
https
:
/
/
test
.
linss
.
com
/
shepherd
/
api
'
version
=
'
vnd
.
csswg
.
shepherd
.
v1
'
)
    
print
(
shepherd
.
resourceNames
)
    
specs
=
shepherd
.
resource
(
'
specifications
'
)
    
print
(
specs
.
variables
)
    
print
(
shepherd
.
get
(
'
specifications
'
spec
=
'
compositing
-
1
'
anchors
=
False
)
.
data
)
    
suites
=
shepherd
.
resource
(
'
test_suites
'
)
    
print
(
suites
.
variables
)
    
print
(
shepherd
.
get
(
'
test_suites
'
spec
=
'
css
-
shapes
-
1
'
)
.
data
)
