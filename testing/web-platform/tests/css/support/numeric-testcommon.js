'
use
strict
'
;
function
test_math_used
(
testString
expectedString
{
base
=
"
123px
"
msg
prop
=
"
left
"
}
=
{
}
)
{
const
testEl
=
document
.
getElementById
(
'
target
'
)
;
if
(
testEl
=
=
null
)
throw
"
Couldn
'
t
find
#
target
element
to
run
tests
on
.
"
test
(
(
)
=
>
{
testEl
.
style
[
prop
]
=
base
;
testEl
.
style
[
prop
]
=
testString
;
const
usedValue
=
getComputedStyle
(
testEl
)
[
prop
]
;
assert_not_equals
(
usedValue
base
{
testString
}
isn
'
t
valid
in
'
{
prop
}
'
;
got
the
default
value
instead
.
)
;
testEl
.
style
[
prop
]
=
base
;
testEl
.
style
[
prop
]
=
expectedString
;
const
expectedValue
=
getComputedStyle
(
testEl
)
[
prop
]
;
assert_not_equals
(
expectedValue
base
{
testString
}
isn
'
t
valid
in
'
{
prop
}
'
;
got
the
default
value
instead
.
)
assert_equals
(
usedValue
expectedValue
{
testString
}
and
{
expectedString
}
serialize
to
the
same
thing
in
used
values
.
)
;
}
msg
|
|
{
testString
}
should
be
used
-
value
-
equivalent
to
{
expectedString
}
)
;
}
function
test_plus_infinity
(
testString
)
{
test_math_used
(
calc
(
1px
*
{
testString
}
)
"
calc
(
infinity
*
1px
)
"
)
;
}
function
test_minus_infinity
(
testString
)
{
test_math_used
(
calc
(
1px
*
{
testString
}
)
"
calc
(
-
infinity
*
1px
)
"
)
;
}
function
test_plus_zero
(
testString
)
{
test_math_used
(
calc
(
1px
/
{
testString
}
)
"
calc
(
infinity
*
1px
)
"
)
;
}
function
test_minus_zero
(
testString
)
{
test_math_used
(
calc
(
1px
/
{
testString
}
)
"
calc
(
-
infinity
*
1px
)
"
)
;
}
function
test_nan
(
testString
)
{
test_math_used
(
calc
(
1px
*
{
testString
}
)
"
calc
(
NaN
*
1px
)
"
)
;
test_math_used
(
calc
(
-
1px
*
{
testString
}
)
"
calc
(
NaN
*
1px
)
"
)
;
}
