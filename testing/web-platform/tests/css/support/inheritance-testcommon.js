'
use
strict
'
;
(
function
(
)
{
function
assert_initial
(
property
initial
)
{
let
initialDesc
=
initial
;
if
(
Array
.
isArray
(
initial
)
)
initialDesc
=
'
[
'
+
initial
.
map
(
e
=
>
"
'
"
+
e
+
"
'
"
)
.
join
(
'
or
'
)
+
'
]
'
;
test
(
(
)
=
>
{
const
target
=
document
.
getElementById
(
'
target
'
)
;
assert_own_property
(
getComputedStyle
(
target
)
property
)
;
target
.
style
[
property
]
=
'
initial
'
;
if
(
Array
.
isArray
(
initial
)
)
{
assert_in_array
(
getComputedStyle
(
target
)
[
property
]
initial
)
;
}
else
{
assert_equals
(
getComputedStyle
(
target
)
[
property
]
initial
)
;
}
target
.
style
[
property
]
=
'
'
;
}
'
Property
'
+
property
+
'
has
initial
value
'
+
initialDesc
)
;
}
function
assert_inherited
(
property
initial
other
)
{
assert_initial
(
property
initial
)
;
test
(
(
)
=
>
{
const
container
=
document
.
getElementById
(
'
container
'
)
;
const
target
=
document
.
getElementById
(
'
target
'
)
;
assert_own_property
(
getComputedStyle
(
target
)
property
)
;
container
.
style
[
property
]
=
'
initial
'
;
target
.
style
[
property
]
=
'
unset
'
;
assert_not_equals
(
getComputedStyle
(
container
)
[
property
]
other
)
;
assert_not_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
container
.
style
[
property
]
=
other
;
assert_equals
(
getComputedStyle
(
container
)
[
property
]
other
)
;
assert_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
target
.
style
[
property
]
=
'
initial
'
;
assert_equals
(
getComputedStyle
(
container
)
[
property
]
other
)
;
assert_not_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
target
.
style
[
property
]
=
'
inherit
'
;
assert_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
container
.
style
[
property
]
=
'
'
;
target
.
style
[
property
]
=
'
'
;
}
'
Property
'
+
property
+
'
inherits
'
)
;
}
function
assert_not_inherited
(
property
initial
other
)
{
assert_initial
(
property
initial
)
;
test
(
(
)
=
>
{
const
container
=
document
.
getElementById
(
'
container
'
)
;
const
target
=
document
.
getElementById
(
'
target
'
)
;
assert_own_property
(
getComputedStyle
(
target
)
property
)
;
container
.
style
[
property
]
=
'
initial
'
;
target
.
style
[
property
]
=
'
unset
'
;
assert_not_equals
(
getComputedStyle
(
container
)
[
property
]
other
)
;
assert_not_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
container
.
style
[
property
]
=
other
;
assert_equals
(
getComputedStyle
(
container
)
[
property
]
other
)
;
assert_not_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
target
.
style
[
property
]
=
'
inherit
'
;
assert_equals
(
getComputedStyle
(
target
)
[
property
]
other
)
;
container
.
style
[
property
]
=
'
'
;
target
.
style
[
property
]
=
'
'
;
}
'
Property
'
+
property
+
'
does
not
inherit
'
)
;
}
window
.
assert_inherited
=
assert_inherited
;
window
.
assert_not_inherited
=
assert_not_inherited
;
}
)
(
)
;
