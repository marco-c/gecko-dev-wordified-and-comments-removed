"
use
strict
"
;
function
test_specified_serialization
(
prop
t
e
)
{
const
el
=
document
.
querySelector
(
"
#
target
"
)
;
if
(
!
el
)
throw
new
Exception
(
"
Couldn
'
t
find
#
target
element
to
run
tests
on
.
"
)
;
test
(
(
)
=
>
{
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
t
;
const
tValue
=
el
.
style
[
prop
]
;
assert_not_equals
(
tValue
'
'
'
{
t
}
'
should
be
valid
in
{
prop
}
.
)
;
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
e
;
const
eValue
=
el
.
style
[
prop
]
;
assert_not_equals
(
eValue
'
'
'
{
e
}
'
should
be
valid
in
{
prop
}
.
)
;
assert_equals
(
eValue
e
'
{
e
}
'
should
round
-
trip
exactly
in
specified
values
.
)
;
assert_equals
(
tValue
e
'
{
t
}
'
and
'
{
e
}
'
should
serialize
the
same
in
specified
values
.
)
;
}
'
{
t
}
'
as
a
specified
value
should
serialize
as
'
{
e
}
'
.
)
;
}
function
test_computed_serialization
(
prop
t
e
)
{
const
el
=
document
.
querySelector
(
"
#
target
"
)
;
if
(
!
el
)
throw
new
Exception
(
"
Couldn
'
t
find
#
target
element
to
run
tests
on
.
"
)
;
test
(
(
)
=
>
{
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
t
;
const
tValue
=
getComputedStyle
(
el
)
[
prop
]
;
assert_not_equals
(
tValue
'
'
'
{
t
}
'
should
be
valid
in
{
prop
}
.
)
;
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
e
;
const
eValue
=
getComputedStyle
(
el
)
[
prop
]
;
assert_not_equals
(
eValue
'
'
'
{
e
}
'
should
be
valid
in
{
prop
}
.
)
;
assert_equals
(
eValue
e
'
{
e
}
'
should
round
-
trip
exactly
in
computed
values
.
)
;
assert_equals
(
tValue
e
'
{
t
}
'
and
'
{
e
}
'
should
serialize
the
same
in
computed
values
.
)
;
}
'
{
t
}
'
as
a
computed
value
should
serialize
as
'
{
e
}
'
.
)
;
}
function
test_used_serialization
(
prop
t
e
)
{
const
el
=
document
.
querySelector
(
"
#
target
"
)
;
if
(
!
el
)
throw
new
Exception
(
"
Couldn
'
t
find
#
target
element
to
run
tests
on
.
"
)
;
test
(
(
)
=
>
{
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
t
;
const
tValue
=
getComputedStyle
(
el
)
[
prop
]
;
assert_not_equals
(
tValue
'
'
'
{
t
}
'
should
be
valid
in
{
prop
}
.
)
;
el
.
style
[
prop
]
=
'
'
;
el
.
style
[
prop
]
=
e
;
const
eValue
=
getComputedStyle
(
el
)
[
prop
]
;
assert_not_equals
(
eValue
'
'
'
{
e
}
'
should
be
valid
in
{
prop
}
.
)
;
assert_equals
(
eValue
e
'
{
e
}
'
should
round
-
trip
exactly
in
used
values
.
)
;
assert_equals
(
tValue
e
'
{
t
}
'
and
'
{
e
}
'
should
serialize
the
same
in
used
values
.
)
;
}
'
{
t
}
'
as
a
used
value
should
serialize
as
'
{
e
}
'
.
)
;
}
