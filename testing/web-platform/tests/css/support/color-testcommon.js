'
use
strict
'
;
function
set_up_fuzzy_color_test
(
epsilon
)
{
if
(
!
epsilon
)
{
epsilon
=
0
.
0001
;
}
function
fuzzy_compare_colors
(
color1
color2
)
{
const
colorElementDividers
=
/
(
|
\
(
|
)
/
;
function
getNonNumbers
(
color
)
{
return
color
.
replace
(
/
[
0
-
9
]
/
g
'
'
)
;
}
function
getNumbers
(
color
)
{
const
result
=
[
]
;
color
.
split
(
colorElementDividers
)
.
forEach
(
element
=
>
{
const
numberElement
=
parseFloat
(
element
)
;
if
(
!
isNaN
(
numberElement
)
)
{
result
.
push
(
numberElement
)
;
}
}
)
;
return
result
;
}
assert_array_approx_equals
(
getNumbers
(
color1
)
getNumbers
(
color2
)
epsilon
"
Numeric
parameters
are
approximately
equal
.
"
)
;
assert_equals
(
getNonNumbers
(
color1
)
getNonNumbers
(
color2
)
"
Color
format
is
correct
.
"
)
;
}
return
fuzzy_compare_colors
;
}
function
fuzzy_test_computed_color
(
specified
computed
epsilon
)
{
if
(
!
computed
)
{
test_computed_value
(
"
color
"
specified
)
;
return
;
}
test_computed_value
(
"
color
"
specified
computed
undefined
{
comparisonFunction
:
set_up_fuzzy_color_test
(
epsilon
)
}
)
;
}
function
fuzzy_test_valid_color
(
specified
parsed
epsilon
)
{
if
(
!
parsed
)
{
test_valid_value
(
"
color
"
specified
)
;
return
;
}
test_valid_value
(
"
color
"
specified
parsed
{
comparisonFunction
:
set_up_fuzzy_color_test
(
epsilon
)
}
)
;
}
