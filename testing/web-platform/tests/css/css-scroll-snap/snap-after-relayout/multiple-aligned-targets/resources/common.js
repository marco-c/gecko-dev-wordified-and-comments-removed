async
function
scrollToAlignedElementsInAxis
(
scroller
elements
axis
)
{
let
target_offset_y
=
null
;
let
target_offset_x
=
null
;
if
(
axis
=
=
"
y
"
)
{
for
(
const
e
of
elements
)
{
if
(
target_offset_y
)
{
assert_equals
(
e
.
offsetTop
target_offset_y
{
e
.
id
}
is
at
y
offset
{
target_offset_y
}
)
;
}
else
{
target_offset_y
=
e
.
offsetTop
;
}
}
assert_equals
(
)
;
}
else
{
for
(
const
e
of
elements
)
{
if
(
target_offset_x
)
{
assert_equals
(
e
.
offsetLeft
target_offset_x
{
e
.
id
}
is
at
x
offset
{
target_offset_x
}
)
;
}
else
{
target_offset_x
=
e
.
offsetLeft
;
}
}
}
assert_not_equals
(
target_offset_x
|
|
target_offset_y
null
)
;
const
scrollend_promise
=
waitForScrollendEventNoTimeout
(
scroller
)
;
await
new
test_driver
.
Actions
(
)
.
scroll
(
0
0
(
target_offset_x
|
|
0
)
-
scroller
.
scrollLeft
(
target_offset_y
|
|
0
)
-
scroller
.
scrollTop
{
origin
:
scroller
}
)
.
send
(
)
;
await
scrollend_promise
;
if
(
axis
=
=
"
y
"
)
{
assert_equals
(
scroller
.
scrollTop
target_offset_y
"
vertical
scroll
done
"
)
;
}
else
{
assert_equals
(
scroller
.
scrollLeft
target_offset_x
"
horizontal
scroll
done
"
)
;
}
}
function
verifySelectedSnapTarget
(
scroller
expected_snap_target
axis
)
{
const
initial_left
=
getComputedStyle
(
expected_snap_target
)
.
left
;
const
initial_top
=
getComputedStyle
(
expected_snap_target
)
.
top
;
if
(
axis
=
=
"
y
"
)
{
const
initial_scroll_top
=
scroller
.
scrollTop
;
const
target_top
=
expected_snap_target
.
offsetTop
+
100
;
expected_snap_target
.
style
.
top
=
{
target_top
}
px
;
assert_equals
(
scroller
.
scrollTop
expected_snap_target
.
offsetTop
scroller
followed
{
expected_snap_target
.
id
}
after
layout
change
)
;
assert_not_equals
(
scroller
.
scrollTop
initial_scroll_top
"
scroller
actually
scrolled
in
y
axis
"
)
;
}
else
{
const
initial_scroll_left
=
scroller
.
scrollLeft
;
const
target_left
=
expected_snap_target
.
offsetLeft
+
100
;
expected_snap_target
.
style
.
left
=
{
target_left
}
px
;
assert_equals
(
scroller
.
scrollLeft
expected_snap_target
.
offsetLeft
scroller
followed
{
expected_snap_target
.
id
}
after
layout
change
)
;
assert_not_equals
(
scroller
.
scrollLeft
initial_scroll_left
"
scroller
actually
scrolled
in
x
axis
"
)
;
}
expected_snap_target
.
style
.
top
=
initial_top
;
expected_snap_target
.
style
.
left
=
initial_left
;
}
async
function
runScrollSnapSelectionVerificationTest
(
t
scroller
aligned_elements
expected_target
axis
)
{
const
initial_scroll_left
=
scroller
.
scrollLeft
;
const
initial_scroll_top
=
scroller
.
scrollTop
;
await
scrollToAlignedElementsInAxis
(
scroller
aligned_elements
axis
)
;
verifySelectedSnapTarget
(
scroller
expected_target
axis
)
;
const
scrollend_promise
=
new
Promise
(
(
resolve
)
=
>
{
scroller
.
addEventListener
(
"
scrollend
"
resolve
)
;
}
)
;
scroller
.
scrollTo
(
initial_scroll_left
initial_scroll_top
)
;
await
scrollend_promise
;
}
function
shiftLayoutToAlignElements
(
elements
target
axis
)
{
for
(
let
element
of
elements
)
{
if
(
axis
=
=
"
y
"
)
{
element
.
style
.
top
=
{
target
.
offsetTop
}
px
;
}
else
{
element
.
style
.
left
=
{
target
.
offsetLeft
}
px
;
}
}
}
async
function
runLayoutSnapSeletionVerificationTest
(
t
scroller
elements_to_align
expected_target
axis
)
{
const
initial_scroll_left
=
scroller
.
scrollLeft
;
const
initial_scroll_top
=
scroller
.
scrollTop
;
let
initial_tops
=
[
]
;
for
(
const
element
of
elements_to_align
)
{
initial_tops
.
push
(
getComputedStyle
(
element
)
.
top
)
;
}
shiftLayoutToAlignElements
(
elements_to_align
expected_target
axis
)
;
verifySelectedSnapTarget
(
scroller
expected_target
axis
)
;
let
num_elements
=
initial_tops
.
length
;
for
(
let
i
=
0
;
i
<
num_elements
;
i
+
+
)
{
elements_to_align
[
i
]
.
style
.
top
=
initial_tops
[
i
]
;
}
const
scrollend_promise
=
new
Promise
(
(
resolve
)
=
>
{
scroller
.
addEventListener
(
"
scrollend
"
resolve
)
;
}
)
;
scroller
.
scrollTo
(
initial_scroll_left
initial_scroll_top
)
;
await
scrollend_promise
;
}
function
focusAndAssert
(
element
preventScroll
=
false
)
{
element
.
focus
(
{
preventScroll
:
preventScroll
}
)
;
assert_equals
(
document
.
activeElement
element
)
;
}
