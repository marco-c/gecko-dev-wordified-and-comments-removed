const
KEY_CODE_MAP
=
{
'
ArrowLeft
'
:
'
\
uE012
'
'
ArrowUp
'
:
'
\
uE013
'
'
ArrowRight
'
:
'
\
uE014
'
'
ArrowDown
'
:
'
\
uE015
'
'
PageUp
'
:
'
\
uE00E
'
'
PageDown
'
:
'
\
uE00F
'
'
End
'
:
'
\
uE010
'
'
Home
'
:
'
\
uE011
'
'
Space
'
:
'
'
}
;
async
function
keyPress
(
target
key
)
{
let
code
=
key
;
if
(
KEY_CODE_MAP
.
hasOwnProperty
(
key
)
)
code
=
KEY_CODE_MAP
[
key
]
;
return
test_driver
.
send_keys
(
target
code
)
;
}
function
waitForAnimationEnd
(
getValue
)
{
const
TIMEOUT
=
1000
;
const
MAX_UNCHANGED_FRAMES
=
15
;
const
start_time
=
performance
.
now
(
)
;
let
last_changed_frame
=
0
;
let
last_value
=
getValue
(
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
tick
(
frames
time
)
{
if
(
time
-
start_time
>
TIMEOUT
|
|
frames
-
last_changed_frame
>
=
MAX_UNCHANGED_FRAMES
)
{
resolve
(
)
;
}
else
{
current_value
=
getValue
(
)
;
if
(
last_value
!
=
current_value
)
{
last_changed_frame
=
frames
;
last_value
=
current_value
;
}
requestAnimationFrame
(
tick
.
bind
(
this
frames
+
1
)
)
;
}
}
tick
(
0
start_time
)
;
}
)
;
}
function
waitForScrollEvent
(
eventTarget
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
scrollListener
=
(
)
=
>
{
eventTarget
.
removeEventListener
(
'
scroll
'
scrollListener
)
;
resolve
(
)
;
}
;
eventTarget
.
addEventListener
(
'
scroll
'
scrollListener
)
;
}
)
;
}
function
waitForScrollEnd
(
eventTarget
getValue
targetValue
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
scrollListener
=
(
)
=
>
{
if
(
getValue
(
)
=
=
targetValue
)
{
eventTarget
.
removeEventListener
(
'
scroll
'
scrollListener
)
;
resolve
(
)
;
}
}
;
if
(
getValue
(
)
=
=
targetValue
)
resolve
(
)
;
else
eventTarget
.
addEventListener
(
'
scroll
'
scrollListener
)
;
}
)
;
}
