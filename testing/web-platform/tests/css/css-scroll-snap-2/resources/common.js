function
checkSnapEventSupport
(
event_type
)
{
if
(
event_type
=
=
"
snapchanged
"
)
{
assert_true
(
window
.
onsnapchanged
!
=
=
undefined
"
snapchanged
not
supported
"
)
;
}
else
if
(
event_type
=
=
"
snapchanging
"
)
{
assert_true
(
window
.
onsnapchanging
!
=
=
undefined
"
snapchanging
not
supported
"
)
;
}
else
{
assert_unreached
(
Unknown
snap
event
type
selected
:
{
event_type
}
)
;
}
}
function
assertSnapEvent
(
evt
expected_ids
)
{
assert_equals
(
evt
.
bubbles
false
"
snap
events
don
'
t
bubble
"
)
;
assert_false
(
evt
.
cancelable
"
snap
events
are
not
cancelable
.
"
)
;
const
actual
=
Array
.
from
(
evt
.
snapTargets
el
=
>
el
.
id
)
.
join
(
"
"
)
;
const
expected
=
expected_ids
.
join
(
"
"
)
;
assert_equals
(
actual
expected
"
snap
event
supplied
expected
targets
"
)
;
}
async
function
test_snap_event
(
test
test_data
event_type
)
{
checkSnapEventSupport
(
event_type
)
;
await
waitForScrollReset
(
test
test_data
.
scroller
)
;
let
listener
=
test_data
.
scroller
=
=
document
.
scrollingElement
?
document
:
test_data
.
scroller
;
const
event_promise
=
waitForSnapEvent
(
listener
event_type
)
;
await
test_data
.
scrolling_function
(
)
;
let
evt
=
await
event_promise
;
assertSnapEvent
(
evt
test_data
.
expected_snap_targets
)
;
assert_approx_equals
(
test_data
.
scroller
.
scrollTop
test_data
.
expected_scroll_offsets
.
y
1
"
vertical
scroll
offset
mismatch
.
"
)
;
assert_approx_equals
(
test_data
.
scroller
.
scrollLeft
test_data
.
expected_scroll_offsets
.
x
1
"
horizontal
scroll
offset
mismatch
.
"
)
;
}
async
function
test_snapchanged
(
test
test_data
)
{
await
test_snap_event
(
test
test_data
"
snapchanged
"
)
;
}
function
waitForEventUntil
(
event_target
event_type
wait_until
)
{
return
new
Promise
(
resolve
=
>
{
let
result
=
null
;
const
listener
=
(
evt
)
=
>
{
result
=
evt
;
}
;
event_target
.
addEventListener
(
event_type
listener
)
;
wait_until
.
then
(
(
)
=
>
{
event_target
.
removeEventListener
(
event_type
listener
)
;
resolve
(
result
)
;
}
)
;
}
)
;
}
function
waitForSnapEvent
(
event_target
event_type
scroll_happens
=
true
)
{
return
scroll_happens
?
waitForEventUntil
(
event_target
event_type
waitForScrollendEventNoTimeout
(
event_target
)
)
:
waitForEventUntil
(
event_target
event_type
waitForAnimationFrames
(
2
)
)
;
}
function
waitForSnapChangedEvent
(
event_target
scroll_happens
=
true
)
{
return
waitForSnapEvent
(
event_target
"
snapchanged
"
scroll_happens
)
;
}
function
getScrollbarToScrollerRatio
(
scroller
)
{
return
scroller
.
clientHeight
/
(
scroller
.
scrollHeight
-
scroller
.
clientHeight
)
;
}
