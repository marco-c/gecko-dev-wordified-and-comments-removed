(
function
(
root
)
{
'
use
strict
'
;
root
.
setStyle
=
function
(
selector
styles
)
{
var
target
=
document
.
getElementById
(
'
dynamic
-
style
'
)
;
if
(
!
target
)
{
target
=
document
.
createElement
(
'
style
'
)
;
target
.
id
=
'
dynamic
-
style
'
;
target
.
type
=
"
text
/
css
"
;
document
.
getElementsByTagName
(
'
head
'
)
[
0
]
.
appendChild
(
target
)
;
}
var
data
=
[
]
;
if
(
typeof
selector
=
=
=
'
string
'
&
&
styles
!
=
=
undefined
)
{
data
=
[
selector
'
{
'
serializeStyles
(
styles
)
'
}
'
]
;
target
.
textContent
=
data
.
join
(
"
\
n
"
)
;
return
;
}
for
(
var
key
in
selector
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
selector
key
)
)
{
var
_data
=
[
key
'
{
'
serializeStyles
(
selector
[
key
]
)
'
}
'
]
;
data
.
push
(
_data
.
join
(
'
\
n
'
)
)
;
}
}
target
.
textContent
=
data
.
join
(
"
\
n
"
)
;
}
;
function
serializeStyles
(
styles
)
{
var
data
=
[
]
;
for
(
var
property
in
styles
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
styles
property
)
)
{
var
prefixedProperty
=
addVendorPrefix
(
property
)
;
data
.
push
(
prefixedProperty
+
"
:
"
+
styles
[
property
]
+
"
;
"
)
;
}
}
return
data
.
join
(
'
\
n
'
)
;
}
root
.
computedStyle
=
function
(
element
property
pseudo
)
{
var
prefixedProperty
=
addVendorPrefix
(
property
)
;
return
window
.
getComputedStyle
(
element
pseudo
|
|
null
)
.
getPropertyValue
(
prefixedProperty
)
;
}
;
root
.
reflow
=
function
(
)
{
document
.
body
.
offsetWidth
;
}
;
root
.
extend
=
function
(
target
)
{
Array
.
prototype
.
slice
.
call
(
arguments
1
)
.
forEach
(
function
(
obj
)
{
Object
.
keys
(
obj
)
.
forEach
(
function
(
key
)
{
target
[
key
]
=
obj
[
key
]
;
}
)
;
}
)
;
return
target
;
}
;
var
_domFixture
;
var
_domFixtureSelector
;
root
.
domFixture
=
function
(
selector
)
{
var
fixture
=
document
.
querySelector
(
selector
|
|
_domFixtureSelector
)
;
if
(
!
fixture
)
{
throw
new
Error
(
'
fixture
'
+
(
selector
|
|
_domFixtureSelector
)
+
'
not
found
!
'
)
;
}
if
(
!
_domFixture
&
&
selector
)
{
_domFixture
=
fixture
.
cloneNode
(
true
)
;
_domFixtureSelector
=
selector
;
}
else
if
(
_domFixture
)
{
var
tmp
=
_domFixture
.
cloneNode
(
true
)
;
fixture
.
parentNode
.
replaceChild
(
tmp
fixture
)
;
}
else
{
throw
new
Error
(
'
domFixture
must
be
initialized
first
!
'
)
;
}
}
;
}
)
(
window
)
;
