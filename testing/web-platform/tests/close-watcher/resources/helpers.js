window
.
createRecordingCloseWatcher
=
(
t
events
name
type
parent
)
=
>
{
let
watcher
=
null
;
if
(
type
=
=
=
'
dialog
'
)
{
watcher
=
document
.
createElement
(
'
dialog
'
)
;
watcher
.
textContent
=
'
hello
world
'
;
t
.
add_cleanup
(
(
)
=
>
watcher
.
remove
(
)
)
;
if
(
parent
)
{
parent
.
appendChild
(
watcher
)
;
}
else
{
document
.
body
.
appendChild
(
watcher
)
;
}
watcher
.
showModal
(
)
;
}
else
if
(
type
=
=
=
'
popover
'
)
{
watcher
=
document
.
createElement
(
'
div
'
)
;
watcher
.
setAttribute
(
'
popover
'
'
auto
'
)
;
watcher
.
textContent
=
'
hello
world
'
;
t
.
add_cleanup
(
(
)
=
>
watcher
.
remove
(
)
)
;
if
(
parent
)
{
parent
.
appendChild
(
watcher
)
;
}
else
{
document
.
body
.
appendChild
(
watcher
)
;
}
watcher
.
showPopover
(
)
;
}
else
{
watcher
=
new
CloseWatcher
(
)
;
t
.
add_cleanup
(
(
)
=
>
watcher
.
destroy
(
)
)
;
}
const
prefix
=
name
=
=
=
undefined
?
"
"
:
name
+
"
"
;
watcher
.
addEventListener
(
'
cancel
'
(
)
=
>
events
.
push
(
prefix
+
"
cancel
"
)
)
;
watcher
.
addEventListener
(
'
close
'
(
)
=
>
events
.
push
(
prefix
+
"
close
"
)
)
;
return
watcher
;
}
;
window
.
createBlessedRecordingCloseWatcher
=
async
(
t
events
name
type
dialog
)
=
>
{
return
dialogResilientBless
(
dialog
(
)
=
>
createRecordingCloseWatcher
(
t
events
name
type
dialog
)
)
;
}
;
window
.
sendEscKey
=
(
)
=
>
{
return
test_driver
.
send_keys
(
document
.
body
'
\
uE00C
'
)
;
}
;
window
.
sendCloseRequest
=
window
.
sendEscKey
;
window
.
dialogResilientBless
=
async
(
watcher
fn
)
=
>
{
if
(
watcher
instanceof
HTMLElement
)
{
const
button
=
document
.
createElement
(
'
button
'
)
;
watcher
.
appendChild
(
button
)
;
await
test_driver
.
click
(
button
)
;
button
.
remove
(
)
;
if
(
typeof
fn
=
=
=
'
function
'
)
{
return
fn
(
)
;
}
else
{
return
null
;
}
}
else
{
return
await
test_driver
.
bless
(
'
dialogResilientBless
'
fn
)
;
}
}
;
