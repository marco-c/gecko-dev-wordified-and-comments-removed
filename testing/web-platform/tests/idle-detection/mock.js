class
FakeIdleMonitor
{
addMonitor
(
threshold
monitorPtr
callback
)
{
return
this
.
handler
.
addMonitor
(
threshold
monitorPtr
)
;
}
setHandler
(
handler
)
{
this
.
handler
=
handler
;
return
this
;
}
setBinding
(
binding
)
{
this
.
binding
=
binding
;
return
this
;
}
close
(
)
{
this
.
binding
.
close
(
)
;
}
}
const
UserIdleState
=
{
}
;
const
ScreenIdleState
=
{
}
;
function
addMonitor
(
threshold
monitorPtr
callback
)
{
throw
new
Error
(
"
expected
to
be
overriden
by
tests
"
)
;
}
async
function
close
(
)
{
interceptor
.
close
(
)
;
}
function
expect
(
call
)
{
return
{
andReturn
(
callback
)
{
let
handler
=
{
}
;
handler
[
call
.
name
]
=
callback
;
interceptor
.
setHandler
(
handler
)
;
}
}
}
function
intercept
(
)
{
let
result
=
new
FakeIdleMonitor
(
)
;
let
binding
=
new
mojo
.
Binding
(
blink
.
mojom
.
IdleManager
result
)
;
let
interceptor
=
new
MojoInterfaceInterceptor
(
blink
.
mojom
.
IdleManager
.
name
"
context
"
true
)
;
interceptor
.
oninterfacerequest
=
(
e
)
=
>
{
binding
.
bind
(
e
.
handle
)
;
}
interceptor
.
start
(
)
;
UserIdleState
.
ACTIVE
=
blink
.
mojom
.
UserIdleState
.
kActive
;
UserIdleState
.
IDLE
=
blink
.
mojom
.
UserIdleState
.
kIdle
;
ScreenIdleState
.
LOCKED
=
blink
.
mojom
.
ScreenIdleState
.
kLocked
;
ScreenIdleState
.
UNLOCKED
=
blink
.
mojom
.
ScreenIdleState
.
kUnlocked
;
result
.
setBinding
(
binding
)
;
return
result
;
}
const
interceptor
=
intercept
(
)
;
