'
use
strict
'
;
(
(
)
=
>
{
if
(
isChromiumBased
)
{
loadScript
(
'
/
resources
/
chromium
/
webusb
-
child
-
test
.
js
'
)
;
}
}
)
(
)
;
async
function
loadChromiumResources
(
)
{
const
chromiumResources
=
[
'
/
gen
/
mojo
/
public
/
mojom
/
base
/
big_buffer
.
mojom
.
js
'
'
/
gen
/
mojo
/
public
/
mojom
/
base
/
string16
.
mojom
.
js
'
'
/
gen
/
url
/
mojom
/
url
.
mojom
.
js
'
'
/
gen
/
services
/
device
/
public
/
mojom
/
usb_device
.
mojom
.
js
'
'
/
gen
/
services
/
device
/
public
/
mojom
/
usb_enumeration_options
.
mojom
.
js
'
'
/
gen
/
services
/
device
/
public
/
mojom
/
usb_manager_client
.
mojom
.
js
'
'
/
gen
/
third_party
/
blink
/
public
/
mojom
/
usb
/
web_usb_service
.
mojom
.
js
'
]
;
await
loadMojoResources
(
chromiumResources
)
;
}
function
usb_test
(
func
name
properties
)
{
promise_test
(
async
(
)
=
>
{
assert_implements
(
navigator
.
usb
'
missing
navigator
.
usb
'
)
;
if
(
navigator
.
usb
.
test
=
=
=
undefined
)
{
if
(
isChromiumBased
)
{
await
loadChromiumResources
(
)
;
await
loadScript
(
'
/
resources
/
chromium
/
webusb
-
test
.
js
'
)
;
}
}
assert_implements
(
navigator
.
usb
.
test
'
missing
navigator
.
usb
.
test
after
initialization
'
)
;
await
navigator
.
usb
.
test
.
initialize
(
)
;
try
{
await
func
(
)
;
}
finally
{
await
navigator
.
usb
.
test
.
reset
(
)
;
}
}
name
properties
)
;
}
function
connectionEventPromise
(
eventType
)
{
return
new
Promise
(
resolve
=
>
{
let
eventHandler
=
e
=
>
{
assert_true
(
e
instanceof
USBConnectionEvent
)
;
navigator
.
usb
.
removeEventListener
(
eventType
eventHandler
)
;
resolve
(
e
.
device
)
;
}
;
navigator
.
usb
.
addEventListener
(
eventType
eventHandler
)
;
}
)
;
}
function
getFakeDevice
(
)
{
let
promise
=
connectionEventPromise
(
'
connect
'
)
;
let
fakeDevice
=
navigator
.
usb
.
test
.
addFakeDevice
(
fakeDeviceInit
)
;
return
promise
.
then
(
device
=
>
{
return
{
device
:
device
fakeDevice
:
fakeDevice
}
;
}
)
;
}
function
waitForDisconnect
(
fakeDevice
)
{
let
promise
=
connectionEventPromise
(
'
disconnect
'
)
;
fakeDevice
.
disconnect
(
)
;
return
promise
;
}
function
assertRejectsWithError
(
promise
name
message
)
{
return
promise
.
then
(
(
)
=
>
{
assert_unreached
(
'
expected
promise
to
reject
with
'
+
name
)
;
}
error
=
>
{
assert_equals
(
error
.
name
name
)
;
if
(
message
!
=
=
undefined
)
assert_equals
(
error
.
message
message
)
;
}
)
;
}
function
assertDeviceInfoEquals
(
usbDevice
deviceInit
)
{
for
(
var
property
in
deviceInit
)
{
if
(
property
=
=
'
activeConfigurationValue
'
)
{
if
(
deviceInit
.
activeConfigurationValue
=
=
0
)
{
assert_equals
(
usbDevice
.
configuration
null
)
;
}
else
{
assert_equals
(
usbDevice
.
configuration
.
configurationValue
deviceInit
.
activeConfigurationValue
)
;
}
}
else
if
(
Array
.
isArray
(
deviceInit
[
property
]
)
)
{
assert_equals
(
usbDevice
[
property
]
.
length
deviceInit
[
property
]
.
length
)
;
for
(
var
i
=
0
;
i
<
usbDevice
[
property
]
.
length
;
+
+
i
)
assertDeviceInfoEquals
(
usbDevice
[
property
]
[
i
]
deviceInit
[
property
]
[
i
]
)
;
}
else
{
assert_equals
(
usbDevice
[
property
]
deviceInit
[
property
]
property
)
;
}
}
}
function
callWithTrustedClick
(
callback
)
{
return
new
Promise
(
resolve
=
>
{
let
button
=
document
.
createElement
(
'
button
'
)
;
button
.
textContent
=
'
click
to
continue
test
'
;
button
.
style
.
display
=
'
block
'
;
button
.
style
.
fontSize
=
'
20px
'
;
button
.
style
.
padding
=
'
10px
'
;
button
.
onclick
=
(
)
=
>
{
resolve
(
callback
(
)
)
;
document
.
body
.
removeChild
(
button
)
;
}
;
document
.
body
.
appendChild
(
button
)
;
test_driver
.
click
(
button
)
;
}
)
;
}
