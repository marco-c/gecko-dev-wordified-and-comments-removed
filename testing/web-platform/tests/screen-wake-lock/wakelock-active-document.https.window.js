function
getWakeLockObject
(
iframe
url
)
{
return
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
(
)
=
>
{
const
{
wakeLock
}
=
iframe
.
contentWindow
.
navigator
;
resolve
(
wakeLock
)
;
}
{
once
:
true
}
)
;
iframe
.
src
=
url
;
}
)
;
}
promise_test
(
async
t
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
document
.
body
.
appendChild
(
iframe
)
;
const
wakeLock1
=
await
getWakeLockObject
(
iframe
"
/
screen
-
wake
-
lock
/
resources
/
page1
.
html
"
)
;
const
frameDOMException1
=
iframe
.
contentWindow
.
DOMException
;
const
wakeLock2
=
await
getWakeLockObject
(
iframe
"
/
screen
-
wake
-
lock
/
resources
/
page2
.
html
"
)
;
await
promise_rejects_dom
(
t
"
NotAllowedError
"
frameDOMException1
wakeLock1
.
request
(
'
screen
'
)
"
Inactive
document
so
must
throw
NotAllowedError
"
)
;
iframe
.
remove
(
)
;
}
"
navigator
.
wakeLock
.
request
(
)
aborts
if
the
document
is
not
active
.
"
)
;
promise_test
(
async
t
=
>
{
const
outerIframe
=
document
.
createElement
(
"
iframe
"
)
;
document
.
body
.
appendChild
(
outerIframe
)
;
await
getWakeLockObject
(
outerIframe
"
/
screen
-
wake
-
lock
/
resources
/
page1
.
html
"
)
;
const
innerIframe
=
outerIframe
.
contentDocument
.
createElement
(
"
iframe
"
)
;
outerIframe
.
contentDocument
.
body
.
appendChild
(
innerIframe
)
;
const
wakeLock
=
await
getWakeLockObject
(
innerIframe
"
/
screen
-
wake
-
lock
/
resources
/
page2
.
html
"
)
;
const
innerIframeDOMException
=
innerIframe
.
contentWindow
.
DOMException
;
await
new
Promise
(
resolve
=
>
{
outerIframe
.
addEventListener
(
"
load
"
resolve
)
;
outerIframe
.
src
=
"
/
screen
-
wake
-
lock
/
resources
/
page2
.
html
"
;
}
)
;
await
promise_rejects_dom
(
t
"
NotAllowedError
"
innerIframeDOMException
wakeLock
.
request
(
'
screen
'
)
"
Active
but
not
fully
active
so
must
throw
NotAllowedError
"
)
;
outerIframe
.
remove
(
)
;
}
"
navigator
.
wakeLock
.
request
(
)
aborts
if
the
document
is
active
but
not
fully
active
.
"
)
;
