'
use
strict
'
;
const
kPath
=
location
.
pathname
.
replace
(
/
[
^
/
]
+
/
'
'
)
;
const
kHasDocument
=
typeof
document
!
=
=
'
undefined
'
;
const
kIsUnsecured
=
location
.
protocol
!
=
=
'
https
:
'
;
const
kCookieHelperCgi
=
'
resources
/
cookie_helper
.
py
'
;
async
function
getCookieString
(
.
.
.
args
)
{
const
cookies
=
await
cookieStore
.
getAll
(
.
.
.
args
)
;
return
cookies
.
length
?
cookies
.
map
(
(
{
name
value
}
)
=
>
(
name
?
(
name
+
'
=
'
)
:
'
'
)
+
value
)
.
join
(
'
;
'
)
:
undefined
;
}
async
function
getCookieStringHttp
(
extraPath
=
null
)
{
const
url
=
kCookieHelperCgi
+
(
(
extraPath
=
=
null
)
?
'
'
:
(
'
/
'
+
extraPath
)
)
;
const
response
=
await
fetch
(
url
{
credentials
:
'
include
'
}
)
;
const
text
=
await
response
.
text
(
)
;
assert_equals
(
response
.
ok
true
'
CGI
should
have
succeeded
in
getCookieStringHttp
\
n
'
+
text
)
;
assert_equals
(
response
.
headers
.
get
(
'
content
-
type
'
)
'
text
/
plain
;
charset
=
utf
-
8
'
'
CGI
did
not
return
UTF
-
8
text
in
getCookieStringHttp
'
)
;
if
(
text
=
=
=
'
'
)
return
undefined
;
assert_equals
(
text
.
indexOf
(
'
cookie
=
'
)
0
'
CGI
response
did
not
begin
with
"
cookie
=
"
and
was
not
empty
:
'
+
text
)
;
return
decodeURIComponent
(
text
.
replace
(
/
^
cookie
=
/
'
'
)
)
;
}
async
function
getCookieBinaryHttp
(
extraPath
=
null
)
{
const
url
=
kCookieHelperCgi
+
(
(
extraPath
=
=
null
)
?
'
'
:
(
'
/
'
+
extraPath
)
)
+
'
?
charset
=
iso
-
8859
-
1
'
;
const
response
=
await
fetch
(
url
{
credentials
:
'
include
'
}
)
;
const
text
=
await
response
.
text
(
)
;
assert_equals
(
response
.
ok
true
'
CGI
should
have
succeeded
in
getCookieBinaryHttp
\
n
'
+
text
)
;
assert_equals
(
response
.
headers
.
get
(
'
content
-
type
'
)
'
text
/
plain
;
charset
=
iso
-
8859
-
1
'
'
CGI
did
not
return
ISO
8859
-
1
text
in
getCookieBinaryHttp
'
)
;
if
(
text
=
=
=
'
'
)
return
undefined
;
assert_equals
(
text
.
indexOf
(
'
cookie
=
'
)
0
'
CGI
response
did
not
begin
with
"
cookie
=
"
and
was
not
empty
:
'
+
text
)
;
return
unescape
(
text
.
replace
(
/
^
cookie
=
/
'
'
)
)
;
}
async
function
setCookieStringHttp
(
setCookie
)
{
const
encodedSetCookie
=
encodeURIComponent
(
setCookie
)
;
const
url
=
kCookieHelperCgi
;
const
headers
=
new
Headers
(
)
;
headers
.
set
(
'
content
-
type
'
'
application
/
x
-
www
-
form
-
urlencoded
;
charset
=
utf
-
8
'
)
;
const
response
=
await
fetch
(
url
{
credentials
:
'
include
'
method
:
'
POST
'
headers
:
headers
body
:
'
set
-
cookie
=
'
+
encodedSetCookie
}
)
;
const
text
=
await
response
.
text
(
)
;
assert_equals
(
response
.
ok
true
'
CGI
should
have
succeeded
in
setCookieStringHttp
set
-
cookie
:
'
+
setCookie
+
'
\
n
'
+
text
)
;
assert_equals
(
response
.
headers
.
get
(
'
content
-
type
'
)
'
text
/
plain
;
charset
=
utf
-
8
'
'
CGI
did
not
return
UTF
-
8
text
in
setCookieStringHttp
'
)
;
assert_equals
(
text
'
set
-
cookie
=
'
+
encodedSetCookie
'
CGI
did
not
faithfully
echo
the
set
-
cookie
value
'
)
;
}
async
function
setCookieBinaryHttp
(
setCookie
)
{
const
encodedSetCookie
=
escape
(
setCookie
)
.
split
(
'
/
'
)
.
join
(
'
%
2F
'
)
;
const
url
=
kCookieHelperCgi
+
'
?
charset
=
iso
-
8859
-
1
'
;
const
headers
=
new
Headers
(
)
;
headers
.
set
(
'
content
-
type
'
'
application
/
x
-
www
-
form
-
urlencoded
;
charset
=
iso
-
8859
-
1
'
)
;
const
response
=
await
fetch
(
url
{
credentials
:
'
include
'
method
:
'
POST
'
headers
:
headers
body
:
'
set
-
cookie
=
'
+
encodedSetCookie
}
)
;
const
text
=
await
response
.
text
(
)
;
assert_equals
(
response
.
ok
true
'
CGI
should
have
succeeded
in
setCookieBinaryHttp
set
-
cookie
:
'
+
setCookie
+
'
\
n
'
+
text
)
;
assert_equals
(
response
.
headers
.
get
(
'
content
-
type
'
)
'
text
/
plain
;
charset
=
iso
-
8859
-
1
'
'
CGI
did
not
return
Latin
-
1
text
in
setCookieBinaryHttp
'
)
;
assert_equals
(
text
'
set
-
cookie
=
'
+
encodedSetCookie
'
CGI
did
not
faithfully
echo
the
set
-
cookie
value
'
)
;
}
async
function
getCookieStringDocument
(
)
{
if
(
!
kHasDocument
)
throw
'
document
.
cookie
not
available
in
this
context
'
;
return
String
(
document
.
cookie
|
|
'
'
)
|
|
undefined
;
}
async
function
setCookieStringDocument
(
setCookie
)
{
if
(
!
kHasDocument
)
throw
'
document
.
cookie
not
available
in
this
context
'
;
document
.
cookie
=
setCookie
;
}
function
observeNextCookieChangeEvent
(
)
{
return
new
Promise
(
resolve
=
>
{
cookieStore
.
addEventListener
(
'
change
'
e
=
>
resolve
(
e
)
{
once
:
true
}
)
;
}
)
;
}
async
function
verifyCookieChangeEvent
(
eventPromise
expected
description
)
{
description
=
description
?
description
+
'
:
'
:
'
'
;
expected
=
Object
.
assign
(
{
changed
:
[
]
deleted
:
[
]
}
expected
)
;
const
event
=
await
eventPromise
;
assert_equals
(
event
.
changed
.
length
expected
.
changed
.
length
description
+
'
number
of
changed
cookies
'
)
;
for
(
let
i
=
0
;
i
<
event
.
changed
.
length
;
+
+
i
)
{
assert_equals
(
event
.
changed
[
i
]
.
name
expected
.
changed
[
i
]
.
name
description
+
'
changed
cookie
name
'
)
;
assert_equals
(
event
.
changed
[
i
]
.
value
expected
.
changed
[
i
]
.
value
description
+
'
changed
cookie
value
'
)
;
}
assert_equals
(
event
.
deleted
.
length
expected
.
deleted
.
length
description
+
'
number
of
deleted
cookies
'
)
;
for
(
let
i
=
0
;
i
<
event
.
deleted
.
length
;
+
+
i
)
{
assert_equals
(
event
.
deleted
[
i
]
.
name
expected
.
deleted
[
i
]
.
name
description
+
'
deleted
cookie
name
'
)
;
assert_equals
(
event
.
deleted
[
i
]
.
value
expected
.
deleted
[
i
]
.
value
description
+
'
deleted
cookie
value
'
)
;
}
}
async
function
cookie_test
(
func
description
)
{
async
function
deleteAllCookies
(
)
{
const
cookies
=
await
cookieStore
.
getAll
(
)
;
await
Promise
.
all
(
cookies
.
flatMap
(
(
{
name
}
)
=
>
[
cookieStore
.
delete
(
name
)
cookieStore
.
delete
(
{
name
partitioned
:
true
}
)
]
)
)
;
}
return
promise_test
(
async
t
=
>
{
await
deleteAllCookies
(
)
;
try
{
return
await
func
(
t
)
;
}
finally
{
await
deleteAllCookies
(
)
;
}
}
description
)
;
}
