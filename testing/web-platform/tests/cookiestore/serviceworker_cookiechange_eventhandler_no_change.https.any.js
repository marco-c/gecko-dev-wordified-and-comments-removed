'
use
strict
'
;
const
kScope
=
'
/
cookiestore
/
does
/
not
/
exist
'
;
function
WorkerActivationPromise
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
if
(
registration
.
active
)
{
resolve
(
)
;
return
;
}
self
.
addEventListener
(
'
activate
'
(
)
=
>
{
resolve
(
)
;
}
)
;
}
)
;
}
function
RunOnceCookieChangeReceivedPromise
(
)
{
return
new
Promise
(
resolve
=
>
{
const
listener
=
ev
=
>
{
resolve
(
ev
)
;
self
.
removeEventListener
(
'
cookiechange
'
listener
)
;
}
;
self
.
addEventListener
(
'
cookiechange
'
listener
)
;
}
)
;
}
promise_test
(
async
t
=
>
{
await
WorkerActivationPromise
(
)
;
const
subscriptions
=
[
{
url
:
{
kScope
}
/
path
}
]
;
await
registration
.
cookies
.
subscribe
(
subscriptions
)
;
t
.
add_cleanup
(
(
)
=
>
registration
.
cookies
.
unsubscribe
(
subscriptions
)
)
;
let
cookie_change_promise
=
RunOnceCookieChangeReceivedPromise
(
)
;
await
cookieStore
.
set
(
'
cookie
-
name
'
'
value
'
)
;
t
.
add_cleanup
(
async
(
)
=
>
{
await
cookieStore
.
delete
(
'
cookie
-
name
'
)
;
}
)
;
let
event
=
await
cookie_change_promise
;
assert_equals
(
event
.
type
'
cookiechange
'
)
;
assert_equals
(
event
.
changed
.
length
1
)
;
assert_equals
(
event
.
changed
[
0
]
.
name
'
cookie
-
name
'
)
;
assert_equals
(
event
.
changed
[
0
]
.
value
'
value
'
)
;
assert_equals
(
event
.
deleted
.
length
0
)
;
cookie_change_promise
=
RunOnceCookieChangeReceivedPromise
(
)
;
await
cookieStore
.
set
(
'
cookie
-
name
'
'
value
'
)
;
await
cookieStore
.
set
(
'
alternate
-
cookie
-
name
'
'
ignore
'
)
;
t
.
add_cleanup
(
async
(
)
=
>
{
await
cookieStore
.
delete
(
'
alternate
-
cookie
-
name
'
)
;
}
)
;
event
=
await
cookie_change_promise
;
assert_equals
(
event
.
type
'
cookiechange
'
)
;
assert_equals
(
event
.
changed
.
length
1
)
;
assert_equals
(
event
.
changed
[
0
]
.
name
'
alternate
-
cookie
-
name
'
)
;
assert_equals
(
event
.
changed
[
0
]
.
value
'
ignore
'
)
;
assert_equals
(
event
.
deleted
.
length
0
)
;
}
)
;
promise_test
(
async
t
=
>
{
await
WorkerActivationPromise
(
)
;
const
subscriptions
=
[
{
url
:
{
kScope
}
/
path
}
]
;
await
registration
.
cookies
.
subscribe
(
subscriptions
)
;
t
.
add_cleanup
(
(
)
=
>
registration
.
cookies
.
unsubscribe
(
subscriptions
)
)
;
let
cookie_change_promise
=
RunOnceCookieChangeReceivedPromise
(
)
;
await
cookieStore
.
set
(
{
name
:
'
cookie
-
name
'
value
:
'
value
'
partitioned
:
true
}
)
;
t
.
add_cleanup
(
async
(
)
=
>
{
await
cookieStore
.
delete
(
{
name
:
'
cookie
-
name
'
partitioned
:
true
}
)
;
}
)
;
let
event
=
await
cookie_change_promise
;
assert_equals
(
event
.
type
'
cookiechange
'
)
;
assert_equals
(
event
.
changed
.
length
1
)
;
assert_equals
(
event
.
changed
[
0
]
.
name
'
cookie
-
name
'
)
;
assert_equals
(
event
.
changed
[
0
]
.
value
'
value
'
)
;
assert_equals
(
event
.
deleted
.
length
0
)
;
cookie_change_promise
=
RunOnceCookieChangeReceivedPromise
(
)
;
await
cookieStore
.
set
(
{
name
:
'
cookie
-
name
'
value
:
'
value
'
partitioned
:
true
}
)
;
await
cookieStore
.
set
(
{
name
:
'
alternate
-
cookie
-
name
'
value
:
'
ignore
'
partitioned
:
true
}
)
;
t
.
add_cleanup
(
async
(
)
=
>
{
await
cookieStore
.
delete
(
{
name
:
'
alternate
-
cookie
-
name
'
partitioned
:
true
}
)
;
}
)
;
event
=
await
cookie_change_promise
;
assert_equals
(
event
.
type
'
cookiechange
'
)
;
assert_equals
(
event
.
changed
.
length
1
)
;
assert_equals
(
event
.
changed
[
0
]
.
name
'
alternate
-
cookie
-
name
'
)
;
assert_equals
(
event
.
changed
[
0
]
.
value
'
ignore
'
)
;
assert_equals
(
event
.
deleted
.
length
0
)
;
}
)
;
