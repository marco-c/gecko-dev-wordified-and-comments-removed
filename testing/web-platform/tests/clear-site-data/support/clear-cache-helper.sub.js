"
use
strict
"
const
sameOrigin
=
'
https
:
/
/
{
{
host
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
'
;
const
subdomainOrigin
=
'
https
:
/
/
{
{
hosts
[
]
[
www2
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
'
;
const
crossSiteOrigin
=
'
https
:
/
/
{
{
hosts
[
alt
]
[
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
'
;
const
subomdainCrossSiteOrigin
=
'
https
:
/
/
{
{
hosts
[
alt
]
[
www2
]
}
}
:
{
{
ports
[
https
]
[
0
]
}
}
'
;
function
getUrl
(
cacheHelper
{
subdomain
=
false
secondOrigin
=
false
cache
=
false
clear
=
null
clearFirst
=
null
response
=
"
single_html
"
iframe
=
null
}
)
{
let
url
=
"
https
:
/
/
"
;
if
(
subdomain
&
&
secondOrigin
)
{
url
+
=
"
{
{
hosts
[
alt
]
[
www2
]
}
}
"
;
}
else
if
(
subdomain
)
{
url
+
=
"
{
{
hosts
[
]
[
www2
]
}
}
"
;
}
else
if
(
secondOrigin
)
{
url
+
=
"
{
{
hosts
[
alt
]
[
]
}
}
"
;
}
else
{
url
+
=
"
{
{
hosts
[
]
[
]
}
}
"
;
}
url
+
=
"
:
{
{
ports
[
https
]
[
0
]
}
}
"
;
url
+
=
"
/
clear
-
site
-
data
/
support
/
clear
-
site
-
data
-
cache
.
py
"
;
url
=
new
URL
(
url
)
;
let
params
=
new
URLSearchParams
(
)
;
params
.
append
(
"
cache_helper
"
cacheHelper
)
;
params
.
append
(
"
response
"
response
)
if
(
clear
!
=
=
null
)
{
params
.
append
(
"
clear
"
clear
)
;
}
if
(
clearFirst
!
=
null
)
{
params
.
append
(
"
clear_first
"
clearFirst
)
;
}
if
(
cache
)
{
params
.
append
(
"
cache
"
"
"
)
;
}
if
(
iframe
!
=
null
)
{
let
iframeUrl
=
getUrl
(
cacheHelper
iframe
)
;
params
.
append
(
"
iframe
"
iframeUrl
)
;
}
url
.
search
=
params
;
return
url
.
toString
(
)
;
}
function
openTestPageHelper
(
test
firstUuid
testUrls
curIdx
assert
resolve
)
{
window
.
addEventListener
(
"
message
"
test
.
step_func
(
e
=
>
{
let
curUuid
=
e
.
data
;
if
(
firstUuid
=
=
=
null
)
{
firstUuid
=
curUuid
;
}
if
(
curIdx
+
1
<
testUrls
.
length
)
{
openTestPageHelper
(
test
firstUuid
testUrls
curIdx
+
1
assert
resolve
)
;
}
else
{
assert
(
firstUuid
curUuid
)
;
resolve
(
)
;
}
}
)
{
once
:
true
}
)
;
window
.
open
(
testUrls
[
curIdx
]
)
;
}
function
testCacheClear
(
test
params
assert
)
{
if
(
params
.
length
<
2
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
reject
(
)
)
;
}
const
cacheHelper
=
self
.
crypto
.
randomUUID
(
)
;
const
testUrls
=
params
.
map
(
(
param
)
=
>
getUrl
(
cacheHelper
param
)
)
;
return
new
Promise
(
resolve
=
>
{
openTestPageHelper
(
test
null
testUrls
0
assert
resolve
)
}
)
;
}
function
runBfCacheClearTest
(
params
description
)
{
runBfcacheTest
(
{
targetOrigin
:
sameOrigin
scripts
:
[
"
/
clear
-
site
-
data
/
support
/
clear
-
cache
-
helper
.
sub
.
js
"
]
funcBeforeBackNavigation
:
async
(
getUrlParams
mode
)
=
>
{
const
cacheHelper
=
self
.
crypto
.
randomUUID
(
)
;
const
testUrl
=
getUrl
(
cacheHelper
getUrlParams
)
;
let
clearingPromise
;
if
(
mode
=
=
=
"
window
"
)
{
clearingPromise
=
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
resolve
{
once
:
true
}
)
;
window
.
open
(
testUrl
)
;
}
)
;
}
else
if
(
mode
=
=
=
"
iframe
"
)
{
clearingPromise
=
new
Promise
(
resolve
=
>
{
const
iframe
=
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
testUrl
;
document
.
body
.
appendChild
(
iframe
)
;
iframe
.
onload
=
resolve
;
}
)
;
}
else
{
throw
new
Error
(
"
Unsupported
mode
"
)
;
}
await
clearingPromise
;
}
argsBeforeBackNavigation
:
[
params
.
getUrlParams
params
.
mode
]
.
.
.
params
}
description
)
;
}
