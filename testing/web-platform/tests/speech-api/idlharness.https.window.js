'
use
strict
'
;
function
getVoices
(
)
{
return
new
Promise
(
resolve
=
>
{
const
voices
=
speechSynthesis
.
getVoices
(
)
;
if
(
voices
.
length
)
{
resolve
(
voices
)
;
}
else
{
speechSynthesis
.
addEventListener
(
'
voiceschanged
'
(
)
=
>
{
resolve
(
speechSynthesis
.
getVoices
(
)
)
;
}
{
once
:
true
}
)
;
}
}
)
;
}
idl_test
(
[
'
speech
-
api
'
]
[
'
dom
'
'
html
'
]
(
idl_array
t
)
=
>
{
idl_array
.
add_objects
(
{
SpeechGrammar
:
[
'
new
SpeechGrammar
(
)
'
]
SpeechGrammarList
:
[
'
new
SpeechGrammarList
(
)
'
]
SpeechRecognition
:
[
'
new
SpeechRecognition
(
)
'
]
SpeechSynthesis
:
[
'
speechSynthesis
'
]
SpeechSynthesisUtterance
:
[
'
new
SpeechSynthesisUtterance
(
)
'
]
SpeechSynthesisVoice
:
[
'
voice
'
]
Window
:
[
'
self
'
]
}
)
;
const
awaitVoice
=
getVoices
(
)
.
then
(
voices
=
>
self
.
voice
=
voices
[
0
]
)
;
const
timeout
=
new
Promise
(
(
_
reject
)
=
>
{
t
.
step_timeout
(
(
)
=
>
reject
(
'
Timed
out
waiting
for
voice
'
)
3000
)
;
}
)
;
return
Promise
.
race
(
[
awaitVoice
timeout
]
)
;
}
)
;
