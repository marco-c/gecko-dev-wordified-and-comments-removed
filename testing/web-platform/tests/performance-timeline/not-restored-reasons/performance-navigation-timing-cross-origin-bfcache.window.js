'
use
strict
'
;
promise_test
(
async
t
=
>
{
const
rcHelper
=
new
RemoteContextHelper
(
)
;
const
rc1
=
await
rcHelper
.
addWindow
(
null
{
features
:
'
noopener
'
}
)
;
const
rc1_url
=
await
rc1
.
executeScript
(
(
)
=
>
{
return
location
.
href
;
}
)
;
const
rc1_child
=
await
rc1
.
addIframe
(
{
origin
:
'
HTTP_REMOTE_ORIGIN
'
scripts
:
[
]
headers
:
[
]
}
{
id
:
'
test
-
id
'
}
)
;
await
useWebSocket
(
rc1_child
)
;
const
rc1_child_url
=
await
rc1_child
.
executeScript
(
(
)
=
>
{
return
location
.
href
;
}
)
;
const
rc1_grand_child
=
await
rc1_child
.
addIframe
(
)
;
const
rc1_grand_child_url
=
await
rc1_grand_child
.
executeScript
(
(
)
=
>
{
return
location
.
href
;
}
)
;
prepareForBFCache
(
rc1
)
;
const
rc2
=
await
rc1
.
navigateToNew
(
)
;
await
rc2
.
historyBack
(
)
;
assert_not_bfcached
(
rc1
)
;
await
assertNotRestoredReasonsEquals
(
rc1
false
rc1_url
'
'
'
'
'
'
[
]
[
{
'
blocked
'
:
true
'
url
'
:
'
'
'
src
'
:
'
'
'
id
'
:
'
'
'
name
'
:
'
'
'
reasons
'
:
[
]
'
children
'
:
[
]
}
]
)
;
}
)
;
