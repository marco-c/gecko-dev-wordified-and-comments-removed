async
function
assertNotRestoredReasonsEquals
(
remoteContextHelper
blocked
url
src
id
name
reasons
children
)
{
let
result
=
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
return
performance
.
getEntriesByType
(
'
navigation
'
)
[
0
]
.
notRestoredReasons
;
}
)
;
assertReasonsStructEquals
(
result
blocked
url
src
id
name
reasons
children
)
;
}
function
assertReasonsStructEquals
(
result
blocked
url
src
id
name
reasons
children
)
{
assert_equals
(
result
.
blocked
blocked
)
;
assert_equals
(
result
.
url
url
)
;
assert_equals
(
result
.
src
src
)
;
assert_equals
(
result
.
id
id
)
;
assert_equals
(
result
.
name
name
)
;
assert_equals
(
result
.
reasons
.
length
reasons
.
length
)
;
reasons
.
sort
(
)
;
result
.
reasons
.
sort
(
)
;
for
(
let
i
=
0
;
i
<
reasons
.
length
;
i
+
+
)
{
assert_equals
(
result
.
reasons
[
i
]
reasons
[
i
]
)
;
}
assert_equals
(
result
.
children
.
length
children
.
length
)
;
children
.
sort
(
)
;
result
.
children
.
sort
(
)
;
for
(
let
j
=
0
;
j
<
children
.
length
;
j
+
+
)
{
assertReasonsStructEquals
(
result
.
children
[
0
]
children
[
0
]
.
blocked
children
[
0
]
.
url
children
[
0
]
.
src
children
[
0
]
.
id
children
[
0
]
.
name
children
[
0
]
.
reasons
children
[
0
]
.
children
)
;
}
}
async
function
useWebSocket
(
remoteContextHelper
)
{
await
remoteContextHelper
.
executeScript
(
(
domain
)
=
>
{
var
webSocketInNotRestoredReasonsTests
=
new
WebSocket
(
domain
+
'
/
echo
'
)
;
}
[
SCHEME_DOMAIN_PORT
]
)
;
}
async
function
prepareForBFCache
(
remoteContextHelper
)
{
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
window
.
beforeBFCache
=
true
;
}
)
;
}
async
function
getBeforeBFCache
(
remoteContextHelper
)
{
return
await
remoteContextHelper
.
executeScript
(
(
)
=
>
{
return
window
.
beforeBFCache
;
}
)
;
}
async
function
assert_implements_bfcache
(
remoteContextHelper
)
{
var
beforeBFCache
=
await
getBeforeBFCache
(
remoteContextHelper
)
;
assert_implements_optional
(
beforeBFCache
=
=
true
'
BFCache
not
supported
.
'
)
;
}
async
function
assert_not_bfcached
(
remoteContextHelper
)
{
var
beforeBFCache
=
await
getBeforeBFCache
(
remoteContextHelper
)
;
assert_equals
(
beforeBFCache
undefined
)
;
}
