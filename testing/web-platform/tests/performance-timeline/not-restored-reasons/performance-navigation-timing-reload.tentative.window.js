'
use
strict
'
;
const
{
ORIGIN
REMOTE_ORIGIN
}
=
get_host_info
(
)
;
promise_test
(
async
t
=
>
{
const
rcHelper
=
new
RemoteContextHelper
(
)
;
const
rc1
=
await
rcHelper
.
addWindow
(
null
{
features
:
'
noopener
'
}
)
;
const
rc1_url
=
await
rc1
.
executeScript
(
(
)
=
>
{
return
location
.
href
;
}
)
;
await
useWebSocket
(
rc1
)
;
await
assertBFCacheEligibility
(
rc1
false
)
;
await
assertNotRestoredReasonsEquals
(
rc1
"
yes
"
rc1_url
null
null
null
[
'
websocket
'
]
[
]
)
;
await
rc1
.
navigate
(
(
)
=
>
{
location
.
reload
(
)
;
}
[
]
)
;
const
navigation_entry
=
await
rc1
.
executeScript
(
(
)
=
>
{
return
performance
.
getEntriesByType
(
'
navigation
'
)
[
0
]
;
}
)
;
assert_equals
(
navigation_entry
.
notRestoredReasons
null
'
Expected
notRestoredReasons
is
null
.
'
)
;
}
)
;
