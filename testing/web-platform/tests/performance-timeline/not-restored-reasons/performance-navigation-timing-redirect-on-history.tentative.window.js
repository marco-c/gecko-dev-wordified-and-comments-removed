'
use
strict
'
;
const
{
ORIGIN
REMOTE_ORIGIN
}
=
get_host_info
(
)
;
promise_test
(
async
t
=
>
{
const
rcHelper
=
new
RemoteContextHelper
(
)
;
const
rc1
=
await
rcHelper
.
addWindow
(
null
{
features
:
'
noopener
'
}
)
;
await
useWebSocket
(
rc1
)
;
let
[
rc1_redirected
saveUrl
]
=
await
rcHelper
.
createContextWithUrl
(
{
origin
:
'
HTTP_ORIGIN
'
scripts
:
[
]
headers
:
[
]
}
)
;
const
redirectUrl
=
{
ORIGIN
}
/
common
/
redirect
.
py
?
location
=
{
encodeURIComponent
(
saveUrl
)
}
;
await
rc1
.
executeScript
(
(
url
)
=
>
{
window
.
history
.
replaceState
(
null
'
'
url
)
;
}
[
redirectUrl
]
)
;
const
newRemoteContextHelper
=
await
rc1
.
navigateToNew
(
)
;
await
newRemoteContextHelper
.
historyBack
(
)
;
const
navigation_entry
=
await
rc1_redirected
.
executeScript
(
(
)
=
>
{
return
performance
.
getEntriesByType
(
'
navigation
'
)
[
0
]
;
}
)
;
assert_equals
(
navigation_entry
.
redirectCount
1
'
Expected
redirectCount
is
1
.
'
)
;
assert_equals
(
navigation_entry
.
notRestoredReasons
null
'
Expected
notRestoredReasons
is
null
.
'
)
;
}
)
;
