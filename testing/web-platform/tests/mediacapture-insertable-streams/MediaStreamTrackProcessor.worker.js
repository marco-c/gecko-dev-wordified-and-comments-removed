importScripts
(
"
/
resources
/
testharness
.
js
"
)
;
function
makeVideoFrame
(
timestamp
)
{
const
canvas
=
new
OffscreenCanvas
(
100
100
)
;
const
ctx
=
canvas
.
getContext
(
'
2d
'
)
;
return
new
VideoFrame
(
canvas
{
timestamp
}
)
;
}
promise_test
(
async
t
=
>
{
const
generator
=
new
VideoTrackGenerator
(
)
;
t
.
add_cleanup
(
(
)
=
>
generator
.
track
.
stop
(
)
)
;
const
processor
=
new
MediaStreamTrackProcessor
(
{
track
:
generator
.
track
maxBufferSize
:
10
}
)
;
const
reader
=
processor
.
readable
.
getReader
(
)
;
const
writer
=
generator
.
writable
.
getWriter
(
)
;
let
numReads
=
0
;
let
resolve
=
null
;
const
promise
=
new
Promise
(
r
=
>
resolve
=
r
)
;
const
numOperations
=
4
;
for
(
let
i
=
0
;
i
<
numOperations
;
i
+
+
)
{
reader
.
read
(
)
.
then
(
dv
=
>
{
dv
.
value
.
close
(
)
;
if
(
+
+
numReads
=
=
numOperations
)
resolve
(
)
;
}
)
;
}
for
(
let
i
=
0
;
i
<
numOperations
;
i
+
+
)
{
await
writer
.
write
(
makeVideoFrame
(
i
)
)
;
await
new
Promise
(
r
=
>
t
.
step_timeout
(
r
0
)
)
;
}
return
promise
;
}
"
Tests
that
multiple
read
requests
are
eventually
settled
"
)
;
done
(
)
;
