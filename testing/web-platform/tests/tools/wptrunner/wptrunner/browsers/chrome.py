from
.
import
chrome_spki_certs
from
.
base
import
WebDriverBrowser
require_arg
from
.
base
import
NullBrowser
from
.
base
import
get_timeout_multiplier
from
.
base
import
cmd_arg
from
.
.
executors
import
executor_kwargs
as
base_executor_kwargs
from
.
.
executors
.
executorwebdriver
import
(
WebDriverTestharnessExecutor
                                           
WebDriverRefTestExecutor
                                           
WebDriverCrashtestExecutor
)
from
.
.
executors
.
base
import
WdspecExecutor
from
.
.
executors
.
executorchrome
import
ChromeDriverPrintRefTestExecutor
__wptrunner__
=
{
"
product
"
:
"
chrome
"
                 
"
check_args
"
:
"
check_args
"
                 
"
browser
"
:
"
ChromeBrowser
"
                 
"
executor
"
:
{
"
testharness
"
:
"
WebDriverTestharnessExecutor
"
                              
"
reftest
"
:
"
WebDriverRefTestExecutor
"
                              
"
print
-
reftest
"
:
"
ChromeDriverPrintRefTestExecutor
"
                              
"
wdspec
"
:
"
WdspecExecutor
"
                              
"
crashtest
"
:
"
WebDriverCrashtestExecutor
"
}
                 
"
browser_kwargs
"
:
"
browser_kwargs
"
                 
"
executor_kwargs
"
:
"
executor_kwargs
"
                 
"
env_extras
"
:
"
env_extras
"
                 
"
env_options
"
:
"
env_options
"
                 
"
update_properties
"
:
"
update_properties
"
                 
"
timeout_multiplier
"
:
"
get_timeout_multiplier
"
}
def
check_args
(
*
*
kwargs
)
:
    
require_arg
(
kwargs
"
webdriver_binary
"
)
def
browser_kwargs
(
logger
test_type
run_info_data
config
*
*
kwargs
)
:
    
return
{
"
binary
"
:
kwargs
[
"
binary
"
]
            
"
webdriver_binary
"
:
kwargs
[
"
webdriver_binary
"
]
            
"
webdriver_args
"
:
kwargs
.
get
(
"
webdriver_args
"
)
}
def
executor_kwargs
(
logger
test_type
test_environment
run_info_data
                    
*
*
kwargs
)
:
    
executor_kwargs
=
base_executor_kwargs
(
test_type
test_environment
run_info_data
                                           
*
*
kwargs
)
    
executor_kwargs
[
"
close_after_done
"
]
=
True
    
executor_kwargs
[
"
supports_eager_pageload
"
]
=
False
    
capabilities
=
{
        
"
goog
:
chromeOptions
"
:
{
            
"
prefs
"
:
{
                
"
profile
"
:
{
                    
"
default_content_setting_values
"
:
{
                        
"
popups
"
:
1
                    
}
                
}
            
}
            
"
excludeSwitches
"
:
[
"
enable
-
automation
"
]
            
"
w3c
"
:
True
        
}
    
}
    
if
test_type
=
=
"
testharness
"
:
        
capabilities
[
"
pageLoadStrategy
"
]
=
"
none
"
    
chrome_options
=
capabilities
[
"
goog
:
chromeOptions
"
]
    
if
kwargs
[
"
binary
"
]
is
not
None
:
        
chrome_options
[
"
binary
"
]
=
kwargs
[
"
binary
"
]
    
chrome_options
[
"
args
"
]
=
[
]
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
ignore
-
certificate
-
errors
-
spki
-
list
=
%
s
"
%
                                  
'
'
.
join
(
chrome_spki_certs
.
IGNORE_CERTIFICATE_ERRORS_SPKI_LIST
)
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
autoplay
-
policy
=
no
-
user
-
gesture
-
required
"
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
use
-
fake
-
device
-
for
-
media
-
stream
"
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
use
-
fake
-
ui
-
for
-
media
-
stream
"
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
short
-
reporting
-
delay
"
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
host
-
resolver
-
rules
=
MAP
nonexistent
.
*
.
test
~
NOTFOUND
MAP
*
.
test
127
.
0
.
0
.
1
"
)
    
chrome_options
[
"
args
"
]
.
append
(
"
-
-
enable
-
features
=
SecurePaymentConfirmationBrowser
"
)
    
address_space_overrides_ports
=
[
        
(
"
http
-
private
"
"
private
"
)
        
(
"
http
-
public
"
"
public
"
)
        
(
"
https
-
private
"
"
private
"
)
        
(
"
https
-
public
"
"
public
"
)
    
]
    
address_space_overrides_arg
=
"
"
.
join
(
        
f
"
127
.
0
.
0
.
1
:
{
port_number
}
=
{
address_space
}
"
        
for
port_name
address_space
in
address_space_overrides_ports
        
for
port_number
in
test_environment
.
config
.
ports
.
get
(
port_name
[
]
)
    
)
    
if
address_space_overrides_arg
:
        
chrome_options
[
"
args
"
]
.
append
(
            
"
-
-
ip
-
address
-
space
-
overrides
=
"
+
address_space_overrides_arg
)
    
if
kwargs
[
"
enable_mojojs
"
]
:
        
chrome_options
[
"
args
"
]
.
append
(
"
-
-
enable
-
blink
-
features
=
MojoJS
MojoJSTest
"
)
    
if
kwargs
[
"
enable_swiftshader
"
]
:
        
chrome_options
[
"
args
"
]
.
extend
(
[
"
-
-
use
-
gl
=
angle
"
"
-
-
use
-
angle
=
swiftshader
"
]
)
    
if
kwargs
[
"
enable_experimental
"
]
:
        
chrome_options
[
"
args
"
]
.
extend
(
[
"
-
-
enable
-
experimental
-
web
-
platform
-
features
"
]
)
    
if
kwargs
[
"
binary_args
"
]
is
not
None
:
        
chrome_options
[
"
args
"
]
.
extend
(
kwargs
[
"
binary_args
"
]
)
    
if
(
(
kwargs
[
"
headless
"
]
or
test_type
=
=
"
print
-
reftest
"
)
and
        
"
-
-
headless
"
not
in
chrome_options
[
"
args
"
]
)
:
        
chrome_options
[
"
args
"
]
.
append
(
"
-
-
headless
"
)
    
webtranport_h3_port
=
test_environment
.
config
.
ports
.
get
(
'
webtransport
-
h3
'
)
    
if
webtranport_h3_port
is
not
None
:
        
chrome_options
[
"
args
"
]
.
append
(
            
f
"
-
-
origin
-
to
-
force
-
quic
-
on
=
web
-
platform
.
test
:
{
webtranport_h3_port
[
0
]
}
"
)
    
executor_kwargs
[
"
capabilities
"
]
=
capabilities
    
return
executor_kwargs
def
env_extras
(
*
*
kwargs
)
:
    
return
[
]
def
env_options
(
)
:
    
return
{
"
server_host
"
:
"
127
.
0
.
0
.
1
"
}
def
update_properties
(
)
:
    
return
(
[
"
debug
"
"
os
"
"
processor
"
]
{
"
os
"
:
[
"
version
"
]
"
processor
"
:
[
"
bits
"
]
}
)
class
ChromeBrowser
(
WebDriverBrowser
)
:
    
def
make_command
(
self
)
:
        
return
[
self
.
webdriver_binary
                
cmd_arg
(
"
port
"
str
(
self
.
port
)
)
                
cmd_arg
(
"
url
-
base
"
self
.
base_path
)
                
cmd_arg
(
"
enable
-
chrome
-
logs
"
)
]
+
self
.
webdriver_args
