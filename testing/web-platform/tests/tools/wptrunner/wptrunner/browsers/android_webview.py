from
.
base
import
NullBrowser
from
.
base
import
require_arg
from
.
base
import
get_timeout_multiplier
from
.
chrome
import
executor_kwargs
as
chrome_executor_kwargs
from
.
chrome_android
import
ChromeAndroidBrowserBase
from
.
.
executors
.
executorwebdriver
import
(
WebDriverTestharnessExecutor
                                           
WebDriverRefTestExecutor
)
from
.
.
executors
.
executorchrome
import
ChromeDriverWdspecExecutor
__wptrunner__
=
{
"
product
"
:
"
android_webview
"
                 
"
check_args
"
:
"
check_args
"
                 
"
browser
"
:
{
None
:
"
SystemWebViewShell
"
                             
"
wdspec
"
:
"
NullBrowser
"
}
                 
"
executor
"
:
{
"
testharness
"
:
"
WebDriverTestharnessExecutor
"
                              
"
reftest
"
:
"
WebDriverRefTestExecutor
"
                              
"
wdspec
"
:
"
ChromeDriverWdspecExecutor
"
}
                 
"
browser_kwargs
"
:
"
browser_kwargs
"
                 
"
executor_kwargs
"
:
"
executor_kwargs
"
                 
"
env_extras
"
:
"
env_extras
"
                 
"
env_options
"
:
"
env_options
"
                 
"
timeout_multiplier
"
:
"
get_timeout_multiplier
"
}
_wptserve_ports
=
set
(
)
def
check_args
(
*
*
kwargs
)
:
    
require_arg
(
kwargs
"
webdriver_binary
"
)
def
browser_kwargs
(
logger
test_type
run_info_data
config
*
*
kwargs
)
:
    
return
{
"
binary
"
:
kwargs
[
"
binary
"
]
            
"
device_serial
"
:
kwargs
[
"
device_serial
"
]
            
"
webdriver_binary
"
:
kwargs
[
"
webdriver_binary
"
]
            
"
webdriver_args
"
:
kwargs
.
get
(
"
webdriver_args
"
)
            
"
stackwalk_binary
"
:
kwargs
.
get
(
"
stackwalk_binary
"
)
            
"
symbols_path
"
:
kwargs
.
get
(
"
symbols_path
"
)
}
def
executor_kwargs
(
logger
test_type
test_environment
run_info_data
                    
*
*
kwargs
)
:
    
_wptserve_ports
.
update
(
set
(
        
test_environment
.
config
[
'
ports
'
]
[
'
http
'
]
+
test_environment
.
config
[
'
ports
'
]
[
'
https
'
]
+
        
test_environment
.
config
[
'
ports
'
]
[
'
ws
'
]
+
test_environment
.
config
[
'
ports
'
]
[
'
wss
'
]
    
)
)
    
executor_kwargs
=
chrome_executor_kwargs
(
logger
test_type
test_environment
run_info_data
                                             
*
*
kwargs
)
    
del
executor_kwargs
[
"
capabilities
"
]
[
"
goog
:
chromeOptions
"
]
[
"
prefs
"
]
    
capabilities
=
executor_kwargs
[
"
capabilities
"
]
    
capabilities
[
"
goog
:
chromeOptions
"
]
[
"
androidPackage
"
]
=
\
        
kwargs
.
get
(
"
package_name
"
"
org
.
chromium
.
webview_shell
"
)
    
capabilities
[
"
goog
:
chromeOptions
"
]
[
"
androidActivity
"
]
=
\
        
"
org
.
chromium
.
webview_shell
.
WebPlatformTestsActivity
"
    
if
kwargs
.
get
(
"
device_serial
"
)
:
        
capabilities
[
"
goog
:
chromeOptions
"
]
[
"
androidDeviceSerial
"
]
=
kwargs
[
"
device_serial
"
]
    
executor_kwargs
[
"
pause_after_test
"
]
=
False
    
executor_kwargs
[
"
restart_after_test
"
]
=
True
    
executor_kwargs
[
"
close_after_done
"
]
=
False
    
return
executor_kwargs
def
env_extras
(
*
*
kwargs
)
:
    
return
[
]
def
env_options
(
)
:
    
return
{
"
server_host
"
:
"
127
.
0
.
0
.
1
"
}
class
SystemWebViewShell
(
ChromeAndroidBrowserBase
)
:
    
"
"
"
Chrome
is
backed
by
chromedriver
which
is
supplied
through
    
wptrunner
.
webdriver
.
ChromeDriverServer
.
    
"
"
"
    
def
__init__
(
self
logger
binary
webdriver_binary
=
"
chromedriver
"
                 
remote_queue
=
None
                 
device_serial
=
None
                 
webdriver_args
=
None
                 
stackwalk_binary
=
None
                 
symbols_path
=
None
)
:
        
"
"
"
Creates
a
new
representation
of
Chrome
.
The
binary
argument
gives
        
the
browser
binary
to
use
for
testing
.
"
"
"
        
super
(
SystemWebViewShell
self
)
.
__init__
(
logger
                
webdriver_binary
remote_queue
device_serial
                
webdriver_args
stackwalk_binary
symbols_path
)
        
self
.
binary
=
binary
        
self
.
wptserver_ports
=
_wptserve_ports
