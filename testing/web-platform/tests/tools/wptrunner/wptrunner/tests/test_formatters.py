import
json
import
sys
import
time
from
os
.
path
import
dirname
join
from
StringIO
import
StringIO
import
mock
from
mozlog
import
handlers
structuredlog
sys
.
path
.
insert
(
0
join
(
dirname
(
__file__
)
"
.
.
"
"
.
.
"
)
)
from
wptrunner
.
formatters
import
wptreport
from
wptrunner
.
formatters
.
wptreport
import
WptreportFormatter
def
test_wptreport_runtime
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
WptreportFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
run_info
=
{
}
)
    
logger
.
test_start
(
"
test
-
id
-
1
"
)
    
time
.
sleep
(
0
.
125
)
    
logger
.
test_end
(
"
test
-
id
-
1
"
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
assert
output_obj
[
"
results
"
]
[
0
]
[
"
duration
"
]
>
=
62
def
test_wptreport_run_info_optional
(
capfd
)
:
    
"
"
"
per
the
mozlog
docs
run_info
is
optional
;
check
we
work
without
it
"
"
"
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
WptreportFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
)
    
logger
.
test_start
(
"
test
-
id
-
1
"
)
    
logger
.
test_end
(
"
test
-
id
-
1
"
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
assert
"
run_info
"
not
in
output_obj
or
output_obj
[
"
run_info
"
]
=
=
{
}
def
test_wptreport_lone_surrogate
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
WptreportFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
)
    
logger
.
test_start
(
"
test
-
id
-
1
"
)
    
logger
.
test_status
(
"
test
-
id
-
1
"
                       
subtest
=
u
"
Name
with
surrogate
\
uD800
"
                       
status
=
"
FAIL
"
                       
message
=
u
"
\
U0001F601
\
uDE0A
\
uD83D
"
)
    
logger
.
test_end
(
"
test
-
id
-
1
"
                    
status
=
"
PASS
"
                    
message
=
u
"
\
uDE0A
\
uD83D
\
U0001F601
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
test
=
output_obj
[
"
results
"
]
[
0
]
    
assert
test
[
"
message
"
]
=
=
u
"
U
+
de0aU
+
d83d
\
U0001F601
"
    
subtest
=
test
[
"
subtests
"
]
[
0
]
    
assert
subtest
[
"
name
"
]
=
=
u
"
Name
with
surrogateU
+
d800
"
    
assert
subtest
[
"
message
"
]
=
=
u
"
\
U0001F601
U
+
de0aU
+
d83d
"
def
test_wptreport_lone_surrogate_ucs2
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
WptreportFormatter
(
)
)
)
    
with
mock
.
patch
.
object
(
wptreport
'
surrogate_replacement
'
wptreport
.
SurrogateReplacementUcs2
(
)
)
:
        
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
)
        
logger
.
test_start
(
"
test
-
id
-
1
"
)
        
logger
.
test_status
(
"
test
-
id
-
1
"
                           
subtest
=
u
"
Name
with
surrogate
\
uD800
"
                           
status
=
"
FAIL
"
                           
message
=
u
"
\
U0001F601
\
uDE0A
\
uD83D
\
uD83D
\
uDE0A
"
)
        
logger
.
test_end
(
"
test
-
id
-
1
"
                        
status
=
"
PASS
"
                        
message
=
u
"
\
uDE0A
\
uD83D
\
uD83D
\
uDE0A
\
U0001F601
"
)
        
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
test
=
output_obj
[
"
results
"
]
[
0
]
    
assert
test
[
"
message
"
]
=
=
u
"
U
+
de0aU
+
d83d
\
U0001f60a
\
U0001F601
"
    
subtest
=
test
[
"
subtests
"
]
[
0
]
    
assert
subtest
[
"
name
"
]
=
=
u
"
Name
with
surrogateU
+
d800
"
    
assert
subtest
[
"
message
"
]
=
=
u
"
\
U0001F601
U
+
de0aU
+
d83d
\
U0001f60a
"
