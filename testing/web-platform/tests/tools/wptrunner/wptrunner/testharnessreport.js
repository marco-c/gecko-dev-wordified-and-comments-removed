window
.
__wptrunner_testdriver_callback
=
null
;
window
.
__wptrunner_message_queue
=
[
]
;
window
.
__wptrunner_url
=
null
;
window
.
__wptrunner_process_next_event
=
function
(
)
{
if
(
!
window
.
__wptrunner_testdriver_callback
)
{
return
;
}
var
data
=
window
.
__wptrunner_message_queue
.
shift
(
)
;
if
(
!
data
)
{
return
;
}
var
payload
=
undefined
;
switch
(
data
.
type
)
{
case
"
complete
"
:
var
tests
=
data
.
tests
;
var
status
=
data
.
status
;
var
subtest_results
=
tests
.
map
(
function
(
x
)
{
return
[
x
.
name
x
.
status
x
.
message
x
.
stack
]
;
}
)
;
payload
=
[
status
.
status
status
.
message
status
.
stack
subtest_results
]
;
clearTimeout
(
window
.
__wptrunner_timer
)
;
break
;
case
"
action
"
:
payload
=
data
;
break
;
default
:
return
;
}
var
callback
=
window
.
__wptrunner_testdriver_callback
;
window
.
__wptrunner_testdriver_callback
=
null
;
callback
(
[
__wptrunner_url
data
.
type
payload
]
)
;
}
;
(
function
(
)
{
var
props
=
{
output
:
%
(
output
)
d
timeout_multiplier
:
%
(
timeout_multiplier
)
s
explicit_timeout
:
%
(
explicit_timeout
)
s
message_events
:
[
"
completion
"
]
}
;
add_completion_callback
(
function
(
tests
harness_status
)
{
__wptrunner_message_queue
.
push
(
{
"
type
"
:
"
complete
"
"
tests
"
:
tests
"
status
"
:
harness_status
}
)
;
__wptrunner_process_next_event
(
)
;
}
)
;
setup
(
props
)
;
}
)
(
)
;
