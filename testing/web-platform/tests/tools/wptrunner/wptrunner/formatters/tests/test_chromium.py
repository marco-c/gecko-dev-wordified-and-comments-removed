import
json
import
sys
from
os
.
path
import
dirname
join
from
io
import
StringIO
from
mozlog
import
handlers
structuredlog
sys
.
path
.
insert
(
0
join
(
dirname
(
__file__
)
"
.
.
"
"
.
.
"
)
)
from
formatters
.
chromium
import
ChromiumFormatter
def
test_chromium_required_fields
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
test
-
id
-
1
"
)
    
logger
.
test_end
(
"
test
-
id
-
1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
assert
"
interrupted
"
in
output_obj
    
assert
"
path_delimiter
"
in
output_obj
    
assert
"
version
"
in
output_obj
    
assert
"
num_failures_by_type
"
in
output_obj
    
assert
"
tests
"
in
output_obj
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
test
-
id
-
1
"
]
    
assert
"
actual
"
in
test_obj
    
assert
"
expected
"
in
test_obj
def
test_chromium_test_name_trie
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
/
foo
/
bar
/
test
-
id
-
1
"
"
/
foo
/
test
-
id
-
2
"
]
run_info
=
{
}
                       
time
=
123
)
    
logger
.
test_start
(
"
/
foo
/
bar
/
test
-
id
-
1
"
)
    
logger
.
test_end
(
"
/
foo
/
bar
/
test
-
id
-
1
"
status
=
"
TIMEOUT
"
expected
=
"
FAIL
"
)
    
logger
.
test_start
(
"
/
foo
/
test
-
id
-
2
"
)
    
logger
.
test_end
(
"
/
foo
/
test
-
id
-
2
"
status
=
"
ERROR
"
expected
=
"
TIMEOUT
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
foo
"
]
[
"
bar
"
]
[
"
test
-
id
-
1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
TIMEOUT
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
FAIL
"
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
foo
"
]
[
"
test
-
id
-
2
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
TIMEOUT
"
def
test_num_failures_by_type
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
"
t2
"
"
t3
"
"
t4
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t2
"
)
    
logger
.
test_end
(
"
t2
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t3
"
)
    
logger
.
test_end
(
"
t3
"
status
=
"
PASS
"
expected
=
"
FAIL
"
)
    
logger
.
test_start
(
"
t4
"
)
    
logger
.
test_end
(
"
t4
"
status
=
"
TIMEOUT
"
expected
=
"
CRASH
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
num_failures_by_type
=
json
.
load
(
output
)
[
"
num_failures_by_type
"
]
    
assert
sorted
(
num_failures_by_type
.
keys
(
)
)
=
=
[
"
PASS
"
"
TIMEOUT
"
]
    
assert
num_failures_by_type
[
"
PASS
"
]
=
=
3
    
assert
num_failures_by_type
[
"
TIMEOUT
"
]
=
=
1
def
test_subtest_messages
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
"
t2
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
FAIL
"
subtest
=
"
t1_a
"
                       
message
=
"
t1_a_message
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
PASS
"
subtest
=
"
t1_b
"
                       
message
=
"
t1_b_message
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t2
"
)
    
logger
.
test_status
(
"
t2
"
status
=
"
PASS
"
subtest
=
"
t2_a
"
)
    
logger
.
test_end
(
"
t2
"
status
=
"
TIMEOUT
"
expected
=
"
PASS
"
                    
message
=
"
t2_message
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
t1_artifacts
=
output_json
[
"
tests
"
]
[
"
t1
"
]
[
"
artifacts
"
]
    
assert
t1_artifacts
[
"
wpt_actual_metadata
"
]
=
=
[
        
"
[
t1
]
\
n
expected
:
PASS
\
n
"
        
"
[
t1_a
]
\
n
expected
:
FAIL
\
n
"
        
"
[
t1_b
]
\
n
expected
:
PASS
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_log
"
]
=
=
[
        
"
t1_a
:
t1_a_message
\
n
"
        
"
t1_b
:
t1_b_message
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_subtest_failure
"
]
=
=
[
"
true
"
]
    
t2_artifacts
=
output_json
[
"
tests
"
]
[
"
t2
"
]
[
"
artifacts
"
]
    
assert
t2_artifacts
[
"
wpt_actual_metadata
"
]
=
=
[
        
"
[
t2
]
\
n
expected
:
TIMEOUT
\
n
"
        
"
[
t2_a
]
\
n
expected
:
PASS
\
n
"
    
]
    
assert
t2_artifacts
[
"
wpt_log
"
]
=
=
[
        
"
Harness
:
t2_message
\
n
"
    
]
    
assert
"
wpt_subtest_failure
"
not
in
t2_artifacts
.
keys
(
)
def
test_subtest_failure
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
formatter
=
ChromiumFormatter
(
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
formatter
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
FAIL
"
subtest
=
"
t1_a
"
                       
message
=
"
t1_a_message
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
PASS
"
subtest
=
"
t1_b
"
                       
message
=
"
t1_b_message
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
TIMEOUT
"
subtest
=
"
t1_c
"
                       
message
=
"
t1_c_message
"
)
    
assert
"
t1
"
in
formatter
.
tests_with_subtest_fails
    
logger
.
test_end
(
"
t1
"
status
=
"
PASS
"
expected
=
"
PASS
"
message
=
"
top_message
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
t1_artifacts
=
test_obj
[
"
artifacts
"
]
    
assert
t1_artifacts
[
"
wpt_actual_metadata
"
]
=
=
[
        
"
[
t1
]
\
n
expected
:
PASS
\
n
"
        
"
[
t1_a
]
\
n
expected
:
FAIL
\
n
"
        
"
[
t1_b
]
\
n
expected
:
PASS
\
n
"
        
"
[
t1_c
]
\
n
expected
:
TIMEOUT
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_log
"
]
=
=
[
        
"
Harness
:
top_message
\
n
"
        
"
t1_a
:
t1_a_message
\
n
"
        
"
t1_b
:
t1_b_message
\
n
"
        
"
t1_c
:
t1_c_message
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_subtest_failure
"
]
=
=
[
"
true
"
]
    
assert
t1_artifacts
[
"
wpt_actual_status
"
]
=
=
[
"
PASS
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
"
    
assert
"
t1
"
not
in
formatter
.
tests_with_subtest_fails
def
test_expected_subtest_failure
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
formatter
=
ChromiumFormatter
(
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
formatter
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
FAIL
"
expected
=
"
FAIL
"
subtest
=
"
t1_a
"
                       
message
=
"
t1_a_message
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
PASS
"
subtest
=
"
t1_b
"
                       
message
=
"
t1_b_message
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
TIMEOUT
"
expected
=
"
TIMEOUT
"
subtest
=
"
t1_c
"
                       
message
=
"
t1_c_message
"
)
    
assert
"
t1
"
not
in
formatter
.
tests_with_subtest_fails
    
logger
.
test_end
(
"
t1
"
status
=
"
OK
"
expected
=
"
OK
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
artifacts
"
]
[
"
wpt_actual_metadata
"
]
=
=
[
        
"
[
t1
]
\
n
expected
:
OK
\
n
"
        
"
[
t1_a
]
\
n
expected
:
FAIL
\
n
"
        
"
[
t1_b
]
\
n
expected
:
PASS
\
n
"
        
"
[
t1_c
]
\
n
expected
:
TIMEOUT
\
n
"
    
]
    
assert
test_obj
[
"
artifacts
"
]
[
"
wpt_log
"
]
=
=
[
        
"
t1_a
:
t1_a_message
\
n
"
        
"
t1_b
:
t1_b_message
\
n
"
        
"
t1_c
:
t1_c_message
\
n
"
    
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
PASS
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
"
def
test_unexpected_subtest_pass
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
formatter
=
ChromiumFormatter
(
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
formatter
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_status
(
"
t1
"
status
=
"
PASS
"
expected
=
"
FAIL
"
subtest
=
"
t1_a
"
                       
message
=
"
t1_a_message
"
)
    
assert
"
t1
"
in
formatter
.
tests_with_subtest_fails
    
logger
.
test_end
(
"
t1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
t1_artifacts
=
test_obj
[
"
artifacts
"
]
    
assert
t1_artifacts
[
"
wpt_actual_metadata
"
]
=
=
[
        
"
[
t1
]
\
n
expected
:
PASS
\
n
"
        
"
[
t1_a
]
\
n
expected
:
PASS
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_log
"
]
=
=
[
        
"
t1_a
:
t1_a_message
\
n
"
    
]
    
assert
t1_artifacts
[
"
wpt_subtest_failure
"
]
=
=
[
"
true
"
]
    
assert
t1_artifacts
[
"
wpt_actual_status
"
]
=
=
[
"
PASS
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
"
    
assert
"
t1
"
not
in
formatter
.
tests_with_subtest_fails
def
test_expected_test_fail
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
ERROR
"
expected
=
"
ERROR
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
FAIL
"
    
assert
"
is_regression
"
not
in
test_obj
    
assert
"
is_unexpected
"
not
in
test_obj
def
test_unexpected_test_fail
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
ERROR
"
expected
=
"
OK
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
"
    
assert
test_obj
[
"
is_regression
"
]
is
True
    
assert
test_obj
[
"
is_unexpected
"
]
is
True
def
test_flaky_test_expected
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
ERROR
"
expected
=
"
OK
"
known_intermittent
=
[
"
ERROR
"
"
TIMEOUT
"
]
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
FAIL
PASS
TIMEOUT
"
    
assert
"
is_regression
"
not
in
test_obj
    
assert
"
is_unexpected
"
not
in
test_obj
def
test_flaky_test_unexpected
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
ERROR
"
expected
=
"
OK
"
known_intermittent
=
[
"
TIMEOUT
"
]
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
TIMEOUT
"
    
assert
test_obj
[
"
is_regression
"
]
is
True
    
assert
test_obj
[
"
is_unexpected
"
]
is
True
def
test_precondition_failed
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
PRECONDITION_FAILED
"
expected
=
"
OK
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
artifacts
"
]
[
"
wpt_actual_status
"
]
=
=
[
"
PRECONDITION_FAILED
"
]
    
assert
test_obj
[
"
is_regression
"
]
is
True
    
assert
test_obj
[
"
is_unexpected
"
]
is
True
def
test_known_intermittent_empty
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
OK
"
expected
=
"
OK
"
known_intermittent
=
[
]
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
PASS
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
PASS
"
def
test_known_intermittent_duplicate
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
ERROR
"
expected
=
"
ERROR
"
known_intermittent
=
[
"
FAIL
"
"
ERROR
"
]
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
FAIL
"
def
test_reftest_screenshots
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
FAIL
"
expected
=
"
PASS
"
extra
=
{
        
"
reftest_screenshots
"
:
[
            
{
"
url
"
:
"
foo
.
html
"
"
hash
"
:
"
HASH1
"
"
screenshot
"
:
"
DATA1
"
}
            
"
!
=
"
            
{
"
url
"
:
"
foo
-
ref
.
html
"
"
hash
"
:
"
HASH2
"
"
screenshot
"
:
"
DATA2
"
}
        
]
    
}
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
artifacts
"
]
[
"
screenshots
"
]
=
=
[
        
"
foo
.
html
:
DATA1
"
        
"
foo
-
ref
.
html
:
DATA2
"
    
]
def
test_process_output_crashing_test
(
capfd
)
:
    
"
"
"
Test
that
chromedriver
logs
are
preserved
for
crashing
tests
"
"
"
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
"
t2
"
"
t3
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
process_output
(
100
"
This
message
should
be
recorded
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
process_output
(
101
"
This
message
should
not
be
recorded
"
"
/
some
/
other
/
process
-
-
another
-
flag
"
)
    
logger
.
process_output
(
100
"
This
message
should
also
be
recorded
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
CRASH
"
expected
=
"
CRASH
"
)
    
logger
.
test_start
(
"
t2
"
)
    
logger
.
process_output
(
100
"
Another
message
for
the
second
test
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
test_end
(
"
t2
"
status
=
"
CRASH
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t3
"
)
    
logger
.
process_output
(
100
"
This
test
fails
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
process_output
(
100
"
But
the
output
should
not
be
captured
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
process_output
(
100
"
Because
it
does
not
crash
"
"
/
some
/
path
/
to
/
chromedriver
-
-
some
-
flag
"
)
    
logger
.
test_end
(
"
t3
"
status
=
"
FAIL
"
expected
=
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_json
=
json
.
load
(
output
)
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t1
"
]
    
assert
test_obj
[
"
artifacts
"
]
[
"
wpt_crash_log
"
]
=
=
[
        
"
This
message
should
be
recorded
"
        
"
This
message
should
also
be
recorded
"
    
]
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t2
"
]
    
assert
test_obj
[
"
artifacts
"
]
[
"
wpt_crash_log
"
]
=
=
[
        
"
Another
message
for
the
second
test
"
    
]
    
test_obj
=
output_json
[
"
tests
"
]
[
"
t3
"
]
    
assert
"
wpt_crash_log
"
not
in
test_obj
[
"
artifacts
"
]
