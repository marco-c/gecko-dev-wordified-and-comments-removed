import
json
import
sys
from
os
.
path
import
dirname
join
from
StringIO
import
StringIO
from
mozlog
import
handlers
structuredlog
sys
.
path
.
insert
(
0
join
(
dirname
(
__file__
)
"
.
.
"
"
.
.
"
)
)
from
formatters
import
chromium
def
test_chromium_required_fields
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
chromium
.
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
test
-
id
-
1
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
test
-
id
-
1
"
)
    
logger
.
test_end
(
"
test
-
id
-
1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
assert
"
interrupted
"
in
output_obj
    
assert
"
path_delimeter
"
in
output_obj
    
assert
"
version
"
in
output_obj
    
assert
"
num_failures_by_type
"
in
output_obj
    
assert
"
tests
"
in
output_obj
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
test
-
id
-
1
"
]
    
assert
"
actual
"
in
test_obj
    
assert
"
expected
"
in
test_obj
def
test_chromium_test_name_trie
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
chromium
.
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
/
foo
/
bar
/
test
-
id
-
1
"
"
/
foo
/
test
-
id
-
2
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
/
foo
/
bar
/
test
-
id
-
1
"
)
    
logger
.
test_end
(
"
/
foo
/
bar
/
test
-
id
-
1
"
status
=
"
TIMEOUT
"
expected
=
"
FAIL
"
)
    
logger
.
test_start
(
"
/
foo
/
test
-
id
-
2
"
)
    
logger
.
test_end
(
"
/
foo
/
test
-
id
-
2
"
status
=
"
ERROR
"
expected
=
"
TIMEOUT
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
output_obj
=
json
.
load
(
output
)
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
foo
"
]
[
"
bar
"
]
[
"
test
-
id
-
1
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
TIMEOUT
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
FAIL
"
    
test_obj
=
output_obj
[
"
tests
"
]
[
"
foo
"
]
[
"
test
-
id
-
2
"
]
    
assert
test_obj
[
"
actual
"
]
=
=
"
FAIL
"
    
assert
test_obj
[
"
expected
"
]
=
=
"
TIMEOUT
"
def
test_num_failures_by_type
(
capfd
)
:
    
output
=
StringIO
(
)
    
logger
=
structuredlog
.
StructuredLogger
(
"
test_a
"
)
    
logger
.
add_handler
(
handlers
.
StreamHandler
(
output
chromium
.
ChromiumFormatter
(
)
)
)
    
logger
.
suite_start
(
[
"
t1
"
"
t2
"
"
t3
"
"
t4
"
]
run_info
=
{
}
time
=
123
)
    
logger
.
test_start
(
"
t1
"
)
    
logger
.
test_end
(
"
t1
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t2
"
)
    
logger
.
test_end
(
"
t2
"
status
=
"
PASS
"
expected
=
"
PASS
"
)
    
logger
.
test_start
(
"
t3
"
)
    
logger
.
test_end
(
"
t3
"
status
=
"
PASS
"
expected
=
"
FAIL
"
)
    
logger
.
test_start
(
"
t4
"
)
    
logger
.
test_end
(
"
t4
"
status
=
"
TIMEOUT
"
expected
=
"
CRASH
"
)
    
logger
.
suite_end
(
)
    
captured
=
capfd
.
readouterr
(
)
    
assert
captured
.
out
=
=
"
"
    
assert
captured
.
err
=
=
"
"
    
output
.
seek
(
0
)
    
num_failures_by_type
=
json
.
load
(
output
)
[
"
num_failures_by_type
"
]
    
assert
sorted
(
num_failures_by_type
.
keys
(
)
)
=
=
[
"
PASS
"
"
TIMEOUT
"
]
    
assert
num_failures_by_type
[
"
PASS
"
]
=
=
3
    
assert
num_failures_by_type
[
"
TIMEOUT
"
]
=
=
1
