#
-
*
-
coding
:
utf
-
8
-
*
-
"
"
"
Client
HTTPS
Setup
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
This
example
code
fragment
demonstrates
how
to
set
up
a
HTTP
/
2
client
that
negotiates
HTTP
/
2
using
NPN
and
ALPN
.
For
the
sake
of
maximum
explanatory
value
this
code
uses
the
synchronous
low
-
level
sockets
API
:
however
if
you
'
re
not
using
sockets
directly
(
e
.
g
.
because
you
'
re
using
asyncio
)
you
should
focus
on
the
set
up
required
for
the
SSLContext
object
.
For
other
concurrency
libraries
you
may
need
to
use
other
setup
(
e
.
g
.
for
Twisted
you
'
ll
need
to
use
IProtocolNegotiationFactory
)
.
This
code
requires
Python
3
.
5
or
later
.
"
"
"
import
h2
.
connection
import
socket
import
ssl
def
establish_tcp_connection
(
)
:
    
"
"
"
    
This
function
establishes
a
client
-
side
TCP
connection
.
How
it
works
isn
'
t
    
very
important
to
this
example
.
For
the
purpose
of
this
example
we
connect
    
to
localhost
.
    
"
"
"
    
return
socket
.
create_connection
(
(
'
localhost
'
443
)
)
def
get_http2_ssl_context
(
)
:
    
"
"
"
    
This
function
creates
an
SSLContext
object
that
is
suitably
configured
for
    
HTTP
/
2
.
If
you
'
re
working
with
Python
TLS
directly
you
'
ll
want
to
do
the
    
exact
same
setup
as
this
function
does
.
    
"
"
"
    
ctx
=
ssl
.
create_default_context
(
purpose
=
ssl
.
Purpose
.
SERVER_AUTH
)
    
ctx
.
options
|
=
(
        
ssl
.
OP_NO_SSLv2
|
ssl
.
OP_NO_SSLv3
|
ssl
.
OP_NO_TLSv1
|
ssl
.
OP_NO_TLSv1_1
    
)
    
ctx
.
options
|
=
ssl
.
OP_NO_COMPRESSION
    
ctx
.
set_ciphers
(
"
ECDHE
+
AESGCM
:
ECDHE
+
CHACHA20
:
DHE
+
AESGCM
:
DHE
+
CHACHA20
"
)
    
ctx
.
set_alpn_protocols
(
[
"
h2
"
"
http
/
1
.
1
"
]
)
    
try
:
        
ctx
.
set_npn_protocols
(
[
"
h2
"
"
http
/
1
.
1
"
]
)
    
except
NotImplementedError
:
        
pass
    
return
ctx
def
negotiate_tls
(
tcp_conn
context
)
:
    
"
"
"
    
Given
an
established
TCP
connection
and
a
HTTP
/
2
-
appropriate
TLS
context
    
this
function
:
    
1
.
wraps
TLS
around
the
TCP
connection
.
    
2
.
confirms
that
HTTP
/
2
was
negotiated
and
if
it
was
not
throws
an
error
.
    
"
"
"
    
tls_conn
=
context
.
wrap_socket
(
tcp_conn
server_hostname
=
'
localhost
'
)
    
negotiated_protocol
=
tls_conn
.
selected_alpn_protocol
(
)
    
if
negotiated_protocol
is
None
:
        
negotiated_protocol
=
tls_conn
.
selected_npn_protocol
(
)
    
if
negotiated_protocol
!
=
"
h2
"
:
        
raise
RuntimeError
(
"
Didn
'
t
negotiate
HTTP
/
2
!
"
)
    
return
tls_conn
def
main
(
)
:
    
context
=
get_http2_ssl_context
(
)
    
connection
=
establish_tcp_connection
(
)
    
tls_connection
=
negotiate_tls
(
connection
context
)
    
http2_connection
=
h2
.
connection
.
H2Connection
(
)
    
http2_connection
.
initiate_connection
(
)
    
tls_connection
.
sendall
(
http2_connection
.
data_to_send
(
)
)
