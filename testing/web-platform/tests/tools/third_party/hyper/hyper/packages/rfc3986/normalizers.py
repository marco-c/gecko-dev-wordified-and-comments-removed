#
-
*
-
coding
:
utf
-
8
-
*
-
import
re
from
.
compat
import
to_bytes
from
.
misc
import
NON_PCT_ENCODED
def
normalize_scheme
(
scheme
)
:
    
return
scheme
.
lower
(
)
def
normalize_authority
(
authority
)
:
    
userinfo
host
port
=
authority
    
result
=
'
'
    
if
userinfo
:
        
result
+
=
normalize_percent_characters
(
userinfo
)
+
'
'
    
if
host
:
        
result
+
=
host
.
lower
(
)
    
if
port
:
        
result
+
=
'
:
'
+
port
    
return
result
def
normalize_path
(
path
)
:
    
if
not
path
:
        
return
path
    
path
=
normalize_percent_characters
(
path
)
    
return
remove_dot_segments
(
path
)
def
normalize_query
(
query
)
:
    
return
normalize_percent_characters
(
query
)
def
normalize_fragment
(
fragment
)
:
    
return
normalize_percent_characters
(
fragment
)
PERCENT_MATCHER
=
re
.
compile
(
'
%
[
A
-
Fa
-
f0
-
9
]
{
2
}
'
)
def
normalize_percent_characters
(
s
)
:
    
"
"
"
All
percent
characters
should
be
upper
-
cased
.
    
For
example
"
%
3afoo
%
DF
%
ab
"
should
be
turned
into
"
%
3Afoo
%
DF
%
AB
"
.
    
"
"
"
    
matches
=
set
(
PERCENT_MATCHER
.
findall
(
s
)
)
    
for
m
in
matches
:
        
if
not
m
.
isupper
(
)
:
            
s
=
s
.
replace
(
m
m
.
upper
(
)
)
    
return
s
def
remove_dot_segments
(
s
)
:
    
segments
=
s
.
split
(
'
/
'
)
    
output
=
[
]
    
for
segment
in
segments
:
        
if
segment
=
=
'
.
'
:
            
continue
        
elif
segment
!
=
'
.
.
'
:
            
output
.
append
(
segment
)
        
elif
output
:
            
output
.
pop
(
)
    
if
s
.
startswith
(
'
/
'
)
and
(
not
output
or
output
[
0
]
)
:
        
output
.
insert
(
0
'
'
)
    
if
s
.
endswith
(
(
'
/
.
'
'
/
.
.
'
)
)
:
        
output
.
append
(
'
'
)
    
return
'
/
'
.
join
(
output
)
def
encode_component
(
uri_component
encoding
)
:
    
if
uri_component
is
None
:
        
return
uri_component
    
uri_bytes
=
to_bytes
(
uri_component
encoding
)
    
encoded_uri
=
bytearray
(
)
    
for
i
in
range
(
0
len
(
uri_bytes
)
)
:
        
byte
=
uri_bytes
[
i
:
i
+
1
]
        
byte_ord
=
ord
(
byte
)
        
if
byte_ord
<
128
and
byte
.
decode
(
)
in
NON_PCT_ENCODED
:
            
encoded_uri
.
extend
(
byte
)
            
continue
        
encoded_uri
.
extend
(
'
%
{
0
:
02x
}
'
.
format
(
byte_ord
)
.
encode
(
)
)
    
return
encoded_uri
.
decode
(
encoding
)
