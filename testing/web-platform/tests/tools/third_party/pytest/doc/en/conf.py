import
ast
import
os
import
shutil
import
sys
from
textwrap
import
dedent
from
typing
import
List
from
typing
import
TYPE_CHECKING
from
_pytest
import
__version__
as
version
if
TYPE_CHECKING
:
    
import
sphinx
.
application
release
=
"
.
"
.
join
(
version
.
split
(
"
.
"
)
[
:
2
]
)
autodoc_member_order
=
"
bysource
"
autodoc_typehints
=
"
description
"
todo_include_todos
=
1
latex_engine
=
"
lualatex
"
latex_elements
=
{
    
"
preamble
"
:
dedent
(
        
r
"
"
"
        
\
directlua
{
            
luaotfload
.
add_fallback
(
"
fallbacks
"
{
                
"
Noto
Serif
CJK
SC
:
style
=
Regular
;
"
                
"
Symbola
:
Style
=
Regular
;
"
            
}
)
        
}
        
\
setmainfont
{
FreeSerif
}
[
RawFeature
=
{
fallback
=
fallbacks
}
]
        
"
"
"
    
)
}
extensions
=
[
    
"
pallets_sphinx_themes
"
    
"
pygments_pytest
"
    
"
sphinx
.
ext
.
autodoc
"
    
"
sphinx
.
ext
.
autosummary
"
    
"
sphinx
.
ext
.
extlinks
"
    
"
sphinx
.
ext
.
intersphinx
"
    
"
sphinx
.
ext
.
todo
"
    
"
sphinx
.
ext
.
viewcode
"
    
"
sphinx_removed_in
"
    
"
sphinxcontrib_trio
"
]
if
shutil
.
which
(
"
inkscape
"
)
:
    
extensions
.
append
(
"
sphinxcontrib
.
inkscapeconverter
"
)
templates_path
=
[
"
_templates
"
]
source_suffix
=
"
.
rst
"
master_doc
=
"
contents
"
project
=
"
pytest
"
copyright
=
"
2015
holger
krekel
and
pytest
-
dev
team
"
exclude_patterns
=
[
    
"
_build
"
    
"
naming20
.
rst
"
    
"
test
/
*
"
    
"
old_
*
"
    
"
*
attic
*
"
    
"
*
/
attic
*
"
    
"
funcargs
.
rst
"
    
"
setup
.
rst
"
    
"
example
/
remoteinterp
.
rst
"
]
default_role
=
"
literal
"
add_module_names
=
False
pygments_style
=
"
sphinx
"
linkcheck_ignore
=
[
    
"
https
:
/
/
blogs
.
msdn
.
microsoft
.
com
/
bharry
/
2017
/
06
/
28
/
testing
-
in
-
a
-
cloud
-
delivery
-
cadence
/
"
    
"
http
:
/
/
pythontesting
.
net
/
framework
/
pytest
-
introduction
/
"
    
r
"
https
:
/
/
github
.
com
/
pytest
-
dev
/
pytest
/
issues
/
\
d
+
"
    
r
"
https
:
/
/
github
.
com
/
pytest
-
dev
/
pytest
/
pull
/
\
d
+
"
]
linkcheck_workers
=
5
_repo
=
"
https
:
/
/
github
.
com
/
pytest
-
dev
/
pytest
"
extlinks
=
{
    
"
bpo
"
:
(
"
https
:
/
/
bugs
.
python
.
org
/
issue
%
s
"
"
bpo
-
"
)
    
"
pypi
"
:
(
"
https
:
/
/
pypi
.
org
/
project
/
%
s
/
"
"
"
)
    
"
issue
"
:
(
f
"
{
_repo
}
/
issues
/
%
s
"
"
issue
#
"
)
    
"
pull
"
:
(
f
"
{
_repo
}
/
pull
/
%
s
"
"
pull
request
#
"
)
    
"
user
"
:
(
"
https
:
/
/
github
.
com
/
%
s
"
"
"
)
}
sys
.
path
.
append
(
os
.
path
.
abspath
(
"
_themes
"
)
)
html_theme_path
=
[
"
_themes
"
]
html_theme
=
"
flask
"
html_title
=
"
pytest
documentation
"
html_short_title
=
"
pytest
-
%
s
"
%
release
html_logo
=
"
img
/
pytest_logo_curves
.
svg
"
html_favicon
=
"
img
/
favicon
.
png
"
html_sidebars
=
{
    
"
index
"
:
[
        
"
slim_searchbox
.
html
"
        
"
sidebarintro
.
html
"
        
"
globaltoc
.
html
"
        
"
links
.
html
"
        
"
sourcelink
.
html
"
    
]
    
"
*
*
"
:
[
        
"
slim_searchbox
.
html
"
        
"
globaltoc
.
html
"
        
"
relations
.
html
"
        
"
links
.
html
"
        
"
sourcelink
.
html
"
    
]
}
html_domain_indices
=
True
html_use_index
=
True
html_show_sourcelink
=
False
htmlhelp_basename
=
"
pytestdoc
"
latex_documents
=
[
    
(
        
"
contents
"
        
"
pytest
.
tex
"
        
"
pytest
Documentation
"
        
"
holger
krekel
trainer
and
consultant
https
:
/
/
merlinux
.
eu
/
"
        
"
manual
"
    
)
]
latex_logo
=
"
img
/
pytest1
.
png
"
latex_domain_indices
=
False
man_pages
=
[
(
"
usage
"
"
pytest
"
"
pytest
usage
"
[
"
holger
krekel
at
merlinux
eu
"
]
1
)
]
epub_title
=
"
pytest
"
epub_author
=
"
holger
krekel
at
merlinux
eu
"
epub_publisher
=
"
holger
krekel
at
merlinux
eu
"
epub_copyright
=
"
2013
holger
krekel
et
alii
"
texinfo_documents
=
[
    
(
        
master_doc
        
"
pytest
"
        
"
pytest
Documentation
"
        
(
            
"
Holger
Krekel
*
Benjamin
Peterson
*
Ronny
Pfannschmidt
*
"
            
"
Floris
Bruynooghe
*
others
"
        
)
        
"
pytest
"
        
"
simple
powerful
testing
with
Python
"
        
"
Programming
"
        
1
    
)
]
intersphinx_mapping
=
{
    
"
pluggy
"
:
(
"
https
:
/
/
pluggy
.
readthedocs
.
io
/
en
/
stable
"
None
)
    
"
python
"
:
(
"
https
:
/
/
docs
.
python
.
org
/
3
"
None
)
    
"
numpy
"
:
(
"
https
:
/
/
numpy
.
org
/
doc
/
stable
"
None
)
    
"
pip
"
:
(
"
https
:
/
/
pip
.
pypa
.
io
/
en
/
stable
"
None
)
    
"
tox
"
:
(
"
https
:
/
/
tox
.
wiki
/
en
/
stable
"
None
)
    
"
virtualenv
"
:
(
"
https
:
/
/
virtualenv
.
pypa
.
io
/
en
/
stable
"
None
)
    
"
django
"
:
(
        
"
http
:
/
/
docs
.
djangoproject
.
com
/
en
/
stable
"
        
"
http
:
/
/
docs
.
djangoproject
.
com
/
en
/
stable
/
_objects
"
    
)
    
"
setuptools
"
:
(
"
https
:
/
/
setuptools
.
pypa
.
io
/
en
/
stable
"
None
)
}
def
configure_logging
(
app
:
"
sphinx
.
application
.
Sphinx
"
)
-
>
None
:
    
"
"
"
Configure
Sphinx
'
s
WarningHandler
to
handle
(
expected
)
missing
include
.
"
"
"
    
import
sphinx
.
util
.
logging
    
import
logging
    
class
WarnLogFilter
(
logging
.
Filter
)
:
        
def
filter
(
self
record
:
logging
.
LogRecord
)
-
>
bool
:
            
"
"
"
Ignore
warnings
about
missing
include
with
"
only
"
directive
.
            
Ref
:
https
:
/
/
github
.
com
/
sphinx
-
doc
/
sphinx
/
issues
/
2150
.
"
"
"
            
if
(
                
record
.
msg
.
startswith
(
'
Problems
with
"
include
"
directive
path
:
'
)
                
and
"
_changelog_towncrier_draft
.
rst
"
in
record
.
msg
            
)
:
                
return
False
            
return
True
    
logger
=
logging
.
getLogger
(
sphinx
.
util
.
logging
.
NAMESPACE
)
    
warn_handler
=
[
x
for
x
in
logger
.
handlers
if
x
.
level
=
=
logging
.
WARNING
]
    
assert
len
(
warn_handler
)
=
=
1
warn_handler
    
warn_handler
[
0
]
.
filters
.
insert
(
0
WarnLogFilter
(
)
)
def
setup
(
app
:
"
sphinx
.
application
.
Sphinx
"
)
-
>
None
:
    
app
.
add_crossref_type
(
        
"
fixture
"
        
"
fixture
"
        
objname
=
"
built
-
in
fixture
"
        
indextemplate
=
"
pair
:
%
s
;
fixture
"
    
)
    
app
.
add_object_type
(
        
"
confval
"
        
"
confval
"
        
objname
=
"
configuration
value
"
        
indextemplate
=
"
pair
:
%
s
;
configuration
value
"
    
)
    
app
.
add_object_type
(
        
"
globalvar
"
        
"
globalvar
"
        
objname
=
"
global
variable
interpreted
by
pytest
"
        
indextemplate
=
"
pair
:
%
s
;
global
variable
interpreted
by
pytest
"
    
)
    
app
.
add_crossref_type
(
        
directivename
=
"
hook
"
        
rolename
=
"
hook
"
        
objname
=
"
pytest
hook
"
        
indextemplate
=
"
pair
:
%
s
;
hook
"
    
)
    
configure_logging
(
app
)
    
import
sphinx
.
pycode
.
ast
    
import
sphinx
.
pycode
.
parser
    
original_is_final
=
sphinx
.
pycode
.
parser
.
VariableCommentPicker
.
is_final
    
def
patched_is_final
(
self
decorators
:
List
[
ast
.
expr
]
)
-
>
bool
:
        
if
original_is_final
(
self
decorators
)
:
            
return
True
        
return
any
(
            
sphinx
.
pycode
.
ast
.
unparse
(
decorator
)
=
=
"
final
"
for
decorator
in
decorators
        
)
    
sphinx
.
pycode
.
parser
.
VariableCommentPicker
.
is_final
=
patched_is_final
    
import
_pytest
.
legacypath
