from
__future__
import
annotations
__all__
=
[
"
tag
"
"
version
"
"
commit
"
]
released
=
True
tag
=
version
=
commit
=
"
10
.
3
"
if
not
released
:
    
import
pathlib
    
import
re
    
import
subprocess
    
def
get_version
(
tag
:
str
)
-
>
str
:
        
file_path
=
pathlib
.
Path
(
__file__
)
        
root_dir
=
file_path
.
parents
[
0
if
file_path
.
name
=
=
"
setup
.
py
"
else
2
]
        
try
:
            
description
=
subprocess
.
run
(
                
[
"
git
"
"
describe
"
"
-
-
dirty
"
"
-
-
tags
"
"
-
-
long
"
]
                
capture_output
=
True
                
cwd
=
root_dir
                
timeout
=
1
                
check
=
True
                
text
=
True
            
)
.
stdout
.
strip
(
)
        
except
(
FileNotFoundError
subprocess
.
CalledProcessError
)
:
            
pass
        
else
:
            
description_re
=
r
"
[
0
-
9
.
]
+
-
(
[
0
-
9
]
+
)
-
(
g
[
0
-
9a
-
f
]
{
7
}
(
?
:
-
dirty
)
?
)
"
            
match
=
re
.
fullmatch
(
description_re
description
)
            
assert
match
is
not
None
            
distance
remainder
=
match
.
groups
(
)
            
remainder
=
remainder
.
replace
(
"
-
"
"
.
"
)
            
return
f
"
{
tag
}
.
dev
{
distance
}
+
{
remainder
}
"
        
try
:
            
import
importlib
.
metadata
            
return
importlib
.
metadata
.
version
(
"
websockets
"
)
        
except
ImportError
:
            
pass
        
return
f
"
{
tag
}
.
dev0
+
gunknown
"
    
version
=
get_version
(
tag
)
    
def
get_commit
(
tag
:
str
version
:
str
)
-
>
str
:
        
version_re
=
r
"
[
0
-
9
.
]
+
\
.
dev
[
0
-
9
]
+
\
+
g
(
[
0
-
9a
-
f
]
{
7
}
|
unknown
)
(
?
:
\
.
dirty
)
?
"
        
match
=
re
.
fullmatch
(
version_re
version
)
        
assert
match
is
not
None
        
(
commit
)
=
match
.
groups
(
)
        
return
tag
if
commit
=
=
"
unknown
"
else
commit
    
commit
=
get_commit
(
tag
version
)
