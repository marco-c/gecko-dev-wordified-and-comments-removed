import
datetime
import
importlib
import
inspect
import
os
import
subprocess
import
sys
sys
.
path
.
insert
(
0
os
.
path
.
join
(
os
.
path
.
abspath
(
"
.
.
"
)
"
src
"
)
)
project
=
"
websockets
"
copyright
=
f
"
2013
-
{
datetime
.
date
.
today
(
)
.
year
}
Aymeric
Augustin
and
contributors
"
author
=
"
Aymeric
Augustin
"
from
websockets
.
version
import
tag
as
version
version
as
release
nitpicky
=
True
nitpick_ignore
=
[
    
(
"
py
:
meth
"
"
client
.
WebSocketClientProtocol
.
handshake
"
)
    
(
"
py
:
meth
"
"
server
.
WebSocketServerProtocol
.
handshake
"
)
    
(
"
py
:
attr
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
is_client
"
)
    
(
"
py
:
attr
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
messages
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
close_connection
"
)
    
(
"
py
:
attr
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
close_connection_task
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
keepalive_ping
"
)
    
(
"
py
:
attr
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
keepalive_ping_task
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
transfer_data
"
)
    
(
"
py
:
attr
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
transfer_data_task
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
connection_open
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
ensure_open
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
fail_connection
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
connection_lost
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
read_message
"
)
    
(
"
py
:
meth
"
"
legacy
.
protocol
.
WebSocketCommonProtocol
.
write_frame
"
)
]
extensions
=
[
    
"
sphinx
.
ext
.
autodoc
"
    
"
sphinx
.
ext
.
intersphinx
"
    
"
sphinx
.
ext
.
linkcode
"
    
"
sphinx
.
ext
.
napoleon
"
    
"
sphinx_copybutton
"
    
"
sphinx_inline_tabs
"
    
"
sphinxcontrib
.
spelling
"
    
"
sphinxcontrib_trio
"
    
"
sphinxext
.
opengraph
"
]
try
:
    
import
sphinxcontrib
.
spelling
except
ImportError
:
    
extensions
.
remove
(
"
sphinxcontrib
.
spelling
"
)
autodoc_typehints
=
"
description
"
autodoc_typehints_description_target
=
"
documented
"
from
sphinx
.
domains
.
python
import
PythonDomain
assert
PythonDomain
.
object_types
[
"
data
"
]
.
roles
=
=
(
"
data
"
"
obj
"
)
PythonDomain
.
object_types
[
"
data
"
]
.
roles
=
(
"
data
"
"
class
"
"
obj
"
)
intersphinx_mapping
=
{
"
python
"
:
(
"
https
:
/
/
docs
.
python
.
org
/
3
"
None
)
}
spelling_show_suggestions
=
True
templates_path
=
[
"
_templates
"
]
exclude_patterns
=
[
"
_build
"
"
Thumbs
.
db
"
"
.
DS_Store
"
]
from
websockets
.
version
import
commit
code_url
=
f
"
https
:
/
/
github
.
com
/
python
-
websockets
/
websockets
/
blob
/
{
commit
}
"
def
linkcode_resolve
(
domain
info
)
:
    
if
domain
=
=
"
js
"
or
info
[
"
module
"
]
=
=
"
connect4
"
:
        
return
    
assert
domain
=
=
"
py
"
"
expected
only
Python
objects
"
    
mod
=
importlib
.
import_module
(
info
[
"
module
"
]
)
    
if
"
.
"
in
info
[
"
fullname
"
]
:
        
objname
attrname
=
info
[
"
fullname
"
]
.
split
(
"
.
"
)
        
obj
=
getattr
(
mod
objname
)
        
try
:
            
obj
=
getattr
(
obj
attrname
)
        
except
AttributeError
:
            
return
None
    
else
:
        
obj
=
getattr
(
mod
info
[
"
fullname
"
]
)
    
try
:
        
file
=
inspect
.
getsourcefile
(
obj
)
        
lines
=
inspect
.
getsourcelines
(
obj
)
    
except
TypeError
:
        
return
None
    
file
=
os
.
path
.
relpath
(
file
os
.
path
.
abspath
(
"
.
.
"
)
)
    
if
not
file
.
startswith
(
"
src
/
websockets
"
)
:
        
return
None
    
start
end
=
lines
[
1
]
lines
[
1
]
+
len
(
lines
[
0
]
)
-
1
    
return
f
"
{
code_url
}
/
{
file
}
#
L
{
start
}
-
L
{
end
}
"
ogp_social_cards
=
{
"
enable
"
:
False
}
html_theme
=
"
furo
"
html_theme_options
=
{
    
"
light_css_variables
"
:
{
        
"
color
-
brand
-
primary
"
:
"
#
306998
"
        
"
color
-
brand
-
content
"
:
"
#
0b487a
"
    
}
    
"
dark_css_variables
"
:
{
        
"
color
-
brand
-
primary
"
:
"
#
ffd43bcc
"
        
"
color
-
brand
-
content
"
:
"
#
ffd43bd9
"
    
}
    
"
sidebar_hide_name
"
:
True
}
html_logo
=
"
_static
/
websockets
.
svg
"
html_favicon
=
"
_static
/
favicon
.
ico
"
html_static_path
=
[
"
_static
"
]
html_copy_source
=
False
html_show_sphinx
=
False
