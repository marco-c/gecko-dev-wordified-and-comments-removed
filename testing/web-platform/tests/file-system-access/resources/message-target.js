'
use
strict
'
;
function
add_message_event_handlers
(
receiver
target
target_origin
)
{
receiver
.
addEventListener
(
'
message
'
async
function
(
message_event
)
{
const
message_data
=
message_event
.
data
;
let
message_source
=
message_event
.
source
;
if
(
message_source
=
=
=
null
)
{
message_source
=
target
;
}
try
{
switch
(
message_data
.
type
)
{
case
'
receive
-
message
-
port
'
:
add_message_event_handlers
(
message_data
.
message_port
message_data
.
message_port
)
;
message_data
.
message_port
.
start
(
)
;
break
;
case
'
create
-
broadcast
-
channel
'
:
const
broadcast_channel
=
new
BroadcastChannel
(
message_data
.
broadcast_channel_name
)
;
add_message_event_handlers
(
broadcast_channel
broadcast_channel
)
;
message_source
.
postMessage
(
{
type
:
'
broadcast
-
channel
-
created
'
}
{
targetOrigin
:
target_origin
}
)
;
break
;
case
'
receive
-
file
-
system
-
handles
'
:
const
serialized_handles
=
[
]
;
const
cloned_handles
=
message_data
.
cloned_handles
;
for
(
let
i
=
0
;
i
<
cloned_handles
.
length
;
+
+
i
)
{
const
serialized
=
await
serialize_handle
(
cloned_handles
[
i
]
)
;
serialized_handles
.
push
(
serialized
)
;
}
message_source
.
postMessage
(
{
type
:
'
receive
-
serialized
-
file
-
system
-
handles
'
serialized_handles
cloned_handles
}
{
targetOrigin
:
target_origin
}
)
;
break
;
case
'
receive
-
serialized
-
file
-
system
-
handles
'
:
break
;
case
'
create
-
file
'
:
const
directory
=
await
navigator
.
storage
.
getDirectory
(
)
;
const
file_handle
=
await
directory
.
getFileHandle
(
'
temp
-
file
'
{
create
:
true
}
)
;
message_source
.
postMessage
(
{
type
:
'
receive
-
file
'
file_handle
}
{
targetOrigin
:
target_origin
}
)
;
break
;
case
'
create
-
directory
'
:
const
parent_directory
=
await
navigator
.
storage
.
getDirectory
(
)
;
const
directory_handle
=
await
parent_directory
.
getDirectoryHandle
(
'
temp
-
directory
'
{
create
:
true
}
)
;
message_source
.
postMessage
(
{
type
:
'
receive
-
directory
'
directory_handle
}
{
targetOrigin
:
target_origin
}
)
;
break
;
case
'
create
-
sync
-
access
-
handle
'
:
let
success
=
true
;
try
{
await
message_data
.
file_handle
.
createSyncAccessHandle
(
)
;
}
catch
(
error
)
{
success
=
false
;
}
message_source
.
postMessage
(
{
type
:
'
receive
-
sync
-
access
-
handle
-
result
'
success
}
{
targetOrigin
:
target_origin
}
)
;
break
;
default
:
throw
Unknown
message
type
:
'
{
message_data
.
type
}
'
;
}
}
catch
(
error
)
{
message_source
.
postMessage
(
ERROR
:
{
error
}
{
targetOrigin
:
target_origin
}
)
;
}
}
)
;
receiver
.
addEventListener
(
'
messageerror
'
async
function
(
message_event
)
{
let
message_source
=
message_event
.
source
;
if
(
message_source
=
=
=
null
)
{
message_source
=
target
;
}
try
{
const
serialized_message_error_event
=
serialize_message_error_event
(
message_event
)
;
message_source
.
postMessage
(
{
type
:
'
serialized
-
message
-
error
'
serialized_message_error_event
}
{
targetOrigin
:
target_origin
}
)
;
}
catch
(
error
)
{
message_source
.
postMessage
(
ERROR
:
{
error
}
{
targetOrigin
:
target_origin
}
)
;
}
}
)
;
}
