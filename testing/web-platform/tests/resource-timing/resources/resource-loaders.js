const
load
=
{
image
:
path
=
>
{
return
new
Promise
(
resolve
=
>
{
const
img
=
new
Image
(
)
;
img
.
onload
=
img
.
onerror
=
resolve
;
img
.
src
=
path
;
}
)
;
}
font
:
path
=
>
{
const
div
=
document
.
createElement
(
'
div
'
)
;
div
.
innerHTML
=
<
style
>
font
-
face
{
font
-
family
:
ahem
;
src
:
url
(
'
{
path
}
'
)
;
}
<
/
style
>
<
div
style
=
"
font
-
family
:
ahem
;
"
>
This
fetches
ahem
font
.
<
/
div
>
;
document
.
body
.
appendChild
(
div
)
;
return
document
.
fonts
.
ready
.
then
(
(
)
=
>
{
document
.
body
.
removeChild
(
div
)
;
}
)
;
}
stylesheet
:
async
path
=
>
{
const
link
=
document
.
createElement
(
"
link
"
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
type
=
"
text
/
css
"
;
link
.
href
=
path
;
const
loaded
=
new
Promise
(
resolve
=
>
{
link
.
onload
=
link
.
onerror
=
resolve
;
}
)
;
document
.
head
.
appendChild
(
link
)
;
await
loaded
;
document
.
head
.
removeChild
(
link
)
;
}
iframe
:
async
path
=
>
{
const
frame
=
document
.
createElement
(
"
iframe
"
)
;
const
loaded
=
new
Promise
(
resolve
=
>
{
frame
.
onload
=
frame
.
onerror
=
resolve
;
}
)
;
frame
.
src
=
path
;
document
.
body
.
appendChild
(
frame
)
;
await
loaded
;
document
.
body
.
removeChild
(
frame
)
;
}
script
:
async
path
=
>
{
const
script
=
document
.
createElement
(
"
script
"
)
;
const
loaded
=
new
Promise
(
resolve
=
>
{
script
.
onload
=
script
.
onerror
=
resolve
;
}
)
;
script
.
src
=
path
;
document
.
body
.
appendChild
(
script
)
;
await
loaded
;
document
.
body
.
removeChild
(
script
)
;
}
xhr_sync
:
async
path
=
>
{
const
xhr
=
new
XMLHttpRequest
;
xhr
.
open
(
"
GET
"
path
false
)
;
xhr
.
send
(
)
;
}
}
;
