function
getSessionStorageKeys
(
)
{
let
keys
=
[
]
;
let
txt
=
'
'
;
for
(
let
i
=
0
;
i
<
sessionStorage
.
length
;
+
+
i
)
{
keys
.
push
(
sessionStorage
.
key
(
i
)
)
;
}
keys
.
sort
(
)
;
keys
.
forEach
(
(
key
)
=
>
{
if
(
txt
.
length
)
{
txt
+
=
'
'
;
}
txt
+
=
key
;
}
)
;
return
txt
;
}
function
getNextMessage
(
channel
)
{
return
new
Promise
(
resolve
=
>
{
channel
.
addEventListener
(
'
message
'
e
=
>
{
resolve
(
e
.
data
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
session_storage_test
(
testPath
uid
)
{
promise_test
(
async
t
=
>
{
const
testChannel
=
new
PrerenderChannel
(
'
test
-
channel
'
uid
)
;
t
.
add_cleanup
(
(
)
=
>
{
testChannel
.
close
(
)
;
}
)
;
const
gotMessage
=
getNextMessage
(
testChannel
)
;
const
url
=
'
resources
/
'
+
testPath
+
'
?
uid
=
'
+
uid
;
window
.
open
(
url
'
_blank
'
'
noopener
'
)
;
assert_equals
(
await
gotMessage
'
Done
'
)
;
}
testPath
)
;
}
async
function
RunSessionStorageTest
(
func
uid
)
{
const
url
=
new
URL
(
document
.
URL
)
;
url
.
searchParams
.
set
(
'
prerendering
'
'
'
)
;
const
params
=
new
URLSearchParams
(
location
.
search
)
;
const
isPrerendering
=
params
.
has
(
'
prerendering
'
)
;
const
prerenderChannel
=
new
PrerenderChannel
(
'
prerender
-
channel
'
uid
)
;
const
testChannel
=
new
PrerenderChannel
(
'
test
-
channel
'
uid
)
;
window
.
addEventListener
(
'
pagehide
'
(
)
=
>
{
prerenderChannel
.
close
(
)
;
testChannel
.
close
(
)
;
}
)
;
try
{
await
func
(
isPrerendering
url
.
toString
(
)
prerenderChannel
(
)
=
>
{
testChannel
.
postMessage
(
'
Done
'
)
;
}
)
}
catch
(
e
)
{
testChannel
.
postMessage
(
e
.
toString
(
)
)
;
}
}
