class
PrerenderEventCollector
{
constructor
(
)
{
this
.
eventsSeen_
=
[
]
;
}
addEvent
(
eventMessage
)
{
this
.
eventsSeen_
.
push
(
{
event
:
eventMessage
prerendering
:
document
.
prerendering
}
)
;
}
async
start
(
promise
promiseName
)
{
assert_true
(
document
.
prerendering
)
;
this
.
addEvent
(
started
waiting
{
promiseName
}
)
;
promise
.
then
(
(
)
=
>
{
this
.
addEvent
(
finished
waiting
{
promiseName
}
)
;
}
(
error
)
=
>
{
if
(
error
instanceof
Error
)
error
=
error
.
name
;
this
.
addEvent
(
{
promiseName
}
rejected
:
{
error
}
)
;
}
)
.
finally
(
(
)
=
>
{
const
testChannel
=
new
BroadcastChannel
(
'
test
-
channel
'
)
;
testChannel
.
postMessage
(
this
.
eventsSeen_
)
;
testChannel
.
close
(
)
;
window
.
close
(
)
;
}
)
;
document
.
addEventListener
(
'
prerenderingchange
'
(
)
=
>
{
this
.
addEvent
(
'
prerendering
change
'
)
;
}
)
;
setTimeout
(
(
)
=
>
{
const
prerenderChannel
=
new
BroadcastChannel
(
'
prerender
-
channel
'
)
;
prerenderChannel
.
postMessage
(
'
readyToActivate
'
)
;
prerenderChannel
.
close
(
)
;
}
0
)
;
}
}
