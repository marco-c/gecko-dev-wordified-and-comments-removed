const
STORE_URL
=
'
/
speculation
-
rules
/
prerender
/
resources
/
key
-
value
-
store
.
py
'
;
function
assertSpeculationRulesIsSupported
(
)
{
assert_implements
(
'
supports
'
in
HTMLScriptElement
'
HTMLScriptElement
.
supports
is
not
supported
'
)
;
assert_implements
(
HTMLScriptElement
.
supports
(
'
speculationrules
'
)
'
<
script
type
=
"
speculationrules
"
>
is
not
supported
'
)
;
}
function
startPrerendering
(
url
)
{
const
script
=
document
.
createElement
(
'
script
'
)
;
script
.
type
=
'
speculationrules
'
;
script
.
text
=
{
"
prerender
"
:
[
{
"
source
"
:
"
list
"
"
urls
"
:
[
"
{
url
}
"
]
}
]
}
;
document
.
head
.
appendChild
(
script
)
;
}
async
function
readValueFromServer
(
key
)
{
const
serverUrl
=
{
STORE_URL
}
?
key
=
{
key
}
;
const
response
=
await
fetch
(
serverUrl
)
;
if
(
!
response
.
ok
)
throw
new
Error
(
'
An
error
happened
in
the
server
'
)
;
const
value
=
await
response
.
text
(
)
;
if
(
value
=
=
=
"
"
)
return
{
status
:
false
}
;
return
{
status
:
true
value
:
value
}
;
}
async
function
nextValueFromServer
(
key
)
{
while
(
true
)
{
const
{
status
value
}
=
await
readValueFromServer
(
key
)
;
if
(
!
status
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
100
)
)
;
continue
;
}
return
value
;
}
}
async
function
writeValueToServer
(
key
value
)
{
const
serverUrl
=
{
STORE_URL
}
?
key
=
{
key
}
&
value
=
{
value
}
;
await
fetch
(
serverUrl
)
;
}
function
loadInitiatorPage
(
)
{
const
prerenderChannel
=
new
BroadcastChannel
(
'
prerender
-
channel
'
)
;
window
.
addEventListener
(
'
unload
'
(
)
=
>
{
prerenderChannel
.
close
(
)
;
}
)
;
const
readyToActivate
=
new
Promise
(
(
resolve
reject
)
=
>
{
prerenderChannel
.
addEventListener
(
'
message
'
e
=
>
{
if
(
e
.
data
!
=
'
readyToActivate
'
)
reject
(
The
initiator
page
receives
an
unsupported
message
:
{
e
.
data
}
)
;
resolve
(
e
.
data
)
;
}
)
;
}
)
;
const
url
=
new
URL
(
document
.
URL
)
;
url
.
searchParams
.
append
(
'
prerendering
'
'
'
)
;
startPrerendering
(
url
.
toString
(
)
)
;
readyToActivate
.
then
(
(
)
=
>
{
window
.
location
=
url
.
toString
(
)
;
}
)
.
catch
(
e
=
>
{
const
testChannel
=
new
BroadcastChannel
(
'
test
-
channel
'
)
;
testChannel
.
postMessage
(
Failed
to
navigate
the
prerendered
page
:
{
e
.
toString
(
)
}
)
;
testChannel
.
close
(
)
;
window
.
close
(
)
;
}
)
;
}
class
BroadcastMessageQueue
{
constructor
(
broadcastChannel
)
{
this
.
messages
=
[
]
;
this
.
resolveFunctions
=
[
]
;
this
.
channel
=
broadcastChannel
;
this
.
channel
.
addEventListener
(
'
message
'
e
=
>
{
if
(
this
.
resolveFunctions
.
length
>
0
)
{
const
fn
=
this
.
resolveFunctions
.
shift
(
)
;
fn
(
e
.
data
)
;
}
else
{
this
.
messages
.
push
(
e
.
data
)
;
}
}
)
;
}
nextMessage
(
)
{
return
new
Promise
(
resolve
=
>
{
if
(
this
.
messages
.
length
>
0
)
resolve
(
this
.
messages
.
shift
(
)
)
else
this
.
resolveFunctions
.
push
(
resolve
)
;
}
)
;
}
}
function
createFrame
(
url
)
{
return
new
Promise
(
resolve
=
>
{
const
frame
=
document
.
createElement
(
'
iframe
'
)
;
frame
.
src
=
url
;
frame
.
onload
=
(
)
=
>
resolve
(
frame
)
;
document
.
body
.
appendChild
(
frame
)
;
}
)
;
}
class
PrerenderChannel
extends
EventTarget
{
broadcastChannel
=
null
;
constructor
(
uid
name
)
{
super
(
)
;
this
.
broadcastChannel
=
new
BroadcastChannel
(
{
uid
}
-
{
name
}
)
;
this
.
broadcastChannel
.
addEventListener
(
'
message
'
e
=
>
{
this
.
dispatchEvent
(
new
CustomEvent
(
'
message
'
{
detail
:
e
.
data
}
)
)
;
}
)
;
}
postMessage
(
message
)
{
this
.
broadcastChannel
.
postMessage
(
message
)
;
}
close
(
)
{
this
.
broadcastChannel
.
close
(
)
;
}
}
;
async
function
create_prerendered_page
(
t
)
{
const
uuid
=
token
(
)
;
new
PrerenderChannel
(
uuid
'
log
'
)
.
addEventListener
(
'
message
'
message
=
>
{
if
(
window
.
console
)
console
[
'
log
'
]
(
'
[
From
Prerendered
]
'
.
.
.
message
.
detail
)
;
}
)
;
const
execChannel
=
new
PrerenderChannel
(
uuid
'
exec
'
)
;
const
initChannel
=
new
PrerenderChannel
(
uuid
'
initiator
'
)
;
const
exec
=
(
func
args
=
[
]
)
=
>
{
const
receiver
=
token
(
)
;
execChannel
.
postMessage
(
{
receiver
fn
:
func
.
toString
(
)
args
}
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
channel
=
new
PrerenderChannel
(
uuid
receiver
)
;
channel
.
addEventListener
(
'
message
'
(
{
detail
}
)
=
>
{
channel
.
close
(
)
;
if
(
detail
.
error
)
reject
(
detail
.
error
)
else
resolve
(
detail
.
result
)
;
}
)
;
}
)
}
;
window
.
open
(
/
speculation
-
rules
/
prerender
/
resources
/
eval
-
init
.
html
?
uuid
=
{
uuid
}
'
_blank
'
'
noopener
'
)
;
t
.
add_cleanup
(
(
)
=
>
initChannel
.
postMessage
(
'
close
'
)
)
;
t
.
add_cleanup
(
(
)
=
>
exec
(
(
)
=
>
window
.
close
(
)
)
)
;
await
new
Promise
(
resolve
=
>
{
const
channel
=
new
PrerenderChannel
(
uuid
'
ready
'
)
;
channel
.
addEventListener
(
'
message
'
(
)
=
>
{
channel
.
close
(
)
;
resolve
(
)
;
}
)
;
}
)
;
async
function
activate
(
)
{
const
prerendering
=
exec
(
(
)
=
>
new
Promise
(
resolve
=
>
document
.
addEventListener
(
'
prerenderingchange
'
(
)
=
>
{
resolve
(
document
.
prerendering
)
;
}
)
)
)
;
initChannel
.
postMessage
(
'
activate
'
)
;
if
(
await
prerendering
)
throw
new
Error
(
'
Should
not
be
prerendering
at
this
point
'
)
}
return
{
exec
activate
}
;
}
function
test_prerender_restricted
(
fn
expected
label
)
{
promise_test
(
async
t
=
>
{
const
{
exec
}
=
await
create_prerendered_page
(
t
)
;
let
result
=
null
;
try
{
await
exec
(
fn
)
;
result
=
"
OK
"
;
}
catch
(
e
)
{
result
=
e
.
name
;
}
assert_equals
(
result
expected
)
;
}
label
)
;
}
function
test_prerender_defer
(
fn
label
)
{
promise_test
(
async
t
=
>
{
const
{
exec
activate
}
=
await
create_prerendered_page
(
t
)
;
let
activated
=
false
;
const
deferred
=
exec
(
fn
)
;
const
post
=
new
Promise
(
(
resolve
reject
)
=
>
deferred
.
then
(
result
=
>
{
assert_true
(
activated
"
Deferred
operation
should
occur
only
after
activation
"
)
;
resolve
(
result
)
;
}
reason
=
>
{
assert_true
(
activated
"
Deferred
operation
should
occur
only
after
activation
(
reject
)
"
)
;
reject
(
reason
)
;
}
)
)
;
await
new
Promise
(
resolve
=
>
t
.
step_timeout
(
resolve
100
)
)
;
await
activate
(
)
;
activated
=
true
;
await
post
;
}
label
)
;
}
