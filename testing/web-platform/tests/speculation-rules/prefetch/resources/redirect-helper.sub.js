const
{
origin
}
=
Object
.
fromEntries
(
new
URLSearchParams
(
location
.
search
)
)
;
async
function
prepare
(
t
prefetchTiming
)
{
const
agent
=
await
spawnWindow
(
t
)
;
let
prefetchFinalUrl
;
let
prefetchInitialOrigin
;
if
(
origin
=
=
=
'
same
-
origin
'
)
{
prefetchFinalUrl
=
agent
.
getExecutorURL
(
{
page
:
2
}
)
;
prefetchInitialOrigin
=
location
.
origin
;
}
else
if
(
origin
=
=
=
'
cross
-
site
-
initial
'
)
{
prefetchFinalUrl
=
agent
.
getExecutorURL
(
{
page
:
2
hostname
:
'
{
{
hosts
[
alt
]
[
www
]
}
}
'
}
)
;
prefetchInitialOrigin
=
prefetchFinalUrl
.
origin
;
}
else
if
(
origin
=
=
=
'
cross
-
site
-
redirect
'
)
{
prefetchFinalUrl
=
agent
.
getExecutorURL
(
{
page
:
2
hostname
:
'
{
{
hosts
[
alt
]
[
www
]
}
}
'
}
)
;
prefetchInitialOrigin
=
location
.
origin
;
}
else
{
t
.
assert_unreached
(
'
Invalid
origin
option
:
'
+
origin
)
;
}
let
prefetchInitialUrl
;
if
(
prefetchTiming
=
=
=
'
redirect
-
received
-
after
-
navigation
-
start
'
)
{
prefetchInitialUrl
=
new
URL
(
'
/
common
/
slow
-
redirect
.
py
?
delay
=
2
.
5
'
prefetchInitialOrigin
)
;
prefetchInitialUrl
.
searchParams
.
set
(
'
location
'
prefetchFinalUrl
)
;
}
else
{
prefetchInitialUrl
=
new
URL
(
'
/
common
/
redirect
.
py
'
prefetchInitialOrigin
)
;
prefetchInitialUrl
.
searchParams
.
set
(
'
location
'
prefetchFinalUrl
)
;
}
const
redirectToPrefetchInitialUrl
=
new
URL
(
'
/
common
/
redirect
.
py
'
location
.
href
)
;
redirectToPrefetchInitialUrl
.
searchParams
.
set
(
'
location
'
prefetchInitialUrl
)
;
const
redirectToPrefetchFinalUrl
=
new
URL
(
'
/
common
/
redirect
.
py
'
location
.
href
)
;
redirectToPrefetchFinalUrl
.
searchParams
.
set
(
'
location
'
prefetchFinalUrl
)
;
redirectToPrefetchFinalUrl
.
searchParams
.
set
(
'
type
'
'
navigation
'
)
;
return
{
agent
prefetchInitialUrl
prefetchFinalUrl
redirectToPrefetchInitialUrl
redirectToPrefetchFinalUrl
}
;
}
