const
swOption
=
new
URL
(
location
.
href
)
.
searchParams
.
get
(
'
sw
'
)
;
const
interceptedRequests
=
[
]
;
self
.
addEventListener
(
'
message
'
event
=
>
{
if
(
event
.
data
=
=
=
'
getInterceptedRequests
'
)
{
event
.
source
.
postMessage
(
interceptedRequests
)
;
}
}
)
;
if
(
swOption
!
=
=
'
no
-
fetch
-
handler
'
)
{
self
.
addEventListener
(
'
fetch
'
event
=
>
{
if
(
!
event
.
request
.
url
.
includes
(
'
counting
-
executor
.
py
'
)
)
{
return
;
}
const
headers
=
{
}
;
event
.
request
.
headers
.
forEach
(
(
value
key
)
=
>
{
headers
[
key
]
=
value
;
}
)
;
interceptedRequests
.
push
(
{
request
:
{
url
:
event
.
request
.
url
headers
:
headers
}
clientId
:
event
.
clientId
resultingClientId
:
event
.
resultingClientId
}
)
;
if
(
swOption
=
=
=
'
fetch
-
handler
'
)
{
event
.
respondWith
(
fetch
(
event
.
request
)
)
;
}
else
if
(
swOption
=
=
=
'
fetch
-
handler
-
modify
-
url
'
)
{
const
url
=
new
URL
(
event
.
request
.
url
)
;
url
.
searchParams
.
set
(
'
intercepted
'
'
true
'
)
;
event
.
respondWith
(
fetch
(
url
{
headers
:
event
.
request
.
headers
}
)
)
;
}
else
if
(
swOption
=
=
=
'
fetch
-
handler
-
modify
-
referrer
'
)
{
event
.
respondWith
(
fetch
(
event
.
request
{
referrer
:
new
URL
(
'
/
intercepted
'
location
.
href
)
.
href
}
)
)
;
}
else
{
}
}
)
;
}
