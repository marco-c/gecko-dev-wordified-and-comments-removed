async
function
tryConnect
(
)
{
const
pc1
=
new
RTCPeerConnection
(
)
;
const
pc2
=
new
RTCPeerConnection
(
)
;
const
pcFailed
=
(
pc
)
=
>
{
return
new
Promise
(
(
resolve
_reject
)
=
>
{
pc
.
oniceconnectionstatechange
=
(
e
)
=
>
{
resolve
(
pc
.
iceConnectionState
=
=
"
failed
"
)
;
}
;
}
)
;
}
pc1Failed
=
pcFailed
(
pc1
)
;
pc2Failed
=
pcFailed
(
pc2
)
;
const
channel
=
pc1
.
createDataChannel
(
'
test
'
)
;
pc1
.
onicecandidate
=
(
{
candidate
}
)
=
>
pc2
.
addIceCandidate
(
candidate
)
;
pc2
.
onicecandidate
=
(
{
candidate
}
)
=
>
pc1
.
addIceCandidate
(
candidate
)
;
const
offer
=
await
pc1
.
createOffer
(
)
;
await
pc1
.
setLocalDescription
(
offer
)
;
await
pc2
.
setRemoteDescription
(
pc1
.
localDescription
)
;
const
answer
=
await
pc2
.
createAnswer
(
)
;
await
pc2
.
setLocalDescription
(
answer
)
;
await
pc1
.
setRemoteDescription
(
pc2
.
localDescription
)
;
const
failed1
=
await
pc1Failed
;
const
failed2
=
await
pc2Failed
;
if
(
failed1
&
&
failed2
)
{
return
'
blocked
'
;
}
else
if
(
!
failed1
&
&
!
failed2
)
{
return
'
allowed
'
;
}
else
{
return
'
inconsistent
'
;
}
}
async
function
expectAllow
(
)
{
promise_test
(
async
(
)
=
>
assert_equals
(
await
tryConnect
(
)
'
allowed
'
)
)
;
}
async
function
expectBlock
(
)
{
promise_test
(
async
(
)
=
>
assert_equals
(
await
tryConnect
(
)
'
blocked
'
)
)
;
}
