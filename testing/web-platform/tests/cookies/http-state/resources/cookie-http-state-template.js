const
SERVER_LOCATION
=
"
resources
"
;
const
SERVER_SCRIPT
=
SERVER_LOCATION
+
"
/
cookie
-
setter
.
py
"
;
function
log
(
message
tag
)
{
let
log_str
=
document
.
createElement
(
'
div
'
)
;
log_str
.
textContent
=
new
Date
(
)
.
toTimeString
(
)
.
replace
(
/
\
s
.
+
/
'
'
)
;
if
(
tag
)
{
log_str
.
textContent
+
=
"
[
"
+
tag
+
"
]
"
;
}
log_str
.
textContent
+
=
"
-
"
+
message
;
let
log_container
=
document
.
getElementById
(
"
log
"
)
;
log_container
.
appendChild
(
log_str
)
;
log_container
.
scrollTo
(
0
log_container
.
scrollHeight
)
;
}
function
stripPrefixAndWhitespace
(
cookie_text
)
{
return
cookie_text
.
replace
(
/
^
Cookie
:
/
'
'
)
.
replace
(
/
^
\
s
+
|
\
s
+
/
g
'
'
)
;
}
function
getLocalResourcesPath
(
)
{
let
replace
=
"
(
"
+
SERVER_LOCATION
+
"
\
/
)
*
"
;
replace
+
=
"
[
^
\
/
]
*
"
;
return
location
.
pathname
.
replace
(
new
RegExp
(
replace
)
"
"
)
+
SERVER_LOCATION
;
}
function
getAbsoluteServerLocation
(
)
{
let
replace
=
SERVER_LOCATION
+
"
.
*
"
;
return
getLocalResourcesPath
(
)
.
replace
(
new
RegExp
(
replace
)
'
'
)
+
SERVER_SCRIPT
;
}
function
expireCookie
(
name
expiry_date
path
)
{
name
=
name
|
|
"
"
;
expiry_date
=
expiry_date
|
|
"
Thu
01
Jan
1970
00
:
00
:
00
UTC
"
;
path
=
path
|
|
getLocalResourcesPath
(
)
;
document
.
cookie
=
name
+
"
=
;
expires
=
"
+
expiry_date
+
"
;
path
=
"
+
path
+
"
;
"
;
}
function
CookieManager
(
)
{
this
.
initial_cookies
=
[
]
;
}
CookieManager
.
prototype
.
parse
=
document_cookies
=
>
{
this
.
initial_cookies
=
[
]
;
document_cookies
=
document_cookies
.
replace
(
/
^
Cookie
:
/
'
'
)
;
if
(
document_cookies
!
=
"
"
)
{
this
.
initial_cookies
=
document_cookies
.
split
(
/
\
s
*
;
\
s
*
/
)
;
}
}
CookieManager
.
prototype
.
diffWith
=
document_cookies
=
>
{
this
.
actual_cookies
=
document_cookies
;
for
(
let
i
in
initial_cookies
)
{
let
no_spaces_cookie_regex
=
new
RegExp
(
/
\
s
*
[
\
;
]
*
\
s
/
.
source
+
initial_cookies
[
i
]
.
replace
(
/
\
\
/
"
\
\
\
\
"
)
)
;
this
.
actual_cookies
=
this
.
actual_cookies
.
replace
(
no_spaces_cookie_regex
'
'
)
;
}
return
this
.
actual_cookies
;
}
CookieManager
.
prototype
.
resetCookies
=
(
)
=
>
{
let
cookies_to_delete
=
[
"
"
]
.
concat
(
this
.
actual_cookies
.
split
(
/
\
s
*
;
\
s
*
/
)
)
for
(
let
i
in
cookies_to_delete
)
{
expireCookie
(
cookies_to_delete
[
i
]
.
replace
(
/
=
.
*
/
"
"
)
)
;
expireCookie
(
cookies_to_delete
[
i
]
.
replace
(
/
=
.
*
/
"
"
)
null
'
/
'
)
;
expireCookie
(
cookies_to_delete
[
i
]
.
replace
(
/
=
.
*
/
"
"
)
null
getLocalResourcesPath
(
)
+
"
/
"
)
;
}
}
function
createCookieTest
(
file
)
{
return
t
=
>
{
let
iframe_container
=
document
.
getElementById
(
"
iframes
"
)
;
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe_container
.
appendChild
(
iframe
)
;
iframe_container
.
scrollTo
(
0
iframe_container
.
scrollHeight
)
;
let
diff_tool
=
new
CookieManager
(
)
;
t
.
add_cleanup
(
diff_tool
.
resetCookies
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
diff_tool
.
parse
(
document
.
cookie
)
;
if
(
diff_tool
.
initial_cookies
.
length
>
0
)
{
log
(
"
Run
with
existing
cookies
:
"
+
diff_tool
.
initial_cookies
file
)
;
}
window
.
addEventListener
(
"
message
"
t
.
step_func
(
e
=
>
{
assert_true
(
!
!
e
.
data
"
Message
contains
data
"
)
resolve
(
e
.
data
)
;
}
)
)
;
iframe
.
src
=
getAbsoluteServerLocation
(
)
+
"
?
file
=
"
+
file
;
}
)
.
then
(
(
response
)
=
>
{
let
actual_cookies
=
diff_tool
.
diffWith
(
response
.
cookies
)
;
let
expected_cookies
=
stripPrefixAndWhitespace
(
response
.
expectation
)
;
assert_equals
(
actual_cookies
expected_cookies
)
;
}
)
;
}
}
;
