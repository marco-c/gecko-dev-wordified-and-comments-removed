async
function
getDefaultPathCookies
(
path
=
'
/
cookies
/
resources
'
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
try
{
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
style
=
'
display
:
none
'
;
iframe
.
src
=
{
path
}
/
echo
-
cookie
.
html
;
iframe
.
addEventListener
(
'
load
'
(
e
)
=
>
{
const
win
=
e
.
target
.
contentWindow
;
const
iframeCookies
=
win
.
getCookies
(
)
;
win
.
expireCookie
(
'
test
'
path
)
;
resolve
(
iframeCookies
)
;
}
{
once
:
true
}
)
;
document
.
documentElement
.
appendChild
(
iframe
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
;
}
async
function
getRedirectedCookies
(
location
cookie
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
try
{
const
iframe
=
document
.
createElement
(
'
iframe
'
)
;
iframe
.
style
=
'
display
:
none
'
;
iframe
.
src
=
location
;
iframe
.
addEventListener
(
'
load
'
(
e
)
=
>
{
const
win
=
e
.
target
.
contentWindow
;
let
iframeCookie
;
win
.
postMessage
(
'
getCookies
'
'
*
'
)
;
window
.
addEventListener
(
'
message
'
(
e
)
=
>
{
if
(
typeof
e
.
data
=
=
'
object
'
&
&
'
cookies
'
in
e
.
data
)
{
iframeCookie
=
e
.
data
.
cookies
;
e
.
source
.
postMessage
(
{
'
expireCookie
'
:
cookie
}
'
*
'
)
;
}
if
(
e
.
data
=
=
'
expired
'
)
{
resolve
(
iframeCookie
)
;
}
}
)
;
}
{
once
:
true
}
)
;
document
.
documentElement
.
appendChild
(
iframe
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
;
}
function
httpCookieTest
(
cookie
expectedValue
name
defaultPath
=
true
)
{
return
promise_test
(
async
(
t
)
=
>
{
let
encodedCookie
=
encodeURIComponent
(
JSON
.
stringify
(
cookie
)
)
;
await
fetch
(
/
cookies
/
resources
/
cookie
.
py
?
set
=
{
encodedCookie
}
)
;
let
cookies
=
document
.
cookie
;
if
(
defaultPath
)
{
cookies
=
await
getDefaultPathCookies
(
)
;
}
if
(
Boolean
(
expectedValue
)
)
{
assert_equals
(
cookies
expectedValue
'
The
cookie
was
set
as
expected
.
'
)
;
}
else
{
assert_equals
(
cookies
expectedValue
'
The
cookie
was
rejected
.
'
)
;
}
await
fetch
(
/
cookies
/
resources
/
cookie
.
py
?
drop
=
{
encodedCookie
}
)
;
}
name
)
;
}
function
httpRedirectCookieTest
(
cookie
expectedValue
name
location
)
{
return
promise_test
(
async
(
t
)
=
>
{
const
encodedCookie
=
encodeURIComponent
(
JSON
.
stringify
(
cookie
)
)
;
const
encodedLocation
=
encodeURIComponent
(
location
)
;
const
setParams
=
?
set
=
{
encodedCookie
}
&
location
=
{
encodedLocation
}
;
await
fetch
(
/
cookies
/
resources
/
cookie
.
py
{
setParams
}
)
;
const
cookies
=
await
getRedirectedCookies
(
location
cookie
)
;
if
(
Boolean
(
expectedValue
)
)
{
assert_equals
(
cookies
expectedValue
'
The
cookie
was
set
as
expected
.
'
)
;
}
else
{
assert_equals
(
cookies
expectedValue
'
The
cookie
was
rejected
.
'
)
;
}
await
fetch
(
/
cookies
/
resources
/
cookie
.
py
?
drop
=
{
encodedCookie
}
)
;
}
name
)
;
}
function
domCookieTest
(
cookie
expectedValue
name
)
{
return
promise_test
(
async
(
t
)
=
>
{
await
test_driver
.
delete_all_cookies
(
)
;
t
.
add_cleanup
(
test_driver
.
delete_all_cookies
)
;
document
.
cookie
=
cookie
;
let
cookies
=
document
.
cookie
;
assert_equals
(
cookies
expectedValue
Boolean
(
expectedValue
)
?
'
The
cookie
was
set
as
expected
.
'
:
'
The
cookie
was
rejected
.
'
)
;
}
name
)
;
}
function
getCtlCharacters
(
)
{
const
termCtlCodes
=
[
0x00
0x0A
0x0D
]
;
const
ctlCodes
=
[
.
.
.
Array
(
0x20
)
.
keys
(
)
]
.
filter
(
i
=
>
termCtlCodes
.
indexOf
(
i
)
=
=
=
-
1
)
.
concat
(
[
0x7F
]
)
;
return
{
TERMINATING_CTLS
:
termCtlCodes
.
map
(
i
=
>
(
{
code
:
i
chr
:
String
.
fromCharCode
(
i
)
}
)
)
CTLS
:
ctlCodes
.
map
(
i
=
>
(
{
code
:
i
chr
:
String
.
fromCharCode
(
i
)
}
)
)
}
;
}
function
cookieStringWithNameAndValueLengths
(
nameLength
valueLength
)
{
return
{
"
t
"
.
repeat
(
nameLength
)
}
=
{
"
1
"
.
repeat
(
valueLength
)
}
;
}
