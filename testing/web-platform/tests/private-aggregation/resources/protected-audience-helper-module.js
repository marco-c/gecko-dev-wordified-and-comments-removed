"
use
strict
;
"
const
FULL_URL
=
window
.
location
.
href
;
let
BASE_URL
=
FULL_URL
.
substring
(
0
FULL_URL
.
lastIndexOf
(
'
/
'
)
+
1
)
const
BASE_PATH
=
(
new
URL
(
BASE_URL
)
)
.
pathname
;
const
DEFAULT_INTEREST_GROUP_NAME
=
'
default
name
'
;
const
FLEDGE_DIR
=
'
/
fledge
/
tentative
/
'
;
const
FLEDGE_BASE_URL
=
BASE_URL
.
replace
(
BASE_PATH
FLEDGE_DIR
)
;
const
sleep
=
ms
=
>
new
Promise
(
resolve
=
>
step_timeout
(
resolve
ms
)
)
;
function
generateUuid
(
)
{
let
uuid
=
token
(
)
;
return
uuid
;
}
function
createReportingURL
(
uuid
operation
report
=
'
default
-
report
'
)
{
let
url
=
new
URL
(
{
window
.
location
.
origin
}
{
BASE_PATH
}
resources
/
protected_audience_event_level_report_handler
.
py
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
url
.
searchParams
.
append
(
'
operation
'
operation
)
;
if
(
report
)
url
.
searchParams
.
append
(
'
report
'
report
)
;
return
url
.
toString
(
)
;
}
function
createWritingURL
(
uuid
report
)
{
return
createReportingURL
(
uuid
'
write
'
)
;
}
function
createReadingURL
(
uuid
)
{
return
createReportingURL
(
uuid
'
read
'
)
;
}
async
function
waitForObservedReports
(
uuid
expectedNumReports
timeout
=
5000
)
{
expectedReports
=
Array
(
expectedNumReports
)
.
fill
(
'
default
-
report
'
)
;
const
reportURL
=
createReadingURL
(
uuid
)
;
let
startTime
=
performance
.
now
(
)
;
while
(
performance
.
now
(
)
-
startTime
<
timeout
)
{
let
response
=
await
fetch
(
reportURL
{
credentials
:
'
omit
'
mode
:
'
cors
'
}
)
;
let
actualReports
=
await
response
.
json
(
)
;
if
(
actualReports
.
length
=
=
expectedReports
.
length
)
{
assert_array_equals
(
actualReports
.
sort
(
)
expectedReports
)
;
return
;
}
await
sleep
(
100
)
;
}
assert_unreached
(
"
Report
fetching
timed
out
:
"
+
uuid
)
;
}
function
createBiddingScriptURL
(
params
=
{
}
)
{
let
url
=
new
URL
(
{
FLEDGE_BASE_URL
}
resources
/
bidding
-
logic
.
sub
.
py
)
;
if
(
params
.
generateBid
)
url
.
searchParams
.
append
(
'
generateBid
'
params
.
generateBid
)
;
if
(
params
.
reportWin
)
url
.
searchParams
.
append
(
'
reportWin
'
params
.
reportWin
)
;
if
(
params
.
error
)
url
.
searchParams
.
append
(
'
error
'
params
.
error
)
;
if
(
params
.
bid
)
url
.
searchParams
.
append
(
'
bid
'
params
.
bid
)
;
return
url
.
toString
(
)
;
}
function
createDecisionScriptURL
(
uuid
params
=
{
}
)
{
let
url
=
new
URL
(
{
FLEDGE_BASE_URL
}
resources
/
decision
-
logic
.
sub
.
py
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
if
(
params
.
scoreAd
)
url
.
searchParams
.
append
(
'
scoreAd
'
params
.
scoreAd
)
;
if
(
params
.
reportResult
)
url
.
searchParams
.
append
(
'
reportResult
'
params
.
reportResult
)
;
if
(
params
.
error
)
url
.
searchParams
.
append
(
'
error
'
params
.
error
)
;
return
url
.
toString
(
)
;
}
function
createRenderURL
(
uuid
script
)
{
let
url
=
new
URL
(
{
FLEDGE_BASE_URL
}
resources
/
fenced
-
frame
.
sub
.
py
)
;
if
(
script
)
url
.
searchParams
.
append
(
'
script
'
script
)
;
url
.
searchParams
.
append
(
'
uuid
'
uuid
)
;
return
url
.
toString
(
)
;
}
async
function
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
{
const
INTEREST_GROUP_LIFETIME_SECS
=
60
;
let
interestGroup
=
{
owner
:
window
.
location
.
origin
name
:
DEFAULT_INTEREST_GROUP_NAME
ads
:
[
{
renderURL
:
createRenderURL
(
uuid
)
}
]
.
.
.
interestGroupOverrides
}
;
await
navigator
.
joinAdInterestGroup
(
interestGroup
INTEREST_GROUP_LIFETIME_SECS
)
;
test
.
add_cleanup
(
async
(
)
=
>
{
await
navigator
.
leaveAdInterestGroup
(
interestGroup
)
}
)
;
}
async
function
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
{
let
auctionConfig
=
{
seller
:
window
.
location
.
origin
interestGroupBuyers
:
[
window
.
location
.
origin
]
resolveToConfig
:
true
.
.
.
auctionConfigOverrides
}
;
return
await
navigator
.
runAdAuction
(
auctionConfig
)
;
}
async
function
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
)
{
let
config
=
await
runBasicFledgeAuction
(
test
uuid
auctionConfigOverrides
)
;
assert_true
(
config
instanceof
FencedFrameConfig
Wrong
value
type
returned
from
auction
:
{
config
.
constructor
.
type
}
)
;
let
fencedFrame
=
document
.
createElement
(
'
fencedframe
'
)
;
fencedFrame
.
mode
=
'
opaque
-
ads
'
;
fencedFrame
.
config
=
config
;
document
.
body
.
appendChild
(
fencedFrame
)
;
test
.
add_cleanup
(
(
)
=
>
{
document
.
body
.
removeChild
(
fencedFrame
)
;
}
)
;
}
async
function
runBasicFledgeTestExpectingNoWinner
(
test
testConfig
)
{
const
uuid
=
generateUuid
(
test
)
;
await
joinInterestGroup
(
test
uuid
testConfig
.
interestGroupOverrides
)
;
let
result
=
await
runBasicFledgeAuction
(
test
uuid
testConfig
.
auctionConfigOverrides
)
;
assert_true
(
result
=
=
=
null
'
Auction
unexpectedly
had
a
winner
'
)
;
}
async
function
runReportTest
(
test
uuid
codeToInsert
expectedNumReports
=
0
overrides
=
{
}
)
{
let
generateBid
=
codeToInsert
.
generateBid
;
let
scoreAd
=
codeToInsert
.
scoreAd
;
let
reportWin
=
codeToInsert
.
reportWin
;
let
reportResult
=
codeToInsert
.
reportResult
;
let
extraInterestGroupOverrides
=
overrides
.
joinAdInterestGroup
|
|
{
}
let
extraAuctionConfigOverrides
=
overrides
.
runAdAuction
|
|
{
}
let
interestGroupOverrides
=
{
biddingLogicURL
:
createBiddingScriptURL
(
{
generateBid
reportWin
}
)
.
.
.
extraInterestGroupOverrides
}
;
let
auctionConfigOverrides
=
{
decisionLogicURL
:
createDecisionScriptURL
(
uuid
{
scoreAd
reportResult
}
)
.
.
.
extraAuctionConfigOverrides
}
await
joinInterestGroup
(
test
uuid
interestGroupOverrides
)
;
await
runBasicFledgeAuctionAndNavigate
(
test
uuid
auctionConfigOverrides
)
;
if
(
expectedNumReports
)
{
await
waitForObservedReports
(
uuid
expectedNumReports
)
;
}
}
