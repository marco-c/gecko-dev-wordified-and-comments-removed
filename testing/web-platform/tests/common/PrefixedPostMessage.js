var
PrefixedMessage
=
function
(
)
{
this
.
prefix
=
'
'
;
this
.
param
=
'
prefixedMessage
'
;
}
;
PrefixedMessage
.
prototype
.
url
=
function
(
uri
)
{
function
updateUrlParameter
(
uri
key
value
)
{
var
i
=
uri
.
indexOf
(
'
#
'
)
;
var
hash
=
(
i
=
=
=
-
1
)
?
'
'
:
uri
.
substr
(
i
)
;
uri
=
(
i
=
=
=
-
1
)
?
uri
:
uri
.
substr
(
0
i
)
;
var
re
=
new
RegExp
(
(
[
?
&
]
)
{
key
}
=
.
*
?
(
&
|
)
'
i
'
)
;
var
separator
=
uri
.
indexOf
(
'
?
'
)
!
=
=
-
1
?
'
&
'
:
'
?
'
;
uri
=
(
uri
.
match
(
re
)
)
?
uri
.
replace
(
re
1
{
key
}
=
{
value
}
2
)
:
{
uri
}
{
separator
}
{
key
}
=
{
value
}
;
return
uri
+
hash
;
}
return
updateUrlParameter
(
uri
this
.
param
this
.
prefix
)
;
}
;
PrefixedMessage
.
prototype
.
onMessage
=
function
(
fn
)
{
window
.
addEventListener
(
'
message
'
e
=
>
{
if
(
typeof
e
.
data
=
=
=
'
object
'
&
&
e
.
data
.
hasOwnProperty
(
'
prefix
'
)
)
{
if
(
e
.
data
.
prefix
=
=
=
this
.
prefix
)
{
fn
.
call
(
this
e
.
data
.
data
e
)
;
window
.
removeEventListener
(
'
message
'
fn
)
;
}
}
}
)
;
}
;
var
PrefixedMessageTest
=
function
(
)
{
PrefixedMessage
.
call
(
this
)
;
this
.
prefix
=
{
document
.
location
.
pathname
}
-
{
Math
.
random
(
)
}
-
{
Date
.
now
(
)
}
-
;
}
;
PrefixedMessageTest
.
prototype
=
Object
.
create
(
PrefixedMessage
.
prototype
)
;
PrefixedMessageTest
.
prototype
.
constructor
=
PrefixedMessageTest
;
var
PrefixedMessageResource
=
function
(
)
{
PrefixedMessage
.
call
(
this
)
;
var
regex
=
new
RegExp
(
[
?
&
]
{
this
.
param
}
(
=
(
[
^
&
#
]
*
)
|
&
|
#
|
)
)
results
=
regex
.
exec
(
document
.
location
.
href
)
;
if
(
results
&
&
results
[
2
]
)
{
this
.
prefix
=
results
[
2
]
;
}
}
;
PrefixedMessageResource
.
prototype
=
Object
.
create
(
PrefixedMessage
.
prototype
)
;
PrefixedMessageResource
.
prototype
.
constructor
=
PrefixedMessageResource
;
PrefixedMessageResource
.
prototype
.
postToOpener
=
function
(
data
)
{
if
(
window
.
opener
)
{
window
.
opener
.
postMessage
(
{
prefix
:
this
.
prefix
data
:
data
}
'
*
'
)
;
}
}
;
