var
PrefixedLocalStorage
=
function
(
)
{
this
.
prefix
=
'
'
;
this
.
param
=
'
prefixedLocalStorage
'
;
}
;
PrefixedLocalStorage
.
prototype
.
clear
=
function
(
)
{
if
(
this
.
prefix
=
=
=
'
'
)
{
return
;
}
Object
.
keys
(
localStorage
)
.
forEach
(
sKey
=
>
{
if
(
sKey
.
indexOf
(
this
.
prefix
)
=
=
=
0
)
{
localStorage
.
removeItem
(
sKey
)
;
}
}
)
;
}
;
PrefixedLocalStorage
.
prototype
.
url
=
function
(
uri
)
{
function
updateUrlParameter
(
uri
key
value
)
{
var
i
=
uri
.
indexOf
(
'
#
'
)
;
var
hash
=
(
i
=
=
=
-
1
)
?
'
'
:
uri
.
substr
(
i
)
;
uri
=
(
i
=
=
=
-
1
)
?
uri
:
uri
.
substr
(
0
i
)
;
var
re
=
new
RegExp
(
(
[
?
&
]
)
{
key
}
=
.
*
?
(
&
|
)
'
i
'
)
;
var
separator
=
uri
.
indexOf
(
'
?
'
)
!
=
=
-
1
?
'
&
'
:
'
?
'
;
uri
=
(
uri
.
match
(
re
)
)
?
uri
.
replace
(
re
1
{
key
}
=
{
value
}
2
)
:
{
uri
}
{
separator
}
{
key
}
=
{
value
}
;
return
uri
+
hash
;
}
return
updateUrlParameter
(
uri
this
.
param
this
.
prefix
)
;
}
;
PrefixedLocalStorage
.
prototype
.
prefixedKey
=
function
(
baseKey
)
{
return
{
this
.
prefix
}
{
baseKey
}
;
}
;
PrefixedLocalStorage
.
prototype
.
setItem
=
function
(
baseKey
value
)
{
localStorage
.
setItem
(
this
.
prefixedKey
(
baseKey
)
value
)
;
}
;
PrefixedLocalStorage
.
prototype
.
onSet
=
function
(
baseKey
fn
)
{
window
.
addEventListener
(
'
storage
'
e
=
>
{
var
match
=
this
.
prefixedKey
(
baseKey
)
;
if
(
e
.
newValue
!
=
=
null
&
&
e
.
key
.
indexOf
(
match
)
=
=
=
0
)
{
fn
.
call
(
this
e
)
;
}
}
)
;
}
;
var
PrefixedLocalStorageTest
=
function
(
)
{
PrefixedLocalStorage
.
call
(
this
)
;
this
.
prefix
=
{
document
.
location
.
pathname
}
-
{
Math
.
random
(
)
}
-
{
Date
.
now
(
)
}
-
;
}
;
PrefixedLocalStorageTest
.
prototype
=
Object
.
create
(
PrefixedLocalStorage
.
prototype
)
;
PrefixedLocalStorageTest
.
prototype
.
constructor
=
PrefixedLocalStorageTest
;
PrefixedLocalStorageTest
.
prototype
.
cleanup
=
function
(
)
{
this
.
setItem
(
'
closeAll
'
'
true
'
)
;
this
.
clear
(
)
;
}
;
var
PrefixedLocalStorageResource
=
function
(
options
)
{
PrefixedLocalStorage
.
call
(
this
)
;
this
.
options
=
Object
.
assign
(
{
}
{
close_on_cleanup
:
false
}
options
|
|
{
}
)
;
var
regex
=
new
RegExp
(
[
?
&
]
{
this
.
param
}
(
=
(
[
^
&
#
]
*
)
|
&
|
#
|
)
)
results
=
regex
.
exec
(
document
.
location
.
href
)
;
if
(
results
&
&
results
[
2
]
)
{
this
.
prefix
=
results
[
2
]
;
}
if
(
this
.
options
.
close_on_cleanup
)
{
this
.
onSet
(
'
closeAll
'
(
)
=
>
{
window
.
close
(
)
;
}
)
;
}
}
;
PrefixedLocalStorageResource
.
prototype
=
Object
.
create
(
PrefixedLocalStorage
.
prototype
)
;
PrefixedLocalStorageResource
.
prototype
.
constructor
=
PrefixedLocalStorageResource
;
