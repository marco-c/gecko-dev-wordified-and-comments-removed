const
mimeType
=
'
application
/
javascript
'
;
promise_test
(
async
t
=
>
{
const
nestedWorkerScriptURL
=
new
URL
(
'
/
workers
/
support
/
post
-
message
-
on
-
load
-
worker
.
js
'
location
.
href
)
;
const
frameCode
=
<
script
>
try
{
const
worker
=
new
Worker
(
'
{
nestedWorkerScriptURL
}
'
)
;
worker
.
onmessage
=
e
=
>
{
window
.
parent
.
postMessage
(
'
Worker
construction
unexpectedly
succeeded
'
'
*
'
)
;
}
;
worker
.
onerror
=
e
=
>
window
.
parent
.
postMessage
(
'
PASS
'
'
*
'
)
;
}
catch
(
e
)
{
/
/
Cross
-
origin
request
should
asynchronously
fail
during
worker
script
/
/
fetch
because
its
request
mode
is
'
same
-
origin
'
.
window
.
parent
.
postMessage
(
'
Worker
construction
unexpectedly
synchronously
failed
'
'
*
'
)
;
}
<
/
script
>
;
const
p
=
new
Promise
(
r
=
>
window
.
onmessage
=
e
=
>
r
(
e
.
data
)
)
;
const
frame
=
await
with_iframe
(
data
:
text
/
html
;
base64
{
btoa
(
frameCode
)
}
)
;
const
result
=
await
p
;
assert_equals
(
result
'
PASS
'
)
;
}
'
Create
a
dedicated
worker
in
a
data
url
frame
'
)
;
promise_test
(
async
t
=
>
{
const
nestedWorkerScriptURL
=
new
URL
(
'
/
workers
/
support
/
post
-
message
-
on
-
load
-
worker
.
js
'
location
.
href
)
;
const
workerCode
=
try
{
const
worker
=
new
Worker
(
'
{
nestedWorkerScriptURL
}
'
)
;
worker
.
onmessage
=
e
=
>
postMessage
(
'
Worker
construction
unexpectedly
succeeded
'
)
;
worker
.
onerror
=
e
=
>
postMessage
(
'
PASS
'
)
;
}
catch
(
e
)
{
/
/
Cross
-
origin
request
should
asynchronously
fail
during
worker
script
/
/
fetch
because
its
request
mode
is
'
same
-
origin
'
.
postMessage
(
'
Worker
construction
unexpectedly
synchronously
failed
'
)
;
}
;
const
result
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
const
worker
=
new
Worker
(
data
:
{
mimeType
}
;
base64
{
btoa
(
workerCode
)
}
)
;
worker
.
onmessage
=
e
=
>
resolve
(
e
.
data
)
;
worker
.
onerror
=
e
=
>
reject
(
e
.
message
)
;
}
)
;
assert_equals
(
result
'
PASS
'
)
;
}
'
Create
a
dedicated
worker
in
a
data
url
dedicated
worker
'
)
;
promise_test
(
async
t
=
>
{
const
frameCode
=
<
script
>
const
worker
=
new
Worker
(
'
data
:
{
mimeType
}
postMessage
(
"
PASS
"
)
;
'
)
;
worker
.
onmessage
=
e
=
>
window
.
parent
.
postMessage
(
e
.
data
'
*
'
)
;
worker
.
onerror
=
e
=
>
{
window
.
parent
.
postMessage
(
'
FAIL
:
'
+
e
.
message
'
*
'
)
;
}
;
<
/
script
>
;
const
p
=
new
Promise
(
r
=
>
window
.
onmessage
=
e
=
>
r
(
e
.
data
)
)
;
const
frame
=
await
with_iframe
(
data
:
text
/
html
;
base64
{
btoa
(
frameCode
)
}
)
;
const
result
=
await
p
;
assert_equals
(
result
'
PASS
'
)
;
}
'
Create
a
data
url
dedicated
worker
in
a
data
url
frame
'
)
;
promise_test
(
async
t
=
>
{
const
workerCode
=
const
worker
=
new
Worker
(
'
data
:
{
mimeType
}
postMessage
(
"
PASS
"
)
;
'
)
;
worker
.
onmessage
=
e
=
>
postMessage
(
e
.
data
)
;
worker
.
onerror
=
e
=
>
postMessage
(
'
FAIL
:
'
+
e
.
message
)
;
;
const
result
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
const
worker
=
new
Worker
(
data
:
{
mimeType
}
;
base64
{
btoa
(
workerCode
)
}
)
;
worker
.
onmessage
=
e
=
>
resolve
(
e
.
data
)
;
worker
.
onerror
=
e
=
>
reject
(
e
.
message
)
;
}
)
;
assert_equals
(
result
'
PASS
'
)
;
}
'
Create
a
data
url
dedicated
worker
in
a
data
url
dedicated
worker
'
)
;
