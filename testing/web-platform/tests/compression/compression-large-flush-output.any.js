'
use
strict
'
;
async
function
compressData
(
chunk
format
)
{
const
cs
=
new
CompressionStream
(
format
)
;
const
writer
=
cs
.
writable
.
getWriter
(
)
;
writer
.
write
(
chunk
)
;
writer
.
close
(
)
;
return
await
concatenateStream
(
cs
.
readable
)
;
}
const
fullData
=
new
TextEncoder
(
)
.
encode
(
JSON
.
stringify
(
Array
.
from
(
{
length
:
10_000
}
(
_
i
)
=
>
i
)
)
)
;
const
data
=
fullData
.
subarray
(
0
35_579
)
;
const
expectedValue
=
data
;
promise_test
(
async
t
=
>
{
const
compressedData
=
await
compressData
(
data
'
deflate
'
)
;
assert_array_equals
(
expectedValue
pako
.
inflate
(
compressedData
)
'
value
should
match
'
)
;
}
deflate
compression
with
large
flush
output
)
;
promise_test
(
async
t
=
>
{
const
compressedData
=
await
compressData
(
data
'
gzip
'
)
;
assert_array_equals
(
expectedValue
pako
.
inflate
(
compressedData
)
'
value
should
match
'
)
;
}
gzip
compression
with
large
flush
output
)
;
promise_test
(
async
t
=
>
{
const
compressedData
=
await
compressData
(
data
'
deflate
-
raw
'
)
;
assert_array_equals
(
expectedValue
pako
.
inflateRaw
(
compressedData
)
'
value
should
match
'
)
;
}
deflate
-
raw
compression
with
large
flush
output
)
;
