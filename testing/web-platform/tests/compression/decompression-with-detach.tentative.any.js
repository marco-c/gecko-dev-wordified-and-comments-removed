'
use
strict
'
;
const
kInputLength
=
1000000
;
async
function
createLargeCompressedInput
(
)
{
const
cs
=
new
CompressionStream
(
'
deflate
'
)
;
const
writer
=
cs
.
writable
.
getWriter
(
)
;
writer
.
write
(
new
Uint8Array
(
kInputLength
)
)
;
writer
.
close
(
)
;
return
concatenateStream
(
cs
.
readable
)
;
}
promise_test
(
async
(
)
=
>
{
const
input
=
await
createLargeCompressedInput
(
)
;
const
ds
=
new
DecompressionStream
(
'
deflate
'
)
;
const
writer
=
ds
.
writable
.
getWriter
(
)
;
writer
.
write
(
input
)
;
writer
.
close
(
)
;
Object
.
defineProperty
(
Object
.
prototype
'
then
'
{
get
(
)
{
try
{
postMessage
(
undefined
'
nowhere
'
[
input
.
buffer
]
)
;
}
catch
(
e
)
{
}
}
}
)
;
const
output
=
await
concatenateStream
(
ds
.
readable
)
;
assert_equals
(
output
.
byteLength
kInputLength
'
output
should
be
the
right
length
'
)
;
}
'
data
should
be
correctly
decompressed
even
if
input
is
detached
partway
'
)
;
