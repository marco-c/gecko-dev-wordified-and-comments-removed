function
runTest
(
config
qualifier
)
{
function
checkEncryptionScheme
(
encryptionScheme
)
{
var
simpleConfig
=
getSimpleConfiguration
(
)
;
assert_greater_than
(
simpleConfig
[
0
]
.
audioCapabilities
.
length
0
)
;
simpleConfig
[
0
]
.
audioCapabilities
.
forEach
(
function
(
capability
)
{
capability
.
encryptionScheme
=
encryptionScheme
;
}
)
;
return
navigator
.
requestMediaKeySystemAccess
(
config
.
keysystem
simpleConfig
)
.
then
(
function
(
access
)
{
var
actualConfiguration
=
access
.
getConfiguration
(
)
;
for
(
let
i
=
0
;
i
<
actualConfiguration
.
audioCapabilities
.
length
;
i
+
+
)
{
const
capability
=
actualConfiguration
.
audioCapabilities
[
i
]
;
if
(
!
(
'
encryptionScheme
'
in
capability
)
)
{
return
Promise
.
reject
(
'
Not
implemented
'
)
;
}
assert_equals
(
capability
.
encryptionScheme
encryptionScheme
)
;
}
return
Promise
.
resolve
(
'
Supported
'
)
;
}
function
error
(
)
{
return
Promise
.
resolve
(
'
Not
supported
'
)
;
}
)
;
}
promise_test
(
(
)
=
>
checkEncryptionScheme
(
'
cenc
'
)
testnamePrefix
(
qualifier
config
.
keysystem
)
+
'
support
for
"
cenc
"
encryption
scheme
.
'
)
;
promise_test
(
(
)
=
>
checkEncryptionScheme
(
'
cbcs
'
)
testnamePrefix
(
qualifier
config
.
keysystem
)
+
'
support
for
"
cbcs
"
encryption
scheme
.
'
)
;
}
