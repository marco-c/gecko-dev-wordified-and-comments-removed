'
use
strict
'
;
const
kMinimalDoc
=
[
"
<
!
doctype
html
>
"
"
<
meta
charset
=
utf
-
8
>
"
"
<
title
>
Loaded
<
/
title
>
"
]
.
join
(
"
"
)
;
setup
(
(
)
=
>
{
assert_implements
(
document
.
addressSpace
)
;
assert_implements_optional
(
document
.
addressSpace
=
=
"
local
"
)
;
}
)
;
promise_test
(
t
=
>
{
return
append_child_frame_with
(
t
document
(
)
=
>
{
}
)
.
then
(
child
=
>
{
assert_equals
(
child
.
contentDocument
.
addressSpace
"
local
"
)
;
}
)
;
}
"
About
:
blank
iframe
'
s
addressSpace
is
inherited
from
the
root
.
"
)
;
promise_test
(
t
=
>
{
return
append_child_frame_with
(
t
document
child
=
>
{
child
.
srcdoc
=
kMinimalDoc
;
}
)
.
then
(
child
=
>
{
assert_equals
(
child
.
contentDocument
.
title
"
Loaded
"
)
;
assert_equals
(
child
.
contentDocument
.
addressSpace
"
local
"
)
;
}
)
;
}
"
About
:
srcdoc
iframe
'
s
addressSpace
is
inherited
from
the
root
.
"
)
;
promise_test
(
t
=
>
{
const
event_received
=
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
message
"
resolve
)
;
}
)
;
const
script
=
"
window
.
parent
.
postMessage
(
document
.
addressSpace
'
*
'
)
;
"
;
const
url
=
"
data
:
text
/
html
<
script
>
"
+
script
+
"
<
/
script
>
"
;
return
append_child_frame
(
t
document
url
)
.
then
(
(
)
=
>
event_received
)
.
then
(
evt
=
>
{
assert_equals
(
evt
.
data
"
local
"
)
;
}
)
;
}
"
Data
:
iframe
'
s
addressSpace
is
inherited
from
the
root
.
"
)
;
promise_test
(
t
=
>
{
const
blob
=
new
Blob
(
[
kMinimalDoc
]
{
type
:
"
text
/
html
"
}
)
;
return
append_child_frame
(
t
document
URL
.
createObjectURL
(
blob
)
)
.
then
(
child
=
>
{
assert_equals
(
child
.
contentDocument
.
title
"
Loaded
"
)
;
assert_equals
(
child
.
contentDocument
.
addressSpace
"
local
"
)
;
}
)
;
}
"
Blob
:
iframe
'
s
addressSpace
is
inherited
from
the
root
.
"
)
;
promise_test
(
t
=
>
{
return
append_child_frame
(
t
document
"
resources
/
title
.
html
"
)
.
then
(
child
=
>
{
assert_equals
(
child
.
contentDocument
.
title
"
Loaded
"
)
;
assert_equals
(
child
.
contentDocument
.
addressSpace
"
local
"
)
;
}
)
;
}
"
Local
iframe
'
s
addressSpace
is
local
.
"
)
;
promise_test
(
t
=
>
{
return
append_child_frame
(
t
document
"
resources
/
treat
-
as
-
public
-
address
.
html
"
)
.
then
(
child
=
>
{
assert_equals
(
child
.
contentDocument
.
title
"
Loaded
"
)
;
assert_equals
(
child
.
contentDocument
.
addressSpace
"
public
"
)
;
}
)
;
}
"
Treat
-
as
-
public
-
address
iframe
'
s
addressSpace
is
public
.
"
)
;
promise_test
(
t
=
>
{
return
append_child_frame
(
t
document
"
resources
/
title
.
html
"
)
.
then
(
child
=
>
{
const
doc
=
child
.
contentDocument
;
assert_equals
(
doc
.
title
"
Loaded
"
"
child
"
)
;
assert_equals
(
doc
.
addressSpace
"
local
"
"
child
"
)
;
return
append_child_frame
(
t
doc
"
resources
/
treat
-
as
-
public
-
address
.
html
"
)
;
}
)
.
then
(
grandchild
=
>
{
const
doc
=
grandchild
.
contentDocument
;
assert_equals
(
doc
.
title
"
Loaded
"
"
grandchild
"
)
;
assert_equals
(
doc
.
addressSpace
"
local
"
"
grandchild
"
)
;
}
)
;
}
"
Local
-
local
grandchild
iframe
'
s
addressSpace
is
local
.
"
)
;
