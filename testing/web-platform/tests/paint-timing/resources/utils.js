const
numMillisecondsWait
=
50
;
const
numFramesWaiting
=
3
;
function
waitTime
(
t
)
{
return
new
Promise
(
resolve
=
>
t
.
step_timeout
(
resolve
numMillisecondsWait
)
)
;
}
function
waitForAnimationFrames
(
count
)
{
return
new
Promise
(
resolve
=
>
{
if
(
count
-
-
<
=
0
)
{
resolve
(
)
;
}
else
{
requestAnimationFrame
(
(
)
=
>
{
waitForAnimationFrames
(
count
)
.
then
(
resolve
)
;
}
)
;
}
}
)
;
}
async
function
assertNoFirstContentfulPaint
(
t
)
{
if
(
t
)
await
waitTime
(
t
)
;
await
waitForAnimationFrames
(
numFramesWaiting
)
;
assert_equals
(
performance
.
getEntriesByName
(
'
first
-
contentful
-
paint
'
)
.
length
0
'
First
contentful
paint
marked
too
early
.
'
)
;
}
async
function
assertFirstContentfulPaint
(
t
)
{
if
(
t
)
await
waitTime
(
t
)
;
await
waitForAnimationFrames
(
numFramesWaiting
)
;
assert_equals
(
performance
.
getEntriesByName
(
'
first
-
contentful
-
paint
'
)
.
length
1
'
Expected
first
contentful
paint
not
found
.
'
)
;
}
async
function
test_fcp
(
label
)
{
const
style
=
document
.
createElement
(
'
style
'
)
;
document
.
head
.
appendChild
(
style
)
;
await
promise_test
(
async
t
=
>
{
assert_precondition
(
window
.
PerformancePaintTiming
"
Paint
Timing
isn
'
t
supported
.
"
)
;
const
main
=
document
.
getElementById
(
'
main
'
)
;
await
new
Promise
(
r
=
>
window
.
addEventListener
(
'
load
'
r
)
)
;
await
assertNoFirstContentfulPaint
(
)
;
main
.
className
=
'
preFCP
'
;
await
assertNoFirstContentfulPaint
(
)
;
main
.
className
=
'
contentful
'
;
await
assertFirstContentfulPaint
(
)
;
}
label
)
;
}
