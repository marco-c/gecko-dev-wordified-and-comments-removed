'
use
strict
'
;
const
DEVICE_NAME
=
'
LE
Device
'
;
const
DEVICE_ADDRESS
=
'
09
:
09
:
09
:
09
:
09
:
09
'
;
const
HEART_RATE_SERVICE_UUID
=
'
0000180d
-
0000
-
1000
-
8000
-
00805f9b34fb
'
const
DATE_TIME_CHARACTERISTIC_UUID
=
'
00002a08
-
0000
-
1000
-
8000
-
00805f9b34fb
'
const
CHARACTERISTIC_USER_DESCRIPTION_DESCRIPTOR_UUID
=
'
00002901
-
0000
-
1000
-
8000
-
00805f9b34fb
'
function
waitForDocumentReady
(
)
{
return
new
Promise
(
resolve
=
>
{
if
(
document
.
readyState
=
=
=
'
complete
'
)
{
resolve
(
)
;
}
window
.
addEventListener
(
'
load
'
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
async
function
callWithTrustedClick
(
callback
)
{
await
waitForDocumentReady
(
)
;
return
new
Promise
(
resolve
=
>
{
let
button
=
document
.
createElement
(
'
button
'
)
;
button
.
textContent
=
'
click
to
continue
test
'
;
button
.
style
.
display
=
'
block
'
;
button
.
style
.
fontSize
=
'
20px
'
;
button
.
style
.
padding
=
'
10px
'
;
button
.
onclick
=
(
)
=
>
{
document
.
body
.
removeChild
(
button
)
;
resolve
(
callback
(
)
)
;
}
;
document
.
body
.
appendChild
(
button
)
;
test_driver
.
click
(
button
)
;
}
)
;
}
function
selectFirstDeviceOnDevicePromptUpdated
(
)
{
return
test_driver
.
bidi
.
bluetooth
.
request_device_prompt_updated
.
once
(
)
.
then
(
(
promptEvent
)
=
>
{
assert_greater_than
(
promptEvent
.
devices
.
length
0
)
;
return
test_driver
.
bidi
.
bluetooth
.
handle_request_device_prompt
(
{
prompt
:
promptEvent
.
prompt
accept
:
true
device
:
promptEvent
.
devices
[
0
]
.
id
}
)
;
}
)
;
}
async
function
createGattConnection
(
device
)
{
const
simulationProcessedPromise
=
test_driver
.
bidi
.
bluetooth
.
gatt_connection_attempted
.
once
(
)
.
then
(
(
event
)
=
>
{
return
test_driver
.
bidi
.
bluetooth
.
simulate_gatt_connection_response
(
{
address
:
event
.
address
code
:
0x0
}
)
;
}
)
;
const
connectPromise
=
device
.
gatt
.
connect
(
)
;
await
Promise
.
all
(
[
connectPromise
simulationProcessedPromise
]
)
;
}
function
requestDeviceWithTrustedClick
(
.
.
.
args
)
{
return
callWithTrustedClick
(
(
)
=
>
navigator
.
bluetooth
.
requestDevice
(
.
.
.
args
)
)
;
}
function
bluetooth_test
(
test_function
name
)
{
return
promise_test
(
async
(
t
)
=
>
{
assert_implements
(
navigator
.
bluetooth
'
missing
navigator
.
bluetooth
'
)
;
await
test_driver
.
bidi
.
bluetooth
.
simulate_adapter
(
{
state
:
"
powered
-
on
"
}
)
;
await
test_driver
.
bidi
.
bluetooth
.
simulate_preconnected_peripheral
(
{
address
:
DEVICE_ADDRESS
name
:
DEVICE_NAME
manufacturerData
:
[
]
knownServiceUuids
:
[
]
}
)
;
try
{
await
test_function
(
t
)
;
}
finally
{
await
test_driver
.
bidi
.
bluetooth
.
disable_simulation
(
)
;
}
}
name
)
;
}
