function
endOfRange
(
r
)
{
return
'
count
'
in
r
?
r
.
begin
+
r
.
count
:
r
.
end
;
}
function
*
rangeAsIterator
(
r
)
{
for
(
let
i
=
r
.
begin
;
i
<
endOfRange
(
r
)
;
+
+
i
)
{
yield
i
;
}
}
export
class
SubresourceRange
{
constructor
(
subresources
)
{
this
.
mipRange
=
{
begin
:
subresources
.
mipRange
.
begin
end
:
endOfRange
(
subresources
.
mipRange
)
}
;
this
.
layerRange
=
{
begin
:
subresources
.
layerRange
.
begin
end
:
endOfRange
(
subresources
.
layerRange
)
}
;
}
*
each
(
)
{
for
(
let
level
=
this
.
mipRange
.
begin
;
level
<
this
.
mipRange
.
end
;
+
+
level
)
{
for
(
let
layer
=
this
.
layerRange
.
begin
;
layer
<
this
.
layerRange
.
end
;
+
+
layer
)
{
yield
{
level
layer
}
;
}
}
}
*
mipLevels
(
)
{
for
(
let
level
=
this
.
mipRange
.
begin
;
level
<
this
.
mipRange
.
end
;
+
+
level
)
{
yield
{
level
layers
:
rangeAsIterator
(
this
.
layerRange
)
}
;
}
}
}
