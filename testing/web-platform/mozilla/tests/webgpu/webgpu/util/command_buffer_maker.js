export
const
kRenderEncodeTypes
=
[
'
render
pass
'
'
render
bundle
'
]
;
export
const
kProgrammableEncoderTypes
=
[
'
compute
pass
'
.
.
.
kRenderEncodeTypes
]
;
export
const
kEncoderTypes
=
[
'
non
-
pass
'
.
.
.
kProgrammableEncoderTypes
]
;
export
class
CommandBufferMaker
{
constructor
(
t
encoder
finish
)
{
this
.
encoder
=
encoder
;
this
.
finish
=
finish
;
this
.
validateFinish
=
(
shouldSucceed
)
=
>
{
return
t
.
expectGPUError
(
'
validation
'
this
.
finish
!
shouldSucceed
)
;
}
;
this
.
validateFinishAndSubmit
=
(
shouldBeValid
submitShouldSucceedIfValid
)
=
>
{
const
commandBuffer
=
this
.
validateFinish
(
shouldBeValid
)
;
if
(
shouldBeValid
)
{
t
.
expectValidationError
(
(
)
=
>
t
.
queue
.
submit
(
[
commandBuffer
]
)
!
submitShouldSucceedIfValid
)
;
}
}
;
this
.
validateFinishAndSubmitGivenState
=
(
resourceState
)
=
>
{
this
.
validateFinishAndSubmit
(
resourceState
!
=
=
'
invalid
'
resourceState
!
=
=
'
destroyed
'
)
;
}
;
}
}
