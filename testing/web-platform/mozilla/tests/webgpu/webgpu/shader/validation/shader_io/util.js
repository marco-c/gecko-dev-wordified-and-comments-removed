export
function
generateShader
(
{
attribute
type
stage
io
use_struct
}
)
{
let
code
=
'
'
;
if
(
use_struct
)
{
code
+
=
'
struct
S
{
\
n
'
;
code
+
=
{
attribute
}
value
:
{
type
}
\
n
;
if
(
stage
=
=
=
'
vertex
'
&
&
io
=
=
=
'
out
'
&
&
!
attribute
.
includes
(
'
builtin
(
position
)
'
)
)
{
code
+
=
builtin
(
position
)
position
:
vec4
<
f32
>
\
n
;
}
code
+
=
'
}
;
\
n
\
n
'
;
}
if
(
stage
!
=
=
'
'
)
{
code
+
=
{
stage
}
;
if
(
stage
=
=
=
'
compute
'
)
{
code
+
=
'
workgroup_size
(
1
)
'
;
}
}
let
param
=
'
'
;
let
retType
=
'
'
;
let
retVal
=
'
'
;
if
(
io
=
=
=
'
in
'
)
{
if
(
use_struct
)
{
param
=
in
:
S
;
}
else
{
param
=
{
attribute
}
value
:
{
type
}
;
}
if
(
stage
=
=
=
'
vertex
'
)
{
retType
=
-
>
builtin
(
position
)
vec4
<
f32
>
;
retVal
=
return
vec4
<
f32
>
(
)
;
;
}
}
else
if
(
io
=
=
=
'
out
'
)
{
if
(
use_struct
)
{
retType
=
'
-
>
S
'
;
retVal
=
return
S
(
)
;
;
}
else
{
retType
=
-
>
{
attribute
}
{
type
}
;
retVal
=
return
{
type
}
(
)
;
;
}
}
code
+
=
fn
main
(
{
param
}
)
{
retType
}
{
{
retVal
}
}
;
return
code
;
}
