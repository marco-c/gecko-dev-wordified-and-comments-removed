import
{
isAbstractType
isConvertible
Type
VectorType
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
util
/
conversion
.
js
'
;
export
function
resultType
(
args
)
{
const
{
lhs
rhs
canConvertScalarToVector
}
=
args
;
if
(
lhs
=
=
=
rhs
)
{
return
lhs
;
}
if
(
lhs
instanceof
VectorType
&
&
rhs
instanceof
VectorType
)
{
if
(
lhs
.
width
!
=
=
rhs
.
width
)
{
return
null
;
}
const
elementType
=
resultType
(
{
lhs
:
lhs
.
elementType
rhs
:
rhs
.
elementType
canConvertScalarToVector
}
)
;
return
elementType
!
=
=
null
?
Type
.
vec
(
lhs
.
width
elementType
)
:
null
;
}
if
(
args
.
canConvertScalarToVector
)
{
if
(
lhs
instanceof
VectorType
&
&
!
(
rhs
instanceof
VectorType
)
)
{
const
elementType
=
resultType
(
{
lhs
:
lhs
.
elementType
rhs
canConvertScalarToVector
}
)
;
return
elementType
!
=
=
null
?
Type
.
vec
(
lhs
.
width
elementType
)
:
null
;
}
if
(
!
(
lhs
instanceof
VectorType
)
&
&
rhs
instanceof
VectorType
)
{
const
elementType
=
resultType
(
{
lhs
rhs
:
rhs
.
elementType
canConvertScalarToVector
}
)
;
return
elementType
!
=
=
null
?
Type
.
vec
(
rhs
.
width
elementType
)
:
null
;
}
}
if
(
isAbstractType
(
lhs
)
|
|
isAbstractType
(
rhs
)
)
{
if
(
isConvertible
(
lhs
rhs
)
)
{
return
rhs
;
}
if
(
isConvertible
(
rhs
lhs
)
)
{
return
lhs
;
}
}
return
null
;
}
