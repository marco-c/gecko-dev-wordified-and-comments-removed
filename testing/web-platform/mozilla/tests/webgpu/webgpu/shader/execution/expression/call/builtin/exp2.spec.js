export
const
description
=
Execution
tests
for
the
'
exp2
'
builtin
function
S
is
AbstractFloat
f32
f16
T
is
S
or
vecN
<
S
>
const
fn
exp2
(
e
:
T
)
-
>
T
Returns
2
raised
to
the
power
e
(
e
.
g
.
2
^
e
)
.
Component
-
wise
when
T
is
a
vector
.
;
import
{
makeTestGroup
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
common
/
framework
/
test_group
.
js
'
;
import
{
GPUTest
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
gpu_test
.
js
'
;
import
{
kValue
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
constants
.
js
'
;
import
{
TypeF32
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
conversion
.
js
'
;
import
{
exp2Interval
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
f32_interval
.
js
'
;
import
{
biasedRange
linearRange
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
math
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
import
{
allInputSources
generateUnaryToF32IntervalCases
run
}
from
'
.
.
/
.
.
/
expression
.
js
'
;
import
{
builtin
}
from
'
.
/
builtin
.
js
'
;
export
const
g
=
makeTestGroup
(
GPUTest
)
;
const
inputs
=
[
0
-
128
kValue
.
f32
.
negative
.
min
.
.
.
biasedRange
(
kValue
.
f32
.
negative
.
max
-
127
100
)
.
.
.
biasedRange
(
kValue
.
f32
.
positive
.
min
127
100
)
.
.
.
linearRange
(
128
1023
10
)
]
;
export
const
d
=
makeCaseCache
(
'
exp2
'
{
f32_const
:
(
)
=
>
{
return
generateUnaryToF32IntervalCases
(
inputs
'
f32
-
only
'
exp2Interval
)
;
}
f32_non_const
:
(
)
=
>
{
return
generateUnaryToF32IntervalCases
(
inputs
'
unfiltered
'
exp2Interval
)
;
}
}
)
;
g
.
test
(
'
abstract_float
'
)
.
specURL
(
'
https
:
/
/
www
.
w3
.
org
/
TR
/
WGSL
/
#
float
-
builtin
-
functions
'
)
.
desc
(
abstract
float
tests
)
.
params
(
u
=
>
u
.
combine
(
'
inputSource
'
allInputSources
)
.
combine
(
'
vectorize
'
[
undefined
2
3
4
]
)
)
.
unimplemented
(
)
;
g
.
test
(
'
f32
'
)
.
specURL
(
'
https
:
/
/
www
.
w3
.
org
/
TR
/
WGSL
/
#
float
-
builtin
-
functions
'
)
.
desc
(
f32
tests
)
.
params
(
u
=
>
u
.
combine
(
'
inputSource
'
allInputSources
)
.
combine
(
'
vectorize
'
[
undefined
2
3
4
]
)
)
.
fn
(
async
t
=
>
{
const
cases
=
await
d
.
get
(
t
.
params
.
inputSource
=
=
=
'
const
'
?
'
f32_const
'
:
'
f32_non_const
'
)
;
await
run
(
t
builtin
(
'
exp2
'
)
[
TypeF32
]
TypeF32
t
.
params
cases
)
;
}
)
;
g
.
test
(
'
f16
'
)
.
specURL
(
'
https
:
/
/
www
.
w3
.
org
/
TR
/
WGSL
/
#
float
-
builtin
-
functions
'
)
.
desc
(
f16
tests
)
.
params
(
u
=
>
u
.
combine
(
'
inputSource
'
allInputSources
)
.
combine
(
'
vectorize
'
[
undefined
2
3
4
]
)
)
.
unimplemented
(
)
;
