import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
const
cases
=
[
'
f32
'
'
f16
'
'
abstract
'
]
.
map
(
(
trait
)
=
>
(
{
[
{
trait
}
]
:
(
)
=
>
{
return
FP
[
trait
]
.
generateScalarPairToIntervalCases
(
FP
[
trait
]
.
sparseScalarRange
(
)
FP
[
trait
]
.
sparseScalarRange
(
)
'
unfiltered
'
FP
[
trait
]
.
minInterval
)
;
}
}
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
min
'
cases
)
;
