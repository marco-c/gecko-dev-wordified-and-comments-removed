import
{
toVector
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
conversion
.
js
'
;
import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
selectNCases
}
from
'
.
.
/
.
.
/
case
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
function
makeCase
(
argumentKind
parameterKind
i
s
r
check
)
{
const
fp
=
FP
[
argumentKind
]
;
i
=
i
.
map
(
fp
.
quantize
)
;
s
=
s
.
map
(
fp
.
quantize
)
;
r
=
fp
.
quantize
(
r
)
;
const
vectors
=
FP
[
parameterKind
]
.
refractInterval
(
i
s
r
)
;
if
(
check
=
=
=
'
finite
'
&
&
vectors
.
some
(
(
e
)
=
>
!
e
.
isFinite
(
)
)
)
{
return
undefined
;
}
return
{
input
:
[
toVector
(
i
fp
.
scalarBuilder
)
toVector
(
s
fp
.
scalarBuilder
)
fp
.
scalarBuilder
(
r
)
]
expected
:
vectors
}
;
}
function
generateCases
(
argumentKind
parameterKind
param_is
param_ss
param_rs
check
)
{
return
param_is
.
flatMap
(
(
i
)
=
>
{
return
param_ss
.
flatMap
(
(
s
)
=
>
{
return
param_rs
.
map
(
(
r
)
=
>
{
return
makeCase
(
argumentKind
parameterKind
i
s
r
check
)
;
}
)
;
}
)
;
}
)
.
filter
(
(
c
)
=
>
c
!
=
=
undefined
)
;
}
const
cases
=
[
'
f32
'
'
f16
'
'
abstract
'
]
.
flatMap
(
(
trait
)
=
>
[
2
3
4
]
.
flatMap
(
(
dim
)
=
>
[
true
false
]
.
map
(
(
nonConst
)
=
>
(
{
[
{
trait
}
_vec
{
dim
}
_
{
nonConst
?
'
non_const
'
:
'
const
'
}
]
:
(
)
=
>
{
if
(
trait
=
=
=
'
abstract
'
&
&
nonConst
)
{
return
[
]
;
}
if
(
trait
!
=
=
'
abstract
'
)
{
return
generateCases
(
trait
trait
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseScalarRange
(
)
nonConst
?
'
unfiltered
'
:
'
finite
'
)
;
}
else
{
return
selectNCases
(
'
faceForward
'
20
generateCases
(
trait
'
f32
'
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseScalarRange
(
)
nonConst
?
'
unfiltered
'
:
'
finite
'
)
)
;
}
}
}
)
)
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
refract
'
cases
)
;
