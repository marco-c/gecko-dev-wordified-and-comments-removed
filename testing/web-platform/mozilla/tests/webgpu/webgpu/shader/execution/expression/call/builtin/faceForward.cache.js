import
{
anyOf
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
compare
.
js
'
;
import
{
toVector
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
conversion
.
js
'
;
import
{
FP
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
floating_point
.
js
'
;
import
{
cartesianProduct
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
.
.
/
util
/
math
.
js
'
;
import
{
selectNCases
}
from
'
.
.
/
.
.
/
case
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
.
.
/
case_cache
.
js
'
;
function
makeCase
(
argumentKind
parameterKind
x
y
z
check
)
{
const
fp
=
FP
[
argumentKind
]
;
x
=
x
.
map
(
fp
.
quantize
)
;
y
=
y
.
map
(
fp
.
quantize
)
;
z
=
z
.
map
(
fp
.
quantize
)
;
const
results
=
FP
[
parameterKind
]
.
faceForwardIntervals
(
x
y
z
)
;
if
(
check
=
=
=
'
finite
'
&
&
results
.
some
(
(
r
)
=
>
r
=
=
=
undefined
)
)
{
return
undefined
;
}
const
define_results
=
results
.
filter
(
(
r
)
=
>
r
!
=
=
undefined
)
;
return
{
input
:
[
toVector
(
x
fp
.
scalarBuilder
)
toVector
(
y
fp
.
scalarBuilder
)
toVector
(
z
fp
.
scalarBuilder
)
]
expected
:
anyOf
(
.
.
.
define_results
)
}
;
}
function
generateCases
(
argumentKind
parameterKind
xs
ys
zs
check
)
{
return
cartesianProduct
(
xs
ys
zs
)
.
map
(
(
e
)
=
>
makeCase
(
argumentKind
parameterKind
e
[
0
]
e
[
1
]
e
[
2
]
check
)
)
.
filter
(
(
c
)
=
>
c
!
=
=
undefined
)
;
}
const
cases
=
[
'
f32
'
'
f16
'
'
abstract
'
]
.
flatMap
(
(
trait
)
=
>
[
2
3
4
]
.
flatMap
(
(
dim
)
=
>
[
true
false
]
.
map
(
(
nonConst
)
=
>
(
{
[
{
trait
}
_vec
{
dim
}
_
{
nonConst
?
'
non_const
'
:
'
const
'
}
]
:
(
)
=
>
{
if
(
trait
=
=
=
'
abstract
'
&
&
nonConst
)
{
return
[
]
;
}
if
(
trait
!
=
=
'
abstract
'
)
{
return
generateCases
(
trait
trait
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
nonConst
?
'
unfiltered
'
:
'
finite
'
)
;
}
else
{
return
selectNCases
(
'
faceForward
'
20
generateCases
(
trait
'
f32
'
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
FP
[
trait
]
.
sparseVectorRange
(
dim
)
nonConst
?
'
unfiltered
'
:
'
finite
'
)
)
;
}
}
}
)
)
)
)
.
reduce
(
(
a
b
)
=
>
(
{
.
.
.
a
.
.
.
b
}
)
{
}
)
;
export
const
d
=
makeCaseCache
(
'
faceForward
'
cases
)
;
