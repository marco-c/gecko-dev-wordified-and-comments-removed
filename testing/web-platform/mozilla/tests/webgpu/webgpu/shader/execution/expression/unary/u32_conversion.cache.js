import
{
kValue
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
util
/
constants
.
js
'
;
import
{
abstractFloat
abstractInt
bool
f16
f32
i32
u32
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
util
/
conversion
.
js
'
;
import
{
fullI32Range
fullU32Range
quantizeToF16
quantizeToF32
scalarF16Range
scalarF32Range
scalarF64Range
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
util
/
math
.
js
'
;
import
{
reinterpretI32AsU32
}
from
'
.
.
/
.
.
/
.
.
/
.
.
/
util
/
reinterpret
.
js
'
;
import
{
makeCaseCache
}
from
'
.
.
/
case_cache
.
js
'
;
export
const
d
=
makeCaseCache
(
'
unary
/
u32_conversion
'
{
bool
:
(
)
=
>
{
return
[
{
input
:
bool
(
true
)
expected
:
u32
(
1
)
}
{
input
:
bool
(
false
)
expected
:
u32
(
0
)
}
]
;
}
abstractInt
:
(
)
=
>
{
return
fullU32Range
(
)
.
map
(
(
u
)
=
>
{
return
{
input
:
abstractInt
(
BigInt
(
u
)
)
expected
:
u32
(
u
)
}
;
}
)
;
}
u32
:
(
)
=
>
{
return
fullU32Range
(
)
.
map
(
(
u
)
=
>
{
return
{
input
:
u32
(
u
)
expected
:
u32
(
u
)
}
;
}
)
;
}
i32
:
(
)
=
>
{
return
fullI32Range
(
)
.
map
(
(
i
)
=
>
{
return
{
input
:
i32
(
i
)
expected
:
u32
(
reinterpretI32AsU32
(
i
)
)
}
;
}
)
;
}
abstractFloat
:
(
)
=
>
{
return
[
.
.
.
scalarF64Range
(
)
-
1
]
.
map
(
(
f
)
=
>
{
if
(
f
<
1
.
0
)
{
return
{
input
:
abstractFloat
(
f
)
expected
:
u32
(
0
)
}
;
}
if
(
f
>
=
kValue
.
u32
.
max
)
{
return
{
input
:
abstractFloat
(
f
)
expected
:
u32
(
kValue
.
u32
.
max
)
}
;
}
return
{
input
:
abstractFloat
(
f
)
expected
:
u32
(
Math
.
floor
(
f
)
)
}
;
}
)
;
}
f32
:
(
)
=
>
{
return
scalarF32Range
(
)
.
map
(
(
f
)
=
>
{
if
(
f
<
1
.
0
)
{
return
{
input
:
f32
(
f
)
expected
:
u32
(
0
)
}
;
}
if
(
f
>
=
kValue
.
u32
.
max
)
{
return
{
input
:
f32
(
f
)
expected
:
u32
(
kValue
.
u32
.
max
)
}
;
}
if
(
f
<
=
2
*
*
24
)
{
return
{
input
:
f32
(
f
)
expected
:
u32
(
Math
.
floor
(
f
)
)
}
;
}
return
{
input
:
f32
(
f
)
expected
:
u32
(
quantizeToF32
(
f
)
)
}
;
}
)
;
}
f16
:
(
)
=
>
{
return
scalarF16Range
(
)
.
map
(
(
f
)
=
>
{
if
(
f
<
1
.
0
)
{
return
{
input
:
f16
(
f
)
expected
:
u32
(
0
)
}
;
}
if
(
f
<
=
2
*
*
12
)
{
return
{
input
:
f16
(
f
)
expected
:
u32
(
Math
.
trunc
(
f
)
)
}
;
}
return
{
input
:
f16
(
f
)
expected
:
u32
(
quantizeToF16
(
f
)
)
}
;
}
)
;
}
}
)
;
