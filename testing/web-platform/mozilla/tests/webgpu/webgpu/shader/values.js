export
const
description
=
Special
and
sample
values
for
WGSL
scalar
types
;
import
{
assert
}
from
'
.
.
/
.
.
/
common
/
util
/
util
.
js
'
;
import
{
uint32ToFloat32
}
from
'
.
.
/
util
/
conversion
.
js
'
;
export
function
subnormalF32Examples
(
)
{
const
result_as_bits
=
[
]
;
const
max_mantissa
=
0x7f_ffff
;
const
sign_bits
=
[
0
0x8000_0000
]
;
for
(
const
sign_bit
of
sign_bits
)
{
const
sign_and_exponent
=
sign_bit
;
result_as_bits
.
push
(
sign_and_exponent
|
max_mantissa
)
;
for
(
let
lower_bits
=
1
;
lower_bits
<
=
max_mantissa
;
lower_bits
<
<
=
1
)
{
result_as_bits
.
push
(
sign_and_exponent
|
lower_bits
)
;
}
}
assert
(
result_as_bits
.
length
=
=
=
2
*
(
1
+
23
)
'
subnormal
number
sample
count
is
'
+
result_as_bits
.
length
.
toString
(
)
)
;
return
result_as_bits
.
map
(
(
u
)
=
>
uint32ToFloat32
(
u
)
)
;
}
export
function
normalF32Examples
(
)
{
const
result
=
[
1
.
0
-
2
.
0
]
;
const
max_mantissa_as_bits
=
0x7f_ffff
;
const
min_exponent_as_bits
=
0x0080_0000
;
const
max_exponent_as_bits
=
0x7f00_0000
;
const
sign_bits
=
[
0
0x8000_0000
]
;
for
(
const
sign_bit
of
sign_bits
)
{
for
(
let
e
=
min_exponent_as_bits
;
e
<
=
max_exponent_as_bits
;
e
+
=
min_exponent_as_bits
)
{
const
sign_and_exponent
=
sign_bit
|
e
;
result
.
push
(
uint32ToFloat32
(
sign_and_exponent
)
)
;
result
.
push
(
uint32ToFloat32
(
sign_and_exponent
|
max_mantissa_as_bits
)
)
;
for
(
let
lower_bits
=
1
;
lower_bits
<
=
max_mantissa_as_bits
;
lower_bits
<
<
=
1
)
{
result
.
push
(
uint32ToFloat32
(
sign_and_exponent
|
lower_bits
)
)
;
}
}
}
assert
(
result
.
length
=
=
=
2
+
2
*
254
*
25
'
normal
number
sample
count
is
'
+
result
.
length
.
toString
(
)
)
;
return
result
;
}
export
function
nanF32BitsExamples
(
)
{
const
result
=
[
]
;
const
exponent_bit
=
0x7f80_0000
;
const
sign_bits
=
[
0
0x8000_0000
]
;
for
(
const
sign_bit
of
sign_bits
)
{
const
sign_and_exponent
=
sign_bit
|
exponent_bit
;
const
bits
=
sign_and_exponent
|
0x40_0000
;
result
.
push
(
bits
)
;
for
(
const
quiet_signalling
of
[
0
0x40_0000
]
)
{
for
(
let
lower_bits
=
1
;
lower_bits
<
0x40_0000
;
lower_bits
<
<
=
1
)
{
const
bits
=
sign_and_exponent
|
quiet_signalling
|
lower_bits
;
result
.
push
(
bits
)
;
}
}
}
return
result
;
}
