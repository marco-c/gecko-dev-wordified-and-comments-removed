export
class
DataCache
{
setStore
(
dataStore
)
{
this
.
dataStore
=
dataStore
;
}
setDebugLogger
(
logger
)
{
this
.
debugLogger
=
logger
;
}
async
fetch
(
cacheable
)
{
let
data
=
this
.
cache
.
get
(
cacheable
.
path
)
;
if
(
data
!
=
=
undefined
)
{
this
.
log
(
'
in
-
memory
cache
hit
'
)
;
return
Promise
.
resolve
(
data
)
;
}
this
.
log
(
'
in
-
memory
cache
miss
'
)
;
if
(
this
.
dataStore
!
=
=
null
&
&
!
this
.
unavailableFiles
.
has
(
cacheable
.
path
)
)
{
let
serialized
;
try
{
serialized
=
await
this
.
dataStore
.
load
(
cacheable
.
path
)
;
this
.
log
(
'
loaded
serialized
'
)
;
}
catch
(
err
)
{
this
.
log
(
failed
to
load
(
{
cacheable
.
path
}
)
:
{
err
}
)
;
this
.
unavailableFiles
.
add
(
cacheable
.
path
)
;
}
if
(
serialized
!
=
=
undefined
)
{
this
.
log
(
deserializing
)
;
data
=
cacheable
.
deserialize
(
serialized
)
;
this
.
cache
.
set
(
cacheable
.
path
data
)
;
return
data
;
}
}
this
.
log
(
cache
:
building
(
{
cacheable
.
path
}
)
)
;
data
=
await
cacheable
.
build
(
)
;
this
.
cache
.
set
(
cacheable
.
path
data
)
;
return
data
;
}
log
(
msg
)
{
if
(
this
.
debugLogger
!
=
=
null
)
{
this
.
debugLogger
(
DataCache
:
{
msg
}
)
;
}
}
cache
=
new
Map
(
)
;
unavailableFiles
=
new
Set
(
)
;
dataStore
=
null
;
debugLogger
=
null
;
}
export
const
dataCache
=
new
DataCache
(
)
;
let
isBuildingDataCache
=
false
;
export
function
getIsBuildingDataCache
(
)
{
return
isBuildingDataCache
;
}
export
function
setIsBuildingDataCache
(
value
=
true
)
{
isBuildingDataCache
=
value
;
}
