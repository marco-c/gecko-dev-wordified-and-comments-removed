import
{
assert
}
from
'
.
.
/
util
/
util
.
js
'
;
import
{
comparePublicParamsPaths
Ordering
}
from
'
.
/
query
/
compare
.
js
'
;
import
{
kWildcard
kParamSeparator
kParamKVSeparator
}
from
'
.
/
query
/
separators
.
js
'
;
export
function
paramKeyIsPublic
(
key
)
{
return
!
key
.
startsWith
(
'
_
'
)
;
}
export
function
extractPublicParams
(
params
)
{
const
publicParams
=
{
}
;
for
(
const
k
of
Object
.
keys
(
params
)
)
{
if
(
paramKeyIsPublic
(
k
)
)
{
publicParams
[
k
]
=
params
[
k
]
;
}
}
return
publicParams
;
}
const
kPercent
=
'
%
'
;
export
const
badParamValueChars
=
new
RegExp
(
'
[
'
+
kParamKVSeparator
+
kParamSeparator
+
kWildcard
+
kPercent
+
'
]
'
)
;
export
function
publicParamsEquals
(
x
y
)
{
return
comparePublicParamsPaths
(
x
y
)
=
=
=
Ordering
.
Equal
;
}
function
typeAssert
(
)
{
}
{
{
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
typeAssert
(
)
;
}
}
export
function
mergeParams
(
a
b
)
{
return
{
.
.
.
a
.
.
.
b
}
;
}
export
function
mergeParamsChecked
(
a
b
)
{
const
merged
=
mergeParams
(
a
b
)
;
assert
(
Object
.
keys
(
merged
)
.
length
=
=
=
Object
.
keys
(
a
)
.
length
+
Object
.
keys
(
b
)
.
length
(
)
=
>
Duplicate
key
between
{
JSON
.
stringify
(
a
)
}
and
{
JSON
.
stringify
(
b
)
}
)
;
return
merged
;
}
