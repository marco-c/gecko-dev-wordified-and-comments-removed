import
{
extractImportantStackTrace
}
from
'
.
.
/
stack
.
js
'
;
export
class
LogMessageWithStack
extends
Error
{
stackHiddenMessage
=
undefined
;
static
wrapError
(
name
ex
)
{
return
new
LogMessageWithStack
(
{
name
message
:
ex
.
message
stackHiddenMessage
:
undefined
stack
:
ex
.
stack
extra
:
'
extra
'
in
ex
?
ex
.
extra
:
undefined
}
)
;
}
constructor
(
o
)
{
super
(
o
.
message
)
;
this
.
name
=
o
.
name
;
this
.
stackHiddenMessage
=
o
.
stackHiddenMessage
;
this
.
stack
=
o
.
stack
;
this
.
extra
=
o
.
extra
;
}
setStackHidden
(
stackHiddenMessage
)
{
this
.
stackHiddenMessage
?
?
=
stackHiddenMessage
;
}
toJSON
(
)
{
let
m
=
this
.
name
;
if
(
this
.
message
)
m
+
=
'
:
'
+
this
.
message
;
if
(
this
.
stack
)
{
if
(
this
.
stackHiddenMessage
=
=
=
undefined
)
{
m
+
=
'
\
n
'
+
extractImportantStackTrace
(
this
)
;
}
else
if
(
this
.
stackHiddenMessage
)
{
m
+
=
\
n
at
(
elided
:
{
this
.
stackHiddenMessage
}
)
;
}
}
return
m
;
}
toRawData
(
)
{
return
{
name
:
this
.
name
message
:
this
.
message
stackHiddenMessage
:
this
.
stackHiddenMessage
stack
:
this
.
stack
extra
:
this
.
extra
}
;
}
}
export
function
prettyPrintLog
(
log
)
{
return
'
-
'
+
log
.
toJSON
(
)
.
replace
(
/
\
n
/
g
'
\
n
'
)
;
}
