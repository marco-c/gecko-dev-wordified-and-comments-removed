let
1
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
"
)
;
let
2
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
"
)
;
let
3
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
"
)
;
let
M1
=
3
;
let
4
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
"
)
;
let
M2
=
4
;
assert_malformed
(
"
"
)
;
assert_malformed
(
"
\
x01
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
"
)
;
assert_malformed
(
"
\
x61
\
x73
\
x6d
\
x00
"
)
;
assert_malformed
(
"
\
x6d
\
x73
\
x61
\
x00
"
)
;
assert_malformed
(
"
\
x6d
\
x73
\
x61
\
x00
\
x01
\
x00
\
x00
\
x00
"
)
;
assert_malformed
(
"
\
x6d
\
x73
\
x61
\
x00
\
x00
\
x00
\
x00
\
x0d
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
\
x0d
\
x00
\
x00
\
x00
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
\
x0e
\
x00
\
x00
\
x00
"
)
;
assert_malformed
(
"
\
x00
\
x61
\
x73
\
x6d
\
x00
\
x00
\
x00
\
x0d
"
)
;
