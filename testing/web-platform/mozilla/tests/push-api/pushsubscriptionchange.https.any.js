let
registration
;
promise_setup
(
async
(
)
=
>
{
await
trySettingPermission
(
"
granted
"
)
;
registration
=
await
getActiveServiceWorker
(
"
push
-
sw
.
js
"
)
;
}
)
;
promise_test
(
async
(
t
)
=
>
{
const
promise
=
new
Promise
(
r
=
>
{
navigator
.
serviceWorker
.
addEventListener
(
"
message
"
r
{
once
:
true
}
)
}
)
;
const
subscription
=
await
registration
.
pushManager
.
subscribe
(
)
;
t
.
add_cleanup
(
(
)
=
>
subscription
.
unsubscribe
(
)
)
;
await
trySettingPermission
(
"
prompt
"
)
;
await
trySettingPermission
(
"
granted
"
)
;
const
pushSubscriptionChangeEvent
=
await
promise
;
assert_equals
(
pushSubscriptionChangeEvent
.
data
.
type
"
pushsubscriptionchange
"
)
;
assert_equals
(
pushSubscriptionChangeEvent
.
data
.
constructor
"
PushSubscriptionChangeEvent
"
)
;
assert_object_equals
(
pushSubscriptionChangeEvent
.
data
.
oldSubscription
subscription
.
toJSON
(
)
)
;
}
"
Fire
pushsubscriptionchange
event
when
permission
is
revoked
"
)
;
