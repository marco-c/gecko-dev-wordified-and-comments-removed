import
asyncio
from
random
import
randint
import
pytest
URL
=
"
https
:
/
/
lapalabradeldia
.
com
/
"
JUGAR_BUTTON_TEXT
=
"
Jugar
!
"
CARD1_CSS
=
"
#
board
.
react
-
card
-
flip
:
nth
-
of
-
type
(
1
)
"
CARD2_CSS
=
"
#
board
.
react
-
card
-
flip
:
nth
-
of
-
type
(
2
)
"
CARD3_CSS
=
"
#
board
.
react
-
card
-
flip
:
nth
-
of
-
type
(
3
)
"
CARD4_CSS
=
"
#
board
.
react
-
card
-
flip
:
nth
-
of
-
type
(
4
)
"
CARD5_CSS
=
"
#
board
.
react
-
card
-
flip
:
nth
-
of
-
type
(
5
)
"
LETTERS_CSS
=
"
#
keyboard
button
:
not
(
:
has
(
svg
)
)
"
async
def
letters_sometimes_vanish
(
client
)
:
    
await
client
.
navigate
(
URL
wait
=
"
load
"
)
    
client
.
await_text
(
JUGAR_BUTTON_TEXT
is_displayed
=
True
)
.
click
(
)
    
letters
=
client
.
await_css
(
LETTERS_CSS
is_displayed
=
True
all
=
True
)
    
body
=
client
.
find_css
(
"
body
"
)
    
client
.
execute_script
(
        
"
"
"
       
const
s
=
document
.
createElement
(
"
style
"
)
;
       
s
.
textContent
=
"
#
board
.
react
-
card
-
flip
*
{
border
:
0
!
important
;
animation
-
duration
:
0
.
5s
!
important
;
}
"
;
       
document
.
head
.
appendChild
(
s
)
;
    
"
"
"
    
)
    
for
attempt
in
range
(
10
)
:
        
for
click_five_keys
in
range
(
5
)
:
            
letter
=
letters
[
randint
(
0
len
(
letters
)
-
1
)
]
            
coords
=
client
.
get_element_screen_position
(
letter
)
            
coords
=
[
coords
[
0
]
+
20
coords
[
1
]
+
20
]
            
await
client
.
apz_down
(
coords
=
coords
)
            
await
asyncio
.
sleep
(
0
.
025
)
            
coords
=
[
coords
[
0
]
+
20
coords
[
1
]
+
20
]
            
await
client
.
send_apz_mouse_event
(
"
move
"
coords
=
coords
)
            
await
client
.
apz_up
(
coords
=
coords
)
            
await
asyncio
.
sleep
(
0
.
025
)
            
await
client
.
send_apz_mouse_event
(
                
"
move
"
coords
=
[
coords
[
0
]
+
50
coords
[
1
]
+
50
]
            
)
            
await
asyncio
.
sleep
(
0
.
025
)
            
await
client
.
send_apz_mouse_event
(
                
"
move
"
coords
=
[
coords
[
0
]
+
100
coords
[
1
]
+
100
]
            
)
            
await
asyncio
.
sleep
(
0
.
025
)
            
await
client
.
send_apz_mouse_event
(
                
"
move
"
coords
=
[
coords
[
0
]
+
150
coords
[
1
]
+
150
]
            
)
            
await
asyncio
.
sleep
(
0
.
025
)
            
await
client
.
send_apz_mouse_event
(
                
"
move
"
coords
=
[
coords
[
0
]
+
200
coords
[
1
]
+
200
]
            
)
            
await
asyncio
.
sleep
(
0
.
025
)
        
await
asyncio
.
sleep
(
0
.
5
)
        
if
(
            
client
.
is_one_solid_color
(
client
.
find_css
(
CARD1_CSS
)
)
            
or
client
.
is_one_solid_color
(
client
.
find_css
(
CARD2_CSS
)
)
            
or
client
.
is_one_solid_color
(
client
.
find_css
(
CARD3_CSS
)
)
            
or
client
.
is_one_solid_color
(
client
.
find_css
(
CARD4_CSS
)
)
            
or
client
.
is_one_solid_color
(
client
.
find_css
(
CARD5_CSS
)
)
        
)
:
            
return
True
        
for
backspace
in
range
(
5
)
:
            
body
.
send_keys
(
"
\
ue003
"
)
    
return
False
pytest
.
mark
.
skip_platforms
(
"
android
"
)
pytest
.
mark
.
asyncio
pytest
.
mark
.
with_interventions
async
def
test_enabled
(
client
)
:
    
assert
not
await
letters_sometimes_vanish
(
client
)
pytest
.
mark
.
skip_platforms
(
"
android
"
)
pytest
.
mark
.
asyncio
pytest
.
mark
.
without_interventions
async
def
test_disabled
(
client
)
:
    
assert
await
letters_sometimes_vanish
(
client
)
