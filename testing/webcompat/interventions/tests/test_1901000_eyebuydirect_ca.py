import
time
import
pytest
from
webdriver
.
error
import
NoSuchElementException
URL
=
"
https
:
/
/
www
.
eyebuydirect
.
ca
/
"
FIRST_PRODUCT_CSS
=
"
[
class
*
=
'
product
-
list
-
item_product
'
]
.
event
-
product
-
click
a
"
FIRST_FRAME_SIZE_CSS
=
"
button
[
class
*
=
'
size
-
list_size
'
]
"
SELECTED_FRAME_SIZE_CSS
=
"
button
[
class
*
=
'
size
-
list_size
'
]
[
class
*
=
'
size
-
list_current
'
]
"
SELECT_LENSES_CSS
=
"
[
aria
-
label
=
'
Select
Lenses
'
]
"
NON_PRESCRIPTION_CSS
=
"
.
use
-
for
-
non
-
rx
"
CLEAR_CSS
=
"
#
color
-
type
-
clear
"
STANDARD_LENSES_CSS
=
"
.
package
-
show
.
package
-
standard
.
lenses
"
ADD_TO_CART_CSS
=
"
button
.
btn
-
add
-
cart
"
PAYPAL_CHECKOUT_CSS
=
"
#
paypal
-
checkout
-
button
"
PAYPAL_OVERLAY_CSS
=
"
[
id
^
=
'
paypal
-
overlay
-
uid
'
]
"
async
def
can_click_paypal_button
(
client
)
:
    
await
client
.
navigate
(
URL
)
    
client
.
soft_click
(
client
.
await_css
(
FIRST_PRODUCT_CSS
)
)
    
tries
=
0
    
while
True
:
        
tries
+
=
1
        
client
.
click
(
            
client
.
await_css
(
FIRST_FRAME_SIZE_CSS
is_displayed
=
True
)
force
=
True
        
)
        
try
:
            
client
.
await_css
(
SELECTED_FRAME_SIZE_CSS
is_displayed
=
True
timeout
=
1
)
            
break
        
except
NoSuchElementException
as
e
:
            
if
tries
>
5
:
                
raise
e
    
client
.
click
(
client
.
await_css
(
SELECT_LENSES_CSS
is_displayed
=
True
)
force
=
True
)
    
client
.
soft_click
(
client
.
await_css
(
NON_PRESCRIPTION_CSS
)
)
    
client
.
soft_click
(
client
.
await_css
(
CLEAR_CSS
)
)
    
client
.
soft_click
(
client
.
await_css
(
STANDARD_LENSES_CSS
)
)
    
client
.
soft_click
(
client
.
await_css
(
ADD_TO_CART_CSS
)
)
    
frame
=
client
.
await_css
(
f
"
{
PAYPAL_CHECKOUT_CSS
}
iframe
"
)
    
while
True
:
        
client
.
switch_to_frame
(
frame
)
        
buttons
=
client
.
await_css
(
"
#
buttons
-
container
"
timeout
=
20
)
        
client
.
execute_script
(
            
"
"
"
            
arguments
[
0
]
.
addEventListener
(
"
mousedown
"
e
=
>
{
                
window
.
__clicked
=
true
;
            
}
true
)
;
        
"
"
"
            
buttons
        
)
        
break
    
client
.
switch_to_frame
(
)
    
for
i
in
range
(
10
)
:
        
await
client
.
apz_down
(
element
=
frame
)
        
time
.
sleep
(
0
.
2
)
    
client
.
switch_to_frame
(
frame
)
    
return
client
.
execute_script
(
"
return
!
!
window
.
__clicked
"
)
pytest
.
mark
.
skip_platforms
(
"
android
"
)
pytest
.
mark
.
asyncio
pytest
.
mark
.
with_interventions
async
def
test_enabled
(
client
)
:
    
assert
await
can_click_paypal_button
(
client
)
pytest
.
mark
.
skip_platforms
(
"
android
"
)
pytest
.
mark
.
asyncio
pytest
.
mark
.
without_interventions
async
def
test_disabled
(
client
)
:
    
assert
not
await
can_click_paypal_button
(
client
)
