"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AppTestDelegateParent
"
]
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AppUiTestDelegate
:
"
resource
:
/
/
testing
-
common
/
AppUiTestDelegate
.
jsm
"
}
)
;
class
AppTestDelegateParent
extends
JSWindowActorParent
{
constructor
(
)
{
super
(
)
;
this
.
_tabs
=
new
Map
(
)
;
}
get
browser
(
)
{
return
this
.
browsingContext
.
top
.
embedderElement
;
}
get
window
(
)
{
return
this
.
browser
.
ownerGlobal
;
}
async
receiveMessage
(
message
)
{
const
{
extensionId
url
waitForLoad
tabId
}
=
message
.
data
;
switch
(
message
.
name
)
{
case
"
DOMContentLoaded
"
:
case
"
load
"
:
{
return
this
.
browser
?
.
dispatchEvent
(
new
CustomEvent
(
AppTestDelegate
:
{
message
.
name
}
{
detail
:
{
browsingContext
:
this
.
browsingContext
.
.
.
message
.
data
}
}
)
)
;
}
case
"
clickPageAction
"
:
return
lazy
.
AppUiTestDelegate
.
clickPageAction
(
this
.
window
extensionId
)
;
case
"
clickBrowserAction
"
:
return
lazy
.
AppUiTestDelegate
.
clickBrowserAction
(
this
.
window
extensionId
)
;
case
"
closePageAction
"
:
return
lazy
.
AppUiTestDelegate
.
closePageAction
(
this
.
window
extensionId
)
;
case
"
closeBrowserAction
"
:
return
lazy
.
AppUiTestDelegate
.
closeBrowserAction
(
this
.
window
extensionId
)
;
case
"
awaitExtensionPanel
"
:
await
lazy
.
AppUiTestDelegate
.
awaitExtensionPanel
(
this
.
window
extensionId
)
;
return
null
;
case
"
openNewForegroundTab
"
:
{
const
uuid
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
;
const
tab
=
await
lazy
.
AppUiTestDelegate
.
openNewForegroundTab
(
this
.
window
url
waitForLoad
)
;
this
.
_tabs
.
set
(
uuid
tab
)
;
return
uuid
;
}
case
"
removeTab
"
:
{
const
tab
=
this
.
_tabs
.
get
(
tabId
)
;
this
.
_tabs
.
delete
(
tabId
)
;
return
lazy
.
AppUiTestDelegate
.
removeTab
(
tab
)
;
}
default
:
throw
new
Error
(
Unknown
Test
API
:
{
message
.
name
}
.
)
;
}
}
}
