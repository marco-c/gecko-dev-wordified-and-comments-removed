use
regex
:
:
Regex
;
pub
fn
escape
(
input
:
&
str
)
-
>
String
{
let
escape_pattern
:
Regex
=
Regex
:
:
new
(
r
"
(
[
^
A
-
Za
-
z0
-
9_
\
-
.
:
/
\
n
]
)
"
)
.
unwrap
(
)
;
if
input
.
is_empty
(
)
{
return
"
'
'
"
.
to_owned
(
)
;
}
let
output
=
&
escape_pattern
.
replace_all
(
input
"
\
\
1
"
)
;
output
.
replace
(
"
'
\
n
'
"
r
"
\
n
"
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
escape
;
#
[
test
]
fn
empty_escape
(
)
{
assert_eq
!
(
escape
(
"
"
)
"
'
'
"
)
;
}
#
[
test
]
fn
full_escape
(
)
{
assert_eq
!
(
escape
(
"
foo
'
\
"
'
bar
"
)
"
foo
\
\
'
\
\
\
"
\
\
'
bar
"
)
;
}
#
[
test
]
fn
escape_multibyte
(
)
{
assert_eq
!
(
escape
(
"
"
)
"
\
\
\
\
"
)
;
}
#
[
test
]
fn
escape_newline
(
)
{
assert_eq
!
(
escape
(
r
"
\
n
"
)
"
\
\
\
'
\
n
\
'
"
)
;
}
}
