from
__future__
import
absolute_import
import
sys
import
os
def
path_join
(
*
args
)
:
    
path
=
os
.
path
.
join
(
*
args
)
    
return
os
.
path
.
abspath
(
path
)
mozproxy_src_dir
=
os
.
path
.
dirname
(
os
.
path
.
realpath
(
__file__
)
)
mozproxy_dir
=
path_join
(
mozproxy_src_dir
"
.
.
"
)
mozbase_dir
=
path_join
(
mozproxy_dir
"
.
.
"
)
if
os
.
environ
.
get
(
"
SCRIPTSPATH
"
None
)
is
not
None
:
    
mozharness_dir
=
os
.
environ
[
"
SCRIPTSPATH
"
]
else
:
    
mozharness_dir
=
path_join
(
mozbase_dir
"
.
.
"
"
mozharness
"
)
def
get_playback
(
config
android_device
=
None
)
:
    
"
"
"
Returns
an
instance
of
the
right
Playback
class
    
"
"
"
    
sys
.
path
.
insert
(
0
mozharness_dir
)
    
sys
.
path
.
insert
(
0
mozproxy_dir
)
    
sys
.
path
.
insert
(
0
mozproxy_src_dir
)
    
from
.
server
import
get_backend
    
from
.
utils
import
LOG
    
tool_name
=
config
.
get
(
"
playback_tool
"
None
)
    
if
tool_name
is
None
:
        
LOG
.
critical
(
"
playback_tool
name
not
found
in
config
"
)
        
return
None
    
try
:
        
if
android_device
is
None
:
            
return
get_backend
(
tool_name
config
)
        
else
:
            
return
get_backend
(
tool_name
config
android_device
)
    
except
KeyError
:
        
LOG
.
critical
(
"
specified
playback
tool
is
unsupported
:
%
s
"
%
tool_name
)
        
return
None
