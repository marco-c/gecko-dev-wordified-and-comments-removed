import
mozlog
import
time
def
pytest_addoption
(
parser
)
:
    
group
=
parser
.
getgroup
(
'
mozlog
'
)
    
for
name
(
_class
_help
)
in
mozlog
.
commandline
.
log_formatters
.
iteritems
(
)
:
        
group
.
addoption
(
'
-
-
log
-
{
0
}
'
.
format
(
name
)
action
=
'
append
'
help
=
_help
)
    
formatter_options
=
mozlog
.
commandline
.
fmt_options
.
iteritems
(
)
    
for
name
(
_class
_help
formatters
action
)
in
formatter_options
:
        
for
formatter
in
formatters
:
            
if
formatter
in
mozlog
.
commandline
.
log_formatters
:
                
group
.
addoption
(
                    
'
-
-
log
-
{
0
}
-
{
1
}
'
.
format
(
formatter
name
)
                    
action
=
action
                    
help
=
_help
)
def
pytest_configure
(
config
)
:
    
if
not
hasattr
(
config
'
slaveinput
'
)
:
        
config
.
pluginmanager
.
register
(
MozLog
(
)
)
class
MozLog
(
object
)
:
    
def
__init__
(
self
)
:
        
self
.
results
=
{
}
        
self
.
start_time
=
int
(
time
.
time
(
)
*
1000
)
    
def
pytest_configure
(
self
config
)
:
        
mozlog
.
commandline
.
setup_logging
(
'
pytest
'
config
.
known_args_namespace
                                         
defaults
=
{
}
allow_unused_options
=
True
)
        
self
.
logger
=
mozlog
.
get_default_logger
(
component
=
'
pytest
'
)
    
def
pytest_sessionstart
(
self
session
)
:
        
'
'
'
Called
before
test
collection
;
records
suite
start
time
to
log
later
'
'
'
        
self
.
start_time
=
int
(
time
.
time
(
)
*
1000
)
    
def
pytest_collection_modifyitems
(
self
items
)
:
        
'
'
'
Called
after
test
collection
is
completed
just
before
tests
are
run
(
suite
start
)
'
'
'
        
self
.
logger
.
suite_start
(
tests
=
items
time
=
self
.
start_time
)
    
def
pytest_sessionfinish
(
self
session
exitstatus
)
:
        
self
.
logger
.
suite_end
(
)
    
def
pytest_runtest_logstart
(
self
nodeid
location
)
:
        
self
.
logger
.
test_start
(
test
=
nodeid
)
    
def
pytest_runtest_logreport
(
self
report
)
:
        
'
'
'
Called
3
times
per
test
(
setup
call
teardown
)
indicated
by
report
.
when
'
'
'
        
test
=
report
.
nodeid
        
status
=
expected
=
'
PASS
'
        
message
=
stack
=
None
        
if
hasattr
(
report
'
wasxfail
'
)
:
            
expected
=
'
FAIL
'
            
if
report
.
skipped
:
                
status
=
'
FAIL
'
        
elif
report
.
failed
:
            
status
=
'
FAIL
'
if
report
.
when
=
=
'
call
'
else
'
ERROR
'
            
crash
=
report
.
longrepr
.
reprcrash
            
message
=
"
{
0
}
(
line
{
1
}
)
"
.
format
(
crash
.
message
crash
.
lineno
)
            
stack
=
report
.
longrepr
.
reprtraceback
        
elif
report
.
skipped
:
            
status
=
expected
=
'
SKIP
'
            
message
=
report
.
longrepr
[
-
1
]
        
if
status
!
=
expected
or
expected
!
=
'
PASS
'
:
            
self
.
results
[
test
]
=
(
status
expected
message
stack
)
        
if
report
.
when
=
=
'
teardown
'
:
            
defaults
=
(
'
PASS
'
'
PASS
'
None
None
)
            
status
expected
message
stack
=
self
.
results
.
get
(
test
defaults
)
            
self
.
logger
.
test_end
(
test
=
test
status
=
status
expected
=
expected
                                 
message
=
message
stack
=
stack
)
