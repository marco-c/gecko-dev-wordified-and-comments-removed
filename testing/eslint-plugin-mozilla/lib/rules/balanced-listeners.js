"
use
strict
"
;
module
.
exports
=
function
(
context
)
{
var
DICTIONARY
=
{
"
addEventListener
"
:
"
removeEventListener
"
"
on
"
:
"
off
"
}
;
var
INVERTED_DICTIONARY
=
{
}
;
for
(
var
i
in
DICTIONARY
)
{
INVERTED_DICTIONARY
[
DICTIONARY
[
i
]
]
=
i
;
}
var
addedListeners
=
[
]
;
var
removedListeners
=
[
]
;
function
addAddedListener
(
node
)
{
addedListeners
.
push
(
{
functionName
:
node
.
callee
.
property
.
name
type
:
node
.
arguments
[
0
]
.
value
node
:
node
.
callee
.
property
useCapture
:
node
.
arguments
[
2
]
?
node
.
arguments
[
2
]
.
value
:
null
}
)
;
}
function
addRemovedListener
(
node
)
{
removedListeners
.
push
(
{
functionName
:
node
.
callee
.
property
.
name
type
:
node
.
arguments
[
0
]
.
value
useCapture
:
node
.
arguments
[
2
]
?
node
.
arguments
[
2
]
.
value
:
null
}
)
;
}
function
getUnbalancedListeners
(
)
{
var
unbalanced
=
[
]
;
for
(
var
j
=
0
;
j
<
addedListeners
.
length
;
j
+
+
)
{
if
(
!
hasRemovedListener
(
addedListeners
[
j
]
)
)
{
unbalanced
.
push
(
addedListeners
[
j
]
)
;
}
}
addedListeners
=
removedListeners
=
[
]
;
return
unbalanced
;
}
function
hasRemovedListener
(
addedListener
)
{
for
(
var
k
=
0
;
k
<
removedListeners
.
length
;
k
+
+
)
{
var
listener
=
removedListeners
[
k
]
;
if
(
DICTIONARY
[
addedListener
.
functionName
]
=
=
=
listener
.
functionName
&
&
addedListener
.
type
=
=
=
listener
.
type
&
&
addedListener
.
useCapture
=
=
=
listener
.
useCapture
)
{
return
true
;
}
}
return
false
;
}
return
{
CallExpression
:
function
(
node
)
{
if
(
node
.
arguments
.
length
=
=
=
0
)
{
return
;
}
if
(
node
.
callee
.
type
=
=
=
"
MemberExpression
"
)
{
var
listenerMethodName
=
node
.
callee
.
property
.
name
;
if
(
DICTIONARY
.
hasOwnProperty
(
listenerMethodName
)
)
{
addAddedListener
(
node
)
;
}
else
if
(
INVERTED_DICTIONARY
.
hasOwnProperty
(
listenerMethodName
)
)
{
addRemovedListener
(
node
)
;
}
}
}
"
Program
:
exit
"
:
function
(
)
{
getUnbalancedListeners
(
)
.
forEach
(
function
(
listener
)
{
context
.
report
(
listener
.
node
"
No
corresponding
'
{
{
functionName
}
}
(
{
{
type
}
}
)
'
was
found
.
"
{
functionName
:
DICTIONARY
[
listener
.
functionName
]
type
:
listener
.
type
}
)
;
}
)
;
}
}
;
}
;
