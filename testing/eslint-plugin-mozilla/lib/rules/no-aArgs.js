"
use
strict
"
;
module
.
exports
=
function
(
context
)
{
function
isPrefixed
(
name
)
{
return
name
.
length
>
=
2
&
&
/
^
a
[
A
-
Z
]
/
.
test
(
name
)
;
}
function
deHungarianize
(
name
)
{
return
name
.
substring
(
1
2
)
.
toLowerCase
(
)
+
name
.
substring
(
2
name
.
length
)
;
}
function
checkFunction
(
node
)
{
for
(
var
i
=
0
;
i
<
node
.
params
.
length
;
i
+
+
)
{
var
param
=
node
.
params
[
i
]
;
if
(
param
.
name
&
&
isPrefixed
(
param
.
name
)
)
{
context
.
report
(
param
"
Parameter
'
{
{
name
}
}
'
uses
Hungarian
Notation
consider
using
'
{
{
suggestion
}
}
'
instead
.
"
{
name
:
param
.
name
suggestion
:
deHungarianize
(
param
.
name
)
}
)
;
}
}
}
return
{
"
FunctionDeclaration
"
:
checkFunction
"
ArrowFunctionExpression
"
:
checkFunction
"
FunctionExpression
"
:
checkFunction
}
;
}
;
