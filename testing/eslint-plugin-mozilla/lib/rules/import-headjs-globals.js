"
use
strict
"
;
var
fs
=
require
(
"
fs
"
)
;
var
path
=
require
(
"
path
"
)
;
var
helpers
=
require
(
"
.
.
/
helpers
"
)
;
var
importRx
=
/
^
(
?
:
Services
\
.
scriptloader
\
.
|
loader
)
?
loadSubScript
\
(
(
.
+
)
[
"
]
/
;
module
.
exports
=
function
(
context
)
{
function
checkFile
(
fileArray
)
{
var
filePath
=
fileArray
.
pop
(
)
;
while
(
filePath
)
{
var
headText
;
try
{
headText
=
fs
.
readFileSync
(
filePath
"
utf8
"
)
;
}
catch
(
e
)
{
filePath
=
fileArray
.
pop
(
)
;
continue
;
}
var
ast
=
helpers
.
getAST
(
headText
)
;
var
globalVars
=
helpers
.
getGlobals
(
ast
)
;
for
(
var
i
=
0
;
i
<
globalVars
.
length
;
i
+
+
)
{
var
varName
=
globalVars
[
i
]
;
helpers
.
addVarToScope
(
varName
context
)
;
}
for
(
var
index
in
ast
.
body
)
{
var
node
=
ast
.
body
[
index
]
;
var
source
=
helpers
.
getTextForNode
(
node
headText
)
;
var
name
=
helpers
.
getVarNameFromImportSource
(
source
)
;
if
(
name
)
{
helpers
.
addVarToScope
(
name
context
)
;
continue
;
}
var
matches
=
source
.
match
(
importRx
)
;
if
(
!
matches
)
{
matches
=
source
.
match
(
/
^
loadHelperScript
\
(
(
.
+
)
[
"
]
/
)
;
}
if
(
matches
)
{
var
cwd
=
process
.
cwd
(
)
;
filePath
=
matches
[
1
]
;
filePath
=
filePath
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
browser
"
cwd
+
"
/
.
.
/
.
.
/
.
.
/
.
.
"
)
;
filePath
=
filePath
.
replace
(
/
testdir
\
s
*
\
+
\
s
*
[
"
'
]
/
gi
cwd
+
"
/
"
)
;
filePath
=
filePath
.
replace
(
/
test_dir
\
s
*
\
+
\
s
*
[
"
'
]
/
gi
cwd
)
;
filePath
=
filePath
.
replace
(
/
[
"
'
]
/
gi
"
"
)
;
filePath
=
path
.
normalize
(
filePath
)
;
fileArray
.
push
(
filePath
)
;
}
}
filePath
=
fileArray
.
pop
(
)
;
}
}
return
{
Program
:
function
(
)
{
if
(
!
helpers
.
getIsBrowserMochitest
(
this
)
)
{
return
;
}
var
currentFilePath
=
helpers
.
getAbsoluteFilePath
(
context
)
;
var
dirName
=
path
.
dirname
(
currentFilePath
)
;
var
fullHeadjsPath
=
path
.
resolve
(
dirName
"
head
.
js
"
)
;
checkFile
(
[
currentFilePath
fullHeadjsPath
]
)
;
}
}
;
}
;
