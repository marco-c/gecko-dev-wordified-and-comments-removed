"
use
strict
"
;
var
escope
=
require
(
"
escope
"
)
;
var
espree
=
require
(
"
espree
"
)
;
var
regexes
=
[
/
^
(
?
:
Cu
|
Components
\
.
utils
)
\
.
import
\
(
"
.
*
\
/
(
.
*
?
)
\
.
jsm
?
"
\
)
;
?
/
/
^
loader
\
.
lazyImporter
\
(
\
w
+
"
(
\
w
+
)
"
/
/
^
loader
\
.
lazyRequireGetter
\
(
\
w
+
"
(
\
w
+
)
"
/
/
^
loader
\
.
lazyServiceGetter
\
(
\
w
+
"
(
\
w
+
)
"
/
/
^
XPCOMUtils
\
.
defineLazyModuleGetter
\
(
\
w
+
"
(
\
w
+
)
"
/
/
^
loader
\
.
lazyGetter
\
(
\
w
+
"
(
\
w
+
)
"
/
/
^
XPCOMUtils
\
.
defineLazyGetter
\
(
\
w
+
"
(
\
w
+
)
"
/
]
;
module
.
exports
=
{
getAST
:
function
(
sourceText
)
{
var
config
=
this
.
getPermissiveConfig
(
)
;
return
espree
.
parse
(
sourceText
config
)
;
}
getSource
:
function
(
node
context
)
{
return
context
.
getSource
(
node
)
.
replace
(
/
[
\
r
\
n
]
+
\
s
*
/
g
"
"
)
.
replace
(
/
\
s
*
=
\
s
*
/
g
"
=
"
)
.
replace
(
/
\
s
+
\
.
/
g
"
.
"
)
.
replace
(
/
\
s
+
/
g
"
"
)
.
replace
(
/
;
\
n
(
\
d
+
)
/
g
"
;
1
"
)
.
replace
(
/
\
s
+
/
g
"
"
)
;
}
getVarNameFromImportSource
:
function
(
source
)
{
for
(
var
i
=
0
;
i
<
regexes
.
length
;
i
+
+
)
{
var
regex
=
regexes
[
i
]
;
var
matches
=
source
.
match
(
regex
)
;
if
(
matches
)
{
var
name
=
matches
[
1
]
;
return
name
;
}
}
}
getGlobals
:
function
(
ast
)
{
var
scopeManager
=
escope
.
analyze
(
ast
)
;
var
globalScope
=
scopeManager
.
acquire
(
ast
)
;
var
result
=
[
]
;
for
(
var
variable
in
globalScope
.
variables
)
{
var
name
=
globalScope
.
variables
[
variable
]
.
name
;
result
.
push
(
name
)
;
}
return
result
;
}
addVarToScope
:
function
(
name
context
)
{
var
scope
=
context
.
getScope
(
)
;
var
variables
=
scope
.
variables
;
var
variable
=
new
escope
.
Variable
(
name
scope
)
;
variable
.
eslintExplicitGlobal
=
false
;
variable
.
writeable
=
true
;
variables
.
push
(
variable
)
;
}
getTextForNode
:
function
(
node
text
)
{
var
source
=
text
.
substr
(
node
.
range
[
0
]
node
.
range
[
1
]
-
node
.
range
[
0
]
)
;
return
source
.
replace
(
/
[
\
r
\
n
]
+
\
s
*
/
g
"
"
)
.
replace
(
/
\
s
*
=
\
s
*
/
g
"
=
"
)
.
replace
(
/
\
s
+
\
.
/
g
"
.
"
)
.
replace
(
/
\
s
+
/
g
"
"
)
.
replace
(
/
;
\
n
(
\
d
+
)
/
g
"
;
1
"
)
;
}
getPermissiveConfig
:
function
(
)
{
return
{
range
:
true
loc
:
true
tolerant
:
true
ecmaFeatures
:
{
arrowFunctions
:
true
blockBindings
:
true
destructuring
:
true
regexYFlag
:
true
regexUFlag
:
true
templateStrings
:
true
binaryLiterals
:
true
octalLiterals
:
true
unicodeCodePointEscapes
:
true
defaultParams
:
true
restParams
:
true
forOf
:
true
objectLiteralComputedProperties
:
true
objectLiteralShorthandMethods
:
true
objectLiteralShorthandProperties
:
true
objectLiteralDuplicateProperties
:
true
generators
:
true
spread
:
true
superInFunctions
:
true
classes
:
true
modules
:
true
globalReturn
:
true
}
}
;
}
getIsGlobalScope
:
function
(
context
)
{
var
ancestors
=
context
.
getAncestors
(
)
;
var
parent
=
ancestors
.
pop
(
)
;
if
(
parent
.
type
=
=
"
ExpressionStatement
"
)
{
parent
=
ancestors
.
pop
(
)
;
}
return
parent
.
type
=
=
"
Program
"
;
}
getIsBrowserMochitest
:
function
(
scope
)
{
var
pathAndFilename
=
scope
.
getFilename
(
)
;
return
/
.
*
[
\
\
/
]
browser_
.
+
\
.
js
/
.
test
(
pathAndFilename
)
;
}
}
;
