const
gBaseURL
=
"
https
:
/
/
example
.
com
/
browser
/
testing
/
mochitest
/
tests
/
browser
/
"
;
function
promiseTabLoadEvent
(
tab
url
)
{
let
promise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
url
)
;
if
(
url
)
{
tab
.
linkedBrowser
.
loadURI
(
url
)
;
}
return
promise
;
}
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
gURLBar
.
focus
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
await
SimpleTest
.
promiseFocus
(
browser
.
contentWindowAsCPOW
true
)
;
is
(
document
.
activeElement
browser
"
Browser
is
focused
when
about
:
blank
is
loaded
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
promiseTabLoadEvent
(
tab
gBaseURL
+
"
waitForFocusPage
.
html
"
)
;
await
SimpleTest
.
promiseFocus
(
browser
.
contentWindowAsCPOW
)
;
is
(
document
.
activeElement
browser
"
Browser
is
focused
when
page
is
loaded
"
)
;
await
SimpleTest
.
promiseFocus
(
browser
.
contentWindowAsCPOW
.
frames
[
0
]
)
;
is
(
browser
.
contentWindowAsCPOW
.
document
.
activeElement
.
localName
"
iframe
"
"
Child
iframe
is
focused
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
gBaseURL
+
"
waitForFocusPage
.
html
"
)
;
gURLBar
.
focus
(
)
;
await
SimpleTest
.
promiseFocus
(
gBrowser
.
selectedBrowser
)
;
is
(
document
.
activeElement
gBrowser
.
selectedBrowser
"
Browser
is
focused
when
promiseFocus
is
passed
a
browser
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
