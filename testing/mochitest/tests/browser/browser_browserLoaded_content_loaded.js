"
use
strict
"
;
function
isDOMLoaded
(
browser
)
{
return
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
readyState
"
complete
"
"
Browser
should
be
loaded
.
"
)
;
}
)
;
}
add_task
(
async
function
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
isDOMLoaded
(
browser
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tabURLs
=
[
http
:
/
/
example
.
org
http
:
/
/
mochi
.
test
:
8888
http
:
/
/
test
:
80
]
;
let
browsers
=
tabURLs
.
map
(
u
=
>
BrowserTestUtils
.
addTab
(
gBrowser
u
)
.
linkedBrowser
)
;
await
Promise
.
all
(
(
function
*
(
)
{
for
(
let
b
of
browsers
)
{
yield
BrowserTestUtils
.
browserLoaded
(
b
)
;
}
}
)
(
)
)
;
for
(
const
browser
of
browsers
)
{
await
isDOMLoaded
(
browser
)
;
}
browsers
.
map
(
browser
=
>
gBrowser
.
getTabForBrowser
(
browser
)
)
.
forEach
(
tab
=
>
gBrowser
.
removeTab
(
tab
)
)
;
}
)
;
