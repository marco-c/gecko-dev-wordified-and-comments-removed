"
use
strict
"
;
setExpectedFailuresForSelfTest
(
8
)
;
let
JSMPromise
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
{
}
)
.
Promise
;
async
function
rejectOnNextTick
(
error
)
{
await
Promise
.
resolve
(
)
;
Promise
.
reject
(
error
)
;
JSMPromise
.
reject
(
error
)
;
}
add_task
(
async
function
failWithoutError
(
)
{
await
rejectOnNextTick
(
undefined
)
;
}
)
;
add_task
(
async
function
failWithString
(
)
{
await
rejectOnNextTick
(
"
This
is
a
string
"
)
;
}
)
;
add_task
(
async
function
failWithInt
(
)
{
await
rejectOnNextTick
(
42
)
;
}
)
;
add_task
(
async
function
failWithError
(
)
{
await
rejectOnNextTick
(
new
Error
(
"
This
is
an
error
"
)
)
;
}
)
;
