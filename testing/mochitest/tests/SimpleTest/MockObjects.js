function
MockObjectRegisterer
(
aContractID
aReplacementCtor
)
{
this
.
_contractID
=
aContractID
;
this
.
_replacementCtor
=
aReplacementCtor
;
}
MockObjectRegisterer
.
prototype
=
{
register
:
function
MOR_register
(
)
{
if
(
this
.
_originalFactory
)
throw
new
Exception
(
"
Invalid
object
state
when
calling
register
(
)
"
)
;
var
isChrome
=
location
.
protocol
=
=
"
chrome
:
"
;
var
providedConstructor
=
this
.
_replacementCtor
;
this
.
_mockFactory
=
{
createInstance
:
function
MF_createInstance
(
aOuter
aIid
)
{
if
(
aOuter
!
=
null
)
throw
SpecialPowers
.
Cr
.
NS_ERROR_NO_AGGREGATION
;
var
inst
=
new
providedConstructor
(
)
;
if
(
!
isChrome
)
{
var
QI
=
inst
.
QueryInterface
;
inst
=
SpecialPowers
.
wrapCallbackObject
(
inst
)
;
inst
.
QueryInterface
=
QI
;
}
return
inst
.
QueryInterface
(
aIid
)
;
}
}
;
if
(
!
isChrome
)
{
this
.
_mockFactory
=
SpecialPowers
.
wrapCallbackObject
(
this
.
_mockFactory
)
;
}
var
retVal
=
SpecialPowers
.
swapFactoryRegistration
(
null
this
.
_contractID
this
.
_mockFactory
this
.
_originalFactory
)
;
if
(
'
error
'
in
retVal
)
{
throw
new
Exception
(
"
ERROR
:
"
+
retVal
.
error
)
;
}
else
if
(
!
isChrome
)
{
this
.
_originalFactory
=
SpecialPowers
.
wrap
(
retVal
)
.
originalFactory
;
}
else
{
this
.
_originalFactory
=
retVal
.
originalFactory
;
}
}
unregister
:
function
MOR_unregister
(
)
{
if
(
!
this
.
_originalFactory
)
throw
new
Exception
(
"
Invalid
object
state
when
calling
unregister
(
)
"
)
;
SpecialPowers
.
swapFactoryRegistration
(
null
this
.
_contractID
this
.
_originalFactory
this
.
_mockFactory
)
;
this
.
_originalFactory
=
null
;
this
.
_mockFactory
=
null
;
}
_originalFactory
:
null
_mockFactory
:
null
}
