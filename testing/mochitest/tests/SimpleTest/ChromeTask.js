"
use
strict
"
;
function
ChromeTask_ChromeScript
(
)
{
"
use
strict
"
;
const
{
Assert
:
AssertCls
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
addMessageListener
(
"
chrome
-
task
:
spawn
"
async
function
(
aData
)
{
let
id
=
aData
.
id
;
let
source
=
aData
.
runnable
|
|
"
(
)
=
>
{
}
"
;
function
getStack
(
aStack
)
{
let
frames
=
[
]
;
for
(
let
frame
=
aStack
;
frame
;
frame
=
frame
.
caller
)
{
frames
.
push
(
frame
.
filename
+
"
:
"
+
frame
.
name
+
"
:
"
+
frame
.
lineNumber
)
;
}
return
frames
.
join
(
"
\
n
"
)
;
}
var
Assert
=
new
AssertCls
(
(
err
message
stack
)
=
>
{
sendAsyncMessage
(
"
chrome
-
task
:
test
-
result
"
{
id
condition
:
!
err
name
:
err
?
err
.
message
:
message
stack
:
getStack
(
err
?
err
.
stack
:
stack
)
}
)
;
}
)
;
var
ok
=
Assert
.
ok
.
bind
(
Assert
)
;
var
is
=
Assert
.
equal
.
bind
(
Assert
)
;
var
isnot
=
Assert
.
notEqual
.
bind
(
Assert
)
;
function
todo
(
expr
name
)
{
sendAsyncMessage
(
"
chrome
-
task
:
test
-
todo
"
{
id
expr
name
}
)
;
}
function
todo_is
(
a
b
name
)
{
sendAsyncMessage
(
"
chrome
-
task
:
test
-
todo_is
"
{
id
a
b
name
}
)
;
}
function
info
(
name
)
{
sendAsyncMessage
(
"
chrome
-
task
:
test
-
info
"
{
id
name
}
)
;
}
try
{
let
runnablestr
=
(
(
)
=
>
{
return
(
{
source
}
)
;
}
)
(
)
;
;
let
runnable
=
eval
(
runnablestr
)
;
let
result
=
await
runnable
.
call
(
this
aData
.
arg
)
;
sendAsyncMessage
(
"
chrome
-
task
:
complete
"
{
id
result
}
)
;
}
catch
(
ex
)
{
sendAsyncMessage
(
"
chrome
-
task
:
complete
"
{
id
error
:
ex
.
toString
(
)
}
)
;
}
}
)
;
}
var
ChromeTask
=
{
_chromeScript
:
null
_promises
:
new
Map
(
)
_messageID
:
1
spawn
:
function
ChromeTask_spawn
(
arg
task
)
{
let
handle
=
ChromeTask
.
_chromeScript
;
if
(
!
handle
)
{
handle
=
SpecialPowers
.
loadChromeScript
(
ChromeTask_ChromeScript
)
;
handle
.
addMessageListener
(
"
chrome
-
task
:
complete
"
ChromeTask
.
onComplete
)
;
handle
.
addMessageListener
(
"
chrome
-
task
:
test
-
result
"
ChromeTask
.
onResult
)
;
handle
.
addMessageListener
(
"
chrome
-
task
:
test
-
info
"
ChromeTask
.
onInfo
)
;
handle
.
addMessageListener
(
"
chrome
-
task
:
test
-
todo
"
ChromeTask
.
onTodo
)
;
handle
.
addMessageListener
(
"
chrome
-
task
:
test
-
todo_is
"
ChromeTask
.
onTodoIs
)
;
ChromeTask
.
_chromeScript
=
handle
;
}
let
deferred
=
{
}
;
deferred
.
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
resolve
=
resolve
;
deferred
.
reject
=
reject
;
}
)
;
let
id
=
ChromeTask
.
_messageID
+
+
;
ChromeTask
.
_promises
.
set
(
id
deferred
)
;
handle
.
sendAsyncMessage
(
"
chrome
-
task
:
spawn
"
{
id
runnable
:
task
.
toString
(
)
arg
}
)
;
return
deferred
.
promise
;
}
onComplete
(
aData
)
{
let
deferred
=
ChromeTask
.
_promises
.
get
(
aData
.
id
)
;
ChromeTask
.
_promises
.
delete
(
aData
.
id
)
;
if
(
aData
.
error
)
{
deferred
.
reject
(
aData
.
error
)
;
}
else
{
deferred
.
resolve
(
aData
.
result
)
;
}
}
onResult
(
aData
)
{
SimpleTest
.
record
(
aData
.
condition
aData
.
name
)
;
}
onInfo
(
aData
)
{
SimpleTest
.
info
(
aData
.
name
)
;
}
onTodo
(
aData
)
{
SimpleTest
.
todo
(
aData
.
expr
aData
.
name
)
;
}
onTodoIs
(
aData
)
{
SimpleTest
.
todo_is
(
aData
.
a
aData
.
b
aData
.
name
)
;
}
}
;
