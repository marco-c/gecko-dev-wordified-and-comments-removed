var
add_task
=
(
function
(
)
{
var
task_list
=
[
]
;
var
run_only_this_task
=
null
;
function
isGenerator
(
value
)
{
return
value
&
&
typeof
value
=
=
=
"
object
"
&
&
typeof
value
.
next
=
=
=
"
function
"
;
}
return
function
(
generatorFunction
)
{
if
(
task_list
.
length
=
=
=
0
)
{
if
(
!
SimpleTest
)
{
throw
new
Error
(
"
SimpleTest
not
available
.
"
)
;
}
SimpleTest
.
waitForExplicitFinish
(
)
;
setTimeout
(
function
(
)
{
(
async
(
)
=
>
{
function
skipTask
(
name
)
{
let
logger
=
parentRunner
&
&
parentRunner
.
structuredLogger
;
if
(
!
logger
)
{
info
(
"
SpawnTask
.
js
|
Skipping
test
"
+
name
)
;
return
;
}
logger
.
deactivateBuffering
(
)
;
logger
.
testStatus
(
SimpleTest
.
_getCurrentTestURL
(
)
name
"
SKIP
"
)
;
logger
.
warning
(
"
SpawnTask
.
js
|
Skipping
test
"
+
name
)
;
logger
.
activateBuffering
(
)
;
}
try
{
for
(
var
task
of
task_list
)
{
var
name
=
task
.
name
|
|
"
"
;
if
(
task
.
__skipMe
|
|
(
run_only_this_task
&
&
task
!
=
run_only_this_task
)
)
{
skipTask
(
name
)
;
continue
;
}
info
(
"
SpawnTask
.
js
|
Entering
test
"
+
name
)
;
let
result
=
await
task
(
)
;
if
(
isGenerator
(
result
)
)
{
ok
(
false
"
Task
returned
a
generator
"
)
;
}
info
(
"
SpawnTask
.
js
|
Leaving
test
"
+
name
)
;
}
}
catch
(
ex
)
{
try
{
ok
(
false
"
"
+
ex
"
Should
not
throw
any
errors
"
ex
.
stack
)
;
}
catch
(
ex2
)
{
ok
(
false
"
(
The
exception
cannot
be
converted
to
string
.
)
"
"
Should
not
throw
any
errors
"
ex
.
stack
)
;
}
}
SimpleTest
.
finish
(
)
;
}
)
(
)
;
}
)
;
}
generatorFunction
.
skip
=
(
)
=
>
generatorFunction
.
__skipMe
=
true
;
generatorFunction
.
only
=
(
)
=
>
run_only_this_task
=
generatorFunction
;
task_list
.
push
(
generatorFunction
)
;
return
generatorFunction
;
}
;
}
)
(
)
;
