const
EventUtils
=
{
}
;
const
scriptLoader
=
Components
.
classes
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Components
.
interfaces
.
mozIJSSubScriptLoader
)
;
scriptLoader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
function
synthesizeQueryTextRect
(
aOffset
aLength
aWindow
)
{
var
utils
=
_getDOMWindowUtils
(
aWindow
)
;
if
(
!
utils
)
{
return
nullptr
;
}
return
utils
.
sendQueryContentEvent
(
utils
.
QUERY_TEXT_RECT
aOffset
aLength
0
0
QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK
)
;
}
function
synthesizeQueryEditorRect
(
aWindow
)
{
var
utils
=
_getDOMWindowUtils
(
aWindow
)
;
if
(
!
utils
)
{
return
nullptr
;
}
return
utils
.
sendQueryContentEvent
(
utils
.
QUERY_EDITOR_RECT
0
0
0
0
QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK
)
;
}
function
synthesizeCharAtPoint
(
aX
aY
aWindow
)
{
var
utils
=
_getDOMWindowUtils
(
aWindow
)
;
if
(
!
utils
)
{
return
nullptr
;
}
return
utils
.
sendQueryContentEvent
(
utils
.
QUERY_CHARACTER_AT_POINT
0
0
aX
aY
QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK
)
;
}
function
synthesizeDragStart
(
element
expectedDragData
aWindow
x
y
)
{
return
EventUtils
.
synthesizeDragStart
(
element
expectedDragData
aWindow
x
y
)
;
}
function
createDragEventObject
(
aType
aDestElement
aDestWindow
aDataTransfer
aDragEvent
)
{
var
destRect
=
aDestElement
.
getBoundingClientRect
(
)
;
var
destClientX
=
destRect
.
left
+
destRect
.
width
/
2
;
var
destClientY
=
destRect
.
top
+
destRect
.
height
/
2
;
var
destScreenX
=
aDestWindow
.
mozInnerScreenX
+
destClientX
;
var
destScreenY
=
aDestWindow
.
mozInnerScreenY
+
destClientY
;
if
(
"
clientX
"
in
aDragEvent
&
&
!
(
"
screenX
"
in
aDragEvent
)
)
{
aDragEvent
.
screenX
=
aDestWindow
.
mozInnerScreenX
+
aDragEvent
.
clientX
;
}
if
(
"
clientY
"
in
aDragEvent
&
&
!
(
"
screenY
"
in
aDragEvent
)
)
{
aDragEvent
.
screenY
=
aDestWindow
.
mozInnerScreenY
+
aDragEvent
.
clientY
;
}
return
Object
.
assign
(
{
type
:
aType
screenX
:
destScreenX
screenY
:
destScreenY
clientX
:
destClientX
clientY
:
destClientY
dataTransfer
:
aDataTransfer
}
aDragEvent
)
;
}
function
synthesizeDragOver
(
aSrcElement
aDestElement
aDragData
aDropEffect
aWindow
aDestWindow
aDragEvent
=
{
}
)
{
if
(
!
aWindow
)
aWindow
=
window
;
if
(
!
aDestWindow
)
aDestWindow
=
aWindow
;
var
dataTransfer
;
var
trapDrag
=
function
(
event
)
{
dataTransfer
=
event
.
dataTransfer
;
if
(
aDragData
)
{
for
(
var
i
=
0
;
i
<
aDragData
.
length
;
i
+
+
)
{
var
item
=
aDragData
[
i
]
;
for
(
var
j
=
0
;
j
<
item
.
length
;
j
+
+
)
{
dataTransfer
.
mozSetDataAt
(
item
[
j
]
.
type
item
[
j
]
.
data
i
)
;
}
}
}
dataTransfer
.
dropEffect
=
aDropEffect
|
|
"
move
"
;
event
.
preventDefault
(
)
;
}
;
aWindow
.
addEventListener
(
"
dragstart
"
trapDrag
true
)
;
EventUtils
.
synthesizeMouseAtCenter
(
aSrcElement
{
type
:
"
mousedown
"
}
aWindow
)
;
var
rect
=
aSrcElement
.
getBoundingClientRect
(
)
;
var
x
=
rect
.
width
/
2
;
var
y
=
rect
.
height
/
2
;
EventUtils
.
synthesizeMouse
(
aSrcElement
x
y
{
type
:
"
mousemove
"
}
aWindow
)
;
EventUtils
.
synthesizeMouse
(
aSrcElement
x
+
10
y
+
10
{
type
:
"
mousemove
"
}
aWindow
)
;
aWindow
.
removeEventListener
(
"
dragstart
"
trapDrag
true
)
;
var
event
=
createDragEventObject
(
"
dragenter
"
aDestElement
aDestWindow
dataTransfer
aDragEvent
)
;
EventUtils
.
sendDragEvent
(
event
aDestElement
aDestWindow
)
;
event
=
createDragEventObject
(
"
dragover
"
aDestElement
aDestWindow
dataTransfer
aDragEvent
)
;
var
result
=
EventUtils
.
sendDragEvent
(
event
aDestElement
aDestWindow
)
;
return
[
result
dataTransfer
]
;
}
function
synthesizeDropAfterDragOver
(
aResult
aDataTransfer
aDestElement
aDestWindow
aDragEvent
=
{
}
)
{
if
(
!
aDestWindow
)
aDestWindow
=
window
;
var
effect
=
aDataTransfer
.
dropEffect
;
var
event
;
if
(
aResult
)
{
effect
=
"
none
"
;
}
else
if
(
effect
!
=
"
none
"
)
{
event
=
createDragEventObject
(
"
drop
"
aDestElement
aDestWindow
aDataTransfer
aDragEvent
)
;
EventUtils
.
sendDragEvent
(
event
aDestElement
aDestWindow
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
aDestElement
{
type
:
"
mouseup
"
}
aDestWindow
)
;
return
effect
;
}
function
synthesizeDrop
(
aSrcElement
aDestElement
aDragData
aDropEffect
aWindow
aDestWindow
aDragEvent
=
{
}
)
{
if
(
!
aWindow
)
aWindow
=
window
;
if
(
!
aDestWindow
)
aDestWindow
=
aWindow
;
var
ds
=
Components
.
classes
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIDragService
)
;
ds
.
startDragSession
(
)
;
try
{
var
[
result
dataTransfer
]
=
synthesizeDragOver
(
aSrcElement
aDestElement
aDragData
aDropEffect
aWindow
aDestWindow
aDragEvent
)
;
return
synthesizeDropAfterDragOver
(
result
dataTransfer
aDestElement
aDestWindow
aDragEvent
)
;
}
finally
{
ds
.
endDragSession
(
true
)
;
}
}
var
PluginUtils
=
{
withTestPlugin
:
function
(
callback
)
{
if
(
typeof
Components
=
=
"
undefined
"
)
{
todo
(
false
"
Not
a
Mozilla
-
based
browser
"
)
;
return
false
;
}
var
ph
=
Components
.
classes
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPluginHost
)
;
var
tags
=
ph
.
getPluginTags
(
)
;
for
(
var
i
=
0
;
i
<
tags
.
length
;
i
+
+
)
{
if
(
tags
[
i
]
.
name
=
=
"
Test
Plug
-
in
"
)
{
callback
(
tags
[
i
]
)
;
return
true
;
}
}
todo
(
false
"
Need
a
test
plugin
on
this
platform
"
)
;
return
false
;
}
}
;
