"
"
"
Server
related
utilities
.
"
"
"
import
logging
import
logging
.
handlers
import
threading
import
time
from
mod_pywebsocket
import
common
from
mod_pywebsocket
import
util
def
_get_logger_from_class
(
c
)
:
    
return
logging
.
getLogger
(
'
%
s
.
%
s
'
%
(
c
.
__module__
c
.
__name__
)
)
def
configure_logging
(
options
)
:
    
logging
.
addLevelName
(
common
.
LOGLEVEL_FINE
'
FINE
'
)
    
logger
=
logging
.
getLogger
(
)
    
logger
.
setLevel
(
logging
.
getLevelName
(
options
.
log_level
.
upper
(
)
)
)
    
if
options
.
log_file
:
        
handler
=
logging
.
handlers
.
RotatingFileHandler
(
options
.
log_file
'
a
'
                                                       
options
.
log_max
                                                       
options
.
log_count
)
    
else
:
        
handler
=
logging
.
StreamHandler
(
)
    
formatter
=
logging
.
Formatter
(
        
'
[
%
(
asctime
)
s
]
[
%
(
levelname
)
s
]
%
(
name
)
s
:
%
(
message
)
s
'
)
    
handler
.
setFormatter
(
formatter
)
    
logger
.
addHandler
(
handler
)
    
deflate_log_level_name
=
logging
.
getLevelName
(
        
options
.
deflate_log_level
.
upper
(
)
)
    
_get_logger_from_class
(
util
.
_Deflater
)
.
setLevel
(
deflate_log_level_name
)
    
_get_logger_from_class
(
util
.
_Inflater
)
.
setLevel
(
deflate_log_level_name
)
class
ThreadMonitor
(
threading
.
Thread
)
:
    
daemon
=
True
    
def
__init__
(
self
interval_in_sec
)
:
        
threading
.
Thread
.
__init__
(
self
name
=
'
ThreadMonitor
'
)
        
self
.
_logger
=
util
.
get_class_logger
(
self
)
        
self
.
_interval_in_sec
=
interval_in_sec
    
def
run
(
self
)
:
        
while
True
:
            
thread_name_list
=
[
]
            
for
thread
in
threading
.
enumerate
(
)
:
                
thread_name_list
.
append
(
thread
.
name
)
            
self
.
_logger
.
info
(
"
%
d
active
threads
:
%
s
"
                              
threading
.
active_count
(
)
                              
'
'
.
join
(
thread_name_list
)
)
            
time
.
sleep
(
self
.
_interval_in_sec
)
