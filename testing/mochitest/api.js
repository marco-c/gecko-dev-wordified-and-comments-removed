ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
loadChromeScripts
(
win
)
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
chrome
-
harness
.
js
"
win
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
mochitest
-
e10s
-
utils
.
js
"
win
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
browser
-
test
.
js
"
win
)
;
}
const
windowTracker
=
{
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
chrome
-
document
-
global
-
created
"
)
;
}
async
observe
(
window
topic
data
)
{
if
(
topic
=
=
=
"
chrome
-
document
-
global
-
created
"
)
{
await
new
Promise
(
resolve
=
>
window
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
)
;
let
{
document
}
=
window
;
let
{
documentURI
}
=
document
;
if
(
documentURI
!
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
return
;
}
loadChromeScripts
(
window
)
;
}
}
}
;
function
androidStartup
(
)
{
let
testRoot
=
Services
.
prefs
.
getStringPref
(
"
mochitest
.
testRoot
"
"
"
)
;
if
(
testRoot
.
endsWith
(
"
/
chrome
"
)
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
win
)
{
loadChromeScripts
(
win
)
;
return
;
}
windowTracker
.
init
(
)
;
}
}
const
IS_THUNDERBIRD
=
Services
.
appinfo
.
ID
=
=
"
{
3550f703
-
e582
-
4d05
-
9a08
-
453d09bdfdc6
}
"
;
const
WINDOW_TYPE
=
IS_THUNDERBIRD
?
"
mail
:
3pane
"
:
"
navigator
:
browser
"
;
var
WindowListener
=
{
setupWindow
(
win
)
{
win
.
nativeConsole
=
win
.
console
;
ChromeUtils
.
defineModuleGetter
(
win
"
console
"
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
}
tearDownWindow
(
win
)
{
if
(
win
.
nativeConsole
)
{
win
.
console
=
win
.
nativeConsole
;
win
.
nativeConsole
=
undefined
;
}
}
onOpenWindow
(
xulWin
)
{
let
win
=
xulWin
.
docShell
.
domWindow
;
win
.
addEventListener
(
"
load
"
function
(
)
{
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
=
=
WINDOW_TYPE
)
{
WindowListener
.
setupWindow
(
win
)
;
}
}
{
once
:
true
}
)
;
}
}
;
function
loadMochitest
(
e
)
{
let
flavor
=
e
.
detail
[
0
]
;
let
url
=
e
.
detail
[
1
]
;
let
win
=
Services
.
wm
.
getMostRecentWindow
(
WINDOW_TYPE
)
;
win
.
removeEventListener
(
"
mochitest
-
load
"
loadMochitest
)
;
if
(
!
IS_THUNDERBIRD
)
{
win
.
loadURI
(
url
null
null
null
null
null
null
null
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
if
(
flavor
=
=
"
mochitest
"
)
{
return
;
}
WindowListener
.
setupWindow
(
win
)
;
Services
.
wm
.
addListener
(
WindowListener
)
;
loadChromeScripts
(
win
)
;
}
this
.
mochikit
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
let
aomStartup
=
Cc
[
"
mozilla
.
org
/
addons
/
addon
-
manager
-
startup
;
1
"
]
.
getService
(
Ci
.
amIAddonManagerStartup
)
;
const
manifestURI
=
Services
.
io
.
newURI
(
"
manifest
.
json
"
null
this
.
extension
.
rootURI
)
;
const
targetURL
=
this
.
extension
.
rootURI
.
resolve
(
"
content
/
"
)
;
this
.
chromeHandle
=
aomStartup
.
registerChrome
(
manifestURI
[
[
"
content
"
"
mochikit
"
targetURL
]
]
)
;
if
(
AppConstants
.
platform
=
=
"
android
"
)
{
androidStartup
(
)
;
}
else
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
WINDOW_TYPE
)
;
win
.
addEventListener
(
"
mochitest
-
load
"
loadMochitest
)
;
}
}
onShutdown
(
)
{
if
(
AppConstants
.
platform
!
=
"
android
"
)
{
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
WINDOW_TYPE
)
)
{
WindowListener
.
tearDownWindow
(
win
)
;
}
Services
.
wm
.
removeListener
(
WindowListener
)
;
}
this
.
chromeHandle
.
destruct
(
)
;
this
.
chromeHandle
=
null
;
}
}
;
