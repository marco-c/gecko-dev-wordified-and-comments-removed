const
{
utils
:
Cu
interfaces
:
Ci
classes
:
Cc
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
WindowListener
=
{
setupWindow
:
function
(
win
)
{
win
.
nativeConsole
=
win
.
console
;
XPCOMUtils
.
defineLazyModuleGetter
(
win
"
console
"
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
}
tearDownWindow
:
function
(
win
)
{
if
(
win
.
nativeConsole
)
{
win
.
console
=
win
.
nativeConsole
;
win
.
nativeConsole
=
undefined
;
}
}
onOpenWindow
:
function
(
win
)
{
win
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
win
.
addEventListener
(
"
load
"
function
(
)
{
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
=
=
"
navigator
:
browser
"
)
{
WindowListener
.
setupWindow
(
win
)
;
}
}
{
once
:
true
}
)
;
}
}
function
loadMochitest
(
e
)
{
let
flavor
=
e
.
detail
[
0
]
;
let
url
=
e
.
detail
[
1
]
;
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
win
.
removeEventListener
(
'
mochitest
-
load
'
loadMochitest
)
;
win
.
loadURI
(
url
)
;
if
(
flavor
=
=
"
mochitest
"
)
{
return
;
}
WindowListener
.
setupWindow
(
win
)
;
Services
.
wm
.
addListener
(
WindowListener
)
;
let
overlay
;
if
(
flavor
=
=
"
jetpack
-
addon
"
)
{
overlay
=
"
chrome
:
/
/
mochikit
/
content
/
jetpack
-
addon
-
overlay
.
xul
"
;
}
else
if
(
flavor
=
=
"
jetpack
-
package
"
)
{
overlay
=
"
chrome
:
/
/
mochikit
/
content
/
jetpack
-
package
-
overlay
.
xul
"
;
}
else
{
overlay
=
"
chrome
:
/
/
mochikit
/
content
/
browser
-
test
-
overlay
.
xul
"
;
}
win
.
document
.
loadOverlay
(
overlay
null
)
;
}
function
startup
(
data
reason
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
win
.
addEventListener
(
'
mochitest
-
load
'
loadMochitest
)
;
}
function
shutdown
(
data
reason
)
{
let
windows
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
let
win
=
windows
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
WindowListener
.
tearDownWindow
(
win
)
;
}
Services
.
wm
.
removeListener
(
WindowListener
)
;
}
function
install
(
data
reason
)
{
}
function
uninstall
(
data
reason
)
{
}
