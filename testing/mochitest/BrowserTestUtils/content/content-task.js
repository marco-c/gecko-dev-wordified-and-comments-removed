"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Task
.
jsm
"
this
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTaskUtils
.
jsm
"
this
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
AssertCls
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
null
)
.
Assert
;
var
EventUtils
=
{
}
;
EventUtils
.
window
=
{
}
;
EventUtils
.
parent
=
EventUtils
.
window
;
EventUtils
.
_EU_Ci
=
Ci
;
EventUtils
.
_EU_Cc
=
Cc
;
EventUtils
.
KeyboardEvent
=
content
.
KeyboardEvent
;
EventUtils
.
navigator
=
content
.
navigator
;
EventUtils
.
synthesizeClick
=
element
=
>
new
Promise
(
resolve
=
>
{
element
.
addEventListener
(
"
click
"
function
(
)
{
resolve
(
)
;
}
{
once
:
true
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
element
{
type
:
"
mousedown
"
isSynthesized
:
false
}
content
)
;
EventUtils
.
synthesizeMouseAtCenter
(
element
{
type
:
"
mouseup
"
isSynthesized
:
false
}
content
)
;
}
)
;
try
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
}
catch
(
e
)
{
EventUtils
=
null
;
}
addMessageListener
(
"
content
-
task
:
spawn
"
function
(
msg
)
{
let
id
=
msg
.
data
.
id
;
let
source
=
msg
.
data
.
runnable
|
|
"
(
)
=
>
{
}
"
;
function
getStack
(
aStack
)
{
let
frames
=
[
]
;
for
(
let
frame
=
aStack
;
frame
;
frame
=
frame
.
caller
)
{
frames
.
push
(
frame
.
filename
+
"
:
"
+
frame
.
name
+
"
:
"
+
frame
.
lineNumber
)
;
}
return
frames
.
join
(
"
\
n
"
)
;
}
var
Assert
=
new
AssertCls
(
(
err
message
stack
)
=
>
{
sendAsyncMessage
(
"
content
-
task
:
test
-
result
"
{
id
condition
:
!
err
name
:
err
?
err
.
message
:
message
stack
:
getStack
(
err
?
err
.
stack
:
stack
)
}
)
;
}
)
;
var
ok
=
Assert
.
ok
.
bind
(
Assert
)
;
var
is
=
Assert
.
equal
.
bind
(
Assert
)
;
var
isnot
=
Assert
.
notEqual
.
bind
(
Assert
)
;
function
todo
(
expr
name
)
{
sendAsyncMessage
(
"
content
-
task
:
test
-
todo
"
{
id
expr
name
}
)
;
}
function
todo_is
(
a
b
name
)
{
sendAsyncMessage
(
"
content
-
task
:
test
-
todo_is
"
{
id
a
b
name
}
)
;
}
function
info
(
name
)
{
sendAsyncMessage
(
"
content
-
task
:
test
-
info
"
{
id
name
}
)
;
}
try
{
let
runnablestr
=
(
(
)
=
>
{
return
(
{
source
}
)
;
}
)
(
)
;
;
let
runnable
=
eval
(
runnablestr
)
;
let
iterator
=
runnable
.
call
(
this
msg
.
data
.
arg
)
;
Task
.
spawn
(
iterator
)
.
then
(
val
=
>
{
sendAsyncMessage
(
"
content
-
task
:
complete
"
{
id
result
:
val
}
)
;
}
e
=
>
{
sendAsyncMessage
(
"
content
-
task
:
complete
"
{
id
error
:
e
.
toString
(
)
}
)
;
}
)
;
}
catch
(
e
)
{
sendAsyncMessage
(
"
content
-
task
:
complete
"
{
id
error
:
e
.
toString
(
)
}
)
;
}
}
)
;
