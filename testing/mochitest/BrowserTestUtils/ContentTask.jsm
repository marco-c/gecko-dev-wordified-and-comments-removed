"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ContentTask
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
FRAME_SCRIPT
=
"
resource
:
/
/
testing
-
common
/
content
-
task
.
js
"
;
var
gFrameScriptLoaded
=
false
;
var
gPromises
=
new
Map
(
)
;
var
gMessageID
=
1
;
this
.
ContentTask
=
{
_testScope
:
null
_scopeValidId
:
0
spawn
:
function
ContentTask_spawn
(
browser
arg
task
)
{
if
(
!
gFrameScriptLoaded
)
{
Services
.
mm
.
loadFrameScript
(
FRAME_SCRIPT
true
)
;
gFrameScriptLoaded
=
true
;
}
let
deferred
=
{
}
;
deferred
.
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
resolve
=
resolve
;
deferred
.
reject
=
reject
;
}
)
;
let
id
=
gMessageID
+
+
;
gPromises
.
set
(
id
deferred
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
content
-
task
:
spawn
"
{
id
:
id
runnable
:
task
.
toString
(
)
arg
:
arg
}
)
;
return
deferred
.
promise
;
}
setTestScope
(
scope
)
{
this
.
_testScope
=
scope
;
this
.
_scopeValidId
=
gMessageID
;
}
}
;
var
ContentMessageListener
=
{
receiveMessage
(
aMessage
)
{
let
id
=
aMessage
.
data
.
id
;
if
(
id
<
ContentTask
.
_scopeValidId
)
{
throw
new
Error
(
"
test
result
returned
after
test
finished
"
)
;
}
if
(
aMessage
.
name
=
=
"
content
-
task
:
complete
"
)
{
let
deferred
=
gPromises
.
get
(
id
)
;
gPromises
.
delete
(
id
)
;
if
(
aMessage
.
data
.
error
)
{
deferred
.
reject
(
aMessage
.
data
.
error
)
;
}
else
{
deferred
.
resolve
(
aMessage
.
data
.
result
)
;
}
}
else
if
(
aMessage
.
name
=
=
"
content
-
task
:
test
-
result
"
)
{
let
data
=
aMessage
.
data
;
ContentTask
.
_testScope
.
ok
(
data
.
condition
data
.
name
null
data
.
stack
)
;
}
else
if
(
aMessage
.
name
=
=
"
content
-
task
:
test
-
info
"
)
{
ContentTask
.
_testScope
.
info
(
aMessage
.
data
.
name
)
;
}
else
if
(
aMessage
.
name
=
=
"
content
-
task
:
test
-
todo
"
)
{
ContentTask
.
_testScope
.
todo
(
aMessage
.
data
.
expr
aMessage
.
data
.
name
)
;
}
}
}
;
Services
.
mm
.
addMessageListener
(
"
content
-
task
:
complete
"
ContentMessageListener
)
;
Services
.
mm
.
addMessageListener
(
"
content
-
task
:
test
-
result
"
ContentMessageListener
)
;
Services
.
mm
.
addMessageListener
(
"
content
-
task
:
test
-
info
"
ContentMessageListener
)
;
