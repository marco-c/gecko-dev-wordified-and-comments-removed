"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserTestUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
.
loadFrameScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
BrowserTestUtils
/
content
-
utils
.
js
"
true
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
/
modules
/
E10SUtils
.
jsm
"
)
;
var
gSendCharCount
=
0
;
this
.
BrowserTestUtils
=
{
withNewTab
:
Task
.
async
(
function
*
(
options
taskFn
)
{
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
options
.
gBrowser
options
.
url
)
;
let
result
=
yield
taskFn
(
tab
.
linkedBrowser
)
;
options
.
gBrowser
.
removeTab
(
tab
)
;
return
Promise
.
resolve
(
result
)
;
}
)
openNewForegroundTab
(
tabbrowser
opening
=
"
about
:
blank
"
aWaitForLoad
=
true
)
{
let
tab
;
let
promises
=
[
BrowserTestUtils
.
switchTab
(
tabbrowser
function
(
)
{
if
(
typeof
opening
=
=
"
function
"
)
{
opening
(
)
;
tab
=
tabbrowser
.
selectedTab
;
}
else
{
tabbrowser
.
selectedTab
=
tab
=
tabbrowser
.
addTab
(
opening
)
;
}
}
)
]
;
if
(
aWaitForLoad
)
{
promises
.
push
(
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
)
;
}
return
Promise
.
all
(
promises
)
.
then
(
(
)
=
>
tab
)
;
}
switchTab
(
tabbrowser
tab
)
{
let
promise
=
new
Promise
(
resolve
=
>
{
tabbrowser
.
addEventListener
(
"
TabSwitchDone
"
function
onSwitch
(
)
{
tabbrowser
.
removeEventListener
(
"
TabSwitchDone
"
onSwitch
)
;
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
tabbrowser
.
selectedTab
)
)
;
}
)
;
}
)
;
if
(
typeof
tab
=
=
"
function
"
)
{
tab
(
)
;
}
else
{
tabbrowser
.
selectedTab
=
tab
;
}
return
promise
;
}
browserLoaded
(
browser
includeSubFrames
=
false
wantLoad
=
null
)
{
function
isWanted
(
url
)
{
if
(
!
wantLoad
)
{
return
true
;
}
else
if
(
typeof
(
wantLoad
)
=
=
"
function
"
)
{
return
wantLoad
(
url
)
;
}
else
{
return
wantLoad
=
=
url
;
}
}
return
new
Promise
(
resolve
=
>
{
let
mm
=
browser
.
ownerDocument
.
defaultView
.
messageManager
;
mm
.
addMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
function
onLoad
(
msg
)
{
if
(
msg
.
target
=
=
browser
&
&
(
!
msg
.
data
.
subframe
|
|
includeSubFrames
)
&
&
isWanted
(
msg
.
data
.
url
)
)
{
mm
.
removeMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
onLoad
)
;
resolve
(
msg
.
data
.
url
)
;
}
}
)
;
}
)
;
}
waitForNewTab
(
tabbrowser
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
tabbrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
function
onTabOpen
(
openEvent
)
{
tabbrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
onTabOpen
)
;
let
progressListener
=
{
onLocationChange
(
aBrowser
)
{
if
(
aBrowser
!
=
openEvent
.
target
.
linkedBrowser
|
|
(
url
&
&
aBrowser
.
currentURI
.
spec
!
=
url
)
|
|
(
!
url
&
&
aBrowser
.
currentURI
.
spec
=
=
"
about
:
blank
"
)
)
{
return
;
}
tabbrowser
.
removeTabsProgressListener
(
progressListener
)
;
resolve
(
openEvent
.
target
)
;
}
}
;
tabbrowser
.
addTabsProgressListener
(
progressListener
)
;
}
)
;
}
)
;
}
waitForNewWindow
:
Task
.
async
(
function
*
(
delayedStartup
=
true
)
{
let
win
=
yield
this
.
domWindowOpened
(
)
;
yield
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
;
return
win
;
}
)
loadURI
:
Task
.
async
(
function
*
(
browser
uri
)
{
browser
.
loadURI
(
uri
)
;
if
(
!
browser
.
ownerDocument
.
defaultView
.
gMultiProcessBrowser
)
{
return
;
}
let
process
=
browser
.
isRemoteBrowser
?
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_CONTENT
:
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
if
(
!
E10SUtils
.
canLoadURIInProcess
(
uri
process
)
)
{
yield
this
.
waitForEvent
(
browser
"
XULFrameLoaderCreated
"
)
;
}
}
)
domWindowOpened
(
)
{
return
new
Promise
(
resolve
=
>
{
function
observer
(
subject
topic
data
)
{
if
(
topic
!
=
"
domwindowopened
"
)
{
return
;
}
Services
.
ww
.
unregisterNotification
(
observer
)
;
resolve
(
subject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
)
;
}
Services
.
ww
.
registerNotification
(
observer
)
;
}
)
;
}
openNewBrowserWindow
(
options
=
{
}
)
{
let
argString
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
argString
.
data
=
"
"
;
let
features
=
"
chrome
dialog
=
no
all
"
;
if
(
options
.
private
)
{
features
+
=
"
private
"
;
}
if
(
options
.
hasOwnProperty
(
"
remote
"
)
)
{
let
remoteState
=
options
.
remote
?
"
remote
"
:
"
non
-
remote
"
;
features
+
=
{
remoteState
}
;
}
let
win
=
Services
.
ww
.
openWindow
(
null
Services
.
prefs
.
getCharPref
(
"
browser
.
chromeURL
"
)
"
_blank
"
features
argString
)
;
return
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
.
then
(
(
)
=
>
win
)
;
}
closeWindow
(
win
)
{
return
new
Promise
(
resolve
=
>
{
function
observer
(
subject
topic
data
)
{
if
(
topic
=
=
"
domwindowclosed
"
&
&
subject
=
=
=
win
)
{
Services
.
ww
.
unregisterNotification
(
observer
)
;
resolve
(
)
;
}
}
Services
.
ww
.
registerNotification
(
observer
)
;
win
.
close
(
)
;
}
)
;
}
waitForEvent
(
subject
eventName
capture
checkFn
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
subject
.
addEventListener
(
eventName
function
listener
(
event
)
{
try
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
subject
.
removeEventListener
(
eventName
listener
capture
)
;
resolve
(
event
)
;
}
catch
(
ex
)
{
try
{
subject
.
removeEventListener
(
eventName
listener
capture
)
;
}
catch
(
ex2
)
{
}
reject
(
ex
)
;
}
}
capture
)
;
}
)
;
}
synthesizeMouse
(
target
offsetX
offsetY
event
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SynthesizeMouseDone
"
function
mouseMsg
(
message
)
{
mm
.
removeMessageListener
(
"
Test
:
SynthesizeMouseDone
"
mouseMsg
)
;
resolve
(
message
.
data
.
defaultPrevented
)
;
}
)
;
let
cpowObject
=
null
;
let
targetFn
=
null
;
if
(
typeof
target
=
=
"
function
"
)
{
targetFn
=
target
.
toString
(
)
;
target
=
null
;
}
else
if
(
typeof
target
!
=
"
string
"
)
{
cpowObject
=
target
;
target
=
null
;
}
mm
.
sendAsyncMessage
(
"
Test
:
SynthesizeMouse
"
{
target
targetFn
x
:
offsetX
y
:
offsetY
event
:
event
}
{
object
:
cpowObject
}
)
;
}
)
;
}
synthesizeMouseAtCenter
(
target
event
browser
)
{
event
.
centered
=
true
;
return
BrowserTestUtils
.
synthesizeMouse
(
target
0
0
event
browser
)
;
}
synthesizeMouseAtPoint
(
offsetX
offsetY
event
browser
)
{
return
BrowserTestUtils
.
synthesizeMouse
(
null
offsetX
offsetY
event
browser
)
;
}
removeTab
(
tab
options
=
{
}
)
{
let
dontRemove
=
options
&
&
options
.
dontRemove
;
return
new
Promise
(
resolve
=
>
{
let
{
messageManager
:
mm
frameLoader
}
=
tab
.
linkedBrowser
;
mm
.
addMessageListener
(
"
SessionStore
:
update
"
function
onMessage
(
msg
)
{
if
(
msg
.
targetFrameLoader
=
=
frameLoader
&
&
msg
.
data
.
isFinal
)
{
mm
.
removeMessageListener
(
"
SessionStore
:
update
"
onMessage
)
;
resolve
(
)
;
}
}
true
)
;
if
(
!
dontRemove
&
&
!
tab
.
closing
)
{
tab
.
ownerDocument
.
defaultView
.
gBrowser
.
removeTab
(
tab
)
;
}
}
)
;
}
crashBrowser
:
Task
.
async
(
function
*
(
browser
)
{
let
extra
=
{
}
;
let
KeyValueParser
=
{
}
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
KeyValueParser
.
jsm
"
KeyValueParser
)
;
}
if
(
!
browser
.
isRemoteBrowser
)
{
throw
new
Error
(
"
<
xul
:
browser
>
needs
to
be
remote
in
order
to
crash
"
)
;
}
function
getMinidumpDirectory
(
)
{
let
dir
=
Services
.
dirsvc
.
get
(
'
ProfD
'
Ci
.
nsIFile
)
;
dir
.
append
(
"
minidumps
"
)
;
return
dir
;
}
function
removeFile
(
directory
filename
)
{
let
file
=
directory
.
clone
(
)
;
file
.
append
(
filename
)
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
let
frame_script
=
(
)
=
>
{
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
let
dies
=
function
(
)
{
privateNoteIntentionalCrash
(
)
;
let
zero
=
new
ctypes
.
intptr_t
(
8
)
;
let
badptr
=
ctypes
.
cast
(
zero
ctypes
.
PointerType
(
ctypes
.
int32_t
)
)
;
badptr
.
contents
}
;
dump
(
"
\
nEt
tu
Brute
?
\
n
"
)
;
dies
(
)
;
}
let
crashCleanupPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
topic
!
=
"
ipc
:
content
-
shutdown
"
)
{
return
reject
(
"
Received
incorrect
observer
topic
:
"
+
topic
)
;
}
if
(
!
(
subject
instanceof
Ci
.
nsIPropertyBag2
)
)
{
return
reject
(
"
Subject
did
not
implement
nsIPropertyBag2
"
)
;
}
if
(
!
subject
.
hasKey
(
"
abnormal
"
)
)
{
dump
(
"
\
nThis
is
a
normal
termination
and
isn
'
t
the
one
we
are
looking
for
.
.
.
\
n
"
)
;
return
;
}
let
dumpID
;
if
(
'
nsICrashReporter
'
in
Ci
)
{
dumpID
=
subject
.
getPropertyAsAString
(
'
dumpID
'
)
;
if
(
!
dumpID
)
{
return
reject
(
"
dumpID
was
not
present
despite
crash
reporting
"
+
"
being
enabled
"
)
;
}
}
if
(
dumpID
)
{
let
minidumpDirectory
=
getMinidumpDirectory
(
)
;
let
extrafile
=
minidumpDirectory
.
clone
(
)
;
extrafile
.
append
(
dumpID
+
'
.
extra
'
)
;
if
(
extrafile
.
exists
(
)
)
{
dump
(
\
nNo
.
extra
file
for
dumpID
:
{
dumpID
}
\
n
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
extra
=
KeyValueParser
.
parseKeyValuePairsFromFile
(
extrafile
)
;
}
else
{
dump
(
'
\
nCrashReporter
not
enabled
-
will
not
return
any
extra
data
\
n
'
)
;
}
}
removeFile
(
minidumpDirectory
dumpID
+
'
.
dmp
'
)
;
removeFile
(
minidumpDirectory
dumpID
+
'
.
extra
'
)
;
}
Services
.
obs
.
removeObserver
(
observer
'
ipc
:
content
-
shutdown
'
)
;
dump
(
"
\
nCrash
cleaned
up
\
n
"
)
;
resolve
(
)
;
}
;
Services
.
obs
.
addObserver
(
observer
'
ipc
:
content
-
shutdown
'
false
)
;
}
)
;
let
aboutTabCrashedLoadPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
browser
.
addEventListener
(
"
AboutTabCrashedLoad
"
function
onCrash
(
)
{
browser
.
removeEventListener
(
"
AboutTabCrashedLoad
"
onCrash
false
)
;
dump
(
"
\
nabout
:
tabcrashed
loaded
\
n
"
)
;
resolve
(
)
;
}
false
true
)
;
}
)
;
let
mm
=
browser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frame_script
.
toString
(
)
+
"
)
(
)
;
"
false
)
;
yield
Promise
.
all
(
[
crashCleanupPromise
aboutTabCrashedLoadPromise
]
)
;
let
gBrowser
=
browser
.
ownerDocument
.
defaultView
.
gBrowser
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
.
getAttribute
(
"
crashed
"
)
!
=
"
true
"
)
{
throw
new
Error
(
"
Tab
should
be
marked
as
crashed
"
)
;
}
return
extra
;
}
)
waitForAttribute
(
attr
element
value
)
{
let
MutationObserver
=
element
.
ownerDocument
.
defaultView
.
MutationObserver
;
return
new
Promise
(
resolve
=
>
{
let
mut
=
new
MutationObserver
(
mutations
=
>
{
if
(
(
!
value
&
&
element
.
getAttribute
(
attr
)
)
|
|
(
value
&
&
element
.
getAttribute
(
attr
)
=
=
=
value
)
)
{
resolve
(
)
;
mut
.
disconnect
(
)
;
return
;
}
}
)
;
mut
.
observe
(
element
{
attributeFilter
:
[
attr
]
}
)
;
}
)
;
}
sendChar
(
char
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
seq
=
+
+
gSendCharCount
;
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SendCharDone
"
function
charMsg
(
message
)
{
if
(
message
.
data
.
seq
!
=
seq
)
return
;
mm
.
removeMessageListener
(
"
Test
:
SendCharDone
"
charMsg
)
;
resolve
(
message
.
data
.
sendCharResult
)
;
}
)
;
mm
.
sendAsyncMessage
(
"
Test
:
SendChar
"
{
char
:
char
seq
:
seq
}
)
;
}
)
;
}
}
;
