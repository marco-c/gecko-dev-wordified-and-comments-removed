"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserTestUtils
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
ContentTask
.
jsm
"
)
;
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
.
loadFrameScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
BrowserTestUtils
/
content
-
utils
.
js
"
true
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
const
PROCESSSELECTOR_CONTRACTID
=
"
mozilla
.
org
/
ipc
/
processselector
;
1
"
;
const
OUR_PROCESSSELECTOR_CID
=
Components
.
ID
(
"
{
f9746211
-
3d53
-
4465
-
9aeb
-
ca0d96de0253
}
"
)
;
const
EXISTING_JSID
=
Cc
[
PROCESSSELECTOR_CONTRACTID
]
;
const
DEFAULT_PROCESSSELECTOR_CID
=
EXISTING_JSID
?
Components
.
ID
(
EXISTING_JSID
.
number
)
:
null
;
let
gListenerId
=
0
;
function
NewProcessSelector
(
)
{
}
NewProcessSelector
.
prototype
=
{
classID
:
OUR_PROCESSSELECTOR_CID
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIContentProcessProvider
]
)
provideProcess
(
)
{
return
Ci
.
nsIContentProcessProvider
.
NEW_PROCESS
;
}
}
;
let
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
let
selectorFactory
=
XPCOMUtils
.
_getFactory
(
NewProcessSelector
)
;
registrar
.
registerFactory
(
OUR_PROCESSSELECTOR_CID
"
"
null
selectorFactory
)
;
Cu
.
permitCPOWsInScope
(
this
)
;
var
gSendCharCount
=
0
;
var
gSynthesizeKeyCount
=
0
;
var
gSynthesizeCompositionCount
=
0
;
var
gSynthesizeCompositionChangeCount
=
0
;
const
kAboutPageRegistrationContentScript
=
"
chrome
:
/
/
mochikit
/
content
/
tests
/
BrowserTestUtils
/
content
-
about
-
page
-
utils
.
js
"
;
var
BrowserTestUtils
=
{
async
withNewTab
(
options
taskFn
)
{
if
(
typeof
(
options
)
=
=
"
string
"
)
{
options
=
{
gBrowser
:
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
.
gBrowser
url
:
options
}
}
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
options
)
;
let
originalWindow
=
tab
.
ownerGlobal
;
let
result
=
await
taskFn
(
tab
.
linkedBrowser
)
;
let
finalWindow
=
tab
.
ownerGlobal
;
if
(
originalWindow
=
=
finalWindow
&
&
!
tab
.
closing
&
&
tab
.
linkedBrowser
)
{
await
TestUtils
.
waitForTick
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
else
{
Services
.
console
.
logStringMessage
(
"
BrowserTestUtils
.
withNewTab
:
Tab
was
already
closed
before
"
+
"
removeTab
would
have
been
called
"
)
;
}
return
Promise
.
resolve
(
result
)
;
}
openNewForegroundTab
(
tabbrowser
.
.
.
args
)
{
let
options
;
if
(
tabbrowser
.
ownerGlobal
&
&
tabbrowser
=
=
=
tabbrowser
.
ownerGlobal
.
gBrowser
)
{
let
[
opening
=
"
about
:
blank
"
waitForLoad
=
true
waitForStateStop
=
false
forceNewProcess
=
false
]
=
args
;
options
=
{
opening
waitForLoad
waitForStateStop
forceNewProcess
}
;
}
else
{
if
(
"
url
"
in
tabbrowser
&
&
!
(
"
opening
"
in
tabbrowser
)
)
{
tabbrowser
.
opening
=
tabbrowser
.
url
;
}
let
{
opening
=
"
about
:
blank
"
waitForLoad
=
true
waitForStateStop
=
false
forceNewProcess
=
false
}
=
tabbrowser
;
tabbrowser
=
tabbrowser
.
gBrowser
;
options
=
{
opening
waitForLoad
waitForStateStop
forceNewProcess
}
;
}
let
{
opening
:
opening
waitForLoad
:
aWaitForLoad
waitForStateStop
:
aWaitForStateStop
}
=
options
;
let
promises
tab
;
try
{
if
(
options
.
forceNewProcess
&
&
DEFAULT_PROCESSSELECTOR_CID
)
{
registrar
.
registerFactory
(
OUR_PROCESSSELECTOR_CID
"
"
PROCESSSELECTOR_CONTRACTID
null
)
;
}
promises
=
[
BrowserTestUtils
.
switchTab
(
tabbrowser
function
(
)
{
if
(
typeof
opening
=
=
"
function
"
)
{
opening
(
)
;
tab
=
tabbrowser
.
selectedTab
;
}
else
{
tabbrowser
.
selectedTab
=
tab
=
tabbrowser
.
addTab
(
opening
)
;
}
}
)
]
;
if
(
aWaitForLoad
)
{
promises
.
push
(
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
)
;
}
if
(
aWaitForStateStop
)
{
promises
.
push
(
BrowserTestUtils
.
browserStopped
(
tab
.
linkedBrowser
)
)
;
}
}
finally
{
if
(
options
.
forceNewProcess
&
&
DEFAULT_PROCESSSELECTOR_CID
)
{
registrar
.
registerFactory
(
DEFAULT_PROCESSSELECTOR_CID
"
"
PROCESSSELECTOR_CONTRACTID
null
)
;
}
}
return
Promise
.
all
(
promises
)
.
then
(
(
)
=
>
tab
)
;
}
switchTab
(
tabbrowser
tab
)
{
let
promise
=
new
Promise
(
resolve
=
>
{
tabbrowser
.
addEventListener
(
"
TabSwitchDone
"
function
(
)
{
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
tabbrowser
.
selectedTab
)
)
;
}
{
once
:
true
}
)
;
}
)
;
if
(
typeof
tab
=
=
"
function
"
)
{
tab
(
)
;
}
else
{
tabbrowser
.
selectedTab
=
tab
;
}
return
promise
;
}
browserLoaded
(
browser
includeSubFrames
=
false
wantLoad
=
null
)
{
if
(
includeSubFrames
&
&
typeof
includeSubFrames
!
=
"
boolean
"
)
{
throw
(
"
The
second
argument
to
browserLoaded
should
be
a
boolean
.
"
)
;
}
let
tabbrowser
=
browser
.
ownerGlobal
.
gBrowser
;
if
(
tabbrowser
&
&
tabbrowser
.
getTabForBrowser
)
{
tabbrowser
.
_insertBrowser
(
tabbrowser
.
getTabForBrowser
(
browser
)
)
;
}
function
isWanted
(
url
)
{
if
(
!
wantLoad
)
{
return
true
;
}
else
if
(
typeof
(
wantLoad
)
=
=
"
function
"
)
{
return
wantLoad
(
url
)
;
}
else
{
return
wantLoad
=
=
url
;
}
}
return
new
Promise
(
resolve
=
>
{
let
mm
=
browser
.
ownerGlobal
.
messageManager
;
mm
.
addMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
function
onLoad
(
msg
)
{
if
(
msg
.
target
=
=
browser
&
&
(
!
msg
.
data
.
subframe
|
|
includeSubFrames
)
&
&
isWanted
(
msg
.
data
.
url
)
)
{
mm
.
removeMessageListener
(
"
browser
-
test
-
utils
:
loadEvent
"
onLoad
)
;
resolve
(
msg
.
data
.
url
)
;
}
}
)
;
}
)
;
}
firstBrowserLoaded
(
win
aboutBlank
=
true
checkFn
=
null
)
{
let
mm
=
win
.
messageManager
;
return
this
.
waitForMessage
(
mm
"
browser
-
test
-
utils
:
loadEvent
"
(
msg
)
=
>
{
if
(
checkFn
)
{
return
checkFn
(
msg
.
target
)
;
}
let
selectedBrowser
=
win
.
gBrowser
.
selectedBrowser
;
return
msg
.
target
=
=
selectedBrowser
&
&
(
aboutBlank
|
|
selectedBrowser
.
currentURI
.
spec
!
=
"
about
:
blank
"
)
}
)
;
}
_webProgressListeners
:
new
Set
(
)
browserStopped
(
browser
expectedURI
checkAborts
=
false
)
{
return
new
Promise
(
resolve
=
>
{
const
kDocStopFlags
=
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
|
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
let
wpl
=
{
onStateChange
(
aWebProgress
aRequest
aStateFlags
aStatus
)
{
dump
(
"
Saw
state
"
+
aStateFlags
.
toString
(
16
)
+
"
and
status
"
+
aStatus
.
toString
(
16
)
+
"
\
n
"
)
;
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
&
&
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
(
checkAborts
|
|
aStatus
!
=
Cr
.
NS_BINDING_ABORTED
)
&
&
aWebProgress
.
isTopLevel
)
{
let
chan
=
aRequest
.
QueryInterface
(
Ci
.
nsIChannel
)
;
dump
(
"
Browser
loaded
"
+
chan
.
originalURI
.
spec
+
"
\
n
"
)
;
if
(
!
expectedURI
|
|
chan
.
originalURI
.
spec
=
=
expectedURI
)
{
browser
.
removeProgressListener
(
wpl
)
;
BrowserTestUtils
.
_webProgressListeners
.
delete
(
wpl
)
;
resolve
(
)
;
}
}
;
}
onSecurityChange
(
)
{
}
onStatusChange
(
)
{
}
onLocationChange
(
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsIWebProgressListener2
Ci
.
nsISupportsWeakReference
]
)
}
;
browser
.
addProgressListener
(
wpl
)
;
this
.
_webProgressListeners
.
add
(
wpl
)
;
dump
(
"
Waiting
for
browser
load
"
+
(
expectedURI
?
(
"
of
"
+
expectedURI
)
:
"
"
)
+
"
\
n
"
)
;
}
)
;
}
waitForNewTab
(
tabbrowser
url
waitForLoad
=
false
waitForAnyTab
=
false
)
{
let
urlMatches
=
url
?
(
urlToMatch
)
=
>
urlToMatch
=
=
url
:
(
urlToMatch
)
=
>
urlToMatch
!
=
"
about
:
blank
"
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
tabbrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
function
tabOpenListener
(
openEvent
)
{
if
(
!
waitForAnyTab
)
{
tabbrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
tabOpenListener
)
;
}
let
newTab
=
openEvent
.
target
;
let
newBrowser
=
newTab
.
linkedBrowser
;
let
result
;
if
(
waitForLoad
)
{
result
=
BrowserTestUtils
.
browserLoaded
(
newBrowser
false
urlMatches
)
.
then
(
(
)
=
>
newTab
)
;
}
else
{
result
=
newTab
;
}
let
progressListener
=
{
onLocationChange
(
aBrowser
)
{
if
(
aBrowser
!
=
newBrowser
)
{
return
;
}
if
(
!
urlMatches
(
aBrowser
.
currentURI
.
spec
)
)
{
return
;
}
if
(
waitForAnyTab
)
{
tabbrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
tabOpenListener
)
;
}
tabbrowser
.
removeTabsProgressListener
(
progressListener
)
;
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
result
)
)
;
}
}
;
tabbrowser
.
addTabsProgressListener
(
progressListener
)
;
}
)
;
}
)
;
}
waitForLocationChange
(
tabbrowser
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
progressListener
=
{
onLocationChange
(
aBrowser
)
{
if
(
(
url
&
&
aBrowser
.
currentURI
.
spec
!
=
url
)
|
|
(
!
url
&
&
aBrowser
.
currentURI
.
spec
=
=
"
about
:
blank
"
)
)
{
return
;
}
tabbrowser
.
removeTabsProgressListener
(
progressListener
)
;
resolve
(
)
;
}
}
;
tabbrowser
.
addTabsProgressListener
(
progressListener
)
;
}
)
;
}
async
waitForNewWindow
(
initialBrowserLoaded
=
null
)
{
let
win
=
await
this
.
domWindowOpened
(
)
;
let
promises
=
[
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
]
;
if
(
initialBrowserLoaded
)
{
await
this
.
waitForEvent
(
win
"
DOMContentLoaded
"
)
;
let
browser
=
win
.
gBrowser
.
selectedBrowser
;
let
process
=
browser
.
isRemoteBrowser
?
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_CONTENT
:
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
if
(
win
.
gMultiProcessBrowser
&
&
!
E10SUtils
.
canLoadURIInProcess
(
initialBrowserLoaded
process
)
)
{
await
this
.
waitForEvent
(
browser
"
XULFrameLoaderCreated
"
)
;
}
let
loadPromise
=
this
.
browserLoaded
(
browser
false
initialBrowserLoaded
)
;
promises
.
push
(
loadPromise
)
;
}
await
Promise
.
all
(
promises
)
;
return
win
;
}
async
loadURI
(
browser
uri
)
{
browser
.
loadURI
(
uri
)
;
if
(
!
browser
.
ownerGlobal
.
gMultiProcessBrowser
)
{
return
;
}
let
process
=
browser
.
isRemoteBrowser
?
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_CONTENT
:
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
;
if
(
!
E10SUtils
.
canLoadURIInProcess
(
uri
process
)
)
{
await
this
.
waitForEvent
(
browser
"
XULFrameLoaderCreated
"
)
;
}
}
domWindowOpened
(
win
checkFn
)
{
return
new
Promise
(
resolve
=
>
{
async
function
observer
(
subject
topic
data
)
{
if
(
topic
=
=
"
domwindowopened
"
&
&
(
!
win
|
|
subject
=
=
=
win
)
)
{
let
observedWindow
=
subject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
if
(
checkFn
&
&
!
await
checkFn
(
observedWindow
)
)
{
return
;
}
Services
.
ww
.
unregisterNotification
(
observer
)
;
resolve
(
observedWindow
)
;
}
}
Services
.
ww
.
registerNotification
(
observer
)
;
}
)
;
}
domWindowClosed
(
win
)
{
return
new
Promise
(
(
resolve
)
=
>
{
function
observer
(
subject
topic
data
)
{
if
(
topic
=
=
"
domwindowclosed
"
&
&
(
!
win
|
|
subject
=
=
=
win
)
)
{
Services
.
ww
.
unregisterNotification
(
observer
)
;
resolve
(
subject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
)
;
}
}
Services
.
ww
.
registerNotification
(
observer
)
;
}
)
;
}
async
openNewBrowserWindow
(
options
=
{
}
)
{
let
argString
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
argString
.
data
=
"
"
;
let
features
=
"
chrome
dialog
=
no
all
"
;
let
opener
=
null
;
if
(
options
.
opener
)
{
opener
=
options
.
opener
;
}
if
(
options
.
private
)
{
features
+
=
"
private
"
;
}
if
(
options
.
width
)
{
features
+
=
"
width
=
"
+
options
.
width
;
}
if
(
options
.
height
)
{
features
+
=
"
height
=
"
+
options
.
height
;
}
if
(
options
.
left
)
{
features
+
=
"
left
=
"
+
options
.
left
;
}
if
(
options
.
top
)
{
features
+
=
"
top
=
"
+
options
.
top
;
}
if
(
options
.
hasOwnProperty
(
"
remote
"
)
)
{
let
remoteState
=
options
.
remote
?
"
remote
"
:
"
non
-
remote
"
;
features
+
=
{
remoteState
}
;
}
let
win
=
Services
.
ww
.
openWindow
(
opener
Services
.
prefs
.
getCharPref
(
"
browser
.
chromeURL
"
)
"
_blank
"
features
argString
)
;
let
startupPromise
=
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
.
then
(
(
)
=
>
win
)
;
let
loadPromise
=
this
.
firstBrowserLoaded
(
win
)
;
await
startupPromise
;
await
loadPromise
;
return
win
;
}
closeWindow
(
win
)
{
let
closedPromise
=
BrowserTestUtils
.
windowClosed
(
win
)
;
win
.
close
(
)
;
return
closedPromise
;
}
windowClosed
(
win
)
{
let
domWinClosedPromise
=
BrowserTestUtils
.
domWindowClosed
(
win
)
;
let
promises
=
[
domWinClosedPromise
]
;
let
winType
=
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
if
(
winType
=
=
"
navigator
:
browser
"
)
{
let
finalMsgsPromise
=
new
Promise
(
(
resolve
)
=
>
{
let
browserSet
=
new
Set
(
win
.
gBrowser
.
browsers
)
;
browserSet
.
forEach
(
(
browser
)
=
>
{
win
.
gBrowser
.
_insertBrowser
(
win
.
gBrowser
.
getTabForBrowser
(
browser
)
)
;
}
)
let
mm
=
win
.
getGroupMessageManager
(
"
browsers
"
)
;
mm
.
addMessageListener
(
"
SessionStore
:
update
"
function
onMessage
(
msg
)
{
if
(
browserSet
.
has
(
msg
.
target
)
&
&
msg
.
data
.
isFinal
)
{
browserSet
.
delete
(
msg
.
target
)
;
if
(
!
browserSet
.
size
)
{
mm
.
removeMessageListener
(
"
SessionStore
:
update
"
onMessage
)
;
TestUtils
.
executeSoon
(
resolve
)
;
}
}
}
true
)
;
}
)
;
promises
.
push
(
finalMsgsPromise
)
;
}
return
Promise
.
all
(
promises
)
;
}
waitForEvent
(
subject
eventName
capture
checkFn
wantsUntrusted
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
subject
.
addEventListener
(
eventName
function
listener
(
event
)
{
try
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
subject
.
removeEventListener
(
eventName
listener
capture
)
;
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
event
)
)
;
}
catch
(
ex
)
{
try
{
subject
.
removeEventListener
(
eventName
listener
capture
)
;
}
catch
(
ex2
)
{
}
TestUtils
.
executeSoon
(
(
)
=
>
reject
(
ex
)
)
;
}
}
capture
wantsUntrusted
)
;
}
)
;
}
waitForContentEvent
(
browser
eventName
capture
=
false
checkFn
wantsUntrusted
=
false
)
{
let
parameters
=
{
eventName
capture
checkFnSource
:
checkFn
?
checkFn
.
toSource
(
)
:
null
wantsUntrusted
}
;
return
ContentTask
.
spawn
(
browser
parameters
function
(
{
eventName
capture
checkFnSource
wantsUntrusted
}
)
{
let
checkFn
;
if
(
checkFnSource
)
{
checkFn
=
eval
(
(
(
)
=
>
(
{
checkFnSource
}
)
)
(
)
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
addEventListener
(
eventName
function
listener
(
event
)
{
let
completion
=
resolve
;
try
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
}
catch
(
e
)
{
completion
=
(
)
=
>
reject
(
e
)
;
}
removeEventListener
(
eventName
listener
capture
)
;
completion
(
)
;
}
capture
wantsUntrusted
)
;
}
)
;
}
)
;
}
addContentEventListener
(
browser
eventName
listener
useCapture
=
false
checkFn
wantsUntrusted
=
false
autoremove
=
true
)
{
let
id
=
gListenerId
+
+
;
let
checkFnSource
=
checkFn
?
encodeURIComponent
(
escape
(
checkFn
.
toSource
(
)
)
)
:
"
"
;
function
frameScript
(
id
eventName
useCapture
checkFnSource
wantsUntrusted
)
{
let
checkFn
;
if
(
checkFnSource
)
{
checkFn
=
eval
(
(
(
)
=
>
(
{
unescape
(
checkFnSource
)
}
)
)
(
)
)
;
}
function
listener
(
event
)
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
sendAsyncMessage
(
"
ContentEventListener
:
Run
"
id
)
;
}
function
removeListener
(
msg
)
{
if
(
msg
.
data
=
=
id
)
{
removeMessageListener
(
"
ContentEventListener
:
Remove
"
removeListener
)
;
removeEventListener
(
eventName
listener
useCapture
wantsUntrusted
)
;
}
}
addMessageListener
(
"
ContentEventListener
:
Remove
"
removeListener
)
;
addEventListener
(
eventName
listener
useCapture
wantsUntrusted
)
;
}
let
frameScriptSource
=
data
:
(
{
frameScript
.
toString
(
)
}
)
(
{
id
}
"
{
eventName
}
"
{
useCapture
}
"
{
checkFnSource
}
"
{
wantsUntrusted
}
)
;
let
mm
=
Services
.
mm
;
function
runListener
(
msg
)
{
if
(
msg
.
data
=
=
id
&
&
msg
.
target
=
=
browser
)
{
listener
(
)
;
}
}
mm
.
addMessageListener
(
"
ContentEventListener
:
Run
"
runListener
)
;
let
needCleanup
=
true
;
let
unregisterFunction
=
function
(
)
{
if
(
!
needCleanup
)
{
return
;
}
needCleanup
=
false
;
mm
.
removeMessageListener
(
"
ContentEventListener
:
Run
"
runListener
)
;
mm
.
broadcastAsyncMessage
(
"
ContentEventListener
:
Remove
"
id
)
;
mm
.
removeDelayedFrameScript
(
frameScriptSource
)
;
if
(
autoremove
)
{
Services
.
obs
.
removeObserver
(
cleanupObserver
"
message
-
manager
-
close
"
)
;
}
}
;
function
cleanupObserver
(
subject
topic
data
)
{
if
(
subject
=
=
browser
.
messageManager
)
{
unregisterFunction
(
)
;
}
}
if
(
autoremove
)
{
Services
.
obs
.
addObserver
(
cleanupObserver
"
message
-
manager
-
close
"
)
;
}
mm
.
loadFrameScript
(
frameScriptSource
true
)
;
return
unregisterFunction
;
}
waitForErrorPage
(
browser
)
{
let
waitForLoad
=
(
)
=
>
this
.
waitForContentEvent
(
browser
"
AboutNetErrorLoad
"
false
null
true
)
;
let
win
=
browser
.
ownerGlobal
;
let
tab
=
win
.
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
!
tab
|
|
browser
.
isRemoteBrowser
|
|
!
win
.
gMultiProcessBrowser
)
{
return
waitForLoad
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
tab
.
addEventListener
(
"
TabRemotenessChange
"
function
(
)
{
waitForLoad
(
)
.
then
(
resolve
reject
)
;
}
{
once
:
true
}
)
;
}
)
;
}
synthesizeMouse
(
target
offsetX
offsetY
event
browser
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SynthesizeMouseDone
"
function
mouseMsg
(
message
)
{
mm
.
removeMessageListener
(
"
Test
:
SynthesizeMouseDone
"
mouseMsg
)
;
if
(
message
.
data
.
hasOwnProperty
(
"
defaultPrevented
"
)
)
{
resolve
(
message
.
data
.
defaultPrevented
)
;
}
else
{
reject
(
new
Error
(
message
.
data
.
error
)
)
;
}
}
)
;
let
cpowObject
=
null
;
let
targetFn
=
null
;
if
(
typeof
target
=
=
"
function
"
)
{
targetFn
=
target
.
toString
(
)
;
target
=
null
;
}
else
if
(
typeof
target
!
=
"
string
"
)
{
cpowObject
=
target
;
target
=
null
;
}
mm
.
sendAsyncMessage
(
"
Test
:
SynthesizeMouse
"
{
target
targetFn
x
:
offsetX
y
:
offsetY
event
:
event
}
{
object
:
cpowObject
}
)
;
}
)
;
}
waitForMessage
(
messageManager
message
checkFn
)
{
return
new
Promise
(
resolve
=
>
{
messageManager
.
addMessageListener
(
message
function
onMessage
(
msg
)
{
if
(
!
checkFn
|
|
checkFn
(
msg
)
)
{
messageManager
.
removeMessageListener
(
message
onMessage
)
;
resolve
(
msg
.
data
)
;
}
}
)
;
}
)
;
}
synthesizeMouseAtCenter
(
target
event
browser
)
{
event
.
centered
=
true
;
return
BrowserTestUtils
.
synthesizeMouse
(
target
0
0
event
browser
)
;
}
synthesizeMouseAtPoint
(
offsetX
offsetY
event
browser
)
{
return
BrowserTestUtils
.
synthesizeMouse
(
null
offsetX
offsetY
event
browser
)
;
}
removeTab
(
tab
options
=
{
}
)
{
let
tabRemoved
=
BrowserTestUtils
.
tabRemoved
(
tab
)
;
if
(
!
tab
.
closing
)
{
tab
.
ownerGlobal
.
gBrowser
.
removeTab
(
tab
options
)
;
}
return
tabRemoved
;
}
tabRemoved
(
tab
)
{
return
new
Promise
(
resolve
=
>
{
let
{
messageManager
:
mm
frameLoader
}
=
tab
.
linkedBrowser
;
mm
.
addMessageListener
(
"
SessionStore
:
update
"
function
onMessage
(
msg
)
{
if
(
msg
.
targetFrameLoader
=
=
frameLoader
&
&
msg
.
data
.
isFinal
)
{
mm
.
removeMessageListener
(
"
SessionStore
:
update
"
onMessage
)
;
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
)
)
;
}
}
true
)
;
}
)
;
}
async
crashBrowser
(
browser
shouldShowTabCrashPage
=
true
shouldClearMinidumps
=
true
)
{
let
extra
=
{
}
;
let
KeyValueParser
=
{
}
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
KeyValueParser
.
jsm
"
KeyValueParser
)
;
}
if
(
!
browser
.
isRemoteBrowser
)
{
throw
new
Error
(
"
<
xul
:
browser
>
needs
to
be
remote
in
order
to
crash
"
)
;
}
function
getMinidumpDirectory
(
)
{
let
dir
=
Services
.
dirsvc
.
get
(
'
ProfD
'
Ci
.
nsIFile
)
;
dir
.
append
(
"
minidumps
"
)
;
return
dir
;
}
function
removeFile
(
directory
filename
)
{
let
file
=
directory
.
clone
(
)
;
file
.
append
(
filename
)
;
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
let
frame_script
=
(
)
=
>
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ctypes
.
jsm
"
)
;
let
dies
=
function
(
)
{
privateNoteIntentionalCrash
(
)
;
let
zero
=
new
ctypes
.
intptr_t
(
8
)
;
let
badptr
=
ctypes
.
cast
(
zero
ctypes
.
PointerType
(
ctypes
.
int32_t
)
)
;
badptr
.
contents
}
;
dump
(
"
\
nEt
tu
Brute
?
\
n
"
)
;
dies
(
)
;
}
let
expectedPromises
=
[
]
;
let
crashCleanupPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
if
(
topic
!
=
"
ipc
:
content
-
shutdown
"
)
{
return
reject
(
"
Received
incorrect
observer
topic
:
"
+
topic
)
;
}
if
(
!
(
subject
instanceof
Ci
.
nsIPropertyBag2
)
)
{
return
reject
(
"
Subject
did
not
implement
nsIPropertyBag2
"
)
;
}
if
(
!
subject
.
hasKey
(
"
abnormal
"
)
)
{
dump
(
"
\
nThis
is
a
normal
termination
and
isn
'
t
the
one
we
are
looking
for
.
.
.
\
n
"
)
;
return
;
}
let
dumpID
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
dumpID
=
subject
.
getPropertyAsAString
(
'
dumpID
'
)
;
if
(
!
dumpID
)
{
return
reject
(
"
dumpID
was
not
present
despite
crash
reporting
"
+
"
being
enabled
"
)
;
}
}
let
removalPromise
=
Promise
.
resolve
(
)
;
if
(
dumpID
)
{
removalPromise
=
Services
.
crashmanager
.
ensureCrashIsPresent
(
dumpID
)
.
then
(
(
)
=
>
{
let
minidumpDirectory
=
getMinidumpDirectory
(
)
;
let
extrafile
=
minidumpDirectory
.
clone
(
)
;
extrafile
.
append
(
dumpID
+
'
.
extra
'
)
;
if
(
extrafile
.
exists
(
)
)
{
dump
(
\
nNo
.
extra
file
for
dumpID
:
{
dumpID
}
\
n
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
extra
=
KeyValueParser
.
parseKeyValuePairsFromFile
(
extrafile
)
;
}
else
{
dump
(
'
\
nCrashReporter
not
enabled
-
will
not
return
any
extra
data
\
n
'
)
;
}
}
if
(
shouldClearMinidumps
)
{
removeFile
(
minidumpDirectory
dumpID
+
'
.
dmp
'
)
;
removeFile
(
minidumpDirectory
dumpID
+
'
.
extra
'
)
;
}
}
)
;
}
removalPromise
.
then
(
(
)
=
>
{
Services
.
obs
.
removeObserver
(
observer
'
ipc
:
content
-
shutdown
'
)
;
dump
(
"
\
nCrash
cleaned
up
\
n
"
)
;
TestUtils
.
executeSoon
(
(
)
=
>
resolve
(
)
)
;
}
)
;
}
;
Services
.
obs
.
addObserver
(
observer
'
ipc
:
content
-
shutdown
'
)
;
}
)
;
expectedPromises
.
push
(
crashCleanupPromise
)
;
if
(
shouldShowTabCrashPage
)
{
expectedPromises
.
push
(
new
Promise
(
(
resolve
reject
)
=
>
{
browser
.
addEventListener
(
"
AboutTabCrashedReady
"
function
onCrash
(
)
{
browser
.
removeEventListener
(
"
AboutTabCrashedReady
"
onCrash
)
;
dump
(
"
\
nabout
:
tabcrashed
loaded
and
ready
\
n
"
)
;
resolve
(
)
;
}
false
true
)
;
}
)
)
;
}
let
mm
=
browser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frame_script
.
toString
(
)
+
"
)
(
)
;
"
false
)
;
await
Promise
.
all
(
expectedPromises
)
;
if
(
shouldShowTabCrashPage
)
{
let
gBrowser
=
browser
.
ownerGlobal
.
gBrowser
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
.
getAttribute
(
"
crashed
"
)
!
=
"
true
"
)
{
throw
new
Error
(
"
Tab
should
be
marked
as
crashed
"
)
;
}
}
return
extra
;
}
waitForAttribute
(
attr
element
value
)
{
let
MutationObserver
=
element
.
ownerGlobal
.
MutationObserver
;
return
new
Promise
(
resolve
=
>
{
let
mut
=
new
MutationObserver
(
mutations
=
>
{
if
(
(
!
value
&
&
element
.
getAttribute
(
attr
)
)
|
|
(
value
&
&
element
.
getAttribute
(
attr
)
=
=
=
value
)
)
{
resolve
(
)
;
mut
.
disconnect
(
)
;
return
;
}
}
)
;
mut
.
observe
(
element
{
attributeFilter
:
[
attr
]
}
)
;
}
)
;
}
sendChar
(
char
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
seq
=
+
+
gSendCharCount
;
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SendCharDone
"
function
charMsg
(
message
)
{
if
(
message
.
data
.
seq
!
=
seq
)
return
;
mm
.
removeMessageListener
(
"
Test
:
SendCharDone
"
charMsg
)
;
resolve
(
message
.
data
.
result
)
;
}
)
;
mm
.
sendAsyncMessage
(
"
Test
:
SendChar
"
{
char
:
char
seq
:
seq
}
)
;
}
)
;
}
synthesizeKey
(
key
event
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
seq
=
+
+
gSynthesizeKeyCount
;
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SynthesizeKeyDone
"
function
keyMsg
(
message
)
{
if
(
message
.
data
.
seq
!
=
seq
)
return
;
mm
.
removeMessageListener
(
"
Test
:
SynthesizeKeyDone
"
keyMsg
)
;
resolve
(
)
;
}
)
;
mm
.
sendAsyncMessage
(
"
Test
:
SynthesizeKey
"
{
key
event
seq
}
)
;
}
)
;
}
synthesizeComposition
(
event
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
seq
=
+
+
gSynthesizeCompositionCount
;
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SynthesizeCompositionDone
"
function
compMsg
(
message
)
{
if
(
message
.
data
.
seq
!
=
seq
)
return
;
mm
.
removeMessageListener
(
"
Test
:
SynthesizeCompositionDone
"
compMsg
)
;
resolve
(
message
.
data
.
result
)
;
}
)
;
mm
.
sendAsyncMessage
(
"
Test
:
SynthesizeComposition
"
{
event
seq
}
)
;
}
)
;
}
synthesizeCompositionChange
(
event
browser
)
{
return
new
Promise
(
resolve
=
>
{
let
seq
=
+
+
gSynthesizeCompositionChangeCount
;
let
mm
=
browser
.
messageManager
;
mm
.
addMessageListener
(
"
Test
:
SynthesizeCompositionChangeDone
"
function
compMsg
(
message
)
{
if
(
message
.
data
.
seq
!
=
seq
)
return
;
mm
.
removeMessageListener
(
"
Test
:
SynthesizeCompositionChangeDone
"
compMsg
)
;
resolve
(
)
;
}
)
;
mm
.
sendAsyncMessage
(
"
Test
:
SynthesizeCompositionChange
"
{
event
seq
}
)
;
}
)
;
}
waitForCondition
:
TestUtils
.
waitForCondition
waitForNotificationBar
(
tabbrowser
browser
notificationValue
)
{
let
notificationBox
=
tabbrowser
.
getNotificationBox
(
browser
)
;
return
this
.
waitForNotificationInNotificationBox
(
notificationBox
notificationValue
)
;
}
waitForGlobalNotificationBar
(
win
notificationValue
)
{
let
notificationBox
=
win
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
return
this
.
waitForNotificationInNotificationBox
(
notificationBox
notificationValue
)
;
}
waitForNotificationInNotificationBox
(
notificationBox
notificationValue
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
check
=
(
event
)
=
>
{
return
event
.
target
.
value
=
=
notificationValue
;
}
;
BrowserTestUtils
.
waitForEvent
(
notificationBox
"
AlertActive
"
false
check
)
.
then
(
(
event
)
=
>
{
resolve
(
event
.
originalTarget
)
;
}
)
;
}
)
;
}
contentPainted
(
browser
)
{
return
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
addEventListener
(
"
MozAfterPaint
"
function
onPaint
(
)
{
removeEventListener
(
"
MozAfterPaint
"
onPaint
)
;
resolve
(
)
;
}
)
}
)
;
}
)
;
}
_knownAboutPages
:
new
Set
(
)
_loadedAboutContentScript
:
false
registerAboutPage
(
registerCleanupFunction
aboutModule
pageURI
flags
)
{
const
kRegistrationMsgId
=
"
browser
-
test
-
utils
:
about
-
registration
:
registered
"
;
let
rv
=
this
.
waitForMessage
(
Services
.
ppmm
kRegistrationMsgId
msg
=
>
{
return
msg
.
data
=
=
aboutModule
;
}
)
;
if
(
!
this
.
_loadedAboutContentScript
)
{
Services
.
ppmm
.
loadProcessScript
(
kAboutPageRegistrationContentScript
true
)
;
this
.
_loadedAboutContentScript
=
true
;
registerCleanupFunction
(
this
.
_removeAboutPageRegistrations
.
bind
(
this
)
)
;
}
Services
.
ppmm
.
broadcastAsyncMessage
(
"
browser
-
test
-
utils
:
about
-
registration
:
register
"
{
aboutModule
pageURI
flags
}
)
;
return
rv
.
then
(
(
)
=
>
{
this
.
_knownAboutPages
.
add
(
aboutModule
)
;
}
)
;
}
unregisterAboutPage
(
aboutModule
)
{
if
(
!
this
.
_knownAboutPages
.
has
(
aboutModule
)
)
{
return
Promise
.
reject
(
new
Error
(
"
We
don
'
t
think
this
about
page
exists
!
"
)
)
;
}
const
kUnregistrationMsgId
=
"
browser
-
test
-
utils
:
about
-
registration
:
unregistered
"
;
let
rv
=
this
.
waitForMessage
(
Services
.
ppmm
kUnregistrationMsgId
msg
=
>
{
return
msg
.
data
=
=
aboutModule
;
}
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
browser
-
test
-
utils
:
about
-
registration
:
unregister
"
aboutModule
)
;
return
rv
.
then
(
(
)
=
>
this
.
_knownAboutPages
.
delete
(
aboutModule
)
)
;
}
async
_removeAboutPageRegistrations
(
)
{
for
(
let
aboutModule
of
this
.
_knownAboutPages
)
{
await
this
.
unregisterAboutPage
(
aboutModule
)
;
}
Services
.
ppmm
.
removeDelayedProcessScript
(
kAboutPageRegistrationContentScript
)
;
}
async
promiseAlertDialogOpen
(
buttonAction
uri
=
"
chrome
:
/
/
global
/
content
/
commonDialog
.
xul
"
func
)
{
let
win
=
await
this
.
domWindowOpened
(
null
async
win
=
>
{
await
this
.
waitForEvent
(
win
"
load
"
)
;
return
win
.
document
.
documentURI
=
=
=
uri
;
}
)
;
if
(
func
)
{
await
func
(
win
)
;
return
win
;
}
let
doc
=
win
.
document
.
documentElement
;
doc
.
getButton
(
buttonAction
)
.
click
(
)
;
return
win
;
}
async
promiseAlertDialog
(
buttonAction
uri
=
"
chrome
:
/
/
global
/
content
/
commonDialog
.
xul
"
func
)
{
let
win
=
await
this
.
promiseAlertDialogOpen
(
buttonAction
uri
func
)
;
return
this
.
windowClosed
(
win
)
;
}
addTab
(
tabbrowser
uri
params
=
{
}
beforeLoadFunc
=
null
)
{
if
(
!
params
.
triggeringPrincipal
)
{
params
.
triggeringPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
}
if
(
beforeLoadFunc
)
{
let
window
=
tabbrowser
.
ownerGlobal
;
window
.
addEventListener
(
"
TabOpen
"
function
(
e
)
{
beforeLoadFunc
(
e
.
target
)
;
}
{
once
:
true
}
)
;
}
return
tabbrowser
.
addTab
(
uri
params
)
;
}
}
;
