"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContentTaskUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
var
ContentTaskUtils
=
{
is_hidden
(
element
)
{
let
style
=
element
.
ownerDocument
.
defaultView
.
getComputedStyle
(
element
)
;
if
(
style
.
display
=
=
"
none
"
)
{
return
true
;
}
if
(
style
.
visibility
!
=
"
visible
"
)
{
return
true
;
}
if
(
element
.
parentNode
!
=
element
.
ownerDocument
&
&
element
.
parentNode
.
nodeType
!
=
Node
.
DOCUMENT_FRAGMENT_NODE
)
{
return
ContentTaskUtils
.
is_hidden
(
element
.
parentNode
)
;
}
if
(
element
.
parentNode
.
host
)
{
return
ContentTaskUtils
.
is_hidden
(
element
.
parentNode
.
host
)
;
}
return
false
;
}
is_visible
(
element
)
{
return
!
this
.
is_hidden
(
element
)
;
}
async
waitForCondition
(
condition
msg
interval
=
100
maxTries
=
50
)
{
for
(
let
tries
=
0
;
tries
<
maxTries
;
+
+
tries
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
interval
)
)
;
let
conditionPassed
=
false
;
try
{
conditionPassed
=
await
condition
(
)
;
}
catch
(
e
)
{
msg
+
=
-
threw
exception
:
{
e
}
;
throw
msg
;
}
if
(
conditionPassed
)
{
return
conditionPassed
;
}
}
msg
+
=
-
timed
out
after
{
maxTries
}
tries
.
;
throw
msg
;
}
waitForEvent
(
subject
eventName
capture
checkFn
wantsUntrusted
=
false
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
subject
.
addEventListener
(
eventName
function
listener
(
event
)
{
try
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
subject
.
removeEventListener
(
eventName
listener
capture
)
;
setTimeout
(
(
)
=
>
resolve
(
event
)
0
)
;
}
catch
(
ex
)
{
try
{
subject
.
removeEventListener
(
eventName
listener
capture
)
;
}
catch
(
ex2
)
{
}
setTimeout
(
(
)
=
>
reject
(
ex
)
0
)
;
}
}
capture
wantsUntrusted
)
;
}
)
;
}
getEventUtils
(
content
)
{
if
(
content
.
_EventUtils
)
{
return
content
.
_EventUtils
;
}
let
EventUtils
=
(
content
.
_EventUtils
=
{
}
)
;
EventUtils
.
window
=
{
}
;
EventUtils
.
parent
=
EventUtils
.
window
;
EventUtils
.
_EU_Ci
=
Ci
;
EventUtils
.
_EU_Cc
=
Cc
;
EventUtils
.
navigator
=
content
.
navigator
;
EventUtils
.
KeyboardEvent
=
content
.
KeyboardEvent
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
return
EventUtils
;
}
}
;
