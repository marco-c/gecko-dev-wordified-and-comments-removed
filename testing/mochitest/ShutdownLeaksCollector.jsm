const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
ContentCollector
"
]
;
var
ContentCollector
=
{
init
(
)
{
let
processType
=
Services
.
appinfo
.
processType
;
if
(
processType
=
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
)
{
return
;
}
Services
.
cpmm
.
addMessageListener
(
"
browser
-
test
:
collect
-
request
"
this
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
browser
-
test
:
collect
-
request
"
:
Services
.
obs
.
notifyObservers
(
null
"
memory
-
pressure
"
"
heap
-
minimize
"
)
;
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
let
shutdownCleanup
=
aCallback
=
>
{
Cu
.
schedulePreciseShrinkingGC
(
(
)
=
>
{
Cu
.
forceGC
(
)
;
Cu
.
forceCC
(
)
;
aCallback
(
)
;
}
)
;
}
;
shutdownCleanup
(
(
)
=
>
{
setTimeout
(
(
)
=
>
{
shutdownCleanup
(
(
)
=
>
{
this
.
finish
(
)
;
}
)
;
}
1000
)
;
}
)
;
break
;
}
}
finish
(
)
{
let
pid
=
Services
.
appinfo
.
processID
;
dump
(
"
Completed
ShutdownLeaks
collections
in
process
"
+
pid
+
"
\
n
"
)
;
Services
.
cpmm
.
removeMessageListener
(
"
browser
-
test
:
collect
-
request
"
this
)
;
}
}
;
ContentCollector
.
init
(
)
;
