from
mozunit
import
main
from
wpt_path_utils
import
(
    
parse_wpt_path
    
resolve_wpt_path
)
def
test_resolve_wpt_path
(
)
:
    
"
"
"
Test
resolve_wpt_path
function
"
"
"
    
assert
(
        
resolve_wpt_path
(
"
/
css
/
test
.
html
"
)
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
    
)
    
assert
(
        
resolve_wpt_path
(
"
/
_mozilla
/
test
.
html
"
)
        
=
=
"
testing
/
web
-
platform
/
mozilla
/
tests
/
test
.
html
"
    
)
    
assert
(
        
resolve_wpt_path
(
"
/
infrastructure
/
test
.
html
"
)
        
=
=
"
testing
/
web
-
platform
/
tests
/
infrastructure
/
test
.
html
"
    
)
    
assert
(
        
resolve_wpt_path
(
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
)
        
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
    
)
def
test_parse_wpt_path
(
)
:
    
"
"
"
Test
parse_wpt_path
function
"
"
"
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
html
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
html
.
ini
"
    
assert
query
is
None
    
assert
anyjs
is
None
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
html
?
param
=
value
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
html
.
ini
"
    
assert
query
=
=
"
?
param
=
value
"
    
assert
anyjs
is
None
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
any
.
html
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
any
.
js
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
any
.
js
.
ini
"
    
assert
query
is
None
    
assert
anyjs
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
any
.
html
"
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
window
.
html
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
window
.
js
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
window
.
js
.
ini
"
    
assert
query
is
None
    
assert
anyjs
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
window
.
html
"
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
worker
.
html
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
worker
.
js
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
worker
.
js
.
ini
"
    
assert
query
is
None
    
assert
anyjs
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
worker
.
html
"
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
any
.
html
?
param
=
value
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
any
.
js
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
any
.
js
.
ini
"
    
assert
query
=
=
"
?
param
=
value
"
    
assert
anyjs
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
any
.
html
"
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
infrastructure
/
test
.
html
"
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
infrastructure
/
test
.
html
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
infrastructure
/
test
.
html
.
ini
"
def
test_parse_wpt_path_with_isdir
(
)
:
    
"
"
"
Test
parse_wpt_path
with
directory
checking
function
"
"
"
    
def
mock_isdir
(
path
)
:
        
return
not
path
.
endswith
(
(
"
.
html
"
"
.
js
"
)
)
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
"
mock_isdir
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
"
    
assert
query
is
None
    
assert
anyjs
is
None
    
path
manifest
query
anyjs
=
parse_wpt_path
(
"
/
css
/
test
.
html
"
mock_isdir
)
    
assert
path
=
=
"
testing
/
web
-
platform
/
tests
/
css
/
test
.
html
"
    
assert
manifest
=
=
"
testing
/
web
-
platform
/
meta
/
css
/
test
.
html
.
ini
"
    
assert
query
is
None
    
assert
anyjs
is
None
if
__name__
=
=
"
__main__
"
:
    
main
(
)
