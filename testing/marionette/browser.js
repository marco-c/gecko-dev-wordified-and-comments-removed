"
use
strict
"
;
const
{
WebElementEventTarget
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
dom
.
js
"
{
}
)
;
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
element
.
js
"
)
;
const
{
NoSuchWindowError
UnsupportedOperationError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
const
{
MessageManagerDestroyedPromise
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
browser
"
"
Context
"
"
WindowState
"
]
;
this
.
browser
=
{
}
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
class
Context
{
static
fromString
(
s
)
{
switch
(
s
)
{
case
"
chrome
"
:
return
Context
.
Chrome
;
case
"
content
"
:
return
Context
.
Content
;
default
:
throw
new
TypeError
(
Unknown
context
:
{
s
}
)
;
}
}
}
Context
.
Chrome
=
"
chrome
"
;
Context
.
Content
=
"
content
"
;
this
.
Context
=
Context
;
browser
.
getBrowserForTab
=
function
(
tab
)
{
if
(
"
browser
"
in
tab
)
{
return
tab
.
browser
;
}
else
if
(
"
linkedBrowser
"
in
tab
)
{
return
tab
.
linkedBrowser
;
}
return
null
;
}
;
browser
.
getTabBrowser
=
function
(
window
)
{
if
(
"
BrowserApp
"
in
window
)
{
return
window
.
BrowserApp
;
}
else
if
(
"
gBrowser
"
in
window
)
{
return
window
.
gBrowser
;
}
return
null
;
}
;
browser
.
Context
=
class
{
constructor
(
window
driver
)
{
this
.
window
=
window
;
this
.
driver
=
driver
;
this
.
tabBrowser
=
browser
.
getTabBrowser
(
this
.
window
)
;
this
.
knownFrames
=
[
]
;
this
.
newSession
=
true
;
this
.
seenEls
=
new
element
.
Store
(
)
;
this
.
tab
=
null
;
this
.
pendingCommands
=
[
]
;
this
.
_needsFlushPendingCommands
=
false
;
this
.
frameRegsPending
=
0
;
this
.
getIdForBrowser
=
driver
.
getIdForBrowser
.
bind
(
driver
)
;
this
.
updateIdForBrowser
=
driver
.
updateIdForBrowser
.
bind
(
driver
)
;
}
get
contentBrowser
(
)
{
if
(
this
.
tab
)
{
return
browser
.
getBrowserForTab
(
this
.
tab
)
;
}
else
if
(
this
.
tabBrowser
&
&
this
.
driver
.
isReftestBrowser
(
this
.
tabBrowser
)
)
{
return
this
.
tabBrowser
;
}
return
null
;
}
get
messageManager
(
)
{
if
(
this
.
contentBrowser
)
{
return
this
.
contentBrowser
.
messageManager
;
}
return
null
;
}
get
closed
(
)
{
return
this
.
contentBrowser
=
=
=
null
;
}
get
curFrameId
(
)
{
let
rv
=
null
;
if
(
this
.
tab
|
|
this
.
driver
.
isReftestBrowser
(
this
.
contentBrowser
)
)
{
rv
=
this
.
getIdForBrowser
(
this
.
contentBrowser
)
;
}
return
rv
;
}
get
currentTitle
(
)
{
if
(
this
.
contentBrowser
)
{
return
this
.
contentBrowser
.
contentTitle
;
}
throw
new
NoSuchWindowError
(
"
Current
window
does
not
have
a
content
browser
"
)
;
}
get
currentURI
(
)
{
if
(
this
.
contentBrowser
)
{
return
this
.
contentBrowser
.
currentURI
;
}
throw
new
NoSuchWindowError
(
"
Current
window
does
not
have
a
content
browser
"
)
;
}
get
rect
(
)
{
return
{
height
:
this
.
window
.
outerHeight
width
:
this
.
window
.
outerWidth
x
:
this
.
window
.
screenX
y
:
this
.
window
.
screenY
state
:
WindowState
.
from
(
this
.
window
.
windowState
)
}
;
}
getTabModalUI
(
)
{
let
br
=
this
.
contentBrowser
;
if
(
!
br
.
hasAttribute
(
"
tabmodalPromptShowing
"
)
)
{
return
null
;
}
let
modals
=
br
.
parentNode
.
getElementsByTagNameNS
(
XUL_NS
"
tabmodalprompt
"
)
;
return
modals
[
0
]
.
ui
;
}
closeWindow
(
)
{
return
new
Promise
(
resolve
=
>
{
let
destroyed
=
new
MessageManagerDestroyedPromise
(
this
.
window
.
messageManager
)
;
this
.
window
.
addEventListener
(
"
unload
"
async
(
)
=
>
{
await
destroyed
;
resolve
(
)
;
}
{
once
:
true
}
)
;
this
.
window
.
close
(
)
;
}
)
;
}
closeTab
(
)
{
if
(
!
this
.
tabBrowser
|
|
!
this
.
tabBrowser
.
tabs
|
|
this
.
tabBrowser
.
tabs
.
length
=
=
=
1
|
|
!
this
.
tab
)
{
return
this
.
closeWindow
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
browserDetached
=
async
(
)
=
>
{
await
new
MessageManagerDestroyedPromise
(
this
.
messageManager
)
;
resolve
(
)
;
}
;
if
(
this
.
tabBrowser
.
closeTab
)
{
this
.
tabBrowser
.
deck
.
addEventListener
(
"
TabClose
"
browserDetached
{
once
:
true
}
)
;
this
.
tabBrowser
.
closeTab
(
this
.
tab
)
;
}
else
if
(
this
.
tabBrowser
.
removeTab
)
{
this
.
tab
.
addEventListener
(
"
TabClose
"
browserDetached
{
once
:
true
}
)
;
this
.
tabBrowser
.
removeTab
(
this
.
tab
)
;
}
else
{
reject
(
new
UnsupportedOperationError
(
closeTab
(
)
not
supported
in
{
this
.
driver
.
appName
}
)
)
;
}
}
)
;
}
addTab
(
uri
)
{
return
this
.
tabBrowser
.
addTab
(
uri
true
)
;
}
switchToTab
(
index
window
=
undefined
focus
=
true
)
{
if
(
window
)
{
this
.
window
=
window
;
this
.
tabBrowser
=
browser
.
getTabBrowser
(
this
.
window
)
;
}
if
(
!
this
.
tabBrowser
)
{
return
;
}
if
(
typeof
index
=
=
"
undefined
"
)
{
this
.
tab
=
this
.
tabBrowser
.
selectedTab
;
}
else
{
this
.
tab
=
this
.
tabBrowser
.
tabs
[
index
]
;
if
(
focus
)
{
if
(
this
.
tabBrowser
.
selectTab
)
{
this
.
tabBrowser
.
selectTab
(
this
.
tab
)
;
}
else
if
(
"
selectedTab
"
in
this
.
tabBrowser
)
{
this
.
tabBrowser
.
selectedTab
=
this
.
tab
;
}
else
{
throw
new
UnsupportedOperationError
(
"
switchToTab
(
)
not
supported
"
)
;
}
}
}
this
.
eventObserver
=
new
WebElementEventTarget
(
this
.
messageManager
)
;
}
register
(
uid
target
)
{
if
(
this
.
tabBrowser
)
{
if
(
!
this
.
tab
)
{
this
.
switchToTab
(
)
;
}
if
(
target
=
=
=
this
.
contentBrowser
)
{
this
.
updateIdForBrowser
(
this
.
contentBrowser
uid
)
;
this
.
_needsFlushPendingCommands
=
true
;
}
}
this
.
knownFrames
.
push
(
uid
)
;
}
flushPendingCommands
(
)
{
if
(
!
this
.
_needsFlushPendingCommands
)
{
return
;
}
this
.
pendingCommands
.
forEach
(
cb
=
>
cb
(
)
)
;
this
.
pendingCommands
=
[
]
;
this
.
_needsFlushPendingCommands
=
false
;
}
executeWhenReady
(
cb
)
{
if
(
this
.
_needsFlushPendingCommands
)
{
this
.
pendingCommands
.
push
(
cb
)
;
}
else
{
cb
(
)
;
}
}
}
;
browser
.
Windows
=
class
extends
Map
{
set
(
id
win
)
{
let
wref
=
Cu
.
getWeakReference
(
win
)
;
super
.
set
(
id
wref
)
;
return
this
;
}
get
(
id
)
{
let
wref
=
super
.
get
(
id
)
;
if
(
!
wref
)
{
throw
new
RangeError
(
)
;
}
return
wref
.
get
(
)
;
}
}
;
const
WindowState
=
{
Maximized
:
"
maximized
"
Minimized
:
"
minimized
"
Normal
:
"
normal
"
Fullscreen
:
"
fullscreen
"
from
(
windowState
)
{
switch
(
windowState
)
{
case
1
:
return
WindowState
.
Maximized
;
case
2
:
return
WindowState
.
Minimized
;
case
3
:
return
WindowState
.
Normal
;
case
4
:
return
WindowState
.
Fullscreen
;
default
:
throw
new
TypeError
(
Unknown
window
state
:
{
windowState
}
)
;
}
}
}
;
this
.
WindowState
=
WindowState
;
