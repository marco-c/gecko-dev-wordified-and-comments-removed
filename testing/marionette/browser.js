"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
element
.
js
"
)
;
const
{
NoSuchWindowError
UnsupportedOperationError
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
frame
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
browser
"
]
;
this
.
browser
=
{
}
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
browser
.
getBrowserForTab
=
function
(
tab
)
{
if
(
"
browser
"
in
tab
)
{
return
tab
.
browser
;
}
else
if
(
"
linkedBrowser
"
in
tab
)
{
return
tab
.
linkedBrowser
;
}
else
{
return
null
;
}
}
;
browser
.
getTabBrowser
=
function
(
win
)
{
if
(
"
BrowserApp
"
in
win
)
{
return
win
.
BrowserApp
;
}
else
if
(
"
gBrowser
"
in
win
)
{
return
win
.
gBrowser
;
}
else
{
return
null
;
}
}
;
browser
.
Context
=
class
{
constructor
(
win
driver
)
{
this
.
window
=
win
;
this
.
driver
=
driver
;
this
.
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
this
.
knownFrames
=
[
]
;
this
.
newSession
=
true
;
this
.
seenEls
=
new
element
.
Store
(
)
;
this
.
tab
=
null
;
this
.
pendingCommands
=
[
]
;
this
.
frameManager
=
new
frame
.
Manager
(
driver
)
;
this
.
frameRegsPending
=
0
;
this
.
frameManager
.
addMessageManagerListeners
(
driver
.
mm
)
;
this
.
getIdForBrowser
=
driver
.
getIdForBrowser
.
bind
(
driver
)
;
this
.
updateIdForBrowser
=
driver
.
updateIdForBrowser
.
bind
(
driver
)
;
this
.
_browserWasRemote
=
null
;
this
.
_hasRemotenessChange
=
false
;
}
get
contentBrowser
(
)
{
if
(
this
.
tab
)
{
return
browser
.
getBrowserForTab
(
this
.
tab
)
;
}
else
if
(
this
.
tabBrowser
&
&
this
.
driver
.
isReftestBrowser
(
this
.
tabBrowser
)
)
{
return
this
.
tabBrowser
;
}
return
null
;
}
get
curFrameId
(
)
{
let
rv
=
null
;
if
(
this
.
tab
|
|
this
.
driver
.
isReftestBrowser
(
this
.
contentBrowser
)
)
{
rv
=
this
.
getIdForBrowser
(
this
.
contentBrowser
)
;
}
return
rv
;
}
get
currentURI
(
)
{
if
(
this
.
contentBrowser
)
{
return
this
.
contentBrowser
.
currentURI
;
}
else
{
throw
new
NoSuchWindowError
(
"
Current
window
does
not
have
a
content
browser
"
)
;
}
}
get
rect
(
)
{
return
{
x
:
this
.
window
.
screenX
y
:
this
.
window
.
screenY
width
:
this
.
window
.
outerWidth
height
:
this
.
window
.
outerHeight
}
;
}
getTabModalUI
(
)
{
let
br
=
this
.
contentBrowser
;
if
(
!
br
.
hasAttribute
(
"
tabmodalPromptShowing
"
)
)
{
return
null
;
}
let
modals
=
br
.
parentNode
.
getElementsByTagNameNS
(
XUL_NS
"
tabmodalprompt
"
)
;
return
modals
[
0
]
.
ui
;
}
closeWindow
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
window
.
addEventListener
(
"
unload
"
ev
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
this
.
window
.
close
(
)
;
}
)
;
}
startSession
(
newSession
win
callback
)
{
callback
(
win
newSession
)
;
}
closeTab
(
)
{
if
(
!
this
.
tabBrowser
|
|
!
this
.
tabBrowser
.
tabs
|
|
this
.
tabBrowser
.
tabs
.
length
=
=
=
1
|
|
!
this
.
tab
)
{
return
this
.
closeWindow
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
if
(
this
.
tabBrowser
.
closeTab
)
{
this
.
tabBrowser
.
deck
.
addEventListener
(
"
TabClose
"
ev
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
this
.
tabBrowser
.
closeTab
(
this
.
tab
)
;
}
else
if
(
this
.
tabBrowser
.
removeTab
)
{
this
.
tab
.
addEventListener
(
"
TabClose
"
ev
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
this
.
tabBrowser
.
removeTab
(
this
.
tab
)
;
}
else
{
reject
(
new
UnsupportedOperationError
(
closeTab
(
)
not
supported
in
{
this
.
driver
.
appName
}
)
)
;
}
}
)
;
}
addTab
(
uri
)
{
return
this
.
tabBrowser
.
addTab
(
uri
true
)
;
}
switchToTab
(
index
win
focus
=
true
)
{
if
(
win
)
{
this
.
window
=
win
;
this
.
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
}
if
(
!
this
.
tabBrowser
)
{
return
;
}
if
(
typeof
index
=
=
"
undefined
"
)
{
this
.
tab
=
this
.
tabBrowser
.
selectedTab
;
}
else
{
this
.
tab
=
this
.
tabBrowser
.
tabs
[
index
]
;
if
(
focus
)
{
if
(
this
.
tabBrowser
.
selectTab
)
{
this
.
tabBrowser
.
selectTab
(
this
.
tab
)
;
}
else
if
(
"
selectedTab
"
in
this
.
tabBrowser
)
{
this
.
tabBrowser
.
selectedTab
=
this
.
tab
;
}
else
{
throw
new
UnsupportedOperationError
(
"
switchToTab
(
)
not
supported
"
)
;
}
}
}
if
(
this
.
driver
.
appName
=
=
"
Firefox
"
)
{
this
.
_browserWasRemote
=
this
.
contentBrowser
.
isRemoteBrowser
;
this
.
_hasRemotenessChange
=
false
;
}
}
register
(
uid
target
)
{
let
remotenessChange
=
this
.
hasRemotenessChange
(
)
;
if
(
this
.
curFrameId
=
=
=
null
|
|
remotenessChange
)
{
if
(
this
.
tabBrowser
)
{
if
(
!
this
.
tab
)
{
this
.
switchToTab
(
)
;
}
if
(
target
=
=
=
this
.
contentBrowser
)
{
this
.
updateIdForBrowser
(
this
.
contentBrowser
uid
)
;
}
}
}
this
.
knownFrames
.
push
(
uid
)
;
return
remotenessChange
;
}
hasRemotenessChange
(
)
{
if
(
this
.
driver
.
appName
!
=
"
Firefox
"
|
|
this
.
tab
=
=
=
null
|
|
this
.
contentBrowser
=
=
=
null
)
{
return
false
;
}
if
(
this
.
_hasRemotenessChange
)
{
return
true
;
}
let
currentIsRemote
=
this
.
contentBrowser
.
isRemoteBrowser
;
this
.
_hasRemotenessChange
=
this
.
_browserWasRemote
!
=
=
currentIsRemote
;
this
.
_browserWasRemote
=
currentIsRemote
;
return
this
.
_hasRemotenessChange
;
}
flushPendingCommands
(
)
{
if
(
!
this
.
_hasRemotenessChange
)
{
return
;
}
this
.
_hasRemotenessChange
=
false
;
this
.
pendingCommands
.
forEach
(
cb
=
>
cb
(
)
)
;
this
.
pendingCommands
=
[
]
;
}
executeWhenReady
(
cb
)
{
if
(
this
.
hasRemotenessChange
(
)
)
{
this
.
pendingCommands
.
push
(
cb
)
;
}
else
{
cb
(
)
;
}
}
}
;
browser
.
Windows
=
class
extends
Map
{
set
(
id
win
)
{
let
wref
=
Cu
.
getWeakReference
(
win
)
;
super
.
set
(
id
wref
)
;
return
this
;
}
get
(
id
)
{
let
wref
=
super
.
get
(
id
)
;
if
(
!
wref
)
{
throw
new
RangeError
(
)
;
}
return
wref
.
get
(
)
;
}
}
;
