"
use
strict
"
;
var
{
Constructor
:
CC
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
var
loader
=
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
;
const
ServerSocket
=
CC
(
"
mozilla
.
org
/
network
/
server
-
socket
;
1
"
"
nsIServerSocket
"
"
initSpecialConnection
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
dispatcher
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
driver
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
element
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
simpletest
.
js
"
)
;
loader
.
loadSubScript
(
"
resource
:
/
/
devtools
/
shared
/
transport
/
transport
.
js
"
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
server
"
]
;
this
.
server
=
{
}
;
const
CONTENT_LISTENER_PREF
=
"
marionette
.
contentListener
"
;
const
RECOMMENDED_PREFS
=
new
Map
(
[
[
"
app
.
update
.
auto
"
false
]
[
"
app
.
update
.
enabled
"
false
]
[
"
apz
.
content_response_timeout
"
60000
]
[
"
browser
.
download
.
panel
.
shown
"
true
]
[
"
browser
.
EULA
.
override
"
true
]
[
"
browser
.
newtabpage
.
enabled
"
false
]
[
"
browser
.
newtabpage
.
introShown
"
true
]
[
"
browser
.
offline
"
false
]
[
"
browser
.
pagethumbnails
.
capturing_disabled
"
true
]
[
"
browser
.
reader
.
detectedFirstArticle
"
true
]
[
"
browser
.
safebrowsing
.
blockedURIs
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
downloads
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
forbiddenURIs
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
malware
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
phishing
.
enabled
"
false
]
[
"
browser
.
search
.
update
"
false
]
[
"
browser
.
sessionstore
.
resume_from_crash
"
false
]
[
"
browser
.
shell
.
checkDefaultBrowser
"
false
]
[
"
browser
.
startup
.
page
"
0
]
[
"
browser
.
tabs
.
animate
"
false
]
[
"
browser
.
tabs
.
disableBackgroundZombification
"
false
]
[
"
browser
.
tabs
.
warnOnCloseOtherTabs
"
false
]
[
"
browser
.
tabs
.
warnOnOpen
"
false
]
[
"
browser
.
usedOnWindows10
.
introURL
"
"
"
]
[
"
browser
.
uitour
.
enabled
"
false
]
[
"
datareporting
.
healthreport
.
about
.
reportUrl
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
abouthealthreport
/
"
]
[
"
datareporting
.
healthreport
.
documentServerURI
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
healthreport
/
"
]
[
"
datareporting
.
healthreport
.
logging
.
consoleEnabled
"
false
]
[
"
datareporting
.
healthreport
.
service
.
enabled
"
false
]
[
"
datareporting
.
healthreport
.
service
.
firstRun
"
false
]
[
"
datareporting
.
healthreport
.
uploadEnabled
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionEnabled
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionPolicyAccepted
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionPolicyBypassNotification
"
true
]
[
"
dom
.
disable_open_during_load
"
false
]
[
"
dom
.
ipc
.
reportProcessHangs
"
false
]
[
"
dom
.
max_chrome_script_run_time
"
0
]
[
"
dom
.
max_script_run_time
"
0
]
[
"
extensions
.
autoDisableScopes
"
0
]
[
"
extensions
.
enabledScopes
"
5
]
[
"
extensions
.
e10sBlocksEnabling
"
false
]
[
"
extensions
.
getAddons
.
cache
.
enabled
"
false
]
[
"
extensions
.
installDistroAddons
"
false
]
[
"
extensions
.
showMismatchUI
"
false
]
[
"
extensions
.
update
.
enabled
"
false
]
[
"
extensions
.
update
.
notifyUser
"
false
]
[
"
extensions
.
webservice
.
discoverURL
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
discoveryURL
"
]
[
"
focusmanager
.
testmode
"
true
]
[
"
general
.
useragent
.
updates
.
enabled
"
false
]
[
"
geo
.
provider
.
testing
"
true
]
[
"
geo
.
wifi
.
scan
"
false
]
[
"
hangmonitor
.
timeout
"
0
]
[
"
javascript
.
options
.
showInConsole
"
true
]
[
"
network
.
http
.
bypass
-
cachelock
-
threshold
"
200000
]
[
"
network
.
http
.
prompt
-
temp
-
redirect
"
false
]
[
"
network
.
http
.
speculative
-
parallel
-
limit
"
0
]
[
"
network
.
manage
-
offline
-
status
"
false
]
[
"
network
.
sntp
.
pools
"
"
%
(
server
)
s
"
]
[
"
security
.
fileuri
.
strict_origin_policy
"
false
]
[
"
security
.
notification_enable_delay
"
0
]
[
"
services
.
settings
.
server
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
blocklist
/
"
]
[
"
signon
.
autofillForms
"
false
]
[
"
signon
.
rememberSignons
"
false
]
[
"
startup
.
homepage_welcome_url
"
"
about
:
blank
"
]
[
"
startup
.
homepage_welcome_url
.
additional
"
"
"
]
[
"
toolkit
.
startup
.
max_resumed_crashes
"
-
1
]
]
)
;
server
.
TCPListener
=
class
{
constructor
(
port
forceLocal
)
{
this
.
port
=
port
;
this
.
forceLocal
=
forceLocal
;
this
.
conns
=
{
}
;
this
.
nextConnId
=
0
;
this
.
alive
=
false
;
this
.
_acceptConnections
=
false
;
this
.
alteredPrefs
=
new
Set
(
)
;
}
driverFactory
(
)
{
Preferences
.
set
(
CONTENT_LISTENER_PREF
false
)
;
return
new
GeckoDriver
(
Services
.
appinfo
.
name
this
)
;
}
set
acceptConnections
(
value
)
{
if
(
!
value
)
{
logger
.
info
(
"
New
connections
will
no
longer
be
accepted
"
)
;
}
else
{
logger
.
info
(
"
New
connections
are
accepted
again
"
)
;
}
this
.
_acceptConnections
=
value
;
}
start
(
)
{
if
(
this
.
alive
)
{
return
;
}
for
(
let
[
k
v
]
of
RECOMMENDED_PREFS
)
{
if
(
!
Preferences
.
isSet
(
k
)
)
{
logger
.
debug
(
Setting
recommended
pref
{
k
}
to
{
v
}
)
;
Preferences
.
set
(
k
v
)
;
this
.
alteredPrefs
.
add
(
k
)
;
}
}
let
flags
=
Ci
.
nsIServerSocket
.
KeepWhenOffline
;
if
(
this
.
forceLocal
)
{
flags
|
=
Ci
.
nsIServerSocket
.
LoopbackOnly
;
}
this
.
listener
=
new
ServerSocket
(
this
.
port
flags
1
)
;
this
.
listener
.
asyncListen
(
this
)
;
this
.
alive
=
true
;
this
.
_acceptConnections
=
true
;
}
stop
(
)
{
if
(
!
this
.
alive
)
{
return
;
}
for
(
let
k
of
this
.
alteredPrefs
)
{
logger
.
debug
(
Resetting
recommended
pref
{
k
}
)
;
Preferences
.
reset
(
k
)
;
}
this
.
closeListener
(
)
;
this
.
alteredPrefs
.
clear
(
)
;
this
.
alive
=
false
;
this
.
_acceptConnections
=
false
;
}
closeListener
(
)
{
this
.
listener
.
close
(
)
;
this
.
listener
=
null
;
}
onSocketAccepted
(
serverSocket
clientSocket
)
{
if
(
!
this
.
_acceptConnections
)
{
logger
.
warn
(
"
New
connections
are
currently
not
accepted
"
)
;
return
;
}
let
input
=
clientSocket
.
openInputStream
(
0
0
0
)
;
let
output
=
clientSocket
.
openOutputStream
(
0
0
0
)
;
let
transport
=
new
DebuggerTransport
(
input
output
)
;
let
connId
=
"
conn
"
+
this
.
nextConnId
+
+
;
let
dispatcher
=
new
Dispatcher
(
connId
transport
this
.
driverFactory
.
bind
(
this
)
)
;
dispatcher
.
onclose
=
this
.
onConnectionClosed
.
bind
(
this
)
;
this
.
conns
[
connId
]
=
dispatcher
;
logger
.
debug
(
Accepted
connection
{
connId
}
from
{
clientSocket
.
host
}
:
{
clientSocket
.
port
}
)
;
dispatcher
.
sayHello
(
)
;
transport
.
ready
(
)
;
}
onConnectionClosed
(
conn
)
{
let
id
=
conn
.
connId
;
delete
this
.
conns
[
id
]
;
logger
.
debug
(
Closed
connection
{
id
}
)
;
}
}
;
