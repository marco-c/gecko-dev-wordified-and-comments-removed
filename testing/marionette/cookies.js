"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Cookies
"
]
;
const
IPV4_PORT_EXPR
=
/
:
\
d
+
/
;
this
.
Cookies
=
class
{
constructor
(
documentFn
chromeProxy
)
{
this
.
documentFn_
=
documentFn
;
this
.
chrome
=
chromeProxy
;
}
get
document
(
)
{
return
this
.
documentFn_
(
)
;
}
[
Symbol
.
iterator
]
(
)
{
let
path
=
this
.
document
.
location
.
pathname
|
|
"
/
"
;
let
cs
=
this
.
chrome
.
getVisibleCookies
(
path
this
.
document
.
location
.
hostname
)
[
0
]
;
return
cs
[
Symbol
.
iterator
]
(
)
;
}
add
(
name
value
opts
=
{
}
)
{
if
(
typeof
this
.
document
=
=
"
undefined
"
|
|
!
this
.
document
.
contentType
.
match
(
/
html
/
i
)
)
{
throw
new
UnableToSetCookieError
(
"
You
may
only
set
cookies
on
HTML
documents
:
"
+
this
.
document
.
contentType
)
;
}
if
(
!
opts
.
expiry
)
{
let
date
=
new
Date
(
)
;
let
now
=
new
Date
(
Date
.
now
(
)
)
;
date
.
setYear
(
now
.
getFullYear
(
)
+
20
)
;
opts
.
expiry
=
date
.
getTime
(
)
/
1000
;
}
if
(
!
opts
.
domain
)
{
opts
.
domain
=
this
.
document
.
location
.
host
;
}
else
if
(
this
.
document
.
location
.
host
.
indexOf
(
opts
.
domain
)
<
0
)
{
throw
new
InvalidCookieDomainError
(
"
You
may
only
set
cookies
for
the
current
domain
"
)
;
}
opts
.
domain
=
opts
.
domain
.
replace
(
IPV4_PORT_EXPR
"
"
)
;
let
cookie
=
{
domain
:
opts
.
domain
path
:
opts
.
path
name
:
name
value
:
value
secure
:
opts
.
secure
httpOnly
:
opts
.
httpOnly
session
:
false
expiry
:
opts
.
expiry
}
;
if
(
!
this
.
chrome
.
addCookie
(
cookie
)
)
{
throw
new
UnableToSetCookieError
(
)
;
}
return
cookie
;
}
delete
(
cookie
)
{
let
name
;
if
(
cookie
.
hasOwnProperty
(
"
name
"
)
)
{
name
=
cookie
.
name
;
}
else
{
name
=
cookie
;
}
for
(
let
candidate
of
this
)
{
if
(
candidate
.
name
=
=
name
)
{
if
(
!
this
.
chrome
.
deleteCookie
(
candidate
)
)
{
throw
new
UnknownError
(
"
Unable
to
delete
cookie
by
name
:
"
+
name
)
;
}
}
}
}
}
;
