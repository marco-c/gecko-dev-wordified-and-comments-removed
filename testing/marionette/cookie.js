"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
assert
.
js
"
)
;
const
{
InvalidCookieDomainError
pprint
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
cookie
"
]
;
const
IPV4_PORT_EXPR
=
/
:
\
d
+
/
;
this
.
cookie
=
{
manager
:
Services
.
cookies
}
;
cookie
.
fromJSON
=
function
(
json
)
{
let
newCookie
=
{
}
;
assert
.
object
(
json
pprint
Expected
cookie
object
got
{
json
}
)
;
newCookie
.
name
=
assert
.
string
(
json
.
name
"
Cookie
name
must
be
string
"
)
;
newCookie
.
value
=
assert
.
string
(
json
.
value
"
Cookie
value
must
be
string
"
)
;
if
(
typeof
json
.
domain
!
=
"
undefined
"
)
{
newCookie
.
domain
=
assert
.
string
(
json
.
domain
"
Cookie
domain
must
be
string
"
)
;
}
if
(
typeof
json
.
path
!
=
"
undefined
"
)
{
newCookie
.
path
=
assert
.
string
(
json
.
path
"
Cookie
path
must
be
string
"
)
;
}
if
(
typeof
json
.
secure
!
=
"
undefined
"
)
{
newCookie
.
secure
=
assert
.
boolean
(
json
.
secure
"
Cookie
secure
flag
must
be
boolean
"
)
;
}
if
(
typeof
json
.
httpOnly
!
=
"
undefined
"
)
{
newCookie
.
httpOnly
=
assert
.
boolean
(
json
.
httpOnly
"
Cookie
httpOnly
flag
must
be
boolean
"
)
;
}
if
(
typeof
json
.
session
!
=
"
undefined
"
)
{
newCookie
.
session
=
assert
.
boolean
(
json
.
session
"
Cookie
session
flag
must
be
boolean
"
)
;
}
if
(
typeof
json
.
expiry
!
=
"
undefined
"
)
{
newCookie
.
expiry
=
assert
.
positiveInteger
(
json
.
expiry
"
Cookie
expiry
must
be
a
positive
integer
"
)
;
}
return
newCookie
;
}
;
cookie
.
add
=
function
(
newCookie
{
restrictToHost
=
null
}
=
{
}
)
{
assert
.
string
(
newCookie
.
name
"
Cookie
name
must
be
string
"
)
;
assert
.
string
(
newCookie
.
value
"
Cookie
value
must
be
string
"
)
;
let
hostOnly
=
false
;
if
(
typeof
newCookie
.
domain
=
=
"
undefined
"
)
{
hostOnly
=
true
;
newCookie
.
domain
=
restrictToHost
;
}
assert
.
string
(
newCookie
.
domain
"
Cookie
domain
must
be
string
"
)
;
if
(
typeof
newCookie
.
path
=
=
"
undefined
"
)
{
newCookie
.
path
=
"
/
"
;
}
if
(
typeof
newCookie
.
expiry
=
=
"
undefined
"
)
{
let
date
=
new
Date
(
)
;
let
now
=
new
Date
(
Date
.
now
(
)
)
;
date
.
setYear
(
now
.
getFullYear
(
)
+
20
)
;
newCookie
.
expiry
=
date
.
getTime
(
)
/
1000
;
}
let
isIpAddress
=
false
;
try
{
Services
.
eTLD
.
getPublicSuffixFromHost
(
newCookie
.
domain
)
;
}
catch
(
e
)
{
switch
(
e
.
result
)
{
case
Cr
.
NS_ERROR_HOST_IS_IP_ADDRESS
:
isIpAddress
=
true
;
break
;
default
:
throw
new
InvalidCookieDomainError
(
newCookie
.
domain
)
;
}
}
if
(
!
hostOnly
&
&
!
isIpAddress
)
{
newCookie
.
domain
=
"
.
"
+
newCookie
.
domain
;
}
if
(
restrictToHost
)
{
if
(
!
restrictToHost
.
endsWith
(
newCookie
.
domain
)
&
&
(
"
.
"
+
restrictToHost
)
!
=
=
newCookie
.
domain
&
&
restrictToHost
!
=
=
newCookie
.
domain
)
{
throw
new
InvalidCookieDomainError
(
Cookies
may
only
be
set
+
for
the
current
domain
(
{
restrictToHost
}
)
)
;
}
}
newCookie
.
domain
=
newCookie
.
domain
.
replace
(
IPV4_PORT_EXPR
"
"
)
;
cookie
.
manager
.
add
(
newCookie
.
domain
newCookie
.
path
newCookie
.
name
newCookie
.
value
newCookie
.
secure
newCookie
.
httpOnly
newCookie
.
session
newCookie
.
expiry
{
}
)
;
}
;
cookie
.
remove
=
function
(
toDelete
)
{
cookie
.
manager
.
remove
(
toDelete
.
domain
toDelete
.
name
toDelete
.
path
false
{
}
)
;
}
;
cookie
.
iter
=
function
*
(
host
currentPath
=
"
/
"
)
{
assert
.
string
(
host
"
host
must
be
string
"
)
;
assert
.
string
(
currentPath
"
currentPath
must
be
string
"
)
;
const
isForCurrentPath
=
path
=
>
currentPath
.
indexOf
(
path
)
!
=
-
1
;
let
en
=
cookie
.
manager
.
getCookiesFromHost
(
host
{
}
)
;
while
(
en
.
hasMoreElements
(
)
)
{
let
cookie
=
en
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
let
hostname
=
host
;
do
{
if
(
(
cookie
.
host
=
=
"
.
"
+
hostname
|
|
cookie
.
host
=
=
hostname
)
&
&
isForCurrentPath
(
cookie
.
path
)
)
{
yield
{
"
name
"
:
cookie
.
name
"
value
"
:
cookie
.
value
"
path
"
:
cookie
.
path
"
domain
"
:
cookie
.
host
"
secure
"
:
cookie
.
isSecure
"
httpOnly
"
:
cookie
.
isHttpOnly
"
expiry
"
:
cookie
.
expiry
}
;
}
hostname
=
hostname
.
replace
(
/
^
.
*
?
\
.
/
"
"
)
;
}
while
(
hostname
.
indexOf
(
"
.
"
)
!
=
-
1
)
;
}
}
;
