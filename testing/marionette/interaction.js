"
use
strict
"
;
const
{
Preferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
accessibility
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
accessibility
.
js
"
)
;
const
{
atom
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
atom
.
js
"
)
;
const
{
element
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
element
.
js
"
)
;
const
{
ElementClickInterceptedError
ElementNotInteractableError
InvalidArgumentError
InvalidElementStateError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
const
{
event
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
event
.
js
"
)
;
const
{
pprint
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
format
.
js
"
)
;
const
{
TimedPromise
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
File
"
]
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
interaction
"
]
;
const
DISABLED_ATTRIBUTE_SUPPORTED_XUL
=
new
Set
(
[
"
ARROWSCROLLBOX
"
"
BUTTON
"
"
CHECKBOX
"
"
COMMAND
"
"
DESCRIPTION
"
"
KEY
"
"
KEYSET
"
"
LABEL
"
"
MENU
"
"
MENUITEM
"
"
MENULIST
"
"
MENUSEPARATOR
"
"
RADIO
"
"
RADIOGROUP
"
"
RICHLISTBOX
"
"
RICHLISTITEM
"
"
TAB
"
"
TABS
"
"
TOOLBARBUTTON
"
"
TREE
"
]
)
;
const
COMMON_FORM_CONTROLS
=
new
Set
(
[
"
input
"
"
textarea
"
"
select
"
]
)
;
const
INPUT_TYPES_NO_EVENT
=
new
Set
(
[
"
checkbox
"
"
radio
"
"
file
"
"
hidden
"
"
image
"
"
reset
"
"
button
"
"
submit
"
]
)
;
this
.
interaction
=
{
}
;
interaction
.
clickElement
=
async
function
(
el
strict
=
false
specCompat
=
false
)
{
const
a11y
=
accessibility
.
get
(
strict
)
;
if
(
element
.
isXULElement
(
el
)
)
{
await
chromeClick
(
el
a11y
)
;
}
else
if
(
specCompat
)
{
await
webdriverClickElement
(
el
a11y
)
;
}
else
{
await
seleniumClickElement
(
el
a11y
)
;
}
}
;
async
function
webdriverClickElement
(
el
a11y
)
{
const
win
=
getWindow
(
el
)
;
if
(
el
.
localName
=
=
"
input
"
&
&
el
.
type
=
=
"
file
"
)
{
throw
new
InvalidArgumentError
(
"
Cannot
click
<
input
type
=
file
>
elements
"
)
;
}
let
containerEl
=
element
.
getContainer
(
el
)
;
if
(
!
element
.
isInView
(
containerEl
)
)
{
element
.
scrollIntoView
(
containerEl
)
;
}
if
(
!
element
.
isInView
(
containerEl
)
)
{
throw
new
ElementNotInteractableError
(
pprint
Element
{
el
}
could
not
be
scrolled
into
view
)
;
}
let
rects
=
containerEl
.
getClientRects
(
)
;
let
clickPoint
=
element
.
getInViewCentrePoint
(
rects
[
0
]
win
)
;
if
(
element
.
isObscured
(
containerEl
)
)
{
throw
new
ElementClickInterceptedError
(
containerEl
clickPoint
)
;
}
let
acc
=
await
a11y
.
getAccessible
(
el
true
)
;
a11y
.
assertVisible
(
acc
el
true
)
;
a11y
.
assertEnabled
(
acc
el
true
)
;
a11y
.
assertActionable
(
acc
el
)
;
if
(
el
.
localName
=
=
"
option
"
)
{
interaction
.
selectOption
(
el
)
;
}
else
{
let
clicked
=
interaction
.
flushEventLoop
(
containerEl
)
;
event
.
synthesizeMouseAtPoint
(
clickPoint
.
x
clickPoint
.
y
{
}
win
)
;
await
clicked
;
}
}
async
function
chromeClick
(
el
a11y
)
{
if
(
!
atom
.
isElementEnabled
(
el
)
)
{
throw
new
InvalidElementStateError
(
"
Element
is
not
enabled
"
)
;
}
let
acc
=
await
a11y
.
getAccessible
(
el
true
)
;
a11y
.
assertVisible
(
acc
el
true
)
;
a11y
.
assertEnabled
(
acc
el
true
)
;
a11y
.
assertActionable
(
acc
el
)
;
if
(
el
.
localName
=
=
"
option
"
)
{
interaction
.
selectOption
(
el
)
;
}
else
{
el
.
click
(
)
;
}
}
async
function
seleniumClickElement
(
el
a11y
)
{
let
win
=
getWindow
(
el
)
;
let
visibilityCheckEl
=
el
;
if
(
el
.
localName
=
=
"
option
"
)
{
visibilityCheckEl
=
element
.
getContainer
(
el
)
;
}
if
(
!
element
.
isVisible
(
visibilityCheckEl
)
)
{
throw
new
ElementNotInteractableError
(
)
;
}
if
(
!
atom
.
isElementEnabled
(
el
)
)
{
throw
new
InvalidElementStateError
(
"
Element
is
not
enabled
"
)
;
}
let
acc
=
await
a11y
.
getAccessible
(
el
true
)
;
a11y
.
assertVisible
(
acc
el
true
)
;
a11y
.
assertEnabled
(
acc
el
true
)
;
a11y
.
assertActionable
(
acc
el
)
;
if
(
el
.
localName
=
=
"
option
"
)
{
interaction
.
selectOption
(
el
)
;
}
else
{
let
rects
=
el
.
getClientRects
(
)
;
let
centre
=
element
.
getInViewCentrePoint
(
rects
[
0
]
win
)
;
let
opts
=
{
}
;
event
.
synthesizeMouseAtPoint
(
centre
.
x
centre
.
y
opts
win
)
;
}
}
interaction
.
selectOption
=
function
(
el
)
{
if
(
element
.
isXULElement
(
el
)
)
{
throw
new
TypeError
(
"
XUL
dropdowns
not
supported
"
)
;
}
if
(
el
.
localName
!
=
"
option
"
)
{
throw
new
TypeError
(
pprint
Expected
<
option
>
element
got
{
el
}
)
;
}
let
containerEl
=
element
.
getContainer
(
el
)
;
event
.
mouseover
(
containerEl
)
;
event
.
mousemove
(
containerEl
)
;
event
.
mousedown
(
containerEl
)
;
containerEl
.
focus
(
)
;
if
(
!
el
.
disabled
)
{
if
(
containerEl
.
multiple
)
{
el
.
selected
=
!
el
.
selected
;
}
else
if
(
!
el
.
selected
)
{
el
.
selected
=
true
;
}
event
.
input
(
containerEl
)
;
event
.
change
(
containerEl
)
;
}
event
.
mouseup
(
containerEl
)
;
event
.
click
(
containerEl
)
;
containerEl
.
blur
(
)
;
}
;
interaction
.
clearElement
=
function
(
el
)
{
if
(
element
.
isDisabled
(
el
)
)
{
throw
new
InvalidElementStateError
(
pprint
Element
is
disabled
:
{
el
}
)
;
}
if
(
element
.
isReadOnly
(
el
)
)
{
throw
new
InvalidElementStateError
(
pprint
Element
is
read
-
only
:
{
el
}
)
;
}
if
(
!
element
.
isEditable
(
el
)
)
{
throw
new
InvalidElementStateError
(
pprint
Unable
to
clear
element
that
cannot
be
edited
:
{
el
}
)
;
}
if
(
!
element
.
isInView
(
el
)
)
{
element
.
scrollIntoView
(
el
)
;
}
if
(
!
element
.
isInView
(
el
)
)
{
throw
new
ElementNotInteractableError
(
pprint
Element
{
el
}
could
not
be
scrolled
into
view
)
;
}
if
(
element
.
isEditingHost
(
el
)
)
{
clearContentEditableElement
(
el
)
;
}
else
{
clearResettableElement
(
el
)
;
}
}
;
function
clearContentEditableElement
(
el
)
{
if
(
el
.
innerHTML
=
=
=
"
"
)
{
return
;
}
el
.
focus
(
)
;
el
.
innerHTML
=
"
"
;
event
.
change
(
el
)
;
el
.
blur
(
)
;
}
function
clearResettableElement
(
el
)
{
if
(
!
element
.
isMutableFormControl
(
el
)
)
{
throw
new
InvalidElementStateError
(
pprint
Not
an
editable
form
control
:
{
el
}
)
;
}
let
isEmpty
;
switch
(
el
.
type
)
{
case
"
file
"
:
isEmpty
=
el
.
files
.
length
=
=
0
;
break
;
default
:
isEmpty
=
el
.
value
=
=
=
"
"
;
break
;
}
if
(
el
.
validity
.
valid
&
&
isEmpty
)
{
return
;
}
el
.
focus
(
)
;
el
.
value
=
"
"
;
event
.
change
(
el
)
;
el
.
blur
(
)
;
}
interaction
.
flushEventLoop
=
async
function
(
el
)
{
const
win
=
el
.
ownerGlobal
;
let
unloadEv
clickEv
;
let
spinEventLoop
=
resolve
=
>
{
unloadEv
=
resolve
;
clickEv
=
(
)
=
>
{
if
(
win
.
closed
)
{
resolve
(
)
;
}
else
{
win
.
setTimeout
(
resolve
0
)
;
}
}
;
win
.
addEventListener
(
"
unload
"
unloadEv
{
mozSystemGroup
:
true
}
)
;
el
.
addEventListener
(
"
click
"
clickEv
{
mozSystemGroup
:
true
}
)
;
}
;
let
removeListeners
=
(
)
=
>
{
win
.
removeEventListener
(
"
unload
"
unloadEv
)
;
el
.
removeEventListener
(
"
click
"
clickEv
)
;
}
;
return
new
TimedPromise
(
spinEventLoop
{
timeout
:
500
throws
:
null
}
)
.
then
(
removeListeners
)
;
}
;
interaction
.
moveCaretToEnd
=
function
(
el
)
{
if
(
!
element
.
isDOMElement
(
el
)
)
{
return
;
}
let
isTextarea
=
el
.
localName
=
=
"
textarea
"
;
let
isInputText
=
el
.
localName
=
=
"
input
"
&
&
el
.
type
=
=
"
text
"
;
if
(
isTextarea
|
|
isInputText
)
{
if
(
el
.
selectionEnd
=
=
0
)
{
let
len
=
el
.
value
.
length
;
el
.
setSelectionRange
(
len
len
)
;
}
}
}
;
interaction
.
isKeyboardInteractable
=
function
(
el
)
{
const
win
=
getWindow
(
el
)
;
if
(
el
.
localName
=
=
=
"
body
"
|
|
el
=
=
=
win
.
document
.
documentElement
)
{
return
true
;
}
el
.
focus
(
)
;
return
el
=
=
=
win
.
document
.
activeElement
;
}
;
interaction
.
uploadFiles
=
async
function
(
el
paths
)
{
let
files
=
[
]
;
if
(
el
.
hasAttribute
(
"
multiple
"
)
)
{
files
=
Array
.
prototype
.
slice
.
call
(
el
.
files
)
;
}
else
if
(
paths
.
length
>
1
)
{
throw
new
InvalidArgumentError
(
pprint
Element
{
el
}
doesn
'
t
accept
multiple
files
)
;
}
for
(
let
path
of
paths
)
{
let
file
;
try
{
file
=
await
File
.
createFromFileName
(
path
)
;
}
catch
(
e
)
{
throw
new
InvalidArgumentError
(
"
File
not
found
:
"
+
path
)
;
}
files
.
push
(
file
)
;
}
el
.
mozSetFileArray
(
files
)
;
}
;
interaction
.
setFormControlValue
=
function
(
el
value
)
{
if
(
!
COMMON_FORM_CONTROLS
.
has
(
el
.
localName
)
)
{
throw
new
TypeError
(
"
This
function
is
for
form
elements
only
"
)
;
}
el
.
value
=
value
;
if
(
INPUT_TYPES_NO_EVENT
.
has
(
el
.
type
)
)
{
return
;
}
event
.
input
(
el
)
;
event
.
change
(
el
)
;
}
;
interaction
.
sendKeysToElement
=
async
function
(
el
value
{
strictFileInteractability
=
false
accessibilityChecks
=
false
webdriverClick
=
false
}
=
{
}
)
{
const
a11y
=
accessibility
.
get
(
accessibilityChecks
)
;
if
(
webdriverClick
)
{
await
webdriverSendKeysToElement
(
el
value
a11y
strictFileInteractability
)
;
}
else
{
await
legacySendKeysToElement
(
el
value
a11y
)
;
}
}
;
async
function
webdriverSendKeysToElement
(
el
value
a11y
strictFileInteractability
)
{
const
win
=
getWindow
(
el
)
;
if
(
el
.
type
!
=
"
file
"
|
|
strictFileInteractability
)
{
let
containerEl
=
element
.
getContainer
(
el
)
;
if
(
!
interaction
.
isKeyboardInteractable
(
containerEl
)
)
{
throw
new
ElementNotInteractableError
(
pprint
Element
{
el
}
is
not
reachable
by
keyboard
)
;
}
}
let
acc
=
await
a11y
.
getAccessible
(
el
true
)
;
a11y
.
assertActionable
(
acc
el
)
;
el
.
focus
(
)
;
interaction
.
moveCaretToEnd
(
el
)
;
if
(
el
.
type
=
=
"
file
"
)
{
let
paths
=
value
.
split
(
"
\
n
"
)
;
await
interaction
.
uploadFiles
(
el
paths
)
;
event
.
input
(
el
)
;
event
.
change
(
el
)
;
}
else
if
(
(
el
.
type
=
=
"
date
"
|
|
el
.
type
=
=
"
time
"
)
&
&
Preferences
.
get
(
"
dom
.
forms
.
datetime
"
)
)
{
interaction
.
setFormControlValue
(
el
value
)
;
}
else
{
event
.
sendKeysToElement
(
value
el
win
)
;
}
}
async
function
legacySendKeysToElement
(
el
value
a11y
)
{
const
win
=
getWindow
(
el
)
;
if
(
el
.
type
=
=
"
file
"
)
{
el
.
focus
(
)
;
await
interaction
.
uploadFiles
(
el
[
value
]
)
;
event
.
input
(
el
)
;
event
.
change
(
el
)
;
}
else
if
(
(
el
.
type
=
=
"
date
"
|
|
el
.
type
=
=
"
time
"
)
&
&
Preferences
.
get
(
"
dom
.
forms
.
datetime
"
)
)
{
interaction
.
setFormControlValue
(
el
value
)
;
}
else
{
let
visibilityCheckEl
=
el
;
if
(
el
.
localName
=
=
"
option
"
)
{
visibilityCheckEl
=
element
.
getContainer
(
el
)
;
}
if
(
!
element
.
isVisible
(
visibilityCheckEl
)
)
{
throw
new
ElementNotInteractableError
(
"
Element
is
not
visible
"
)
;
}
let
acc
=
await
a11y
.
getAccessible
(
el
true
)
;
a11y
.
assertActionable
(
acc
el
)
;
interaction
.
moveCaretToEnd
(
el
)
;
el
.
focus
(
)
;
event
.
sendKeysToElement
(
value
el
win
)
;
}
}
interaction
.
isElementDisplayed
=
function
(
el
strict
=
false
)
{
let
win
=
getWindow
(
el
)
;
let
displayed
=
atom
.
isElementDisplayed
(
el
win
)
;
let
a11y
=
accessibility
.
get
(
strict
)
;
return
a11y
.
getAccessible
(
el
)
.
then
(
acc
=
>
{
a11y
.
assertVisible
(
acc
el
displayed
)
;
return
displayed
;
}
)
;
}
;
interaction
.
isElementEnabled
=
function
(
el
strict
=
false
)
{
let
enabled
=
true
;
let
win
=
getWindow
(
el
)
;
if
(
element
.
isXULElement
(
el
)
)
{
if
(
DISABLED_ATTRIBUTE_SUPPORTED_XUL
.
has
(
el
.
tagName
.
toUpperCase
(
)
)
)
{
if
(
el
.
hasAttribute
(
"
disabled
"
)
&
&
el
.
getAttribute
(
"
disabled
"
)
=
=
=
"
true
"
)
{
enabled
=
false
;
}
}
}
else
if
(
[
"
application
/
xml
"
"
text
/
xml
"
]
.
includes
(
win
.
document
.
contentType
)
)
{
enabled
=
false
;
}
else
{
enabled
=
atom
.
isElementEnabled
(
el
{
frame
:
win
}
)
;
}
let
a11y
=
accessibility
.
get
(
strict
)
;
return
a11y
.
getAccessible
(
el
)
.
then
(
acc
=
>
{
a11y
.
assertEnabled
(
acc
el
enabled
)
;
return
enabled
;
}
)
;
}
;
interaction
.
isElementSelected
=
function
(
el
strict
=
false
)
{
let
selected
=
element
.
isSelected
(
el
)
;
let
a11y
=
accessibility
.
get
(
strict
)
;
return
a11y
.
getAccessible
(
el
)
.
then
(
acc
=
>
{
a11y
.
assertSelected
(
acc
el
selected
)
;
return
selected
;
}
)
;
}
;
function
getWindow
(
el
)
{
return
el
.
ownerDocument
.
defaultView
;
}
