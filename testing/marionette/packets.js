"
use
strict
"
;
const
{
StreamUtils
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
stream
-
utils
.
js
"
)
;
const
unicodeConverter
=
Cc
[
"
mozilla
.
org
/
intl
/
scriptableunicodeconverter
"
]
.
createInstance
(
Ci
.
nsIScriptableUnicodeConverter
)
;
unicodeConverter
.
charset
=
"
UTF
-
8
"
;
const
defer
=
function
(
)
{
let
deferred
=
{
promise
:
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
resolve
=
resolve
;
deferred
.
reject
=
reject
;
}
)
}
;
return
deferred
;
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
RawPacket
"
"
Packet
"
"
JSONPacket
"
"
BulkPacket
"
]
;
const
PACKET_LENGTH_MAX
=
Math
.
pow
(
2
40
)
;
function
Packet
(
transport
)
{
this
.
_transport
=
transport
;
this
.
_length
=
0
;
}
Packet
.
fromHeader
=
function
(
header
transport
)
{
return
JSONPacket
.
fromHeader
(
header
transport
)
|
|
BulkPacket
.
fromHeader
(
header
transport
)
;
}
;
Packet
.
prototype
=
{
get
length
(
)
{
return
this
.
_length
;
}
set
length
(
length
)
{
if
(
length
>
PACKET_LENGTH_MAX
)
{
throw
new
Error
(
"
Packet
length
"
+
length
+
"
exceeds
the
max
length
of
"
+
PACKET_LENGTH_MAX
)
;
}
this
.
_length
=
length
;
}
destroy
(
)
{
this
.
_transport
=
null
;
}
}
;
function
JSONPacket
(
transport
)
{
Packet
.
call
(
this
transport
)
;
this
.
_data
=
"
"
;
this
.
_done
=
false
;
}
JSONPacket
.
fromHeader
=
function
(
header
transport
)
{
let
match
=
this
.
HEADER_PATTERN
.
exec
(
header
)
;
if
(
!
match
)
{
return
null
;
}
let
packet
=
new
JSONPacket
(
transport
)
;
packet
.
length
=
+
match
[
1
]
;
return
packet
;
}
;
JSONPacket
.
HEADER_PATTERN
=
/
^
(
\
d
+
)
:
/
;
JSONPacket
.
prototype
=
Object
.
create
(
Packet
.
prototype
)
;
Object
.
defineProperty
(
JSONPacket
.
prototype
"
object
"
{
get
(
)
{
return
this
.
_object
;
}
set
(
object
)
{
this
.
_object
=
object
;
let
data
=
JSON
.
stringify
(
object
)
;
this
.
_data
=
unicodeConverter
.
ConvertFromUnicode
(
data
)
;
this
.
length
=
this
.
_data
.
length
;
}
}
)
;
JSONPacket
.
prototype
.
read
=
function
(
stream
scriptableStream
)
{
this
.
_readData
(
stream
scriptableStream
)
;
if
(
!
this
.
done
)
{
return
;
}
let
json
=
this
.
_data
;
try
{
json
=
unicodeConverter
.
ConvertToUnicode
(
json
)
;
this
.
_object
=
JSON
.
parse
(
json
)
;
}
catch
(
e
)
{
let
msg
=
"
Error
parsing
incoming
packet
:
"
+
json
+
"
(
"
+
e
+
"
-
"
+
e
.
stack
+
"
)
"
;
console
.
error
(
msg
)
;
dump
(
msg
+
"
\
n
"
)
;
return
;
}
this
.
_transport
.
_onJSONObjectReady
(
this
.
_object
)
;
}
;
JSONPacket
.
prototype
.
_readData
=
function
(
stream
scriptableStream
)
{
let
bytesToRead
=
Math
.
min
(
this
.
length
-
this
.
_data
.
length
stream
.
available
(
)
)
;
this
.
_data
+
=
scriptableStream
.
readBytes
(
bytesToRead
)
;
this
.
_done
=
this
.
_data
.
length
=
=
=
this
.
length
;
}
;
JSONPacket
.
prototype
.
write
=
function
(
stream
)
{
if
(
this
.
_outgoing
=
=
=
undefined
)
{
this
.
_outgoing
=
this
.
length
+
"
:
"
+
this
.
_data
;
}
let
written
=
stream
.
write
(
this
.
_outgoing
this
.
_outgoing
.
length
)
;
this
.
_outgoing
=
this
.
_outgoing
.
slice
(
written
)
;
this
.
_done
=
!
this
.
_outgoing
.
length
;
}
;
Object
.
defineProperty
(
JSONPacket
.
prototype
"
done
"
{
get
(
)
{
return
this
.
_done
;
}
}
)
;
JSONPacket
.
prototype
.
toString
=
function
(
)
{
return
JSON
.
stringify
(
this
.
_object
null
2
)
;
}
;
function
BulkPacket
(
transport
)
{
Packet
.
call
(
this
transport
)
;
this
.
_done
=
false
;
this
.
_readyForWriting
=
defer
(
)
;
}
BulkPacket
.
fromHeader
=
function
(
header
transport
)
{
let
match
=
this
.
HEADER_PATTERN
.
exec
(
header
)
;
if
(
!
match
)
{
return
null
;
}
let
packet
=
new
BulkPacket
(
transport
)
;
packet
.
header
=
{
actor
:
match
[
1
]
type
:
match
[
2
]
length
:
+
match
[
3
]
}
;
return
packet
;
}
;
BulkPacket
.
HEADER_PATTERN
=
/
^
bulk
(
[
^
:
]
+
)
(
[
^
:
]
+
)
(
\
d
+
)
:
/
;
BulkPacket
.
prototype
=
Object
.
create
(
Packet
.
prototype
)
;
BulkPacket
.
prototype
.
read
=
function
(
stream
)
{
this
.
_transport
.
pauseIncoming
(
)
;
let
deferred
=
defer
(
)
;
this
.
_transport
.
_onBulkReadReady
(
{
actor
:
this
.
actor
type
:
this
.
type
length
:
this
.
length
copyTo
:
(
output
)
=
>
{
let
copying
=
StreamUtils
.
copyStream
(
stream
output
this
.
length
)
;
deferred
.
resolve
(
copying
)
;
return
copying
;
}
stream
done
:
deferred
}
)
;
deferred
.
promise
.
then
(
(
)
=
>
{
this
.
_done
=
true
;
this
.
_transport
.
resumeIncoming
(
)
;
}
this
.
_transport
.
close
)
;
this
.
read
=
(
)
=
>
{
throw
new
Error
(
"
Tried
to
read
(
)
a
BulkPacket
'
s
stream
multiple
times
.
"
)
;
}
;
}
;
BulkPacket
.
prototype
.
write
=
function
(
stream
)
{
if
(
this
.
_outgoingHeader
=
=
=
undefined
)
{
this
.
_outgoingHeader
=
"
bulk
"
+
this
.
actor
+
"
"
+
this
.
type
+
"
"
+
this
.
length
+
"
:
"
;
}
if
(
this
.
_outgoingHeader
.
length
)
{
let
written
=
stream
.
write
(
this
.
_outgoingHeader
this
.
_outgoingHeader
.
length
)
;
this
.
_outgoingHeader
=
this
.
_outgoingHeader
.
slice
(
written
)
;
return
;
}
this
.
_transport
.
pauseOutgoing
(
)
;
let
deferred
=
defer
(
)
;
this
.
_readyForWriting
.
resolve
(
{
copyFrom
:
(
input
)
=
>
{
let
copying
=
StreamUtils
.
copyStream
(
input
stream
this
.
length
)
;
deferred
.
resolve
(
copying
)
;
return
copying
;
}
stream
done
:
deferred
}
)
;
deferred
.
promise
.
then
(
(
)
=
>
{
this
.
_done
=
true
;
this
.
_transport
.
resumeOutgoing
(
)
;
}
this
.
_transport
.
close
)
;
this
.
write
=
(
)
=
>
{
throw
new
Error
(
"
Tried
to
write
(
)
a
BulkPacket
'
s
stream
multiple
times
.
"
)
;
}
;
}
;
Object
.
defineProperty
(
BulkPacket
.
prototype
"
streamReadyForWriting
"
{
get
(
)
{
return
this
.
_readyForWriting
.
promise
;
}
}
)
;
Object
.
defineProperty
(
BulkPacket
.
prototype
"
header
"
{
get
(
)
{
return
{
actor
:
this
.
actor
type
:
this
.
type
length
:
this
.
length
}
;
}
set
(
header
)
{
this
.
actor
=
header
.
actor
;
this
.
type
=
header
.
type
;
this
.
length
=
header
.
length
;
}
}
)
;
Object
.
defineProperty
(
BulkPacket
.
prototype
"
done
"
{
get
(
)
{
return
this
.
_done
;
}
}
)
;
BulkPacket
.
prototype
.
toString
=
function
(
)
{
return
"
Bulk
:
"
+
JSON
.
stringify
(
this
.
header
null
2
)
;
}
;
function
RawPacket
(
transport
data
)
{
Packet
.
call
(
this
transport
)
;
this
.
_data
=
data
;
this
.
length
=
data
.
length
;
this
.
_done
=
false
;
}
RawPacket
.
prototype
=
Object
.
create
(
Packet
.
prototype
)
;
RawPacket
.
prototype
.
read
=
function
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
;
RawPacket
.
prototype
.
write
=
function
(
stream
)
{
let
written
=
stream
.
write
(
this
.
_data
this
.
_data
.
length
)
;
this
.
_data
=
this
.
_data
.
slice
(
written
)
;
this
.
_done
=
!
this
.
_data
.
length
;
}
;
Object
.
defineProperty
(
RawPacket
.
prototype
"
done
"
{
get
(
)
{
return
this
.
_done
;
}
}
)
;
