"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
error
TimeoutError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
log
.
js
"
{
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
Log
.
get
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
IdlePromise
"
"
MessageManagerDestroyedPromise
"
"
PollPromise
"
"
Sleep
"
"
TimedPromise
"
]
;
const
{
TYPE_ONE_SHOT
TYPE_REPEATING_SLACK
}
=
Ci
.
nsITimer
;
function
PollPromise
(
func
{
timeout
=
2000
interval
=
10
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
if
(
typeof
func
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
if
(
!
(
typeof
timeout
=
=
"
number
"
&
&
typeof
interval
=
=
"
number
"
)
)
{
throw
new
TypeError
(
)
;
}
if
(
(
!
Number
.
isInteger
(
timeout
)
|
|
timeout
<
0
)
|
|
(
!
Number
.
isInteger
(
interval
)
|
|
interval
<
0
)
)
{
throw
new
RangeError
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
start
=
new
Date
(
)
.
getTime
(
)
;
const
end
=
start
+
timeout
;
let
evalFn
=
(
)
=
>
{
new
Promise
(
func
)
.
then
(
resolve
rejected
=
>
{
if
(
error
.
isError
(
rejected
)
)
{
throw
rejected
;
}
if
(
start
=
=
end
|
|
new
Date
(
)
.
getTime
(
)
>
=
end
)
{
resolve
(
rejected
)
;
}
}
)
.
catch
(
reject
)
;
}
;
evalFn
(
)
;
timer
.
init
(
evalFn
interval
TYPE_REPEATING_SLACK
)
;
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
function
TimedPromise
(
fn
{
timeout
=
1500
throws
=
TimeoutError
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
if
(
typeof
fn
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
if
(
typeof
timeout
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
if
(
!
Number
.
isInteger
(
timeout
)
|
|
timeout
<
0
)
{
throw
new
RangeError
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
bail
=
(
)
=
>
{
if
(
throws
!
=
=
null
)
{
let
err
=
new
throws
(
)
;
reject
(
err
)
;
}
else
{
resolve
(
)
;
}
}
;
timer
.
initWithCallback
(
{
notify
:
bail
}
timeout
TYPE_ONE_SHOT
)
;
try
{
fn
(
resolve
reject
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
function
Sleep
(
timeout
)
{
if
(
typeof
timeout
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
return
new
TimedPromise
(
(
)
=
>
{
}
{
timeout
throws
:
null
}
)
;
}
function
MessageManagerDestroyedPromise
(
messageManager
)
{
return
new
Promise
(
resolve
=
>
{
function
observe
(
subject
topic
)
{
logger
.
debug
(
Received
observer
notification
{
topic
}
)
;
if
(
subject
=
=
messageManager
)
{
Services
.
obs
.
removeObserver
(
this
"
message
-
manager
-
disconnect
"
)
;
resolve
(
)
;
}
}
Services
.
obs
.
addObserver
(
observe
"
message
-
manager
-
disconnect
"
)
;
}
)
;
}
function
IdlePromise
(
win
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
win
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
)
;
}
