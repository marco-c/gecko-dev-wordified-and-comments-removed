"
use
strict
"
;
const
{
error
TimeoutError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
PollPromise
"
"
TimedPromise
"
]
;
const
{
TYPE_ONE_SHOT
TYPE_REPEATING_SLACK
}
=
Ci
.
nsITimer
;
function
PollPromise
(
func
{
timeout
=
2000
interval
=
10
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
start
=
new
Date
(
)
.
getTime
(
)
;
const
end
=
start
+
timeout
;
let
evalFn
=
(
)
=
>
{
new
Promise
(
func
)
.
then
(
resolve
rejected
=
>
{
if
(
error
.
isError
(
rejected
)
)
{
throw
rejected
;
}
if
(
start
=
=
end
|
|
new
Date
(
)
.
getTime
(
)
>
=
end
)
{
resolve
(
rejected
)
;
}
}
)
.
catch
(
reject
)
;
}
;
evalFn
(
)
;
timer
.
init
(
evalFn
interval
TYPE_REPEATING_SLACK
)
;
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
function
TimedPromise
(
fn
{
timeout
=
1500
throws
=
TimeoutError
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
bail
=
(
)
=
>
{
if
(
throws
!
=
=
null
)
{
let
err
=
new
throws
(
)
;
reject
(
err
)
;
}
else
{
resolve
(
)
;
}
}
;
timer
.
initWithCallback
(
{
notify
:
bail
}
timeout
TYPE_ONE_SHOT
)
;
try
{
fn
(
resolve
reject
)
;
}
catch
(
e
)
{
reject
(
e
)
;
}
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
