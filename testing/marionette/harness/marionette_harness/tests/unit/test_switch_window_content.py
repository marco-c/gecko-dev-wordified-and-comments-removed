from
__future__
import
absolute_import
import
sys
from
unittest
import
skipIf
from
six
.
moves
.
urllib
.
parse
import
quote
from
marionette_driver
import
By
Wait
from
marionette_driver
.
keys
import
Keys
from
marionette_harness
import
(
    
MarionetteTestCase
    
WindowManagerMixin
)
def
inline
(
doc
)
:
    
return
"
data
:
text
/
html
;
charset
=
utf
-
8
{
}
"
.
format
(
quote
(
doc
)
)
class
TestSwitchToWindowContent
(
WindowManagerMixin
MarionetteTestCase
)
:
    
def
setUp
(
self
)
:
        
super
(
TestSwitchToWindowContent
self
)
.
setUp
(
)
        
if
self
.
marionette
.
session_capabilities
[
"
platformName
"
]
=
=
"
mac
"
:
            
self
.
mod_key
=
Keys
.
META
        
else
:
            
self
.
mod_key
=
Keys
.
CONTROL
        
self
.
selected_tab_index
=
self
.
get_selected_tab_index
(
)
    
def
tearDown
(
self
)
:
        
self
.
close_all_tabs
(
)
        
super
(
TestSwitchToWindowContent
self
)
.
tearDown
(
)
    
def
get_selected_tab_index
(
self
)
:
        
with
self
.
marionette
.
using_context
(
"
chrome
"
)
:
            
return
self
.
marionette
.
execute_script
(
                
"
"
"
                
const
{
AppConstants
}
=
ChromeUtils
.
import
(
                  
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
                
)
;
                
let
win
=
null
;
                
if
(
AppConstants
.
MOZ_APP_NAME
=
=
"
fennec
"
)
{
                  
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
                
}
else
{
                  
const
{
BrowserWindowTracker
}
=
ChromeUtils
.
import
(
                    
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
                  
)
;
                  
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
                
}
                
let
tabBrowser
=
null
;
                
/
/
Fennec
                
if
(
win
.
BrowserApp
)
{
                  
tabBrowser
=
win
.
BrowserApp
;
                
/
/
Firefox
                
}
else
if
(
win
.
gBrowser
)
{
                  
tabBrowser
=
win
.
gBrowser
;
                
}
else
{
                  
return
null
;
                
}
                
for
(
let
i
=
0
;
i
<
tabBrowser
.
tabs
.
length
;
i
+
+
)
{
                  
if
(
tabBrowser
.
tabs
[
i
]
=
=
tabBrowser
.
selectedTab
)
{
                    
return
i
;
                  
}
                
}
            
"
"
"
            
)
    
def
test_switch_tabs_with_focus_change
(
self
)
:
        
new_tab
=
self
.
open_tab
(
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertNotEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab
)
        
self
.
assertNotEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_tab
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
marionette
.
close
(
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
    
skipIf
(
        
sys
.
platform
.
startswith
(
"
linux
"
)
        
"
Bug
1557232
-
Original
window
sometimes
doesn
'
t
receive
focus
"
    
)
    
def
test_switch_tabs_in_different_windows_with_focus_change
(
self
)
:
        
new_tab1
=
self
.
open_tab
(
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
1
)
        
self
.
marionette
.
switch_to_window
(
new_tab1
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab1
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
1
)
        
with
self
.
marionette
.
using_context
(
"
content
"
)
:
            
new_tab2
=
self
.
open_window
(
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab1
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
0
)
        
self
.
marionette
.
switch_to_window
(
new_tab2
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab2
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
0
)
        
self
.
marionette
.
switch_to_window
(
new_tab1
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab1
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
1
)
        
self
.
marionette
.
switch_to_window
(
new_tab2
)
        
self
.
marionette
.
close
(
)
        
self
.
marionette
.
switch_to_window
(
new_tab1
)
        
self
.
marionette
.
close
(
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
    
def
test_switch_tabs_without_focus_change
(
self
)
:
        
new_tab
=
self
.
open_tab
(
focus
=
True
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertNotEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_tab
focus
=
False
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertNotEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
marionette
.
close
(
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
    
def
test_switch_to_unloaded_tab
(
self
)
:
        
first_page
=
inline
(
"
<
p
>
foo
"
)
        
second_page
=
inline
(
"
<
p
>
bar
"
)
        
self
.
assertEqual
(
len
(
self
.
marionette
.
window_handles
)
1
)
        
self
.
marionette
.
navigate
(
first_page
)
        
new_tab
=
self
.
open_tab
(
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
self
.
start_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab
)
        
self
.
assertNotEqual
(
self
.
get_selected_tab_index
(
)
self
.
selected_tab_index
)
        
self
.
marionette
.
navigate
(
second_page
)
        
self
.
marionette
.
restart
(
in_app
=
True
)
        
self
.
assertEqual
(
len
(
self
.
marionette
.
window_handles
)
2
)
        
window_handles
=
self
.
marionette
.
window_handles
        
self
.
assertEqual
(
len
(
window_handles
)
2
)
        
current_tab
=
self
.
marionette
.
current_window_handle
        
[
other_tab
]
=
filter
(
lambda
handle
:
handle
!
=
current_tab
window_handles
)
        
Wait
(
self
.
marionette
timeout
=
5
)
.
until
(
            
lambda
_
:
self
.
marionette
.
get_url
(
)
=
=
second_page
            
message
=
"
Expected
URL
in
the
second
tab
has
been
loaded
"
        
)
        
self
.
marionette
.
switch_to_window
(
other_tab
)
        
Wait
(
self
.
marionette
timeout
=
5
)
.
until
(
            
lambda
_
:
self
.
marionette
.
get_url
(
)
=
=
first_page
            
message
=
"
Expected
URL
in
the
first
tab
has
been
loaded
"
        
)
    
def
test_switch_from_content_to_chrome_window_should_not_change_selected_tab
(
self
)
:
        
new_tab
=
self
.
open_tab
(
focus
=
True
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab
)
        
new_tab_index
=
self
.
get_selected_tab_index
(
)
        
self
.
marionette
.
switch_to_window
(
self
.
start_window
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_tab
)
        
self
.
assertEqual
(
self
.
get_selected_tab_index
(
)
new_tab_index
)
    
def
test_switch_to_new_private_browsing_tab
(
self
)
:
        
new_tab
=
self
.
open_tab
(
focus
=
True
)
        
self
.
marionette
.
switch_to_window
(
new_tab
)
        
def
open_private_browsing_window_firefox
(
)
:
            
with
self
.
marionette
.
using_context
(
"
content
"
)
:
                
self
.
marionette
.
find_element
(
By
.
ID
"
startPrivateBrowsing
"
)
.
click
(
)
        
def
open_private_browsing_tab_fennec
(
)
:
            
with
self
.
marionette
.
using_context
(
"
content
"
)
:
                
self
.
marionette
.
find_element
(
By
.
ID
"
newPrivateTabLink
"
)
.
click
(
)
        
with
self
.
marionette
.
using_context
(
"
content
"
)
:
            
self
.
marionette
.
navigate
(
"
about
:
privatebrowsing
"
)
            
if
self
.
marionette
.
session_capabilities
[
"
browserName
"
]
=
=
"
fennec
"
:
                
new_pb_tab
=
self
.
open_tab
(
open_private_browsing_tab_fennec
)
            
else
:
                
new_pb_tab
=
self
.
open_tab
(
open_private_browsing_window_firefox
)
        
self
.
marionette
.
switch_to_window
(
new_pb_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
new_pb_tab
)
        
self
.
marionette
.
execute_script
(
"
return
true
;
"
)
    
def
test_switch_to_window_after_remoteness_change
(
self
)
:
        
with
self
.
marionette
.
using_context
(
"
content
"
)
:
            
self
.
marionette
.
navigate
(
"
about
:
robots
"
)
        
about_robots_tab
=
self
.
marionette
.
current_window_handle
        
tab2
=
self
.
open_tab
(
focus
=
True
)
        
self
.
marionette
.
switch_to_window
(
tab2
)
        
self
.
marionette
.
close
(
)
        
self
.
marionette
.
switch_to_window
(
about_robots_tab
)
        
self
.
assertEqual
(
self
.
marionette
.
current_window_handle
about_robots_tab
)
