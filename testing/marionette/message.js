"
use
strict
"
;
var
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
assert
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Command
"
"
Message
"
"
MessageOrigin
"
"
Response
"
]
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
const
MessageOrigin
=
{
Client
:
0
Server
:
1
}
;
this
.
Message
=
{
}
;
Message
.
fromMsg
=
function
(
data
)
{
switch
(
data
[
0
]
)
{
case
Command
.
TYPE
:
return
Command
.
fromMsg
(
data
)
;
case
Response
.
TYPE
:
return
Response
.
fromMsg
(
data
)
;
default
:
throw
new
TypeError
(
"
Unrecognised
message
type
in
packet
:
"
+
JSON
.
stringify
(
data
)
)
;
}
}
;
class
Command
{
constructor
(
msgID
name
params
=
{
}
)
{
this
.
id
=
assert
.
integer
(
msgID
)
;
this
.
name
=
assert
.
string
(
name
)
;
this
.
parameters
=
assert
.
object
(
params
)
;
this
.
onerror
=
null
;
this
.
onresult
=
null
;
this
.
origin
=
MessageOrigin
.
Client
;
this
.
sent
=
false
;
}
onresponse
(
resp
)
{
if
(
this
.
onerror
&
&
resp
.
error
)
{
this
.
onerror
(
resp
.
error
)
;
}
else
if
(
this
.
onresult
&
&
resp
.
body
)
{
this
.
onresult
(
resp
.
body
)
;
}
}
toMsg
(
)
{
return
[
Command
.
TYPE
this
.
id
this
.
name
this
.
parameters
]
;
}
toString
(
)
{
return
"
Command
{
id
:
"
+
this
.
id
+
"
"
+
"
name
:
"
+
JSON
.
stringify
(
this
.
name
)
+
"
"
+
"
parameters
:
"
+
JSON
.
stringify
(
this
.
parameters
)
+
"
}
"
;
}
static
fromMsg
(
msg
)
{
let
[
type
msgID
name
params
]
=
msg
;
assert
.
that
(
n
=
>
n
=
=
=
Command
.
TYPE
)
(
type
)
;
if
(
params
=
=
=
null
)
{
params
=
undefined
;
}
return
new
Command
(
msgID
name
params
)
;
}
}
Command
.
TYPE
=
0
;
const
validator
=
{
exclusionary
:
{
"
capabilities
"
:
[
"
error
"
"
value
"
]
"
error
"
:
[
"
value
"
"
sessionId
"
"
capabilities
"
]
"
sessionId
"
:
[
"
error
"
"
value
"
]
"
value
"
:
[
"
error
"
"
sessionId
"
"
capabilities
"
]
}
set
(
obj
prop
val
)
{
let
tests
=
this
.
exclusionary
[
prop
]
;
if
(
tests
)
{
for
(
let
t
of
tests
)
{
if
(
obj
.
hasOwnProperty
(
t
)
)
{
throw
new
TypeError
(
{
t
}
set
cannot
set
{
prop
}
)
;
}
}
}
obj
[
prop
]
=
val
;
return
true
;
}
}
;
const
ResponseBody
=
(
)
=
>
new
Proxy
(
{
}
validator
)
;
class
Response
{
constructor
(
msgID
respHandler
=
(
)
=
>
{
}
)
{
this
.
id
=
assert
.
integer
(
msgID
)
;
this
.
respHandler_
=
assert
.
callable
(
respHandler
)
;
this
.
error
=
null
;
this
.
body
=
ResponseBody
(
)
;
this
.
origin
=
MessageOrigin
.
Server
;
this
.
sent
=
false
;
}
sendConditionally
(
predicate
)
{
if
(
predicate
(
this
)
)
{
this
.
send
(
)
;
}
}
send
(
)
{
if
(
this
.
sent
)
{
throw
new
RangeError
(
"
Response
has
already
been
sent
:
"
+
this
)
;
}
this
.
respHandler_
(
this
)
;
this
.
sent
=
true
;
}
sendError
(
err
)
{
this
.
error
=
error
.
wrap
(
err
)
.
toJSON
(
)
;
this
.
body
=
null
;
this
.
send
(
)
;
if
(
!
error
.
isWebDriverError
(
err
)
)
{
throw
err
;
}
}
toMsg
(
)
{
return
[
Response
.
TYPE
this
.
id
this
.
error
this
.
body
]
;
}
toString
(
)
{
return
"
Response
{
id
:
"
+
this
.
id
+
"
"
+
"
error
:
"
+
JSON
.
stringify
(
this
.
error
)
+
"
"
+
"
body
:
"
+
JSON
.
stringify
(
this
.
body
)
+
"
}
"
;
}
static
fromMsg
(
msg
)
{
let
[
type
msgID
err
body
]
=
msg
;
assert
.
that
(
n
=
>
n
=
=
=
Response
.
TYPE
)
(
type
)
;
let
resp
=
new
Response
(
msgID
)
;
resp
.
error
=
assert
.
string
(
err
)
;
resp
.
body
=
body
;
return
resp
;
}
}
Response
.
TYPE
=
1
;
