(
"
use
strict
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
MarionetteReftestParent
"
]
;
class
MarionetteReftestParent
extends
JSWindowActorParent
{
async
reftestWait
(
url
useRemote
)
{
try
{
const
isCorrectUrl
=
await
this
.
sendQuery
(
"
MarionetteReftestParent
:
reftestWait
"
{
url
useRemote
}
)
;
if
(
isCorrectUrl
)
{
await
this
.
_flushRenderingInSubtree
(
)
;
}
return
isCorrectUrl
;
}
catch
(
e
)
{
if
(
e
.
name
=
=
=
"
AbortError
"
)
{
return
false
;
}
throw
e
;
}
}
async
_flushRenderingInSubtree
(
)
{
const
browsingContext
=
this
.
manager
.
browsingContext
;
const
contexts
=
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
;
await
Promise
.
all
(
contexts
.
map
(
async
context
=
>
{
if
(
context
=
=
=
browsingContext
)
{
return
;
}
const
windowGlobal
=
context
.
currentWindowGlobal
;
if
(
!
windowGlobal
)
{
return
;
}
if
(
!
windowGlobal
.
isProcessRoot
)
{
return
;
}
const
reftestActor
=
windowGlobal
.
getActor
(
"
MarionetteReftest
"
)
;
await
reftestActor
.
sendQuery
(
"
MarionetteReftestParent
:
flushRendering
"
)
;
}
)
)
;
}
}
