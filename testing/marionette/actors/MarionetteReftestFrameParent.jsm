(
"
use
strict
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
MarionetteReftestFrameParent
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
chrome
:
/
/
marionette
/
content
/
log
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
class
MarionetteReftestFrameParent
extends
JSWindowActorParent
{
actorCreated
(
)
{
logger
.
trace
(
[
{
this
.
browsingContext
.
id
}
]
Reftest
Parent
actor
created
)
;
}
async
reftestWait
(
url
useRemote
)
{
try
{
const
isCorrectUrl
=
await
this
.
sendQuery
(
"
MarionetteReftestFrameParent
:
reftestWait
"
{
url
useRemote
}
)
;
return
isCorrectUrl
;
}
catch
(
e
)
{
if
(
e
.
name
=
=
=
"
AbortError
"
)
{
return
false
;
}
throw
e
;
}
}
}
