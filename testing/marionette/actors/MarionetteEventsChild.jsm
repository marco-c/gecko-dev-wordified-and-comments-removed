"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
MarionetteEventsChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
chrome
:
/
/
marionette
/
content
/
log
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
class
MarionetteEventsChild
extends
JSWindowActorChild
{
get
innerWindowId
(
)
{
return
this
.
manager
.
innerWindowId
;
}
actorCreated
(
)
{
logger
.
trace
(
[
{
this
.
browsingContext
.
id
}
]
MarionetteEvents
actor
created
+
for
window
id
{
this
.
innerWindowId
}
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
beforeunload
"
:
case
"
DOMContentLoaded
"
:
case
"
hashchange
"
:
case
"
pagehide
"
:
case
"
pageshow
"
:
case
"
popstate
"
:
this
.
sendAsyncMessage
(
"
MarionetteEventsChild
:
PageLoadEvent
"
{
browsingContext
:
this
.
browsingContext
documentURI
:
event
.
target
.
documentURI
readyState
:
event
.
target
.
readyState
type
:
event
.
type
}
)
;
break
;
}
}
}
