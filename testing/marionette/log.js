"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
StdLog
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
{
}
)
.
Log
;
const
{
MarionettePrefs
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
prefs
.
js
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Log
"
]
;
const
isChildProcess
=
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
;
class
MarionetteLog
{
static
get
(
)
{
let
logger
=
StdLog
.
repository
.
getLogger
(
"
Marionette
"
)
;
if
(
logger
.
ownAppenders
.
length
=
=
0
)
{
logger
.
addAppender
(
new
StdLog
.
DumpAppender
(
)
)
;
}
logger
.
level
=
MarionettePrefs
.
logLevel
;
return
logger
;
}
static
getWithPrefix
(
prefix
)
{
this
.
get
(
)
;
return
StdLog
.
repository
.
getLoggerWithMessagePrefix
(
"
Marionette
"
[
{
prefix
}
]
)
;
}
}
class
ParentProcessLog
extends
MarionetteLog
{
static
get
(
)
{
let
logger
=
super
.
get
(
)
;
Services
.
ppmm
.
initialProcessData
[
"
Marionette
:
Log
"
]
=
{
level
:
logger
.
level
}
;
return
logger
;
}
}
class
ChildProcessLog
extends
MarionetteLog
{
static
get
(
)
{
let
logger
=
super
.
get
(
)
;
logger
.
level
=
Services
.
cpmm
.
initialProcessData
[
"
Marionette
:
Log
"
]
|
|
StdLog
.
Level
.
Info
;
return
logger
;
}
}
if
(
isChildProcess
)
{
this
.
Log
=
ChildProcessLog
;
}
else
{
this
.
Log
=
ParentProcessLog
;
}
