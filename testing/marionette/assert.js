"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
assert
"
]
;
const
isFennec
=
(
)
=
>
AppConstants
.
platform
=
=
"
android
"
;
const
isB2G
=
(
)
=
>
AppConstants
.
MOZ_B2G
;
const
isFirefox
=
(
)
=
>
Services
.
appinfo
.
name
=
=
"
Firefox
"
;
this
.
assert
=
{
}
;
assert
.
firefox
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Expected
Firefox
"
;
assert
.
that
(
isFirefox
msg
UnsupportedOperationError
)
(
)
;
}
;
assert
.
fennec
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Expected
Fennec
"
;
assert
.
that
(
isFennec
msg
UnsupportedOperationError
)
(
)
;
}
;
assert
.
b2g
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Expected
B2G
"
assert
.
that
(
isB2G
msg
UnsupportedOperationError
)
(
)
;
}
;
assert
.
mobile
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Expected
Fennec
or
B2G
"
;
assert
.
that
(
(
)
=
>
isFennec
(
)
|
|
isB2G
(
)
msg
UnsupportedOperationError
)
(
)
;
}
;
assert
.
defined
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
defined
;
return
assert
.
that
(
o
=
>
typeof
o
!
=
"
undefined
"
msg
)
(
obj
)
;
}
;
assert
.
integer
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
an
integer
;
return
assert
.
that
(
Number
.
isInteger
msg
)
(
obj
)
;
}
;
assert
.
positiveInteger
=
function
(
obj
msg
=
"
"
)
{
assert
.
integer
(
obj
msg
)
;
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
>
=
0
;
return
assert
.
that
(
n
=
>
n
>
=
0
msg
)
(
obj
)
;
}
;
assert
.
boolean
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
boolean
;
return
assert
.
that
(
b
=
>
typeof
b
=
=
"
boolean
"
msg
)
(
obj
)
;
}
;
assert
.
string
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
a
string
;
return
assert
.
that
(
s
=
>
typeof
s
=
=
"
string
"
msg
)
(
obj
)
;
}
;
assert
.
object
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
an
object
;
return
assert
.
that
(
o
=
>
typeof
o
=
=
"
object
"
msg
)
(
obj
)
;
}
;
assert
.
array
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
error
.
pprint
Expected
{
obj
}
to
be
an
Array
;
return
assert
.
that
(
o
=
>
Array
.
isArray
(
o
)
msg
)
(
obj
)
;
}
;
assert
.
that
=
function
(
predicate
message
=
"
"
error
=
InvalidArgumentError
)
{
return
obj
=
>
{
if
(
!
predicate
(
obj
)
)
{
throw
new
error
(
message
)
;
}
return
obj
;
}
;
}
;
