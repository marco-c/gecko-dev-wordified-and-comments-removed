"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
accessibility
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
addon
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
assert
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
atom
.
js
"
)
;
const
{
browser
Context
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
browser
.
js
"
{
}
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
capture
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
cert
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
cookie
.
js
"
)
;
const
{
ChromeWebElement
element
WebElement
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
element
.
js
"
{
}
)
;
const
{
ElementNotInteractableError
InsecureCertificateError
InvalidArgumentError
InvalidCookieDomainError
InvalidSelectorError
NoAlertOpenError
NoSuchFrameError
NoSuchWindowError
SessionNotCreatedError
UnknownError
UnsupportedOperationError
WebDriverError
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
evaluate
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
event
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
interaction
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
l10n
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
legacyaction
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
modal
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
proxy
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
reftest
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
session
.
js
"
)
;
const
{
PollPromise
TimedPromise
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
{
}
)
;
const
{
WindowState
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
wm
.
js
"
{
}
)
;
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
GeckoDriver
"
]
;
const
APP_ID_FIREFOX
=
"
{
ec8030f7
-
c20a
-
464f
-
9b0e
-
13a3a9e97384
}
"
;
const
FRAME_SCRIPT
=
"
chrome
:
/
/
marionette
/
content
/
listener
.
js
"
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
CLICK_TO_START_PREF
=
"
marionette
.
debugging
.
clicktostart
"
;
const
CONTENT_LISTENER_PREF
=
"
marionette
.
contentListener
"
;
const
SUPPORTED_STRATEGIES
=
new
Set
(
[
element
.
Strategy
.
ClassName
element
.
Strategy
.
Selector
element
.
Strategy
.
ID
element
.
Strategy
.
TagName
element
.
Strategy
.
XPath
element
.
Strategy
.
Anon
element
.
Strategy
.
AnonAttribute
]
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
const
globalMessageManager
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageBroadcaster
)
;
function
*
enumeratorIterator
(
enumerator
)
{
while
(
enumerator
.
hasMoreElements
(
)
)
{
yield
enumerator
.
getNext
(
)
;
}
}
this
.
GeckoDriver
=
function
(
appId
server
)
{
this
.
appId
=
appId
;
this
.
_server
=
server
;
this
.
sessionID
=
null
;
this
.
wins
=
new
browser
.
Windows
(
)
;
this
.
browsers
=
{
}
;
this
.
curBrowser
=
null
;
this
.
mainFrame
=
null
;
this
.
curFrame
=
null
;
this
.
mozBrowserClose
=
null
;
this
.
currentFrameElement
=
null
;
this
.
oopFrameId
=
null
;
this
.
observing
=
null
;
this
.
_browserIds
=
new
WeakMap
(
)
;
this
.
context
=
Context
.
Content
;
this
.
sandboxes
=
new
Sandboxes
(
(
)
=
>
this
.
getCurrentWindow
(
)
)
;
this
.
legacyactions
=
new
legacyaction
.
Chain
(
)
;
this
.
timer
=
null
;
this
.
inactivityTimer
=
null
;
this
.
testName
=
null
;
this
.
capabilities
=
new
session
.
Capabilities
(
)
;
this
.
mm
=
globalMessageManager
;
this
.
listener
=
proxy
.
toListener
(
(
)
=
>
this
.
mm
this
.
sendAsync
.
bind
(
this
)
(
)
=
>
this
.
curBrowser
)
;
this
.
dialog
=
null
;
this
.
dialogHandler
=
this
.
globalModalDialogHandler
.
bind
(
this
)
;
}
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
a11yChecks
"
{
get
(
)
{
return
this
.
capabilities
.
get
(
"
moz
:
accessibilityChecks
"
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
currentURL
"
{
get
(
)
{
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
chromeWin
=
this
.
getCurrentWindow
(
)
;
return
new
URL
(
chromeWin
.
location
.
href
)
;
case
Context
.
Content
:
return
new
URL
(
this
.
curBrowser
.
currentURI
.
spec
)
;
default
:
throw
new
TypeError
(
Unknown
context
:
{
this
.
context
}
)
;
}
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
title
"
{
get
(
)
{
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
chromeWin
=
this
.
getCurrentWindow
(
)
;
return
chromeWin
.
document
.
documentElement
.
getAttribute
(
"
title
"
)
;
case
Context
.
Content
:
return
this
.
curBrowser
.
currentTitle
;
default
:
throw
new
TypeError
(
Unknown
context
:
{
this
.
context
}
)
;
}
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
proxy
"
{
get
(
)
{
return
this
.
capabilities
.
get
(
"
proxy
"
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
secureTLS
"
{
get
(
)
{
return
!
this
.
capabilities
.
get
(
"
acceptInsecureCerts
"
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
timeouts
"
{
get
(
)
{
return
this
.
capabilities
.
get
(
"
timeouts
"
)
;
}
set
(
newTimeouts
)
{
this
.
capabilities
.
set
(
"
timeouts
"
newTimeouts
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
windows
"
{
get
(
)
{
return
enumeratorIterator
(
Services
.
wm
.
getEnumerator
(
null
)
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
windowHandles
"
{
get
(
)
{
let
hs
=
[
]
;
for
(
let
win
of
this
.
windows
)
{
let
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
if
(
tabBrowser
&
&
tabBrowser
.
tabs
)
{
tabBrowser
.
tabs
.
forEach
(
tab
=
>
{
let
winId
=
this
.
getIdForBrowser
(
browser
.
getBrowserForTab
(
tab
)
)
;
if
(
winId
!
=
=
null
)
{
hs
.
push
(
winId
)
;
}
}
)
;
}
}
return
hs
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
chromeWindowHandles
"
{
get
(
)
{
let
hs
=
[
]
;
for
(
let
win
of
this
.
windows
)
{
hs
.
push
(
getOuterWindowId
(
win
)
)
;
}
return
hs
;
}
}
)
;
GeckoDriver
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIMessageListener
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
;
GeckoDriver
.
prototype
.
globalModalDialogHandler
=
function
(
subject
topic
)
{
let
winr
;
if
(
topic
=
=
=
modal
.
COMMON_DIALOG_LOADED
)
{
winr
=
Cu
.
getWeakReference
(
subject
)
;
}
this
.
dialog
=
new
modal
.
Dialog
(
(
)
=
>
this
.
curBrowser
winr
)
;
}
;
GeckoDriver
.
prototype
.
switchToGlobalMessageManager
=
function
(
)
{
if
(
this
.
curBrowser
&
&
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
!
=
=
null
)
{
this
.
curBrowser
.
frameManager
.
removeMessageManagerListeners
(
this
.
mm
)
;
this
.
sendAsync
(
"
sleepSession
"
)
;
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
=
null
;
}
this
.
mm
=
globalMessageManager
;
}
;
GeckoDriver
.
prototype
.
sendAsync
=
function
(
name
data
commandID
)
{
name
=
"
Marionette
:
"
+
name
;
let
payload
=
evaluate
.
toJSON
(
data
this
.
seenEls
)
;
if
(
commandID
)
{
payload
.
commandID
=
commandID
;
}
if
(
!
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
)
{
this
.
broadcastDelayedAsyncMessage_
(
name
payload
)
;
}
else
{
this
.
sendTargettedAsyncMessage_
(
name
payload
)
;
}
}
;
GeckoDriver
.
prototype
.
broadcastDelayedAsyncMessage_
=
function
(
name
payload
)
{
this
.
curBrowser
.
executeWhenReady
(
(
)
=
>
{
if
(
this
.
curBrowser
.
curFrameId
)
{
const
target
=
name
+
this
.
curBrowser
.
curFrameId
;
this
.
mm
.
broadcastAsyncMessage
(
target
payload
)
;
}
else
{
throw
new
NoSuchWindowError
(
"
No
such
content
frame
;
perhaps
the
listener
was
not
registered
?
"
)
;
}
}
)
;
}
;
GeckoDriver
.
prototype
.
sendTargettedAsyncMessage_
=
function
(
name
payload
)
{
const
curRemoteFrame
=
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
;
const
target
=
name
+
curRemoteFrame
.
targetFrameId
;
try
{
this
.
mm
.
sendAsyncMessage
(
target
payload
)
;
}
catch
(
e
)
{
switch
(
e
.
result
)
{
case
Cr
.
NS_ERROR_FAILURE
:
case
Cr
.
NS_ERROR_NOT_INITIALIZED
:
throw
new
NoSuchWindowError
(
)
;
default
:
throw
new
WebDriverError
(
e
)
;
}
}
}
;
GeckoDriver
.
prototype
.
getCurrentWindow
=
function
(
forcedContext
=
undefined
)
{
let
context
=
typeof
forcedContext
=
=
"
undefined
"
?
this
.
context
:
forcedContext
;
let
win
=
null
;
switch
(
context
)
{
case
Context
.
Chrome
:
if
(
this
.
curFrame
!
=
=
null
)
{
win
=
this
.
curFrame
;
}
else
if
(
this
.
curBrowser
!
=
=
null
)
{
win
=
this
.
curBrowser
.
window
;
}
break
;
case
Context
.
Content
:
if
(
this
.
curFrame
!
=
=
null
)
{
win
=
this
.
curFrame
;
}
else
if
(
this
.
curBrowser
!
=
=
null
&
&
this
.
curBrowser
.
contentBrowser
)
{
win
=
this
.
curBrowser
.
window
;
}
break
;
}
return
win
;
}
;
GeckoDriver
.
prototype
.
isReftestBrowser
=
function
(
element
)
{
return
this
.
_reftest
&
&
element
&
&
element
.
tagName
=
=
=
"
xul
:
browser
"
&
&
element
.
parentElement
&
&
element
.
parentElement
.
id
=
=
=
"
reftest
"
;
}
;
GeckoDriver
.
prototype
.
addFrameCloseListener
=
function
(
action
)
{
let
win
=
this
.
getCurrentWindow
(
)
;
this
.
mozBrowserClose
=
e
=
>
{
if
(
e
.
target
.
id
=
=
this
.
oopFrameId
)
{
win
.
removeEventListener
(
"
mozbrowserclose
"
this
.
mozBrowserClose
true
)
;
this
.
switchToGlobalMessageManager
(
)
;
throw
new
NoSuchWindowError
(
"
The
window
closed
during
action
:
"
+
action
)
;
}
}
;
win
.
addEventListener
(
"
mozbrowserclose
"
this
.
mozBrowserClose
true
)
;
}
;
GeckoDriver
.
prototype
.
addBrowser
=
function
(
window
)
{
let
bc
=
new
browser
.
Context
(
window
this
)
;
let
winId
=
getOuterWindowId
(
window
)
;
this
.
browsers
[
winId
]
=
bc
;
this
.
curBrowser
=
this
.
browsers
[
winId
]
;
if
(
!
this
.
wins
.
has
(
winId
)
)
{
this
.
wins
.
set
(
winId
window
)
;
}
}
;
GeckoDriver
.
prototype
.
startBrowser
=
function
(
window
isNewSession
=
false
)
{
this
.
mainFrame
=
window
;
this
.
curFrame
=
null
;
this
.
addBrowser
(
window
)
;
this
.
curBrowser
.
isNewSession
=
isNewSession
;
this
.
whenBrowserStarted
(
window
isNewSession
)
;
}
;
GeckoDriver
.
prototype
.
whenBrowserStarted
=
function
(
window
isNewSession
)
{
let
mm
=
window
.
messageManager
;
if
(
mm
)
{
if
(
!
isNewSession
)
{
if
(
mm
.
childCount
!
=
=
0
)
{
this
.
curBrowser
.
frameRegsPending
=
0
;
for
(
let
i
=
0
;
i
<
mm
.
childCount
;
i
+
+
)
{
if
(
mm
.
getChildAt
(
i
)
.
childCount
!
=
=
0
)
{
this
.
curBrowser
.
frameRegsPending
+
=
1
;
}
}
}
}
if
(
!
Preferences
.
get
(
CONTENT_LISTENER_PREF
)
|
|
!
isNewSession
)
{
mm
.
loadFrameScript
(
FRAME_SCRIPT
true
)
;
Preferences
.
set
(
CONTENT_LISTENER_PREF
true
)
;
}
}
else
{
logger
.
error
(
"
Unable
to
load
content
frame
script
"
)
;
}
}
;
GeckoDriver
.
prototype
.
getVisibleText
=
function
(
el
lines
)
{
try
{
if
(
atom
.
isElementDisplayed
(
el
this
.
getCurrentWindow
(
)
)
)
{
if
(
el
.
value
)
{
lines
.
push
(
el
.
value
)
;
}
for
(
let
child
in
el
.
childNodes
)
{
this
.
getVisibleText
(
el
.
childNodes
[
child
]
lines
)
;
}
}
}
catch
(
e
)
{
if
(
el
.
nodeName
=
=
"
#
text
"
)
{
lines
.
push
(
el
.
textContent
)
;
}
}
}
;
GeckoDriver
.
prototype
.
registerBrowser
=
function
(
id
be
)
{
let
nullPrevious
=
this
.
curBrowser
.
curFrameId
=
=
=
null
;
let
listenerWindow
=
Services
.
wm
.
getOuterWindowWithId
(
id
)
;
if
(
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
!
=
=
null
&
&
(
!
listenerWindow
|
|
this
.
mm
=
=
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
.
messageManager
.
get
(
)
)
)
{
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
.
targetFrameId
=
id
;
}
if
(
this
.
appId
!
=
APP_ID_FIREFOX
|
|
be
.
namespaceURI
!
=
XUL_NS
|
|
be
.
nodeName
!
=
"
browser
"
|
|
be
.
getTabBrowser
(
)
)
{
this
.
curBrowser
.
register
(
id
be
)
;
}
this
.
wins
.
set
(
id
listenerWindow
)
;
if
(
nullPrevious
&
&
(
this
.
curBrowser
.
curFrameId
!
=
=
null
)
)
{
this
.
sendAsync
(
"
newSession
"
this
.
capabilities
this
.
newSessionCommandId
)
;
if
(
this
.
curBrowser
.
isNewSession
)
{
this
.
newSessionCommandId
=
null
;
}
}
return
[
id
this
.
capabilities
.
toJSON
(
)
]
;
}
;
GeckoDriver
.
prototype
.
registerPromise
=
function
(
)
{
const
li
=
"
Marionette
:
register
"
;
return
new
Promise
(
resolve
=
>
{
let
cb
=
msg
=
>
{
let
wid
=
msg
.
json
.
value
;
let
be
=
msg
.
target
;
let
rv
=
this
.
registerBrowser
(
wid
be
)
;
if
(
this
.
curBrowser
.
frameRegsPending
>
0
)
{
this
.
curBrowser
.
frameRegsPending
-
-
;
}
if
(
this
.
curBrowser
.
frameRegsPending
=
=
=
0
)
{
this
.
mm
.
removeMessageListener
(
li
cb
)
;
resolve
(
)
;
}
return
rv
;
}
;
this
.
mm
.
addMessageListener
(
li
cb
)
;
}
)
;
}
;
GeckoDriver
.
prototype
.
listeningPromise
=
function
(
)
{
const
li
=
"
Marionette
:
listenersAttached
"
;
return
new
Promise
(
resolve
=
>
{
let
cb
=
msg
=
>
{
if
(
msg
.
json
.
listenerId
=
=
=
this
.
curBrowser
.
curFrameId
)
{
this
.
mm
.
removeMessageListener
(
li
cb
)
;
resolve
(
)
;
}
}
;
this
.
mm
.
addMessageListener
(
li
cb
)
;
}
)
;
}
;
GeckoDriver
.
prototype
.
newSession
=
async
function
(
cmd
)
{
if
(
this
.
sessionID
)
{
throw
new
SessionNotCreatedError
(
"
Maximum
number
of
active
sessions
"
)
;
}
this
.
sessionID
=
WebElement
.
generateUUID
(
)
;
this
.
newSessionCommandId
=
cmd
.
id
;
try
{
this
.
capabilities
=
session
.
Capabilities
.
fromJSON
(
cmd
.
parameters
)
;
if
(
!
this
.
secureTLS
)
{
logger
.
warn
(
"
TLS
certificate
errors
will
be
ignored
for
this
session
"
)
;
let
acceptAllCerts
=
new
cert
.
InsecureSweepingOverride
(
)
;
cert
.
installOverride
(
acceptAllCerts
)
;
}
if
(
this
.
proxy
.
init
(
)
)
{
logger
.
info
(
"
Proxy
settings
initialised
:
"
+
JSON
.
stringify
(
this
.
proxy
)
)
;
}
}
catch
(
e
)
{
throw
new
SessionNotCreatedError
(
e
)
;
}
if
(
this
.
a11yChecks
&
&
accessibility
.
service
)
{
logger
.
info
(
"
Preemptively
starting
accessibility
service
in
Chrome
"
)
;
}
let
registerBrowsers
=
this
.
registerPromise
(
)
;
let
browserListening
=
this
.
listeningPromise
(
)
;
let
waitForWindow
=
function
(
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
let
checkTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
checkTimer
.
initWithCallback
(
waitForWindow
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
else
if
(
win
.
document
.
readyState
!
=
"
complete
"
)
{
let
listener
=
ev
=
>
{
if
(
ev
.
target
!
=
win
.
document
)
{
return
;
}
win
.
removeEventListener
(
"
load
"
listener
)
;
waitForWindow
.
call
(
this
)
;
}
;
win
.
addEventListener
(
"
load
"
listener
true
)
;
}
else
{
let
clickToStart
=
Preferences
.
get
(
CLICK_TO_START_PREF
)
;
if
(
clickToStart
)
{
Services
.
prompt
.
alert
(
win
"
"
"
Click
to
start
execution
of
marionette
tests
"
)
;
}
this
.
startBrowser
(
win
true
)
;
}
}
;
if
(
!
Preferences
.
get
(
CONTENT_LISTENER_PREF
)
)
{
waitForWindow
.
call
(
this
)
;
}
else
if
(
this
.
appId
!
=
APP_ID_FIREFOX
&
&
this
.
curBrowser
=
=
=
null
)
{
let
win
=
this
.
getCurrentWindow
(
)
;
this
.
addBrowser
(
win
)
;
this
.
whenBrowserStarted
(
win
false
)
;
this
.
mm
.
broadcastAsyncMessage
(
"
Marionette
:
restart
"
{
}
)
;
}
else
{
throw
new
WebDriverError
(
"
Session
already
running
"
)
;
}
this
.
switchToGlobalMessageManager
(
)
;
await
registerBrowsers
;
await
browserListening
;
if
(
this
.
curBrowser
.
tab
)
{
this
.
curBrowser
.
contentBrowser
.
focus
(
)
;
}
modal
.
addHandler
(
this
.
dialogHandler
)
;
this
.
dialog
=
modal
.
findModalDialogs
(
this
.
curBrowser
)
;
return
{
sessionId
:
this
.
sessionID
capabilities
:
this
.
capabilities
}
;
}
;
GeckoDriver
.
prototype
.
getSessionCapabilities
=
function
(
cmd
resp
)
{
resp
.
body
.
capabilities
=
this
.
capabilities
;
}
;
GeckoDriver
.
prototype
.
setContext
=
function
(
cmd
)
{
let
value
=
assert
.
string
(
cmd
.
parameters
.
value
)
;
this
.
context
=
Context
.
fromString
(
value
)
;
}
;
GeckoDriver
.
prototype
.
getContext
=
function
(
)
{
return
this
.
context
;
}
;
GeckoDriver
.
prototype
.
executeScript
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
{
script
args
scriptTimeout
}
=
cmd
.
parameters
;
scriptTimeout
=
scriptTimeout
|
|
this
.
timeouts
.
script
;
let
opts
=
{
sandboxName
:
cmd
.
parameters
.
sandbox
newSandbox
:
!
!
(
typeof
cmd
.
parameters
.
newSandbox
=
=
"
undefined
"
)
|
|
cmd
.
parameters
.
newSandbox
file
:
cmd
.
parameters
.
filename
line
:
cmd
.
parameters
.
line
debug
:
cmd
.
parameters
.
debug_script
}
;
resp
.
body
.
value
=
await
this
.
execute_
(
script
args
scriptTimeout
opts
)
;
}
;
GeckoDriver
.
prototype
.
executeAsyncScript
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
{
script
args
scriptTimeout
}
=
cmd
.
parameters
;
scriptTimeout
=
scriptTimeout
|
|
this
.
timeouts
.
script
;
let
opts
=
{
sandboxName
:
cmd
.
parameters
.
sandbox
newSandbox
:
!
!
(
typeof
cmd
.
parameters
.
newSandbox
=
=
"
undefined
"
)
|
|
cmd
.
parameters
.
newSandbox
file
:
cmd
.
parameters
.
filename
line
:
cmd
.
parameters
.
line
debug
:
cmd
.
parameters
.
debug_script
async
:
true
}
;
resp
.
body
.
value
=
await
this
.
execute_
(
script
args
scriptTimeout
opts
)
;
}
;
GeckoDriver
.
prototype
.
execute_
=
async
function
(
script
args
timeout
opts
=
{
}
)
{
let
res
els
;
switch
(
this
.
context
)
{
case
Context
.
Content
:
if
(
!
opts
.
sandboxName
)
{
res
=
await
this
.
listener
.
execute
(
script
args
timeout
opts
)
;
}
else
{
res
=
await
this
.
listener
.
executeInSandbox
(
script
args
timeout
opts
)
;
}
break
;
case
Context
.
Chrome
:
let
sb
=
this
.
sandboxes
.
get
(
opts
.
sandboxName
opts
.
newSandbox
)
;
opts
.
timeout
=
timeout
;
let
wargs
=
evaluate
.
fromJSON
(
args
this
.
curBrowser
.
seenEls
sb
.
window
)
;
res
=
await
evaluate
.
sandbox
(
sb
script
wargs
opts
)
;
els
=
this
.
curBrowser
.
seenEls
;
break
;
default
:
throw
new
TypeError
(
Unknown
context
:
{
this
.
context
}
)
;
}
return
evaluate
.
toJSON
(
res
els
)
;
}
;
GeckoDriver
.
prototype
.
get
=
async
function
(
cmd
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
url
=
cmd
.
parameters
.
url
;
let
get
=
this
.
listener
.
get
(
{
url
pageTimeout
:
this
.
timeouts
.
pageLoad
}
)
;
this
.
curBrowser
.
pendingCommands
.
push
(
(
)
=
>
{
let
parameters
=
{
commandID
:
this
.
listener
.
activeMessageId
pageTimeout
:
this
.
timeouts
.
pageLoad
startTime
:
new
Date
(
)
.
getTime
(
)
}
;
this
.
mm
.
broadcastAsyncMessage
(
"
Marionette
:
waitForPageLoaded
"
+
this
.
curBrowser
.
curFrameId
parameters
)
;
}
)
;
await
get
;
this
.
curBrowser
.
contentBrowser
.
focus
(
)
;
}
;
GeckoDriver
.
prototype
.
getCurrentUrl
=
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
return
this
.
currentURL
.
toString
(
)
;
}
;
GeckoDriver
.
prototype
.
getTitle
=
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
return
this
.
title
;
}
;
GeckoDriver
.
prototype
.
getWindowType
=
function
(
cmd
resp
)
{
let
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
resp
.
body
.
value
=
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
}
;
GeckoDriver
.
prototype
.
getPageSource
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
s
=
new
win
.
XMLSerializer
(
)
;
resp
.
body
.
value
=
s
.
serializeToString
(
win
.
document
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getPageSource
(
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
goBack
=
async
function
(
)
{
assert
.
content
(
this
.
context
)
;
assert
.
contentBrowser
(
this
.
curBrowser
)
;
this
.
_assertAndDismissModal
(
)
;
if
(
!
this
.
curBrowser
.
contentBrowser
.
webNavigation
.
canGoBack
)
{
return
;
}
let
lastURL
=
this
.
currentURL
;
let
goBack
=
this
.
listener
.
goBack
(
{
pageTimeout
:
this
.
timeouts
.
pageLoad
}
)
;
this
.
curBrowser
.
pendingCommands
.
push
(
(
)
=
>
{
let
parameters
=
{
commandID
:
this
.
listener
.
activeMessageId
lastSeenURL
:
lastURL
.
toString
(
)
pageTimeout
:
this
.
timeouts
.
pageLoad
startTime
:
new
Date
(
)
.
getTime
(
)
}
;
this
.
mm
.
broadcastAsyncMessage
(
"
Marionette
:
waitForPageLoaded
"
+
this
.
curBrowser
.
curFrameId
parameters
)
;
}
)
;
await
goBack
;
}
;
GeckoDriver
.
prototype
.
goForward
=
async
function
(
)
{
assert
.
content
(
this
.
context
)
;
assert
.
contentBrowser
(
this
.
curBrowser
)
;
this
.
_assertAndDismissModal
(
)
;
if
(
!
this
.
curBrowser
.
contentBrowser
.
webNavigation
.
canGoForward
)
{
return
;
}
let
lastURL
=
this
.
currentURL
;
let
goForward
=
this
.
listener
.
goForward
(
{
pageTimeout
:
this
.
timeouts
.
pageLoad
}
)
;
this
.
curBrowser
.
pendingCommands
.
push
(
(
)
=
>
{
let
parameters
=
{
commandID
:
this
.
listener
.
activeMessageId
lastSeenURL
:
lastURL
.
toString
(
)
pageTimeout
:
this
.
timeouts
.
pageLoad
startTime
:
new
Date
(
)
.
getTime
(
)
}
;
this
.
mm
.
broadcastAsyncMessage
(
"
Marionette
:
waitForPageLoaded
"
+
this
.
curBrowser
.
curFrameId
parameters
)
;
}
)
;
await
goForward
;
}
;
GeckoDriver
.
prototype
.
refresh
=
async
function
(
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
refresh
=
this
.
listener
.
refresh
(
{
pageTimeout
:
this
.
timeouts
.
pageLoad
}
)
;
this
.
curBrowser
.
pendingCommands
.
push
(
(
)
=
>
{
let
parameters
=
{
commandID
:
this
.
listener
.
activeMessageId
pageTimeout
:
this
.
timeouts
.
pageLoad
startTime
:
new
Date
(
)
.
getTime
(
)
}
;
this
.
mm
.
broadcastAsyncMessage
(
"
Marionette
:
waitForPageLoaded
"
+
this
.
curBrowser
.
curFrameId
parameters
)
;
}
)
;
await
refresh
;
}
;
GeckoDriver
.
prototype
.
updateIdForBrowser
=
function
(
browser
newId
)
{
this
.
_browserIds
.
set
(
browser
.
permanentKey
newId
)
;
}
;
GeckoDriver
.
prototype
.
getIdForBrowser
=
function
(
browser
)
{
if
(
browser
=
=
=
null
)
{
return
null
;
}
let
permKey
=
browser
.
permanentKey
;
if
(
this
.
_browserIds
.
has
(
permKey
)
)
{
return
this
.
_browserIds
.
get
(
permKey
)
;
}
let
winId
=
browser
.
outerWindowID
;
if
(
winId
)
{
this
.
_browserIds
.
set
(
permKey
winId
)
;
return
winId
;
}
return
null
;
}
GeckoDriver
.
prototype
.
getWindowHandle
=
function
(
)
{
assert
.
contentBrowser
(
this
.
curBrowser
)
;
return
this
.
curBrowser
.
curFrameId
.
toString
(
)
;
}
;
GeckoDriver
.
prototype
.
getWindowHandles
=
function
(
)
{
return
this
.
windowHandles
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
getChromeWindowHandle
=
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
Context
.
Chrome
)
)
;
for
(
let
i
in
this
.
browsers
)
{
if
(
this
.
curBrowser
=
=
this
.
browsers
[
i
]
)
{
resp
.
body
.
value
=
i
;
return
;
}
}
}
;
GeckoDriver
.
prototype
.
getChromeWindowHandles
=
function
(
)
{
return
this
.
chromeWindowHandles
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
getWindowRect
=
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
setWindowRect
=
async
function
(
cmd
)
{
assert
.
firefox
(
)
;
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
x
y
width
height
}
=
cmd
.
parameters
;
let
origRect
=
this
.
curBrowser
.
rect
;
async
function
resizeWindow
(
width
height
)
{
return
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
resize
"
whenIdle
(
win
resolve
)
{
once
:
true
}
)
;
win
.
resizeTo
(
width
height
)
;
}
)
;
}
const
windowResizeChange
=
async
(
)
=
>
{
return
new
PollPromise
(
(
resolve
reject
)
=
>
{
let
curRect
=
this
.
curBrowser
.
rect
;
if
(
curRect
.
width
!
=
origRect
.
width
&
&
curRect
.
height
!
=
origRect
.
height
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
;
async
function
windowPosition
(
x
y
)
{
return
new
PollPromise
(
(
resolve
reject
)
=
>
{
if
(
(
x
=
=
win
.
screenX
&
&
y
=
=
win
.
screenY
)
|
|
(
win
.
screenX
!
=
origRect
.
x
|
|
win
.
screenY
!
=
origRect
.
y
)
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
switch
(
WindowState
.
from
(
win
.
windowState
)
)
{
case
WindowState
.
Fullscreen
:
await
exitFullscreen
(
win
)
;
break
;
case
WindowState
.
Minimized
:
await
restoreWindow
(
win
this
.
curBrowser
.
eventObserver
)
;
break
;
}
if
(
height
!
=
null
&
&
width
!
=
null
)
{
assert
.
positiveInteger
(
height
)
;
assert
.
positiveInteger
(
width
)
;
if
(
win
.
outerWidth
!
=
width
|
|
win
.
outerHeight
!
=
height
)
{
await
resizeWindow
(
width
height
)
;
await
windowResizeChange
(
)
;
}
}
if
(
x
!
=
null
&
&
y
!
=
null
)
{
assert
.
integer
(
x
)
;
assert
.
integer
(
y
)
;
win
.
moveTo
(
x
y
)
;
await
windowPosition
(
x
y
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
switchToWindow
=
async
function
(
cmd
)
{
let
focus
=
true
;
if
(
typeof
cmd
.
parameters
.
focus
!
=
"
undefined
"
)
{
focus
=
cmd
.
parameters
.
focus
;
}
let
switchTo
=
parseInt
(
cmd
.
parameters
.
name
)
;
if
(
isNaN
(
switchTo
)
)
{
switchTo
=
cmd
.
parameters
.
name
;
}
let
byNameOrId
=
function
(
win
windowId
)
{
return
switchTo
=
=
=
win
.
name
|
|
switchTo
=
=
=
windowId
;
}
;
let
found
=
this
.
findWindow
(
this
.
windows
byNameOrId
)
;
if
(
found
)
{
await
this
.
setWindowHandle
(
found
focus
)
;
}
else
{
throw
new
NoSuchWindowError
(
Unable
to
locate
window
:
{
switchTo
}
)
;
}
}
;
GeckoDriver
.
prototype
.
findWindow
=
function
(
winIterable
filter
)
{
for
(
let
win
of
winIterable
)
{
let
outerId
=
getOuterWindowId
(
win
)
;
let
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
if
(
filter
(
win
outerId
)
)
{
return
{
win
outerId
hasTabBrowser
:
!
!
tabBrowser
}
;
}
else
if
(
tabBrowser
&
&
tabBrowser
.
tabs
)
{
for
(
let
i
=
0
;
i
<
tabBrowser
.
tabs
.
length
;
+
+
i
)
{
let
contentBrowser
=
browser
.
getBrowserForTab
(
tabBrowser
.
tabs
[
i
]
)
;
let
contentWindowId
=
this
.
getIdForBrowser
(
contentBrowser
)
;
if
(
filter
(
win
contentWindowId
)
)
{
return
{
win
outerId
hasTabBrowser
:
true
tabIndex
:
i
}
;
}
}
}
}
return
null
;
}
;
GeckoDriver
.
prototype
.
setWindowHandle
=
async
function
(
winProperties
focus
=
true
)
{
if
(
!
(
winProperties
.
outerId
in
this
.
browsers
)
)
{
let
registerBrowsers
browserListening
;
if
(
winProperties
.
hasTabBrowser
)
{
registerBrowsers
=
this
.
registerPromise
(
)
;
browserListening
=
this
.
listeningPromise
(
)
;
}
this
.
startBrowser
(
winProperties
.
win
false
)
;
if
(
registerBrowsers
&
&
browserListening
)
{
await
registerBrowsers
;
await
browserListening
;
}
}
else
{
this
.
curBrowser
=
this
.
browsers
[
winProperties
.
outerId
]
;
if
(
"
tabIndex
"
in
winProperties
)
{
this
.
curBrowser
.
switchToTab
(
winProperties
.
tabIndex
winProperties
.
win
focus
)
;
}
}
}
;
GeckoDriver
.
prototype
.
getActiveFrame
=
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
resp
.
body
.
value
=
null
;
if
(
this
.
curFrame
)
{
resp
.
body
.
value
=
this
.
curBrowser
.
seenEls
.
add
(
this
.
curFrame
.
frameElement
)
;
}
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
null
;
if
(
this
.
currentFrameElement
!
=
=
null
)
{
resp
.
body
.
value
=
this
.
currentFrameElement
;
}
break
;
}
}
;
GeckoDriver
.
prototype
.
switchToParentFrame
=
async
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
await
this
.
listener
.
switchToParentFrame
(
)
;
}
;
GeckoDriver
.
prototype
.
switchToFrame
=
async
function
(
cmd
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
id
focus
}
=
cmd
.
parameters
;
let
byFrame
;
if
(
typeof
cmd
.
parameters
.
element
=
=
"
string
"
)
{
byFrame
=
WebElement
.
fromUUID
(
cmd
.
parameters
.
element
Context
.
Chrome
)
;
}
else
if
(
cmd
.
parameters
.
element
)
{
byFrame
=
WebElement
.
fromJSON
(
cmd
.
parameters
.
element
)
;
}
const
otherErrorsExpr
=
/
about
:
.
+
(
error
)
|
(
blocked
)
\
?
/
;
const
checkTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
let
curWindow
=
this
.
getCurrentWindow
(
)
;
let
checkLoad
=
function
(
)
{
let
win
=
this
.
getCurrentWindow
(
)
;
if
(
win
.
document
.
readyState
=
=
"
complete
"
)
{
return
;
}
else
if
(
win
.
document
.
readyState
=
=
"
interactive
"
)
{
let
documentURI
=
win
.
document
.
documentURI
;
if
(
documentURI
.
startsWith
(
"
about
:
certerror
"
)
)
{
throw
new
InsecureCertificateError
(
)
;
}
else
if
(
otherErrorsExpr
.
exec
(
documentURI
)
)
{
throw
new
UnknownError
(
"
Reached
error
page
:
"
+
documentURI
)
;
}
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
;
if
(
this
.
context
=
=
Context
.
Chrome
)
{
let
foundFrame
=
null
;
if
(
typeof
id
=
=
"
undefined
"
&
&
!
byFrame
)
{
this
.
curFrame
=
null
;
if
(
focus
)
{
this
.
mainFrame
.
focus
(
)
;
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
return
;
}
if
(
byFrame
)
{
let
wantedFrame
=
this
.
curBrowser
.
seenEls
.
get
(
byFrame
)
;
if
(
wantedFrame
.
tagName
=
=
"
xul
:
browser
"
|
|
wantedFrame
.
tagName
=
=
"
browser
"
)
{
curWindow
=
wantedFrame
.
contentWindow
;
this
.
curFrame
=
curWindow
;
if
(
focus
)
{
this
.
curFrame
.
focus
(
)
;
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
return
;
}
let
parent
=
curWindow
.
document
.
getBindingParent
(
wantedFrame
)
;
if
(
parent
&
&
!
(
parent
.
shadowRoot
&
&
parent
.
shadowRoot
.
contains
(
wantedFrame
)
)
)
{
const
doc
=
curWindow
.
document
;
let
anonNodes
=
[
.
.
.
doc
.
getAnonymousNodes
(
parent
)
|
|
[
]
]
;
if
(
anonNodes
.
length
>
0
)
{
let
el
=
wantedFrame
;
while
(
el
)
{
if
(
anonNodes
.
indexOf
(
el
)
>
-
1
)
{
curWindow
=
wantedFrame
.
contentWindow
;
this
.
curFrame
=
curWindow
;
if
(
focus
)
{
this
.
curFrame
.
focus
(
)
;
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
return
;
}
el
=
el
.
parentNode
;
}
}
}
let
frames
=
curWindow
.
document
.
getElementsByTagName
(
"
iframe
"
)
;
let
numFrames
=
frames
.
length
;
for
(
let
i
=
0
;
i
<
numFrames
;
i
+
+
)
{
let
wrappedEl
=
new
XPCNativeWrapper
(
frames
[
i
]
)
;
let
wrappedWanted
=
new
XPCNativeWrapper
(
wantedFrame
)
;
if
(
wrappedEl
=
=
wrappedWanted
)
{
curWindow
=
frames
[
i
]
.
contentWindow
;
this
.
curFrame
=
curWindow
;
if
(
focus
)
{
this
.
curFrame
.
focus
(
)
;
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
return
;
}
}
}
switch
(
typeof
id
)
{
case
"
string
"
:
let
foundById
=
null
;
let
frames
=
curWindow
.
document
.
getElementsByTagName
(
"
iframe
"
)
;
let
numFrames
=
frames
.
length
;
for
(
let
i
=
0
;
i
<
numFrames
;
i
+
+
)
{
let
frame
=
frames
[
i
]
;
if
(
frame
.
getAttribute
(
"
name
"
)
=
=
id
)
{
foundFrame
=
i
;
curWindow
=
frame
.
contentWindow
;
break
;
}
else
if
(
foundById
=
=
=
null
&
&
frame
.
id
=
=
id
)
{
foundById
=
i
;
}
}
if
(
foundFrame
=
=
=
null
&
&
foundById
!
=
=
null
)
{
foundFrame
=
foundById
;
curWindow
=
frames
[
foundById
]
.
contentWindow
;
}
break
;
case
"
number
"
:
if
(
typeof
curWindow
.
frames
[
id
]
!
=
"
undefined
"
)
{
foundFrame
=
id
;
let
frameEl
=
curWindow
.
frames
[
foundFrame
]
.
frameElement
;
curWindow
=
frameEl
.
contentWindow
;
}
break
;
}
if
(
foundFrame
!
=
=
null
)
{
this
.
curFrame
=
curWindow
;
if
(
focus
)
{
this
.
curFrame
.
focus
(
)
;
}
checkTimer
.
initWithCallback
(
checkLoad
.
bind
(
this
)
100
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
else
{
throw
new
NoSuchFrameError
(
Unable
to
locate
frame
:
{
id
}
)
;
}
}
else
if
(
this
.
context
=
=
Context
.
Content
)
{
if
(
!
id
&
&
!
byFrame
&
&
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
!
=
=
null
)
{
this
.
switchToGlobalMessageManager
(
)
;
}
cmd
.
commandID
=
cmd
.
id
;
let
res
=
await
this
.
listener
.
switchToFrame
(
cmd
.
parameters
)
;
if
(
res
)
{
let
{
win
:
winId
frame
:
frameId
}
=
res
;
this
.
mm
=
this
.
curBrowser
.
frameManager
.
getFrameMM
(
winId
frameId
)
;
let
registerBrowsers
=
this
.
registerPromise
(
)
;
let
browserListening
=
this
.
listeningPromise
(
)
;
this
.
oopFrameId
=
this
.
curBrowser
.
frameManager
.
switchToFrame
(
winId
frameId
)
;
await
registerBrowsers
;
await
browserListening
;
}
}
}
;
GeckoDriver
.
prototype
.
getTimeouts
=
function
(
)
{
return
this
.
timeouts
;
}
;
GeckoDriver
.
prototype
.
setTimeouts
=
function
(
cmd
)
{
let
merged
=
Object
.
assign
(
this
.
timeouts
.
toJSON
(
)
cmd
.
parameters
)
;
this
.
timeouts
=
session
.
Timeouts
.
fromJSON
(
merged
)
;
}
;
GeckoDriver
.
prototype
.
singleTap
=
async
function
(
cmd
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
{
id
x
y
}
=
cmd
.
parameters
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
throw
new
UnsupportedOperationError
(
"
Command
'
singleTap
'
is
not
yet
available
in
chrome
context
"
)
;
case
Context
.
Content
:
this
.
addFrameCloseListener
(
"
tap
"
)
;
await
this
.
listener
.
singleTap
(
webEl
x
y
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
performActions
=
async
function
(
cmd
)
{
assert
.
content
(
this
.
context
"
Command
'
performActions
'
is
not
yet
available
in
chrome
context
"
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
actions
=
cmd
.
parameters
.
actions
;
await
this
.
listener
.
performActions
(
{
"
actions
"
:
actions
}
)
;
}
;
GeckoDriver
.
prototype
.
releaseActions
=
async
function
(
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
await
this
.
listener
.
releaseActions
(
)
;
}
;
GeckoDriver
.
prototype
.
actionChain
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
chain
nextId
}
=
cmd
.
parameters
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
assert
.
firefox
(
)
;
resp
.
body
.
value
=
await
this
.
legacyactions
.
dispatchActions
(
chain
nextId
{
frame
:
win
}
this
.
curBrowser
.
seenEls
)
;
break
;
case
Context
.
Content
:
this
.
addFrameCloseListener
(
"
action
chain
"
)
;
resp
.
body
.
value
=
await
this
.
listener
.
actionChain
(
chain
nextId
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
multiAction
=
async
function
(
cmd
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
value
max_length
}
=
cmd
.
parameters
;
this
.
addFrameCloseListener
(
"
multi
action
chain
"
)
;
await
this
.
listener
.
multiAction
(
value
max_length
)
;
}
;
GeckoDriver
.
prototype
.
findElement
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
using
value
}
=
cmd
.
parameters
;
let
startNode
;
if
(
typeof
cmd
.
parameters
.
element
!
=
"
undefined
"
)
{
startNode
=
WebElement
.
fromUUID
(
cmd
.
parameters
.
element
this
.
context
)
;
}
let
opts
=
{
startNode
timeout
:
this
.
timeouts
.
implicit
all
:
false
}
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
if
(
!
SUPPORTED_STRATEGIES
.
has
(
using
)
)
{
throw
new
InvalidSelectorError
(
Strategy
not
supported
:
{
using
}
)
;
}
let
container
=
{
frame
:
win
}
;
if
(
opts
.
startNode
)
{
opts
.
startNode
=
this
.
curBrowser
.
seenEls
.
get
(
opts
.
startNode
)
;
}
let
el
=
await
element
.
find
(
container
using
value
opts
)
;
let
webEl
=
this
.
curBrowser
.
seenEls
.
add
(
el
)
;
resp
.
body
.
value
=
webEl
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
findElementContent
(
using
value
opts
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
findElements
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
{
using
value
}
=
cmd
.
parameters
;
let
startNode
;
if
(
typeof
cmd
.
parameters
.
element
!
=
"
undefined
"
)
{
startNode
=
WebElement
.
fromUUID
(
cmd
.
parameters
.
element
this
.
context
)
;
}
let
opts
=
{
startNode
timeout
:
this
.
timeouts
.
implicit
all
:
true
}
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
if
(
!
SUPPORTED_STRATEGIES
.
has
(
using
)
)
{
throw
new
InvalidSelectorError
(
Strategy
not
supported
:
{
using
}
)
;
}
let
container
=
{
frame
:
win
}
;
if
(
startNode
)
{
opts
.
startNode
=
this
.
curBrowser
.
seenEls
.
get
(
opts
.
startNode
)
;
}
let
els
=
await
element
.
find
(
container
using
value
opts
)
;
let
webEls
=
this
.
curBrowser
.
seenEls
.
addAll
(
els
)
;
resp
.
body
=
webEls
;
break
;
case
Context
.
Content
:
resp
.
body
=
await
this
.
listener
.
findElementsContent
(
using
value
opts
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getActiveElement
=
async
function
(
cmd
resp
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
resp
.
body
.
value
=
await
this
.
listener
.
getActiveElement
(
)
;
}
;
GeckoDriver
.
prototype
.
clickElement
=
async
function
(
cmd
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
await
interaction
.
clickElement
(
el
this
.
a11yChecks
)
;
break
;
case
Context
.
Content
:
this
.
addFrameCloseListener
(
"
click
"
)
;
let
click
=
this
.
listener
.
clickElement
(
{
webElRef
:
webEl
.
toJSON
(
)
pageTimeout
:
this
.
timeouts
.
pageLoad
}
)
;
this
.
curBrowser
.
pendingCommands
.
push
(
(
)
=
>
{
let
parameters
=
{
commandID
:
this
.
listener
.
activeMessageId
pageTimeout
:
this
.
timeouts
.
pageLoad
startTime
:
new
Date
(
)
.
getTime
(
)
}
;
this
.
mm
.
broadcastAsyncMessage
(
Marionette
:
waitForPageLoaded
{
this
.
curBrowser
.
curFrameId
}
parameters
)
;
}
)
;
await
click
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementAttribute
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
name
=
assert
.
string
(
cmd
.
parameters
.
name
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
el
.
getAttribute
(
name
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getElementAttribute
(
webEl
name
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementProperty
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
name
=
assert
.
string
(
cmd
.
parameters
.
name
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
el
[
name
]
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getElementProperty
(
webEl
name
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementText
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
let
lines
=
[
]
;
this
.
getVisibleText
(
el
lines
)
;
resp
.
body
.
value
=
lines
.
join
(
"
\
n
"
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getElementText
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementTagName
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
el
.
tagName
.
toLowerCase
(
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getElementTagName
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
isElementDisplayed
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
await
interaction
.
isElementDisplayed
(
el
this
.
a11yChecks
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
isElementDisplayed
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementValueOfCssProperty
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
prop
=
assert
.
string
(
cmd
.
parameters
.
propertyName
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
let
sty
=
win
.
document
.
defaultView
.
getComputedStyle
(
el
)
;
resp
.
body
.
value
=
sty
.
getPropertyValue
(
prop
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
getElementValueOfCssProperty
(
webEl
prop
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
isElementEnabled
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
await
interaction
.
isElementEnabled
(
el
this
.
a11yChecks
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
isElementEnabled
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
isElementSelected
=
async
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
resp
.
body
.
value
=
await
interaction
.
isElementSelected
(
el
this
.
a11yChecks
)
;
break
;
case
Context
.
Content
:
resp
.
body
.
value
=
await
this
.
listener
.
isElementSelected
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getElementRect
=
async
function
(
cmd
resp
)
{
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
let
rect
=
el
.
getBoundingClientRect
(
)
;
resp
.
body
=
{
x
:
rect
.
x
+
win
.
pageXOffset
y
:
rect
.
y
+
win
.
pageYOffset
width
:
rect
.
width
height
:
rect
.
height
}
;
break
;
case
Context
.
Content
:
resp
.
body
=
await
this
.
listener
.
getElementRect
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
sendKeysToElement
=
async
function
(
cmd
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
text
=
assert
.
string
(
cmd
.
parameters
.
text
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
await
interaction
.
sendKeysToElement
(
el
text
true
this
.
a11yChecks
)
;
break
;
case
Context
.
Content
:
await
this
.
listener
.
sendKeysToElement
(
webEl
text
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
clearElement
=
async
function
(
cmd
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
el
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
if
(
el
.
nodeName
=
=
"
textbox
"
)
{
el
.
value
=
"
"
;
}
else
if
(
el
.
nodeName
=
=
"
checkbox
"
)
{
el
.
checked
=
false
;
}
break
;
case
Context
.
Content
:
await
this
.
listener
.
clearElement
(
webEl
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
switchToShadowRoot
=
async
function
(
cmd
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
id
=
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
WebElement
.
fromUUID
(
id
this
.
context
)
;
await
this
.
listener
.
switchToShadowRoot
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
addCookie
=
function
(
cmd
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
protocol
hostname
}
=
this
.
currentURL
;
const
networkSchemes
=
[
"
ftp
:
"
"
http
:
"
"
https
:
"
]
;
if
(
!
networkSchemes
.
includes
(
protocol
)
)
{
throw
new
InvalidCookieDomainError
(
"
Document
is
cookie
-
averse
"
)
;
}
let
newCookie
=
cookie
.
fromJSON
(
cmd
.
parameters
.
cookie
)
;
cookie
.
add
(
newCookie
{
restrictToHost
:
hostname
}
)
;
}
;
GeckoDriver
.
prototype
.
getCookies
=
function
(
cmd
resp
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
hostname
pathname
}
=
this
.
currentURL
;
resp
.
body
=
[
.
.
.
cookie
.
iter
(
hostname
pathname
)
]
;
}
;
GeckoDriver
.
prototype
.
deleteAllCookies
=
function
(
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
hostname
pathname
}
=
this
.
currentURL
;
for
(
let
toDelete
of
cookie
.
iter
(
hostname
pathname
)
)
{
cookie
.
remove
(
toDelete
)
;
}
}
;
GeckoDriver
.
prototype
.
deleteCookie
=
function
(
cmd
)
{
assert
.
content
(
this
.
context
)
;
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
let
{
hostname
pathname
}
=
this
.
currentURL
;
let
name
=
assert
.
string
(
cmd
.
parameters
.
name
)
;
for
(
let
c
of
cookie
.
iter
(
hostname
pathname
)
)
{
if
(
c
.
name
=
=
=
name
)
{
cookie
.
remove
(
c
)
;
}
}
}
;
GeckoDriver
.
prototype
.
close
=
async
function
(
)
{
assert
.
contentBrowser
(
this
.
curBrowser
)
;
this
.
_assertAndDismissModal
(
)
;
let
nwins
=
0
;
for
(
let
win
of
this
.
windows
)
{
let
tabbrowser
=
browser
.
getTabBrowser
(
win
)
;
if
(
tabbrowser
&
&
tabbrowser
.
tabs
)
{
nwins
+
=
tabbrowser
.
tabs
.
length
;
}
else
{
nwins
+
=
1
;
}
}
if
(
nwins
=
=
=
1
)
{
return
[
]
;
}
if
(
this
.
mm
!
=
globalMessageManager
)
{
this
.
mm
.
removeDelayedFrameScript
(
FRAME_SCRIPT
)
;
}
await
this
.
curBrowser
.
closeTab
(
)
;
return
this
.
windowHandles
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
closeChromeWindow
=
async
function
(
)
{
assert
.
firefox
(
)
;
assert
.
window
(
this
.
getCurrentWindow
(
Context
.
Chrome
)
)
;
let
nwins
=
0
;
for
(
let
_
of
this
.
windows
)
{
nwins
+
+
;
}
if
(
nwins
=
=
1
)
{
return
[
]
;
}
this
.
curFrame
=
null
;
if
(
this
.
mm
!
=
globalMessageManager
)
{
this
.
mm
.
removeDelayedFrameScript
(
FRAME_SCRIPT
)
;
}
await
this
.
curBrowser
.
closeWindow
(
)
;
return
this
.
chromeWindowHandles
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
deleteSession
=
function
(
)
{
if
(
this
.
curBrowser
!
=
=
null
)
{
Preferences
.
set
(
CONTENT_LISTENER_PREF
false
)
;
for
(
let
win
in
this
.
browsers
)
{
let
browser
=
this
.
browsers
[
win
]
;
for
(
let
i
in
browser
.
knownFrames
)
{
globalMessageManager
.
broadcastAsyncMessage
(
"
Marionette
:
deleteSession
"
+
browser
.
knownFrames
[
i
]
{
}
)
;
}
}
for
(
let
win
of
this
.
windows
)
{
if
(
win
.
messageManager
)
{
win
.
messageManager
.
removeDelayedFrameScript
(
FRAME_SCRIPT
)
;
}
else
{
logger
.
error
(
Could
not
remove
listener
from
page
{
win
.
location
.
href
}
)
;
}
}
this
.
curBrowser
.
frameManager
.
removeMessageManagerListeners
(
globalMessageManager
)
;
}
this
.
switchToGlobalMessageManager
(
)
;
this
.
curFrame
=
null
;
if
(
this
.
mainFrame
)
{
try
{
this
.
mainFrame
.
focus
(
)
;
}
catch
(
e
)
{
this
.
mainFrame
=
null
;
}
}
if
(
this
.
observing
!
=
=
null
)
{
for
(
let
topic
in
this
.
observing
)
{
Services
.
obs
.
removeObserver
(
this
.
observing
[
topic
]
topic
)
;
}
this
.
observing
=
null
;
}
modal
.
removeHandler
(
this
.
dialogHandler
)
;
this
.
sandboxes
.
clear
(
)
;
cert
.
uninstallOverride
(
)
;
this
.
sessionID
=
null
;
this
.
capabilities
=
new
session
.
Capabilities
(
)
;
}
;
GeckoDriver
.
prototype
.
takeScreenshot
=
function
(
cmd
)
{
let
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
let
{
id
highlights
full
hash
}
=
cmd
.
parameters
;
highlights
=
highlights
|
|
[
]
;
let
format
=
hash
?
capture
.
Format
.
Hash
:
capture
.
Format
.
Base64
;
switch
(
this
.
context
)
{
case
Context
.
Chrome
:
let
highlightEls
=
highlights
.
map
(
ref
=
>
WebElement
.
fromUUID
(
ref
Context
.
Chrome
)
)
.
map
(
webEl
=
>
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
)
;
let
canvas
;
if
(
!
id
&
&
!
full
)
{
canvas
=
capture
.
viewport
(
win
highlightEls
)
;
}
else
{
let
node
;
if
(
id
)
{
let
webEl
=
WebElement
.
fromUUID
(
id
Context
.
Chrome
)
;
node
=
this
.
curBrowser
.
seenEls
.
get
(
webEl
)
;
}
else
{
node
=
win
.
document
.
documentElement
;
}
canvas
=
capture
.
element
(
node
highlightEls
)
;
}
switch
(
format
)
{
case
capture
.
Format
.
Hash
:
return
capture
.
toHash
(
canvas
)
;
case
capture
.
Format
.
Base64
:
return
capture
.
toBase64
(
canvas
)
;
}
break
;
case
Context
.
Content
:
return
this
.
listener
.
takeScreenshot
(
format
cmd
.
parameters
)
;
}
throw
new
TypeError
(
Unknown
context
:
{
this
.
context
}
)
;
}
;
GeckoDriver
.
prototype
.
getScreenOrientation
=
function
(
cmd
resp
)
{
assert
.
fennec
(
)
;
let
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
resp
.
body
.
value
=
win
.
screen
.
mozOrientation
;
}
;
GeckoDriver
.
prototype
.
setScreenOrientation
=
function
(
cmd
)
{
assert
.
fennec
(
)
;
let
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
const
ors
=
[
"
portrait
"
"
landscape
"
"
portrait
-
primary
"
"
landscape
-
primary
"
"
portrait
-
secondary
"
"
landscape
-
secondary
"
]
;
let
or
=
String
(
cmd
.
parameters
.
orientation
)
;
assert
.
string
(
or
)
;
let
mozOr
=
or
.
toLowerCase
(
)
;
if
(
!
ors
.
includes
(
mozOr
)
)
{
throw
new
InvalidArgumentError
(
Unknown
screen
orientation
:
{
or
}
)
;
}
if
(
!
win
.
screen
.
mozLockOrientation
(
mozOr
)
)
{
throw
new
WebDriverError
(
Unable
to
set
screen
orientation
:
{
or
}
)
;
}
}
;
GeckoDriver
.
prototype
.
minimizeWindow
=
async
function
(
)
{
assert
.
firefox
(
)
;
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
if
(
WindowState
.
from
(
win
.
windowState
)
=
=
WindowState
.
Fullscreen
)
{
await
exitFullscreen
(
win
)
;
}
if
(
WindowState
.
from
(
win
.
windowState
)
!
=
WindowState
.
Minimized
)
{
await
new
Promise
(
resolve
=
>
{
this
.
curBrowser
.
eventObserver
.
addEventListener
(
"
visibilitychange
"
resolve
{
once
:
true
}
)
;
win
.
minimize
(
)
;
}
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
maximizeWindow
=
async
function
(
)
{
assert
.
firefox
(
)
;
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
switch
(
WindowState
.
from
(
win
.
windowState
)
)
{
case
WindowState
.
Fullscreen
:
await
exitFullscreen
(
win
)
;
break
;
case
WindowState
.
Minimized
:
await
restoreWindow
(
win
this
.
curBrowser
.
eventObserver
)
;
break
;
}
const
origSize
=
{
outerWidth
:
win
.
outerWidth
outerHeight
:
win
.
outerHeight
}
;
async
function
windowSizeChange
(
)
{
return
new
PollPromise
(
(
resolve
reject
)
=
>
{
let
curSize
=
{
outerWidth
:
win
.
outerWidth
outerHeight
:
win
.
outerHeight
}
;
if
(
curSize
.
outerWidth
!
=
origSize
.
outerWidth
|
|
curSize
.
outerHeight
!
=
origSize
.
outerHeight
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
if
(
WindowState
.
from
(
win
.
windowState
)
!
=
win
.
Maximized
)
{
await
new
TimedPromise
(
resolve
=
>
{
win
.
addEventListener
(
"
sizemodechange
"
resolve
{
once
:
true
}
)
;
win
.
maximize
(
)
;
}
{
throws
:
null
}
)
;
await
windowSizeChange
(
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
fullscreenWindow
=
async
function
(
)
{
assert
.
firefox
(
)
;
const
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_assertAndDismissModal
(
)
;
if
(
WindowState
.
from
(
win
.
windowState
)
=
=
WindowState
.
Minimized
)
{
await
restoreWindow
(
win
this
.
curBrowser
.
eventObserver
)
;
}
if
(
WindowState
.
from
(
win
.
windowState
)
!
=
WindowState
.
Fullscreen
)
{
await
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
sizemodechange
"
resolve
{
once
:
true
}
)
;
win
.
fullScreen
=
true
;
}
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
dismissDialog
=
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
let
{
button0
button1
}
=
this
.
dialog
.
ui
;
(
button1
?
button1
:
button0
)
.
click
(
)
;
this
.
dialog
=
null
;
}
;
GeckoDriver
.
prototype
.
acceptDialog
=
function
(
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
let
{
button0
}
=
this
.
dialog
.
ui
;
button0
.
click
(
)
;
this
.
dialog
=
null
;
}
;
GeckoDriver
.
prototype
.
getTextFromDialog
=
function
(
cmd
resp
)
{
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
let
{
infoBody
}
=
this
.
dialog
.
ui
;
resp
.
body
.
value
=
infoBody
.
textContent
;
}
;
GeckoDriver
.
prototype
.
sendKeysToDialog
=
function
(
cmd
)
{
let
win
=
assert
.
window
(
this
.
getCurrentWindow
(
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
let
{
loginContainer
loginTextbox
}
=
this
.
dialog
.
ui
;
if
(
loginContainer
.
hidden
)
{
throw
new
ElementNotInteractableError
(
"
This
prompt
does
not
accept
text
input
"
)
;
}
event
.
sendKeysToElement
(
cmd
.
parameters
.
text
loginTextbox
{
ignoreVisibility
:
true
}
this
.
dialog
.
window
?
this
.
dialog
.
window
:
win
)
;
}
;
GeckoDriver
.
prototype
.
_checkIfAlertIsPresent
=
function
(
)
{
if
(
!
this
.
dialog
|
|
!
this
.
dialog
.
ui
)
{
throw
new
NoAlertOpenError
(
"
No
modal
dialog
is
currently
open
"
)
;
}
}
;
GeckoDriver
.
prototype
.
_assertAndDismissModal
=
function
(
)
{
try
{
assert
.
noUserPrompt
(
this
.
dialog
)
;
}
catch
(
e
)
{
this
.
dismissDialog
(
)
;
throw
e
;
}
}
;
GeckoDriver
.
prototype
.
acceptConnections
=
function
(
cmd
)
{
assert
.
boolean
(
cmd
.
parameters
.
value
)
;
this
.
_server
.
acceptConnections
=
cmd
.
parameters
.
value
;
}
;
GeckoDriver
.
prototype
.
quit
=
async
function
(
cmd
resp
)
{
const
quits
=
[
"
eConsiderQuit
"
"
eAttemptQuit
"
"
eForceQuit
"
]
;
let
flags
=
[
]
;
if
(
typeof
cmd
.
parameters
.
flags
!
=
"
undefined
"
)
{
flags
=
assert
.
array
(
cmd
.
parameters
.
flags
)
;
}
assert
.
firefox
(
)
;
let
quitSeen
;
let
mode
=
0
;
if
(
flags
.
length
>
0
)
{
for
(
let
k
of
flags
)
{
assert
.
in
(
k
Ci
.
nsIAppStartup
)
;
if
(
quits
.
includes
(
k
)
)
{
if
(
quitSeen
)
{
throw
new
InvalidArgumentError
(
{
k
}
cannot
be
combined
with
{
quitSeen
}
)
;
}
quitSeen
=
k
;
}
mode
|
=
Ci
.
nsIAppStartup
[
k
]
;
}
}
else
{
mode
=
Ci
.
nsIAppStartup
.
eAttemptQuit
;
}
this
.
_server
.
acceptConnections
=
false
;
this
.
deleteSession
(
)
;
let
quitApplication
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
(
subject
topic
data
)
=
>
resolve
(
data
)
"
quit
-
application
"
)
;
}
)
;
Services
.
startup
.
quit
(
mode
)
;
resp
.
body
.
cause
=
await
quitApplication
;
resp
.
send
(
)
;
}
;
GeckoDriver
.
prototype
.
installAddon
=
function
(
cmd
)
{
assert
.
firefox
(
)
;
let
path
=
cmd
.
parameters
.
path
;
let
temp
=
cmd
.
parameters
.
temporary
|
|
false
;
if
(
typeof
path
=
=
"
undefined
"
|
|
typeof
path
!
=
"
string
"
|
|
typeof
temp
!
=
"
boolean
"
)
{
throw
new
InvalidArgumentError
(
)
;
}
return
addon
.
install
(
path
temp
)
;
}
;
GeckoDriver
.
prototype
.
uninstallAddon
=
function
(
cmd
)
{
assert
.
firefox
(
)
;
let
id
=
cmd
.
parameters
.
id
;
if
(
typeof
id
=
=
"
undefined
"
|
|
typeof
id
!
=
"
string
"
)
{
throw
new
InvalidArgumentError
(
)
;
}
return
addon
.
uninstall
(
id
)
;
}
;
GeckoDriver
.
prototype
.
receiveMessage
=
function
(
message
)
{
switch
(
message
.
name
)
{
case
"
Marionette
:
ok
"
:
case
"
Marionette
:
done
"
:
case
"
Marionette
:
error
"
:
if
(
this
.
mozBrowserClose
!
=
=
null
)
{
let
win
=
this
.
getCurrentWindow
(
)
;
win
.
removeEventListener
(
"
mozbrowserclose
"
this
.
mozBrowserClose
true
)
;
this
.
mozBrowserClose
=
null
;
}
break
;
case
"
Marionette
:
log
"
:
logger
.
info
(
message
.
json
.
message
)
;
break
;
case
"
Marionette
:
switchToModalOrigin
"
:
this
.
curBrowser
.
frameManager
.
switchToModalOrigin
(
message
)
;
this
.
mm
=
this
.
curBrowser
.
frameManager
.
currentRemoteFrame
.
messageManager
.
get
(
)
;
break
;
case
"
Marionette
:
switchedToFrame
"
:
if
(
message
.
json
.
restorePrevious
)
{
this
.
currentFrameElement
=
this
.
previousFrameElement
;
}
else
{
if
(
message
.
json
.
storePrevious
)
{
this
.
previousFrameElement
=
new
ChromeWebElement
(
this
.
currentFrameElement
)
;
}
if
(
message
.
json
.
frameValue
)
{
this
.
currentFrameElement
=
new
ChromeWebElement
(
message
.
json
.
frameValue
)
;
}
else
{
this
.
currentFrameElement
=
null
;
}
}
break
;
case
"
Marionette
:
emitTouchEvent
"
:
globalMessageManager
.
broadcastAsyncMessage
(
"
MarionetteMainListener
:
emitTouchEvent
"
message
.
json
)
;
break
;
case
"
Marionette
:
register
"
:
let
wid
=
message
.
json
.
value
;
let
be
=
message
.
target
;
let
rv
=
this
.
registerBrowser
(
wid
be
)
;
return
rv
;
case
"
Marionette
:
listenersAttached
"
:
if
(
message
.
json
.
listenerId
=
=
=
this
.
curBrowser
.
curFrameId
)
{
this
.
sendAsync
(
"
newSession
"
this
.
capabilities
)
;
this
.
curBrowser
.
flushPendingCommands
(
)
;
}
break
;
case
"
Marionette
:
GetLogLevel
"
:
return
logger
.
level
;
}
}
;
GeckoDriver
.
prototype
.
responseCompleted
=
function
(
)
{
if
(
this
.
curBrowser
!
=
=
null
)
{
this
.
curBrowser
.
pendingCommands
=
[
]
;
}
}
;
GeckoDriver
.
prototype
.
localizeEntity
=
function
(
cmd
resp
)
{
let
{
urls
id
}
=
cmd
.
parameters
;
if
(
!
Array
.
isArray
(
urls
)
)
{
throw
new
InvalidArgumentError
(
"
Value
of
urls
should
be
of
type
'
Array
'
"
)
;
}
if
(
typeof
id
!
=
"
string
"
)
{
throw
new
InvalidArgumentError
(
"
Value
of
id
should
be
of
type
'
string
'
"
)
;
}
resp
.
body
.
value
=
l10n
.
localizeEntity
(
urls
id
)
;
}
;
GeckoDriver
.
prototype
.
localizeProperty
=
function
(
cmd
resp
)
{
let
{
urls
id
}
=
cmd
.
parameters
;
if
(
!
Array
.
isArray
(
urls
)
)
{
throw
new
InvalidArgumentError
(
"
Value
of
urls
should
be
of
type
'
Array
'
"
)
;
}
if
(
typeof
id
!
=
"
string
"
)
{
throw
new
InvalidArgumentError
(
"
Value
of
id
should
be
of
type
'
string
'
"
)
;
}
resp
.
body
.
value
=
l10n
.
localizeProperty
(
urls
id
)
;
}
;
GeckoDriver
.
prototype
.
setupReftest
=
async
function
(
cmd
)
{
if
(
this
.
_reftest
)
{
throw
new
UnsupportedOperationError
(
"
Called
reftest
:
setup
with
a
reftest
session
already
active
"
)
;
}
if
(
this
.
context
!
=
=
Context
.
Chrome
)
{
throw
new
UnsupportedOperationError
(
"
Must
set
chrome
context
before
running
reftests
"
)
;
}
let
{
urlCount
=
{
}
screenshot
=
"
unexpected
"
}
=
cmd
.
parameters
;
if
(
!
[
"
always
"
"
fail
"
"
unexpected
"
]
.
includes
(
screenshot
)
)
{
throw
new
InvalidArgumentError
(
"
Value
of
screenshot
should
be
'
always
'
'
fail
'
or
'
unexpected
'
"
)
;
}
this
.
_reftest
=
new
reftest
.
Runner
(
this
)
;
await
this
.
_reftest
.
setup
(
urlCount
screenshot
)
;
}
;
GeckoDriver
.
prototype
.
runReftest
=
async
function
(
cmd
resp
)
{
let
{
test
references
expected
timeout
}
=
cmd
.
parameters
;
if
(
!
this
.
_reftest
)
{
throw
new
UnsupportedOperationError
(
"
Called
reftest
:
run
before
reftest
:
start
"
)
;
}
assert
.
string
(
test
)
;
assert
.
string
(
expected
)
;
assert
.
array
(
references
)
;
resp
.
body
.
value
=
await
this
.
_reftest
.
run
(
test
references
expected
timeout
)
;
}
;
GeckoDriver
.
prototype
.
teardownReftest
=
function
(
)
{
if
(
!
this
.
_reftest
)
{
throw
new
UnsupportedOperationError
(
"
Called
reftest
:
teardown
before
reftest
:
start
"
)
;
}
this
.
_reftest
.
abort
(
)
;
this
.
_reftest
=
null
;
}
;
GeckoDriver
.
prototype
.
commands
=
{
"
Marionette
:
SetContext
"
:
GeckoDriver
.
prototype
.
setContext
"
setContext
"
:
GeckoDriver
.
prototype
.
setContext
"
Marionette
:
GetContext
"
:
GeckoDriver
.
prototype
.
getContext
"
getContext
"
:
GeckoDriver
.
prototype
.
getContext
"
Marionette
:
AcceptConnections
"
:
GeckoDriver
.
prototype
.
acceptConnections
"
acceptConnections
"
:
GeckoDriver
.
prototype
.
acceptConnections
"
Marionette
:
Quit
"
:
GeckoDriver
.
prototype
.
quit
"
quit
"
:
GeckoDriver
.
prototype
.
quit
"
quitApplication
"
:
GeckoDriver
.
prototype
.
quit
"
Addon
:
Install
"
:
GeckoDriver
.
prototype
.
installAddon
"
addon
:
install
"
:
GeckoDriver
.
prototype
.
installAddon
"
Addon
:
Uninstall
"
:
GeckoDriver
.
prototype
.
uninstallAddon
"
addon
:
uninstall
"
:
GeckoDriver
.
prototype
.
uninstallAddon
"
L10n
:
LocalizeEntity
"
:
GeckoDriver
.
prototype
.
localizeEntity
"
localization
:
l10n
:
localizeEntity
"
:
GeckoDriver
.
prototype
.
localizeEntity
"
L10n
:
LocalizeProperty
"
:
GeckoDriver
.
prototype
.
localizeProperty
"
localization
:
l10n
:
localizeProperty
"
:
GeckoDriver
.
prototype
.
localizeProperty
"
reftest
:
setup
"
:
GeckoDriver
.
prototype
.
setupReftest
"
reftest
:
run
"
:
GeckoDriver
.
prototype
.
runReftest
"
reftest
:
teardown
"
:
GeckoDriver
.
prototype
.
teardownReftest
"
WebDriver
:
AcceptDialog
"
:
GeckoDriver
.
prototype
.
acceptDialog
"
WebDriver
:
AddCookie
"
:
GeckoDriver
.
prototype
.
addCookie
"
WebDriver
:
Back
"
:
GeckoDriver
.
prototype
.
goBack
"
WebDriver
:
CloseChromeWindow
"
:
GeckoDriver
.
prototype
.
closeChromeWindow
"
WebDriver
:
CloseWindow
"
:
GeckoDriver
.
prototype
.
close
"
WebDriver
:
DeleteAllCookies
"
:
GeckoDriver
.
prototype
.
deleteAllCookies
"
WebDriver
:
DeleteCookie
"
:
GeckoDriver
.
prototype
.
deleteCookie
"
WebDriver
:
DeleteSession
"
:
GeckoDriver
.
prototype
.
deleteSession
"
WebDriver
:
DismissAlert
"
:
GeckoDriver
.
prototype
.
dismissDialog
"
WebDriver
:
ElementClear
"
:
GeckoDriver
.
prototype
.
clearElement
"
WebDriver
:
ElementClick
"
:
GeckoDriver
.
prototype
.
clickElement
"
WebDriver
:
ElementSendKeys
"
:
GeckoDriver
.
prototype
.
sendKeysToElement
"
WebDriver
:
ExecuteAsyncScript
"
:
GeckoDriver
.
prototype
.
executeAsyncScript
"
WebDriver
:
ExecuteScript
"
:
GeckoDriver
.
prototype
.
executeScript
"
WebDriver
:
FindElement
"
:
GeckoDriver
.
prototype
.
findElement
"
WebDriver
:
FindElements
"
:
GeckoDriver
.
prototype
.
findElements
"
WebDriver
:
Forward
"
:
GeckoDriver
.
prototype
.
goForward
"
WebDriver
:
FullscreenWindow
"
:
GeckoDriver
.
prototype
.
fullscreenWindow
"
WebDriver
:
GetActiveElement
"
:
GeckoDriver
.
prototype
.
getActiveElement
"
WebDriver
:
GetActiveFrame
"
:
GeckoDriver
.
prototype
.
getActiveFrame
"
WebDriver
:
GetAlertText
"
:
GeckoDriver
.
prototype
.
getTextFromDialog
"
WebDriver
:
GetCapabilities
"
:
GeckoDriver
.
prototype
.
getSessionCapabilities
"
WebDriver
:
GetChromeWindowHandle
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandle
"
WebDriver
:
GetChromeWindowHandles
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandles
"
WebDriver
:
GetCookies
"
:
GeckoDriver
.
prototype
.
getCookies
"
WebDriver
:
GetCurrentChromeWindowHandle
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandle
"
WebDriver
:
GetCurrentURL
"
:
GeckoDriver
.
prototype
.
getCurrentUrl
"
WebDriver
:
GetElementAttribute
"
:
GeckoDriver
.
prototype
.
getElementAttribute
"
WebDriver
:
GetElementCSSValue
"
:
GeckoDriver
.
prototype
.
getElementValueOfCssProperty
"
WebDriver
:
GetElementProperty
"
:
GeckoDriver
.
prototype
.
getElementProperty
"
WebDriver
:
GetElementRect
"
:
GeckoDriver
.
prototype
.
getElementRect
"
WebDriver
:
GetElementTagName
"
:
GeckoDriver
.
prototype
.
getElementTagName
"
WebDriver
:
GetElementText
"
:
GeckoDriver
.
prototype
.
getElementText
"
WebDriver
:
GetPageSource
"
:
GeckoDriver
.
prototype
.
getPageSource
"
WebDriver
:
GetScreenOrientation
"
:
GeckoDriver
.
prototype
.
getScreenOrientation
"
WebDriver
:
GetTimeouts
"
:
GeckoDriver
.
prototype
.
getTimeouts
"
WebDriver
:
GetTitle
"
:
GeckoDriver
.
prototype
.
getTitle
"
WebDriver
:
GetWindowHandle
"
:
GeckoDriver
.
prototype
.
getWindowHandle
"
WebDriver
:
GetWindowHandles
"
:
GeckoDriver
.
prototype
.
getWindowHandles
"
WebDriver
:
GetWindowRect
"
:
GeckoDriver
.
prototype
.
getWindowRect
"
WebDriver
:
GetWindowType
"
:
GeckoDriver
.
prototype
.
getWindowType
"
WebDriver
:
IsElementDisplayed
"
:
GeckoDriver
.
prototype
.
isElementDisplayed
"
WebDriver
:
IsElementEnabled
"
:
GeckoDriver
.
prototype
.
isElementEnabled
"
WebDriver
:
IsElementSelected
"
:
GeckoDriver
.
prototype
.
isElementSelected
"
WebDriver
:
MinimizeWindow
"
:
GeckoDriver
.
prototype
.
minimizeWindow
"
WebDriver
:
MaximizeWindow
"
:
GeckoDriver
.
prototype
.
maximizeWindow
"
WebDriver
:
Navigate
"
:
GeckoDriver
.
prototype
.
get
"
WebDriver
:
NewSession
"
:
GeckoDriver
.
prototype
.
newSession
"
WebDriver
:
PerformActions
"
:
GeckoDriver
.
prototype
.
performActions
"
WebDriver
:
Refresh
"
:
GeckoDriver
.
prototype
.
refresh
"
WebDriver
:
ReleaseActions
"
:
GeckoDriver
.
prototype
.
releaseActions
"
WebDriver
:
SendAlertText
"
:
GeckoDriver
.
prototype
.
sendKeysToDialog
"
WebDriver
:
SetScreenOrientation
"
:
GeckoDriver
.
prototype
.
setScreenOrientation
"
WebDriver
:
SetTimeouts
"
:
GeckoDriver
.
prototype
.
setTimeouts
"
WebDriver
:
SetWindowRect
"
:
GeckoDriver
.
prototype
.
setWindowRect
"
WebDriver
:
SwitchToFrame
"
:
GeckoDriver
.
prototype
.
switchToFrame
"
WebDriver
:
SwitchToParentFrame
"
:
GeckoDriver
.
prototype
.
switchToParentFrame
"
WebDriver
:
SwitchToShadowRoot
"
:
GeckoDriver
.
prototype
.
switchToShadowRoot
"
WebDriver
:
SwitchToWindow
"
:
GeckoDriver
.
prototype
.
switchToWindow
"
WebDriver
:
TakeScreenshot
"
:
GeckoDriver
.
prototype
.
takeScreenshot
"
acceptDialog
"
:
GeckoDriver
.
prototype
.
acceptDialog
"
actionChain
"
:
GeckoDriver
.
prototype
.
actionChain
"
addCookie
"
:
GeckoDriver
.
prototype
.
addCookie
"
clearElement
"
:
GeckoDriver
.
prototype
.
clearElement
"
clickElement
"
:
GeckoDriver
.
prototype
.
clickElement
"
closeChromeWindow
"
:
GeckoDriver
.
prototype
.
closeChromeWindow
"
close
"
:
GeckoDriver
.
prototype
.
close
"
deleteAllCookies
"
:
GeckoDriver
.
prototype
.
deleteAllCookies
"
deleteCookie
"
:
GeckoDriver
.
prototype
.
deleteCookie
"
deleteSession
"
:
GeckoDriver
.
prototype
.
deleteSession
"
dismissDialog
"
:
GeckoDriver
.
prototype
.
dismissDialog
"
executeAsyncScript
"
:
GeckoDriver
.
prototype
.
executeAsyncScript
"
executeScript
"
:
GeckoDriver
.
prototype
.
executeScript
"
findElement
"
:
GeckoDriver
.
prototype
.
findElement
"
findElements
"
:
GeckoDriver
.
prototype
.
findElements
"
fullscreen
"
:
GeckoDriver
.
prototype
.
fullscreenWindow
"
getActiveElement
"
:
GeckoDriver
.
prototype
.
getActiveElement
"
getActiveFrame
"
:
GeckoDriver
.
prototype
.
getActiveFrame
"
getChromeWindowHandle
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandle
"
getChromeWindowHandles
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandles
"
getCookies
"
:
GeckoDriver
.
prototype
.
getCookies
"
getCurrentChromeWindowHandle
"
:
GeckoDriver
.
prototype
.
getChromeWindowHandle
"
getCurrentUrl
"
:
GeckoDriver
.
prototype
.
getCurrentUrl
"
getElementAttribute
"
:
GeckoDriver
.
prototype
.
getElementAttribute
"
getElementProperty
"
:
GeckoDriver
.
prototype
.
getElementProperty
"
getElementRect
"
:
GeckoDriver
.
prototype
.
getElementRect
"
getElementTagName
"
:
GeckoDriver
.
prototype
.
getElementTagName
"
getElementText
"
:
GeckoDriver
.
prototype
.
getElementText
"
getElementValueOfCssProperty
"
:
GeckoDriver
.
prototype
.
getElementValueOfCssProperty
"
get
"
:
GeckoDriver
.
prototype
.
get
"
getPageSource
"
:
GeckoDriver
.
prototype
.
getPageSource
"
getScreenOrientation
"
:
GeckoDriver
.
prototype
.
getScreenOrientation
"
getSessionCapabilities
"
:
GeckoDriver
.
prototype
.
getSessionCapabilities
"
getTextFromDialog
"
:
GeckoDriver
.
prototype
.
getTextFromDialog
"
getTimeouts
"
:
GeckoDriver
.
prototype
.
getTimeouts
"
getTitle
"
:
GeckoDriver
.
prototype
.
getTitle
"
getWindowHandle
"
:
GeckoDriver
.
prototype
.
getWindowHandle
"
getWindowHandles
"
:
GeckoDriver
.
prototype
.
getWindowHandles
"
getWindowPosition
"
:
GeckoDriver
.
prototype
.
getWindowRect
"
getWindowRect
"
:
GeckoDriver
.
prototype
.
getWindowRect
"
getWindowSize
"
:
GeckoDriver
.
prototype
.
getWindowRect
"
getWindowType
"
:
GeckoDriver
.
prototype
.
getWindowType
"
goBack
"
:
GeckoDriver
.
prototype
.
goBack
"
goForward
"
:
GeckoDriver
.
prototype
.
goForward
"
isElementDisplayed
"
:
GeckoDriver
.
prototype
.
isElementDisplayed
"
isElementEnabled
"
:
GeckoDriver
.
prototype
.
isElementEnabled
"
isElementSelected
"
:
GeckoDriver
.
prototype
.
isElementSelected
"
maximizeWindow
"
:
GeckoDriver
.
prototype
.
maximizeWindow
"
multiAction
"
:
GeckoDriver
.
prototype
.
multiAction
"
newSession
"
:
GeckoDriver
.
prototype
.
newSession
"
performActions
"
:
GeckoDriver
.
prototype
.
performActions
"
refresh
"
:
GeckoDriver
.
prototype
.
refresh
"
releaseActions
"
:
GeckoDriver
.
prototype
.
releaseActions
"
sendKeysToDialog
"
:
GeckoDriver
.
prototype
.
sendKeysToDialog
"
sendKeysToElement
"
:
GeckoDriver
.
prototype
.
sendKeysToElement
"
setScreenOrientation
"
:
GeckoDriver
.
prototype
.
setScreenOrientation
"
setTimeouts
"
:
GeckoDriver
.
prototype
.
setTimeouts
"
setWindowPosition
"
:
GeckoDriver
.
prototype
.
setWindowRect
"
setWindowRect
"
:
GeckoDriver
.
prototype
.
setWindowRect
"
setWindowSize
"
:
GeckoDriver
.
prototype
.
setWindowRect
"
singleTap
"
:
GeckoDriver
.
prototype
.
singleTap
"
switchToFrame
"
:
GeckoDriver
.
prototype
.
switchToFrame
"
switchToParentFrame
"
:
GeckoDriver
.
prototype
.
switchToParentFrame
"
switchToShadowRoot
"
:
GeckoDriver
.
prototype
.
switchToShadowRoot
"
switchToWindow
"
:
GeckoDriver
.
prototype
.
switchToWindow
"
takeScreenshot
"
:
GeckoDriver
.
prototype
.
takeScreenshot
}
;
function
getOuterWindowId
(
win
)
{
return
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
outerWindowID
;
}
async
function
exitFullscreen
(
window
)
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
sizemodechange
"
whenIdle
(
window
resolve
)
{
once
:
true
}
)
;
window
.
fullScreen
=
false
;
}
)
;
}
async
function
restoreWindow
(
chromeWindow
contentWindow
)
{
return
new
Promise
(
resolve
=
>
{
contentWindow
.
addEventListener
(
"
visibilitychange
"
resolve
{
once
:
true
}
)
;
chromeWindow
.
restore
(
)
;
}
)
;
}
function
whenIdle
(
window
callback
)
{
return
(
)
=
>
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
window
.
requestAnimationFrame
(
callback
)
;
}
)
;
}
