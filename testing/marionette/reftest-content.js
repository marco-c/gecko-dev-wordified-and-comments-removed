"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PrintUtils
"
"
chrome
:
/
/
global
/
content
/
printUtils
.
js
"
)
;
function
BrowserDOMWindow
(
)
{
}
BrowserDOMWindow
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIBrowserDOMWindow
"
]
)
_maybeOpen
(
aOpenWindowInfo
aWhere
)
{
if
(
aWhere
=
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_PRINT_BROWSER
)
{
return
PrintUtils
.
startPrintWindow
(
aOpenWindowInfo
.
parent
{
openWindowInfo
:
aOpenWindowInfo
}
)
;
}
return
null
;
}
createContentWindow
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
)
{
return
this
.
_maybeOpen
(
aOpenWindowInfo
aWhere
)
?
.
browsingContext
;
}
openURI
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
)
{
return
this
.
_maybeOpen
(
aOpenWindowInfo
aWhere
)
?
.
browsingContext
;
}
createContentWindowInFrame
(
aURI
aParams
aWhere
aFlags
aName
)
{
return
this
.
_maybeOpen
(
aParams
.
openWindowInfo
aWhere
)
;
}
openURIInFrame
(
aURI
aParams
aWhere
aFlags
aName
)
{
return
this
.
_maybeOpen
(
aParams
.
openWindowInfo
aWhere
)
;
}
canClose
(
)
{
return
true
;
}
get
tabCount
(
)
{
return
1
;
}
}
;
window
.
browserDOMWindow
=
new
BrowserDOMWindow
(
)
;
