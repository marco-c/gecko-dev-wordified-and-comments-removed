"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
domParser
"
"
mozilla
.
org
/
xmlextras
/
domparser
;
1
"
"
nsIDOMParser
"
)
;
const
{
NoSuchElementError
}
=
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
{
}
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
l10n
"
]
;
this
.
l10n
=
{
}
;
l10n
.
localizeEntity
=
function
(
urls
id
)
{
let
locations
=
[
]
;
urls
.
forEach
(
(
url
index
)
=
>
{
locations
.
push
(
<
!
ENTITY
%
dtd_
{
index
}
SYSTEM
"
{
url
}
"
>
%
dtd_
{
index
}
;
)
;
}
)
let
header
=
<
?
xml
version
=
"
1
.
0
"
?
>
<
!
DOCTYPE
elem
[
{
locations
.
join
(
"
"
)
}
]
>
;
let
elem
=
<
elem
id
=
"
elementID
"
>
&
{
id
}
;
<
/
elem
>
;
let
doc
=
domParser
.
parseFromString
(
header
+
elem
"
text
/
xml
"
)
;
let
element
=
doc
.
querySelector
(
"
elem
[
id
=
'
elementID
'
]
"
)
;
if
(
element
=
=
=
null
)
{
throw
new
NoSuchElementError
(
Entity
with
id
=
'
{
id
}
'
hasn
'
t
been
found
)
;
}
return
element
.
textContent
;
}
;
l10n
.
localizeProperty
=
function
(
urls
id
)
{
let
property
=
null
;
for
(
let
url
of
urls
)
{
let
bundle
=
Services
.
strings
.
createBundle
(
url
)
;
try
{
property
=
bundle
.
GetStringFromName
(
id
)
;
break
;
}
catch
(
e
)
{
}
}
;
if
(
property
=
=
=
null
)
{
throw
new
NoSuchElementError
(
Property
with
id
=
'
{
id
}
'
hasn
'
t
been
found
)
;
}
return
property
;
}
;
