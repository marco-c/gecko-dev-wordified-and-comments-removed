"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
modal
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
proxy
"
]
;
const
uuidgen
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
var
ownPriorityGetterTrap
=
{
get
:
(
obj
prop
)
=
>
{
if
(
obj
.
hasOwnProperty
(
prop
)
)
{
return
obj
[
prop
]
;
}
return
(
.
.
.
args
)
=
>
obj
.
send
(
prop
args
)
;
}
}
;
this
.
proxy
=
{
}
;
proxy
.
toListener
=
function
(
mmFn
sendAsyncFn
)
{
let
sender
=
new
proxy
.
AsyncContentSender
(
mmFn
sendAsyncFn
)
;
return
new
Proxy
(
sender
ownPriorityGetterTrap
)
;
}
;
proxy
.
AsyncContentSender
=
class
{
constructor
(
mmFn
sendAsyncFn
)
{
this
.
sendAsync
=
sendAsyncFn
;
this
.
activeMessageId
=
null
;
this
.
mmFn_
=
mmFn
;
this
.
listeners_
=
new
Map
(
)
;
this
.
dialogueObserver_
=
null
;
}
get
mm
(
)
{
return
this
.
mmFn_
(
)
;
}
send
(
name
args
=
[
]
)
{
let
uuid
=
uuidgen
.
generateUUID
(
)
.
toString
(
)
;
this
.
activeMessageId
=
uuid
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
path
=
proxy
.
AsyncContentSender
.
makeReplyPath
(
uuid
)
;
let
cb
=
msg
=
>
{
this
.
activeMessageId
=
null
;
if
(
"
error
"
in
msg
.
json
)
{
reject
(
msg
.
objects
.
error
)
;
}
else
{
resolve
(
msg
.
json
.
value
)
;
}
}
;
this
.
dialogueObserver_
=
(
subject
topic
)
=
>
{
this
.
cancelAll
(
)
;
resolve
(
)
;
}
;
this
.
addListener_
(
path
cb
)
;
modal
.
addHandler
(
this
.
dialogueObserver_
)
;
this
.
sendAsync
(
name
marshal
(
args
)
uuid
)
;
}
)
;
}
cancelAll
(
)
{
this
.
removeAllListeners_
(
)
;
modal
.
removeHandler
(
this
.
dialogueObserver_
)
;
this
.
sendAsync
(
"
cancelRequest
"
)
;
}
addListener_
(
path
callback
)
{
let
autoRemover
=
msg
=
>
{
this
.
removeListener_
(
path
)
;
modal
.
removeHandler
(
this
.
dialogueObserver_
)
;
callback
(
msg
)
;
}
;
this
.
mm
.
addMessageListener
(
path
autoRemover
)
;
this
.
listeners_
.
set
(
path
autoRemover
)
;
}
removeListener_
(
path
)
{
let
l
=
this
.
listeners_
.
get
(
path
)
;
this
.
mm
.
removeMessageListener
(
path
l
[
1
]
)
;
return
this
.
listeners_
.
delete
(
path
)
;
}
removeAllListeners_
(
)
{
let
ok
=
true
;
for
(
let
[
p
cb
]
of
this
.
listeners_
)
{
ok
|
=
this
.
removeListener_
(
p
)
;
}
return
ok
;
}
static
makeReplyPath
(
uuid
)
{
return
"
Marionette
:
asyncReply
:
"
+
uuid
;
}
}
;
proxy
.
toChrome
=
function
(
sendSyncMessageFn
)
{
let
sender
=
new
proxy
.
SyncChromeSender
(
sendSyncMessageFn
)
;
return
new
Proxy
(
sender
ownPriorityGetterTrap
)
;
}
;
proxy
.
SyncChromeSender
=
class
{
constructor
(
sendSyncMessage
)
{
this
.
sendSyncMessage_
=
sendSyncMessage
;
}
send
(
func
args
)
{
let
name
=
"
Marionette
:
"
+
func
;
return
this
.
sendSyncMessage_
(
name
marshal
(
args
)
)
;
}
}
;
var
marshal
=
function
(
args
)
{
if
(
args
.
length
=
=
1
&
&
typeof
args
[
0
]
=
=
"
object
"
)
{
return
args
[
0
]
;
}
return
args
;
}
;
