"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
modal
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
proxy
"
]
;
const
MARIONETTE_OK
=
"
Marionette
:
ok
"
;
const
MARIONETTE_DONE
=
"
Marionette
:
done
"
;
const
MARIONETTE_ERROR
=
"
Marionette
:
error
"
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
const
uuidgen
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
var
ownPriorityGetterTrap
=
{
get
:
(
obj
prop
)
=
>
{
if
(
obj
.
hasOwnProperty
(
prop
)
)
{
return
obj
[
prop
]
;
}
return
(
.
.
.
args
)
=
>
obj
.
send
(
prop
args
)
;
}
}
;
this
.
proxy
=
{
}
;
proxy
.
toListener
=
function
(
mmFn
sendAsyncFn
)
{
let
sender
=
new
AsyncContentSender
(
mmFn
sendAsyncFn
)
;
return
new
Proxy
(
sender
ownPriorityGetterTrap
)
;
}
;
this
.
AsyncContentSender
=
class
{
constructor
(
mmFn
sendAsyncFn
)
{
this
.
curId
=
null
;
this
.
sendAsync
=
sendAsyncFn
;
this
.
mmFn_
=
mmFn
;
this
.
_listeners
=
[
]
;
}
get
mm
(
)
{
return
this
.
mmFn_
(
)
;
}
removeListeners
(
)
{
this
.
_listeners
.
map
(
l
=
>
this
.
mm
.
removeMessageListener
(
l
[
0
]
l
[
1
]
)
)
;
this
.
_listeners
=
[
]
;
}
send
(
name
args
)
{
if
(
this
.
_listeners
[
0
]
)
{
logger
.
warn
(
"
A
previous
failed
command
left
content
listeners
behind
!
"
)
;
this
.
removeListeners
(
)
;
}
this
.
curId
=
uuidgen
.
generateUUID
(
)
.
toString
(
)
;
let
proxy
=
new
Promise
(
(
resolve
reject
)
=
>
{
let
removeListeners
=
(
n
fn
)
=
>
{
let
rmFn
=
msg
=
>
{
if
(
this
.
curId
!
=
=
msg
.
json
.
command_id
)
{
logger
.
warn
(
"
Skipping
out
-
of
-
sync
response
from
listener
:
"
+
Expected
response
to
{
name
}
with
ID
{
this
.
curId
}
+
"
but
got
:
"
+
msg
.
name
+
msg
.
json
.
toSource
(
)
)
;
return
;
}
this
.
removeListeners
(
)
;
modal
.
removeHandler
(
handleDialog
)
;
fn
(
msg
)
;
this
.
curId
=
null
;
}
;
this
.
_listeners
.
push
(
[
n
rmFn
]
)
;
return
rmFn
;
}
;
let
okListener
=
(
)
=
>
resolve
(
)
;
let
valListener
=
msg
=
>
resolve
(
msg
.
json
.
value
)
;
let
errListener
=
msg
=
>
reject
(
msg
.
objects
.
error
)
;
let
handleDialog
=
(
subject
topic
)
=
>
{
this
.
removeListeners
(
)
modal
.
removeHandler
(
handleDialog
)
;
this
.
sendAsync
(
"
cancelRequest
"
)
;
resolve
(
)
;
}
;
this
.
mm
.
addMessageListener
(
MARIONETTE_OK
removeListeners
(
MARIONETTE_OK
okListener
)
)
;
this
.
mm
.
addMessageListener
(
MARIONETTE_DONE
removeListeners
(
MARIONETTE_DONE
valListener
)
)
;
this
.
mm
.
addMessageListener
(
MARIONETTE_ERROR
removeListeners
(
MARIONETTE_ERROR
errListener
)
)
;
modal
.
addHandler
(
handleDialog
)
;
this
.
sendAsync
(
name
marshal
(
args
)
this
.
curId
)
;
}
)
;
return
proxy
;
}
}
;
proxy
.
toChrome
=
function
(
sendSyncMessageFn
)
{
let
sender
=
new
SyncChromeSender
(
sendSyncMessageFn
)
;
return
new
Proxy
(
sender
ownPriorityGetterTrap
)
;
}
;
this
.
SyncChromeSender
=
class
{
constructor
(
sendSyncMessage
)
{
this
.
sendSyncMessage_
=
sendSyncMessage
;
}
send
(
func
args
)
{
let
name
=
"
Marionette
:
"
+
func
;
return
this
.
sendSyncMessage_
(
name
marshal
(
args
)
)
;
}
}
;
var
marshal
=
function
(
args
)
{
if
(
args
.
length
=
=
1
&
&
typeof
args
[
0
]
=
=
"
object
"
)
{
return
args
[
0
]
;
}
return
args
;
}
;
