"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
modal
"
]
;
const
isFirefox
=
(
)
=
>
Services
.
appinfo
.
name
=
=
"
Firefox
"
;
this
.
modal
=
{
}
;
modal
=
{
COMMON_DIALOG_LOADED
:
"
common
-
dialog
-
loaded
"
TABMODAL_DIALOG_LOADED
:
"
tabmodal
-
dialog
-
loaded
"
handlers
:
{
"
common
-
dialog
-
loaded
"
:
new
Set
(
)
"
tabmodal
-
dialog
-
loaded
"
:
new
Set
(
)
}
}
;
modal
.
addHandler
=
function
(
handler
)
{
if
(
!
isFirefox
(
)
)
{
return
;
}
Object
.
keys
(
this
.
handlers
)
.
map
(
topic
=
>
{
this
.
handlers
[
topic
]
.
add
(
handler
)
;
Services
.
obs
.
addObserver
(
handler
topic
)
;
}
)
;
}
;
modal
.
findModalDialogs
=
function
(
context
)
{
let
winEn
=
Services
.
wm
.
getEnumerator
(
null
)
;
while
(
winEn
.
hasMoreElements
(
)
)
{
let
win
=
winEn
.
getNext
(
)
;
if
(
win
.
document
.
documentURI
=
=
=
"
chrome
:
/
/
global
/
content
/
commonDialog
.
xul
"
&
&
win
.
opener
&
&
win
.
opener
=
=
=
context
.
window
)
{
return
new
modal
.
Dialog
(
(
)
=
>
context
Cu
.
getWeakReference
(
win
)
)
;
}
}
if
(
context
.
tab
&
&
context
.
tabBrowser
.
getTabModalPromptBox
)
{
let
contentBrowser
=
context
.
contentBrowser
;
let
promptManager
=
context
.
tabBrowser
.
getTabModalPromptBox
(
contentBrowser
)
;
let
prompts
=
promptManager
.
listPrompts
(
)
;
if
(
prompts
.
length
)
{
return
new
modal
.
Dialog
(
(
)
=
>
context
null
)
;
}
}
return
null
;
}
;
modal
.
removeHandler
=
function
(
toRemove
)
{
if
(
!
isFirefox
(
)
)
{
return
;
}
for
(
let
topic
of
Object
.
keys
(
this
.
handlers
)
)
{
let
handlers
=
this
.
handlers
[
topic
]
;
for
(
let
handler
of
handlers
)
{
if
(
handler
=
=
toRemove
)
{
Services
.
obs
.
removeObserver
(
handler
topic
)
;
handlers
.
delete
(
handler
)
;
}
}
}
}
;
modal
.
Dialog
=
class
{
constructor
(
curBrowserFn
winRef
=
undefined
)
{
this
.
curBrowserFn_
=
curBrowserFn
;
this
.
win_
=
winRef
;
}
get
curBrowser_
(
)
{
return
this
.
curBrowserFn_
(
)
;
}
get
window
(
)
{
if
(
this
.
win_
)
{
let
win
=
this
.
win_
.
get
(
)
;
if
(
win
&
&
win
.
parent
)
{
return
win
;
}
}
return
null
;
}
get
ui
(
)
{
let
win
=
this
.
window
;
if
(
win
)
{
return
win
.
Dialog
.
ui
;
}
return
this
.
curBrowser_
.
getTabModalUI
(
)
;
}
}
;
