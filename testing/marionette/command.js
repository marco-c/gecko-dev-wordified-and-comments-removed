"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
CommandProcessor
"
"
Response
"
]
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
const
validator
=
{
exclusionary
:
{
"
capabilities
"
:
[
"
error
"
"
value
"
]
"
error
"
:
[
"
value
"
"
sessionId
"
"
capabilities
"
]
"
sessionId
"
:
[
"
error
"
"
value
"
]
"
value
"
:
[
"
error
"
"
sessionId
"
"
capabilities
"
]
}
set
:
function
(
obj
prop
val
)
{
let
tests
=
this
.
exclusionary
[
prop
]
;
if
(
tests
)
{
for
(
let
t
of
tests
)
{
if
(
obj
.
hasOwnProperty
(
t
)
)
{
throw
new
TypeError
(
{
t
}
set
cannot
set
{
prop
}
)
;
}
}
}
obj
[
prop
]
=
val
;
return
true
;
}
}
;
this
.
ResponseBody
=
(
)
=
>
new
Proxy
(
{
}
validator
)
;
this
.
Response
=
function
(
cmdId
respHandler
)
{
this
.
id
=
cmdId
;
this
.
respHandler
=
respHandler
;
this
.
sent
=
false
;
this
.
body
=
ResponseBody
(
)
;
}
;
Response
.
prototype
.
send
=
function
(
)
{
if
(
this
.
sent
)
{
throw
new
RangeError
(
"
Response
has
already
been
sent
:
"
+
this
.
toString
(
)
)
;
}
this
.
respHandler
(
this
.
body
this
.
id
)
;
this
.
sent
=
true
;
}
;
Response
.
prototype
.
sendError
=
function
(
err
)
{
let
wd
=
error
.
isWebDriverError
(
err
)
;
let
we
=
wd
?
err
:
new
WebDriverError
(
err
.
message
)
;
this
.
body
.
error
=
we
.
status
;
this
.
body
.
message
=
we
.
message
|
|
null
;
this
.
body
.
stacktrace
=
we
.
stack
|
|
null
;
this
.
send
(
)
;
if
(
!
wd
)
{
throw
err
;
}
}
;
this
.
CommandProcessor
=
function
(
driver
)
{
this
.
driver
=
driver
;
}
;
CommandProcessor
.
prototype
.
execute
=
function
(
payload
respHandler
cmdId
)
{
let
cmd
=
payload
;
let
resp
=
new
Response
(
cmdId
respHandler
)
;
let
sendResponse
=
resp
.
send
.
bind
(
resp
)
;
let
sendError
=
resp
.
sendError
.
bind
(
resp
)
;
cmd
.
id
=
cmdId
;
let
req
=
Task
.
spawn
(
function
*
(
)
{
let
fn
=
this
.
driver
.
commands
[
cmd
.
name
]
;
if
(
typeof
fn
=
=
"
undefined
"
)
{
throw
new
UnknownCommandError
(
cmd
.
name
)
;
}
let
rv
=
yield
fn
.
bind
(
this
.
driver
)
(
cmd
resp
)
;
if
(
typeof
rv
!
=
"
undefined
"
)
{
if
(
typeof
rv
!
=
"
object
"
)
{
resp
.
body
=
{
value
:
rv
}
;
}
else
{
resp
.
body
=
rv
;
}
}
}
.
bind
(
this
)
)
;
req
.
then
(
sendResponse
sendError
)
.
catch
(
error
.
report
)
;
}
;
