"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
windowManager
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
AppInfo
:
"
chrome
:
/
/
marionette
/
content
/
appinfo
.
js
"
browser
:
"
chrome
:
/
/
marionette
/
content
/
browser
.
js
"
error
:
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
Log
:
"
chrome
:
/
/
marionette
/
content
/
log
.
js
"
waitForEvent
:
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
waitForObserverTopic
:
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
class
WindowManager
{
constructor
(
)
{
this
.
_browserIds
=
new
WeakMap
(
)
;
}
get
windowHandles
(
)
{
const
windowHandles
=
[
]
;
for
(
const
win
of
this
.
windows
)
{
const
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
if
(
tabBrowser
&
&
tabBrowser
.
tabs
)
{
for
(
const
tab
of
tabBrowser
.
tabs
)
{
const
winId
=
this
.
getIdForBrowser
(
browser
.
getBrowserForTab
(
tab
)
)
;
if
(
winId
!
=
=
null
)
{
windowHandles
.
push
(
winId
)
;
}
}
}
}
return
windowHandles
;
}
get
chromeWindowHandles
(
)
{
const
chromeWindowHandles
=
[
]
;
for
(
const
win
of
this
.
windows
)
{
chromeWindowHandles
.
push
(
this
.
getIdForWindow
(
win
)
)
;
}
return
chromeWindowHandles
;
}
get
windows
(
)
{
return
Services
.
wm
.
getEnumerator
(
null
)
;
}
findWindowByHandle
(
handle
)
{
for
(
const
win
of
this
.
windows
)
{
const
chromeWindowId
=
this
.
getIdForWindow
(
win
)
;
if
(
chromeWindowId
=
=
handle
)
{
return
this
.
getWindowProperties
(
win
)
;
}
const
tabBrowser
=
browser
.
getTabBrowser
(
win
)
;
if
(
tabBrowser
&
&
tabBrowser
.
tabs
)
{
for
(
let
i
=
0
;
i
<
tabBrowser
.
tabs
.
length
;
+
+
i
)
{
let
contentBrowser
=
browser
.
getBrowserForTab
(
tabBrowser
.
tabs
[
i
]
)
;
let
contentWindowId
=
this
.
getIdForBrowser
(
contentBrowser
)
;
if
(
contentWindowId
=
=
handle
)
{
return
this
.
getWindowProperties
(
win
{
tabIndex
:
i
}
)
;
}
}
}
}
return
null
;
}
getWindowProperties
(
win
options
=
{
}
)
{
if
(
!
(
win
instanceof
Window
)
)
{
throw
new
TypeError
(
"
Invalid
argument
expected
a
Window
object
"
)
;
}
return
{
win
id
:
win
.
browsingContext
.
id
hasTabBrowser
:
!
!
browser
.
getTabBrowser
(
win
)
tabIndex
:
options
.
tabIndex
}
;
}
updateIdForBrowser
(
browserElement
newId
)
{
this
.
_browserIds
.
set
(
browserElement
.
permanentKey
newId
)
;
}
getIdForBrowser
(
browserElement
)
{
if
(
browserElement
=
=
=
null
)
{
return
null
;
}
const
permKey
=
browserElement
.
permanentKey
;
if
(
this
.
_browserIds
.
has
(
permKey
)
)
{
return
this
.
_browserIds
.
get
(
permKey
)
;
}
const
winId
=
browserElement
.
browsingContext
.
id
;
if
(
winId
)
{
this
.
_browserIds
.
set
(
permKey
winId
)
;
return
winId
;
}
return
null
;
}
getIdForWindow
(
win
)
{
return
win
.
browsingContext
.
id
;
}
async
closeWindow
(
win
)
{
const
destroyed
=
waitForObserverTopic
(
"
xul
-
window
-
destroyed
"
{
checkFn
:
(
)
=
>
win
&
&
win
.
closed
}
)
;
win
.
close
(
)
;
return
destroyed
;
}
async
focusWindow
(
win
)
{
if
(
Services
.
focus
.
activeWindow
!
=
win
)
{
let
activated
=
waitForEvent
(
win
"
activate
"
)
;
let
focused
=
waitForEvent
(
win
"
focus
"
{
capture
:
true
}
)
;
win
.
focus
(
)
;
await
Promise
.
all
(
[
activated
focused
]
)
;
}
}
async
openBrowserWindow
(
openerWindow
focus
=
false
isPrivate
=
false
)
{
switch
(
AppInfo
.
name
)
{
case
"
Firefox
"
:
const
win
=
openerWindow
.
OpenBrowserWindow
(
{
private
:
isPrivate
}
)
;
const
activated
=
waitForEvent
(
win
"
activate
"
)
;
const
focused
=
waitForEvent
(
win
"
focus
"
{
capture
:
true
}
)
;
const
startup
=
waitForObserverTopic
(
"
browser
-
delayed
-
startup
-
finished
"
{
checkFn
:
subject
=
>
subject
=
=
win
}
)
;
win
.
focus
(
)
;
await
Promise
.
all
(
[
activated
focused
startup
]
)
;
if
(
!
focus
)
{
await
this
.
focusWindow
(
openerWindow
)
;
}
return
win
;
default
:
throw
new
error
.
UnsupportedOperationError
(
openWindow
(
)
not
supported
in
{
AppInfo
.
name
}
)
;
}
}
}
const
windowManager
=
new
WindowManager
(
)
;
