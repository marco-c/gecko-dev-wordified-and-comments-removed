"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Emulator
"
]
;
this
.
Emulator
=
function
(
sendToEmulatorFn
)
{
this
.
sendToEmulator
=
sendToEmulatorFn
;
}
;
Emulator
.
prototype
.
command
=
function
(
cmd
resCb
errCb
)
{
assertDefined
(
cmd
"
runEmulatorCmd
"
)
;
this
.
sendToEmulator
(
"
runEmulatorCmd
"
{
emulator_cmd
:
cmd
}
resCb
errCb
)
;
}
;
Emulator
.
prototype
.
shell
=
function
(
args
resCb
errCb
)
{
assertDefined
(
args
"
runEmulatorShell
"
)
;
this
.
sendToEmulator
(
"
runEmulatorShell
"
{
emulator_shell
:
args
}
resCb
errCb
)
;
}
;
Emulator
.
prototype
.
processMessage
=
function
(
msg
)
{
let
resCb
=
this
.
resultCallback
(
msg
.
json
.
id
)
;
let
errCb
=
this
.
errorCallback
(
msg
.
json
.
id
)
;
switch
(
msg
.
name
)
{
case
"
Marionette
:
runEmulatorCmd
"
:
this
.
command
(
msg
.
json
.
command
resCb
errCb
)
;
break
;
case
"
Marionette
:
runEmulatorShell
"
:
this
.
shell
(
msg
.
json
.
arguments
resCb
errCb
)
;
break
;
}
}
;
Emulator
.
prototype
.
resultCallback
=
function
(
msgId
)
{
return
res
=
>
this
.
sendResult
(
{
result
:
res
id
:
msgId
}
)
;
}
;
Emulator
.
prototype
.
errorCallback
=
function
(
msgId
)
{
return
err
=
>
this
.
sendResult
(
{
error
:
err
id
:
msgId
}
)
;
}
;
Emulator
.
prototype
.
sendResult
=
function
(
msg
)
{
this
.
sendToListener
(
"
emulatorCmdResult
"
msg
)
;
}
;
Emulator
.
prototype
.
receiveMessage
=
function
(
msg
)
{
try
{
this
.
processMessage
(
msg
)
;
}
catch
(
e
)
{
this
.
sendResult
(
{
error
:
{
e
.
name
}
:
{
e
.
message
}
id
:
msg
.
json
.
id
}
)
;
}
}
;
Emulator
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIMessageListener
Ci
.
nsISupportsWeakReference
]
)
;
function
assertDefined
(
arg
action
)
{
if
(
typeof
arg
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Not
enough
arguments
to
"
+
action
)
;
}
}
