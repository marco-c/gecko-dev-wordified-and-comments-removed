"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
emulator
"
]
;
this
.
emulator
=
{
}
;
emulator
.
EmulatorService
=
class
{
constructor
(
sendToEmulatorFn
)
{
this
.
sendToEmulator
=
sendToEmulatorFn
;
}
command
(
cmd
resCb
errCb
)
{
if
(
arguments
.
length
<
1
)
{
throw
new
ValueError
(
"
Not
enough
arguments
"
)
;
}
this
.
sendToEmulator
(
"
runEmulatorCmd
"
{
emulator_cmd
:
cmd
}
resCb
errCb
)
;
}
shell
(
args
resCb
errCb
)
{
if
(
arguments
.
length
<
1
)
{
throw
new
ValueError
(
"
Not
enough
arguments
"
)
;
}
this
.
sendToEmulator
(
"
runEmulatorShell
"
{
emulator_shell
:
args
}
resCb
errCb
)
;
}
processMessage
(
msg
)
{
let
resCb
=
this
.
resultCallback
(
msg
.
json
.
id
)
;
let
errCb
=
this
.
errorCallback
(
msg
.
json
.
id
)
;
switch
(
msg
.
name
)
{
case
"
Marionette
:
runEmulatorCmd
"
:
this
.
command
(
msg
.
json
.
arguments
resCb
errCb
)
;
break
;
case
"
Marionette
:
runEmulatorShell
"
:
this
.
shell
(
msg
.
json
.
arguments
resCb
errCb
)
;
break
;
}
}
resultCallback
(
uuid
)
{
return
res
=
>
this
.
sendResult
(
{
value
:
res
id
:
uuid
}
)
;
}
errorCallback
(
uuid
)
{
return
err
=
>
this
.
sendResult
(
{
error
:
err
id
:
uuid
}
)
;
}
sendResult
(
msg
)
{
this
.
sendToListener
(
"
listenerResponse
"
msg
)
;
}
receiveMessage
(
msg
)
{
let
uuid
=
msg
.
json
.
id
;
try
{
this
.
processMessage
(
msg
)
;
}
catch
(
e
)
{
this
.
sendResult
(
{
error
:
{
e
.
name
}
:
{
e
.
message
}
id
:
uuid
}
)
;
}
}
}
;
emulator
.
EmulatorService
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIMessageListener
Ci
.
nsISupportsWeakReference
]
)
;
emulator
.
EmulatorServiceClient
=
class
{
constructor
(
chromeProxy
)
{
this
.
chrome
=
chromeProxy
;
}
*
command
(
cmd
cb
)
{
let
res
=
yield
this
.
chrome
.
runEmulatorCmd
(
cmd
)
;
if
(
cb
)
{
cb
(
res
)
;
}
}
*
shell
(
args
cb
)
{
let
res
=
yield
this
.
chrome
.
runEmulatorShell
(
args
)
;
if
(
cb
)
{
cb
(
res
)
;
}
}
}
;
emulator
.
Adapter
=
class
{
constructor
(
emulator
)
{
this
.
emulator
=
emulator
;
}
get
exports
(
)
{
return
new
Map
(
[
[
"
runEmulatorCmd
"
this
.
runEmulatorCmd
.
bind
(
this
)
]
[
"
runEmulatorShell
"
this
.
runEmulatorShell
.
bind
(
this
)
]
]
)
;
}
runEmulatorCmd
(
cmd
cb
)
{
this
.
yield
(
this
.
emulator
.
command
(
cmd
cb
)
)
;
}
runEmulatorShell
(
args
cb
)
{
this
.
yield
(
this
.
emulator
.
shell
(
args
cb
)
)
;
}
yield
(
promise
)
{
Task
.
spawn
(
function
(
)
{
yield
promise
;
}
)
;
}
}
;
