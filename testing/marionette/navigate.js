"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
navigate
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
error
:
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
EventDispatcher
:
"
chrome
:
/
/
marionette
/
content
/
actors
/
MarionetteEventsParent
.
jsm
"
Log
:
"
chrome
:
/
/
marionette
/
content
/
log
.
js
"
modal
:
"
chrome
:
/
/
marionette
/
content
/
modal
.
js
"
PageLoadStrategy
:
"
chrome
:
/
/
marionette
/
content
/
capabilities
.
js
"
TimedPromise
:
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
truncate
:
"
chrome
:
/
/
marionette
/
content
/
format
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
const
TIMEOUT_BEFOREUNLOAD_EVENT
=
200
;
const
TIMEOUT_UNLOAD_EVENT
=
5000
;
this
.
navigate
=
{
}
;
function
checkReadyState
(
pageLoadStrategy
eventData
=
{
}
)
{
const
{
documentURI
readyState
}
=
eventData
;
const
result
=
{
error
:
null
finished
:
false
}
;
switch
(
readyState
)
{
case
"
interactive
"
:
if
(
documentURI
.
startsWith
(
"
about
:
certerror
"
)
)
{
result
.
error
=
new
error
.
InsecureCertificateError
(
)
;
result
.
finished
=
true
;
}
else
if
(
/
about
:
.
*
(
error
)
\
?
/
.
exec
(
documentURI
)
)
{
result
.
error
=
new
error
.
UnknownError
(
Reached
error
page
:
{
documentURI
}
)
;
result
.
finished
=
true
;
}
else
if
(
(
pageLoadStrategy
=
=
=
PageLoadStrategy
.
Eager
&
&
documentURI
!
=
"
about
:
blank
"
)
|
|
/
about
:
blocked
\
?
/
.
exec
(
documentURI
)
)
{
result
.
finished
=
true
;
}
break
;
case
"
complete
"
:
result
.
finished
=
true
;
break
;
}
return
result
;
}
navigate
.
isLoadEventExpected
=
function
(
current
options
=
{
}
)
{
const
{
browsingContext
future
target
}
=
options
;
if
(
typeof
current
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Expected
at
least
one
URL
"
)
;
}
if
(
[
"
_parent
"
"
_top
"
]
.
includes
(
target
)
&
&
!
browsingContext
)
{
throw
new
TypeError
(
"
Expected
browsingContext
when
target
is
_parent
or
_top
"
)
;
}
if
(
target
=
=
=
"
_blank
"
|
|
(
target
=
=
=
"
_parent
"
&
&
browsingContext
.
parent
)
|
|
(
target
=
=
=
"
_top
"
&
&
browsingContext
.
top
!
=
browsingContext
)
)
{
return
false
;
}
if
(
typeof
future
=
=
"
undefined
"
)
{
return
true
;
}
if
(
future
.
protocol
=
=
"
javascript
:
"
)
{
return
false
;
}
if
(
current
.
href
.
includes
(
"
#
"
)
&
&
future
.
href
.
includes
(
"
#
"
)
&
&
current
.
hash
=
=
=
future
.
hash
)
{
return
false
;
}
return
true
;
}
;
navigate
.
navigateTo
=
async
function
(
browsingContext
url
)
{
const
opts
=
{
loadFlags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_IS_LINK
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
;
browsingContext
.
loadURI
(
url
opts
)
;
}
;
navigate
.
refresh
=
async
function
(
browsingContext
)
{
const
flags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
;
browsingContext
.
reload
(
flags
)
;
}
;
navigate
.
waitForNavigationCompleted
=
async
function
waitForNavigationCompleted
(
driver
callback
options
=
{
}
)
{
const
{
browsingContextFn
=
driver
.
getBrowsingContext
.
bind
(
driver
)
loadEventExpected
=
true
requireBeforeUnload
=
true
}
=
options
;
const
chromeWindow
=
browsingContextFn
(
)
.
topChromeWindow
;
const
pageLoadStrategy
=
driver
.
capabilities
.
get
(
"
pageLoadStrategy
"
)
;
if
(
!
loadEventExpected
|
|
pageLoadStrategy
=
=
=
PageLoadStrategy
.
None
)
{
await
callback
(
)
;
return
Promise
.
resolve
(
)
;
}
let
rejectNavigation
;
let
resolveNavigation
;
let
seenBeforeUnload
=
false
;
let
seenUnload
=
false
;
let
unloadTimer
;
const
checkDone
=
(
{
finished
error
}
)
=
>
{
if
(
finished
)
{
if
(
error
)
{
rejectNavigation
(
error
)
;
}
else
{
resolveNavigation
(
)
;
}
}
}
;
const
onDialogOpened
=
(
action
dialog
win
)
=
>
{
if
(
win
!
=
=
chromeWindow
)
{
return
;
}
if
(
action
=
=
=
modal
.
ACTION_OPENED
)
{
logger
.
trace
(
"
Canceled
page
load
listener
because
a
dialog
opened
"
)
;
checkDone
(
{
finished
:
true
}
)
;
}
}
;
const
onTimer
=
timer
=
>
{
if
(
seenBeforeUnload
)
{
seenBeforeUnload
=
false
;
unloadTimer
.
initWithCallback
(
onTimer
TIMEOUT_UNLOAD_EVENT
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
else
if
(
!
seenUnload
)
{
logger
.
trace
(
"
Canceled
page
load
listener
because
no
navigation
"
+
"
has
been
detected
"
)
;
checkDone
(
{
finished
:
true
}
)
;
}
}
;
const
onNavigation
=
(
eventName
data
)
=
>
{
if
(
data
.
browsingContext
!
=
browsingContextFn
(
)
)
{
return
;
}
logger
.
trace
(
truncate
Received
event
{
data
.
type
}
for
{
data
.
documentURI
}
)
;
switch
(
data
.
type
)
{
case
"
beforeunload
"
:
seenBeforeUnload
=
true
;
break
;
case
"
pagehide
"
:
seenUnload
=
true
;
break
;
case
"
hashchange
"
:
case
"
popstate
"
:
checkDone
(
{
finished
:
true
}
)
;
break
;
case
"
DOMContentLoaded
"
:
case
"
pageshow
"
:
if
(
!
seenUnload
)
{
return
;
}
const
result
=
checkReadyState
(
pageLoadStrategy
data
)
;
checkDone
(
result
)
;
break
;
}
}
;
const
onBrowsingContextDiscarded
=
(
subject
topic
)
=
>
{
if
(
subject
=
=
browsingContextFn
(
)
&
&
!
subject
.
currentWindowGlobal
)
{
logger
.
trace
(
"
Canceled
page
load
listener
"
+
because
browsing
context
with
id
{
subject
.
id
}
has
been
removed
)
;
checkDone
(
{
finished
:
true
}
)
;
}
}
;
const
onUnload
=
event
=
>
{
logger
.
trace
(
"
Canceled
page
load
listener
"
+
"
because
the
top
-
browsing
context
has
been
closed
"
)
;
checkDone
(
{
finished
:
true
}
)
;
}
;
chromeWindow
.
addEventListener
(
"
TabClose
"
onUnload
)
;
chromeWindow
.
addEventListener
(
"
unload
"
onUnload
)
;
driver
.
dialogObserver
.
add
(
onDialogOpened
)
;
Services
.
obs
.
addObserver
(
onBrowsingContextDiscarded
"
browsing
-
context
-
discarded
"
)
;
EventDispatcher
.
on
(
"
page
-
load
"
onNavigation
)
;
return
new
TimedPromise
(
async
(
resolve
reject
)
=
>
{
rejectNavigation
=
reject
;
resolveNavigation
=
resolve
;
try
{
await
callback
(
)
;
if
(
!
requireBeforeUnload
)
{
unloadTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
unloadTimer
.
initWithCallback
(
onTimer
TIMEOUT_BEFOREUNLOAD_EVENT
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
}
catch
(
e
)
{
if
(
e
.
name
!
=
=
"
AbortError
"
)
{
checkDone
(
{
finished
:
true
error
:
e
}
)
;
}
}
}
{
timeout
:
driver
.
timeouts
.
pageLoad
}
)
.
finally
(
(
)
=
>
{
Services
.
obs
.
removeObserver
(
onBrowsingContextDiscarded
"
browsing
-
context
-
discarded
"
)
;
chromeWindow
.
removeEventListener
(
"
TabClose
"
onUnload
)
;
chromeWindow
.
removeEventListener
(
"
unload
"
onUnload
)
;
driver
.
dialogObserver
?
.
remove
(
onDialogOpened
)
;
unloadTimer
?
.
cancel
(
)
;
EventDispatcher
.
off
(
"
page
-
load
"
onNavigation
)
;
}
)
;
}
;
