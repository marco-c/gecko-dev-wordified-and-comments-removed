"
use
strict
"
;
const
{
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
frame
"
]
;
this
.
frame
=
{
}
;
const
FRAME_SCRIPT
=
"
chrome
:
/
/
marionette
/
content
/
listener
.
js
"
;
frame
.
RemoteFrame
=
function
(
windowId
frameId
)
{
this
.
windowId
=
windowId
;
this
.
frameId
=
frameId
;
this
.
targetFrameId
=
this
.
frameId
;
this
.
remoteFrames
=
[
]
;
}
;
frame
.
Manager
=
class
{
constructor
(
driver
)
{
this
.
currentRemoteFrame
=
null
;
this
.
previousRemoteFrame
=
null
;
this
.
driver
=
driver
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
MarionetteFrame
:
getCurrentFrameId
"
:
if
(
this
.
currentRemoteFrame
!
=
=
null
)
{
return
this
.
currentRemoteFrame
.
frameId
;
}
}
}
getOopFrame
(
winId
frameId
)
{
let
outerWin
=
Services
.
wm
.
getOuterWindowWithId
(
winId
)
;
let
f
=
outerWin
.
document
.
getElementsByTagName
(
"
iframe
"
)
[
frameId
]
;
return
f
;
}
getFrameMM
(
winId
frameId
)
{
let
oopFrame
=
this
.
getOopFrame
(
winId
frameId
)
;
let
mm
=
oopFrame
.
frameLoader
.
messageManager
;
return
mm
;
}
switchToFrame
(
winId
frameId
)
{
let
oopFrame
=
this
.
getOopFrame
(
winId
frameId
)
;
let
mm
=
this
.
getFrameMM
(
winId
frameId
)
;
for
(
let
i
=
0
;
i
<
this
.
remoteFrames
.
length
;
i
+
+
)
{
let
f
=
this
.
remoteFrames
[
i
]
;
let
fmm
=
f
.
messageManager
.
get
(
)
;
try
{
fmm
.
sendAsyncMessage
(
"
aliveCheck
"
{
}
)
;
}
catch
(
e
)
{
if
(
e
.
result
=
=
Cr
.
NS_ERROR_NOT_INITIALIZED
)
{
this
.
remoteFrames
.
splice
(
i
-
-
1
)
;
continue
;
}
}
if
(
fmm
=
=
mm
)
{
this
.
currentRemoteFrame
=
f
;
this
.
addMessageManagerListeners
(
mm
)
;
return
oopFrame
.
id
;
}
}
this
.
addMessageManagerListeners
(
mm
)
;
let
f
=
new
frame
.
RemoteFrame
(
winId
frameId
)
;
f
.
messageManager
=
Cu
.
getWeakReference
(
mm
)
;
this
.
remoteFrames
.
push
(
f
)
;
this
.
currentRemoteFrame
=
f
;
mm
.
loadFrameScript
(
FRAME_SCRIPT
true
true
)
;
return
oopFrame
.
id
;
}
addMessageManagerListeners
(
mm
)
{
mm
.
addWeakMessageListener
(
"
Marionette
:
ok
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
done
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
error
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
emitTouchEvent
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
switchedToFrame
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
getVisibleCookies
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
register
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
listenersAttached
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
Marionette
:
GetLogLevel
"
this
.
driver
)
;
mm
.
addWeakMessageListener
(
"
MarionetteFrame
:
getCurrentFrameId
"
this
)
;
}
removeMessageManagerListeners
(
mm
)
{
mm
.
removeWeakMessageListener
(
"
Marionette
:
ok
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
done
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
error
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
switchedToFrame
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
getVisibleCookies
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
getImportedScripts
"
this
.
driver
.
importedScripts
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
GetLogLevel
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
listenersAttached
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
Marionette
:
register
"
this
.
driver
)
;
mm
.
removeWeakMessageListener
(
"
MarionetteFrame
:
getCurrentFrameId
"
this
)
;
}
}
;
frame
.
Manager
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIMessageListener
Ci
.
nsISupportsWeakReference
]
)
;
