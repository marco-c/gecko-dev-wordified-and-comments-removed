"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
driver
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
emulator
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
error
.
js
"
)
;
Cu
.
import
(
"
chrome
:
/
/
marionette
/
content
/
message
.
js
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Dispatcher
"
]
;
const
PROTOCOL_VERSION
=
3
;
const
logger
=
Log
.
repository
.
getLogger
(
"
Marionette
"
)
;
this
.
Dispatcher
=
function
(
connId
transport
driverFactory
)
{
this
.
connId
=
connId
;
this
.
conn
=
transport
;
this
.
conn
.
hooks
=
this
;
this
.
onclose
=
null
;
this
.
lastId
=
0
;
this
.
emulator
=
new
Emulator
(
this
.
sendEmulator
.
bind
(
this
)
)
;
this
.
driver
=
driverFactory
(
this
.
emulator
)
;
this
.
commands_
=
new
Map
(
)
;
}
;
Dispatcher
.
prototype
.
onClosed
=
function
(
reason
)
{
this
.
driver
.
sessionTearDown
(
)
;
if
(
this
.
onclose
)
{
this
.
onclose
(
this
)
;
}
}
;
Dispatcher
.
prototype
.
onPacket
=
function
(
data
)
{
let
msg
=
Message
.
fromMsg
(
data
)
;
msg
.
origin
=
MessageOrigin
.
Client
;
this
.
log_
(
msg
)
;
if
(
msg
instanceof
Response
)
{
let
cmd
=
this
.
commands_
.
get
(
msg
.
id
)
;
this
.
commands_
.
delete
(
msg
.
id
)
;
cmd
.
onresponse
(
msg
)
;
}
else
if
(
msg
instanceof
Command
)
{
this
.
lastId
=
msg
.
id
;
this
.
execute
(
msg
)
;
}
}
;
Dispatcher
.
prototype
.
execute
=
function
(
cmd
)
{
let
resp
=
new
Response
(
cmd
.
id
this
.
send
.
bind
(
this
)
)
;
let
sendResponse
=
(
)
=
>
resp
.
sendConditionally
(
resp
=
>
!
resp
.
sent
)
;
let
sendError
=
resp
.
sendError
.
bind
(
resp
)
;
let
req
=
Task
.
spawn
(
function
*
(
)
{
let
fn
=
this
.
driver
.
commands
[
cmd
.
name
]
;
if
(
typeof
fn
=
=
"
undefined
"
)
{
throw
new
UnknownCommandError
(
cmd
.
name
)
;
}
let
rv
=
yield
fn
.
bind
(
this
.
driver
)
(
cmd
resp
)
;
if
(
typeof
rv
!
=
"
undefined
"
)
{
if
(
typeof
rv
!
=
"
object
"
)
{
resp
.
body
=
{
value
:
rv
}
;
}
else
{
resp
.
body
=
rv
;
}
}
}
.
bind
(
this
)
)
;
req
.
then
(
sendResponse
sendError
)
.
catch
(
error
.
report
)
;
}
;
Dispatcher
.
prototype
.
sendError
=
function
(
err
cmdId
)
{
let
resp
=
new
Response
(
cmdId
this
.
send
.
bind
(
this
)
)
;
resp
.
sendError
(
err
)
;
}
;
Dispatcher
.
prototype
.
sayHello
=
function
(
)
{
let
whatHo
=
{
applicationType
:
"
gecko
"
marionetteProtocol
:
PROTOCOL_VERSION
}
;
this
.
sendRaw
(
whatHo
)
;
}
;
Dispatcher
.
prototype
.
sendEmulator
=
function
(
name
params
resCb
errCb
)
{
let
cmd
=
new
Command
(
+
+
this
.
lastId
name
params
)
;
cmd
.
onresult
=
resCb
;
cmd
.
onerror
=
errCb
;
this
.
send
(
cmd
)
;
}
;
Dispatcher
.
prototype
.
send
=
function
(
msg
)
{
msg
.
origin
=
MessageOrigin
.
Server
;
if
(
msg
instanceof
Command
)
{
this
.
commands_
.
set
(
msg
.
id
msg
)
;
this
.
sendToEmulator
(
msg
)
;
}
else
if
(
msg
instanceof
Response
)
{
this
.
sendToClient
(
msg
)
;
}
}
;
Dispatcher
.
prototype
.
sendToEmulator
=
function
(
cmd
)
{
this
.
sendMessage
(
cmd
)
;
}
;
Dispatcher
.
prototype
.
sendToClient
=
function
(
resp
)
{
this
.
driver
.
responseCompleted
(
)
;
this
.
sendMessage
(
resp
)
;
}
;
Dispatcher
.
prototype
.
sendMessage
=
function
(
msg
)
{
this
.
log_
(
msg
)
;
let
payload
=
msg
.
toMsg
(
)
;
this
.
sendRaw
(
payload
)
;
}
;
Dispatcher
.
prototype
.
sendRaw
=
function
(
payload
)
{
this
.
conn
.
send
(
payload
)
;
}
;
Dispatcher
.
prototype
.
log_
=
function
(
msg
)
{
let
a
=
(
msg
.
origin
=
=
MessageOrigin
.
Client
?
"
-
>
"
:
"
<
-
"
)
;
let
s
=
JSON
.
stringify
(
msg
.
toMsg
(
)
)
;
logger
.
trace
(
this
.
connId
+
a
+
s
)
;
}
;
