"
use
strict
"
;
const
CC
=
Components
.
Constructor
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
StreamUtils
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
stream
-
utils
.
js
"
{
}
)
;
const
{
BulkPacket
JSONPacket
Packet
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
packets
.
js
"
{
}
)
;
const
{
executeSoon
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
sync
.
js
"
{
}
)
;
const
flags
=
{
wantVerbose
:
false
wantLogging
:
false
}
;
const
dumpv
=
flags
.
wantVerbose
?
function
(
msg
)
{
dump
(
msg
+
"
\
n
"
)
;
}
:
function
(
)
{
}
;
const
Pipe
=
CC
(
"
mozilla
.
org
/
pipe
;
1
"
"
nsIPipe
"
"
init
"
)
;
const
ScriptableInputStream
=
CC
(
"
mozilla
.
org
/
scriptableinputstream
;
1
"
"
nsIScriptableInputStream
"
"
init
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
DebuggerTransport
"
]
;
const
PACKET_HEADER_MAX
=
200
;
function
DebuggerTransport
(
input
output
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_input
=
input
;
this
.
_scriptableInput
=
new
ScriptableInputStream
(
input
)
;
this
.
_output
=
output
;
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
this
.
_outgoing
=
[
]
;
this
.
hooks
=
null
;
this
.
active
=
false
;
this
.
_incomingEnabled
=
true
;
this
.
_outgoingEnabled
=
true
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
}
DebuggerTransport
.
prototype
=
{
send
(
object
)
{
this
.
emit
(
"
send
"
object
)
;
let
packet
=
new
JSONPacket
(
this
)
;
packet
.
object
=
object
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
}
startBulkSend
(
header
)
{
this
.
emit
(
"
startbulksend
"
header
)
;
let
packet
=
new
BulkPacket
(
this
)
;
packet
.
header
=
header
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
return
packet
.
streamReadyForWriting
;
}
close
(
reason
)
{
this
.
emit
(
"
close
"
reason
)
;
this
.
active
=
false
;
this
.
_input
.
close
(
)
;
this
.
_scriptableInput
.
close
(
)
;
this
.
_output
.
close
(
)
;
this
.
_destroyIncoming
(
)
;
this
.
_destroyAllOutgoing
(
)
;
if
(
this
.
hooks
)
{
this
.
hooks
.
onClosed
(
reason
)
;
this
.
hooks
=
null
;
}
if
(
reason
)
{
dumpv
(
"
Transport
closed
:
"
+
reason
)
;
}
else
{
dumpv
(
"
Transport
closed
.
"
)
;
}
}
get
_currentOutgoing
(
)
{
return
this
.
_outgoing
[
0
]
;
}
_flushOutgoing
(
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
if
(
this
.
_currentOutgoing
.
done
)
{
this
.
_finishCurrentOutgoing
(
)
;
}
if
(
this
.
_outgoing
.
length
>
0
)
{
let
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_output
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseOutgoing
(
)
{
this
.
_outgoingEnabled
=
false
;
}
resumeOutgoing
(
)
{
this
.
_outgoingEnabled
=
true
;
this
.
_flushOutgoing
(
)
;
}
onOutputStreamReady
(
stream
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
try
{
this
.
_currentOutgoing
.
write
(
stream
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
return
;
}
throw
e
;
}
this
.
_flushOutgoing
(
)
;
}
_finishCurrentOutgoing
(
)
{
if
(
this
.
_currentOutgoing
)
{
this
.
_currentOutgoing
.
destroy
(
)
;
this
.
_outgoing
.
shift
(
)
;
}
}
_destroyAllOutgoing
(
)
{
for
(
let
packet
of
this
.
_outgoing
)
{
packet
.
destroy
(
)
;
}
this
.
_outgoing
=
[
]
;
}
ready
(
)
{
this
.
active
=
true
;
this
.
_waitForIncoming
(
)
;
}
_waitForIncoming
(
)
{
if
(
this
.
_incomingEnabled
)
{
let
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_input
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseIncoming
(
)
{
this
.
_incomingEnabled
=
false
;
}
resumeIncoming
(
)
{
this
.
_incomingEnabled
=
true
;
this
.
_flushIncoming
(
)
;
this
.
_waitForIncoming
(
)
;
}
onInputStreamReady
(
stream
)
{
try
{
while
(
stream
.
available
(
)
&
&
this
.
_incomingEnabled
&
&
this
.
_processIncoming
(
stream
stream
.
available
(
)
)
)
{
}
this
.
_waitForIncoming
(
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
}
else
{
throw
e
;
}
}
}
_processIncoming
(
stream
count
)
{
dumpv
(
"
Data
available
:
"
+
count
)
;
if
(
!
count
)
{
dumpv
(
"
Nothing
to
read
skipping
"
)
;
return
false
;
}
try
{
if
(
!
this
.
_incoming
)
{
dumpv
(
"
Creating
a
new
packet
from
incoming
"
)
;
if
(
!
this
.
_readHeader
(
stream
)
)
{
return
false
;
}
this
.
_incoming
=
Packet
.
fromHeader
(
this
.
_incomingHeader
this
)
;
if
(
!
this
.
_incoming
)
{
throw
new
Error
(
"
No
packet
types
for
header
:
"
+
this
.
_incomingHeader
)
;
}
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Existing
packet
incomplete
keep
reading
"
)
;
this
.
_incoming
.
read
(
stream
this
.
_scriptableInput
)
;
}
}
catch
(
e
)
{
dump
(
Error
reading
incoming
packet
:
(
{
e
}
-
{
e
.
stack
}
)
\
n
)
;
this
.
close
(
)
;
return
false
;
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Packet
not
done
wait
for
more
"
)
;
return
true
;
}
this
.
_flushIncoming
(
)
;
return
true
;
}
_readHeader
(
)
{
let
amountToRead
=
PACKET_HEADER_MAX
-
this
.
_incomingHeader
.
length
;
this
.
_incomingHeader
+
=
StreamUtils
.
delimitedRead
(
this
.
_scriptableInput
"
:
"
amountToRead
)
;
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Header
read
:
"
+
this
.
_incomingHeader
)
;
}
if
(
this
.
_incomingHeader
.
endsWith
(
"
:
"
)
)
{
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Found
packet
header
successfully
:
"
+
this
.
_incomingHeader
)
;
}
return
true
;
}
if
(
this
.
_incomingHeader
.
length
>
=
PACKET_HEADER_MAX
)
{
throw
new
Error
(
"
Failed
to
parse
packet
header
!
"
)
;
}
return
false
;
}
_flushIncoming
(
)
{
if
(
!
this
.
_incoming
.
done
)
{
return
;
}
if
(
flags
.
wantLogging
)
{
dumpv
(
"
Got
:
"
+
this
.
_incoming
)
;
}
this
.
_destroyIncoming
(
)
;
}
_onJSONObjectReady
(
object
)
{
executeSoon
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
emit
(
"
packet
"
object
)
;
this
.
hooks
.
onPacket
(
object
)
;
}
}
)
;
}
_onBulkReadReady
(
.
.
.
args
)
{
executeSoon
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
emit
(
"
bulkpacket
"
.
.
.
args
)
;
this
.
hooks
.
onBulkPacket
(
.
.
.
args
)
;
}
}
)
;
}
_destroyIncoming
(
)
{
if
(
this
.
_incoming
)
{
this
.
_incoming
.
destroy
(
)
;
}
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
}
}
;
