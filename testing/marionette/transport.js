"
use
strict
"
;
const
{
Constructor
:
CC
classes
:
Cc
results
:
Cr
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
StreamUtils
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
stream
-
utils
.
js
"
{
}
)
;
const
{
Packet
JSONPacket
BulkPacket
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
marionette
/
content
/
packets
.
js
"
{
}
)
;
const
defer
=
function
(
)
{
let
deferred
=
{
promise
:
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
resolve
=
resolve
;
deferred
.
reject
=
reject
;
}
)
}
;
return
deferred
;
}
;
const
executeSoon
=
function
(
func
)
{
Services
.
tm
.
dispatchToMainThread
(
func
)
;
}
;
const
flags
=
{
wantVerbose
:
false
wantLogging
:
false
}
;
const
dumpv
=
flags
.
wantVerbose
?
function
(
msg
)
{
dump
(
msg
+
"
\
n
"
)
;
}
:
function
(
)
{
}
;
const
Pipe
=
CC
(
"
mozilla
.
org
/
pipe
;
1
"
"
nsIPipe
"
"
init
"
)
;
const
ScriptableInputStream
=
CC
(
"
mozilla
.
org
/
scriptableinputstream
;
1
"
"
nsIScriptableInputStream
"
"
init
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
DebuggerTransport
"
]
;
const
PACKET_HEADER_MAX
=
200
;
function
DebuggerTransport
(
input
output
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_input
=
input
;
this
.
_scriptableInput
=
new
ScriptableInputStream
(
input
)
;
this
.
_output
=
output
;
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
this
.
_outgoing
=
[
]
;
this
.
hooks
=
null
;
this
.
active
=
false
;
this
.
_incomingEnabled
=
true
;
this
.
_outgoingEnabled
=
true
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
}
DebuggerTransport
.
prototype
=
{
send
(
object
)
{
this
.
emit
(
"
send
"
object
)
;
let
packet
=
new
JSONPacket
(
this
)
;
packet
.
object
=
object
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
}
startBulkSend
(
header
)
{
this
.
emit
(
"
startbulksend
"
header
)
;
let
packet
=
new
BulkPacket
(
this
)
;
packet
.
header
=
header
;
this
.
_outgoing
.
push
(
packet
)
;
this
.
_flushOutgoing
(
)
;
return
packet
.
streamReadyForWriting
;
}
close
(
reason
)
{
this
.
emit
(
"
close
"
reason
)
;
this
.
active
=
false
;
this
.
_input
.
close
(
)
;
this
.
_scriptableInput
.
close
(
)
;
this
.
_output
.
close
(
)
;
this
.
_destroyIncoming
(
)
;
this
.
_destroyAllOutgoing
(
)
;
if
(
this
.
hooks
)
{
this
.
hooks
.
onClosed
(
reason
)
;
this
.
hooks
=
null
;
}
if
(
reason
)
{
dumpv
(
"
Transport
closed
:
"
+
reason
)
;
}
else
{
dumpv
(
"
Transport
closed
.
"
)
;
}
}
get
_currentOutgoing
(
)
{
return
this
.
_outgoing
[
0
]
;
}
_flushOutgoing
(
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
if
(
this
.
_currentOutgoing
.
done
)
{
this
.
_finishCurrentOutgoing
(
)
;
}
if
(
this
.
_outgoing
.
length
>
0
)
{
let
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_output
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseOutgoing
(
)
{
this
.
_outgoingEnabled
=
false
;
}
resumeOutgoing
(
)
{
this
.
_outgoingEnabled
=
true
;
this
.
_flushOutgoing
(
)
;
}
onOutputStreamReady
(
stream
)
{
if
(
!
this
.
_outgoingEnabled
|
|
this
.
_outgoing
.
length
=
=
=
0
)
{
return
;
}
try
{
this
.
_currentOutgoing
.
write
(
stream
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
return
;
}
throw
e
;
}
this
.
_flushOutgoing
(
)
;
}
_finishCurrentOutgoing
(
)
{
if
(
this
.
_currentOutgoing
)
{
this
.
_currentOutgoing
.
destroy
(
)
;
this
.
_outgoing
.
shift
(
)
;
}
}
_destroyAllOutgoing
(
)
{
for
(
let
packet
of
this
.
_outgoing
)
{
packet
.
destroy
(
)
;
}
this
.
_outgoing
=
[
]
;
}
ready
(
)
{
this
.
active
=
true
;
this
.
_waitForIncoming
(
)
;
}
_waitForIncoming
(
)
{
if
(
this
.
_incomingEnabled
)
{
let
threadManager
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
)
;
this
.
_input
.
asyncWait
(
this
0
0
threadManager
.
currentThread
)
;
}
}
pauseIncoming
(
)
{
this
.
_incomingEnabled
=
false
;
}
resumeIncoming
(
)
{
this
.
_incomingEnabled
=
true
;
this
.
_flushIncoming
(
)
;
this
.
_waitForIncoming
(
)
;
}
onInputStreamReady
(
stream
)
{
try
{
while
(
stream
.
available
(
)
&
&
this
.
_incomingEnabled
&
&
this
.
_processIncoming
(
stream
stream
.
available
(
)
)
)
{
}
this
.
_waitForIncoming
(
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_BASE_STREAM_WOULD_BLOCK
)
{
this
.
close
(
e
.
result
)
;
}
else
{
throw
e
;
}
}
}
_processIncoming
(
stream
count
)
{
dumpv
(
"
Data
available
:
"
+
count
)
;
if
(
!
count
)
{
dumpv
(
"
Nothing
to
read
skipping
"
)
;
return
false
;
}
try
{
if
(
!
this
.
_incoming
)
{
dumpv
(
"
Creating
a
new
packet
from
incoming
"
)
;
if
(
!
this
.
_readHeader
(
stream
)
)
{
return
false
;
}
this
.
_incoming
=
Packet
.
fromHeader
(
this
.
_incomingHeader
this
)
;
if
(
!
this
.
_incoming
)
{
throw
new
Error
(
"
No
packet
types
for
header
:
"
+
this
.
_incomingHeader
)
;
}
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Existing
packet
incomplete
keep
reading
"
)
;
this
.
_incoming
.
read
(
stream
this
.
_scriptableInput
)
;
}
}
catch
(
e
)
{
dump
(
Error
reading
incoming
packet
:
(
{
e
}
-
{
e
.
stack
}
)
\
n
)
;
this
.
close
(
)
;
return
false
;
}
if
(
!
this
.
_incoming
.
done
)
{
dumpv
(
"
Packet
not
done
wait
for
more
"
)
;
return
true
;
}
this
.
_flushIncoming
(
)
;
return
true
;
}
_readHeader
(
)
{
let
amountToRead
=
PACKET_HEADER_MAX
-
this
.
_incomingHeader
.
length
;
this
.
_incomingHeader
+
=
StreamUtils
.
delimitedRead
(
this
.
_scriptableInput
"
:
"
amountToRead
)
;
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Header
read
:
"
+
this
.
_incomingHeader
)
;
}
if
(
this
.
_incomingHeader
.
endsWith
(
"
:
"
)
)
{
if
(
flags
.
wantVerbose
)
{
dumpv
(
"
Found
packet
header
successfully
:
"
+
this
.
_incomingHeader
)
;
}
return
true
;
}
if
(
this
.
_incomingHeader
.
length
>
=
PACKET_HEADER_MAX
)
{
throw
new
Error
(
"
Failed
to
parse
packet
header
!
"
)
;
}
return
false
;
}
_flushIncoming
(
)
{
if
(
!
this
.
_incoming
.
done
)
{
return
;
}
if
(
flags
.
wantLogging
)
{
dumpv
(
"
Got
:
"
+
this
.
_incoming
)
;
}
this
.
_destroyIncoming
(
)
;
}
_onJSONObjectReady
(
object
)
{
executeSoon
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
emit
(
"
packet
"
object
)
;
this
.
hooks
.
onPacket
(
object
)
;
}
}
)
;
}
_onBulkReadReady
(
.
.
.
args
)
{
executeSoon
(
(
)
=
>
{
if
(
this
.
active
)
{
this
.
emit
(
"
bulkpacket
"
.
.
.
args
)
;
this
.
hooks
.
onBulkPacket
(
.
.
.
args
)
;
}
}
)
;
}
_destroyIncoming
(
)
{
if
(
this
.
_incoming
)
{
this
.
_incoming
.
destroy
(
)
;
}
this
.
_incomingHeader
=
"
"
;
this
.
_incoming
=
null
;
}
}
;
function
LocalDebuggerTransport
(
other
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
other
=
other
;
this
.
hooks
=
null
;
this
.
_serial
=
this
.
other
?
this
.
other
.
_serial
:
{
count
:
0
}
;
this
.
close
=
this
.
close
.
bind
(
this
)
;
}
LocalDebuggerTransport
.
prototype
=
{
send
(
packet
)
{
this
.
emit
(
"
send
"
packet
)
;
let
serial
=
this
.
_serial
.
count
+
+
;
if
(
flags
.
wantLogging
)
{
if
(
packet
.
from
)
{
dumpv
(
"
Packet
"
+
serial
+
"
sent
from
"
+
uneval
(
packet
.
from
)
)
;
}
else
if
(
packet
.
to
)
{
dumpv
(
"
Packet
"
+
serial
+
"
sent
to
"
+
uneval
(
packet
.
to
)
)
;
}
}
this
.
_deepFreeze
(
packet
)
;
let
other
=
this
.
other
;
if
(
other
)
{
executeSoon
(
(
)
=
>
{
if
(
flags
.
wantLogging
)
{
dumpv
(
Received
packet
{
serial
}
:
+
JSON
.
stringify
(
packet
null
2
)
)
;
}
if
(
other
.
hooks
)
{
other
.
emit
(
"
packet
"
packet
)
;
other
.
hooks
.
onPacket
(
packet
)
;
}
}
)
;
}
}
startBulkSend
(
{
actor
type
length
}
)
{
this
.
emit
(
"
startbulksend
"
{
actor
type
length
}
)
;
let
serial
=
this
.
_serial
.
count
+
+
;
dumpv
(
"
Sent
bulk
packet
"
+
serial
+
"
for
actor
"
+
actor
)
;
if
(
!
this
.
other
)
{
let
error
=
new
Error
(
"
startBulkSend
:
other
side
of
transport
missing
"
)
;
return
Promise
.
reject
(
error
)
;
}
let
pipe
=
new
Pipe
(
true
true
0
0
null
)
;
executeSoon
(
(
)
=
>
{
dumpv
(
"
Received
bulk
packet
"
+
serial
)
;
if
(
!
this
.
other
.
hooks
)
{
return
;
}
let
deferred
=
defer
(
)
;
let
packet
=
{
actor
type
length
copyTo
:
(
output
)
=
>
{
let
copying
=
StreamUtils
.
copyStream
(
pipe
.
inputStream
output
length
)
;
deferred
.
resolve
(
copying
)
;
return
copying
;
}
stream
:
pipe
.
inputStream
done
:
deferred
}
;
this
.
other
.
emit
(
"
bulkpacket
"
packet
)
;
this
.
other
.
hooks
.
onBulkPacket
(
packet
)
;
deferred
.
promise
.
then
(
(
)
=
>
pipe
.
inputStream
.
close
(
)
this
.
close
)
;
}
)
;
let
sendDeferred
=
defer
(
)
;
executeSoon
(
(
)
=
>
{
let
copyDeferred
=
defer
(
)
;
sendDeferred
.
resolve
(
{
copyFrom
:
(
input
)
=
>
{
let
copying
=
StreamUtils
.
copyStream
(
input
pipe
.
outputStream
length
)
;
copyDeferred
.
resolve
(
copying
)
;
return
copying
;
}
stream
:
pipe
.
outputStream
done
:
copyDeferred
}
)
;
copyDeferred
.
promise
.
then
(
(
)
=
>
pipe
.
outputStream
.
close
(
)
this
.
close
)
;
}
)
;
return
sendDeferred
.
promise
;
}
close
(
)
{
this
.
emit
(
"
close
"
)
;
if
(
this
.
other
)
{
let
other
=
this
.
other
;
this
.
other
=
null
;
other
.
close
(
)
;
}
if
(
this
.
hooks
)
{
try
{
this
.
hooks
.
onClosed
(
)
;
}
catch
(
ex
)
{
console
.
error
(
ex
)
;
}
this
.
hooks
=
null
;
}
}
ready
(
)
{
}
_deepFreeze
(
object
)
{
Object
.
freeze
(
object
)
;
for
(
let
prop
in
object
)
{
if
(
object
.
hasOwnProperty
(
prop
)
&
&
typeof
object
=
=
=
"
object
"
&
&
!
Object
.
isFrozen
(
object
)
)
{
this
.
_deepFreeze
(
object
[
prop
]
)
;
}
}
}
}
;
function
ChildDebuggerTransport
(
mm
prefix
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_mm
=
mm
;
this
.
_messageName
=
"
debug
:
"
+
prefix
+
"
:
packet
"
;
}
ChildDebuggerTransport
.
prototype
=
{
constructor
:
ChildDebuggerTransport
hooks
:
null
_addListener
(
)
{
this
.
_mm
.
addMessageListener
(
this
.
_messageName
this
)
;
}
_removeListener
(
)
{
try
{
this
.
_mm
.
removeMessageListener
(
this
.
_messageName
this
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_NULL_POINTER
)
{
throw
e
;
}
}
}
ready
(
)
{
this
.
_addListener
(
)
;
}
close
(
)
{
this
.
_removeListener
(
)
;
this
.
emit
(
"
close
"
)
;
this
.
hooks
.
onClosed
(
)
;
}
receiveMessage
(
{
data
}
)
{
this
.
emit
(
"
packet
"
data
)
;
this
.
hooks
.
onPacket
(
data
)
;
}
send
(
packet
)
{
this
.
emit
(
"
send
"
packet
)
;
try
{
this
.
_mm
.
sendAsyncMessage
(
this
.
_messageName
packet
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_NULL_POINTER
)
{
throw
e
;
}
}
}
startBulkSend
(
)
{
throw
new
Error
(
"
Can
'
t
send
bulk
data
to
child
processes
.
"
)
;
}
swapBrowser
(
mm
)
{
this
.
_removeListener
(
)
;
this
.
_mm
=
mm
;
this
.
_addListener
(
)
;
}
}
;
if
(
!
this
.
isWorker
)
{
(
function
(
)
{
function
WorkerDebuggerTransport
(
dbg
id
)
{
this
.
_dbg
=
dbg
;
this
.
_id
=
id
;
this
.
onMessage
=
this
.
_onMessage
.
bind
(
this
)
;
}
WorkerDebuggerTransport
.
prototype
=
{
constructor
:
WorkerDebuggerTransport
ready
(
)
{
this
.
_dbg
.
addListener
(
this
)
;
}
close
(
)
{
this
.
_dbg
.
removeListener
(
this
)
;
if
(
this
.
hooks
)
{
this
.
hooks
.
onClosed
(
)
;
}
}
send
(
packet
)
{
this
.
_dbg
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
message
"
id
:
this
.
_id
message
:
packet
}
)
)
;
}
startBulkSend
(
)
{
throw
new
Error
(
"
Can
'
t
send
bulk
data
from
worker
threads
!
"
)
;
}
_onMessage
(
message
)
{
let
packet
=
JSON
.
parse
(
message
)
;
if
(
packet
.
type
!
=
=
"
message
"
|
|
packet
.
id
!
=
=
this
.
_id
)
{
return
;
}
if
(
this
.
hooks
)
{
this
.
hooks
.
onPacket
(
packet
.
message
)
;
}
}
}
;
}
)
.
call
(
this
)
;
}
else
{
(
function
(
)
{
function
WorkerDebuggerTransport
(
scope
id
)
{
this
.
_scope
=
scope
;
this
.
_id
=
id
;
this
.
_onMessage
=
this
.
_onMessage
.
bind
(
this
)
;
}
WorkerDebuggerTransport
.
prototype
=
{
constructor
:
WorkerDebuggerTransport
ready
(
)
{
this
.
_scope
.
addEventListener
(
"
message
"
this
.
_onMessage
)
;
}
close
(
)
{
this
.
_scope
.
removeEventListener
(
"
message
"
this
.
_onMessage
)
;
if
(
this
.
hooks
)
{
this
.
hooks
.
onClosed
(
)
;
}
}
send
(
packet
)
{
this
.
_scope
.
postMessage
(
JSON
.
stringify
(
{
type
:
"
message
"
id
:
this
.
_id
message
:
packet
}
)
)
;
}
startBulkSend
(
)
{
throw
new
Error
(
"
Can
'
t
send
bulk
data
from
worker
threads
!
"
)
;
}
_onMessage
(
event
)
{
let
packet
=
JSON
.
parse
(
event
.
data
)
;
if
(
packet
.
type
!
=
=
"
message
"
|
|
packet
.
id
!
=
=
this
.
_id
)
{
return
;
}
if
(
this
.
hooks
)
{
this
.
hooks
.
onPacket
(
packet
.
message
)
;
}
}
}
;
}
)
.
call
(
this
)
;
}
