'
use
strict
'
;
const
tokenChars
=
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
1
1
1
1
0
0
1
1
0
1
1
0
1
1
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
1
0
1
0
]
;
function
isValidStatusCode
(
code
)
{
return
(
(
code
>
=
1000
&
&
code
<
=
1014
&
&
code
!
=
=
1004
&
&
code
!
=
=
1005
&
&
code
!
=
=
1006
)
|
|
(
code
>
=
3000
&
&
code
<
=
4999
)
)
;
}
function
_isValidUTF8
(
buf
)
{
const
len
=
buf
.
length
;
let
i
=
0
;
while
(
i
<
len
)
{
if
(
(
buf
[
i
]
&
0x80
)
=
=
=
0
)
{
i
+
+
;
}
else
if
(
(
buf
[
i
]
&
0xe0
)
=
=
=
0xc0
)
{
if
(
i
+
1
=
=
=
len
|
|
(
buf
[
i
+
1
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
]
&
0xfe
)
=
=
=
0xc0
)
{
return
false
;
}
i
+
=
2
;
}
else
if
(
(
buf
[
i
]
&
0xf0
)
=
=
=
0xe0
)
{
if
(
i
+
2
>
=
len
|
|
(
buf
[
i
+
1
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
+
2
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
]
=
=
=
0xe0
&
&
(
buf
[
i
+
1
]
&
0xe0
)
=
=
=
0x80
)
|
|
(
buf
[
i
]
=
=
=
0xed
&
&
(
buf
[
i
+
1
]
&
0xe0
)
=
=
=
0xa0
)
)
{
return
false
;
}
i
+
=
3
;
}
else
if
(
(
buf
[
i
]
&
0xf8
)
=
=
=
0xf0
)
{
if
(
i
+
3
>
=
len
|
|
(
buf
[
i
+
1
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
+
2
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
+
3
]
&
0xc0
)
!
=
=
0x80
|
|
(
buf
[
i
]
=
=
=
0xf0
&
&
(
buf
[
i
+
1
]
&
0xf0
)
=
=
=
0x80
)
|
|
(
buf
[
i
]
=
=
=
0xf4
&
&
buf
[
i
+
1
]
>
0x8f
)
|
|
buf
[
i
]
>
0xf4
)
{
return
false
;
}
i
+
=
4
;
}
else
{
return
false
;
}
}
return
true
;
}
module
.
exports
=
{
isValidStatusCode
isValidUTF8
:
_isValidUTF8
tokenChars
}
;
if
(
!
process
.
env
.
WS_NO_UTF_8_VALIDATE
)
{
try
{
const
isValidUTF8
=
require
(
'
utf
-
8
-
validate
'
)
;
module
.
exports
.
isValidUTF8
=
function
(
buf
)
{
return
buf
.
length
<
150
?
_isValidUTF8
(
buf
)
:
isValidUTF8
(
buf
)
;
}
;
}
catch
(
e
)
{
}
}
