(
(
)
=
>
{
class
Context
{
static
#
stack
=
[
]
;
static
current
(
)
{
return
Context
.
#
stack
.
at
(
-
1
)
;
}
static
push
(
ctx
)
{
Context
.
#
stack
.
push
(
ctx
)
;
}
static
pop
(
)
{
Context
.
#
stack
.
pop
(
)
;
}
constructor
(
)
{
this
.
description
=
[
]
;
this
.
beforeEach
=
[
]
;
this
.
afterEach
=
[
]
;
}
clone
(
)
{
const
newCtx
=
new
Context
(
)
;
newCtx
.
description
.
push
(
.
.
.
this
.
description
)
;
newCtx
.
beforeEach
.
push
(
.
.
.
this
.
beforeEach
)
;
newCtx
.
afterEach
.
push
(
.
.
.
this
.
afterEach
)
;
return
newCtx
;
}
}
Context
.
push
(
new
Context
(
)
)
;
let
_testScope
=
null
;
const
MochiaImpl
=
{
async
describe
(
desc
suite
)
{
const
ctx
=
Context
.
current
(
)
.
clone
(
)
;
ctx
.
description
.
push
(
desc
)
;
Context
.
push
(
ctx
)
;
const
p
=
suite
(
)
;
if
(
p
?
.
then
)
{
await
p
;
}
Context
.
pop
(
)
;
}
beforeEach
(
setupFn
)
{
Context
.
current
(
)
.
beforeEach
.
push
(
setupFn
)
;
}
afterEach
(
tearDownFn
)
{
Context
.
current
(
)
.
afterEach
.
push
(
tearDownFn
)
;
}
it
(
desc
testFn
)
{
return
_testScope
.
add_task
(
MochiaImpl
.
wrap
(
desc
testFn
)
)
;
}
only
(
desc
testFn
)
{
MochiaImpl
.
it
(
desc
testFn
)
.
only
(
)
;
}
skip
(
desc
testFn
)
{
MochiaImpl
.
it
(
desc
testFn
)
.
skip
(
)
;
}
skipIf
(
desc
skipFn
testFn
)
{
return
_testScope
.
add_task
(
{
skip_if
:
skipFn
}
MochiaImpl
.
wrap
(
desc
testFn
)
)
;
}
wrap
(
desc
fn
)
{
const
ctx
=
Context
.
current
(
)
.
clone
(
)
;
const
name
=
[
.
.
.
ctx
.
description
desc
]
.
join
(
"
/
"
)
;
const
wrapper
=
{
[
name
]
:
async
(
)
=
>
{
_testScope
.
info
(
name
)
;
for
(
const
before
of
ctx
.
beforeEach
)
{
const
p
=
before
(
)
;
if
(
p
?
.
then
)
{
await
p
;
}
}
{
const
p
=
fn
(
)
;
if
(
p
?
.
then
)
{
await
p
;
}
}
for
(
let
i
=
ctx
.
afterEach
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
const
after
=
ctx
.
afterEach
[
i
]
;
const
p
=
after
(
)
;
if
(
p
?
.
then
)
{
await
p
;
}
}
}
}
;
return
wrapper
[
name
]
;
}
}
;
Object
.
defineProperties
(
MochiaImpl
.
it
{
only
:
{
configurable
:
false
value
:
MochiaImpl
.
only
}
skip
:
{
configurable
:
false
value
:
MochiaImpl
.
skip
}
skipIf
:
{
configurable
:
false
get
:
MochiaImpl
.
skipIf
}
}
)
;
_testScope
=
this
;
Object
.
assign
(
_testScope
{
describe
:
MochiaImpl
.
describe
beforeEach
:
MochiaImpl
.
beforeEach
afterEach
:
MochiaImpl
.
afterEach
it
:
MochiaImpl
.
it
}
)
;
}
)
(
)
;
