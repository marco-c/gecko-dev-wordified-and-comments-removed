"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
TestUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
this
.
TestUtils
=
{
executeSoon
(
callbackFn
)
{
Services
.
tm
.
dispatchToMainThread
(
callbackFn
)
;
}
topicObserved
(
topic
checkFn
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
subject
topic
data
)
{
try
{
if
(
checkFn
&
&
!
checkFn
(
subject
data
)
)
{
return
;
}
Services
.
obs
.
removeObserver
(
observer
topic
)
;
resolve
(
[
subject
data
]
)
;
}
catch
(
ex
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
reject
(
ex
)
;
}
}
topic
)
;
}
)
;
}
screenshotArea
(
eltOrRect
win
)
{
if
(
eltOrRect
instanceof
Ci
.
nsIDOMElement
)
{
eltOrRect
=
eltOrRect
.
getBoundingClientRect
(
)
;
}
let
{
left
top
width
height
}
=
eltOrRect
;
let
canvas
=
win
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
let
ratio
=
win
.
devicePixelRatio
;
canvas
.
width
=
width
*
ratio
;
canvas
.
height
=
height
*
ratio
;
ctx
.
scale
(
ratio
ratio
)
;
ctx
.
drawWindow
(
win
left
top
width
height
"
#
fff
"
)
;
return
canvas
.
toDataURL
(
)
;
}
}
;
