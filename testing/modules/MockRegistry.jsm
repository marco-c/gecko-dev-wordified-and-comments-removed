"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
MockRegistry
"
]
;
const
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
MockRegistry
{
constructor
(
)
{
this
.
roots
=
new
Map
(
[
[
Ci
.
nsIWindowsRegKey
.
ROOT_KEY_LOCAL_MACHINE
new
Map
(
)
]
[
Ci
.
nsIWindowsRegKey
.
ROOT_KEY_CURRENT_USER
new
Map
(
)
]
[
Ci
.
nsIWindowsRegKey
.
ROOT_KEY_CLASSES_ROOT
new
Map
(
)
]
]
)
;
let
registry
=
this
;
function
MockWindowsRegKey
(
)
{
}
MockWindowsRegKey
.
prototype
=
{
values
:
null
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWindowsRegKey
"
]
)
open
(
root
path
mode
)
{
let
rootKey
=
registry
.
getRoot
(
root
)
;
if
(
!
rootKey
.
has
(
path
)
)
{
rootKey
.
set
(
path
new
Map
(
)
)
;
}
this
.
values
=
rootKey
.
get
(
path
)
;
}
close
(
)
{
this
.
values
=
null
;
}
get
valueCount
(
)
{
if
(
!
this
.
values
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
return
this
.
values
.
size
;
}
hasValue
(
name
)
{
if
(
!
this
.
values
)
{
return
false
;
}
return
this
.
values
.
has
(
name
)
;
}
getValueType
(
name
)
{
return
Ci
.
nsIWindowsRegKey
.
TYPE_STRING
;
}
getValueName
(
index
)
{
if
(
!
this
.
values
|
|
index
>
=
this
.
values
.
size
)
{
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
let
names
=
Array
.
from
(
this
.
values
.
keys
(
)
)
;
return
names
[
index
]
;
}
readStringValue
(
name
)
{
if
(
!
this
.
values
)
{
throw
new
Error
(
"
invalid
registry
path
"
)
;
}
return
this
.
values
.
get
(
name
)
;
}
}
;
this
.
oldSuffixListPref
=
Services
.
prefs
.
getBoolPref
(
"
network
.
notify
.
dnsSuffixList
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
dnsSuffixList
"
false
)
;
this
.
oldCheckForProxiesPref
=
Services
.
prefs
.
getBoolPref
(
"
network
.
notify
.
checkForProxies
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
checkForProxies
"
false
)
;
this
.
oldCheckForNRPTPref
=
Services
.
prefs
.
getBoolPref
(
"
network
.
notify
.
checkForNRPT
"
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
checkForNRPT
"
false
)
;
this
.
cid
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
MockWindowsRegKey
)
;
}
shutdown
(
)
{
MockRegistrar
.
unregister
(
this
.
cid
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
dnsSuffixList
"
this
.
oldSuffixListPref
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
checkForProxies
"
this
.
oldCheckForProxiesPref
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
notify
.
checkForNRPT
"
this
.
oldCheckForNRPTPref
)
;
this
.
cid
=
null
;
}
getRoot
(
root
)
{
if
(
!
this
.
roots
.
has
(
root
)
)
{
throw
new
Error
(
No
such
root
{
root
}
)
;
}
return
this
.
roots
.
get
(
root
)
;
}
setValue
(
root
path
name
value
)
{
let
rootKey
=
this
.
getRoot
(
root
)
;
if
(
!
rootKey
.
has
(
path
)
)
{
rootKey
.
set
(
path
new
Map
(
)
)
;
}
let
pathmap
=
rootKey
.
get
(
path
)
;
if
(
value
=
=
null
)
{
pathmap
.
delete
(
name
)
;
}
else
{
pathmap
.
set
(
name
value
)
;
}
}
}
