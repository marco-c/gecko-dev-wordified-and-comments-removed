"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FileTestUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
DownloadPaths
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
this
)
;
let
gFileCounter
=
1
;
this
.
FileTestUtils
=
{
getTempFile
(
suggestedName
=
"
test
.
dat
"
)
{
let
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
suggestedName
)
;
let
leafName
=
base
+
"
-
"
+
gFileCounter
+
ext
;
gFileCounter
+
+
;
let
file
=
this
.
_globalTemporaryDirectory
.
clone
(
)
;
file
.
append
(
leafName
)
;
Assert
.
ok
(
!
file
.
exists
(
)
"
Sanity
check
the
temporary
file
doesn
'
t
exist
.
"
)
;
return
file
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
FileTestUtils
"
_globalTemporaryDirectory
"
(
)
=
>
{
let
randomNumber
=
Math
.
floor
(
Math
.
random
(
)
*
1000000
)
;
let
dir
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
testdir
-
"
+
randomNumber
]
)
;
dir
.
createUnique
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
FileUtils
.
PERMS_DIRECTORY
)
;
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
Removing
test
files
"
(
)
=
>
{
dir
.
remove
(
true
)
;
}
)
;
return
dir
;
}
)
;
