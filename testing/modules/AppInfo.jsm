"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
newAppInfo
"
"
getAppInfo
"
"
updateAppInfo
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
origPlatformInfo
=
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIPlatformInfo
)
;
this
.
newAppInfo
=
function
(
options
=
{
}
)
{
let
ID
=
(
"
ID
"
in
options
)
?
options
.
ID
:
"
xpcshell
tests
.
mozilla
.
org
"
;
let
name
=
(
"
name
"
in
options
)
?
options
.
name
:
"
xpcshell
"
;
let
version
=
(
"
version
"
in
options
)
?
options
.
version
:
"
1
"
;
let
platformVersion
=
(
"
platformVersion
"
in
options
)
?
options
.
platformVersion
:
"
p
-
ver
"
;
let
OS
=
(
"
OS
"
in
options
)
?
options
.
OS
:
"
XPCShell
"
;
let
extraProps
=
(
"
extraProps
"
in
options
)
?
options
.
extraProps
:
{
}
;
let
appInfo
=
{
vendor
:
"
Mozilla
"
name
ID
version
appBuildID
:
"
20160315
"
platformVersion
platformBuildID
:
origPlatformInfo
.
platformBuildID
inSafeMode
:
false
logConsoleErrors
:
true
OS
XPCOMABI
:
"
noarch
-
spidermonkey
"
invalidateCachesOnRestart
(
)
{
}
shouldBlockIncompatJaws
:
false
get
userCanElevate
(
)
{
return
false
;
}
}
;
let
interfaces
=
[
Ci
.
nsIXULAppInfo
Ci
.
nsIPlatformInfo
Ci
.
nsIXULRuntime
]
;
if
(
"
nsIWinAppHelper
"
in
Ci
)
{
interfaces
.
push
(
Ci
.
nsIWinAppHelper
)
;
}
if
(
"
crashReporter
"
in
options
&
&
options
.
crashReporter
)
{
appInfo
.
annotations
=
{
}
;
appInfo
.
annotateCrashReport
=
function
(
key
data
)
{
this
.
annotations
[
key
]
=
data
;
}
;
interfaces
.
push
(
Ci
.
nsICrashReporter
)
;
}
for
(
let
key
of
Object
.
keys
(
extraProps
)
)
{
appInfo
.
browserTabsRemoteAutostart
=
extraProps
[
key
]
;
}
appInfo
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
interfaces
)
;
return
appInfo
;
}
;
var
currentAppInfo
=
newAppInfo
(
)
;
this
.
getAppInfo
=
function
(
)
{
return
currentAppInfo
;
}
;
this
.
updateAppInfo
=
function
(
options
)
{
currentAppInfo
=
newAppInfo
(
options
)
;
let
id
=
Components
.
ID
(
"
{
fbfae60b
-
64a4
-
44ef
-
a911
-
08ceb70b9f31
}
"
)
;
let
cid
=
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
;
let
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
try
{
let
existing
=
Components
.
manager
.
getClassObjectByContractID
(
cid
Ci
.
nsIFactory
)
;
registrar
.
unregisterFactory
(
id
existing
)
;
}
catch
(
ex
)
{
}
let
factory
=
{
createInstance
(
outer
iid
)
{
if
(
outer
!
=
null
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
currentAppInfo
.
QueryInterface
(
iid
)
;
}
}
;
registrar
.
registerFactory
(
id
"
XULAppInfo
"
cid
factory
)
;
Cc
.
initialize
(
Cc
[
cid
]
cid
)
;
}
;
