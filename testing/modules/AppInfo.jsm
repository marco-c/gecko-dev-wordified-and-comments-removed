"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
newAppInfo
"
"
getAppInfo
"
"
updateAppInfo
"
]
;
let
origPlatformInfo
=
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIPlatformInfo
)
;
let
origRuntime
=
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULRuntime
)
;
var
newAppInfo
=
function
(
options
=
{
}
)
{
let
appInfo
=
{
vendor
:
"
Mozilla
"
name
:
options
.
name
?
?
"
xpcshell
"
ID
:
options
.
ID
?
?
"
xpcshell
tests
.
mozilla
.
org
"
version
:
options
.
version
?
?
"
1
"
appBuildID
:
options
.
appBuildID
?
?
"
20160315
"
platformVersion
:
options
.
platformVersion
?
?
"
p
-
ver
"
platformBuildID
:
origPlatformInfo
.
platformBuildID
.
.
.
Ci
.
nsIXULRuntime
inSafeMode
:
false
logConsoleErrors
:
true
OS
:
options
.
OS
?
?
"
XPCShell
"
XPCOMABI
:
"
noarch
-
spidermonkey
"
invalidateCachesOnRestart
(
)
{
}
shouldBlockIncompatJaws
:
false
processType
:
origRuntime
.
processType
uniqueProcessID
:
origRuntime
.
uniqueProcessID
fissionAutostart
:
origRuntime
.
fissionAutostart
browserTabsRemoteAutostart
:
origRuntime
.
browserTabsRemoteAutostart
get
maxWebProcessCount
(
)
{
return
origRuntime
.
maxWebProcessCount
;
}
get
launcherProcessState
(
)
{
return
origRuntime
.
launcherProcessState
;
}
get
userCanElevate
(
)
{
return
false
;
}
}
;
appInfo
.
lastAppBuildID
=
options
.
lastAppBuildID
?
?
appInfo
.
appBuildID
;
appInfo
.
lastAppVersion
=
options
.
lastAppVersion
?
?
appInfo
.
version
;
let
interfaces
=
[
Ci
.
nsIXULAppInfo
Ci
.
nsIPlatformInfo
Ci
.
nsIXULRuntime
]
;
if
(
"
nsIWinAppHelper
"
in
Ci
)
{
interfaces
.
push
(
Ci
.
nsIWinAppHelper
)
;
}
if
(
options
.
crashReporter
)
{
appInfo
.
annotations
=
{
}
;
appInfo
.
annotateCrashReport
=
function
(
key
data
)
{
this
.
annotations
[
key
]
=
data
;
}
;
interfaces
.
push
(
Ci
.
nsICrashReporter
)
;
}
appInfo
.
QueryInterface
=
ChromeUtils
.
generateQI
(
interfaces
)
;
return
appInfo
;
}
;
var
currentAppInfo
=
newAppInfo
(
)
;
var
getAppInfo
=
function
(
)
{
return
currentAppInfo
;
}
;
var
updateAppInfo
=
function
(
options
)
{
currentAppInfo
=
newAppInfo
(
options
)
;
let
id
=
Components
.
ID
(
"
{
fbfae60b
-
64a4
-
44ef
-
a911
-
08ceb70b9f31
}
"
)
;
let
contractid
=
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
;
let
registrar
=
Components
.
manager
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
try
{
let
existing
=
Components
.
manager
.
getClassObjectByContractID
(
contractid
Ci
.
nsIFactory
)
;
registrar
.
unregisterFactory
(
id
existing
)
;
}
catch
(
ex
)
{
}
let
factory
=
{
createInstance
(
iid
)
{
return
currentAppInfo
.
QueryInterface
(
iid
)
;
}
}
;
Services
.
appinfo
=
currentAppInfo
;
registrar
.
registerFactory
(
id
"
XULAppInfo
"
contractid
factory
)
;
}
;
