"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
StructuredLogger
"
"
StructuredFormatter
"
]
;
this
.
StructuredLogger
=
function
(
name
dumpFun
=
dump
mutators
=
[
]
)
{
this
.
name
=
name
;
this
.
_dumpFun
=
dumpFun
;
this
.
_mutatorFuns
=
mutators
;
}
StructuredLogger
.
prototype
=
{
testStart
(
test
)
{
var
data
=
{
test
:
this
.
_testId
(
test
)
}
;
this
.
_logData
(
"
test_start
"
data
)
;
}
testStatus
(
test
subtest
status
expected
=
"
PASS
"
message
=
null
stack
=
null
extra
=
null
)
{
if
(
subtest
=
=
=
null
|
|
subtest
=
=
=
undefined
)
{
subtest
=
"
undefined
assertion
name
"
;
}
var
data
=
{
test
:
this
.
_testId
(
test
)
subtest
status
}
;
if
(
expected
!
=
status
&
&
status
!
=
"
SKIP
"
)
{
data
.
expected
=
expected
;
}
if
(
message
!
=
=
null
)
{
data
.
message
=
String
(
message
)
;
}
if
(
stack
!
=
=
null
)
{
data
.
stack
=
stack
;
}
if
(
extra
!
=
=
null
)
{
data
.
extra
=
extra
;
}
this
.
_logData
(
"
test_status
"
data
)
;
}
testEnd
(
test
status
expected
=
"
OK
"
message
=
null
stack
=
null
extra
=
null
)
{
var
data
=
{
test
:
this
.
_testId
(
test
)
status
}
;
if
(
expected
!
=
status
&
&
status
!
=
"
SKIP
"
)
{
data
.
expected
=
expected
;
}
if
(
message
!
=
=
null
)
{
data
.
message
=
String
(
message
)
;
}
if
(
stack
!
=
=
null
)
{
data
.
stack
=
stack
;
}
if
(
extra
!
=
=
null
)
{
data
.
extra
=
extra
;
}
this
.
_logData
(
"
test_end
"
data
)
;
}
assertionCount
(
test
count
minExpected
=
0
maxExpected
=
0
)
{
var
data
=
{
test
min_expected
:
minExpected
max_expected
:
maxExpected
count
}
;
this
.
_logData
(
"
assertion_count
"
data
)
;
}
suiteStart
(
tests
runinfo
=
null
versioninfo
=
null
deviceinfo
=
null
extra
=
null
)
{
var
data
=
{
tests
:
tests
.
map
(
x
=
>
this
.
_testId
(
x
)
)
}
;
if
(
runinfo
!
=
=
null
)
{
data
.
runinfo
=
runinfo
;
}
if
(
versioninfo
!
=
=
null
)
{
data
.
versioninfo
=
versioninfo
;
}
if
(
deviceinfo
!
=
=
null
)
{
data
.
deviceinfo
=
deviceinfo
;
}
if
(
extra
!
=
=
null
)
{
data
.
extra
=
extra
;
}
this
.
_logData
(
"
suite_start
"
data
)
;
}
suiteEnd
(
extra
=
null
)
{
var
data
=
{
}
;
if
(
extra
!
=
=
null
)
{
data
.
extra
=
extra
;
}
this
.
_logData
(
"
suite_end
"
data
)
;
}
log
(
level
message
extra
=
null
)
{
var
data
=
{
level
message
:
String
(
message
)
}
;
if
(
extra
!
=
=
null
)
{
data
.
extra
=
extra
;
if
(
"
stack
"
in
extra
)
{
data
.
stack
=
extra
.
stack
;
}
}
this
.
_logData
(
"
log
"
data
)
;
}
debug
(
message
extra
=
null
)
{
this
.
log
(
"
DEBUG
"
message
extra
)
;
}
info
(
message
extra
=
null
)
{
this
.
log
(
"
INFO
"
message
extra
)
;
}
warning
(
message
extra
=
null
)
{
this
.
log
(
"
WARNING
"
message
extra
)
;
}
error
(
message
extra
=
null
)
{
this
.
log
(
"
ERROR
"
message
extra
)
;
}
critical
(
message
extra
=
null
)
{
this
.
log
(
"
CRITICAL
"
message
extra
)
;
}
processOutput
(
thread
message
)
{
this
.
_logData
(
"
process_output
"
{
message
thread
}
)
;
}
_logData
(
action
data
=
{
}
)
{
var
allData
=
{
action
time
:
Date
.
now
(
)
thread
:
null
pid
:
null
source
:
this
.
name
}
;
for
(
var
field
in
data
)
{
allData
[
field
]
=
data
[
field
]
;
}
for
(
var
fun
of
this
.
_mutatorFuns
)
{
fun
(
allData
)
;
}
this
.
_dumpFun
(
allData
)
;
}
_testId
(
test
)
{
if
(
Array
.
isArray
(
test
)
)
{
return
test
.
join
(
"
"
)
;
}
return
test
;
}
}
;
this
.
StructuredFormatter
=
function
(
)
{
this
.
testStartTimes
=
{
}
;
}
;
StructuredFormatter
.
prototype
=
{
log
(
message
)
{
return
message
.
message
;
}
suite_start
(
message
)
{
this
.
suiteStartTime
=
message
.
time
;
return
"
SUITE
-
START
|
Running
"
+
message
.
tests
.
length
+
"
tests
"
;
}
test_start
(
message
)
{
this
.
testStartTimes
[
message
.
test
]
=
new
Date
(
)
.
getTime
(
)
;
return
"
TEST
-
START
|
"
+
message
.
test
;
}
test_status
(
message
)
{
var
statusInfo
=
message
.
test
+
"
|
"
+
message
.
subtest
+
(
message
.
message
?
"
|
"
+
message
.
message
:
"
"
)
;
if
(
message
.
expected
)
{
return
"
TEST
-
UNEXPECTED
-
"
+
message
.
status
+
"
|
"
+
statusInfo
+
"
-
expected
:
"
+
message
.
expected
;
}
return
"
TEST
-
"
+
message
.
status
+
"
|
"
+
statusInfo
;
}
test_end
(
message
)
{
var
startTime
=
this
.
testStartTimes
[
message
.
test
]
;
delete
this
.
testStartTimes
[
message
.
test
]
;
var
statusInfo
=
message
.
test
+
(
message
.
message
?
"
|
"
+
String
(
message
.
message
)
:
"
"
)
;
var
result
;
if
(
message
.
expected
)
{
result
=
"
TEST
-
UNEXPECTED
-
"
+
message
.
status
+
"
|
"
+
statusInfo
+
"
-
expected
:
"
+
message
.
expected
;
}
else
{
return
"
TEST
-
"
+
message
.
status
+
"
|
"
+
statusInfo
;
}
result
=
result
+
"
|
took
"
+
message
.
time
-
startTime
+
"
ms
"
;
return
result
;
}
suite_end
(
message
)
{
return
"
SUITE
-
END
|
took
"
+
message
.
time
-
this
.
suiteStartTime
+
"
ms
"
;
}
}
;
