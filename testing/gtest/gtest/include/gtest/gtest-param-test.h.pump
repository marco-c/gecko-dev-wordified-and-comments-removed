-
*
-
mode
:
c
+
+
;
-
*
-
var
n
=
50
Maximum
length
of
Values
arguments
we
want
to
support
.
var
maxtuple
=
10
Maximum
number
of
Combine
arguments
we
want
to
support
.
#
ifndef
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_
#
define
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_
#
if
0
class
FooTest
:
public
:
:
testing
:
:
TestWithParam
<
const
char
*
>
{
}
;
TEST_P
(
FooTest
DoesBlah
)
{
EXPECT_TRUE
(
foo
.
Blah
(
GetParam
(
)
)
)
;
.
.
.
}
TEST_P
(
FooTest
HasBlahBlah
)
{
.
.
.
}
INSTANTIATE_TEST_CASE_P
(
InstantiationName
FooTest
Values
(
"
meeny
"
"
miny
"
"
moe
"
)
)
;
const
char
*
pets
[
]
=
{
"
cat
"
"
dog
"
}
;
INSTANTIATE_TEST_CASE_P
(
AnotherInstantiationName
FooTest
ValuesIn
(
pets
)
)
;
class
BaseTest
:
public
:
:
testing
:
:
Test
{
}
;
class
DerivedTest
:
public
BaseTest
public
:
:
testing
:
:
WithParamInterface
<
int
>
{
}
;
TEST_F
(
BaseTest
HasFoo
)
{
}
TEST_P
(
DerivedTest
DoesBlah
)
{
EXPECT_TRUE
(
foo
.
Blah
(
GetParam
(
)
)
)
;
}
#
endif
#
include
"
gtest
/
internal
/
gtest
-
port
.
h
"
#
if
!
GTEST_OS_SYMBIAN
#
include
<
utility
>
#
endif
#
include
"
gtest
/
internal
/
gtest
-
internal
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
param
-
util
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
param
-
util
-
generated
.
h
"
namespace
testing
{
template
<
typename
T
typename
IncrementT
>
internal
:
:
ParamGenerator
<
T
>
Range
(
T
start
T
end
IncrementT
step
)
{
return
internal
:
:
ParamGenerator
<
T
>
(
new
internal
:
:
RangeGenerator
<
T
IncrementT
>
(
start
end
step
)
)
;
}
template
<
typename
T
>
internal
:
:
ParamGenerator
<
T
>
Range
(
T
start
T
end
)
{
return
Range
(
start
end
1
)
;
}
template
<
typename
ForwardIterator
>
internal
:
:
ParamGenerator
<
typename
:
:
testing
:
:
internal
:
:
IteratorTraits
<
ForwardIterator
>
:
:
value_type
>
ValuesIn
(
ForwardIterator
begin
ForwardIterator
end
)
{
typedef
typename
:
:
testing
:
:
internal
:
:
IteratorTraits
<
ForwardIterator
>
:
:
value_type
ParamType
;
return
internal
:
:
ParamGenerator
<
ParamType
>
(
new
internal
:
:
ValuesInIteratorRangeGenerator
<
ParamType
>
(
begin
end
)
)
;
}
template
<
typename
T
size_t
N
>
internal
:
:
ParamGenerator
<
T
>
ValuesIn
(
const
T
(
&
array
)
[
N
]
)
{
return
ValuesIn
(
array
array
+
N
)
;
}
template
<
class
Container
>
internal
:
:
ParamGenerator
<
typename
Container
:
:
value_type
>
ValuesIn
(
const
Container
&
container
)
{
return
ValuesIn
(
container
.
begin
(
)
container
.
end
(
)
)
;
}
range
i
1
.
.
n
for
i
[
[
range
j
1
.
.
i
template
<
for
j
[
[
typename
T
j
]
]
>
internal
:
:
ValueArray
i
<
for
j
[
[
T
j
]
]
>
Values
(
for
j
[
[
T
j
v
j
]
]
)
{
return
internal
:
:
ValueArray
i
<
for
j
[
[
T
j
]
]
>
(
for
j
[
[
v
j
]
]
)
;
}
]
]
inline
internal
:
:
ParamGenerator
<
bool
>
Bool
(
)
{
return
Values
(
false
true
)
;
}
#
if
GTEST_HAS_COMBINE
range
i
2
.
.
maxtuple
for
i
[
[
range
j
1
.
.
i
template
<
for
j
[
[
typename
Generator
j
]
]
>
internal
:
:
CartesianProductHolder
i
<
for
j
[
[
Generator
j
]
]
>
Combine
(
for
j
[
[
const
Generator
j
&
g
j
]
]
)
{
return
internal
:
:
CartesianProductHolder
i
<
for
j
[
[
Generator
j
]
]
>
(
for
j
[
[
g
j
]
]
)
;
}
]
]
#
endif
#
define
TEST_P
(
test_case_name
test_name
)
\
class
GTEST_TEST_CLASS_NAME_
(
test_case_name
test_name
)
\
:
public
test_case_name
{
\
public
:
\
GTEST_TEST_CLASS_NAME_
(
test_case_name
test_name
)
(
)
{
}
\
virtual
void
TestBody
(
)
;
\
private
:
\
static
int
AddToRegistry
(
)
{
\
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
parameterized_test_registry
(
)
.
\
GetTestCasePatternHolder
<
test_case_name
>
(
\
#
test_case_name
\
:
:
testing
:
:
internal
:
:
CodeLocation
(
\
__FILE__
__LINE__
)
)
-
>
AddTestPattern
(
\
GTEST_STRINGIFY_
(
test_case_name
)
\
GTEST_STRINGIFY_
(
test_name
)
\
new
:
:
testing
:
:
internal
:
:
TestMetaFactory
<
\
GTEST_TEST_CLASS_NAME_
(
\
test_case_name
test_name
)
>
(
)
)
;
\
return
0
;
\
}
\
static
int
gtest_registering_dummy_
GTEST_ATTRIBUTE_UNUSED_
;
\
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
\
GTEST_TEST_CLASS_NAME_
(
test_case_name
test_name
)
)
;
\
}
;
\
int
GTEST_TEST_CLASS_NAME_
(
test_case_name
\
test_name
)
:
:
gtest_registering_dummy_
=
\
GTEST_TEST_CLASS_NAME_
(
test_case_name
test_name
)
:
:
AddToRegistry
(
)
;
\
void
GTEST_TEST_CLASS_NAME_
(
test_case_name
test_name
)
:
:
TestBody
(
)
#
define
INSTANTIATE_TEST_CASE_P
(
prefix
test_case_name
generator
.
.
.
)
\
static
:
:
testing
:
:
internal
:
:
ParamGenerator
<
test_case_name
:
:
ParamType
>
\
gtest_
#
#
prefix
#
#
test_case_name
#
#
_EvalGenerator_
(
)
{
return
generator
;
}
\
static
:
:
std
:
:
string
gtest_
#
#
prefix
#
#
test_case_name
#
#
_EvalGenerateName_
(
\
const
:
:
testing
:
:
TestParamInfo
<
test_case_name
:
:
ParamType
>
&
info
)
{
\
return
:
:
testing
:
:
internal
:
:
GetParamNameGen
<
test_case_name
:
:
ParamType
>
\
(
__VA_ARGS__
)
(
info
)
;
\
}
\
static
int
gtest_
#
#
prefix
#
#
test_case_name
#
#
_dummy_
GTEST_ATTRIBUTE_UNUSED_
=
\
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
parameterized_test_registry
(
)
.
\
GetTestCasePatternHolder
<
test_case_name
>
(
\
#
test_case_name
\
:
:
testing
:
:
internal
:
:
CodeLocation
(
\
__FILE__
__LINE__
)
)
-
>
AddTestCaseInstantiation
(
\
#
prefix
\
&
gtest_
#
#
prefix
#
#
test_case_name
#
#
_EvalGenerator_
\
&
gtest_
#
#
prefix
#
#
test_case_name
#
#
_EvalGenerateName_
\
__FILE__
__LINE__
)
}
#
endif
