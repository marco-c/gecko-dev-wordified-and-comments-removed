-
*
-
mode
:
c
+
+
;
-
*
-
This
is
a
Pump
source
file
.
Please
use
Pump
to
convert
it
to
gmock
-
generated
-
nice
-
strict
.
h
.
var
n
=
10
The
maximum
arity
we
support
.
#
ifndef
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_
#
define
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_
#
include
"
gmock
/
gmock
-
spec
-
builders
.
h
"
#
include
"
gmock
/
internal
/
gmock
-
port
.
h
"
namespace
testing
{
range
kind
0
.
.
2
for
kind
[
[
var
clazz
=
[
[
if
kind
=
=
0
[
[
NiceMock
]
]
elif
kind
=
=
1
[
[
NaggyMock
]
]
else
[
[
StrictMock
]
]
]
]
var
method
=
[
[
if
kind
=
=
0
[
[
AllowUninterestingCalls
]
]
elif
kind
=
=
1
[
[
WarnUninterestingCalls
]
]
else
[
[
FailUninterestingCalls
]
]
]
]
template
<
class
MockClass
>
class
clazz
:
public
MockClass
{
public
:
clazz
(
)
:
MockClass
(
)
{
:
:
testing
:
:
Mock
:
:
method
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
#
if
GTEST_LANG_CXX11
template
<
typename
A
>
explicit
clazz
(
A
&
&
arg
)
:
MockClass
(
std
:
:
forward
<
A
>
(
arg
)
)
{
:
:
testing
:
:
Mock
:
:
method
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
template
<
typename
A1
typename
A2
typename
.
.
.
An
>
clazz
(
A1
&
&
arg1
A2
&
&
arg2
An
&
&
.
.
.
args
)
:
MockClass
(
std
:
:
forward
<
A1
>
(
arg1
)
std
:
:
forward
<
A2
>
(
arg2
)
std
:
:
forward
<
An
>
(
args
)
.
.
.
)
{
:
:
testing
:
:
Mock
:
:
method
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
#
else
template
<
typename
A1
>
explicit
clazz
(
const
A1
&
a1
)
:
MockClass
(
a1
)
{
:
:
testing
:
:
Mock
:
:
method
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
range
i
2
.
.
n
for
i
[
[
range
j
1
.
.
i
template
<
for
j
[
[
typename
A
j
]
]
>
clazz
(
for
j
[
[
const
A
j
&
a
j
]
]
)
:
MockClass
(
for
j
[
[
a
j
]
]
)
{
:
:
testing
:
:
Mock
:
:
method
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
]
]
#
endif
~
clazz
(
)
{
:
:
testing
:
:
Mock
:
:
UnregisterCallReaction
(
internal
:
:
ImplicitCast_
<
MockClass
*
>
(
this
)
)
;
}
private
:
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
clazz
)
;
}
;
]
]
template
<
typename
MockClass
>
class
NiceMock
<
NiceMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
NiceMock
<
NaggyMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
NiceMock
<
StrictMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
NaggyMock
<
NiceMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
NaggyMock
<
NaggyMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
NaggyMock
<
StrictMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
StrictMock
<
NiceMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
StrictMock
<
NaggyMock
<
MockClass
>
>
;
template
<
typename
MockClass
>
class
StrictMock
<
StrictMock
<
MockClass
>
>
;
}
#
endif
