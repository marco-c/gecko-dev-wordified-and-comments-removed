#
ifndef
GTEST_BLACKBOX_H
#
define
GTEST_BLACKBOX_H
#
include
"
mozilla
/
Attributes
.
h
"
#
if
defined
(
_MSC_VER
)
#
include
<
intrin
.
h
>
#
endif
namespace
mozilla
{
#
if
defined
(
_MSC_VER
)
char
volatile
*
UseCharPointer
(
char
volatile
*
)
;
MOZ_ALWAYS_INLINE_EVEN_DEBUG
void
*
BlackBoxVoidPtr
(
void
*
aPtr
)
{
aPtr
=
const_cast
<
char
*
>
(
UseCharPointer
(
reinterpret_cast
<
char
*
>
(
aPtr
)
)
)
;
_ReadWriteBarrier
(
)
;
return
aPtr
;
}
#
else
MOZ_ALWAYS_INLINE_EVEN_DEBUG
void
*
BlackBoxVoidPtr
(
void
*
aPtr
)
{
asm
volatile
(
"
"
:
"
+
g
"
(
aPtr
)
:
"
g
"
(
aPtr
)
:
"
memory
"
)
;
return
aPtr
;
}
#
endif
template
<
class
T
>
MOZ_ALWAYS_INLINE_EVEN_DEBUG
T
*
BlackBox
(
T
*
aPtr
)
{
return
static_cast
<
T
*
>
(
BlackBoxVoidPtr
(
aPtr
)
)
;
}
}
#
endif
