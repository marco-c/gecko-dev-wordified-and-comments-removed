#
include
"
UrlClassifierFeatureEmailTrackingDataCollection
.
h
"
#
include
"
mozilla
/
AntiTrackingUtils
.
h
"
#
include
"
mozilla
/
ContentBlockingNotifier
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierCommon
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIClassifiedChannel
.
h
"
#
include
"
nsILoadInfo
.
h
"
namespace
mozilla
:
:
net
{
namespace
{
#
define
EMAILTRACKING_DATACOLLECTION_FEATURE_NAME
\
"
emailtracking
-
data
-
collection
"
#
define
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_BLOCKLIST
\
"
urlclassifier
.
features
.
emailtracking
.
datacollection
.
blocklistTables
"
#
define
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_BLOCKLIST_TEST_ENTRIES
\
"
urlclassifier
.
features
.
emailtracking
.
datacollection
.
blocklistHosts
"
#
define
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_ENTITYLIST
\
"
urlclassifier
.
features
.
emailtracking
.
datacollection
.
allowlistTables
"
#
define
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_ENTITYLIST_TEST_ENTRIES
\
"
urlclassifier
.
features
.
emailtracking
.
datacollection
.
allowlistHosts
"
#
define
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_EXCEPTION_URLS
\
"
urlclassifier
.
features
.
emailtracking
.
datacollection
.
skipURLs
"
#
define
TABLE_EMAILTRACKING_DATACOLLECTION_BLOCKLIST_PREF
\
"
emailtracking
-
data
-
collection
-
blocklist
-
pref
"
#
define
TABLE_EMAILTRACKING_DATACOLLECTION_ENTITYLIST_PREF
\
"
emailtracking
-
data
-
collection
-
allowlist
-
pref
"
StaticRefPtr
<
UrlClassifierFeatureEmailTrackingDataCollection
>
gFeatureEmailTrackingDataCollection
;
}
UrlClassifierFeatureEmailTrackingDataCollection
:
:
UrlClassifierFeatureEmailTrackingDataCollection
(
)
:
UrlClassifierFeatureAntiTrackingBase
(
nsLiteralCString
(
EMAILTRACKING_DATACOLLECTION_FEATURE_NAME
)
nsLiteralCString
(
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_BLOCKLIST
)
nsLiteralCString
(
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_ENTITYLIST
)
nsLiteralCString
(
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_BLOCKLIST_TEST_ENTRIES
)
nsLiteralCString
(
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_ENTITYLIST_TEST_ENTRIES
)
nsLiteralCString
(
TABLE_EMAILTRACKING_DATACOLLECTION_BLOCKLIST_PREF
)
nsLiteralCString
(
TABLE_EMAILTRACKING_DATACOLLECTION_ENTITYLIST_PREF
)
nsLiteralCString
(
URLCLASSIFIER_EMAILTRACKING_DATACOLLECTION_EXCEPTION_URLS
)
)
{
}
const
char
*
UrlClassifierFeatureEmailTrackingDataCollection
:
:
Name
(
)
{
return
EMAILTRACKING_DATACOLLECTION_FEATURE_NAME
;
}
void
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeInitialize
(
)
{
UC_LOG_LEAK
(
(
"
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeInitialize
"
)
)
;
if
(
!
gFeatureEmailTrackingDataCollection
)
{
gFeatureEmailTrackingDataCollection
=
new
UrlClassifierFeatureEmailTrackingDataCollection
(
)
;
gFeatureEmailTrackingDataCollection
-
>
InitializePreferences
(
)
;
}
}
void
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeShutdown
(
)
{
UC_LOG_LEAK
(
(
"
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeShutdown
"
)
)
;
if
(
gFeatureEmailTrackingDataCollection
)
{
gFeatureEmailTrackingDataCollection
-
>
ShutdownPreferences
(
)
;
gFeatureEmailTrackingDataCollection
=
nullptr
;
}
}
already_AddRefed
<
UrlClassifierFeatureEmailTrackingDataCollection
>
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeCreate
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
aChannel
)
;
UC_LOG_LEAK
(
(
"
UrlClassifierFeatureEmailTrackingDataCollection
:
:
MaybeCreate
-
channel
"
"
%
p
"
aChannel
)
)
;
if
(
!
StaticPrefs
:
:
privacy_trackingprotection_emailtracking_data_collection_enabled
(
)
)
{
return
nullptr
;
}
bool
isThirdParty
=
AntiTrackingUtils
:
:
IsThirdPartyChannel
(
aChannel
)
;
if
(
!
isThirdParty
)
{
return
nullptr
;
}
MaybeInitialize
(
)
;
MOZ_ASSERT
(
gFeatureEmailTrackingDataCollection
)
;
RefPtr
<
UrlClassifierFeatureEmailTrackingDataCollection
>
self
=
gFeatureEmailTrackingDataCollection
;
return
self
.
forget
(
)
;
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeatureEmailTrackingDataCollection
:
:
GetIfNameMatches
(
const
nsACString
&
aName
)
{
if
(
!
aName
.
EqualsLiteral
(
EMAILTRACKING_DATACOLLECTION_FEATURE_NAME
)
)
{
return
nullptr
;
}
MaybeInitialize
(
)
;
MOZ_ASSERT
(
gFeatureEmailTrackingDataCollection
)
;
RefPtr
<
UrlClassifierFeatureEmailTrackingDataCollection
>
self
=
gFeatureEmailTrackingDataCollection
;
return
self
.
forget
(
)
;
}
NS_IMETHODIMP
UrlClassifierFeatureEmailTrackingDataCollection
:
:
ProcessChannel
(
nsIChannel
*
aChannel
const
nsTArray
<
nsCString
>
&
aList
const
nsTArray
<
nsCString
>
&
aHashes
bool
*
aShouldContinue
)
{
NS_ENSURE_ARG_POINTER
(
aChannel
)
;
NS_ENSURE_ARG_POINTER
(
aShouldContinue
)
;
*
aShouldContinue
=
true
;
UC_LOG
(
(
"
UrlClassifierFeatureEmailTrackingDataCollection
:
:
ProcessChannel
-
"
"
collecting
data
from
channel
%
p
"
aChannel
)
)
;
static
std
:
:
vector
<
UrlClassifierCommon
:
:
ClassificationData
>
sClassificationData
=
{
{
"
base
-
email
-
track
-
"
_ns
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_EMAILTRACKING
}
{
"
content
-
email
-
track
-
"
_ns
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_EMAILTRACKING_CONTENT
}
}
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
RefPtr
<
dom
:
:
BrowsingContext
>
bc
;
loadInfo
-
>
GetBrowsingContext
(
getter_AddRefs
(
bc
)
)
;
RefPtr
<
dom
:
:
WindowGlobalParent
>
topWindowParent
=
bc
-
>
Canonical
(
)
-
>
GetTopWindowContext
(
)
;
bool
isTopEmailWebApp
=
topWindowParent
-
>
DocumentPrincipal
(
)
-
>
IsURIInPrefList
(
"
privacy
.
trackingprotection
.
emailtracking
.
webapp
.
domains
"
)
;
uint32_t
flags
=
UrlClassifierCommon
:
:
TablesToClassificationFlags
(
aList
sClassificationData
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_EMAILTRACKING
)
;
if
(
flags
&
nsIClassifiedChannel
:
:
ClassificationFlags
:
:
CLASSIFIED_EMAILTRACKING_CONTENT
)
{
Telemetry
:
:
AccumulateCategorical
(
isTopEmailWebApp
?
Telemetry
:
:
LABELS_EMAIL_TRACKER_COUNT
:
:
content_email_webapp
:
Telemetry
:
:
LABELS_EMAIL_TRACKER_COUNT
:
:
content_normal
)
;
ContentBlockingNotifier
:
:
OnEvent
(
aChannel
nsIWebProgressListener
:
:
STATE_LOADED_EMAILTRACKING_LEVEL_2_CONTENT
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
isTopEmailWebApp
?
Telemetry
:
:
LABELS_EMAIL_TRACKER_COUNT
:
:
base_email_webapp
:
Telemetry
:
:
LABELS_EMAIL_TRACKER_COUNT
:
:
base_normal
)
;
if
(
!
StaticPrefs
:
:
privacy_trackingprotection_emailtracking_enabled
(
)
)
{
ContentBlockingNotifier
:
:
OnEvent
(
aChannel
nsIWebProgressListener
:
:
STATE_LOADED_EMAILTRACKING_LEVEL_1_CONTENT
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierFeatureEmailTrackingDataCollection
:
:
GetURIByListType
(
nsIChannel
*
aChannel
nsIUrlClassifierFeature
:
:
listType
aListType
nsIUrlClassifierFeature
:
:
URIType
*
aURIType
nsIURI
*
*
aURI
)
{
NS_ENSURE_ARG_POINTER
(
aChannel
)
;
NS_ENSURE_ARG_POINTER
(
aURIType
)
;
NS_ENSURE_ARG_POINTER
(
aURI
)
;
if
(
aListType
=
=
nsIUrlClassifierFeature
:
:
blocklist
)
{
*
aURIType
=
nsIUrlClassifierFeature
:
:
blocklistURI
;
return
aChannel
-
>
GetURI
(
aURI
)
;
}
MOZ_ASSERT
(
aListType
=
=
nsIUrlClassifierFeature
:
:
entitylist
)
;
*
aURIType
=
nsIUrlClassifierFeature
:
:
pairwiseEntitylistURI
;
return
UrlClassifierCommon
:
:
CreatePairwiseEntityListURI
(
aChannel
aURI
)
;
}
}
