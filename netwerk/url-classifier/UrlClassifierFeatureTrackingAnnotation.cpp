#
include
"
UrlClassifierFeatureTrackingAnnotation
.
h
"
#
include
"
mozilla
/
AntiTrackingCommon
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
net
/
HttpBaseChannel
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierCommon
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
TrackingDummyChannel
.
h
"
namespace
mozilla
{
namespace
net
{
namespace
{
#
define
URLCLASSIFIER_ANNOTATION_BLACKLIST
\
"
urlclassifier
.
trackingAnnotationTable
"
#
define
URLCLASSIFIER_ANNOTATION_BLACKLIST_TEST_ENTRIES
\
"
urlclassifier
.
trackingAnnotationTable
.
testEntries
"
#
define
URLCLASSIFIER_ANNOTATION_WHITELIST
\
"
urlclassifier
.
trackingAnnotationWhitelistTable
"
#
define
URLCLASSIFIER_ANNOTATION_WHITELIST_TEST_ENTRIES
\
"
urlclassifier
.
trackingAnnotationWhitelistTable
.
testEntries
"
#
define
URLCLASSIFIER_TRACKING_ANNOTATION_SKIP_URLS
\
"
urlclassifier
.
trackingAnnotationSkipURLs
"
#
define
TABLE_ANNOTATION_BLACKLIST_PREF
"
annotation
-
blacklist
-
pref
"
#
define
TABLE_ANNOTATION_WHITELIST_PREF
"
annotation
-
whitelist
-
pref
"
StaticRefPtr
<
UrlClassifierFeatureTrackingAnnotation
>
gFeatureTrackingAnnotation
;
static
void
SetIsTrackingResourceHelper
(
nsIChannel
*
aChannel
bool
aIsThirdParty
)
{
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
NS_QueryNotificationCallbacks
(
aChannel
parentChannel
)
;
if
(
parentChannel
)
{
parentChannel
-
>
NotifyTrackingResource
(
aIsThirdParty
)
;
}
RefPtr
<
HttpBaseChannel
>
httpChannel
=
do_QueryObject
(
aChannel
)
;
if
(
httpChannel
)
{
httpChannel
-
>
SetIsTrackingResource
(
aIsThirdParty
)
;
}
RefPtr
<
TrackingDummyChannel
>
dummyChannel
=
do_QueryObject
(
aChannel
)
;
if
(
dummyChannel
)
{
dummyChannel
-
>
SetIsTrackingResource
(
)
;
}
}
static
void
LowerPriorityHelper
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
aChannel
)
;
bool
isBlockingResource
=
false
;
nsCOMPtr
<
nsIClassOfService
>
cos
(
do_QueryInterface
(
aChannel
)
)
;
if
(
cos
)
{
if
(
nsContentUtils
:
:
IsTailingEnabled
(
)
)
{
uint32_t
cosFlags
=
0
;
cos
-
>
GetClassFlags
(
&
cosFlags
)
;
isBlockingResource
=
cosFlags
&
(
nsIClassOfService
:
:
UrgentStart
|
nsIClassOfService
:
:
Leader
|
nsIClassOfService
:
:
Unblocked
)
;
if
(
!
(
cosFlags
&
nsIClassOfService
:
:
TailForbidden
)
)
{
cos
-
>
AddClassFlags
(
nsIClassOfService
:
:
Throttleable
)
;
}
}
else
{
cos
-
>
AddClassFlags
(
nsIClassOfService
:
:
Throttleable
)
;
}
}
if
(
!
isBlockingResource
)
{
nsCOMPtr
<
nsISupportsPriority
>
p
=
do_QueryInterface
(
aChannel
)
;
if
(
p
)
{
if
(
UC_LOG_ENABLED
(
)
)
{
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
nsAutoCString
spec
;
uri
-
>
GetAsciiSpec
(
spec
)
;
spec
.
Truncate
(
std
:
:
min
(
spec
.
Length
(
)
UrlClassifierCommon
:
:
sMaxSpecLength
)
)
;
UC_LOG
(
(
"
Setting
PRIORITY_LOWEST
for
channel
[
%
p
]
(
%
s
)
"
aChannel
spec
.
get
(
)
)
)
;
}
p
-
>
SetPriority
(
nsISupportsPriority
:
:
PRIORITY_LOWEST
)
;
}
}
}
}
UrlClassifierFeatureTrackingAnnotation
:
:
UrlClassifierFeatureTrackingAnnotation
(
)
:
UrlClassifierFeatureBase
(
NS_LITERAL_CSTRING
(
"
tracking
-
annotation
"
)
NS_LITERAL_CSTRING
(
URLCLASSIFIER_ANNOTATION_BLACKLIST
)
NS_LITERAL_CSTRING
(
URLCLASSIFIER_ANNOTATION_WHITELIST
)
NS_LITERAL_CSTRING
(
URLCLASSIFIER_ANNOTATION_BLACKLIST_TEST_ENTRIES
)
NS_LITERAL_CSTRING
(
URLCLASSIFIER_ANNOTATION_WHITELIST_TEST_ENTRIES
)
NS_LITERAL_CSTRING
(
TABLE_ANNOTATION_BLACKLIST_PREF
)
NS_LITERAL_CSTRING
(
TABLE_ANNOTATION_WHITELIST_PREF
)
NS_LITERAL_CSTRING
(
URLCLASSIFIER_TRACKING_ANNOTATION_SKIP_URLS
)
)
{
}
void
UrlClassifierFeatureTrackingAnnotation
:
:
Initialize
(
)
{
UC_LOG
(
(
"
UrlClassifierFeatureTrackingAnnotation
:
Initializing
"
)
)
;
MOZ_ASSERT
(
!
gFeatureTrackingAnnotation
)
;
gFeatureTrackingAnnotation
=
new
UrlClassifierFeatureTrackingAnnotation
(
)
;
gFeatureTrackingAnnotation
-
>
InitializePreferences
(
)
;
}
void
UrlClassifierFeatureTrackingAnnotation
:
:
Shutdown
(
)
{
UC_LOG
(
(
"
UrlClassifierFeatureTrackingAnnotation
:
Shutdown
"
)
)
;
MOZ_ASSERT
(
gFeatureTrackingAnnotation
)
;
gFeatureTrackingAnnotation
-
>
ShutdownPreferences
(
)
;
gFeatureTrackingAnnotation
=
nullptr
;
}
already_AddRefed
<
UrlClassifierFeatureTrackingAnnotation
>
UrlClassifierFeatureTrackingAnnotation
:
:
MaybeCreate
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
gFeatureTrackingAnnotation
)
;
MOZ_ASSERT
(
aChannel
)
;
UC_LOG
(
(
"
UrlClassifierFeatureTrackingAnnotation
:
MaybeCreate
for
channel
%
p
"
aChannel
)
)
;
if
(
!
StaticPrefs
:
:
privacy_trackingprotection_annotate_channels
(
)
)
{
return
nullptr
;
}
if
(
!
UrlClassifierCommon
:
:
ShouldEnableTrackingProtectionOrAnnotation
(
aChannel
AntiTrackingCommon
:
:
eTrackingAnnotations
)
)
{
return
nullptr
;
}
RefPtr
<
UrlClassifierFeatureTrackingAnnotation
>
self
=
gFeatureTrackingAnnotation
;
return
self
.
forget
(
)
;
}
NS_IMETHODIMP
UrlClassifierFeatureTrackingAnnotation
:
:
ProcessChannel
(
nsIChannel
*
aChannel
const
nsACString
&
aList
bool
*
aShouldContinue
)
{
NS_ENSURE_ARG_POINTER
(
aChannel
)
;
NS_ENSURE_ARG_POINTER
(
aShouldContinue
)
;
*
aShouldContinue
=
true
;
nsCOMPtr
<
nsIURI
>
chanURI
;
nsresult
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
chanURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
UC_LOG
(
(
"
UrlClassifierFeatureTrackingAnnotation
:
:
ProcessChannel
"
"
nsIChannel
:
:
GetURI
(
%
p
)
failed
"
(
void
*
)
aChannel
)
)
;
return
NS_OK
;
}
bool
isThirdPartyWithTopLevelWinURI
=
nsContentUtils
:
:
IsThirdPartyWindowOrChannel
(
nullptr
aChannel
chanURI
)
;
UC_LOG
(
(
"
UrlClassifierFeatureTrackingAnnotation
:
:
ProcessChannel
annotating
"
"
channel
[
%
p
]
"
aChannel
)
)
;
SetIsTrackingResourceHelper
(
aChannel
isThirdPartyWithTopLevelWinURI
)
;
if
(
isThirdPartyWithTopLevelWinURI
)
{
UrlClassifierCommon
:
:
NotifyTrackingProtectionDisabled
(
aChannel
)
;
if
(
StaticPrefs
:
:
privacy_trackingprotection_lower_network_priority
(
)
)
{
LowerPriorityHelper
(
aChannel
)
;
}
}
return
NS_OK
;
}
}
}
