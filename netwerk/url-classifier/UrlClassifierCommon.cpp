#
include
"
mozilla
/
net
/
UrlClassifierCommon
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsNetUtil
.
h
"
namespace
mozilla
{
namespace
net
{
const
nsCString
:
:
size_type
UrlClassifierCommon
:
:
sMaxSpecLength
=
128
;
LazyLogModule
UrlClassifierCommon
:
:
sLog
(
"
nsChannelClassifier
"
)
;
bool
UrlClassifierCommon
:
:
AddonMayLoad
(
nsIChannel
*
aChannel
nsIURI
*
aURI
)
{
nsCOMPtr
<
nsILoadInfo
>
channelLoadInfo
=
aChannel
-
>
GetLoadInfo
(
)
;
if
(
!
channelLoadInfo
)
{
return
false
;
}
nsIPrincipal
*
loadingPrincipal
=
channelLoadInfo
-
>
LoadingPrincipal
(
)
;
if
(
!
loadingPrincipal
)
{
return
false
;
}
return
BasePrincipal
:
:
Cast
(
loadingPrincipal
)
-
>
AddonAllowsLoad
(
aURI
true
)
;
}
void
UrlClassifierCommon
:
:
NotifyTrackingProtectionDisabled
(
nsIChannel
*
aChannel
)
{
nsCOMPtr
<
nsIParentChannel
>
parentChannel
;
NS_QueryNotificationCallbacks
(
aChannel
parentChannel
)
;
if
(
parentChannel
)
{
parentChannel
-
>
NotifyTrackingProtectionDisabled
(
)
;
return
;
}
NotifyChannelBlocked
(
aChannel
nsIWebProgressListener
:
:
STATE_LOADED_TRACKING_CONTENT
)
;
}
void
UrlClassifierCommon
:
:
NotifyChannelBlocked
(
nsIChannel
*
aChannel
unsigned
aBlockedReason
)
{
nsCOMPtr
<
mozIThirdPartyUtil
>
thirdPartyUtil
=
services
:
:
GetThirdPartyUtil
(
)
;
if
(
NS_WARN_IF
(
!
thirdPartyUtil
)
)
{
return
;
}
nsCOMPtr
<
mozIDOMWindowProxy
>
win
;
nsresult
rv
=
thirdPartyUtil
-
>
GetTopWindowForChannel
(
aChannel
getter_AddRefs
(
win
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
auto
*
pwin
=
nsPIDOMWindowOuter
:
:
From
(
win
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
pwin
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
docShell
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE_VOID
(
doc
)
;
nsCOMPtr
<
nsIURI
>
uri
;
aChannel
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
pwin
-
>
NotifyContentBlockingState
(
aBlockedReason
aChannel
true
uri
)
;
}
bool
UrlClassifierCommon
:
:
ShouldEnableTrackingProtectionOrAnnotation
(
nsIChannel
*
aChannel
AntiTrackingCommon
:
:
ContentBlockingAllowListPurpose
aBlockingPurpose
)
{
MOZ_ASSERT
(
aChannel
)
;
MOZ_ASSERT
(
aBlockingPurpose
=
=
AntiTrackingCommon
:
:
eTrackingProtection
|
|
aBlockingPurpose
=
=
AntiTrackingCommon
:
:
eTrackingAnnotations
)
;
nsCOMPtr
<
nsIHttpChannelInternal
>
channel
=
do_QueryInterface
(
aChannel
)
;
if
(
!
channel
)
{
UC_LOG
(
(
"
nsChannelClassifier
:
Not
an
HTTP
channel
"
)
)
;
return
false
;
}
nsCOMPtr
<
nsIURI
>
chanURI
;
nsresult
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
chanURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
UrlClassifierCommon
:
:
AddonMayLoad
(
aChannel
chanURI
)
)
{
return
false
;
}
nsCOMPtr
<
nsIIOService
>
ios
=
services
:
:
GetIOService
(
)
;
if
(
NS_WARN_IF
(
!
ios
)
)
{
return
false
;
}
nsCOMPtr
<
nsIURI
>
topWinURI
;
rv
=
channel
-
>
GetTopWindowURI
(
getter_AddRefs
(
topWinURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
!
topWinURI
&
&
StaticPrefs
:
:
channelclassifier_allowlist_example
(
)
)
{
UC_LOG
(
(
"
nsChannelClassifier
:
Allowlisting
test
domain
"
)
)
;
rv
=
ios
-
>
NewURI
(
NS_LITERAL_CSTRING
(
"
http
:
/
/
allowlisted
.
example
.
com
"
)
nullptr
nullptr
getter_AddRefs
(
topWinURI
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
}
bool
isAllowListed
;
rv
=
AntiTrackingCommon
:
:
IsOnContentBlockingAllowList
(
topWinURI
NS_UsePrivateBrowsing
(
aChannel
)
aBlockingPurpose
isAllowListed
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
false
;
}
if
(
isAllowListed
)
{
if
(
UC_LOG_ENABLED
(
)
)
{
nsCString
chanSpec
=
chanURI
-
>
GetSpecOrDefault
(
)
;
chanSpec
.
Truncate
(
std
:
:
min
(
chanSpec
.
Length
(
)
UrlClassifierCommon
:
:
sMaxSpecLength
)
)
;
UC_LOG
(
(
"
nsChannelClassifier
:
User
override
on
channel
[
%
p
]
(
%
s
)
"
aChannel
chanSpec
.
get
(
)
)
)
;
}
UrlClassifierCommon
:
:
NotifyTrackingProtectionDisabled
(
aChannel
)
;
return
false
;
}
if
(
UC_LOG_ENABLED
(
)
)
{
nsCString
chanSpec
=
chanURI
-
>
GetSpecOrDefault
(
)
;
chanSpec
.
Truncate
(
std
:
:
min
(
chanSpec
.
Length
(
)
UrlClassifierCommon
:
:
sMaxSpecLength
)
)
;
nsCString
topWinSpec
=
topWinURI
-
>
GetSpecOrDefault
(
)
;
topWinSpec
.
Truncate
(
std
:
:
min
(
topWinSpec
.
Length
(
)
UrlClassifierCommon
:
:
sMaxSpecLength
)
)
;
UC_LOG
(
(
"
nsChannelClassifier
:
Enabling
tracking
protection
checks
on
"
"
channel
[
%
p
]
with
uri
%
s
for
toplevel
window
uri
%
s
"
aChannel
chanSpec
.
get
(
)
topWinSpec
.
get
(
)
)
)
;
}
return
true
;
}
}
}
