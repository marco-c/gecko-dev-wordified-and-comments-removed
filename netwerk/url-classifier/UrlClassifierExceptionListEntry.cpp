#
include
"
UrlClassifierExceptionListEntry
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
StaticPrefs_privacy
.
h
"
namespace
mozilla
:
:
net
{
NS_IMPL_ISUPPORTS
(
UrlClassifierExceptionListEntry
nsIUrlClassifierExceptionListEntry
)
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
Init
(
nsIUrlClassifierExceptionListEntry
:
:
Category
aCategory
const
nsACString
&
aUrlPattern
const
nsACString
&
aTopLevelUrlPattern
bool
aIsPrivateBrowsingOnly
const
nsTArray
<
nsCString
>
&
aFilterContentBlockingCategories
const
nsTArray
<
nsCString
>
&
aClassifierFeatures
)
{
NS_ENSURE_TRUE
(
aCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_INTERNAL_PREF
|
|
aCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_BASELINE
|
|
aCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_CONVENIENCE
NS_ERROR_INVALID_ARG
)
;
mCategory
=
aCategory
;
mUrlPattern
=
aUrlPattern
;
mTopLevelUrlPattern
=
aTopLevelUrlPattern
;
mIsPrivateBrowsingOnly
=
aIsPrivateBrowsingOnly
;
mFilterContentBlockingCategories
=
aFilterContentBlockingCategories
.
Clone
(
)
;
mClassifierFeatures
=
aClassifierFeatures
.
Clone
(
)
;
ErrorResult
error
;
mMatcher
=
new
extensions
:
:
MatchPatternCore
(
NS_ConvertUTF8toUTF16
(
mUrlPattern
)
false
false
error
)
;
RETURN_NSRESULT_ON_FAILURE
(
error
)
;
if
(
!
mTopLevelUrlPattern
.
IsEmpty
(
)
)
{
mTopLevelMatcher
=
new
extensions
:
:
MatchPatternCore
(
NS_ConvertUTF8toUTF16
(
mTopLevelUrlPattern
)
false
false
error
)
;
RETURN_NSRESULT_ON_FAILURE
(
error
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
Matches
(
nsIURI
*
aURI
nsIURI
*
aTopLevelURI
bool
aIsPrivateBrowsing
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aResult
=
false
;
MOZ_ASSERT
(
mCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_INTERNAL_PREF
|
|
mCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_BASELINE
|
|
mCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_CONVENIENCE
)
;
if
(
(
mCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_BASELINE
&
&
!
StaticPrefs
:
:
privacy_trackingprotection_allow_list_baseline_enabled
(
)
)
|
|
(
mCategory
=
=
nsIUrlClassifierExceptionListEntry
:
:
Category
:
:
CATEGORY_CONVENIENCE
&
&
!
StaticPrefs
:
:
privacy_trackingprotection_allow_list_convenience_enabled
(
)
)
)
{
return
NS_OK
;
}
if
(
!
aIsPrivateBrowsing
&
&
mIsPrivateBrowsingOnly
)
{
return
NS_OK
;
}
if
(
!
mFilterContentBlockingCategories
.
IsEmpty
(
)
)
{
nsCString
prefValue
;
nsresult
rv
=
Preferences
:
:
GetCString
(
"
browser
.
contentblocking
.
category
"
prefValue
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
prefValue
.
IsEmpty
(
)
)
{
if
(
!
mFilterContentBlockingCategories
.
Contains
(
prefValue
)
)
{
return
NS_OK
;
}
}
}
if
(
!
mMatcher
-
>
Matches
(
aURI
)
)
{
return
NS_OK
;
}
if
(
mTopLevelMatcher
&
&
(
!
aTopLevelURI
|
|
!
mTopLevelMatcher
-
>
Matches
(
aTopLevelURI
)
)
)
{
return
NS_OK
;
}
*
aResult
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetCategory
(
nsIUrlClassifierExceptionListEntry
:
:
Category
*
aCategory
)
{
*
aCategory
=
mCategory
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetUrlPattern
(
nsACString
&
aUrlPattern
)
{
aUrlPattern
=
mUrlPattern
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetTopLevelUrlPattern
(
nsACString
&
aTopLevelUrlPattern
)
{
aTopLevelUrlPattern
=
mTopLevelUrlPattern
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetIsPrivateBrowsingOnly
(
bool
*
aIsPrivateBrowsingOnly
)
{
*
aIsPrivateBrowsingOnly
=
mIsPrivateBrowsingOnly
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetFilterContentBlockingCategories
(
nsTArray
<
nsCString
>
&
aFilterContentBlockingCategories
)
{
aFilterContentBlockingCategories
=
mFilterContentBlockingCategories
.
Clone
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
GetClassifierFeatures
(
nsTArray
<
nsCString
>
&
aClassifierFeatures
)
{
aClassifierFeatures
=
mClassifierFeatures
.
Clone
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionListEntry
:
:
Describe
(
nsACString
&
aDescription
)
{
nsAutoCString
categories
;
for
(
const
auto
&
category
:
mFilterContentBlockingCategories
)
{
if
(
!
categories
.
IsEmpty
(
)
)
{
categories
.
AppendLiteral
(
"
"
)
;
}
categories
.
Append
(
category
)
;
}
nsAutoCString
classifierFeatures
;
for
(
const
auto
&
feature
:
mClassifierFeatures
)
{
if
(
!
classifierFeatures
.
IsEmpty
(
)
)
{
classifierFeatures
.
AppendLiteral
(
"
"
)
;
}
classifierFeatures
.
Append
(
feature
)
;
}
aDescription
.
AppendPrintf
(
"
UrlClassifierExceptionListEntry
(
urlPattern
=
'
%
s
'
"
"
topLevelUrlPattern
=
'
%
s
'
isPrivateBrowsingOnly
=
%
s
"
"
filterContentBlockingCategories
=
[
%
s
]
classifierFeatures
=
[
%
s
]
)
"
mUrlPattern
.
get
(
)
mTopLevelUrlPattern
.
get
(
)
mIsPrivateBrowsingOnly
?
"
true
"
:
"
false
"
categories
.
get
(
)
classifierFeatures
.
get
(
)
)
;
return
NS_OK
;
}
}
