#
include
"
UrlClassifierFeaturePhishingProtection
.
h
"
namespace
mozilla
{
namespace
net
{
struct
UrlClassifierFeaturePhishingProtection
:
:
PhishingProtectionFeature
{
const
char
*
mName
;
const
char
*
mBlacklistPrefTables
;
bool
(
*
mPref
)
(
)
;
RefPtr
<
UrlClassifierFeaturePhishingProtection
>
mFeature
;
}
;
namespace
{
struct
UrlClassifierFeaturePhishingProtection
:
:
PhishingProtectionFeature
sPhishingProtectionFeaturesMap
[
]
=
{
{
"
malware
"
"
urlclassifier
.
malwareTable
"
StaticPrefs
:
:
browser_safebrowsing_malware_enabled
}
{
"
phishing
"
"
urlclassifier
.
phishTable
"
StaticPrefs
:
:
browser_safebrowsing_phishing_enabled
}
{
"
blockedURIs
"
"
urlclassifier
.
blockedTable
"
StaticPrefs
:
:
browser_safebrowsing_blockedURIs_enabled
}
}
;
}
UrlClassifierFeaturePhishingProtection
:
:
UrlClassifierFeaturePhishingProtection
(
const
UrlClassifierFeaturePhishingProtection
:
:
PhishingProtectionFeature
&
aFeature
)
:
UrlClassifierFeatureBase
(
nsDependentCString
(
aFeature
.
mName
)
nsDependentCString
(
aFeature
.
mBlacklistPrefTables
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
)
{
}
void
UrlClassifierFeaturePhishingProtection
:
:
GetFeatureNames
(
nsTArray
<
nsCString
>
&
aArray
)
{
for
(
const
PhishingProtectionFeature
&
feature
:
sPhishingProtectionFeaturesMap
)
{
if
(
feature
.
mPref
(
)
)
{
aArray
.
AppendElement
(
nsDependentCString
(
feature
.
mName
)
)
;
}
}
}
void
UrlClassifierFeaturePhishingProtection
:
:
MaybeInitialize
(
)
{
for
(
PhishingProtectionFeature
&
feature
:
sPhishingProtectionFeaturesMap
)
{
if
(
!
feature
.
mFeature
&
&
feature
.
mPref
(
)
)
{
feature
.
mFeature
=
new
UrlClassifierFeaturePhishingProtection
(
feature
)
;
feature
.
mFeature
-
>
InitializePreferences
(
)
;
}
}
}
void
UrlClassifierFeaturePhishingProtection
:
:
MaybeShutdown
(
)
{
for
(
PhishingProtectionFeature
&
feature
:
sPhishingProtectionFeaturesMap
)
{
if
(
feature
.
mFeature
)
{
feature
.
mFeature
-
>
ShutdownPreferences
(
)
;
feature
.
mFeature
=
nullptr
;
}
}
}
void
UrlClassifierFeaturePhishingProtection
:
:
MaybeCreate
(
nsTArray
<
RefPtr
<
nsIUrlClassifierFeature
>
>
&
aFeatures
)
{
MaybeInitialize
(
)
;
for
(
const
PhishingProtectionFeature
&
feature
:
sPhishingProtectionFeaturesMap
)
{
if
(
feature
.
mPref
(
)
)
{
MOZ_ASSERT
(
feature
.
mFeature
)
;
aFeatures
.
AppendElement
(
feature
.
mFeature
)
;
}
}
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeaturePhishingProtection
:
:
GetIfNameMatches
(
const
nsACString
&
aName
)
{
MaybeInitialize
(
)
;
for
(
const
PhishingProtectionFeature
&
feature
:
sPhishingProtectionFeaturesMap
)
{
if
(
feature
.
mPref
(
)
&
&
aName
.
Equals
(
feature
.
mName
)
)
{
MOZ_ASSERT
(
feature
.
mFeature
)
;
nsCOMPtr
<
nsIUrlClassifierFeature
>
self
=
feature
.
mFeature
.
get
(
)
;
return
self
.
forget
(
)
;
}
}
return
nullptr
;
}
NS_IMETHODIMP
UrlClassifierFeaturePhishingProtection
:
:
ProcessChannel
(
nsIChannel
*
aChannel
const
nsTArray
<
nsCString
>
&
aList
bool
*
aShouldContinue
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
UrlClassifierFeaturePhishingProtection
:
:
GetURIByListType
(
nsIChannel
*
aChannel
nsIUrlClassifierFeature
:
:
listType
aListType
nsIURI
*
*
aURI
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
}
}
