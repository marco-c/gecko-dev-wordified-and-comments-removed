#
include
"
mozilla
/
net
/
UrlClassifierFeatureFactory
.
h
"
#
include
"
UrlClassifierFeatureCryptomining
.
h
"
#
include
"
UrlClassifierFeatureFingerprinting
.
h
"
#
include
"
UrlClassifierFeatureFlash
.
h
"
#
include
"
UrlClassifierFeatureLoginReputation
.
h
"
#
include
"
UrlClassifierFeatureTrackingProtection
.
h
"
#
include
"
UrlClassifierFeatureTrackingAnnotation
.
h
"
#
include
"
UrlClassifierFeatureCustomTables
.
h
"
#
include
"
nsAppRunner
.
h
"
namespace
mozilla
{
namespace
net
{
void
UrlClassifierFeatureFactory
:
:
Shutdown
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
UrlClassifierFeatureCryptomining
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureFingerprinting
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureFlash
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureLoginReputation
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureTrackingAnnotation
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureTrackingProtection
:
:
MaybeShutdown
(
)
;
}
void
UrlClassifierFeatureFactory
:
:
GetFeaturesFromChannel
(
nsIChannel
*
aChannel
nsTArray
<
nsCOMPtr
<
nsIUrlClassifierFeature
>
>
&
aFeatures
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
;
feature
=
UrlClassifierFeatureCryptomining
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureFingerprinting
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureTrackingProtection
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureTrackingAnnotation
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
nsTArray
<
nsCOMPtr
<
nsIUrlClassifierFeature
>
>
flashFeatures
;
UrlClassifierFeatureFlash
:
:
MaybeCreate
(
aChannel
flashFeatures
)
;
aFeatures
.
AppendElements
(
flashFeatures
)
;
}
nsIUrlClassifierFeature
*
UrlClassifierFeatureFactory
:
:
GetFeatureLoginReputation
(
)
{
return
UrlClassifierFeatureLoginReputation
:
:
MaybeGetOrCreate
(
)
;
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeatureFactory
:
:
GetFeatureByName
(
const
nsACString
&
aName
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
;
feature
=
UrlClassifierFeatureCryptomining
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureFingerprinting
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureTrackingProtection
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureTrackingAnnotation
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureLoginReputation
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureFlash
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
return
nullptr
;
}
void
UrlClassifierFeatureFactory
:
:
GetFeatureNames
(
nsTArray
<
nsCString
>
&
aArray
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
nsAutoCString
name
;
name
.
Assign
(
UrlClassifierFeatureCryptomining
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureFingerprinting
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureTrackingProtection
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureTrackingAnnotation
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureLoginReputation
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
nsTArray
<
nsCString
>
features
;
UrlClassifierFeatureFlash
:
:
GetFeatureNames
(
features
)
;
aArray
.
AppendElements
(
features
)
;
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeatureFactory
:
:
CreateFeatureWithTables
(
const
nsACString
&
aName
const
nsTArray
<
nsCString
>
&
aBlacklistTables
const
nsTArray
<
nsCString
>
&
aWhitelistTables
)
{
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
=
new
UrlClassifierFeatureCustomTables
(
aName
aBlacklistTables
aWhitelistTables
)
;
return
feature
.
forget
(
)
;
}
}
}
