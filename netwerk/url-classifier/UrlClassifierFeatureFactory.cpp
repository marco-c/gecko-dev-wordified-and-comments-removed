#
include
"
mozilla
/
net
/
UrlClassifierFeatureFactory
.
h
"
#
include
"
UrlClassifierFeatureCryptomining
.
h
"
#
include
"
UrlClassifierFeatureFingerprinting
.
h
"
#
include
"
UrlClassifierFeatureFlash
.
h
"
#
include
"
UrlClassifierFeatureLoginReputation
.
h
"
#
include
"
UrlClassifierFeaturePhishingProtection
.
h
"
#
include
"
UrlClassifierFeatureTrackingProtection
.
h
"
#
include
"
UrlClassifierFeatureTrackingAnnotation
.
h
"
#
include
"
UrlClassifierFeatureCustomTables
.
h
"
#
include
"
nsAppRunner
.
h
"
namespace
mozilla
{
namespace
net
{
void
UrlClassifierFeatureFactory
:
:
Shutdown
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
UrlClassifierFeatureCryptomining
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureFingerprinting
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureFlash
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureLoginReputation
:
:
MaybeShutdown
(
)
;
UrlClassifierFeaturePhishingProtection
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureTrackingAnnotation
:
:
MaybeShutdown
(
)
;
UrlClassifierFeatureTrackingProtection
:
:
MaybeShutdown
(
)
;
}
void
UrlClassifierFeatureFactory
:
:
GetFeaturesFromChannel
(
nsIChannel
*
aChannel
nsTArray
<
nsCOMPtr
<
nsIUrlClassifierFeature
>
>
&
aFeatures
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
aChannel
)
;
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
;
feature
=
UrlClassifierFeatureCryptomining
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureFingerprinting
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureTrackingProtection
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
feature
=
UrlClassifierFeatureTrackingAnnotation
:
:
MaybeCreate
(
aChannel
)
;
if
(
feature
)
{
aFeatures
.
AppendElement
(
feature
)
;
}
nsTArray
<
nsCOMPtr
<
nsIUrlClassifierFeature
>
>
flashFeatures
;
UrlClassifierFeatureFlash
:
:
MaybeCreate
(
aChannel
flashFeatures
)
;
aFeatures
.
AppendElements
(
flashFeatures
)
;
}
void
UrlClassifierFeatureFactory
:
:
GetPhishingProtectionFeatures
(
nsTArray
<
RefPtr
<
nsIUrlClassifierFeature
>
>
&
aFeatures
)
{
UrlClassifierFeaturePhishingProtection
:
:
MaybeCreate
(
aFeatures
)
;
}
nsIUrlClassifierFeature
*
UrlClassifierFeatureFactory
:
:
GetFeatureLoginReputation
(
)
{
return
UrlClassifierFeatureLoginReputation
:
:
MaybeGetOrCreate
(
)
;
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeatureFactory
:
:
GetFeatureByName
(
const
nsACString
&
aName
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
;
feature
=
UrlClassifierFeatureCryptomining
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureFingerprinting
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureTrackingProtection
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureTrackingAnnotation
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureLoginReputation
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeatureFlash
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
feature
=
UrlClassifierFeaturePhishingProtection
:
:
GetIfNameMatches
(
aName
)
;
if
(
feature
)
{
return
feature
.
forget
(
)
;
}
return
nullptr
;
}
void
UrlClassifierFeatureFactory
:
:
GetFeatureNames
(
nsTArray
<
nsCString
>
&
aArray
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
nsAutoCString
name
;
name
.
Assign
(
UrlClassifierFeatureCryptomining
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureFingerprinting
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureTrackingProtection
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureTrackingAnnotation
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
name
.
Assign
(
UrlClassifierFeatureLoginReputation
:
:
Name
(
)
)
;
if
(
!
name
.
IsEmpty
(
)
)
{
aArray
.
AppendElement
(
name
)
;
}
{
nsTArray
<
nsCString
>
features
;
UrlClassifierFeatureFlash
:
:
GetFeatureNames
(
features
)
;
aArray
.
AppendElements
(
features
)
;
}
{
nsTArray
<
nsCString
>
features
;
UrlClassifierFeaturePhishingProtection
:
:
GetFeatureNames
(
features
)
;
aArray
.
AppendElements
(
features
)
;
}
}
already_AddRefed
<
nsIUrlClassifierFeature
>
UrlClassifierFeatureFactory
:
:
CreateFeatureWithTables
(
const
nsACString
&
aName
const
nsTArray
<
nsCString
>
&
aBlacklistTables
const
nsTArray
<
nsCString
>
&
aWhitelistTables
)
{
nsCOMPtr
<
nsIUrlClassifierFeature
>
feature
=
new
UrlClassifierFeatureCustomTables
(
aName
aBlacklistTables
aWhitelistTables
)
;
return
feature
.
forget
(
)
;
}
namespace
{
struct
BlockingErrorCode
{
nsresult
mErrorCode
;
uint32_t
mBlockingEventCode
;
const
char
*
mConsoleMessage
;
nsCString
mConsoleCategory
;
}
;
static
const
BlockingErrorCode
sBlockingErrorCodes
[
]
=
{
{
NS_ERROR_TRACKING_URI
nsIWebProgressListener
:
:
STATE_BLOCKED_TRACKING_CONTENT
"
TrackerUriBlocked
"
NS_LITERAL_CSTRING
(
"
Tracking
Protection
"
)
}
{
NS_ERROR_FINGERPRINTING_URI
nsIWebProgressListener
:
:
STATE_BLOCKED_FINGERPRINTING_CONTENT
"
TrackerUriBlocked
"
NS_LITERAL_CSTRING
(
"
Tracking
Protection
"
)
}
{
NS_ERROR_CRYPTOMINING_URI
nsIWebProgressListener
:
:
STATE_BLOCKED_CRYPTOMINING_CONTENT
"
TrackerUriBlocked
"
NS_LITERAL_CSTRING
(
"
Tracking
Protection
"
)
}
}
;
}
bool
UrlClassifierFeatureFactory
:
:
IsClassifierBlockingErrorCode
(
nsresult
aError
)
{
for
(
const
auto
&
blockingErrorCode
:
sBlockingErrorCodes
)
{
if
(
aError
=
=
blockingErrorCode
.
mErrorCode
)
{
return
true
;
}
}
return
false
;
}
bool
UrlClassifierFeatureFactory
:
:
IsClassifierBlockingEventCode
(
uint32_t
aEventCode
)
{
for
(
const
auto
&
blockingErrorCode
:
sBlockingErrorCodes
)
{
if
(
aEventCode
=
=
blockingErrorCode
.
mBlockingEventCode
)
{
return
true
;
}
}
return
false
;
}
uint32_t
UrlClassifierFeatureFactory
:
:
GetClassifierBlockingEventCode
(
nsresult
aErrorCode
)
{
for
(
const
auto
&
blockingErrorCode
:
sBlockingErrorCodes
)
{
if
(
aErrorCode
=
=
blockingErrorCode
.
mErrorCode
)
{
return
blockingErrorCode
.
mBlockingEventCode
;
}
}
return
0
;
}
const
char
*
UrlClassifierFeatureFactory
:
:
ClassifierBlockingErrorCodeToConsoleMessage
(
nsresult
aError
nsACString
&
aCategory
)
{
for
(
const
auto
&
blockingErrorCode
:
sBlockingErrorCodes
)
{
if
(
aError
=
=
blockingErrorCode
.
mErrorCode
)
{
aCategory
=
blockingErrorCode
.
mConsoleCategory
;
return
blockingErrorCode
.
mConsoleMessage
;
}
}
return
nullptr
;
}
}
}
