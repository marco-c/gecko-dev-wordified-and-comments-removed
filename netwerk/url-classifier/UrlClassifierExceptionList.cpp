#
include
"
UrlClassifierExceptionList
.
h
"
#
include
"
nsIEffectiveTLDService
.
h
"
#
include
"
nsIUrlClassifierExceptionListEntry
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
mozilla
/
net
/
UrlClassifierCommon
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
mozilla
/
RustRegex
.
h
"
namespace
mozilla
:
:
net
{
NS_IMPL_ISUPPORTS
(
UrlClassifierExceptionList
nsIUrlClassifierExceptionList
)
NS_IMETHODIMP
UrlClassifierExceptionList
:
:
Init
(
const
nsACString
&
aFeature
)
{
mFeature
=
aFeature
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionList
:
:
AddEntry
(
nsIUrlClassifierExceptionListEntry
*
aEntry
)
{
NS_ENSURE_ARG_POINTER
(
aEntry
)
;
nsAutoCString
urlPattern
;
nsresult
rv
=
aEntry
-
>
GetUrlPattern
(
urlPattern
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
site
;
rv
=
GetSchemelessSiteFromUrlPattern
(
urlPattern
site
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
!
site
.
IsEmpty
(
)
NS_ERROR_INVALID_ARG
)
;
nsAutoCString
topLevelUrlPattern
;
rv
=
aEntry
-
>
GetTopLevelUrlPattern
(
topLevelUrlPattern
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
topLevelSite
;
rv
=
GetSchemelessSiteFromUrlPattern
(
topLevelUrlPattern
topLevelSite
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
topLevelUrlPattern
.
IsEmpty
(
)
=
=
topLevelSite
.
IsEmpty
(
)
NS_ERROR_INVALID_ARG
)
;
if
(
MOZ_LOG_TEST
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
entryString
;
Unused
<
<
aEntry
-
>
Describe
(
entryString
)
;
UC_LOG_DEBUG
(
(
"
UrlClassifierExceptionList
:
:
%
s
-
Adding
entry
:
%
s
"
__FUNCTION__
entryString
.
get
(
)
)
)
;
}
if
(
topLevelSite
.
IsEmpty
(
)
)
{
mGlobalExceptions
.
LookupOrInsert
(
site
)
.
AppendElement
(
aEntry
)
;
return
NS_OK
;
}
mExceptions
.
LookupOrInsert
(
topLevelSite
)
.
LookupOrInsert
(
site
)
.
AppendElement
(
aEntry
)
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierExceptionList
:
:
Matches
(
nsIURI
*
aURI
nsIURI
*
aTopLevelURI
bool
aIsPrivateBrowsing
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aURI
)
;
NS_ENSURE_ARG_POINTER
(
aResult
)
;
AUTO_PROFILER_MARKER_UNTYPED
(
"
UrlClassifierExceptionList
:
:
Matches
"
OTHER
MarkerTiming
:
:
IntervalStart
(
)
)
;
*
aResult
=
false
;
UC_LOG_DEBUG
(
(
"
UrlClassifierExceptionList
:
:
%
s
-
aURI
:
%
s
aTopLevelURI
:
%
s
"
"
aIsPrivateBrowsing
:
%
d
"
__FUNCTION__
aURI
-
>
GetSpecOrDefault
(
)
.
get
(
)
aTopLevelURI
?
aTopLevelURI
-
>
GetSpecOrDefault
(
)
.
get
(
)
:
"
null
"
aIsPrivateBrowsing
)
)
;
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoCString
aTopLevelSite
;
if
(
aTopLevelURI
)
{
rv
=
eTLDService
-
>
GetSchemelessSite
(
aTopLevelURI
aTopLevelSite
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsAutoCString
aSite
;
rv
=
eTLDService
-
>
GetSchemelessSite
(
aURI
aSite
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
ExceptionEntryArray
*
globalExceptions
=
mGlobalExceptions
.
Lookup
(
aSite
)
.
DataPtrOrNull
(
)
;
*
aResult
=
ExceptionListMatchesLoad
(
globalExceptions
aURI
aTopLevelURI
aIsPrivateBrowsing
)
;
if
(
*
aResult
)
{
return
NS_OK
;
}
SiteToEntries
*
topLevelSiteToEntries
=
mExceptions
.
Lookup
(
aTopLevelSite
)
.
DataPtrOrNull
(
)
;
if
(
topLevelSiteToEntries
)
{
ExceptionEntryArray
*
siteSpecificExceptions
=
topLevelSiteToEntries
-
>
Lookup
(
aSite
)
.
DataPtrOrNull
(
)
;
*
aResult
=
ExceptionListMatchesLoad
(
siteSpecificExceptions
aURI
aTopLevelURI
aIsPrivateBrowsing
)
;
if
(
*
aResult
)
{
return
NS_OK
;
}
}
if
(
!
(
*
aResult
)
)
{
UC_LOG_DEBUG
(
(
"
%
s
-
No
match
found
"
__FUNCTION__
)
)
;
}
return
NS_OK
;
}
bool
UrlClassifierExceptionList
:
:
ExceptionListMatchesLoad
(
ExceptionEntryArray
*
aExceptions
nsIURI
*
aURI
nsIURI
*
aTopLevelURI
bool
aIsPrivateBrowsing
)
{
MOZ_ASSERT
(
aURI
)
;
if
(
!
aExceptions
)
{
return
false
;
}
for
(
const
auto
&
entry
:
*
aExceptions
)
{
bool
match
=
false
;
nsresult
rv
=
entry
-
>
Matches
(
aURI
aTopLevelURI
aIsPrivateBrowsing
&
match
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
continue
;
}
if
(
match
)
{
if
(
MOZ_LOG_TEST
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Debug
)
)
{
nsAutoCString
entryString
;
Unused
<
<
entry
-
>
Describe
(
entryString
)
;
UC_LOG_DEBUG
(
(
"
UrlClassifierExceptionList
:
:
%
s
-
Exception
list
match
found
.
"
"
entry
:
%
s
"
__FUNCTION__
entryString
.
get
(
)
)
)
;
}
return
true
;
}
}
return
false
;
}
NS_IMETHODIMP
UrlClassifierExceptionList
:
:
GetSchemelessSiteFromUrlPattern
(
const
nsACString
&
aUrlPattern
nsACString
&
aSite
)
{
if
(
aUrlPattern
.
IsEmpty
(
)
)
{
aSite
.
Truncate
(
)
;
return
NS_OK
;
}
mozilla
:
:
RustRegex
regex
(
"
:
/
/
(
?
:
\
\
*
\
\
.
)
?
(
[
^
/
*
]
+
)
"
)
;
mozilla
:
:
RustRegexCaptures
captures
=
regex
.
FindCaptures
(
aUrlPattern
)
;
NS_ENSURE_TRUE
(
captures
.
IsValid
(
)
NS_ERROR_INVALID_ARG
)
;
auto
maybeMatch
=
captures
[
1
]
;
NS_ENSURE_TRUE
(
maybeMatch
NS_ERROR_INVALID_ARG
)
;
nsAutoCString
host
;
host
.
Assign
(
Substring
(
aUrlPattern
maybeMatch
-
>
start
maybeMatch
-
>
end
-
maybeMatch
-
>
start
)
)
;
NS_ENSURE_TRUE
(
!
host
.
IsEmpty
(
)
NS_ERROR_INVALID_ARG
)
;
nsresult
rv
;
nsCOMPtr
<
nsIEffectiveTLDService
>
eTLDService
(
do_GetService
(
NS_EFFECTIVETLDSERVICE_CONTRACTID
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
eTLDService
-
>
GetSchemelessSiteFromHost
(
host
aSite
)
;
}
NS_IMETHODIMP
UrlClassifierExceptionList
:
:
TestGetEntries
(
nsTArray
<
RefPtr
<
nsIUrlClassifierExceptionListEntry
>
>
&
aEntries
)
{
for
(
const
auto
&
entry
:
mGlobalExceptions
)
{
const
ExceptionEntryArray
&
entries
=
entry
.
GetData
(
)
;
aEntries
.
AppendElements
(
entries
)
;
}
for
(
const
auto
&
outerEntry
:
mExceptions
)
{
const
SiteToEntries
&
innerMap
=
outerEntry
.
GetData
(
)
;
for
(
const
auto
&
innerEntry
:
innerMap
)
{
const
ExceptionEntryArray
&
entries
=
innerEntry
.
GetData
(
)
;
aEntries
.
AppendElements
(
entries
)
;
}
}
return
NS_OK
;
}
}
