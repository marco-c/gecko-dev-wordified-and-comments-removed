#
ifndef
mozilla_net_UrlClassifierCommon_h
#
define
mozilla_net_UrlClassifierCommon_h
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsString
.
h
"
#
include
<
vector
>
class
nsIChannel
;
class
nsIURI
;
#
define
UC_LOG
(
args
)
MOZ_LOG
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Info
args
)
#
define
UC_LOG_DEBUG
(
args
)
\
MOZ_LOG
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Debug
args
)
#
define
UC_LOG_WARN
(
args
)
\
MOZ_LOG
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Warning
args
)
#
define
UC_LOG_ENABLED
(
)
MOZ_LOG_TEST
(
UrlClassifierCommon
:
:
sLog
LogLevel
:
:
Info
)
namespace
mozilla
{
namespace
net
{
class
UrlClassifierCommon
final
{
public
:
static
const
nsCString
:
:
size_type
sMaxSpecLength
;
static
LazyLogModule
sLog
;
static
bool
AddonMayLoad
(
nsIChannel
*
aChannel
nsIURI
*
aURI
)
;
static
bool
ShouldEnableClassifier
(
nsIChannel
*
aChannel
)
;
static
nsresult
SetBlockedContent
(
nsIChannel
*
channel
nsresult
aErrorCode
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
;
static
nsresult
SetTrackingInfo
(
nsIChannel
*
channel
const
nsTArray
<
nsCString
>
&
aLists
const
nsTArray
<
nsCString
>
&
aFullHashes
)
;
static
nsresult
CreatePairwiseEntityListURI
(
nsIChannel
*
aChannel
nsIURI
*
*
aURI
)
;
static
void
AnnotateChannel
(
nsIChannel
*
aChannel
uint32_t
aClassificationFlags
uint32_t
aLoadingState
)
;
static
bool
IsAllowListed
(
nsIChannel
*
aChannel
)
;
static
bool
IsTrackingClassificationFlag
(
uint32_t
aFlag
)
;
static
bool
IsSocialTrackingClassificationFlag
(
uint32_t
aFlag
)
;
static
bool
IsCryptominingClassificationFlag
(
uint32_t
aFlag
)
;
static
void
TablesToString
(
const
nsTArray
<
nsCString
>
&
aList
nsACString
&
aString
)
;
struct
ClassificationData
{
nsCString
mPrefix
;
uint32_t
mFlag
;
}
;
static
uint32_t
TablesToClassificationFlags
(
const
nsTArray
<
nsCString
>
&
aList
const
std
:
:
vector
<
ClassificationData
>
&
aData
uint32_t
aDefaultFlag
)
;
static
bool
IsPassiveContent
(
nsIChannel
*
aChannel
)
;
static
void
SetClassificationFlagsHelper
(
nsIChannel
*
aChannel
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
;
private
:
static
uint32_t
TableToClassificationFlag
(
const
nsACString
&
aTable
const
std
:
:
vector
<
ClassificationData
>
&
aData
)
;
}
;
}
}
#
endif
