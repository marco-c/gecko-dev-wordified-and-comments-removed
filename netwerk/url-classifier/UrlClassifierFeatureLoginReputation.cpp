#
include
"
UrlClassifierFeatureLoginReputation
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
namespace
mozilla
{
namespace
net
{
namespace
{
#
define
PREF_PASSWORD_ALLOW_TABLE
"
urlclassifier
.
passwordAllowTable
"
StaticRefPtr
<
UrlClassifierFeatureLoginReputation
>
gFeatureLoginReputation
;
}
UrlClassifierFeatureLoginReputation
:
:
UrlClassifierFeatureLoginReputation
(
)
:
UrlClassifierFeatureBase
(
NS_LITERAL_CSTRING
(
"
login
-
reputation
"
)
EmptyCString
(
)
NS_LITERAL_CSTRING
(
PREF_PASSWORD_ALLOW_TABLE
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
EmptyCString
(
)
)
{
}
void
UrlClassifierFeatureLoginReputation
:
:
MaybeShutdown
(
)
{
UC_LOG
(
(
"
UrlClassifierFeatureLoginReputation
:
MaybeShutdown
"
)
)
;
if
(
gFeatureLoginReputation
)
{
gFeatureLoginReputation
-
>
ShutdownPreferences
(
)
;
gFeatureLoginReputation
=
nullptr
;
}
}
nsIUrlClassifierFeature
*
UrlClassifierFeatureLoginReputation
:
:
MaybeGetOrCreate
(
)
{
if
(
!
StaticPrefs
:
:
browser_safebrowsing_passwords_enabled
(
)
)
{
return
nullptr
;
}
if
(
!
gFeatureLoginReputation
)
{
gFeatureLoginReputation
=
new
UrlClassifierFeatureLoginReputation
(
)
;
gFeatureLoginReputation
-
>
InitializePreferences
(
)
;
}
return
gFeatureLoginReputation
;
}
NS_IMETHODIMP
UrlClassifierFeatureLoginReputation
:
:
ProcessChannel
(
nsIChannel
*
aChannel
const
nsACString
&
aList
bool
*
aShouldContinue
)
{
MOZ_CRASH
(
"
UrlClassifierFeatureLoginReputation
:
:
ProcessChannel
should
never
be
"
"
called
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
UrlClassifierFeatureLoginReputation
:
:
GetTables
(
nsIUrlClassifierFeature
:
:
listType
aListType
nsTArray
<
nsCString
>
&
aTables
)
{
MOZ_ASSERT
(
aListType
=
=
nsIUrlClassifierFeature
:
:
whitelist
"
UrlClassifierFeatureLoginReputation
is
meant
to
be
used
just
to
"
"
whitelist
URLs
"
)
;
return
UrlClassifierFeatureBase
:
:
GetTables
(
aListType
aTables
)
;
}
NS_IMETHODIMP
UrlClassifierFeatureLoginReputation
:
:
HasTable
(
const
nsACString
&
aTable
nsIUrlClassifierFeature
:
:
listType
aListType
bool
*
aResult
)
{
MOZ_ASSERT
(
aListType
=
=
nsIUrlClassifierFeature
:
:
whitelist
"
UrlClassifierFeatureLoginReputation
is
meant
to
be
used
just
to
"
"
whitelist
URLs
"
)
;
return
UrlClassifierFeatureBase
:
:
HasTable
(
aTable
aListType
aResult
)
;
}
NS_IMETHODIMP
UrlClassifierFeatureLoginReputation
:
:
HasHostInPreferences
(
const
nsACString
&
aHost
nsIUrlClassifierFeature
:
:
listType
aListType
nsACString
&
aPrefTableName
bool
*
aResult
)
{
MOZ_ASSERT
(
aListType
=
=
nsIUrlClassifierFeature
:
:
whitelist
"
UrlClassifierFeatureLoginReputation
is
meant
to
be
used
just
to
"
"
whitelist
URLs
"
)
;
return
UrlClassifierFeatureBase
:
:
HasHostInPreferences
(
aHost
aListType
aPrefTableName
aResult
)
;
}
}
}
