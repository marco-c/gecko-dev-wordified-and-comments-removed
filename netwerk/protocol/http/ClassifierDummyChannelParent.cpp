#
include
"
ClassifierDummyChannelParent
.
h
"
#
include
"
mozilla
/
net
/
AsyncUrlChannelClassifier
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsNetUtil
.
h
"
namespace
mozilla
{
namespace
net
{
ClassifierDummyChannelParent
:
:
ClassifierDummyChannelParent
(
)
:
mIPCActive
(
true
)
{
}
ClassifierDummyChannelParent
:
:
~
ClassifierDummyChannelParent
(
)
=
default
;
void
ClassifierDummyChannelParent
:
:
Init
(
nsIURI
*
aURI
nsIURI
*
aTopWindowURI
nsresult
aTopWindowURIResult
nsILoadInfo
*
aLoadInfo
)
{
MOZ_ASSERT
(
mIPCActive
)
;
RefPtr
<
ClassifierDummyChannelParent
>
self
=
this
;
auto
onExit
=
MakeScopeExit
(
[
self
]
{
Unused
<
<
Send__delete__
(
self
false
)
;
}
)
;
if
(
!
aURI
)
{
return
;
}
RefPtr
<
ClassifierDummyChannel
>
channel
=
new
ClassifierDummyChannel
(
aURI
aTopWindowURI
aTopWindowURIResult
aLoadInfo
)
;
bool
willCallback
=
NS_SUCCEEDED
(
AsyncUrlChannelClassifier
:
:
CheckChannel
(
channel
[
self
=
std
:
:
move
(
self
)
channel
]
(
)
{
if
(
self
-
>
mIPCActive
)
{
Unused
<
<
Send__delete__
(
self
channel
-
>
GetClassificationFlags
(
)
)
;
}
}
)
)
;
if
(
willCallback
)
{
onExit
.
release
(
)
;
}
}
void
ClassifierDummyChannelParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mIPCActive
=
false
;
}
}
}
