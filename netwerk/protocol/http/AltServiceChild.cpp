#
include
"
HttpLog
.
h
"
#
include
"
AltServiceChild
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
net
/
SocketProcessChild
.
h
"
#
include
"
nsHttpConnectionInfo
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
net
{
StaticRefPtr
<
AltServiceChild
>
sAltServiceChild
;
AltServiceChild
:
:
AltServiceChild
(
)
{
LOG
(
(
"
AltServiceChild
ctor
[
%
p
]
\
n
"
this
)
)
;
}
AltServiceChild
:
:
~
AltServiceChild
(
)
{
LOG
(
(
"
AltServiceChild
dtor
[
%
p
]
\
n
"
this
)
)
;
}
bool
AltServiceChild
:
:
EnsureAltServiceChild
(
)
{
MOZ_ASSERT
(
XRE_IsSocketProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sAltServiceChild
)
{
return
true
;
}
SocketProcessChild
*
socketChild
=
SocketProcessChild
:
:
GetSingleton
(
)
;
if
(
!
socketChild
|
|
socketChild
-
>
IsShuttingDown
(
)
)
{
return
false
;
}
sAltServiceChild
=
new
AltServiceChild
(
)
;
ClearOnShutdown
(
&
sAltServiceChild
)
;
if
(
!
socketChild
-
>
SendPAltServiceConstructor
(
sAltServiceChild
)
)
{
sAltServiceChild
=
nullptr
;
return
false
;
}
return
true
;
}
void
AltServiceChild
:
:
ClearHostMapping
(
nsHttpConnectionInfo
*
aCi
)
{
LOG
(
(
"
AltServiceChild
:
:
ClearHostMapping
ci
=
%
s
"
aCi
-
>
HashKey
(
)
.
get
(
)
)
)
;
MOZ_ASSERT
(
aCi
)
;
RefPtr
<
nsHttpConnectionInfo
>
ci
=
aCi
-
>
Clone
(
)
;
auto
task
=
[
ci
{
std
:
:
move
(
ci
)
}
]
(
)
{
if
(
!
EnsureAltServiceChild
(
)
)
{
return
;
}
if
(
!
ci
-
>
GetOrigin
(
)
.
IsEmpty
(
)
&
&
sAltServiceChild
-
>
CanSend
(
)
)
{
Unused
<
<
sAltServiceChild
-
>
SendClearHostMapping
(
ci
-
>
GetOrigin
(
)
ci
-
>
OriginPort
(
)
ci
-
>
GetOriginAttributes
(
)
ci
-
>
GetTopWindowOrigin
(
)
)
;
}
}
;
if
(
!
NS_IsMainThread
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
net
:
:
AltServiceChild
:
:
ClearHostMapping
"
task
)
)
)
;
return
;
}
task
(
)
;
}
}
}
