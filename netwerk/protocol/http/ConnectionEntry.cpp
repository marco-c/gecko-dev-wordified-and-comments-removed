#
include
"
HttpLog
.
h
"
#
undef
LOG
#
define
LOG
(
args
)
LOG5
(
args
)
#
undef
LOG_ENABLED
#
define
LOG_ENABLED
(
)
LOG5_ENABLED
(
)
#
include
"
ConnectionEntry
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
mozilla
/
ChaosMode
.
h
"
namespace
mozilla
{
namespace
net
{
ConnectionEntry
:
:
~
ConnectionEntry
(
)
{
LOG
(
(
"
ConnectionEntry
:
:
~
ConnectionEntry
this
=
%
p
"
this
)
)
;
MOZ_ASSERT
(
!
mIdleConns
.
Length
(
)
)
;
MOZ_ASSERT
(
!
mActiveConns
.
Length
(
)
)
;
MOZ_ASSERT
(
!
mHalfOpens
.
Length
(
)
)
;
MOZ_ASSERT
(
!
PendingQueueLength
(
)
)
;
MOZ_ASSERT
(
!
UrgentStartQueueLength
(
)
)
;
MOZ_ASSERT
(
!
mHalfOpenFastOpenBackups
.
Length
(
)
)
;
MOZ_ASSERT
(
!
mDoNotDestroy
)
;
}
ConnectionEntry
:
:
ConnectionEntry
(
nsHttpConnectionInfo
*
ci
)
:
mConnInfo
(
ci
)
mUsingSpdy
(
false
)
mCanUseSpdy
(
true
)
mPreferIPv4
(
false
)
mPreferIPv6
(
false
)
mUsedForConnection
(
false
)
mDoNotDestroy
(
false
)
{
if
(
mConnInfo
-
>
FirstHopSSL
(
)
&
&
!
mConnInfo
-
>
IsHttp3
(
)
)
{
mUseFastOpen
=
gHttpHandler
-
>
UseFastOpen
(
)
;
}
else
{
mUseFastOpen
=
false
;
}
LOG
(
(
"
ConnectionEntry
:
:
ConnectionEntry
this
=
%
p
key
=
%
s
"
this
ci
-
>
HashKey
(
)
.
get
(
)
)
)
;
}
bool
ConnectionEntry
:
:
AvailableForDispatchNow
(
)
{
if
(
mIdleConns
.
Length
(
)
&
&
mIdleConns
[
0
]
-
>
CanReuse
(
)
)
{
return
true
;
}
return
gHttpHandler
-
>
ConnMgr
(
)
-
>
GetH2orH3ActiveConn
(
this
false
)
?
true
:
false
;
}
uint32_t
ConnectionEntry
:
:
UnconnectedHalfOpens
(
)
const
{
uint32_t
unconnectedHalfOpens
=
0
;
for
(
uint32_t
i
=
0
;
i
<
mHalfOpens
.
Length
(
)
;
+
+
i
)
{
if
(
!
mHalfOpens
[
i
]
-
>
HasConnected
(
)
)
{
+
+
unconnectedHalfOpens
;
}
}
return
unconnectedHalfOpens
;
}
void
ConnectionEntry
:
:
RemoveHalfOpen
(
HalfOpenSocket
*
halfOpen
)
{
if
(
mHalfOpens
.
RemoveElement
(
halfOpen
)
)
{
if
(
halfOpen
-
>
IsSpeculative
(
)
)
{
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
HTTPCONNMGR_UNUSED_SPECULATIVE_CONN
>
unusedSpeculativeConn
;
+
+
unusedSpeculativeConn
;
if
(
halfOpen
-
>
IsFromPredictor
(
)
)
{
Telemetry
:
:
AutoCounter
<
Telemetry
:
:
PREDICTOR_TOTAL_PRECONNECTS_UNUSED
>
totalPreconnectsUnused
;
+
+
totalPreconnectsUnused
;
}
}
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecreaseNumHalfOpenConns
(
)
;
}
else
{
mHalfOpenFastOpenBackups
.
RemoveElement
(
halfOpen
)
;
}
if
(
!
UnconnectedHalfOpens
(
)
)
{
nsresult
rv
=
gHttpHandler
-
>
ConnMgr
(
)
-
>
ProcessPendingQ
(
mConnInfo
)
;
if
(
NS_FAILED
(
rv
)
)
{
LOG
(
(
"
ConnectionEntry
:
:
RemoveHalfOpen
\
n
"
"
failed
to
process
pending
queue
\
n
"
)
)
;
}
}
}
void
ConnectionEntry
:
:
DisallowHttp2
(
)
{
mCanUseSpdy
=
false
;
for
(
uint32_t
i
=
0
;
i
<
mActiveConns
.
Length
(
)
;
+
+
i
)
{
if
(
mActiveConns
[
i
]
-
>
UsingSpdy
(
)
)
{
mActiveConns
[
i
]
-
>
DontReuse
(
)
;
}
}
for
(
uint32_t
i
=
0
;
i
<
mIdleConns
.
Length
(
)
;
+
+
i
)
{
if
(
mIdleConns
[
i
]
-
>
UsingSpdy
(
)
)
{
mIdleConns
[
i
]
-
>
DontReuse
(
)
;
}
}
mCoalescingKeys
.
Clear
(
)
;
}
void
ConnectionEntry
:
:
DontReuseHttp3Conn
(
)
{
MOZ_ASSERT
(
mConnInfo
-
>
IsHttp3
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
mActiveConns
.
Length
(
)
;
+
+
i
)
{
mActiveConns
[
i
]
-
>
DontReuse
(
)
;
}
mCoalescingKeys
.
Clear
(
)
;
}
void
ConnectionEntry
:
:
RecordIPFamilyPreference
(
uint16_t
family
)
{
LOG
(
(
"
ConnectionEntry
:
:
RecordIPFamilyPreference
%
p
af
=
%
u
"
this
family
)
)
;
if
(
family
=
=
PR_AF_INET
&
&
!
mPreferIPv6
)
{
mPreferIPv4
=
true
;
}
if
(
family
=
=
PR_AF_INET6
&
&
!
mPreferIPv4
)
{
mPreferIPv6
=
true
;
}
LOG
(
(
"
%
p
prefer
ipv4
=
%
d
ipv6
=
%
d
"
this
(
bool
)
mPreferIPv4
(
bool
)
mPreferIPv6
)
)
;
}
void
ConnectionEntry
:
:
ResetIPFamilyPreference
(
)
{
LOG
(
(
"
ConnectionEntry
:
:
ResetIPFamilyPreference
%
p
"
this
)
)
;
mPreferIPv4
=
false
;
mPreferIPv6
=
false
;
}
bool
net
:
:
ConnectionEntry
:
:
PreferenceKnown
(
)
const
{
return
(
bool
)
mPreferIPv4
|
|
(
bool
)
mPreferIPv6
;
}
size_t
ConnectionEntry
:
:
PendingQueueLength
(
)
const
{
return
mPendingQ
.
PendingQueueLength
(
)
;
}
size_t
ConnectionEntry
:
:
PendingQueueLengthForWindow
(
uint64_t
windowId
)
const
{
return
mPendingQ
.
PendingQueueLengthForWindow
(
windowId
)
;
}
void
ConnectionEntry
:
:
AppendPendingUrgentStartQ
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
)
{
mPendingQ
.
AppendPendingUrgentStartQ
(
result
)
;
}
void
ConnectionEntry
:
:
AppendPendingQForFocusedWindow
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
)
{
mPendingQ
.
AppendPendingQForFocusedWindow
(
windowId
result
maxCount
)
;
LOG
(
(
"
ConnectionEntry
:
:
AppendPendingQForFocusedWindow
[
ci
=
%
s
]
"
"
pendingQ
count
=
%
zu
for
focused
window
(
id
=
%
"
PRIu64
"
)
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
result
.
Length
(
)
windowId
)
)
;
}
void
ConnectionEntry
:
:
AppendPendingQForNonFocusedWindows
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
)
{
mPendingQ
.
AppendPendingQForNonFocusedWindows
(
windowId
result
maxCount
)
;
LOG
(
(
"
ConnectionEntry
:
:
AppendPendingQForNonFocusedWindows
[
ci
=
%
s
]
"
"
pendingQ
count
=
%
zu
for
non
focused
window
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
result
.
Length
(
)
)
)
;
}
void
ConnectionEntry
:
:
RemoveEmptyPendingQ
(
)
{
mPendingQ
.
RemoveEmptyPendingQ
(
)
;
}
void
ConnectionEntry
:
:
InsertTransactionSorted
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
PendingTransactionInfo
*
pendingTransInfo
bool
aInsertAsFirstForTheSamePriority
)
{
mPendingQ
.
InsertTransactionSorted
(
pendingQ
pendingTransInfo
aInsertAsFirstForTheSamePriority
)
;
}
void
ConnectionEntry
:
:
ReschedTransaction
(
nsHttpTransaction
*
aTrans
)
{
mPendingQ
.
ReschedTransaction
(
aTrans
)
;
}
void
ConnectionEntry
:
:
InsertTransaction
(
PendingTransactionInfo
*
pendingTransInfo
bool
aInsertAsFirstForTheSamePriority
)
{
mPendingQ
.
InsertTransaction
(
pendingTransInfo
aInsertAsFirstForTheSamePriority
)
;
}
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
*
ConnectionEntry
:
:
GetTransactionPendingQHelper
(
nsAHttpTransaction
*
trans
)
{
return
mPendingQ
.
GetTransactionPendingQHelper
(
trans
)
;
}
bool
ConnectionEntry
:
:
RestrictConnections
(
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
if
(
AvailableForDispatchNow
(
)
)
{
LOG
(
(
"
ConnectionEntry
:
:
RestrictConnections
%
p
%
s
restricted
due
to
"
"
active
>
=
h2
\
n
"
this
mConnInfo
-
>
HashKey
(
)
.
get
(
)
)
)
;
return
true
;
}
bool
doRestrict
=
mConnInfo
-
>
FirstHopSSL
(
)
&
&
gHttpHandler
-
>
IsSpdyEnabled
(
)
&
&
mUsingSpdy
&
&
(
mHalfOpens
.
Length
(
)
|
|
mActiveConns
.
Length
(
)
)
;
if
(
!
doRestrict
)
{
return
false
;
}
if
(
UnconnectedHalfOpens
(
)
)
{
return
true
;
}
if
(
mUsingSpdy
&
&
mActiveConns
.
Length
(
)
)
{
bool
confirmedRestrict
=
false
;
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
HttpConnectionBase
*
conn
=
mActiveConns
[
index
]
;
RefPtr
<
nsHttpConnection
>
connTCP
=
do_QueryObject
(
conn
)
;
if
(
(
connTCP
&
&
!
connTCP
-
>
ReportedNPN
(
)
)
|
|
conn
-
>
CanDirectlyActivate
(
)
)
{
confirmedRestrict
=
true
;
break
;
}
}
doRestrict
=
confirmedRestrict
;
if
(
!
confirmedRestrict
)
{
LOG
(
(
"
nsHttpConnectionMgr
spdy
connection
restriction
to
"
"
%
s
bypassed
.
\
n
"
mConnInfo
-
>
Origin
(
)
)
)
;
}
}
return
doRestrict
;
}
uint32_t
ConnectionEntry
:
:
TotalActiveConnections
(
)
const
{
return
mActiveConns
.
Length
(
)
+
UnconnectedHalfOpens
(
)
;
}
size_t
ConnectionEntry
:
:
UrgentStartQueueLength
(
)
{
return
mPendingQ
.
UrgentStartQueueLength
(
)
;
}
void
ConnectionEntry
:
:
PrintPendingQ
(
)
{
mPendingQ
.
PrintPendingQ
(
)
;
}
void
ConnectionEntry
:
:
Compact
(
)
{
mIdleConns
.
Compact
(
)
;
mActiveConns
.
Compact
(
)
;
mPendingQ
.
Compact
(
)
;
}
void
ConnectionEntry
:
:
RemoveFromIdleConnectionsIndex
(
size_t
inx
)
{
mIdleConns
.
RemoveElementAt
(
inx
)
;
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecrementNumIdleConns
(
)
;
}
bool
ConnectionEntry
:
:
RemoveFromIdleConnections
(
nsHttpConnection
*
conn
)
{
if
(
!
mIdleConns
.
RemoveElement
(
conn
)
)
{
return
false
;
}
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecrementNumIdleConns
(
)
;
return
true
;
}
void
ConnectionEntry
:
:
CancelAllTransactions
(
nsresult
reason
)
{
mPendingQ
.
CancelAllTransactions
(
reason
)
;
}
nsresult
ConnectionEntry
:
:
CloseIdleConnection
(
nsHttpConnection
*
conn
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
RefPtr
<
nsHttpConnection
>
deleteProtector
(
conn
)
;
if
(
!
RemoveFromIdleConnections
(
conn
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
return
NS_OK
;
}
void
ConnectionEntry
:
:
CloseIdleConnections
(
)
{
while
(
mIdleConns
.
Length
(
)
)
{
RefPtr
<
nsHttpConnection
>
conn
(
mIdleConns
[
0
]
)
;
RemoveFromIdleConnectionsIndex
(
0
)
;
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
}
}
void
ConnectionEntry
:
:
CloseIdleConnections
(
uint32_t
maxToClose
)
{
uint32_t
closed
=
0
;
while
(
mIdleConns
.
Length
(
)
&
&
(
closed
<
maxToClose
)
)
{
RefPtr
<
nsHttpConnection
>
conn
(
mIdleConns
[
0
]
)
;
RemoveFromIdleConnectionsIndex
(
0
)
;
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
closed
+
+
;
}
}
nsresult
ConnectionEntry
:
:
RemoveIdleConnection
(
nsHttpConnection
*
conn
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
if
(
!
RemoveFromIdleConnections
(
conn
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
conn
-
>
EndIdleMonitoring
(
)
;
return
NS_OK
;
}
bool
ConnectionEntry
:
:
IsInIdleConnections
(
nsHttpConnection
*
conn
)
{
return
mIdleConns
.
Contains
(
conn
)
;
}
already_AddRefed
<
nsHttpConnection
>
ConnectionEntry
:
:
GetIdleConnection
(
bool
respectUrgency
bool
urgentTrans
bool
*
onlyUrgent
)
{
RefPtr
<
nsHttpConnection
>
conn
;
size_t
index
=
0
;
while
(
!
conn
&
&
(
mIdleConns
.
Length
(
)
>
index
)
)
{
conn
=
mIdleConns
[
index
]
;
if
(
!
conn
-
>
CanReuse
(
)
)
{
RemoveFromIdleConnectionsIndex
(
index
)
;
LOG
(
(
"
dropping
stale
connection
:
[
conn
=
%
p
]
\
n
"
conn
.
get
(
)
)
)
;
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
conn
=
nullptr
;
continue
;
}
if
(
respectUrgency
&
&
conn
-
>
IsUrgentStartPreferred
(
)
&
&
!
urgentTrans
)
{
LOG
(
(
"
skipping
urgent
:
[
conn
=
%
p
]
"
conn
.
get
(
)
)
)
;
conn
=
nullptr
;
+
+
index
;
continue
;
}
*
onlyUrgent
=
false
;
RemoveFromIdleConnectionsIndex
(
index
)
;
conn
-
>
EndIdleMonitoring
(
)
;
LOG
(
(
"
reusing
connection
:
[
conn
=
%
p
]
\
n
"
conn
.
get
(
)
)
)
;
}
return
conn
.
forget
(
)
;
}
nsresult
ConnectionEntry
:
:
RemoveActiveConnection
(
HttpConnectionBase
*
conn
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
if
(
!
mActiveConns
.
RemoveElement
(
conn
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecrementActiveConnCount
(
conn
)
;
return
NS_OK
;
}
void
ConnectionEntry
:
:
ClosePersistentConnections
(
)
{
LOG
(
(
"
ConnectionEntry
:
:
ClosePersistentConnections
[
ci
=
%
s
]
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
)
)
;
CloseIdleConnections
(
)
;
int32_t
activeCount
=
mActiveConns
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
activeCount
;
i
+
+
)
{
mActiveConns
[
i
]
-
>
DontReuse
(
)
;
}
for
(
int32_t
index
=
mHalfOpenFastOpenBackups
.
Length
(
)
-
1
;
index
>
=
0
;
-
-
index
)
{
RefPtr
<
HalfOpenSocket
>
half
=
mHalfOpenFastOpenBackups
[
index
]
;
half
-
>
CancelFastOpenConnection
(
)
;
}
}
uint32_t
ConnectionEntry
:
:
PruneDeadConnections
(
)
{
uint32_t
timeToNextExpire
=
UINT32_MAX
;
for
(
int32_t
len
=
mIdleConns
.
Length
(
)
;
len
>
0
;
-
-
len
)
{
int32_t
idx
=
len
-
1
;
RefPtr
<
nsHttpConnection
>
conn
(
mIdleConns
[
idx
]
)
;
if
(
!
conn
-
>
CanReuse
(
)
)
{
RemoveFromIdleConnectionsIndex
(
idx
)
;
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
}
else
{
timeToNextExpire
=
std
:
:
min
(
timeToNextExpire
conn
-
>
TimeToLive
(
)
)
;
}
}
if
(
mUsingSpdy
)
{
for
(
uint32_t
i
=
0
;
i
<
mActiveConns
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
nsHttpConnection
>
connTCP
=
do_QueryObject
(
mActiveConns
[
i
]
)
;
if
(
connTCP
&
&
connTCP
-
>
UsingSpdy
(
)
)
{
if
(
!
connTCP
-
>
CanReuse
(
)
)
{
connTCP
-
>
DontReuse
(
)
;
}
else
{
timeToNextExpire
=
std
:
:
min
(
timeToNextExpire
connTCP
-
>
TimeToLive
(
)
)
;
}
}
}
}
return
timeToNextExpire
;
}
void
ConnectionEntry
:
:
VerifyTraffic
(
)
{
if
(
!
mConnInfo
-
>
IsHttp3
(
)
)
{
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
RefPtr
<
nsHttpConnection
>
conn
=
do_QueryObject
(
mActiveConns
[
index
]
)
;
if
(
conn
)
{
conn
-
>
CheckForTraffic
(
true
)
;
}
}
for
(
uint32_t
index
=
0
;
index
<
mIdleConns
.
Length
(
)
;
+
+
index
)
{
RefPtr
<
nsHttpConnection
>
conn
=
do_QueryObject
(
mIdleConns
[
index
]
)
;
if
(
conn
)
{
conn
-
>
CheckForTraffic
(
false
)
;
}
}
}
}
void
ConnectionEntry
:
:
InsertIntoIdleConnections
(
nsHttpConnection
*
conn
)
{
uint32_t
idx
;
for
(
idx
=
0
;
idx
<
mIdleConns
.
Length
(
)
;
idx
+
+
)
{
nsHttpConnection
*
idleConn
=
mIdleConns
[
idx
]
;
if
(
idleConn
-
>
MaxBytesRead
(
)
<
conn
-
>
MaxBytesRead
(
)
)
{
break
;
}
}
mIdleConns
.
InsertElementAt
(
idx
conn
)
;
gHttpHandler
-
>
ConnMgr
(
)
-
>
IncrementNumIdleConns
(
)
;
conn
-
>
BeginIdleMonitoring
(
)
;
}
bool
ConnectionEntry
:
:
IsInActiveConns
(
HttpConnectionBase
*
conn
)
{
return
mActiveConns
.
Contains
(
conn
)
;
}
void
ConnectionEntry
:
:
InsertIntoActiveConns
(
HttpConnectionBase
*
conn
)
{
mActiveConns
.
AppendElement
(
conn
)
;
gHttpHandler
-
>
ConnMgr
(
)
-
>
IncrementActiveConnCount
(
)
;
}
void
ConnectionEntry
:
:
MakeAllDontReuseExcept
(
HttpConnectionBase
*
conn
)
{
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
HttpConnectionBase
*
otherConn
=
mActiveConns
[
index
]
;
if
(
otherConn
!
=
conn
)
{
LOG
(
(
"
UpdateCoalescingForNewConn
(
)
shutting
down
old
connection
(
%
p
)
"
"
because
new
"
"
spdy
connection
(
%
p
)
takes
precedence
\
n
"
otherConn
conn
)
)
;
otherConn
-
>
DontReuse
(
)
;
}
}
}
bool
ConnectionEntry
:
:
FindConnToClaim
(
PendingTransactionInfo
*
pendingTransInfo
)
{
uint32_t
activeLength
=
mActiveConns
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
activeLength
;
i
+
+
)
{
nsAHttpTransaction
*
activeTrans
=
mActiveConns
[
i
]
-
>
Transaction
(
)
;
NullHttpTransaction
*
nullTrans
=
activeTrans
?
activeTrans
-
>
QueryNullTransaction
(
)
:
nullptr
;
if
(
nullTrans
&
&
nullTrans
-
>
Claim
(
)
)
{
LOG
(
(
"
ConnectionEntry
:
:
MakeNewConnection
[
ci
=
%
s
]
"
"
Claiming
a
null
transaction
for
later
use
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
)
)
;
pendingTransInfo
-
>
mActiveConn
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
mActiveConns
[
i
]
)
)
;
return
true
;
}
}
return
false
;
}
bool
ConnectionEntry
:
:
MakeFirstActiveSpdyConnDontReuse
(
)
{
if
(
!
mUsingSpdy
)
{
return
false
;
}
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
HttpConnectionBase
*
conn
=
mActiveConns
[
index
]
;
if
(
conn
-
>
UsingSpdy
(
)
&
&
conn
-
>
CanReuse
(
)
)
{
conn
-
>
DontReuse
(
)
;
return
true
;
}
}
return
false
;
}
HttpConnectionBase
*
ConnectionEntry
:
:
GetH2orH3ActiveConn
(
bool
aNoHttp3
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
HttpConnectionBase
*
experienced
=
nullptr
;
HttpConnectionBase
*
noExperience
=
nullptr
;
uint32_t
activeLen
=
mActiveConns
.
Length
(
)
;
for
(
uint32_t
index
=
0
;
index
<
activeLen
;
+
+
index
)
{
HttpConnectionBase
*
tmp
=
mActiveConns
[
index
]
;
if
(
tmp
-
>
CanDirectlyActivate
(
)
)
{
if
(
tmp
-
>
IsExperienced
(
)
)
{
experienced
=
tmp
;
break
;
}
noExperience
=
tmp
;
}
}
if
(
experienced
)
{
for
(
uint32_t
index
=
0
;
index
<
activeLen
;
+
+
index
)
{
HttpConnectionBase
*
tmp
=
mActiveConns
[
index
]
;
if
(
tmp
!
=
experienced
)
{
tmp
-
>
DontReuse
(
)
;
}
}
for
(
int32_t
index
=
mHalfOpenFastOpenBackups
.
Length
(
)
-
1
;
index
>
=
0
;
-
-
index
)
{
LOG
(
(
"
GetH2orH3ActiveConn
(
)
shutting
down
connection
in
fast
"
"
open
state
(
%
p
)
because
we
have
an
experienced
spdy
"
"
connection
(
%
p
)
.
\
n
"
mHalfOpenFastOpenBackups
[
index
]
.
get
(
)
experienced
)
)
;
RefPtr
<
HalfOpenSocket
>
half
=
mHalfOpenFastOpenBackups
[
index
]
;
half
-
>
CancelFastOpenConnection
(
)
;
}
LOG
(
(
"
GetH2orH3ActiveConn
(
)
request
for
ent
%
p
%
s
"
"
found
an
active
experienced
connection
%
p
in
native
connection
"
"
entry
\
n
"
this
mConnInfo
-
>
HashKey
(
)
.
get
(
)
experienced
)
)
;
return
experienced
;
}
if
(
noExperience
)
{
LOG
(
(
"
GetH2orH3ActiveConn
(
)
request
for
ent
%
p
%
s
"
"
found
an
active
but
inexperienced
connection
%
p
in
native
connection
"
"
entry
\
n
"
this
mConnInfo
-
>
HashKey
(
)
.
get
(
)
noExperience
)
)
;
return
noExperience
;
}
return
nullptr
;
}
void
ConnectionEntry
:
:
CloseActiveConnections
(
)
{
while
(
mActiveConns
.
Length
(
)
)
{
RefPtr
<
HttpConnectionBase
>
conn
(
mActiveConns
[
0
]
)
;
mActiveConns
.
RemoveElementAt
(
0
)
;
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecrementActiveConnCount
(
conn
)
;
conn
-
>
CloseTransaction
(
conn
-
>
Transaction
(
)
NS_ERROR_ABORT
true
)
;
}
}
void
ConnectionEntry
:
:
CloseAllActiveConnsWithNullTransactcion
(
nsresult
aCloseCode
)
{
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
RefPtr
<
HttpConnectionBase
>
activeConn
=
mActiveConns
[
index
]
;
nsAHttpTransaction
*
liveTransaction
=
activeConn
-
>
Transaction
(
)
;
if
(
liveTransaction
&
&
liveTransaction
-
>
IsNullTransaction
(
)
)
{
LOG
(
(
"
ConnectionEntry
:
:
CloseAllActiveConnsWithNullTransactcion
"
"
also
canceling
Null
Transaction
%
p
on
conn
%
p
\
n
"
liveTransaction
activeConn
.
get
(
)
)
)
;
activeConn
-
>
CloseTransaction
(
liveTransaction
aCloseCode
)
;
}
}
}
void
ConnectionEntry
:
:
PruneNoTraffic
(
)
{
LOG
(
(
"
pruning
no
traffic
[
ci
=
%
s
]
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
)
)
;
if
(
mConnInfo
-
>
IsHttp3
(
)
)
{
return
;
}
uint32_t
numConns
=
mActiveConns
.
Length
(
)
;
if
(
numConns
)
{
for
(
int
index
=
numConns
-
1
;
index
>
=
0
;
index
-
-
)
{
RefPtr
<
nsHttpConnection
>
conn
=
do_QueryObject
(
mActiveConns
[
index
]
)
;
if
(
conn
&
&
conn
-
>
NoTraffic
(
)
)
{
mActiveConns
.
RemoveElementAt
(
index
)
;
gHttpHandler
-
>
ConnMgr
(
)
-
>
DecrementActiveConnCount
(
conn
)
;
conn
-
>
Close
(
NS_ERROR_ABORT
)
;
LOG
(
(
"
closed
active
connection
due
to
no
traffic
"
"
[
conn
=
%
p
]
\
n
"
conn
.
get
(
)
)
)
;
}
}
}
}
uint32_t
ConnectionEntry
:
:
TimeoutTick
(
)
{
uint32_t
timeoutTickNext
=
3600
;
if
(
mConnInfo
-
>
IsHttp3
(
)
)
{
return
timeoutTickNext
;
}
LOG
(
(
"
ConnectionEntry
:
:
TimeoutTick
(
)
this
=
%
p
host
=
%
s
"
"
idle
=
%
zu
active
=
%
zu
"
"
half
-
len
=
%
zu
pending
=
%
zu
"
"
urgentStart
pending
=
%
zu
\
n
"
this
mConnInfo
-
>
Origin
(
)
IdleConnectionsLength
(
)
ActiveConnsLength
(
)
mHalfOpens
.
Length
(
)
PendingQueueLength
(
)
UrgentStartQueueLength
(
)
)
)
;
PRIntervalTime
tickTime
=
PR_IntervalNow
(
)
;
for
(
uint32_t
index
=
0
;
index
<
mActiveConns
.
Length
(
)
;
+
+
index
)
{
RefPtr
<
nsHttpConnection
>
conn
=
do_QueryObject
(
mActiveConns
[
index
]
)
;
if
(
conn
)
{
uint32_t
connNextTimeout
=
conn
-
>
ReadTimeoutTick
(
tickTime
)
;
timeoutTickNext
=
std
:
:
min
(
timeoutTickNext
connNextTimeout
)
;
}
}
if
(
mHalfOpens
.
Length
(
)
)
{
TimeStamp
currentTime
=
TimeStamp
:
:
Now
(
)
;
double
maxConnectTime_ms
=
gHttpHandler
-
>
ConnectTimeout
(
)
;
for
(
uint32_t
index
=
mHalfOpens
.
Length
(
)
;
index
>
0
;
)
{
index
-
-
;
HalfOpenSocket
*
half
=
mHalfOpens
[
index
]
;
double
delta
=
half
-
>
Duration
(
currentTime
)
;
if
(
delta
>
maxConnectTime_ms
)
{
LOG
(
(
"
Force
timeout
of
half
open
to
%
s
after
%
.
2fms
.
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
delta
)
)
;
if
(
half
-
>
SocketTransport
(
)
)
{
half
-
>
SocketTransport
(
)
-
>
Close
(
NS_ERROR_NET_TIMEOUT
)
;
}
if
(
half
-
>
BackupTransport
(
)
)
{
half
-
>
BackupTransport
(
)
-
>
Close
(
NS_ERROR_NET_TIMEOUT
)
;
}
}
if
(
delta
>
maxConnectTime_ms
+
5000
)
{
LOG
(
(
"
Abandon
half
open
to
%
s
after
%
.
2fms
.
\
n
"
mConnInfo
-
>
HashKey
(
)
.
get
(
)
delta
)
)
;
half
-
>
Abandon
(
)
;
}
}
}
if
(
mHalfOpens
.
Length
(
)
)
{
timeoutTickNext
=
1
;
}
return
timeoutTickNext
;
}
HttpRetParams
ConnectionEntry
:
:
GetConnectionData
(
)
{
HttpRetParams
data
;
data
.
host
=
mConnInfo
-
>
Origin
(
)
;
data
.
port
=
mConnInfo
-
>
OriginPort
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mActiveConns
.
Length
(
)
;
i
+
+
)
{
HttpConnInfo
info
;
RefPtr
<
nsHttpConnection
>
connTCP
=
do_QueryObject
(
mActiveConns
[
i
]
)
;
if
(
connTCP
)
{
info
.
ttl
=
connTCP
-
>
TimeToLive
(
)
;
}
else
{
info
.
ttl
=
0
;
}
info
.
rtt
=
mActiveConns
[
i
]
-
>
Rtt
(
)
;
info
.
SetHTTPProtocolVersion
(
mActiveConns
[
i
]
-
>
Version
(
)
)
;
data
.
active
.
AppendElement
(
info
)
;
}
for
(
uint32_t
i
=
0
;
i
<
mIdleConns
.
Length
(
)
;
i
+
+
)
{
HttpConnInfo
info
;
info
.
ttl
=
mIdleConns
[
i
]
-
>
TimeToLive
(
)
;
info
.
rtt
=
mIdleConns
[
i
]
-
>
Rtt
(
)
;
info
.
SetHTTPProtocolVersion
(
mIdleConns
[
i
]
-
>
Version
(
)
)
;
data
.
idle
.
AppendElement
(
info
)
;
}
for
(
uint32_t
i
=
0
;
i
<
mHalfOpens
.
Length
(
)
;
i
+
+
)
{
HalfOpenSockets
hSocket
;
hSocket
.
speculative
=
mHalfOpens
[
i
]
-
>
IsSpeculative
(
)
;
data
.
halfOpens
.
AppendElement
(
hSocket
)
;
}
if
(
mConnInfo
-
>
IsHttp3
(
)
)
{
data
.
httpVersion
=
"
HTTP
/
3
"
_ns
;
}
else
if
(
mUsingSpdy
)
{
data
.
httpVersion
=
"
HTTP
/
2
"
_ns
;
}
else
{
data
.
httpVersion
=
"
HTTP
<
=
1
.
1
"
_ns
;
}
data
.
ssl
=
mConnInfo
-
>
EndToEndSSL
(
)
;
return
data
;
}
void
ConnectionEntry
:
:
LogConnections
(
)
{
if
(
!
mConnInfo
-
>
IsHttp3
(
)
)
{
LOG
(
(
"
active
urgent
conns
[
"
)
)
;
for
(
HttpConnectionBase
*
conn
:
mActiveConns
)
{
RefPtr
<
nsHttpConnection
>
connTCP
=
do_QueryObject
(
conn
)
;
MOZ_ASSERT
(
connTCP
)
;
if
(
connTCP
-
>
IsUrgentStartPreferred
(
)
)
{
LOG
(
(
"
%
p
"
conn
)
)
;
}
}
LOG
(
(
"
]
active
regular
conns
[
"
)
)
;
for
(
HttpConnectionBase
*
conn
:
mActiveConns
)
{
RefPtr
<
nsHttpConnection
>
connTCP
=
do_QueryObject
(
conn
)
;
MOZ_ASSERT
(
connTCP
)
;
if
(
!
connTCP
-
>
IsUrgentStartPreferred
(
)
)
{
LOG
(
(
"
%
p
"
conn
)
)
;
}
}
LOG
(
(
"
]
idle
urgent
conns
[
"
)
)
;
for
(
nsHttpConnection
*
conn
:
mIdleConns
)
{
if
(
conn
-
>
IsUrgentStartPreferred
(
)
)
{
LOG
(
(
"
%
p
"
conn
)
)
;
}
}
LOG
(
(
"
]
idle
regular
conns
[
"
)
)
;
for
(
nsHttpConnection
*
conn
:
mIdleConns
)
{
if
(
!
conn
-
>
IsUrgentStartPreferred
(
)
)
{
LOG
(
(
"
%
p
"
conn
)
)
;
}
}
}
else
{
LOG
(
(
"
active
conns
[
"
)
)
;
for
(
HttpConnectionBase
*
conn
:
mActiveConns
)
{
LOG
(
(
"
%
p
"
conn
)
)
;
}
MOZ_ASSERT
(
mIdleConns
.
Length
(
)
=
=
0
)
;
}
LOG
(
(
"
]
"
)
)
;
}
}
}
