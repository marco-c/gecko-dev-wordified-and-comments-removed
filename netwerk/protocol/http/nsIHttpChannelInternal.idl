#
include
"
nsISupports
.
idl
"
#
include
"
nsILoadInfo
.
idl
"
%
{
C
+
+
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
template
<
class
T
>
class
nsCOMArray
;
namespace
mozilla
{
class
TimeStamp
;
}
%
}
[
ptr
]
native
StringArray
(
nsTArray
<
nsCString
>
)
;
[
ref
]
native
CStringArrayRef
(
const
nsTArray
<
nsCString
>
)
;
[
ref
]
native
securityMessagesArray
(
nsCOMArray
<
nsISecurityConsoleMessage
>
)
;
native
TimeStamp
(
mozilla
:
:
TimeStamp
)
;
interface
nsIAsyncInputStream
;
interface
nsIAsyncOutputStream
;
interface
nsIPrincipal
;
interface
nsIProxyInfo
;
interface
nsISecurityConsoleMessage
;
interface
nsISocketTransport
;
interface
nsIURI
;
[
scriptable
uuid
(
5b515449
-
ab64
-
4dba
-
b3cd
-
da8fc2f83064
)
]
interface
nsIHttpUpgradeListener
:
nsISupports
{
[
must_use
]
void
onTransportAvailable
(
in
nsISocketTransport
aTransport
in
nsIAsyncInputStream
aSocketIn
in
nsIAsyncOutputStream
aSocketOut
)
;
[
must_use
]
void
onUpgradeFailed
(
in
nsresult
aErrorCode
)
;
}
;
[
builtinclass
scriptable
uuid
(
4e28263d
-
1e03
-
46f4
-
aa5c
-
9512f91957f9
)
]
interface
nsIHttpChannelInternal
:
nsISupports
{
[
must_use
]
attribute
nsIURI
documentURI
;
[
must_use
]
void
getRequestVersion
(
out
unsigned
long
major
out
unsigned
long
minor
)
;
[
must_use
]
void
getResponseVersion
(
out
unsigned
long
major
out
unsigned
long
minor
)
;
[
noscript
must_use
]
void
takeAllSecurityMessages
(
in
securityMessagesArray
aMessages
)
;
[
must_use
]
void
setCookie
(
in
ACString
aCookieHeader
)
;
[
noscript
must_use
]
readonly
attribute
bool
isAuthChannel
;
const
unsigned
long
THIRD_PARTY_FORCE_ALLOW
=
1
<
<
0
;
[
must_use
]
attribute
unsigned
long
thirdPartyFlags
;
[
must_use
]
attribute
boolean
forceAllowThirdPartyCookie
;
[
must_use
]
attribute
boolean
channelIsForDownload
;
[
must_use
]
readonly
attribute
AUTF8String
localAddress
;
[
must_use
]
readonly
attribute
int32_t
localPort
;
[
must_use
]
readonly
attribute
AUTF8String
remoteAddress
;
[
must_use
]
readonly
attribute
int32_t
remotePort
;
[
noscript
must_use
]
void
setCacheKeysRedirectChain
(
in
StringArray
cacheKeys
)
;
[
must_use
]
void
HTTPUpgrade
(
in
ACString
aProtocolName
in
nsIHttpUpgradeListener
aListener
)
;
[
must_use
]
void
setConnectOnly
(
)
;
[
must_use
]
readonly
attribute
boolean
onlyConnect
;
[
must_use
]
attribute
boolean
allowSpdy
;
[
must_use
]
attribute
boolean
allowHttp3
;
[
must_use
]
attribute
boolean
responseTimeoutEnabled
;
[
must_use
]
attribute
unsigned
long
initialRwin
;
[
must_use
]
readonly
attribute
nsIURI
apiRedirectToURI
;
[
must_use
]
attribute
boolean
allowAltSvc
;
[
must_use
]
attribute
boolean
beConservative
;
[
noscript
must_use
]
attribute
boolean
isTRRServiceChannel
;
[
must_use
]
readonly
attribute
boolean
isResolvedByTRR
;
[
must_use
]
attribute
boolean
isOCSP
;
[
must_use
]
attribute
unsigned
long
tlsFlags
;
[
must_use
]
readonly
attribute
PRTime
lastModifiedTime
;
[
must_use
]
attribute
boolean
corsIncludeCredentials
;
const
unsigned
long
CORS_MODE_SAME_ORIGIN
=
0
;
const
unsigned
long
CORS_MODE_NO_CORS
=
1
;
const
unsigned
long
CORS_MODE_CORS
=
2
;
const
unsigned
long
CORS_MODE_NAVIGATE
=
3
;
[
must_use
]
attribute
unsigned
long
corsMode
;
const
unsigned
long
REDIRECT_MODE_FOLLOW
=
0
;
const
unsigned
long
REDIRECT_MODE_ERROR
=
1
;
const
unsigned
long
REDIRECT_MODE_MANUAL
=
2
;
[
must_use
]
attribute
unsigned
long
redirectMode
;
const
unsigned
long
FETCH_CACHE_MODE_DEFAULT
=
0
;
const
unsigned
long
FETCH_CACHE_MODE_NO_STORE
=
1
;
const
unsigned
long
FETCH_CACHE_MODE_RELOAD
=
2
;
const
unsigned
long
FETCH_CACHE_MODE_NO_CACHE
=
3
;
const
unsigned
long
FETCH_CACHE_MODE_FORCE_CACHE
=
4
;
const
unsigned
long
FETCH_CACHE_MODE_ONLY_IF_CACHED
=
5
;
[
must_use
]
attribute
unsigned
long
fetchCacheMode
;
[
must_use
]
readonly
attribute
nsIURI
topWindowURI
;
[
must_use
]
void
setTopWindowURIIfUnknown
(
in
nsIURI
topWindowURI
)
;
[
must_use
]
readonly
attribute
nsIURI
proxyURI
;
[
noscript
notxpcom
nostdcall
]
void
setCorsPreflightParameters
(
in
CStringArrayRef
unsafeHeaders
in
boolean
shouldStripRequestBodyHeader
)
;
[
noscript
notxpcom
nostdcall
]
void
setAltDataForChild
(
in
boolean
aIsForChild
)
;
[
noscript
notxpcom
nostdcall
]
void
disableAltDataCache
(
)
;
[
infallible
]
attribute
boolean
blockAuthPrompt
;
[
must_use
]
attribute
AString
integrityMetadata
;
[
must_use
]
readonly
attribute
ACString
connectionInfoHashKey
;
[
noscript
infallible
]
attribute
unsigned
long
lastRedirectFlags
;
[
noscript
]
attribute
TimeStamp
navigationStartTimeStamp
;
[
noscript
]
void
cancelByURLClassifier
(
in
nsresult
aErrorCode
)
;
[
noscript
notxpcom
nostdcall
]
void
setIPv4Disabled
(
)
;
[
noscript
notxpcom
nostdcall
]
void
setIPv6Disabled
(
)
;
readonly
attribute
nsILoadInfo_CrossOriginOpenerPolicy
crossOriginOpenerPolicy
;
[
noscript
]
nsILoadInfo_CrossOriginOpenerPolicy
computeCrossOriginOpenerPolicy
(
in
nsILoadInfo_CrossOriginOpenerPolicy
aInitiatorPolicy
)
;
[
noscript
]
bool
hasCrossOriginOpenerPolicyMismatch
(
)
;
[
noscript
]
nsILoadInfo_CrossOriginEmbedderPolicy
getResponseEmbedderPolicy
(
)
;
[
noscript
notxpcom
nostdcall
]
void
DoDiagnosticAssertWhenOnStopNotCalledOnDestroy
(
)
;
[
must_use
]
void
setWaitForHTTPSSVCRecord
(
)
;
[
must_use
]
readonly
attribute
boolean
supportsHTTP3
;
[
must_use
]
readonly
attribute
boolean
hasHTTPSRR
;
}
;
