#
ifndef
ConnectionEntry_h__
#
define
ConnectionEntry_h__
#
include
"
PendingTransactionInfo
.
h
"
#
include
"
PendingTransactionQueue
.
h
"
#
include
"
HalfOpenSocket
.
h
"
#
include
"
DashboardTypes
.
h
"
namespace
mozilla
{
namespace
net
{
class
ConnectionEntry
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ConnectionEntry
)
explicit
ConnectionEntry
(
nsHttpConnectionInfo
*
ci
)
;
void
ReschedTransaction
(
nsHttpTransaction
*
aTrans
)
;
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
*
GetTransactionPendingQHelper
(
nsAHttpTransaction
*
trans
)
;
void
InsertTransactionSorted
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
PendingTransactionInfo
*
pendingTransInfo
bool
aInsertAsFirstForTheSamePriority
=
false
)
;
void
InsertTransaction
(
PendingTransactionInfo
*
aPendingTransInfo
bool
aInsertAsFirstForTheSamePriority
=
false
)
;
size_t
UrgentStartQueueLength
(
)
;
void
PrintPendingQ
(
)
;
void
Compact
(
)
;
void
CancelAllTransactions
(
nsresult
reason
)
;
nsresult
CloseIdleConnection
(
nsHttpConnection
*
conn
)
;
void
CloseIdleConnections
(
)
;
void
CloseIdleConnections
(
uint32_t
maxToClose
)
;
nsresult
RemoveIdleConnection
(
nsHttpConnection
*
conn
)
;
bool
IsInIdleConnections
(
HttpConnectionBase
*
conn
)
;
size_t
IdleConnectionsLength
(
)
const
{
return
mIdleConns
.
Length
(
)
;
}
void
InsertIntoIdleConnections
(
nsHttpConnection
*
conn
)
;
already_AddRefed
<
nsHttpConnection
>
GetIdleConnection
(
bool
respectUrgency
bool
urgentTrans
bool
*
onlyUrgent
)
;
size_t
ActiveConnsLength
(
)
const
{
return
mActiveConns
.
Length
(
)
;
}
void
InsertIntoActiveConns
(
HttpConnectionBase
*
conn
)
;
bool
IsInActiveConns
(
HttpConnectionBase
*
conn
)
;
nsresult
RemoveActiveConnection
(
HttpConnectionBase
*
conn
)
;
void
MakeAllDontReuseExcept
(
HttpConnectionBase
*
conn
)
;
bool
FindConnToClaim
(
PendingTransactionInfo
*
pendingTransInfo
)
;
void
CloseActiveConnections
(
)
;
void
CloseAllActiveConnsWithNullTransactcion
(
nsresult
aCloseCode
)
;
HttpConnectionBase
*
GetH2orH3ActiveConn
(
)
;
bool
MakeFirstActiveSpdyConnDontReuse
(
)
;
void
ClosePersistentConnections
(
)
;
uint32_t
PruneDeadConnections
(
)
;
void
VerifyTraffic
(
)
;
void
PruneNoTraffic
(
)
;
uint32_t
TimeoutTick
(
)
;
void
MoveConnection
(
HttpConnectionBase
*
proxyConn
ConnectionEntry
*
otherEnt
)
;
size_t
HalfOpensLength
(
)
const
{
return
mHalfOpens
.
Length
(
)
;
}
void
InsertIntoHalfOpens
(
HalfOpenSocket
*
sock
)
;
void
CloseAllHalfOpens
(
)
;
bool
IsInHalfOpens
(
HalfOpenSocket
*
sock
)
;
HttpRetParams
GetConnectionData
(
)
;
void
LogConnections
(
)
;
RefPtr
<
nsHttpConnectionInfo
>
mConnInfo
;
bool
AvailableForDispatchNow
(
)
;
uint32_t
UnconnectedHalfOpens
(
)
const
;
bool
RemoveHalfOpen
(
HalfOpenSocket
*
)
;
nsTArray
<
nsCString
>
mCoalescingKeys
;
bool
mUsingSpdy
:
1
;
bool
mCanUseSpdy
:
1
;
bool
mPreferIPv4
:
1
;
bool
mPreferIPv6
:
1
;
bool
mUsedForConnection
:
1
;
bool
mUseFastOpen
:
1
;
bool
mDoNotDestroy
:
1
;
bool
IsHttp3
(
)
const
{
return
mConnInfo
-
>
IsHttp3
(
)
;
}
bool
AllowHttp2
(
)
const
{
return
mCanUseSpdy
;
}
void
DisallowHttp2
(
)
;
void
DontReuseHttp3Conn
(
)
;
void
RecordIPFamilyPreference
(
uint16_t
family
)
;
void
ResetIPFamilyPreference
(
)
;
bool
PreferenceKnown
(
)
const
;
size_t
PendingQueueLength
(
)
const
;
size_t
PendingQueueLengthForWindow
(
uint64_t
windowId
)
const
;
void
AppendPendingUrgentStartQ
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
)
;
void
AppendPendingQForFocusedWindow
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
=
0
)
;
void
AppendPendingQForNonFocusedWindows
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
=
0
)
;
void
RemoveEmptyPendingQ
(
)
;
void
PrintDiagnostics
(
nsCString
&
log
uint32_t
aMaxPersistConns
)
;
bool
RestrictConnections
(
)
;
uint32_t
TotalActiveConnections
(
)
const
;
bool
RemoveTransFromPendingQ
(
nsHttpTransaction
*
aTrans
)
;
void
MaybeUpdateEchConfig
(
nsHttpConnectionInfo
*
aConnInfo
)
;
private
:
void
InsertIntoIdleConnections_internal
(
nsHttpConnection
*
conn
)
;
void
RemoveFromIdleConnectionsIndex
(
size_t
inx
)
;
bool
RemoveFromIdleConnections
(
nsHttpConnection
*
conn
)
;
nsTArray
<
RefPtr
<
nsHttpConnection
>
>
mIdleConns
;
nsTArray
<
RefPtr
<
HttpConnectionBase
>
>
mActiveConns
;
nsTArray
<
HalfOpenSocket
*
>
mHalfOpens
;
PendingTransactionQueue
mPendingQ
;
~
ConnectionEntry
(
)
;
}
;
}
}
#
endif
