#
ifndef
nsHttpRequestHead_h__
#
define
nsHttpRequestHead_h__
#
include
"
nsHttp
.
h
"
#
include
"
nsHttpHeaderArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
class
nsIHttpHeaderVisitor
;
namespace
mozilla
{
namespace
net
{
class
nsHttpRequestHead
{
public
:
nsHttpRequestHead
(
)
;
~
nsHttpRequestHead
(
)
;
const
nsHttpHeaderArray
&
Headers
(
)
const
;
void
Enter
(
)
{
mReentrantMonitor
.
Enter
(
)
;
}
void
Exit
(
)
{
mReentrantMonitor
.
Exit
(
)
;
}
void
SetHeaders
(
const
nsHttpHeaderArray
&
aHeaders
)
;
void
SetMethod
(
const
nsACString
&
method
)
;
void
SetVersion
(
nsHttpVersion
version
)
;
void
SetRequestURI
(
const
nsCSubstring
&
s
)
;
void
SetPath
(
const
nsCSubstring
&
s
)
;
uint32_t
HeaderCount
(
)
;
MOZ_MUST_USE
nsresult
VisitHeaders
(
nsIHttpHeaderVisitor
*
visitor
nsHttpHeaderArray
:
:
VisitorFilter
filter
=
nsHttpHeaderArray
:
:
eFilterAll
)
;
void
Method
(
nsACString
&
aMethod
)
;
nsHttpVersion
Version
(
)
;
void
RequestURI
(
nsACString
&
RequestURI
)
;
void
Path
(
nsACString
&
aPath
)
;
void
SetHTTPS
(
bool
val
)
;
bool
IsHTTPS
(
)
;
void
SetOrigin
(
const
nsACString
&
scheme
const
nsACString
&
host
int32_t
port
)
;
void
Origin
(
nsACString
&
aOrigin
)
;
MOZ_MUST_USE
nsresult
SetHeader
(
nsHttpAtom
h
const
nsACString
&
v
bool
m
=
false
)
;
MOZ_MUST_USE
nsresult
SetHeader
(
nsHttpAtom
h
const
nsACString
&
v
bool
m
nsHttpHeaderArray
:
:
HeaderVariety
variety
)
;
MOZ_MUST_USE
nsresult
SetEmptyHeader
(
nsHttpAtom
h
)
;
MOZ_MUST_USE
nsresult
GetHeader
(
nsHttpAtom
h
nsACString
&
v
)
;
MOZ_MUST_USE
nsresult
ClearHeader
(
nsHttpAtom
h
)
;
void
ClearHeaders
(
)
;
bool
HasHeaderValue
(
nsHttpAtom
h
const
char
*
v
)
;
bool
HasHeader
(
nsHttpAtom
h
)
;
void
Flatten
(
nsACString
&
bool
pruneProxyHeaders
=
false
)
;
MOZ_MUST_USE
nsresult
SetHeaderOnce
(
nsHttpAtom
h
const
char
*
v
bool
merge
=
false
)
;
bool
IsSafeMethod
(
)
;
enum
ParsedMethodType
{
kMethod_Custom
kMethod_Get
kMethod_Post
kMethod_Options
kMethod_Connect
kMethod_Head
kMethod_Put
kMethod_Trace
}
;
ParsedMethodType
ParsedMethod
(
)
;
bool
EqualsMethod
(
ParsedMethodType
aType
)
;
bool
IsGet
(
)
{
return
EqualsMethod
(
kMethod_Get
)
;
}
bool
IsPost
(
)
{
return
EqualsMethod
(
kMethod_Post
)
;
}
bool
IsOptions
(
)
{
return
EqualsMethod
(
kMethod_Options
)
;
}
bool
IsConnect
(
)
{
return
EqualsMethod
(
kMethod_Connect
)
;
}
bool
IsHead
(
)
{
return
EqualsMethod
(
kMethod_Head
)
;
}
bool
IsPut
(
)
{
return
EqualsMethod
(
kMethod_Put
)
;
}
bool
IsTrace
(
)
{
return
EqualsMethod
(
kMethod_Trace
)
;
}
void
ParseHeaderSet
(
const
char
*
buffer
)
;
private
:
nsHttpHeaderArray
mHeaders
;
nsCString
mMethod
;
nsHttpVersion
mVersion
;
nsCString
mRequestURI
;
nsCString
mPath
;
nsCString
mOrigin
;
ParsedMethodType
mParsedMethod
;
bool
mHTTPS
;
ReentrantMonitor
mReentrantMonitor
;
bool
mInVisitHeaders
;
}
;
}
}
#
endif
