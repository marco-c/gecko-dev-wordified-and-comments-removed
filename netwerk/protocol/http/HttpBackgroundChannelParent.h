#
ifndef
mozilla_net_HttpBackgroundChannelParent_h
#
define
mozilla_net_HttpBackgroundChannelParent_h
#
include
"
mozilla
/
net
/
PHttpBackgroundChannelParent
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsISerialEventTarget
;
namespace
mozilla
{
namespace
net
{
class
HttpChannelParent
;
class
HttpBackgroundChannelParent
final
:
public
PHttpBackgroundChannelParent
{
public
:
explicit
HttpBackgroundChannelParent
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
HttpBackgroundChannelParent
final
)
nsresult
Init
(
const
uint64_t
&
aChannelId
)
;
void
LinkToChannel
(
HttpChannelParent
*
aChannelParent
)
;
void
OnChannelClosed
(
)
;
bool
OnStartRequest
(
const
nsHttpResponseHead
&
aResponseHead
const
bool
&
aUseResponseHead
const
nsHttpHeaderArray
&
aRequestHeaders
const
HttpChannelOnStartRequestArgs
&
aArgs
const
nsCOMPtr
<
nsICacheEntry
>
&
aCacheEntry
)
;
bool
OnTransportAndData
(
const
nsresult
&
aChannelStatus
const
nsresult
&
aTransportStatus
const
uint64_t
&
aOffset
const
uint32_t
&
aCount
const
nsCString
&
aData
)
;
bool
OnStopRequest
(
const
nsresult
&
aChannelStatus
const
ResourceTimingStructArgs
&
aTiming
const
nsHttpHeaderArray
&
aResponseTrailers
const
nsTArray
<
ConsoleReportCollected
>
&
aConsoleReports
)
;
bool
OnConsoleReport
(
const
nsTArray
<
ConsoleReportCollected
>
&
aConsoleReports
)
;
bool
OnAfterLastPart
(
const
nsresult
aStatus
)
;
bool
OnProgress
(
const
int64_t
aProgress
const
int64_t
aProgressMax
)
;
bool
OnStatus
(
const
nsresult
aStatus
)
;
bool
OnDiversion
(
)
;
bool
OnNotifyClassificationFlags
(
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
;
bool
OnNotifyFlashPluginStateChanged
(
nsIHttpChannel
:
:
FlashPluginState
aState
)
;
bool
OnSetClassifierMatchedInfo
(
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
;
bool
OnSetClassifierMatchedTrackingInfo
(
const
nsACString
&
aLists
const
nsACString
&
aFullHashes
)
;
nsISerialEventTarget
*
GetBackgroundTarget
(
)
;
using
ChildEndpointPromise
=
MozPromise
<
ipc
:
:
Endpoint
<
extensions
:
:
PStreamFilterChild
>
bool
true
>
;
[
[
nodiscard
]
]
RefPtr
<
ChildEndpointPromise
>
AttachStreamFilter
(
Endpoint
<
extensions
:
:
PStreamFilterParent
>
&
&
aParentEndpoint
Endpoint
<
extensions
:
:
PStreamFilterChild
>
&
&
aChildEndpoint
)
;
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
virtual
~
HttpBackgroundChannelParent
(
)
;
Atomic
<
bool
>
mIPCOpened
;
Mutex
mBgThreadMutex
;
nsCOMPtr
<
nsISerialEventTarget
>
mBackgroundThread
;
RefPtr
<
HttpChannelParent
>
mChannelParent
;
}
;
}
}
#
endif
