#
ifndef
mozilla_net_HttpBackgroundChannelParent_h
#
define
mozilla_net_HttpBackgroundChannelParent_h
#
include
"
mozilla
/
net
/
PHttpBackgroundChannelParent
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsIEventTarget
;
namespace
mozilla
{
namespace
net
{
class
HttpChannelParent
;
class
HttpBackgroundChannelParent
final
:
public
PHttpBackgroundChannelParent
{
public
:
explicit
HttpBackgroundChannelParent
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
HttpBackgroundChannelParent
final
)
nsresult
Init
(
const
uint64_t
&
aChannelId
)
;
void
LinkToChannel
(
HttpChannelParent
*
aChannelParent
)
;
void
OnChannelClosed
(
)
;
bool
OnStartRequestSent
(
)
;
bool
OnTransportAndData
(
const
nsresult
&
aChannelStatus
const
nsresult
&
aTransportStatus
const
uint64_t
&
aOffset
const
uint32_t
&
aCount
const
nsCString
&
aData
)
;
bool
OnStopRequest
(
const
nsresult
&
aChannelStatus
const
ResourceTimingStruct
&
aTiming
const
nsHttpHeaderArray
&
aResponseTrailers
)
;
bool
OnDiversion
(
)
;
bool
OnNotifyChannelClassifierProtectionDisabled
(
uint32_t
aAcceptedReason
)
;
bool
OnNotifyCookieAllowed
(
)
;
bool
OnNotifyCookieBlocked
(
uint32_t
aRejectedReason
)
;
bool
OnNotifyClassificationFlags
(
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
;
bool
OnNotifyFlashPluginStateChanged
(
nsIHttpChannel
:
:
FlashPluginState
aState
)
;
bool
OnSetClassifierMatchedInfo
(
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
;
bool
OnSetClassifierMatchedTrackingInfo
(
const
nsACString
&
aLists
const
nsACString
&
aFullHashes
)
;
protected
:
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
virtual
~
HttpBackgroundChannelParent
(
)
;
Atomic
<
bool
>
mIPCOpened
;
Mutex
mBgThreadMutex
;
nsCOMPtr
<
nsIEventTarget
>
mBackgroundThread
;
RefPtr
<
HttpChannelParent
>
mChannelParent
;
}
;
}
}
#
endif
