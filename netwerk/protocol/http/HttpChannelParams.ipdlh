include
IPCServiceWorkerDescriptor
;
include
NeckoChannelParams
;
include
IPCStream
;
include
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
include
"
mozilla
/
ipc
/
TransportSecurityInfoUtils
.
h
"
;
include
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
;
using
class
mozilla
:
:
net
:
:
nsHttpHeaderArray
from
"
nsHttpHeaderArray
.
h
"
;
using
mozilla
:
:
net
:
:
NetAddr
from
"
mozilla
/
net
/
DNS
.
h
"
;
using
nsILoadInfo
:
:
CrossOriginOpenerPolicy
from
"
nsILoadInfo
.
h
"
;
[
RefCounted
]
using
class
nsIReferrerInfo
from
"
nsIReferrerInfo
.
h
"
;
[
RefCounted
]
using
class
nsITransportSecurityInfo
from
"
nsITransportSecurityInfo
.
h
"
;
namespace
mozilla
{
namespace
net
{
struct
HttpChannelOnStartRequestArgs
{
nsresult
channelStatus
;
ParentLoadInfoForwarderArgs
loadInfoForwarder
;
bool
isFromCache
;
bool
isRacing
;
bool
cacheEntryAvailable
;
uint64_t
cacheEntryId
;
uint32_t
cacheFetchCount
;
uint32_t
cacheExpirationTime
;
nsITransportSecurityInfo
securityInfo
;
NetAddr
selfAddr
;
NetAddr
peerAddr
;
uint8_t
redirectCount
;
uint32_t
cacheKey
;
nsCString
altDataType
;
int64_t
altDataLength
;
bool
deliveringAltData
;
bool
applyConversion
;
bool
isResolvedByTRR
;
ResourceTimingStructArgs
timing
;
bool
allRedirectsSameOrigin
;
uint32_t
?
multiPartID
;
bool
isFirstPartOfMultiPart
;
bool
isLastPartOfMultiPart
;
CrossOriginOpenerPolicy
openerPolicy
;
nsIReferrerInfo
overrideReferrerInfo
;
bool
shouldWaitForOnStartRequestSent
;
nsCString
cookie
;
bool
dataFromSocketProcess
;
bool
hasHTTPSRR
;
bool
isProxyUsed
;
}
;
struct
HttpChannelAltDataStream
{
IPCStream
?
altDataInputStream
;
}
;
}
}
