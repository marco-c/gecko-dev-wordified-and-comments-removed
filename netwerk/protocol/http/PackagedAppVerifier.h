#
ifndef
mozilla_net_PackagedAppVerifier_h
#
define
mozilla_net_PackagedAppVerifier_h
#
include
"
nsICacheEntry
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsICryptoHash
.
h
"
#
include
"
nsIPackagedAppVerifier
.
h
"
namespace
mozilla
{
namespace
net
{
class
PackagedAppVerifier
final
:
public
nsIPackagedAppVerifier
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIPACKAGEDAPPVERIFIER
public
:
enum
EState
{
STATE_UNKNOWN
STATE_MANIFEST_VERIFIED_OK
STATE_MANIFEST_VERIFIED_FAILED
STATE_RESOURCE_VERIFIED_FAILED
}
;
class
ResourceCacheInfo
:
public
nsISupports
{
public
:
NS_DECL_ISUPPORTS
ResourceCacheInfo
(
nsIURI
*
aURI
nsICacheEntry
*
aCacheEntry
nsresult
aStatusCode
bool
aIsLastPart
)
:
mURI
(
aURI
)
mCacheEntry
(
aCacheEntry
)
mStatusCode
(
aStatusCode
)
mIsLastPart
(
aIsLastPart
)
{
}
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsICacheEntry
>
mCacheEntry
;
nsresult
mStatusCode
;
bool
mIsLastPart
;
private
:
virtual
~
ResourceCacheInfo
(
)
{
}
}
;
public
:
PackagedAppVerifier
(
)
;
PackagedAppVerifier
(
nsIPackagedAppVerifierListener
*
aListener
const
nsACString
&
aPackageOrigin
const
nsACString
&
aSignature
nsICacheEntry
*
aPackageCacheEntry
)
;
static
const
char
*
kSignedPakOriginMetadataKey
;
private
:
virtual
~
PackagedAppVerifier
(
)
{
}
void
ProcessResourceCache
(
const
ResourceCacheInfo
*
aInfo
)
;
void
VerifyManifest
(
const
ResourceCacheInfo
*
aInfo
)
;
void
VerifyResource
(
const
ResourceCacheInfo
*
aInfo
)
;
void
OnManifestVerified
(
const
ResourceCacheInfo
*
aInfo
bool
aSuccess
)
;
void
OnResourceVerified
(
const
ResourceCacheInfo
*
aInfo
bool
aSuccess
)
;
nsCOMPtr
<
nsIPackagedAppVerifierListener
>
mListener
;
EState
mState
;
nsCString
mPackageOrigin
;
nsCString
mSignature
;
bool
mIsPackageSigned
;
nsCOMPtr
<
nsICacheEntry
>
mPackageCacheEntry
;
nsCString
mHashingResourceURI
;
nsCOMPtr
<
nsICryptoHash
>
mHasher
;
nsCString
mLastComputedResourceHash
;
}
;
}
}
#
endif
