#
include
"
HttpLog
.
h
"
#
include
"
nsHttpHandler
.
h
"
#
include
"
nsHttpAuthManager
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIPrincipal
.
h
"
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS
(
nsHttpAuthManager
nsIHttpAuthManager
)
nsresult
nsHttpAuthManager
:
:
Init
(
)
{
if
(
!
gHttpHandler
)
{
nsresult
rv
;
nsCOMPtr
<
nsIIOService
>
ios
=
do_GetIOService
(
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCOMPtr
<
nsIProtocolHandler
>
handler
;
rv
=
ios
-
>
GetProtocolHandler
(
"
http
"
getter_AddRefs
(
handler
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
NS_ENSURE_TRUE
(
gHttpHandler
NS_ERROR_UNEXPECTED
)
;
}
mAuthCache
=
gHttpHandler
-
>
AuthCache
(
false
)
;
mPrivateAuthCache
=
gHttpHandler
-
>
AuthCache
(
true
)
;
NS_ENSURE_TRUE
(
mAuthCache
NS_ERROR_FAILURE
)
;
NS_ENSURE_TRUE
(
mPrivateAuthCache
NS_ERROR_FAILURE
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsHttpAuthManager
:
:
GetAuthIdentity
(
const
nsACString
&
aScheme
const
nsACString
&
aHost
int32_t
aPort
const
nsACString
&
aAuthType
const
nsACString
&
aRealm
const
nsACString
&
aPath
nsAString
&
aUserDomain
nsAString
&
aUserName
nsAString
&
aUserPassword
bool
aIsPrivate
nsIPrincipal
*
aPrincipal
)
{
nsHttpAuthCache
*
auth_cache
=
aIsPrivate
?
mPrivateAuthCache
:
mAuthCache
;
nsHttpAuthEntry
*
entry
=
nullptr
;
nsresult
rv
;
nsAutoCString
originSuffix
;
if
(
aPrincipal
)
{
aPrincipal
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
originSuffix
)
;
}
if
(
!
aPath
.
IsEmpty
(
)
)
{
rv
=
auth_cache
-
>
GetAuthEntryForPath
(
PromiseFlatCString
(
aScheme
)
.
get
(
)
PromiseFlatCString
(
aHost
)
.
get
(
)
aPort
PromiseFlatCString
(
aPath
)
.
get
(
)
originSuffix
&
entry
)
;
}
else
{
rv
=
auth_cache
-
>
GetAuthEntryForDomain
(
PromiseFlatCString
(
aScheme
)
.
get
(
)
PromiseFlatCString
(
aHost
)
.
get
(
)
aPort
PromiseFlatCString
(
aRealm
)
.
get
(
)
originSuffix
&
entry
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
!
entry
)
return
NS_ERROR_UNEXPECTED
;
aUserDomain
.
Assign
(
entry
-
>
Domain
(
)
)
;
aUserName
.
Assign
(
entry
-
>
User
(
)
)
;
aUserPassword
.
Assign
(
entry
-
>
Pass
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsHttpAuthManager
:
:
SetAuthIdentity
(
const
nsACString
&
aScheme
const
nsACString
&
aHost
int32_t
aPort
const
nsACString
&
aAuthType
const
nsACString
&
aRealm
const
nsACString
&
aPath
const
nsAString
&
aUserDomain
const
nsAString
&
aUserName
const
nsAString
&
aUserPassword
bool
aIsPrivate
nsIPrincipal
*
aPrincipal
)
{
nsHttpAuthIdentity
ident
(
aUserDomain
aUserName
aUserPassword
)
;
nsAutoCString
originSuffix
;
if
(
aPrincipal
)
{
aPrincipal
-
>
OriginAttributesRef
(
)
.
CreateSuffix
(
originSuffix
)
;
}
nsHttpAuthCache
*
auth_cache
=
aIsPrivate
?
mPrivateAuthCache
:
mAuthCache
;
return
auth_cache
-
>
SetAuthEntry
(
aScheme
aHost
aPort
aPath
aRealm
"
"
_ns
"
"
_ns
originSuffix
&
ident
nullptr
)
;
}
NS_IMETHODIMP
nsHttpAuthManager
:
:
ClearAll
(
)
{
mAuthCache
-
>
ClearAll
(
)
;
mPrivateAuthCache
-
>
ClearAll
(
)
;
return
NS_OK
;
}
}
}
