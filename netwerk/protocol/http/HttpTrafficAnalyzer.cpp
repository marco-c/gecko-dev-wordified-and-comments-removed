#
include
"
HttpTrafficAnalyzer
.
h
"
#
include
"
HttpLog
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
net
{
#
define
DEFINE_CATEGORY
(
_name
_idx
)
NS_LITERAL_CSTRING
(
"
Y
=
"
#
_idx
"
|
"
#
_name
)
static
const
nsCString
gKeyName
[
]
=
{
#
include
"
HttpTrafficAnalyzer
.
inc
"
}
;
#
undef
DEFINE_CATEGORY
HttpTrafficCategory
HttpTrafficAnalyzer
:
:
CreateTrafficCategory
(
bool
aIsPrivateMode
bool
aIsThirdParty
ClassOfService
aClassOfService
TrackingClassification
aClassification
)
{
uint8_t
category
=
aIsPrivateMode
?
11
:
0
;
if
(
!
aIsThirdParty
)
{
return
static_cast
<
HttpTrafficCategory
>
(
category
)
;
}
switch
(
aClassification
)
{
case
TrackingClassification
:
:
eNone
:
return
static_cast
<
HttpTrafficCategory
>
(
category
+
1
)
;
case
TrackingClassification
:
:
eBasic
:
category
+
=
2
;
break
;
case
TrackingClassification
:
:
eContent
:
category
+
=
5
;
break
;
case
TrackingClassification
:
:
eFingerprinting
:
category
+
=
8
;
break
;
default
:
MOZ_ASSERT
(
false
"
incorrect
classification
"
)
;
return
HttpTrafficCategory
:
:
eInvalid
;
}
switch
(
aClassOfService
)
{
case
ClassOfService
:
:
eLeader
:
return
static_cast
<
HttpTrafficCategory
>
(
category
)
;
case
ClassOfService
:
:
eBackground
:
return
static_cast
<
HttpTrafficCategory
>
(
category
+
1
)
;
case
ClassOfService
:
:
eOther
:
return
static_cast
<
HttpTrafficCategory
>
(
category
+
2
)
;
}
MOZ_ASSERT
(
false
"
incorrect
class
of
service
"
)
;
return
HttpTrafficCategory
:
:
eInvalid
;
}
nsresult
HttpTrafficAnalyzer
:
:
IncrementHttpTransaction
(
HttpTrafficCategory
aCategory
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
MOZ_ASSERT
(
StaticPrefs
:
:
network_traffic_analyzer_enabled
(
)
)
;
MOZ_ASSERT
(
aCategory
!
=
HttpTrafficCategory
:
:
eInvalid
"
invalid
category
"
)
;
LOG
(
(
"
HttpTrafficAnalyzer
:
:
IncrementHttpTransaction
[
%
s
]
[
this
=
%
p
]
\
n
"
gKeyName
[
aCategory
]
.
get
(
)
this
)
)
;
return
NS_OK
;
}
nsresult
HttpTrafficAnalyzer
:
:
IncrementHttpConnection
(
HttpTrafficCategory
aCategory
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
MOZ_ASSERT
(
StaticPrefs
:
:
network_traffic_analyzer_enabled
(
)
)
;
MOZ_ASSERT
(
aCategory
!
=
HttpTrafficCategory
:
:
eInvalid
"
invalid
category
"
)
;
LOG
(
(
"
HttpTrafficAnalyzer
:
:
IncrementHttpConnection
[
%
s
]
[
this
=
%
p
]
\
n
"
gKeyName
[
aCategory
]
.
get
(
)
this
)
)
;
return
NS_OK
;
}
nsresult
HttpTrafficAnalyzer
:
:
IncrementHttpConnection
(
nsTArray
<
HttpTrafficCategory
>
&
&
aCategories
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
MOZ_ASSERT
(
StaticPrefs
:
:
network_traffic_analyzer_enabled
(
)
)
;
MOZ_ASSERT
(
!
aCategories
.
IsEmpty
(
)
"
empty
category
"
)
;
nsTArray
<
HttpTrafficCategory
>
categories
(
std
:
:
move
(
aCategories
)
)
;
LOG
(
(
"
HttpTrafficAnalyzer
:
:
IncrementHttpConnection
size
=
%
"
PRIuPTR
"
[
this
=
%
p
]
\
n
"
categories
.
Length
(
)
this
)
)
;
HttpTrafficCategory
best
=
categories
[
0
]
;
if
(
(
best
=
=
0
|
|
best
=
=
11
)
&
&
categories
.
Length
(
)
>
1
)
{
best
=
categories
[
1
]
;
}
Unused
<
<
IncrementHttpConnection
(
best
)
;
return
NS_OK
;
}
nsresult
HttpTrafficAnalyzer
:
:
AccumulateHttpTransferredSize
(
HttpTrafficCategory
aCategory
uint64_t
aBytesRead
uint64_t
aBytesSent
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
MOZ_ASSERT
(
StaticPrefs
:
:
network_traffic_analyzer_enabled
(
)
)
;
MOZ_ASSERT
(
aCategory
!
=
HttpTrafficCategory
:
:
eInvalid
"
invalid
category
"
)
;
LOG
(
(
"
HttpTrafficAnalyzer
:
:
AccumulateHttpTransferredSize
[
%
s
]
rb
=
%
"
PRIu64
"
"
"
sb
=
%
"
PRIu64
"
[
this
=
%
p
]
\
n
"
gKeyName
[
aCategory
]
.
get
(
)
aBytesRead
aBytesSent
this
)
)
;
return
NS_OK
;
}
}
}
