#
include
"
nsServerTiming
.
h
"
NS_IMPL_ISUPPORTS
(
nsServerTiming
nsIServerTiming
)
NS_IMETHODIMP
nsServerTiming
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
Assign
(
mName
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsServerTiming
:
:
GetDuration
(
double
*
aDuration
)
{
*
aDuration
=
mDuration
;
return
NS_OK
;
}
NS_IMETHODIMP
nsServerTiming
:
:
GetDescription
(
nsACString
&
aDescription
)
{
aDescription
.
Assign
(
mDescription
)
;
return
NS_OK
;
}
namespace
mozilla
{
namespace
net
{
static
double
ParseDouble
(
const
nsACString
&
aString
)
{
nsresult
rv
;
double
val
=
PromiseFlatCString
(
aString
)
.
ToDouble
(
&
rv
)
;
return
NS_FAILED
(
rv
)
?
0
.
0f
:
val
;
}
void
ServerTimingParser
:
:
Parse
(
)
{
ParsedHeaderValueListList
parsedHeader
(
mValue
false
)
;
for
(
uint32_t
index
=
0
;
index
<
parsedHeader
.
mValues
.
Length
(
)
;
+
+
index
)
{
if
(
parsedHeader
.
mValues
[
index
]
.
mValues
.
IsEmpty
(
)
)
{
continue
;
}
RefPtr
<
nsServerTiming
>
timingHeader
=
new
nsServerTiming
(
)
;
mServerTimingHeaders
.
AppendElement
(
timingHeader
)
;
timingHeader
-
>
SetName
(
parsedHeader
.
mValues
[
index
]
.
mValues
[
0
]
.
mName
)
;
if
(
parsedHeader
.
mValues
[
index
]
.
mValues
.
Length
(
)
=
=
1
)
{
continue
;
}
bool
foundDuration
=
false
;
bool
foundDescription
=
false
;
for
(
uint32_t
pairIndex
=
1
;
pairIndex
<
parsedHeader
.
mValues
[
index
]
.
mValues
.
Length
(
)
;
+
+
pairIndex
)
{
nsDependentCSubstring
&
currentName
=
parsedHeader
.
mValues
[
index
]
.
mValues
[
pairIndex
]
.
mName
;
nsDependentCSubstring
&
currentValue
=
parsedHeader
.
mValues
[
index
]
.
mValues
[
pairIndex
]
.
mValue
;
if
(
currentName
.
LowerCaseEqualsASCII
(
"
dur
"
)
&
&
currentValue
.
BeginReading
(
)
&
&
!
foundDuration
)
{
timingHeader
-
>
SetDuration
(
ParseDouble
(
currentValue
)
)
;
foundDuration
=
true
;
}
else
if
(
currentName
.
LowerCaseEqualsASCII
(
"
desc
"
)
&
&
!
currentValue
.
IsEmpty
(
)
&
&
!
foundDescription
)
{
timingHeader
-
>
SetDescription
(
currentValue
)
;
foundDescription
=
true
;
}
if
(
foundDuration
&
&
foundDescription
)
{
break
;
}
}
}
}
nsTArray
<
nsCOMPtr
<
nsIServerTiming
>
>
&
&
ServerTimingParser
:
:
TakeServerTimingHeaders
(
)
{
return
Move
(
mServerTimingHeaders
)
;
}
}
}
