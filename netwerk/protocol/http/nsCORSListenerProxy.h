#
ifndef
nsCORSListenerProxy_h__
#
define
nsCORSListenerProxy_h__
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
class
nsIURI
;
class
nsIPrincipal
;
class
nsINetworkInterceptController
;
class
nsICorsPreflightCallback
;
namespace
mozilla
{
namespace
net
{
class
HttpChannelParent
;
class
nsHttpChannel
;
}
}
enum
class
DataURIHandling
{
Allow
Disallow
}
;
enum
class
UpdateType
{
Default
InternalOrHSTSRedirect
}
;
class
nsCORSListenerProxy
final
:
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsIChannelEventSink
public
nsIThreadRetargetableStreamListener
{
public
:
nsCORSListenerProxy
(
nsIStreamListener
*
aOuter
nsIPrincipal
*
aRequestingPrincipal
bool
aWithCredentials
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
static
void
Shutdown
(
)
;
MOZ_MUST_USE
nsresult
Init
(
nsIChannel
*
aChannel
DataURIHandling
aAllowDataURI
)
;
void
SetInterceptController
(
nsINetworkInterceptController
*
aInterceptController
)
;
static
void
LogBlockedCORSRequest
(
uint64_t
aInnerWindowID
bool
aPrivateBrowsing
bool
aFromChromeContext
const
nsAString
&
aMessage
const
nsACString
&
aCategory
)
;
private
:
friend
class
mozilla
:
:
net
:
:
HttpChannelParent
;
friend
class
mozilla
:
:
net
:
:
nsHttpChannel
;
static
void
RemoveFromCorsPreflightCache
(
nsIURI
*
aURI
nsIPrincipal
*
aRequestingPrincipal
)
;
static
MOZ_MUST_USE
nsresult
StartCORSPreflight
(
nsIChannel
*
aRequestChannel
nsICorsPreflightCallback
*
aCallback
nsTArray
<
nsCString
>
&
aACUnsafeHeaders
nsIChannel
*
*
aPreflightChannel
)
;
~
nsCORSListenerProxy
(
)
=
default
;
MOZ_MUST_USE
nsresult
UpdateChannel
(
nsIChannel
*
aChannel
DataURIHandling
aAllowDataURI
UpdateType
aUpdateType
)
;
MOZ_MUST_USE
nsresult
CheckRequestApproved
(
nsIRequest
*
aRequest
)
;
MOZ_MUST_USE
nsresult
CheckPreflightNeeded
(
nsIChannel
*
aChannel
UpdateType
aUpdateType
)
;
nsCOMPtr
<
nsIStreamListener
>
mOuterListener
;
nsCOMPtr
<
nsIPrincipal
>
mRequestingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mOriginHeaderPrincipal
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mOuterNotificationCallbacks
;
nsCOMPtr
<
nsINetworkInterceptController
>
mInterceptController
;
bool
mWithCredentials
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mRequestApproved
;
bool
mHasBeenCrossSite
;
nsCOMPtr
<
nsIHttpChannel
>
mHttpChannel
;
#
ifdef
DEBUG
bool
mInited
;
#
endif
mutable
mozilla
:
:
Mutex
mMutex
;
}
;
#
endif
