#
ifndef
HttpConnectionBase_h__
#
define
HttpConnectionBase_h__
#
include
"
nsHttpConnectionInfo
.
h
"
#
include
"
nsHttpResponseHead
.
h
"
#
include
"
nsAHttpTransaction
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
TunnelUtils
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
ARefBase
.
h
"
#
include
"
TimingStruct
.
h
"
#
include
"
HttpTrafficAnalyzer
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsITimer
.
h
"
class
nsISocketTransport
;
class
nsISSLSocketControl
;
namespace
mozilla
{
namespace
net
{
class
nsHttpHandler
;
class
ASpdySession
;
#
define
HTTPCONNECTIONBASE_IID
\
{
\
0x437e7d26
0xa2fd
0x49f2
{
\
0xb3
0x7c
0x84
0x23
0xf0
0x94
0x72
0x36
\
}
\
}
class
HttpConnectionBase
:
public
nsSupportsWeakReference
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
HTTPCONNECTIONBASE_IID
)
HttpConnectionBase
(
)
;
virtual
MOZ_MUST_USE
nsresult
Init
(
nsHttpConnectionInfo
*
info
uint16_t
maxHangTime
nsISocketTransport
*
nsIAsyncInputStream
*
nsIAsyncOutputStream
*
bool
connectedTransport
nsIInterfaceRequestor
*
PRIntervalTime
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
Activate
(
nsAHttpTransaction
*
uint32_t
caps
int32_t
pri
)
=
0
;
virtual
void
Close
(
nsresult
reason
bool
aIsShutdown
=
false
)
=
0
;
virtual
bool
CanReuse
(
)
=
0
;
virtual
bool
CanDirectlyActivate
(
)
=
0
;
virtual
uint32_t
TimeToLive
(
)
;
virtual
void
DontReuse
(
)
=
0
;
virtual
bool
IsUrgentStartPreferred
(
)
const
{
return
false
;
}
virtual
void
SetUrgentStartPreferred
(
bool
urgent
)
{
}
nsISocketTransport
*
Transport
(
)
{
return
mSocketTransport
;
}
nsAHttpTransaction
*
Transaction
(
)
{
return
mTransaction
;
}
nsHttpConnectionInfo
*
ConnectionInfo
(
)
{
return
mConnInfo
;
}
virtual
void
CloseTransaction
(
nsAHttpTransaction
*
nsresult
bool
aIsShutdown
=
false
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
OnHeadersAvailable
(
nsAHttpTransaction
*
nsHttpRequestHead
*
nsHttpResponseHead
*
bool
*
reset
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
TakeTransport
(
nsISocketTransport
*
*
nsIAsyncInputStream
*
*
nsIAsyncOutputStream
*
*
)
=
0
;
virtual
void
SetIsReusedAfter
(
uint32_t
afterMilliseconds
)
{
}
virtual
int64_t
MaxBytesRead
(
)
{
return
0
;
}
virtual
void
BeginIdleMonitoring
(
)
{
}
virtual
void
EndIdleMonitoring
(
)
{
}
virtual
bool
UsingSpdy
(
)
{
return
false
;
}
virtual
bool
EverUsedSpdy
(
)
{
return
false
;
}
virtual
bool
UsingHttp3
(
)
{
return
false
;
}
virtual
bool
ReportedNPN
(
)
{
return
false
;
}
virtual
void
SetTransactionCaps
(
uint32_t
aCaps
)
{
mTransactionCaps
=
aCaps
;
}
virtual
void
PrintDiagnostics
(
nsCString
&
log
)
=
0
;
bool
IsExperienced
(
)
{
return
mExperienced
;
}
virtual
bool
TestJoinConnection
(
const
nsACString
&
hostname
int32_t
port
)
=
0
;
virtual
bool
JoinConnection
(
const
nsACString
&
hostname
int32_t
port
)
=
0
;
virtual
bool
NoClientCertAuth
(
)
const
{
return
true
;
}
virtual
bool
CanAcceptWebsocket
(
)
=
0
;
void
GetConnectionInfo
(
nsHttpConnectionInfo
*
*
ci
)
{
NS_IF_ADDREF
(
*
ci
=
mConnInfo
)
;
}
virtual
void
GetSecurityInfo
(
nsISupports
*
*
result
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
ResumeSend
(
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
ResumeRecv
(
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
ForceSend
(
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
ForceRecv
(
)
=
0
;
virtual
HttpVersion
Version
(
)
=
0
;
virtual
bool
IsProxyConnectInProgress
(
)
=
0
;
virtual
bool
LastTransactionExpectedNoContent
(
)
=
0
;
virtual
void
SetLastTransactionExpectedNoContent
(
bool
)
=
0
;
int64_t
BytesWritten
(
)
{
return
mTotalBytesWritten
;
}
void
SetSecurityCallbacks
(
nsIInterfaceRequestor
*
aCallbacks
)
;
void
SetTrafficCategory
(
HttpTrafficCategory
)
;
void
BootstrapTimings
(
TimingStruct
times
)
;
virtual
bool
IsPersistent
(
)
=
0
;
virtual
bool
IsReused
(
)
=
0
;
virtual
MOZ_MUST_USE
nsresult
PushBack
(
const
char
*
data
uint32_t
length
)
=
0
;
PRIntervalTime
Rtt
(
)
{
return
mRtt
;
}
virtual
void
SetEvent
(
nsresult
aStatus
)
=
0
;
protected
:
nsCOMPtr
<
nsISocketTransport
>
mSocketTransport
;
RefPtr
<
nsAHttpTransaction
>
mTransaction
;
uint32_t
mTransactionCaps
;
RefPtr
<
nsHttpConnectionInfo
>
mConnInfo
;
bool
mExperienced
;
bool
mBootstrappedTimingsSet
;
TimingStruct
mBootstrappedTimings
;
int64_t
mTotalBytesWritten
;
Mutex
mCallbacksLock
;
nsMainThreadPtrHandle
<
nsIInterfaceRequestor
>
mCallbacks
;
nsTArray
<
HttpTrafficCategory
>
mTrafficCategory
;
PRIntervalTime
mRtt
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
HttpConnectionBase
HTTPCONNECTIONBASE_IID
)
#
define
NS_DECL_HTTPCONNECTIONBASE
\
MOZ_MUST_USE
nsresult
Init
(
nsHttpConnectionInfo
*
uint16_t
\
nsISocketTransport
*
nsIAsyncInputStream
*
\
nsIAsyncOutputStream
*
bool
\
nsIInterfaceRequestor
*
PRIntervalTime
)
override
;
\
MOZ_MUST_USE
nsresult
Activate
(
nsAHttpTransaction
*
uint32_t
int32_t
)
\
override
;
\
MOZ_MUST_USE
nsresult
OnHeadersAvailable
(
\
nsAHttpTransaction
*
nsHttpRequestHead
*
nsHttpResponseHead
*
\
bool
*
reset
)
override
;
\
MOZ_MUST_USE
nsresult
TakeTransport
(
\
nsISocketTransport
*
*
nsIAsyncInputStream
*
*
nsIAsyncOutputStream
*
*
)
\
override
;
\
void
Close
(
nsresult
bool
aIsShutdown
=
false
)
override
;
\
bool
CanReuse
(
)
override
;
\
bool
CanDirectlyActivate
(
)
override
;
\
void
DontReuse
(
)
override
;
\
void
CloseTransaction
(
nsAHttpTransaction
*
nsresult
\
bool
aIsShutdown
=
false
)
override
;
\
void
PrintDiagnostics
(
nsCString
&
)
override
;
\
bool
TestJoinConnection
(
const
nsACString
&
int32_t
)
override
;
\
bool
JoinConnection
(
const
nsACString
&
int32_t
)
override
;
\
bool
CanAcceptWebsocket
(
)
override
;
\
void
GetSecurityInfo
(
nsISupports
*
*
result
)
override
;
\
MOZ_MUST_USE
nsresult
ResumeSend
(
)
override
;
\
MOZ_MUST_USE
nsresult
ResumeRecv
(
)
override
;
\
MOZ_MUST_USE
nsresult
ForceSend
(
)
override
;
\
MOZ_MUST_USE
nsresult
ForceRecv
(
)
override
;
\
HttpVersion
Version
(
)
override
;
\
bool
IsProxyConnectInProgress
(
)
override
;
\
bool
LastTransactionExpectedNoContent
(
)
override
;
\
void
SetLastTransactionExpectedNoContent
(
bool
val
)
override
;
\
bool
IsPersistent
(
)
override
;
\
bool
IsReused
(
)
override
;
\
MOZ_MUST_USE
nsresult
PushBack
(
const
char
*
data
uint32_t
length
)
override
;
\
void
SetEvent
(
nsresult
aStatus
)
override
;
}
}
#
endif
