#
include
"
QuicSocketControl
.
h
"
#
include
"
SharedCertVerifier
.
h
"
#
include
"
nsNSSComponent
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
sslt
.
h
"
#
include
"
ssl
.
h
"
namespace
mozilla
{
namespace
net
{
NS_IMPL_ISUPPORTS_INHERITED
(
QuicSocketControl
TransportSecurityInfo
nsISSLSocketControl
QuicSocketControl
)
QuicSocketControl
:
:
QuicSocketControl
(
uint32_t
aProviderFlags
)
:
CommonSocketControl
(
aProviderFlags
)
{
}
void
QuicSocketControl
:
:
SetCertVerificationResult
(
PRErrorCode
errorCode
)
{
if
(
errorCode
)
{
mFailedVerification
=
true
;
SetCanceled
(
errorCode
)
;
}
if
(
OnSocketThread
(
)
)
{
CallAuthenticated
(
)
;
}
else
{
DebugOnly
<
nsresult
>
rv
=
gSocketTransportService
-
>
Dispatch
(
NewRunnableMethod
(
"
QuicSocketControl
:
:
CallAuthenticated
"
this
&
QuicSocketControl
:
:
CallAuthenticated
)
NS_DISPATCH_NORMAL
)
;
}
}
NS_IMETHODIMP
QuicSocketControl
:
:
GetSSLVersionOffered
(
int16_t
*
aSSLVersionOffered
)
{
*
aSSLVersionOffered
=
nsISSLSocketControl
:
:
TLS_VERSION_1_3
;
return
NS_OK
;
}
void
QuicSocketControl
:
:
CallAuthenticated
(
)
{
}
void
QuicSocketControl
:
:
HandshakeCompleted
(
)
{
psm
:
:
RememberCertErrorsTable
:
:
GetInstance
(
)
.
LookupCertErrorBits
(
this
)
;
uint32_t
state
=
nsIWebProgressListener
:
:
STATE_IS_SECURE
;
bool
distrustImminent
;
nsresult
srv
=
IsCertificateDistrustImminent
(
mSucceededCertChain
distrustImminent
)
;
if
(
NS_SUCCEEDED
(
srv
)
&
&
distrustImminent
)
{
state
|
=
nsIWebProgressListener
:
:
STATE_CERT_DISTRUST_IMMINENT
;
}
if
(
mIsDomainMismatch
|
|
mIsUntrusted
|
|
mIsNotValidAtThisTime
)
{
state
|
=
nsIWebProgressListener
:
:
STATE_CERT_USER_OVERRIDDEN
;
}
SetSecurityState
(
state
)
;
mHandshakeCompleted
=
true
;
}
void
QuicSocketControl
:
:
SetNegotiatedNPN
(
const
nsACString
&
aValue
)
{
mNegotiatedNPN
=
aValue
;
mNPNCompleted
=
true
;
}
void
QuicSocketControl
:
:
SetInfo
(
uint16_t
aCipherSuite
uint16_t
aProtocolVersion
uint16_t
aKeaGroup
uint16_t
aSignatureScheme
)
{
SSLCipherSuiteInfo
cipherInfo
;
if
(
SSL_GetCipherSuiteInfo
(
aCipherSuite
&
cipherInfo
sizeof
cipherInfo
)
=
=
SECSuccess
)
{
mHaveCipherSuiteAndProtocol
=
true
;
mCipherSuite
=
aCipherSuite
;
mProtocolVersion
=
aProtocolVersion
&
0xFF
;
mKeaGroup
=
getKeaGroupName
(
aKeaGroup
)
;
mSignatureSchemeName
=
getSignatureName
(
aSignatureScheme
)
;
}
}
}
}
