#
include
"
HttpLog
.
h
"
#
include
"
SocketWrapper
.
h
"
#
include
"
TLSFilterTransaction
.
h
"
namespace
mozilla
{
namespace
net
{
SocketInWrapper
:
:
SocketInWrapper
(
nsIAsyncInputStream
*
aWrapped
TLSFilterTransaction
*
aFilter
)
:
mStream
(
aWrapped
)
mTLSFilter
(
aFilter
)
{
}
nsresult
SocketInWrapper
:
:
OnWriteSegment
(
char
*
segment
uint32_t
count
uint32_t
*
countWritten
)
{
LOG
(
(
"
SocketInWrapper
OnWriteSegment
%
d
%
p
filter
=
%
p
\
n
"
count
this
mTLSFilter
.
get
(
)
)
)
;
nsresult
rv
=
mStream
-
>
Read
(
segment
count
countWritten
)
;
LOG
(
(
"
SocketInWrapper
OnWriteSegment
%
p
wrapped
read
%
"
PRIx32
"
%
d
\
n
"
this
static_cast
<
uint32_t
>
(
rv
)
*
countWritten
)
)
;
return
rv
;
}
NS_IMETHODIMP
SocketInWrapper
:
:
Read
(
char
*
aBuf
uint32_t
aCount
uint32_t
*
_retval
)
{
LOG
(
(
"
SocketInWrapper
Read
%
d
%
p
filter
=
%
p
\
n
"
aCount
this
mTLSFilter
.
get
(
)
)
)
;
if
(
!
mTLSFilter
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
mTLSFilter
-
>
OnWriteSegment
(
aBuf
aCount
_retval
)
;
}
SocketOutWrapper
:
:
SocketOutWrapper
(
nsIAsyncOutputStream
*
aWrapped
TLSFilterTransaction
*
aFilter
)
:
mStream
(
aWrapped
)
mTLSFilter
(
aFilter
)
{
}
nsresult
SocketOutWrapper
:
:
OnReadSegment
(
const
char
*
segment
uint32_t
count
uint32_t
*
countWritten
)
{
return
mStream
-
>
Write
(
segment
count
countWritten
)
;
}
NS_IMETHODIMP
SocketOutWrapper
:
:
Write
(
const
char
*
aBuf
uint32_t
aCount
uint32_t
*
_retval
)
{
LOG
(
(
"
SocketOutWrapper
Write
%
d
%
p
filter
=
%
p
\
n
"
aCount
this
mTLSFilter
.
get
(
)
)
)
;
if
(
!
mTLSFilter
)
{
return
NS_ERROR_UNEXPECTED
;
}
return
mTLSFilter
-
>
OnReadSegment
(
aBuf
aCount
_retval
)
;
}
NS_IMPL_ISUPPORTS
(
SocketInWrapper
nsIAsyncInputStream
)
NS_IMPL_ISUPPORTS
(
SocketOutWrapper
nsIAsyncOutputStream
)
}
}
