include
protocol
PNecko
;
include
protocol
PStreamFilter
;
include
InputStreamParams
;
include
URIParams
;
include
PBackgroundSharedTypes
;
include
NeckoChannelParams
;
include
IPCServiceWorkerDescriptor
;
include
IPCStream
;
include
HttpChannelParams
;
include
PURLClassifierInfo
;
include
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
;
using
refcounted
class
nsIReferrerInfo
from
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
using
nsIHttpChannel
:
:
FlashPluginState
from
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
;
namespace
mozilla
{
namespace
net
{
refcounted
protocol
PHttpChannel
{
manager
PNecko
;
parent
:
async
SetClassOfService
(
uint32_t
cos
)
;
async
SetCacheTokenCachedCharset
(
nsCString
charset
)
;
async
Suspend
(
)
;
async
Resume
(
)
;
async
Cancel
(
nsresult
status
uint32_t
requestBlockingReason
)
;
async
Redirect2Verify
(
nsresult
result
RequestHeaderTuples
changedHeaders
uint32_t
sourceRequestBlockingReason
ChildLoadInfoForwarderArgs
?
targetLoadInfoForwarder
uint32_t
loadFlags
nsIReferrerInfo
referrerInfo
URIParams
?
apiRedirectTo
CorsPreflightArgs
?
corsPreflightArgs
bool
chooseAppcache
)
;
async
DocumentChannelCleanup
(
bool
clearCacheEntry
)
;
async
MarkOfflineCacheEntryAsForeign
(
)
;
async
DivertOnDataAvailable
(
nsCString
data
uint64_t
offset
uint32_t
count
)
;
async
DivertOnStopRequest
(
nsresult
statusCode
)
;
async
DivertComplete
(
)
;
async
RemoveCorsPreflightCacheEntry
(
URIParams
uri
PrincipalInfo
requestingPrincipal
)
;
async
DeletingChannel
(
)
;
async
OpenOriginalCacheInputStream
(
)
;
async
OpenAltDataCacheInputStream
(
nsCString
aType
)
;
async
BytesRead
(
int32_t
count
)
;
async
__delete__
(
)
;
child
:
async
OnStartRequest
(
nsHttpResponseHead
responseHead
bool
useResponseHead
nsHttpHeaderArray
requestHeaders
HttpChannelOnStartRequestArgs
args
)
;
async
OnTransportAndData
(
nsresult
channelStatus
nsresult
transportStatus
uint64_t
offset
uint32_t
count
nsCString
data
)
;
async
OnStopRequest
(
nsresult
channelStatus
ResourceTimingStructArgs
timing
TimeStamp
lastActiveTabOptimization
nsHttpHeaderArray
responseTrailers
ConsoleReportCollected
[
]
consoleReport
)
;
async
FailedAsyncOpen
(
nsresult
status
)
;
async
Redirect1Begin
(
uint32_t
registrarId
URIParams
newOriginalUri
uint32_t
newLoadFlags
uint32_t
redirectFlags
ParentLoadInfoForwarderArgs
loadInfoForwarder
nsHttpResponseHead
responseHead
nsCString
securityInfoSerialization
uint64_t
channelId
NetAddr
oldPeerAddr
ResourceTimingStructArgs
timing
)
;
async
Redirect3Complete
(
)
;
async
AssociateApplicationCache
(
nsCString
groupID
nsCString
clientID
)
;
async
ReportSecurityMessage
(
nsString
messageTag
nsString
messageCategory
)
;
async
DeleteSelf
(
)
;
async
IssueDeprecationWarning
(
uint32_t
warning
bool
asError
)
;
async
LogBlockedCORSRequest
(
nsString
message
nsCString
category
)
;
async
LogMimeTypeMismatch
(
nsCString
messageName
bool
warning
nsString
url
nsString
contentType
)
;
async
AttachStreamFilter
(
Endpoint
<
PStreamFilterParent
>
aEndpoint
)
;
async
CancelDiversion
(
)
;
async
OriginalCacheInputStreamAvailable
(
IPCStream
?
stream
)
;
async
AltDataCacheInputStreamAvailable
(
IPCStream
?
stream
)
;
async
OverrideReferrerInfoDuringBeginConnect
(
nsIReferrerInfo
referrerInfo
)
;
async
OnProgress
(
int64_t
progress
int64_t
progressMax
)
;
async
OnStatus
(
nsresult
status
)
;
async
NotifyClassificationFlags
(
uint32_t
aClassificationFlags
bool
aIsThirdParty
)
;
async
NotifyFlashPluginStateChanged
(
FlashPluginState
aState
)
;
async
SetClassifierMatchedInfo
(
ClassifierInfo
info
)
;
async
SetClassifierMatchedTrackingInfo
(
ClassifierInfo
info
)
;
async
OnAfterLastPart
(
nsresult
aStatus
)
;
both
:
async
FinishInterceptedRedirect
(
)
;
async
SetPriority
(
int16_t
priority
)
;
}
;
}
}
