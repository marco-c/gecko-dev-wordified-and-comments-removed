include
protocol
PNecko
;
include
InputStreamParams
;
include
URIParams
;
include
PBackgroundSharedTypes
;
include
NeckoChannelParams
;
include
IPCServiceWorkerDescriptor
;
include
IPCStream
;
include
HttpChannelParams
;
include
"
mozilla
/
dom
/
ReferrerInfoUtils
.
h
"
;
include
"
mozilla
/
net
/
NeckoMessageUtils
.
h
"
;
using
mozilla
:
:
OriginAttributes
from
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
;
namespace
mozilla
{
namespace
net
{
[
RefCounted
]
protocol
PHttpChannel
{
manager
PNecko
;
parent
:
async
SetClassOfService
(
uint32_t
cos
)
;
async
Suspend
(
)
;
async
Resume
(
)
;
async
Cancel
(
nsresult
status
uint32_t
requestBlockingReason
)
;
async
Redirect2Verify
(
nsresult
result
RequestHeaderTuples
changedHeaders
uint32_t
sourceRequestBlockingReason
ChildLoadInfoForwarderArgs
?
targetLoadInfoForwarder
uint32_t
loadFlags
nsIReferrerInfo
referrerInfo
URIParams
?
apiRedirectTo
CorsPreflightArgs
?
corsPreflightArgs
)
;
async
DocumentChannelCleanup
(
bool
clearCacheEntry
)
;
async
RemoveCorsPreflightCacheEntry
(
URIParams
uri
PrincipalInfo
requestingPrincipal
OriginAttributes
originAttributes
)
;
async
DeletingChannel
(
)
;
async
OpenOriginalCacheInputStream
(
)
;
async
BytesRead
(
int32_t
count
)
;
async
__delete__
(
)
;
child
:
async
FailedAsyncOpen
(
nsresult
status
)
;
async
OnStartRequestSent
(
)
;
async
Redirect1Begin
(
uint32_t
registrarId
URIParams
newOriginalUri
uint32_t
newLoadFlags
uint32_t
redirectFlags
ParentLoadInfoForwarderArgs
loadInfoForwarder
nsHttpResponseHead
responseHead
nsCString
securityInfoSerialization
uint64_t
channelId
NetAddr
oldPeerAddr
ResourceTimingStructArgs
timing
)
;
async
Redirect3Complete
(
)
;
async
ReportSecurityMessage
(
nsString
messageTag
nsString
messageCategory
)
;
async
DeleteSelf
(
)
;
async
LogBlockedCORSRequest
(
nsString
message
nsCString
category
)
;
async
LogMimeTypeMismatch
(
nsCString
messageName
bool
warning
nsString
url
nsString
contentType
)
;
async
OriginalCacheInputStreamAvailable
(
IPCStream
?
stream
)
;
both
:
async
SetPriority
(
int16_t
priority
)
;
}
;
}
}
