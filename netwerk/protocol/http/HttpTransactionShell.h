#
ifndef
HttpTransactionShell_h__
#
define
HttpTransactionShell_h__
#
include
"
nsISupports
.
h
"
#
include
"
TimingStruct
.
h
"
#
include
"
nsInputStreamPump
.
h
"
class
nsIEventTraget
;
class
nsIInputStream
;
class
nsIInterfaceRequestor
;
class
nsIRequest
;
class
nsIRequestContext
;
class
nsITransportEventSink
;
enum
HttpTrafficCategory
:
uint8_t
;
namespace
mozilla
{
namespace
net
{
class
Http2PushedStreamWrapper
;
class
HttpTransactionParent
;
class
nsHttpConnectionInfo
;
class
nsHttpHeaderArray
;
class
nsHttpRequestHead
;
class
nsHttpTransaction
;
class
TransactionObserver
;
#
define
HTTPTRANSACTIONSHELL_IID
\
{
\
0x95e5a5b7
0x6aa2
0x4011
{
\
0x92
0x0a
0x09
0x08
0xb5
0x2f
0x95
0xd4
\
}
\
}
class
HttpTransactionShell
:
public
nsISupports
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
HTTPTRANSACTIONSHELL_IID
)
MOZ_MUST_USE
nsresult
virtual
Init
(
uint32_t
caps
nsHttpConnectionInfo
*
connInfo
nsHttpRequestHead
*
reqHeaders
nsIInputStream
*
reqBody
uint64_t
reqContentLength
bool
reqBodyIncludesHeaders
nsIEventTarget
*
consumerTarget
nsIInterfaceRequestor
*
callbacks
nsITransportEventSink
*
eventsink
uint64_t
topLevelOuterContentWindowId
HttpTrafficCategory
trafficCategory
nsIRequestContext
*
requestContext
uint32_t
classOfService
uint32_t
initialRwin
bool
responseTimeoutEnabled
)
=
0
;
virtual
nsresult
AsyncRead
(
nsIStreamListener
*
listener
nsIRequest
*
*
pump
)
=
0
;
virtual
void
SetClassOfService
(
uint32_t
classOfService
)
=
0
;
virtual
nsHttpResponseHead
*
TakeResponseHead
(
)
=
0
;
virtual
nsHttpHeaderArray
*
TakeResponseTrailers
(
)
=
0
;
virtual
nsISupports
*
SecurityInfo
(
)
=
0
;
virtual
void
SetSecurityCallbacks
(
nsIInterfaceRequestor
*
aCallbacks
)
=
0
;
virtual
void
GetNetworkAddresses
(
NetAddr
&
self
NetAddr
&
peer
bool
&
aResolvedByTRR
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetDomainLookupStart
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetDomainLookupEnd
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetConnectStart
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetTcpConnectEnd
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetSecureConnectionStart
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetConnectEnd
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetRequestStart
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetResponseStart
(
)
=
0
;
virtual
mozilla
:
:
TimeStamp
GetResponseEnd
(
)
=
0
;
virtual
void
SetDomainLookupStart
(
mozilla
:
:
TimeStamp
timeStamp
bool
onlyIfNull
=
false
)
=
0
;
virtual
void
SetDomainLookupEnd
(
mozilla
:
:
TimeStamp
timeStamp
bool
onlyIfNull
=
false
)
=
0
;
virtual
const
TimingStruct
Timings
(
)
=
0
;
virtual
bool
ResponseIsComplete
(
)
=
0
;
virtual
int64_t
GetTransferSize
(
)
=
0
;
virtual
int64_t
GetRequestSize
(
)
=
0
;
virtual
void
SetDNSWasRefreshed
(
)
=
0
;
virtual
void
DontReuseConnection
(
)
=
0
;
virtual
bool
HasStickyConnection
(
)
const
=
0
;
virtual
void
SetH2WSConnRefTaken
(
)
=
0
;
virtual
void
SetTransactionObserver
(
TransactionObserver
*
arg
)
=
0
;
virtual
void
SetPushedStream
(
Http2PushedStreamWrapper
*
push
)
=
0
;
virtual
bool
ProxyConnectFailed
(
)
=
0
;
virtual
int32_t
GetProxyConnectResponseCode
(
)
=
0
;
virtual
nsresult
SetSniffedTypeToChannel
(
nsIRequest
*
aPump
nsIChannel
*
aChannel
nsInputStreamPump
:
:
PeekSegmentFun
aCallTypeSniffers
)
=
0
;
virtual
nsHttpTransaction
*
AsHttpTransaction
(
)
=
0
;
virtual
HttpTransactionParent
*
AsHttpTransactionParent
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
HttpTransactionShell
HTTPTRANSACTIONSHELL_IID
)
#
define
NS_DECL_HTTPTRANSACTIONSHELL
\
virtual
nsresult
Init
(
\
uint32_t
caps
nsHttpConnectionInfo
*
connInfo
\
nsHttpRequestHead
*
reqHeaders
nsIInputStream
*
reqBody
\
uint64_t
reqContentLength
bool
reqBodyIncludesHeaders
\
nsIEventTarget
*
consumerTarget
nsIInterfaceRequestor
*
callbacks
\
nsITransportEventSink
*
eventsink
uint64_t
topLevelOuterContentWindowId
\
HttpTrafficCategory
trafficCategory
nsIRequestContext
*
requestContext
\
uint32_t
classOfService
uint32_t
initialRwin
\
bool
responseTimeoutEnabled
)
override
;
\
virtual
nsresult
AsyncRead
(
nsIStreamListener
*
listener
nsIRequest
*
*
pump
)
\
override
;
\
virtual
void
SetClassOfService
(
uint32_t
classOfService
)
override
;
\
virtual
nsHttpResponseHead
*
TakeResponseHead
(
)
override
;
\
virtual
nsHttpHeaderArray
*
TakeResponseTrailers
(
)
override
;
\
virtual
nsISupports
*
SecurityInfo
(
)
override
;
\
virtual
void
SetSecurityCallbacks
(
nsIInterfaceRequestor
*
aCallbacks
)
\
override
;
\
virtual
void
GetNetworkAddresses
(
NetAddr
&
self
NetAddr
&
peer
\
bool
&
aResolvedByTRR
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetDomainLookupStart
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetDomainLookupEnd
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetConnectStart
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetTcpConnectEnd
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetSecureConnectionStart
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetConnectEnd
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetRequestStart
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetResponseStart
(
)
override
;
\
virtual
mozilla
:
:
TimeStamp
GetResponseEnd
(
)
override
;
\
virtual
void
SetDomainLookupStart
(
mozilla
:
:
TimeStamp
timeStamp
\
bool
onlyIfNull
=
false
)
override
;
\
virtual
void
SetDomainLookupEnd
(
mozilla
:
:
TimeStamp
timeStamp
\
bool
onlyIfNull
=
false
)
override
;
\
virtual
const
TimingStruct
Timings
(
)
override
;
\
virtual
bool
ResponseIsComplete
(
)
override
;
\
virtual
int64_t
GetTransferSize
(
)
override
;
\
virtual
int64_t
GetRequestSize
(
)
override
;
\
virtual
void
SetDNSWasRefreshed
(
)
override
;
\
virtual
void
DontReuseConnection
(
)
override
;
\
virtual
bool
HasStickyConnection
(
)
const
override
;
\
virtual
void
SetH2WSConnRefTaken
(
)
override
;
\
virtual
void
SetTransactionObserver
(
TransactionObserver
*
arg
)
override
;
\
virtual
void
SetPushedStream
(
Http2PushedStreamWrapper
*
push
)
override
;
\
virtual
bool
ProxyConnectFailed
(
)
override
;
\
virtual
int32_t
GetProxyConnectResponseCode
(
)
override
;
\
virtual
nsresult
SetSniffedTypeToChannel
(
\
nsIRequest
*
aPump
nsIChannel
*
aChannel
\
nsInputStreamPump
:
:
PeekSegmentFun
aCallTypeSniffers
)
override
;
\
virtual
nsHttpTransaction
*
AsHttpTransaction
(
)
override
;
\
virtual
HttpTransactionParent
*
AsHttpTransactionParent
(
)
override
;
}
}
#
endif
