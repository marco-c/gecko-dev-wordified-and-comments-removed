#
include
"
HttpLog
.
h
"
#
include
"
PendingTransactionInfo
.
h
"
#
include
"
HalfOpenSocket
.
h
"
#
undef
LOG
#
define
LOG
(
args
)
LOG5
(
args
)
#
undef
LOG_ENABLED
#
define
LOG_ENABLED
(
)
LOG5_ENABLED
(
)
namespace
mozilla
{
namespace
net
{
PendingTransactionInfo
:
:
~
PendingTransactionInfo
(
)
{
if
(
mHalfOpen
)
{
RefPtr
<
HalfOpenSocket
>
halfOpen
=
do_QueryReferent
(
mHalfOpen
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
PendingTransactionInfo
"
"
[
trans
=
%
p
halfOpen
=
%
p
]
"
mTransaction
.
get
(
)
halfOpen
.
get
(
)
)
)
;
if
(
halfOpen
)
{
halfOpen
-
>
Unclaim
(
)
;
}
mHalfOpen
=
nullptr
;
}
else
if
(
mActiveConn
)
{
RefPtr
<
HttpConnectionBase
>
activeConn
=
do_QueryReferent
(
mActiveConn
)
;
if
(
activeConn
&
&
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
Transaction
(
)
-
>
IsNullTransaction
(
)
)
{
NullHttpTransaction
*
nullTrans
=
activeConn
-
>
Transaction
(
)
-
>
QueryNullTransaction
(
)
;
nullTrans
-
>
Unclaim
(
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
PendingTransactionInfo
-
mark
%
p
unclaimed
.
"
activeConn
.
get
(
)
)
)
;
}
}
}
bool
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
(
)
{
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
halfOpen
=
%
p
activeConn
=
%
p
]
\
n
"
mTransaction
.
get
(
)
mHalfOpen
.
get
(
)
mActiveConn
.
get
(
)
)
)
;
bool
alreadyHalfOpenOrWaitingForTLS
=
false
;
if
(
mHalfOpen
)
{
MOZ_ASSERT
(
!
mActiveConn
)
;
RefPtr
<
HalfOpenSocket
>
halfOpen
=
do_QueryReferent
(
mHalfOpen
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
halfOpen
=
%
p
]
\
n
"
mTransaction
.
get
(
)
halfOpen
.
get
(
)
)
)
;
if
(
halfOpen
)
{
alreadyHalfOpenOrWaitingForTLS
=
true
;
}
else
{
mHalfOpen
=
nullptr
;
}
}
else
if
(
mActiveConn
)
{
MOZ_ASSERT
(
!
mHalfOpen
)
;
RefPtr
<
HttpConnectionBase
>
activeConn
=
do_QueryReferent
(
mActiveConn
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
activeConn
=
%
p
]
\
n
"
mTransaction
.
get
(
)
activeConn
.
get
(
)
)
)
;
if
(
activeConn
&
&
(
(
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
Transaction
(
)
-
>
IsNullTransaction
(
)
)
|
|
(
!
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
CanReuse
(
)
)
)
)
{
alreadyHalfOpenOrWaitingForTLS
=
true
;
}
else
{
mActiveConn
=
nullptr
;
}
}
return
alreadyHalfOpenOrWaitingForTLS
;
}
void
PendingTransactionInfo
:
:
AbandonHalfOpenAndForgetActiveConn
(
)
{
RefPtr
<
HalfOpenSocket
>
half
=
do_QueryReferent
(
mHalfOpen
)
;
if
(
half
)
{
half
-
>
Abandon
(
)
;
}
mHalfOpen
=
nullptr
;
mActiveConn
=
nullptr
;
}
bool
PendingTransactionInfo
:
:
TryClaimingHalfOpen
(
HalfOpenSocket
*
sock
)
{
if
(
sock
-
>
Claim
(
)
)
{
mHalfOpen
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
sock
)
)
;
return
true
;
}
return
false
;
}
bool
PendingTransactionInfo
:
:
TryClaimingActiveConn
(
HttpConnectionBase
*
conn
)
{
nsAHttpTransaction
*
activeTrans
=
conn
-
>
Transaction
(
)
;
NullHttpTransaction
*
nullTrans
=
activeTrans
?
activeTrans
-
>
QueryNullTransaction
(
)
:
nullptr
;
if
(
nullTrans
&
&
nullTrans
-
>
Claim
(
)
)
{
mActiveConn
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
conn
)
)
;
return
true
;
}
return
false
;
}
void
PendingTransactionInfo
:
:
AddHalfOpen
(
HalfOpenSocket
*
sock
)
{
mHalfOpen
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
sock
)
)
;
}
}
}
