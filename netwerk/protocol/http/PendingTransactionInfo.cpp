#
include
"
HttpLog
.
h
"
#
include
"
PendingTransactionInfo
.
h
"
#
include
"
NullHttpTransaction
.
h
"
#
undef
LOG
#
define
LOG
(
args
)
LOG5
(
args
)
#
undef
LOG_ENABLED
#
define
LOG_ENABLED
(
)
LOG5_ENABLED
(
)
namespace
mozilla
{
namespace
net
{
PendingTransactionInfo
:
:
~
PendingTransactionInfo
(
)
{
if
(
mDnsAndSock
)
{
RefPtr
<
DnsAndConnectSocket
>
dnsAndSock
=
do_QueryReferent
(
mDnsAndSock
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
PendingTransactionInfo
"
"
[
trans
=
%
p
halfOpen
=
%
p
]
"
mTransaction
.
get
(
)
dnsAndSock
.
get
(
)
)
)
;
if
(
dnsAndSock
)
{
dnsAndSock
-
>
Unclaim
(
)
;
}
mDnsAndSock
=
nullptr
;
}
else
if
(
mActiveConn
)
{
RefPtr
<
HttpConnectionBase
>
activeConn
=
do_QueryReferent
(
mActiveConn
)
;
if
(
activeConn
&
&
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
Transaction
(
)
-
>
IsNullTransaction
(
)
)
{
NullHttpTransaction
*
nullTrans
=
activeConn
-
>
Transaction
(
)
-
>
QueryNullTransaction
(
)
;
nullTrans
-
>
Unclaim
(
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
PendingTransactionInfo
-
mark
%
p
unclaimed
.
"
activeConn
.
get
(
)
)
)
;
}
}
}
bool
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
(
)
{
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
halfOpen
=
%
p
activeConn
=
%
p
]
\
n
"
mTransaction
.
get
(
)
mDnsAndSock
.
get
(
)
mActiveConn
.
get
(
)
)
)
;
bool
alreadyDnsAndSockOrWaitingForTLS
=
false
;
if
(
mDnsAndSock
)
{
MOZ_ASSERT
(
!
mActiveConn
)
;
RefPtr
<
DnsAndConnectSocket
>
dnsAndSock
=
do_QueryReferent
(
mDnsAndSock
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
dnsAndSock
=
%
p
]
\
n
"
mTransaction
.
get
(
)
dnsAndSock
.
get
(
)
)
)
;
if
(
dnsAndSock
)
{
alreadyDnsAndSockOrWaitingForTLS
=
true
;
}
else
{
mDnsAndSock
=
nullptr
;
}
}
else
if
(
mActiveConn
)
{
MOZ_ASSERT
(
!
mDnsAndSock
)
;
RefPtr
<
HttpConnectionBase
>
activeConn
=
do_QueryReferent
(
mActiveConn
)
;
LOG
(
(
"
PendingTransactionInfo
:
:
IsAlreadyClaimedInitializingConn
"
"
[
trans
=
%
p
activeConn
=
%
p
]
\
n
"
mTransaction
.
get
(
)
activeConn
.
get
(
)
)
)
;
if
(
activeConn
&
&
(
(
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
Transaction
(
)
-
>
IsNullTransaction
(
)
)
|
|
(
!
activeConn
-
>
Transaction
(
)
&
&
activeConn
-
>
CanReuse
(
)
)
)
)
{
alreadyDnsAndSockOrWaitingForTLS
=
true
;
}
else
{
mActiveConn
=
nullptr
;
}
}
return
alreadyDnsAndSockOrWaitingForTLS
;
}
nsWeakPtr
PendingTransactionInfo
:
:
ForgetDnsAndConnectSocketAndActiveConn
(
)
{
nsWeakPtr
dnsAndSock
=
mDnsAndSock
;
mDnsAndSock
=
nullptr
;
mActiveConn
=
nullptr
;
return
dnsAndSock
;
}
void
PendingTransactionInfo
:
:
RememberDnsAndConnectSocket
(
DnsAndConnectSocket
*
sock
)
{
mDnsAndSock
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
sock
)
)
;
}
bool
PendingTransactionInfo
:
:
TryClaimingActiveConn
(
HttpConnectionBase
*
conn
)
{
nsAHttpTransaction
*
activeTrans
=
conn
-
>
Transaction
(
)
;
NullHttpTransaction
*
nullTrans
=
activeTrans
?
activeTrans
-
>
QueryNullTransaction
(
)
:
nullptr
;
if
(
nullTrans
&
&
nullTrans
-
>
Claim
(
)
)
{
mActiveConn
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
conn
)
)
;
nsCOMPtr
<
nsITLSSocketControl
>
tlsSocketControl
;
conn
-
>
GetTLSSocketControl
(
getter_AddRefs
(
tlsSocketControl
)
)
;
if
(
tlsSocketControl
)
{
Unused
<
<
tlsSocketControl
-
>
Claim
(
)
;
}
return
true
;
}
return
false
;
}
void
PendingTransactionInfo
:
:
AddDnsAndConnectSocket
(
DnsAndConnectSocket
*
sock
)
{
mDnsAndSock
=
do_GetWeakReference
(
static_cast
<
nsISupportsWeakReference
*
>
(
sock
)
)
;
}
}
}
