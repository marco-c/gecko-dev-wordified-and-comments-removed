#
ifndef
HTTPSRecordResolver_h__
#
define
HTTPSRecordResolver_h__
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsICancelable
.
h
"
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsHttpConnectionInfo
.
h
"
class
nsIDNSAddrRecord
;
class
nsIDNSHTTPSSVCRecord
;
namespace
mozilla
{
namespace
net
{
class
nsAHttpTransaction
;
class
HTTPSRecordResolver
:
public
nsIDNSListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDNSLISTENER
explicit
HTTPSRecordResolver
(
nsAHttpTransaction
*
aTransaction
)
;
nsresult
FetchHTTPSRRInternal
(
nsIEventTarget
*
aTarget
nsICancelable
*
*
aDNSRequest
)
;
void
PrefetchAddrRecord
(
const
nsACString
&
aTargetName
bool
aRefreshDNS
)
;
void
Close
(
)
;
protected
:
virtual
~
HTTPSRecordResolver
(
)
;
private
:
nsresult
InvokeCallback
(
nsIDNSHTTPSSVCRecord
*
aHTTPSSVCRecord
nsISVCBRecord
*
aHighestPriorityRecord
const
nsACString
&
aCname
)
;
mozilla
:
:
Mutex
mMutex
{
"
HTTPSRecordResolver
:
:
mMutex
"
}
;
RefPtr
<
nsAHttpTransaction
>
mTransaction
;
RefPtr
<
nsHttpConnectionInfo
>
mConnInfo
;
nsCOMPtr
<
nsICancelable
>
mCnameRequest
MOZ_GUARDED_BY
(
mMutex
)
;
nsCOMPtr
<
nsICancelable
>
mHTTPSRecordRequest
MOZ_GUARDED_BY
(
mMutex
)
;
nsCOMPtr
<
nsIDNSAddrRecord
>
mAddrRecord
;
nsCOMPtr
<
nsIDNSHTTPSSVCRecord
>
mHTTPSRecord
;
uint32_t
mCaps
;
bool
mDone
=
false
;
}
;
}
}
#
endif
