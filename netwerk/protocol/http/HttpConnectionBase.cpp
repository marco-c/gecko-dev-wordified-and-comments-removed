#
include
"
HttpLog
.
h
"
#
undef
LOG
#
define
LOG
(
args
)
LOG5
(
args
)
#
undef
LOG_ENABLED
#
define
LOG_ENABLED
(
)
LOG5_ENABLED
(
)
#
define
TLS_EARLY_DATA_NOT_AVAILABLE
0
#
define
TLS_EARLY_DATA_AVAILABLE_BUT_NOT_USED
1
#
define
TLS_EARLY_DATA_AVAILABLE_AND_USED
2
#
define
ESNI_SUCCESSFUL
0
#
define
ESNI_FAILED
1
#
define
NO_ESNI_SUCCESSFUL
2
#
define
NO_ESNI_FAILED
3
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
HttpConnectionBase
.
h
"
#
include
"
nsHttpHandler
.
h
"
#
include
"
nsIClassOfService
.
h
"
#
include
"
nsIOService
.
h
"
#
include
"
nsISocketTransport
.
h
"
namespace
mozilla
{
namespace
net
{
HttpConnectionBase
:
:
HttpConnectionBase
(
)
:
mTransactionCaps
(
0
)
mExperienced
(
false
)
mBootstrappedTimingsSet
(
false
)
mTotalBytesWritten
(
0
)
mCallbacksLock
(
"
nsHttpConnection
:
:
mCallbacksLock
"
)
mRtt
(
0
)
{
LOG
(
(
"
Creating
HttpConnectionBase
%
p
\
n
"
this
)
)
;
}
void
HttpConnectionBase
:
:
BootstrapTimings
(
TimingStruct
times
)
{
mBootstrappedTimingsSet
=
true
;
mBootstrappedTimings
=
times
;
}
void
HttpConnectionBase
:
:
SetSecurityCallbacks
(
nsIInterfaceRequestor
*
aCallbacks
)
{
MutexAutoLock
lock
(
mCallbacksLock
)
;
mCallbacks
=
new
nsMainThreadPtrHolder
<
nsIInterfaceRequestor
>
(
"
nsHttpConnection
:
:
mCallbacks
"
aCallbacks
false
)
;
}
void
HttpConnectionBase
:
:
SetTrafficCategory
(
HttpTrafficCategory
aCategory
)
{
MOZ_ASSERT
(
OnSocketThread
(
)
"
not
on
socket
thread
"
)
;
if
(
aCategory
=
=
HttpTrafficCategory
:
:
eInvalid
|
|
mTrafficCategory
.
Contains
(
aCategory
)
)
{
return
;
}
Unused
<
<
mTrafficCategory
.
AppendElement
(
aCategory
)
;
}
}
}
