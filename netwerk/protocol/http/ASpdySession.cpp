#
include
"
HttpLog
.
h
"
#
include
"
nsHttp
.
h
"
#
include
"
nsHttpHandler
.
h
"
#
include
"
ASpdySession
.
h
"
#
include
"
PSpdyPush
.
h
"
#
include
"
Http2Push
.
h
"
#
include
"
Http2Session
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
namespace
mozilla
{
namespace
net
{
ASpdySession
*
ASpdySession
:
:
NewSpdySession
(
net
:
:
SpdyVersion
version
nsISocketTransport
*
aTransport
bool
attemptingEarlyData
)
{
MOZ_ASSERT
(
version
=
=
SpdyVersion
:
:
HTTP_2
"
Unsupported
spdy
version
"
)
;
return
new
Http2Session
(
aTransport
version
attemptingEarlyData
)
;
}
SpdyInformation
:
:
SpdyInformation
(
)
{
Version
[
0
]
=
SpdyVersion
:
:
HTTP_2
;
VersionString
[
0
]
=
NS_LITERAL_CSTRING
(
"
h2
"
)
;
ALPNCallbacks
[
0
]
=
Http2Session
:
:
ALPNCallback
;
}
bool
SpdyInformation
:
:
ProtocolEnabled
(
uint32_t
index
)
const
{
MOZ_ASSERT
(
index
<
kCount
"
index
out
of
range
"
)
;
return
gHttpHandler
-
>
IsHttp2Enabled
(
)
;
}
nsresult
SpdyInformation
:
:
GetNPNIndex
(
const
nsACString
&
npnString
uint32_t
*
result
)
const
{
if
(
npnString
.
IsEmpty
(
)
)
return
NS_ERROR_FAILURE
;
for
(
uint32_t
index
=
0
;
index
<
kCount
;
+
+
index
)
{
if
(
npnString
.
Equals
(
VersionString
[
index
]
)
)
{
*
result
=
index
;
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
SpdyPushCache
:
:
~
SpdyPushCache
(
)
{
mHashHttp2
.
Clear
(
)
;
}
bool
SpdyPushCache
:
:
RegisterPushedStreamHttp2
(
const
nsCString
&
key
Http2PushedStream
*
stream
)
{
LOG3
(
(
"
SpdyPushCache
:
:
RegisterPushedStreamHttp2
%
s
0x
%
X
\
n
"
key
.
get
(
)
stream
-
>
StreamID
(
)
)
)
;
if
(
mHashHttp2
.
Get
(
key
)
)
{
LOG3
(
(
"
SpdyPushCache
:
:
RegisterPushedStreamHttp2
%
s
0x
%
X
duplicate
key
\
n
"
key
.
get
(
)
stream
-
>
StreamID
(
)
)
)
;
return
false
;
}
mHashHttp2
.
Put
(
key
stream
)
;
return
true
;
}
Http2PushedStream
*
SpdyPushCache
:
:
RemovePushedStreamHttp2
(
const
nsCString
&
key
)
{
Http2PushedStream
*
rv
=
mHashHttp2
.
Get
(
key
)
;
LOG3
(
(
"
SpdyPushCache
:
:
RemovePushedStreamHttp2
%
s
0x
%
X
\
n
"
key
.
get
(
)
rv
?
rv
-
>
StreamID
(
)
:
0
)
)
;
if
(
rv
)
mHashHttp2
.
Remove
(
key
)
;
return
rv
;
}
Http2PushedStream
*
SpdyPushCache
:
:
RemovePushedStreamHttp2ByID
(
const
nsCString
&
key
const
uint32_t
&
streamID
)
{
Http2PushedStream
*
rv
=
mHashHttp2
.
Get
(
key
)
;
LOG3
(
(
"
SpdyPushCache
:
:
RemovePushedStreamHttp2ByID
%
s
0x
%
X
0x
%
X
"
key
.
get
(
)
rv
?
rv
-
>
StreamID
(
)
:
0
streamID
)
)
;
if
(
rv
&
&
streamID
=
=
rv
-
>
StreamID
(
)
)
{
mHashHttp2
.
Remove
(
key
)
;
}
else
{
rv
=
nullptr
;
}
return
rv
;
}
}
}
