#
include
"
nsISupports
.
idl
"
interface
nsIHttpAuthenticableChannel
;
interface
nsIHttpAuthenticatorCallback
;
interface
nsICancelable
;
[
builtinclass
uuid
(
fef7db8a
-
a4e2
-
49d1
-
9685
-
19ed7e309b7d
)
]
interface
nsIHttpAuthenticator
:
nsISupports
{
[
must_use
]
void
challengeReceived
(
in
nsIHttpAuthenticableChannel
aChannel
in
ACString
aChallenge
in
boolean
aProxyAuth
inout
nsISupports
aSessionState
inout
nsISupports
aContinuationState
out
boolean
aInvalidatesIdentity
)
;
[
must_use
]
void
generateCredentialsAsync
(
in
nsIHttpAuthenticableChannel
aChannel
in
nsIHttpAuthenticatorCallback
aCallback
in
ACString
aChallenge
in
boolean
aProxyAuth
in
AString
aDomain
in
AString
aUser
in
AString
aPassword
in
nsISupports
aSessionState
in
nsISupports
aContinuationState
out
nsICancelable
aCancel
)
;
[
must_use
]
ACString
generateCredentials
(
in
nsIHttpAuthenticableChannel
aChannel
in
ACString
aChallenge
in
boolean
aProxyAuth
in
AString
aDomain
in
AString
aUser
in
AString
aPassword
inout
nsISupports
aSessionState
inout
nsISupports
aContinuationState
out
unsigned
long
aFlags
)
;
const
unsigned
long
USING_INTERNAL_IDENTITY
=
(
1
<
<
0
)
;
[
must_use
]
readonly
attribute
unsigned
long
authFlags
;
const
unsigned
long
REQUEST_BASED
=
(
1
<
<
0
)
;
const
unsigned
long
CONNECTION_BASED
=
(
1
<
<
1
)
;
const
unsigned
long
REUSABLE_CREDENTIALS
=
(
1
<
<
2
)
;
const
unsigned
long
REUSABLE_CHALLENGE
=
(
1
<
<
3
)
;
const
unsigned
long
IDENTITY_IGNORED
=
(
1
<
<
10
)
;
const
unsigned
long
IDENTITY_INCLUDES_DOMAIN
=
(
1
<
<
11
)
;
const
unsigned
long
IDENTITY_ENCRYPTED
=
(
1
<
<
12
)
;
}
;
