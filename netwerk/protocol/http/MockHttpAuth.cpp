#
include
"
HttpLog
.
h
"
#
include
"
MockHttpAuth
.
h
"
namespace
mozilla
:
:
net
{
NS_IMPL_ISUPPORTS
(
MockHttpAuth
nsIHttpAuthenticator
)
NS_IMETHODIMP
MockHttpAuth
:
:
ChallengeReceived
(
nsIHttpAuthenticableChannel
*
aChannel
const
nsACString
&
aChallenge
bool
aProxyAuth
nsISupports
*
*
aSessionState
nsISupports
*
*
aContinuationState
bool
*
aInvalidatesIdentity
)
{
*
aInvalidatesIdentity
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
MockHttpAuth
:
:
GenerateCredentialsAsync
(
nsIHttpAuthenticableChannel
*
aChannel
nsIHttpAuthenticatorCallback
*
aCallback
const
nsACString
&
aChallenge
bool
aProxyAuth
const
nsAString
&
aDomain
const
nsAString
&
aUser
const
nsAString
&
aPassword
nsISupports
*
aSessionState
nsISupports
*
aContinuationState
nsICancelable
*
*
aCancel
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
MockHttpAuth
:
:
GenerateCredentials
(
nsIHttpAuthenticableChannel
*
aChannel
const
nsACString
&
aChallenge
bool
aProxyAuth
const
nsAString
&
aDomain
const
nsAString
&
aUser
const
nsAString
&
aPassword
nsISupports
*
*
aSessionState
nsISupports
*
*
aContinuationState
uint32_t
*
aFlags
nsACString
&
_retval
)
{
_retval
.
Assign
(
"
moz_test_credentials
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MockHttpAuth
:
:
GetAuthFlags
(
uint32_t
*
aAuthFlags
)
{
*
aAuthFlags
|
=
nsIHttpAuthenticator
:
:
CONNECTION_BASED
;
return
NS_OK
;
}
}
