#
ifndef
nsHttpResponseHead_h__
#
define
nsHttpResponseHead_h__
#
include
"
nsHttpHeaderArray
.
h
"
#
include
"
nsHttp
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
RecursiveMutex
.
h
"
class
nsIHttpHeaderVisitor
;
namespace
IPC
{
template
<
typename
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
net
{
class
nsHttpResponseHead
{
public
:
nsHttpResponseHead
(
)
:
mVersion
(
HttpVersion
:
:
v1_1
)
mStatus
(
200
)
mContentLength
(
-
1
)
mCacheControlPrivate
(
false
)
mCacheControlNoStore
(
false
)
mCacheControlNoCache
(
false
)
mCacheControlImmutable
(
false
)
mPragmaNoCache
(
false
)
mRecursiveMutex
(
"
nsHttpResponseHead
.
mRecursiveMutex
"
)
mInVisitHeaders
(
false
)
{
}
nsHttpResponseHead
(
const
nsHttpResponseHead
&
aOther
)
;
nsHttpResponseHead
&
operator
=
(
const
nsHttpResponseHead
&
aOther
)
;
void
Enter
(
)
{
mRecursiveMutex
.
Lock
(
)
;
}
void
Exit
(
)
{
mRecursiveMutex
.
Unlock
(
)
;
}
HttpVersion
Version
(
)
;
#
undef
Status
uint16_t
Status
(
)
;
void
StatusText
(
nsACString
&
aStatusText
)
;
int64_t
ContentLength
(
)
;
void
ContentType
(
nsACString
&
aContentType
)
;
void
ContentCharset
(
nsACString
&
aContentCharset
)
;
bool
Private
(
)
;
bool
NoStore
(
)
;
bool
NoCache
(
)
;
bool
Immutable
(
)
;
int64_t
TotalEntitySize
(
)
;
MOZ_MUST_USE
nsresult
SetHeader
(
const
nsACString
&
h
const
nsACString
&
v
bool
m
=
false
)
;
MOZ_MUST_USE
nsresult
SetHeader
(
nsHttpAtom
h
const
nsACString
&
v
bool
m
=
false
)
;
MOZ_MUST_USE
nsresult
GetHeader
(
nsHttpAtom
h
nsACString
&
v
)
;
void
ClearHeader
(
nsHttpAtom
h
)
;
void
ClearHeaders
(
)
;
bool
HasHeaderValue
(
nsHttpAtom
h
const
char
*
v
)
;
bool
HasHeader
(
nsHttpAtom
h
)
;
void
SetContentType
(
const
nsACString
&
s
)
;
void
SetContentCharset
(
const
nsACString
&
s
)
;
void
SetContentLength
(
int64_t
)
;
void
Flatten
(
nsACString
&
bool
pruneTransients
)
;
void
FlattenNetworkOriginalHeaders
(
nsACString
&
buf
)
;
MOZ_MUST_USE
nsresult
ParseCachedHead
(
const
char
*
block
)
;
MOZ_MUST_USE
nsresult
ParseCachedOriginalHeaders
(
char
*
block
)
;
void
ParseStatusLine
(
const
nsACString
&
line
)
;
MOZ_MUST_USE
nsresult
ParseHeaderLine
(
const
nsACString
&
line
)
;
MOZ_MUST_USE
nsresult
ComputeFreshnessLifetime
(
uint32_t
*
)
;
MOZ_MUST_USE
nsresult
ComputeCurrentAge
(
uint32_t
now
uint32_t
requestTime
uint32_t
*
result
)
;
bool
MustValidate
(
)
;
bool
MustValidateIfExpired
(
)
;
bool
IsResumable
(
)
;
bool
ExpiresInPast
(
)
;
MOZ_MUST_USE
nsresult
UpdateHeaders
(
nsHttpResponseHead
*
headers
)
;
void
Reset
(
)
;
MOZ_MUST_USE
nsresult
GetAgeValue
(
uint32_t
*
result
)
;
MOZ_MUST_USE
nsresult
GetMaxAgeValue
(
uint32_t
*
result
)
;
MOZ_MUST_USE
nsresult
GetDateValue
(
uint32_t
*
result
)
;
MOZ_MUST_USE
nsresult
GetExpiresValue
(
uint32_t
*
result
)
;
MOZ_MUST_USE
nsresult
GetLastModifiedValue
(
uint32_t
*
result
)
;
bool
operator
=
=
(
const
nsHttpResponseHead
&
aOther
)
const
;
MOZ_MUST_USE
nsresult
VisitHeaders
(
nsIHttpHeaderVisitor
*
visitor
nsHttpHeaderArray
:
:
VisitorFilter
filter
)
;
MOZ_MUST_USE
nsresult
GetOriginalHeader
(
nsHttpAtom
aHeader
nsIHttpHeaderVisitor
*
aVisitor
)
;
bool
HasContentType
(
)
;
bool
HasContentCharset
(
)
;
private
:
MOZ_MUST_USE
nsresult
SetHeader_locked
(
nsHttpAtom
atom
const
nsACString
&
h
const
nsACString
&
v
bool
m
=
false
)
;
void
AssignDefaultStatusText
(
)
;
void
ParseVersion
(
const
char
*
)
;
void
ParseCacheControl
(
const
char
*
)
;
void
ParsePragma
(
const
char
*
)
;
void
ParseStatusLine_locked
(
const
nsACString
&
line
)
;
MOZ_MUST_USE
nsresult
ParseHeaderLine_locked
(
const
nsACString
&
line
bool
originalFromNetHeaders
)
;
MOZ_MUST_USE
nsresult
ParseDateHeader
(
nsHttpAtom
header
uint32_t
*
result
)
const
;
bool
ExpiresInPast_locked
(
)
const
;
MOZ_MUST_USE
nsresult
GetAgeValue_locked
(
uint32_t
*
result
)
const
;
MOZ_MUST_USE
nsresult
GetExpiresValue_locked
(
uint32_t
*
result
)
const
;
MOZ_MUST_USE
nsresult
GetMaxAgeValue_locked
(
uint32_t
*
result
)
const
;
MOZ_MUST_USE
nsresult
GetDateValue_locked
(
uint32_t
*
result
)
const
{
return
ParseDateHeader
(
nsHttp
:
:
Date
result
)
;
}
MOZ_MUST_USE
nsresult
GetLastModifiedValue_locked
(
uint32_t
*
result
)
const
{
return
ParseDateHeader
(
nsHttp
:
:
Last_Modified
result
)
;
}
private
:
nsHttpHeaderArray
mHeaders
;
HttpVersion
mVersion
;
uint16_t
mStatus
;
nsCString
mStatusText
;
int64_t
mContentLength
;
nsCString
mContentType
;
nsCString
mContentCharset
;
bool
mCacheControlPrivate
;
bool
mCacheControlNoStore
;
bool
mCacheControlNoCache
;
bool
mCacheControlImmutable
;
bool
mPragmaNoCache
;
RecursiveMutex
mRecursiveMutex
;
bool
mInVisitHeaders
;
friend
struct
IPC
:
:
ParamTraits
<
nsHttpResponseHead
>
;
}
;
}
}
#
endif
