#
ifndef
nsHttpConnectionMgr_h__
#
define
nsHttpConnectionMgr_h__
#
include
"
HalfOpenSocket
.
h
"
#
include
"
HttpConnectionBase
.
h
"
#
include
"
HttpConnectionMgrShell
.
h
"
#
include
"
nsHttpConnection
.
h
"
#
include
"
nsHttpTransaction
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
ARefBase
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
ConnectionEntry
.
h
"
#
include
"
TCPFastOpen
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsITimer
.
h
"
class
nsIHttpUpgradeListener
;
namespace
mozilla
{
namespace
net
{
class
EventTokenBucket
;
class
NullHttpTransaction
;
struct
HttpRetParams
;
class
nsHttpConnectionMgr
;
typedef
void
(
nsHttpConnectionMgr
:
:
*
nsConnEventHandler
)
(
int32_t
ARefBase
*
)
;
class
nsHttpConnectionMgr
final
:
public
HttpConnectionMgrShell
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_HTTPCONNECTIONMGRSHELL
NS_DECL_NSIOBSERVER
nsHttpConnectionMgr
(
)
;
[
[
nodiscard
]
]
nsresult
CancelTransactions
(
nsHttpConnectionInfo
*
nsresult
reason
)
;
void
MoveToWildCardConnEntry
(
nsHttpConnectionInfo
*
specificCI
nsHttpConnectionInfo
*
wildcardCI
HttpConnectionBase
*
conn
)
;
bool
MoveTransToNewConnEntry
(
nsHttpTransaction
*
aTrans
nsHttpConnectionInfo
*
aNewCI
bool
aNoHttp3ForNewEntry
=
false
)
;
[
[
nodiscard
]
]
nsresult
CloseIdleConnection
(
nsHttpConnection
*
)
;
[
[
nodiscard
]
]
nsresult
RemoveIdleConnection
(
nsHttpConnection
*
)
;
void
ReportSpdyConnection
(
nsHttpConnection
*
bool
usingSpdy
)
;
void
ReportHttp3Connection
(
HttpConnectionBase
*
)
;
bool
GetConnectionData
(
nsTArray
<
HttpRetParams
>
*
)
;
void
ResetIPFamilyPreference
(
nsHttpConnectionInfo
*
)
;
uint16_t
MaxRequestDelay
(
)
{
return
mMaxRequestDelay
;
}
void
AddActiveTransaction
(
nsHttpTransaction
*
aTrans
)
;
void
RemoveActiveTransaction
(
nsHttpTransaction
*
aTrans
Maybe
<
bool
>
const
&
aOverride
=
Nothing
(
)
)
;
void
UpdateActiveTransaction
(
nsHttpTransaction
*
aTrans
)
;
bool
ShouldThrottle
(
nsHttpTransaction
*
aTrans
)
;
void
TouchThrottlingTimeWindow
(
bool
aEnsureTicker
=
true
)
;
bool
IsConnEntryUnderPressure
(
nsHttpConnectionInfo
*
)
;
uint64_t
CurrentTopLevelOuterContentWindowId
(
)
{
return
mCurrentTopLevelOuterContentWindowId
;
}
void
DoSpeculativeConnection
(
SpeculativeTransaction
*
aTrans
bool
aFetchHTTPSRR
)
;
HttpConnectionBase
*
GetH2orH3ActiveConn
(
ConnectionEntry
*
ent
bool
aNoHttp2
bool
aNoHttp3
)
;
void
IncreaseNumHalfOpenConns
(
)
;
void
DecreaseNumHalfOpenConns
(
)
;
void
NewIdleConnectionAdded
(
uint32_t
timeToLive
)
;
void
DecrementNumIdleConns
(
)
;
private
:
virtual
~
nsHttpConnectionMgr
(
)
;
void
PruneDeadConnectionsAfter
(
uint32_t
time
)
;
void
ConditionallyStopPruneDeadConnectionsTimer
(
)
;
void
ConditionallyStopTimeoutTick
(
)
;
[
[
nodiscard
]
]
nsresult
PruneNoTraffic
(
)
;
[
[
nodiscard
]
]
bool
ProcessPendingQForEntry
(
nsHttpConnectionInfo
*
)
;
void
ActivateTimeoutTick
(
)
;
already_AddRefed
<
PendingTransactionInfo
>
FindTransactionHelper
(
bool
removeWhenFound
ConnectionEntry
*
aEnt
nsAHttpTransaction
*
aTrans
)
;
public
:
static
nsAHttpConnection
*
MakeConnectionHandle
(
HttpConnectionBase
*
aWrapped
)
;
void
RegisterOriginCoalescingKey
(
HttpConnectionBase
*
const
nsACString
&
host
int32_t
port
)
;
protected
:
friend
class
ConnectionEntry
;
void
IncrementActiveConnCount
(
)
;
void
DecrementActiveConnCount
(
HttpConnectionBase
*
)
;
private
:
friend
class
HalfOpenSocket
;
friend
class
PendingTransactionInfo
;
ReentrantMonitor
mReentrantMonitor
;
nsCOMPtr
<
nsIEventTarget
>
mSocketThreadTarget
;
uint16_t
mMaxUrgentExcessiveConns
;
uint16_t
mMaxConns
;
uint16_t
mMaxPersistConnsPerHost
;
uint16_t
mMaxPersistConnsPerProxy
;
uint16_t
mMaxRequestDelay
;
bool
mThrottleEnabled
;
uint32_t
mThrottleVersion
;
uint32_t
mThrottleSuspendFor
;
uint32_t
mThrottleResumeFor
;
uint32_t
mThrottleReadLimit
;
uint32_t
mThrottleReadInterval
;
uint32_t
mThrottleHoldTime
;
TimeDuration
mThrottleMaxTime
;
bool
mBeConservativeForProxy
;
Atomic
<
bool
mozilla
:
:
Relaxed
>
mIsShuttingDown
;
[
[
nodiscard
]
]
bool
ProcessPendingQForEntry
(
ConnectionEntry
*
bool
considerAll
)
;
bool
DispatchPendingQ
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
ConnectionEntry
*
ent
bool
considerAll
)
;
void
PreparePendingQForDispatching
(
ConnectionEntry
*
ent
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
bool
considerAll
)
;
uint32_t
MaxPersistConnections
(
ConnectionEntry
*
ent
)
const
;
bool
AtActiveConnectionLimit
(
ConnectionEntry
*
uint32_t
caps
)
;
[
[
nodiscard
]
]
nsresult
TryDispatchTransaction
(
ConnectionEntry
*
ent
bool
onlyReusedConnection
PendingTransactionInfo
*
pendingTransInfo
)
;
[
[
nodiscard
]
]
nsresult
TryDispatchTransactionOnIdleConn
(
ConnectionEntry
*
ent
PendingTransactionInfo
*
pendingTransInfo
bool
respectUrgency
bool
*
allUrgent
=
nullptr
)
;
[
[
nodiscard
]
]
nsresult
DispatchTransaction
(
ConnectionEntry
*
nsHttpTransaction
*
HttpConnectionBase
*
)
;
[
[
nodiscard
]
]
nsresult
DispatchAbstractTransaction
(
ConnectionEntry
*
nsAHttpTransaction
*
uint32_t
HttpConnectionBase
*
int32_t
)
;
[
[
nodiscard
]
]
nsresult
ProcessNewTransaction
(
nsHttpTransaction
*
)
;
[
[
nodiscard
]
]
nsresult
EnsureSocketThreadTarget
(
)
;
void
ReportProxyTelemetry
(
ConnectionEntry
*
ent
)
;
[
[
nodiscard
]
]
nsresult
CreateTransport
(
ConnectionEntry
*
nsAHttpTransaction
*
uint32_t
bool
bool
bool
bool
PendingTransactionInfo
*
pendingTransInfo
)
;
void
StartedConnect
(
)
;
void
RecvdConnect
(
)
;
ConnectionEntry
*
GetOrCreateConnectionEntry
(
nsHttpConnectionInfo
*
bool
allowWildCard
bool
aNoHttp2
bool
aNoHttp3
)
;
[
[
nodiscard
]
]
nsresult
MakeNewConnection
(
ConnectionEntry
*
ent
PendingTransactionInfo
*
pendingTransInfo
)
;
nsClassHashtable
<
nsCStringHashKey
nsTArray
<
nsWeakPtr
>
>
mCoalescingHash
;
HttpConnectionBase
*
FindCoalescableConnection
(
ConnectionEntry
*
ent
bool
justKidding
bool
aNoHttp2
bool
aNoHttp3
)
;
HttpConnectionBase
*
FindCoalescableConnectionByHashKey
(
ConnectionEntry
*
ent
const
nsCString
&
key
bool
justKidding
bool
aNoHttp2
bool
aNoHttp3
)
;
void
UpdateCoalescingForNewConn
(
HttpConnectionBase
*
conn
ConnectionEntry
*
ent
)
;
void
ProcessSpdyPendingQ
(
ConnectionEntry
*
ent
)
;
void
DispatchSpdyPendingQ
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
ConnectionEntry
*
ent
HttpConnectionBase
*
connH2
HttpConnectionBase
*
connH3
)
;
[
[
nodiscard
]
]
nsresult
PostEvent
(
nsConnEventHandler
handler
int32_t
iparam
=
0
ARefBase
*
vparam
=
nullptr
)
;
void
OnMsgReclaimConnection
(
HttpConnectionBase
*
)
;
void
OnMsgShutdown
(
int32_t
ARefBase
*
)
;
void
OnMsgShutdownConfirm
(
int32_t
ARefBase
*
)
;
void
OnMsgNewTransaction
(
int32_t
ARefBase
*
)
;
void
OnMsgNewTransactionWithStickyConn
(
int32_t
ARefBase
*
)
;
void
OnMsgReschedTransaction
(
int32_t
ARefBase
*
)
;
void
OnMsgUpdateClassOfServiceOnTransaction
(
int32_t
ARefBase
*
)
;
void
OnMsgCancelTransaction
(
int32_t
ARefBase
*
)
;
void
OnMsgCancelTransactions
(
int32_t
ARefBase
*
)
;
void
OnMsgProcessPendingQ
(
int32_t
ARefBase
*
)
;
void
OnMsgPruneDeadConnections
(
int32_t
ARefBase
*
)
;
void
OnMsgSpeculativeConnect
(
int32_t
ARefBase
*
)
;
void
OnMsgCompleteUpgrade
(
int32_t
ARefBase
*
)
;
void
OnMsgUpdateParam
(
int32_t
ARefBase
*
)
;
void
OnMsgDoShiftReloadConnectionCleanup
(
int32_t
ARefBase
*
)
;
void
OnMsgProcessFeedback
(
int32_t
ARefBase
*
)
;
void
OnMsgProcessAllSpdyPendingQ
(
int32_t
ARefBase
*
)
;
void
OnMsgUpdateRequestTokenBucket
(
int32_t
ARefBase
*
)
;
void
OnMsgVerifyTraffic
(
int32_t
ARefBase
*
)
;
void
OnMsgPruneNoTraffic
(
int32_t
ARefBase
*
)
;
void
OnMsgUpdateCurrentTopLevelOuterContentWindowId
(
int32_t
ARefBase
*
)
;
void
OnMsgClearConnectionHistory
(
int32_t
ARefBase
*
)
;
uint16_t
mNumActiveConns
;
uint16_t
mNumIdleConns
;
uint16_t
mNumSpdyHttp3ActiveConns
;
uint32_t
mNumHalfOpenConns
;
uint64_t
mTimeOfNextWakeUp
;
nsCOMPtr
<
nsITimer
>
mTimer
;
nsCOMPtr
<
nsITimer
>
mTrafficTimer
;
bool
mPruningNoTraffic
;
nsCOMPtr
<
nsITimer
>
mTimeoutTick
;
bool
mTimeoutTickArmed
;
uint32_t
mTimeoutTickNext
;
nsRefPtrHashtable
<
nsCStringHashKey
ConnectionEntry
>
mCT
;
void
TimeoutTick
(
)
;
void
OnMsgPrintDiagnostics
(
int32_t
ARefBase
*
)
;
nsCString
mLogData
;
uint64_t
mCurrentTopLevelOuterContentWindowId
;
void
SetThrottlingEnabled
(
bool
aEnable
)
;
bool
InThrottlingTimeWindow
(
)
;
nsClassHashtable
<
nsUint64HashKey
nsTArray
<
RefPtr
<
nsHttpTransaction
>
>
>
mActiveTransactions
[
2
]
;
bool
mThrottlingInhibitsReading
;
TimeStamp
mThrottlingWindowEndsAt
;
nsCOMPtr
<
nsITimer
>
mThrottleTicker
;
bool
IsThrottleTickerNeeded
(
)
;
void
EnsureThrottleTickerIfNeeded
(
)
;
void
DestroyThrottleTicker
(
)
;
void
ThrottlerTick
(
)
;
nsCOMPtr
<
nsITimer
>
mDelayedResumeReadTimer
;
void
DelayedResumeBackgroundThrottledTransactions
(
)
;
void
CancelDelayedResumeBackgroundThrottledTransactions
(
)
;
void
ResumeBackgroundThrottledTransactions
(
)
;
void
ResumeReadOf
(
nsClassHashtable
<
nsUint64HashKey
nsTArray
<
RefPtr
<
nsHttpTransaction
>
>
>
&
bool
excludeActive
=
false
)
;
void
ResumeReadOf
(
nsTArray
<
RefPtr
<
nsHttpTransaction
>
>
*
)
;
bool
mActiveTabTransactionsExist
;
bool
mActiveTabUnthrottledTransactionsExist
;
void
LogActiveTransactions
(
char
)
;
void
NotifyConnectionOfWindowIdChange
(
uint64_t
previousWindowId
)
;
bool
BeConservativeIfProxied
(
nsIProxyInfo
*
proxy
)
;
}
;
}
}
#
endif
