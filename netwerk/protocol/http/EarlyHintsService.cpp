#
include
"
EarlyHintsService
.
h
"
#
include
"
EarlyHintPreloader
.
h
"
#
include
"
mozilla
/
PreloadHashKey
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsICookieJarSettings
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
net
{
EarlyHintsService
:
:
EarlyHintsService
(
)
:
mOngoingEarlyHints
(
new
OngoingEarlyHints
(
)
)
{
}
EarlyHintsService
:
:
~
EarlyHintsService
(
)
=
default
;
void
EarlyHintsService
:
:
EarlyHint
(
const
nsACString
&
aLinkHeader
nsIURI
*
aBaseURI
nsIChannel
*
aChannel
)
{
mEarlyHintsCount
+
+
;
if
(
!
mFirstEarlyHint
)
{
mFirstEarlyHint
.
emplace
(
TimeStamp
:
:
NowLoRes
(
)
)
;
}
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
if
(
loadInfo
-
>
GetExternalContentPolicyType
(
)
!
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
MOZ_ASSERT
(
false
"
Early
Hint
on
non
-
document
channel
"
)
;
return
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsresult
rv
=
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetChannelResultPrincipal
(
aChannel
getter_AddRefs
(
principal
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
;
if
(
NS_FAILED
(
loadInfo
-
>
GetCookieJarSettings
(
getter_AddRefs
(
cookieJarSettings
)
)
)
)
{
return
;
}
auto
linkHeaders
=
ParseLinkHeader
(
NS_ConvertUTF8toUTF16
(
aLinkHeader
)
)
;
for
(
auto
&
linkHeader
:
linkHeaders
)
{
EarlyHintPreloader
:
:
MaybeCreateAndInsertPreload
(
mOngoingEarlyHints
linkHeader
aBaseURI
principal
cookieJarSettings
)
;
}
}
void
EarlyHintsService
:
:
FinalResponse
(
uint32_t
aResponseStatus
)
{
CollectTelemetry
(
Some
(
aResponseStatus
)
)
;
if
(
aResponseStatus
>
=
300
)
{
mOngoingEarlyHints
-
>
CancelAllOngoingPreloads
(
)
;
mCanceled
=
true
;
}
}
void
EarlyHintsService
:
:
Cancel
(
)
{
if
(
!
mCanceled
)
{
CollectTelemetry
(
Nothing
(
)
)
;
mOngoingEarlyHints
-
>
CancelAllOngoingPreloads
(
)
;
mCanceled
=
true
;
}
}
void
EarlyHintsService
:
:
CollectTelemetry
(
Maybe
<
uint32_t
>
aResponseStatus
)
{
if
(
aResponseStatus
&
&
(
*
aResponseStatus
<
=
299
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
EH_NUM_OF_HINTS_PER_PAGE
mEarlyHintsCount
)
;
}
if
(
mEarlyHintsCount
=
=
0
)
{
return
;
}
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
label
=
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
:
:
Cancel
;
if
(
aResponseStatus
)
{
if
(
*
aResponseStatus
<
=
299
)
{
label
=
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
:
:
R2xx
;
MOZ_ASSERT
(
mFirstEarlyHint
)
;
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
EH_TIME_TO_FINAL_RESPONSE
*
mFirstEarlyHint
TimeStamp
:
:
NowLoRes
(
)
)
;
}
else
if
(
*
aResponseStatus
<
=
399
)
{
label
=
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
:
:
R3xx
;
}
else
if
(
*
aResponseStatus
<
=
499
)
{
label
=
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
:
:
R4xx
;
}
else
{
label
=
Telemetry
:
:
LABELS_EH_FINAL_RESPONSE
:
:
Other
;
}
}
Telemetry
:
:
AccumulateCategorical
(
label
)
;
mEarlyHintsCount
=
0
;
mFirstEarlyHint
=
Nothing
(
)
;
}
}
