#
include
"
nsIChannel
.
idl
"
interface
nsIHttpHeaderVisitor
;
interface
nsIReferrerInfo
;
%
{
C
+
+
#
include
"
GeckoProfiler
.
h
"
%
}
native
UniqueProfileChunkedBuffer
(
mozilla
:
:
UniquePtr
<
mozilla
:
:
ProfileChunkedBuffer
>
)
;
[
builtinclass
scriptable
uuid
(
c5a4a073
-
4539
-
49c7
-
a3f2
-
cec3f0619c6c
)
]
interface
nsIHttpChannel
:
nsIIdentChannel
{
[
must_use
]
attribute
ACString
requestMethod
;
[
must_use
infallible
]
attribute
nsIReferrerInfo
referrerInfo
;
[
must_use
noscript
]
void
setReferrerInfoWithoutClone
(
in
nsIReferrerInfo
aReferrerInfo
)
;
[
must_use
]
readonly
attribute
ACString
protocolVersion
;
[
must_use
]
readonly
attribute
uint64_t
transferSize
;
[
must_use
]
readonly
attribute
uint64_t
requestSize
;
[
must_use
]
readonly
attribute
uint64_t
decodedBodySize
;
[
must_use
]
readonly
attribute
uint64_t
encodedBodySize
;
[
must_use
]
ACString
getRequestHeader
(
in
ACString
aHeader
)
;
[
must_use
]
void
setRequestHeader
(
in
ACString
aHeader
in
ACString
aValue
in
boolean
aMerge
)
;
[
must_use
]
void
setNewReferrerInfo
(
in
ACString
aUrl
in
nsIReferrerInfo_ReferrerPolicyIDL
aPolicy
in
boolean
aSendReferrer
)
;
[
must_use
]
void
setEmptyRequestHeader
(
in
ACString
aHeader
)
;
[
must_use
]
void
visitRequestHeaders
(
in
nsIHttpHeaderVisitor
aVisitor
)
;
[
must_use
]
void
visitNonDefaultRequestHeaders
(
in
nsIHttpHeaderVisitor
aVisitor
)
;
[
must_use
]
bool
ShouldStripRequestBodyHeader
(
in
ACString
aMethod
)
;
[
must_use
]
attribute
boolean
allowSTS
;
[
must_use
]
attribute
unsigned
long
redirectionLimit
;
[
must_use
]
readonly
attribute
unsigned
long
responseStatus
;
[
must_use
]
readonly
attribute
ACString
responseStatusText
;
[
must_use
]
readonly
attribute
boolean
requestSucceeded
;
[
must_use
]
attribute
boolean
isMainDocumentChannel
;
[
must_use
]
ACString
getResponseHeader
(
in
ACString
header
)
;
[
must_use
]
void
setResponseHeader
(
in
ACString
header
in
ACString
value
in
boolean
merge
)
;
[
must_use
]
void
visitResponseHeaders
(
in
nsIHttpHeaderVisitor
aVisitor
)
;
[
must_use
]
void
getOriginalResponseHeader
(
in
ACString
aHeader
in
nsIHttpHeaderVisitor
aVisitor
)
;
[
must_use
]
void
visitOriginalResponseHeaders
(
in
nsIHttpHeaderVisitor
aVisitor
)
;
[
must_use
]
boolean
isNoStoreResponse
(
)
;
[
must_use
]
boolean
isNoCacheResponse
(
)
;
[
must_use
]
boolean
isPrivateResponse
(
)
;
[
must_use
]
void
redirectTo
(
in
nsIURI
aTargetURI
)
;
[
must_use
]
void
upgradeToSecure
(
)
;
[
noscript
must_use
]
attribute
uint64_t
requestContextID
;
[
must_use
]
attribute
uint64_t
topLevelContentWindowId
;
[
must_use
]
attribute
uint64_t
topBrowsingContextId
;
void
logBlockedCORSRequest
(
in
AString
aMessage
in
ACString
aCategory
)
;
void
logMimeTypeMismatch
(
in
ACString
aMessageName
in
boolean
aWarning
in
AString
aURL
in
AString
aContentType
)
;
[
notxpcom
nostdcall
]
void
setSource
(
in
UniqueProfileChunkedBuffer
aSource
)
;
}
;
