#
ifndef
nsHttpConnection_h__
#
define
nsHttpConnection_h__
#
include
"
HttpConnectionBase
.
h
"
#
include
"
nsHttpConnectionInfo
.
h
"
#
include
"
nsHttpResponseHead
.
h
"
#
include
"
nsAHttpTransaction
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
TunnelUtils
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
ARefBase
.
h
"
#
include
"
TimingStruct
.
h
"
#
include
"
HttpTrafficAnalyzer
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsITimer
.
h
"
class
nsISocketTransport
;
class
nsISSLSocketControl
;
namespace
mozilla
{
namespace
net
{
class
nsHttpHandler
;
class
ASpdySession
;
#
define
NS_HTTPCONNECTION_IID
\
{
\
0x1dcc863e
0xdb90
0x4652
{
\
0xa1
0xfe
0x13
0xfe
0xa0
0xb5
0x4e
0x46
\
}
\
}
class
nsHttpConnection
final
:
public
HttpConnectionBase
public
nsAHttpSegmentReader
public
nsAHttpSegmentWriter
public
nsIInputStreamCallback
public
nsIOutputStreamCallback
public
nsITransportEventSink
public
nsIInterfaceRequestor
public
NudgeTunnelCallback
{
private
:
virtual
~
nsHttpConnection
(
)
;
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_HTTPCONNECTION_IID
)
NS_DECL_HTTPCONNECTIONBASE
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSAHTTPSEGMENTREADER
NS_DECL_NSAHTTPSEGMENTWRITER
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIOUTPUTSTREAMCALLBACK
NS_DECL_NSITRANSPORTEVENTSINK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NUDGETUNNELCALLBACK
nsHttpConnection
(
)
;
[
[
nodiscard
]
]
virtual
nsresult
Init
(
nsHttpConnectionInfo
*
info
uint16_t
maxHangTime
nsISocketTransport
*
nsIAsyncInputStream
*
nsIAsyncOutputStream
*
bool
connectedTransport
nsresult
status
nsIInterfaceRequestor
*
PRIntervalTime
)
;
bool
IsKeepAlive
(
)
{
return
(
mUsingSpdyVersion
!
=
SpdyVersion
:
:
NONE
)
|
|
(
mKeepAliveMask
&
&
mKeepAlive
)
;
}
uint32_t
TimeToLive
(
)
;
bool
NeedSpdyTunnel
(
)
{
return
mConnInfo
-
>
UsingHttpsProxy
(
)
&
&
!
mTLSFilter
&
&
mConnInfo
-
>
UsingConnect
(
)
;
}
void
ForcePlainText
(
)
{
mForcePlainText
=
true
;
}
bool
IsUrgentStartPreferred
(
)
const
{
return
mUrgentStartPreferredKnown
&
&
mUrgentStartPreferred
;
}
void
SetUrgentStartPreferred
(
bool
urgent
)
;
void
SetIsReusedAfter
(
uint32_t
afterMilliseconds
)
;
int64_t
MaxBytesRead
(
)
{
return
mMaxBytesRead
;
}
HttpVersion
GetLastHttpResponseVersion
(
)
{
return
mLastHttpResponseVersion
;
}
friend
class
HttpConnectionForceIO
;
[
[
nodiscard
]
]
static
nsresult
ReadFromStream
(
nsIInputStream
*
void
*
const
char
*
uint32_t
uint32_t
uint32_t
*
)
;
void
BeginIdleMonitoring
(
)
;
void
EndIdleMonitoring
(
)
;
bool
UsingSpdy
(
)
override
{
return
(
mUsingSpdyVersion
!
=
SpdyVersion
:
:
NONE
)
;
}
SpdyVersion
GetSpdyVersion
(
)
{
return
mUsingSpdyVersion
;
}
bool
EverUsedSpdy
(
)
{
return
mEverUsedSpdy
;
}
bool
UsingHttp3
(
)
override
{
return
false
;
}
bool
ReportedNPN
(
)
{
return
mReportedSpdy
;
}
uint32_t
ReadTimeoutTick
(
PRIntervalTime
now
)
;
static
void
UpdateTCPKeepalive
(
nsITimer
*
aTimer
void
*
aClosure
)
;
void
ReadTimeoutTick
(
)
;
int64_t
ContentBytesWritten
(
)
{
return
mContentBytesWritten
;
}
[
[
nodiscard
]
]
static
nsresult
MakeConnectString
(
nsAHttpTransaction
*
trans
nsHttpRequestHead
*
request
nsACString
&
result
bool
h2ws
)
;
void
SetupSecondaryTLS
(
nsAHttpTransaction
*
aSpdyConnectTransaction
=
nullptr
)
;
void
SetInSpdyTunnel
(
bool
arg
)
;
void
CheckForTraffic
(
bool
check
)
;
bool
NoTraffic
(
)
{
return
mTrafficStamp
&
&
(
mTrafficCount
=
=
(
mTotalBytesWritten
+
mTotalBytesRead
)
)
;
}
bool
NoClientCertAuth
(
)
const
override
;
bool
CanAcceptWebsocket
(
)
override
;
int64_t
BytesWritten
(
)
override
{
return
mTotalBytesWritten
;
}
nsISocketTransport
*
Transport
(
)
override
{
return
mSocketTransport
;
}
nsresult
GetSelfAddr
(
NetAddr
*
addr
)
override
;
nsresult
GetPeerAddr
(
NetAddr
*
addr
)
override
;
bool
ResolvedByTRR
(
)
override
;
bool
GetEchConfigUsed
(
)
override
;
private
:
enum
TCPKeepaliveConfig
{
kTCPKeepaliveDisabled
=
0
kTCPKeepaliveShortLivedConfig
kTCPKeepaliveLongLivedConfig
}
;
[
[
nodiscard
]
]
nsresult
InitSSLParams
(
bool
connectingToProxy
bool
ProxyStartSSL
)
;
[
[
nodiscard
]
]
nsresult
SetupNPNList
(
nsISSLSocketControl
*
ssl
uint32_t
caps
)
;
[
[
nodiscard
]
]
nsresult
OnTransactionDone
(
nsresult
reason
)
;
[
[
nodiscard
]
]
nsresult
OnSocketWritable
(
)
;
[
[
nodiscard
]
]
nsresult
OnSocketReadable
(
)
;
[
[
nodiscard
]
]
nsresult
SetupProxyConnect
(
)
;
PRIntervalTime
IdleTime
(
)
;
bool
IsAlive
(
)
;
[
[
nodiscard
]
]
bool
EnsureNPNComplete
(
nsresult
&
aOut0RTTWriteHandshakeValue
uint32_t
&
aOut0RTTBytesWritten
)
;
void
SetupSSL
(
)
;
void
StartSpdy
(
nsISSLSocketControl
*
ssl
SpdyVersion
versionLevel
)
;
void
Start0RTTSpdy
(
SpdyVersion
versionLevel
)
;
nsresult
TryTakeSubTransactions
(
nsTArray
<
RefPtr
<
nsAHttpTransaction
>
>
&
list
)
;
nsresult
MoveTransactionsToSpdy
(
nsresult
status
nsTArray
<
RefPtr
<
nsAHttpTransaction
>
>
&
list
)
;
[
[
nodiscard
]
]
nsresult
AddTransaction
(
nsAHttpTransaction
*
int32_t
)
;
[
[
nodiscard
]
]
nsresult
StartShortLivedTCPKeepalives
(
)
;
[
[
nodiscard
]
]
nsresult
StartLongLivedTCPKeepalives
(
)
;
[
[
nodiscard
]
]
nsresult
DisableTCPKeepalives
(
)
;
bool
CheckCanWrite0RTTData
(
)
;
private
:
RefPtr
<
nsAHttpTransaction
>
mTransaction
;
nsCOMPtr
<
nsIAsyncInputStream
>
mSocketIn
;
nsCOMPtr
<
nsIAsyncOutputStream
>
mSocketOut
;
nsresult
mSocketInCondition
;
nsresult
mSocketOutCondition
;
nsCOMPtr
<
nsIInputStream
>
mProxyConnectStream
;
nsCOMPtr
<
nsIInputStream
>
mRequestStream
;
RefPtr
<
TLSFilterTransaction
>
mTLSFilter
;
nsWeakPtr
mWeakTrans
;
RefPtr
<
nsHttpHandler
>
mHttpHandler
;
PRIntervalTime
mLastReadTime
;
PRIntervalTime
mLastWriteTime
;
PRIntervalTime
mMaxHangTime
;
PRIntervalTime
mIdleTimeout
;
PRIntervalTime
mConsiderReusedAfterInterval
;
PRIntervalTime
mConsiderReusedAfterEpoch
;
int64_t
mCurrentBytesRead
;
int64_t
mMaxBytesRead
;
int64_t
mTotalBytesRead
;
int64_t
mContentBytesWritten
;
RefPtr
<
nsIAsyncInputStream
>
mInputOverflow
;
bool
mUrgentStartPreferred
;
bool
mUrgentStartPreferredKnown
;
bool
mConnectedTransport
;
bool
mKeepAlive
;
bool
mKeepAliveMask
;
bool
mDontReuse
;
bool
mIsReused
;
bool
mCompletedProxyConnect
;
bool
mLastTransactionExpectedNoContent
;
bool
mIdleMonitoring
;
bool
mProxyConnectInProgress
;
bool
mInSpdyTunnel
;
bool
mForcePlainText
;
int64_t
mTrafficCount
;
bool
mTrafficStamp
;
uint32_t
mHttp1xTransactionCount
;
uint32_t
mRemainingConnectionUses
;
bool
mNPNComplete
;
bool
mSetupSSLCalled
;
SpdyVersion
mUsingSpdyVersion
;
RefPtr
<
ASpdySession
>
mSpdySession
;
int32_t
mPriority
;
bool
mReportedSpdy
;
bool
mEverUsedSpdy
;
HttpVersion
mLastHttpResponseVersion
;
uint32_t
mDefaultTimeoutFactor
;
bool
mResponseTimeoutEnabled
;
uint32_t
mTCPKeepaliveConfig
;
nsCOMPtr
<
nsITimer
>
mTCPKeepaliveTransitionTimer
;
private
:
static
void
ForceSendIO
(
nsITimer
*
aTimer
void
*
aClosure
)
;
[
[
nodiscard
]
]
nsresult
MaybeForceSendIO
(
)
;
bool
mForceSendPending
;
nsCOMPtr
<
nsITimer
>
mForceSendTimer
;
bool
m0RTTChecked
;
bool
mWaitingFor0RTTResponse
;
int64_t
mContentBytesWritten0RTT
;
bool
mEarlyDataNegotiated
;
nsCString
mEarlyNegotiatedALPN
;
bool
mDid0RTTSpdy
;
nsresult
mErrorBeforeConnect
=
NS_OK
;
nsCOMPtr
<
nsISocketTransport
>
mSocketTransport
;
private
:
bool
mThroughCaptivePortal
;
int64_t
mTotalBytesWritten
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsHttpConnection
NS_HTTPCONNECTION_IID
)
}
}
#
endif
