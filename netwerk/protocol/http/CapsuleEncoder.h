#
ifndef
mozilla_net_capsule_encoder_h
#
define
mozilla_net_capsule_encoder_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
net
/
NeqoHttp3Conn
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
net
/
NeqoHttp3Conn
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
net
{
struct
StreamMetadata
{
uint64_t
mID
{
0
}
;
size_t
mDataSize
{
0
}
;
uint64_t
mStartOfData
{
0
}
;
}
;
class
CapsuleEncoder
final
{
public
:
CapsuleEncoder
(
)
;
~
CapsuleEncoder
(
)
;
void
EncodeCapsule
(
Capsule
&
aCapsule
)
;
mozilla
:
:
Span
<
const
uint8_t
>
GetBuffer
(
)
;
Maybe
<
StreamMetadata
>
&
GetStreamMetadata
(
)
{
return
mStreamMetadata
;
}
private
:
RefPtr
<
NeqoEncoder
>
mEncoder
;
CapsuleEncoder
&
EncodeByte
(
uint8_t
aData
)
;
template
<
typename
T
>
CapsuleEncoder
&
EncodeUint
(
uint32_t
aSize
T
aValue
)
;
template
<
typename
T
>
CapsuleEncoder
&
EncodeVarint
(
T
aValue
)
;
CapsuleEncoder
&
EncodeString
(
const
nsACString
&
aData
)
;
CapsuleEncoder
&
EncodeBuffer
(
nsTArray
<
uint8_t
>
&
aData
)
;
CapsuleEncoder
&
EncodeBufferWithVarintLen
(
nsTArray
<
uint8_t
>
&
aData
)
;
static
size_t
VarintLength
(
uint64_t
aValue
)
;
Maybe
<
StreamMetadata
>
mStreamMetadata
;
}
;
}
#
endif
