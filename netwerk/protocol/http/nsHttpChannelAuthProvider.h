#
ifndef
nsHttpChannelAuthProvider_h__
#
define
nsHttpChannelAuthProvider_h__
#
include
"
nsIHttpChannelAuthProvider
.
h
"
#
include
"
nsIAuthPromptCallback
.
h
"
#
include
"
nsIHttpAuthenticatorCallback
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHttpAuthCache
.
h
"
#
include
"
nsProxyInfo
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsICancelableRunnable
.
h
"
class
nsIHttpAuthenticableChannel
;
class
nsIHttpAuthenticator
;
class
nsIURI
;
namespace
mozilla
{
namespace
net
{
class
nsHttpHandler
;
struct
nsHttpAtom
;
class
nsHttpChannelAuthProvider
final
:
public
nsIHttpChannelAuthProvider
public
nsIAuthPromptCallback
public
nsIHttpAuthenticatorCallback
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSICANCELABLE
NS_DECL_NSIHTTPCHANNELAUTHPROVIDER
NS_DECL_NSIAUTHPROMPTCALLBACK
NS_DECL_NSIHTTPAUTHENTICATORCALLBACK
nsHttpChannelAuthProvider
(
)
;
private
:
virtual
~
nsHttpChannelAuthProvider
(
)
;
const
char
*
ProxyHost
(
)
const
{
return
mProxyInfo
?
mProxyInfo
-
>
Host
(
)
.
get
(
)
:
nullptr
;
}
int32_t
ProxyPort
(
)
const
{
return
mProxyInfo
?
mProxyInfo
-
>
Port
(
)
:
-
1
;
}
const
char
*
Host
(
)
const
{
return
mHost
.
get
(
)
;
}
int32_t
Port
(
)
const
{
return
mPort
;
}
bool
UsingSSL
(
)
const
{
return
mUsingSSL
;
}
bool
UsingHttpProxy
(
)
const
{
return
mProxyInfo
&
&
(
mProxyInfo
-
>
IsHTTP
(
)
|
|
mProxyInfo
-
>
IsHTTPS
(
)
)
;
}
[
[
nodiscard
]
]
nsresult
PrepareForAuthentication
(
bool
proxyAuth
)
;
[
[
nodiscard
]
]
nsresult
GenCredsAndSetEntry
(
nsIHttpAuthenticator
*
bool
proxyAuth
const
char
*
scheme
const
char
*
host
int32_t
port
const
char
*
dir
const
char
*
realm
const
char
*
challenge
const
nsHttpAuthIdentity
&
ident
nsCOMPtr
<
nsISupports
>
&
session
char
*
*
result
)
;
[
[
nodiscard
]
]
nsresult
GetAuthenticator
(
const
char
*
challenge
nsCString
&
scheme
nsIHttpAuthenticator
*
*
auth
)
;
void
ParseRealm
(
const
char
*
challenge
nsACString
&
realm
)
;
void
GetIdentityFromURI
(
uint32_t
authFlags
nsHttpAuthIdentity
&
)
;
[
[
nodiscard
]
]
nsresult
GetCredentials
(
const
char
*
challenges
bool
proxyAuth
nsCString
&
creds
)
;
[
[
nodiscard
]
]
nsresult
GetCredentialsForChallenge
(
const
char
*
challenge
const
char
*
scheme
bool
proxyAuth
nsIHttpAuthenticator
*
auth
nsCString
&
creds
)
;
[
[
nodiscard
]
]
nsresult
PromptForIdentity
(
uint32_t
level
bool
proxyAuth
const
char
*
realm
const
char
*
authType
uint32_t
authFlags
nsHttpAuthIdentity
&
)
;
bool
ConfirmAuth
(
const
char
*
bundleKey
bool
doYesNoPrompt
)
;
void
SetAuthorizationHeader
(
nsHttpAuthCache
*
nsHttpAtom
header
const
char
*
scheme
const
char
*
host
int32_t
port
const
char
*
path
nsHttpAuthIdentity
&
ident
)
;
[
[
nodiscard
]
]
nsresult
GetCurrentPath
(
nsACString
&
)
;
[
[
nodiscard
]
]
nsresult
GetAuthorizationMembers
(
bool
proxyAuth
nsACString
&
scheme
const
char
*
&
host
int32_t
&
port
nsACString
&
path
nsHttpAuthIdentity
*
&
ident
nsISupports
*
*
&
continuationState
)
;
[
[
nodiscard
]
]
nsresult
ContinueOnAuthAvailable
(
const
nsACString
&
creds
)
;
[
[
nodiscard
]
]
nsresult
DoRedirectChannelToHttps
(
)
;
[
[
nodiscard
]
]
nsresult
ProcessSTSHeader
(
)
;
bool
BlockPrompt
(
bool
proxyAuth
)
;
[
[
nodiscard
]
]
nsresult
UpdateCache
(
nsIHttpAuthenticator
*
aAuth
const
char
*
aScheme
const
char
*
aHost
int32_t
aPort
const
char
*
aDirectory
const
char
*
aRealm
const
char
*
aChallenge
const
nsHttpAuthIdentity
&
aIdent
const
char
*
aCreds
uint32_t
aGenerateFlags
nsISupports
*
aSessionState
bool
aProxyAuth
)
;
private
:
nsIHttpAuthenticableChannel
*
mAuthChannel
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsProxyInfo
>
mProxyInfo
;
nsCString
mHost
;
int32_t
mPort
;
bool
mUsingSSL
;
bool
mProxyUsingSSL
;
bool
mIsPrivate
;
nsISupports
*
mProxyAuthContinuationState
;
nsCString
mProxyAuthType
;
nsISupports
*
mAuthContinuationState
;
nsCString
mAuthType
;
nsHttpAuthIdentity
mIdent
;
nsHttpAuthIdentity
mProxyIdent
;
nsCOMPtr
<
nsICancelable
>
mAsyncPromptAuthCancelable
;
nsCString
mCurrentChallenge
;
nsCString
mRemainingChallenges
;
uint32_t
mProxyAuth
:
1
;
uint32_t
mTriedProxyAuth
:
1
;
uint32_t
mTriedHostAuth
:
1
;
uint32_t
mSuppressDefensiveAuth
:
1
;
uint32_t
mCrossOrigin
:
1
;
uint32_t
mConnectionBased
:
1
;
RefPtr
<
nsHttpHandler
>
mHttpHandler
;
nsCOMPtr
<
nsICancelable
>
mGenerateCredentialsCancelable
;
}
;
}
}
#
endif
