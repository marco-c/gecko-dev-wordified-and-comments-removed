#
ifndef
mozilla_net_Http3Stream_h
#
define
mozilla_net_Http3Stream_h
#
include
"
nsAHttpTransaction
.
h
"
#
include
"
ARefBase
.
h
"
namespace
mozilla
{
namespace
net
{
class
Http3Session
;
class
Http3Stream
final
:
public
nsAHttpSegmentReader
public
nsAHttpSegmentWriter
public
ARefBase
{
public
:
NS_DECL_NSAHTTPSEGMENTREADER
NS_DECL_NSAHTTPSEGMENTWRITER
NS_INLINE_DECL_REFCOUNTING
(
Http3Stream
override
)
Http3Stream
(
nsAHttpTransaction
*
httpTransaction
Http3Session
*
session
)
;
bool
HasStreamId
(
)
const
{
return
mStreamId
!
=
UINT64_MAX
;
}
uint64_t
StreamId
(
)
const
{
return
mStreamId
;
}
nsresult
TryActivating
(
)
;
void
TopLevelOuterContentWindowIdChanged
(
uint64_t
windowId
)
{
}
;
MOZ_MUST_USE
nsresult
ReadSegments
(
nsAHttpSegmentReader
*
uint32_t
uint32_t
*
)
;
MOZ_MUST_USE
nsresult
WriteSegments
(
nsAHttpSegmentWriter
*
uint32_t
uint32_t
*
)
;
bool
RequestBlockedOnRead
(
)
const
{
return
mRequestBlockedOnRead
;
}
void
SetQueued
(
bool
aStatus
)
{
mQueued
=
aStatus
;
}
bool
Queued
(
)
const
{
return
mQueued
;
}
bool
Done
(
)
const
{
return
mState
=
=
DONE
;
}
void
Close
(
nsresult
aResult
)
;
bool
RecvdData
(
)
const
{
return
mDataReceived
;
}
nsAHttpTransaction
*
Transaction
(
)
{
return
mTransaction
;
}
bool
RecvdFin
(
)
const
{
return
mState
=
=
RECEIVED_FIN
;
}
bool
RecvdReset
(
)
const
{
return
mState
=
=
RECEIVED_RESET
;
}
void
SetRecvdReset
(
)
{
mState
=
RECEIVED_RESET
;
}
private
:
~
Http3Stream
(
)
=
default
;
void
GetHeadersString
(
const
char
*
buf
uint32_t
avail
uint32_t
*
countUsed
)
;
nsresult
StartRequest
(
)
;
void
FindRequestContentLength
(
)
;
enum
StreamState
{
PREPARING_HEADERS
SENDING_BODY
EARLY_RESPONSE
READING_HEADERS
READING_DATA
RECEIVED_FIN
RECEIVED_RESET
DONE
}
mState
;
uint64_t
mStreamId
;
Http3Session
*
mSession
;
RefPtr
<
nsAHttpTransaction
>
mTransaction
;
nsCString
mFlatHttpRequestHeaders
;
bool
mRequestHeadersDone
;
bool
mRequestStarted
;
bool
mQueued
;
bool
mRequestBlockedOnRead
;
bool
mDataReceived
;
nsTArray
<
uint8_t
>
mFlatResponseHeaders
;
uint32_t
mRequestBodyLenRemaining
;
RefPtr
<
nsISocketTransport
>
mSocketTransport
;
uint64_t
mTotalSent
;
uint64_t
mTotalRead
;
bool
mFin
;
}
;
}
}
#
endif
