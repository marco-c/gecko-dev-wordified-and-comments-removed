#
ifndef
mozilla_net_Http3Stream_h
#
define
mozilla_net_Http3Stream_h
#
include
"
nsAHttpTransaction
.
h
"
#
include
"
ARefBase
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
net
{
class
Http3Session
;
class
Http3Stream
final
:
public
nsAHttpSegmentReader
public
nsAHttpSegmentWriter
public
SupportsWeakPtr
public
ARefBase
{
public
:
NS_DECL_NSAHTTPSEGMENTREADER
NS_DECL_NSAHTTPSEGMENTWRITER
NS_INLINE_DECL_REFCOUNTING
(
Http3Stream
override
)
Http3Stream
(
nsAHttpTransaction
*
httpTransaction
Http3Session
*
session
)
;
bool
HasStreamId
(
)
const
{
return
mStreamId
!
=
UINT64_MAX
;
}
uint64_t
StreamId
(
)
const
{
return
mStreamId
;
}
nsresult
TryActivating
(
)
;
void
TopLevelOuterContentWindowIdChanged
(
uint64_t
windowId
)
{
}
;
[
[
nodiscard
]
]
nsresult
ReadSegments
(
nsAHttpSegmentReader
*
)
;
[
[
nodiscard
]
]
nsresult
WriteSegments
(
nsAHttpSegmentWriter
*
uint32_t
uint32_t
*
)
;
void
SetQueued
(
bool
aStatus
)
{
mQueued
=
aStatus
;
}
bool
Queued
(
)
const
{
return
mQueued
;
}
bool
Done
(
)
const
{
return
mRecvState
=
=
RECV_DONE
;
}
void
Close
(
nsresult
aResult
)
;
bool
RecvdData
(
)
const
{
return
mDataReceived
;
}
nsAHttpTransaction
*
Transaction
(
)
{
return
mTransaction
;
}
bool
RecvdFin
(
)
const
{
return
mFin
;
}
bool
RecvdReset
(
)
const
{
return
mResetRecv
;
}
void
SetRecvdReset
(
)
{
mResetRecv
=
true
;
}
void
StopSending
(
)
;
void
SetResponseHeaders
(
nsTArray
<
uint8_t
>
&
aResponseHeaders
bool
fin
)
;
bool
Do0RTT
(
)
;
nsresult
Finish0RTT
(
bool
aRestart
)
;
private
:
~
Http3Stream
(
)
=
default
;
bool
GetHeadersString
(
const
char
*
buf
uint32_t
avail
uint32_t
*
countUsed
)
;
nsresult
StartRequest
(
)
;
void
FindRequestContentLength
(
)
;
enum
SendStreamState
{
PREPARING_HEADERS
WAITING_TO_ACTIVATE
SENDING_BODY
EARLY_RESPONSE
SEND_DONE
}
mSendState
;
enum
RecvStreamState
{
BEFORE_HEADERS
READING_HEADERS
READING_DATA
RECEIVED_FIN
RECV_DONE
}
mRecvState
;
uint64_t
mStreamId
;
Http3Session
*
mSession
;
RefPtr
<
nsAHttpTransaction
>
mTransaction
;
nsCString
mFlatHttpRequestHeaders
;
bool
mQueued
;
bool
mDataReceived
;
bool
mResetRecv
;
nsTArray
<
uint8_t
>
mFlatResponseHeaders
;
uint32_t
mRequestBodyLenRemaining
;
uint64_t
mTotalSent
;
uint64_t
mTotalRead
;
bool
mFin
;
bool
mAttempting0RTT
=
false
;
uint32_t
mSendingBlockedByFlowControlCount
=
0
;
nsresult
mSocketInCondition
=
NS_ERROR_NOT_INITIALIZED
;
nsresult
mSocketOutCondition
=
NS_ERROR_NOT_INITIALIZED
;
}
;
}
}
#
endif
