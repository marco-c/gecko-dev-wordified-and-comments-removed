#
ifndef
HSTSPrimingListener_h__
#
define
HSTSPrimingListener_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIPrincipal
;
class
nsINetworkInterceptController
;
class
nsIHstsPrimingCallback
;
namespace
mozilla
{
namespace
net
{
class
HttpChannelParent
;
class
nsHttpChannel
;
enum
HSTSPrimingRequest
{
eHSTS_PRIMING_NO_REQUEST
=
0
eHSTS_PRIMING_REQUEST_SENT
=
1
eHSTS_PRIMING_REQUEST_CACHED_HSTS
=
2
eHSTS_PRIMING_REQUEST_CACHED_NO_HSTS
=
3
eHSTS_PRIMING_REQUEST_ERROR
=
4
eHSTS_PRIMING_REQUEST_NO_LOAD_INFO
=
5
eHSTS_PRIMING_REQUEST_ALREADY_UPGRADED
=
6
}
;
enum
HSTSPrimingResult
{
eHSTS_PRIMING_CACHED_NO_UPGRADE
=
0
eHSTS_PRIMING_CACHED_DO_UPGRADE
=
1
eHSTS_PRIMING_CACHED_BLOCK
=
2
eHSTS_PRIMING_ALREADY_UPGRADED
=
3
eHSTS_PRIMING_SUCCEEDED
=
4
eHSTS_PRIMING_SUCCEEDED_BLOCK
=
5
eHSTS_PRIMING_SUCCEEDED_HTTP
=
6
eHSTS_PRIMING_FAILED_BLOCK
=
7
eHSTS_PRIMING_FAILED_ACCEPT
=
8
eHSTS_PRIMING_TIMEOUT_BLOCK
=
9
eHSTS_PRIMING_TIMEOUT_ACCEPT
=
10
}
;
class
HSTSPrimingListener
final
:
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsITimerCallback
{
public
:
explicit
HSTSPrimingListener
(
nsIHstsPrimingCallback
*
aCallback
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSITIMERCALLBACK
private
:
~
HSTSPrimingListener
(
)
{
}
friend
class
mozilla
:
:
net
:
:
nsHttpChannel
;
static
nsresult
StartHSTSPriming
(
nsIChannel
*
aRequestChannel
nsIHstsPrimingCallback
*
aCallback
)
;
nsresult
CheckHSTSPrimingRequestStatus
(
nsIRequest
*
aRequest
)
;
void
ReportTiming
(
nsIHstsPrimingCallback
*
aCallback
nsresult
aResult
)
;
nsCOMPtr
<
nsIHstsPrimingCallback
>
mCallback
;
nsCOMPtr
<
nsIChannel
>
mPrimingChannel
;
nsCOMPtr
<
nsITimer
>
mHSTSPrimingTimer
;
static
uint32_t
sHSTSPrimingTimeout
;
}
;
}
}
#
endif
