#
include
"
WebTransportFlowControl
.
h
"
namespace
mozilla
:
:
net
{
Maybe
<
CapsuleEncoder
>
SenderFlowControlStreamType
:
:
CreateStreamsBlockedCapsule
(
)
{
auto
blockedNeeded
=
BlockedNeeded
(
)
;
if
(
!
blockedNeeded
)
{
return
Nothing
(
)
;
}
Capsule
capsule
=
Capsule
:
:
WebTransportStreamsBlocked
(
*
blockedNeeded
mType
=
=
WebTransportStreamType
:
:
BiDi
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
BlockedSent
(
)
;
return
Some
(
encoder
)
;
}
Maybe
<
CapsuleEncoder
>
SenderFlowControlStreamId
:
:
CreateStreamDataBlockedCapsule
(
)
{
auto
blockedNeeded
=
BlockedNeeded
(
)
;
if
(
!
blockedNeeded
)
{
return
Nothing
(
)
;
}
Capsule
capsule
=
Capsule
:
:
WebTransportStreamDataBlocked
(
*
blockedNeeded
mId
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
BlockedSent
(
)
;
return
Some
(
encoder
)
;
}
Maybe
<
CapsuleEncoder
>
SenderFlowControlSession
:
:
CreateSessionDataBlockedCapsule
(
)
{
auto
blockedNeeded
=
BlockedNeeded
(
)
;
if
(
!
blockedNeeded
)
{
return
Nothing
(
)
;
}
Capsule
capsule
=
Capsule
:
:
WebTransportDataBlocked
(
*
blockedNeeded
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
BlockedSent
(
)
;
return
Some
(
encoder
)
;
}
Maybe
<
CapsuleEncoder
>
ReceiverFlowControlStreamType
:
:
CreateMaxStreamsCapsule
(
)
{
if
(
!
CapsuleNeeded
(
)
)
{
return
Nothing
(
)
;
}
uint64_t
maxStreams
=
NextLimit
(
)
;
Capsule
capsule
=
Capsule
:
:
WebTransportMaxStreams
(
maxStreams
mType
=
=
WebTransportStreamType
:
:
BiDi
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
CapsuleSent
(
maxStreams
)
;
return
Some
(
encoder
)
;
}
Maybe
<
CapsuleEncoder
>
ReceiverFlowControlStreamId
:
:
CreateMaxStreamDataCapsule
(
)
{
if
(
!
CapsuleNeeded
(
)
)
{
return
Nothing
(
)
;
}
uint64_t
maxAllowed
=
NextLimit
(
)
;
Capsule
capsule
=
Capsule
:
:
WebTransportMaxStreamData
(
maxAllowed
mId
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
CapsuleSent
(
maxAllowed
)
;
return
Some
(
encoder
)
;
}
Maybe
<
CapsuleEncoder
>
ReceiverFlowControlSession
:
:
CreateMaxDataCapsule
(
)
{
if
(
!
CapsuleNeeded
(
)
)
{
return
Nothing
(
)
;
}
uint64_t
maxAllowed
=
NextLimit
(
)
;
Capsule
capsule
=
Capsule
:
:
WebTransportMaxData
(
maxAllowed
)
;
CapsuleEncoder
encoder
;
encoder
.
EncodeCapsule
(
capsule
)
;
CapsuleSent
(
maxAllowed
)
;
return
Some
(
encoder
)
;
}
}
