#
ifndef
PendingTransactionQueue_h__
#
define
PendingTransactionQueue_h__
namespace
mozilla
{
namespace
net
{
class
PendingTransactionQueue
{
public
:
PendingTransactionQueue
(
)
=
default
;
void
ReschedTransaction
(
nsHttpTransaction
*
aTrans
)
;
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
*
GetTransactionPendingQHelper
(
nsAHttpTransaction
*
trans
)
;
void
InsertTransactionSorted
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
pendingQ
PendingTransactionInfo
*
pendingTransInfo
bool
aInsertAsFirstForTheSamePriority
=
false
)
;
void
InsertTransaction
(
PendingTransactionInfo
*
pendingTransInfo
bool
aInsertAsFirstForTheSamePriority
=
false
)
;
void
AppendPendingUrgentStartQ
(
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
)
;
void
AppendPendingQForFocusedWindow
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
=
0
)
;
void
AppendPendingQForNonFocusedWindows
(
uint64_t
windowId
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
&
result
uint32_t
maxCount
=
0
)
;
size_t
PendingQueueLength
(
)
const
;
size_t
PendingQueueLengthForWindow
(
uint64_t
windowId
)
const
;
void
RemoveEmptyPendingQ
(
)
;
void
PrintDiagnostics
(
nsCString
&
log
)
;
size_t
UrgentStartQueueLength
(
)
;
void
PrintPendingQ
(
)
;
void
Compact
(
)
;
void
CancelAllTransactions
(
nsresult
reason
)
;
~
PendingTransactionQueue
(
)
=
default
;
private
:
void
InsertTransactionNormal
(
PendingTransactionInfo
*
info
bool
aInsertAsFirstForTheSamePriority
=
false
)
;
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
mUrgentStartQ
;
nsClassHashtable
<
nsUint64HashKey
nsTArray
<
RefPtr
<
PendingTransactionInfo
>
>
>
mPendingTransactionTable
;
}
;
}
}
#
endif
