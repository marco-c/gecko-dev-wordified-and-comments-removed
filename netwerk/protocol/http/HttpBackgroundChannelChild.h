#
ifndef
mozilla_net_HttpBackgroundChannelChild_h
#
define
mozilla_net_HttpBackgroundChannelChild_h
#
include
"
mozilla
/
net
/
PHttpBackgroundChannelChild
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsTArray
.
h
"
using
mozilla
:
:
dom
:
:
ClassifierInfo
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
namespace
mozilla
{
namespace
net
{
class
HttpChannelChild
;
class
HttpBackgroundChannelChild
final
:
public
PHttpBackgroundChannelChild
{
friend
class
BackgroundChannelCreateCallback
;
friend
class
PHttpBackgroundChannelChild
;
public
:
explicit
HttpBackgroundChannelChild
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
HttpBackgroundChannelChild
)
nsresult
Init
(
HttpChannelChild
*
aChannelChild
)
;
void
OnChannelClosed
(
)
;
void
OnStartRequestReceived
(
)
;
protected
:
IPCResult
RecvOnTransportAndData
(
const
nsresult
&
aChannelStatus
const
nsresult
&
aTransportStatus
const
uint64_t
&
aOffset
const
uint32_t
&
aCount
const
nsCString
&
aData
)
;
IPCResult
RecvOnStopRequest
(
const
nsresult
&
aChannelStatus
const
ResourceTimingStruct
&
aTiming
const
TimeStamp
&
aLastActiveTabOptHit
const
nsHttpHeaderArray
&
aResponseTrailers
)
;
IPCResult
RecvOnProgress
(
const
int64_t
&
aProgress
const
int64_t
&
aProgressMax
)
;
IPCResult
RecvOnStatus
(
const
nsresult
&
aStatus
)
;
IPCResult
RecvFlushedForDiversion
(
)
;
IPCResult
RecvDivertMessages
(
)
;
IPCResult
RecvOnStartRequestSent
(
)
;
IPCResult
RecvNotifyChannelClassifierProtectionDisabled
(
const
uint32_t
&
aAcceptedReason
)
;
IPCResult
RecvNotifyCookieAllowed
(
)
;
IPCResult
RecvNotifyCookieBlocked
(
const
uint32_t
&
aRejectedReason
)
;
IPCResult
RecvNotifyTrackingResource
(
const
bool
&
aIsThirdParty
)
;
IPCResult
RecvNotifyFlashPluginStateChanged
(
const
nsIHttpChannel
:
:
FlashPluginState
&
aState
)
;
IPCResult
RecvSetClassifierMatchedInfo
(
const
ClassifierInfo
&
info
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
virtual
~
HttpBackgroundChannelChild
(
)
;
bool
CreateBackgroundChannel
(
)
;
bool
IsWaitingOnStartRequest
(
)
;
RefPtr
<
HttpChannelChild
>
mChannelChild
;
bool
mStartReceived
=
false
;
bool
mStartSent
=
false
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mQueuedRunnables
;
}
;
}
}
#
endif
