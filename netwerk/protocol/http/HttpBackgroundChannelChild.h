#
ifndef
mozilla_net_HttpBackgroundChannelChild_h
#
define
mozilla_net_HttpBackgroundChannelChild_h
#
include
"
mozilla
/
net
/
PHttpBackgroundChannelChild
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsTArray
.
h
"
using
mozilla
:
:
ipc
:
:
IPCResult
;
namespace
mozilla
{
namespace
net
{
class
BackgroundDataBridgeChild
;
class
HttpChannelChild
;
class
HttpBackgroundChannelChild
final
:
public
PHttpBackgroundChannelChild
{
friend
class
BackgroundChannelCreateCallback
;
friend
class
PHttpBackgroundChannelChild
;
friend
class
HttpChannelChild
;
friend
class
BackgroundDataBridgeChild
;
public
:
explicit
HttpBackgroundChannelChild
(
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
HttpBackgroundChannelChild
final
)
nsresult
Init
(
HttpChannelChild
*
aChannelChild
)
;
void
OnChannelClosed
(
)
;
bool
ChannelClosed
(
)
;
void
OnStartRequestReceived
(
Maybe
<
uint32_t
>
aMultiPartID
)
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
IsQueueEmpty
(
)
const
{
return
mQueuedRunnables
.
IsEmpty
(
)
;
}
#
endif
protected
:
IPCResult
RecvOnStartRequest
(
const
nsHttpResponseHead
&
aResponseHead
const
bool
&
aUseResponseHead
const
nsHttpHeaderArray
&
aRequestHeaders
const
HttpChannelOnStartRequestArgs
&
aArgs
)
;
IPCResult
RecvOnTransportAndData
(
const
nsresult
&
aChannelStatus
const
nsresult
&
aTransportStatus
const
uint64_t
&
aOffset
const
uint32_t
&
aCount
const
nsCString
&
aData
const
bool
&
aDataFromSocketProcess
)
;
IPCResult
RecvOnStopRequest
(
const
nsresult
&
aChannelStatus
const
ResourceTimingStructArgs
&
aTiming
const
TimeStamp
&
aLastActiveTabOptHit
const
nsHttpHeaderArray
&
aResponseTrailers
const
nsTArray
<
ConsoleReportCollected
>
&
aConsoleReports
)
;
IPCResult
RecvFlushedForDiversion
(
)
;
IPCResult
RecvDivertMessages
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
CreateDataBridge
(
)
;
private
:
virtual
~
HttpBackgroundChannelChild
(
)
;
bool
CreateBackgroundChannel
(
)
;
bool
IsWaitingOnStartRequest
(
)
;
RefPtr
<
HttpChannelChild
>
mChannelChild
;
bool
mStartReceived
=
false
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mQueuedRunnables
;
}
;
}
}
#
endif
