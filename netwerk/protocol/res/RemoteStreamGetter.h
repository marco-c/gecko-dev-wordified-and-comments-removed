#
ifndef
RemoteStreamGetter_h___
#
define
RemoteStreamGetter_h___
#
include
"
nsIChannel
.
h
"
#
include
"
nsIInputStreamPump
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsICancelable
.
h
"
#
include
"
SimpleChannel
.
h
"
#
include
"
mozilla
/
net
/
NeckoChannelParams
.
h
"
#
include
"
mozilla
/
net
/
NeckoChild
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
class
nsILoadInfo
;
namespace
mozilla
{
namespace
net
{
using
RemoteStreamPromise
=
mozilla
:
:
MozPromise
<
RemoteStreamInfo
nsresult
false
>
;
using
Method
=
RefPtr
<
MozPromise
<
Maybe
<
RemoteStreamInfo
>
ipc
:
:
ResponseRejectReason
true
>
>
(
PNeckoChild
:
:
*
)
(
nsIURI
*
const
Maybe
<
LoadInfoArgs
>
&
)
;
class
RemoteStreamGetter
final
:
public
nsICancelable
{
NS_DECL_ISUPPORTS
NS_DECL_NSICANCELABLE
public
:
RemoteStreamGetter
(
nsIURI
*
aURI
nsILoadInfo
*
aLoadInfo
)
;
RequestOrReason
GetAsync
(
nsIStreamListener
*
aListener
nsIChannel
*
aChannel
Method
aMethod
)
;
void
OnStream
(
const
Maybe
<
RemoteStreamInfo
>
&
aStreamInfo
)
;
static
void
CancelRequest
(
nsIStreamListener
*
aListener
nsIChannel
*
aChannel
nsresult
aResult
)
;
private
:
~
RemoteStreamGetter
(
)
=
default
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsILoadInfo
>
mLoadInfo
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIInputStreamPump
>
mPump
;
bool
mCanceled
{
false
}
;
nsresult
mStatus
{
NS_OK
}
;
}
;
}
}
#
endif
