#
ifndef
SubstitutingURL_h
#
define
SubstitutingURL_h
#
include
"
nsStandardURL
.
h
"
class
nsIIOService
;
namespace
mozilla
{
namespace
net
{
class
SubstitutingURL
:
public
nsStandardURL
{
public
:
virtual
nsStandardURL
*
StartClone
(
)
override
;
[
[
nodiscard
]
]
virtual
nsresult
EnsureFile
(
)
override
;
NS_IMETHOD
GetClassIDNoAlloc
(
nsCID
*
aCID
)
override
;
private
:
explicit
SubstitutingURL
(
)
:
nsStandardURL
(
true
)
{
}
explicit
SubstitutingURL
(
bool
aSupportsFileURL
)
:
nsStandardURL
(
true
)
{
MOZ_ASSERT
(
aSupportsFileURL
)
;
}
virtual
nsresult
Clone
(
nsIURI
*
*
aURI
)
override
{
return
nsStandardURL
:
:
Clone
(
aURI
)
;
}
public
:
class
Mutator
:
public
TemplatedMutator
<
SubstitutingURL
>
{
NS_DECL_ISUPPORTS
public
:
explicit
Mutator
(
)
=
default
;
private
:
virtual
~
Mutator
(
)
=
default
;
SubstitutingURL
*
Create
(
)
override
{
return
new
SubstitutingURL
(
)
;
}
}
;
NS_IMETHOD
Mutate
(
nsIURIMutator
*
*
aMutator
)
override
{
RefPtr
<
SubstitutingURL
:
:
Mutator
>
mutator
=
new
SubstitutingURL
:
:
Mutator
(
)
;
nsresult
rv
=
mutator
-
>
InitFromURI
(
this
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
mutator
.
forget
(
aMutator
)
;
return
NS_OK
;
}
NS_IMETHOD_
(
void
)
Serialize
(
ipc
:
:
URIParams
&
aParams
)
override
;
friend
BaseURIMutator
<
SubstitutingURL
>
;
friend
TemplatedMutator
<
SubstitutingURL
>
;
}
;
}
}
#
endif
