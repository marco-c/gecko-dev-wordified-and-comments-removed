#
include
"
nsDataChannel
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
nsIOService
.
h
"
#
include
"
nsDataHandler
.
h
"
#
include
"
nsIPipe
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsEscape
.
h
"
using
namespace
mozilla
;
const
nsACString
&
Unescape
(
const
nsACString
&
aStr
nsACString
&
aBuffer
nsresult
*
rv
)
{
MOZ_ASSERT
(
rv
)
;
bool
appended
=
false
;
*
rv
=
NS_UnescapeURL
(
aStr
.
Data
(
)
aStr
.
Length
(
)
0
aBuffer
appended
mozilla
:
:
fallible
)
;
if
(
NS_FAILED
(
*
rv
)
|
|
!
appended
)
{
return
aStr
;
}
return
aBuffer
;
}
nsresult
nsDataChannel
:
:
OpenContentStream
(
bool
async
nsIInputStream
*
*
result
nsIChannel
*
*
channel
)
{
NS_ENSURE_TRUE
(
URI
(
)
NS_ERROR_NOT_INITIALIZED
)
;
nsresult
rv
;
nsCOMPtr
<
nsIURI
>
uri
;
rv
=
NS_GetURIWithoutRef
(
URI
(
)
getter_AddRefs
(
uri
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsAutoCString
path
;
rv
=
uri
-
>
GetPathQueryRef
(
path
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsCString
contentType
contentCharset
;
nsDependentCSubstring
dataRange
;
bool
lBase64
;
rv
=
nsDataHandler
:
:
ParsePathWithoutRef
(
path
contentType
&
contentCharset
lBase64
&
dataRange
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsAutoCString
unescapedBuffer
;
const
nsACString
&
data
=
Unescape
(
dataRange
unescapedBuffer
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
lBase64
&
&
&
data
=
=
&
unescapedBuffer
)
{
unescapedBuffer
.
StripWhitespace
(
)
;
}
nsCOMPtr
<
nsIInputStream
>
bufInStream
;
nsCOMPtr
<
nsIOutputStream
>
bufOutStream
;
rv
=
NS_NewPipe
(
getter_AddRefs
(
bufInStream
)
getter_AddRefs
(
bufOutStream
)
net
:
:
nsIOService
:
:
gDefaultSegmentSize
UINT32_MAX
async
true
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
uint32_t
contentLen
;
if
(
lBase64
)
{
nsAutoCString
decodedData
;
rv
=
Base64Decode
(
data
decodedData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
bufOutStream
-
>
Write
(
decodedData
.
get
(
)
decodedData
.
Length
(
)
&
contentLen
)
;
}
else
{
rv
=
bufOutStream
-
>
Write
(
data
.
Data
(
)
data
.
Length
(
)
&
contentLen
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
SetContentType
(
contentType
)
;
SetContentCharset
(
contentCharset
)
;
mContentLength
=
contentLen
;
bufInStream
.
forget
(
result
)
;
return
NS_OK
;
}
