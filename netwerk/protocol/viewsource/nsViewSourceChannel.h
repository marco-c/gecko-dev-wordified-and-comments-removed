#
ifndef
nsViewSourceChannel_h___
#
define
nsViewSourceChannel_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
net
/
NeckoChannelParams
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIApplicationCacheChannel
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsICrossProcessSwitchChannel
.
h
"
#
include
"
nsIFormPOSTActionChannel
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIViewSourceChannel
.
h
"
#
include
"
nsString
.
h
"
class
nsViewSourceChannel
final
:
public
nsIViewSourceChannel
public
nsIStreamListener
public
nsIHttpChannel
public
nsIHttpChannelInternal
public
nsICachingChannel
public
nsIApplicationCacheChannel
public
nsIFormPOSTActionChannel
public
nsIProcessSwitchRequestor
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUEST
NS_DECL_NSICHANNEL
NS_DECL_NSIIDENTCHANNEL
NS_DECL_NSIVIEWSOURCECHANNEL
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSIHTTPCHANNEL
NS_DECL_NSIPROCESSSWITCHREQUESTOR
NS_FORWARD_SAFE_NSICACHEINFOCHANNEL
(
mCacheInfoChannel
)
NS_FORWARD_SAFE_NSICACHINGCHANNEL
(
mCachingChannel
)
NS_FORWARD_SAFE_NSIAPPLICATIONCACHECHANNEL
(
mApplicationCacheChannel
)
NS_FORWARD_SAFE_NSIAPPLICATIONCACHECONTAINER
(
mApplicationCacheChannel
)
NS_FORWARD_SAFE_NSIUPLOADCHANNEL
(
mUploadChannel
)
NS_FORWARD_SAFE_NSIFORMPOSTACTIONCHANNEL
(
mPostChannel
)
NS_FORWARD_SAFE_NSIHTTPCHANNELINTERNAL
(
mHttpChannelInternal
)
nsViewSourceChannel
(
)
:
mIsDocument
(
false
)
mOpened
(
false
)
mIsSrcdocChannel
(
false
)
{
}
MOZ_MUST_USE
nsresult
Init
(
nsIURI
*
uri
nsILoadInfo
*
aLoadInfo
)
;
MOZ_MUST_USE
nsresult
InitSrcdoc
(
nsIURI
*
aURI
nsIURI
*
aBaseURI
const
nsAString
&
aSrcdoc
nsILoadInfo
*
aLoadInfo
)
;
nsresult
UpdateLoadInfoResultPrincipalURI
(
)
;
protected
:
~
nsViewSourceChannel
(
)
=
default
;
nsTArray
<
mozilla
:
:
net
:
:
PreferredAlternativeDataTypeParams
>
mEmptyArray
;
nsresult
BuildViewSourceURI
(
nsIURI
*
aURI
nsIURI
*
*
aResult
)
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIHttpChannel
>
mHttpChannel
;
nsCOMPtr
<
nsIHttpChannelInternal
>
mHttpChannelInternal
;
nsCOMPtr
<
nsICachingChannel
>
mCachingChannel
;
nsCOMPtr
<
nsICacheInfoChannel
>
mCacheInfoChannel
;
nsCOMPtr
<
nsIApplicationCacheChannel
>
mApplicationCacheChannel
;
nsCOMPtr
<
nsIUploadChannel
>
mUploadChannel
;
nsCOMPtr
<
nsIFormPOSTActionChannel
>
mPostChannel
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
nsCString
mContentType
;
bool
mIsDocument
;
bool
mOpened
;
bool
mIsSrcdocChannel
;
private
:
bool
IsNsHttpChannel
(
)
const
;
}
;
#
endif
