#
ifndef
mozilla_net_FTPChannelParent_h
#
define
mozilla_net_FTPChannelParent_h
#
include
"
ADivertableParentChannel
.
h
"
#
include
"
mozilla
/
net
/
PFTPChannelParent
.
h
"
#
include
"
mozilla
/
net
/
NeckoParent
.
h
"
#
include
"
nsIParentChannel
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIFTPChannelParentInternal
.
h
"
class
nsILoadContext
;
namespace
mozilla
{
namespace
dom
{
class
BrowserParent
;
}
namespace
net
{
class
ChannelEventQueue
;
class
FTPChannelParent
final
:
public
PFTPChannelParent
public
nsIParentChannel
public
nsIInterfaceRequestor
public
ADivertableParentChannel
public
nsIChannelEventSink
public
nsIFTPChannelParentInternal
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIPARENTCHANNEL
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICHANNELEVENTSINK
FTPChannelParent
(
dom
:
:
BrowserParent
*
aIframeEmbedding
nsILoadContext
*
aLoadContext
PBOverrideStatus
aOverrideStatus
)
;
bool
Init
(
const
FTPChannelCreationArgs
&
aOpenArgs
)
;
void
DivertTo
(
nsIStreamListener
*
aListener
)
override
;
nsresult
SuspendForDiversion
(
)
override
;
nsresult
SuspendMessageDiversion
(
)
override
;
nsresult
ResumeMessageDiversion
(
)
override
;
nsresult
CancelDiversion
(
)
override
;
void
StartDiversion
(
)
;
void
NotifyDiversionFailed
(
nsresult
aErrorCode
)
;
NS_IMETHOD
SetErrorMsg
(
const
char
*
aMsg
bool
aUseUTF8
)
override
;
protected
:
virtual
~
FTPChannelParent
(
)
;
nsresult
ResumeForDiversion
(
)
;
void
FailDiversion
(
nsresult
aErrorCode
)
;
bool
DoAsyncOpen
(
const
URIParams
&
aURI
const
uint64_t
&
aStartPos
const
nsCString
&
aEntityID
const
Maybe
<
IPCStream
>
&
aUploadStream
const
Maybe
<
LoadInfoArgs
>
&
aLoadInfoArgs
const
uint32_t
&
aLoadFlags
)
;
bool
ConnectChannel
(
const
uint64_t
&
channelId
)
;
void
DivertOnDataAvailable
(
const
nsCString
&
data
const
uint64_t
&
offset
const
uint32_t
&
count
)
;
void
DivertOnStopRequest
(
const
nsresult
&
statusCode
)
;
void
DivertComplete
(
)
;
friend
class
FTPDivertDataAvailableEvent
;
friend
class
FTPDivertStopRequestEvent
;
friend
class
FTPDivertCompleteEvent
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvCancel
(
const
nsresult
&
status
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvSuspend
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvResume
(
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvDivertOnDataAvailable
(
const
nsCString
&
data
const
uint64_t
&
offset
const
uint32_t
&
count
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvDivertOnStopRequest
(
const
nsresult
&
statusCode
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvDivertComplete
(
)
override
;
nsresult
ResumeChannelInternalIfPossible
(
)
;
virtual
void
ActorDestroy
(
ActorDestroyReason
why
)
override
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
bool
mIPCClosed
;
nsCOMPtr
<
nsILoadContext
>
mLoadContext
;
PBOverrideStatus
mPBOverride
;
nsCOMPtr
<
nsIStreamListener
>
mDivertToListener
;
nsresult
mStatus
;
bool
mDivertingFromChild
;
bool
mDivertedOnStartRequest
;
bool
mSuspendedForDiversion
;
RefPtr
<
mozilla
:
:
dom
:
:
BrowserParent
>
mBrowserParent
;
RefPtr
<
ChannelEventQueue
>
mEventQ
;
nsCString
mErrorMsg
;
bool
mUseUTF8
;
}
;
}
}
#
endif
