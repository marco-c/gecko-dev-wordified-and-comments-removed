#
ifndef
nsFtpControlConnection_h___
#
define
nsFtpControlConnection_h___
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISocketTransport
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIOutputStream
;
class
nsIProxyInfo
;
class
nsITransportEventSink
;
class
nsFtpControlConnectionListener
:
public
nsISupports
{
public
:
virtual
void
OnControlDataAvailable
(
const
char
*
data
uint32_t
dataLen
)
=
0
;
virtual
void
OnControlError
(
nsresult
status
)
=
0
;
}
;
class
nsFtpControlConnection
final
:
public
nsIInputStreamCallback
{
~
nsFtpControlConnection
(
)
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIINPUTSTREAMCALLBACK
nsFtpControlConnection
(
const
nsACString
&
host
uint32_t
port
)
;
nsresult
Connect
(
nsIProxyInfo
*
proxyInfo
nsITransportEventSink
*
eventSink
)
;
nsresult
Disconnect
(
nsresult
status
)
;
nsresult
Write
(
const
nsACString
&
command
)
;
bool
IsAlive
(
)
;
nsITransport
*
Transport
(
)
{
return
mSocket
;
}
nsresult
WaitData
(
nsFtpControlConnectionListener
*
listener
)
;
uint32_t
mServerType
;
nsString
mPassword
;
int32_t
mSuspendedWrite
;
nsCString
mPwd
;
uint32_t
mSessionId
;
bool
mUseUTF8
;
private
:
nsCString
mHost
;
uint32_t
mPort
;
nsCOMPtr
<
nsISocketTransport
>
mSocket
;
nsCOMPtr
<
nsIOutputStream
>
mSocketOutput
;
nsCOMPtr
<
nsIAsyncInputStream
>
mSocketInput
;
RefPtr
<
nsFtpControlConnectionListener
>
mListener
;
}
;
#
endif
