#
ifndef
nsFileChannel_h__
#
define
nsFileChannel_h__
#
include
"
nsBaseChannel
.
h
"
#
include
"
nsIFileChannel
.
h
"
#
include
"
nsIUploadChannel
.
h
"
class
nsFileChannel
:
public
nsBaseChannel
public
nsIFileChannel
public
nsIUploadChannel
public
nsIIdentChannel
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIFILECHANNEL
NS_DECL_NSIUPLOADCHANNEL
NS_FORWARD_NSIREQUEST
(
nsBaseChannel
:
:
)
NS_FORWARD_NSICHANNEL
(
nsBaseChannel
:
:
)
NS_DECL_NSIIDENTCHANNEL
explicit
nsFileChannel
(
nsIURI
*
uri
)
;
nsresult
Init
(
)
;
protected
:
~
nsFileChannel
(
)
=
default
;
[
[
nodiscard
]
]
nsresult
MakeFileInputStream
(
nsIFile
*
file
nsCOMPtr
<
nsIInputStream
>
&
stream
nsCString
&
contentType
bool
async
)
;
[
[
nodiscard
]
]
virtual
nsresult
OpenContentStream
(
bool
async
nsIInputStream
*
*
result
nsIChannel
*
*
channel
)
override
;
virtual
nsresult
ListenerBlockingPromise
(
BlockingPromise
*
*
promise
)
override
;
private
:
nsresult
FixupContentLength
(
bool
async
)
;
nsresult
MaybeSendFileOpenNotification
(
)
;
nsCOMPtr
<
nsIInputStream
>
mUploadStream
;
int64_t
mUploadLength
;
nsCOMPtr
<
nsIURI
>
mFileURI
;
uint64_t
mChannelId
=
0
;
}
;
#
endif
