#
ifndef
nsAboutProtocolHandler_h___
#
define
nsAboutProtocolHandler_h___
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsSimpleNestedURI
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIURIMutator
.
h
"
class
nsIURI
;
namespace
mozilla
{
namespace
net
{
class
nsAboutProtocolHandler
:
public
nsIProtocolHandlerWithDynamicFlags
public
nsIProtocolHandler
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPROTOCOLHANDLER
NS_DECL_NSIPROTOCOLHANDLERWITHDYNAMICFLAGS
nsAboutProtocolHandler
(
)
=
default
;
private
:
virtual
~
nsAboutProtocolHandler
(
)
=
default
;
}
;
class
nsSafeAboutProtocolHandler
final
:
public
nsIProtocolHandler
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPROTOCOLHANDLER
nsSafeAboutProtocolHandler
(
)
=
default
;
private
:
~
nsSafeAboutProtocolHandler
(
)
=
default
;
}
;
class
nsNestedAboutURI
final
:
public
nsSimpleNestedURI
{
private
:
nsNestedAboutURI
(
nsIURI
*
aInnerURI
nsIURI
*
aBaseURI
)
:
nsSimpleNestedURI
(
aInnerURI
)
mBaseURI
(
aBaseURI
)
{
}
nsNestedAboutURI
(
)
:
nsSimpleNestedURI
(
)
{
}
virtual
~
nsNestedAboutURI
(
)
=
default
;
public
:
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
virtual
nsSimpleURI
*
StartClone
(
RefHandlingEnum
aRefHandlingMode
const
nsACString
&
newRef
)
override
;
NS_IMETHOD
Mutate
(
nsIURIMutator
*
*
_retval
)
override
;
NS_IMETHOD
Read
(
nsIObjectInputStream
*
aStream
)
override
;
NS_IMETHOD
Write
(
nsIObjectOutputStream
*
aStream
)
override
;
NS_IMETHOD
GetClassIDNoAlloc
(
nsCID
*
aClassIDNoAlloc
)
override
;
nsIURI
*
GetBaseURI
(
)
const
{
return
mBaseURI
;
}
protected
:
nsCOMPtr
<
nsIURI
>
mBaseURI
;
nsresult
ReadPrivate
(
nsIObjectInputStream
*
stream
)
;
public
:
class
Mutator
final
:
public
nsIURIMutator
public
BaseURIMutator
<
nsNestedAboutURI
>
public
nsISerializable
public
nsINestedAboutURIMutator
{
NS_DECL_ISUPPORTS
NS_FORWARD_SAFE_NSIURISETTERS_RET
(
mURI
)
explicit
Mutator
(
)
=
default
;
private
:
virtual
~
Mutator
(
)
=
default
;
MOZ_MUST_USE
NS_IMETHOD
Deserialize
(
const
mozilla
:
:
ipc
:
:
URIParams
&
aParams
)
override
{
return
InitFromIPCParams
(
aParams
)
;
}
NS_IMETHOD
Write
(
nsIObjectOutputStream
*
aOutputStream
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
MOZ_MUST_USE
NS_IMETHOD
Read
(
nsIObjectInputStream
*
aStream
)
override
{
return
InitFromInputStream
(
aStream
)
;
}
MOZ_MUST_USE
NS_IMETHOD
Finalize
(
nsIURI
*
*
aURI
)
override
{
mURI
-
>
mMutable
=
false
;
mURI
.
forget
(
aURI
)
;
return
NS_OK
;
}
MOZ_MUST_USE
NS_IMETHOD
SetSpec
(
const
nsACString
&
aSpec
nsIURIMutator
*
*
aMutator
)
override
{
if
(
aMutator
)
{
NS_ADDREF
(
*
aMutator
=
this
)
;
}
return
InitFromSpec
(
aSpec
)
;
}
MOZ_MUST_USE
NS_IMETHOD
InitWithBase
(
nsIURI
*
aInnerURI
nsIURI
*
aBaseURI
)
override
{
mURI
=
new
nsNestedAboutURI
(
aInnerURI
aBaseURI
)
;
return
NS_OK
;
}
void
ResetMutable
(
)
{
if
(
mURI
)
{
mURI
-
>
mMutable
=
true
;
}
}
friend
class
nsNestedAboutURI
;
}
;
friend
BaseURIMutator
<
nsNestedAboutURI
>
;
}
;
}
}
#
endif
