include
protocol
PNecko
;
include
protocol
PBrowser
;
include
protocol
PTransportProvider
;
include
IPCStream
;
include
NeckoChannelParams
;
include
protocol
PFileDescriptorSet
;
include
protocol
PChildToParentStream
;
include
protocol
PParentToChildStream
;
include
"
mozilla
/
net
/
WebSocketChannelParent
.
h
"
;
include
"
mozilla
/
net
/
WebSocketChannelChild
.
h
"
;
using
class
IPC
:
:
SerializedLoadContext
from
"
SerializedLoadContext
.
h
"
;
[
RefCounted
]
using
class
nsIURI
from
"
mozilla
/
ipc
/
URIUtils
.
h
"
;
namespace
mozilla
{
namespace
net
{
[
ManualDealloc
ChildImpl
=
"
WebSocketChannelChild
"
ParentImpl
=
"
WebSocketChannelParent
"
]
async
protocol
PWebSocket
{
manager
PNecko
;
parent
:
async
AsyncOpen
(
nsIURI
aURI
nsCString
aOrigin
OriginAttributes
aOriginAttributes
uint64_t
aInnerWindowID
nsCString
aProtocol
bool
aSecure
uint32_t
aPingInterval
bool
aClientSetPingInterval
uint32_t
aPingTimeout
bool
aClientSetPingTimeout
LoadInfoArgs
?
aLoadInfoArgs
PTransportProvider
?
aProvider
nsCString
aNegotiatedExtensions
)
;
async
Close
(
uint16_t
code
nsCString
reason
)
;
async
SendMsg
(
nsCString
aMsg
)
;
async
SendBinaryMsg
(
nsCString
aMsg
)
;
async
SendBinaryStream
(
IPCStream
aStream
uint32_t
aLength
)
;
async
DeleteSelf
(
)
;
child
:
async
OnStart
(
nsCString
aProtocol
nsCString
aExtensions
nsString
aEffectiveURL
bool
aEncrypted
uint64_t
aHttpChannelId
)
;
async
OnStop
(
nsresult
aStatusCode
)
;
async
OnMessageAvailable
(
nsDependentCSubstring
aMsg
bool
aMoreData
)
;
async
OnBinaryMessageAvailable
(
nsDependentCSubstring
aMsg
bool
aMoreData
)
;
async
OnAcknowledge
(
uint32_t
aSize
)
;
async
OnServerClose
(
uint16_t
code
nsCString
aReason
)
;
async
__delete__
(
)
;
}
;
}
}
