#
include
"
WebSocketEventListenerParent
.
h
"
#
include
"
mozilla
/
unused
.
h
"
namespace
mozilla
{
namespace
net
{
NS_INTERFACE_MAP_BEGIN
(
WebSocketEventListenerParent
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIWebSocketEventListener
)
NS_INTERFACE_MAP_ENTRY
(
nsIWebSocketEventListener
)
NS_INTERFACE_MAP_END
NS_IMPL_ADDREF
(
WebSocketEventListenerParent
)
NS_IMPL_RELEASE
(
WebSocketEventListenerParent
)
WebSocketEventListenerParent
:
:
WebSocketEventListenerParent
(
uint64_t
aInnerWindowID
)
:
mService
(
WebSocketEventService
:
:
GetOrCreate
(
)
)
mInnerWindowID
(
aInnerWindowID
)
{
mService
-
>
AddListener
(
mInnerWindowID
this
)
;
}
WebSocketEventListenerParent
:
:
~
WebSocketEventListenerParent
(
)
{
MOZ_ASSERT
(
!
mService
)
;
}
bool
WebSocketEventListenerParent
:
:
RecvClose
(
)
{
if
(
mService
)
{
UnregisterListener
(
)
;
unused
<
<
Send__delete__
(
this
)
;
}
return
true
;
}
void
WebSocketEventListenerParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
UnregisterListener
(
)
;
}
void
WebSocketEventListenerParent
:
:
UnregisterListener
(
)
{
if
(
mService
)
{
mService
-
>
RemoveListener
(
mInnerWindowID
this
)
;
mService
=
nullptr
;
}
}
NS_IMETHODIMP
WebSocketEventListenerParent
:
:
FrameReceived
(
uint32_t
aWebSocketSerialID
nsIWebSocketFrame
*
aFrame
)
{
if
(
!
aFrame
)
{
return
NS_ERROR_FAILURE
;
}
WebSocketFrame
*
frame
=
static_cast
<
WebSocketFrame
*
>
(
aFrame
)
;
unused
<
<
SendFrameReceived
(
aWebSocketSerialID
frame
-
>
Data
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebSocketEventListenerParent
:
:
FrameSent
(
uint32_t
aWebSocketSerialID
nsIWebSocketFrame
*
aFrame
)
{
if
(
!
aFrame
)
{
return
NS_ERROR_FAILURE
;
}
WebSocketFrame
*
frame
=
static_cast
<
WebSocketFrame
*
>
(
aFrame
)
;
unused
<
<
SendFrameSent
(
aWebSocketSerialID
frame
-
>
Data
(
)
)
;
return
NS_OK
;
}
}
}
