#
ifndef
mozilla_net_WebSocketConnectionParent_h
#
define
mozilla_net_WebSocketConnectionParent_h
#
include
"
mozilla
/
net
/
PWebSocketConnectionParent
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWebSocketConnection
.
h
"
class
nsIHttpUpgradeListener
;
namespace
mozilla
{
namespace
net
{
#
define
WEB_SOCKET_CONNECTION_PARENT_IID
\
{
\
0x1cc3cb61
0x0c09
0x4f58
{
\
0x9a
0x64
0x44
0xf7
0x92
0x86
0xbc
0x00
\
}
\
}
class
WebSocketConnectionParent
final
:
public
PWebSocketConnectionParent
public
nsIWebSocketConnection
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBSOCKETCONNECTION
NS_DECLARE_STATIC_IID_ACCESSOR
(
WEB_SOCKET_CONNECTION_PARENT_IID
)
explicit
WebSocketConnectionParent
(
nsIHttpUpgradeListener
*
aListener
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnTransportAvailable
(
const
nsCString
&
aSecurityInfoSerialization
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnError
(
const
nsresult
&
aStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnTCPClosed
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnDataReceived
(
nsTArray
<
uint8_t
>
&
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnUpgradeFailed
(
const
nsresult
&
aReason
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnDataSent
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
virtual
~
WebSocketConnectionParent
(
)
;
nsCOMPtr
<
nsIHttpUpgradeListener
>
mUpgradeListener
;
nsCOMPtr
<
nsIWebSocketConnectionListener
>
mListener
;
nsCOMPtr
<
nsIEventTarget
>
mEventTarget
;
nsCOMPtr
<
nsISupports
>
mSecurityInfo
;
bool
mClosed
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
WebSocketConnectionParent
WEB_SOCKET_CONNECTION_PARENT_IID
)
}
}
#
endif
