#
ifndef
mozilla_net_WebSocketConnectionParent_h
#
define
mozilla_net_WebSocketConnectionParent_h
#
include
"
mozilla
/
net
/
PWebSocketConnectionParent
.
h
"
#
include
"
mozilla
/
net
/
WebSocketConnectionBase
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
WebSocketConnectionBase
.
h
"
class
nsIHttpUpgradeListener
;
namespace
mozilla
{
namespace
net
{
class
WebSocketConnectionListener
;
class
WebSocketConnectionParent
final
:
public
PWebSocketConnectionParent
public
WebSocketConnectionBase
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
explicit
WebSocketConnectionParent
(
nsIHttpUpgradeListener
*
aListener
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnTransportAvailable
(
const
nsCString
&
aSecurityInfoSerialization
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnError
(
const
nsresult
&
aStatus
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnTCPClosed
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnDataReceived
(
nsTArray
<
uint8_t
>
&
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnUpgradeFailed
(
const
nsresult
&
aReason
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
nsresult
Init
(
WebSocketConnectionListener
*
aListener
)
override
;
void
GetIoTarget
(
nsIEventTarget
*
*
aTarget
)
override
;
void
Close
(
)
override
;
nsresult
WriteOutputData
(
const
uint8_t
*
aHdrBuf
uint32_t
aHdrBufLength
const
uint8_t
*
aPayloadBuf
uint32_t
aPayloadBufLength
)
override
;
nsresult
StartReading
(
)
override
;
void
DrainSocketData
(
)
override
;
nsresult
GetSecurityInfo
(
nsISupports
*
*
aSecurityInfo
)
override
;
private
:
virtual
~
WebSocketConnectionParent
(
)
;
nsCOMPtr
<
nsIHttpUpgradeListener
>
mUpgradeListener
;
RefPtr
<
WebSocketConnectionListener
>
mListener
;
nsCOMPtr
<
nsIEventTarget
>
mBackgroundThread
;
nsCOMPtr
<
nsISupports
>
mSecurityInfo
;
Atomic
<
bool
>
mClosed
{
false
}
;
Mutex
mMutex
{
"
WebSocketConnectionParent
:
:
mMutex
"
}
;
}
;
}
}
#
endif
