interface
nsICookieJarSettings
;
interface
nsIInputStream
;
interface
nsIInterfaceRequestor
;
interface
nsILoadGroup
;
interface
nsILoadInfo
;
interface
nsIPrincipal
;
interface
nsITransportProvider
;
interface
nsITransportSecurityInfo
;
interface
nsIURI
;
interface
nsIWebSocketListener
;
webidl
Node
;
#
include
"
nsISupports
.
idl
"
#
include
"
nsIContentPolicy
.
idl
"
[
ref
]
native
OriginAttributes
(
const
mozilla
:
:
OriginAttributes
)
;
[
scriptable
builtinclass
uuid
(
ce71d028
-
322a
-
4105
-
a947
-
a894689b52bf
)
]
interface
nsIWebSocketChannel
:
nsISupports
{
[
must_use
]
readonly
attribute
nsIURI
originalURI
;
[
must_use
]
readonly
attribute
nsIURI
URI
;
[
must_use
]
attribute
nsIInterfaceRequestor
notificationCallbacks
;
[
must_use
]
readonly
attribute
nsITransportSecurityInfo
securityInfo
;
[
must_use
]
attribute
nsILoadGroup
loadGroup
;
[
must_use
]
attribute
nsILoadInfo
loadInfo
;
[
must_use
]
attribute
ACString
protocol
;
[
must_use
]
readonly
attribute
ACString
extensions
;
[
must_use
]
readonly
attribute
uint64_t
httpChannelId
;
[
notxpcom
]
nsresult
initLoadInfoNative
(
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
nsICookieJarSettings
aCookieJarSettings
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
in
unsigned
long
aSandboxFlags
)
;
[
must_use
]
void
initLoadInfo
(
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
)
;
[
implicit_jscontext
]
void
asyncOpen
(
in
nsIURI
aURI
in
ACString
aOrigin
in
jsval
aOriginAttributes
in
unsigned
long
long
aInnerWindowID
in
nsIWebSocketListener
aListener
in
nsISupports
aContext
)
;
[
must_use
noscript
]
void
asyncOpenNative
(
in
nsIURI
aURI
in
ACString
aOrigin
in
OriginAttributes
aOriginAttributes
in
unsigned
long
long
aInnerWindowID
in
nsIWebSocketListener
aListener
in
nsISupports
aContext
)
;
[
must_use
]
void
close
(
in
unsigned
short
aCode
in
AUTF8String
aReason
)
;
const
unsigned
short
CLOSE_NORMAL
=
1000
;
const
unsigned
short
CLOSE_GOING_AWAY
=
1001
;
const
unsigned
short
CLOSE_PROTOCOL_ERROR
=
1002
;
const
unsigned
short
CLOSE_UNSUPPORTED_DATATYPE
=
1003
;
const
unsigned
short
CLOSE_NO_STATUS
=
1005
;
const
unsigned
short
CLOSE_ABNORMAL
=
1006
;
const
unsigned
short
CLOSE_INVALID_PAYLOAD
=
1007
;
const
unsigned
short
CLOSE_POLICY_VIOLATION
=
1008
;
const
unsigned
short
CLOSE_TOO_LARGE
=
1009
;
const
unsigned
short
CLOSE_EXTENSION_MISSING
=
1010
;
const
unsigned
short
CLOSE_INTERNAL_ERROR
=
1011
;
const
unsigned
short
CLOSE_TLS_FAILED
=
1015
;
[
must_use
]
void
sendMsg
(
in
AUTF8String
aMsg
)
;
[
must_use
]
void
sendBinaryMsg
(
in
ACString
aMsg
)
;
[
must_use
]
void
sendBinaryStream
(
in
nsIInputStream
aStream
in
unsigned
long
length
)
;
[
must_use
]
attribute
unsigned
long
pingInterval
;
[
must_use
]
attribute
unsigned
long
pingTimeout
;
[
must_use
]
attribute
unsigned
long
serial
;
[
must_use
]
void
setServerParameters
(
in
nsITransportProvider
aProvider
in
ACString
aNegotiatedExtensions
)
;
%
{
C
+
+
inline
uint32_t
Serial
(
)
{
uint32_t
serial
;
nsresult
rv
=
GetSerial
(
&
serial
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
0
;
}
return
serial
;
}
inline
uint64_t
HttpChannelId
(
)
{
uint64_t
httpChannelId
;
nsresult
rv
=
GetHttpChannelId
(
&
httpChannelId
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
0
;
}
return
httpChannelId
;
}
%
}
}
;
