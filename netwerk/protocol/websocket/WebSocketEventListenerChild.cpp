#
include
"
WebSocketEventListenerChild
.
h
"
#
include
"
WebSocketEventService
.
h
"
#
include
"
WebSocketFrame
.
h
"
namespace
mozilla
{
namespace
net
{
WebSocketEventListenerChild
:
:
WebSocketEventListenerChild
(
uint64_t
aInnerWindowID
)
:
mService
(
WebSocketEventService
:
:
GetOrCreate
(
)
)
mInnerWindowID
(
aInnerWindowID
)
{
}
WebSocketEventListenerChild
:
:
~
WebSocketEventListenerChild
(
)
{
MOZ_ASSERT
(
!
mService
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvWebSocketCreated
(
const
uint32_t
&
aWebSocketSerialID
const
nsString
&
aURI
const
nsCString
&
aProtocols
)
{
if
(
mService
)
{
mService
-
>
WebSocketCreated
(
aWebSocketSerialID
mInnerWindowID
aURI
aProtocols
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvWebSocketOpened
(
const
uint32_t
&
aWebSocketSerialID
const
nsString
&
aEffectiveURI
const
nsCString
&
aProtocols
const
nsCString
&
aExtensions
)
{
if
(
mService
)
{
mService
-
>
WebSocketOpened
(
aWebSocketSerialID
mInnerWindowID
aEffectiveURI
aProtocols
aExtensions
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvWebSocketMessageAvailable
(
const
uint32_t
&
aWebSocketSerialID
const
nsCString
&
aData
const
uint16_t
&
aMessageType
)
{
if
(
mService
)
{
mService
-
>
WebSocketMessageAvailable
(
aWebSocketSerialID
mInnerWindowID
aData
aMessageType
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvWebSocketClosed
(
const
uint32_t
&
aWebSocketSerialID
const
bool
&
aWasClean
const
uint16_t
&
aCode
const
nsString
&
aReason
)
{
if
(
mService
)
{
mService
-
>
WebSocketClosed
(
aWebSocketSerialID
mInnerWindowID
aWasClean
aCode
aReason
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvFrameReceived
(
const
uint32_t
&
aWebSocketSerialID
const
WebSocketFrameData
&
aFrameData
)
{
if
(
mService
)
{
RefPtr
<
WebSocketFrame
>
frame
=
new
WebSocketFrame
(
aFrameData
)
;
mService
-
>
FrameReceived
(
aWebSocketSerialID
mInnerWindowID
frame
.
forget
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebSocketEventListenerChild
:
:
RecvFrameSent
(
const
uint32_t
&
aWebSocketSerialID
const
WebSocketFrameData
&
aFrameData
)
{
if
(
mService
)
{
RefPtr
<
WebSocketFrame
>
frame
=
new
WebSocketFrame
(
aFrameData
)
;
mService
-
>
FrameSent
(
aWebSocketSerialID
mInnerWindowID
frame
.
forget
(
)
)
;
}
return
IPC_OK
(
)
;
}
void
WebSocketEventListenerChild
:
:
Close
(
)
{
mService
=
nullptr
;
SendClose
(
)
;
}
void
WebSocketEventListenerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mService
=
nullptr
;
}
}
}
