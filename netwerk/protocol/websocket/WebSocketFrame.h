#
ifndef
mozilla_net_WebSocketFrame_h
#
define
mozilla_net_WebSocketFrame_h
#
include
<
cstdint
>
#
include
"
nsISupports
.
h
"
#
include
"
nsIWebSocketEventService
.
h
"
#
include
"
nsString
.
h
"
class
PickleIterator
;
using
DOMHighResTimeStamp
=
double
;
namespace
IPC
{
class
Message
;
template
<
class
P
>
struct
ParamTraits
;
}
namespace
mozilla
{
namespace
net
{
class
WebSocketFrameData
final
{
public
:
WebSocketFrameData
(
)
;
explicit
WebSocketFrameData
(
const
WebSocketFrameData
&
aData
)
;
WebSocketFrameData
(
DOMHighResTimeStamp
aTimeStamp
bool
aFinBit
bool
aRsvBit1
bool
aRsvBit2
bool
aRsvBit3
uint8_t
aOpCode
bool
aMaskBit
uint32_t
aMask
const
nsCString
&
aPayload
)
;
~
WebSocketFrameData
(
)
;
void
WriteIPCParams
(
IPC
:
:
Message
*
aMessage
)
const
;
bool
ReadIPCParams
(
const
IPC
:
:
Message
*
aMessage
PickleIterator
*
aIter
)
;
DOMHighResTimeStamp
mTimeStamp
;
bool
mFinBit
:
1
;
bool
mRsvBit1
:
1
;
bool
mRsvBit2
:
1
;
bool
mRsvBit3
:
1
;
bool
mMaskBit
:
1
;
uint8_t
mOpCode
;
uint32_t
mMask
;
nsCString
mPayload
;
}
;
class
WebSocketFrame
final
:
public
nsIWebSocketFrame
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWEBSOCKETFRAME
explicit
WebSocketFrame
(
const
WebSocketFrameData
&
aData
)
;
WebSocketFrame
(
bool
aFinBit
bool
aRsvBit1
bool
aRsvBit2
bool
aRsvBit3
uint8_t
aOpCode
bool
aMaskBit
uint32_t
aMask
const
nsCString
&
aPayload
)
;
const
WebSocketFrameData
&
Data
(
)
const
{
return
mData
;
}
private
:
~
WebSocketFrame
(
)
=
default
;
WebSocketFrameData
mData
;
}
;
}
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
net
:
:
WebSocketFrameData
>
{
using
paramType
=
mozilla
:
:
net
:
:
WebSocketFrameData
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aParam
.
WriteIPCParams
(
aMsg
)
;
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
return
aResult
-
>
ReadIPCParams
(
aMsg
aIter
)
;
}
}
;
}
#
endif
