#
ifndef
__nsWifiMonitor__
#
define
__nsWifiMonitor__
#
include
"
nsIWifiMonitor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIWifiListener
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
WifiScanner
.
h
"
namespace
mozilla
{
class
TestWifiMonitor
;
}
extern
mozilla
:
:
LazyLogModule
gWifiMonitorLog
;
class
nsWifiAccessPoint
;
#
define
WIFI_SCAN_INTERVAL_MS_PREF
"
network
.
wifi
.
scanning_period
"
#
ifdef
XP_MACOSX
#
define
kMacOSWifiMonitorStackSize
(
512
*
1024
)
#
endif
struct
WifiListenerHolder
{
RefPtr
<
nsIWifiListener
>
mListener
;
bool
mShouldPoll
;
bool
mHasSentData
=
false
;
explicit
WifiListenerHolder
(
nsIWifiListener
*
aListener
bool
aShouldPoll
=
false
)
:
mListener
(
aListener
)
mShouldPoll
(
aShouldPoll
)
{
}
}
;
class
nsWifiMonitor
final
:
public
nsIWifiMonitor
public
nsIObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIWIFIMONITOR
NS_DECL_NSIOBSERVER
explicit
nsWifiMonitor
(
mozilla
:
:
UniquePtr
<
mozilla
:
:
WifiScanner
>
&
&
aScanner
=
nullptr
)
;
private
:
friend
class
mozilla
:
:
TestWifiMonitor
;
~
nsWifiMonitor
(
)
;
nsresult
DispatchScanToBackgroundThread
(
uint64_t
aPollingId
=
0
uint32_t
aWaitMs
=
0
)
;
void
Scan
(
uint64_t
aPollingId
)
;
nsresult
DoScan
(
)
;
nsresult
CallWifiListeners
(
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
&
&
aAccessPoints
bool
aAccessPointsChanged
)
;
nsresult
PassErrorToWifiListeners
(
nsresult
rv
)
;
void
Close
(
)
;
bool
IsBackgroundThread
(
)
;
bool
ShouldPoll
(
)
{
MOZ_ASSERT
(
!
IsBackgroundThread
(
)
)
;
return
(
mShouldPollForCurrentNetwork
&
&
!
mListeners
.
IsEmpty
(
)
)
|
|
mNumPollingListeners
>
0
;
}
;
#
ifdef
ENABLE_TESTS
bool
IsPolling
(
)
{
return
mThread
&
&
mPollingId
;
}
#
endif
nsCOMPtr
<
nsIThread
>
mThread
;
nsTArray
<
WifiListenerHolder
>
mListeners
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
WifiScanner
>
mWifiScanner
;
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
mLastAccessPoints
;
mozilla
:
:
Atomic
<
uint64_t
>
mPollingId
;
uint32_t
mNumPollingListeners
=
0
;
bool
mShouldPollForCurrentNetwork
=
false
;
}
;
#
endif
