#
include
"
nsWifiAccessPoint
.
h
"
#
include
"
WinWifiScanner
.
h
"
#
define
DOT11_BSS_TYPE_UNUSED
static_cast
<
DOT11_BSS_TYPE
>
(
0
)
namespace
mozilla
{
LazyLogModule
gWifiScannerLog
(
"
WifiScanner
"
)
;
#
define
WIFISCAN_LOG
(
args
)
\
MOZ_LOG
(
mozilla
:
:
gWifiScannerLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
class
InterfaceScanCallbackData
{
public
:
explicit
InterfaceScanCallbackData
(
uint32_t
numInterfaces
)
:
mCurrentlyScanningInterfaces
(
numInterfaces
)
{
mAllInterfacesDoneScanningEvent
=
:
:
CreateEventW
(
nullptr
TRUE
FALSE
nullptr
)
;
MOZ_ASSERT
(
NULL
!
=
mAllInterfacesDoneScanningEvent
)
;
}
~
InterfaceScanCallbackData
(
)
{
:
:
CloseHandle
(
mAllInterfacesDoneScanningEvent
)
;
}
void
OnInterfaceScanComplete
(
)
{
uint32_t
val
=
:
:
InterlockedDecrement
(
&
mCurrentlyScanningInterfaces
)
;
if
(
!
val
)
{
:
:
SetEvent
(
mAllInterfacesDoneScanningEvent
)
;
}
}
void
WaitForAllInterfacesToFinishScanning
(
uint32_t
msToWait
)
{
:
:
WaitForSingleObject
(
mAllInterfacesDoneScanningEvent
msToWait
)
;
}
private
:
volatile
uint32_t
mCurrentlyScanningInterfaces
;
HANDLE
mAllInterfacesDoneScanningEvent
;
}
;
static
void
WINAPI
OnScanComplete
(
PWLAN_NOTIFICATION_DATA
data
PVOID
context
)
{
WIFISCAN_LOG
(
(
"
WinWifiScanner
OnScanComplete
"
)
)
;
if
(
WLAN_NOTIFICATION_SOURCE_ACM
!
=
data
-
>
NotificationSource
)
{
return
;
}
if
(
wlan_notification_acm_scan_complete
!
=
data
-
>
NotificationCode
&
&
wlan_notification_acm_scan_fail
!
=
data
-
>
NotificationCode
)
{
return
;
}
InterfaceScanCallbackData
*
cbData
=
reinterpret_cast
<
InterfaceScanCallbackData
*
>
(
context
)
;
cbData
-
>
OnInterfaceScanComplete
(
)
;
}
WifiScannerImpl
:
:
WifiScannerImpl
(
)
{
mWlanLibrary
.
reset
(
WinWLANLibrary
:
:
Load
(
)
)
;
if
(
!
mWlanLibrary
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
could
not
initialize
Windows
Wi
-
Fi
scanner
"
this
)
)
;
}
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
created
WifiScannerImpl
"
this
)
)
;
}
WifiScannerImpl
:
:
~
WifiScannerImpl
(
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
destroyed
WifiScannerImpl
"
this
)
)
;
}
nsresult
WifiScannerImpl
:
:
GetAccessPointsFromWLAN
(
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
&
accessPoints
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
"
this
)
)
;
accessPoints
.
Clear
(
)
;
if
(
!
mWlanLibrary
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
WLAN
library
is
not
"
"
available
"
this
)
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
WLAN_INTERFACE_INFO_LIST
*
interface_list
=
nullptr
;
if
(
ERROR_SUCCESS
!
=
(
*
mWlanLibrary
-
>
GetWlanEnumInterfacesPtr
(
)
)
(
mWlanLibrary
-
>
GetWLANHandle
(
)
nullptr
&
interface_list
)
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
WlanEnumInterfaces
"
"
failed
"
this
)
)
;
return
NS_ERROR_FAILURE
;
}
ScopedWLANObject
scopedInterfaceList
(
*
mWlanLibrary
interface_list
)
;
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
found
%
lu
interfaces
"
this
interface_list
-
>
dwNumberOfItems
)
)
;
if
(
!
interface_list
-
>
dwNumberOfItems
)
{
return
NS_OK
;
}
InterfaceScanCallbackData
cbData
(
interface_list
-
>
dwNumberOfItems
)
;
DWORD
wlanNotifySource
;
if
(
ERROR_SUCCESS
!
=
(
*
mWlanLibrary
-
>
GetWlanRegisterNotificationPtr
(
)
)
(
mWlanLibrary
-
>
GetWLANHandle
(
)
WLAN_NOTIFICATION_SOURCE_ACM
TRUE
(
WLAN_NOTIFICATION_CALLBACK
)
OnScanComplete
&
cbData
NULL
&
wlanNotifySource
)
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
"
"
WlanRegisterNotification
failed
"
this
)
)
;
return
NS_ERROR_FAILURE
;
}
for
(
unsigned
int
i
=
0
;
i
<
interface_list
-
>
dwNumberOfItems
;
+
+
i
)
{
if
(
ERROR_SUCCESS
!
=
(
*
mWlanLibrary
-
>
GetWlanScanPtr
(
)
)
(
mWlanLibrary
-
>
GetWLANHandle
(
)
&
interface_list
-
>
InterfaceInfo
[
i
]
.
InterfaceGuid
NULL
NULL
NULL
)
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
WlanScan
failed
.
"
this
)
)
;
cbData
.
OnInterfaceScanComplete
(
)
;
}
}
cbData
.
WaitForAllInterfacesToFinishScanning
(
5000
)
;
(
*
mWlanLibrary
-
>
GetWlanRegisterNotificationPtr
(
)
)
(
mWlanLibrary
-
>
GetWLANHandle
(
)
WLAN_NOTIFICATION_SOURCE_NONE
TRUE
NULL
NULL
NULL
&
wlanNotifySource
)
;
for
(
uint32_t
i
=
0
;
i
<
interface_list
-
>
dwNumberOfItems
;
+
+
i
)
{
WLAN_BSS_LIST
*
bss_list
;
if
(
ERROR_SUCCESS
!
=
(
*
mWlanLibrary
-
>
GetWlanGetNetworkBssListPtr
(
)
)
(
mWlanLibrary
-
>
GetWLANHandle
(
)
&
interface_list
-
>
InterfaceInfo
[
i
]
.
InterfaceGuid
nullptr
DOT11_BSS_TYPE_UNUSED
false
nullptr
&
bss_list
)
)
{
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
unable
to
get
BSS
"
"
list
from
interface
%
u
"
this
i
)
)
;
continue
;
}
WIFISCAN_LOG
(
(
"
[
%
p
]
WinWifiScanner
:
:
GetAccessPointsFromWLAN
BSS
list
has
%
lu
access
"
"
points
"
this
bss_list
-
>
dwNumberOfItems
)
)
;
ScopedWLANObject
scopedBssList
(
*
mWlanLibrary
bss_list
)
;
for
(
int
j
=
0
;
j
<
static_cast
<
int
>
(
bss_list
-
>
dwNumberOfItems
)
;
+
+
j
)
{
nsWifiAccessPoint
*
ap
=
new
nsWifiAccessPoint
(
)
;
if
(
!
ap
)
{
continue
;
}
const
WLAN_BSS_ENTRY
bss_entry
=
bss_list
-
>
wlanBssEntries
[
j
]
;
ap
-
>
setMac
(
bss_entry
.
dot11Bssid
)
;
ap
-
>
setSignal
(
bss_entry
.
lRssi
)
;
ap
-
>
setSSID
(
reinterpret_cast
<
char
const
*
>
(
bss_entry
.
dot11Ssid
.
ucSSID
)
bss_entry
.
dot11Ssid
.
uSSIDLength
)
;
accessPoints
.
AppendElement
(
ap
)
;
}
}
return
NS_OK
;
}
}
#
undef
WIFISCAN_LOG
