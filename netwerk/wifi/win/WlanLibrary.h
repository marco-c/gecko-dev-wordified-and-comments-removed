#
pragma
once
#
include
<
windows
.
h
>
#
include
<
wlanapi
.
h
>
class
WinWLANLibrary
{
public
:
static
WinWLANLibrary
*
Load
(
)
;
~
WinWLANLibrary
(
)
;
HANDLE
GetWLANHandle
(
)
const
;
decltype
(
:
:
WlanEnumInterfaces
)
*
GetWlanEnumInterfacesPtr
(
)
const
;
decltype
(
:
:
WlanGetNetworkBssList
)
*
GetWlanGetNetworkBssListPtr
(
)
const
;
decltype
(
:
:
WlanFreeMemory
)
*
GetWlanFreeMemoryPtr
(
)
const
;
decltype
(
:
:
WlanCloseHandle
)
*
GetWlanCloseHandlePtr
(
)
const
;
decltype
(
:
:
WlanOpenHandle
)
*
GetWlanOpenHandlePtr
(
)
const
;
decltype
(
:
:
WlanRegisterNotification
)
*
GetWlanRegisterNotificationPtr
(
)
const
;
decltype
(
:
:
WlanScan
)
*
GetWlanScanPtr
(
)
const
;
private
:
WinWLANLibrary
(
)
=
default
;
bool
Initialize
(
)
;
HMODULE
mWlanLibrary
=
nullptr
;
HANDLE
mWlanHandle
=
nullptr
;
decltype
(
:
:
WlanEnumInterfaces
)
*
mWlanEnumInterfacesPtr
=
nullptr
;
decltype
(
:
:
WlanGetNetworkBssList
)
*
mWlanGetNetworkBssListPtr
=
nullptr
;
decltype
(
:
:
WlanFreeMemory
)
*
mWlanFreeMemoryPtr
=
nullptr
;
decltype
(
:
:
WlanCloseHandle
)
*
mWlanCloseHandlePtr
=
nullptr
;
decltype
(
:
:
WlanOpenHandle
)
*
mWlanOpenHandlePtr
=
nullptr
;
decltype
(
:
:
WlanRegisterNotification
)
*
mWlanRegisterNotificationPtr
=
nullptr
;
decltype
(
:
:
WlanScan
)
*
mWlanScanPtr
=
nullptr
;
}
;
class
ScopedWLANObject
{
public
:
ScopedWLANObject
(
const
WinWLANLibrary
&
library
void
*
object
)
:
mLibrary
(
library
)
mObject
(
object
)
{
}
~
ScopedWLANObject
(
)
{
(
*
(
mLibrary
.
GetWlanFreeMemoryPtr
(
)
)
)
(
mObject
)
;
}
private
:
const
WinWLANLibrary
&
mLibrary
;
void
*
mObject
;
}
;
