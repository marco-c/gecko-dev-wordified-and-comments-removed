#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIWifiListener
.
h
"
#
include
"
nsWifiMonitor
.
h
"
#
include
"
nsWifiAccessPoint
.
h
"
#
include
"
WifiScanner
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
_M_IX86
)
#
define
MOCKCALLTYPE
STDMETHODCALLTYPE
#
else
#
define
MOCKCALLTYPE
#
endif
static
mozilla
:
:
LazyLogModule
gLog
(
"
TestWifiMonitorListenerRemoval
"
)
;
#
define
LOGI
(
x
)
MOZ_LOG
(
gLog
mozilla
:
:
LogLevel
:
:
Info
x
)
#
define
LOGD
(
x
)
MOZ_LOG
(
gLog
mozilla
:
:
LogLevel
:
:
Debug
x
)
namespace
mozilla
{
uint32_t
sCalled
;
class
MockWifiScanner
:
public
mozilla
:
:
WifiScanner
{
public
:
explicit
MockWifiScanner
(
bool
aExpectOnChange
)
:
mExpectOnChange
(
aExpectOnChange
)
{
}
nsresult
GetAccessPointsFromWLAN
(
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
&
aAccessPoints
)
override
{
if
(
!
mExpectOnChange
)
{
return
NS_ERROR_FAILURE
;
}
static
int
sCurrentId
=
0
;
nsWifiAccessPoint
*
ap
=
new
nsWifiAccessPoint
(
)
;
ap
-
>
mSignal
=
sCurrentId
+
+
;
aAccessPoints
.
AppendElement
(
RefPtr
(
ap
)
)
;
return
NS_OK
;
}
private
:
bool
mExpectOnChange
;
}
;
class
MockWifiListener
:
public
nsIWifiListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
MockWifiListener
(
nsWifiMonitor
*
aWifiMonitor
bool
aExpectOnChange
)
:
mWifiMonitor
(
aWifiMonitor
)
mExpectOnChange
(
aExpectOnChange
)
{
}
MOCKCALLTYPE
nsresult
OnChange
(
const
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
&
accessPoints
)
override
{
return
Check
(
true
)
;
}
MOCKCALLTYPE
nsresult
OnError
(
nsresult
error
)
override
{
return
Check
(
false
)
;
}
private
:
nsresult
Check
(
bool
aWasOnChange
)
{
bool
gotCorrectCallback
=
!
(
mExpectOnChange
^
aWasOnChange
)
;
EXPECT_TRUE
(
gotCorrectCallback
)
;
if
(
!
gotCorrectCallback
)
{
return
NS_OK
;
}
mWifiMonitor
-
>
StopWatching
(
this
)
;
+
+
sCalled
;
LOGI
(
(
"
sCalled
=
%
u
"
sCalled
)
)
;
return
NS_OK
;
}
virtual
~
MockWifiListener
(
)
=
default
;
RefPtr
<
nsWifiMonitor
>
mWifiMonitor
;
bool
mExpectOnChange
;
}
;
NS_IMPL_ISUPPORTS
(
MockWifiListener
nsIWifiListener
)
class
TestWifiMonitor
{
public
:
explicit
TestWifiMonitor
(
bool
aExpectOnChange
)
{
mWifiMonitor
=
MakeRefPtr
<
nsWifiMonitor
>
(
MakeUnique
<
MockWifiScanner
>
(
aExpectOnChange
)
)
;
mWifiMonitor
-
>
StartWatching
(
new
MockWifiListener
(
mWifiMonitor
aExpectOnChange
)
false
)
;
mWifiMonitor
-
>
StartWatching
(
new
MockWifiListener
(
mWifiMonitor
aExpectOnChange
)
false
)
;
}
~
TestWifiMonitor
(
)
{
mWifiMonitor
-
>
Close
(
)
;
}
private
:
RefPtr
<
nsWifiMonitor
>
mWifiMonitor
;
}
;
TEST
(
TestWifiMonitorListenerRemoval
RemoveDuringOnChange
)
{
sCalled
=
0
;
TestWifiMonitor
testWifiMonitor
(
true
)
;
mozilla
:
:
SpinEventLoopUntil
(
"
TestWifiMonitorListenerRemoval
:
:
WaitForScan_OnChange
"
_ns
[
&
]
(
)
{
MOZ_ASSERT
(
sCalled
=
=
0
|
|
sCalled
=
=
2
)
;
return
sCalled
=
=
2
;
}
)
;
EXPECT_EQ
(
sCalled
2u
)
;
}
TEST
(
TestWifiMonitorListenerRemoval
RemoveDuringOnError
)
{
sCalled
=
0
;
TestWifiMonitor
testWifiMonitor
(
false
)
;
mozilla
:
:
SpinEventLoopUntil
(
"
TestWifiMonitorListenerRemoval
:
:
WaitForScan_OnError
"
_ns
[
&
]
(
)
{
MOZ_ASSERT
(
sCalled
=
=
0
|
|
sCalled
=
=
2
)
;
return
sCalled
=
=
2
;
}
)
;
EXPECT_EQ
(
sCalled
2u
)
;
}
}
