#
ifndef
NSWIFIAPSCANNERDBUS_H_
#
define
NSWIFIAPSCANNERDBUS_H_
#
define
DBUS_API_SUBJECT_TO_CHANGE
#
include
<
dbus
/
dbus
.
h
>
#
include
"
WifiScanner
.
h
"
class
nsIWifiAccessPoint
;
class
nsWifiAccessPoint
;
namespace
mozilla
{
using
AccessPointArray
=
nsTArray
<
RefPtr
<
nsIWifiAccessPoint
>
>
;
class
WifiScannerImpl
final
:
public
WifiScanner
{
public
:
explicit
WifiScannerImpl
(
)
;
~
WifiScannerImpl
(
)
;
nsresult
GetAccessPointsFromWLAN
(
AccessPointArray
&
accessPoints
)
;
private
:
nsresult
SendGetDevices
(
AccessPointArray
&
accessPoints
)
;
nsresult
SendGetDeviceType
(
const
char
*
aPath
AccessPointArray
&
accessPoints
)
;
nsresult
SendGetAccessPoints
(
const
char
*
aPath
AccessPointArray
&
accessPoints
)
;
nsresult
SendGetAPProperties
(
const
char
*
aPath
AccessPointArray
&
accessPoints
)
;
nsresult
IdentifyDevices
(
DBusMessage
*
aMsg
AccessPointArray
&
accessPoints
)
;
nsresult
IdentifyDeviceType
(
DBusMessage
*
aMsg
const
char
*
aDevicePath
AccessPointArray
&
accessPoints
)
;
nsresult
IdentifyAccessPoints
(
DBusMessage
*
aMsg
AccessPointArray
&
accessPoints
)
;
nsresult
IdentifyAPProperties
(
DBusMessage
*
aMsg
AccessPointArray
&
accessPoints
)
;
nsresult
StoreSsid
(
DBusMessageIter
*
aVariant
nsWifiAccessPoint
*
aAp
)
;
nsresult
SetMac
(
DBusMessageIter
*
aVariant
nsWifiAccessPoint
*
aAp
)
;
nsresult
GetDBusIterator
(
DBusMessage
*
aMsg
DBusMessageIter
*
aIterArray
)
;
RefPtr
<
DBusConnection
>
mConnection
;
}
;
}
#
endif
