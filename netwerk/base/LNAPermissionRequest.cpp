#
include
"
LNAPermissionRequest
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
:
:
net
{
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
LNAPermissionRequest
ContentPermissionRequestBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
LNAPermissionRequest
ContentPermissionRequestBase
)
LNAPermissionRequest
:
:
LNAPermissionRequest
(
PermissionPromptCallback
&
&
aCallback
nsILoadInfo
*
aLoadInfo
const
nsACString
&
aType
)
:
dom
:
:
ContentPermissionRequestBase
(
aLoadInfo
-
>
GetLoadingPrincipal
(
)
nullptr
(
aType
.
Equals
(
LOCAL_HOST_PERMISSION_KEY
)
?
"
network
.
localhost
"
_ns
:
"
network
.
localnetwork
"
_ns
)
aType
)
mPermissionPromptCallback
(
std
:
:
move
(
aCallback
)
)
{
MOZ_ASSERT
(
aLoadInfo
)
;
aLoadInfo
-
>
GetTriggeringPrincipal
(
getter_AddRefs
(
mPrincipal
)
)
;
mTopLevelPrincipal
=
aLoadInfo
-
>
GetTopLevelPrincipal
(
)
;
if
(
!
mTopLevelPrincipal
)
{
mTopLevelPrincipal
=
mPrincipal
;
}
mLoadInfo
=
aLoadInfo
;
MOZ_ASSERT
(
mPrincipal
)
;
}
NS_IMETHODIMP
LNAPermissionRequest
:
:
GetElement
(
mozilla
:
:
dom
:
:
Element
*
*
aElement
)
{
NS_ENSURE_ARG_POINTER
(
aElement
)
;
RefPtr
<
mozilla
:
:
dom
:
:
BrowsingContext
>
bc
;
mLoadInfo
-
>
GetBrowsingContext
(
getter_AddRefs
(
bc
)
)
;
if
(
!
bc
)
{
return
NS_ERROR_FAILURE
;
}
return
bc
-
>
GetTopFrameElement
(
aElement
)
;
}
NS_IMETHODIMP
LNAPermissionRequest
:
:
Cancel
(
)
{
mPermissionPromptCallback
(
false
mType
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LNAPermissionRequest
:
:
Allow
(
JS
:
:
Handle
<
JS
:
:
Value
>
aChoices
)
{
mPermissionPromptCallback
(
true
mType
)
;
return
NS_OK
;
}
nsresult
LNAPermissionRequest
:
:
RequestPermission
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
CheckPermissionDelegate
(
)
)
{
return
Cancel
(
)
;
}
PromptResult
pr
=
CheckPromptPrefs
(
)
;
if
(
pr
=
=
PromptResult
:
:
Granted
)
{
return
Allow
(
JS
:
:
UndefinedHandleValue
)
;
}
if
(
pr
=
=
PromptResult
:
:
Denied
)
{
return
Cancel
(
)
;
}
if
(
NS_SUCCEEDED
(
dom
:
:
nsContentPermissionUtils
:
:
AskPermission
(
this
mWindow
)
)
)
{
return
NS_OK
;
}
return
Cancel
(
)
;
}
}
