#
ifndef
nsDNSPrefetch_h___
#
define
nsDNSPrefetch_h___
#
include
<
functional
>
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsIDNSService
.
h
"
class
nsIURI
;
class
nsIDNSHTTPSSVCRecord
;
class
nsDNSPrefetch
final
:
public
nsIDNSListener
{
~
nsDNSPrefetch
(
)
=
default
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDNSLISTENER
nsDNSPrefetch
(
nsIURI
*
aURI
mozilla
:
:
OriginAttributes
&
aOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
nsIDNSListener
*
aListener
bool
storeTiming
)
;
nsDNSPrefetch
(
nsIURI
*
aURI
mozilla
:
:
OriginAttributes
&
aOriginAttributes
nsIRequest
:
:
TRRMode
aTRRMode
)
;
bool
TimingsValid
(
)
const
{
return
!
mStartTimestamp
.
IsNull
(
)
&
&
!
mEndTimestamp
.
IsNull
(
)
;
}
const
mozilla
:
:
TimeStamp
&
StartTimestamp
(
)
const
{
return
mStartTimestamp
;
}
const
mozilla
:
:
TimeStamp
&
EndTimestamp
(
)
const
{
return
mEndTimestamp
;
}
static
nsresult
Initialize
(
nsIDNSService
*
aDNSService
)
;
static
nsresult
Shutdown
(
)
;
nsresult
PrefetchHigh
(
bool
refreshDNS
=
false
)
;
nsresult
PrefetchMedium
(
bool
refreshDNS
=
false
)
;
nsresult
PrefetchLow
(
bool
refreshDNS
=
false
)
;
nsresult
FetchHTTPSSVC
(
bool
aRefreshDNS
bool
aPrefetch
std
:
:
function
<
void
(
nsIDNSHTTPSSVCRecord
*
)
>
&
&
aCallback
)
;
private
:
nsCString
mHostname
;
int32_t
mPort
{
-
1
}
;
mozilla
:
:
OriginAttributes
mOriginAttributes
;
bool
mStoreTiming
;
nsIRequest
:
:
TRRMode
mTRRMode
;
mozilla
:
:
TimeStamp
mStartTimestamp
;
mozilla
:
:
TimeStamp
mEndTimestamp
;
nsWeakPtr
mListener
;
nsresult
Prefetch
(
nsIDNSService
:
:
DNSFlags
flags
)
;
}
;
#
endif
