#
include
"
mozilla
/
LoadInfo
.
h
"
#
include
"
js
/
Array
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ExpandedPrincipal
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
dom
/
ClientSource
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceStorage
.
h
"
#
include
"
mozilla
/
dom
/
BrowserChild
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
WindowGlobalParent
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
StaticPrefs_network
.
h
"
#
include
"
mozilla
/
StaticPrefs_security
.
h
"
#
include
"
mozIThirdPartyUtil
.
h
"
#
include
"
ThirdPartyUtil
.
h
"
#
include
"
nsFrameLoader
.
h
"
#
include
"
nsFrameLoaderOwner
.
h
"
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIScriptElement
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsIXPConnect
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
nsMixedContentBlocker
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsRedirectHistoryEntry
.
h
"
#
include
"
nsSandboxFlags
.
h
"
#
include
"
nsICookieService
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
namespace
net
{
static
nsContentPolicyType
InternalContentPolicyTypeForFrame
(
CanonicalBrowsingContext
*
aBrowsingContext
)
{
const
auto
&
maybeEmbedderElementType
=
aBrowsingContext
-
>
GetEmbedderElementType
(
)
;
MOZ_ASSERT
(
maybeEmbedderElementType
.
isSome
(
)
)
;
auto
embedderElementType
=
maybeEmbedderElementType
.
value
(
)
;
return
embedderElementType
.
EqualsLiteral
(
"
iframe
"
)
?
nsIContentPolicy
:
:
TYPE_INTERNAL_IFRAME
:
nsIContentPolicy
:
:
TYPE_INTERNAL_FRAME
;
}
already_AddRefed
<
LoadInfo
>
LoadInfo
:
:
CreateForDocument
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
const
OriginAttributes
&
aOriginAttributes
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
{
return
MakeAndAddRef
<
LoadInfo
>
(
aBrowsingContext
aTriggeringPrincipal
aOriginAttributes
aSecurityFlags
aSandboxFlags
)
;
}
already_AddRefed
<
LoadInfo
>
LoadInfo
:
:
CreateForFrame
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
{
return
MakeAndAddRef
<
LoadInfo
>
(
aBrowsingContext
aTriggeringPrincipal
aSecurityFlags
aSandboxFlags
)
;
}
already_AddRefed
<
LoadInfo
>
LoadInfo
:
:
CreateForNonDocument
(
dom
:
:
WindowGlobalParent
*
aParentWGP
nsIPrincipal
*
aTriggeringPrincipal
nsContentPolicyType
aContentPolicyType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
{
return
MakeAndAddRef
<
LoadInfo
>
(
aParentWGP
aTriggeringPrincipal
aContentPolicyType
aSecurityFlags
aSandboxFlags
)
;
}
LoadInfo
:
:
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsINode
*
aLoadingContext
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aLoadingClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
&
aController
uint32_t
aSandboxFlags
)
:
mLoadingPrincipal
(
aLoadingContext
?
aLoadingContext
-
>
NodePrincipal
(
)
:
aLoadingPrincipal
)
mTriggeringPrincipal
(
aTriggeringPrincipal
?
aTriggeringPrincipal
:
mLoadingPrincipal
.
get
(
)
)
mSandboxedNullPrincipalID
(
nsID
:
:
GenerateUUID
(
)
)
mClientInfo
(
aLoadingClientInfo
)
mController
(
aController
)
mLoadingContext
(
do_GetWeakReference
(
aLoadingContext
)
)
mSecurityFlags
(
aSecurityFlags
)
mSandboxFlags
(
aSandboxFlags
)
mInternalContentPolicyType
(
aContentPolicyType
)
{
MOZ_ASSERT
(
mLoadingPrincipal
)
;
MOZ_ASSERT
(
mTriggeringPrincipal
)
;
#
ifdef
DEBUG
bool
skipContentTypeCheck
=
false
;
skipContentTypeCheck
=
Preferences
:
:
GetBool
(
"
network
.
loadinfo
.
skip_type_assertion
"
)
;
#
endif
MOZ_ASSERT
(
skipContentTypeCheck
|
|
mLoadingPrincipal
|
|
mInternalContentPolicyType
!
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
;
MOZ_DIAGNOSTIC_ASSERT
(
aController
.
isNothing
(
)
|
|
!
nsContentUtils
:
:
IsNonSubresourceInternalPolicyType
(
mInternalContentPolicyType
)
)
;
MOZ_ASSERT
(
!
aLoadingContext
|
|
!
aLoadingPrincipal
|
|
aLoadingContext
-
>
NodePrincipal
(
)
=
=
aLoadingPrincipal
)
;
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
mForceInheritPrincipalDropped
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
)
;
mSecurityFlags
&
=
~
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
;
}
ExtContentPolicyType
externalType
=
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
aContentPolicyType
)
;
if
(
aLoadingContext
)
{
if
(
mClientInfo
.
isNothing
(
)
)
{
mClientInfo
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetClientInfo
(
)
;
}
if
(
mController
.
isNothing
(
)
&
&
!
nsContentUtils
:
:
IsNonSubresourceInternalPolicyType
(
mInternalContentPolicyType
)
)
{
mController
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetController
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
contextOuter
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetWindow
(
)
;
if
(
contextOuter
)
{
ComputeIsThirdPartyContext
(
contextOuter
)
;
RefPtr
<
dom
:
:
BrowsingContext
>
bc
=
contextOuter
-
>
GetBrowsingContext
(
)
;
MOZ_ASSERT
(
bc
)
;
mBrowsingContextID
=
bc
-
>
Id
(
)
;
nsGlobalWindowInner
*
innerWindow
=
nsGlobalWindowInner
:
:
Cast
(
contextOuter
-
>
GetCurrentInnerWindow
(
)
)
;
if
(
innerWindow
)
{
mTopLevelPrincipal
=
innerWindow
-
>
GetTopLevelAntiTrackingPrincipal
(
)
;
if
(
!
mTopLevelPrincipal
&
&
externalType
=
=
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
&
&
bc
-
>
IsTop
(
)
)
{
mTopLevelPrincipal
=
innerWindow
-
>
GetPrincipal
(
)
;
}
}
mCookieJarSettings
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
CookieJarSettings
(
)
;
}
mInnerWindowID
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
InnerWindowID
(
)
;
RefPtr
<
WindowContext
>
ctx
=
WindowContext
:
:
GetById
(
mInnerWindowID
)
;
if
(
ctx
)
{
mLoadingEmbedderPolicy
=
ctx
-
>
GetEmbedderPolicy
(
)
;
}
mDocumentHasUserInteracted
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
UserHasInteracted
(
)
;
mHttpsOnlyStatus
|
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
HttpsOnlyStatus
(
)
;
RefPtr
<
nsFrameLoaderOwner
>
frameLoaderOwner
=
do_QueryObject
(
aLoadingContext
)
;
RefPtr
<
nsFrameLoader
>
fl
=
frameLoaderOwner
?
frameLoaderOwner
-
>
GetFrameLoader
(
)
:
nullptr
;
if
(
fl
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
fl
-
>
GetDocShell
(
IgnoreErrors
(
)
)
;
if
(
docShell
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
outerWindow
=
do_GetInterface
(
docShell
)
;
if
(
outerWindow
)
{
RefPtr
<
dom
:
:
BrowsingContext
>
bc
=
outerWindow
-
>
GetBrowsingContext
(
)
;
mFrameBrowsingContextID
=
bc
?
bc
-
>
Id
(
)
:
0
;
}
}
}
mBlockAllMixedContent
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetBlockAllMixedContent
(
false
)
|
|
(
nsContentUtils
:
:
IsPreloadType
(
mInternalContentPolicyType
)
&
&
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetBlockAllMixedContent
(
true
)
)
;
if
(
mLoadingPrincipal
&
&
BasePrincipal
:
:
Cast
(
mTriggeringPrincipal
)
-
>
OverridesCSP
(
mLoadingPrincipal
)
)
{
mUpgradeInsecureRequests
=
false
;
}
else
{
mUpgradeInsecureRequests
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetUpgradeInsecureRequests
(
false
)
|
|
(
nsContentUtils
:
:
IsPreloadType
(
mInternalContentPolicyType
)
&
&
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetUpgradeInsecureRequests
(
true
)
)
;
}
if
(
nsContentUtils
:
:
IsUpgradableDisplayType
(
externalType
)
)
{
if
(
mLoadingPrincipal
-
>
SchemeIs
(
"
https
"
)
)
{
if
(
StaticPrefs
:
:
security_mixed_content_upgrade_display_content
(
)
)
{
mBrowserUpgradeInsecureRequests
=
true
;
}
else
{
mBrowserWouldUpgradeInsecureRequests
=
true
;
}
}
}
}
mOriginAttributes
=
mLoadingPrincipal
-
>
OriginAttributesRef
(
)
;
if
(
aLoadingContext
)
{
nsCOMPtr
<
nsILoadContext
>
loadContext
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetLoadContext
(
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
if
(
loadContext
&
&
docShell
&
&
docShell
-
>
GetBrowsingContext
(
)
-
>
IsContent
(
)
)
{
bool
usePrivateBrowsing
;
nsresult
rv
=
loadContext
-
>
GetUsePrivateBrowsing
(
&
usePrivateBrowsing
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mOriginAttributes
.
SyncAttributesWithPrivateBrowsing
(
usePrivateBrowsing
)
;
}
}
}
if
(
aLoadingContext
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
aLoadingContext
-
>
OwnerDoc
(
)
-
>
GetDocShell
(
)
;
if
(
docShell
)
{
if
(
docShell
-
>
GetBrowsingContext
(
)
-
>
IsChrome
(
)
)
{
MOZ_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
"
chrome
docshell
shouldn
'
t
have
mPrivateBrowsingId
set
.
"
)
;
}
}
}
if
(
!
nsContentUtils
:
:
IsPreloadType
(
mInternalContentPolicyType
)
)
{
nsCOMPtr
<
nsIScriptElement
>
script
=
do_QueryInterface
(
aLoadingContext
)
;
if
(
script
&
&
script
-
>
GetParserCreated
(
)
!
=
mozilla
:
:
dom
:
:
NOT_FROM_PARSER
)
{
mParserCreatedScript
=
true
;
}
}
}
LoadInfo
:
:
LoadInfo
(
nsPIDOMWindowOuter
*
aOuterWindow
nsIPrincipal
*
aTriggeringPrincipal
nsISupports
*
aContextForTopLevelLoad
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
:
mTriggeringPrincipal
(
aTriggeringPrincipal
)
mSandboxedNullPrincipalID
(
nsID
:
:
GenerateUUID
(
)
)
mContextForTopLevelLoad
(
do_GetWeakReference
(
aContextForTopLevelLoad
)
)
mSecurityFlags
(
aSecurityFlags
)
mSandboxFlags
(
aSandboxFlags
)
mInternalContentPolicyType
(
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
MOZ_ASSERT
(
aOuterWindow
)
;
MOZ_ASSERT
(
mTriggeringPrincipal
)
;
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
mForceInheritPrincipalDropped
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
)
;
mSecurityFlags
&
=
~
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
;
}
RefPtr
<
BrowsingContext
>
bc
=
aOuterWindow
-
>
GetBrowsingContext
(
)
;
mBrowsingContextID
=
bc
?
bc
-
>
Id
(
)
:
0
;
nsGlobalWindowInner
*
innerWindow
=
nsGlobalWindowInner
:
:
Cast
(
aOuterWindow
-
>
GetCurrentInnerWindow
(
)
)
;
if
(
innerWindow
)
{
mTopLevelPrincipal
=
innerWindow
-
>
GetTopLevelAntiTrackingPrincipal
(
)
;
}
nsCOMPtr
<
nsIDocShell
>
docShell
=
aOuterWindow
-
>
GetDocShell
(
)
;
MOZ_ASSERT
(
docShell
)
;
mOriginAttributes
=
nsDocShell
:
:
Cast
(
docShell
)
-
>
GetOriginAttributes
(
)
;
if
(
aSecurityFlags
!
=
nsILoadInfo
:
:
SEC_ONLY_FOR_EXPLICIT_CONTENTSEC_CHECK
)
{
MOZ_ASSERT
(
aOuterWindow
-
>
GetBrowsingContext
(
)
-
>
IsTop
(
)
)
;
}
#
ifdef
DEBUG
if
(
docShell
-
>
GetBrowsingContext
(
)
-
>
IsChrome
(
)
)
{
MOZ_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
"
chrome
docshell
shouldn
'
t
have
mPrivateBrowsingId
set
.
"
)
;
}
#
endif
bool
isPrivate
=
mOriginAttributes
.
mPrivateBrowsingId
>
0
;
mCookieJarSettings
=
CookieJarSettings
:
:
Create
(
isPrivate
?
CookieJarSettings
:
:
ePrivate
:
CookieJarSettings
:
:
eRegular
)
;
}
LoadInfo
:
:
LoadInfo
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
const
OriginAttributes
&
aOriginAttributes
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
:
mTriggeringPrincipal
(
aTriggeringPrincipal
)
mSandboxedNullPrincipalID
(
nsID
:
:
GenerateUUID
(
)
)
mSecurityFlags
(
aSecurityFlags
)
mSandboxFlags
(
aSandboxFlags
)
mInternalContentPolicyType
(
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
MOZ_ASSERT
(
aBrowsingContext
)
;
MOZ_ASSERT
(
mTriggeringPrincipal
)
;
MOZ_ASSERT
(
aSecurityFlags
!
=
nsILoadInfo
:
:
SEC_ONLY_FOR_EXPLICIT_CONTENTSEC_CHECK
)
;
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
mForceInheritPrincipalDropped
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
)
;
mSecurityFlags
&
=
~
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
;
}
mBrowsingContextID
=
aBrowsingContext
-
>
Id
(
)
;
mOriginAttributes
=
aOriginAttributes
;
#
ifdef
DEBUG
if
(
aBrowsingContext
-
>
IsChrome
(
)
)
{
MOZ_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
"
chrome
docshell
shouldn
'
t
have
mPrivateBrowsingId
set
.
"
)
;
}
#
endif
bool
isPrivate
=
mOriginAttributes
.
mPrivateBrowsingId
>
0
;
mCookieJarSettings
=
CookieJarSettings
:
:
Create
(
isPrivate
?
CookieJarSettings
:
:
ePrivate
:
CookieJarSettings
:
:
eRegular
)
;
}
LoadInfo
:
:
LoadInfo
(
dom
:
:
WindowGlobalParent
*
aParentWGP
nsIPrincipal
*
aTriggeringPrincipal
nsContentPolicyType
aContentPolicyType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
:
mTriggeringPrincipal
(
aTriggeringPrincipal
)
mSandboxedNullPrincipalID
(
nsID
:
:
GenerateUUID
(
)
)
mSecurityFlags
(
aSecurityFlags
)
mSandboxFlags
(
aSandboxFlags
)
mInternalContentPolicyType
(
aContentPolicyType
)
{
CanonicalBrowsingContext
*
parentBC
=
aParentWGP
-
>
BrowsingContext
(
)
;
MOZ_ASSERT
(
parentBC
)
;
ComputeAncestors
(
parentBC
mAncestorPrincipals
mAncestorBrowsingContextIDs
)
;
RefPtr
<
WindowGlobalParent
>
topLevelWGP
=
aParentWGP
-
>
TopWindowContext
(
)
;
if
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
{
mForceInheritPrincipalDropped
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
)
;
mSecurityFlags
&
=
~
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
;
}
mClientInfo
=
aParentWGP
-
>
GetClientInfo
(
)
;
mLoadingPrincipal
=
aParentWGP
-
>
DocumentPrincipal
(
)
;
ComputeIsThirdPartyContext
(
aParentWGP
)
;
mBrowsingContextID
=
parentBC
-
>
Id
(
)
;
mCookieJarSettings
=
aParentWGP
-
>
CookieJarSettings
(
)
;
if
(
topLevelWGP
-
>
BrowsingContext
(
)
-
>
IsTop
(
)
)
{
if
(
mCookieJarSettings
)
{
bool
stopAtOurLevel
=
mCookieJarSettings
-
>
GetCookieBehavior
(
)
=
=
nsICookieService
:
:
BEHAVIOR_REJECT_TRACKER
;
if
(
!
stopAtOurLevel
|
|
topLevelWGP
-
>
OuterWindowId
(
)
!
=
aParentWGP
-
>
OuterWindowId
(
)
)
{
mTopLevelPrincipal
=
topLevelWGP
-
>
DocumentPrincipal
(
)
;
}
}
}
if
(
!
mTopLevelPrincipal
&
&
parentBC
-
>
IsTop
(
)
)
{
mTopLevelPrincipal
=
aParentWGP
-
>
DocumentPrincipal
(
)
;
}
mInnerWindowID
=
aParentWGP
-
>
InnerWindowId
(
)
;
mDocumentHasUserInteracted
=
aParentWGP
-
>
DocumentHasUserInteracted
(
)
;
mBlockAllMixedContent
=
aParentWGP
-
>
GetDocumentBlockAllMixedContent
(
)
;
if
(
mTopLevelPrincipal
&
&
BasePrincipal
:
:
Cast
(
mTriggeringPrincipal
)
-
>
OverridesCSP
(
mTopLevelPrincipal
)
)
{
mUpgradeInsecureRequests
=
false
;
}
else
{
mUpgradeInsecureRequests
=
aParentWGP
-
>
GetDocumentUpgradeInsecureRequests
(
)
;
}
mOriginAttributes
=
mLoadingPrincipal
-
>
OriginAttributesRef
(
)
;
if
(
parentBC
-
>
IsContent
(
)
)
{
mOriginAttributes
.
SyncAttributesWithPrivateBrowsing
(
parentBC
-
>
UsePrivateBrowsing
(
)
)
;
}
mHttpsOnlyStatus
|
=
aParentWGP
-
>
HttpsOnlyStatus
(
)
;
if
(
parentBC
-
>
IsChrome
(
)
)
{
MOZ_ASSERT
(
mOriginAttributes
.
mPrivateBrowsingId
=
=
0
"
chrome
docshell
shouldn
'
t
have
mPrivateBrowsingId
set
.
"
)
;
}
RefPtr
<
WindowContext
>
ctx
=
WindowContext
:
:
GetById
(
mInnerWindowID
)
;
if
(
ctx
)
{
mLoadingEmbedderPolicy
=
ctx
-
>
GetEmbedderPolicy
(
)
;
}
}
LoadInfo
:
:
LoadInfo
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
:
LoadInfo
(
aBrowsingContext
-
>
GetParentWindowContext
(
)
aTriggeringPrincipal
InternalContentPolicyTypeForFrame
(
aBrowsingContext
)
aSecurityFlags
aSandboxFlags
)
{
mFrameBrowsingContextID
=
aBrowsingContext
-
>
Id
(
)
;
}
LoadInfo
:
:
LoadInfo
(
const
LoadInfo
&
rhs
)
:
mLoadingPrincipal
(
rhs
.
mLoadingPrincipal
)
mTriggeringPrincipal
(
rhs
.
mTriggeringPrincipal
)
mPrincipalToInherit
(
rhs
.
mPrincipalToInherit
)
mTopLevelPrincipal
(
rhs
.
mTopLevelPrincipal
)
mResultPrincipalURI
(
rhs
.
mResultPrincipalURI
)
mChannelCreationOriginalURI
(
rhs
.
mChannelCreationOriginalURI
)
mCookieJarSettings
(
rhs
.
mCookieJarSettings
)
mCspToInherit
(
rhs
.
mCspToInherit
)
mSandboxedNullPrincipalID
(
rhs
.
mSandboxedNullPrincipalID
)
mClientInfo
(
rhs
.
mClientInfo
)
mController
(
rhs
.
mController
)
mPerformanceStorage
(
rhs
.
mPerformanceStorage
)
mLoadingContext
(
rhs
.
mLoadingContext
)
mContextForTopLevelLoad
(
rhs
.
mContextForTopLevelLoad
)
mSecurityFlags
(
rhs
.
mSecurityFlags
)
mSandboxFlags
(
rhs
.
mSandboxFlags
)
mTriggeringSandboxFlags
(
rhs
.
mTriggeringSandboxFlags
)
mInternalContentPolicyType
(
rhs
.
mInternalContentPolicyType
)
mTainting
(
rhs
.
mTainting
)
mBlockAllMixedContent
(
rhs
.
mBlockAllMixedContent
)
mUpgradeInsecureRequests
(
rhs
.
mUpgradeInsecureRequests
)
mBrowserUpgradeInsecureRequests
(
rhs
.
mBrowserUpgradeInsecureRequests
)
mBrowserDidUpgradeInsecureRequests
(
rhs
.
mBrowserDidUpgradeInsecureRequests
)
mBrowserWouldUpgradeInsecureRequests
(
rhs
.
mBrowserWouldUpgradeInsecureRequests
)
mForceAllowDataURI
(
rhs
.
mForceAllowDataURI
)
mAllowInsecureRedirectToDataURI
(
rhs
.
mAllowInsecureRedirectToDataURI
)
mSkipContentPolicyCheckForWebRequest
(
rhs
.
mSkipContentPolicyCheckForWebRequest
)
mOriginalFrameSrcLoad
(
rhs
.
mOriginalFrameSrcLoad
)
mForceInheritPrincipalDropped
(
rhs
.
mForceInheritPrincipalDropped
)
mInnerWindowID
(
rhs
.
mInnerWindowID
)
mBrowsingContextID
(
rhs
.
mBrowsingContextID
)
mFrameBrowsingContextID
(
rhs
.
mFrameBrowsingContextID
)
mInitialSecurityCheckDone
(
rhs
.
mInitialSecurityCheckDone
)
mIsThirdPartyContext
(
rhs
.
mIsThirdPartyContext
)
mIsThirdPartyContextToTopWindow
(
rhs
.
mIsThirdPartyContextToTopWindow
)
mIsFormSubmission
(
rhs
.
mIsFormSubmission
)
mSendCSPViolationEvents
(
rhs
.
mSendCSPViolationEvents
)
mOriginAttributes
(
rhs
.
mOriginAttributes
)
mRedirectChainIncludingInternalRedirects
(
rhs
.
mRedirectChainIncludingInternalRedirects
.
Clone
(
)
)
mRedirectChain
(
rhs
.
mRedirectChain
.
Clone
(
)
)
mAncestorPrincipals
(
rhs
.
mAncestorPrincipals
.
Clone
(
)
)
mAncestorBrowsingContextIDs
(
rhs
.
mAncestorBrowsingContextIDs
.
Clone
(
)
)
mCorsUnsafeHeaders
(
rhs
.
mCorsUnsafeHeaders
.
Clone
(
)
)
mRequestBlockingReason
(
rhs
.
mRequestBlockingReason
)
mForcePreflight
(
rhs
.
mForcePreflight
)
mIsPreflight
(
rhs
.
mIsPreflight
)
mLoadTriggeredFromExternal
(
rhs
.
mLoadTriggeredFromExternal
)
mDocumentHasUserInteracted
(
rhs
.
mDocumentHasUserInteracted
)
mAllowListFutureDocumentsCreatedFromThisRedirectChain
(
rhs
.
mAllowListFutureDocumentsCreatedFromThisRedirectChain
)
mNeedForCheckingAntiTrackingHeuristic
(
rhs
.
mNeedForCheckingAntiTrackingHeuristic
)
mCspNonce
(
rhs
.
mCspNonce
)
mSkipContentSniffing
(
rhs
.
mSkipContentSniffing
)
mHttpsOnlyStatus
(
rhs
.
mHttpsOnlyStatus
)
mHasValidUserGestureActivation
(
rhs
.
mHasValidUserGestureActivation
)
mAllowDeprecatedSystemRequests
(
rhs
.
mAllowDeprecatedSystemRequests
)
mIsInDevToolsContext
(
rhs
.
mIsInDevToolsContext
)
mParserCreatedScript
(
rhs
.
mParserCreatedScript
)
mStoragePermission
(
rhs
.
mStoragePermission
)
mIsMetaRefresh
(
rhs
.
mIsMetaRefresh
)
mIsFromProcessingFrameAttributes
(
rhs
.
mIsFromProcessingFrameAttributes
)
mIsMediaRequest
(
rhs
.
mIsMediaRequest
)
mIsMediaInitialRequest
(
rhs
.
mIsMediaInitialRequest
)
mIsFromObjectOrEmbed
(
rhs
.
mIsFromObjectOrEmbed
)
mLoadingEmbedderPolicy
(
rhs
.
mLoadingEmbedderPolicy
)
mUnstrippedURI
(
rhs
.
mUnstrippedURI
)
{
}
LoadInfo
:
:
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsIPrincipal
*
aTopLevelPrincipal
nsIURI
*
aResultPrincipalURI
nsICookieJarSettings
*
aCookieJarSettings
nsIContentSecurityPolicy
*
aCspToInherit
const
nsID
&
aSandboxedNullPrincipalID
const
Maybe
<
ClientInfo
>
&
aClientInfo
const
Maybe
<
ClientInfo
>
&
aReservedClientInfo
const
Maybe
<
ClientInfo
>
&
aInitialClientInfo
const
Maybe
<
ServiceWorkerDescriptor
>
&
aController
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
uint32_t
aTriggeringSandboxFlags
nsContentPolicyType
aContentPolicyType
LoadTainting
aTainting
bool
aBlockAllMixedContent
bool
aUpgradeInsecureRequests
bool
aBrowserUpgradeInsecureRequests
bool
aBrowserDidUpgradeInsecureRequests
bool
aBrowserWouldUpgradeInsecureRequests
bool
aForceAllowDataURI
bool
aAllowInsecureRedirectToDataURI
bool
aSkipContentPolicyCheckForWebRequest
bool
aOriginalFrameSrcLoad
bool
aForceInheritPrincipalDropped
uint64_t
aInnerWindowID
uint64_t
aBrowsingContextID
uint64_t
aFrameBrowsingContextID
bool
aInitialSecurityCheckDone
bool
aIsThirdPartyContext
bool
aIsThirdPartyContextToTopWindow
bool
aIsFormSubmission
bool
aSendCSPViolationEvents
const
OriginAttributes
&
aOriginAttributes
RedirectHistoryArray
&
&
aRedirectChainIncludingInternalRedirects
RedirectHistoryArray
&
&
aRedirectChain
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
&
aAncestorPrincipals
const
nsTArray
<
uint64_t
>
&
aAncestorBrowsingContextIDs
const
nsTArray
<
nsCString
>
&
aCorsUnsafeHeaders
bool
aForcePreflight
bool
aIsPreflight
bool
aLoadTriggeredFromExternal
bool
aServiceWorkerTaintingSynthesized
bool
aDocumentHasUserInteracted
bool
aAllowListFutureDocumentsCreatedFromThisRedirectChain
bool
aNeedForCheckingAntiTrackingHeuristic
const
nsAString
&
aCspNonce
bool
aSkipContentSniffing
uint32_t
aHttpsOnlyStatus
bool
aHasValidUserGestureActivation
bool
aAllowDeprecatedSystemRequests
bool
aIsInDevToolsContext
bool
aParserCreatedScript
nsILoadInfo
:
:
StoragePermissionState
aStoragePermission
bool
aIsMetaRefresh
uint32_t
aRequestBlockingReason
nsINode
*
aLoadingContext
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aLoadingEmbedderPolicy
nsIURI
*
aUnstrippedURI
)
:
mLoadingPrincipal
(
aLoadingPrincipal
)
mTriggeringPrincipal
(
aTriggeringPrincipal
)
mPrincipalToInherit
(
aPrincipalToInherit
)
mTopLevelPrincipal
(
aTopLevelPrincipal
)
mResultPrincipalURI
(
aResultPrincipalURI
)
mCookieJarSettings
(
aCookieJarSettings
)
mCspToInherit
(
aCspToInherit
)
mSandboxedNullPrincipalID
(
aSandboxedNullPrincipalID
)
mClientInfo
(
aClientInfo
)
mReservedClientInfo
(
aReservedClientInfo
)
mInitialClientInfo
(
aInitialClientInfo
)
mController
(
aController
)
mLoadingContext
(
do_GetWeakReference
(
aLoadingContext
)
)
mSecurityFlags
(
aSecurityFlags
)
mSandboxFlags
(
aSandboxFlags
)
mTriggeringSandboxFlags
(
aTriggeringSandboxFlags
)
mInternalContentPolicyType
(
aContentPolicyType
)
mTainting
(
aTainting
)
mBlockAllMixedContent
(
aBlockAllMixedContent
)
mUpgradeInsecureRequests
(
aUpgradeInsecureRequests
)
mBrowserUpgradeInsecureRequests
(
aBrowserUpgradeInsecureRequests
)
mBrowserDidUpgradeInsecureRequests
(
aBrowserDidUpgradeInsecureRequests
)
mBrowserWouldUpgradeInsecureRequests
(
aBrowserWouldUpgradeInsecureRequests
)
mForceAllowDataURI
(
aForceAllowDataURI
)
mAllowInsecureRedirectToDataURI
(
aAllowInsecureRedirectToDataURI
)
mSkipContentPolicyCheckForWebRequest
(
aSkipContentPolicyCheckForWebRequest
)
mOriginalFrameSrcLoad
(
aOriginalFrameSrcLoad
)
mForceInheritPrincipalDropped
(
aForceInheritPrincipalDropped
)
mInnerWindowID
(
aInnerWindowID
)
mBrowsingContextID
(
aBrowsingContextID
)
mFrameBrowsingContextID
(
aFrameBrowsingContextID
)
mInitialSecurityCheckDone
(
aInitialSecurityCheckDone
)
mIsThirdPartyContext
(
aIsThirdPartyContext
)
mIsThirdPartyContextToTopWindow
(
aIsThirdPartyContextToTopWindow
)
mIsFormSubmission
(
aIsFormSubmission
)
mSendCSPViolationEvents
(
aSendCSPViolationEvents
)
mOriginAttributes
(
aOriginAttributes
)
mRedirectChainIncludingInternalRedirects
(
std
:
:
move
(
aRedirectChainIncludingInternalRedirects
)
)
mRedirectChain
(
std
:
:
move
(
aRedirectChain
)
)
mAncestorPrincipals
(
std
:
:
move
(
aAncestorPrincipals
)
)
mAncestorBrowsingContextIDs
(
aAncestorBrowsingContextIDs
.
Clone
(
)
)
mCorsUnsafeHeaders
(
aCorsUnsafeHeaders
.
Clone
(
)
)
mRequestBlockingReason
(
aRequestBlockingReason
)
mForcePreflight
(
aForcePreflight
)
mIsPreflight
(
aIsPreflight
)
mLoadTriggeredFromExternal
(
aLoadTriggeredFromExternal
)
mServiceWorkerTaintingSynthesized
(
aServiceWorkerTaintingSynthesized
)
mDocumentHasUserInteracted
(
aDocumentHasUserInteracted
)
mAllowListFutureDocumentsCreatedFromThisRedirectChain
(
aAllowListFutureDocumentsCreatedFromThisRedirectChain
)
mNeedForCheckingAntiTrackingHeuristic
(
aNeedForCheckingAntiTrackingHeuristic
)
mCspNonce
(
aCspNonce
)
mSkipContentSniffing
(
aSkipContentSniffing
)
mHttpsOnlyStatus
(
aHttpsOnlyStatus
)
mHasValidUserGestureActivation
(
aHasValidUserGestureActivation
)
mAllowDeprecatedSystemRequests
(
aAllowDeprecatedSystemRequests
)
mIsInDevToolsContext
(
aIsInDevToolsContext
)
mParserCreatedScript
(
aParserCreatedScript
)
mStoragePermission
(
aStoragePermission
)
mIsMetaRefresh
(
aIsMetaRefresh
)
mLoadingEmbedderPolicy
(
aLoadingEmbedderPolicy
)
mUnstrippedURI
(
aUnstrippedURI
)
{
MOZ_ASSERT
(
mLoadingPrincipal
|
|
aContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
;
MOZ_ASSERT
(
mTriggeringPrincipal
)
;
}
void
LoadInfo
:
:
ComputeAncestors
(
CanonicalBrowsingContext
*
aBC
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aAncestorPrincipals
nsTArray
<
uint64_t
>
&
aBrowsingContextIDs
)
{
MOZ_ASSERT
(
aAncestorPrincipals
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
aBrowsingContextIDs
.
IsEmpty
(
)
)
;
CanonicalBrowsingContext
*
ancestorBC
=
aBC
;
while
(
WindowGlobalParent
*
ancestorWGP
=
ancestorBC
-
>
GetParentWindowContext
(
)
)
{
ancestorBC
=
ancestorWGP
-
>
BrowsingContext
(
)
;
nsCOMPtr
<
nsIPrincipal
>
parentPrincipal
=
ancestorWGP
-
>
DocumentPrincipal
(
)
;
MOZ_ASSERT
(
parentPrincipal
"
Ancestor
principal
is
null
"
)
;
aAncestorPrincipals
.
AppendElement
(
parentPrincipal
.
forget
(
)
)
;
aBrowsingContextIDs
.
AppendElement
(
ancestorBC
-
>
Id
(
)
)
;
}
}
void
LoadInfo
:
:
ComputeIsThirdPartyContext
(
nsPIDOMWindowOuter
*
aOuterWindow
)
{
ExtContentPolicyType
type
=
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
mInternalContentPolicyType
)
;
if
(
type
=
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
mIsThirdPartyContext
=
false
;
return
;
}
nsCOMPtr
<
mozIThirdPartyUtil
>
util
(
do_GetService
(
THIRDPARTYUTIL_CONTRACTID
)
)
;
if
(
NS_WARN_IF
(
!
util
)
)
{
return
;
}
util
-
>
IsThirdPartyWindow
(
aOuterWindow
nullptr
&
mIsThirdPartyContext
)
;
}
void
LoadInfo
:
:
ComputeIsThirdPartyContext
(
dom
:
:
WindowGlobalParent
*
aGlobal
)
{
if
(
nsILoadInfo
:
:
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_DOCUMENT
)
{
mIsThirdPartyContext
=
false
;
return
;
}
ThirdPartyUtil
*
thirdPartyUtil
=
ThirdPartyUtil
:
:
GetInstance
(
)
;
if
(
!
thirdPartyUtil
)
{
return
;
}
thirdPartyUtil
-
>
IsThirdPartyGlobal
(
aGlobal
&
mIsThirdPartyContext
)
;
}
NS_IMPL_ADDREF
(
LoadInfo
)
bool
LoadInfo
:
:
DispatchRelease
(
)
{
if
(
NS_IsMainThread
(
)
)
{
return
false
;
}
NS_DispatchToMainThread
(
NewNonOwningRunnableMethod
(
"
net
:
:
LoadInfo
:
:
Release
"
this
&
LoadInfo
:
:
Release
)
NS_DISPATCH_NORMAL
)
;
return
true
;
}
NS_IMETHODIMP_
(
MozExternalRefCountType
)
LoadInfo
:
:
Release
(
)
{
nsrefcnt
count
=
mRefCnt
-
1
;
if
(
DispatchRelease
(
)
)
{
return
count
;
}
MOZ_ASSERT
(
0
!
=
mRefCnt
"
dup
release
"
)
;
count
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
count
"
LoadInfo
"
)
;
if
(
0
=
=
count
)
{
mRefCnt
=
1
;
delete
(
this
)
;
return
0
;
}
return
count
;
}
NS_IMPL_QUERY_INTERFACE
(
LoadInfo
nsILoadInfo
)
void
LoadInfo
:
:
ReleaseMembers
(
)
{
mCSPEventListener
=
nullptr
;
mCookieJarSettings
=
nullptr
;
mPerformanceStorage
=
nullptr
;
mLoadingPrincipal
=
nullptr
;
mTriggeringPrincipal
=
nullptr
;
mPrincipalToInherit
=
nullptr
;
mTopLevelPrincipal
=
nullptr
;
mResultPrincipalURI
=
nullptr
;
mCspToInherit
=
nullptr
;
mUnstrippedURI
=
nullptr
;
mAncestorPrincipals
.
Clear
(
)
;
}
LoadInfo
:
:
~
LoadInfo
(
)
{
ReleaseMembers
(
)
;
}
already_AddRefed
<
nsILoadInfo
>
LoadInfo
:
:
Clone
(
)
const
{
RefPtr
<
LoadInfo
>
copy
(
new
LoadInfo
(
*
this
)
)
;
return
copy
.
forget
(
)
;
}
already_AddRefed
<
nsILoadInfo
>
LoadInfo
:
:
CloneWithNewSecFlags
(
nsSecurityFlags
aSecurityFlags
)
const
{
RefPtr
<
LoadInfo
>
copy
(
new
LoadInfo
(
*
this
)
)
;
copy
-
>
mSecurityFlags
=
aSecurityFlags
;
return
copy
.
forget
(
)
;
}
already_AddRefed
<
nsILoadInfo
>
LoadInfo
:
:
CloneForNewRequest
(
)
const
{
RefPtr
<
LoadInfo
>
copy
(
new
LoadInfo
(
*
this
)
)
;
copy
-
>
mInitialSecurityCheckDone
=
false
;
copy
-
>
mRedirectChainIncludingInternalRedirects
.
Clear
(
)
;
copy
-
>
mRedirectChain
.
Clear
(
)
;
copy
-
>
mResultPrincipalURI
=
nullptr
;
return
copy
.
forget
(
)
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadingPrincipal
(
nsIPrincipal
*
*
aLoadingPrincipal
)
{
*
aLoadingPrincipal
=
do_AddRef
(
mLoadingPrincipal
)
.
take
(
)
;
return
NS_OK
;
}
nsIPrincipal
*
LoadInfo
:
:
VirtualGetLoadingPrincipal
(
)
{
return
mLoadingPrincipal
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetTriggeringPrincipal
(
nsIPrincipal
*
*
aTriggeringPrincipal
)
{
*
aTriggeringPrincipal
=
do_AddRef
(
mTriggeringPrincipal
)
.
take
(
)
;
return
NS_OK
;
}
nsIPrincipal
*
LoadInfo
:
:
TriggeringPrincipal
(
)
{
return
mTriggeringPrincipal
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetPrincipalToInherit
(
nsIPrincipal
*
*
aPrincipalToInherit
)
{
*
aPrincipalToInherit
=
do_AddRef
(
mPrincipalToInherit
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetPrincipalToInherit
(
nsIPrincipal
*
aPrincipalToInherit
)
{
MOZ_ASSERT
(
aPrincipalToInherit
"
must
be
a
valid
principal
to
inherit
"
)
;
mPrincipalToInherit
=
aPrincipalToInherit
;
return
NS_OK
;
}
nsIPrincipal
*
LoadInfo
:
:
PrincipalToInherit
(
)
{
return
mPrincipalToInherit
;
}
nsIPrincipal
*
LoadInfo
:
:
FindPrincipalToInherit
(
nsIChannel
*
aChannel
)
{
if
(
mPrincipalToInherit
)
{
return
mPrincipalToInherit
;
}
nsCOMPtr
<
nsIURI
>
uri
=
mResultPrincipalURI
;
if
(
!
uri
)
{
Unused
<
<
aChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
uri
)
)
;
}
auto
*
prin
=
BasePrincipal
:
:
Cast
(
mTriggeringPrincipal
)
;
return
prin
-
>
PrincipalToInherit
(
uri
)
;
}
const
nsID
&
LoadInfo
:
:
GetSandboxedNullPrincipalID
(
)
{
MOZ_ASSERT
(
!
mSandboxedNullPrincipalID
.
Equals
(
nsID
{
}
)
"
mSandboxedNullPrincipalID
wasn
'
t
initialized
?
"
)
;
return
mSandboxedNullPrincipalID
;
}
void
LoadInfo
:
:
ResetSandboxedNullPrincipalID
(
)
{
mSandboxedNullPrincipalID
=
nsID
:
:
GenerateUUID
(
)
;
}
nsIPrincipal
*
LoadInfo
:
:
GetTopLevelPrincipal
(
)
{
return
mTopLevelPrincipal
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadingDocument
(
Document
*
*
aResult
)
{
if
(
nsCOMPtr
<
nsINode
>
node
=
do_QueryReferent
(
mLoadingContext
)
)
{
RefPtr
<
Document
>
context
=
node
-
>
OwnerDoc
(
)
;
context
.
forget
(
aResult
)
;
}
return
NS_OK
;
}
nsINode
*
LoadInfo
:
:
LoadingNode
(
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryReferent
(
mLoadingContext
)
;
return
node
;
}
already_AddRefed
<
nsISupports
>
LoadInfo
:
:
ContextForTopLevelLoad
(
)
{
MOZ_ASSERT
(
mInternalContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
"
should
only
query
this
context
for
top
level
document
loads
"
)
;
nsCOMPtr
<
nsISupports
>
context
=
do_QueryReferent
(
mContextForTopLevelLoad
)
;
return
context
.
forget
(
)
;
}
already_AddRefed
<
nsISupports
>
LoadInfo
:
:
GetLoadingContext
(
)
{
nsCOMPtr
<
nsISupports
>
context
;
if
(
mInternalContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
)
{
context
=
ContextForTopLevelLoad
(
)
;
}
else
{
context
=
LoadingNode
(
)
;
}
return
context
.
forget
(
)
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadingContextXPCOM
(
nsISupports
*
*
aResult
)
{
nsCOMPtr
<
nsISupports
>
context
=
GetLoadingContext
(
)
;
context
.
forget
(
aResult
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSecurityFlags
(
nsSecurityFlags
*
aResult
)
{
*
aResult
=
mSecurityFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSandboxFlags
(
uint32_t
*
aResult
)
{
*
aResult
=
mSandboxFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetTriggeringSandboxFlags
(
uint32_t
*
aResult
)
{
*
aResult
=
mTriggeringSandboxFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetTriggeringSandboxFlags
(
uint32_t
aFlags
)
{
mTriggeringSandboxFlags
=
aFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSecurityMode
(
uint32_t
*
aFlags
)
{
*
aFlags
=
(
mSecurityFlags
&
(
nsILoadInfo
:
:
SEC_REQUIRE_SAME_ORIGIN_INHERITS_SEC_CONTEXT
|
nsILoadInfo
:
:
SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED
|
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_INHERITS_SEC_CONTEXT
|
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
|
nsILoadInfo
:
:
SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsInThirdPartyContext
(
bool
*
aIsInThirdPartyContext
)
{
*
aIsInThirdPartyContext
=
mIsThirdPartyContext
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsInThirdPartyContext
(
bool
aIsInThirdPartyContext
)
{
mIsThirdPartyContext
=
aIsInThirdPartyContext
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsThirdPartyContextToTopWindow
(
bool
*
aIsThirdPartyContextToTopWindow
)
{
*
aIsThirdPartyContextToTopWindow
=
mIsThirdPartyContextToTopWindow
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsThirdPartyContextToTopWindow
(
bool
aIsThirdPartyContextToTopWindow
)
{
mIsThirdPartyContextToTopWindow
=
aIsThirdPartyContextToTopWindow
;
return
NS_OK
;
}
static
const
uint32_t
sCookiePolicyMask
=
nsILoadInfo
:
:
SEC_COOKIES_DEFAULT
|
nsILoadInfo
:
:
SEC_COOKIES_INCLUDE
|
nsILoadInfo
:
:
SEC_COOKIES_SAME_ORIGIN
|
nsILoadInfo
:
:
SEC_COOKIES_OMIT
;
NS_IMETHODIMP
LoadInfo
:
:
GetCookiePolicy
(
uint32_t
*
aResult
)
{
uint32_t
policy
=
mSecurityFlags
&
sCookiePolicyMask
;
if
(
policy
=
=
nsILoadInfo
:
:
SEC_COOKIES_DEFAULT
)
{
policy
=
(
mSecurityFlags
&
SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT
)
?
nsILoadInfo
:
:
SEC_COOKIES_SAME_ORIGIN
:
nsILoadInfo
:
:
SEC_COOKIES_INCLUDE
;
}
*
aResult
=
policy
;
return
NS_OK
;
}
namespace
{
already_AddRefed
<
nsICookieJarSettings
>
CreateCookieJarSettings
(
nsContentPolicyType
aContentPolicyType
bool
aIsPrivate
)
{
if
(
StaticPrefs
:
:
network_cookieJarSettings_unblocked_for_testing
(
)
)
{
return
aIsPrivate
?
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
ePrivate
)
:
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
eRegular
)
;
}
if
(
aContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE_FAVICON
|
|
aContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_SAVEAS_DOWNLOAD
)
{
return
aIsPrivate
?
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
ePrivate
)
:
CookieJarSettings
:
:
Create
(
CookieJarSettings
:
:
eRegular
)
;
}
return
CookieJarSettings
:
:
GetBlockingAll
(
)
;
}
}
NS_IMETHODIMP
LoadInfo
:
:
GetCookieJarSettings
(
nsICookieJarSettings
*
*
aCookieJarSettings
)
{
if
(
!
mCookieJarSettings
)
{
bool
isPrivate
=
mOriginAttributes
.
mPrivateBrowsingId
>
0
;
mCookieJarSettings
=
CreateCookieJarSettings
(
mInternalContentPolicyType
isPrivate
)
;
}
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
=
mCookieJarSettings
;
cookieJarSettings
.
forget
(
aCookieJarSettings
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetCookieJarSettings
(
nsICookieJarSettings
*
aCookieJarSettings
)
{
MOZ_ASSERT
(
aCookieJarSettings
)
;
mCookieJarSettings
=
aCookieJarSettings
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetStoragePermission
(
nsILoadInfo
:
:
StoragePermissionState
*
aStoragePermission
)
{
*
aStoragePermission
=
mStoragePermission
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetStoragePermission
(
nsILoadInfo
:
:
StoragePermissionState
aStoragePermission
)
{
mStoragePermission
=
aStoragePermission
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsMetaRefresh
(
bool
*
aIsMetaRefresh
)
{
*
aIsMetaRefresh
=
mIsMetaRefresh
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsMetaRefresh
(
bool
aIsMetaRefresh
)
{
mIsMetaRefresh
=
aIsMetaRefresh
;
return
NS_OK
;
}
void
LoadInfo
:
:
SetIncludeCookiesSecFlag
(
)
{
MOZ_ASSERT
(
(
mSecurityFlags
&
sCookiePolicyMask
)
=
=
nsILoadInfo
:
:
SEC_COOKIES_DEFAULT
)
;
mSecurityFlags
=
(
mSecurityFlags
&
~
sCookiePolicyMask
)
|
nsILoadInfo
:
:
SEC_COOKIES_INCLUDE
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetForceInheritPrincipal
(
bool
*
aInheritPrincipal
)
{
*
aInheritPrincipal
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetForceInheritPrincipalOverruleOwner
(
bool
*
aInheritPrincipal
)
{
*
aInheritPrincipal
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_FORCE_INHERIT_PRINCIPAL_OVERRULE_OWNER
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadingSandboxed
(
bool
*
aLoadingSandboxed
)
{
*
aLoadingSandboxed
=
(
mSandboxFlags
&
SANDBOXED_ORIGIN
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetAboutBlankInherits
(
bool
*
aResult
)
{
*
aResult
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_ABOUT_BLANK_INHERITS
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetAllowChrome
(
bool
*
aResult
)
{
*
aResult
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_ALLOW_CHROME
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetDisallowScript
(
bool
*
aResult
)
{
*
aResult
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_DISALLOW_SCRIPT
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetDontFollowRedirects
(
bool
*
aResult
)
{
*
aResult
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_DONT_FOLLOW_REDIRECTS
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadErrorPage
(
bool
*
aResult
)
{
*
aResult
=
(
mSecurityFlags
&
nsILoadInfo
:
:
SEC_LOAD_ERROR_PAGE
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsFormSubmission
(
bool
*
aResult
)
{
*
aResult
=
mIsFormSubmission
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsFormSubmission
(
bool
aValue
)
{
mIsFormSubmission
=
aValue
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSendCSPViolationEvents
(
bool
*
aResult
)
{
*
aResult
=
mSendCSPViolationEvents
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetSendCSPViolationEvents
(
bool
aValue
)
{
mSendCSPViolationEvents
=
aValue
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetExternalContentPolicyType
(
nsContentPolicyType
*
aResult
)
{
*
aResult
=
static_cast
<
nsContentPolicyType
>
(
nsContentUtils
:
:
InternalContentPolicyTypeToExternal
(
mInternalContentPolicyType
)
)
;
return
NS_OK
;
}
nsContentPolicyType
LoadInfo
:
:
InternalContentPolicyType
(
)
{
return
mInternalContentPolicyType
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBlockAllMixedContent
(
bool
*
aResult
)
{
*
aResult
=
mBlockAllMixedContent
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetUpgradeInsecureRequests
(
bool
*
aResult
)
{
*
aResult
=
mUpgradeInsecureRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBrowserUpgradeInsecureRequests
(
bool
*
aResult
)
{
*
aResult
=
mBrowserUpgradeInsecureRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBrowserDidUpgradeInsecureRequests
(
bool
*
aResult
)
{
*
aResult
=
mBrowserDidUpgradeInsecureRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBrowserWouldUpgradeInsecureRequests
(
bool
*
aResult
)
{
*
aResult
=
mBrowserWouldUpgradeInsecureRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetForceAllowDataURI
(
bool
aForceAllowDataURI
)
{
MOZ_ASSERT
(
!
mForceAllowDataURI
|
|
mInternalContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
"
can
only
allow
data
URI
navigation
for
TYPE_DOCUMENT
"
)
;
mForceAllowDataURI
=
aForceAllowDataURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetForceAllowDataURI
(
bool
*
aForceAllowDataURI
)
{
*
aForceAllowDataURI
=
mForceAllowDataURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetAllowInsecureRedirectToDataURI
(
bool
aAllowInsecureRedirectToDataURI
)
{
mAllowInsecureRedirectToDataURI
=
aAllowInsecureRedirectToDataURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetAllowInsecureRedirectToDataURI
(
bool
*
aAllowInsecureRedirectToDataURI
)
{
*
aAllowInsecureRedirectToDataURI
=
mAllowInsecureRedirectToDataURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetSkipContentPolicyCheckForWebRequest
(
bool
aSkip
)
{
mSkipContentPolicyCheckForWebRequest
=
aSkip
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSkipContentPolicyCheckForWebRequest
(
bool
*
aSkip
)
{
*
aSkip
=
mSkipContentPolicyCheckForWebRequest
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetOriginalFrameSrcLoad
(
bool
aOriginalFrameSrcLoad
)
{
mOriginalFrameSrcLoad
=
aOriginalFrameSrcLoad
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetOriginalFrameSrcLoad
(
bool
*
aOriginalFrameSrcLoad
)
{
*
aOriginalFrameSrcLoad
=
mOriginalFrameSrcLoad
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetForceInheritPrincipalDropped
(
bool
*
aResult
)
{
*
aResult
=
mForceInheritPrincipalDropped
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetInnerWindowID
(
uint64_t
*
aResult
)
{
*
aResult
=
mInnerWindowID
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBrowsingContextID
(
uint64_t
*
aResult
)
{
*
aResult
=
mBrowsingContextID
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetFrameBrowsingContextID
(
uint64_t
*
aResult
)
{
*
aResult
=
mFrameBrowsingContextID
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetTargetBrowsingContextID
(
uint64_t
*
aResult
)
{
return
(
nsILoadInfo
:
:
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
)
?
GetFrameBrowsingContextID
(
aResult
)
:
GetBrowsingContextID
(
aResult
)
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetBrowsingContext
(
dom
:
:
BrowsingContext
*
*
aResult
)
{
*
aResult
=
BrowsingContext
:
:
Get
(
mBrowsingContextID
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetFrameBrowsingContext
(
dom
:
:
BrowsingContext
*
*
aResult
)
{
*
aResult
=
BrowsingContext
:
:
Get
(
mFrameBrowsingContextID
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetTargetBrowsingContext
(
dom
:
:
BrowsingContext
*
*
aResult
)
{
uint64_t
targetBrowsingContextID
=
0
;
MOZ_ALWAYS_SUCCEEDS
(
GetTargetBrowsingContextID
(
&
targetBrowsingContextID
)
)
;
*
aResult
=
BrowsingContext
:
:
Get
(
targetBrowsingContextID
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetScriptableOriginAttributes
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aOriginAttributes
)
{
if
(
NS_WARN_IF
(
!
ToJSValue
(
aCx
mOriginAttributes
aOriginAttributes
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
ResetPrincipalToInheritToNullPrincipal
(
)
{
nsCOMPtr
<
nsIPrincipal
>
newNullPrincipal
=
NullPrincipal
:
:
Create
(
mOriginAttributes
)
;
mPrincipalToInherit
=
newNullPrincipal
;
mSecurityFlags
|
=
SEC_FORCE_INHERIT_PRINCIPAL_OVERRULE_OWNER
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetScriptableOriginAttributes
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aOriginAttributes
)
{
OriginAttributes
attrs
;
if
(
!
aOriginAttributes
.
isObject
(
)
|
|
!
attrs
.
Init
(
aCx
aOriginAttributes
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
mOriginAttributes
=
attrs
;
return
NS_OK
;
}
nsresult
LoadInfo
:
:
GetOriginAttributes
(
mozilla
:
:
OriginAttributes
*
aOriginAttributes
)
{
NS_ENSURE_ARG
(
aOriginAttributes
)
;
*
aOriginAttributes
=
mOriginAttributes
;
return
NS_OK
;
}
nsresult
LoadInfo
:
:
SetOriginAttributes
(
const
mozilla
:
:
OriginAttributes
&
aOriginAttributes
)
{
mOriginAttributes
=
aOriginAttributes
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetInitialSecurityCheckDone
(
bool
aInitialSecurityCheckDone
)
{
MOZ_ASSERT
(
aInitialSecurityCheckDone
"
aInitialSecurityCheckDone
must
be
true
"
)
;
mInitialSecurityCheckDone
=
mInitialSecurityCheckDone
|
|
aInitialSecurityCheckDone
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetInitialSecurityCheckDone
(
bool
*
aResult
)
{
*
aResult
=
mInitialSecurityCheckDone
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
AppendRedirectHistoryEntry
(
nsIChannel
*
aChannel
bool
aIsInternalRedirect
)
{
NS_ENSURE_ARG
(
aChannel
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPrincipal
>
uriPrincipal
;
nsIScriptSecurityManager
*
sm
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
sm
-
>
GetChannelURIPrincipal
(
aChannel
getter_AddRefs
(
uriPrincipal
)
)
;
nsCOMPtr
<
nsIURI
>
referrer
;
nsCString
remoteAddress
;
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
(
do_QueryInterface
(
aChannel
)
)
;
if
(
httpChannel
)
{
nsCOMPtr
<
nsIReferrerInfo
>
referrerInfo
;
Unused
<
<
httpChannel
-
>
GetReferrerInfo
(
getter_AddRefs
(
referrerInfo
)
)
;
if
(
referrerInfo
)
{
referrer
=
referrerInfo
-
>
GetComputedReferrer
(
)
;
}
}
nsCOMPtr
<
nsIHttpChannelInternal
>
intChannel
(
do_QueryInterface
(
aChannel
)
)
;
if
(
intChannel
)
{
Unused
<
<
intChannel
-
>
GetRemoteAddress
(
remoteAddress
)
;
}
nsCOMPtr
<
nsIRedirectHistoryEntry
>
entry
=
new
nsRedirectHistoryEntry
(
uriPrincipal
referrer
remoteAddress
)
;
mRedirectChainIncludingInternalRedirects
.
AppendElement
(
entry
)
;
if
(
!
aIsInternalRedirect
)
{
mRedirectChain
.
AppendElement
(
entry
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetRedirects
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRedirects
const
RedirectHistoryArray
&
aArray
)
{
JS
:
:
Rooted
<
JSObject
*
>
redirects
(
aCx
JS
:
:
NewArrayObject
(
aCx
aArray
.
Length
(
)
)
)
;
NS_ENSURE_TRUE
(
redirects
NS_ERROR_OUT_OF_MEMORY
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
aCx
JS
:
:
CurrentGlobalOrNull
(
aCx
)
)
;
NS_ENSURE_TRUE
(
global
NS_ERROR_UNEXPECTED
)
;
nsCOMPtr
<
nsIXPConnect
>
xpc
=
nsIXPConnect
:
:
XPConnect
(
)
;
for
(
size_t
idx
=
0
;
idx
<
aArray
.
Length
(
)
;
idx
+
+
)
{
JS
:
:
RootedObject
jsobj
(
aCx
)
;
nsresult
rv
=
xpc
-
>
WrapNative
(
aCx
global
aArray
[
idx
]
NS_GET_IID
(
nsIRedirectHistoryEntry
)
jsobj
.
address
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_STATE
(
jsobj
)
;
bool
rc
=
JS_DefineElement
(
aCx
redirects
idx
jsobj
JSPROP_ENUMERATE
)
;
NS_ENSURE_TRUE
(
rc
NS_ERROR_UNEXPECTED
)
;
}
aRedirects
.
setObject
(
*
redirects
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetRedirectChainIncludingInternalRedirects
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aChain
)
{
return
GetRedirects
(
aCx
aChain
mRedirectChainIncludingInternalRedirects
)
;
}
const
RedirectHistoryArray
&
LoadInfo
:
:
RedirectChainIncludingInternalRedirects
(
)
{
return
mRedirectChainIncludingInternalRedirects
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetRedirectChain
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aChain
)
{
return
GetRedirects
(
aCx
aChain
mRedirectChain
)
;
}
const
RedirectHistoryArray
&
LoadInfo
:
:
RedirectChain
(
)
{
return
mRedirectChain
;
}
const
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
LoadInfo
:
:
AncestorPrincipals
(
)
{
return
mAncestorPrincipals
;
}
const
nsTArray
<
uint64_t
>
&
LoadInfo
:
:
AncestorBrowsingContextIDs
(
)
{
return
mAncestorBrowsingContextIDs
;
}
void
LoadInfo
:
:
SetCorsPreflightInfo
(
const
nsTArray
<
nsCString
>
&
aHeaders
bool
aForcePreflight
)
{
MOZ_ASSERT
(
GetSecurityMode
(
)
=
=
nsILoadInfo
:
:
SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT
)
;
MOZ_ASSERT
(
!
mInitialSecurityCheckDone
)
;
mCorsUnsafeHeaders
=
aHeaders
.
Clone
(
)
;
mForcePreflight
=
aForcePreflight
;
}
const
nsTArray
<
nsCString
>
&
LoadInfo
:
:
CorsUnsafeHeaders
(
)
{
return
mCorsUnsafeHeaders
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetForcePreflight
(
bool
*
aForcePreflight
)
{
*
aForcePreflight
=
mForcePreflight
;
return
NS_OK
;
}
void
LoadInfo
:
:
SetIsPreflight
(
)
{
MOZ_ASSERT
(
GetSecurityMode
(
)
=
=
nsILoadInfo
:
:
SEC_REQUIRE_CORS_INHERITS_SEC_CONTEXT
)
;
MOZ_ASSERT
(
!
mInitialSecurityCheckDone
)
;
mIsPreflight
=
true
;
}
void
LoadInfo
:
:
SetUpgradeInsecureRequests
(
bool
aValue
)
{
mUpgradeInsecureRequests
=
aValue
;
}
void
LoadInfo
:
:
SetBrowserUpgradeInsecureRequests
(
)
{
mBrowserUpgradeInsecureRequests
=
true
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetBrowserDidUpgradeInsecureRequests
(
bool
aBrowserDidUpgradeInsecureRequests
)
{
mBrowserDidUpgradeInsecureRequests
=
aBrowserDidUpgradeInsecureRequests
;
return
NS_OK
;
}
void
LoadInfo
:
:
SetBrowserWouldUpgradeInsecureRequests
(
)
{
mBrowserWouldUpgradeInsecureRequests
=
true
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsPreflight
(
bool
*
aIsPreflight
)
{
*
aIsPreflight
=
mIsPreflight
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetLoadTriggeredFromExternal
(
bool
aLoadTriggeredFromExternal
)
{
MOZ_ASSERT
(
!
aLoadTriggeredFromExternal
|
|
mInternalContentPolicyType
=
=
nsIContentPolicy
:
:
TYPE_DOCUMENT
"
can
only
set
load
triggered
from
external
for
TYPE_DOCUMENT
"
)
;
mLoadTriggeredFromExternal
=
aLoadTriggeredFromExternal
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadTriggeredFromExternal
(
bool
*
aLoadTriggeredFromExternal
)
{
*
aLoadTriggeredFromExternal
=
mLoadTriggeredFromExternal
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetServiceWorkerTaintingSynthesized
(
bool
*
aServiceWorkerTaintingSynthesized
)
{
MOZ_ASSERT
(
aServiceWorkerTaintingSynthesized
)
;
*
aServiceWorkerTaintingSynthesized
=
mServiceWorkerTaintingSynthesized
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetTainting
(
uint32_t
*
aTaintingOut
)
{
MOZ_ASSERT
(
aTaintingOut
)
;
*
aTaintingOut
=
static_cast
<
uint32_t
>
(
mTainting
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
MaybeIncreaseTainting
(
uint32_t
aTainting
)
{
NS_ENSURE_ARG
(
aTainting
<
=
TAINTING_OPAQUE
)
;
if
(
mServiceWorkerTaintingSynthesized
)
{
return
NS_OK
;
}
LoadTainting
tainting
=
static_cast
<
LoadTainting
>
(
aTainting
)
;
if
(
tainting
>
mTainting
)
{
mTainting
=
tainting
;
}
return
NS_OK
;
}
void
LoadInfo
:
:
SynthesizeServiceWorkerTainting
(
LoadTainting
aTainting
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aTainting
<
=
LoadTainting
:
:
Opaque
)
;
mTainting
=
aTainting
;
mServiceWorkerTaintingSynthesized
=
true
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetDocumentHasUserInteracted
(
bool
*
aDocumentHasUserInteracted
)
{
MOZ_ASSERT
(
aDocumentHasUserInteracted
)
;
*
aDocumentHasUserInteracted
=
mDocumentHasUserInteracted
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetDocumentHasUserInteracted
(
bool
aDocumentHasUserInteracted
)
{
mDocumentHasUserInteracted
=
aDocumentHasUserInteracted
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetAllowListFutureDocumentsCreatedFromThisRedirectChain
(
bool
*
aValue
)
{
MOZ_ASSERT
(
aValue
)
;
*
aValue
=
mAllowListFutureDocumentsCreatedFromThisRedirectChain
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetAllowListFutureDocumentsCreatedFromThisRedirectChain
(
bool
aValue
)
{
mAllowListFutureDocumentsCreatedFromThisRedirectChain
=
aValue
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetNeedForCheckingAntiTrackingHeuristic
(
bool
*
aValue
)
{
MOZ_ASSERT
(
aValue
)
;
*
aValue
=
mNeedForCheckingAntiTrackingHeuristic
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetNeedForCheckingAntiTrackingHeuristic
(
bool
aValue
)
{
mNeedForCheckingAntiTrackingHeuristic
=
aValue
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetCspNonce
(
nsAString
&
aCspNonce
)
{
aCspNonce
=
mCspNonce
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetCspNonce
(
const
nsAString
&
aCspNonce
)
{
MOZ_ASSERT
(
!
mInitialSecurityCheckDone
"
setting
the
nonce
is
only
allowed
before
any
sec
checks
"
)
;
mCspNonce
=
aCspNonce
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetSkipContentSniffing
(
bool
*
aSkipContentSniffing
)
{
*
aSkipContentSniffing
=
mSkipContentSniffing
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetSkipContentSniffing
(
bool
aSkipContentSniffing
)
{
mSkipContentSniffing
=
aSkipContentSniffing
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetHttpsOnlyStatus
(
uint32_t
*
aHttpsOnlyStatus
)
{
*
aHttpsOnlyStatus
=
mHttpsOnlyStatus
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetHttpsOnlyStatus
(
uint32_t
aHttpsOnlyStatus
)
{
mHttpsOnlyStatus
=
aHttpsOnlyStatus
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetHasValidUserGestureActivation
(
bool
*
aHasValidUserGestureActivation
)
{
*
aHasValidUserGestureActivation
=
mHasValidUserGestureActivation
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetHasValidUserGestureActivation
(
bool
aHasValidUserGestureActivation
)
{
mHasValidUserGestureActivation
=
aHasValidUserGestureActivation
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetAllowDeprecatedSystemRequests
(
bool
*
aAllowDeprecatedSystemRequests
)
{
*
aAllowDeprecatedSystemRequests
=
mAllowDeprecatedSystemRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetAllowDeprecatedSystemRequests
(
bool
aAllowDeprecatedSystemRequests
)
{
mAllowDeprecatedSystemRequests
=
aAllowDeprecatedSystemRequests
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsInDevToolsContext
(
bool
*
aIsInDevToolsContext
)
{
*
aIsInDevToolsContext
=
mIsInDevToolsContext
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsInDevToolsContext
(
bool
aIsInDevToolsContext
)
{
mIsInDevToolsContext
=
aIsInDevToolsContext
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetParserCreatedScript
(
bool
*
aParserCreatedScript
)
{
*
aParserCreatedScript
=
mParserCreatedScript
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetParserCreatedScript
(
bool
aParserCreatedScript
)
{
mParserCreatedScript
=
aParserCreatedScript
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsTopLevelLoad
(
bool
*
aResult
)
{
RefPtr
<
dom
:
:
BrowsingContext
>
bc
;
GetTargetBrowsingContext
(
getter_AddRefs
(
bc
)
)
;
*
aResult
=
!
bc
|
|
bc
-
>
IsTop
(
)
;
return
NS_OK
;
}
void
LoadInfo
:
:
SetIsFromProcessingFrameAttributes
(
)
{
mIsFromProcessingFrameAttributes
=
true
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsFromProcessingFrameAttributes
(
bool
*
aIsFromProcessingFrameAttributes
)
{
MOZ_ASSERT
(
aIsFromProcessingFrameAttributes
)
;
*
aIsFromProcessingFrameAttributes
=
mIsFromProcessingFrameAttributes
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsMediaRequest
(
bool
aIsMediaRequest
)
{
mIsMediaRequest
=
aIsMediaRequest
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsMediaRequest
(
bool
*
aIsMediaRequest
)
{
MOZ_ASSERT
(
aIsMediaRequest
)
;
*
aIsMediaRequest
=
mIsMediaRequest
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsMediaInitialRequest
(
bool
aIsMediaInitialRequest
)
{
mIsMediaInitialRequest
=
aIsMediaInitialRequest
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsMediaInitialRequest
(
bool
*
aIsMediaInitialRequest
)
{
MOZ_ASSERT
(
aIsMediaInitialRequest
)
;
*
aIsMediaInitialRequest
=
mIsMediaInitialRequest
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetIsFromObjectOrEmbed
(
bool
aIsFromObjectOrEmbed
)
{
mIsFromObjectOrEmbed
=
aIsFromObjectOrEmbed
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetIsFromObjectOrEmbed
(
bool
*
aIsFromObjectOrEmbed
)
{
MOZ_ASSERT
(
aIsFromObjectOrEmbed
)
;
*
aIsFromObjectOrEmbed
=
mIsFromObjectOrEmbed
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetResultPrincipalURI
(
nsIURI
*
*
aURI
)
{
*
aURI
=
do_AddRef
(
mResultPrincipalURI
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetResultPrincipalURI
(
nsIURI
*
aURI
)
{
mResultPrincipalURI
=
aURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetChannelCreationOriginalURI
(
nsIURI
*
*
aURI
)
{
*
aURI
=
do_AddRef
(
mChannelCreationOriginalURI
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetChannelCreationOriginalURI
(
nsIURI
*
aURI
)
{
mChannelCreationOriginalURI
=
aURI
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetRequestBlockingReason
(
uint32_t
aReason
)
{
mRequestBlockingReason
=
aReason
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetRequestBlockingReason
(
uint32_t
*
aReason
)
{
*
aReason
=
mRequestBlockingReason
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetUnstrippedURI
(
nsIURI
*
*
aURI
)
{
*
aURI
=
do_AddRef
(
mUnstrippedURI
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetUnstrippedURI
(
nsIURI
*
aURI
)
{
mUnstrippedURI
=
aURI
;
return
NS_OK
;
}
void
LoadInfo
:
:
SetClientInfo
(
const
ClientInfo
&
aClientInfo
)
{
mClientInfo
.
emplace
(
aClientInfo
)
;
}
const
Maybe
<
ClientInfo
>
&
LoadInfo
:
:
GetClientInfo
(
)
{
return
mClientInfo
;
}
void
LoadInfo
:
:
GiveReservedClientSource
(
UniquePtr
<
ClientSource
>
&
&
aClientSource
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aClientSource
)
;
mReservedClientSource
=
std
:
:
move
(
aClientSource
)
;
SetReservedClientInfo
(
mReservedClientSource
-
>
Info
(
)
)
;
}
UniquePtr
<
ClientSource
>
LoadInfo
:
:
TakeReservedClientSource
(
)
{
if
(
mReservedClientSource
)
{
mReservedClientInfo
.
reset
(
)
;
}
return
std
:
:
move
(
mReservedClientSource
)
;
}
void
LoadInfo
:
:
SetReservedClientInfo
(
const
ClientInfo
&
aClientInfo
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mInitialClientInfo
.
isNothing
(
)
)
;
if
(
mReservedClientInfo
.
isSome
(
)
&
&
mReservedClientInfo
.
ref
(
)
=
=
aClientInfo
)
{
return
;
}
mReservedClientInfo
.
emplace
(
aClientInfo
)
;
}
void
LoadInfo
:
:
OverrideReservedClientInfoInParent
(
const
ClientInfo
&
aClientInfo
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Default
)
;
mInitialClientInfo
.
reset
(
)
;
mReservedClientInfo
.
reset
(
)
;
mReservedClientInfo
.
emplace
(
aClientInfo
)
;
}
const
Maybe
<
ClientInfo
>
&
LoadInfo
:
:
GetReservedClientInfo
(
)
{
return
mReservedClientInfo
;
}
void
LoadInfo
:
:
SetInitialClientInfo
(
const
ClientInfo
&
aClientInfo
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mReservedClientSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mReservedClientInfo
.
isNothing
(
)
)
;
if
(
mInitialClientInfo
.
isSome
(
)
&
&
mInitialClientInfo
.
ref
(
)
=
=
aClientInfo
)
{
return
;
}
mInitialClientInfo
.
emplace
(
aClientInfo
)
;
}
const
Maybe
<
ClientInfo
>
&
LoadInfo
:
:
GetInitialClientInfo
(
)
{
return
mInitialClientInfo
;
}
void
LoadInfo
:
:
SetController
(
const
ServiceWorkerDescriptor
&
aServiceWorker
)
{
mController
.
emplace
(
aServiceWorker
)
;
}
void
LoadInfo
:
:
ClearController
(
)
{
mController
.
reset
(
)
;
}
const
Maybe
<
ServiceWorkerDescriptor
>
&
LoadInfo
:
:
GetController
(
)
{
return
mController
;
}
void
LoadInfo
:
:
SetPerformanceStorage
(
PerformanceStorage
*
aPerformanceStorage
)
{
mPerformanceStorage
=
aPerformanceStorage
;
}
PerformanceStorage
*
LoadInfo
:
:
GetPerformanceStorage
(
)
{
if
(
mPerformanceStorage
)
{
return
mPerformanceStorage
;
}
auto
*
innerWindow
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mInnerWindowID
)
;
if
(
!
innerWindow
)
{
return
nullptr
;
}
if
(
!
TriggeringPrincipal
(
)
-
>
Equals
(
innerWindow
-
>
GetPrincipal
(
)
)
)
{
return
nullptr
;
}
if
(
nsILoadInfo
:
:
GetExternalContentPolicyType
(
)
=
=
ExtContentPolicy
:
:
TYPE_SUBDOCUMENT
&
&
!
GetIsFromProcessingFrameAttributes
(
)
)
{
return
nullptr
;
}
mozilla
:
:
dom
:
:
Performance
*
performance
=
innerWindow
-
>
GetPerformance
(
)
;
if
(
!
performance
)
{
return
nullptr
;
}
return
performance
-
>
AsPerformanceStorage
(
)
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetCspEventListener
(
nsICSPEventListener
*
*
aCSPEventListener
)
{
*
aCSPEventListener
=
do_AddRef
(
mCSPEventListener
)
.
take
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetCspEventListener
(
nsICSPEventListener
*
aCSPEventListener
)
{
mCSPEventListener
=
aCSPEventListener
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetInternalContentPolicyType
(
nsContentPolicyType
*
aResult
)
{
*
aResult
=
mInternalContentPolicyType
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
GetLoadingEmbedderPolicy
(
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
*
aOutPolicy
)
{
*
aOutPolicy
=
mLoadingEmbedderPolicy
;
return
NS_OK
;
}
NS_IMETHODIMP
LoadInfo
:
:
SetLoadingEmbedderPolicy
(
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aPolicy
)
{
mLoadingEmbedderPolicy
=
aPolicy
;
return
NS_OK
;
}
already_AddRefed
<
nsIContentSecurityPolicy
>
LoadInfo
:
:
GetCsp
(
)
{
if
(
mLoadingPrincipal
&
&
BasePrincipal
:
:
Cast
(
mTriggeringPrincipal
)
-
>
OverridesCSP
(
mLoadingPrincipal
)
)
{
nsCOMPtr
<
nsIExpandedPrincipal
>
ep
=
do_QueryInterface
(
mTriggeringPrincipal
)
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
addonCSP
;
if
(
ep
)
{
addonCSP
=
ep
-
>
GetCsp
(
)
;
}
return
addonCSP
.
forget
(
)
;
}
if
(
mClientInfo
.
isNothing
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsINode
>
node
=
do_QueryReferent
(
mLoadingContext
)
;
RefPtr
<
Document
>
doc
=
node
?
node
-
>
OwnerDoc
(
)
:
nullptr
;
if
(
doc
&
&
mClientInfo
-
>
Type
(
)
=
=
ClientType
:
:
Window
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
docCSP
=
doc
-
>
GetCsp
(
)
;
return
docCSP
.
forget
(
)
;
}
Maybe
<
mozilla
:
:
ipc
:
:
CSPInfo
>
cspInfo
=
mClientInfo
-
>
GetCspInfo
(
)
;
if
(
cspInfo
.
isNothing
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
clientCSP
=
CSPInfoToCSP
(
cspInfo
.
ref
(
)
doc
)
;
return
clientCSP
.
forget
(
)
;
}
already_AddRefed
<
nsIContentSecurityPolicy
>
LoadInfo
:
:
GetPreloadCsp
(
)
{
if
(
mClientInfo
.
isNothing
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsINode
>
node
=
do_QueryReferent
(
mLoadingContext
)
;
RefPtr
<
Document
>
doc
=
node
?
node
-
>
OwnerDoc
(
)
:
nullptr
;
if
(
doc
&
&
mClientInfo
-
>
Type
(
)
=
=
ClientType
:
:
Window
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
preloadCsp
=
doc
-
>
GetPreloadCsp
(
)
;
return
preloadCsp
.
forget
(
)
;
}
Maybe
<
mozilla
:
:
ipc
:
:
CSPInfo
>
cspInfo
=
mClientInfo
-
>
GetPreloadCspInfo
(
)
;
if
(
cspInfo
.
isNothing
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIContentSecurityPolicy
>
preloadCSP
=
CSPInfoToCSP
(
cspInfo
.
ref
(
)
doc
)
;
return
preloadCSP
.
forget
(
)
;
}
already_AddRefed
<
nsIContentSecurityPolicy
>
LoadInfo
:
:
GetCspToInherit
(
)
{
nsCOMPtr
<
nsIContentSecurityPolicy
>
cspToInherit
=
mCspToInherit
;
return
cspToInherit
.
forget
(
)
;
}
}
}
