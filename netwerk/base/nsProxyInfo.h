#
ifndef
nsProxyInfo_h__
#
define
nsProxyInfo_h__
#
include
"
nsIProxyInfo
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
define
NS_PROXYINFO_IID
\
{
/
*
ed42f751
-
825e
-
4cc2
-
abeb
-
3670711a8b85
*
/
\
0xed42f751
\
0x825e
\
0x4cc2
\
{
0xab
0xeb
0x36
0x70
0x71
0x1a
0x8b
0x85
}
}
namespace
mozilla
{
namespace
net
{
class
ProxyInfoCloneArgs
;
class
nsProxyInfo
final
:
public
nsIProxyInfo
{
public
:
NS_INLINE_DECL_STATIC_IID
(
NS_PROXYINFO_IID
)
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIPROXYINFO
const
nsCString
&
Host
(
)
const
{
return
mHost
;
}
int32_t
Port
(
)
const
{
return
mPort
;
}
const
nsCString
&
PathTemplate
(
)
const
{
return
mPathTemplate
;
}
const
nsCString
&
Alpn
(
)
const
{
return
mAlpn
;
}
const
char
*
Type
(
)
const
{
return
mType
;
}
uint32_t
Flags
(
)
const
{
return
mFlags
;
}
const
nsCString
&
Username
(
)
const
{
return
mUsername
;
}
const
nsCString
&
Password
(
)
const
{
return
mPassword
;
}
uint32_t
Timeout
(
)
{
return
mTimeout
;
}
uint32_t
ResolveFlags
(
)
{
return
mResolveFlags
;
}
const
nsCString
&
ProxyAuthorizationHeader
(
)
const
{
return
mProxyAuthorizationHeader
;
}
const
nsCString
&
ConnectionIsolationKey
(
)
const
{
return
mConnectionIsolationKey
;
}
bool
IsDirect
(
)
;
bool
IsHTTP
(
)
;
bool
IsHTTPS
(
)
;
bool
IsSOCKS
(
)
;
bool
IsConnectTCP
(
)
;
bool
IsConnectUDP
(
)
;
static
void
SerializeProxyInfo
(
nsProxyInfo
*
aProxyInfo
nsTArray
<
ProxyInfoCloneArgs
>
&
aResult
)
;
static
nsProxyInfo
*
DeserializeProxyInfo
(
const
nsTArray
<
ProxyInfoCloneArgs
>
&
aArgs
)
;
already_AddRefed
<
nsProxyInfo
>
CloneProxyInfoWithNewResolveFlags
(
uint32_t
aResolveFlags
)
;
private
:
friend
class
nsProtocolProxyService
;
explicit
nsProxyInfo
(
const
char
*
type
=
nullptr
)
:
mType
(
type
)
{
}
nsProxyInfo
(
const
nsACString
&
aType
const
nsACString
&
aHost
int32_t
aPort
const
nsACString
&
aUsername
const
nsACString
&
aPassword
uint32_t
aFlags
uint32_t
aTimeout
uint32_t
aResolveFlags
const
nsACString
&
aProxyAuthorizationHeader
const
nsACString
&
aConnectionIsolationKey
const
nsACString
&
aUriTemplate
const
nsACString
&
aAlpn
)
;
~
nsProxyInfo
(
)
{
NS_IF_RELEASE
(
mNext
)
;
}
const
char
*
mType
;
nsCString
mHost
;
nsCString
mUsername
;
nsCString
mPassword
;
nsCString
mProxyAuthorizationHeader
;
nsCString
mConnectionIsolationKey
;
nsCString
mSourceId
;
nsCString
mPathTemplate
;
nsCString
mAlpn
;
int32_t
mPort
{
-
1
}
;
uint32_t
mFlags
{
0
}
;
Atomic
<
uint32_t
Relaxed
>
mResolveFlags
{
0
}
;
uint32_t
mTimeout
{
UINT32_MAX
}
;
nsProxyInfo
*
mNext
{
nullptr
}
;
}
;
}
}
#
endif
