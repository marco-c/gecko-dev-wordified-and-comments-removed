#
ifndef
mozURL_h__
#
define
mozURL_h__
#
include
"
mozilla
/
net
/
MozURL_ffi
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
namespace
net
{
class
MozURL
final
{
public
:
static
nsresult
Init
(
MozURL
*
*
aURL
const
nsACString
&
aSpec
const
MozURL
*
aBaseURL
=
nullptr
)
{
return
mozurl_new
(
aURL
&
aSpec
aBaseURL
)
;
}
nsDependentCSubstring
Spec
(
)
const
{
return
mozurl_spec
(
this
)
;
}
nsDependentCSubstring
Scheme
(
)
const
{
return
mozurl_scheme
(
this
)
;
}
nsDependentCSubstring
Username
(
)
const
{
return
mozurl_username
(
this
)
;
}
nsDependentCSubstring
Password
(
)
const
{
return
mozurl_password
(
this
)
;
}
nsDependentCSubstring
Host
(
)
const
{
return
mozurl_host
(
this
)
;
}
int32_t
Port
(
)
const
{
return
mozurl_port
(
this
)
;
}
int32_t
RealPort
(
)
const
{
return
mozurl_real_port
(
this
)
;
}
nsDependentCSubstring
HostPort
(
)
const
{
return
mozurl_host_port
(
this
)
;
}
nsDependentCSubstring
FilePath
(
)
const
{
return
mozurl_filepath
(
this
)
;
}
nsDependentCSubstring
Path
(
)
const
{
return
mozurl_path
(
this
)
;
}
nsDependentCSubstring
Query
(
)
const
{
return
mozurl_query
(
this
)
;
}
nsDependentCSubstring
Ref
(
)
const
{
return
mozurl_fragment
(
this
)
;
}
bool
HasFragment
(
)
const
{
return
mozurl_has_fragment
(
this
)
;
}
nsDependentCSubstring
Directory
(
)
const
{
return
mozurl_directory
(
this
)
;
}
void
Origin
(
nsACString
&
aOrigin
)
const
{
mozurl_origin
(
this
&
aOrigin
)
;
}
nsresult
GetCommonBase
(
const
MozURL
*
aOther
MozURL
*
*
aCommon
)
const
{
return
mozurl_common_base
(
this
aOther
aCommon
)
;
}
nsresult
GetRelative
(
const
MozURL
*
aOther
nsACString
*
aRelative
)
const
{
return
mozurl_relative
(
this
aOther
aRelative
)
;
}
class
MOZ_STACK_CLASS
Mutator
{
public
:
nsresult
Finalize
(
MozURL
*
*
aURL
)
{
nsresult
rv
=
GetStatus
(
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mURL
.
forget
(
aURL
)
;
}
else
{
*
aURL
=
nullptr
;
}
return
rv
;
}
Mutator
&
SetScheme
(
const
nsACString
&
aScheme
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_scheme
(
mURL
&
aScheme
)
;
}
return
*
this
;
}
Mutator
&
SetUsername
(
const
nsACString
&
aUser
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_username
(
mURL
&
aUser
)
;
}
return
*
this
;
}
Mutator
&
SetPassword
(
const
nsACString
&
aPassword
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_password
(
mURL
&
aPassword
)
;
}
return
*
this
;
}
Mutator
&
SetHostname
(
const
nsACString
&
aHost
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_hostname
(
mURL
&
aHost
)
;
}
return
*
this
;
}
Mutator
&
SetHostPort
(
const
nsACString
&
aHostPort
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_host_port
(
mURL
&
aHostPort
)
;
}
return
*
this
;
}
Mutator
&
SetFilePath
(
const
nsACString
&
aPath
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_pathname
(
mURL
&
aPath
)
;
}
return
*
this
;
}
Mutator
&
SetQuery
(
const
nsACString
&
aQuery
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_query
(
mURL
&
aQuery
)
;
}
return
*
this
;
}
Mutator
&
SetRef
(
const
nsACString
&
aRef
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_fragment
(
mURL
&
aRef
)
;
}
return
*
this
;
}
Mutator
&
SetPort
(
int32_t
aPort
)
{
if
(
NS_SUCCEEDED
(
GetStatus
(
)
)
)
{
mStatus
=
mozurl_set_port_no
(
mURL
aPort
)
;
}
return
*
this
;
}
nsresult
GetStatus
(
)
{
return
mURL
?
mStatus
:
NS_ERROR_NOT_AVAILABLE
;
}
private
:
explicit
Mutator
(
MozURL
*
aUrl
)
:
mStatus
(
NS_OK
)
{
mozurl_clone
(
aUrl
getter_AddRefs
(
mURL
)
)
;
}
RefPtr
<
MozURL
>
mURL
;
nsresult
mStatus
;
friend
class
MozURL
;
}
;
Mutator
Mutate
(
)
{
return
Mutator
(
this
)
;
}
nsrefcnt
AddRef
(
)
{
return
mozurl_addref
(
this
)
;
}
nsrefcnt
Release
(
)
{
return
mozurl_release
(
this
)
;
}
private
:
MozURL
(
)
;
~
MozURL
(
)
;
MozURL
(
const
MozURL
&
)
=
delete
;
MozURL
&
operator
=
(
const
MozURL
&
)
=
delete
;
}
;
}
}
#
endif
