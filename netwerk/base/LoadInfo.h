#
ifndef
mozilla_LoadInfo_h
#
define
mozilla_LoadInfo_h
#
include
"
nsIContentSecurityPolicy
.
h
"
#
include
"
nsIInterceptionInfo
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
class
nsDocShell
;
class
nsICookieJarSettings
;
class
nsINode
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
dom
{
class
PerformanceStorage
;
class
XMLHttpRequestMainThread
;
class
CanonicalBrowsingContext
;
class
WindowGlobalParent
;
}
namespace
net
{
class
LoadInfoArgs
;
class
LoadInfo
;
}
namespace
ipc
{
nsresult
LoadInfoArgsToLoadInfo
(
const
Maybe
<
mozilla
:
:
net
:
:
LoadInfoArgs
>
&
aLoadInfoArgs
const
nsACString
&
aOriginRemoteType
nsINode
*
aCspToInheritLoadingContext
net
:
:
LoadInfo
*
*
outLoadInfo
)
;
}
namespace
net
{
using
RedirectHistoryArray
=
nsTArray
<
nsCOMPtr
<
nsIRedirectHistoryEntry
>
>
;
class
LoadInfo
final
:
public
nsILoadInfo
{
template
<
typename
T
typename
.
.
.
Args
>
friend
already_AddRefed
<
T
>
mozilla
:
:
MakeAndAddRef
(
Args
&
&
.
.
.
aArgs
)
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSILOADINFO
static
already_AddRefed
<
LoadInfo
>
CreateForDocument
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
const
nsACString
&
aTriggeringRemoteType
const
OriginAttributes
&
aOriginAttributes
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
static
already_AddRefed
<
LoadInfo
>
CreateForFrame
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
const
nsACString
&
aTriggeringRemoteType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
static
already_AddRefed
<
LoadInfo
>
CreateForNonDocument
(
dom
:
:
WindowGlobalParent
*
aParentWGP
nsIPrincipal
*
aTriggeringPrincipal
nsContentPolicyType
aContentPolicyType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsINode
*
aLoadingContext
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aLoadingClientInfo
=
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
(
)
const
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
&
aController
=
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
(
)
uint32_t
aSandboxFlags
=
0
bool
aSkipCheckForBrokenURLOrZeroSized
=
0
)
;
LoadInfo
(
nsPIDOMWindowOuter
*
aOuterWindow
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
nsISupports
*
aContextForTopLevelLoad
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
private
:
LoadInfo
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIURI
*
aURI
nsIPrincipal
*
aTriggeringPrincipal
const
nsACString
&
aTriggeringRemoteType
const
OriginAttributes
&
aOriginAttributes
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
LoadInfo
(
dom
:
:
CanonicalBrowsingContext
*
aBrowsingContext
nsIPrincipal
*
aTriggeringPrincipal
const
nsACString
&
aTriggeringRemoteType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
LoadInfo
(
dom
:
:
WindowGlobalParent
*
aParentWGP
nsIPrincipal
*
aTriggeringPrincipal
const
nsACString
&
aTriggeringRemoteType
nsContentPolicyType
aContentPolicyType
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
)
;
public
:
static
void
ComputeAncestors
(
dom
:
:
CanonicalBrowsingContext
*
aBC
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aAncestorPrincipals
nsTArray
<
uint64_t
>
&
aBrowsingContextIDs
)
;
already_AddRefed
<
nsILoadInfo
>
Clone
(
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneWithNewSecFlags
(
nsSecurityFlags
aSecurityFlags
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneForNewRequest
(
)
const
;
using
nsILoadInfo
:
:
GetExternalContentPolicyType
;
void
SetIsPreflight
(
)
;
void
SetUpgradeInsecureRequests
(
bool
aValue
)
;
void
SetBrowserUpgradeInsecureRequests
(
)
;
void
SetBrowserWouldUpgradeInsecureRequests
(
)
;
void
SetIsFromProcessingFrameAttributes
(
)
;
void
SetCSPToInherit
(
nsIContentSecurityPolicy
*
aCspToInherit
)
{
mCspToInherit
=
aCspToInherit
;
}
bool
HasIsThirdPartyContextToTopWindowSet
(
)
{
return
mIsThirdPartyContextToTopWindow
.
isSome
(
)
;
}
void
ClearIsThirdPartyContextToTopWindow
(
)
{
mIsThirdPartyContextToTopWindow
.
reset
(
)
;
}
private
:
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsIPrincipal
*
aTopLevelPrincipal
nsIURI
*
aResultPrincipalURI
nsICookieJarSettings
*
aCookieJarSettings
nsIContentSecurityPolicy
*
aCspToInherit
const
nsACString
&
aTriggeringRemoteType
const
nsID
&
aSandboxedNullPrincipalID
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aReservedClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aInitialClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
&
aController
nsSecurityFlags
aSecurityFlags
uint32_t
aSandboxFlags
uint32_t
aTriggeringSandboxFlags
nsContentPolicyType
aContentPolicyType
LoadTainting
aTainting
bool
aBlockAllMixedContent
bool
aUpgradeInsecureRequests
bool
aBrowserUpgradeInsecureRequests
bool
aBrowserDidUpgradeInsecureRequests
bool
aBrowserWouldUpgradeInsecureRequests
bool
aForceAllowDataURI
bool
aAllowInsecureRedirectToDataURI
bool
aSkipContentPolicyCheckForWebRequest
bool
aOriginalFrameSrcLoad
bool
aForceInheritPrincipalDropped
uint64_t
aInnerWindowID
uint64_t
aBrowsingContextID
uint64_t
aFrameBrowsingContextID
bool
aInitialSecurityCheckDone
bool
aIsThirdPartyContext
const
Maybe
<
bool
>
&
aIsThirdPartyContextToTopWindow
bool
aIsFormSubmission
bool
aSendCSPViolationEvents
const
OriginAttributes
&
aOriginAttributes
RedirectHistoryArray
&
&
aRedirectChainIncludingInternalRedirects
RedirectHistoryArray
&
&
aRedirectChain
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
&
aAncestorPrincipals
const
nsTArray
<
uint64_t
>
&
aAncestorBrowsingContextIDs
const
nsTArray
<
nsCString
>
&
aCorsUnsafeHeaders
bool
aForcePreflight
bool
aIsPreflight
bool
aLoadTriggeredFromExternal
bool
aServiceWorkerTaintingSynthesized
bool
aDocumentHasUserInteracted
bool
aAllowListFutureDocumentsCreatedFromThisRedirectChain
bool
aNeedForCheckingAntiTrackingHeuristic
const
nsAString
&
aCspNonce
bool
aSkipContentSniffing
uint32_t
aHttpsOnlyStatus
bool
aHstsStatus
bool
aHasValidUserGestureActivation
bool
aAllowDeprecatedSystemRequests
bool
aIsInDevToolsContext
bool
aParserCreatedScript
nsILoadInfo
:
:
StoragePermissionState
aStoragePermission
bool
aIsMetaRefresh
uint32_t
aRequestBlockingReason
nsINode
*
aLoadingContext
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
aLoadingEmbedderPolicy
bool
aIsOriginTrialCoepCredentiallessEnabledForTopLevel
nsIURI
*
aUnstrippedURI
nsIInterceptionInfo
*
aInterceptionInfo
bool
aHasInjectedCookieForCookieBannerHandling
)
;
LoadInfo
(
const
LoadInfo
&
rhs
)
;
NS_IMETHOD
GetRedirects
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRedirects
const
RedirectHistoryArray
&
aArra
)
;
friend
nsresult
mozilla
:
:
ipc
:
:
LoadInfoArgsToLoadInfo
(
const
Maybe
<
mozilla
:
:
net
:
:
LoadInfoArgs
>
&
aLoadInfoArgs
const
nsACString
&
aOriginRemoteType
nsINode
*
aCspToInheritLoadingContext
net
:
:
LoadInfo
*
*
outLoadInfo
)
;
~
LoadInfo
(
)
;
void
ComputeIsThirdPartyContext
(
nsPIDOMWindowOuter
*
aOuterWindow
)
;
void
ComputeIsThirdPartyContext
(
dom
:
:
WindowGlobalParent
*
aGlobal
)
;
void
SetIncludeCookiesSecFlag
(
)
;
friend
class
mozilla
:
:
dom
:
:
XMLHttpRequestMainThread
;
friend
class
:
:
nsDocShell
;
void
UpdateBrowsingContextID
(
uint64_t
aBrowsingContextID
)
{
mBrowsingContextID
=
aBrowsingContextID
;
}
void
UpdateFrameBrowsingContextID
(
uint64_t
aFrameBrowsingContextID
)
{
mFrameBrowsingContextID
=
aFrameBrowsingContextID
;
}
MOZ_NEVER_INLINE
void
ReleaseMembers
(
)
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipalToInherit
;
nsCOMPtr
<
nsIPrincipal
>
mTopLevelPrincipal
;
nsCOMPtr
<
nsIURI
>
mResultPrincipalURI
;
nsCOMPtr
<
nsIURI
>
mChannelCreationOriginalURI
;
nsCOMPtr
<
nsICSPEventListener
>
mCSPEventListener
;
nsCOMPtr
<
nsICookieJarSettings
>
mCookieJarSettings
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
mCspToInherit
;
nsCString
mTriggeringRemoteType
;
nsID
mSandboxedNullPrincipalID
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mClientInfo
;
UniquePtr
<
mozilla
:
:
dom
:
:
ClientSource
>
mReservedClientSource
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mReservedClientInfo
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mInitialClientInfo
;
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
mController
;
RefPtr
<
mozilla
:
:
dom
:
:
PerformanceStorage
>
mPerformanceStorage
;
nsWeakPtr
mLoadingContext
;
nsWeakPtr
mContextForTopLevelLoad
;
nsSecurityFlags
mSecurityFlags
;
uint32_t
mSandboxFlags
;
uint32_t
mTriggeringSandboxFlags
=
0
;
nsContentPolicyType
mInternalContentPolicyType
;
LoadTainting
mTainting
=
LoadTainting
:
:
Basic
;
bool
mBlockAllMixedContent
=
false
;
bool
mUpgradeInsecureRequests
=
false
;
bool
mBrowserUpgradeInsecureRequests
=
false
;
bool
mBrowserDidUpgradeInsecureRequests
=
false
;
bool
mBrowserWouldUpgradeInsecureRequests
=
false
;
bool
mForceAllowDataURI
=
false
;
bool
mAllowInsecureRedirectToDataURI
=
false
;
bool
mSkipContentPolicyCheckForWebRequest
=
false
;
bool
mOriginalFrameSrcLoad
=
false
;
bool
mForceInheritPrincipalDropped
=
false
;
uint64_t
mInnerWindowID
=
0
;
uint64_t
mBrowsingContextID
=
0
;
uint64_t
mWorkerAssociatedBrowsingContextID
=
0
;
uint64_t
mFrameBrowsingContextID
=
0
;
bool
mInitialSecurityCheckDone
=
false
;
bool
mIsThirdPartyContext
=
false
;
Maybe
<
bool
>
mIsThirdPartyContextToTopWindow
;
bool
mIsFormSubmission
=
false
;
bool
mSendCSPViolationEvents
=
true
;
OriginAttributes
mOriginAttributes
;
RedirectHistoryArray
mRedirectChainIncludingInternalRedirects
;
RedirectHistoryArray
mRedirectChain
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mAncestorPrincipals
;
nsTArray
<
uint64_t
>
mAncestorBrowsingContextIDs
;
nsTArray
<
nsCString
>
mCorsUnsafeHeaders
;
uint32_t
mRequestBlockingReason
=
BLOCKING_REASON_NONE
;
bool
mForcePreflight
=
false
;
bool
mIsPreflight
=
false
;
bool
mLoadTriggeredFromExternal
=
false
;
bool
mServiceWorkerTaintingSynthesized
=
false
;
bool
mDocumentHasUserInteracted
=
false
;
bool
mAllowListFutureDocumentsCreatedFromThisRedirectChain
=
false
;
bool
mNeedForCheckingAntiTrackingHeuristic
=
false
;
nsString
mCspNonce
;
bool
mSkipContentSniffing
=
false
;
uint32_t
mHttpsOnlyStatus
=
nsILoadInfo
:
:
HTTPS_ONLY_UNINITIALIZED
;
bool
mHstsStatus
=
false
;
bool
mHasValidUserGestureActivation
=
false
;
bool
mAllowDeprecatedSystemRequests
=
false
;
bool
mIsUserTriggeredSave
=
false
;
bool
mIsInDevToolsContext
=
false
;
bool
mParserCreatedScript
=
false
;
nsILoadInfo
:
:
StoragePermissionState
mStoragePermission
=
nsILoadInfo
:
:
NoStoragePermission
;
bool
mIsMetaRefresh
=
false
;
bool
mIsFromProcessingFrameAttributes
=
false
;
bool
mIsMediaRequest
=
false
;
bool
mIsMediaInitialRequest
=
false
;
bool
mIsFromObjectOrEmbed
=
false
;
bool
mSkipCheckForBrokenURLOrZeroSized
=
false
;
nsILoadInfo
:
:
CrossOriginEmbedderPolicy
mLoadingEmbedderPolicy
=
nsILoadInfo
:
:
EMBEDDER_POLICY_NULL
;
bool
mIsOriginTrialCoepCredentiallessEnabledForTopLevel
=
false
;
nsCOMPtr
<
nsIURI
>
mUnstrippedURI
;
nsCOMPtr
<
nsIInterceptionInfo
>
mInterceptionInfo
;
bool
mHasInjectedCookieForCookieBannerHandling
=
false
;
}
;
already_AddRefed
<
nsIPrincipal
>
CreateTruncatedPrincipal
(
nsIPrincipal
*
)
;
}
}
#
endif
