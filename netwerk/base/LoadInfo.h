#
ifndef
mozilla_LoadInfo_h
#
define
mozilla_LoadInfo_h
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
ClientInfo
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerDescriptor
.
h
"
class
nsINode
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
dom
{
class
PerformanceStorage
;
class
XMLHttpRequestMainThread
;
}
namespace
net
{
class
OptionalLoadInfoArgs
;
}
namespace
ipc
{
nsresult
LoadInfoArgsToLoadInfo
(
const
mozilla
:
:
net
:
:
OptionalLoadInfoArgs
&
aLoadInfoArgs
nsILoadInfo
*
*
outLoadInfo
)
;
}
namespace
net
{
typedef
nsTArray
<
nsCOMPtr
<
nsIRedirectHistoryEntry
>
>
RedirectHistoryArray
;
class
LoadInfo
final
:
public
nsILoadInfo
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSILOADINFO
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsINode
*
aLoadingContext
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aLoadingClientInfo
=
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
(
)
const
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
&
aController
=
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
(
)
)
;
LoadInfo
(
nsPIDOMWindowOuter
*
aOuterWindow
nsIPrincipal
*
aTriggeringPrincipal
nsISupports
*
aContextForTopLevelLoad
nsSecurityFlags
aSecurityFlags
)
;
already_AddRefed
<
nsILoadInfo
>
Clone
(
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneWithNewSecFlags
(
nsSecurityFlags
aSecurityFlags
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneForNewRequest
(
)
const
;
void
SetIsPreflight
(
)
;
void
SetUpgradeInsecureRequests
(
)
;
void
SetBrowserUpgradeInsecureRequests
(
)
;
void
SetBrowserWouldUpgradeInsecureRequests
(
)
;
private
:
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsIPrincipal
*
aSandboxedLoadingPrincipal
nsIPrincipal
*
aTopLevelPrincipal
nsIPrincipal
*
aTopLevelStorageAreaPrincipal
nsIURI
*
aResultPrincipalURI
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aReservedClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
&
aInitialClientInfo
const
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
&
aController
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
LoadTainting
aTainting
bool
aUpgradeInsecureRequests
bool
aBrowserUpgradeInsecureRequests
bool
aBrowserWouldUpgradeInsecureRequests
bool
aVerifySignedContent
bool
aEnforceSRI
bool
aForceAllowDataURI
bool
aAllowInsecureRedirectToDataURI
bool
aSkipContentPolicyCheckForWebRequest
bool
aForceInheritPrincipalDropped
uint64_t
aInnerWindowID
uint64_t
aOuterWindowID
uint64_t
aParentOuterWindowID
uint64_t
aTopOuterWindowID
uint64_t
aFrameOuterWindowID
bool
aEnforceSecurity
bool
aInitialSecurityCheckDone
bool
aIsThirdPartyRequest
bool
aIsDocshellReload
bool
aSendCSPViolationEvents
const
OriginAttributes
&
aOriginAttributes
RedirectHistoryArray
&
aRedirectChainIncludingInternalRedirects
RedirectHistoryArray
&
aRedirectChain
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
&
aAncestorPrincipals
const
nsTArray
<
uint64_t
>
&
aAncestorOuterWindowIDs
const
nsTArray
<
nsCString
>
&
aUnsafeHeaders
bool
aForcePreflight
bool
aIsPreflight
bool
aLoadTriggeredFromExternal
bool
aServiceWorkerTaintingSynthesized
)
;
LoadInfo
(
const
LoadInfo
&
rhs
)
;
NS_IMETHOD
GetRedirects
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aRedirects
const
RedirectHistoryArray
&
aArra
)
;
friend
nsresult
mozilla
:
:
ipc
:
:
LoadInfoArgsToLoadInfo
(
const
mozilla
:
:
net
:
:
OptionalLoadInfoArgs
&
aLoadInfoArgs
nsILoadInfo
*
*
outLoadInfo
)
;
~
LoadInfo
(
)
=
default
;
void
ComputeIsThirdPartyContext
(
nsPIDOMWindowOuter
*
aOuterWindow
)
;
void
SetIncludeCookiesSecFlag
(
)
;
friend
class
mozilla
:
:
dom
:
:
XMLHttpRequestMainThread
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipalToInherit
;
nsCOMPtr
<
nsIPrincipal
>
mSandboxedLoadingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mTopLevelPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mTopLevelStorageAreaPrincipal
;
nsCOMPtr
<
nsIURI
>
mResultPrincipalURI
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mClientInfo
;
UniquePtr
<
mozilla
:
:
dom
:
:
ClientSource
>
mReservedClientSource
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mReservedClientInfo
;
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
mInitialClientInfo
;
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
mController
;
RefPtr
<
mozilla
:
:
dom
:
:
PerformanceStorage
>
mPerformanceStorage
;
nsWeakPtr
mLoadingContext
;
nsWeakPtr
mContextForTopLevelLoad
;
nsSecurityFlags
mSecurityFlags
;
nsContentPolicyType
mInternalContentPolicyType
;
LoadTainting
mTainting
;
bool
mUpgradeInsecureRequests
;
bool
mBrowserUpgradeInsecureRequests
;
bool
mBrowserWouldUpgradeInsecureRequests
;
bool
mVerifySignedContent
;
bool
mEnforceSRI
;
bool
mForceAllowDataURI
;
bool
mAllowInsecureRedirectToDataURI
;
bool
mSkipContentPolicyCheckForWebRequest
;
bool
mOriginalFrameSrcLoad
;
bool
mForceInheritPrincipalDropped
;
uint64_t
mInnerWindowID
;
uint64_t
mOuterWindowID
;
uint64_t
mParentOuterWindowID
;
uint64_t
mTopOuterWindowID
;
uint64_t
mFrameOuterWindowID
;
bool
mEnforceSecurity
;
bool
mInitialSecurityCheckDone
;
bool
mIsThirdPartyContext
;
bool
mIsDocshellReload
;
bool
mSendCSPViolationEvents
;
OriginAttributes
mOriginAttributes
;
RedirectHistoryArray
mRedirectChainIncludingInternalRedirects
;
RedirectHistoryArray
mRedirectChain
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mAncestorPrincipals
;
nsTArray
<
uint64_t
>
mAncestorOuterWindowIDs
;
nsTArray
<
nsCString
>
mCorsUnsafeHeaders
;
bool
mForcePreflight
;
bool
mIsPreflight
;
bool
mLoadTriggeredFromExternal
;
bool
mServiceWorkerTaintingSynthesized
;
bool
mIsTracker
;
bool
mIsTrackerBlocked
;
}
;
}
}
#
endif
