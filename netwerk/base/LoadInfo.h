#
ifndef
mozilla_LoadInfo_h
#
define
mozilla_LoadInfo_h
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
class
nsINode
;
class
nsPIDOMWindowOuter
;
namespace
mozilla
{
namespace
dom
{
class
XMLHttpRequestMainThread
;
}
namespace
net
{
class
OptionalLoadInfoArgs
;
}
namespace
ipc
{
nsresult
LoadInfoArgsToLoadInfo
(
const
mozilla
:
:
net
:
:
OptionalLoadInfoArgs
&
aLoadInfoArgs
nsILoadInfo
*
*
outLoadInfo
)
;
}
namespace
net
{
class
MOZ_EXPORT
LoadInfo
final
:
public
nsILoadInfo
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSILOADINFO
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsINode
*
aLoadingContext
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
)
;
LoadInfo
(
nsPIDOMWindowOuter
*
aOuterWindow
nsIPrincipal
*
aTriggeringPrincipal
nsSecurityFlags
aSecurityFlags
)
;
already_AddRefed
<
nsILoadInfo
>
Clone
(
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneWithNewSecFlags
(
nsSecurityFlags
aSecurityFlags
)
const
;
already_AddRefed
<
nsILoadInfo
>
CloneForNewRequest
(
)
const
;
void
SetIsPreflight
(
)
;
private
:
LoadInfo
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIPrincipal
*
aPrincipalToInherit
nsSecurityFlags
aSecurityFlags
nsContentPolicyType
aContentPolicyType
LoadTainting
aTainting
bool
aUpgradeInsecureRequests
bool
aVerifySignedContent
bool
aEnforceSRI
bool
aForceInheritPrincipalDropped
uint64_t
aInnerWindowID
uint64_t
aOuterWindowID
uint64_t
aParentOuterWindowID
uint64_t
aFrameOuterWindowID
bool
aEnforceSecurity
bool
aInitialSecurityCheckDone
bool
aIsThirdPartyRequest
const
NeckoOriginAttributes
&
aOriginAttributes
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aRedirectChainIncludingInternalRedirects
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aRedirectChain
const
nsTArray
<
nsCString
>
&
aUnsafeHeaders
bool
aForcePreflight
bool
aIsPreflight
)
;
LoadInfo
(
const
LoadInfo
&
rhs
)
;
friend
nsresult
mozilla
:
:
ipc
:
:
LoadInfoArgsToLoadInfo
(
const
mozilla
:
:
net
:
:
OptionalLoadInfoArgs
&
aLoadInfoArgs
nsILoadInfo
*
*
outLoadInfo
)
;
~
LoadInfo
(
)
;
void
ComputeIsThirdPartyContext
(
nsPIDOMWindowOuter
*
aOuterWindow
)
;
void
SetIncludeCookiesSecFlag
(
)
;
friend
class
mozilla
:
:
dom
:
:
XMLHttpRequestMainThread
;
nsCOMPtr
<
nsIPrincipal
>
mLoadingPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipalToInherit
;
nsWeakPtr
mLoadingContext
;
nsSecurityFlags
mSecurityFlags
;
nsContentPolicyType
mInternalContentPolicyType
;
LoadTainting
mTainting
;
bool
mUpgradeInsecureRequests
;
bool
mVerifySignedContent
;
bool
mEnforceSRI
;
bool
mForceInheritPrincipalDropped
;
uint64_t
mInnerWindowID
;
uint64_t
mOuterWindowID
;
uint64_t
mParentOuterWindowID
;
uint64_t
mFrameOuterWindowID
;
bool
mEnforceSecurity
;
bool
mInitialSecurityCheckDone
;
bool
mIsThirdPartyContext
;
NeckoOriginAttributes
mOriginAttributes
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mRedirectChainIncludingInternalRedirects
;
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
mRedirectChain
;
nsTArray
<
nsCString
>
mCorsUnsafeHeaders
;
bool
mForcePreflight
;
bool
mIsPreflight
;
}
;
}
}
#
endif
