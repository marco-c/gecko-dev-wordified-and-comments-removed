#
include
"
ContentRange
.
h
"
#
include
"
nsContentUtils
.
h
"
mozilla
:
:
net
:
:
ContentRange
:
:
ContentRange
(
const
nsACString
&
aRangeHeader
uint64_t
aSize
)
:
mStart
(
0
)
mEnd
(
0
)
mSize
(
0
)
{
auto
parsed
=
nsContentUtils
:
:
ParseSingleRangeRequest
(
aRangeHeader
true
)
;
if
(
!
parsed
)
{
return
;
}
MOZ_ASSERT
(
parsed
-
>
Start
(
)
.
isSome
(
)
|
|
parsed
-
>
End
(
)
.
isSome
(
)
)
;
MOZ_ASSERT
(
parsed
-
>
Start
(
)
.
isNothing
(
)
|
|
parsed
-
>
End
(
)
.
isNothing
(
)
|
|
*
parsed
-
>
Start
(
)
<
=
*
parsed
-
>
End
(
)
)
;
if
(
parsed
-
>
Start
(
)
.
isNothing
(
)
)
{
mStart
=
aSize
-
*
parsed
-
>
End
(
)
;
mEnd
=
mStart
+
*
parsed
-
>
End
(
)
-
1
;
}
else
{
if
(
*
parsed
-
>
Start
(
)
>
=
aSize
)
{
return
;
}
mStart
=
*
parsed
-
>
Start
(
)
;
if
(
parsed
-
>
End
(
)
.
isNothing
(
)
|
|
*
parsed
-
>
End
(
)
>
=
aSize
)
{
mEnd
=
aSize
-
1
;
}
else
{
mEnd
=
*
parsed
-
>
End
(
)
;
}
}
mSize
=
aSize
;
}
void
mozilla
:
:
net
:
:
ContentRange
:
:
AsHeader
(
nsACString
&
aOutString
)
const
{
aOutString
.
Assign
(
"
bytes
"
_ns
)
;
aOutString
.
AppendInt
(
mStart
)
;
aOutString
.
AppendLiteral
(
"
-
"
)
;
aOutString
.
AppendInt
(
mEnd
)
;
aOutString
.
AppendLiteral
(
"
/
"
)
;
aOutString
.
AppendInt
(
mSize
)
;
}
