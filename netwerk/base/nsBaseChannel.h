#
ifndef
nsBaseChannel_h__
#
define
nsBaseChannel_h__
#
include
"
mozilla
/
net
/
NeckoTargetHolder
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
nsInputStreamPump
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsILoadGroup
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIProgressEventSink
.
h
"
#
include
"
nsITransport
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsIThreadRetargetableRequest
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
mozilla
/
net
/
PrivateBrowsingChannel
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsIInputStream
;
class
nsBaseChannel
:
public
nsHashPropertyBag
public
nsIIdentChannel
public
nsIThreadRetargetableRequest
public
nsIInterfaceRequestor
public
nsITransportEventSink
public
nsIAsyncVerifyRedirectCallback
public
mozilla
:
:
net
:
:
PrivateBrowsingChannel
<
nsBaseChannel
>
public
mozilla
:
:
net
:
:
NeckoTargetHolder
protected
nsIStreamListener
protected
nsIThreadRetargetableStreamListener
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIREQUEST
NS_DECL_NSICHANNEL
NS_DECL_NSIIDENTCHANNEL
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSITRANSPORTEVENTSINK
NS_DECL_NSIASYNCVERIFYREDIRECTCALLBACK
NS_DECL_NSITHREADRETARGETABLEREQUEST
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
nsBaseChannel
(
)
;
nsresult
Init
(
)
{
return
NS_OK
;
}
protected
:
virtual
~
nsBaseChannel
(
)
;
using
BlockingPromise
=
mozilla
:
:
MozPromise
<
nsresult
nsresult
true
>
;
private
:
virtual
nsresult
OpenContentStream
(
bool
async
nsIInputStream
*
*
stream
nsIChannel
*
*
channel
)
=
0
;
virtual
nsresult
BeginAsyncRead
(
nsIStreamListener
*
listener
nsIRequest
*
*
request
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
virtual
nsresult
ListenerBlockingPromise
(
BlockingPromise
*
*
aPromise
)
{
NS_ENSURE_ARG
(
aPromise
)
;
*
aPromise
=
nullptr
;
return
NS_OK
;
}
virtual
bool
GetStatusArg
(
nsresult
status
nsString
&
statusArg
)
{
return
false
;
}
virtual
void
OnCallbacksChanged
(
)
{
}
virtual
void
OnChannelDone
(
)
{
}
public
:
nsresult
Redirect
(
nsIChannel
*
newChannel
uint32_t
redirectFlags
bool
openNewChannel
)
;
bool
HasContentTypeHint
(
)
const
;
nsIURI
*
URI
(
)
{
return
mURI
;
}
void
SetURI
(
nsIURI
*
uri
)
{
NS_ASSERTION
(
uri
"
must
specify
a
non
-
null
URI
"
)
;
NS_ASSERTION
(
!
mURI
"
must
not
modify
URI
"
)
;
NS_ASSERTION
(
!
mOriginalURI
"
how
did
that
get
set
so
early
?
"
)
;
mURI
=
uri
;
mOriginalURI
=
uri
;
}
nsIURI
*
OriginalURI
(
)
{
return
mOriginalURI
;
}
nsISupports
*
SecurityInfo
(
)
{
return
mSecurityInfo
;
}
void
SetSecurityInfo
(
nsISupports
*
info
)
{
mSecurityInfo
=
info
;
}
bool
HasLoadFlag
(
uint32_t
flag
)
{
return
(
mLoadFlags
&
flag
)
!
=
0
;
}
virtual
bool
Pending
(
)
const
{
return
mPumpingData
|
|
mWaitingOnAsyncRedirect
;
}
template
<
class
T
>
void
GetCallback
(
nsCOMPtr
<
T
>
&
result
)
{
GetInterface
(
NS_GET_TEMPLATE_IID
(
T
)
getter_AddRefs
(
result
)
)
;
}
void
EnableSynthesizedProgressEvents
(
bool
enable
)
{
mSynthProgressEvents
=
enable
;
}
void
SetStreamListener
(
nsIStreamListener
*
listener
)
{
mListener
=
listener
;
}
nsIStreamListener
*
StreamListener
(
)
{
return
mListener
;
}
nsresult
PushStreamConverter
(
const
char
*
fromType
const
char
*
toType
bool
invalidatesContentLength
=
true
nsIStreamListener
*
*
converter
=
nullptr
)
;
protected
:
void
DisallowThreadRetargeting
(
)
{
mAllowThreadRetargeting
=
false
;
}
virtual
void
SetupNeckoTarget
(
)
;
private
:
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIREQUESTOBSERVER
nsresult
BeginPumpingData
(
)
;
void
CallbacksChanged
(
)
{
mProgressSink
=
nullptr
;
mQueriedProgressSink
=
false
;
OnCallbacksChanged
(
)
;
}
void
ChannelDone
(
)
{
mListener
=
nullptr
;
OnChannelDone
(
)
;
}
void
HandleAsyncRedirect
(
nsIChannel
*
newChannel
)
;
void
ContinueHandleAsyncRedirect
(
nsresult
result
)
;
nsresult
ContinueRedirect
(
)
;
void
ClassifyURI
(
)
;
class
RedirectRunnable
:
public
mozilla
:
:
Runnable
{
public
:
RedirectRunnable
(
nsBaseChannel
*
chan
nsIChannel
*
newChannel
)
:
mozilla
:
:
Runnable
(
"
nsBaseChannel
:
:
RedirectRunnable
"
)
mChannel
(
chan
)
mNewChannel
(
newChannel
)
{
MOZ_ASSERT
(
newChannel
"
Must
have
channel
to
redirect
to
"
)
;
}
NS_IMETHOD
Run
(
)
override
{
mChannel
-
>
HandleAsyncRedirect
(
mNewChannel
)
;
return
NS_OK
;
}
private
:
RefPtr
<
nsBaseChannel
>
mChannel
;
nsCOMPtr
<
nsIChannel
>
mNewChannel
;
}
;
friend
class
RedirectRunnable
;
RefPtr
<
nsInputStreamPump
>
mPump
;
RefPtr
<
nsIRequest
>
mRequest
;
bool
mPumpingData
;
nsCOMPtr
<
nsIProgressEventSink
>
mProgressSink
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsISupports
>
mOwner
;
nsCOMPtr
<
nsISupports
>
mSecurityInfo
;
nsCOMPtr
<
nsIChannel
>
mRedirectChannel
;
nsCString
mContentType
;
nsCString
mContentCharset
;
uint32_t
mLoadFlags
;
bool
mQueriedProgressSink
;
bool
mSynthProgressEvents
;
bool
mAllowThreadRetargeting
;
bool
mWaitingOnAsyncRedirect
;
bool
mOpenRedirectChannel
;
uint32_t
mRedirectFlags
;
protected
:
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
nsCOMPtr
<
nsILoadInfo
>
mLoadInfo
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mCallbacks
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
nsresult
mStatus
;
uint32_t
mContentDispositionHint
;
nsAutoPtr
<
nsString
>
mContentDispositionFilename
;
int64_t
mContentLength
;
uint64_t
mChannelId
;
bool
mWasOpened
;
friend
class
mozilla
:
:
net
:
:
PrivateBrowsingChannel
<
nsBaseChannel
>
;
}
;
#
endif
