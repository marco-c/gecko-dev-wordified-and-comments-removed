#
include
"
nsIRequest
.
idl
"
#
include
"
nsILoadInfo
.
idl
"
interface
nsIURI
;
interface
nsIInterfaceRequestor
;
interface
nsIInputStream
;
interface
nsIStreamListener
;
%
{
C
+
+
#
include
"
nsCOMPtr
.
h
"
%
}
[
scriptable
uuid
(
2c389865
-
23db
-
4aa7
-
9fe5
-
60cc7b00697e
)
]
interface
nsIChannel
:
nsIRequest
{
attribute
nsIURI
originalURI
;
readonly
attribute
nsIURI
URI
;
attribute
nsISupports
owner
;
attribute
nsIInterfaceRequestor
notificationCallbacks
;
readonly
attribute
nsISupports
securityInfo
;
attribute
ACString
contentType
;
attribute
ACString
contentCharset
;
attribute
int64_t
contentLength
;
nsIInputStream
open
(
)
;
void
asyncOpen
(
in
nsIStreamListener
aListener
)
;
[
must_use
]
readonly
attribute
boolean
canceled
;
const
unsigned
long
LOAD_DOCUMENT_URI
=
1
<
<
16
;
const
unsigned
long
LOAD_RETARGETED_DOCUMENT_URI
=
1
<
<
17
;
const
unsigned
long
LOAD_REPLACE
=
1
<
<
18
;
const
unsigned
long
LOAD_INITIAL_DOCUMENT_URI
=
1
<
<
19
;
const
unsigned
long
LOAD_TARGETED
=
1
<
<
20
;
const
unsigned
long
LOAD_CALL_CONTENT_SNIFFERS
=
1
<
<
21
;
const
unsigned
long
LOAD_BYPASS_URL_CLASSIFIER
=
1
<
<
22
;
const
unsigned
long
LOAD_MEDIA_SNIFFER_OVERRIDES_CONTENT_TYPE
=
1
<
<
23
;
const
unsigned
long
LOAD_EXPLICIT_CREDENTIALS
=
1
<
<
24
;
const
unsigned
long
LOAD_BYPASS_SERVICE_WORKER
=
1
<
<
25
;
attribute
unsigned
long
contentDisposition
;
const
unsigned
long
DISPOSITION_INLINE
=
0
;
const
unsigned
long
DISPOSITION_ATTACHMENT
=
1
;
attribute
AString
contentDispositionFilename
;
readonly
attribute
ACString
contentDispositionHeader
;
attribute
nsILoadInfo
loadInfo
;
readonly
attribute
bool
isDocument
;
%
{
C
+
+
inline
bool
IsDocument
(
)
{
bool
isDocument
=
false
;
if
(
NS_SUCCEEDED
(
GetIsDocument
(
&
isDocument
)
)
&
&
isDocument
)
{
return
true
;
}
return
false
;
}
inline
already_AddRefed
<
nsILoadInfo
>
LoadInfo
(
)
{
nsCOMPtr
<
nsILoadInfo
>
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetLoadInfo
(
getter_AddRefs
(
result
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
&
&
result
)
;
return
result
.
forget
(
)
;
}
%
}
}
;
[
builtinclass
scriptable
uuid
(
1ebbff64
-
d742
-
4f4a
-
aad5
-
4df2d1eb937a
)
]
interface
nsIIdentChannel
:
nsIChannel
{
[
must_use
]
attribute
uint64_t
channelId
;
%
{
C
+
+
inline
uint64_t
ChannelId
(
)
{
uint64_t
value
=
0
;
if
(
NS_SUCCEEDED
(
GetChannelId
(
&
value
)
)
)
{
return
value
;
}
return
0
;
}
%
}
}
;
