#
ifndef
nsSimpleNestedURI_h__
#
define
nsSimpleNestedURI_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsSimpleURI
.
h
"
#
include
"
nsINestedURI
.
h
"
#
include
"
nsIURIMutator
.
h
"
#
include
"
nsIIPCSerializableURI
.
h
"
namespace
mozilla
{
namespace
net
{
class
nsSimpleNestedURI
:
public
nsSimpleURI
public
nsINestedURI
{
protected
:
~
nsSimpleNestedURI
(
)
{
}
public
:
nsSimpleNestedURI
(
)
{
}
explicit
nsSimpleNestedURI
(
nsIURI
*
innerURI
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSINESTEDURI
virtual
nsresult
EqualsInternal
(
nsIURI
*
other
RefHandlingEnum
refHandlingMode
bool
*
result
)
override
;
virtual
nsSimpleURI
*
StartClone
(
RefHandlingEnum
refHandlingMode
const
nsACString
&
newRef
)
override
;
NS_IMETHOD
Mutate
(
nsIURIMutator
*
*
_retval
)
override
;
NS_IMETHOD
Read
(
nsIObjectInputStream
*
aStream
)
override
;
NS_IMETHOD
Write
(
nsIObjectOutputStream
*
aStream
)
override
;
NS_DECL_NSIIPCSERIALIZABLEURI
NS_IMETHOD
GetClassIDNoAlloc
(
nsCID
*
aClassIDNoAlloc
)
override
;
protected
:
nsCOMPtr
<
nsIURI
>
mInnerURI
;
public
:
class
Mutator
final
:
public
nsIURIMutator
public
BaseURIMutator
<
nsSimpleNestedURI
>
{
NS_DECL_ISUPPORTS
NS_FORWARD_SAFE_NSIURISETTERS_RET
(
mURI
)
explicit
Mutator
(
)
{
}
private
:
virtual
~
Mutator
(
)
{
}
MOZ_MUST_USE
NS_IMETHOD
Deserialize
(
const
mozilla
:
:
ipc
:
:
URIParams
&
aParams
)
override
{
return
InitFromIPCParams
(
aParams
)
;
}
MOZ_MUST_USE
NS_IMETHOD
Read
(
nsIObjectInputStream
*
aStream
)
override
{
return
InitFromInputStream
(
aStream
)
;
}
MOZ_MUST_USE
NS_IMETHOD
Finalize
(
nsIURI
*
*
aURI
)
override
{
mURI
-
>
mMutable
=
false
;
mURI
.
forget
(
aURI
)
;
return
NS_OK
;
}
MOZ_MUST_USE
NS_IMETHOD
SetSpec
(
const
nsACString
&
aSpec
nsIURIMutator
*
*
aMutator
)
override
{
if
(
aMutator
)
{
NS_ADDREF
(
*
aMutator
=
this
)
;
}
return
InitFromSpec
(
aSpec
)
;
}
void
ResetMutable
(
)
{
if
(
mURI
)
{
mURI
-
>
mMutable
=
true
;
}
}
friend
class
nsSimpleNestedURI
;
}
;
friend
BaseURIMutator
<
nsSimpleNestedURI
>
;
}
;
}
}
#
endif
