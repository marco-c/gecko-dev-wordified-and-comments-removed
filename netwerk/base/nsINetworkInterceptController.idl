#
include
"
nsISupports
.
idl
"
#
include
"
nsIContentPolicy
.
idl
"
interface
nsICacheInfoChannel
;
interface
nsIChannel
;
interface
nsIConsoleReportCollector
;
interface
nsIInputStream
;
interface
nsIOutputStream
;
interface
nsIURI
;
%
{
C
+
+
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIConsoleReportCollector
.
h
"
#
include
"
nsILoadInfo
.
h
"
namespace
mozilla
{
class
TimeStamp
;
namespace
dom
{
class
ChannelInfo
;
}
}
%
}
native
TimeStamp
(
mozilla
:
:
TimeStamp
)
;
[
ptr
]
native
ChannelInfo
(
mozilla
:
:
dom
:
:
ChannelInfo
)
;
[
scriptable
uuid
(
51039eb6
-
bea0
-
40c7
-
b523
-
ccab56cc4fde
)
]
interface
nsIInterceptedBodyCallback
:
nsISupports
{
void
bodyComplete
(
in
nsresult
aRv
)
;
}
;
[
scriptable
builtinclass
uuid
(
f4b82975
-
6a86
-
4cc4
-
87fe
-
9a1fd430c86d
)
]
interface
nsIInterceptedChannel
:
nsISupports
{
void
resetInterception
(
in
boolean
bypass
)
;
void
synthesizeStatus
(
in
uint16_t
status
in
ACString
reason
)
;
void
synthesizeHeader
(
in
ACString
name
in
ACString
value
)
;
void
startSynthesizedResponse
(
in
nsIInputStream
body
in
nsIInterceptedBodyCallback
callback
in
nsICacheInfoChannel
channel
in
ACString
finalURLSpec
in
boolean
responseRedirected
)
;
void
finishSynthesizedResponse
(
)
;
void
cancelInterception
(
in
nsresult
status
)
;
readonly
attribute
nsIChannel
channel
;
readonly
attribute
nsIURI
secureUpgradedChannelURI
;
[
noscript
]
void
setChannelInfo
(
in
ChannelInfo
channelInfo
)
;
[
noscript
]
readonly
attribute
nsContentPolicyType
internalContentPolicyType
;
[
noscript
]
readonly
attribute
nsIConsoleReportCollector
consoleReportCollector
;
[
noscript
]
void
SetFetchHandlerStart
(
in
TimeStamp
aTimeStamp
)
;
[
noscript
]
void
SetFetchHandlerFinish
(
in
TimeStamp
aTimeStamp
)
;
[
noscript
]
void
SetRemoteWorkerLaunchStart
(
in
TimeStamp
aTimeStamp
)
;
[
noscript
]
void
SetRemoteWorkerLaunchEnd
(
in
TimeStamp
aTimeStamp
)
;
[
noscript
]
boolean
GetIsReset
(
)
;
%
{
C
+
+
already_AddRefed
<
nsIConsoleReportCollector
>
GetConsoleReportCollector
(
)
{
nsCOMPtr
<
nsIConsoleReportCollector
>
reporter
;
GetConsoleReportCollector
(
getter_AddRefs
(
reporter
)
)
;
return
reporter
.
forget
(
)
;
}
void
GetSubresourceTimeStampKey
(
nsIChannel
*
aChannel
nsACString
&
aKey
)
{
if
(
!
nsContentUtils
:
:
IsNonSubresourceRequest
(
aChannel
)
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
aChannel
-
>
LoadInfo
(
)
;
switch
(
loadInfo
-
>
InternalContentPolicyType
(
)
)
{
case
nsIContentPolicy
:
:
TYPE_SCRIPT
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SCRIPT
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_SCRIPT_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_MODULE
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_MODULE_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_WORKER_IMPORT_SCRIPTS
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_WORKER_STATIC_MODULE
:
{
aKey
=
"
subresource
-
script
"
_ns
;
break
;
}
case
nsIContentPolicy
:
:
TYPE_IMAGE
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE_PRELOAD
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE_FAVICON
:
{
aKey
=
"
subresource
-
image
"
_ns
;
break
;
}
case
nsIContentPolicy
:
:
TYPE_STYLESHEET
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_STYLESHEET
:
case
nsIContentPolicy
:
:
TYPE_INTERNAL_STYLESHEET_PRELOAD
:
{
aKey
=
"
subresource
-
stylesheet
"
_ns
;
break
;
}
default
:
{
aKey
=
"
subresource
-
other
"
_ns
;
break
;
}
}
}
}
bool
IsReset
(
)
{
bool
result
;
GetIsReset
(
&
result
)
;
return
result
;
}
%
}
[
noscript
]
void
setReleaseHandle
(
in
nsISupports
aHandle
)
;
}
;
[
scriptable
uuid
(
70d2b4fe
-
a552
-
48cd
-
8d93
-
1d8437a56b53
)
]
interface
nsINetworkInterceptController
:
nsISupports
{
boolean
shouldPrepareForIntercept
(
in
nsIURI
aURI
in
nsIChannel
aChannel
)
;
void
channelIntercepted
(
in
nsIInterceptedChannel
aChannel
)
;
}
;
