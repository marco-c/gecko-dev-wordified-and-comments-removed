#
include
"
IPv4Parser
.
h
"
#
include
"
mozilla
/
EndianUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
:
:
net
:
:
IPv4Parser
{
bool
EndsInANumber
(
const
nsCString
&
input
)
{
nsTArray
<
nsDependentCSubstring
>
parts
;
for
(
const
nsDependentCSubstring
&
part
:
input
.
Split
(
'
.
'
)
)
{
parts
.
AppendElement
(
part
)
;
}
if
(
parts
.
Length
(
)
=
=
0
)
{
return
false
;
}
if
(
parts
.
LastElement
(
)
.
IsEmpty
(
)
)
{
if
(
parts
.
Length
(
)
=
=
1
)
{
return
false
;
}
Unused
<
<
parts
.
PopLastElement
(
)
;
}
const
nsDependentCSubstring
&
last
=
parts
.
LastElement
(
)
;
if
(
!
last
.
IsEmpty
(
)
)
{
if
(
ContainsOnlyAsciiDigits
(
last
)
)
{
return
true
;
}
}
if
(
StringBeginsWith
(
last
"
0x
"
_ns
)
|
|
StringBeginsWith
(
last
"
0X
"
_ns
)
)
{
if
(
ContainsOnlyAsciiHexDigits
(
Substring
(
last
2
)
)
)
{
return
true
;
}
}
return
false
;
}
nsresult
ParseIPv4Number10
(
const
nsACString
&
input
uint32_t
&
number
uint32_t
maxNumber
)
{
uint64_t
value
=
0
;
const
char
*
current
=
input
.
BeginReading
(
)
;
const
char
*
end
=
input
.
EndReading
(
)
;
for
(
;
current
<
end
;
+
+
current
)
{
char
c
=
*
current
;
MOZ_ASSERT
(
c
>
=
'
0
'
&
&
c
<
=
'
9
'
)
;
value
*
=
10
;
value
+
=
c
-
'
0
'
;
}
if
(
value
<
=
maxNumber
)
{
number
=
value
;
return
NS_OK
;
}
number
=
0
;
return
NS_ERROR_FAILURE
;
}
nsresult
ParseIPv4Number
(
const
nsACString
&
input
int32_t
base
uint32_t
&
number
uint32_t
maxNumber
)
{
uint64_t
value
=
0
;
const
char
*
current
=
input
.
BeginReading
(
)
;
const
char
*
end
=
input
.
EndReading
(
)
;
switch
(
base
)
{
case
16
:
+
+
current
;
[
[
fallthrough
]
]
;
case
8
:
+
+
current
;
break
;
case
10
:
default
:
break
;
}
for
(
;
current
<
end
;
+
+
current
)
{
value
*
=
base
;
char
c
=
*
current
;
MOZ_ASSERT
(
(
base
=
=
10
&
&
IsAsciiDigit
(
c
)
)
|
|
(
base
=
=
8
&
&
c
>
=
'
0
'
&
&
c
<
=
'
7
'
)
|
|
(
base
=
=
16
&
&
IsAsciiHexDigit
(
c
)
)
)
;
if
(
IsAsciiDigit
(
c
)
)
{
value
+
=
c
-
'
0
'
;
}
else
if
(
c
>
=
'
a
'
&
&
c
<
=
'
f
'
)
{
value
+
=
c
-
'
a
'
+
10
;
}
else
if
(
c
>
=
'
A
'
&
&
c
<
=
'
F
'
)
{
value
+
=
c
-
'
A
'
+
10
;
}
}
if
(
value
<
=
maxNumber
)
{
number
=
value
;
return
NS_OK
;
}
number
=
0
;
return
NS_ERROR_FAILURE
;
}
nsresult
NormalizeIPv4
(
const
nsACString
&
host
nsCString
&
result
)
{
int32_t
bases
[
4
]
=
{
10
10
10
10
}
;
bool
onlyBase10
=
true
;
int32_t
dotIndex
[
3
]
;
nsDependentCSubstring
filteredHost
;
bool
trailingDot
=
false
;
if
(
host
.
Length
(
)
>
0
&
&
host
.
Last
(
)
=
=
'
.
'
)
{
trailingDot
=
true
;
filteredHost
.
Rebind
(
host
.
BeginReading
(
)
host
.
Length
(
)
-
1
)
;
}
else
{
filteredHost
.
Rebind
(
host
.
BeginReading
(
)
host
.
Length
(
)
)
;
}
int32_t
length
=
static_cast
<
int32_t
>
(
filteredHost
.
Length
(
)
)
;
int32_t
dotCount
=
ValidateIPv4Number
(
filteredHost
bases
dotIndex
onlyBase10
length
trailingDot
)
;
if
(
dotCount
<
0
|
|
length
<
=
0
)
{
return
NS_ERROR_FAILURE
;
}
static
const
uint32_t
upperBounds
[
]
=
{
0xffffffffu
0xffffffu
0xffffu
0xffu
}
;
uint32_t
ipv4
;
int32_t
start
=
(
dotCount
>
0
?
dotIndex
[
dotCount
-
1
]
+
1
:
0
)
;
nsresult
res
;
res
=
(
onlyBase10
?
ParseIPv4Number10
(
Substring
(
host
start
length
-
start
)
ipv4
upperBounds
[
dotCount
]
)
:
ParseIPv4Number
(
Substring
(
host
start
length
-
start
)
bases
[
dotCount
]
ipv4
upperBounds
[
dotCount
]
)
)
;
if
(
NS_FAILED
(
res
)
)
{
return
NS_ERROR_FAILURE
;
}
int32_t
lastUsed
=
-
1
;
for
(
int32_t
i
=
0
;
i
<
dotCount
;
i
+
+
)
{
uint32_t
number
;
start
=
lastUsed
+
1
;
lastUsed
=
dotIndex
[
i
]
;
res
=
(
onlyBase10
?
ParseIPv4Number10
(
Substring
(
host
start
lastUsed
-
start
)
number
255
)
:
ParseIPv4Number
(
Substring
(
host
start
lastUsed
-
start
)
bases
[
i
]
number
255
)
)
;
if
(
NS_FAILED
(
res
)
)
{
return
NS_ERROR_FAILURE
;
}
ipv4
+
=
number
<
<
(
8
*
(
3
-
i
)
)
;
}
if
(
dotCount
=
=
1
&
&
dotIndex
[
0
]
=
=
length
-
1
)
{
ipv4
=
(
ipv4
&
0xff000000
)
>
>
24
;
}
uint8_t
ipSegments
[
4
]
;
NetworkEndian
:
:
writeUint32
(
ipSegments
ipv4
)
;
result
=
nsPrintfCString
(
"
%
d
.
%
d
.
%
d
.
%
d
"
ipSegments
[
0
]
ipSegments
[
1
]
ipSegments
[
2
]
ipSegments
[
3
]
)
;
return
NS_OK
;
}
int32_t
ValidateIPv4Number
(
const
nsACString
&
host
int32_t
bases
[
4
]
int32_t
dotIndex
[
3
]
bool
&
onlyBase10
int32_t
length
bool
trailingDot
)
{
MOZ_ASSERT
(
length
<
=
(
int32_t
)
host
.
Length
(
)
)
;
if
(
length
<
=
0
)
{
return
-
1
;
}
bool
lastWasNumber
=
false
;
int32_t
dotCount
=
0
;
onlyBase10
=
true
;
for
(
int32_t
i
=
0
;
i
<
length
;
i
+
+
)
{
char
current
=
host
[
i
]
;
if
(
current
=
=
'
.
'
)
{
if
(
!
(
lastWasNumber
|
|
(
i
>
=
2
&
&
(
host
[
i
-
1
]
=
=
'
X
'
|
|
host
[
i
-
1
]
=
=
'
x
'
)
&
&
host
[
i
-
2
]
=
=
'
0
'
)
)
|
|
(
i
=
=
(
length
-
1
)
&
&
trailingDot
)
)
{
return
-
1
;
}
if
(
dotCount
>
2
)
{
return
-
1
;
}
lastWasNumber
=
false
;
dotIndex
[
dotCount
]
=
i
;
dotCount
+
+
;
}
else
if
(
current
=
=
'
X
'
|
|
current
=
=
'
x
'
)
{
if
(
!
lastWasNumber
|
|
i
=
=
(
length
-
1
)
|
|
(
dotCount
=
=
0
&
&
i
!
=
1
)
|
|
host
[
i
-
1
]
!
=
'
0
'
|
|
(
dotCount
>
0
&
&
host
[
i
-
2
]
!
=
'
.
'
)
)
{
return
-
1
;
}
lastWasNumber
=
false
;
bases
[
dotCount
]
=
16
;
onlyBase10
=
false
;
}
else
if
(
current
=
=
'
0
'
)
{
if
(
i
<
length
-
1
&
&
host
[
i
+
1
]
!
=
'
.
'
&
&
(
i
=
=
0
|
|
host
[
i
-
1
]
=
=
'
.
'
)
)
{
bases
[
dotCount
]
=
8
;
onlyBase10
=
false
;
}
lastWasNumber
=
true
;
}
else
if
(
current
>
=
'
1
'
&
&
current
<
=
'
7
'
)
{
lastWasNumber
=
true
;
}
else
if
(
current
>
=
'
8
'
&
&
current
<
=
'
9
'
)
{
if
(
bases
[
dotCount
]
=
=
8
)
{
return
-
1
;
}
lastWasNumber
=
true
;
}
else
if
(
(
current
>
=
'
a
'
&
&
current
<
=
'
f
'
)
|
|
(
current
>
=
'
A
'
&
&
current
<
=
'
F
'
)
)
{
if
(
bases
[
dotCount
]
!
=
16
)
{
return
-
1
;
}
lastWasNumber
=
true
;
}
else
{
return
-
1
;
}
}
return
dotCount
;
}
bool
ContainsOnlyAsciiDigits
(
const
nsDependentCSubstring
&
input
)
{
for
(
const
auto
*
c
=
input
.
BeginReading
(
)
;
c
<
input
.
EndReading
(
)
;
c
+
+
)
{
if
(
!
IsAsciiDigit
(
*
c
)
)
{
return
false
;
}
}
return
true
;
}
bool
ContainsOnlyAsciiHexDigits
(
const
nsDependentCSubstring
&
input
)
{
for
(
const
auto
*
c
=
input
.
BeginReading
(
)
;
c
<
input
.
EndReading
(
)
;
c
+
+
)
{
if
(
!
IsAsciiHexDigit
(
*
c
)
)
{
return
false
;
}
}
return
true
;
}
}
