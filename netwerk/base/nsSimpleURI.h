#
ifndef
nsSimpleURI_h__
#
define
nsSimpleURI_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIURIWithQuery
.
h
"
#
include
"
nsISerializable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIClassInfo
.
h
"
#
include
"
nsIMutable
.
h
"
#
include
"
nsISizeOf
.
h
"
#
include
"
nsIIPCSerializableURI
.
h
"
namespace
mozilla
{
namespace
net
{
#
define
NS_THIS_SIMPLEURI_IMPLEMENTATION_CID
\
{
/
*
0b9bb0c2
-
fee6
-
470b
-
b9b9
-
9fd9462b5e19
*
/
\
0x0b9bb0c2
\
0xfee6
\
0x470b
\
{
0xb9
0xb9
0x9f
0xd9
0x46
0x2b
0x5e
0x19
}
\
}
class
nsSimpleURI
:
public
nsIURIWithQuery
public
nsISerializable
public
nsIClassInfo
public
nsIMutable
public
nsISizeOf
public
nsIIPCSerializableURI
{
protected
:
virtual
~
nsSimpleURI
(
)
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIURI
NS_DECL_NSIURIWITHQUERY
NS_DECL_NSISERIALIZABLE
NS_DECL_NSICLASSINFO
NS_DECL_NSIMUTABLE
NS_DECL_NSIIPCSERIALIZABLEURI
nsSimpleURI
(
)
;
virtual
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
protected
:
enum
RefHandlingEnum
{
eIgnoreRef
eHonorRef
eReplaceRef
}
;
virtual
nsresult
EqualsInternal
(
nsIURI
*
other
RefHandlingEnum
refHandlingMode
bool
*
result
)
;
bool
EqualsInternal
(
nsSimpleURI
*
otherUri
RefHandlingEnum
refHandlingMode
)
;
void
SetRefOnClone
(
nsSimpleURI
*
url
RefHandlingEnum
refHandlingMode
const
nsACString
&
newRef
)
;
virtual
nsSimpleURI
*
StartClone
(
RefHandlingEnum
refHandlingMode
const
nsACString
&
newRef
)
;
virtual
nsresult
CloneInternal
(
RefHandlingEnum
refHandlingMode
const
nsACString
&
newRef
nsIURI
*
*
clone
)
;
nsCString
mScheme
;
nsCString
mPath
;
nsCString
mRef
;
nsCString
mQuery
;
bool
mMutable
;
bool
mIsRefValid
;
bool
mIsQueryValid
;
}
;
}
}
#
endif
