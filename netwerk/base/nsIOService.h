#
ifndef
nsIOService_h__
#
define
nsIOService_h__
#
include
"
nsStringFwd
.
h
"
#
include
"
nsIIOService2
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWeakPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsINetUtil
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsCategoryCache
.
h
"
#
include
"
nsISpeculativeConnect
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
prtime
.
h
"
#
include
"
nsICaptivePortalService
.
h
"
#
define
NS_N
(
x
)
(
sizeof
(
x
)
/
sizeof
(
*
x
)
)
#
define
NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC
"
ipc
:
network
:
set
-
offline
"
#
define
NS_IPC_IOSERVICE_SET_CONNECTIVITY_TOPIC
"
ipc
:
network
:
set
-
connectivity
"
static
const
char
gScheme
[
]
[
sizeof
(
"
moz
-
safe
-
about
"
)
]
=
{
"
chrome
"
"
file
"
"
http
"
"
https
"
"
jar
"
"
data
"
"
about
"
"
moz
-
safe
-
about
"
"
resource
"
}
;
class
nsINetworkLinkService
;
class
nsIPrefBranch
;
class
nsIProtocolProxyService2
;
class
nsIProxyInfo
;
class
nsPIDNSService
;
class
nsPISocketTransportService
;
namespace
mozilla
{
namespace
net
{
class
NeckoChild
;
class
nsAsyncRedirectVerifyHelper
;
class
nsIOService
final
:
public
nsIIOService2
public
nsIObserver
public
nsINetUtil
public
nsISpeculativeConnect
public
nsSupportsWeakReference
public
nsIIOServiceInternal
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIIOSERVICE
NS_DECL_NSIIOSERVICE2
NS_DECL_NSIOBSERVER
NS_DECL_NSINETUTIL
NS_DECL_NSISPECULATIVECONNECT
NS_DECL_NSIIOSERVICEINTERNAL
static
nsIOService
*
GetInstance
(
)
;
nsresult
Init
(
)
;
nsresult
NewURI
(
const
char
*
aSpec
nsIURI
*
aBaseURI
nsIURI
*
*
result
nsIProtocolHandler
*
*
hdlrResult
)
;
nsresult
AsyncOnChannelRedirect
(
nsIChannel
*
oldChan
nsIChannel
*
newChan
uint32_t
flags
nsAsyncRedirectVerifyHelper
*
helper
)
;
bool
IsOffline
(
)
{
return
mOffline
;
}
PRIntervalTime
LastOfflineStateChange
(
)
{
return
mLastOfflineStateChange
;
}
PRIntervalTime
LastConnectivityChange
(
)
{
return
mLastConnectivityChange
;
}
PRIntervalTime
LastNetworkLinkChange
(
)
{
return
mLastNetworkLinkChange
;
}
bool
IsNetTearingDown
(
)
{
return
mShutdown
|
|
mOfflineForProfileChange
|
|
mHttpHandlerAlreadyShutingDown
;
}
PRIntervalTime
NetTearingDownStarted
(
)
{
return
mNetTearingDownStarted
;
}
void
SetHttpHandlerAlreadyShutingDown
(
)
;
bool
IsLinkUp
(
)
;
static
bool
IsDataURIUniqueOpaqueOrigin
(
)
;
static
bool
BlockToplevelDataUriNavigations
(
)
;
void
IncrementRequestNumber
(
)
{
mTotalRequests
+
+
;
}
uint32_t
GetTotalRequestNumber
(
)
{
return
mTotalRequests
;
}
void
IncrementCacheWonRequestNumber
(
)
{
mCacheWon
+
+
;
}
uint32_t
GetCacheWonRequestNumber
(
)
{
return
mCacheWon
;
}
void
IncrementNetWonRequestNumber
(
)
{
mNetWon
+
+
;
}
uint32_t
GetNetWonRequestNumber
(
)
{
return
mNetWon
;
}
nsresult
RecheckCaptivePortal
(
)
;
private
:
nsIOService
(
)
;
~
nsIOService
(
)
;
nsresult
SetConnectivityInternal
(
bool
aConnectivity
)
;
nsresult
OnNetworkLinkEvent
(
const
char
*
data
)
;
nsresult
GetCachedProtocolHandler
(
const
char
*
scheme
nsIProtocolHandler
*
*
hdlrResult
uint32_t
start
=
0
uint32_t
end
=
0
)
;
nsresult
CacheProtocolHandler
(
const
char
*
scheme
nsIProtocolHandler
*
hdlr
)
;
nsresult
InitializeCaptivePortalService
(
)
;
nsresult
RecheckCaptivePortalIfLocalRedirect
(
nsIChannel
*
newChan
)
;
void
PrefsChanged
(
nsIPrefBranch
*
prefs
const
char
*
pref
=
nullptr
)
;
void
GetPrefBranch
(
nsIPrefBranch
*
*
)
;
void
ParsePortList
(
nsIPrefBranch
*
prefBranch
const
char
*
pref
bool
remove
)
;
nsresult
InitializeSocketTransportService
(
)
;
nsresult
InitializeNetworkLinkService
(
)
;
nsresult
InitializeProtocolProxyService
(
)
;
void
LookupProxyInfo
(
nsIURI
*
aURI
nsIURI
*
aProxyURI
uint32_t
aProxyFlags
nsCString
*
aScheme
nsIProxyInfo
*
*
outPI
)
;
nsresult
NewChannelFromURIWithProxyFlagsInternal
(
nsIURI
*
aURI
nsIURI
*
aProxyURI
uint32_t
aProxyFlags
nsILoadInfo
*
aLoadInfo
nsIChannel
*
*
result
)
;
nsresult
SpeculativeConnectInternal
(
nsIURI
*
aURI
nsIPrincipal
*
aPrincipal
nsIInterfaceRequestor
*
aCallbacks
bool
aAnonymous
)
;
private
:
bool
mOffline
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mOfflineForProfileChange
;
bool
mManageLinkStatus
;
bool
mConnectivity
;
bool
mOfflineMirrorsConnectivity
;
bool
mSettingOffline
;
bool
mSetOfflineValue
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mShutdown
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mHttpHandlerAlreadyShutingDown
;
nsCOMPtr
<
nsPISocketTransportService
>
mSocketTransportService
;
nsCOMPtr
<
nsPIDNSService
>
mDNSService
;
nsCOMPtr
<
nsIProtocolProxyService2
>
mProxyService
;
nsCOMPtr
<
nsICaptivePortalService
>
mCaptivePortalService
;
nsCOMPtr
<
nsINetworkLinkService
>
mNetworkLinkService
;
bool
mNetworkLinkServiceInitialized
;
nsWeakPtr
mWeakHandler
[
NS_N
(
gScheme
)
]
;
nsCategoryCache
<
nsIChannelEventSink
>
mChannelEventSinks
;
nsTArray
<
int32_t
>
mRestrictedPortList
;
bool
mNetworkNotifyChanged
;
static
bool
sIsDataURIUniqueOpaqueOrigin
;
static
bool
sBlockToplevelDataUriNavigations
;
uint32_t
mTotalRequests
;
uint32_t
mCacheWon
;
uint32_t
mNetWon
;
mozilla
:
:
Atomic
<
PRIntervalTime
>
mLastOfflineStateChange
;
mozilla
:
:
Atomic
<
PRIntervalTime
>
mLastConnectivityChange
;
mozilla
:
:
Atomic
<
PRIntervalTime
>
mLastNetworkLinkChange
;
mozilla
:
:
Atomic
<
PRIntervalTime
>
mNetTearingDownStarted
;
public
:
static
uint32_t
gDefaultSegmentSize
;
static
uint32_t
gDefaultSegmentCount
;
}
;
extern
nsIOService
*
gIOService
;
}
}
#
endif
