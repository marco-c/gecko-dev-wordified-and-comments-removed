"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
NetworkInfoServiceAndroid
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AndroidLog
.
jsm
"
)
;
var
log
=
AndroidLog
.
d
.
bind
(
null
"
NetworkInfoServiceAndroid
"
)
;
const
FAILURE_INTERNAL_ERROR
=
-
65537
;
const
MSG_TAG
=
'
NetworkInfoService
'
;
function
send
(
type
data
callback
)
{
if
(
type
[
0
]
=
=
"
:
"
)
{
type
=
MSG_TAG
+
type
;
}
let
msg
=
{
type
}
;
for
(
let
i
in
data
)
{
try
{
msg
[
i
]
=
data
[
i
]
;
}
catch
(
e
)
{
}
}
Messaging
.
sendRequestForResult
(
msg
)
.
then
(
result
=
>
callback
(
result
null
)
err
=
>
callback
(
null
typeof
err
=
=
=
"
number
"
?
err
:
FAILURE_INTERNAL_ERROR
)
)
;
}
class
NetworkInfoServiceAndroid
{
constructor
(
)
{
}
listNetworkAddresses
(
aListener
)
{
send
(
"
:
ListNetworkAddresses
"
{
}
(
result
err
)
=
>
{
if
(
err
)
{
log
(
"
ListNetworkAddresses
Failed
:
(
"
+
err
+
"
)
"
)
;
aListener
.
onListNetworkAddressesFailed
(
)
;
}
else
{
log
(
"
ListNetworkAddresses
Succeeded
:
(
"
+
JSON
.
stringify
(
result
)
+
"
)
"
)
;
aListener
.
onListedNetworkAddresses
(
result
)
;
}
}
)
;
}
getHostname
(
aListener
)
{
send
(
"
:
GetHostname
"
{
}
(
result
err
)
=
>
{
if
(
err
)
{
log
(
"
GetHostname
Failed
:
(
"
+
err
+
"
)
"
)
;
aListener
.
onGetHostnameFailed
(
)
;
}
else
{
log
(
"
GetHostname
Succeeded
:
(
"
+
JSON
.
stringify
(
result
)
+
"
)
"
)
;
aListener
.
onGotHostname
(
result
)
;
}
}
)
;
}
}
