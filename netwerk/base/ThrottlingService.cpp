#
include
"
ThrottlingService
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
net
/
NeckoChild
.
h
"
namespace
mozilla
{
namespace
net
{
static
const
char
kEnabledPref
[
]
=
"
network
.
throttle
.
enable
"
;
static
const
bool
kDefaultEnabled
=
true
;
static
const
char
kSuspendPeriodPref
[
]
=
"
network
.
throttle
.
suspend
-
for
"
;
static
const
uint32_t
kDefaultSuspendPeriod
=
2000
;
static
const
char
kResumePeriodPref
[
]
=
"
network
.
throttle
.
resume
-
for
"
;
static
const
uint32_t
kDefaultResumePeriod
=
2000
;
NS_IMPL_ISUPPORTS
(
ThrottlingService
nsIThrottlingService
nsIObserver
nsITimerCallback
)
ThrottlingService
:
:
ThrottlingService
(
)
:
mEnabled
(
kDefaultEnabled
)
mInitCalled
(
false
)
mSuspended
(
false
)
mPressureCount
(
0
)
mSuspendPeriod
(
kDefaultSuspendPeriod
)
mResumePeriod
(
kDefaultResumePeriod
)
mIteratingHash
(
false
)
{
}
ThrottlingService
:
:
~
ThrottlingService
(
)
{
Shutdown
(
)
;
}
nsresult
ThrottlingService
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mInitCalled
)
;
mInitCalled
=
true
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
obs
)
{
return
NS_ERROR_UNEXPECTED
;
}
nsresult
rv
=
obs
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mEnabled
=
Preferences
:
:
GetBool
(
kEnabledPref
kDefaultEnabled
)
;
rv
=
Preferences
:
:
AddStrongObserver
(
this
kEnabledPref
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
Preferences
:
:
AddUintVarCache
(
&
mSuspendPeriod
kSuspendPeriodPref
kDefaultSuspendPeriod
)
;
Preferences
:
:
AddUintVarCache
(
&
mResumePeriod
kResumePeriodPref
kDefaultResumePeriod
)
;
mTimer
=
do_CreateInstance
(
NS_TIMER_CONTRACTID
)
;
return
NS_OK
;
}
void
ThrottlingService
:
:
Shutdown
(
)
{
if
(
!
mInitCalled
)
{
return
;
}
if
(
mTimer
)
{
mTimer
-
>
Cancel
(
)
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
;
}
Preferences
:
:
RemoveObserver
(
this
kEnabledPref
)
;
MaybeResumeAll
(
)
;
mChannelHash
.
Clear
(
)
;
}
nsresult
ThrottlingService
:
:
Create
(
nsISupports
*
outer
const
nsIID
&
iid
void
*
*
result
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
outer
!
=
nullptr
)
{
return
NS_ERROR_NO_AGGREGATION
;
}
RefPtr
<
ThrottlingService
>
svc
=
new
ThrottlingService
(
)
;
if
(
!
IsNeckoChild
(
)
)
{
nsresult
rv
=
svc
-
>
Init
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
svc
-
>
QueryInterface
(
iid
result
)
;
}
nsresult
ThrottlingService
:
:
AddChannel
(
nsIHttpChannel
*
channel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint64_t
key
;
nsresult
rv
=
channel
-
>
GetChannelId
(
&
key
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
mChannelHash
.
Get
(
key
nullptr
)
)
{
MOZ_ASSERT
(
false
"
Trying
to
throttle
an
already
-
throttled
channel
"
)
;
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
!
mIteratingHash
)
{
mChannelHash
.
Put
(
key
channel
)
;
if
(
mSuspended
)
{
channel
-
>
Suspend
(
)
;
}
}
else
{
mChannelsToAddRemove
.
AppendElement
(
channel
)
;
mChannelIsAdd
.
AppendElement
(
true
)
;
}
return
NS_OK
;
}
nsresult
ThrottlingService
:
:
RemoveChannel
(
nsIHttpChannel
*
channel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
uint64_t
key
;
nsresult
rv
=
channel
-
>
GetChannelId
(
&
key
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
!
mChannelHash
.
Get
(
key
nullptr
)
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
!
mIteratingHash
)
{
mChannelHash
.
Remove
(
key
)
;
if
(
mSuspended
)
{
channel
-
>
Resume
(
)
;
}
}
else
{
mChannelsToAddRemove
.
AppendElement
(
channel
)
;
mChannelIsAdd
.
AppendElement
(
false
)
;
}
return
NS_OK
;
}
nsresult
ThrottlingService
:
:
IncreasePressure
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
mPressureCount
+
+
=
=
0
)
{
MOZ_ASSERT
(
!
mSuspended
"
Suspended
with
0
pressure
?
"
)
;
MaybeSuspendAll
(
)
;
if
(
mSuspended
)
{
mTimer
-
>
InitWithCallback
(
this
mSuspendPeriod
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
}
return
NS_OK
;
}
nsresult
ThrottlingService
:
:
DecreasePressure
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
MOZ_ASSERT
(
mPressureCount
>
0
"
Unbalanced
throttle
pressure
"
)
;
if
(
-
-
mPressureCount
=
=
0
)
{
MaybeResumeAll
(
)
;
mTimer
-
>
Cancel
(
)
;
}
return
NS_OK
;
}
nsresult
ThrottlingService
:
:
Observe
(
nsISupports
*
subject
const
char
*
topic
const
char16_t
*
data_unicode
)
{
MOZ_ASSERT
(
!
IsNeckoChild
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
strcmp
(
NS_XPCOM_SHUTDOWN_OBSERVER_ID
topic
)
)
{
Shutdown
(
)
;
}
else
if
(
!
strcmp
(
"
nsPref
:
changed
"
topic
)
)
{
mEnabled
=
Preferences
:
:
GetBool
(
kEnabledPref
mEnabled
)
;
if
(
mEnabled
&
&
mPressureCount
)
{
MaybeSuspendAll
(
)
;
if
(
mSuspended
)
{
mTimer
-
>
InitWithCallback
(
this
mSuspendPeriod
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
}
else
if
(
!
mEnabled
)
{
mTimer
-
>
Cancel
(
)
;
MaybeResumeAll
(
)
;
}
}
return
NS_OK
;
}
nsresult
ThrottlingService
:
:
Notify
(
nsITimer
*
timer
)
{
MOZ_ASSERT
(
!
IsNeckoChild
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
timer
=
=
mTimer
)
;
if
(
mSuspended
)
{
MaybeResumeAll
(
)
;
if
(
mPressureCount
&
&
mEnabled
)
{
mTimer
-
>
InitWithCallback
(
this
mResumePeriod
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
}
else
if
(
mPressureCount
)
{
MaybeSuspendAll
(
)
;
if
(
mSuspended
)
{
mTimer
-
>
InitWithCallback
(
this
mSuspendPeriod
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
}
return
NS_OK
;
}
void
ThrottlingService
:
:
MaybeSuspendAll
(
)
{
MOZ_ASSERT
(
!
IsNeckoChild
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mEnabled
)
{
return
;
}
if
(
mSuspended
)
{
return
;
}
mSuspended
=
true
;
IterateHash
(
[
]
(
ChannelHash
:
:
Iterator
&
iter
)
-
>
void
{
const
nsCOMPtr
<
nsIHttpChannel
>
channel
=
iter
.
UserData
(
)
;
channel
-
>
Suspend
(
)
;
}
)
;
}
void
ThrottlingService
:
:
MaybeResumeAll
(
)
{
MOZ_ASSERT
(
!
IsNeckoChild
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mSuspended
)
{
return
;
}
mSuspended
=
false
;
IterateHash
(
[
]
(
ChannelHash
:
:
Iterator
&
iter
)
-
>
void
{
const
nsCOMPtr
<
nsIHttpChannel
>
channel
=
iter
.
UserData
(
)
;
channel
-
>
Resume
(
)
;
}
)
;
}
void
ThrottlingService
:
:
IterateHash
(
void
(
*
callback
)
(
ChannelHash
:
:
Iterator
&
iter
)
)
{
MOZ_ASSERT
(
!
mIteratingHash
)
;
mIteratingHash
=
true
;
for
(
ChannelHash
:
:
Iterator
iter
=
mChannelHash
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
callback
(
iter
)
;
}
mIteratingHash
=
false
;
HandleExtraAddRemove
(
)
;
}
void
ThrottlingService
:
:
HandleExtraAddRemove
(
)
{
MOZ_ASSERT
(
!
mIteratingHash
)
;
MOZ_ASSERT
(
mChannelsToAddRemove
.
Length
(
)
=
=
mChannelIsAdd
.
Length
(
)
)
;
nsCOMArray
<
nsIHttpChannel
>
channelsToAddRemove
;
channelsToAddRemove
.
SwapElements
(
mChannelsToAddRemove
)
;
nsTArray
<
bool
>
channelIsAdd
;
channelIsAdd
.
SwapElements
(
mChannelIsAdd
)
;
for
(
size_t
i
=
0
;
i
<
channelsToAddRemove
.
Length
(
)
;
+
+
i
)
{
if
(
channelIsAdd
[
i
]
)
{
AddChannel
(
channelsToAddRemove
[
i
]
)
;
}
else
{
RemoveChannel
(
channelsToAddRemove
[
i
]
)
;
}
}
channelsToAddRemove
.
Clear
(
)
;
channelIsAdd
.
Clear
(
)
;
}
Throttler
:
:
Throttler
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
if
(
gNeckoChild
)
{
gNeckoChild
-
>
SendIncreaseThrottlePressure
(
)
;
}
}
else
{
mThrottlingService
=
do_GetService
(
"
mozilla
.
org
/
network
/
throttling
-
service
;
1
"
)
;
mThrottlingService
-
>
IncreasePressure
(
)
;
}
}
Throttler
:
:
~
Throttler
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsNeckoChild
(
)
)
{
if
(
gNeckoChild
)
{
gNeckoChild
-
>
SendDecreaseThrottlePressure
(
)
;
}
}
else
{
MOZ_RELEASE_ASSERT
(
mThrottlingService
)
;
mThrottlingService
-
>
DecreasePressure
(
)
;
mThrottlingService
=
nullptr
;
}
}
}
}
