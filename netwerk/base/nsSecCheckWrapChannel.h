#
ifndef
nsSecCheckWrapChannel_h__
#
define
nsSecCheckWrapChannel_h__
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIUploadChannel
.
h
"
#
include
"
nsIUploadChannel2
.
h
"
#
include
"
nsISecCheckWrapChannel
.
h
"
#
include
"
nsIWyciwygChannel
.
h
"
#
include
"
mozilla
/
LoadInfo
.
h
"
namespace
mozilla
{
namespace
net
{
class
nsSecCheckWrapChannelBase
:
public
nsIHttpChannel
public
nsIHttpChannelInternal
public
nsISecCheckWrapChannel
public
nsIUploadChannel
public
nsIUploadChannel2
{
public
:
NS_FORWARD_NSIHTTPCHANNEL
(
mHttpChannel
-
>
)
NS_FORWARD_NSIHTTPCHANNELINTERNAL
(
mHttpChannelInternal
-
>
)
NS_FORWARD_NSICHANNEL
(
mChannel
-
>
)
NS_FORWARD_NSIREQUEST
(
mRequest
-
>
)
NS_FORWARD_NSIUPLOADCHANNEL
(
mUploadChannel
-
>
)
NS_FORWARD_NSIUPLOADCHANNEL2
(
mUploadChannel2
-
>
)
NS_DECL_NSISECCHECKWRAPCHANNEL
NS_DECL_ISUPPORTS
explicit
nsSecCheckWrapChannelBase
(
nsIChannel
*
aChannel
)
;
protected
:
virtual
~
nsSecCheckWrapChannelBase
(
)
=
default
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIHttpChannel
>
mHttpChannel
;
nsCOMPtr
<
nsIHttpChannelInternal
>
mHttpChannelInternal
;
nsCOMPtr
<
nsIRequest
>
mRequest
;
nsCOMPtr
<
nsIUploadChannel
>
mUploadChannel
;
nsCOMPtr
<
nsIUploadChannel2
>
mUploadChannel2
;
}
;
class
nsSecCheckWrapChannel
:
public
nsSecCheckWrapChannelBase
{
public
:
NS_IMETHOD
GetLoadInfo
(
nsILoadInfo
*
*
aLoadInfo
)
override
;
NS_IMETHOD
SetLoadInfo
(
nsILoadInfo
*
aLoadInfo
)
override
;
NS_IMETHOD
AsyncOpen
(
nsIStreamListener
*
aListener
)
override
;
NS_IMETHOD
Open
(
nsIInputStream
*
*
aStream
)
override
;
nsSecCheckWrapChannel
(
nsIChannel
*
aChannel
nsILoadInfo
*
aLoadInfo
)
;
static
already_AddRefed
<
nsIChannel
>
MaybeWrap
(
nsIChannel
*
aChannel
nsILoadInfo
*
aLoadInfo
)
;
protected
:
virtual
~
nsSecCheckWrapChannel
(
)
=
default
;
nsCOMPtr
<
nsILoadInfo
>
mLoadInfo
;
}
;
}
}
#
endif
