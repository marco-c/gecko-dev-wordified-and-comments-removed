#
ifndef
nsChannelClassifier_h__
#
define
nsChannelClassifier_h__
#
include
"
nsIObserver
.
h
"
#
include
"
nsIURIClassifier
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
functional
>
class
nsIChannel
;
class
nsIHttpChannelInternal
;
class
nsIDocument
;
namespace
mozilla
{
namespace
net
{
class
nsChannelClassifier
final
:
public
nsIURIClassifierCallback
public
nsIObserver
{
public
:
explicit
nsChannelClassifier
(
nsIChannel
*
aChannel
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIURICLASSIFIERCALLBACK
NS_DECL_NSIOBSERVER
void
Start
(
)
;
bool
ShouldEnableTrackingProtection
(
)
;
bool
ShouldEnableTrackingAnnotation
(
)
;
nsresult
IsTrackerWhitelisted
(
nsIURI
*
aWhiteListURI
nsIURIClassifierCallback
*
aCallback
)
;
nsresult
OnClassifyCompleteInternal
(
nsresult
aErrorCode
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
;
nsresult
CheckIsTrackerWithLocalTable
(
std
:
:
function
<
void
(
)
>
&
&
aCallback
)
;
already_AddRefed
<
nsIURI
>
CreateWhiteListURI
(
)
const
;
already_AddRefed
<
nsIChannel
>
GetChannel
(
)
;
private
:
bool
mIsAllowListed
;
bool
mSuspendedChannel
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
Maybe
<
bool
>
mTrackingProtectionEnabled
;
Maybe
<
bool
>
mTrackingAnnotationEnabled
;
~
nsChannelClassifier
(
)
;
void
MarkEntryClassified
(
nsresult
status
)
;
bool
HasBeenClassified
(
nsIChannel
*
aChannel
)
;
nsresult
StartInternal
(
)
;
bool
IsHostnameWhitelisted
(
nsIURI
*
aUri
const
nsACString
&
aWhitelisted
)
;
static
bool
SameLoadingURI
(
nsIDocument
*
aDoc
nsIChannel
*
aChannel
)
;
nsresult
ShouldEnableTrackingProtectionInternal
(
nsIChannel
*
aChannel
bool
aAnnotationsOnly
bool
*
result
)
;
bool
AddonMayLoad
(
nsIChannel
*
aChannel
nsIURI
*
aUri
)
;
void
AddShutdownObserver
(
)
;
void
RemoveShutdownObserver
(
)
;
nsresult
SendThreatHitReport
(
nsIChannel
*
aChannel
const
nsACString
&
aProvider
)
;
public
:
static
nsresult
SetBlockedContent
(
nsIChannel
*
channel
nsresult
aErrorCode
const
nsACString
&
aList
const
nsACString
&
aProvider
const
nsACString
&
aFullHash
)
;
static
nsresult
NotifyTrackingProtectionDisabled
(
nsIChannel
*
aChannel
)
;
}
;
}
}
#
endif
