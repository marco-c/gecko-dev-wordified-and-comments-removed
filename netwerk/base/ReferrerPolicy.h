#
ifndef
ReferrerPolicy_h__
#
define
ReferrerPolicy_h__
#
include
"
nsString
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsUnicharUtils
.
h
"
namespace
mozilla
{
namespace
net
{
enum
ReferrerPolicy
{
RP_No_Referrer
=
nsIHttpChannel
:
:
REFERRER_POLICY_NO_REFERRER
RP_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_ORIGIN
RP_No_Referrer_When_Downgrade
=
nsIHttpChannel
:
:
REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE
RP_Origin_When_Crossorigin
=
nsIHttpChannel
:
:
REFERRER_POLICY_ORIGIN_WHEN_XORIGIN
RP_Unsafe_URL
=
nsIHttpChannel
:
:
REFERRER_POLICY_UNSAFE_URL
RP_Same_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_SAME_ORIGIN
RP_Strict_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_STRICT_ORIGIN
RP_Strict_Origin_When_Cross_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_STRICT_ORIGIN_WHEN_XORIGIN
RP_Unset
=
nsIHttpChannel
:
:
REFERRER_POLICY_UNSET
}
;
static
const
char
*
kReferrerPolicyString
[
]
=
{
"
"
"
no
-
referrer
-
when
-
downgrade
"
"
no
-
referrer
"
"
origin
"
"
origin
-
when
-
cross
-
origin
"
"
unsafe
-
url
"
"
same
-
origin
"
"
strict
-
origin
"
"
strict
-
origin
-
when
-
cross
-
origin
"
}
;
const
char
kRPS_Never
[
]
=
"
never
"
;
const
char
kRPS_Default
[
]
=
"
default
"
;
const
char
kRPS_Origin_When_Crossorigin
[
]
=
"
origin
-
when
-
crossorigin
"
;
const
char
kRPS_Always
[
]
=
"
always
"
;
inline
ReferrerPolicy
ReferrerPolicyFromString
(
const
nsAString
&
content
)
{
if
(
content
.
IsEmpty
(
)
)
{
return
RP_Unset
;
}
nsString
lowerContent
(
content
)
;
ToLowerCase
(
lowerContent
)
;
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Never
)
)
{
return
RP_No_Referrer
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Default
)
)
{
return
RP_No_Referrer_When_Downgrade
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Origin_When_Crossorigin
)
)
{
return
RP_Origin_When_Crossorigin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Always
)
)
{
return
RP_Unsafe_URL
;
}
uint16_t
numStr
=
(
sizeof
(
kReferrerPolicyString
)
/
sizeof
(
kReferrerPolicyString
[
0
]
)
)
;
for
(
uint16_t
i
=
0
;
i
<
numStr
;
i
+
+
)
{
if
(
lowerContent
.
EqualsASCII
(
kReferrerPolicyString
[
i
]
)
)
{
return
static_cast
<
ReferrerPolicy
>
(
i
)
;
}
}
return
RP_Unset
;
}
inline
ReferrerPolicy
AttributeReferrerPolicyFromString
(
const
nsAString
&
content
)
{
if
(
content
.
IsEmpty
(
)
)
{
return
RP_Unset
;
}
nsString
lowerContent
(
content
)
;
ToLowerCase
(
lowerContent
)
;
uint16_t
numStr
=
(
sizeof
(
kReferrerPolicyString
)
/
sizeof
(
kReferrerPolicyString
[
0
]
)
)
;
for
(
uint16_t
i
=
0
;
i
<
numStr
;
i
+
+
)
{
if
(
lowerContent
.
EqualsASCII
(
kReferrerPolicyString
[
i
]
)
)
{
return
static_cast
<
ReferrerPolicy
>
(
i
)
;
}
}
return
RP_Unset
;
}
inline
const
char
*
ReferrerPolicyToString
(
ReferrerPolicy
aPolicy
)
{
return
kReferrerPolicyString
[
static_cast
<
uint32_t
>
(
aPolicy
)
]
;
}
}
}
#
endif
