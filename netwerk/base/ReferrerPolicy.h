#
ifndef
ReferrerPolicy_h__
#
define
ReferrerPolicy_h__
#
include
"
nsString
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsUnicharUtils
.
h
"
namespace
mozilla
{
namespace
net
{
enum
ReferrerPolicy
{
RP_No_Referrer
=
nsIHttpChannel
:
:
REFERRER_POLICY_NO_REFERRER
RP_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_ORIGIN
RP_No_Referrer_When_Downgrade
=
nsIHttpChannel
:
:
REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE
RP_Origin_When_Crossorigin
=
nsIHttpChannel
:
:
REFERRER_POLICY_ORIGIN_WHEN_XORIGIN
RP_Unsafe_URL
=
nsIHttpChannel
:
:
REFERRER_POLICY_UNSAFE_URL
RP_Same_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_SAME_ORIGIN
RP_Strict_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_STRICT_ORIGIN
RP_Strict_Origin_When_Cross_Origin
=
nsIHttpChannel
:
:
REFERRER_POLICY_STRICT_ORIGIN_WHEN_XORIGIN
RP_Unset
=
nsIHttpChannel
:
:
REFERRER_POLICY_UNSET
}
;
const
char
kRPS_Never
[
]
=
"
never
"
;
const
char
kRPS_No_Referrer
[
]
=
"
no
-
referrer
"
;
const
char
kRPS_Origin
[
]
=
"
origin
"
;
const
char
kRPS_Default
[
]
=
"
default
"
;
const
char
kRPS_No_Referrer_When_Downgrade
[
]
=
"
no
-
referrer
-
when
-
downgrade
"
;
const
char
kRPS_Origin_When_Cross_Origin
[
]
=
"
origin
-
when
-
cross
-
origin
"
;
const
char
kRPS_Origin_When_Crossorigin
[
]
=
"
origin
-
when
-
crossorigin
"
;
const
char
kRPS_Same_Origin
[
]
=
"
same
-
origin
"
;
const
char
kRPS_Strict_Origin
[
]
=
"
strict
-
origin
"
;
const
char
kRPS_Strict_Origin_When_Cross_Origin
[
]
=
"
strict
-
origin
-
when
-
cross
-
origin
"
;
const
char
kRPS_Always
[
]
=
"
always
"
;
const
char
kRPS_Unsafe_URL
[
]
=
"
unsafe
-
url
"
;
inline
ReferrerPolicy
ReferrerPolicyFromString
(
const
nsAString
&
content
)
{
if
(
content
.
IsEmpty
(
)
)
{
return
RP_No_Referrer
;
}
nsString
lowerContent
(
content
)
;
ToLowerCase
(
lowerContent
)
;
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Never
)
|
|
lowerContent
.
EqualsLiteral
(
kRPS_No_Referrer
)
)
{
return
RP_No_Referrer
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Origin
)
)
{
return
RP_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Default
)
|
|
lowerContent
.
EqualsLiteral
(
kRPS_No_Referrer_When_Downgrade
)
)
{
return
RP_No_Referrer_When_Downgrade
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Origin_When_Cross_Origin
)
|
|
lowerContent
.
EqualsLiteral
(
kRPS_Origin_When_Crossorigin
)
)
{
return
RP_Origin_When_Crossorigin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Same_Origin
)
)
{
return
RP_Same_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Strict_Origin
)
)
{
return
RP_Strict_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Strict_Origin_When_Cross_Origin
)
)
{
return
RP_Strict_Origin_When_Cross_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Always
)
|
|
lowerContent
.
EqualsLiteral
(
kRPS_Unsafe_URL
)
)
{
return
RP_Unsafe_URL
;
}
return
RP_Unset
;
}
inline
ReferrerPolicy
AttributeReferrerPolicyFromString
(
const
nsAString
&
content
)
{
if
(
content
.
IsEmpty
(
)
)
{
return
RP_Unset
;
}
nsString
lowerContent
(
content
)
;
ToLowerCase
(
lowerContent
)
;
if
(
lowerContent
.
EqualsLiteral
(
kRPS_No_Referrer
)
)
{
return
RP_No_Referrer
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Origin
)
)
{
return
RP_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_No_Referrer_When_Downgrade
)
)
{
return
RP_No_Referrer_When_Downgrade
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Origin_When_Cross_Origin
)
)
{
return
RP_Origin_When_Crossorigin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Unsafe_URL
)
)
{
return
RP_Unsafe_URL
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Strict_Origin
)
)
{
return
RP_Strict_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Same_Origin
)
)
{
return
RP_Same_Origin
;
}
if
(
lowerContent
.
EqualsLiteral
(
kRPS_Strict_Origin_When_Cross_Origin
)
)
{
return
RP_Strict_Origin_When_Cross_Origin
;
}
return
RP_Unset
;
}
}
}
#
endif
