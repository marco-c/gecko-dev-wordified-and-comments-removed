#
include
"
nsISupports
.
idl
"
interface
nsIURI
;
interface
nsIPrefBranch
;
[
scriptable
uuid
(
fe2625ec
-
b884
-
4df1
-
b39c
-
9e830e47aa94
)
]
interface
nsINetUtil
:
nsISupports
{
AUTF8String
parseRequestContentType
(
in
AUTF8String
aTypeHeader
out
AUTF8String
aCharset
out
boolean
aHadCharset
)
;
AUTF8String
parseResponseContentType
(
in
AUTF8String
aTypeHeader
out
AUTF8String
aCharset
out
boolean
aHadCharset
)
;
boolean
protocolHasFlags
(
in
nsIURI
aURI
in
unsigned
long
aFlag
)
;
boolean
URIChainHasFlags
(
in
nsIURI
aURI
in
unsigned
long
aFlags
)
;
const
unsigned
long
ESCAPE_ALL
=
0
;
const
unsigned
long
ESCAPE_XALPHAS
=
1
;
const
unsigned
long
ESCAPE_XPALPHAS
=
2
;
const
unsigned
long
ESCAPE_URL_PATH
=
4
;
const
unsigned
long
ESCAPE_URL_APPLE_EXTRA
=
8
;
ACString
escapeString
(
in
ACString
aString
in
unsigned
long
aEscapeType
)
;
const
unsigned
long
ESCAPE_URL_SCHEME
=
1
;
const
unsigned
long
ESCAPE_URL_USERNAME
=
1
<
<
1
;
const
unsigned
long
ESCAPE_URL_PASSWORD
=
1
<
<
2
;
const
unsigned
long
ESCAPE_URL_HOST
=
1
<
<
3
;
const
unsigned
long
ESCAPE_URL_DIRECTORY
=
1
<
<
4
;
const
unsigned
long
ESCAPE_URL_FILE_BASENAME
=
1
<
<
5
;
const
unsigned
long
ESCAPE_URL_FILE_EXTENSION
=
1
<
<
6
;
const
unsigned
long
ESCAPE_URL_PARAM
=
1
<
<
7
;
const
unsigned
long
ESCAPE_URL_QUERY
=
1
<
<
8
;
const
unsigned
long
ESCAPE_URL_REF
=
1
<
<
9
;
const
unsigned
long
ESCAPE_URL_FILEPATH
=
ESCAPE_URL_DIRECTORY
|
ESCAPE_URL_FILE_BASENAME
|
ESCAPE_URL_FILE_EXTENSION
;
const
unsigned
long
ESCAPE_URL_MINIMAL
=
ESCAPE_URL_SCHEME
|
ESCAPE_URL_USERNAME
|
ESCAPE_URL_PASSWORD
|
ESCAPE_URL_HOST
|
ESCAPE_URL_FILEPATH
|
ESCAPE_URL_PARAM
|
ESCAPE_URL_QUERY
|
ESCAPE_URL_REF
;
const
unsigned
long
ESCAPE_URL_FORCED
=
1
<
<
10
;
const
unsigned
long
ESCAPE_URL_ONLY_ASCII
=
1
<
<
11
;
const
unsigned
long
ESCAPE_URL_ONLY_NONASCII
=
1
<
<
12
;
const
unsigned
long
ESCAPE_URL_COLON
=
1
<
<
14
;
const
unsigned
long
ESCAPE_URL_SKIP_CONTROL
=
1
<
<
15
;
const
unsigned
long
ESCAPE_URL_EXT_HANDLER
=
1
<
<
17
;
ACString
escapeURL
(
in
ACString
aStr
in
unsigned
long
aFlags
)
;
ACString
unescapeString
(
in
AUTF8String
aStr
in
unsigned
long
aFlags
)
;
boolean
extractCharsetFromContentType
(
in
AUTF8String
aTypeHeader
out
AUTF8String
aCharset
out
long
aCharsetStart
out
long
aCharsetEnd
)
;
void
socketProcessTelemetryPing
(
)
;
void
notImplemented
(
)
;
}
;
