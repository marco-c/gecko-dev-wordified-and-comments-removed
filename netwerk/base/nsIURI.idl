#
include
"
nsISupports
.
idl
"
%
{
C
+
+
#
include
"
nsString
.
h
"
#
undef
GetPort
/
/
XXX
Windows
!
#
undef
SetPort
/
/
XXX
Windows
!
namespace
mozilla
{
class
Encoding
;
namespace
ipc
{
class
URIParams
;
}
}
%
}
[
ptr
]
native
Encoding
(
const
mozilla
:
:
Encoding
)
;
[
ref
]
native
URIParams
(
mozilla
:
:
ipc
:
:
URIParams
)
;
interface
nsIURIMutator
;
[
scriptable
builtinclass
uuid
(
92073a54
-
6d78
-
4f30
-
913a
-
b871813208c6
)
]
interface
nsIURI
:
nsISupports
{
readonly
attribute
AUTF8String
spec
;
%
{
C
+
+
nsCString
GetSpecOrDefault
(
)
{
nsCString
spec
;
nsresult
rv
=
GetSpec
(
spec
)
;
if
(
NS_FAILED
(
rv
)
)
{
spec
.
AssignLiteral
(
"
[
nsIURI
:
:
GetSpec
failed
]
"
)
;
}
return
spec
;
}
%
}
readonly
attribute
AUTF8String
prePath
;
readonly
attribute
ACString
scheme
;
readonly
attribute
AUTF8String
userPass
;
readonly
attribute
AUTF8String
username
;
readonly
attribute
AUTF8String
password
;
readonly
attribute
AUTF8String
hostPort
;
readonly
attribute
AUTF8String
host
;
readonly
attribute
long
port
;
readonly
attribute
AUTF8String
pathQueryRef
;
boolean
equals
(
in
nsIURI
other
)
;
[
infallible
]
boolean
schemeIs
(
in
string
scheme
)
;
AUTF8String
resolve
(
in
AUTF8String
relativePath
)
;
readonly
attribute
ACString
asciiSpec
;
readonly
attribute
ACString
asciiHostPort
;
readonly
attribute
ACString
asciiHost
;
readonly
attribute
AUTF8String
ref
;
boolean
equalsExceptRef
(
in
nsIURI
other
)
;
readonly
attribute
AUTF8String
specIgnoringRef
;
readonly
attribute
boolean
hasRef
;
readonly
attribute
boolean
hasUserPass
;
readonly
attribute
AUTF8String
filePath
;
readonly
attribute
AUTF8String
query
;
readonly
attribute
boolean
hasQuery
;
readonly
attribute
AUTF8String
displayHost
;
readonly
attribute
AUTF8String
displayHostPort
;
readonly
attribute
AUTF8String
displaySpec
;
readonly
attribute
AUTF8String
displayPrePath
;
nsIURIMutator
mutate
(
)
;
[
noscript
notxpcom
]
void
serialize
(
in
URIParams
aParams
)
;
%
{
C
+
+
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
nsIURI
&
aURI
)
{
nsIURI
*
uri
=
const_cast
<
nsIURI
*
>
(
&
aURI
)
;
return
aOut
<
<
"
nsIURI
{
"
<
<
uri
-
>
GetSpecOrDefault
(
)
<
<
"
}
"
;
}
%
}
}
;
