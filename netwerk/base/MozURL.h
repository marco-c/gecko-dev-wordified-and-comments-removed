#
ifndef
mozURL_h__
#
define
mozURL_h__
#
include
"
mozilla
/
UniquePtr
.
h
"
extern
"
C
"
{
struct
rusturl
;
}
namespace
mozilla
{
namespace
net
{
class
MozURL
final
{
public
:
static
nsresult
Init
(
MozURL
*
*
aURL
const
nsACString
&
aSpec
const
MozURL
*
aBaseURL
=
nullptr
)
;
nsresult
GetScheme
(
nsACString
&
aScheme
)
;
nsresult
GetSpec
(
nsACString
&
aSpec
)
;
nsresult
GetUsername
(
nsACString
&
aUser
)
;
nsresult
GetPassword
(
nsACString
&
aPassword
)
;
nsresult
GetHostname
(
nsACString
&
aHost
)
;
nsresult
GetHostPort
(
nsACString
&
aHostPort
)
;
nsresult
GetPort
(
int32_t
*
aPort
)
;
nsresult
GetFilePath
(
nsACString
&
aPath
)
;
nsresult
GetQuery
(
nsACString
&
aQuery
)
;
nsresult
GetRef
(
nsACString
&
aRef
)
;
nsresult
GetOrigin
(
nsACString
&
aOrigin
)
;
private
:
explicit
MozURL
(
rusturl
*
rawPtr
)
:
mURL
(
rawPtr
)
{
}
virtual
~
MozURL
(
)
{
}
struct
FreeRustURL
{
void
operator
(
)
(
rusturl
*
aPtr
)
;
}
;
mozilla
:
:
UniquePtr
<
rusturl
FreeRustURL
>
mURL
;
public
:
class
MOZ_STACK_CLASS
Mutator
{
public
:
nsresult
Finalize
(
MozURL
*
*
aURL
)
;
Mutator
&
SetScheme
(
const
nsACString
&
aScheme
)
;
Mutator
&
SetUsername
(
const
nsACString
&
aUser
)
;
Mutator
&
SetPassword
(
const
nsACString
&
aPassword
)
;
Mutator
&
SetHostname
(
const
nsACString
&
aHost
)
;
Mutator
&
SetHostPort
(
const
nsACString
&
aHostPort
)
;
Mutator
&
SetFilePath
(
const
nsACString
&
aPath
)
;
Mutator
&
SetQuery
(
const
nsACString
&
aQuery
)
;
Mutator
&
SetRef
(
const
nsACString
&
aRef
)
;
Mutator
&
SetPort
(
int32_t
aPort
)
;
nsresult
GetStatus
(
)
{
return
mStatus
;
}
private
:
explicit
Mutator
(
MozURL
*
url
)
;
mozilla
:
:
UniquePtr
<
rusturl
FreeRustURL
>
mURL
;
bool
mFinalized
;
nsresult
mStatus
;
friend
class
MozURL
;
}
;
Mutator
Mutate
(
)
{
return
Mutator
(
this
)
;
}
public
:
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
;
typedef
mozilla
:
:
TrueType
HasThreadSafeRefCnt
;
protected
:
:
:
mozilla
:
:
ThreadSafeAutoRefCnt
mRefCnt
;
NS_DECL_OWNINGTHREAD
}
;
}
}
#
endif
