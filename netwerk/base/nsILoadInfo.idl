#
include
"
nsISupports
.
idl
"
#
include
"
nsIContentPolicy
.
idl
"
#
include
"
nsIScriptSecurityManager
.
idl
"
interface
nsIChannel
;
interface
nsIContentSecurityPolicy
;
interface
nsICookieJarSettings
;
interface
nsICSPEventListener
;
interface
nsINode
;
interface
nsIPrincipal
;
interface
nsIRedirectHistoryEntry
;
interface
nsIURI
;
webidl
Document
;
webidl
BrowsingContext
;
native
LoadContextRef
(
already_AddRefed
<
nsISupports
>
)
;
%
{
C
+
+
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
LoadTainting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ClientInfo
;
class
ClientSource
;
class
PerformanceStorage
;
class
ServiceWorkerDescriptor
;
}
}
%
}
[
ref
]
native
nsIRedirectHistoryEntryArray
(
const
nsTArray
<
nsCOMPtr
<
nsIRedirectHistoryEntry
>
>
)
;
native
OriginAttributes
(
mozilla
:
:
OriginAttributes
)
;
[
ref
]
native
const_OriginAttributesRef
(
const
mozilla
:
:
OriginAttributes
)
;
[
ref
]
native
CStringArrayRef
(
const
nsTArray
<
nsCString
>
)
;
[
ref
]
native
StringArrayRef
(
const
nsTArray
<
nsString
>
)
;
[
ref
]
native
Uint64ArrayRef
(
const
nsTArray
<
uint64_t
>
)
;
[
ref
]
native
PrincipalArrayRef
(
const
nsTArray
<
nsCOMPtr
<
nsIPrincipal
>
>
)
;
[
ref
]
native
const_ClientInfoRef
(
const
mozilla
:
:
dom
:
:
ClientInfo
)
;
native
UniqueClientSource
(
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
ClientSource
>
)
;
native
UniqueClientSourceMove
(
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
ClientSource
>
&
&
)
;
[
ref
]
native
const_MaybeClientInfoRef
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
)
;
[
ref
]
native
const_ServiceWorkerDescriptorRef
(
const
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
)
;
[
ref
]
native
const_MaybeServiceWorkerDescriptorRef
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
)
;
[
ptr
]
native
PerformanceStoragePtr
(
mozilla
:
:
dom
:
:
PerformanceStorage
)
;
native
LoadTainting
(
mozilla
:
:
LoadTainting
)
;
native
CSPRef
(
already_AddRefed
<
nsIContentSecurityPolicy
>
)
;
typedef
unsigned
long
nsSecurityFlags
;
[
scriptable
builtinclass
uuid
(
ddc65bf9
-
2f60
-
41ab
-
b22a
-
4f1ae9efcd36
)
]
interface
nsILoadInfo
:
nsISupports
{
const
unsigned
long
SEC_ONLY_FOR_EXPLICIT_CONTENTSEC_CHECK
=
0
;
const
unsigned
long
SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS
=
(
1
<
<
0
)
;
const
unsigned
long
SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED
=
(
1
<
<
1
)
;
const
unsigned
long
SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS
=
(
1
<
<
2
)
;
const
unsigned
long
SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL
=
(
1
<
<
3
)
;
const
unsigned
long
SEC_REQUIRE_CORS_DATA_INHERITS
=
(
1
<
<
4
)
;
const
unsigned
long
SEC_COOKIES_DEFAULT
=
(
0
<
<
5
)
;
const
unsigned
long
SEC_COOKIES_INCLUDE
=
(
1
<
<
5
)
;
const
unsigned
long
SEC_COOKIES_SAME_ORIGIN
=
(
2
<
<
5
)
;
const
unsigned
long
SEC_COOKIES_OMIT
=
(
3
<
<
5
)
;
const
unsigned
long
SEC_FORCE_INHERIT_PRINCIPAL
=
(
1
<
<
7
)
;
const
unsigned
long
SEC_ABOUT_BLANK_INHERITS
=
(
1
<
<
9
)
;
const
unsigned
long
SEC_ALLOW_CHROME
=
(
1
<
<
10
)
;
const
unsigned
long
SEC_DISALLOW_SCRIPT
=
(
1
<
<
11
)
;
const
unsigned
long
SEC_DONT_FOLLOW_REDIRECTS
=
(
1
<
<
12
)
;
const
unsigned
long
SEC_LOAD_ERROR_PAGE
=
(
1
<
<
13
)
;
const
unsigned
long
SEC_FORCE_INHERIT_PRINCIPAL_OVERRULE_OWNER
=
(
1
<
<
14
)
;
readonly
attribute
nsIPrincipal
loadingPrincipal
;
[
noscript
notxpcom
nostdcall
]
nsIPrincipal
virtualGetLoadingPrincipal
(
)
;
%
{
C
+
+
nsIPrincipal
*
GetLoadingPrincipal
(
)
{
return
VirtualGetLoadingPrincipal
(
)
;
}
%
}
readonly
attribute
nsIPrincipal
triggeringPrincipal
;
[
noscript
notxpcom
nostdcall
binaryname
(
TriggeringPrincipal
)
]
nsIPrincipal
binaryTriggeringPrincipal
(
)
;
attribute
nsIPrincipal
principalToInherit
;
[
noscript
notxpcom
nostdcall
binaryname
(
PrincipalToInherit
)
]
nsIPrincipal
binaryPrincipalToInherit
(
)
;
[
noscript
notxpcom
nostdcall
]
nsIPrincipal
FindPrincipalToInherit
(
in
nsIChannel
aChannel
)
;
readonly
attribute
Document
loadingDocument
;
[
noscript
notxpcom
nostdcall
binaryname
(
LoadingNode
)
]
nsINode
binaryLoadingNode
(
)
;
[
noscript
notxpcom
nostdcall
binaryname
(
ContextForTopLevelLoad
)
]
LoadContextRef
binaryContextForTopLevelLoad
(
)
;
[
binaryname
(
LoadingContextXPCOM
)
]
readonly
attribute
nsISupports
loadingContext
;
[
noscript
notxpcom
nostdcall
binaryname
(
GetLoadingContext
)
]
LoadContextRef
binaryGetLoadingContext
(
)
;
readonly
attribute
nsSecurityFlags
securityFlags
;
%
{
C
+
+
inline
nsSecurityFlags
GetSecurityFlags
(
)
{
nsSecurityFlags
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetSecurityFlags
(
&
result
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
result
;
}
%
}
[
infallible
]
readonly
attribute
unsigned
long
sandboxFlags
;
[
infallible
]
readonly
attribute
unsigned
long
securityMode
;
[
infallible
]
attribute
boolean
skipContentSniffing
;
const
unsigned
long
HTTPS_ONLY_UNINITIALIZED
=
(
1
<
<
0
)
;
const
unsigned
long
HTTPS_ONLY_UPGRADED_LISTENER_NOT_REGISTERED
=
(
1
<
<
1
)
;
const
unsigned
long
HTTPS_ONLY_UPGRADED_LISTENER_REGISTERED
=
(
1
<
<
2
)
;
const
unsigned
long
HTTPS_ONLY_EXEMPT
=
(
1
<
<
3
)
;
[
infallible
]
attribute
unsigned
long
httpsOnlyStatus
;
[
infallible
]
attribute
boolean
hasValidUserGestureActivation
;
[
infallible
]
attribute
boolean
allowDeprecatedSystemRequests
;
[
infallible
]
attribute
boolean
parserCreatedScript
;
[
infallible
]
attribute
boolean
isInDevToolsContext
;
[
infallible
]
attribute
boolean
isInThirdPartyContext
;
[
infallible
]
attribute
boolean
isThirdPartyContextToTopWindow
;
[
infallible
]
readonly
attribute
unsigned
long
cookiePolicy
;
attribute
nsICookieJarSettings
cookieJarSettings
;
[
infallible
]
attribute
boolean
hasStoragePermission
;
[
infallible
]
readonly
attribute
boolean
forceInheritPrincipal
;
[
infallible
]
readonly
attribute
boolean
forceInheritPrincipalOverruleOwner
;
[
infallible
]
readonly
attribute
boolean
loadingSandboxed
;
[
infallible
]
readonly
attribute
boolean
aboutBlankInherits
;
[
infallible
]
readonly
attribute
boolean
allowChrome
;
[
infallible
]
readonly
attribute
boolean
disallowScript
;
%
{
C
+
+
uint32_t
CheckLoadURIFlags
(
)
{
uint32_t
flags
=
nsIScriptSecurityManager
:
:
STANDARD
;
if
(
GetAllowChrome
(
)
)
{
flags
|
=
nsIScriptSecurityManager
:
:
ALLOW_CHROME
;
}
if
(
GetDisallowScript
(
)
)
{
flags
|
=
nsIScriptSecurityManager
:
:
DISALLOW_SCRIPT
;
}
return
flags
;
}
%
}
[
infallible
]
readonly
attribute
boolean
dontFollowRedirects
;
[
infallible
]
readonly
attribute
boolean
loadErrorPage
;
[
infallible
]
attribute
boolean
isFormSubmission
;
readonly
attribute
nsContentPolicyType
externalContentPolicyType
;
[
infallible
]
attribute
boolean
sendCSPViolationEvents
;
%
{
C
+
+
inline
nsContentPolicyType
GetExternalContentPolicyType
(
)
{
nsContentPolicyType
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetExternalContentPolicyType
(
&
result
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
result
;
}
%
}
[
noscript
notxpcom
nostdcall
binaryname
(
InternalContentPolicyType
)
]
nsContentPolicyType
binaryInternalContentPolicyType
(
)
;
readonly
attribute
nsContentPolicyType
internalContentPolicyType
;
[
infallible
]
readonly
attribute
boolean
blockAllMixedContent
;
[
infallible
]
readonly
attribute
boolean
upgradeInsecureRequests
;
[
infallible
]
readonly
attribute
boolean
browserUpgradeInsecureRequests
;
[
infallible
]
readonly
attribute
boolean
browserWouldUpgradeInsecureRequests
;
[
infallible
]
attribute
boolean
forceAllowDataURI
;
[
infallible
]
attribute
boolean
allowInsecureRedirectToDataURI
;
[
infallible
]
attribute
boolean
bypassCORSChecks
;
[
infallible
]
attribute
boolean
skipContentPolicyCheckForWebRequest
;
[
infallible
]
attribute
boolean
originalFrameSrcLoad
;
[
infallible
]
readonly
attribute
boolean
forceInheritPrincipalDropped
;
[
infallible
]
readonly
attribute
unsigned
long
long
innerWindowID
;
[
infallible
]
readonly
attribute
unsigned
long
long
outerWindowID
;
[
infallible
]
readonly
attribute
unsigned
long
long
parentOuterWindowID
;
[
infallible
]
readonly
attribute
unsigned
long
long
topOuterWindowID
;
[
infallible
]
readonly
attribute
unsigned
long
long
frameOuterWindowID
;
[
infallible
]
readonly
attribute
unsigned
long
long
browsingContextID
;
readonly
attribute
BrowsingContext
browsingContext
;
[
infallible
]
readonly
attribute
unsigned
long
long
frameBrowsingContextID
;
readonly
attribute
BrowsingContext
frameBrowsingContext
;
[
infallible
]
readonly
attribute
unsigned
long
long
targetBrowsingContextID
;
readonly
attribute
BrowsingContext
targetBrowsingContext
;
void
resetPrincipalToInheritToNullPrincipal
(
)
;
[
implicit_jscontext
binaryname
(
ScriptableOriginAttributes
)
]
attribute
jsval
originAttributes
;
[
noscript
nostdcall
binaryname
(
GetOriginAttributes
)
]
OriginAttributes
binaryGetOriginAttributes
(
)
;
[
noscript
nostdcall
binaryname
(
SetOriginAttributes
)
]
void
binarySetOriginAttributes
(
in
const_OriginAttributesRef
aOriginAttrs
)
;
%
{
C
+
+
inline
mozilla
:
:
OriginAttributes
GetOriginAttributes
(
)
{
mozilla
:
:
OriginAttributes
result
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetOriginAttributes
(
&
result
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
return
result
;
}
%
}
[
infallible
]
attribute
boolean
initialSecurityCheckDone
;
[
infallible
]
attribute
boolean
loadTriggeredFromExternal
;
[
noscript
infallible
]
readonly
attribute
boolean
serviceWorkerTaintingSynthesized
;
void
appendRedirectHistoryEntry
(
in
nsIRedirectHistoryEntry
entry
in
boolean
isInternalRedirect
)
;
[
implicit_jscontext
]
readonly
attribute
jsval
redirectChainIncludingInternalRedirects
;
[
noscript
notxpcom
nostdcall
binaryname
(
RedirectChainIncludingInternalRedirects
)
]
nsIRedirectHistoryEntryArray
binaryRedirectChainIncludingInternalRedirects
(
)
;
[
implicit_jscontext
]
readonly
attribute
jsval
redirectChain
;
[
noscript
notxpcom
nostdcall
binaryname
(
RedirectChain
)
]
nsIRedirectHistoryEntryArray
binaryRedirectChain
(
)
;
[
noscript
notxpcom
nostdcall
]
PrincipalArrayRef
AncestorPrincipals
(
)
;
[
noscript
notxpcom
nostdcall
]
Uint64ArrayRef
AncestorBrowsingContextIDs
(
)
;
[
noscript
notxpcom
nostdcall
]
Uint64ArrayRef
AncestorOuterWindowIDs
(
)
;
[
noscript
notxpcom
nostdcall
]
void
setCorsPreflightInfo
(
in
CStringArrayRef
unsafeHeaders
in
boolean
forcePreflight
)
;
[
noscript
notxpcom
nostdcall
binaryname
(
CorsUnsafeHeaders
)
]
CStringArrayRef
corsUnsafeHeaders
(
)
;
[
infallible
]
readonly
attribute
boolean
forcePreflight
;
[
infallible
]
readonly
attribute
boolean
isPreflight
;
const
unsigned
long
TAINTING_BASIC
=
0
;
const
unsigned
long
TAINTING_CORS
=
1
;
const
unsigned
long
TAINTING_OPAQUE
=
2
;
readonly
attribute
unsigned
long
tainting
;
void
maybeIncreaseTainting
(
in
unsigned
long
aTainting
)
;
%
{
C
+
+
static_assert
(
TAINTING_BASIC
=
=
static_cast
<
uint32_t
>
(
mozilla
:
:
LoadTainting
:
:
Basic
)
"
basic
tainting
enums
should
match
"
)
;
static_assert
(
TAINTING_CORS
=
=
static_cast
<
uint32_t
>
(
mozilla
:
:
LoadTainting
:
:
CORS
)
"
cors
tainting
enums
should
match
"
)
;
static_assert
(
TAINTING_OPAQUE
=
=
static_cast
<
uint32_t
>
(
mozilla
:
:
LoadTainting
:
:
Opaque
)
"
opaque
tainting
enums
should
match
"
)
;
mozilla
:
:
LoadTainting
GetTainting
(
)
{
uint32_t
tainting
=
TAINTING_BASIC
;
MOZ_ALWAYS_SUCCEEDS
(
GetTainting
(
&
tainting
)
)
;
return
static_cast
<
mozilla
:
:
LoadTainting
>
(
tainting
)
;
}
void
MaybeIncreaseTainting
(
mozilla
:
:
LoadTainting
aTainting
)
{
uint32_t
tainting
=
static_cast
<
uint32_t
>
(
aTainting
)
;
MOZ_ALWAYS_SUCCEEDS
(
MaybeIncreaseTainting
(
tainting
)
)
;
}
%
}
[
infallible
]
readonly
attribute
boolean
isTopLevelLoad
;
attribute
nsIURI
resultPrincipalURI
;
[
notxpcom
nostdcall
]
readonly
attribute
nsIPrincipal
sandboxedLoadingPrincipal
;
[
notxpcom
nostdcall
]
readonly
attribute
nsIPrincipal
topLevelPrincipal
;
[
notxpcom
nostdcall
]
readonly
attribute
nsIPrincipal
topLevelStorageAreaPrincipal
;
[
noscript
nostdcall
notxpcom
]
void
SetClientInfo
(
in
const_ClientInfoRef
aClientInfo
)
;
[
noscript
nostdcall
notxpcom
]
const_MaybeClientInfoRef
GetClientInfo
(
)
;
[
noscript
nostdcall
notxpcom
]
void
GiveReservedClientSource
(
in
UniqueClientSourceMove
aClientSource
)
;
[
noscript
nostdcall
notxpcom
]
UniqueClientSource
TakeReservedClientSource
(
)
;
[
noscript
nostdcall
notxpcom
]
void
SetReservedClientInfo
(
in
const_ClientInfoRef
aClientInfo
)
;
[
noscript
nostdcall
notxpcom
]
void
OverrideReservedClientInfoInParent
(
in
const_ClientInfoRef
aClientInfo
)
;
[
noscript
nostdcall
notxpcom
]
const_MaybeClientInfoRef
GetReservedClientInfo
(
)
;
[
noscript
nostdcall
notxpcom
]
void
SetInitialClientInfo
(
in
const_ClientInfoRef
aClientInfo
)
;
[
noscript
nostdcall
notxpcom
]
const_MaybeClientInfoRef
GetInitialClientInfo
(
)
;
[
noscript
nostdcall
notxpcom
]
void
SetController
(
in
const_ServiceWorkerDescriptorRef
aServiceWorker
)
;
[
noscript
nostdcall
notxpcom
]
void
ClearController
(
)
;
[
noscript
nostdcall
notxpcom
]
const_MaybeServiceWorkerDescriptorRef
GetController
(
)
;
[
noscript
nostdcall
notxpcom
]
void
SetPerformanceStorage
(
in
PerformanceStoragePtr
aPerformanceStorage
)
;
[
noscript
nostdcall
notxpcom
]
PerformanceStoragePtr
GetPerformanceStorage
(
)
;
[
notxpcom
nostdcall
]
CSPRef
GetCsp
(
)
;
[
notxpcom
nostdcall
]
CSPRef
GetPreloadCsp
(
)
;
[
notxpcom
nostdcall
]
CSPRef
GetCspToInherit
(
)
;
[
noscript
nostdcall
notxpcom
]
void
SynthesizeServiceWorkerTainting
(
in
LoadTainting
aTainting
)
;
[
infallible
]
attribute
boolean
documentHasUserInteracted
;
[
infallible
]
attribute
boolean
documentHasLoaded
;
[
infallible
]
attribute
boolean
allowListFutureDocumentsCreatedFromThisRedirectChain
;
attribute
AString
cspNonce
;
const
uint32_t
BLOCKING_REASON_NONE
=
0
;
const
uint32_t
BLOCKING_REASON_CORSDISABLED
=
1001
;
const
uint32_t
BLOCKING_REASON_CORSDIDNOTSUCCEED
=
1002
;
const
uint32_t
BLOCKING_REASON_CORSREQUESTNOTHTTP
=
1003
;
const
uint32_t
BLOCKING_REASON_CORSMULTIPLEALLOWORIGINNOTALLOWED
=
1004
;
const
uint32_t
BLOCKING_REASON_CORSMISSINGALLOWORIGIN
=
1005
;
const
uint32_t
BLOCKING_REASON_CORSNOTSUPPORTINGCREDENTIALS
=
1006
;
const
uint32_t
BLOCKING_REASON_CORSALLOWORIGINNOTMATCHINGORIGIN
=
1007
;
const
uint32_t
BLOCKING_REASON_CORSMISSINGALLOWCREDENTIALS
=
1008
;
const
uint32_t
BLOCKING_REASON_CORSORIGINHEADERNOTADDED
=
1009
;
const
uint32_t
BLOCKING_REASON_CORSEXTERNALREDIRECTNOTALLOWED
=
1010
;
const
uint32_t
BLOCKING_REASON_CORSPREFLIGHTDIDNOTSUCCEED
=
1011
;
const
uint32_t
BLOCKING_REASON_CORSINVALIDALLOWMETHOD
=
1012
;
const
uint32_t
BLOCKING_REASON_CORSMETHODNOTFOUND
=
1013
;
const
uint32_t
BLOCKING_REASON_CORSINVALIDALLOWHEADER
=
1014
;
const
uint32_t
BLOCKING_REASON_CORSMISSINGALLOWHEADERFROMPREFLIGHT
=
1015
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_MALWARE_URI
=
2001
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_PHISHING_URI
=
2002
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_UNWANTED_URI
=
2003
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_TRACKING_URI
=
2004
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_BLOCKED_URI
=
2005
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_HARMFUL_URI
=
2006
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_CRYPTOMINING_URI
=
2007
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_FINGERPRINTING_URI
=
2008
;
const
uint32_t
BLOCKING_REASON_CLASSIFY_SOCIALTRACKING_URI
=
2009
;
const
uint32_t
BLOCKING_REASON_MIXED_BLOCKED
=
3001
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_GENERAL
=
4000
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_NO_DATA_PROTOCOL
=
4001
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_WEBEXT
=
4002
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_CONTENT_BLOCKED
=
4003
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_DATA_DOCUMENT
=
4004
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_WEB_BROWSER
=
4005
;
const
uint32_t
BLOCKING_REASON_CONTENT_POLICY_PRELOAD
=
4006
;
const
uint32_t
BLOCKING_REASON_NOT_SAME_ORIGIN
=
5000
;
const
uint32_t
BLOCKING_REASON_EXTENSION_WEBREQUEST
=
6000
;
[
infallible
]
attribute
unsigned
long
requestBlockingReason
;
attribute
nsICSPEventListener
cspEventListener
;
[
infallible
]
readonly
attribute
boolean
isFromProcessingFrameAttributes
;
cenum
CrossOriginOpenerPolicy
:
8
{
OPENER_POLICY_UNSAFE_NONE
=
0
OPENER_POLICY_SAME_ORIGIN
=
1
OPENER_POLICY_SAME_ORIGIN_ALLOW_POPUPS
=
2
OPENER_POLICY_EMBEDDER_POLICY_REQUIRE_CORP_FLAG
=
0x10
OPENER_POLICY_SAME_ORIGIN_EMBEDDER_POLICY_REQUIRE_CORP
=
OPENER_POLICY_SAME_ORIGIN
|
OPENER_POLICY_EMBEDDER_POLICY_REQUIRE_CORP_FLAG
}
;
cenum
CrossOriginEmbedderPolicy
:
8
{
EMBEDDER_POLICY_NULL
=
0
EMBEDDER_POLICY_REQUIRE_CORP
=
1
}
;
[
infallible
]
attribute
nsILoadInfo_CrossOriginEmbedderPolicy
loadingEmbedderPolicy
;
}
;
