#
include
"
nsDNSPrefetch
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIDNSListener
.
h
"
#
include
"
nsIDNSService
.
h
"
#
include
"
nsICancelable
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
static
nsIDNSService
*
sDNSService
=
nullptr
;
static
bool
sESNIEnabled
=
false
;
nsresult
nsDNSPrefetch
:
:
Initialize
(
nsIDNSService
*
aDNSService
)
{
NS_IF_RELEASE
(
sDNSService
)
;
sDNSService
=
aDNSService
;
NS_IF_ADDREF
(
sDNSService
)
;
mozilla
:
:
Preferences
:
:
AddBoolVarCache
(
&
sESNIEnabled
"
network
.
security
.
esni
.
enabled
"
)
;
return
NS_OK
;
}
nsresult
nsDNSPrefetch
:
:
Shutdown
(
)
{
NS_IF_RELEASE
(
sDNSService
)
;
return
NS_OK
;
}
nsDNSPrefetch
:
:
nsDNSPrefetch
(
nsIURI
*
aURI
mozilla
:
:
OriginAttributes
&
aOriginAttributes
nsIDNSListener
*
aListener
bool
storeTiming
)
:
mOriginAttributes
(
aOriginAttributes
)
mStoreTiming
(
storeTiming
)
mListener
(
do_GetWeakReference
(
aListener
)
)
mARequestInProgress
(
false
)
mEsniKeysRequestInProgress
(
false
)
{
aURI
-
>
GetAsciiHost
(
mHostname
)
;
mIsHttps
=
false
;
aURI
-
>
SchemeIs
(
"
https
"
&
mIsHttps
)
;
}
nsresult
nsDNSPrefetch
:
:
Prefetch
(
uint16_t
flags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Expecting
DNS
callback
on
main
thread
.
"
)
;
if
(
mHostname
.
IsEmpty
(
)
)
return
NS_ERROR_NOT_AVAILABLE
;
if
(
!
sDNSService
)
return
NS_ERROR_NOT_AVAILABLE
;
if
(
mStoreTiming
)
mStartTimestamp
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
nsCOMPtr
<
nsIEventTarget
>
main
=
mozilla
:
:
GetMainThreadEventTarget
(
)
;
nsresult
rv
=
sDNSService
-
>
AsyncResolveNative
(
mHostname
flags
|
nsIDNSService
:
:
RESOLVE_SPECULATE
this
main
mOriginAttributes
getter_AddRefs
(
mARequest
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
mARequestInProgress
=
true
;
if
(
sESNIEnabled
&
&
mIsHttps
)
{
nsAutoCString
esniHost
;
esniHost
.
Append
(
"
_esni
.
"
)
;
esniHost
.
Append
(
mHostname
)
;
nsCOMPtr
<
nsICancelable
>
tmpOutstanding
;
sDNSService
-
>
AsyncResolveByTypeNative
(
esniHost
nsIDNSService
:
:
RESOLVE_TYPE_TXT
flags
|
nsIDNSService
:
:
RESOLVE_SPECULATE
this
main
mOriginAttributes
getter_AddRefs
(
tmpOutstanding
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mEsniKeysRequestInProgress
=
true
;
}
}
return
NS_OK
;
}
nsresult
nsDNSPrefetch
:
:
PrefetchLow
(
bool
refreshDNS
)
{
return
Prefetch
(
nsIDNSService
:
:
RESOLVE_PRIORITY_LOW
|
(
refreshDNS
?
nsIDNSService
:
:
RESOLVE_BYPASS_CACHE
:
0
)
)
;
}
nsresult
nsDNSPrefetch
:
:
PrefetchMedium
(
bool
refreshDNS
)
{
return
Prefetch
(
nsIDNSService
:
:
RESOLVE_PRIORITY_MEDIUM
|
(
refreshDNS
?
nsIDNSService
:
:
RESOLVE_BYPASS_CACHE
:
0
)
)
;
}
nsresult
nsDNSPrefetch
:
:
PrefetchHigh
(
bool
refreshDNS
)
{
return
Prefetch
(
refreshDNS
?
nsIDNSService
:
:
RESOLVE_BYPASS_CACHE
:
0
)
;
}
void
nsDNSPrefetch
:
:
FinishPrefetch
(
)
{
if
(
mStoreTiming
)
{
mEndTimestamp
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
}
nsCOMPtr
<
nsIDNSListener
>
listener
=
do_QueryReferent
(
mListener
)
;
if
(
listener
)
{
listener
-
>
OnLookupComplete
(
mARequest
mARecord
mAStatus
)
;
}
}
NS_IMPL_ISUPPORTS
(
nsDNSPrefetch
nsIDNSListener
)
NS_IMETHODIMP
nsDNSPrefetch
:
:
OnLookupComplete
(
nsICancelable
*
request
nsIDNSRecord
*
rec
nsresult
status
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Expecting
DNS
callback
on
main
thread
.
"
)
;
MOZ_ASSERT
(
mARequest
)
;
MOZ_ASSERT
(
mARequestInProgress
)
;
mARequestInProgress
=
false
;
mARecord
=
rec
;
mAStatus
=
status
;
if
(
!
mEsniKeysRequestInProgress
)
{
FinishPrefetch
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsDNSPrefetch
:
:
OnLookupByTypeComplete
(
nsICancelable
*
request
nsIDNSByTypeRecord
*
res
nsresult
status
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Expecting
DNS
callback
on
main
thread
.
"
)
;
MOZ_ASSERT
(
mEsniKeysRequestInProgress
)
;
mEsniKeysRequestInProgress
=
false
;
if
(
!
mARequestInProgress
)
{
FinishPrefetch
(
)
;
}
return
NS_OK
;
}
