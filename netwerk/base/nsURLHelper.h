#
ifndef
nsURLHelper_h__
#
define
nsURLHelper_h__
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsASCIIMask
.
h
"
class
nsIFile
;
class
nsIURLParser
;
enum
netCoalesceFlags
{
NET_COALESCE_NORMAL
=
0
NET_COALESCE_ALLOW_RELATIVE_ROOT
=
1
<
<
0
NET_COALESCE_DOUBLE_SLASH_IS_ROOT
=
1
<
<
1
}
;
void
net_ShutdownURLHelper
(
)
;
#
ifdef
XP_MACOSX
void
net_ShutdownURLHelperOSX
(
)
;
#
endif
nsIURLParser
*
net_GetAuthURLParser
(
)
;
nsIURLParser
*
net_GetNoAuthURLParser
(
)
;
nsIURLParser
*
net_GetStdURLParser
(
)
;
nsresult
net_GetURLSpecFromFile
(
nsIFile
*
nsACString
&
)
;
nsresult
net_GetURLSpecFromDir
(
nsIFile
*
nsACString
&
)
;
nsresult
net_GetURLSpecFromActualFile
(
nsIFile
*
nsACString
&
)
;
nsresult
net_GetFileFromURLSpec
(
const
nsACString
&
nsIFile
*
*
)
;
nsresult
net_ParseFileURL
(
const
nsACString
&
inURL
nsACString
&
outDirectory
nsACString
&
outFileBaseName
nsACString
&
outFileExtension
)
;
void
net_CoalesceDirs
(
netCoalesceFlags
flags
char
*
path
)
;
bool
net_IsAbsoluteURL
(
const
nsACString
&
uri
)
;
nsresult
net_ExtractURLScheme
(
const
nsACString
&
inURI
nsACString
&
scheme
)
;
bool
net_IsValidScheme
(
const
nsACString
&
scheme
)
;
void
net_FilterURIString
(
const
nsACString
&
input
nsACString
&
result
)
;
nsresult
net_FilterAndEscapeURI
(
const
nsACString
&
aInput
uint32_t
aFlags
const
ASCIIMaskArray
&
aFilterMask
nsACString
&
aResult
)
;
#
if
defined
(
XP_WIN
)
bool
net_NormalizeFileURL
(
const
nsACString
&
aURL
nsCString
&
aResultBuf
)
;
#
endif
void
net_ToLowerCase
(
char
*
str
uint32_t
length
)
;
void
net_ToLowerCase
(
char
*
str
)
;
char
*
net_FindCharInSet
(
const
char
*
iter
const
char
*
stop
const
char
*
set
)
;
char
*
net_FindCharNotInSet
(
const
char
*
iter
const
char
*
stop
const
char
*
set
)
;
char
*
net_RFindCharNotInSet
(
const
char
*
stop
const
char
*
iter
const
char
*
set
)
;
void
net_ParseRequestContentType
(
const
nsACString
&
aHeaderStr
nsACString
&
aContentType
nsACString
&
aContentCharset
bool
*
aHadCharset
)
;
void
net_ParseContentType
(
const
nsACString
&
aHeaderStr
nsACString
&
aContentType
nsACString
&
aContentCharset
bool
*
aHadCharset
)
;
void
net_ParseContentType
(
const
nsACString
&
aHeaderStr
nsACString
&
aContentType
nsACString
&
aContentCharset
bool
*
aHadCharset
int32_t
*
aCharsetStart
int32_t
*
aCharsetEnd
)
;
#
define
NET_MAX_ADDRESS
(
(
char
*
)
UINTPTR_MAX
)
inline
char
*
net_FindCharInSet
(
const
char
*
str
const
char
*
set
)
{
return
net_FindCharInSet
(
str
NET_MAX_ADDRESS
set
)
;
}
inline
char
*
net_FindCharNotInSet
(
const
char
*
str
const
char
*
set
)
{
return
net_FindCharNotInSet
(
str
NET_MAX_ADDRESS
set
)
;
}
inline
char
*
net_RFindCharNotInSet
(
const
char
*
str
const
char
*
set
)
{
return
net_RFindCharNotInSet
(
str
str
+
strlen
(
str
)
set
)
;
}
bool
net_IsValidHostName
(
const
nsACString
&
host
)
;
bool
net_IsValidIPv4Addr
(
const
nsACString
&
aAddr
)
;
bool
net_IsValidIPv6Addr
(
const
nsACString
&
aAddr
)
;
bool
net_GetDefaultStatusTextForCode
(
uint16_t
aCode
nsACString
&
aOutText
)
;
namespace
mozilla
{
class
URLParams
final
{
public
:
template
<
typename
ParamHandler
>
static
bool
Parse
(
const
nsACString
&
aInput
bool
aShouldDecode
ParamHandler
aParamHandler
)
{
const
char
*
start
=
aInput
.
BeginReading
(
)
;
const
char
*
const
end
=
aInput
.
EndReading
(
)
;
while
(
start
!
=
end
)
{
nsAutoString
name
;
nsAutoString
value
;
if
(
!
ParseNextInternal
(
start
end
aShouldDecode
&
name
&
value
)
)
{
continue
;
}
if
(
!
aParamHandler
(
std
:
:
move
(
name
)
std
:
:
move
(
value
)
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
Extract
(
const
nsACString
&
aInput
const
nsAString
&
aName
nsAString
&
aValue
)
;
void
ParseInput
(
const
nsACString
&
aInput
)
;
void
Serialize
(
nsAString
&
aValue
bool
aEncode
)
const
;
void
Get
(
const
nsAString
&
aName
nsString
&
aRetval
)
;
void
GetAll
(
const
nsAString
&
aName
nsTArray
<
nsString
>
&
aRetval
)
;
void
Set
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
;
void
Append
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
;
bool
Has
(
const
nsAString
&
aName
)
;
bool
Has
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
;
void
Delete
(
const
nsAString
&
aName
)
;
void
Delete
(
const
nsAString
&
aName
const
nsAString
&
aValue
)
;
void
DeleteAll
(
)
{
mParams
.
Clear
(
)
;
}
uint32_t
Length
(
)
const
{
return
mParams
.
Length
(
)
;
}
const
nsAString
&
GetKeyAtIndex
(
uint32_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
<
mParams
.
Length
(
)
)
;
return
mParams
[
aIndex
]
.
mKey
;
}
const
nsAString
&
GetValueAtIndex
(
uint32_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
<
mParams
.
Length
(
)
)
;
return
mParams
[
aIndex
]
.
mValue
;
}
void
Sort
(
)
;
private
:
static
void
DecodeString
(
const
nsACString
&
aInput
nsAString
&
aOutput
)
;
static
void
ConvertString
(
const
nsACString
&
aInput
nsAString
&
aOutput
)
;
static
bool
ParseNextInternal
(
const
char
*
&
aStart
const
char
*
aEnd
bool
aShouldDecode
nsAString
*
aOutputName
nsAString
*
aOutputValue
)
;
struct
Param
{
nsString
mKey
;
nsString
mValue
;
}
;
nsTArray
<
Param
>
mParams
;
}
;
}
#
endif
