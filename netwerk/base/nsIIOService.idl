#
include
"
nsISupports
.
idl
"
#
include
"
nsIContentPolicy
.
idl
"
interface
nsIProtocolHandler
;
interface
nsIChannel
;
interface
nsIURI
;
interface
nsIFile
;
interface
nsIPrincipal
;
interface
nsILoadInfo
;
webidl
Node
;
%
{
C
+
+
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ClientInfo
;
class
ServiceWorkerDescriptor
;
}
}
%
}
[
ref
]
native
const_MaybeClientInfoRef
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ClientInfo
>
)
;
[
ref
]
native
const_MaybeServiceWorkerDescriptorRef
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
dom
:
:
ServiceWorkerDescriptor
>
)
;
[
scriptable
builtinclass
uuid
(
4286de5a
-
b2ea
-
446f
-
8f70
-
e2a461f42694
)
]
interface
nsIIOService
:
nsISupports
{
nsIProtocolHandler
getProtocolHandler
(
in
string
aScheme
)
;
unsigned
long
getProtocolFlags
(
in
string
aScheme
)
;
nsIURI
newURI
(
in
AUTF8String
aSpec
[
optional
]
in
string
aOriginCharset
[
optional
]
in
nsIURI
aBaseURI
)
;
nsIURI
newFileURI
(
in
nsIFile
aFile
)
;
nsIURI
createExposableURI
(
in
nsIURI
aURI
)
;
nsIChannel
newChannelFromURI
(
in
nsIURI
aURI
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
)
;
[
noscript
nostdcall
notxpcom
]
nsresult
NewChannelFromURIWithClientAndController
(
in
nsIURI
aURI
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
const_MaybeClientInfoRef
aLoadingClientInfo
in
const_MaybeServiceWorkerDescriptorRef
aController
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
in
unsigned
long
aSandboxFlags
out
nsIChannel
aResult
)
;
nsIChannel
newChannelFromURIWithLoadInfo
(
in
nsIURI
aURI
in
nsILoadInfo
aLoadInfo
)
;
nsIChannel
newChannel
(
in
AUTF8String
aSpec
in
string
aOriginCharset
in
nsIURI
aBaseURI
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
)
;
attribute
boolean
offline
;
readonly
attribute
boolean
connectivity
;
boolean
allowPort
(
in
long
aPort
in
string
aScheme
)
;
ACString
extractScheme
(
in
AUTF8String
urlString
)
;
boolean
hostnameIsLocalIPAddress
(
in
nsIURI
aURI
)
;
boolean
hostnameIsSharedIPAddress
(
in
nsIURI
aURI
)
;
attribute
boolean
manageOfflineStatus
;
nsIChannel
newChannelFromURIWithProxyFlags
(
in
nsIURI
aURI
in
nsIURI
aProxyURI
in
unsigned
long
aProxyFlags
in
Node
aLoadingNode
in
nsIPrincipal
aLoadingPrincipal
in
nsIPrincipal
aTriggeringPrincipal
in
unsigned
long
aSecurityFlags
in
nsContentPolicyType
aContentPolicyType
)
;
readonly
attribute
boolean
socketProcessLaunched
;
readonly
attribute
unsigned
long
long
socketProcessId
;
}
;
%
{
C
+
+
#
define
NS_IOSERVICE_GOING_OFFLINE_TOPIC
"
network
:
offline
-
about
-
to
-
go
-
offline
"
#
define
NS_IOSERVICE_OFFLINE_STATUS_TOPIC
"
network
:
offline
-
status
-
changed
"
#
define
NS_IOSERVICE_OFFLINE
"
offline
"
#
define
NS_IOSERVICE_ONLINE
"
online
"
%
}
[
builtinclass
uuid
(
6633c0bf
-
d97a
-
428f
-
8ece
-
cb6a655fb95a
)
]
interface
nsIIOServiceInternal
:
nsISupports
{
void
SetConnectivity
(
in
boolean
connectivity
)
;
void
NotifyWakeup
(
)
;
}
;
